
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011ed8 <.init>:
   11ed8:	push	{r3, lr}
   11edc:	bl	1212c <_start@@Base+0x3c>
   11ee0:	pop	{r3, pc}

Disassembly of section .plt:

00011ee4 <fdopen@plt-0x14>:
   11ee4:	push	{lr}		; (str lr, [sp, #-4]!)
   11ee8:	ldr	lr, [pc, #4]	; 11ef4 <fdopen@plt-0x4>
   11eec:	add	lr, pc, lr
   11ef0:	ldr	pc, [lr, #8]!
   11ef4:	andeq	sl, r1, ip, lsl #2

00011ef8 <fdopen@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #106496	; 0x1a000
   11f00:	ldr	pc, [ip, #268]!	; 0x10c

00011f04 <strtol@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #106496	; 0x1a000
   11f0c:	ldr	pc, [ip, #260]!	; 0x104

00011f10 <fopen@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #106496	; 0x1a000
   11f18:	ldr	pc, [ip, #252]!	; 0xfc

00011f1c <fflush@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #106496	; 0x1a000
   11f24:	ldr	pc, [ip, #244]!	; 0xf4

00011f28 <free@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #106496	; 0x1a000
   11f30:	ldr	pc, [ip, #236]!	; 0xec

00011f34 <memcpy@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #106496	; 0x1a000
   11f3c:	ldr	pc, [ip, #228]!	; 0xe4

00011f40 <mmap64@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #106496	; 0x1a000
   11f48:	ldr	pc, [ip, #220]!	; 0xdc

00011f4c <ftell@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #106496	; 0x1a000
   11f54:	ldr	pc, [ip, #212]!	; 0xd4

00011f58 <uname@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #106496	; 0x1a000
   11f60:	ldr	pc, [ip, #204]!	; 0xcc

00011f64 <strdup@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #106496	; 0x1a000
   11f6c:	ldr	pc, [ip, #196]!	; 0xc4

00011f70 <realloc@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #106496	; 0x1a000
   11f78:	ldr	pc, [ip, #188]!	; 0xbc

00011f7c <fwrite@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #106496	; 0x1a000
   11f84:	ldr	pc, [ip, #180]!	; 0xb4

00011f88 <open64@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #106496	; 0x1a000
   11f90:	ldr	pc, [ip, #172]!	; 0xac

00011f94 <getenv@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #106496	; 0x1a000
   11f9c:	ldr	pc, [ip, #164]!	; 0xa4

00011fa0 <malloc@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #106496	; 0x1a000
   11fa8:	ldr	pc, [ip, #156]!	; 0x9c

00011fac <__libc_start_main@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #106496	; 0x1a000
   11fb4:	ldr	pc, [ip, #148]!	; 0x94

00011fb8 <strerror@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #106496	; 0x1a000
   11fc0:	ldr	pc, [ip, #140]!	; 0x8c

00011fc4 <__gmon_start__@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #106496	; 0x1a000
   11fcc:	ldr	pc, [ip, #132]!	; 0x84

00011fd0 <getpid@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #106496	; 0x1a000
   11fd8:	ldr	pc, [ip, #124]!	; 0x7c

00011fdc <exit@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #106496	; 0x1a000
   11fe4:	ldr	pc, [ip, #116]!	; 0x74

00011fe8 <strlen@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #106496	; 0x1a000
   11ff0:	ldr	pc, [ip, #108]!	; 0x6c

00011ff4 <strchr@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #106496	; 0x1a000
   11ffc:	ldr	pc, [ip, #100]!	; 0x64

00012000 <getopt@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #106496	; 0x1a000
   12008:	ldr	pc, [ip, #92]!	; 0x5c

0001200c <fprintf@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #106496	; 0x1a000
   12014:	ldr	pc, [ip, #84]!	; 0x54

00012018 <__errno_location@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #106496	; 0x1a000
   12020:	ldr	pc, [ip, #76]!	; 0x4c

00012024 <__cxa_atexit@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #106496	; 0x1a000
   1202c:	ldr	pc, [ip, #68]!	; 0x44

00012030 <mkdir@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #106496	; 0x1a000
   12038:	ldr	pc, [ip, #60]!	; 0x3c

0001203c <memset@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #106496	; 0x1a000
   12044:	ldr	pc, [ip, #52]!	; 0x34

00012048 <strncpy@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #106496	; 0x1a000
   12050:	ldr	pc, [ip, #44]!	; 0x2c

00012054 <prctl@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #106496	; 0x1a000
   1205c:	ldr	pc, [ip, #36]!	; 0x24

00012060 <fclose@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #106496	; 0x1a000
   12068:	ldr	pc, [ip, #28]!

0001206c <strnlen@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #106496	; 0x1a000
   12074:	ldr	pc, [ip, #20]!

00012078 <munmap@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #106496	; 0x1a000
   12080:	ldr	pc, [ip, #12]!

00012084 <fcntl64@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #106496	; 0x1a000
   1208c:	ldr	pc, [ip, #4]!

00012090 <strrchr@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #102400	; 0x19000
   12098:	ldr	pc, [ip, #4092]!	; 0xffc

0001209c <fputc@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #102400	; 0x19000
   120a4:	ldr	pc, [ip, #4084]!	; 0xff4

000120a8 <msync@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #102400	; 0x19000
   120b0:	ldr	pc, [ip, #4076]!	; 0xfec

000120b4 <atoi@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #102400	; 0x19000
   120bc:	ldr	pc, [ip, #4068]!	; 0xfe4

000120c0 <fread_unlocked@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #102400	; 0x19000
   120c8:	ldr	pc, [ip, #4060]!	; 0xfdc

000120cc <fseek@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #102400	; 0x19000
   120d4:	ldr	pc, [ip, #4052]!	; 0xfd4

000120d8 <strncmp@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #102400	; 0x19000
   120e0:	ldr	pc, [ip, #4044]!	; 0xfcc

000120e4 <abort@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #102400	; 0x19000
   120ec:	ldr	pc, [ip, #4036]!	; 0xfc4

Disassembly of section .text:

000120f0 <_start@@Base>:
   120f0:	mov	fp, #0
   120f4:	mov	lr, #0
   120f8:	pop	{r1}		; (ldr r1, [sp], #4)
   120fc:	mov	r2, sp
   12100:	push	{r2}		; (str r2, [sp, #-4]!)
   12104:	push	{r0}		; (str r0, [sp, #-4]!)
   12108:	ldr	ip, [pc, #16]	; 12120 <_start@@Base+0x30>
   1210c:	push	{ip}		; (str ip, [sp, #-4]!)
   12110:	ldr	r0, [pc, #12]	; 12124 <_start@@Base+0x34>
   12114:	ldr	r3, [pc, #12]	; 12128 <_start@@Base+0x38>
   12118:	bl	11fac <__libc_start_main@plt>
   1211c:	bl	120e4 <abort@plt>
   12120:	muleq	r1, r4, r4
   12124:			; <UNDEFINED> instruction: 0x000124b8
   12128:	andeq	sl, r1, r4, lsr r4
   1212c:	ldr	r3, [pc, #20]	; 12148 <_start@@Base+0x58>
   12130:	ldr	r2, [pc, #20]	; 1214c <_start@@Base+0x5c>
   12134:	add	r3, pc, r3
   12138:	ldr	r2, [r3, r2]
   1213c:	cmp	r2, #0
   12140:	bxeq	lr
   12144:	b	11fc4 <__gmon_start__@plt>
   12148:	andeq	r9, r1, r4, asr #29
   1214c:	andeq	r0, r0, r4, asr #1
   12150:	ldr	r0, [pc, #24]	; 12170 <_start@@Base+0x80>
   12154:	ldr	r3, [pc, #24]	; 12174 <_start@@Base+0x84>
   12158:	cmp	r3, r0
   1215c:	bxeq	lr
   12160:	ldr	r3, [pc, #16]	; 12178 <_start@@Base+0x88>
   12164:	cmp	r3, #0
   12168:	bxeq	lr
   1216c:	bx	r3
   12170:	strdeq	ip, [r2], -r4
   12174:	strdeq	ip, [r2], -r4
   12178:	andeq	r0, r0, r0
   1217c:	ldr	r0, [pc, #36]	; 121a8 <_start@@Base+0xb8>
   12180:	ldr	r1, [pc, #36]	; 121ac <_start@@Base+0xbc>
   12184:	sub	r1, r1, r0
   12188:	asr	r1, r1, #2
   1218c:	add	r1, r1, r1, lsr #31
   12190:	asrs	r1, r1, #1
   12194:	bxeq	lr
   12198:	ldr	r3, [pc, #16]	; 121b0 <_start@@Base+0xc0>
   1219c:	cmp	r3, #0
   121a0:	bxeq	lr
   121a4:	bx	r3
   121a8:	strdeq	ip, [r2], -r4
   121ac:	strdeq	ip, [r2], -r4
   121b0:	andeq	r0, r0, r0
   121b4:	push	{r4, lr}
   121b8:	ldr	r4, [pc, #24]	; 121d8 <_start@@Base+0xe8>
   121bc:	ldrb	r3, [r4]
   121c0:	cmp	r3, #0
   121c4:	popne	{r4, pc}
   121c8:	bl	12150 <_start@@Base+0x60>
   121cc:	mov	r3, #1
   121d0:	strb	r3, [r4]
   121d4:	pop	{r4, pc}
   121d8:	andeq	ip, r2, r4, lsl r1
   121dc:	b	1217c <_start@@Base+0x8c>

000121e0 <load_file@@Base>:
   121e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   121e4:	add	fp, sp, #24
   121e8:	movw	r4, #49440	; 0xc120
   121ec:	mov	r8, r0
   121f0:	movt	r4, #2
   121f4:	ldrd	r0, [r4]
   121f8:	adds	r0, r0, #1
   121fc:	adc	r1, r1, #0
   12200:	strd	r0, [r4]
   12204:	movw	r1, #44003	; 0xabe3
   12208:	mov	r0, r8
   1220c:	movt	r1, #1
   12210:	bl	11f10 <fopen@plt>
   12214:	mov	r5, r0
   12218:	mov	r0, #16
   1221c:	mov	r1, r4
   12220:	mov	r6, #0
   12224:	cmp	r5, #0
   12228:	movwne	r0, #8
   1222c:	ldr	r0, [r1, r0]!
   12230:	adds	r0, r0, #1
   12234:	str	r0, [r1]
   12238:	ldr	r0, [r1, #4]
   1223c:	adc	r0, r0, #0
   12240:	cmp	r5, #0
   12244:	str	r0, [r1, #4]
   12248:	beq	12388 <load_file@@Base+0x1a8>
   1224c:	mov	r0, r5
   12250:	mov	r1, #0
   12254:	mov	r2, #2
   12258:	bl	120cc <fseek@plt>
   1225c:	mov	r1, #32
   12260:	cmp	r0, #0
   12264:	mov	r2, r4
   12268:	movweq	r1, #24
   1226c:	ldr	r1, [r2, r1]!
   12270:	adds	r1, r1, #1
   12274:	str	r1, [r2]
   12278:	ldr	r1, [r2, #4]
   1227c:	adc	r1, r1, #0
   12280:	cmp	r0, #0
   12284:	str	r1, [r2, #4]
   12288:	bne	12370 <load_file@@Base+0x190>
   1228c:	mov	r0, r5
   12290:	bl	11f4c <ftell@plt>
   12294:	mov	r7, r0
   12298:	mov	r0, #48	; 0x30
   1229c:	mov	r1, r4
   122a0:	cmn	r7, #1
   122a4:	movweq	r0, #40	; 0x28
   122a8:	ldr	r0, [r1, r0]!
   122ac:	adds	r0, r0, #1
   122b0:	str	r0, [r1]
   122b4:	ldr	r0, [r1, #4]
   122b8:	adc	r0, r0, #0
   122bc:	cmn	r7, #1
   122c0:	str	r0, [r1, #4]
   122c4:	beq	123a0 <load_file@@Base+0x1c0>
   122c8:	add	r0, r7, #1
   122cc:	bl	11fa0 <malloc@plt>
   122d0:	mov	r6, r0
   122d4:	mov	r0, r5
   122d8:	mov	r1, #0
   122dc:	mov	r2, #0
   122e0:	bl	120cc <fseek@plt>
   122e4:	mov	r1, #64	; 0x40
   122e8:	cmp	r0, #0
   122ec:	mov	r2, r4
   122f0:	movwne	r1, #56	; 0x38
   122f4:	ldr	r1, [r2, r1]!
   122f8:	adds	r1, r1, #1
   122fc:	str	r1, [r2]
   12300:	ldr	r1, [r2, #4]
   12304:	adc	r1, r1, #0
   12308:	cmp	r0, #0
   1230c:	str	r1, [r2, #4]
   12310:	bne	123bc <load_file@@Base+0x1dc>
   12314:	mov	r0, r6
   12318:	mov	r1, #1
   1231c:	mov	r2, r7
   12320:	mov	r3, r5
   12324:	bl	120c0 <fread_unlocked@plt>
   12328:	mov	r1, #80	; 0x50
   1232c:	cmp	r0, #0
   12330:	mov	r2, r4
   12334:	movweq	r1, #72	; 0x48
   12338:	ldr	r1, [r2, r1]!
   1233c:	adds	r1, r1, #1
   12340:	str	r1, [r2]
   12344:	ldr	r1, [r2, #4]
   12348:	adc	r1, r1, #0
   1234c:	cmp	r0, #0
   12350:	str	r1, [r2, #4]
   12354:	beq	123e4 <load_file@@Base+0x204>
   12358:	ldrd	r2, [r4, #88]	; 0x58
   1235c:	mov	r1, #0
   12360:	strb	r1, [r6, r0]
   12364:	adds	r2, r2, #1
   12368:	adc	r3, r3, #0
   1236c:	strd	r2, [r4, #88]	; 0x58
   12370:	ldrd	r0, [r4, #96]	; 0x60
   12374:	adds	r0, r0, #1
   12378:	adc	r1, r1, #0
   1237c:	strd	r0, [r4, #96]	; 0x60
   12380:	mov	r0, r5
   12384:	bl	12060 <fclose@plt>
   12388:	ldrd	r0, [r4, #104]	; 0x68
   1238c:	adds	r0, r0, #1
   12390:	adc	r1, r1, #0
   12394:	strd	r0, [r4, #104]	; 0x68
   12398:	mov	r0, r6
   1239c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123a0:	movw	r0, #49416	; 0xc108
   123a4:	mov	r1, #51	; 0x33
   123a8:	movt	r0, #2
   123ac:	ldr	r3, [r0]
   123b0:	movw	r0, #42180	; 0xa4c4
   123b4:	movt	r0, #1
   123b8:	b	123d4 <load_file@@Base+0x1f4>
   123bc:	movw	r0, #49416	; 0xc108
   123c0:	mov	r1, #49	; 0x31
   123c4:	movt	r0, #2
   123c8:	ldr	r3, [r0]
   123cc:	movw	r0, #42232	; 0xa4f8
   123d0:	movt	r0, #1
   123d4:	mov	r2, #1
   123d8:	bl	11f7c <fwrite@plt>
   123dc:	mov	r0, #1
   123e0:	bl	11fdc <exit@plt>
   123e4:	movw	r0, #49416	; 0xc108
   123e8:	movw	r1, #42282	; 0xa52a
   123ec:	mov	r2, r8
   123f0:	movt	r0, #2
   123f4:	movt	r1, #1
   123f8:	ldr	r0, [r0]
   123fc:	bl	1200c <fprintf@plt>
   12400:	mov	r0, #1
   12404:	bl	11fdc <exit@plt>

00012408 <my_main@@Base>:
   12408:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1240c:	add	fp, sp, #24
   12410:	sub	sp, sp, #32
   12414:	mov	r5, r1
   12418:	movw	r1, #49552	; 0xc190
   1241c:	add	r2, pc, #132	; 0x84
   12420:	movt	r1, #2
   12424:	vld1.64	{d16-d17}, [r2]
   12428:	vld1.64	{d18-d19}, [r1 :128]
   1242c:	vadd.i64	q8, q9, q8
   12430:	vst1.64	{d16-d17}, [r1 :128]
   12434:	bl	121e0 <load_file@@Base>
   12438:	mov	r4, r0
   1243c:	add	r8, sp, #20
   12440:	mov	r0, r8
   12444:	mov	r1, r4
   12448:	bl	12f90 <init_lexer@@Base>
   1244c:	add	r7, sp, #16
   12450:	mov	r1, r8
   12454:	mov	r0, r7
   12458:	bl	157a0 <init_grammar@@Base>
   1245c:	mov	r6, sp
   12460:	mov	r1, r7
   12464:	mov	r2, r5
   12468:	mov	r0, r6
   1246c:	bl	16870 <init_generator@@Base>
   12470:	mov	r0, r6
   12474:	bl	16908 <generate_code@@Base>
   12478:	mov	r0, r6
   1247c:	bl	168d0 <destroy_generator@@Base>
   12480:	mov	r0, r7
   12484:	bl	157d8 <destroy_grammar@@Base>
   12488:	mov	r0, r8
   1248c:	bl	12fd0 <destroy_lexer@@Base>
   12490:	mov	r0, r4
   12494:	bl	11f28 <free@plt>
   12498:	mov	r0, #0
   1249c:	sub	sp, fp, #24
   124a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   124a4:	nop	{0}
   124a8:	andeq	r0, r0, r1
   124ac:	andeq	r0, r0, r0
   124b0:	andeq	r0, r0, r1
   124b4:	andeq	r0, r0, r0

000124b8 <main@@Base>:
   124b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   124bc:	add	fp, sp, #24
   124c0:	movw	r7, #49568	; 0xc1a0
   124c4:	mov	r5, r0
   124c8:	add	r0, pc, #400	; 0x190
   124cc:	movw	r2, #42306	; 0xa542
   124d0:	mov	r4, r1
   124d4:	movt	r7, #2
   124d8:	vld1.64	{d16-d17}, [r0]
   124dc:	movt	r2, #1
   124e0:	mov	r0, r5
   124e4:	vld1.64	{d18-d19}, [r7 :128]
   124e8:	vadd.i64	q8, q9, q8
   124ec:	vst1.64	{d16-d17}, [r7 :128]
   124f0:	bl	12000 <getopt@plt>
   124f4:	mov	r1, #24
   124f8:	cmn	r0, #1
   124fc:	mov	r2, r7
   12500:	mov	r8, #0
   12504:	movwne	r1, #16
   12508:	ldr	r1, [r2, r1]!
   1250c:	adds	r1, r1, #1
   12510:	str	r1, [r2]
   12514:	ldr	r1, [r2, #4]
   12518:	adc	r1, r1, #0
   1251c:	cmn	r0, #1
   12520:	str	r1, [r2, #4]
   12524:	beq	125cc <main@@Base+0x114>
   12528:	movw	r9, #49424	; 0xc110
   1252c:	movw	r6, #42306	; 0xa542
   12530:	movt	r9, #2
   12534:	movt	r6, #1
   12538:	cmp	r0, #111	; 0x6f
   1253c:	mov	r1, #40	; 0x28
   12540:	mov	r2, r7
   12544:	movweq	r1, #32
   12548:	ldr	r1, [r2, r1]!
   1254c:	adds	r1, r1, #1
   12550:	str	r1, [r2]
   12554:	ldr	r1, [r2, #4]
   12558:	adc	r1, r1, #0
   1255c:	cmp	r0, #111	; 0x6f
   12560:	str	r1, [r2, #4]
   12564:	bne	1257c <main@@Base+0xc4>
   12568:	ldrd	r0, [r7, #48]	; 0x30
   1256c:	ldr	r8, [r9]
   12570:	adds	r0, r0, #1
   12574:	adc	r1, r1, #0
   12578:	strd	r0, [r7, #48]	; 0x30
   1257c:	ldrd	r0, [r7, #56]	; 0x38
   12580:	mov	r2, r6
   12584:	adds	r0, r0, #1
   12588:	adc	r1, r1, #0
   1258c:	strd	r0, [r7, #56]	; 0x38
   12590:	mov	r0, r5
   12594:	mov	r1, r4
   12598:	bl	12000 <getopt@plt>
   1259c:	cmn	r0, #1
   125a0:	mov	r1, #24
   125a4:	mov	r2, r7
   125a8:	movwne	r1, #16
   125ac:	ldr	r1, [r2, r1]!
   125b0:	adds	r1, r1, #1
   125b4:	str	r1, [r2]
   125b8:	ldr	r1, [r2, #4]
   125bc:	adc	r1, r1, #0
   125c0:	cmn	r0, #1
   125c4:	str	r1, [r2, #4]
   125c8:	bne	12538 <main@@Base+0x80>
   125cc:	movw	r0, #49408	; 0xc100
   125d0:	mov	r1, #72	; 0x48
   125d4:	mov	r2, r7
   125d8:	movt	r0, #2
   125dc:	ldr	r0, [r0]
   125e0:	cmp	r0, r5
   125e4:	movwlt	r1, #64	; 0x40
   125e8:	ldr	r1, [r2, r1]!
   125ec:	adds	r1, r1, #1
   125f0:	str	r1, [r2]
   125f4:	ldr	r1, [r2, #4]
   125f8:	adc	r1, r1, #0
   125fc:	cmp	r0, r5
   12600:	str	r1, [r2, #4]
   12604:	bge	12638 <main@@Base+0x180>
   12608:	ldrd	r2, [r7, #80]	; 0x50
   1260c:	movw	r1, #42309	; 0xa545
   12610:	movt	r1, #1
   12614:	adds	r2, r2, #1
   12618:	adc	r3, r3, #0
   1261c:	cmp	r8, #0
   12620:	strd	r2, [r7, #80]	; 0x50
   12624:	movne	r1, r8
   12628:	ldr	r0, [r4, r0, lsl #2]
   1262c:	bl	12408 <my_main@@Base>
   12630:	mov	r0, #0
   12634:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12638:	movw	r0, #49416	; 0xc108
   1263c:	mov	r1, #45	; 0x2d
   12640:	mov	r2, #1
   12644:	movt	r0, #2
   12648:	ldr	r3, [r0]
   1264c:	movw	r0, #42313	; 0xa549
   12650:	movt	r0, #1
   12654:	bl	11f7c <fwrite@plt>
   12658:	mov	r0, #1
   1265c:	bl	11fdc <exit@plt>
   12660:	andeq	r0, r0, r1
   12664:	andeq	r0, r0, r0
   12668:	andeq	r0, r0, r1
   1266c:	andeq	r0, r0, r0
   12670:	push	{r4, lr}
   12674:	sub	sp, sp, #8
   12678:	movw	r4, #13547	; 0x34eb
   1267c:	movw	r0, #42384	; 0xa590
   12680:	movw	r1, #42359	; 0xa577
   12684:	movt	r4, #50461	; 0xc51d
   12688:	movt	r0, #1
   1268c:	movt	r1, #1
   12690:	mov	r2, r4
   12694:	bl	17534 <__generate_code_for_binary_boolean_expression@@Base+0x4ec>
   12698:	movw	r1, #42364	; 0xa57c
   1269c:	movw	r2, #56329	; 0xdc09
   126a0:	mov	r0, #0
   126a4:	mov	r3, #0
   126a8:	str	r4, [sp]
   126ac:	movt	r1, #1
   126b0:	movt	r2, #3122	; 0xc32
   126b4:	bl	17c98 <__generate_code_for_binary_boolean_expression@@Base+0xc50>
   126b8:	movw	r1, #49440	; 0xc120
   126bc:	mov	r0, #14
   126c0:	movt	r1, #2
   126c4:	bl	1854c <__generate_code_for_binary_boolean_expression@@Base+0x1504>
   126c8:	movw	r1, #42374	; 0xa586
   126cc:	movw	r2, #53840	; 0xd250
   126d0:	mov	r0, #1
   126d4:	mov	r3, #0
   126d8:	str	r4, [sp]
   126dc:	movt	r1, #1
   126e0:	movt	r2, #34957	; 0x888d
   126e4:	bl	17c98 <__generate_code_for_binary_boolean_expression@@Base+0xc50>
   126e8:	movw	r1, #49552	; 0xc190
   126ec:	mov	r0, #2
   126f0:	movt	r1, #2
   126f4:	bl	1854c <__generate_code_for_binary_boolean_expression@@Base+0x1504>
   126f8:	movw	r1, #42377	; 0xa589
   126fc:	movw	r2, #59238	; 0xe766
   12700:	mov	r0, #2
   12704:	mov	r3, #0
   12708:	str	r4, [sp]
   1270c:	movt	r1, #1
   12710:	movt	r2, #28363	; 0x6ecb
   12714:	bl	17c98 <__generate_code_for_binary_boolean_expression@@Base+0xc50>
   12718:	movw	r1, #49568	; 0xc1a0
   1271c:	mov	r0, #11
   12720:	movt	r1, #2
   12724:	bl	1854c <__generate_code_for_binary_boolean_expression@@Base+0x1504>
   12728:	bl	18cc8 <__generate_code_for_binary_boolean_expression@@Base+0x1c80>
   1272c:	add	sp, sp, #8
   12730:	pop	{r4, lr}
   12734:	b	19a34 <__generate_code_for_binary_boolean_expression@@Base+0x29ec>
   12738:	push	{fp, lr}
   1273c:	bl	12670 <main@@Base+0x1b8>
   12740:	movw	r0, #49440	; 0xc120
   12744:	vmov.i32	q8, #0	; 0x00000000
   12748:	mov	r3, #96	; 0x60
   1274c:	movt	r0, #2
   12750:	add	r1, r0, #80	; 0x50
   12754:	vst1.64	{d16-d17}, [r1 :128]
   12758:	add	r1, r0, #64	; 0x40
   1275c:	vst1.64	{d16-d17}, [r1 :128]
   12760:	add	r1, r0, #48	; 0x30
   12764:	vst1.64	{d16-d17}, [r1 :128]
   12768:	add	r1, r0, #32
   1276c:	vst1.64	{d16-d17}, [r1 :128]
   12770:	add	r1, r0, #16
   12774:	vst1.64	{d16-d17}, [r0 :128], r3
   12778:	vst1.64	{d16-d17}, [r1 :128]
   1277c:	movw	r1, #49552	; 0xc190
   12780:	vst1.64	{d16-d17}, [r0 :128]
   12784:	mov	r0, #84	; 0x54
   12788:	movt	r1, #2
   1278c:	vst1.64	{d16-d17}, [r1 :128]
   12790:	movw	r1, #49568	; 0xc1a0
   12794:	movt	r1, #2
   12798:	add	r2, r1, #64	; 0x40
   1279c:	vst1.64	{d16-d17}, [r2 :128]
   127a0:	add	r2, r1, #48	; 0x30
   127a4:	vst1.64	{d16-d17}, [r2 :128]
   127a8:	add	r2, r1, #32
   127ac:	vst1.64	{d16-d17}, [r2 :128]
   127b0:	add	r2, r1, #16
   127b4:	vst1.64	{d16-d17}, [r2 :128]
   127b8:	mov	r2, #0
   127bc:	str	r2, [r1, #80]	; 0x50
   127c0:	vst1.64	{d16-d17}, [r1 :128], r0
   127c4:	str	r2, [r1]
   127c8:	pop	{fp, pc}
   127cc:	movw	r0, #9840	; 0x2670
   127d0:	movw	r1, #10040	; 0x2738
   127d4:	movt	r0, #1
   127d8:	movt	r1, #1
   127dc:	b	19ee4 <__gcov_flush@@Base+0xb4>

000127e0 <init_token_int_type@@Base>:
   127e0:	movw	r1, #49664	; 0xc200
   127e4:	add	r2, pc, #28
   127e8:	movt	r1, #2
   127ec:	vld1.64	{d16-d17}, [r2]
   127f0:	vld1.64	{d18-d19}, [r1 :128]
   127f4:	vadd.i64	q8, q9, q8
   127f8:	vst1.64	{d16-d17}, [r1 :128]
   127fc:	mov	r1, #0
   12800:	str	r1, [r0]
   12804:	bx	lr
   12808:	andeq	r0, r0, r1
   1280c:	andeq	r0, r0, r0
   12810:	andeq	r0, r0, r1
   12814:	andeq	r0, r0, r0

00012818 <init_token_int_value@@Base>:
   12818:	movw	r2, #49680	; 0xc210
   1281c:	add	r3, pc, #36	; 0x24
   12820:	movt	r2, #2
   12824:	vld1.64	{d16-d17}, [r3]
   12828:	vld1.64	{d18-d19}, [r2 :128]
   1282c:	vadd.i64	q8, q9, q8
   12830:	vst1.64	{d16-d17}, [r2 :128]
   12834:	mov	r2, #1
   12838:	str	r2, [r0]
   1283c:	str	r1, [r0, #4]
   12840:	bx	lr
   12844:	nop	{0}
   12848:	andeq	r0, r0, r1
   1284c:	andeq	r0, r0, r0
   12850:	andeq	r0, r0, r1
   12854:	andeq	r0, r0, r0

00012858 <init_token_function@@Base>:
   12858:	movw	r2, #49696	; 0xc220
   1285c:	add	r3, pc, #36	; 0x24
   12860:	movt	r2, #2
   12864:	vld1.64	{d16-d17}, [r3]
   12868:	vld1.64	{d18-d19}, [r2 :128]
   1286c:	vadd.i64	q8, q9, q8
   12870:	vst1.64	{d16-d17}, [r2 :128]
   12874:	mov	r2, #2
   12878:	str	r2, [r0]
   1287c:	str	r1, [r0, #4]
   12880:	bx	lr
   12884:	nop	{0}
   12888:	andeq	r0, r0, r1
   1288c:	andeq	r0, r0, r0
   12890:	andeq	r0, r0, r1
   12894:	andeq	r0, r0, r0

00012898 <init_token_opar@@Base>:
   12898:	movw	r1, #49712	; 0xc230
   1289c:	add	r2, pc, #28
   128a0:	movt	r1, #2
   128a4:	vld1.64	{d16-d17}, [r2]
   128a8:	vld1.64	{d18-d19}, [r1 :128]
   128ac:	vadd.i64	q8, q9, q8
   128b0:	vst1.64	{d16-d17}, [r1 :128]
   128b4:	mov	r1, #3
   128b8:	str	r1, [r0]
   128bc:	bx	lr
   128c0:	andeq	r0, r0, r1
   128c4:	andeq	r0, r0, r0
   128c8:	andeq	r0, r0, r1
   128cc:	andeq	r0, r0, r0

000128d0 <init_token_cpar@@Base>:
   128d0:	movw	r1, #49728	; 0xc240
   128d4:	add	r2, pc, #28
   128d8:	movt	r1, #2
   128dc:	vld1.64	{d16-d17}, [r2]
   128e0:	vld1.64	{d18-d19}, [r1 :128]
   128e4:	vadd.i64	q8, q9, q8
   128e8:	vst1.64	{d16-d17}, [r1 :128]
   128ec:	mov	r1, #4
   128f0:	str	r1, [r0]
   128f4:	bx	lr
   128f8:	andeq	r0, r0, r1
   128fc:	andeq	r0, r0, r0
   12900:	andeq	r0, r0, r1
   12904:	andeq	r0, r0, r0

00012908 <init_token_obra@@Base>:
   12908:	movw	r1, #49744	; 0xc250
   1290c:	add	r2, pc, #28
   12910:	movt	r1, #2
   12914:	vld1.64	{d16-d17}, [r2]
   12918:	vld1.64	{d18-d19}, [r1 :128]
   1291c:	vadd.i64	q8, q9, q8
   12920:	vst1.64	{d16-d17}, [r1 :128]
   12924:	mov	r1, #5
   12928:	str	r1, [r0]
   1292c:	bx	lr
   12930:	andeq	r0, r0, r1
   12934:	andeq	r0, r0, r0
   12938:	andeq	r0, r0, r1
   1293c:	andeq	r0, r0, r0

00012940 <init_token_cbra@@Base>:
   12940:	movw	r1, #49760	; 0xc260
   12944:	add	r2, pc, #28
   12948:	movt	r1, #2
   1294c:	vld1.64	{d16-d17}, [r2]
   12950:	vld1.64	{d18-d19}, [r1 :128]
   12954:	vadd.i64	q8, q9, q8
   12958:	vst1.64	{d16-d17}, [r1 :128]
   1295c:	mov	r1, #6
   12960:	str	r1, [r0]
   12964:	bx	lr
   12968:	andeq	r0, r0, r1
   1296c:	andeq	r0, r0, r0
   12970:	andeq	r0, r0, r1
   12974:	andeq	r0, r0, r0

00012978 <init_token_return@@Base>:
   12978:	movw	r1, #49776	; 0xc270
   1297c:	add	r2, pc, #28
   12980:	movt	r1, #2
   12984:	vld1.64	{d16-d17}, [r2]
   12988:	vld1.64	{d18-d19}, [r1 :128]
   1298c:	vadd.i64	q8, q9, q8
   12990:	vst1.64	{d16-d17}, [r1 :128]
   12994:	mov	r1, #7
   12998:	str	r1, [r0]
   1299c:	bx	lr
   129a0:	andeq	r0, r0, r1
   129a4:	andeq	r0, r0, r0
   129a8:	andeq	r0, r0, r1
   129ac:	andeq	r0, r0, r0

000129b0 <init_token_semicolon@@Base>:
   129b0:	movw	r1, #49792	; 0xc280
   129b4:	add	r2, pc, #28
   129b8:	movt	r1, #2
   129bc:	vld1.64	{d16-d17}, [r2]
   129c0:	vld1.64	{d18-d19}, [r1 :128]
   129c4:	vadd.i64	q8, q9, q8
   129c8:	vst1.64	{d16-d17}, [r1 :128]
   129cc:	mov	r1, #8
   129d0:	str	r1, [r0]
   129d4:	bx	lr
   129d8:	andeq	r0, r0, r1
   129dc:	andeq	r0, r0, r0
   129e0:	andeq	r0, r0, r1
   129e4:	andeq	r0, r0, r0

000129e8 <init_token_eof@@Base>:
   129e8:	movw	r1, #49808	; 0xc290
   129ec:	add	r2, pc, #28
   129f0:	movt	r1, #2
   129f4:	vld1.64	{d16-d17}, [r2]
   129f8:	vld1.64	{d18-d19}, [r1 :128]
   129fc:	vadd.i64	q8, q9, q8
   12a00:	vst1.64	{d16-d17}, [r1 :128]
   12a04:	mov	r1, #9
   12a08:	str	r1, [r0]
   12a0c:	bx	lr
   12a10:	andeq	r0, r0, r1
   12a14:	andeq	r0, r0, r0
   12a18:	andeq	r0, r0, r1
   12a1c:	andeq	r0, r0, r0

00012a20 <init_token_if@@Base>:
   12a20:	movw	r1, #49824	; 0xc2a0
   12a24:	add	r2, pc, #28
   12a28:	movt	r1, #2
   12a2c:	vld1.64	{d16-d17}, [r2]
   12a30:	vld1.64	{d18-d19}, [r1 :128]
   12a34:	vadd.i64	q8, q9, q8
   12a38:	vst1.64	{d16-d17}, [r1 :128]
   12a3c:	mov	r1, #10
   12a40:	str	r1, [r0]
   12a44:	bx	lr
   12a48:	andeq	r0, r0, r1
   12a4c:	andeq	r0, r0, r0
   12a50:	andeq	r0, r0, r1
   12a54:	andeq	r0, r0, r0

00012a58 <init_token_else@@Base>:
   12a58:	movw	r1, #49840	; 0xc2b0
   12a5c:	add	r2, pc, #28
   12a60:	movt	r1, #2
   12a64:	vld1.64	{d16-d17}, [r2]
   12a68:	vld1.64	{d18-d19}, [r1 :128]
   12a6c:	vadd.i64	q8, q9, q8
   12a70:	vst1.64	{d16-d17}, [r1 :128]
   12a74:	mov	r1, #11
   12a78:	str	r1, [r0]
   12a7c:	bx	lr
   12a80:	andeq	r0, r0, r1
   12a84:	andeq	r0, r0, r0
   12a88:	andeq	r0, r0, r1
   12a8c:	andeq	r0, r0, r0

00012a90 <init_token_boolean_op@@Base>:
   12a90:	movw	r2, #49856	; 0xc2c0
   12a94:	add	r3, pc, #36	; 0x24
   12a98:	movt	r2, #2
   12a9c:	vld1.64	{d16-d17}, [r3]
   12aa0:	vld1.64	{d18-d19}, [r2 :128]
   12aa4:	vadd.i64	q8, q9, q8
   12aa8:	vst1.64	{d16-d17}, [r2 :128]
   12aac:	mov	r2, #12
   12ab0:	str	r2, [r0]
   12ab4:	str	r1, [r0, #4]
   12ab8:	bx	lr
   12abc:	nop	{0}
   12ac0:	andeq	r0, r0, r1
   12ac4:	andeq	r0, r0, r0
   12ac8:	andeq	r0, r0, r1
   12acc:	andeq	r0, r0, r0

00012ad0 <free_token_int_type@@Base>:
   12ad0:	movw	r1, #49872	; 0xc2d0
   12ad4:	add	r2, pc, #20
   12ad8:	movt	r1, #2
   12adc:	vld1.64	{d16-d17}, [r2]
   12ae0:	vld1.64	{d18-d19}, [r1 :128]
   12ae4:	vadd.i64	q8, q9, q8
   12ae8:	vst1.64	{d16-d17}, [r1 :128]
   12aec:	b	11f28 <free@plt>
   12af0:	andeq	r0, r0, r1
   12af4:	andeq	r0, r0, r0
   12af8:	andeq	r0, r0, r1
   12afc:	andeq	r0, r0, r0

00012b00 <free_token_int_value@@Base>:
   12b00:	movw	r1, #49888	; 0xc2e0
   12b04:	add	r2, pc, #20
   12b08:	movt	r1, #2
   12b0c:	vld1.64	{d16-d17}, [r2]
   12b10:	vld1.64	{d18-d19}, [r1 :128]
   12b14:	vadd.i64	q8, q9, q8
   12b18:	vst1.64	{d16-d17}, [r1 :128]
   12b1c:	b	11f28 <free@plt>
   12b20:	andeq	r0, r0, r1
   12b24:	andeq	r0, r0, r0
   12b28:	andeq	r0, r0, r1
   12b2c:	andeq	r0, r0, r0

00012b30 <free_token_function@@Base>:
   12b30:	movw	r1, #49904	; 0xc2f0
   12b34:	add	r2, pc, #20
   12b38:	movt	r1, #2
   12b3c:	vld1.64	{d16-d17}, [r2]
   12b40:	vld1.64	{d18-d19}, [r1 :128]
   12b44:	vadd.i64	q8, q9, q8
   12b48:	vst1.64	{d16-d17}, [r1 :128]
   12b4c:	b	11f28 <free@plt>
   12b50:	andeq	r0, r0, r1
   12b54:	andeq	r0, r0, r0
   12b58:	andeq	r0, r0, r1
   12b5c:	andeq	r0, r0, r0

00012b60 <free_token_opar@@Base>:
   12b60:	movw	r1, #49920	; 0xc300
   12b64:	add	r2, pc, #20
   12b68:	movt	r1, #2
   12b6c:	vld1.64	{d16-d17}, [r2]
   12b70:	vld1.64	{d18-d19}, [r1 :128]
   12b74:	vadd.i64	q8, q9, q8
   12b78:	vst1.64	{d16-d17}, [r1 :128]
   12b7c:	b	11f28 <free@plt>
   12b80:	andeq	r0, r0, r1
   12b84:	andeq	r0, r0, r0
   12b88:	andeq	r0, r0, r1
   12b8c:	andeq	r0, r0, r0

00012b90 <free_token_cpar@@Base>:
   12b90:	movw	r1, #49936	; 0xc310
   12b94:	add	r2, pc, #20
   12b98:	movt	r1, #2
   12b9c:	vld1.64	{d16-d17}, [r2]
   12ba0:	vld1.64	{d18-d19}, [r1 :128]
   12ba4:	vadd.i64	q8, q9, q8
   12ba8:	vst1.64	{d16-d17}, [r1 :128]
   12bac:	b	11f28 <free@plt>
   12bb0:	andeq	r0, r0, r1
   12bb4:	andeq	r0, r0, r0
   12bb8:	andeq	r0, r0, r1
   12bbc:	andeq	r0, r0, r0

00012bc0 <free_token_obra@@Base>:
   12bc0:	movw	r1, #49952	; 0xc320
   12bc4:	add	r2, pc, #20
   12bc8:	movt	r1, #2
   12bcc:	vld1.64	{d16-d17}, [r2]
   12bd0:	vld1.64	{d18-d19}, [r1 :128]
   12bd4:	vadd.i64	q8, q9, q8
   12bd8:	vst1.64	{d16-d17}, [r1 :128]
   12bdc:	b	11f28 <free@plt>
   12be0:	andeq	r0, r0, r1
   12be4:	andeq	r0, r0, r0
   12be8:	andeq	r0, r0, r1
   12bec:	andeq	r0, r0, r0

00012bf0 <free_token_cbra@@Base>:
   12bf0:	movw	r1, #49968	; 0xc330
   12bf4:	add	r2, pc, #20
   12bf8:	movt	r1, #2
   12bfc:	vld1.64	{d16-d17}, [r2]
   12c00:	vld1.64	{d18-d19}, [r1 :128]
   12c04:	vadd.i64	q8, q9, q8
   12c08:	vst1.64	{d16-d17}, [r1 :128]
   12c0c:	b	11f28 <free@plt>
   12c10:	andeq	r0, r0, r1
   12c14:	andeq	r0, r0, r0
   12c18:	andeq	r0, r0, r1
   12c1c:	andeq	r0, r0, r0

00012c20 <free_token_return@@Base>:
   12c20:	movw	r1, #49984	; 0xc340
   12c24:	add	r2, pc, #20
   12c28:	movt	r1, #2
   12c2c:	vld1.64	{d16-d17}, [r2]
   12c30:	vld1.64	{d18-d19}, [r1 :128]
   12c34:	vadd.i64	q8, q9, q8
   12c38:	vst1.64	{d16-d17}, [r1 :128]
   12c3c:	b	11f28 <free@plt>
   12c40:	andeq	r0, r0, r1
   12c44:	andeq	r0, r0, r0
   12c48:	andeq	r0, r0, r1
   12c4c:	andeq	r0, r0, r0

00012c50 <free_token_semicolon@@Base>:
   12c50:	movw	r1, #50000	; 0xc350
   12c54:	add	r2, pc, #20
   12c58:	movt	r1, #2
   12c5c:	vld1.64	{d16-d17}, [r2]
   12c60:	vld1.64	{d18-d19}, [r1 :128]
   12c64:	vadd.i64	q8, q9, q8
   12c68:	vst1.64	{d16-d17}, [r1 :128]
   12c6c:	b	11f28 <free@plt>
   12c70:	andeq	r0, r0, r1
   12c74:	andeq	r0, r0, r0
   12c78:	andeq	r0, r0, r1
   12c7c:	andeq	r0, r0, r0

00012c80 <free_token_eof@@Base>:
   12c80:	movw	r1, #50016	; 0xc360
   12c84:	add	r2, pc, #20
   12c88:	movt	r1, #2
   12c8c:	vld1.64	{d16-d17}, [r2]
   12c90:	vld1.64	{d18-d19}, [r1 :128]
   12c94:	vadd.i64	q8, q9, q8
   12c98:	vst1.64	{d16-d17}, [r1 :128]
   12c9c:	b	11f28 <free@plt>
   12ca0:	andeq	r0, r0, r1
   12ca4:	andeq	r0, r0, r0
   12ca8:	andeq	r0, r0, r1
   12cac:	andeq	r0, r0, r0

00012cb0 <free_token_if@@Base>:
   12cb0:	movw	r1, #50032	; 0xc370
   12cb4:	add	r2, pc, #20
   12cb8:	movt	r1, #2
   12cbc:	vld1.64	{d16-d17}, [r2]
   12cc0:	vld1.64	{d18-d19}, [r1 :128]
   12cc4:	vadd.i64	q8, q9, q8
   12cc8:	vst1.64	{d16-d17}, [r1 :128]
   12ccc:	b	11f28 <free@plt>
   12cd0:	andeq	r0, r0, r1
   12cd4:	andeq	r0, r0, r0
   12cd8:	andeq	r0, r0, r1
   12cdc:	andeq	r0, r0, r0

00012ce0 <free_token_else@@Base>:
   12ce0:	movw	r1, #50048	; 0xc380
   12ce4:	add	r2, pc, #20
   12ce8:	movt	r1, #2
   12cec:	vld1.64	{d16-d17}, [r2]
   12cf0:	vld1.64	{d18-d19}, [r1 :128]
   12cf4:	vadd.i64	q8, q9, q8
   12cf8:	vst1.64	{d16-d17}, [r1 :128]
   12cfc:	b	11f28 <free@plt>
   12d00:	andeq	r0, r0, r1
   12d04:	andeq	r0, r0, r0
   12d08:	andeq	r0, r0, r1
   12d0c:	andeq	r0, r0, r0

00012d10 <free_token_boolean_op@@Base>:
   12d10:	push	{r4, r5, fp, lr}
   12d14:	add	fp, sp, #8
   12d18:	movw	r5, #50064	; 0xc390
   12d1c:	mov	r4, r0
   12d20:	movt	r5, #2
   12d24:	ldrd	r0, [r5]
   12d28:	mov	r2, r5
   12d2c:	adds	r0, r0, #1
   12d30:	adc	r1, r1, #0
   12d34:	strd	r0, [r5]
   12d38:	mov	r1, #16
   12d3c:	ldr	r0, [r4, #4]
   12d40:	cmp	r0, #0
   12d44:	movwne	r1, #8
   12d48:	ldr	r1, [r2, r1]!
   12d4c:	adds	r1, r1, #1
   12d50:	str	r1, [r2]
   12d54:	ldr	r1, [r2, #4]
   12d58:	adc	r1, r1, #0
   12d5c:	cmp	r0, #0
   12d60:	str	r1, [r2, #4]
   12d64:	beq	12d7c <free_token_boolean_op@@Base+0x6c>
   12d68:	ldrd	r2, [r5, #24]
   12d6c:	adds	r2, r2, #1
   12d70:	adc	r3, r3, #0
   12d74:	strd	r2, [r5, #24]
   12d78:	bl	11f28 <free@plt>
   12d7c:	ldrd	r0, [r5, #32]
   12d80:	adds	r0, r0, #1
   12d84:	adc	r1, r1, #0
   12d88:	strd	r0, [r5, #32]
   12d8c:	mov	r0, r4
   12d90:	pop	{r4, r5, fp, lr}
   12d94:	b	11f28 <free@plt>
   12d98:	push	{r4, r5, r6, lr}
   12d9c:	sub	sp, sp, #8
   12da0:	movw	r0, #42464	; 0xa5e0
   12da4:	movw	r1, #42359	; 0xa577
   12da8:	movw	r2, #10327	; 0x2857
   12dac:	movt	r0, #1
   12db0:	movt	r1, #1
   12db4:	movt	r2, #23326	; 0x5b1e
   12db8:	bl	17534 <__generate_code_for_binary_boolean_expression@@Base+0x4ec>
   12dbc:	movw	r0, #43664	; 0xaa90
   12dc0:	movw	r6, #43136	; 0xa880
   12dc4:	mov	r5, #0
   12dc8:	movt	r0, #1
   12dcc:	movt	r6, #1
   12dd0:	add	r4, r0, #4
   12dd4:	mov	r3, r6
   12dd8:	ldr	r0, [r3, r5]!
   12ddc:	ldr	r1, [r3, #16]
   12de0:	str	r1, [sp]
   12de4:	ldmib	r3, {r1, r2}
   12de8:	ldrb	r3, [r3, #12]
   12dec:	bl	17c98 <__generate_code_for_binary_boolean_expression@@Base+0xc50>
   12df0:	ldrd	r0, [r4, #-4]
   12df4:	bl	1854c <__generate_code_for_binary_boolean_expression@@Base+0x1504>
   12df8:	add	r5, r5, #20
   12dfc:	add	r4, r4, #8
   12e00:	cmp	r5, #520	; 0x208
   12e04:	bne	12dd4 <free_token_boolean_op@@Base+0xc4>
   12e08:	bl	18cc8 <__generate_code_for_binary_boolean_expression@@Base+0x1c80>
   12e0c:	add	sp, sp, #8
   12e10:	pop	{r4, r5, r6, lr}
   12e14:	b	19a34 <__generate_code_for_binary_boolean_expression@@Base+0x29ec>
   12e18:	push	{fp, lr}
   12e1c:	bl	12d98 <free_token_boolean_op@@Base+0x88>
   12e20:	movw	r0, #49680	; 0xc210
   12e24:	vmov.i32	q8, #0	; 0x00000000
   12e28:	mov	r1, #0
   12e2c:	movt	r0, #2
   12e30:	vst1.64	{d16-d17}, [r0 :128]
   12e34:	movw	r0, #49664	; 0xc200
   12e38:	movt	r0, #2
   12e3c:	vst1.64	{d16-d17}, [r0 :128]
   12e40:	movw	r0, #49696	; 0xc220
   12e44:	movt	r0, #2
   12e48:	vst1.64	{d16-d17}, [r0 :128]
   12e4c:	movw	r0, #49712	; 0xc230
   12e50:	movt	r0, #2
   12e54:	vst1.64	{d16-d17}, [r0 :128]
   12e58:	movw	r0, #49728	; 0xc240
   12e5c:	movt	r0, #2
   12e60:	vst1.64	{d16-d17}, [r0 :128]
   12e64:	movw	r0, #49744	; 0xc250
   12e68:	movt	r0, #2
   12e6c:	vst1.64	{d16-d17}, [r0 :128]
   12e70:	movw	r0, #49760	; 0xc260
   12e74:	movt	r0, #2
   12e78:	vst1.64	{d16-d17}, [r0 :128]
   12e7c:	movw	r0, #49776	; 0xc270
   12e80:	movt	r0, #2
   12e84:	vst1.64	{d16-d17}, [r0 :128]
   12e88:	movw	r0, #49792	; 0xc280
   12e8c:	movt	r0, #2
   12e90:	vst1.64	{d16-d17}, [r0 :128]
   12e94:	movw	r0, #49808	; 0xc290
   12e98:	movt	r0, #2
   12e9c:	vst1.64	{d16-d17}, [r0 :128]
   12ea0:	movw	r0, #49824	; 0xc2a0
   12ea4:	movt	r0, #2
   12ea8:	vst1.64	{d16-d17}, [r0 :128]
   12eac:	movw	r0, #49840	; 0xc2b0
   12eb0:	movt	r0, #2
   12eb4:	vst1.64	{d16-d17}, [r0 :128]
   12eb8:	movw	r0, #49856	; 0xc2c0
   12ebc:	movt	r0, #2
   12ec0:	vst1.64	{d16-d17}, [r0 :128]
   12ec4:	movw	r0, #49872	; 0xc2d0
   12ec8:	movt	r0, #2
   12ecc:	vst1.64	{d16-d17}, [r0 :128]
   12ed0:	movw	r0, #49888	; 0xc2e0
   12ed4:	movt	r0, #2
   12ed8:	vst1.64	{d16-d17}, [r0 :128]
   12edc:	movw	r0, #49904	; 0xc2f0
   12ee0:	movt	r0, #2
   12ee4:	vst1.64	{d16-d17}, [r0 :128]
   12ee8:	movw	r0, #49920	; 0xc300
   12eec:	movt	r0, #2
   12ef0:	vst1.64	{d16-d17}, [r0 :128]
   12ef4:	movw	r0, #49936	; 0xc310
   12ef8:	movt	r0, #2
   12efc:	vst1.64	{d16-d17}, [r0 :128]
   12f00:	movw	r0, #49952	; 0xc320
   12f04:	movt	r0, #2
   12f08:	vst1.64	{d16-d17}, [r0 :128]
   12f0c:	movw	r0, #49968	; 0xc330
   12f10:	movt	r0, #2
   12f14:	vst1.64	{d16-d17}, [r0 :128]
   12f18:	movw	r0, #49984	; 0xc340
   12f1c:	movt	r0, #2
   12f20:	vst1.64	{d16-d17}, [r0 :128]
   12f24:	movw	r0, #50000	; 0xc350
   12f28:	movt	r0, #2
   12f2c:	vst1.64	{d16-d17}, [r0 :128]
   12f30:	movw	r0, #50016	; 0xc360
   12f34:	movt	r0, #2
   12f38:	vst1.64	{d16-d17}, [r0 :128]
   12f3c:	movw	r0, #50032	; 0xc370
   12f40:	movt	r0, #2
   12f44:	vst1.64	{d16-d17}, [r0 :128]
   12f48:	movw	r0, #50048	; 0xc380
   12f4c:	movt	r0, #2
   12f50:	vst1.64	{d16-d17}, [r0 :128]
   12f54:	movw	r0, #50064	; 0xc390
   12f58:	movt	r0, #2
   12f5c:	add	r2, r0, #16
   12f60:	str	r1, [r0, #32]
   12f64:	vst1.64	{d16-d17}, [r2 :128]
   12f68:	mov	r2, #36	; 0x24
   12f6c:	vst1.64	{d16-d17}, [r0 :128], r2
   12f70:	str	r1, [r0]
   12f74:	pop	{fp, pc}
   12f78:	movw	r0, #11672	; 0x2d98
   12f7c:	movw	r1, #11800	; 0x2e18
   12f80:	movt	r0, #1
   12f84:	movt	r1, #1
   12f88:	b	19ee4 <__gcov_flush@@Base+0xb4>
   12f8c:	andeq	r0, r0, r0

00012f90 <init_lexer@@Base>:
   12f90:	movw	r2, #50112	; 0xc3c0
   12f94:	add	r3, pc, #36	; 0x24
   12f98:	movt	r2, #2
   12f9c:	vld1.64	{d16-d17}, [r3]
   12fa0:	vld1.64	{d18-d19}, [r2 :128]
   12fa4:	vadd.i64	q8, q9, q8
   12fa8:	vst1.64	{d16-d17}, [r2 :128]
   12fac:	mov	r2, #0
   12fb0:	stm	r0, {r1, r2}
   12fb4:	str	r2, [r0, #8]
   12fb8:	bx	lr
   12fbc:	nop	{0}
   12fc0:	andeq	r0, r0, r1
   12fc4:	andeq	r0, r0, r0
   12fc8:	andeq	r0, r0, r1
   12fcc:	andeq	r0, r0, r0

00012fd0 <destroy_lexer@@Base>:
   12fd0:	push	{r4, sl, fp, lr}
   12fd4:	add	fp, sp, #8
   12fd8:	movw	r4, #50128	; 0xc3d0
   12fdc:	mov	r1, #16
   12fe0:	movt	r4, #2
   12fe4:	ldrd	r2, [r4]
   12fe8:	adds	r2, r2, #1
   12fec:	adc	r3, r3, #0
   12ff0:	strd	r2, [r4]
   12ff4:	mov	r2, r4
   12ff8:	ldr	r0, [r0, #4]
   12ffc:	cmp	r0, #0
   13000:	movwne	r1, #8
   13004:	ldr	r1, [r2, r1]!
   13008:	adds	r1, r1, #1
   1300c:	str	r1, [r2]
   13010:	ldr	r1, [r2, #4]
   13014:	adc	r1, r1, #0
   13018:	cmp	r0, #0
   1301c:	str	r1, [r2, #4]
   13020:	beq	13054 <destroy_lexer@@Base+0x84>
   13024:	movw	r1, #50176	; 0xc400
   13028:	add	r2, pc, #56	; 0x38
   1302c:	movt	r1, #2
   13030:	vld1.64	{d16-d17}, [r2]
   13034:	ldrd	r2, [r4, #24]
   13038:	vld1.64	{d18-d19}, [r1 :128]
   1303c:	adds	r2, r2, #1
   13040:	vadd.i64	q8, q9, q8
   13044:	adc	r3, r3, #0
   13048:	vst1.64	{d16-d17}, [r1 :128]
   1304c:	strd	r2, [r4, #24]
   13050:	bl	11f28 <free@plt>
   13054:	ldrd	r0, [r4, #32]
   13058:	adds	r0, r0, #1
   1305c:	adc	r1, r1, #0
   13060:	strd	r0, [r4, #32]
   13064:	pop	{r4, sl, fp, pc}
   13068:	andeq	r0, r0, r1
   1306c:	andeq	r0, r0, r0
   13070:	andeq	r0, r0, r1
   13074:	andeq	r0, r0, r0

00013078 <free_stack_base@@Base>:
   13078:	movw	r1, #50176	; 0xc400
   1307c:	add	r2, pc, #20
   13080:	movt	r1, #2
   13084:	vld1.64	{d16-d17}, [r2]
   13088:	vld1.64	{d18-d19}, [r1 :128]
   1308c:	vadd.i64	q8, q9, q8
   13090:	vst1.64	{d16-d17}, [r1 :128]
   13094:	b	11f28 <free@plt>
   13098:	andeq	r0, r0, r1
   1309c:	andeq	r0, r0, r0
   130a0:	andeq	r0, r0, r1
   130a4:	andeq	r0, r0, r0

000130a8 <push_back@@Base>:
   130a8:	push	{r4, r5, fp, lr}
   130ac:	add	fp, sp, #8
   130b0:	mov	r5, r0
   130b4:	movw	r0, #50192	; 0xc410
   130b8:	mov	r4, r1
   130bc:	add	r1, pc, #44	; 0x2c
   130c0:	movt	r0, #2
   130c4:	vld1.64	{d16-d17}, [r1]
   130c8:	vld1.64	{d18-d19}, [r0 :128]
   130cc:	vadd.i64	q8, q9, q8
   130d0:	vst1.64	{d16-d17}, [r0 :128]
   130d4:	mov	r0, #8
   130d8:	bl	11fa0 <malloc@plt>
   130dc:	ldr	r1, [r5, #4]
   130e0:	stm	r0, {r1, r4}
   130e4:	str	r0, [r5, #4]
   130e8:	pop	{r4, r5, fp, pc}
   130ec:	nop	{0}
   130f0:	andeq	r0, r0, r1
   130f4:	andeq	r0, r0, r0
   130f8:	andeq	r0, r0, r1
   130fc:	andeq	r0, r0, r0

00013100 <get_char@@Base>:
   13100:	movw	r1, #50208	; 0xc420
   13104:	add	r2, pc, #44	; 0x2c
   13108:	movt	r1, #2
   1310c:	vld1.64	{d16-d17}, [r2]
   13110:	vld1.64	{d18-d19}, [r1 :128]
   13114:	vadd.i64	q8, q9, q8
   13118:	vst1.64	{d16-d17}, [r1 :128]
   1311c:	ldr	r2, [r0, #8]
   13120:	ldr	r1, [r0]
   13124:	add	r3, r2, #1
   13128:	str	r3, [r0, #8]
   1312c:	ldrb	r0, [r1, r2]
   13130:	bx	lr
   13134:	nop	{0}
   13138:	andeq	r0, r0, r1
   1313c:	andeq	r0, r0, r0
   13140:	andeq	r0, r0, r1
   13144:	andeq	r0, r0, r0

00013148 <push_back_chars@@Base>:
   13148:	push	{r4, r5, fp, lr}
   1314c:	add	fp, sp, #8
   13150:	movw	ip, #50224	; 0xc430
   13154:	movt	ip, #2
   13158:	ldrd	r4, [ip]
   1315c:	mov	r2, ip
   13160:	adds	r4, r4, #1
   13164:	adc	r5, r5, #0
   13168:	strd	r4, [ip]
   1316c:	mov	r5, #16
   13170:	ldr	r3, [r0, #8]
   13174:	cmp	r3, r1
   13178:	movwcs	r5, #8
   1317c:	ldr	r5, [r2, r5]!
   13180:	adds	r5, r5, #1
   13184:	str	r5, [r2]
   13188:	ldr	r5, [r2, #4]
   1318c:	adc	r5, r5, #0
   13190:	cmp	r3, r1
   13194:	str	r5, [r2, #4]
   13198:	bcc	131c0 <push_back_chars@@Base+0x78>
   1319c:	ldr	r2, [ip, #24]
   131a0:	ldr	r5, [ip, #28]
   131a4:	sub	r1, r3, r1
   131a8:	adds	r2, r2, #1
   131ac:	adc	r5, r5, #0
   131b0:	str	r2, [ip, #24]
   131b4:	str	r5, [ip, #28]
   131b8:	str	r1, [r0, #8]
   131bc:	pop	{r4, r5, fp, pc}
   131c0:	movw	r0, #49416	; 0xc108
   131c4:	mov	r1, #32
   131c8:	mov	r2, #1
   131cc:	movt	r0, #2
   131d0:	ldr	r3, [r0]
   131d4:	movw	r0, #43872	; 0xab60
   131d8:	movt	r0, #1
   131dc:	bl	11f7c <fwrite@plt>
   131e0:	mov	r0, #1
   131e4:	bl	11fdc <exit@plt>

000131e8 <push_back_one_char@@Base>:
   131e8:	movw	r1, #50256	; 0xc450
   131ec:	add	r2, pc, #28
   131f0:	movt	r1, #2
   131f4:	vld1.64	{d16-d17}, [r2]
   131f8:	vld1.64	{d18-d19}, [r1 :128]
   131fc:	vadd.i64	q8, q9, q8
   13200:	vst1.64	{d16-d17}, [r1 :128]
   13204:	mov	r1, #1
   13208:	b	13148 <push_back_chars@@Base>
   1320c:	nop	{0}
   13210:	andeq	r0, r0, r1
   13214:	andeq	r0, r0, r0
   13218:	andeq	r0, r0, r1
   1321c:	andeq	r0, r0, r0

00013220 <next@@Base>:
   13220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13224:	add	fp, sp, #28
   13228:	sub	sp, sp, #524	; 0x20c
   1322c:	movw	r7, #50272	; 0xc460
   13230:	mov	r4, r0
   13234:	movt	r7, #2
   13238:	ldrd	r0, [r7]
   1323c:	mov	r2, r7
   13240:	adds	r0, r0, #1
   13244:	adc	r1, r1, #0
   13248:	strd	r0, [r7]
   1324c:	mov	r1, #16
   13250:	ldr	r0, [r4, #4]
   13254:	cmp	r0, #0
   13258:	movwne	r1, #8
   1325c:	ldr	r1, [r2, r1]!
   13260:	adds	r1, r1, #1
   13264:	str	r1, [r2]
   13268:	ldr	r1, [r2, #4]
   1326c:	adc	r1, r1, #0
   13270:	cmp	r0, #0
   13274:	str	r1, [r2, #4]
   13278:	beq	132c4 <next@@Base+0xa4>
   1327c:	ldrd	r2, [r7, #24]
   13280:	adds	r2, r2, #1
   13284:	adc	r3, r3, #0
   13288:	strd	r2, [r7, #24]
   1328c:	ldr	r1, [r0]
   13290:	str	r1, [r4, #4]
   13294:	mov	r1, #0
   13298:	ldr	r6, [r0, #4]
   1329c:	str	r1, [r0, #4]
   132a0:	movw	r1, #50176	; 0xc400
   132a4:	add	r2, pc, #924	; 0x39c
   132a8:	movt	r1, #2
   132ac:	vld1.64	{d16-d17}, [r2]
   132b0:	vld1.64	{d18-d19}, [r1 :128]
   132b4:	vadd.i64	q8, q9, q8
   132b8:	vst1.64	{d16-d17}, [r1 :128]
   132bc:	bl	11f28 <free@plt>
   132c0:	b	1385c <next@@Base+0x63c>
   132c4:	movw	r5, #50208	; 0xc420
   132c8:	add	r0, pc, #888	; 0x378
   132cc:	movt	r5, #2
   132d0:	vld1.64	{d16-d17}, [r0]
   132d4:	ldrd	r0, [r7, #32]
   132d8:	vld1.64	{d18-d19}, [r5 :128]
   132dc:	adds	r0, r0, #1
   132e0:	vadd.i64	q8, q9, q8
   132e4:	adc	r1, r1, #0
   132e8:	vst1.64	{d16-d17}, [r5 :128]
   132ec:	strd	r0, [r7, #32]
   132f0:	ldr	r1, [r4, #8]
   132f4:	ldr	r0, [r4]
   132f8:	add	r2, r1, #1
   132fc:	str	r2, [r4, #8]
   13300:	ldrb	r8, [r0, r1]
   13304:	mov	r0, #48	; 0x30
   13308:	mov	r1, r7
   1330c:	cmp	r8, #0
   13310:	movwne	r0, #40	; 0x28
   13314:	ldr	r0, [r1, r0]!
   13318:	adds	r0, r0, #1
   1331c:	str	r0, [r1]
   13320:	ldr	r0, [r1, #4]
   13324:	adc	r0, r0, #0
   13328:	cmp	r8, #0
   1332c:	str	r0, [r1, #4]
   13330:	beq	13834 <next@@Base+0x614>
   13334:	movw	r6, #44032	; 0xac00
   13338:	mov	r0, #0
   1333c:	mov	r9, #0
   13340:	mov	sl, #0
   13344:	movt	r6, #1
   13348:	str	r0, [sp, #4]
   1334c:	b	136d0 <next@@Base+0x4b0>
   13350:	cmp	r2, #48	; 0x30
   13354:	mov	r0, #176	; 0xb0
   13358:	mov	r1, r7
   1335c:	movweq	r0, #168	; 0xa8
   13360:	ldr	r0, [r1, r0]!
   13364:	adds	r0, r0, #1
   13368:	str	r0, [r1]
   1336c:	ldr	r0, [r1, #4]
   13370:	adc	r0, r0, #0
   13374:	cmp	r2, #48	; 0x30
   13378:	str	r0, [r1, #4]
   1337c:	beq	13fe8 <next@@Base+0xdc8>
   13380:	mov	r0, #200	; 0xc8
   13384:	mov	r1, r7
   13388:	movwhi	r0, #192	; 0xc0
   1338c:	ldr	r0, [r1, r0]!
   13390:	adds	r0, r0, #1
   13394:	str	r0, [r1]
   13398:	ldr	r0, [r1, #4]
   1339c:	adc	r0, r0, #0
   133a0:	cmp	r2, #49	; 0x31
   133a4:	str	r0, [r1, #4]
   133a8:	bcc	14010 <next@@Base+0xdf0>
   133ac:	cmp	r2, #58	; 0x3a
   133b0:	mov	r0, #216	; 0xd8
   133b4:	mov	r1, r7
   133b8:	ldr	lr, [sp, #4]
   133bc:	movwcc	r0, #208	; 0xd0
   133c0:	ldr	r0, [r1, r0]!
   133c4:	adds	r0, r0, #1
   133c8:	str	r0, [r1]
   133cc:	ldr	r0, [r1, #4]
   133d0:	adc	r0, r0, #0
   133d4:	cmp	r2, #57	; 0x39
   133d8:	str	r0, [r1, #4]
   133dc:	bhi	1341c <next@@Base+0x1fc>
   133e0:	add	r0, pc, #608	; 0x260
   133e4:	vld1.64	{d18-d19}, [r5 :128]
   133e8:	mov	sl, #1
   133ec:	vld1.64	{d16-d17}, [r0]
   133f0:	add	r0, sp, #8
   133f4:	strb	r8, [r0, lr]
   133f8:	ldrd	r0, [r7, #224]	; 0xe0
   133fc:	add	lr, lr, #1
   13400:	str	lr, [sp, #4]
   13404:	vadd.i64	q8, q9, q8
   13408:	adds	r0, r0, #1
   1340c:	vst1.64	{d16-d17}, [r5 :128]
   13410:	adc	r1, r1, #0
   13414:	strd	r0, [r7, #224]	; 0xe0
   13418:	b	137c8 <next@@Base+0x5a8>
   1341c:	ldrd	r0, [r7, #240]	; 0xf0
   13420:	ldr	r3, [r7, #264]	; 0x108
   13424:	mov	ip, r5
   13428:	ldr	r5, [r7, #268]	; 0x10c
   1342c:	adds	r0, r0, #1
   13430:	adc	r1, r1, #0
   13434:	adds	r3, r3, #1
   13438:	str	r3, [r7, #264]	; 0x108
   1343c:	strd	r0, [r7, #240]	; 0xf0
   13440:	adc	r0, r5, #0
   13444:	cmp	r2, #123	; 0x7b
   13448:	mov	r1, r7
   1344c:	str	r0, [r7, #268]	; 0x10c
   13450:	mov	r0, #288	; 0x120
   13454:	movweq	r0, #280	; 0x118
   13458:	ldr	r0, [r1, r0]!
   1345c:	adds	r0, r0, #1
   13460:	str	r0, [r1]
   13464:	ldr	r0, [r1, #4]
   13468:	adc	r0, r0, #0
   1346c:	cmp	r2, #123	; 0x7b
   13470:	str	r0, [r1, #4]
   13474:	beq	140c4 <next@@Base+0xea4>
   13478:	cmp	r2, #125	; 0x7d
   1347c:	mov	r0, #312	; 0x138
   13480:	mov	r1, r7
   13484:	movweq	r0, #304	; 0x130
   13488:	ldr	r0, [r1, r0]!
   1348c:	adds	r0, r0, #1
   13490:	str	r0, [r1]
   13494:	ldr	r0, [r1, #4]
   13498:	adc	r0, r0, #0
   1349c:	cmp	r2, #125	; 0x7d
   134a0:	str	r0, [r1, #4]
   134a4:	beq	140f0 <next@@Base+0xed0>
   134a8:	cmp	r2, #59	; 0x3b
   134ac:	mov	r0, #336	; 0x150
   134b0:	mov	r1, r7
   134b4:	movweq	r0, #328	; 0x148
   134b8:	ldr	r0, [r1, r0]!
   134bc:	adds	r0, r0, #1
   134c0:	str	r0, [r1]
   134c4:	ldr	r0, [r1, #4]
   134c8:	adc	r0, r0, #0
   134cc:	cmp	r2, #59	; 0x3b
   134d0:	str	r0, [r1, #4]
   134d4:	beq	1411c <next@@Base+0xefc>
   134d8:	cmp	r2, #101	; 0x65
   134dc:	mov	r0, #360	; 0x168
   134e0:	mov	r1, r7
   134e4:	movweq	r0, #352	; 0x160
   134e8:	ldr	r0, [r1, r0]!
   134ec:	adds	r0, r0, #1
   134f0:	str	r0, [r1]
   134f4:	ldr	r0, [r1, #4]
   134f8:	adc	r0, r0, #0
   134fc:	cmp	r2, #101	; 0x65
   13500:	str	r0, [r1, #4]
   13504:	bne	13554 <next@@Base+0x334>
   13508:	add	r0, pc, #312	; 0x138
   1350c:	mov	r1, #101	; 0x65
   13510:	vld1.64	{d18-d19}, [ip :128]
   13514:	mov	r5, ip
   13518:	mov	sl, #5
   1351c:	vld1.64	{d16-d17}, [r0]
   13520:	add	r0, sp, #8
   13524:	strb	r1, [r0, lr]
   13528:	ldr	r0, [r7, #368]	; 0x170
   1352c:	ldr	r1, [r7, #372]	; 0x174
   13530:	add	lr, lr, #1
   13534:	str	lr, [sp, #4]
   13538:	vadd.i64	q8, q9, q8
   1353c:	adds	r0, r0, #1
   13540:	vst1.64	{d16-d17}, [r5 :128]
   13544:	adc	r1, r1, #0
   13548:	str	r0, [r7, #368]	; 0x170
   1354c:	str	r1, [r7, #372]	; 0x174
   13550:	b	137c8 <next@@Base+0x5a8>
   13554:	cmp	r2, #105	; 0x69
   13558:	mov	r0, #384	; 0x180
   1355c:	mov	r1, r7
   13560:	mov	r5, ip
   13564:	movweq	r0, #376	; 0x178
   13568:	ldr	r0, [r1, r0]!
   1356c:	adds	r0, r0, #1
   13570:	str	r0, [r1]
   13574:	ldr	r0, [r1, #4]
   13578:	adc	r0, r0, #0
   1357c:	cmp	r2, #105	; 0x69
   13580:	str	r0, [r1, #4]
   13584:	bne	135d0 <next@@Base+0x3b0>
   13588:	add	r0, pc, #184	; 0xb8
   1358c:	mov	r1, #105	; 0x69
   13590:	vld1.64	{d18-d19}, [r5 :128]
   13594:	mov	sl, #2
   13598:	vld1.64	{d16-d17}, [r0]
   1359c:	add	r0, sp, #8
   135a0:	strb	r1, [r0, lr]
   135a4:	ldr	r0, [r7, #392]	; 0x188
   135a8:	ldr	r1, [r7, #396]	; 0x18c
   135ac:	add	lr, lr, #1
   135b0:	str	lr, [sp, #4]
   135b4:	vadd.i64	q8, q9, q8
   135b8:	adds	r0, r0, #1
   135bc:	vst1.64	{d16-d17}, [r5 :128]
   135c0:	adc	r1, r1, #0
   135c4:	str	r0, [r7, #392]	; 0x188
   135c8:	str	r1, [r7, #396]	; 0x18c
   135cc:	b	137c8 <next@@Base+0x5a8>
   135d0:	cmp	r2, #109	; 0x6d
   135d4:	mov	r0, #408	; 0x198
   135d8:	mov	r1, r7
   135dc:	movweq	r0, #400	; 0x190
   135e0:	ldr	r0, [r1, r0]!
   135e4:	adds	r0, r0, #1
   135e8:	str	r0, [r1]
   135ec:	ldr	r0, [r1, #4]
   135f0:	adc	r0, r0, #0
   135f4:	cmp	r2, #109	; 0x6d
   135f8:	str	r0, [r1, #4]
   135fc:	bne	13658 <next@@Base+0x438>
   13600:	add	r0, pc, #64	; 0x40
   13604:	mov	r1, #109	; 0x6d
   13608:	vld1.64	{d18-d19}, [r5 :128]
   1360c:	mov	sl, #3
   13610:	vld1.64	{d16-d17}, [r0]
   13614:	add	r0, sp, #8
   13618:	strb	r1, [r0, lr]
   1361c:	ldr	r0, [r7, #416]	; 0x1a0
   13620:	ldr	r1, [r7, #420]	; 0x1a4
   13624:	add	lr, lr, #1
   13628:	str	lr, [sp, #4]
   1362c:	vadd.i64	q8, q9, q8
   13630:	adds	r0, r0, #1
   13634:	vst1.64	{d16-d17}, [r5 :128]
   13638:	adc	r1, r1, #0
   1363c:	str	r0, [r7, #416]	; 0x1a0
   13640:	str	r1, [r7, #420]	; 0x1a4
   13644:	b	137c8 <next@@Base+0x5a8>
   13648:	andeq	r0, r0, r1
   1364c:	andeq	r0, r0, r0
   13650:	andeq	r0, r0, r1
   13654:	andeq	r0, r0, r0
   13658:	cmp	r2, #114	; 0x72
   1365c:	mov	r0, #432	; 0x1b0
   13660:	mov	r1, r7
   13664:	movweq	r0, #424	; 0x1a8
   13668:	ldr	r0, [r1, r0]!
   1366c:	adds	r0, r0, #1
   13670:	str	r0, [r1]
   13674:	ldr	r0, [r1, #4]
   13678:	adc	r0, r0, #0
   1367c:	cmp	r2, #114	; 0x72
   13680:	str	r0, [r1, #4]
   13684:	bne	1447c <next@@Base+0x125c>
   13688:	sub	r0, pc, #72	; 0x48
   1368c:	mov	r1, #114	; 0x72
   13690:	vld1.64	{d18-d19}, [r5 :128]
   13694:	mov	sl, #4
   13698:	vld1.64	{d16-d17}, [r0]
   1369c:	add	r0, sp, #8
   136a0:	strb	r1, [r0, lr]
   136a4:	ldr	r0, [r7, #440]	; 0x1b8
   136a8:	ldr	r1, [r7, #444]	; 0x1bc
   136ac:	add	lr, lr, #1
   136b0:	str	lr, [sp, #4]
   136b4:	vadd.i64	q8, q9, q8
   136b8:	adds	r0, r0, #1
   136bc:	vst1.64	{d16-d17}, [r5 :128]
   136c0:	adc	r1, r1, #0
   136c4:	str	r0, [r7, #440]	; 0x1b8
   136c8:	str	r1, [r7, #444]	; 0x1bc
   136cc:	b	137c8 <next@@Base+0x5a8>
   136d0:	movw	r0, #49360	; 0xc0d0
   136d4:	cmp	sl, #5
   136d8:	movt	r0, #2
   136dc:	str	r9, [r0]
   136e0:	bhi	137e0 <next@@Base+0x5c0>
   136e4:	add	r0, pc, #0
   136e8:	ldr	pc, [r0, sl, lsl #2]
   136ec:	andeq	r3, r1, r4, lsl #14
   136f0:	andeq	r3, r1, r0, lsl #17
   136f4:	andeq	r3, r1, r0, lsl sp
   136f8:	andeq	r3, r1, r8, asr r9
   136fc:	ldrdeq	r3, [r1], -r4
   13700:	andeq	r3, r1, r8, ror #27
   13704:	add	r0, r6, #8
   13708:	bl	14800 <next@@Base+0x15e0>
   1370c:	uxtb	r2, r8
   13710:	mov	r0, #120	; 0x78
   13714:	mov	r1, r7
   13718:	cmp	r2, #9
   1371c:	movweq	r0, #112	; 0x70
   13720:	ldr	r0, [r1, r0]!
   13724:	adds	r0, r0, #1
   13728:	str	r0, [r1]
   1372c:	ldr	r0, [r1, #4]
   13730:	adc	r0, r0, #0
   13734:	cmp	r2, #9
   13738:	str	r0, [r1, #4]
   1373c:	beq	137a0 <next@@Base+0x580>
   13740:	cmp	r2, #32
   13744:	mov	r0, #136	; 0x88
   13748:	mov	r1, r7
   1374c:	movweq	r0, #128	; 0x80
   13750:	ldr	r0, [r1, r0]!
   13754:	adds	r0, r0, #1
   13758:	str	r0, [r1]
   1375c:	ldr	r0, [r1, #4]
   13760:	adc	r0, r0, #0
   13764:	cmp	r2, #32
   13768:	str	r0, [r1, #4]
   1376c:	beq	137a0 <next@@Base+0x580>
   13770:	cmp	r2, #10
   13774:	mov	r0, #152	; 0x98
   13778:	mov	r1, r7
   1377c:	movweq	r0, #144	; 0x90
   13780:	ldr	r0, [r1, r0]!
   13784:	adds	r0, r0, #1
   13788:	str	r0, [r1]
   1378c:	ldr	r0, [r1, #4]
   13790:	adc	r0, r0, #0
   13794:	cmp	r2, #10
   13798:	str	r0, [r1, #4]
   1379c:	bne	13350 <next@@Base+0x130>
   137a0:	sub	r0, pc, #352	; 0x160
   137a4:	vld1.64	{d18-d19}, [r5 :128]
   137a8:	mov	sl, #0
   137ac:	vld1.64	{d16-d17}, [r0]
   137b0:	ldrd	r0, [r7, #160]	; 0xa0
   137b4:	adds	r0, r0, #1
   137b8:	vadd.i64	q8, q9, q8
   137bc:	adc	r1, r1, #0
   137c0:	vst1.64	{d16-d17}, [r5 :128]
   137c4:	strd	r0, [r7, #160]	; 0xa0
   137c8:	ldr	r1, [r4, #8]
   137cc:	ldr	r0, [r4]
   137d0:	add	r2, r1, #1
   137d4:	add	r0, r0, r1
   137d8:	str	r2, [r4, #8]
   137dc:	ldrb	r8, [r0]
   137e0:	mov	r0, r6
   137e4:	bl	14800 <next@@Base+0x15e0>
   137e8:	ldr	r0, [r7, #984]	; 0x3d8
   137ec:	ldr	r1, [r7, #988]	; 0x3dc
   137f0:	mov	r2, r7
   137f4:	adds	r0, r0, #1
   137f8:	adc	r1, r1, #0
   137fc:	str	r0, [r7, #984]	; 0x3d8
   13800:	uxtb	r0, r8
   13804:	str	r1, [r7, #988]	; 0x3dc
   13808:	cmp	r0, #0
   1380c:	mov	r1, #48	; 0x30
   13810:	movwne	r1, #40	; 0x28
   13814:	ldr	r1, [r2, r1]!
   13818:	adds	r1, r1, #1
   1381c:	str	r1, [r2]
   13820:	ldr	r1, [r2, #4]
   13824:	adc	r1, r1, #0
   13828:	cmp	r0, #0
   1382c:	str	r1, [r2, #4]
   13830:	bne	136d0 <next@@Base+0x4b0>
   13834:	ldr	r0, [r7, #992]	; 0x3e0
   13838:	ldr	r1, [r7, #996]	; 0x3e4
   1383c:	adds	r0, r0, #1
   13840:	adc	r1, r1, #0
   13844:	str	r0, [r7, #992]	; 0x3e0
   13848:	mov	r0, #4
   1384c:	str	r1, [r7, #996]	; 0x3e4
   13850:	bl	11fa0 <malloc@plt>
   13854:	mov	r6, r0
   13858:	bl	129e8 <init_token_eof@@Base>
   1385c:	ldr	r0, [r7, #1000]	; 0x3e8
   13860:	ldr	r1, [r7, #1004]	; 0x3ec
   13864:	adds	r0, r0, #1
   13868:	adc	r1, r1, #0
   1386c:	str	r0, [r7, #1000]	; 0x3e8
   13870:	mov	r0, r6
   13874:	str	r1, [r7, #1004]	; 0x3ec
   13878:	sub	sp, fp, #28
   1387c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13880:	add	sl, r6, #16
   13884:	mov	r0, sl
   13888:	bl	14800 <next@@Base+0x15e0>
   1388c:	sub	r0, r8, #48	; 0x30
   13890:	mov	r1, #704	; 0x2c0
   13894:	mov	r2, r7
   13898:	add	r9, sp, #8
   1389c:	uxtb	r0, r0
   138a0:	cmp	r0, #10
   138a4:	movwcc	r1, #696	; 0x2b8
   138a8:	ldr	r1, [r2, r1]!
   138ac:	adds	r1, r1, #1
   138b0:	str	r1, [r2]
   138b4:	ldr	r1, [r2, #4]
   138b8:	adc	r1, r1, #0
   138bc:	cmp	r0, #9
   138c0:	str	r1, [r2, #4]
   138c4:	bhi	13f34 <next@@Base+0xd14>
   138c8:	ldr	r6, [sp, #4]
   138cc:	sub	r0, pc, #652	; 0x28c
   138d0:	vld1.64	{d18-d19}, [r5 :128]
   138d4:	ldr	r1, [r7, #716]	; 0x2cc
   138d8:	strb	r8, [r9, r6]
   138dc:	vld1.64	{d16-d17}, [r0]
   138e0:	ldr	r0, [r7, #712]	; 0x2c8
   138e4:	adds	r0, r0, #1
   138e8:	vadd.i64	q8, q9, q8
   138ec:	adc	r1, r1, #0
   138f0:	vst1.64	{d16-d17}, [r5 :128]
   138f4:	str	r0, [r7, #712]	; 0x2c8
   138f8:	str	r1, [r7, #716]	; 0x2cc
   138fc:	ldr	r1, [r4, #8]
   13900:	ldr	r0, [r4]
   13904:	add	r2, r1, #1
   13908:	str	r2, [r4, #8]
   1390c:	ldrb	r8, [r0, r1]
   13910:	mov	r0, sl
   13914:	bl	14800 <next@@Base+0x15e0>
   13918:	sub	r0, r8, #48	; 0x30
   1391c:	mov	r1, #704	; 0x2c0
   13920:	mov	r2, r7
   13924:	add	r6, r6, #1
   13928:	uxtb	r0, r0
   1392c:	cmp	r0, #10
   13930:	movwcc	r1, #696	; 0x2b8
   13934:	ldr	r1, [r2, r1]!
   13938:	adds	r1, r1, #1
   1393c:	str	r1, [r2]
   13940:	ldr	r1, [r2, #4]
   13944:	adc	r1, r1, #0
   13948:	cmp	r0, #10
   1394c:	str	r1, [r2, #4]
   13950:	bcc	138cc <next@@Base+0x6ac>
   13954:	b	13f38 <next@@Base+0xd18>
   13958:	add	r0, r6, #32
   1395c:	bl	14800 <next@@Base+0x15e0>
   13960:	uxtb	r0, r8
   13964:	mov	r1, #792	; 0x318
   13968:	mov	r2, r7
   1396c:	cmp	r0, #97	; 0x61
   13970:	movwne	r1, #784	; 0x310
   13974:	ldr	r1, [r2, r1]!
   13978:	adds	r1, r1, #1
   1397c:	str	r1, [r2]
   13980:	ldr	r1, [r2, #4]
   13984:	adc	r1, r1, #0
   13988:	cmp	r0, #97	; 0x61
   1398c:	str	r1, [r2, #4]
   13990:	bne	147b4 <next@@Base+0x1594>
   13994:	sub	r0, pc, #852	; 0x354
   13998:	vld1.64	{d16-d17}, [r5 :128]
   1399c:	ldr	r6, [sp, #4]
   139a0:	add	r8, sp, #8
   139a4:	vld1.64	{d18-d19}, [r0]
   139a8:	mov	r0, #97	; 0x61
   139ac:	strb	r0, [r8, r6]
   139b0:	vadd.i64	q9, q8, q9
   139b4:	vst1.64	{d18-d19}, [r5 :128]
   139b8:	ldr	r1, [r4, #8]
   139bc:	ldr	r0, [r4]
   139c0:	add	r2, r1, #1
   139c4:	str	r2, [r4, #8]
   139c8:	mov	r2, r7
   139cc:	ldrb	r0, [r0, r1]
   139d0:	mov	r1, #808	; 0x328
   139d4:	cmp	r0, #105	; 0x69
   139d8:	movwne	r1, #800	; 0x320
   139dc:	ldr	r1, [r2, r1]!
   139e0:	adds	r1, r1, #1
   139e4:	str	r1, [r2]
   139e8:	ldr	r1, [r2, #4]
   139ec:	adc	r1, r1, #0
   139f0:	cmp	r0, #105	; 0x69
   139f4:	str	r1, [r2, #4]
   139f8:	bne	147b4 <next@@Base+0x1594>
   139fc:	add	r0, r8, r6
   13a00:	mov	r1, #105	; 0x69
   13a04:	strb	r1, [r0, #1]
   13a08:	vmov.32	r1, d16[0]
   13a0c:	adds	r1, r1, #2
   13a10:	str	r1, [r5]
   13a14:	vmov.32	r1, d16[1]
   13a18:	adc	r1, r1, #0
   13a1c:	str	r1, [r5, #4]
   13a20:	ldrd	r2, [r5, #8]
   13a24:	adds	r1, r2, #1
   13a28:	str	r1, [r5, #8]
   13a2c:	adc	r1, r3, #0
   13a30:	str	r1, [r5, #12]
   13a34:	ldr	r2, [r4, #8]
   13a38:	ldr	r1, [r4]
   13a3c:	add	r3, r2, #1
   13a40:	str	r3, [r4, #8]
   13a44:	mov	r3, r7
   13a48:	ldrb	r1, [r1, r2]
   13a4c:	mov	r2, #824	; 0x338
   13a50:	cmp	r1, #110	; 0x6e
   13a54:	movwne	r2, #816	; 0x330
   13a58:	ldr	r2, [r3, r2]!
   13a5c:	adds	r2, r2, #1
   13a60:	str	r2, [r3]
   13a64:	ldr	r2, [r3, #4]
   13a68:	adc	r2, r2, #0
   13a6c:	cmp	r1, #110	; 0x6e
   13a70:	str	r2, [r3, #4]
   13a74:	bne	147b4 <next@@Base+0x1594>
   13a78:	mov	r1, #110	; 0x6e
   13a7c:	strh	r1, [r0, #2]
   13a80:	ldr	r0, [r7, #832]	; 0x340
   13a84:	ldr	r1, [r7, #836]	; 0x344
   13a88:	adds	r0, r0, #1
   13a8c:	adc	r1, r1, #0
   13a90:	str	r0, [r7, #832]	; 0x340
   13a94:	add	r0, r6, #4
   13a98:	str	r1, [r7, #836]	; 0x344
   13a9c:	bl	11fa0 <malloc@plt>
   13aa0:	add	r6, r6, #3
   13aa4:	mov	r1, r8
   13aa8:	mov	r4, r0
   13aac:	mov	r2, r6
   13ab0:	bl	12048 <strncpy@plt>
   13ab4:	mov	r0, #0
   13ab8:	strb	r0, [r4, r6]
   13abc:	mov	r0, #8
   13ac0:	bl	11fa0 <malloc@plt>
   13ac4:	mov	r1, r4
   13ac8:	mov	r6, r0
   13acc:	bl	12858 <init_token_function@@Base>
   13ad0:	b	1385c <next@@Base+0x63c>
   13ad4:	add	r0, r6, #40	; 0x28
   13ad8:	bl	14800 <next@@Base+0x15e0>
   13adc:	uxtb	r0, r8
   13ae0:	mov	r1, #848	; 0x350
   13ae4:	mov	r2, r7
   13ae8:	cmp	r0, #101	; 0x65
   13aec:	movwne	r1, #840	; 0x348
   13af0:	ldr	r1, [r2, r1]!
   13af4:	adds	r1, r1, #1
   13af8:	str	r1, [r2]
   13afc:	ldr	r1, [r2, #4]
   13b00:	adc	r1, r1, #0
   13b04:	cmp	r0, #101	; 0x65
   13b08:	str	r1, [r2, #4]
   13b0c:	bne	147b4 <next@@Base+0x1594>
   13b10:	add	r0, pc, #704	; 0x2c0
   13b14:	vld1.64	{d16-d17}, [r5 :128]
   13b18:	ldr	r6, [sp, #4]
   13b1c:	add	r3, sp, #8
   13b20:	vld1.64	{d18-d19}, [r0]
   13b24:	mov	r0, #101	; 0x65
   13b28:	strb	r0, [r3, r6]
   13b2c:	vadd.i64	q9, q8, q9
   13b30:	vst1.64	{d18-d19}, [r5 :128]
   13b34:	ldr	r1, [r4, #8]
   13b38:	ldr	r0, [r4]
   13b3c:	add	r2, r1, #1
   13b40:	str	r2, [r4, #8]
   13b44:	mov	r2, r7
   13b48:	ldrb	r0, [r0, r1]
   13b4c:	mov	r1, #864	; 0x360
   13b50:	cmp	r0, #116	; 0x74
   13b54:	movwne	r1, #856	; 0x358
   13b58:	ldr	r1, [r2, r1]!
   13b5c:	adds	r1, r1, #1
   13b60:	str	r1, [r2]
   13b64:	ldr	r1, [r2, #4]
   13b68:	adc	r1, r1, #0
   13b6c:	cmp	r0, #116	; 0x74
   13b70:	str	r1, [r2, #4]
   13b74:	bne	147b4 <next@@Base+0x1594>
   13b78:	add	ip, r3, r6
   13b7c:	mov	r1, #116	; 0x74
   13b80:	vmov.32	r2, d16[0]
   13b84:	vmov.32	r0, d16[1]
   13b88:	strb	r1, [ip, #1]
   13b8c:	adds	r1, r2, #2
   13b90:	adc	r3, r0, #0
   13b94:	str	r1, [r5]
   13b98:	mov	r1, r5
   13b9c:	str	r3, [r5, #4]
   13ba0:	ldr	r6, [r5, #8]
   13ba4:	ldr	r3, [r5, #12]
   13ba8:	adds	r6, r6, #1
   13bac:	adc	r3, r3, #0
   13bb0:	str	r6, [r5, #8]
   13bb4:	str	r3, [r5, #12]
   13bb8:	ldr	r6, [r4, #8]
   13bbc:	ldr	r3, [r4]
   13bc0:	add	r5, r6, #1
   13bc4:	str	r5, [r4, #8]
   13bc8:	mov	r5, r7
   13bcc:	ldrb	r3, [r3, r6]
   13bd0:	mov	r6, #880	; 0x370
   13bd4:	cmp	r3, #117	; 0x75
   13bd8:	movwne	r6, #872	; 0x368
   13bdc:	ldr	r6, [r5, r6]!
   13be0:	adds	r6, r6, #1
   13be4:	str	r6, [r5]
   13be8:	ldr	r6, [r5, #4]
   13bec:	adc	r6, r6, #0
   13bf0:	cmp	r3, #117	; 0x75
   13bf4:	str	r6, [r5, #4]
   13bf8:	bne	147b4 <next@@Base+0x1594>
   13bfc:	adds	r3, r2, #3
   13c00:	str	r3, [r1]
   13c04:	mov	r3, #117	; 0x75
   13c08:	strb	r3, [ip, #2]
   13c0c:	adc	r3, r0, #0
   13c10:	str	r3, [r1, #4]
   13c14:	ldr	r6, [r1, #8]
   13c18:	ldr	r3, [r1, #12]
   13c1c:	adds	r6, r6, #1
   13c20:	adc	r3, r3, #0
   13c24:	str	r6, [r1, #8]
   13c28:	str	r3, [r1, #12]
   13c2c:	ldr	r6, [r4, #8]
   13c30:	ldr	r3, [r4]
   13c34:	add	r5, r6, #1
   13c38:	str	r5, [r4, #8]
   13c3c:	mov	r5, r7
   13c40:	ldrb	r3, [r3, r6]
   13c44:	mov	r6, #896	; 0x380
   13c48:	cmp	r3, #114	; 0x72
   13c4c:	movwne	r6, #888	; 0x378
   13c50:	ldr	r6, [r5, r6]!
   13c54:	adds	r6, r6, #1
   13c58:	str	r6, [r5]
   13c5c:	ldr	r6, [r5, #4]
   13c60:	adc	r6, r6, #0
   13c64:	cmp	r3, #114	; 0x72
   13c68:	str	r6, [r5, #4]
   13c6c:	bne	147b4 <next@@Base+0x1594>
   13c70:	adds	r2, r2, #4
   13c74:	str	r2, [r1]
   13c78:	mov	r2, #114	; 0x72
   13c7c:	adc	r0, r0, #0
   13c80:	strb	r2, [ip, #3]
   13c84:	str	r0, [r1, #4]
   13c88:	ldr	r0, [r1, #8]
   13c8c:	ldr	r3, [r1, #12]
   13c90:	adds	r0, r0, #1
   13c94:	str	r0, [r1, #8]
   13c98:	adc	r0, r3, #0
   13c9c:	str	r0, [r1, #12]
   13ca0:	ldr	r1, [r4, #8]
   13ca4:	ldr	r0, [r4]
   13ca8:	add	r2, r1, #1
   13cac:	str	r2, [r4, #8]
   13cb0:	mov	r2, r7
   13cb4:	ldrb	r0, [r0, r1]
   13cb8:	mov	r1, #912	; 0x390
   13cbc:	cmp	r0, #110	; 0x6e
   13cc0:	movwne	r1, #904	; 0x388
   13cc4:	ldr	r1, [r2, r1]!
   13cc8:	adds	r1, r1, #1
   13ccc:	str	r1, [r2]
   13cd0:	ldr	r1, [r2, #4]
   13cd4:	adc	r1, r1, #0
   13cd8:	cmp	r0, #110	; 0x6e
   13cdc:	str	r1, [r2, #4]
   13ce0:	bne	147b4 <next@@Base+0x1594>
   13ce4:	ldr	r0, [r7, #920]	; 0x398
   13ce8:	ldr	r1, [r7, #924]	; 0x39c
   13cec:	adds	r0, r0, #1
   13cf0:	adc	r1, r1, #0
   13cf4:	str	r0, [r7, #920]	; 0x398
   13cf8:	mov	r0, #4
   13cfc:	str	r1, [r7, #924]	; 0x39c
   13d00:	bl	11fa0 <malloc@plt>
   13d04:	mov	r6, r0
   13d08:	bl	12978 <init_token_return@@Base>
   13d0c:	b	1385c <next@@Base+0x63c>
   13d10:	add	r0, r6, #24
   13d14:	bl	14800 <next@@Base+0x15e0>
   13d18:	movw	r1, #49360	; 0xc0d0
   13d1c:	mov	r0, #1
   13d20:	movt	r1, #2
   13d24:	str	r0, [r1]
   13d28:	uxtb	r0, r8
   13d2c:	cmp	r0, #102	; 0x66
   13d30:	beq	13fa0 <next@@Base+0xd80>
   13d34:	ldr	r9, [sp, #4]
   13d38:	cmp	r0, #110	; 0x6e
   13d3c:	add	r8, sp, #8
   13d40:	bne	147ac <next@@Base+0x158c>
   13d44:	add	r0, r6, #64	; 0x40
   13d48:	bl	14800 <next@@Base+0x15e0>
   13d4c:	add	r0, pc, #132	; 0x84
   13d50:	vld1.64	{d18-d19}, [r5 :128]
   13d54:	vld1.64	{d16-d17}, [r0]
   13d58:	mov	r0, #110	; 0x6e
   13d5c:	strb	r0, [r8, r9]
   13d60:	vadd.i64	q8, q9, q8
   13d64:	vst1.64	{d16-d17}, [r5 :128]
   13d68:	ldr	r1, [r4, #8]
   13d6c:	ldr	r0, [r4]
   13d70:	add	r2, r1, #1
   13d74:	str	r2, [r4, #8]
   13d78:	mov	r2, r7
   13d7c:	ldrb	r0, [r0, r1]
   13d80:	mov	r1, #760	; 0x2f8
   13d84:	cmp	r0, #116	; 0x74
   13d88:	movwne	r1, #752	; 0x2f0
   13d8c:	ldr	r1, [r2, r1]!
   13d90:	adds	r1, r1, #1
   13d94:	str	r1, [r2]
   13d98:	ldr	r1, [r2, #4]
   13d9c:	adc	r1, r1, #0
   13da0:	cmp	r0, #116	; 0x74
   13da4:	str	r1, [r2, #4]
   13da8:	bne	147b4 <next@@Base+0x1594>
   13dac:	ldr	r0, [r7, #768]	; 0x300
   13db0:	ldr	r1, [r7, #772]	; 0x304
   13db4:	adds	r0, r0, #1
   13db8:	adc	r1, r1, #0
   13dbc:	str	r0, [r7, #768]	; 0x300
   13dc0:	mov	r0, #4
   13dc4:	str	r1, [r7, #772]	; 0x304
   13dc8:	bl	11fa0 <malloc@plt>
   13dcc:	mov	r6, r0
   13dd0:	bl	127e0 <init_token_int_type@@Base>
   13dd4:	b	1385c <next@@Base+0x63c>
   13dd8:	andeq	r0, r0, r1
   13ddc:	andeq	r0, r0, r0
   13de0:	andeq	r0, r0, r1
   13de4:	andeq	r0, r0, r0
   13de8:	add	r0, r6, #48	; 0x30
   13dec:	bl	14800 <next@@Base+0x15e0>
   13df0:	uxtb	r0, r8
   13df4:	mov	r1, #936	; 0x3a8
   13df8:	mov	r2, r7
   13dfc:	cmp	r0, #108	; 0x6c
   13e00:	movwne	r1, #928	; 0x3a0
   13e04:	ldr	r1, [r2, r1]!
   13e08:	adds	r1, r1, #1
   13e0c:	str	r1, [r2]
   13e10:	ldr	r1, [r2, #4]
   13e14:	adc	r1, r1, #0
   13e18:	cmp	r0, #108	; 0x6c
   13e1c:	str	r1, [r2, #4]
   13e20:	bne	147b4 <next@@Base+0x1594>
   13e24:	sub	r0, pc, #84	; 0x54
   13e28:	vld1.64	{d16-d17}, [r5 :128]
   13e2c:	ldr	r6, [sp, #4]
   13e30:	add	r3, sp, #8
   13e34:	vld1.64	{d18-d19}, [r0]
   13e38:	mov	r0, #108	; 0x6c
   13e3c:	strb	r0, [r3, r6]
   13e40:	vadd.i64	q9, q8, q9
   13e44:	vst1.64	{d18-d19}, [r5 :128]
   13e48:	ldr	r1, [r4, #8]
   13e4c:	ldr	r0, [r4]
   13e50:	add	r2, r1, #1
   13e54:	str	r2, [r4, #8]
   13e58:	mov	r2, r7
   13e5c:	ldrb	r0, [r0, r1]
   13e60:	mov	r1, #952	; 0x3b8
   13e64:	cmp	r0, #115	; 0x73
   13e68:	movwne	r1, #944	; 0x3b0
   13e6c:	ldr	r1, [r2, r1]!
   13e70:	adds	r1, r1, #1
   13e74:	str	r1, [r2]
   13e78:	ldr	r1, [r2, #4]
   13e7c:	adc	r1, r1, #0
   13e80:	cmp	r0, #115	; 0x73
   13e84:	str	r1, [r2, #4]
   13e88:	bne	147b4 <next@@Base+0x1594>
   13e8c:	add	r0, r3, r6
   13e90:	mov	r1, #115	; 0x73
   13e94:	strb	r1, [r0, #1]
   13e98:	vmov.32	r0, d16[0]
   13e9c:	adds	r0, r0, #2
   13ea0:	str	r0, [r5]
   13ea4:	vmov.32	r0, d16[1]
   13ea8:	adc	r0, r0, #0
   13eac:	str	r0, [r5, #4]
   13eb0:	ldrd	r0, [r5, #8]
   13eb4:	adds	r0, r0, #1
   13eb8:	str	r0, [r5, #8]
   13ebc:	adc	r0, r1, #0
   13ec0:	str	r0, [r5, #12]
   13ec4:	ldr	r1, [r4, #8]
   13ec8:	ldr	r0, [r4]
   13ecc:	add	r2, r1, #1
   13ed0:	str	r2, [r4, #8]
   13ed4:	mov	r2, r7
   13ed8:	ldrb	r0, [r0, r1]
   13edc:	mov	r1, #968	; 0x3c8
   13ee0:	cmp	r0, #101	; 0x65
   13ee4:	movwne	r1, #960	; 0x3c0
   13ee8:	ldr	r1, [r2, r1]!
   13eec:	adds	r1, r1, #1
   13ef0:	str	r1, [r2]
   13ef4:	ldr	r1, [r2, #4]
   13ef8:	adc	r1, r1, #0
   13efc:	cmp	r0, #101	; 0x65
   13f00:	str	r1, [r2, #4]
   13f04:	bne	147b4 <next@@Base+0x1594>
   13f08:	ldr	r0, [r7, #976]	; 0x3d0
   13f0c:	ldr	r1, [r7, #980]	; 0x3d4
   13f10:	adds	r0, r0, #1
   13f14:	adc	r1, r1, #0
   13f18:	str	r0, [r7, #976]	; 0x3d0
   13f1c:	mov	r0, #4
   13f20:	str	r1, [r7, #980]	; 0x3d4
   13f24:	bl	11fa0 <malloc@plt>
   13f28:	mov	r6, r0
   13f2c:	bl	12a58 <init_token_else@@Base>
   13f30:	b	1385c <next@@Base+0x63c>
   13f34:	ldr	r6, [sp, #4]
   13f38:	movw	r0, #50256	; 0xc450
   13f3c:	sub	r1, pc, #364	; 0x16c
   13f40:	ldr	r2, [r7, #724]	; 0x2d4
   13f44:	movt	r0, #2
   13f48:	vld1.64	{d16-d17}, [r1]
   13f4c:	ldr	r1, [r7, #720]	; 0x2d0
   13f50:	vld1.64	{d18-d19}, [r0 :128]
   13f54:	adds	r1, r1, #1
   13f58:	vadd.i64	q8, q9, q8
   13f5c:	str	r1, [r7, #720]	; 0x2d0
   13f60:	mov	r1, #1
   13f64:	vst1.64	{d16-d17}, [r0 :128]
   13f68:	adc	r0, r2, #0
   13f6c:	str	r0, [r7, #724]	; 0x2d4
   13f70:	mov	r0, r4
   13f74:	bl	13148 <push_back_chars@@Base>
   13f78:	mov	r0, #0
   13f7c:	strb	r0, [r9, r6]
   13f80:	mov	r0, #8
   13f84:	bl	11fa0 <malloc@plt>
   13f88:	mov	r6, r0
   13f8c:	mov	r0, r9
   13f90:	bl	120b4 <atoi@plt>
   13f94:	mov	r1, r0
   13f98:	mov	r0, r6
   13f9c:	b	14008 <next@@Base+0xde8>
   13fa0:	add	r0, r6, #72	; 0x48
   13fa4:	bl	14800 <next@@Base+0x15e0>
   13fa8:	ldr	r1, [sp, #4]
   13fac:	add	r0, sp, #8
   13fb0:	add	r0, r0, r1
   13fb4:	mov	r1, #102	; 0x66
   13fb8:	strh	r1, [r0]
   13fbc:	ldr	r0, [r7, #776]	; 0x308
   13fc0:	ldr	r1, [r7, #780]	; 0x30c
   13fc4:	adds	r0, r0, #1
   13fc8:	adc	r1, r1, #0
   13fcc:	str	r0, [r7, #776]	; 0x308
   13fd0:	mov	r0, #4
   13fd4:	str	r1, [r7, #780]	; 0x30c
   13fd8:	bl	11fa0 <malloc@plt>
   13fdc:	mov	r6, r0
   13fe0:	bl	12a20 <init_token_if@@Base>
   13fe4:	b	1385c <next@@Base+0x63c>
   13fe8:	ldrd	r0, [r7, #184]	; 0xb8
   13fec:	adds	r0, r0, #1
   13ff0:	adc	r1, r1, #0
   13ff4:	strd	r0, [r7, #184]	; 0xb8
   13ff8:	mov	r0, #8
   13ffc:	bl	11fa0 <malloc@plt>
   14000:	mov	r1, #0
   14004:	mov	r6, r0
   14008:	bl	12818 <init_token_int_value@@Base>
   1400c:	b	1385c <next@@Base+0x63c>
   14010:	mov	r0, #240	; 0xf0
   14014:	cmp	r2, #40	; 0x28
   14018:	mov	r1, r7
   1401c:	ldr	sl, [sp, #4]
   14020:	movweq	r0, #232	; 0xe8
   14024:	ldr	r0, [r1, r0]!
   14028:	adds	r0, r0, #1
   1402c:	str	r0, [r1]
   14030:	ldr	r0, [r1, #4]
   14034:	adc	r0, r0, #0
   14038:	cmp	r2, #40	; 0x28
   1403c:	str	r0, [r1, #4]
   14040:	bne	14068 <next@@Base+0xe48>
   14044:	ldrd	r0, [r7, #248]	; 0xf8
   14048:	adds	r0, r0, #1
   1404c:	adc	r1, r1, #0
   14050:	strd	r0, [r7, #248]	; 0xf8
   14054:	mov	r0, #4
   14058:	bl	11fa0 <malloc@plt>
   1405c:	mov	r6, r0
   14060:	bl	12898 <init_token_opar@@Base>
   14064:	b	1385c <next@@Base+0x63c>
   14068:	mov	r0, #264	; 0x108
   1406c:	cmp	r2, #41	; 0x29
   14070:	mov	r1, r7
   14074:	movweq	r0, #256	; 0x100
   14078:	ldr	r0, [r1, r0]!
   1407c:	adds	r0, r0, #1
   14080:	str	r0, [r1]
   14084:	ldr	r0, [r1, #4]
   14088:	adc	r0, r0, #0
   1408c:	cmp	r2, #41	; 0x29
   14090:	str	r0, [r1, #4]
   14094:	bne	14148 <next@@Base+0xf28>
   14098:	ldr	r0, [r7, #272]	; 0x110
   1409c:	ldr	r1, [r7, #276]	; 0x114
   140a0:	adds	r0, r0, #1
   140a4:	adc	r1, r1, #0
   140a8:	str	r0, [r7, #272]	; 0x110
   140ac:	mov	r0, #4
   140b0:	str	r1, [r7, #276]	; 0x114
   140b4:	bl	11fa0 <malloc@plt>
   140b8:	mov	r6, r0
   140bc:	bl	128d0 <init_token_cpar@@Base>
   140c0:	b	1385c <next@@Base+0x63c>
   140c4:	ldr	r0, [r7, #296]	; 0x128
   140c8:	ldr	r1, [r7, #300]	; 0x12c
   140cc:	adds	r0, r0, #1
   140d0:	adc	r1, r1, #0
   140d4:	str	r0, [r7, #296]	; 0x128
   140d8:	mov	r0, #4
   140dc:	str	r1, [r7, #300]	; 0x12c
   140e0:	bl	11fa0 <malloc@plt>
   140e4:	mov	r6, r0
   140e8:	bl	12908 <init_token_obra@@Base>
   140ec:	b	1385c <next@@Base+0x63c>
   140f0:	ldr	r0, [r7, #320]	; 0x140
   140f4:	ldr	r1, [r7, #324]	; 0x144
   140f8:	adds	r0, r0, #1
   140fc:	adc	r1, r1, #0
   14100:	str	r0, [r7, #320]	; 0x140
   14104:	mov	r0, #4
   14108:	str	r1, [r7, #324]	; 0x144
   1410c:	bl	11fa0 <malloc@plt>
   14110:	mov	r6, r0
   14114:	bl	12940 <init_token_cbra@@Base>
   14118:	b	1385c <next@@Base+0x63c>
   1411c:	ldr	r0, [r7, #344]	; 0x158
   14120:	ldr	r1, [r7, #348]	; 0x15c
   14124:	adds	r0, r0, #1
   14128:	adc	r1, r1, #0
   1412c:	str	r0, [r7, #344]	; 0x158
   14130:	mov	r0, #4
   14134:	str	r1, [r7, #348]	; 0x15c
   14138:	bl	11fa0 <malloc@plt>
   1413c:	mov	r6, r0
   14140:	bl	129b0 <init_token_semicolon@@Base>
   14144:	b	1385c <next@@Base+0x63c>
   14148:	ldr	r0, [r7, #408]	; 0x198
   1414c:	ldr	r1, [r7, #412]	; 0x19c
   14150:	ldr	r6, [r7, #388]	; 0x184
   14154:	mov	r9, r5
   14158:	ldr	r5, [r7, #360]	; 0x168
   1415c:	adds	r3, r0, #1
   14160:	ldr	r0, [r7, #364]	; 0x16c
   14164:	adc	ip, r1, #0
   14168:	ldr	r1, [r7, #384]	; 0x180
   1416c:	adds	r1, r1, #1
   14170:	adc	lr, r6, #0
   14174:	ldr	r6, [r7, #336]	; 0x150
   14178:	adds	r5, r5, #1
   1417c:	adc	r8, r0, #0
   14180:	adds	r6, r6, #1
   14184:	str	r6, [r7, #336]	; 0x150
   14188:	str	r5, [r7, #360]	; 0x168
   1418c:	str	r1, [r7, #384]	; 0x180
   14190:	str	r3, [r7, #408]	; 0x198
   14194:	ldr	r1, [r7, #340]	; 0x154
   14198:	ldr	r6, [r7, #312]	; 0x138
   1419c:	ldr	r3, [r7, #288]	; 0x120
   141a0:	ldr	r5, [r7, #292]	; 0x124
   141a4:	ldr	r0, [r7, #316]	; 0x13c
   141a8:	adc	r1, r1, #0
   141ac:	adds	r6, r6, #1
   141b0:	str	r6, [r7, #312]	; 0x138
   141b4:	adc	r0, r0, #0
   141b8:	adds	r3, r3, #1
   141bc:	ldr	r6, [r7, #432]	; 0x1b0
   141c0:	adc	r5, r5, #0
   141c4:	adds	r6, r6, #1
   141c8:	str	r6, [r7, #432]	; 0x1b0
   141cc:	str	r3, [r7, #288]	; 0x120
   141d0:	str	r5, [r7, #292]	; 0x124
   141d4:	str	r0, [r7, #316]	; 0x13c
   141d8:	str	r1, [r7, #340]	; 0x154
   141dc:	str	r8, [r7, #364]	; 0x16c
   141e0:	str	lr, [r7, #388]	; 0x184
   141e4:	str	ip, [r7, #412]	; 0x19c
   141e8:	mov	r1, r7
   141ec:	ldr	r0, [r7, #436]	; 0x1b4
   141f0:	adc	r0, r0, #0
   141f4:	cmp	r2, #33	; 0x21
   141f8:	str	r0, [r7, #436]	; 0x1b4
   141fc:	mov	r0, #456	; 0x1c8
   14200:	movweq	r0, #448	; 0x1c0
   14204:	ldr	r0, [r1, r0]!
   14208:	adds	r0, r0, #1
   1420c:	str	r0, [r1]
   14210:	ldr	r0, [r1, #4]
   14214:	adc	r0, r0, #0
   14218:	cmp	r2, #33	; 0x21
   1421c:	str	r0, [r1, #4]
   14220:	bne	142ec <next@@Base+0x10cc>
   14224:	add	r0, pc, #1012	; 0x3f4
   14228:	vld1.64	{d18-d19}, [r9 :128]
   1422c:	add	r1, sp, #8
   14230:	mov	r5, #472	; 0x1d8
   14234:	vld1.64	{d16-d17}, [r0]
   14238:	mov	r0, #33	; 0x21
   1423c:	strb	r0, [r1, sl]
   14240:	vadd.i64	q8, q9, q8
   14244:	vst1.64	{d16-d17}, [r9 :128]
   14248:	ldr	r1, [r4, #8]
   1424c:	ldr	r0, [r4]
   14250:	add	r2, r1, #1
   14254:	str	r2, [r4, #8]
   14258:	ldrb	r8, [r0, r1]
   1425c:	mov	r0, #8
   14260:	cmp	r8, #61	; 0x3d
   14264:	movwne	r5, #464	; 0x1d0
   14268:	bl	11fa0 <malloc@plt>
   1426c:	mov	r6, r0
   14270:	mov	r0, r7
   14274:	ldr	r1, [r0, r5]!
   14278:	adds	r1, r1, #1
   1427c:	str	r1, [r0]
   14280:	ldr	r1, [r0, #4]
   14284:	adc	r1, r1, #0
   14288:	cmp	r8, #61	; 0x3d
   1428c:	str	r1, [r0, #4]
   14290:	beq	14420 <next@@Base+0x1200>
   14294:	movw	r0, #50256	; 0xc450
   14298:	add	r1, pc, #896	; 0x380
   1429c:	ldr	r2, [r7, #484]	; 0x1e4
   142a0:	movt	r0, #2
   142a4:	vld1.64	{d16-d17}, [r1]
   142a8:	ldr	r1, [r7, #480]	; 0x1e0
   142ac:	vld1.64	{d18-d19}, [r0 :128]
   142b0:	adds	r1, r1, #1
   142b4:	vadd.i64	q8, q9, q8
   142b8:	str	r1, [r7, #480]	; 0x1e0
   142bc:	mov	r1, #1
   142c0:	vst1.64	{d16-d17}, [r0 :128]
   142c4:	adc	r0, r2, #0
   142c8:	str	r0, [r7, #484]	; 0x1e4
   142cc:	mov	r0, r4
   142d0:	bl	13148 <push_back_chars@@Base>
   142d4:	mov	r0, #2
   142d8:	bl	11fa0 <malloc@plt>
   142dc:	ldrb	r2, [sp, #8]
   142e0:	mov	r1, r0
   142e4:	strb	r2, [r0], #1
   142e8:	b	14458 <next@@Base+0x1238>
   142ec:	ldr	r0, [r7, #584]	; 0x248
   142f0:	ldr	r1, [r7, #588]	; 0x24c
   142f4:	ldr	r5, [r7, #528]	; 0x210
   142f8:	ldr	r3, [r7, #512]	; 0x200
   142fc:	ldr	r6, [r7, #516]	; 0x204
   14300:	adds	ip, r0, #1
   14304:	ldr	r0, [r7, #532]	; 0x214
   14308:	adc	lr, r1, #0
   1430c:	ldr	r1, [r7, #624]	; 0x270
   14310:	adds	r5, r5, #1
   14314:	adc	r0, r0, #0
   14318:	adds	r3, r3, #1
   1431c:	adc	r6, r6, #0
   14320:	adds	r1, r1, #1
   14324:	str	r1, [r7, #624]	; 0x270
   14328:	str	r3, [r7, #512]	; 0x200
   1432c:	str	r6, [r7, #516]	; 0x204
   14330:	str	r5, [r7, #528]	; 0x210
   14334:	str	r0, [r7, #532]	; 0x214
   14338:	str	ip, [r7, #584]	; 0x248
   1433c:	str	lr, [r7, #588]	; 0x24c
   14340:	mov	r1, r7
   14344:	ldr	r0, [r7, #628]	; 0x274
   14348:	adc	r0, r0, #0
   1434c:	cmp	r2, #38	; 0x26
   14350:	str	r0, [r7, #628]	; 0x274
   14354:	mov	r0, #664	; 0x298
   14358:	movweq	r0, #656	; 0x290
   1435c:	ldr	r0, [r1, r0]!
   14360:	adds	r0, r0, #1
   14364:	str	r0, [r1]
   14368:	ldr	r0, [r1, #4]
   1436c:	adc	r0, r0, #0
   14370:	cmp	r2, #38	; 0x26
   14374:	str	r0, [r1, #4]
   14378:	bne	147d4 <next@@Base+0x15b4>
   1437c:	add	r0, pc, #668	; 0x29c
   14380:	vld1.64	{d18-d19}, [r9 :128]
   14384:	mov	r8, #38	; 0x26
   14388:	mov	r5, #680	; 0x2a8
   1438c:	vld1.64	{d16-d17}, [r0]
   14390:	add	r0, sp, #8
   14394:	strb	r8, [r0, sl]
   14398:	vadd.i64	q8, q9, q8
   1439c:	vst1.64	{d16-d17}, [r9 :128]
   143a0:	ldr	r1, [r4, #8]
   143a4:	ldr	r0, [r4]
   143a8:	add	r2, r1, #1
   143ac:	str	r2, [r4, #8]
   143b0:	ldrb	r4, [r0, r1]
   143b4:	mov	r0, #8
   143b8:	cmp	r4, #38	; 0x26
   143bc:	movwne	r5, #672	; 0x2a0
   143c0:	bl	11fa0 <malloc@plt>
   143c4:	mov	r6, r0
   143c8:	mov	r0, r7
   143cc:	ldr	r1, [r0, r5]!
   143d0:	adds	r1, r1, #1
   143d4:	str	r1, [r0]
   143d8:	ldr	r1, [r0, #4]
   143dc:	adc	r1, r1, #0
   143e0:	cmp	r4, #38	; 0x26
   143e4:	str	r1, [r0, #4]
   143e8:	bne	147b4 <next@@Base+0x1594>
   143ec:	ldr	r0, [r7, #688]	; 0x2b0
   143f0:	ldr	r1, [r7, #692]	; 0x2b4
   143f4:	adds	r0, r0, #1
   143f8:	adc	r1, r1, #0
   143fc:	str	r0, [r7, #688]	; 0x2b0
   14400:	str	r1, [r7, #692]	; 0x2b4
   14404:	mov	r0, #3
   14408:	bl	11fa0 <malloc@plt>
   1440c:	mov	r1, r0
   14410:	ldrb	r0, [sp, #8]
   14414:	strh	r8, [r1, #1]
   14418:	strb	r0, [r1]
   1441c:	b	14610 <next@@Base+0x13f0>
   14420:	ldr	r0, [r7, #488]	; 0x1e8
   14424:	ldr	r1, [r7, #492]	; 0x1ec
   14428:	adds	r0, r0, #1
   1442c:	adc	r1, r1, #0
   14430:	str	r0, [r7, #488]	; 0x1e8
   14434:	mov	r0, #3
   14438:	str	r1, [r7, #492]	; 0x1ec
   1443c:	bl	11fa0 <malloc@plt>
   14440:	mov	r1, r0
   14444:	ldrb	r0, [sp, #8]
   14448:	mov	r2, #61	; 0x3d
   1444c:	strb	r2, [r1, #1]
   14450:	strb	r0, [r1]
   14454:	add	r0, r1, #2
   14458:	mov	r2, #0
   1445c:	strb	r2, [r0]
   14460:	ldr	r0, [r7, #496]	; 0x1f0
   14464:	ldr	r2, [r7, #500]	; 0x1f4
   14468:	adds	r0, r0, #1
   1446c:	adc	r2, r2, #0
   14470:	str	r0, [r7, #496]	; 0x1f0
   14474:	str	r2, [r7, #500]	; 0x1f4
   14478:	b	14610 <next@@Base+0x13f0>
   1447c:	ldr	r0, [r7, #456]	; 0x1c8
   14480:	ldr	r1, [r7, #460]	; 0x1cc
   14484:	adds	r0, r0, #1
   14488:	adc	r1, r1, #0
   1448c:	str	r0, [r7, #456]	; 0x1c8
   14490:	mov	r0, #512	; 0x200
   14494:	cmp	r2, #60	; 0x3c
   14498:	str	r1, [r7, #460]	; 0x1cc
   1449c:	movweq	r0, #504	; 0x1f8
   144a0:	mov	r1, r7
   144a4:	ldr	r0, [r1, r0]!
   144a8:	adds	r0, r0, #1
   144ac:	str	r0, [r1]
   144b0:	ldr	r0, [r1, #4]
   144b4:	adc	r0, r0, #0
   144b8:	cmp	r2, #60	; 0x3c
   144bc:	str	r0, [r1, #4]
   144c0:	beq	144f4 <next@@Base+0x12d4>
   144c4:	mov	r0, #528	; 0x210
   144c8:	cmp	r2, #62	; 0x3e
   144cc:	mov	r1, r7
   144d0:	movweq	r0, #520	; 0x208
   144d4:	ldr	r0, [r1, r0]!
   144d8:	adds	r0, r0, #1
   144dc:	str	r0, [r1]
   144e0:	ldr	r0, [r1, #4]
   144e4:	adc	r0, r0, #0
   144e8:	cmp	r2, #62	; 0x3e
   144ec:	str	r0, [r1, #4]
   144f0:	bne	14630 <next@@Base+0x1410>
   144f4:	add	r0, pc, #756	; 0x2f4
   144f8:	vld1.64	{d18-d19}, [r5 :128]
   144fc:	vld1.64	{d16-d17}, [r0]
   14500:	add	r0, sp, #8
   14504:	strb	r8, [r0, lr]
   14508:	vadd.i64	q8, q9, q8
   1450c:	vst1.64	{d16-d17}, [r5 :128]
   14510:	mov	r5, #544	; 0x220
   14514:	ldr	r1, [r4, #8]
   14518:	ldr	r0, [r4]
   1451c:	add	r2, r1, #1
   14520:	str	r2, [r4, #8]
   14524:	ldrb	r8, [r0, r1]
   14528:	mov	r0, #8
   1452c:	cmp	r8, #61	; 0x3d
   14530:	movwne	r5, #536	; 0x218
   14534:	bl	11fa0 <malloc@plt>
   14538:	mov	r6, r0
   1453c:	mov	r0, r7
   14540:	ldr	r1, [r0, r5]!
   14544:	adds	r1, r1, #1
   14548:	str	r1, [r0]
   1454c:	ldr	r1, [r0, #4]
   14550:	adc	r1, r1, #0
   14554:	cmp	r8, #61	; 0x3d
   14558:	str	r1, [r0, #4]
   1455c:	beq	145b8 <next@@Base+0x1398>
   14560:	movw	r0, #50256	; 0xc450
   14564:	add	r1, pc, #644	; 0x284
   14568:	ldr	r2, [r7, #556]	; 0x22c
   1456c:	movt	r0, #2
   14570:	vld1.64	{d16-d17}, [r1]
   14574:	ldr	r1, [r7, #552]	; 0x228
   14578:	vld1.64	{d18-d19}, [r0 :128]
   1457c:	adds	r1, r1, #1
   14580:	vadd.i64	q8, q9, q8
   14584:	str	r1, [r7, #552]	; 0x228
   14588:	mov	r1, #1
   1458c:	vst1.64	{d16-d17}, [r0 :128]
   14590:	adc	r0, r2, #0
   14594:	str	r0, [r7, #556]	; 0x22c
   14598:	mov	r0, r4
   1459c:	bl	13148 <push_back_chars@@Base>
   145a0:	mov	r0, #2
   145a4:	bl	11fa0 <malloc@plt>
   145a8:	ldrb	r2, [sp, #8]
   145ac:	mov	r1, r0
   145b0:	strb	r2, [r0], #1
   145b4:	b	145f0 <next@@Base+0x13d0>
   145b8:	ldr	r0, [r7, #560]	; 0x230
   145bc:	ldr	r1, [r7, #564]	; 0x234
   145c0:	adds	r0, r0, #1
   145c4:	adc	r1, r1, #0
   145c8:	str	r0, [r7, #560]	; 0x230
   145cc:	mov	r0, #3
   145d0:	str	r1, [r7, #564]	; 0x234
   145d4:	bl	11fa0 <malloc@plt>
   145d8:	mov	r1, r0
   145dc:	ldrb	r0, [sp, #8]
   145e0:	mov	r2, #61	; 0x3d
   145e4:	strb	r2, [r1, #1]
   145e8:	strb	r0, [r1]
   145ec:	add	r0, r1, #2
   145f0:	mov	r2, #0
   145f4:	strb	r2, [r0]
   145f8:	ldr	r0, [r7, #568]	; 0x238
   145fc:	ldr	r2, [r7, #572]	; 0x23c
   14600:	adds	r0, r0, #1
   14604:	adc	r2, r2, #0
   14608:	str	r0, [r7, #568]	; 0x238
   1460c:	str	r2, [r7, #572]	; 0x23c
   14610:	mov	r0, r6
   14614:	bl	12a90 <init_token_boolean_op@@Base>
   14618:	b	1385c <next@@Base+0x63c>
   1461c:	nop	{0}
   14620:	andeq	r0, r0, r1
   14624:	andeq	r0, r0, r0
   14628:	andeq	r0, r0, r1
   1462c:	andeq	r0, r0, r0
   14630:	mov	r0, #584	; 0x248
   14634:	cmp	r2, #61	; 0x3d
   14638:	mov	r1, r7
   1463c:	movweq	r0, #576	; 0x240
   14640:	ldr	r0, [r1, r0]!
   14644:	adds	r0, r0, #1
   14648:	str	r0, [r1]
   1464c:	ldr	r0, [r1, #4]
   14650:	adc	r0, r0, #0
   14654:	cmp	r2, #61	; 0x3d
   14658:	str	r0, [r1, #4]
   1465c:	bne	146ec <next@@Base+0x14cc>
   14660:	add	r0, pc, #392	; 0x188
   14664:	vld1.64	{d18-d19}, [r5 :128]
   14668:	mov	r8, #61	; 0x3d
   1466c:	vld1.64	{d16-d17}, [r0]
   14670:	add	r0, sp, #8
   14674:	strb	r8, [r0, lr]
   14678:	vadd.i64	q8, q9, q8
   1467c:	vst1.64	{d16-d17}, [r5 :128]
   14680:	mov	r5, #600	; 0x258
   14684:	ldr	r1, [r4, #8]
   14688:	ldr	r0, [r4]
   1468c:	add	r2, r1, #1
   14690:	str	r2, [r4, #8]
   14694:	ldrb	r4, [r0, r1]
   14698:	mov	r0, #8
   1469c:	cmp	r4, #61	; 0x3d
   146a0:	movwne	r5, #592	; 0x250
   146a4:	bl	11fa0 <malloc@plt>
   146a8:	mov	r6, r0
   146ac:	mov	r0, r7
   146b0:	ldr	r1, [r0, r5]!
   146b4:	adds	r1, r1, #1
   146b8:	str	r1, [r0]
   146bc:	ldr	r1, [r0, #4]
   146c0:	adc	r1, r1, #0
   146c4:	cmp	r4, #61	; 0x3d
   146c8:	str	r1, [r0, #4]
   146cc:	bne	147b4 <next@@Base+0x1594>
   146d0:	ldr	r0, [r7, #608]	; 0x260
   146d4:	ldr	r1, [r7, #612]	; 0x264
   146d8:	adds	r0, r0, #1
   146dc:	adc	r1, r1, #0
   146e0:	str	r0, [r7, #608]	; 0x260
   146e4:	str	r1, [r7, #612]	; 0x264
   146e8:	b	14404 <next@@Base+0x11e4>
   146ec:	mov	r0, #624	; 0x270
   146f0:	cmp	r2, #124	; 0x7c
   146f4:	mov	r1, r7
   146f8:	movweq	r0, #616	; 0x268
   146fc:	ldr	r0, [r1, r0]!
   14700:	adds	r0, r0, #1
   14704:	str	r0, [r1]
   14708:	ldr	r0, [r1, #4]
   1470c:	adc	r0, r0, #0
   14710:	cmp	r2, #124	; 0x7c
   14714:	str	r0, [r1, #4]
   14718:	bne	147bc <next@@Base+0x159c>
   1471c:	add	r0, pc, #204	; 0xcc
   14720:	vld1.64	{d18-d19}, [ip :128]
   14724:	ldr	r1, [sp, #4]
   14728:	mov	r8, #124	; 0x7c
   1472c:	mov	r5, #640	; 0x280
   14730:	vld1.64	{d16-d17}, [r0]
   14734:	add	r0, sp, #8
   14738:	strb	r8, [r0, r1]
   1473c:	vadd.i64	q8, q9, q8
   14740:	vst1.64	{d16-d17}, [ip :128]
   14744:	ldr	r1, [r4, #8]
   14748:	ldr	r0, [r4]
   1474c:	add	r2, r1, #1
   14750:	str	r2, [r4, #8]
   14754:	ldrb	r4, [r0, r1]
   14758:	mov	r0, #8
   1475c:	cmp	r4, #124	; 0x7c
   14760:	movwne	r5, #632	; 0x278
   14764:	bl	11fa0 <malloc@plt>
   14768:	mov	r6, r0
   1476c:	mov	r0, r7
   14770:	ldr	r1, [r0, r5]!
   14774:	adds	r1, r1, #1
   14778:	str	r1, [r0]
   1477c:	ldr	r1, [r0, #4]
   14780:	adc	r1, r1, #0
   14784:	cmp	r4, #124	; 0x7c
   14788:	str	r1, [r0, #4]
   1478c:	bne	147b4 <next@@Base+0x1594>
   14790:	ldr	r0, [r7, #648]	; 0x288
   14794:	ldr	r1, [r7, #652]	; 0x28c
   14798:	adds	r0, r0, #1
   1479c:	adc	r1, r1, #0
   147a0:	str	r0, [r7, #648]	; 0x288
   147a4:	str	r1, [r7, #652]	; 0x28c
   147a8:	b	14404 <next@@Base+0x11e4>
   147ac:	add	r0, r6, #56	; 0x38
   147b0:	bl	14800 <next@@Base+0x15e0>
   147b4:	mov	r0, #1
   147b8:	bl	11fdc <exit@plt>
   147bc:	ldr	r0, [r7, #664]	; 0x298
   147c0:	ldr	r1, [r7, #668]	; 0x29c
   147c4:	adds	r0, r0, #1
   147c8:	adc	r1, r1, #0
   147cc:	str	r0, [r7, #664]	; 0x298
   147d0:	str	r1, [r7, #668]	; 0x29c
   147d4:	movw	r0, #49416	; 0xc108
   147d8:	movw	r1, #43905	; 0xab81
   147dc:	movt	r0, #2
   147e0:	movt	r1, #1
   147e4:	ldr	r0, [r0]
   147e8:	bl	1200c <fprintf@plt>
   147ec:	b	147b4 <next@@Base+0x1594>
   147f0:	andeq	r0, r0, r1
   147f4:	andeq	r0, r0, r0
   147f8:	andeq	r0, r0, r1
   147fc:	andeq	r0, r0, r0
   14800:	movw	r1, #49360	; 0xc0d0
   14804:	movt	r1, #2
   14808:	ldr	r1, [r1]
   1480c:	cmn	r1, #1
   14810:	ldrne	r0, [r0, r1, lsl #2]
   14814:	cmpne	r0, #0
   14818:	bne	14820 <next@@Base+0x1600>
   1481c:	bx	lr
   14820:	ldrd	r2, [r0]
   14824:	adds	r2, r2, #1
   14828:	adc	r3, r3, #0
   1482c:	strd	r2, [r0]
   14830:	bx	lr
   14834:	push	{r4, r5, r6, lr}
   14838:	sub	sp, sp, #8
   1483c:	movw	r0, #44336	; 0xad30
   14840:	movw	r1, #42359	; 0xa577
   14844:	movw	r2, #28949	; 0x7115
   14848:	movt	r0, #1
   1484c:	movt	r1, #1
   14850:	movt	r2, #62686	; 0xf4de
   14854:	bl	17534 <__generate_code_for_binary_boolean_expression@@Base+0x4ec>
   14858:	movw	r0, #44272	; 0xacf0
   1485c:	movw	r6, #44112	; 0xac50
   14860:	mov	r5, #0
   14864:	movt	r0, #1
   14868:	movt	r6, #1
   1486c:	add	r4, r0, #4
   14870:	mov	r3, r6
   14874:	ldr	r0, [r3, r5]!
   14878:	ldr	r1, [r3, #16]
   1487c:	str	r1, [sp]
   14880:	ldmib	r3, {r1, r2}
   14884:	ldrb	r3, [r3, #12]
   14888:	bl	17c98 <__generate_code_for_binary_boolean_expression@@Base+0xc50>
   1488c:	ldrd	r0, [r4, #-4]
   14890:	bl	1854c <__generate_code_for_binary_boolean_expression@@Base+0x1504>
   14894:	add	r5, r5, #20
   14898:	add	r4, r4, #8
   1489c:	cmp	r5, #160	; 0xa0
   148a0:	bne	14870 <next@@Base+0x1650>
   148a4:	bl	18cc8 <__generate_code_for_binary_boolean_expression@@Base+0x1c80>
   148a8:	add	sp, sp, #8
   148ac:	pop	{r4, r5, r6, lr}
   148b0:	b	19a34 <__generate_code_for_binary_boolean_expression@@Base+0x29ec>
   148b4:	push	{fp, lr}
   148b8:	bl	14834 <next@@Base+0x1614>
   148bc:	movw	r2, #50176	; 0xc400
   148c0:	vmov.i32	q8, #0	; 0x00000000
   148c4:	movw	r0, #50128	; 0xc3d0
   148c8:	movt	r2, #2
   148cc:	movt	r0, #2
   148d0:	vst1.64	{d16-d17}, [r2 :128]
   148d4:	movw	r2, #50192	; 0xc410
   148d8:	add	r1, r0, #16
   148dc:	movt	r2, #2
   148e0:	vst1.64	{d16-d17}, [r1 :128]
   148e4:	movw	r1, #50112	; 0xc3c0
   148e8:	vst1.64	{d16-d17}, [r2 :128]
   148ec:	movw	r2, #50208	; 0xc420
   148f0:	movt	r1, #2
   148f4:	movt	r2, #2
   148f8:	vst1.64	{d16-d17}, [r1 :128]
   148fc:	mov	r1, #0
   14900:	vst1.64	{d16-d17}, [r2 :128]
   14904:	movw	r2, #50256	; 0xc450
   14908:	str	r1, [r0, #32]
   1490c:	movt	r2, #2
   14910:	vst1.64	{d16-d17}, [r2 :128]
   14914:	mov	r2, #36	; 0x24
   14918:	vst1.64	{d16-d17}, [r0 :128], r2
   1491c:	mov	r2, #1008	; 0x3f0
   14920:	str	r1, [r0]
   14924:	movw	r0, #50224	; 0xc430
   14928:	mov	r1, #0
   1492c:	movt	r0, #2
   14930:	vst1.64	{d16-d17}, [r0 :128]!
   14934:	vst1.64	{d16-d17}, [r0 :128]
   14938:	movw	r0, #50272	; 0xc460
   1493c:	movt	r0, #2
   14940:	bl	1203c <memset@plt>
   14944:	pop	{fp, pc}
   14948:	movw	r0, #18484	; 0x4834
   1494c:	movw	r1, #18612	; 0x48b4
   14950:	movt	r0, #1
   14954:	movt	r1, #1
   14958:	b	19ee4 <__gcov_flush@@Base+0xb4>
   1495c:	andeq	r0, r0, r0

00014960 <init_ast_base@@Base>:
   14960:	movw	ip, #51280	; 0xc850
   14964:	add	r3, pc, #28
   14968:	movt	ip, #2
   1496c:	vld1.64	{d16-d17}, [r3]
   14970:	vld1.64	{d18-d19}, [ip :128]
   14974:	vadd.i64	q8, q9, q8
   14978:	vst1.64	{d16-d17}, [ip :128]
   1497c:	stm	r0, {r1, r2}
   14980:	bx	lr
   14984:	nop	{0}
   14988:	andeq	r0, r0, r1
   1498c:	andeq	r0, r0, r0
   14990:	andeq	r0, r0, r1
   14994:	andeq	r0, r0, r0

00014998 <init_ast_base_single@@Base>:
   14998:	movw	ip, #51280	; 0xc850
   1499c:	movw	r3, #51296	; 0xc860
   149a0:	add	r2, pc, #48	; 0x30
   149a4:	movt	ip, #2
   149a8:	movt	r3, #2
   149ac:	vld1.64	{d16-d17}, [r2]
   149b0:	mov	r2, #0
   149b4:	vld1.64	{d18-d19}, [r3 :128]
   149b8:	vld1.64	{d20-d21}, [ip :128]
   149bc:	vadd.i64	q9, q9, q8
   149c0:	vadd.i64	q8, q10, q8
   149c4:	vst1.64	{d18-d19}, [r3 :128]
   149c8:	vst1.64	{d16-d17}, [ip :128]
   149cc:	stm	r0, {r1, r2}
   149d0:	bx	lr
   149d4:	nop	{0}
   149d8:	andeq	r0, r0, r1
   149dc:	andeq	r0, r0, r0
   149e0:	andeq	r0, r0, r1
   149e4:	andeq	r0, r0, r0

000149e8 <init_node_id@@Base>:
   149e8:	movw	r2, #51296	; 0xc860
   149ec:	add	r3, pc, #76	; 0x4c
   149f0:	movw	ip, #51312	; 0xc870
   149f4:	vld1.64	{d16-d17}, [r3]
   149f8:	movw	r3, #51280	; 0xc850
   149fc:	movt	r2, #2
   14a00:	movt	ip, #2
   14a04:	vld1.64	{d20-d21}, [r2 :128]
   14a08:	movt	r3, #2
   14a0c:	vld1.64	{d18-d19}, [ip :128]
   14a10:	vld1.64	{d22-d23}, [r3 :128]
   14a14:	vadd.i64	q10, q10, q8
   14a18:	vadd.i64	q9, q9, q8
   14a1c:	vadd.i64	q8, q11, q8
   14a20:	vst1.64	{d20-d21}, [r2 :128]
   14a24:	mov	r2, #0
   14a28:	vst1.64	{d18-d19}, [ip :128]
   14a2c:	vst1.64	{d16-d17}, [r3 :128]
   14a30:	str	r2, [r0]
   14a34:	str	r2, [r0, #4]
   14a38:	str	r1, [r0, #8]
   14a3c:	bx	lr
   14a40:	andeq	r0, r0, r1
   14a44:	andeq	r0, r0, r0
   14a48:	andeq	r0, r0, r1
   14a4c:	andeq	r0, r0, r0

00014a50 <init_node_int@@Base>:
   14a50:	add	r3, pc, #88	; 0x58
   14a54:	movw	ip, #51328	; 0xc880
   14a58:	movw	r2, #51296	; 0xc860
   14a5c:	vld1.64	{d16-d17}, [r3]
   14a60:	movw	r3, #51280	; 0xc850
   14a64:	movt	ip, #2
   14a68:	movt	r2, #2
   14a6c:	movt	r3, #2
   14a70:	vld1.64	{d18-d19}, [ip :128]
   14a74:	vld1.64	{d20-d21}, [r2 :128]
   14a78:	vld1.64	{d22-d23}, [r3 :128]
   14a7c:	vadd.i64	q9, q9, q8
   14a80:	vadd.i64	q10, q10, q8
   14a84:	vadd.i64	q8, q11, q8
   14a88:	vst1.64	{d20-d21}, [r2 :128]
   14a8c:	mov	r2, #0
   14a90:	vst1.64	{d18-d19}, [ip :128]
   14a94:	vst1.64	{d16-d17}, [r3 :128]
   14a98:	mov	r3, #1
   14a9c:	str	r3, [r0]
   14aa0:	str	r2, [r0, #4]
   14aa4:	str	r1, [r0, #8]
   14aa8:	bx	lr
   14aac:	nop	{0}
   14ab0:	andeq	r0, r0, r1
   14ab4:	andeq	r0, r0, r0
   14ab8:	andeq	r0, r0, r1
   14abc:	andeq	r0, r0, r0

00014ac0 <init_node_function@@Base>:
   14ac0:	push	{fp, lr}
   14ac4:	mov	fp, sp
   14ac8:	add	r3, pc, #88	; 0x58
   14acc:	movw	ip, #51344	; 0xc890
   14ad0:	movw	lr, #51280	; 0xc850
   14ad4:	vld1.64	{d16-d17}, [r3]
   14ad8:	movw	r3, #51296	; 0xc860
   14adc:	movt	ip, #2
   14ae0:	movt	lr, #2
   14ae4:	movt	r3, #2
   14ae8:	vld1.64	{d18-d19}, [ip :128]
   14aec:	vld1.64	{d22-d23}, [lr :128]
   14af0:	vld1.64	{d20-d21}, [r3 :128]
   14af4:	vadd.i64	q9, q9, q8
   14af8:	vadd.i64	q10, q10, q8
   14afc:	vadd.i64	q8, q11, q8
   14b00:	vst1.64	{d18-d19}, [ip :128]
   14b04:	mov	ip, #0
   14b08:	vst1.64	{d20-d21}, [r3 :128]
   14b0c:	mov	r3, #2
   14b10:	vst1.64	{d16-d17}, [lr :128]
   14b14:	stm	r0, {r3, ip}
   14b18:	str	r1, [r0, #8]
   14b1c:	str	r2, [r0, #12]
   14b20:	pop	{fp, pc}
   14b24:	nop	{0}
   14b28:	andeq	r0, r0, r1
   14b2c:	andeq	r0, r0, r0
   14b30:	andeq	r0, r0, r1
   14b34:	andeq	r0, r0, r0

00014b38 <init_node_return@@Base>:
   14b38:	add	r3, pc, #88	; 0x58
   14b3c:	movw	ip, #51360	; 0xc8a0
   14b40:	movw	r2, #51296	; 0xc860
   14b44:	vld1.64	{d16-d17}, [r3]
   14b48:	movw	r3, #51280	; 0xc850
   14b4c:	movt	ip, #2
   14b50:	movt	r2, #2
   14b54:	movt	r3, #2
   14b58:	vld1.64	{d18-d19}, [ip :128]
   14b5c:	vld1.64	{d20-d21}, [r2 :128]
   14b60:	vld1.64	{d22-d23}, [r3 :128]
   14b64:	vadd.i64	q9, q9, q8
   14b68:	vadd.i64	q10, q10, q8
   14b6c:	vadd.i64	q8, q11, q8
   14b70:	vst1.64	{d20-d21}, [r2 :128]
   14b74:	mov	r2, #0
   14b78:	vst1.64	{d18-d19}, [ip :128]
   14b7c:	vst1.64	{d16-d17}, [r3 :128]
   14b80:	mov	r3, #3
   14b84:	str	r3, [r0]
   14b88:	str	r2, [r0, #4]
   14b8c:	str	r1, [r0, #8]
   14b90:	bx	lr
   14b94:	nop	{0}
   14b98:	andeq	r0, r0, r1
   14b9c:	andeq	r0, r0, r0
   14ba0:	andeq	r0, r0, r1
   14ba4:	andeq	r0, r0, r0

00014ba8 <init_node_if@@Base>:
   14ba8:	push	{r4, sl, fp, lr}
   14bac:	add	fp, sp, #8
   14bb0:	movw	ip, #51376	; 0xc8b0
   14bb4:	movw	r4, #51296	; 0xc860
   14bb8:	add	lr, pc, #72	; 0x48
   14bbc:	movt	ip, #2
   14bc0:	vld1.64	{d16-d17}, [lr]
   14bc4:	movw	lr, #51280	; 0xc850
   14bc8:	movt	r4, #2
   14bcc:	vld1.64	{d18-d19}, [ip :128]
   14bd0:	vld1.64	{d20-d21}, [r4 :128]
   14bd4:	movt	lr, #2
   14bd8:	vld1.64	{d22-d23}, [lr :128]
   14bdc:	vadd.i64	q9, q9, q8
   14be0:	vadd.i64	q10, q10, q8
   14be4:	vadd.i64	q8, q11, q8
   14be8:	vst1.64	{d18-d19}, [ip :128]
   14bec:	vst1.64	{d20-d21}, [r4 :128]
   14bf0:	mov	ip, #0
   14bf4:	mov	r4, #4
   14bf8:	vst1.64	{d16-d17}, [lr :128]
   14bfc:	stmia	r0!, {r4, ip}
   14c00:	stm	r0, {r1, r2, r3}
   14c04:	pop	{r4, sl, fp, pc}
   14c08:	andeq	r0, r0, r1
   14c0c:	andeq	r0, r0, r0
   14c10:	andeq	r0, r0, r1
   14c14:	andeq	r0, r0, r0

00014c18 <init_node_boolean_operator@@Base>:
   14c18:	push	{r4, sl, fp, lr}
   14c1c:	add	fp, sp, #8
   14c20:	movw	ip, #51392	; 0xc8c0
   14c24:	movw	r4, #51296	; 0xc860
   14c28:	add	lr, pc, #80	; 0x50
   14c2c:	movt	ip, #2
   14c30:	vld1.64	{d16-d17}, [lr]
   14c34:	movw	lr, #51280	; 0xc850
   14c38:	movt	r4, #2
   14c3c:	vld1.64	{d18-d19}, [ip :128]
   14c40:	vld1.64	{d20-d21}, [r4 :128]
   14c44:	movt	lr, #2
   14c48:	vld1.64	{d22-d23}, [lr :128]
   14c4c:	vadd.i64	q9, q9, q8
   14c50:	vadd.i64	q10, q10, q8
   14c54:	vadd.i64	q8, q11, q8
   14c58:	vst1.64	{d18-d19}, [ip :128]
   14c5c:	vst1.64	{d20-d21}, [r4 :128]
   14c60:	mov	r4, #5
   14c64:	mov	ip, #0
   14c68:	vst1.64	{d16-d17}, [lr :128]
   14c6c:	stm	r0, {r4, ip}
   14c70:	str	r2, [r0, #8]
   14c74:	str	r3, [r0, #12]
   14c78:	str	r1, [r0, #16]
   14c7c:	pop	{r4, sl, fp, pc}
   14c80:	andeq	r0, r0, r1
   14c84:	andeq	r0, r0, r0
   14c88:	andeq	r0, r0, r1
   14c8c:	andeq	r0, r0, r0

00014c90 <free_node@@Base>:
   14c90:	push	{r4, r5, fp, lr}
   14c94:	add	fp, sp, #8
   14c98:	movw	r5, #51408	; 0xc8d0
   14c9c:	mov	r4, r0
   14ca0:	movw	r0, #49364	; 0xc0d4
   14ca4:	mov	r1, #0
   14ca8:	movt	r0, #2
   14cac:	movt	r5, #2
   14cb0:	str	r1, [r0]
   14cb4:	ldrd	r0, [r5]
   14cb8:	adds	r0, r0, #1
   14cbc:	adc	r1, r1, #0
   14cc0:	strd	r0, [r5]
   14cc4:	ldr	r0, [r4]
   14cc8:	cmp	r0, #5
   14ccc:	bhi	14e38 <free_node@@Base+0x1a8>
   14cd0:	add	r1, pc, #0
   14cd4:	ldr	pc, [r1, r0, lsl #2]
   14cd8:	strdeq	r4, [r1], -r0
   14cdc:	andeq	r4, r1, ip, lsl #27
   14ce0:	andeq	r4, r1, r8, asr sp
   14ce4:	andeq	r4, r1, r0, asr #27
   14ce8:	andeq	r4, r1, r4, lsr #26
   14cec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cf0:	movw	r0, #44656	; 0xae70
   14cf4:	movt	r0, #1
   14cf8:	add	r1, r0, #4
   14cfc:	movw	r0, #49364	; 0xc0d4
   14d00:	movt	r0, #2
   14d04:	bl	15564 <get_boolean_op_value@@Base+0x390>
   14d08:	ldrd	r0, [r5, #64]	; 0x40
   14d0c:	adds	r0, r0, #1
   14d10:	adc	r1, r1, #0
   14d14:	strd	r0, [r5, #64]	; 0x40
   14d18:	mov	r0, r4
   14d1c:	bl	14e74 <free_node_id@@Base>
   14d20:	b	14e24 <free_node@@Base+0x194>
   14d24:	movw	r0, #44656	; 0xae70
   14d28:	movt	r0, #1
   14d2c:	add	r1, r0, #20
   14d30:	movw	r0, #49364	; 0xc0d4
   14d34:	movt	r0, #2
   14d38:	bl	15564 <get_boolean_op_value@@Base+0x390>
   14d3c:	ldrd	r0, [r5, #96]	; 0x60
   14d40:	adds	r0, r0, #1
   14d44:	adc	r1, r1, #0
   14d48:	strd	r0, [r5, #96]	; 0x60
   14d4c:	mov	r0, r4
   14d50:	bl	1509c <free_node_if@@Base>
   14d54:	b	14e24 <free_node@@Base+0x194>
   14d58:	movw	r0, #44656	; 0xae70
   14d5c:	movt	r0, #1
   14d60:	add	r1, r0, #12
   14d64:	movw	r0, #49364	; 0xc0d4
   14d68:	movt	r0, #2
   14d6c:	bl	15564 <get_boolean_op_value@@Base+0x390>
   14d70:	ldrd	r0, [r5, #80]	; 0x50
   14d74:	adds	r0, r0, #1
   14d78:	adc	r1, r1, #0
   14d7c:	strd	r0, [r5, #80]	; 0x50
   14d80:	mov	r0, r4
   14d84:	bl	14f84 <free_node_function@@Base>
   14d88:	b	14e24 <free_node@@Base+0x194>
   14d8c:	movw	r0, #44656	; 0xae70
   14d90:	movt	r0, #1
   14d94:	add	r1, r0, #8
   14d98:	movw	r0, #49364	; 0xc0d4
   14d9c:	movt	r0, #2
   14da0:	bl	15564 <get_boolean_op_value@@Base+0x390>
   14da4:	ldrd	r0, [r5, #72]	; 0x48
   14da8:	adds	r0, r0, #1
   14dac:	adc	r1, r1, #0
   14db0:	strd	r0, [r5, #72]	; 0x48
   14db4:	mov	r0, r4
   14db8:	bl	14efc <free_node_int@@Base>
   14dbc:	b	14e24 <free_node@@Base+0x194>
   14dc0:	movw	r0, #44656	; 0xae70
   14dc4:	movt	r0, #1
   14dc8:	add	r1, r0, #16
   14dcc:	movw	r0, #49364	; 0xc0d4
   14dd0:	movt	r0, #2
   14dd4:	bl	15564 <get_boolean_op_value@@Base+0x390>
   14dd8:	ldrd	r0, [r5, #88]	; 0x58
   14ddc:	adds	r0, r0, #1
   14de0:	adc	r1, r1, #0
   14de4:	strd	r0, [r5, #88]	; 0x58
   14de8:	mov	r0, r4
   14dec:	bl	15014 <free_node_return@@Base>
   14df0:	b	14e24 <free_node@@Base+0x194>
   14df4:	movw	r0, #44656	; 0xae70
   14df8:	movt	r0, #1
   14dfc:	add	r1, r0, #24
   14e00:	movw	r0, #49364	; 0xc0d4
   14e04:	movt	r0, #2
   14e08:	bl	15564 <get_boolean_op_value@@Base+0x390>
   14e0c:	ldrd	r0, [r5, #104]	; 0x68
   14e10:	adds	r0, r0, #1
   14e14:	adc	r1, r1, #0
   14e18:	strd	r0, [r5, #104]	; 0x68
   14e1c:	mov	r0, r4
   14e20:	bl	1513c <free_node_boolean_operator@@Base>
   14e24:	ldrd	r0, [r5, #112]	; 0x70
   14e28:	adds	r0, r0, #1
   14e2c:	adc	r1, r1, #0
   14e30:	strd	r0, [r5, #112]	; 0x70
   14e34:	pop	{r4, r5, fp, pc}
   14e38:	movw	r0, #49364	; 0xc0d4
   14e3c:	movw	r1, #44656	; 0xae70
   14e40:	movt	r0, #2
   14e44:	movt	r1, #1
   14e48:	bl	15564 <get_boolean_op_value@@Base+0x390>
   14e4c:	movw	r0, #49416	; 0xc108
   14e50:	mov	r1, #31
   14e54:	mov	r2, #1
   14e58:	movt	r0, #2
   14e5c:	ldr	r3, [r0]
   14e60:	movw	r0, #44435	; 0xad93
   14e64:	movt	r0, #1
   14e68:	bl	11f7c <fwrite@plt>
   14e6c:	mov	r0, #1
   14e70:	bl	11fdc <exit@plt>

00014e74 <free_node_id@@Base>:
   14e74:	push	{r4, r5, fp, lr}
   14e78:	add	fp, sp, #8
   14e7c:	movw	r5, #51536	; 0xc950
   14e80:	mov	r4, r0
   14e84:	movt	r5, #2
   14e88:	ldrd	r0, [r5]
   14e8c:	mov	r2, r5
   14e90:	adds	r0, r0, #1
   14e94:	adc	r1, r1, #0
   14e98:	strd	r0, [r5]
   14e9c:	mov	r1, #16
   14ea0:	ldr	r0, [r4, #4]
   14ea4:	cmp	r0, #0
   14ea8:	movwne	r1, #8
   14eac:	ldr	r1, [r2, r1]!
   14eb0:	adds	r1, r1, #1
   14eb4:	str	r1, [r2]
   14eb8:	ldr	r1, [r2, #4]
   14ebc:	adc	r1, r1, #0
   14ec0:	cmp	r0, #0
   14ec4:	str	r1, [r2, #4]
   14ec8:	beq	14ee0 <free_node_id@@Base+0x6c>
   14ecc:	ldrd	r2, [r5, #24]
   14ed0:	adds	r2, r2, #1
   14ed4:	adc	r3, r3, #0
   14ed8:	strd	r2, [r5, #24]
   14edc:	bl	14c90 <free_node@@Base>
   14ee0:	ldrd	r0, [r5, #32]
   14ee4:	adds	r0, r0, #1
   14ee8:	adc	r1, r1, #0
   14eec:	strd	r0, [r5, #32]
   14ef0:	mov	r0, r4
   14ef4:	pop	{r4, r5, fp, lr}
   14ef8:	b	11f28 <free@plt>

00014efc <free_node_int@@Base>:
   14efc:	push	{r4, r5, fp, lr}
   14f00:	add	fp, sp, #8
   14f04:	movw	r5, #51584	; 0xc980
   14f08:	mov	r4, r0
   14f0c:	movt	r5, #2
   14f10:	ldrd	r0, [r5]
   14f14:	mov	r2, r5
   14f18:	adds	r0, r0, #1
   14f1c:	adc	r1, r1, #0
   14f20:	strd	r0, [r5]
   14f24:	mov	r1, #16
   14f28:	ldr	r0, [r4, #4]
   14f2c:	cmp	r0, #0
   14f30:	movwne	r1, #8
   14f34:	ldr	r1, [r2, r1]!
   14f38:	adds	r1, r1, #1
   14f3c:	str	r1, [r2]
   14f40:	ldr	r1, [r2, #4]
   14f44:	adc	r1, r1, #0
   14f48:	cmp	r0, #0
   14f4c:	str	r1, [r2, #4]
   14f50:	beq	14f68 <free_node_int@@Base+0x6c>
   14f54:	ldrd	r2, [r5, #24]
   14f58:	adds	r2, r2, #1
   14f5c:	adc	r3, r3, #0
   14f60:	strd	r2, [r5, #24]
   14f64:	bl	14c90 <free_node@@Base>
   14f68:	ldrd	r0, [r5, #32]
   14f6c:	adds	r0, r0, #1
   14f70:	adc	r1, r1, #0
   14f74:	strd	r0, [r5, #32]
   14f78:	mov	r0, r4
   14f7c:	pop	{r4, r5, fp, lr}
   14f80:	b	11f28 <free@plt>

00014f84 <free_node_function@@Base>:
   14f84:	push	{r4, r5, fp, lr}
   14f88:	add	fp, sp, #8
   14f8c:	movw	r5, #51632	; 0xc9b0
   14f90:	mov	r4, r0
   14f94:	movt	r5, #2
   14f98:	ldrd	r0, [r5]
   14f9c:	mov	r2, r5
   14fa0:	adds	r0, r0, #1
   14fa4:	adc	r1, r1, #0
   14fa8:	strd	r0, [r5]
   14fac:	mov	r1, #16
   14fb0:	ldr	r0, [r4, #4]
   14fb4:	cmp	r0, #0
   14fb8:	movwne	r1, #8
   14fbc:	ldr	r1, [r2, r1]!
   14fc0:	adds	r1, r1, #1
   14fc4:	str	r1, [r2]
   14fc8:	ldr	r1, [r2, #4]
   14fcc:	adc	r1, r1, #0
   14fd0:	cmp	r0, #0
   14fd4:	str	r1, [r2, #4]
   14fd8:	beq	14ff0 <free_node_function@@Base+0x6c>
   14fdc:	ldrd	r2, [r5, #24]
   14fe0:	adds	r2, r2, #1
   14fe4:	adc	r3, r3, #0
   14fe8:	strd	r2, [r5, #24]
   14fec:	bl	14c90 <free_node@@Base>
   14ff0:	ldrd	r0, [r5, #32]
   14ff4:	adds	r0, r0, #1
   14ff8:	adc	r1, r1, #0
   14ffc:	strd	r0, [r5, #32]
   15000:	ldr	r0, [r4, #8]
   15004:	bl	11f28 <free@plt>
   15008:	mov	r0, r4
   1500c:	pop	{r4, r5, fp, lr}
   15010:	b	11f28 <free@plt>

00015014 <free_node_return@@Base>:
   15014:	push	{r4, r5, fp, lr}
   15018:	add	fp, sp, #8
   1501c:	movw	r5, #51680	; 0xc9e0
   15020:	mov	r4, r0
   15024:	movt	r5, #2
   15028:	ldrd	r0, [r5]
   1502c:	mov	r2, r5
   15030:	adds	r0, r0, #1
   15034:	adc	r1, r1, #0
   15038:	strd	r0, [r5]
   1503c:	mov	r1, #16
   15040:	ldr	r0, [r4, #4]
   15044:	cmp	r0, #0
   15048:	movwne	r1, #8
   1504c:	ldr	r1, [r2, r1]!
   15050:	adds	r1, r1, #1
   15054:	str	r1, [r2]
   15058:	ldr	r1, [r2, #4]
   1505c:	adc	r1, r1, #0
   15060:	cmp	r0, #0
   15064:	str	r1, [r2, #4]
   15068:	beq	15080 <free_node_return@@Base+0x6c>
   1506c:	ldrd	r2, [r5, #24]
   15070:	adds	r2, r2, #1
   15074:	adc	r3, r3, #0
   15078:	strd	r2, [r5, #24]
   1507c:	bl	14c90 <free_node@@Base>
   15080:	ldrd	r0, [r5, #32]
   15084:	adds	r0, r0, #1
   15088:	adc	r1, r1, #0
   1508c:	strd	r0, [r5, #32]
   15090:	mov	r0, r4
   15094:	pop	{r4, r5, fp, lr}
   15098:	b	11f28 <free@plt>

0001509c <free_node_if@@Base>:
   1509c:	push	{r4, r5, fp, lr}
   150a0:	add	fp, sp, #8
   150a4:	movw	r5, #51728	; 0xca10
   150a8:	mov	r4, r0
   150ac:	movt	r5, #2
   150b0:	ldrd	r0, [r5]
   150b4:	mov	r2, r5
   150b8:	adds	r0, r0, #1
   150bc:	adc	r1, r1, #0
   150c0:	strd	r0, [r5]
   150c4:	mov	r1, #16
   150c8:	ldr	r0, [r4, #4]
   150cc:	cmp	r0, #0
   150d0:	movwne	r1, #8
   150d4:	ldr	r1, [r2, r1]!
   150d8:	adds	r1, r1, #1
   150dc:	str	r1, [r2]
   150e0:	ldr	r1, [r2, #4]
   150e4:	adc	r1, r1, #0
   150e8:	cmp	r0, #0
   150ec:	str	r1, [r2, #4]
   150f0:	beq	15108 <free_node_if@@Base+0x6c>
   150f4:	ldrd	r2, [r5, #24]
   150f8:	adds	r2, r2, #1
   150fc:	adc	r3, r3, #0
   15100:	strd	r2, [r5, #24]
   15104:	bl	14c90 <free_node@@Base>
   15108:	ldrd	r0, [r5, #32]
   1510c:	adds	r0, r0, #1
   15110:	adc	r1, r1, #0
   15114:	strd	r0, [r5, #32]
   15118:	ldr	r0, [r4, #8]
   1511c:	bl	14c90 <free_node@@Base>
   15120:	ldr	r0, [r4, #12]
   15124:	bl	14c90 <free_node@@Base>
   15128:	ldr	r0, [r4, #16]
   1512c:	bl	14c90 <free_node@@Base>
   15130:	mov	r0, r4
   15134:	pop	{r4, r5, fp, lr}
   15138:	b	11f28 <free@plt>

0001513c <free_node_boolean_operator@@Base>:
   1513c:	push	{r4, r5, fp, lr}
   15140:	add	fp, sp, #8
   15144:	movw	r5, #51776	; 0xca40
   15148:	mov	r4, r0
   1514c:	movt	r5, #2
   15150:	ldrd	r0, [r5]
   15154:	mov	r2, r5
   15158:	adds	r0, r0, #1
   1515c:	adc	r1, r1, #0
   15160:	strd	r0, [r5]
   15164:	mov	r1, #16
   15168:	ldr	r0, [r4, #4]
   1516c:	cmp	r0, #0
   15170:	movwne	r1, #8
   15174:	ldr	r1, [r2, r1]!
   15178:	adds	r1, r1, #1
   1517c:	str	r1, [r2]
   15180:	ldr	r1, [r2, #4]
   15184:	adc	r1, r1, #0
   15188:	cmp	r0, #0
   1518c:	str	r1, [r2, #4]
   15190:	beq	151a8 <free_node_boolean_operator@@Base+0x6c>
   15194:	ldrd	r2, [r5, #24]
   15198:	adds	r2, r2, #1
   1519c:	adc	r3, r3, #0
   151a0:	strd	r2, [r5, #24]
   151a4:	bl	14c90 <free_node@@Base>
   151a8:	ldrd	r0, [r5, #32]
   151ac:	adds	r0, r0, #1
   151b0:	adc	r1, r1, #0
   151b4:	strd	r0, [r5, #32]
   151b8:	ldr	r0, [r4, #8]
   151bc:	bl	14c90 <free_node@@Base>
   151c0:	ldr	r0, [r4, #12]
   151c4:	bl	14c90 <free_node@@Base>
   151c8:	mov	r0, r4
   151cc:	pop	{r4, r5, fp, lr}
   151d0:	b	11f28 <free@plt>

000151d4 <get_boolean_op_value@@Base>:
   151d4:	push	{r4, r5, r6, sl, fp, lr}
   151d8:	add	fp, sp, #16
   151dc:	movw	r6, #51824	; 0xca70
   151e0:	mov	r1, #2
   151e4:	movt	r6, #2
   151e8:	ldrd	r2, [r6]
   151ec:	adds	r2, r2, #1
   151f0:	adc	r3, r3, #0
   151f4:	strd	r2, [r6]
   151f8:	ldr	r4, [r0, #4]
   151fc:	mov	r0, r4
   15200:	bl	1206c <strnlen@plt>
   15204:	mov	r1, #16
   15208:	cmp	r0, #2
   1520c:	mov	r2, r6
   15210:	movweq	r1, #8
   15214:	ldr	r1, [r2, r1]!
   15218:	adds	r1, r1, #1
   1521c:	str	r1, [r2]
   15220:	ldr	r1, [r2, #4]
   15224:	adc	r1, r1, #0
   15228:	cmp	r0, #2
   1522c:	str	r1, [r2, #4]
   15230:	bne	153e8 <get_boolean_op_value@@Base+0x214>
   15234:	movw	r1, #44467	; 0xadb3
   15238:	mov	r0, r4
   1523c:	mov	r2, #2
   15240:	movt	r1, #1
   15244:	bl	120d8 <strncmp@plt>
   15248:	mov	r1, #32
   1524c:	cmp	r0, #0
   15250:	mov	r2, r6
   15254:	movweq	r1, #24
   15258:	ldr	r1, [r2, r1]!
   1525c:	adds	r1, r1, #1
   15260:	str	r1, [r2]
   15264:	ldr	r1, [r2, #4]
   15268:	adc	r1, r1, #0
   1526c:	cmp	r0, #0
   15270:	str	r1, [r2, #4]
   15274:	beq	15444 <get_boolean_op_value@@Base+0x270>
   15278:	movw	r1, #44470	; 0xadb6
   1527c:	mov	r0, r4
   15280:	mov	r2, #2
   15284:	movt	r1, #1
   15288:	bl	120d8 <strncmp@plt>
   1528c:	mov	r1, #56	; 0x38
   15290:	cmp	r0, #0
   15294:	mov	r2, r6
   15298:	movweq	r1, #48	; 0x30
   1529c:	ldr	r1, [r2, r1]!
   152a0:	adds	r1, r1, #1
   152a4:	str	r1, [r2]
   152a8:	ldr	r1, [r2, #4]
   152ac:	adc	r1, r1, #0
   152b0:	cmp	r0, #0
   152b4:	str	r1, [r2, #4]
   152b8:	beq	154bc <get_boolean_op_value@@Base+0x2e8>
   152bc:	movw	r1, #44473	; 0xadb9
   152c0:	mov	r0, r4
   152c4:	mov	r2, #2
   152c8:	mov	r5, #2
   152cc:	movt	r1, #1
   152d0:	bl	120d8 <strncmp@plt>
   152d4:	mov	r1, #80	; 0x50
   152d8:	cmp	r0, #0
   152dc:	mov	r2, r6
   152e0:	movweq	r1, #72	; 0x48
   152e4:	ldr	r1, [r2, r1]!
   152e8:	adds	r1, r1, #1
   152ec:	str	r1, [r2]
   152f0:	ldr	r1, [r2, #4]
   152f4:	adc	r1, r1, #0
   152f8:	cmp	r0, #0
   152fc:	str	r1, [r2, #4]
   15300:	beq	154d4 <get_boolean_op_value@@Base+0x300>
   15304:	movw	r1, #44476	; 0xadbc
   15308:	mov	r0, r4
   1530c:	mov	r2, #2
   15310:	movt	r1, #1
   15314:	bl	120d8 <strncmp@plt>
   15318:	mov	r1, #104	; 0x68
   1531c:	cmp	r0, #0
   15320:	mov	r2, r6
   15324:	movweq	r1, #96	; 0x60
   15328:	ldr	r1, [r2, r1]!
   1532c:	adds	r1, r1, #1
   15330:	str	r1, [r2]
   15334:	ldr	r1, [r2, #4]
   15338:	adc	r1, r1, #0
   1533c:	cmp	r0, #0
   15340:	str	r1, [r2, #4]
   15344:	beq	154e8 <get_boolean_op_value@@Base+0x314>
   15348:	movw	r1, #44479	; 0xadbf
   1534c:	mov	r0, r4
   15350:	mov	r2, #2
   15354:	movt	r1, #1
   15358:	bl	120d8 <strncmp@plt>
   1535c:	mov	r1, #128	; 0x80
   15360:	cmp	r0, #0
   15364:	mov	r2, r6
   15368:	movweq	r1, #120	; 0x78
   1536c:	ldr	r1, [r2, r1]!
   15370:	adds	r1, r1, #1
   15374:	str	r1, [r2]
   15378:	ldr	r1, [r2, #4]
   1537c:	adc	r1, r1, #0
   15380:	cmp	r0, #0
   15384:	str	r1, [r2, #4]
   15388:	beq	15500 <get_boolean_op_value@@Base+0x32c>
   1538c:	movw	r1, #44482	; 0xadc2
   15390:	mov	r0, r4
   15394:	mov	r2, #2
   15398:	movt	r1, #1
   1539c:	bl	120d8 <strncmp@plt>
   153a0:	mov	r1, #152	; 0x98
   153a4:	cmp	r0, #0
   153a8:	mov	r2, r6
   153ac:	movweq	r1, #144	; 0x90
   153b0:	ldr	r1, [r2, r1]!
   153b4:	adds	r1, r1, #1
   153b8:	str	r1, [r2]
   153bc:	ldr	r1, [r2, #4]
   153c0:	adc	r1, r1, #0
   153c4:	cmp	r0, #0
   153c8:	str	r1, [r2, #4]
   153cc:	bne	15540 <get_boolean_op_value@@Base+0x36c>
   153d0:	ldrd	r0, [r6, #160]	; 0xa0
   153d4:	mov	r5, #5
   153d8:	adds	r0, r0, #1
   153dc:	adc	r1, r1, #0
   153e0:	strd	r0, [r6, #160]	; 0xa0
   153e4:	b	15514 <get_boolean_op_value@@Base+0x340>
   153e8:	movw	r0, #49368	; 0xc0d8
   153ec:	mov	r1, #0
   153f0:	movt	r0, #2
   153f4:	str	r1, [r0]
   153f8:	ldrb	r0, [r4]
   153fc:	cmp	r0, #62	; 0x3e
   15400:	beq	1548c <get_boolean_op_value@@Base+0x2b8>
   15404:	cmp	r0, #60	; 0x3c
   15408:	beq	1545c <get_boolean_op_value@@Base+0x288>
   1540c:	cmp	r0, #33	; 0x21
   15410:	bne	1552c <get_boolean_op_value@@Base+0x358>
   15414:	movw	r0, #44684	; 0xae8c
   15418:	movt	r0, #1
   1541c:	add	r1, r0, #4
   15420:	movw	r0, #49368	; 0xc0d8
   15424:	movt	r0, #2
   15428:	bl	15564 <get_boolean_op_value@@Base+0x390>
   1542c:	ldrd	r0, [r6, #200]	; 0xc8
   15430:	mov	r5, #8
   15434:	adds	r0, r0, #1
   15438:	adc	r1, r1, #0
   1543c:	strd	r0, [r6, #200]	; 0xc8
   15440:	b	15514 <get_boolean_op_value@@Base+0x340>
   15444:	ldrd	r0, [r6, #40]	; 0x28
   15448:	mov	r5, #0
   1544c:	adds	r0, r0, #1
   15450:	adc	r1, r1, #0
   15454:	strd	r0, [r6, #40]	; 0x28
   15458:	b	15514 <get_boolean_op_value@@Base+0x340>
   1545c:	movw	r0, #44684	; 0xae8c
   15460:	movt	r0, #1
   15464:	add	r1, r0, #8
   15468:	movw	r0, #49368	; 0xc0d8
   1546c:	movt	r0, #2
   15470:	bl	15564 <get_boolean_op_value@@Base+0x390>
   15474:	ldrd	r0, [r6, #208]	; 0xd0
   15478:	mov	r5, #6
   1547c:	adds	r0, r0, #1
   15480:	adc	r1, r1, #0
   15484:	strd	r0, [r6, #208]	; 0xd0
   15488:	b	15514 <get_boolean_op_value@@Base+0x340>
   1548c:	movw	r0, #44684	; 0xae8c
   15490:	movt	r0, #1
   15494:	add	r1, r0, #12
   15498:	movw	r0, #49368	; 0xc0d8
   1549c:	movt	r0, #2
   154a0:	bl	15564 <get_boolean_op_value@@Base+0x390>
   154a4:	ldrd	r0, [r6, #216]	; 0xd8
   154a8:	mov	r5, #7
   154ac:	adds	r0, r0, #1
   154b0:	adc	r1, r1, #0
   154b4:	strd	r0, [r6, #216]	; 0xd8
   154b8:	b	15514 <get_boolean_op_value@@Base+0x340>
   154bc:	ldrd	r0, [r6, #64]	; 0x40
   154c0:	mov	r5, #1
   154c4:	adds	r0, r0, #1
   154c8:	adc	r1, r1, #0
   154cc:	strd	r0, [r6, #64]	; 0x40
   154d0:	b	15514 <get_boolean_op_value@@Base+0x340>
   154d4:	ldrd	r0, [r6, #88]	; 0x58
   154d8:	adds	r0, r0, #1
   154dc:	adc	r1, r1, #0
   154e0:	strd	r0, [r6, #88]	; 0x58
   154e4:	b	15514 <get_boolean_op_value@@Base+0x340>
   154e8:	ldrd	r0, [r6, #112]	; 0x70
   154ec:	mov	r5, #3
   154f0:	adds	r0, r0, #1
   154f4:	adc	r1, r1, #0
   154f8:	strd	r0, [r6, #112]	; 0x70
   154fc:	b	15514 <get_boolean_op_value@@Base+0x340>
   15500:	ldrd	r0, [r6, #136]	; 0x88
   15504:	mov	r5, #4
   15508:	adds	r0, r0, #1
   1550c:	adc	r1, r1, #0
   15510:	strd	r0, [r6, #136]	; 0x88
   15514:	ldrd	r0, [r6, #224]	; 0xe0
   15518:	adds	r0, r0, #1
   1551c:	adc	r1, r1, #0
   15520:	strd	r0, [r6, #224]	; 0xe0
   15524:	mov	r0, r5
   15528:	pop	{r4, r5, r6, sl, fp, pc}
   1552c:	movw	r0, #49368	; 0xc0d8
   15530:	movw	r1, #44684	; 0xae8c
   15534:	movt	r0, #2
   15538:	movt	r1, #1
   1553c:	bl	15564 <get_boolean_op_value@@Base+0x390>
   15540:	movw	r0, #49416	; 0xc108
   15544:	movw	r1, #44485	; 0xadc5
   15548:	mov	r2, r4
   1554c:	movt	r0, #2
   15550:	movt	r1, #1
   15554:	ldr	r0, [r0]
   15558:	bl	1200c <fprintf@plt>
   1555c:	mov	r0, #1
   15560:	bl	11fdc <exit@plt>
   15564:	ldr	r0, [r0]
   15568:	cmn	r0, #1
   1556c:	ldrne	r0, [r1, r0, lsl #2]
   15570:	cmpne	r0, #0
   15574:	bne	1557c <get_boolean_op_value@@Base+0x3a8>
   15578:	bx	lr
   1557c:	ldrd	r2, [r0]
   15580:	adds	r2, r2, #1
   15584:	adc	r3, r3, #0
   15588:	strd	r2, [r0]
   1558c:	bx	lr
   15590:	push	{r4, r5, r6, lr}
   15594:	sub	sp, sp, #8
   15598:	movw	r0, #45152	; 0xb060
   1559c:	movw	r1, #42359	; 0xa577
   155a0:	movw	r2, #23410	; 0x5b72
   155a4:	movt	r0, #1
   155a8:	movt	r1, #1
   155ac:	movt	r2, #13184	; 0x3380
   155b0:	bl	17534 <__generate_code_for_binary_boolean_expression@@Base+0x4ec>
   155b4:	movw	r0, #45024	; 0xafe0
   155b8:	movw	r6, #44704	; 0xaea0
   155bc:	mov	r5, #0
   155c0:	movt	r0, #1
   155c4:	movt	r6, #1
   155c8:	add	r4, r0, #4
   155cc:	mov	r3, r6
   155d0:	ldr	r0, [r3, r5]!
   155d4:	ldr	r1, [r3, #16]
   155d8:	str	r1, [sp]
   155dc:	ldmib	r3, {r1, r2}
   155e0:	ldrb	r3, [r3, #12]
   155e4:	bl	17c98 <__generate_code_for_binary_boolean_expression@@Base+0xc50>
   155e8:	ldrd	r0, [r4, #-4]
   155ec:	bl	1854c <__generate_code_for_binary_boolean_expression@@Base+0x1504>
   155f0:	add	r5, r5, #20
   155f4:	add	r4, r4, #8
   155f8:	cmp	r5, #320	; 0x140
   155fc:	bne	155cc <get_boolean_op_value@@Base+0x3f8>
   15600:	bl	18cc8 <__generate_code_for_binary_boolean_expression@@Base+0x1c80>
   15604:	add	sp, sp, #8
   15608:	pop	{r4, r5, r6, lr}
   1560c:	b	19a34 <__generate_code_for_binary_boolean_expression@@Base+0x29ec>
   15610:	push	{fp, lr}
   15614:	bl	15590 <get_boolean_op_value@@Base+0x3bc>
   15618:	movw	r2, #51536	; 0xc950
   1561c:	movw	r3, #51408	; 0xc8d0
   15620:	vmov.i32	q8, #0	; 0x00000000
   15624:	mov	r0, #0
   15628:	movt	r2, #2
   1562c:	movt	r3, #2
   15630:	add	r1, r2, #16
   15634:	str	r0, [r2, #32]
   15638:	str	r0, [r3, #112]	; 0x70
   1563c:	vst1.64	{d16-d17}, [r1 :128]
   15640:	add	r1, r3, #96	; 0x60
   15644:	vst1.64	{d16-d17}, [r1 :128]
   15648:	add	r1, r3, #80	; 0x50
   1564c:	vst1.64	{d16-d17}, [r1 :128]
   15650:	add	r1, r3, #64	; 0x40
   15654:	vst1.64	{d16-d17}, [r1 :128]
   15658:	add	r1, r3, #48	; 0x30
   1565c:	vst1.64	{d16-d17}, [r1 :128]
   15660:	add	r1, r3, #32
   15664:	vst1.64	{d16-d17}, [r1 :128]
   15668:	add	r1, r3, #16
   1566c:	vst1.64	{d16-d17}, [r1 :128]
   15670:	movw	r1, #51296	; 0xc860
   15674:	movt	r1, #2
   15678:	vst1.64	{d16-d17}, [r1 :128]
   1567c:	movw	r1, #51280	; 0xc850
   15680:	movt	r1, #2
   15684:	vst1.64	{d16-d17}, [r1 :128]
   15688:	movw	r1, #51312	; 0xc870
   1568c:	movt	r1, #2
   15690:	vst1.64	{d16-d17}, [r1 :128]
   15694:	movw	r1, #51328	; 0xc880
   15698:	movt	r1, #2
   1569c:	vst1.64	{d16-d17}, [r1 :128]
   156a0:	movw	r1, #51344	; 0xc890
   156a4:	movt	r1, #2
   156a8:	vst1.64	{d16-d17}, [r1 :128]
   156ac:	movw	r1, #51360	; 0xc8a0
   156b0:	movt	r1, #2
   156b4:	vst1.64	{d16-d17}, [r1 :128]
   156b8:	movw	r1, #51376	; 0xc8b0
   156bc:	movt	r1, #2
   156c0:	vst1.64	{d16-d17}, [r1 :128]
   156c4:	movw	r1, #51392	; 0xc8c0
   156c8:	movt	r1, #2
   156cc:	vst1.64	{d16-d17}, [r1 :128]
   156d0:	mov	r1, #36	; 0x24
   156d4:	vst1.64	{d16-d17}, [r2 :128], r1
   156d8:	str	r0, [r2]
   156dc:	mov	r2, #116	; 0x74
   156e0:	vst1.64	{d16-d17}, [r3 :128], r2
   156e4:	movw	r2, #51584	; 0xc980
   156e8:	movt	r2, #2
   156ec:	str	r0, [r3]
   156f0:	add	r3, r2, #16
   156f4:	str	r0, [r2, #32]
   156f8:	vst1.64	{d16-d17}, [r2 :128], r1
   156fc:	str	r0, [r2]
   15700:	movw	r2, #51632	; 0xc9b0
   15704:	vst1.64	{d16-d17}, [r3 :128]
   15708:	movt	r2, #2
   1570c:	add	r3, r2, #16
   15710:	str	r0, [r2, #32]
   15714:	vst1.64	{d16-d17}, [r2 :128], r1
   15718:	str	r0, [r2]
   1571c:	movw	r2, #51680	; 0xc9e0
   15720:	vst1.64	{d16-d17}, [r3 :128]
   15724:	movt	r2, #2
   15728:	add	r3, r2, #16
   1572c:	str	r0, [r2, #32]
   15730:	vst1.64	{d16-d17}, [r2 :128], r1
   15734:	str	r0, [r2]
   15738:	movw	r2, #51728	; 0xca10
   1573c:	vst1.64	{d16-d17}, [r3 :128]
   15740:	movt	r2, #2
   15744:	add	r3, r2, #16
   15748:	str	r0, [r2, #32]
   1574c:	vst1.64	{d16-d17}, [r2 :128], r1
   15750:	str	r0, [r2]
   15754:	movw	r2, #51776	; 0xca40
   15758:	vst1.64	{d16-d17}, [r3 :128]
   1575c:	movt	r2, #2
   15760:	add	r3, r2, #16
   15764:	str	r0, [r2, #32]
   15768:	vst1.64	{d16-d17}, [r2 :128], r1
   1576c:	mov	r1, #0
   15770:	str	r0, [r2]
   15774:	movw	r0, #51824	; 0xca70
   15778:	mov	r2, #232	; 0xe8
   1577c:	vst1.64	{d16-d17}, [r3 :128]
   15780:	movt	r0, #2
   15784:	bl	1203c <memset@plt>
   15788:	pop	{fp, pc}
   1578c:	movw	r0, #21904	; 0x5590
   15790:	movw	r1, #22032	; 0x5610
   15794:	movt	r0, #1
   15798:	movt	r1, #1
   1579c:	b	19ee4 <__gcov_flush@@Base+0xb4>

000157a0 <init_grammar@@Base>:
   157a0:	movw	r2, #52064	; 0xcb60
   157a4:	add	r3, pc, #28
   157a8:	movt	r2, #2
   157ac:	vld1.64	{d16-d17}, [r3]
   157b0:	vld1.64	{d18-d19}, [r2 :128]
   157b4:	vadd.i64	q8, q9, q8
   157b8:	vst1.64	{d16-d17}, [r2 :128]
   157bc:	str	r1, [r0]
   157c0:	bx	lr
   157c4:	nop	{0}
   157c8:	andeq	r0, r0, r1
   157cc:	andeq	r0, r0, r0
   157d0:	andeq	r0, r0, r1
   157d4:	andeq	r0, r0, r0

000157d8 <destroy_grammar@@Base>:
   157d8:	movw	r0, #52080	; 0xcb70
   157dc:	add	r1, pc, #20
   157e0:	movt	r0, #2
   157e4:	vld1.64	{d16-d17}, [r1]
   157e8:	vld1.64	{d18-d19}, [r0 :128]
   157ec:	vadd.i64	q8, q9, q8
   157f0:	vst1.64	{d16-d17}, [r0 :128]
   157f4:	bx	lr
   157f8:	andeq	r0, r0, r1
   157fc:	andeq	r0, r0, r0
   15800:	andeq	r0, r0, r1
   15804:	andeq	r0, r0, r0

00015808 <build_ast@@Base>:
   15808:	movw	r1, #52096	; 0xcb80
   1580c:	add	r2, pc, #20
   15810:	movt	r1, #2
   15814:	vld1.64	{d16-d17}, [r2]
   15818:	vld1.64	{d18-d19}, [r1 :128]
   1581c:	vadd.i64	q8, q9, q8
   15820:	vst1.64	{d16-d17}, [r1 :128]
   15824:	b	15838 <read_function_ast_node@@Base>
   15828:	andeq	r0, r0, r1
   1582c:	andeq	r0, r0, r0
   15830:	andeq	r0, r0, r1
   15834:	andeq	r0, r0, r0

00015838 <read_function_ast_node@@Base>:
   15838:	push	{r4, r5, r6, r7, fp, lr}
   1583c:	add	fp, sp, #16
   15840:	movw	r7, #52112	; 0xcb90
   15844:	mov	r4, r0
   15848:	movt	r7, #2
   1584c:	ldrd	r0, [r7]
   15850:	adds	r0, r0, #1
   15854:	adc	r1, r1, #0
   15858:	strd	r0, [r7]
   1585c:	ldr	r0, [r4]
   15860:	bl	13220 <next@@Base>
   15864:	ldr	r1, [r0]
   15868:	mov	r2, #16
   1586c:	mov	r3, r7
   15870:	cmp	r1, #0
   15874:	movwne	r2, #8
   15878:	ldr	r2, [r3, r2]!
   1587c:	adds	r2, r2, #1
   15880:	str	r2, [r3]
   15884:	ldr	r2, [r3, #4]
   15888:	adc	r2, r2, #0
   1588c:	cmp	r1, #0
   15890:	str	r2, [r3, #4]
   15894:	beq	158b0 <read_function_ast_node@@Base+0x78>
   15898:	ldrd	r0, [r7, #24]
   1589c:	mov	r4, #0
   158a0:	adds	r0, r0, #1
   158a4:	adc	r1, r1, #0
   158a8:	strd	r0, [r7, #24]
   158ac:	b	159f8 <read_function_ast_node@@Base+0x1c0>
   158b0:	bl	12ad0 <free_token_int_type@@Base>
   158b4:	ldr	r0, [r4]
   158b8:	bl	13220 <next@@Base>
   158bc:	mov	r5, r0
   158c0:	ldr	r0, [r0]
   158c4:	mov	r1, #40	; 0x28
   158c8:	mov	r2, r7
   158cc:	cmp	r0, #2
   158d0:	movwne	r1, #32
   158d4:	ldr	r1, [r2, r1]!
   158d8:	adds	r1, r1, #1
   158dc:	str	r1, [r2]
   158e0:	ldr	r1, [r2, #4]
   158e4:	adc	r1, r1, #0
   158e8:	cmp	r0, #2
   158ec:	str	r1, [r2, #4]
   158f0:	beq	1590c <read_function_ast_node@@Base+0xd4>
   158f4:	ldrd	r0, [r7, #48]	; 0x30
   158f8:	mov	r4, #0
   158fc:	adds	r0, r0, #1
   15900:	adc	r1, r1, #0
   15904:	strd	r0, [r7, #48]	; 0x30
   15908:	b	159f8 <read_function_ast_node@@Base+0x1c0>
   1590c:	ldr	r0, [r4]
   15910:	bl	13220 <next@@Base>
   15914:	ldr	r1, [r0]
   15918:	mov	r2, #64	; 0x40
   1591c:	mov	r3, r7
   15920:	cmp	r1, #3
   15924:	movwne	r2, #56	; 0x38
   15928:	ldr	r2, [r3, r2]!
   1592c:	adds	r2, r2, #1
   15930:	str	r2, [r3]
   15934:	ldr	r2, [r3, #4]
   15938:	adc	r2, r2, #0
   1593c:	cmp	r1, #3
   15940:	str	r2, [r3, #4]
   15944:	beq	15960 <read_function_ast_node@@Base+0x128>
   15948:	ldrd	r0, [r7, #72]	; 0x48
   1594c:	mov	r4, #0
   15950:	adds	r0, r0, #1
   15954:	adc	r1, r1, #0
   15958:	strd	r0, [r7, #72]	; 0x48
   1595c:	b	159f8 <read_function_ast_node@@Base+0x1c0>
   15960:	bl	12b60 <free_token_opar@@Base>
   15964:	ldr	r0, [r4]
   15968:	bl	13220 <next@@Base>
   1596c:	ldr	r1, [r0]
   15970:	mov	r2, #88	; 0x58
   15974:	mov	r3, r7
   15978:	cmp	r1, #4
   1597c:	movwne	r2, #80	; 0x50
   15980:	ldr	r2, [r3, r2]!
   15984:	adds	r2, r2, #1
   15988:	str	r2, [r3]
   1598c:	ldr	r2, [r3, #4]
   15990:	adc	r2, r2, #0
   15994:	cmp	r1, #4
   15998:	str	r2, [r3, #4]
   1599c:	beq	159b8 <read_function_ast_node@@Base+0x180>
   159a0:	ldrd	r0, [r7, #96]	; 0x60
   159a4:	mov	r4, #0
   159a8:	adds	r0, r0, #1
   159ac:	adc	r1, r1, #0
   159b0:	strd	r0, [r7, #96]	; 0x60
   159b4:	b	159f8 <read_function_ast_node@@Base+0x1c0>
   159b8:	ldrd	r2, [r7, #104]	; 0x68
   159bc:	adds	r2, r2, #1
   159c0:	adc	r3, r3, #0
   159c4:	strd	r2, [r7, #104]	; 0x68
   159c8:	bl	12b90 <free_token_cpar@@Base>
   159cc:	mov	r0, r4
   159d0:	bl	15a10 <read_body@@Base>
   159d4:	mov	r6, r0
   159d8:	mov	r0, #16
   159dc:	bl	11fa0 <malloc@plt>
   159e0:	ldr	r1, [r5, #4]
   159e4:	mov	r2, r6
   159e8:	mov	r4, r0
   159ec:	bl	14ac0 <init_node_function@@Base>
   159f0:	mov	r0, r5
   159f4:	bl	12b30 <free_token_function@@Base>
   159f8:	ldrd	r0, [r7, #112]	; 0x70
   159fc:	adds	r0, r0, #1
   15a00:	adc	r1, r1, #0
   15a04:	strd	r0, [r7, #112]	; 0x70
   15a08:	mov	r0, r4
   15a0c:	pop	{r4, r5, r6, r7, fp, pc}

00015a10 <read_body@@Base>:
   15a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a14:	add	fp, sp, #28
   15a18:	sub	sp, sp, #4
   15a1c:	movw	r4, #52240	; 0xcc10
   15a20:	mov	sl, r0
   15a24:	movt	r4, #2
   15a28:	ldrd	r0, [r4]
   15a2c:	adds	r0, r0, #1
   15a30:	adc	r1, r1, #0
   15a34:	strd	r0, [r4]
   15a38:	ldr	r0, [sl]
   15a3c:	bl	13220 <next@@Base>
   15a40:	ldr	r1, [r0]
   15a44:	mov	r2, #16
   15a48:	mov	r3, r4
   15a4c:	cmp	r1, #5
   15a50:	movwne	r2, #8
   15a54:	ldr	r2, [r3, r2]!
   15a58:	adds	r2, r2, #1
   15a5c:	str	r2, [r3]
   15a60:	ldr	r2, [r3, #4]
   15a64:	adc	r2, r2, #0
   15a68:	cmp	r1, #5
   15a6c:	str	r2, [r3, #4]
   15a70:	beq	15a8c <read_body@@Base+0x7c>
   15a74:	ldrd	r0, [r4, #24]
   15a78:	mov	r6, #0
   15a7c:	adds	r0, r0, #1
   15a80:	adc	r1, r1, #0
   15a84:	strd	r0, [r4, #24]
   15a88:	b	15c80 <read_body@@Base+0x270>
   15a8c:	ldrd	r2, [r4, #32]
   15a90:	adds	r2, r2, #1
   15a94:	adc	r3, r3, #0
   15a98:	strd	r2, [r4, #32]
   15a9c:	bl	12bc0 <free_token_obra@@Base>
   15aa0:	ldr	r0, [sl]
   15aa4:	bl	13220 <next@@Base>
   15aa8:	mov	r7, r0
   15aac:	ldr	r0, [r0]
   15ab0:	mov	r1, #48	; 0x30
   15ab4:	mov	r2, r4
   15ab8:	mov	r6, #0
   15abc:	cmp	r0, #6
   15ac0:	movwne	r1, #40	; 0x28
   15ac4:	ldr	r1, [r2, r1]!
   15ac8:	adds	r1, r1, #1
   15acc:	str	r1, [r2]
   15ad0:	ldr	r1, [r2, #4]
   15ad4:	adc	r1, r1, #0
   15ad8:	cmp	r0, #6
   15adc:	str	r1, [r2, #4]
   15ae0:	beq	15c34 <read_body@@Base+0x224>
   15ae4:	movw	r1, #45616	; 0xb230
   15ae8:	movw	r9, #49372	; 0xc0dc
   15aec:	mov	r8, #0
   15af0:	mov	r6, #0
   15af4:	movt	r1, #1
   15af8:	movt	r9, #2
   15afc:	add	r1, r1, #8
   15b00:	str	r1, [sp]
   15b04:	mov	r1, #0
   15b08:	cmp	r0, #10
   15b0c:	str	r1, [r9]
   15b10:	beq	15b54 <read_body@@Base+0x144>
   15b14:	cmp	r0, #7
   15b18:	bne	15c50 <read_body@@Base+0x240>
   15b1c:	movw	r0, #45616	; 0xb230
   15b20:	movt	r0, #1
   15b24:	add	r1, r0, #4
   15b28:	mov	r0, r9
   15b2c:	bl	165e0 <read_boolean_unary_expression@@Base+0x150>
   15b30:	ldrd	r0, [r4, #80]	; 0x50
   15b34:	adds	r0, r0, #1
   15b38:	adc	r1, r1, #0
   15b3c:	strd	r0, [r4, #80]	; 0x50
   15b40:	mov	r0, r7
   15b44:	bl	12c20 <free_token_return@@Base>
   15b48:	mov	r0, sl
   15b4c:	bl	15c9c <read_return_expression@@Base>
   15b50:	b	15b80 <read_body@@Base+0x170>
   15b54:	ldr	r1, [sp]
   15b58:	mov	r0, r9
   15b5c:	bl	165e0 <read_boolean_unary_expression@@Base+0x150>
   15b60:	ldrd	r0, [r4, #88]	; 0x58
   15b64:	adds	r0, r0, #1
   15b68:	adc	r1, r1, #0
   15b6c:	strd	r0, [r4, #88]	; 0x58
   15b70:	mov	r0, r7
   15b74:	bl	12cb0 <free_token_if@@Base>
   15b78:	mov	r0, sl
   15b7c:	bl	15dc8 <read_if_statement@@Base>
   15b80:	mov	r5, r0
   15b84:	cmp	r6, #0
   15b88:	mov	r0, #112	; 0x70
   15b8c:	mov	r1, r4
   15b90:	movwne	r0, #104	; 0x68
   15b94:	ldr	r0, [r1, r0]!
   15b98:	adds	r0, r0, #1
   15b9c:	str	r0, [r1]
   15ba0:	ldr	r0, [r1, #4]
   15ba4:	adc	r0, r0, #0
   15ba8:	cmp	r6, #0
   15bac:	str	r0, [r1, #4]
   15bb0:	beq	15bcc <read_body@@Base+0x1bc>
   15bb4:	ldrd	r0, [r4, #120]	; 0x78
   15bb8:	adds	r0, r0, #1
   15bbc:	adc	r1, r1, #0
   15bc0:	strd	r0, [r4, #120]	; 0x78
   15bc4:	str	r5, [r8, #4]
   15bc8:	b	15be0 <read_body@@Base+0x1d0>
   15bcc:	ldrd	r0, [r4, #128]	; 0x80
   15bd0:	mov	r6, r5
   15bd4:	adds	r0, r0, #1
   15bd8:	adc	r1, r1, #0
   15bdc:	strd	r0, [r4, #128]	; 0x80
   15be0:	ldrd	r0, [r4, #136]	; 0x88
   15be4:	adds	r0, r0, #1
   15be8:	adc	r1, r1, #0
   15bec:	strd	r0, [r4, #136]	; 0x88
   15bf0:	ldr	r0, [sl]
   15bf4:	bl	13220 <next@@Base>
   15bf8:	mov	r7, r0
   15bfc:	ldr	r0, [r0]
   15c00:	mov	r1, #48	; 0x30
   15c04:	mov	r2, r4
   15c08:	mov	r8, r5
   15c0c:	cmp	r0, #6
   15c10:	movwne	r1, #40	; 0x28
   15c14:	ldr	r1, [r2, r1]!
   15c18:	adds	r1, r1, #1
   15c1c:	str	r1, [r2]
   15c20:	ldr	r1, [r2, #4]
   15c24:	adc	r1, r1, #0
   15c28:	cmp	r0, #6
   15c2c:	str	r1, [r2, #4]
   15c30:	bne	15b04 <read_body@@Base+0xf4>
   15c34:	ldrd	r0, [r4, #144]	; 0x90
   15c38:	adds	r0, r0, #1
   15c3c:	adc	r1, r1, #0
   15c40:	strd	r0, [r4, #144]	; 0x90
   15c44:	mov	r0, r7
   15c48:	bl	12bf0 <free_token_cbra@@Base>
   15c4c:	b	15c80 <read_body@@Base+0x270>
   15c50:	movw	r0, #49372	; 0xc0dc
   15c54:	movw	r1, #45616	; 0xb230
   15c58:	movt	r0, #2
   15c5c:	movt	r1, #1
   15c60:	bl	165e0 <read_boolean_unary_expression@@Base+0x150>
   15c64:	ldrd	r0, [r4, #96]	; 0x60
   15c68:	adds	r0, r0, #1
   15c6c:	adc	r1, r1, #0
   15c70:	strd	r0, [r4, #96]	; 0x60
   15c74:	mov	r1, r7
   15c78:	ldr	r0, [sl]
   15c7c:	bl	130a8 <push_back@@Base>
   15c80:	ldrd	r0, [r4, #152]	; 0x98
   15c84:	adds	r0, r0, #1
   15c88:	adc	r1, r1, #0
   15c8c:	strd	r0, [r4, #152]	; 0x98
   15c90:	mov	r0, r6
   15c94:	sub	sp, fp, #28
   15c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015c9c <read_return_expression@@Base>:
   15c9c:	push	{r4, r5, r6, r7, fp, lr}
   15ca0:	add	fp, sp, #16
   15ca4:	movw	r7, #52400	; 0xccb0
   15ca8:	mov	r4, r0
   15cac:	movt	r7, #2
   15cb0:	ldrd	r0, [r7]
   15cb4:	adds	r0, r0, #1
   15cb8:	adc	r1, r1, #0
   15cbc:	strd	r0, [r7]
   15cc0:	ldr	r0, [r4]
   15cc4:	bl	13220 <next@@Base>
   15cc8:	mov	r5, r0
   15ccc:	ldr	r0, [r0]
   15cd0:	mov	r1, #16
   15cd4:	mov	r2, r7
   15cd8:	cmp	r0, #1
   15cdc:	movwne	r1, #8
   15ce0:	ldr	r1, [r2, r1]!
   15ce4:	adds	r1, r1, #1
   15ce8:	str	r1, [r2]
   15cec:	ldr	r1, [r2, #4]
   15cf0:	adc	r1, r1, #0
   15cf4:	cmp	r0, #1
   15cf8:	str	r1, [r2, #4]
   15cfc:	beq	15d18 <read_return_expression@@Base+0x7c>
   15d00:	ldrd	r0, [r7, #24]
   15d04:	mov	r5, #0
   15d08:	adds	r0, r0, #1
   15d0c:	adc	r1, r1, #0
   15d10:	strd	r0, [r7, #24]
   15d14:	b	15db0 <read_return_expression@@Base+0x114>
   15d18:	mov	r0, #12
   15d1c:	bl	11fa0 <malloc@plt>
   15d20:	ldr	r1, [r5, #4]
   15d24:	mov	r6, r0
   15d28:	bl	14a50 <init_node_int@@Base>
   15d2c:	mov	r0, r5
   15d30:	bl	12b00 <free_token_int_value@@Base>
   15d34:	mov	r0, #12
   15d38:	bl	11fa0 <malloc@plt>
   15d3c:	mov	r1, r6
   15d40:	mov	r5, r0
   15d44:	bl	14b38 <init_node_return@@Base>
   15d48:	ldr	r0, [r4]
   15d4c:	bl	13220 <next@@Base>
   15d50:	ldr	r1, [r0]
   15d54:	mov	r2, #40	; 0x28
   15d58:	mov	r3, r7
   15d5c:	cmp	r1, #8
   15d60:	movwne	r2, #32
   15d64:	ldr	r2, [r3, r2]!
   15d68:	adds	r2, r2, #1
   15d6c:	str	r2, [r3]
   15d70:	ldr	r2, [r3, #4]
   15d74:	adc	r2, r2, #0
   15d78:	cmp	r1, #8
   15d7c:	str	r2, [r3, #4]
   15d80:	beq	15d9c <read_return_expression@@Base+0x100>
   15d84:	ldrd	r0, [r7, #48]	; 0x30
   15d88:	mov	r5, #0
   15d8c:	adds	r0, r0, #1
   15d90:	adc	r1, r1, #0
   15d94:	strd	r0, [r7, #48]	; 0x30
   15d98:	b	15db0 <read_return_expression@@Base+0x114>
   15d9c:	ldrd	r2, [r7, #56]	; 0x38
   15da0:	adds	r2, r2, #1
   15da4:	adc	r3, r3, #0
   15da8:	strd	r2, [r7, #56]	; 0x38
   15dac:	bl	12c50 <free_token_semicolon@@Base>
   15db0:	ldrd	r0, [r7, #64]	; 0x40
   15db4:	adds	r0, r0, #1
   15db8:	adc	r1, r1, #0
   15dbc:	strd	r0, [r7, #64]	; 0x40
   15dc0:	mov	r0, r5
   15dc4:	pop	{r4, r5, r6, r7, fp, pc}

00015dc8 <read_if_statement@@Base>:
   15dc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15dcc:	add	fp, sp, #24
   15dd0:	movw	r5, #52480	; 0xcd00
   15dd4:	mov	r4, r0
   15dd8:	movt	r5, #2
   15ddc:	ldrd	r0, [r5]
   15de0:	adds	r0, r0, #1
   15de4:	adc	r1, r1, #0
   15de8:	strd	r0, [r5]
   15dec:	ldr	r0, [r4]
   15df0:	bl	13220 <next@@Base>
   15df4:	ldr	r1, [r0]
   15df8:	mov	r2, #16
   15dfc:	mov	r3, r5
   15e00:	cmp	r1, #3
   15e04:	movwne	r2, #8
   15e08:	ldr	r2, [r3, r2]!
   15e0c:	adds	r2, r2, #1
   15e10:	str	r2, [r3]
   15e14:	ldr	r2, [r3, #4]
   15e18:	adc	r2, r2, #0
   15e1c:	cmp	r1, #3
   15e20:	str	r2, [r3, #4]
   15e24:	beq	15e40 <read_if_statement@@Base+0x78>
   15e28:	ldrd	r0, [r5, #24]
   15e2c:	mov	r7, #0
   15e30:	adds	r0, r0, #1
   15e34:	adc	r1, r1, #0
   15e38:	strd	r0, [r5, #24]
   15e3c:	b	15f1c <read_if_statement@@Base+0x154>
   15e40:	bl	12b60 <free_token_opar@@Base>
   15e44:	mov	r0, r4
   15e48:	bl	15f38 <read_boolean_expression@@Base>
   15e4c:	mov	r8, r0
   15e50:	mov	r0, r4
   15e54:	bl	15a10 <read_body@@Base>
   15e58:	mov	r6, r0
   15e5c:	ldr	r0, [r4]
   15e60:	bl	13220 <next@@Base>
   15e64:	mov	r1, r0
   15e68:	ldr	r0, [r0]
   15e6c:	mov	r2, #40	; 0x28
   15e70:	mov	r3, r5
   15e74:	cmp	r0, #11
   15e78:	movweq	r2, #32
   15e7c:	ldr	r2, [r3, r2]!
   15e80:	adds	r2, r2, #1
   15e84:	str	r2, [r3]
   15e88:	ldr	r2, [r3, #4]
   15e8c:	adc	r2, r2, #0
   15e90:	cmp	r0, #11
   15e94:	str	r2, [r3, #4]
   15e98:	bne	15ecc <read_if_statement@@Base+0x104>
   15e9c:	ldr	r0, [r5, #48]	; 0x30
   15ea0:	ldr	r3, [r5, #52]	; 0x34
   15ea4:	adds	r0, r0, #1
   15ea8:	str	r0, [r5, #48]	; 0x30
   15eac:	adc	r3, r3, #0
   15eb0:	mov	r0, r1
   15eb4:	str	r3, [r5, #52]	; 0x34
   15eb8:	bl	12ce0 <free_token_else@@Base>
   15ebc:	mov	r0, r4
   15ec0:	bl	15a10 <read_body@@Base>
   15ec4:	mov	r4, r0
   15ec8:	b	15ef0 <read_if_statement@@Base+0x128>
   15ecc:	ldr	r0, [r5, #56]	; 0x38
   15ed0:	ldr	r3, [r5, #60]	; 0x3c
   15ed4:	adds	r0, r0, #1
   15ed8:	adc	r3, r3, #0
   15edc:	str	r0, [r5, #56]	; 0x38
   15ee0:	str	r3, [r5, #60]	; 0x3c
   15ee4:	ldr	r0, [r4]
   15ee8:	bl	130a8 <push_back@@Base>
   15eec:	mov	r4, #0
   15ef0:	ldrd	r0, [r5, #64]	; 0x40
   15ef4:	adds	r0, r0, #1
   15ef8:	adc	r1, r1, #0
   15efc:	strd	r0, [r5, #64]	; 0x40
   15f00:	mov	r0, #20
   15f04:	bl	11fa0 <malloc@plt>
   15f08:	mov	r1, r8
   15f0c:	mov	r2, r6
   15f10:	mov	r3, r4
   15f14:	mov	r7, r0
   15f18:	bl	14ba8 <init_node_if@@Base>
   15f1c:	ldrd	r0, [r5, #72]	; 0x48
   15f20:	adds	r0, r0, #1
   15f24:	adc	r1, r1, #0
   15f28:	strd	r0, [r5, #72]	; 0x48
   15f2c:	mov	r0, r7
   15f30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f34:	nop	{0}

00015f38 <read_boolean_expression@@Base>:
   15f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f3c:	add	fp, sp, #28
   15f40:	sub	sp, sp, #12
   15f44:	movw	r8, #52560	; 0xcd50
   15f48:	mov	r4, r0
   15f4c:	add	r0, pc, #492	; 0x1ec
   15f50:	mov	r5, #0
   15f54:	movt	r8, #2
   15f58:	vld1.64	{d16-d17}, [r0]
   15f5c:	str	r5, [sp, #8]
   15f60:	vld1.64	{d18-d19}, [r8 :128]
   15f64:	vadd.i64	q8, q9, q8
   15f68:	vst1.64	{d16-d17}, [r8 :128]
   15f6c:	ldr	r0, [r4]
   15f70:	bl	13220 <next@@Base>
   15f74:	mov	r6, r0
   15f78:	ldr	r0, [r0]
   15f7c:	mov	r1, #24
   15f80:	mov	r2, r8
   15f84:	cmp	r0, #4
   15f88:	movwne	r1, #16
   15f8c:	ldr	r1, [r2, r1]!
   15f90:	adds	r1, r1, #1
   15f94:	str	r1, [r2]
   15f98:	ldr	r1, [r2, #4]
   15f9c:	adc	r1, r1, #0
   15fa0:	cmp	r0, #4
   15fa4:	str	r1, [r2, #4]
   15fa8:	beq	160dc <read_boolean_expression@@Base+0x1a4>
   15fac:	movw	r1, #45628	; 0xb23c
   15fb0:	movw	sl, #49376	; 0xc0e0
   15fb4:	mov	r9, #0
   15fb8:	mov	r5, #0
   15fbc:	movt	r1, #1
   15fc0:	movt	sl, #2
   15fc4:	add	r1, r1, #8
   15fc8:	str	r1, [sp, #4]
   15fcc:	cmp	r0, #12
   15fd0:	str	r9, [sl]
   15fd4:	beq	1605c <read_boolean_expression@@Base+0x124>
   15fd8:	cmp	r0, #3
   15fdc:	beq	1601c <read_boolean_expression@@Base+0xe4>
   15fe0:	cmp	r0, #1
   15fe4:	bne	16100 <read_boolean_expression@@Base+0x1c8>
   15fe8:	movw	r0, #45628	; 0xb23c
   15fec:	movt	r0, #1
   15ff0:	add	r1, r0, #4
   15ff4:	mov	r0, sl
   15ff8:	bl	165e0 <read_boolean_unary_expression@@Base+0x150>
   15ffc:	ldrd	r0, [r8, #64]	; 0x40
   16000:	adds	r0, r0, #1
   16004:	adc	r1, r1, #0
   16008:	strd	r0, [r8, #64]	; 0x40
   1600c:	mov	r1, r6
   16010:	ldr	r0, [r4]
   16014:	bl	130a8 <push_back@@Base>
   16018:	b	16040 <read_boolean_expression@@Base+0x108>
   1601c:	movw	r0, #45628	; 0xb23c
   16020:	movt	r0, #1
   16024:	add	r1, r0, #12
   16028:	mov	r0, sl
   1602c:	bl	165e0 <read_boolean_unary_expression@@Base+0x150>
   16030:	ldrd	r0, [r8, #80]	; 0x50
   16034:	adds	r0, r0, #1
   16038:	adc	r1, r1, #0
   1603c:	strd	r0, [r8, #80]	; 0x50
   16040:	mov	r0, r4
   16044:	mov	r1, r5
   16048:	add	r2, sp, #8
   1604c:	mov	r3, r7
   16050:	bl	16150 <read_single_boolean_expression@@Base>
   16054:	mov	r5, r0
   16058:	b	1608c <read_boolean_expression@@Base+0x154>
   1605c:	ldr	r1, [sp, #4]
   16060:	mov	r0, sl
   16064:	bl	165e0 <read_boolean_unary_expression@@Base+0x150>
   16068:	ldrd	r0, [r8, #72]	; 0x48
   1606c:	adds	r0, r0, #1
   16070:	adc	r1, r1, #0
   16074:	strd	r0, [r8, #72]	; 0x48
   16078:	mov	r0, r6
   1607c:	bl	151d4 <get_boolean_op_value@@Base>
   16080:	mov	r7, r0
   16084:	mov	r0, #1
   16088:	str	r0, [sp, #8]
   1608c:	ldrd	r0, [r8, #88]	; 0x58
   16090:	adds	r0, r0, #1
   16094:	adc	r1, r1, #0
   16098:	strd	r0, [r8, #88]	; 0x58
   1609c:	ldr	r0, [r4]
   160a0:	bl	13220 <next@@Base>
   160a4:	mov	r6, r0
   160a8:	ldr	r0, [r0]
   160ac:	mov	r1, #24
   160b0:	mov	r2, r8
   160b4:	cmp	r0, #4
   160b8:	movwne	r1, #16
   160bc:	ldr	r1, [r2, r1]!
   160c0:	adds	r1, r1, #1
   160c4:	str	r1, [r2]
   160c8:	ldr	r1, [r2, #4]
   160cc:	adc	r1, r1, #0
   160d0:	cmp	r0, #4
   160d4:	str	r1, [r2, #4]
   160d8:	bne	15fcc <read_boolean_expression@@Base+0x94>
   160dc:	ldrd	r0, [r8, #96]	; 0x60
   160e0:	adds	r0, r0, #1
   160e4:	adc	r1, r1, #0
   160e8:	strd	r0, [r8, #96]	; 0x60
   160ec:	mov	r0, r6
   160f0:	bl	12b90 <free_token_cpar@@Base>
   160f4:	mov	r0, r5
   160f8:	sub	sp, fp, #28
   160fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16100:	movw	r0, #49376	; 0xc0e0
   16104:	movw	r1, #45628	; 0xb23c
   16108:	movt	r0, #2
   1610c:	movt	r1, #1
   16110:	bl	165e0 <read_boolean_unary_expression@@Base+0x150>
   16114:	movw	r0, #49416	; 0xc108
   16118:	mov	r1, #33	; 0x21
   1611c:	mov	r2, #1
   16120:	movt	r0, #2
   16124:	ldr	r3, [r0]
   16128:	movw	r0, #45477	; 0xb1a5
   1612c:	movt	r0, #1
   16130:	bl	11f7c <fwrite@plt>
   16134:	mov	r0, #1
   16138:	bl	11fdc <exit@plt>
   1613c:	nop	{0}
   16140:	andeq	r0, r0, r1
   16144:	andeq	r0, r0, r0
   16148:	andeq	r0, r0, r1
   1614c:	andeq	r0, r0, r0

00016150 <read_single_boolean_expression@@Base>:
   16150:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16154:	add	fp, sp, #24
   16158:	movw	r5, #52672	; 0xcdc0
   1615c:	mov	r8, r3
   16160:	mov	r4, r2
   16164:	movt	r5, #2
   16168:	ldrd	r2, [r5]
   1616c:	adds	r2, r2, #1
   16170:	adc	r3, r3, #0
   16174:	cmp	r1, #0
   16178:	strd	r2, [r5]
   1617c:	mov	r2, #16
   16180:	mov	r3, r5
   16184:	movweq	r2, #8
   16188:	ldr	r2, [r3, r2]!
   1618c:	adds	r2, r2, #1
   16190:	str	r2, [r3]
   16194:	ldr	r2, [r3, #4]
   16198:	adc	r2, r2, #0
   1619c:	cmp	r1, #0
   161a0:	str	r2, [r3, #4]
   161a4:	beq	1621c <read_single_boolean_expression@@Base+0xcc>
   161a8:	ldr	r1, [r4]
   161ac:	mov	r2, #40	; 0x28
   161b0:	mov	r3, r5
   161b4:	cmp	r1, #0
   161b8:	movwne	r2, #32
   161bc:	ldr	r2, [r3, r2]!
   161c0:	adds	r2, r2, #1
   161c4:	str	r2, [r3]
   161c8:	ldr	r2, [r3, #4]
   161cc:	adc	r2, r2, #0
   161d0:	cmp	r1, #0
   161d4:	str	r2, [r3, #4]
   161d8:	beq	1624c <read_single_boolean_expression@@Base+0xfc>
   161dc:	ldrd	r2, [r5, #48]	; 0x30
   161e0:	adds	r2, r2, #1
   161e4:	adc	r3, r3, #0
   161e8:	strd	r2, [r5, #48]	; 0x30
   161ec:	bl	16274 <read_boolean_binary_expression@@Base>
   161f0:	mov	r7, r0
   161f4:	mov	r0, #20
   161f8:	bl	11fa0 <malloc@plt>
   161fc:	mov	r1, r8
   16200:	mov	r2, #0
   16204:	mov	r3, r7
   16208:	mov	r6, r0
   1620c:	mov	r9, #0
   16210:	bl	14c18 <init_node_boolean_operator@@Base>
   16214:	str	r9, [r4]
   16218:	b	16234 <read_single_boolean_expression@@Base+0xe4>
   1621c:	ldrd	r2, [r5, #24]
   16220:	adds	r2, r2, #1
   16224:	adc	r3, r3, #0
   16228:	strd	r2, [r5, #24]
   1622c:	bl	16274 <read_boolean_binary_expression@@Base>
   16230:	mov	r6, r0
   16234:	ldrd	r0, [r5, #56]	; 0x38
   16238:	adds	r0, r0, #1
   1623c:	adc	r1, r1, #0
   16240:	strd	r0, [r5, #56]	; 0x38
   16244:	mov	r0, r6
   16248:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1624c:	mov	r0, #4
   16250:	movw	r1, #45511	; 0xb1c7
   16254:	ldr	r2, [r0]
   16258:	movw	r0, #49416	; 0xc108
   1625c:	movt	r1, #1
   16260:	movt	r0, #2
   16264:	ldr	r0, [r0]
   16268:	bl	1200c <fprintf@plt>
   1626c:	mov	r0, #1
   16270:	bl	11fdc <exit@plt>

00016274 <read_boolean_binary_expression@@Base>:
   16274:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16278:	add	fp, sp, #24
   1627c:	movw	r4, #52736	; 0xce00
   16280:	mov	r5, r0
   16284:	movt	r4, #2
   16288:	ldrd	r0, [r4]
   1628c:	adds	r0, r0, #1
   16290:	adc	r1, r1, #0
   16294:	strd	r0, [r4]
   16298:	ldr	r0, [r5]
   1629c:	bl	13220 <next@@Base>
   162a0:	mov	r6, r0
   162a4:	ldr	r0, [r0]
   162a8:	mov	r1, #16
   162ac:	mov	r2, r4
   162b0:	cmp	r0, #1
   162b4:	movwne	r1, #8
   162b8:	ldr	r1, [r2, r1]!
   162bc:	adds	r1, r1, #1
   162c0:	str	r1, [r2]
   162c4:	ldr	r1, [r2, #4]
   162c8:	adc	r1, r1, #0
   162cc:	cmp	r0, #1
   162d0:	str	r1, [r2, #4]
   162d4:	beq	16334 <read_boolean_binary_expression@@Base+0xc0>
   162d8:	mov	r1, #32
   162dc:	cmp	r0, #12
   162e0:	mov	r2, r4
   162e4:	movweq	r1, #24
   162e8:	ldr	r1, [r2, r1]!
   162ec:	adds	r1, r1, #1
   162f0:	str	r1, [r2]
   162f4:	ldr	r1, [r2, #4]
   162f8:	adc	r1, r1, #0
   162fc:	cmp	r0, #12
   16300:	str	r1, [r2, #4]
   16304:	bne	163a4 <read_boolean_binary_expression@@Base+0x130>
   16308:	ldrd	r0, [r4, #40]	; 0x28
   1630c:	adds	r0, r0, #1
   16310:	adc	r1, r1, #0
   16314:	strd	r0, [r4, #40]	; 0x28
   16318:	mov	r1, r6
   1631c:	ldr	r0, [r5]
   16320:	bl	130a8 <push_back@@Base>
   16324:	mov	r0, r5
   16328:	bl	16490 <read_boolean_unary_expression@@Base>
   1632c:	mov	r5, r0
   16330:	b	16478 <read_boolean_binary_expression@@Base+0x204>
   16334:	mov	r0, #12
   16338:	bl	11fa0 <malloc@plt>
   1633c:	ldr	r1, [r6, #4]
   16340:	mov	r8, r0
   16344:	bl	14a50 <init_node_int@@Base>
   16348:	mov	r0, r6
   1634c:	bl	12b00 <free_token_int_value@@Base>
   16350:	ldr	r0, [r5]
   16354:	bl	13220 <next@@Base>
   16358:	mov	r7, r0
   1635c:	ldr	r0, [r0]
   16360:	mov	r1, #64	; 0x40
   16364:	mov	r2, r4
   16368:	cmp	r0, #12
   1636c:	movwne	r1, #56	; 0x38
   16370:	ldr	r1, [r2, r1]!
   16374:	adds	r1, r1, #1
   16378:	str	r1, [r2]
   1637c:	ldr	r1, [r2, #4]
   16380:	adc	r1, r1, #0
   16384:	cmp	r0, #12
   16388:	str	r1, [r2, #4]
   1638c:	beq	163bc <read_boolean_binary_expression@@Base+0x148>
   16390:	ldrd	r0, [r4, #72]	; 0x48
   16394:	adds	r0, r0, #1
   16398:	adc	r1, r1, #0
   1639c:	strd	r0, [r4, #72]	; 0x48
   163a0:	b	16420 <read_boolean_binary_expression@@Base+0x1ac>
   163a4:	ldrd	r0, [r4, #48]	; 0x30
   163a8:	mov	r5, #0
   163ac:	adds	r0, r0, #1
   163b0:	adc	r1, r1, #0
   163b4:	strd	r0, [r4, #48]	; 0x30
   163b8:	b	16478 <read_boolean_binary_expression@@Base+0x204>
   163bc:	mov	r0, r7
   163c0:	bl	151d4 <get_boolean_op_value@@Base>
   163c4:	mov	r6, r0
   163c8:	mov	r0, r7
   163cc:	bl	12d10 <free_token_boolean_op@@Base>
   163d0:	ldr	r0, [r5]
   163d4:	bl	13220 <next@@Base>
   163d8:	mov	r5, r0
   163dc:	ldr	r0, [r0]
   163e0:	mov	r1, #88	; 0x58
   163e4:	mov	r2, r4
   163e8:	cmp	r0, #1
   163ec:	movwne	r1, #80	; 0x50
   163f0:	ldr	r1, [r2, r1]!
   163f4:	adds	r1, r1, #1
   163f8:	str	r1, [r2]
   163fc:	ldr	r1, [r2, #4]
   16400:	adc	r1, r1, #0
   16404:	cmp	r0, #1
   16408:	str	r1, [r2, #4]
   1640c:	beq	16430 <read_boolean_binary_expression@@Base+0x1bc>
   16410:	ldrd	r0, [r4, #96]	; 0x60
   16414:	adds	r0, r0, #1
   16418:	adc	r1, r1, #0
   1641c:	strd	r0, [r4, #96]	; 0x60
   16420:	mov	r0, r8
   16424:	bl	14c90 <free_node@@Base>
   16428:	mov	r5, #0
   1642c:	b	16478 <read_boolean_binary_expression@@Base+0x204>
   16430:	ldrd	r0, [r4, #104]	; 0x68
   16434:	adds	r0, r0, #1
   16438:	adc	r1, r1, #0
   1643c:	strd	r0, [r4, #104]	; 0x68
   16440:	mov	r0, #12
   16444:	bl	11fa0 <malloc@plt>
   16448:	ldr	r1, [r5, #4]
   1644c:	mov	r7, r0
   16450:	bl	14a50 <init_node_int@@Base>
   16454:	mov	r0, r5
   16458:	bl	12b00 <free_token_int_value@@Base>
   1645c:	mov	r0, #20
   16460:	bl	11fa0 <malloc@plt>
   16464:	mov	r1, r6
   16468:	mov	r2, r8
   1646c:	mov	r3, r7
   16470:	mov	r5, r0
   16474:	bl	14c18 <init_node_boolean_operator@@Base>
   16478:	ldrd	r0, [r4, #112]	; 0x70
   1647c:	adds	r0, r0, #1
   16480:	adc	r1, r1, #0
   16484:	strd	r0, [r4, #112]	; 0x70
   16488:	mov	r0, r5
   1648c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016490 <read_boolean_unary_expression@@Base>:
   16490:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16494:	add	fp, sp, #24
   16498:	movw	r5, #52864	; 0xce80
   1649c:	mov	r6, r0
   164a0:	movt	r5, #2
   164a4:	ldrd	r0, [r5]
   164a8:	adds	r0, r0, #1
   164ac:	adc	r1, r1, #0
   164b0:	strd	r0, [r5]
   164b4:	mov	r0, #20
   164b8:	bl	11fa0 <malloc@plt>
   164bc:	mov	r4, r0
   164c0:	ldr	r0, [r6]
   164c4:	bl	13220 <next@@Base>
   164c8:	mov	r7, r0
   164cc:	ldr	r0, [r0]
   164d0:	mov	r1, #16
   164d4:	mov	r2, r5
   164d8:	cmp	r0, #12
   164dc:	movwne	r1, #8
   164e0:	ldr	r1, [r2, r1]!
   164e4:	adds	r1, r1, #1
   164e8:	str	r1, [r2]
   164ec:	ldr	r1, [r2, #4]
   164f0:	adc	r1, r1, #0
   164f4:	cmp	r0, #12
   164f8:	str	r1, [r2, #4]
   164fc:	beq	16514 <read_boolean_unary_expression@@Base+0x84>
   16500:	ldrd	r0, [r5, #24]
   16504:	adds	r0, r0, #1
   16508:	adc	r1, r1, #0
   1650c:	strd	r0, [r5, #24]
   16510:	b	16578 <read_boolean_unary_expression@@Base+0xe8>
   16514:	mov	r0, r7
   16518:	bl	151d4 <get_boolean_op_value@@Base>
   1651c:	mov	r8, r0
   16520:	mov	r0, r7
   16524:	bl	12d10 <free_token_boolean_op@@Base>
   16528:	ldr	r0, [r6]
   1652c:	bl	13220 <next@@Base>
   16530:	mov	r6, r0
   16534:	ldr	r0, [r0]
   16538:	mov	r1, #40	; 0x28
   1653c:	mov	r2, r5
   16540:	cmp	r0, #1
   16544:	movwne	r1, #32
   16548:	ldr	r1, [r2, r1]!
   1654c:	adds	r1, r1, #1
   16550:	str	r1, [r2]
   16554:	ldr	r1, [r2, #4]
   16558:	adc	r1, r1, #0
   1655c:	cmp	r0, #1
   16560:	str	r1, [r2, #4]
   16564:	beq	16588 <read_boolean_unary_expression@@Base+0xf8>
   16568:	ldrd	r0, [r5, #48]	; 0x30
   1656c:	adds	r0, r0, #1
   16570:	adc	r1, r1, #0
   16574:	strd	r0, [r5, #48]	; 0x30
   16578:	mov	r0, r4
   1657c:	bl	1513c <free_node_boolean_operator@@Base>
   16580:	mov	r4, #0
   16584:	b	165c8 <read_boolean_unary_expression@@Base+0x138>
   16588:	ldrd	r0, [r5, #56]	; 0x38
   1658c:	adds	r0, r0, #1
   16590:	adc	r1, r1, #0
   16594:	strd	r0, [r5, #56]	; 0x38
   16598:	mov	r0, #12
   1659c:	bl	11fa0 <malloc@plt>
   165a0:	ldr	r1, [r6, #4]
   165a4:	mov	r7, r0
   165a8:	bl	14a50 <init_node_int@@Base>
   165ac:	mov	r0, r6
   165b0:	bl	12b00 <free_token_int_value@@Base>
   165b4:	mov	r0, r4
   165b8:	mov	r1, r8
   165bc:	mov	r2, r7
   165c0:	mov	r3, #0
   165c4:	bl	14c18 <init_node_boolean_operator@@Base>
   165c8:	ldrd	r0, [r5, #64]	; 0x40
   165cc:	adds	r0, r0, #1
   165d0:	adc	r1, r1, #0
   165d4:	strd	r0, [r5, #64]	; 0x40
   165d8:	mov	r0, r4
   165dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   165e0:	ldr	r0, [r0]
   165e4:	cmn	r0, #1
   165e8:	ldrne	r0, [r1, r0, lsl #2]
   165ec:	cmpne	r0, #0
   165f0:	bne	165f8 <read_boolean_unary_expression@@Base+0x168>
   165f4:	bx	lr
   165f8:	ldrd	r2, [r0]
   165fc:	adds	r2, r2, #1
   16600:	adc	r3, r3, #0
   16604:	strd	r2, [r0]
   16608:	bx	lr
   1660c:	push	{r4, r5, r6, lr}
   16610:	sub	sp, sp, #8
   16614:	movw	r0, #45968	; 0xb390
   16618:	movw	r1, #42359	; 0xa577
   1661c:	movw	r2, #27576	; 0x6bb8
   16620:	movt	r0, #1
   16624:	movt	r1, #1
   16628:	movt	r2, #51930	; 0xcada
   1662c:	bl	17534 <__generate_code_for_binary_boolean_expression@@Base+0x4ec>
   16630:	movw	r0, #45872	; 0xb330
   16634:	movw	r6, #45648	; 0xb250
   16638:	mov	r5, #0
   1663c:	movt	r0, #1
   16640:	movt	r6, #1
   16644:	add	r4, r0, #4
   16648:	mov	r3, r6
   1664c:	ldr	r0, [r3, r5]!
   16650:	ldr	r1, [r3, #16]
   16654:	str	r1, [sp]
   16658:	ldmib	r3, {r1, r2}
   1665c:	ldrb	r3, [r3, #12]
   16660:	bl	17c98 <__generate_code_for_binary_boolean_expression@@Base+0xc50>
   16664:	ldrd	r0, [r4, #-4]
   16668:	bl	1854c <__generate_code_for_binary_boolean_expression@@Base+0x1504>
   1666c:	add	r5, r5, #20
   16670:	add	r4, r4, #8
   16674:	cmp	r5, #220	; 0xdc
   16678:	bne	16648 <read_boolean_unary_expression@@Base+0x1b8>
   1667c:	bl	18cc8 <__generate_code_for_binary_boolean_expression@@Base+0x1c80>
   16680:	add	sp, sp, #8
   16684:	pop	{r4, r5, r6, lr}
   16688:	b	19a34 <__generate_code_for_binary_boolean_expression@@Base+0x29ec>
   1668c:	push	{r4, r5, fp, lr}
   16690:	vpush	{d8-d9}
   16694:	bl	1660c <read_boolean_unary_expression@@Base+0x17c>
   16698:	movw	r0, #52080	; 0xcb70
   1669c:	vmov.i32	q4, #0	; 0x00000000
   166a0:	mov	r4, #0
   166a4:	mov	r5, #116	; 0x74
   166a8:	mov	r2, #160	; 0xa0
   166ac:	movt	r0, #2
   166b0:	vst1.64	{d8-d9}, [r0 :128]
   166b4:	movw	r0, #52064	; 0xcb60
   166b8:	movt	r0, #2
   166bc:	vst1.64	{d8-d9}, [r0 :128]
   166c0:	movw	r0, #52096	; 0xcb80
   166c4:	movt	r0, #2
   166c8:	vst1.64	{d8-d9}, [r0 :128]
   166cc:	movw	r0, #52112	; 0xcb90
   166d0:	movt	r0, #2
   166d4:	add	r1, r0, #96	; 0x60
   166d8:	str	r4, [r0, #112]	; 0x70
   166dc:	vst1.64	{d8-d9}, [r1 :128]
   166e0:	add	r1, r0, #80	; 0x50
   166e4:	vst1.64	{d8-d9}, [r1 :128]
   166e8:	add	r1, r0, #64	; 0x40
   166ec:	vst1.64	{d8-d9}, [r1 :128]
   166f0:	add	r1, r0, #48	; 0x30
   166f4:	vst1.64	{d8-d9}, [r1 :128]
   166f8:	add	r1, r0, #32
   166fc:	vst1.64	{d8-d9}, [r1 :128]
   16700:	add	r1, r0, #16
   16704:	vst1.64	{d8-d9}, [r0 :128], r5
   16708:	str	r4, [r0]
   1670c:	movw	r0, #52240	; 0xcc10
   16710:	vst1.64	{d8-d9}, [r1 :128]
   16714:	mov	r1, #0
   16718:	movt	r0, #2
   1671c:	bl	1203c <memset@plt>
   16720:	movw	r1, #52560	; 0xcd50
   16724:	movt	r1, #2
   16728:	add	r0, r1, #80	; 0x50
   1672c:	str	r4, [r1, #96]	; 0x60
   16730:	vst1.64	{d8-d9}, [r0 :128]
   16734:	add	r0, r1, #64	; 0x40
   16738:	vst1.64	{d8-d9}, [r0 :128]
   1673c:	add	r0, r1, #48	; 0x30
   16740:	vst1.64	{d8-d9}, [r0 :128]
   16744:	add	r0, r1, #32
   16748:	vst1.64	{d8-d9}, [r0 :128]
   1674c:	add	r0, r1, #16
   16750:	vst1.64	{d8-d9}, [r0 :128]
   16754:	movw	r0, #52480	; 0xcd00
   16758:	movt	r0, #2
   1675c:	add	r2, r0, #48	; 0x30
   16760:	vst1.64	{d8-d9}, [r2 :128]
   16764:	add	r2, r0, #32
   16768:	vst1.64	{d8-d9}, [r2 :128]
   1676c:	add	r2, r0, #16
   16770:	vst1.64	{d8-d9}, [r2 :128]
   16774:	movw	r2, #52400	; 0xccb0
   16778:	movt	r2, #2
   1677c:	add	r3, r2, #48	; 0x30
   16780:	str	r4, [r2, #64]	; 0x40
   16784:	vst1.64	{d8-d9}, [r3 :128]
   16788:	add	r3, r2, #32
   1678c:	vst1.64	{d8-d9}, [r3 :128]
   16790:	add	r3, r2, #16
   16794:	vst1.64	{d8-d9}, [r3 :128]
   16798:	mov	r3, #64	; 0x40
   1679c:	vst1.64	{d8-d9}, [r0 :128], r3
   167a0:	vst1.64	{d8-d9}, [r0 :128]
   167a4:	mov	r0, #68	; 0x44
   167a8:	vst1.64	{d8-d9}, [r2 :128], r0
   167ac:	str	r4, [r2]
   167b0:	mov	r2, #100	; 0x64
   167b4:	vst1.64	{d8-d9}, [r1 :128], r2
   167b8:	str	r4, [r1]
   167bc:	movw	r1, #52672	; 0xcdc0
   167c0:	movt	r1, #2
   167c4:	add	r2, r1, #32
   167c8:	vst1.64	{d8-d9}, [r2 :128]
   167cc:	add	r2, r1, #16
   167d0:	vst1.64	{d8-d9}, [r2 :128]
   167d4:	mov	r2, #48	; 0x30
   167d8:	vst1.64	{d8-d9}, [r1 :128], r2
   167dc:	vst1.64	{d8-d9}, [r1 :128]
   167e0:	movw	r1, #52736	; 0xce00
   167e4:	movt	r1, #2
   167e8:	add	r2, r1, #96	; 0x60
   167ec:	str	r4, [r1, #112]	; 0x70
   167f0:	vst1.64	{d8-d9}, [r2 :128]
   167f4:	add	r2, r1, #80	; 0x50
   167f8:	vst1.64	{d8-d9}, [r2 :128]
   167fc:	add	r2, r1, #64	; 0x40
   16800:	vst1.64	{d8-d9}, [r2 :128]
   16804:	add	r2, r1, #48	; 0x30
   16808:	vst1.64	{d8-d9}, [r2 :128]
   1680c:	add	r2, r1, #32
   16810:	vst1.64	{d8-d9}, [r2 :128]
   16814:	add	r2, r1, #16
   16818:	vst1.64	{d8-d9}, [r1 :128], r5
   1681c:	str	r4, [r1]
   16820:	movw	r1, #52864	; 0xce80
   16824:	vst1.64	{d8-d9}, [r2 :128]
   16828:	movt	r1, #2
   1682c:	add	r2, r1, #48	; 0x30
   16830:	str	r4, [r1, #64]	; 0x40
   16834:	vst1.64	{d8-d9}, [r2 :128]
   16838:	add	r2, r1, #32
   1683c:	vst1.64	{d8-d9}, [r2 :128]
   16840:	add	r2, r1, #16
   16844:	vst1.64	{d8-d9}, [r1 :128], r0
   16848:	vst1.64	{d8-d9}, [r2 :128]
   1684c:	str	r4, [r1]
   16850:	vpop	{d8-d9}
   16854:	pop	{r4, r5, fp, pc}
   16858:	movw	r0, #26124	; 0x660c
   1685c:	movw	r1, #26252	; 0x668c
   16860:	movt	r0, #1
   16864:	movt	r1, #1
   16868:	b	19ee4 <__gcov_flush@@Base+0xb4>
   1686c:	andeq	r0, r0, r0

00016870 <init_generator@@Base>:
   16870:	push	{r4, sl, fp, lr}
   16874:	add	fp, sp, #8
   16878:	mov	r4, r0
   1687c:	movw	r0, #52944	; 0xced0
   16880:	add	r3, pc, #56	; 0x38
   16884:	movt	r0, #2
   16888:	vld1.64	{d16-d17}, [r3]
   1688c:	vld1.64	{d18-d19}, [r0 :128]
   16890:	vadd.i64	q8, q9, q8
   16894:	vst1.64	{d16-d17}, [r0 :128]
   16898:	str	r1, [r4]
   1689c:	movw	r1, #46286	; 0xb4ce
   168a0:	mov	r0, r2
   168a4:	movt	r1, #1
   168a8:	bl	11f10 <fopen@plt>
   168ac:	mov	r1, #0
   168b0:	stmib	r4, {r0, r1}
   168b4:	str	r1, [r4, #12]
   168b8:	pop	{r4, sl, fp, pc}
   168bc:	nop	{0}
   168c0:	andeq	r0, r0, r1
   168c4:	andeq	r0, r0, r0
   168c8:	andeq	r0, r0, r1
   168cc:	andeq	r0, r0, r0

000168d0 <destroy_generator@@Base>:
   168d0:	movw	r1, #52960	; 0xcee0
   168d4:	add	r2, pc, #28
   168d8:	movt	r1, #2
   168dc:	vld1.64	{d16-d17}, [r2]
   168e0:	vld1.64	{d18-d19}, [r1 :128]
   168e4:	vadd.i64	q8, q9, q8
   168e8:	vst1.64	{d16-d17}, [r1 :128]
   168ec:	ldr	r0, [r0, #4]
   168f0:	b	12060 <fclose@plt>
   168f4:	nop	{0}
   168f8:	andeq	r0, r0, r1
   168fc:	andeq	r0, r0, r0
   16900:	andeq	r0, r0, r1
   16904:	andeq	r0, r0, r0

00016908 <generate_code@@Base>:
   16908:	push	{r4, r5, fp, lr}
   1690c:	add	fp, sp, #8
   16910:	mov	r4, r0
   16914:	movw	r0, #52976	; 0xcef0
   16918:	add	r1, pc, #56	; 0x38
   1691c:	movt	r0, #2
   16920:	vld1.64	{d16-d17}, [r1]
   16924:	vld1.64	{d18-d19}, [r0 :128]
   16928:	vadd.i64	q8, q9, q8
   1692c:	vst1.64	{d16-d17}, [r0 :128]
   16930:	ldr	r0, [r4]
   16934:	bl	15808 <build_ast@@Base>
   16938:	mov	r5, r0
   1693c:	mov	r0, r4
   16940:	mov	r1, r5
   16944:	bl	16968 <__generate_code@@Base>
   16948:	mov	r0, r5
   1694c:	pop	{r4, r5, fp, lr}
   16950:	b	14c90 <free_node@@Base>
   16954:	nop	{0}
   16958:	andeq	r0, r0, r1
   1695c:	andeq	r0, r0, r0
   16960:	andeq	r0, r0, r1
   16964:	andeq	r0, r0, r0

00016968 <__generate_code@@Base>:
   16968:	push	{r4, r5, fp, lr}
   1696c:	add	fp, sp, #8
   16970:	mov	r5, r0
   16974:	movw	r0, #52992	; 0xcf00
   16978:	mov	r4, r1
   1697c:	add	r1, pc, #60	; 0x3c
   16980:	mov	r2, #1
   16984:	movt	r0, #2
   16988:	vld1.64	{d16-d17}, [r1]
   1698c:	mov	r1, #21
   16990:	vld1.64	{d18-d19}, [r0 :128]
   16994:	vadd.i64	q8, q9, q8
   16998:	vst1.64	{d16-d17}, [r0 :128]
   1699c:	movw	r0, #46288	; 0xb4d0
   169a0:	ldr	r3, [r5, #4]
   169a4:	movt	r0, #1
   169a8:	bl	11f7c <fwrite@plt>
   169ac:	mov	r0, r5
   169b0:	mov	r1, r4
   169b4:	pop	{r4, r5, fp, lr}
   169b8:	b	169d0 <__generate_code_for_main@@Base>
   169bc:	nop	{0}
   169c0:	andeq	r0, r0, r1
   169c4:	andeq	r0, r0, r0
   169c8:	andeq	r0, r0, r1
   169cc:	andeq	r0, r0, r0

000169d0 <__generate_code_for_main@@Base>:
   169d0:	push	{r4, r5, fp, lr}
   169d4:	add	fp, sp, #8
   169d8:	movw	ip, #53008	; 0xcf10
   169dc:	movt	ip, #2
   169e0:	ldrd	r4, [ip]
   169e4:	mov	r2, ip
   169e8:	adds	r4, r4, #1
   169ec:	adc	r5, r5, #0
   169f0:	strd	r4, [ip]
   169f4:	mov	r5, #16
   169f8:	ldr	r3, [r1]
   169fc:	cmp	r3, #2
   16a00:	movweq	r5, #8
   16a04:	ldr	r5, [r2, r5]!
   16a08:	adds	r5, r5, #1
   16a0c:	str	r5, [r2]
   16a10:	ldr	r5, [r2, #4]
   16a14:	adc	r5, r5, #0
   16a18:	cmp	r3, #2
   16a1c:	str	r5, [r2, #4]
   16a20:	bne	16a3c <__generate_code_for_main@@Base+0x6c>
   16a24:	ldrd	r2, [ip, #24]
   16a28:	adds	r2, r2, #1
   16a2c:	adc	r3, r3, #0
   16a30:	strd	r2, [ip, #24]
   16a34:	pop	{r4, r5, fp, lr}
   16a38:	b	16a68 <__generate_code_for_function@@Base>
   16a3c:	movw	r0, #49416	; 0xc108
   16a40:	mov	r1, #46	; 0x2e
   16a44:	mov	r2, #1
   16a48:	movt	r0, #2
   16a4c:	ldr	r3, [r0]
   16a50:	movw	r0, #46310	; 0xb4e6
   16a54:	movt	r0, #1
   16a58:	bl	11f7c <fwrite@plt>
   16a5c:	mov	r0, #1
   16a60:	bl	11fdc <exit@plt>
   16a64:	nop	{0}

00016a68 <__generate_code_for_function@@Base>:
   16a68:	push	{r4, r5, fp, lr}
   16a6c:	add	fp, sp, #8
   16a70:	mov	r5, r0
   16a74:	movw	r0, #53040	; 0xcf30
   16a78:	mov	r4, r1
   16a7c:	add	r1, pc, #52	; 0x34
   16a80:	movt	r0, #2
   16a84:	vld1.64	{d16-d17}, [r1]
   16a88:	movw	r1, #46357	; 0xb515
   16a8c:	vld1.64	{d18-d19}, [r0 :128]
   16a90:	movt	r1, #1
   16a94:	vadd.i64	q8, q9, q8
   16a98:	vst1.64	{d16-d17}, [r0 :128]
   16a9c:	ldr	r2, [r4, #8]
   16aa0:	ldr	r0, [r5, #4]
   16aa4:	bl	1200c <fprintf@plt>
   16aa8:	ldr	r1, [r4, #12]
   16aac:	mov	r0, r5
   16ab0:	pop	{r4, r5, fp, lr}
   16ab4:	b	16ac8 <__generate_code_for_body@@Base>
   16ab8:	andeq	r0, r0, r1
   16abc:	andeq	r0, r0, r0
   16ac0:	andeq	r0, r0, r1
   16ac4:	andeq	r0, r0, r0

00016ac8 <__generate_code_for_body@@Base>:
   16ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16acc:	add	fp, sp, #28
   16ad0:	sub	sp, sp, #4
   16ad4:	movw	r7, #53056	; 0xcf40
   16ad8:	mov	r4, r0
   16adc:	add	r0, pc, #348	; 0x15c
   16ae0:	cmp	r1, #0
   16ae4:	mov	r6, r1
   16ae8:	movt	r7, #2
   16aec:	vld1.64	{d16-d17}, [r0]
   16af0:	mov	r0, #24
   16af4:	vld1.64	{d18-d19}, [r7 :128]
   16af8:	movwne	r0, #16
   16afc:	mov	r1, r7
   16b00:	vadd.i64	q8, q9, q8
   16b04:	vst1.64	{d16-d17}, [r1 :128], r0
   16b08:	ldm	r1, {r0, r3}
   16b0c:	adds	r0, r0, #1
   16b10:	adc	r3, r3, #0
   16b14:	cmp	r6, #0
   16b18:	stm	r1, {r0, r3}
   16b1c:	beq	16bec <__generate_code_for_body@@Base+0x124>
   16b20:	movw	r0, #46704	; 0xb670
   16b24:	movw	r5, #49380	; 0xc0e4
   16b28:	movt	r0, #1
   16b2c:	movt	r5, #2
   16b30:	add	r8, r0, #8
   16b34:	add	r9, r0, #4
   16b38:	mov	r0, #0
   16b3c:	str	r0, [r5]
   16b40:	ldm	r6, {r0, sl}
   16b44:	cmp	r0, #4
   16b48:	beq	16b80 <__generate_code_for_body@@Base+0xb8>
   16b4c:	cmp	r0, #3
   16b50:	bne	16c04 <__generate_code_for_body@@Base+0x13c>
   16b54:	mov	r0, r5
   16b58:	mov	r1, r9
   16b5c:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   16b60:	ldrd	r0, [r7, #56]	; 0x38
   16b64:	adds	r0, r0, #1
   16b68:	adc	r1, r1, #0
   16b6c:	strd	r0, [r7, #56]	; 0x38
   16b70:	mov	r0, r4
   16b74:	mov	r1, r6
   16b78:	bl	16dd0 <__generate_code_for_return@@Base>
   16b7c:	b	16ba8 <__generate_code_for_body@@Base+0xe0>
   16b80:	mov	r0, r5
   16b84:	mov	r1, r8
   16b88:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   16b8c:	ldrd	r0, [r7, #64]	; 0x40
   16b90:	adds	r0, r0, #1
   16b94:	adc	r1, r1, #0
   16b98:	strd	r0, [r7, #64]	; 0x40
   16b9c:	mov	r0, r4
   16ba0:	mov	r1, r6
   16ba4:	bl	16c50 <__generate_code_for_if@@Base>
   16ba8:	ldrd	r0, [r7, #72]	; 0x48
   16bac:	mov	r6, sl
   16bb0:	adds	r0, r0, #1
   16bb4:	adc	r1, r1, #0
   16bb8:	cmp	sl, #0
   16bbc:	strd	r0, [r7, #72]	; 0x48
   16bc0:	mov	r0, #24
   16bc4:	mov	r1, r7
   16bc8:	movwne	r0, #16
   16bcc:	ldr	r0, [r1, r0]!
   16bd0:	adds	r0, r0, #1
   16bd4:	str	r0, [r1]
   16bd8:	ldr	r0, [r1, #4]
   16bdc:	adc	r0, r0, #0
   16be0:	cmp	sl, #0
   16be4:	str	r0, [r1, #4]
   16be8:	bne	16b38 <__generate_code_for_body@@Base+0x70>
   16bec:	ldrd	r0, [r7, #80]	; 0x50
   16bf0:	adds	r0, r0, #1
   16bf4:	adc	r1, r1, #0
   16bf8:	strd	r0, [r7, #80]	; 0x50
   16bfc:	sub	sp, fp, #28
   16c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c04:	movw	r0, #49380	; 0xc0e4
   16c08:	movw	r1, #46704	; 0xb670
   16c0c:	movt	r0, #2
   16c10:	movt	r1, #1
   16c14:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   16c18:	movw	r0, #49416	; 0xc108
   16c1c:	mov	r1, #52	; 0x34
   16c20:	mov	r2, #1
   16c24:	movt	r0, #2
   16c28:	ldr	r3, [r0]
   16c2c:	movw	r0, #46619	; 0xb61b
   16c30:	movt	r0, #1
   16c34:	bl	11f7c <fwrite@plt>
   16c38:	mov	r0, #1
   16c3c:	bl	11fdc <exit@plt>
   16c40:	andeq	r0, r0, r1
   16c44:	andeq	r0, r0, r0
   16c48:	andeq	r0, r0, r1
   16c4c:	andeq	r0, r0, r0

00016c50 <__generate_code_for_if@@Base>:
   16c50:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   16c54:	add	fp, sp, #24
   16c58:	movw	r6, #53152	; 0xcfa0
   16c5c:	mov	r5, r1
   16c60:	mov	r4, r0
   16c64:	movt	r6, #2
   16c68:	ldrd	r0, [r6]
   16c6c:	adds	r0, r0, #1
   16c70:	adc	r1, r1, #0
   16c74:	strd	r0, [r6]
   16c78:	ldrd	r8, [r4, #8]
   16c7c:	adds	r0, r8, #1
   16c80:	mov	r2, r8
   16c84:	mov	r3, r9
   16c88:	adc	r1, r9, #0
   16c8c:	strd	r0, [r4, #8]
   16c90:	mov	r0, r4
   16c94:	ldr	r1, [r5, #8]
   16c98:	bl	16d28 <__generate_code_for_if_expression@@Base>
   16c9c:	ldr	r1, [r5, #12]
   16ca0:	mov	r0, r4
   16ca4:	bl	16ac8 <__generate_code_for_body@@Base>
   16ca8:	ldr	r0, [r4, #4]
   16cac:	movw	r1, #46362	; 0xb51a
   16cb0:	mov	r2, r8
   16cb4:	mov	r3, r9
   16cb8:	movt	r1, #1
   16cbc:	bl	1200c <fprintf@plt>
   16cc0:	ldr	r1, [r5, #16]
   16cc4:	mov	r0, #16
   16cc8:	mov	r2, r6
   16ccc:	cmp	r1, #0
   16cd0:	movwne	r0, #8
   16cd4:	ldr	r0, [r2, r0]!
   16cd8:	adds	r0, r0, #1
   16cdc:	str	r0, [r2]
   16ce0:	ldr	r0, [r2, #4]
   16ce4:	adc	r0, r0, #0
   16ce8:	cmp	r1, #0
   16cec:	str	r0, [r2, #4]
   16cf0:	beq	16d14 <__generate_code_for_if@@Base+0xc4>
   16cf4:	ldr	r0, [r6, #24]
   16cf8:	ldr	r3, [r6, #28]
   16cfc:	adds	r0, r0, #1
   16d00:	str	r0, [r6, #24]
   16d04:	adc	r3, r3, #0
   16d08:	mov	r0, r4
   16d0c:	str	r3, [r6, #28]
   16d10:	bl	16ac8 <__generate_code_for_body@@Base>
   16d14:	ldrd	r0, [r6, #32]
   16d18:	adds	r0, r0, #1
   16d1c:	adc	r1, r1, #0
   16d20:	strd	r0, [r6, #32]
   16d24:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}

00016d28 <__generate_code_for_if_expression@@Base>:
   16d28:	push	{r4, r5, r6, r7, fp, lr}
   16d2c:	add	fp, sp, #16
   16d30:	movw	r5, #53200	; 0xcfd0
   16d34:	movt	r5, #2
   16d38:	ldrd	r6, [r5]
   16d3c:	mov	r4, r5
   16d40:	adds	r6, r6, #1
   16d44:	adc	r7, r7, #0
   16d48:	strd	r6, [r5]
   16d4c:	ldr	r6, [r1, #16]
   16d50:	cmp	r6, #8
   16d54:	mov	r7, r6
   16d58:	movwne	r7, #16
   16d5c:	ldr	r7, [r4, r7]!
   16d60:	adds	r7, r7, #1
   16d64:	str	r7, [r4]
   16d68:	ldr	r7, [r4, #4]
   16d6c:	adc	r7, r7, #0
   16d70:	cmp	r6, #8
   16d74:	str	r7, [r4, #4]
   16d78:	bne	16d9c <__generate_code_for_if_expression@@Base+0x74>
   16d7c:	ldr	r4, [r5, #24]
   16d80:	ldr	r7, [r5, #28]
   16d84:	adds	r4, r4, #1
   16d88:	adc	r7, r7, #0
   16d8c:	str	r4, [r5, #24]
   16d90:	str	r7, [r5, #28]
   16d94:	bl	16f18 <__generate_code_for_unary_boolean_expression@@Base>
   16d98:	b	16db8 <__generate_code_for_if_expression@@Base+0x90>
   16d9c:	ldr	r4, [r5, #32]
   16da0:	ldr	r7, [r5, #36]	; 0x24
   16da4:	adds	r4, r4, #1
   16da8:	adc	r7, r7, #0
   16dac:	str	r4, [r5, #32]
   16db0:	str	r7, [r5, #36]	; 0x24
   16db4:	bl	17048 <__generate_code_for_binary_boolean_expression@@Base>
   16db8:	ldrd	r0, [r5, #40]	; 0x28
   16dbc:	adds	r0, r0, #1
   16dc0:	adc	r1, r1, #0
   16dc4:	strd	r0, [r5, #40]	; 0x28
   16dc8:	pop	{r4, r5, r6, r7, fp, pc}
   16dcc:	nop	{0}

00016dd0 <__generate_code_for_return@@Base>:
   16dd0:	push	{r4, r5, r6, sl, fp, lr}
   16dd4:	add	fp, sp, #16
   16dd8:	movw	r5, #53248	; 0xd000
   16ddc:	mov	r4, r0
   16de0:	mov	r2, #1
   16de4:	movt	r5, #2
   16de8:	ldm	r5, {r0, r3}
   16dec:	adds	r0, r0, #1
   16df0:	adc	r3, r3, #0
   16df4:	stm	r5, {r0, r3}
   16df8:	movw	r0, #46377	; 0xb529
   16dfc:	ldr	r3, [r4, #4]
   16e00:	ldr	r6, [r1, #8]
   16e04:	movt	r0, #1
   16e08:	mov	r1, #9
   16e0c:	bl	11f7c <fwrite@plt>
   16e10:	ldr	r0, [r6]
   16e14:	mov	r1, #16
   16e18:	mov	r2, r5
   16e1c:	cmp	r0, #1
   16e20:	movweq	r1, #8
   16e24:	ldr	r1, [r2, r1]!
   16e28:	adds	r1, r1, #1
   16e2c:	str	r1, [r2]
   16e30:	ldr	r1, [r2, #4]
   16e34:	adc	r1, r1, #0
   16e38:	cmp	r0, #1
   16e3c:	str	r1, [r2, #4]
   16e40:	bne	16ea0 <__generate_code_for_return@@Base+0xd0>
   16e44:	movw	r0, #53280	; 0xd020
   16e48:	add	r1, pc, #120	; 0x78
   16e4c:	ldrd	r2, [r5, #24]
   16e50:	movt	r0, #2
   16e54:	vld1.64	{d16-d17}, [r1]
   16e58:	movw	r1, #46434	; 0xb562
   16e5c:	vld1.64	{d18-d19}, [r0 :128]
   16e60:	movt	r1, #1
   16e64:	adds	r2, r2, #1
   16e68:	adc	r3, r3, #0
   16e6c:	vadd.i64	q8, q9, q8
   16e70:	strd	r2, [r5, #24]
   16e74:	vst1.64	{d16-d17}, [r0 :128]
   16e78:	ldr	r2, [r6, #8]
   16e7c:	ldr	r0, [r4, #4]
   16e80:	bl	1200c <fprintf@plt>
   16e84:	ldr	r3, [r4, #4]
   16e88:	movw	r0, #46425	; 0xb559
   16e8c:	mov	r1, #8
   16e90:	mov	r2, #1
   16e94:	movt	r0, #1
   16e98:	pop	{r4, r5, r6, sl, fp, lr}
   16e9c:	b	11f7c <fwrite@plt>
   16ea0:	movw	r0, #49416	; 0xc108
   16ea4:	mov	r1, #37	; 0x25
   16ea8:	mov	r2, #1
   16eac:	movt	r0, #2
   16eb0:	ldr	r3, [r0]
   16eb4:	movw	r0, #46387	; 0xb533
   16eb8:	movt	r0, #1
   16ebc:	bl	11f7c <fwrite@plt>
   16ec0:	mov	r0, #1
   16ec4:	bl	11fdc <exit@plt>
   16ec8:	andeq	r0, r0, r1
   16ecc:	andeq	r0, r0, r0
   16ed0:	andeq	r0, r0, r1
   16ed4:	andeq	r0, r0, r0

00016ed8 <__generate_code_for_int@@Base>:
   16ed8:	movw	r2, #53280	; 0xd020
   16edc:	add	r3, pc, #36	; 0x24
   16ee0:	movt	r2, #2
   16ee4:	vld1.64	{d16-d17}, [r3]
   16ee8:	vld1.64	{d18-d19}, [r2 :128]
   16eec:	vadd.i64	q8, q9, q8
   16ef0:	vst1.64	{d16-d17}, [r2 :128]
   16ef4:	ldr	r2, [r1, #8]
   16ef8:	ldr	r0, [r0, #4]
   16efc:	movw	r1, #46434	; 0xb562
   16f00:	movt	r1, #1
   16f04:	b	1200c <fprintf@plt>
   16f08:	andeq	r0, r0, r1
   16f0c:	andeq	r0, r0, r0
   16f10:	andeq	r0, r0, r1
   16f14:	andeq	r0, r0, r0

00016f18 <__generate_code_for_unary_boolean_expression@@Base>:
   16f18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16f1c:	add	fp, sp, #24
   16f20:	movw	r4, #53296	; 0xd030
   16f24:	mov	r7, r1
   16f28:	mov	r6, r0
   16f2c:	mov	r8, r3
   16f30:	mov	r9, r2
   16f34:	mov	r2, #1
   16f38:	movt	r4, #2
   16f3c:	ldrd	r0, [r4]
   16f40:	adds	r0, r0, #1
   16f44:	adc	r1, r1, #0
   16f48:	strd	r0, [r4]
   16f4c:	movw	r0, #46607	; 0xb60f
   16f50:	mov	r1, #11
   16f54:	ldr	r3, [r6, #4]
   16f58:	ldr	r5, [r7, #8]
   16f5c:	movt	r0, #1
   16f60:	bl	11f7c <fwrite@plt>
   16f64:	ldr	r3, [r6, #4]
   16f68:	movw	r0, #46438	; 0xb566
   16f6c:	mov	r1, #9
   16f70:	mov	r2, #1
   16f74:	movt	r0, #1
   16f78:	bl	11f7c <fwrite@plt>
   16f7c:	movw	r0, #53280	; 0xd020
   16f80:	add	r1, pc, #176	; 0xb0
   16f84:	movt	r0, #2
   16f88:	vld1.64	{d16-d17}, [r1]
   16f8c:	movw	r1, #46434	; 0xb562
   16f90:	vld1.64	{d18-d19}, [r0 :128]
   16f94:	movt	r1, #1
   16f98:	vadd.i64	q8, q9, q8
   16f9c:	vst1.64	{d16-d17}, [r0 :128]
   16fa0:	ldr	r2, [r5, #8]
   16fa4:	ldr	r0, [r6, #4]
   16fa8:	bl	1200c <fprintf@plt>
   16fac:	ldr	r0, [r7, #16]
   16fb0:	mov	r2, r4
   16fb4:	cmp	r0, #8
   16fb8:	mov	r1, r0
   16fbc:	movwne	r1, #16
   16fc0:	ldr	r1, [r2, r1]!
   16fc4:	adds	r1, r1, #1
   16fc8:	str	r1, [r2]
   16fcc:	ldr	r1, [r2, #4]
   16fd0:	adc	r1, r1, #0
   16fd4:	cmp	r0, #8
   16fd8:	str	r1, [r2, #4]
   16fdc:	bne	1700c <__generate_code_for_unary_boolean_expression@@Base+0xf4>
   16fe0:	ldrd	r0, [r4, #24]
   16fe4:	mov	r2, r9
   16fe8:	mov	r3, r8
   16fec:	adds	r0, r0, #1
   16ff0:	adc	r1, r1, #0
   16ff4:	strd	r0, [r4, #24]
   16ff8:	movw	r1, #46480	; 0xb590
   16ffc:	ldr	r0, [r6, #4]
   17000:	movt	r1, #1
   17004:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   17008:	b	1200c <fprintf@plt>
   1700c:	movw	r0, #49416	; 0xc108
   17010:	mov	r1, #31
   17014:	mov	r2, #1
   17018:	movt	r0, #2
   1701c:	ldr	r3, [r0]
   17020:	movw	r0, #46575	; 0xb5ef
   17024:	movt	r0, #1
   17028:	bl	11f7c <fwrite@plt>
   1702c:	mov	r0, #1
   17030:	bl	11fdc <exit@plt>
   17034:	nop	{0}
   17038:	andeq	r0, r0, r1
   1703c:	andeq	r0, r0, r0
   17040:	andeq	r0, r0, r1
   17044:	andeq	r0, r0, r0

00017048 <__generate_code_for_binary_boolean_expression@@Base>:
   17048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1704c:	add	fp, sp, #28
   17050:	sub	sp, sp, #4
   17054:	vpush	{d8-d9}
   17058:	sub	sp, sp, #8
   1705c:	movw	sl, #53328	; 0xd050
   17060:	mov	r6, r0
   17064:	movw	r0, #49384	; 0xc0e8
   17068:	mov	r7, r1
   1706c:	mov	r1, #0
   17070:	str	r3, [sp, #4]
   17074:	mov	r9, r2
   17078:	mov	r2, #1
   1707c:	movt	r0, #2
   17080:	movt	sl, #2
   17084:	str	r1, [r0]
   17088:	ldrd	r0, [sl]
   1708c:	adds	r0, r0, #1
   17090:	adc	r1, r1, #0
   17094:	strd	r0, [sl]
   17098:	movw	r0, #46377	; 0xb529
   1709c:	mov	r1, #9
   170a0:	ldr	r3, [r6, #4]
   170a4:	ldr	r4, [r7, #8]
   170a8:	ldr	r5, [r7, #12]
   170ac:	movt	r0, #1
   170b0:	bl	11f7c <fwrite@plt>
   170b4:	movw	r8, #53280	; 0xd020
   170b8:	add	r0, pc, #656	; 0x290
   170bc:	movt	r8, #2
   170c0:	vld1.64	{d8-d9}, [r0]
   170c4:	vld1.64	{d16-d17}, [r8 :128]
   170c8:	vadd.i64	q8, q8, q4
   170cc:	vst1.64	{d16-d17}, [r8 :128]
   170d0:	ldr	r2, [r4, #8]
   170d4:	ldr	r0, [r6, #4]
   170d8:	movw	r4, #46434	; 0xb562
   170dc:	movt	r4, #1
   170e0:	mov	r1, r4
   170e4:	bl	1200c <fprintf@plt>
   170e8:	ldr	r1, [r6, #4]
   170ec:	mov	r0, #10
   170f0:	bl	1209c <fputc@plt>
   170f4:	ldr	r3, [r6, #4]
   170f8:	movw	r0, #46438	; 0xb566
   170fc:	mov	r1, #9
   17100:	mov	r2, #1
   17104:	movt	r0, #1
   17108:	bl	11f7c <fwrite@plt>
   1710c:	vld1.64	{d16-d17}, [r8 :128]
   17110:	mov	r1, r4
   17114:	vadd.i64	q8, q8, q4
   17118:	vst1.64	{d16-d17}, [r8 :128]
   1711c:	ldr	r2, [r5, #8]
   17120:	ldr	r0, [r6, #4]
   17124:	bl	1200c <fprintf@plt>
   17128:	ldr	r1, [r6, #4]
   1712c:	mov	r0, #10
   17130:	bl	1209c <fputc@plt>
   17134:	ldr	r3, [r6, #4]
   17138:	movw	r0, #46448	; 0xb570
   1713c:	mov	r1, #12
   17140:	mov	r2, #1
   17144:	movt	r0, #1
   17148:	bl	11f7c <fwrite@plt>
   1714c:	ldr	r0, [r7, #16]
   17150:	cmp	r0, #7
   17154:	bhi	17310 <__generate_code_for_binary_boolean_expression@@Base+0x2c8>
   17158:	add	r1, pc, #0
   1715c:	ldr	pc, [r1, r0, lsl #2]
   17160:	andeq	r7, r1, r0, lsl #3
   17164:	strdeq	r7, [r1], -r0
   17168:			; <UNDEFINED> instruction: 0x000171b8
   1716c:	andeq	r7, r1, r0, ror #4
   17170:	ldrdeq	r7, [r1], -r8
   17174:	ldrdeq	r7, [r1], -r8
   17178:	muleq	r1, r8, r2
   1717c:	andeq	r7, r1, r8, lsr #4
   17180:	movw	r0, #46720	; 0xb680
   17184:	movt	r0, #1
   17188:	add	r1, r0, #4
   1718c:	movw	r0, #49384	; 0xc0e8
   17190:	movt	r0, #2
   17194:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   17198:	ldrd	r0, [sl, #80]	; 0x50
   1719c:	adds	r0, r0, #1
   171a0:	adc	r1, r1, #0
   171a4:	strd	r0, [sl, #80]	; 0x50
   171a8:	movw	r1, #46461	; 0xb57d
   171ac:	ldr	r0, [r6, #4]
   171b0:	movt	r1, #1
   171b4:	b	172cc <__generate_code_for_binary_boolean_expression@@Base+0x284>
   171b8:	movw	r0, #46720	; 0xb680
   171bc:	movt	r0, #1
   171c0:	add	r1, r0, #12
   171c4:	movw	r0, #49384	; 0xc0e8
   171c8:	movt	r0, #2
   171cc:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   171d0:	ldrd	r0, [sl, #96]	; 0x60
   171d4:	adds	r0, r0, #1
   171d8:	adc	r1, r1, #0
   171dc:	strd	r0, [sl, #96]	; 0x60
   171e0:	movw	r1, #46499	; 0xb5a3
   171e4:	ldr	r0, [r6, #4]
   171e8:	movt	r1, #1
   171ec:	b	172cc <__generate_code_for_binary_boolean_expression@@Base+0x284>
   171f0:	movw	r0, #46720	; 0xb680
   171f4:	movt	r0, #1
   171f8:	add	r1, r0, #8
   171fc:	movw	r0, #49384	; 0xc0e8
   17200:	movt	r0, #2
   17204:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   17208:	ldrd	r0, [sl, #88]	; 0x58
   1720c:	adds	r0, r0, #1
   17210:	adc	r1, r1, #0
   17214:	strd	r0, [sl, #88]	; 0x58
   17218:	movw	r1, #46480	; 0xb590
   1721c:	ldr	r0, [r6, #4]
   17220:	movt	r1, #1
   17224:	b	172cc <__generate_code_for_binary_boolean_expression@@Base+0x284>
   17228:	movw	r0, #46720	; 0xb680
   1722c:	movt	r0, #1
   17230:	add	r1, r0, #28
   17234:	movw	r0, #49384	; 0xc0e8
   17238:	movt	r0, #2
   1723c:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   17240:	ldrd	r0, [sl, #120]	; 0x78
   17244:	adds	r0, r0, #1
   17248:	adc	r1, r1, #0
   1724c:	strd	r0, [sl, #120]	; 0x78
   17250:	movw	r1, #46556	; 0xb5dc
   17254:	ldr	r0, [r6, #4]
   17258:	movt	r1, #1
   1725c:	b	172cc <__generate_code_for_binary_boolean_expression@@Base+0x284>
   17260:	movw	r0, #46720	; 0xb680
   17264:	movt	r0, #1
   17268:	add	r1, r0, #16
   1726c:	movw	r0, #49384	; 0xc0e8
   17270:	movt	r0, #2
   17274:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   17278:	ldrd	r0, [sl, #104]	; 0x68
   1727c:	adds	r0, r0, #1
   17280:	adc	r1, r1, #0
   17284:	strd	r0, [sl, #104]	; 0x68
   17288:	movw	r1, #46518	; 0xb5b6
   1728c:	ldr	r0, [r6, #4]
   17290:	movt	r1, #1
   17294:	b	172cc <__generate_code_for_binary_boolean_expression@@Base+0x284>
   17298:	movw	r0, #46720	; 0xb680
   1729c:	movt	r0, #1
   172a0:	add	r1, r0, #24
   172a4:	movw	r0, #49384	; 0xc0e8
   172a8:	movt	r0, #2
   172ac:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   172b0:	ldrd	r0, [sl, #112]	; 0x70
   172b4:	adds	r0, r0, #1
   172b8:	adc	r1, r1, #0
   172bc:	strd	r0, [sl, #112]	; 0x70
   172c0:	movw	r1, #46537	; 0xb5c9
   172c4:	ldr	r0, [r6, #4]
   172c8:	movt	r1, #1
   172cc:	ldr	r3, [sp, #4]
   172d0:	mov	r2, r9
   172d4:	bl	1200c <fprintf@plt>
   172d8:	movw	r0, #46720	; 0xb680
   172dc:	movt	r0, #1
   172e0:	add	r1, r0, #20
   172e4:	movw	r0, #49384	; 0xc0e8
   172e8:	movt	r0, #2
   172ec:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   172f0:	ldrd	r0, [sl, #128]	; 0x80
   172f4:	adds	r0, r0, #1
   172f8:	adc	r1, r1, #0
   172fc:	strd	r0, [sl, #128]	; 0x80
   17300:	sub	sp, fp, #48	; 0x30
   17304:	vpop	{d8-d9}
   17308:	add	sp, sp, #4
   1730c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17310:	movw	r0, #49384	; 0xc0e8
   17314:	movw	r1, #46720	; 0xb680
   17318:	movt	r0, #2
   1731c:	movt	r1, #1
   17320:	bl	17360 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   17324:	movw	r0, #49416	; 0xc108
   17328:	mov	r1, #31
   1732c:	mov	r2, #1
   17330:	movt	r0, #2
   17334:	ldr	r3, [r0]
   17338:	movw	r0, #46575	; 0xb5ef
   1733c:	movt	r0, #1
   17340:	bl	11f7c <fwrite@plt>
   17344:	mov	r0, #1
   17348:	bl	11fdc <exit@plt>
   1734c:	nop	{0}
   17350:	andeq	r0, r0, r1
   17354:	andeq	r0, r0, r0
   17358:	andeq	r0, r0, r1
   1735c:	andeq	r0, r0, r0
   17360:	ldr	r0, [r0]
   17364:	cmn	r0, #1
   17368:	ldrne	r0, [r1, r0, lsl #2]
   1736c:	cmpne	r0, #0
   17370:	bne	17378 <__generate_code_for_binary_boolean_expression@@Base+0x330>
   17374:	bx	lr
   17378:	ldrd	r2, [r0]
   1737c:	adds	r2, r2, #1
   17380:	adc	r3, r3, #0
   17384:	strd	r2, [r0]
   17388:	bx	lr
   1738c:	push	{r4, r5, r6, lr}
   17390:	sub	sp, sp, #8
   17394:	movw	r0, #47136	; 0xb820
   17398:	movw	r1, #42359	; 0xa577
   1739c:	movw	r2, #11716	; 0x2dc4
   173a0:	movt	r0, #1
   173a4:	movt	r1, #1
   173a8:	movt	r2, #2155	; 0x86b
   173ac:	bl	17534 <__generate_code_for_binary_boolean_expression@@Base+0x4ec>
   173b0:	movw	r0, #47024	; 0xb7b0
   173b4:	movw	r6, #46752	; 0xb6a0
   173b8:	mov	r5, #0
   173bc:	movt	r0, #1
   173c0:	movt	r6, #1
   173c4:	add	r4, r0, #4
   173c8:	mov	r3, r6
   173cc:	ldr	r0, [r3, r5]!
   173d0:	ldr	r1, [r3, #16]
   173d4:	str	r1, [sp]
   173d8:	ldmib	r3, {r1, r2}
   173dc:	ldrb	r3, [r3, #12]
   173e0:	bl	17c98 <__generate_code_for_binary_boolean_expression@@Base+0xc50>
   173e4:	ldrd	r0, [r4, #-4]
   173e8:	bl	1854c <__generate_code_for_binary_boolean_expression@@Base+0x1504>
   173ec:	add	r5, r5, #20
   173f0:	add	r4, r4, #8
   173f4:	cmp	r5, #260	; 0x104
   173f8:	bne	173c8 <__generate_code_for_binary_boolean_expression@@Base+0x380>
   173fc:	bl	18cc8 <__generate_code_for_binary_boolean_expression@@Base+0x1c80>
   17400:	add	sp, sp, #8
   17404:	pop	{r4, r5, r6, lr}
   17408:	b	19a34 <__generate_code_for_binary_boolean_expression@@Base+0x29ec>
   1740c:	push	{fp, lr}
   17410:	bl	1738c <__generate_code_for_binary_boolean_expression@@Base+0x344>
   17414:	movw	r0, #53152	; 0xcfa0
   17418:	vmov.i32	q8, #0	; 0x00000000
   1741c:	mov	r1, #0
   17420:	movt	r0, #2
   17424:	add	r2, r0, #16
   17428:	str	r1, [r0, #32]
   1742c:	vst1.64	{d16-d17}, [r2 :128]
   17430:	movw	r2, #53056	; 0xcf40
   17434:	movt	r2, #2
   17438:	add	r3, r2, #64	; 0x40
   1743c:	str	r1, [r2, #80]	; 0x50
   17440:	vst1.64	{d16-d17}, [r3 :128]
   17444:	add	r3, r2, #48	; 0x30
   17448:	vst1.64	{d16-d17}, [r3 :128]
   1744c:	add	r3, r2, #32
   17450:	vst1.64	{d16-d17}, [r3 :128]
   17454:	add	r3, r2, #16
   17458:	vst1.64	{d16-d17}, [r3 :128]
   1745c:	movw	r3, #52960	; 0xcee0
   17460:	movt	r3, #2
   17464:	vst1.64	{d16-d17}, [r3 :128]
   17468:	movw	r3, #52944	; 0xced0
   1746c:	movt	r3, #2
   17470:	vst1.64	{d16-d17}, [r3 :128]
   17474:	movw	r3, #52976	; 0xcef0
   17478:	movt	r3, #2
   1747c:	vst1.64	{d16-d17}, [r3 :128]
   17480:	movw	r3, #52992	; 0xcf00
   17484:	movt	r3, #2
   17488:	vst1.64	{d16-d17}, [r3 :128]
   1748c:	movw	r3, #53040	; 0xcf30
   17490:	movt	r3, #2
   17494:	vst1.64	{d16-d17}, [r3 :128]
   17498:	mov	r3, #36	; 0x24
   1749c:	vst1.64	{d16-d17}, [r0 :128], r3
   174a0:	str	r1, [r0]
   174a4:	mov	r0, #84	; 0x54
   174a8:	vst1.64	{d16-d17}, [r2 :128], r0
   174ac:	movw	r0, #53008	; 0xcf10
   174b0:	movt	r0, #2
   174b4:	str	r1, [r2]
   174b8:	mov	r2, #136	; 0x88
   174bc:	vst1.64	{d16-d17}, [r0 :128]!
   174c0:	vst1.64	{d16-d17}, [r0 :128]
   174c4:	movw	r0, #53200	; 0xcfd0
   174c8:	movt	r0, #2
   174cc:	add	r1, r0, #16
   174d0:	vst1.64	{d16-d17}, [r1 :128]
   174d4:	mov	r1, #32
   174d8:	vst1.64	{d16-d17}, [r0 :128], r1
   174dc:	mov	r1, #0
   174e0:	vst1.64	{d16-d17}, [r0 :128]
   174e4:	movw	r0, #53248	; 0xd000
   174e8:	movt	r0, #2
   174ec:	vst1.64	{d16-d17}, [r0 :128]!
   174f0:	vst1.64	{d16-d17}, [r0 :128]
   174f4:	movw	r0, #53280	; 0xd020
   174f8:	movt	r0, #2
   174fc:	vst1.64	{d16-d17}, [r0 :128]
   17500:	movw	r0, #53296	; 0xd030
   17504:	movt	r0, #2
   17508:	vst1.64	{d16-d17}, [r0 :128]!
   1750c:	vst1.64	{d16-d17}, [r0 :128]
   17510:	movw	r0, #53328	; 0xd050
   17514:	movt	r0, #2
   17518:	bl	1203c <memset@plt>
   1751c:	pop	{fp, pc}
   17520:	movw	r0, #29580	; 0x738c
   17524:	movw	r1, #29708	; 0x740c
   17528:	movt	r0, #1
   1752c:	movt	r1, #1
   17530:	b	19ee4 <__gcov_flush@@Base+0xb4>
   17534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17538:	add	fp, sp, #28
   1753c:	sub	sp, sp, #36	; 0x24
   17540:	mov	r9, r1
   17544:	mov	r6, r0
   17548:	add	r0, sp, #28
   1754c:	add	r1, sp, #32
   17550:	mov	r8, r2
   17554:	bl	1a290 <__gcov_flush@@Base+0x460>
   17558:	cmp	r0, #0
   1755c:	beq	175a0 <__generate_code_for_binary_boolean_expression@@Base+0x558>
   17560:	mov	r4, r0
   17564:	mov	r0, r6
   17568:	ldr	r5, [sp, #32]
   1756c:	bl	11fe8 <strlen@plt>
   17570:	add	r0, r5, r0
   17574:	add	r0, r0, #2
   17578:	bl	11fa0 <malloc@plt>
   1757c:	mov	r7, r0
   17580:	ldr	r0, [sp, #28]
   17584:	mov	r1, r6
   17588:	mov	r2, r4
   1758c:	str	r0, [sp]
   17590:	mov	r0, r7
   17594:	mov	r3, r5
   17598:	bl	1a324 <__gcov_flush@@Base+0x4f4>
   1759c:	b	175ac <__generate_code_for_binary_boolean_expression@@Base+0x564>
   175a0:	mov	r0, r6
   175a4:	bl	11f64 <strdup@plt>
   175a8:	mov	r7, r0
   175ac:	ldr	r0, [pc, #1548]	; 17bc0 <__generate_code_for_binary_boolean_expression@@Base+0xb78>
   175b0:	ldr	r6, [pc, #1548]	; 17bc4 <__generate_code_for_binary_boolean_expression@@Base+0xb7c>
   175b4:	mov	r1, #2
   175b8:	add	r0, pc, r0
   175bc:	add	r6, pc, r6
   175c0:	str	r7, [r0]
   175c4:	mov	r0, r7
   175c8:	mov	r4, #0
   175cc:	strb	r4, [r6]
   175d0:	bl	11f88 <open64@plt>
   175d4:	ldr	r5, [pc, #1516]	; 17bc8 <__generate_code_for_binary_boolean_expression@@Base+0xb80>
   175d8:	cmn	r0, #1
   175dc:	add	r5, pc, r5
   175e0:	str	r0, [r5]
   175e4:	beq	175f4 <__generate_code_for_binary_boolean_expression@@Base+0x5ac>
   175e8:	ldr	r6, [pc, #1500]	; 17bcc <__generate_code_for_binary_boolean_expression@@Base+0xb84>
   175ec:	add	r6, pc, r6
   175f0:	b	17650 <__generate_code_for_binary_boolean_expression@@Base+0x608>
   175f4:	mov	r0, #1
   175f8:	strb	r0, [r6]
   175fc:	ldr	r0, [pc, #1508]	; 17be8 <__generate_code_for_binary_boolean_expression@@Base+0xba0>
   17600:	mov	r1, #66	; 0x42
   17604:	mov	r2, #420	; 0x1a4
   17608:	ldr	r0, [pc, r0]
   1760c:	bl	11f88 <open64@plt>
   17610:	ldr	r6, [pc, #1492]	; 17bec <__generate_code_for_binary_boolean_expression@@Base+0xba4>
   17614:	cmn	r0, #1
   17618:	str	r0, [r5]
   1761c:	add	r6, pc, r6
   17620:	bne	17650 <__generate_code_for_binary_boolean_expression@@Base+0x608>
   17624:	ldr	r0, [pc, #1476]	; 17bf0 <__generate_code_for_binary_boolean_expression@@Base+0xba8>
   17628:	ldr	r0, [pc, r0]
   1762c:	bl	19ff8 <__gcov_flush@@Base+0x1c8>
   17630:	ldr	r0, [pc, #1468]	; 17bf4 <__generate_code_for_binary_boolean_expression@@Base+0xbac>
   17634:	mov	r1, #66	; 0x42
   17638:	mov	r2, #420	; 0x1a4
   1763c:	ldr	r0, [pc, r0]
   17640:	bl	11f88 <open64@plt>
   17644:	cmn	r0, #1
   17648:	str	r0, [r5]
   1764c:	beq	17b78 <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   17650:	str	r9, [sp, #20]
   17654:	bl	1a0c4 <__gcov_flush@@Base+0x294>
   17658:	ldr	r0, [pc, #1392]	; 17bd0 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   1765c:	mov	r1, r6
   17660:	ldr	r0, [pc, r0]
   17664:	bl	11ef8 <fdopen@plt>
   17668:	ldr	r5, [pc, #1380]	; 17bd4 <__generate_code_for_binary_boolean_expression@@Base+0xb8c>
   1766c:	ldr	r9, [pc, #1380]	; 17bd8 <__generate_code_for_binary_boolean_expression@@Base+0xb90>
   17670:	ldr	r1, [pc, #1380]	; 17bdc <__generate_code_for_binary_boolean_expression@@Base+0xb94>
   17674:	ldr	sl, [pc, #1380]	; 17be0 <__generate_code_for_binary_boolean_expression@@Base+0xb98>
   17678:	add	r5, pc, r5
   1767c:	add	r9, pc, r9
   17680:	add	r1, pc, r1
   17684:	add	sl, pc, sl
   17688:	str	r4, [r5]
   1768c:	str	r4, [r5, #4]
   17690:	str	r4, [r9]
   17694:	str	r4, [r9, #4]
   17698:	str	r0, [r1]
   1769c:	str	r4, [sl]
   176a0:	ldr	r6, [pc, #1340]	; 17be4 <__generate_code_for_binary_boolean_expression@@Base+0xb9c>
   176a4:	ldr	r2, [pc, #1292]	; 17bb8 <__generate_code_for_binary_boolean_expression@@Base+0xb70>
   176a8:	str	r8, [sp, #24]
   176ac:	add	r6, pc, r6
   176b0:	ldrb	r1, [r6]
   176b4:	mov	r6, r2
   176b8:	cmp	r1, #1
   176bc:	bne	176e4 <__generate_code_for_binary_boolean_expression@@Base+0x69c>
   176c0:	mov	r0, #131072	; 0x20000
   176c4:	mov	r4, #131072	; 0x20000
   176c8:	bl	11fa0 <malloc@plt>
   176cc:	mov	r1, #0
   176d0:	str	r4, [r5]
   176d4:	str	r1, [r5, #4]
   176d8:	mov	r8, r0
   176dc:	str	r0, [sl]
   176e0:	b	17874 <__generate_code_for_binary_boolean_expression@@Base+0x82c>
   176e4:	mov	r1, #0
   176e8:	mov	r2, #2
   176ec:	mov	r8, #0
   176f0:	bl	120cc <fseek@plt>
   176f4:	ldr	r0, [pc, #1288]	; 17c04 <__generate_code_for_binary_boolean_expression@@Base+0xbbc>
   176f8:	ldr	r0, [pc, r0]
   176fc:	bl	11f4c <ftell@plt>
   17700:	mov	r2, r0
   17704:	ldr	r0, [pc, #1276]	; 17c08 <__generate_code_for_binary_boolean_expression@@Base+0xbc0>
   17708:	asr	r3, r2, #31
   1770c:	add	r0, pc, r0
   17710:	cmp	r2, #0
   17714:	strd	r2, [r0]
   17718:	beq	177e8 <__generate_code_for_binary_boolean_expression@@Base+0x7a0>
   1771c:	ldr	r0, [pc, #1256]	; 17c0c <__generate_code_for_binary_boolean_expression@@Base+0xbc4>
   17720:	mov	r1, r2
   17724:	mov	r2, #3
   17728:	mov	r3, #1
   1772c:	ldr	r0, [pc, r0]
   17730:	str	r8, [sp, #8]
   17734:	str	r8, [sp, #12]
   17738:	str	r0, [sp]
   1773c:	mov	r0, #0
   17740:	bl	11f40 <mmap64@plt>
   17744:	ldr	r1, [pc, #1220]	; 17c10 <__generate_code_for_binary_boolean_expression@@Base+0xbc8>
   17748:	cmn	r0, #1
   1774c:	add	r1, pc, r1
   17750:	str	r0, [r1]
   17754:	beq	177b0 <__generate_code_for_binary_boolean_expression@@Base+0x768>
   17758:	ldr	r1, [pc, #1232]	; 17c30 <__generate_code_for_binary_boolean_expression@@Base+0xbe8>
   1775c:	add	r1, pc, r1
   17760:	ldrb	r1, [r1]
   17764:	cmp	r1, #0
   17768:	beq	17774 <__generate_code_for_binary_boolean_expression@@Base+0x72c>
   1776c:	mov	r8, r0
   17770:	b	17880 <__generate_code_for_binary_boolean_expression@@Base+0x838>
   17774:	ldr	ip, [r9, #4]
   17778:	ldr	r5, [pc, #1236]	; 17c54 <__generate_code_for_binary_boolean_expression@@Base+0xc0c>
   1777c:	mov	r4, r0
   17780:	lsr	r2, r6, #16
   17784:	ldr	r5, [pc, r5]
   17788:	lsr	r1, r6, #24
   1778c:	lsr	r3, r6, #8
   17790:	strb	r6, [r4, r5]!
   17794:	strb	r2, [r4, #2]
   17798:	adds	r2, r5, #4
   1779c:	adc	ip, ip, #0
   177a0:	strb	r1, [r4, #3]
   177a4:	strb	r3, [r4, #1]
   177a8:	stm	r9, {r2, ip}
   177ac:	b	17948 <__generate_code_for_binary_boolean_expression@@Base+0x900>
   177b0:	bl	12018 <__errno_location@plt>
   177b4:	ldr	r1, [pc, #1112]	; 17c14 <__generate_code_for_binary_boolean_expression@@Base+0xbcc>
   177b8:	ldr	r1, [pc, r1]
   177bc:	ldr	r0, [r0]
   177c0:	ldr	r4, [r1]
   177c4:	ldr	r7, [pc, #1100]	; 17c18 <__generate_code_for_binary_boolean_expression@@Base+0xbd0>
   177c8:	ldr	r7, [pc, r7]
   177cc:	bl	11fb8 <strerror@plt>
   177d0:	ldr	r1, [pc, #1092]	; 17c1c <__generate_code_for_binary_boolean_expression@@Base+0xbd4>
   177d4:	mov	r3, r0
   177d8:	mov	r0, r4
   177dc:	add	r1, pc, r1
   177e0:	mov	r2, r7
   177e4:	bl	1200c <fprintf@plt>
   177e8:	str	r8, [r5]
   177ec:	str	r8, [r5, #4]
   177f0:	ldr	r0, [pc, #1064]	; 17c20 <__generate_code_for_binary_boolean_expression@@Base+0xbd8>
   177f4:	mov	r2, #16646144	; 0xfe0000
   177f8:	orr	r2, r2, #-16777216	; 0xff000000
   177fc:	add	r0, pc, r0
   17800:	mvn	r3, #0
   17804:	str	r8, [r0]
   17808:	ldr	r1, [pc, #1044]	; 17c24 <__generate_code_for_binary_boolean_expression@@Base+0xbdc>
   1780c:	mov	r0, #1
   17810:	add	r1, pc, r1
   17814:	strb	r0, [r1]
   17818:	ldr	r0, [r9, #4]
   1781c:	ldr	r1, [pc, #1028]	; 17c28 <__generate_code_for_binary_boolean_expression@@Base+0xbe0>
   17820:	eor	r3, r0, r3
   17824:	ldr	r1, [pc, r1]
   17828:	eor	r2, r1, r2
   1782c:	orrs	r2, r2, r3
   17830:	beq	17870 <__generate_code_for_binary_boolean_expression@@Base+0x828>
   17834:	ldr	r2, [pc, #896]	; 17bbc <__generate_code_for_binary_boolean_expression@@Base+0xb74>
   17838:	adds	r1, r1, r2
   1783c:	adc	r0, r0, #0
   17840:	mvn	r2, #0
   17844:	and	r7, r0, r2
   17848:	mov	r0, #16646144	; 0xfe0000
   1784c:	orr	r0, r0, #-16777216	; 0xff000000
   17850:	and	r4, r1, r0
   17854:	mov	r0, r4
   17858:	bl	11fa0 <malloc@plt>
   1785c:	stm	r5, {r4, r7}
   17860:	mov	r8, r0
   17864:	ldr	r0, [pc, #960]	; 17c2c <__generate_code_for_binary_boolean_expression@@Base+0xbe4>
   17868:	add	r0, pc, r0
   1786c:	str	r8, [r0]
   17870:	mov	r0, r8
   17874:	mov	r1, #0
   17878:	mov	r2, #131072	; 0x20000
   1787c:	bl	1203c <memset@plt>
   17880:	ldr	r0, [r9, #4]
   17884:	ldr	r1, [pc, #936]	; 17c34 <__generate_code_for_binary_boolean_expression@@Base+0xbec>
   17888:	mov	sl, r5
   1788c:	mov	r7, #7
   17890:	orr	r7, r7, #131072	; 0x20000
   17894:	ldr	r1, [pc, r1]
   17898:	ldr	r4, [r5, #4]
   1789c:	ldr	r5, [pc, #916]	; 17c38 <__generate_code_for_binary_boolean_expression@@Base+0xbf0>
   178a0:	adds	r2, r1, #4
   178a4:	adc	r3, r0, #0
   178a8:	ldr	r5, [pc, r5]
   178ac:	subs	r2, r5, r2
   178b0:	sbcs	r2, r4, r3
   178b4:	bcs	1798c <__generate_code_for_binary_boolean_expression@@Base+0x944>
   178b8:	adds	r1, r1, r7
   178bc:	adc	r0, r0, #0
   178c0:	subs	r1, r1, #4
   178c4:	sbc	r0, r0, #0
   178c8:	mvn	r2, #0
   178cc:	and	r5, r0, r2
   178d0:	mov	r0, #16646144	; 0xfe0000
   178d4:	orr	r0, r0, #-16777216	; 0xff000000
   178d8:	and	r4, r1, r0
   178dc:	mov	r0, r8
   178e0:	mov	r1, r4
   178e4:	bl	11f70 <realloc@plt>
   178e8:	strd	r4, [sl]
   178ec:	ldr	r1, [pc, #844]	; 17c40 <__generate_code_for_binary_boolean_expression@@Base+0xbf8>
   178f0:	mov	r7, r6
   178f4:	lsr	r2, r6, #24
   178f8:	add	r1, pc, r1
   178fc:	mov	r3, r0
   17900:	str	r0, [r1]
   17904:	ldr	r6, [pc, #824]	; 17c44 <__generate_code_for_binary_boolean_expression@@Base+0xbfc>
   17908:	ldr	r1, [r9, #4]
   1790c:	lsr	r5, r7, #16
   17910:	add	r6, pc, r6
   17914:	ldrb	r6, [r6]
   17918:	ldr	r4, [pc, #808]	; 17c48 <__generate_code_for_binary_boolean_expression@@Base+0xc00>
   1791c:	ldr	r4, [pc, r4]
   17920:	strb	r7, [r3, r4]!
   17924:	strb	r2, [r3, #3]
   17928:	lsr	r2, r7, #8
   1792c:	strb	r2, [r3, #1]
   17930:	adds	r2, r4, #4
   17934:	adc	ip, r1, #0
   17938:	cmp	r6, #1
   1793c:	strb	r5, [r3, #2]
   17940:	stm	r9, {r2, ip}
   17944:	beq	179cc <__generate_code_for_binary_boolean_expression@@Base+0x984>
   17948:	ldr	r4, [sp, #20]
   1794c:	mov	r5, r0
   17950:	mov	lr, r9
   17954:	ldrb	r1, [r4]
   17958:	ldrb	r3, [r4, #1]
   1795c:	ldrb	r7, [r4, #2]
   17960:	ldrb	r6, [r4, #3]
   17964:	strb	r1, [r5, r2]!
   17968:	adds	r4, r2, #4
   1796c:	adc	r1, ip, #0
   17970:	strb	r6, [r5, #3]
   17974:	strb	r7, [r5, #2]
   17978:	strb	r3, [r5, #1]
   1797c:	str	r4, [lr]
   17980:	str	r1, [lr, #4]
   17984:	ldr	r6, [sp, #24]
   17988:	b	17b48 <__generate_code_for_binary_boolean_expression@@Base+0xb00>
   1798c:	ldr	r1, [r9, #4]
   17990:	ldr	r4, [pc, #676]	; 17c3c <__generate_code_for_binary_boolean_expression@@Base+0xbf4>
   17994:	mov	r5, r6
   17998:	lsr	r0, r6, #24
   1799c:	ldr	r4, [pc, r4]
   179a0:	lsr	r2, r6, #16
   179a4:	lsr	r3, r6, #8
   179a8:	mov	r6, r8
   179ac:	strb	r5, [r6, r4]!
   179b0:	strb	r2, [r6, #2]
   179b4:	adds	r2, r4, #4
   179b8:	adc	ip, r1, #0
   179bc:	strb	r0, [r6, #3]
   179c0:	strb	r3, [r6, #1]
   179c4:	stm	r9, {r2, ip}
   179c8:	mov	r0, r8
   179cc:	ldr	r7, [sl, #4]
   179d0:	ldr	r3, [pc, #628]	; 17c4c <__generate_code_for_binary_boolean_expression@@Base+0xc04>
   179d4:	adds	r6, r4, #8
   179d8:	mov	r8, r9
   179dc:	adc	r5, r1, #0
   179e0:	ldr	r3, [pc, r3]
   179e4:	mov	r9, sl
   179e8:	subs	r3, r3, r6
   179ec:	sbcs	r3, r7, r5
   179f0:	bcs	17a94 <__generate_code_for_binary_boolean_expression@@Base+0xa4c>
   179f4:	mov	r2, #7
   179f8:	orr	r2, r2, #131072	; 0x20000
   179fc:	adds	r2, r4, r2
   17a00:	adc	r4, r1, #0
   17a04:	mov	r1, #16646144	; 0xfe0000
   17a08:	orr	r1, r1, #-16777216	; 0xff000000
   17a0c:	and	r6, r2, r1
   17a10:	mov	r1, r6
   17a14:	bl	11f70 <realloc@plt>
   17a18:	ldr	sl, [pc, #568]	; 17c58 <__generate_code_for_binary_boolean_expression@@Base+0xc10>
   17a1c:	mvn	r1, #0
   17a20:	and	r7, r4, r1
   17a24:	add	sl, pc, sl
   17a28:	strd	r6, [r9]
   17a2c:	str	r0, [sl]
   17a30:	ldr	r1, [pc, #548]	; 17c5c <__generate_code_for_binary_boolean_expression@@Base+0xc14>
   17a34:	ldr	r2, [sp, #20]
   17a38:	ldr	ip, [r8, #4]
   17a3c:	add	r1, pc, r1
   17a40:	mov	lr, r8
   17a44:	ldrb	r3, [r1]
   17a48:	ldrb	r1, [r2]
   17a4c:	ldrb	r7, [r2, #1]
   17a50:	ldrb	r6, [r2, #2]
   17a54:	ldrb	r5, [r2, #3]
   17a58:	ldr	r2, [pc, #512]	; 17c60 <__generate_code_for_binary_boolean_expression@@Base+0xc18>
   17a5c:	ldr	r2, [pc, r2]
   17a60:	adds	r4, r2, #4
   17a64:	strb	r1, [r0, r2]
   17a68:	add	r1, r0, r2
   17a6c:	strb	r5, [r1, #3]
   17a70:	strb	r6, [r1, #2]
   17a74:	strb	r7, [r1, #1]
   17a78:	adc	r1, ip, #0
   17a7c:	str	r4, [lr]
   17a80:	str	r1, [lr, #4]
   17a84:	ldr	r6, [sp, #24]
   17a88:	cmp	r3, #1
   17a8c:	beq	17adc <__generate_code_for_binary_boolean_expression@@Base+0xa94>
   17a90:	b	17b48 <__generate_code_for_binary_boolean_expression@@Base+0xb00>
   17a94:	ldr	r6, [sp, #20]
   17a98:	mov	r5, r0
   17a9c:	adds	r4, r2, #4
   17aa0:	ldrb	r1, [r6]
   17aa4:	ldrb	r3, [r6, #1]
   17aa8:	ldrb	r7, [r6, #2]
   17aac:	ldrb	r6, [r6, #3]
   17ab0:	strb	r1, [r5, r2]!
   17ab4:	adc	r1, ip, #0
   17ab8:	strb	r3, [r5, #1]
   17abc:	mov	r3, r8
   17ac0:	strb	r6, [r5, #3]
   17ac4:	strb	r7, [r5, #2]
   17ac8:	str	r4, [r3]
   17acc:	str	r1, [r3, #4]
   17ad0:	ldr	r6, [sp, #24]
   17ad4:	ldr	sl, [pc, #372]	; 17c50 <__generate_code_for_binary_boolean_expression@@Base+0xc08>
   17ad8:	add	sl, pc, sl
   17adc:	ldr	r7, [r9, #4]
   17ae0:	ldr	r5, [pc, #380]	; 17c64 <__generate_code_for_binary_boolean_expression@@Base+0xc1c>
   17ae4:	adds	r3, r2, #8
   17ae8:	adc	lr, ip, #0
   17aec:	ldr	r5, [pc, r5]
   17af0:	subs	r3, r5, r3
   17af4:	sbcs	r3, r7, lr
   17af8:	bcs	17b44 <__generate_code_for_binary_boolean_expression@@Base+0xafc>
   17afc:	mov	r1, #7
   17b00:	orr	r1, r1, #131072	; 0x20000
   17b04:	adds	r1, r2, r1
   17b08:	adc	r2, ip, #0
   17b0c:	mvn	r3, #0
   17b10:	and	r5, r2, r3
   17b14:	mov	r2, #16646144	; 0xfe0000
   17b18:	orr	r2, r2, #-16777216	; 0xff000000
   17b1c:	and	r4, r1, r2
   17b20:	mov	r1, r4
   17b24:	bl	11f70 <realloc@plt>
   17b28:	strd	r4, [r9]
   17b2c:	str	r0, [sl]
   17b30:	ldr	r1, [r8, #4]
   17b34:	ldr	r4, [pc, #300]	; 17c68 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   17b38:	mov	lr, r8
   17b3c:	ldr	r4, [pc, r4]
   17b40:	b	17b48 <__generate_code_for_binary_boolean_expression@@Base+0xb00>
   17b44:	mov	lr, r8
   17b48:	lsr	r2, r6, #24
   17b4c:	strb	r6, [r0, r4]!
   17b50:	lsr	r3, r6, #16
   17b54:	lsr	r7, r6, #8
   17b58:	strb	r2, [r0, #3]
   17b5c:	strb	r3, [r0, #2]
   17b60:	strb	r7, [r0, #1]
   17b64:	adds	r0, r4, #4
   17b68:	adc	r1, r1, #0
   17b6c:	strd	r0, [lr]
   17b70:	sub	sp, fp, #28
   17b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b78:	bl	12018 <__errno_location@plt>
   17b7c:	ldr	r1, [pc, #116]	; 17bf8 <__generate_code_for_binary_boolean_expression@@Base+0xbb0>
   17b80:	ldr	r1, [pc, r1]
   17b84:	ldr	r0, [r0]
   17b88:	ldr	r4, [r1]
   17b8c:	ldr	r5, [pc, #104]	; 17bfc <__generate_code_for_binary_boolean_expression@@Base+0xbb4>
   17b90:	ldr	r5, [pc, r5]
   17b94:	bl	11fb8 <strerror@plt>
   17b98:	ldr	r1, [pc, #96]	; 17c00 <__generate_code_for_binary_boolean_expression@@Base+0xbb8>
   17b9c:	mov	r3, r0
   17ba0:	mov	r0, r4
   17ba4:	add	r1, pc, r1
   17ba8:	mov	r2, r5
   17bac:	bl	1200c <fprintf@plt>
   17bb0:	sub	sp, fp, #28
   17bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bb8:	strbvs	r6, [r3, -r1, ror #8]!
   17bbc:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   17bc0:	andeq	r5, r1, r8, lsl fp
   17bc4:	andeq	r5, r1, r8, lsl fp
   17bc8:	andeq	r4, r1, r8, lsl #22
   17bcc:	strdeq	r4, [r0], -ip
   17bd0:	andeq	r4, r1, r4, lsl #21
   17bd4:	andeq	r5, r1, r8, ror #20
   17bd8:	andeq	r5, r1, ip, ror #20
   17bdc:	andeq	r5, r1, r8, asr sl
   17be0:	andeq	r5, r1, r8, asr sl
   17be4:	andeq	r5, r1, r8, lsr #20
   17be8:	andeq	r5, r1, r8, asr #21
   17bec:	ldrdeq	r4, [r0], -r0
   17bf0:	andeq	r5, r1, r8, lsr #21
   17bf4:	muleq	r1, r4, sl
   17bf8:	andeq	r4, r1, r8, lsr r5
   17bfc:	andeq	r5, r1, r0, asr #10
   17c00:	andeq	r3, r0, ip, asr #28
   17c04:	andeq	r5, r1, r0, ror #19
   17c08:	strdeq	r5, [r1], -r4
   17c0c:			; <UNDEFINED> instruction: 0x000149b8
   17c10:	muleq	r1, r0, r9
   17c14:	andeq	r4, r1, r0, lsl #18
   17c18:	andeq	r5, r1, r8, lsl #18
   17c1c:	andeq	r4, r0, lr, ror #6
   17c20:	andeq	r5, r1, r0, ror #17
   17c24:	andeq	r5, r1, r4, asr #17
   17c28:	andeq	r5, r1, r4, asr #17
   17c2c:	andeq	r5, r1, r4, ror r8
   17c30:	andeq	r5, r1, r8, ror r9
   17c34:	andeq	r5, r1, r4, asr r8
   17c38:	andeq	r5, r1, r8, lsr r8
   17c3c:	andeq	r5, r1, ip, asr #14
   17c40:	andeq	r5, r1, r4, ror #15
   17c44:	andeq	r5, r1, r4, asr #15
   17c48:	andeq	r5, r1, ip, asr #15
   17c4c:	andeq	r5, r1, r0, lsl #14
   17c50:	andeq	r5, r1, r4, lsl #12
   17c54:	andeq	r5, r1, r4, ror #18
   17c58:			; <UNDEFINED> instruction: 0x000156b8
   17c5c:	muleq	r1, r8, r6
   17c60:	andeq	r5, r1, ip, lsl #13
   17c64:	strdeq	r5, [r1], -r4
   17c68:	andeq	r5, r1, ip, lsr #11
   17c6c:	ldr	r0, [r0]
   17c70:	cmn	r0, #1
   17c74:	beq	17c94 <__generate_code_for_binary_boolean_expression@@Base+0xc4c>
   17c78:	ldr	r0, [r1, r0, lsl #2]
   17c7c:	cmp	r0, #0
   17c80:	bxeq	lr
   17c84:	ldrd	r2, [r0]
   17c88:	adds	r2, r2, #1
   17c8c:	adc	r3, r3, #0
   17c90:	strd	r2, [r0]
   17c94:	bx	lr
   17c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c9c:	add	fp, sp, #28
   17ca0:	sub	sp, sp, #12
   17ca4:	mov	r9, r0
   17ca8:	ldr	r0, [pc, #2000]	; 18480 <__generate_code_for_binary_boolean_expression@@Base+0x1438>
   17cac:	mov	sl, #2
   17cb0:	cmp	r3, #0
   17cb4:	movne	sl, #3
   17cb8:	ldr	r0, [pc, r0]
   17cbc:	cmp	r0, #0
   17cc0:	beq	18478 <__generate_code_for_binary_boolean_expression@@Base+0x1430>
   17cc4:	stm	sp, {r2, r3}
   17cc8:	ldr	r0, [pc, #1972]	; 18484 <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   17ccc:	str	r1, [sp, #8]
   17cd0:	add	r0, pc, r0
   17cd4:	ldrb	r0, [r0]
   17cd8:	cmp	r0, #1
   17cdc:	bne	17d6c <__generate_code_for_binary_boolean_expression@@Base+0xd24>
   17ce0:	ldr	r0, [pc, #1952]	; 18488 <__generate_code_for_binary_boolean_expression@@Base+0x1440>
   17ce4:	ldr	r4, [pc, #1952]	; 1848c <__generate_code_for_binary_boolean_expression@@Base+0x1444>
   17ce8:	add	r0, pc, r0
   17cec:	add	r4, pc, r4
   17cf0:	ldr	r0, [r0, #4]
   17cf4:	ldr	r5, [pc, #1940]	; 18490 <__generate_code_for_binary_boolean_expression@@Base+0x1448>
   17cf8:	ldr	r5, [pc, r5]
   17cfc:	ldr	r7, [r4, #4]
   17d00:	ldr	r6, [pc, #1932]	; 18494 <__generate_code_for_binary_boolean_expression@@Base+0x144c>
   17d04:	adds	r2, r5, #4
   17d08:	adc	r3, r0, #0
   17d0c:	ldr	r6, [pc, r6]
   17d10:	subs	r2, r6, r2
   17d14:	sbcs	r2, r7, r3
   17d18:	bcs	17d6c <__generate_code_for_binary_boolean_expression@@Base+0xd24>
   17d1c:	mov	r2, #7
   17d20:	orr	r2, r2, #131072	; 0x20000
   17d24:	adds	r1, r5, r2
   17d28:	adc	r0, r0, #0
   17d2c:	subs	r1, r1, #4
   17d30:	sbc	r0, r0, #0
   17d34:	mvn	r2, #0
   17d38:	and	r7, r0, r2
   17d3c:	mov	r0, #16646144	; 0xfe0000
   17d40:	orr	r0, r0, #-16777216	; 0xff000000
   17d44:	ldr	r8, [pc, #1868]	; 18498 <__generate_code_for_binary_boolean_expression@@Base+0x1450>
   17d48:	and	r6, r1, r0
   17d4c:	ldr	r0, [pc, #1864]	; 1849c <__generate_code_for_binary_boolean_expression@@Base+0x1454>
   17d50:	mov	r1, r6
   17d54:	add	r8, pc, r8
   17d58:	ldr	r0, [pc, r0]
   17d5c:	bl	11f70 <realloc@plt>
   17d60:	ldr	r1, [sp, #8]
   17d64:	strd	r6, [r4]
   17d68:	str	r0, [r8]
   17d6c:	ldr	r3, [pc, #1836]	; 184a0 <__generate_code_for_binary_boolean_expression@@Base+0x1458>
   17d70:	ldr	r7, [pc, #1836]	; 184a4 <__generate_code_for_binary_boolean_expression@@Base+0x145c>
   17d74:	mov	r0, #0
   17d78:	add	r3, pc, r3
   17d7c:	mov	r2, #1
   17d80:	ldr	r7, [pc, r7]
   17d84:	ldr	r8, [pc, #1820]	; 184a8 <__generate_code_for_binary_boolean_expression@@Base+0x1460>
   17d88:	adds	r4, r7, #4
   17d8c:	ldr	r8, [pc, r8]
   17d90:	ldr	r6, [r3, #4]
   17d94:	mov	r5, r8
   17d98:	strb	r0, [r5, r7]!
   17d9c:	strb	r2, [r5, #3]
   17da0:	strb	r0, [r5, #2]
   17da4:	strb	r0, [r5, #1]
   17da8:	adc	r5, r6, #0
   17dac:	cmp	r1, #0
   17db0:	strd	r4, [r3]
   17db4:	beq	17dc8 <__generate_code_for_binary_boolean_expression@@Base+0xd80>
   17db8:	mov	r0, r1
   17dbc:	bl	11fe8 <strlen@plt>
   17dc0:	add	r0, sl, r0, lsr #2
   17dc4:	add	sl, r0, #2
   17dc8:	ldr	r0, [pc, #1756]	; 184ac <__generate_code_for_binary_boolean_expression@@Base+0x1464>
   17dcc:	add	r0, pc, r0
   17dd0:	ldrb	r0, [r0]
   17dd4:	cmp	r0, #0
   17dd8:	beq	17eb8 <__generate_code_for_binary_boolean_expression@@Base+0xe70>
   17ddc:	ldr	lr, [pc, #1744]	; 184b4 <__generate_code_for_binary_boolean_expression@@Base+0x146c>
   17de0:	adds	r0, r7, #8
   17de4:	adc	r1, r6, #0
   17de8:	add	lr, pc, lr
   17dec:	ldr	r2, [lr, #4]
   17df0:	ldr	r3, [pc, #1728]	; 184b8 <__generate_code_for_binary_boolean_expression@@Base+0x1470>
   17df4:	ldr	r3, [pc, r3]
   17df8:	subs	r0, r3, r0
   17dfc:	sbcs	r0, r2, r1
   17e00:	bcs	18108 <__generate_code_for_binary_boolean_expression@@Base+0x10c0>
   17e04:	mov	r0, #7
   17e08:	orr	r0, r0, #131072	; 0x20000
   17e0c:	adds	r0, r7, r0
   17e10:	adc	r1, r6, #0
   17e14:	mvn	r2, #0
   17e18:	and	r5, r1, r2
   17e1c:	mov	r1, #16646144	; 0xfe0000
   17e20:	orr	r1, r1, #-16777216	; 0xff000000
   17e24:	and	r6, r0, r1
   17e28:	ldr	r4, [pc, #1680]	; 184c0 <__generate_code_for_binary_boolean_expression@@Base+0x1478>
   17e2c:	mov	r0, r8
   17e30:	mov	r1, r6
   17e34:	add	r4, pc, r4
   17e38:	mov	r7, lr
   17e3c:	bl	11f70 <realloc@plt>
   17e40:	mov	lr, r7
   17e44:	mov	r8, r0
   17e48:	str	r6, [lr]
   17e4c:	str	r5, [lr, #4]
   17e50:	str	r8, [r4]
   17e54:	ldr	r1, [pc, #1640]	; 184c4 <__generate_code_for_binary_boolean_expression@@Base+0x147c>
   17e58:	lsr	r0, sl, #24
   17e5c:	add	r1, pc, r1
   17e60:	lsr	r3, sl, #16
   17e64:	ldrb	r2, [r1]
   17e68:	ldr	r1, [pc, #1624]	; 184c8 <__generate_code_for_binary_boolean_expression@@Base+0x1480>
   17e6c:	add	r1, pc, r1
   17e70:	mov	r7, r1
   17e74:	ldr	r5, [r1, #4]
   17e78:	ldr	r4, [pc, #1612]	; 184cc <__generate_code_for_binary_boolean_expression@@Base+0x1484>
   17e7c:	mov	r1, r8
   17e80:	ldr	r4, [pc, r4]
   17e84:	strb	sl, [r1, r4]!
   17e88:	ldr	ip, [sp, #8]
   17e8c:	strb	r0, [r1, #3]
   17e90:	lsr	r0, sl, #8
   17e94:	strb	r0, [r1, #1]
   17e98:	adds	r0, r4, #4
   17e9c:	strb	r3, [r1, #2]
   17ea0:	adc	r1, r5, #0
   17ea4:	mov	sl, r7
   17ea8:	cmp	r2, #1
   17eac:	strd	r0, [sl]
   17eb0:	bne	17ef0 <__generate_code_for_binary_boolean_expression@@Base+0xea8>
   17eb4:	b	18140 <__generate_code_for_binary_boolean_expression@@Base+0x10f8>
   17eb8:	mov	r3, r8
   17ebc:	lsr	r0, sl, #24
   17ec0:	strb	sl, [r3, r4]!
   17ec4:	lsr	r1, sl, #16
   17ec8:	lsr	r2, sl, #8
   17ecc:	strb	r0, [r3, #3]
   17ed0:	strb	r1, [r3, #2]
   17ed4:	strb	r2, [r3, #1]
   17ed8:	ldr	sl, [pc, #1488]	; 184b0 <__generate_code_for_binary_boolean_expression@@Base+0x1468>
   17edc:	ldr	ip, [sp, #8]
   17ee0:	adds	r0, r7, #8
   17ee4:	adc	r1, r6, #0
   17ee8:	add	sl, pc, sl
   17eec:	strd	r0, [sl]
   17ef0:	mov	r6, r8
   17ef4:	lsr	r2, r9, #24
   17ef8:	strb	r9, [r6, r0]!
   17efc:	lsr	r3, r9, #16
   17f00:	strb	r2, [r6, #3]
   17f04:	adds	r2, r0, #4
   17f08:	lsr	r7, r9, #8
   17f0c:	strb	r3, [r6, #2]
   17f10:	adc	r3, r1, #0
   17f14:	strb	r7, [r6, #1]
   17f18:	strd	r2, [sl]
   17f1c:	ldr	r5, [sp]
   17f20:	mov	r6, r8
   17f24:	adds	r4, r2, #4
   17f28:	lsr	r7, r5, #8
   17f2c:	strb	r5, [r6, r2]!
   17f30:	lsr	r0, r5, #24
   17f34:	lsr	r1, r5, #16
   17f38:	strb	r7, [r6, #1]
   17f3c:	adc	r7, r3, #0
   17f40:	strb	r0, [r6, #3]
   17f44:	strb	r1, [r6, #2]
   17f48:	stm	sl, {r4, r7}
   17f4c:	ldr	r0, [sp, #4]
   17f50:	cmp	r0, #0
   17f54:	beq	1802c <__generate_code_for_binary_boolean_expression@@Base+0xfe4>
   17f58:	ldr	r0, [pc, #1420]	; 184ec <__generate_code_for_binary_boolean_expression@@Base+0x14a4>
   17f5c:	ldr	sl, [fp, #8]
   17f60:	add	r0, pc, r0
   17f64:	ldrb	r0, [r0]
   17f68:	cmp	r0, #1
   17f6c:	bne	17ff8 <__generate_code_for_binary_boolean_expression@@Base+0xfb0>
   17f70:	ldr	r9, [pc, #1400]	; 184f0 <__generate_code_for_binary_boolean_expression@@Base+0x14a8>
   17f74:	adds	r0, r2, #8
   17f78:	adc	r1, r3, #0
   17f7c:	add	r9, pc, r9
   17f80:	ldr	r6, [r9, #4]
   17f84:	ldr	r5, [pc, #1384]	; 184f4 <__generate_code_for_binary_boolean_expression@@Base+0x14ac>
   17f88:	ldr	r5, [pc, r5]
   17f8c:	subs	r0, r5, r0
   17f90:	sbcs	r0, r6, r1
   17f94:	bcs	17ff8 <__generate_code_for_binary_boolean_expression@@Base+0xfb0>
   17f98:	mov	r0, #7
   17f9c:	orr	r0, r0, #131072	; 0x20000
   17fa0:	adds	r0, r2, r0
   17fa4:	adc	r1, r3, #0
   17fa8:	mvn	r2, #0
   17fac:	and	r5, r1, r2
   17fb0:	mov	r1, #16646144	; 0xfe0000
   17fb4:	orr	r1, r1, #-16777216	; 0xff000000
   17fb8:	and	r6, r0, r1
   17fbc:	ldr	r4, [pc, #1332]	; 184f8 <__generate_code_for_binary_boolean_expression@@Base+0x14b0>
   17fc0:	mov	r0, r8
   17fc4:	mov	r1, r6
   17fc8:	add	r4, pc, r4
   17fcc:	bl	11f70 <realloc@plt>
   17fd0:	ldr	ip, [sp, #8]
   17fd4:	str	r6, [r9]
   17fd8:	str	r5, [r9, #4]
   17fdc:	mov	r8, r0
   17fe0:	ldr	r0, [pc, #1300]	; 184fc <__generate_code_for_binary_boolean_expression@@Base+0x14b4>
   17fe4:	str	r8, [r4]
   17fe8:	add	r0, pc, r0
   17fec:	ldr	r7, [r0, #4]
   17ff0:	ldr	r4, [pc, #1288]	; 18500 <__generate_code_for_binary_boolean_expression@@Base+0x14b8>
   17ff4:	ldr	r4, [pc, r4]
   17ff8:	mov	r3, r8
   17ffc:	lsr	r0, sl, #24
   18000:	strb	sl, [r3, r4]!
   18004:	lsr	r1, sl, #16
   18008:	lsr	r2, sl, #8
   1800c:	strb	r0, [r3, #3]
   18010:	strb	r1, [r3, #2]
   18014:	strb	r2, [r3, #1]
   18018:	ldr	sl, [pc, #1252]	; 18504 <__generate_code_for_binary_boolean_expression@@Base+0x14bc>
   1801c:	adds	r4, r4, #4
   18020:	adc	r7, r7, #0
   18024:	add	sl, pc, sl
   18028:	stm	sl, {r4, r7}
   1802c:	cmp	ip, #0
   18030:	beq	18478 <__generate_code_for_binary_boolean_expression@@Base+0x1430>
   18034:	mov	r0, ip
   18038:	bl	11fe8 <strlen@plt>
   1803c:	mov	r9, #1
   18040:	add	r5, r9, r0, lsr #2
   18044:	ldr	r0, [pc, #1212]	; 18508 <__generate_code_for_binary_boolean_expression@@Base+0x14c0>
   18048:	add	r0, pc, r0
   1804c:	ldrb	r0, [r0]
   18050:	cmp	r0, #1
   18054:	bne	180f8 <__generate_code_for_binary_boolean_expression@@Base+0x10b0>
   18058:	ldr	sl, [pc, #1196]	; 1850c <__generate_code_for_binary_boolean_expression@@Base+0x14c4>
   1805c:	adds	r0, r4, #4
   18060:	adc	r1, r7, #0
   18064:	add	sl, pc, sl
   18068:	ldr	r2, [sl, #4]
   1806c:	ldr	r3, [pc, #1180]	; 18510 <__generate_code_for_binary_boolean_expression@@Base+0x14c8>
   18070:	ldr	r3, [pc, r3]
   18074:	subs	r0, r3, r0
   18078:	sbcs	r0, r2, r1
   1807c:	bcs	182ac <__generate_code_for_binary_boolean_expression@@Base+0x1264>
   18080:	mov	r0, #0
   18084:	str	r0, [sp, #4]
   18088:	mov	r0, #7
   1808c:	orr	r0, r0, #131072	; 0x20000
   18090:	adds	r0, r4, r0
   18094:	adc	r1, r7, #0
   18098:	subs	r0, r0, #4
   1809c:	sbc	r1, r1, #0
   180a0:	mvn	r2, #0
   180a4:	and	r7, r1, r2
   180a8:	mov	r1, #16646144	; 0xfe0000
   180ac:	orr	r1, r1, #-16777216	; 0xff000000
   180b0:	and	r4, r0, r1
   180b4:	ldr	r6, [pc, #1116]	; 18518 <__generate_code_for_binary_boolean_expression@@Base+0x14d0>
   180b8:	mov	r0, r8
   180bc:	mov	r1, r4
   180c0:	add	r6, pc, r6
   180c4:	bl	11f70 <realloc@plt>
   180c8:	stm	sl, {r4, r7}
   180cc:	str	r0, [r6]
   180d0:	ldr	sl, [pc, #1092]	; 1851c <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   180d4:	mov	r8, r0
   180d8:	add	sl, pc, sl
   180dc:	ldr	r7, [sl, #4]
   180e0:	ldr	r0, [pc, #1080]	; 18520 <__generate_code_for_binary_boolean_expression@@Base+0x14d8>
   180e4:	add	r0, pc, r0
   180e8:	ldrb	r9, [r0]
   180ec:	ldr	r4, [pc, #1072]	; 18524 <__generate_code_for_binary_boolean_expression@@Base+0x14dc>
   180f0:	ldr	r4, [pc, r4]
   180f4:	b	182bc <__generate_code_for_binary_boolean_expression@@Base+0x1274>
   180f8:	mov	r0, #0
   180fc:	str	r0, [sp, #4]
   18100:	mov	r9, #0
   18104:	b	182bc <__generate_code_for_binary_boolean_expression@@Base+0x1274>
   18108:	mov	r3, r8
   1810c:	lsr	r0, sl, #24
   18110:	strb	sl, [r3, r4]!
   18114:	lsr	r1, sl, #16
   18118:	lsr	r2, sl, #8
   1811c:	strb	r0, [r3, #3]
   18120:	strb	r1, [r3, #2]
   18124:	strb	r2, [r3, #1]
   18128:	ldr	sl, [pc, #908]	; 184bc <__generate_code_for_binary_boolean_expression@@Base+0x1474>
   1812c:	adds	r0, r7, #8
   18130:	adc	r1, r6, #0
   18134:	add	sl, pc, sl
   18138:	ldr	ip, [sp, #8]
   1813c:	strd	r0, [sl]
   18140:	ldr	r7, [lr, #4]
   18144:	ldr	r6, [pc, #900]	; 184d0 <__generate_code_for_binary_boolean_expression@@Base+0x1488>
   18148:	adds	r2, r4, #8
   1814c:	adc	r3, r5, #0
   18150:	ldr	r6, [pc, r6]
   18154:	subs	r2, r6, r2
   18158:	sbcs	r2, r7, r3
   1815c:	bcs	18200 <__generate_code_for_binary_boolean_expression@@Base+0x11b8>
   18160:	mov	r0, #7
   18164:	orr	r0, r0, #131072	; 0x20000
   18168:	adds	r0, r4, r0
   1816c:	adc	r1, r5, #0
   18170:	mvn	r2, #0
   18174:	and	r5, r1, r2
   18178:	mov	r1, #16646144	; 0xfe0000
   1817c:	orr	r1, r1, #-16777216	; 0xff000000
   18180:	and	r4, r0, r1
   18184:	ldr	r6, [pc, #840]	; 184d4 <__generate_code_for_binary_boolean_expression@@Base+0x148c>
   18188:	mov	r0, r8
   1818c:	mov	r1, r4
   18190:	add	r6, pc, r6
   18194:	mov	r7, lr
   18198:	bl	11f70 <realloc@plt>
   1819c:	mov	lr, r7
   181a0:	str	r0, [r6]
   181a4:	strd	r4, [lr]
   181a8:	mov	r8, r0
   181ac:	ldr	ip, [sp, #8]
   181b0:	ldr	r0, [pc, #800]	; 184d8 <__generate_code_for_binary_boolean_expression@@Base+0x1490>
   181b4:	ldr	r1, [sl, #4]
   181b8:	mov	r3, r8
   181bc:	add	r0, pc, r0
   181c0:	lsr	r2, r9, #24
   181c4:	ldrb	r7, [r0]
   181c8:	ldr	r0, [pc, #780]	; 184dc <__generate_code_for_binary_boolean_expression@@Base+0x1494>
   181cc:	lsr	r6, r9, #16
   181d0:	ldr	r0, [pc, r0]
   181d4:	strb	r9, [r3, r0]!
   181d8:	strb	r2, [r3, #3]
   181dc:	lsr	r2, r9, #8
   181e0:	strb	r2, [r3, #1]
   181e4:	adds	r2, r0, #4
   181e8:	strb	r6, [r3, #2]
   181ec:	adc	r3, r1, #0
   181f0:	cmp	r7, #1
   181f4:	strd	r2, [sl]
   181f8:	bne	17f1c <__generate_code_for_binary_boolean_expression@@Base+0xed4>
   181fc:	b	1822c <__generate_code_for_binary_boolean_expression@@Base+0x11e4>
   18200:	mov	r6, r8
   18204:	lsr	r2, r9, #24
   18208:	strb	r9, [r6, r0]!
   1820c:	lsr	r3, r9, #16
   18210:	strb	r2, [r6, #3]
   18214:	adds	r2, r0, #4
   18218:	lsr	r7, r9, #8
   1821c:	strb	r3, [r6, #2]
   18220:	adc	r3, r1, #0
   18224:	strb	r7, [r6, #1]
   18228:	strd	r2, [sl]
   1822c:	ldr	r5, [lr, #4]
   18230:	ldr	r4, [pc, #680]	; 184e0 <__generate_code_for_binary_boolean_expression@@Base+0x1498>
   18234:	adds	r7, r0, #8
   18238:	adc	r6, r1, #0
   1823c:	ldr	r4, [pc, r4]
   18240:	subs	r7, r4, r7
   18244:	sbcs	r7, r5, r6
   18248:	bcs	17f1c <__generate_code_for_binary_boolean_expression@@Base+0xed4>
   1824c:	mov	r2, #7
   18250:	orr	r2, r2, #131072	; 0x20000
   18254:	adds	r0, r0, r2
   18258:	adc	r1, r1, #0
   1825c:	mvn	r2, #0
   18260:	and	r5, r1, r2
   18264:	mov	r1, #16646144	; 0xfe0000
   18268:	orr	r1, r1, #-16777216	; 0xff000000
   1826c:	and	r6, r0, r1
   18270:	ldr	r4, [pc, #620]	; 184e4 <__generate_code_for_binary_boolean_expression@@Base+0x149c>
   18274:	mov	r0, r8
   18278:	mov	r1, r6
   1827c:	add	r4, pc, r4
   18280:	mov	r7, lr
   18284:	bl	11f70 <realloc@plt>
   18288:	ldr	ip, [sp, #8]
   1828c:	str	r6, [r7]
   18290:	str	r5, [r7, #4]
   18294:	str	r0, [r4]
   18298:	ldr	r3, [sl, #4]
   1829c:	ldr	r2, [pc, #580]	; 184e8 <__generate_code_for_binary_boolean_expression@@Base+0x14a0>
   182a0:	mov	r8, r0
   182a4:	ldr	r2, [pc, r2]
   182a8:	b	17f1c <__generate_code_for_binary_boolean_expression@@Base+0xed4>
   182ac:	mov	r0, #0
   182b0:	str	r0, [sp, #4]
   182b4:	ldr	sl, [pc, #600]	; 18514 <__generate_code_for_binary_boolean_expression@@Base+0x14cc>
   182b8:	add	sl, pc, sl
   182bc:	mov	r3, r8
   182c0:	ldr	r0, [sp, #8]
   182c4:	strb	r5, [r3, r4]!
   182c8:	adds	r4, r4, #4
   182cc:	lsr	r6, r5, #24
   182d0:	lsr	r1, r5, #16
   182d4:	lsr	r2, r5, #8
   182d8:	adc	r5, r7, #0
   182dc:	strb	r6, [r3, #3]
   182e0:	strb	r1, [r3, #2]
   182e4:	strb	r2, [r3, #1]
   182e8:	strd	r4, [sl]
   182ec:	bl	11fe8 <strlen@plt>
   182f0:	mov	r7, r0
   182f4:	cmp	r9, #0
   182f8:	beq	18398 <__generate_code_for_binary_boolean_expression@@Base+0x1350>
   182fc:	ldr	r6, [pc, #548]	; 18528 <__generate_code_for_binary_boolean_expression@@Base+0x14e0>
   18300:	adds	r0, r4, r7
   18304:	adc	r1, r5, #0
   18308:	add	r6, pc, r6
   1830c:	ldr	r2, [r6, #4]
   18310:	ldr	r3, [pc, #532]	; 1852c <__generate_code_for_binary_boolean_expression@@Base+0x14e4>
   18314:	ldr	r3, [pc, r3]
   18318:	subs	r3, r3, r0
   1831c:	sbcs	r2, r2, r1
   18320:	bcs	18390 <__generate_code_for_binary_boolean_expression@@Base+0x1348>
   18324:	mov	r2, #7
   18328:	orr	r2, r2, #131072	; 0x20000
   1832c:	adds	r0, r0, r2
   18330:	adc	r1, r1, #0
   18334:	subs	r0, r0, #8
   18338:	sbc	r1, r1, #0
   1833c:	mvn	r2, #0
   18340:	and	r5, r1, r2
   18344:	mov	r1, #16646144	; 0xfe0000
   18348:	orr	r1, r1, #-16777216	; 0xff000000
   1834c:	and	r4, r0, r1
   18350:	ldr	r9, [pc, #472]	; 18530 <__generate_code_for_binary_boolean_expression@@Base+0x14e8>
   18354:	mov	r0, r8
   18358:	mov	r1, r4
   1835c:	add	r9, pc, r9
   18360:	bl	11f70 <realloc@plt>
   18364:	strd	r4, [r6]
   18368:	str	r0, [r9]
   1836c:	mov	r8, r0
   18370:	ldr	r5, [sl, #4]
   18374:	ldr	r0, [pc, #440]	; 18534 <__generate_code_for_binary_boolean_expression@@Base+0x14ec>
   18378:	add	r0, pc, r0
   1837c:	ldrb	r0, [r0]
   18380:	str	r0, [sp, #4]
   18384:	ldr	r4, [pc, #428]	; 18538 <__generate_code_for_binary_boolean_expression@@Base+0x14f0>
   18388:	ldr	r4, [pc, r4]
   1838c:	b	18398 <__generate_code_for_binary_boolean_expression@@Base+0x1350>
   18390:	mov	r0, #1
   18394:	str	r0, [sp, #4]
   18398:	ldr	r9, [sp, #8]
   1839c:	add	r0, r8, r4
   183a0:	mov	r2, r7
   183a4:	mov	r1, r9
   183a8:	bl	11f34 <memcpy@plt>
   183ac:	adds	r6, r4, r7
   183b0:	mov	r0, r9
   183b4:	adc	r5, r5, #0
   183b8:	str	r6, [sl]
   183bc:	str	r5, [sl, #4]
   183c0:	bl	11fe8 <strlen@plt>
   183c4:	and	r0, r0, #3
   183c8:	rsb	r4, r0, #4
   183cc:	ldr	r0, [sp, #4]
   183d0:	cmp	r0, #0
   183d4:	beq	1845c <__generate_code_for_binary_boolean_expression@@Base+0x1414>
   183d8:	ldr	r7, [pc, #348]	; 1853c <__generate_code_for_binary_boolean_expression@@Base+0x14f4>
   183dc:	adds	r0, r6, r4
   183e0:	adc	r1, r5, #0
   183e4:	add	r7, pc, r7
   183e8:	ldr	r2, [r7, #4]
   183ec:	ldr	r3, [pc, #332]	; 18540 <__generate_code_for_binary_boolean_expression@@Base+0x14f8>
   183f0:	ldr	r3, [pc, r3]
   183f4:	subs	r3, r3, r0
   183f8:	sbcs	r2, r2, r1
   183fc:	bcs	1845c <__generate_code_for_binary_boolean_expression@@Base+0x1414>
   18400:	mov	r2, #7
   18404:	orr	r2, r2, #131072	; 0x20000
   18408:	adds	r0, r0, r2
   1840c:	adc	r1, r1, #0
   18410:	subs	r0, r0, #8
   18414:	sbc	r1, r1, #0
   18418:	mvn	r2, #0
   1841c:	and	r5, r1, r2
   18420:	mov	r1, #16646144	; 0xfe0000
   18424:	orr	r1, r1, #-16777216	; 0xff000000
   18428:	and	r6, r0, r1
   1842c:	ldr	r9, [pc, #272]	; 18544 <__generate_code_for_binary_boolean_expression@@Base+0x14fc>
   18430:	mov	r0, r8
   18434:	mov	r1, r6
   18438:	add	r9, pc, r9
   1843c:	bl	11f70 <realloc@plt>
   18440:	str	r6, [r7]
   18444:	str	r5, [r7, #4]
   18448:	str	r0, [r9]
   1844c:	ldr	r5, [sl, #4]
   18450:	ldr	r6, [pc, #240]	; 18548 <__generate_code_for_binary_boolean_expression@@Base+0x1500>
   18454:	mov	r8, r0
   18458:	ldr	r6, [pc, r6]
   1845c:	add	r0, r8, r6
   18460:	mov	r1, #0
   18464:	mov	r2, r4
   18468:	bl	1203c <memset@plt>
   1846c:	adds	r0, r6, r4
   18470:	adc	r1, r5, #0
   18474:	strd	r0, [sl]
   18478:	sub	sp, fp, #28
   1847c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18480:	andeq	r5, r1, r0, lsr #8
   18484:	andeq	r5, r1, r4, lsl #8
   18488:	andeq	r5, r1, r0, lsl #8
   1848c:	strdeq	r5, [r1], -r4
   18490:	strdeq	r5, [r1], -r0
   18494:	ldrdeq	r5, [r1], -r4
   18498:	andeq	r5, r1, r8, lsl #7
   1849c:	andeq	r5, r1, r4, lsl #7
   184a0:	andeq	r5, r1, r0, ror r3
   184a4:	andeq	r5, r1, r8, ror #6
   184a8:	andeq	r5, r1, r0, asr r3
   184ac:	andeq	r5, r1, r8, lsl #6
   184b0:	andeq	r5, r1, r0, lsl #4
   184b4:	strdeq	r5, [r1], -r8
   184b8:	andeq	r5, r1, ip, ror #5
   184bc:			; <UNDEFINED> instruction: 0x00014fb4
   184c0:	andeq	r5, r1, r8, lsr #5
   184c4:	andeq	r5, r1, r8, ror r2
   184c8:	andeq	r5, r1, ip, ror r2
   184cc:	andeq	r5, r1, r8, ror #4
   184d0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   184d4:	andeq	r4, r1, ip, asr #30
   184d8:	andeq	r4, r1, r8, lsl pc
   184dc:	andeq	r4, r1, r8, lsl pc
   184e0:	andeq	r4, r1, r4, lsr #29
   184e4:	andeq	r4, r1, r0, ror #28
   184e8:	andeq	r4, r1, r4, asr #28
   184ec:	andeq	r5, r1, r4, ror r1
   184f0:	andeq	r5, r1, r4, ror #2
   184f4:	andeq	r5, r1, r8, asr r1
   184f8:	andeq	r5, r1, r4, lsl r1
   184fc:	andeq	r5, r1, r0, lsl #2
   18500:	strdeq	r5, [r1], -r4
   18504:	andeq	r5, r1, r4, asr #1
   18508:	andeq	r5, r1, ip, lsl #1
   1850c:	andeq	r5, r1, ip, ror r0
   18510:	andeq	r5, r1, r0, ror r0
   18514:	andeq	r4, r1, r0, lsr lr
   18518:	andeq	r5, r1, ip, lsl r0
   1851c:	andeq	r5, r1, r0, lsl r0
   18520:	strdeq	r4, [r1], -r0
   18524:	strdeq	r4, [r1], -r8
   18528:	ldrdeq	r4, [r1], -r8
   1852c:	andeq	r4, r1, ip, asr #27
   18530:	andeq	r4, r1, r0, lsl #27
   18534:	andeq	r4, r1, ip, asr sp
   18538:	andeq	r4, r1, r0, ror #26
   1853c:	strdeq	r4, [r1], -ip
   18540:	strdeq	r4, [r1], -r0
   18544:	andeq	r4, r1, r4, lsr #25
   18548:	muleq	r1, r0, ip
   1854c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18550:	add	fp, sp, #28
   18554:	sub	sp, sp, #28
   18558:	mov	ip, r0
   1855c:	ldr	r0, [pc, #1728]	; 18c24 <__generate_code_for_binary_boolean_expression@@Base+0x1bdc>
   18560:	ldr	r0, [pc, r0]
   18564:	cmp	r0, #0
   18568:	beq	18684 <__generate_code_for_binary_boolean_expression@@Base+0x163c>
   1856c:	ldr	r2, [pc, #1716]	; 18c28 <__generate_code_for_binary_boolean_expression@@Base+0x1be0>
   18570:	mov	sl, r1
   18574:	add	r2, pc, r2
   18578:	ldr	r3, [r2, #4]
   1857c:	ldr	r4, [pc, #1704]	; 18c2c <__generate_code_for_binary_boolean_expression@@Base+0x1be4>
   18580:	ldr	r4, [pc, r4]
   18584:	ldr	r6, [pc, #1700]	; 18c30 <__generate_code_for_binary_boolean_expression@@Base+0x1be8>
   18588:	add	r6, pc, r6
   1858c:	ldrb	r0, [r6]
   18590:	cmp	r0, #0
   18594:	beq	1868c <__generate_code_for_binary_boolean_expression@@Base+0x1644>
   18598:	ldr	r8, [pc, #1720]	; 18c58 <__generate_code_for_binary_boolean_expression@@Base+0x1c10>
   1859c:	mov	r5, #10551296	; 0xa10000
   185a0:	adds	r9, r4, #4
   185a4:	add	r8, pc, r8
   185a8:	adc	r2, r3, #0
   185ac:	ldr	r0, [r8, #4]
   185b0:	ldr	r1, [pc, #1700]	; 18c5c <__generate_code_for_binary_boolean_expression@@Base+0x1c14>
   185b4:	orr	r5, r5, #16777216	; 0x1000000
   185b8:	ldr	r1, [pc, r1]
   185bc:	subs	r1, r1, r9
   185c0:	sbcs	r0, r0, r2
   185c4:	bcs	1879c <__generate_code_for_binary_boolean_expression@@Base+0x1754>
   185c8:	mov	r0, #3
   185cc:	orr	r0, r0, #131072	; 0x20000
   185d0:	adds	r0, r4, r0
   185d4:	adc	r1, r3, #0
   185d8:	mvn	r2, #0
   185dc:	and	r9, r1, r2
   185e0:	mov	r1, #16646144	; 0xfe0000
   185e4:	orr	r1, r1, #-16777216	; 0xff000000
   185e8:	and	r4, r0, r1
   185ec:	ldr	r0, [pc, #1652]	; 18c68 <__generate_code_for_binary_boolean_expression@@Base+0x1c20>
   185f0:	mov	r1, r4
   185f4:	mov	r7, ip
   185f8:	ldr	r0, [pc, r0]
   185fc:	bl	11f70 <realloc@plt>
   18600:	ldr	ip, [pc, #1636]	; 18c6c <__generate_code_for_binary_boolean_expression@@Base+0x1c24>
   18604:	ldr	lr, [pc, #1636]	; 18c70 <__generate_code_for_binary_boolean_expression@@Base+0x1c28>
   18608:	stm	r8, {r4, r9}
   1860c:	ldr	r1, [pc, #1632]	; 18c74 <__generate_code_for_binary_boolean_expression@@Base+0x1c2c>
   18610:	add	ip, pc, ip
   18614:	add	lr, pc, lr
   18618:	add	r1, pc, r1
   1861c:	mov	r2, r0
   18620:	str	r2, [r1]
   18624:	mov	r6, ip
   18628:	ldrb	ip, [ip]
   1862c:	ldr	r3, [lr, #4]
   18630:	ldr	r4, [pc, #1600]	; 18c78 <__generate_code_for_binary_boolean_expression@@Base+0x1c30>
   18634:	lsr	r0, r5, #24
   18638:	mov	r1, r8
   1863c:	ldr	r4, [pc, r4]
   18640:	str	r2, [sp, #20]
   18644:	lsl	r8, r7, #1
   18648:	strb	r5, [r2, r4]!
   1864c:	adds	r9, r4, #4
   18650:	strb	r0, [r2, #3]
   18654:	lsr	r0, r5, #16
   18658:	strb	r0, [r2, #2]
   1865c:	lsr	r0, r5, #8
   18660:	strb	r0, [r2, #1]
   18664:	adc	r5, r3, #0
   18668:	mov	r0, #0
   1866c:	cmp	ip, #1
   18670:	str	r3, [sp, #16]
   18674:	str	r9, [lr]
   18678:	str	r5, [lr, #4]
   1867c:	beq	187f0 <__generate_code_for_binary_boolean_expression@@Base+0x17a8>
   18680:	b	18940 <__generate_code_for_binary_boolean_expression@@Base+0x18f8>
   18684:	sub	sp, fp, #28
   18688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1868c:	ldr	r0, [pc, #1440]	; 18c34 <__generate_code_for_binary_boolean_expression@@Base+0x1bec>
   18690:	mov	r7, r3
   18694:	adds	r9, r4, #4
   18698:	mov	lr, r2
   1869c:	ldr	r0, [pc, r0]
   186a0:	str	r0, [sp, #20]
   186a4:	ldrb	r1, [r0, r4]!
   186a8:	str	r7, [sp, #16]
   186ac:	ldrb	r5, [r0, #1]
   186b0:	ldrb	r3, [r0, #2]
   186b4:	ldrb	r0, [r0, #3]
   186b8:	orr	r1, r1, r5, lsl #8
   186bc:	orr	r1, r1, r3, lsl #16
   186c0:	orr	r3, r1, r0, lsl #24
   186c4:	adc	r5, r7, #0
   186c8:	mov	r7, #0
   186cc:	cmn	r3, #1
   186d0:	str	r9, [r2]
   186d4:	str	r5, [r2, #4]
   186d8:	beq	1889c <__generate_code_for_binary_boolean_expression@@Base+0x1854>
   186dc:	mov	r0, #10551296	; 0xa10000
   186e0:	orr	r0, r0, #16777216	; 0x1000000
   186e4:	cmp	r3, r0
   186e8:	bne	188a8 <__generate_code_for_binary_boolean_expression@@Base+0x1860>
   186ec:	str	r5, [sp, #8]
   186f0:	ldr	r0, [sp, #20]
   186f4:	str	r4, [sp, #4]
   186f8:	adds	r5, r4, #8
   186fc:	ldr	r3, [r0, r9]
   18700:	ldr	r0, [sp, #16]
   18704:	mov	r1, r9
   18708:	adc	r9, r0, #0
   1870c:	cmn	r3, #1
   18710:	stm	lr, {r5, r9}
   18714:	beq	188b4 <__generate_code_for_binary_boolean_expression@@Base+0x186c>
   18718:	lsr	r0, r3, #1
   1871c:	mov	r7, ip
   18720:	cmp	r0, ip
   18724:	bne	188b4 <__generate_code_for_binary_boolean_expression@@Base+0x186c>
   18728:	lsl	r0, r7, #3
   1872c:	mov	r4, r1
   18730:	bl	11fa0 <malloc@plt>
   18734:	mov	r1, r0
   18738:	cmp	r7, #0
   1873c:	beq	188dc <__generate_code_for_binary_boolean_expression@@Base+0x1894>
   18740:	mov	r0, r7
   18744:	str	r7, [sp, #24]
   18748:	str	r1, [sp, #12]
   1874c:	ldr	r2, [sp, #20]
   18750:	ldr	r3, [r2, r5]!
   18754:	adds	r5, r5, #8
   18758:	ldr	r2, [r2, #4]
   1875c:	str	r3, [r1]
   18760:	adc	r9, r9, #0
   18764:	str	r2, [r1, #4]
   18768:	subs	r0, r0, #1
   1876c:	add	r1, r1, #8
   18770:	bne	1874c <__generate_code_for_binary_boolean_expression@@Base+0x1704>
   18774:	ldr	lr, [pc, #1236]	; 18c50 <__generate_code_for_binary_boolean_expression@@Base+0x1c08>
   18778:	add	lr, pc, lr
   1877c:	mov	r0, lr
   18780:	stm	r0, {r5, r9}
   18784:	ldr	ip, [pc, #1224]	; 18c54 <__generate_code_for_binary_boolean_expression@@Base+0x1c0c>
   18788:	ldr	r0, [sp, #12]
   1878c:	add	ip, pc, ip
   18790:	mov	r6, ip
   18794:	ldr	ip, [sp, #24]
   18798:	b	188f8 <__generate_code_for_binary_boolean_expression@@Base+0x18b0>
   1879c:	str	r3, [sp, #16]
   187a0:	ldr	r3, [pc, #1208]	; 18c60 <__generate_code_for_binary_boolean_expression@@Base+0x1c18>
   187a4:	mov	lr, r5
   187a8:	mov	r7, ip
   187ac:	lsr	ip, r5, #16
   187b0:	ldr	r3, [pc, r3]
   187b4:	lsr	r1, r5, #8
   187b8:	str	r3, [sp, #20]
   187bc:	strb	lr, [r3, r4]!
   187c0:	lsr	r0, lr, #24
   187c4:	strb	r1, [r3, #1]
   187c8:	strb	r0, [r3, #3]
   187cc:	strb	ip, [r3, #2]
   187d0:	ldr	lr, [pc, #1164]	; 18c64 <__generate_code_for_binary_boolean_expression@@Base+0x1c1c>
   187d4:	lsl	r5, r7, #1
   187d8:	add	lr, pc, lr
   187dc:	mov	r1, r8
   187e0:	mov	r8, r5
   187e4:	str	r9, [lr]
   187e8:	str	r2, [lr, #4]
   187ec:	mov	r5, r2
   187f0:	str	r8, [sp, #24]
   187f4:	mov	r8, r1
   187f8:	ldr	r0, [sp, #16]
   187fc:	ldr	r2, [r8, #4]
   18800:	ldr	r3, [pc, #1140]	; 18c7c <__generate_code_for_binary_boolean_expression@@Base+0x1c34>
   18804:	adds	ip, r4, #8
   18808:	adc	r1, r0, #0
   1880c:	mov	r0, #0
   18810:	ldr	r3, [pc, r3]
   18814:	subs	r3, r3, ip
   18818:	sbcs	r1, r2, r1
   1881c:	bcs	18894 <__generate_code_for_binary_boolean_expression@@Base+0x184c>
   18820:	ldr	r5, [pc, #1112]	; 18c80 <__generate_code_for_binary_boolean_expression@@Base+0x1c38>
   18824:	mov	r0, #3
   18828:	ldr	r1, [sp, #16]
   1882c:	orr	r0, r0, #131072	; 0x20000
   18830:	adds	r0, r4, r0
   18834:	adc	r1, r1, #0
   18838:	adds	r0, r0, #4
   1883c:	adc	r1, r1, #0
   18840:	mvn	r2, #0
   18844:	and	r9, r1, r2
   18848:	mov	r1, #16646144	; 0xfe0000
   1884c:	orr	r1, r1, #-16777216	; 0xff000000
   18850:	and	r4, r0, r1
   18854:	ldr	r0, [sp, #20]
   18858:	mov	r1, r4
   1885c:	add	r5, pc, r5
   18860:	bl	11f70 <realloc@plt>
   18864:	ldr	ip, [pc, #1048]	; 18c84 <__generate_code_for_binary_boolean_expression@@Base+0x1c3c>
   18868:	ldr	lr, [pc, #1048]	; 18c88 <__generate_code_for_binary_boolean_expression@@Base+0x1c40>
   1886c:	stm	r8, {r4, r9}
   18870:	add	lr, pc, lr
   18874:	str	r0, [r5]
   18878:	str	r0, [sp, #20]
   1887c:	ldr	r5, [lr, #4]
   18880:	ldr	r9, [pc, #1028]	; 18c8c <__generate_code_for_binary_boolean_expression@@Base+0x1c44>
   18884:	add	ip, pc, ip
   18888:	mov	r6, ip
   1888c:	mov	r0, #0
   18890:	ldr	r9, [pc, r9]
   18894:	ldr	r8, [sp, #24]
   18898:	b	18940 <__generate_code_for_binary_boolean_expression@@Base+0x18f8>
   1889c:	ldr	r1, [sp, #16]
   188a0:	mov	r0, #0
   188a4:	b	1890c <__generate_code_for_binary_boolean_expression@@Base+0x18c4>
   188a8:	ldr	r1, [pc, #904]	; 18c38 <__generate_code_for_binary_boolean_expression@@Base+0x1bf0>
   188ac:	add	r1, pc, r1
   188b0:	b	188bc <__generate_code_for_binary_boolean_expression@@Base+0x1874>
   188b4:	ldr	r1, [pc, #904]	; 18c44 <__generate_code_for_binary_boolean_expression@@Base+0x1bfc>
   188b8:	add	r1, pc, r1
   188bc:	ldr	r0, [pc, #888]	; 18c3c <__generate_code_for_binary_boolean_expression@@Base+0x1bf4>
   188c0:	ldr	r0, [pc, r0]
   188c4:	ldr	r0, [r0]
   188c8:	ldr	r2, [pc, #880]	; 18c40 <__generate_code_for_binary_boolean_expression@@Base+0x1bf8>
   188cc:	ldr	r2, [pc, r2]
   188d0:	sub	sp, fp, #28
   188d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188d8:	b	1200c <fprintf@plt>
   188dc:	ldr	lr, [pc, #868]	; 18c48 <__generate_code_for_binary_boolean_expression@@Base+0x1c00>
   188e0:	ldr	ip, [pc, #868]	; 18c4c <__generate_code_for_binary_boolean_expression@@Base+0x1c04>
   188e4:	mov	r0, r1
   188e8:	add	lr, pc, lr
   188ec:	add	ip, pc, ip
   188f0:	mov	r6, ip
   188f4:	mov	ip, r7
   188f8:	mov	r9, r4
   188fc:	ldr	r5, [sp, #8]
   18900:	ldr	r4, [sp, #4]
   18904:	ldr	r1, [sp, #16]
   18908:	mov	r7, #0
   1890c:	str	r4, [lr]
   18910:	str	r1, [lr, #4]
   18914:	ldr	r2, [sp, #20]
   18918:	mov	r1, #1
   1891c:	lsl	r8, ip, #1
   18920:	strb	r7, [r2, r4]!
   18924:	strb	r1, [r2, #3]
   18928:	mov	r1, #161	; 0xa1
   1892c:	strb	r7, [r2, #1]
   18930:	strb	r1, [r2, #2]
   18934:	str	r9, [lr]
   18938:	str	r5, [lr, #4]
   1893c:	mov	r7, ip
   18940:	ldr	r3, [sp, #20]
   18944:	lsr	r1, r8, #16
   18948:	mov	ip, r3
   1894c:	strb	r8, [r3, r9]!
   18950:	lsr	r4, r8, #24
   18954:	lsr	r2, r8, #8
   18958:	adds	r8, r9, #4
   1895c:	strb	r1, [r3, #2]
   18960:	adc	r1, r5, #0
   18964:	cmp	r7, #0
   18968:	strb	r4, [r3, #3]
   1896c:	strb	r2, [r3, #1]
   18970:	str	r8, [lr]
   18974:	str	r1, [lr, #4]
   18978:	str	r7, [sp, #24]
   1897c:	beq	18c18 <__generate_code_for_binary_boolean_expression@@Base+0x1bd0>
   18980:	ldr	r7, [pc, #776]	; 18c90 <__generate_code_for_binary_boolean_expression@@Base+0x1c48>
   18984:	mov	r4, lr
   18988:	mov	r2, r0
   1898c:	add	r7, pc, r7
   18990:	str	r0, [sp, #12]
   18994:	cmp	r0, #0
   18998:	mov	r0, r4
   1899c:	str	r2, [sp, #16]
   189a0:	beq	189ac <__generate_code_for_binary_boolean_expression@@Base+0x1964>
   189a4:	ldrd	r2, [r2]
   189a8:	b	189b4 <__generate_code_for_binary_boolean_expression@@Base+0x196c>
   189ac:	mov	r2, #0
   189b0:	mov	r3, #0
   189b4:	ldrd	r4, [sl]
   189b8:	adds	r4, r4, r2
   189bc:	adc	r5, r5, r3
   189c0:	strd	r4, [sl]
   189c4:	ldrb	r2, [r6]
   189c8:	str	sl, [sp, #20]
   189cc:	cmp	r2, #0
   189d0:	beq	18a9c <__generate_code_for_binary_boolean_expression@@Base+0x1a54>
   189d4:	ldr	r3, [r7, #4]
   189d8:	ldr	r6, [pc, #692]	; 18c94 <__generate_code_for_binary_boolean_expression@@Base+0x1c4c>
   189dc:	adds	r2, r8, #4
   189e0:	adc	r9, r1, #0
   189e4:	ldr	r6, [pc, r6]
   189e8:	subs	r2, r6, r2
   189ec:	sbcs	r2, r3, r9
   189f0:	bcs	18ad8 <__generate_code_for_binary_boolean_expression@@Base+0x1a90>
   189f4:	mov	r2, #3
   189f8:	orr	r2, r2, #131072	; 0x20000
   189fc:	adds	r0, r8, r2
   18a00:	adc	r1, r1, #0
   18a04:	mvn	r2, #0
   18a08:	and	r8, r1, r2
   18a0c:	mov	r1, #16646144	; 0xfe0000
   18a10:	orr	r1, r1, #-16777216	; 0xff000000
   18a14:	and	r6, r0, r1
   18a18:	mov	r0, ip
   18a1c:	mov	r1, r6
   18a20:	bl	11f70 <realloc@plt>
   18a24:	ldr	ip, [pc, #620]	; 18c98 <__generate_code_for_binary_boolean_expression@@Base+0x1c50>
   18a28:	ldr	lr, [pc, #620]	; 18c9c <__generate_code_for_binary_boolean_expression@@Base+0x1c54>
   18a2c:	stm	r7, {r6, r8}
   18a30:	mov	r3, r0
   18a34:	ldr	r0, [pc, #612]	; 18ca0 <__generate_code_for_binary_boolean_expression@@Base+0x1c58>
   18a38:	add	lr, pc, lr
   18a3c:	mov	r9, lr
   18a40:	add	r0, pc, r0
   18a44:	add	ip, pc, ip
   18a48:	str	r3, [r0]
   18a4c:	mov	lr, ip
   18a50:	ldrb	ip, [ip]
   18a54:	ldr	r1, [r9, #4]
   18a58:	ldr	r8, [pc, #580]	; 18ca4 <__generate_code_for_binary_boolean_expression@@Base+0x1c5c>
   18a5c:	mov	r7, r3
   18a60:	lsr	r2, r4, #24
   18a64:	ldr	r8, [pc, r8]
   18a68:	lsr	r6, r4, #16
   18a6c:	strb	r4, [r7, r8]!
   18a70:	strb	r2, [r7, #3]
   18a74:	lsr	r2, r4, #8
   18a78:	strb	r2, [r7, #1]
   18a7c:	adds	r2, r8, #4
   18a80:	mov	r4, r9
   18a84:	adc	r9, r1, #0
   18a88:	cmp	ip, #1
   18a8c:	strb	r6, [r7, #2]
   18a90:	stm	r4, {r2, r9}
   18a94:	beq	18b0c <__generate_code_for_binary_boolean_expression@@Base+0x1ac4>
   18a98:	b	18bb8 <__generate_code_for_binary_boolean_expression@@Base+0x1b70>
   18a9c:	mov	r7, ip
   18aa0:	lsr	r2, r4, #24
   18aa4:	strb	r4, [r7, r8]!
   18aa8:	lsr	r9, r4, #16
   18aac:	strb	r2, [r7, #3]
   18ab0:	adds	r2, r8, #4
   18ab4:	mov	lr, r6
   18ab8:	lsr	r6, r4, #8
   18abc:	strb	r9, [r7, #2]
   18ac0:	adc	r9, r1, #0
   18ac4:	mov	r4, r0
   18ac8:	strb	r6, [r7, #1]
   18acc:	mov	r3, ip
   18ad0:	stm	r4, {r2, r9}
   18ad4:	b	18bb8 <__generate_code_for_binary_boolean_expression@@Base+0x1b70>
   18ad8:	mov	r6, ip
   18adc:	lsr	r2, r4, #24
   18ae0:	strb	r4, [r6, r8]!
   18ae4:	lsr	r9, r4, #16
   18ae8:	strb	r2, [r6, #3]
   18aec:	adds	r2, r8, #4
   18af0:	lsr	r7, r4, #8
   18af4:	strb	r9, [r6, #2]
   18af8:	adc	r9, r1, #0
   18afc:	mov	r4, r0
   18b00:	strb	r7, [r6, #1]
   18b04:	mov	r3, ip
   18b08:	stm	r4, {r2, r9}
   18b0c:	ldr	lr, [pc, #404]	; 18ca8 <__generate_code_for_binary_boolean_expression@@Base+0x1c60>
   18b10:	mov	r0, r4
   18b14:	adds	r7, r8, #8
   18b18:	add	lr, pc, lr
   18b1c:	adc	ip, r1, #0
   18b20:	ldr	r4, [lr, #4]
   18b24:	ldr	r6, [pc, #384]	; 18cac <__generate_code_for_binary_boolean_expression@@Base+0x1c64>
   18b28:	ldr	r6, [pc, r6]
   18b2c:	subs	r7, r6, r7
   18b30:	sbcs	r7, r4, ip
   18b34:	bcs	18bac <__generate_code_for_binary_boolean_expression@@Base+0x1b64>
   18b38:	mov	r2, #3
   18b3c:	orr	r2, r2, #131072	; 0x20000
   18b40:	adds	r0, r8, r2
   18b44:	adc	r1, r1, #0
   18b48:	adds	r0, r0, #4
   18b4c:	adc	r1, r1, #0
   18b50:	mvn	r2, #0
   18b54:	and	r7, r1, r2
   18b58:	mov	r1, #16646144	; 0xfe0000
   18b5c:	orr	r1, r1, #-16777216	; 0xff000000
   18b60:	and	r6, r0, r1
   18b64:	mov	r0, r3
   18b68:	mov	r1, r6
   18b6c:	mov	r8, lr
   18b70:	bl	11f70 <realloc@plt>
   18b74:	ldr	lr, [pc, #312]	; 18cb4 <__generate_code_for_binary_boolean_expression@@Base+0x1c6c>
   18b78:	strd	r6, [r8]
   18b7c:	mov	r3, r0
   18b80:	add	lr, pc, lr
   18b84:	mov	r4, lr
   18b88:	ldr	r9, [lr, #4]
   18b8c:	ldr	r0, [pc, #292]	; 18cb8 <__generate_code_for_binary_boolean_expression@@Base+0x1c70>
   18b90:	add	r0, pc, r0
   18b94:	str	r3, [r0]
   18b98:	ldr	r2, [pc, #284]	; 18cbc <__generate_code_for_binary_boolean_expression@@Base+0x1c74>
   18b9c:	ldr	r2, [pc, r2]
   18ba0:	ldr	lr, [pc, #280]	; 18cc0 <__generate_code_for_binary_boolean_expression@@Base+0x1c78>
   18ba4:	add	lr, pc, lr
   18ba8:	b	18bb8 <__generate_code_for_binary_boolean_expression@@Base+0x1b70>
   18bac:	ldr	lr, [pc, #252]	; 18cb0 <__generate_code_for_binary_boolean_expression@@Base+0x1c68>
   18bb0:	mov	r4, r0
   18bb4:	add	lr, pc, lr
   18bb8:	mov	ip, r3
   18bbc:	lsr	r1, r5, #16
   18bc0:	strb	r5, [r3, r2]!
   18bc4:	lsr	r0, r5, #24
   18bc8:	lsr	r7, r5, #8
   18bcc:	adds	r8, r2, #4
   18bd0:	strb	r1, [r3, #2]
   18bd4:	adc	r1, r9, #0
   18bd8:	strb	r0, [r3, #3]
   18bdc:	strb	r7, [r3, #1]
   18be0:	str	r8, [r4]
   18be4:	str	r1, [r4, #4]
   18be8:	ldr	r0, [sp, #24]
   18bec:	mov	r6, lr
   18bf0:	subs	r0, r0, #1
   18bf4:	str	r0, [sp, #24]
   18bf8:	ldr	sl, [sp, #20]
   18bfc:	ldr	r2, [sp, #16]
   18c00:	ldr	r0, [sp, #12]
   18c04:	ldr	r7, [pc, #184]	; 18cc4 <__generate_code_for_binary_boolean_expression@@Base+0x1c7c>
   18c08:	add	sl, sl, #8
   18c0c:	add	r2, r2, #8
   18c10:	add	r7, pc, r7
   18c14:	bne	18994 <__generate_code_for_binary_boolean_expression@@Base+0x194c>
   18c18:	sub	sp, fp, #28
   18c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c20:	b	11f28 <free@plt>
   18c24:	andeq	r4, r1, r8, ror fp
   18c28:	andeq	r4, r1, r4, ror fp
   18c2c:	andeq	r4, r1, r8, ror #22
   18c30:	andeq	r4, r1, ip, asr #22
   18c34:	andeq	r4, r1, r0, asr #20
   18c38:	andeq	r3, r0, r4, ror #2
   18c3c:	strdeq	r3, [r1], -r8
   18c40:	andeq	r4, r1, r4, lsl #16
   18c44:	andeq	r3, r0, r2, lsr #3
   18c48:	andeq	r4, r1, r0, lsl #16
   18c4c:	andeq	r4, r1, r8, ror #15
   18c50:	andeq	r4, r1, r0, ror r9
   18c54:	andeq	r4, r1, r8, asr #18
   18c58:	andeq	r4, r1, ip, lsr fp
   18c5c:	andeq	r4, r1, r8, lsr #22
   18c60:	andeq	r4, r1, ip, lsr #18
   18c64:	andeq	r4, r1, r0, lsl r9
   18c68:	andeq	r4, r1, r4, ror #21
   18c6c:	andeq	r4, r1, r4, asr #21
   18c70:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   18c74:	andeq	r4, r1, r4, asr #21
   18c78:	andeq	r4, r1, ip, lsr #21
   18c7c:	ldrdeq	r4, [r1], -r0
   18c80:	andeq	r4, r1, r0, lsl #17
   18c84:	andeq	r4, r1, r0, asr r8
   18c88:	andeq	r4, r1, r8, ror r8
   18c8c:	andeq	r4, r1, r8, asr r8
   18c90:	andeq	r4, r1, r4, asr r7
   18c94:	strdeq	r4, [r1], -ip
   18c98:	muleq	r1, r0, r6
   18c9c:			; <UNDEFINED> instruction: 0x000146b0
   18ca0:	muleq	r1, ip, r6
   18ca4:	andeq	r4, r1, r4, lsl #13
   18ca8:	andeq	r4, r1, r8, asr #11
   18cac:			; <UNDEFINED> instruction: 0x000145b8
   18cb0:	andeq	r4, r1, r0, lsr #10
   18cb4:	andeq	r4, r1, r8, ror #10
   18cb8:	andeq	r4, r1, ip, asr #10
   18cbc:	andeq	r4, r1, ip, asr #10
   18cc0:	andeq	r4, r1, r0, lsr r5
   18cc4:	ldrdeq	r4, [r1], -r0
   18cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ccc:	add	fp, sp, #28
   18cd0:	sub	sp, sp, #4
   18cd4:	ldr	r0, [pc, #3180]	; 19948 <__generate_code_for_binary_boolean_expression@@Base+0x2900>
   18cd8:	ldr	r0, [pc, r0]
   18cdc:	cmp	r0, #0
   18ce0:	beq	1933c <__generate_code_for_binary_boolean_expression@@Base+0x22f4>
   18ce4:	ldr	sl, [pc, #3168]	; 1994c <__generate_code_for_binary_boolean_expression@@Base+0x2904>
   18ce8:	add	sl, pc, sl
   18cec:	ldr	r6, [sl, #4]
   18cf0:	ldr	r5, [pc, #3160]	; 19950 <__generate_code_for_binary_boolean_expression@@Base+0x2908>
   18cf4:	ldr	r5, [pc, r5]
   18cf8:	ldr	r8, [pc, #3156]	; 19954 <__generate_code_for_binary_boolean_expression@@Base+0x290c>
   18cfc:	add	r8, pc, r8
   18d00:	ldrb	r0, [r8]
   18d04:	cmp	r0, #0
   18d08:	beq	18dcc <__generate_code_for_binary_boolean_expression@@Base+0x1d84>
   18d0c:	ldr	r9, [pc, #3164]	; 19970 <__generate_code_for_binary_boolean_expression@@Base+0x2928>
   18d10:	adds	r2, r5, #4
   18d14:	adc	ip, r6, #0
   18d18:	add	r9, pc, r9
   18d1c:	ldr	r0, [r9, #4]
   18d20:	ldr	r3, [pc, #3148]	; 19974 <__generate_code_for_binary_boolean_expression@@Base+0x292c>
   18d24:	ldr	r3, [pc, r3]
   18d28:	subs	r3, r3, r2
   18d2c:	sbcs	r0, r0, ip
   18d30:	bcs	18e20 <__generate_code_for_binary_boolean_expression@@Base+0x1dd8>
   18d34:	mov	r0, #7
   18d38:	orr	r0, r0, #131072	; 0x20000
   18d3c:	adds	r0, r5, r0
   18d40:	adc	r1, r6, #0
   18d44:	subs	r0, r0, #4
   18d48:	sbc	r1, r1, #0
   18d4c:	mvn	r2, #0
   18d50:	and	r5, r1, r2
   18d54:	mov	r1, #16646144	; 0xfe0000
   18d58:	orr	r1, r1, #-16777216	; 0xff000000
   18d5c:	ldr	r4, [pc, #3096]	; 1997c <__generate_code_for_binary_boolean_expression@@Base+0x2934>
   18d60:	and	r6, r0, r1
   18d64:	ldr	r0, [pc, #3092]	; 19980 <__generate_code_for_binary_boolean_expression@@Base+0x2938>
   18d68:	mov	r1, r6
   18d6c:	add	r4, pc, r4
   18d70:	ldr	r0, [pc, r0]
   18d74:	bl	11f70 <realloc@plt>
   18d78:	str	r6, [r9]
   18d7c:	str	r5, [r9, #4]
   18d80:	str	r0, [r4]
   18d84:	ldrb	r3, [r8]
   18d88:	ldr	r6, [sl, #4]
   18d8c:	ldr	r5, [pc, #3056]	; 19984 <__generate_code_for_binary_boolean_expression@@Base+0x293c>
   18d90:	mov	r2, r0
   18d94:	mov	r1, #0
   18d98:	mov	r7, #161	; 0xa1
   18d9c:	ldr	r5, [pc, r5]
   18da0:	strb	r1, [r2, r5]!
   18da4:	strb	r7, [r2, #3]
   18da8:	strb	r1, [r2, #2]
   18dac:	strb	r1, [r2, #1]
   18db0:	adds	r2, r5, #4
   18db4:	adc	ip, r6, #0
   18db8:	mov	r7, #1
   18dbc:	cmp	r3, #1
   18dc0:	stm	sl, {r2, ip}
   18dc4:	beq	18e48 <__generate_code_for_binary_boolean_expression@@Base+0x1e00>
   18dc8:	b	19020 <__generate_code_for_binary_boolean_expression@@Base+0x1fd8>
   18dcc:	ldr	r0, [pc, #2948]	; 19958 <__generate_code_for_binary_boolean_expression@@Base+0x2910>
   18dd0:	ldr	r0, [pc, r0]
   18dd4:	mov	r1, r0
   18dd8:	ldrb	r2, [r1, r5]!
   18ddc:	ldrb	r3, [r1, #1]
   18de0:	ldrb	r7, [r1, #2]
   18de4:	ldrb	r1, [r1, #3]
   18de8:	orr	r2, r2, r3, lsl #8
   18dec:	orr	r2, r2, r7, lsl #16
   18df0:	orr	r3, r2, r1, lsl #24
   18df4:	adds	r2, r5, #4
   18df8:	adc	ip, r6, #0
   18dfc:	cmp	r3, #-1593835520	; 0xa1000000
   18e00:	stm	sl, {r2, ip}
   18e04:	beq	18fc0 <__generate_code_for_binary_boolean_expression@@Base+0x1f78>
   18e08:	mov	r7, #1
   18e0c:	cmn	r3, #1
   18e10:	beq	19000 <__generate_code_for_binary_boolean_expression@@Base+0x1fb8>
   18e14:	ldr	r1, [pc, #2880]	; 1995c <__generate_code_for_binary_boolean_expression@@Base+0x2914>
   18e18:	add	r1, pc, r1
   18e1c:	b	19700 <__generate_code_for_binary_boolean_expression@@Base+0x26b8>
   18e20:	ldr	r0, [pc, #2896]	; 19978 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   18e24:	mov	r3, #0
   18e28:	mov	r4, #161	; 0xa1
   18e2c:	ldr	r0, [pc, r0]
   18e30:	mov	r7, r0
   18e34:	strb	r3, [r7, r5]!
   18e38:	strb	r4, [r7, #3]
   18e3c:	strb	r3, [r7, #2]
   18e40:	strb	r3, [r7, #1]
   18e44:	stm	sl, {r2, ip}
   18e48:	ldr	r4, [r9, #4]
   18e4c:	ldr	r1, [pc, #2868]	; 19988 <__generate_code_for_binary_boolean_expression@@Base+0x2940>
   18e50:	adds	r3, r5, #8
   18e54:	adc	r7, r6, #0
   18e58:	ldr	r1, [pc, r1]
   18e5c:	subs	r1, r1, r3
   18e60:	sbcs	r1, r4, r7
   18e64:	bcs	18ef0 <__generate_code_for_binary_boolean_expression@@Base+0x1ea8>
   18e68:	mov	r1, #7
   18e6c:	orr	r1, r1, #131072	; 0x20000
   18e70:	adds	r1, r5, r1
   18e74:	adc	r2, r6, #0
   18e78:	mvn	r3, #0
   18e7c:	and	r5, r2, r3
   18e80:	mov	r2, #16646144	; 0xfe0000
   18e84:	orr	r2, r2, #-16777216	; 0xff000000
   18e88:	ldr	r4, [pc, #2812]	; 1998c <__generate_code_for_binary_boolean_expression@@Base+0x2944>
   18e8c:	and	r6, r1, r2
   18e90:	mov	r1, r6
   18e94:	add	r4, pc, r4
   18e98:	bl	11f70 <realloc@plt>
   18e9c:	str	r6, [r9]
   18ea0:	str	r5, [r9, #4]
   18ea4:	str	r0, [r4]
   18ea8:	ldrb	r1, [r8]
   18eac:	ldr	ip, [sl, #4]
   18eb0:	ldr	r2, [pc, #2776]	; 19990 <__generate_code_for_binary_boolean_expression@@Base+0x2948>
   18eb4:	mov	r7, r0
   18eb8:	mov	r3, #9
   18ebc:	ldr	r2, [pc, r2]
   18ec0:	strb	r3, [r7, r2]!
   18ec4:	mov	r3, #0
   18ec8:	strb	r3, [r7, #3]
   18ecc:	strb	r3, [r7, #2]
   18ed0:	strb	r3, [r7, #1]
   18ed4:	adds	r3, r2, #4
   18ed8:	adc	r5, ip, #0
   18edc:	mov	r7, #1
   18ee0:	cmp	r1, #1
   18ee4:	stm	sl, {r3, r5}
   18ee8:	beq	18f18 <__generate_code_for_binary_boolean_expression@@Base+0x1ed0>
   18eec:	b	19048 <__generate_code_for_binary_boolean_expression@@Base+0x2000>
   18ef0:	mov	r3, r0
   18ef4:	mov	r1, #9
   18ef8:	strb	r1, [r3, r2]!
   18efc:	mov	r1, #0
   18f00:	strb	r1, [r3, #3]
   18f04:	strb	r1, [r3, #2]
   18f08:	strb	r1, [r3, #1]
   18f0c:	adds	r3, r2, #4
   18f10:	adc	r5, ip, #0
   18f14:	stm	sl, {r3, r5}
   18f18:	ldr	r6, [r9, #4]
   18f1c:	ldr	r4, [pc, #2672]	; 19994 <__generate_code_for_binary_boolean_expression@@Base+0x294c>
   18f20:	adds	r1, r2, #8
   18f24:	adc	r7, ip, #0
   18f28:	ldr	r4, [pc, r4]
   18f2c:	subs	r1, r4, r1
   18f30:	sbcs	r1, r6, r7
   18f34:	bcs	1940c <__generate_code_for_binary_boolean_expression@@Base+0x23c4>
   18f38:	mov	r1, #7
   18f3c:	orr	r1, r1, #131072	; 0x20000
   18f40:	adds	r1, r2, r1
   18f44:	adc	r2, ip, #0
   18f48:	mvn	r3, #0
   18f4c:	and	r5, r2, r3
   18f50:	mov	r2, #16646144	; 0xfe0000
   18f54:	orr	r2, r2, #-16777216	; 0xff000000
   18f58:	ldr	r4, [pc, #2616]	; 19998 <__generate_code_for_binary_boolean_expression@@Base+0x2950>
   18f5c:	and	r6, r1, r2
   18f60:	mov	r1, r6
   18f64:	add	r4, pc, r4
   18f68:	bl	11f70 <realloc@plt>
   18f6c:	str	r6, [r9]
   18f70:	str	r5, [r9, #4]
   18f74:	str	r0, [r4]
   18f78:	ldrb	r2, [r8]
   18f7c:	ldr	r5, [sl, #4]
   18f80:	ldr	r3, [pc, #2580]	; 1999c <__generate_code_for_binary_boolean_expression@@Base+0x2954>
   18f84:	mov	r7, r0
   18f88:	mov	r1, #0
   18f8c:	ldr	r3, [pc, r3]
   18f90:	adds	r6, r3, #4
   18f94:	strb	r1, [r7, r3]!
   18f98:	strb	r1, [r7, #3]
   18f9c:	strb	r1, [r7, #2]
   18fa0:	strb	r1, [r7, #1]
   18fa4:	adc	r1, r5, #0
   18fa8:	mov	r7, #1
   18fac:	cmp	r2, #1
   18fb0:	str	r6, [sl]
   18fb4:	str	r1, [sl, #4]
   18fb8:	bne	19070 <__generate_code_for_binary_boolean_expression@@Base+0x2028>
   18fbc:	b	19434 <__generate_code_for_binary_boolean_expression@@Base+0x23ec>
   18fc0:	ldr	r3, [r0, r2]
   18fc4:	adds	r4, r5, #8
   18fc8:	adc	r7, r6, #0
   18fcc:	cmp	r3, #9
   18fd0:	stm	sl, {r4, r7}
   18fd4:	bne	196f8 <__generate_code_for_binary_boolean_expression@@Base+0x26b0>
   18fd8:	ldr	r3, [pc, #2444]	; 1996c <__generate_code_for_binary_boolean_expression@@Base+0x2924>
   18fdc:	adds	r4, r5, #20
   18fe0:	adc	r7, r6, #0
   18fe4:	add	r3, pc, r3
   18fe8:	add	r6, r0, r5
   18fec:	ldrb	r3, [r3]
   18ff0:	ldr	r6, [r6, #16]
   18ff4:	stm	sl, {r4, r7}
   18ff8:	eor	r3, r3, #1
   18ffc:	add	r7, r6, r3
   19000:	mov	r6, r0
   19004:	mov	r3, #0
   19008:	strb	r3, [r6, r5]!
   1900c:	mov	r5, #161	; 0xa1
   19010:	strb	r5, [r6, #3]
   19014:	strb	r3, [r6, #2]
   19018:	strb	r3, [r6, #1]
   1901c:	stm	sl, {r2, ip}
   19020:	mov	r3, r0
   19024:	mov	r1, #9
   19028:	strb	r1, [r3, r2]!
   1902c:	mov	r1, #0
   19030:	strb	r1, [r3, #3]
   19034:	strb	r1, [r3, #2]
   19038:	strb	r1, [r3, #1]
   1903c:	adds	r3, r2, #4
   19040:	adc	r5, ip, #0
   19044:	stm	sl, {r3, r5}
   19048:	mov	r2, r0
   1904c:	mov	r1, #0
   19050:	strb	r1, [r2, r3]!
   19054:	adds	r6, r3, #4
   19058:	strb	r1, [r2, #3]
   1905c:	strb	r1, [r2, #2]
   19060:	strb	r1, [r2, #1]
   19064:	adc	r1, r5, #0
   19068:	str	r6, [sl]
   1906c:	str	r1, [sl, #4]
   19070:	mov	r3, r0
   19074:	mov	r2, #0
   19078:	strb	r2, [r3, r6]!
   1907c:	strb	r2, [r3, #3]
   19080:	strb	r2, [r3, #2]
   19084:	strb	r2, [r3, #1]
   19088:	adds	r2, r6, #4
   1908c:	adc	r3, r1, #0
   19090:	strd	r2, [sl]
   19094:	lsr	r1, r7, #24
   19098:	strb	r7, [r0, r2]!
   1909c:	lsr	r6, r7, #16
   190a0:	lsr	r5, r7, #8
   190a4:	strb	r1, [r0, #3]
   190a8:	strb	r6, [r0, #2]
   190ac:	strb	r5, [r0, #1]
   190b0:	ldrb	r0, [r8]
   190b4:	adds	r4, r2, #4
   190b8:	adc	r5, r3, #0
   190bc:	cmp	r0, #0
   190c0:	strd	r4, [sl]
   190c4:	beq	19178 <__generate_code_for_binary_boolean_expression@@Base+0x2130>
   190c8:	ldr	r9, [pc, #2284]	; 199bc <__generate_code_for_binary_boolean_expression@@Base+0x2974>
   190cc:	adds	r0, r2, #8
   190d0:	adc	r1, r3, #0
   190d4:	add	r9, pc, r9
   190d8:	ldr	r7, [r9, #4]
   190dc:	ldr	r6, [pc, #2268]	; 199c0 <__generate_code_for_binary_boolean_expression@@Base+0x2978>
   190e0:	ldr	r6, [pc, r6]
   190e4:	subs	r0, r6, r0
   190e8:	sbcs	r0, r7, r1
   190ec:	bcs	19344 <__generate_code_for_binary_boolean_expression@@Base+0x22fc>
   190f0:	mov	r0, #7
   190f4:	orr	r0, r0, #131072	; 0x20000
   190f8:	adds	r0, r2, r0
   190fc:	adc	r1, r3, #0
   19100:	mvn	r2, #0
   19104:	and	r5, r1, r2
   19108:	mov	r1, #16646144	; 0xfe0000
   1910c:	orr	r1, r1, #-16777216	; 0xff000000
   19110:	ldr	r4, [pc, #2268]	; 199f4 <__generate_code_for_binary_boolean_expression@@Base+0x29ac>
   19114:	and	r6, r0, r1
   19118:	ldr	r0, [pc, #2264]	; 199f8 <__generate_code_for_binary_boolean_expression@@Base+0x29b0>
   1911c:	mov	r1, r6
   19120:	add	r4, pc, r4
   19124:	ldr	r0, [pc, r0]
   19128:	bl	11f70 <realloc@plt>
   1912c:	str	r6, [r9]
   19130:	str	r5, [r9, #4]
   19134:	str	r0, [r4]
   19138:	ldrb	r1, [r8]
   1913c:	ldr	r5, [sl, #4]
   19140:	ldr	r4, [pc, #2228]	; 199fc <__generate_code_for_binary_boolean_expression@@Base+0x29b4>
   19144:	mov	r3, r0
   19148:	mov	r2, #0
   1914c:	ldr	r4, [pc, r4]
   19150:	strb	r2, [r3, r4]!
   19154:	strb	r2, [r3, #3]
   19158:	strb	r2, [r3, #2]
   1915c:	strb	r2, [r3, #1]
   19160:	adds	r2, r4, #4
   19164:	adc	r3, r5, #0
   19168:	cmp	r1, #0
   1916c:	strd	r2, [sl]
   19170:	beq	191a4 <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   19174:	b	19370 <__generate_code_for_binary_boolean_expression@@Base+0x2328>
   19178:	ldr	r0, [pc, #2104]	; 199b8 <__generate_code_for_binary_boolean_expression@@Base+0x2970>
   1917c:	adds	r2, r2, #8
   19180:	mov	r1, #0
   19184:	adc	r3, r3, #0
   19188:	ldr	r0, [pc, r0]
   1918c:	mov	r7, r0
   19190:	strb	r1, [r7, r4]!
   19194:	strb	r1, [r7, #3]
   19198:	strb	r1, [r7, #2]
   1919c:	strb	r1, [r7, #1]
   191a0:	strd	r2, [sl]
   191a4:	mov	r7, r0
   191a8:	mov	r1, #0
   191ac:	strb	r1, [r7, r2]!
   191b0:	strb	r1, [r7, #3]
   191b4:	strb	r1, [r7, #2]
   191b8:	strb	r1, [r7, #1]
   191bc:	adds	r1, r2, #4
   191c0:	adc	r5, r3, #0
   191c4:	stm	sl, {r1, r5}
   191c8:	mov	r3, r0
   191cc:	mov	r2, #0
   191d0:	strb	r2, [r3, r1]!
   191d4:	strb	r2, [r3, #3]
   191d8:	strb	r2, [r3, #2]
   191dc:	strb	r2, [r3, #1]
   191e0:	adds	r2, r1, #4
   191e4:	adc	r3, r5, #0
   191e8:	strd	r2, [sl]
   191ec:	mov	r7, r0
   191f0:	mov	r1, #0
   191f4:	strb	r1, [r7, r2]!
   191f8:	strb	r1, [r7, #3]
   191fc:	strb	r1, [r7, #2]
   19200:	strb	r1, [r7, #1]
   19204:	adds	r1, r2, #4
   19208:	adc	r5, r3, #0
   1920c:	stm	sl, {r1, r5}
   19210:	mov	r3, r0
   19214:	mov	r2, #0
   19218:	strb	r2, [r3, r1]!
   1921c:	adds	r4, r1, #4
   19220:	strb	r2, [r3, #3]
   19224:	strb	r2, [r3, #2]
   19228:	strb	r2, [r3, #1]
   1922c:	adc	r3, r5, #0
   19230:	str	r4, [sl]
   19234:	str	r3, [sl, #4]
   19238:	mov	r2, r0
   1923c:	mov	r1, #0
   19240:	strb	r1, [r2, r4]!
   19244:	strb	r1, [r2, #3]
   19248:	strb	r1, [r2, #2]
   1924c:	strb	r1, [r2, #1]
   19250:	adds	r2, r4, #4
   19254:	adc	r1, r3, #0
   19258:	str	r2, [sl]
   1925c:	str	r1, [sl, #4]
   19260:	mov	r3, r0
   19264:	mov	r4, #0
   19268:	strb	r4, [r3, r2]!
   1926c:	mov	r7, #163	; 0xa3
   19270:	strb	r7, [r3, #3]
   19274:	strb	r4, [r3, #2]
   19278:	strb	r4, [r3, #1]
   1927c:	ldrb	r7, [r8]
   19280:	adds	r6, r2, #4
   19284:	adc	r3, r1, #0
   19288:	cmp	r7, #1
   1928c:	str	r6, [sl]
   19290:	str	r3, [sl, #4]
   19294:	bne	19308 <__generate_code_for_binary_boolean_expression@@Base+0x22c0>
   19298:	ldr	r8, [pc, #1852]	; 199dc <__generate_code_for_binary_boolean_expression@@Base+0x2994>
   1929c:	adds	lr, r2, #8
   192a0:	adc	ip, r1, #0
   192a4:	add	r8, pc, r8
   192a8:	ldr	r5, [r8, #4]
   192ac:	ldr	r7, [pc, #1836]	; 199e0 <__generate_code_for_binary_boolean_expression@@Base+0x2998>
   192b0:	ldr	r7, [pc, r7]
   192b4:	subs	r7, r7, lr
   192b8:	sbcs	r7, r5, ip
   192bc:	bcs	19308 <__generate_code_for_binary_boolean_expression@@Base+0x22c0>
   192c0:	mov	r3, #7
   192c4:	orr	r3, r3, #131072	; 0x20000
   192c8:	adds	r2, r2, r3
   192cc:	adc	r1, r1, #0
   192d0:	mvn	r3, #0
   192d4:	and	r7, r1, r3
   192d8:	mov	r1, #16646144	; 0xfe0000
   192dc:	orr	r1, r1, #-16777216	; 0xff000000
   192e0:	ldr	r5, [pc, #1788]	; 199e4 <__generate_code_for_binary_boolean_expression@@Base+0x299c>
   192e4:	and	r6, r2, r1
   192e8:	mov	r1, r6
   192ec:	add	r5, pc, r5
   192f0:	bl	11f70 <realloc@plt>
   192f4:	strd	r6, [r8]
   192f8:	str	r0, [r5]
   192fc:	ldr	r3, [sl, #4]
   19300:	ldr	r6, [pc, #1760]	; 199e8 <__generate_code_for_binary_boolean_expression@@Base+0x29a0>
   19304:	ldr	r6, [pc, r6]
   19308:	ldr	r0, [pc, #1756]	; 199ec <__generate_code_for_binary_boolean_expression@@Base+0x29a4>
   1930c:	ldr	r1, [pc, #1756]	; 199f0 <__generate_code_for_binary_boolean_expression@@Base+0x29a8>
   19310:	adds	r2, r6, #4
   19314:	add	r0, pc, r0
   19318:	adc	r3, r3, #0
   1931c:	ldr	r1, [pc, r1]
   19320:	strb	r4, [r1, r6]!
   19324:	strb	r4, [r1, #3]
   19328:	strb	r4, [r1, #2]
   1932c:	strb	r4, [r1, #1]
   19330:	mov	r1, #1
   19334:	strd	r2, [sl]
   19338:	strb	r1, [r0]
   1933c:	sub	sp, fp, #28
   19340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19344:	ldr	r0, [pc, #1656]	; 199c4 <__generate_code_for_binary_boolean_expression@@Base+0x297c>
   19348:	adds	r2, r2, #8
   1934c:	mov	r1, #0
   19350:	adc	r3, r3, #0
   19354:	ldr	r0, [pc, r0]
   19358:	mov	r7, r0
   1935c:	strb	r1, [r7, r4]!
   19360:	strb	r1, [r7, #3]
   19364:	strb	r1, [r7, #2]
   19368:	strb	r1, [r7, #1]
   1936c:	strd	r2, [sl]
   19370:	ldr	r6, [r9, #4]
   19374:	ldr	r1, [pc, #1668]	; 19a00 <__generate_code_for_binary_boolean_expression@@Base+0x29b8>
   19378:	adds	ip, r4, #8
   1937c:	adc	r7, r5, #0
   19380:	ldr	r1, [pc, r1]
   19384:	subs	r1, r1, ip
   19388:	sbcs	r1, r6, r7
   1938c:	bcs	194d8 <__generate_code_for_binary_boolean_expression@@Base+0x2490>
   19390:	mov	r1, #7
   19394:	orr	r1, r1, #131072	; 0x20000
   19398:	adds	r1, r4, r1
   1939c:	adc	r2, r5, #0
   193a0:	mvn	r3, #0
   193a4:	and	r5, r2, r3
   193a8:	mov	r2, #16646144	; 0xfe0000
   193ac:	orr	r2, r2, #-16777216	; 0xff000000
   193b0:	ldr	r6, [pc, #1612]	; 19a04 <__generate_code_for_binary_boolean_expression@@Base+0x29bc>
   193b4:	and	r4, r1, r2
   193b8:	mov	r1, r4
   193bc:	add	r6, pc, r6
   193c0:	bl	11f70 <realloc@plt>
   193c4:	str	r0, [r6]
   193c8:	strd	r4, [r9]
   193cc:	ldrb	r7, [r8]
   193d0:	ldr	r3, [sl, #4]
   193d4:	ldr	r2, [pc, #1580]	; 19a08 <__generate_code_for_binary_boolean_expression@@Base+0x29c0>
   193d8:	mov	r6, r0
   193dc:	mov	r1, #0
   193e0:	ldr	r2, [pc, r2]
   193e4:	strb	r1, [r6, r2]!
   193e8:	strb	r1, [r6, #3]
   193ec:	strb	r1, [r6, #2]
   193f0:	strb	r1, [r6, #1]
   193f4:	adds	r1, r2, #4
   193f8:	adc	r5, r3, #0
   193fc:	cmp	r7, #1
   19400:	stm	sl, {r1, r5}
   19404:	bne	191c8 <__generate_code_for_binary_boolean_expression@@Base+0x2180>
   19408:	b	194fc <__generate_code_for_binary_boolean_expression@@Base+0x24b4>
   1940c:	mov	r2, r0
   19410:	mov	r1, #0
   19414:	strb	r1, [r2, r3]!
   19418:	adds	r6, r3, #4
   1941c:	strb	r1, [r2, #3]
   19420:	strb	r1, [r2, #2]
   19424:	strb	r1, [r2, #1]
   19428:	adc	r1, r5, #0
   1942c:	str	r6, [sl]
   19430:	str	r1, [sl, #4]
   19434:	ldr	r4, [r9, #4]
   19438:	ldr	r2, [pc, #1376]	; 199a0 <__generate_code_for_binary_boolean_expression@@Base+0x2958>
   1943c:	adds	ip, r3, #8
   19440:	adc	r7, r5, #0
   19444:	ldr	r2, [pc, r2]
   19448:	subs	r2, r2, ip
   1944c:	sbcs	r2, r4, r7
   19450:	bcs	1959c <__generate_code_for_binary_boolean_expression@@Base+0x2554>
   19454:	mov	r1, #7
   19458:	orr	r1, r1, #131072	; 0x20000
   1945c:	adds	r1, r3, r1
   19460:	adc	r2, r5, #0
   19464:	mvn	r3, #0
   19468:	and	r5, r2, r3
   1946c:	mov	r2, #16646144	; 0xfe0000
   19470:	orr	r2, r2, #-16777216	; 0xff000000
   19474:	ldr	r4, [pc, #1320]	; 199a4 <__generate_code_for_binary_boolean_expression@@Base+0x295c>
   19478:	and	r6, r1, r2
   1947c:	mov	r1, r6
   19480:	add	r4, pc, r4
   19484:	bl	11f70 <realloc@plt>
   19488:	str	r6, [r9]
   1948c:	str	r5, [r9, #4]
   19490:	str	r0, [r4]
   19494:	ldrb	r5, [r8]
   19498:	ldr	r1, [sl, #4]
   1949c:	ldr	r6, [pc, #1284]	; 199a8 <__generate_code_for_binary_boolean_expression@@Base+0x2960>
   194a0:	mov	r3, r0
   194a4:	mov	r2, #0
   194a8:	mov	r7, #1
   194ac:	ldr	r6, [pc, r6]
   194b0:	strb	r2, [r3, r6]!
   194b4:	strb	r2, [r3, #3]
   194b8:	strb	r2, [r3, #2]
   194bc:	strb	r2, [r3, #1]
   194c0:	adds	r2, r6, #4
   194c4:	adc	r3, r1, #0
   194c8:	cmp	r5, #1
   194cc:	strd	r2, [sl]
   194d0:	bne	19094 <__generate_code_for_binary_boolean_expression@@Base+0x204c>
   194d4:	b	195c0 <__generate_code_for_binary_boolean_expression@@Base+0x2578>
   194d8:	mov	r7, r0
   194dc:	mov	r1, #0
   194e0:	strb	r1, [r7, r2]!
   194e4:	strb	r1, [r7, #3]
   194e8:	strb	r1, [r7, #2]
   194ec:	strb	r1, [r7, #1]
   194f0:	adds	r1, r2, #4
   194f4:	adc	r5, r3, #0
   194f8:	stm	sl, {r1, r5}
   194fc:	ldr	r4, [r9, #4]
   19500:	ldr	r6, [pc, #1284]	; 19a0c <__generate_code_for_binary_boolean_expression@@Base+0x29c4>
   19504:	adds	r7, r2, #8
   19508:	adc	ip, r3, #0
   1950c:	ldr	r6, [pc, r6]
   19510:	subs	r7, r6, r7
   19514:	sbcs	r7, r4, ip
   19518:	bcs	19634 <__generate_code_for_binary_boolean_expression@@Base+0x25ec>
   1951c:	mov	r1, #7
   19520:	orr	r1, r1, #131072	; 0x20000
   19524:	adds	r1, r2, r1
   19528:	adc	r2, r3, #0
   1952c:	mvn	r3, #0
   19530:	and	r5, r2, r3
   19534:	mov	r2, #16646144	; 0xfe0000
   19538:	orr	r2, r2, #-16777216	; 0xff000000
   1953c:	ldr	r4, [pc, #1228]	; 19a10 <__generate_code_for_binary_boolean_expression@@Base+0x29c8>
   19540:	and	r6, r1, r2
   19544:	mov	r1, r6
   19548:	add	r4, pc, r4
   1954c:	bl	11f70 <realloc@plt>
   19550:	str	r6, [r9]
   19554:	str	r5, [r9, #4]
   19558:	str	r0, [r4]
   1955c:	ldrb	r7, [r8]
   19560:	ldr	r5, [sl, #4]
   19564:	ldr	r1, [pc, #1192]	; 19a14 <__generate_code_for_binary_boolean_expression@@Base+0x29cc>
   19568:	mov	r3, r0
   1956c:	mov	r2, #0
   19570:	ldr	r1, [pc, r1]
   19574:	strb	r2, [r3, r1]!
   19578:	strb	r2, [r3, #3]
   1957c:	strb	r2, [r3, #2]
   19580:	strb	r2, [r3, #1]
   19584:	adds	r2, r1, #4
   19588:	adc	r3, r5, #0
   1958c:	cmp	r7, #1
   19590:	strd	r2, [sl]
   19594:	bne	191ec <__generate_code_for_binary_boolean_expression@@Base+0x21a4>
   19598:	b	19658 <__generate_code_for_binary_boolean_expression@@Base+0x2610>
   1959c:	mov	r3, r0
   195a0:	mov	r2, #0
   195a4:	strb	r2, [r3, r6]!
   195a8:	strb	r2, [r3, #3]
   195ac:	strb	r2, [r3, #2]
   195b0:	strb	r2, [r3, #1]
   195b4:	adds	r2, r6, #4
   195b8:	adc	r3, r1, #0
   195bc:	strd	r2, [sl]
   195c0:	ldr	r4, [r9, #4]
   195c4:	ldr	r5, [pc, #992]	; 199ac <__generate_code_for_binary_boolean_expression@@Base+0x2964>
   195c8:	adds	lr, r6, #8
   195cc:	adc	ip, r1, #0
   195d0:	mov	r7, #1
   195d4:	ldr	r5, [pc, r5]
   195d8:	subs	r5, r5, lr
   195dc:	sbcs	r5, r4, ip
   195e0:	bcs	19094 <__generate_code_for_binary_boolean_expression@@Base+0x204c>
   195e4:	mov	r2, #7
   195e8:	orr	r2, r2, #131072	; 0x20000
   195ec:	adds	r2, r6, r2
   195f0:	adc	r1, r1, #0
   195f4:	mvn	r3, #0
   195f8:	and	r5, r1, r3
   195fc:	mov	r1, #16646144	; 0xfe0000
   19600:	orr	r1, r1, #-16777216	; 0xff000000
   19604:	ldr	r4, [pc, #932]	; 199b0 <__generate_code_for_binary_boolean_expression@@Base+0x2968>
   19608:	and	r6, r2, r1
   1960c:	mov	r1, r6
   19610:	add	r4, pc, r4
   19614:	bl	11f70 <realloc@plt>
   19618:	str	r6, [r9]
   1961c:	str	r5, [r9, #4]
   19620:	str	r0, [r4]
   19624:	ldr	r3, [sl, #4]
   19628:	ldr	r2, [pc, #900]	; 199b4 <__generate_code_for_binary_boolean_expression@@Base+0x296c>
   1962c:	ldr	r2, [pc, r2]
   19630:	b	19094 <__generate_code_for_binary_boolean_expression@@Base+0x204c>
   19634:	mov	r3, r0
   19638:	mov	r2, #0
   1963c:	strb	r2, [r3, r1]!
   19640:	strb	r2, [r3, #3]
   19644:	strb	r2, [r3, #2]
   19648:	strb	r2, [r3, #1]
   1964c:	adds	r2, r1, #4
   19650:	adc	r3, r5, #0
   19654:	strd	r2, [sl]
   19658:	ldr	r4, [r9, #4]
   1965c:	ldr	r6, [pc, #948]	; 19a18 <__generate_code_for_binary_boolean_expression@@Base+0x29d0>
   19660:	adds	r7, r1, #8
   19664:	adc	ip, r5, #0
   19668:	ldr	r6, [pc, r6]
   1966c:	subs	r7, r6, r7
   19670:	sbcs	r7, r4, ip
   19674:	bcs	19720 <__generate_code_for_binary_boolean_expression@@Base+0x26d8>
   19678:	mov	r2, #7
   1967c:	orr	r2, r2, #131072	; 0x20000
   19680:	adds	r1, r1, r2
   19684:	adc	r2, r5, #0
   19688:	mvn	r3, #0
   1968c:	and	r5, r2, r3
   19690:	mov	r2, #16646144	; 0xfe0000
   19694:	orr	r2, r2, #-16777216	; 0xff000000
   19698:	ldr	r4, [pc, #892]	; 19a1c <__generate_code_for_binary_boolean_expression@@Base+0x29d4>
   1969c:	and	r6, r1, r2
   196a0:	mov	r1, r6
   196a4:	add	r4, pc, r4
   196a8:	bl	11f70 <realloc@plt>
   196ac:	str	r6, [r9]
   196b0:	str	r5, [r9, #4]
   196b4:	str	r0, [r4]
   196b8:	ldrb	r7, [r8]
   196bc:	ldr	r3, [sl, #4]
   196c0:	ldr	r2, [pc, #856]	; 19a20 <__generate_code_for_binary_boolean_expression@@Base+0x29d8>
   196c4:	mov	r6, r0
   196c8:	mov	r1, #0
   196cc:	ldr	r2, [pc, r2]
   196d0:	strb	r1, [r6, r2]!
   196d4:	strb	r1, [r6, #3]
   196d8:	strb	r1, [r6, #2]
   196dc:	strb	r1, [r6, #1]
   196e0:	adds	r1, r2, #4
   196e4:	adc	r5, r3, #0
   196e8:	cmp	r7, #1
   196ec:	stm	sl, {r1, r5}
   196f0:	bne	19210 <__generate_code_for_binary_boolean_expression@@Base+0x21c8>
   196f4:	b	19744 <__generate_code_for_binary_boolean_expression@@Base+0x26fc>
   196f8:	ldr	r1, [pc, #616]	; 19968 <__generate_code_for_binary_boolean_expression@@Base+0x2920>
   196fc:	add	r1, pc, r1
   19700:	ldr	r0, [pc, #600]	; 19960 <__generate_code_for_binary_boolean_expression@@Base+0x2918>
   19704:	ldr	r0, [pc, r0]
   19708:	ldr	r0, [r0]
   1970c:	ldr	r2, [pc, #592]	; 19964 <__generate_code_for_binary_boolean_expression@@Base+0x291c>
   19710:	ldr	r2, [pc, r2]
   19714:	sub	sp, fp, #28
   19718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1971c:	b	1200c <fprintf@plt>
   19720:	mov	r7, r0
   19724:	mov	r1, #0
   19728:	strb	r1, [r7, r2]!
   1972c:	strb	r1, [r7, #3]
   19730:	strb	r1, [r7, #2]
   19734:	strb	r1, [r7, #1]
   19738:	adds	r1, r2, #4
   1973c:	adc	r5, r3, #0
   19740:	stm	sl, {r1, r5}
   19744:	ldr	r4, [r9, #4]
   19748:	ldr	r6, [pc, #724]	; 19a24 <__generate_code_for_binary_boolean_expression@@Base+0x29dc>
   1974c:	adds	r7, r2, #8
   19750:	adc	ip, r3, #0
   19754:	ldr	r6, [pc, r6]
   19758:	subs	r7, r6, r7
   1975c:	sbcs	r7, r4, ip
   19760:	bcs	197e8 <__generate_code_for_binary_boolean_expression@@Base+0x27a0>
   19764:	mov	r1, #7
   19768:	orr	r1, r1, #131072	; 0x20000
   1976c:	adds	r1, r2, r1
   19770:	adc	r2, r3, #0
   19774:	mvn	r3, #0
   19778:	and	r5, r2, r3
   1977c:	mov	r2, #16646144	; 0xfe0000
   19780:	orr	r2, r2, #-16777216	; 0xff000000
   19784:	ldr	r4, [pc, #668]	; 19a28 <__generate_code_for_binary_boolean_expression@@Base+0x29e0>
   19788:	and	r6, r1, r2
   1978c:	mov	r1, r6
   19790:	add	r4, pc, r4
   19794:	bl	11f70 <realloc@plt>
   19798:	str	r6, [r9]
   1979c:	str	r5, [r9, #4]
   197a0:	str	r0, [r4]
   197a4:	ldrb	r2, [r8]
   197a8:	ldr	r5, [sl, #4]
   197ac:	ldr	r1, [pc, #632]	; 19a2c <__generate_code_for_binary_boolean_expression@@Base+0x29e4>
   197b0:	mov	r7, r0
   197b4:	mov	r3, #0
   197b8:	ldr	r1, [pc, r1]
   197bc:	adds	r4, r1, #4
   197c0:	strb	r3, [r7, r1]!
   197c4:	strb	r3, [r7, #3]
   197c8:	strb	r3, [r7, #2]
   197cc:	strb	r3, [r7, #1]
   197d0:	adc	r3, r5, #0
   197d4:	cmp	r2, #1
   197d8:	str	r4, [sl]
   197dc:	str	r3, [sl, #4]
   197e0:	bne	19238 <__generate_code_for_binary_boolean_expression@@Base+0x21f0>
   197e4:	b	19810 <__generate_code_for_binary_boolean_expression@@Base+0x27c8>
   197e8:	mov	r3, r0
   197ec:	mov	r2, #0
   197f0:	strb	r2, [r3, r1]!
   197f4:	adds	r4, r1, #4
   197f8:	strb	r2, [r3, #3]
   197fc:	strb	r2, [r3, #2]
   19800:	strb	r2, [r3, #1]
   19804:	adc	r3, r5, #0
   19808:	str	r4, [sl]
   1980c:	str	r3, [sl, #4]
   19810:	ldr	r6, [r9, #4]
   19814:	ldr	r2, [pc, #532]	; 19a30 <__generate_code_for_binary_boolean_expression@@Base+0x29e8>
   19818:	adds	ip, r1, #8
   1981c:	adc	r7, r5, #0
   19820:	ldr	r2, [pc, r2]
   19824:	subs	r2, r2, ip
   19828:	sbcs	r2, r6, r7
   1982c:	bcs	198b4 <__generate_code_for_binary_boolean_expression@@Base+0x286c>
   19830:	mov	r2, #7
   19834:	orr	r2, r2, #131072	; 0x20000
   19838:	adds	r1, r1, r2
   1983c:	adc	r2, r5, #0
   19840:	mvn	r3, #0
   19844:	and	r5, r2, r3
   19848:	mov	r2, #16646144	; 0xfe0000
   1984c:	orr	r2, r2, #-16777216	; 0xff000000
   19850:	ldr	r4, [pc, #368]	; 199c8 <__generate_code_for_binary_boolean_expression@@Base+0x2980>
   19854:	and	r6, r1, r2
   19858:	mov	r1, r6
   1985c:	add	r4, pc, r4
   19860:	bl	11f70 <realloc@plt>
   19864:	str	r6, [r9]
   19868:	str	r5, [r9, #4]
   1986c:	str	r0, [r4]
   19870:	ldrb	r7, [r8]
   19874:	ldr	r3, [sl, #4]
   19878:	ldr	r4, [pc, #332]	; 199cc <__generate_code_for_binary_boolean_expression@@Base+0x2984>
   1987c:	mov	r2, r0
   19880:	mov	r1, #0
   19884:	ldr	r4, [pc, r4]
   19888:	strb	r1, [r2, r4]!
   1988c:	strb	r1, [r2, #3]
   19890:	strb	r1, [r2, #2]
   19894:	strb	r1, [r2, #1]
   19898:	adds	r2, r4, #4
   1989c:	adc	r1, r3, #0
   198a0:	cmp	r7, #0
   198a4:	str	r2, [sl]
   198a8:	str	r1, [sl, #4]
   198ac:	beq	19260 <__generate_code_for_binary_boolean_expression@@Base+0x2218>
   198b0:	b	198dc <__generate_code_for_binary_boolean_expression@@Base+0x2894>
   198b4:	mov	r2, r0
   198b8:	mov	r1, #0
   198bc:	strb	r1, [r2, r4]!
   198c0:	strb	r1, [r2, #3]
   198c4:	strb	r1, [r2, #2]
   198c8:	strb	r1, [r2, #1]
   198cc:	adds	r2, r4, #4
   198d0:	adc	r1, r3, #0
   198d4:	str	r2, [sl]
   198d8:	str	r1, [sl, #4]
   198dc:	ldr	r5, [r9, #4]
   198e0:	ldr	r6, [pc, #232]	; 199d0 <__generate_code_for_binary_boolean_expression@@Base+0x2988>
   198e4:	adds	r7, r4, #8
   198e8:	adc	ip, r3, #0
   198ec:	ldr	r6, [pc, r6]
   198f0:	subs	r7, r6, r7
   198f4:	sbcs	r7, r5, ip
   198f8:	bcs	19260 <__generate_code_for_binary_boolean_expression@@Base+0x2218>
   198fc:	mov	r1, #7
   19900:	orr	r1, r1, #131072	; 0x20000
   19904:	adds	r1, r4, r1
   19908:	adc	r2, r3, #0
   1990c:	mvn	r3, #0
   19910:	and	r7, r2, r3
   19914:	mov	r2, #16646144	; 0xfe0000
   19918:	orr	r2, r2, #-16777216	; 0xff000000
   1991c:	ldr	r5, [pc, #176]	; 199d4 <__generate_code_for_binary_boolean_expression@@Base+0x298c>
   19920:	and	r6, r1, r2
   19924:	mov	r1, r6
   19928:	add	r5, pc, r5
   1992c:	bl	11f70 <realloc@plt>
   19930:	strd	r6, [r9]
   19934:	str	r0, [r5]
   19938:	ldr	r1, [sl, #4]
   1993c:	ldr	r2, [pc, #148]	; 199d8 <__generate_code_for_binary_boolean_expression@@Base+0x2990>
   19940:	ldr	r2, [pc, r2]
   19944:	b	19260 <__generate_code_for_binary_boolean_expression@@Base+0x2218>
   19948:	andeq	r4, r1, r0, lsl #8
   1994c:	andeq	r4, r1, r0, lsl #8
   19950:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   19954:	ldrdeq	r4, [r1], -r8
   19958:	andeq	r4, r1, ip, lsl #6
   1995c:	muleq	r0, r6, ip
   19960:			; <UNDEFINED> instruction: 0x000129b4
   19964:	andeq	r3, r1, r0, asr #19
   19968:	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   1996c:	andeq	r4, r1, ip, lsl #2
   19970:	andeq	r4, r1, r8, asr #7
   19974:			; <UNDEFINED> instruction: 0x000143bc
   19978:			; <UNDEFINED> instruction: 0x000142b0
   1997c:	andeq	r4, r1, r0, ror r3
   19980:	andeq	r4, r1, ip, ror #6
   19984:	andeq	r4, r1, ip, asr #6
   19988:	andeq	r4, r1, r8, lsl #5
   1998c:	andeq	r4, r1, r8, asr #4
   19990:	andeq	r4, r1, ip, lsr #4
   19994:			; <UNDEFINED> instruction: 0x000141b8
   19998:	andeq	r4, r1, r8, ror r1
   1999c:	andeq	r4, r1, ip, asr r1
   199a0:	muleq	r1, ip, ip
   199a4:	andeq	r3, r1, ip, asr ip
   199a8:	andeq	r3, r1, ip, lsr ip
   199ac:	andeq	r3, r1, ip, lsl #22
   199b0:	andeq	r3, r1, ip, asr #21
   199b4:			; <UNDEFINED> instruction: 0x00013abc
   199b8:	andeq	r3, r1, r4, asr pc
   199bc:	andeq	r4, r1, ip
   199c0:	andeq	r4, r1, r0
   199c4:	andeq	r3, r1, r8, lsl #27
   199c8:	andeq	r3, r1, r0, lsl #17
   199cc:	andeq	r3, r1, r4, ror #16
   199d0:	strdeq	r3, [r1], -r4
   199d4:			; <UNDEFINED> instruction: 0x000137b4
   199d8:	andeq	r3, r1, r8, lsr #15
   199dc:	andeq	r3, r1, ip, lsr lr
   199e0:	andeq	r3, r1, r0, lsr lr
   199e4:	strdeq	r3, [r1], -r0
   199e8:	andeq	r3, r1, r4, ror #27
   199ec:	ldrdeq	r3, [r1], -ip
   199f0:	andeq	r3, r1, r0, asr #27
   199f4:			; <UNDEFINED> instruction: 0x00013fbc
   199f8:			; <UNDEFINED> instruction: 0x00013fb8
   199fc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19a00:	andeq	r3, r1, r0, ror #26
   19a04:	andeq	r3, r1, r0, lsr #26
   19a08:	andeq	r3, r1, r8, lsl #26
   19a0c:	ldrdeq	r3, [r1], -r4
   19a10:	muleq	r1, r4, fp
   19a14:	andeq	r3, r1, r8, ror fp
   19a18:	andeq	r3, r1, r8, ror sl
   19a1c:	andeq	r3, r1, r8, lsr sl
   19a20:	andeq	r3, r1, ip, lsl sl
   19a24:	andeq	r3, r1, ip, lsl #19
   19a28:	andeq	r3, r1, ip, asr #18
   19a2c:	andeq	r3, r1, r0, lsr r9
   19a30:	andeq	r3, r1, r0, asr #17
   19a34:	ldr	r0, [pc, #508]	; 19c38 <__generate_code_for_binary_boolean_expression@@Base+0x2bf0>
   19a38:	ldr	r0, [pc, r0]
   19a3c:	cmp	r0, #0
   19a40:	beq	19bf0 <__generate_code_for_binary_boolean_expression@@Base+0x2ba8>
   19a44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19a48:	add	fp, sp, #24
   19a4c:	ldr	r9, [pc, #488]	; 19c3c <__generate_code_for_binary_boolean_expression@@Base+0x2bf4>
   19a50:	mov	r4, #0
   19a54:	mov	r1, #0
   19a58:	add	r9, pc, r9
   19a5c:	ldrb	r0, [r9]
   19a60:	cmp	r0, #1
   19a64:	bne	19ae8 <__generate_code_for_binary_boolean_expression@@Base+0x2aa0>
   19a68:	ldr	r0, [pc, #464]	; 19c40 <__generate_code_for_binary_boolean_expression@@Base+0x2bf8>
   19a6c:	ldr	r8, [pc, #464]	; 19c44 <__generate_code_for_binary_boolean_expression@@Base+0x2bfc>
   19a70:	mov	r1, #1
   19a74:	add	r0, pc, r0
   19a78:	add	r8, pc, r8
   19a7c:	ldr	r0, [r0, #4]
   19a80:	ldr	r2, [pc, #448]	; 19c48 <__generate_code_for_binary_boolean_expression@@Base+0x2c00>
   19a84:	ldr	r2, [pc, r2]
   19a88:	ldr	r7, [r8, #4]
   19a8c:	ldr	r5, [pc, #440]	; 19c4c <__generate_code_for_binary_boolean_expression@@Base+0x2c04>
   19a90:	adds	r3, r2, #8
   19a94:	adc	r6, r0, #0
   19a98:	ldr	r5, [pc, r5]
   19a9c:	subs	r3, r5, r3
   19aa0:	sbcs	r3, r7, r6
   19aa4:	bcs	19ae8 <__generate_code_for_binary_boolean_expression@@Base+0x2aa0>
   19aa8:	mov	r1, #7
   19aac:	orr	r1, r1, #131072	; 0x20000
   19ab0:	adds	r1, r2, r1
   19ab4:	adc	r7, r0, #0
   19ab8:	mov	r0, #16646144	; 0xfe0000
   19abc:	orr	r0, r0, #-16777216	; 0xff000000
   19ac0:	ldr	r5, [pc, #392]	; 19c50 <__generate_code_for_binary_boolean_expression@@Base+0x2c08>
   19ac4:	and	r6, r1, r0
   19ac8:	ldr	r0, [pc, #388]	; 19c54 <__generate_code_for_binary_boolean_expression@@Base+0x2c0c>
   19acc:	mov	r1, r6
   19ad0:	add	r5, pc, r5
   19ad4:	ldr	r0, [pc, r0]
   19ad8:	bl	11f70 <realloc@plt>
   19adc:	ldrb	r1, [r9]
   19ae0:	strd	r6, [r8]
   19ae4:	str	r0, [r5]
   19ae8:	ldr	r3, [pc, #360]	; 19c58 <__generate_code_for_binary_boolean_expression@@Base+0x2c10>
   19aec:	ldr	r2, [pc, #360]	; 19c5c <__generate_code_for_binary_boolean_expression@@Base+0x2c14>
   19af0:	add	r3, pc, r3
   19af4:	ldr	r2, [pc, r2]
   19af8:	ldr	r0, [pc, #352]	; 19c60 <__generate_code_for_binary_boolean_expression@@Base+0x2c18>
   19afc:	ldr	r0, [pc, r0]
   19b00:	ldr	r7, [r3, #4]
   19b04:	mov	r6, r0
   19b08:	strb	r4, [r6, r2]!
   19b0c:	adds	r2, r2, #8
   19b10:	adc	r5, r7, #0
   19b14:	strb	r4, [r6, #5]
   19b18:	strb	r4, [r6, #3]
   19b1c:	strb	r4, [r6, #2]
   19b20:	strb	r4, [r6, #1]
   19b24:	strb	r4, [r6, #4]!
   19b28:	cmp	r1, #0
   19b2c:	strb	r4, [r6, #3]
   19b30:	strb	r4, [r6, #2]
   19b34:	stm	r3, {r2, r5}
   19b38:	beq	19b60 <__generate_code_for_binary_boolean_expression@@Base+0x2b18>
   19b3c:	ldr	r3, [pc, #288]	; 19c64 <__generate_code_for_binary_boolean_expression@@Base+0x2c1c>
   19b40:	mov	r1, r2
   19b44:	mov	r2, #1
   19b48:	ldr	r3, [pc, r3]
   19b4c:	bl	11f7c <fwrite@plt>
   19b50:	ldr	r0, [pc, #272]	; 19c68 <__generate_code_for_binary_boolean_expression@@Base+0x2c20>
   19b54:	ldr	r0, [pc, r0]
   19b58:	bl	11f28 <free@plt>
   19b5c:	b	19bac <__generate_code_for_binary_boolean_expression@@Base+0x2b64>
   19b60:	ldr	r1, [pc, #260]	; 19c6c <__generate_code_for_binary_boolean_expression@@Base+0x2c24>
   19b64:	mov	r2, #4
   19b68:	ldr	r1, [pc, r1]
   19b6c:	bl	120a8 <msync@plt>
   19b70:	cmn	r0, #1
   19b74:	beq	19bfc <__generate_code_for_binary_boolean_expression@@Base+0x2bb4>
   19b78:	ldr	r1, [pc, #252]	; 19c7c <__generate_code_for_binary_boolean_expression@@Base+0x2c34>
   19b7c:	ldr	r1, [pc, r1]
   19b80:	ldr	r0, [pc, #248]	; 19c80 <__generate_code_for_binary_boolean_expression@@Base+0x2c38>
   19b84:	ldr	r0, [pc, r0]
   19b88:	bl	12078 <munmap@plt>
   19b8c:	ldr	r0, [pc, #240]	; 19c84 <__generate_code_for_binary_boolean_expression@@Base+0x2c3c>
   19b90:	ldr	r1, [pc, #240]	; 19c88 <__generate_code_for_binary_boolean_expression@@Base+0x2c40>
   19b94:	mov	r2, #0
   19b98:	add	r0, pc, r0
   19b9c:	add	r1, pc, r1
   19ba0:	str	r2, [r0]
   19ba4:	str	r2, [r0, #4]
   19ba8:	str	r2, [r1]
   19bac:	ldr	r0, [pc, #216]	; 19c8c <__generate_code_for_binary_boolean_expression@@Base+0x2c44>
   19bb0:	ldr	r0, [pc, r0]
   19bb4:	bl	11f1c <fflush@plt>
   19bb8:	ldr	r0, [pc, #208]	; 19c90 <__generate_code_for_binary_boolean_expression@@Base+0x2c48>
   19bbc:	ldr	r0, [pc, r0]
   19bc0:	bl	1a13c <__gcov_flush@@Base+0x30c>
   19bc4:	ldr	r0, [pc, #200]	; 19c94 <__generate_code_for_binary_boolean_expression@@Base+0x2c4c>
   19bc8:	ldr	r0, [pc, r0]
   19bcc:	bl	12060 <fclose@plt>
   19bd0:	ldr	r0, [pc, #192]	; 19c98 <__generate_code_for_binary_boolean_expression@@Base+0x2c50>
   19bd4:	ldr	r1, [pc, #192]	; 19c9c <__generate_code_for_binary_boolean_expression@@Base+0x2c54>
   19bd8:	mov	r2, #0
   19bdc:	add	r0, pc, r0
   19be0:	add	r1, pc, r1
   19be4:	str	r2, [r0]
   19be8:	str	r2, [r1]
   19bec:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   19bf0:	ldr	r0, [pc, #168]	; 19ca0 <__generate_code_for_binary_boolean_expression@@Base+0x2c58>
   19bf4:	ldr	r0, [pc, r0]
   19bf8:	b	11f28 <free@plt>
   19bfc:	bl	12018 <__errno_location@plt>
   19c00:	ldr	r1, [pc, #104]	; 19c70 <__generate_code_for_binary_boolean_expression@@Base+0x2c28>
   19c04:	ldr	r1, [pc, r1]
   19c08:	ldr	r0, [r0]
   19c0c:	ldr	r4, [r1]
   19c10:	ldr	r5, [pc, #92]	; 19c74 <__generate_code_for_binary_boolean_expression@@Base+0x2c2c>
   19c14:	ldr	r5, [pc, r5]
   19c18:	bl	11fb8 <strerror@plt>
   19c1c:	ldr	r1, [pc, #84]	; 19c78 <__generate_code_for_binary_boolean_expression@@Base+0x2c30>
   19c20:	mov	r3, r0
   19c24:	mov	r0, r4
   19c28:	add	r1, pc, r1
   19c2c:	mov	r2, r5
   19c30:	bl	1200c <fprintf@plt>
   19c34:	b	19b78 <__generate_code_for_binary_boolean_expression@@Base+0x2b30>
   19c38:	andeq	r3, r1, r0, lsr #13
   19c3c:	andeq	r3, r1, ip, ror r6
   19c40:	andeq	r3, r1, r4, ror r6
   19c44:	andeq	r3, r1, r8, ror #12
   19c48:	andeq	r3, r1, r4, ror #12
   19c4c:	andeq	r3, r1, r8, asr #12
   19c50:	andeq	r3, r1, ip, lsl #12
   19c54:	andeq	r3, r1, r8, lsl #12
   19c58:	strdeq	r3, [r1], -r8
   19c5c:	strdeq	r3, [r1], -r4
   19c60:	andeq	r3, r1, r0, ror #11
   19c64:	muleq	r1, r0, r5
   19c68:	andeq	r3, r1, r8, lsl #11
   19c6c:	muleq	r1, r8, r5
   19c70:			; <UNDEFINED> instruction: 0x000124b4
   19c74:			; <UNDEFINED> instruction: 0x000134bc
   19c78:	andeq	r1, r0, r1, asr #30
   19c7c:	andeq	r3, r1, r4, lsl #11
   19c80:	andeq	r3, r1, r8, asr r5
   19c84:	andeq	r3, r1, r8, ror #10
   19c88:	andeq	r3, r1, r0, asr #10
   19c8c:	andeq	r3, r1, r8, lsr #10
   19c90:	andeq	r2, r1, r8, lsr #10
   19c94:	andeq	r3, r1, r0, lsl r5
   19c98:	strdeq	r3, [r1], -ip
   19c9c:	strdeq	r3, [r1], -ip
   19ca0:	ldrdeq	r3, [r1], -ip
   19ca4:	push	{r4, sl, fp, lr}
   19ca8:	add	fp, sp, #8
   19cac:	mov	r4, r0
   19cb0:	mov	r0, #12
   19cb4:	bl	11fa0 <malloc@plt>
   19cb8:	ldr	r1, [pc, #60]	; 19cfc <__generate_code_for_binary_boolean_expression@@Base+0x2cb4>
   19cbc:	mov	r2, #0
   19cc0:	add	r1, pc, r1
   19cc4:	stm	r0, {r1, r4}
   19cc8:	str	r2, [r0, #8]
   19ccc:	ldr	r1, [pc, #44]	; 19d00 <__generate_code_for_binary_boolean_expression@@Base+0x2cb8>
   19cd0:	ldr	r1, [pc, r1]
   19cd4:	mov	r2, r1
   19cd8:	ldr	r3, [r2], #4
   19cdc:	ldr	r4, [r2]
   19ce0:	cmp	r3, #0
   19ce4:	mov	r3, r2
   19ce8:	addne	r3, r4, #8
   19cec:	moveq	r2, r1
   19cf0:	str	r0, [r3]
   19cf4:	str	r0, [r2]
   19cf8:	pop	{r4, sl, fp, pc}
   19cfc:	andeq	r3, r1, r4, lsr r4
   19d00:	andeq	r2, r1, r4, ror #7
   19d04:	push	{r4, r5, fp, lr}
   19d08:	add	fp, sp, #8
   19d0c:	ldr	r0, [pc, #56]	; 19d4c <__generate_code_for_binary_boolean_expression@@Base+0x2d04>
   19d10:	ldr	r0, [pc, r0]
   19d14:	ldr	r4, [r0]
   19d18:	cmp	r4, #0
   19d1c:	beq	19d48 <__generate_code_for_binary_boolean_expression@@Base+0x2d00>
   19d20:	ldr	r5, [pc, #40]	; 19d50 <__generate_code_for_binary_boolean_expression@@Base+0x2d08>
   19d24:	add	r5, pc, r5
   19d28:	ldr	r0, [r4]
   19d2c:	cmp	r0, r5
   19d30:	bne	19d3c <__generate_code_for_binary_boolean_expression@@Base+0x2cf4>
   19d34:	ldr	r0, [r4, #4]
   19d38:	blx	r0
   19d3c:	ldr	r4, [r4, #8]
   19d40:	cmp	r4, #0
   19d44:	bne	19d28 <__generate_code_for_binary_boolean_expression@@Base+0x2ce0>
   19d48:	pop	{r4, r5, fp, pc}
   19d4c:	andeq	r2, r1, r4, lsr #7
   19d50:	ldrdeq	r3, [r1], -r0
   19d54:	push	{r4, r5, r6, r7, fp, lr}
   19d58:	add	fp, sp, #16
   19d5c:	ldr	r4, [pc, #100]	; 19dc8 <__generate_code_for_binary_boolean_expression@@Base+0x2d80>
   19d60:	ldr	r4, [pc, r4]
   19d64:	ldr	r0, [r4]
   19d68:	cmp	r0, #0
   19d6c:	beq	19dc4 <__generate_code_for_binary_boolean_expression@@Base+0x2d7c>
   19d70:	ldr	r5, [pc, #84]	; 19dcc <__generate_code_for_binary_boolean_expression@@Base+0x2d84>
   19d74:	mov	r6, #0
   19d78:	add	r5, pc, r5
   19d7c:	ldr	r1, [r0]
   19d80:	ldr	r7, [r0, #8]
   19d84:	cmp	r1, r5
   19d88:	beq	19d94 <__generate_code_for_binary_boolean_expression@@Base+0x2d4c>
   19d8c:	mov	r6, r0
   19d90:	b	19db8 <__generate_code_for_binary_boolean_expression@@Base+0x2d70>
   19d94:	ldr	r1, [r4]
   19d98:	cmp	r0, r1
   19d9c:	streq	r7, [r4]
   19da0:	ldr	r1, [r4, #4]
   19da4:	cmp	r0, r1
   19da8:	streq	r6, [r4, #4]
   19dac:	cmp	r6, #0
   19db0:	strne	r7, [r6, #8]
   19db4:	bl	11f28 <free@plt>
   19db8:	mov	r0, r7
   19dbc:	cmp	r7, #0
   19dc0:	bne	19d7c <__generate_code_for_binary_boolean_expression@@Base+0x2d34>
   19dc4:	pop	{r4, r5, r6, r7, fp, pc}
   19dc8:	andeq	r2, r1, r4, asr r3
   19dcc:	andeq	r3, r1, ip, ror r3
   19dd0:	push	{r4, sl, fp, lr}
   19dd4:	add	fp, sp, #8
   19dd8:	mov	r4, r0
   19ddc:	mov	r0, #12
   19de0:	bl	11fa0 <malloc@plt>
   19de4:	ldr	r1, [pc, #60]	; 19e28 <__generate_code_for_binary_boolean_expression@@Base+0x2de0>
   19de8:	mov	r2, #0
   19dec:	add	r1, pc, r1
   19df0:	stm	r0, {r1, r4}
   19df4:	str	r2, [r0, #8]
   19df8:	ldr	r1, [pc, #44]	; 19e2c <__generate_code_for_binary_boolean_expression@@Base+0x2de4>
   19dfc:	ldr	r1, [pc, r1]
   19e00:	mov	r2, r1
   19e04:	ldr	r3, [r2], #4
   19e08:	ldr	r4, [r2]
   19e0c:	cmp	r3, #0
   19e10:	mov	r3, r2
   19e14:	addne	r3, r4, #8
   19e18:	moveq	r2, r1
   19e1c:	str	r0, [r3]
   19e20:	str	r0, [r2]
   19e24:	pop	{r4, sl, fp, pc}
   19e28:	andeq	r3, r1, r8, lsl #6
   19e2c:			; <UNDEFINED> instruction: 0x000122b4

00019e30 <__gcov_flush@@Base>:
   19e30:	push	{r4, sl, fp, lr}
   19e34:	add	fp, sp, #8
   19e38:	ldr	r0, [pc, #36]	; 19e64 <__gcov_flush@@Base+0x34>
   19e3c:	ldr	r0, [pc, r0]
   19e40:	ldr	r4, [r0]
   19e44:	cmp	r4, #0
   19e48:	beq	19e60 <__gcov_flush@@Base+0x30>
   19e4c:	ldr	r0, [r4, #4]
   19e50:	blx	r0
   19e54:	ldr	r4, [r4, #8]
   19e58:	cmp	r4, #0
   19e5c:	bne	19e4c <__gcov_flush@@Base+0x1c>
   19e60:	pop	{r4, sl, fp, pc}
   19e64:	andeq	r2, r1, r4, ror r2
   19e68:	push	{r4, r5, r6, r7, fp, lr}
   19e6c:	add	fp, sp, #16
   19e70:	ldr	r4, [pc, #100]	; 19edc <__gcov_flush@@Base+0xac>
   19e74:	ldr	r4, [pc, r4]
   19e78:	ldr	r0, [r4]
   19e7c:	cmp	r0, #0
   19e80:	beq	19ed8 <__gcov_flush@@Base+0xa8>
   19e84:	ldr	r5, [pc, #84]	; 19ee0 <__gcov_flush@@Base+0xb0>
   19e88:	mov	r6, #0
   19e8c:	add	r5, pc, r5
   19e90:	ldr	r1, [r0]
   19e94:	ldr	r7, [r0, #8]
   19e98:	cmp	r1, r5
   19e9c:	beq	19ea8 <__gcov_flush@@Base+0x78>
   19ea0:	mov	r6, r0
   19ea4:	b	19ecc <__gcov_flush@@Base+0x9c>
   19ea8:	ldr	r1, [r4]
   19eac:	cmp	r0, r1
   19eb0:	streq	r7, [r4]
   19eb4:	ldr	r1, [r4, #4]
   19eb8:	cmp	r0, r1
   19ebc:	streq	r6, [r4, #4]
   19ec0:	cmp	r6, #0
   19ec4:	strne	r7, [r6, #8]
   19ec8:	bl	11f28 <free@plt>
   19ecc:	mov	r0, r7
   19ed0:	cmp	r7, #0
   19ed4:	bne	19e90 <__gcov_flush@@Base+0x60>
   19ed8:	pop	{r4, r5, r6, r7, fp, pc}
   19edc:	andeq	r2, r1, ip, lsr r2
   19ee0:	andeq	r3, r1, r8, ror #4
   19ee4:	push	{r4, r5, fp, lr}
   19ee8:	add	fp, sp, #8
   19eec:	mov	r4, r1
   19ef0:	cmp	r0, #0
   19ef4:	beq	19f44 <__gcov_flush@@Base+0x114>
   19ef8:	mov	r5, r0
   19efc:	mov	r0, #12
   19f00:	bl	11fa0 <malloc@plt>
   19f04:	ldr	r1, [pc, #204]	; 19fd8 <__gcov_flush@@Base+0x1a8>
   19f08:	mov	r2, #0
   19f0c:	add	r1, pc, r1
   19f10:	stm	r0, {r1, r5}
   19f14:	str	r2, [r0, #8]
   19f18:	ldr	r1, [pc, #188]	; 19fdc <__gcov_flush@@Base+0x1ac>
   19f1c:	ldr	r1, [pc, r1]
   19f20:	mov	r2, r1
   19f24:	ldr	r3, [r2], #4
   19f28:	ldr	r5, [r2]
   19f2c:	cmp	r3, #0
   19f30:	mov	r3, r2
   19f34:	addne	r3, r5, #8
   19f38:	moveq	r2, r1
   19f3c:	str	r0, [r3]
   19f40:	str	r0, [r2]
   19f44:	cmp	r4, #0
   19f48:	beq	19f94 <__gcov_flush@@Base+0x164>
   19f4c:	mov	r0, #12
   19f50:	bl	11fa0 <malloc@plt>
   19f54:	ldr	r1, [pc, #132]	; 19fe0 <__gcov_flush@@Base+0x1b0>
   19f58:	mov	r2, #0
   19f5c:	add	r1, pc, r1
   19f60:	stm	r0, {r1, r4}
   19f64:	str	r2, [r0, #8]
   19f68:	ldr	r1, [pc, #116]	; 19fe4 <__gcov_flush@@Base+0x1b4>
   19f6c:	ldr	r1, [pc, r1]
   19f70:	mov	r2, r1
   19f74:	ldr	r3, [r2], #4
   19f78:	ldr	r5, [r2]
   19f7c:	cmp	r3, #0
   19f80:	mov	r3, r2
   19f84:	addne	r3, r5, #8
   19f88:	moveq	r2, r1
   19f8c:	str	r0, [r3]
   19f90:	str	r0, [r2]
   19f94:	ldr	r1, [pc, #76]	; 19fe8 <__gcov_flush@@Base+0x1b8>
   19f98:	add	r1, pc, r1
   19f9c:	ldrb	r0, [r1]
   19fa0:	cmp	r0, #0
   19fa4:	popne	{r4, r5, fp, pc}
   19fa8:	ldr	r0, [pc, #60]	; 19fec <__gcov_flush@@Base+0x1bc>
   19fac:	mov	r2, #1
   19fb0:	strb	r2, [r1]
   19fb4:	add	r0, pc, r0
   19fb8:	bl	1a498 <__libc_csu_fini@@Base+0x4>
   19fbc:	ldr	r0, [pc, #44]	; 19ff0 <__gcov_flush@@Base+0x1c0>
   19fc0:	add	r0, pc, r0
   19fc4:	bl	1a498 <__libc_csu_fini@@Base+0x4>
   19fc8:	ldr	r0, [pc, #36]	; 19ff4 <__gcov_flush@@Base+0x1c4>
   19fcc:	add	r0, pc, r0
   19fd0:	pop	{r4, r5, fp, lr}
   19fd4:	b	1a498 <__libc_csu_fini@@Base+0x4>
   19fd8:	andeq	r3, r1, r8, ror #3
   19fdc:	muleq	r1, r8, r1
   19fe0:	muleq	r1, r8, r1
   19fe4:	andeq	r2, r1, r4, asr #2
   19fe8:	andeq	r3, r1, r0, ror #2
   19fec:			; <UNDEFINED> instruction: 0xfffffeac
   19ff0:			; <UNDEFINED> instruction: 0xfffffd8c
   19ff4:			; <UNDEFINED> instruction: 0xfffffd30
   19ff8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ffc:	add	fp, sp, #24
   1a000:	ldr	r7, [pc, #76]	; 1a054 <__gcov_flush@@Base+0x224>
   1a004:	mov	r4, r0
   1a008:	mov	r5, #1
   1a00c:	mov	r8, #0
   1a010:	ldr	r7, [pc, r7]
   1a014:	mov	r6, #47	; 0x2f
   1a018:	b	1a020 <__gcov_flush@@Base+0x1f0>
   1a01c:	add	r5, r5, #1
   1a020:	ldrb	r0, [r4, r5]
   1a024:	cmp	r0, #47	; 0x2f
   1a028:	beq	1a038 <__gcov_flush@@Base+0x208>
   1a02c:	cmp	r0, #0
   1a030:	bne	1a01c <__gcov_flush@@Base+0x1ec>
   1a034:	b	1a050 <__gcov_flush@@Base+0x220>
   1a038:	strb	r8, [r4, r5]
   1a03c:	ldr	r1, [r7]
   1a040:	mov	r0, r4
   1a044:	bl	12030 <mkdir@plt>
   1a048:	strb	r6, [r4, r5]
   1a04c:	b	1a01c <__gcov_flush@@Base+0x1ec>
   1a050:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a054:	muleq	r1, ip, r0
   1a058:	ldr	r0, [pc, #8]	; 1a068 <__gcov_flush@@Base+0x238>
   1a05c:	ldr	r0, [pc, r0]
   1a060:	ldr	r0, [r0]
   1a064:	bx	lr
   1a068:	andeq	r2, r1, r0, asr r0
   1a06c:	ldr	r1, [pc, #8]	; 1a07c <__gcov_flush@@Base+0x24c>
   1a070:	ldr	r1, [pc, r1]
   1a074:	str	r0, [r1]
   1a078:	bx	lr
   1a07c:	andeq	r2, r1, ip, lsr r0
   1a080:	push	{r4, r5, r6, sl, fp, lr}
   1a084:	add	fp, sp, #16
   1a088:	sub	sp, sp, #392	; 0x188
   1a08c:	mov	r6, sp
   1a090:	mov	r5, r0
   1a094:	mov	r0, r6
   1a098:	mov	r4, r1
   1a09c:	bl	11f58 <uname@plt>
   1a0a0:	cmp	r0, #0
   1a0a4:	blt	1a0bc <__gcov_flush@@Base+0x28c>
   1a0a8:	add	r1, r6, #65	; 0x41
   1a0ac:	mov	r0, r5
   1a0b0:	mov	r2, r4
   1a0b4:	bl	12048 <strncpy@plt>
   1a0b8:	mov	r0, #0
   1a0bc:	sub	sp, fp, #16
   1a0c0:	pop	{r4, r5, r6, sl, fp, pc}
   1a0c4:	push	{r4, r5, r6, sl, fp, lr}
   1a0c8:	add	fp, sp, #16
   1a0cc:	sub	sp, sp, #32
   1a0d0:	mov	r4, #0
   1a0d4:	mov	r5, r0
   1a0d8:	str	r4, [sp, #20]
   1a0dc:	str	r4, [sp, #16]
   1a0e0:	str	r4, [sp, #12]
   1a0e4:	str	r4, [sp, #8]
   1a0e8:	strh	r4, [sp, #2]
   1a0ec:	bl	11fd0 <getpid@plt>
   1a0f0:	mov	r6, sp
   1a0f4:	str	r0, [sp, #24]
   1a0f8:	mov	r0, #1
   1a0fc:	strh	r0, [sp]
   1a100:	mov	r0, r5
   1a104:	mov	r1, #14
   1a108:	mov	r2, r6
   1a10c:	bl	12084 <fcntl64@plt>
   1a110:	cmn	r0, #1
   1a114:	bne	1a130 <__gcov_flush@@Base+0x300>
   1a118:	bl	12018 <__errno_location@plt>
   1a11c:	ldr	r0, [r0]
   1a120:	cmp	r0, #4
   1a124:	beq	1a100 <__gcov_flush@@Base+0x2d0>
   1a128:	cmp	r0, #37	; 0x25
   1a12c:	mvneq	r4, #0
   1a130:	mov	r0, r4
   1a134:	sub	sp, fp, #16
   1a138:	pop	{r4, r5, r6, sl, fp, pc}
   1a13c:	push	{r4, r5, r6, sl, fp, lr}
   1a140:	add	fp, sp, #16
   1a144:	sub	sp, sp, #32
   1a148:	mov	r4, #0
   1a14c:	mov	r5, r0
   1a150:	str	r4, [sp, #20]
   1a154:	str	r4, [sp, #16]
   1a158:	str	r4, [sp, #12]
   1a15c:	str	r4, [sp, #8]
   1a160:	strh	r4, [sp, #2]
   1a164:	bl	11fd0 <getpid@plt>
   1a168:	mov	r6, sp
   1a16c:	str	r0, [sp, #24]
   1a170:	mov	r0, #2
   1a174:	strh	r0, [sp]
   1a178:	mov	r0, r5
   1a17c:	mov	r1, #14
   1a180:	mov	r2, r6
   1a184:	bl	12084 <fcntl64@plt>
   1a188:	cmn	r0, #1
   1a18c:	bne	1a1a8 <__gcov_flush@@Base+0x378>
   1a190:	bl	12018 <__errno_location@plt>
   1a194:	ldr	r0, [r0]
   1a198:	cmp	r0, #4
   1a19c:	beq	1a178 <__gcov_flush@@Base+0x348>
   1a1a0:	cmp	r0, #37	; 0x25
   1a1a4:	mvneq	r4, #0
   1a1a8:	mov	r0, r4
   1a1ac:	sub	sp, fp, #16
   1a1b0:	pop	{r4, r5, r6, sl, fp, pc}
   1a1b4:	push	{r4, r5, fp, lr}
   1a1b8:	add	fp, sp, #8
   1a1bc:	sub	sp, sp, #32
   1a1c0:	mov	r2, #182	; 0xb6
   1a1c4:	orr	r2, r2, #256	; 0x100
   1a1c8:	mov	r1, #66	; 0x42
   1a1cc:	bl	11f88 <open64@plt>
   1a1d0:	cmp	r0, #0
   1a1d4:	blt	1a250 <__gcov_flush@@Base+0x420>
   1a1d8:	mov	r4, r0
   1a1dc:	mov	r0, #0
   1a1e0:	str	r0, [sp, #20]
   1a1e4:	str	r0, [sp, #16]
   1a1e8:	str	r0, [sp, #12]
   1a1ec:	str	r0, [sp, #8]
   1a1f0:	strh	r0, [sp, #2]
   1a1f4:	bl	11fd0 <getpid@plt>
   1a1f8:	mov	r5, sp
   1a1fc:	str	r0, [sp, #24]
   1a200:	mov	r0, #1
   1a204:	strh	r0, [sp]
   1a208:	mov	r0, r4
   1a20c:	mov	r1, #14
   1a210:	mov	r2, r5
   1a214:	bl	12084 <fcntl64@plt>
   1a218:	cmn	r0, #1
   1a21c:	bne	1a238 <__gcov_flush@@Base+0x408>
   1a220:	bl	12018 <__errno_location@plt>
   1a224:	ldr	r0, [r0]
   1a228:	cmp	r0, #4
   1a22c:	beq	1a208 <__gcov_flush@@Base+0x3d8>
   1a230:	cmp	r0, #37	; 0x25
   1a234:	beq	1a25c <__gcov_flush@@Base+0x42c>
   1a238:	ldr	r1, [pc, #76]	; 1a28c <__gcov_flush@@Base+0x45c>
   1a23c:	mov	r0, r4
   1a240:	add	r1, pc, r1
   1a244:	bl	11ef8 <fdopen@plt>
   1a248:	sub	sp, fp, #8
   1a24c:	pop	{r4, r5, fp, pc}
   1a250:	mov	r0, #0
   1a254:	sub	sp, fp, #8
   1a258:	pop	{r4, r5, fp, pc}
   1a25c:	ldr	r1, [pc, #28]	; 1a280 <__gcov_flush@@Base+0x450>
   1a260:	ldr	r2, [pc, #28]	; 1a284 <__gcov_flush@@Base+0x454>
   1a264:	ldr	r0, [pc, #28]	; 1a288 <__gcov_flush@@Base+0x458>
   1a268:	add	r1, pc, r1
   1a26c:	add	r2, pc, r2
   1a270:	ldr	r0, [pc, r0]
   1a274:	ldr	r0, [r0]
   1a278:	bl	1200c <fprintf@plt>
   1a27c:	b	1a238 <__gcov_flush@@Base+0x408>
   1a280:	andeq	r1, r0, r2, lsr #18
   1a284:	andeq	r1, r0, r7, ror #18
   1a288:	andeq	r1, r1, r8, asr #28
   1a28c:	andeq	r1, r0, r8, lsr #15
   1a290:	push	{r4, r5, r6, sl, fp, lr}
   1a294:	add	fp, sp, #16
   1a298:	mov	r6, r0
   1a29c:	ldr	r0, [pc, #120]	; 1a31c <__gcov_flush@@Base+0x4ec>
   1a2a0:	mov	r4, r1
   1a2a4:	add	r0, pc, r0
   1a2a8:	bl	11f94 <getenv@plt>
   1a2ac:	mov	r5, r0
   1a2b0:	ldr	r0, [pc, #104]	; 1a320 <__gcov_flush@@Base+0x4f0>
   1a2b4:	add	r0, pc, r0
   1a2b8:	bl	11f94 <getenv@plt>
   1a2bc:	mov	r1, #0
   1a2c0:	str	r1, [r4]
   1a2c4:	str	r1, [r6]
   1a2c8:	cmp	r5, #0
   1a2cc:	ldrbne	r2, [r5]
   1a2d0:	cmpne	r2, #0
   1a2d4:	bne	1a2e0 <__gcov_flush@@Base+0x4b0>
   1a2d8:	mov	r0, r1
   1a2dc:	pop	{r4, r5, r6, sl, fp, pc}
   1a2e0:	cmp	r0, #0
   1a2e4:	beq	1a2fc <__gcov_flush@@Base+0x4cc>
   1a2e8:	mov	r1, #0
   1a2ec:	mov	r2, #10
   1a2f0:	bl	11f04 <strtol@plt>
   1a2f4:	bic	r0, r0, r0, asr #31
   1a2f8:	b	1a300 <__gcov_flush@@Base+0x4d0>
   1a2fc:	mov	r0, #0
   1a300:	str	r0, [r6]
   1a304:	mov	r0, r5
   1a308:	bl	11fe8 <strlen@plt>
   1a30c:	mov	r1, r5
   1a310:	str	r0, [r4]
   1a314:	mov	r0, r1
   1a318:	pop	{r4, r5, r6, sl, fp, pc}
   1a31c:	andeq	r1, r0, sp, asr r9
   1a320:	andeq	r1, r0, r9, asr r9
   1a324:	push	{r4, r5, r6, r7, fp, lr}
   1a328:	add	fp, sp, #16
   1a32c:	mov	r6, r0
   1a330:	ldr	r0, [fp, #8]
   1a334:	mov	r5, r3
   1a338:	mov	r7, r2
   1a33c:	mov	r4, r1
   1a340:	cmp	r0, #1
   1a344:	blt	1a37c <__gcov_flush@@Base+0x54c>
   1a348:	add	r1, r4, #1
   1a34c:	mov	r2, #0
   1a350:	ldrb	r3, [r1]
   1a354:	cmp	r3, #47	; 0x2f
   1a358:	beq	1a368 <__gcov_flush@@Base+0x538>
   1a35c:	cmp	r3, #0
   1a360:	bne	1a370 <__gcov_flush@@Base+0x540>
   1a364:	b	1a37c <__gcov_flush@@Base+0x54c>
   1a368:	add	r2, r2, #1
   1a36c:	mov	r4, r1
   1a370:	add	r1, r1, #1
   1a374:	cmp	r2, r0
   1a378:	blt	1a350 <__gcov_flush@@Base+0x520>
   1a37c:	mov	r0, r6
   1a380:	mov	r1, r7
   1a384:	mov	r2, r5
   1a388:	bl	11f34 <memcpy@plt>
   1a38c:	add	r0, r7, r5
   1a390:	ldrb	r0, [r0, #-1]
   1a394:	cmp	r0, #47	; 0x2f
   1a398:	movne	r0, #47	; 0x2f
   1a39c:	strbne	r0, [r6, r5]
   1a3a0:	mov	r0, r4
   1a3a4:	addne	r5, r5, #1
   1a3a8:	add	r5, r6, r5
   1a3ac:	bl	11fe8 <strlen@plt>
   1a3b0:	add	r2, r0, #1
   1a3b4:	mov	r0, r5
   1a3b8:	mov	r1, r4
   1a3bc:	pop	{r4, r5, r6, r7, fp, lr}
   1a3c0:	b	11f34 <memcpy@plt>
   1a3c4:	mov	r1, #47	; 0x2f
   1a3c8:	b	11ff4 <strchr@plt>
   1a3cc:	mov	r1, #47	; 0x2f
   1a3d0:	b	12090 <strrchr@plt>
   1a3d4:	push	{fp, lr}
   1a3d8:	mov	fp, sp
   1a3dc:	sub	sp, sp, #8
   1a3e0:	mov	r0, #0
   1a3e4:	str	r0, [sp, #4]
   1a3e8:	add	r1, sp, #4
   1a3ec:	mov	r0, #2
   1a3f0:	bl	12054 <prctl@plt>
   1a3f4:	ldr	r1, [sp, #4]
   1a3f8:	cmp	r0, #0
   1a3fc:	cmpeq	r1, #9
   1a400:	bne	1a414 <__gcov_flush@@Base+0x5e4>
   1a404:	mov	r0, #1
   1a408:	mov	r1, #0
   1a40c:	bl	12054 <prctl@plt>
   1a410:	ldr	r1, [sp, #4]
   1a414:	sub	r0, r1, #9
   1a418:	clz	r0, r0
   1a41c:	lsr	r0, r0, #5
   1a420:	mov	sp, fp
   1a424:	pop	{fp, pc}
   1a428:	mov	r0, #1
   1a42c:	mov	r1, #9
   1a430:	b	12054 <prctl@plt>

0001a434 <__libc_csu_init@@Base>:
   1a434:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a438:	mov	r7, r0
   1a43c:	ldr	r6, [pc, #72]	; 1a48c <__libc_csu_init@@Base+0x58>
   1a440:	ldr	r5, [pc, #72]	; 1a490 <__libc_csu_init@@Base+0x5c>
   1a444:	add	r6, pc, r6
   1a448:	add	r5, pc, r5
   1a44c:	sub	r6, r6, r5
   1a450:	mov	r8, r1
   1a454:	mov	r9, r2
   1a458:	bl	11ed8 <fdopen@plt-0x20>
   1a45c:	asrs	r6, r6, #2
   1a460:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a464:	mov	r4, #0
   1a468:	add	r4, r4, #1
   1a46c:	ldr	r3, [r5], #4
   1a470:	mov	r2, r9
   1a474:	mov	r1, r8
   1a478:	mov	r0, r7
   1a47c:	blx	r3
   1a480:	cmp	r6, r4
   1a484:	bne	1a468 <__libc_csu_init@@Base+0x34>
   1a488:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a48c:			; <UNDEFINED> instruction: 0x00011ab8
   1a490:	muleq	r1, r8, sl

0001a494 <__libc_csu_fini@@Base>:
   1a494:	bx	lr
   1a498:	ldr	r3, [pc, #12]	; 1a4ac <__libc_csu_fini@@Base+0x18>
   1a49c:	mov	r1, #0
   1a4a0:	add	r3, pc, r3
   1a4a4:	ldr	r2, [r3]
   1a4a8:	b	12024 <__cxa_atexit@plt>
   1a4ac:	andeq	r1, r1, r4, lsr #24

Disassembly of section .fini:

0001a4b0 <.fini>:
   1a4b0:	push	{r3, lr}
   1a4b4:	pop	{r3, pc}
