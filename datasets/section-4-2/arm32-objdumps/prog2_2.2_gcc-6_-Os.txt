
../repos/prog2/2.2:     file format elf32-littlearm


Disassembly of section .init:

000106d4 <.init>:
   106d4:	push	{r3, lr}
   106d8:	bl	10910 <_start@@Base+0x3c>
   106dc:	pop	{r3, pc}

Disassembly of section .plt:

000106e0 <printf@plt-0x14>:
   106e0:	push	{lr}		; (str lr, [sp, #-4]!)
   106e4:	ldr	lr, [pc, #4]	; 106f0 <printf@plt-0x4>
   106e8:	add	lr, pc, lr
   106ec:	ldr	pc, [lr, #8]!
   106f0:	andeq	r0, r1, r0, lsl r9

000106f4 <printf@plt>:
   106f4:	add	ip, pc, #0, 12
   106f8:	add	ip, ip, #16, 20	; 0x10000
   106fc:	ldr	pc, [ip, #2320]!	; 0x910

00010700 <free@plt>:
   10700:	add	ip, pc, #0, 12
   10704:	add	ip, ip, #16, 20	; 0x10000
   10708:	ldr	pc, [ip, #2312]!	; 0x908

0001070c <fgets@plt>:
   1070c:	add	ip, pc, #0, 12
   10710:	add	ip, ip, #16, 20	; 0x10000
   10714:	ldr	pc, [ip, #2304]!	; 0x900

00010718 <getchar@plt>:
   10718:	add	ip, pc, #0, 12
   1071c:	add	ip, ip, #16, 20	; 0x10000
   10720:	ldr	pc, [ip, #2296]!	; 0x8f8

00010724 <realloc@plt>:
   10724:	add	ip, pc, #0, 12
   10728:	add	ip, ip, #16, 20	; 0x10000
   1072c:	ldr	pc, [ip, #2288]!	; 0x8f0

00010730 <strcpy@plt>:
   10730:	add	ip, pc, #0, 12
   10734:	add	ip, ip, #16, 20	; 0x10000
   10738:	ldr	pc, [ip, #2280]!	; 0x8e8

0001073c <puts@plt>:
   1073c:	add	ip, pc, #0, 12
   10740:	add	ip, ip, #16, 20	; 0x10000
   10744:	ldr	pc, [ip, #2272]!	; 0x8e0

00010748 <malloc@plt>:
   10748:	add	ip, pc, #0, 12
   1074c:	add	ip, ip, #16, 20	; 0x10000
   10750:	ldr	pc, [ip, #2264]!	; 0x8d8

00010754 <__libc_start_main@plt>:
   10754:	add	ip, pc, #0, 12
   10758:	add	ip, ip, #16, 20	; 0x10000
   1075c:	ldr	pc, [ip, #2256]!	; 0x8d0

00010760 <__gmon_start__@plt>:
   10760:	add	ip, pc, #0, 12
   10764:	add	ip, ip, #16, 20	; 0x10000
   10768:	ldr	pc, [ip, #2248]!	; 0x8c8

0001076c <strlen@plt>:
   1076c:	add	ip, pc, #0, 12
   10770:	add	ip, ip, #16, 20	; 0x10000
   10774:	ldr	pc, [ip, #2240]!	; 0x8c0

00010778 <__isoc99_scanf@plt>:
   10778:	add	ip, pc, #0, 12
   1077c:	add	ip, ip, #16, 20	; 0x10000
   10780:	ldr	pc, [ip, #2232]!	; 0x8b8

00010784 <abort@plt>:
   10784:	add	ip, pc, #0, 12
   10788:	add	ip, ip, #16, 20	; 0x10000
   1078c:	ldr	pc, [ip, #2224]!	; 0x8b0

Disassembly of section .text:

00010790 <main@@Base>:
   10790:	push	{r4, r5, r6, r7, r8, r9, lr}
   10794:	mov	r0, #12
   10798:	sub	sp, sp, #92	; 0x5c
   1079c:	bl	10748 <malloc@plt>
   107a0:	ldr	r7, [pc, #276]	; 108bc <main@@Base+0x12c>
   107a4:	ldr	r8, [pc, #276]	; 108c0 <main@@Base+0x130>
   107a8:	ldr	r6, [pc, #276]	; 108c4 <main@@Base+0x134>
   107ac:	mov	r3, #0
   107b0:	mov	r4, r0
   107b4:	str	r3, [r0]
   107b8:	str	r3, [r0, #4]
   107bc:	str	r3, [r0, #8]
   107c0:	sub	r9, r4, #4
   107c4:	mov	r5, #0
   107c8:	add	r5, r5, #1
   107cc:	mov	r1, r5
   107d0:	mov	r0, r7
   107d4:	bl	106f4 <printf@plt>
   107d8:	ldr	r0, [r9, #4]!
   107dc:	cmp	r0, #0
   107e0:	moveq	r0, r8
   107e4:	bl	1073c <puts@plt>
   107e8:	cmp	r5, #3
   107ec:	bne	107c8 <main@@Base+0x38>
   107f0:	ldr	r9, [pc, #208]	; 108c8 <main@@Base+0x138>
   107f4:	mov	r1, #3
   107f8:	mov	r0, r6
   107fc:	bl	106f4 <printf@plt>
   10800:	add	r1, sp, #4
   10804:	mov	r0, r9
   10808:	bl	10778 <__isoc99_scanf@plt>
   1080c:	bl	10718 <getchar@plt>
   10810:	ldr	r5, [sp, #4]
   10814:	cmp	r5, #3
   10818:	bhi	107f4 <main@@Base+0x64>
   1081c:	cmp	r5, #0
   10820:	beq	10890 <main@@Base+0x100>
   10824:	ldr	r0, [pc, #160]	; 108cc <main@@Base+0x13c>
   10828:	bl	106f4 <printf@plt>
   1082c:	ldr	r3, [pc, #156]	; 108d0 <main@@Base+0x140>
   10830:	mov	r1, #80	; 0x50
   10834:	add	r0, sp, #8
   10838:	ldr	r2, [r3]
   1083c:	bl	1070c <fgets@plt>
   10840:	add	r0, sp, #8
   10844:	bl	1076c <strlen@plt>
   10848:	add	r3, sp, #88	; 0x58
   1084c:	ldr	r5, [sp, #4]
   10850:	sub	r5, r5, #-1073741823	; 0xc0000001
   10854:	add	r0, r3, r0
   10858:	mov	r3, #0
   1085c:	strb	r3, [r0, #-81]	; 0xffffffaf
   10860:	add	r0, sp, #8
   10864:	bl	1076c <strlen@plt>
   10868:	add	r1, r0, #1
   1086c:	ldr	r0, [r4, r5, lsl #2]
   10870:	bl	10724 <realloc@plt>
   10874:	ldr	r3, [sp, #4]
   10878:	add	r1, sp, #8
   1087c:	sub	r3, r3, #-1073741823	; 0xc0000001
   10880:	str	r0, [r4, r5, lsl #2]
   10884:	ldr	r0, [r4, r3, lsl #2]
   10888:	bl	10730 <strcpy@plt>
   1088c:	b	107c0 <main@@Base+0x30>
   10890:	ldr	r0, [r4]
   10894:	bl	10700 <free@plt>
   10898:	ldr	r0, [r4, #4]
   1089c:	bl	10700 <free@plt>
   108a0:	ldr	r0, [r4, #8]
   108a4:	bl	10700 <free@plt>
   108a8:	mov	r0, r4
   108ac:	bl	10700 <free@plt>
   108b0:	mov	r0, r5
   108b4:	add	sp, sp, #92	; 0x5c
   108b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   108bc:	andeq	r0, r1, ip, ror #20
   108c0:	andeq	r0, r1, r2, ror sl
   108c4:	andeq	r0, r1, sl, ror sl
   108c8:	muleq	r1, lr, sl
   108cc:	andeq	r0, r1, r1, lsr #21
   108d0:	andeq	r1, r2, r0, asr r0

000108d4 <_start@@Base>:
   108d4:	mov	fp, #0
   108d8:	mov	lr, #0
   108dc:	pop	{r1}		; (ldr r1, [sp], #4)
   108e0:	mov	r2, sp
   108e4:	push	{r2}		; (str r2, [sp, #-4]!)
   108e8:	push	{r0}		; (str r0, [sp, #-4]!)
   108ec:	ldr	ip, [pc, #16]	; 10904 <_start@@Base+0x30>
   108f0:	push	{ip}		; (str ip, [sp, #-4]!)
   108f4:	ldr	r0, [pc, #12]	; 10908 <_start@@Base+0x34>
   108f8:	ldr	r3, [pc, #12]	; 1090c <_start@@Base+0x38>
   108fc:	bl	10754 <__libc_start_main@plt>
   10900:	bl	10784 <abort@plt>
   10904:	andeq	r0, r1, ip, asr sl
   10908:	muleq	r1, r0, r7
   1090c:	strdeq	r0, [r1], -ip
   10910:	ldr	r3, [pc, #20]	; 1092c <_start@@Base+0x58>
   10914:	ldr	r2, [pc, #20]	; 10930 <_start@@Base+0x5c>
   10918:	add	r3, pc, r3
   1091c:	ldr	r2, [r3, r2]
   10920:	cmp	r2, #0
   10924:	bxeq	lr
   10928:	b	10760 <__gmon_start__@plt>
   1092c:	andeq	r0, r1, r0, ror #13
   10930:	andeq	r0, r0, r0, asr #32
   10934:	ldr	r3, [pc, #28]	; 10958 <_start@@Base+0x84>
   10938:	ldr	r0, [pc, #28]	; 1095c <_start@@Base+0x88>
   1093c:	sub	r3, r3, r0
   10940:	cmp	r3, #6
   10944:	bxls	lr
   10948:	ldr	r3, [pc, #16]	; 10960 <_start@@Base+0x8c>
   1094c:	cmp	r3, #0
   10950:	bxeq	lr
   10954:	bx	r3
   10958:	andeq	r1, r2, pc, asr #32
   1095c:	andeq	r1, r2, ip, asr #32
   10960:	andeq	r0, r0, r0
   10964:	ldr	r1, [pc, #36]	; 10990 <_start@@Base+0xbc>
   10968:	ldr	r0, [pc, #36]	; 10994 <_start@@Base+0xc0>
   1096c:	sub	r1, r1, r0
   10970:	asr	r1, r1, #2
   10974:	add	r1, r1, r1, lsr #31
   10978:	asrs	r1, r1, #1
   1097c:	bxeq	lr
   10980:	ldr	r3, [pc, #16]	; 10998 <_start@@Base+0xc4>
   10984:	cmp	r3, #0
   10988:	bxeq	lr
   1098c:	bx	r3
   10990:	andeq	r1, r2, ip, asr #32
   10994:	andeq	r1, r2, ip, asr #32
   10998:	andeq	r0, r0, r0
   1099c:	push	{r4, lr}
   109a0:	ldr	r4, [pc, #24]	; 109c0 <_start@@Base+0xec>
   109a4:	ldrb	r3, [r4]
   109a8:	cmp	r3, #0
   109ac:	popne	{r4, pc}
   109b0:	bl	10934 <_start@@Base+0x60>
   109b4:	mov	r3, #1
   109b8:	strb	r3, [r4]
   109bc:	pop	{r4, pc}
   109c0:	andeq	r1, r2, r4, asr r0
   109c4:	ldr	r0, [pc, #40]	; 109f4 <_start@@Base+0x120>
   109c8:	ldr	r3, [r0]
   109cc:	cmp	r3, #0
   109d0:	bne	109d8 <_start@@Base+0x104>
   109d4:	b	10964 <_start@@Base+0x90>
   109d8:	ldr	r3, [pc, #24]	; 109f8 <_start@@Base+0x124>
   109dc:	cmp	r3, #0
   109e0:	beq	109d4 <_start@@Base+0x100>
   109e4:	push	{r4, lr}
   109e8:	blx	r3
   109ec:	pop	{r4, lr}
   109f0:	b	10964 <_start@@Base+0x90>
   109f4:	andeq	r0, r2, r4, lsl pc
   109f8:	andeq	r0, r0, r0

000109fc <__libc_csu_init@@Base>:
   109fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a00:	mov	r7, r0
   10a04:	ldr	r6, [pc, #72]	; 10a54 <__libc_csu_init@@Base+0x58>
   10a08:	ldr	r5, [pc, #72]	; 10a58 <__libc_csu_init@@Base+0x5c>
   10a0c:	add	r6, pc, r6
   10a10:	add	r5, pc, r5
   10a14:	sub	r6, r6, r5
   10a18:	mov	r8, r1
   10a1c:	mov	r9, r2
   10a20:	bl	106d4 <printf@plt-0x20>
   10a24:	asrs	r6, r6, #2
   10a28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a2c:	mov	r4, #0
   10a30:	add	r4, r4, #1
   10a34:	ldr	r3, [r5], #4
   10a38:	mov	r2, r9
   10a3c:	mov	r1, r8
   10a40:	mov	r0, r7
   10a44:	blx	r3
   10a48:	cmp	r6, r4
   10a4c:	bne	10a30 <__libc_csu_init@@Base+0x34>
   10a50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a54:	strdeq	r0, [r1], -ip
   10a58:	strdeq	r0, [r1], -r4

00010a5c <__libc_csu_fini@@Base>:
   10a5c:	bx	lr

Disassembly of section .fini:

00010a60 <.fini>:
   10a60:	push	{r3, lr}
   10a64:	pop	{r3, pc}
