
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

000112bc <.init>:
   112bc:	push	{r3, lr}
   112c0:	bl	11684 <__assert_fail@plt+0x48>
   112c4:	pop	{r3, pc}

Disassembly of section .plt:

000112c8 <fdopen@plt-0x14>:
   112c8:	push	{lr}		; (str lr, [sp, #-4]!)
   112cc:	ldr	lr, [pc, #4]	; 112d8 <fdopen@plt-0x4>
   112d0:	add	lr, pc, lr
   112d4:	ldr	pc, [lr, #8]!
   112d8:	andeq	ip, r1, r8, lsr #26

000112dc <fdopen@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3368]!	; 0xd28

000112e8 <calloc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3360]!	; 0xd20

000112f4 <fputs_unlocked@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3352]!	; 0xd18

00011300 <raise@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3344]!	; 0xd10

0001130c <gmtime_r@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3336]!	; 0xd08

00011318 <strcmp@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3328]!	; 0xd00

00011324 <strtol@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011330 <posix_fadvise64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3312]!	; 0xcf0

0001133c <mktime@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3304]!	; 0xce8

00011348 <fflush@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3296]!	; 0xce0

00011354 <wcwidth@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011360 <free@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3280]!	; 0xcd0

0001136c <clock_gettime@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3272]!	; 0xcc8

00011378 <_exit@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3264]!	; 0xcc0

00011384 <memcpy@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011390 <mbsinit@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3248]!	; 0xcb0

0001139c <memcmp@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3240]!	; 0xca8

000113a8 <getc_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3232]!	; 0xca0

000113b4 <dcgettext@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3224]!	; 0xc98

000113c0 <realloc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3216]!	; 0xc90

000113cc <localtime_r@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3208]!	; 0xc88

000113d8 <textdomain@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3200]!	; 0xc80

000113e4 <iswcntrl@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3192]!	; 0xc78

000113f0 <iswprint@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3184]!	; 0xc70

000113fc <tzset@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3176]!	; 0xc68

00011408 <__fxstat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3168]!	; 0xc60

00011414 <lseek64@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3160]!	; 0xc58

00011420 <__ctype_get_mb_cur_max@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #28, 20	; 0x1c000
   11428:	ldr	pc, [ip, #3152]!	; 0xc50

0001142c <__fpending@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #28, 20	; 0x1c000
   11434:	ldr	pc, [ip, #3144]!	; 0xc48

00011438 <ferror_unlocked@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #28, 20	; 0x1c000
   11440:	ldr	pc, [ip, #3136]!	; 0xc40

00011444 <mbrtowc@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #28, 20	; 0x1c000
   1144c:	ldr	pc, [ip, #3128]!	; 0xc38

00011450 <error@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #28, 20	; 0x1c000
   11458:	ldr	pc, [ip, #3120]!	; 0xc30

0001145c <getenv@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #28, 20	; 0x1c000
   11464:	ldr	pc, [ip, #3112]!	; 0xc28

00011468 <malloc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #28, 20	; 0x1c000
   11470:	ldr	pc, [ip, #3104]!	; 0xc20

00011474 <__libc_start_main@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #28, 20	; 0x1c000
   1147c:	ldr	pc, [ip, #3096]!	; 0xc18

00011480 <strftime@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #28, 20	; 0x1c000
   11488:	ldr	pc, [ip, #3088]!	; 0xc10

0001148c <__freading@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #28, 20	; 0x1c000
   11494:	ldr	pc, [ip, #3080]!	; 0xc08

00011498 <__ctype_tolower_loc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #28, 20	; 0x1c000
   114a0:	ldr	pc, [ip, #3072]!	; 0xc00

000114a4 <__ctype_toupper_loc@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #28, 20	; 0x1c000
   114ac:	ldr	pc, [ip, #3064]!	; 0xbf8

000114b0 <__gmon_start__@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #28, 20	; 0x1c000
   114b8:	ldr	pc, [ip, #3056]!	; 0xbf0

000114bc <getopt_long@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #28, 20	; 0x1c000
   114c4:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c8 <__ctype_b_loc@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #28, 20	; 0x1c000
   114d0:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d4 <exit@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #28, 20	; 0x1c000
   114dc:	ldr	pc, [ip, #3032]!	; 0xbd8

000114e0 <strlen@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #28, 20	; 0x1c000
   114e8:	ldr	pc, [ip, #3024]!	; 0xbd0

000114ec <strchr@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #28, 20	; 0x1c000
   114f4:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f8 <setenv@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #28, 20	; 0x1c000
   11500:	ldr	pc, [ip, #3008]!	; 0xbc0

00011504 <ungetc@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #28, 20	; 0x1c000
   1150c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011510 <__errno_location@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #28, 20	; 0x1c000
   11518:	ldr	pc, [ip, #2992]!	; 0xbb0

0001151c <__sprintf_chk@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #28, 20	; 0x1c000
   11524:	ldr	pc, [ip, #2984]!	; 0xba8

00011528 <__cxa_atexit@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #28, 20	; 0x1c000
   11530:	ldr	pc, [ip, #2976]!	; 0xba0

00011534 <memset@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #28, 20	; 0x1c000
   1153c:	ldr	pc, [ip, #2968]!	; 0xb98

00011540 <__printf_chk@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #28, 20	; 0x1c000
   11548:	ldr	pc, [ip, #2960]!	; 0xb90

0001154c <fileno@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #28, 20	; 0x1c000
   11554:	ldr	pc, [ip, #2952]!	; 0xb88

00011558 <strtoumax@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #28, 20	; 0x1c000
   11560:	ldr	pc, [ip, #2944]!	; 0xb80

00011564 <__fprintf_chk@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #28, 20	; 0x1c000
   1156c:	ldr	pc, [ip, #2936]!	; 0xb78

00011570 <strtoimax@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #28, 20	; 0x1c000
   11578:	ldr	pc, [ip, #2928]!	; 0xb70

0001157c <fclose@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #28, 20	; 0x1c000
   11584:	ldr	pc, [ip, #2920]!	; 0xb68

00011588 <fseeko64@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #28, 20	; 0x1c000
   11590:	ldr	pc, [ip, #2912]!	; 0xb60

00011594 <fcntl64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #28, 20	; 0x1c000
   1159c:	ldr	pc, [ip, #2904]!	; 0xb58

000115a0 <setlocale@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #28, 20	; 0x1c000
   115a8:	ldr	pc, [ip, #2896]!	; 0xb50

000115ac <strrchr@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #28, 20	; 0x1c000
   115b4:	ldr	pc, [ip, #2888]!	; 0xb48

000115b8 <nl_langinfo@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #28, 20	; 0x1c000
   115c0:	ldr	pc, [ip, #2880]!	; 0xb40

000115c4 <timegm@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #28, 20	; 0x1c000
   115cc:	ldr	pc, [ip, #2872]!	; 0xb38

000115d0 <clearerr_unlocked@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #28, 20	; 0x1c000
   115d8:	ldr	pc, [ip, #2864]!	; 0xb30

000115dc <fopen64@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #28, 20	; 0x1c000
   115e4:	ldr	pc, [ip, #2856]!	; 0xb28

000115e8 <bindtextdomain@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #28, 20	; 0x1c000
   115f0:	ldr	pc, [ip, #2848]!	; 0xb20

000115f4 <unsetenv@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #28, 20	; 0x1c000
   115fc:	ldr	pc, [ip, #2840]!	; 0xb18

00011600 <fputs@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #28, 20	; 0x1c000
   11608:	ldr	pc, [ip, #2832]!	; 0xb10

0001160c <strncmp@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #28, 20	; 0x1c000
   11614:	ldr	pc, [ip, #2824]!	; 0xb08

00011618 <abort@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #28, 20	; 0x1c000
   11620:	ldr	pc, [ip, #2816]!	; 0xb00

00011624 <close@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #28, 20	; 0x1c000
   1162c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011630 <putchar_unlocked@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #28, 20	; 0x1c000
   11638:	ldr	pc, [ip, #2800]!	; 0xaf0

0001163c <__assert_fail@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #28, 20	; 0x1c000
   11644:	ldr	pc, [ip, #2792]!	; 0xae8

Disassembly of section .text:

00011648 <.text>:
   11648:	mov	fp, #0
   1164c:	mov	lr, #0
   11650:	pop	{r1}		; (ldr r1, [sp], #4)
   11654:	mov	r2, sp
   11658:	push	{r2}		; (str r2, [sp, #-4]!)
   1165c:	push	{r0}		; (str r0, [sp, #-4]!)
   11660:	ldr	ip, [pc, #16]	; 11678 <__assert_fail@plt+0x3c>
   11664:	push	{ip}		; (str ip, [sp, #-4]!)
   11668:	ldr	r0, [pc, #12]	; 1167c <__assert_fail@plt+0x40>
   1166c:	ldr	r3, [pc, #12]	; 11680 <__assert_fail@plt+0x44>
   11670:	bl	11474 <__libc_start_main@plt>
   11674:	bl	11618 <abort@plt>
   11678:	andeq	fp, r1, r4, asr #17
   1167c:	andeq	r1, r1, r8, lsr r7
   11680:	andeq	fp, r1, r4, ror #16
   11684:	ldr	r3, [pc, #20]	; 116a0 <__assert_fail@plt+0x64>
   11688:	ldr	r2, [pc, #20]	; 116a4 <__assert_fail@plt+0x68>
   1168c:	add	r3, pc, r3
   11690:	ldr	r2, [r3, r2]
   11694:	cmp	r2, #0
   11698:	bxeq	lr
   1169c:	b	114b0 <__gmon_start__@plt>
   116a0:	andeq	ip, r1, ip, ror #18
   116a4:	andeq	r0, r0, r0, lsr r1
   116a8:	ldr	r0, [pc, #24]	; 116c8 <__assert_fail@plt+0x8c>
   116ac:	ldr	r3, [pc, #24]	; 116cc <__assert_fail@plt+0x90>
   116b0:	cmp	r3, r0
   116b4:	bxeq	lr
   116b8:	ldr	r3, [pc, #16]	; 116d0 <__assert_fail@plt+0x94>
   116bc:	cmp	r3, #0
   116c0:	bxeq	lr
   116c4:	bx	r3
   116c8:	andeq	lr, r2, r0, asr #3
   116cc:	andeq	lr, r2, r0, asr #3
   116d0:	andeq	r0, r0, r0
   116d4:	ldr	r0, [pc, #36]	; 11700 <__assert_fail@plt+0xc4>
   116d8:	ldr	r1, [pc, #36]	; 11704 <__assert_fail@plt+0xc8>
   116dc:	sub	r1, r1, r0
   116e0:	asr	r1, r1, #2
   116e4:	add	r1, r1, r1, lsr #31
   116e8:	asrs	r1, r1, #1
   116ec:	bxeq	lr
   116f0:	ldr	r3, [pc, #16]	; 11708 <__assert_fail@plt+0xcc>
   116f4:	cmp	r3, #0
   116f8:	bxeq	lr
   116fc:	bx	r3
   11700:	andeq	lr, r2, r0, asr #3
   11704:	andeq	lr, r2, r0, asr #3
   11708:	andeq	r0, r0, r0
   1170c:	push	{r4, lr}
   11710:	ldr	r4, [pc, #24]	; 11730 <__assert_fail@plt+0xf4>
   11714:	ldrb	r3, [r4]
   11718:	cmp	r3, #0
   1171c:	popne	{r4, pc}
   11720:	bl	116a8 <__assert_fail@plt+0x6c>
   11724:	mov	r3, #1
   11728:	strb	r3, [r4]
   1172c:	pop	{r4, pc}
   11730:	andeq	lr, r2, r4, ror #3
   11734:	b	116d4 <__assert_fail@plt+0x98>
   11738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1173c:	add	fp, sp, #28
   11740:	sub	sp, sp, #52	; 0x34
   11744:	mov	r4, #0
   11748:	mov	r5, r0
   1174c:	mov	r8, r1
   11750:	str	r4, [fp, #-32]	; 0xffffffe0
   11754:	ldr	r0, [r1]
   11758:	bl	1740c <__assert_fail@plt+0x5dd0>
   1175c:	movw	r1, #52164	; 0xcbc4
   11760:	mov	r0, #6
   11764:	movt	r1, #1
   11768:	bl	115a0 <setlocale@plt>
   1176c:	movw	r7, #47663	; 0xba2f
   11770:	movw	r1, #47356	; 0xb8fc
   11774:	movt	r7, #1
   11778:	movt	r1, #1
   1177c:	mov	r0, r7
   11780:	bl	115e8 <bindtextdomain@plt>
   11784:	mov	r0, r7
   11788:	bl	113d8 <textdomain@plt>
   1178c:	movw	r0, #21008	; 0x5210
   11790:	movt	r0, #1
   11794:	bl	1b8c8 <__assert_fail@plt+0xa28c>
   11798:	cmp	r5, #2
   1179c:	blt	117b0 <__assert_fail@plt+0x174>
   117a0:	sub	r0, r5, #1
   117a4:	mov	r1, #4
   117a8:	bl	19a28 <__assert_fail@plt+0x83ec>
   117ac:	mov	r4, r0
   117b0:	mvn	r0, #0
   117b4:	movw	r2, #52728	; 0xcdf8
   117b8:	movw	r3, #52784	; 0xce30
   117bc:	mov	r1, r8
   117c0:	str	r0, [fp, #-36]	; 0xffffffdc
   117c4:	sub	r0, fp, #36	; 0x24
   117c8:	movt	r2, #1
   117cc:	movt	r3, #1
   117d0:	str	r0, [sp]
   117d4:	mov	r0, r5
   117d8:	bl	114bc <getopt_long@plt>
   117dc:	cmn	r0, #1
   117e0:	str	r8, [sp, #36]	; 0x24
   117e4:	str	r5, [sp, #40]	; 0x28
   117e8:	beq	11fc0 <__assert_fail@plt+0x984>
   117ec:	mov	sl, r0
   117f0:	mov	r0, #0
   117f4:	mov	r6, #0
   117f8:	mov	r9, #0
   117fc:	mov	r7, #0
   11800:	str	r0, [sp, #32]
   11804:	mov	r0, #0
   11808:	str	r0, [sp, #24]
   1180c:	mov	r0, #0
   11810:	str	r0, [sp, #28]
   11814:	b	11e54 <__assert_fail@plt+0x818>
   11818:	sub	r0, sl, #68	; 0x44
   1181c:	cmp	r0, #51	; 0x33
   11820:	bhi	1190c <__assert_fail@plt+0x2d0>
   11824:	add	r1, pc, #0
   11828:	ldr	pc, [r1, r0, lsl #2]
   1182c:	andeq	r1, r1, r0, asr sl
   11830:	andeq	r2, r1, r0, asr r3
   11834:	strdeq	r1, [r1], -ip
   11838:	andeq	r2, r1, r0, asr r3
   1183c:	andeq	r2, r1, r0, asr r3
   11840:	andeq	r2, r1, r0, asr r3
   11844:	andeq	r1, r1, r8, ror #20
   11848:	andeq	r2, r1, r0, asr r3
   1184c:	andeq	r2, r1, r0, asr r3
   11850:	andeq	r2, r1, r0, asr r3
   11854:	andeq	r1, r1, r8, ror sl
   11858:	andeq	r2, r1, r0, asr r3
   1185c:	andeq	r2, r1, r0, asr r3
   11860:	andeq	r2, r1, r0, asr r3
   11864:	andeq	r2, r1, r0, asr r3
   11868:	andeq	r1, r1, r0, lsr #25
   1186c:	andeq	r1, r1, r4, ror #21
   11870:	andeq	r2, r1, r0, asr r3
   11874:	andeq	r2, r1, r0, asr r3
   11878:	andeq	r1, r1, r8, lsl #22
   1187c:	andeq	r2, r1, r0, asr r3
   11880:	andeq	r2, r1, r0, asr r3
   11884:	andeq	r2, r1, r0, asr r3
   11888:	andeq	r2, r1, r0, asr r3
   1188c:	andeq	r2, r1, r0, asr r3
   11890:	andeq	r2, r1, r0, asr r3
   11894:	andeq	r2, r1, r0, asr r3
   11898:	andeq	r2, r1, r0, asr r3
   1189c:	andeq	r2, r1, r0, asr r3
   118a0:	strdeq	r1, [r1], -ip
   118a4:	andeq	r1, r1, r0, lsl #25
   118a8:	muleq	r1, r4, r9
   118ac:	muleq	r1, r0, ip
   118b0:	andeq	r1, r1, r4, ror #26
   118b4:	strdeq	r1, [r1], -ip
   118b8:	andeq	r2, r1, r0, asr r3
   118bc:	andeq	r1, r1, r4, lsr #19
   118c0:	andeq	r1, r1, r8, lsl sp
   118c4:	andeq	r2, r1, r0, asr r3
   118c8:	andeq	r2, r1, r0, asr r3
   118cc:			; <UNDEFINED> instruction: 0x000119b8
   118d0:	andeq	r1, r1, r0, lsr #27
   118d4:	andeq	r1, r1, r0, lsl #23
   118d8:	andeq	r1, r1, r4, asr #23
   118dc:	andeq	r2, r1, r0, asr r3
   118e0:	andeq	r2, r1, r0, asr r3
   118e4:			; <UNDEFINED> instruction: 0x00011dbc
   118e8:	andeq	r1, r1, r4, lsr #24
   118ec:	andeq	r1, r1, r4, ror #24
   118f0:	andeq	r2, r1, r0, asr r3
   118f4:	andeq	r1, r1, r4, asr sp
   118f8:	ldrdeq	r1, [r1], -r4
   118fc:	movw	r1, #57853	; 0xe1fd
   11900:	mov	r0, #1
   11904:	movt	r1, #2
   11908:	b	11dc8 <__assert_fail@plt+0x78c>
   1190c:	cmp	sl, #256	; 0x100
   11910:	bne	11a14 <__assert_fail@plt+0x3d8>
   11914:	movw	r0, #57824	; 0xe1e0
   11918:	movw	r1, #52037	; 0xcb45
   1191c:	mov	r2, #5
   11920:	mov	r6, #0
   11924:	movt	r0, #2
   11928:	movt	r1, #1
   1192c:	ldr	sl, [r0]
   11930:	mov	r0, #0
   11934:	bl	113b4 <dcgettext@plt>
   11938:	mvn	r1, #-2147483648	; 0x80000000
   1193c:	mov	r2, #1
   11940:	mov	r3, #0
   11944:	stm	sp, {r1, r6}
   11948:	movw	r1, #52164	; 0xcbc4
   1194c:	str	r0, [sp, #12]
   11950:	mov	r0, sl
   11954:	str	r6, [sp, #16]
   11958:	movt	r1, #1
   1195c:	str	r1, [sp, #8]
   11960:	bl	19ef8 <__assert_fail@plt+0x88bc>
   11964:	movw	r1, #57712	; 0xe170
   11968:	movt	r1, #2
   1196c:	str	r0, [r1]
   11970:	movw	r0, #57888	; 0xe220
   11974:	mov	r1, #1
   11978:	movt	r0, #2
   1197c:	strb	r1, [r0]
   11980:	mov	r0, r9
   11984:	bl	154dc <__assert_fail@plt+0x3ea0>
   11988:	mov	r9, #0
   1198c:	str	r6, [fp, #-32]	; 0xffffffe0
   11990:	b	11f0c <__assert_fail@plt+0x8d0>
   11994:	movw	r1, #57843	; 0xe1f3
   11998:	mov	r0, #1
   1199c:	movt	r1, #2
   119a0:	b	11dc8 <__assert_fail@plt+0x78c>
   119a4:	movw	r0, #57824	; 0xe1e0
   119a8:	movw	r1, #57856	; 0xe200
   119ac:	movt	r0, #2
   119b0:	movt	r1, #2
   119b4:	b	11a60 <__assert_fail@plt+0x424>
   119b8:	movw	r0, #57824	; 0xe1e0
   119bc:	movw	r1, #47452	; 0xb95c
   119c0:	mov	r2, #5
   119c4:	mov	r6, #0
   119c8:	movt	r0, #2
   119cc:	movt	r1, #1
   119d0:	ldr	sl, [r0]
   119d4:	mov	r0, #0
   119d8:	bl	113b4 <dcgettext@plt>
   119dc:	mvn	r1, #-2147483648	; 0x80000000
   119e0:	mov	r2, #1
   119e4:	mov	r3, #0
   119e8:	stm	sp, {r1, r6}
   119ec:	movw	r1, #52164	; 0xcbc4
   119f0:	str	r0, [sp, #12]
   119f4:	mov	r0, sl
   119f8:	str	r6, [sp, #16]
   119fc:	movt	r1, #1
   11a00:	str	r1, [sp, #8]
   11a04:	bl	19ef8 <__assert_fail@plt+0x88bc>
   11a08:	movw	r1, #57680	; 0xe150
   11a0c:	movt	r1, #2
   11a10:	b	11c1c <__assert_fail@plt+0x5e0>
   11a14:	movw	r0, #257	; 0x101
   11a18:	cmp	sl, r0
   11a1c:	bne	12350 <__assert_fail@plt+0xd14>
   11a20:	movw	r0, #57824	; 0xe1e0
   11a24:	movt	r0, #2
   11a28:	ldr	r2, [r0]
   11a2c:	cmp	r2, #0
   11a30:	beq	12308 <__assert_fail@plt+0xccc>
   11a34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11a38:	mov	r1, #0
   11a3c:	mov	r6, #0
   11a40:	bl	123b4 <__assert_fail@plt+0xd78>
   11a44:	cmp	r0, #0
   11a48:	bne	11f0c <__assert_fail@plt+0x8d0>
   11a4c:	b	12314 <__assert_fail@plt+0xcd8>
   11a50:	movw	r0, #57824	; 0xe1e0
   11a54:	movw	r1, #57848	; 0xe1f8
   11a58:	movt	r0, #2
   11a5c:	movt	r1, #2
   11a60:	ldr	r0, [r0]
   11a64:	b	11b78 <__assert_fail@plt+0x53c>
   11a68:	movw	r1, #57861	; 0xe205
   11a6c:	mov	r0, #1
   11a70:	movt	r1, #2
   11a74:	b	11dc8 <__assert_fail@plt+0x78c>
   11a78:	movw	r1, #57864	; 0xe208
   11a7c:	mov	r0, #1
   11a80:	mov	r2, #5
   11a84:	mov	r6, #0
   11a88:	movt	r1, #2
   11a8c:	strb	r0, [r1]
   11a90:	movw	r0, #57824	; 0xe1e0
   11a94:	movw	r1, #47493	; 0xb985
   11a98:	movt	r0, #2
   11a9c:	movt	r1, #1
   11aa0:	ldr	sl, [r0]
   11aa4:	mov	r0, #0
   11aa8:	bl	113b4 <dcgettext@plt>
   11aac:	mvn	r1, #-2147483648	; 0x80000000
   11ab0:	mov	r2, #-2147483648	; 0x80000000
   11ab4:	mvn	r3, #0
   11ab8:	stm	sp, {r1, r6}
   11abc:	movw	r1, #52164	; 0xcbc4
   11ac0:	str	r0, [sp, #12]
   11ac4:	mov	r0, sl
   11ac8:	str	r6, [sp, #16]
   11acc:	movt	r1, #1
   11ad0:	str	r1, [sp, #8]
   11ad4:	bl	19ef8 <__assert_fail@plt+0x88bc>
   11ad8:	movw	r1, #57692	; 0xe15c
   11adc:	movt	r1, #2
   11ae0:	b	11c1c <__assert_fail@plt+0x5e0>
   11ae4:	movw	r0, #57881	; 0xe219
   11ae8:	movw	r1, #57880	; 0xe218
   11aec:	mov	r6, #0
   11af0:	movt	r0, #2
   11af4:	movt	r1, #2
   11af8:	strb	r6, [r0]
   11afc:	mov	r0, #1
   11b00:	strb	r0, [r1]
   11b04:	b	11f0c <__assert_fail@plt+0x8d0>
   11b08:	movw	r1, #57883	; 0xe21b
   11b0c:	mov	r0, #1
   11b10:	mov	r2, #5
   11b14:	mov	r6, #0
   11b18:	movt	r1, #2
   11b1c:	strb	r0, [r1]
   11b20:	movw	r0, #57824	; 0xe1e0
   11b24:	movw	r1, #47611	; 0xb9fb
   11b28:	movt	r0, #2
   11b2c:	movt	r1, #1
   11b30:	ldr	sl, [r0]
   11b34:	mov	r0, #0
   11b38:	bl	113b4 <dcgettext@plt>
   11b3c:	mvn	r1, #-2147483648	; 0x80000000
   11b40:	mov	r2, #1
   11b44:	mov	r3, #0
   11b48:	stm	sp, {r1, r6}
   11b4c:	movw	r1, #52164	; 0xcbc4
   11b50:	str	r0, [sp, #12]
   11b54:	mov	r0, #0
   11b58:	str	r6, [sp, #16]
   11b5c:	movt	r1, #1
   11b60:	str	r0, [sp, #24]
   11b64:	mov	r0, sl
   11b68:	str	r1, [sp, #8]
   11b6c:	bl	19ef8 <__assert_fail@plt+0x88bc>
   11b70:	movw	r1, #57700	; 0xe164
   11b74:	movt	r1, #2
   11b78:	str	r0, [r1]
   11b7c:	b	11dcc <__assert_fail@plt+0x790>
   11b80:	movw	r1, #57863	; 0xe207
   11b84:	mov	r0, #1
   11b88:	mov	r6, #0
   11b8c:	movt	r1, #2
   11b90:	strb	r0, [r1]
   11b94:	movw	r0, #57824	; 0xe1e0
   11b98:	movt	r0, #2
   11b9c:	ldr	r0, [r0]
   11ba0:	cmp	r0, #0
   11ba4:	beq	11f0c <__assert_fail@plt+0x8d0>
   11ba8:	movw	r2, #57684	; 0xe154
   11bac:	movw	r3, #57688	; 0xe158
   11bb0:	mov	r1, #110	; 0x6e
   11bb4:	movt	r2, #2
   11bb8:	movt	r3, #2
   11bbc:	bl	124d8 <__assert_fail@plt+0xe9c>
   11bc0:	b	11f0c <__assert_fail@plt+0x8d0>
   11bc4:	movw	r0, #57824	; 0xe1e0
   11bc8:	movw	r1, #47534	; 0xb9ae
   11bcc:	mov	r2, #5
   11bd0:	mov	r6, #0
   11bd4:	movt	r0, #2
   11bd8:	movt	r1, #1
   11bdc:	ldr	sl, [r0]
   11be0:	mov	r0, #0
   11be4:	bl	113b4 <dcgettext@plt>
   11be8:	mvn	r1, #-2147483648	; 0x80000000
   11bec:	mov	r2, #0
   11bf0:	mov	r3, #0
   11bf4:	stm	sp, {r1, r6}
   11bf8:	movw	r1, #52164	; 0xcbc4
   11bfc:	str	r0, [sp, #12]
   11c00:	mov	r0, sl
   11c04:	str	r6, [sp, #16]
   11c08:	movt	r1, #1
   11c0c:	str	r1, [sp, #8]
   11c10:	bl	19ef8 <__assert_fail@plt+0x88bc>
   11c14:	movw	r1, #57868	; 0xe20c
   11c18:	movt	r1, #2
   11c1c:	str	r0, [r1]
   11c20:	b	11f0c <__assert_fail@plt+0x8d0>
   11c24:	movw	r0, #57824	; 0xe1e0
   11c28:	mov	r1, #1
   11c2c:	mov	r6, #0
   11c30:	movt	r0, #2
   11c34:	str	r1, [sp, #28]
   11c38:	ldr	r0, [r0]
   11c3c:	cmp	r0, #0
   11c40:	beq	11c5c <__assert_fail@plt+0x620>
   11c44:	movw	r1, #57873	; 0xe211
   11c48:	movt	r1, #2
   11c4c:	ldrb	r1, [r1]
   11c50:	cmp	r1, #0
   11c54:	bne	11c5c <__assert_fail@plt+0x620>
   11c58:	bl	12594 <__assert_fail@plt+0xf58>
   11c5c:	mov	r0, #1
   11c60:	b	11cf4 <__assert_fail@plt+0x6b8>
   11c64:	movw	r1, #57881	; 0xe219
   11c68:	mov	r0, #1
   11c6c:	movt	r1, #2
   11c70:	strb	r0, [r1]
   11c74:	movw	r1, #57880	; 0xe218
   11c78:	movt	r1, #2
   11c7c:	b	11dc8 <__assert_fail@plt+0x78c>
   11c80:	movw	r1, #57842	; 0xe1f2
   11c84:	mov	r0, #1
   11c88:	movt	r1, #2
   11c8c:	b	11dc8 <__assert_fail@plt+0x78c>
   11c90:	movw	r1, #57844	; 0xe1f4
   11c94:	mov	r0, #1
   11c98:	movt	r1, #2
   11c9c:	b	11dc8 <__assert_fail@plt+0x78c>
   11ca0:	movw	r1, #57876	; 0xe214
   11ca4:	mov	r0, #0
   11ca8:	movt	r1, #2
   11cac:	str	r0, [r1]
   11cb0:	movw	r0, #52164	; 0xcbc4
   11cb4:	movw	r1, #57696	; 0xe160
   11cb8:	movt	r0, #1
   11cbc:	movt	r1, #2
   11cc0:	str	r0, [r1]
   11cc4:	movw	r1, #57873	; 0xe211
   11cc8:	mov	r0, #1
   11ccc:	movt	r1, #2
   11cd0:	strb	r0, [r1]
   11cd4:	movw	r0, #57824	; 0xe1e0
   11cd8:	movt	r0, #2
   11cdc:	ldr	r0, [r0]
   11ce0:	cmp	r0, #0
   11ce4:	beq	11cec <__assert_fail@plt+0x6b0>
   11ce8:	bl	12594 <__assert_fail@plt+0xf58>
   11cec:	mov	r0, #0
   11cf0:	mov	r6, #0
   11cf4:	str	r0, [sp, #32]
   11cf8:	b	11f0c <__assert_fail@plt+0x8d0>
   11cfc:	movw	r1, #57841	; 0xe1f1
   11d00:	mov	r0, #1
   11d04:	movt	r1, #2
   11d08:	strb	r0, [r1]
   11d0c:	movw	r1, #57840	; 0xe1f0
   11d10:	movt	r1, #2
   11d14:	b	11dc8 <__assert_fail@plt+0x78c>
   11d18:	movw	r0, #57824	; 0xe1e0
   11d1c:	movt	r0, #2
   11d20:	ldr	r0, [r0]
   11d24:	cmp	r0, #0
   11d28:	beq	11d44 <__assert_fail@plt+0x708>
   11d2c:	movw	r2, #57672	; 0xe148
   11d30:	movw	r3, #57676	; 0xe14c
   11d34:	mov	r1, #105	; 0x69
   11d38:	movt	r2, #2
   11d3c:	movt	r3, #2
   11d40:	bl	124d8 <__assert_fail@plt+0xe9c>
   11d44:	movw	r1, #57860	; 0xe204
   11d48:	mov	r0, #1
   11d4c:	movt	r1, #2
   11d50:	b	11dc8 <__assert_fail@plt+0x78c>
   11d54:	movw	r1, #57882	; 0xe21a
   11d58:	mov	r0, #1
   11d5c:	movt	r1, #2
   11d60:	b	11dc8 <__assert_fail@plt+0x78c>
   11d64:	movw	r0, #57824	; 0xe1e0
   11d68:	movt	r0, #2
   11d6c:	ldr	r0, [r0]
   11d70:	cmp	r0, #0
   11d74:	beq	11d90 <__assert_fail@plt+0x754>
   11d78:	movw	r2, #57664	; 0xe140
   11d7c:	movw	r3, #57668	; 0xe144
   11d80:	mov	r1, #101	; 0x65
   11d84:	movt	r2, #2
   11d88:	movt	r3, #2
   11d8c:	bl	124d8 <__assert_fail@plt+0xe9c>
   11d90:	movw	r1, #57852	; 0xe1fc
   11d94:	mov	r0, #1
   11d98:	movt	r1, #2
   11d9c:	b	11dc8 <__assert_fail@plt+0x78c>
   11da0:	movw	r1, #57841	; 0xe1f1
   11da4:	mov	r0, #1
   11da8:	movt	r1, #2
   11dac:	strb	r0, [r1]
   11db0:	movw	r1, #57862	; 0xe206
   11db4:	movt	r1, #2
   11db8:	b	11dc8 <__assert_fail@plt+0x78c>
   11dbc:	movw	r1, #57872	; 0xe210
   11dc0:	mov	r0, #1
   11dc4:	movt	r1, #2
   11dc8:	strb	r0, [r1]
   11dcc:	mov	r6, #0
   11dd0:	b	11f0c <__assert_fail@plt+0x8d0>
   11dd4:	movw	r0, #57824	; 0xe1e0
   11dd8:	movw	r1, #47566	; 0xb9ce
   11ddc:	mov	r2, #5
   11de0:	mov	r6, #0
   11de4:	movt	r0, #2
   11de8:	movt	r1, #1
   11dec:	ldr	sl, [r0]
   11df0:	mov	r0, #0
   11df4:	bl	113b4 <dcgettext@plt>
   11df8:	mvn	r1, #-2147483648	; 0x80000000
   11dfc:	mov	r2, #1
   11e00:	mov	r3, #0
   11e04:	stm	sp, {r1, r6}
   11e08:	movw	r1, #52164	; 0xcbc4
   11e0c:	str	r0, [sp, #12]
   11e10:	mov	r0, #1
   11e14:	str	r6, [sp, #16]
   11e18:	movt	r1, #1
   11e1c:	str	r0, [sp, #28]
   11e20:	mov	r0, sl
   11e24:	str	r1, [sp, #8]
   11e28:	bl	19ef8 <__assert_fail@plt+0x88bc>
   11e2c:	movw	r1, #57883	; 0xe21b
   11e30:	movt	r1, #2
   11e34:	ldrb	r1, [r1]
   11e38:	cmp	r1, #0
   11e3c:	movweq	r1, #57700	; 0xe164
   11e40:	movteq	r1, #2
   11e44:	streq	r0, [r1]
   11e48:	mov	r0, #1
   11e4c:	str	r0, [sp, #24]
   11e50:	b	11f0c <__assert_fail@plt+0x8d0>
   11e54:	sub	r0, sl, #48	; 0x30
   11e58:	cmp	r0, #9
   11e5c:	bhi	11e9c <__assert_fail@plt+0x860>
   11e60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11e64:	add	r8, r6, #1
   11e68:	cmp	r8, r0
   11e6c:	bcc	11e80 <__assert_fail@plt+0x844>
   11e70:	mov	r0, r9
   11e74:	sub	r1, fp, #32
   11e78:	bl	19a5c <__assert_fail@plt+0x8420>
   11e7c:	mov	r9, r0
   11e80:	mov	r0, #0
   11e84:	strb	sl, [r9, r6]
   11e88:	mov	r6, r8
   11e8c:	ldr	r5, [sp, #40]	; 0x28
   11e90:	strb	r0, [r9, r8]
   11e94:	ldr	r8, [sp, #36]	; 0x24
   11e98:	b	11f0c <__assert_fail@plt+0x8d0>
   11e9c:	cmp	sl, #67	; 0x43
   11ea0:	bgt	11818 <__assert_fail@plt+0x1dc>
   11ea4:	cmp	sl, #1
   11ea8:	bne	1229c <__assert_fail@plt+0xc60>
   11eac:	movw	r0, #57832	; 0xe1e8
   11eb0:	movt	r0, #2
   11eb4:	ldrd	r0, [r0]
   11eb8:	orrs	r0, r0, r1
   11ebc:	bne	11ef4 <__assert_fail@plt+0x8b8>
   11ec0:	movw	r0, #57824	; 0xe1e0
   11ec4:	movt	r0, #2
   11ec8:	ldr	r0, [r0]
   11ecc:	ldrb	r1, [r0]
   11ed0:	cmp	r1, #43	; 0x2b
   11ed4:	bne	11ef4 <__assert_fail@plt+0x8b8>
   11ed8:	add	r2, r0, #1
   11edc:	mvn	r0, #1
   11ee0:	mov	r1, #43	; 0x2b
   11ee4:	bl	123b4 <__assert_fail@plt+0xd78>
   11ee8:	mov	r6, #0
   11eec:	cmp	r0, #0
   11ef0:	bne	11f0c <__assert_fail@plt+0x8d0>
   11ef4:	movw	r0, #57824	; 0xe1e0
   11ef8:	mov	r6, #0
   11efc:	movt	r0, #2
   11f00:	ldr	r0, [r0]
   11f04:	str	r0, [r4, r7, lsl #2]
   11f08:	add	r7, r7, #1
   11f0c:	mvn	r0, #0
   11f10:	movw	r2, #52728	; 0xcdf8
   11f14:	movw	r3, #52784	; 0xce30
   11f18:	mov	r1, r8
   11f1c:	str	r0, [fp, #-36]	; 0xffffffdc
   11f20:	sub	r0, fp, #36	; 0x24
   11f24:	movt	r2, #1
   11f28:	movt	r3, #1
   11f2c:	str	r0, [sp]
   11f30:	mov	r0, r5
   11f34:	bl	114bc <getopt_long@plt>
   11f38:	mov	sl, r0
   11f3c:	cmn	r0, #1
   11f40:	bne	11e54 <__assert_fail@plt+0x818>
   11f44:	cmp	r9, #0
   11f48:	beq	11fb4 <__assert_fail@plt+0x978>
   11f4c:	movw	r1, #52037	; 0xcb45
   11f50:	mov	r0, #0
   11f54:	mov	r2, #5
   11f58:	mov	r5, #0
   11f5c:	movt	r1, #1
   11f60:	bl	113b4 <dcgettext@plt>
   11f64:	mvn	r1, #-2147483648	; 0x80000000
   11f68:	mov	r2, #1
   11f6c:	mov	r3, #0
   11f70:	stm	sp, {r1, r5}
   11f74:	movw	r1, #52164	; 0xcbc4
   11f78:	str	r0, [sp, #12]
   11f7c:	mov	r0, r9
   11f80:	str	r5, [sp, #16]
   11f84:	mov	r5, #1
   11f88:	movt	r1, #1
   11f8c:	str	r1, [sp, #8]
   11f90:	bl	19ef8 <__assert_fail@plt+0x88bc>
   11f94:	movw	r1, #57712	; 0xe170
   11f98:	movt	r1, #2
   11f9c:	str	r0, [r1]
   11fa0:	movw	r0, #57888	; 0xe220
   11fa4:	movt	r0, #2
   11fa8:	strb	r5, [r0]
   11fac:	mov	r0, r9
   11fb0:	bl	154dc <__assert_fail@plt+0x3ea0>
   11fb4:	add	r9, sp, #24
   11fb8:	ldm	r9, {r5, r6, r9}
   11fbc:	b	11fd0 <__assert_fail@plt+0x994>
   11fc0:	mov	r7, #0
   11fc4:	mov	r9, #0
   11fc8:	mov	r5, #0
   11fcc:	mov	r6, #0
   11fd0:	movw	r8, #57848	; 0xe1f8
   11fd4:	movt	r8, #2
   11fd8:	ldr	r0, [r8]
   11fdc:	cmp	r0, #0
   11fe0:	bne	12028 <__assert_fail@plt+0x9ec>
   11fe4:	movw	r0, #47701	; 0xba55
   11fe8:	movt	r0, #1
   11fec:	bl	1145c <getenv@plt>
   11ff0:	cmp	r0, #0
   11ff4:	beq	1201c <__assert_fail@plt+0x9e0>
   11ff8:	mov	r0, #2
   11ffc:	bl	155cc <__assert_fail@plt+0x3f90>
   12000:	movw	r2, #47732	; 0xba74
   12004:	movw	r1, #47717	; 0xba65
   12008:	cmp	r0, #0
   1200c:	movt	r2, #1
   12010:	movt	r1, #1
   12014:	movne	r1, r2
   12018:	b	12024 <__assert_fail@plt+0x9e8>
   1201c:	movw	r1, #47732	; 0xba74
   12020:	movt	r1, #1
   12024:	str	r1, [r8]
   12028:	movw	r0, #47747	; 0xba83
   1202c:	movt	r0, #1
   12030:	bl	1145c <getenv@plt>
   12034:	bl	18fdc <__assert_fail@plt+0x79a0>
   12038:	movw	r1, #57884	; 0xe21c
   1203c:	movt	r1, #2
   12040:	str	r0, [r1]
   12044:	movw	r0, #57832	; 0xe1e8
   12048:	movt	r0, #2
   1204c:	ldrd	r2, [r0]
   12050:	orrs	r1, r2, r3
   12054:	bne	12068 <__assert_fail@plt+0xa2c>
   12058:	mov	r2, #1
   1205c:	mov	r1, #0
   12060:	str	r2, [r0]
   12064:	str	r1, [r0, #4]
   12068:	movw	r0, #57862	; 0xe206
   1206c:	movt	r0, #2
   12070:	ldrb	r8, [r0]
   12074:	cmp	r8, #1
   12078:	bne	120a4 <__assert_fail@plt+0xa68>
   1207c:	movw	r0, #57888	; 0xe220
   12080:	movt	r0, #2
   12084:	ldrb	r0, [r0]
   12088:	cmp	r0, #1
   1208c:	beq	12358 <__assert_fail@plt+0xd1c>
   12090:	movw	r0, #57840	; 0xe1f0
   12094:	movt	r0, #2
   12098:	ldrb	r0, [r0]
   1209c:	cmp	r0, #1
   120a0:	beq	12364 <__assert_fail@plt+0xd28>
   120a4:	ldr	r3, [sp, #40]	; 0x28
   120a8:	tst	r6, #1
   120ac:	beq	1217c <__assert_fail@plt+0xb40>
   120b0:	tst	r5, #1
   120b4:	beq	120f8 <__assert_fail@plt+0xabc>
   120b8:	cmp	r8, #0
   120bc:	bne	120d4 <__assert_fail@plt+0xa98>
   120c0:	movw	r0, #57888	; 0xe220
   120c4:	movt	r0, #2
   120c8:	ldrb	r0, [r0]
   120cc:	cmp	r0, #1
   120d0:	bne	1216c <__assert_fail@plt+0xb30>
   120d4:	movw	r1, #57883	; 0xe21b
   120d8:	mov	r0, #1
   120dc:	tst	r9, #1
   120e0:	movt	r1, #2
   120e4:	strb	r0, [r1]
   120e8:	movwne	r1, #57873	; 0xe211
   120ec:	movtne	r1, #2
   120f0:	strbne	r0, [r1]
   120f4:	b	1217c <__assert_fail@plt+0xb40>
   120f8:	movw	r0, #57873	; 0xe211
   120fc:	movt	r0, #2
   12100:	ldrb	r1, [r0]
   12104:	cmp	r1, #0
   12108:	eoreq	r1, r9, #1
   1210c:	tsteq	r1, #1
   12110:	bne	1217c <__assert_fail@plt+0xb40>
   12114:	cmp	r8, #0
   12118:	bne	12130 <__assert_fail@plt+0xaf4>
   1211c:	movw	r1, #57888	; 0xe220
   12120:	movt	r1, #2
   12124:	ldrb	r1, [r1]
   12128:	cmp	r1, #1
   1212c:	bne	1217c <__assert_fail@plt+0xb40>
   12130:	movw	r1, #57883	; 0xe21b
   12134:	movt	r1, #2
   12138:	ldrb	r1, [r1]
   1213c:	cmp	r1, #0
   12140:	bne	12174 <__assert_fail@plt+0xb38>
   12144:	movw	r2, #57861	; 0xe205
   12148:	mov	r1, #1
   1214c:	movt	r2, #2
   12150:	strb	r1, [r2]
   12154:	movw	r2, #57876	; 0xe214
   12158:	movt	r2, #2
   1215c:	ldr	r2, [r2]
   12160:	cmp	r2, #1
   12164:	strbge	r1, [r0]
   12168:	b	1217c <__assert_fail@plt+0xb40>
   1216c:	movw	r0, #57861	; 0xe205
   12170:	movt	r0, #2
   12174:	mov	r1, #1
   12178:	strb	r1, [r0]
   1217c:	movw	r9, #57800	; 0xe1c8
   12180:	movt	r9, #2
   12184:	ldr	r6, [r9]
   12188:	cmp	r6, r3
   1218c:	bge	121b8 <__assert_fail@plt+0xb7c>
   12190:	ldr	r1, [sp, #36]	; 0x24
   12194:	sub	r2, r3, r6
   12198:	add	r0, r4, r7, lsl #2
   1219c:	mov	r5, r3
   121a0:	lsl	r2, r2, #2
   121a4:	add	r1, r1, r6, lsl #2
   121a8:	bl	11384 <memcpy@plt>
   121ac:	add	r0, r7, r5
   121b0:	str	r5, [r9]
   121b4:	sub	r7, r0, r6
   121b8:	cmp	r7, #0
   121bc:	beq	121f0 <__assert_fail@plt+0xbb4>
   121c0:	cmp	r8, #0
   121c4:	beq	121d4 <__assert_fail@plt+0xb98>
   121c8:	mov	r0, r7
   121cc:	mov	r1, r4
   121d0:	b	121f8 <__assert_fail@plt+0xbbc>
   121d4:	mov	r0, #1
   121d8:	mov	r1, r4
   121dc:	bl	12990 <__assert_fail@plt+0x1354>
   121e0:	subs	r7, r7, #1
   121e4:	add	r4, r4, #4
   121e8:	bne	121d4 <__assert_fail@plt+0xb98>
   121ec:	b	121fc <__assert_fail@plt+0xbc0>
   121f0:	mov	r0, #0
   121f4:	mov	r1, #0
   121f8:	bl	12990 <__assert_fail@plt+0x1354>
   121fc:	movw	r0, #57920	; 0xe240
   12200:	movt	r0, #2
   12204:	ldr	r0, [r0]
   12208:	bl	154dc <__assert_fail@plt+0x3ea0>
   1220c:	movw	r0, #57924	; 0xe244
   12210:	movt	r0, #2
   12214:	ldr	r0, [r0]
   12218:	bl	154dc <__assert_fail@plt+0x3ea0>
   1221c:	movw	r0, #57932	; 0xe24c
   12220:	movt	r0, #2
   12224:	ldr	r0, [r0]
   12228:	bl	154dc <__assert_fail@plt+0x3ea0>
   1222c:	movw	r0, #57964	; 0xe26c
   12230:	movt	r0, #2
   12234:	ldr	r0, [r0]
   12238:	bl	154dc <__assert_fail@plt+0x3ea0>
   1223c:	movw	r0, #57968	; 0xe270
   12240:	movt	r0, #2
   12244:	ldr	r0, [r0]
   12248:	bl	154dc <__assert_fail@plt+0x3ea0>
   1224c:	movw	r0, #57972	; 0xe274
   12250:	movt	r0, #2
   12254:	ldr	r0, [r0]
   12258:	bl	154dc <__assert_fail@plt+0x3ea0>
   1225c:	movw	r0, #57889	; 0xe221
   12260:	movt	r0, #2
   12264:	ldrb	r0, [r0]
   12268:	cmp	r0, #1
   1226c:	bne	12288 <__assert_fail@plt+0xc4c>
   12270:	movw	r0, #57816	; 0xe1d8
   12274:	movt	r0, #2
   12278:	ldr	r0, [r0]
   1227c:	bl	15338 <__assert_fail@plt+0x3cfc>
   12280:	cmn	r0, #1
   12284:	beq	12388 <__assert_fail@plt+0xd4c>
   12288:	movw	r0, #57890	; 0xe222
   1228c:	movt	r0, #2
   12290:	ldrb	r0, [r0]
   12294:	sub	sp, fp, #28
   12298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1229c:	cmn	sl, #3
   122a0:	bne	122f8 <__assert_fail@plt+0xcbc>
   122a4:	movw	r0, #57720	; 0xe178
   122a8:	movw	r2, #47686	; 0xba46
   122ac:	mov	r1, #0
   122b0:	movw	r7, #47673	; 0xba39
   122b4:	movt	r0, #2
   122b8:	movt	r2, #1
   122bc:	str	r1, [sp, #8]
   122c0:	movw	r1, #47656	; 0xba28
   122c4:	movt	r7, #1
   122c8:	ldr	r3, [r0]
   122cc:	movw	r0, #57820	; 0xe1dc
   122d0:	str	r2, [sp, #4]
   122d4:	movw	r2, #47659	; 0xba2b
   122d8:	movt	r1, #1
   122dc:	str	r7, [sp]
   122e0:	movt	r0, #2
   122e4:	movt	r2, #1
   122e8:	ldr	r0, [r0]
   122ec:	bl	19850 <__assert_fail@plt+0x8214>
   122f0:	mov	r0, #0
   122f4:	bl	114d4 <exit@plt>
   122f8:	cmn	sl, #2
   122fc:	bne	12350 <__assert_fail@plt+0xd14>
   12300:	mov	r0, #0
   12304:	bl	125c8 <__assert_fail@plt+0xf8c>
   12308:	movw	r1, #47380	; 0xb914
   1230c:	movt	r1, #1
   12310:	b	1236c <__assert_fail@plt+0xd30>
   12314:	movw	r1, #47430	; 0xb946
   12318:	mov	r0, #0
   1231c:	mov	r2, #5
   12320:	movt	r1, #1
   12324:	bl	113b4 <dcgettext@plt>
   12328:	mov	r4, r0
   1232c:	movw	r0, #57824	; 0xe1e0
   12330:	movt	r0, #2
   12334:	ldr	r0, [r0]
   12338:	bl	18e10 <__assert_fail@plt+0x77d4>
   1233c:	mov	r3, r0
   12340:	mov	r0, #1
   12344:	mov	r1, #0
   12348:	mov	r2, r4
   1234c:	bl	11450 <error@plt>
   12350:	mov	r0, #1
   12354:	bl	125c8 <__assert_fail@plt+0xf8c>
   12358:	movw	r1, #47750	; 0xba86
   1235c:	movt	r1, #1
   12360:	b	1236c <__assert_fail@plt+0xd30>
   12364:	movw	r1, #47809	; 0xbac1
   12368:	movt	r1, #1
   1236c:	mov	r0, #0
   12370:	mov	r2, #5
   12374:	bl	113b4 <dcgettext@plt>
   12378:	mov	r2, r0
   1237c:	mov	r0, #1
   12380:	mov	r1, #0
   12384:	bl	11450 <error@plt>
   12388:	bl	11510 <__errno_location@plt>
   1238c:	ldr	r4, [r0]
   12390:	movw	r1, #47870	; 0xbafe
   12394:	mov	r0, #0
   12398:	mov	r2, #5
   1239c:	movt	r1, #1
   123a0:	bl	113b4 <dcgettext@plt>
   123a4:	mov	r2, r0
   123a8:	mov	r0, #1
   123ac:	mov	r1, r4
   123b0:	bl	11450 <error@plt>
   123b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   123b8:	add	fp, sp, #24
   123bc:	sub	sp, sp, #32
   123c0:	movw	r6, #52164	; 0xcbc4
   123c4:	mvn	r5, #0
   123c8:	mov	r8, r1
   123cc:	mov	r9, r0
   123d0:	mov	r7, r2
   123d4:	mov	r0, r2
   123d8:	add	r1, sp, #28
   123dc:	add	r3, sp, #16
   123e0:	mov	r2, #10
   123e4:	movt	r6, #1
   123e8:	str	r5, [sp, #12]
   123ec:	str	r5, [sp, #8]
   123f0:	str	r6, [sp]
   123f4:	bl	1ab64 <__assert_fail@plt+0x9528>
   123f8:	orr	r1, r0, #2
   123fc:	cmp	r1, #2
   12400:	bne	124c0 <__assert_fail@plt+0xe84>
   12404:	ldr	r3, [sp, #28]
   12408:	mov	r4, #0
   1240c:	cmp	r3, r7
   12410:	ldrne	r0, [sp, #16]
   12414:	ldrne	r1, [sp, #20]
   12418:	orrsne	r2, r0, r1
   1241c:	bne	1242c <__assert_fail@plt+0xdf0>
   12420:	mov	r0, r4
   12424:	sub	sp, fp, #24
   12428:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1242c:	ldrb	r2, [r3]
   12430:	cmp	r2, #58	; 0x3a
   12434:	bne	1248c <__assert_fail@plt+0xe50>
   12438:	add	r5, r3, #1
   1243c:	add	r1, sp, #28
   12440:	add	r3, sp, #8
   12444:	mov	r2, #10
   12448:	str	r6, [sp]
   1244c:	mov	r0, r5
   12450:	bl	1ab64 <__assert_fail@plt+0x9528>
   12454:	cmp	r0, #0
   12458:	bne	124c0 <__assert_fail@plt+0xe84>
   1245c:	ldr	r2, [sp, #28]
   12460:	cmp	r5, r2
   12464:	beq	12420 <__assert_fail@plt+0xde4>
   12468:	ldr	r0, [sp, #16]
   1246c:	ldr	r5, [sp, #8]
   12470:	ldr	r1, [sp, #20]
   12474:	ldr	r3, [sp, #12]
   12478:	subs	r7, r5, r0
   1247c:	sbcs	r7, r3, r1
   12480:	bcc	12420 <__assert_fail@plt+0xde4>
   12484:	ldrb	r2, [r2]
   12488:	b	12490 <__assert_fail@plt+0xe54>
   1248c:	mvn	r3, #0
   12490:	cmp	r2, #0
   12494:	bne	12420 <__assert_fail@plt+0xde4>
   12498:	movw	r2, #57704	; 0xe168
   1249c:	movw	r7, #57832	; 0xe1e8
   124a0:	mov	r4, #1
   124a4:	movt	r7, #2
   124a8:	movt	r2, #2
   124ac:	str	r0, [r7]
   124b0:	str	r5, [r2]
   124b4:	str	r3, [r2, #4]
   124b8:	str	r1, [r7, #4]
   124bc:	b	12420 <__assert_fail@plt+0xde4>
   124c0:	movw	r3, #52784	; 0xce30
   124c4:	mov	r1, r9
   124c8:	mov	r2, r8
   124cc:	str	r7, [sp]
   124d0:	movt	r3, #1
   124d4:	bl	1aaa0 <__assert_fail@plt+0x9464>
   124d8:	push	{r4, r5, r6, r7, fp, lr}
   124dc:	add	fp, sp, #16
   124e0:	sub	sp, sp, #8
   124e4:	mov	r5, r0
   124e8:	ldrb	r0, [r0]
   124ec:	mov	r4, r1
   124f0:	mov	r6, r3
   124f4:	sub	r1, r0, #48	; 0x30
   124f8:	cmp	r1, #10
   124fc:	strbcs	r0, [r2]
   12500:	ldrbcs	r0, [r5, #1]!
   12504:	cmp	r0, #0
   12508:	beq	12544 <__assert_fail@plt+0xf08>
   1250c:	movw	r0, #52164	; 0xcbc4
   12510:	add	r3, sp, #4
   12514:	mov	r1, #0
   12518:	mov	r2, #10
   1251c:	movt	r0, #1
   12520:	str	r0, [sp]
   12524:	mov	r0, r5
   12528:	bl	1a56c <__assert_fail@plt+0x8f30>
   1252c:	cmp	r0, #0
   12530:	bne	1254c <__assert_fail@plt+0xf10>
   12534:	ldr	r0, [sp, #4]
   12538:	cmp	r0, #0
   1253c:	ble	1254c <__assert_fail@plt+0xf10>
   12540:	str	r0, [r6]
   12544:	sub	sp, fp, #16
   12548:	pop	{r4, r5, r6, r7, fp, pc}
   1254c:	bl	11510 <__errno_location@plt>
   12550:	ldr	r6, [r0]
   12554:	movw	r1, #52080	; 0xcb70
   12558:	mov	r0, #0
   1255c:	mov	r2, #5
   12560:	movt	r1, #1
   12564:	bl	113b4 <dcgettext@plt>
   12568:	mov	r7, r0
   1256c:	mov	r0, r5
   12570:	bl	18e10 <__assert_fail@plt+0x77d4>
   12574:	str	r0, [sp]
   12578:	mov	r0, #0
   1257c:	mov	r1, r6
   12580:	mov	r2, r7
   12584:	mov	r3, r4
   12588:	bl	11450 <error@plt>
   1258c:	mov	r0, #1
   12590:	bl	125c8 <__assert_fail@plt+0xf8c>
   12594:	push	{r4, sl, fp, lr}
   12598:	add	fp, sp, #8
   1259c:	mov	r4, r0
   125a0:	bl	114e0 <strlen@plt>
   125a4:	cmn	r0, #1
   125a8:	movwgt	r1, #57696	; 0xe160
   125ac:	movtgt	r1, #2
   125b0:	strgt	r4, [r1]
   125b4:	movwgt	r1, #57876	; 0xe214
   125b8:	movtgt	r1, #2
   125bc:	strgt	r0, [r1]
   125c0:	popgt	{r4, sl, fp, pc}
   125c4:	bl	13c78 <__assert_fail@plt+0x263c>
   125c8:	push	{fp, lr}
   125cc:	mov	fp, sp
   125d0:	sub	sp, sp, #56	; 0x38
   125d4:	mov	r8, r0
   125d8:	cmp	r0, #0
   125dc:	bne	12950 <__assert_fail@plt+0x1314>
   125e0:	movw	r1, #47924	; 0xbb34
   125e4:	mov	r0, #0
   125e8:	mov	r2, #5
   125ec:	movt	r1, #1
   125f0:	bl	113b4 <dcgettext@plt>
   125f4:	mov	r1, r0
   125f8:	movw	r0, #58024	; 0xe2a8
   125fc:	movt	r0, #2
   12600:	ldr	r2, [r0]
   12604:	mov	r0, #1
   12608:	bl	11540 <__printf_chk@plt>
   1260c:	movw	r1, #47957	; 0xbb55
   12610:	mov	r0, #0
   12614:	mov	r2, #5
   12618:	movt	r1, #1
   1261c:	bl	113b4 <dcgettext@plt>
   12620:	movw	r9, #57820	; 0xe1dc
   12624:	movt	r9, #2
   12628:	ldr	r1, [r9]
   1262c:	bl	112f4 <fputs_unlocked@plt>
   12630:	movw	r1, #52286	; 0xcc3e
   12634:	mov	r0, #0
   12638:	mov	r2, #5
   1263c:	movt	r1, #1
   12640:	bl	113b4 <dcgettext@plt>
   12644:	ldr	r1, [r9]
   12648:	bl	112f4 <fputs_unlocked@plt>
   1264c:	movw	r1, #52342	; 0xcc76
   12650:	mov	r0, #0
   12654:	mov	r2, #5
   12658:	movt	r1, #1
   1265c:	bl	113b4 <dcgettext@plt>
   12660:	ldr	r1, [r9]
   12664:	bl	112f4 <fputs_unlocked@plt>
   12668:	movw	r1, #48002	; 0xbb82
   1266c:	mov	r0, #0
   12670:	mov	r2, #5
   12674:	movt	r1, #1
   12678:	bl	113b4 <dcgettext@plt>
   1267c:	ldr	r1, [r9]
   12680:	bl	112f4 <fputs_unlocked@plt>
   12684:	movw	r1, #48336	; 0xbcd0
   12688:	mov	r0, #0
   1268c:	mov	r2, #5
   12690:	movt	r1, #1
   12694:	bl	113b4 <dcgettext@plt>
   12698:	ldr	r1, [r9]
   1269c:	bl	112f4 <fputs_unlocked@plt>
   126a0:	movw	r1, #48606	; 0xbdde
   126a4:	mov	r0, #0
   126a8:	mov	r2, #5
   126ac:	movt	r1, #1
   126b0:	bl	113b4 <dcgettext@plt>
   126b4:	ldr	r1, [r9]
   126b8:	bl	112f4 <fputs_unlocked@plt>
   126bc:	movw	r1, #49006	; 0xbf6e
   126c0:	mov	r0, #0
   126c4:	mov	r2, #5
   126c8:	movt	r1, #1
   126cc:	bl	113b4 <dcgettext@plt>
   126d0:	ldr	r1, [r9]
   126d4:	bl	112f4 <fputs_unlocked@plt>
   126d8:	movw	r1, #49433	; 0xc119
   126dc:	mov	r0, #0
   126e0:	mov	r2, #5
   126e4:	movt	r1, #1
   126e8:	bl	113b4 <dcgettext@plt>
   126ec:	ldr	r1, [r9]
   126f0:	bl	112f4 <fputs_unlocked@plt>
   126f4:	movw	r1, #49653	; 0xc1f5
   126f8:	mov	r0, #0
   126fc:	mov	r2, #5
   12700:	movt	r1, #1
   12704:	bl	113b4 <dcgettext@plt>
   12708:	ldr	r1, [r9]
   1270c:	bl	112f4 <fputs_unlocked@plt>
   12710:	movw	r1, #49797	; 0xc285
   12714:	mov	r0, #0
   12718:	mov	r2, #5
   1271c:	movt	r1, #1
   12720:	bl	113b4 <dcgettext@plt>
   12724:	ldr	r1, [r9]
   12728:	bl	112f4 <fputs_unlocked@plt>
   1272c:	movw	r1, #50143	; 0xc3df
   12730:	mov	r0, #0
   12734:	mov	r2, #5
   12738:	movt	r1, #1
   1273c:	bl	113b4 <dcgettext@plt>
   12740:	ldr	r1, [r9]
   12744:	bl	112f4 <fputs_unlocked@plt>
   12748:	movw	r1, #50396	; 0xc4dc
   1274c:	mov	r0, #0
   12750:	mov	r2, #5
   12754:	movt	r1, #1
   12758:	bl	113b4 <dcgettext@plt>
   1275c:	ldr	r1, [r9]
   12760:	bl	112f4 <fputs_unlocked@plt>
   12764:	movw	r1, #50722	; 0xc622
   12768:	mov	r0, #0
   1276c:	mov	r2, #5
   12770:	movt	r1, #1
   12774:	bl	113b4 <dcgettext@plt>
   12778:	ldr	r1, [r9]
   1277c:	bl	112f4 <fputs_unlocked@plt>
   12780:	movw	r1, #50958	; 0xc70e
   12784:	mov	r0, #0
   12788:	mov	r2, #5
   1278c:	movt	r1, #1
   12790:	bl	113b4 <dcgettext@plt>
   12794:	ldr	r1, [r9]
   12798:	bl	112f4 <fputs_unlocked@plt>
   1279c:	movw	r1, #51062	; 0xc776
   127a0:	mov	r0, #0
   127a4:	mov	r2, #5
   127a8:	movt	r1, #1
   127ac:	bl	113b4 <dcgettext@plt>
   127b0:	ldr	r1, [r9]
   127b4:	bl	112f4 <fputs_unlocked@plt>
   127b8:	movw	r1, #51463	; 0xc907
   127bc:	mov	r0, #0
   127c0:	mov	r2, #5
   127c4:	movt	r1, #1
   127c8:	bl	113b4 <dcgettext@plt>
   127cc:	ldr	r1, [r9]
   127d0:	bl	112f4 <fputs_unlocked@plt>
   127d4:	movw	r1, #51678	; 0xc9de
   127d8:	mov	r0, #0
   127dc:	mov	r2, #5
   127e0:	movt	r1, #1
   127e4:	bl	113b4 <dcgettext@plt>
   127e8:	ldr	r1, [r9]
   127ec:	bl	112f4 <fputs_unlocked@plt>
   127f0:	movw	r1, #51723	; 0xca0b
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	movt	r1, #1
   12800:	bl	113b4 <dcgettext@plt>
   12804:	ldr	r1, [r9]
   12808:	bl	112f4 <fputs_unlocked@plt>
   1280c:	movw	r0, #53216	; 0xcfe0
   12810:	mov	r6, sp
   12814:	movt	r0, #1
   12818:	mov	r1, r6
   1281c:	ldm	r0!, {r2, r3, r4, r5}
   12820:	stmia	r1!, {r2, r3, r4, r5}
   12824:	ldm	r0!, {r2, r3, r4, r5, r7}
   12828:	stmia	r1!, {r2, r3, r4, r5, r7}
   1282c:	ldm	r0, {r2, r3, r4, r5, r7}
   12830:	stm	r1, {r2, r3, r4, r5, r7}
   12834:	movw	r1, #52417	; 0xccc1
   12838:	movw	r5, #47656	; 0xba28
   1283c:	movt	r1, #1
   12840:	movt	r5, #1
   12844:	mov	r0, r5
   12848:	bl	11318 <strcmp@plt>
   1284c:	cmp	r0, #0
   12850:	ldrne	r1, [r6, #8]!
   12854:	cmpne	r1, #0
   12858:	bne	12844 <__assert_fail@plt+0x1208>
   1285c:	ldr	r6, [r6, #4]
   12860:	movw	r1, #52512	; 0xcd20
   12864:	mov	r0, #0
   12868:	mov	r2, #5
   1286c:	movt	r1, #1
   12870:	bl	113b4 <dcgettext@plt>
   12874:	movw	r2, #47659	; 0xba2b
   12878:	movw	r3, #52535	; 0xcd37
   1287c:	mov	r1, r0
   12880:	mov	r0, #1
   12884:	movt	r2, #1
   12888:	movt	r3, #1
   1288c:	bl	11540 <__printf_chk@plt>
   12890:	cmp	r6, #0
   12894:	mov	r0, #5
   12898:	mov	r1, #0
   1289c:	moveq	r6, r5
   128a0:	bl	115a0 <setlocale@plt>
   128a4:	cmp	r0, #0
   128a8:	beq	128e0 <__assert_fail@plt+0x12a4>
   128ac:	movw	r1, #52575	; 0xcd5f
   128b0:	mov	r2, #3
   128b4:	movt	r1, #1
   128b8:	bl	1160c <strncmp@plt>
   128bc:	cmp	r0, #0
   128c0:	beq	128e0 <__assert_fail@plt+0x12a4>
   128c4:	movw	r1, #52579	; 0xcd63
   128c8:	mov	r0, #0
   128cc:	mov	r2, #5
   128d0:	movt	r1, #1
   128d4:	bl	113b4 <dcgettext@plt>
   128d8:	ldr	r1, [r9]
   128dc:	bl	112f4 <fputs_unlocked@plt>
   128e0:	movw	r1, #52650	; 0xcdaa
   128e4:	mov	r0, #0
   128e8:	mov	r2, #5
   128ec:	movt	r1, #1
   128f0:	bl	113b4 <dcgettext@plt>
   128f4:	movw	r2, #52535	; 0xcd37
   128f8:	mov	r1, r0
   128fc:	mov	r0, #1
   12900:	mov	r3, r5
   12904:	movt	r2, #1
   12908:	bl	11540 <__printf_chk@plt>
   1290c:	movw	r1, #52677	; 0xcdc5
   12910:	mov	r0, #0
   12914:	mov	r2, #5
   12918:	movt	r1, #1
   1291c:	bl	113b4 <dcgettext@plt>
   12920:	movw	r3, #52164	; 0xcbc4
   12924:	mov	r1, r0
   12928:	movw	r0, #52445	; 0xccdd
   1292c:	cmp	r6, r5
   12930:	mov	r2, r6
   12934:	movt	r0, #1
   12938:	movt	r3, #1
   1293c:	moveq	r3, r0
   12940:	mov	r0, #1
   12944:	bl	11540 <__printf_chk@plt>
   12948:	mov	r0, r8
   1294c:	bl	114d4 <exit@plt>
   12950:	movw	r0, #57808	; 0xe1d0
   12954:	movw	r1, #47885	; 0xbb0d
   12958:	mov	r2, #5
   1295c:	movt	r0, #2
   12960:	movt	r1, #1
   12964:	ldr	r5, [r0]
   12968:	mov	r0, #0
   1296c:	bl	113b4 <dcgettext@plt>
   12970:	mov	r2, r0
   12974:	movw	r0, #58024	; 0xe2a8
   12978:	mov	r1, #1
   1297c:	movt	r0, #2
   12980:	ldr	r3, [r0]
   12984:	mov	r0, r5
   12988:	bl	11564 <__fprintf_chk@plt>
   1298c:	b	12948 <__assert_fail@plt+0x130c>
   12990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12994:	add	fp, sp, #28
   12998:	sub	sp, sp, #44	; 0x2c
   1299c:	mov	r5, r0
   129a0:	movw	r0, #57680	; 0xe150
   129a4:	movw	r2, #57908	; 0xe234
   129a8:	mov	r4, r1
   129ac:	movt	r0, #2
   129b0:	movt	r2, #2
   129b4:	ldr	r0, [r0]
   129b8:	subs	r1, r0, #10
   129bc:	str	r1, [r2]
   129c0:	bgt	129e4 <__assert_fail@plt+0x13a8>
   129c4:	movw	r1, #57881	; 0xe219
   129c8:	mov	r2, #1
   129cc:	movt	r1, #2
   129d0:	strb	r2, [r1]
   129d4:	movw	r1, #57880	; 0xe218
   129d8:	movt	r1, #2
   129dc:	strb	r2, [r1]
   129e0:	b	129f8 <__assert_fail@plt+0x13bc>
   129e4:	movw	r2, #57880	; 0xe218
   129e8:	movt	r2, #2
   129ec:	ldrb	r2, [r2]
   129f0:	cmp	r2, #1
   129f4:	bne	12a08 <__assert_fail@plt+0x13cc>
   129f8:	movw	r1, #57908	; 0xe234
   129fc:	movt	r1, #2
   12a00:	str	r0, [r1]
   12a04:	mov	r1, r0
   12a08:	movw	r0, #57844	; 0xe1f4
   12a0c:	movt	r0, #2
   12a10:	ldrb	r0, [r0]
   12a14:	cmp	r0, #1
   12a18:	bne	12a30 <__assert_fail@plt+0x13f4>
   12a1c:	add	r0, r1, r1, lsr #31
   12a20:	movw	r1, #57908	; 0xe234
   12a24:	asr	r0, r0, #1
   12a28:	movt	r1, #2
   12a2c:	str	r0, [r1]
   12a30:	movw	r0, #57862	; 0xe206
   12a34:	cmp	r5, #0
   12a38:	movt	r0, #2
   12a3c:	beq	12a60 <__assert_fail@plt+0x1424>
   12a40:	ldrb	r0, [r0]
   12a44:	mov	r1, #0
   12a48:	cmp	r0, #1
   12a4c:	movweq	r0, #57712	; 0xe170
   12a50:	moveq	r1, #1
   12a54:	movteq	r0, #2
   12a58:	streq	r5, [r0]
   12a5c:	b	12a68 <__assert_fail@plt+0x142c>
   12a60:	mov	r1, #0
   12a64:	strb	r1, [r0]
   12a68:	movw	r0, #57841	; 0xe1f1
   12a6c:	movw	r8, #57712	; 0xe170
   12a70:	movt	r0, #2
   12a74:	movt	r8, #2
   12a78:	ldrb	r0, [r0]
   12a7c:	cmp	r0, #0
   12a80:	movweq	r0, #57842	; 0xe1f2
   12a84:	moveq	r2, #1
   12a88:	movteq	r0, #2
   12a8c:	strbeq	r2, [r0]
   12a90:	ldr	r0, [r8]
   12a94:	cmp	r0, #2
   12a98:	blt	12b20 <__assert_fail@plt+0x14e4>
   12a9c:	movw	r3, #57873	; 0xe211
   12aa0:	movw	r2, #57861	; 0xe205
   12aa4:	movt	r3, #2
   12aa8:	movt	r2, #2
   12aac:	ldrb	r7, [r3]
   12ab0:	ldrb	r2, [r2]
   12ab4:	cmp	r7, #0
   12ab8:	beq	12b40 <__assert_fail@plt+0x1504>
   12abc:	movw	r3, #57876	; 0xe214
   12ac0:	movt	r3, #2
   12ac4:	ldr	r3, [r3]
   12ac8:	cmp	r3, #1
   12acc:	bne	12af8 <__assert_fail@plt+0x14bc>
   12ad0:	eors	r7, r2, #1
   12ad4:	beq	12af8 <__assert_fail@plt+0x14bc>
   12ad8:	movw	r7, #57696	; 0xe160
   12adc:	movt	r7, #2
   12ae0:	ldr	r6, [r7]
   12ae4:	ldrb	r6, [r6]
   12ae8:	cmp	r6, #9
   12aec:	movweq	r6, #52165	; 0xcbc5
   12af0:	movteq	r6, #1
   12af4:	streq	r6, [r7]
   12af8:	movw	r7, #57883	; 0xe21b
   12afc:	cmp	r3, #1
   12b00:	mov	r6, #1
   12b04:	movt	r7, #2
   12b08:	strb	r6, [r7]
   12b0c:	bne	12b90 <__assert_fail@plt+0x1554>
   12b10:	movw	r3, #57696	; 0xe160
   12b14:	movt	r3, #2
   12b18:	ldr	r3, [r3]
   12b1c:	b	12b84 <__assert_fail@plt+0x1548>
   12b20:	movw	r3, #57841	; 0xe1f1
   12b24:	mov	r2, #1
   12b28:	movt	r3, #2
   12b2c:	strb	r2, [r3]
   12b30:	movw	r2, #57861	; 0xe205
   12b34:	movt	r2, #2
   12b38:	ldrb	r2, [r2]
   12b3c:	b	12bb0 <__assert_fail@plt+0x1574>
   12b40:	mov	r6, #1
   12b44:	movw	r7, #57876	; 0xe214
   12b48:	cmp	r2, #0
   12b4c:	strb	r6, [r3]
   12b50:	movw	r3, #57883	; 0xe21b
   12b54:	movt	r7, #2
   12b58:	movt	r3, #2
   12b5c:	str	r6, [r7]
   12b60:	movw	r7, #52163	; 0xcbc3
   12b64:	strb	r6, [r3]
   12b68:	movw	r3, #52165	; 0xcbc5
   12b6c:	movt	r7, #1
   12b70:	movt	r3, #1
   12b74:	movne	r3, r7
   12b78:	movw	r7, #57696	; 0xe160
   12b7c:	movt	r7, #2
   12b80:	str	r3, [r7]
   12b84:	ldrb	r3, [r3]
   12b88:	cmp	r3, #9
   12b8c:	beq	12ba0 <__assert_fail@plt+0x1564>
   12b90:	movw	r3, #57852	; 0xe1fc
   12b94:	mov	r7, #1
   12b98:	movt	r3, #2
   12b9c:	strb	r7, [r3]
   12ba0:	movw	r3, #57860	; 0xe204
   12ba4:	mov	r7, #1
   12ba8:	movt	r3, #2
   12bac:	strb	r7, [r3]
   12bb0:	cmp	r2, #0
   12bb4:	movwne	r2, #57883	; 0xe21b
   12bb8:	movne	r3, #0
   12bbc:	movtne	r2, #2
   12bc0:	strbne	r3, [r2]
   12bc4:	movw	r2, #57863	; 0xe207
   12bc8:	mov	r3, #0
   12bcc:	movt	r2, #2
   12bd0:	ldrb	ip, [r2]
   12bd4:	cmp	ip, #1
   12bd8:	bne	12c44 <__assert_fail@plt+0x1608>
   12bdc:	movw	r3, #57692	; 0xe15c
   12be0:	movw	r7, #57716	; 0xe174
   12be4:	movt	r3, #2
   12be8:	movt	r7, #2
   12bec:	ldr	r3, [r3]
   12bf0:	str	r3, [r7]
   12bf4:	movw	r7, #57684	; 0xe154
   12bf8:	movw	r3, #57688	; 0xe158
   12bfc:	movt	r7, #2
   12c00:	movt	r3, #2
   12c04:	ldrb	r7, [r7]
   12c08:	ldr	r3, [r3]
   12c0c:	cmp	r7, #9
   12c10:	bne	12c28 <__assert_fail@plt+0x15ec>
   12c14:	asr	r7, r3, #31
   12c18:	add	r3, r3, r7, lsr #29
   12c1c:	bic	r3, r3, #7
   12c20:	add	r3, r3, #8
   12c24:	b	12c2c <__assert_fail@plt+0x15f0>
   12c28:	add	r3, r3, #1
   12c2c:	movw	r7, #57912	; 0xe238
   12c30:	cmp	r1, #0
   12c34:	movt	r7, #2
   12c38:	movne	r1, r3
   12c3c:	str	r3, [r7]
   12c40:	mov	r3, r1
   12c44:	movw	r1, #57876	; 0xe214
   12c48:	sub	r7, r0, #1
   12c4c:	movt	r1, #2
   12c50:	ldr	r1, [r1]
   12c54:	cmn	r1, #1
   12c58:	ble	12c78 <__assert_fail@plt+0x163c>
   12c5c:	cmp	r1, #0
   12c60:	beq	12cd4 <__assert_fail@plt+0x1698>
   12c64:	cmp	r0, #0
   12c68:	ble	12ca0 <__assert_fail@plt+0x1664>
   12c6c:	mvn	r6, #-2147483648	; 0x80000000
   12c70:	udiv	r2, r6, r1
   12c74:	b	12c94 <__assert_fail@plt+0x1658>
   12c78:	cmp	r0, #0
   12c7c:	ble	12cbc <__assert_fail@plt+0x1680>
   12c80:	cmn	r1, #1
   12c84:	beq	12cd4 <__assert_fail@plt+0x1698>
   12c88:	mov	r2, #-2147483648	; 0x80000000
   12c8c:	mvn	r6, #-2147483648	; 0x80000000
   12c90:	sdiv	r2, r2, r1
   12c94:	cmp	r2, r7
   12c98:	bge	12cd4 <__assert_fail@plt+0x1698>
   12c9c:	b	12cd8 <__assert_fail@plt+0x169c>
   12ca0:	beq	12cd0 <__assert_fail@plt+0x1694>
   12ca4:	mov	r2, #-2147483648	; 0x80000000
   12ca8:	mvn	r6, #-2147483648	; 0x80000000
   12cac:	sdiv	r2, r2, r7
   12cb0:	cmp	r2, r1
   12cb4:	mulge	r6, r7, r1
   12cb8:	b	12cd8 <__assert_fail@plt+0x169c>
   12cbc:	mvn	r6, #-2147483648	; 0x80000000
   12cc0:	sdiv	r2, r6, r1
   12cc4:	cmp	r0, r2
   12cc8:	bgt	12cd4 <__assert_fail@plt+0x1698>
   12ccc:	b	12cd8 <__assert_fail@plt+0x169c>
   12cd0:	mvn	r7, #0
   12cd4:	mul	r6, r7, r1
   12cd8:	movw	r1, #57700	; 0xe164
   12cdc:	movt	r1, #2
   12ce0:	ldr	r1, [r1]
   12ce4:	sub	r1, r1, r3
   12ce8:	subs	r1, r1, r6
   12cec:	movvs	r1, #0
   12cf0:	sdiv	r0, r1, r0
   12cf4:	movw	r1, #57916	; 0xe23c
   12cf8:	movt	r1, #2
   12cfc:	cmp	r0, #0
   12d00:	str	r0, [r1]
   12d04:	ble	13c54 <__assert_fail@plt+0x2618>
   12d08:	cmp	ip, #0
   12d0c:	beq	12d40 <__assert_fail@plt+0x1704>
   12d10:	movw	r6, #57920	; 0xe240
   12d14:	movt	r6, #2
   12d18:	ldr	r0, [r6]
   12d1c:	bl	154dc <__assert_fail@plt+0x3ea0>
   12d20:	movw	r0, #57688	; 0xe158
   12d24:	movt	r0, #2
   12d28:	ldr	r0, [r0]
   12d2c:	cmp	r0, #11
   12d30:	movls	r0, #11
   12d34:	add	r0, r0, #1
   12d38:	bl	19958 <__assert_fail@plt+0x831c>
   12d3c:	str	r0, [r6]
   12d40:	movw	r6, #57924	; 0xe244
   12d44:	movt	r6, #2
   12d48:	ldr	r0, [r6]
   12d4c:	bl	154dc <__assert_fail@plt+0x3ea0>
   12d50:	movw	r0, #57668	; 0xe144
   12d54:	movt	r0, #2
   12d58:	ldr	r0, [r0]
   12d5c:	cmp	r0, #8
   12d60:	movle	r0, #8
   12d64:	bl	19958 <__assert_fail@plt+0x831c>
   12d68:	movw	r9, #57928	; 0xe248
   12d6c:	movw	r7, #57932	; 0xe24c
   12d70:	str	r0, [r6]
   12d74:	mov	r0, #0
   12d78:	movt	r9, #2
   12d7c:	movt	r7, #2
   12d80:	str	r0, [r9]
   12d84:	ldr	r0, [r7]
   12d88:	bl	154dc <__assert_fail@plt+0x3ea0>
   12d8c:	ldr	r0, [r8]
   12d90:	mov	r1, #40	; 0x28
   12d94:	bl	19a28 <__assert_fail@plt+0x83ec>
   12d98:	mov	r6, r0
   12d9c:	str	r0, [r7]
   12da0:	movw	r0, #57862	; 0xe206
   12da4:	movt	r0, #2
   12da8:	ldrb	r0, [r0]
   12dac:	cmp	r0, #1
   12db0:	beq	12e2c <__assert_fail@plt+0x17f0>
   12db4:	cmp	r5, #1
   12db8:	blt	12e5c <__assert_fail@plt+0x1820>
   12dbc:	ldr	r0, [r4]
   12dc0:	mov	r1, r6
   12dc4:	bl	13ca4 <__assert_fail@plt+0x2668>
   12dc8:	cmp	r0, #0
   12dcc:	beq	13c4c <__assert_fail@plt+0x2610>
   12dd0:	ldr	r0, [r6]
   12dd4:	ldr	r4, [r4]
   12dd8:	bl	1154c <fileno@plt>
   12ddc:	mov	r1, r0
   12de0:	mov	r0, r4
   12de4:	bl	13db8 <__assert_fail@plt+0x277c>
   12de8:	movw	r8, #57712	; 0xe170
   12dec:	mov	r0, #0
   12df0:	add	r4, r6, #4
   12df4:	str	r0, [r6, #24]
   12df8:	movt	r8, #2
   12dfc:	b	12ec4 <__assert_fail@plt+0x1888>
   12e00:	ldr	r0, [r4]
   12e04:	mov	r1, r6
   12e08:	bl	13ca4 <__assert_fail@plt+0x2668>
   12e0c:	cmp	r0, #0
   12e10:	sub	r5, r5, #1
   12e14:	add	r4, r4, #4
   12e18:	ldreq	r0, [r8]
   12e1c:	subeq	r6, r6, #40	; 0x28
   12e20:	add	r6, r6, #40	; 0x28
   12e24:	subeq	r0, r0, #1
   12e28:	streq	r0, [r8]
   12e2c:	cmp	r5, #0
   12e30:	bne	12e00 <__assert_fail@plt+0x17c4>
   12e34:	ldr	r0, [r8]
   12e38:	cmp	r0, #0
   12e3c:	beq	13c4c <__assert_fail@plt+0x2610>
   12e40:	movw	r0, #52164	; 0xcbc4
   12e44:	mvn	r1, #0
   12e48:	movt	r0, #1
   12e4c:	bl	13db8 <__assert_fail@plt+0x277c>
   12e50:	movw	r8, #57712	; 0xe170
   12e54:	movt	r8, #2
   12e58:	b	12efc <__assert_fail@plt+0x18c0>
   12e5c:	movw	r1, #47870	; 0xbafe
   12e60:	mov	r0, #0
   12e64:	mov	r2, #5
   12e68:	mov	r5, #0
   12e6c:	movt	r1, #1
   12e70:	bl	113b4 <dcgettext@plt>
   12e74:	mov	r4, r6
   12e78:	mov	r1, #1
   12e7c:	str	r0, [r4, #4]!
   12e80:	movw	r0, #57816	; 0xe1d8
   12e84:	movt	r0, #2
   12e88:	ldr	r0, [r0]
   12e8c:	str	r0, [r6]
   12e90:	movw	r0, #57889	; 0xe221
   12e94:	strb	r5, [r6, #37]	; 0x25
   12e98:	str	r5, [r6, #8]
   12e9c:	movt	r0, #2
   12ea0:	strb	r1, [r0]
   12ea4:	ldr	r0, [r9]
   12ea8:	mvn	r1, #0
   12eac:	add	r0, r0, #1
   12eb0:	str	r0, [r9]
   12eb4:	movw	r0, #52164	; 0xcbc4
   12eb8:	movt	r0, #1
   12ebc:	bl	13db8 <__assert_fail@plt+0x277c>
   12ec0:	str	r5, [r6, #24]
   12ec4:	ldr	r2, [r8]
   12ec8:	cmp	r2, #1
   12ecc:	beq	12efc <__assert_fail@plt+0x18c0>
   12ed0:	ldr	r0, [r6]
   12ed4:	ldr	r1, [r4]
   12ed8:	add	r3, r6, #40	; 0x28
   12edc:	rsb	r2, r2, #1
   12ee0:	mov	r6, #0
   12ee4:	stm	r3, {r0, r1, r6}
   12ee8:	strb	r6, [r3, #37]	; 0x25
   12eec:	str	r6, [r3, #24]
   12ef0:	adds	r2, r2, #1
   12ef4:	add	r3, r3, #40	; 0x28
   12ef8:	bne	12ee4 <__assert_fail@plt+0x18a8>
   12efc:	ldr	r0, [r9]
   12f00:	movw	r1, #57936	; 0xe250
   12f04:	movw	r9, #57862	; 0xe206
   12f08:	movt	r1, #2
   12f0c:	movt	r9, #2
   12f10:	mov	sl, r9
   12f14:	str	r0, [r1]
   12f18:	movw	r0, #57841	; 0xe1f1
   12f1c:	movt	r0, #2
   12f20:	ldrb	r0, [r0]
   12f24:	cmp	r0, #0
   12f28:	bne	130e0 <__assert_fail@plt+0x1aa4>
   12f2c:	ldr	r0, [r8]
   12f30:	movw	r1, #57908	; 0xe234
   12f34:	movt	r1, #2
   12f38:	cmn	r0, #1
   12f3c:	ble	12f60 <__assert_fail@plt+0x1924>
   12f40:	ldr	r1, [r1]
   12f44:	cmp	r0, #0
   12f48:	beq	12fb8 <__assert_fail@plt+0x197c>
   12f4c:	cmn	r1, #1
   12f50:	ble	12f88 <__assert_fail@plt+0x194c>
   12f54:	mvn	r2, #-2147483648	; 0x80000000
   12f58:	udiv	r2, r2, r0
   12f5c:	b	12f7c <__assert_fail@plt+0x1940>
   12f60:	ldr	r1, [r1]
   12f64:	cmn	r1, #1
   12f68:	ble	12fa0 <__assert_fail@plt+0x1964>
   12f6c:	cmn	r0, #1
   12f70:	beq	12fb8 <__assert_fail@plt+0x197c>
   12f74:	mov	r2, #-2147483648	; 0x80000000
   12f78:	sdiv	r2, r2, r0
   12f7c:	cmp	r2, r1
   12f80:	bge	12fb8 <__assert_fail@plt+0x197c>
   12f84:	b	12fd4 <__assert_fail@plt+0x1998>
   12f88:	beq	12fb4 <__assert_fail@plt+0x1978>
   12f8c:	mov	r2, #-2147483648	; 0x80000000
   12f90:	sdiv	r2, r2, r1
   12f94:	cmp	r2, r0
   12f98:	bge	12fb8 <__assert_fail@plt+0x197c>
   12f9c:	b	12fd4 <__assert_fail@plt+0x1998>
   12fa0:	mvn	r2, #-2147483648	; 0x80000000
   12fa4:	sdiv	r2, r2, r0
   12fa8:	cmp	r1, r2
   12fac:	bge	12fb8 <__assert_fail@plt+0x197c>
   12fb0:	b	12fd4 <__assert_fail@plt+0x1998>
   12fb4:	mvn	r1, #0
   12fb8:	mul	r4, r1, r0
   12fbc:	adds	r5, r4, #1
   12fc0:	movwvc	r0, #57916	; 0xe23c
   12fc4:	movtvc	r0, #2
   12fc8:	ldrvc	r0, [r0]
   12fcc:	addsvc	r6, r0, #1
   12fd0:	bvc	12fd8 <__assert_fail@plt+0x199c>
   12fd4:	bl	13c78 <__assert_fail@plt+0x263c>
   12fd8:	cmn	r6, #1
   12fdc:	ble	12ffc <__assert_fail@plt+0x19c0>
   12fe0:	cmp	r6, #0
   12fe4:	beq	13048 <__assert_fail@plt+0x1a0c>
   12fe8:	cmn	r4, #1
   12fec:	ble	13020 <__assert_fail@plt+0x19e4>
   12ff0:	mvn	r0, #-2147483648	; 0x80000000
   12ff4:	udiv	r0, r0, r6
   12ff8:	b	13014 <__assert_fail@plt+0x19d8>
   12ffc:	cmn	r4, #1
   13000:	ble	13038 <__assert_fail@plt+0x19fc>
   13004:	cmn	r6, #1
   13008:	beq	13048 <__assert_fail@plt+0x1a0c>
   1300c:	mov	r0, #-2147483648	; 0x80000000
   13010:	sdiv	r0, r0, r6
   13014:	cmp	r0, r4
   13018:	bge	13048 <__assert_fail@plt+0x1a0c>
   1301c:	b	12fd4 <__assert_fail@plt+0x1998>
   13020:	beq	13048 <__assert_fail@plt+0x1a0c>
   13024:	mov	r0, #-2147483648	; 0x80000000
   13028:	sdiv	r0, r0, r4
   1302c:	cmp	r0, r6
   13030:	bge	13048 <__assert_fail@plt+0x1a0c>
   13034:	b	12fd4 <__assert_fail@plt+0x1998>
   13038:	mvn	r0, #-2147483648	; 0x80000000
   1303c:	sdiv	r0, r0, r6
   13040:	cmp	r4, r0
   13044:	blt	12fd4 <__assert_fail@plt+0x1998>
   13048:	movw	r7, #57964	; 0xe26c
   1304c:	movt	r7, #2
   13050:	ldr	r0, [r7]
   13054:	bl	154dc <__assert_fail@plt+0x3ea0>
   13058:	mov	r0, r5
   1305c:	mov	r1, #4
   13060:	bl	19a28 <__assert_fail@plt+0x83ec>
   13064:	movw	r5, #57968	; 0xe270
   13068:	str	r0, [r7]
   1306c:	movt	r5, #2
   13070:	ldr	r0, [r5]
   13074:	bl	154dc <__assert_fail@plt+0x3ea0>
   13078:	mov	r0, r4
   1307c:	mov	r1, #4
   13080:	bl	19a28 <__assert_fail@plt+0x83ec>
   13084:	str	r0, [r5]
   13088:	movw	r5, #57972	; 0xe274
   1308c:	movt	r5, #2
   13090:	ldr	r0, [r5]
   13094:	bl	154dc <__assert_fail@plt+0x3ea0>
   13098:	mul	r4, r6, r4
   1309c:	movw	r6, #57873	; 0xe211
   130a0:	mov	r1, #1
   130a4:	mov	r7, #1
   130a8:	movt	r6, #2
   130ac:	ldrb	r0, [r6]
   130b0:	cmp	r0, #0
   130b4:	mov	r0, r4
   130b8:	movwne	r1, #2
   130bc:	bl	19a28 <__assert_fail@plt+0x83ec>
   130c0:	str	r0, [r5]
   130c4:	ldrb	r0, [r6]
   130c8:	movw	r1, #57976	; 0xe278
   130cc:	movt	r1, #2
   130d0:	cmp	r0, #0
   130d4:	movwne	r7, #2
   130d8:	mul	r0, r7, r4
   130dc:	str	r0, [r1]
   130e0:	movw	r0, #57832	; 0xe1e8
   130e4:	movt	r0, #2
   130e8:	ldm	r0, {r1, r2}
   130ec:	mov	r0, #1
   130f0:	str	r1, [sp, #36]	; 0x24
   130f4:	subs	r1, r1, #2
   130f8:	str	r2, [fp, #-32]	; 0xffffffe0
   130fc:	sbcs	r1, r2, #0
   13100:	mov	r1, #0
   13104:	bcc	132f4 <__assert_fail@plt+0x1cb8>
   13108:	movw	r7, #57980	; 0xe27c
   1310c:	mov	r8, #1
   13110:	mov	sl, #0
   13114:	movt	r7, #2
   13118:	movw	r1, #57908	; 0xe234
   1311c:	movw	r0, #57712	; 0xe170
   13120:	mov	r9, r7
   13124:	movt	r1, #2
   13128:	movt	r0, #2
   1312c:	ldr	r1, [r1]
   13130:	ldr	r0, [r0]
   13134:	cmp	r1, #2
   13138:	blt	131a8 <__assert_fail@plt+0x1b6c>
   1313c:	mov	r7, #1
   13140:	cmp	r0, #1
   13144:	blt	1319c <__assert_fail@plt+0x1b60>
   13148:	movw	r1, #57932	; 0xe24c
   1314c:	mov	r5, #1
   13150:	movt	r1, #2
   13154:	ldr	r4, [r1]
   13158:	ldr	r1, [r4, #8]
   1315c:	cmp	r1, #0
   13160:	bne	1317c <__assert_fail@plt+0x1b40>
   13164:	mov	r0, r4
   13168:	mov	r1, r5
   1316c:	bl	13f74 <__assert_fail@plt+0x2938>
   13170:	movw	r0, #57712	; 0xe170
   13174:	movt	r0, #2
   13178:	ldr	r0, [r0]
   1317c:	add	r1, r5, #1
   13180:	cmp	r5, r0
   13184:	add	r4, r4, #40	; 0x28
   13188:	mov	r5, r1
   1318c:	blt	13158 <__assert_fail@plt+0x1b1c>
   13190:	movw	r1, #57908	; 0xe234
   13194:	movt	r1, #2
   13198:	ldr	r1, [r1]
   1319c:	add	r7, r7, #1
   131a0:	cmp	r7, r1
   131a4:	blt	13140 <__assert_fail@plt+0x1b04>
   131a8:	mov	r1, #1
   131ac:	mov	r7, r9
   131b0:	cmp	r0, #1
   131b4:	strb	r1, [r9]
   131b8:	mov	r9, #2
   131bc:	blt	1324c <__assert_fail@plt+0x1c10>
   131c0:	movw	r1, #57932	; 0xe24c
   131c4:	mov	r5, #1
   131c8:	movt	r1, #2
   131cc:	ldr	r4, [r1]
   131d0:	ldr	r1, [r4, #8]
   131d4:	cmp	r1, #0
   131d8:	bne	131f4 <__assert_fail@plt+0x1bb8>
   131dc:	mov	r0, r4
   131e0:	mov	r1, r5
   131e4:	bl	13f74 <__assert_fail@plt+0x2938>
   131e8:	movw	r0, #57712	; 0xe170
   131ec:	movt	r0, #2
   131f0:	ldr	r0, [r0]
   131f4:	add	r1, r5, #1
   131f8:	cmp	r5, r0
   131fc:	add	r4, r4, #40	; 0x28
   13200:	mov	r5, r1
   13204:	blt	131d0 <__assert_fail@plt+0x1b94>
   13208:	cmp	r0, #1
   1320c:	blt	1324c <__assert_fail@plt+0x1c10>
   13210:	movw	r1, #57841	; 0xe1f1
   13214:	movt	r1, #2
   13218:	ldrb	r1, [r1]
   1321c:	cmp	r1, #0
   13220:	bne	1324c <__assert_fail@plt+0x1c10>
   13224:	movw	r1, #57932	; 0xe24c
   13228:	movt	r1, #2
   1322c:	ldr	r1, [r1]
   13230:	add	r1, r1, #8
   13234:	ldr	r2, [r1]
   13238:	cmp	r2, #3
   1323c:	strne	r9, [r1]
   13240:	add	r1, r1, #40	; 0x28
   13244:	subs	r0, r0, #1
   13248:	bne	13234 <__assert_fail@plt+0x1bf8>
   1324c:	bl	140e0 <__assert_fail@plt+0x2aa4>
   13250:	mov	r0, #0
   13254:	strb	r0, [r7]
   13258:	movw	r0, #57936	; 0xe250
   1325c:	movt	r0, #2
   13260:	ldr	r0, [r0]
   13264:	cmp	r0, #1
   13268:	blt	1328c <__assert_fail@plt+0x1c50>
   1326c:	ldr	r0, [sp, #36]	; 0x24
   13270:	adds	r8, r8, #1
   13274:	adc	sl, sl, #0
   13278:	subs	r0, r8, r0
   1327c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13280:	sbcs	r0, sl, r0
   13284:	bcc	13118 <__assert_fail@plt+0x1adc>
   13288:	b	132d4 <__assert_fail@plt+0x1c98>
   1328c:	movw	r1, #52175	; 0xcbcf
   13290:	mov	r0, #0
   13294:	mov	r2, #5
   13298:	movt	r1, #1
   1329c:	bl	113b4 <dcgettext@plt>
   132a0:	mov	r2, r0
   132a4:	ldr	r0, [sp, #36]	; 0x24
   132a8:	mov	r1, #0
   132ac:	str	r0, [sp]
   132b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   132b4:	stmib	sp, {r0, r8, sl}
   132b8:	mov	r0, #0
   132bc:	bl	11450 <error@plt>
   132c0:	movw	r0, #57936	; 0xe250
   132c4:	movt	r0, #2
   132c8:	ldr	r0, [r0]
   132cc:	cmp	r0, #1
   132d0:	blt	13c4c <__assert_fail@plt+0x2610>
   132d4:	movw	r0, #57832	; 0xe1e8
   132d8:	movw	r9, #57862	; 0xe206
   132dc:	movw	r8, #57712	; 0xe170
   132e0:	movt	r0, #2
   132e4:	movt	r9, #2
   132e8:	movt	r8, #2
   132ec:	ldrd	r0, [r0]
   132f0:	mov	sl, r9
   132f4:	movw	r2, #57896	; 0xe228
   132f8:	mov	r3, r8
   132fc:	mov	r8, #0
   13300:	movt	r2, #2
   13304:	strd	r0, [r2]
   13308:	movw	r0, #57883	; 0xe21b
   1330c:	movt	r0, #2
   13310:	ldrb	r6, [r0]
   13314:	movw	r0, #57868	; 0xe20c
   13318:	movt	r0, #2
   1331c:	ldr	r0, [r0]
   13320:	cmp	r6, #1
   13324:	bne	1337c <__assert_fail@plt+0x1d40>
   13328:	ldrb	r1, [sl]
   1332c:	cmp	r1, #1
   13330:	bne	1336c <__assert_fail@plt+0x1d30>
   13334:	movw	r1, #57863	; 0xe207
   13338:	movt	r1, #2
   1333c:	ldrb	r1, [r1]
   13340:	cmp	r1, #1
   13344:	bne	1336c <__assert_fail@plt+0x1d30>
   13348:	movw	r1, #57916	; 0xe23c
   1334c:	movw	r2, #57912	; 0xe238
   13350:	movt	r1, #2
   13354:	movt	r2, #2
   13358:	ldr	r1, [r1]
   1335c:	ldr	r2, [r2]
   13360:	add	r1, r1, r0
   13364:	add	r8, r1, r2
   13368:	b	1337c <__assert_fail@plt+0x1d40>
   1336c:	movw	r1, #57916	; 0xe23c
   13370:	movt	r1, #2
   13374:	ldr	r1, [r1]
   13378:	add	r8, r1, r0
   1337c:	movw	r1, #57876	; 0xe214
   13380:	ldr	r5, [r3]
   13384:	movt	r1, #2
   13388:	ldr	r9, [r1]
   1338c:	cmp	r5, #2
   13390:	add	r2, r9, r0
   13394:	movw	r0, #57841	; 0xe1f1
   13398:	movt	r0, #2
   1339c:	ldrb	r4, [r0]
   133a0:	movw	r0, #57932	; 0xe24c
   133a4:	movt	r0, #2
   133a8:	ldr	lr, [r0]
   133ac:	blt	134bc <__assert_fail@plt+0x1e80>
   133b0:	mov	ip, sl
   133b4:	str	r4, [sp, #32]
   133b8:	cmp	r4, #0
   133bc:	movw	r4, #57863	; 0xe207
   133c0:	rsb	sl, r5, #1
   133c4:	str	r5, [sp, #24]
   133c8:	sub	r5, r5, #1
   133cc:	movw	r0, #17828	; 0x45a4
   133d0:	movw	r3, #17264	; 0x4370
   133d4:	movw	r7, #17172	; 0x4314
   133d8:	str	lr, [sp, #28]
   133dc:	str	r5, [sp, #20]
   133e0:	movw	r5, #57916	; 0xe23c
   133e4:	movt	r4, #2
   133e8:	movt	r0, #1
   133ec:	movt	r3, #1
   133f0:	movt	r7, #1
   133f4:	movt	r5, #2
   133f8:	ldrb	r1, [r4]
   133fc:	ldrb	r4, [ip]
   13400:	movne	r3, r0
   13404:	movw	r0, #17672	; 0x4508
   13408:	ldr	r5, [r5]
   1340c:	movt	r0, #1
   13410:	movne	r7, r0
   13414:	add	r0, lr, #32
   13418:	mov	lr, #0
   1341c:	eor	r4, r4, #1
   13420:	str	r4, [sp, #36]	; 0x24
   13424:	cmp	r1, #0
   13428:	mov	ip, #0
   1342c:	str	r3, [r0, #-20]	; 0xffffffec
   13430:	str	r7, [r0, #-16]
   13434:	beq	13458 <__assert_fail@plt+0x1e1c>
   13438:	str	r8, [fp, #-32]	; 0xffffffe0
   1343c:	mov	r8, r1
   13440:	ldr	r1, [sp, #36]	; 0x24
   13444:	clz	r4, lr
   13448:	lsr	r4, r4, #5
   1344c:	orr	ip, r4, r1
   13450:	mov	r1, r8
   13454:	ldr	r8, [fp, #-32]	; 0xffffffe0
   13458:	str	r2, [r0]
   1345c:	and	r2, ip, #1
   13460:	add	r4, r8, r9
   13464:	cmp	r6, #0
   13468:	mov	r8, r6
   1346c:	sub	lr, lr, #1
   13470:	strb	r2, [r0, #4]
   13474:	mov	r2, r6
   13478:	addne	r8, r4, r5
   1347c:	add	r0, r0, #40	; 0x28
   13480:	movne	r2, r4
   13484:	cmp	sl, lr
   13488:	bne	13424 <__assert_fail@plt+0x1de8>
   1348c:	ldr	r0, [sp, #20]
   13490:	ldr	lr, [sp, #28]
   13494:	ldr	r4, [sp, #32]
   13498:	ldr	r7, [sp, #24]
   1349c:	movw	r9, #57862	; 0xe206
   134a0:	movw	r8, #57712	; 0xe170
   134a4:	movt	r9, #2
   134a8:	movt	r8, #2
   134ac:	mov	sl, r9
   134b0:	add	r0, r0, r0, lsl #2
   134b4:	add	lr, lr, r0, lsl #3
   134b8:	b	134c4 <__assert_fail@plt+0x1e88>
   134bc:	mov	r7, #1
   134c0:	mov	r8, r3
   134c4:	movw	r5, #57936	; 0xe250
   134c8:	cmp	r4, #0
   134cc:	movt	r5, #2
   134d0:	bne	134fc <__assert_fail@plt+0x1ec0>
   134d4:	movw	r0, #57842	; 0xe1f2
   134d8:	movt	r0, #2
   134dc:	ldrb	r0, [r0]
   134e0:	cmp	r0, #0
   134e4:	beq	134fc <__assert_fail@plt+0x1ec0>
   134e8:	movw	r0, #17264	; 0x4370
   134ec:	movw	r1, #17172	; 0x4314
   134f0:	movt	r0, #1
   134f4:	movt	r1, #1
   134f8:	b	1350c <__assert_fail@plt+0x1ed0>
   134fc:	movw	r0, #17828	; 0x45a4
   13500:	movw	r1, #17672	; 0x4508
   13504:	movt	r0, #1
   13508:	movt	r1, #1
   1350c:	str	r0, [lr, #12]
   13510:	movw	r0, #57863	; 0xe207
   13514:	str	r1, [lr, #16]
   13518:	mov	r6, #0
   1351c:	movt	r0, #2
   13520:	ldrb	r0, [r0]
   13524:	cmp	r0, #1
   13528:	mov	r0, #0
   1352c:	bne	1354c <__assert_fail@plt+0x1f10>
   13530:	ldrb	r1, [sl]
   13534:	sub	r0, r7, #1
   13538:	clz	r0, r0
   1353c:	lsr	r0, r0, #5
   13540:	mvn	r1, r1
   13544:	orr	r0, r0, r1
   13548:	and	r0, r0, #1
   1354c:	str	r2, [lr, #32]
   13550:	strb	r0, [lr, #36]	; 0x24
   13554:	movw	r0, #57716	; 0xe174
   13558:	movw	r1, #57904	; 0xe230
   1355c:	movt	r0, #2
   13560:	movt	r1, #2
   13564:	ldr	r0, [r0]
   13568:	str	r0, [r1]
   1356c:	b	13964 <__assert_fail@plt+0x2328>
   13570:	movw	r0, #57880	; 0xe218
   13574:	movw	r8, #57844	; 0xe1f4
   13578:	mov	sl, #0
   1357c:	movw	r5, #57712	; 0xe170
   13580:	movw	r9, #57862	; 0xe206
   13584:	movt	r0, #2
   13588:	movt	r8, #2
   1358c:	movt	r5, #2
   13590:	movt	r9, #2
   13594:	ldrb	r0, [r0]
   13598:	cmp	r0, #0
   1359c:	movweq	r1, #57989	; 0xe285
   135a0:	moveq	r0, #1
   135a4:	movteq	r1, #2
   135a8:	strbeq	r0, [r1]
   135ac:	movw	r0, #57988	; 0xe284
   135b0:	movw	r1, #57908	; 0xe234
   135b4:	movt	r1, #2
   135b8:	movt	r0, #2
   135bc:	strb	sl, [r0]
   135c0:	ldrb	r0, [r8]
   135c4:	ldr	r1, [r1]
   135c8:	lsl	r8, r1, r0
   135cc:	cmp	r8, #1
   135d0:	blt	13828 <__assert_fail@plt+0x21ec>
   135d4:	mov	sl, #0
   135d8:	bl	150e8 <__assert_fail@plt+0x3aac>
   135dc:	cmp	r0, #0
   135e0:	beq	13868 <__assert_fail@plt+0x222c>
   135e4:	movw	r0, #57996	; 0xe28c
   135e8:	mov	r1, #1
   135ec:	movt	r0, #2
   135f0:	str	r6, [r0]
   135f4:	movw	r0, #58000	; 0xe290
   135f8:	movt	r0, #2
   135fc:	str	r6, [r0]
   13600:	movw	r0, #58004	; 0xe294
   13604:	movt	r0, #2
   13608:	str	r6, [r0]
   1360c:	movw	r0, #57988	; 0xe284
   13610:	movt	r0, #2
   13614:	strb	r6, [r0]
   13618:	movw	r0, #58014	; 0xe29e
   1361c:	movt	r0, #2
   13620:	strb	r6, [r0]
   13624:	movw	r0, #58015	; 0xe29f
   13628:	movt	r0, #2
   1362c:	strb	r1, [r0]
   13630:	ldr	r0, [r5]
   13634:	cmp	r0, #1
   13638:	blt	137dc <__assert_fail@plt+0x21a0>
   1363c:	movw	r0, #57932	; 0xe24c
   13640:	mov	r7, #0
   13644:	movt	r0, #2
   13648:	ldr	r4, [r0]
   1364c:	movw	r0, #58008	; 0xe298
   13650:	movt	r0, #2
   13654:	str	r6, [r0]
   13658:	ldr	r0, [r4, #28]
   1365c:	cmp	r0, #0
   13660:	bgt	13670 <__assert_fail@plt+0x2034>
   13664:	ldr	r0, [r4, #8]
   13668:	cmp	r0, #1
   1366c:	bne	1373c <__assert_fail@plt+0x2100>
   13670:	movw	r0, #58012	; 0xe29c
   13674:	movw	r1, #57992	; 0xe288
   13678:	movt	r0, #2
   1367c:	movt	r1, #2
   13680:	strb	r6, [r0]
   13684:	ldr	r0, [r4, #32]
   13688:	str	r0, [r1]
   1368c:	mov	r0, r4
   13690:	ldr	r1, [r4, #12]
   13694:	blx	r1
   13698:	cmp	r0, #0
   1369c:	moveq	r0, r4
   136a0:	bleq	15170 <__assert_fail@plt+0x3b34>
   136a4:	movw	r0, #57988	; 0xe284
   136a8:	movt	r0, #2
   136ac:	ldrb	r6, [r0]
   136b0:	ldr	r0, [r4, #28]
   136b4:	sub	r1, r0, #1
   136b8:	str	r1, [r4, #28]
   136bc:	and	r1, sl, #1
   136c0:	orrs	sl, r6, r1
   136c4:	movwne	sl, #1
   136c8:	cmp	r0, #1
   136cc:	bgt	136dc <__assert_fail@plt+0x20a0>
   136d0:	bl	150e8 <__assert_fail@plt+0x3aac>
   136d4:	cmp	r0, #0
   136d8:	beq	137c4 <__assert_fail@plt+0x2188>
   136dc:	ldrb	r0, [r9]
   136e0:	cmp	r0, #1
   136e4:	bne	13734 <__assert_fail@plt+0x20f8>
   136e8:	ldr	r0, [r4, #8]
   136ec:	mov	r6, #0
   136f0:	cmp	r0, #0
   136f4:	beq	13778 <__assert_fail@plt+0x213c>
   136f8:	movw	r1, #58015	; 0xe29f
   136fc:	movt	r1, #2
   13700:	ldrb	r1, [r1]
   13704:	cmp	r1, #1
   13708:	beq	1375c <__assert_fail@plt+0x2120>
   1370c:	cmp	r0, #3
   13710:	beq	13770 <__assert_fail@plt+0x2134>
   13714:	cmp	r0, #2
   13718:	bne	13778 <__assert_fail@plt+0x213c>
   1371c:	movw	r0, #58012	; 0xe29c
   13720:	movt	r0, #2
   13724:	ldrb	r0, [r0]
   13728:	cmp	r0, #1
   1372c:	bne	13778 <__assert_fail@plt+0x213c>
   13730:	b	13770 <__assert_fail@plt+0x2134>
   13734:	mov	r6, #0
   13738:	b	13778 <__assert_fail@plt+0x213c>
   1373c:	ldrb	r0, [r9]
   13740:	cmp	r0, #1
   13744:	bne	13778 <__assert_fail@plt+0x213c>
   13748:	movw	r0, #58015	; 0xe29f
   1374c:	movt	r0, #2
   13750:	ldrb	r0, [r0]
   13754:	cmp	r0, #1
   13758:	bne	13770 <__assert_fail@plt+0x2134>
   1375c:	movw	r0, #58014	; 0xe29e
   13760:	mov	r1, #1
   13764:	movt	r0, #2
   13768:	strb	r1, [r0]
   1376c:	b	13778 <__assert_fail@plt+0x213c>
   13770:	mov	r0, r4
   13774:	bl	14ee8 <__assert_fail@plt+0x38ac>
   13778:	movw	r0, #57873	; 0xe211
   1377c:	movt	r0, #2
   13780:	ldrb	r0, [r0]
   13784:	cmp	r0, #1
   13788:	bne	137a4 <__assert_fail@plt+0x2168>
   1378c:	movw	r0, #58004	; 0xe294
   13790:	movt	r0, #2
   13794:	mov	r1, r0
   13798:	ldr	r0, [r0]
   1379c:	add	r0, r0, #1
   137a0:	str	r0, [r1]
   137a4:	ldr	r0, [r5]
   137a8:	add	r7, r7, #1
   137ac:	add	r4, r4, #40	; 0x28
   137b0:	cmp	r7, r0
   137b4:	blt	1364c <__assert_fail@plt+0x2010>
   137b8:	movw	r0, #57988	; 0xe284
   137bc:	movt	r0, #2
   137c0:	ldrb	r6, [r0]
   137c4:	cmp	r6, #0
   137c8:	beq	137d8 <__assert_fail@plt+0x219c>
   137cc:	mov	r0, #10
   137d0:	bl	11630 <putchar_unlocked@plt>
   137d4:	sub	r8, r8, #1
   137d8:	mov	r6, #0
   137dc:	bl	150e8 <__assert_fail@plt+0x3aac>
   137e0:	cmp	r0, #0
   137e4:	bne	137fc <__assert_fail@plt+0x21c0>
   137e8:	movw	r0, #57880	; 0xe218
   137ec:	movt	r0, #2
   137f0:	ldrb	r0, [r0]
   137f4:	cmp	r0, #0
   137f8:	bne	13828 <__assert_fail@plt+0x21ec>
   137fc:	movw	r0, #57844	; 0xe1f4
   13800:	movt	r0, #2
   13804:	ldrb	r0, [r0]
   13808:	and	r0, sl, r0
   1380c:	tst	r0, #1
   13810:	beq	13820 <__assert_fail@plt+0x21e4>
   13814:	mov	r0, #10
   13818:	bl	11630 <putchar_unlocked@plt>
   1381c:	sub	r8, r8, #1
   13820:	cmp	r8, #0
   13824:	bgt	135d8 <__assert_fail@plt+0x1f9c>
   13828:	cmp	r8, #0
   1382c:	bne	13868 <__assert_fail@plt+0x222c>
   13830:	ldr	r0, [r5]
   13834:	cmp	r0, #1
   13838:	blt	13868 <__assert_fail@plt+0x222c>
   1383c:	movw	r1, #57932	; 0xe24c
   13840:	movt	r1, #2
   13844:	ldr	r1, [r1]
   13848:	add	r1, r1, #37	; 0x25
   1384c:	ldr	r2, [r1, #-29]	; 0xffffffe3
   13850:	cmp	r2, #0
   13854:	moveq	r2, #1
   13858:	strbeq	r2, [r1]
   1385c:	subs	r0, r0, #1
   13860:	add	r1, r1, #40	; 0x28
   13864:	bne	1384c <__assert_fail@plt+0x2210>
   13868:	movw	r1, #57988	; 0xe284
   1386c:	ands	r0, sl, #1
   13870:	movt	r1, #2
   13874:	strb	r0, [r1]
   13878:	beq	13890 <__assert_fail@plt+0x2254>
   1387c:	movw	r0, #57880	; 0xe218
   13880:	movt	r0, #2
   13884:	ldrb	r0, [r0]
   13888:	cmp	r0, #0
   1388c:	beq	138d0 <__assert_fail@plt+0x2294>
   13890:	movw	r0, #57881	; 0xe219
   13894:	movt	r0, #2
   13898:	ldrb	r0, [r0]
   1389c:	cmp	r0, #1
   138a0:	bne	13910 <__assert_fail@plt+0x22d4>
   138a4:	movw	r0, #58013	; 0xe29d
   138a8:	movt	r0, #2
   138ac:	ldrb	r0, [r0]
   138b0:	cmp	r0, #1
   138b4:	bne	13910 <__assert_fail@plt+0x22d4>
   138b8:	mov	r0, #12
   138bc:	bl	11630 <putchar_unlocked@plt>
   138c0:	movw	r0, #58013	; 0xe29d
   138c4:	movt	r0, #2
   138c8:	strb	r6, [r0]
   138cc:	b	13910 <__assert_fail@plt+0x22d4>
   138d0:	movw	r0, #57853	; 0xe1fd
   138d4:	movt	r0, #2
   138d8:	ldrb	r0, [r0]
   138dc:	cmp	r0, #0
   138e0:	beq	138f0 <__assert_fail@plt+0x22b4>
   138e4:	mov	r0, #12
   138e8:	bl	11630 <putchar_unlocked@plt>
   138ec:	b	13910 <__assert_fail@plt+0x22d4>
   138f0:	adds	r0, r8, #5
   138f4:	beq	13910 <__assert_fail@plt+0x22d4>
   138f8:	mvn	r0, #4
   138fc:	sub	r4, r0, r8
   13900:	mov	r0, #10
   13904:	bl	11630 <putchar_unlocked@plt>
   13908:	adds	r4, r4, #1
   1390c:	bne	13900 <__assert_fail@plt+0x22c4>
   13910:	movw	r0, #57896	; 0xe228
   13914:	movt	r0, #2
   13918:	mov	r2, r0
   1391c:	ldrd	r0, [r0]
   13920:	adds	r0, r0, #1
   13924:	adc	r1, r1, #0
   13928:	strd	r0, [r2]
   1392c:	movw	r2, #57704	; 0xe168
   13930:	movt	r2, #2
   13934:	ldrd	r2, [r2]
   13938:	subs	r0, r2, r0
   1393c:	sbcs	r0, r3, r1
   13940:	bcc	13c4c <__assert_fail@plt+0x2610>
   13944:	bl	140e0 <__assert_fail@plt+0x2aa4>
   13948:	movw	r0, #57841	; 0xe1f1
   1394c:	movw	r8, #57712	; 0xe170
   13950:	movw	r5, #57936	; 0xe250
   13954:	movt	r0, #2
   13958:	movt	r8, #2
   1395c:	movt	r5, #2
   13960:	ldrb	r4, [r0]
   13964:	tst	r4, #1
   13968:	beq	139b8 <__assert_fail@plt+0x237c>
   1396c:	ldr	r0, [r8]
   13970:	cmp	r0, #0
   13974:	beq	13c40 <__assert_fail@plt+0x2604>
   13978:	movw	r2, #57932	; 0xe24c
   1397c:	movw	r1, #57908	; 0xe234
   13980:	movt	r2, #2
   13984:	movt	r1, #2
   13988:	ldr	r2, [r2]
   1398c:	ldr	r1, [r1]
   13990:	add	r2, r2, #28
   13994:	ldr	r3, [r2, #-20]	; 0xffffffec
   13998:	cmp	r3, #0
   1399c:	mov	r3, #0
   139a0:	moveq	r3, r1
   139a4:	subs	r0, r0, #1
   139a8:	str	r3, [r2]
   139ac:	add	r2, r2, #40	; 0x28
   139b0:	bne	13994 <__assert_fail@plt+0x2358>
   139b4:	b	13c40 <__assert_fail@plt+0x2604>
   139b8:	movw	r0, #57984	; 0xe280
   139bc:	ldr	r1, [r8]
   139c0:	movt	r0, #2
   139c4:	str	r6, [r0]
   139c8:	movw	r0, #57842	; 0xe1f2
   139cc:	movt	r0, #2
   139d0:	ldrb	r0, [r0]
   139d4:	eor	r2, r0, #1
   139d8:	sub	r3, r1, r2
   139dc:	cmp	r3, #1
   139e0:	blt	13b54 <__assert_fail@plt+0x2518>
   139e4:	movw	r1, #57932	; 0xe24c
   139e8:	mov	r2, r3
   139ec:	movt	r1, #2
   139f0:	ldr	r4, [r1]
   139f4:	add	r1, r4, #24
   139f8:	str	r6, [r1], #40	; 0x28
   139fc:	subs	r2, r2, #1
   13a00:	bne	139f8 <__assert_fail@plt+0x23bc>
   13a04:	cmp	r3, #1
   13a08:	blt	13b54 <__assert_fail@plt+0x2518>
   13a0c:	ldr	r1, [r5]
   13a10:	cmp	r1, #0
   13a14:	beq	13b54 <__assert_fail@plt+0x2518>
   13a18:	mov	sl, #1
   13a1c:	mov	r0, #0
   13a20:	mov	r7, #0
   13a24:	str	r3, [fp, #-32]	; 0xffffffe0
   13a28:	b	13ae8 <__assert_fail@plt+0x24ac>
   13a2c:	rsb	r8, r2, #1
   13a30:	ldr	r2, [r4, #8]
   13a34:	mov	r9, r0
   13a38:	b	13a7c <__assert_fail@plt+0x2440>
   13a3c:	ldr	r1, [r4, #24]
   13a40:	movw	r3, #58008	; 0xe298
   13a44:	movt	r3, #2
   13a48:	add	r1, r1, #1
   13a4c:	str	r1, [r4, #24]
   13a50:	movw	r1, #57964	; 0xe26c
   13a54:	movt	r1, #2
   13a58:	ldr	r1, [r1]
   13a5c:	str	r9, [r1, r7, lsl #2]
   13a60:	movw	r1, #57968	; 0xe270
   13a64:	movt	r1, #2
   13a68:	ldr	r3, [r3]
   13a6c:	ldr	r1, [r1]
   13a70:	str	r3, [r1, r7, lsl #2]
   13a74:	add	r7, r7, #1
   13a78:	b	13ac8 <__assert_fail@plt+0x248c>
   13a7c:	cmp	r2, #0
   13a80:	bne	13ac4 <__assert_fail@plt+0x2488>
   13a84:	movw	r0, #58008	; 0xe298
   13a88:	movt	r0, #2
   13a8c:	str	r6, [r0]
   13a90:	mov	r0, r4
   13a94:	bl	145a4 <__assert_fail@plt+0x2f68>
   13a98:	cmp	r0, #0
   13a9c:	moveq	r0, r4
   13aa0:	bleq	15170 <__assert_fail@plt+0x3b34>
   13aa4:	movw	r0, #57984	; 0xe280
   13aa8:	ldr	r2, [r4, #8]
   13aac:	movt	r0, #2
   13ab0:	ldr	r0, [r0]
   13ab4:	cmp	r2, #0
   13ab8:	beq	13a3c <__assert_fail@plt+0x2400>
   13abc:	cmp	r9, r0
   13ac0:	bne	13a3c <__assert_fail@plt+0x2400>
   13ac4:	mov	r0, r9
   13ac8:	ldr	r1, [r5]
   13acc:	cmp	r8, #0
   13ad0:	beq	13b04 <__assert_fail@plt+0x24c8>
   13ad4:	add	r8, r8, #1
   13ad8:	cmp	r1, #0
   13adc:	mov	r9, r0
   13ae0:	bne	13a7c <__assert_fail@plt+0x2440>
   13ae4:	b	13b04 <__assert_fail@plt+0x24c8>
   13ae8:	cmp	r1, #0
   13aec:	str	r7, [r4, #20]
   13af0:	movwne	r2, #57908	; 0xe234
   13af4:	movtne	r2, #2
   13af8:	ldrne	r2, [r2]
   13afc:	cmpne	r2, #0
   13b00:	bne	13a2c <__assert_fail@plt+0x23f0>
   13b04:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13b08:	movw	r8, #57712	; 0xe170
   13b0c:	movt	r8, #2
   13b10:	cmp	sl, r2
   13b14:	bge	13b28 <__assert_fail@plt+0x24ec>
   13b18:	add	r4, r4, #40	; 0x28
   13b1c:	add	sl, sl, #1
   13b20:	cmp	r1, #0
   13b24:	bne	13ae8 <__assert_fail@plt+0x24ac>
   13b28:	movw	r1, #57842	; 0xe1f2
   13b2c:	movw	r2, #57964	; 0xe26c
   13b30:	mov	ip, #0
   13b34:	movt	r1, #2
   13b38:	movt	r2, #2
   13b3c:	ldrb	r1, [r1]
   13b40:	ldr	r2, [r2]
   13b44:	cmp	r1, #0
   13b48:	str	r0, [r2, r7, lsl #2]
   13b4c:	bne	13b74 <__assert_fail@plt+0x2538>
   13b50:	b	13bd0 <__assert_fail@plt+0x2594>
   13b54:	movw	r1, #57964	; 0xe26c
   13b58:	mov	r7, #0
   13b5c:	cmp	r0, #0
   13b60:	mov	ip, #0
   13b64:	movt	r1, #2
   13b68:	ldr	r1, [r1]
   13b6c:	str	r7, [r1]
   13b70:	beq	13bd0 <__assert_fail@plt+0x2594>
   13b74:	ldr	r1, [r8]
   13b78:	mov	ip, #1
   13b7c:	cmp	r1, #1
   13b80:	blt	13bd0 <__assert_fail@plt+0x2594>
   13b84:	movw	r2, #57932	; 0xe24c
   13b88:	sdiv	r0, r7, r1
   13b8c:	mov	r6, #0
   13b90:	mov	r4, #0
   13b94:	movt	r2, #2
   13b98:	mls	r3, r0, r1, r7
   13b9c:	ldr	r7, [r2]
   13ba0:	add	r7, r7, #20
   13ba4:	add	r6, r6, #1
   13ba8:	mov	r2, r0
   13bac:	str	r4, [r7]
   13bb0:	cmp	r6, r3
   13bb4:	addle	r2, r2, #1
   13bb8:	cmp	r1, r6
   13bbc:	str	r2, [r7, #4]
   13bc0:	add	r4, r2, r4
   13bc4:	add	r7, r7, #40	; 0x28
   13bc8:	bne	13ba4 <__assert_fail@plt+0x2568>
   13bcc:	mov	r6, #0
   13bd0:	movw	r0, #57932	; 0xe24c
   13bd4:	ldr	r7, [r8]
   13bd8:	movt	r0, #2
   13bdc:	ldr	r1, [r0]
   13be0:	subs	r2, r7, #1
   13be4:	beq	13c0c <__assert_fail@plt+0x25d0>
   13be8:	add	r3, r1, #28
   13bec:	rsb	r7, r7, #1
   13bf0:	ldr	r0, [r3, #-4]
   13bf4:	adds	r7, r7, #1
   13bf8:	str	r0, [r3]
   13bfc:	add	r3, r3, #40	; 0x28
   13c00:	bne	13bf0 <__assert_fail@plt+0x25b4>
   13c04:	add	r0, r2, r2, lsl #2
   13c08:	add	r1, r1, r0, lsl #3
   13c0c:	cmp	ip, #0
   13c10:	beq	13c1c <__assert_fail@plt+0x25e0>
   13c14:	ldr	r0, [r1, #24]
   13c18:	b	13c3c <__assert_fail@plt+0x2600>
   13c1c:	ldr	r0, [r1, #8]
   13c20:	cmp	r0, #0
   13c24:	beq	13c30 <__assert_fail@plt+0x25f4>
   13c28:	str	r6, [r1, #28]
   13c2c:	b	13c40 <__assert_fail@plt+0x2604>
   13c30:	movw	r0, #57908	; 0xe234
   13c34:	movt	r0, #2
   13c38:	ldr	r0, [r0]
   13c3c:	str	r0, [r1, #28]
   13c40:	bl	150e8 <__assert_fail@plt+0x3aac>
   13c44:	cmp	r0, #0
   13c48:	bne	13570 <__assert_fail@plt+0x1f34>
   13c4c:	sub	sp, fp, #28
   13c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c54:	movw	r1, #52141	; 0xcbad
   13c58:	mov	r0, #0
   13c5c:	mov	r2, #5
   13c60:	movt	r1, #1
   13c64:	bl	113b4 <dcgettext@plt>
   13c68:	mov	r2, r0
   13c6c:	mov	r0, #1
   13c70:	mov	r1, #0
   13c74:	bl	11450 <error@plt>
   13c78:	push	{fp, lr}
   13c7c:	mov	fp, sp
   13c80:	movw	r1, #52063	; 0xcb5f
   13c84:	mov	r0, #0
   13c88:	mov	r2, #5
   13c8c:	movt	r1, #1
   13c90:	bl	113b4 <dcgettext@plt>
   13c94:	mov	r2, r0
   13c98:	mov	r0, #1
   13c9c:	mov	r1, #0
   13ca0:	bl	11450 <error@plt>
   13ca4:	push	{r4, r5, r6, sl, fp, lr}
   13ca8:	add	fp, sp, #16
   13cac:	mov	r5, r1
   13cb0:	movw	r1, #54593	; 0xd541
   13cb4:	mov	r4, r0
   13cb8:	movt	r1, #1
   13cbc:	bl	11318 <strcmp@plt>
   13cc0:	cmp	r0, #0
   13cc4:	beq	13ce4 <__assert_fail@plt+0x26a8>
   13cc8:	movw	r1, #47532	; 0xb9ac
   13ccc:	mov	r0, r4
   13cd0:	str	r4, [r5, #4]
   13cd4:	movt	r1, #1
   13cd8:	bl	15430 <__assert_fail@plt+0x3df4>
   13cdc:	str	r0, [r5]
   13ce0:	b	13d1c <__assert_fail@plt+0x26e0>
   13ce4:	movw	r1, #47870	; 0xbafe
   13ce8:	mov	r0, #0
   13cec:	mov	r2, #5
   13cf0:	movt	r1, #1
   13cf4:	bl	113b4 <dcgettext@plt>
   13cf8:	str	r0, [r5, #4]
   13cfc:	movw	r0, #57816	; 0xe1d8
   13d00:	movw	r1, #57889	; 0xe221
   13d04:	mov	r2, #1
   13d08:	movt	r0, #2
   13d0c:	movt	r1, #2
   13d10:	ldr	r0, [r0]
   13d14:	str	r0, [r5]
   13d18:	strb	r2, [r1]
   13d1c:	cmp	r0, #0
   13d20:	beq	13d54 <__assert_fail@plt+0x2718>
   13d24:	mov	r1, #2
   13d28:	bl	152fc <__assert_fail@plt+0x3cc0>
   13d2c:	mov	r0, #0
   13d30:	strb	r0, [r5, #37]	; 0x25
   13d34:	str	r0, [r5, #8]
   13d38:	movw	r0, #57928	; 0xe248
   13d3c:	mov	r5, #1
   13d40:	movt	r0, #2
   13d44:	ldr	r1, [r0]
   13d48:	add	r1, r1, #1
   13d4c:	str	r1, [r0]
   13d50:	b	13db0 <__assert_fail@plt+0x2774>
   13d54:	movw	r0, #57890	; 0xe222
   13d58:	mov	r1, #1
   13d5c:	mov	r5, #0
   13d60:	movt	r0, #2
   13d64:	strb	r1, [r0]
   13d68:	movw	r0, #57872	; 0xe210
   13d6c:	movt	r0, #2
   13d70:	ldrb	r0, [r0]
   13d74:	cmp	r0, #0
   13d78:	bne	13db0 <__assert_fail@plt+0x2774>
   13d7c:	bl	11510 <__errno_location@plt>
   13d80:	ldr	r6, [r0]
   13d84:	mov	r0, #0
   13d88:	mov	r1, #3
   13d8c:	mov	r2, r4
   13d90:	mov	r5, #0
   13d94:	bl	18c7c <__assert_fail@plt+0x7640>
   13d98:	movw	r2, #53303	; 0xd037
   13d9c:	mov	r3, r0
   13da0:	mov	r0, #0
   13da4:	mov	r1, r6
   13da8:	movt	r2, #1
   13dac:	bl	11450 <error@plt>
   13db0:	mov	r0, r5
   13db4:	pop	{r4, r5, r6, sl, fp, pc}
   13db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dbc:	add	fp, sp, #28
   13dc0:	sub	sp, sp, #196	; 0xc4
   13dc4:	mov	r5, r1
   13dc8:	movw	r1, #54593	; 0xd541
   13dcc:	mov	r4, r0
   13dd0:	movt	r1, #1
   13dd4:	bl	11318 <strcmp@plt>
   13dd8:	cmp	r0, #0
   13ddc:	mvneq	r5, #0
   13de0:	cmp	r5, #0
   13de4:	blt	13e00 <__assert_fail@plt+0x27c4>
   13de8:	add	r6, sp, #88	; 0x58
   13dec:	mov	r0, r5
   13df0:	mov	r1, r6
   13df4:	bl	1b8e0 <__assert_fail@plt+0xa2a4>
   13df8:	cmp	r0, #0
   13dfc:	beq	13e28 <__assert_fail@plt+0x27ec>
   13e00:	movw	r6, #57944	; 0xe258
   13e04:	movt	r6, #2
   13e08:	ldr	r0, [r6]
   13e0c:	cmp	r0, #0
   13e10:	bne	13e2c <__assert_fail@plt+0x27f0>
   13e14:	movw	r6, #57944	; 0xe258
   13e18:	movt	r6, #2
   13e1c:	mov	r0, r6
   13e20:	bl	155a8 <__assert_fail@plt+0x3f6c>
   13e24:	b	13e2c <__assert_fail@plt+0x27f0>
   13e28:	add	r6, r6, #80	; 0x50
   13e2c:	movw	sl, #57884	; 0xe21c
   13e30:	ldrd	r8, [r6]
   13e34:	add	r1, sp, #80	; 0x50
   13e38:	add	r2, sp, #36	; 0x24
   13e3c:	movt	sl, #2
   13e40:	ldr	r0, [sl]
   13e44:	str	r9, [sp, #84]	; 0x54
   13e48:	str	r8, [sp, #80]	; 0x50
   13e4c:	bl	19090 <__assert_fail@plt+0x7a54>
   13e50:	cmp	r0, #0
   13e54:	beq	13eb8 <__assert_fail@plt+0x287c>
   13e58:	movw	r0, #57848	; 0xe1f8
   13e5c:	add	r8, sp, #36	; 0x24
   13e60:	mvn	r1, #0
   13e64:	movt	r0, #2
   13e68:	mov	r3, r8
   13e6c:	ldr	r2, [r0]
   13e70:	ldr	r0, [sl]
   13e74:	stm	sp, {r0, r9}
   13e78:	mov	r0, #0
   13e7c:	bl	15aa8 <__assert_fail@plt+0x446c>
   13e80:	add	r7, r0, #1
   13e84:	mov	r0, r7
   13e88:	bl	19958 <__assert_fail@plt+0x831c>
   13e8c:	mov	r6, r0
   13e90:	movw	r0, #57848	; 0xe1f8
   13e94:	mov	r1, r7
   13e98:	mov	r3, r8
   13e9c:	movt	r0, #2
   13ea0:	ldr	r2, [r0]
   13ea4:	ldr	r0, [sl]
   13ea8:	stm	sp, {r0, r9}
   13eac:	mov	r0, r6
   13eb0:	bl	15aa8 <__assert_fail@plt+0x446c>
   13eb4:	b	13ef0 <__assert_fail@plt+0x28b4>
   13eb8:	mov	r0, #33	; 0x21
   13ebc:	bl	19958 <__assert_fail@plt+0x831c>
   13ec0:	mov	r6, r0
   13ec4:	ldr	r0, [sp, #80]	; 0x50
   13ec8:	add	r2, sp, #15
   13ecc:	asr	r1, r0, #31
   13ed0:	bl	15630 <__assert_fail@plt+0x3ff4>
   13ed4:	movw	r3, #52167	; 0xcbc7
   13ed8:	stm	sp, {r0, r9}
   13edc:	mov	r0, r6
   13ee0:	mov	r1, #1
   13ee4:	mov	r2, #33	; 0x21
   13ee8:	movt	r3, #1
   13eec:	bl	1151c <__sprintf_chk@plt>
   13ef0:	movw	r7, #57952	; 0xe260
   13ef4:	movt	r7, #2
   13ef8:	ldr	r0, [r7]
   13efc:	bl	154dc <__assert_fail@plt+0x3ea0>
   13f00:	movw	r0, #52164	; 0xcbc4
   13f04:	cmp	r5, #0
   13f08:	movw	r5, #57956	; 0xe264
   13f0c:	mov	r1, #0
   13f10:	str	r6, [r7]
   13f14:	movt	r0, #1
   13f18:	movt	r5, #2
   13f1c:	movlt	r4, r0
   13f20:	movw	r0, #57856	; 0xe200
   13f24:	movt	r0, #2
   13f28:	ldr	r0, [r0]
   13f2c:	cmp	r0, #0
   13f30:	movne	r4, r0
   13f34:	movw	r0, #57700	; 0xe164
   13f38:	movt	r0, #2
   13f3c:	str	r4, [r5]
   13f40:	ldr	r4, [r0]
   13f44:	mov	r0, r6
   13f48:	bl	156ec <__assert_fail@plt+0x40b0>
   13f4c:	sub	r4, r4, r0
   13f50:	ldr	r0, [r5]
   13f54:	mov	r1, #0
   13f58:	bl	156ec <__assert_fail@plt+0x40b0>
   13f5c:	movw	r1, #57960	; 0xe268
   13f60:	sub	r0, r4, r0
   13f64:	movt	r1, #2
   13f68:	str	r0, [r1]
   13f6c:	sub	sp, fp, #28
   13f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f78:	add	fp, sp, #24
   13f7c:	ldr	r7, [r0]
   13f80:	mov	r5, r0
   13f84:	mov	r8, r1
   13f88:	mov	r0, r7
   13f8c:	bl	113a8 <getc_unlocked@plt>
   13f90:	mov	r6, r0
   13f94:	cmp	r0, #12
   13f98:	bne	13fd0 <__assert_fail@plt+0x2994>
   13f9c:	ldrb	r0, [r5, #37]	; 0x25
   13fa0:	cmp	r0, #0
   13fa4:	beq	13fcc <__assert_fail@plt+0x2990>
   13fa8:	mov	r0, r7
   13fac:	bl	113a8 <getc_unlocked@plt>
   13fb0:	mov	r6, r0
   13fb4:	cmp	r0, #10
   13fb8:	bne	13fd0 <__assert_fail@plt+0x2994>
   13fbc:	mov	r0, r7
   13fc0:	bl	113a8 <getc_unlocked@plt>
   13fc4:	mov	r6, r0
   13fc8:	b	13fd0 <__assert_fail@plt+0x2994>
   13fcc:	mov	r6, #12
   13fd0:	movw	r4, #57980	; 0xe27c
   13fd4:	movt	r4, #2
   13fd8:	ldrb	r0, [r4]
   13fdc:	strb	r0, [r5, #37]	; 0x25
   13fe0:	mov	r0, r6
   13fe4:	b	13ff0 <__assert_fail@plt+0x29b4>
   13fe8:	mov	r0, r7
   13fec:	bl	113a8 <getc_unlocked@plt>
   13ff0:	cmn	r0, #1
   13ff4:	beq	14034 <__assert_fail@plt+0x29f8>
   13ff8:	cmp	r0, #10
   13ffc:	beq	14094 <__assert_fail@plt+0x2a58>
   14000:	cmp	r0, #12
   14004:	bne	13fe8 <__assert_fail@plt+0x29ac>
   14008:	ldrb	r0, [r4]
   1400c:	cmp	r0, #1
   14010:	bne	14074 <__assert_fail@plt+0x2a38>
   14014:	movw	r0, #57862	; 0xe206
   14018:	movt	r0, #2
   1401c:	ldrb	r0, [r0]
   14020:	cmp	r0, #0
   14024:	beq	14040 <__assert_fail@plt+0x2a04>
   14028:	mov	r0, #0
   1402c:	strb	r0, [r5, #37]	; 0x25
   14030:	b	14074 <__assert_fail@plt+0x2a38>
   14034:	mov	r0, r5
   14038:	bl	141f4 <__assert_fail@plt+0x2bb8>
   1403c:	b	14094 <__assert_fail@plt+0x2a58>
   14040:	movw	r0, #57712	; 0xe170
   14044:	movt	r0, #2
   14048:	ldr	r0, [r0]
   1404c:	cmp	r0, #0
   14050:	beq	14074 <__assert_fail@plt+0x2a38>
   14054:	movw	r1, #57932	; 0xe24c
   14058:	mov	r2, #0
   1405c:	movt	r1, #2
   14060:	ldr	r1, [r1]
   14064:	add	r1, r1, #37	; 0x25
   14068:	strb	r2, [r1], #40	; 0x28
   1406c:	subs	r0, r0, #1
   14070:	bne	14068 <__assert_fail@plt+0x2a2c>
   14074:	mov	r0, r7
   14078:	bl	113a8 <getc_unlocked@plt>
   1407c:	cmp	r0, #10
   14080:	beq	1408c <__assert_fail@plt+0x2a50>
   14084:	mov	r1, r7
   14088:	bl	11504 <ungetc@plt>
   1408c:	mov	r0, r5
   14090:	bl	1416c <__assert_fail@plt+0x2b30>
   14094:	movw	r0, #57864	; 0xe208
   14098:	movt	r0, #2
   1409c:	ldrb	r0, [r0]
   140a0:	cmp	r0, #0
   140a4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   140a8:	subs	r0, r8, #1
   140ac:	movwne	r0, #1
   140b0:	cmp	r6, #12
   140b4:	beq	140dc <__assert_fail@plt+0x2aa0>
   140b8:	movw	r1, #57862	; 0xe206
   140bc:	movt	r1, #2
   140c0:	ldrb	r1, [r1]
   140c4:	ands	r0, r0, r1
   140c8:	movweq	r0, #57716	; 0xe174
   140cc:	movteq	r0, #2
   140d0:	ldreq	r1, [r0]
   140d4:	addeq	r1, r1, #1
   140d8:	streq	r1, [r0]
   140dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140e0:	push	{fp, lr}
   140e4:	mov	fp, sp
   140e8:	movw	r0, #57932	; 0xe24c
   140ec:	movt	r0, #2
   140f0:	ldr	ip, [r0]
   140f4:	movw	r0, #57712	; 0xe170
   140f8:	movt	r0, #2
   140fc:	ldr	r1, [r0]
   14100:	cmp	r1, #0
   14104:	beq	1413c <__assert_fail@plt+0x2b00>
   14108:	movw	r0, #57936	; 0xe250
   1410c:	add	r2, ip, #8
   14110:	mov	lr, #0
   14114:	movt	r0, #2
   14118:	ldr	r3, [r2]
   1411c:	cmp	r3, #2
   14120:	streq	lr, [r2]
   14124:	add	r2, r2, #40	; 0x28
   14128:	ldreq	r3, [r0]
   1412c:	addeq	r3, r3, #1
   14130:	streq	r3, [r0]
   14134:	subs	r1, r1, #1
   14138:	bne	14118 <__assert_fail@plt+0x2adc>
   1413c:	movw	r0, #57841	; 0xe1f1
   14140:	movt	r0, #2
   14144:	ldrb	r0, [r0]
   14148:	cmp	r0, #0
   1414c:	popne	{fp, pc}
   14150:	ldr	r0, [ip, #8]
   14154:	movw	r1, #57936	; 0xe250
   14158:	movt	r1, #2
   1415c:	subs	r0, r0, #3
   14160:	movwne	r0, #1
   14164:	str	r0, [r1]
   14168:	pop	{fp, pc}
   1416c:	movw	r1, #57862	; 0xe206
   14170:	movt	r1, #2
   14174:	ldrb	r1, [r1]
   14178:	cmp	r1, #0
   1417c:	beq	1418c <__assert_fail@plt+0x2b50>
   14180:	mov	r1, #2
   14184:	str	r1, [r0, #8]
   14188:	b	141d4 <__assert_fail@plt+0x2b98>
   1418c:	movw	r1, #57712	; 0xe170
   14190:	movt	r1, #2
   14194:	ldr	r1, [r1]
   14198:	cmp	r1, #0
   1419c:	beq	141d4 <__assert_fail@plt+0x2b98>
   141a0:	movw	r2, #57841	; 0xe1f1
   141a4:	movt	r2, #2
   141a8:	ldrb	r3, [r2]
   141ac:	mov	r2, #1
   141b0:	cmp	r3, #0
   141b4:	movw	r3, #57932	; 0xe24c
   141b8:	movt	r3, #2
   141bc:	movwne	r2, #2
   141c0:	ldr	r3, [r3]
   141c4:	add	r3, r3, #8
   141c8:	str	r2, [r3], #40	; 0x28
   141cc:	subs	r1, r1, #1
   141d0:	bne	141c8 <__assert_fail@plt+0x2b8c>
   141d4:	mov	r1, #0
   141d8:	str	r1, [r0, #28]
   141dc:	movw	r0, #57936	; 0xe250
   141e0:	movt	r0, #2
   141e4:	ldr	r1, [r0]
   141e8:	sub	r1, r1, #1
   141ec:	str	r1, [r0]
   141f0:	bx	lr
   141f4:	push	{r4, r5, r6, sl, fp, lr}
   141f8:	add	fp, sp, #16
   141fc:	mov	r4, r0
   14200:	ldr	r0, [r0, #8]
   14204:	cmp	r0, #3
   14208:	popeq	{r4, r5, r6, sl, fp, pc}
   1420c:	bl	11510 <__errno_location@plt>
   14210:	mov	r6, r0
   14214:	ldr	r5, [r0]
   14218:	ldr	r0, [r4]
   1421c:	bl	11438 <ferror_unlocked@plt>
   14220:	cmp	r0, #0
   14224:	moveq	r5, r0
   14228:	ldr	r0, [r4]
   1422c:	bl	1154c <fileno@plt>
   14230:	mov	r1, r0
   14234:	ldr	r0, [r4]
   14238:	cmp	r1, #0
   1423c:	beq	14258 <__assert_fail@plt+0x2c1c>
   14240:	bl	15338 <__assert_fail@plt+0x3cfc>
   14244:	cmp	r5, #0
   14248:	bne	1425c <__assert_fail@plt+0x2c20>
   1424c:	cmp	r0, #0
   14250:	ldrne	r5, [r6]
   14254:	b	1425c <__assert_fail@plt+0x2c20>
   14258:	bl	115d0 <clearerr_unlocked@plt>
   1425c:	cmp	r5, #0
   14260:	bne	142ec <__assert_fail@plt+0x2cb0>
   14264:	movw	r0, #57862	; 0xe206
   14268:	movt	r0, #2
   1426c:	ldrb	r0, [r0]
   14270:	cmp	r0, #0
   14274:	beq	1428c <__assert_fail@plt+0x2c50>
   14278:	mov	r0, #0
   1427c:	str	r0, [r4, #28]
   14280:	mov	r0, #3
   14284:	str	r0, [r4, #8]
   14288:	b	142d4 <__assert_fail@plt+0x2c98>
   1428c:	movw	r0, #57712	; 0xe170
   14290:	movt	r0, #2
   14294:	ldr	r0, [r0]
   14298:	cmp	r0, #0
   1429c:	beq	142d4 <__assert_fail@plt+0x2c98>
   142a0:	movw	r1, #57932	; 0xe24c
   142a4:	mov	r2, #3
   142a8:	mov	r3, #0
   142ac:	movt	r1, #2
   142b0:	ldr	r1, [r1]
   142b4:	add	r1, r1, #24
   142b8:	str	r2, [r1, #-16]
   142bc:	ldr	r6, [r1]
   142c0:	cmp	r6, #0
   142c4:	streq	r3, [r1, #4]
   142c8:	add	r1, r1, #40	; 0x28
   142cc:	subs	r0, r0, #1
   142d0:	bne	142b8 <__assert_fail@plt+0x2c7c>
   142d4:	movw	r0, #57936	; 0xe250
   142d8:	movt	r0, #2
   142dc:	ldr	r1, [r0]
   142e0:	sub	r1, r1, #1
   142e4:	str	r1, [r0]
   142e8:	pop	{r4, r5, r6, sl, fp, pc}
   142ec:	ldr	r2, [r4, #4]
   142f0:	mov	r0, #0
   142f4:	mov	r1, #3
   142f8:	bl	18c7c <__assert_fail@plt+0x7640>
   142fc:	movw	r2, #53303	; 0xd037
   14300:	mov	r3, r0
   14304:	mov	r0, #1
   14308:	mov	r1, r5
   1430c:	movt	r2, #1
   14310:	bl	11450 <error@plt>
   14314:	push	{r4, r5, r6, sl, fp, lr}
   14318:	add	fp, sp, #16
   1431c:	movw	r5, #57984	; 0xe280
   14320:	movw	r2, #57976	; 0xe278
   14324:	movw	r6, #57972	; 0xe274
   14328:	mov	r4, r0
   1432c:	movt	r2, #2
   14330:	movt	r5, #2
   14334:	movt	r6, #2
   14338:	ldr	r1, [r5]
   1433c:	ldr	r2, [r2]
   14340:	ldr	r0, [r6]
   14344:	cmp	r1, r2
   14348:	bcc	14360 <__assert_fail@plt+0x2d24>
   1434c:	movw	r1, #57976	; 0xe278
   14350:	movt	r1, #2
   14354:	bl	19a5c <__assert_fail@plt+0x8420>
   14358:	ldr	r1, [r5]
   1435c:	str	r0, [r6]
   14360:	add	r2, r1, #1
   14364:	str	r2, [r5]
   14368:	strb	r4, [r0, r1]
   1436c:	pop	{r4, r5, r6, sl, fp, pc}
   14370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14374:	add	fp, sp, #28
   14378:	sub	sp, sp, #4
   1437c:	ldr	r5, [r0, #20]
   14380:	movw	r1, #57964	; 0xe26c
   14384:	mov	r4, r0
   14388:	movw	r9, #57988	; 0xe284
   1438c:	movt	r1, #2
   14390:	movt	r9, #2
   14394:	add	r0, r5, #1
   14398:	str	r0, [r4, #20]
   1439c:	ldr	r1, [r1]
   143a0:	ldr	sl, [r1, r0, lsl #2]
   143a4:	mov	r0, #1
   143a8:	ldr	r7, [r1, r5, lsl #2]
   143ac:	strb	r0, [r9]
   143b0:	movw	r0, #57972	; 0xe274
   143b4:	movt	r0, #2
   143b8:	ldr	r8, [r0]
   143bc:	movw	r0, #57989	; 0xe285
   143c0:	movt	r0, #2
   143c4:	ldrb	r0, [r0]
   143c8:	cmp	r0, #1
   143cc:	bleq	1499c <__assert_fail@plt+0x3360>
   143d0:	ldr	r0, [r4, #8]
   143d4:	cmp	r0, #1
   143d8:	bne	14424 <__assert_fail@plt+0x2de8>
   143dc:	movw	r0, #57712	; 0xe170
   143e0:	movw	r1, #57932	; 0xe24c
   143e4:	movt	r0, #2
   143e8:	movt	r1, #2
   143ec:	ldr	r0, [r0]
   143f0:	ldr	r1, [r1]
   143f4:	cmp	r0, #1
   143f8:	blt	14418 <__assert_fail@plt+0x2ddc>
   143fc:	add	r2, r1, #8
   14400:	mov	r3, #0
   14404:	mov	r6, #2
   14408:	add	r3, r3, #1
   1440c:	str	r6, [r2], #40	; 0x28
   14410:	cmp	r3, r0
   14414:	blt	14408 <__assert_fail@plt+0x2dcc>
   14418:	ldr	r0, [r1, #28]
   1441c:	cmp	r0, #0
   14420:	ble	144e4 <__assert_fail@plt+0x2ea8>
   14424:	movw	r6, #57992	; 0xe288
   14428:	movw	r9, #57876	; 0xe214
   1442c:	movt	r6, #2
   14430:	movt	r9, #2
   14434:	ldr	r0, [r6]
   14438:	ldr	r1, [r9]
   1443c:	cmp	r0, r1
   14440:	ble	14454 <__assert_fail@plt+0x2e18>
   14444:	sub	r0, r0, r1
   14448:	bl	14acc <__assert_fail@plt+0x3490>
   1444c:	mov	r0, #0
   14450:	str	r0, [r6]
   14454:	movw	r0, #57873	; 0xe211
   14458:	movt	r0, #2
   1445c:	ldrb	r0, [r0]
   14460:	cmp	r0, #1
   14464:	bleq	14b30 <__assert_fail@plt+0x34f4>
   14468:	cmp	r7, sl
   1446c:	beq	14488 <__assert_fail@plt+0x2e4c>
   14470:	add	r6, r8, r7
   14474:	sub	r7, sl, r7
   14478:	ldrb	r0, [r6], #1
   1447c:	bl	14508 <__assert_fail@plt+0x2ecc>
   14480:	subs	r7, r7, #1
   14484:	bne	14478 <__assert_fail@plt+0x2e3c>
   14488:	movw	r0, #57996	; 0xe28c
   1448c:	movt	r0, #2
   14490:	ldr	r0, [r0]
   14494:	cmp	r0, #0
   14498:	bne	144fc <__assert_fail@plt+0x2ec0>
   1449c:	movw	r0, #57968	; 0xe270
   144a0:	movw	r7, #57868	; 0xe20c
   144a4:	ldr	r3, [r4, #32]
   144a8:	ldr	r2, [r9]
   144ac:	movw	r1, #58000	; 0xe290
   144b0:	movt	r0, #2
   144b4:	movt	r7, #2
   144b8:	movt	r1, #2
   144bc:	ldr	r0, [r0]
   144c0:	ldr	r7, [r7]
   144c4:	ldr	r0, [r0, r5, lsl #2]
   144c8:	add	r0, r0, r3
   144cc:	sub	r3, r3, r2
   144d0:	cmp	r3, r7
   144d4:	str	r0, [r1]
   144d8:	subeq	r0, r0, r2
   144dc:	streq	r0, [r1]
   144e0:	b	144fc <__assert_fail@plt+0x2ec0>
   144e4:	movw	r0, #57880	; 0xe218
   144e8:	movt	r0, #2
   144ec:	ldrb	r0, [r0]
   144f0:	cmp	r0, #1
   144f4:	moveq	r0, #0
   144f8:	strbeq	r0, [r9]
   144fc:	mov	r0, #1
   14500:	sub	sp, fp, #28
   14504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14508:	push	{r4, sl, fp, lr}
   1450c:	add	fp, sp, #8
   14510:	mov	r4, r0
   14514:	movw	r0, #57860	; 0xe204
   14518:	movt	r0, #2
   1451c:	ldrb	r0, [r0]
   14520:	cmp	r0, #0
   14524:	beq	14598 <__assert_fail@plt+0x2f5c>
   14528:	movw	r0, #57996	; 0xe28c
   1452c:	cmp	r4, #32
   14530:	movt	r0, #2
   14534:	ldr	r1, [r0]
   14538:	addeq	r1, r1, #1
   1453c:	streq	r1, [r0]
   14540:	popeq	{r4, sl, fp, pc}
   14544:	cmp	r1, #1
   14548:	blge	14c28 <__assert_fail@plt+0x35ec>
   1454c:	bl	114c8 <__ctype_b_loc@plt>
   14550:	ldr	r0, [r0]
   14554:	add	r0, r0, r4, lsl #1
   14558:	ldrb	r0, [r0, #1]
   1455c:	tst	r0, #64	; 0x40
   14560:	bne	14584 <__assert_fail@plt+0x2f48>
   14564:	cmp	r4, #8
   14568:	bne	14598 <__assert_fail@plt+0x2f5c>
   1456c:	movw	r0, #58000	; 0xe290
   14570:	mov	r4, #8
   14574:	movt	r0, #2
   14578:	ldr	r1, [r0]
   1457c:	sub	r1, r1, #1
   14580:	b	14594 <__assert_fail@plt+0x2f58>
   14584:	movw	r0, #58000	; 0xe290
   14588:	movt	r0, #2
   1458c:	ldr	r1, [r0]
   14590:	add	r1, r1, #1
   14594:	str	r1, [r0]
   14598:	mov	r0, r4
   1459c:	pop	{r4, sl, fp, lr}
   145a0:	b	11630 <putchar_unlocked@plt>
   145a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a8:	add	fp, sp, #28
   145ac:	sub	sp, sp, #4
   145b0:	mov	r4, r0
   145b4:	ldr	r0, [r0]
   145b8:	bl	113a8 <getc_unlocked@plt>
   145bc:	movw	r8, #58008	; 0xe298
   145c0:	mov	r5, r0
   145c4:	cmp	r0, #12
   145c8:	movt	r8, #2
   145cc:	ldr	r7, [r8]
   145d0:	bne	14600 <__assert_fail@plt+0x2fc4>
   145d4:	ldrb	r0, [r4, #37]	; 0x25
   145d8:	cmp	r0, #0
   145dc:	beq	148a4 <__assert_fail@plt+0x3268>
   145e0:	ldr	r0, [r4]
   145e4:	bl	113a8 <getc_unlocked@plt>
   145e8:	mov	r5, r0
   145ec:	cmp	r0, #10
   145f0:	bne	14600 <__assert_fail@plt+0x2fc4>
   145f4:	ldr	r0, [r4]
   145f8:	bl	113a8 <getc_unlocked@plt>
   145fc:	mov	r5, r0
   14600:	mov	r0, #0
   14604:	cmn	r5, #1
   14608:	strb	r0, [r4, #37]	; 0x25
   1460c:	beq	14630 <__assert_fail@plt+0x2ff4>
   14610:	cmp	r5, #10
   14614:	beq	1463c <__assert_fail@plt+0x3000>
   14618:	cmp	r5, #12
   1461c:	beq	148ac <__assert_fail@plt+0x3270>
   14620:	uxtb	r0, r5
   14624:	bl	14cc8 <__assert_fail@plt+0x368c>
   14628:	mov	r6, r0
   1462c:	b	1463c <__assert_fail@plt+0x3000>
   14630:	mov	r0, r4
   14634:	bl	141f4 <__assert_fail@plt+0x2bb8>
   14638:	b	1493c <__assert_fail@plt+0x3300>
   1463c:	movw	r0, #57883	; 0xe21b
   14640:	movt	r0, #2
   14644:	ldrb	r0, [r0]
   14648:	cmp	r0, #1
   1464c:	bne	14670 <__assert_fail@plt+0x3034>
   14650:	movw	r0, #57916	; 0xe23c
   14654:	ldr	r1, [r8]
   14658:	movt	r0, #2
   1465c:	ldr	r0, [r0]
   14660:	cmp	r1, r0
   14664:	ble	14670 <__assert_fail@plt+0x3034>
   14668:	str	r7, [r8]
   1466c:	b	1489c <__assert_fail@plt+0x3260>
   14670:	ldr	r0, [r4, #16]
   14674:	movw	r1, #17172	; 0x4314
   14678:	movt	r1, #1
   1467c:	cmp	r0, r1
   14680:	beq	147bc <__assert_fail@plt+0x3180>
   14684:	movw	r0, #57988	; 0xe284
   14688:	mov	r1, #1
   1468c:	movt	r0, #2
   14690:	strb	r1, [r0]
   14694:	movw	r0, #57989	; 0xe285
   14698:	movt	r0, #2
   1469c:	ldrb	r0, [r0]
   146a0:	cmp	r0, #1
   146a4:	bne	146bc <__assert_fail@plt+0x3080>
   146a8:	movw	r0, #57841	; 0xe1f1
   146ac:	movt	r0, #2
   146b0:	ldrb	r0, [r0]
   146b4:	cmp	r0, #1
   146b8:	bleq	1499c <__assert_fail@plt+0x3360>
   146bc:	movw	r0, #57862	; 0xe206
   146c0:	movt	r0, #2
   146c4:	ldrb	r0, [r0]
   146c8:	cmp	r0, #1
   146cc:	bne	14778 <__assert_fail@plt+0x313c>
   146d0:	movw	r0, #58014	; 0xe29e
   146d4:	movt	r0, #2
   146d8:	ldrb	r0, [r0]
   146dc:	cmp	r0, #1
   146e0:	bne	14778 <__assert_fail@plt+0x313c>
   146e4:	movw	sl, #58004	; 0xe294
   146e8:	mov	r0, #0
   146ec:	movt	sl, #2
   146f0:	ldr	r9, [sl]
   146f4:	str	r0, [sl]
   146f8:	cmp	r9, #1
   146fc:	blt	1472c <__assert_fail@plt+0x30f0>
   14700:	movw	r0, #57932	; 0xe24c
   14704:	movt	r0, #2
   14708:	ldr	r7, [r0]
   1470c:	mov	r0, r7
   14710:	bl	14ee8 <__assert_fail@plt+0x38ac>
   14714:	ldr	r0, [sl]
   14718:	subs	r9, r9, #1
   1471c:	add	r7, r7, #40	; 0x28
   14720:	add	r0, r0, #1
   14724:	str	r0, [sl]
   14728:	bne	1470c <__assert_fail@plt+0x30d0>
   1472c:	movw	r1, #58014	; 0xe29e
   14730:	ldr	r0, [r4, #32]
   14734:	mov	r2, #0
   14738:	movt	r1, #2
   1473c:	strb	r2, [r1]
   14740:	movw	r1, #57992	; 0xe288
   14744:	movt	r1, #2
   14748:	str	r0, [r1]
   1474c:	movw	r1, #57883	; 0xe21b
   14750:	movw	r0, #57916	; 0xe23c
   14754:	movt	r1, #2
   14758:	movt	r0, #2
   1475c:	ldrb	r1, [r1]
   14760:	ldr	r0, [r0]
   14764:	cmp	r1, #0
   14768:	moveq	r0, r1
   1476c:	movw	r1, #57996	; 0xe28c
   14770:	movt	r1, #2
   14774:	str	r0, [r1]
   14778:	movw	r7, #57992	; 0xe288
   1477c:	movw	r1, #57876	; 0xe214
   14780:	movt	r1, #2
   14784:	movt	r7, #2
   14788:	ldr	r0, [r7]
   1478c:	ldr	r1, [r1]
   14790:	cmp	r0, r1
   14794:	ble	147a8 <__assert_fail@plt+0x316c>
   14798:	sub	r0, r0, r1
   1479c:	bl	14acc <__assert_fail@plt+0x3490>
   147a0:	mov	r0, #0
   147a4:	str	r0, [r7]
   147a8:	movw	r0, #57873	; 0xe211
   147ac:	movt	r0, #2
   147b0:	ldrb	r0, [r0]
   147b4:	cmp	r0, #1
   147b8:	bleq	14b30 <__assert_fail@plt+0x34f4>
   147bc:	ldrb	r0, [r4, #36]	; 0x24
   147c0:	cmp	r0, #0
   147c4:	movne	r0, r4
   147c8:	blne	14f54 <__assert_fail@plt+0x3918>
   147cc:	movw	r0, #58015	; 0xe29f
   147d0:	mov	r1, #0
   147d4:	mov	r7, #1
   147d8:	cmp	r5, #10
   147dc:	movt	r0, #2
   147e0:	strb	r1, [r0]
   147e4:	beq	14940 <__assert_fail@plt+0x3304>
   147e8:	cmp	r6, #0
   147ec:	beq	14810 <__assert_fail@plt+0x31d4>
   147f0:	movw	r0, #57924	; 0xe244
   147f4:	movt	r0, #2
   147f8:	ldr	r5, [r0]
   147fc:	ldrb	r0, [r5], #1
   14800:	ldr	r1, [r4, #16]
   14804:	blx	r1
   14808:	subs	r6, r6, #1
   1480c:	bne	147fc <__assert_fail@plt+0x31c0>
   14810:	movw	r9, #57916	; 0xe23c
   14814:	movw	sl, #57924	; 0xe244
   14818:	movt	r9, #2
   1481c:	movt	sl, #2
   14820:	b	14844 <__assert_fail@plt+0x3208>
   14824:	cmp	r5, #0
   14828:	beq	14844 <__assert_fail@plt+0x3208>
   1482c:	ldr	r6, [sl]
   14830:	ldrb	r0, [r6], #1
   14834:	ldr	r1, [r4, #16]
   14838:	blx	r1
   1483c:	subs	r5, r5, #1
   14840:	bne	14830 <__assert_fail@plt+0x31f4>
   14844:	ldr	r0, [r4]
   14848:	bl	113a8 <getc_unlocked@plt>
   1484c:	cmn	r0, #1
   14850:	beq	1494c <__assert_fail@plt+0x3310>
   14854:	cmp	r0, #10
   14858:	beq	14940 <__assert_fail@plt+0x3304>
   1485c:	cmp	r0, #12
   14860:	beq	14958 <__assert_fail@plt+0x331c>
   14864:	ldr	r6, [r8]
   14868:	uxtb	r0, r0
   1486c:	bl	14cc8 <__assert_fail@plt+0x368c>
   14870:	mov	r5, r0
   14874:	movw	r0, #57883	; 0xe21b
   14878:	movt	r0, #2
   1487c:	ldrb	r0, [r0]
   14880:	cmp	r0, #1
   14884:	bne	14824 <__assert_fail@plt+0x31e8>
   14888:	ldr	r0, [r9]
   1488c:	ldr	r1, [r8]
   14890:	cmp	r1, r0
   14894:	ble	14824 <__assert_fail@plt+0x31e8>
   14898:	str	r6, [r8]
   1489c:	mov	r7, #0
   148a0:	b	14940 <__assert_fail@plt+0x3304>
   148a4:	mov	r0, #0
   148a8:	strb	r0, [r4, #37]	; 0x25
   148ac:	ldr	r0, [r4]
   148b0:	bl	113a8 <getc_unlocked@plt>
   148b4:	cmp	r0, #10
   148b8:	beq	148c4 <__assert_fail@plt+0x3288>
   148bc:	ldr	r1, [r4]
   148c0:	bl	11504 <ungetc@plt>
   148c4:	movw	r0, #58012	; 0xe29c
   148c8:	mov	r1, #1
   148cc:	movt	r0, #2
   148d0:	strb	r1, [r0]
   148d4:	movw	r0, #57989	; 0xe285
   148d8:	movt	r0, #2
   148dc:	ldrb	r0, [r0]
   148e0:	cmp	r0, #1
   148e4:	bne	14914 <__assert_fail@plt+0x32d8>
   148e8:	movw	r0, #57841	; 0xe1f1
   148ec:	movt	r0, #2
   148f0:	ldrb	r0, [r0]
   148f4:	cmp	r0, #1
   148f8:	bne	14914 <__assert_fail@plt+0x32d8>
   148fc:	movw	r0, #57988	; 0xe284
   14900:	mov	r1, #1
   14904:	movt	r0, #2
   14908:	strb	r1, [r0]
   1490c:	bl	1499c <__assert_fail@plt+0x3360>
   14910:	b	14934 <__assert_fail@plt+0x32f8>
   14914:	movw	r0, #57881	; 0xe219
   14918:	movt	r0, #2
   1491c:	ldrb	r0, [r0]
   14920:	cmp	r0, #1
   14924:	movweq	r0, #58013	; 0xe29d
   14928:	moveq	r1, #1
   1492c:	movteq	r0, #2
   14930:	strbeq	r1, [r0]
   14934:	mov	r0, r4
   14938:	bl	1416c <__assert_fail@plt+0x2b30>
   1493c:	mov	r7, #1
   14940:	mov	r0, r7
   14944:	sub	sp, fp, #28
   14948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1494c:	mov	r0, r4
   14950:	bl	141f4 <__assert_fail@plt+0x2bb8>
   14954:	b	14940 <__assert_fail@plt+0x3304>
   14958:	ldr	r0, [r4]
   1495c:	bl	113a8 <getc_unlocked@plt>
   14960:	cmp	r0, #10
   14964:	beq	14970 <__assert_fail@plt+0x3334>
   14968:	ldr	r1, [r4]
   1496c:	bl	11504 <ungetc@plt>
   14970:	movw	r0, #57881	; 0xe219
   14974:	movt	r0, #2
   14978:	ldrb	r0, [r0]
   1497c:	cmp	r0, #1
   14980:	movweq	r0, #58013	; 0xe29d
   14984:	moveq	r1, #1
   14988:	movteq	r0, #2
   1498c:	strbeq	r1, [r0]
   14990:	mov	r0, r4
   14994:	bl	1416c <__assert_fail@plt+0x2b30>
   14998:	b	14940 <__assert_fail@plt+0x3304>
   1499c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149a0:	add	fp, sp, #24
   149a4:	sub	sp, sp, #304	; 0x130
   149a8:	movw	r7, #57868	; 0xe20c
   149ac:	movw	r8, #58000	; 0xe290
   149b0:	mov	r6, #0
   149b4:	movt	r7, #2
   149b8:	movt	r8, #2
   149bc:	ldr	r0, [r7]
   149c0:	str	r6, [r8]
   149c4:	bl	14acc <__assert_fail@plt+0x3490>
   149c8:	bl	14c28 <__assert_fail@plt+0x35ec>
   149cc:	movw	r4, #57896	; 0xe228
   149d0:	movt	r4, #2
   149d4:	ldrd	r0, [r4]
   149d8:	orrs	r0, r0, r1
   149dc:	beq	14aa8 <__assert_fail@plt+0x346c>
   149e0:	movw	r1, #52246	; 0xcc16
   149e4:	mov	r0, #0
   149e8:	mov	r2, #5
   149ec:	movt	r1, #1
   149f0:	bl	113b4 <dcgettext@plt>
   149f4:	mov	r3, r0
   149f8:	ldrd	r0, [r4]
   149fc:	add	r4, sp, #28
   14a00:	mov	r2, #276	; 0x114
   14a04:	stm	sp, {r0, r1}
   14a08:	mov	r0, r4
   14a0c:	mov	r1, #1
   14a10:	bl	1151c <__sprintf_chk@plt>
   14a14:	movw	r0, #57960	; 0xe268
   14a18:	mov	r1, #0
   14a1c:	movt	r0, #2
   14a20:	ldr	r5, [r0]
   14a24:	mov	r0, r4
   14a28:	bl	156ec <__assert_fail@plt+0x40b0>
   14a2c:	movw	r1, #57952	; 0xe260
   14a30:	movw	r3, #57956	; 0xe264
   14a34:	sub	r0, r5, r0
   14a38:	movw	r5, #52165	; 0xcbc5
   14a3c:	ldr	r2, [r7]
   14a40:	movt	r1, #2
   14a44:	movt	r3, #2
   14a48:	bic	r0, r0, r0, asr #31
   14a4c:	movt	r5, #1
   14a50:	ldr	r1, [r1]
   14a54:	ldr	r3, [r3]
   14a58:	sub	r7, r0, r0, lsr #1
   14a5c:	lsr	r0, r0, #1
   14a60:	str	r1, [sp]
   14a64:	stmib	sp, {r0, r5}
   14a68:	movw	r1, #52256	; 0xcc20
   14a6c:	str	r3, [sp, #12]
   14a70:	movw	r3, #52164	; 0xcbc4
   14a74:	mov	r0, #1
   14a78:	str	r7, [sp, #16]
   14a7c:	str	r5, [sp, #20]
   14a80:	str	r4, [sp, #24]
   14a84:	movt	r1, #1
   14a88:	movt	r3, #1
   14a8c:	bl	11540 <__printf_chk@plt>
   14a90:	movw	r0, #57989	; 0xe285
   14a94:	str	r6, [r8]
   14a98:	movt	r0, #2
   14a9c:	strb	r6, [r0]
   14aa0:	sub	sp, fp, #24
   14aa4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14aa8:	movw	r1, #52225	; 0xcc01
   14aac:	mov	r0, #0
   14ab0:	mov	r2, #5
   14ab4:	movt	r1, #1
   14ab8:	bl	113b4 <dcgettext@plt>
   14abc:	mov	r2, r0
   14ac0:	mov	r0, #1
   14ac4:	mov	r1, #0
   14ac8:	bl	11450 <error@plt>
   14acc:	push	{r4, r5, r6, sl, fp, lr}
   14ad0:	add	fp, sp, #16
   14ad4:	movw	r1, #57860	; 0xe204
   14ad8:	movw	r5, #58000	; 0xe290
   14adc:	mov	r4, r0
   14ae0:	movt	r1, #2
   14ae4:	movt	r5, #2
   14ae8:	ldrb	r1, [r1]
   14aec:	ldr	r0, [r5]
   14af0:	cmp	r1, #0
   14af4:	beq	14b0c <__assert_fail@plt+0x34d0>
   14af8:	movw	r1, #57996	; 0xe28c
   14afc:	sub	r0, r4, r0
   14b00:	movt	r1, #2
   14b04:	str	r0, [r1]
   14b08:	pop	{r4, r5, r6, sl, fp, pc}
   14b0c:	cmp	r0, r4
   14b10:	bge	14b28 <__assert_fail@plt+0x34ec>
   14b14:	sub	r6, r4, r0
   14b18:	mov	r0, #32
   14b1c:	bl	11630 <putchar_unlocked@plt>
   14b20:	subs	r6, r6, #1
   14b24:	bne	14b18 <__assert_fail@plt+0x34dc>
   14b28:	str	r4, [r5]
   14b2c:	pop	{r4, r5, r6, sl, fp, pc}
   14b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b34:	add	fp, sp, #28
   14b38:	sub	sp, sp, #4
   14b3c:	movw	r8, #58004	; 0xe294
   14b40:	movt	r8, #2
   14b44:	ldr	r0, [r8]
   14b48:	cmp	r0, #1
   14b4c:	blt	14c08 <__assert_fail@plt+0x35cc>
   14b50:	movw	r0, #57696	; 0xe160
   14b54:	movw	r6, #57996	; 0xe28c
   14b58:	movw	r7, #58000	; 0xe290
   14b5c:	movt	r0, #2
   14b60:	movt	r6, #2
   14b64:	movt	r7, #2
   14b68:	ldr	r9, [r0]
   14b6c:	movw	r0, #57876	; 0xe214
   14b70:	movt	r0, #2
   14b74:	ldr	sl, [r0]
   14b78:	subs	r0, sl, #1
   14b7c:	blt	14be0 <__assert_fail@plt+0x35a4>
   14b80:	mov	r4, sl
   14b84:	mov	r5, r9
   14b88:	ldrb	r0, [r5]
   14b8c:	ldr	r1, [r6]
   14b90:	cmp	r0, #32
   14b94:	bne	14ba0 <__assert_fail@plt+0x3564>
   14b98:	mov	r0, r6
   14b9c:	b	14bbc <__assert_fail@plt+0x3580>
   14ba0:	cmp	r1, #1
   14ba4:	blt	14bb0 <__assert_fail@plt+0x3574>
   14ba8:	bl	14c28 <__assert_fail@plt+0x35ec>
   14bac:	ldrb	r0, [r5]
   14bb0:	bl	11630 <putchar_unlocked@plt>
   14bb4:	ldr	r1, [r7]
   14bb8:	mov	r0, r7
   14bbc:	sub	r4, r4, #1
   14bc0:	add	r1, r1, #1
   14bc4:	add	r5, r5, #1
   14bc8:	cmp	r4, #0
   14bcc:	str	r1, [r0]
   14bd0:	bgt	14b88 <__assert_fail@plt+0x354c>
   14bd4:	add	r9, r9, sl
   14bd8:	mvn	sl, #0
   14bdc:	b	14be4 <__assert_fail@plt+0x35a8>
   14be0:	mov	sl, r0
   14be4:	ldr	r0, [r6]
   14be8:	cmp	r0, #1
   14bec:	blge	14c28 <__assert_fail@plt+0x35ec>
   14bf0:	ldr	r0, [r8]
   14bf4:	subs	r0, r0, #1
   14bf8:	str	r0, [r8]
   14bfc:	bgt	14b78 <__assert_fail@plt+0x353c>
   14c00:	sub	sp, fp, #28
   14c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c08:	movw	r0, #57996	; 0xe28c
   14c0c:	movt	r0, #2
   14c10:	ldr	r0, [r0]
   14c14:	cmp	r0, #1
   14c18:	blt	14c00 <__assert_fail@plt+0x35c4>
   14c1c:	sub	sp, fp, #28
   14c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c24:	b	14c28 <__assert_fail@plt+0x35ec>
   14c28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c2c:	add	fp, sp, #24
   14c30:	movw	r8, #58000	; 0xe290
   14c34:	movw	r9, #57996	; 0xe28c
   14c38:	movt	r8, #2
   14c3c:	movt	r9, #2
   14c40:	ldr	r1, [r9]
   14c44:	ldr	r0, [r8]
   14c48:	add	r6, r1, r0
   14c4c:	cmp	r1, #2
   14c50:	blt	14c9c <__assert_fail@plt+0x3660>
   14c54:	movw	r7, #57676	; 0xe14c
   14c58:	movw	r4, #57672	; 0xe148
   14c5c:	movt	r7, #2
   14c60:	movt	r4, #2
   14c64:	ldr	r1, [r7]
   14c68:	sdiv	r2, r0, r1
   14c6c:	mul	r2, r2, r1
   14c70:	sub	r2, r2, r0
   14c74:	add	r1, r1, r2
   14c78:	add	r5, r1, r0
   14c7c:	cmp	r6, r5
   14c80:	blt	14c9c <__assert_fail@plt+0x3660>
   14c84:	ldrb	r0, [r4]
   14c88:	bl	11630 <putchar_unlocked@plt>
   14c8c:	sub	r0, r6, r5
   14c90:	cmp	r0, #1
   14c94:	mov	r0, r5
   14c98:	bgt	14c64 <__assert_fail@plt+0x3628>
   14c9c:	cmp	r0, r6
   14ca0:	bge	14cb8 <__assert_fail@plt+0x367c>
   14ca4:	sub	r4, r6, r0
   14ca8:	mov	r0, #32
   14cac:	bl	11630 <putchar_unlocked@plt>
   14cb0:	subs	r4, r4, #1
   14cb4:	bne	14ca8 <__assert_fail@plt+0x366c>
   14cb8:	mov	r0, #0
   14cbc:	str	r6, [r8]
   14cc0:	str	r0, [r9]
   14cc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14cc8:	push	{r4, r5, r6, r7, fp, lr}
   14ccc:	add	fp, sp, #16
   14cd0:	sub	sp, sp, #8
   14cd4:	mov	r6, r0
   14cd8:	movw	r0, #57924	; 0xe244
   14cdc:	movt	r0, #2
   14ce0:	ldr	r5, [r0]
   14ce4:	movw	r0, #57664	; 0xe140
   14ce8:	movt	r0, #2
   14cec:	ldrb	r1, [r0]
   14cf0:	movw	r0, #57668	; 0xe144
   14cf4:	movt	r0, #2
   14cf8:	ldr	r0, [r0]
   14cfc:	cmp	r1, r6
   14d00:	movne	r0, #8
   14d04:	cmp	r6, #9
   14d08:	cmpne	r1, r6
   14d0c:	bne	14d60 <__assert_fail@plt+0x3724>
   14d10:	movw	r1, #58008	; 0xe298
   14d14:	movt	r1, #2
   14d18:	ldr	r7, [r1]
   14d1c:	sdiv	r1, r7, r0
   14d20:	mul	r1, r1, r0
   14d24:	sub	r1, r1, r7
   14d28:	add	r4, r0, r1
   14d2c:	movw	r0, #57852	; 0xe1fc
   14d30:	movt	r0, #2
   14d34:	ldrb	r0, [r0]
   14d38:	cmp	r0, #1
   14d3c:	bne	14dd4 <__assert_fail@plt+0x3798>
   14d40:	cmp	r4, #0
   14d44:	beq	14e74 <__assert_fail@plt+0x3838>
   14d48:	mov	r0, r5
   14d4c:	mov	r1, #32
   14d50:	mov	r2, r4
   14d54:	bl	11534 <memset@plt>
   14d58:	mov	r0, r4
   14d5c:	b	14ddc <__assert_fail@plt+0x37a0>
   14d60:	bl	114c8 <__ctype_b_loc@plt>
   14d64:	ldr	r0, [r0]
   14d68:	add	r0, r0, r6, lsl #1
   14d6c:	ldrb	r0, [r0, #1]
   14d70:	tst	r0, #64	; 0x40
   14d74:	bne	14df8 <__assert_fail@plt+0x37bc>
   14d78:	movw	r0, #57882	; 0xe21a
   14d7c:	movt	r0, #2
   14d80:	ldrb	r0, [r0]
   14d84:	cmp	r0, #1
   14d88:	bne	14e3c <__assert_fail@plt+0x3800>
   14d8c:	mov	r0, #92	; 0x5c
   14d90:	movw	r3, #52277	; 0xcc35
   14d94:	mov	r1, #1
   14d98:	mov	r2, #4
   14d9c:	mov	r4, #4
   14da0:	strb	r0, [r5], #1
   14da4:	str	r6, [sp]
   14da8:	add	r6, sp, #4
   14dac:	movt	r3, #1
   14db0:	mov	r0, r6
   14db4:	bl	1151c <__sprintf_chk@plt>
   14db8:	mov	r0, #0
   14dbc:	ldrb	r1, [r6, r0]
   14dc0:	strb	r1, [r5, r0]
   14dc4:	add	r0, r0, #1
   14dc8:	cmp	r0, #3
   14dcc:	bne	14dbc <__assert_fail@plt+0x3780>
   14dd0:	b	14e00 <__assert_fail@plt+0x37c4>
   14dd4:	strb	r6, [r5]
   14dd8:	mov	r0, #1
   14ddc:	mov	r1, #0
   14de0:	cmn	r4, #1
   14de4:	bgt	14e18 <__assert_fail@plt+0x37dc>
   14de8:	cmp	r7, #0
   14dec:	bne	14e18 <__assert_fail@plt+0x37dc>
   14df0:	mov	r0, #0
   14df4:	b	14e28 <__assert_fail@plt+0x37ec>
   14df8:	mov	r4, #1
   14dfc:	strb	r6, [r5]
   14e00:	movw	r0, #58008	; 0xe298
   14e04:	movt	r0, #2
   14e08:	ldr	r7, [r0]
   14e0c:	mov	r0, r4
   14e10:	add	r1, r7, r4
   14e14:	b	14e28 <__assert_fail@plt+0x37ec>
   14e18:	rsb	r2, r4, #0
   14e1c:	cmp	r7, r2
   14e20:	cmple	r4, #0
   14e24:	addge	r1, r7, r4
   14e28:	movw	r2, #58008	; 0xe298
   14e2c:	movt	r2, #2
   14e30:	str	r1, [r2]
   14e34:	sub	sp, fp, #16
   14e38:	pop	{r4, r5, r6, r7, fp, pc}
   14e3c:	movw	r0, #57843	; 0xe1f3
   14e40:	movt	r0, #2
   14e44:	ldrb	r0, [r0]
   14e48:	cmp	r0, #1
   14e4c:	bne	14e80 <__assert_fail@plt+0x3844>
   14e50:	sxtb	r0, r6
   14e54:	cmp	r0, #0
   14e58:	blt	14ea0 <__assert_fail@plt+0x3864>
   14e5c:	mov	r0, #94	; 0x5e
   14e60:	mov	r4, #2
   14e64:	strb	r0, [r5]
   14e68:	eor	r0, r6, #64	; 0x40
   14e6c:	strb	r0, [r5, #1]
   14e70:	b	14e00 <__assert_fail@plt+0x37c4>
   14e74:	mov	r4, #0
   14e78:	mov	r0, #0
   14e7c:	b	14e10 <__assert_fail@plt+0x37d4>
   14e80:	movw	r0, #58008	; 0xe298
   14e84:	strb	r6, [r5]
   14e88:	mov	r4, #0
   14e8c:	cmp	r6, #8
   14e90:	movt	r0, #2
   14e94:	mvneq	r4, #0
   14e98:	ldr	r7, [r0]
   14e9c:	b	14dd8 <__assert_fail@plt+0x379c>
   14ea0:	mov	r0, #92	; 0x5c
   14ea4:	movw	r3, #52277	; 0xcc35
   14ea8:	mov	r1, #1
   14eac:	mov	r2, #4
   14eb0:	mov	r4, #4
   14eb4:	strb	r0, [r5], #1
   14eb8:	str	r6, [sp]
   14ebc:	add	r6, sp, #4
   14ec0:	movt	r3, #1
   14ec4:	mov	r0, r6
   14ec8:	bl	1151c <__sprintf_chk@plt>
   14ecc:	mov	r0, #0
   14ed0:	ldrb	r1, [r6, r0]
   14ed4:	strb	r1, [r5, r0]
   14ed8:	add	r0, r0, #1
   14edc:	cmp	r0, #3
   14ee0:	bne	14ed0 <__assert_fail@plt+0x3894>
   14ee4:	b	14e00 <__assert_fail@plt+0x37c4>
   14ee8:	push	{r4, r5, fp, lr}
   14eec:	add	fp, sp, #8
   14ef0:	movw	r1, #57876	; 0xe214
   14ef4:	mov	r4, r0
   14ef8:	ldr	r0, [r0, #32]
   14efc:	movw	r5, #57992	; 0xe288
   14f00:	movt	r1, #2
   14f04:	movt	r5, #2
   14f08:	ldr	r1, [r1]
   14f0c:	str	r0, [r5]
   14f10:	cmp	r0, r1
   14f14:	ble	14f28 <__assert_fail@plt+0x38ec>
   14f18:	sub	r0, r0, r1
   14f1c:	bl	14acc <__assert_fail@plt+0x3490>
   14f20:	mov	r0, #0
   14f24:	str	r0, [r5]
   14f28:	movw	r0, #57873	; 0xe211
   14f2c:	movt	r0, #2
   14f30:	ldrb	r0, [r0]
   14f34:	cmp	r0, #1
   14f38:	bleq	14b30 <__assert_fail@plt+0x34f4>
   14f3c:	ldrb	r0, [r4, #36]	; 0x24
   14f40:	cmp	r0, #0
   14f44:	popeq	{r4, r5, fp, pc}
   14f48:	mov	r0, r4
   14f4c:	pop	{r4, r5, fp, lr}
   14f50:	b	14f54 <__assert_fail@plt+0x3918>
   14f54:	push	{r4, r5, r6, r7, fp, lr}
   14f58:	add	fp, sp, #16
   14f5c:	sub	sp, sp, #8
   14f60:	movw	r5, #57688	; 0xe158
   14f64:	movw	r7, #57904	; 0xe230
   14f68:	movw	r6, #57920	; 0xe240
   14f6c:	mov	r4, r0
   14f70:	movw	r3, #52282	; 0xcc3a
   14f74:	movt	r5, #2
   14f78:	movt	r7, #2
   14f7c:	movt	r6, #2
   14f80:	movt	r3, #1
   14f84:	ldr	r1, [r5]
   14f88:	ldr	r2, [r7]
   14f8c:	ldr	r0, [r6]
   14f90:	stm	sp, {r1, r2}
   14f94:	mov	r1, #1
   14f98:	mvn	r2, #0
   14f9c:	bl	1151c <__sprintf_chk@plt>
   14fa0:	ldr	r1, [r7]
   14fa4:	add	r1, r1, #1
   14fa8:	str	r1, [r7]
   14fac:	ldr	r7, [r5]
   14fb0:	cmp	r7, #1
   14fb4:	blt	14fd4 <__assert_fail@plt+0x3998>
   14fb8:	ldr	r1, [r6]
   14fbc:	add	r6, r1, r0
   14fc0:	ldrb	r0, [r6, -r7]
   14fc4:	ldr	r1, [r4, #16]
   14fc8:	blx	r1
   14fcc:	subs	r7, r7, #1
   14fd0:	bgt	14fc0 <__assert_fail@plt+0x3984>
   14fd4:	movw	r0, #57712	; 0xe170
   14fd8:	movt	r0, #2
   14fdc:	ldr	r0, [r0]
   14fe0:	cmp	r0, #2
   14fe4:	blt	1503c <__assert_fail@plt+0x3a00>
   14fe8:	movw	r0, #57684	; 0xe154
   14fec:	movt	r0, #2
   14ff0:	ldrb	r0, [r0]
   14ff4:	cmp	r0, #9
   14ff8:	bne	15090 <__assert_fail@plt+0x3a54>
   14ffc:	movw	r1, #57912	; 0xe238
   15000:	ldr	r0, [r5]
   15004:	movt	r1, #2
   15008:	ldr	r1, [r1]
   1500c:	sub	r2, r1, r0
   15010:	cmp	r2, #1
   15014:	blt	15098 <__assert_fail@plt+0x3a5c>
   15018:	add	r1, r1, #1
   1501c:	sub	r5, r1, r0
   15020:	ldr	r1, [r4, #16]
   15024:	mov	r0, #32
   15028:	blx	r1
   1502c:	sub	r5, r5, #1
   15030:	cmp	r5, #1
   15034:	bgt	15020 <__assert_fail@plt+0x39e4>
   15038:	b	15098 <__assert_fail@plt+0x3a5c>
   1503c:	movw	r5, #57684	; 0xe154
   15040:	ldr	r1, [r4, #16]
   15044:	movt	r5, #2
   15048:	ldrb	r0, [r5]
   1504c:	blx	r1
   15050:	ldrb	r0, [r5]
   15054:	cmp	r0, #9
   15058:	bne	15098 <__assert_fail@plt+0x3a5c>
   1505c:	movw	r0, #58000	; 0xe290
   15060:	movw	r2, #57676	; 0xe14c
   15064:	movt	r2, #2
   15068:	movt	r0, #2
   1506c:	ldr	r1, [r0]
   15070:	ldr	r2, [r2]
   15074:	sdiv	r7, r1, r2
   15078:	add	r3, r2, r1
   1507c:	mul	r2, r7, r2
   15080:	sub	r1, r2, r1
   15084:	add	r1, r3, r1
   15088:	str	r1, [r0]
   1508c:	b	15098 <__assert_fail@plt+0x3a5c>
   15090:	ldr	r1, [r4, #16]
   15094:	blx	r1
   15098:	movw	r0, #57883	; 0xe21b
   1509c:	movt	r0, #2
   150a0:	ldrb	r0, [r0]
   150a4:	cmp	r0, #1
   150a8:	bne	150e0 <__assert_fail@plt+0x3aa4>
   150ac:	movw	r0, #57862	; 0xe206
   150b0:	movt	r0, #2
   150b4:	ldrb	r0, [r0]
   150b8:	cmp	r0, #0
   150bc:	bne	150e0 <__assert_fail@plt+0x3aa4>
   150c0:	movw	r0, #57912	; 0xe238
   150c4:	movw	r1, #58008	; 0xe298
   150c8:	movt	r0, #2
   150cc:	movt	r1, #2
   150d0:	ldr	r0, [r0]
   150d4:	ldr	r2, [r1]
   150d8:	add	r0, r2, r0
   150dc:	str	r0, [r1]
   150e0:	sub	sp, fp, #16
   150e4:	pop	{r4, r5, r6, r7, fp, pc}
   150e8:	push	{fp, lr}
   150ec:	mov	fp, sp
   150f0:	movw	r0, #57712	; 0xe170
   150f4:	movt	r0, #2
   150f8:	ldr	lr, [r0]
   150fc:	cmp	lr, #0
   15100:	moveq	r0, #0
   15104:	popeq	{fp, pc}
   15108:	movw	r0, #57841	; 0xe1f1
   1510c:	mov	r2, #0
   15110:	movt	r0, #2
   15114:	ldrb	ip, [r0]
   15118:	movw	r0, #57932	; 0xe24c
   1511c:	movt	r0, #2
   15120:	ldr	r0, [r0]
   15124:	add	r3, r0, #28
   15128:	mov	r0, #0
   1512c:	ldr	r1, [r3, #-20]	; 0xffffffec
   15130:	cmp	r1, #2
   15134:	bcs	15140 <__assert_fail@plt+0x3b04>
   15138:	add	r0, r0, #1
   1513c:	b	1515c <__assert_fail@plt+0x3b20>
   15140:	cmp	ip, #0
   15144:	bne	1515c <__assert_fail@plt+0x3b20>
   15148:	ldr	r1, [r3, #-4]
   1514c:	cmp	r1, #1
   15150:	ldrge	r1, [r3]
   15154:	cmpge	r1, #1
   15158:	bge	15138 <__assert_fail@plt+0x3afc>
   1515c:	add	r2, r2, #1
   15160:	add	r3, r3, #40	; 0x28
   15164:	cmp	r2, lr
   15168:	popcs	{fp, pc}
   1516c:	b	1512c <__assert_fail@plt+0x3af0>
   15170:	push	{r4, r5, fp, lr}
   15174:	add	fp, sp, #8
   15178:	ldr	r5, [r0]
   1517c:	mov	r4, r0
   15180:	mov	r0, r5
   15184:	bl	113a8 <getc_unlocked@plt>
   15188:	cmn	r0, #1
   1518c:	beq	151e4 <__assert_fail@plt+0x3ba8>
   15190:	cmp	r0, #10
   15194:	popeq	{r4, r5, fp, pc}
   15198:	cmp	r0, #12
   1519c:	bne	15180 <__assert_fail@plt+0x3b44>
   151a0:	mov	r0, r5
   151a4:	bl	113a8 <getc_unlocked@plt>
   151a8:	cmp	r0, #10
   151ac:	beq	151b8 <__assert_fail@plt+0x3b7c>
   151b0:	mov	r1, r5
   151b4:	bl	11504 <ungetc@plt>
   151b8:	movw	r0, #57881	; 0xe219
   151bc:	movt	r0, #2
   151c0:	ldrb	r0, [r0]
   151c4:	cmp	r0, #1
   151c8:	movweq	r0, #58013	; 0xe29d
   151cc:	moveq	r1, #1
   151d0:	movteq	r0, #2
   151d4:	strbeq	r1, [r0]
   151d8:	mov	r0, r4
   151dc:	pop	{r4, r5, fp, lr}
   151e0:	b	1416c <__assert_fail@plt+0x2b30>
   151e4:	mov	r0, r4
   151e8:	pop	{r4, r5, fp, lr}
   151ec:	b	141f4 <__assert_fail@plt+0x2bb8>
   151f0:	movw	r1, #58016	; 0xe2a0
   151f4:	movt	r1, #2
   151f8:	str	r0, [r1]
   151fc:	bx	lr
   15200:	movw	r1, #58020	; 0xe2a4
   15204:	movt	r1, #2
   15208:	strb	r0, [r1]
   1520c:	bx	lr
   15210:	push	{r4, r5, r6, sl, fp, lr}
   15214:	add	fp, sp, #16
   15218:	sub	sp, sp, #8
   1521c:	movw	r0, #57820	; 0xe1dc
   15220:	movt	r0, #2
   15224:	ldr	r0, [r0]
   15228:	bl	1b2f0 <__assert_fail@plt+0x9cb4>
   1522c:	cmp	r0, #0
   15230:	beq	15258 <__assert_fail@plt+0x3c1c>
   15234:	movw	r0, #58020	; 0xe2a4
   15238:	movt	r0, #2
   1523c:	ldrb	r0, [r0]
   15240:	cmp	r0, #0
   15244:	beq	15278 <__assert_fail@plt+0x3c3c>
   15248:	bl	11510 <__errno_location@plt>
   1524c:	ldr	r0, [r0]
   15250:	cmp	r0, #32
   15254:	bne	15278 <__assert_fail@plt+0x3c3c>
   15258:	movw	r0, #57808	; 0xe1d0
   1525c:	movt	r0, #2
   15260:	ldr	r0, [r0]
   15264:	bl	1b2f0 <__assert_fail@plt+0x9cb4>
   15268:	cmp	r0, #0
   1526c:	subeq	sp, fp, #16
   15270:	popeq	{r4, r5, r6, sl, fp, pc}
   15274:	b	152e8 <__assert_fail@plt+0x3cac>
   15278:	movw	r1, #53287	; 0xd027
   1527c:	mov	r0, #0
   15280:	mov	r2, #5
   15284:	movt	r1, #1
   15288:	bl	113b4 <dcgettext@plt>
   1528c:	mov	r4, r0
   15290:	movw	r0, #58016	; 0xe2a0
   15294:	movt	r0, #2
   15298:	ldr	r6, [r0]
   1529c:	bl	11510 <__errno_location@plt>
   152a0:	ldr	r5, [r0]
   152a4:	cmp	r6, #0
   152a8:	bne	152c4 <__assert_fail@plt+0x3c88>
   152ac:	movw	r2, #53303	; 0xd037
   152b0:	mov	r0, #0
   152b4:	mov	r1, r5
   152b8:	mov	r3, r4
   152bc:	movt	r2, #1
   152c0:	b	152e4 <__assert_fail@plt+0x3ca8>
   152c4:	mov	r0, r6
   152c8:	bl	18bd0 <__assert_fail@plt+0x7594>
   152cc:	movw	r2, #53299	; 0xd033
   152d0:	mov	r3, r0
   152d4:	str	r4, [sp]
   152d8:	mov	r0, #0
   152dc:	mov	r1, r5
   152e0:	movt	r2, #1
   152e4:	bl	11450 <error@plt>
   152e8:	movw	r0, #57724	; 0xe17c
   152ec:	movt	r0, #2
   152f0:	ldr	r0, [r0]
   152f4:	bl	11378 <_exit@plt>
   152f8:	b	11330 <posix_fadvise64@plt>
   152fc:	cmp	r0, #0
   15300:	bxeq	lr
   15304:	push	{r4, sl, fp, lr}
   15308:	add	fp, sp, #8
   1530c:	sub	sp, sp, #16
   15310:	mov	r4, r1
   15314:	bl	1154c <fileno@plt>
   15318:	mov	r1, #0
   1531c:	mov	r2, #0
   15320:	mov	r3, #0
   15324:	str	r1, [sp]
   15328:	stmib	sp, {r1, r4}
   1532c:	bl	11330 <posix_fadvise64@plt>
   15330:	sub	sp, fp, #8
   15334:	pop	{r4, sl, fp, pc}
   15338:	push	{r4, r5, r6, sl, fp, lr}
   1533c:	add	fp, sp, #16
   15340:	sub	sp, sp, #8
   15344:	mov	r4, r0
   15348:	bl	1154c <fileno@plt>
   1534c:	cmn	r0, #1
   15350:	ble	153c4 <__assert_fail@plt+0x3d88>
   15354:	mov	r0, r4
   15358:	bl	1148c <__freading@plt>
   1535c:	cmp	r0, #0
   15360:	beq	1538c <__assert_fail@plt+0x3d50>
   15364:	mov	r0, r4
   15368:	bl	1154c <fileno@plt>
   1536c:	mov	r1, #1
   15370:	mov	r2, #0
   15374:	mov	r3, #0
   15378:	str	r1, [sp]
   1537c:	bl	11414 <lseek64@plt>
   15380:	and	r0, r0, r1
   15384:	cmn	r0, #1
   15388:	beq	153c4 <__assert_fail@plt+0x3d88>
   1538c:	mov	r0, r4
   15390:	bl	153d4 <__assert_fail@plt+0x3d98>
   15394:	cmp	r0, #0
   15398:	beq	153c4 <__assert_fail@plt+0x3d88>
   1539c:	bl	11510 <__errno_location@plt>
   153a0:	ldr	r6, [r0]
   153a4:	mov	r5, r0
   153a8:	mov	r0, r4
   153ac:	bl	1157c <fclose@plt>
   153b0:	cmp	r6, #0
   153b4:	strne	r6, [r5]
   153b8:	mvnne	r0, #0
   153bc:	sub	sp, fp, #16
   153c0:	pop	{r4, r5, r6, sl, fp, pc}
   153c4:	mov	r0, r4
   153c8:	sub	sp, fp, #16
   153cc:	pop	{r4, r5, r6, sl, fp, lr}
   153d0:	b	1157c <fclose@plt>
   153d4:	push	{r4, sl, fp, lr}
   153d8:	add	fp, sp, #8
   153dc:	sub	sp, sp, #8
   153e0:	mov	r4, r0
   153e4:	cmp	r0, #0
   153e8:	beq	15404 <__assert_fail@plt+0x3dc8>
   153ec:	mov	r0, r4
   153f0:	bl	1148c <__freading@plt>
   153f4:	cmp	r0, #0
   153f8:	ldrbne	r0, [r4, #1]
   153fc:	tstne	r0, #1
   15400:	bne	15414 <__assert_fail@plt+0x3dd8>
   15404:	mov	r0, r4
   15408:	sub	sp, fp, #8
   1540c:	pop	{r4, sl, fp, lr}
   15410:	b	11348 <fflush@plt>
   15414:	mov	r0, #1
   15418:	mov	r2, #0
   1541c:	mov	r3, #0
   15420:	str	r0, [sp]
   15424:	mov	r0, r4
   15428:	bl	15504 <__assert_fail@plt+0x3ec8>
   1542c:	b	15404 <__assert_fail@plt+0x3dc8>
   15430:	push	{r4, r5, r6, r7, fp, lr}
   15434:	add	fp, sp, #16
   15438:	mov	r5, r1
   1543c:	bl	115dc <fopen64@plt>
   15440:	mov	r4, #0
   15444:	cmp	r0, #0
   15448:	beq	154d4 <__assert_fail@plt+0x3e98>
   1544c:	mov	r6, r0
   15450:	bl	1154c <fileno@plt>
   15454:	cmp	r0, #2
   15458:	bhi	154b4 <__assert_fail@plt+0x3e78>
   1545c:	bl	19490 <__assert_fail@plt+0x7e54>
   15460:	cmn	r0, #1
   15464:	ble	154bc <__assert_fail@plt+0x3e80>
   15468:	mov	r7, r0
   1546c:	mov	r0, r6
   15470:	bl	15338 <__assert_fail@plt+0x3cfc>
   15474:	cmp	r0, #0
   15478:	bne	15494 <__assert_fail@plt+0x3e58>
   1547c:	mov	r0, r7
   15480:	mov	r1, r5
   15484:	bl	112dc <fdopen@plt>
   15488:	mov	r4, r0
   1548c:	cmp	r0, #0
   15490:	bne	154d4 <__assert_fail@plt+0x3e98>
   15494:	bl	11510 <__errno_location@plt>
   15498:	ldr	r5, [r0]
   1549c:	mov	r4, r0
   154a0:	mov	r0, r7
   154a4:	bl	11624 <close@plt>
   154a8:	str	r5, [r4]
   154ac:	mov	r4, #0
   154b0:	b	154d4 <__assert_fail@plt+0x3e98>
   154b4:	mov	r4, r6
   154b8:	b	154d4 <__assert_fail@plt+0x3e98>
   154bc:	bl	11510 <__errno_location@plt>
   154c0:	ldr	r7, [r0]
   154c4:	mov	r5, r0
   154c8:	mov	r0, r6
   154cc:	bl	15338 <__assert_fail@plt+0x3cfc>
   154d0:	str	r7, [r5]
   154d4:	mov	r0, r4
   154d8:	pop	{r4, r5, r6, r7, fp, pc}
   154dc:	push	{r4, r5, r6, sl, fp, lr}
   154e0:	add	fp, sp, #16
   154e4:	mov	r4, r0
   154e8:	bl	11510 <__errno_location@plt>
   154ec:	ldr	r6, [r0]
   154f0:	mov	r5, r0
   154f4:	mov	r0, r4
   154f8:	bl	11360 <free@plt>
   154fc:	str	r6, [r5]
   15500:	pop	{r4, r5, r6, sl, fp, pc}
   15504:	push	{r4, r5, r6, r7, fp, lr}
   15508:	add	fp, sp, #16
   1550c:	sub	sp, sp, #8
   15510:	mov	r4, r0
   15514:	ldr	r0, [r0, #4]
   15518:	mov	r5, r3
   1551c:	mov	r6, r2
   15520:	ldr	r1, [r4, #8]
   15524:	cmp	r1, r0
   15528:	bne	15544 <__assert_fail@plt+0x3f08>
   1552c:	ldrd	r0, [r4, #16]
   15530:	cmp	r1, r0
   15534:	bne	15544 <__assert_fail@plt+0x3f08>
   15538:	ldr	r0, [r4, #36]	; 0x24
   1553c:	cmp	r0, #0
   15540:	beq	1555c <__assert_fail@plt+0x3f20>
   15544:	mov	r0, r4
   15548:	mov	r2, r6
   1554c:	mov	r3, r5
   15550:	sub	sp, fp, #16
   15554:	pop	{r4, r5, r6, r7, fp, lr}
   15558:	b	11588 <fseeko64@plt>
   1555c:	ldr	r7, [fp, #8]
   15560:	mov	r0, r4
   15564:	bl	1154c <fileno@plt>
   15568:	mov	r2, r6
   1556c:	mov	r3, r5
   15570:	str	r7, [sp]
   15574:	bl	11414 <lseek64@plt>
   15578:	and	r2, r0, r1
   1557c:	cmn	r2, #1
   15580:	beq	1559c <__assert_fail@plt+0x3f60>
   15584:	strd	r0, [r4, #80]	; 0x50
   15588:	ldr	r0, [r4]
   1558c:	bic	r0, r0, #16
   15590:	str	r0, [r4]
   15594:	mov	r0, #0
   15598:	b	155a0 <__assert_fail@plt+0x3f64>
   1559c:	mvn	r0, #0
   155a0:	sub	sp, fp, #16
   155a4:	pop	{r4, r5, r6, r7, fp, pc}
   155a8:	mov	r1, r0
   155ac:	mov	r0, #0
   155b0:	b	1136c <clock_gettime@plt>
   155b4:	push	{fp, lr}
   155b8:	mov	fp, sp
   155bc:	mov	r1, r0
   155c0:	mov	r0, #0
   155c4:	bl	1136c <clock_gettime@plt>
   155c8:	pop	{fp, pc}
   155cc:	push	{r4, sl, fp, lr}
   155d0:	add	fp, sp, #8
   155d4:	sub	sp, sp, #264	; 0x108
   155d8:	add	r1, sp, #7
   155dc:	movw	r2, #257	; 0x101
   155e0:	bl	18f48 <__assert_fail@plt+0x790c>
   155e4:	mov	r4, #0
   155e8:	cmp	r0, #0
   155ec:	bne	15624 <__assert_fail@plt+0x3fe8>
   155f0:	movw	r1, #53306	; 0xd03a
   155f4:	add	r0, sp, #7
   155f8:	movt	r1, #1
   155fc:	bl	11318 <strcmp@plt>
   15600:	cmp	r0, #0
   15604:	beq	15624 <__assert_fail@plt+0x3fe8>
   15608:	movw	r1, #53308	; 0xd03c
   1560c:	add	r0, sp, #7
   15610:	movt	r1, #1
   15614:	bl	11318 <strcmp@plt>
   15618:	mov	r4, r0
   1561c:	cmp	r0, #0
   15620:	movwne	r4, #1
   15624:	mov	r0, r4
   15628:	sub	sp, fp, #8
   1562c:	pop	{r4, sl, fp, pc}
   15630:	push	{r4, r5, r6, sl, fp, lr}
   15634:	add	fp, sp, #16
   15638:	mov	r5, r0
   1563c:	mov	r0, #0
   15640:	mov	r4, r1
   15644:	add	r6, r2, #19
   15648:	cmp	r1, #0
   1564c:	strb	r0, [r2, #20]
   15650:	blt	1569c <__assert_fail@plt+0x4060>
   15654:	mov	r0, r5
   15658:	mov	r1, r4
   1565c:	mov	r2, #10
   15660:	mov	r3, #0
   15664:	bl	1b61c <__assert_fail@plt+0x9fe0>
   15668:	add	r2, r0, r0, lsl #2
   1566c:	sub	r2, r5, r2, lsl #1
   15670:	add	r2, r2, #48	; 0x30
   15674:	strb	r2, [r6], #-1
   15678:	adds	r2, r5, #9
   1567c:	mov	r5, r0
   15680:	adc	r3, r4, #0
   15684:	rsbs	r2, r2, #18
   15688:	mov	r4, r1
   1568c:	rscs	r2, r3, #0
   15690:	bcc	15654 <__assert_fail@plt+0x4018>
   15694:	add	r6, r6, #1
   15698:	b	156e4 <__assert_fail@plt+0x40a8>
   1569c:	mov	r0, r5
   156a0:	mov	r1, r4
   156a4:	mov	r2, #10
   156a8:	mov	r3, #0
   156ac:	bl	1b61c <__assert_fail@plt+0x9fe0>
   156b0:	add	r2, r0, r0, lsl #2
   156b4:	rsb	r2, r5, r2, lsl #1
   156b8:	add	r2, r2, #48	; 0x30
   156bc:	strb	r2, [r6], #-1
   156c0:	adds	r2, r5, #9
   156c4:	mov	r5, r0
   156c8:	adc	r3, r4, #0
   156cc:	rsbs	r2, r2, #18
   156d0:	mov	r4, r1
   156d4:	rscs	r2, r3, #0
   156d8:	bcc	1569c <__assert_fail@plt+0x4060>
   156dc:	mov	r0, #45	; 0x2d
   156e0:	strb	r0, [r6]
   156e4:	mov	r0, r6
   156e8:	pop	{r4, r5, r6, sl, fp, pc}
   156ec:	push	{r4, r5, fp, lr}
   156f0:	add	fp, sp, #8
   156f4:	mov	r4, r1
   156f8:	mov	r5, r0
   156fc:	bl	114e0 <strlen@plt>
   15700:	mov	r1, r0
   15704:	mov	r0, r5
   15708:	mov	r2, r4
   1570c:	pop	{r4, r5, fp, lr}
   15710:	b	15714 <__assert_fail@plt+0x40d8>
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15718:	add	fp, sp, #28
   1571c:	sub	sp, sp, #28
   15720:	mov	r4, r2
   15724:	mov	r5, r1
   15728:	mov	r7, r0
   1572c:	add	r6, r0, r1
   15730:	bl	11420 <__ctype_get_mb_cur_max@plt>
   15734:	cmp	r0, #1
   15738:	bls	15a28 <__assert_fail@plt+0x43ec>
   1573c:	cmp	r5, #1
   15740:	blt	15a90 <__assert_fail@plt+0x4454>
   15744:	and	r2, r4, #1
   15748:	and	sl, r4, #2
   1574c:	mov	r5, #0
   15750:	add	r8, sp, #12
   15754:	add	r9, sp, #16
   15758:	mov	r4, #0
   1575c:	eor	r3, r2, #1
   15760:	ldrb	r0, [r7]
   15764:	sub	r0, r0, #32
   15768:	cmp	r0, #94	; 0x5e
   1576c:	bhi	15908 <__assert_fail@plt+0x42cc>
   15770:	add	r1, pc, #0
   15774:	ldr	pc, [r1, r0, lsl #2]
   15778:	strdeq	r5, [r1], -r4
   1577c:	strdeq	r5, [r1], -r4
   15780:	strdeq	r5, [r1], -r4
   15784:	strdeq	r5, [r1], -r4
   15788:	andeq	r5, r1, r8, lsl #18
   1578c:	strdeq	r5, [r1], -r4
   15790:	strdeq	r5, [r1], -r4
   15794:	strdeq	r5, [r1], -r4
   15798:	strdeq	r5, [r1], -r4
   1579c:	strdeq	r5, [r1], -r4
   157a0:	strdeq	r5, [r1], -r4
   157a4:	strdeq	r5, [r1], -r4
   157a8:	strdeq	r5, [r1], -r4
   157ac:	strdeq	r5, [r1], -r4
   157b0:	strdeq	r5, [r1], -r4
   157b4:	strdeq	r5, [r1], -r4
   157b8:	strdeq	r5, [r1], -r4
   157bc:	strdeq	r5, [r1], -r4
   157c0:	strdeq	r5, [r1], -r4
   157c4:	strdeq	r5, [r1], -r4
   157c8:	strdeq	r5, [r1], -r4
   157cc:	strdeq	r5, [r1], -r4
   157d0:	strdeq	r5, [r1], -r4
   157d4:	strdeq	r5, [r1], -r4
   157d8:	strdeq	r5, [r1], -r4
   157dc:	strdeq	r5, [r1], -r4
   157e0:	strdeq	r5, [r1], -r4
   157e4:	strdeq	r5, [r1], -r4
   157e8:	strdeq	r5, [r1], -r4
   157ec:	strdeq	r5, [r1], -r4
   157f0:	strdeq	r5, [r1], -r4
   157f4:	strdeq	r5, [r1], -r4
   157f8:	andeq	r5, r1, r8, lsl #18
   157fc:	strdeq	r5, [r1], -r4
   15800:	strdeq	r5, [r1], -r4
   15804:	strdeq	r5, [r1], -r4
   15808:	strdeq	r5, [r1], -r4
   1580c:	strdeq	r5, [r1], -r4
   15810:	strdeq	r5, [r1], -r4
   15814:	strdeq	r5, [r1], -r4
   15818:	strdeq	r5, [r1], -r4
   1581c:	strdeq	r5, [r1], -r4
   15820:	strdeq	r5, [r1], -r4
   15824:	strdeq	r5, [r1], -r4
   15828:	strdeq	r5, [r1], -r4
   1582c:	strdeq	r5, [r1], -r4
   15830:	strdeq	r5, [r1], -r4
   15834:	strdeq	r5, [r1], -r4
   15838:	strdeq	r5, [r1], -r4
   1583c:	strdeq	r5, [r1], -r4
   15840:	strdeq	r5, [r1], -r4
   15844:	strdeq	r5, [r1], -r4
   15848:	strdeq	r5, [r1], -r4
   1584c:	strdeq	r5, [r1], -r4
   15850:	strdeq	r5, [r1], -r4
   15854:	strdeq	r5, [r1], -r4
   15858:	strdeq	r5, [r1], -r4
   1585c:	strdeq	r5, [r1], -r4
   15860:	strdeq	r5, [r1], -r4
   15864:	strdeq	r5, [r1], -r4
   15868:	strdeq	r5, [r1], -r4
   1586c:	strdeq	r5, [r1], -r4
   15870:	strdeq	r5, [r1], -r4
   15874:	strdeq	r5, [r1], -r4
   15878:	andeq	r5, r1, r8, lsl #18
   1587c:	strdeq	r5, [r1], -r4
   15880:	strdeq	r5, [r1], -r4
   15884:	strdeq	r5, [r1], -r4
   15888:	strdeq	r5, [r1], -r4
   1588c:	strdeq	r5, [r1], -r4
   15890:	strdeq	r5, [r1], -r4
   15894:	strdeq	r5, [r1], -r4
   15898:	strdeq	r5, [r1], -r4
   1589c:	strdeq	r5, [r1], -r4
   158a0:	strdeq	r5, [r1], -r4
   158a4:	strdeq	r5, [r1], -r4
   158a8:	strdeq	r5, [r1], -r4
   158ac:	strdeq	r5, [r1], -r4
   158b0:	strdeq	r5, [r1], -r4
   158b4:	strdeq	r5, [r1], -r4
   158b8:	strdeq	r5, [r1], -r4
   158bc:	strdeq	r5, [r1], -r4
   158c0:	strdeq	r5, [r1], -r4
   158c4:	strdeq	r5, [r1], -r4
   158c8:	strdeq	r5, [r1], -r4
   158cc:	strdeq	r5, [r1], -r4
   158d0:	strdeq	r5, [r1], -r4
   158d4:	strdeq	r5, [r1], -r4
   158d8:	strdeq	r5, [r1], -r4
   158dc:	strdeq	r5, [r1], -r4
   158e0:	strdeq	r5, [r1], -r4
   158e4:	strdeq	r5, [r1], -r4
   158e8:	strdeq	r5, [r1], -r4
   158ec:	strdeq	r5, [r1], -r4
   158f0:	strdeq	r5, [r1], -r4
   158f4:	add	r4, r4, #1
   158f8:	add	r7, r7, #1
   158fc:	cmp	r7, r6
   15900:	bcc	15760 <__assert_fail@plt+0x4124>
   15904:	b	15a9c <__assert_fail@plt+0x4460>
   15908:	str	r3, [sp, #4]
   1590c:	str	r2, [sp, #8]
   15910:	str	r5, [sp, #20]
   15914:	str	r5, [sp, #16]
   15918:	sub	r2, r6, r7
   1591c:	mov	r0, r8
   15920:	mov	r1, r7
   15924:	mov	r3, r9
   15928:	mov	r5, r7
   1592c:	bl	1b580 <__assert_fail@plt+0x9f44>
   15930:	cmp	r0, #0
   15934:	beq	15950 <__assert_fail@plt+0x4314>
   15938:	mov	r7, r0
   1593c:	cmn	r0, #2
   15940:	beq	159c0 <__assert_fail@plt+0x4384>
   15944:	cmn	r7, #1
   15948:	bne	15954 <__assert_fail@plt+0x4318>
   1594c:	b	159e0 <__assert_fail@plt+0x43a4>
   15950:	mov	r7, #1
   15954:	ldr	r0, [sp, #12]
   15958:	bl	11354 <wcwidth@plt>
   1595c:	cmp	r0, #0
   15960:	blt	1597c <__assert_fail@plt+0x4340>
   15964:	mvn	r1, #-2147483648	; 0x80000000
   15968:	sub	r1, r1, r4
   1596c:	cmp	r0, r1
   15970:	bgt	159b8 <__assert_fail@plt+0x437c>
   15974:	add	r4, r0, r4
   15978:	b	159a0 <__assert_fail@plt+0x4364>
   1597c:	cmp	sl, #0
   15980:	bne	15a08 <__assert_fail@plt+0x43cc>
   15984:	ldr	r0, [sp, #12]
   15988:	bl	113e4 <iswcntrl@plt>
   1598c:	cmp	r0, #0
   15990:	bne	159a0 <__assert_fail@plt+0x4364>
   15994:	cmn	r4, #-2147483647	; 0x80000001
   15998:	beq	159b8 <__assert_fail@plt+0x437c>
   1599c:	add	r4, r4, #1
   159a0:	mov	r0, r9
   159a4:	add	r7, r5, r7
   159a8:	bl	11390 <mbsinit@plt>
   159ac:	cmp	r0, #0
   159b0:	beq	15918 <__assert_fail@plt+0x42dc>
   159b4:	b	159f8 <__assert_fail@plt+0x43bc>
   159b8:	mov	r0, #7
   159bc:	b	15a0c <__assert_fail@plt+0x43d0>
   159c0:	ldr	r0, [sp, #4]
   159c4:	ldr	r1, [sp, #8]
   159c8:	mov	r7, r6
   159cc:	add	r4, r4, r0
   159d0:	mov	r0, #1
   159d4:	cmp	r1, #0
   159d8:	beq	159f8 <__assert_fail@plt+0x43bc>
   159dc:	b	15a0c <__assert_fail@plt+0x43d0>
   159e0:	ldr	r1, [sp, #8]
   159e4:	mov	r0, #1
   159e8:	cmp	r1, #0
   159ec:	bne	15a0c <__assert_fail@plt+0x43d0>
   159f0:	add	r4, r4, #1
   159f4:	add	r7, r5, #1
   159f8:	ldr	r2, [sp, #8]
   159fc:	ldr	r3, [sp, #4]
   15a00:	mov	r5, #0
   15a04:	b	158fc <__assert_fail@plt+0x42c0>
   15a08:	mov	r0, #1
   15a0c:	ldr	r2, [sp, #8]
   15a10:	ldr	r3, [sp, #4]
   15a14:	mov	r7, r5
   15a18:	cmp	r0, #0
   15a1c:	mov	r5, #0
   15a20:	beq	158fc <__assert_fail@plt+0x42c0>
   15a24:	b	15a80 <__assert_fail@plt+0x4444>
   15a28:	and	r8, r4, #2
   15a2c:	mov	r4, #0
   15a30:	cmp	r7, r6
   15a34:	bcs	15a9c <__assert_fail@plt+0x4460>
   15a38:	ldrb	r5, [r7], #1
   15a3c:	bl	114c8 <__ctype_b_loc@plt>
   15a40:	ldr	r0, [r0]
   15a44:	add	r0, r0, r5, lsl #1
   15a48:	ldrh	r1, [r0]
   15a4c:	tst	r1, #16384	; 0x4000
   15a50:	bne	15a68 <__assert_fail@plt+0x442c>
   15a54:	cmp	r8, #0
   15a58:	bne	15a98 <__assert_fail@plt+0x445c>
   15a5c:	mov	r0, #0
   15a60:	tst	r1, #2
   15a64:	bne	15a78 <__assert_fail@plt+0x443c>
   15a68:	cmn	r4, #-2147483647	; 0x80000001
   15a6c:	mov	r0, #0
   15a70:	mvneq	r0, #0
   15a74:	addne	r4, r4, #1
   15a78:	ands	r0, r0, #7
   15a7c:	beq	15a30 <__assert_fail@plt+0x43f4>
   15a80:	mvn	r4, #0
   15a84:	cmp	r0, #7
   15a88:	mvneq	r4, #-2147483648	; 0x80000000
   15a8c:	b	15a9c <__assert_fail@plt+0x4460>
   15a90:	mov	r4, #0
   15a94:	b	15a9c <__assert_fail@plt+0x4460>
   15a98:	mvn	r4, #0
   15a9c:	mov	r0, r4
   15aa0:	sub	sp, fp, #28
   15aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aa8:	push	{fp, lr}
   15aac:	mov	fp, sp
   15ab0:	sub	sp, sp, #24
   15ab4:	mvn	ip, #0
   15ab8:	str	ip, [sp, #8]
   15abc:	mov	ip, #0
   15ac0:	str	ip, [sp, #4]
   15ac4:	str	ip, [sp]
   15ac8:	ldr	ip, [fp, #12]
   15acc:	str	ip, [sp, #16]
   15ad0:	ldr	ip, [fp, #8]
   15ad4:	str	ip, [sp, #12]
   15ad8:	bl	15ae4 <__assert_fail@plt+0x44a8>
   15adc:	mov	sp, fp
   15ae0:	pop	{fp, pc}
   15ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ae8:	add	fp, sp, #28
   15aec:	sub	sp, sp, #132	; 0x84
   15af0:	sub	sp, sp, #1024	; 0x400
   15af4:	mov	r8, r3
   15af8:	mov	r4, r2
   15afc:	str	r1, [sp, #96]	; 0x60
   15b00:	mov	r9, r0
   15b04:	bl	11510 <__errno_location@plt>
   15b08:	mov	r2, r8
   15b0c:	ldrb	r3, [r4]
   15b10:	str	r0, [sp, #64]	; 0x40
   15b14:	ldr	r0, [r0]
   15b18:	movw	r6, #52164	; 0xcbc4
   15b1c:	ldr	r1, [r2, #8]!
   15b20:	movt	r6, #1
   15b24:	str	r0, [sp, #60]	; 0x3c
   15b28:	cmp	r1, #0
   15b2c:	mov	r7, r1
   15b30:	movweq	r7, #12
   15b34:	cmp	r1, #12
   15b38:	subgt	r7, r1, #12
   15b3c:	ldr	r1, [r2, #32]
   15b40:	cmp	r1, #0
   15b44:	movne	r6, r1
   15b48:	cmp	r3, #0
   15b4c:	beq	15bd4 <__assert_fail@plt+0x4598>
   15b50:	mov	r0, r6
   15b54:	str	r2, [sp, #52]	; 0x34
   15b58:	sub	r2, fp, #48	; 0x30
   15b5c:	mvn	r1, #13
   15b60:	str	r7, [sp, #48]	; 0x30
   15b64:	mov	r7, r8
   15b68:	ldr	r8, [fp, #16]
   15b6c:	movw	lr, #52428	; 0xcccc
   15b70:	sub	sl, r6, #1
   15b74:	mov	r5, #-2147483648	; 0x80000000
   15b78:	mov	ip, r9
   15b7c:	str	r6, [sp, #40]	; 0x28
   15b80:	add	r0, sp, #104	; 0x68
   15b84:	sub	r1, r1, r2
   15b88:	str	r7, [sp, #80]	; 0x50
   15b8c:	movt	lr, #3276	; 0xccc
   15b90:	str	sl, [sp, #24]
   15b94:	add	r0, r0, #1
   15b98:	str	r1, [sp, #32]
   15b9c:	add	r1, r2, #13
   15ba0:	str	r0, [sp, #36]	; 0x24
   15ba4:	add	r0, r7, #12
   15ba8:	str	r1, [sp, #28]
   15bac:	sub	r1, fp, #53	; 0x35
   15bb0:	mov	r7, #0
   15bb4:	str	r0, [sp, #44]	; 0x2c
   15bb8:	add	r0, r2, #14
   15bbc:	str	r0, [sp, #68]	; 0x44
   15bc0:	add	r0, r1, #3
   15bc4:	str	r0, [sp, #56]	; 0x38
   15bc8:	add	r0, r1, #2
   15bcc:	str	r0, [sp, #72]	; 0x48
   15bd0:	b	15c84 <__assert_fail@plt+0x4648>
   15bd4:	mov	r7, #0
   15bd8:	mov	ip, r9
   15bdc:	b	173c4 <__assert_fail@plt+0x5d88>
   15be0:	cmp	ip, #0
   15be4:	beq	15c7c <__assert_fail@plt+0x4640>
   15be8:	mov	r7, #100	; 0x64
   15bec:	mov	r6, #1
   15bf0:	mov	r4, #4
   15bf4:	mla	r3, r3, r7, ip
   15bf8:	mov	r7, #6
   15bfc:	str	r7, [sp, #76]	; 0x4c
   15c00:	movw	lr, #52428	; 0xcccc
   15c04:	movt	lr, #3276	; 0xccc
   15c08:	mov	ip, r1
   15c0c:	b	16854 <__assert_fail@plt+0x5218>
   15c10:	mov	r0, ip
   15c14:	mov	r6, ip
   15c18:	mov	r1, #32
   15c1c:	mov	r2, r5
   15c20:	bl	11534 <memset@plt>
   15c24:	movw	lr, #52428	; 0xcccc
   15c28:	add	ip, r6, r5
   15c2c:	mov	r0, r6
   15c30:	movt	lr, #3276	; 0xccc
   15c34:	add	r0, r5, r4
   15c38:	add	r7, r0, r7
   15c3c:	mov	r4, r9
   15c40:	mov	r5, #-2147483648	; 0x80000000
   15c44:	b	173b4 <__assert_fail@plt+0x5d78>
   15c48:	mov	r0, ip
   15c4c:	mov	r1, #32
   15c50:	mov	r2, r5
   15c54:	mov	r7, ip
   15c58:	bl	11534 <memset@plt>
   15c5c:	ldrb	r1, [r9]
   15c60:	movw	lr, #52428	; 0xcccc
   15c64:	mov	ip, r7
   15c68:	movt	lr, #3276	; 0xccc
   15c6c:	add	ip, r7, r5
   15c70:	mov	r5, #-2147483648	; 0x80000000
   15c74:	strb	r1, [ip], #1
   15c78:	b	173a8 <__assert_fail@plt+0x5d6c>
   15c7c:	mov	r7, #3
   15c80:	b	1707c <__assert_fail@plt+0x5a40>
   15c84:	uxtb	r1, r3
   15c88:	cmp	r1, #37	; 0x25
   15c8c:	bne	15cac <__assert_fail@plt+0x4670>
   15c90:	ldr	r0, [fp, #8]
   15c94:	str	r7, [sp, #100]	; 0x64
   15c98:	mov	r7, #0
   15c9c:	mov	r9, r4
   15ca0:	mov	r6, r0
   15ca4:	mov	r0, #0
   15ca8:	b	15d34 <__assert_fail@plt+0x46f8>
   15cac:	ldr	r0, [sp, #96]	; 0x60
   15cb0:	bic	r1, r8, r8, asr #31
   15cb4:	cmp	r1, #1
   15cb8:	mov	r6, r1
   15cbc:	movls	r6, #1
   15cc0:	sub	r2, r0, r7
   15cc4:	cmp	r6, r2
   15cc8:	bcs	173e8 <__assert_fail@plt+0x5dac>
   15ccc:	cmp	ip, #0
   15cd0:	beq	15df0 <__assert_fail@plt+0x47b4>
   15cd4:	cmp	r1, #2
   15cd8:	bcc	15d14 <__assert_fail@plt+0x46d8>
   15cdc:	sub	r5, r1, #1
   15ce0:	mov	r0, ip
   15ce4:	mov	r1, #32
   15ce8:	mov	r8, r7
   15cec:	mov	r7, ip
   15cf0:	mov	r2, r5
   15cf4:	bl	11534 <memset@plt>
   15cf8:	ldrb	r3, [r4]
   15cfc:	mov	ip, r7
   15d00:	movw	lr, #52428	; 0xcccc
   15d04:	mov	r7, r8
   15d08:	add	ip, ip, r5
   15d0c:	movt	lr, #3276	; 0xccc
   15d10:	mov	r5, #-2147483648	; 0x80000000
   15d14:	strb	r3, [ip], #1
   15d18:	b	15df4 <__assert_fail@plt+0x47b8>
   15d1c:	mov	r7, #1
   15d20:	b	15d30 <__assert_fail@plt+0x46f4>
   15d24:	cmp	r0, #94	; 0x5e
   15d28:	bne	15d74 <__assert_fail@plt+0x4738>
   15d2c:	mov	r6, #1
   15d30:	mov	r0, sl
   15d34:	add	r1, r9, #2
   15d38:	b	15d4c <__assert_fail@plt+0x4710>
   15d3c:	cmp	r0, #48	; 0x30
   15d40:	cmpne	r0, #95	; 0x5f
   15d44:	bne	15d24 <__assert_fail@plt+0x46e8>
   15d48:	add	r1, r1, #1
   15d4c:	add	r9, r9, #1
   15d50:	mov	sl, r0
   15d54:	ldrb	r0, [r9]
   15d58:	cmp	r0, #47	; 0x2f
   15d5c:	bgt	15d3c <__assert_fail@plt+0x4700>
   15d60:	cmp	r0, #43	; 0x2b
   15d64:	cmpne	r0, #45	; 0x2d
   15d68:	beq	15d48 <__assert_fail@plt+0x470c>
   15d6c:	cmp	r0, #35	; 0x23
   15d70:	beq	15d1c <__assert_fail@plt+0x46e0>
   15d74:	sub	r2, r0, #48	; 0x30
   15d78:	cmp	r2, #9
   15d7c:	bhi	15ddc <__assert_fail@plt+0x47a0>
   15d80:	mov	r8, #0
   15d84:	cmn	r8, #1
   15d88:	ble	15d98 <__assert_fail@plt+0x475c>
   15d8c:	cmp	r8, lr
   15d90:	bgt	15da8 <__assert_fail@plt+0x476c>
   15d94:	b	15db0 <__assert_fail@plt+0x4774>
   15d98:	beq	15db0 <__assert_fail@plt+0x4774>
   15d9c:	sdiv	r2, r5, r8
   15da0:	cmp	r2, #10
   15da4:	bge	15db0 <__assert_fail@plt+0x4774>
   15da8:	mvn	r8, #-2147483648	; 0x80000000
   15dac:	b	15dc8 <__assert_fail@plt+0x478c>
   15db0:	add	r2, r8, r8, lsl #2
   15db4:	lsl	r3, r2, #1
   15db8:	uxtab	r0, r3, r0
   15dbc:	sub	r8, r0, #48	; 0x30
   15dc0:	cmp	r8, r2, lsl #1
   15dc4:	mvnvs	r8, #-2147483648	; 0x80000000
   15dc8:	ldrb	r0, [r1], #1
   15dcc:	sub	r2, r0, #48	; 0x30
   15dd0:	cmp	r2, #10
   15dd4:	bcc	15d84 <__assert_fail@plt+0x4748>
   15dd8:	sub	r9, r1, #1
   15ddc:	cmp	r0, #79	; 0x4f
   15de0:	cmpne	r0, #69	; 0x45
   15de4:	bne	15dfc <__assert_fail@plt+0x47c0>
   15de8:	ldrb	r1, [r9, #1]!
   15dec:	b	15e04 <__assert_fail@plt+0x47c8>
   15df0:	mov	ip, #0
   15df4:	add	r7, r6, r7
   15df8:	b	173b4 <__assert_fail@plt+0x5d78>
   15dfc:	mov	r1, r0
   15e00:	mov	r0, #0
   15e04:	sub	r2, r1, #37	; 0x25
   15e08:	str	r6, [sp, #92]	; 0x5c
   15e0c:	cmp	r2, #85	; 0x55
   15e10:	bhi	160a4 <__assert_fail@plt+0x4a68>
   15e14:	str	r1, [sp, #88]	; 0x58
   15e18:	movw	r1, #47741	; 0xba7d
   15e1c:	add	r3, pc, #12
   15e20:	mov	r5, #0
   15e24:	mvn	r6, #0
   15e28:	movt	r1, #1
   15e2c:	ldr	pc, [r3, r2, lsl #2]
   15e30:	strheq	r6, [r1], -r4
   15e34:	andeq	r6, r1, ip, asr #20
   15e38:	andeq	r6, r1, ip, asr #20
   15e3c:	andeq	r6, r1, ip, asr #20
   15e40:	andeq	r6, r1, ip, asr #20
   15e44:	andeq	r6, r1, ip, asr #20
   15e48:	andeq	r6, r1, ip, asr #20
   15e4c:	andeq	r6, r1, ip, asr #20
   15e50:	andeq	r6, r1, ip, asr #20
   15e54:	andeq	r6, r1, ip, asr #20
   15e58:	andeq	r6, r1, ip, asr #20
   15e5c:	andeq	r6, r1, ip, asr #20
   15e60:	andeq	r6, r1, ip, asr #20
   15e64:	andeq	r6, r1, ip, asr #20
   15e68:	andeq	r6, r1, ip, asr #20
   15e6c:	andeq	r6, r1, ip, asr #20
   15e70:	andeq	r6, r1, ip, asr #20
   15e74:	andeq	r6, r1, ip, asr #20
   15e78:	andeq	r6, r1, ip, asr #20
   15e7c:	andeq	r6, r1, ip, asr #20
   15e80:	andeq	r6, r1, ip, asr #20
   15e84:	andeq	r6, r1, r0, lsr #2
   15e88:	andeq	r6, r1, ip, asr #20
   15e8c:	andeq	r6, r1, ip, asr #20
   15e90:	andeq	r6, r1, ip, asr #20
   15e94:	andeq	r6, r1, ip, asr #20
   15e98:	andeq	r6, r1, ip, asr #20
   15e9c:	andeq	r6, r1, ip, asr #20
   15ea0:	andeq	r6, r1, r4, lsl #3
   15ea4:	andeq	r6, r1, r4, lsr #3
   15ea8:	andeq	r6, r1, r4, asr #3
   15eac:	ldrdeq	r6, [r1], -r8
   15eb0:	andeq	r6, r1, ip, asr #20
   15eb4:	andeq	r6, r1, ip, ror #3
   15eb8:	andeq	r5, r1, r8, lsl #31
   15ebc:	andeq	r6, r1, r8, lsl r2
   15ec0:	andeq	r6, r1, r8, lsr #4
   15ec4:	andeq	r6, r1, ip, asr #20
   15ec8:	andeq	r6, r1, ip, asr #20
   15ecc:	andeq	r6, r1, ip, asr #20
   15ed0:	andeq	r6, r1, r0, asr #4
   15ed4:	andeq	r6, r1, r4, asr r2
   15ed8:	andeq	r6, r1, ip, asr #20
   15edc:	andeq	r6, r1, r0, lsl #7
   15ee0:	andeq	r6, r1, ip, asr #20
   15ee4:			; <UNDEFINED> instruction: 0x000163bc
   15ee8:	andeq	r6, r1, r4, lsr #7
   15eec:			; <UNDEFINED> instruction: 0x000163b4
   15ef0:	andeq	r6, r1, r4, ror #8
   15ef4:	andeq	r5, r1, r8, lsl #31
   15ef8:	muleq	r1, r0, r4
   15efc:	ldrdeq	r6, [r1], -ip
   15f00:	strdeq	r6, [r1], -r0
   15f04:	andeq	r6, r1, ip, lsr #10
   15f08:	andeq	r6, r1, ip, asr #20
   15f0c:	andeq	r6, r1, ip, asr #20
   15f10:	andeq	r6, r1, ip, asr #20
   15f14:	andeq	r6, r1, ip, asr #20
   15f18:	andeq	r6, r1, ip, asr #20
   15f1c:	andeq	r6, r1, ip, asr #20
   15f20:	andeq	r6, r1, r0, lsr #11
   15f24:	andeq	r6, r1, r8, lsl #1
   15f28:	andeq	r6, r1, r0, asr #11
   15f2c:	ldrdeq	r6, [r1], -r4
   15f30:	andeq	r6, r1, r8, ror #11
   15f34:	andeq	r6, r1, ip, asr #20
   15f38:	andeq	r5, r1, r8, lsl #31
   15f3c:	andeq	r6, r1, r8, lsl #1
   15f40:	andeq	r6, r1, ip, asr #20
   15f44:	strdeq	r6, [r1], -r0
   15f48:	andeq	r6, r1, ip, lsl #12
   15f4c:	andeq	r6, r1, r0, lsr #12
   15f50:	andeq	r6, r1, ip, lsr r6
   15f54:	andeq	r6, r1, r8, ror #12
   15f58:	andeq	r6, r1, ip, asr #20
   15f5c:	andeq	r6, r1, r4, lsl #7
   15f60:	andeq	r6, r1, r4, asr #13
   15f64:	andeq	r6, r1, r4, ror #18
   15f68:	andeq	r6, r1, ip, ror #13
   15f6c:	muleq	r1, ip, r7
   15f70:	strdeq	r6, [r1], -r8
   15f74:	andeq	r6, r1, ip, asr #20
   15f78:	andeq	r6, r1, r8, lsr #16
   15f7c:	andeq	r6, r1, r4, asr #20
   15f80:	andeq	r6, r1, r8, lsl #23
   15f84:	andeq	r6, r1, r4, asr #2
   15f88:	cmp	r0, #69	; 0x45
   15f8c:	beq	16a4c <__assert_fail@plt+0x5410>
   15f90:	ldr	r2, [sp, #80]	; 0x50
   15f94:	movw	r1, #9363	; 0x2493
   15f98:	movt	r1, #37449	; 0x9249
   15f9c:	ldr	r5, [r2, #28]
   15fa0:	ldr	r6, [r2, #24]
   15fa4:	ldr	lr, [r2, #20]
   15fa8:	movw	r2, #382	; 0x17e
   15fac:	add	r2, r5, r2
   15fb0:	cmp	lr, #0
   15fb4:	sub	r2, r2, r6
   15fb8:	smmla	r4, r2, r1, r2
   15fbc:	asr	r7, r4, #2
   15fc0:	add	r4, r7, r4, lsr #31
   15fc4:	rsb	r4, r4, r4, lsl #3
   15fc8:	sub	r2, r4, r2
   15fcc:	add	r2, r5, r2
   15fd0:	add	r4, r2, #3
   15fd4:	mvn	r2, #99	; 0x63
   15fd8:	movwlt	r2, #300	; 0x12c
   15fdc:	cmn	r4, #1
   15fe0:	add	r2, r2, lr
   15fe4:	ble	16e18 <__assert_fail@plt+0x57dc>
   15fe8:	movw	r7, #365	; 0x16d
   15fec:	tst	r2, #3
   15ff0:	bne	16044 <__assert_fail@plt+0x4a08>
   15ff4:	movw	r7, #34079	; 0x851f
   15ff8:	mov	r1, ip
   15ffc:	mov	ip, #100	; 0x64
   16000:	movt	r7, #20971	; 0x51eb
   16004:	smmul	r7, r2, r7
   16008:	asr	r3, r7, #5
   1600c:	add	r3, r3, r7, lsr #31
   16010:	mls	ip, r3, ip, r2
   16014:	asr	r3, r7, #7
   16018:	add	r3, r3, r7, lsr #31
   1601c:	mov	r7, #400	; 0x190
   16020:	mls	r2, r3, r7, r2
   16024:	movw	r7, #365	; 0x16d
   16028:	cmp	r2, #0
   1602c:	movweq	r7, #366	; 0x16e
   16030:	cmp	ip, #0
   16034:	mov	ip, r1
   16038:	movw	r1, #9363	; 0x2493
   1603c:	movt	r1, #37449	; 0x9249
   16040:	movwne	r7, #366	; 0x16e
   16044:	movw	r3, #382	; 0x17e
   16048:	add	r2, r6, r7
   1604c:	add	r3, r5, r3
   16050:	mov	r5, r1
   16054:	sub	r2, r3, r2
   16058:	smmla	r2, r2, r1, r2
   1605c:	asr	r3, r2, #2
   16060:	add	r2, r3, r2, lsr #31
   16064:	movw	r3, #379	; 0x17b
   16068:	rsb	r2, r2, r2, lsl #3
   1606c:	add	r2, r2, r6
   16070:	sub	r2, r2, r3
   16074:	mov	r3, #1
   16078:	cmn	r2, #1
   1607c:	eor	r3, r3, r2, lsr #31
   16080:	movgt	r4, r2
   16084:	b	16e98 <__assert_fail@plt+0x585c>
   16088:	ldr	r1, [sp, #92]	; 0x5c
   1608c:	mov	r5, #0
   16090:	cmp	r0, #69	; 0x45
   16094:	orr	r1, r7, r1
   16098:	str	r1, [sp, #92]	; 0x5c
   1609c:	beq	16a4c <__assert_fail@plt+0x5410>
   160a0:	b	16964 <__assert_fail@plt+0x5328>
   160a4:	cmp	r1, #0
   160a8:	bne	16a4c <__assert_fail@plt+0x5410>
   160ac:	sub	r3, r9, #1
   160b0:	b	16a50 <__assert_fail@plt+0x5414>
   160b4:	sub	r3, r9, #1
   160b8:	cmp	r3, r4
   160bc:	bne	16a50 <__assert_fail@plt+0x5414>
   160c0:	ldr	r2, [sp, #100]	; 0x64
   160c4:	ldr	r1, [sp, #96]	; 0x60
   160c8:	subs	r0, sl, #45	; 0x2d
   160cc:	bicne	r0, r8, r8, asr #31
   160d0:	cmp	r0, #1
   160d4:	mov	r4, r0
   160d8:	movls	r4, #1
   160dc:	sub	r1, r1, r2
   160e0:	cmp	r4, r1
   160e4:	bcs	173e8 <__assert_fail@plt+0x5dac>
   160e8:	mov	r6, r2
   160ec:	cmp	ip, #0
   160f0:	beq	16ca4 <__assert_fail@plt+0x5668>
   160f4:	mov	r1, #37	; 0x25
   160f8:	cmp	r0, #2
   160fc:	bcc	15c70 <__assert_fail@plt+0x4634>
   16100:	uxtb	r1, sl
   16104:	sub	r5, r0, #1
   16108:	cmp	r1, #48	; 0x30
   1610c:	cmpne	r1, #43	; 0x2b
   16110:	bne	15c48 <__assert_fail@plt+0x460c>
   16114:	mov	r0, ip
   16118:	mov	r1, #48	; 0x30
   1611c:	b	15c50 <__assert_fail@plt+0x4614>
   16120:	mov	r5, #1
   16124:	b	1612c <__assert_fail@plt+0x4af0>
   16128:	add	r5, r5, #1
   1612c:	ldrb	r2, [r9, r5]
   16130:	cmp	r2, #58	; 0x3a
   16134:	beq	16128 <__assert_fail@plt+0x4aec>
   16138:	cmp	r2, #122	; 0x7a
   1613c:	bne	16a4c <__assert_fail@plt+0x5410>
   16140:	add	r9, r9, r5
   16144:	ldr	r3, [sp, #80]	; 0x50
   16148:	ldr	r2, [r3, #32]
   1614c:	cmp	r2, #0
   16150:	blt	16ef8 <__assert_fail@plt+0x58bc>
   16154:	ldr	lr, [r3, #36]	; 0x24
   16158:	mov	r1, ip
   1615c:	cmp	lr, #0
   16160:	blt	17008 <__assert_fail@plt+0x59cc>
   16164:	mov	r2, #0
   16168:	bne	1700c <__assert_fail@plt+0x59d0>
   1616c:	ldr	r2, [sp, #40]	; 0x28
   16170:	ldrb	r2, [r2]
   16174:	sub	r2, r2, #45	; 0x2d
   16178:	clz	r2, r2
   1617c:	lsr	r2, r2, #5
   16180:	b	1700c <__assert_fail@plt+0x59d0>
   16184:	cmp	r0, #0
   16188:	bne	16a4c <__assert_fail@plt+0x5410>
   1618c:	ldr	r1, [sp, #92]	; 0x5c
   16190:	mov	r5, #0
   16194:	orr	r1, r7, r1
   16198:	str	r1, [sp, #92]	; 0x5c
   1619c:	mov	r1, #65	; 0x41
   161a0:	b	1639c <__assert_fail@plt+0x4d60>
   161a4:	cmp	r0, #69	; 0x45
   161a8:	beq	16a4c <__assert_fail@plt+0x5410>
   161ac:	ldr	r1, [sp, #92]	; 0x5c
   161b0:	mov	r5, #0
   161b4:	orr	r1, r7, r1
   161b8:	str	r1, [sp, #92]	; 0x5c
   161bc:	mov	r1, #66	; 0x42
   161c0:	b	1639c <__assert_fail@plt+0x4d60>
   161c4:	cmp	r0, #69	; 0x45
   161c8:	bne	16f00 <__assert_fail@plt+0x58c4>
   161cc:	mov	r5, #0
   161d0:	mov	r1, #67	; 0x43
   161d4:	b	1639c <__assert_fail@plt+0x4d60>
   161d8:	cmp	r0, #0
   161dc:	bne	16a4c <__assert_fail@plt+0x5410>
   161e0:	movw	r1, #53314	; 0xd042
   161e4:	movt	r1, #1
   161e8:	b	163bc <__assert_fail@plt+0x4d80>
   161ec:	cmp	r0, #0
   161f0:	bne	16a4c <__assert_fail@plt+0x5410>
   161f4:	movw	r1, #53323	; 0xd04b
   161f8:	cmp	sl, #0
   161fc:	movt	r1, #1
   16200:	bne	17108 <__assert_fail@plt+0x5acc>
   16204:	cmp	r8, #0
   16208:	bge	17108 <__assert_fail@plt+0x5acc>
   1620c:	mov	sl, #43	; 0x2b
   16210:	mov	r6, #4
   16214:	b	163bc <__assert_fail@plt+0x4d80>
   16218:	cmp	r0, #69	; 0x45
   1621c:	beq	16a4c <__assert_fail@plt+0x5410>
   16220:	ldr	r2, [sp, #52]	; 0x34
   16224:	b	165e0 <__assert_fail@plt+0x4fa4>
   16228:	mov	r1, #2
   1622c:	cmp	r0, #69	; 0x45
   16230:	str	r1, [sp, #76]	; 0x4c
   16234:	beq	16a4c <__assert_fail@plt+0x5410>
   16238:	ldr	r3, [sp, #48]	; 0x30
   1623c:	b	16840 <__assert_fail@plt+0x5204>
   16240:	cmp	r0, #69	; 0x45
   16244:	beq	16a4c <__assert_fail@plt+0x5410>
   16248:	ldr	r2, [sp, #80]	; 0x50
   1624c:	ldr	r3, [r2, #4]
   16250:	b	16634 <__assert_fail@plt+0x4ff8>
   16254:	cmp	r0, #69	; 0x45
   16258:	beq	16a4c <__assert_fail@plt+0x5410>
   1625c:	ldr	r0, [fp, #24]
   16260:	cmp	r8, #1
   16264:	mov	r7, #9
   16268:	mov	r4, #8
   1626c:	str	ip, [sp, #84]	; 0x54
   16270:	movwlt	r8, #9
   16274:	b	16294 <__assert_fail@plt+0x4c58>
   16278:	movw	r1, #26215	; 0x6667
   1627c:	sub	r4, r4, #1
   16280:	sub	r7, r7, #1
   16284:	movt	r1, #26214	; 0x6666
   16288:	smmul	r0, r0, r1
   1628c:	asr	r1, r0, #2
   16290:	add	r0, r1, r0, lsr #31
   16294:	cmp	r8, r7
   16298:	blt	16278 <__assert_fail@plt+0x4c3c>
   1629c:	movw	r1, #26215	; 0x6667
   162a0:	cmp	r7, #2
   162a4:	movt	r1, #26214	; 0x6666
   162a8:	blt	162c8 <__assert_fail@plt+0x4c8c>
   162ac:	smmul	r2, r0, r1
   162b0:	asr	r3, r2, #2
   162b4:	add	r2, r3, r2, lsr #31
   162b8:	add	r2, r2, r2, lsl #2
   162bc:	sub	r2, r0, r2, lsl #1
   162c0:	cmp	r2, #0
   162c4:	beq	16278 <__assert_fail@plt+0x4c3c>
   162c8:	cmp	r7, #1
   162cc:	mov	r2, r4
   162d0:	sub	ip, fp, #48	; 0x30
   162d4:	blt	1630c <__assert_fail@plt+0x4cd0>
   162d8:	smmul	r3, r0, r1
   162dc:	asr	r5, r3, #2
   162e0:	add	r3, r5, r3, lsr #31
   162e4:	add	r5, r3, r3, lsl #2
   162e8:	sub	r0, r0, r5, lsl #1
   162ec:	add	r0, r0, #48	; 0x30
   162f0:	strb	r0, [ip, r2]
   162f4:	sub	r0, r2, #1
   162f8:	add	r2, r2, #1
   162fc:	cmp	r2, #1
   16300:	mov	r2, r0
   16304:	mov	r0, r3
   16308:	bgt	162d8 <__assert_fail@plt+0x4c9c>
   1630c:	ldr	r0, [sp, #96]	; 0x60
   16310:	ldr	r1, [sp, #100]	; 0x64
   16314:	cmp	sl, #0
   16318:	movweq	sl, #48	; 0x30
   1631c:	sub	r6, r0, r1
   16320:	cmp	r7, r6
   16324:	bcs	173e8 <__assert_fail@plt+0x5dac>
   16328:	ldr	r5, [sp, #84]	; 0x54
   1632c:	mov	ip, #0
   16330:	cmp	r5, #0
   16334:	beq	171f8 <__assert_fail@plt+0x5bbc>
   16338:	ldr	r0, [sp, #92]	; 0x5c
   1633c:	tst	r0, #1
   16340:	beq	171d8 <__assert_fail@plt+0x5b9c>
   16344:	cmp	r7, #0
   16348:	beq	171f4 <__assert_fail@plt+0x5bb8>
   1634c:	bl	114a4 <__ctype_toupper_loc@plt>
   16350:	ldr	r5, [sp, #84]	; 0x54
   16354:	movw	lr, #52428	; 0xcccc
   16358:	sub	r3, fp, #48	; 0x30
   1635c:	movt	lr, #3276	; 0xccc
   16360:	ldrb	r1, [r3, r4]
   16364:	ldr	r2, [r0]
   16368:	ldr	r1, [r2, r1, lsl #2]
   1636c:	strb	r1, [r5, r4]
   16370:	sub	r4, r4, #1
   16374:	cmn	r4, #1
   16378:	bne	16360 <__assert_fail@plt+0x4d24>
   1637c:	b	171f4 <__assert_fail@plt+0x5bb8>
   16380:	mov	r5, #1
   16384:	ldr	r2, [sp, #92]	; 0x5c
   16388:	eor	r1, r7, #1
   1638c:	orr	r5, r7, r5
   16390:	and	r2, r2, r1
   16394:	mov	r1, #112	; 0x70
   16398:	str	r2, [sp, #92]	; 0x5c
   1639c:	str	r1, [sp, #88]	; 0x58
   163a0:	b	16964 <__assert_fail@plt+0x5328>
   163a4:	cmp	r0, #69	; 0x45
   163a8:	beq	16a4c <__assert_fail@plt+0x5410>
   163ac:	ldr	r2, [sp, #80]	; 0x50
   163b0:	b	165e0 <__assert_fail@plt+0x4fa4>
   163b4:	movw	r1, #53332	; 0xd054
   163b8:	movt	r1, #1
   163bc:	ldr	r0, [sp, #92]	; 0x5c
   163c0:	str	ip, [sp, #84]	; 0x54
   163c4:	mov	r2, r1
   163c8:	mvn	r1, #0
   163cc:	mov	r7, #0
   163d0:	and	r0, r0, #1
   163d4:	str	r0, [sp, #88]	; 0x58
   163d8:	stm	sp, {r0, sl}
   163dc:	ldr	r0, [fp, #20]
   163e0:	str	r6, [sp, #8]
   163e4:	str	r2, [sp, #92]	; 0x5c
   163e8:	ldr	r3, [sp, #80]	; 0x50
   163ec:	str	r0, [sp, #12]
   163f0:	ldr	r0, [fp, #24]
   163f4:	str	r0, [sp, #16]
   163f8:	mov	r0, #0
   163fc:	bl	15ae4 <__assert_fail@plt+0x44a8>
   16400:	mov	r4, r0
   16404:	subs	r0, sl, #45	; 0x2d
   16408:	ldr	r1, [sp, #96]	; 0x60
   1640c:	ldr	r2, [sp, #100]	; 0x64
   16410:	movne	r0, r8
   16414:	cmp	r8, #0
   16418:	mov	r5, r4
   1641c:	movwlt	r0, #0
   16420:	cmp	r0, r4
   16424:	movhi	r5, r0
   16428:	sub	r8, r1, r2
   1642c:	cmp	r5, r8
   16430:	bcs	173e8 <__assert_fail@plt+0x5dac>
   16434:	ldr	ip, [sp, #84]	; 0x54
   16438:	cmp	ip, #0
   1643c:	beq	170e4 <__assert_fail@plt+0x5aa8>
   16440:	cmp	r0, r4
   16444:	bls	16cb0 <__assert_fail@plt+0x5674>
   16448:	cmp	sl, #48	; 0x30
   1644c:	sub	r7, r0, r4
   16450:	cmpne	sl, #43	; 0x2b
   16454:	bne	17094 <__assert_fail@plt+0x5a58>
   16458:	mov	r0, ip
   1645c:	mov	r1, #48	; 0x30
   16460:	b	1709c <__assert_fail@plt+0x5a60>
   16464:	cmp	r0, #69	; 0x45
   16468:	beq	16a4c <__assert_fail@plt+0x5410>
   1646c:	ldr	r3, [sp, #80]	; 0x50
   16470:	ldr	r2, [r3, #24]
   16474:	ldr	r3, [r3, #28]
   16478:	add	r3, r3, #7
   1647c:	sub	r2, r3, r2
   16480:	movw	r3, #9363	; 0x2493
   16484:	movt	r3, #37449	; 0x9249
   16488:	smmla	r2, r2, r3, r2
   1648c:	b	164d0 <__assert_fail@plt+0x4e94>
   16490:	cmp	r0, #69	; 0x45
   16494:	beq	16a4c <__assert_fail@plt+0x5410>
   16498:	ldr	r3, [sp, #80]	; 0x50
   1649c:	movw	r7, #9363	; 0x2493
   164a0:	movt	r7, #37449	; 0x9249
   164a4:	ldr	r2, [r3, #24]
   164a8:	ldr	r3, [r3, #28]
   164ac:	add	r2, r2, #6
   164b0:	smmla	r5, r2, r7, r2
   164b4:	asr	r4, r5, #2
   164b8:	add	r5, r4, r5, lsr #31
   164bc:	rsb	r5, r5, r5, lsl #3
   164c0:	sub	r2, r5, r2
   164c4:	add	r2, r3, r2
   164c8:	add	r2, r2, #7
   164cc:	smmla	r2, r2, r7, r2
   164d0:	asr	r3, r2, #2
   164d4:	add	r3, r3, r2, lsr #31
   164d8:	b	16634 <__assert_fail@plt+0x4ff8>
   164dc:	cmp	r0, #79	; 0x4f
   164e0:	beq	16a4c <__assert_fail@plt+0x5410>
   164e4:	mov	r5, #0
   164e8:	mov	r1, #88	; 0x58
   164ec:	b	1639c <__assert_fail@plt+0x4d60>
   164f0:	cmp	r0, #69	; 0x45
   164f4:	beq	17088 <__assert_fail@plt+0x5a4c>
   164f8:	cmp	r0, #79	; 0x4f
   164fc:	beq	16a4c <__assert_fail@plt+0x5410>
   16500:	ldr	r2, [sp, #80]	; 0x50
   16504:	movw	r7, #63636	; 0xf894
   16508:	mov	r1, #4
   1650c:	movt	r7, #65535	; 0xffff
   16510:	ldr	r3, [r2, #20]
   16514:	mov	r2, #0
   16518:	cmp	r3, r7
   1651c:	movw	r7, #1900	; 0x76c
   16520:	movwlt	r2, #1
   16524:	add	r3, r3, r7
   16528:	b	16f50 <__assert_fail@plt+0x5914>
   1652c:	ldr	r0, [sp, #40]	; 0x28
   16530:	subs	r5, sl, #45	; 0x2d
   16534:	mov	r6, ip
   16538:	bicne	r5, r8, r8, asr #31
   1653c:	bl	114e0 <strlen@plt>
   16540:	mov	r8, r0
   16544:	cmp	r5, r0
   16548:	mov	r4, r0
   1654c:	ldr	r0, [sp, #96]	; 0x60
   16550:	ldr	r1, [sp, #100]	; 0x64
   16554:	movhi	r4, r5
   16558:	sub	r0, r0, r1
   1655c:	cmp	r4, r0
   16560:	bcs	173e8 <__assert_fail@plt+0x5dac>
   16564:	cmp	r6, #0
   16568:	beq	16ff8 <__assert_fail@plt+0x59bc>
   1656c:	movw	lr, #52428	; 0xcccc
   16570:	mov	r0, r6
   16574:	cmp	r5, r8
   16578:	mov	ip, r6
   1657c:	movt	lr, #3276	; 0xccc
   16580:	bls	17260 <__assert_fail@plt+0x5c24>
   16584:	uxtb	r1, sl
   16588:	sub	r2, r5, r8
   1658c:	cmp	r1, #48	; 0x30
   16590:	cmpne	r1, #43	; 0x2b
   16594:	bne	17244 <__assert_fail@plt+0x5c08>
   16598:	mov	r1, #48	; 0x30
   1659c:	b	17248 <__assert_fail@plt+0x5c0c>
   165a0:	cmp	r0, #0
   165a4:	bne	16a4c <__assert_fail@plt+0x5410>
   165a8:	ldr	r1, [sp, #92]	; 0x5c
   165ac:	mov	r5, #0
   165b0:	orr	r1, r7, r1
   165b4:	str	r1, [sp, #92]	; 0x5c
   165b8:	mov	r1, #97	; 0x61
   165bc:	b	1639c <__assert_fail@plt+0x4d60>
   165c0:	cmp	r0, #79	; 0x4f
   165c4:	beq	16a4c <__assert_fail@plt+0x5410>
   165c8:	mov	r5, #0
   165cc:	mov	r1, #99	; 0x63
   165d0:	b	1639c <__assert_fail@plt+0x4d60>
   165d4:	cmp	r0, #69	; 0x45
   165d8:	beq	16a4c <__assert_fail@plt+0x5410>
   165dc:	ldr	r2, [sp, #44]	; 0x2c
   165e0:	ldr	r3, [r2]
   165e4:	b	16634 <__assert_fail@plt+0x4ff8>
   165e8:	ldr	r2, [sp, #44]	; 0x2c
   165ec:	b	16610 <__assert_fail@plt+0x4fd4>
   165f0:	cmp	r0, #69	; 0x45
   165f4:	beq	16a4c <__assert_fail@plt+0x5410>
   165f8:	ldr	r2, [sp, #80]	; 0x50
   165fc:	mov	r1, #3
   16600:	str	r1, [sp, #76]	; 0x4c
   16604:	ldr	r3, [r2, #28]
   16608:	b	16654 <__assert_fail@plt+0x5018>
   1660c:	ldr	r2, [sp, #52]	; 0x34
   16610:	cmp	r0, #69	; 0x45
   16614:	beq	16a4c <__assert_fail@plt+0x5410>
   16618:	ldr	r3, [r2]
   1661c:	b	1662c <__assert_fail@plt+0x4ff0>
   16620:	ldr	r3, [sp, #48]	; 0x30
   16624:	cmp	r0, #69	; 0x45
   16628:	beq	16a4c <__assert_fail@plt+0x5410>
   1662c:	cmp	sl, #0
   16630:	movweq	sl, #95	; 0x5f
   16634:	mov	r1, #2
   16638:	b	1683c <__assert_fail@plt+0x5200>
   1663c:	cmp	r0, #69	; 0x45
   16640:	beq	16a4c <__assert_fail@plt+0x5410>
   16644:	ldr	r2, [sp, #80]	; 0x50
   16648:	mov	r1, #2
   1664c:	str	r1, [sp, #76]	; 0x4c
   16650:	ldr	r3, [r2, #16]
   16654:	mov	r2, #0
   16658:	cmn	r3, #1
   1665c:	add	r3, r3, #1
   16660:	movwlt	r2, #1
   16664:	b	16844 <__assert_fail@plt+0x5208>
   16668:	ldr	r2, [sp, #100]	; 0x64
   1666c:	ldr	r1, [sp, #96]	; 0x60
   16670:	subs	r0, sl, #45	; 0x2d
   16674:	bicne	r0, r8, r8, asr #31
   16678:	cmp	r0, #1
   1667c:	mov	r4, r0
   16680:	movls	r4, #1
   16684:	sub	r1, r1, r2
   16688:	cmp	r4, r1
   1668c:	bcs	173e8 <__assert_fail@plt+0x5dac>
   16690:	mov	r6, r2
   16694:	cmp	ip, #0
   16698:	beq	16ca4 <__assert_fail@plt+0x5668>
   1669c:	cmp	r0, #2
   166a0:	bcc	17370 <__assert_fail@plt+0x5d34>
   166a4:	uxtb	r1, sl
   166a8:	sub	r5, r0, #1
   166ac:	cmp	r1, #48	; 0x30
   166b0:	cmpne	r1, #43	; 0x2b
   166b4:	bne	1734c <__assert_fail@plt+0x5d10>
   166b8:	mov	r0, ip
   166bc:	mov	r1, #48	; 0x30
   166c0:	b	17354 <__assert_fail@plt+0x5d18>
   166c4:	ldr	r2, [sp, #80]	; 0x50
   166c8:	mov	r3, #11
   166cc:	mov	r1, #1
   166d0:	str	r1, [sp, #76]	; 0x4c
   166d4:	ldr	r2, [r2, #16]
   166d8:	mul	r2, r2, r3
   166dc:	mov	r3, #1
   166e0:	add	r3, r3, r2, asr #5
   166e4:	mov	r2, #0
   166e8:	b	16844 <__assert_fail@plt+0x5208>
   166ec:	ldr	r6, [sp, #80]	; 0x50
   166f0:	str	ip, [sp, #84]	; 0x54
   166f4:	add	r1, sp, #104	; 0x68
   166f8:	mov	ip, r1
   166fc:	ldm	r6!, {r2, r3, r4, r5, r7}
   16700:	stmia	ip!, {r2, r3, r4, r5, r7}
   16704:	ldm	r6, {r0, r2, r3, r4, r5, r7}
   16708:	stm	ip, {r0, r2, r3, r4, r5, r7}
   1670c:	mvn	r0, #0
   16710:	str	r0, [sp, #132]	; 0x84
   16714:	ldr	r0, [fp, #20]
   16718:	bl	19360 <__assert_fail@plt+0x7d24>
   1671c:	ldr	r1, [sp, #132]	; 0x84
   16720:	cmp	r1, #0
   16724:	blt	17404 <__assert_fail@plt+0x5dc8>
   16728:	ldr	r1, [sp, #28]
   1672c:	ldr	r4, [sp, #100]	; 0x64
   16730:	lsr	r2, r0, #31
   16734:	mov	r3, r0
   16738:	movw	r7, #26215	; 0x6667
   1673c:	cmp	r0, #0
   16740:	movt	r7, #26214	; 0x6666
   16744:	smmul	r7, r3, r7
   16748:	asr	r5, r7, #2
   1674c:	add	r7, r5, r7, lsr #31
   16750:	add	r5, r7, r7, lsl #2
   16754:	sub	r5, r3, r5, lsl #1
   16758:	add	r3, r3, #9
   1675c:	rsblt	r5, r5, #0
   16760:	cmp	r3, #18
   16764:	mov	r3, r7
   16768:	add	r5, r5, #48	; 0x30
   1676c:	strb	r5, [r1], #-1
   16770:	bhi	16738 <__assert_fail@plt+0x50fc>
   16774:	ldr	ip, [sp, #84]	; 0x54
   16778:	cmp	r8, #0
   1677c:	movw	lr, #52428	; 0xcccc
   16780:	add	r7, r1, #1
   16784:	mov	r6, #0
   16788:	mov	r3, r9
   1678c:	movwlt	r8, #1
   16790:	cmp	sl, #0
   16794:	movt	lr, #3276	; 0xccc
   16798:	b	168dc <__assert_fail@plt+0x52a0>
   1679c:	ldr	r2, [sp, #100]	; 0x64
   167a0:	ldr	r1, [sp, #96]	; 0x60
   167a4:	subs	r0, sl, #45	; 0x2d
   167a8:	bicne	r0, r8, r8, asr #31
   167ac:	cmp	r0, #1
   167b0:	mov	r4, r0
   167b4:	movls	r4, #1
   167b8:	sub	r1, r1, r2
   167bc:	cmp	r4, r1
   167c0:	bcs	173e8 <__assert_fail@plt+0x5dac>
   167c4:	mov	r6, r2
   167c8:	cmp	ip, #0
   167cc:	beq	16ca4 <__assert_fail@plt+0x5668>
   167d0:	cmp	r0, #2
   167d4:	bcc	1739c <__assert_fail@plt+0x5d60>
   167d8:	uxtb	r1, sl
   167dc:	sub	r5, r0, #1
   167e0:	cmp	r1, #48	; 0x30
   167e4:	cmpne	r1, #43	; 0x2b
   167e8:	bne	17378 <__assert_fail@plt+0x5d3c>
   167ec:	mov	r0, ip
   167f0:	mov	r1, #48	; 0x30
   167f4:	b	17380 <__assert_fail@plt+0x5d44>
   167f8:	ldr	r2, [sp, #80]	; 0x50
   167fc:	movw	r3, #9363	; 0x2493
   16800:	movt	r3, #37449	; 0x9249
   16804:	ldr	r2, [r2, #24]
   16808:	add	r2, r2, #6
   1680c:	smmla	r3, r2, r3, r2
   16810:	asr	r7, r3, #2
   16814:	add	r3, r7, r3, lsr #31
   16818:	rsb	r3, r3, r3, lsl #3
   1681c:	sub	r2, r2, r3
   16820:	add	r3, r2, #1
   16824:	b	16838 <__assert_fail@plt+0x51fc>
   16828:	cmp	r0, #69	; 0x45
   1682c:	beq	16a4c <__assert_fail@plt+0x5410>
   16830:	ldr	r2, [sp, #80]	; 0x50
   16834:	ldr	r3, [r2, #24]
   16838:	mov	r1, #1
   1683c:	str	r1, [sp, #76]	; 0x4c
   16840:	lsr	r2, r3, #31
   16844:	cmp	r2, #0
   16848:	mov	r4, #0
   1684c:	mov	r6, #0
   16850:	movwne	r2, #1
   16854:	cmp	r0, #79	; 0x4f
   16858:	moveq	r5, #0
   1685c:	cmpeq	r2, #0
   16860:	beq	16964 <__assert_fail@plt+0x5328>
   16864:	ldr	r7, [sp, #68]	; 0x44
   16868:	cmp	r2, #0
   1686c:	rsbne	r3, r3, #0
   16870:	tst	r4, #1
   16874:	asr	r4, r4, #1
   16878:	movne	r0, #58	; 0x3a
   1687c:	strbne	r0, [r7, #-1]!
   16880:	movw	r0, #52429	; 0xcccd
   16884:	cmp	r3, #9
   16888:	movt	r0, #52428	; 0xcccc
   1688c:	umull	r0, r1, r3, r0
   16890:	lsr	r0, r1, #3
   16894:	add	r1, r0, r0, lsl #2
   16898:	sub	r1, r3, r1, lsl #1
   1689c:	mov	r3, r0
   168a0:	orr	r1, r1, #48	; 0x30
   168a4:	strb	r1, [r7, #-1]!
   168a8:	bhi	16870 <__assert_fail@plt+0x5234>
   168ac:	cmp	r4, #0
   168b0:	mov	r3, r0
   168b4:	bne	16870 <__assert_fail@plt+0x5234>
   168b8:	ldr	r0, [sp, #76]	; 0x4c
   168bc:	cmp	r8, #0
   168c0:	ldr	r4, [sp, #100]	; 0x64
   168c4:	mov	r3, r9
   168c8:	movge	r0, r8
   168cc:	cmp	r6, #0
   168d0:	movwne	r6, #43	; 0x2b
   168d4:	cmp	sl, #0
   168d8:	mov	r8, r0
   168dc:	movweq	sl, #48	; 0x30
   168e0:	ldr	r1, [sp, #68]	; 0x44
   168e4:	cmp	r2, #0
   168e8:	mov	r0, r8
   168ec:	str	r3, [sp, #100]	; 0x64
   168f0:	movwne	r6, #45	; 0x2d
   168f4:	cmp	r6, #0
   168f8:	subne	r0, r0, #1
   168fc:	sub	r9, r1, r7
   16900:	sub	r5, r0, r9
   16904:	mov	r0, r6
   16908:	cmp	r5, #1
   1690c:	str	r0, [sp, #88]	; 0x58
   16910:	movwlt	r5, #0
   16914:	subs	r6, sl, #45	; 0x2d
   16918:	moveq	r5, r6
   1691c:	cmp	r0, #0
   16920:	beq	16a38 <__assert_fail@plt+0x53fc>
   16924:	cmp	sl, #95	; 0x5f
   16928:	bne	16cc4 <__assert_fail@plt+0x5688>
   1692c:	cmp	ip, #0
   16930:	beq	16cb8 <__assert_fail@plt+0x567c>
   16934:	mov	r0, ip
   16938:	mov	r1, #32
   1693c:	mov	r2, r5
   16940:	str	r8, [sp, #76]	; 0x4c
   16944:	mov	r8, ip
   16948:	bl	11534 <memset@plt>
   1694c:	mov	ip, r8
   16950:	ldr	r8, [sp, #76]	; 0x4c
   16954:	movw	lr, #52428	; 0xcccc
   16958:	movt	lr, #3276	; 0xccc
   1695c:	add	ip, ip, r5
   16960:	b	16cbc <__assert_fail@plt+0x5680>
   16964:	movw	r2, #9504	; 0x2520
   16968:	cmp	r0, #0
   1696c:	ldr	r3, [sp, #80]	; 0x50
   16970:	mov	r1, #1024	; 0x400
   16974:	str	ip, [sp, #84]	; 0x54
   16978:	strh	r2, [fp, #-53]	; 0xffffffcb
   1697c:	ldr	r2, [sp, #72]	; 0x48
   16980:	strbne	r0, [fp, #-51]	; 0xffffffcd
   16984:	mov	r0, #0
   16988:	ldrne	r2, [sp, #56]	; 0x38
   1698c:	strb	r0, [r2, #1]
   16990:	ldr	r0, [sp, #88]	; 0x58
   16994:	strb	r0, [r2]
   16998:	add	r0, sp, #104	; 0x68
   1699c:	sub	r2, fp, #53	; 0x35
   169a0:	bl	11480 <strftime@plt>
   169a4:	cmp	r0, #0
   169a8:	beq	16a18 <__assert_fail@plt+0x53dc>
   169ac:	subs	r7, sl, #45	; 0x2d
   169b0:	ldr	r1, [sp, #100]	; 0x64
   169b4:	movw	lr, #52428	; 0xcccc
   169b8:	movne	r7, r8
   169bc:	cmp	r8, #0
   169c0:	sub	r8, r0, #1
   169c4:	ldr	r0, [sp, #96]	; 0x60
   169c8:	movt	lr, #3276	; 0xccc
   169cc:	movwlt	r7, #0
   169d0:	mov	r6, r8
   169d4:	cmp	r7, r8
   169d8:	movhi	r6, r7
   169dc:	sub	r0, r0, r1
   169e0:	cmp	r6, r0
   169e4:	ldr	r0, [sp, #84]	; 0x54
   169e8:	bcs	173e8 <__assert_fail@plt+0x5dac>
   169ec:	cmp	r0, #0
   169f0:	beq	16a30 <__assert_fail@plt+0x53f4>
   169f4:	cmp	r7, r8
   169f8:	mov	ip, r0
   169fc:	bls	16bbc <__assert_fail@plt+0x5580>
   16a00:	cmp	sl, #48	; 0x30
   16a04:	sub	r2, r7, r8
   16a08:	cmpne	sl, #43	; 0x2b
   16a0c:	bne	16b9c <__assert_fail@plt+0x5560>
   16a10:	mov	r1, #48	; 0x30
   16a14:	b	16ba0 <__assert_fail@plt+0x5564>
   16a18:	ldr	ip, [sp, #84]	; 0x54
   16a1c:	ldr	r7, [sp, #100]	; 0x64
   16a20:	movw	lr, #52428	; 0xcccc
   16a24:	mov	r5, #-2147483648	; 0x80000000
   16a28:	movt	lr, #3276	; 0xccc
   16a2c:	b	173b0 <__assert_fail@plt+0x5d74>
   16a30:	mov	ip, #0
   16a34:	b	16c94 <__assert_fail@plt+0x5658>
   16a38:	mov	r5, #-2147483648	; 0x80000000
   16a3c:	mov	r1, r4
   16a40:	b	16cf4 <__assert_fail@plt+0x56b8>
   16a44:	cmp	r0, #79	; 0x4f
   16a48:	bne	16f58 <__assert_fail@plt+0x591c>
   16a4c:	mov	r3, r9
   16a50:	subs	r5, sl, #45	; 0x2d
   16a54:	sub	r0, r3, r4
   16a58:	ldr	r1, [sp, #100]	; 0x64
   16a5c:	bicne	r5, r8, r8, asr #31
   16a60:	add	r8, r0, #1
   16a64:	ldr	r0, [sp, #96]	; 0x60
   16a68:	cmp	r5, r8
   16a6c:	mov	r6, r8
   16a70:	movhi	r6, r5
   16a74:	sub	r0, r0, r1
   16a78:	cmp	r6, r0
   16a7c:	bcs	173e8 <__assert_fail@plt+0x5dac>
   16a80:	cmp	ip, #0
   16a84:	beq	16ab8 <__assert_fail@plt+0x547c>
   16a88:	mov	r7, r4
   16a8c:	cmp	r5, r8
   16a90:	mov	r9, ip
   16a94:	bls	16af0 <__assert_fail@plt+0x54b4>
   16a98:	uxtb	r0, sl
   16a9c:	sub	r9, r5, r8
   16aa0:	cmp	r0, #48	; 0x30
   16aa4:	cmpne	r0, #43	; 0x2b
   16aa8:	bne	16ac8 <__assert_fail@plt+0x548c>
   16aac:	mov	r0, ip
   16ab0:	mov	r1, #48	; 0x30
   16ab4:	b	16ad0 <__assert_fail@plt+0x5494>
   16ab8:	ldr	r7, [sp, #100]	; 0x64
   16abc:	mov	ip, #0
   16ac0:	mov	r5, #-2147483648	; 0x80000000
   16ac4:	b	16b7c <__assert_fail@plt+0x5540>
   16ac8:	mov	r0, ip
   16acc:	mov	r1, #32
   16ad0:	mov	r2, r9
   16ad4:	mov	r7, ip
   16ad8:	mov	sl, r3
   16adc:	bl	11534 <memset@plt>
   16ae0:	mov	ip, r7
   16ae4:	mov	r3, sl
   16ae8:	mov	r7, r4
   16aec:	add	r9, ip, r9
   16af0:	ldr	r0, [sp, #92]	; 0x5c
   16af4:	ldr	sl, [sp, #100]	; 0x64
   16af8:	tst	r0, #1
   16afc:	beq	16b50 <__assert_fail@plt+0x5514>
   16b00:	cmp	r8, #0
   16b04:	beq	16b68 <__assert_fail@plt+0x552c>
   16b08:	add	r0, r3, #1
   16b0c:	sub	r4, r7, r3
   16b10:	str	r3, [sp, #92]	; 0x5c
   16b14:	sub	r0, r0, r7
   16b18:	cmp	r5, r0
   16b1c:	movhi	r0, r5
   16b20:	add	r0, ip, r0
   16b24:	sub	r5, r0, #1
   16b28:	bl	114a4 <__ctype_toupper_loc@plt>
   16b2c:	ldr	r3, [sp, #92]	; 0x5c
   16b30:	ldrb	r1, [r7, -r4]
   16b34:	ldr	r2, [r0]
   16b38:	add	r4, r4, #1
   16b3c:	cmp	r4, #1
   16b40:	ldr	r1, [r2, r1, lsl #2]
   16b44:	strb	r1, [r5], #-1
   16b48:	bne	16b30 <__assert_fail@plt+0x54f4>
   16b4c:	b	16b68 <__assert_fail@plt+0x552c>
   16b50:	mov	r0, r9
   16b54:	mov	r1, r7
   16b58:	mov	r2, r8
   16b5c:	mov	r4, r3
   16b60:	bl	11384 <memcpy@plt>
   16b64:	mov	r3, r4
   16b68:	movw	lr, #52428	; 0xcccc
   16b6c:	add	ip, r9, r8
   16b70:	mov	r7, sl
   16b74:	mov	r5, #-2147483648	; 0x80000000
   16b78:	movt	lr, #3276	; 0xccc
   16b7c:	add	r7, r6, r7
   16b80:	mov	r4, r3
   16b84:	b	173b4 <__assert_fail@plt+0x5d78>
   16b88:	cmp	r0, #69	; 0x45
   16b8c:	bne	16f64 <__assert_fail@plt+0x5928>
   16b90:	mov	r5, #0
   16b94:	mov	r1, #121	; 0x79
   16b98:	b	1639c <__assert_fail@plt+0x4d60>
   16b9c:	mov	r1, #32
   16ba0:	mov	sl, r2
   16ba4:	mov	r4, r0
   16ba8:	bl	11534 <memset@plt>
   16bac:	movw	lr, #52428	; 0xcccc
   16bb0:	add	ip, r4, sl
   16bb4:	mov	r0, r4
   16bb8:	movt	lr, #3276	; 0xccc
   16bbc:	tst	r5, #1
   16bc0:	beq	16c14 <__assert_fail@plt+0x55d8>
   16bc4:	cmp	r8, #0
   16bc8:	add	r4, sp, #104	; 0x68
   16bcc:	beq	16c90 <__assert_fail@plt+0x5654>
   16bd0:	cmp	r7, r8
   16bd4:	movls	r7, r8
   16bd8:	add	r0, r0, r7
   16bdc:	mov	r7, ip
   16be0:	sub	r5, r0, #1
   16be4:	bl	11498 <__ctype_tolower_loc@plt>
   16be8:	movw	lr, #52428	; 0xcccc
   16bec:	mov	ip, r7
   16bf0:	mov	r1, r8
   16bf4:	movt	lr, #3276	; 0xccc
   16bf8:	ldrb	r2, [r4, r1]
   16bfc:	ldr	r3, [r0]
   16c00:	subs	r1, r1, #1
   16c04:	ldr	r2, [r3, r2, lsl #2]
   16c08:	strb	r2, [r5], #-1
   16c0c:	bne	16bf8 <__assert_fail@plt+0x55bc>
   16c10:	b	16c90 <__assert_fail@plt+0x5654>
   16c14:	ldr	r1, [sp, #92]	; 0x5c
   16c18:	add	r4, sp, #104	; 0x68
   16c1c:	tst	r1, #1
   16c20:	beq	16c70 <__assert_fail@plt+0x5634>
   16c24:	cmp	r8, #0
   16c28:	beq	16c90 <__assert_fail@plt+0x5654>
   16c2c:	cmp	r7, r8
   16c30:	movls	r7, r8
   16c34:	add	r0, r0, r7
   16c38:	mov	r7, ip
   16c3c:	sub	r5, r0, #1
   16c40:	bl	114a4 <__ctype_toupper_loc@plt>
   16c44:	movw	lr, #52428	; 0xcccc
   16c48:	mov	ip, r7
   16c4c:	mov	r1, r8
   16c50:	movt	lr, #3276	; 0xccc
   16c54:	ldrb	r2, [r4, r1]
   16c58:	ldr	r3, [r0]
   16c5c:	subs	r1, r1, #1
   16c60:	ldr	r2, [r3, r2, lsl #2]
   16c64:	strb	r2, [r5], #-1
   16c68:	bne	16c54 <__assert_fail@plt+0x5618>
   16c6c:	b	16c90 <__assert_fail@plt+0x5654>
   16c70:	ldr	r1, [sp, #36]	; 0x24
   16c74:	mov	r0, ip
   16c78:	mov	r2, r8
   16c7c:	mov	r4, ip
   16c80:	bl	11384 <memcpy@plt>
   16c84:	movw	lr, #52428	; 0xcccc
   16c88:	mov	ip, r4
   16c8c:	movt	lr, #3276	; 0xccc
   16c90:	add	ip, ip, r8
   16c94:	ldr	r7, [sp, #100]	; 0x64
   16c98:	mov	r5, #-2147483648	; 0x80000000
   16c9c:	add	r7, r6, r7
   16ca0:	b	173b0 <__assert_fail@plt+0x5d74>
   16ca4:	mov	ip, #0
   16ca8:	mov	r5, #-2147483648	; 0x80000000
   16cac:	b	173a8 <__assert_fail@plt+0x5d6c>
   16cb0:	ldr	r0, [sp, #88]	; 0x58
   16cb4:	b	170b0 <__assert_fail@plt+0x5a74>
   16cb8:	mov	ip, #0
   16cbc:	sub	r8, r8, r5
   16cc0:	add	r4, r5, r4
   16cc4:	ldr	r0, [sp, #96]	; 0x60
   16cc8:	mov	r5, #-2147483648	; 0x80000000
   16ccc:	sub	r0, r0, r4
   16cd0:	cmp	r0, #2
   16cd4:	bcc	173e8 <__assert_fail@plt+0x5dac>
   16cd8:	cmp	ip, #0
   16cdc:	mov	r1, r4
   16ce0:	sub	r8, r8, #1
   16ce4:	ldrne	r0, [sp, #88]	; 0x58
   16ce8:	add	r1, r1, #1
   16cec:	strbne	r0, [ip], #1
   16cf0:	moveq	ip, #0
   16cf4:	ldr	r0, [sp, #96]	; 0x60
   16cf8:	cmp	sl, #45	; 0x2d
   16cfc:	bicne	r6, r8, r8, asr #31
   16d00:	mov	r8, r9
   16d04:	cmp	r6, r9
   16d08:	movhi	r8, r6
   16d0c:	sub	r0, r0, r1
   16d10:	cmp	r8, r0
   16d14:	bcs	173e8 <__assert_fail@plt+0x5dac>
   16d18:	mov	r4, r1
   16d1c:	cmp	ip, #0
   16d20:	beq	16d4c <__assert_fail@plt+0x5710>
   16d24:	cmp	r6, r9
   16d28:	mov	r3, ip
   16d2c:	bls	16d7c <__assert_fail@plt+0x5740>
   16d30:	cmp	sl, #48	; 0x30
   16d34:	sub	r5, r6, r9
   16d38:	cmpne	sl, #43	; 0x2b
   16d3c:	bne	16d58 <__assert_fail@plt+0x571c>
   16d40:	mov	r0, ip
   16d44:	mov	r1, #48	; 0x30
   16d48:	b	16d60 <__assert_fail@plt+0x5724>
   16d4c:	mov	ip, #0
   16d50:	mov	r7, r4
   16d54:	b	16e0c <__assert_fail@plt+0x57d0>
   16d58:	mov	r0, ip
   16d5c:	mov	r1, #32
   16d60:	mov	r2, r5
   16d64:	mov	sl, ip
   16d68:	bl	11534 <memset@plt>
   16d6c:	movw	lr, #52428	; 0xcccc
   16d70:	add	r3, sl, r5
   16d74:	mov	ip, sl
   16d78:	movt	lr, #3276	; 0xccc
   16d7c:	ldr	r0, [sp, #92]	; 0x5c
   16d80:	mov	sl, r4
   16d84:	tst	r0, #1
   16d88:	beq	16de0 <__assert_fail@plt+0x57a4>
   16d8c:	cmp	r9, #0
   16d90:	beq	16e00 <__assert_fail@plt+0x57c4>
   16d94:	ldr	r0, [sp, #32]
   16d98:	cmp	r6, r9
   16d9c:	sub	r5, r7, #1
   16da0:	movls	r6, r9
   16da4:	add	r4, r0, r7
   16da8:	add	r0, ip, r6
   16dac:	mov	r7, r3
   16db0:	sub	r6, r0, #1
   16db4:	bl	114a4 <__ctype_toupper_loc@plt>
   16db8:	movw	lr, #52428	; 0xcccc
   16dbc:	mov	r3, r7
   16dc0:	movt	lr, #3276	; 0xccc
   16dc4:	ldrb	r1, [r5, -r4]
   16dc8:	ldr	r2, [r0]
   16dcc:	adds	r4, r4, #1
   16dd0:	ldr	r1, [r2, r1, lsl #2]
   16dd4:	strb	r1, [r6], #-1
   16dd8:	bne	16dc4 <__assert_fail@plt+0x5788>
   16ddc:	b	16e00 <__assert_fail@plt+0x57c4>
   16de0:	mov	r0, r3
   16de4:	mov	r1, r7
   16de8:	mov	r2, r9
   16dec:	mov	r4, r3
   16df0:	bl	11384 <memcpy@plt>
   16df4:	movw	lr, #52428	; 0xcccc
   16df8:	mov	r3, r4
   16dfc:	movt	lr, #3276	; 0xccc
   16e00:	add	ip, r3, r9
   16e04:	mov	r7, sl
   16e08:	mov	r5, #-2147483648	; 0x80000000
   16e0c:	ldr	r4, [sp, #100]	; 0x64
   16e10:	add	r7, r8, r7
   16e14:	b	173b4 <__assert_fail@plt+0x5d78>
   16e18:	sub	r2, r2, #1
   16e1c:	movw	r4, #365	; 0x16d
   16e20:	tst	r2, #3
   16e24:	bne	16e68 <__assert_fail@plt+0x582c>
   16e28:	movw	r4, #34079	; 0x851f
   16e2c:	movt	r4, #20971	; 0x51eb
   16e30:	smmul	r4, r2, r4
   16e34:	asr	r7, r4, #5
   16e38:	add	r3, r7, r4, lsr #31
   16e3c:	mov	r7, #100	; 0x64
   16e40:	mls	r3, r3, r7, r2
   16e44:	asr	r7, r4, #7
   16e48:	add	r4, r7, r4, lsr #31
   16e4c:	mov	r7, #400	; 0x190
   16e50:	mls	r2, r4, r7, r2
   16e54:	movw	r4, #365	; 0x16d
   16e58:	cmp	r2, #0
   16e5c:	movweq	r4, #366	; 0x16e
   16e60:	cmp	r3, #0
   16e64:	movwne	r4, #366	; 0x16e
   16e68:	add	r2, r4, r5
   16e6c:	movw	r4, #382	; 0x17e
   16e70:	mov	r5, r1
   16e74:	sub	r3, r4, r6
   16e78:	add	r2, r3, r2
   16e7c:	smmla	r2, r2, r1, r2
   16e80:	asr	r4, r2, #2
   16e84:	add	r2, r4, r2, lsr #31
   16e88:	rsb	r2, r2, r2, lsl #3
   16e8c:	sub	r2, r2, r3
   16e90:	mvn	r3, #0
   16e94:	add	r4, r2, #3
   16e98:	ldr	r1, [sp, #88]	; 0x58
   16e9c:	cmp	r1, #71	; 0x47
   16ea0:	beq	16fa4 <__assert_fail@plt+0x5968>
   16ea4:	cmp	r1, #103	; 0x67
   16ea8:	bne	16fd4 <__assert_fail@plt+0x5998>
   16eac:	movw	r2, #34079	; 0x851f
   16eb0:	mov	r1, #2
   16eb4:	movt	r2, #20971	; 0x51eb
   16eb8:	str	r1, [sp, #76]	; 0x4c
   16ebc:	smmul	r7, lr, r2
   16ec0:	asr	r5, r7, #5
   16ec4:	add	r7, r5, r7, lsr #31
   16ec8:	mov	r5, #100	; 0x64
   16ecc:	mls	r7, r7, r5, lr
   16ed0:	add	r7, r3, r7
   16ed4:	smmul	r2, r7, r2
   16ed8:	asr	r4, r2, #5
   16edc:	add	r2, r4, r2, lsr #31
   16ee0:	mls	r7, r2, r5, r7
   16ee4:	mov	r2, #0
   16ee8:	cmn	r7, #1
   16eec:	ble	17114 <__assert_fail@plt+0x5ad8>
   16ef0:	mov	r3, r7
   16ef4:	b	1712c <__assert_fail@plt+0x5af0>
   16ef8:	ldr	r7, [sp, #100]	; 0x64
   16efc:	b	15c3c <__assert_fail@plt+0x4600>
   16f00:	ldr	r2, [sp, #80]	; 0x50
   16f04:	movw	r5, #63636	; 0xf894
   16f08:	mov	r3, #0
   16f0c:	mvn	r4, #98	; 0x62
   16f10:	mov	r1, #2
   16f14:	movt	r5, #65535	; 0xffff
   16f18:	ldr	r7, [r2, #20]
   16f1c:	mov	r2, #0
   16f20:	cmp	r7, r5
   16f24:	movwge	r3, #1
   16f28:	cmp	r7, r5
   16f2c:	and	r3, r3, r7, lsr #31
   16f30:	movwlt	r2, #1
   16f34:	smlabb	r3, r3, r4, r7
   16f38:	movw	r4, #34079	; 0x851f
   16f3c:	movt	r4, #20971	; 0x51eb
   16f40:	smmul	r3, r3, r4
   16f44:	asr	r4, r3, #5
   16f48:	add	r3, r4, r3, lsr #31
   16f4c:	add	r3, r3, #19
   16f50:	str	r1, [sp, #76]	; 0x4c
   16f54:	b	17134 <__assert_fail@plt+0x5af8>
   16f58:	mov	r5, #0
   16f5c:	mov	r1, #120	; 0x78
   16f60:	b	1639c <__assert_fail@plt+0x4d60>
   16f64:	ldr	r2, [sp, #80]	; 0x50
   16f68:	mov	r1, #2
   16f6c:	str	r1, [sp, #76]	; 0x4c
   16f70:	ldr	r7, [r2, #20]
   16f74:	movw	r2, #34079	; 0x851f
   16f78:	movt	r2, #20971	; 0x51eb
   16f7c:	smmul	r2, r7, r2
   16f80:	asr	r3, r2, #5
   16f84:	add	r2, r3, r2, lsr #31
   16f88:	mov	r3, #100	; 0x64
   16f8c:	mls	r5, r2, r3, r7
   16f90:	mov	r2, #0
   16f94:	cmn	r5, #1
   16f98:	ble	17184 <__assert_fail@plt+0x5b48>
   16f9c:	mov	r3, r5
   16fa0:	b	17134 <__assert_fail@plt+0x5af8>
   16fa4:	movw	r2, #63636	; 0xf894
   16fa8:	mov	r1, #4
   16fac:	movt	r2, #65535	; 0xffff
   16fb0:	str	r1, [sp, #76]	; 0x4c
   16fb4:	sub	r7, r2, r3
   16fb8:	mov	r2, #0
   16fbc:	add	r3, lr, r3
   16fc0:	cmp	lr, r7
   16fc4:	movw	r7, #1900	; 0x76c
   16fc8:	movwlt	r2, #1
   16fcc:	add	r3, r3, r7
   16fd0:	b	1712c <__assert_fail@plt+0x5af0>
   16fd4:	smmla	r2, r4, r5, r4
   16fd8:	movw	lr, #52428	; 0xcccc
   16fdc:	mov	r1, #2
   16fe0:	asr	r3, r2, #2
   16fe4:	str	r1, [sp, #76]	; 0x4c
   16fe8:	movt	lr, #3276	; 0xccc
   16fec:	add	r2, r3, r2, lsr #31
   16ff0:	add	r3, r2, #1
   16ff4:	b	16840 <__assert_fail@plt+0x5204>
   16ff8:	movw	lr, #52428	; 0xcccc
   16ffc:	mov	ip, #0
   17000:	movt	lr, #3276	; 0xccc
   17004:	b	17340 <__assert_fail@plt+0x5d04>
   17008:	mov	r2, #1
   1700c:	cmp	r5, #3
   17010:	bhi	1719c <__assert_fail@plt+0x5b60>
   17014:	movw	ip, #34953	; 0x8889
   17018:	movt	ip, #34952	; 0x8888
   1701c:	smmla	r4, lr, ip, lr
   17020:	asr	r3, r4, #5
   17024:	add	r4, r3, r4, lsr #31
   17028:	smmla	r3, r4, ip, r4
   1702c:	asr	r7, r3, #5
   17030:	add	r3, r7, r3, lsr #31
   17034:	rsb	r3, r3, r3, lsl #4
   17038:	sub	ip, r4, r3, lsl #2
   1703c:	movw	r3, #46021	; 0xb3c5
   17040:	rsb	r4, r4, r4, lsl #4
   17044:	movt	r3, #37282	; 0x91a2
   17048:	smmla	r3, lr, r3, lr
   1704c:	asr	r7, r3, #11
   17050:	add	r3, r7, r3, lsr #31
   17054:	sub	r7, lr, r4, lsl #2
   17058:	add	r4, pc, #0
   1705c:	ldr	pc, [r4, r5, lsl #2]
   17060:	andeq	r7, r1, r0, ror r0
   17064:	andeq	r5, r1, r8, ror #23
   17068:			; <UNDEFINED> instruction: 0x000171b8
   1706c:			; <UNDEFINED> instruction: 0x000171b0
   17070:	mov	r7, #100	; 0x64
   17074:	mla	r3, r3, r7, ip
   17078:	mov	r7, #5
   1707c:	mov	r6, #1
   17080:	mov	r4, #0
   17084:	b	15bfc <__assert_fail@plt+0x45c0>
   17088:	mov	r5, #0
   1708c:	mov	r1, #89	; 0x59
   17090:	b	1639c <__assert_fail@plt+0x4d60>
   17094:	mov	r0, ip
   17098:	mov	r1, #32
   1709c:	mov	r2, r7
   170a0:	bl	11534 <memset@plt>
   170a4:	ldr	ip, [sp, #84]	; 0x54
   170a8:	ldr	r0, [sp, #88]	; 0x58
   170ac:	add	ip, ip, r7
   170b0:	stm	sp, {r0, sl}
   170b4:	ldr	r0, [fp, #20]
   170b8:	mov	r1, r8
   170bc:	str	r6, [sp, #8]
   170c0:	mov	r6, ip
   170c4:	ldr	r2, [sp, #92]	; 0x5c
   170c8:	ldr	r3, [sp, #80]	; 0x50
   170cc:	str	r0, [sp, #12]
   170d0:	ldr	r0, [fp, #24]
   170d4:	str	r0, [sp, #16]
   170d8:	mov	r0, ip
   170dc:	bl	15ae4 <__assert_fail@plt+0x44a8>
   170e0:	add	r7, r6, r4
   170e4:	ldr	r0, [sp, #100]	; 0x64
   170e8:	movw	lr, #52428	; 0xcccc
   170ec:	mov	r4, r9
   170f0:	mov	ip, r7
   170f4:	movt	lr, #3276	; 0xccc
   170f8:	add	r0, r5, r0
   170fc:	mov	r5, #-2147483648	; 0x80000000
   17100:	mov	r7, r0
   17104:	b	173b4 <__assert_fail@plt+0x5d78>
   17108:	sub	r0, r8, #6
   1710c:	bic	r6, r0, r0, asr #31
   17110:	b	163bc <__assert_fail@plt+0x4d80>
   17114:	movw	r5, #63636	; 0xf894
   17118:	movt	r5, #65535	; 0xffff
   1711c:	sub	r5, r5, r3
   17120:	add	r3, r7, #100	; 0x64
   17124:	cmp	lr, r5
   17128:	rsblt	r3, r7, #0
   1712c:	movw	lr, #52428	; 0xcccc
   17130:	movt	lr, #3276	; 0xccc
   17134:	ldr	r7, [fp, #12]
   17138:	cmp	sl, #0
   1713c:	mov	r4, #0
   17140:	mov	r6, #0
   17144:	moveq	sl, r7
   17148:	cmp	sl, #43	; 0x2b
   1714c:	bne	16854 <__assert_fail@plt+0x5218>
   17150:	ldr	r6, [sp, #76]	; 0x4c
   17154:	mov	r5, #0
   17158:	movw	r7, #9999	; 0x270f
   1715c:	mov	r1, ip
   17160:	mov	ip, #0
   17164:	cmp	r6, r8
   17168:	movwlt	r5, #1
   1716c:	cmp	r6, #2
   17170:	movweq	r7, #99	; 0x63
   17174:	cmp	r7, r3
   17178:	movwcc	ip, #1
   1717c:	orr	r6, r5, ip
   17180:	b	15c08 <__assert_fail@plt+0x45cc>
   17184:	movw	r4, #63636	; 0xf894
   17188:	add	r3, r5, #100	; 0x64
   1718c:	movt	r4, #65535	; 0xffff
   17190:	cmp	r7, r4
   17194:	rsblt	r3, r5, #0
   17198:	b	17134 <__assert_fail@plt+0x5af8>
   1719c:	movw	lr, #52428	; 0xcccc
   171a0:	mov	r3, r9
   171a4:	mov	ip, r1
   171a8:	movt	lr, #3276	; 0xccc
   171ac:	b	16a50 <__assert_fail@plt+0x5414>
   171b0:	cmp	r7, #0
   171b4:	beq	15be0 <__assert_fail@plt+0x45a4>
   171b8:	movw	r5, #10000	; 0x2710
   171bc:	mov	r6, #1
   171c0:	mov	r4, #20
   171c4:	mla	r3, r3, r5, r7
   171c8:	mov	r7, #100	; 0x64
   171cc:	mla	r3, ip, r7, r3
   171d0:	mov	r7, #9
   171d4:	b	15bfc <__assert_fail@plt+0x45c0>
   171d8:	sub	r1, fp, #48	; 0x30
   171dc:	mov	r0, r5
   171e0:	mov	r2, r7
   171e4:	bl	11384 <memcpy@plt>
   171e8:	ldr	r5, [sp, #84]	; 0x54
   171ec:	movw	lr, #52428	; 0xcccc
   171f0:	movt	lr, #3276	; 0xccc
   171f4:	add	ip, r5, r7
   171f8:	cmp	sl, #45	; 0x2d
   171fc:	ldr	r4, [sp, #100]	; 0x64
   17200:	mov	r5, #0
   17204:	subne	r0, r8, r7
   17208:	bicne	r5, r0, r0, asr #31
   1720c:	sub	r0, r6, r7
   17210:	cmp	r5, r0
   17214:	bcs	173e8 <__assert_fail@plt+0x5dac>
   17218:	cmp	ip, #0
   1721c:	cmpne	r5, #0
   17220:	beq	15c34 <__assert_fail@plt+0x45f8>
   17224:	uxtb	r0, sl
   17228:	cmp	r0, #48	; 0x30
   1722c:	cmpne	r0, #43	; 0x2b
   17230:	bne	15c10 <__assert_fail@plt+0x45d4>
   17234:	mov	r0, ip
   17238:	mov	r6, ip
   1723c:	mov	r1, #48	; 0x30
   17240:	b	15c1c <__assert_fail@plt+0x45e0>
   17244:	mov	r1, #32
   17248:	mov	sl, r2
   1724c:	bl	11534 <memset@plt>
   17250:	movw	lr, #52428	; 0xcccc
   17254:	mov	r0, r6
   17258:	add	ip, r6, sl
   1725c:	movt	lr, #3276	; 0xccc
   17260:	tst	r7, #1
   17264:	beq	172b8 <__assert_fail@plt+0x5c7c>
   17268:	ldr	sl, [sp, #24]
   1726c:	cmp	r8, #0
   17270:	beq	1733c <__assert_fail@plt+0x5d00>
   17274:	cmp	r5, r8
   17278:	mov	r6, ip
   1727c:	movls	r5, r8
   17280:	add	r0, r0, r5
   17284:	sub	r5, r0, #1
   17288:	bl	11498 <__ctype_tolower_loc@plt>
   1728c:	movw	lr, #52428	; 0xcccc
   17290:	mov	ip, r6
   17294:	mov	r1, r8
   17298:	movt	lr, #3276	; 0xccc
   1729c:	ldrb	r2, [sl, r1]
   172a0:	ldr	r3, [r0]
   172a4:	subs	r1, r1, #1
   172a8:	ldr	r2, [r3, r2, lsl #2]
   172ac:	strb	r2, [r5], #-1
   172b0:	bne	1729c <__assert_fail@plt+0x5c60>
   172b4:	b	1733c <__assert_fail@plt+0x5d00>
   172b8:	ldr	r2, [sp, #92]	; 0x5c
   172bc:	eor	r1, r7, #1
   172c0:	and	r1, r2, r1
   172c4:	tst	r1, #1
   172c8:	beq	1731c <__assert_fail@plt+0x5ce0>
   172cc:	ldr	sl, [sp, #24]
   172d0:	cmp	r8, #0
   172d4:	beq	1733c <__assert_fail@plt+0x5d00>
   172d8:	cmp	r5, r8
   172dc:	mov	r6, ip
   172e0:	movls	r5, r8
   172e4:	add	r0, r0, r5
   172e8:	sub	r5, r0, #1
   172ec:	bl	114a4 <__ctype_toupper_loc@plt>
   172f0:	movw	lr, #52428	; 0xcccc
   172f4:	mov	ip, r6
   172f8:	mov	r1, r8
   172fc:	movt	lr, #3276	; 0xccc
   17300:	ldrb	r2, [sl, r1]
   17304:	ldr	r3, [r0]
   17308:	subs	r1, r1, #1
   1730c:	ldr	r2, [r3, r2, lsl #2]
   17310:	strb	r2, [r5], #-1
   17314:	bne	17300 <__assert_fail@plt+0x5cc4>
   17318:	b	1733c <__assert_fail@plt+0x5d00>
   1731c:	ldr	r1, [sp, #40]	; 0x28
   17320:	mov	r0, ip
   17324:	mov	r2, r8
   17328:	mov	r5, ip
   1732c:	bl	11384 <memcpy@plt>
   17330:	movw	lr, #52428	; 0xcccc
   17334:	mov	ip, r5
   17338:	movt	lr, #3276	; 0xccc
   1733c:	add	ip, ip, r8
   17340:	ldr	r7, [sp, #100]	; 0x64
   17344:	add	r7, r4, r7
   17348:	b	15c3c <__assert_fail@plt+0x4600>
   1734c:	mov	r0, ip
   17350:	mov	r1, #32
   17354:	mov	r2, r5
   17358:	mov	r7, ip
   1735c:	bl	11534 <memset@plt>
   17360:	movw	lr, #52428	; 0xcccc
   17364:	mov	ip, r7
   17368:	movt	lr, #3276	; 0xccc
   1736c:	add	ip, r7, r5
   17370:	mov	r0, #10
   17374:	b	173a0 <__assert_fail@plt+0x5d64>
   17378:	mov	r0, ip
   1737c:	mov	r1, #32
   17380:	mov	r2, r5
   17384:	mov	r7, ip
   17388:	bl	11534 <memset@plt>
   1738c:	movw	lr, #52428	; 0xcccc
   17390:	mov	ip, r7
   17394:	movt	lr, #3276	; 0xccc
   17398:	add	ip, r7, r5
   1739c:	mov	r0, #9
   173a0:	mov	r5, #-2147483648	; 0x80000000
   173a4:	strb	r0, [ip], #1
   173a8:	mov	r7, r6
   173ac:	add	r7, r4, r6
   173b0:	mov	r4, r9
   173b4:	ldrb	r3, [r4, #1]!
   173b8:	mvn	r8, #0
   173bc:	cmp	r3, #0
   173c0:	bne	15c84 <__assert_fail@plt+0x4648>
   173c4:	ldr	r0, [sp, #96]	; 0x60
   173c8:	ldr	r1, [sp, #60]	; 0x3c
   173cc:	cmp	r0, #0
   173d0:	cmpne	ip, #0
   173d4:	movne	r0, #0
   173d8:	strbne	r0, [ip]
   173dc:	ldr	r0, [sp, #64]	; 0x40
   173e0:	str	r1, [r0]
   173e4:	b	173f8 <__assert_fail@plt+0x5dbc>
   173e8:	mov	r0, #34	; 0x22
   173ec:	ldr	r1, [sp, #64]	; 0x40
   173f0:	mov	r7, #0
   173f4:	str	r0, [r1]
   173f8:	mov	r0, r7
   173fc:	sub	sp, fp, #28
   17400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17404:	mov	r0, #75	; 0x4b
   17408:	b	173ec <__assert_fail@plt+0x5db0>
   1740c:	push	{r4, r5, fp, lr}
   17410:	add	fp, sp, #8
   17414:	cmp	r0, #0
   17418:	beq	174ac <__assert_fail@plt+0x5e70>
   1741c:	mov	r1, #47	; 0x2f
   17420:	mov	r4, r0
   17424:	bl	115ac <strrchr@plt>
   17428:	cmp	r0, #0
   1742c:	mov	r5, r4
   17430:	addne	r5, r0, #1
   17434:	sub	r0, r5, r4
   17438:	cmp	r0, #7
   1743c:	blt	17490 <__assert_fail@plt+0x5e54>
   17440:	movw	r1, #53397	; 0xd095
   17444:	sub	r0, r5, #7
   17448:	mov	r2, #7
   1744c:	movt	r1, #1
   17450:	bl	1160c <strncmp@plt>
   17454:	cmp	r0, #0
   17458:	bne	17490 <__assert_fail@plt+0x5e54>
   1745c:	movw	r1, #53405	; 0xd09d
   17460:	mov	r0, r5
   17464:	mov	r2, #3
   17468:	movt	r1, #1
   1746c:	bl	1160c <strncmp@plt>
   17470:	cmp	r0, #0
   17474:	beq	17480 <__assert_fail@plt+0x5e44>
   17478:	mov	r4, r5
   1747c:	b	17490 <__assert_fail@plt+0x5e54>
   17480:	movw	r0, #57792	; 0xe1c0
   17484:	add	r4, r5, #3
   17488:	movt	r0, #2
   1748c:	str	r4, [r0]
   17490:	movw	r0, #57796	; 0xe1c4
   17494:	movt	r0, #2
   17498:	str	r4, [r0]
   1749c:	movw	r0, #58024	; 0xe2a8
   174a0:	movt	r0, #2
   174a4:	str	r4, [r0]
   174a8:	pop	{r4, r5, fp, pc}
   174ac:	movw	r0, #57808	; 0xe1d0
   174b0:	movt	r0, #2
   174b4:	ldr	r1, [r0]
   174b8:	movw	r0, #53341	; 0xd05d
   174bc:	movt	r0, #1
   174c0:	bl	11600 <fputs@plt>
   174c4:	bl	11618 <abort@plt>
   174c8:	push	{r4, r5, r6, sl, fp, lr}
   174cc:	add	fp, sp, #16
   174d0:	mov	r4, r0
   174d4:	movw	r0, #58032	; 0xe2b0
   174d8:	movt	r0, #2
   174dc:	cmp	r4, #0
   174e0:	moveq	r4, r0
   174e4:	bl	11510 <__errno_location@plt>
   174e8:	ldr	r6, [r0]
   174ec:	mov	r5, r0
   174f0:	mov	r0, r4
   174f4:	mov	r1, #48	; 0x30
   174f8:	bl	19ca8 <__assert_fail@plt+0x866c>
   174fc:	str	r6, [r5]
   17500:	pop	{r4, r5, r6, sl, fp, pc}
   17504:	movw	r1, #58032	; 0xe2b0
   17508:	cmp	r0, #0
   1750c:	movt	r1, #2
   17510:	movne	r1, r0
   17514:	ldr	r0, [r1]
   17518:	bx	lr
   1751c:	movw	r2, #58032	; 0xe2b0
   17520:	cmp	r0, #0
   17524:	movt	r2, #2
   17528:	movne	r2, r0
   1752c:	str	r1, [r2]
   17530:	bx	lr
   17534:	movw	r3, #58032	; 0xe2b0
   17538:	cmp	r0, #0
   1753c:	movt	r3, #2
   17540:	movne	r3, r0
   17544:	ubfx	r0, r1, #5, #3
   17548:	and	r1, r1, #31
   1754c:	add	r0, r3, r0, lsl #2
   17550:	ldr	r3, [r0, #8]
   17554:	eor	r2, r2, r3, lsr r1
   17558:	and	r2, r2, #1
   1755c:	eor	r2, r3, r2, lsl r1
   17560:	str	r2, [r0, #8]
   17564:	mov	r0, #1
   17568:	and	r0, r0, r3, lsr r1
   1756c:	bx	lr
   17570:	movw	r2, #58032	; 0xe2b0
   17574:	cmp	r0, #0
   17578:	movt	r2, #2
   1757c:	movne	r2, r0
   17580:	ldr	r0, [r2, #4]
   17584:	str	r1, [r2, #4]
   17588:	bx	lr
   1758c:	movw	r3, #58032	; 0xe2b0
   17590:	cmp	r0, #0
   17594:	movt	r3, #2
   17598:	movne	r3, r0
   1759c:	cmp	r1, #0
   175a0:	mov	r0, #10
   175a4:	cmpne	r2, #0
   175a8:	str	r0, [r3]
   175ac:	bne	175bc <__assert_fail@plt+0x5f80>
   175b0:	push	{fp, lr}
   175b4:	mov	fp, sp
   175b8:	bl	11618 <abort@plt>
   175bc:	str	r1, [r3, #40]	; 0x28
   175c0:	str	r2, [r3, #44]	; 0x2c
   175c4:	bx	lr
   175c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175cc:	add	fp, sp, #28
   175d0:	sub	sp, sp, #20
   175d4:	mov	r7, r0
   175d8:	ldr	r0, [fp, #8]
   175dc:	movw	r5, #58032	; 0xe2b0
   175e0:	mov	r8, r3
   175e4:	mov	r9, r2
   175e8:	mov	sl, r1
   175ec:	movt	r5, #2
   175f0:	cmp	r0, #0
   175f4:	movne	r5, r0
   175f8:	bl	11510 <__errno_location@plt>
   175fc:	mov	r4, r0
   17600:	ldm	r5, {r0, r1}
   17604:	ldr	r2, [r5, #40]	; 0x28
   17608:	ldr	r3, [r5, #44]	; 0x2c
   1760c:	add	r5, r5, #8
   17610:	ldr	r6, [r4]
   17614:	stm	sp, {r0, r1, r5}
   17618:	str	r2, [sp, #12]
   1761c:	str	r3, [sp, #16]
   17620:	mov	r0, r7
   17624:	mov	r1, sl
   17628:	mov	r2, r9
   1762c:	mov	r3, r8
   17630:	bl	17640 <__assert_fail@plt+0x6004>
   17634:	str	r6, [r4]
   17638:	sub	sp, fp, #28
   1763c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17644:	add	fp, sp, #28
   17648:	sub	sp, sp, #156	; 0x9c
   1764c:	str	r0, [fp, #-56]	; 0xffffffc8
   17650:	ldr	r0, [fp, #12]
   17654:	mov	r4, r1
   17658:	str	r3, [sp, #80]	; 0x50
   1765c:	str	r2, [fp, #-84]	; 0xffffffac
   17660:	and	r1, r0, #4
   17664:	str	r1, [sp, #24]
   17668:	and	r1, r0, #1
   1766c:	str	r1, [sp, #28]
   17670:	ubfx	r7, r0, #1, #1
   17674:	bl	11420 <__ctype_get_mb_cur_max@plt>
   17678:	str	r0, [sp, #32]
   1767c:	ldr	r0, [fp, #24]
   17680:	ldr	r9, [fp, #8]
   17684:	mov	r2, #0
   17688:	mov	r1, #0
   1768c:	mov	r5, #0
   17690:	str	r2, [sp, #52]	; 0x34
   17694:	mov	r2, #1
   17698:	str	r0, [sp, #72]	; 0x48
   1769c:	ldr	r0, [fp, #20]
   176a0:	str	r0, [sp, #64]	; 0x40
   176a4:	mov	r0, #0
   176a8:	str	r0, [sp, #92]	; 0x5c
   176ac:	mov	r0, #0
   176b0:	str	r0, [fp, #-76]	; 0xffffffb4
   176b4:	mov	r0, #0
   176b8:	cmp	r9, #10
   176bc:	str	r1, [sp, #68]	; 0x44
   176c0:	bhi	186c0 <__assert_fail@plt+0x7084>
   176c4:	add	r1, pc, #28
   176c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   176cc:	ldr	lr, [sp, #80]	; 0x50
   176d0:	mov	r6, r4
   176d4:	mov	r8, #0
   176d8:	mov	r3, #1
   176dc:	mov	sl, #0
   176e0:	mov	r4, r2
   176e4:	ldr	pc, [r1, r9, lsl #2]
   176e8:			; <UNDEFINED> instruction: 0x000177b8
   176ec:	strdeq	r7, [r1], -r4
   176f0:	andeq	r7, r1, r8, asr #15
   176f4:			; <UNDEFINED> instruction: 0x000177b0
   176f8:	andeq	r7, r1, r8, ror #15
   176fc:	andeq	r7, r1, r0, asr #16
   17700:	ldrdeq	r7, [r1], -r8
   17704:	andeq	r7, r1, r0, lsr #17
   17708:	andeq	r7, r1, r4, lsl r7
   1770c:	andeq	r7, r1, r4, lsl r7
   17710:	andeq	r7, r1, ip, lsr r7
   17714:	movw	r0, #53487	; 0xd0ef
   17718:	mov	r1, r9
   1771c:	movt	r0, #1
   17720:	bl	18e28 <__assert_fail@plt+0x77ec>
   17724:	str	r0, [sp, #64]	; 0x40
   17728:	movw	r0, #54620	; 0xd55c
   1772c:	mov	r1, r9
   17730:	movt	r0, #1
   17734:	bl	18e28 <__assert_fail@plt+0x77ec>
   17738:	str	r0, [sp, #72]	; 0x48
   1773c:	mov	r8, #0
   17740:	mov	sl, r7
   17744:	tst	r7, #1
   17748:	str	r5, [fp, #-48]	; 0xffffffd0
   1774c:	bne	17788 <__assert_fail@plt+0x614c>
   17750:	ldr	r0, [sp, #64]	; 0x40
   17754:	ldrb	r0, [r0]
   17758:	cmp	r0, #0
   1775c:	beq	17788 <__assert_fail@plt+0x614c>
   17760:	ldr	r1, [sp, #64]	; 0x40
   17764:	mov	r8, #0
   17768:	add	r1, r1, #1
   1776c:	cmp	r8, r6
   17770:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17774:	strbcc	r0, [r2, r8]
   17778:	ldrb	r0, [r1, r8]
   1777c:	add	r8, r8, #1
   17780:	cmp	r0, #0
   17784:	bne	1776c <__assert_fail@plt+0x6130>
   17788:	ldr	r7, [sp, #72]	; 0x48
   1778c:	mov	r0, r7
   17790:	bl	114e0 <strlen@plt>
   17794:	ldr	ip, [fp, #-84]	; 0xffffffac
   17798:	ldr	lr, [sp, #80]	; 0x50
   1779c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   177a0:	str	r0, [fp, #-76]	; 0xffffffb4
   177a4:	str	r7, [sp, #92]	; 0x5c
   177a8:	mov	r3, #1
   177ac:	b	178a0 <__assert_fail@plt+0x6264>
   177b0:	mov	r0, #1
   177b4:	b	177f4 <__assert_fail@plt+0x61b8>
   177b8:	mov	r9, #0
   177bc:	mov	r8, #0
   177c0:	mov	r3, r0
   177c4:	b	1789c <__assert_fail@plt+0x6260>
   177c8:	tst	r7, #1
   177cc:	bne	177f4 <__assert_fail@plt+0x61b8>
   177d0:	mov	r3, r0
   177d4:	b	1781c <__assert_fail@plt+0x61e0>
   177d8:	mov	r0, #1
   177dc:	mov	r8, #0
   177e0:	mov	r9, #5
   177e4:	b	17854 <__assert_fail@plt+0x6218>
   177e8:	mov	r3, #1
   177ec:	tst	r7, #1
   177f0:	beq	1781c <__assert_fail@plt+0x61e0>
   177f4:	mov	r1, #1
   177f8:	mov	r8, #0
   177fc:	mov	r9, #2
   17800:	mov	r3, r0
   17804:	mov	sl, #1
   17808:	str	r1, [fp, #-76]	; 0xffffffb4
   1780c:	movw	r1, #54620	; 0xd55c
   17810:	movt	r1, #1
   17814:	str	r1, [sp, #92]	; 0x5c
   17818:	b	178a0 <__assert_fail@plt+0x6264>
   1781c:	cmp	r6, #0
   17820:	mov	r8, #1
   17824:	mov	r9, #2
   17828:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   1782c:	movne	r0, #39	; 0x27
   17830:	strbne	r0, [r1]
   17834:	movw	r0, #54620	; 0xd55c
   17838:	movt	r0, #1
   1783c:	b	17890 <__assert_fail@plt+0x6254>
   17840:	mov	r9, #5
   17844:	tst	r7, #1
   17848:	beq	17870 <__assert_fail@plt+0x6234>
   1784c:	mov	r0, #1
   17850:	mov	r8, #0
   17854:	str	r0, [fp, #-76]	; 0xffffffb4
   17858:	movw	r0, #53485	; 0xd0ed
   1785c:	mov	r3, #1
   17860:	mov	sl, #1
   17864:	movt	r0, #1
   17868:	str	r0, [sp, #92]	; 0x5c
   1786c:	b	178a0 <__assert_fail@plt+0x6264>
   17870:	cmp	r6, #0
   17874:	mov	r8, #1
   17878:	mov	r3, #1
   1787c:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   17880:	movne	r0, #34	; 0x22
   17884:	strbne	r0, [r1]
   17888:	movw	r0, #53485	; 0xd0ed
   1788c:	movt	r0, #1
   17890:	str	r0, [sp, #92]	; 0x5c
   17894:	mov	r0, #1
   17898:	str	r0, [fp, #-76]	; 0xffffffb4
   1789c:	mov	sl, #0
   178a0:	ldr	r0, [fp, #16]
   178a4:	mov	r7, #0
   178a8:	str	r9, [fp, #-64]	; 0xffffffc0
   178ac:	str	sl, [fp, #-72]	; 0xffffffb8
   178b0:	str	r3, [sp, #84]	; 0x54
   178b4:	cmp	r0, #0
   178b8:	movwne	r0, #1
   178bc:	and	r0, r0, sl
   178c0:	str	r0, [fp, #-88]	; 0xffffffa8
   178c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   178c8:	cmp	r0, #0
   178cc:	movwne	r0, #1
   178d0:	subs	r2, r9, #2
   178d4:	and	r1, r0, sl
   178d8:	str	r2, [fp, #-80]	; 0xffffffb0
   178dc:	and	r1, r3, r1
   178e0:	str	r1, [sp, #44]	; 0x2c
   178e4:	clz	r1, r2
   178e8:	lsr	r1, r1, #5
   178ec:	and	r1, r1, sl
   178f0:	str	r1, [sp, #56]	; 0x38
   178f4:	mov	r1, r2
   178f8:	eor	r2, sl, #1
   178fc:	movwne	r1, #1
   17900:	str	r2, [sp, #88]	; 0x58
   17904:	orr	r2, r1, r2
   17908:	and	r1, r1, r3
   1790c:	and	r0, r0, r1
   17910:	str	r2, [sp, #60]	; 0x3c
   17914:	str	r1, [fp, #-68]	; 0xffffffbc
   17918:	str	r0, [fp, #-60]	; 0xffffffc4
   1791c:	eor	r0, r3, #1
   17920:	str	r0, [sp, #48]	; 0x30
   17924:	cmn	lr, #1
   17928:	beq	17938 <__assert_fail@plt+0x62fc>
   1792c:	cmp	r7, lr
   17930:	bne	17944 <__assert_fail@plt+0x6308>
   17934:	b	184f0 <__assert_fail@plt+0x6eb4>
   17938:	ldrb	r0, [ip, r7]
   1793c:	cmp	r0, #0
   17940:	beq	184f8 <__assert_fail@plt+0x6ebc>
   17944:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17948:	mov	r9, #0
   1794c:	str	r5, [fp, #-48]	; 0xffffffd0
   17950:	str	r6, [fp, #-52]	; 0xffffffcc
   17954:	cmp	r0, #0
   17958:	beq	17998 <__assert_fail@plt+0x635c>
   1795c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17960:	mov	r5, r4
   17964:	add	r4, r7, r0
   17968:	cmp	r0, #2
   1796c:	bcc	17988 <__assert_fail@plt+0x634c>
   17970:	cmn	lr, #1
   17974:	bne	17988 <__assert_fail@plt+0x634c>
   17978:	mov	r0, ip
   1797c:	bl	114e0 <strlen@plt>
   17980:	ldr	ip, [fp, #-84]	; 0xffffffac
   17984:	mov	lr, r0
   17988:	cmp	r4, lr
   1798c:	bls	179a0 <__assert_fail@plt+0x6364>
   17990:	mov	r6, #0
   17994:	b	179e0 <__assert_fail@plt+0x63a4>
   17998:	mov	r6, #0
   1799c:	b	179e4 <__assert_fail@plt+0x63a8>
   179a0:	ldr	r1, [sp, #92]	; 0x5c
   179a4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   179a8:	add	r0, ip, r7
   179ac:	mov	r4, lr
   179b0:	bl	1139c <memcmp@plt>
   179b4:	ldr	r2, [sp, #88]	; 0x58
   179b8:	cmp	r0, #0
   179bc:	mov	r1, r0
   179c0:	movwne	r1, #1
   179c4:	orr	r1, r1, r2
   179c8:	tst	r1, #1
   179cc:	beq	1858c <__assert_fail@plt+0x6f50>
   179d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   179d4:	clz	r0, r0
   179d8:	mov	lr, r4
   179dc:	lsr	r6, r0, #5
   179e0:	mov	r4, r5
   179e4:	ldrb	r5, [ip, r7]
   179e8:	cmp	r5, #126	; 0x7e
   179ec:	bhi	17db4 <__assert_fail@plt+0x6778>
   179f0:	add	r3, pc, #16
   179f4:	mov	sl, #1
   179f8:	mov	r2, #110	; 0x6e
   179fc:	mov	r0, #97	; 0x61
   17a00:	mov	r1, #0
   17a04:	ldr	pc, [r3, r5, lsl #2]
   17a08:	muleq	r1, r8, ip
   17a0c:			; <UNDEFINED> instruction: 0x00017db4
   17a10:			; <UNDEFINED> instruction: 0x00017db4
   17a14:			; <UNDEFINED> instruction: 0x00017db4
   17a18:			; <UNDEFINED> instruction: 0x00017db4
   17a1c:			; <UNDEFINED> instruction: 0x00017db4
   17a20:			; <UNDEFINED> instruction: 0x00017db4
   17a24:	andeq	r7, r1, r8, asr lr
   17a28:	andeq	r7, r1, r8, ror ip
   17a2c:	andeq	r7, r1, r0, ror ip
   17a30:	andeq	r7, r1, r4, lsl #25
   17a34:	andeq	r7, r1, r8, lsl #26
   17a38:	andeq	r7, r1, r8, ror #24
   17a3c:	andeq	r7, r1, r0, lsl #25
   17a40:			; <UNDEFINED> instruction: 0x00017db4
   17a44:			; <UNDEFINED> instruction: 0x00017db4
   17a48:			; <UNDEFINED> instruction: 0x00017db4
   17a4c:			; <UNDEFINED> instruction: 0x00017db4
   17a50:			; <UNDEFINED> instruction: 0x00017db4
   17a54:			; <UNDEFINED> instruction: 0x00017db4
   17a58:			; <UNDEFINED> instruction: 0x00017db4
   17a5c:			; <UNDEFINED> instruction: 0x00017db4
   17a60:			; <UNDEFINED> instruction: 0x00017db4
   17a64:			; <UNDEFINED> instruction: 0x00017db4
   17a68:			; <UNDEFINED> instruction: 0x00017db4
   17a6c:			; <UNDEFINED> instruction: 0x00017db4
   17a70:			; <UNDEFINED> instruction: 0x00017db4
   17a74:			; <UNDEFINED> instruction: 0x00017db4
   17a78:			; <UNDEFINED> instruction: 0x00017db4
   17a7c:			; <UNDEFINED> instruction: 0x00017db4
   17a80:			; <UNDEFINED> instruction: 0x00017db4
   17a84:			; <UNDEFINED> instruction: 0x00017db4
   17a88:	andeq	r7, r1, r8, lsl lr
   17a8c:	andeq	r7, r1, ip, lsl lr
   17a90:	andeq	r7, r1, ip, lsl lr
   17a94:	andeq	r7, r1, r8, lsl ip
   17a98:	andeq	r7, r1, ip, lsl lr
   17a9c:	andeq	r7, r1, r4, lsl #24
   17aa0:	andeq	r7, r1, ip, lsl lr
   17aa4:	andeq	r7, r1, r0, lsl sp
   17aa8:	andeq	r7, r1, ip, lsl lr
   17aac:	andeq	r7, r1, ip, lsl lr
   17ab0:	andeq	r7, r1, ip, lsl lr
   17ab4:	andeq	r7, r1, r4, lsl #24
   17ab8:	andeq	r7, r1, r4, lsl #24
   17abc:	andeq	r7, r1, r4, lsl #24
   17ac0:	andeq	r7, r1, r4, lsl #24
   17ac4:	andeq	r7, r1, r4, lsl #24
   17ac8:	andeq	r7, r1, r4, lsl #24
   17acc:	andeq	r7, r1, r4, lsl #24
   17ad0:	andeq	r7, r1, r4, lsl #24
   17ad4:	andeq	r7, r1, r4, lsl #24
   17ad8:	andeq	r7, r1, r4, lsl #24
   17adc:	andeq	r7, r1, r4, lsl #24
   17ae0:	andeq	r7, r1, r4, lsl #24
   17ae4:	andeq	r7, r1, r4, lsl #24
   17ae8:	andeq	r7, r1, r4, lsl #24
   17aec:	andeq	r7, r1, r4, lsl #24
   17af0:	andeq	r7, r1, r4, lsl #24
   17af4:	andeq	r7, r1, ip, lsl lr
   17af8:	andeq	r7, r1, ip, lsl lr
   17afc:	andeq	r7, r1, ip, lsl lr
   17b00:	andeq	r7, r1, ip, lsl lr
   17b04:	ldrdeq	r7, [r1], -ip
   17b08:			; <UNDEFINED> instruction: 0x00017db4
   17b0c:	andeq	r7, r1, r4, lsl #24
   17b10:	andeq	r7, r1, r4, lsl #24
   17b14:	andeq	r7, r1, r4, lsl #24
   17b18:	andeq	r7, r1, r4, lsl #24
   17b1c:	andeq	r7, r1, r4, lsl #24
   17b20:	andeq	r7, r1, r4, lsl #24
   17b24:	andeq	r7, r1, r4, lsl #24
   17b28:	andeq	r7, r1, r4, lsl #24
   17b2c:	andeq	r7, r1, r4, lsl #24
   17b30:	andeq	r7, r1, r4, lsl #24
   17b34:	andeq	r7, r1, r4, lsl #24
   17b38:	andeq	r7, r1, r4, lsl #24
   17b3c:	andeq	r7, r1, r4, lsl #24
   17b40:	andeq	r7, r1, r4, lsl #24
   17b44:	andeq	r7, r1, r4, lsl #24
   17b48:	andeq	r7, r1, r4, lsl #24
   17b4c:	andeq	r7, r1, r4, lsl #24
   17b50:	andeq	r7, r1, r4, lsl #24
   17b54:	andeq	r7, r1, r4, lsl #24
   17b58:	andeq	r7, r1, r4, lsl #24
   17b5c:	andeq	r7, r1, r4, lsl #24
   17b60:	andeq	r7, r1, r4, lsl #24
   17b64:	andeq	r7, r1, r4, lsl #24
   17b68:	andeq	r7, r1, r4, lsl #24
   17b6c:	andeq	r7, r1, r4, lsl #24
   17b70:	andeq	r7, r1, r4, lsl #24
   17b74:	andeq	r7, r1, ip, lsl lr
   17b78:	andeq	r7, r1, r4, asr #24
   17b7c:	andeq	r7, r1, r4, lsl #24
   17b80:	andeq	r7, r1, ip, lsl lr
   17b84:	andeq	r7, r1, r4, lsl #24
   17b88:	andeq	r7, r1, ip, lsl lr
   17b8c:	andeq	r7, r1, r4, lsl #24
   17b90:	andeq	r7, r1, r4, lsl #24
   17b94:	andeq	r7, r1, r4, lsl #24
   17b98:	andeq	r7, r1, r4, lsl #24
   17b9c:	andeq	r7, r1, r4, lsl #24
   17ba0:	andeq	r7, r1, r4, lsl #24
   17ba4:	andeq	r7, r1, r4, lsl #24
   17ba8:	andeq	r7, r1, r4, lsl #24
   17bac:	andeq	r7, r1, r4, lsl #24
   17bb0:	andeq	r7, r1, r4, lsl #24
   17bb4:	andeq	r7, r1, r4, lsl #24
   17bb8:	andeq	r7, r1, r4, lsl #24
   17bbc:	andeq	r7, r1, r4, lsl #24
   17bc0:	andeq	r7, r1, r4, lsl #24
   17bc4:	andeq	r7, r1, r4, lsl #24
   17bc8:	andeq	r7, r1, r4, lsl #24
   17bcc:	andeq	r7, r1, r4, lsl #24
   17bd0:	andeq	r7, r1, r4, lsl #24
   17bd4:	andeq	r7, r1, r4, lsl #24
   17bd8:	andeq	r7, r1, r4, lsl #24
   17bdc:	andeq	r7, r1, r4, lsl #24
   17be0:	andeq	r7, r1, r4, lsl #24
   17be4:	andeq	r7, r1, r4, lsl #24
   17be8:	andeq	r7, r1, r4, lsl #24
   17bec:	andeq	r7, r1, r4, lsl #24
   17bf0:	andeq	r7, r1, r4, lsl #24
   17bf4:	andeq	r7, r1, r8, lsr #24
   17bf8:	andeq	r7, r1, ip, lsl lr
   17bfc:	andeq	r7, r1, r8, lsr #24
   17c00:	andeq	r7, r1, r8, lsl ip
   17c04:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c08:	cmp	r0, #0
   17c0c:	beq	17e6c <__assert_fail@plt+0x6830>
   17c10:	ldr	r0, [fp, #16]
   17c14:	b	17e70 <__assert_fail@plt+0x6834>
   17c18:	mov	sl, #0
   17c1c:	cmp	r7, #0
   17c20:	bne	18088 <__assert_fail@plt+0x6a4c>
   17c24:	b	17e18 <__assert_fail@plt+0x67dc>
   17c28:	mov	sl, #0
   17c2c:	cmn	lr, #1
   17c30:	beq	17e04 <__assert_fail@plt+0x67c8>
   17c34:	cmp	r7, #0
   17c38:	cmpeq	lr, #1
   17c3c:	bne	18088 <__assert_fail@plt+0x6a4c>
   17c40:	b	17e18 <__assert_fail@plt+0x67dc>
   17c44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17c48:	cmp	r0, #2
   17c4c:	bne	17e3c <__assert_fail@plt+0x6800>
   17c50:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17c54:	tst	r0, #1
   17c58:	bne	185a8 <__assert_fail@plt+0x6f6c>
   17c5c:	mov	r9, #0
   17c60:	mov	r0, #92	; 0x5c
   17c64:	b	17e50 <__assert_fail@plt+0x6814>
   17c68:	mov	r0, #102	; 0x66
   17c6c:	b	17e58 <__assert_fail@plt+0x681c>
   17c70:	mov	r2, #116	; 0x74
   17c74:	b	17c84 <__assert_fail@plt+0x6648>
   17c78:	mov	r0, #98	; 0x62
   17c7c:	b	17e58 <__assert_fail@plt+0x681c>
   17c80:	mov	r2, #114	; 0x72
   17c84:	ldr	r0, [sp, #60]	; 0x3c
   17c88:	tst	r0, #1
   17c8c:	mov	r0, r2
   17c90:	bne	17e58 <__assert_fail@plt+0x681c>
   17c94:	b	185a8 <__assert_fail@plt+0x6f6c>
   17c98:	ldr	r0, [sp, #84]	; 0x54
   17c9c:	tst	r0, #1
   17ca0:	beq	17f44 <__assert_fail@plt+0x6908>
   17ca4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17ca8:	tst	r0, #1
   17cac:	bne	186b0 <__assert_fail@plt+0x7074>
   17cb0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17cb4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17cb8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17cbc:	cmp	r0, #2
   17cc0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17cc4:	movwne	r0, #1
   17cc8:	orr	r0, r0, r3
   17ccc:	tst	r0, #1
   17cd0:	beq	183c4 <__assert_fail@plt+0x6d88>
   17cd4:	mov	r0, r8
   17cd8:	b	18404 <__assert_fail@plt+0x6dc8>
   17cdc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17ce0:	mov	r9, #0
   17ce4:	mov	r5, #63	; 0x3f
   17ce8:	cmp	r0, #5
   17cec:	beq	18090 <__assert_fail@plt+0x6a54>
   17cf0:	cmp	r0, #2
   17cf4:	bne	18150 <__assert_fail@plt+0x6b14>
   17cf8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17cfc:	tst	r0, #1
   17d00:	beq	18154 <__assert_fail@plt+0x6b18>
   17d04:	b	185a8 <__assert_fail@plt+0x6f6c>
   17d08:	mov	r0, #118	; 0x76
   17d0c:	b	17e58 <__assert_fail@plt+0x681c>
   17d10:	mov	r0, #1
   17d14:	mov	r5, #39	; 0x27
   17d18:	str	r0, [sp, #52]	; 0x34
   17d1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17d20:	cmp	r0, #2
   17d24:	bne	17dac <__assert_fail@plt+0x6770>
   17d28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17d2c:	tst	r0, #1
   17d30:	bne	185a8 <__assert_fail@plt+0x6f6c>
   17d34:	ldr	r3, [sp, #68]	; 0x44
   17d38:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17d3c:	mov	r9, #0
   17d40:	clz	r1, r2
   17d44:	cmp	r3, #0
   17d48:	mov	r0, r3
   17d4c:	movwne	r0, #1
   17d50:	lsr	r1, r1, #5
   17d54:	orrs	r0, r0, r1
   17d58:	moveq	r3, r2
   17d5c:	moveq	r2, r0
   17d60:	cmp	r8, r2
   17d64:	str	r3, [sp, #68]	; 0x44
   17d68:	str	r2, [fp, #-52]	; 0xffffffcc
   17d6c:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   17d70:	movcc	r0, #39	; 0x27
   17d74:	strbcc	r0, [r1, r8]
   17d78:	add	r0, r8, #1
   17d7c:	cmp	r0, r2
   17d80:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17d84:	movcc	r1, #92	; 0x5c
   17d88:	strbcc	r1, [r3, r0]
   17d8c:	add	r0, r8, #2
   17d90:	add	r8, r8, #3
   17d94:	cmp	r0, r2
   17d98:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17d9c:	movcc	r1, #39	; 0x27
   17da0:	strbcc	r1, [r2, r0]
   17da4:	mov	r0, #0
   17da8:	str	r0, [fp, #-48]	; 0xffffffd0
   17dac:	mov	sl, #1
   17db0:	b	17c04 <__assert_fail@plt+0x65c8>
   17db4:	ldr	r0, [sp, #32]
   17db8:	cmp	r0, #1
   17dbc:	bne	17f68 <__assert_fail@plt+0x692c>
   17dc0:	str	lr, [sp, #80]	; 0x50
   17dc4:	bl	114c8 <__ctype_b_loc@plt>
   17dc8:	ldr	r0, [r0]
   17dcc:	ldr	ip, [fp, #-84]	; 0xffffffac
   17dd0:	mov	r1, #1
   17dd4:	add	r0, r0, r5, lsl #1
   17dd8:	ldrb	r0, [r0, #1]
   17ddc:	ubfx	sl, r0, #6, #1
   17de0:	ldr	r0, [sp, #48]	; 0x30
   17de4:	mov	r2, r1
   17de8:	cmp	r1, #1
   17dec:	orr	r0, sl, r0
   17df0:	bhi	1815c <__assert_fail@plt+0x6b20>
   17df4:	tst	r0, #1
   17df8:	beq	1815c <__assert_fail@plt+0x6b20>
   17dfc:	ldr	lr, [sp, #80]	; 0x50
   17e00:	b	17c04 <__assert_fail@plt+0x65c8>
   17e04:	cmp	r7, #0
   17e08:	bne	18084 <__assert_fail@plt+0x6a48>
   17e0c:	ldrb	r0, [ip, #1]
   17e10:	cmp	r0, #0
   17e14:	bne	18084 <__assert_fail@plt+0x6a48>
   17e18:	mov	r1, #1
   17e1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17e20:	cmp	r0, #2
   17e24:	bne	17e34 <__assert_fail@plt+0x67f8>
   17e28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17e2c:	tst	r0, #1
   17e30:	bne	185a8 <__assert_fail@plt+0x6f6c>
   17e34:	mov	sl, r1
   17e38:	b	17c04 <__assert_fail@plt+0x65c8>
   17e3c:	ldr	r1, [sp, #44]	; 0x2c
   17e40:	mov	r9, #0
   17e44:	mov	r0, #92	; 0x5c
   17e48:	cmp	r1, #0
   17e4c:	beq	17e58 <__assert_fail@plt+0x681c>
   17e50:	mov	sl, #0
   17e54:	b	18370 <__assert_fail@plt+0x6d34>
   17e58:	ldr	r1, [sp, #84]	; 0x54
   17e5c:	mov	sl, #0
   17e60:	mov	r9, #0
   17e64:	tst	r1, #1
   17e68:	bne	17ea4 <__assert_fail@plt+0x6868>
   17e6c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17e70:	cmp	r0, #0
   17e74:	mov	r0, r5
   17e78:	beq	17e9c <__assert_fail@plt+0x6860>
   17e7c:	ldr	r1, [fp, #16]
   17e80:	ubfx	r0, r5, #5, #3
   17e84:	mov	r2, #1
   17e88:	ldr	r0, [r1, r0, lsl #2]
   17e8c:	and	r1, r5, #31
   17e90:	tst	r0, r2, lsl r1
   17e94:	mov	r0, r5
   17e98:	bne	17ea4 <__assert_fail@plt+0x6868>
   17e9c:	cmp	r6, #0
   17ea0:	beq	18370 <__assert_fail@plt+0x6d34>
   17ea4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17ea8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17eac:	tst	r1, #1
   17eb0:	bne	18584 <__assert_fail@plt+0x6f48>
   17eb4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17eb8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17ebc:	cmp	r1, #2
   17ec0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17ec4:	movwne	r1, #1
   17ec8:	orr	r1, r1, r5
   17ecc:	tst	r1, #1
   17ed0:	bne	17f14 <__assert_fail@plt+0x68d8>
   17ed4:	cmp	r8, r6
   17ed8:	mov	r5, #1
   17edc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17ee0:	movcc	r1, #39	; 0x27
   17ee4:	strbcc	r1, [r2, r8]
   17ee8:	add	r1, r8, #1
   17eec:	cmp	r1, r6
   17ef0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17ef4:	movcc	r2, #36	; 0x24
   17ef8:	strbcc	r2, [r3, r1]
   17efc:	add	r1, r8, #2
   17f00:	add	r8, r8, #3
   17f04:	cmp	r1, r6
   17f08:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17f0c:	movcc	r2, #39	; 0x27
   17f10:	strbcc	r2, [r3, r1]
   17f14:	cmp	r8, r6
   17f18:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17f1c:	movcc	r1, #92	; 0x5c
   17f20:	strbcc	r1, [r2, r8]
   17f24:	add	r8, r8, #1
   17f28:	cmp	r8, r6
   17f2c:	and	r4, r4, sl
   17f30:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   17f34:	strbcc	r0, [r1, r8]
   17f38:	add	r8, r8, #1
   17f3c:	add	r7, r7, #1
   17f40:	b	17924 <__assert_fail@plt+0x62e8>
   17f44:	ldr	r0, [sp, #28]
   17f48:	mov	sl, #0
   17f4c:	mov	r9, #0
   17f50:	mov	r5, #0
   17f54:	cmp	r0, #0
   17f58:	beq	17e6c <__assert_fail@plt+0x6830>
   17f5c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17f60:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17f64:	b	17f3c <__assert_fail@plt+0x6900>
   17f68:	mov	r0, #0
   17f6c:	cmn	lr, #1
   17f70:	str	r6, [sp, #76]	; 0x4c
   17f74:	str	r4, [sp, #20]
   17f78:	str	r0, [fp, #-36]	; 0xffffffdc
   17f7c:	str	r0, [fp, #-40]	; 0xffffffd8
   17f80:	bne	17f94 <__assert_fail@plt+0x6958>
   17f84:	mov	r0, ip
   17f88:	bl	114e0 <strlen@plt>
   17f8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f90:	mov	lr, r0
   17f94:	add	r0, ip, r7
   17f98:	mov	sl, #1
   17f9c:	mov	r6, #0
   17fa0:	sub	r4, fp, #40	; 0x28
   17fa4:	str	lr, [sp, #80]	; 0x50
   17fa8:	str	r0, [sp, #36]	; 0x24
   17fac:	str	r6, [sp, #40]	; 0x28
   17fb0:	add	r6, r6, r7
   17fb4:	sub	r0, fp, #44	; 0x2c
   17fb8:	mov	r3, r4
   17fbc:	add	r1, ip, r6
   17fc0:	sub	r2, lr, r6
   17fc4:	bl	1b580 <__assert_fail@plt+0x9f44>
   17fc8:	cmp	r0, #0
   17fcc:	beq	184d8 <__assert_fail@plt+0x6e9c>
   17fd0:	cmn	r0, #1
   17fd4:	beq	18498 <__assert_fail@plt+0x6e5c>
   17fd8:	ldr	lr, [sp, #80]	; 0x50
   17fdc:	cmn	r0, #2
   17fe0:	beq	184a0 <__assert_fail@plt+0x6e64>
   17fe4:	ldr	r2, [sp, #56]	; 0x38
   17fe8:	cmp	r0, #2
   17fec:	mov	r1, #0
   17ff0:	movwcc	r1, #1
   17ff4:	eor	r2, r2, #1
   17ff8:	orrs	r1, r2, r1
   17ffc:	bne	18048 <__assert_fail@plt+0x6a0c>
   18000:	ldr	r1, [sp, #40]	; 0x28
   18004:	ldr	r2, [sp, #36]	; 0x24
   18008:	add	ip, r2, r1
   1800c:	mov	r2, #1
   18010:	ldrb	r3, [ip, r2]
   18014:	sub	r6, r3, #94	; 0x5e
   18018:	cmp	r6, #30
   1801c:	bhi	18030 <__assert_fail@plt+0x69f4>
   18020:	mov	r4, #1
   18024:	mov	r1, #1073741829	; 0x40000005
   18028:	tst	r1, r4, lsl r6
   1802c:	bne	185a4 <__assert_fail@plt+0x6f68>
   18030:	sub	r3, r3, #91	; 0x5b
   18034:	cmp	r3, #2
   18038:	bcc	185a4 <__assert_fail@plt+0x6f68>
   1803c:	add	r2, r2, #1
   18040:	cmp	r2, r0
   18044:	bcc	18010 <__assert_fail@plt+0x69d4>
   18048:	ldr	r6, [sp, #40]	; 0x28
   1804c:	add	r6, r0, r6
   18050:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18054:	bl	113f0 <iswprint@plt>
   18058:	cmp	r0, #0
   1805c:	sub	r4, fp, #40	; 0x28
   18060:	movwne	r0, #1
   18064:	and	sl, sl, r0
   18068:	mov	r0, r4
   1806c:	bl	11390 <mbsinit@plt>
   18070:	ldr	lr, [sp, #80]	; 0x50
   18074:	ldr	ip, [fp, #-84]	; 0xffffffac
   18078:	cmp	r0, #0
   1807c:	beq	17fac <__assert_fail@plt+0x6970>
   18080:	b	184e0 <__assert_fail@plt+0x6ea4>
   18084:	mvn	lr, #0
   18088:	mov	r9, #0
   1808c:	b	17c04 <__assert_fail@plt+0x65c8>
   18090:	ldr	r0, [sp, #24]
   18094:	cmp	r0, #0
   18098:	beq	18150 <__assert_fail@plt+0x6b14>
   1809c:	add	r0, r7, #2
   180a0:	cmp	r0, lr
   180a4:	bcs	18150 <__assert_fail@plt+0x6b14>
   180a8:	add	r1, ip, r7
   180ac:	ldrb	r1, [r1, #1]
   180b0:	cmp	r1, #63	; 0x3f
   180b4:	bne	18150 <__assert_fail@plt+0x6b14>
   180b8:	ldrb	r5, [ip, r0]
   180bc:	sub	r1, r5, #33	; 0x21
   180c0:	cmp	r1, #29
   180c4:	bhi	18150 <__assert_fail@plt+0x6b14>
   180c8:	movw	r3, #20929	; 0x51c1
   180cc:	mov	r2, #1
   180d0:	movt	r3, #14336	; 0x3800
   180d4:	tst	r3, r2, lsl r1
   180d8:	beq	18150 <__assert_fail@plt+0x6b14>
   180dc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   180e0:	tst	r1, #1
   180e4:	bne	186b8 <__assert_fail@plt+0x707c>
   180e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   180ec:	mov	r7, r0
   180f0:	cmp	r8, r1
   180f4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   180f8:	movcc	r1, #63	; 0x3f
   180fc:	strbcc	r1, [r2, r8]
   18100:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18104:	add	r1, r8, #1
   18108:	cmp	r1, r2
   1810c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18110:	movcc	r2, #34	; 0x22
   18114:	strbcc	r2, [r3, r1]
   18118:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1811c:	add	r1, r8, #2
   18120:	cmp	r1, r2
   18124:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18128:	movcc	r2, #34	; 0x22
   1812c:	strbcc	r2, [r3, r1]
   18130:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18134:	add	r1, r8, #3
   18138:	add	r8, r8, #4
   1813c:	cmp	r1, r2
   18140:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18144:	movcc	r2, #63	; 0x3f
   18148:	strbcc	r2, [r3, r1]
   1814c:	b	18154 <__assert_fail@plt+0x6b18>
   18150:	mov	r5, #63	; 0x3f
   18154:	mov	sl, #0
   18158:	b	17c04 <__assert_fail@plt+0x65c8>
   1815c:	str	r0, [sp, #40]	; 0x28
   18160:	add	r0, r2, r7
   18164:	str	r6, [sp, #76]	; 0x4c
   18168:	add	r1, r7, #1
   1816c:	ldr	lr, [sp, #80]	; 0x50
   18170:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18174:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18178:	mov	r3, #0
   1817c:	str	r0, [sp, #36]	; 0x24
   18180:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18184:	b	18218 <__assert_fail@plt+0x6bdc>
   18188:	str	r0, [sp, #76]	; 0x4c
   1818c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18190:	cmp	r9, #0
   18194:	movwne	r9, #1
   18198:	mvn	r7, r0
   1819c:	orr	r7, r7, r9
   181a0:	tst	r7, #1
   181a4:	bne	181f4 <__assert_fail@plt+0x6bb8>
   181a8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   181ac:	cmp	r8, r6
   181b0:	bcs	181c8 <__assert_fail@plt+0x6b8c>
   181b4:	ldr	r7, [fp, #-56]	; 0xffffffc8
   181b8:	mov	r2, r4
   181bc:	mov	r4, #39	; 0x27
   181c0:	strb	r4, [r7, r8]
   181c4:	mov	r4, r2
   181c8:	add	r7, r8, #1
   181cc:	cmp	r7, r6
   181d0:	bcs	181e8 <__assert_fail@plt+0x6bac>
   181d4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   181d8:	mov	r2, r4
   181dc:	mov	r4, #39	; 0x27
   181e0:	strb	r4, [r0, r7]
   181e4:	mov	r4, r2
   181e8:	add	r8, r8, #2
   181ec:	mov	r0, #0
   181f0:	b	181fc <__assert_fail@plt+0x6bc0>
   181f4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   181f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   181fc:	cmp	r8, r6
   18200:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18204:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18208:	strbcc	r5, [r2, r8]
   1820c:	add	r8, r8, #1
   18210:	ldrb	r5, [ip, r1]
   18214:	add	r1, r1, #1
   18218:	ldr	r2, [sp, #40]	; 0x28
   1821c:	tst	r2, #1
   18220:	beq	1825c <__assert_fail@plt+0x6c20>
   18224:	ldr	r2, [sp, #76]	; 0x4c
   18228:	str	r0, [fp, #-48]	; 0xffffffd0
   1822c:	tst	r2, #1
   18230:	beq	18254 <__assert_fail@plt+0x6c18>
   18234:	cmp	r8, r6
   18238:	bcs	18250 <__assert_fail@plt+0x6c14>
   1823c:	ldr	r6, [fp, #-56]	; 0xffffffc8
   18240:	mov	r2, r4
   18244:	mov	r4, #92	; 0x5c
   18248:	strb	r4, [r6, r8]
   1824c:	mov	r4, r2
   18250:	add	r8, r8, #1
   18254:	mov	r0, #0
   18258:	b	18350 <__assert_fail@plt+0x6d14>
   1825c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   18260:	tst	r2, #1
   18264:	bne	185b0 <__assert_fail@plt+0x6f74>
   18268:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1826c:	cmp	r7, #2
   18270:	movwne	r3, #1
   18274:	orr	r3, r3, r0
   18278:	tst	r3, #1
   1827c:	bne	182d8 <__assert_fail@plt+0x6c9c>
   18280:	cmp	r8, r6
   18284:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18288:	movcc	r3, #39	; 0x27
   1828c:	strbcc	r3, [r2, r8]
   18290:	add	r3, r8, #1
   18294:	cmp	r3, r6
   18298:	bcs	182b0 <__assert_fail@plt+0x6c74>
   1829c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   182a0:	mov	r7, r4
   182a4:	mov	r4, #36	; 0x24
   182a8:	strb	r4, [r2, r3]
   182ac:	mov	r4, r7
   182b0:	add	r3, r8, #2
   182b4:	cmp	r3, r6
   182b8:	bcs	182d0 <__assert_fail@plt+0x6c94>
   182bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   182c0:	mov	r7, r4
   182c4:	mov	r4, #39	; 0x27
   182c8:	strb	r4, [r2, r3]
   182cc:	mov	r4, r7
   182d0:	add	r8, r8, #3
   182d4:	mov	r0, #1
   182d8:	cmp	r8, r6
   182dc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   182e0:	movcc	r3, #92	; 0x5c
   182e4:	strbcc	r3, [r2, r8]
   182e8:	add	r3, r8, #1
   182ec:	cmp	r3, r6
   182f0:	bcs	18310 <__assert_fail@plt+0x6cd4>
   182f4:	mov	r2, r4
   182f8:	and	r7, r5, #192	; 0xc0
   182fc:	mov	r4, #48	; 0x30
   18300:	orr	r7, r4, r7, lsr #6
   18304:	mov	r4, r2
   18308:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1830c:	strb	r7, [r2, r3]
   18310:	add	r3, r8, #2
   18314:	cmp	r3, r6
   18318:	bcs	18338 <__assert_fail@plt+0x6cfc>
   1831c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18320:	mov	r6, r4
   18324:	lsr	r7, r5, #3
   18328:	mov	r4, #6
   1832c:	bfi	r7, r4, #3, #29
   18330:	mov	r4, r6
   18334:	strb	r7, [r2, r3]
   18338:	str	r0, [fp, #-48]	; 0xffffffd0
   1833c:	ldr	r0, [sp, #76]	; 0x4c
   18340:	mov	r3, #6
   18344:	add	r8, r8, #3
   18348:	bfi	r5, r3, #3, #29
   1834c:	mov	r3, #1
   18350:	ldr	r2, [sp, #36]	; 0x24
   18354:	and	r9, r3, #1
   18358:	cmp	r2, r1
   1835c:	bhi	18188 <__assert_fail@plt+0x6b4c>
   18360:	cmp	r9, #0
   18364:	sub	r7, r1, #1
   18368:	mov	r0, r5
   1836c:	movwne	r9, #1
   18370:	cmp	r9, #0
   18374:	bne	183b8 <__assert_fail@plt+0x6d7c>
   18378:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1837c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18380:	tst	r5, #1
   18384:	beq	17f28 <__assert_fail@plt+0x68ec>
   18388:	cmp	r8, r6
   1838c:	mov	r5, #0
   18390:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18394:	movcc	r1, #39	; 0x27
   18398:	strbcc	r1, [r2, r8]
   1839c:	add	r1, r8, #1
   183a0:	add	r8, r8, #2
   183a4:	cmp	r1, r6
   183a8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   183ac:	movcc	r2, #39	; 0x27
   183b0:	strbcc	r2, [r3, r1]
   183b4:	b	17f28 <__assert_fail@plt+0x68ec>
   183b8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   183bc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   183c0:	b	17f28 <__assert_fail@plt+0x68ec>
   183c4:	cmp	r8, r1
   183c8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   183cc:	movcc	r0, #39	; 0x27
   183d0:	strbcc	r0, [r2, r8]
   183d4:	add	r0, r8, #1
   183d8:	cmp	r0, r1
   183dc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   183e0:	movcc	r2, #36	; 0x24
   183e4:	strbcc	r2, [r3, r0]
   183e8:	add	r0, r8, #2
   183ec:	cmp	r0, r1
   183f0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   183f4:	movcc	r2, #39	; 0x27
   183f8:	strbcc	r2, [r3, r0]
   183fc:	add	r0, r8, #3
   18400:	mov	r3, #1
   18404:	cmp	r0, r1
   18408:	add	r8, r0, #1
   1840c:	str	r3, [fp, #-48]	; 0xffffffd0
   18410:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18414:	movcc	r1, #92	; 0x5c
   18418:	strbcc	r1, [r2, r0]
   1841c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18420:	cmp	r1, #2
   18424:	beq	18488 <__assert_fail@plt+0x6e4c>
   18428:	add	r1, r7, #1
   1842c:	mov	sl, #0
   18430:	mov	r9, #1
   18434:	mov	r5, #48	; 0x30
   18438:	cmp	r1, lr
   1843c:	bcs	17c04 <__assert_fail@plt+0x65c8>
   18440:	ldrb	r1, [ip, r1]
   18444:	sub	r1, r1, #48	; 0x30
   18448:	uxtb	r1, r1
   1844c:	cmp	r1, #9
   18450:	bhi	17c04 <__assert_fail@plt+0x65c8>
   18454:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18458:	cmp	r8, r1
   1845c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18460:	movcc	r1, #48	; 0x30
   18464:	strbcc	r1, [r2, r8]
   18468:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1846c:	add	r1, r0, #2
   18470:	add	r8, r0, #3
   18474:	cmp	r1, r2
   18478:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1847c:	movcc	r2, #48	; 0x30
   18480:	strbcc	r2, [r3, r1]
   18484:	b	17c04 <__assert_fail@plt+0x65c8>
   18488:	mov	r0, #48	; 0x30
   1848c:	mov	r9, #1
   18490:	mov	sl, #0
   18494:	b	17e9c <__assert_fail@plt+0x6860>
   18498:	mov	sl, #0
   1849c:	b	184d8 <__assert_fail@plt+0x6e9c>
   184a0:	mov	sl, #0
   184a4:	cmp	lr, r6
   184a8:	bls	184d8 <__assert_fail@plt+0x6e9c>
   184ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   184b0:	ldr	r6, [sp, #40]	; 0x28
   184b4:	ldr	r0, [sp, #36]	; 0x24
   184b8:	ldrb	r0, [r0, r6]
   184bc:	cmp	r0, #0
   184c0:	beq	184e0 <__assert_fail@plt+0x6ea4>
   184c4:	add	r6, r6, #1
   184c8:	add	r0, r7, r6
   184cc:	cmp	r0, lr
   184d0:	bcc	184b4 <__assert_fail@plt+0x6e78>
   184d4:	b	184e0 <__assert_fail@plt+0x6ea4>
   184d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   184dc:	ldr	r6, [sp, #40]	; 0x28
   184e0:	mov	r1, r6
   184e4:	ldr	r4, [sp, #20]
   184e8:	ldr	r6, [sp, #76]	; 0x4c
   184ec:	b	17de0 <__assert_fail@plt+0x67a4>
   184f0:	mov	lr, r7
   184f4:	b	184fc <__assert_fail@plt+0x6ec0>
   184f8:	mvn	lr, #0
   184fc:	ldr	r9, [fp, #-64]	; 0xffffffc0
   18500:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18504:	eor	r0, r9, #2
   18508:	orr	r0, r0, r8
   1850c:	clz	r0, r0
   18510:	lsr	r0, r0, #5
   18514:	tst	r1, r0
   18518:	bne	18614 <__assert_fail@plt+0x6fd8>
   1851c:	mov	r0, r1
   18520:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18524:	cmp	r9, #2
   18528:	movwne	r1, #1
   1852c:	orr	r0, r0, r1
   18530:	tst	r0, #1
   18534:	bne	18654 <__assert_fail@plt+0x7018>
   18538:	ldr	r0, [sp, #52]	; 0x34
   1853c:	ldr	r1, [sp, #68]	; 0x44
   18540:	str	lr, [sp, #80]	; 0x50
   18544:	eor	r0, r0, #1
   18548:	tst	r0, #1
   1854c:	bne	18654 <__assert_fail@plt+0x7018>
   18550:	tst	r4, #1
   18554:	bne	1861c <__assert_fail@plt+0x6fe0>
   18558:	mov	r7, #0
   1855c:	cmp	r1, #0
   18560:	beq	1864c <__assert_fail@plt+0x7010>
   18564:	ldr	r0, [sp, #84]	; 0x54
   18568:	mov	r3, #0
   1856c:	cmp	r6, #0
   18570:	mov	r2, #0
   18574:	mov	r4, r1
   18578:	str	r3, [fp, #-72]	; 0xffffffb8
   1857c:	beq	176b8 <__assert_fail@plt+0x607c>
   18580:	b	18654 <__assert_fail@plt+0x7018>
   18584:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18588:	b	185b0 <__assert_fail@plt+0x6f74>
   1858c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18590:	mov	r2, #1
   18594:	mov	lr, r4
   18598:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1859c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   185a0:	b	185b4 <__assert_fail@plt+0x6f78>
   185a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   185a8:	mov	r7, #2
   185ac:	ldr	r6, [fp, #-52]	; 0xffffffcc
   185b0:	ldr	r2, [sp, #84]	; 0x54
   185b4:	mov	r0, #0
   185b8:	ldr	r1, [fp, #12]
   185bc:	tst	r2, #1
   185c0:	mov	r2, r7
   185c4:	mov	r3, lr
   185c8:	str	r0, [sp, #8]
   185cc:	ldr	r0, [sp, #64]	; 0x40
   185d0:	movwne	r2, #4
   185d4:	cmp	r7, #2
   185d8:	movne	r2, r7
   185dc:	str	r2, [sp]
   185e0:	mov	r2, ip
   185e4:	bic	r1, r1, #2
   185e8:	str	r0, [sp, #12]
   185ec:	ldr	r0, [sp, #72]	; 0x48
   185f0:	str	r1, [sp, #4]
   185f4:	mov	r1, r6
   185f8:	str	r0, [sp, #16]
   185fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18600:	bl	17640 <__assert_fail@plt+0x6004>
   18604:	mov	r8, r0
   18608:	mov	r0, r8
   1860c:	sub	sp, fp, #28
   18610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18614:	mov	r7, #2
   18618:	b	185b0 <__assert_fail@plt+0x6f74>
   1861c:	mov	r0, #5
   18620:	ldr	r2, [fp, #-84]	; 0xffffffac
   18624:	ldr	r3, [sp, #80]	; 0x50
   18628:	str	r0, [sp]
   1862c:	ldr	r0, [fp, #12]
   18630:	str	r0, [sp, #4]
   18634:	ldr	r0, [fp, #16]
   18638:	str	r0, [sp, #8]
   1863c:	ldr	r0, [sp, #64]	; 0x40
   18640:	str	r0, [sp, #12]
   18644:	ldr	r0, [sp, #72]	; 0x48
   18648:	b	185f8 <__assert_fail@plt+0x6fbc>
   1864c:	mov	r0, #0
   18650:	str	r0, [fp, #-72]	; 0xffffffb8
   18654:	ldr	r1, [sp, #92]	; 0x5c
   18658:	cmp	r1, #0
   1865c:	beq	1869c <__assert_fail@plt+0x7060>
   18660:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18664:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18668:	tst	r0, #1
   1866c:	bne	186a0 <__assert_fail@plt+0x7064>
   18670:	ldrb	r0, [r1]
   18674:	cmp	r0, #0
   18678:	beq	186a0 <__assert_fail@plt+0x7064>
   1867c:	add	r1, r1, #1
   18680:	cmp	r8, r6
   18684:	strbcc	r0, [r2, r8]
   18688:	add	r8, r8, #1
   1868c:	ldrb	r0, [r1], #1
   18690:	cmp	r0, #0
   18694:	bne	18680 <__assert_fail@plt+0x7044>
   18698:	b	186a0 <__assert_fail@plt+0x7064>
   1869c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   186a0:	cmp	r8, r6
   186a4:	movcc	r0, #0
   186a8:	strbcc	r0, [r2, r8]
   186ac:	b	18608 <__assert_fail@plt+0x6fcc>
   186b0:	mov	r2, #1
   186b4:	b	18598 <__assert_fail@plt+0x6f5c>
   186b8:	mov	r7, #5
   186bc:	b	185ac <__assert_fail@plt+0x6f70>
   186c0:	bl	11618 <abort@plt>
   186c4:	mov	r3, r2
   186c8:	mov	r2, #0
   186cc:	b	186d0 <__assert_fail@plt+0x7094>
   186d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186d4:	add	fp, sp, #28
   186d8:	sub	sp, sp, #36	; 0x24
   186dc:	movw	r8, #58032	; 0xe2b0
   186e0:	cmp	r3, #0
   186e4:	mov	r4, r2
   186e8:	str	r2, [sp, #24]
   186ec:	mov	r5, r1
   186f0:	mov	r6, r0
   186f4:	str	r0, [sp, #20]
   186f8:	movt	r8, #2
   186fc:	movne	r8, r3
   18700:	bl	11510 <__errno_location@plt>
   18704:	str	r0, [sp, #28]
   18708:	cmp	r4, #0
   1870c:	add	sl, r8, #8
   18710:	ldm	r8, {r3, r9}
   18714:	ldr	r7, [r0]
   18718:	ldr	r1, [r8, #40]	; 0x28
   1871c:	ldr	r2, [r8, #44]	; 0x2c
   18720:	mov	r0, #0
   18724:	orreq	r9, r9, #1
   18728:	str	r7, [sp, #32]
   1872c:	mov	r7, r5
   18730:	stm	sp, {r3, r9, sl}
   18734:	str	r1, [sp, #12]
   18738:	str	r2, [sp, #16]
   1873c:	mov	r1, #0
   18740:	mov	r2, r6
   18744:	mov	r3, r5
   18748:	bl	17640 <__assert_fail@plt+0x6004>
   1874c:	add	r4, r0, #1
   18750:	mov	r5, r0
   18754:	mov	r0, r4
   18758:	bl	19988 <__assert_fail@plt+0x834c>
   1875c:	mov	r6, r0
   18760:	ldr	r0, [r8]
   18764:	ldr	r2, [r8, #44]	; 0x2c
   18768:	ldr	r1, [r8, #40]	; 0x28
   1876c:	mov	r3, r7
   18770:	stm	sp, {r0, r9, sl}
   18774:	str	r2, [sp, #16]
   18778:	str	r1, [sp, #12]
   1877c:	mov	r0, r6
   18780:	mov	r1, r4
   18784:	ldr	r2, [sp, #20]
   18788:	bl	17640 <__assert_fail@plt+0x6004>
   1878c:	ldr	r0, [sp, #24]
   18790:	ldr	r1, [sp, #32]
   18794:	ldr	r2, [sp, #28]
   18798:	cmp	r0, #0
   1879c:	str	r1, [r2]
   187a0:	strne	r5, [r0]
   187a4:	mov	r0, r6
   187a8:	sub	sp, fp, #28
   187ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   187b4:	add	fp, sp, #24
   187b8:	movw	r5, #57732	; 0xe184
   187bc:	movw	r8, #57728	; 0xe180
   187c0:	movt	r5, #2
   187c4:	movt	r8, #2
   187c8:	ldr	r0, [r5]
   187cc:	ldr	r4, [r8]
   187d0:	cmp	r0, #2
   187d4:	blt	18800 <__assert_fail@plt+0x71c4>
   187d8:	add	r7, r4, #12
   187dc:	mov	r6, #0
   187e0:	ldr	r0, [r7, r6, lsl #3]
   187e4:	bl	154dc <__assert_fail@plt+0x3ea0>
   187e8:	ldr	r1, [r5]
   187ec:	add	r2, r6, #2
   187f0:	add	r0, r6, #1
   187f4:	mov	r6, r0
   187f8:	cmp	r2, r1
   187fc:	blt	187e0 <__assert_fail@plt+0x71a4>
   18800:	ldr	r0, [r4, #4]
   18804:	movw	r7, #58080	; 0xe2e0
   18808:	movt	r7, #2
   1880c:	cmp	r0, r7
   18810:	beq	18828 <__assert_fail@plt+0x71ec>
   18814:	bl	154dc <__assert_fail@plt+0x3ea0>
   18818:	movw	r0, #57736	; 0xe188
   1881c:	mov	r6, #256	; 0x100
   18820:	movt	r0, #2
   18824:	strd	r6, [r0]
   18828:	movw	r6, #57736	; 0xe188
   1882c:	movt	r6, #2
   18830:	cmp	r4, r6
   18834:	beq	18844 <__assert_fail@plt+0x7208>
   18838:	mov	r0, r4
   1883c:	bl	154dc <__assert_fail@plt+0x3ea0>
   18840:	str	r6, [r8]
   18844:	mov	r0, #1
   18848:	str	r0, [r5]
   1884c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18850:	movw	r3, #58032	; 0xe2b0
   18854:	mvn	r2, #0
   18858:	movt	r3, #2
   1885c:	b	18860 <__assert_fail@plt+0x7224>
   18860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18864:	add	fp, sp, #28
   18868:	sub	sp, sp, #44	; 0x2c
   1886c:	mov	r7, r3
   18870:	str	r2, [sp, #36]	; 0x24
   18874:	str	r1, [sp, #32]
   18878:	mov	r5, r0
   1887c:	bl	11510 <__errno_location@plt>
   18880:	cmp	r5, #0
   18884:	blt	189f0 <__assert_fail@plt+0x73b4>
   18888:	cmn	r5, #-2147483647	; 0x80000001
   1888c:	beq	189f0 <__assert_fail@plt+0x73b4>
   18890:	movw	r8, #57732	; 0xe184
   18894:	movw	r4, #57728	; 0xe180
   18898:	str	r0, [sp, #28]
   1889c:	ldr	r0, [r0]
   188a0:	movt	r8, #2
   188a4:	movt	r4, #2
   188a8:	ldr	r1, [r8]
   188ac:	ldr	r6, [r4]
   188b0:	str	r0, [sp, #24]
   188b4:	cmp	r1, r5
   188b8:	ble	188c4 <__assert_fail@plt+0x7288>
   188bc:	mov	sl, r6
   188c0:	b	1892c <__assert_fail@plt+0x72f0>
   188c4:	movw	r9, #57736	; 0xe188
   188c8:	mov	r0, #8
   188cc:	add	r2, r5, #1
   188d0:	str	r1, [fp, #-32]	; 0xffffffe0
   188d4:	mvn	r3, #-2147483648	; 0x80000000
   188d8:	movt	r9, #2
   188dc:	str	r0, [sp]
   188e0:	sub	r2, r2, r1
   188e4:	sub	r1, fp, #32
   188e8:	subs	r0, r6, r9
   188ec:	movne	r0, r6
   188f0:	bl	19ab8 <__assert_fail@plt+0x847c>
   188f4:	cmp	r6, r9
   188f8:	mov	sl, r0
   188fc:	str	r0, [r4]
   18900:	ldrdeq	r0, [r9]
   18904:	stmeq	sl, {r0, r1}
   18908:	ldr	r1, [r8]
   1890c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18910:	add	r0, sl, r1, lsl #3
   18914:	sub	r1, r2, r1
   18918:	lsl	r2, r1, #3
   1891c:	mov	r1, #0
   18920:	bl	11534 <memset@plt>
   18924:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18928:	str	r0, [r8]
   1892c:	mov	r9, sl
   18930:	ldr	r6, [r9, r5, lsl #3]!
   18934:	ldr	r4, [r9, #4]!
   18938:	ldm	r7, {r0, r1}
   1893c:	ldr	r2, [r7, #40]	; 0x28
   18940:	ldr	r3, [r7, #44]	; 0x2c
   18944:	orr	r8, r1, #1
   18948:	add	r1, r7, #8
   1894c:	stm	sp, {r0, r8}
   18950:	add	r0, sp, #8
   18954:	str	r1, [sp, #20]
   18958:	stm	r0, {r1, r2, r3}
   1895c:	mov	r0, r4
   18960:	mov	r1, r6
   18964:	ldr	r2, [sp, #32]
   18968:	ldr	r3, [sp, #36]	; 0x24
   1896c:	bl	17640 <__assert_fail@plt+0x6004>
   18970:	cmp	r6, r0
   18974:	bhi	189d8 <__assert_fail@plt+0x739c>
   18978:	add	r6, r0, #1
   1897c:	movw	r0, #58080	; 0xe2e0
   18980:	movt	r0, #2
   18984:	str	r6, [sl, r5, lsl #3]
   18988:	cmp	r4, r0
   1898c:	beq	18998 <__assert_fail@plt+0x735c>
   18990:	mov	r0, r4
   18994:	bl	154dc <__assert_fail@plt+0x3ea0>
   18998:	mov	r0, r6
   1899c:	bl	19988 <__assert_fail@plt+0x834c>
   189a0:	str	r0, [r9]
   189a4:	mov	r4, r0
   189a8:	add	r3, sp, #8
   189ac:	ldr	r0, [r7]
   189b0:	ldr	r1, [r7, #40]	; 0x28
   189b4:	ldr	r2, [r7, #44]	; 0x2c
   189b8:	stm	sp, {r0, r8}
   189bc:	ldr	r0, [sp, #20]
   189c0:	stm	r3, {r0, r1, r2}
   189c4:	mov	r0, r4
   189c8:	mov	r1, r6
   189cc:	ldr	r2, [sp, #32]
   189d0:	ldr	r3, [sp, #36]	; 0x24
   189d4:	bl	17640 <__assert_fail@plt+0x6004>
   189d8:	ldr	r0, [sp, #28]
   189dc:	ldr	r1, [sp, #24]
   189e0:	str	r1, [r0]
   189e4:	mov	r0, r4
   189e8:	sub	sp, fp, #28
   189ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189f0:	bl	11618 <abort@plt>
   189f4:	movw	r3, #58032	; 0xe2b0
   189f8:	movt	r3, #2
   189fc:	b	18860 <__assert_fail@plt+0x7224>
   18a00:	movw	r3, #58032	; 0xe2b0
   18a04:	mov	r1, r0
   18a08:	mov	r0, #0
   18a0c:	mvn	r2, #0
   18a10:	movt	r3, #2
   18a14:	b	18860 <__assert_fail@plt+0x7224>
   18a18:	movw	r3, #58032	; 0xe2b0
   18a1c:	mov	r2, r1
   18a20:	mov	r1, r0
   18a24:	mov	r0, #0
   18a28:	movt	r3, #2
   18a2c:	b	18860 <__assert_fail@plt+0x7224>
   18a30:	push	{fp, lr}
   18a34:	mov	fp, sp
   18a38:	sub	sp, sp, #48	; 0x30
   18a3c:	vmov.i32	q8, #0	; 0x00000000
   18a40:	mov	ip, #32
   18a44:	mov	r3, sp
   18a48:	mov	lr, r2
   18a4c:	cmp	r1, #10
   18a50:	add	r2, r3, #16
   18a54:	vst1.64	{d16-d17}, [r3], ip
   18a58:	vst1.64	{d16-d17}, [r3]
   18a5c:	vst1.64	{d16-d17}, [r2]
   18a60:	beq	18a80 <__assert_fail@plt+0x7444>
   18a64:	str	r1, [sp]
   18a68:	mov	r3, sp
   18a6c:	mov	r1, lr
   18a70:	mvn	r2, #0
   18a74:	bl	18860 <__assert_fail@plt+0x7224>
   18a78:	mov	sp, fp
   18a7c:	pop	{fp, pc}
   18a80:	bl	11618 <abort@plt>
   18a84:	push	{r4, sl, fp, lr}
   18a88:	add	fp, sp, #8
   18a8c:	sub	sp, sp, #48	; 0x30
   18a90:	mov	ip, r3
   18a94:	mov	r3, sp
   18a98:	vmov.i32	q8, #0	; 0x00000000
   18a9c:	mov	lr, #32
   18aa0:	cmp	r1, #10
   18aa4:	add	r4, r3, #16
   18aa8:	vst1.64	{d16-d17}, [r3], lr
   18aac:	vst1.64	{d16-d17}, [r3]
   18ab0:	vst1.64	{d16-d17}, [r4]
   18ab4:	beq	18ad4 <__assert_fail@plt+0x7498>
   18ab8:	str	r1, [sp]
   18abc:	mov	r1, r2
   18ac0:	mov	r3, sp
   18ac4:	mov	r2, ip
   18ac8:	bl	18860 <__assert_fail@plt+0x7224>
   18acc:	sub	sp, fp, #8
   18ad0:	pop	{r4, sl, fp, pc}
   18ad4:	bl	11618 <abort@plt>
   18ad8:	mov	r2, r1
   18adc:	mov	r1, r0
   18ae0:	mov	r0, #0
   18ae4:	b	18a30 <__assert_fail@plt+0x73f4>
   18ae8:	mov	r3, r2
   18aec:	mov	r2, r1
   18af0:	mov	r1, r0
   18af4:	mov	r0, #0
   18af8:	b	18a84 <__assert_fail@plt+0x7448>
   18afc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18b00:	add	fp, sp, #24
   18b04:	sub	sp, sp, #48	; 0x30
   18b08:	movw	r8, #58032	; 0xe2b0
   18b0c:	mov	lr, r0
   18b10:	mov	r3, sp
   18b14:	mov	ip, r1
   18b18:	movt	r8, #2
   18b1c:	mov	r1, r3
   18b20:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   18b24:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   18b28:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   18b2c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   18b30:	ubfx	r0, r2, #5, #3
   18b34:	and	r2, r2, #31
   18b38:	mov	r4, #1
   18b3c:	add	r0, r3, r0, lsl #2
   18b40:	ldr	r1, [r0, #8]
   18b44:	bic	r4, r4, r1, lsr r2
   18b48:	eor	r1, r1, r4, lsl r2
   18b4c:	mov	r2, ip
   18b50:	str	r1, [r0, #8]
   18b54:	mov	r0, #0
   18b58:	mov	r1, lr
   18b5c:	bl	18860 <__assert_fail@plt+0x7224>
   18b60:	sub	sp, fp, #24
   18b64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18b68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b6c:	add	fp, sp, #24
   18b70:	sub	sp, sp, #48	; 0x30
   18b74:	movw	lr, #58032	; 0xe2b0
   18b78:	mov	ip, r0
   18b7c:	mov	r3, sp
   18b80:	movt	lr, #2
   18b84:	mov	r2, r3
   18b88:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   18b8c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   18b90:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   18b94:	stm	r2, {r0, r4, r5, r6, r7, r8}
   18b98:	ubfx	r0, r1, #5, #3
   18b9c:	and	r1, r1, #31
   18ba0:	mov	r7, #1
   18ba4:	add	r0, r3, r0, lsl #2
   18ba8:	ldr	r2, [r0, #8]
   18bac:	bic	r7, r7, r2, lsr r1
   18bb0:	eor	r1, r2, r7, lsl r1
   18bb4:	mvn	r2, #0
   18bb8:	str	r1, [r0, #8]
   18bbc:	mov	r0, #0
   18bc0:	mov	r1, ip
   18bc4:	bl	18860 <__assert_fail@plt+0x7224>
   18bc8:	sub	sp, fp, #24
   18bcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18bd0:	push	{r4, r5, r6, r7, fp, lr}
   18bd4:	add	fp, sp, #16
   18bd8:	sub	sp, sp, #48	; 0x30
   18bdc:	movw	lr, #58032	; 0xe2b0
   18be0:	mov	ip, r0
   18be4:	mov	r3, sp
   18be8:	movt	lr, #2
   18bec:	mov	r2, r3
   18bf0:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   18bf4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18bf8:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   18bfc:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18c00:	mov	r1, ip
   18c04:	mvn	r2, #0
   18c08:	ldr	r0, [sp, #12]
   18c0c:	orr	r0, r0, #67108864	; 0x4000000
   18c10:	str	r0, [sp, #12]
   18c14:	mov	r0, #0
   18c18:	bl	18860 <__assert_fail@plt+0x7224>
   18c1c:	sub	sp, fp, #16
   18c20:	pop	{r4, r5, r6, r7, fp, pc}
   18c24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c28:	add	fp, sp, #24
   18c2c:	sub	sp, sp, #48	; 0x30
   18c30:	movw	r8, #58032	; 0xe2b0
   18c34:	mov	ip, r1
   18c38:	mov	lr, r0
   18c3c:	mov	r3, sp
   18c40:	movt	r8, #2
   18c44:	mov	r2, r3
   18c48:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   18c4c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18c50:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   18c54:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18c58:	mov	r1, lr
   18c5c:	mov	r2, ip
   18c60:	ldr	r0, [sp, #12]
   18c64:	orr	r0, r0, #67108864	; 0x4000000
   18c68:	str	r0, [sp, #12]
   18c6c:	mov	r0, #0
   18c70:	bl	18860 <__assert_fail@plt+0x7224>
   18c74:	sub	sp, fp, #24
   18c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c80:	add	fp, sp, #24
   18c84:	sub	sp, sp, #96	; 0x60
   18c88:	mov	lr, sp
   18c8c:	vmov.i32	q8, #0	; 0x00000000
   18c90:	mov	ip, r2
   18c94:	cmp	r1, #10
   18c98:	add	r3, lr, #16
   18c9c:	mov	r2, lr
   18ca0:	vst1.64	{d16-d17}, [r3]
   18ca4:	mov	r3, #28
   18ca8:	vst1.64	{d16-d17}, [r2], r3
   18cac:	vst1.32	{d16-d17}, [r2]
   18cb0:	beq	18cf0 <__assert_fail@plt+0x76b4>
   18cb4:	str	r1, [sp, #48]	; 0x30
   18cb8:	add	r3, sp, #48	; 0x30
   18cbc:	ldm	lr!, {r2, r4, r5, r6, r7}
   18cc0:	add	r1, r3, #4
   18cc4:	stmia	r1!, {r2, r4, r5, r6, r7}
   18cc8:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   18ccc:	stm	r1, {r2, r4, r5, r6, r7, r8}
   18cd0:	mvn	r2, #0
   18cd4:	ldr	r1, [sp, #60]	; 0x3c
   18cd8:	orr	r1, r1, #67108864	; 0x4000000
   18cdc:	str	r1, [sp, #60]	; 0x3c
   18ce0:	mov	r1, ip
   18ce4:	bl	18860 <__assert_fail@plt+0x7224>
   18ce8:	sub	sp, fp, #24
   18cec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18cf0:	bl	11618 <abort@plt>
   18cf4:	push	{fp, lr}
   18cf8:	mov	fp, sp
   18cfc:	sub	sp, sp, #8
   18d00:	mvn	ip, #0
   18d04:	str	ip, [sp]
   18d08:	bl	18d14 <__assert_fail@plt+0x76d8>
   18d0c:	mov	sp, fp
   18d10:	pop	{fp, pc}
   18d14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18d18:	add	fp, sp, #24
   18d1c:	sub	sp, sp, #48	; 0x30
   18d20:	movw	ip, #58032	; 0xe2b0
   18d24:	mov	lr, r3
   18d28:	mov	r3, sp
   18d2c:	cmp	r1, #0
   18d30:	movt	ip, #2
   18d34:	cmpne	r2, #0
   18d38:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   18d3c:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   18d40:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   18d44:	stm	r3, {r4, r5, r6, r7, r8, r9}
   18d48:	mov	r3, #10
   18d4c:	str	r3, [sp]
   18d50:	bne	18d58 <__assert_fail@plt+0x771c>
   18d54:	bl	11618 <abort@plt>
   18d58:	ldr	ip, [fp, #8]
   18d5c:	str	r2, [sp, #44]	; 0x2c
   18d60:	str	r1, [sp, #40]	; 0x28
   18d64:	mov	r3, sp
   18d68:	mov	r1, lr
   18d6c:	mov	r2, ip
   18d70:	bl	18860 <__assert_fail@plt+0x7224>
   18d74:	sub	sp, fp, #24
   18d78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18d7c:	push	{fp, lr}
   18d80:	mov	fp, sp
   18d84:	sub	sp, sp, #8
   18d88:	mov	r3, r2
   18d8c:	mov	r2, r1
   18d90:	mov	r1, r0
   18d94:	mvn	r0, #0
   18d98:	str	r0, [sp]
   18d9c:	mov	r0, #0
   18da0:	bl	18d14 <__assert_fail@plt+0x76d8>
   18da4:	mov	sp, fp
   18da8:	pop	{fp, pc}
   18dac:	push	{fp, lr}
   18db0:	mov	fp, sp
   18db4:	sub	sp, sp, #8
   18db8:	mov	ip, r2
   18dbc:	mov	r2, r1
   18dc0:	mov	r1, r0
   18dc4:	str	r3, [sp]
   18dc8:	mov	r0, #0
   18dcc:	mov	r3, ip
   18dd0:	bl	18d14 <__assert_fail@plt+0x76d8>
   18dd4:	mov	sp, fp
   18dd8:	pop	{fp, pc}
   18ddc:	movw	r3, #57744	; 0xe190
   18de0:	movt	r3, #2
   18de4:	b	18860 <__assert_fail@plt+0x7224>
   18de8:	movw	r3, #57744	; 0xe190
   18dec:	mov	r2, r1
   18df0:	mov	r1, r0
   18df4:	mov	r0, #0
   18df8:	movt	r3, #2
   18dfc:	b	18860 <__assert_fail@plt+0x7224>
   18e00:	movw	r3, #57744	; 0xe190
   18e04:	mvn	r2, #0
   18e08:	movt	r3, #2
   18e0c:	b	18860 <__assert_fail@plt+0x7224>
   18e10:	movw	r3, #57744	; 0xe190
   18e14:	mov	r1, r0
   18e18:	mov	r0, #0
   18e1c:	mvn	r2, #0
   18e20:	movt	r3, #2
   18e24:	b	18860 <__assert_fail@plt+0x7224>
   18e28:	push	{r4, r5, fp, lr}
   18e2c:	add	fp, sp, #8
   18e30:	mov	r5, r0
   18e34:	mov	r4, r1
   18e38:	mov	r0, #0
   18e3c:	mov	r2, #5
   18e40:	mov	r1, r5
   18e44:	bl	113b4 <dcgettext@plt>
   18e48:	cmp	r0, r5
   18e4c:	popne	{r4, r5, fp, pc}
   18e50:	bl	1b548 <__assert_fail@plt+0x9f0c>
   18e54:	ldrb	r1, [r0]
   18e58:	and	r1, r1, #223	; 0xdf
   18e5c:	cmp	r1, #71	; 0x47
   18e60:	beq	18ec8 <__assert_fail@plt+0x788c>
   18e64:	cmp	r1, #85	; 0x55
   18e68:	bne	18eec <__assert_fail@plt+0x78b0>
   18e6c:	ldrb	r1, [r0, #1]
   18e70:	and	r1, r1, #223	; 0xdf
   18e74:	cmp	r1, #84	; 0x54
   18e78:	bne	18eec <__assert_fail@plt+0x78b0>
   18e7c:	ldrb	r1, [r0, #2]
   18e80:	and	r1, r1, #223	; 0xdf
   18e84:	cmp	r1, #70	; 0x46
   18e88:	ldrbeq	r1, [r0, #3]
   18e8c:	cmpeq	r1, #45	; 0x2d
   18e90:	bne	18eec <__assert_fail@plt+0x78b0>
   18e94:	ldrb	r1, [r0, #4]
   18e98:	cmp	r1, #56	; 0x38
   18e9c:	ldrbeq	r0, [r0, #5]
   18ea0:	cmpeq	r0, #0
   18ea4:	bne	18eec <__assert_fail@plt+0x78b0>
   18ea8:	ldrb	r1, [r5]
   18eac:	movw	r2, #53489	; 0xd0f1
   18eb0:	movw	r0, #53493	; 0xd0f5
   18eb4:	movt	r2, #1
   18eb8:	movt	r0, #1
   18ebc:	cmp	r1, #96	; 0x60
   18ec0:	moveq	r0, r2
   18ec4:	pop	{r4, r5, fp, pc}
   18ec8:	ldrb	r1, [r0, #1]
   18ecc:	and	r1, r1, #223	; 0xdf
   18ed0:	cmp	r1, #66	; 0x42
   18ed4:	bne	18eec <__assert_fail@plt+0x78b0>
   18ed8:	ldrb	r1, [r0, #2]
   18edc:	cmp	r1, #49	; 0x31
   18ee0:	ldrbeq	r1, [r0, #3]
   18ee4:	cmpeq	r1, #56	; 0x38
   18ee8:	beq	18f08 <__assert_fail@plt+0x78cc>
   18eec:	movw	r1, #53485	; 0xd0ed
   18ef0:	movw	r0, #54620	; 0xd55c
   18ef4:	cmp	r4, #9
   18ef8:	movt	r1, #1
   18efc:	movt	r0, #1
   18f00:	moveq	r0, r1
   18f04:	pop	{r4, r5, fp, pc}
   18f08:	ldrb	r1, [r0, #4]
   18f0c:	cmp	r1, #48	; 0x30
   18f10:	ldrbeq	r1, [r0, #5]
   18f14:	cmpeq	r1, #51	; 0x33
   18f18:	bne	18eec <__assert_fail@plt+0x78b0>
   18f1c:	ldrb	r1, [r0, #6]
   18f20:	cmp	r1, #48	; 0x30
   18f24:	ldrbeq	r0, [r0, #7]
   18f28:	cmpeq	r0, #0
   18f2c:	bne	18eec <__assert_fail@plt+0x78b0>
   18f30:	ldrb	r1, [r5]
   18f34:	movw	r2, #53497	; 0xd0f9
   18f38:	movw	r0, #53501	; 0xd0fd
   18f3c:	movt	r2, #1
   18f40:	movt	r0, #1
   18f44:	b	18ebc <__assert_fail@plt+0x7880>
   18f48:	push	{r4, r5, r6, r7, fp, lr}
   18f4c:	add	fp, sp, #16
   18f50:	mov	r4, r1
   18f54:	mov	r1, #0
   18f58:	mov	r6, r2
   18f5c:	bl	115a0 <setlocale@plt>
   18f60:	cmp	r0, #0
   18f64:	beq	18f90 <__assert_fail@plt+0x7954>
   18f68:	mov	r7, r0
   18f6c:	bl	114e0 <strlen@plt>
   18f70:	cmp	r0, r6
   18f74:	bcs	18fa4 <__assert_fail@plt+0x7968>
   18f78:	add	r2, r0, #1
   18f7c:	mov	r0, r4
   18f80:	mov	r1, r7
   18f84:	bl	11384 <memcpy@plt>
   18f88:	mov	r5, #0
   18f8c:	b	18fcc <__assert_fail@plt+0x7990>
   18f90:	cmp	r6, #0
   18f94:	mov	r5, #22
   18f98:	movne	r0, #0
   18f9c:	strbne	r0, [r4]
   18fa0:	b	18fcc <__assert_fail@plt+0x7990>
   18fa4:	mov	r5, #34	; 0x22
   18fa8:	cmp	r6, #0
   18fac:	beq	18fcc <__assert_fail@plt+0x7990>
   18fb0:	sub	r6, r6, #1
   18fb4:	mov	r0, r4
   18fb8:	mov	r1, r7
   18fbc:	mov	r2, r6
   18fc0:	bl	11384 <memcpy@plt>
   18fc4:	mov	r0, #0
   18fc8:	strb	r0, [r4, r6]
   18fcc:	mov	r0, r5
   18fd0:	pop	{r4, r5, r6, r7, fp, pc}
   18fd4:	mov	r1, #0
   18fd8:	b	115a0 <setlocale@plt>
   18fdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18fe0:	add	fp, sp, #24
   18fe4:	mov	r4, r0
   18fe8:	cmp	r0, #0
   18fec:	beq	19010 <__assert_fail@plt+0x79d4>
   18ff0:	mov	r0, r4
   18ff4:	bl	114e0 <strlen@plt>
   18ff8:	add	r5, r0, #1
   18ffc:	cmp	r5, #58	; 0x3a
   19000:	bls	19014 <__assert_fail@plt+0x79d8>
   19004:	add	r0, r0, #10
   19008:	bic	r0, r0, #3
   1900c:	b	19018 <__assert_fail@plt+0x79dc>
   19010:	mov	r5, #0
   19014:	mov	r0, #64	; 0x40
   19018:	bl	1b270 <__assert_fail@plt+0x9c34>
   1901c:	mov	r6, r0
   19020:	cmp	r0, #0
   19024:	beq	19060 <__assert_fail@plt+0x7a24>
   19028:	cmp	r4, #0
   1902c:	mov	r0, r4
   19030:	mov	r8, #0
   19034:	mov	r7, r6
   19038:	movwne	r0, #1
   1903c:	str	r8, [r6]
   19040:	strb	r0, [r6, #4]
   19044:	strb	r8, [r7, #5]!
   19048:	beq	19060 <__assert_fail@plt+0x7a24>
   1904c:	mov	r0, r7
   19050:	mov	r1, r4
   19054:	mov	r2, r5
   19058:	bl	11384 <memcpy@plt>
   1905c:	strb	r8, [r7, r5]
   19060:	mov	r0, r6
   19064:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19068:	push	{r4, sl, fp, lr}
   1906c:	add	fp, sp, #8
   19070:	cmp	r0, #2
   19074:	popcc	{r4, sl, fp, pc}
   19078:	ldr	r4, [r0]
   1907c:	bl	154dc <__assert_fail@plt+0x3ea0>
   19080:	cmp	r4, #0
   19084:	mov	r0, r4
   19088:	bne	19078 <__assert_fail@plt+0x7a3c>
   1908c:	pop	{r4, sl, fp, pc}
   19090:	push	{r4, r5, r6, r7, fp, lr}
   19094:	add	fp, sp, #16
   19098:	mov	r4, r2
   1909c:	mov	r7, r1
   190a0:	cmp	r0, #0
   190a4:	beq	190e8 <__assert_fail@plt+0x7aac>
   190a8:	mov	r6, r0
   190ac:	bl	19118 <__assert_fail@plt+0x7adc>
   190b0:	cmp	r0, #0
   190b4:	moveq	r0, #0
   190b8:	popeq	{r4, r5, r6, r7, fp, pc}
   190bc:	mov	r5, r0
   190c0:	mov	r0, r7
   190c4:	mov	r1, r4
   190c8:	bl	113cc <localtime_r@plt>
   190cc:	cmp	r0, #0
   190d0:	beq	190f8 <__assert_fail@plt+0x7abc>
   190d4:	mov	r0, r6
   190d8:	mov	r1, r4
   190dc:	bl	191cc <__assert_fail@plt+0x7b90>
   190e0:	eor	r6, r0, #1
   190e4:	b	190fc <__assert_fail@plt+0x7ac0>
   190e8:	mov	r0, r7
   190ec:	mov	r1, r4
   190f0:	pop	{r4, r5, r6, r7, fp, lr}
   190f4:	b	1130c <gmtime_r@plt>
   190f8:	mov	r6, #1
   190fc:	mov	r0, r5
   19100:	bl	192f8 <__assert_fail@plt+0x7cbc>
   19104:	cmp	r0, #0
   19108:	movne	r0, r4
   1910c:	cmp	r6, #0
   19110:	movwne	r0, #0
   19114:	pop	{r4, r5, r6, r7, fp, pc}
   19118:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1911c:	add	fp, sp, #24
   19120:	mov	r5, r0
   19124:	movw	r0, #47747	; 0xba83
   19128:	movt	r0, #1
   1912c:	bl	1145c <getenv@plt>
   19130:	mov	r4, r0
   19134:	ldrb	r0, [r5, #4]
   19138:	cmp	r4, #0
   1913c:	beq	19154 <__assert_fail@plt+0x7b18>
   19140:	cmp	r0, #0
   19144:	beq	1915c <__assert_fail@plt+0x7b20>
   19148:	add	r0, r5, #5
   1914c:	mov	r1, r4
   19150:	bl	11318 <strcmp@plt>
   19154:	cmp	r0, #0
   19158:	beq	1918c <__assert_fail@plt+0x7b50>
   1915c:	mov	r0, r4
   19160:	bl	18fdc <__assert_fail@plt+0x79a0>
   19164:	mov	r7, #0
   19168:	cmp	r0, #0
   1916c:	beq	191c4 <__assert_fail@plt+0x7b88>
   19170:	mov	r4, r0
   19174:	mov	r0, r5
   19178:	bl	1943c <__assert_fail@plt+0x7e00>
   1917c:	cmp	r0, #0
   19180:	beq	19194 <__assert_fail@plt+0x7b58>
   19184:	mov	r7, r4
   19188:	b	191c4 <__assert_fail@plt+0x7b88>
   1918c:	mov	r7, #1
   19190:	b	191c4 <__assert_fail@plt+0x7b88>
   19194:	bl	11510 <__errno_location@plt>
   19198:	ldr	r8, [r0]
   1919c:	mov	r5, r0
   191a0:	cmp	r4, #2
   191a4:	bcc	191c0 <__assert_fail@plt+0x7b84>
   191a8:	ldr	r6, [r4]
   191ac:	mov	r0, r4
   191b0:	bl	154dc <__assert_fail@plt+0x3ea0>
   191b4:	cmp	r6, #0
   191b8:	mov	r4, r6
   191bc:	bne	191a8 <__assert_fail@plt+0x7b6c>
   191c0:	str	r8, [r5]
   191c4:	mov	r0, r7
   191c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   191cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191d0:	add	fp, sp, #28
   191d4:	sub	sp, sp, #4
   191d8:	ldr	r7, [r1, #40]	; 0x28
   191dc:	mov	r8, #1
   191e0:	cmp	r7, #0
   191e4:	beq	19288 <__assert_fail@plt+0x7c4c>
   191e8:	mov	r5, r1
   191ec:	mov	r6, r0
   191f0:	cmp	r7, r1
   191f4:	bcc	19204 <__assert_fail@plt+0x7bc8>
   191f8:	add	r0, r5, #44	; 0x2c
   191fc:	cmp	r7, r0
   19200:	bcc	19288 <__assert_fail@plt+0x7c4c>
   19204:	ldrb	r0, [r7]
   19208:	cmp	r0, #0
   1920c:	beq	1927c <__assert_fail@plt+0x7c40>
   19210:	add	r4, r6, #5
   19214:	b	19264 <__assert_fail@plt+0x7c28>
   19218:	ldrb	r0, [r4]
   1921c:	cmp	r0, #0
   19220:	bne	1923c <__assert_fail@plt+0x7c00>
   19224:	add	r0, r6, #5
   19228:	cmp	r4, r0
   1922c:	bne	19294 <__assert_fail@plt+0x7c58>
   19230:	ldrb	r0, [r6, #4]
   19234:	cmp	r0, #0
   19238:	beq	19294 <__assert_fail@plt+0x7c58>
   1923c:	mov	r0, r4
   19240:	bl	114e0 <strlen@plt>
   19244:	add	r4, r4, r0
   19248:	ldrb	r0, [r4, #1]!
   1924c:	cmp	r0, #0
   19250:	bne	19264 <__assert_fail@plt+0x7c28>
   19254:	ldr	r0, [r6]
   19258:	cmp	r0, #0
   1925c:	addne	r4, r0, #5
   19260:	movne	r6, r0
   19264:	mov	r0, r4
   19268:	mov	r1, r7
   1926c:	bl	11318 <strcmp@plt>
   19270:	cmp	r0, #0
   19274:	bne	19218 <__assert_fail@plt+0x7bdc>
   19278:	b	19284 <__assert_fail@plt+0x7c48>
   1927c:	movw	r4, #52164	; 0xcbc4
   19280:	movt	r4, #1
   19284:	str	r4, [r5, #40]	; 0x28
   19288:	mov	r0, r8
   1928c:	sub	sp, fp, #28
   19290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19294:	add	r0, r6, #64	; 0x40
   19298:	sub	sl, r0, r4
   1929c:	mov	r0, r7
   192a0:	bl	114e0 <strlen@plt>
   192a4:	add	r9, r0, #1
   192a8:	cmp	r9, sl
   192ac:	bge	192cc <__assert_fail@plt+0x7c90>
   192b0:	mov	r0, r4
   192b4:	mov	r1, r7
   192b8:	mov	r2, r9
   192bc:	bl	11384 <memcpy@plt>
   192c0:	mov	r0, #0
   192c4:	strb	r0, [r4, r9]
   192c8:	b	19284 <__assert_fail@plt+0x7c48>
   192cc:	mov	r0, r7
   192d0:	bl	18fdc <__assert_fail@plt+0x79a0>
   192d4:	cmp	r0, #0
   192d8:	str	r0, [r6]
   192dc:	beq	192f0 <__assert_fail@plt+0x7cb4>
   192e0:	mov	r1, #0
   192e4:	add	r4, r0, #5
   192e8:	strb	r1, [r0, #4]
   192ec:	b	19284 <__assert_fail@plt+0x7c48>
   192f0:	mov	r8, #0
   192f4:	b	19288 <__assert_fail@plt+0x7c4c>
   192f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   192fc:	add	fp, sp, #24
   19300:	cmp	r0, #1
   19304:	beq	19354 <__assert_fail@plt+0x7d18>
   19308:	mov	r7, r0
   1930c:	bl	11510 <__errno_location@plt>
   19310:	ldr	r8, [r0]
   19314:	mov	r6, r0
   19318:	mov	r0, r7
   1931c:	bl	1943c <__assert_fail@plt+0x7e00>
   19320:	cmp	r0, #0
   19324:	mov	r5, r0
   19328:	ldreq	r8, [r6]
   1932c:	cmp	r7, #2
   19330:	bcc	1934c <__assert_fail@plt+0x7d10>
   19334:	ldr	r4, [r7]
   19338:	mov	r0, r7
   1933c:	bl	154dc <__assert_fail@plt+0x3ea0>
   19340:	cmp	r4, #0
   19344:	mov	r7, r4
   19348:	bne	19334 <__assert_fail@plt+0x7cf8>
   1934c:	str	r8, [r6]
   19350:	b	19358 <__assert_fail@plt+0x7d1c>
   19354:	mov	r5, #1
   19358:	mov	r0, r5
   1935c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19360:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19364:	add	fp, sp, #24
   19368:	sub	sp, sp, #48	; 0x30
   1936c:	mov	r4, r1
   19370:	cmp	r0, #0
   19374:	beq	19414 <__assert_fail@plt+0x7dd8>
   19378:	mov	r6, r0
   1937c:	bl	19118 <__assert_fail@plt+0x7adc>
   19380:	cmp	r0, #0
   19384:	beq	1942c <__assert_fail@plt+0x7df0>
   19388:	mov	r1, #32
   1938c:	mov	r2, r4
   19390:	mov	r7, r0
   19394:	mov	r0, sp
   19398:	vld1.32	{d16-d17}, [r2], r1
   1939c:	mov	r3, r0
   193a0:	vst1.32	{d16-d17}, [r3], r1
   193a4:	ldr	r1, [r4, #16]
   193a8:	ldr	r5, [r4, #20]
   193ac:	str	r1, [sp, #16]
   193b0:	mvn	r1, #0
   193b4:	str	r1, [sp, #28]
   193b8:	str	r5, [sp, #20]
   193bc:	ldr	r1, [r2]
   193c0:	str	r1, [r3]
   193c4:	bl	1133c <mktime@plt>
   193c8:	mov	r5, r0
   193cc:	ldr	r0, [sp, #28]
   193d0:	cmn	r0, #1
   193d4:	ble	19424 <__assert_fail@plt+0x7de8>
   193d8:	mov	r8, sp
   193dc:	mov	r0, r6
   193e0:	mov	r1, r8
   193e4:	bl	191cc <__assert_fail@plt+0x7b90>
   193e8:	mov	r6, r0
   193ec:	mov	r0, r7
   193f0:	bl	192f8 <__assert_fail@plt+0x7cbc>
   193f4:	cmp	r6, #0
   193f8:	cmpne	r0, #0
   193fc:	beq	1942c <__assert_fail@plt+0x7df0>
   19400:	ldm	r8!, {r0, r1, r2, r3, r7}
   19404:	stmia	r4!, {r0, r1, r2, r3, r7}
   19408:	ldm	r8, {r0, r1, r2, r3, r6, r7}
   1940c:	stm	r4, {r0, r1, r2, r3, r6, r7}
   19410:	b	19430 <__assert_fail@plt+0x7df4>
   19414:	mov	r0, r4
   19418:	sub	sp, fp, #24
   1941c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19420:	b	115c4 <timegm@plt>
   19424:	mov	r0, r7
   19428:	bl	192f8 <__assert_fail@plt+0x7cbc>
   1942c:	mvn	r5, #0
   19430:	mov	r0, r5
   19434:	sub	sp, fp, #24
   19438:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1943c:	push	{fp, lr}
   19440:	mov	fp, sp
   19444:	ldrb	r1, [r0, #4]
   19448:	cmp	r1, #0
   1944c:	beq	19468 <__assert_fail@plt+0x7e2c>
   19450:	add	r1, r0, #5
   19454:	movw	r0, #47747	; 0xba83
   19458:	mov	r2, #1
   1945c:	movt	r0, #1
   19460:	bl	114f8 <setenv@plt>
   19464:	b	19474 <__assert_fail@plt+0x7e38>
   19468:	movw	r0, #47747	; 0xba83
   1946c:	movt	r0, #1
   19470:	bl	115f4 <unsetenv@plt>
   19474:	mov	r1, #0
   19478:	cmp	r0, #0
   1947c:	bne	19488 <__assert_fail@plt+0x7e4c>
   19480:	bl	113fc <tzset@plt>
   19484:	mov	r1, #1
   19488:	mov	r0, r1
   1948c:	pop	{fp, pc}
   19490:	mov	r1, #0
   19494:	mov	r2, #3
   19498:	b	1b370 <__assert_fail@plt+0x9d34>
   1949c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   194a0:	add	fp, sp, #24
   194a4:	sub	sp, sp, #32
   194a8:	ldr	r6, [fp, #12]
   194ac:	ldr	r7, [fp, #8]
   194b0:	mov	r4, r2
   194b4:	mov	r8, r0
   194b8:	cmp	r1, #0
   194bc:	beq	194e4 <__assert_fail@plt+0x7ea8>
   194c0:	movw	r2, #53588	; 0xd154
   194c4:	mov	r5, r1
   194c8:	str	r3, [sp, #4]
   194cc:	str	r4, [sp]
   194d0:	mov	r0, r8
   194d4:	mov	r1, #1
   194d8:	movt	r2, #1
   194dc:	mov	r3, r5
   194e0:	b	194fc <__assert_fail@plt+0x7ec0>
   194e4:	movw	r2, #53600	; 0xd160
   194e8:	str	r3, [sp]
   194ec:	mov	r0, r8
   194f0:	mov	r1, #1
   194f4:	mov	r3, r4
   194f8:	movt	r2, #1
   194fc:	bl	11564 <__fprintf_chk@plt>
   19500:	movw	r1, #53607	; 0xd167
   19504:	mov	r0, #0
   19508:	mov	r2, #5
   1950c:	movt	r1, #1
   19510:	bl	113b4 <dcgettext@plt>
   19514:	movw	r2, #54325	; 0xd435
   19518:	mov	r3, r0
   1951c:	movw	r0, #2022	; 0x7e6
   19520:	mov	r1, #1
   19524:	str	r0, [sp]
   19528:	movt	r2, #1
   1952c:	mov	r0, r8
   19530:	bl	11564 <__fprintf_chk@plt>
   19534:	movw	r4, #52275	; 0xcc33
   19538:	mov	r1, r8
   1953c:	movt	r4, #1
   19540:	mov	r0, r4
   19544:	bl	112f4 <fputs_unlocked@plt>
   19548:	movw	r1, #53611	; 0xd16b
   1954c:	mov	r0, #0
   19550:	mov	r2, #5
   19554:	movt	r1, #1
   19558:	bl	113b4 <dcgettext@plt>
   1955c:	movw	r3, #53782	; 0xd216
   19560:	mov	r2, r0
   19564:	mov	r0, r8
   19568:	mov	r1, #1
   1956c:	movt	r3, #1
   19570:	bl	11564 <__fprintf_chk@plt>
   19574:	mov	r0, r4
   19578:	mov	r1, r8
   1957c:	bl	112f4 <fputs_unlocked@plt>
   19580:	cmp	r6, #9
   19584:	bhi	195e8 <__assert_fail@plt+0x7fac>
   19588:	add	r0, pc, #0
   1958c:	ldr	pc, [r0, r6, lsl #2]
   19590:	andeq	r9, r1, r0, asr #15
   19594:			; <UNDEFINED> instruction: 0x000195b8
   19598:	strdeq	r9, [r1], -r4
   1959c:	andeq	r9, r1, ip, lsl r6
   195a0:	andeq	r9, r1, r4, asr #12
   195a4:	andeq	r9, r1, ip, ror #12
   195a8:	muleq	r1, r4, r6
   195ac:	andeq	r9, r1, ip, asr #13
   195b0:	andeq	r9, r1, ip, ror #14
   195b4:	andeq	r9, r1, r4, lsl r7
   195b8:	movw	r1, #53816	; 0xd238
   195bc:	mov	r0, #0
   195c0:	mov	r2, #5
   195c4:	movt	r1, #1
   195c8:	bl	113b4 <dcgettext@plt>
   195cc:	ldr	r3, [r7]
   195d0:	mov	r2, r0
   195d4:	mov	r0, r8
   195d8:	mov	r1, #1
   195dc:	sub	sp, fp, #24
   195e0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   195e4:	b	11564 <__fprintf_chk@plt>
   195e8:	movw	r1, #54135	; 0xd377
   195ec:	movt	r1, #1
   195f0:	b	1971c <__assert_fail@plt+0x80e0>
   195f4:	movw	r1, #53832	; 0xd248
   195f8:	mov	r0, #0
   195fc:	mov	r2, #5
   19600:	movt	r1, #1
   19604:	bl	113b4 <dcgettext@plt>
   19608:	mov	r2, r0
   1960c:	ldr	r3, [r7]
   19610:	ldr	r0, [r7, #4]
   19614:	str	r0, [sp]
   19618:	b	19708 <__assert_fail@plt+0x80cc>
   1961c:	movw	r1, #53855	; 0xd25f
   19620:	mov	r0, #0
   19624:	mov	r2, #5
   19628:	movt	r1, #1
   1962c:	bl	113b4 <dcgettext@plt>
   19630:	ldr	r3, [r7]
   19634:	mov	r2, r0
   19638:	ldmib	r7, {r0, r1}
   1963c:	stm	sp, {r0, r1}
   19640:	b	19708 <__assert_fail@plt+0x80cc>
   19644:	movw	r1, #53883	; 0xd27b
   19648:	mov	r0, #0
   1964c:	mov	r2, #5
   19650:	movt	r1, #1
   19654:	bl	113b4 <dcgettext@plt>
   19658:	ldr	r3, [r7]
   1965c:	mov	r2, r0
   19660:	ldmib	r7, {r0, r1, r7}
   19664:	stm	sp, {r0, r1, r7}
   19668:	b	19708 <__assert_fail@plt+0x80cc>
   1966c:	movw	r1, #53915	; 0xd29b
   19670:	mov	r0, #0
   19674:	mov	r2, #5
   19678:	movt	r1, #1
   1967c:	bl	113b4 <dcgettext@plt>
   19680:	ldr	r3, [r7]
   19684:	mov	r2, r0
   19688:	ldmib	r7, {r0, r1, r6, r7}
   1968c:	stm	sp, {r0, r1, r6, r7}
   19690:	b	19708 <__assert_fail@plt+0x80cc>
   19694:	movw	r1, #53951	; 0xd2bf
   19698:	mov	r0, #0
   1969c:	mov	r2, #5
   196a0:	movt	r1, #1
   196a4:	bl	113b4 <dcgettext@plt>
   196a8:	ldr	r3, [r7]
   196ac:	mov	r2, r0
   196b0:	ldmib	r7, {r0, r1, r6}
   196b4:	ldr	r5, [r7, #16]
   196b8:	ldr	r7, [r7, #20]
   196bc:	stm	sp, {r0, r1, r6}
   196c0:	str	r5, [sp, #12]
   196c4:	str	r7, [sp, #16]
   196c8:	b	19708 <__assert_fail@plt+0x80cc>
   196cc:	movw	r1, #53991	; 0xd2e7
   196d0:	mov	r0, #0
   196d4:	mov	r2, #5
   196d8:	movt	r1, #1
   196dc:	bl	113b4 <dcgettext@plt>
   196e0:	ldr	r3, [r7]
   196e4:	mov	r2, r0
   196e8:	ldmib	r7, {r0, r1, r6}
   196ec:	ldr	r5, [r7, #16]
   196f0:	ldr	r4, [r7, #20]
   196f4:	ldr	r7, [r7, #24]
   196f8:	stm	sp, {r0, r1, r6}
   196fc:	str	r5, [sp, #12]
   19700:	str	r4, [sp, #16]
   19704:	str	r7, [sp, #20]
   19708:	mov	r0, r8
   1970c:	mov	r1, #1
   19710:	b	197bc <__assert_fail@plt+0x8180>
   19714:	movw	r1, #54083	; 0xd343
   19718:	movt	r1, #1
   1971c:	mov	r0, #0
   19720:	mov	r2, #5
   19724:	bl	113b4 <dcgettext@plt>
   19728:	mov	ip, r0
   1972c:	ldr	r3, [r7]
   19730:	ldr	r0, [r7, #4]
   19734:	ldr	r1, [r7, #8]
   19738:	ldr	r6, [r7, #12]
   1973c:	ldr	r5, [r7, #16]
   19740:	ldr	r4, [r7, #20]
   19744:	ldr	r2, [r7, #24]
   19748:	ldr	lr, [r7, #28]
   1974c:	ldr	r7, [r7, #32]
   19750:	stm	sp, {r0, r1, r6}
   19754:	str	r5, [sp, #12]
   19758:	str	r4, [sp, #16]
   1975c:	str	r2, [sp, #20]
   19760:	str	lr, [sp, #24]
   19764:	str	r7, [sp, #28]
   19768:	b	197b0 <__assert_fail@plt+0x8174>
   1976c:	movw	r1, #54035	; 0xd313
   19770:	mov	r0, #0
   19774:	mov	r2, #5
   19778:	movt	r1, #1
   1977c:	bl	113b4 <dcgettext@plt>
   19780:	mov	ip, r0
   19784:	ldr	r3, [r7]
   19788:	ldmib	r7, {r0, r1, r6}
   1978c:	ldr	r5, [r7, #16]
   19790:	ldr	r4, [r7, #20]
   19794:	ldr	r2, [r7, #24]
   19798:	ldr	r7, [r7, #28]
   1979c:	stm	sp, {r0, r1, r6}
   197a0:	str	r5, [sp, #12]
   197a4:	str	r4, [sp, #16]
   197a8:	str	r2, [sp, #20]
   197ac:	str	r7, [sp, #24]
   197b0:	mov	r0, r8
   197b4:	mov	r1, #1
   197b8:	mov	r2, ip
   197bc:	bl	11564 <__fprintf_chk@plt>
   197c0:	sub	sp, fp, #24
   197c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   197c8:	push	{r4, sl, fp, lr}
   197cc:	add	fp, sp, #8
   197d0:	sub	sp, sp, #8
   197d4:	ldr	ip, [fp, #8]
   197d8:	mov	lr, #0
   197dc:	ldr	r4, [ip, lr, lsl #2]
   197e0:	add	lr, lr, #1
   197e4:	cmp	r4, #0
   197e8:	bne	197dc <__assert_fail@plt+0x81a0>
   197ec:	sub	r4, lr, #1
   197f0:	str	ip, [sp]
   197f4:	str	r4, [sp, #4]
   197f8:	bl	1949c <__assert_fail@plt+0x7e60>
   197fc:	sub	sp, fp, #8
   19800:	pop	{r4, sl, fp, pc}
   19804:	push	{r4, r5, fp, lr}
   19808:	add	fp, sp, #8
   1980c:	sub	sp, sp, #48	; 0x30
   19810:	ldr	r4, [fp, #8]
   19814:	mov	ip, #0
   19818:	add	lr, sp, #8
   1981c:	ldr	r5, [r4]
   19820:	cmp	r5, #0
   19824:	str	r5, [lr, ip, lsl #2]
   19828:	beq	1983c <__assert_fail@plt+0x8200>
   1982c:	add	ip, ip, #1
   19830:	add	r4, r4, #4
   19834:	cmp	ip, #10
   19838:	bcc	1981c <__assert_fail@plt+0x81e0>
   1983c:	str	lr, [sp]
   19840:	str	ip, [sp, #4]
   19844:	bl	1949c <__assert_fail@plt+0x7e60>
   19848:	sub	sp, fp, #8
   1984c:	pop	{r4, r5, fp, pc}
   19850:	push	{fp, lr}
   19854:	mov	fp, sp
   19858:	sub	sp, sp, #8
   1985c:	add	ip, fp, #8
   19860:	str	ip, [sp, #4]
   19864:	str	ip, [sp]
   19868:	bl	19804 <__assert_fail@plt+0x81c8>
   1986c:	mov	sp, fp
   19870:	pop	{fp, pc}
   19874:	push	{fp, lr}
   19878:	mov	fp, sp
   1987c:	movw	r0, #57820	; 0xe1dc
   19880:	movt	r0, #2
   19884:	ldr	r1, [r0]
   19888:	movw	r0, #52275	; 0xcc33
   1988c:	movt	r0, #1
   19890:	bl	112f4 <fputs_unlocked@plt>
   19894:	movw	r1, #54195	; 0xd3b3
   19898:	mov	r0, #0
   1989c:	mov	r2, #5
   198a0:	movt	r1, #1
   198a4:	bl	113b4 <dcgettext@plt>
   198a8:	movw	r2, #54215	; 0xd3c7
   198ac:	mov	r1, r0
   198b0:	mov	r0, #1
   198b4:	movt	r2, #1
   198b8:	bl	11540 <__printf_chk@plt>
   198bc:	movw	r1, #54237	; 0xd3dd
   198c0:	mov	r0, #0
   198c4:	mov	r2, #5
   198c8:	movt	r1, #1
   198cc:	bl	113b4 <dcgettext@plt>
   198d0:	movw	r2, #47659	; 0xba2b
   198d4:	movw	r3, #52535	; 0xcd37
   198d8:	mov	r1, r0
   198dc:	mov	r0, #1
   198e0:	movt	r2, #1
   198e4:	movt	r3, #1
   198e8:	bl	11540 <__printf_chk@plt>
   198ec:	movw	r1, #54257	; 0xd3f1
   198f0:	mov	r0, #0
   198f4:	mov	r2, #5
   198f8:	movt	r1, #1
   198fc:	bl	113b4 <dcgettext@plt>
   19900:	movw	r2, #54296	; 0xd418
   19904:	mov	r1, r0
   19908:	mov	r0, #1
   1990c:	movt	r2, #1
   19910:	pop	{fp, lr}
   19914:	b	11540 <__printf_chk@plt>
   19918:	b	1991c <__assert_fail@plt+0x82e0>
   1991c:	push	{r4, r5, r6, sl, fp, lr}
   19920:	add	fp, sp, #16
   19924:	mov	r4, r2
   19928:	mov	r5, r1
   1992c:	mov	r6, r0
   19930:	bl	1b5e0 <__assert_fail@plt+0x9fa4>
   19934:	cmp	r0, #0
   19938:	popne	{r4, r5, r6, sl, fp, pc}
   1993c:	cmp	r6, #0
   19940:	beq	19954 <__assert_fail@plt+0x8318>
   19944:	cmp	r5, #0
   19948:	cmpne	r4, #0
   1994c:	bne	19954 <__assert_fail@plt+0x8318>
   19950:	pop	{r4, r5, r6, sl, fp, pc}
   19954:	bl	19da8 <__assert_fail@plt+0x876c>
   19958:	push	{fp, lr}
   1995c:	mov	fp, sp
   19960:	bl	1b270 <__assert_fail@plt+0x9c34>
   19964:	cmp	r0, #0
   19968:	popne	{fp, pc}
   1996c:	bl	19da8 <__assert_fail@plt+0x876c>
   19970:	push	{fp, lr}
   19974:	mov	fp, sp
   19978:	bl	1b270 <__assert_fail@plt+0x9c34>
   1997c:	cmp	r0, #0
   19980:	popne	{fp, pc}
   19984:	bl	19da8 <__assert_fail@plt+0x876c>
   19988:	push	{fp, lr}
   1998c:	mov	fp, sp
   19990:	bl	1b270 <__assert_fail@plt+0x9c34>
   19994:	cmp	r0, #0
   19998:	popne	{fp, pc}
   1999c:	bl	19da8 <__assert_fail@plt+0x876c>
   199a0:	push	{r4, r5, fp, lr}
   199a4:	add	fp, sp, #8
   199a8:	mov	r4, r1
   199ac:	mov	r5, r0
   199b0:	bl	1b2a0 <__assert_fail@plt+0x9c64>
   199b4:	cmp	r0, #0
   199b8:	popne	{r4, r5, fp, pc}
   199bc:	cmp	r5, #0
   199c0:	beq	199d0 <__assert_fail@plt+0x8394>
   199c4:	cmp	r4, #0
   199c8:	bne	199d0 <__assert_fail@plt+0x8394>
   199cc:	pop	{r4, r5, fp, pc}
   199d0:	bl	19da8 <__assert_fail@plt+0x876c>
   199d4:	push	{fp, lr}
   199d8:	mov	fp, sp
   199dc:	cmp	r1, #0
   199e0:	orreq	r1, r1, #1
   199e4:	bl	1b2a0 <__assert_fail@plt+0x9c64>
   199e8:	cmp	r0, #0
   199ec:	popne	{fp, pc}
   199f0:	bl	19da8 <__assert_fail@plt+0x876c>
   199f4:	push	{fp, lr}
   199f8:	mov	fp, sp
   199fc:	clz	r3, r2
   19a00:	lsr	ip, r3, #5
   19a04:	clz	r3, r1
   19a08:	lsr	r3, r3, #5
   19a0c:	orrs	r3, r3, ip
   19a10:	movwne	r1, #1
   19a14:	movwne	r2, #1
   19a18:	bl	1b5e0 <__assert_fail@plt+0x9fa4>
   19a1c:	cmp	r0, #0
   19a20:	popne	{fp, pc}
   19a24:	bl	19da8 <__assert_fail@plt+0x876c>
   19a28:	push	{fp, lr}
   19a2c:	mov	fp, sp
   19a30:	mov	r2, r1
   19a34:	mov	r1, r0
   19a38:	mov	r0, #0
   19a3c:	bl	1b5e0 <__assert_fail@plt+0x9fa4>
   19a40:	cmp	r0, #0
   19a44:	popne	{fp, pc}
   19a48:	bl	19da8 <__assert_fail@plt+0x876c>
   19a4c:	mov	r2, r1
   19a50:	mov	r1, r0
   19a54:	mov	r0, #0
   19a58:	b	199f4 <__assert_fail@plt+0x83b8>
   19a5c:	mov	r2, #1
   19a60:	b	19a64 <__assert_fail@plt+0x8428>
   19a64:	push	{r4, r5, fp, lr}
   19a68:	add	fp, sp, #8
   19a6c:	ldr	r5, [r1]
   19a70:	mov	r4, r1
   19a74:	cmp	r0, #0
   19a78:	beq	19a90 <__assert_fail@plt+0x8454>
   19a7c:	mov	r1, #1
   19a80:	add	r1, r1, r5, lsr #1
   19a84:	adds	r5, r5, r1
   19a88:	bcc	19aa8 <__assert_fail@plt+0x846c>
   19a8c:	bl	19da8 <__assert_fail@plt+0x876c>
   19a90:	cmp	r5, #0
   19a94:	bne	19aa8 <__assert_fail@plt+0x846c>
   19a98:	mov	r1, #64	; 0x40
   19a9c:	cmp	r2, #64	; 0x40
   19aa0:	udiv	r5, r1, r2
   19aa4:	addhi	r5, r5, #1
   19aa8:	mov	r1, r5
   19aac:	bl	1991c <__assert_fail@plt+0x82e0>
   19ab0:	str	r5, [r4]
   19ab4:	pop	{r4, r5, fp, pc}
   19ab8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19abc:	add	fp, sp, #24
   19ac0:	ldr	r6, [r1]
   19ac4:	mov	r8, r1
   19ac8:	ldr	r4, [fp, #8]
   19acc:	add	r1, r6, r6, asr #1
   19ad0:	cmp	r1, r6
   19ad4:	mvnvs	r1, #-2147483648	; 0x80000000
   19ad8:	cmp	r1, r3
   19adc:	mov	r5, r1
   19ae0:	movgt	r5, r3
   19ae4:	cmn	r3, #1
   19ae8:	movle	r5, r1
   19aec:	cmn	r4, #1
   19af0:	ble	19b10 <__assert_fail@plt+0x84d4>
   19af4:	cmp	r4, #0
   19af8:	beq	19b64 <__assert_fail@plt+0x8528>
   19afc:	cmn	r5, #1
   19b00:	ble	19b38 <__assert_fail@plt+0x84fc>
   19b04:	mvn	r7, #-2147483648	; 0x80000000
   19b08:	udiv	r1, r7, r4
   19b0c:	b	19b2c <__assert_fail@plt+0x84f0>
   19b10:	cmn	r5, #1
   19b14:	ble	19b54 <__assert_fail@plt+0x8518>
   19b18:	cmn	r4, #1
   19b1c:	beq	19b64 <__assert_fail@plt+0x8528>
   19b20:	mov	r1, #-2147483648	; 0x80000000
   19b24:	mvn	r7, #-2147483648	; 0x80000000
   19b28:	sdiv	r1, r1, r4
   19b2c:	cmp	r1, r5
   19b30:	bge	19b64 <__assert_fail@plt+0x8528>
   19b34:	b	19b74 <__assert_fail@plt+0x8538>
   19b38:	beq	19b64 <__assert_fail@plt+0x8528>
   19b3c:	mov	r1, #-2147483648	; 0x80000000
   19b40:	mvn	r7, #-2147483648	; 0x80000000
   19b44:	sdiv	r1, r1, r5
   19b48:	cmp	r1, r4
   19b4c:	bge	19b64 <__assert_fail@plt+0x8528>
   19b50:	b	19b74 <__assert_fail@plt+0x8538>
   19b54:	mvn	r7, #-2147483648	; 0x80000000
   19b58:	sdiv	r1, r7, r4
   19b5c:	cmp	r5, r1
   19b60:	blt	19b74 <__assert_fail@plt+0x8538>
   19b64:	mul	r1, r5, r4
   19b68:	mov	r7, #64	; 0x40
   19b6c:	cmp	r1, #63	; 0x3f
   19b70:	bgt	19b7c <__assert_fail@plt+0x8540>
   19b74:	sdiv	r5, r7, r4
   19b78:	mul	r1, r5, r4
   19b7c:	cmp	r0, #0
   19b80:	moveq	r7, #0
   19b84:	streq	r7, [r8]
   19b88:	sub	r7, r5, r6
   19b8c:	cmp	r7, r2
   19b90:	bge	19c34 <__assert_fail@plt+0x85f8>
   19b94:	add	r5, r6, r2
   19b98:	mov	r2, #0
   19b9c:	mov	r1, #0
   19ba0:	cmp	r5, r3
   19ba4:	movwgt	r2, #1
   19ba8:	cmn	r3, #1
   19bac:	movwgt	r1, #1
   19bb0:	cmp	r5, r6
   19bb4:	bvs	19c1c <__assert_fail@plt+0x85e0>
   19bb8:	ands	r1, r1, r2
   19bbc:	bne	19c1c <__assert_fail@plt+0x85e0>
   19bc0:	cmn	r4, #1
   19bc4:	ble	19be4 <__assert_fail@plt+0x85a8>
   19bc8:	cmp	r4, #0
   19bcc:	beq	19c30 <__assert_fail@plt+0x85f4>
   19bd0:	cmn	r5, #1
   19bd4:	ble	19c08 <__assert_fail@plt+0x85cc>
   19bd8:	mvn	r1, #-2147483648	; 0x80000000
   19bdc:	udiv	r1, r1, r4
   19be0:	b	19bfc <__assert_fail@plt+0x85c0>
   19be4:	cmn	r5, #1
   19be8:	ble	19c20 <__assert_fail@plt+0x85e4>
   19bec:	cmn	r4, #1
   19bf0:	beq	19c30 <__assert_fail@plt+0x85f4>
   19bf4:	mov	r1, #-2147483648	; 0x80000000
   19bf8:	sdiv	r1, r1, r4
   19bfc:	cmp	r1, r5
   19c00:	bge	19c30 <__assert_fail@plt+0x85f4>
   19c04:	b	19c1c <__assert_fail@plt+0x85e0>
   19c08:	beq	19c30 <__assert_fail@plt+0x85f4>
   19c0c:	mov	r1, #-2147483648	; 0x80000000
   19c10:	sdiv	r1, r1, r5
   19c14:	cmp	r1, r4
   19c18:	bge	19c30 <__assert_fail@plt+0x85f4>
   19c1c:	bl	19da8 <__assert_fail@plt+0x876c>
   19c20:	mvn	r1, #-2147483648	; 0x80000000
   19c24:	sdiv	r1, r1, r4
   19c28:	cmp	r5, r1
   19c2c:	blt	19c1c <__assert_fail@plt+0x85e0>
   19c30:	mul	r1, r5, r4
   19c34:	bl	199a0 <__assert_fail@plt+0x8364>
   19c38:	str	r5, [r8]
   19c3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c40:	push	{fp, lr}
   19c44:	mov	fp, sp
   19c48:	mov	r1, #1
   19c4c:	bl	1b21c <__assert_fail@plt+0x9be0>
   19c50:	cmp	r0, #0
   19c54:	popne	{fp, pc}
   19c58:	bl	19da8 <__assert_fail@plt+0x876c>
   19c5c:	push	{fp, lr}
   19c60:	mov	fp, sp
   19c64:	bl	1b21c <__assert_fail@plt+0x9be0>
   19c68:	cmp	r0, #0
   19c6c:	popne	{fp, pc}
   19c70:	bl	19da8 <__assert_fail@plt+0x876c>
   19c74:	push	{fp, lr}
   19c78:	mov	fp, sp
   19c7c:	mov	r1, #1
   19c80:	bl	1b21c <__assert_fail@plt+0x9be0>
   19c84:	cmp	r0, #0
   19c88:	popne	{fp, pc}
   19c8c:	bl	19da8 <__assert_fail@plt+0x876c>
   19c90:	push	{fp, lr}
   19c94:	mov	fp, sp
   19c98:	bl	1b21c <__assert_fail@plt+0x9be0>
   19c9c:	cmp	r0, #0
   19ca0:	popne	{fp, pc}
   19ca4:	bl	19da8 <__assert_fail@plt+0x876c>
   19ca8:	push	{r4, r5, r6, sl, fp, lr}
   19cac:	add	fp, sp, #16
   19cb0:	mov	r5, r0
   19cb4:	mov	r0, r1
   19cb8:	mov	r4, r1
   19cbc:	bl	1b270 <__assert_fail@plt+0x9c34>
   19cc0:	cmp	r0, #0
   19cc4:	beq	19ce0 <__assert_fail@plt+0x86a4>
   19cc8:	mov	r1, r5
   19ccc:	mov	r2, r4
   19cd0:	mov	r6, r0
   19cd4:	bl	11384 <memcpy@plt>
   19cd8:	mov	r0, r6
   19cdc:	pop	{r4, r5, r6, sl, fp, pc}
   19ce0:	bl	19da8 <__assert_fail@plt+0x876c>
   19ce4:	push	{r4, r5, r6, sl, fp, lr}
   19ce8:	add	fp, sp, #16
   19cec:	mov	r5, r0
   19cf0:	mov	r0, r1
   19cf4:	mov	r4, r1
   19cf8:	bl	1b270 <__assert_fail@plt+0x9c34>
   19cfc:	cmp	r0, #0
   19d00:	beq	19d1c <__assert_fail@plt+0x86e0>
   19d04:	mov	r1, r5
   19d08:	mov	r2, r4
   19d0c:	mov	r6, r0
   19d10:	bl	11384 <memcpy@plt>
   19d14:	mov	r0, r6
   19d18:	pop	{r4, r5, r6, sl, fp, pc}
   19d1c:	bl	19da8 <__assert_fail@plt+0x876c>
   19d20:	push	{r4, r5, r6, sl, fp, lr}
   19d24:	add	fp, sp, #16
   19d28:	mov	r5, r0
   19d2c:	add	r0, r1, #1
   19d30:	mov	r4, r1
   19d34:	bl	1b270 <__assert_fail@plt+0x9c34>
   19d38:	cmp	r0, #0
   19d3c:	beq	19d64 <__assert_fail@plt+0x8728>
   19d40:	mov	r6, r0
   19d44:	mov	r0, #0
   19d48:	mov	r1, r5
   19d4c:	mov	r2, r4
   19d50:	strb	r0, [r6, r4]
   19d54:	mov	r0, r6
   19d58:	bl	11384 <memcpy@plt>
   19d5c:	mov	r0, r6
   19d60:	pop	{r4, r5, r6, sl, fp, pc}
   19d64:	bl	19da8 <__assert_fail@plt+0x876c>
   19d68:	push	{r4, r5, r6, sl, fp, lr}
   19d6c:	add	fp, sp, #16
   19d70:	mov	r4, r0
   19d74:	bl	114e0 <strlen@plt>
   19d78:	add	r5, r0, #1
   19d7c:	mov	r0, r5
   19d80:	bl	1b270 <__assert_fail@plt+0x9c34>
   19d84:	cmp	r0, #0
   19d88:	beq	19da4 <__assert_fail@plt+0x8768>
   19d8c:	mov	r1, r4
   19d90:	mov	r2, r5
   19d94:	mov	r6, r0
   19d98:	bl	11384 <memcpy@plt>
   19d9c:	mov	r0, r6
   19da0:	pop	{r4, r5, r6, sl, fp, pc}
   19da4:	bl	19da8 <__assert_fail@plt+0x876c>
   19da8:	push	{fp, lr}
   19dac:	mov	fp, sp
   19db0:	movw	r0, #57724	; 0xe17c
   19db4:	movw	r1, #54372	; 0xd464
   19db8:	mov	r2, #5
   19dbc:	movt	r0, #2
   19dc0:	movt	r1, #1
   19dc4:	ldr	r4, [r0]
   19dc8:	mov	r0, #0
   19dcc:	bl	113b4 <dcgettext@plt>
   19dd0:	movw	r2, #53303	; 0xd037
   19dd4:	mov	r3, r0
   19dd8:	mov	r0, r4
   19ddc:	mov	r1, #0
   19de0:	movt	r2, #1
   19de4:	bl	11450 <error@plt>
   19de8:	bl	11618 <abort@plt>
   19dec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19df0:	add	fp, sp, #24
   19df4:	sub	sp, sp, #16
   19df8:	mov	r8, r0
   19dfc:	ldr	r0, [fp, #16]
   19e00:	mov	r7, r3
   19e04:	mov	r4, r2
   19e08:	mov	r2, r1
   19e0c:	add	r3, sp, #8
   19e10:	mov	r1, #0
   19e14:	str	r0, [sp]
   19e18:	mov	r0, r8
   19e1c:	bl	19f00 <__assert_fail@plt+0x88c4>
   19e20:	cmp	r0, #0
   19e24:	bne	19ed4 <__assert_fail@plt+0x8898>
   19e28:	ldr	r6, [sp, #8]
   19e2c:	ldr	r5, [sp, #12]
   19e30:	subs	r0, r6, r4
   19e34:	sbcs	r0, r5, r7
   19e38:	blt	19e5c <__assert_fail@plt+0x8820>
   19e3c:	ldr	r1, [fp, #8]
   19e40:	ldr	r0, [fp, #12]
   19e44:	subs	r1, r1, r6
   19e48:	sbcs	r0, r0, r5
   19e4c:	movge	r0, r6
   19e50:	movge	r1, r5
   19e54:	subge	sp, fp, #24
   19e58:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   19e5c:	subs	r0, r6, #1073741824	; 0x40000000
   19e60:	sbcs	r0, r5, #0
   19e64:	blt	19e70 <__assert_fail@plt+0x8834>
   19e68:	bl	11510 <__errno_location@plt>
   19e6c:	b	19e88 <__assert_fail@plt+0x884c>
   19e70:	bl	11510 <__errno_location@plt>
   19e74:	mvn	r2, #1073741824	; 0x40000000
   19e78:	mvn	r1, #0
   19e7c:	subs	r2, r2, r6
   19e80:	sbcs	r1, r1, r5
   19e84:	blt	19e90 <__assert_fail@plt+0x8854>
   19e88:	mov	r1, #75	; 0x4b
   19e8c:	b	19e94 <__assert_fail@plt+0x8858>
   19e90:	mov	r1, #34	; 0x22
   19e94:	str	r1, [r0]
   19e98:	ldr	r6, [r0]
   19e9c:	ldr	r4, [fp, #24]
   19ea0:	ldr	r5, [fp, #20]
   19ea4:	mov	r0, r8
   19ea8:	bl	18e10 <__assert_fail@plt+0x77d4>
   19eac:	subs	r1, r6, #22
   19eb0:	movw	r2, #53299	; 0xd033
   19eb4:	str	r0, [sp]
   19eb8:	mov	r3, r5
   19ebc:	movne	r1, r6
   19ec0:	cmp	r4, #0
   19ec4:	movt	r2, #1
   19ec8:	movweq	r4, #1
   19ecc:	mov	r0, r4
   19ed0:	bl	11450 <error@plt>
   19ed4:	cmp	r0, #1
   19ed8:	beq	19e68 <__assert_fail@plt+0x882c>
   19edc:	cmp	r0, #3
   19ee0:	bne	19ef0 <__assert_fail@plt+0x88b4>
   19ee4:	bl	11510 <__errno_location@plt>
   19ee8:	mov	r1, #0
   19eec:	b	19e94 <__assert_fail@plt+0x8858>
   19ef0:	bl	11510 <__errno_location@plt>
   19ef4:	b	19e98 <__assert_fail@plt+0x885c>
   19ef8:	mov	r1, #10
   19efc:	b	19dec <__assert_fail@plt+0x87b0>
   19f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f04:	add	fp, sp, #28
   19f08:	sub	sp, sp, #28
   19f0c:	cmp	r2, #37	; 0x25
   19f10:	str	r3, [sp, #12]
   19f14:	bcs	1a424 <__assert_fail@plt+0x8de8>
   19f18:	ldr	sl, [fp, #8]
   19f1c:	mov	r4, r2
   19f20:	mov	r6, r1
   19f24:	mov	r5, r0
   19f28:	bl	11510 <__errno_location@plt>
   19f2c:	add	r8, sp, #24
   19f30:	cmp	r6, #0
   19f34:	mov	r7, r0
   19f38:	mov	r0, #0
   19f3c:	mov	r2, r4
   19f40:	movne	r8, r6
   19f44:	str	r0, [r7]
   19f48:	mov	r0, r5
   19f4c:	mov	r1, r8
   19f50:	bl	11570 <strtoimax@plt>
   19f54:	str	r1, [sp, #20]
   19f58:	str	r0, [sp, #16]
   19f5c:	ldr	r4, [r8]
   19f60:	cmp	r4, r5
   19f64:	beq	19f90 <__assert_fail@plt+0x8954>
   19f68:	mov	r6, r0
   19f6c:	ldr	r0, [r7]
   19f70:	mov	r9, r1
   19f74:	cmp	r0, #0
   19f78:	beq	19fcc <__assert_fail@plt+0x8990>
   19f7c:	mov	r7, #4
   19f80:	cmp	r0, #34	; 0x22
   19f84:	bne	1a418 <__assert_fail@plt+0x8ddc>
   19f88:	mov	r7, #1
   19f8c:	b	19fd0 <__assert_fail@plt+0x8994>
   19f90:	cmp	sl, #0
   19f94:	mov	r7, #4
   19f98:	ldrbne	r1, [r5]
   19f9c:	cmpne	r1, #0
   19fa0:	beq	1a418 <__assert_fail@plt+0x8ddc>
   19fa4:	mov	r0, sl
   19fa8:	bl	114ec <strchr@plt>
   19fac:	cmp	r0, #0
   19fb0:	beq	1a418 <__assert_fail@plt+0x8ddc>
   19fb4:	mov	r9, #0
   19fb8:	mov	r6, #1
   19fbc:	mov	r7, #0
   19fc0:	str	r9, [sp, #20]
   19fc4:	str	r6, [sp, #16]
   19fc8:	b	19fd8 <__assert_fail@plt+0x899c>
   19fcc:	mov	r7, r0
   19fd0:	cmp	sl, #0
   19fd4:	beq	1a07c <__assert_fail@plt+0x8a40>
   19fd8:	ldrb	r5, [r4]
   19fdc:	cmp	r5, #0
   19fe0:	beq	1a084 <__assert_fail@plt+0x8a48>
   19fe4:	mov	r0, sl
   19fe8:	mov	r1, r5
   19fec:	bl	114ec <strchr@plt>
   19ff0:	cmp	r0, #0
   19ff4:	beq	1a08c <__assert_fail@plt+0x8a50>
   19ff8:	sub	r0, r5, #69	; 0x45
   19ffc:	str	r7, [sp, #4]
   1a000:	mov	r1, #1
   1a004:	mov	r7, #1024	; 0x400
   1a008:	cmp	r0, #21
   1a00c:	str	r1, [sp, #8]
   1a010:	bhi	1a028 <__assert_fail@plt+0x89ec>
   1a014:	movw	r2, #35141	; 0x8945
   1a018:	mov	r1, #1
   1a01c:	movt	r2, #48	; 0x30
   1a020:	tst	r2, r1, lsl r0
   1a024:	bne	1a044 <__assert_fail@plt+0x8a08>
   1a028:	sub	r0, r5, #103	; 0x67
   1a02c:	cmp	r0, #13
   1a030:	bhi	1a09c <__assert_fail@plt+0x8a60>
   1a034:	mov	r1, #1
   1a038:	movw	r2, #8273	; 0x2051
   1a03c:	tst	r2, r1, lsl r0
   1a040:	beq	1a09c <__assert_fail@plt+0x8a60>
   1a044:	ldr	r0, [fp, #8]
   1a048:	mov	r1, #48	; 0x30
   1a04c:	bl	114ec <strchr@plt>
   1a050:	cmp	r0, #0
   1a054:	beq	1a09c <__assert_fail@plt+0x8a60>
   1a058:	ldrb	r0, [r4, #1]
   1a05c:	ldr	sl, [sp, #12]
   1a060:	cmp	r0, #66	; 0x42
   1a064:	cmpne	r0, #68	; 0x44
   1a068:	bne	1a170 <__assert_fail@plt+0x8b34>
   1a06c:	mov	r0, #2
   1a070:	mov	r7, #1000	; 0x3e8
   1a074:	str	r0, [sp, #8]
   1a078:	b	1a0a0 <__assert_fail@plt+0x8a64>
   1a07c:	ldr	r0, [sp, #12]
   1a080:	b	1a094 <__assert_fail@plt+0x8a58>
   1a084:	ldr	sl, [sp, #12]
   1a088:	b	1a414 <__assert_fail@plt+0x8dd8>
   1a08c:	ldr	r0, [sp, #12]
   1a090:	orr	r7, r7, #2
   1a094:	stm	r0, {r6, r9}
   1a098:	b	1a418 <__assert_fail@plt+0x8ddc>
   1a09c:	ldr	sl, [sp, #12]
   1a0a0:	cmp	r5, #89	; 0x59
   1a0a4:	bgt	1a10c <__assert_fail@plt+0x8ad0>
   1a0a8:	sub	r0, r5, #66	; 0x42
   1a0ac:	cmp	r0, #14
   1a0b0:	bhi	1a190 <__assert_fail@plt+0x8b54>
   1a0b4:	add	r1, pc, #0
   1a0b8:	ldr	pc, [r1, r0, lsl #2]
   1a0bc:	strdeq	sl, [r1], -r8
   1a0c0:	andeq	sl, r1, r8, lsr #5
   1a0c4:	andeq	sl, r1, r8, lsr #5
   1a0c8:			; <UNDEFINED> instruction: 0x0001a2b8
   1a0cc:	andeq	sl, r1, r8, lsr #5
   1a0d0:	andeq	sl, r1, ip, ror #3
   1a0d4:	andeq	sl, r1, r8, lsr #5
   1a0d8:	andeq	sl, r1, r8, lsr #5
   1a0dc:	andeq	sl, r1, r8, lsr #5
   1a0e0:	andeq	sl, r1, r4, lsl r2
   1a0e4:	andeq	sl, r1, r8, lsr #5
   1a0e8:	andeq	sl, r1, r8, lsr #4
   1a0ec:	andeq	sl, r1, r8, lsr #5
   1a0f0:	andeq	sl, r1, r8, lsr #5
   1a0f4:	andeq	sl, r1, r0, ror #5
   1a0f8:	cmn	r9, #1
   1a0fc:	ble	1a308 <__assert_fail@plt+0x8ccc>
   1a100:	cmp	r9, #2097152	; 0x200000
   1a104:	blt	1a334 <__assert_fail@plt+0x8cf8>
   1a108:	b	1a3b4 <__assert_fail@plt+0x8d78>
   1a10c:	cmp	r5, #115	; 0x73
   1a110:	bgt	1a1c8 <__assert_fail@plt+0x8b8c>
   1a114:	sub	r0, r5, #98	; 0x62
   1a118:	cmp	r0, #11
   1a11c:	bhi	1a278 <__assert_fail@plt+0x8c3c>
   1a120:	add	r1, pc, #4
   1a124:	mov	r4, #0
   1a128:	ldr	pc, [r1, r0, lsl #2]
   1a12c:	andeq	sl, r1, ip, asr r1
   1a130:	andeq	sl, r1, r8, ror #7
   1a134:	andeq	sl, r1, r8, lsr #5
   1a138:	andeq	sl, r1, r8, lsr #5
   1a13c:	andeq	sl, r1, r8, lsr #5
   1a140:	andeq	sl, r1, ip, ror #3
   1a144:	andeq	sl, r1, r8, lsr #5
   1a148:	andeq	sl, r1, r8, lsr #5
   1a14c:	andeq	sl, r1, r8, lsr #5
   1a150:	andeq	sl, r1, r4, lsl r2
   1a154:	andeq	sl, r1, r8, lsr #5
   1a158:	andeq	sl, r1, r8, lsr #4
   1a15c:	cmn	r9, #1
   1a160:	ble	1a348 <__assert_fail@plt+0x8d0c>
   1a164:	cmp	r9, #4194304	; 0x400000
   1a168:	blt	1a374 <__assert_fail@plt+0x8d38>
   1a16c:	b	1a3b4 <__assert_fail@plt+0x8d78>
   1a170:	cmp	r0, #105	; 0x69
   1a174:	bne	1a0a0 <__assert_fail@plt+0x8a64>
   1a178:	ldrb	r0, [r4, #2]
   1a17c:	mov	r1, #1
   1a180:	cmp	r0, #66	; 0x42
   1a184:	movweq	r1, #3
   1a188:	str	r1, [sp, #8]
   1a18c:	b	1a0a0 <__assert_fail@plt+0x8a64>
   1a190:	cmp	r5, #84	; 0x54
   1a194:	beq	1a250 <__assert_fail@plt+0x8c14>
   1a198:	cmp	r5, #89	; 0x59
   1a19c:	bne	1a2a8 <__assert_fail@plt+0x8c6c>
   1a1a0:	mov	r4, #0
   1a1a4:	mvn	r6, #7
   1a1a8:	add	r5, sp, #16
   1a1ac:	mov	r0, r5
   1a1b0:	mov	r1, r7
   1a1b4:	bl	1a444 <__assert_fail@plt+0x8e08>
   1a1b8:	orr	r4, r0, r4
   1a1bc:	adds	r6, r6, #1
   1a1c0:	bne	1a1ac <__assert_fail@plt+0x8b70>
   1a1c4:	b	1a3e8 <__assert_fail@plt+0x8dac>
   1a1c8:	cmp	r5, #116	; 0x74
   1a1cc:	beq	1a250 <__assert_fail@plt+0x8c14>
   1a1d0:	cmp	r5, #119	; 0x77
   1a1d4:	bne	1a2a8 <__assert_fail@plt+0x8c6c>
   1a1d8:	cmn	r9, #1
   1a1dc:	ble	1a388 <__assert_fail@plt+0x8d4c>
   1a1e0:	cmp	r9, #1073741824	; 0x40000000
   1a1e4:	bge	1a3b4 <__assert_fail@plt+0x8d78>
   1a1e8:	b	1a3d0 <__assert_fail@plt+0x8d94>
   1a1ec:	mov	r4, #0
   1a1f0:	mvn	r6, #2
   1a1f4:	add	r5, sp, #16
   1a1f8:	mov	r0, r5
   1a1fc:	mov	r1, r7
   1a200:	bl	1a444 <__assert_fail@plt+0x8e08>
   1a204:	orr	r4, r0, r4
   1a208:	adds	r6, r6, #1
   1a20c:	bne	1a1f8 <__assert_fail@plt+0x8bbc>
   1a210:	b	1a3e8 <__assert_fail@plt+0x8dac>
   1a214:	add	r0, sp, #16
   1a218:	mov	r1, r7
   1a21c:	bl	1a444 <__assert_fail@plt+0x8e08>
   1a220:	mov	r4, r0
   1a224:	b	1a3e8 <__assert_fail@plt+0x8dac>
   1a228:	mov	r4, #0
   1a22c:	mvn	r6, #1
   1a230:	add	r5, sp, #16
   1a234:	mov	r0, r5
   1a238:	mov	r1, r7
   1a23c:	bl	1a444 <__assert_fail@plt+0x8e08>
   1a240:	orr	r4, r0, r4
   1a244:	adds	r6, r6, #1
   1a248:	bne	1a234 <__assert_fail@plt+0x8bf8>
   1a24c:	b	1a3e8 <__assert_fail@plt+0x8dac>
   1a250:	mov	r4, #0
   1a254:	mvn	r6, #3
   1a258:	add	r5, sp, #16
   1a25c:	mov	r0, r5
   1a260:	mov	r1, r7
   1a264:	bl	1a444 <__assert_fail@plt+0x8e08>
   1a268:	orr	r4, r0, r4
   1a26c:	adds	r6, r6, #1
   1a270:	bne	1a25c <__assert_fail@plt+0x8c20>
   1a274:	b	1a3e8 <__assert_fail@plt+0x8dac>
   1a278:	cmp	r5, #90	; 0x5a
   1a27c:	bne	1a2a8 <__assert_fail@plt+0x8c6c>
   1a280:	mov	r4, #0
   1a284:	mvn	r6, #6
   1a288:	add	r5, sp, #16
   1a28c:	mov	r0, r5
   1a290:	mov	r1, r7
   1a294:	bl	1a444 <__assert_fail@plt+0x8e08>
   1a298:	orr	r4, r0, r4
   1a29c:	adds	r6, r6, #1
   1a2a0:	bne	1a28c <__assert_fail@plt+0x8c50>
   1a2a4:	b	1a3e8 <__assert_fail@plt+0x8dac>
   1a2a8:	stm	sl, {r6, r9}
   1a2ac:	ldr	r7, [sp, #4]
   1a2b0:	orr	r7, r7, #2
   1a2b4:	b	1a418 <__assert_fail@plt+0x8ddc>
   1a2b8:	mov	r4, #0
   1a2bc:	mvn	r6, #5
   1a2c0:	add	r5, sp, #16
   1a2c4:	mov	r0, r5
   1a2c8:	mov	r1, r7
   1a2cc:	bl	1a444 <__assert_fail@plt+0x8e08>
   1a2d0:	orr	r4, r0, r4
   1a2d4:	adds	r6, r6, #1
   1a2d8:	bne	1a2c4 <__assert_fail@plt+0x8c88>
   1a2dc:	b	1a3e8 <__assert_fail@plt+0x8dac>
   1a2e0:	mov	r4, #0
   1a2e4:	mvn	r6, #4
   1a2e8:	add	r5, sp, #16
   1a2ec:	mov	r0, r5
   1a2f0:	mov	r1, r7
   1a2f4:	bl	1a444 <__assert_fail@plt+0x8e08>
   1a2f8:	orr	r4, r0, r4
   1a2fc:	adds	r6, r6, #1
   1a300:	bne	1a2ec <__assert_fail@plt+0x8cb0>
   1a304:	b	1a3e8 <__assert_fail@plt+0x8dac>
   1a308:	and	r0, r6, r9
   1a30c:	cmn	r0, #1
   1a310:	beq	1a334 <__assert_fail@plt+0x8cf8>
   1a314:	mov	r0, #0
   1a318:	mov	r1, #-2147483648	; 0x80000000
   1a31c:	mov	r2, r6
   1a320:	mov	r3, r9
   1a324:	bl	1b61c <__assert_fail@plt+0x9fe0>
   1a328:	subs	r0, r0, #1024	; 0x400
   1a32c:	sbcs	r0, r1, #0
   1a330:	blt	1a3b4 <__assert_fail@plt+0x8d78>
   1a334:	lsl	r0, r9, #10
   1a338:	lsl	r1, r6, #10
   1a33c:	mov	r4, #0
   1a340:	orr	r0, r0, r6, lsr #22
   1a344:	b	1a3e0 <__assert_fail@plt+0x8da4>
   1a348:	and	r0, r6, r9
   1a34c:	cmn	r0, #1
   1a350:	beq	1a374 <__assert_fail@plt+0x8d38>
   1a354:	mov	r0, #0
   1a358:	mov	r1, #-2147483648	; 0x80000000
   1a35c:	mov	r2, r6
   1a360:	mov	r3, r9
   1a364:	bl	1b61c <__assert_fail@plt+0x9fe0>
   1a368:	subs	r0, r0, #512	; 0x200
   1a36c:	sbcs	r0, r1, #0
   1a370:	blt	1a3b4 <__assert_fail@plt+0x8d78>
   1a374:	lsl	r0, r9, #9
   1a378:	lsl	r1, r6, #9
   1a37c:	mov	r4, #0
   1a380:	orr	r0, r0, r6, lsr #23
   1a384:	b	1a3e0 <__assert_fail@plt+0x8da4>
   1a388:	and	r0, r6, r9
   1a38c:	cmn	r0, #1
   1a390:	beq	1a3d0 <__assert_fail@plt+0x8d94>
   1a394:	mov	r0, #0
   1a398:	mov	r1, #-2147483648	; 0x80000000
   1a39c:	mov	r2, r6
   1a3a0:	mov	r3, r9
   1a3a4:	bl	1b61c <__assert_fail@plt+0x9fe0>
   1a3a8:	subs	r0, r0, #2
   1a3ac:	sbcs	r0, r1, #0
   1a3b0:	bge	1a3d0 <__assert_fail@plt+0x8d94>
   1a3b4:	mvn	r0, #-2147483648	; 0x80000000
   1a3b8:	cmp	r9, #0
   1a3bc:	mvn	r1, #0
   1a3c0:	mov	r4, #1
   1a3c4:	movlt	r0, #-2147483648	; 0x80000000
   1a3c8:	movwlt	r1, #0
   1a3cc:	b	1a3e0 <__assert_fail@plt+0x8da4>
   1a3d0:	lsl	r0, r9, #1
   1a3d4:	lsl	r1, r6, #1
   1a3d8:	mov	r4, #0
   1a3dc:	orr	r0, r0, r6, lsr #31
   1a3e0:	str	r1, [sp, #16]
   1a3e4:	str	r0, [sp, #20]
   1a3e8:	ldr	r0, [r8]
   1a3ec:	ldr	r2, [sp, #8]
   1a3f0:	ldr	r7, [sp, #4]
   1a3f4:	add	r1, r0, r2
   1a3f8:	orr	r7, r4, r7
   1a3fc:	str	r1, [r8]
   1a400:	ldrb	r0, [r0, r2]
   1a404:	ldr	r6, [sp, #16]
   1a408:	ldr	r9, [sp, #20]
   1a40c:	cmp	r0, #0
   1a410:	orrne	r7, r7, #2
   1a414:	stm	sl, {r6, r9}
   1a418:	mov	r0, r7
   1a41c:	sub	sp, fp, #28
   1a420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a424:	movw	r0, #54389	; 0xd475
   1a428:	movw	r1, #54427	; 0xd49b
   1a42c:	movw	r3, #54443	; 0xd4ab
   1a430:	mov	r2, #85	; 0x55
   1a434:	movt	r0, #1
   1a438:	movt	r1, #1
   1a43c:	movt	r3, #1
   1a440:	bl	1163c <__assert_fail@plt>
   1a444:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a448:	add	fp, sp, #24
   1a44c:	mov	r5, r1
   1a450:	mov	r4, r0
   1a454:	cmn	r1, #1
   1a458:	ble	1a490 <__assert_fail@plt+0x8e54>
   1a45c:	ldrd	r8, [r4]
   1a460:	cmp	r5, #0
   1a464:	beq	1a4c8 <__assert_fail@plt+0x8e8c>
   1a468:	cmn	r9, #1
   1a46c:	ble	1a4d4 <__assert_fail@plt+0x8e98>
   1a470:	asr	r3, r5, #31
   1a474:	mvn	r0, #0
   1a478:	mvn	r1, #-2147483648	; 0x80000000
   1a47c:	mov	r2, r5
   1a480:	bl	1b61c <__assert_fail@plt+0x9fe0>
   1a484:	subs	r0, r0, r8
   1a488:	sbcs	r0, r1, r9
   1a48c:	b	1a504 <__assert_fail@plt+0x8ec8>
   1a490:	ldrd	r6, [r4]
   1a494:	cmn	r7, #1
   1a498:	ble	1a52c <__assert_fail@plt+0x8ef0>
   1a49c:	cmn	r5, #1
   1a4a0:	beq	1a54c <__assert_fail@plt+0x8f10>
   1a4a4:	asr	r3, r5, #31
   1a4a8:	mov	r0, #0
   1a4ac:	mov	r1, #-2147483648	; 0x80000000
   1a4b0:	mov	r2, r5
   1a4b4:	bl	1b61c <__assert_fail@plt+0x9fe0>
   1a4b8:	subs	r0, r0, r6
   1a4bc:	sbcs	r0, r1, r7
   1a4c0:	blt	1a510 <__assert_fail@plt+0x8ed4>
   1a4c4:	b	1a54c <__assert_fail@plt+0x8f10>
   1a4c8:	mov	r6, r8
   1a4cc:	mov	r7, r9
   1a4d0:	b	1a54c <__assert_fail@plt+0x8f10>
   1a4d4:	and	r0, r8, r9
   1a4d8:	mvn	r6, #0
   1a4dc:	mvn	r7, #0
   1a4e0:	cmn	r0, #1
   1a4e4:	beq	1a54c <__assert_fail@plt+0x8f10>
   1a4e8:	mov	r0, #0
   1a4ec:	mov	r1, #-2147483648	; 0x80000000
   1a4f0:	mov	r2, r8
   1a4f4:	mov	r3, r9
   1a4f8:	bl	1b61c <__assert_fail@plt+0x9fe0>
   1a4fc:	subs	r0, r0, r5
   1a500:	sbcs	r0, r1, r5, asr #31
   1a504:	mov	r7, r9
   1a508:	mov	r6, r8
   1a50c:	bge	1a54c <__assert_fail@plt+0x8f10>
   1a510:	mvn	r1, #-2147483648	; 0x80000000
   1a514:	cmp	r7, #0
   1a518:	mvn	r2, #0
   1a51c:	mov	r0, #1
   1a520:	movlt	r1, #-2147483648	; 0x80000000
   1a524:	movwlt	r2, #0
   1a528:	b	1a560 <__assert_fail@plt+0x8f24>
   1a52c:	asr	r3, r5, #31
   1a530:	mvn	r0, #0
   1a534:	mvn	r1, #-2147483648	; 0x80000000
   1a538:	mov	r2, r5
   1a53c:	bl	1b61c <__assert_fail@plt+0x9fe0>
   1a540:	subs	r0, r6, r0
   1a544:	sbcs	r0, r7, r1
   1a548:	blt	1a510 <__assert_fail@plt+0x8ed4>
   1a54c:	umull	r2, r0, r6, r5
   1a550:	asr	r1, r5, #31
   1a554:	mla	r0, r6, r1, r0
   1a558:	mla	r1, r7, r5, r0
   1a55c:	mov	r0, #0
   1a560:	str	r2, [r4]
   1a564:	str	r1, [r4, #4]
   1a568:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a56c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a570:	add	fp, sp, #28
   1a574:	sub	sp, sp, #12
   1a578:	cmp	r2, #37	; 0x25
   1a57c:	bcs	1a9dc <__assert_fail@plt+0x93a0>
   1a580:	ldr	sl, [fp, #8]
   1a584:	mov	r9, r3
   1a588:	mov	r4, r2
   1a58c:	mov	r6, r1
   1a590:	mov	r5, r0
   1a594:	bl	11510 <__errno_location@plt>
   1a598:	add	r8, sp, #8
   1a59c:	cmp	r6, #0
   1a5a0:	mov	r7, r0
   1a5a4:	mov	r0, #0
   1a5a8:	mov	r2, r4
   1a5ac:	movne	r8, r6
   1a5b0:	str	r0, [r7]
   1a5b4:	mov	r0, r5
   1a5b8:	mov	r1, r8
   1a5bc:	bl	11324 <strtol@plt>
   1a5c0:	str	r0, [sp, #4]
   1a5c4:	str	r9, [sp]
   1a5c8:	ldr	r6, [r8]
   1a5cc:	cmp	r6, r5
   1a5d0:	beq	1a5f8 <__assert_fail@plt+0x8fbc>
   1a5d4:	mov	r4, r0
   1a5d8:	ldr	r0, [r7]
   1a5dc:	cmp	r0, #0
   1a5e0:	beq	1a62c <__assert_fail@plt+0x8ff0>
   1a5e4:	mov	r9, #4
   1a5e8:	cmp	r0, #34	; 0x22
   1a5ec:	bne	1a9d0 <__assert_fail@plt+0x9394>
   1a5f0:	mov	r9, #1
   1a5f4:	b	1a630 <__assert_fail@plt+0x8ff4>
   1a5f8:	cmp	sl, #0
   1a5fc:	mov	r9, #4
   1a600:	ldrbne	r1, [r5]
   1a604:	cmpne	r1, #0
   1a608:	beq	1a9d0 <__assert_fail@plt+0x9394>
   1a60c:	mov	r0, sl
   1a610:	bl	114ec <strchr@plt>
   1a614:	cmp	r0, #0
   1a618:	beq	1a9d0 <__assert_fail@plt+0x9394>
   1a61c:	mov	r4, #1
   1a620:	mov	r9, #0
   1a624:	str	r4, [sp, #4]
   1a628:	b	1a638 <__assert_fail@plt+0x8ffc>
   1a62c:	mov	r9, r0
   1a630:	cmp	sl, #0
   1a634:	beq	1a9c8 <__assert_fail@plt+0x938c>
   1a638:	ldrb	r5, [r6]
   1a63c:	cmp	r5, #0
   1a640:	beq	1a9c8 <__assert_fail@plt+0x938c>
   1a644:	mov	r0, sl
   1a648:	mov	r1, r5
   1a64c:	bl	114ec <strchr@plt>
   1a650:	cmp	r0, #0
   1a654:	beq	1a8e0 <__assert_fail@plt+0x92a4>
   1a658:	sub	r0, r5, #69	; 0x45
   1a65c:	mov	r7, #1024	; 0x400
   1a660:	cmp	r0, #21
   1a664:	bhi	1a67c <__assert_fail@plt+0x9040>
   1a668:	movw	r2, #35141	; 0x8945
   1a66c:	mov	r1, #1
   1a670:	movt	r2, #48	; 0x30
   1a674:	tst	r2, r1, lsl r0
   1a678:	bne	1a698 <__assert_fail@plt+0x905c>
   1a67c:	sub	r0, r5, #103	; 0x67
   1a680:	cmp	r0, #13
   1a684:	bhi	1a6cc <__assert_fail@plt+0x9090>
   1a688:	mov	r1, #1
   1a68c:	movw	r2, #8273	; 0x2051
   1a690:	tst	r2, r1, lsl r0
   1a694:	beq	1a6cc <__assert_fail@plt+0x9090>
   1a698:	mov	r0, sl
   1a69c:	mov	r1, #48	; 0x30
   1a6a0:	bl	114ec <strchr@plt>
   1a6a4:	cmp	r0, #0
   1a6a8:	beq	1a6cc <__assert_fail@plt+0x9090>
   1a6ac:	ldrb	r0, [r6, #1]
   1a6b0:	mov	sl, #1
   1a6b4:	cmp	r0, #66	; 0x42
   1a6b8:	cmpne	r0, #68	; 0x44
   1a6bc:	bne	1a7ac <__assert_fail@plt+0x9170>
   1a6c0:	mov	sl, #2
   1a6c4:	mov	r7, #1000	; 0x3e8
   1a6c8:	b	1a6d0 <__assert_fail@plt+0x9094>
   1a6cc:	mov	sl, #1
   1a6d0:	cmp	r5, #89	; 0x59
   1a6d4:	bgt	1a73c <__assert_fail@plt+0x9100>
   1a6d8:	sub	r0, r5, #66	; 0x42
   1a6dc:	cmp	r0, #14
   1a6e0:	bhi	1a7c8 <__assert_fail@plt+0x918c>
   1a6e4:	add	r1, pc, #0
   1a6e8:	ldr	pc, [r1, r0, lsl #2]
   1a6ec:	andeq	sl, r1, r8, lsr #14
   1a6f0:	andeq	sl, r1, r0, ror #17
   1a6f4:	andeq	sl, r1, r0, ror #17
   1a6f8:	andeq	sl, r1, ip, ror #17
   1a6fc:	andeq	sl, r1, r0, ror #17
   1a700:	andeq	sl, r1, r4, lsr #16
   1a704:	andeq	sl, r1, r0, ror #17
   1a708:	andeq	sl, r1, r0, ror #17
   1a70c:	andeq	sl, r1, r0, ror #17
   1a710:	andeq	sl, r1, ip, asr #16
   1a714:	andeq	sl, r1, r0, ror #17
   1a718:	andeq	sl, r1, r0, ror #16
   1a71c:	andeq	sl, r1, r0, ror #17
   1a720:	andeq	sl, r1, r0, ror #17
   1a724:	andeq	sl, r1, r4, lsl r9
   1a728:	cmn	r4, #1
   1a72c:	ble	1a93c <__assert_fail@plt+0x9300>
   1a730:	cmp	r4, #2097152	; 0x200000
   1a734:	blt	1a950 <__assert_fail@plt+0x9314>
   1a738:	b	1a988 <__assert_fail@plt+0x934c>
   1a73c:	cmp	r5, #115	; 0x73
   1a740:	bgt	1a800 <__assert_fail@plt+0x91c4>
   1a744:	sub	r0, r5, #98	; 0x62
   1a748:	cmp	r0, #11
   1a74c:	bhi	1a8b0 <__assert_fail@plt+0x9274>
   1a750:	add	r1, pc, #4
   1a754:	mov	r5, #0
   1a758:	ldr	pc, [r1, r0, lsl #2]
   1a75c:	andeq	sl, r1, ip, lsl #15
   1a760:	andeq	sl, r1, r8, lsr #19
   1a764:	andeq	sl, r1, r0, ror #17
   1a768:	andeq	sl, r1, r0, ror #17
   1a76c:	andeq	sl, r1, r0, ror #17
   1a770:	andeq	sl, r1, r4, lsr #16
   1a774:	andeq	sl, r1, r0, ror #17
   1a778:	andeq	sl, r1, r0, ror #17
   1a77c:	andeq	sl, r1, r0, ror #17
   1a780:	andeq	sl, r1, ip, asr #16
   1a784:	andeq	sl, r1, r0, ror #17
   1a788:	andeq	sl, r1, r0, ror #16
   1a78c:	cmn	r4, #1
   1a790:	ble	1a958 <__assert_fail@plt+0x931c>
   1a794:	movw	r0, #65535	; 0xffff
   1a798:	movt	r0, #31
   1a79c:	add	r0, r0, #2097152	; 0x200000
   1a7a0:	cmp	r4, r0
   1a7a4:	ble	1a96c <__assert_fail@plt+0x9330>
   1a7a8:	b	1a988 <__assert_fail@plt+0x934c>
   1a7ac:	cmp	r0, #105	; 0x69
   1a7b0:	bne	1a6d0 <__assert_fail@plt+0x9094>
   1a7b4:	ldrb	r0, [r6, #2]
   1a7b8:	mov	sl, #1
   1a7bc:	cmp	r0, #66	; 0x42
   1a7c0:	movweq	sl, #3
   1a7c4:	b	1a6d0 <__assert_fail@plt+0x9094>
   1a7c8:	cmp	r5, #84	; 0x54
   1a7cc:	beq	1a888 <__assert_fail@plt+0x924c>
   1a7d0:	cmp	r5, #89	; 0x59
   1a7d4:	bne	1a8e0 <__assert_fail@plt+0x92a4>
   1a7d8:	mov	r5, #0
   1a7dc:	mvn	r6, #7
   1a7e0:	add	r4, sp, #4
   1a7e4:	mov	r0, r4
   1a7e8:	mov	r1, r7
   1a7ec:	bl	1a9fc <__assert_fail@plt+0x93c0>
   1a7f0:	orr	r5, r0, r5
   1a7f4:	adds	r6, r6, #1
   1a7f8:	bne	1a7e4 <__assert_fail@plt+0x91a8>
   1a7fc:	b	1a9a8 <__assert_fail@plt+0x936c>
   1a800:	cmp	r5, #116	; 0x74
   1a804:	beq	1a888 <__assert_fail@plt+0x924c>
   1a808:	cmp	r5, #119	; 0x77
   1a80c:	bne	1a8e0 <__assert_fail@plt+0x92a4>
   1a810:	cmn	r4, #1
   1a814:	ble	1a974 <__assert_fail@plt+0x9338>
   1a818:	cmp	r4, #1073741824	; 0x40000000
   1a81c:	bge	1a988 <__assert_fail@plt+0x934c>
   1a820:	b	1a99c <__assert_fail@plt+0x9360>
   1a824:	mov	r5, #0
   1a828:	mvn	r6, #2
   1a82c:	add	r4, sp, #4
   1a830:	mov	r0, r4
   1a834:	mov	r1, r7
   1a838:	bl	1a9fc <__assert_fail@plt+0x93c0>
   1a83c:	orr	r5, r0, r5
   1a840:	adds	r6, r6, #1
   1a844:	bne	1a830 <__assert_fail@plt+0x91f4>
   1a848:	b	1a9a8 <__assert_fail@plt+0x936c>
   1a84c:	add	r0, sp, #4
   1a850:	mov	r1, r7
   1a854:	bl	1a9fc <__assert_fail@plt+0x93c0>
   1a858:	mov	r5, r0
   1a85c:	b	1a9a8 <__assert_fail@plt+0x936c>
   1a860:	mov	r5, #0
   1a864:	mvn	r6, #1
   1a868:	add	r4, sp, #4
   1a86c:	mov	r0, r4
   1a870:	mov	r1, r7
   1a874:	bl	1a9fc <__assert_fail@plt+0x93c0>
   1a878:	orr	r5, r0, r5
   1a87c:	adds	r6, r6, #1
   1a880:	bne	1a86c <__assert_fail@plt+0x9230>
   1a884:	b	1a9a8 <__assert_fail@plt+0x936c>
   1a888:	mov	r5, #0
   1a88c:	mvn	r6, #3
   1a890:	add	r4, sp, #4
   1a894:	mov	r0, r4
   1a898:	mov	r1, r7
   1a89c:	bl	1a9fc <__assert_fail@plt+0x93c0>
   1a8a0:	orr	r5, r0, r5
   1a8a4:	adds	r6, r6, #1
   1a8a8:	bne	1a894 <__assert_fail@plt+0x9258>
   1a8ac:	b	1a9a8 <__assert_fail@plt+0x936c>
   1a8b0:	cmp	r5, #90	; 0x5a
   1a8b4:	bne	1a8e0 <__assert_fail@plt+0x92a4>
   1a8b8:	mov	r5, #0
   1a8bc:	mvn	r6, #6
   1a8c0:	add	r4, sp, #4
   1a8c4:	mov	r0, r4
   1a8c8:	mov	r1, r7
   1a8cc:	bl	1a9fc <__assert_fail@plt+0x93c0>
   1a8d0:	orr	r5, r0, r5
   1a8d4:	adds	r6, r6, #1
   1a8d8:	bne	1a8c4 <__assert_fail@plt+0x9288>
   1a8dc:	b	1a9a8 <__assert_fail@plt+0x936c>
   1a8e0:	ldr	r0, [sp]
   1a8e4:	orr	r9, r9, #2
   1a8e8:	b	1a9cc <__assert_fail@plt+0x9390>
   1a8ec:	mov	r5, #0
   1a8f0:	mvn	r6, #5
   1a8f4:	add	r4, sp, #4
   1a8f8:	mov	r0, r4
   1a8fc:	mov	r1, r7
   1a900:	bl	1a9fc <__assert_fail@plt+0x93c0>
   1a904:	orr	r5, r0, r5
   1a908:	adds	r6, r6, #1
   1a90c:	bne	1a8f8 <__assert_fail@plt+0x92bc>
   1a910:	b	1a9a8 <__assert_fail@plt+0x936c>
   1a914:	mov	r5, #0
   1a918:	mvn	r6, #4
   1a91c:	add	r4, sp, #4
   1a920:	mov	r0, r4
   1a924:	mov	r1, r7
   1a928:	bl	1a9fc <__assert_fail@plt+0x93c0>
   1a92c:	orr	r5, r0, r5
   1a930:	adds	r6, r6, #1
   1a934:	bne	1a920 <__assert_fail@plt+0x92e4>
   1a938:	b	1a9a8 <__assert_fail@plt+0x936c>
   1a93c:	beq	1a950 <__assert_fail@plt+0x9314>
   1a940:	mov	r0, #-2147483648	; 0x80000000
   1a944:	sdiv	r0, r0, r4
   1a948:	cmp	r0, #1024	; 0x400
   1a94c:	blt	1a988 <__assert_fail@plt+0x934c>
   1a950:	lsl	r0, r4, #10
   1a954:	b	1a9a0 <__assert_fail@plt+0x9364>
   1a958:	beq	1a96c <__assert_fail@plt+0x9330>
   1a95c:	mov	r0, #-2147483648	; 0x80000000
   1a960:	sdiv	r0, r0, r4
   1a964:	cmp	r0, #512	; 0x200
   1a968:	blt	1a988 <__assert_fail@plt+0x934c>
   1a96c:	lsl	r0, r4, #9
   1a970:	b	1a9a0 <__assert_fail@plt+0x9364>
   1a974:	beq	1a99c <__assert_fail@plt+0x9360>
   1a978:	mov	r0, #-2147483648	; 0x80000000
   1a97c:	sdiv	r0, r0, r4
   1a980:	cmp	r0, #2
   1a984:	bge	1a99c <__assert_fail@plt+0x9360>
   1a988:	mvn	r0, #-2147483648	; 0x80000000
   1a98c:	cmp	r4, #0
   1a990:	mov	r5, #1
   1a994:	movlt	r0, #-2147483648	; 0x80000000
   1a998:	b	1a9a4 <__assert_fail@plt+0x9368>
   1a99c:	lsl	r0, r4, #1
   1a9a0:	mov	r5, #0
   1a9a4:	str	r0, [sp, #4]
   1a9a8:	ldr	r0, [r8]
   1a9ac:	orr	r9, r5, r9
   1a9b0:	add	r1, r0, sl
   1a9b4:	str	r1, [r8]
   1a9b8:	ldrb	r0, [r0, sl]
   1a9bc:	ldr	r4, [sp, #4]
   1a9c0:	cmp	r0, #0
   1a9c4:	orrne	r9, r9, #2
   1a9c8:	ldr	r0, [sp]
   1a9cc:	str	r4, [r0]
   1a9d0:	mov	r0, r9
   1a9d4:	sub	sp, fp, #28
   1a9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9dc:	movw	r0, #54389	; 0xd475
   1a9e0:	movw	r1, #54429	; 0xd49d
   1a9e4:	movw	r3, #54521	; 0xd4f9
   1a9e8:	mov	r2, #85	; 0x55
   1a9ec:	movt	r0, #1
   1a9f0:	movt	r1, #1
   1a9f4:	movt	r3, #1
   1a9f8:	bl	1163c <__assert_fail@plt>
   1a9fc:	cmn	r1, #1
   1aa00:	ble	1aa24 <__assert_fail@plt+0x93e8>
   1aa04:	ldr	r2, [r0]
   1aa08:	cmp	r1, #0
   1aa0c:	beq	1aa8c <__assert_fail@plt+0x9450>
   1aa10:	cmn	r2, #1
   1aa14:	ble	1aa4c <__assert_fail@plt+0x9410>
   1aa18:	mvn	r3, #-2147483648	; 0x80000000
   1aa1c:	udiv	r3, r3, r1
   1aa20:	b	1aa40 <__assert_fail@plt+0x9404>
   1aa24:	ldr	r2, [r0]
   1aa28:	cmn	r2, #1
   1aa2c:	ble	1aa64 <__assert_fail@plt+0x9428>
   1aa30:	cmn	r1, #1
   1aa34:	beq	1aa8c <__assert_fail@plt+0x9450>
   1aa38:	mov	r3, #-2147483648	; 0x80000000
   1aa3c:	sdiv	r3, r3, r1
   1aa40:	cmp	r3, r2
   1aa44:	blt	1aa74 <__assert_fail@plt+0x9438>
   1aa48:	b	1aa8c <__assert_fail@plt+0x9450>
   1aa4c:	beq	1aa88 <__assert_fail@plt+0x944c>
   1aa50:	mov	r3, #-2147483648	; 0x80000000
   1aa54:	sdiv	r3, r3, r2
   1aa58:	cmp	r3, r1
   1aa5c:	blt	1aa74 <__assert_fail@plt+0x9438>
   1aa60:	b	1aa8c <__assert_fail@plt+0x9450>
   1aa64:	mvn	r3, #-2147483648	; 0x80000000
   1aa68:	sdiv	r3, r3, r1
   1aa6c:	cmp	r2, r3
   1aa70:	bge	1aa8c <__assert_fail@plt+0x9450>
   1aa74:	mvn	r3, #-2147483648	; 0x80000000
   1aa78:	cmp	r2, #0
   1aa7c:	mov	r1, #1
   1aa80:	movlt	r3, #-2147483648	; 0x80000000
   1aa84:	b	1aa94 <__assert_fail@plt+0x9458>
   1aa88:	mvn	r2, #0
   1aa8c:	mul	r3, r2, r1
   1aa90:	mov	r1, #0
   1aa94:	str	r3, [r0]
   1aa98:	mov	r0, r1
   1aa9c:	bx	lr
   1aaa0:	push	{fp, lr}
   1aaa4:	mov	fp, sp
   1aaa8:	sub	sp, sp, #8
   1aaac:	movw	ip, #57724	; 0xe17c
   1aab0:	movt	ip, #2
   1aab4:	ldr	ip, [ip]
   1aab8:	str	ip, [sp, #4]
   1aabc:	ldr	ip, [fp, #8]
   1aac0:	str	ip, [sp]
   1aac4:	bl	1aacc <__assert_fail@plt+0x9490>
   1aac8:	bl	11618 <abort@plt>
   1aacc:	push	{r4, r5, r6, r7, fp, lr}
   1aad0:	add	fp, sp, #16
   1aad4:	sub	sp, sp, #16
   1aad8:	sub	r0, r0, #1
   1aadc:	cmp	r0, #4
   1aae0:	bcs	1ab60 <__assert_fail@plt+0x9524>
   1aae4:	mov	r5, r1
   1aae8:	movw	r1, #54688	; 0xd5a0
   1aaec:	ldr	r4, [fp, #12]
   1aaf0:	ldr	r6, [fp, #8]
   1aaf4:	movt	r1, #1
   1aaf8:	cmn	r5, #1
   1aafc:	ldr	r1, [r1, r0, lsl #2]
   1ab00:	ble	1ab14 <__assert_fail@plt+0x94d8>
   1ab04:	ldr	r7, [r3, r5, lsl #4]
   1ab08:	movw	r5, #54592	; 0xd540
   1ab0c:	movt	r5, #1
   1ab10:	b	1ab30 <__assert_fail@plt+0x94f4>
   1ab14:	mov	r0, #0
   1ab18:	add	r7, sp, #14
   1ab1c:	strb	r0, [sp, #15]
   1ab20:	movw	r0, #54592	; 0xd540
   1ab24:	strb	r2, [sp, #14]
   1ab28:	movt	r0, #1
   1ab2c:	sub	r5, r0, r5
   1ab30:	mov	r0, #0
   1ab34:	mov	r2, #5
   1ab38:	bl	113b4 <dcgettext@plt>
   1ab3c:	mov	r2, r0
   1ab40:	mov	r0, r4
   1ab44:	mov	r1, #0
   1ab48:	mov	r3, r5
   1ab4c:	str	r7, [sp]
   1ab50:	str	r6, [sp, #4]
   1ab54:	bl	11450 <error@plt>
   1ab58:	sub	sp, fp, #16
   1ab5c:	pop	{r4, r5, r6, r7, fp, pc}
   1ab60:	bl	11618 <abort@plt>
   1ab64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab68:	add	fp, sp, #28
   1ab6c:	sub	sp, sp, #20
   1ab70:	cmp	r2, #37	; 0x25
   1ab74:	bcs	1b1fc <__assert_fail@plt+0x9bc0>
   1ab78:	mov	r8, r3
   1ab7c:	mov	r5, r2
   1ab80:	mov	r6, r1
   1ab84:	mov	r4, r0
   1ab88:	bl	11510 <__errno_location@plt>
   1ab8c:	mov	r7, r0
   1ab90:	mov	r0, #0
   1ab94:	str	r0, [r7]
   1ab98:	bl	114c8 <__ctype_b_loc@plt>
   1ab9c:	ldr	r1, [r0]
   1aba0:	mov	r2, r4
   1aba4:	ldrb	r0, [r2], #1
   1aba8:	add	r3, r1, r0, lsl #1
   1abac:	ldrb	r3, [r3, #1]
   1abb0:	tst	r3, #32
   1abb4:	bne	1aba4 <__assert_fail@plt+0x9568>
   1abb8:	add	sl, sp, #16
   1abbc:	cmp	r6, #0
   1abc0:	movne	sl, r6
   1abc4:	mov	r6, #4
   1abc8:	cmp	r0, #45	; 0x2d
   1abcc:	beq	1b1f0 <__assert_fail@plt+0x9bb4>
   1abd0:	mov	r0, r4
   1abd4:	mov	r1, sl
   1abd8:	mov	r2, r5
   1abdc:	str	r8, [sp, #12]
   1abe0:	bl	11558 <strtoumax@plt>
   1abe4:	ldr	r5, [sl]
   1abe8:	cmp	r5, r4
   1abec:	beq	1ac14 <__assert_fail@plt+0x95d8>
   1abf0:	mov	r8, r0
   1abf4:	ldr	r0, [r7]
   1abf8:	mov	r9, r1
   1abfc:	cmp	r0, #0
   1ac00:	beq	1ac44 <__assert_fail@plt+0x9608>
   1ac04:	cmp	r0, #34	; 0x22
   1ac08:	bne	1b1f0 <__assert_fail@plt+0x9bb4>
   1ac0c:	mov	r6, #1
   1ac10:	b	1ac48 <__assert_fail@plt+0x960c>
   1ac14:	ldr	r0, [fp, #8]
   1ac18:	cmp	r0, #0
   1ac1c:	ldrbne	r1, [r4]
   1ac20:	cmpne	r1, #0
   1ac24:	beq	1b1f0 <__assert_fail@plt+0x9bb4>
   1ac28:	bl	114ec <strchr@plt>
   1ac2c:	cmp	r0, #0
   1ac30:	beq	1b1f0 <__assert_fail@plt+0x9bb4>
   1ac34:	mov	r6, #0
   1ac38:	mov	r8, #1
   1ac3c:	mov	r9, #0
   1ac40:	b	1ac54 <__assert_fail@plt+0x9618>
   1ac44:	mov	r6, r0
   1ac48:	ldr	r0, [fp, #8]
   1ac4c:	cmp	r0, #0
   1ac50:	beq	1b1e8 <__assert_fail@plt+0x9bac>
   1ac54:	ldrb	r7, [r5]
   1ac58:	cmp	r7, #0
   1ac5c:	beq	1b1e8 <__assert_fail@plt+0x9bac>
   1ac60:	ldr	r0, [fp, #8]
   1ac64:	mov	r1, r7
   1ac68:	bl	114ec <strchr@plt>
   1ac6c:	cmp	r0, #0
   1ac70:	beq	1ad78 <__assert_fail@plt+0x973c>
   1ac74:	sub	r0, r7, #69	; 0x45
   1ac78:	mov	r1, #1
   1ac7c:	mov	r3, #0
   1ac80:	mov	r4, #1024	; 0x400
   1ac84:	cmp	r0, #21
   1ac88:	str	r1, [sp, #8]
   1ac8c:	bhi	1aca4 <__assert_fail@plt+0x9668>
   1ac90:	movw	r2, #35141	; 0x8945
   1ac94:	mov	r1, #1
   1ac98:	movt	r2, #48	; 0x30
   1ac9c:	tst	r2, r1, lsl r0
   1aca0:	bne	1acc0 <__assert_fail@plt+0x9684>
   1aca4:	sub	r0, r7, #103	; 0x67
   1aca8:	cmp	r0, #13
   1acac:	bhi	1acf4 <__assert_fail@plt+0x96b8>
   1acb0:	mov	r1, #1
   1acb4:	movw	r2, #8273	; 0x2051
   1acb8:	tst	r2, r1, lsl r0
   1acbc:	beq	1acf4 <__assert_fail@plt+0x96b8>
   1acc0:	ldr	r0, [fp, #8]
   1acc4:	mov	r1, #48	; 0x30
   1acc8:	bl	114ec <strchr@plt>
   1accc:	cmp	r0, #0
   1acd0:	beq	1acf0 <__assert_fail@plt+0x96b4>
   1acd4:	ldrb	r0, [r5, #1]
   1acd8:	cmp	r0, #66	; 0x42
   1acdc:	cmpne	r0, #68	; 0x44
   1ace0:	bne	1ae08 <__assert_fail@plt+0x97cc>
   1ace4:	mov	r4, #1000	; 0x3e8
   1ace8:	mov	r0, #2
   1acec:	str	r0, [sp, #8]
   1acf0:	mov	r3, #0
   1acf4:	cmp	r7, #89	; 0x59
   1acf8:	stm	sp, {r5, r6}
   1acfc:	bgt	1ad84 <__assert_fail@plt+0x9748>
   1ad00:	sub	r0, r7, #66	; 0x42
   1ad04:	cmp	r0, #14
   1ad08:	bhi	1ae2c <__assert_fail@plt+0x97f0>
   1ad0c:	add	r1, pc, #0
   1ad10:	ldr	pc, [r1, r0, lsl #2]
   1ad14:	andeq	sl, r1, r0, asr sp
   1ad18:	ldrdeq	fp, [r1], -ip
   1ad1c:	ldrdeq	fp, [r1], -ip
   1ad20:	strdeq	fp, [r1], -r0
   1ad24:	ldrdeq	fp, [r1], -ip
   1ad28:	andeq	sl, r1, r0, ror #29
   1ad2c:	ldrdeq	fp, [r1], -ip
   1ad30:	ldrdeq	fp, [r1], -ip
   1ad34:	ldrdeq	fp, [r1], -ip
   1ad38:	andeq	sl, r1, ip, asr #30
   1ad3c:	ldrdeq	fp, [r1], -ip
   1ad40:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1ad44:	ldrdeq	fp, [r1], -ip
   1ad48:	ldrdeq	fp, [r1], -ip
   1ad4c:	andeq	fp, r1, ip, asr r1
   1ad50:	mov	r1, #0
   1ad54:	lsl	r3, r9, #10
   1ad58:	lsl	r0, r8, #10
   1ad5c:	lsr	r2, r9, #22
   1ad60:	cmp	r1, r9, lsr #22
   1ad64:	orr	r3, r3, r8, lsr #22
   1ad68:	mvnne	r0, #0
   1ad6c:	movwne	r2, #1
   1ad70:	cmp	r1, r9, lsr #22
   1ad74:	b	1adf8 <__assert_fail@plt+0x97bc>
   1ad78:	ldr	r0, [sp, #12]
   1ad7c:	orr	r6, r6, #2
   1ad80:	b	1b1ec <__assert_fail@plt+0x9bb0>
   1ad84:	cmp	r7, #115	; 0x73
   1ad88:	bgt	1aea8 <__assert_fail@plt+0x986c>
   1ad8c:	sub	r0, r7, #98	; 0x62
   1ad90:	cmp	r0, #11
   1ad94:	bhi	1b068 <__assert_fail@plt+0x9a2c>
   1ad98:	add	r1, pc, #4
   1ad9c:	mov	r2, #0
   1ada0:	ldr	pc, [r1, r0, lsl #2]
   1ada4:	ldrdeq	sl, [r1], -r4
   1ada8:	andeq	fp, r1, r4, asr #3
   1adac:	ldrdeq	fp, [r1], -ip
   1adb0:	ldrdeq	fp, [r1], -ip
   1adb4:	ldrdeq	fp, [r1], -ip
   1adb8:	andeq	sl, r1, r0, ror #29
   1adbc:	ldrdeq	fp, [r1], -ip
   1adc0:	ldrdeq	fp, [r1], -ip
   1adc4:	ldrdeq	fp, [r1], -ip
   1adc8:	andeq	sl, r1, ip, asr #30
   1adcc:	ldrdeq	fp, [r1], -ip
   1add0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1add4:	mov	r1, #0
   1add8:	lsl	r3, r9, #9
   1addc:	lsl	r0, r8, #9
   1ade0:	lsr	r2, r9, #23
   1ade4:	cmp	r1, r9, lsr #23
   1ade8:	orr	r3, r3, r8, lsr #23
   1adec:	mvnne	r0, #0
   1adf0:	movwne	r2, #1
   1adf4:	cmp	r1, r9, lsr #23
   1adf8:	mvnne	r3, #0
   1adfc:	mov	r8, r0
   1ae00:	mov	r9, r3
   1ae04:	b	1b1c4 <__assert_fail@plt+0x9b88>
   1ae08:	cmp	r0, #105	; 0x69
   1ae0c:	mov	r3, #0
   1ae10:	bne	1acf4 <__assert_fail@plt+0x96b8>
   1ae14:	ldrb	r0, [r5, #2]
   1ae18:	mov	r1, #1
   1ae1c:	cmp	r0, #66	; 0x42
   1ae20:	movweq	r1, #3
   1ae24:	str	r1, [sp, #8]
   1ae28:	b	1acf4 <__assert_fail@plt+0x96b8>
   1ae2c:	cmp	r7, #84	; 0x54
   1ae30:	beq	1affc <__assert_fail@plt+0x99c0>
   1ae34:	cmp	r7, #89	; 0x59
   1ae38:	bne	1b0dc <__assert_fail@plt+0x9aa0>
   1ae3c:	mvn	r0, #0
   1ae40:	mvn	r1, #0
   1ae44:	mov	r2, r4
   1ae48:	mov	r5, r3
   1ae4c:	bl	1b6f0 <__assert_fail@plt+0xa0b4>
   1ae50:	mov	ip, r5
   1ae54:	mvn	lr, #0
   1ae58:	mov	r2, #0
   1ae5c:	mvn	r3, #7
   1ae60:	mov	r5, r8
   1ae64:	mov	r7, r9
   1ae68:	umull	r8, r6, r5, r4
   1ae6c:	mvn	r9, #0
   1ae70:	mla	r6, r5, ip, r6
   1ae74:	subs	r5, r0, r5
   1ae78:	sbcs	r5, r1, r7
   1ae7c:	mov	r5, #0
   1ae80:	movwcc	r5, #1
   1ae84:	cmp	r5, #0
   1ae88:	mlaeq	r9, r7, r4, r6
   1ae8c:	movne	r8, lr
   1ae90:	orrne	r2, r2, #1
   1ae94:	adds	r3, r3, #1
   1ae98:	mov	r5, r8
   1ae9c:	mov	r7, r9
   1aea0:	bne	1ae68 <__assert_fail@plt+0x982c>
   1aea4:	b	1b1c4 <__assert_fail@plt+0x9b88>
   1aea8:	cmp	r7, #116	; 0x74
   1aeac:	beq	1affc <__assert_fail@plt+0x99c0>
   1aeb0:	cmp	r7, #119	; 0x77
   1aeb4:	bne	1b0dc <__assert_fail@plt+0x9aa0>
   1aeb8:	lsl	r1, r9, #1
   1aebc:	lsl	r0, r8, #1
   1aec0:	cmp	r9, #0
   1aec4:	lsr	r2, r9, #31
   1aec8:	orr	r1, r1, r8, lsr #31
   1aecc:	mvnlt	r0, #0
   1aed0:	mvnlt	r1, #0
   1aed4:	mov	r8, r0
   1aed8:	mov	r9, r1
   1aedc:	b	1b1c4 <__assert_fail@plt+0x9b88>
   1aee0:	mvn	r0, #0
   1aee4:	mvn	r1, #0
   1aee8:	mov	r2, r4
   1aeec:	mov	r5, r3
   1aef0:	bl	1b6f0 <__assert_fail@plt+0xa0b4>
   1aef4:	mov	ip, r5
   1aef8:	mvn	lr, #0
   1aefc:	mov	r2, #0
   1af00:	mvn	r3, #2
   1af04:	mov	r6, r8
   1af08:	mov	r5, r9
   1af0c:	umull	r8, r7, r6, r4
   1af10:	mvn	r9, #0
   1af14:	mla	r7, r6, ip, r7
   1af18:	subs	r6, r0, r6
   1af1c:	sbcs	r6, r1, r5
   1af20:	mov	r6, #0
   1af24:	movwcc	r6, #1
   1af28:	cmp	r6, #0
   1af2c:	mlaeq	r9, r5, r4, r7
   1af30:	movne	r8, lr
   1af34:	orrne	r2, r2, #1
   1af38:	adds	r3, r3, #1
   1af3c:	mov	r6, r8
   1af40:	mov	r5, r9
   1af44:	bne	1af0c <__assert_fail@plt+0x98d0>
   1af48:	b	1b1c4 <__assert_fail@plt+0x9b88>
   1af4c:	mvn	r0, #0
   1af50:	mvn	r1, #0
   1af54:	mov	r2, r4
   1af58:	mov	r5, r3
   1af5c:	bl	1b6f0 <__assert_fail@plt+0xa0b4>
   1af60:	subs	r0, r0, r8
   1af64:	mov	r2, #0
   1af68:	sbcs	r0, r1, r9
   1af6c:	movwcc	r2, #1
   1af70:	umull	r0, r1, r8, r4
   1af74:	mla	r1, r8, r5, r1
   1af78:	cmp	r2, #0
   1af7c:	mla	r9, r9, r4, r1
   1af80:	mvnne	r0, #0
   1af84:	mvnne	r9, #0
   1af88:	mov	r8, r0
   1af8c:	b	1b1c4 <__assert_fail@plt+0x9b88>
   1af90:	mvn	r0, #0
   1af94:	mvn	r1, #0
   1af98:	mov	r2, r4
   1af9c:	mov	r5, r3
   1afa0:	bl	1b6f0 <__assert_fail@plt+0xa0b4>
   1afa4:	mov	ip, r5
   1afa8:	mvn	lr, #0
   1afac:	mov	r2, #0
   1afb0:	mvn	r3, #1
   1afb4:	mov	r6, r8
   1afb8:	mov	r5, r9
   1afbc:	umull	r8, r7, r6, r4
   1afc0:	mvn	r9, #0
   1afc4:	mla	r7, r6, ip, r7
   1afc8:	subs	r6, r0, r6
   1afcc:	sbcs	r6, r1, r5
   1afd0:	mov	r6, #0
   1afd4:	movwcc	r6, #1
   1afd8:	cmp	r6, #0
   1afdc:	mlaeq	r9, r5, r4, r7
   1afe0:	movne	r8, lr
   1afe4:	orrne	r2, r2, #1
   1afe8:	adds	r3, r3, #1
   1afec:	mov	r6, r8
   1aff0:	mov	r5, r9
   1aff4:	bne	1afbc <__assert_fail@plt+0x9980>
   1aff8:	b	1b1c4 <__assert_fail@plt+0x9b88>
   1affc:	mvn	r0, #0
   1b000:	mvn	r1, #0
   1b004:	mov	r2, r4
   1b008:	mov	r5, r3
   1b00c:	bl	1b6f0 <__assert_fail@plt+0xa0b4>
   1b010:	mov	ip, r5
   1b014:	mvn	lr, #0
   1b018:	mov	r2, #0
   1b01c:	mvn	r3, #3
   1b020:	mov	r6, r8
   1b024:	mov	r5, r9
   1b028:	umull	r8, r7, r6, r4
   1b02c:	mvn	r9, #0
   1b030:	mla	r7, r6, ip, r7
   1b034:	subs	r6, r0, r6
   1b038:	sbcs	r6, r1, r5
   1b03c:	mov	r6, #0
   1b040:	movwcc	r6, #1
   1b044:	cmp	r6, #0
   1b048:	mlaeq	r9, r5, r4, r7
   1b04c:	movne	r8, lr
   1b050:	orrne	r2, r2, #1
   1b054:	adds	r3, r3, #1
   1b058:	mov	r6, r8
   1b05c:	mov	r5, r9
   1b060:	bne	1b028 <__assert_fail@plt+0x99ec>
   1b064:	b	1b1c4 <__assert_fail@plt+0x9b88>
   1b068:	cmp	r7, #90	; 0x5a
   1b06c:	bne	1b0dc <__assert_fail@plt+0x9aa0>
   1b070:	mvn	r0, #0
   1b074:	mvn	r1, #0
   1b078:	mov	r2, r4
   1b07c:	mov	r5, r3
   1b080:	bl	1b6f0 <__assert_fail@plt+0xa0b4>
   1b084:	mov	ip, r5
   1b088:	mvn	lr, #0
   1b08c:	mov	r2, #0
   1b090:	mvn	r3, #6
   1b094:	mov	r5, r8
   1b098:	mov	r7, r9
   1b09c:	umull	r8, r6, r5, r4
   1b0a0:	mvn	r9, #0
   1b0a4:	mla	r6, r5, ip, r6
   1b0a8:	subs	r5, r0, r5
   1b0ac:	sbcs	r5, r1, r7
   1b0b0:	mov	r5, #0
   1b0b4:	movwcc	r5, #1
   1b0b8:	cmp	r5, #0
   1b0bc:	mlaeq	r9, r7, r4, r6
   1b0c0:	movne	r8, lr
   1b0c4:	orrne	r2, r2, #1
   1b0c8:	adds	r3, r3, #1
   1b0cc:	mov	r5, r8
   1b0d0:	mov	r7, r9
   1b0d4:	bne	1b09c <__assert_fail@plt+0x9a60>
   1b0d8:	b	1b1c4 <__assert_fail@plt+0x9b88>
   1b0dc:	ldr	r0, [sp, #12]
   1b0e0:	strd	r8, [r0]
   1b0e4:	ldr	r6, [sp, #4]
   1b0e8:	orr	r6, r6, #2
   1b0ec:	b	1b1f0 <__assert_fail@plt+0x9bb4>
   1b0f0:	mvn	r0, #0
   1b0f4:	mvn	r1, #0
   1b0f8:	mov	r2, r4
   1b0fc:	mov	r5, r3
   1b100:	bl	1b6f0 <__assert_fail@plt+0xa0b4>
   1b104:	mov	ip, r5
   1b108:	mvn	lr, #0
   1b10c:	mov	r2, #0
   1b110:	mvn	r3, #5
   1b114:	mov	r5, r8
   1b118:	mov	r7, r9
   1b11c:	umull	r8, r6, r5, r4
   1b120:	mvn	r9, #0
   1b124:	mla	r6, r5, ip, r6
   1b128:	subs	r5, r0, r5
   1b12c:	sbcs	r5, r1, r7
   1b130:	mov	r5, #0
   1b134:	movwcc	r5, #1
   1b138:	cmp	r5, #0
   1b13c:	mlaeq	r9, r7, r4, r6
   1b140:	movne	r8, lr
   1b144:	orrne	r2, r2, #1
   1b148:	adds	r3, r3, #1
   1b14c:	mov	r5, r8
   1b150:	mov	r7, r9
   1b154:	bne	1b11c <__assert_fail@plt+0x9ae0>
   1b158:	b	1b1c4 <__assert_fail@plt+0x9b88>
   1b15c:	mvn	r0, #0
   1b160:	mvn	r1, #0
   1b164:	mov	r2, r4
   1b168:	mov	r5, r3
   1b16c:	bl	1b6f0 <__assert_fail@plt+0xa0b4>
   1b170:	mov	ip, r5
   1b174:	mvn	lr, #0
   1b178:	mov	r2, #0
   1b17c:	mvn	r3, #4
   1b180:	mov	r5, r8
   1b184:	mov	r7, r9
   1b188:	umull	r8, r6, r5, r4
   1b18c:	mvn	r9, #0
   1b190:	mla	r6, r5, ip, r6
   1b194:	subs	r5, r0, r5
   1b198:	sbcs	r5, r1, r7
   1b19c:	mov	r5, #0
   1b1a0:	movwcc	r5, #1
   1b1a4:	cmp	r5, #0
   1b1a8:	mlaeq	r9, r7, r4, r6
   1b1ac:	movne	r8, lr
   1b1b0:	orrne	r2, r2, #1
   1b1b4:	adds	r3, r3, #1
   1b1b8:	mov	r5, r8
   1b1bc:	mov	r7, r9
   1b1c0:	bne	1b188 <__assert_fail@plt+0x9b4c>
   1b1c4:	ldr	r1, [sp]
   1b1c8:	ldr	r3, [sp, #8]
   1b1cc:	ldr	r6, [sp, #4]
   1b1d0:	add	r0, r1, r3
   1b1d4:	orr	r6, r2, r6
   1b1d8:	str	r0, [sl]
   1b1dc:	ldrb	r0, [r1, r3]
   1b1e0:	cmp	r0, #0
   1b1e4:	orrne	r6, r6, #2
   1b1e8:	ldr	r0, [sp, #12]
   1b1ec:	strd	r8, [r0]
   1b1f0:	mov	r0, r6
   1b1f4:	sub	sp, fp, #28
   1b1f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1fc:	movw	r0, #54389	; 0xd475
   1b200:	movw	r1, #54427	; 0xd49b
   1b204:	movw	r3, #54704	; 0xd5b0
   1b208:	mov	r2, #85	; 0x55
   1b20c:	movt	r0, #1
   1b210:	movt	r1, #1
   1b214:	movt	r3, #1
   1b218:	bl	1163c <__assert_fail@plt>
   1b21c:	clz	r2, r1
   1b220:	clz	r3, r0
   1b224:	lsr	r2, r2, #5
   1b228:	lsr	r3, r3, #5
   1b22c:	orrs	r2, r3, r2
   1b230:	movwne	r1, #1
   1b234:	movwne	r0, #1
   1b238:	cmp	r1, #0
   1b23c:	beq	1b26c <__assert_fail@plt+0x9c30>
   1b240:	mvn	r2, #-2147483648	; 0x80000000
   1b244:	udiv	r2, r2, r1
   1b248:	cmp	r2, r0
   1b24c:	bcs	1b26c <__assert_fail@plt+0x9c30>
   1b250:	push	{fp, lr}
   1b254:	mov	fp, sp
   1b258:	bl	11510 <__errno_location@plt>
   1b25c:	mov	r1, #12
   1b260:	str	r1, [r0]
   1b264:	mov	r0, #0
   1b268:	pop	{fp, pc}
   1b26c:	b	112e8 <calloc@plt>
   1b270:	cmp	r0, #0
   1b274:	movweq	r0, #1
   1b278:	cmn	r0, #1
   1b27c:	ble	1b284 <__assert_fail@plt+0x9c48>
   1b280:	b	11468 <malloc@plt>
   1b284:	push	{fp, lr}
   1b288:	mov	fp, sp
   1b28c:	bl	11510 <__errno_location@plt>
   1b290:	mov	r1, #12
   1b294:	str	r1, [r0]
   1b298:	mov	r0, #0
   1b29c:	pop	{fp, pc}
   1b2a0:	push	{fp, lr}
   1b2a4:	mov	fp, sp
   1b2a8:	cmp	r0, #0
   1b2ac:	beq	1b2c8 <__assert_fail@plt+0x9c8c>
   1b2b0:	cmp	r1, #0
   1b2b4:	beq	1b2d4 <__assert_fail@plt+0x9c98>
   1b2b8:	cmn	r1, #1
   1b2bc:	ble	1b2dc <__assert_fail@plt+0x9ca0>
   1b2c0:	pop	{fp, lr}
   1b2c4:	b	113c0 <realloc@plt>
   1b2c8:	mov	r0, r1
   1b2cc:	pop	{fp, lr}
   1b2d0:	b	1b270 <__assert_fail@plt+0x9c34>
   1b2d4:	bl	154dc <__assert_fail@plt+0x3ea0>
   1b2d8:	b	1b2e8 <__assert_fail@plt+0x9cac>
   1b2dc:	bl	11510 <__errno_location@plt>
   1b2e0:	mov	r1, #12
   1b2e4:	str	r1, [r0]
   1b2e8:	mov	r0, #0
   1b2ec:	pop	{fp, pc}
   1b2f0:	push	{r4, r5, r6, sl, fp, lr}
   1b2f4:	add	fp, sp, #16
   1b2f8:	mov	r4, r0
   1b2fc:	bl	1142c <__fpending@plt>
   1b300:	mov	r5, r0
   1b304:	mov	r0, r4
   1b308:	bl	11438 <ferror_unlocked@plt>
   1b30c:	mov	r6, r0
   1b310:	mov	r0, r4
   1b314:	bl	15338 <__assert_fail@plt+0x3cfc>
   1b318:	cmp	r6, #0
   1b31c:	beq	1b33c <__assert_fail@plt+0x9d00>
   1b320:	mvn	r4, #0
   1b324:	cmp	r0, #0
   1b328:	bne	1b368 <__assert_fail@plt+0x9d2c>
   1b32c:	bl	11510 <__errno_location@plt>
   1b330:	mov	r1, #0
   1b334:	str	r1, [r0]
   1b338:	b	1b368 <__assert_fail@plt+0x9d2c>
   1b33c:	cmp	r0, #0
   1b340:	mov	r4, r0
   1b344:	mvnne	r4, #0
   1b348:	cmp	r5, #0
   1b34c:	bne	1b368 <__assert_fail@plt+0x9d2c>
   1b350:	cmp	r0, #0
   1b354:	beq	1b368 <__assert_fail@plt+0x9d2c>
   1b358:	bl	11510 <__errno_location@plt>
   1b35c:	ldr	r0, [r0]
   1b360:	subs	r4, r0, #9
   1b364:	mvnne	r4, #0
   1b368:	mov	r0, r4
   1b36c:	pop	{r4, r5, r6, sl, fp, pc}
   1b370:	sub	sp, sp, #8
   1b374:	push	{r4, r5, r6, r7, fp, lr}
   1b378:	add	fp, sp, #16
   1b37c:	sub	sp, sp, #8
   1b380:	mov	r5, r0
   1b384:	add	r0, fp, #8
   1b388:	cmp	r1, #11
   1b38c:	str	r3, [fp, #12]
   1b390:	str	r2, [fp, #8]
   1b394:	str	r0, [sp, #4]
   1b398:	bhi	1b3d4 <__assert_fail@plt+0x9d98>
   1b39c:	mov	r0, #1
   1b3a0:	movw	r2, #1300	; 0x514
   1b3a4:	tst	r2, r0, lsl r1
   1b3a8:	bne	1b48c <__assert_fail@plt+0x9e50>
   1b3ac:	movw	r2, #2570	; 0xa0a
   1b3b0:	tst	r2, r0, lsl r1
   1b3b4:	bne	1b3fc <__assert_fail@plt+0x9dc0>
   1b3b8:	cmp	r1, #0
   1b3bc:	bne	1b3d4 <__assert_fail@plt+0x9d98>
   1b3c0:	ldr	r0, [sp, #4]
   1b3c4:	add	r1, r0, #4
   1b3c8:	str	r1, [sp, #4]
   1b3cc:	mov	r1, #0
   1b3d0:	b	1b498 <__assert_fail@plt+0x9e5c>
   1b3d4:	sub	r0, r1, #1024	; 0x400
   1b3d8:	cmp	r0, #10
   1b3dc:	bhi	1b48c <__assert_fail@plt+0x9e50>
   1b3e0:	mov	r2, #1
   1b3e4:	movw	r3, #645	; 0x285
   1b3e8:	tst	r3, r2, lsl r0
   1b3ec:	bne	1b48c <__assert_fail@plt+0x9e50>
   1b3f0:	movw	r3, #1282	; 0x502
   1b3f4:	tst	r3, r2, lsl r0
   1b3f8:	beq	1b408 <__assert_fail@plt+0x9dcc>
   1b3fc:	mov	r0, r5
   1b400:	bl	11594 <fcntl64@plt>
   1b404:	b	1b4a4 <__assert_fail@plt+0x9e68>
   1b408:	cmp	r0, #6
   1b40c:	bne	1b48c <__assert_fail@plt+0x9e50>
   1b410:	ldr	r0, [sp, #4]
   1b414:	movw	r7, #58336	; 0xe3e0
   1b418:	movt	r7, #2
   1b41c:	add	r1, r0, #4
   1b420:	str	r1, [sp, #4]
   1b424:	ldr	r6, [r0]
   1b428:	ldr	r0, [r7]
   1b42c:	cmp	r0, #0
   1b430:	blt	1b4c8 <__assert_fail@plt+0x9e8c>
   1b434:	mov	r0, r5
   1b438:	movw	r1, #1030	; 0x406
   1b43c:	mov	r2, r6
   1b440:	bl	11594 <fcntl64@plt>
   1b444:	mov	r4, r0
   1b448:	cmn	r0, #1
   1b44c:	bgt	1b4bc <__assert_fail@plt+0x9e80>
   1b450:	bl	11510 <__errno_location@plt>
   1b454:	ldr	r0, [r0]
   1b458:	cmp	r0, #22
   1b45c:	bne	1b4bc <__assert_fail@plt+0x9e80>
   1b460:	mov	r0, r5
   1b464:	mov	r1, #0
   1b468:	mov	r2, r6
   1b46c:	bl	11594 <fcntl64@plt>
   1b470:	mov	r4, r0
   1b474:	cmp	r0, #0
   1b478:	blt	1b4a8 <__assert_fail@plt+0x9e6c>
   1b47c:	mvn	r0, #0
   1b480:	str	r0, [r7]
   1b484:	mov	r0, #1
   1b488:	b	1b4ec <__assert_fail@plt+0x9eb0>
   1b48c:	ldr	r0, [sp, #4]
   1b490:	add	r2, r0, #4
   1b494:	str	r2, [sp, #4]
   1b498:	ldr	r2, [r0]
   1b49c:	mov	r0, r5
   1b4a0:	bl	11594 <fcntl64@plt>
   1b4a4:	mov	r4, r0
   1b4a8:	mov	r0, r4
   1b4ac:	sub	sp, fp, #16
   1b4b0:	pop	{r4, r5, r6, r7, fp, lr}
   1b4b4:	add	sp, sp, #8
   1b4b8:	bx	lr
   1b4bc:	mov	r0, #1
   1b4c0:	str	r0, [r7]
   1b4c4:	b	1b4a8 <__assert_fail@plt+0x9e6c>
   1b4c8:	mov	r0, r5
   1b4cc:	mov	r1, #0
   1b4d0:	mov	r2, r6
   1b4d4:	bl	11594 <fcntl64@plt>
   1b4d8:	mov	r4, r0
   1b4dc:	ldr	r0, [r7]
   1b4e0:	add	r0, r0, #1
   1b4e4:	clz	r0, r0
   1b4e8:	lsr	r0, r0, #5
   1b4ec:	cmp	r0, #0
   1b4f0:	beq	1b4a8 <__assert_fail@plt+0x9e6c>
   1b4f4:	cmp	r4, #0
   1b4f8:	blt	1b4a8 <__assert_fail@plt+0x9e6c>
   1b4fc:	mov	r0, r4
   1b500:	mov	r1, #1
   1b504:	bl	11594 <fcntl64@plt>
   1b508:	cmp	r0, #0
   1b50c:	blt	1b528 <__assert_fail@plt+0x9eec>
   1b510:	orr	r2, r0, #1
   1b514:	mov	r0, r4
   1b518:	mov	r1, #2
   1b51c:	bl	11594 <fcntl64@plt>
   1b520:	cmn	r0, #1
   1b524:	bne	1b4a8 <__assert_fail@plt+0x9e6c>
   1b528:	bl	11510 <__errno_location@plt>
   1b52c:	ldr	r6, [r0]
   1b530:	mov	r5, r0
   1b534:	mov	r0, r4
   1b538:	bl	11624 <close@plt>
   1b53c:	str	r6, [r5]
   1b540:	mvn	r4, #0
   1b544:	b	1b4a8 <__assert_fail@plt+0x9e6c>
   1b548:	push	{fp, lr}
   1b54c:	mov	fp, sp
   1b550:	mov	r0, #14
   1b554:	bl	115b8 <nl_langinfo@plt>
   1b558:	movw	r1, #52164	; 0xcbc4
   1b55c:	cmp	r0, #0
   1b560:	movt	r1, #1
   1b564:	movne	r1, r0
   1b568:	movw	r0, #54783	; 0xd5ff
   1b56c:	ldrb	r2, [r1]
   1b570:	movt	r0, #1
   1b574:	cmp	r2, #0
   1b578:	movne	r0, r1
   1b57c:	pop	{fp, pc}
   1b580:	push	{r4, r5, r6, r7, fp, lr}
   1b584:	add	fp, sp, #16
   1b588:	sub	sp, sp, #8
   1b58c:	add	r5, sp, #4
   1b590:	cmp	r0, #0
   1b594:	mov	r7, r2
   1b598:	mov	r4, r1
   1b59c:	movne	r5, r0
   1b5a0:	mov	r0, r5
   1b5a4:	bl	11444 <mbrtowc@plt>
   1b5a8:	mov	r6, r0
   1b5ac:	cmp	r7, #0
   1b5b0:	beq	1b5d4 <__assert_fail@plt+0x9f98>
   1b5b4:	cmn	r6, #2
   1b5b8:	bcc	1b5d4 <__assert_fail@plt+0x9f98>
   1b5bc:	mov	r0, #0
   1b5c0:	bl	155cc <__assert_fail@plt+0x3f90>
   1b5c4:	cmp	r0, #0
   1b5c8:	ldrbeq	r0, [r4]
   1b5cc:	moveq	r6, #1
   1b5d0:	streq	r0, [r5]
   1b5d4:	mov	r0, r6
   1b5d8:	sub	sp, fp, #16
   1b5dc:	pop	{r4, r5, r6, r7, fp, pc}
   1b5e0:	cmp	r2, #0
   1b5e4:	beq	1b614 <__assert_fail@plt+0x9fd8>
   1b5e8:	mvn	r3, #0
   1b5ec:	udiv	r3, r3, r2
   1b5f0:	cmp	r3, r1
   1b5f4:	bcs	1b614 <__assert_fail@plt+0x9fd8>
   1b5f8:	push	{fp, lr}
   1b5fc:	mov	fp, sp
   1b600:	bl	11510 <__errno_location@plt>
   1b604:	mov	r1, #12
   1b608:	str	r1, [r0]
   1b60c:	mov	r0, #0
   1b610:	pop	{fp, pc}
   1b614:	mul	r1, r2, r1
   1b618:	b	1b2a0 <__assert_fail@plt+0x9c64>
   1b61c:	cmp	r3, #0
   1b620:	cmpeq	r2, #0
   1b624:	bne	1b648 <__assert_fail@plt+0xa00c>
   1b628:	cmp	r1, #0
   1b62c:	movlt	r1, #-2147483648	; 0x80000000
   1b630:	movlt	r0, #0
   1b634:	blt	1b644 <__assert_fail@plt+0xa008>
   1b638:	cmpeq	r0, #0
   1b63c:	mvnne	r1, #-2147483648	; 0x80000000
   1b640:	mvnne	r0, #0
   1b644:	b	1b72c <__assert_fail@plt+0xa0f0>
   1b648:	sub	sp, sp, #8
   1b64c:	push	{sp, lr}
   1b650:	cmp	r1, #0
   1b654:	blt	1b674 <__assert_fail@plt+0xa038>
   1b658:	cmp	r3, #0
   1b65c:	blt	1b6a8 <__assert_fail@plt+0xa06c>
   1b660:	bl	1b73c <__assert_fail@plt+0xa100>
   1b664:	ldr	lr, [sp, #4]
   1b668:	add	sp, sp, #8
   1b66c:	pop	{r2, r3}
   1b670:	bx	lr
   1b674:	rsbs	r0, r0, #0
   1b678:	sbc	r1, r1, r1, lsl #1
   1b67c:	cmp	r3, #0
   1b680:	blt	1b6cc <__assert_fail@plt+0xa090>
   1b684:	bl	1b73c <__assert_fail@plt+0xa100>
   1b688:	ldr	lr, [sp, #4]
   1b68c:	add	sp, sp, #8
   1b690:	pop	{r2, r3}
   1b694:	rsbs	r0, r0, #0
   1b698:	sbc	r1, r1, r1, lsl #1
   1b69c:	rsbs	r2, r2, #0
   1b6a0:	sbc	r3, r3, r3, lsl #1
   1b6a4:	bx	lr
   1b6a8:	rsbs	r2, r2, #0
   1b6ac:	sbc	r3, r3, r3, lsl #1
   1b6b0:	bl	1b73c <__assert_fail@plt+0xa100>
   1b6b4:	ldr	lr, [sp, #4]
   1b6b8:	add	sp, sp, #8
   1b6bc:	pop	{r2, r3}
   1b6c0:	rsbs	r0, r0, #0
   1b6c4:	sbc	r1, r1, r1, lsl #1
   1b6c8:	bx	lr
   1b6cc:	rsbs	r2, r2, #0
   1b6d0:	sbc	r3, r3, r3, lsl #1
   1b6d4:	bl	1b73c <__assert_fail@plt+0xa100>
   1b6d8:	ldr	lr, [sp, #4]
   1b6dc:	add	sp, sp, #8
   1b6e0:	pop	{r2, r3}
   1b6e4:	rsbs	r2, r2, #0
   1b6e8:	sbc	r3, r3, r3, lsl #1
   1b6ec:	bx	lr
   1b6f0:	cmp	r3, #0
   1b6f4:	cmpeq	r2, #0
   1b6f8:	bne	1b710 <__assert_fail@plt+0xa0d4>
   1b6fc:	cmp	r1, #0
   1b700:	cmpeq	r0, #0
   1b704:	mvnne	r1, #0
   1b708:	mvnne	r0, #0
   1b70c:	b	1b72c <__assert_fail@plt+0xa0f0>
   1b710:	sub	sp, sp, #8
   1b714:	push	{sp, lr}
   1b718:	bl	1b73c <__assert_fail@plt+0xa100>
   1b71c:	ldr	lr, [sp, #4]
   1b720:	add	sp, sp, #8
   1b724:	pop	{r2, r3}
   1b728:	bx	lr
   1b72c:	push	{r1, lr}
   1b730:	mov	r0, #8
   1b734:	bl	11300 <raise@plt>
   1b738:	pop	{r1, pc}
   1b73c:	cmp	r1, r3
   1b740:	cmpeq	r0, r2
   1b744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b748:	mov	r4, r0
   1b74c:	movcc	r0, #0
   1b750:	mov	r5, r1
   1b754:	ldr	lr, [sp, #36]	; 0x24
   1b758:	movcc	r1, r0
   1b75c:	bcc	1b858 <__assert_fail@plt+0xa21c>
   1b760:	cmp	r3, #0
   1b764:	clzeq	ip, r2
   1b768:	clzne	ip, r3
   1b76c:	addeq	ip, ip, #32
   1b770:	cmp	r5, #0
   1b774:	clzeq	r1, r4
   1b778:	addeq	r1, r1, #32
   1b77c:	clzne	r1, r5
   1b780:	sub	ip, ip, r1
   1b784:	sub	sl, ip, #32
   1b788:	lsl	r9, r3, ip
   1b78c:	rsb	fp, ip, #32
   1b790:	orr	r9, r9, r2, lsl sl
   1b794:	orr	r9, r9, r2, lsr fp
   1b798:	lsl	r8, r2, ip
   1b79c:	cmp	r5, r9
   1b7a0:	cmpeq	r4, r8
   1b7a4:	movcc	r0, #0
   1b7a8:	movcc	r1, r0
   1b7ac:	bcc	1b7c8 <__assert_fail@plt+0xa18c>
   1b7b0:	mov	r0, #1
   1b7b4:	subs	r4, r4, r8
   1b7b8:	lsl	r1, r0, sl
   1b7bc:	orr	r1, r1, r0, lsr fp
   1b7c0:	lsl	r0, r0, ip
   1b7c4:	sbc	r5, r5, r9
   1b7c8:	cmp	ip, #0
   1b7cc:	beq	1b858 <__assert_fail@plt+0xa21c>
   1b7d0:	lsr	r6, r8, #1
   1b7d4:	orr	r6, r6, r9, lsl #31
   1b7d8:	lsr	r7, r9, #1
   1b7dc:	mov	r2, ip
   1b7e0:	b	1b804 <__assert_fail@plt+0xa1c8>
   1b7e4:	subs	r3, r4, r6
   1b7e8:	sbc	r8, r5, r7
   1b7ec:	adds	r3, r3, r3
   1b7f0:	adc	r8, r8, r8
   1b7f4:	adds	r4, r3, #1
   1b7f8:	adc	r5, r8, #0
   1b7fc:	subs	r2, r2, #1
   1b800:	beq	1b820 <__assert_fail@plt+0xa1e4>
   1b804:	cmp	r5, r7
   1b808:	cmpeq	r4, r6
   1b80c:	bcs	1b7e4 <__assert_fail@plt+0xa1a8>
   1b810:	adds	r4, r4, r4
   1b814:	adc	r5, r5, r5
   1b818:	subs	r2, r2, #1
   1b81c:	bne	1b804 <__assert_fail@plt+0xa1c8>
   1b820:	lsr	r3, r4, ip
   1b824:	orr	r3, r3, r5, lsl fp
   1b828:	lsr	r2, r5, ip
   1b82c:	orr	r3, r3, r5, lsr sl
   1b830:	adds	r0, r0, r4
   1b834:	mov	r4, r3
   1b838:	lsl	r3, r2, ip
   1b83c:	orr	r3, r3, r4, lsl sl
   1b840:	lsl	ip, r4, ip
   1b844:	orr	r3, r3, r4, lsr fp
   1b848:	adc	r1, r1, r5
   1b84c:	subs	r0, r0, ip
   1b850:	mov	r5, r2
   1b854:	sbc	r1, r1, r3
   1b858:	cmp	lr, #0
   1b85c:	strdne	r4, [lr]
   1b860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b864:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b868:	mov	r7, r0
   1b86c:	ldr	r6, [pc, #72]	; 1b8bc <__assert_fail@plt+0xa280>
   1b870:	ldr	r5, [pc, #72]	; 1b8c0 <__assert_fail@plt+0xa284>
   1b874:	add	r6, pc, r6
   1b878:	add	r5, pc, r5
   1b87c:	sub	r6, r6, r5
   1b880:	mov	r8, r1
   1b884:	mov	r9, r2
   1b888:	bl	112bc <fdopen@plt-0x20>
   1b88c:	asrs	r6, r6, #2
   1b890:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b894:	mov	r4, #0
   1b898:	add	r4, r4, #1
   1b89c:	ldr	r3, [r5], #4
   1b8a0:	mov	r2, r9
   1b8a4:	mov	r1, r8
   1b8a8:	mov	r0, r7
   1b8ac:	blx	r3
   1b8b0:	cmp	r6, r4
   1b8b4:	bne	1b898 <__assert_fail@plt+0xa25c>
   1b8b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b8bc:	muleq	r1, r0, r6
   1b8c0:	andeq	r2, r1, r8, lsl #13
   1b8c4:	bx	lr
   1b8c8:	ldr	r3, [pc, #12]	; 1b8dc <__assert_fail@plt+0xa2a0>
   1b8cc:	mov	r1, #0
   1b8d0:	add	r3, pc, r3
   1b8d4:	ldr	r2, [r3]
   1b8d8:	b	11528 <__cxa_atexit@plt>
   1b8dc:	andeq	r2, r1, r4, ror #16
   1b8e0:	mov	r2, r1
   1b8e4:	mov	r1, r0
   1b8e8:	mov	r0, #3
   1b8ec:	b	11408 <__fxstat64@plt>

Disassembly of section .fini:

0001b8f0 <.fini>:
   1b8f0:	push	{r3, lr}
   1b8f4:	pop	{r3, pc}
