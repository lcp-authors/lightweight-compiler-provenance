
../repos/charybdis/tools/.libs/charybdis-mkpasswd:     file format elf32-littlearm


Disassembly of section .init:

00010708 <.init>:
   10708:	push	{r3, lr}
   1070c:	bl	1086c <sprintf@plt+0x48>
   10710:	pop	{r3, pc}

Disassembly of section .plt:

00010714 <open@plt-0x14>:
   10714:	push	{lr}		; (str lr, [sp, #-4]!)
   10718:	ldr	lr, [pc, #4]	; 10724 <open@plt-0x4>
   1071c:	add	lr, pc, lr
   10720:	ldr	pc, [lr, #8]!
   10724:	ldrdeq	r1, [r1], -ip

00010728 <open@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #69632	; 0x11000
   10730:	ldr	pc, [ip, #2268]!	; 0x8dc

00010734 <abort@plt>:
   10734:	add	ip, pc, #0, 12
   10738:	add	ip, ip, #69632	; 0x11000
   1073c:	ldr	pc, [ip, #2260]!	; 0x8d4

00010740 <srand@plt>:
   10740:	add	ip, pc, #0, 12
   10744:	add	ip, ip, #69632	; 0x11000
   10748:	ldr	pc, [ip, #2252]!	; 0x8cc

0001074c <__libc_start_main@plt>:
   1074c:	add	ip, pc, #0, 12
   10750:	add	ip, ip, #69632	; 0x11000
   10754:	ldr	pc, [ip, #2244]!	; 0x8c4

00010758 <__gmon_start__@plt>:
   10758:	add	ip, pc, #0, 12
   1075c:	add	ip, ip, #69632	; 0x11000
   10760:	ldr	pc, [ip, #2236]!	; 0x8bc

00010764 <getpass@plt>:
   10764:	add	ip, pc, #0, 12
   10768:	add	ip, ip, #69632	; 0x11000
   1076c:	ldr	pc, [ip, #2228]!	; 0x8b4

00010770 <calloc@plt>:
   10770:	add	ip, pc, #0, 12
   10774:	add	ip, ip, #69632	; 0x11000
   10778:	ldr	pc, [ip, #2220]!	; 0x8ac

0001077c <free@plt>:
   1077c:	add	ip, pc, #0, 12
   10780:	add	ip, ip, #69632	; 0x11000
   10784:	ldr	pc, [ip, #2212]!	; 0x8a4

00010788 <read@plt>:
   10788:	add	ip, pc, #0, 12
   1078c:	add	ip, ip, #69632	; 0x11000
   10790:	ldr	pc, [ip, #2204]!	; 0x89c

00010794 <strlen@plt>:
   10794:	add	ip, pc, #0, 12
   10798:	add	ip, ip, #69632	; 0x11000
   1079c:	ldr	pc, [ip, #2196]!	; 0x894

000107a0 <getopt@plt>:
   107a0:	add	ip, pc, #0, 12
   107a4:	add	ip, ip, #69632	; 0x11000
   107a8:	ldr	pc, [ip, #2188]!	; 0x88c

000107ac <printf@plt>:
   107ac:	add	ip, pc, #0, 12
   107b0:	add	ip, ip, #69632	; 0x11000
   107b4:	ldr	pc, [ip, #2180]!	; 0x884

000107b8 <atoi@plt>:
   107b8:	add	ip, pc, #0, 12
   107bc:	add	ip, ip, #69632	; 0x11000
   107c0:	ldr	pc, [ip, #2172]!	; 0x87c

000107c4 <time@plt>:
   107c4:	add	ip, pc, #0, 12
   107c8:	add	ip, ip, #69632	; 0x11000
   107cc:	ldr	pc, [ip, #2164]!	; 0x874

000107d0 <fprintf@plt>:
   107d0:	add	ip, pc, #0, 12
   107d4:	add	ip, ip, #69632	; 0x11000
   107d8:	ldr	pc, [ip, #2156]!	; 0x86c

000107dc <strdup@plt>:
   107dc:	add	ip, pc, #0, 12
   107e0:	add	ip, ip, #69632	; 0x11000
   107e4:	ldr	pc, [ip, #2148]!	; 0x864

000107e8 <rb_crypt@plt>:
   107e8:	add	ip, pc, #0, 12
   107ec:	add	ip, ip, #69632	; 0x11000
   107f0:	ldr	pc, [ip, #2140]!	; 0x85c

000107f4 <rand@plt>:
   107f4:	add	ip, pc, #0, 12
   107f8:	add	ip, ip, #69632	; 0x11000
   107fc:	ldr	pc, [ip, #2132]!	; 0x854

00010800 <strcmp@plt>:
   10800:	add	ip, pc, #0, 12
   10804:	add	ip, ip, #69632	; 0x11000
   10808:	ldr	pc, [ip, #2124]!	; 0x84c

0001080c <exit@plt>:
   1080c:	add	ip, pc, #0, 12
   10810:	add	ip, ip, #69632	; 0x11000
   10814:	ldr	pc, [ip, #2116]!	; 0x844

00010818 <abs@plt>:
   10818:	add	ip, pc, #0, 12
   1081c:	add	ip, ip, #69632	; 0x11000
   10820:	ldr	pc, [ip, #2108]!	; 0x83c

00010824 <sprintf@plt>:
   10824:	add	ip, pc, #0, 12
   10828:	add	ip, ip, #69632	; 0x11000
   1082c:	ldr	pc, [ip, #2100]!	; 0x834

Disassembly of section .text:

00010830 <.text>:
   10830:	mov	fp, #0
   10834:	mov	lr, #0
   10838:	pop	{r1}		; (ldr r1, [sp], #4)
   1083c:	mov	r2, sp
   10840:	push	{r2}		; (str r2, [sp, #-4]!)
   10844:	push	{r0}		; (str r0, [sp, #-4]!)
   10848:	ldr	ip, [pc, #16]	; 10860 <sprintf@plt+0x3c>
   1084c:	push	{ip}		; (str ip, [sp, #-4]!)
   10850:	ldr	r0, [pc, #12]	; 10864 <sprintf@plt+0x40>
   10854:	ldr	r3, [pc, #12]	; 10868 <sprintf@plt+0x44>
   10858:	bl	1074c <__libc_start_main@plt>
   1085c:	bl	10734 <abort@plt>
   10860:	andeq	r1, r1, ip, lsl r8
   10864:	andeq	r0, r1, r0, lsr #18
   10868:			; <UNDEFINED> instruction: 0x000117bc
   1086c:	ldr	r3, [pc, #20]	; 10888 <sprintf@plt+0x64>
   10870:	ldr	r2, [pc, #20]	; 1088c <sprintf@plt+0x68>
   10874:	add	r3, pc, r3
   10878:	ldr	r2, [r3, r2]
   1087c:	cmp	r2, #0
   10880:	bxeq	lr
   10884:	b	10758 <__gmon_start__@plt>
   10888:	andeq	r1, r1, r4, lsl #15
   1088c:	andeq	r0, r0, r4, rrx
   10890:	ldr	r0, [pc, #24]	; 108b0 <sprintf@plt+0x8c>
   10894:	ldr	r3, [pc, #24]	; 108b4 <sprintf@plt+0x90>
   10898:	cmp	r3, r0
   1089c:	bxeq	lr
   108a0:	ldr	r3, [pc, #16]	; 108b8 <sprintf@plt+0x94>
   108a4:	cmp	r3, #0
   108a8:	bxeq	lr
   108ac:	bx	r3
   108b0:	strheq	r2, [r2], -ip
   108b4:	strheq	r2, [r2], -ip
   108b8:	andeq	r0, r0, r0
   108bc:	ldr	r0, [pc, #36]	; 108e8 <sprintf@plt+0xc4>
   108c0:	ldr	r1, [pc, #36]	; 108ec <sprintf@plt+0xc8>
   108c4:	sub	r1, r1, r0
   108c8:	asr	r1, r1, #2
   108cc:	add	r1, r1, r1, lsr #31
   108d0:	asrs	r1, r1, #1
   108d4:	bxeq	lr
   108d8:	ldr	r3, [pc, #16]	; 108f0 <sprintf@plt+0xcc>
   108dc:	cmp	r3, #0
   108e0:	bxeq	lr
   108e4:	bx	r3
   108e8:	strheq	r2, [r2], -ip
   108ec:	strheq	r2, [r2], -ip
   108f0:	andeq	r0, r0, r0
   108f4:	push	{r4, lr}
   108f8:	ldr	r4, [pc, #24]	; 10918 <sprintf@plt+0xf4>
   108fc:	ldrb	r3, [r4]
   10900:	cmp	r3, #0
   10904:	popne	{r4, pc}
   10908:	bl	10890 <sprintf@plt+0x6c>
   1090c:	mov	r3, #1
   10910:	strb	r3, [r4]
   10914:	pop	{r4, pc}
   10918:	strheq	r2, [r2], -r9
   1091c:	b	108bc <sprintf@plt+0x98>
   10920:	push	{fp, lr}
   10924:	mov	fp, sp
   10928:	sub	sp, sp, #80	; 0x50
   1092c:	movw	r2, #0
   10930:	str	r2, [fp, #-4]
   10934:	str	r0, [fp, #-8]
   10938:	str	r1, [fp, #-12]
   1093c:	str	r2, [fp, #-16]
   10940:	str	r2, [fp, #-24]	; 0xffffffe8
   10944:	str	r2, [sp, #40]	; 0x28
   10948:	str	r2, [sp, #36]	; 0x24
   1094c:	str	r2, [sp, #32]
   10950:	ldr	r0, [pc, #1260]	; 10e44 <sprintf@plt+0x620>
   10954:	add	r2, pc, r0
   10958:	ldr	r0, [fp, #-8]
   1095c:	ldr	r1, [fp, #-12]
   10960:	bl	107a0 <getopt@plt>
   10964:	str	r0, [fp, #-20]	; 0xffffffec
   10968:	cmn	r0, #1
   1096c:	beq	10b70 <sprintf@plt+0x34c>
   10970:	ldr	r0, [fp, #-20]	; 0xffffffec
   10974:	sub	r0, r0, #63	; 0x3f
   10978:	cmp	r0, #58	; 0x3a
   1097c:	str	r0, [sp, #28]
   10980:	bhi	10b58 <sprintf@plt+0x334>
   10984:	add	r0, pc, #8
   10988:	ldr	r1, [sp, #28]
   1098c:	ldr	r2, [r0, r1, lsl #2]
   10990:	add	pc, r0, r2
   10994:	andeq	r0, r0, r0, asr #3
   10998:	andeq	r0, r0, r4, asr #3
   1099c:	andeq	r0, r0, r4, asr #3
   109a0:	andeq	r0, r0, r4, asr #3
   109a4:	andeq	r0, r0, r4, asr #3
   109a8:	andeq	r0, r0, r4, asr #3
   109ac:	andeq	r0, r0, r4, asr #3
   109b0:	andeq	r0, r0, r4, asr #3
   109b4:	andeq	r0, r0, r4, asr #3
   109b8:	andeq	r0, r0, r4, asr #3
   109bc:	andeq	r0, r0, r4, asr #3
   109c0:	andeq	r0, r0, r4, asr #3
   109c4:	andeq	r0, r0, r4, asr #3
   109c8:	andeq	r0, r0, r4, asr #3
   109cc:	andeq	r0, r0, r4, asr #3
   109d0:	andeq	r0, r0, r4, asr #3
   109d4:	andeq	r0, r0, r4, asr #3
   109d8:	andeq	r0, r0, r4, asr #3
   109dc:	andeq	r0, r0, r4, asr #3
   109e0:	andeq	r0, r0, r4, asr #3
   109e4:	andeq	r0, r0, r4, asr #3
   109e8:	andeq	r0, r0, r4, asr #3
   109ec:	andeq	r0, r0, r4, asr #3
   109f0:	andeq	r0, r0, r4, asr #3
   109f4:	andeq	r0, r0, r4, asr #3
   109f8:	andeq	r0, r0, r4, asr #3
   109fc:	andeq	r0, r0, r4, asr #3
   10a00:	andeq	r0, r0, r4, asr #3
   10a04:	andeq	r0, r0, r4, asr #3
   10a08:	andeq	r0, r0, r4, asr #3
   10a0c:	andeq	r0, r0, r4, asr #3
   10a10:	andeq	r0, r0, r4, asr #3
   10a14:	andeq	r0, r0, r4, asr #3
   10a18:	andeq	r0, r0, r4, asr #3
   10a1c:	andeq	r0, r0, r4, asr #3
   10a20:	strdeq	r0, [r0], -ip
   10a24:	andeq	r0, r0, r4, asr #3
   10a28:	andeq	r0, r0, r4, asr #3
   10a2c:	andeq	r0, r0, r4, asr #3
   10a30:	andeq	r0, r0, r4, asr #3
   10a34:	andeq	r0, r0, r4, asr #3
   10a38:			; <UNDEFINED> instruction: 0x000001bc
   10a3c:	andeq	r0, r0, r4, asr #3
   10a40:	andeq	r0, r0, r4, asr #3
   10a44:	andeq	r0, r0, r4, asr #3
   10a48:	andeq	r0, r0, r4, lsl r1
   10a4c:	andeq	r0, r0, ip, ror #1
   10a50:	andeq	r0, r0, r4, asr #3
   10a54:	andeq	r0, r0, r4, asr #3
   10a58:	andeq	r0, r0, ip, ror r1
   10a5c:	andeq	r0, r0, r4, asr #3
   10a60:	andeq	r0, r0, r8, lsr r1
   10a64:	andeq	r0, r0, ip, asr r1
   10a68:	andeq	r0, r0, r4, asr #3
   10a6c:	andeq	r0, r0, r4, asr #3
   10a70:	andeq	r0, r0, r4, asr #3
   10a74:	andeq	r0, r0, r4, asr #3
   10a78:	muleq	r0, ip, r1
   10a7c:	andeq	r0, r0, ip, lsr #3
   10a80:	ldr	r0, [sp, #40]	; 0x28
   10a84:	orr	r0, r0, #1
   10a88:	str	r0, [sp, #40]	; 0x28
   10a8c:	b	10b6c <sprintf@plt+0x348>
   10a90:	ldr	r0, [sp, #40]	; 0x28
   10a94:	orr	r0, r0, #16
   10a98:	str	r0, [sp, #40]	; 0x28
   10a9c:	movw	r0, #4
   10aa0:	str	r0, [sp, #32]
   10aa4:	b	10b6c <sprintf@plt+0x348>
   10aa8:	ldr	r0, [pc, #976]	; 10e80 <sprintf@plt+0x65c>
   10aac:	ldr	r0, [pc, r0]
   10ab0:	ldr	r1, [sp, #40]	; 0x28
   10ab4:	orr	r1, r1, #8
   10ab8:	str	r1, [sp, #40]	; 0x28
   10abc:	ldr	r0, [r0]
   10ac0:	bl	107b8 <atoi@plt>
   10ac4:	str	r0, [sp, #36]	; 0x24
   10ac8:	b	10b6c <sprintf@plt+0x348>
   10acc:	ldr	r0, [pc, #936]	; 10e7c <sprintf@plt+0x658>
   10ad0:	ldr	r0, [pc, r0]
   10ad4:	ldr	r1, [sp, #40]	; 0x28
   10ad8:	orr	r1, r1, #32
   10adc:	str	r1, [sp, #40]	; 0x28
   10ae0:	ldr	r0, [r0]
   10ae4:	bl	107b8 <atoi@plt>
   10ae8:	str	r0, [sp, #32]
   10aec:	b	10b6c <sprintf@plt+0x348>
   10af0:	ldr	r0, [pc, #896]	; 10e78 <sprintf@plt+0x654>
   10af4:	ldr	r0, [pc, r0]
   10af8:	ldr	r1, [sp, #40]	; 0x28
   10afc:	orr	r1, r1, #2
   10b00:	str	r1, [sp, #40]	; 0x28
   10b04:	ldr	r0, [r0]
   10b08:	str	r0, [fp, #-24]	; 0xffffffe8
   10b0c:	b	10b6c <sprintf@plt+0x348>
   10b10:	ldr	r0, [pc, #860]	; 10e74 <sprintf@plt+0x650>
   10b14:	ldr	r0, [pc, r0]
   10b18:	ldr	r1, [sp, #40]	; 0x28
   10b1c:	orr	r1, r1, #4
   10b20:	str	r1, [sp, #40]	; 0x28
   10b24:	ldr	r0, [r0]
   10b28:	str	r0, [fp, #-16]
   10b2c:	b	10b6c <sprintf@plt+0x348>
   10b30:	ldr	r0, [sp, #40]	; 0x28
   10b34:	orr	r0, r0, #64	; 0x40
   10b38:	str	r0, [sp, #40]	; 0x28
   10b3c:	b	10b6c <sprintf@plt+0x348>
   10b40:	ldr	r0, [sp, #40]	; 0x28
   10b44:	orr	r0, r0, #128	; 0x80
   10b48:	str	r0, [sp, #40]	; 0x28
   10b4c:	b	10b6c <sprintf@plt+0x348>
   10b50:	bl	10e88 <sprintf@plt+0x664>
   10b54:	bl	10fbc <sprintf@plt+0x798>
   10b58:	ldr	r0, [pc, #804]	; 10e84 <sprintf@plt+0x660>
   10b5c:	add	r0, pc, r0
   10b60:	ldr	r1, [fp, #-20]	; 0xffffffec
   10b64:	bl	107ac <printf@plt>
   10b68:	str	r0, [sp, #24]
   10b6c:	b	10950 <sprintf@plt+0x12c>
   10b70:	ldr	r0, [sp, #40]	; 0x28
   10b74:	and	r0, r0, #1
   10b78:	cmp	r0, #0
   10b7c:	beq	10bc4 <sprintf@plt+0x3a0>
   10b80:	ldr	r0, [sp, #36]	; 0x24
   10b84:	cmp	r0, #0
   10b88:	bne	10b94 <sprintf@plt+0x370>
   10b8c:	movw	r0, #8
   10b90:	str	r0, [sp, #36]	; 0x24
   10b94:	ldr	r0, [sp, #40]	; 0x28
   10b98:	and	r0, r0, #2
   10b9c:	cmp	r0, #0
   10ba0:	beq	10bb4 <sprintf@plt+0x390>
   10ba4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10ba8:	bl	11078 <sprintf@plt+0x854>
   10bac:	str	r0, [fp, #-28]	; 0xffffffe4
   10bb0:	b	10bc0 <sprintf@plt+0x39c>
   10bb4:	ldr	r0, [sp, #36]	; 0x24
   10bb8:	bl	11104 <sprintf@plt+0x8e0>
   10bbc:	str	r0, [fp, #-28]	; 0xffffffe4
   10bc0:	b	10cc0 <sprintf@plt+0x49c>
   10bc4:	ldr	r0, [sp, #40]	; 0x28
   10bc8:	and	r0, r0, #16
   10bcc:	cmp	r0, #0
   10bd0:	beq	10c20 <sprintf@plt+0x3fc>
   10bd4:	ldr	r0, [sp, #36]	; 0x24
   10bd8:	cmp	r0, #0
   10bdc:	bne	10be8 <sprintf@plt+0x3c4>
   10be0:	movw	r0, #22
   10be4:	str	r0, [sp, #36]	; 0x24
   10be8:	ldr	r0, [sp, #40]	; 0x28
   10bec:	and	r0, r0, #2
   10bf0:	cmp	r0, #0
   10bf4:	beq	10c0c <sprintf@plt+0x3e8>
   10bf8:	ldr	r0, [sp, #32]
   10bfc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10c00:	bl	111bc <sprintf@plt+0x998>
   10c04:	str	r0, [fp, #-28]	; 0xffffffe4
   10c08:	b	10c1c <sprintf@plt+0x3f8>
   10c0c:	ldr	r0, [sp, #32]
   10c10:	ldr	r1, [sp, #36]	; 0x24
   10c14:	bl	11278 <sprintf@plt+0xa54>
   10c18:	str	r0, [fp, #-28]	; 0xffffffe4
   10c1c:	b	10cbc <sprintf@plt+0x498>
   10c20:	ldr	r0, [sp, #40]	; 0x28
   10c24:	and	r0, r0, #64	; 0x40
   10c28:	cmp	r0, #0
   10c2c:	beq	10c74 <sprintf@plt+0x450>
   10c30:	ldr	r0, [sp, #36]	; 0x24
   10c34:	cmp	r0, #0
   10c38:	bne	10c44 <sprintf@plt+0x420>
   10c3c:	movw	r0, #16
   10c40:	str	r0, [sp, #36]	; 0x24
   10c44:	ldr	r0, [sp, #40]	; 0x28
   10c48:	and	r0, r0, #2
   10c4c:	cmp	r0, #0
   10c50:	beq	10c64 <sprintf@plt+0x440>
   10c54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10c58:	bl	11368 <sprintf@plt+0xb44>
   10c5c:	str	r0, [fp, #-28]	; 0xffffffe4
   10c60:	b	10c70 <sprintf@plt+0x44c>
   10c64:	ldr	r0, [sp, #36]	; 0x24
   10c68:	bl	113f4 <sprintf@plt+0xbd0>
   10c6c:	str	r0, [fp, #-28]	; 0xffffffe4
   10c70:	b	10cb8 <sprintf@plt+0x494>
   10c74:	ldr	r0, [sp, #36]	; 0x24
   10c78:	cmp	r0, #0
   10c7c:	bne	10c88 <sprintf@plt+0x464>
   10c80:	movw	r0, #16
   10c84:	str	r0, [sp, #36]	; 0x24
   10c88:	ldr	r0, [sp, #40]	; 0x28
   10c8c:	and	r0, r0, #2
   10c90:	cmp	r0, #0
   10c94:	beq	10ca8 <sprintf@plt+0x484>
   10c98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10c9c:	bl	114ac <sprintf@plt+0xc88>
   10ca0:	str	r0, [fp, #-28]	; 0xffffffe4
   10ca4:	b	10cb4 <sprintf@plt+0x490>
   10ca8:	ldr	r0, [sp, #36]	; 0x24
   10cac:	bl	11538 <sprintf@plt+0xd14>
   10cb0:	str	r0, [fp, #-28]	; 0xffffffe4
   10cb4:	b	10cb8 <sprintf@plt+0x494>
   10cb8:	b	10cbc <sprintf@plt+0x498>
   10cbc:	b	10cc0 <sprintf@plt+0x49c>
   10cc0:	ldr	r0, [sp, #40]	; 0x28
   10cc4:	and	r0, r0, #4
   10cc8:	cmp	r0, #0
   10ccc:	beq	10d1c <sprintf@plt+0x4f8>
   10cd0:	ldr	r0, [fp, #-16]
   10cd4:	movw	r1, #0
   10cd8:	cmp	r0, r1
   10cdc:	bne	10d08 <sprintf@plt+0x4e4>
   10ce0:	ldr	r0, [pc, #384]	; 10e68 <sprintf@plt+0x644>
   10ce4:	add	r1, pc, r0
   10ce8:	ldr	r0, [pc, #380]	; 10e6c <sprintf@plt+0x648>
   10cec:	ldr	r0, [pc, r0]
   10cf0:	ldr	r0, [r0]
   10cf4:	bl	107d0 <fprintf@plt>
   10cf8:	movw	r1, #1
   10cfc:	str	r1, [fp, #-4]
   10d00:	str	r0, [sp, #20]
   10d04:	b	10e38 <sprintf@plt+0x614>
   10d08:	ldr	r0, [fp, #-16]
   10d0c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   10d10:	bl	107e8 <rb_crypt@plt>
   10d14:	str	r0, [fp, #-32]	; 0xffffffe0
   10d18:	b	10e1c <sprintf@plt+0x5f8>
   10d1c:	ldr	r0, [pc, #292]	; 10e48 <sprintf@plt+0x624>
   10d20:	add	r0, pc, r0
   10d24:	bl	10764 <getpass@plt>
   10d28:	str	r0, [fp, #-16]
   10d2c:	ldr	r0, [fp, #-16]
   10d30:	ldr	r1, [fp, #-28]	; 0xffffffe4
   10d34:	bl	107e8 <rb_crypt@plt>
   10d38:	str	r0, [fp, #-32]	; 0xffffffe0
   10d3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10d40:	movw	r1, #0
   10d44:	cmp	r0, r1
   10d48:	bne	10d74 <sprintf@plt+0x550>
   10d4c:	ldr	r0, [pc, #248]	; 10e4c <sprintf@plt+0x628>
   10d50:	add	r1, pc, r0
   10d54:	ldr	r0, [pc, #244]	; 10e50 <sprintf@plt+0x62c>
   10d58:	ldr	r0, [pc, r0]
   10d5c:	ldr	r0, [r0]
   10d60:	bl	107d0 <fprintf@plt>
   10d64:	movw	r1, #1
   10d68:	str	r1, [fp, #-4]
   10d6c:	str	r0, [sp, #16]
   10d70:	b	10e38 <sprintf@plt+0x614>
   10d74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10d78:	bl	107dc <strdup@plt>
   10d7c:	ldr	lr, [pc, #208]	; 10e54 <sprintf@plt+0x630>
   10d80:	add	lr, pc, lr
   10d84:	str	r0, [fp, #-32]	; 0xffffffe0
   10d88:	mov	r0, lr
   10d8c:	bl	10764 <getpass@plt>
   10d90:	str	r0, [fp, #-16]
   10d94:	ldr	r0, [fp, #-16]
   10d98:	ldr	r1, [fp, #-28]	; 0xffffffe4
   10d9c:	bl	107e8 <rb_crypt@plt>
   10da0:	str	r0, [fp, #-36]	; 0xffffffdc
   10da4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   10da8:	movw	r1, #0
   10dac:	cmp	r0, r1
   10db0:	bne	10ddc <sprintf@plt+0x5b8>
   10db4:	ldr	r0, [pc, #156]	; 10e58 <sprintf@plt+0x634>
   10db8:	add	r1, pc, r0
   10dbc:	ldr	r0, [pc, #152]	; 10e5c <sprintf@plt+0x638>
   10dc0:	ldr	r0, [pc, r0]
   10dc4:	ldr	r0, [r0]
   10dc8:	bl	107d0 <fprintf@plt>
   10dcc:	movw	r1, #1
   10dd0:	str	r1, [fp, #-4]
   10dd4:	str	r0, [sp, #12]
   10dd8:	b	10e38 <sprintf@plt+0x614>
   10ddc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10de0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   10de4:	bl	10800 <strcmp@plt>
   10de8:	cmp	r0, #0
   10dec:	beq	10e18 <sprintf@plt+0x5f4>
   10df0:	ldr	r0, [pc, #104]	; 10e60 <sprintf@plt+0x63c>
   10df4:	add	r1, pc, r0
   10df8:	ldr	r0, [pc, #100]	; 10e64 <sprintf@plt+0x640>
   10dfc:	ldr	r0, [pc, r0]
   10e00:	ldr	r0, [r0]
   10e04:	bl	107d0 <fprintf@plt>
   10e08:	movw	r1, #1
   10e0c:	str	r1, [fp, #-4]
   10e10:	str	r0, [sp, #8]
   10e14:	b	10e38 <sprintf@plt+0x614>
   10e18:	b	10e1c <sprintf@plt+0x5f8>
   10e1c:	ldr	r0, [pc, #76]	; 10e70 <sprintf@plt+0x64c>
   10e20:	add	r0, pc, r0
   10e24:	ldr	r1, [fp, #-32]	; 0xffffffe0
   10e28:	bl	107ac <printf@plt>
   10e2c:	movw	r1, #0
   10e30:	str	r1, [fp, #-4]
   10e34:	str	r0, [sp, #4]
   10e38:	ldr	r0, [fp, #-4]
   10e3c:	mov	sp, fp
   10e40:	pop	{fp, pc}
   10e44:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10e48:	andeq	r0, r0, r7, asr #22
   10e4c:	andeq	r0, r0, r3, lsr #22
   10e50:	andeq	r1, r1, r8, lsl #6
   10e54:	andeq	r0, r0, r6, lsl #22
   10e58:			; <UNDEFINED> instruction: 0x00000abb
   10e5c:	andeq	r1, r1, r0, lsr #5
   10e60:	muleq	r0, sl, sl
   10e64:	andeq	r1, r1, r4, ror #4
   10e68:	andeq	r0, r0, r4, ror #22
   10e6c:	andeq	r1, r1, r4, ror r3
   10e70:	andeq	r0, r0, r6, lsl #21
   10e74:	andeq	r1, r1, r0, asr r5
   10e78:	andeq	r1, r1, r0, ror r5
   10e7c:	muleq	r1, r4, r5
   10e80:			; <UNDEFINED> instruction: 0x000115b8
   10e84:	ldrdeq	r0, [r0], -r7
   10e88:	push	{fp, lr}
   10e8c:	mov	fp, sp
   10e90:	sub	sp, sp, #48	; 0x30
   10e94:	ldr	r0, [pc, #284]	; 10fb8 <sprintf@plt+0x794>
   10e98:	add	r0, pc, r0
   10e9c:	bl	107ac <printf@plt>
   10ea0:	ldr	lr, [pc, #268]	; 10fb4 <sprintf@plt+0x790>
   10ea4:	add	lr, pc, lr
   10ea8:	str	r0, [fp, #-4]
   10eac:	mov	r0, lr
   10eb0:	bl	107ac <printf@plt>
   10eb4:	ldr	lr, [pc, #244]	; 10fb0 <sprintf@plt+0x78c>
   10eb8:	add	lr, pc, lr
   10ebc:	str	r0, [fp, #-8]
   10ec0:	mov	r0, lr
   10ec4:	bl	107ac <printf@plt>
   10ec8:	ldr	lr, [pc, #220]	; 10fac <sprintf@plt+0x788>
   10ecc:	add	lr, pc, lr
   10ed0:	str	r0, [fp, #-12]
   10ed4:	mov	r0, lr
   10ed8:	bl	107ac <printf@plt>
   10edc:	ldr	lr, [pc, #196]	; 10fa8 <sprintf@plt+0x784>
   10ee0:	add	lr, pc, lr
   10ee4:	str	r0, [fp, #-16]
   10ee8:	mov	r0, lr
   10eec:	bl	107ac <printf@plt>
   10ef0:	ldr	lr, [pc, #172]	; 10fa4 <sprintf@plt+0x780>
   10ef4:	add	lr, pc, lr
   10ef8:	str	r0, [fp, #-20]	; 0xffffffec
   10efc:	mov	r0, lr
   10f00:	bl	107ac <printf@plt>
   10f04:	ldr	lr, [pc, #148]	; 10fa0 <sprintf@plt+0x77c>
   10f08:	add	lr, pc, lr
   10f0c:	str	r0, [sp, #24]
   10f10:	mov	r0, lr
   10f14:	bl	107ac <printf@plt>
   10f18:	ldr	lr, [pc, #124]	; 10f9c <sprintf@plt+0x778>
   10f1c:	add	lr, pc, lr
   10f20:	str	r0, [sp, #20]
   10f24:	mov	r0, lr
   10f28:	bl	107ac <printf@plt>
   10f2c:	ldr	lr, [pc, #100]	; 10f98 <sprintf@plt+0x774>
   10f30:	add	lr, pc, lr
   10f34:	str	r0, [sp, #16]
   10f38:	mov	r0, lr
   10f3c:	bl	107ac <printf@plt>
   10f40:	ldr	lr, [pc, #76]	; 10f94 <sprintf@plt+0x770>
   10f44:	add	lr, pc, lr
   10f48:	str	r0, [sp, #12]
   10f4c:	mov	r0, lr
   10f50:	bl	107ac <printf@plt>
   10f54:	ldr	lr, [pc, #52]	; 10f90 <sprintf@plt+0x76c>
   10f58:	add	lr, pc, lr
   10f5c:	str	r0, [sp, #8]
   10f60:	mov	r0, lr
   10f64:	bl	107ac <printf@plt>
   10f68:	ldr	lr, [pc, #28]	; 10f8c <sprintf@plt+0x768>
   10f6c:	add	lr, pc, lr
   10f70:	str	r0, [sp, #4]
   10f74:	mov	r0, lr
   10f78:	bl	107ac <printf@plt>
   10f7c:	movw	lr, #0
   10f80:	str	r0, [sp]
   10f84:	mov	r0, lr
   10f88:	bl	1080c <exit@plt>
   10f8c:	andeq	r0, r0, sl, asr #24
   10f90:	andeq	r0, r0, r6, lsr ip
   10f94:	andeq	r0, r0, r0, lsr ip
   10f98:	andeq	r0, r0, fp, lsl #24
   10f9c:	strdeq	r0, [r0], -r5
   10fa0:	ldrdeq	r0, [r0], -r2
   10fa4:	andeq	r0, r0, pc, lsr #23
   10fa8:	andeq	r0, r0, r2, lsr #23
   10fac:	muleq	r0, r9, fp
   10fb0:	andeq	r0, r0, lr, lsl #23
   10fb4:	andeq	r0, r0, r3, lsl #23
   10fb8:	andeq	r0, r0, r2, asr #22
   10fbc:	push	{fp, lr}
   10fc0:	mov	fp, sp
   10fc4:	sub	sp, sp, #32
   10fc8:	ldr	r0, [pc, #164]	; 11074 <sprintf@plt+0x850>
   10fcc:	add	r0, pc, r0
   10fd0:	bl	107ac <printf@plt>
   10fd4:	ldr	lr, [pc, #148]	; 11070 <sprintf@plt+0x84c>
   10fd8:	add	lr, pc, lr
   10fdc:	str	r0, [fp, #-4]
   10fe0:	mov	r0, lr
   10fe4:	bl	107ac <printf@plt>
   10fe8:	ldr	lr, [pc, #124]	; 1106c <sprintf@plt+0x848>
   10fec:	add	lr, pc, lr
   10ff0:	str	r0, [fp, #-8]
   10ff4:	mov	r0, lr
   10ff8:	bl	107ac <printf@plt>
   10ffc:	ldr	lr, [pc, #100]	; 11068 <sprintf@plt+0x844>
   11000:	add	lr, pc, lr
   11004:	str	r0, [fp, #-12]
   11008:	mov	r0, lr
   1100c:	bl	107ac <printf@plt>
   11010:	ldr	lr, [pc, #76]	; 11064 <sprintf@plt+0x840>
   11014:	add	lr, pc, lr
   11018:	str	r0, [sp, #16]
   1101c:	mov	r0, lr
   11020:	bl	107ac <printf@plt>
   11024:	ldr	lr, [pc, #52]	; 11060 <sprintf@plt+0x83c>
   11028:	add	lr, pc, lr
   1102c:	str	r0, [sp, #12]
   11030:	mov	r0, lr
   11034:	bl	107ac <printf@plt>
   11038:	ldr	lr, [pc, #28]	; 1105c <sprintf@plt+0x838>
   1103c:	add	lr, pc, lr
   11040:	str	r0, [sp, #8]
   11044:	mov	r0, lr
   11048:	bl	107ac <printf@plt>
   1104c:	movw	lr, #0
   11050:	str	r0, [sp, #4]
   11054:	mov	r0, lr
   11058:	bl	1080c <exit@plt>
   1105c:	andeq	r0, r0, sp, ror #25
   11060:	ldrdeq	r0, [r0], -sl
   11064:			; <UNDEFINED> instruction: 0x00000cb0
   11068:	andeq	r0, r0, r3, lsl #25
   1106c:	andeq	r0, r0, r6, asr ip
   11070:	andeq	r0, r0, r7, lsr #24
   11074:	andeq	r0, r0, pc, lsl #24
   11078:	push	{fp, lr}
   1107c:	mov	fp, sp
   11080:	sub	sp, sp, #16
   11084:	str	r0, [fp, #-4]
   11088:	ldr	r0, [fp, #-4]
   1108c:	movw	r1, #0
   11090:	cmp	r0, r1
   11094:	beq	110d8 <sprintf@plt+0x8b4>
   11098:	ldr	r0, [fp, #-4]
   1109c:	bl	10794 <strlen@plt>
   110a0:	cmp	r0, #16
   110a4:	bhi	110d8 <sprintf@plt+0x8b4>
   110a8:	ldr	r0, [pc, #76]	; 110fc <sprintf@plt+0x8d8>
   110ac:	add	r0, pc, r0
   110b0:	ldr	r1, [pc, #72]	; 11100 <sprintf@plt+0x8dc>
   110b4:	add	r1, pc, r1
   110b8:	ldr	r2, [fp, #-4]
   110bc:	bl	10824 <sprintf@plt>
   110c0:	ldr	r1, [pc, #48]	; 110f8 <sprintf@plt+0x8d4>
   110c4:	add	r1, pc, r1
   110c8:	str	r0, [sp, #8]
   110cc:	mov	r0, r1
   110d0:	mov	sp, fp
   110d4:	pop	{fp, pc}
   110d8:	ldr	r0, [pc, #20]	; 110f4 <sprintf@plt+0x8d0>
   110dc:	add	r0, pc, r0
   110e0:	bl	107ac <printf@plt>
   110e4:	movw	lr, #1
   110e8:	str	r0, [sp, #4]
   110ec:	mov	r0, lr
   110f0:	bl	1080c <exit@plt>
   110f4:	ldrdeq	r0, [r0], -r5
   110f8:	andeq	r0, r1, lr, ror #31
   110fc:	andeq	r1, r1, r6
   11100:	strdeq	r0, [r0], -r6
   11104:	push	{fp, lr}
   11108:	mov	fp, sp
   1110c:	sub	sp, sp, #16
   11110:	str	r0, [fp, #-4]
   11114:	ldr	r0, [fp, #-4]
   11118:	cmp	r0, #16
   1111c:	ble	1113c <sprintf@plt+0x918>
   11120:	ldr	r0, [pc, #144]	; 111b8 <sprintf@plt+0x994>
   11124:	add	r0, pc, r0
   11128:	bl	107ac <printf@plt>
   1112c:	movw	lr, #0
   11130:	str	r0, [sp, #8]
   11134:	mov	r0, lr
   11138:	bl	1080c <exit@plt>
   1113c:	ldr	r0, [pc, #112]	; 111b4 <sprintf@plt+0x990>
   11140:	add	r0, pc, r0
   11144:	add	r1, r0, #3
   11148:	movw	r2, #36	; 0x24
   1114c:	strb	r2, [r0]
   11150:	movw	r3, #49	; 0x31
   11154:	strb	r3, [r0, #1]
   11158:	strb	r2, [r0, #2]
   1115c:	ldr	r0, [fp, #-4]
   11160:	str	r0, [sp, #4]
   11164:	mov	r0, r1
   11168:	ldr	r1, [sp, #4]
   1116c:	bl	115f0 <sprintf@plt+0xdcc>
   11170:	ldr	r1, [pc, #56]	; 111b0 <sprintf@plt+0x98c>
   11174:	add	r1, pc, r1
   11178:	ldr	r2, [fp, #-4]
   1117c:	add	r2, r2, #3
   11180:	add	r2, r1, r2
   11184:	movw	r3, #36	; 0x24
   11188:	strb	r3, [r2]
   1118c:	ldr	r2, [fp, #-4]
   11190:	add	r2, r2, #4
   11194:	add	r2, r1, r2
   11198:	movw	r3, #0
   1119c:	strb	r3, [r2]
   111a0:	str	r0, [sp]
   111a4:	mov	r0, r1
   111a8:	mov	sp, fp
   111ac:	pop	{fp, pc}
   111b0:	andeq	r0, r1, r3, asr pc
   111b4:	andeq	r0, r1, r7, lsl #31
   111b8:	andeq	r0, r0, pc, asr #15
   111bc:	push	{fp, lr}
   111c0:	mov	fp, sp
   111c4:	sub	sp, sp, #24
   111c8:	str	r0, [fp, #-4]
   111cc:	str	r1, [fp, #-8]
   111d0:	ldr	r0, [fp, #-8]
   111d4:	movw	r1, #0
   111d8:	cmp	r0, r1
   111dc:	beq	11248 <sprintf@plt+0xa24>
   111e0:	ldr	r0, [fp, #-8]
   111e4:	bl	10794 <strlen@plt>
   111e8:	cmp	r0, #22
   111ec:	bhi	11248 <sprintf@plt+0xa24>
   111f0:	ldr	r0, [pc, #124]	; 11274 <sprintf@plt+0xa50>
   111f4:	add	r1, pc, r0
   111f8:	sub	r0, fp, #11
   111fc:	ldr	r2, [fp, #-4]
   11200:	bl	10824 <sprintf@plt>
   11204:	ldr	r1, [pc, #96]	; 1126c <sprintf@plt+0xa48>
   11208:	add	r1, pc, r1
   1120c:	ldr	r2, [pc, #92]	; 11270 <sprintf@plt+0xa4c>
   11210:	add	r2, pc, r2
   11214:	sub	lr, fp, #11
   11218:	ldr	r3, [fp, #-8]
   1121c:	str	r0, [sp, #8]
   11220:	mov	r0, r1
   11224:	mov	r1, r2
   11228:	mov	r2, lr
   1122c:	bl	10824 <sprintf@plt>
   11230:	ldr	r1, [pc, #48]	; 11268 <sprintf@plt+0xa44>
   11234:	add	r1, pc, r1
   11238:	str	r0, [sp, #4]
   1123c:	mov	r0, r1
   11240:	mov	sp, fp
   11244:	pop	{fp, pc}
   11248:	ldr	r0, [pc, #20]	; 11264 <sprintf@plt+0xa40>
   1124c:	add	r0, pc, r0
   11250:	bl	107ac <printf@plt>
   11254:	movw	lr, #1
   11258:	str	r0, [sp]
   1125c:	mov	r0, lr
   11260:	bl	1080c <exit@plt>
   11264:	andeq	r0, r0, r5, lsr #14
   11268:	strdeq	r0, [r1], -ip
   1126c:	andeq	r0, r1, r8, lsr #30
   11270:	andeq	r0, r0, r6, asr r7
   11274:	andeq	r0, r0, sp, ror #14
   11278:	push	{fp, lr}
   1127c:	mov	fp, sp
   11280:	sub	sp, sp, #32
   11284:	str	r0, [fp, #-4]
   11288:	str	r1, [fp, #-8]
   1128c:	ldr	r0, [fp, #-8]
   11290:	cmp	r0, #22
   11294:	ble	112b4 <sprintf@plt+0xa90>
   11298:	ldr	r0, [pc, #196]	; 11364 <sprintf@plt+0xb40>
   1129c:	add	r0, pc, r0
   112a0:	bl	107ac <printf@plt>
   112a4:	movw	lr, #0
   112a8:	str	r0, [sp, #16]
   112ac:	mov	r0, lr
   112b0:	bl	1080c <exit@plt>
   112b4:	ldr	r0, [pc, #164]	; 11360 <sprintf@plt+0xb3c>
   112b8:	add	r1, pc, r0
   112bc:	sub	r0, fp, #11
   112c0:	ldr	r2, [fp, #-4]
   112c4:	bl	10824 <sprintf@plt>
   112c8:	ldr	r1, [pc, #136]	; 11358 <sprintf@plt+0xb34>
   112cc:	add	r1, pc, r1
   112d0:	ldr	r2, [pc, #132]	; 1135c <sprintf@plt+0xb38>
   112d4:	add	r2, pc, r2
   112d8:	sub	lr, fp, #11
   112dc:	str	r0, [sp, #12]
   112e0:	mov	r0, r1
   112e4:	mov	r1, r2
   112e8:	mov	r2, lr
   112ec:	bl	10824 <sprintf@plt>
   112f0:	ldr	r1, [pc, #92]	; 11354 <sprintf@plt+0xb30>
   112f4:	add	r1, pc, r1
   112f8:	add	r1, r1, #7
   112fc:	ldr	r2, [fp, #-8]
   11300:	str	r0, [sp, #8]
   11304:	mov	r0, r1
   11308:	mov	r1, r2
   1130c:	bl	115f0 <sprintf@plt+0xdcc>
   11310:	ldr	r1, [pc, #56]	; 11350 <sprintf@plt+0xb2c>
   11314:	add	r1, pc, r1
   11318:	ldr	r2, [fp, #-8]
   1131c:	add	r2, r2, #7
   11320:	add	r2, r1, r2
   11324:	movw	lr, #36	; 0x24
   11328:	strb	lr, [r2]
   1132c:	ldr	r2, [fp, #-8]
   11330:	add	r2, r2, #8
   11334:	add	r2, r1, r2
   11338:	movw	lr, #0
   1133c:	strb	lr, [r2]
   11340:	str	r0, [sp, #4]
   11344:	mov	r0, r1
   11348:	mov	sp, fp
   1134c:	pop	{fp, pc}
   11350:	andeq	r0, r1, fp, lsr lr
   11354:	andeq	r0, r1, fp, asr lr
   11358:	andeq	r0, r1, r3, lsl #29
   1135c:	strdeq	r0, [r0], -lr
   11360:	andeq	r0, r0, r9, lsr #13
   11364:	andeq	r0, r0, r7, lsl r7
   11368:	push	{fp, lr}
   1136c:	mov	fp, sp
   11370:	sub	sp, sp, #16
   11374:	str	r0, [fp, #-4]
   11378:	ldr	r0, [fp, #-4]
   1137c:	movw	r1, #0
   11380:	cmp	r0, r1
   11384:	beq	113c8 <sprintf@plt+0xba4>
   11388:	ldr	r0, [fp, #-4]
   1138c:	bl	10794 <strlen@plt>
   11390:	cmp	r0, #16
   11394:	bhi	113c8 <sprintf@plt+0xba4>
   11398:	ldr	r0, [pc, #76]	; 113ec <sprintf@plt+0xbc8>
   1139c:	add	r0, pc, r0
   113a0:	ldr	r1, [pc, #72]	; 113f0 <sprintf@plt+0xbcc>
   113a4:	add	r1, pc, r1
   113a8:	ldr	r2, [fp, #-4]
   113ac:	bl	10824 <sprintf@plt>
   113b0:	ldr	r1, [pc, #48]	; 113e8 <sprintf@plt+0xbc4>
   113b4:	add	r1, pc, r1
   113b8:	str	r0, [sp, #8]
   113bc:	mov	r0, r1
   113c0:	mov	sp, fp
   113c4:	pop	{fp, pc}
   113c8:	ldr	r0, [pc, #20]	; 113e4 <sprintf@plt+0xbc0>
   113cc:	add	r0, pc, r0
   113d0:	bl	107ac <printf@plt>
   113d4:	movw	lr, #1
   113d8:	str	r0, [sp, #4]
   113dc:	mov	r0, lr
   113e0:	bl	1080c <exit@plt>
   113e4:	andeq	r0, r0, r5, ror #9
   113e8:	andeq	r0, r1, r8, lsr #26
   113ec:	andeq	r0, r1, r0, asr #26
   113f0:	andeq	r0, r0, r5, ror r5
   113f4:	push	{fp, lr}
   113f8:	mov	fp, sp
   113fc:	sub	sp, sp, #16
   11400:	str	r0, [fp, #-4]
   11404:	ldr	r0, [fp, #-4]
   11408:	cmp	r0, #16
   1140c:	ble	1142c <sprintf@plt+0xc08>
   11410:	ldr	r0, [pc, #144]	; 114a8 <sprintf@plt+0xc84>
   11414:	add	r0, pc, r0
   11418:	bl	107ac <printf@plt>
   1141c:	movw	lr, #0
   11420:	str	r0, [sp, #8]
   11424:	mov	r0, lr
   11428:	bl	1080c <exit@plt>
   1142c:	ldr	r0, [pc, #112]	; 114a4 <sprintf@plt+0xc80>
   11430:	add	r0, pc, r0
   11434:	add	r1, r0, #3
   11438:	movw	r2, #36	; 0x24
   1143c:	strb	r2, [r0]
   11440:	movw	r3, #53	; 0x35
   11444:	strb	r3, [r0, #1]
   11448:	strb	r2, [r0, #2]
   1144c:	ldr	r0, [fp, #-4]
   11450:	str	r0, [sp, #4]
   11454:	mov	r0, r1
   11458:	ldr	r1, [sp, #4]
   1145c:	bl	115f0 <sprintf@plt+0xdcc>
   11460:	ldr	r1, [pc, #56]	; 114a0 <sprintf@plt+0xc7c>
   11464:	add	r1, pc, r1
   11468:	ldr	r2, [fp, #-4]
   1146c:	add	r2, r2, #3
   11470:	add	r2, r1, r2
   11474:	movw	r3, #36	; 0x24
   11478:	strb	r3, [r2]
   1147c:	ldr	r2, [fp, #-4]
   11480:	add	r2, r2, #4
   11484:	add	r2, r1, r2
   11488:	movw	r3, #0
   1148c:	strb	r3, [r2]
   11490:	str	r0, [sp]
   11494:	mov	r0, r1
   11498:	mov	sp, fp
   1149c:	pop	{fp, pc}
   114a0:	andeq	r0, r1, r2, lsr #25
   114a4:	ldrdeq	r0, [r1], -r6
   114a8:	andeq	r0, r0, r3, lsl r5
   114ac:	push	{fp, lr}
   114b0:	mov	fp, sp
   114b4:	sub	sp, sp, #16
   114b8:	str	r0, [fp, #-4]
   114bc:	ldr	r0, [fp, #-4]
   114c0:	movw	r1, #0
   114c4:	cmp	r0, r1
   114c8:	beq	1150c <sprintf@plt+0xce8>
   114cc:	ldr	r0, [fp, #-4]
   114d0:	bl	10794 <strlen@plt>
   114d4:	cmp	r0, #16
   114d8:	bhi	1150c <sprintf@plt+0xce8>
   114dc:	ldr	r0, [pc, #76]	; 11530 <sprintf@plt+0xd0c>
   114e0:	add	r0, pc, r0
   114e4:	ldr	r1, [pc, #72]	; 11534 <sprintf@plt+0xd10>
   114e8:	add	r1, pc, r1
   114ec:	ldr	r2, [fp, #-4]
   114f0:	bl	10824 <sprintf@plt>
   114f4:	ldr	r1, [pc, #48]	; 1152c <sprintf@plt+0xd08>
   114f8:	add	r1, pc, r1
   114fc:	str	r0, [sp, #8]
   11500:	mov	r0, r1
   11504:	mov	sp, fp
   11508:	pop	{fp, pc}
   1150c:	ldr	r0, [pc, #20]	; 11528 <sprintf@plt+0xd04>
   11510:	add	r0, pc, r0
   11514:	bl	107ac <printf@plt>
   11518:	movw	lr, #1
   1151c:	str	r0, [sp, #4]
   11520:	mov	r0, lr
   11524:	bl	1080c <exit@plt>
   11528:	andeq	r0, r0, r1, lsr #7
   1152c:	strdeq	r0, [r1], -r9
   11530:	andeq	r0, r1, r1, lsl ip
   11534:	andeq	r0, r0, r8, lsr r4
   11538:	push	{fp, lr}
   1153c:	mov	fp, sp
   11540:	sub	sp, sp, #16
   11544:	str	r0, [fp, #-4]
   11548:	ldr	r0, [fp, #-4]
   1154c:	cmp	r0, #16
   11550:	ble	11570 <sprintf@plt+0xd4c>
   11554:	ldr	r0, [pc, #144]	; 115ec <sprintf@plt+0xdc8>
   11558:	add	r0, pc, r0
   1155c:	bl	107ac <printf@plt>
   11560:	movw	lr, #0
   11564:	str	r0, [sp, #8]
   11568:	mov	r0, lr
   1156c:	bl	1080c <exit@plt>
   11570:	ldr	r0, [pc, #112]	; 115e8 <sprintf@plt+0xdc4>
   11574:	add	r0, pc, r0
   11578:	add	r1, r0, #3
   1157c:	movw	r2, #36	; 0x24
   11580:	strb	r2, [r0]
   11584:	movw	r3, #54	; 0x36
   11588:	strb	r3, [r0, #1]
   1158c:	strb	r2, [r0, #2]
   11590:	ldr	r0, [fp, #-4]
   11594:	str	r0, [sp, #4]
   11598:	mov	r0, r1
   1159c:	ldr	r1, [sp, #4]
   115a0:	bl	115f0 <sprintf@plt+0xdcc>
   115a4:	ldr	r1, [pc, #56]	; 115e4 <sprintf@plt+0xdc0>
   115a8:	add	r1, pc, r1
   115ac:	ldr	r2, [fp, #-4]
   115b0:	add	r2, r2, #3
   115b4:	add	r2, r1, r2
   115b8:	movw	r3, #36	; 0x24
   115bc:	strb	r3, [r2]
   115c0:	ldr	r2, [fp, #-4]
   115c4:	add	r2, r2, #4
   115c8:	add	r2, r1, r2
   115cc:	movw	r3, #0
   115d0:	strb	r3, [r2]
   115d4:	str	r0, [sp]
   115d8:	mov	r0, r1
   115dc:	mov	sp, fp
   115e0:	pop	{fp, pc}
   115e4:	andeq	r0, r1, r3, ror fp
   115e8:	andeq	r0, r1, r7, lsr #23
   115ec:	andeq	r0, r0, ip, ror #7
   115f0:	push	{fp, lr}
   115f4:	mov	fp, sp
   115f8:	sub	sp, sp, #32
   115fc:	ldr	r2, [pc, #276]	; 11718 <sprintf@plt+0xef4>
   11600:	add	r2, pc, r2
   11604:	str	r0, [fp, #-8]
   11608:	str	r1, [fp, #-12]
   1160c:	mov	r0, r2
   11610:	movw	r1, #0
   11614:	bl	10728 <open@plt>
   11618:	str	r0, [sp, #12]
   1161c:	cmp	r0, #0
   11620:	bge	11638 <sprintf@plt+0xe14>
   11624:	ldr	r0, [fp, #-8]
   11628:	ldr	r1, [fp, #-12]
   1162c:	bl	11720 <sprintf@plt+0xefc>
   11630:	str	r0, [fp, #-4]
   11634:	b	1170c <sprintf@plt+0xee8>
   11638:	ldr	r1, [fp, #-12]
   1163c:	movw	r0, #1
   11640:	bl	10770 <calloc@plt>
   11644:	str	r0, [sp, #16]
   11648:	ldr	r0, [sp, #12]
   1164c:	ldr	r1, [sp, #16]
   11650:	ldr	r2, [fp, #-12]
   11654:	bl	10788 <read@plt>
   11658:	ldr	r1, [fp, #-12]
   1165c:	cmp	r0, r1
   11660:	beq	11680 <sprintf@plt+0xe5c>
   11664:	ldr	r0, [sp, #16]
   11668:	bl	1077c <free@plt>
   1166c:	ldr	r0, [fp, #-8]
   11670:	ldr	r1, [fp, #-12]
   11674:	bl	11720 <sprintf@plt+0xefc>
   11678:	str	r0, [fp, #-4]
   1167c:	b	1170c <sprintf@plt+0xee8>
   11680:	movw	r0, #0
   11684:	str	r0, [sp, #8]
   11688:	ldr	r0, [sp, #8]
   1168c:	ldr	r1, [fp, #-12]
   11690:	cmp	r0, r1
   11694:	bge	116fc <sprintf@plt+0xed8>
   11698:	ldr	r0, [pc, #124]	; 1171c <sprintf@plt+0xef8>
   1169c:	add	r0, pc, r0
   116a0:	ldr	r1, [sp, #16]
   116a4:	ldr	r2, [sp, #8]
   116a8:	ldrb	r1, [r1, r2]
   116ac:	str	r0, [sp, #4]
   116b0:	mov	r0, r1
   116b4:	bl	10818 <abs@plt>
   116b8:	mov	r1, r0
   116bc:	asr	r2, r0, #31
   116c0:	add	r2, r0, r2, lsr #26
   116c4:	bic	r2, r2, #63	; 0x3f
   116c8:	sub	r0, r0, r2
   116cc:	ldr	r2, [sp, #4]
   116d0:	add	r0, r2, r0
   116d4:	ldrb	r0, [r0]
   116d8:	ldr	lr, [fp, #-8]
   116dc:	ldr	r3, [sp, #8]
   116e0:	add	r3, lr, r3
   116e4:	strb	r0, [r3]
   116e8:	str	r1, [sp]
   116ec:	ldr	r0, [sp, #8]
   116f0:	add	r0, r0, #1
   116f4:	str	r0, [sp, #8]
   116f8:	b	11688 <sprintf@plt+0xe64>
   116fc:	ldr	r0, [sp, #16]
   11700:	bl	1077c <free@plt>
   11704:	ldr	r0, [fp, #-8]
   11708:	str	r0, [fp, #-4]
   1170c:	ldr	r0, [fp, #-4]
   11710:	mov	sp, fp
   11714:	pop	{fp, pc}
   11718:	andeq	r0, r0, sp, lsl #6
   1171c:	ldrdeq	r0, [r1], -r4
   11720:	push	{fp, lr}
   11724:	mov	fp, sp
   11728:	sub	sp, sp, #24
   1172c:	str	r0, [fp, #-4]
   11730:	str	r1, [fp, #-8]
   11734:	movw	r0, #0
   11738:	bl	107c4 <time@plt>
   1173c:	bl	10740 <srand@plt>
   11740:	movw	r0, #0
   11744:	str	r0, [sp, #12]
   11748:	ldr	r0, [sp, #12]
   1174c:	ldr	r1, [fp, #-8]
   11750:	cmp	r0, r1
   11754:	bge	117ac <sprintf@plt+0xf88>
   11758:	ldr	r0, [pc, #88]	; 117b8 <sprintf@plt+0xf94>
   1175c:	add	r0, pc, r0
   11760:	str	r0, [sp, #8]
   11764:	bl	107f4 <rand@plt>
   11768:	mov	lr, r0
   1176c:	asr	r1, r0, #31
   11770:	add	r1, r0, r1, lsr #26
   11774:	bic	r1, r1, #63	; 0x3f
   11778:	sub	r0, r0, r1
   1177c:	ldr	r1, [sp, #8]
   11780:	add	r0, r1, r0
   11784:	ldrb	r0, [r0]
   11788:	ldr	r2, [fp, #-4]
   1178c:	ldr	r3, [sp, #12]
   11790:	add	r2, r2, r3
   11794:	strb	r0, [r2]
   11798:	str	lr, [sp, #4]
   1179c:	ldr	r0, [sp, #12]
   117a0:	add	r0, r0, #1
   117a4:	str	r0, [sp, #12]
   117a8:	b	11748 <sprintf@plt+0xf24>
   117ac:	ldr	r0, [fp, #-4]
   117b0:	mov	sp, fp
   117b4:	pop	{fp, pc}
   117b8:	andeq	r0, r1, r4, lsl r9
   117bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117c0:	mov	r7, r0
   117c4:	ldr	r6, [pc, #72]	; 11814 <sprintf@plt+0xff0>
   117c8:	ldr	r5, [pc, #72]	; 11818 <sprintf@plt+0xff4>
   117cc:	add	r6, pc, r6
   117d0:	add	r5, pc, r5
   117d4:	sub	r6, r6, r5
   117d8:	mov	r8, r1
   117dc:	mov	r9, r2
   117e0:	bl	10708 <open@plt-0x20>
   117e4:	asrs	r6, r6, #2
   117e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   117ec:	mov	r4, #0
   117f0:	add	r4, r4, #1
   117f4:	ldr	r3, [r5], #4
   117f8:	mov	r2, r9
   117fc:	mov	r1, r8
   11800:	mov	r0, r7
   11804:	blx	r3
   11808:	cmp	r6, r4
   1180c:	bne	117f0 <sprintf@plt+0xfcc>
   11810:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11814:	andeq	r0, r1, r0, lsr #14
   11818:	andeq	r0, r1, r8, lsl r7
   1181c:	bx	lr

Disassembly of section .fini:

00011820 <.fini>:
   11820:	push	{r3, lr}
   11824:	pop	{r3, pc}
