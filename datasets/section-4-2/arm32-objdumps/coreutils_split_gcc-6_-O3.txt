
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011118 <.init>:
   11118:	push	{r3, lr}
   1111c:	bl	133d8 <__assert_fail@plt+0x1ef8>
   11120:	pop	{r3, pc}

Disassembly of section .plt:

00011124 <fdopen@plt-0x14>:
   11124:	push	{lr}		; (str lr, [sp, #-4]!)
   11128:	ldr	lr, [pc, #4]	; 11134 <fdopen@plt-0x4>
   1112c:	add	lr, pc, lr
   11130:	ldr	pc, [lr, #8]!
   11134:	andeq	ip, r1, ip, asr #29

00011138 <fdopen@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #3788]!	; 0xecc

00011144 <calloc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3780]!	; 0xec4

00011150 <fputs_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3772]!	; 0xebc

0001115c <raise@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3764]!	; 0xeb4

00011168 <strcmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3756]!	; 0xeac

00011174 <strtol@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3748]!	; 0xea4

00011180 <read@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3740]!	; 0xe9c

0001118c <fflush@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3732]!	; 0xe94

00011198 <sigprocmask@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a4 <memmove@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3716]!	; 0xe84

000111b0 <free@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111bc <_exit@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3700]!	; 0xe74

000111c8 <memcpy@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d4 <__strtoull_internal@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3684]!	; 0xe64

000111e0 <mbsinit@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111ec <ftruncate64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3668]!	; 0xe54

000111f8 <fwrite_unlocked@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3660]!	; 0xe4c

00011204 <memcmp@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3652]!	; 0xe44

00011210 <fputc_unlocked@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3644]!	; 0xe3c

0001121c <dcgettext@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3636]!	; 0xe34

00011228 <dup2@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3628]!	; 0xe2c

00011234 <realloc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3620]!	; 0xe24

00011240 <textdomain@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3612]!	; 0xe1c

0001124c <rawmemchr@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3604]!	; 0xe14

00011258 <iswprint@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3596]!	; 0xe0c

00011264 <__fxstat64@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3588]!	; 0xe04

00011270 <sigaction@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3580]!	; 0xdfc

0001127c <fwrite@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3572]!	; 0xdf4

00011288 <lseek64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3564]!	; 0xdec

00011294 <waitpid@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3556]!	; 0xde4

000112a0 <__ctype_get_mb_cur_max@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ac <strcpy@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112b8 <__fpending@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112c4 <mbrtowc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3524]!	; 0xdc4

000112d0 <error@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112dc <open64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112e8 <getenv@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3500]!	; 0xdac

000112f4 <malloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3492]!	; 0xda4

00011300 <sigaddset@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3484]!	; 0xd9c

0001130c <__libc_start_main@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3476]!	; 0xd94

00011318 <__freading@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3468]!	; 0xd8c

00011324 <__gmon_start__@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3460]!	; 0xd84

00011330 <getopt_long@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3452]!	; 0xd7c

0001133c <__ctype_b_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3444]!	; 0xd74

00011348 <exit@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3436]!	; 0xd6c

00011354 <strlen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3428]!	; 0xd64

00011360 <__libc_current_sigrtmax@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3420]!	; 0xd5c

0001136c <strchr@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3412]!	; 0xd54

00011378 <setenv@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3404]!	; 0xd4c

00011384 <memrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3396]!	; 0xd44

00011390 <getpagesize@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3388]!	; 0xd3c

0001139c <__errno_location@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3380]!	; 0xd34

000113a8 <__sprintf_chk@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113b4 <__cxa_atexit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3364]!	; 0xd24

000113c0 <memset@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113cc <__printf_chk@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3348]!	; 0xd14

000113d8 <write@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113e4 <fileno@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3332]!	; 0xd04

000113f0 <__fprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113fc <memchr@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3316]!	; 0xcf4

00011408 <fclose@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3308]!	; 0xcec

00011414 <pipe@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3300]!	; 0xce4

00011420 <fseeko64@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #28, 20	; 0x1c000
   11428:	ldr	pc, [ip, #3292]!	; 0xcdc

0001142c <fcntl64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #28, 20	; 0x1c000
   11434:	ldr	pc, [ip, #3284]!	; 0xcd4

00011438 <setlocale@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #28, 20	; 0x1c000
   11440:	ldr	pc, [ip, #3276]!	; 0xccc

00011444 <sigemptyset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #28, 20	; 0x1c000
   1144c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011450 <fork@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #28, 20	; 0x1c000
   11458:	ldr	pc, [ip, #3260]!	; 0xcbc

0001145c <execl@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #28, 20	; 0x1c000
   11464:	ldr	pc, [ip, #3252]!	; 0xcb4

00011468 <strrchr@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #28, 20	; 0x1c000
   11470:	ldr	pc, [ip, #3244]!	; 0xcac

00011474 <nl_langinfo@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #28, 20	; 0x1c000
   1147c:	ldr	pc, [ip, #3236]!	; 0xca4

00011480 <clearerr_unlocked@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #28, 20	; 0x1c000
   11488:	ldr	pc, [ip, #3228]!	; 0xc9c

0001148c <bindtextdomain@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #28, 20	; 0x1c000
   11494:	ldr	pc, [ip, #3220]!	; 0xc94

00011498 <aligned_alloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #28, 20	; 0x1c000
   114a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000114a4 <__libc_current_sigrtmin@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #28, 20	; 0x1c000
   114ac:	ldr	pc, [ip, #3204]!	; 0xc84

000114b0 <strncmp@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #28, 20	; 0x1c000
   114b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000114bc <abort@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #28, 20	; 0x1c000
   114c4:	ldr	pc, [ip, #3188]!	; 0xc74

000114c8 <close@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #28, 20	; 0x1c000
   114d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114d4 <strspn@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #28, 20	; 0x1c000
   114dc:	ldr	pc, [ip, #3172]!	; 0xc64

000114e0 <__assert_fail@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #28, 20	; 0x1c000
   114e8:	ldr	pc, [ip, #3164]!	; 0xc5c

Disassembly of section .text:

000114f0 <.text>:
   114f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114f4:	sub	sp, sp, #260	; 0x104
   114f8:	mov	r5, r1
   114fc:	mov	r6, r0
   11500:	bl	11390 <getpagesize@plt>
   11504:	ldr	r7, [pc, #1740]	; 11bd8 <__assert_fail@plt+0x6f8>
   11508:	ldr	r4, [pc, #1740]	; 11bdc <__assert_fail@plt+0x6fc>
   1150c:	str	r0, [sp, #56]	; 0x38
   11510:	ldr	r0, [r5]
   11514:	bl	15408 <__assert_fail@plt+0x3f28>
   11518:	ldr	r1, [pc, #1888]	; 11c80 <__assert_fail@plt+0x7a0>
   1151c:	mov	r0, #6
   11520:	bl	11438 <setlocale@plt>
   11524:	ldr	r1, [pc, #1716]	; 11be0 <__assert_fail@plt+0x700>
   11528:	ldr	r0, [pc, #1716]	; 11be4 <__assert_fail@plt+0x704>
   1152c:	bl	1148c <bindtextdomain@plt>
   11530:	ldr	r0, [pc, #1708]	; 11be4 <__assert_fail@plt+0x704>
   11534:	bl	11240 <textdomain@plt>
   11538:	ldr	r0, [pc, #1704]	; 11be8 <__assert_fail@plt+0x708>
   1153c:	bl	1c404 <__assert_fail@plt+0xaf24>
   11540:	mov	r0, #0
   11544:	mov	r8, r0
   11548:	mov	r1, #0
   1154c:	ldr	r0, [pc, #1868]	; 11ca0 <__assert_fail@plt+0x7c0>
   11550:	mov	r9, r1
   11554:	ldr	r2, [pc, #1804]	; 11c68 <__assert_fail@plt+0x788>
   11558:	ldr	r3, [pc, #1676]	; 11bec <__assert_fail@plt+0x70c>
   1155c:	strd	r8, [sp, #32]
   11560:	str	r2, [r0, #300]	; 0x12c
   11564:	mov	r2, r8
   11568:	ldr	r8, [pc, #1664]	; 11bf0 <__assert_fail@plt+0x710>
   1156c:	str	r3, [r0, #12]
   11570:	mov	r3, r9
   11574:	mov	r1, #0
   11578:	str	r1, [sp, #48]	; 0x30
   1157c:	strd	r2, [sp, #40]	; 0x28
   11580:	str	r1, [sp, #60]	; 0x3c
   11584:	str	r1, [sp, #24]
   11588:	mov	sl, #0
   1158c:	str	sl, [sp]
   11590:	mov	r3, r8
   11594:	ldr	r2, [pc, #1624]	; 11bf4 <__assert_fail@plt+0x714>
   11598:	mov	r1, r5
   1159c:	mov	r0, r6
   115a0:	ldr	r9, [r7]
   115a4:	bl	11330 <getopt_long@plt>
   115a8:	cmp	r9, sl
   115ac:	moveq	r9, #1
   115b0:	cmn	r0, #1
   115b4:	mov	fp, r0
   115b8:	beq	11804 <__assert_fail@plt+0x324>
   115bc:	cmp	r0, #101	; 0x65
   115c0:	beq	11aec <__assert_fail@plt+0x60c>
   115c4:	ble	11600 <__assert_fail@plt+0x120>
   115c8:	cmp	r0, #120	; 0x78
   115cc:	beq	11bc4 <__assert_fail@plt+0x6e4>
   115d0:	bgt	1167c <__assert_fail@plt+0x19c>
   115d4:	cmp	r0, #110	; 0x6e
   115d8:	beq	119c4 <__assert_fail@plt+0x4e4>
   115dc:	ble	11860 <__assert_fail@plt+0x380>
   115e0:	cmp	r0, #116	; 0x74
   115e4:	beq	117b4 <__assert_fail@plt+0x2d4>
   115e8:	cmp	r0, #117	; 0x75
   115ec:	bne	11840 <__assert_fail@plt+0x360>
   115f0:	ldr	r2, [pc, #1704]	; 11ca0 <__assert_fail@plt+0x7c0>
   115f4:	mov	r3, #1
   115f8:	strb	r3, [r2, #304]	; 0x130
   115fc:	b	11588 <__assert_fail@plt+0xa8>
   11600:	cmp	r0, #57	; 0x39
   11604:	ble	116c4 <__assert_fail@plt+0x1e4>
   11608:	cmp	r0, #97	; 0x61
   1160c:	beq	11978 <__assert_fail@plt+0x498>
   11610:	ble	1171c <__assert_fail@plt+0x23c>
   11614:	cmp	r0, #98	; 0x62
   11618:	bne	11b30 <__assert_fail@plt+0x650>
   1161c:	ldr	r3, [sp, #24]
   11620:	cmp	r3, #0
   11624:	bne	12734 <__assert_fail@plt+0x1254>
   11628:	ldr	sl, [sp, #24]
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #1472]	; 11bf8 <__assert_fail@plt+0x718>
   11634:	mov	r0, sl
   11638:	ldr	r9, [r4]
   1163c:	bl	1121c <dcgettext@plt>
   11640:	ldr	r3, [pc, #1460]	; 11bfc <__assert_fail@plt+0x71c>
   11644:	str	sl, [sp, #16]
   11648:	mvn	fp, #-2147483648	; 0x80000000
   1164c:	mvn	sl, #0
   11650:	str	r3, [sp, #8]
   11654:	mov	r2, #1
   11658:	mov	r3, #0
   1165c:	mov	r1, #1
   11660:	strd	sl, [sp]
   11664:	str	r0, [sp, #12]
   11668:	mov	r0, r9
   1166c:	str	r1, [sp, #24]
   11670:	bl	1a9e0 <__assert_fail@plt+0x9500>
   11674:	strd	r0, [sp, #32]
   11678:	b	11588 <__assert_fail@plt+0xa8>
   1167c:	ldr	r3, [pc, #1404]	; 11c00 <__assert_fail@plt+0x720>
   11680:	cmp	r0, r3
   11684:	beq	118b0 <__assert_fail@plt+0x3d0>
   11688:	ble	11848 <__assert_fail@plt+0x368>
   1168c:	ldr	r3, [pc, #1392]	; 11c04 <__assert_fail@plt+0x724>
   11690:	cmp	r0, r3
   11694:	beq	1176c <__assert_fail@plt+0x28c>
   11698:	add	r3, r3, #1
   1169c:	cmp	r0, r3
   116a0:	bne	11840 <__assert_fail@plt+0x360>
   116a4:	ldr	r9, [r4]
   116a8:	mov	r0, r9
   116ac:	bl	14eec <__assert_fail@plt+0x3a0c>
   116b0:	cmp	r9, r0
   116b4:	bne	128d4 <__assert_fail@plt+0x13f4>
   116b8:	ldr	r3, [pc, #1504]	; 11ca0 <__assert_fail@plt+0x7c0>
   116bc:	str	r9, [r3, #20]
   116c0:	b	11588 <__assert_fail@plt+0xa8>
   116c4:	cmp	r0, #48	; 0x30
   116c8:	bge	118c0 <__assert_fail@plt+0x3e0>
   116cc:	cmn	r0, #3
   116d0:	beq	116e4 <__assert_fail@plt+0x204>
   116d4:	cmn	r0, #2
   116d8:	bne	11840 <__assert_fail@plt+0x360>
   116dc:	mov	r0, sl
   116e0:	bl	14b6c <__assert_fail@plt+0x368c>
   116e4:	ldr	r3, [pc, #1308]	; 11c08 <__assert_fail@plt+0x728>
   116e8:	ldr	r0, [pc, #1308]	; 11c0c <__assert_fail@plt+0x72c>
   116ec:	ldr	r1, [pc, #1308]	; 11c10 <__assert_fail@plt+0x730>
   116f0:	ldr	r2, [pc, #1308]	; 11c14 <__assert_fail@plt+0x734>
   116f4:	str	sl, [sp, #8]
   116f8:	ldr	r0, [r0]
   116fc:	ldr	r3, [r3]
   11700:	str	r1, [sp, #4]
   11704:	str	r2, [sp]
   11708:	ldr	r1, [pc, #1288]	; 11c18 <__assert_fail@plt+0x738>
   1170c:	ldr	r2, [pc, #1288]	; 11c1c <__assert_fail@plt+0x73c>
   11710:	bl	1a020 <__assert_fail@plt+0x8b40>
   11714:	mov	r0, sl
   11718:	bl	11348 <exit@plt>
   1171c:	cmp	r0, #67	; 0x43
   11720:	bne	11840 <__assert_fail@plt+0x360>
   11724:	ldr	sl, [sp, #24]
   11728:	cmp	sl, #0
   1172c:	bne	12734 <__assert_fail@plt+0x1254>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #1212]	; 11bf8 <__assert_fail@plt+0x718>
   11738:	mov	r0, sl
   1173c:	ldr	r9, [r4]
   11740:	bl	1121c <dcgettext@plt>
   11744:	ldr	r1, [pc, #1200]	; 11bfc <__assert_fail@plt+0x71c>
   11748:	mvn	r2, #0
   1174c:	mov	r3, #0
   11750:	str	r1, [sp, #8]
   11754:	strd	r2, [sp]
   11758:	str	sl, [sp, #16]
   1175c:	mov	r2, #1
   11760:	mov	r3, #0
   11764:	mov	r1, #2
   11768:	b	11664 <__assert_fail@plt+0x184>
   1176c:	mov	r2, #5
   11770:	ldr	r1, [pc, #1192]	; 11c20 <__assert_fail@plt+0x740>
   11774:	mov	r0, sl
   11778:	ldr	r9, [r4]
   1177c:	bl	1121c <dcgettext@plt>
   11780:	ldr	r1, [pc, #1140]	; 11bfc <__assert_fail@plt+0x71c>
   11784:	mvn	r2, #-2147483647	; 0x80000001
   11788:	mov	r3, #0
   1178c:	str	sl, [sp, #16]
   11790:	strd	r2, [sp]
   11794:	str	r1, [sp, #8]
   11798:	mov	r2, #1
   1179c:	mov	r3, #0
   117a0:	str	r0, [sp, #12]
   117a4:	mov	r0, r9
   117a8:	bl	1a9e0 <__assert_fail@plt+0x9500>
   117ac:	str	r0, [sp, #60]	; 0x3c
   117b0:	b	11588 <__assert_fail@plt+0xa8>
   117b4:	ldr	r0, [r4]
   117b8:	ldrb	r9, [r0]
   117bc:	cmp	r9, #0
   117c0:	beq	128c8 <__assert_fail@plt+0x13e8>
   117c4:	ldrb	r3, [r0, #1]
   117c8:	cmp	r3, #0
   117cc:	beq	117e0 <__assert_fail@plt+0x300>
   117d0:	ldr	r1, [pc, #1100]	; 11c24 <__assert_fail@plt+0x744>
   117d4:	bl	11168 <strcmp@plt>
   117d8:	subs	r9, r0, #0
   117dc:	bne	11e48 <__assert_fail@plt+0x968>
   117e0:	ldr	r3, [pc, #1204]	; 11c9c <__assert_fail@plt+0x7bc>
   117e4:	ldr	r3, [r3, #12]
   117e8:	cmp	r3, #0
   117ec:	blt	117f8 <__assert_fail@plt+0x318>
   117f0:	cmp	r3, r9
   117f4:	bne	11e28 <__assert_fail@plt+0x948>
   117f8:	ldr	r3, [pc, #1180]	; 11c9c <__assert_fail@plt+0x7bc>
   117fc:	str	r9, [r3, #12]
   11800:	b	11588 <__assert_fail@plt+0xa8>
   11804:	ldrd	r2, [sp, #40]	; 0x28
   11808:	orrs	r3, r2, r3
   1180c:	beq	11ca4 <__assert_fail@plt+0x7c4>
   11810:	ldr	r3, [pc, #1160]	; 11ca0 <__assert_fail@plt+0x7c0>
   11814:	ldr	r3, [r3, #40]	; 0x28
   11818:	cmp	r3, #0
   1181c:	beq	11ca4 <__assert_fail@plt+0x7c4>
   11820:	ldr	r1, [pc, #1024]	; 11c28 <__assert_fail@plt+0x748>
   11824:	mov	r2, #5
   11828:	mov	r0, #0
   1182c:	bl	1121c <dcgettext@plt>
   11830:	mov	r1, #0
   11834:	mov	r2, r0
   11838:	mov	r0, r1
   1183c:	bl	112d0 <error@plt>
   11840:	mov	r0, #1
   11844:	bl	14b6c <__assert_fail@plt+0x368c>
   11848:	cmp	r0, #256	; 0x100
   1184c:	bne	11840 <__assert_fail@plt+0x360>
   11850:	ldr	r2, [pc, #1096]	; 11ca0 <__assert_fail@plt+0x7c0>
   11854:	mov	r3, #1
   11858:	strb	r3, [r2, #44]	; 0x2c
   1185c:	b	11588 <__assert_fail@plt+0xa8>
   11860:	cmp	r0, #108	; 0x6c
   11864:	bne	11840 <__assert_fail@plt+0x360>
   11868:	ldr	sl, [sp, #24]
   1186c:	cmp	sl, #0
   11870:	bne	12734 <__assert_fail@plt+0x1254>
   11874:	mov	r2, #5
   11878:	ldr	r1, [pc, #976]	; 11c50 <__assert_fail@plt+0x770>
   1187c:	mov	r0, sl
   11880:	ldr	r9, [r4]
   11884:	bl	1121c <dcgettext@plt>
   11888:	ldr	r1, [pc, #1008]	; 11c80 <__assert_fail@plt+0x7a0>
   1188c:	mvn	r2, #0
   11890:	mvn	r3, #0
   11894:	str	r1, [sp, #8]
   11898:	strd	r2, [sp]
   1189c:	str	sl, [sp, #16]
   118a0:	mov	r2, #1
   118a4:	mov	r3, #0
   118a8:	mov	r1, #3
   118ac:	b	11664 <__assert_fail@plt+0x184>
   118b0:	ldr	r2, [pc, #1000]	; 11ca0 <__assert_fail@plt+0x7c0>
   118b4:	ldr	r3, [r4]
   118b8:	str	r3, [r2, #40]	; 0x28
   118bc:	b	11588 <__assert_fail@plt+0xa8>
   118c0:	ldr	r3, [sp, #24]
   118c4:	cmp	r3, #0
   118c8:	beq	11afc <__assert_fail@plt+0x61c>
   118cc:	cmp	r3, #4
   118d0:	bne	12734 <__assert_fail@plt+0x1254>
   118d4:	ldr	r3, [sp, #48]	; 0x30
   118d8:	cmp	r3, #0
   118dc:	cmpne	r3, r9
   118e0:	bne	11dbc <__assert_fail@plt+0x8dc>
   118e4:	ldrd	r2, [sp, #32]
   118e8:	add	r1, pc, #736	; 0x2e0
   118ec:	ldrd	r0, [r1]
   118f0:	cmp	r3, r1
   118f4:	cmpeq	r2, r0
   118f8:	bhi	11940 <__assert_fail@plt+0x460>
   118fc:	strd	r2, [sp, #64]	; 0x40
   11900:	ldr	ip, [sp, #64]	; 0x40
   11904:	mov	r0, #10
   11908:	sub	r1, fp, #48	; 0x30
   1190c:	umull	r2, r3, ip, r0
   11910:	strd	r2, [sp, #48]	; 0x30
   11914:	ldr	r3, [sp, #68]	; 0x44
   11918:	ldr	r2, [sp, #52]	; 0x34
   1191c:	mla	r3, r0, r3, r2
   11920:	str	r3, [sp, #52]	; 0x34
   11924:	ldrd	r2, [sp, #48]	; 0x30
   11928:	adds	r2, r2, r1
   1192c:	adc	r3, r3, r1, asr #31
   11930:	ldrd	r0, [sp, #32]
   11934:	cmp	r3, r1
   11938:	cmpeq	r2, r0
   1193c:	bcs	11e1c <__assert_fail@plt+0x93c>
   11940:	mov	r2, #5
   11944:	ldr	r1, [pc, #736]	; 11c2c <__assert_fail@plt+0x74c>
   11948:	mov	r0, #0
   1194c:	bl	1121c <dcgettext@plt>
   11950:	add	r2, sp, #112	; 0x70
   11954:	mov	r4, r0
   11958:	ldrd	r0, [sp, #32]
   1195c:	bl	153a0 <__assert_fail@plt+0x3ec0>
   11960:	mov	r2, r4
   11964:	str	fp, [sp]
   11968:	mov	r1, #0
   1196c:	mov	r3, r0
   11970:	mov	r0, #1
   11974:	bl	112d0 <error@plt>
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #684]	; 11c30 <__assert_fail@plt+0x750>
   11980:	mov	r0, sl
   11984:	ldr	r9, [r4]
   11988:	bl	1121c <dcgettext@plt>
   1198c:	ldr	r1, [pc, #748]	; 11c80 <__assert_fail@plt+0x7a0>
   11990:	mvn	r2, #-1073741824	; 0xc0000000
   11994:	mov	r3, #0
   11998:	str	sl, [sp, #16]
   1199c:	strd	r2, [sp]
   119a0:	str	r1, [sp, #8]
   119a4:	mov	r3, #0
   119a8:	mov	r2, #0
   119ac:	str	r0, [sp, #12]
   119b0:	mov	r0, r9
   119b4:	bl	1a9e0 <__assert_fail@plt+0x9500>
   119b8:	ldr	r3, [pc, #736]	; 11ca0 <__assert_fail@plt+0x7c0>
   119bc:	str	r0, [r3, #4]
   119c0:	b	11588 <__assert_fail@plt+0xa8>
   119c4:	ldr	r3, [sp, #24]
   119c8:	cmp	r3, #0
   119cc:	bne	12734 <__assert_fail@plt+0x1254>
   119d0:	bl	1133c <__ctype_b_loc@plt>
   119d4:	ldr	r3, [r4]
   119d8:	ldr	r1, [r0]
   119dc:	b	119e4 <__assert_fail@plt+0x504>
   119e0:	str	r3, [r4]
   119e4:	mov	r9, r3
   119e8:	add	r3, r3, #1
   119ec:	ldrb	r2, [r9]
   119f0:	lsl	r2, r2, #1
   119f4:	ldrh	r2, [r1, r2]
   119f8:	tst	r2, #8192	; 0x2000
   119fc:	bne	119e0 <__assert_fail@plt+0x500>
   11a00:	mov	r2, #2
   11a04:	ldr	r1, [pc, #552]	; 11c34 <__assert_fail@plt+0x754>
   11a08:	mov	r0, r9
   11a0c:	bl	114b0 <strncmp@plt>
   11a10:	cmp	r0, #0
   11a14:	beq	11b1c <__assert_fail@plt+0x63c>
   11a18:	mov	r0, r9
   11a1c:	mov	r2, #2
   11a20:	ldr	r1, [pc, #528]	; 11c38 <__assert_fail@plt+0x758>
   11a24:	bl	114b0 <strncmp@plt>
   11a28:	cmp	r0, #0
   11a2c:	addeq	r9, r9, #2
   11a30:	moveq	r3, #6
   11a34:	movne	r3, #5
   11a38:	streq	r9, [r4]
   11a3c:	str	r3, [sp, #24]
   11a40:	ldr	r9, [r4]
   11a44:	mov	r1, #47	; 0x2f
   11a48:	mov	r0, r9
   11a4c:	bl	1136c <strchr@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #480]	; 11c3c <__assert_fail@plt+0x75c>
   11a58:	subs	sl, r0, #0
   11a5c:	beq	11e78 <__assert_fail@plt+0x998>
   11a60:	mov	r0, #0
   11a64:	bl	1121c <dcgettext@plt>
   11a68:	ldr	fp, [pc, #528]	; 11c80 <__assert_fail@plt+0x7a0>
   11a6c:	mvn	r2, #0
   11a70:	mvn	r3, #0
   11a74:	mov	r9, #0
   11a78:	strd	r2, [sp]
   11a7c:	str	fp, [sp, #8]
   11a80:	mov	r3, #0
   11a84:	str	r9, [sp, #16]
   11a88:	mov	r2, #1
   11a8c:	str	r0, [sp, #12]
   11a90:	add	r0, sl, #1
   11a94:	bl	1a9e0 <__assert_fail@plt+0x9500>
   11a98:	ldr	r3, [r4]
   11a9c:	cmp	sl, r3
   11aa0:	strd	r0, [sp, #32]
   11aa4:	beq	11588 <__assert_fail@plt+0xa8>
   11aa8:	strb	r9, [sl]
   11aac:	mov	r2, #5
   11ab0:	ldr	r1, [pc, #392]	; 11c40 <__assert_fail@plt+0x760>
   11ab4:	mov	r0, r9
   11ab8:	ldr	sl, [r4]
   11abc:	bl	1121c <dcgettext@plt>
   11ac0:	ldrd	r2, [sp, #32]
   11ac4:	str	r9, [sp, #16]
   11ac8:	str	fp, [sp, #8]
   11acc:	strd	r2, [sp]
   11ad0:	mov	r2, #1
   11ad4:	mov	r3, #0
   11ad8:	str	r0, [sp, #12]
   11adc:	mov	r0, sl
   11ae0:	bl	1a9e0 <__assert_fail@plt+0x9500>
   11ae4:	strd	r0, [sp, #40]	; 0x28
   11ae8:	b	11588 <__assert_fail@plt+0xa8>
   11aec:	ldr	r2, [pc, #428]	; 11ca0 <__assert_fail@plt+0x7c0>
   11af0:	mov	r3, #1
   11af4:	strb	r3, [r2, #296]	; 0x128
   11af8:	b	11588 <__assert_fail@plt+0xa8>
   11afc:	sub	fp, r0, #48	; 0x30
   11b00:	mov	r2, fp
   11b04:	asr	r3, fp, #31
   11b08:	str	r9, [sp, #48]	; 0x30
   11b0c:	strd	r2, [sp, #32]
   11b10:	mov	r3, #4
   11b14:	str	r3, [sp, #24]
   11b18:	b	11588 <__assert_fail@plt+0xa8>
   11b1c:	add	r9, r9, #2
   11b20:	mov	r3, #7
   11b24:	str	r9, [r4]
   11b28:	str	r3, [sp, #24]
   11b2c:	b	11a40 <__assert_fail@plt+0x560>
   11b30:	cmp	r0, #100	; 0x64
   11b34:	bne	11840 <__assert_fail@plt+0x360>
   11b38:	ldr	sl, [pc, #260]	; 11c44 <__assert_fail@plt+0x764>
   11b3c:	ldr	r9, [r4]
   11b40:	ldr	r3, [pc, #340]	; 11c9c <__assert_fail@plt+0x7bc>
   11b44:	cmp	r9, #0
   11b48:	str	sl, [r3, #4]
   11b4c:	beq	11588 <__assert_fail@plt+0xa8>
   11b50:	mov	r0, r9
   11b54:	bl	11354 <strlen@plt>
   11b58:	mov	r1, sl
   11b5c:	str	r0, [sp, #64]	; 0x40
   11b60:	mov	r0, r9
   11b64:	bl	114d4 <strspn@plt>
   11b68:	ldr	r3, [sp, #64]	; 0x40
   11b6c:	cmp	r3, r0
   11b70:	bne	128fc <__assert_fail@plt+0x141c>
   11b74:	ldrb	r3, [r9]
   11b78:	cmp	r3, #48	; 0x30
   11b7c:	bne	11bb8 <__assert_fail@plt+0x6d8>
   11b80:	ldrb	r3, [r9, #1]
   11b84:	cmp	r3, #0
   11b88:	addne	r3, r9, #1
   11b8c:	bne	11ba0 <__assert_fail@plt+0x6c0>
   11b90:	b	11bb8 <__assert_fail@plt+0x6d8>
   11b94:	ldrb	r2, [r3]
   11b98:	cmp	r2, #0
   11b9c:	beq	11bb8 <__assert_fail@plt+0x6d8>
   11ba0:	str	r3, [r4]
   11ba4:	ldrb	r2, [r3]
   11ba8:	mov	r9, r3
   11bac:	add	r3, r3, #1
   11bb0:	cmp	r2, #48	; 0x30
   11bb4:	beq	11b94 <__assert_fail@plt+0x6b4>
   11bb8:	ldr	r3, [pc, #224]	; 11ca0 <__assert_fail@plt+0x7c0>
   11bbc:	str	r9, [r3, #36]	; 0x24
   11bc0:	b	11588 <__assert_fail@plt+0xa8>
   11bc4:	ldr	sl, [pc, #124]	; 11c48 <__assert_fail@plt+0x768>
   11bc8:	b	11b3c <__assert_fail@plt+0x65c>
   11bcc:	nop			; (mov r0, r0)
   11bd0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11bd4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11bd8:	andeq	lr, r2, r8, asr r3
   11bdc:	andeq	lr, r2, r8, ror #6
   11be0:	andeq	sp, r1, r4, lsr #3
   11be4:	ldrdeq	sp, [r1], -ip
   11be8:			; <UNDEFINED> instruction: 0x00014fb8
   11bec:	andeq	sp, r1, r0, lsl #12
   11bf0:	andeq	ip, r1, r0, ror r4
   11bf4:	andeq	sp, r1, r0, asr #3
   11bf8:	andeq	sp, r1, r8, asr #4
   11bfc:	andeq	ip, r1, r0, lsl #11
   11c00:	andeq	r0, r0, r1, lsl #2
   11c04:	andeq	r0, r0, r2, lsl #2
   11c08:	andeq	lr, r2, r4, ror #2
   11c0c:	andeq	lr, r2, r4, ror #6
   11c10:	muleq	r1, r0, r3
   11c14:	andeq	sp, r1, r4, lsr #7
   11c18:	andeq	ip, r1, r8, lsl #16
   11c1c:	ldrdeq	sp, [r1], -r8
   11c20:	andeq	sp, r1, r8, ror r3
   11c24:	andeq	sp, r1, ip, asr #5
   11c28:			; <UNDEFINED> instruction: 0x0001d3b8
   11c2c:	andeq	sp, r1, r8, lsl #10
   11c30:	ldrdeq	sp, [r1], -ip
   11c34:	andeq	sp, r1, r8, ror r2
   11c38:	andeq	sp, r1, ip, ror r2
   11c3c:	andeq	sp, r1, r0, lsl #5
   11c40:	muleq	r1, ip, r2
   11c44:	andeq	sp, r1, r4, lsl #3
   11c48:	muleq	r1, r0, r1
   11c4c:	andeq	sp, r1, r8, lsr #8
   11c50:	andeq	sp, r1, r0, ror #4
   11c54:	strdeq	sp, [r1], -r0
   11c58:	strdeq	sp, [r1], -r4
   11c5c:	strdeq	sp, [r1], -r0
   11c60:	ldrdeq	sp, [r1], -r0
   11c64:	andeq	sp, r1, ip, lsr r4
   11c68:			; <UNDEFINED> instruction: 0x0001d1bc
   11c6c:	andeq	lr, r2, r0, lsr #7
   11c70:	svcne	0x00fe0000
   11c74:	andeq	lr, r2, r4, lsr #9
   11c78:	andeq	lr, r2, r0, lsl r4
   11c7c:	andeq	sp, r1, r4, lsr #4
   11c80:	andeq	ip, r1, r4, lsl #28
   11c84:	strdeq	sp, [r1], -ip
   11c88:	andeq	ip, r1, r0, ror #15
   11c8c:			; <UNDEFINED> instruction: 0x0001d2b4
   11c90:	strdeq	sp, [r1], -r4
   11c94:	andeq	sp, r1, r8, asr #6
   11c98:	andeq	sp, r1, r8, lsl r3
   11c9c:	andeq	lr, r2, r4, asr r1
   11ca0:	andeq	lr, r2, r0, ror r3
   11ca4:	ldr	r3, [sp, #24]
   11ca8:	cmp	r3, #0
   11cac:	bne	11dd4 <__assert_fail@plt+0x8f4>
   11cb0:	mov	r3, #0
   11cb4:	mov	r2, #1000	; 0x3e8
   11cb8:	strd	r2, [sp, #32]
   11cbc:	mov	r3, #3
   11cc0:	str	r3, [sp, #24]
   11cc4:	ldr	r3, [pc, #-48]	; 11c9c <__assert_fail@plt+0x7bc>
   11cc8:	ldr	r3, [r3, #12]
   11ccc:	cmp	r3, #0
   11cd0:	movlt	r3, #10
   11cd4:	ldrlt	r2, [pc, #-64]	; 11c9c <__assert_fail@plt+0x7bc>
   11cd8:	strlt	r3, [r2, #12]
   11cdc:	ldr	r3, [pc, #-68]	; 11ca0 <__assert_fail@plt+0x7c0>
   11ce0:	ldr	r0, [r3, #36]	; 0x24
   11ce4:	ldr	r3, [sp, #24]
   11ce8:	cmp	r0, #0
   11cec:	sub	sl, r3, #5
   11cf0:	beq	128b0 <__assert_fail@plt+0x13d0>
   11cf4:	ldr	r3, [pc, #-96]	; 11c9c <__assert_fail@plt+0x7bc>
   11cf8:	mov	r1, #0
   11cfc:	cmp	sl, #2
   11d00:	strb	r1, [r3]
   11d04:	bls	12760 <__assert_fail@plt+0x1280>
   11d08:	ldr	r3, [pc, #-112]	; 11ca0 <__assert_fail@plt+0x7c0>
   11d0c:	ldr	r3, [r3, #4]
   11d10:	cmp	r3, #0
   11d14:	moveq	r8, #0
   11d18:	moveq	r9, #0
   11d1c:	bne	12740 <__assert_fail@plt+0x1260>
   11d20:	cmp	r9, #0
   11d24:	ldr	r3, [pc, #-140]	; 11ca0 <__assert_fail@plt+0x7c0>
   11d28:	cmpeq	r8, #2
   11d2c:	movcc	r8, #2
   11d30:	str	r8, [r3, #4]
   11d34:	ldr	r3, [r7]
   11d38:	cmp	r6, r3
   11d3c:	ble	11eb0 <__assert_fail@plt+0x9d0>
   11d40:	add	r2, r3, #1
   11d44:	ldr	r1, [r5, r3, lsl #2]
   11d48:	cmp	r6, r2
   11d4c:	str	r2, [r7]
   11d50:	ldr	r2, [pc, #-184]	; 11ca0 <__assert_fail@plt+0x7c0>
   11d54:	str	r1, [r2, #300]	; 0x12c
   11d58:	lsl	r2, r3, #2
   11d5c:	ble	11eb0 <__assert_fail@plt+0x9d0>
   11d60:	add	r2, r5, r2
   11d64:	ldr	r1, [pc, #-204]	; 11ca0 <__assert_fail@plt+0x7c0>
   11d68:	add	r3, r3, #2
   11d6c:	ldr	r2, [r2, #4]
   11d70:	cmp	r6, r3
   11d74:	str	r2, [r1, #12]
   11d78:	str	r3, [r7]
   11d7c:	ble	11eb0 <__assert_fail@plt+0x9d0>
   11d80:	mov	r2, #5
   11d84:	ldr	r1, [pc, #-320]	; 11c4c <__assert_fail@plt+0x76c>
   11d88:	mov	r0, #0
   11d8c:	bl	1121c <dcgettext@plt>
   11d90:	ldr	r3, [r7]
   11d94:	mov	r4, r0
   11d98:	ldr	r0, [r5, r3, lsl #2]
   11d9c:	bl	192d4 <__assert_fail@plt+0x7df4>
   11da0:	mov	r2, r4
   11da4:	mov	r3, r0
   11da8:	mov	r1, #0
   11dac:	mov	r0, r1
   11db0:	bl	112d0 <error@plt>
   11db4:	mov	r0, #1
   11db8:	bl	14b6c <__assert_fail@plt+0x368c>
   11dbc:	sub	fp, r0, #48	; 0x30
   11dc0:	mov	r2, fp
   11dc4:	asr	r3, fp, #31
   11dc8:	str	r9, [sp, #48]	; 0x30
   11dcc:	strd	r2, [sp, #32]
   11dd0:	b	11588 <__assert_fail@plt+0xa8>
   11dd4:	ldrd	r2, [sp, #32]
   11dd8:	orrs	r3, r2, r3
   11ddc:	bne	11cc4 <__assert_fail@plt+0x7e4>
   11de0:	mov	r2, #5
   11de4:	ldr	r1, [pc, #-412]	; 11c50 <__assert_fail@plt+0x770>
   11de8:	mov	r0, #0
   11dec:	bl	1121c <dcgettext@plt>
   11df0:	mov	r4, r0
   11df4:	ldr	r0, [pc, #-424]	; 11c54 <__assert_fail@plt+0x774>
   11df8:	bl	192d4 <__assert_fail@plt+0x7df4>
   11dfc:	mov	r1, #0
   11e00:	mov	r3, r4
   11e04:	ldr	r2, [pc, #-436]	; 11c58 <__assert_fail@plt+0x778>
   11e08:	str	r0, [sp]
   11e0c:	mov	r0, r1
   11e10:	bl	112d0 <error@plt>
   11e14:	mov	r0, #1
   11e18:	bl	14b6c <__assert_fail@plt+0x368c>
   11e1c:	strd	r2, [sp, #32]
   11e20:	str	r9, [sp, #48]	; 0x30
   11e24:	b	11588 <__assert_fail@plt+0xa8>
   11e28:	ldr	r1, [pc, #-468]	; 11c5c <__assert_fail@plt+0x77c>
   11e2c:	mov	r2, #5
   11e30:	mov	r0, #0
   11e34:	bl	1121c <dcgettext@plt>
   11e38:	mov	r1, #0
   11e3c:	mov	r2, r0
   11e40:	mov	r0, #1
   11e44:	bl	112d0 <error@plt>
   11e48:	mov	r2, #5
   11e4c:	ldr	r1, [pc, #-500]	; 11c60 <__assert_fail@plt+0x780>
   11e50:	mov	r0, #0
   11e54:	bl	1121c <dcgettext@plt>
   11e58:	mov	r5, r0
   11e5c:	ldr	r0, [r4]
   11e60:	bl	192d4 <__assert_fail@plt+0x7df4>
   11e64:	mov	r2, r5
   11e68:	mov	r1, #0
   11e6c:	mov	r3, r0
   11e70:	mov	r0, #1
   11e74:	bl	112d0 <error@plt>
   11e78:	bl	1121c <dcgettext@plt>
   11e7c:	ldr	r1, [pc, #-516]	; 11c80 <__assert_fail@plt+0x7a0>
   11e80:	mvn	r2, #0
   11e84:	mvn	r3, #0
   11e88:	str	sl, [sp, #16]
   11e8c:	strd	r2, [sp]
   11e90:	str	r1, [sp, #8]
   11e94:	mov	r2, #1
   11e98:	mov	r3, #0
   11e9c:	str	r0, [sp, #12]
   11ea0:	mov	r0, r9
   11ea4:	bl	1a9e0 <__assert_fail@plt+0x9500>
   11ea8:	strd	r0, [sp, #32]
   11eac:	b	11588 <__assert_fail@plt+0xa8>
   11eb0:	ldr	r3, [pc, #-536]	; 11ca0 <__assert_fail@plt+0x7c0>
   11eb4:	ldr	r0, [r3, #36]	; 0x24
   11eb8:	cmp	r0, #0
   11ebc:	beq	11edc <__assert_fail@plt+0x9fc>
   11ec0:	bl	11354 <strlen@plt>
   11ec4:	ldr	r3, [pc, #-556]	; 11ca0 <__assert_fail@plt+0x7c0>
   11ec8:	ldr	r3, [r3, #4]
   11ecc:	cmp	r0, r3
   11ed0:	movhi	r2, #5
   11ed4:	ldrhi	r1, [pc, #-632]	; 11c64 <__assert_fail@plt+0x784>
   11ed8:	bhi	11828 <__assert_fail@plt+0x348>
   11edc:	ldr	r3, [pc, #-580]	; 11ca0 <__assert_fail@plt+0x7c0>
   11ee0:	ldr	r1, [pc, #-640]	; 11c68 <__assert_fail@plt+0x788>
   11ee4:	ldr	r4, [r3, #300]	; 0x12c
   11ee8:	mov	r0, r4
   11eec:	bl	11168 <strcmp@plt>
   11ef0:	cmp	r0, #0
   11ef4:	beq	11f14 <__assert_fail@plt+0xa34>
   11ef8:	mov	r3, #0
   11efc:	mov	r1, r4
   11f00:	mov	r2, r3
   11f04:	mov	r0, r3
   11f08:	bl	15174 <__assert_fail@plt+0x3c94>
   11f0c:	cmp	r0, #0
   11f10:	blt	12d80 <__assert_fail@plt+0x18a0>
   11f14:	ldr	r2, [pc, #-688]	; 11c6c <__assert_fail@plt+0x78c>
   11f18:	mov	r1, #0
   11f1c:	mov	r0, #3
   11f20:	bl	11264 <__fxstat64@plt>
   11f24:	cmp	r0, #0
   11f28:	bne	12880 <__assert_fail@plt+0x13a0>
   11f2c:	ldr	r3, [sp, #60]	; 0x3c
   11f30:	cmp	r3, #0
   11f34:	bne	11f54 <__assert_fail@plt+0xa74>
   11f38:	ldr	r3, [pc, #-672]	; 11ca0 <__assert_fail@plt+0x7c0>
   11f3c:	ldr	r2, [pc, #-724]	; 11c70 <__assert_fail@plt+0x790>
   11f40:	ldr	r3, [r3, #104]	; 0x68
   11f44:	sub	r1, r3, #131072	; 0x20000
   11f48:	cmp	r1, r2
   11f4c:	movhi	r3, #131072	; 0x20000
   11f50:	str	r3, [sp, #60]	; 0x3c
   11f54:	ldr	r3, [sp, #60]	; 0x3c
   11f58:	ldr	r0, [sp, #56]	; 0x38
   11f5c:	add	r1, r3, #1
   11f60:	bl	1a1d4 <__assert_fail@plt+0x8cf4>
   11f64:	cmp	sl, #1
   11f68:	str	r0, [sp, #96]	; 0x60
   11f6c:	bls	12cb4 <__assert_fail@plt+0x17d4>
   11f70:	mvn	r3, #0
   11f74:	str	r3, [sp, #56]	; 0x38
   11f78:	mvn	r2, #0
   11f7c:	mvn	r3, #-2147483648	; 0x80000000
   11f80:	strd	r2, [sp, #48]	; 0x30
   11f84:	ldr	r3, [pc, #-748]	; 11ca0 <__assert_fail@plt+0x7c0>
   11f88:	ldr	r3, [r3, #40]	; 0x28
   11f8c:	cmp	r3, #0
   11f90:	beq	11fd4 <__assert_fail@plt+0xaf4>
   11f94:	ldr	r0, [pc, #-808]	; 11c74 <__assert_fail@plt+0x794>
   11f98:	bl	11444 <sigemptyset@plt>
   11f9c:	add	r2, sp, #112	; 0x70
   11fa0:	mov	r1, #0
   11fa4:	mov	r0, #13
   11fa8:	bl	11270 <sigaction@plt>
   11fac:	ldr	r3, [sp, #112]	; 0x70
   11fb0:	cmp	r3, #1
   11fb4:	beq	11fc4 <__assert_fail@plt+0xae4>
   11fb8:	mov	r1, #13
   11fbc:	ldr	r0, [pc, #-848]	; 11c74 <__assert_fail@plt+0x794>
   11fc0:	bl	11300 <sigaddset@plt>
   11fc4:	ldr	r2, [pc, #-852]	; 11c78 <__assert_fail@plt+0x798>
   11fc8:	mov	r0, #0
   11fcc:	add	r1, r2, #148	; 0x94
   11fd0:	bl	11198 <sigprocmask@plt>
   11fd4:	ldr	r3, [sp, #24]
   11fd8:	sub	r3, r3, #2
   11fdc:	cmp	r3, #5
   11fe0:	ldrls	pc, [pc, r3, lsl #2]
   11fe4:	b	12630 <__assert_fail@plt+0x1150>
   11fe8:	andeq	r2, r1, ip, lsr #7
   11fec:	andeq	r2, r1, ip, lsl #6
   11ff0:	andeq	r2, r1, ip, lsl #6
   11ff4:	muleq	r1, r8, r2
   11ff8:	andeq	r2, r1, r0
   11ffc:	andeq	r2, r1, r0, asr r9
   12000:	ldrd	r0, [sp, #40]	; 0x28
   12004:	ldrd	r2, [sp, #32]
   12008:	cmp	r1, r3
   1200c:	cmpeq	r0, r2
   12010:	bhi	1334c <__assert_fail@plt+0x1e6c>
   12014:	ldrd	r0, [sp, #48]	; 0x30
   12018:	cmp	r1, r3
   1201c:	cmpeq	r0, r2
   12020:	bcc	1334c <__assert_fail@plt+0x1e6c>
   12024:	ldrd	r2, [sp, #32]
   12028:	ldrd	r0, [sp, #48]	; 0x30
   1202c:	bl	1c22c <__assert_fail@plt+0xad4c>
   12030:	ldrd	r2, [sp, #40]	; 0x28
   12034:	cmp	r3, #0
   12038:	cmpeq	r2, #1
   1203c:	mov	ip, r1
   12040:	str	r0, [sp, #72]	; 0x48
   12044:	str	r1, [sp, #76]	; 0x4c
   12048:	bls	13128 <__assert_fail@plt+0x1c48>
   1204c:	subs	r2, r2, #1
   12050:	sbc	r3, r3, #0
   12054:	mov	fp, r3
   12058:	mov	sl, r2
   1205c:	mul	lr, r0, fp
   12060:	umull	r0, r1, r0, sl
   12064:	mla	ip, sl, ip, lr
   12068:	ldr	r4, [sp, #56]	; 0x38
   1206c:	subs	r6, r0, #1
   12070:	mov	r3, #0
   12074:	mov	r2, r4
   12078:	add	r1, ip, r1
   1207c:	sbc	r7, r1, #0
   12080:	cmp	r6, r4
   12084:	strd	r2, [sp, #24]
   12088:	sbcs	r3, r7, r3
   1208c:	mov	r8, r6
   12090:	mov	r9, r7
   12094:	bge	13058 <__assert_fail@plt+0x1b78>
   12098:	ldr	r0, [sp, #96]	; 0x60
   1209c:	sub	r2, r4, r6
   120a0:	add	r1, r0, r6
   120a4:	str	r2, [sp, #56]	; 0x38
   120a8:	bl	111a4 <memmove@plt>
   120ac:	mov	r4, r6
   120b0:	mov	r5, r7
   120b4:	ldrd	r6, [sp, #40]	; 0x28
   120b8:	mov	r3, #0
   120bc:	ldr	r0, [sp, #56]	; 0x38
   120c0:	str	r3, [sp, #100]	; 0x64
   120c4:	mov	r3, #1
   120c8:	str	r3, [sp, #104]	; 0x68
   120cc:	orr	r3, r6, r7
   120d0:	str	r3, [sp, #64]	; 0x40
   120d4:	ldrd	r2, [sp, #48]	; 0x30
   120d8:	cmp	r4, r2
   120dc:	sbcs	r3, r5, r3
   120e0:	bge	132b8 <__assert_fail@plt+0x1dd8>
   120e4:	cmn	r0, #1
   120e8:	beq	12868 <__assert_fail@plt+0x1388>
   120ec:	cmp	r0, #0
   120f0:	beq	132b8 <__assert_fail@plt+0x1dd8>
   120f4:	mov	r2, r0
   120f8:	ldrd	r0, [sp, #48]	; 0x30
   120fc:	mov	r3, #0
   12100:	subs	r0, r0, r4
   12104:	sbc	r1, r1, r5
   12108:	cmp	r2, r0
   1210c:	sbcs	ip, r3, r1
   12110:	ldr	r3, [sp, #96]	; 0x60
   12114:	movlt	r0, r2
   12118:	add	r2, r3, r0
   1211c:	str	r3, [sp, #24]
   12120:	mov	r3, #0
   12124:	str	r0, [sp, #88]	; 0x58
   12128:	str	r2, [sp, #56]	; 0x38
   1212c:	str	r3, [sp, #100]	; 0x64
   12130:	ldr	r3, [sp, #56]	; 0x38
   12134:	ldr	r2, [sp, #24]
   12138:	mvn	r0, #0
   1213c:	cmp	r3, r2
   12140:	beq	120d4 <__assert_fail@plt+0xbf4>
   12144:	subs	r0, r8, r4
   12148:	sbc	r1, r9, r5
   1214c:	cmp	r0, #0
   12150:	sbcs	r3, r1, #0
   12154:	ldr	r2, [sp, #88]	; 0x58
   12158:	movlt	r0, #0
   1215c:	movlt	r1, r0
   12160:	mov	r3, #0
   12164:	cmp	r2, r0
   12168:	sbcs	ip, r3, r1
   1216c:	ldr	r3, [sp, #88]	; 0x58
   12170:	movlt	r0, r2
   12174:	sub	r2, r3, r0
   12178:	ldr	r3, [sp, #24]
   1217c:	add	r0, r3, r0
   12180:	ldr	r3, [pc, #-1260]	; 11c9c <__assert_fail@plt+0x7bc>
   12184:	ldr	r1, [r3, #12]
   12188:	bl	113fc <memchr@plt>
   1218c:	subs	r3, r0, #0
   12190:	movne	r2, #1
   12194:	strne	r2, [sp, #92]	; 0x5c
   12198:	streq	r3, [sp, #92]	; 0x5c
   1219c:	ldr	r2, [sp, #24]
   121a0:	ldreq	r3, [sp, #56]	; 0x38
   121a4:	addne	r3, r3, #1
   121a8:	cmp	fp, r7
   121ac:	sub	r2, r3, r2
   121b0:	cmpeq	sl, r6
   121b4:	str	r2, [sp, #80]	; 0x50
   121b8:	beq	13034 <__assert_fail@plt+0x1b54>
   121bc:	orrs	r2, r6, r7
   121c0:	beq	12e40 <__assert_fail@plt+0x1960>
   121c4:	ldr	r2, [sp, #80]	; 0x50
   121c8:	ldr	r1, [sp, #92]	; 0x5c
   121cc:	adds	r4, r4, r2
   121d0:	adc	r5, r5, #0
   121d4:	strd	r6, [sp, #24]
   121d8:	cmp	r8, r4
   121dc:	sbcs	r2, r9, r5
   121e0:	movge	r2, r1
   121e4:	orrlt	r2, r1, #1
   121e8:	tst	r2, #255	; 0xff
   121ec:	beq	12c84 <__assert_fail@plt+0x17a4>
   121f0:	ldr	r0, [sp, #56]	; 0x38
   121f4:	eor	r2, r1, #1
   121f8:	cmp	r0, r3
   121fc:	movne	r2, #0
   12200:	andeq	r2, r2, #1
   12204:	cmp	r2, #0
   12208:	bne	12ca8 <__assert_fail@plt+0x17c8>
   1220c:	ldrd	r6, [sp, #24]
   12210:	adds	sl, sl, #1
   12214:	adc	fp, fp, #0
   12218:	cmp	fp, r7
   1221c:	cmpeq	sl, r6
   12220:	ldr	r0, [sp, #64]	; 0x40
   12224:	movhi	r2, #1
   12228:	movls	r2, #0
   1222c:	cmp	r0, #0
   12230:	moveq	r2, #0
   12234:	andne	r2, r2, #1
   12238:	cmp	r2, #0
   1223c:	bne	122d8 <__assert_fail@plt+0xdf8>
   12240:	ldrd	r6, [sp, #32]
   12244:	cmp	fp, r7
   12248:	cmpeq	sl, r6
   1224c:	beq	12750 <__assert_fail@plt+0x1270>
   12250:	ldrd	r6, [sp, #72]	; 0x48
   12254:	adds	r6, r6, r8
   12258:	adc	r7, r7, r9
   1225c:	mov	r8, r6
   12260:	mov	r9, r7
   12264:	cmp	r8, r4
   12268:	sbcs	r0, r9, r5
   1226c:	movge	r1, r2
   12270:	bge	121d8 <__assert_fail@plt+0xcf8>
   12274:	ldrd	r6, [sp, #24]
   12278:	orrs	r2, r6, r7
   1227c:	bne	121d8 <__assert_fail@plt+0xcf8>
   12280:	str	r1, [sp, #108]	; 0x6c
   12284:	str	r3, [sp, #104]	; 0x68
   12288:	bl	14308 <__assert_fail@plt+0x2e28>
   1228c:	ldr	r3, [sp, #104]	; 0x68
   12290:	ldr	r1, [sp, #108]	; 0x6c
   12294:	b	121d8 <__assert_fail@plt+0xcf8>
   12298:	ldrd	r2, [sp, #40]	; 0x28
   1229c:	orrs	r3, r2, r3
   122a0:	bne	12e68 <__assert_fail@plt+0x1988>
   122a4:	ldrd	r4, [sp, #32]
   122a8:	ldrd	r0, [sp, #48]	; 0x30
   122ac:	mov	r2, r4
   122b0:	mov	r3, r5
   122b4:	bl	1c22c <__assert_fail@plt+0xad4c>
   122b8:	mov	r2, r4
   122bc:	mov	r3, r5
   122c0:	strd	r2, [sp, #8]
   122c4:	ldr	r3, [sp, #56]	; 0x38
   122c8:	ldr	r2, [sp, #96]	; 0x60
   122cc:	str	r3, [sp]
   122d0:	ldr	r3, [sp, #60]	; 0x3c
   122d4:	bl	145f4 <__assert_fail@plt+0x3114>
   122d8:	mov	r0, #0
   122dc:	bl	114c8 <close@plt>
   122e0:	subs	r4, r0, #0
   122e4:	bne	12880 <__assert_fail@plt+0x13a0>
   122e8:	ldr	r3, [pc, #-1620]	; 11c9c <__assert_fail@plt+0x7bc>
   122ec:	ldr	r2, [pc, #-1620]	; 11ca0 <__assert_fail@plt+0x7c0>
   122f0:	ldr	r1, [r3, #8]
   122f4:	ldr	r3, [pc, #-1628]	; 11ca0 <__assert_fail@plt+0x7c0>
   122f8:	ldr	r2, [r2, #288]	; 0x120
   122fc:	ldr	r3, [r3]
   12300:	bl	13d44 <__assert_fail@plt+0x2864>
   12304:	mov	r0, r4
   12308:	bl	11348 <exit@plt>
   1230c:	mov	r8, #1
   12310:	mov	sl, r8
   12314:	mov	r4, #0
   12318:	mov	r5, #0
   1231c:	ldr	r2, [sp, #60]	; 0x3c
   12320:	ldr	r1, [sp, #96]	; 0x60
   12324:	mov	r0, #0
   12328:	bl	19454 <__assert_fail@plt+0x7f74>
   1232c:	cmn	r0, #1
   12330:	mov	fp, r0
   12334:	beq	12880 <__assert_fail@plt+0x13a0>
   12338:	ldr	r3, [pc, #-1700]	; 11c9c <__assert_fail@plt+0x7bc>
   1233c:	ldr	r2, [r3, #12]
   12340:	ldr	r3, [sp, #96]	; 0x60
   12344:	add	r6, r3, r0
   12348:	mov	r7, r3
   1234c:	mov	r9, r3
   12350:	strb	r2, [r3, r0]
   12354:	ldr	r3, [pc, #-1728]	; 11c9c <__assert_fail@plt+0x7bc>
   12358:	mov	r0, r9
   1235c:	ldr	r1, [r3, #12]
   12360:	bl	1124c <rawmemchr@plt>
   12364:	cmp	r6, r0
   12368:	beq	1270c <__assert_fail@plt+0x122c>
   1236c:	ldrd	r2, [sp, #32]
   12370:	adds	r4, r4, #1
   12374:	adc	r5, r5, #0
   12378:	cmp	r5, r3
   1237c:	cmpeq	r4, r2
   12380:	add	r9, r0, #1
   12384:	bcc	12354 <__assert_fail@plt+0xe74>
   12388:	mov	r0, r8
   1238c:	sub	r2, r9, r7
   12390:	mov	r1, r7
   12394:	bl	14000 <__assert_fail@plt+0x2b20>
   12398:	mov	r7, r9
   1239c:	mov	r4, #0
   123a0:	mov	r5, #0
   123a4:	mov	r8, sl
   123a8:	b	12354 <__assert_fail@plt+0xe74>
   123ac:	mov	r8, #0
   123b0:	ldr	r3, [sp, #60]	; 0x3c
   123b4:	mov	r4, r8
   123b8:	mov	sl, #0
   123bc:	mov	fp, #0
   123c0:	mov	r6, r8
   123c4:	mvn	r3, r3
   123c8:	str	r8, [sp, #64]	; 0x40
   123cc:	str	r8, [sp, #56]	; 0x38
   123d0:	str	r3, [sp, #88]	; 0x58
   123d4:	ldr	r2, [sp, #60]	; 0x3c
   123d8:	ldr	r1, [sp, #96]	; 0x60
   123dc:	mov	r0, #0
   123e0:	bl	19454 <__assert_fail@plt+0x7f74>
   123e4:	cmn	r0, #1
   123e8:	mov	r7, r0
   123ec:	beq	12880 <__assert_fail@plt+0x13a0>
   123f0:	cmp	r0, #0
   123f4:	beq	12920 <__assert_fail@plt+0x1440>
   123f8:	str	r6, [sp, #24]
   123fc:	ldr	r5, [sp, #96]	; 0x60
   12400:	mov	r6, r4
   12404:	b	12548 <__assert_fail@plt+0x1068>
   12408:	sub	r4, r8, sl
   1240c:	sub	r4, r4, ip
   12410:	ldr	r3, [pc, #-1916]	; 11c9c <__assert_fail@plt+0x7bc>
   12414:	sub	r9, r4, #1
   12418:	add	ip, r5, r9
   1241c:	ldr	r1, [r3, #12]
   12420:	adds	r3, ip, #0
   12424:	movne	r3, #1
   12428:	mov	r2, r4
   1242c:	mov	r0, r5
   12430:	str	r3, [sp, #48]	; 0x30
   12434:	str	ip, [sp, #40]	; 0x28
   12438:	bl	11384 <memrchr@plt>
   1243c:	ldr	r2, [sp, #24]
   12440:	cmp	r2, #0
   12444:	mov	r3, r0
   12448:	beq	125bc <__assert_fail@plt+0x10dc>
   1244c:	orrs	r2, sl, fp
   12450:	moveq	r0, #1
   12454:	movne	r0, #0
   12458:	cmp	r3, #0
   1245c:	moveq	r2, r0
   12460:	orrne	r2, r0, #1
   12464:	cmp	r2, #0
   12468:	bne	12658 <__assert_fail@plt+0x1178>
   1246c:	ldr	r3, [sp, #64]	; 0x40
   12470:	cmp	r3, #0
   12474:	bne	12614 <__assert_fail@plt+0x1134>
   12478:	ldr	r3, [sp, #40]	; 0x28
   1247c:	cmp	r3, #0
   12480:	beq	126c8 <__assert_fail@plt+0x11e8>
   12484:	orrs	r3, sl, fp
   12488:	moveq	r0, #1
   1248c:	movne	r0, #0
   12490:	mov	r1, r5
   12494:	adds	sl, sl, r4
   12498:	mov	r2, r4
   1249c:	adc	fp, fp, #0
   124a0:	bl	14000 <__assert_fail@plt+0x2b20>
   124a4:	sub	r7, r7, r4
   124a8:	add	r5, r5, r4
   124ac:	cmp	r7, #0
   124b0:	ldr	r9, [sp, #40]	; 0x28
   124b4:	clz	r9, r9
   124b8:	lsr	r9, r9, #5
   124bc:	moveq	r9, #0
   124c0:	cmp	r9, #0
   124c4:	beq	12528 <__assert_fail@plt+0x1048>
   124c8:	mov	r4, r7
   124cc:	ldr	r3, [sp, #24]
   124d0:	sub	r2, r6, r3
   124d4:	cmp	r2, r4
   124d8:	bcs	12500 <__assert_fail@plt+0x1020>
   124dc:	ldr	r3, [sp, #88]	; 0x58
   124e0:	cmp	r3, r6
   124e4:	bcc	13148 <__assert_fail@plt+0x1c68>
   124e8:	ldr	r3, [sp, #60]	; 0x3c
   124ec:	ldr	r0, [sp, #56]	; 0x38
   124f0:	add	r6, r6, r3
   124f4:	mov	r1, r6
   124f8:	bl	1a258 <__assert_fail@plt+0x8d78>
   124fc:	str	r0, [sp, #56]	; 0x38
   12500:	ldr	r3, [sp, #56]	; 0x38
   12504:	ldr	r8, [sp, #24]
   12508:	mov	r1, r5
   1250c:	add	r0, r3, r8
   12510:	mov	r2, r4
   12514:	sub	r7, r7, r4
   12518:	add	r5, r5, r4
   1251c:	bl	111c8 <memcpy@plt>
   12520:	add	r3, r8, r4
   12524:	str	r3, [sp, #24]
   12528:	ldr	r3, [sp, #48]	; 0x30
   1252c:	cmp	r3, #0
   12530:	movne	r3, #0
   12534:	strne	r3, [sp, #64]	; 0x40
   12538:	movne	sl, #0
   1253c:	movne	fp, #0
   12540:	cmp	r7, #0
   12544:	beq	12700 <__assert_fail@plt+0x1220>
   12548:	ldr	ip, [sp, #24]
   1254c:	ldrd	r8, [sp, #32]
   12550:	mov	r2, ip
   12554:	mov	r3, #0
   12558:	subs	r0, r8, sl
   1255c:	sbc	r1, r9, fp
   12560:	strd	r2, [sp, #72]	; 0x48
   12564:	subs	r2, r0, ip
   12568:	sbc	r3, r1, r3
   1256c:	mov	r1, r3
   12570:	mov	r3, #0
   12574:	mov	r0, r2
   12578:	cmp	r1, r3
   1257c:	mov	r2, r7
   12580:	cmpeq	r0, r7
   12584:	strd	r2, [sp, #80]	; 0x50
   12588:	bls	12408 <__assert_fail@plt+0xf28>
   1258c:	ldr	r3, [pc, #-2296]	; 11c9c <__assert_fail@plt+0x7bc>
   12590:	mov	r2, r7
   12594:	mov	r4, #0
   12598:	ldr	r1, [r3, #12]
   1259c:	mov	r0, r5
   125a0:	str	r4, [sp, #40]	; 0x28
   125a4:	bl	11384 <memrchr@plt>
   125a8:	ldr	r2, [sp, #24]
   125ac:	str	r4, [sp, #48]	; 0x30
   125b0:	cmp	r2, #0
   125b4:	mov	r3, r0
   125b8:	bne	1244c <__assert_fail@plt+0xf6c>
   125bc:	cmp	r3, #0
   125c0:	beq	13274 <__assert_fail@plt+0x1d94>
   125c4:	sub	r8, r3, r5
   125c8:	add	r8, r8, #1
   125cc:	orrs	r3, sl, fp
   125d0:	moveq	r0, #1
   125d4:	movne	r0, #0
   125d8:	mov	r1, r5
   125dc:	adds	sl, sl, r8
   125e0:	mov	r2, r8
   125e4:	adc	fp, fp, #0
   125e8:	bl	14000 <__assert_fail@plt+0x2b20>
   125ec:	ldr	r3, [sp, #40]	; 0x28
   125f0:	sub	r7, r7, r8
   125f4:	cmp	r3, #0
   125f8:	add	r5, r5, r8
   125fc:	beq	126b4 <__assert_fail@plt+0x11d4>
   12600:	mov	r3, #0
   12604:	sub	r4, r4, r8
   12608:	str	r3, [sp, #24]
   1260c:	mov	r3, #1
   12610:	str	r3, [sp, #64]	; 0x40
   12614:	ldr	r2, [sp, #48]	; 0x30
   12618:	cmp	r4, #0
   1261c:	moveq	r2, #0
   12620:	andne	r2, r2, #1
   12624:	cmp	r2, #0
   12628:	bne	124cc <__assert_fail@plt+0xfec>
   1262c:	b	124ac <__assert_fail@plt+0xfcc>
   12630:	mov	r4, #0
   12634:	mov	r5, #0
   12638:	mvn	ip, #0
   1263c:	ldr	r3, [sp, #60]	; 0x3c
   12640:	ldr	r2, [sp, #96]	; 0x60
   12644:	ldrd	r0, [sp, #32]
   12648:	strd	r4, [sp, #8]
   1264c:	str	ip, [sp]
   12650:	bl	145f4 <__assert_fail@plt+0x3114>
   12654:	b	122d8 <__assert_fail@plt+0xdf8>
   12658:	ldrd	r8, [sp, #72]	; 0x48
   1265c:	ldr	r6, [sp, #24]
   12660:	ldr	r1, [sp, #56]	; 0x38
   12664:	adds	r8, r8, sl
   12668:	mov	r2, r6
   1266c:	adc	r9, r9, fp
   12670:	str	r3, [sp, #92]	; 0x5c
   12674:	bl	14000 <__assert_fail@plt+0x2b20>
   12678:	ldr	r3, [sp, #60]	; 0x3c
   1267c:	mov	sl, r8
   12680:	cmp	r3, r6
   12684:	mov	fp, r9
   12688:	ldr	r3, [sp, #92]	; 0x5c
   1268c:	ldrcs	r6, [sp, #60]	; 0x3c
   12690:	bcs	125bc <__assert_fail@plt+0x10dc>
   12694:	ldr	r6, [sp, #60]	; 0x3c
   12698:	ldr	r0, [sp, #56]	; 0x38
   1269c:	mov	r1, r6
   126a0:	str	r3, [sp, #24]
   126a4:	bl	1a258 <__assert_fail@plt+0x8d78>
   126a8:	ldr	r3, [sp, #24]
   126ac:	str	r0, [sp, #56]	; 0x38
   126b0:	b	125bc <__assert_fail@plt+0x10dc>
   126b4:	ldr	r3, [sp, #40]	; 0x28
   126b8:	str	r3, [sp, #24]
   126bc:	mov	r3, #1
   126c0:	str	r3, [sp, #64]	; 0x40
   126c4:	b	124ac <__assert_fail@plt+0xfcc>
   126c8:	orrs	r3, sl, fp
   126cc:	ldrd	r2, [sp, #80]	; 0x50
   126d0:	moveq	r0, #1
   126d4:	movne	r0, #0
   126d8:	adds	r2, r2, sl
   126dc:	mov	r1, r5
   126e0:	adc	r3, r3, fp
   126e4:	mov	sl, r2
   126e8:	mov	r2, r7
   126ec:	mov	fp, r3
   126f0:	add	r5, r5, r7
   126f4:	bl	14000 <__assert_fail@plt+0x2b20>
   126f8:	ldr	r7, [sp, #40]	; 0x28
   126fc:	b	124ac <__assert_fail@plt+0xfcc>
   12700:	mov	r4, r6
   12704:	ldr	r6, [sp, #24]
   12708:	b	123d4 <__assert_fail@plt+0xef4>
   1270c:	cmp	r6, r7
   12710:	beq	12728 <__assert_fail@plt+0x1248>
   12714:	mov	r0, r8
   12718:	sub	r2, r6, r7
   1271c:	mov	r1, r7
   12720:	bl	14000 <__assert_fail@plt+0x2b20>
   12724:	mov	r8, #0
   12728:	cmp	fp, #0
   1272c:	bne	1231c <__assert_fail@plt+0xe3c>
   12730:	b	122d8 <__assert_fail@plt+0xdf8>
   12734:	mov	r2, #5
   12738:	ldr	r1, [pc, #-2756]	; 11c7c <__assert_fail@plt+0x79c>
   1273c:	b	11828 <__assert_fail@plt+0x348>
   12740:	ldr	r2, [pc, #-2732]	; 11c9c <__assert_fail@plt+0x7bc>
   12744:	mov	r3, #0
   12748:	strb	r3, [r2]
   1274c:	b	11d34 <__assert_fail@plt+0x854>
   12750:	ldrd	r8, [sp, #48]	; 0x30
   12754:	subs	r8, r8, #1
   12758:	sbc	r9, r9, #0
   1275c:	b	12264 <__assert_fail@plt+0xd84>
   12760:	ldr	r3, [pc, #-2792]	; 11c80 <__assert_fail@plt+0x7a0>
   12764:	mov	r2, #10
   12768:	str	r3, [sp]
   1276c:	add	r3, sp, #112	; 0x70
   12770:	bl	1ab20 <__assert_fail@plt+0x9640>
   12774:	ldrd	r2, [sp, #32]
   12778:	subs	r2, r2, #1
   1277c:	sbc	r3, r3, #0
   12780:	cmp	r0, #0
   12784:	bne	127cc <__assert_fail@plt+0x12ec>
   12788:	ldrd	r0, [sp, #32]
   1278c:	ldrd	r8, [sp, #112]	; 0x70
   12790:	mvn	r1, r1
   12794:	cmp	r1, r9
   12798:	mvn	r0, r0
   1279c:	cmpeq	r0, r8
   127a0:	ldrd	r0, [sp, #32]
   127a4:	movcc	ip, #0
   127a8:	movcs	ip, #1
   127ac:	cmp	r9, r1
   127b0:	cmpeq	r8, r0
   127b4:	movcs	r1, #0
   127b8:	andcc	r1, ip, #1
   127bc:	cmp	r1, #0
   127c0:	beq	127cc <__assert_fail@plt+0x12ec>
   127c4:	adds	r2, r2, r8
   127c8:	adc	r3, r3, r9
   127cc:	strd	r2, [sp, #48]	; 0x30
   127d0:	ldr	r3, [pc, #-2876]	; 11c9c <__assert_fail@plt+0x7bc>
   127d4:	mov	r8, #0
   127d8:	mov	r9, #0
   127dc:	ldr	r0, [r3, #4]
   127e0:	bl	11354 <strlen@plt>
   127e4:	ldrd	r2, [sp, #48]	; 0x30
   127e8:	mov	fp, #0
   127ec:	mov	r4, r0
   127f0:	mov	r0, r2
   127f4:	mov	r1, r3
   127f8:	mov	r2, r4
   127fc:	mov	r3, #0
   12800:	bl	1c22c <__assert_fail@plt+0xad4c>
   12804:	adds	r8, r8, #1
   12808:	adc	r9, r9, #0
   1280c:	mov	r2, r0
   12810:	mov	r3, r1
   12814:	orrs	r1, r2, r3
   12818:	bne	127f0 <__assert_fail@plt+0x1310>
   1281c:	ldr	r3, [pc, #-2948]	; 11ca0 <__assert_fail@plt+0x7c0>
   12820:	ldr	r2, [r3, #4]
   12824:	ldr	r3, [pc, #-2960]	; 11c9c <__assert_fail@plt+0x7bc>
   12828:	cmp	r2, #0
   1282c:	strb	fp, [r3]
   12830:	beq	11d20 <__assert_fail@plt+0x840>
   12834:	mov	r3, #0
   12838:	cmp	r9, r3
   1283c:	cmpeq	r8, r2
   12840:	bls	12740 <__assert_fail@plt+0x1260>
   12844:	mov	r2, #5
   12848:	ldr	r1, [pc, #-3020]	; 11c84 <__assert_fail@plt+0x7a4>
   1284c:	mov	r0, #0
   12850:	bl	1121c <dcgettext@plt>
   12854:	strd	r8, [sp]
   12858:	mov	r1, #0
   1285c:	mov	r2, r0
   12860:	mov	r0, #1
   12864:	bl	112d0 <error@plt>
   12868:	ldr	r2, [sp, #60]	; 0x3c
   1286c:	ldr	r1, [sp, #96]	; 0x60
   12870:	mov	r0, #0
   12874:	bl	19454 <__assert_fail@plt+0x7f74>
   12878:	cmn	r0, #1
   1287c:	bne	120ec <__assert_fail@plt+0xc0c>
   12880:	bl	1139c <__errno_location@plt>
   12884:	ldr	r3, [pc, #-3052]	; 11ca0 <__assert_fail@plt+0x7c0>
   12888:	mov	r1, #3
   1288c:	ldr	r2, [r3, #300]	; 0x12c
   12890:	ldr	r4, [r0]
   12894:	mov	r0, #0
   12898:	bl	183e0 <__assert_fail@plt+0x6f00>
   1289c:	mov	r3, r0
   128a0:	mov	r1, r4
   128a4:	ldr	r2, [pc, #-3108]	; 11c88 <__assert_fail@plt+0x7a8>
   128a8:	mov	r0, #1
   128ac:	bl	112d0 <error@plt>
   128b0:	cmp	sl, #2
   128b4:	bhi	11d08 <__assert_fail@plt+0x828>
   128b8:	ldrd	r2, [sp, #32]
   128bc:	subs	r2, r2, #1
   128c0:	sbc	r3, r3, #0
   128c4:	b	127cc <__assert_fail@plt+0x12ec>
   128c8:	mov	r2, #5
   128cc:	ldr	r1, [pc, #-3144]	; 11c8c <__assert_fail@plt+0x7ac>
   128d0:	b	11e30 <__assert_fail@plt+0x950>
   128d4:	ldr	r1, [pc, #-3148]	; 11c90 <__assert_fail@plt+0x7b0>
   128d8:	mov	r2, #5
   128dc:	mov	r0, #0
   128e0:	bl	1121c <dcgettext@plt>
   128e4:	mov	r5, r0
   128e8:	ldr	r0, [r4]
   128ec:	bl	192d4 <__assert_fail@plt+0x7df4>
   128f0:	mov	r2, r5
   128f4:	mov	r3, r0
   128f8:	b	11da8 <__assert_fail@plt+0x8c8>
   128fc:	cmp	fp, #100	; 0x64
   12900:	mov	r2, #5
   12904:	ldrne	r1, [pc, #-3192]	; 11c94 <__assert_fail@plt+0x7b4>
   12908:	bne	128dc <__assert_fail@plt+0x13fc>
   1290c:	ldr	r1, [pc, #-3196]	; 11c98 <__assert_fail@plt+0x7b8>
   12910:	mov	r0, #0
   12914:	bl	1121c <dcgettext@plt>
   12918:	mov	r5, r0
   1291c:	b	128e8 <__assert_fail@plt+0x1408>
   12920:	cmp	r6, #0
   12924:	mov	r8, r6
   12928:	beq	12944 <__assert_fail@plt+0x1464>
   1292c:	orrs	r3, sl, fp
   12930:	mov	r2, r8
   12934:	moveq	r0, #1
   12938:	movne	r0, #0
   1293c:	ldr	r1, [sp, #56]	; 0x38
   12940:	bl	14000 <__assert_fail@plt+0x2b20>
   12944:	ldr	r0, [sp, #56]	; 0x38
   12948:	bl	15238 <__assert_fail@plt+0x3d58>
   1294c:	b	122d8 <__assert_fail@plt+0xdf8>
   12950:	ldrd	r2, [sp, #40]	; 0x28
   12954:	orrs	r3, r2, r3
   12958:	bne	12e5c <__assert_fail@plt+0x197c>
   1295c:	ldrd	sl, [sp, #32]
   12960:	mov	r3, #0
   12964:	mvn	r2, #0
   12968:	cmp	fp, r3
   1296c:	cmpeq	sl, r2
   12970:	bhi	13148 <__assert_fail@plt+0x1c68>
   12974:	mov	r1, #16
   12978:	mov	r0, sl
   1297c:	bl	1a300 <__assert_fail@plt+0x8e20>
   12980:	mov	r8, #0
   12984:	mov	r9, r8
   12988:	mov	r6, sl
   1298c:	mvn	r5, #0
   12990:	mov	r4, r0
   12994:	mov	r7, r0
   12998:	b	129c0 <__assert_fail@plt+0x14e0>
   1299c:	bl	134c4 <__assert_fail@plt+0x1fe4>
   129a0:	ldr	r3, [pc, #-3336]	; 11ca0 <__assert_fail@plt+0x7c0>
   129a4:	add	r8, r8, #1
   129a8:	ldr	r0, [r3]
   129ac:	bl	1a82c <__assert_fail@plt+0x934c>
   129b0:	str	r5, [r7, #-12]
   129b4:	str	r9, [r7, #-8]
   129b8:	str	r9, [r7, #-4]
   129bc:	str	r0, [r7, #-16]
   129c0:	cmp	r6, r8
   129c4:	add	r7, r7, #16
   129c8:	bne	1299c <__assert_fail@plt+0x14bc>
   129cc:	str	r4, [sp, #56]	; 0x38
   129d0:	mov	r2, #1
   129d4:	mov	r3, #0
   129d8:	mov	r9, #1
   129dc:	mov	fp, #0
   129e0:	str	fp, [sp, #48]	; 0x30
   129e4:	str	fp, [sp, #64]	; 0x40
   129e8:	str	fp, [sp, #80]	; 0x50
   129ec:	strd	r2, [sp, #24]
   129f0:	ldr	r2, [sp, #60]	; 0x3c
   129f4:	ldr	r1, [sp, #96]	; 0x60
   129f8:	mov	r0, #0
   129fc:	bl	19454 <__assert_fail@plt+0x7f74>
   12a00:	cmn	r0, #1
   12a04:	beq	12880 <__assert_fail@plt+0x13a0>
   12a08:	cmp	r0, #0
   12a0c:	beq	13108 <__assert_fail@plt+0x1c28>
   12a10:	ldr	r4, [sp, #96]	; 0x60
   12a14:	add	r6, r4, r0
   12a18:	cmp	r4, r6
   12a1c:	bne	12a68 <__assert_fail@plt+0x1588>
   12a20:	b	129f0 <__assert_fail@plt+0x1510>
   12a24:	ldrd	r0, [sp, #24]
   12a28:	cmp	r1, r3
   12a2c:	cmpeq	r0, r2
   12a30:	beq	12bc8 <__assert_fail@plt+0x16e8>
   12a34:	cmp	r7, #0
   12a38:	beq	12a5c <__assert_fail@plt+0x157c>
   12a3c:	ldrd	r2, [sp, #24]
   12a40:	ldrd	r0, [sp, #32]
   12a44:	cmp	r3, r1
   12a48:	cmpeq	r2, r0
   12a4c:	beq	12c20 <__assert_fail@plt+0x1740>
   12a50:	adds	r2, r2, #1
   12a54:	adc	r3, r3, #0
   12a58:	strd	r2, [sp, #24]
   12a5c:	cmp	r6, r5
   12a60:	mov	r4, r5
   12a64:	beq	129f0 <__assert_fail@plt+0x1510>
   12a68:	ldr	r3, [pc, #-3540]	; 11c9c <__assert_fail@plt+0x7bc>
   12a6c:	sub	r2, r6, r4
   12a70:	mov	r0, r4
   12a74:	ldr	r1, [r3, #12]
   12a78:	bl	113fc <memchr@plt>
   12a7c:	ldrd	r2, [sp, #40]	; 0x28
   12a80:	cmp	r0, #0
   12a84:	addne	r5, r0, #1
   12a88:	moveq	r5, r6
   12a8c:	movne	r7, r9
   12a90:	moveq	r7, #0
   12a94:	orrs	r1, r2, r3
   12a98:	sub	r8, r5, r4
   12a9c:	bne	12a24 <__assert_fail@plt+0x1544>
   12aa0:	ldr	r2, [sp, #32]
   12aa4:	mov	r1, fp
   12aa8:	ldr	r0, [sp, #56]	; 0x38
   12aac:	bl	13ba8 <__assert_fail@plt+0x26c8>
   12ab0:	ldr	r3, [pc, #-3608]	; 11ca0 <__assert_fail@plt+0x7c0>
   12ab4:	ldr	r2, [sp, #56]	; 0x38
   12ab8:	ldrb	r3, [r3, #304]	; 0x130
   12abc:	cmp	r3, #0
   12ac0:	ldr	r3, [sp, #48]	; 0x30
   12ac4:	orr	r0, r0, r3
   12ac8:	uxtb	r3, r0
   12acc:	str	r3, [sp, #48]	; 0x30
   12ad0:	lsl	r3, fp, #4
   12ad4:	str	r3, [sp, #72]	; 0x48
   12ad8:	add	sl, r2, r3
   12adc:	bne	12b30 <__assert_fail@plt+0x1650>
   12ae0:	mov	r1, r8
   12ae4:	mov	r0, r4
   12ae8:	ldr	r3, [sl, #8]
   12aec:	mov	r2, r9
   12af0:	bl	111f8 <fwrite_unlocked@plt>
   12af4:	cmp	r0, #1
   12af8:	beq	12b48 <__assert_fail@plt+0x1668>
   12afc:	bl	1139c <__errno_location@plt>
   12b00:	ldr	r3, [pc, #-3688]	; 11ca0 <__assert_fail@plt+0x7c0>
   12b04:	ldr	r3, [r3, #40]	; 0x28
   12b08:	ldr	r4, [r0]
   12b0c:	adds	r0, r3, #0
   12b10:	movne	r0, #1
   12b14:	cmp	r4, #32
   12b18:	movne	r0, #0
   12b1c:	cmp	r0, #0
   12b20:	bne	12c78 <__assert_fail@plt+0x1798>
   12b24:	ldr	r2, [sl]
   12b28:	mov	r1, #3
   12b2c:	b	12898 <__assert_fail@plt+0x13b8>
   12b30:	mov	r1, r4
   12b34:	ldr	r0, [sl, #4]
   12b38:	mov	r2, r8
   12b3c:	bl	15330 <__assert_fail@plt+0x3e50>
   12b40:	cmp	r8, r0
   12b44:	bne	12afc <__assert_fail@plt+0x161c>
   12b48:	bl	1139c <__errno_location@plt>
   12b4c:	ldr	r3, [pc, #-3764]	; 11ca0 <__assert_fail@plt+0x7c0>
   12b50:	ldr	r1, [r3, #40]	; 0x28
   12b54:	adds	r3, r1, #0
   12b58:	movne	r3, #1
   12b5c:	ldr	r2, [r0]
   12b60:	mov	r4, r0
   12b64:	cmp	r2, #32
   12b68:	movne	r3, #0
   12b6c:	ldr	r2, [sp, #64]	; 0x40
   12b70:	cmp	r3, #0
   12b74:	moveq	r2, #1
   12b78:	str	r2, [sp, #64]	; 0x40
   12b7c:	ldr	r3, [sp, #48]	; 0x30
   12b80:	cmp	r3, #0
   12b84:	bne	12c30 <__assert_fail@plt+0x1750>
   12b88:	cmp	r7, #0
   12b8c:	beq	12a5c <__assert_fail@plt+0x157c>
   12b90:	ldrd	r0, [sp, #32]
   12b94:	mov	r3, #0
   12b98:	add	fp, fp, #1
   12b9c:	cmp	r3, r1
   12ba0:	cmpeq	fp, r0
   12ba4:	bne	12a5c <__assert_fail@plt+0x157c>
   12ba8:	ldr	r3, [sp, #64]	; 0x40
   12bac:	cmp	r3, #0
   12bb0:	beq	12dc0 <__assert_fail@plt+0x18e0>
   12bb4:	ldr	r3, [sp, #64]	; 0x40
   12bb8:	mov	fp, #0
   12bbc:	str	r3, [sp, #80]	; 0x50
   12bc0:	str	fp, [sp, #64]	; 0x40
   12bc4:	b	12a5c <__assert_fail@plt+0x157c>
   12bc8:	ldr	r3, [pc, #1936]	; 13360 <__assert_fail@plt+0x1e80>
   12bcc:	ldrb	sl, [r3, #304]	; 0x130
   12bd0:	cmp	sl, #0
   12bd4:	bne	12c5c <__assert_fail@plt+0x177c>
   12bd8:	ldr	r3, [pc, #1924]	; 13364 <__assert_fail@plt+0x1e84>
   12bdc:	mov	r1, r8
   12be0:	mov	r0, r4
   12be4:	ldr	r3, [r3]
   12be8:	mov	r2, r9
   12bec:	bl	111f8 <fwrite_unlocked@plt>
   12bf0:	cmp	r0, #1
   12bf4:	beq	12a34 <__assert_fail@plt+0x1554>
   12bf8:	ldr	r3, [pc, #1892]	; 13364 <__assert_fail@plt+0x1e84>
   12bfc:	ldr	r0, [r3]
   12c00:	bl	11480 <clearerr_unlocked@plt>
   12c04:	bl	1139c <__errno_location@plt>
   12c08:	mov	r2, #5
   12c0c:	ldr	r1, [pc, #1876]	; 13368 <__assert_fail@plt+0x1e88>
   12c10:	ldr	r4, [r0]
   12c14:	mov	r0, #0
   12c18:	bl	1121c <dcgettext@plt>
   12c1c:	b	1289c <__assert_fail@plt+0x13bc>
   12c20:	mov	r2, #1
   12c24:	mov	r3, #0
   12c28:	strd	r2, [sp, #24]
   12c2c:	b	12a5c <__assert_fail@plt+0x157c>
   12c30:	ldr	r3, [sp, #56]	; 0x38
   12c34:	ldr	r2, [sp, #72]	; 0x48
   12c38:	add	r8, r3, r2
   12c3c:	ldr	r0, [r8, #8]
   12c40:	bl	1509c <__assert_fail@plt+0x3bbc>
   12c44:	cmp	r0, #0
   12c48:	bne	13338 <__assert_fail@plt+0x1e58>
   12c4c:	mvn	r3, #1
   12c50:	str	r0, [r8, #8]
   12c54:	str	r3, [r8, #4]
   12c58:	b	12b88 <__assert_fail@plt+0x16a8>
   12c5c:	mov	r1, r4
   12c60:	mov	r2, r8
   12c64:	mov	r0, r9
   12c68:	bl	15330 <__assert_fail@plt+0x3e50>
   12c6c:	cmp	r8, r0
   12c70:	beq	12a34 <__assert_fail@plt+0x1554>
   12c74:	b	12c04 <__assert_fail@plt+0x1724>
   12c78:	bl	1139c <__errno_location@plt>
   12c7c:	mov	r4, r0
   12c80:	b	12b7c <__assert_fail@plt+0x169c>
   12c84:	ldrd	r6, [sp, #24]
   12c88:	ldr	r2, [sp, #88]	; 0x58
   12c8c:	ldr	r1, [sp, #80]	; 0x50
   12c90:	str	r3, [sp, #24]
   12c94:	ldr	r3, [sp, #92]	; 0x5c
   12c98:	sub	r2, r2, r1
   12c9c:	str	r2, [sp, #88]	; 0x58
   12ca0:	str	r3, [sp, #104]	; 0x68
   12ca4:	b	12130 <__assert_fail@plt+0xc50>
   12ca8:	ldrd	r6, [sp, #24]
   12cac:	str	r2, [sp, #100]	; 0x64
   12cb0:	b	12c88 <__assert_fail@plt+0x17a8>
   12cb4:	mov	r3, #1
   12cb8:	str	r3, [sp]
   12cbc:	mov	r2, #0
   12cc0:	mov	r3, #0
   12cc4:	mov	r0, #0
   12cc8:	bl	11288 <lseek64@plt>
   12ccc:	cmp	r0, #0
   12cd0:	sbcs	r3, r1, #0
   12cd4:	mov	r8, r0
   12cd8:	mov	r9, r1
   12cdc:	blt	130c0 <__assert_fail@plt+0x1be0>
   12ce0:	ldr	r7, [sp, #60]	; 0x3c
   12ce4:	strd	r8, [sp, #48]	; 0x30
   12ce8:	mov	sl, #0
   12cec:	mov	fp, #0
   12cf0:	mov	r6, #0
   12cf4:	mov	r4, r7
   12cf8:	mov	r5, #0
   12cfc:	ldr	r9, [sp, #96]	; 0x60
   12d00:	b	12d20 <__assert_fail@plt+0x1840>
   12d04:	cmn	r0, #1
   12d08:	beq	130d4 <__assert_fail@plt+0x1bf4>
   12d0c:	adds	sl, sl, r0
   12d10:	adc	fp, fp, #0
   12d14:	cmp	sl, r4
   12d18:	sbcs	r3, fp, r5
   12d1c:	bge	1314c <__assert_fail@plt+0x1c6c>
   12d20:	sub	r2, r7, sl
   12d24:	add	r1, r9, sl
   12d28:	mov	r0, r6
   12d2c:	bl	19454 <__assert_fail@plt+0x7f74>
   12d30:	cmp	r0, #0
   12d34:	bne	12d04 <__assert_fail@plt+0x1824>
   12d38:	ldr	r8, [sp, #60]	; 0x3c
   12d3c:	cmp	sl, r8
   12d40:	asr	r9, r8, #31
   12d44:	sbcs	r3, fp, r9
   12d48:	ldrd	r2, [sp, #32]
   12d4c:	movlt	r8, sl
   12d50:	str	r8, [sp, #56]	; 0x38
   12d54:	cmp	r2, #0
   12d58:	sbcs	r3, r3, #0
   12d5c:	blt	1327c <__assert_fail@plt+0x1d9c>
   12d60:	ldrd	r0, [sp, #32]
   12d64:	mov	r2, sl
   12d68:	mov	r3, fp
   12d6c:	cmp	fp, r1
   12d70:	cmpeq	sl, r0
   12d74:	strd	r2, [sp, #48]	; 0x30
   12d78:	strdcc	r0, [sp, #48]	; 0x30
   12d7c:	b	11f84 <__assert_fail@plt+0xaa4>
   12d80:	bl	1139c <__errno_location@plt>
   12d84:	ldr	r1, [pc, #1504]	; 1336c <__assert_fail@plt+0x1e8c>
   12d88:	mov	r2, #5
   12d8c:	ldr	r4, [r0]
   12d90:	mov	r0, #0
   12d94:	bl	1121c <dcgettext@plt>
   12d98:	ldr	r3, [pc, #1472]	; 13360 <__assert_fail@plt+0x1e80>
   12d9c:	ldr	r1, [r3, #300]	; 0x12c
   12da0:	mov	r5, r0
   12da4:	mov	r0, #4
   12da8:	bl	17964 <__assert_fail@plt+0x6484>
   12dac:	mov	r3, r0
   12db0:	mov	r2, r5
   12db4:	mov	r1, r4
   12db8:	mov	r0, #1
   12dbc:	bl	112d0 <error@plt>
   12dc0:	ldr	r6, [sp, #32]
   12dc4:	ldr	r7, [sp, #56]	; 0x38
   12dc8:	mov	r4, #0
   12dcc:	mov	r5, #0
   12dd0:	mvn	r8, #1
   12dd4:	ldrd	sl, [sp, #32]
   12dd8:	b	12e08 <__assert_fail@plt+0x1928>
   12ddc:	ldr	r1, [r7, #4]
   12de0:	cmp	r1, #0
   12de4:	blt	12df8 <__assert_fail@plt+0x1918>
   12de8:	ldr	r3, [r7]
   12dec:	ldr	r2, [r7, #12]
   12df0:	ldr	r0, [r7, #8]
   12df4:	bl	13d44 <__assert_fail@plt+0x2864>
   12df8:	adds	r4, r4, #1
   12dfc:	str	r8, [r7, #4]
   12e00:	adc	r5, r5, #0
   12e04:	add	r7, r7, #16
   12e08:	cmp	fp, r5
   12e0c:	cmpeq	sl, r4
   12e10:	beq	122d8 <__assert_fail@plt+0xdf8>
   12e14:	cmp	r6, r4
   12e18:	bhi	12ddc <__assert_fail@plt+0x18fc>
   12e1c:	ldr	r3, [pc, #1340]	; 13360 <__assert_fail@plt+0x1e80>
   12e20:	ldrb	r3, [r3, #296]	; 0x128
   12e24:	cmp	r3, #0
   12e28:	bne	12ddc <__assert_fail@plt+0x18fc>
   12e2c:	mov	r2, sl
   12e30:	mov	r1, r4
   12e34:	ldr	r0, [sp, #56]	; 0x38
   12e38:	bl	13ba8 <__assert_fail@plt+0x26c8>
   12e3c:	b	12ddc <__assert_fail@plt+0x18fc>
   12e40:	ldr	r1, [sp, #24]
   12e44:	ldr	r0, [sp, #104]	; 0x68
   12e48:	ldr	r2, [sp, #80]	; 0x50
   12e4c:	str	r3, [sp, #108]	; 0x6c
   12e50:	bl	14000 <__assert_fail@plt+0x2b20>
   12e54:	ldr	r3, [sp, #108]	; 0x6c
   12e58:	b	121c4 <__assert_fail@plt+0xce4>
   12e5c:	mov	r3, #0
   12e60:	str	r3, [sp, #56]	; 0x38
   12e64:	b	129d0 <__assert_fail@plt+0x14f0>
   12e68:	ldrd	r0, [sp, #32]
   12e6c:	ldrd	r4, [sp, #40]	; 0x28
   12e70:	mov	r3, r1
   12e74:	cmp	r5, r1
   12e78:	cmpeq	r4, r0
   12e7c:	ldrd	r4, [sp, #48]	; 0x30
   12e80:	movls	r3, #1
   12e84:	movhi	r3, #0
   12e88:	cmp	r5, r1
   12e8c:	cmpeq	r4, r0
   12e90:	movcc	r3, #0
   12e94:	andcs	r3, r3, #1
   12e98:	cmp	r3, #0
   12e9c:	beq	13324 <__assert_fail@plt+0x1e44>
   12ea0:	ldrd	r6, [sp, #32]
   12ea4:	ldrd	r0, [sp, #48]	; 0x30
   12ea8:	mov	r2, r6
   12eac:	mov	r3, r7
   12eb0:	bl	1c22c <__assert_fail@plt+0xad4c>
   12eb4:	ldrd	r8, [sp, #40]	; 0x28
   12eb8:	subs	r2, r8, #1
   12ebc:	sbc	r3, r9, #0
   12ec0:	cmp	r9, r7
   12ec4:	cmpeq	r8, r6
   12ec8:	mul	ip, r2, r1
   12ecc:	umull	r6, r7, r2, r0
   12ed0:	mla	r3, r0, r3, ip
   12ed4:	mov	r4, r6
   12ed8:	add	r7, r3, r7
   12edc:	mov	r5, r7
   12ee0:	beq	12efc <__assert_fail@plt+0x1a1c>
   12ee4:	mul	r3, r0, r9
   12ee8:	umull	sl, fp, r0, r8
   12eec:	mla	r1, r8, r1, r3
   12ef0:	strd	sl, [sp, #48]	; 0x30
   12ef4:	add	r3, r1, fp
   12ef8:	str	r3, [sp, #52]	; 0x34
   12efc:	ldr	r1, [sp, #56]	; 0x38
   12f00:	mov	r3, #0
   12f04:	mov	fp, r3
   12f08:	cmp	r6, r1
   12f0c:	sbcs	r3, r7, fp
   12f10:	blt	13004 <__assert_fail@plt+0x1b24>
   12f14:	subs	r2, r6, r1
   12f18:	mov	r8, #1
   12f1c:	sbc	r3, r7, fp
   12f20:	str	r8, [sp]
   12f24:	mov	r0, #0
   12f28:	bl	11288 <lseek64@plt>
   12f2c:	cmp	r0, #0
   12f30:	sbcs	r3, r1, #0
   12f34:	blt	132f4 <__assert_fail@plt+0x1e14>
   12f38:	ldrd	r2, [sp, #48]	; 0x30
   12f3c:	cmp	r6, r2
   12f40:	sbcs	r3, r7, r3
   12f44:	bge	122d8 <__assert_fail@plt+0xdf8>
   12f48:	ldr	r2, [sp, #60]	; 0x3c
   12f4c:	ldr	r1, [sp, #96]	; 0x60
   12f50:	mov	r0, #0
   12f54:	bl	19454 <__assert_fail@plt+0x7f74>
   12f58:	cmn	r0, #1
   12f5c:	mov	r8, r0
   12f60:	beq	12880 <__assert_fail@plt+0x13a0>
   12f64:	cmp	r8, #0
   12f68:	beq	122d8 <__assert_fail@plt+0xdf8>
   12f6c:	ldrd	r6, [sp, #48]	; 0x30
   12f70:	mov	r9, #0
   12f74:	ldr	r1, [sp, #96]	; 0x60
   12f78:	subs	r6, r6, r4
   12f7c:	sbc	r7, r7, r5
   12f80:	cmp	r8, r6
   12f84:	sbcs	r3, r9, r7
   12f88:	movlt	r6, r8
   12f8c:	mov	r2, r6
   12f90:	mov	r0, #1
   12f94:	bl	15330 <__assert_fail@plt+0x3e50>
   12f98:	cmp	r0, r6
   12f9c:	beq	12fe8 <__assert_fail@plt+0x1b08>
   12fa0:	bl	1139c <__errno_location@plt>
   12fa4:	ldr	r3, [pc, #948]	; 13360 <__assert_fail@plt+0x1e80>
   12fa8:	ldr	r3, [r3, #40]	; 0x28
   12fac:	ldr	r8, [r0]
   12fb0:	adds	r0, r3, #0
   12fb4:	movne	r0, #1
   12fb8:	cmp	r8, #32
   12fbc:	movne	r0, #0
   12fc0:	cmp	r0, #0
   12fc4:	bne	12fe8 <__assert_fail@plt+0x1b08>
   12fc8:	ldr	r2, [pc, #928]	; 13370 <__assert_fail@plt+0x1e90>
   12fcc:	mov	r1, #3
   12fd0:	bl	183e0 <__assert_fail@plt+0x6f00>
   12fd4:	mov	r1, r8
   12fd8:	ldr	r2, [pc, #916]	; 13374 <__assert_fail@plt+0x1e94>
   12fdc:	mov	r3, r0
   12fe0:	mov	r0, #1
   12fe4:	bl	112d0 <error@plt>
   12fe8:	ldrd	r2, [sp, #48]	; 0x30
   12fec:	adds	r4, r4, r6
   12ff0:	adc	r5, r5, #0
   12ff4:	cmp	r4, r2
   12ff8:	sbcs	r3, r5, r3
   12ffc:	blt	12f48 <__assert_fail@plt+0x1a68>
   13000:	b	122d8 <__assert_fail@plt+0xdf8>
   13004:	ldr	r0, [sp, #96]	; 0x60
   13008:	sub	r8, r1, r6
   1300c:	mov	r2, r8
   13010:	add	r1, r0, r6
   13014:	bl	111a4 <memmove@plt>
   13018:	ldrd	r2, [sp, #48]	; 0x30
   1301c:	cmp	r6, r2
   13020:	sbcs	r3, r7, r3
   13024:	bge	122d8 <__assert_fail@plt+0xdf8>
   13028:	cmn	r8, #1
   1302c:	bne	12f64 <__assert_fail@plt+0x1a84>
   13030:	b	12f48 <__assert_fail@plt+0x1a68>
   13034:	ldr	r1, [sp, #24]
   13038:	mov	r0, #1
   1303c:	str	r3, [sp, #104]	; 0x68
   13040:	bl	15330 <__assert_fail@plt+0x3e50>
   13044:	ldr	r3, [sp, #80]	; 0x50
   13048:	cmp	r3, r0
   1304c:	ldr	r3, [sp, #104]	; 0x68
   13050:	beq	121c4 <__assert_fail@plt+0xce4>
   13054:	b	12c04 <__assert_fail@plt+0x1724>
   13058:	ldrd	r2, [sp, #24]
   1305c:	mov	r4, #1
   13060:	str	r4, [sp]
   13064:	subs	r2, r6, r2
   13068:	sbc	r3, r7, r3
   1306c:	mov	r0, #0
   13070:	bl	11288 <lseek64@plt>
   13074:	cmp	r0, #0
   13078:	sbcs	r3, r1, #0
   1307c:	mvnge	r3, #0
   13080:	movge	r4, r6
   13084:	movge	r5, r7
   13088:	strge	r3, [sp, #56]	; 0x38
   1308c:	bge	120b4 <__assert_fail@plt+0xbd4>
   13090:	bl	1139c <__errno_location@plt>
   13094:	ldr	r3, [pc, #708]	; 13360 <__assert_fail@plt+0x1e80>
   13098:	mov	r1, #3
   1309c:	ldr	r2, [r3, #300]	; 0x12c
   130a0:	ldr	r5, [r0]
   130a4:	mov	r0, #0
   130a8:	bl	183e0 <__assert_fail@plt+0x6f00>
   130ac:	mov	r1, r5
   130b0:	ldr	r2, [pc, #700]	; 13374 <__assert_fail@plt+0x1e94>
   130b4:	mov	r3, r0
   130b8:	mov	r0, r4
   130bc:	bl	112d0 <error@plt>
   130c0:	bl	1139c <__errno_location@plt>
   130c4:	ldr	r3, [r0]
   130c8:	cmp	r3, #29
   130cc:	moveq	r3, #0
   130d0:	streq	r3, [r0]
   130d4:	bl	1139c <__errno_location@plt>
   130d8:	mov	r2, #5
   130dc:	ldr	r1, [pc, #660]	; 13378 <__assert_fail@plt+0x1e98>
   130e0:	ldr	r4, [r0]
   130e4:	mov	r0, #0
   130e8:	bl	1121c <dcgettext@plt>
   130ec:	ldr	r3, [pc, #620]	; 13360 <__assert_fail@plt+0x1e80>
   130f0:	mov	r1, #3
   130f4:	ldr	r2, [r3, #300]	; 0x12c
   130f8:	mov	r5, r0
   130fc:	mov	r0, #0
   13100:	bl	183e0 <__assert_fail@plt+0x6f00>
   13104:	b	12dac <__assert_fail@plt+0x18cc>
   13108:	ldrd	r2, [sp, #40]	; 0x28
   1310c:	orrs	r3, r2, r3
   13110:	bne	122d8 <__assert_fail@plt+0xdf8>
   13114:	ldr	r3, [sp, #80]	; 0x50
   13118:	cmp	r3, #0
   1311c:	bne	12dc0 <__assert_fail@plt+0x18e0>
   13120:	mov	r6, fp
   13124:	b	12dc4 <__assert_fail@plt+0x18e4>
   13128:	ldrd	r8, [sp, #72]	; 0x48
   1312c:	mov	r4, #0
   13130:	mov	r5, #0
   13134:	subs	r8, r8, #1
   13138:	sbc	r9, r9, #0
   1313c:	mov	sl, #1
   13140:	mov	fp, #0
   13144:	b	120b4 <__assert_fail@plt+0xbd4>
   13148:	bl	1a864 <__assert_fail@plt+0x9384>
   1314c:	ldr	r3, [pc, #524]	; 13360 <__assert_fail@plt+0x1e80>
   13150:	ldrd	r8, [sp, #48]	; 0x30
   13154:	ldrd	r2, [r3, #96]	; 0x60
   13158:	strd	r2, [sp, #48]	; 0x30
   1315c:	orrs	r3, r2, r3
   13160:	beq	13264 <__assert_fail@plt+0x1d84>
   13164:	adds	r2, r8, sl
   13168:	adc	r3, r9, fp
   1316c:	ldrd	r4, [sp, #48]	; 0x30
   13170:	mov	r7, r3
   13174:	mov	r9, r3
   13178:	ldr	r3, [pc, #480]	; 13360 <__assert_fail@plt+0x1e80>
   1317c:	cmp	r4, r2
   13180:	mov	r6, r2
   13184:	ldr	r3, [r3, #64]	; 0x40
   13188:	mov	r8, r2
   1318c:	sbcs	r2, r5, r7
   13190:	movge	r4, #1
   13194:	movlt	r4, #0
   13198:	and	r3, r3, #53248	; 0xd000
   1319c:	cmp	r3, #32768	; 0x8000
   131a0:	movne	r4, #0
   131a4:	andeq	r4, r4, #1
   131a8:	cmp	r4, #0
   131ac:	bne	1322c <__assert_fail@plt+0x1d4c>
   131b0:	mov	r3, #2
   131b4:	str	r3, [sp]
   131b8:	mov	r2, #0
   131bc:	mov	r3, #0
   131c0:	mov	r0, r4
   131c4:	bl	11288 <lseek64@plt>
   131c8:	mov	r3, r1
   131cc:	cmp	r0, #0
   131d0:	sbcs	r3, r3, #0
   131d4:	strd	r0, [sp, #48]	; 0x30
   131d8:	blt	130d4 <__assert_fail@plt+0x1bf4>
   131dc:	cmp	r9, r1
   131e0:	cmpeq	r8, r0
   131e4:	mov	r2, r6
   131e8:	mov	r3, r7
   131ec:	mov	r6, r0
   131f0:	mov	r7, r1
   131f4:	beq	1322c <__assert_fail@plt+0x1d4c>
   131f8:	str	r4, [sp]
   131fc:	mov	r0, r4
   13200:	bl	11288 <lseek64@plt>
   13204:	mov	r5, r9
   13208:	cmp	r0, #0
   1320c:	sbcs	r3, r1, #0
   13210:	blt	130d4 <__assert_fail@plt+0x1bf4>
   13214:	mov	r3, r9
   13218:	cmp	r6, r8
   1321c:	sbcs	r3, r7, r3
   13220:	movlt	r2, r8
   13224:	movlt	r3, r9
   13228:	strdlt	r2, [sp, #48]	; 0x30
   1322c:	ldrd	r6, [sp, #48]	; 0x30
   13230:	mvn	r3, #-2147483648	; 0x80000000
   13234:	mvn	r2, #0
   13238:	subs	r6, r6, r8
   1323c:	sbc	r7, r7, r9
   13240:	adds	sl, sl, r6
   13244:	adc	fp, fp, r7
   13248:	cmp	fp, r3
   1324c:	cmpeq	sl, r2
   13250:	beq	13264 <__assert_fail@plt+0x1d84>
   13254:	cmp	sl, #0
   13258:	sbcs	r3, fp, #0
   1325c:	bge	12d38 <__assert_fail@plt+0x1858>
   13260:	b	130d4 <__assert_fail@plt+0x1bf4>
   13264:	bl	1139c <__errno_location@plt>
   13268:	mov	r3, #75	; 0x4b
   1326c:	str	r3, [r0]
   13270:	b	130d4 <__assert_fail@plt+0x1bf4>
   13274:	str	r3, [sp, #24]
   13278:	b	1246c <__assert_fail@plt+0xf8c>
   1327c:	mov	r2, #5
   13280:	ldr	r1, [pc, #244]	; 1337c <__assert_fail@plt+0x1e9c>
   13284:	mov	r0, #0
   13288:	bl	1121c <dcgettext@plt>
   1328c:	add	r2, sp, #112	; 0x70
   13290:	mov	r4, r0
   13294:	ldrd	r0, [sp, #32]
   13298:	bl	153a0 <__assert_fail@plt+0x3ec0>
   1329c:	bl	192d4 <__assert_fail@plt+0x7df4>
   132a0:	mov	r3, r4
   132a4:	ldr	r2, [pc, #212]	; 13380 <__assert_fail@plt+0x1ea0>
   132a8:	mov	r1, #75	; 0x4b
   132ac:	str	r0, [sp]
   132b0:	mov	r0, #1
   132b4:	bl	112d0 <error@plt>
   132b8:	ldr	r3, [sp, #100]	; 0x64
   132bc:	cmp	r3, #0
   132c0:	bne	132dc <__assert_fail@plt+0x1dfc>
   132c4:	b	132e4 <__assert_fail@plt+0x1e04>
   132c8:	ldrd	r2, [sp, #32]
   132cc:	cmp	fp, r3
   132d0:	cmpeq	sl, r2
   132d4:	bhi	122d8 <__assert_fail@plt+0xdf8>
   132d8:	bl	14308 <__assert_fail@plt+0x2e28>
   132dc:	adds	sl, sl, #1
   132e0:	adc	fp, fp, #0
   132e4:	ldrd	r2, [sp, #40]	; 0x28
   132e8:	orrs	r3, r2, r3
   132ec:	beq	132c8 <__assert_fail@plt+0x1de8>
   132f0:	b	122d8 <__assert_fail@plt+0xdf8>
   132f4:	bl	1139c <__errno_location@plt>
   132f8:	ldr	r3, [pc, #96]	; 13360 <__assert_fail@plt+0x1e80>
   132fc:	mov	r1, #3
   13300:	ldr	r2, [r3, #300]	; 0x12c
   13304:	ldr	r4, [r0]
   13308:	mov	r0, #0
   1330c:	bl	183e0 <__assert_fail@plt+0x6f00>
   13310:	mov	r1, r4
   13314:	ldr	r2, [pc, #88]	; 13374 <__assert_fail@plt+0x1e94>
   13318:	mov	r3, r0
   1331c:	mov	r0, r8
   13320:	bl	112d0 <error@plt>
   13324:	ldr	r3, [pc, #88]	; 13384 <__assert_fail@plt+0x1ea4>
   13328:	mov	r2, #996	; 0x3e4
   1332c:	ldr	r1, [pc, #84]	; 13388 <__assert_fail@plt+0x1ea8>
   13330:	ldr	r0, [pc, #84]	; 1338c <__assert_fail@plt+0x1eac>
   13334:	bl	114e0 <__assert_fail@plt>
   13338:	ldr	r4, [r4]
   1333c:	ldr	r2, [r8]
   13340:	mov	r1, #3
   13344:	mov	r0, #0
   13348:	b	12898 <__assert_fail@plt+0x13b8>
   1334c:	ldr	r3, [pc, #60]	; 13390 <__assert_fail@plt+0x1eb0>
   13350:	ldr	r2, [pc, #60]	; 13394 <__assert_fail@plt+0x1eb4>
   13354:	ldr	r1, [pc, #44]	; 13388 <__assert_fail@plt+0x1ea8>
   13358:	ldr	r0, [pc, #56]	; 13398 <__assert_fail@plt+0x1eb8>
   1335c:	bl	114e0 <__assert_fail@plt>
   13360:	andeq	lr, r2, r0, ror r3
   13364:	andeq	lr, r2, r4, ror #6
   13368:	strdeq	sp, [r1], -ip
   1336c:	andeq	sp, r1, ip, ror r4
   13370:			; <UNDEFINED> instruction: 0x0001d1bc
   13374:	andeq	ip, r1, r0, ror #15
   13378:	muleq	r1, r8, r4
   1337c:	andeq	sp, r1, r0, lsl #5
   13380:	strdeq	sp, [r1], -r4
   13384:	muleq	r1, r0, r5
   13388:			; <UNDEFINED> instruction: 0x0001c5b8
   1338c:			; <UNDEFINED> instruction: 0x0001d4b8
   13390:	andeq	ip, r1, r4, lsr #11
   13394:	andeq	r0, r0, r3, ror #6
   13398:	ldrdeq	sp, [r1], -ip
   1339c:	mov	fp, #0
   133a0:	mov	lr, #0
   133a4:	pop	{r1}		; (ldr r1, [sp], #4)
   133a8:	mov	r2, sp
   133ac:	push	{r2}		; (str r2, [sp, #-4]!)
   133b0:	push	{r0}		; (str r0, [sp, #-4]!)
   133b4:	ldr	ip, [pc, #16]	; 133cc <__assert_fail@plt+0x1eec>
   133b8:	push	{ip}		; (str ip, [sp, #-4]!)
   133bc:	ldr	r0, [pc, #12]	; 133d0 <__assert_fail@plt+0x1ef0>
   133c0:	ldr	r3, [pc, #12]	; 133d4 <__assert_fail@plt+0x1ef4>
   133c4:	bl	1130c <__libc_start_main@plt>
   133c8:	bl	114bc <abort@plt>
   133cc:	andeq	ip, r1, r0, lsl #8
   133d0:	strdeq	r1, [r1], -r0
   133d4:	andeq	ip, r1, r0, lsr #7
   133d8:	ldr	r3, [pc, #20]	; 133f4 <__assert_fail@plt+0x1f14>
   133dc:	ldr	r2, [pc, #20]	; 133f8 <__assert_fail@plt+0x1f18>
   133e0:	add	r3, pc, r3
   133e4:	ldr	r2, [r3, r2]
   133e8:	cmp	r2, #0
   133ec:	bxeq	lr
   133f0:	b	11324 <__gmon_start__@plt>
   133f4:	andeq	sl, r1, r8, lsl ip
   133f8:	andeq	r0, r0, r8, asr #2
   133fc:	ldr	r3, [pc, #28]	; 13420 <__assert_fail@plt+0x1f40>
   13400:	ldr	r0, [pc, #28]	; 13424 <__assert_fail@plt+0x1f44>
   13404:	sub	r3, r3, r0
   13408:	cmp	r3, #6
   1340c:	bxls	lr
   13410:	ldr	r3, [pc, #16]	; 13428 <__assert_fail@plt+0x1f48>
   13414:	cmp	r3, #0
   13418:	bxeq	lr
   1341c:	bx	r3
   13420:	andeq	lr, r2, r3, asr r3
   13424:	andeq	lr, r2, r0, asr r3
   13428:	andeq	r0, r0, r0
   1342c:	ldr	r1, [pc, #36]	; 13458 <__assert_fail@plt+0x1f78>
   13430:	ldr	r0, [pc, #36]	; 1345c <__assert_fail@plt+0x1f7c>
   13434:	sub	r1, r1, r0
   13438:	asr	r1, r1, #2
   1343c:	add	r1, r1, r1, lsr #31
   13440:	asrs	r1, r1, #1
   13444:	bxeq	lr
   13448:	ldr	r3, [pc, #16]	; 13460 <__assert_fail@plt+0x1f80>
   1344c:	cmp	r3, #0
   13450:	bxeq	lr
   13454:	bx	r3
   13458:	andeq	lr, r2, r0, asr r3
   1345c:	andeq	lr, r2, r0, asr r3
   13460:	andeq	r0, r0, r0
   13464:	push	{r4, lr}
   13468:	ldr	r4, [pc, #24]	; 13488 <__assert_fail@plt+0x1fa8>
   1346c:	ldrb	r3, [r4]
   13470:	cmp	r3, #0
   13474:	popne	{r4, pc}
   13478:	bl	133fc <__assert_fail@plt+0x1f1c>
   1347c:	mov	r3, #1
   13480:	strb	r3, [r4]
   13484:	pop	{r4, pc}
   13488:	andeq	lr, r2, ip, ror #6
   1348c:	ldr	r0, [pc, #40]	; 134bc <__assert_fail@plt+0x1fdc>
   13490:	ldr	r3, [r0]
   13494:	cmp	r3, #0
   13498:	bne	134a0 <__assert_fail@plt+0x1fc0>
   1349c:	b	1342c <__assert_fail@plt+0x1f4c>
   134a0:	ldr	r3, [pc, #24]	; 134c0 <__assert_fail@plt+0x1fe0>
   134a4:	cmp	r3, #0
   134a8:	beq	1349c <__assert_fail@plt+0x1fbc>
   134ac:	push	{r4, lr}
   134b0:	blx	r3
   134b4:	pop	{r4, lr}
   134b8:	b	1342c <__assert_fail@plt+0x1f4c>
   134bc:	andeq	sp, r2, r4, lsl pc
   134c0:	andeq	r0, r0, r0
   134c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134c8:	ldr	r4, [pc, #600]	; 13728 <__assert_fail@plt+0x2248>
   134cc:	ldm	r4, {r5, r6}
   134d0:	cmp	r5, #0
   134d4:	beq	13560 <__assert_fail@plt+0x2080>
   134d8:	cmp	r6, #0
   134dc:	sub	r1, r6, #1
   134e0:	beq	136f4 <__assert_fail@plt+0x2214>
   134e4:	ldr	r3, [pc, #576]	; 1372c <__assert_fail@plt+0x224c>
   134e8:	ldr	r8, [r4, #32]
   134ec:	ldr	r0, [r4, #28]
   134f0:	ldrb	r7, [r3]
   134f4:	ldr	ip, [r3, #4]
   134f8:	add	r2, r8, r6, lsl #2
   134fc:	add	r0, r0, r6
   13500:	b	1352c <__assert_fail@plt+0x204c>
   13504:	ldrb	r3, [ip, r3]
   13508:	cmp	r3, #0
   1350c:	strb	r3, [r0, #-1]!
   13510:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   13514:	str	r3, [r2, #-4]!
   13518:	ldrb	r3, [ip]
   1351c:	sub	r1, r1, #1
   13520:	cmn	r1, #1
   13524:	strb	r3, [r0]
   13528:	beq	136f4 <__assert_fail@plt+0x2214>
   1352c:	ldr	r3, [r2, #-4]
   13530:	cmp	r1, #0
   13534:	movne	lr, #0
   13538:	andeq	lr, r7, #1
   1353c:	add	r3, r3, #1
   13540:	cmp	lr, #0
   13544:	str	r3, [r2, #-4]
   13548:	beq	13504 <__assert_fail@plt+0x2024>
   1354c:	ldr	lr, [r8]
   13550:	add	lr, ip, lr
   13554:	ldrb	lr, [lr, #1]
   13558:	cmp	lr, #0
   1355c:	bne	13504 <__assert_fail@plt+0x2024>
   13560:	ldr	r8, [r4, #8]
   13564:	cmp	r8, #0
   13568:	bne	135dc <__assert_fail@plt+0x20fc>
   1356c:	ldr	r0, [r4, #12]
   13570:	bl	11354 <strlen@plt>
   13574:	mov	r7, r0
   13578:	ldr	r0, [r4, #20]
   1357c:	str	r7, [r4, #16]
   13580:	cmp	r0, #0
   13584:	moveq	r0, r8
   13588:	beq	13590 <__assert_fail@plt+0x20b0>
   1358c:	bl	11354 <strlen@plt>
   13590:	add	r3, r7, r6
   13594:	add	r3, r3, r0
   13598:	add	r1, r3, #1
   1359c:	cmp	r7, r1
   135a0:	str	r3, [r4, #8]
   135a4:	str	r0, [r4, #24]
   135a8:	bhi	136f0 <__assert_fail@plt+0x2210>
   135ac:	mov	r0, r5
   135b0:	bl	1a258 <__assert_fail@plt+0x8d78>
   135b4:	ldr	r5, [r4, #16]
   135b8:	ldr	r1, [r4, #12]
   135bc:	mov	r2, r5
   135c0:	mov	r6, r0
   135c4:	str	r0, [r4]
   135c8:	bl	111c8 <memcpy@plt>
   135cc:	ldr	r3, [pc, #344]	; 1372c <__assert_fail@plt+0x224c>
   135d0:	ldr	r9, [r4, #32]
   135d4:	ldr	r2, [r3, #4]
   135d8:	b	13630 <__assert_fail@plt+0x2150>
   135dc:	ldr	r3, [r4, #16]
   135e0:	add	r1, r8, #3
   135e4:	add	r6, r6, #1
   135e8:	cmp	r1, r3
   135ec:	add	r3, r8, #2
   135f0:	str	r6, [r4, #4]
   135f4:	str	r3, [r4, #8]
   135f8:	bcc	136f0 <__assert_fail@plt+0x2210>
   135fc:	mov	r0, r5
   13600:	bl	1a258 <__assert_fail@plt+0x8d78>
   13604:	ldr	r2, [pc, #288]	; 1372c <__assert_fail@plt+0x224c>
   13608:	ldr	r9, [r4, #32]
   1360c:	ldr	r3, [r4, #16]
   13610:	ldr	r2, [r2, #4]
   13614:	ldr	r1, [r9]
   13618:	add	r5, r3, #1
   1361c:	str	r5, [r4, #16]
   13620:	ldrb	r1, [r2, r1]
   13624:	mov	r6, r0
   13628:	str	r0, [r4]
   1362c:	strb	r1, [r0, r3]
   13630:	ldr	r7, [r4, #4]
   13634:	add	r5, r6, r5
   13638:	ldrb	r1, [r2]
   1363c:	mov	r0, r5
   13640:	mov	r2, r7
   13644:	str	r5, [r4, #28]
   13648:	bl	113c0 <memset@plt>
   1364c:	ldr	r1, [r4, #20]
   13650:	cmp	r1, #0
   13654:	beq	13664 <__assert_fail@plt+0x2184>
   13658:	add	r0, r5, r7
   1365c:	ldr	r2, [r4, #24]
   13660:	bl	111c8 <memcpy@plt>
   13664:	ldr	r3, [r4, #8]
   13668:	mov	r2, #0
   1366c:	mov	r0, r9
   13670:	strb	r2, [r6, r3]
   13674:	bl	15238 <__assert_fail@plt+0x3d58>
   13678:	mov	r1, #4
   1367c:	ldr	r0, [r4, #4]
   13680:	bl	1a760 <__assert_fail@plt+0x9280>
   13684:	ldr	r7, [r4, #36]	; 0x24
   13688:	cmp	r7, #0
   1368c:	mov	r6, r0
   13690:	str	r0, [r4, #32]
   13694:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13698:	cmp	r8, #0
   1369c:	bne	13714 <__assert_fail@plt+0x2234>
   136a0:	mov	r0, r7
   136a4:	bl	11354 <strlen@plt>
   136a8:	ldr	r8, [r4, #4]
   136ac:	mov	r1, r7
   136b0:	mov	r5, r0
   136b4:	ldr	r0, [r4, #28]
   136b8:	sub	r3, r8, r5
   136bc:	add	r0, r0, r3
   136c0:	mov	r2, r5
   136c4:	bl	111c8 <memcpy@plt>
   136c8:	cmp	r5, #0
   136cc:	add	r1, r6, r8, lsl #2
   136d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   136d4:	add	r2, r7, r5
   136d8:	ldrb	r3, [r2, #-1]!
   136dc:	sub	r3, r3, #48	; 0x30
   136e0:	cmp	r2, r7
   136e4:	str	r3, [r1, #-4]!
   136e8:	bne	136d8 <__assert_fail@plt+0x21f8>
   136ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136f0:	bl	1a864 <__assert_fail@plt+0x9384>
   136f4:	mov	r2, #5
   136f8:	ldr	r1, [pc, #48]	; 13730 <__assert_fail@plt+0x2250>
   136fc:	mov	r0, #0
   13700:	bl	1121c <dcgettext@plt>
   13704:	mov	r1, #0
   13708:	mov	r2, r0
   1370c:	mov	r0, #1
   13710:	bl	112d0 <error@plt>
   13714:	ldr	r3, [pc, #24]	; 13734 <__assert_fail@plt+0x2254>
   13718:	ldr	r2, [pc, #24]	; 13738 <__assert_fail@plt+0x2258>
   1371c:	ldr	r1, [pc, #24]	; 1373c <__assert_fail@plt+0x225c>
   13720:	ldr	r0, [pc, #24]	; 13740 <__assert_fail@plt+0x2260>
   13724:	bl	114e0 <__assert_fail@plt>
   13728:	andeq	lr, r2, r0, ror r3
   1372c:	andeq	lr, r2, r4, asr r1
   13730:	andeq	ip, r1, ip, asr #11
   13734:	andeq	ip, r1, r8, lsr #8
   13738:	muleq	r0, r9, r1
   1373c:			; <UNDEFINED> instruction: 0x0001c5b8
   13740:	andeq	ip, r1, r4, asr #11
   13744:	push	{r4, r5, r6, r7, r8, r9, lr}
   13748:	mov	r7, r0
   1374c:	ldr	r6, [pc, #1016]	; 13b4c <__assert_fail@plt+0x266c>
   13750:	sub	sp, sp, #116	; 0x74
   13754:	ldr	r0, [r6, #40]	; 0x28
   13758:	cmp	r0, #0
   1375c:	beq	13918 <__assert_fail@plt+0x2438>
   13760:	ldr	r0, [pc, #1000]	; 13b50 <__assert_fail@plt+0x2670>
   13764:	bl	112e8 <getenv@plt>
   13768:	ldr	r5, [pc, #996]	; 13b54 <__assert_fail@plt+0x2674>
   1376c:	mov	r2, #1
   13770:	mov	r1, r7
   13774:	cmp	r0, #0
   13778:	movne	r5, r0
   1377c:	ldr	r0, [pc, #980]	; 13b58 <__assert_fail@plt+0x2678>
   13780:	bl	11378 <setenv@plt>
   13784:	subs	r4, r0, #0
   13788:	bne	13b2c <__assert_fail@plt+0x264c>
   1378c:	ldrb	r3, [r6, #44]	; 0x2c
   13790:	cmp	r3, #0
   13794:	bne	138d8 <__assert_fail@plt+0x23f8>
   13798:	add	r0, sp, #8
   1379c:	bl	11414 <pipe@plt>
   137a0:	subs	r4, r0, #0
   137a4:	bne	13b1c <__assert_fail@plt+0x263c>
   137a8:	bl	11450 <fork@plt>
   137ac:	subs	r7, r0, #0
   137b0:	beq	13804 <__assert_fail@plt+0x2324>
   137b4:	cmn	r7, #1
   137b8:	beq	13b3c <__assert_fail@plt+0x265c>
   137bc:	ldr	r0, [sp, #8]
   137c0:	bl	114c8 <close@plt>
   137c4:	cmp	r0, #0
   137c8:	bne	13ad0 <__assert_fail@plt+0x25f0>
   137cc:	ldr	r3, [r6, #152]	; 0x98
   137d0:	ldr	r2, [r6, #292]	; 0x124
   137d4:	str	r7, [r6, #288]	; 0x120
   137d8:	cmp	r3, r2
   137dc:	beq	13a48 <__assert_fail@plt+0x2568>
   137e0:	ldr	r1, [r6, #156]	; 0x9c
   137e4:	ldr	r0, [sp, #12]
   137e8:	add	r2, r3, #1
   137ec:	str	r0, [r1, r3, lsl #2]
   137f0:	ldr	r8, [sp, #12]
   137f4:	str	r2, [r6, #152]	; 0x98
   137f8:	mov	r0, r8
   137fc:	add	sp, sp, #116	; 0x74
   13800:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13804:	ldr	r3, [r6, #152]	; 0x98
   13808:	cmp	r3, #0
   1380c:	beq	13834 <__assert_fail@plt+0x2354>
   13810:	ldr	r3, [r6, #156]	; 0x9c
   13814:	ldr	r0, [r3, r4, lsl #2]
   13818:	bl	114c8 <close@plt>
   1381c:	cmp	r0, #0
   13820:	bne	13a68 <__assert_fail@plt+0x2588>
   13824:	ldr	r3, [r6, #152]	; 0x98
   13828:	add	r4, r4, #1
   1382c:	cmp	r4, r3
   13830:	bcc	13810 <__assert_fail@plt+0x2330>
   13834:	ldr	r0, [sp, #12]
   13838:	bl	114c8 <close@plt>
   1383c:	subs	r4, r0, #0
   13840:	bne	13ae0 <__assert_fail@plt+0x2600>
   13844:	ldr	r0, [sp, #8]
   13848:	cmp	r0, #0
   1384c:	beq	13870 <__assert_fail@plt+0x2390>
   13850:	mov	r1, r4
   13854:	bl	11228 <dup2@plt>
   13858:	subs	r7, r0, #0
   1385c:	bne	13a78 <__assert_fail@plt+0x2598>
   13860:	ldr	r0, [sp, #8]
   13864:	bl	114c8 <close@plt>
   13868:	cmp	r0, #0
   1386c:	bne	139e4 <__assert_fail@plt+0x2504>
   13870:	mov	r2, #0
   13874:	ldr	r1, [pc, #736]	; 13b5c <__assert_fail@plt+0x267c>
   13878:	mov	r0, #2
   1387c:	bl	11198 <sigprocmask@plt>
   13880:	mov	r0, r5
   13884:	bl	14eec <__assert_fail@plt+0x3a0c>
   13888:	ldr	r4, [r6, #40]	; 0x28
   1388c:	mov	r6, #0
   13890:	mov	r3, r4
   13894:	ldr	r2, [pc, #708]	; 13b60 <__assert_fail@plt+0x2680>
   13898:	str	r6, [sp]
   1389c:	mov	r1, r0
   138a0:	mov	r0, r5
   138a4:	bl	1145c <execl@plt>
   138a8:	bl	1139c <__errno_location@plt>
   138ac:	mov	r2, #5
   138b0:	ldr	r1, [pc, #684]	; 13b64 <__assert_fail@plt+0x2684>
   138b4:	ldr	r7, [r0]
   138b8:	mov	r0, r6
   138bc:	bl	1121c <dcgettext@plt>
   138c0:	str	r4, [sp]
   138c4:	mov	r1, r7
   138c8:	mov	r3, r5
   138cc:	mov	r2, r0
   138d0:	mov	r0, #1
   138d4:	bl	112d0 <error@plt>
   138d8:	ldr	r3, [pc, #648]	; 13b68 <__assert_fail@plt+0x2688>
   138dc:	mov	r2, #5
   138e0:	ldr	r1, [pc, #644]	; 13b6c <__assert_fail@plt+0x268c>
   138e4:	ldr	r8, [r3]
   138e8:	bl	1121c <dcgettext@plt>
   138ec:	mov	r2, r7
   138f0:	mov	r1, #3
   138f4:	mov	r9, r0
   138f8:	mov	r0, r4
   138fc:	bl	183e0 <__assert_fail@plt+0x6f00>
   13900:	mov	r2, r9
   13904:	mov	r1, #1
   13908:	mov	r3, r0
   1390c:	mov	r0, r8
   13910:	bl	113f0 <__fprintf_chk@plt>
   13914:	b	13798 <__assert_fail@plt+0x22b8>
   13918:	ldrb	r3, [r6, #44]	; 0x2c
   1391c:	cmp	r3, #0
   13920:	bne	13a0c <__assert_fail@plt+0x252c>
   13924:	ldr	r2, [pc, #580]	; 13b70 <__assert_fail@plt+0x2690>
   13928:	mov	r1, #65	; 0x41
   1392c:	mov	r0, r7
   13930:	bl	1513c <__assert_fail@plt+0x3c5c>
   13934:	subs	r8, r0, #0
   13938:	blt	137f8 <__assert_fail@plt+0x2318>
   1393c:	add	r2, sp, #8
   13940:	mov	r1, r8
   13944:	mov	r0, #3
   13948:	bl	11264 <__fxstat64@plt>
   1394c:	subs	r9, r0, #0
   13950:	bne	13af0 <__assert_fail@plt+0x2610>
   13954:	ldrd	r4, [r6, #144]	; 0x90
   13958:	ldrd	r2, [sp, #104]	; 0x68
   1395c:	cmp	r5, r3
   13960:	cmpeq	r4, r2
   13964:	bne	1397c <__assert_fail@plt+0x249c>
   13968:	ldrd	r4, [r6, #48]	; 0x30
   1396c:	ldrd	r2, [sp, #8]
   13970:	cmp	r5, r3
   13974:	cmpeq	r4, r2
   13978:	beq	13aa0 <__assert_fail@plt+0x25c0>
   1397c:	mov	r2, #0
   13980:	mov	r3, #0
   13984:	mov	r0, r8
   13988:	bl	111ec <ftruncate64@plt>
   1398c:	cmp	r0, #0
   13990:	beq	137f8 <__assert_fail@plt+0x2318>
   13994:	ldr	r3, [sp, #24]
   13998:	and	r3, r3, #61440	; 0xf000
   1399c:	cmp	r3, #32768	; 0x8000
   139a0:	bne	137f8 <__assert_fail@plt+0x2318>
   139a4:	bl	1139c <__errno_location@plt>
   139a8:	mov	r2, #5
   139ac:	ldr	r1, [pc, #448]	; 13b74 <__assert_fail@plt+0x2694>
   139b0:	ldr	r4, [r0]
   139b4:	mov	r0, #0
   139b8:	bl	1121c <dcgettext@plt>
   139bc:	mov	r2, r7
   139c0:	mov	r1, #3
   139c4:	mov	r5, r0
   139c8:	mov	r0, #0
   139cc:	bl	183e0 <__assert_fail@plt+0x6f00>
   139d0:	mov	r3, r0
   139d4:	mov	r2, r5
   139d8:	mov	r1, r4
   139dc:	mov	r0, #1
   139e0:	bl	112d0 <error@plt>
   139e4:	bl	1139c <__errno_location@plt>
   139e8:	ldr	r1, [pc, #392]	; 13b78 <__assert_fail@plt+0x2698>
   139ec:	mov	r2, #5
   139f0:	ldr	r4, [r0]
   139f4:	mov	r0, #0
   139f8:	bl	1121c <dcgettext@plt>
   139fc:	mov	r1, r4
   13a00:	mov	r2, r0
   13a04:	mov	r0, #1
   13a08:	bl	112d0 <error@plt>
   13a0c:	ldr	r3, [pc, #340]	; 13b68 <__assert_fail@plt+0x2688>
   13a10:	mov	r2, #5
   13a14:	ldr	r1, [pc, #352]	; 13b7c <__assert_fail@plt+0x269c>
   13a18:	ldr	r4, [r3]
   13a1c:	bl	1121c <dcgettext@plt>
   13a20:	mov	r1, r7
   13a24:	mov	r5, r0
   13a28:	mov	r0, #4
   13a2c:	bl	17964 <__assert_fail@plt+0x6484>
   13a30:	mov	r2, r5
   13a34:	mov	r1, #1
   13a38:	mov	r3, r0
   13a3c:	mov	r0, r4
   13a40:	bl	113f0 <__fprintf_chk@plt>
   13a44:	b	13924 <__assert_fail@plt+0x2444>
   13a48:	ldr	r1, [pc, #304]	; 13b80 <__assert_fail@plt+0x26a0>
   13a4c:	mov	r2, #4
   13a50:	ldr	r0, [r6, #156]	; 0x9c
   13a54:	bl	1a3cc <__assert_fail@plt+0x8eec>
   13a58:	ldr	r3, [r6, #152]	; 0x98
   13a5c:	mov	r1, r0
   13a60:	str	r0, [r6, #156]	; 0x9c
   13a64:	b	137e4 <__assert_fail@plt+0x2304>
   13a68:	bl	1139c <__errno_location@plt>
   13a6c:	mov	r2, #5
   13a70:	ldr	r1, [pc, #268]	; 13b84 <__assert_fail@plt+0x26a4>
   13a74:	b	139f0 <__assert_fail@plt+0x2510>
   13a78:	bl	1139c <__errno_location@plt>
   13a7c:	ldr	r1, [pc, #260]	; 13b88 <__assert_fail@plt+0x26a8>
   13a80:	mov	r2, #5
   13a84:	ldr	r5, [r0]
   13a88:	mov	r0, r4
   13a8c:	bl	1121c <dcgettext@plt>
   13a90:	mov	r1, r5
   13a94:	mov	r2, r0
   13a98:	mov	r0, #1
   13a9c:	bl	112d0 <error@plt>
   13aa0:	mov	r2, #5
   13aa4:	ldr	r1, [pc, #224]	; 13b8c <__assert_fail@plt+0x26ac>
   13aa8:	bl	1121c <dcgettext@plt>
   13aac:	mov	r1, r7
   13ab0:	mov	r4, r0
   13ab4:	mov	r0, #4
   13ab8:	bl	17964 <__assert_fail@plt+0x6484>
   13abc:	mov	r2, r4
   13ac0:	mov	r1, r9
   13ac4:	mov	r3, r0
   13ac8:	mov	r0, #1
   13acc:	bl	112d0 <error@plt>
   13ad0:	bl	1139c <__errno_location@plt>
   13ad4:	mov	r2, #5
   13ad8:	ldr	r1, [pc, #176]	; 13b90 <__assert_fail@plt+0x26b0>
   13adc:	b	13a84 <__assert_fail@plt+0x25a4>
   13ae0:	bl	1139c <__errno_location@plt>
   13ae4:	mov	r2, #5
   13ae8:	ldr	r1, [pc, #164]	; 13b94 <__assert_fail@plt+0x26b4>
   13aec:	b	139f0 <__assert_fail@plt+0x2510>
   13af0:	bl	1139c <__errno_location@plt>
   13af4:	mov	r2, #5
   13af8:	ldr	r1, [pc, #152]	; 13b98 <__assert_fail@plt+0x26b8>
   13afc:	ldr	r4, [r0]
   13b00:	mov	r0, #0
   13b04:	bl	1121c <dcgettext@plt>
   13b08:	mov	r1, r7
   13b0c:	mov	r5, r0
   13b10:	mov	r0, #4
   13b14:	bl	17964 <__assert_fail@plt+0x6484>
   13b18:	b	139d0 <__assert_fail@plt+0x24f0>
   13b1c:	bl	1139c <__errno_location@plt>
   13b20:	mov	r2, #5
   13b24:	ldr	r1, [pc, #112]	; 13b9c <__assert_fail@plt+0x26bc>
   13b28:	b	139f0 <__assert_fail@plt+0x2510>
   13b2c:	bl	1139c <__errno_location@plt>
   13b30:	mov	r2, #5
   13b34:	ldr	r1, [pc, #100]	; 13ba0 <__assert_fail@plt+0x26c0>
   13b38:	b	139f0 <__assert_fail@plt+0x2510>
   13b3c:	bl	1139c <__errno_location@plt>
   13b40:	mov	r2, #5
   13b44:	ldr	r1, [pc, #88]	; 13ba4 <__assert_fail@plt+0x26c4>
   13b48:	b	13a84 <__assert_fail@plt+0x25a4>
   13b4c:	andeq	lr, r2, r0, ror r3
   13b50:	andeq	ip, r1, r8, asr r6
   13b54:	andeq	ip, r1, ip, ror #11
   13b58:	andeq	ip, r1, r0, ror #12
   13b5c:	andeq	lr, r2, r0, lsl r4
   13b60:	andeq	ip, r1, r0, lsl r7
   13b64:	andeq	ip, r1, r4, lsl r7
   13b68:	andeq	lr, r2, r4, ror #6
   13b6c:	muleq	r1, r0, r6
   13b70:			; <UNDEFINED> instruction: 0x000001b6
   13b74:	andeq	ip, r1, r0, asr #12
   13b78:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13b7c:	strdeq	ip, [r1], -r4
   13b80:	muleq	r2, r4, r4
   13b84:	andeq	ip, r1, r0, asr #13
   13b88:	andeq	ip, r1, r8, ror #13
   13b8c:	andeq	ip, r1, ip, lsl r6
   13b90:	andeq	ip, r1, r0, asr r7
   13b94:	ldrdeq	ip, [r1], -r4
   13b98:	andeq	ip, r1, r8, lsl #12
   13b9c:	andeq	ip, r1, r8, lsr #13
   13ba0:	andeq	ip, r1, r8, ror #12
   13ba4:	andeq	ip, r1, r8, lsr r7
   13ba8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bac:	add	r7, r0, r1, lsl #4
   13bb0:	ldr	ip, [r7, #4]
   13bb4:	cmp	ip, #0
   13bb8:	movge	r8, #0
   13bbc:	blt	13bc8 <__assert_fail@plt+0x26e8>
   13bc0:	mov	r0, r8
   13bc4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bc8:	cmp	r1, #0
   13bcc:	subeq	r4, r2, #1
   13bd0:	subne	r4, r1, #1
   13bd4:	cmn	ip, #1
   13bd8:	mov	sl, r2
   13bdc:	mov	r5, r0
   13be0:	mov	r6, r1
   13be4:	mov	r8, #0
   13be8:	beq	13c6c <__assert_fail@plt+0x278c>
   13bec:	ldr	r1, [pc, #320]	; 13d34 <__assert_fail@plt+0x2854>
   13bf0:	ldr	r0, [r7]
   13bf4:	bl	1513c <__assert_fail@plt+0x3c5c>
   13bf8:	cmp	r0, #0
   13bfc:	bge	13c7c <__assert_fail@plt+0x279c>
   13c00:	bl	1139c <__errno_location@plt>
   13c04:	ldr	r8, [r0]
   13c08:	mov	r9, r0
   13c0c:	sub	r2, r8, #23
   13c10:	cmp	r2, #1
   13c14:	bls	13c30 <__assert_fail@plt+0x2750>
   13c18:	b	13cd8 <__assert_fail@plt+0x27f8>
   13c1c:	cmp	r4, #0
   13c20:	subne	r4, r4, #1
   13c24:	subeq	r4, sl, #1
   13c28:	cmp	r4, r6
   13c2c:	beq	13cb4 <__assert_fail@plt+0x27d4>
   13c30:	add	fp, r5, r4, lsl #4
   13c34:	ldr	r0, [fp, #4]
   13c38:	cmp	r0, #0
   13c3c:	blt	13c1c <__assert_fail@plt+0x273c>
   13c40:	ldr	r0, [fp, #8]
   13c44:	bl	1509c <__assert_fail@plt+0x3bbc>
   13c48:	cmp	r0, #0
   13c4c:	bne	13ce0 <__assert_fail@plt+0x2800>
   13c50:	mvn	r3, #1
   13c54:	str	r3, [fp, #4]
   13c58:	ldr	ip, [r7, #4]
   13c5c:	str	r0, [fp, #8]
   13c60:	cmn	ip, #1
   13c64:	mov	r8, #1
   13c68:	bne	13bec <__assert_fail@plt+0x270c>
   13c6c:	ldr	r0, [r7]
   13c70:	bl	13744 <__assert_fail@plt+0x2264>
   13c74:	cmp	r0, #0
   13c78:	blt	13c00 <__assert_fail@plt+0x2720>
   13c7c:	str	r0, [r7, #4]
   13c80:	ldr	r1, [pc, #176]	; 13d38 <__assert_fail@plt+0x2858>
   13c84:	bl	11138 <fdopen@plt>
   13c88:	cmp	r0, #0
   13c8c:	mov	r4, r0
   13c90:	str	r0, [r7, #8]
   13c94:	beq	13d08 <__assert_fail@plt+0x2828>
   13c98:	ldr	r3, [pc, #156]	; 13d3c <__assert_fail@plt+0x285c>
   13c9c:	mov	r1, #0
   13ca0:	mov	r0, r8
   13ca4:	ldr	r2, [r3, #288]	; 0x120
   13ca8:	str	r1, [r3, #288]	; 0x120
   13cac:	str	r2, [r7, #12]
   13cb0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb4:	ldr	r2, [r5, r4, lsl #4]
   13cb8:	mov	r1, #3
   13cbc:	mov	r0, #0
   13cc0:	bl	183e0 <__assert_fail@plt+0x6f00>
   13cc4:	mov	r1, r8
   13cc8:	ldr	r2, [pc, #112]	; 13d40 <__assert_fail@plt+0x2860>
   13ccc:	mov	r3, r0
   13cd0:	mov	r0, #1
   13cd4:	bl	112d0 <error@plt>
   13cd8:	ldr	r2, [r5, r6, lsl #4]
   13cdc:	b	13cb8 <__assert_fail@plt+0x27d8>
   13ce0:	ldr	r2, [fp]
   13ce4:	mov	r1, #3
   13ce8:	mov	r0, #0
   13cec:	ldr	r4, [r9]
   13cf0:	bl	183e0 <__assert_fail@plt+0x6f00>
   13cf4:	mov	r1, r4
   13cf8:	ldr	r2, [pc, #64]	; 13d40 <__assert_fail@plt+0x2860>
   13cfc:	mov	r3, r0
   13d00:	mov	r0, #1
   13d04:	bl	112d0 <error@plt>
   13d08:	bl	1139c <__errno_location@plt>
   13d0c:	ldr	r2, [r5, r6, lsl #4]
   13d10:	mov	r1, #3
   13d14:	ldr	r5, [r0]
   13d18:	mov	r0, r4
   13d1c:	bl	183e0 <__assert_fail@plt+0x6f00>
   13d20:	mov	r1, r5
   13d24:	ldr	r2, [pc, #20]	; 13d40 <__assert_fail@plt+0x2860>
   13d28:	mov	r3, r0
   13d2c:	mov	r0, #1
   13d30:	bl	112d0 <error@plt>
   13d34:	andeq	r0, r0, r1, lsl #24
   13d38:	andeq	ip, r1, ip, ror #14
   13d3c:	andeq	lr, r2, r0, ror r3
   13d40:	andeq	ip, r1, r0, ror #15
   13d44:	push	{r4, r5, r6, r7, lr}
   13d48:	subs	r4, r0, #0
   13d4c:	sub	sp, sp, #36	; 0x24
   13d50:	mov	r5, r1
   13d54:	mov	r7, r2
   13d58:	mov	r6, r3
   13d5c:	beq	13ed0 <__assert_fail@plt+0x29f0>
   13d60:	bl	1509c <__assert_fail@plt+0x3bbc>
   13d64:	cmp	r0, #0
   13d68:	bne	13e70 <__assert_fail@plt+0x2990>
   13d6c:	cmp	r5, #0
   13d70:	blt	13dc0 <__assert_fail@plt+0x28e0>
   13d74:	ldr	r2, [pc, #616]	; 13fe4 <__assert_fail@plt+0x2b04>
   13d78:	ldr	r4, [r2, #152]	; 0x98
   13d7c:	cmp	r4, #0
   13d80:	beq	13dc0 <__assert_fail@plt+0x28e0>
   13d84:	ldr	r1, [r2, #156]	; 0x9c
   13d88:	ldr	r3, [r1]
   13d8c:	cmp	r5, r3
   13d90:	addne	r0, r1, #4
   13d94:	movne	r3, #0
   13d98:	bne	13db4 <__assert_fail@plt+0x28d4>
   13d9c:	b	13eb8 <__assert_fail@plt+0x29d8>
   13da0:	mov	ip, r0
   13da4:	add	r0, r0, #4
   13da8:	ldr	lr, [ip]
   13dac:	cmp	r5, lr
   13db0:	beq	13ebc <__assert_fail@plt+0x29dc>
   13db4:	add	r3, r3, #1
   13db8:	cmp	r3, r4
   13dbc:	bne	13da0 <__assert_fail@plt+0x28c0>
   13dc0:	cmp	r7, #0
   13dc4:	ble	13e68 <__assert_fail@plt+0x2988>
   13dc8:	add	r1, sp, #32
   13dcc:	mov	r4, #0
   13dd0:	mov	r0, r7
   13dd4:	str	r4, [r1, #-24]!	; 0xffffffe8
   13dd8:	mov	r2, r4
   13ddc:	bl	11294 <waitpid@plt>
   13de0:	cmn	r0, #1
   13de4:	beq	13f30 <__assert_fail@plt+0x2a50>
   13de8:	ldr	r2, [sp, #8]
   13dec:	and	r4, r2, #127	; 0x7f
   13df0:	add	r3, r4, #1
   13df4:	sxtb	r3, r3
   13df8:	cmp	r3, #1
   13dfc:	ble	13f60 <__assert_fail@plt+0x2a80>
   13e00:	cmp	r4, #13
   13e04:	beq	13e68 <__assert_fail@plt+0x2988>
   13e08:	add	r5, sp, #12
   13e0c:	mov	r1, r5
   13e10:	mov	r0, r4
   13e14:	bl	196a0 <__assert_fail@plt+0x81c0>
   13e18:	cmp	r0, #0
   13e1c:	bne	13f14 <__assert_fail@plt+0x2a34>
   13e20:	mov	r2, #5
   13e24:	ldr	r1, [pc, #444]	; 13fe8 <__assert_fail@plt+0x2b08>
   13e28:	mov	r0, #0
   13e2c:	bl	1121c <dcgettext@plt>
   13e30:	mov	r2, r6
   13e34:	mov	r1, #3
   13e38:	mov	r7, r0
   13e3c:	mov	r0, #0
   13e40:	bl	183e0 <__assert_fail@plt+0x6f00>
   13e44:	ldr	r3, [pc, #408]	; 13fe4 <__assert_fail@plt+0x2b04>
   13e48:	str	r5, [sp]
   13e4c:	mov	r2, r7
   13e50:	ldr	r3, [r3, #40]	; 0x28
   13e54:	mov	r1, #0
   13e58:	str	r3, [sp, #4]
   13e5c:	mov	r3, r0
   13e60:	add	r0, r4, #128	; 0x80
   13e64:	bl	112d0 <error@plt>
   13e68:	add	sp, sp, #36	; 0x24
   13e6c:	pop	{r4, r5, r6, r7, pc}
   13e70:	bl	1139c <__errno_location@plt>
   13e74:	ldr	r3, [pc, #360]	; 13fe4 <__assert_fail@plt+0x2b04>
   13e78:	ldr	r3, [r3, #40]	; 0x28
   13e7c:	ldr	r4, [r0]
   13e80:	adds	r0, r3, #0
   13e84:	movne	r0, #1
   13e88:	cmp	r4, #32
   13e8c:	movne	r0, #0
   13e90:	cmp	r0, #0
   13e94:	bne	13d6c <__assert_fail@plt+0x288c>
   13e98:	mov	r2, r6
   13e9c:	mov	r1, #3
   13ea0:	bl	183e0 <__assert_fail@plt+0x6f00>
   13ea4:	mov	r1, r4
   13ea8:	ldr	r2, [pc, #316]	; 13fec <__assert_fail@plt+0x2b0c>
   13eac:	mov	r3, r0
   13eb0:	mov	r0, #1
   13eb4:	bl	112d0 <error@plt>
   13eb8:	mov	ip, r1
   13ebc:	sub	r4, r4, #1
   13ec0:	str	r4, [r2, #152]	; 0x98
   13ec4:	ldr	r3, [r1, r4, lsl #2]
   13ec8:	str	r3, [ip]
   13ecc:	b	13dc0 <__assert_fail@plt+0x28e0>
   13ed0:	cmp	r1, #0
   13ed4:	blt	13dc0 <__assert_fail@plt+0x28e0>
   13ed8:	mov	r0, r5
   13edc:	bl	114c8 <close@plt>
   13ee0:	cmp	r0, #0
   13ee4:	bge	13d74 <__assert_fail@plt+0x2894>
   13ee8:	bl	1139c <__errno_location@plt>
   13eec:	mov	r2, r6
   13ef0:	mov	r1, #3
   13ef4:	ldr	r5, [r0]
   13ef8:	mov	r0, r4
   13efc:	bl	183e0 <__assert_fail@plt+0x6f00>
   13f00:	mov	r1, r5
   13f04:	ldr	r2, [pc, #224]	; 13fec <__assert_fail@plt+0x2b0c>
   13f08:	mov	r3, r0
   13f0c:	mov	r0, #1
   13f10:	bl	112d0 <error@plt>
   13f14:	str	r4, [sp]
   13f18:	ldr	r3, [pc, #208]	; 13ff0 <__assert_fail@plt+0x2b10>
   13f1c:	mov	r2, #19
   13f20:	mov	r1, #1
   13f24:	mov	r0, r5
   13f28:	bl	113a8 <__sprintf_chk@plt>
   13f2c:	b	13e20 <__assert_fail@plt+0x2940>
   13f30:	bl	1139c <__errno_location@plt>
   13f34:	ldr	r5, [r0]
   13f38:	cmp	r5, #10
   13f3c:	beq	13de8 <__assert_fail@plt+0x2908>
   13f40:	mov	r2, #5
   13f44:	ldr	r1, [pc, #168]	; 13ff4 <__assert_fail@plt+0x2b14>
   13f48:	mov	r0, r4
   13f4c:	bl	1121c <dcgettext@plt>
   13f50:	mov	r1, r5
   13f54:	mov	r2, r0
   13f58:	mov	r0, #1
   13f5c:	bl	112d0 <error@plt>
   13f60:	cmp	r4, #0
   13f64:	bne	13fc0 <__assert_fail@plt+0x2ae0>
   13f68:	asr	r2, r2, #8
   13f6c:	ands	r5, r2, #255	; 0xff
   13f70:	beq	13e68 <__assert_fail@plt+0x2988>
   13f74:	mov	r2, #5
   13f78:	ldr	r1, [pc, #120]	; 13ff8 <__assert_fail@plt+0x2b18>
   13f7c:	mov	r0, r4
   13f80:	bl	1121c <dcgettext@plt>
   13f84:	mov	r2, r6
   13f88:	mov	r1, #3
   13f8c:	mov	r7, r0
   13f90:	mov	r0, r4
   13f94:	bl	183e0 <__assert_fail@plt+0x6f00>
   13f98:	ldr	r3, [pc, #68]	; 13fe4 <__assert_fail@plt+0x2b04>
   13f9c:	str	r5, [sp]
   13fa0:	mov	r2, r7
   13fa4:	ldr	r3, [r3, #40]	; 0x28
   13fa8:	mov	r1, r4
   13fac:	str	r3, [sp, #4]
   13fb0:	mov	r3, r0
   13fb4:	mov	r0, r5
   13fb8:	bl	112d0 <error@plt>
   13fbc:	b	13e68 <__assert_fail@plt+0x2988>
   13fc0:	mov	r2, #5
   13fc4:	ldr	r1, [pc, #48]	; 13ffc <__assert_fail@plt+0x2b1c>
   13fc8:	mov	r0, #0
   13fcc:	bl	1121c <dcgettext@plt>
   13fd0:	ldr	r3, [sp, #8]
   13fd4:	mov	r1, #0
   13fd8:	mov	r2, r0
   13fdc:	mov	r0, #1
   13fe0:	bl	112d0 <error@plt>
   13fe4:	andeq	lr, r2, r0, ror r3
   13fe8:	muleq	r1, r0, r7
   13fec:	andeq	ip, r1, r0, ror #15
   13ff0:	andeq	ip, r1, ip, lsl #15
   13ff4:	andeq	ip, r1, r0, ror r7
   13ff8:			; <UNDEFINED> instruction: 0x0001c7bc
   13ffc:	andeq	ip, r1, r4, ror #15
   14000:	cmp	r0, #0
   14004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14008:	mov	r6, r1
   1400c:	sub	sp, sp, #36	; 0x24
   14010:	mov	r5, r2
   14014:	beq	141cc <__assert_fail@plt+0x2cec>
   14018:	cmp	r1, #0
   1401c:	cmpeq	r2, #0
   14020:	ldr	r4, [pc, #704]	; 142e8 <__assert_fail@plt+0x2e08>
   14024:	bne	14034 <__assert_fail@plt+0x2b54>
   14028:	ldrb	r3, [r4, #296]	; 0x128
   1402c:	cmp	r3, #0
   14030:	bne	141c0 <__assert_fail@plt+0x2ce0>
   14034:	ldr	r7, [pc, #688]	; 142ec <__assert_fail@plt+0x2e0c>
   14038:	ldr	sl, [r4, #288]	; 0x120
   1403c:	ldr	r8, [r4]
   14040:	ldr	r9, [r7, #8]
   14044:	cmp	r9, #0
   14048:	blt	140a4 <__assert_fail@plt+0x2bc4>
   1404c:	mov	r0, r9
   14050:	bl	114c8 <close@plt>
   14054:	cmp	r0, #0
   14058:	blt	142b8 <__assert_fail@plt+0x2dd8>
   1405c:	ldr	ip, [r4, #152]	; 0x98
   14060:	cmp	ip, #0
   14064:	beq	140a4 <__assert_fail@plt+0x2bc4>
   14068:	ldr	lr, [r4, #156]	; 0x9c
   1406c:	ldr	r3, [lr]
   14070:	cmp	r9, r3
   14074:	addne	r2, lr, #4
   14078:	movne	r3, #0
   1407c:	bne	14098 <__assert_fail@plt+0x2bb8>
   14080:	b	141d8 <__assert_fail@plt+0x2cf8>
   14084:	mov	r1, r2
   14088:	add	r2, r2, #4
   1408c:	ldr	r0, [r1]
   14090:	cmp	r9, r0
   14094:	beq	141dc <__assert_fail@plt+0x2cfc>
   14098:	add	r3, r3, #1
   1409c:	cmp	ip, r3
   140a0:	bne	14084 <__assert_fail@plt+0x2ba4>
   140a4:	cmp	sl, #0
   140a8:	ble	14148 <__assert_fail@plt+0x2c68>
   140ac:	add	r1, sp, #32
   140b0:	mov	r9, #0
   140b4:	mov	r0, sl
   140b8:	str	r9, [r1, #-24]!	; 0xffffffe8
   140bc:	mov	r2, r9
   140c0:	bl	11294 <waitpid@plt>
   140c4:	cmn	r0, #1
   140c8:	beq	141f8 <__assert_fail@plt+0x2d18>
   140cc:	ldr	r2, [sp, #8]
   140d0:	and	r9, r2, #127	; 0x7f
   140d4:	add	r3, r9, #1
   140d8:	sxtb	r3, r3
   140dc:	cmp	r3, #1
   140e0:	ble	14228 <__assert_fail@plt+0x2d48>
   140e4:	cmp	r9, #13
   140e8:	beq	14148 <__assert_fail@plt+0x2c68>
   140ec:	add	sl, sp, #12
   140f0:	mov	r1, sl
   140f4:	mov	r0, r9
   140f8:	bl	196a0 <__assert_fail@plt+0x81c0>
   140fc:	cmp	r0, #0
   14100:	bne	14284 <__assert_fail@plt+0x2da4>
   14104:	mov	r2, #5
   14108:	ldr	r1, [pc, #480]	; 142f0 <__assert_fail@plt+0x2e10>
   1410c:	mov	r0, #0
   14110:	bl	1121c <dcgettext@plt>
   14114:	mov	r2, r8
   14118:	mov	r1, #3
   1411c:	mov	fp, r0
   14120:	mov	r0, #0
   14124:	bl	183e0 <__assert_fail@plt+0x6f00>
   14128:	ldr	r3, [r4, #40]	; 0x28
   1412c:	mov	r2, fp
   14130:	str	r3, [sp, #4]
   14134:	str	sl, [sp]
   14138:	mov	r1, #0
   1413c:	mov	r3, r0
   14140:	add	r0, r9, #128	; 0x80
   14144:	bl	112d0 <error@plt>
   14148:	bl	134c4 <__assert_fail@plt+0x1fe4>
   1414c:	ldr	r0, [r4]
   14150:	bl	13744 <__assert_fail@plt+0x2264>
   14154:	cmp	r0, #0
   14158:	str	r0, [r7, #8]
   1415c:	blt	142a0 <__assert_fail@plt+0x2dc0>
   14160:	mov	r1, r6
   14164:	mov	r2, r5
   14168:	bl	15330 <__assert_fail@plt+0x3e50>
   1416c:	cmp	r5, r0
   14170:	beq	141c0 <__assert_fail@plt+0x2ce0>
   14174:	bl	1139c <__errno_location@plt>
   14178:	ldr	r2, [pc, #360]	; 142e8 <__assert_fail@plt+0x2e08>
   1417c:	ldr	r3, [r2, #40]	; 0x28
   14180:	ldr	r4, [r0]
   14184:	adds	r0, r3, #0
   14188:	movne	r0, #1
   1418c:	cmp	r4, #32
   14190:	movne	r0, #0
   14194:	cmp	r0, #0
   14198:	movne	r0, #0
   1419c:	bne	141c4 <__assert_fail@plt+0x2ce4>
   141a0:	ldr	r2, [r2]
   141a4:	mov	r1, #3
   141a8:	bl	183e0 <__assert_fail@plt+0x6f00>
   141ac:	mov	r1, r4
   141b0:	ldr	r2, [pc, #316]	; 142f4 <__assert_fail@plt+0x2e14>
   141b4:	mov	r3, r0
   141b8:	mov	r0, #1
   141bc:	bl	112d0 <error@plt>
   141c0:	mov	r0, #1
   141c4:	add	sp, sp, #36	; 0x24
   141c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141cc:	ldr	r3, [pc, #280]	; 142ec <__assert_fail@plt+0x2e0c>
   141d0:	ldr	r0, [r3, #8]
   141d4:	b	14160 <__assert_fail@plt+0x2c80>
   141d8:	mov	r1, lr
   141dc:	sub	ip, ip, #1
   141e0:	cmp	sl, #0
   141e4:	ldr	r3, [lr, ip, lsl #2]
   141e8:	str	ip, [r4, #152]	; 0x98
   141ec:	str	r3, [r1]
   141f0:	bgt	140ac <__assert_fail@plt+0x2bcc>
   141f4:	b	14148 <__assert_fail@plt+0x2c68>
   141f8:	bl	1139c <__errno_location@plt>
   141fc:	ldr	sl, [r0]
   14200:	cmp	sl, #10
   14204:	beq	140cc <__assert_fail@plt+0x2bec>
   14208:	mov	r2, #5
   1420c:	ldr	r1, [pc, #228]	; 142f8 <__assert_fail@plt+0x2e18>
   14210:	mov	r0, r9
   14214:	bl	1121c <dcgettext@plt>
   14218:	mov	r1, sl
   1421c:	mov	r2, r0
   14220:	mov	r0, #1
   14224:	bl	112d0 <error@plt>
   14228:	cmp	r9, #0
   1422c:	bne	142c4 <__assert_fail@plt+0x2de4>
   14230:	asr	r2, r2, #8
   14234:	ands	sl, r2, #255	; 0xff
   14238:	beq	14148 <__assert_fail@plt+0x2c68>
   1423c:	mov	r2, #5
   14240:	ldr	r1, [pc, #180]	; 142fc <__assert_fail@plt+0x2e1c>
   14244:	mov	r0, r9
   14248:	bl	1121c <dcgettext@plt>
   1424c:	mov	r2, r8
   14250:	mov	r1, #3
   14254:	mov	fp, r0
   14258:	mov	r0, r9
   1425c:	bl	183e0 <__assert_fail@plt+0x6f00>
   14260:	ldr	r3, [r4, #40]	; 0x28
   14264:	mov	r2, fp
   14268:	str	r3, [sp, #4]
   1426c:	str	sl, [sp]
   14270:	mov	r1, r9
   14274:	mov	r3, r0
   14278:	mov	r0, sl
   1427c:	bl	112d0 <error@plt>
   14280:	b	14148 <__assert_fail@plt+0x2c68>
   14284:	str	r9, [sp]
   14288:	ldr	r3, [pc, #112]	; 14300 <__assert_fail@plt+0x2e20>
   1428c:	mov	r2, #19
   14290:	mov	r1, #1
   14294:	mov	r0, sl
   14298:	bl	113a8 <__sprintf_chk@plt>
   1429c:	b	14104 <__assert_fail@plt+0x2c24>
   142a0:	bl	1139c <__errno_location@plt>
   142a4:	ldr	r2, [r4]
   142a8:	ldr	r4, [r0]
   142ac:	mov	r1, #3
   142b0:	mov	r0, #0
   142b4:	b	141a8 <__assert_fail@plt+0x2cc8>
   142b8:	bl	1139c <__errno_location@plt>
   142bc:	mov	r2, r8
   142c0:	b	142a8 <__assert_fail@plt+0x2dc8>
   142c4:	mov	r2, #5
   142c8:	ldr	r1, [pc, #52]	; 14304 <__assert_fail@plt+0x2e24>
   142cc:	mov	r0, #0
   142d0:	bl	1121c <dcgettext@plt>
   142d4:	ldr	r3, [sp, #8]
   142d8:	mov	r1, #0
   142dc:	mov	r2, r0
   142e0:	mov	r0, #1
   142e4:	bl	112d0 <error@plt>
   142e8:	andeq	lr, r2, r0, ror r3
   142ec:	andeq	lr, r2, r4, asr r1
   142f0:	muleq	r1, r0, r7
   142f4:	andeq	ip, r1, r0, ror #15
   142f8:	andeq	ip, r1, r0, ror r7
   142fc:			; <UNDEFINED> instruction: 0x0001c7bc
   14300:	andeq	ip, r1, ip, lsl #15
   14304:	andeq	ip, r1, r4, ror #15
   14308:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1430c:	sub	sp, sp, #32
   14310:	ldr	r4, [pc, #700]	; 145d4 <__assert_fail@plt+0x30f4>
   14314:	ldrb	r5, [r4, #296]	; 0x128
   14318:	cmp	r5, #0
   1431c:	bne	144c0 <__assert_fail@plt+0x2fe0>
   14320:	ldr	r6, [pc, #688]	; 145d8 <__assert_fail@plt+0x30f8>
   14324:	ldr	r9, [r4, #288]	; 0x120
   14328:	ldr	r7, [r4]
   1432c:	ldr	r8, [r6, #8]
   14330:	cmp	r8, #0
   14334:	blt	14380 <__assert_fail@plt+0x2ea0>
   14338:	mov	r0, r8
   1433c:	bl	114c8 <close@plt>
   14340:	cmp	r0, #0
   14344:	blt	1459c <__assert_fail@plt+0x30bc>
   14348:	ldr	ip, [r4, #152]	; 0x98
   1434c:	cmp	ip, #0
   14350:	beq	14380 <__assert_fail@plt+0x2ea0>
   14354:	ldr	lr, [r4, #156]	; 0x9c
   14358:	ldr	r3, [lr]
   1435c:	cmp	r8, r3
   14360:	addne	r2, lr, #4
   14364:	movne	r3, r5
   14368:	bne	144a8 <__assert_fail@plt+0x2fc8>
   1436c:	mov	r1, lr
   14370:	sub	ip, ip, #1
   14374:	str	ip, [r4, #152]	; 0x98
   14378:	ldr	r3, [lr, ip, lsl #2]
   1437c:	str	r3, [r1]
   14380:	cmp	r9, #0
   14384:	ble	14424 <__assert_fail@plt+0x2f44>
   14388:	add	r1, sp, #32
   1438c:	mov	r8, #0
   14390:	mov	r0, r9
   14394:	str	r8, [r1, #-24]!	; 0xffffffe8
   14398:	mov	r2, r8
   1439c:	bl	11294 <waitpid@plt>
   143a0:	cmn	r0, #1
   143a4:	beq	144d0 <__assert_fail@plt+0x2ff0>
   143a8:	ldr	r2, [sp, #8]
   143ac:	and	r8, r2, #127	; 0x7f
   143b0:	add	r3, r8, #1
   143b4:	sxtb	r3, r3
   143b8:	cmp	r3, #1
   143bc:	ble	14500 <__assert_fail@plt+0x3020>
   143c0:	cmp	r8, #13
   143c4:	beq	14424 <__assert_fail@plt+0x2f44>
   143c8:	add	r9, sp, #12
   143cc:	mov	r1, r9
   143d0:	mov	r0, r8
   143d4:	bl	196a0 <__assert_fail@plt+0x81c0>
   143d8:	cmp	r0, #0
   143dc:	bne	1455c <__assert_fail@plt+0x307c>
   143e0:	mov	r2, #5
   143e4:	ldr	r1, [pc, #496]	; 145dc <__assert_fail@plt+0x30fc>
   143e8:	mov	r0, #0
   143ec:	bl	1121c <dcgettext@plt>
   143f0:	mov	r2, r7
   143f4:	mov	r1, #3
   143f8:	mov	sl, r0
   143fc:	mov	r0, #0
   14400:	bl	183e0 <__assert_fail@plt+0x6f00>
   14404:	ldr	r3, [r4, #40]	; 0x28
   14408:	mov	r2, sl
   1440c:	str	r3, [sp, #4]
   14410:	str	r9, [sp]
   14414:	mov	r1, #0
   14418:	mov	r3, r0
   1441c:	add	r0, r8, #128	; 0x80
   14420:	bl	112d0 <error@plt>
   14424:	bl	134c4 <__assert_fail@plt+0x1fe4>
   14428:	ldr	r0, [r4]
   1442c:	bl	13744 <__assert_fail@plt+0x2264>
   14430:	cmp	r0, #0
   14434:	str	r0, [r6, #8]
   14438:	blt	145c8 <__assert_fail@plt+0x30e8>
   1443c:	mov	r2, #0
   14440:	mov	r1, r2
   14444:	bl	15330 <__assert_fail@plt+0x3e50>
   14448:	cmp	r0, #0
   1444c:	beq	144c0 <__assert_fail@plt+0x2fe0>
   14450:	bl	1139c <__errno_location@plt>
   14454:	ldr	r3, [r4, #40]	; 0x28
   14458:	ldr	r6, [r0]
   1445c:	adds	r0, r3, #0
   14460:	movne	r0, #1
   14464:	cmp	r6, #32
   14468:	movne	r0, #0
   1446c:	cmp	r0, #0
   14470:	bne	144c4 <__assert_fail@plt+0x2fe4>
   14474:	ldr	r2, [r4]
   14478:	mov	r1, #3
   1447c:	bl	183e0 <__assert_fail@plt+0x6f00>
   14480:	mov	r1, r6
   14484:	ldr	r2, [pc, #340]	; 145e0 <__assert_fail@plt+0x3100>
   14488:	mov	r3, r0
   1448c:	mov	r0, #1
   14490:	bl	112d0 <error@plt>
   14494:	mov	r1, r2
   14498:	add	r2, r2, #4
   1449c:	ldr	r0, [r1]
   144a0:	cmp	r8, r0
   144a4:	beq	14370 <__assert_fail@plt+0x2e90>
   144a8:	add	r3, r3, #1
   144ac:	cmp	r3, ip
   144b0:	bne	14494 <__assert_fail@plt+0x2fb4>
   144b4:	cmp	r9, #0
   144b8:	bgt	14388 <__assert_fail@plt+0x2ea8>
   144bc:	b	14424 <__assert_fail@plt+0x2f44>
   144c0:	mov	r5, #1
   144c4:	mov	r0, r5
   144c8:	add	sp, sp, #32
   144cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   144d0:	bl	1139c <__errno_location@plt>
   144d4:	ldr	r9, [r0]
   144d8:	cmp	r9, #10
   144dc:	beq	143a8 <__assert_fail@plt+0x2ec8>
   144e0:	mov	r2, #5
   144e4:	ldr	r1, [pc, #248]	; 145e4 <__assert_fail@plt+0x3104>
   144e8:	mov	r0, r8
   144ec:	bl	1121c <dcgettext@plt>
   144f0:	mov	r1, r9
   144f4:	mov	r2, r0
   144f8:	mov	r0, #1
   144fc:	bl	112d0 <error@plt>
   14500:	cmp	r8, #0
   14504:	bne	14578 <__assert_fail@plt+0x3098>
   14508:	asr	r2, r2, #8
   1450c:	ands	r9, r2, #255	; 0xff
   14510:	beq	14424 <__assert_fail@plt+0x2f44>
   14514:	mov	r2, #5
   14518:	ldr	r1, [pc, #200]	; 145e8 <__assert_fail@plt+0x3108>
   1451c:	mov	r0, r8
   14520:	bl	1121c <dcgettext@plt>
   14524:	mov	r2, r7
   14528:	mov	r1, #3
   1452c:	mov	sl, r0
   14530:	mov	r0, r8
   14534:	bl	183e0 <__assert_fail@plt+0x6f00>
   14538:	ldr	r3, [r4, #40]	; 0x28
   1453c:	mov	r2, sl
   14540:	str	r3, [sp, #4]
   14544:	str	r9, [sp]
   14548:	mov	r1, r8
   1454c:	mov	r3, r0
   14550:	mov	r0, r9
   14554:	bl	112d0 <error@plt>
   14558:	b	14424 <__assert_fail@plt+0x2f44>
   1455c:	str	r8, [sp]
   14560:	ldr	r3, [pc, #132]	; 145ec <__assert_fail@plt+0x310c>
   14564:	mov	r2, #19
   14568:	mov	r1, #1
   1456c:	mov	r0, r9
   14570:	bl	113a8 <__sprintf_chk@plt>
   14574:	b	143e0 <__assert_fail@plt+0x2f00>
   14578:	mov	r2, #5
   1457c:	ldr	r1, [pc, #108]	; 145f0 <__assert_fail@plt+0x3110>
   14580:	mov	r0, #0
   14584:	bl	1121c <dcgettext@plt>
   14588:	ldr	r3, [sp, #8]
   1458c:	mov	r1, #0
   14590:	mov	r2, r0
   14594:	mov	r0, #1
   14598:	bl	112d0 <error@plt>
   1459c:	bl	1139c <__errno_location@plt>
   145a0:	mov	r2, r7
   145a4:	ldr	r4, [r0]
   145a8:	mov	r1, #3
   145ac:	mov	r0, #0
   145b0:	bl	183e0 <__assert_fail@plt+0x6f00>
   145b4:	mov	r1, r4
   145b8:	ldr	r2, [pc, #32]	; 145e0 <__assert_fail@plt+0x3100>
   145bc:	mov	r3, r0
   145c0:	mov	r0, #1
   145c4:	bl	112d0 <error@plt>
   145c8:	bl	1139c <__errno_location@plt>
   145cc:	ldr	r2, [r4]
   145d0:	b	145a4 <__assert_fail@plt+0x30c4>
   145d4:	andeq	lr, r2, r0, ror r3
   145d8:	andeq	lr, r2, r4, asr r1
   145dc:	muleq	r1, r0, r7
   145e0:	andeq	ip, r1, r0, ror #15
   145e4:	andeq	ip, r1, r0, ror r7
   145e8:			; <UNDEFINED> instruction: 0x0001c7bc
   145ec:	andeq	ip, r1, ip, lsl #15
   145f0:	andeq	ip, r1, r4, ror #15
   145f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145f8:	sub	sp, sp, #84	; 0x54
   145fc:	mov	r9, r1
   14600:	str	r2, [sp, #44]	; 0x2c
   14604:	mov	r1, r3
   14608:	mov	r2, r0
   1460c:	str	r3, [sp, #52]	; 0x34
   14610:	mov	r3, r9
   14614:	ldr	r7, [sp, #120]	; 0x78
   14618:	strd	r2, [sp, #8]
   1461c:	mov	r8, r0
   14620:	mov	r2, #0
   14624:	mov	r3, #0
   14628:	mov	r5, #1
   1462c:	cmn	r7, #1
   14630:	strd	r8, [sp, #24]
   14634:	mov	r4, r5
   14638:	strd	r2, [sp, #16]
   1463c:	ldr	fp, [pc, #1288]	; 14b4c <__assert_fail@plt+0x366c>
   14640:	beq	14968 <__assert_fail@plt+0x3488>
   14644:	cmp	r7, r1
   14648:	mov	r3, r1
   1464c:	movcs	r3, #0
   14650:	movcc	r3, #1
   14654:	str	r3, [sp, #40]	; 0x28
   14658:	ldrd	r2, [sp, #8]
   1465c:	mov	r9, #0
   14660:	mov	r8, r7
   14664:	cmp	r3, r9
   14668:	cmpeq	r2, r7
   1466c:	ldr	sl, [sp, #44]	; 0x2c
   14670:	bhi	14908 <__assert_fail@plt+0x3428>
   14674:	ldr	r3, [sp, #128]	; 0x80
   14678:	ldr	r2, [sp, #132]	; 0x84
   1467c:	orr	r3, r3, r2
   14680:	str	r3, [sp, #32]
   14684:	b	146ec <__assert_fail@plt+0x320c>
   14688:	ldrd	r2, [sp, #16]
   1468c:	ldrd	r0, [sp, #128]	; 0x80
   14690:	adds	r2, r2, r4
   14694:	adc	r3, r3, #0
   14698:	cmp	r3, r1
   1469c:	cmpeq	r2, r0
   146a0:	strd	r2, [sp, #16]
   146a4:	ldr	r3, [sp, #32]
   146a8:	movcc	r4, #1
   146ac:	movcs	r4, #0
   146b0:	cmp	r3, #0
   146b4:	orreq	r4, r4, #1
   146b8:	cmp	r4, #0
   146bc:	beq	14ad4 <__assert_fail@plt+0x35f4>
   146c0:	ldr	r6, [sp, #8]
   146c4:	mov	r5, #0
   146c8:	ldrd	r2, [sp, #24]
   146cc:	mov	r9, #0
   146d0:	sub	r7, r7, r6
   146d4:	cmp	r3, r9
   146d8:	cmpeq	r2, r7
   146dc:	mov	r8, r7
   146e0:	add	sl, sl, r6
   146e4:	strd	r2, [sp, #8]
   146e8:	bhi	14908 <__assert_fail@plt+0x3428>
   146ec:	orr	r5, r4, r5
   146f0:	ands	r5, r5, #255	; 0xff
   146f4:	beq	14688 <__assert_fail@plt+0x31a8>
   146f8:	ldrd	r2, [sp, #8]
   146fc:	cmp	r4, #0
   14700:	mov	r6, r2
   14704:	beq	148e4 <__assert_fail@plt+0x3404>
   14708:	cmp	sl, #0
   1470c:	cmpeq	r2, #0
   14710:	bne	14720 <__assert_fail@plt+0x3240>
   14714:	ldrb	r3, [fp, #296]	; 0x128
   14718:	cmp	r3, #0
   1471c:	bne	148b0 <__assert_fail@plt+0x33d0>
   14720:	ldr	r3, [pc, #1064]	; 14b50 <__assert_fail@plt+0x3670>
   14724:	ldr	r9, [fp, #288]	; 0x120
   14728:	ldr	r8, [r3, #8]
   1472c:	ldr	r3, [fp]
   14730:	cmp	r8, #0
   14734:	str	r3, [sp, #36]	; 0x24
   14738:	blt	14794 <__assert_fail@plt+0x32b4>
   1473c:	mov	r0, r8
   14740:	bl	114c8 <close@plt>
   14744:	cmp	r0, #0
   14748:	blt	14adc <__assert_fail@plt+0x35fc>
   1474c:	ldr	ip, [fp, #152]	; 0x98
   14750:	cmp	ip, #0
   14754:	beq	14794 <__assert_fail@plt+0x32b4>
   14758:	ldr	lr, [fp, #156]	; 0x9c
   1475c:	ldr	r3, [lr]
   14760:	cmp	r8, r3
   14764:	addne	r2, lr, #4
   14768:	movne	r3, #0
   1476c:	bne	14788 <__assert_fail@plt+0x32a8>
   14770:	b	148f0 <__assert_fail@plt+0x3410>
   14774:	mov	r1, r2
   14778:	add	r2, r2, #4
   1477c:	ldr	r0, [r1]
   14780:	cmp	r8, r0
   14784:	beq	148f4 <__assert_fail@plt+0x3414>
   14788:	add	r3, r3, #1
   1478c:	cmp	r3, ip
   14790:	bne	14774 <__assert_fail@plt+0x3294>
   14794:	cmp	r9, #0
   14798:	ble	1483c <__assert_fail@plt+0x335c>
   1479c:	add	r1, sp, #80	; 0x50
   147a0:	mov	r3, #0
   147a4:	mov	r0, r9
   147a8:	str	r3, [r1, #-24]!	; 0xffffffe8
   147ac:	mov	r2, r3
   147b0:	bl	11294 <waitpid@plt>
   147b4:	cmn	r0, #1
   147b8:	beq	1499c <__assert_fail@plt+0x34bc>
   147bc:	ldr	r2, [sp, #56]	; 0x38
   147c0:	and	r8, r2, #127	; 0x7f
   147c4:	add	r3, r8, #1
   147c8:	sxtb	r3, r3
   147cc:	cmp	r3, #1
   147d0:	ble	149cc <__assert_fail@plt+0x34ec>
   147d4:	cmp	r8, #13
   147d8:	beq	1483c <__assert_fail@plt+0x335c>
   147dc:	add	r9, sp, #60	; 0x3c
   147e0:	mov	r1, r9
   147e4:	mov	r0, r8
   147e8:	bl	196a0 <__assert_fail@plt+0x81c0>
   147ec:	cmp	r0, #0
   147f0:	bne	14a48 <__assert_fail@plt+0x3568>
   147f4:	mov	r2, #5
   147f8:	ldr	r1, [pc, #852]	; 14b54 <__assert_fail@plt+0x3674>
   147fc:	mov	r0, #0
   14800:	bl	1121c <dcgettext@plt>
   14804:	ldr	r2, [sp, #36]	; 0x24
   14808:	mov	r1, #3
   1480c:	str	r0, [sp, #48]	; 0x30
   14810:	mov	r0, #0
   14814:	bl	183e0 <__assert_fail@plt+0x6f00>
   14818:	ldr	r1, [fp, #40]	; 0x28
   1481c:	ldr	r3, [sp, #48]	; 0x30
   14820:	str	r1, [sp, #4]
   14824:	mov	r2, r3
   14828:	str	r9, [sp]
   1482c:	mov	r1, #0
   14830:	mov	r3, r0
   14834:	add	r0, r8, #128	; 0x80
   14838:	bl	112d0 <error@plt>
   1483c:	bl	134c4 <__assert_fail@plt+0x1fe4>
   14840:	ldr	r0, [fp]
   14844:	bl	13744 <__assert_fail@plt+0x2264>
   14848:	ldr	r3, [pc, #768]	; 14b50 <__assert_fail@plt+0x3670>
   1484c:	cmp	r0, #0
   14850:	str	r0, [r3, #8]
   14854:	blt	14b40 <__assert_fail@plt+0x3660>
   14858:	mov	r2, r6
   1485c:	mov	r1, sl
   14860:	bl	15330 <__assert_fail@plt+0x3e50>
   14864:	cmp	r6, r0
   14868:	beq	148b0 <__assert_fail@plt+0x33d0>
   1486c:	bl	1139c <__errno_location@plt>
   14870:	ldr	r3, [fp, #40]	; 0x28
   14874:	ldr	r5, [r0]
   14878:	adds	r0, r3, #0
   1487c:	movne	r0, #1
   14880:	cmp	r5, #32
   14884:	movne	r0, #0
   14888:	cmp	r0, #0
   1488c:	bne	14688 <__assert_fail@plt+0x31a8>
   14890:	ldr	r2, [fp]
   14894:	mov	r1, #3
   14898:	bl	183e0 <__assert_fail@plt+0x6f00>
   1489c:	mov	r1, r5
   148a0:	ldr	r2, [pc, #688]	; 14b58 <__assert_fail@plt+0x3678>
   148a4:	mov	r3, r0
   148a8:	mov	r0, #1
   148ac:	bl	112d0 <error@plt>
   148b0:	ldrd	r2, [sp, #16]
   148b4:	ldrd	r0, [sp, #128]	; 0x80
   148b8:	adds	r2, r2, r4
   148bc:	adc	r3, r3, #0
   148c0:	cmp	r1, r3
   148c4:	cmpeq	r0, r2
   148c8:	strd	r2, [sp, #16]
   148cc:	ldr	r3, [sp, #32]
   148d0:	movhi	r4, #1
   148d4:	movls	r4, #0
   148d8:	cmp	r3, #0
   148dc:	orreq	r4, r4, #1
   148e0:	b	146c8 <__assert_fail@plt+0x31e8>
   148e4:	ldr	r3, [pc, #612]	; 14b50 <__assert_fail@plt+0x3670>
   148e8:	ldr	r0, [r3, #8]
   148ec:	b	14858 <__assert_fail@plt+0x3378>
   148f0:	mov	r1, lr
   148f4:	sub	ip, ip, #1
   148f8:	str	ip, [fp, #152]	; 0x98
   148fc:	ldr	r3, [lr, ip, lsl #2]
   14900:	str	r3, [r1]
   14904:	b	14794 <__assert_fail@plt+0x32b4>
   14908:	cmp	r7, #0
   1490c:	beq	1495c <__assert_fail@plt+0x347c>
   14910:	orr	r5, r4, r5
   14914:	ands	r5, r5, #255	; 0xff
   14918:	moveq	r3, #1
   1491c:	bne	14a28 <__assert_fail@plt+0x3548>
   14920:	ldrd	r0, [sp, #16]
   14924:	ldrd	r6, [sp, #128]	; 0x80
   14928:	adds	r0, r0, r4
   1492c:	adc	r1, r1, #0
   14930:	cmp	r7, r1
   14934:	cmpeq	r6, r0
   14938:	movne	r4, #0
   1493c:	andeq	r4, r3, #1
   14940:	cmp	r4, #0
   14944:	strd	r0, [sp, #16]
   14948:	bne	14ad4 <__assert_fail@plt+0x35f4>
   1494c:	ldrd	r2, [sp, #8]
   14950:	subs	r2, r2, r8
   14954:	sbc	r3, r3, r9
   14958:	strd	r2, [sp, #8]
   1495c:	ldr	r3, [sp, #40]	; 0x28
   14960:	cmp	r3, #0
   14964:	bne	14a98 <__assert_fail@plt+0x35b8>
   14968:	cmp	r5, #0
   1496c:	beq	14a64 <__assert_fail@plt+0x3584>
   14970:	ldr	r2, [sp, #52]	; 0x34
   14974:	ldr	r1, [sp, #44]	; 0x2c
   14978:	mov	r0, #0
   1497c:	bl	19454 <__assert_fail@plt+0x7f74>
   14980:	cmn	r0, #1
   14984:	mov	r7, r0
   14988:	beq	14b2c <__assert_fail@plt+0x364c>
   1498c:	clz	r3, r0
   14990:	lsr	r3, r3, #5
   14994:	str	r3, [sp, #40]	; 0x28
   14998:	b	14658 <__assert_fail@plt+0x3178>
   1499c:	bl	1139c <__errno_location@plt>
   149a0:	ldr	r8, [r0]
   149a4:	cmp	r8, #10
   149a8:	beq	147bc <__assert_fail@plt+0x32dc>
   149ac:	mov	r2, #5
   149b0:	ldr	r1, [pc, #420]	; 14b5c <__assert_fail@plt+0x367c>
   149b4:	mov	r0, #0
   149b8:	bl	1121c <dcgettext@plt>
   149bc:	mov	r1, r8
   149c0:	mov	r2, r0
   149c4:	mov	r0, #1
   149c8:	bl	112d0 <error@plt>
   149cc:	cmp	r8, #0
   149d0:	bne	14b08 <__assert_fail@plt+0x3628>
   149d4:	asr	r8, r2, #8
   149d8:	ands	r8, r8, #255	; 0xff
   149dc:	beq	1483c <__assert_fail@plt+0x335c>
   149e0:	mov	r2, #5
   149e4:	ldr	r1, [pc, #372]	; 14b60 <__assert_fail@plt+0x3680>
   149e8:	mov	r0, #0
   149ec:	bl	1121c <dcgettext@plt>
   149f0:	ldr	r2, [sp, #36]	; 0x24
   149f4:	mov	r1, #3
   149f8:	mov	r9, r0
   149fc:	mov	r0, #0
   14a00:	bl	183e0 <__assert_fail@plt+0x6f00>
   14a04:	ldr	r3, [fp, #40]	; 0x28
   14a08:	mov	r2, r9
   14a0c:	str	r3, [sp, #4]
   14a10:	str	r8, [sp]
   14a14:	mov	r1, #0
   14a18:	mov	r3, r0
   14a1c:	mov	r0, r8
   14a20:	bl	112d0 <error@plt>
   14a24:	b	1483c <__assert_fail@plt+0x335c>
   14a28:	mov	r2, r7
   14a2c:	mov	r1, sl
   14a30:	mov	r0, r4
   14a34:	bl	14000 <__assert_fail@plt+0x2b20>
   14a38:	eor	r3, r0, #1
   14a3c:	mov	r5, r0
   14a40:	uxtb	r3, r3
   14a44:	b	14920 <__assert_fail@plt+0x3440>
   14a48:	str	r8, [sp]
   14a4c:	ldr	r3, [pc, #272]	; 14b64 <__assert_fail@plt+0x3684>
   14a50:	mov	r2, #19
   14a54:	mov	r1, #1
   14a58:	mov	r0, r9
   14a5c:	bl	113a8 <__sprintf_chk@plt>
   14a60:	b	147f4 <__assert_fail@plt+0x3314>
   14a64:	mov	r6, #1
   14a68:	ldrd	r2, [sp, #8]
   14a6c:	str	r6, [sp]
   14a70:	mov	r0, #0
   14a74:	bl	11288 <lseek64@plt>
   14a78:	mvn	r3, #0
   14a7c:	mvn	r2, #0
   14a80:	cmp	r1, r3
   14a84:	cmpeq	r0, r2
   14a88:	ldrdne	r2, [sp, #24]
   14a8c:	movne	r4, r6
   14a90:	strdne	r2, [sp, #8]
   14a94:	b	14970 <__assert_fail@plt+0x3490>
   14a98:	ldrd	r2, [sp, #16]
   14a9c:	ldrd	r0, [sp, #128]	; 0x80
   14aa0:	cmp	r3, r1
   14aa4:	cmpeq	r2, r0
   14aa8:	bcs	14ad4 <__assert_fail@plt+0x35f4>
   14aac:	mov	r4, r2
   14ab0:	mov	r5, r3
   14ab4:	mov	r6, r0
   14ab8:	mov	r7, r1
   14abc:	adds	r4, r4, #1
   14ac0:	adc	r5, r5, #0
   14ac4:	bl	14308 <__assert_fail@plt+0x2e28>
   14ac8:	cmp	r7, r5
   14acc:	cmpeq	r6, r4
   14ad0:	bne	14abc <__assert_fail@plt+0x35dc>
   14ad4:	add	sp, sp, #84	; 0x54
   14ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14adc:	bl	1139c <__errno_location@plt>
   14ae0:	ldr	r2, [sp, #36]	; 0x24
   14ae4:	mov	r1, #3
   14ae8:	ldr	r4, [r0]
   14aec:	mov	r0, #0
   14af0:	bl	183e0 <__assert_fail@plt+0x6f00>
   14af4:	mov	r1, r4
   14af8:	ldr	r2, [pc, #88]	; 14b58 <__assert_fail@plt+0x3678>
   14afc:	mov	r3, r0
   14b00:	mov	r0, #1
   14b04:	bl	112d0 <error@plt>
   14b08:	mov	r2, #5
   14b0c:	ldr	r1, [pc, #84]	; 14b68 <__assert_fail@plt+0x3688>
   14b10:	mov	r0, #0
   14b14:	bl	1121c <dcgettext@plt>
   14b18:	ldr	r3, [sp, #56]	; 0x38
   14b1c:	mov	r1, #0
   14b20:	mov	r2, r0
   14b24:	mov	r0, #1
   14b28:	bl	112d0 <error@plt>
   14b2c:	bl	1139c <__errno_location@plt>
   14b30:	ldr	r3, [pc, #20]	; 14b4c <__assert_fail@plt+0x366c>
   14b34:	mov	r1, #3
   14b38:	ldr	r2, [r3, #300]	; 0x12c
   14b3c:	b	14ae8 <__assert_fail@plt+0x3608>
   14b40:	bl	1139c <__errno_location@plt>
   14b44:	ldr	r2, [fp]
   14b48:	b	14ae4 <__assert_fail@plt+0x3604>
   14b4c:	andeq	lr, r2, r0, ror r3
   14b50:	andeq	lr, r2, r4, asr r1
   14b54:	muleq	r1, r0, r7
   14b58:	andeq	ip, r1, r0, ror #15
   14b5c:	andeq	ip, r1, r0, ror r7
   14b60:			; <UNDEFINED> instruction: 0x0001c7bc
   14b64:	andeq	ip, r1, ip, lsl #15
   14b68:	andeq	ip, r1, r4, ror #15
   14b6c:	subs	r5, r0, #0
   14b70:	push	{r7, lr}
   14b74:	sub	sp, sp, #56	; 0x38
   14b78:	beq	14bb4 <__assert_fail@plt+0x36d4>
   14b7c:	ldr	r3, [pc, #772]	; 14e88 <__assert_fail@plt+0x39a8>
   14b80:	mov	r2, #5
   14b84:	ldr	r1, [pc, #768]	; 14e8c <__assert_fail@plt+0x39ac>
   14b88:	mov	r0, #0
   14b8c:	ldr	r4, [r3]
   14b90:	bl	1121c <dcgettext@plt>
   14b94:	ldr	r3, [pc, #756]	; 14e90 <__assert_fail@plt+0x39b0>
   14b98:	mov	r1, #1
   14b9c:	ldr	r3, [r3]
   14ba0:	mov	r2, r0
   14ba4:	mov	r0, r4
   14ba8:	bl	113f0 <__fprintf_chk@plt>
   14bac:	mov	r0, r5
   14bb0:	bl	11348 <exit@plt>
   14bb4:	mov	r2, #5
   14bb8:	ldr	r1, [pc, #724]	; 14e94 <__assert_fail@plt+0x39b4>
   14bbc:	bl	1121c <dcgettext@plt>
   14bc0:	ldr	r3, [pc, #712]	; 14e90 <__assert_fail@plt+0x39b0>
   14bc4:	ldr	r7, [pc, #716]	; 14e98 <__assert_fail@plt+0x39b8>
   14bc8:	ldr	r2, [r3]
   14bcc:	mov	r1, r0
   14bd0:	mov	r0, #1
   14bd4:	bl	113cc <__printf_chk@plt>
   14bd8:	mov	r2, #5
   14bdc:	ldr	r1, [pc, #696]	; 14e9c <__assert_fail@plt+0x39bc>
   14be0:	mov	r0, r5
   14be4:	bl	1121c <dcgettext@plt>
   14be8:	ldr	r1, [r7]
   14bec:	bl	11150 <fputs_unlocked@plt>
   14bf0:	mov	r2, #5
   14bf4:	ldr	r1, [pc, #676]	; 14ea0 <__assert_fail@plt+0x39c0>
   14bf8:	mov	r0, r5
   14bfc:	bl	1121c <dcgettext@plt>
   14c00:	ldr	r1, [r7]
   14c04:	bl	11150 <fputs_unlocked@plt>
   14c08:	mov	r2, #5
   14c0c:	ldr	r1, [pc, #656]	; 14ea4 <__assert_fail@plt+0x39c4>
   14c10:	mov	r0, r5
   14c14:	bl	1121c <dcgettext@plt>
   14c18:	ldr	r1, [r7]
   14c1c:	bl	11150 <fputs_unlocked@plt>
   14c20:	mov	r2, #5
   14c24:	ldr	r1, [pc, #636]	; 14ea8 <__assert_fail@plt+0x39c8>
   14c28:	mov	r0, r5
   14c2c:	ldr	r4, [r7]
   14c30:	bl	1121c <dcgettext@plt>
   14c34:	mov	r3, #2
   14c38:	mov	r1, #1
   14c3c:	mov	r2, r0
   14c40:	mov	r0, r4
   14c44:	bl	113f0 <__fprintf_chk@plt>
   14c48:	mov	r2, #5
   14c4c:	ldr	r1, [pc, #600]	; 14eac <__assert_fail@plt+0x39cc>
   14c50:	mov	r0, r5
   14c54:	bl	1121c <dcgettext@plt>
   14c58:	ldr	r1, [r7]
   14c5c:	bl	11150 <fputs_unlocked@plt>
   14c60:	mov	r2, #5
   14c64:	ldr	r1, [pc, #580]	; 14eb0 <__assert_fail@plt+0x39d0>
   14c68:	mov	r0, r5
   14c6c:	bl	1121c <dcgettext@plt>
   14c70:	ldr	r1, [r7]
   14c74:	bl	11150 <fputs_unlocked@plt>
   14c78:	mov	r2, #5
   14c7c:	ldr	r1, [pc, #560]	; 14eb4 <__assert_fail@plt+0x39d4>
   14c80:	mov	r0, r5
   14c84:	bl	1121c <dcgettext@plt>
   14c88:	ldr	r1, [r7]
   14c8c:	bl	11150 <fputs_unlocked@plt>
   14c90:	mov	r2, #5
   14c94:	ldr	r1, [pc, #540]	; 14eb8 <__assert_fail@plt+0x39d8>
   14c98:	mov	r0, r5
   14c9c:	bl	1121c <dcgettext@plt>
   14ca0:	ldr	r4, [pc, #532]	; 14ebc <__assert_fail@plt+0x39dc>
   14ca4:	ldr	r1, [r7]
   14ca8:	bl	11150 <fputs_unlocked@plt>
   14cac:	mov	r2, #5
   14cb0:	ldr	r1, [pc, #520]	; 14ec0 <__assert_fail@plt+0x39e0>
   14cb4:	mov	r0, r5
   14cb8:	bl	1121c <dcgettext@plt>
   14cbc:	ldr	r1, [r7]
   14cc0:	bl	11150 <fputs_unlocked@plt>
   14cc4:	ldm	r4!, {r0, r1, r2, r3}
   14cc8:	mov	lr, sp
   14ccc:	stmia	lr!, {r0, r1, r2, r3}
   14cd0:	ldm	r4!, {r0, r1, r2, r3}
   14cd4:	ldr	ip, [sp]
   14cd8:	stmia	lr!, {r0, r1, r2, r3}
   14cdc:	cmp	ip, #0
   14ce0:	ldm	r4!, {r0, r1, r2, r3}
   14ce4:	stmia	lr!, {r0, r1, r2, r3}
   14ce8:	ldm	r4, {r0, r1}
   14cec:	moveq	r4, sp
   14cf0:	stm	lr, {r0, r1}
   14cf4:	beq	14d24 <__assert_fail@plt+0x3844>
   14cf8:	ldr	r6, [pc, #452]	; 14ec4 <__assert_fail@plt+0x39e4>
   14cfc:	mov	r4, sp
   14d00:	b	14d10 <__assert_fail@plt+0x3830>
   14d04:	ldr	ip, [r4, #8]!
   14d08:	cmp	ip, #0
   14d0c:	beq	14d24 <__assert_fail@plt+0x3844>
   14d10:	mov	r1, ip
   14d14:	mov	r0, r6
   14d18:	bl	11168 <strcmp@plt>
   14d1c:	cmp	r0, #0
   14d20:	bne	14d04 <__assert_fail@plt+0x3824>
   14d24:	ldr	r4, [r4, #4]
   14d28:	mov	r2, #5
   14d2c:	cmp	r4, #0
   14d30:	ldr	r1, [pc, #400]	; 14ec8 <__assert_fail@plt+0x39e8>
   14d34:	beq	14ddc <__assert_fail@plt+0x38fc>
   14d38:	mov	r0, #0
   14d3c:	bl	1121c <dcgettext@plt>
   14d40:	ldr	r3, [pc, #388]	; 14ecc <__assert_fail@plt+0x39ec>
   14d44:	ldr	r2, [pc, #388]	; 14ed0 <__assert_fail@plt+0x39f0>
   14d48:	mov	r1, r0
   14d4c:	mov	r0, #1
   14d50:	bl	113cc <__printf_chk@plt>
   14d54:	mov	r1, #0
   14d58:	mov	r0, #5
   14d5c:	bl	11438 <setlocale@plt>
   14d60:	cmp	r0, #0
   14d64:	ldreq	r6, [pc, #344]	; 14ec4 <__assert_fail@plt+0x39e4>
   14d68:	beq	14d84 <__assert_fail@plt+0x38a4>
   14d6c:	mov	r2, #3
   14d70:	ldr	r1, [pc, #348]	; 14ed4 <__assert_fail@plt+0x39f4>
   14d74:	bl	114b0 <strncmp@plt>
   14d78:	ldr	r6, [pc, #324]	; 14ec4 <__assert_fail@plt+0x39e4>
   14d7c:	cmp	r0, #0
   14d80:	bne	14e6c <__assert_fail@plt+0x398c>
   14d84:	mov	r2, #5
   14d88:	ldr	r1, [pc, #328]	; 14ed8 <__assert_fail@plt+0x39f8>
   14d8c:	mov	r0, #0
   14d90:	bl	1121c <dcgettext@plt>
   14d94:	ldr	r3, [pc, #296]	; 14ec4 <__assert_fail@plt+0x39e4>
   14d98:	ldr	r2, [pc, #300]	; 14ecc <__assert_fail@plt+0x39ec>
   14d9c:	mov	r1, r0
   14da0:	mov	r0, #1
   14da4:	bl	113cc <__printf_chk@plt>
   14da8:	mov	r2, #5
   14dac:	ldr	r1, [pc, #296]	; 14edc <__assert_fail@plt+0x39fc>
   14db0:	mov	r0, #0
   14db4:	bl	1121c <dcgettext@plt>
   14db8:	ldr	r2, [pc, #288]	; 14ee0 <__assert_fail@plt+0x3a00>
   14dbc:	cmp	r4, r6
   14dc0:	ldr	r3, [pc, #284]	; 14ee4 <__assert_fail@plt+0x3a04>
   14dc4:	movne	r3, r2
   14dc8:	mov	r1, r0
   14dcc:	mov	r2, r4
   14dd0:	mov	r0, #1
   14dd4:	bl	113cc <__printf_chk@plt>
   14dd8:	b	14bac <__assert_fail@plt+0x36cc>
   14ddc:	mov	r0, r4
   14de0:	bl	1121c <dcgettext@plt>
   14de4:	ldr	r3, [pc, #224]	; 14ecc <__assert_fail@plt+0x39ec>
   14de8:	ldr	r2, [pc, #224]	; 14ed0 <__assert_fail@plt+0x39f0>
   14dec:	mov	r1, r0
   14df0:	mov	r0, #1
   14df4:	bl	113cc <__printf_chk@plt>
   14df8:	mov	r1, r4
   14dfc:	mov	r0, #5
   14e00:	bl	11438 <setlocale@plt>
   14e04:	cmp	r0, #0
   14e08:	beq	14e20 <__assert_fail@plt+0x3940>
   14e0c:	mov	r2, #3
   14e10:	ldr	r1, [pc, #188]	; 14ed4 <__assert_fail@plt+0x39f4>
   14e14:	bl	114b0 <strncmp@plt>
   14e18:	cmp	r0, #0
   14e1c:	bne	14e64 <__assert_fail@plt+0x3984>
   14e20:	mov	r2, #5
   14e24:	ldr	r1, [pc, #172]	; 14ed8 <__assert_fail@plt+0x39f8>
   14e28:	mov	r0, #0
   14e2c:	bl	1121c <dcgettext@plt>
   14e30:	ldr	r3, [pc, #140]	; 14ec4 <__assert_fail@plt+0x39e4>
   14e34:	ldr	r2, [pc, #144]	; 14ecc <__assert_fail@plt+0x39ec>
   14e38:	mov	r4, r3
   14e3c:	mov	r1, r0
   14e40:	mov	r0, #1
   14e44:	bl	113cc <__printf_chk@plt>
   14e48:	ldr	r1, [pc, #140]	; 14edc <__assert_fail@plt+0x39fc>
   14e4c:	mov	r2, #5
   14e50:	mov	r0, #0
   14e54:	bl	1121c <dcgettext@plt>
   14e58:	ldr	r3, [pc, #132]	; 14ee4 <__assert_fail@plt+0x3a04>
   14e5c:	mov	r1, r0
   14e60:	b	14dcc <__assert_fail@plt+0x38ec>
   14e64:	ldr	r6, [pc, #88]	; 14ec4 <__assert_fail@plt+0x39e4>
   14e68:	mov	r4, r6
   14e6c:	mov	r2, #5
   14e70:	ldr	r1, [pc, #112]	; 14ee8 <__assert_fail@plt+0x3a08>
   14e74:	mov	r0, #0
   14e78:	bl	1121c <dcgettext@plt>
   14e7c:	ldr	r1, [r7]
   14e80:	bl	11150 <fputs_unlocked@plt>
   14e84:	b	14d84 <__assert_fail@plt+0x38a4>
   14e88:	andeq	lr, r2, r0, ror #6
   14e8c:	andeq	ip, r1, r0, lsl r8
   14e90:	andeq	lr, r2, ip, lsr #10
   14e94:	andeq	ip, r1, r8, lsr r8
   14e98:	andeq	lr, r2, r4, ror #6
   14e9c:	andeq	ip, r1, r0, ror #16
   14ea0:	andeq	ip, r1, ip, asr #17
   14ea4:	andeq	ip, r1, r4, lsl #18
   14ea8:	andeq	ip, r1, r0, asr r9
   14eac:	muleq	r1, r4, sp
   14eb0:	andeq	ip, r1, r8, lsl #28
   14eb4:	andeq	ip, r1, r8, lsr lr
   14eb8:	andeq	ip, r1, r0, ror lr
   14ebc:	andeq	ip, r1, r8, lsr r4
   14ec0:	andeq	ip, r1, r4, asr #30
   14ec4:	andeq	ip, r1, r8, lsl #16
   14ec8:	muleq	r1, r8, r0
   14ecc:	strheq	sp, [r1], -r0
   14ed0:	ldrdeq	sp, [r1], -r8
   14ed4:	andeq	sp, r1, r8, ror #1
   14ed8:	andeq	sp, r1, r4, lsr r1
   14edc:	andeq	sp, r1, r0, asr r1
   14ee0:	andeq	ip, r1, r4, lsl #28
   14ee4:	andeq	sp, r1, r8, lsr r5
   14ee8:	andeq	sp, r1, ip, ror #1
   14eec:	ldrb	r3, [r0]
   14ef0:	cmp	r3, #47	; 0x2f
   14ef4:	bne	14f04 <__assert_fail@plt+0x3a24>
   14ef8:	ldrb	r3, [r0, #1]!
   14efc:	cmp	r3, #47	; 0x2f
   14f00:	beq	14ef8 <__assert_fail@plt+0x3a18>
   14f04:	cmp	r3, #0
   14f08:	bxeq	lr
   14f0c:	mov	r2, #0
   14f10:	push	{lr}		; (str lr, [sp, #-4]!)
   14f14:	mov	ip, r2
   14f18:	mov	r1, r0
   14f1c:	mov	lr, #1
   14f20:	cmp	r3, #47	; 0x2f
   14f24:	moveq	r2, lr
   14f28:	beq	14f38 <__assert_fail@plt+0x3a58>
   14f2c:	cmp	r2, #0
   14f30:	movne	r0, r1
   14f34:	movne	r2, ip
   14f38:	ldrb	r3, [r1, #1]!
   14f3c:	cmp	r3, #0
   14f40:	bne	14f20 <__assert_fail@plt+0x3a40>
   14f44:	pop	{pc}		; (ldr pc, [sp], #4)
   14f48:	push	{r4, lr}
   14f4c:	mov	r4, r0
   14f50:	bl	11354 <strlen@plt>
   14f54:	cmp	r0, #1
   14f58:	popls	{r4, pc}
   14f5c:	sub	r3, r0, #1
   14f60:	add	r2, r4, r3
   14f64:	ldrb	r1, [r4, r3]
   14f68:	cmp	r1, #47	; 0x2f
   14f6c:	popne	{r4, pc}
   14f70:	cmp	r3, #1
   14f74:	beq	14f88 <__assert_fail@plt+0x3aa8>
   14f78:	ldrb	r1, [r2, #-1]!
   14f7c:	sub	r0, r3, #1
   14f80:	cmp	r1, #47	; 0x2f
   14f84:	beq	14f90 <__assert_fail@plt+0x3ab0>
   14f88:	mov	r0, r3
   14f8c:	pop	{r4, pc}
   14f90:	mov	r3, r0
   14f94:	b	14f70 <__assert_fail@plt+0x3a90>
   14f98:	ldr	r3, [pc, #4]	; 14fa4 <__assert_fail@plt+0x3ac4>
   14f9c:	str	r0, [r3]
   14fa0:	bx	lr
   14fa4:	andeq	lr, r2, r4, lsr #10
   14fa8:	ldr	r3, [pc, #4]	; 14fb4 <__assert_fail@plt+0x3ad4>
   14fac:	strb	r0, [r3, #4]
   14fb0:	bx	lr
   14fb4:	andeq	lr, r2, r4, lsr #10
   14fb8:	ldr	r3, [pc, #192]	; 15080 <__assert_fail@plt+0x3ba0>
   14fbc:	push	{r4, r5, r6, lr}
   14fc0:	sub	sp, sp, #8
   14fc4:	ldr	r0, [r3]
   14fc8:	bl	1b9bc <__assert_fail@plt+0xa4dc>
   14fcc:	cmp	r0, #0
   14fd0:	beq	14ff4 <__assert_fail@plt+0x3b14>
   14fd4:	ldr	r4, [pc, #168]	; 15084 <__assert_fail@plt+0x3ba4>
   14fd8:	ldrb	r3, [r4, #4]
   14fdc:	cmp	r3, #0
   14fe0:	beq	15010 <__assert_fail@plt+0x3b30>
   14fe4:	bl	1139c <__errno_location@plt>
   14fe8:	ldr	r3, [r0]
   14fec:	cmp	r3, #32
   14ff0:	bne	15010 <__assert_fail@plt+0x3b30>
   14ff4:	ldr	r3, [pc, #140]	; 15088 <__assert_fail@plt+0x3ba8>
   14ff8:	ldr	r0, [r3]
   14ffc:	bl	1b9bc <__assert_fail@plt+0xa4dc>
   15000:	cmp	r0, #0
   15004:	bne	15058 <__assert_fail@plt+0x3b78>
   15008:	add	sp, sp, #8
   1500c:	pop	{r4, r5, r6, pc}
   15010:	mov	r2, #5
   15014:	ldr	r1, [pc, #112]	; 1508c <__assert_fail@plt+0x3bac>
   15018:	mov	r0, #0
   1501c:	bl	1121c <dcgettext@plt>
   15020:	ldr	r4, [r4]
   15024:	cmp	r4, #0
   15028:	mov	r5, r0
   1502c:	beq	15064 <__assert_fail@plt+0x3b84>
   15030:	bl	1139c <__errno_location@plt>
   15034:	ldr	r6, [r0]
   15038:	mov	r0, r4
   1503c:	bl	18074 <__assert_fail@plt+0x6b94>
   15040:	mov	r1, r6
   15044:	str	r5, [sp]
   15048:	ldr	r2, [pc, #64]	; 15090 <__assert_fail@plt+0x3bb0>
   1504c:	mov	r3, r0
   15050:	mov	r0, #0
   15054:	bl	112d0 <error@plt>
   15058:	ldr	r3, [pc, #52]	; 15094 <__assert_fail@plt+0x3bb4>
   1505c:	ldr	r0, [r3]
   15060:	bl	111bc <_exit@plt>
   15064:	bl	1139c <__errno_location@plt>
   15068:	mov	r3, r5
   1506c:	ldr	r2, [pc, #36]	; 15098 <__assert_fail@plt+0x3bb8>
   15070:	ldr	r1, [r0]
   15074:	mov	r0, r4
   15078:	bl	112d0 <error@plt>
   1507c:	b	15058 <__assert_fail@plt+0x3b78>
   15080:	andeq	lr, r2, r4, ror #6
   15084:	andeq	lr, r2, r4, lsr #10
   15088:	andeq	lr, r2, r0, ror #6
   1508c:	strdeq	sp, [r1], -ip
   15090:	strdeq	sp, [r1], -r4
   15094:	andeq	lr, r2, r8, ror #2
   15098:	andeq	ip, r1, r0, ror #15
   1509c:	push	{r4, r5, lr}
   150a0:	sub	sp, sp, #12
   150a4:	mov	r4, r0
   150a8:	bl	113e4 <fileno@plt>
   150ac:	cmp	r0, #0
   150b0:	mov	r0, r4
   150b4:	blt	15130 <__assert_fail@plt+0x3c50>
   150b8:	bl	11318 <__freading@plt>
   150bc:	cmp	r0, #0
   150c0:	bne	150fc <__assert_fail@plt+0x3c1c>
   150c4:	mov	r0, r4
   150c8:	bl	151d8 <__assert_fail@plt+0x3cf8>
   150cc:	cmp	r0, #0
   150d0:	beq	1512c <__assert_fail@plt+0x3c4c>
   150d4:	bl	1139c <__errno_location@plt>
   150d8:	mov	r5, r0
   150dc:	mov	r0, r4
   150e0:	ldr	r4, [r5]
   150e4:	bl	11408 <fclose@plt>
   150e8:	cmp	r4, #0
   150ec:	mvnne	r0, #0
   150f0:	strne	r4, [r5]
   150f4:	add	sp, sp, #12
   150f8:	pop	{r4, r5, pc}
   150fc:	mov	r0, r4
   15100:	bl	113e4 <fileno@plt>
   15104:	mov	r3, #1
   15108:	str	r3, [sp]
   1510c:	mov	r2, #0
   15110:	mov	r3, #0
   15114:	bl	11288 <lseek64@plt>
   15118:	mvn	r3, #0
   1511c:	mvn	r2, #0
   15120:	cmp	r1, r3
   15124:	cmpeq	r0, r2
   15128:	bne	150c4 <__assert_fail@plt+0x3be4>
   1512c:	mov	r0, r4
   15130:	add	sp, sp, #12
   15134:	pop	{r4, r5, lr}
   15138:	b	11408 <fclose@plt>
   1513c:	push	{r1, r2, r3}
   15140:	push	{lr}		; (str lr, [sp, #-4]!)
   15144:	sub	sp, sp, #8
   15148:	ldr	r1, [sp, #12]
   1514c:	ands	r2, r1, #64	; 0x40
   15150:	addne	r3, sp, #16
   15154:	ldrne	r2, [sp, #16]
   15158:	strne	r3, [sp, #4]
   1515c:	bl	112dc <open64@plt>
   15160:	bl	19790 <__assert_fail@plt+0x82b0>
   15164:	add	sp, sp, #8
   15168:	pop	{lr}		; (ldr lr, [sp], #4)
   1516c:	add	sp, sp, #12
   15170:	bx	lr
   15174:	mov	ip, r1
   15178:	push	{r4, r5, r6, r7, r8, lr}
   1517c:	mov	r1, r2
   15180:	mov	r5, r0
   15184:	mov	r2, r3
   15188:	mov	r0, ip
   1518c:	bl	112dc <open64@plt>
   15190:	sub	r3, r5, r0
   15194:	clz	r3, r3
   15198:	lsr	r3, r3, #5
   1519c:	orrs	r3, r3, r0, lsr #31
   151a0:	mov	r4, r0
   151a4:	bne	151d0 <__assert_fail@plt+0x3cf0>
   151a8:	mov	r1, r5
   151ac:	bl	11228 <dup2@plt>
   151b0:	mov	r7, r0
   151b4:	bl	1139c <__errno_location@plt>
   151b8:	mov	r5, r0
   151bc:	mov	r0, r4
   151c0:	ldr	r6, [r5]
   151c4:	mov	r4, r7
   151c8:	bl	114c8 <close@plt>
   151cc:	str	r6, [r5]
   151d0:	mov	r0, r4
   151d4:	pop	{r4, r5, r6, r7, r8, pc}
   151d8:	push	{r4, lr}
   151dc:	subs	r4, r0, #0
   151e0:	sub	sp, sp, #8
   151e4:	beq	15200 <__assert_fail@plt+0x3d20>
   151e8:	bl	11318 <__freading@plt>
   151ec:	cmp	r0, #0
   151f0:	beq	15200 <__assert_fail@plt+0x3d20>
   151f4:	ldr	r3, [r4]
   151f8:	tst	r3, #256	; 0x100
   151fc:	bne	15210 <__assert_fail@plt+0x3d30>
   15200:	mov	r0, r4
   15204:	add	sp, sp, #8
   15208:	pop	{r4, lr}
   1520c:	b	1118c <fflush@plt>
   15210:	mov	r3, #1
   15214:	str	r3, [sp]
   15218:	mov	r2, #0
   1521c:	mov	r3, #0
   15220:	mov	r0, r4
   15224:	bl	15290 <__assert_fail@plt+0x3db0>
   15228:	mov	r0, r4
   1522c:	add	sp, sp, #8
   15230:	pop	{r4, lr}
   15234:	b	1118c <fflush@plt>
   15238:	push	{r4, r5, lr}
   1523c:	sub	sp, sp, #12
   15240:	mov	r5, r0
   15244:	bl	1139c <__errno_location@plt>
   15248:	mov	r2, #0
   1524c:	mov	r4, r0
   15250:	ldr	r3, [r0]
   15254:	str	r2, [r4]
   15258:	mov	r0, r5
   1525c:	str	r3, [sp]
   15260:	str	r3, [sp, #4]
   15264:	bl	111b0 <free@plt>
   15268:	ldr	r3, [r4]
   1526c:	add	r2, sp, #8
   15270:	cmp	r3, #0
   15274:	moveq	r3, #4
   15278:	movne	r3, #0
   1527c:	add	r3, r2, r3
   15280:	ldr	r3, [r3, #-8]
   15284:	str	r3, [r4]
   15288:	add	sp, sp, #12
   1528c:	pop	{r4, r5, pc}
   15290:	push	{r4, r5, r6, r7, r8, lr}
   15294:	sub	sp, sp, #8
   15298:	ldmib	r0, {ip, lr}
   1529c:	mov	r4, r0
   152a0:	ldr	r5, [sp, #32]
   152a4:	cmp	lr, ip
   152a8:	beq	152c0 <__assert_fail@plt+0x3de0>
   152ac:	str	r5, [sp, #32]
   152b0:	mov	r0, r4
   152b4:	add	sp, sp, #8
   152b8:	pop	{r4, r5, r6, r7, r8, lr}
   152bc:	b	11420 <fseeko64@plt>
   152c0:	ldr	lr, [r0, #20]
   152c4:	ldr	ip, [r0, #16]
   152c8:	cmp	lr, ip
   152cc:	bne	152ac <__assert_fail@plt+0x3dcc>
   152d0:	ldr	r8, [r0, #36]	; 0x24
   152d4:	cmp	r8, #0
   152d8:	bne	152ac <__assert_fail@plt+0x3dcc>
   152dc:	mov	r6, r2
   152e0:	mov	r7, r3
   152e4:	bl	113e4 <fileno@plt>
   152e8:	mov	r2, r6
   152ec:	mov	r3, r7
   152f0:	str	r5, [sp]
   152f4:	bl	11288 <lseek64@plt>
   152f8:	mvn	r3, #0
   152fc:	mvn	r2, #0
   15300:	cmp	r1, r3
   15304:	cmpeq	r0, r2
   15308:	beq	15328 <__assert_fail@plt+0x3e48>
   1530c:	ldr	r3, [r4]
   15310:	strd	r0, [r4, #80]	; 0x50
   15314:	mov	r0, r8
   15318:	bic	r3, r3, #16
   1531c:	str	r3, [r4]
   15320:	add	sp, sp, #8
   15324:	pop	{r4, r5, r6, r7, r8, pc}
   15328:	mvn	r0, #0
   1532c:	b	15320 <__assert_fail@plt+0x3e40>
   15330:	push	{r4, r5, r6, r7, r8, lr}
   15334:	subs	r4, r2, #0
   15338:	beq	15398 <__assert_fail@plt+0x3eb8>
   1533c:	mov	r7, r0
   15340:	mov	r5, r1
   15344:	mov	r6, #0
   15348:	b	15364 <__assert_fail@plt+0x3e84>
   1534c:	cmp	r0, #0
   15350:	beq	15384 <__assert_fail@plt+0x3ea4>
   15354:	subs	r4, r4, r0
   15358:	add	r6, r6, r0
   1535c:	add	r5, r5, r0
   15360:	beq	1537c <__assert_fail@plt+0x3e9c>
   15364:	mov	r2, r4
   15368:	mov	r1, r5
   1536c:	mov	r0, r7
   15370:	bl	194bc <__assert_fail@plt+0x7fdc>
   15374:	cmn	r0, #1
   15378:	bne	1534c <__assert_fail@plt+0x3e6c>
   1537c:	mov	r0, r6
   15380:	pop	{r4, r5, r6, r7, r8, pc}
   15384:	bl	1139c <__errno_location@plt>
   15388:	mov	r3, #28
   1538c:	str	r3, [r0]
   15390:	mov	r0, r6
   15394:	pop	{r4, r5, r6, r7, r8, pc}
   15398:	mov	r6, r4
   1539c:	b	1537c <__assert_fail@plt+0x3e9c>
   153a0:	push	{r4, r5, r6, r8, r9, lr}
   153a4:	mov	r4, r0
   153a8:	mov	r5, r1
   153ac:	add	r6, r2, #20
   153b0:	mov	r8, #10
   153b4:	mov	r9, #0
   153b8:	mov	r3, #0
   153bc:	strb	r3, [r2, #20]
   153c0:	mov	r0, r4
   153c4:	mov	r1, r5
   153c8:	mov	r2, r8
   153cc:	mov	r3, r9
   153d0:	bl	1c22c <__assert_fail@plt+0xad4c>
   153d4:	mov	r0, r4
   153d8:	mov	r1, r5
   153dc:	mov	r3, r9
   153e0:	add	r2, r2, #48	; 0x30
   153e4:	strb	r2, [r6, #-1]!
   153e8:	mov	r2, r8
   153ec:	bl	1c22c <__assert_fail@plt+0xad4c>
   153f0:	mov	r4, r0
   153f4:	mov	r5, r1
   153f8:	orrs	r3, r4, r5
   153fc:	bne	153c0 <__assert_fail@plt+0x3ee0>
   15400:	mov	r0, r6
   15404:	pop	{r4, r5, r6, r8, r9, pc}
   15408:	push	{r4, r5, r6, lr}
   1540c:	subs	r4, r0, #0
   15410:	beq	15484 <__assert_fail@plt+0x3fa4>
   15414:	mov	r1, #47	; 0x2f
   15418:	bl	11468 <strrchr@plt>
   1541c:	subs	r5, r0, #0
   15420:	beq	15470 <__assert_fail@plt+0x3f90>
   15424:	add	r6, r5, #1
   15428:	sub	r3, r6, r4
   1542c:	cmp	r3, #6
   15430:	ble	15470 <__assert_fail@plt+0x3f90>
   15434:	mov	r2, #7
   15438:	ldr	r1, [pc, #96]	; 154a0 <__assert_fail@plt+0x3fc0>
   1543c:	sub	r0, r5, #6
   15440:	bl	114b0 <strncmp@plt>
   15444:	cmp	r0, #0
   15448:	bne	15470 <__assert_fail@plt+0x3f90>
   1544c:	mov	r2, #3
   15450:	ldr	r1, [pc, #76]	; 154a4 <__assert_fail@plt+0x3fc4>
   15454:	mov	r0, r6
   15458:	bl	114b0 <strncmp@plt>
   1545c:	cmp	r0, #0
   15460:	movne	r4, r6
   15464:	ldreq	r3, [pc, #60]	; 154a8 <__assert_fail@plt+0x3fc8>
   15468:	addeq	r4, r5, #4
   1546c:	streq	r4, [r3]
   15470:	ldr	r2, [pc, #52]	; 154ac <__assert_fail@plt+0x3fcc>
   15474:	ldr	r3, [pc, #52]	; 154b0 <__assert_fail@plt+0x3fd0>
   15478:	str	r4, [r2]
   1547c:	str	r4, [r3]
   15480:	pop	{r4, r5, r6, pc}
   15484:	ldr	r3, [pc, #40]	; 154b4 <__assert_fail@plt+0x3fd4>
   15488:	mov	r2, #55	; 0x37
   1548c:	mov	r1, #1
   15490:	ldr	r3, [r3]
   15494:	ldr	r0, [pc, #28]	; 154b8 <__assert_fail@plt+0x3fd8>
   15498:	bl	1127c <fwrite@plt>
   1549c:	bl	114bc <abort@plt>
   154a0:	andeq	sp, r1, r4, asr #13
   154a4:	andeq	sp, r1, ip, asr #13
   154a8:	andeq	lr, r2, r0, asr r3
   154ac:	andeq	lr, r2, ip, lsr #10
   154b0:	andeq	lr, r2, r4, asr r3
   154b4:	andeq	lr, r2, r0, ror #6
   154b8:	andeq	sp, r1, ip, lsl #13
   154bc:	push	{r4, r5, r6, lr}
   154c0:	mov	r4, r0
   154c4:	mov	r5, r1
   154c8:	bl	1ba38 <__assert_fail@plt+0xa558>
   154cc:	ldrb	r3, [r0]
   154d0:	bic	r3, r3, #32
   154d4:	cmp	r3, #85	; 0x55
   154d8:	bne	15538 <__assert_fail@plt+0x4058>
   154dc:	ldrb	r3, [r0, #1]
   154e0:	bic	r3, r3, #32
   154e4:	cmp	r3, #84	; 0x54
   154e8:	bne	15574 <__assert_fail@plt+0x4094>
   154ec:	ldrb	r3, [r0, #2]
   154f0:	bic	r3, r3, #32
   154f4:	cmp	r3, #70	; 0x46
   154f8:	bne	15574 <__assert_fail@plt+0x4094>
   154fc:	ldrb	r3, [r0, #3]
   15500:	cmp	r3, #45	; 0x2d
   15504:	bne	15574 <__assert_fail@plt+0x4094>
   15508:	ldrb	r3, [r0, #4]
   1550c:	cmp	r3, #56	; 0x38
   15510:	bne	15574 <__assert_fail@plt+0x4094>
   15514:	ldrb	r3, [r0, #5]
   15518:	cmp	r3, #0
   1551c:	bne	15574 <__assert_fail@plt+0x4094>
   15520:	ldrb	r2, [r4]
   15524:	ldr	r3, [pc, #152]	; 155c4 <__assert_fail@plt+0x40e4>
   15528:	ldr	r0, [pc, #152]	; 155c8 <__assert_fail@plt+0x40e8>
   1552c:	cmp	r2, #96	; 0x60
   15530:	movne	r0, r3
   15534:	pop	{r4, r5, r6, pc}
   15538:	cmp	r3, #71	; 0x47
   1553c:	bne	15574 <__assert_fail@plt+0x4094>
   15540:	ldrb	r3, [r0, #1]
   15544:	bic	r3, r3, #32
   15548:	cmp	r3, #66	; 0x42
   1554c:	bne	15574 <__assert_fail@plt+0x4094>
   15550:	ldrb	r3, [r0, #2]
   15554:	cmp	r3, #49	; 0x31
   15558:	bne	15574 <__assert_fail@plt+0x4094>
   1555c:	ldrb	r3, [r0, #3]
   15560:	cmp	r3, #56	; 0x38
   15564:	bne	15574 <__assert_fail@plt+0x4094>
   15568:	ldrb	r3, [r0, #4]
   1556c:	cmp	r3, #48	; 0x30
   15570:	beq	15588 <__assert_fail@plt+0x40a8>
   15574:	ldr	r3, [pc, #80]	; 155cc <__assert_fail@plt+0x40ec>
   15578:	cmp	r5, #9
   1557c:	ldr	r0, [pc, #76]	; 155d0 <__assert_fail@plt+0x40f0>
   15580:	movne	r0, r3
   15584:	pop	{r4, r5, r6, pc}
   15588:	ldrb	r3, [r0, #5]
   1558c:	cmp	r3, #51	; 0x33
   15590:	bne	15574 <__assert_fail@plt+0x4094>
   15594:	ldrb	r3, [r0, #6]
   15598:	cmp	r3, #48	; 0x30
   1559c:	bne	15574 <__assert_fail@plt+0x4094>
   155a0:	ldrb	r3, [r0, #7]
   155a4:	cmp	r3, #0
   155a8:	bne	15574 <__assert_fail@plt+0x4094>
   155ac:	ldrb	r2, [r4]
   155b0:	ldr	r3, [pc, #28]	; 155d4 <__assert_fail@plt+0x40f4>
   155b4:	ldr	r0, [pc, #28]	; 155d8 <__assert_fail@plt+0x40f8>
   155b8:	cmp	r2, #96	; 0x60
   155bc:	movne	r0, r3
   155c0:	pop	{r4, r5, r6, pc}
   155c4:	andeq	sp, r1, r8, lsr #14
   155c8:	andeq	sp, r1, r4, lsr #14
   155cc:	andeq	sp, r1, r4, lsr r7
   155d0:	andeq	ip, r1, r4, lsr r7
   155d4:	andeq	sp, r1, r0, lsr r7
   155d8:	andeq	sp, r1, ip, lsr #14
   155dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155e0:	sub	sp, sp, #140	; 0x8c
   155e4:	mov	r9, r1
   155e8:	str	r3, [sp, #24]
   155ec:	mov	r3, #1
   155f0:	mov	sl, r0
   155f4:	str	r2, [sp, #44]	; 0x2c
   155f8:	str	r3, [sp, #28]
   155fc:	bl	112a0 <__ctype_get_mb_cur_max@plt>
   15600:	ldr	r3, [sp, #180]	; 0xb4
   15604:	mov	fp, r9
   15608:	mov	r9, sl
   1560c:	lsr	r3, r3, #1
   15610:	and	r3, r3, #1
   15614:	str	r3, [sp, #40]	; 0x28
   15618:	ldr	r3, [sp, #180]	; 0xb4
   1561c:	mov	r2, #0
   15620:	and	r3, r3, #4
   15624:	str	r3, [sp, #100]	; 0x64
   15628:	ldr	r3, [sp, #180]	; 0xb4
   1562c:	str	r2, [sp, #76]	; 0x4c
   15630:	and	r3, r3, #1
   15634:	str	r3, [sp, #96]	; 0x60
   15638:	str	r2, [sp, #36]	; 0x24
   1563c:	str	r2, [sp, #56]	; 0x38
   15640:	str	r2, [sp, #68]	; 0x44
   15644:	str	r2, [sp, #72]	; 0x48
   15648:	str	r2, [sp, #84]	; 0x54
   1564c:	str	r0, [sp, #80]	; 0x50
   15650:	ldr	r3, [sp, #176]	; 0xb0
   15654:	cmp	r3, #10
   15658:	ldrls	pc, [pc, r3, lsl #2]
   1565c:	b	16834 <__assert_fail@plt+0x5354>
   15660:	andeq	r5, r1, ip, lsl #13
   15664:	andeq	r5, r1, ip, lsr #19
   15668:	andeq	r5, r1, r4, lsl #22
   1566c:	andeq	r5, r1, r0, ror #19
   15670:	andeq	r5, r1, r8, asr fp
   15674:	andeq	r5, r1, r8, lsr fp
   15678:	andeq	r5, r1, r0, lsl #20
   1567c:	andeq	r5, r1, r4, lsr #20
   15680:	andeq	r5, r1, ip, asr #20
   15684:	andeq	r5, r1, ip, asr #20
   15688:	andeq	r5, r1, ip, asr #20
   1568c:	mov	r3, #0
   15690:	ldr	r1, [sp, #56]	; 0x38
   15694:	ldr	r2, [sp, #176]	; 0xb0
   15698:	ldr	lr, [sp, #176]	; 0xb0
   1569c:	mov	r8, r3
   156a0:	mov	ip, r3
   156a4:	str	r3, [sp, #40]	; 0x28
   156a8:	mov	r3, r1
   156ac:	cmp	r2, #2
   156b0:	moveq	r3, #0
   156b4:	andne	r3, r3, #1
   156b8:	mov	r0, r3
   156bc:	str	r3, [sp, #92]	; 0x5c
   156c0:	ldr	r3, [sp, #68]	; 0x44
   156c4:	sub	lr, lr, #2
   156c8:	adds	r2, r3, #0
   156cc:	movne	r2, #1
   156d0:	and	r3, r1, ip
   156d4:	and	r3, r2, r3
   156d8:	clz	lr, lr
   156dc:	str	r3, [sp, #88]	; 0x58
   156e0:	lsr	lr, lr, #5
   156e4:	mov	r3, ip
   156e8:	and	r3, r3, lr
   156ec:	mov	sl, #0
   156f0:	and	r0, r2, r0
   156f4:	str	r3, [sp, #64]	; 0x40
   156f8:	eor	r3, r1, #1
   156fc:	str	lr, [sp, #52]	; 0x34
   15700:	str	r0, [sp, #48]	; 0x30
   15704:	str	r3, [sp, #60]	; 0x3c
   15708:	ldr	r3, [sp, #24]
   1570c:	cmn	r3, #1
   15710:	beq	15c40 <__assert_fail@plt+0x4760>
   15714:	subs	r7, r3, sl
   15718:	movne	r7, #1
   1571c:	cmp	r7, #0
   15720:	beq	15c58 <__assert_fail@plt+0x4778>
   15724:	ldr	r3, [sp, #48]	; 0x30
   15728:	cmp	r3, #0
   1572c:	beq	15fc4 <__assert_fail@plt+0x4ae4>
   15730:	ldr	r2, [sp, #68]	; 0x44
   15734:	ldr	r1, [sp, #24]
   15738:	cmp	r2, #1
   1573c:	mov	r3, r2
   15740:	movls	r3, #0
   15744:	movhi	r3, #1
   15748:	cmn	r1, #1
   1574c:	movne	r3, #0
   15750:	cmp	r3, #0
   15754:	add	r4, sl, r2
   15758:	beq	15768 <__assert_fail@plt+0x4288>
   1575c:	ldr	r0, [sp, #44]	; 0x2c
   15760:	bl	11354 <strlen@plt>
   15764:	str	r0, [sp, #24]
   15768:	ldr	r3, [sp, #24]
   1576c:	cmp	r3, r4
   15770:	ldr	r3, [sp, #44]	; 0x2c
   15774:	add	r5, r3, sl
   15778:	bcc	15fcc <__assert_fail@plt+0x4aec>
   1577c:	mov	r0, r5
   15780:	ldr	r2, [sp, #68]	; 0x44
   15784:	ldr	r1, [sp, #72]	; 0x48
   15788:	bl	11204 <memcmp@plt>
   1578c:	cmp	r0, #0
   15790:	bne	15fcc <__assert_fail@plt+0x4aec>
   15794:	ldr	r3, [sp, #40]	; 0x28
   15798:	cmp	r3, #0
   1579c:	bne	16988 <__assert_fail@plt+0x54a8>
   157a0:	ldrb	r4, [r5]
   157a4:	cmp	r4, #126	; 0x7e
   157a8:	ldrls	pc, [pc, r4, lsl #2]
   157ac:	b	168c4 <__assert_fail@plt+0x53e4>
   157b0:	andeq	r5, r1, r4, lsl #29
   157b4:	andeq	r6, r1, r4, asr #17
   157b8:	andeq	r6, r1, r4, asr #17
   157bc:	andeq	r6, r1, r4, asr #17
   157c0:	andeq	r6, r1, r4, asr #17
   157c4:	andeq	r6, r1, r4, asr #17
   157c8:	andeq	r6, r1, r4, asr #17
   157cc:	andeq	r5, r1, r0, ror lr
   157d0:	andeq	r5, r1, ip, asr lr
   157d4:	andeq	r5, r1, r8, lsr lr
   157d8:	andeq	r5, r1, r8, lsl lr
   157dc:	andeq	r5, r1, r8, asr #28
   157e0:	andeq	r5, r1, r0, lsl #27
   157e4:			; <UNDEFINED> instruction: 0x00015fb4
   157e8:	andeq	r6, r1, r4, asr #17
   157ec:	andeq	r6, r1, r4, asr #17
   157f0:	andeq	r6, r1, r4, asr #17
   157f4:	andeq	r6, r1, r4, asr #17
   157f8:	andeq	r6, r1, r4, asr #17
   157fc:	andeq	r6, r1, r4, asr #17
   15800:	andeq	r6, r1, r4, asr #17
   15804:	andeq	r6, r1, r4, asr #17
   15808:	andeq	r6, r1, r4, asr #17
   1580c:	andeq	r6, r1, r4, asr #17
   15810:	andeq	r6, r1, r4, asr #17
   15814:	andeq	r6, r1, r4, asr #17
   15818:	andeq	r6, r1, r4, asr #17
   1581c:	andeq	r6, r1, r4, asr #17
   15820:	andeq	r6, r1, r4, asr #17
   15824:	andeq	r6, r1, r4, asr #17
   15828:	andeq	r6, r1, r4, asr #17
   1582c:	andeq	r6, r1, r4, asr #17
   15830:	andeq	r5, r1, r4, lsr #31
   15834:	andeq	r5, r1, r4, lsl #31
   15838:	andeq	r5, r1, r4, lsl #31
   1583c:	andeq	r5, r1, r4, ror #30
   15840:	andeq	r5, r1, r4, lsl #31
   15844:	andeq	r5, r1, r0, ror sp
   15848:	andeq	r5, r1, r4, lsl #31
   1584c:	andeq	r5, r1, ip, asr #26
   15850:	andeq	r5, r1, r4, lsl #31
   15854:	andeq	r5, r1, r4, lsl #31
   15858:	andeq	r5, r1, r4, lsl #31
   1585c:	andeq	r5, r1, r0, ror sp
   15860:	andeq	r5, r1, r0, ror sp
   15864:	andeq	r5, r1, r0, ror sp
   15868:	andeq	r5, r1, r0, ror sp
   1586c:	andeq	r5, r1, r0, ror sp
   15870:	andeq	r5, r1, r0, ror sp
   15874:	andeq	r5, r1, r0, ror sp
   15878:	andeq	r5, r1, r0, ror sp
   1587c:	andeq	r5, r1, r0, ror sp
   15880:	andeq	r5, r1, r0, ror sp
   15884:	andeq	r5, r1, r0, ror sp
   15888:	andeq	r5, r1, r0, ror sp
   1588c:	andeq	r5, r1, r0, ror sp
   15890:	andeq	r5, r1, r0, ror sp
   15894:	andeq	r5, r1, r0, ror sp
   15898:	andeq	r5, r1, r0, ror sp
   1589c:	andeq	r5, r1, r4, lsl #31
   158a0:	andeq	r5, r1, r4, lsl #31
   158a4:	andeq	r5, r1, r4, lsl #31
   158a8:	andeq	r5, r1, r4, lsl #31
   158ac:	strdeq	r5, [r1], -ip
   158b0:	andeq	r6, r1, r4, asr #17
   158b4:	andeq	r5, r1, r0, ror sp
   158b8:	andeq	r5, r1, r0, ror sp
   158bc:	andeq	r5, r1, r0, ror sp
   158c0:	andeq	r5, r1, r0, ror sp
   158c4:	andeq	r5, r1, r0, ror sp
   158c8:	andeq	r5, r1, r0, ror sp
   158cc:	andeq	r5, r1, r0, ror sp
   158d0:	andeq	r5, r1, r0, ror sp
   158d4:	andeq	r5, r1, r0, ror sp
   158d8:	andeq	r5, r1, r0, ror sp
   158dc:	andeq	r5, r1, r0, ror sp
   158e0:	andeq	r5, r1, r0, ror sp
   158e4:	andeq	r5, r1, r0, ror sp
   158e8:	andeq	r5, r1, r0, ror sp
   158ec:	andeq	r5, r1, r0, ror sp
   158f0:	andeq	r5, r1, r0, ror sp
   158f4:	andeq	r5, r1, r0, ror sp
   158f8:	andeq	r5, r1, r0, ror sp
   158fc:	andeq	r5, r1, r0, ror sp
   15900:	andeq	r5, r1, r0, ror sp
   15904:	andeq	r5, r1, r0, ror sp
   15908:	andeq	r5, r1, r0, ror sp
   1590c:	andeq	r5, r1, r0, ror sp
   15910:	andeq	r5, r1, r0, ror sp
   15914:	andeq	r5, r1, r0, ror sp
   15918:	andeq	r5, r1, r0, ror sp
   1591c:	andeq	r5, r1, r4, lsl #31
   15920:	andeq	r5, r1, r8, asr #25
   15924:	andeq	r5, r1, r0, ror sp
   15928:	andeq	r5, r1, r4, lsl #31
   1592c:	andeq	r5, r1, r0, ror sp
   15930:	andeq	r5, r1, r4, lsl #31
   15934:	andeq	r5, r1, r0, ror sp
   15938:	andeq	r5, r1, r0, ror sp
   1593c:	andeq	r5, r1, r0, ror sp
   15940:	andeq	r5, r1, r0, ror sp
   15944:	andeq	r5, r1, r0, ror sp
   15948:	andeq	r5, r1, r0, ror sp
   1594c:	andeq	r5, r1, r0, ror sp
   15950:	andeq	r5, r1, r0, ror sp
   15954:	andeq	r5, r1, r0, ror sp
   15958:	andeq	r5, r1, r0, ror sp
   1595c:	andeq	r5, r1, r0, ror sp
   15960:	andeq	r5, r1, r0, ror sp
   15964:	andeq	r5, r1, r0, ror sp
   15968:	andeq	r5, r1, r0, ror sp
   1596c:	andeq	r5, r1, r0, ror sp
   15970:	andeq	r5, r1, r0, ror sp
   15974:	andeq	r5, r1, r0, ror sp
   15978:	andeq	r5, r1, r0, ror sp
   1597c:	andeq	r5, r1, r0, ror sp
   15980:	andeq	r5, r1, r0, ror sp
   15984:	andeq	r5, r1, r0, ror sp
   15988:	andeq	r5, r1, r0, ror sp
   1598c:	andeq	r5, r1, r0, ror sp
   15990:	andeq	r5, r1, r0, ror sp
   15994:	andeq	r5, r1, r0, ror sp
   15998:	andeq	r5, r1, r0, ror sp
   1599c:	andeq	r5, r1, r0, lsl #23
   159a0:	andeq	r5, r1, r4, lsl #31
   159a4:	andeq	r5, r1, r0, lsl #23
   159a8:	andeq	r5, r1, r4, ror #30
   159ac:	mov	r3, #1
   159b0:	str	r3, [sp, #40]	; 0x28
   159b4:	str	r3, [sp, #68]	; 0x44
   159b8:	mov	r8, #0
   159bc:	ldr	r3, [pc, #4056]	; 1699c <__assert_fail@plt+0x54bc>
   159c0:	str	r3, [sp, #72]	; 0x48
   159c4:	mov	r3, #2
   159c8:	str	r3, [sp, #176]	; 0xb0
   159cc:	ldr	r1, [sp, #56]	; 0x38
   159d0:	mov	r2, r3
   159d4:	ldr	ip, [sp, #40]	; 0x28
   159d8:	mov	lr, r3
   159dc:	b	156a8 <__assert_fail@plt+0x41c8>
   159e0:	mov	r3, #1
   159e4:	str	r3, [sp, #56]	; 0x38
   159e8:	str	r3, [sp, #68]	; 0x44
   159ec:	str	r3, [sp, #40]	; 0x28
   159f0:	ldr	r3, [pc, #4004]	; 1699c <__assert_fail@plt+0x54bc>
   159f4:	mov	r8, #0
   159f8:	str	r3, [sp, #72]	; 0x48
   159fc:	b	159c4 <__assert_fail@plt+0x44e4>
   15a00:	mov	r3, #1
   15a04:	str	r3, [sp, #56]	; 0x38
   15a08:	str	r3, [sp, #68]	; 0x44
   15a0c:	str	r3, [sp, #40]	; 0x28
   15a10:	ldr	r3, [pc, #3976]	; 169a0 <__assert_fail@plt+0x54c0>
   15a14:	mov	r8, #0
   15a18:	str	r3, [sp, #72]	; 0x48
   15a1c:	mov	r3, #5
   15a20:	b	159c8 <__assert_fail@plt+0x44e8>
   15a24:	mov	r3, #0
   15a28:	str	r3, [sp, #40]	; 0x28
   15a2c:	mov	r3, #1
   15a30:	str	r3, [sp, #56]	; 0x38
   15a34:	mov	r8, #0
   15a38:	mov	r1, r3
   15a3c:	ldr	r2, [sp, #176]	; 0xb0
   15a40:	ldr	ip, [sp, #40]	; 0x28
   15a44:	ldr	lr, [sp, #176]	; 0xb0
   15a48:	b	156a8 <__assert_fail@plt+0x41c8>
   15a4c:	ldr	r3, [sp, #176]	; 0xb0
   15a50:	cmp	r3, #10
   15a54:	beq	15a98 <__assert_fail@plt+0x45b8>
   15a58:	mov	r2, #5
   15a5c:	ldr	r1, [pc, #3904]	; 169a4 <__assert_fail@plt+0x54c4>
   15a60:	mov	r0, #0
   15a64:	bl	1121c <dcgettext@plt>
   15a68:	ldr	r2, [pc, #3892]	; 169a4 <__assert_fail@plt+0x54c4>
   15a6c:	cmp	r0, r2
   15a70:	str	r0, [sp, #188]	; 0xbc
   15a74:	beq	16b30 <__assert_fail@plt+0x5650>
   15a78:	mov	r2, #5
   15a7c:	ldr	r1, [pc, #3864]	; 1699c <__assert_fail@plt+0x54bc>
   15a80:	mov	r0, #0
   15a84:	bl	1121c <dcgettext@plt>
   15a88:	ldr	r2, [pc, #3852]	; 1699c <__assert_fail@plt+0x54bc>
   15a8c:	cmp	r0, r2
   15a90:	str	r0, [sp, #192]	; 0xc0
   15a94:	beq	16b20 <__assert_fail@plt+0x5640>
   15a98:	ldr	r8, [sp, #40]	; 0x28
   15a9c:	cmp	r8, #0
   15aa0:	movne	r8, #0
   15aa4:	bne	15ad4 <__assert_fail@plt+0x45f4>
   15aa8:	ldr	r3, [sp, #188]	; 0xbc
   15aac:	ldrb	r3, [r3]
   15ab0:	cmp	r3, #0
   15ab4:	beq	15ad4 <__assert_fail@plt+0x45f4>
   15ab8:	ldr	r2, [sp, #188]	; 0xbc
   15abc:	cmp	fp, r8
   15ac0:	strbhi	r3, [r9, r8]
   15ac4:	ldrb	r3, [r2, #1]!
   15ac8:	add	r8, r8, #1
   15acc:	cmp	r3, #0
   15ad0:	bne	15abc <__assert_fail@plt+0x45dc>
   15ad4:	ldr	r0, [sp, #192]	; 0xc0
   15ad8:	bl	11354 <strlen@plt>
   15adc:	ldr	r3, [sp, #192]	; 0xc0
   15ae0:	ldr	r2, [sp, #176]	; 0xb0
   15ae4:	str	r3, [sp, #72]	; 0x48
   15ae8:	mov	r3, #1
   15aec:	str	r3, [sp, #56]	; 0x38
   15af0:	mov	r1, r3
   15af4:	ldr	ip, [sp, #40]	; 0x28
   15af8:	ldr	lr, [sp, #176]	; 0xb0
   15afc:	str	r0, [sp, #68]	; 0x44
   15b00:	b	156a8 <__assert_fail@plt+0x41c8>
   15b04:	ldr	r3, [sp, #40]	; 0x28
   15b08:	cmp	r3, #0
   15b0c:	beq	167b4 <__assert_fail@plt+0x52d4>
   15b10:	mov	r3, #1
   15b14:	str	r3, [sp, #68]	; 0x44
   15b18:	ldr	r3, [pc, #3708]	; 1699c <__assert_fail@plt+0x54bc>
   15b1c:	str	r3, [sp, #72]	; 0x48
   15b20:	mov	r8, #0
   15b24:	ldr	r1, [sp, #56]	; 0x38
   15b28:	ldr	r2, [sp, #176]	; 0xb0
   15b2c:	ldr	ip, [sp, #40]	; 0x28
   15b30:	ldr	lr, [sp, #176]	; 0xb0
   15b34:	b	156a8 <__assert_fail@plt+0x41c8>
   15b38:	ldr	r3, [sp, #40]	; 0x28
   15b3c:	cmp	r3, #0
   15b40:	beq	16838 <__assert_fail@plt+0x5358>
   15b44:	str	r3, [sp, #56]	; 0x38
   15b48:	mov	r3, #1
   15b4c:	str	r3, [sp, #68]	; 0x44
   15b50:	ldr	r3, [pc, #3656]	; 169a0 <__assert_fail@plt+0x54c0>
   15b54:	b	15b1c <__assert_fail@plt+0x463c>
   15b58:	ldr	r3, [sp, #40]	; 0x28
   15b5c:	cmp	r3, #0
   15b60:	mov	r3, #1
   15b64:	streq	r3, [sp, #56]	; 0x38
   15b68:	beq	167b4 <__assert_fail@plt+0x52d4>
   15b6c:	str	r3, [sp, #68]	; 0x44
   15b70:	ldr	r3, [pc, #3620]	; 1699c <__assert_fail@plt+0x54bc>
   15b74:	mov	r8, #0
   15b78:	str	r3, [sp, #72]	; 0x48
   15b7c:	b	159c4 <__assert_fail@plt+0x44e4>
   15b80:	ldr	r3, [sp, #24]
   15b84:	ldr	r6, [sp, #48]	; 0x30
   15b88:	cmn	r3, #1
   15b8c:	beq	161e8 <__assert_fail@plt+0x4d08>
   15b90:	subs	r3, r3, #1
   15b94:	movne	r3, #1
   15b98:	cmp	r3, #0
   15b9c:	beq	15f68 <__assert_fail@plt+0x4a88>
   15ba0:	ldr	r1, [sp, #52]	; 0x34
   15ba4:	mov	r7, r3
   15ba8:	mov	r3, #0
   15bac:	str	r3, [sp, #32]
   15bb0:	ldr	r3, [sp, #60]	; 0x3c
   15bb4:	orr	r2, r1, r3
   15bb8:	ldr	r3, [sp, #40]	; 0x28
   15bbc:	eor	r2, r2, #1
   15bc0:	orr	r2, r3, r2
   15bc4:	tst	r2, #255	; 0xff
   15bc8:	bne	164ec <__assert_fail@plt+0x500c>
   15bcc:	cmp	r6, #0
   15bd0:	bne	15dac <__assert_fail@plt+0x48cc>
   15bd4:	ldr	r3, [sp, #36]	; 0x24
   15bd8:	add	sl, sl, #1
   15bdc:	and	r3, r3, r7
   15be0:	uxtb	r6, r3
   15be4:	cmp	r6, #0
   15be8:	beq	15c14 <__assert_fail@plt+0x4734>
   15bec:	cmp	fp, r8
   15bf0:	movhi	r3, #39	; 0x27
   15bf4:	strbhi	r3, [r9, r8]
   15bf8:	add	r3, r8, #1
   15bfc:	cmp	fp, r3
   15c00:	movhi	r2, #39	; 0x27
   15c04:	add	r8, r8, #2
   15c08:	strbhi	r2, [r9, r3]
   15c0c:	mov	r3, #0
   15c10:	str	r3, [sp, #36]	; 0x24
   15c14:	ldr	r2, [sp, #32]
   15c18:	cmp	r8, fp
   15c1c:	ldr	r3, [sp, #28]
   15c20:	strbcc	r4, [r9, r8]
   15c24:	cmp	r2, #0
   15c28:	moveq	r3, #0
   15c2c:	str	r3, [sp, #28]
   15c30:	ldr	r3, [sp, #24]
   15c34:	add	r8, r8, #1
   15c38:	cmn	r3, #1
   15c3c:	bne	15714 <__assert_fail@plt+0x4234>
   15c40:	ldr	r3, [sp, #44]	; 0x2c
   15c44:	ldrb	r3, [r3, sl]
   15c48:	adds	r7, r3, #0
   15c4c:	movne	r7, #1
   15c50:	cmp	r7, #0
   15c54:	bne	15724 <__assert_fail@plt+0x4244>
   15c58:	ldr	r3, [sp, #64]	; 0x40
   15c5c:	cmp	r8, #0
   15c60:	movne	r3, #0
   15c64:	andeq	r3, r3, #1
   15c68:	cmp	r3, #0
   15c6c:	str	r3, [sp, #64]	; 0x40
   15c70:	bne	16714 <__assert_fail@plt+0x5234>
   15c74:	ldr	r3, [sp, #40]	; 0x28
   15c78:	ldr	r2, [sp, #52]	; 0x34
   15c7c:	eor	r3, r3, #1
   15c80:	ands	r2, r2, r3
   15c84:	beq	16b40 <__assert_fail@plt+0x5660>
   15c88:	ldr	r3, [sp, #76]	; 0x4c
   15c8c:	cmp	r3, #0
   15c90:	beq	16b10 <__assert_fail@plt+0x5630>
   15c94:	ldr	r3, [sp, #28]
   15c98:	cmp	r3, #0
   15c9c:	bne	16acc <__assert_fail@plt+0x55ec>
   15ca0:	ldr	r2, [sp, #84]	; 0x54
   15ca4:	clz	r3, fp
   15ca8:	cmp	r2, #0
   15cac:	lsr	r3, r3, #5
   15cb0:	moveq	r3, #0
   15cb4:	cmp	r3, #0
   15cb8:	beq	16a6c <__assert_fail@plt+0x558c>
   15cbc:	mov	fp, r2
   15cc0:	str	r3, [sp, #76]	; 0x4c
   15cc4:	b	15650 <__assert_fail@plt+0x4170>
   15cc8:	ldr	r3, [sp, #176]	; 0xb0
   15ccc:	ldr	r6, [sp, #48]	; 0x30
   15cd0:	cmp	r3, #2
   15cd4:	beq	1620c <__assert_fail@plt+0x4d2c>
   15cd8:	ldr	r3, [sp, #88]	; 0x58
   15cdc:	cmp	r3, #0
   15ce0:	beq	16790 <__assert_fail@plt+0x52b0>
   15ce4:	mov	r3, #0
   15ce8:	add	sl, sl, #1
   15cec:	ldr	r6, [sp, #36]	; 0x24
   15cf0:	str	r3, [sp, #32]
   15cf4:	mov	r4, #92	; 0x5c
   15cf8:	b	15be4 <__assert_fail@plt+0x4704>
   15cfc:	ldr	r3, [sp, #176]	; 0xb0
   15d00:	ldr	r6, [sp, #48]	; 0x30
   15d04:	cmp	r3, #2
   15d08:	beq	1623c <__assert_fail@plt+0x4d5c>
   15d0c:	cmp	r3, #5
   15d10:	bne	167a0 <__assert_fail@plt+0x52c0>
   15d14:	ldr	r3, [sp, #100]	; 0x64
   15d18:	cmp	r3, #0
   15d1c:	beq	16804 <__assert_fail@plt+0x5324>
   15d20:	ldr	r2, [sp, #24]
   15d24:	add	r3, sl, #2
   15d28:	cmp	r2, r3
   15d2c:	bls	15d3c <__assert_fail@plt+0x485c>
   15d30:	ldrb	r4, [r5, #1]
   15d34:	cmp	r4, #63	; 0x3f
   15d38:	beq	169ac <__assert_fail@plt+0x54cc>
   15d3c:	mov	r1, #0
   15d40:	str	r1, [sp, #32]
   15d44:	mov	r4, #63	; 0x3f
   15d48:	b	15bb0 <__assert_fail@plt+0x46d0>
   15d4c:	ldr	r3, [sp, #176]	; 0xb0
   15d50:	ldr	r6, [sp, #48]	; 0x30
   15d54:	cmp	r3, #2
   15d58:	beq	16268 <__assert_fail@plt+0x4d88>
   15d5c:	str	r7, [sp, #32]
   15d60:	str	r7, [sp, #76]	; 0x4c
   15d64:	mov	r1, #0
   15d68:	mov	r4, #39	; 0x27
   15d6c:	b	15bb0 <__assert_fail@plt+0x46d0>
   15d70:	ldr	r6, [sp, #48]	; 0x30
   15d74:	ldr	r1, [sp, #52]	; 0x34
   15d78:	str	r7, [sp, #32]
   15d7c:	b	15bb0 <__assert_fail@plt+0x46d0>
   15d80:	ldr	r6, [sp, #48]	; 0x30
   15d84:	ldr	r1, [sp, #52]	; 0x34
   15d88:	mov	r4, #12
   15d8c:	mov	r3, #102	; 0x66
   15d90:	ldr	r2, [sp, #56]	; 0x38
   15d94:	cmp	r2, #0
   15d98:	streq	r2, [sp, #32]
   15d9c:	beq	15bb0 <__assert_fail@plt+0x46d0>
   15da0:	mov	r4, r3
   15da4:	mov	r3, #0
   15da8:	str	r3, [sp, #32]
   15dac:	ldr	r3, [sp, #40]	; 0x28
   15db0:	cmp	r3, #0
   15db4:	bne	16524 <__assert_fail@plt+0x5044>
   15db8:	ldr	r3, [sp, #36]	; 0x24
   15dbc:	eor	r3, r3, #1
   15dc0:	and	r3, r3, r1
   15dc4:	ands	r3, r3, #255	; 0xff
   15dc8:	beq	15e00 <__assert_fail@plt+0x4920>
   15dcc:	cmp	fp, r8
   15dd0:	movhi	r2, #39	; 0x27
   15dd4:	strbhi	r2, [r9, r8]
   15dd8:	add	r2, r8, #1
   15ddc:	cmp	fp, r2
   15de0:	movhi	r1, #36	; 0x24
   15de4:	strbhi	r1, [r9, r2]
   15de8:	add	r2, r8, #2
   15dec:	cmp	fp, r2
   15df0:	add	r8, r8, #3
   15df4:	movhi	r1, #39	; 0x27
   15df8:	strbhi	r1, [r9, r2]
   15dfc:	str	r3, [sp, #36]	; 0x24
   15e00:	cmp	fp, r8
   15e04:	movhi	r3, #92	; 0x5c
   15e08:	strbhi	r3, [r9, r8]
   15e0c:	add	sl, sl, #1
   15e10:	add	r8, r8, #1
   15e14:	b	15c14 <__assert_fail@plt+0x4734>
   15e18:	ldr	r6, [sp, #48]	; 0x30
   15e1c:	mov	r4, #10
   15e20:	mov	r3, #110	; 0x6e
   15e24:	ldr	r2, [sp, #64]	; 0x40
   15e28:	cmp	r2, #0
   15e2c:	bne	168ac <__assert_fail@plt+0x53cc>
   15e30:	ldr	r1, [sp, #52]	; 0x34
   15e34:	b	15d90 <__assert_fail@plt+0x48b0>
   15e38:	ldr	r6, [sp, #48]	; 0x30
   15e3c:	ldr	r1, [sp, #52]	; 0x34
   15e40:	mov	r3, #116	; 0x74
   15e44:	b	15d90 <__assert_fail@plt+0x48b0>
   15e48:	ldr	r6, [sp, #48]	; 0x30
   15e4c:	ldr	r1, [sp, #52]	; 0x34
   15e50:	mov	r4, #11
   15e54:	mov	r3, #118	; 0x76
   15e58:	b	15d90 <__assert_fail@plt+0x48b0>
   15e5c:	ldr	r6, [sp, #48]	; 0x30
   15e60:	ldr	r1, [sp, #52]	; 0x34
   15e64:	mov	r4, #8
   15e68:	mov	r3, #98	; 0x62
   15e6c:	b	15d90 <__assert_fail@plt+0x48b0>
   15e70:	ldr	r6, [sp, #48]	; 0x30
   15e74:	ldr	r1, [sp, #52]	; 0x34
   15e78:	mov	r4, #7
   15e7c:	mov	r3, #97	; 0x61
   15e80:	b	15d90 <__assert_fail@plt+0x48b0>
   15e84:	ldr	r3, [sp, #56]	; 0x38
   15e88:	ldr	r6, [sp, #48]	; 0x30
   15e8c:	cmp	r3, #0
   15e90:	beq	16354 <__assert_fail@plt+0x4e74>
   15e94:	ldr	r3, [sp, #40]	; 0x28
   15e98:	cmp	r3, #0
   15e9c:	bne	16988 <__assert_fail@plt+0x54a8>
   15ea0:	ldr	r3, [sp, #36]	; 0x24
   15ea4:	ldr	r2, [sp, #52]	; 0x34
   15ea8:	eor	r3, r3, #1
   15eac:	ands	r3, r2, r3
   15eb0:	moveq	r2, r8
   15eb4:	beq	15eec <__assert_fail@plt+0x4a0c>
   15eb8:	cmp	fp, r8
   15ebc:	movhi	r2, #39	; 0x27
   15ec0:	strbhi	r2, [r9, r8]
   15ec4:	add	r2, r8, #1
   15ec8:	cmp	fp, r2
   15ecc:	movhi	r1, #36	; 0x24
   15ed0:	strbhi	r1, [r9, r2]
   15ed4:	add	r2, r8, #2
   15ed8:	cmp	fp, r2
   15edc:	movhi	r1, #39	; 0x27
   15ee0:	strbhi	r1, [r9, r2]
   15ee4:	add	r2, r8, #3
   15ee8:	str	r3, [sp, #36]	; 0x24
   15eec:	cmp	fp, r2
   15ef0:	movhi	r3, #92	; 0x5c
   15ef4:	strbhi	r3, [r9, r2]
   15ef8:	ldr	r3, [sp, #92]	; 0x5c
   15efc:	add	r8, r2, #1
   15f00:	cmp	r3, #0
   15f04:	beq	16888 <__assert_fail@plt+0x53a8>
   15f08:	ldr	r1, [sp, #24]
   15f0c:	add	r3, sl, #1
   15f10:	cmp	r1, r3
   15f14:	bls	15f4c <__assert_fail@plt+0x4a6c>
   15f18:	ldr	r1, [sp, #44]	; 0x2c
   15f1c:	ldrb	r3, [r1, r3]
   15f20:	sub	r3, r3, #48	; 0x30
   15f24:	cmp	r3, #9
   15f28:	bhi	15f4c <__assert_fail@plt+0x4a6c>
   15f2c:	cmp	fp, r8
   15f30:	movhi	r3, #48	; 0x30
   15f34:	strbhi	r3, [r9, r8]
   15f38:	add	r3, r2, #2
   15f3c:	cmp	fp, r3
   15f40:	add	r8, r2, #3
   15f44:	movhi	r1, #48	; 0x30
   15f48:	strbhi	r1, [r9, r3]
   15f4c:	ldr	r3, [sp, #40]	; 0x28
   15f50:	ldr	r1, [sp, #52]	; 0x34
   15f54:	mov	r7, r3
   15f58:	str	r3, [sp, #32]
   15f5c:	mov	r4, #48	; 0x30
   15f60:	b	15bb0 <__assert_fail@plt+0x46d0>
   15f64:	ldr	r6, [sp, #48]	; 0x30
   15f68:	cmp	sl, #0
   15f6c:	streq	r7, [sp, #32]
   15f70:	beq	15f90 <__assert_fail@plt+0x4ab0>
   15f74:	mov	r3, #0
   15f78:	ldr	r1, [sp, #52]	; 0x34
   15f7c:	str	r3, [sp, #32]
   15f80:	b	15bb0 <__assert_fail@plt+0x46d0>
   15f84:	ldr	r6, [sp, #48]	; 0x30
   15f88:	mov	r3, #0
   15f8c:	str	r3, [sp, #32]
   15f90:	ldr	r3, [sp, #64]	; 0x40
   15f94:	cmp	r3, #0
   15f98:	bne	16714 <__assert_fail@plt+0x5234>
   15f9c:	ldr	r1, [sp, #52]	; 0x34
   15fa0:	b	15bb0 <__assert_fail@plt+0x46d0>
   15fa4:	ldr	r3, [sp, #48]	; 0x30
   15fa8:	mov	r6, r3
   15fac:	str	r3, [sp, #32]
   15fb0:	b	15f90 <__assert_fail@plt+0x4ab0>
   15fb4:	ldr	r6, [sp, #48]	; 0x30
   15fb8:	mov	r4, #13
   15fbc:	mov	r3, #114	; 0x72
   15fc0:	b	15e24 <__assert_fail@plt+0x4944>
   15fc4:	ldr	r3, [sp, #44]	; 0x2c
   15fc8:	add	r5, r3, sl
   15fcc:	ldrb	r4, [r5]
   15fd0:	cmp	r4, #126	; 0x7e
   15fd4:	ldrls	pc, [pc, r4, lsl #2]
   15fd8:	b	16374 <__assert_fail@plt+0x4e94>
   15fdc:	andeq	r6, r1, r4, asr #6
   15fe0:	andeq	r6, r1, r4, ror r3
   15fe4:	andeq	r6, r1, r4, ror r3
   15fe8:	andeq	r6, r1, r4, ror r3
   15fec:	andeq	r6, r1, r4, ror r3
   15ff0:	andeq	r6, r1, r4, ror r3
   15ff4:	andeq	r6, r1, r4, ror r3
   15ff8:	andeq	r6, r1, ip, lsr r3
   15ffc:	andeq	r6, r1, r4, lsr r3
   16000:	andeq	r6, r1, r8, lsr #6
   16004:	andeq	r6, r1, r0, lsr #6
   16008:	andeq	r6, r1, r8, lsl r3
   1600c:	andeq	r6, r1, r0, lsl r3
   16010:	andeq	r6, r1, r8, lsl #6
   16014:	andeq	r6, r1, r4, ror r3
   16018:	andeq	r6, r1, r4, ror r3
   1601c:	andeq	r6, r1, r4, ror r3
   16020:	andeq	r6, r1, r4, ror r3
   16024:	andeq	r6, r1, r4, ror r3
   16028:	andeq	r6, r1, r4, ror r3
   1602c:	andeq	r6, r1, r4, ror r3
   16030:	andeq	r6, r1, r4, ror r3
   16034:	andeq	r6, r1, r4, ror r3
   16038:	andeq	r6, r1, r4, ror r3
   1603c:	andeq	r6, r1, r4, ror r3
   16040:	andeq	r6, r1, r4, ror r3
   16044:	andeq	r6, r1, r4, ror r3
   16048:	andeq	r6, r1, r4, ror r3
   1604c:	andeq	r6, r1, r4, ror r3
   16050:	andeq	r6, r1, r4, ror r3
   16054:	andeq	r6, r1, r4, ror r3
   16058:	andeq	r6, r1, r4, ror r3
   1605c:	strdeq	r6, [r1], -ip
   16060:	strdeq	r6, [r1], -r4
   16064:	strdeq	r6, [r1], -r4
   16068:	andeq	r6, r1, ip, ror #5
   1606c:	strdeq	r6, [r1], -r4
   16070:	andeq	r6, r1, r4, ror #5
   16074:	strdeq	r6, [r1], -r4
   16078:	andeq	r6, r1, r8, asr r2
   1607c:	strdeq	r6, [r1], -r4
   16080:	strdeq	r6, [r1], -r4
   16084:	strdeq	r6, [r1], -r4
   16088:	andeq	r6, r1, r4, ror #5
   1608c:	andeq	r6, r1, r4, ror #5
   16090:	andeq	r6, r1, r4, ror #5
   16094:	andeq	r6, r1, r4, ror #5
   16098:	andeq	r6, r1, r4, ror #5
   1609c:	andeq	r6, r1, r4, ror #5
   160a0:	andeq	r6, r1, r4, ror #5
   160a4:	andeq	r6, r1, r4, ror #5
   160a8:	andeq	r6, r1, r4, ror #5
   160ac:	andeq	r6, r1, r4, ror #5
   160b0:	andeq	r6, r1, r4, ror #5
   160b4:	andeq	r6, r1, r4, ror #5
   160b8:	andeq	r6, r1, r4, ror #5
   160bc:	andeq	r6, r1, r4, ror #5
   160c0:	andeq	r6, r1, r4, ror #5
   160c4:	andeq	r6, r1, r4, ror #5
   160c8:	strdeq	r6, [r1], -r4
   160cc:	strdeq	r6, [r1], -r4
   160d0:	strdeq	r6, [r1], -r4
   160d4:	strdeq	r6, [r1], -r4
   160d8:	andeq	r6, r1, ip, lsr #4
   160dc:	andeq	r6, r1, r4, ror r3
   160e0:	andeq	r6, r1, r4, ror #5
   160e4:	andeq	r6, r1, r4, ror #5
   160e8:	andeq	r6, r1, r4, ror #5
   160ec:	andeq	r6, r1, r4, ror #5
   160f0:	andeq	r6, r1, r4, ror #5
   160f4:	andeq	r6, r1, r4, ror #5
   160f8:	andeq	r6, r1, r4, ror #5
   160fc:	andeq	r6, r1, r4, ror #5
   16100:	andeq	r6, r1, r4, ror #5
   16104:	andeq	r6, r1, r4, ror #5
   16108:	andeq	r6, r1, r4, ror #5
   1610c:	andeq	r6, r1, r4, ror #5
   16110:	andeq	r6, r1, r4, ror #5
   16114:	andeq	r6, r1, r4, ror #5
   16118:	andeq	r6, r1, r4, ror #5
   1611c:	andeq	r6, r1, r4, ror #5
   16120:	andeq	r6, r1, r4, ror #5
   16124:	andeq	r6, r1, r4, ror #5
   16128:	andeq	r6, r1, r4, ror #5
   1612c:	andeq	r6, r1, r4, ror #5
   16130:	andeq	r6, r1, r4, ror #5
   16134:	andeq	r6, r1, r4, ror #5
   16138:	andeq	r6, r1, r4, ror #5
   1613c:	andeq	r6, r1, r4, ror #5
   16140:	andeq	r6, r1, r4, ror #5
   16144:	andeq	r6, r1, r4, ror #5
   16148:	strdeq	r6, [r1], -r4
   1614c:	strdeq	r6, [r1], -ip
   16150:	andeq	r6, r1, r4, ror #5
   16154:	strdeq	r6, [r1], -r4
   16158:	andeq	r6, r1, r4, ror #5
   1615c:	strdeq	r6, [r1], -r4
   16160:	andeq	r6, r1, r4, ror #5
   16164:	andeq	r6, r1, r4, ror #5
   16168:	andeq	r6, r1, r4, ror #5
   1616c:	andeq	r6, r1, r4, ror #5
   16170:	andeq	r6, r1, r4, ror #5
   16174:	andeq	r6, r1, r4, ror #5
   16178:	andeq	r6, r1, r4, ror #5
   1617c:	andeq	r6, r1, r4, ror #5
   16180:	andeq	r6, r1, r4, ror #5
   16184:	andeq	r6, r1, r4, ror #5
   16188:	andeq	r6, r1, r4, ror #5
   1618c:	andeq	r6, r1, r4, ror #5
   16190:	andeq	r6, r1, r4, ror #5
   16194:	andeq	r6, r1, r4, ror #5
   16198:	andeq	r6, r1, r4, ror #5
   1619c:	andeq	r6, r1, r4, ror #5
   161a0:	andeq	r6, r1, r4, ror #5
   161a4:	andeq	r6, r1, r4, ror #5
   161a8:	andeq	r6, r1, r4, ror #5
   161ac:	andeq	r6, r1, r4, ror #5
   161b0:	andeq	r6, r1, r4, ror #5
   161b4:	andeq	r6, r1, r4, ror #5
   161b8:	andeq	r6, r1, r4, ror #5
   161bc:	andeq	r6, r1, r4, ror #5
   161c0:	andeq	r6, r1, r4, ror #5
   161c4:	andeq	r6, r1, r4, ror #5
   161c8:	ldrdeq	r6, [r1], -r8
   161cc:	strdeq	r6, [r1], -r4
   161d0:	ldrdeq	r6, [r1], -r8
   161d4:	andeq	r6, r1, ip, ror #5
   161d8:	ldr	r3, [sp, #24]
   161dc:	mov	r6, #0
   161e0:	cmn	r3, #1
   161e4:	bne	15b90 <__assert_fail@plt+0x46b0>
   161e8:	ldr	r3, [sp, #44]	; 0x2c
   161ec:	ldrb	r3, [r3, #1]
   161f0:	adds	r3, r3, #0
   161f4:	movne	r3, #1
   161f8:	b	15b98 <__assert_fail@plt+0x46b8>
   161fc:	ldr	r3, [sp, #176]	; 0xb0
   16200:	mov	r6, #0
   16204:	cmp	r3, #2
   16208:	bne	15cd8 <__assert_fail@plt+0x47f8>
   1620c:	ldr	r3, [sp, #64]	; 0x40
   16210:	cmp	r3, #0
   16214:	bne	16a4c <__assert_fail@plt+0x556c>
   16218:	add	sl, sl, #1
   1621c:	ldr	r6, [sp, #36]	; 0x24
   16220:	str	r3, [sp, #32]
   16224:	mov	r4, #92	; 0x5c
   16228:	b	15be4 <__assert_fail@plt+0x4704>
   1622c:	ldr	r3, [sp, #176]	; 0xb0
   16230:	mov	r6, #0
   16234:	cmp	r3, #2
   16238:	bne	15d0c <__assert_fail@plt+0x482c>
   1623c:	ldr	r3, [sp, #40]	; 0x28
   16240:	cmp	r3, #0
   16244:	bne	16528 <__assert_fail@plt+0x5048>
   16248:	mov	r1, r7
   1624c:	str	r3, [sp, #32]
   16250:	mov	r4, #63	; 0x3f
   16254:	b	15bb0 <__assert_fail@plt+0x46d0>
   16258:	ldr	r3, [sp, #176]	; 0xb0
   1625c:	mov	r6, #0
   16260:	cmp	r3, #2
   16264:	bne	15d5c <__assert_fail@plt+0x487c>
   16268:	ldr	r3, [sp, #64]	; 0x40
   1626c:	cmp	r3, #0
   16270:	bne	16a4c <__assert_fail@plt+0x556c>
   16274:	ldr	r2, [sp, #84]	; 0x54
   16278:	adds	r3, fp, #0
   1627c:	movne	r3, #1
   16280:	cmp	r2, #0
   16284:	movne	r3, #0
   16288:	cmp	r3, #0
   1628c:	strne	fp, [sp, #84]	; 0x54
   16290:	movne	fp, #0
   16294:	bne	162c4 <__assert_fail@plt+0x4de4>
   16298:	cmp	fp, r8
   1629c:	movhi	r3, #39	; 0x27
   162a0:	strbhi	r3, [r9, r8]
   162a4:	add	r3, r8, #1
   162a8:	cmp	fp, r3
   162ac:	movhi	r2, #92	; 0x5c
   162b0:	strbhi	r2, [r9, r3]
   162b4:	add	r3, r8, #2
   162b8:	cmp	fp, r3
   162bc:	movhi	r2, #39	; 0x27
   162c0:	strbhi	r2, [r9, r3]
   162c4:	ldr	r3, [sp, #64]	; 0x40
   162c8:	add	r8, r8, #3
   162cc:	mov	r1, r7
   162d0:	str	r7, [sp, #32]
   162d4:	str	r7, [sp, #76]	; 0x4c
   162d8:	str	r3, [sp, #36]	; 0x24
   162dc:	mov	r4, #39	; 0x27
   162e0:	b	15bb0 <__assert_fail@plt+0x46d0>
   162e4:	mov	r6, #0
   162e8:	b	15d74 <__assert_fail@plt+0x4894>
   162ec:	mov	r6, #0
   162f0:	b	15f68 <__assert_fail@plt+0x4a88>
   162f4:	mov	r6, #0
   162f8:	b	15f88 <__assert_fail@plt+0x4aa8>
   162fc:	str	r7, [sp, #32]
   16300:	mov	r6, #0
   16304:	b	15f90 <__assert_fail@plt+0x4ab0>
   16308:	mov	r6, #0
   1630c:	b	15fb8 <__assert_fail@plt+0x4ad8>
   16310:	mov	r6, #0
   16314:	b	15d84 <__assert_fail@plt+0x48a4>
   16318:	mov	r6, #0
   1631c:	b	15e4c <__assert_fail@plt+0x496c>
   16320:	mov	r6, #0
   16324:	b	15e1c <__assert_fail@plt+0x493c>
   16328:	mov	r6, #0
   1632c:	mov	r3, #116	; 0x74
   16330:	b	15e24 <__assert_fail@plt+0x4944>
   16334:	mov	r6, #0
   16338:	b	15e60 <__assert_fail@plt+0x4980>
   1633c:	mov	r6, #0
   16340:	b	15e74 <__assert_fail@plt+0x4994>
   16344:	ldr	r3, [sp, #56]	; 0x38
   16348:	mov	r6, #0
   1634c:	cmp	r3, #0
   16350:	bne	15e94 <__assert_fail@plt+0x49b4>
   16354:	ldr	r3, [sp, #96]	; 0x60
   16358:	cmp	r3, #0
   1635c:	addne	sl, sl, #1
   16360:	bne	15708 <__assert_fail@plt+0x4228>
   16364:	ldr	r1, [sp, #52]	; 0x34
   16368:	str	r3, [sp, #32]
   1636c:	mov	r4, r3
   16370:	b	15bb0 <__assert_fail@plt+0x46d0>
   16374:	mov	r6, #0
   16378:	ldr	r3, [sp, #80]	; 0x50
   1637c:	cmp	r3, #1
   16380:	bne	16570 <__assert_fail@plt+0x5090>
   16384:	bl	1133c <__ctype_b_loc@plt>
   16388:	ldr	r2, [sp, #80]	; 0x50
   1638c:	sxth	r3, r4
   16390:	mov	r1, r2
   16394:	lsl	r3, r3, #1
   16398:	ldr	r2, [r0]
   1639c:	ldrh	r3, [r2, r3]
   163a0:	and	r3, r3, #16384	; 0x4000
   163a4:	cmp	r3, #0
   163a8:	movne	r3, #1
   163ac:	moveq	r3, #0
   163b0:	str	r3, [sp, #32]
   163b4:	moveq	r3, #1
   163b8:	movne	r3, #0
   163bc:	ldr	r2, [sp, #56]	; 0x38
   163c0:	and	r3, r3, r2
   163c4:	ands	r3, r3, #255	; 0xff
   163c8:	beq	15f9c <__assert_fail@plt+0x4abc>
   163cc:	add	r1, sl, r1
   163d0:	mov	r0, #0
   163d4:	ldr	r7, [sp, #40]	; 0x28
   163d8:	ldr	r2, [sp, #36]	; 0x24
   163dc:	ldr	lr, [sp, #52]	; 0x34
   163e0:	b	16490 <__assert_fail@plt+0x4fb0>
   163e4:	cmp	r7, #0
   163e8:	bne	167e4 <__assert_fail@plt+0x5304>
   163ec:	eor	r0, r2, #1
   163f0:	ands	r0, lr, r0
   163f4:	beq	1642c <__assert_fail@plt+0x4f4c>
   163f8:	cmp	fp, r8
   163fc:	movhi	r2, #39	; 0x27
   16400:	strbhi	r2, [r9, r8]
   16404:	add	r2, r8, #1
   16408:	cmp	fp, r2
   1640c:	movhi	ip, #36	; 0x24
   16410:	strbhi	ip, [r9, r2]
   16414:	add	r2, r8, #2
   16418:	cmp	fp, r2
   1641c:	movhi	ip, #39	; 0x27
   16420:	strbhi	ip, [r9, r2]
   16424:	add	r8, r8, #3
   16428:	mov	r2, r0
   1642c:	cmp	fp, r8
   16430:	movhi	r0, #92	; 0x5c
   16434:	strbhi	r0, [r9, r8]
   16438:	add	r0, r8, #1
   1643c:	cmp	fp, r0
   16440:	lsrhi	ip, r4, #6
   16444:	addhi	ip, ip, #48	; 0x30
   16448:	strbhi	ip, [r9, r0]
   1644c:	add	ip, r8, #2
   16450:	cmp	fp, ip
   16454:	lsrhi	r0, r4, #3
   16458:	andhi	r0, r0, #7
   1645c:	addhi	r0, r0, #48	; 0x30
   16460:	add	sl, sl, #1
   16464:	strbhi	r0, [r9, ip]
   16468:	and	r4, r4, #7
   1646c:	cmp	sl, r1
   16470:	add	r4, r4, #48	; 0x30
   16474:	add	r8, r8, #3
   16478:	bcs	167fc <__assert_fail@plt+0x531c>
   1647c:	mov	r0, r3
   16480:	cmp	fp, r8
   16484:	strbhi	r4, [r9, r8]
   16488:	ldrb	r4, [r5, #1]!
   1648c:	add	r8, r8, #1
   16490:	cmp	r3, #0
   16494:	bne	163e4 <__assert_fail@plt+0x4f04>
   16498:	cmp	r6, #0
   1649c:	bne	16540 <__assert_fail@plt+0x5060>
   164a0:	eor	r6, r0, #1
   164a4:	and	r6, r6, r2
   164a8:	add	sl, sl, #1
   164ac:	cmp	r1, sl
   164b0:	uxtb	r6, r6
   164b4:	bls	16568 <__assert_fail@plt+0x5088>
   164b8:	cmp	r6, #0
   164bc:	beq	16480 <__assert_fail@plt+0x4fa0>
   164c0:	cmp	fp, r8
   164c4:	movhi	r2, #39	; 0x27
   164c8:	strbhi	r2, [r9, r8]
   164cc:	add	r2, r8, #1
   164d0:	cmp	fp, r2
   164d4:	movhi	ip, #39	; 0x27
   164d8:	strbhi	ip, [r9, r2]
   164dc:	add	r8, r8, #2
   164e0:	mov	r6, r3
   164e4:	mov	r2, r3
   164e8:	b	16480 <__assert_fail@plt+0x4fa0>
   164ec:	ldr	r3, [sp, #184]	; 0xb8
   164f0:	cmp	r3, #0
   164f4:	beq	15bcc <__assert_fail@plt+0x46ec>
   164f8:	lsr	r2, r4, #5
   164fc:	mov	r0, r3
   16500:	uxtb	r2, r2
   16504:	and	r3, r4, #31
   16508:	ldr	r2, [r0, r2, lsl #2]
   1650c:	lsr	r3, r2, r3
   16510:	tst	r3, #1
   16514:	beq	15bcc <__assert_fail@plt+0x46ec>
   16518:	ldr	r3, [sp, #40]	; 0x28
   1651c:	cmp	r3, #0
   16520:	beq	15db8 <__assert_fail@plt+0x48d8>
   16524:	mov	r3, r1
   16528:	str	r3, [sp, #64]	; 0x40
   1652c:	mov	sl, r9
   16530:	ldr	r3, [sp, #56]	; 0x38
   16534:	mov	r9, fp
   16538:	ldr	r2, [sp, #64]	; 0x40
   1653c:	b	1672c <__assert_fail@plt+0x524c>
   16540:	cmp	fp, r8
   16544:	eor	r6, r0, #1
   16548:	movhi	ip, #92	; 0x5c
   1654c:	and	r6, r6, r2
   16550:	add	sl, sl, #1
   16554:	strbhi	ip, [r9, r8]
   16558:	cmp	r1, sl
   1655c:	add	r8, r8, #1
   16560:	uxtb	r6, r6
   16564:	bhi	164b8 <__assert_fail@plt+0x4fd8>
   16568:	str	r2, [sp, #36]	; 0x24
   1656c:	b	15be4 <__assert_fail@plt+0x4704>
   16570:	ldr	r3, [sp, #24]
   16574:	cmn	r3, #1
   16578:	mov	r3, #0
   1657c:	str	r3, [sp, #128]	; 0x80
   16580:	str	r3, [sp, #132]	; 0x84
   16584:	beq	16878 <__assert_fail@plt+0x5398>
   16588:	mov	r2, r7
   1658c:	mov	r3, #0
   16590:	str	r7, [sp, #104]	; 0x68
   16594:	str	r5, [sp, #116]	; 0x74
   16598:	mov	r7, r3
   1659c:	mov	r5, r2
   165a0:	str	r4, [sp, #32]
   165a4:	str	r6, [sp, #108]	; 0x6c
   165a8:	str	r8, [sp, #112]	; 0x70
   165ac:	ldr	r3, [sp, #44]	; 0x2c
   165b0:	add	r6, sl, r7
   165b4:	add	r4, r3, r6
   165b8:	ldr	r3, [sp, #24]
   165bc:	mov	r1, r4
   165c0:	sub	r2, r3, r6
   165c4:	add	r0, sp, #124	; 0x7c
   165c8:	add	r3, sp, #128	; 0x80
   165cc:	bl	1ba6c <__assert_fail@plt+0xa58c>
   165d0:	subs	r8, r0, #0
   165d4:	beq	1695c <__assert_fail@plt+0x547c>
   165d8:	cmn	r8, #1
   165dc:	beq	16934 <__assert_fail@plt+0x5454>
   165e0:	cmn	r8, #2
   165e4:	beq	168cc <__assert_fail@plt+0x53ec>
   165e8:	ldr	r3, [sp, #64]	; 0x40
   165ec:	cmp	r3, #0
   165f0:	beq	166b0 <__assert_fail@plt+0x51d0>
   165f4:	cmp	r8, #1
   165f8:	beq	166b0 <__assert_fail@plt+0x51d0>
   165fc:	sub	r3, r8, #1
   16600:	add	r6, r3, r6
   16604:	ldr	r3, [sp, #44]	; 0x2c
   16608:	add	r6, r3, r6
   1660c:	ldrb	r3, [r4, #1]!
   16610:	sub	r3, r3, #91	; 0x5b
   16614:	cmp	r3, #33	; 0x21
   16618:	ldrls	pc, [pc, r3, lsl #2]
   1661c:	b	166a8 <__assert_fail@plt+0x51c8>
   16620:	andeq	r6, r1, r4, lsl r7
   16624:	andeq	r6, r1, r4, lsl r7
   16628:	andeq	r6, r1, r8, lsr #13
   1662c:	andeq	r6, r1, r4, lsl r7
   16630:	andeq	r6, r1, r8, lsr #13
   16634:	andeq	r6, r1, r4, lsl r7
   16638:	andeq	r6, r1, r8, lsr #13
   1663c:	andeq	r6, r1, r8, lsr #13
   16640:	andeq	r6, r1, r8, lsr #13
   16644:	andeq	r6, r1, r8, lsr #13
   16648:	andeq	r6, r1, r8, lsr #13
   1664c:	andeq	r6, r1, r8, lsr #13
   16650:	andeq	r6, r1, r8, lsr #13
   16654:	andeq	r6, r1, r8, lsr #13
   16658:	andeq	r6, r1, r8, lsr #13
   1665c:	andeq	r6, r1, r8, lsr #13
   16660:	andeq	r6, r1, r8, lsr #13
   16664:	andeq	r6, r1, r8, lsr #13
   16668:	andeq	r6, r1, r8, lsr #13
   1666c:	andeq	r6, r1, r8, lsr #13
   16670:	andeq	r6, r1, r8, lsr #13
   16674:	andeq	r6, r1, r8, lsr #13
   16678:	andeq	r6, r1, r8, lsr #13
   1667c:	andeq	r6, r1, r8, lsr #13
   16680:	andeq	r6, r1, r8, lsr #13
   16684:	andeq	r6, r1, r8, lsr #13
   16688:	andeq	r6, r1, r8, lsr #13
   1668c:	andeq	r6, r1, r8, lsr #13
   16690:	andeq	r6, r1, r8, lsr #13
   16694:	andeq	r6, r1, r8, lsr #13
   16698:	andeq	r6, r1, r8, lsr #13
   1669c:	andeq	r6, r1, r8, lsr #13
   166a0:	andeq	r6, r1, r8, lsr #13
   166a4:	andeq	r6, r1, r4, lsl r7
   166a8:	cmp	r6, r4
   166ac:	bne	1660c <__assert_fail@plt+0x512c>
   166b0:	ldr	r0, [sp, #124]	; 0x7c
   166b4:	bl	11258 <iswprint@plt>
   166b8:	add	r7, r7, r8
   166bc:	cmp	r0, #0
   166c0:	add	r0, sp, #128	; 0x80
   166c4:	moveq	r5, #0
   166c8:	bl	111e0 <mbsinit@plt>
   166cc:	cmp	r0, #0
   166d0:	beq	165ac <__assert_fail@plt+0x50cc>
   166d4:	ldr	r4, [sp, #32]
   166d8:	str	r5, [sp, #32]
   166dc:	ldr	r3, [sp, #32]
   166e0:	mov	r1, r7
   166e4:	eor	r3, r3, #1
   166e8:	ldr	r7, [sp, #104]	; 0x68
   166ec:	ldr	r6, [sp, #108]	; 0x6c
   166f0:	ldr	r8, [sp, #112]	; 0x70
   166f4:	ldr	r5, [sp, #116]	; 0x74
   166f8:	uxtb	r3, r3
   166fc:	cmp	r1, #1
   16700:	bls	163bc <__assert_fail@plt+0x4edc>
   16704:	ldr	r2, [sp, #56]	; 0x38
   16708:	and	r3, r3, r2
   1670c:	uxtb	r3, r3
   16710:	b	163cc <__assert_fail@plt+0x4eec>
   16714:	mov	r3, #2
   16718:	str	r3, [sp, #176]	; 0xb0
   1671c:	ldr	r2, [sp, #64]	; 0x40
   16720:	ldr	r3, [sp, #56]	; 0x38
   16724:	mov	sl, r9
   16728:	mov	r9, fp
   1672c:	and	r3, r3, r2
   16730:	tst	r3, #255	; 0xff
   16734:	ldr	r3, [sp, #176]	; 0xb0
   16738:	movne	r3, #4
   1673c:	str	r3, [sp, #176]	; 0xb0
   16740:	ldr	r3, [sp, #180]	; 0xb4
   16744:	mov	ip, #0
   16748:	bic	r3, r3, #2
   1674c:	str	r3, [sp, #4]
   16750:	ldr	r3, [sp, #192]	; 0xc0
   16754:	ldr	r2, [sp, #44]	; 0x2c
   16758:	str	r3, [sp, #16]
   1675c:	ldr	r3, [sp, #188]	; 0xbc
   16760:	mov	r1, r9
   16764:	str	r3, [sp, #12]
   16768:	ldr	r3, [sp, #176]	; 0xb0
   1676c:	mov	r0, sl
   16770:	str	r3, [sp]
   16774:	str	ip, [sp, #8]
   16778:	ldr	r3, [sp, #24]
   1677c:	bl	155dc <__assert_fail@plt+0x40fc>
   16780:	mov	fp, r0
   16784:	mov	r0, fp
   16788:	add	sp, sp, #140	; 0x8c
   1678c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16790:	mov	r4, #92	; 0x5c
   16794:	mov	r1, #0
   16798:	mov	r3, r4
   1679c:	b	15d90 <__assert_fail@plt+0x48b0>
   167a0:	mov	r3, #0
   167a4:	ldr	r1, [sp, #52]	; 0x34
   167a8:	str	r3, [sp, #32]
   167ac:	mov	r4, #63	; 0x3f
   167b0:	b	15bb0 <__assert_fail@plt+0x46d0>
   167b4:	cmp	fp, #0
   167b8:	beq	16814 <__assert_fail@plt+0x5334>
   167bc:	mov	r3, #39	; 0x27
   167c0:	strb	r3, [r9]
   167c4:	mov	r3, #0
   167c8:	str	r3, [sp, #40]	; 0x28
   167cc:	mov	r3, #1
   167d0:	str	r3, [sp, #68]	; 0x44
   167d4:	ldr	r3, [pc, #448]	; 1699c <__assert_fail@plt+0x54bc>
   167d8:	mov	r8, #1
   167dc:	str	r3, [sp, #72]	; 0x48
   167e0:	b	159c4 <__assert_fail@plt+0x44e4>
   167e4:	ldr	r3, [sp, #40]	; 0x28
   167e8:	mov	sl, r9
   167ec:	str	r3, [sp, #56]	; 0x38
   167f0:	mov	r9, fp
   167f4:	ldr	r2, [sp, #64]	; 0x40
   167f8:	b	1672c <__assert_fail@plt+0x524c>
   167fc:	str	r2, [sp, #36]	; 0x24
   16800:	b	15c14 <__assert_fail@plt+0x4734>
   16804:	mov	r1, #0
   16808:	str	r3, [sp, #32]
   1680c:	mov	r4, #63	; 0x3f
   16810:	b	15bb0 <__assert_fail@plt+0x46d0>
   16814:	ldr	r3, [pc, #384]	; 1699c <__assert_fail@plt+0x54bc>
   16818:	str	r3, [sp, #72]	; 0x48
   1681c:	mov	r3, #0
   16820:	str	r3, [sp, #40]	; 0x28
   16824:	mov	r3, #1
   16828:	str	r3, [sp, #68]	; 0x44
   1682c:	mov	r8, r3
   16830:	b	159c4 <__assert_fail@plt+0x44e4>
   16834:	bl	114bc <abort@plt>
   16838:	cmp	fp, #0
   1683c:	beq	1689c <__assert_fail@plt+0x53bc>
   16840:	mov	r2, #1
   16844:	mov	r3, #34	; 0x22
   16848:	strb	r3, [r9]
   1684c:	mov	r8, r2
   16850:	mov	r3, r2
   16854:	str	r2, [sp, #68]	; 0x44
   16858:	str	r3, [sp, #56]	; 0x38
   1685c:	ldr	r3, [pc, #316]	; 169a0 <__assert_fail@plt+0x54c0>
   16860:	ldr	r1, [sp, #56]	; 0x38
   16864:	str	r3, [sp, #72]	; 0x48
   16868:	ldr	r2, [sp, #176]	; 0xb0
   1686c:	ldr	ip, [sp, #40]	; 0x28
   16870:	ldr	lr, [sp, #176]	; 0xb0
   16874:	b	156a8 <__assert_fail@plt+0x41c8>
   16878:	ldr	r0, [sp, #44]	; 0x2c
   1687c:	bl	11354 <strlen@plt>
   16880:	str	r0, [sp, #24]
   16884:	b	16588 <__assert_fail@plt+0x50a8>
   16888:	mov	r7, #0
   1688c:	ldr	r1, [sp, #52]	; 0x34
   16890:	str	r3, [sp, #32]
   16894:	mov	r4, #48	; 0x30
   16898:	b	15bb0 <__assert_fail@plt+0x46d0>
   1689c:	mov	r3, #1
   168a0:	str	r3, [sp, #68]	; 0x44
   168a4:	mov	r8, r3
   168a8:	b	16858 <__assert_fail@plt+0x5378>
   168ac:	mov	r3, #2
   168b0:	mov	sl, r9
   168b4:	str	r3, [sp, #176]	; 0xb0
   168b8:	mov	r9, fp
   168bc:	ldr	r3, [sp, #56]	; 0x38
   168c0:	b	1672c <__assert_fail@plt+0x524c>
   168c4:	ldr	r6, [sp, #48]	; 0x30
   168c8:	b	16378 <__assert_fail@plt+0x4e98>
   168cc:	ldr	r0, [sp, #24]
   168d0:	mov	ip, r6
   168d4:	cmp	r0, ip
   168d8:	mov	r1, r7
   168dc:	mov	r2, r4
   168e0:	ldr	r7, [sp, #104]	; 0x68
   168e4:	ldr	r4, [sp, #32]
   168e8:	ldr	r6, [sp, #108]	; 0x6c
   168ec:	ldr	r8, [sp, #112]	; 0x70
   168f0:	ldr	r5, [sp, #116]	; 0x74
   168f4:	bls	16924 <__assert_fail@plt+0x5444>
   168f8:	ldrb	r3, [r2]
   168fc:	cmp	r3, #0
   16900:	bne	16914 <__assert_fail@plt+0x5434>
   16904:	b	16a34 <__assert_fail@plt+0x5554>
   16908:	ldrb	r3, [r2, #1]!
   1690c:	cmp	r3, #0
   16910:	beq	16a34 <__assert_fail@plt+0x5554>
   16914:	add	r1, r1, #1
   16918:	add	r3, sl, r1
   1691c:	cmp	r0, r3
   16920:	bhi	16908 <__assert_fail@plt+0x5428>
   16924:	mov	r2, #0
   16928:	mov	r3, r7
   1692c:	str	r2, [sp, #32]
   16930:	b	166fc <__assert_fail@plt+0x521c>
   16934:	mov	r1, r7
   16938:	ldr	r7, [sp, #104]	; 0x68
   1693c:	mov	r2, #0
   16940:	ldr	r4, [sp, #32]
   16944:	ldr	r6, [sp, #108]	; 0x6c
   16948:	ldr	r8, [sp, #112]	; 0x70
   1694c:	ldr	r5, [sp, #116]	; 0x74
   16950:	mov	r3, r7
   16954:	str	r2, [sp, #32]
   16958:	b	166fc <__assert_fail@plt+0x521c>
   1695c:	mov	r3, r5
   16960:	eor	r3, r3, #1
   16964:	ldr	r4, [sp, #32]
   16968:	mov	r1, r7
   1696c:	str	r5, [sp, #32]
   16970:	ldr	r7, [sp, #104]	; 0x68
   16974:	ldr	r6, [sp, #108]	; 0x6c
   16978:	ldr	r8, [sp, #112]	; 0x70
   1697c:	ldr	r5, [sp, #116]	; 0x74
   16980:	uxtb	r3, r3
   16984:	b	166fc <__assert_fail@plt+0x521c>
   16988:	mov	sl, r9
   1698c:	str	r3, [sp, #56]	; 0x38
   16990:	mov	r9, fp
   16994:	ldr	r2, [sp, #64]	; 0x40
   16998:	b	1672c <__assert_fail@plt+0x524c>
   1699c:	andeq	sp, r1, r4, lsr r7
   169a0:	andeq	ip, r1, r4, lsr r7
   169a4:	andeq	sp, r1, r8, lsr r7
   169a8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   169ac:	ldr	r2, [sp, #44]	; 0x2c
   169b0:	ldrb	r1, [r2, r3]
   169b4:	sub	r2, r1, #33	; 0x21
   169b8:	uxtb	r2, r2
   169bc:	cmp	r2, #29
   169c0:	bhi	16a40 <__assert_fail@plt+0x5560>
   169c4:	ldr	r0, [pc, #-36]	; 169a8 <__assert_fail@plt+0x54c8>
   169c8:	mov	ip, #1
   169cc:	ands	r2, r0, ip, lsl r2
   169d0:	beq	16a60 <__assert_fail@plt+0x5580>
   169d4:	ldr	r2, [sp, #40]	; 0x28
   169d8:	cmp	r2, #0
   169dc:	bne	16b54 <__assert_fail@plt+0x5674>
   169e0:	add	r2, r8, #1
   169e4:	cmp	fp, r8
   169e8:	strbhi	r4, [r9, r8]
   169ec:	cmp	fp, r2
   169f0:	movhi	r0, #34	; 0x22
   169f4:	strbhi	r0, [r9, r2]
   169f8:	add	r2, r8, #2
   169fc:	cmp	fp, r2
   16a00:	movhi	r0, #34	; 0x22
   16a04:	strbhi	r0, [r9, r2]
   16a08:	add	r2, r8, #3
   16a0c:	cmp	fp, r2
   16a10:	mov	sl, r3
   16a14:	ldr	r3, [sp, #40]	; 0x28
   16a18:	movhi	r0, #63	; 0x3f
   16a1c:	mov	r4, r1
   16a20:	strbhi	r0, [r9, r2]
   16a24:	add	r8, r8, #4
   16a28:	mov	r1, r3
   16a2c:	str	r3, [sp, #32]
   16a30:	b	15bb0 <__assert_fail@plt+0x46d0>
   16a34:	str	r3, [sp, #32]
   16a38:	mov	r3, r7
   16a3c:	b	166fc <__assert_fail@plt+0x521c>
   16a40:	mov	r1, #0
   16a44:	str	r1, [sp, #32]
   16a48:	b	15bb0 <__assert_fail@plt+0x46d0>
   16a4c:	mov	sl, r9
   16a50:	ldr	r3, [sp, #56]	; 0x38
   16a54:	mov	r9, fp
   16a58:	ldr	r2, [sp, #64]	; 0x40
   16a5c:	b	1672c <__assert_fail@plt+0x524c>
   16a60:	str	r2, [sp, #32]
   16a64:	mov	r1, #0
   16a68:	b	15bb0 <__assert_fail@plt+0x46d0>
   16a6c:	ldr	r2, [sp, #76]	; 0x4c
   16a70:	mov	sl, r9
   16a74:	mov	r9, fp
   16a78:	mov	fp, r8
   16a7c:	ldr	r1, [sp, #72]	; 0x48
   16a80:	cmp	r1, #0
   16a84:	moveq	r3, #0
   16a88:	andne	r3, r2, #1
   16a8c:	cmp	r3, #0
   16a90:	beq	16abc <__assert_fail@plt+0x55dc>
   16a94:	ldrb	r3, [r1]
   16a98:	cmp	r3, #0
   16a9c:	beq	16abc <__assert_fail@plt+0x55dc>
   16aa0:	mov	r2, r1
   16aa4:	cmp	r9, fp
   16aa8:	strbhi	r3, [sl, fp]
   16aac:	ldrb	r3, [r2, #1]!
   16ab0:	add	fp, fp, #1
   16ab4:	cmp	r3, #0
   16ab8:	bne	16aa4 <__assert_fail@plt+0x55c4>
   16abc:	cmp	r9, fp
   16ac0:	movhi	r3, #0
   16ac4:	strbhi	r3, [sl, fp]
   16ac8:	b	16784 <__assert_fail@plt+0x52a4>
   16acc:	ldr	r3, [sp, #192]	; 0xc0
   16ad0:	mov	ip, #5
   16ad4:	str	r3, [sp, #16]
   16ad8:	ldr	r3, [sp, #188]	; 0xbc
   16adc:	ldr	r2, [sp, #44]	; 0x2c
   16ae0:	str	r3, [sp, #12]
   16ae4:	ldr	r3, [sp, #184]	; 0xb8
   16ae8:	ldr	r1, [sp, #84]	; 0x54
   16aec:	str	r3, [sp, #8]
   16af0:	ldr	r3, [sp, #180]	; 0xb4
   16af4:	mov	r0, r9
   16af8:	str	r3, [sp, #4]
   16afc:	str	ip, [sp]
   16b00:	ldr	r3, [sp, #24]
   16b04:	bl	155dc <__assert_fail@plt+0x40fc>
   16b08:	mov	fp, r0
   16b0c:	b	16784 <__assert_fail@plt+0x52a4>
   16b10:	mov	sl, r9
   16b14:	mov	r9, fp
   16b18:	mov	fp, r8
   16b1c:	b	16a7c <__assert_fail@plt+0x559c>
   16b20:	ldr	r1, [sp, #176]	; 0xb0
   16b24:	bl	154bc <__assert_fail@plt+0x3fdc>
   16b28:	str	r0, [sp, #192]	; 0xc0
   16b2c:	b	15a98 <__assert_fail@plt+0x45b8>
   16b30:	ldr	r1, [sp, #176]	; 0xb0
   16b34:	bl	154bc <__assert_fail@plt+0x3fdc>
   16b38:	str	r0, [sp, #188]	; 0xbc
   16b3c:	b	15a78 <__assert_fail@plt+0x4598>
   16b40:	mov	sl, r9
   16b44:	mov	r2, r3
   16b48:	mov	r9, fp
   16b4c:	mov	fp, r8
   16b50:	b	16a7c <__assert_fail@plt+0x559c>
   16b54:	mov	sl, r9
   16b58:	mov	r9, fp
   16b5c:	b	16740 <__assert_fail@plt+0x5260>
   16b60:	push	{r4, r5, r6, lr}
   16b64:	mov	r5, r0
   16b68:	bl	1139c <__errno_location@plt>
   16b6c:	cmp	r5, #0
   16b70:	mov	r1, #48	; 0x30
   16b74:	mov	r4, r0
   16b78:	ldr	r0, [pc, #16]	; 16b90 <__assert_fail@plt+0x56b0>
   16b7c:	ldr	r6, [r4]
   16b80:	movne	r0, r5
   16b84:	bl	1a788 <__assert_fail@plt+0x92a8>
   16b88:	str	r6, [r4]
   16b8c:	pop	{r4, r5, r6, pc}
   16b90:	andeq	lr, r2, r0, lsr r5
   16b94:	ldr	r3, [pc, #12]	; 16ba8 <__assert_fail@plt+0x56c8>
   16b98:	cmp	r0, #0
   16b9c:	moveq	r0, r3
   16ba0:	ldr	r0, [r0]
   16ba4:	bx	lr
   16ba8:	andeq	lr, r2, r0, lsr r5
   16bac:	ldr	r3, [pc, #12]	; 16bc0 <__assert_fail@plt+0x56e0>
   16bb0:	cmp	r0, #0
   16bb4:	moveq	r0, r3
   16bb8:	str	r1, [r0]
   16bbc:	bx	lr
   16bc0:	andeq	lr, r2, r0, lsr r5
   16bc4:	ldr	r3, [pc, #52]	; 16c00 <__assert_fail@plt+0x5720>
   16bc8:	cmp	r0, #0
   16bcc:	moveq	r0, r3
   16bd0:	add	r3, r0, #8
   16bd4:	push	{lr}		; (str lr, [sp, #-4]!)
   16bd8:	lsr	lr, r1, #5
   16bdc:	and	r1, r1, #31
   16be0:	ldr	ip, [r3, lr, lsl #2]
   16be4:	lsr	r0, ip, r1
   16be8:	eor	r2, r2, r0
   16bec:	and	r2, r2, #1
   16bf0:	and	r0, r0, #1
   16bf4:	eor	r1, ip, r2, lsl r1
   16bf8:	str	r1, [r3, lr, lsl #2]
   16bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16c00:	andeq	lr, r2, r0, lsr r5
   16c04:	ldr	r3, [pc, #16]	; 16c1c <__assert_fail@plt+0x573c>
   16c08:	cmp	r0, #0
   16c0c:	movne	r3, r0
   16c10:	ldr	r0, [r3, #4]
   16c14:	str	r1, [r3, #4]
   16c18:	bx	lr
   16c1c:	andeq	lr, r2, r0, lsr r5
   16c20:	ldr	r3, [pc, #44]	; 16c54 <__assert_fail@plt+0x5774>
   16c24:	cmp	r0, #0
   16c28:	moveq	r0, r3
   16c2c:	mov	ip, #10
   16c30:	cmp	r2, #0
   16c34:	cmpne	r1, #0
   16c38:	str	ip, [r0]
   16c3c:	beq	16c4c <__assert_fail@plt+0x576c>
   16c40:	str	r1, [r0, #40]	; 0x28
   16c44:	str	r2, [r0, #44]	; 0x2c
   16c48:	bx	lr
   16c4c:	push	{r4, lr}
   16c50:	bl	114bc <abort@plt>
   16c54:	andeq	lr, r2, r0, lsr r5
   16c58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c5c:	sub	sp, sp, #24
   16c60:	ldr	ip, [pc, #108]	; 16cd4 <__assert_fail@plt+0x57f4>
   16c64:	ldr	r4, [sp, #56]	; 0x38
   16c68:	mov	r9, r2
   16c6c:	cmp	r4, #0
   16c70:	moveq	r4, ip
   16c74:	mov	sl, r3
   16c78:	mov	r7, r0
   16c7c:	mov	r8, r1
   16c80:	bl	1139c <__errno_location@plt>
   16c84:	ldr	r3, [r4, #44]	; 0x2c
   16c88:	mov	r1, r8
   16c8c:	ldr	r6, [r0]
   16c90:	str	r3, [sp, #16]
   16c94:	ldr	r2, [r4, #40]	; 0x28
   16c98:	add	r3, r4, #8
   16c9c:	str	r3, [sp, #8]
   16ca0:	str	r2, [sp, #12]
   16ca4:	ldr	r2, [r4, #4]
   16ca8:	mov	r5, r0
   16cac:	str	r2, [sp, #4]
   16cb0:	ldr	ip, [r4]
   16cb4:	mov	r3, sl
   16cb8:	mov	r2, r9
   16cbc:	mov	r0, r7
   16cc0:	str	ip, [sp]
   16cc4:	bl	155dc <__assert_fail@plt+0x40fc>
   16cc8:	str	r6, [r5]
   16ccc:	add	sp, sp, #24
   16cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cd4:	andeq	lr, r2, r0, lsr r5
   16cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cdc:	cmp	r2, #0
   16ce0:	sub	sp, sp, #36	; 0x24
   16ce4:	ldr	r4, [pc, #164]	; 16d90 <__assert_fail@plt+0x58b0>
   16ce8:	mov	r8, r1
   16cec:	movne	r4, r2
   16cf0:	mov	r7, r0
   16cf4:	bl	1139c <__errno_location@plt>
   16cf8:	ldr	r3, [r4, #44]	; 0x2c
   16cfc:	ldr	r5, [r4, #4]
   16d00:	add	r9, r4, #8
   16d04:	orr	r5, r5, #1
   16d08:	mov	r1, #0
   16d0c:	mov	r2, r7
   16d10:	ldr	fp, [r0]
   16d14:	str	r3, [sp, #16]
   16d18:	ldr	r3, [r4, #40]	; 0x28
   16d1c:	stmib	sp, {r5, r9}
   16d20:	str	r3, [sp, #12]
   16d24:	ldr	r3, [r4]
   16d28:	mov	r6, r0
   16d2c:	str	r3, [sp]
   16d30:	mov	r0, r1
   16d34:	mov	r3, r8
   16d38:	bl	155dc <__assert_fail@plt+0x40fc>
   16d3c:	add	r1, r0, #1
   16d40:	mov	r0, r1
   16d44:	str	r1, [sp, #28]
   16d48:	bl	1a244 <__assert_fail@plt+0x8d64>
   16d4c:	ldr	r3, [r4, #44]	; 0x2c
   16d50:	ldr	r1, [sp, #28]
   16d54:	str	r3, [sp, #16]
   16d58:	ldr	r3, [r4, #40]	; 0x28
   16d5c:	str	r5, [sp, #4]
   16d60:	str	r3, [sp, #12]
   16d64:	str	r9, [sp, #8]
   16d68:	ldr	ip, [r4]
   16d6c:	mov	r3, r8
   16d70:	mov	r2, r7
   16d74:	str	ip, [sp]
   16d78:	mov	sl, r0
   16d7c:	bl	155dc <__assert_fail@plt+0x40fc>
   16d80:	mov	r0, sl
   16d84:	str	fp, [r6]
   16d88:	add	sp, sp, #36	; 0x24
   16d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d90:	andeq	lr, r2, r0, lsr r5
   16d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d98:	cmp	r3, #0
   16d9c:	sub	sp, sp, #44	; 0x2c
   16da0:	ldr	r4, [pc, #192]	; 16e68 <__assert_fail@plt+0x5988>
   16da4:	mov	r6, r2
   16da8:	movne	r4, r3
   16dac:	mov	r9, r1
   16db0:	mov	r8, r0
   16db4:	bl	1139c <__errno_location@plt>
   16db8:	ldr	r3, [r4, #44]	; 0x2c
   16dbc:	ldr	r5, [r4, #4]
   16dc0:	add	sl, r4, #8
   16dc4:	cmp	r6, #0
   16dc8:	orreq	r5, r5, #1
   16dcc:	mov	r1, #0
   16dd0:	ldr	r2, [r0]
   16dd4:	str	r3, [sp, #16]
   16dd8:	ldr	r3, [r4, #40]	; 0x28
   16ddc:	stmib	sp, {r5, sl}
   16de0:	str	r3, [sp, #12]
   16de4:	ldr	r3, [r4]
   16de8:	mov	r7, r0
   16dec:	str	r2, [sp, #28]
   16df0:	str	r3, [sp]
   16df4:	mov	r2, r8
   16df8:	mov	r3, r9
   16dfc:	mov	r0, r1
   16e00:	bl	155dc <__assert_fail@plt+0x40fc>
   16e04:	add	r1, r0, #1
   16e08:	mov	fp, r0
   16e0c:	mov	r0, r1
   16e10:	str	r1, [sp, #36]	; 0x24
   16e14:	bl	1a244 <__assert_fail@plt+0x8d64>
   16e18:	ldr	r3, [r4, #44]	; 0x2c
   16e1c:	mov	r2, r8
   16e20:	str	r3, [sp, #16]
   16e24:	ldr	r3, [r4, #40]	; 0x28
   16e28:	str	r5, [sp, #4]
   16e2c:	str	r3, [sp, #12]
   16e30:	str	sl, [sp, #8]
   16e34:	ldr	ip, [r4]
   16e38:	ldr	r1, [sp, #36]	; 0x24
   16e3c:	mov	r3, r9
   16e40:	str	ip, [sp]
   16e44:	str	r0, [sp, #32]
   16e48:	bl	155dc <__assert_fail@plt+0x40fc>
   16e4c:	ldr	r2, [sp, #28]
   16e50:	cmp	r6, #0
   16e54:	str	r2, [r7]
   16e58:	ldr	r0, [sp, #32]
   16e5c:	strne	fp, [r6]
   16e60:	add	sp, sp, #44	; 0x2c
   16e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e68:	andeq	lr, r2, r0, lsr r5
   16e6c:	push	{r4, r5, r6, r7, r8, lr}
   16e70:	ldr	r6, [pc, #116]	; 16eec <__assert_fail@plt+0x5a0c>
   16e74:	ldr	r3, [r6, #4]
   16e78:	ldr	r7, [r6]
   16e7c:	cmp	r3, #1
   16e80:	movgt	r5, r7
   16e84:	movgt	r4, #1
   16e88:	ble	16ea8 <__assert_fail@plt+0x59c8>
   16e8c:	ldr	r0, [r5, #12]
   16e90:	bl	15238 <__assert_fail@plt+0x3d58>
   16e94:	ldr	r3, [r6, #4]
   16e98:	add	r4, r4, #1
   16e9c:	cmp	r3, r4
   16ea0:	add	r5, r5, #8
   16ea4:	bgt	16e8c <__assert_fail@plt+0x59ac>
   16ea8:	ldr	r0, [r7, #4]
   16eac:	ldr	r4, [pc, #60]	; 16ef0 <__assert_fail@plt+0x5a10>
   16eb0:	cmp	r0, r4
   16eb4:	beq	16ec8 <__assert_fail@plt+0x59e8>
   16eb8:	bl	15238 <__assert_fail@plt+0x3d58>
   16ebc:	mov	r3, #256	; 0x100
   16ec0:	str	r4, [r6, #12]
   16ec4:	str	r3, [r6, #8]
   16ec8:	ldr	r4, [pc, #36]	; 16ef4 <__assert_fail@plt+0x5a14>
   16ecc:	cmp	r7, r4
   16ed0:	beq	16ee0 <__assert_fail@plt+0x5a00>
   16ed4:	mov	r0, r7
   16ed8:	bl	15238 <__assert_fail@plt+0x3d58>
   16edc:	str	r4, [r6]
   16ee0:	mov	r3, #1
   16ee4:	str	r3, [r6, #4]
   16ee8:	pop	{r4, r5, r6, r7, r8, pc}
   16eec:	andeq	lr, r2, ip, ror #2
   16ef0:	andeq	lr, r2, r0, ror #10
   16ef4:	andeq	lr, r2, r4, ror r1
   16ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16efc:	sub	sp, sp, #44	; 0x2c
   16f00:	mov	r5, r0
   16f04:	mov	sl, r1
   16f08:	bl	1139c <__errno_location@plt>
   16f0c:	ldr	r4, [pc, #400]	; 170a4 <__assert_fail@plt+0x5bc4>
   16f10:	cmn	r5, #-2147483647	; 0x80000001
   16f14:	ldr	r6, [r4]
   16f18:	mov	r8, r0
   16f1c:	movne	r0, #0
   16f20:	moveq	r0, #1
   16f24:	ldr	r3, [r8]
   16f28:	orrs	r0, r0, r5, lsr #31
   16f2c:	str	r3, [sp, #24]
   16f30:	bne	170a0 <__assert_fail@plt+0x5bc0>
   16f34:	ldr	r2, [r4, #4]
   16f38:	cmp	r5, r2
   16f3c:	blt	16f9c <__assert_fail@plt+0x5abc>
   16f40:	add	r7, r4, #8
   16f44:	cmp	r6, r7
   16f48:	str	r2, [sp, #36]	; 0x24
   16f4c:	beq	17070 <__assert_fail@plt+0x5b90>
   16f50:	mov	r3, #8
   16f54:	sub	r2, r5, r2
   16f58:	mov	r0, r6
   16f5c:	str	r3, [sp]
   16f60:	add	r2, r2, #1
   16f64:	mvn	r3, #-2147483648	; 0x80000000
   16f68:	add	r1, sp, #36	; 0x24
   16f6c:	bl	1a460 <__assert_fail@plt+0x8f80>
   16f70:	mov	r6, r0
   16f74:	str	r0, [r4]
   16f78:	ldr	r0, [r4, #4]
   16f7c:	ldr	r2, [sp, #36]	; 0x24
   16f80:	mov	r1, #0
   16f84:	sub	r2, r2, r0
   16f88:	add	r0, r6, r0, lsl #3
   16f8c:	lsl	r2, r2, #3
   16f90:	bl	113c0 <memset@plt>
   16f94:	ldr	r3, [sp, #36]	; 0x24
   16f98:	str	r3, [r4, #4]
   16f9c:	ldr	r4, [pc, #260]	; 170a8 <__assert_fail@plt+0x5bc8>
   16fa0:	add	fp, r6, r5, lsl #3
   16fa4:	ldr	r9, [r6, r5, lsl #3]
   16fa8:	ldr	r0, [r4, #4]
   16fac:	ldr	r3, [r4]
   16fb0:	ldr	r7, [fp, #4]
   16fb4:	ldr	r1, [r4, #44]	; 0x2c
   16fb8:	ldr	r2, [r4, #40]	; 0x28
   16fbc:	orr	r0, r0, #1
   16fc0:	str	r3, [sp]
   16fc4:	add	r3, r4, #8
   16fc8:	str	r0, [sp, #28]
   16fcc:	str	r0, [sp, #4]
   16fd0:	str	r1, [sp, #16]
   16fd4:	str	r2, [sp, #12]
   16fd8:	str	r3, [sp, #8]
   16fdc:	mov	r0, r7
   16fe0:	mov	r1, r9
   16fe4:	mvn	r3, #0
   16fe8:	mov	r2, sl
   16fec:	bl	155dc <__assert_fail@plt+0x40fc>
   16ff0:	cmp	r9, r0
   16ff4:	bhi	1705c <__assert_fail@plt+0x5b7c>
   16ff8:	add	r3, r4, #48	; 0x30
   16ffc:	add	r9, r0, #1
   17000:	cmp	r7, r3
   17004:	str	r9, [r6, r5, lsl #3]
   17008:	beq	17014 <__assert_fail@plt+0x5b34>
   1700c:	mov	r0, r7
   17010:	bl	15238 <__assert_fail@plt+0x3d58>
   17014:	mov	r0, r9
   17018:	bl	1a244 <__assert_fail@plt+0x8d64>
   1701c:	ldr	ip, [r4, #44]	; 0x2c
   17020:	ldr	r3, [r4]
   17024:	ldr	lr, [r4, #40]	; 0x28
   17028:	ldr	r4, [pc, #124]	; 170ac <__assert_fail@plt+0x5bcc>
   1702c:	mov	r2, sl
   17030:	mov	r1, r9
   17034:	str	r0, [fp, #4]
   17038:	str	r4, [sp, #8]
   1703c:	ldr	r4, [sp, #28]
   17040:	str	r3, [sp]
   17044:	str	r4, [sp, #4]
   17048:	str	ip, [sp, #16]
   1704c:	str	lr, [sp, #12]
   17050:	mvn	r3, #0
   17054:	mov	r7, r0
   17058:	bl	155dc <__assert_fail@plt+0x40fc>
   1705c:	ldr	r3, [sp, #24]
   17060:	mov	r0, r7
   17064:	str	r3, [r8]
   17068:	add	sp, sp, #44	; 0x2c
   1706c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17070:	mov	r3, #8
   17074:	sub	r2, r5, r2
   17078:	str	r3, [sp]
   1707c:	add	r1, sp, #36	; 0x24
   17080:	add	r2, r2, #1
   17084:	mvn	r3, #-2147483648	; 0x80000000
   17088:	bl	1a460 <__assert_fail@plt+0x8f80>
   1708c:	mov	r6, r0
   17090:	ldm	r7, {r0, r1}
   17094:	str	r6, [r4]
   17098:	stm	r6, {r0, r1}
   1709c:	b	16f78 <__assert_fail@plt+0x5a98>
   170a0:	bl	114bc <abort@plt>
   170a4:	andeq	lr, r2, ip, ror #2
   170a8:	andeq	lr, r2, r0, lsr r5
   170ac:	andeq	lr, r2, r8, lsr r5
   170b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170b4:	sub	sp, sp, #52	; 0x34
   170b8:	mov	r5, r0
   170bc:	mov	sl, r1
   170c0:	mov	fp, r2
   170c4:	bl	1139c <__errno_location@plt>
   170c8:	ldr	r4, [pc, #408]	; 17268 <__assert_fail@plt+0x5d88>
   170cc:	cmn	r5, #-2147483647	; 0x80000001
   170d0:	ldr	r6, [r4]
   170d4:	mov	r8, r0
   170d8:	movne	r0, #0
   170dc:	moveq	r0, #1
   170e0:	ldr	r3, [r8]
   170e4:	orrs	r0, r0, r5, lsr #31
   170e8:	str	r3, [sp, #28]
   170ec:	bne	17264 <__assert_fail@plt+0x5d84>
   170f0:	ldr	r2, [r4, #4]
   170f4:	cmp	r5, r2
   170f8:	blt	17158 <__assert_fail@plt+0x5c78>
   170fc:	add	r7, r4, #8
   17100:	cmp	r6, r7
   17104:	str	r2, [sp, #44]	; 0x2c
   17108:	beq	17234 <__assert_fail@plt+0x5d54>
   1710c:	mov	r3, #8
   17110:	sub	r2, r5, r2
   17114:	mov	r0, r6
   17118:	str	r3, [sp]
   1711c:	add	r2, r2, #1
   17120:	mvn	r3, #-2147483648	; 0x80000000
   17124:	add	r1, sp, #44	; 0x2c
   17128:	bl	1a460 <__assert_fail@plt+0x8f80>
   1712c:	mov	r6, r0
   17130:	str	r0, [r4]
   17134:	ldr	r0, [r4, #4]
   17138:	ldr	r2, [sp, #44]	; 0x2c
   1713c:	mov	r1, #0
   17140:	sub	r2, r2, r0
   17144:	add	r0, r6, r0, lsl #3
   17148:	lsl	r2, r2, #3
   1714c:	bl	113c0 <memset@plt>
   17150:	ldr	r3, [sp, #44]	; 0x2c
   17154:	str	r3, [r4, #4]
   17158:	ldr	r4, [pc, #268]	; 1726c <__assert_fail@plt+0x5d8c>
   1715c:	add	r3, r6, r5, lsl #3
   17160:	str	r3, [sp, #32]
   17164:	ldr	r7, [r3, #4]
   17168:	ldr	r0, [r4, #4]
   1716c:	ldr	r3, [r4]
   17170:	ldr	r9, [r6, r5, lsl #3]
   17174:	ldr	r1, [r4, #44]	; 0x2c
   17178:	ldr	r2, [r4, #40]	; 0x28
   1717c:	orr	r0, r0, #1
   17180:	str	r3, [sp]
   17184:	add	r3, r4, #8
   17188:	str	r0, [sp, #36]	; 0x24
   1718c:	str	r0, [sp, #4]
   17190:	str	r1, [sp, #16]
   17194:	str	r2, [sp, #12]
   17198:	str	r3, [sp, #8]
   1719c:	mov	r0, r7
   171a0:	mov	r1, r9
   171a4:	mov	r3, fp
   171a8:	mov	r2, sl
   171ac:	bl	155dc <__assert_fail@plt+0x40fc>
   171b0:	cmp	r9, r0
   171b4:	bhi	17220 <__assert_fail@plt+0x5d40>
   171b8:	add	r3, r4, #48	; 0x30
   171bc:	add	r9, r0, #1
   171c0:	cmp	r7, r3
   171c4:	str	r9, [r6, r5, lsl #3]
   171c8:	beq	171d4 <__assert_fail@plt+0x5cf4>
   171cc:	mov	r0, r7
   171d0:	bl	15238 <__assert_fail@plt+0x3d58>
   171d4:	mov	r0, r9
   171d8:	bl	1a244 <__assert_fail@plt+0x8d64>
   171dc:	ldr	ip, [sp, #32]
   171e0:	ldr	lr, [r4, #44]	; 0x2c
   171e4:	ldr	r5, [r4, #40]	; 0x28
   171e8:	mov	r3, fp
   171ec:	mov	r2, sl
   171f0:	mov	r1, r9
   171f4:	str	r0, [ip, #4]
   171f8:	ldr	ip, [r4]
   171fc:	ldr	r4, [pc, #108]	; 17270 <__assert_fail@plt+0x5d90>
   17200:	str	lr, [sp, #16]
   17204:	str	r4, [sp, #8]
   17208:	ldr	r4, [sp, #36]	; 0x24
   1720c:	str	r5, [sp, #12]
   17210:	str	r4, [sp, #4]
   17214:	str	ip, [sp]
   17218:	mov	r7, r0
   1721c:	bl	155dc <__assert_fail@plt+0x40fc>
   17220:	ldr	r3, [sp, #28]
   17224:	mov	r0, r7
   17228:	str	r3, [r8]
   1722c:	add	sp, sp, #52	; 0x34
   17230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17234:	mov	r3, #8
   17238:	sub	r2, r5, r2
   1723c:	str	r3, [sp]
   17240:	add	r1, sp, #44	; 0x2c
   17244:	add	r2, r2, #1
   17248:	mvn	r3, #-2147483648	; 0x80000000
   1724c:	bl	1a460 <__assert_fail@plt+0x8f80>
   17250:	mov	r6, r0
   17254:	ldm	r7, {r0, r1}
   17258:	str	r6, [r4]
   1725c:	stm	r6, {r0, r1}
   17260:	b	17134 <__assert_fail@plt+0x5c54>
   17264:	bl	114bc <abort@plt>
   17268:	andeq	lr, r2, ip, ror #2
   1726c:	andeq	lr, r2, r0, lsr r5
   17270:	andeq	lr, r2, r8, lsr r5
   17274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17278:	sub	sp, sp, #44	; 0x2c
   1727c:	mov	sl, r0
   17280:	bl	1139c <__errno_location@plt>
   17284:	ldr	r4, [pc, #352]	; 173ec <__assert_fail@plt+0x5f0c>
   17288:	ldr	r2, [r4, #4]
   1728c:	ldr	r5, [r4]
   17290:	cmp	r2, #0
   17294:	ldr	r3, [r0]
   17298:	mov	r8, r0
   1729c:	str	r3, [sp, #28]
   172a0:	bgt	172fc <__assert_fail@plt+0x5e1c>
   172a4:	add	r6, r4, #8
   172a8:	cmp	r5, r6
   172ac:	str	r2, [sp, #36]	; 0x24
   172b0:	beq	173bc <__assert_fail@plt+0x5edc>
   172b4:	mov	r3, #8
   172b8:	mov	r0, r5
   172bc:	str	r3, [sp]
   172c0:	rsb	r2, r2, #1
   172c4:	mvn	r3, #-2147483648	; 0x80000000
   172c8:	add	r1, sp, #36	; 0x24
   172cc:	bl	1a460 <__assert_fail@plt+0x8f80>
   172d0:	mov	r5, r0
   172d4:	str	r0, [r4]
   172d8:	ldr	r0, [r4, #4]
   172dc:	ldr	r2, [sp, #36]	; 0x24
   172e0:	mov	r1, #0
   172e4:	sub	r2, r2, r0
   172e8:	add	r0, r5, r0, lsl #3
   172ec:	lsl	r2, r2, #3
   172f0:	bl	113c0 <memset@plt>
   172f4:	ldr	r3, [sp, #36]	; 0x24
   172f8:	str	r3, [r4, #4]
   172fc:	ldr	r4, [pc, #236]	; 173f0 <__assert_fail@plt+0x5f10>
   17300:	ldr	r9, [r5]
   17304:	ldr	r6, [r5, #4]
   17308:	ldr	r7, [r4, #4]
   1730c:	ldr	r1, [r4, #44]	; 0x2c
   17310:	ldr	r2, [r4, #40]	; 0x28
   17314:	ldr	r3, [r4]
   17318:	orr	r7, r7, #1
   1731c:	add	fp, r4, #8
   17320:	str	r1, [sp, #16]
   17324:	str	r2, [sp, #12]
   17328:	str	r3, [sp]
   1732c:	str	r7, [sp, #4]
   17330:	str	fp, [sp, #8]
   17334:	mov	r1, r9
   17338:	mov	r0, r6
   1733c:	mvn	r3, #0
   17340:	mov	r2, sl
   17344:	bl	155dc <__assert_fail@plt+0x40fc>
   17348:	cmp	r9, r0
   1734c:	bhi	173a8 <__assert_fail@plt+0x5ec8>
   17350:	add	r3, r4, #48	; 0x30
   17354:	add	r9, r0, #1
   17358:	cmp	r6, r3
   1735c:	str	r9, [r5]
   17360:	beq	1736c <__assert_fail@plt+0x5e8c>
   17364:	mov	r0, r6
   17368:	bl	15238 <__assert_fail@plt+0x3d58>
   1736c:	mov	r0, r9
   17370:	bl	1a244 <__assert_fail@plt+0x8d64>
   17374:	ldr	ip, [r4, #44]	; 0x2c
   17378:	ldr	r3, [r4]
   1737c:	ldr	lr, [r4, #40]	; 0x28
   17380:	mov	r2, sl
   17384:	mov	r1, r9
   17388:	str	r0, [r5, #4]
   1738c:	str	r3, [sp]
   17390:	stmib	sp, {r7, fp}
   17394:	str	ip, [sp, #16]
   17398:	str	lr, [sp, #12]
   1739c:	mvn	r3, #0
   173a0:	mov	r6, r0
   173a4:	bl	155dc <__assert_fail@plt+0x40fc>
   173a8:	ldr	r3, [sp, #28]
   173ac:	mov	r0, r6
   173b0:	str	r3, [r8]
   173b4:	add	sp, sp, #44	; 0x2c
   173b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173bc:	mov	r3, #8
   173c0:	str	r3, [sp]
   173c4:	add	r1, sp, #36	; 0x24
   173c8:	rsb	r2, r2, #1
   173cc:	mvn	r3, #-2147483648	; 0x80000000
   173d0:	mov	r0, #0
   173d4:	bl	1a460 <__assert_fail@plt+0x8f80>
   173d8:	mov	r5, r0
   173dc:	ldm	r6, {r0, r1}
   173e0:	str	r5, [r4]
   173e4:	stm	r5, {r0, r1}
   173e8:	b	172d8 <__assert_fail@plt+0x5df8>
   173ec:	andeq	lr, r2, ip, ror #2
   173f0:	andeq	lr, r2, r0, lsr r5
   173f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173f8:	sub	sp, sp, #44	; 0x2c
   173fc:	mov	r9, r0
   17400:	mov	sl, r1
   17404:	bl	1139c <__errno_location@plt>
   17408:	ldr	r4, [pc, #364]	; 1757c <__assert_fail@plt+0x609c>
   1740c:	ldr	r2, [r4, #4]
   17410:	ldr	r5, [r4]
   17414:	cmp	r2, #0
   17418:	ldr	r3, [r0]
   1741c:	mov	r7, r0
   17420:	str	r3, [sp, #24]
   17424:	bgt	17480 <__assert_fail@plt+0x5fa0>
   17428:	add	r6, r4, #8
   1742c:	cmp	r5, r6
   17430:	str	r2, [sp, #36]	; 0x24
   17434:	beq	1754c <__assert_fail@plt+0x606c>
   17438:	mov	r3, #8
   1743c:	mov	r0, r5
   17440:	str	r3, [sp]
   17444:	rsb	r2, r2, #1
   17448:	mvn	r3, #-2147483648	; 0x80000000
   1744c:	add	r1, sp, #36	; 0x24
   17450:	bl	1a460 <__assert_fail@plt+0x8f80>
   17454:	mov	r5, r0
   17458:	str	r0, [r4]
   1745c:	ldr	r0, [r4, #4]
   17460:	ldr	r2, [sp, #36]	; 0x24
   17464:	mov	r1, #0
   17468:	sub	r2, r2, r0
   1746c:	add	r0, r5, r0, lsl #3
   17470:	lsl	r2, r2, #3
   17474:	bl	113c0 <memset@plt>
   17478:	ldr	r3, [sp, #36]	; 0x24
   1747c:	str	r3, [r4, #4]
   17480:	ldr	r4, [pc, #248]	; 17580 <__assert_fail@plt+0x60a0>
   17484:	ldr	r8, [r5]
   17488:	ldr	r6, [r5, #4]
   1748c:	ldr	r0, [r4, #4]
   17490:	ldr	r1, [r4, #44]	; 0x2c
   17494:	ldr	r2, [r4, #40]	; 0x28
   17498:	ldr	r3, [r4]
   1749c:	orr	r0, r0, #1
   174a0:	add	fp, r4, #8
   174a4:	str	r0, [sp, #28]
   174a8:	str	r0, [sp, #4]
   174ac:	str	r1, [sp, #16]
   174b0:	str	r2, [sp, #12]
   174b4:	str	r3, [sp]
   174b8:	str	fp, [sp, #8]
   174bc:	mov	r1, r8
   174c0:	mov	r0, r6
   174c4:	mov	r3, sl
   174c8:	mov	r2, r9
   174cc:	bl	155dc <__assert_fail@plt+0x40fc>
   174d0:	cmp	r8, r0
   174d4:	bhi	17538 <__assert_fail@plt+0x6058>
   174d8:	add	r3, r4, #48	; 0x30
   174dc:	add	r8, r0, #1
   174e0:	cmp	r6, r3
   174e4:	str	r8, [r5]
   174e8:	beq	174f4 <__assert_fail@plt+0x6014>
   174ec:	mov	r0, r6
   174f0:	bl	15238 <__assert_fail@plt+0x3d58>
   174f4:	mov	r0, r8
   174f8:	bl	1a244 <__assert_fail@plt+0x8d64>
   174fc:	ldr	lr, [r4, #44]	; 0x2c
   17500:	ldr	ip, [r4]
   17504:	mov	r3, sl
   17508:	mov	r2, r9
   1750c:	mov	r1, r8
   17510:	str	r0, [r5, #4]
   17514:	ldr	r5, [r4, #40]	; 0x28
   17518:	ldr	r4, [sp, #28]
   1751c:	str	fp, [sp, #8]
   17520:	str	r4, [sp, #4]
   17524:	str	lr, [sp, #16]
   17528:	str	r5, [sp, #12]
   1752c:	str	ip, [sp]
   17530:	mov	r6, r0
   17534:	bl	155dc <__assert_fail@plt+0x40fc>
   17538:	ldr	r3, [sp, #24]
   1753c:	mov	r0, r6
   17540:	str	r3, [r7]
   17544:	add	sp, sp, #44	; 0x2c
   17548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1754c:	mov	r3, #8
   17550:	str	r3, [sp]
   17554:	add	r1, sp, #36	; 0x24
   17558:	rsb	r2, r2, #1
   1755c:	mvn	r3, #-2147483648	; 0x80000000
   17560:	mov	r0, #0
   17564:	bl	1a460 <__assert_fail@plt+0x8f80>
   17568:	mov	r5, r0
   1756c:	ldm	r6, {r0, r1}
   17570:	str	r5, [r4]
   17574:	stm	r5, {r0, r1}
   17578:	b	1745c <__assert_fail@plt+0x5f7c>
   1757c:	andeq	lr, r2, ip, ror #2
   17580:	andeq	lr, r2, r0, lsr r5
   17584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17588:	sub	sp, sp, #132	; 0x84
   1758c:	mov	r5, r1
   17590:	mov	r4, r0
   17594:	mov	r9, r2
   17598:	add	r0, sp, #80	; 0x50
   1759c:	mov	r2, #48	; 0x30
   175a0:	mov	r1, #0
   175a4:	bl	113c0 <memset@plt>
   175a8:	cmp	r5, #10
   175ac:	beq	17764 <__assert_fail@plt+0x6284>
   175b0:	add	lr, sp, #80	; 0x50
   175b4:	str	r5, [sp, #80]	; 0x50
   175b8:	ldm	lr!, {r0, r1, r2, r3}
   175bc:	add	ip, sp, #32
   175c0:	ldr	r6, [pc, #416]	; 17768 <__assert_fail@plt+0x6288>
   175c4:	stmia	ip!, {r0, r1, r2, r3}
   175c8:	ldm	lr!, {r0, r1, r2, r3}
   175cc:	stmia	ip!, {r0, r1, r2, r3}
   175d0:	ldm	lr, {r0, r1, r2, r3}
   175d4:	stm	ip, {r0, r1, r2, r3}
   175d8:	bl	1139c <__errno_location@plt>
   175dc:	cmn	r4, #-2147483647	; 0x80000001
   175e0:	ldr	r5, [r6]
   175e4:	mov	r7, r0
   175e8:	movne	r0, #0
   175ec:	moveq	r0, #1
   175f0:	ldr	r3, [r7]
   175f4:	orrs	r0, r0, r4, lsr #31
   175f8:	str	r3, [sp, #24]
   175fc:	bne	17764 <__assert_fail@plt+0x6284>
   17600:	ldr	r2, [r6, #4]
   17604:	cmp	r4, r2
   17608:	blt	17668 <__assert_fail@plt+0x6188>
   1760c:	add	r8, r6, #8
   17610:	cmp	r5, r8
   17614:	str	r2, [sp, #80]	; 0x50
   17618:	beq	17734 <__assert_fail@plt+0x6254>
   1761c:	mov	r3, #8
   17620:	sub	r2, r4, r2
   17624:	mov	r0, r5
   17628:	str	r3, [sp]
   1762c:	add	r2, r2, #1
   17630:	add	r1, sp, #80	; 0x50
   17634:	mvn	r3, #-2147483648	; 0x80000000
   17638:	bl	1a460 <__assert_fail@plt+0x8f80>
   1763c:	mov	r5, r0
   17640:	str	r0, [r6]
   17644:	ldr	r0, [r6, #4]
   17648:	ldr	r2, [sp, #80]	; 0x50
   1764c:	mov	r1, #0
   17650:	sub	r2, r2, r0
   17654:	add	r0, r5, r0, lsl #3
   17658:	lsl	r2, r2, #3
   1765c:	bl	113c0 <memset@plt>
   17660:	ldr	r3, [sp, #80]	; 0x50
   17664:	str	r3, [r6, #4]
   17668:	add	fp, r5, r4, lsl #3
   1766c:	ldr	r1, [sp, #36]	; 0x24
   17670:	ldr	r8, [r5, r4, lsl #3]
   17674:	ldr	r6, [fp, #4]
   17678:	ldr	r2, [sp, #72]	; 0x48
   1767c:	ldr	r3, [sp, #32]
   17680:	ldr	ip, [sp, #76]	; 0x4c
   17684:	orr	r1, r1, #1
   17688:	add	sl, sp, #40	; 0x28
   1768c:	str	r1, [sp, #28]
   17690:	str	r1, [sp, #4]
   17694:	str	r2, [sp, #12]
   17698:	str	r3, [sp]
   1769c:	mov	r0, r6
   176a0:	mov	r1, r8
   176a4:	str	ip, [sp, #16]
   176a8:	str	sl, [sp, #8]
   176ac:	mvn	r3, #0
   176b0:	mov	r2, r9
   176b4:	bl	155dc <__assert_fail@plt+0x40fc>
   176b8:	cmp	r8, r0
   176bc:	bhi	17720 <__assert_fail@plt+0x6240>
   176c0:	ldr	r3, [pc, #164]	; 1776c <__assert_fail@plt+0x628c>
   176c4:	add	r8, r0, #1
   176c8:	cmp	r6, r3
   176cc:	str	r8, [r5, r4, lsl #3]
   176d0:	beq	176dc <__assert_fail@plt+0x61fc>
   176d4:	mov	r0, r6
   176d8:	bl	15238 <__assert_fail@plt+0x3d58>
   176dc:	mov	r0, r8
   176e0:	bl	1a244 <__assert_fail@plt+0x8d64>
   176e4:	ldr	lr, [sp, #76]	; 0x4c
   176e8:	ldr	r3, [sp, #32]
   176ec:	ldr	ip, [sp, #72]	; 0x48
   176f0:	ldr	r4, [sp, #28]
   176f4:	mov	r2, r9
   176f8:	mov	r1, r8
   176fc:	str	r0, [fp, #4]
   17700:	str	r3, [sp]
   17704:	str	sl, [sp, #8]
   17708:	str	r4, [sp, #4]
   1770c:	str	lr, [sp, #16]
   17710:	str	ip, [sp, #12]
   17714:	mvn	r3, #0
   17718:	mov	r6, r0
   1771c:	bl	155dc <__assert_fail@plt+0x40fc>
   17720:	ldr	r3, [sp, #24]
   17724:	mov	r0, r6
   17728:	str	r3, [r7]
   1772c:	add	sp, sp, #132	; 0x84
   17730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17734:	mov	r3, #8
   17738:	sub	r2, r4, r2
   1773c:	add	r1, sp, #80	; 0x50
   17740:	str	r3, [sp]
   17744:	add	r2, r2, #1
   17748:	mvn	r3, #-2147483648	; 0x80000000
   1774c:	bl	1a460 <__assert_fail@plt+0x8f80>
   17750:	mov	r5, r0
   17754:	ldm	r8, {r0, r1}
   17758:	str	r5, [r6]
   1775c:	stm	r5, {r0, r1}
   17760:	b	17644 <__assert_fail@plt+0x6164>
   17764:	bl	114bc <abort@plt>
   17768:	andeq	lr, r2, ip, ror #2
   1776c:	andeq	lr, r2, r0, ror #10
   17770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17774:	sub	sp, sp, #132	; 0x84
   17778:	mov	r5, r1
   1777c:	mov	r4, r0
   17780:	mov	r9, r2
   17784:	add	r0, sp, #80	; 0x50
   17788:	mov	r2, #48	; 0x30
   1778c:	mov	r1, #0
   17790:	mov	sl, r3
   17794:	bl	113c0 <memset@plt>
   17798:	cmp	r5, #10
   1779c:	beq	17958 <__assert_fail@plt+0x6478>
   177a0:	add	lr, sp, #80	; 0x50
   177a4:	str	r5, [sp, #80]	; 0x50
   177a8:	ldm	lr!, {r0, r1, r2, r3}
   177ac:	add	ip, sp, #32
   177b0:	ldr	r6, [pc, #420]	; 1795c <__assert_fail@plt+0x647c>
   177b4:	stmia	ip!, {r0, r1, r2, r3}
   177b8:	ldm	lr!, {r0, r1, r2, r3}
   177bc:	stmia	ip!, {r0, r1, r2, r3}
   177c0:	ldm	lr, {r0, r1, r2, r3}
   177c4:	stm	ip, {r0, r1, r2, r3}
   177c8:	bl	1139c <__errno_location@plt>
   177cc:	cmn	r4, #-2147483647	; 0x80000001
   177d0:	ldr	r5, [r6]
   177d4:	mov	r7, r0
   177d8:	movne	r0, #0
   177dc:	moveq	r0, #1
   177e0:	ldr	r3, [r7]
   177e4:	orrs	r0, r0, r4, lsr #31
   177e8:	str	r3, [sp, #24]
   177ec:	bne	17958 <__assert_fail@plt+0x6478>
   177f0:	ldr	r2, [r6, #4]
   177f4:	cmp	r4, r2
   177f8:	blt	17858 <__assert_fail@plt+0x6378>
   177fc:	add	r8, r6, #8
   17800:	cmp	r5, r8
   17804:	str	r2, [sp, #80]	; 0x50
   17808:	beq	17928 <__assert_fail@plt+0x6448>
   1780c:	mov	r3, #8
   17810:	sub	r2, r4, r2
   17814:	mov	r0, r5
   17818:	str	r3, [sp]
   1781c:	add	r2, r2, #1
   17820:	add	r1, sp, #80	; 0x50
   17824:	mvn	r3, #-2147483648	; 0x80000000
   17828:	bl	1a460 <__assert_fail@plt+0x8f80>
   1782c:	mov	r5, r0
   17830:	str	r0, [r6]
   17834:	ldr	r0, [r6, #4]
   17838:	ldr	r2, [sp, #80]	; 0x50
   1783c:	mov	r1, #0
   17840:	sub	r2, r2, r0
   17844:	add	r0, r5, r0, lsl #3
   17848:	lsl	r2, r2, #3
   1784c:	bl	113c0 <memset@plt>
   17850:	ldr	r3, [sp, #80]	; 0x50
   17854:	str	r3, [r6, #4]
   17858:	add	fp, r5, r4, lsl #3
   1785c:	ldr	r3, [sp, #32]
   17860:	ldr	r1, [sp, #36]	; 0x24
   17864:	ldr	r8, [r5, r4, lsl #3]
   17868:	ldr	r6, [fp, #4]
   1786c:	ldr	r2, [sp, #72]	; 0x48
   17870:	ldr	ip, [sp, #76]	; 0x4c
   17874:	orr	r1, r1, #1
   17878:	str	r3, [sp]
   1787c:	add	r3, sp, #40	; 0x28
   17880:	str	r1, [sp, #28]
   17884:	str	r1, [sp, #4]
   17888:	str	r2, [sp, #12]
   1788c:	str	r3, [sp, #8]
   17890:	mov	r0, r6
   17894:	mov	r1, r8
   17898:	str	ip, [sp, #16]
   1789c:	mov	r3, sl
   178a0:	mov	r2, r9
   178a4:	bl	155dc <__assert_fail@plt+0x40fc>
   178a8:	cmp	r8, r0
   178ac:	bhi	17914 <__assert_fail@plt+0x6434>
   178b0:	ldr	r3, [pc, #168]	; 17960 <__assert_fail@plt+0x6480>
   178b4:	add	r8, r0, #1
   178b8:	cmp	r6, r3
   178bc:	str	r8, [r5, r4, lsl #3]
   178c0:	beq	178cc <__assert_fail@plt+0x63ec>
   178c4:	mov	r0, r6
   178c8:	bl	15238 <__assert_fail@plt+0x3d58>
   178cc:	mov	r0, r8
   178d0:	bl	1a244 <__assert_fail@plt+0x8d64>
   178d4:	add	lr, sp, #40	; 0x28
   178d8:	ldr	ip, [sp, #76]	; 0x4c
   178dc:	ldr	r4, [sp, #72]	; 0x48
   178e0:	ldr	r5, [sp, #28]
   178e4:	mov	r3, sl
   178e8:	mov	r2, r9
   178ec:	mov	r1, r8
   178f0:	str	r0, [fp, #4]
   178f4:	str	lr, [sp, #8]
   178f8:	ldr	lr, [sp, #32]
   178fc:	str	r5, [sp, #4]
   17900:	str	ip, [sp, #16]
   17904:	str	r4, [sp, #12]
   17908:	str	lr, [sp]
   1790c:	mov	r6, r0
   17910:	bl	155dc <__assert_fail@plt+0x40fc>
   17914:	ldr	r3, [sp, #24]
   17918:	mov	r0, r6
   1791c:	str	r3, [r7]
   17920:	add	sp, sp, #132	; 0x84
   17924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17928:	mov	r3, #8
   1792c:	sub	r2, r4, r2
   17930:	add	r1, sp, #80	; 0x50
   17934:	str	r3, [sp]
   17938:	add	r2, r2, #1
   1793c:	mvn	r3, #-2147483648	; 0x80000000
   17940:	bl	1a460 <__assert_fail@plt+0x8f80>
   17944:	mov	r5, r0
   17948:	ldm	r8, {r0, r1}
   1794c:	str	r5, [r6]
   17950:	stm	r5, {r0, r1}
   17954:	b	17834 <__assert_fail@plt+0x6354>
   17958:	bl	114bc <abort@plt>
   1795c:	andeq	lr, r2, ip, ror #2
   17960:	andeq	lr, r2, r0, ror #10
   17964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17968:	sub	sp, sp, #124	; 0x7c
   1796c:	mov	r4, r0
   17970:	mov	r9, r1
   17974:	add	r0, sp, #72	; 0x48
   17978:	mov	r2, #48	; 0x30
   1797c:	mov	r1, #0
   17980:	bl	113c0 <memset@plt>
   17984:	cmp	r4, #10
   17988:	beq	17b14 <__assert_fail@plt+0x6634>
   1798c:	add	lr, sp, #72	; 0x48
   17990:	str	r4, [sp, #72]	; 0x48
   17994:	ldm	lr!, {r0, r1, r2, r3}
   17998:	add	ip, sp, #24
   1799c:	ldr	r5, [pc, #372]	; 17b18 <__assert_fail@plt+0x6638>
   179a0:	stmia	ip!, {r0, r1, r2, r3}
   179a4:	ldm	lr!, {r0, r1, r2, r3}
   179a8:	stmia	ip!, {r0, r1, r2, r3}
   179ac:	ldm	lr, {r0, r1, r2, r3}
   179b0:	stm	ip, {r0, r1, r2, r3}
   179b4:	bl	1139c <__errno_location@plt>
   179b8:	ldr	r2, [r5, #4]
   179bc:	ldr	r4, [r5]
   179c0:	cmp	r2, #0
   179c4:	mov	r7, r0
   179c8:	ldr	fp, [r0]
   179cc:	bgt	17a28 <__assert_fail@plt+0x6548>
   179d0:	add	r6, r5, #8
   179d4:	cmp	r4, r6
   179d8:	str	r2, [sp, #72]	; 0x48
   179dc:	beq	17ae4 <__assert_fail@plt+0x6604>
   179e0:	mov	r3, #8
   179e4:	mov	r0, r4
   179e8:	str	r3, [sp]
   179ec:	rsb	r2, r2, #1
   179f0:	add	r1, sp, #72	; 0x48
   179f4:	mvn	r3, #-2147483648	; 0x80000000
   179f8:	bl	1a460 <__assert_fail@plt+0x8f80>
   179fc:	mov	r4, r0
   17a00:	str	r0, [r5]
   17a04:	ldr	r0, [r5, #4]
   17a08:	ldr	r2, [sp, #72]	; 0x48
   17a0c:	mov	r1, #0
   17a10:	sub	r2, r2, r0
   17a14:	add	r0, r4, r0, lsl #3
   17a18:	lsl	r2, r2, #3
   17a1c:	bl	113c0 <memset@plt>
   17a20:	ldr	r3, [sp, #72]	; 0x48
   17a24:	str	r3, [r5, #4]
   17a28:	ldr	r6, [sp, #28]
   17a2c:	ldr	r8, [r4]
   17a30:	ldr	r5, [r4, #4]
   17a34:	ldr	r2, [sp, #64]	; 0x40
   17a38:	ldr	r3, [sp, #24]
   17a3c:	ldr	ip, [sp, #68]	; 0x44
   17a40:	orr	r6, r6, #1
   17a44:	add	sl, sp, #32
   17a48:	str	r2, [sp, #12]
   17a4c:	str	r3, [sp]
   17a50:	str	r6, [sp, #4]
   17a54:	mov	r1, r8
   17a58:	mov	r0, r5
   17a5c:	str	ip, [sp, #16]
   17a60:	str	sl, [sp, #8]
   17a64:	mvn	r3, #0
   17a68:	mov	r2, r9
   17a6c:	bl	155dc <__assert_fail@plt+0x40fc>
   17a70:	cmp	r8, r0
   17a74:	bhi	17ad4 <__assert_fail@plt+0x65f4>
   17a78:	ldr	r3, [pc, #156]	; 17b1c <__assert_fail@plt+0x663c>
   17a7c:	add	r8, r0, #1
   17a80:	cmp	r5, r3
   17a84:	str	r8, [r4]
   17a88:	beq	17a94 <__assert_fail@plt+0x65b4>
   17a8c:	mov	r0, r5
   17a90:	bl	15238 <__assert_fail@plt+0x3d58>
   17a94:	mov	r0, r8
   17a98:	bl	1a244 <__assert_fail@plt+0x8d64>
   17a9c:	ldr	lr, [sp, #68]	; 0x44
   17aa0:	ldr	r3, [sp, #24]
   17aa4:	ldr	ip, [sp, #64]	; 0x40
   17aa8:	mov	r2, r9
   17aac:	mov	r1, r8
   17ab0:	str	r0, [r4, #4]
   17ab4:	str	r3, [sp]
   17ab8:	str	sl, [sp, #8]
   17abc:	str	r6, [sp, #4]
   17ac0:	str	lr, [sp, #16]
   17ac4:	str	ip, [sp, #12]
   17ac8:	mvn	r3, #0
   17acc:	mov	r5, r0
   17ad0:	bl	155dc <__assert_fail@plt+0x40fc>
   17ad4:	mov	r0, r5
   17ad8:	str	fp, [r7]
   17adc:	add	sp, sp, #124	; 0x7c
   17ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ae4:	mov	r3, #8
   17ae8:	add	r1, sp, #72	; 0x48
   17aec:	str	r3, [sp]
   17af0:	rsb	r2, r2, #1
   17af4:	mvn	r3, #-2147483648	; 0x80000000
   17af8:	mov	r0, #0
   17afc:	bl	1a460 <__assert_fail@plt+0x8f80>
   17b00:	mov	r4, r0
   17b04:	ldm	r6, {r0, r1}
   17b08:	str	r4, [r5]
   17b0c:	stm	r4, {r0, r1}
   17b10:	b	17a04 <__assert_fail@plt+0x6524>
   17b14:	bl	114bc <abort@plt>
   17b18:	andeq	lr, r2, ip, ror #2
   17b1c:	andeq	lr, r2, r0, ror #10
   17b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b24:	sub	sp, sp, #132	; 0x84
   17b28:	mov	r4, r0
   17b2c:	mov	r9, r1
   17b30:	mov	sl, r2
   17b34:	add	r0, sp, #80	; 0x50
   17b38:	mov	r2, #48	; 0x30
   17b3c:	mov	r1, #0
   17b40:	bl	113c0 <memset@plt>
   17b44:	cmp	r4, #10
   17b48:	beq	17cdc <__assert_fail@plt+0x67fc>
   17b4c:	add	lr, sp, #80	; 0x50
   17b50:	str	r4, [sp, #80]	; 0x50
   17b54:	ldm	lr!, {r0, r1, r2, r3}
   17b58:	add	ip, sp, #32
   17b5c:	ldr	r5, [pc, #380]	; 17ce0 <__assert_fail@plt+0x6800>
   17b60:	stmia	ip!, {r0, r1, r2, r3}
   17b64:	ldm	lr!, {r0, r1, r2, r3}
   17b68:	stmia	ip!, {r0, r1, r2, r3}
   17b6c:	ldm	lr, {r0, r1, r2, r3}
   17b70:	stm	ip, {r0, r1, r2, r3}
   17b74:	bl	1139c <__errno_location@plt>
   17b78:	ldr	r2, [r5, #4]
   17b7c:	ldr	r4, [r5]
   17b80:	cmp	r2, #0
   17b84:	ldr	r3, [r0]
   17b88:	mov	r7, r0
   17b8c:	str	r3, [sp, #28]
   17b90:	bgt	17bec <__assert_fail@plt+0x670c>
   17b94:	add	r6, r5, #8
   17b98:	cmp	r4, r6
   17b9c:	str	r2, [sp, #80]	; 0x50
   17ba0:	beq	17cac <__assert_fail@plt+0x67cc>
   17ba4:	mov	r3, #8
   17ba8:	mov	r0, r4
   17bac:	str	r3, [sp]
   17bb0:	rsb	r2, r2, #1
   17bb4:	add	r1, sp, #80	; 0x50
   17bb8:	mvn	r3, #-2147483648	; 0x80000000
   17bbc:	bl	1a460 <__assert_fail@plt+0x8f80>
   17bc0:	mov	r4, r0
   17bc4:	str	r0, [r5]
   17bc8:	ldr	r0, [r5, #4]
   17bcc:	ldr	r2, [sp, #80]	; 0x50
   17bd0:	mov	r1, #0
   17bd4:	sub	r2, r2, r0
   17bd8:	add	r0, r4, r0, lsl #3
   17bdc:	lsl	r2, r2, #3
   17be0:	bl	113c0 <memset@plt>
   17be4:	ldr	r3, [sp, #80]	; 0x50
   17be8:	str	r3, [r5, #4]
   17bec:	ldr	r6, [sp, #36]	; 0x24
   17bf0:	ldr	r8, [r4]
   17bf4:	ldr	r5, [r4, #4]
   17bf8:	ldr	r2, [sp, #72]	; 0x48
   17bfc:	ldr	r3, [sp, #32]
   17c00:	ldr	ip, [sp, #76]	; 0x4c
   17c04:	orr	r6, r6, #1
   17c08:	add	fp, sp, #40	; 0x28
   17c0c:	str	r2, [sp, #12]
   17c10:	str	r3, [sp]
   17c14:	str	r6, [sp, #4]
   17c18:	mov	r1, r8
   17c1c:	mov	r0, r5
   17c20:	str	ip, [sp, #16]
   17c24:	str	fp, [sp, #8]
   17c28:	mov	r3, sl
   17c2c:	mov	r2, r9
   17c30:	bl	155dc <__assert_fail@plt+0x40fc>
   17c34:	cmp	r8, r0
   17c38:	bhi	17c98 <__assert_fail@plt+0x67b8>
   17c3c:	ldr	r3, [pc, #160]	; 17ce4 <__assert_fail@plt+0x6804>
   17c40:	add	r8, r0, #1
   17c44:	cmp	r5, r3
   17c48:	str	r8, [r4]
   17c4c:	beq	17c58 <__assert_fail@plt+0x6778>
   17c50:	mov	r0, r5
   17c54:	bl	15238 <__assert_fail@plt+0x3d58>
   17c58:	mov	r0, r8
   17c5c:	bl	1a244 <__assert_fail@plt+0x8d64>
   17c60:	ldr	ip, [sp, #76]	; 0x4c
   17c64:	ldr	lr, [sp, #32]
   17c68:	mov	r3, sl
   17c6c:	mov	r2, r9
   17c70:	mov	r1, r8
   17c74:	str	r0, [r4, #4]
   17c78:	ldr	r4, [sp, #72]	; 0x48
   17c7c:	str	fp, [sp, #8]
   17c80:	str	r6, [sp, #4]
   17c84:	str	ip, [sp, #16]
   17c88:	str	r4, [sp, #12]
   17c8c:	str	lr, [sp]
   17c90:	mov	r5, r0
   17c94:	bl	155dc <__assert_fail@plt+0x40fc>
   17c98:	ldr	r3, [sp, #28]
   17c9c:	mov	r0, r5
   17ca0:	str	r3, [r7]
   17ca4:	add	sp, sp, #132	; 0x84
   17ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cac:	mov	r3, #8
   17cb0:	add	r1, sp, #80	; 0x50
   17cb4:	str	r3, [sp]
   17cb8:	rsb	r2, r2, #1
   17cbc:	mvn	r3, #-2147483648	; 0x80000000
   17cc0:	mov	r0, #0
   17cc4:	bl	1a460 <__assert_fail@plt+0x8f80>
   17cc8:	mov	r4, r0
   17ccc:	ldm	r6, {r0, r1}
   17cd0:	str	r4, [r5]
   17cd4:	stm	r4, {r0, r1}
   17cd8:	b	17bc8 <__assert_fail@plt+0x66e8>
   17cdc:	bl	114bc <abort@plt>
   17ce0:	andeq	lr, r2, ip, ror #2
   17ce4:	andeq	lr, r2, r0, ror #10
   17ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cec:	mov	r4, r2
   17cf0:	ldr	lr, [pc, #432]	; 17ea8 <__assert_fail@plt+0x69c8>
   17cf4:	mov	sl, r0
   17cf8:	mov	fp, r1
   17cfc:	ldm	lr!, {r0, r1, r2, r3}
   17d00:	sub	sp, sp, #92	; 0x5c
   17d04:	add	ip, sp, #40	; 0x28
   17d08:	lsr	r7, r4, #5
   17d0c:	stmia	ip!, {r0, r1, r2, r3}
   17d10:	add	r6, sp, #48	; 0x30
   17d14:	ldm	lr!, {r0, r1, r2, r3}
   17d18:	and	r4, r4, #31
   17d1c:	ldr	r5, [pc, #392]	; 17eac <__assert_fail@plt+0x69cc>
   17d20:	stmia	ip!, {r0, r1, r2, r3}
   17d24:	ldm	lr, {r0, r1, r2, r3}
   17d28:	stm	ip, {r0, r1, r2, r3}
   17d2c:	ldr	r2, [r6, r7, lsl #2]
   17d30:	lsr	r3, r2, r4
   17d34:	eor	r3, r3, #1
   17d38:	and	r3, r3, #1
   17d3c:	eor	r4, r2, r3, lsl r4
   17d40:	str	r4, [r6, r7, lsl #2]
   17d44:	bl	1139c <__errno_location@plt>
   17d48:	ldr	r2, [r5, #4]
   17d4c:	ldr	r4, [r5]
   17d50:	cmp	r2, #0
   17d54:	ldr	r3, [r0]
   17d58:	mov	r8, r0
   17d5c:	str	r3, [sp, #28]
   17d60:	bgt	17dbc <__assert_fail@plt+0x68dc>
   17d64:	add	r7, r5, #8
   17d68:	cmp	r4, r7
   17d6c:	str	r2, [sp, #36]	; 0x24
   17d70:	beq	17e78 <__assert_fail@plt+0x6998>
   17d74:	mov	r3, #8
   17d78:	mov	r0, r4
   17d7c:	str	r3, [sp]
   17d80:	rsb	r2, r2, #1
   17d84:	mvn	r3, #-2147483648	; 0x80000000
   17d88:	add	r1, sp, #36	; 0x24
   17d8c:	bl	1a460 <__assert_fail@plt+0x8f80>
   17d90:	mov	r4, r0
   17d94:	str	r0, [r5]
   17d98:	ldr	r0, [r5, #4]
   17d9c:	ldr	r2, [sp, #36]	; 0x24
   17da0:	mov	r1, #0
   17da4:	sub	r2, r2, r0
   17da8:	add	r0, r4, r0, lsl #3
   17dac:	lsl	r2, r2, #3
   17db0:	bl	113c0 <memset@plt>
   17db4:	ldr	r3, [sp, #36]	; 0x24
   17db8:	str	r3, [r5, #4]
   17dbc:	ldr	r7, [sp, #44]	; 0x2c
   17dc0:	ldr	r9, [r4]
   17dc4:	ldr	r5, [r4, #4]
   17dc8:	ldr	r2, [sp, #80]	; 0x50
   17dcc:	ldr	r3, [sp, #40]	; 0x28
   17dd0:	ldr	ip, [sp, #84]	; 0x54
   17dd4:	orr	r7, r7, #1
   17dd8:	str	r2, [sp, #12]
   17ddc:	str	r3, [sp]
   17de0:	str	r7, [sp, #4]
   17de4:	str	r6, [sp, #8]
   17de8:	mov	r1, r9
   17dec:	mov	r0, r5
   17df0:	str	ip, [sp, #16]
   17df4:	mov	r3, fp
   17df8:	mov	r2, sl
   17dfc:	bl	155dc <__assert_fail@plt+0x40fc>
   17e00:	cmp	r9, r0
   17e04:	bhi	17e64 <__assert_fail@plt+0x6984>
   17e08:	ldr	r3, [pc, #160]	; 17eb0 <__assert_fail@plt+0x69d0>
   17e0c:	add	r9, r0, #1
   17e10:	cmp	r5, r3
   17e14:	str	r9, [r4]
   17e18:	beq	17e24 <__assert_fail@plt+0x6944>
   17e1c:	mov	r0, r5
   17e20:	bl	15238 <__assert_fail@plt+0x3d58>
   17e24:	mov	r0, r9
   17e28:	bl	1a244 <__assert_fail@plt+0x8d64>
   17e2c:	ldr	ip, [sp, #84]	; 0x54
   17e30:	ldr	lr, [sp, #40]	; 0x28
   17e34:	mov	r3, fp
   17e38:	mov	r2, sl
   17e3c:	mov	r1, r9
   17e40:	str	r0, [r4, #4]
   17e44:	ldr	r4, [sp, #80]	; 0x50
   17e48:	str	r6, [sp, #8]
   17e4c:	str	r7, [sp, #4]
   17e50:	str	ip, [sp, #16]
   17e54:	str	r4, [sp, #12]
   17e58:	str	lr, [sp]
   17e5c:	mov	r5, r0
   17e60:	bl	155dc <__assert_fail@plt+0x40fc>
   17e64:	ldr	r3, [sp, #28]
   17e68:	mov	r0, r5
   17e6c:	str	r3, [r8]
   17e70:	add	sp, sp, #92	; 0x5c
   17e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e78:	mov	r3, #8
   17e7c:	str	r3, [sp]
   17e80:	add	r1, sp, #36	; 0x24
   17e84:	rsb	r2, r2, #1
   17e88:	mvn	r3, #-2147483648	; 0x80000000
   17e8c:	mov	r0, #0
   17e90:	bl	1a460 <__assert_fail@plt+0x8f80>
   17e94:	mov	r4, r0
   17e98:	ldm	r7, {r0, r1}
   17e9c:	str	r4, [r5]
   17ea0:	stm	r4, {r0, r1}
   17ea4:	b	17d98 <__assert_fail@plt+0x68b8>
   17ea8:	andeq	lr, r2, r0, lsr r5
   17eac:	andeq	lr, r2, ip, ror #2
   17eb0:	andeq	lr, r2, r0, ror #10
   17eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eb8:	mov	r4, r1
   17ebc:	ldr	lr, [pc, #420]	; 18068 <__assert_fail@plt+0x6b88>
   17ec0:	mov	r6, r0
   17ec4:	sub	sp, sp, #84	; 0x54
   17ec8:	ldm	lr!, {r0, r1, r2, r3}
   17ecc:	add	ip, sp, #32
   17ed0:	lsr	r8, r4, #5
   17ed4:	add	r5, sp, #40	; 0x28
   17ed8:	stmia	ip!, {r0, r1, r2, r3}
   17edc:	and	r4, r4, #31
   17ee0:	ldm	lr!, {r0, r1, r2, r3}
   17ee4:	ldr	r7, [pc, #384]	; 1806c <__assert_fail@plt+0x6b8c>
   17ee8:	stmia	ip!, {r0, r1, r2, r3}
   17eec:	ldm	lr, {r0, r1, r2, r3}
   17ef0:	stm	ip, {r0, r1, r2, r3}
   17ef4:	ldr	r2, [r5, r8, lsl #2]
   17ef8:	lsr	r3, r2, r4
   17efc:	eor	r3, r3, #1
   17f00:	and	r3, r3, #1
   17f04:	eor	r4, r2, r3, lsl r4
   17f08:	str	r4, [r5, r8, lsl #2]
   17f0c:	bl	1139c <__errno_location@plt>
   17f10:	ldr	r2, [r7, #4]
   17f14:	ldr	r4, [r7]
   17f18:	cmp	r2, #0
   17f1c:	mov	r9, r0
   17f20:	ldr	sl, [r0]
   17f24:	bgt	17f80 <__assert_fail@plt+0x6aa0>
   17f28:	add	r8, r7, #8
   17f2c:	cmp	r4, r8
   17f30:	str	r2, [sp, #28]
   17f34:	beq	18038 <__assert_fail@plt+0x6b58>
   17f38:	mov	r3, #8
   17f3c:	mov	r0, r4
   17f40:	str	r3, [sp]
   17f44:	rsb	r2, r2, #1
   17f48:	mvn	r3, #-2147483648	; 0x80000000
   17f4c:	add	r1, sp, #28
   17f50:	bl	1a460 <__assert_fail@plt+0x8f80>
   17f54:	mov	r4, r0
   17f58:	str	r0, [r7]
   17f5c:	ldr	r0, [r7, #4]
   17f60:	ldr	r2, [sp, #28]
   17f64:	mov	r1, #0
   17f68:	sub	r2, r2, r0
   17f6c:	add	r0, r4, r0, lsl #3
   17f70:	lsl	r2, r2, #3
   17f74:	bl	113c0 <memset@plt>
   17f78:	ldr	r3, [sp, #28]
   17f7c:	str	r3, [r7, #4]
   17f80:	ldr	r8, [sp, #36]	; 0x24
   17f84:	ldr	fp, [r4]
   17f88:	ldr	r7, [r4, #4]
   17f8c:	ldr	r2, [sp, #72]	; 0x48
   17f90:	ldr	r3, [sp, #32]
   17f94:	ldr	ip, [sp, #76]	; 0x4c
   17f98:	orr	r8, r8, #1
   17f9c:	str	r2, [sp, #12]
   17fa0:	str	r3, [sp]
   17fa4:	str	r8, [sp, #4]
   17fa8:	str	r5, [sp, #8]
   17fac:	mov	r1, fp
   17fb0:	mov	r0, r7
   17fb4:	str	ip, [sp, #16]
   17fb8:	mvn	r3, #0
   17fbc:	mov	r2, r6
   17fc0:	bl	155dc <__assert_fail@plt+0x40fc>
   17fc4:	cmp	fp, r0
   17fc8:	bhi	18028 <__assert_fail@plt+0x6b48>
   17fcc:	ldr	r3, [pc, #156]	; 18070 <__assert_fail@plt+0x6b90>
   17fd0:	add	fp, r0, #1
   17fd4:	cmp	r7, r3
   17fd8:	str	fp, [r4]
   17fdc:	beq	17fe8 <__assert_fail@plt+0x6b08>
   17fe0:	mov	r0, r7
   17fe4:	bl	15238 <__assert_fail@plt+0x3d58>
   17fe8:	mov	r0, fp
   17fec:	bl	1a244 <__assert_fail@plt+0x8d64>
   17ff0:	ldr	lr, [sp, #76]	; 0x4c
   17ff4:	ldr	r3, [sp, #32]
   17ff8:	ldr	ip, [sp, #72]	; 0x48
   17ffc:	mov	r2, r6
   18000:	mov	r1, fp
   18004:	str	r0, [r4, #4]
   18008:	str	r3, [sp]
   1800c:	str	r5, [sp, #8]
   18010:	str	r8, [sp, #4]
   18014:	str	lr, [sp, #16]
   18018:	str	ip, [sp, #12]
   1801c:	mvn	r3, #0
   18020:	mov	r7, r0
   18024:	bl	155dc <__assert_fail@plt+0x40fc>
   18028:	mov	r0, r7
   1802c:	str	sl, [r9]
   18030:	add	sp, sp, #84	; 0x54
   18034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18038:	mov	r3, #8
   1803c:	str	r3, [sp]
   18040:	add	r1, sp, #28
   18044:	rsb	r2, r2, #1
   18048:	mvn	r3, #-2147483648	; 0x80000000
   1804c:	mov	r0, #0
   18050:	bl	1a460 <__assert_fail@plt+0x8f80>
   18054:	mov	r4, r0
   18058:	ldm	r8, {r0, r1}
   1805c:	str	r4, [r7]
   18060:	stm	r4, {r0, r1}
   18064:	b	17f5c <__assert_fail@plt+0x6a7c>
   18068:	andeq	lr, r2, r0, lsr r5
   1806c:	andeq	lr, r2, ip, ror #2
   18070:	andeq	lr, r2, r0, ror #10
   18074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18078:	mov	r6, r0
   1807c:	ldr	lr, [pc, #404]	; 18218 <__assert_fail@plt+0x6d38>
   18080:	sub	sp, sp, #84	; 0x54
   18084:	add	ip, sp, #32
   18088:	ldm	lr!, {r0, r1, r2, r3}
   1808c:	ldr	r5, [pc, #392]	; 1821c <__assert_fail@plt+0x6d3c>
   18090:	stmia	ip!, {r0, r1, r2, r3}
   18094:	ldm	lr!, {r0, r1, r2, r3}
   18098:	ldr	r4, [sp, #44]	; 0x2c
   1809c:	stmia	ip!, {r0, r1, r2, r3}
   180a0:	ldm	lr, {r0, r1, r2, r3}
   180a4:	mvn	lr, r4
   180a8:	and	lr, lr, #67108864	; 0x4000000
   180ac:	eor	lr, lr, r4
   180b0:	stm	ip, {r0, r1, r2, r3}
   180b4:	str	lr, [sp, #44]	; 0x2c
   180b8:	bl	1139c <__errno_location@plt>
   180bc:	ldr	r2, [r5, #4]
   180c0:	ldr	r4, [r5]
   180c4:	cmp	r2, #0
   180c8:	mov	r8, r0
   180cc:	ldr	sl, [r0]
   180d0:	bgt	1812c <__assert_fail@plt+0x6c4c>
   180d4:	add	r7, r5, #8
   180d8:	cmp	r4, r7
   180dc:	str	r2, [sp, #28]
   180e0:	beq	181e8 <__assert_fail@plt+0x6d08>
   180e4:	mov	r3, #8
   180e8:	mov	r0, r4
   180ec:	str	r3, [sp]
   180f0:	rsb	r2, r2, #1
   180f4:	mvn	r3, #-2147483648	; 0x80000000
   180f8:	add	r1, sp, #28
   180fc:	bl	1a460 <__assert_fail@plt+0x8f80>
   18100:	mov	r4, r0
   18104:	str	r0, [r5]
   18108:	ldr	r0, [r5, #4]
   1810c:	ldr	r2, [sp, #28]
   18110:	mov	r1, #0
   18114:	sub	r2, r2, r0
   18118:	add	r0, r4, r0, lsl #3
   1811c:	lsl	r2, r2, #3
   18120:	bl	113c0 <memset@plt>
   18124:	ldr	r3, [sp, #28]
   18128:	str	r3, [r5, #4]
   1812c:	ldr	r7, [sp, #36]	; 0x24
   18130:	ldr	r9, [r4]
   18134:	ldr	r5, [r4, #4]
   18138:	ldr	r2, [sp, #72]	; 0x48
   1813c:	ldr	r3, [sp, #32]
   18140:	ldr	ip, [sp, #76]	; 0x4c
   18144:	orr	r7, r7, #1
   18148:	add	fp, sp, #40	; 0x28
   1814c:	str	r2, [sp, #12]
   18150:	str	r3, [sp]
   18154:	str	r7, [sp, #4]
   18158:	mov	r1, r9
   1815c:	mov	r0, r5
   18160:	str	ip, [sp, #16]
   18164:	str	fp, [sp, #8]
   18168:	mvn	r3, #0
   1816c:	mov	r2, r6
   18170:	bl	155dc <__assert_fail@plt+0x40fc>
   18174:	cmp	r9, r0
   18178:	bhi	181d8 <__assert_fail@plt+0x6cf8>
   1817c:	ldr	r3, [pc, #156]	; 18220 <__assert_fail@plt+0x6d40>
   18180:	add	r9, r0, #1
   18184:	cmp	r5, r3
   18188:	str	r9, [r4]
   1818c:	beq	18198 <__assert_fail@plt+0x6cb8>
   18190:	mov	r0, r5
   18194:	bl	15238 <__assert_fail@plt+0x3d58>
   18198:	mov	r0, r9
   1819c:	bl	1a244 <__assert_fail@plt+0x8d64>
   181a0:	ldr	lr, [sp, #76]	; 0x4c
   181a4:	ldr	r3, [sp, #32]
   181a8:	ldr	ip, [sp, #72]	; 0x48
   181ac:	mov	r2, r6
   181b0:	mov	r1, r9
   181b4:	str	r0, [r4, #4]
   181b8:	str	r3, [sp]
   181bc:	str	fp, [sp, #8]
   181c0:	str	r7, [sp, #4]
   181c4:	str	lr, [sp, #16]
   181c8:	str	ip, [sp, #12]
   181cc:	mvn	r3, #0
   181d0:	mov	r5, r0
   181d4:	bl	155dc <__assert_fail@plt+0x40fc>
   181d8:	mov	r0, r5
   181dc:	str	sl, [r8]
   181e0:	add	sp, sp, #84	; 0x54
   181e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181e8:	mov	r3, #8
   181ec:	str	r3, [sp]
   181f0:	add	r1, sp, #28
   181f4:	rsb	r2, r2, #1
   181f8:	mvn	r3, #-2147483648	; 0x80000000
   181fc:	mov	r0, #0
   18200:	bl	1a460 <__assert_fail@plt+0x8f80>
   18204:	mov	r4, r0
   18208:	ldm	r7, {r0, r1}
   1820c:	str	r4, [r5]
   18210:	stm	r4, {r0, r1}
   18214:	b	18108 <__assert_fail@plt+0x6c28>
   18218:	andeq	lr, r2, r0, lsr r5
   1821c:	andeq	lr, r2, ip, ror #2
   18220:	andeq	lr, r2, r0, ror #10
   18224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18228:	mov	r9, r0
   1822c:	ldr	lr, [pc, #416]	; 183d4 <__assert_fail@plt+0x6ef4>
   18230:	mov	sl, r1
   18234:	sub	sp, sp, #92	; 0x5c
   18238:	ldm	lr!, {r0, r1, r2, r3}
   1823c:	add	ip, sp, #40	; 0x28
   18240:	ldr	r5, [pc, #400]	; 183d8 <__assert_fail@plt+0x6ef8>
   18244:	stmia	ip!, {r0, r1, r2, r3}
   18248:	ldm	lr!, {r0, r1, r2, r3}
   1824c:	ldr	r4, [sp, #52]	; 0x34
   18250:	stmia	ip!, {r0, r1, r2, r3}
   18254:	ldm	lr, {r0, r1, r2, r3}
   18258:	mvn	lr, r4
   1825c:	and	lr, lr, #67108864	; 0x4000000
   18260:	eor	lr, lr, r4
   18264:	stm	ip, {r0, r1, r2, r3}
   18268:	str	lr, [sp, #52]	; 0x34
   1826c:	bl	1139c <__errno_location@plt>
   18270:	ldr	r2, [r5, #4]
   18274:	ldr	r4, [r5]
   18278:	cmp	r2, #0
   1827c:	ldr	r3, [r0]
   18280:	mov	r7, r0
   18284:	str	r3, [sp, #28]
   18288:	bgt	182e4 <__assert_fail@plt+0x6e04>
   1828c:	add	r6, r5, #8
   18290:	cmp	r4, r6
   18294:	str	r2, [sp, #36]	; 0x24
   18298:	beq	183a4 <__assert_fail@plt+0x6ec4>
   1829c:	mov	r3, #8
   182a0:	mov	r0, r4
   182a4:	str	r3, [sp]
   182a8:	rsb	r2, r2, #1
   182ac:	mvn	r3, #-2147483648	; 0x80000000
   182b0:	add	r1, sp, #36	; 0x24
   182b4:	bl	1a460 <__assert_fail@plt+0x8f80>
   182b8:	mov	r4, r0
   182bc:	str	r0, [r5]
   182c0:	ldr	r0, [r5, #4]
   182c4:	ldr	r2, [sp, #36]	; 0x24
   182c8:	mov	r1, #0
   182cc:	sub	r2, r2, r0
   182d0:	add	r0, r4, r0, lsl #3
   182d4:	lsl	r2, r2, #3
   182d8:	bl	113c0 <memset@plt>
   182dc:	ldr	r3, [sp, #36]	; 0x24
   182e0:	str	r3, [r5, #4]
   182e4:	ldr	r6, [sp, #44]	; 0x2c
   182e8:	ldr	r8, [r4]
   182ec:	ldr	r5, [r4, #4]
   182f0:	ldr	r2, [sp, #80]	; 0x50
   182f4:	ldr	r3, [sp, #40]	; 0x28
   182f8:	ldr	ip, [sp, #84]	; 0x54
   182fc:	orr	r6, r6, #1
   18300:	add	fp, sp, #48	; 0x30
   18304:	str	r2, [sp, #12]
   18308:	str	r3, [sp]
   1830c:	str	r6, [sp, #4]
   18310:	mov	r1, r8
   18314:	mov	r0, r5
   18318:	str	ip, [sp, #16]
   1831c:	str	fp, [sp, #8]
   18320:	mov	r3, sl
   18324:	mov	r2, r9
   18328:	bl	155dc <__assert_fail@plt+0x40fc>
   1832c:	cmp	r8, r0
   18330:	bhi	18390 <__assert_fail@plt+0x6eb0>
   18334:	ldr	r3, [pc, #160]	; 183dc <__assert_fail@plt+0x6efc>
   18338:	add	r8, r0, #1
   1833c:	cmp	r5, r3
   18340:	str	r8, [r4]
   18344:	beq	18350 <__assert_fail@plt+0x6e70>
   18348:	mov	r0, r5
   1834c:	bl	15238 <__assert_fail@plt+0x3d58>
   18350:	mov	r0, r8
   18354:	bl	1a244 <__assert_fail@plt+0x8d64>
   18358:	ldr	ip, [sp, #84]	; 0x54
   1835c:	ldr	lr, [sp, #40]	; 0x28
   18360:	mov	r3, sl
   18364:	mov	r2, r9
   18368:	mov	r1, r8
   1836c:	str	r0, [r4, #4]
   18370:	ldr	r4, [sp, #80]	; 0x50
   18374:	str	fp, [sp, #8]
   18378:	str	r6, [sp, #4]
   1837c:	str	ip, [sp, #16]
   18380:	str	r4, [sp, #12]
   18384:	str	lr, [sp]
   18388:	mov	r5, r0
   1838c:	bl	155dc <__assert_fail@plt+0x40fc>
   18390:	ldr	r3, [sp, #28]
   18394:	mov	r0, r5
   18398:	str	r3, [r7]
   1839c:	add	sp, sp, #92	; 0x5c
   183a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183a4:	mov	r3, #8
   183a8:	str	r3, [sp]
   183ac:	add	r1, sp, #36	; 0x24
   183b0:	rsb	r2, r2, #1
   183b4:	mvn	r3, #-2147483648	; 0x80000000
   183b8:	mov	r0, #0
   183bc:	bl	1a460 <__assert_fail@plt+0x8f80>
   183c0:	mov	r4, r0
   183c4:	ldm	r6, {r0, r1}
   183c8:	str	r4, [r5]
   183cc:	stm	r4, {r0, r1}
   183d0:	b	182c0 <__assert_fail@plt+0x6de0>
   183d4:	andeq	lr, r2, r0, lsr r5
   183d8:	andeq	lr, r2, ip, ror #2
   183dc:	andeq	lr, r2, r0, ror #10
   183e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183e4:	sub	sp, sp, #180	; 0xb4
   183e8:	mov	r6, r1
   183ec:	mov	r4, r0
   183f0:	mov	r9, r2
   183f4:	add	r0, sp, #80	; 0x50
   183f8:	mov	r2, #48	; 0x30
   183fc:	mov	r1, #0
   18400:	bl	113c0 <memset@plt>
   18404:	cmp	r6, #10
   18408:	beq	185e8 <__assert_fail@plt+0x7108>
   1840c:	add	r5, sp, #80	; 0x50
   18410:	str	r6, [sp, #80]	; 0x50
   18414:	ldm	r5!, {r0, r1, r2, r3}
   18418:	add	ip, sp, #128	; 0x80
   1841c:	mov	r7, ip
   18420:	add	lr, sp, #32
   18424:	stmia	ip!, {r0, r1, r2, r3}
   18428:	mov	r8, #67108864	; 0x4000000
   1842c:	ldm	r5!, {r0, r1, r2, r3}
   18430:	ldr	r6, [pc, #436]	; 185ec <__assert_fail@plt+0x710c>
   18434:	stmia	ip!, {r0, r1, r2, r3}
   18438:	ldm	r5, {r0, r1, r2, r3}
   1843c:	stm	ip, {r0, r1, r2, r3}
   18440:	ldm	r7!, {r0, r1, r2, r3}
   18444:	stmia	lr!, {r0, r1, r2, r3}
   18448:	ldm	r7!, {r0, r1, r2, r3}
   1844c:	str	r8, [sp, #44]	; 0x2c
   18450:	stmia	lr!, {r0, r1, r2, r3}
   18454:	ldm	ip, {r0, r1, r2, r3}
   18458:	stm	lr, {r0, r1, r2, r3}
   1845c:	bl	1139c <__errno_location@plt>
   18460:	cmn	r4, #-2147483647	; 0x80000001
   18464:	ldr	r5, [r6]
   18468:	mov	r7, r0
   1846c:	movne	r0, #0
   18470:	moveq	r0, #1
   18474:	ldr	r3, [r7]
   18478:	orrs	r0, r0, r4, lsr #31
   1847c:	str	r3, [sp, #24]
   18480:	bne	185e8 <__assert_fail@plt+0x7108>
   18484:	ldr	r2, [r6, #4]
   18488:	cmp	r4, r2
   1848c:	blt	184ec <__assert_fail@plt+0x700c>
   18490:	add	r8, r6, #8
   18494:	cmp	r5, r8
   18498:	str	r2, [sp, #80]	; 0x50
   1849c:	beq	185b8 <__assert_fail@plt+0x70d8>
   184a0:	mov	r3, #8
   184a4:	sub	r2, r4, r2
   184a8:	mov	r0, r5
   184ac:	str	r3, [sp]
   184b0:	add	r2, r2, #1
   184b4:	add	r1, sp, #80	; 0x50
   184b8:	mvn	r3, #-2147483648	; 0x80000000
   184bc:	bl	1a460 <__assert_fail@plt+0x8f80>
   184c0:	mov	r5, r0
   184c4:	str	r0, [r6]
   184c8:	ldr	r0, [r6, #4]
   184cc:	ldr	r2, [sp, #80]	; 0x50
   184d0:	mov	r1, #0
   184d4:	sub	r2, r2, r0
   184d8:	add	r0, r5, r0, lsl #3
   184dc:	lsl	r2, r2, #3
   184e0:	bl	113c0 <memset@plt>
   184e4:	ldr	r3, [sp, #80]	; 0x50
   184e8:	str	r3, [r6, #4]
   184ec:	add	fp, r5, r4, lsl #3
   184f0:	ldr	r1, [sp, #36]	; 0x24
   184f4:	ldr	r8, [r5, r4, lsl #3]
   184f8:	ldr	r6, [fp, #4]
   184fc:	ldr	r2, [sp, #72]	; 0x48
   18500:	ldr	r3, [sp, #32]
   18504:	ldr	ip, [sp, #76]	; 0x4c
   18508:	orr	r1, r1, #1
   1850c:	add	sl, sp, #40	; 0x28
   18510:	str	r1, [sp, #28]
   18514:	str	r1, [sp, #4]
   18518:	str	r2, [sp, #12]
   1851c:	str	r3, [sp]
   18520:	mov	r0, r6
   18524:	mov	r1, r8
   18528:	str	ip, [sp, #16]
   1852c:	str	sl, [sp, #8]
   18530:	mvn	r3, #0
   18534:	mov	r2, r9
   18538:	bl	155dc <__assert_fail@plt+0x40fc>
   1853c:	cmp	r8, r0
   18540:	bhi	185a4 <__assert_fail@plt+0x70c4>
   18544:	ldr	r3, [pc, #164]	; 185f0 <__assert_fail@plt+0x7110>
   18548:	add	r8, r0, #1
   1854c:	cmp	r6, r3
   18550:	str	r8, [r5, r4, lsl #3]
   18554:	beq	18560 <__assert_fail@plt+0x7080>
   18558:	mov	r0, r6
   1855c:	bl	15238 <__assert_fail@plt+0x3d58>
   18560:	mov	r0, r8
   18564:	bl	1a244 <__assert_fail@plt+0x8d64>
   18568:	ldr	lr, [sp, #76]	; 0x4c
   1856c:	ldr	r3, [sp, #32]
   18570:	ldr	ip, [sp, #72]	; 0x48
   18574:	ldr	r4, [sp, #28]
   18578:	mov	r2, r9
   1857c:	mov	r1, r8
   18580:	str	r0, [fp, #4]
   18584:	str	r3, [sp]
   18588:	str	sl, [sp, #8]
   1858c:	str	r4, [sp, #4]
   18590:	str	lr, [sp, #16]
   18594:	str	ip, [sp, #12]
   18598:	mvn	r3, #0
   1859c:	mov	r6, r0
   185a0:	bl	155dc <__assert_fail@plt+0x40fc>
   185a4:	ldr	r3, [sp, #24]
   185a8:	mov	r0, r6
   185ac:	str	r3, [r7]
   185b0:	add	sp, sp, #180	; 0xb4
   185b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185b8:	mov	r3, #8
   185bc:	sub	r2, r4, r2
   185c0:	add	r1, sp, #80	; 0x50
   185c4:	str	r3, [sp]
   185c8:	add	r2, r2, #1
   185cc:	mvn	r3, #-2147483648	; 0x80000000
   185d0:	bl	1a460 <__assert_fail@plt+0x8f80>
   185d4:	mov	r5, r0
   185d8:	ldm	r8, {r0, r1}
   185dc:	str	r5, [r6]
   185e0:	stm	r5, {r0, r1}
   185e4:	b	184c8 <__assert_fail@plt+0x6fe8>
   185e8:	bl	114bc <abort@plt>
   185ec:	andeq	lr, r2, ip, ror #2
   185f0:	andeq	lr, r2, r0, ror #10
   185f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185f8:	mov	r7, r1
   185fc:	ldr	lr, [pc, #492]	; 187f0 <__assert_fail@plt+0x7310>
   18600:	mov	r8, r2
   18604:	mov	r4, r0
   18608:	mov	fp, r3
   1860c:	ldm	lr!, {r0, r1, r2, r3}
   18610:	sub	sp, sp, #100	; 0x64
   18614:	add	ip, sp, #48	; 0x30
   18618:	mov	sl, #10
   1861c:	stmia	ip!, {r0, r1, r2, r3}
   18620:	cmp	r8, #0
   18624:	cmpne	r7, #0
   18628:	ldm	lr!, {r0, r1, r2, r3}
   1862c:	str	sl, [sp, #48]	; 0x30
   18630:	stmia	ip!, {r0, r1, r2, r3}
   18634:	ldm	lr, {r0, r1, r2, r3}
   18638:	stm	ip, {r0, r1, r2, r3}
   1863c:	beq	187ec <__assert_fail@plt+0x730c>
   18640:	str	r7, [sp, #88]	; 0x58
   18644:	str	r8, [sp, #92]	; 0x5c
   18648:	bl	1139c <__errno_location@plt>
   1864c:	ldr	r6, [pc, #416]	; 187f4 <__assert_fail@plt+0x7314>
   18650:	cmn	r4, #-2147483647	; 0x80000001
   18654:	ldr	r5, [r6]
   18658:	mov	r9, r0
   1865c:	movne	r0, #0
   18660:	moveq	r0, #1
   18664:	ldr	r3, [r9]
   18668:	orrs	r0, r0, r4, lsr #31
   1866c:	str	r3, [sp, #28]
   18670:	bne	187ec <__assert_fail@plt+0x730c>
   18674:	ldr	r2, [r6, #4]
   18678:	cmp	r4, r2
   1867c:	movlt	r3, sl
   18680:	blt	186ec <__assert_fail@plt+0x720c>
   18684:	add	r7, r6, #8
   18688:	cmp	r5, r7
   1868c:	str	r2, [sp, #44]	; 0x2c
   18690:	beq	187bc <__assert_fail@plt+0x72dc>
   18694:	mov	r3, #8
   18698:	sub	r2, r4, r2
   1869c:	mov	r0, r5
   186a0:	str	r3, [sp]
   186a4:	add	r2, r2, #1
   186a8:	mvn	r3, #-2147483648	; 0x80000000
   186ac:	add	r1, sp, #44	; 0x2c
   186b0:	bl	1a460 <__assert_fail@plt+0x8f80>
   186b4:	mov	r5, r0
   186b8:	str	r0, [r6]
   186bc:	ldr	r0, [r6, #4]
   186c0:	ldr	r2, [sp, #44]	; 0x2c
   186c4:	mov	r1, #0
   186c8:	sub	r2, r2, r0
   186cc:	add	r0, r5, r0, lsl #3
   186d0:	lsl	r2, r2, #3
   186d4:	bl	113c0 <memset@plt>
   186d8:	ldr	r3, [sp, #48]	; 0x30
   186dc:	ldr	r7, [sp, #88]	; 0x58
   186e0:	ldr	r8, [sp, #92]	; 0x5c
   186e4:	ldr	r2, [sp, #44]	; 0x2c
   186e8:	str	r2, [r6, #4]
   186ec:	add	r2, r5, r4, lsl #3
   186f0:	mov	r1, r2
   186f4:	str	r2, [sp, #32]
   186f8:	ldr	r2, [sp, #52]	; 0x34
   186fc:	ldr	r6, [r1, #4]
   18700:	ldr	sl, [r5, r4, lsl #3]
   18704:	orr	r2, r2, #1
   18708:	str	r3, [sp]
   1870c:	add	r3, sp, #56	; 0x38
   18710:	str	r2, [sp, #36]	; 0x24
   18714:	str	r2, [sp, #4]
   18718:	str	r3, [sp, #8]
   1871c:	mov	r0, r6
   18720:	str	r8, [sp, #16]
   18724:	str	r7, [sp, #12]
   18728:	mov	r1, sl
   1872c:	mvn	r3, #0
   18730:	mov	r2, fp
   18734:	bl	155dc <__assert_fail@plt+0x40fc>
   18738:	cmp	sl, r0
   1873c:	bhi	187a8 <__assert_fail@plt+0x72c8>
   18740:	ldr	r3, [pc, #176]	; 187f8 <__assert_fail@plt+0x7318>
   18744:	add	r7, r0, #1
   18748:	cmp	r6, r3
   1874c:	str	r7, [r5, r4, lsl #3]
   18750:	beq	1875c <__assert_fail@plt+0x727c>
   18754:	mov	r0, r6
   18758:	bl	15238 <__assert_fail@plt+0x3d58>
   1875c:	mov	r0, r7
   18760:	bl	1a244 <__assert_fail@plt+0x8d64>
   18764:	ldr	r3, [sp, #32]
   18768:	ldr	lr, [sp, #92]	; 0x5c
   1876c:	ldr	ip, [sp, #88]	; 0x58
   18770:	ldr	r4, [sp, #36]	; 0x24
   18774:	mov	r2, fp
   18778:	mov	r1, r7
   1877c:	str	r0, [r3, #4]
   18780:	add	r3, sp, #56	; 0x38
   18784:	str	r3, [sp, #8]
   18788:	ldr	r3, [sp, #48]	; 0x30
   1878c:	str	r4, [sp, #4]
   18790:	str	r3, [sp]
   18794:	str	lr, [sp, #16]
   18798:	str	ip, [sp, #12]
   1879c:	mvn	r3, #0
   187a0:	mov	r6, r0
   187a4:	bl	155dc <__assert_fail@plt+0x40fc>
   187a8:	ldr	r3, [sp, #28]
   187ac:	mov	r0, r6
   187b0:	str	r3, [r9]
   187b4:	add	sp, sp, #100	; 0x64
   187b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187bc:	mov	r3, #8
   187c0:	sub	r2, r4, r2
   187c4:	str	r3, [sp]
   187c8:	add	r1, sp, #44	; 0x2c
   187cc:	add	r2, r2, #1
   187d0:	mvn	r3, #-2147483648	; 0x80000000
   187d4:	bl	1a460 <__assert_fail@plt+0x8f80>
   187d8:	mov	r5, r0
   187dc:	ldm	r7, {r0, r1}
   187e0:	str	r5, [r6]
   187e4:	stm	r5, {r0, r1}
   187e8:	b	186bc <__assert_fail@plt+0x71dc>
   187ec:	bl	114bc <abort@plt>
   187f0:	andeq	lr, r2, r0, lsr r5
   187f4:	andeq	lr, r2, ip, ror #2
   187f8:	andeq	lr, r2, r0, ror #10
   187fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18800:	mov	r7, r1
   18804:	ldr	lr, [pc, #492]	; 189f8 <__assert_fail@plt+0x7518>
   18808:	mov	r8, r2
   1880c:	mov	r4, r0
   18810:	mov	fp, r3
   18814:	ldm	lr!, {r0, r1, r2, r3}
   18818:	sub	sp, sp, #100	; 0x64
   1881c:	add	ip, sp, #48	; 0x30
   18820:	mov	sl, #10
   18824:	stmia	ip!, {r0, r1, r2, r3}
   18828:	cmp	r8, #0
   1882c:	cmpne	r7, #0
   18830:	ldm	lr!, {r0, r1, r2, r3}
   18834:	str	sl, [sp, #48]	; 0x30
   18838:	stmia	ip!, {r0, r1, r2, r3}
   1883c:	ldm	lr, {r0, r1, r2, r3}
   18840:	stm	ip, {r0, r1, r2, r3}
   18844:	beq	189f4 <__assert_fail@plt+0x7514>
   18848:	str	r7, [sp, #88]	; 0x58
   1884c:	str	r8, [sp, #92]	; 0x5c
   18850:	bl	1139c <__errno_location@plt>
   18854:	ldr	r6, [pc, #416]	; 189fc <__assert_fail@plt+0x751c>
   18858:	cmn	r4, #-2147483647	; 0x80000001
   1885c:	ldr	r5, [r6]
   18860:	mov	r9, r0
   18864:	movne	r0, #0
   18868:	moveq	r0, #1
   1886c:	ldr	r3, [r9]
   18870:	orrs	r0, r0, r4, lsr #31
   18874:	str	r3, [sp, #28]
   18878:	bne	189f4 <__assert_fail@plt+0x7514>
   1887c:	ldr	r2, [r6, #4]
   18880:	cmp	r4, r2
   18884:	movlt	r3, sl
   18888:	blt	188f4 <__assert_fail@plt+0x7414>
   1888c:	add	r7, r6, #8
   18890:	cmp	r5, r7
   18894:	str	r2, [sp, #44]	; 0x2c
   18898:	beq	189c4 <__assert_fail@plt+0x74e4>
   1889c:	mov	r3, #8
   188a0:	sub	r2, r4, r2
   188a4:	mov	r0, r5
   188a8:	str	r3, [sp]
   188ac:	add	r2, r2, #1
   188b0:	mvn	r3, #-2147483648	; 0x80000000
   188b4:	add	r1, sp, #44	; 0x2c
   188b8:	bl	1a460 <__assert_fail@plt+0x8f80>
   188bc:	mov	r5, r0
   188c0:	str	r0, [r6]
   188c4:	ldr	r0, [r6, #4]
   188c8:	ldr	r2, [sp, #44]	; 0x2c
   188cc:	mov	r1, #0
   188d0:	sub	r2, r2, r0
   188d4:	add	r0, r5, r0, lsl #3
   188d8:	lsl	r2, r2, #3
   188dc:	bl	113c0 <memset@plt>
   188e0:	ldr	r3, [sp, #48]	; 0x30
   188e4:	ldr	r7, [sp, #88]	; 0x58
   188e8:	ldr	r8, [sp, #92]	; 0x5c
   188ec:	ldr	r2, [sp, #44]	; 0x2c
   188f0:	str	r2, [r6, #4]
   188f4:	add	r2, r5, r4, lsl #3
   188f8:	mov	r1, r2
   188fc:	str	r2, [sp, #32]
   18900:	ldr	r2, [sp, #52]	; 0x34
   18904:	ldr	r6, [r1, #4]
   18908:	ldr	sl, [r5, r4, lsl #3]
   1890c:	orr	r2, r2, #1
   18910:	str	r3, [sp]
   18914:	add	r3, sp, #56	; 0x38
   18918:	str	r2, [sp, #36]	; 0x24
   1891c:	str	r2, [sp, #4]
   18920:	str	r3, [sp, #8]
   18924:	mov	r0, r6
   18928:	str	r8, [sp, #16]
   1892c:	str	r7, [sp, #12]
   18930:	mov	r1, sl
   18934:	ldr	r3, [sp, #136]	; 0x88
   18938:	mov	r2, fp
   1893c:	bl	155dc <__assert_fail@plt+0x40fc>
   18940:	cmp	sl, r0
   18944:	bhi	189b0 <__assert_fail@plt+0x74d0>
   18948:	ldr	r3, [pc, #176]	; 18a00 <__assert_fail@plt+0x7520>
   1894c:	add	r7, r0, #1
   18950:	cmp	r6, r3
   18954:	str	r7, [r5, r4, lsl #3]
   18958:	beq	18964 <__assert_fail@plt+0x7484>
   1895c:	mov	r0, r6
   18960:	bl	15238 <__assert_fail@plt+0x3d58>
   18964:	mov	r0, r7
   18968:	bl	1a244 <__assert_fail@plt+0x8d64>
   1896c:	ldr	r3, [sp, #32]
   18970:	ldr	lr, [sp, #92]	; 0x5c
   18974:	ldr	ip, [sp, #88]	; 0x58
   18978:	ldr	r4, [sp, #36]	; 0x24
   1897c:	mov	r2, fp
   18980:	mov	r1, r7
   18984:	str	r0, [r3, #4]
   18988:	add	r3, sp, #56	; 0x38
   1898c:	str	r3, [sp, #8]
   18990:	ldr	r3, [sp, #48]	; 0x30
   18994:	str	r4, [sp, #4]
   18998:	str	r3, [sp]
   1899c:	str	lr, [sp, #16]
   189a0:	str	ip, [sp, #12]
   189a4:	ldr	r3, [sp, #136]	; 0x88
   189a8:	mov	r6, r0
   189ac:	bl	155dc <__assert_fail@plt+0x40fc>
   189b0:	ldr	r3, [sp, #28]
   189b4:	mov	r0, r6
   189b8:	str	r3, [r9]
   189bc:	add	sp, sp, #100	; 0x64
   189c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189c4:	mov	r3, #8
   189c8:	sub	r2, r4, r2
   189cc:	str	r3, [sp]
   189d0:	add	r1, sp, #44	; 0x2c
   189d4:	add	r2, r2, #1
   189d8:	mvn	r3, #-2147483648	; 0x80000000
   189dc:	bl	1a460 <__assert_fail@plt+0x8f80>
   189e0:	mov	r5, r0
   189e4:	ldm	r7, {r0, r1}
   189e8:	str	r5, [r6]
   189ec:	stm	r5, {r0, r1}
   189f0:	b	188c4 <__assert_fail@plt+0x73e4>
   189f4:	bl	114bc <abort@plt>
   189f8:	andeq	lr, r2, r0, lsr r5
   189fc:	andeq	lr, r2, ip, ror #2
   18a00:	andeq	lr, r2, r0, ror #10
   18a04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a08:	mov	r5, r0
   18a0c:	ldr	lr, [pc, #452]	; 18bd8 <__assert_fail@plt+0x76f8>
   18a10:	mov	r6, r1
   18a14:	mov	sl, r2
   18a18:	ldm	lr!, {r0, r1, r2, r3}
   18a1c:	sub	sp, sp, #92	; 0x5c
   18a20:	add	ip, sp, #40	; 0x28
   18a24:	cmp	r6, #0
   18a28:	cmpne	r5, #0
   18a2c:	stmia	ip!, {r0, r1, r2, r3}
   18a30:	mov	r9, #10
   18a34:	ldm	lr!, {r0, r1, r2, r3}
   18a38:	moveq	fp, #1
   18a3c:	movne	fp, #0
   18a40:	str	r9, [sp, #40]	; 0x28
   18a44:	stmia	ip!, {r0, r1, r2, r3}
   18a48:	ldm	lr, {r0, r1, r2, r3}
   18a4c:	stm	ip, {r0, r1, r2, r3}
   18a50:	beq	18bd4 <__assert_fail@plt+0x76f4>
   18a54:	str	r5, [sp, #80]	; 0x50
   18a58:	str	r6, [sp, #84]	; 0x54
   18a5c:	bl	1139c <__errno_location@plt>
   18a60:	ldr	r7, [pc, #372]	; 18bdc <__assert_fail@plt+0x76fc>
   18a64:	ldr	r2, [r7, #4]
   18a68:	ldr	r4, [r7]
   18a6c:	cmp	r2, #0
   18a70:	ldr	r3, [r0]
   18a74:	mov	r8, r0
   18a78:	str	r3, [sp, #24]
   18a7c:	movgt	r3, r9
   18a80:	bgt	18ae8 <__assert_fail@plt+0x7608>
   18a84:	add	r5, r7, #8
   18a88:	cmp	r4, r5
   18a8c:	str	r2, [sp, #36]	; 0x24
   18a90:	beq	18ba4 <__assert_fail@plt+0x76c4>
   18a94:	mov	r3, #8
   18a98:	mov	r0, r4
   18a9c:	str	r3, [sp]
   18aa0:	rsb	r2, r2, #1
   18aa4:	mvn	r3, #-2147483648	; 0x80000000
   18aa8:	add	r1, sp, #36	; 0x24
   18aac:	bl	1a460 <__assert_fail@plt+0x8f80>
   18ab0:	mov	r4, r0
   18ab4:	str	r0, [r7]
   18ab8:	ldr	r0, [r7, #4]
   18abc:	ldr	r2, [sp, #36]	; 0x24
   18ac0:	mov	r1, #0
   18ac4:	sub	r2, r2, r0
   18ac8:	add	r0, r4, r0, lsl #3
   18acc:	lsl	r2, r2, #3
   18ad0:	bl	113c0 <memset@plt>
   18ad4:	ldr	r3, [sp, #40]	; 0x28
   18ad8:	ldr	r5, [sp, #80]	; 0x50
   18adc:	ldr	r6, [sp, #84]	; 0x54
   18ae0:	ldr	r2, [sp, #36]	; 0x24
   18ae4:	str	r2, [r7, #4]
   18ae8:	ldr	r2, [sp, #44]	; 0x2c
   18aec:	ldr	r9, [r4]
   18af0:	ldr	r7, [r4, #4]
   18af4:	orr	r2, r2, #1
   18af8:	add	fp, sp, #48	; 0x30
   18afc:	str	r2, [sp, #28]
   18b00:	str	r2, [sp, #4]
   18b04:	str	r3, [sp]
   18b08:	str	r6, [sp, #16]
   18b0c:	str	r5, [sp, #12]
   18b10:	mov	r1, r9
   18b14:	mov	r0, r7
   18b18:	str	fp, [sp, #8]
   18b1c:	mvn	r3, #0
   18b20:	mov	r2, sl
   18b24:	bl	155dc <__assert_fail@plt+0x40fc>
   18b28:	cmp	r9, r0
   18b2c:	bhi	18b90 <__assert_fail@plt+0x76b0>
   18b30:	ldr	r3, [pc, #168]	; 18be0 <__assert_fail@plt+0x7700>
   18b34:	add	r5, r0, #1
   18b38:	cmp	r7, r3
   18b3c:	str	r5, [r4]
   18b40:	beq	18b4c <__assert_fail@plt+0x766c>
   18b44:	mov	r0, r7
   18b48:	bl	15238 <__assert_fail@plt+0x3d58>
   18b4c:	mov	r0, r5
   18b50:	bl	1a244 <__assert_fail@plt+0x8d64>
   18b54:	ldr	lr, [sp, #84]	; 0x54
   18b58:	ldr	r3, [sp, #40]	; 0x28
   18b5c:	ldr	ip, [sp, #80]	; 0x50
   18b60:	mov	r2, sl
   18b64:	mov	r1, r5
   18b68:	str	r0, [r4, #4]
   18b6c:	ldr	r4, [sp, #28]
   18b70:	str	r3, [sp]
   18b74:	str	fp, [sp, #8]
   18b78:	str	r4, [sp, #4]
   18b7c:	str	lr, [sp, #16]
   18b80:	str	ip, [sp, #12]
   18b84:	mvn	r3, #0
   18b88:	mov	r7, r0
   18b8c:	bl	155dc <__assert_fail@plt+0x40fc>
   18b90:	ldr	r3, [sp, #24]
   18b94:	mov	r0, r7
   18b98:	str	r3, [r8]
   18b9c:	add	sp, sp, #92	; 0x5c
   18ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ba4:	mov	r3, #8
   18ba8:	str	r3, [sp]
   18bac:	add	r1, sp, #36	; 0x24
   18bb0:	rsb	r2, r2, #1
   18bb4:	mov	r0, fp
   18bb8:	mvn	r3, #-2147483648	; 0x80000000
   18bbc:	bl	1a460 <__assert_fail@plt+0x8f80>
   18bc0:	mov	r4, r0
   18bc4:	ldm	r5, {r0, r1}
   18bc8:	str	r4, [r7]
   18bcc:	stm	r4, {r0, r1}
   18bd0:	b	18ab8 <__assert_fail@plt+0x75d8>
   18bd4:	bl	114bc <abort@plt>
   18bd8:	andeq	lr, r2, r0, lsr r5
   18bdc:	andeq	lr, r2, ip, ror #2
   18be0:	andeq	lr, r2, r0, ror #10
   18be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18be8:	mov	r5, r0
   18bec:	ldr	lr, [pc, #464]	; 18dc4 <__assert_fail@plt+0x78e4>
   18bf0:	mov	r6, r1
   18bf4:	mov	sl, r2
   18bf8:	mov	fp, r3
   18bfc:	ldm	lr!, {r0, r1, r2, r3}
   18c00:	sub	sp, sp, #92	; 0x5c
   18c04:	add	ip, sp, #40	; 0x28
   18c08:	cmp	r6, #0
   18c0c:	cmpne	r5, #0
   18c10:	stmia	ip!, {r0, r1, r2, r3}
   18c14:	moveq	r4, #1
   18c18:	ldm	lr!, {r0, r1, r2, r3}
   18c1c:	movne	r4, #0
   18c20:	mov	r9, #10
   18c24:	str	r4, [sp, #28]
   18c28:	stmia	ip!, {r0, r1, r2, r3}
   18c2c:	ldm	lr, {r0, r1, r2, r3}
   18c30:	str	r9, [sp, #40]	; 0x28
   18c34:	stm	ip, {r0, r1, r2, r3}
   18c38:	beq	18dc0 <__assert_fail@plt+0x78e0>
   18c3c:	str	r5, [sp, #80]	; 0x50
   18c40:	str	r6, [sp, #84]	; 0x54
   18c44:	bl	1139c <__errno_location@plt>
   18c48:	ldr	r7, [pc, #376]	; 18dc8 <__assert_fail@plt+0x78e8>
   18c4c:	ldr	r2, [r7, #4]
   18c50:	ldr	r4, [r7]
   18c54:	cmp	r2, #0
   18c58:	ldr	r3, [r0]
   18c5c:	mov	r8, r0
   18c60:	str	r3, [sp, #24]
   18c64:	movgt	r3, r9
   18c68:	bgt	18cd0 <__assert_fail@plt+0x77f0>
   18c6c:	add	r5, r7, #8
   18c70:	cmp	r4, r5
   18c74:	str	r2, [sp, #36]	; 0x24
   18c78:	beq	18d90 <__assert_fail@plt+0x78b0>
   18c7c:	mov	r3, #8
   18c80:	mov	r0, r4
   18c84:	str	r3, [sp]
   18c88:	rsb	r2, r2, #1
   18c8c:	mvn	r3, #-2147483648	; 0x80000000
   18c90:	add	r1, sp, #36	; 0x24
   18c94:	bl	1a460 <__assert_fail@plt+0x8f80>
   18c98:	mov	r4, r0
   18c9c:	str	r0, [r7]
   18ca0:	ldr	r0, [r7, #4]
   18ca4:	ldr	r2, [sp, #36]	; 0x24
   18ca8:	mov	r1, #0
   18cac:	sub	r2, r2, r0
   18cb0:	add	r0, r4, r0, lsl #3
   18cb4:	lsl	r2, r2, #3
   18cb8:	bl	113c0 <memset@plt>
   18cbc:	ldr	r3, [sp, #40]	; 0x28
   18cc0:	ldr	r5, [sp, #80]	; 0x50
   18cc4:	ldr	r6, [sp, #84]	; 0x54
   18cc8:	ldr	r2, [sp, #36]	; 0x24
   18ccc:	str	r2, [r7, #4]
   18cd0:	ldr	r2, [sp, #44]	; 0x2c
   18cd4:	ldr	r9, [r4]
   18cd8:	ldr	r7, [r4, #4]
   18cdc:	orr	r2, r2, #1
   18ce0:	str	r3, [sp]
   18ce4:	add	r3, sp, #48	; 0x30
   18ce8:	str	r2, [sp, #28]
   18cec:	str	r2, [sp, #4]
   18cf0:	str	r3, [sp, #8]
   18cf4:	str	r6, [sp, #16]
   18cf8:	str	r5, [sp, #12]
   18cfc:	mov	r1, r9
   18d00:	mov	r0, r7
   18d04:	mov	r3, fp
   18d08:	mov	r2, sl
   18d0c:	bl	155dc <__assert_fail@plt+0x40fc>
   18d10:	cmp	r9, r0
   18d14:	bhi	18d7c <__assert_fail@plt+0x789c>
   18d18:	ldr	r3, [pc, #172]	; 18dcc <__assert_fail@plt+0x78ec>
   18d1c:	add	r5, r0, #1
   18d20:	cmp	r7, r3
   18d24:	str	r5, [r4]
   18d28:	beq	18d34 <__assert_fail@plt+0x7854>
   18d2c:	mov	r0, r7
   18d30:	bl	15238 <__assert_fail@plt+0x3d58>
   18d34:	mov	r0, r5
   18d38:	bl	1a244 <__assert_fail@plt+0x8d64>
   18d3c:	add	lr, sp, #48	; 0x30
   18d40:	ldr	ip, [sp, #84]	; 0x54
   18d44:	mov	r1, r5
   18d48:	ldr	r5, [sp, #28]
   18d4c:	mov	r3, fp
   18d50:	mov	r2, sl
   18d54:	str	r0, [r4, #4]
   18d58:	ldr	r4, [sp, #80]	; 0x50
   18d5c:	str	lr, [sp, #8]
   18d60:	ldr	lr, [sp, #40]	; 0x28
   18d64:	str	r5, [sp, #4]
   18d68:	str	ip, [sp, #16]
   18d6c:	str	r4, [sp, #12]
   18d70:	str	lr, [sp]
   18d74:	mov	r7, r0
   18d78:	bl	155dc <__assert_fail@plt+0x40fc>
   18d7c:	ldr	r3, [sp, #24]
   18d80:	mov	r0, r7
   18d84:	str	r3, [r8]
   18d88:	add	sp, sp, #92	; 0x5c
   18d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d90:	mov	r3, #8
   18d94:	str	r3, [sp]
   18d98:	add	r1, sp, #36	; 0x24
   18d9c:	rsb	r2, r2, #1
   18da0:	ldr	r0, [sp, #28]
   18da4:	mvn	r3, #-2147483648	; 0x80000000
   18da8:	bl	1a460 <__assert_fail@plt+0x8f80>
   18dac:	mov	r4, r0
   18db0:	ldm	r5, {r0, r1}
   18db4:	str	r4, [r7]
   18db8:	stm	r4, {r0, r1}
   18dbc:	b	18ca0 <__assert_fail@plt+0x77c0>
   18dc0:	bl	114bc <abort@plt>
   18dc4:	andeq	lr, r2, r0, lsr r5
   18dc8:	andeq	lr, r2, ip, ror #2
   18dcc:	andeq	lr, r2, r0, ror #10
   18dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dd4:	sub	sp, sp, #52	; 0x34
   18dd8:	mov	r5, r0
   18ddc:	mov	sl, r1
   18de0:	mov	fp, r2
   18de4:	bl	1139c <__errno_location@plt>
   18de8:	ldr	r4, [pc, #404]	; 18f84 <__assert_fail@plt+0x7aa4>
   18dec:	cmn	r5, #-2147483647	; 0x80000001
   18df0:	ldr	r6, [r4]
   18df4:	mov	r8, r0
   18df8:	movne	r0, #0
   18dfc:	moveq	r0, #1
   18e00:	ldr	r3, [r8]
   18e04:	orrs	r0, r0, r5, lsr #31
   18e08:	str	r3, [sp, #28]
   18e0c:	bne	18f80 <__assert_fail@plt+0x7aa0>
   18e10:	ldr	r2, [r4, #4]
   18e14:	cmp	r5, r2
   18e18:	blt	18e78 <__assert_fail@plt+0x7998>
   18e1c:	add	r7, r4, #8
   18e20:	cmp	r6, r7
   18e24:	str	r2, [sp, #44]	; 0x2c
   18e28:	beq	18f50 <__assert_fail@plt+0x7a70>
   18e2c:	mov	r3, #8
   18e30:	sub	r2, r5, r2
   18e34:	mov	r0, r6
   18e38:	str	r3, [sp]
   18e3c:	add	r2, r2, #1
   18e40:	mvn	r3, #-2147483648	; 0x80000000
   18e44:	add	r1, sp, #44	; 0x2c
   18e48:	bl	1a460 <__assert_fail@plt+0x8f80>
   18e4c:	mov	r6, r0
   18e50:	str	r0, [r4]
   18e54:	ldr	r0, [r4, #4]
   18e58:	ldr	r2, [sp, #44]	; 0x2c
   18e5c:	mov	r1, #0
   18e60:	sub	r2, r2, r0
   18e64:	add	r0, r6, r0, lsl #3
   18e68:	lsl	r2, r2, #3
   18e6c:	bl	113c0 <memset@plt>
   18e70:	ldr	r3, [sp, #44]	; 0x2c
   18e74:	str	r3, [r4, #4]
   18e78:	ldr	r2, [r4, #56]	; 0x38
   18e7c:	add	r3, r6, r5, lsl #3
   18e80:	ldr	r1, [r4, #20]
   18e84:	ldr	r7, [r3, #4]
   18e88:	ldr	r9, [r6, r5, lsl #3]
   18e8c:	ldr	ip, [r4, #60]	; 0x3c
   18e90:	str	r3, [sp, #32]
   18e94:	ldr	r3, [r4, #16]
   18e98:	str	r2, [sp, #12]
   18e9c:	ldr	r2, [pc, #228]	; 18f88 <__assert_fail@plt+0x7aa8>
   18ea0:	orr	r1, r1, #1
   18ea4:	str	r1, [sp, #36]	; 0x24
   18ea8:	str	r1, [sp, #4]
   18eac:	str	r2, [sp, #8]
   18eb0:	str	r3, [sp]
   18eb4:	mov	r0, r7
   18eb8:	mov	r1, r9
   18ebc:	str	ip, [sp, #16]
   18ec0:	mov	r3, fp
   18ec4:	mov	r2, sl
   18ec8:	bl	155dc <__assert_fail@plt+0x40fc>
   18ecc:	cmp	r9, r0
   18ed0:	bhi	18f3c <__assert_fail@plt+0x7a5c>
   18ed4:	ldr	r3, [pc, #176]	; 18f8c <__assert_fail@plt+0x7aac>
   18ed8:	add	r9, r0, #1
   18edc:	cmp	r7, r3
   18ee0:	str	r9, [r6, r5, lsl #3]
   18ee4:	beq	18ef0 <__assert_fail@plt+0x7a10>
   18ee8:	mov	r0, r7
   18eec:	bl	15238 <__assert_fail@plt+0x3d58>
   18ef0:	mov	r0, r9
   18ef4:	bl	1a244 <__assert_fail@plt+0x8d64>
   18ef8:	ldr	ip, [sp, #32]
   18efc:	ldr	lr, [r4, #60]	; 0x3c
   18f00:	ldr	r5, [r4, #56]	; 0x38
   18f04:	mov	r3, fp
   18f08:	mov	r2, sl
   18f0c:	mov	r1, r9
   18f10:	str	r0, [ip, #4]
   18f14:	ldr	ip, [r4, #16]
   18f18:	ldr	r4, [pc, #104]	; 18f88 <__assert_fail@plt+0x7aa8>
   18f1c:	str	lr, [sp, #16]
   18f20:	str	r4, [sp, #8]
   18f24:	ldr	r4, [sp, #36]	; 0x24
   18f28:	str	r5, [sp, #12]
   18f2c:	str	r4, [sp, #4]
   18f30:	str	ip, [sp]
   18f34:	mov	r7, r0
   18f38:	bl	155dc <__assert_fail@plt+0x40fc>
   18f3c:	ldr	r3, [sp, #28]
   18f40:	mov	r0, r7
   18f44:	str	r3, [r8]
   18f48:	add	sp, sp, #52	; 0x34
   18f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f50:	mov	r3, #8
   18f54:	sub	r2, r5, r2
   18f58:	str	r3, [sp]
   18f5c:	add	r1, sp, #44	; 0x2c
   18f60:	add	r2, r2, #1
   18f64:	mvn	r3, #-2147483648	; 0x80000000
   18f68:	bl	1a460 <__assert_fail@plt+0x8f80>
   18f6c:	mov	r6, r0
   18f70:	ldm	r7, {r0, r1}
   18f74:	str	r6, [r4]
   18f78:	stm	r6, {r0, r1}
   18f7c:	b	18e54 <__assert_fail@plt+0x7974>
   18f80:	bl	114bc <abort@plt>
   18f84:	andeq	lr, r2, ip, ror #2
   18f88:	andeq	lr, r2, r4, lsl #3
   18f8c:	andeq	lr, r2, r0, ror #10
   18f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f94:	sub	sp, sp, #44	; 0x2c
   18f98:	mov	r9, r0
   18f9c:	mov	sl, r1
   18fa0:	bl	1139c <__errno_location@plt>
   18fa4:	ldr	r4, [pc, #360]	; 19114 <__assert_fail@plt+0x7c34>
   18fa8:	ldr	r2, [r4, #4]
   18fac:	ldr	r5, [r4]
   18fb0:	cmp	r2, #0
   18fb4:	ldr	r3, [r0]
   18fb8:	mov	r7, r0
   18fbc:	str	r3, [sp, #24]
   18fc0:	bgt	1901c <__assert_fail@plt+0x7b3c>
   18fc4:	add	r6, r4, #8
   18fc8:	cmp	r5, r6
   18fcc:	str	r2, [sp, #36]	; 0x24
   18fd0:	beq	190e4 <__assert_fail@plt+0x7c04>
   18fd4:	mov	r3, #8
   18fd8:	mov	r0, r5
   18fdc:	str	r3, [sp]
   18fe0:	rsb	r2, r2, #1
   18fe4:	mvn	r3, #-2147483648	; 0x80000000
   18fe8:	add	r1, sp, #36	; 0x24
   18fec:	bl	1a460 <__assert_fail@plt+0x8f80>
   18ff0:	mov	r5, r0
   18ff4:	str	r0, [r4]
   18ff8:	ldr	r0, [r4, #4]
   18ffc:	ldr	r2, [sp, #36]	; 0x24
   19000:	mov	r1, #0
   19004:	sub	r2, r2, r0
   19008:	add	r0, r5, r0, lsl #3
   1900c:	lsl	r2, r2, #3
   19010:	bl	113c0 <memset@plt>
   19014:	ldr	r3, [sp, #36]	; 0x24
   19018:	str	r3, [r4, #4]
   1901c:	ldr	r1, [r4, #20]
   19020:	ldr	r8, [r5]
   19024:	ldr	r6, [r5, #4]
   19028:	ldr	r2, [r4, #56]	; 0x38
   1902c:	ldr	r3, [r4, #16]
   19030:	ldr	ip, [r4, #60]	; 0x3c
   19034:	ldr	fp, [pc, #220]	; 19118 <__assert_fail@plt+0x7c38>
   19038:	orr	r1, r1, #1
   1903c:	str	r1, [sp, #28]
   19040:	str	r1, [sp, #4]
   19044:	str	r2, [sp, #12]
   19048:	str	r3, [sp]
   1904c:	mov	r1, r8
   19050:	mov	r0, r6
   19054:	str	ip, [sp, #16]
   19058:	str	fp, [sp, #8]
   1905c:	mov	r3, sl
   19060:	mov	r2, r9
   19064:	bl	155dc <__assert_fail@plt+0x40fc>
   19068:	cmp	r8, r0
   1906c:	bhi	190d0 <__assert_fail@plt+0x7bf0>
   19070:	ldr	r3, [pc, #164]	; 1911c <__assert_fail@plt+0x7c3c>
   19074:	add	r8, r0, #1
   19078:	cmp	r6, r3
   1907c:	str	r8, [r5]
   19080:	beq	1908c <__assert_fail@plt+0x7bac>
   19084:	mov	r0, r6
   19088:	bl	15238 <__assert_fail@plt+0x3d58>
   1908c:	mov	r0, r8
   19090:	bl	1a244 <__assert_fail@plt+0x8d64>
   19094:	ldr	lr, [r4, #60]	; 0x3c
   19098:	ldr	ip, [r4, #16]
   1909c:	mov	r3, sl
   190a0:	mov	r2, r9
   190a4:	mov	r1, r8
   190a8:	str	r0, [r5, #4]
   190ac:	ldr	r5, [r4, #56]	; 0x38
   190b0:	ldr	r4, [sp, #28]
   190b4:	str	fp, [sp, #8]
   190b8:	str	r4, [sp, #4]
   190bc:	str	lr, [sp, #16]
   190c0:	str	r5, [sp, #12]
   190c4:	str	ip, [sp]
   190c8:	mov	r6, r0
   190cc:	bl	155dc <__assert_fail@plt+0x40fc>
   190d0:	ldr	r3, [sp, #24]
   190d4:	mov	r0, r6
   190d8:	str	r3, [r7]
   190dc:	add	sp, sp, #44	; 0x2c
   190e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190e4:	mov	r3, #8
   190e8:	str	r3, [sp]
   190ec:	add	r1, sp, #36	; 0x24
   190f0:	rsb	r2, r2, #1
   190f4:	mvn	r3, #-2147483648	; 0x80000000
   190f8:	mov	r0, #0
   190fc:	bl	1a460 <__assert_fail@plt+0x8f80>
   19100:	mov	r5, r0
   19104:	ldm	r6, {r0, r1}
   19108:	str	r5, [r4]
   1910c:	stm	r5, {r0, r1}
   19110:	b	18ff8 <__assert_fail@plt+0x7b18>
   19114:	andeq	lr, r2, ip, ror #2
   19118:	andeq	lr, r2, r4, lsl #3
   1911c:	andeq	lr, r2, r0, ror #10
   19120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19124:	sub	sp, sp, #44	; 0x2c
   19128:	mov	r5, r0
   1912c:	mov	sl, r1
   19130:	bl	1139c <__errno_location@plt>
   19134:	ldr	r4, [pc, #396]	; 192c8 <__assert_fail@plt+0x7de8>
   19138:	cmn	r5, #-2147483647	; 0x80000001
   1913c:	ldr	r6, [r4]
   19140:	mov	r8, r0
   19144:	movne	r0, #0
   19148:	moveq	r0, #1
   1914c:	ldr	r3, [r8]
   19150:	orrs	r0, r0, r5, lsr #31
   19154:	str	r3, [sp, #24]
   19158:	bne	192c4 <__assert_fail@plt+0x7de4>
   1915c:	ldr	r2, [r4, #4]
   19160:	cmp	r5, r2
   19164:	blt	191c4 <__assert_fail@plt+0x7ce4>
   19168:	add	r7, r4, #8
   1916c:	cmp	r6, r7
   19170:	str	r2, [sp, #36]	; 0x24
   19174:	beq	19294 <__assert_fail@plt+0x7db4>
   19178:	mov	r3, #8
   1917c:	sub	r2, r5, r2
   19180:	mov	r0, r6
   19184:	str	r3, [sp]
   19188:	add	r2, r2, #1
   1918c:	mvn	r3, #-2147483648	; 0x80000000
   19190:	add	r1, sp, #36	; 0x24
   19194:	bl	1a460 <__assert_fail@plt+0x8f80>
   19198:	mov	r6, r0
   1919c:	str	r0, [r4]
   191a0:	ldr	r0, [r4, #4]
   191a4:	ldr	r2, [sp, #36]	; 0x24
   191a8:	mov	r1, #0
   191ac:	sub	r2, r2, r0
   191b0:	add	r0, r6, r0, lsl #3
   191b4:	lsl	r2, r2, #3
   191b8:	bl	113c0 <memset@plt>
   191bc:	ldr	r3, [sp, #36]	; 0x24
   191c0:	str	r3, [r4, #4]
   191c4:	ldr	r2, [r4, #56]	; 0x38
   191c8:	add	fp, r6, r5, lsl #3
   191cc:	ldr	r1, [r4, #20]
   191d0:	ldr	r9, [r6, r5, lsl #3]
   191d4:	ldr	r7, [fp, #4]
   191d8:	ldr	r3, [r4, #16]
   191dc:	ldr	ip, [r4, #60]	; 0x3c
   191e0:	str	r2, [sp, #12]
   191e4:	ldr	r2, [pc, #224]	; 192cc <__assert_fail@plt+0x7dec>
   191e8:	orr	r1, r1, #1
   191ec:	str	r1, [sp, #28]
   191f0:	str	r1, [sp, #4]
   191f4:	str	r2, [sp, #8]
   191f8:	str	r3, [sp]
   191fc:	mov	r0, r7
   19200:	mov	r1, r9
   19204:	str	ip, [sp, #16]
   19208:	mvn	r3, #0
   1920c:	mov	r2, sl
   19210:	bl	155dc <__assert_fail@plt+0x40fc>
   19214:	cmp	r9, r0
   19218:	bhi	19280 <__assert_fail@plt+0x7da0>
   1921c:	ldr	r3, [pc, #172]	; 192d0 <__assert_fail@plt+0x7df0>
   19220:	add	r9, r0, #1
   19224:	cmp	r7, r3
   19228:	str	r9, [r6, r5, lsl #3]
   1922c:	beq	19238 <__assert_fail@plt+0x7d58>
   19230:	mov	r0, r7
   19234:	bl	15238 <__assert_fail@plt+0x3d58>
   19238:	mov	r0, r9
   1923c:	bl	1a244 <__assert_fail@plt+0x8d64>
   19240:	ldr	ip, [r4, #60]	; 0x3c
   19244:	ldr	r3, [r4, #16]
   19248:	ldr	lr, [r4, #56]	; 0x38
   1924c:	ldr	r4, [pc, #120]	; 192cc <__assert_fail@plt+0x7dec>
   19250:	mov	r2, sl
   19254:	mov	r1, r9
   19258:	str	r0, [fp, #4]
   1925c:	str	r4, [sp, #8]
   19260:	ldr	r4, [sp, #28]
   19264:	str	r3, [sp]
   19268:	str	r4, [sp, #4]
   1926c:	str	ip, [sp, #16]
   19270:	str	lr, [sp, #12]
   19274:	mvn	r3, #0
   19278:	mov	r7, r0
   1927c:	bl	155dc <__assert_fail@plt+0x40fc>
   19280:	ldr	r3, [sp, #24]
   19284:	mov	r0, r7
   19288:	str	r3, [r8]
   1928c:	add	sp, sp, #44	; 0x2c
   19290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19294:	mov	r3, #8
   19298:	sub	r2, r5, r2
   1929c:	str	r3, [sp]
   192a0:	add	r1, sp, #36	; 0x24
   192a4:	add	r2, r2, #1
   192a8:	mvn	r3, #-2147483648	; 0x80000000
   192ac:	bl	1a460 <__assert_fail@plt+0x8f80>
   192b0:	mov	r6, r0
   192b4:	ldm	r7, {r0, r1}
   192b8:	str	r6, [r4]
   192bc:	stm	r6, {r0, r1}
   192c0:	b	191a0 <__assert_fail@plt+0x7cc0>
   192c4:	bl	114bc <abort@plt>
   192c8:	andeq	lr, r2, ip, ror #2
   192cc:	andeq	lr, r2, r4, lsl #3
   192d0:	andeq	lr, r2, r0, ror #10
   192d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192d8:	sub	sp, sp, #44	; 0x2c
   192dc:	mov	sl, r0
   192e0:	bl	1139c <__errno_location@plt>
   192e4:	ldr	r4, [pc, #348]	; 19448 <__assert_fail@plt+0x7f68>
   192e8:	ldr	r2, [r4, #4]
   192ec:	ldr	r5, [r4]
   192f0:	cmp	r2, #0
   192f4:	ldr	r3, [r0]
   192f8:	mov	r8, r0
   192fc:	str	r3, [sp, #28]
   19300:	bgt	1935c <__assert_fail@plt+0x7e7c>
   19304:	add	r6, r4, #8
   19308:	cmp	r5, r6
   1930c:	str	r2, [sp, #36]	; 0x24
   19310:	beq	19418 <__assert_fail@plt+0x7f38>
   19314:	mov	r3, #8
   19318:	mov	r0, r5
   1931c:	str	r3, [sp]
   19320:	rsb	r2, r2, #1
   19324:	mvn	r3, #-2147483648	; 0x80000000
   19328:	add	r1, sp, #36	; 0x24
   1932c:	bl	1a460 <__assert_fail@plt+0x8f80>
   19330:	mov	r5, r0
   19334:	str	r0, [r4]
   19338:	ldr	r0, [r4, #4]
   1933c:	ldr	r2, [sp, #36]	; 0x24
   19340:	mov	r1, #0
   19344:	sub	r2, r2, r0
   19348:	add	r0, r5, r0, lsl #3
   1934c:	lsl	r2, r2, #3
   19350:	bl	113c0 <memset@plt>
   19354:	ldr	r3, [sp, #36]	; 0x24
   19358:	str	r3, [r4, #4]
   1935c:	ldr	r7, [r4, #20]
   19360:	ldr	r9, [r5]
   19364:	ldr	r6, [r5, #4]
   19368:	ldr	r2, [r4, #56]	; 0x38
   1936c:	ldr	r3, [r4, #16]
   19370:	ldr	ip, [r4, #60]	; 0x3c
   19374:	ldr	fp, [pc, #208]	; 1944c <__assert_fail@plt+0x7f6c>
   19378:	orr	r7, r7, #1
   1937c:	str	r2, [sp, #12]
   19380:	str	r3, [sp]
   19384:	str	r7, [sp, #4]
   19388:	mov	r1, r9
   1938c:	mov	r0, r6
   19390:	str	ip, [sp, #16]
   19394:	str	fp, [sp, #8]
   19398:	mvn	r3, #0
   1939c:	mov	r2, sl
   193a0:	bl	155dc <__assert_fail@plt+0x40fc>
   193a4:	cmp	r9, r0
   193a8:	bhi	19404 <__assert_fail@plt+0x7f24>
   193ac:	ldr	r3, [pc, #156]	; 19450 <__assert_fail@plt+0x7f70>
   193b0:	add	r9, r0, #1
   193b4:	cmp	r6, r3
   193b8:	str	r9, [r5]
   193bc:	beq	193c8 <__assert_fail@plt+0x7ee8>
   193c0:	mov	r0, r6
   193c4:	bl	15238 <__assert_fail@plt+0x3d58>
   193c8:	mov	r0, r9
   193cc:	bl	1a244 <__assert_fail@plt+0x8d64>
   193d0:	ldr	ip, [r4, #60]	; 0x3c
   193d4:	ldr	r3, [r4, #16]
   193d8:	ldr	lr, [r4, #56]	; 0x38
   193dc:	mov	r2, sl
   193e0:	mov	r1, r9
   193e4:	str	r0, [r5, #4]
   193e8:	str	r3, [sp]
   193ec:	stmib	sp, {r7, fp}
   193f0:	str	ip, [sp, #16]
   193f4:	str	lr, [sp, #12]
   193f8:	mvn	r3, #0
   193fc:	mov	r6, r0
   19400:	bl	155dc <__assert_fail@plt+0x40fc>
   19404:	ldr	r3, [sp, #28]
   19408:	mov	r0, r6
   1940c:	str	r3, [r8]
   19410:	add	sp, sp, #44	; 0x2c
   19414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19418:	mov	r3, #8
   1941c:	str	r3, [sp]
   19420:	add	r1, sp, #36	; 0x24
   19424:	rsb	r2, r2, #1
   19428:	mvn	r3, #-2147483648	; 0x80000000
   1942c:	mov	r0, #0
   19430:	bl	1a460 <__assert_fail@plt+0x8f80>
   19434:	mov	r5, r0
   19438:	ldm	r6, {r0, r1}
   1943c:	str	r5, [r4]
   19440:	stm	r5, {r0, r1}
   19444:	b	19338 <__assert_fail@plt+0x7e58>
   19448:	andeq	lr, r2, ip, ror #2
   1944c:	andeq	lr, r2, r4, lsl #3
   19450:	andeq	lr, r2, r0, ror #10
   19454:	push	{r4, r5, r6, r7, r8, lr}
   19458:	mov	r8, r0
   1945c:	ldr	r5, [pc, #84]	; 194b8 <__assert_fail@plt+0x7fd8>
   19460:	mov	r7, r1
   19464:	mov	r4, r2
   19468:	mov	r2, r4
   1946c:	mov	r1, r7
   19470:	mov	r0, r8
   19474:	bl	11180 <read@plt>
   19478:	subs	r6, r0, #0
   1947c:	bge	194b0 <__assert_fail@plt+0x7fd0>
   19480:	bl	1139c <__errno_location@plt>
   19484:	ldr	r3, [r0]
   19488:	cmp	r3, #4
   1948c:	beq	19468 <__assert_fail@plt+0x7f88>
   19490:	cmp	r4, r5
   19494:	movls	r2, #0
   19498:	movhi	r2, #1
   1949c:	cmp	r3, #22
   194a0:	movne	r2, #0
   194a4:	cmp	r2, #0
   194a8:	mov	r4, r5
   194ac:	bne	19468 <__assert_fail@plt+0x7f88>
   194b0:	mov	r0, r6
   194b4:	pop	{r4, r5, r6, r7, r8, pc}
   194b8:	svcvc	0x00f00000	; IMB
   194bc:	push	{r4, r5, r6, r7, r8, lr}
   194c0:	mov	r8, r0
   194c4:	ldr	r5, [pc, #84]	; 19520 <__assert_fail@plt+0x8040>
   194c8:	mov	r7, r1
   194cc:	mov	r4, r2
   194d0:	mov	r2, r4
   194d4:	mov	r1, r7
   194d8:	mov	r0, r8
   194dc:	bl	113d8 <write@plt>
   194e0:	subs	r6, r0, #0
   194e4:	bge	19518 <__assert_fail@plt+0x8038>
   194e8:	bl	1139c <__errno_location@plt>
   194ec:	ldr	r3, [r0]
   194f0:	cmp	r3, #4
   194f4:	beq	194d0 <__assert_fail@plt+0x7ff0>
   194f8:	cmp	r4, r5
   194fc:	sub	r3, r3, #22
   19500:	clz	r3, r3
   19504:	lsr	r3, r3, #5
   19508:	movls	r3, #0
   1950c:	cmp	r3, #0
   19510:	mov	r4, r5
   19514:	bne	194d0 <__assert_fail@plt+0x7ff0>
   19518:	mov	r0, r6
   1951c:	pop	{r4, r5, r6, r7, r8, pc}
   19520:	svcvc	0x00f00000	; IMB
   19524:	push	{r4, r5, r6, r7, lr}
   19528:	mov	r7, r1
   1952c:	ldrb	r3, [r0]
   19530:	sub	sp, sp, #12
   19534:	sub	r3, r3, #48	; 0x30
   19538:	cmp	r3, #9
   1953c:	bls	19590 <__assert_fail@plt+0x80b0>
   19540:	mov	r6, r0
   19544:	ldr	r5, [pc, #324]	; 19690 <__assert_fail@plt+0x81b0>
   19548:	mov	r4, #0
   1954c:	b	1955c <__assert_fail@plt+0x807c>
   19550:	add	r4, r4, #1
   19554:	cmp	r4, #35	; 0x23
   19558:	beq	195c0 <__assert_fail@plt+0x80e0>
   1955c:	mov	r0, r5
   19560:	mov	r1, r6
   19564:	bl	11168 <strcmp@plt>
   19568:	add	r5, r5, #12
   1956c:	cmp	r0, #0
   19570:	bne	19550 <__assert_fail@plt+0x8070>
   19574:	ldr	r3, [pc, #280]	; 19694 <__assert_fail@plt+0x81b4>
   19578:	add	r4, r4, r4, lsl #1
   1957c:	ldr	r0, [r3, r4, lsl #2]
   19580:	str	r0, [r7]
   19584:	asr	r0, r0, #31
   19588:	add	sp, sp, #12
   1958c:	pop	{r4, r5, r6, r7, pc}
   19590:	mov	r2, #10
   19594:	add	r1, sp, #4
   19598:	bl	11174 <strtol@plt>
   1959c:	ldr	r3, [sp, #4]
   195a0:	ldrb	r3, [r3]
   195a4:	cmp	r0, #64	; 0x40
   195a8:	cmple	r3, #0
   195ac:	beq	19580 <__assert_fail@plt+0x80a0>
   195b0:	mvn	r3, #0
   195b4:	mov	r0, r3
   195b8:	str	r3, [r7]
   195bc:	b	19588 <__assert_fail@plt+0x80a8>
   195c0:	bl	114a4 <__libc_current_sigrtmin@plt>
   195c4:	mov	r5, r0
   195c8:	bl	11360 <__libc_current_sigrtmax@plt>
   195cc:	cmp	r5, #0
   195d0:	mov	r4, r0
   195d4:	ble	195f0 <__assert_fail@plt+0x8110>
   195d8:	mov	r2, #5
   195dc:	ldr	r1, [pc, #180]	; 19698 <__assert_fail@plt+0x81b8>
   195e0:	mov	r0, r6
   195e4:	bl	114b0 <strncmp@plt>
   195e8:	cmp	r0, #0
   195ec:	beq	19658 <__assert_fail@plt+0x8178>
   195f0:	cmp	r4, #0
   195f4:	ble	195b0 <__assert_fail@plt+0x80d0>
   195f8:	mov	r2, #5
   195fc:	ldr	r1, [pc, #152]	; 1969c <__assert_fail@plt+0x81bc>
   19600:	mov	r0, r6
   19604:	bl	114b0 <strncmp@plt>
   19608:	cmp	r0, #0
   1960c:	bne	195b0 <__assert_fail@plt+0x80d0>
   19610:	add	r0, r6, #5
   19614:	mov	r2, #10
   19618:	add	r1, sp, #4
   1961c:	bl	11174 <strtol@plt>
   19620:	ldr	r3, [sp, #4]
   19624:	ldrb	r3, [r3]
   19628:	cmp	r3, #0
   1962c:	bne	195b0 <__assert_fail@plt+0x80d0>
   19630:	sub	r5, r5, r4
   19634:	cmp	r0, r5
   19638:	movlt	r5, #0
   1963c:	movge	r5, #1
   19640:	cmp	r0, #0
   19644:	movgt	r5, #0
   19648:	cmp	r5, #0
   1964c:	beq	195b0 <__assert_fail@plt+0x80d0>
   19650:	add	r0, r4, r0
   19654:	b	19580 <__assert_fail@plt+0x80a0>
   19658:	add	r0, r6, #5
   1965c:	mov	r2, #10
   19660:	add	r1, sp, #4
   19664:	bl	11174 <strtol@plt>
   19668:	ldr	r3, [sp, #4]
   1966c:	ldrb	r3, [r3]
   19670:	cmp	r0, #0
   19674:	cmpge	r3, #0
   19678:	bne	195b0 <__assert_fail@plt+0x80d0>
   1967c:	sub	r4, r4, r5
   19680:	cmp	r0, r4
   19684:	bgt	195b0 <__assert_fail@plt+0x80d0>
   19688:	add	r0, r5, r0
   1968c:	b	19580 <__assert_fail@plt+0x80a0>
   19690:			; <UNDEFINED> instruction: 0x0002e1b0
   19694:	andeq	lr, r2, ip, lsr #3
   19698:	andeq	sp, r1, r0, lsr #15
   1969c:	andeq	sp, r1, r8, lsr #15
   196a0:	mov	r3, #0
   196a4:	push	{r4, r5, r6, lr}
   196a8:	mov	r2, r3
   196ac:	sub	sp, sp, #8
   196b0:	ldr	lr, [pc, #200]	; 19780 <__assert_fail@plt+0x82a0>
   196b4:	mov	r4, r0
   196b8:	mov	r5, r1
   196bc:	b	196cc <__assert_fail@plt+0x81ec>
   196c0:	add	r2, r2, #1
   196c4:	cmp	r2, #35	; 0x23
   196c8:	beq	196fc <__assert_fail@plt+0x821c>
   196cc:	ldr	ip, [lr, r3]
   196d0:	add	r3, r3, #12
   196d4:	cmp	ip, r4
   196d8:	bne	196c0 <__assert_fail@plt+0x81e0>
   196dc:	add	r2, r2, r2, lsl #1
   196e0:	mov	r0, r5
   196e4:	add	r2, lr, r2, lsl #2
   196e8:	add	r1, r2, #4
   196ec:	bl	112ac <strcpy@plt>
   196f0:	mov	r0, #0
   196f4:	add	sp, sp, #8
   196f8:	pop	{r4, r5, r6, pc}
   196fc:	bl	114a4 <__libc_current_sigrtmin@plt>
   19700:	mov	r6, r0
   19704:	bl	11360 <__libc_current_sigrtmax@plt>
   19708:	cmp	r4, r0
   1970c:	movle	r3, #0
   19710:	movgt	r3, #1
   19714:	cmp	r4, r6
   19718:	orrlt	r3, r3, #1
   1971c:	cmp	r3, #0
   19720:	bne	19778 <__assert_fail@plt+0x8298>
   19724:	sub	r3, r0, r6
   19728:	add	r3, r6, r3, asr #1
   1972c:	cmp	r4, r3
   19730:	movgt	r6, r0
   19734:	ldrle	r3, [pc, #72]	; 19784 <__assert_fail@plt+0x82a4>
   19738:	ldrgt	r3, [pc, #72]	; 19788 <__assert_fail@plt+0x82a8>
   1973c:	ldr	r0, [r3]
   19740:	ldrh	r2, [r3, #4]
   19744:	str	r0, [r5]
   19748:	subs	r0, r4, r6
   1974c:	strh	r2, [r5, #4]
   19750:	beq	196f4 <__assert_fail@plt+0x8214>
   19754:	str	r0, [sp]
   19758:	ldr	r3, [pc, #44]	; 1978c <__assert_fail@plt+0x82ac>
   1975c:	add	r0, r5, #5
   19760:	mvn	r2, #0
   19764:	mov	r1, #1
   19768:	bl	113a8 <__sprintf_chk@plt>
   1976c:	mov	r0, #0
   19770:	add	sp, sp, #8
   19774:	pop	{r4, r5, r6, pc}
   19778:	mvn	r0, #0
   1977c:	b	196f4 <__assert_fail@plt+0x8214>
   19780:	andeq	lr, r2, ip, lsr #3
   19784:	andeq	sp, r1, r0, lsr #15
   19788:	andeq	sp, r1, r8, lsr #15
   1978c:			; <UNDEFINED> instruction: 0x0001d7b0
   19790:	cmp	r0, #2
   19794:	push	{r4, r5, r6, r7, r8, lr}
   19798:	mov	r4, r0
   1979c:	bhi	197c4 <__assert_fail@plt+0x82e4>
   197a0:	bl	1bb0c <__assert_fail@plt+0xa62c>
   197a4:	mov	r7, r0
   197a8:	bl	1139c <__errno_location@plt>
   197ac:	mov	r5, r0
   197b0:	mov	r0, r4
   197b4:	ldr	r6, [r5]
   197b8:	mov	r4, r7
   197bc:	bl	114c8 <close@plt>
   197c0:	str	r6, [r5]
   197c4:	mov	r0, r4
   197c8:	pop	{r4, r5, r6, r7, r8, pc}
   197cc:	push	{r4, r5, r6, lr}
   197d0:	sub	sp, sp, #32
   197d4:	cmp	r1, #0
   197d8:	mov	r4, r0
   197dc:	ldr	r5, [sp, #48]	; 0x30
   197e0:	ldr	r6, [sp, #52]	; 0x34
   197e4:	beq	19afc <__assert_fail@plt+0x861c>
   197e8:	stm	sp, {r2, r3}
   197ec:	mov	r3, r1
   197f0:	ldr	r2, [pc, #808]	; 19b20 <__assert_fail@plt+0x8640>
   197f4:	mov	r1, #1
   197f8:	bl	113f0 <__fprintf_chk@plt>
   197fc:	mov	r2, #5
   19800:	ldr	r1, [pc, #796]	; 19b24 <__assert_fail@plt+0x8644>
   19804:	mov	r0, #0
   19808:	bl	1121c <dcgettext@plt>
   1980c:	ldr	r3, [pc, #788]	; 19b28 <__assert_fail@plt+0x8648>
   19810:	ldr	r2, [pc, #788]	; 19b2c <__assert_fail@plt+0x864c>
   19814:	str	r3, [sp]
   19818:	mov	r1, #1
   1981c:	mov	r3, r0
   19820:	mov	r0, r4
   19824:	bl	113f0 <__fprintf_chk@plt>
   19828:	mov	r1, r4
   1982c:	mov	r0, #10
   19830:	bl	11210 <fputc_unlocked@plt>
   19834:	mov	r2, #5
   19838:	ldr	r1, [pc, #752]	; 19b30 <__assert_fail@plt+0x8650>
   1983c:	mov	r0, #0
   19840:	bl	1121c <dcgettext@plt>
   19844:	mov	r1, #1
   19848:	ldr	r3, [pc, #740]	; 19b34 <__assert_fail@plt+0x8654>
   1984c:	mov	r2, r0
   19850:	mov	r0, r4
   19854:	bl	113f0 <__fprintf_chk@plt>
   19858:	mov	r1, r4
   1985c:	mov	r0, #10
   19860:	bl	11210 <fputc_unlocked@plt>
   19864:	cmp	r6, #9
   19868:	ldrls	pc, [pc, r6, lsl #2]
   1986c:	b	19b14 <__assert_fail@plt+0x8634>
   19870:	strdeq	r9, [r1], -r4
   19874:	strdeq	r9, [r1], -ip
   19878:	andeq	r9, r1, r8, lsr #18
   1987c:	andeq	r9, r1, ip, asr r9
   19880:	muleq	r1, r8, r9
   19884:	ldrdeq	r9, [r1], -r4
   19888:	andeq	r9, r1, r0, lsl sl
   1988c:	andeq	r9, r1, r4, asr sl
   19890:	andeq	r9, r1, r4, lsr #21
   19894:	muleq	r1, r8, r8
   19898:	ldr	r1, [pc, #664]	; 19b38 <__assert_fail@plt+0x8658>
   1989c:	mov	r2, #5
   198a0:	mov	r0, #0
   198a4:	bl	1121c <dcgettext@plt>
   198a8:	ldr	ip, [r5, #32]
   198ac:	ldr	r1, [r5, #28]
   198b0:	ldr	r2, [r5, #24]
   198b4:	ldr	r3, [r5]
   198b8:	ldr	r6, [r5, #20]
   198bc:	str	ip, [sp, #28]
   198c0:	ldr	lr, [r5, #16]
   198c4:	str	r1, [sp, #24]
   198c8:	ldr	ip, [r5, #12]
   198cc:	str	r2, [sp, #20]
   198d0:	ldr	r1, [r5, #8]
   198d4:	ldr	r2, [r5, #4]
   198d8:	str	r6, [sp, #16]
   198dc:	stmib	sp, {r1, ip, lr}
   198e0:	mov	r1, #1
   198e4:	str	r2, [sp]
   198e8:	mov	r2, r0
   198ec:	mov	r0, r4
   198f0:	bl	113f0 <__fprintf_chk@plt>
   198f4:	add	sp, sp, #32
   198f8:	pop	{r4, r5, r6, pc}
   198fc:	mov	r2, #5
   19900:	ldr	r1, [pc, #564]	; 19b3c <__assert_fail@plt+0x865c>
   19904:	mov	r0, #0
   19908:	bl	1121c <dcgettext@plt>
   1990c:	ldr	r3, [r5]
   19910:	mov	r1, #1
   19914:	mov	r2, r0
   19918:	mov	r0, r4
   1991c:	add	sp, sp, #32
   19920:	pop	{r4, r5, r6, lr}
   19924:	b	113f0 <__fprintf_chk@plt>
   19928:	mov	r2, #5
   1992c:	ldr	r1, [pc, #524]	; 19b40 <__assert_fail@plt+0x8660>
   19930:	mov	r0, #0
   19934:	bl	1121c <dcgettext@plt>
   19938:	ldr	r2, [r5, #4]
   1993c:	ldr	r3, [r5]
   19940:	mov	r1, #1
   19944:	str	r2, [sp, #48]	; 0x30
   19948:	mov	r2, r0
   1994c:	mov	r0, r4
   19950:	add	sp, sp, #32
   19954:	pop	{r4, r5, r6, lr}
   19958:	b	113f0 <__fprintf_chk@plt>
   1995c:	mov	r2, #5
   19960:	ldr	r1, [pc, #476]	; 19b44 <__assert_fail@plt+0x8664>
   19964:	mov	r0, #0
   19968:	bl	1121c <dcgettext@plt>
   1996c:	ldr	r1, [r5, #8]
   19970:	ldr	r2, [r5, #4]
   19974:	ldr	r3, [r5]
   19978:	str	r1, [sp, #52]	; 0x34
   1997c:	str	r2, [sp, #48]	; 0x30
   19980:	mov	r1, #1
   19984:	mov	r2, r0
   19988:	mov	r0, r4
   1998c:	add	sp, sp, #32
   19990:	pop	{r4, r5, r6, lr}
   19994:	b	113f0 <__fprintf_chk@plt>
   19998:	mov	r2, #5
   1999c:	ldr	r1, [pc, #420]	; 19b48 <__assert_fail@plt+0x8668>
   199a0:	mov	r0, #0
   199a4:	bl	1121c <dcgettext@plt>
   199a8:	ldr	r1, [r5, #8]
   199ac:	ldr	ip, [r5, #12]
   199b0:	ldr	r2, [r5, #4]
   199b4:	ldr	r3, [r5]
   199b8:	stmib	sp, {r1, ip}
   199bc:	str	r2, [sp]
   199c0:	mov	r1, #1
   199c4:	mov	r2, r0
   199c8:	mov	r0, r4
   199cc:	bl	113f0 <__fprintf_chk@plt>
   199d0:	b	198f4 <__assert_fail@plt+0x8414>
   199d4:	mov	r2, #5
   199d8:	ldr	r1, [pc, #364]	; 19b4c <__assert_fail@plt+0x866c>
   199dc:	mov	r0, #0
   199e0:	bl	1121c <dcgettext@plt>
   199e4:	add	r1, r5, #8
   199e8:	ldr	r2, [r5, #4]
   199ec:	ldm	r1, {r1, ip, lr}
   199f0:	ldr	r3, [r5]
   199f4:	str	r2, [sp]
   199f8:	stmib	sp, {r1, ip, lr}
   199fc:	mov	r1, #1
   19a00:	mov	r2, r0
   19a04:	mov	r0, r4
   19a08:	bl	113f0 <__fprintf_chk@plt>
   19a0c:	b	198f4 <__assert_fail@plt+0x8414>
   19a10:	mov	r2, #5
   19a14:	ldr	r1, [pc, #308]	; 19b50 <__assert_fail@plt+0x8670>
   19a18:	mov	r0, #0
   19a1c:	bl	1121c <dcgettext@plt>
   19a20:	add	r1, r5, #8
   19a24:	ldr	r2, [r5, #4]
   19a28:	ldm	r1, {r1, ip, lr}
   19a2c:	ldr	r6, [r5, #20]
   19a30:	ldr	r3, [r5]
   19a34:	stmib	sp, {r1, ip, lr}
   19a38:	mov	r1, #1
   19a3c:	str	r2, [sp]
   19a40:	str	r6, [sp, #16]
   19a44:	mov	r2, r0
   19a48:	mov	r0, r4
   19a4c:	bl	113f0 <__fprintf_chk@plt>
   19a50:	b	198f4 <__assert_fail@plt+0x8414>
   19a54:	mov	r2, #5
   19a58:	ldr	r1, [pc, #244]	; 19b54 <__assert_fail@plt+0x8674>
   19a5c:	mov	r0, #0
   19a60:	bl	1121c <dcgettext@plt>
   19a64:	ldr	r2, [r5, #24]
   19a68:	ldr	r3, [r5]
   19a6c:	ldr	r6, [r5, #20]
   19a70:	ldr	lr, [r5, #16]
   19a74:	ldr	ip, [r5, #12]
   19a78:	str	r2, [sp, #20]
   19a7c:	ldr	r1, [r5, #8]
   19a80:	ldr	r2, [r5, #4]
   19a84:	str	r6, [sp, #16]
   19a88:	stmib	sp, {r1, ip, lr}
   19a8c:	mov	r1, #1
   19a90:	str	r2, [sp]
   19a94:	mov	r2, r0
   19a98:	mov	r0, r4
   19a9c:	bl	113f0 <__fprintf_chk@plt>
   19aa0:	b	198f4 <__assert_fail@plt+0x8414>
   19aa4:	mov	r2, #5
   19aa8:	ldr	r1, [pc, #168]	; 19b58 <__assert_fail@plt+0x8678>
   19aac:	mov	r0, #0
   19ab0:	bl	1121c <dcgettext@plt>
   19ab4:	ldr	r1, [r5, #28]
   19ab8:	ldr	r2, [r5, #24]
   19abc:	ldr	r3, [r5]
   19ac0:	ldr	r6, [r5, #20]
   19ac4:	ldr	lr, [r5, #16]
   19ac8:	str	r1, [sp, #24]
   19acc:	ldr	ip, [r5, #12]
   19ad0:	str	r2, [sp, #20]
   19ad4:	ldr	r1, [r5, #8]
   19ad8:	ldr	r2, [r5, #4]
   19adc:	str	r6, [sp, #16]
   19ae0:	stmib	sp, {r1, ip, lr}
   19ae4:	mov	r1, #1
   19ae8:	str	r2, [sp]
   19aec:	mov	r2, r0
   19af0:	mov	r0, r4
   19af4:	bl	113f0 <__fprintf_chk@plt>
   19af8:	b	198f4 <__assert_fail@plt+0x8414>
   19afc:	str	r3, [sp]
   19b00:	mov	r1, #1
   19b04:	mov	r3, r2
   19b08:	ldr	r2, [pc, #76]	; 19b5c <__assert_fail@plt+0x867c>
   19b0c:	bl	113f0 <__fprintf_chk@plt>
   19b10:	b	197fc <__assert_fail@plt+0x831c>
   19b14:	mov	r2, #5
   19b18:	ldr	r1, [pc, #64]	; 19b60 <__assert_fail@plt+0x8680>
   19b1c:	b	198a0 <__assert_fail@plt+0x83c0>
   19b20:			; <UNDEFINED> instruction: 0x0001d7b4
   19b24:	andeq	sp, r1, r8, asr #15
   19b28:	andeq	r0, r0, r6, ror #15
   19b2c:	andeq	sp, r1, r0, lsr #21
   19b30:	andeq	sp, r1, ip, asr #15
   19b34:	andeq	sp, r1, r8, ror r8
   19b38:	andeq	sp, r1, r8, lsr #19
   19b3c:	muleq	r1, ip, r8
   19b40:	andeq	sp, r1, ip, lsr #17
   19b44:	andeq	sp, r1, r4, asr #17
   19b48:	andeq	sp, r1, r0, ror #17
   19b4c:	andeq	sp, r1, r0, lsl #18
   19b50:	andeq	sp, r1, r4, lsr #18
   19b54:	andeq	sp, r1, ip, asr #18
   19b58:	andeq	sp, r1, r8, ror r9
   19b5c:	andeq	sp, r1, r0, asr #15
   19b60:	ldrdeq	sp, [r1], -ip
   19b64:	push	{r4, r5, lr}
   19b68:	sub	sp, sp, #12
   19b6c:	ldr	r5, [sp, #24]
   19b70:	ldr	ip, [r5]
   19b74:	cmp	ip, #0
   19b78:	beq	19b94 <__assert_fail@plt+0x86b4>
   19b7c:	mov	lr, r5
   19b80:	mov	ip, #0
   19b84:	ldr	r4, [lr, #4]!
   19b88:	add	ip, ip, #1
   19b8c:	cmp	r4, #0
   19b90:	bne	19b84 <__assert_fail@plt+0x86a4>
   19b94:	stm	sp, {r5, ip}
   19b98:	bl	197cc <__assert_fail@plt+0x82ec>
   19b9c:	add	sp, sp, #12
   19ba0:	pop	{r4, r5, pc}
   19ba4:	push	{r4, r5, lr}
   19ba8:	sub	sp, sp, #76	; 0x4c
   19bac:	mov	r5, r0
   19bb0:	ldr	ip, [sp, #88]	; 0x58
   19bb4:	ldr	r0, [ip]
   19bb8:	cmp	r0, #0
   19bbc:	str	r0, [sp, #32]
   19bc0:	beq	19f94 <__assert_fail@plt+0x8ab4>
   19bc4:	ldr	r0, [ip, #4]
   19bc8:	cmp	r0, #0
   19bcc:	str	r0, [sp, #36]	; 0x24
   19bd0:	beq	19f9c <__assert_fail@plt+0x8abc>
   19bd4:	ldr	r0, [ip, #8]
   19bd8:	cmp	r0, #0
   19bdc:	str	r0, [sp, #40]	; 0x28
   19be0:	beq	19fa4 <__assert_fail@plt+0x8ac4>
   19be4:	ldr	r0, [ip, #12]
   19be8:	cmp	r0, #0
   19bec:	str	r0, [sp, #44]	; 0x2c
   19bf0:	beq	19fac <__assert_fail@plt+0x8acc>
   19bf4:	ldr	r0, [ip, #16]
   19bf8:	cmp	r0, #0
   19bfc:	str	r0, [sp, #48]	; 0x30
   19c00:	beq	19fb4 <__assert_fail@plt+0x8ad4>
   19c04:	ldr	r0, [ip, #20]
   19c08:	cmp	r0, #0
   19c0c:	str	r0, [sp, #52]	; 0x34
   19c10:	beq	19fbc <__assert_fail@plt+0x8adc>
   19c14:	ldr	r0, [ip, #24]
   19c18:	cmp	r0, #0
   19c1c:	str	r0, [sp, #56]	; 0x38
   19c20:	beq	19fc4 <__assert_fail@plt+0x8ae4>
   19c24:	ldr	r0, [ip, #28]
   19c28:	cmp	r0, #0
   19c2c:	str	r0, [sp, #60]	; 0x3c
   19c30:	beq	19fcc <__assert_fail@plt+0x8aec>
   19c34:	ldr	r0, [ip, #32]
   19c38:	cmp	r0, #0
   19c3c:	str	r0, [sp, #64]	; 0x40
   19c40:	beq	19fd4 <__assert_fail@plt+0x8af4>
   19c44:	ldr	r0, [ip, #36]	; 0x24
   19c48:	cmp	r0, #0
   19c4c:	movne	r4, #10
   19c50:	moveq	r4, #9
   19c54:	cmp	r1, #0
   19c58:	beq	19f6c <__assert_fail@plt+0x8a8c>
   19c5c:	stm	sp, {r2, r3}
   19c60:	mov	r0, r5
   19c64:	mov	r3, r1
   19c68:	ldr	r2, [pc, #876]	; 19fdc <__assert_fail@plt+0x8afc>
   19c6c:	mov	r1, #1
   19c70:	bl	113f0 <__fprintf_chk@plt>
   19c74:	mov	r2, #5
   19c78:	ldr	r1, [pc, #864]	; 19fe0 <__assert_fail@plt+0x8b00>
   19c7c:	mov	r0, #0
   19c80:	bl	1121c <dcgettext@plt>
   19c84:	ldr	r3, [pc, #856]	; 19fe4 <__assert_fail@plt+0x8b04>
   19c88:	ldr	r2, [pc, #856]	; 19fe8 <__assert_fail@plt+0x8b08>
   19c8c:	str	r3, [sp]
   19c90:	mov	r1, #1
   19c94:	mov	r3, r0
   19c98:	mov	r0, r5
   19c9c:	bl	113f0 <__fprintf_chk@plt>
   19ca0:	mov	r1, r5
   19ca4:	mov	r0, #10
   19ca8:	bl	11210 <fputc_unlocked@plt>
   19cac:	mov	r2, #5
   19cb0:	ldr	r1, [pc, #820]	; 19fec <__assert_fail@plt+0x8b0c>
   19cb4:	mov	r0, #0
   19cb8:	bl	1121c <dcgettext@plt>
   19cbc:	mov	r1, #1
   19cc0:	ldr	r3, [pc, #808]	; 19ff0 <__assert_fail@plt+0x8b10>
   19cc4:	mov	r2, r0
   19cc8:	mov	r0, r5
   19ccc:	bl	113f0 <__fprintf_chk@plt>
   19cd0:	mov	r1, r5
   19cd4:	mov	r0, #10
   19cd8:	bl	11210 <fputc_unlocked@plt>
   19cdc:	cmp	r4, #9
   19ce0:	ldrls	pc, [pc, r4, lsl #2]
   19ce4:	b	19f88 <__assert_fail@plt+0x8aa8>
   19ce8:	andeq	r9, r1, ip, ror #26
   19cec:	andeq	r9, r1, r4, ror sp
   19cf0:	andeq	r9, r1, r0, lsr #27
   19cf4:	ldrdeq	r9, [r1], -r4
   19cf8:	andeq	r9, r1, ip, lsl #28
   19cfc:	andeq	r9, r1, r8, asr #28
   19d00:	andeq	r9, r1, r4, lsl #29
   19d04:	andeq	r9, r1, r8, asr #29
   19d08:	andeq	r9, r1, r4, lsl pc
   19d0c:	andeq	r9, r1, r0, lsl sp
   19d10:	ldr	r1, [pc, #732]	; 19ff4 <__assert_fail@plt+0x8b14>
   19d14:	mov	r2, #5
   19d18:	mov	r0, #0
   19d1c:	bl	1121c <dcgettext@plt>
   19d20:	ldr	ip, [sp, #64]	; 0x40
   19d24:	ldr	r1, [sp, #60]	; 0x3c
   19d28:	ldr	r2, [sp, #56]	; 0x38
   19d2c:	ldr	lr, [sp, #48]	; 0x30
   19d30:	str	ip, [sp, #28]
   19d34:	str	r1, [sp, #24]
   19d38:	ldr	ip, [sp, #44]	; 0x2c
   19d3c:	ldr	r1, [sp, #40]	; 0x28
   19d40:	ldr	r4, [sp, #52]	; 0x34
   19d44:	str	r2, [sp, #20]
   19d48:	ldr	r2, [sp, #36]	; 0x24
   19d4c:	stmib	sp, {r1, ip, lr}
   19d50:	mov	r1, #1
   19d54:	str	r2, [sp]
   19d58:	ldr	r3, [sp, #32]
   19d5c:	str	r4, [sp, #16]
   19d60:	mov	r2, r0
   19d64:	mov	r0, r5
   19d68:	bl	113f0 <__fprintf_chk@plt>
   19d6c:	add	sp, sp, #76	; 0x4c
   19d70:	pop	{r4, r5, pc}
   19d74:	mov	r2, #5
   19d78:	ldr	r1, [pc, #632]	; 19ff8 <__assert_fail@plt+0x8b18>
   19d7c:	mov	r0, #0
   19d80:	bl	1121c <dcgettext@plt>
   19d84:	ldr	r3, [sp, #32]
   19d88:	mov	r1, #1
   19d8c:	mov	r2, r0
   19d90:	mov	r0, r5
   19d94:	add	sp, sp, #76	; 0x4c
   19d98:	pop	{r4, r5, lr}
   19d9c:	b	113f0 <__fprintf_chk@plt>
   19da0:	mov	r2, #5
   19da4:	ldr	r1, [pc, #592]	; 19ffc <__assert_fail@plt+0x8b1c>
   19da8:	mov	r0, #0
   19dac:	bl	1121c <dcgettext@plt>
   19db0:	ldr	r2, [sp, #36]	; 0x24
   19db4:	ldr	r3, [sp, #32]
   19db8:	str	r2, [sp, #88]	; 0x58
   19dbc:	mov	r1, #1
   19dc0:	mov	r2, r0
   19dc4:	mov	r0, r5
   19dc8:	add	sp, sp, #76	; 0x4c
   19dcc:	pop	{r4, r5, lr}
   19dd0:	b	113f0 <__fprintf_chk@plt>
   19dd4:	mov	r2, #5
   19dd8:	ldr	r1, [pc, #544]	; 1a000 <__assert_fail@plt+0x8b20>
   19ddc:	mov	r0, #0
   19de0:	bl	1121c <dcgettext@plt>
   19de4:	ldr	r1, [sp, #40]	; 0x28
   19de8:	ldr	r2, [sp, #36]	; 0x24
   19dec:	str	r1, [sp, #4]
   19df0:	str	r2, [sp]
   19df4:	ldr	r3, [sp, #32]
   19df8:	mov	r1, #1
   19dfc:	mov	r2, r0
   19e00:	mov	r0, r5
   19e04:	bl	113f0 <__fprintf_chk@plt>
   19e08:	b	19d6c <__assert_fail@plt+0x888c>
   19e0c:	mov	r2, #5
   19e10:	ldr	r1, [pc, #492]	; 1a004 <__assert_fail@plt+0x8b24>
   19e14:	mov	r0, #0
   19e18:	bl	1121c <dcgettext@plt>
   19e1c:	ldr	r1, [sp, #40]	; 0x28
   19e20:	ldr	ip, [sp, #44]	; 0x2c
   19e24:	ldr	r2, [sp, #36]	; 0x24
   19e28:	ldr	r3, [sp, #32]
   19e2c:	stmib	sp, {r1, ip}
   19e30:	str	r2, [sp]
   19e34:	mov	r1, #1
   19e38:	mov	r2, r0
   19e3c:	mov	r0, r5
   19e40:	bl	113f0 <__fprintf_chk@plt>
   19e44:	b	19d6c <__assert_fail@plt+0x888c>
   19e48:	mov	r2, #5
   19e4c:	ldr	r1, [pc, #436]	; 1a008 <__assert_fail@plt+0x8b28>
   19e50:	mov	r0, #0
   19e54:	bl	1121c <dcgettext@plt>
   19e58:	add	r1, sp, #40	; 0x28
   19e5c:	ldr	r2, [sp, #36]	; 0x24
   19e60:	ldm	r1, {r1, ip, lr}
   19e64:	ldr	r3, [sp, #32]
   19e68:	str	r2, [sp]
   19e6c:	stmib	sp, {r1, ip, lr}
   19e70:	mov	r1, #1
   19e74:	mov	r2, r0
   19e78:	mov	r0, r5
   19e7c:	bl	113f0 <__fprintf_chk@plt>
   19e80:	b	19d6c <__assert_fail@plt+0x888c>
   19e84:	mov	r2, #5
   19e88:	ldr	r1, [pc, #380]	; 1a00c <__assert_fail@plt+0x8b2c>
   19e8c:	mov	r0, #0
   19e90:	bl	1121c <dcgettext@plt>
   19e94:	add	r1, sp, #40	; 0x28
   19e98:	ldr	r2, [sp, #36]	; 0x24
   19e9c:	ldm	r1, {r1, ip, lr}
   19ea0:	ldr	r4, [sp, #52]	; 0x34
   19ea4:	str	r2, [sp]
   19ea8:	stmib	sp, {r1, ip, lr}
   19eac:	mov	r1, #1
   19eb0:	ldr	r3, [sp, #32]
   19eb4:	str	r4, [sp, #16]
   19eb8:	mov	r2, r0
   19ebc:	mov	r0, r5
   19ec0:	bl	113f0 <__fprintf_chk@plt>
   19ec4:	b	19d6c <__assert_fail@plt+0x888c>
   19ec8:	mov	r2, #5
   19ecc:	ldr	r1, [pc, #316]	; 1a010 <__assert_fail@plt+0x8b30>
   19ed0:	mov	r0, #0
   19ed4:	bl	1121c <dcgettext@plt>
   19ed8:	add	r1, sp, #40	; 0x28
   19edc:	ldr	r2, [sp, #56]	; 0x38
   19ee0:	ldm	r1, {r1, ip, lr}
   19ee4:	ldr	r4, [sp, #52]	; 0x34
   19ee8:	str	r2, [sp, #20]
   19eec:	ldr	r2, [sp, #36]	; 0x24
   19ef0:	stmib	sp, {r1, ip, lr}
   19ef4:	mov	r1, #1
   19ef8:	str	r2, [sp]
   19efc:	ldr	r3, [sp, #32]
   19f00:	str	r4, [sp, #16]
   19f04:	mov	r2, r0
   19f08:	mov	r0, r5
   19f0c:	bl	113f0 <__fprintf_chk@plt>
   19f10:	b	19d6c <__assert_fail@plt+0x888c>
   19f14:	mov	r2, #5
   19f18:	ldr	r1, [pc, #244]	; 1a014 <__assert_fail@plt+0x8b34>
   19f1c:	mov	r0, #0
   19f20:	bl	1121c <dcgettext@plt>
   19f24:	ldr	r1, [sp, #60]	; 0x3c
   19f28:	ldr	r2, [sp, #56]	; 0x38
   19f2c:	ldr	lr, [sp, #48]	; 0x30
   19f30:	ldr	ip, [sp, #44]	; 0x2c
   19f34:	str	r1, [sp, #24]
   19f38:	ldr	r1, [sp, #40]	; 0x28
   19f3c:	ldr	r4, [sp, #52]	; 0x34
   19f40:	str	r2, [sp, #20]
   19f44:	ldr	r2, [sp, #36]	; 0x24
   19f48:	stmib	sp, {r1, ip, lr}
   19f4c:	mov	r1, #1
   19f50:	str	r2, [sp]
   19f54:	ldr	r3, [sp, #32]
   19f58:	str	r4, [sp, #16]
   19f5c:	mov	r2, r0
   19f60:	mov	r0, r5
   19f64:	bl	113f0 <__fprintf_chk@plt>
   19f68:	b	19d6c <__assert_fail@plt+0x888c>
   19f6c:	str	r3, [sp]
   19f70:	mov	r1, #1
   19f74:	mov	r3, r2
   19f78:	mov	r0, r5
   19f7c:	ldr	r2, [pc, #148]	; 1a018 <__assert_fail@plt+0x8b38>
   19f80:	bl	113f0 <__fprintf_chk@plt>
   19f84:	b	19c74 <__assert_fail@plt+0x8794>
   19f88:	mov	r2, #5
   19f8c:	ldr	r1, [pc, #136]	; 1a01c <__assert_fail@plt+0x8b3c>
   19f90:	b	19d18 <__assert_fail@plt+0x8838>
   19f94:	mov	r4, r0
   19f98:	b	19c54 <__assert_fail@plt+0x8774>
   19f9c:	mov	r4, #1
   19fa0:	b	19c54 <__assert_fail@plt+0x8774>
   19fa4:	mov	r4, #2
   19fa8:	b	19c54 <__assert_fail@plt+0x8774>
   19fac:	mov	r4, #3
   19fb0:	b	19c54 <__assert_fail@plt+0x8774>
   19fb4:	mov	r4, #4
   19fb8:	b	19c54 <__assert_fail@plt+0x8774>
   19fbc:	mov	r4, #5
   19fc0:	b	19c54 <__assert_fail@plt+0x8774>
   19fc4:	mov	r4, #6
   19fc8:	b	19c54 <__assert_fail@plt+0x8774>
   19fcc:	mov	r4, #7
   19fd0:	b	19c54 <__assert_fail@plt+0x8774>
   19fd4:	mov	r4, #8
   19fd8:	b	19c54 <__assert_fail@plt+0x8774>
   19fdc:			; <UNDEFINED> instruction: 0x0001d7b4
   19fe0:	andeq	sp, r1, r8, asr #15
   19fe4:	andeq	r0, r0, r6, ror #15
   19fe8:	andeq	sp, r1, r0, lsr #21
   19fec:	andeq	sp, r1, ip, asr #15
   19ff0:	andeq	sp, r1, r8, ror r8
   19ff4:	andeq	sp, r1, r8, lsr #19
   19ff8:	muleq	r1, ip, r8
   19ffc:	andeq	sp, r1, ip, lsr #17
   1a000:	andeq	sp, r1, r4, asr #17
   1a004:	andeq	sp, r1, r0, ror #17
   1a008:	andeq	sp, r1, r0, lsl #18
   1a00c:	andeq	sp, r1, r4, lsr #18
   1a010:	andeq	sp, r1, ip, asr #18
   1a014:	andeq	sp, r1, r8, ror r9
   1a018:	andeq	sp, r1, r0, asr #15
   1a01c:	ldrdeq	sp, [r1], -ip
   1a020:	push	{r3}		; (str r3, [sp, #-4]!)
   1a024:	push	{lr}		; (str lr, [sp, #-4]!)
   1a028:	sub	sp, sp, #56	; 0x38
   1a02c:	add	r3, sp, #64	; 0x40
   1a030:	ldr	ip, [sp, #64]	; 0x40
   1a034:	str	r3, [sp, #12]
   1a038:	cmp	ip, #0
   1a03c:	str	ip, [sp, #16]
   1a040:	beq	1a0d8 <__assert_fail@plt+0x8bf8>
   1a044:	ldr	ip, [sp, #68]	; 0x44
   1a048:	cmp	ip, #0
   1a04c:	str	ip, [sp, #20]
   1a050:	beq	1a0f8 <__assert_fail@plt+0x8c18>
   1a054:	ldr	ip, [sp, #72]	; 0x48
   1a058:	cmp	ip, #0
   1a05c:	str	ip, [sp, #24]
   1a060:	beq	1a100 <__assert_fail@plt+0x8c20>
   1a064:	ldr	ip, [sp, #76]	; 0x4c
   1a068:	cmp	ip, #0
   1a06c:	str	ip, [sp, #28]
   1a070:	beq	1a108 <__assert_fail@plt+0x8c28>
   1a074:	ldr	ip, [sp, #80]	; 0x50
   1a078:	cmp	ip, #0
   1a07c:	str	ip, [sp, #32]
   1a080:	beq	1a110 <__assert_fail@plt+0x8c30>
   1a084:	ldr	ip, [sp, #84]	; 0x54
   1a088:	cmp	ip, #0
   1a08c:	str	ip, [sp, #36]	; 0x24
   1a090:	beq	1a118 <__assert_fail@plt+0x8c38>
   1a094:	ldr	ip, [sp, #88]	; 0x58
   1a098:	cmp	ip, #0
   1a09c:	str	ip, [sp, #40]	; 0x28
   1a0a0:	beq	1a120 <__assert_fail@plt+0x8c40>
   1a0a4:	ldr	ip, [sp, #92]	; 0x5c
   1a0a8:	cmp	ip, #0
   1a0ac:	str	ip, [sp, #44]	; 0x2c
   1a0b0:	beq	1a128 <__assert_fail@plt+0x8c48>
   1a0b4:	ldr	ip, [sp, #96]	; 0x60
   1a0b8:	cmp	ip, #0
   1a0bc:	str	ip, [sp, #48]	; 0x30
   1a0c0:	beq	1a130 <__assert_fail@plt+0x8c50>
   1a0c4:	ldr	ip, [sp, #100]	; 0x64
   1a0c8:	cmp	ip, #0
   1a0cc:	str	ip, [sp, #52]	; 0x34
   1a0d0:	movne	ip, #10
   1a0d4:	moveq	ip, #9
   1a0d8:	add	r3, sp, #16
   1a0dc:	stm	sp, {r3, ip}
   1a0e0:	ldr	r3, [sp, #60]	; 0x3c
   1a0e4:	bl	197cc <__assert_fail@plt+0x82ec>
   1a0e8:	add	sp, sp, #56	; 0x38
   1a0ec:	pop	{lr}		; (ldr lr, [sp], #4)
   1a0f0:	add	sp, sp, #4
   1a0f4:	bx	lr
   1a0f8:	mov	ip, #1
   1a0fc:	b	1a0d8 <__assert_fail@plt+0x8bf8>
   1a100:	mov	ip, #2
   1a104:	b	1a0d8 <__assert_fail@plt+0x8bf8>
   1a108:	mov	ip, #3
   1a10c:	b	1a0d8 <__assert_fail@plt+0x8bf8>
   1a110:	mov	ip, #4
   1a114:	b	1a0d8 <__assert_fail@plt+0x8bf8>
   1a118:	mov	ip, #5
   1a11c:	b	1a0d8 <__assert_fail@plt+0x8bf8>
   1a120:	mov	ip, #6
   1a124:	b	1a0d8 <__assert_fail@plt+0x8bf8>
   1a128:	mov	ip, #7
   1a12c:	b	1a0d8 <__assert_fail@plt+0x8bf8>
   1a130:	mov	ip, #8
   1a134:	b	1a0d8 <__assert_fail@plt+0x8bf8>
   1a138:	ldr	r3, [pc, #116]	; 1a1b4 <__assert_fail@plt+0x8cd4>
   1a13c:	push	{r4, lr}
   1a140:	mov	r0, #10
   1a144:	ldr	r1, [r3]
   1a148:	bl	11210 <fputc_unlocked@plt>
   1a14c:	mov	r2, #5
   1a150:	ldr	r1, [pc, #96]	; 1a1b8 <__assert_fail@plt+0x8cd8>
   1a154:	mov	r0, #0
   1a158:	bl	1121c <dcgettext@plt>
   1a15c:	ldr	r2, [pc, #88]	; 1a1bc <__assert_fail@plt+0x8cdc>
   1a160:	mov	r1, r0
   1a164:	mov	r0, #1
   1a168:	bl	113cc <__printf_chk@plt>
   1a16c:	mov	r2, #5
   1a170:	ldr	r1, [pc, #72]	; 1a1c0 <__assert_fail@plt+0x8ce0>
   1a174:	mov	r0, #0
   1a178:	bl	1121c <dcgettext@plt>
   1a17c:	ldr	r3, [pc, #64]	; 1a1c4 <__assert_fail@plt+0x8ce4>
   1a180:	ldr	r2, [pc, #64]	; 1a1c8 <__assert_fail@plt+0x8ce8>
   1a184:	mov	r1, r0
   1a188:	mov	r0, #1
   1a18c:	bl	113cc <__printf_chk@plt>
   1a190:	mov	r2, #5
   1a194:	ldr	r1, [pc, #48]	; 1a1cc <__assert_fail@plt+0x8cec>
   1a198:	mov	r0, #0
   1a19c:	bl	1121c <dcgettext@plt>
   1a1a0:	ldr	r2, [pc, #40]	; 1a1d0 <__assert_fail@plt+0x8cf0>
   1a1a4:	pop	{r4, lr}
   1a1a8:	mov	r1, r0
   1a1ac:	mov	r0, #1
   1a1b0:	b	113cc <__printf_chk@plt>
   1a1b4:	andeq	lr, r2, r4, ror #6
   1a1b8:	andeq	sp, r1, r8, lsl sl
   1a1bc:	andeq	sp, r1, ip, lsr #20
   1a1c0:	andeq	sp, r1, r4, asr #20
   1a1c4:	strheq	sp, [r1], -r0
   1a1c8:	ldrdeq	sp, [r1], -r8
   1a1cc:	andeq	sp, r1, r8, asr sl
   1a1d0:	andeq	sp, r1, r0, lsl #21
   1a1d4:	push	{r4, lr}
   1a1d8:	bl	11498 <aligned_alloc@plt>
   1a1dc:	cmp	r0, #0
   1a1e0:	popne	{r4, pc}
   1a1e4:	bl	1a864 <__assert_fail@plt+0x9384>
   1a1e8:	push	{r4, r5, r6, lr}
   1a1ec:	mov	r6, r0
   1a1f0:	mov	r5, r1
   1a1f4:	mov	r4, r2
   1a1f8:	bl	1bac0 <__assert_fail@plt+0xa5e0>
   1a1fc:	cmp	r0, #0
   1a200:	popne	{r4, r5, r6, pc}
   1a204:	cmp	r6, #0
   1a208:	beq	1a218 <__assert_fail@plt+0x8d38>
   1a20c:	cmp	r5, #0
   1a210:	cmpne	r4, #0
   1a214:	popeq	{r4, r5, r6, pc}
   1a218:	bl	1a864 <__assert_fail@plt+0x9384>
   1a21c:	push	{r4, lr}
   1a220:	bl	1b934 <__assert_fail@plt+0xa454>
   1a224:	cmp	r0, #0
   1a228:	popne	{r4, pc}
   1a22c:	bl	1a864 <__assert_fail@plt+0x9384>
   1a230:	push	{r4, lr}
   1a234:	bl	1b934 <__assert_fail@plt+0xa454>
   1a238:	cmp	r0, #0
   1a23c:	popne	{r4, pc}
   1a240:	bl	1a864 <__assert_fail@plt+0x9384>
   1a244:	push	{r4, lr}
   1a248:	bl	1b934 <__assert_fail@plt+0xa454>
   1a24c:	cmp	r0, #0
   1a250:	popne	{r4, pc}
   1a254:	bl	1a864 <__assert_fail@plt+0x9384>
   1a258:	push	{r4, r5, r6, lr}
   1a25c:	mov	r5, r0
   1a260:	mov	r4, r1
   1a264:	bl	1b960 <__assert_fail@plt+0xa480>
   1a268:	cmp	r0, #0
   1a26c:	popne	{r4, r5, r6, pc}
   1a270:	adds	r4, r4, #0
   1a274:	movne	r4, #1
   1a278:	cmp	r5, #0
   1a27c:	orreq	r4, r4, #1
   1a280:	cmp	r4, #0
   1a284:	popeq	{r4, r5, r6, pc}
   1a288:	bl	1a864 <__assert_fail@plt+0x9384>
   1a28c:	push	{r4, lr}
   1a290:	cmp	r1, #0
   1a294:	orreq	r1, r1, #1
   1a298:	bl	1b960 <__assert_fail@plt+0xa480>
   1a29c:	cmp	r0, #0
   1a2a0:	popne	{r4, pc}
   1a2a4:	bl	1a864 <__assert_fail@plt+0x9384>
   1a2a8:	push	{r4, r5, r6, lr}
   1a2ac:	mov	r6, r0
   1a2b0:	mov	r5, r1
   1a2b4:	mov	r4, r2
   1a2b8:	bl	1bac0 <__assert_fail@plt+0xa5e0>
   1a2bc:	cmp	r0, #0
   1a2c0:	popne	{r4, r5, r6, pc}
   1a2c4:	cmp	r6, #0
   1a2c8:	beq	1a2d8 <__assert_fail@plt+0x8df8>
   1a2cc:	cmp	r5, #0
   1a2d0:	cmpne	r4, #0
   1a2d4:	popeq	{r4, r5, r6, pc}
   1a2d8:	bl	1a864 <__assert_fail@plt+0x9384>
   1a2dc:	cmp	r2, #0
   1a2e0:	cmpne	r1, #0
   1a2e4:	moveq	r2, #1
   1a2e8:	moveq	r1, r2
   1a2ec:	push	{r4, lr}
   1a2f0:	bl	1bac0 <__assert_fail@plt+0xa5e0>
   1a2f4:	cmp	r0, #0
   1a2f8:	popne	{r4, pc}
   1a2fc:	bl	1a864 <__assert_fail@plt+0x9384>
   1a300:	push	{r4, lr}
   1a304:	mov	r2, r1
   1a308:	mov	r1, r0
   1a30c:	mov	r0, #0
   1a310:	bl	1bac0 <__assert_fail@plt+0xa5e0>
   1a314:	cmp	r0, #0
   1a318:	popne	{r4, pc}
   1a31c:	bl	1a864 <__assert_fail@plt+0x9384>
   1a320:	cmp	r1, #0
   1a324:	cmpne	r0, #0
   1a328:	moveq	r2, #1
   1a32c:	movne	r2, r1
   1a330:	moveq	r1, r2
   1a334:	movne	r1, r0
   1a338:	push	{r4, lr}
   1a33c:	mov	r0, #0
   1a340:	bl	1bac0 <__assert_fail@plt+0xa5e0>
   1a344:	cmp	r0, #0
   1a348:	popne	{r4, pc}
   1a34c:	bl	1a864 <__assert_fail@plt+0x9384>
   1a350:	cmp	r0, #0
   1a354:	push	{r4, r5, r6, lr}
   1a358:	mov	r5, r1
   1a35c:	ldr	r4, [r1]
   1a360:	beq	1a39c <__assert_fail@plt+0x8ebc>
   1a364:	lsr	r2, r4, #1
   1a368:	add	r3, r2, #1
   1a36c:	mvn	r3, r3
   1a370:	cmp	r4, r3
   1a374:	bhi	1a3b8 <__assert_fail@plt+0x8ed8>
   1a378:	add	r4, r4, #1
   1a37c:	add	r4, r4, r2
   1a380:	mov	r1, r4
   1a384:	mov	r2, #1
   1a388:	bl	1bac0 <__assert_fail@plt+0xa5e0>
   1a38c:	cmp	r0, #0
   1a390:	beq	1a3bc <__assert_fail@plt+0x8edc>
   1a394:	str	r4, [r5]
   1a398:	pop	{r4, r5, r6, pc}
   1a39c:	cmp	r4, #0
   1a3a0:	moveq	r4, #64	; 0x40
   1a3a4:	mov	r1, r4
   1a3a8:	mov	r2, #1
   1a3ac:	bl	1bac0 <__assert_fail@plt+0xa5e0>
   1a3b0:	cmp	r0, #0
   1a3b4:	bne	1a394 <__assert_fail@plt+0x8eb4>
   1a3b8:	bl	1a864 <__assert_fail@plt+0x9384>
   1a3bc:	cmp	r4, #0
   1a3c0:	bne	1a3b8 <__assert_fail@plt+0x8ed8>
   1a3c4:	str	r4, [r5]
   1a3c8:	pop	{r4, r5, r6, pc}
   1a3cc:	cmp	r0, #0
   1a3d0:	push	{r4, r5, r6, lr}
   1a3d4:	mov	r5, r1
   1a3d8:	ldr	r4, [r1]
   1a3dc:	mov	r6, r2
   1a3e0:	beq	1a424 <__assert_fail@plt+0x8f44>
   1a3e4:	lsr	r1, r4, #1
   1a3e8:	add	r3, r1, #1
   1a3ec:	mvn	r3, r3
   1a3f0:	cmp	r4, r3
   1a3f4:	bhi	1a45c <__assert_fail@plt+0x8f7c>
   1a3f8:	add	r4, r4, #1
   1a3fc:	add	r4, r4, r1
   1a400:	mov	r1, r4
   1a404:	bl	1bac0 <__assert_fail@plt+0xa5e0>
   1a408:	cmp	r0, #0
   1a40c:	bne	1a41c <__assert_fail@plt+0x8f3c>
   1a410:	cmp	r4, #0
   1a414:	cmpne	r6, #0
   1a418:	bne	1a45c <__assert_fail@plt+0x8f7c>
   1a41c:	str	r4, [r5]
   1a420:	pop	{r4, r5, r6, pc}
   1a424:	cmp	r4, #0
   1a428:	bne	1a444 <__assert_fail@plt+0x8f64>
   1a42c:	mov	r1, r2
   1a430:	mov	r0, #64	; 0x40
   1a434:	bl	1bde0 <__assert_fail@plt+0xa900>
   1a438:	cmp	r0, #0
   1a43c:	movne	r4, r0
   1a440:	addeq	r4, r0, #1
   1a444:	mov	r2, r6
   1a448:	mov	r1, r4
   1a44c:	mov	r0, #0
   1a450:	bl	1bac0 <__assert_fail@plt+0xa5e0>
   1a454:	cmp	r0, #0
   1a458:	bne	1a41c <__assert_fail@plt+0x8f3c>
   1a45c:	bl	1a864 <__assert_fail@plt+0x9384>
   1a460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a464:	sub	sp, sp, #12
   1a468:	ldr	r6, [r1]
   1a46c:	mov	r8, r1
   1a470:	mov	r9, r0
   1a474:	asrs	r4, r6, #1
   1a478:	mov	sl, r2
   1a47c:	mov	fp, r3
   1a480:	ldr	r7, [sp, #48]	; 0x30
   1a484:	bmi	1a600 <__assert_fail@plt+0x9120>
   1a488:	mvn	r1, #-2147483648	; 0x80000000
   1a48c:	sub	r1, r1, r4
   1a490:	cmp	r6, r1
   1a494:	movle	r1, #0
   1a498:	movgt	r1, #1
   1a49c:	mvn	r3, fp
   1a4a0:	cmp	r1, #0
   1a4a4:	addeq	r4, r4, r6
   1a4a8:	mvnne	r4, #-2147483648	; 0x80000000
   1a4ac:	lsr	r3, r3, #31
   1a4b0:	cmp	fp, r4
   1a4b4:	movge	r2, #0
   1a4b8:	andlt	r2, r3, #1
   1a4bc:	cmp	r2, #0
   1a4c0:	beq	1a5b0 <__assert_fail@plt+0x90d0>
   1a4c4:	cmp	r7, #0
   1a4c8:	blt	1a698 <__assert_fail@plt+0x91b8>
   1a4cc:	bne	1a690 <__assert_fail@plt+0x91b0>
   1a4d0:	mov	r5, #64	; 0x40
   1a4d4:	mov	r1, r7
   1a4d8:	mov	r0, r5
   1a4dc:	str	r3, [sp, #4]
   1a4e0:	bl	1bfec <__assert_fail@plt+0xab0c>
   1a4e4:	mov	r1, r7
   1a4e8:	mov	r4, r0
   1a4ec:	mov	r0, r5
   1a4f0:	bl	1c20c <__assert_fail@plt+0xad2c>
   1a4f4:	ldr	r3, [sp, #4]
   1a4f8:	sub	r5, r5, r1
   1a4fc:	cmp	r9, #0
   1a500:	sub	r2, r4, r6
   1a504:	streq	r9, [r8]
   1a508:	cmp	r2, sl
   1a50c:	bge	1a590 <__assert_fail@plt+0x90b0>
   1a510:	cmp	sl, #0
   1a514:	blt	1a630 <__assert_fail@plt+0x9150>
   1a518:	cmp	r6, #0
   1a51c:	blt	1a53c <__assert_fail@plt+0x905c>
   1a520:	mvn	r2, #-2147483648	; 0x80000000
   1a524:	sub	r2, r2, sl
   1a528:	cmp	r6, r2
   1a52c:	movle	r2, #0
   1a530:	movgt	r2, #1
   1a534:	cmp	r2, #0
   1a538:	bne	1a62c <__assert_fail@plt+0x914c>
   1a53c:	add	r6, r6, sl
   1a540:	cmp	fp, r6
   1a544:	movge	r3, #0
   1a548:	andlt	r3, r3, #1
   1a54c:	cmp	r3, #0
   1a550:	mov	r4, r6
   1a554:	bne	1a62c <__assert_fail@plt+0x914c>
   1a558:	cmp	r7, #0
   1a55c:	blt	1a644 <__assert_fail@plt+0x9164>
   1a560:	beq	1a58c <__assert_fail@plt+0x90ac>
   1a564:	cmp	r6, #0
   1a568:	blt	1a6e8 <__assert_fail@plt+0x9208>
   1a56c:	mov	r1, r7
   1a570:	mvn	r0, #-2147483648	; 0x80000000
   1a574:	bl	1bfec <__assert_fail@plt+0xab0c>
   1a578:	cmp	r6, r0
   1a57c:	movle	r0, #0
   1a580:	movgt	r0, #1
   1a584:	cmp	r0, #0
   1a588:	bne	1a62c <__assert_fail@plt+0x914c>
   1a58c:	mul	r5, r6, r7
   1a590:	mov	r1, r5
   1a594:	mov	r0, r9
   1a598:	bl	1b960 <__assert_fail@plt+0xa480>
   1a59c:	cmp	r0, #0
   1a5a0:	beq	1a614 <__assert_fail@plt+0x9134>
   1a5a4:	str	r4, [r8]
   1a5a8:	add	sp, sp, #12
   1a5ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5b0:	cmp	r7, #0
   1a5b4:	blt	1a670 <__assert_fail@plt+0x9190>
   1a5b8:	beq	1a4d0 <__assert_fail@plt+0x8ff0>
   1a5bc:	cmp	r4, #0
   1a5c0:	blt	1a6a0 <__assert_fail@plt+0x91c0>
   1a5c4:	mov	r1, r7
   1a5c8:	mvn	r0, #-2147483648	; 0x80000000
   1a5cc:	str	r3, [sp, #4]
   1a5d0:	bl	1bfec <__assert_fail@plt+0xab0c>
   1a5d4:	ldr	r3, [sp, #4]
   1a5d8:	cmp	r0, r4
   1a5dc:	movge	r0, #0
   1a5e0:	movlt	r0, #1
   1a5e4:	cmp	r0, #0
   1a5e8:	mvnne	r5, #-2147483648	; 0x80000000
   1a5ec:	bne	1a4d4 <__assert_fail@plt+0x8ff4>
   1a5f0:	mul	r5, r7, r4
   1a5f4:	cmp	r5, #63	; 0x3f
   1a5f8:	bgt	1a4fc <__assert_fail@plt+0x901c>
   1a5fc:	b	1a4d0 <__assert_fail@plt+0x8ff0>
   1a600:	rsb	r1, r4, #-2147483648	; 0x80000000
   1a604:	cmp	r6, r1
   1a608:	movge	r1, #0
   1a60c:	movlt	r1, #1
   1a610:	b	1a49c <__assert_fail@plt+0x8fbc>
   1a614:	adds	r5, r5, #0
   1a618:	movne	r5, #1
   1a61c:	cmp	r9, #0
   1a620:	orreq	r5, r5, #1
   1a624:	cmp	r5, #0
   1a628:	beq	1a5a4 <__assert_fail@plt+0x90c4>
   1a62c:	bl	1a864 <__assert_fail@plt+0x9384>
   1a630:	rsb	r2, sl, #-2147483648	; 0x80000000
   1a634:	cmp	r6, r2
   1a638:	movge	r2, #0
   1a63c:	movlt	r2, #1
   1a640:	b	1a534 <__assert_fail@plt+0x9054>
   1a644:	cmp	r6, #0
   1a648:	blt	1a6cc <__assert_fail@plt+0x91ec>
   1a64c:	cmn	r7, #1
   1a650:	beq	1a58c <__assert_fail@plt+0x90ac>
   1a654:	mov	r1, r7
   1a658:	mov	r0, #-2147483648	; 0x80000000
   1a65c:	bl	1bfec <__assert_fail@plt+0xab0c>
   1a660:	cmp	r6, r0
   1a664:	movle	r0, #0
   1a668:	movgt	r0, #1
   1a66c:	b	1a584 <__assert_fail@plt+0x90a4>
   1a670:	cmp	r4, #0
   1a674:	blt	1a70c <__assert_fail@plt+0x922c>
   1a678:	cmn	r7, #1
   1a67c:	beq	1a5f0 <__assert_fail@plt+0x9110>
   1a680:	str	r3, [sp, #4]
   1a684:	mov	r1, r7
   1a688:	mov	r0, #-2147483648	; 0x80000000
   1a68c:	b	1a5d0 <__assert_fail@plt+0x90f0>
   1a690:	mov	r4, fp
   1a694:	b	1a5c4 <__assert_fail@plt+0x90e4>
   1a698:	mov	r4, fp
   1a69c:	b	1a678 <__assert_fail@plt+0x9198>
   1a6a0:	cmn	r4, #1
   1a6a4:	beq	1a5f0 <__assert_fail@plt+0x9110>
   1a6a8:	mov	r1, r4
   1a6ac:	mov	r0, #-2147483648	; 0x80000000
   1a6b0:	str	r3, [sp, #4]
   1a6b4:	bl	1bfec <__assert_fail@plt+0xab0c>
   1a6b8:	ldr	r3, [sp, #4]
   1a6bc:	cmp	r7, r0
   1a6c0:	movle	r0, #0
   1a6c4:	movgt	r0, #1
   1a6c8:	b	1a5e4 <__assert_fail@plt+0x9104>
   1a6cc:	mov	r1, r7
   1a6d0:	mvn	r0, #-2147483648	; 0x80000000
   1a6d4:	bl	1bfec <__assert_fail@plt+0xab0c>
   1a6d8:	cmp	r6, r0
   1a6dc:	movge	r0, #0
   1a6e0:	movlt	r0, #1
   1a6e4:	b	1a584 <__assert_fail@plt+0x90a4>
   1a6e8:	cmn	r6, #1
   1a6ec:	beq	1a58c <__assert_fail@plt+0x90ac>
   1a6f0:	mov	r1, r6
   1a6f4:	mov	r0, #-2147483648	; 0x80000000
   1a6f8:	bl	1bfec <__assert_fail@plt+0xab0c>
   1a6fc:	cmp	r7, r0
   1a700:	movle	r0, #0
   1a704:	movgt	r0, #1
   1a708:	b	1a584 <__assert_fail@plt+0x90a4>
   1a70c:	mov	r1, r7
   1a710:	mvn	r0, #-2147483648	; 0x80000000
   1a714:	str	r3, [sp, #4]
   1a718:	bl	1bfec <__assert_fail@plt+0xab0c>
   1a71c:	ldr	r3, [sp, #4]
   1a720:	cmp	r0, r4
   1a724:	movle	r0, #0
   1a728:	movgt	r0, #1
   1a72c:	b	1a5e4 <__assert_fail@plt+0x9104>
   1a730:	push	{r4, lr}
   1a734:	mov	r1, #1
   1a738:	bl	1b8ec <__assert_fail@plt+0xa40c>
   1a73c:	cmp	r0, #0
   1a740:	popne	{r4, pc}
   1a744:	bl	1a864 <__assert_fail@plt+0x9384>
   1a748:	push	{r4, lr}
   1a74c:	mov	r1, #1
   1a750:	bl	1b8ec <__assert_fail@plt+0xa40c>
   1a754:	cmp	r0, #0
   1a758:	popne	{r4, pc}
   1a75c:	bl	1a864 <__assert_fail@plt+0x9384>
   1a760:	push	{r4, lr}
   1a764:	bl	1b8ec <__assert_fail@plt+0xa40c>
   1a768:	cmp	r0, #0
   1a76c:	popne	{r4, pc}
   1a770:	bl	1a864 <__assert_fail@plt+0x9384>
   1a774:	push	{r4, lr}
   1a778:	bl	1b8ec <__assert_fail@plt+0xa40c>
   1a77c:	cmp	r0, #0
   1a780:	popne	{r4, pc}
   1a784:	bl	1a864 <__assert_fail@plt+0x9384>
   1a788:	push	{r4, r5, r6, lr}
   1a78c:	mov	r6, r0
   1a790:	mov	r0, r1
   1a794:	mov	r4, r1
   1a798:	bl	1b934 <__assert_fail@plt+0xa454>
   1a79c:	subs	r5, r0, #0
   1a7a0:	beq	1a7b8 <__assert_fail@plt+0x92d8>
   1a7a4:	mov	r2, r4
   1a7a8:	mov	r1, r6
   1a7ac:	bl	111c8 <memcpy@plt>
   1a7b0:	mov	r0, r5
   1a7b4:	pop	{r4, r5, r6, pc}
   1a7b8:	bl	1a864 <__assert_fail@plt+0x9384>
   1a7bc:	push	{r4, r5, r6, lr}
   1a7c0:	mov	r6, r0
   1a7c4:	mov	r0, r1
   1a7c8:	mov	r4, r1
   1a7cc:	bl	1b934 <__assert_fail@plt+0xa454>
   1a7d0:	subs	r5, r0, #0
   1a7d4:	beq	1a7ec <__assert_fail@plt+0x930c>
   1a7d8:	mov	r2, r4
   1a7dc:	mov	r1, r6
   1a7e0:	bl	111c8 <memcpy@plt>
   1a7e4:	mov	r0, r5
   1a7e8:	pop	{r4, r5, r6, pc}
   1a7ec:	bl	1a864 <__assert_fail@plt+0x9384>
   1a7f0:	push	{r4, r5, r6, lr}
   1a7f4:	mov	r6, r0
   1a7f8:	add	r0, r1, #1
   1a7fc:	mov	r4, r1
   1a800:	bl	1b934 <__assert_fail@plt+0xa454>
   1a804:	subs	r5, r0, #0
   1a808:	beq	1a828 <__assert_fail@plt+0x9348>
   1a80c:	mov	r3, #0
   1a810:	mov	r1, r6
   1a814:	strb	r3, [r5, r4]
   1a818:	mov	r2, r4
   1a81c:	bl	111c8 <memcpy@plt>
   1a820:	mov	r0, r5
   1a824:	pop	{r4, r5, r6, pc}
   1a828:	bl	1a864 <__assert_fail@plt+0x9384>
   1a82c:	push	{r4, r5, r6, lr}
   1a830:	mov	r6, r0
   1a834:	bl	11354 <strlen@plt>
   1a838:	add	r4, r0, #1
   1a83c:	mov	r0, r4
   1a840:	bl	1b934 <__assert_fail@plt+0xa454>
   1a844:	subs	r5, r0, #0
   1a848:	beq	1a860 <__assert_fail@plt+0x9380>
   1a84c:	mov	r2, r4
   1a850:	mov	r1, r6
   1a854:	bl	111c8 <memcpy@plt>
   1a858:	mov	r0, r5
   1a85c:	pop	{r4, r5, r6, pc}
   1a860:	bl	1a864 <__assert_fail@plt+0x9384>
   1a864:	ldr	r3, [pc, #44]	; 1a898 <__assert_fail@plt+0x93b8>
   1a868:	push	{r4, lr}
   1a86c:	mov	r2, #5
   1a870:	ldr	r1, [pc, #36]	; 1a89c <__assert_fail@plt+0x93bc>
   1a874:	mov	r0, #0
   1a878:	ldr	r4, [r3]
   1a87c:	bl	1121c <dcgettext@plt>
   1a880:	ldr	r2, [pc, #24]	; 1a8a0 <__assert_fail@plt+0x93c0>
   1a884:	mov	r1, #0
   1a888:	mov	r3, r0
   1a88c:	mov	r0, r4
   1a890:	bl	112d0 <error@plt>
   1a894:	bl	114bc <abort@plt>
   1a898:	andeq	lr, r2, r8, ror #2
   1a89c:	ldrdeq	sp, [r1], -r0
   1a8a0:	andeq	ip, r1, r0, ror #15
   1a8a4:	push	{r4, r5, r6, r7, lr}
   1a8a8:	sub	sp, sp, #20
   1a8ac:	mov	r6, r2
   1a8b0:	ldr	ip, [sp, #48]	; 0x30
   1a8b4:	mov	r2, r1
   1a8b8:	mov	r7, r3
   1a8bc:	str	ip, [sp]
   1a8c0:	add	r3, sp, #8
   1a8c4:	mov	r1, #0
   1a8c8:	mov	r5, r0
   1a8cc:	ldr	r4, [sp, #56]	; 0x38
   1a8d0:	bl	1ab20 <__assert_fail@plt+0x9640>
   1a8d4:	cmp	r0, #0
   1a8d8:	bne	1a95c <__assert_fail@plt+0x947c>
   1a8dc:	ldrd	r0, [sp, #8]
   1a8e0:	cmp	r1, r7
   1a8e4:	cmpeq	r0, r6
   1a8e8:	ldrd	r6, [sp, #40]	; 0x28
   1a8ec:	movcc	r3, #1
   1a8f0:	movcs	r3, #0
   1a8f4:	cmp	r1, r7
   1a8f8:	cmpeq	r0, r6
   1a8fc:	orrhi	r3, r3, #1
   1a900:	cmp	r3, #0
   1a904:	beq	1a954 <__assert_fail@plt+0x9474>
   1a908:	mov	r3, #0
   1a90c:	mvn	r2, #-1073741824	; 0xc0000000
   1a910:	cmp	r1, r3
   1a914:	cmpeq	r0, r2
   1a918:	bhi	1a988 <__assert_fail@plt+0x94a8>
   1a91c:	bl	1139c <__errno_location@plt>
   1a920:	mov	r3, #34	; 0x22
   1a924:	mov	r6, r3
   1a928:	str	r3, [r0]
   1a92c:	cmp	r4, #0
   1a930:	moveq	r4, #1
   1a934:	mov	r0, r5
   1a938:	bl	192d4 <__assert_fail@plt+0x7df4>
   1a93c:	mov	r1, r6
   1a940:	ldr	r3, [sp, #52]	; 0x34
   1a944:	ldr	r2, [pc, #144]	; 1a9dc <__assert_fail@plt+0x94fc>
   1a948:	str	r0, [sp]
   1a94c:	mov	r0, r4
   1a950:	bl	112d0 <error@plt>
   1a954:	add	sp, sp, #20
   1a958:	pop	{r4, r5, r6, r7, pc}
   1a95c:	cmp	r0, #1
   1a960:	beq	1a99c <__assert_fail@plt+0x94bc>
   1a964:	cmp	r0, #3
   1a968:	beq	1a9cc <__assert_fail@plt+0x94ec>
   1a96c:	cmp	r4, #0
   1a970:	beq	1a9bc <__assert_fail@plt+0x94dc>
   1a974:	bl	1139c <__errno_location@plt>
   1a978:	ldr	r6, [r0]
   1a97c:	cmp	r6, #22
   1a980:	moveq	r6, #0
   1a984:	b	1a934 <__assert_fail@plt+0x9454>
   1a988:	bl	1139c <__errno_location@plt>
   1a98c:	mov	r3, #75	; 0x4b
   1a990:	mov	r6, r3
   1a994:	str	r3, [r0]
   1a998:	b	1a92c <__assert_fail@plt+0x944c>
   1a99c:	bl	1139c <__errno_location@plt>
   1a9a0:	mov	r3, #75	; 0x4b
   1a9a4:	mov	r6, r3
   1a9a8:	str	r3, [r0]
   1a9ac:	cmp	r4, #0
   1a9b0:	moveq	r4, #1
   1a9b4:	bne	1a97c <__assert_fail@plt+0x949c>
   1a9b8:	b	1a934 <__assert_fail@plt+0x9454>
   1a9bc:	bl	1139c <__errno_location@plt>
   1a9c0:	mov	r4, #1
   1a9c4:	ldr	r6, [r0]
   1a9c8:	b	1a97c <__assert_fail@plt+0x949c>
   1a9cc:	bl	1139c <__errno_location@plt>
   1a9d0:	mov	r6, #0
   1a9d4:	str	r6, [r0]
   1a9d8:	b	1a9ac <__assert_fail@plt+0x94cc>
   1a9dc:	strdeq	sp, [r1], -r4
   1a9e0:	push	{r4, r5, r6, r7, lr}
   1a9e4:	sub	sp, sp, #20
   1a9e8:	mov	r6, r2
   1a9ec:	ldr	r1, [sp, #48]	; 0x30
   1a9f0:	mov	r7, r3
   1a9f4:	str	r1, [sp]
   1a9f8:	add	r3, sp, #8
   1a9fc:	mov	r2, #10
   1aa00:	mov	r1, #0
   1aa04:	mov	r5, r0
   1aa08:	ldr	r4, [sp, #56]	; 0x38
   1aa0c:	bl	1ab20 <__assert_fail@plt+0x9640>
   1aa10:	cmp	r0, #0
   1aa14:	bne	1aa98 <__assert_fail@plt+0x95b8>
   1aa18:	ldrd	r0, [sp, #8]
   1aa1c:	cmp	r7, r1
   1aa20:	cmpeq	r6, r0
   1aa24:	ldrd	r6, [sp, #40]	; 0x28
   1aa28:	movhi	r3, #1
   1aa2c:	movls	r3, #0
   1aa30:	cmp	r7, r1
   1aa34:	cmpeq	r6, r0
   1aa38:	orrcc	r3, r3, #1
   1aa3c:	cmp	r3, #0
   1aa40:	beq	1aa90 <__assert_fail@plt+0x95b0>
   1aa44:	mov	r3, #0
   1aa48:	mvn	r2, #-1073741824	; 0xc0000000
   1aa4c:	cmp	r1, r3
   1aa50:	cmpeq	r0, r2
   1aa54:	bhi	1aac4 <__assert_fail@plt+0x95e4>
   1aa58:	bl	1139c <__errno_location@plt>
   1aa5c:	mov	r3, #34	; 0x22
   1aa60:	mov	r6, r3
   1aa64:	str	r3, [r0]
   1aa68:	cmp	r4, #0
   1aa6c:	moveq	r4, #1
   1aa70:	mov	r0, r5
   1aa74:	bl	192d4 <__assert_fail@plt+0x7df4>
   1aa78:	mov	r1, r6
   1aa7c:	ldr	r3, [sp, #52]	; 0x34
   1aa80:	ldr	r2, [pc, #144]	; 1ab18 <__assert_fail@plt+0x9638>
   1aa84:	str	r0, [sp]
   1aa88:	mov	r0, r4
   1aa8c:	bl	112d0 <error@plt>
   1aa90:	add	sp, sp, #20
   1aa94:	pop	{r4, r5, r6, r7, pc}
   1aa98:	cmp	r0, #1
   1aa9c:	beq	1aad8 <__assert_fail@plt+0x95f8>
   1aaa0:	cmp	r0, #3
   1aaa4:	beq	1ab08 <__assert_fail@plt+0x9628>
   1aaa8:	cmp	r4, #0
   1aaac:	beq	1aaf8 <__assert_fail@plt+0x9618>
   1aab0:	bl	1139c <__errno_location@plt>
   1aab4:	ldr	r6, [r0]
   1aab8:	cmp	r6, #22
   1aabc:	moveq	r6, #0
   1aac0:	b	1aa70 <__assert_fail@plt+0x9590>
   1aac4:	bl	1139c <__errno_location@plt>
   1aac8:	mov	r3, #75	; 0x4b
   1aacc:	mov	r6, r3
   1aad0:	str	r3, [r0]
   1aad4:	b	1aa68 <__assert_fail@plt+0x9588>
   1aad8:	bl	1139c <__errno_location@plt>
   1aadc:	mov	r3, #75	; 0x4b
   1aae0:	mov	r6, r3
   1aae4:	str	r3, [r0]
   1aae8:	cmp	r4, #0
   1aaec:	moveq	r4, #1
   1aaf0:	bne	1aab8 <__assert_fail@plt+0x95d8>
   1aaf4:	b	1aa70 <__assert_fail@plt+0x9590>
   1aaf8:	bl	1139c <__errno_location@plt>
   1aafc:	mov	r4, #1
   1ab00:	ldr	r6, [r0]
   1ab04:	b	1aab8 <__assert_fail@plt+0x95d8>
   1ab08:	bl	1139c <__errno_location@plt>
   1ab0c:	mov	r6, #0
   1ab10:	str	r6, [r0]
   1ab14:	b	1aae8 <__assert_fail@plt+0x9608>
   1ab18:	strdeq	sp, [r1], -r4
   1ab1c:	andeq	r0, r0, r0
   1ab20:	cmp	r2, #36	; 0x24
   1ab24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab28:	sub	sp, sp, #52	; 0x34
   1ab2c:	bhi	1b8bc <__assert_fail@plt+0xa3dc>
   1ab30:	cmp	r1, #0
   1ab34:	mov	r6, r2
   1ab38:	mov	sl, r0
   1ab3c:	mov	r5, r1
   1ab40:	mov	r8, r3
   1ab44:	addeq	r5, sp, #44	; 0x2c
   1ab48:	bl	1139c <__errno_location@plt>
   1ab4c:	mov	r3, #0
   1ab50:	str	r3, [r0]
   1ab54:	mov	fp, r0
   1ab58:	bl	1133c <__ctype_b_loc@plt>
   1ab5c:	ldrb	r3, [sl]
   1ab60:	mov	r2, sl
   1ab64:	ldr	r0, [r0]
   1ab68:	b	1ab70 <__assert_fail@plt+0x9690>
   1ab6c:	ldrb	r3, [r2, #1]!
   1ab70:	lsl	r1, r3, #1
   1ab74:	ldrh	r4, [r0, r1]
   1ab78:	ands	r4, r4, #8192	; 0x2000
   1ab7c:	bne	1ab6c <__assert_fail@plt+0x968c>
   1ab80:	cmp	r3, #45	; 0x2d
   1ab84:	bne	1ab98 <__assert_fail@plt+0x96b8>
   1ab88:	mov	r4, #4
   1ab8c:	mov	r0, r4
   1ab90:	add	sp, sp, #52	; 0x34
   1ab94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab98:	mov	r2, r6
   1ab9c:	mov	r3, r4
   1aba0:	mov	r1, r5
   1aba4:	mov	r0, sl
   1aba8:	bl	111d4 <__strtoull_internal@plt>
   1abac:	ldr	r9, [r5]
   1abb0:	cmp	sl, r9
   1abb4:	mov	r6, r0
   1abb8:	mov	r7, r1
   1abbc:	beq	1ac04 <__assert_fail@plt+0x9724>
   1abc0:	ldr	r4, [fp]
   1abc4:	cmp	r4, #0
   1abc8:	bne	1abf4 <__assert_fail@plt+0x9714>
   1abcc:	ldr	r3, [sp, #88]	; 0x58
   1abd0:	cmp	r3, #0
   1abd4:	beq	1abe4 <__assert_fail@plt+0x9704>
   1abd8:	ldrb	sl, [r9]
   1abdc:	cmp	sl, #0
   1abe0:	bne	1ac38 <__assert_fail@plt+0x9758>
   1abe4:	mov	r0, r4
   1abe8:	strd	r6, [r8]
   1abec:	add	sp, sp, #52	; 0x34
   1abf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abf4:	cmp	r4, #34	; 0x22
   1abf8:	bne	1ab88 <__assert_fail@plt+0x96a8>
   1abfc:	mov	r4, #1
   1ac00:	b	1abcc <__assert_fail@plt+0x96ec>
   1ac04:	ldr	r3, [sp, #88]	; 0x58
   1ac08:	cmp	r3, #0
   1ac0c:	beq	1ab88 <__assert_fail@plt+0x96a8>
   1ac10:	ldrb	sl, [r9]
   1ac14:	cmp	sl, #0
   1ac18:	beq	1ab88 <__assert_fail@plt+0x96a8>
   1ac1c:	mov	r1, sl
   1ac20:	mov	r0, r3
   1ac24:	bl	1136c <strchr@plt>
   1ac28:	cmp	r0, #0
   1ac2c:	movne	r6, #1
   1ac30:	movne	r7, #0
   1ac34:	beq	1ab88 <__assert_fail@plt+0x96a8>
   1ac38:	mov	r1, sl
   1ac3c:	ldr	r0, [sp, #88]	; 0x58
   1ac40:	bl	1136c <strchr@plt>
   1ac44:	cmp	r0, #0
   1ac48:	beq	1b7a8 <__assert_fail@plt+0xa2c8>
   1ac4c:	sub	r3, sl, #69	; 0x45
   1ac50:	cmp	r3, #47	; 0x2f
   1ac54:	ldrls	pc, [pc, r3, lsl #2]
   1ac58:	b	1ad4c <__assert_fail@plt+0x986c>
   1ac5c:	andeq	sl, r1, ip, lsl sp
   1ac60:	andeq	sl, r1, ip, asr #26
   1ac64:	andeq	sl, r1, ip, lsl sp
   1ac68:	andeq	sl, r1, ip, asr #26
   1ac6c:	andeq	sl, r1, ip, asr #26
   1ac70:	andeq	sl, r1, ip, asr #26
   1ac74:	andeq	sl, r1, ip, lsl sp
   1ac78:	andeq	sl, r1, ip, asr #26
   1ac7c:	andeq	sl, r1, ip, lsl sp
   1ac80:	andeq	sl, r1, ip, asr #26
   1ac84:	andeq	sl, r1, ip, asr #26
   1ac88:	andeq	sl, r1, ip, lsl sp
   1ac8c:	andeq	sl, r1, ip, asr #26
   1ac90:	andeq	sl, r1, ip, asr #26
   1ac94:	andeq	sl, r1, ip, asr #26
   1ac98:	andeq	sl, r1, ip, lsl sp
   1ac9c:	andeq	sl, r1, ip, asr #26
   1aca0:	andeq	sl, r1, ip, asr #26
   1aca4:	andeq	sl, r1, ip, asr #26
   1aca8:	andeq	sl, r1, ip, asr #26
   1acac:	andeq	sl, r1, ip, lsl sp
   1acb0:	andeq	sl, r1, ip, lsl sp
   1acb4:	andeq	sl, r1, ip, asr #26
   1acb8:	andeq	sl, r1, ip, asr #26
   1acbc:	andeq	sl, r1, ip, asr #26
   1acc0:	andeq	sl, r1, ip, asr #26
   1acc4:	andeq	sl, r1, ip, asr #26
   1acc8:	andeq	sl, r1, ip, asr #26
   1accc:	andeq	sl, r1, ip, asr #26
   1acd0:	andeq	sl, r1, ip, asr #26
   1acd4:	andeq	sl, r1, ip, asr #26
   1acd8:	andeq	sl, r1, ip, asr #26
   1acdc:	andeq	sl, r1, ip, asr #26
   1ace0:	andeq	sl, r1, ip, asr #26
   1ace4:	andeq	sl, r1, ip, lsl sp
   1ace8:	andeq	sl, r1, ip, asr #26
   1acec:	andeq	sl, r1, ip, asr #26
   1acf0:	andeq	sl, r1, ip, asr #26
   1acf4:	andeq	sl, r1, ip, lsl sp
   1acf8:	andeq	sl, r1, ip, asr #26
   1acfc:	andeq	sl, r1, ip, lsl sp
   1ad00:	andeq	sl, r1, ip, asr #26
   1ad04:	andeq	sl, r1, ip, asr #26
   1ad08:	andeq	sl, r1, ip, asr #26
   1ad0c:	andeq	sl, r1, ip, asr #26
   1ad10:	andeq	sl, r1, ip, asr #26
   1ad14:	andeq	sl, r1, ip, asr #26
   1ad18:	andeq	sl, r1, ip, lsl sp
   1ad1c:	mov	r1, #48	; 0x30
   1ad20:	ldr	r0, [sp, #88]	; 0x58
   1ad24:	bl	1136c <strchr@plt>
   1ad28:	cmp	r0, #0
   1ad2c:	beq	1b83c <__assert_fail@plt+0xa35c>
   1ad30:	ldrb	r3, [r9, #1]
   1ad34:	cmp	r3, #68	; 0x44
   1ad38:	beq	1b81c <__assert_fail@plt+0xa33c>
   1ad3c:	cmp	r3, #105	; 0x69
   1ad40:	beq	1b7ec <__assert_fail@plt+0xa30c>
   1ad44:	cmp	r3, #66	; 0x42
   1ad48:	beq	1b81c <__assert_fail@plt+0xa33c>
   1ad4c:	ldr	r3, [pc, #2948]	; 1b8d8 <__assert_fail@plt+0xa3f8>
   1ad50:	mvn	r2, #0
   1ad54:	mov	r1, #1024	; 0x400
   1ad58:	mov	lr, #0
   1ad5c:	strd	r2, [sp]
   1ad60:	mov	r3, #1
   1ad64:	str	r3, [sp, #12]
   1ad68:	sub	sl, sl, #66	; 0x42
   1ad6c:	cmp	sl, #53	; 0x35
   1ad70:	ldrls	pc, [pc, sl, lsl #2]
   1ad74:	b	1b7a8 <__assert_fail@plt+0xa2c8>
   1ad78:	andeq	fp, r1, r8, ror r7
   1ad7c:	andeq	fp, r1, r8, lsr #15
   1ad80:	andeq	fp, r1, r8, lsr #15
   1ad84:	strdeq	fp, [r1], -r4
   1ad88:	andeq	fp, r1, r8, lsr #15
   1ad8c:	andeq	fp, r1, r0, lsr r5
   1ad90:	andeq	fp, r1, r8, lsr #15
   1ad94:	andeq	fp, r1, r8, lsr #15
   1ad98:	andeq	fp, r1, r8, lsr #15
   1ad9c:			; <UNDEFINED> instruction: 0x0001b7b4
   1ada0:	andeq	fp, r1, r8, lsr #15
   1ada4:	andeq	sl, r1, r0, asr lr
   1ada8:	andeq	fp, r1, r8, lsr #15
   1adac:	andeq	fp, r1, r8, lsr #15
   1adb0:	ldrdeq	sl, [r1], -ip
   1adb4:	andeq	fp, r1, r8, lsr #15
   1adb8:	andeq	fp, r1, r8, lsr #15
   1adbc:	andeq	fp, r1, r8, lsr #15
   1adc0:	andeq	fp, r1, ip, asr r2
   1adc4:	andeq	fp, r1, r8, lsr #15
   1adc8:	andeq	fp, r1, r8, lsr #15
   1adcc:	andeq	fp, r1, r8, lsr #15
   1add0:	andeq	fp, r1, r8, lsr #15
   1add4:	andeq	fp, r1, r4, lsr r0
   1add8:	muleq	r1, r0, r3
   1addc:	andeq	fp, r1, r8, lsr #15
   1ade0:	andeq	fp, r1, r8, lsr #15
   1ade4:	andeq	fp, r1, r8, lsr #15
   1ade8:	andeq	fp, r1, r8, lsr #15
   1adec:	andeq	fp, r1, r8, lsr #15
   1adf0:	andeq	fp, r1, r8, lsr #15
   1adf4:	andeq	fp, r1, r8, lsr #15
   1adf8:	andeq	fp, r1, r0, ror #6
   1adfc:	andeq	fp, r1, r8, asr r3
   1ae00:	andeq	fp, r1, r8, lsr #15
   1ae04:	andeq	fp, r1, r8, lsr #15
   1ae08:	andeq	fp, r1, r8, lsr #15
   1ae0c:	andeq	fp, r1, r0, lsr r5
   1ae10:	andeq	fp, r1, r8, lsr #15
   1ae14:	andeq	fp, r1, r8, lsr #15
   1ae18:	andeq	fp, r1, r8, lsr #15
   1ae1c:			; <UNDEFINED> instruction: 0x0001b7b4
   1ae20:	andeq	fp, r1, r8, lsr #15
   1ae24:	andeq	sl, r1, r0, asr lr
   1ae28:	andeq	fp, r1, r8, lsr #15
   1ae2c:	andeq	fp, r1, r8, lsr #15
   1ae30:	andeq	fp, r1, r8, lsr #15
   1ae34:	andeq	fp, r1, r8, lsr #15
   1ae38:	andeq	fp, r1, r8, lsr #15
   1ae3c:	andeq	fp, r1, r8, lsr #15
   1ae40:	andeq	fp, r1, ip, asr r2
   1ae44:	andeq	fp, r1, r8, lsr #15
   1ae48:	andeq	fp, r1, r8, lsr #15
   1ae4c:	andeq	fp, r1, ip, lsr r3
   1ae50:	mul	r0, r6, lr
   1ae54:	ldrd	sl, [sp]
   1ae58:	umull	r2, r3, r6, r1
   1ae5c:	mla	r0, r1, r7, r0
   1ae60:	cmp	r7, fp
   1ae64:	cmpeq	r6, sl
   1ae68:	add	r3, r0, r3
   1ae6c:	mvnhi	r3, #0
   1ae70:	mvnhi	r2, #0
   1ae74:	mul	r6, r1, r3
   1ae78:	umull	r0, r1, r1, r2
   1ae7c:	mla	lr, lr, r2, r6
   1ae80:	ldrd	r6, [sp]
   1ae84:	movhi	ip, #1
   1ae88:	movls	ip, #0
   1ae8c:	cmp	r7, r3
   1ae90:	cmpeq	r6, r2
   1ae94:	mvncc	r0, #0
   1ae98:	add	r1, lr, r1
   1ae9c:	mov	sl, r6
   1aea0:	movcc	r1, r0
   1aea4:	mov	fp, r7
   1aea8:	cmp	fp, r3
   1aeac:	cmpeq	sl, r2
   1aeb0:	mov	r6, r0
   1aeb4:	mov	r7, r1
   1aeb8:	orrcc	ip, ip, #1
   1aebc:	ldr	r2, [sp, #12]
   1aec0:	orr	r4, r4, ip
   1aec4:	add	r3, r9, r2
   1aec8:	str	r3, [r5]
   1aecc:	ldrb	r3, [r9, r2]
   1aed0:	cmp	r3, #0
   1aed4:	orrne	r4, r4, #2
   1aed8:	b	1abe4 <__assert_fail@plt+0x9704>
   1aedc:	ldrd	sl, [sp]
   1aee0:	umull	r2, r3, r6, r1
   1aee4:	mul	r0, r6, lr
   1aee8:	cmp	r7, fp
   1aeec:	cmpeq	r6, sl
   1aef0:	mvnhi	r2, #0
   1aef4:	mla	r0, r1, r7, r0
   1aef8:	umull	sl, fp, r2, r1
   1aefc:	add	r3, r0, r3
   1af00:	mul	r0, lr, r2
   1af04:	mvnhi	r3, #0
   1af08:	strd	sl, [sp, #16]
   1af0c:	ldrd	sl, [sp]
   1af10:	mla	r0, r1, r3, r0
   1af14:	ldr	ip, [sp, #20]
   1af18:	cmp	r3, fp
   1af1c:	add	r0, r0, ip
   1af20:	cmpeq	r2, sl
   1af24:	str	r0, [sp, #20]
   1af28:	bls	1af40 <__assert_fail@plt+0x9a60>
   1af2c:	mvn	sl, #0
   1af30:	mvn	fp, #0
   1af34:	strd	sl, [sp, #16]
   1af38:	ldr	r0, [sp, #20]
   1af3c:	ldrd	sl, [sp]
   1af40:	cmp	r7, fp
   1af44:	cmpeq	r6, sl
   1af48:	mul	r0, r1, r0
   1af4c:	ldrd	r6, [sp, #16]
   1af50:	mla	ip, lr, r6, r0
   1af54:	mov	r0, r6
   1af58:	movhi	r0, #1
   1af5c:	movls	r0, #0
   1af60:	cmp	r3, fp
   1af64:	cmpeq	r2, sl
   1af68:	ldrd	r2, [sp, #16]
   1af6c:	umull	r6, r7, r1, r6
   1af70:	orrhi	r0, r0, #1
   1af74:	cmp	fp, r3
   1af78:	cmpeq	sl, r2
   1af7c:	add	r7, ip, r7
   1af80:	bcc	1b88c <__assert_fail@plt+0xa3ac>
   1af84:	mov	sl, r6
   1af88:	mov	fp, r7
   1af8c:	strd	r6, [sp, #24]
   1af90:	mul	r3, r1, fp
   1af94:	umull	r6, r7, r1, sl
   1af98:	mla	ip, lr, sl, r3
   1af9c:	ldrd	sl, [sp]
   1afa0:	ldrd	r2, [sp, #16]
   1afa4:	add	r7, ip, r7
   1afa8:	cmp	fp, r3
   1afac:	cmpeq	sl, r2
   1afb0:	mov	r3, fp
   1afb4:	mov	r2, sl
   1afb8:	ldrd	sl, [sp, #24]
   1afbc:	orrcc	r0, r0, #1
   1afc0:	str	r0, [sp, #16]
   1afc4:	cmp	r3, fp
   1afc8:	cmpeq	r2, sl
   1afcc:	bcs	1b524 <__assert_fail@plt+0xa044>
   1afd0:	mvn	r2, #0
   1afd4:	mvn	r3, #0
   1afd8:	mul	ip, lr, r2
   1afdc:	ldrd	sl, [sp]
   1afe0:	mla	ip, r1, r3, ip
   1afe4:	umull	r6, r7, r2, r1
   1afe8:	ldrd	r0, [sp, #24]
   1afec:	add	r7, ip, r7
   1aff0:	cmp	fp, r1
   1aff4:	ldr	r1, [sp, #16]
   1aff8:	cmpeq	sl, r0
   1affc:	orrcc	r1, r1, #1
   1b000:	cmp	r3, fp
   1b004:	cmpeq	r2, sl
   1b008:	mvnhi	r0, #0
   1b00c:	movls	ip, r7
   1b010:	movhi	ip, r0
   1b014:	movls	r0, r6
   1b018:	cmp	r3, fp
   1b01c:	cmpeq	r2, sl
   1b020:	mov	r7, ip
   1b024:	mov	r6, r0
   1b028:	movls	ip, r1
   1b02c:	orrhi	ip, r1, #1
   1b030:	b	1aebc <__assert_fail@plt+0x99dc>
   1b034:	ldrd	sl, [sp]
   1b038:	umull	r2, r3, r6, r1
   1b03c:	mul	r0, r6, lr
   1b040:	cmp	r7, fp
   1b044:	cmpeq	r6, sl
   1b048:	mvnhi	r2, #0
   1b04c:	mla	r0, r1, r7, r0
   1b050:	umull	sl, fp, r2, r1
   1b054:	add	r3, r0, r3
   1b058:	mul	r0, lr, r2
   1b05c:	mvnhi	r3, #0
   1b060:	strd	sl, [sp, #16]
   1b064:	ldrd	sl, [sp]
   1b068:	mla	r0, r1, r3, r0
   1b06c:	ldr	ip, [sp, #20]
   1b070:	cmp	r3, fp
   1b074:	add	r0, r0, ip
   1b078:	cmpeq	r2, sl
   1b07c:	str	r0, [sp, #20]
   1b080:	mvnhi	sl, #0
   1b084:	mvnhi	fp, #0
   1b088:	strdhi	sl, [sp, #16]
   1b08c:	ldrdhi	sl, [sp]
   1b090:	ldr	r0, [sp, #16]
   1b094:	cmp	r3, fp
   1b098:	ldr	r3, [sp, #20]
   1b09c:	mul	r0, lr, r0
   1b0a0:	cmpeq	r2, sl
   1b0a4:	mla	r0, r1, r3, r0
   1b0a8:	ldr	r3, [sp, #16]
   1b0ac:	umull	r2, r3, r3, r1
   1b0b0:	strd	r2, [sp, #24]
   1b0b4:	movhi	r3, #1
   1b0b8:	movls	r3, #0
   1b0bc:	cmp	r7, fp
   1b0c0:	cmpeq	r6, sl
   1b0c4:	ldrd	r6, [sp, #16]
   1b0c8:	ldr	r2, [sp, #28]
   1b0cc:	movls	ip, r3
   1b0d0:	orrhi	ip, r3, #1
   1b0d4:	cmp	r7, fp
   1b0d8:	add	r2, r0, r2
   1b0dc:	cmpeq	r6, sl
   1b0e0:	str	r2, [sp, #28]
   1b0e4:	mvnhi	r2, #0
   1b0e8:	mvnhi	r3, #0
   1b0ec:	strdhi	r2, [sp, #24]
   1b0f0:	ldrd	r6, [sp, #24]
   1b0f4:	mul	r2, r1, r7
   1b0f8:	umull	sl, fp, r1, r6
   1b0fc:	mla	r3, lr, r6, r2
   1b100:	ldrd	r6, [sp]
   1b104:	str	r3, [sp, #32]
   1b108:	ldrd	r2, [sp, #16]
   1b10c:	cmp	r3, r7
   1b110:	cmpeq	r2, r6
   1b114:	ldrd	r2, [sp, #24]
   1b118:	orrhi	ip, ip, #1
   1b11c:	cmp	r3, r7
   1b120:	ldr	r3, [sp, #32]
   1b124:	cmpeq	r2, r6
   1b128:	add	r2, r3, fp
   1b12c:	mov	fp, r2
   1b130:	bhi	1b874 <__assert_fail@plt+0xa394>
   1b134:	strd	sl, [sp, #16]
   1b138:	mul	r2, r1, fp
   1b13c:	umull	r6, r7, r1, sl
   1b140:	mla	r3, lr, sl, r2
   1b144:	ldrd	sl, [sp]
   1b148:	str	r3, [sp, #32]
   1b14c:	ldrd	r2, [sp, #24]
   1b150:	cmp	r3, fp
   1b154:	cmpeq	r2, sl
   1b158:	ldrd	r2, [sp, #16]
   1b15c:	orrhi	ip, ip, #1
   1b160:	cmp	fp, r3
   1b164:	ldr	r3, [sp, #32]
   1b168:	cmpeq	sl, r2
   1b16c:	add	r2, r3, r7
   1b170:	mov	r7, r2
   1b174:	mvncc	r7, #0
   1b178:	mvncc	r6, #0
   1b17c:	mul	r2, r1, r7
   1b180:	mov	sl, r6
   1b184:	strd	r6, [sp, #24]
   1b188:	mla	r0, lr, sl, r2
   1b18c:	ldrd	r2, [sp, #16]
   1b190:	ldrd	sl, [sp]
   1b194:	umull	r6, r7, r1, r6
   1b198:	cmp	fp, r3
   1b19c:	cmpeq	sl, r2
   1b1a0:	mov	r3, fp
   1b1a4:	mov	r2, sl
   1b1a8:	ldrd	sl, [sp, #24]
   1b1ac:	orrcc	ip, ip, #1
   1b1b0:	add	r7, r0, r7
   1b1b4:	cmp	r3, fp
   1b1b8:	cmpeq	r2, sl
   1b1bc:	mvncc	r6, #0
   1b1c0:	mvncc	r7, #0
   1b1c4:	umull	sl, fp, r1, r6
   1b1c8:	mul	r3, r1, r7
   1b1cc:	strd	sl, [sp, #16]
   1b1d0:	mla	r0, lr, r6, r3
   1b1d4:	ldrd	sl, [sp, #24]
   1b1d8:	ldrd	r2, [sp]
   1b1dc:	cmp	r3, fp
   1b1e0:	cmpeq	r2, sl
   1b1e4:	orrcc	ip, ip, #1
   1b1e8:	cmp	r3, r7
   1b1ec:	ldr	r3, [sp, #20]
   1b1f0:	cmpeq	r2, r6
   1b1f4:	add	r3, r0, r3
   1b1f8:	str	r3, [sp, #20]
   1b1fc:	mvncc	r2, #0
   1b200:	mvncc	r3, #0
   1b204:	ldrdcs	r2, [sp, #16]
   1b208:	ldrd	sl, [sp]
   1b20c:	mul	r0, r1, r3
   1b210:	cmp	fp, r7
   1b214:	str	r0, [sp, #16]
   1b218:	cmpeq	sl, r6
   1b21c:	ldr	r6, [sp, #16]
   1b220:	umull	r0, r1, r1, r2
   1b224:	mla	lr, lr, r2, r6
   1b228:	orrcc	ip, ip, #1
   1b22c:	cmp	r3, fp
   1b230:	cmpeq	r2, sl
   1b234:	add	r1, lr, r1
   1b238:	bls	1b244 <__assert_fail@plt+0x9d64>
   1b23c:	mvn	r0, #0
   1b240:	mov	r1, r0
   1b244:	cmp	r3, fp
   1b248:	cmpeq	r2, sl
   1b24c:	mov	r6, r0
   1b250:	mov	r7, r1
   1b254:	orrhi	ip, ip, #1
   1b258:	b	1aebc <__assert_fail@plt+0x99dc>
   1b25c:	ldrd	sl, [sp]
   1b260:	umull	r2, r3, r6, r1
   1b264:	mul	r0, r6, lr
   1b268:	cmp	r7, fp
   1b26c:	cmpeq	r6, sl
   1b270:	mvnhi	r2, #0
   1b274:	mla	r0, r1, r7, r0
   1b278:	umull	sl, fp, r1, r2
   1b27c:	add	r3, r0, r3
   1b280:	mvnhi	r3, #0
   1b284:	strd	sl, [sp, #16]
   1b288:	mul	r0, r1, r3
   1b28c:	ldrd	sl, [sp]
   1b290:	mla	r0, lr, r2, r0
   1b294:	ldr	ip, [sp, #20]
   1b298:	cmp	fp, r3
   1b29c:	add	r0, r0, ip
   1b2a0:	cmpeq	sl, r2
   1b2a4:	str	r0, [sp, #20]
   1b2a8:	mvncc	sl, #0
   1b2ac:	mvncc	fp, #0
   1b2b0:	strdcc	sl, [sp, #16]
   1b2b4:	ldrdcc	sl, [sp]
   1b2b8:	ldr	r0, [sp, #16]
   1b2bc:	cmp	fp, r3
   1b2c0:	cmpeq	sl, r2
   1b2c4:	mul	r0, lr, r0
   1b2c8:	ldr	r2, [sp, #20]
   1b2cc:	ldr	r3, [sp, #16]
   1b2d0:	movcc	ip, #1
   1b2d4:	movcs	ip, #0
   1b2d8:	cmp	r7, fp
   1b2dc:	cmpeq	r6, sl
   1b2e0:	ldrd	r6, [sp, #16]
   1b2e4:	mla	r0, r1, r2, r0
   1b2e8:	umull	r2, r3, r3, r1
   1b2ec:	orrhi	ip, ip, #1
   1b2f0:	cmp	r7, fp
   1b2f4:	cmpeq	r6, sl
   1b2f8:	add	r3, r0, r3
   1b2fc:	mvnhi	r3, #0
   1b300:	mvnhi	r2, #0
   1b304:	mul	r0, r1, r3
   1b308:	cmp	r7, fp
   1b30c:	str	r0, [sp, #24]
   1b310:	cmpeq	r6, sl
   1b314:	ldr	r6, [sp, #24]
   1b318:	umull	r0, r1, r1, r2
   1b31c:	mla	lr, lr, r2, r6
   1b320:	orrhi	ip, ip, #1
   1b324:	cmp	fp, r3
   1b328:	cmpeq	sl, r2
   1b32c:	mvncc	r0, #0
   1b330:	add	r1, lr, r1
   1b334:	movcc	r1, r0
   1b338:	b	1aea8 <__assert_fail@plt+0x99c8>
   1b33c:	cmp	r6, #0
   1b340:	sbcs	r3, r7, #0
   1b344:	blt	1b7dc <__assert_fail@plt+0xa2fc>
   1b348:	adds	r6, r6, r6
   1b34c:	adc	r7, r7, r7
   1b350:	mov	ip, #0
   1b354:	b	1aebc <__assert_fail@plt+0x99dc>
   1b358:	mov	ip, #0
   1b35c:	b	1aebc <__assert_fail@plt+0x99dc>
   1b360:	ldr	r3, [pc, #1396]	; 1b8dc <__assert_fail@plt+0xa3fc>
   1b364:	mvn	r2, #0
   1b368:	cmp	r7, r3
   1b36c:	cmpeq	r6, r2
   1b370:	bhi	1b7dc <__assert_fail@plt+0xa2fc>
   1b374:	lsl	r3, r7, #9
   1b378:	orr	r3, r3, r6, lsr #23
   1b37c:	lsl	r2, r6, #9
   1b380:	mov	r6, r2
   1b384:	mov	r7, r3
   1b388:	mov	ip, #0
   1b38c:	b	1aebc <__assert_fail@plt+0x99dc>
   1b390:	ldrd	sl, [sp]
   1b394:	umull	r2, r3, r6, r1
   1b398:	mul	r0, r6, lr
   1b39c:	cmp	r7, fp
   1b3a0:	cmpeq	r6, sl
   1b3a4:	mvnhi	r2, #0
   1b3a8:	mla	r0, r1, r7, r0
   1b3ac:	umull	sl, fp, r2, r1
   1b3b0:	add	r3, r0, r3
   1b3b4:	mul	r0, lr, r2
   1b3b8:	mvnhi	r3, #0
   1b3bc:	strd	sl, [sp, #16]
   1b3c0:	ldrd	sl, [sp]
   1b3c4:	mla	r0, r1, r3, r0
   1b3c8:	ldr	ip, [sp, #20]
   1b3cc:	cmp	r3, fp
   1b3d0:	add	r0, r0, ip
   1b3d4:	cmpeq	r2, sl
   1b3d8:	str	r0, [sp, #20]
   1b3dc:	mvnhi	sl, #0
   1b3e0:	mvnhi	fp, #0
   1b3e4:	strdhi	sl, [sp, #16]
   1b3e8:	ldrdhi	sl, [sp]
   1b3ec:	ldr	r0, [sp, #16]
   1b3f0:	cmp	r3, fp
   1b3f4:	ldr	r3, [sp, #20]
   1b3f8:	mul	r0, lr, r0
   1b3fc:	cmpeq	r2, sl
   1b400:	mla	r0, r1, r3, r0
   1b404:	ldr	r3, [sp, #16]
   1b408:	umull	r2, r3, r3, r1
   1b40c:	strd	r2, [sp, #24]
   1b410:	movhi	r3, #1
   1b414:	movls	r3, #0
   1b418:	cmp	r7, fp
   1b41c:	cmpeq	r6, sl
   1b420:	ldrd	r6, [sp, #16]
   1b424:	ldr	r2, [sp, #28]
   1b428:	movls	ip, r3
   1b42c:	orrhi	ip, r3, #1
   1b430:	cmp	r7, fp
   1b434:	add	r2, r0, r2
   1b438:	cmpeq	r6, sl
   1b43c:	str	r2, [sp, #28]
   1b440:	mvnhi	r2, #0
   1b444:	mvnhi	r3, #0
   1b448:	strdhi	r2, [sp, #24]
   1b44c:	ldrd	r6, [sp, #24]
   1b450:	mul	r2, lr, r6
   1b454:	umull	sl, fp, r6, r1
   1b458:	mla	r3, r1, r7, r2
   1b45c:	ldrd	r6, [sp]
   1b460:	str	r3, [sp, #32]
   1b464:	ldrd	r2, [sp, #16]
   1b468:	cmp	r3, r7
   1b46c:	cmpeq	r2, r6
   1b470:	ldrd	r2, [sp, #24]
   1b474:	orrhi	ip, ip, #1
   1b478:	cmp	r3, r7
   1b47c:	ldr	r3, [sp, #32]
   1b480:	cmpeq	r2, r6
   1b484:	add	r2, r3, fp
   1b488:	mov	fp, r2
   1b48c:	bhi	1b8a4 <__assert_fail@plt+0xa3c4>
   1b490:	strd	sl, [sp, #16]
   1b494:	mul	r2, lr, sl
   1b498:	umull	r6, r7, sl, r1
   1b49c:	mla	r3, r1, fp, r2
   1b4a0:	ldrd	sl, [sp]
   1b4a4:	str	r3, [sp, #32]
   1b4a8:	ldrd	r2, [sp, #24]
   1b4ac:	cmp	r3, fp
   1b4b0:	cmpeq	r2, sl
   1b4b4:	ldrd	r2, [sp, #16]
   1b4b8:	orrhi	ip, ip, #1
   1b4bc:	cmp	r3, fp
   1b4c0:	ldr	r3, [sp, #32]
   1b4c4:	cmpeq	r2, sl
   1b4c8:	add	r2, r3, r7
   1b4cc:	mov	r7, r2
   1b4d0:	mvnhi	r7, #0
   1b4d4:	mvnhi	r6, #0
   1b4d8:	mul	r2, r1, r7
   1b4dc:	mov	sl, r6
   1b4e0:	strd	r6, [sp, #24]
   1b4e4:	mla	r0, lr, sl, r2
   1b4e8:	ldrd	sl, [sp]
   1b4ec:	ldrd	r2, [sp, #16]
   1b4f0:	umull	r6, r7, r1, r6
   1b4f4:	cmp	r3, fp
   1b4f8:	cmpeq	r2, sl
   1b4fc:	mov	r3, ip
   1b500:	orrhi	r3, r3, #1
   1b504:	mov	r2, sl
   1b508:	str	r3, [sp, #16]
   1b50c:	mov	r3, fp
   1b510:	ldrd	sl, [sp, #24]
   1b514:	add	r7, r0, r7
   1b518:	cmp	r3, fp
   1b51c:	cmpeq	r2, sl
   1b520:	bcc	1afd0 <__assert_fail@plt+0x9af0>
   1b524:	mov	r2, r6
   1b528:	mov	r3, r7
   1b52c:	b	1afd8 <__assert_fail@plt+0x9af8>
   1b530:	ldrd	sl, [sp]
   1b534:	umull	r2, r3, r6, r1
   1b538:	mul	r0, r6, lr
   1b53c:	cmp	r7, fp
   1b540:	cmpeq	r6, sl
   1b544:	mvnhi	r2, #0
   1b548:	mla	r0, r1, r7, r0
   1b54c:	umull	sl, fp, r2, r1
   1b550:	add	r3, r0, r3
   1b554:	mul	r0, lr, r2
   1b558:	mvnhi	r3, #0
   1b55c:	strd	sl, [sp, #16]
   1b560:	ldrd	sl, [sp]
   1b564:	mla	r0, r1, r3, r0
   1b568:	ldr	ip, [sp, #20]
   1b56c:	cmp	r3, fp
   1b570:	add	r0, r0, ip
   1b574:	cmpeq	r2, sl
   1b578:	str	r0, [sp, #20]
   1b57c:	mvnhi	sl, #0
   1b580:	mvnhi	fp, #0
   1b584:	strdhi	sl, [sp, #16]
   1b588:	ldrdhi	sl, [sp]
   1b58c:	ldr	r0, [sp, #16]
   1b590:	cmp	r3, fp
   1b594:	ldr	ip, [sp, #20]
   1b598:	mul	r0, lr, r0
   1b59c:	ldr	r3, [sp, #16]
   1b5a0:	cmpeq	r2, sl
   1b5a4:	mla	r0, r1, ip, r0
   1b5a8:	umull	r2, r3, r3, r1
   1b5ac:	movhi	r1, #1
   1b5b0:	movls	r1, #0
   1b5b4:	cmp	r7, fp
   1b5b8:	cmpeq	r6, sl
   1b5bc:	ldrd	r6, [sp, #16]
   1b5c0:	movls	ip, r1
   1b5c4:	orrhi	ip, r1, #1
   1b5c8:	cmp	r7, fp
   1b5cc:	cmpeq	r6, sl
   1b5d0:	mvnhi	r2, #0
   1b5d4:	add	r3, r0, r3
   1b5d8:	movhi	r3, r2
   1b5dc:	cmp	r7, fp
   1b5e0:	cmpeq	r6, sl
   1b5e4:	mov	r7, r3
   1b5e8:	mov	r6, r2
   1b5ec:	orrhi	ip, ip, #1
   1b5f0:	b	1aebc <__assert_fail@plt+0x99dc>
   1b5f4:	ldrd	sl, [sp]
   1b5f8:	umull	r2, r3, r6, r1
   1b5fc:	mul	r0, r6, lr
   1b600:	cmp	r7, fp
   1b604:	cmpeq	r6, sl
   1b608:	mvnhi	r2, #0
   1b60c:	mla	r0, r1, r7, r0
   1b610:	umull	sl, fp, r1, r2
   1b614:	add	r3, r0, r3
   1b618:	mvnhi	r3, #0
   1b61c:	strd	sl, [sp, #16]
   1b620:	mul	r0, r1, r3
   1b624:	ldrd	sl, [sp]
   1b628:	mla	r0, lr, r2, r0
   1b62c:	ldr	ip, [sp, #20]
   1b630:	cmp	fp, r3
   1b634:	add	r0, r0, ip
   1b638:	cmpeq	sl, r2
   1b63c:	str	r0, [sp, #20]
   1b640:	mvncc	sl, #0
   1b644:	mvncc	fp, #0
   1b648:	strdcc	sl, [sp, #16]
   1b64c:	ldrdcc	sl, [sp]
   1b650:	ldr	r0, [sp, #16]
   1b654:	cmp	fp, r3
   1b658:	ldr	r3, [sp, #20]
   1b65c:	mul	r0, lr, r0
   1b660:	cmpeq	sl, r2
   1b664:	mla	r0, r1, r3, r0
   1b668:	ldr	r3, [sp, #16]
   1b66c:	umull	r2, r3, r3, r1
   1b670:	strd	r2, [sp, #24]
   1b674:	movcc	r3, #1
   1b678:	movcs	r3, #0
   1b67c:	cmp	r7, fp
   1b680:	cmpeq	r6, sl
   1b684:	movls	ip, r3
   1b688:	orrhi	ip, r3, #1
   1b68c:	ldrd	r2, [sp, #16]
   1b690:	cmp	r3, fp
   1b694:	ldr	r3, [sp, #28]
   1b698:	cmpeq	r2, sl
   1b69c:	add	r3, r0, r3
   1b6a0:	str	r3, [sp, #28]
   1b6a4:	bhi	1b85c <__assert_fail@plt+0xa37c>
   1b6a8:	ldrd	r2, [sp, #24]
   1b6ac:	mov	sl, r2
   1b6b0:	mov	fp, r3
   1b6b4:	mul	r2, lr, sl
   1b6b8:	umull	r6, r7, sl, r1
   1b6bc:	mla	r0, r1, fp, r2
   1b6c0:	ldrd	r2, [sp]
   1b6c4:	add	r7, r0, r7
   1b6c8:	mov	sl, r2
   1b6cc:	mov	fp, r3
   1b6d0:	strd	r2, [sp, #32]
   1b6d4:	ldrd	r2, [sp, #16]
   1b6d8:	cmp	r3, fp
   1b6dc:	cmpeq	r2, sl
   1b6e0:	ldrd	r2, [sp, #32]
   1b6e4:	ldrd	sl, [sp, #24]
   1b6e8:	orrhi	ip, ip, #1
   1b6ec:	cmp	fp, r3
   1b6f0:	cmpeq	sl, r2
   1b6f4:	mvnhi	r6, #0
   1b6f8:	mvnhi	r7, #0
   1b6fc:	umull	sl, fp, r6, r1
   1b700:	mul	r3, lr, r6
   1b704:	strd	sl, [sp, #16]
   1b708:	mla	r0, r1, r7, r3
   1b70c:	ldrd	sl, [sp, #24]
   1b710:	ldrd	r2, [sp]
   1b714:	cmp	fp, r3
   1b718:	cmpeq	sl, r2
   1b71c:	orrhi	ip, ip, #1
   1b720:	cmp	r7, r3
   1b724:	ldr	r3, [sp, #20]
   1b728:	cmpeq	r6, r2
   1b72c:	add	r3, r0, r3
   1b730:	str	r3, [sp, #20]
   1b734:	mvnhi	r2, #0
   1b738:	mvnhi	r3, #0
   1b73c:	ldrdls	r2, [sp, #16]
   1b740:	ldrd	sl, [sp]
   1b744:	mul	r0, r1, r3
   1b748:	cmp	r7, fp
   1b74c:	str	r0, [sp, #16]
   1b750:	cmpeq	r6, sl
   1b754:	ldr	r6, [sp, #16]
   1b758:	umull	r0, r1, r1, r2
   1b75c:	mla	lr, lr, r2, r6
   1b760:	orrhi	ip, ip, #1
   1b764:	cmp	r3, fp
   1b768:	cmpeq	r2, sl
   1b76c:	add	r1, lr, r1
   1b770:	bls	1b244 <__assert_fail@plt+0x9d64>
   1b774:	b	1b23c <__assert_fail@plt+0x9d5c>
   1b778:	ldr	r3, [pc, #344]	; 1b8d8 <__assert_fail@plt+0xa3f8>
   1b77c:	mvn	r2, #0
   1b780:	cmp	r7, r3
   1b784:	cmpeq	r6, r2
   1b788:	bhi	1b7dc <__assert_fail@plt+0xa2fc>
   1b78c:	lsl	r3, r7, #10
   1b790:	orr	r3, r3, r6, lsr #22
   1b794:	lsl	r2, r6, #10
   1b798:	mov	r6, r2
   1b79c:	mov	r7, r3
   1b7a0:	mov	ip, #0
   1b7a4:	b	1aebc <__assert_fail@plt+0x99dc>
   1b7a8:	strd	r6, [r8]
   1b7ac:	orr	r4, r4, #2
   1b7b0:	b	1ab8c <__assert_fail@plt+0x96ac>
   1b7b4:	ldrd	r2, [sp]
   1b7b8:	cmp	r7, r3
   1b7bc:	cmpeq	r6, r2
   1b7c0:	bhi	1b7dc <__assert_fail@plt+0xa2fc>
   1b7c4:	mul	r3, r6, lr
   1b7c8:	mov	ip, #0
   1b7cc:	mla	r3, r1, r7, r3
   1b7d0:	umull	r6, r7, r6, r1
   1b7d4:	add	r7, r3, r7
   1b7d8:	b	1aebc <__assert_fail@plt+0x99dc>
   1b7dc:	mvn	r6, #0
   1b7e0:	mvn	r7, #0
   1b7e4:	mov	ip, #1
   1b7e8:	b	1aebc <__assert_fail@plt+0x99dc>
   1b7ec:	ldrb	r3, [r9, #2]
   1b7f0:	mvn	r2, #0
   1b7f4:	mov	r1, #1024	; 0x400
   1b7f8:	cmp	r3, #66	; 0x42
   1b7fc:	ldr	r3, [pc, #212]	; 1b8d8 <__assert_fail@plt+0xa3f8>
   1b800:	mov	lr, #0
   1b804:	strd	r2, [sp]
   1b808:	moveq	r3, #3
   1b80c:	streq	r3, [sp, #12]
   1b810:	movne	r3, #1
   1b814:	strne	r3, [sp, #12]
   1b818:	b	1ad68 <__assert_fail@plt+0x9888>
   1b81c:	add	r3, pc, #172	; 0xac
   1b820:	ldrd	r2, [r3]
   1b824:	mov	r1, #1000	; 0x3e8
   1b828:	mov	lr, #0
   1b82c:	strd	r2, [sp]
   1b830:	mov	r3, #2
   1b834:	str	r3, [sp, #12]
   1b838:	b	1ad68 <__assert_fail@plt+0x9888>
   1b83c:	ldr	r3, [pc, #148]	; 1b8d8 <__assert_fail@plt+0xa3f8>
   1b840:	mvn	r2, #0
   1b844:	mov	lr, r0
   1b848:	strd	r2, [sp]
   1b84c:	mov	r3, #1
   1b850:	mov	r1, #1024	; 0x400
   1b854:	str	r3, [sp, #12]
   1b858:	b	1ad68 <__assert_fail@plt+0x9888>
   1b85c:	mvn	r2, #0
   1b860:	mvn	r3, #0
   1b864:	mov	sl, r2
   1b868:	strd	r2, [sp, #24]
   1b86c:	mov	fp, r3
   1b870:	b	1b6b4 <__assert_fail@plt+0xa1d4>
   1b874:	mvn	r2, #0
   1b878:	mvn	r3, #0
   1b87c:	mov	sl, r2
   1b880:	strd	r2, [sp, #16]
   1b884:	mov	fp, r3
   1b888:	b	1b138 <__assert_fail@plt+0x9c58>
   1b88c:	mvn	r2, #0
   1b890:	mvn	r3, #0
   1b894:	mov	sl, r2
   1b898:	strd	r2, [sp, #24]
   1b89c:	mov	fp, r3
   1b8a0:	b	1af90 <__assert_fail@plt+0x9ab0>
   1b8a4:	mvn	r2, #0
   1b8a8:	mvn	r3, #0
   1b8ac:	mov	sl, r2
   1b8b0:	strd	r2, [sp, #16]
   1b8b4:	mov	fp, r3
   1b8b8:	b	1b494 <__assert_fail@plt+0x9fb4>
   1b8bc:	ldr	r3, [pc, #28]	; 1b8e0 <__assert_fail@plt+0xa400>
   1b8c0:	mov	r2, #85	; 0x55
   1b8c4:	ldr	r1, [pc, #24]	; 1b8e4 <__assert_fail@plt+0xa404>
   1b8c8:	ldr	r0, [pc, #24]	; 1b8e8 <__assert_fail@plt+0xa408>
   1b8cc:	bl	114e0 <__assert_fail@plt>
   1b8d0:	blmi	ff1c5894 <optarg@@GLIBC_2.4+0xff19752c>
   1b8d4:	subeq	r8, r1, r7, lsr r9
   1b8d8:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1b8dc:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1b8e0:	andeq	sp, r1, r4, ror #21
   1b8e4:	strdeq	sp, [r1], -r0
   1b8e8:	andeq	sp, r1, r0, lsl #22
   1b8ec:	cmp	r1, #0
   1b8f0:	cmpne	r0, #0
   1b8f4:	moveq	r1, #1
   1b8f8:	moveq	r0, r1
   1b8fc:	umull	r2, r3, r0, r1
   1b900:	adds	r3, r3, #0
   1b904:	movne	r3, #1
   1b908:	cmp	r2, #0
   1b90c:	blt	1b91c <__assert_fail@plt+0xa43c>
   1b910:	cmp	r3, #0
   1b914:	bne	1b91c <__assert_fail@plt+0xa43c>
   1b918:	b	11144 <calloc@plt>
   1b91c:	push	{r4, lr}
   1b920:	bl	1139c <__errno_location@plt>
   1b924:	mov	r3, #12
   1b928:	str	r3, [r0]
   1b92c:	mov	r0, #0
   1b930:	pop	{r4, pc}
   1b934:	cmp	r0, #0
   1b938:	moveq	r0, #1
   1b93c:	cmp	r0, #0
   1b940:	blt	1b948 <__assert_fail@plt+0xa468>
   1b944:	b	112f4 <malloc@plt>
   1b948:	push	{r4, lr}
   1b94c:	bl	1139c <__errno_location@plt>
   1b950:	mov	r3, #12
   1b954:	str	r3, [r0]
   1b958:	mov	r0, #0
   1b95c:	pop	{r4, pc}
   1b960:	cmp	r0, #0
   1b964:	beq	1b988 <__assert_fail@plt+0xa4a8>
   1b968:	cmp	r1, #0
   1b96c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b970:	sub	sp, sp, #12
   1b974:	beq	1b990 <__assert_fail@plt+0xa4b0>
   1b978:	blt	1b9a8 <__assert_fail@plt+0xa4c8>
   1b97c:	add	sp, sp, #12
   1b980:	pop	{lr}		; (ldr lr, [sp], #4)
   1b984:	b	11234 <realloc@plt>
   1b988:	mov	r0, r1
   1b98c:	b	1b934 <__assert_fail@plt+0xa454>
   1b990:	str	r1, [sp, #4]
   1b994:	bl	15238 <__assert_fail@plt+0x3d58>
   1b998:	ldr	r3, [sp, #4]
   1b99c:	mov	r0, r3
   1b9a0:	add	sp, sp, #12
   1b9a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9a8:	bl	1139c <__errno_location@plt>
   1b9ac:	mov	r2, #12
   1b9b0:	mov	r3, #0
   1b9b4:	str	r2, [r0]
   1b9b8:	b	1b99c <__assert_fail@plt+0xa4bc>
   1b9bc:	push	{r4, r5, r6, lr}
   1b9c0:	mov	r4, r0
   1b9c4:	bl	112b8 <__fpending@plt>
   1b9c8:	ldr	r5, [r4]
   1b9cc:	and	r5, r5, #32
   1b9d0:	mov	r6, r0
   1b9d4:	mov	r0, r4
   1b9d8:	bl	1509c <__assert_fail@plt+0x3bbc>
   1b9dc:	cmp	r5, #0
   1b9e0:	mov	r4, r0
   1b9e4:	bne	1ba04 <__assert_fail@plt+0xa524>
   1b9e8:	cmp	r0, #0
   1b9ec:	beq	1b9fc <__assert_fail@plt+0xa51c>
   1b9f0:	cmp	r6, #0
   1b9f4:	beq	1ba20 <__assert_fail@plt+0xa540>
   1b9f8:	mvn	r4, #0
   1b9fc:	mov	r0, r4
   1ba00:	pop	{r4, r5, r6, pc}
   1ba04:	cmp	r0, #0
   1ba08:	bne	1b9f8 <__assert_fail@plt+0xa518>
   1ba0c:	bl	1139c <__errno_location@plt>
   1ba10:	str	r4, [r0]
   1ba14:	mvn	r4, #0
   1ba18:	mov	r0, r4
   1ba1c:	pop	{r4, r5, r6, pc}
   1ba20:	bl	1139c <__errno_location@plt>
   1ba24:	ldr	r4, [r0]
   1ba28:	subs	r4, r4, #9
   1ba2c:	mvnne	r4, #0
   1ba30:	mov	r0, r4
   1ba34:	pop	{r4, r5, r6, pc}
   1ba38:	push	{r4, lr}
   1ba3c:	mov	r0, #14
   1ba40:	bl	11474 <nl_langinfo@plt>
   1ba44:	cmp	r0, #0
   1ba48:	beq	1ba60 <__assert_fail@plt+0xa580>
   1ba4c:	ldrb	r2, [r0]
   1ba50:	ldr	r3, [pc, #16]	; 1ba68 <__assert_fail@plt+0xa588>
   1ba54:	cmp	r2, #0
   1ba58:	moveq	r0, r3
   1ba5c:	pop	{r4, pc}
   1ba60:	ldr	r0, [pc]	; 1ba68 <__assert_fail@plt+0xa588>
   1ba64:	pop	{r4, pc}
   1ba68:	andeq	sp, r1, r8, lsr #22
   1ba6c:	push	{r4, r5, r6, r7, lr}
   1ba70:	subs	r6, r0, #0
   1ba74:	sub	sp, sp, #12
   1ba78:	addeq	r6, sp, #4
   1ba7c:	mov	r0, r6
   1ba80:	mov	r5, r2
   1ba84:	mov	r7, r1
   1ba88:	bl	112c4 <mbrtowc@plt>
   1ba8c:	cmp	r5, #0
   1ba90:	cmnne	r0, #3
   1ba94:	mov	r4, r0
   1ba98:	bls	1bab4 <__assert_fail@plt+0xa5d4>
   1ba9c:	mov	r0, #0
   1baa0:	bl	1bcec <__assert_fail@plt+0xa80c>
   1baa4:	cmp	r0, #0
   1baa8:	moveq	r4, #1
   1baac:	ldrbeq	r3, [r7]
   1bab0:	streq	r3, [r6]
   1bab4:	mov	r0, r4
   1bab8:	add	sp, sp, #12
   1babc:	pop	{r4, r5, r6, r7, pc}
   1bac0:	push	{r4, r5, r6, lr}
   1bac4:	subs	r4, r2, #0
   1bac8:	mov	r6, r0
   1bacc:	mov	r5, r1
   1bad0:	beq	1bafc <__assert_fail@plt+0xa61c>
   1bad4:	mov	r1, r4
   1bad8:	mvn	r0, #0
   1badc:	bl	1bde0 <__assert_fail@plt+0xa900>
   1bae0:	cmp	r0, r5
   1bae4:	bcs	1bafc <__assert_fail@plt+0xa61c>
   1bae8:	bl	1139c <__errno_location@plt>
   1baec:	mov	r3, #12
   1baf0:	str	r3, [r0]
   1baf4:	mov	r0, #0
   1baf8:	pop	{r4, r5, r6, pc}
   1bafc:	mul	r1, r5, r4
   1bb00:	mov	r0, r6
   1bb04:	pop	{r4, r5, r6, lr}
   1bb08:	b	1b960 <__assert_fail@plt+0xa480>
   1bb0c:	mov	r2, #3
   1bb10:	mov	r1, #0
   1bb14:	b	1bb18 <__assert_fail@plt+0xa638>
   1bb18:	push	{r1, r2, r3}
   1bb1c:	push	{r4, r5, r6, r7, lr}
   1bb20:	sub	sp, sp, #8
   1bb24:	add	r3, sp, #32
   1bb28:	ldr	r1, [sp, #28]
   1bb2c:	str	r3, [sp, #4]
   1bb30:	cmp	r1, #0
   1bb34:	beq	1bbcc <__assert_fail@plt+0xa6ec>
   1bb38:	ldr	r2, [pc, #412]	; 1bcdc <__assert_fail@plt+0xa7fc>
   1bb3c:	mov	r5, r0
   1bb40:	cmp	r1, r2
   1bb44:	bne	1bb90 <__assert_fail@plt+0xa6b0>
   1bb48:	ldr	r6, [pc, #400]	; 1bce0 <__assert_fail@plt+0xa800>
   1bb4c:	ldr	r7, [r3]
   1bb50:	add	r2, sp, #36	; 0x24
   1bb54:	ldr	r3, [r6]
   1bb58:	str	r2, [sp, #4]
   1bb5c:	cmp	r3, #0
   1bb60:	mov	r2, r7
   1bb64:	blt	1bc90 <__assert_fail@plt+0xa7b0>
   1bb68:	bl	1142c <fcntl64@plt>
   1bb6c:	subs	r4, r0, #0
   1bb70:	blt	1bc14 <__assert_fail@plt+0xa734>
   1bb74:	mov	r3, #1
   1bb78:	str	r3, [r6]
   1bb7c:	mov	r0, r4
   1bb80:	add	sp, sp, #8
   1bb84:	pop	{r4, r5, r6, r7, lr}
   1bb88:	add	sp, sp, #12
   1bb8c:	bx	lr
   1bb90:	cmp	r1, #11
   1bb94:	beq	1bbbc <__assert_fail@plt+0xa6dc>
   1bb98:	bgt	1bbdc <__assert_fail@plt+0xa6fc>
   1bb9c:	cmp	r1, #3
   1bba0:	beq	1bbbc <__assert_fail@plt+0xa6dc>
   1bba4:	ble	1bcd0 <__assert_fail@plt+0xa7f0>
   1bba8:	cmp	r1, #8
   1bbac:	beq	1bbfc <__assert_fail@plt+0xa71c>
   1bbb0:	ble	1bbfc <__assert_fail@plt+0xa71c>
   1bbb4:	cmp	r1, #9
   1bbb8:	bne	1bbfc <__assert_fail@plt+0xa71c>
   1bbbc:	mov	r0, r5
   1bbc0:	bl	1142c <fcntl64@plt>
   1bbc4:	mov	r4, r0
   1bbc8:	b	1bb7c <__assert_fail@plt+0xa69c>
   1bbcc:	ldr	r2, [sp, #32]
   1bbd0:	bl	1142c <fcntl64@plt>
   1bbd4:	mov	r4, r0
   1bbd8:	b	1bb7c <__assert_fail@plt+0xa69c>
   1bbdc:	ldr	r3, [pc, #256]	; 1bce4 <__assert_fail@plt+0xa804>
   1bbe0:	cmp	r1, r3
   1bbe4:	bgt	1bcb0 <__assert_fail@plt+0xa7d0>
   1bbe8:	cmp	r1, r2
   1bbec:	bge	1bbfc <__assert_fail@plt+0xa71c>
   1bbf0:	sub	r3, r3, #6
   1bbf4:	cmp	r1, r3
   1bbf8:	beq	1bbbc <__assert_fail@plt+0xa6dc>
   1bbfc:	ldr	r3, [sp, #4]
   1bc00:	mov	r0, r5
   1bc04:	ldr	r2, [r3]
   1bc08:	bl	1142c <fcntl64@plt>
   1bc0c:	mov	r4, r0
   1bc10:	b	1bb7c <__assert_fail@plt+0xa69c>
   1bc14:	bl	1139c <__errno_location@plt>
   1bc18:	ldr	r3, [r0]
   1bc1c:	cmp	r3, #22
   1bc20:	bne	1bb74 <__assert_fail@plt+0xa694>
   1bc24:	mov	r2, r7
   1bc28:	mov	r0, r5
   1bc2c:	mov	r1, #0
   1bc30:	bl	1142c <fcntl64@plt>
   1bc34:	subs	r4, r0, #0
   1bc38:	blt	1bb7c <__assert_fail@plt+0xa69c>
   1bc3c:	mvn	r3, #0
   1bc40:	str	r3, [r6]
   1bc44:	mov	r1, #1
   1bc48:	mov	r0, r4
   1bc4c:	bl	1142c <fcntl64@plt>
   1bc50:	subs	r2, r0, #0
   1bc54:	blt	1bc70 <__assert_fail@plt+0xa790>
   1bc58:	orr	r2, r2, #1
   1bc5c:	mov	r1, #2
   1bc60:	mov	r0, r4
   1bc64:	bl	1142c <fcntl64@plt>
   1bc68:	cmn	r0, #1
   1bc6c:	bne	1bb7c <__assert_fail@plt+0xa69c>
   1bc70:	bl	1139c <__errno_location@plt>
   1bc74:	mov	r5, r0
   1bc78:	mov	r0, r4
   1bc7c:	ldr	r6, [r5]
   1bc80:	mvn	r4, #0
   1bc84:	bl	114c8 <close@plt>
   1bc88:	str	r6, [r5]
   1bc8c:	b	1bb7c <__assert_fail@plt+0xa69c>
   1bc90:	mov	r1, #0
   1bc94:	bl	1142c <fcntl64@plt>
   1bc98:	subs	r4, r0, #0
   1bc9c:	blt	1bb7c <__assert_fail@plt+0xa69c>
   1bca0:	ldr	r3, [r6]
   1bca4:	cmn	r3, #1
   1bca8:	beq	1bc44 <__assert_fail@plt+0xa764>
   1bcac:	b	1bb7c <__assert_fail@plt+0xa69c>
   1bcb0:	ldr	r3, [pc, #48]	; 1bce8 <__assert_fail@plt+0xa808>
   1bcb4:	cmp	r1, r3
   1bcb8:	beq	1bbfc <__assert_fail@plt+0xa71c>
   1bcbc:	blt	1bbbc <__assert_fail@plt+0xa6dc>
   1bcc0:	add	r3, r3, #1
   1bcc4:	cmp	r1, r3
   1bcc8:	bne	1bbfc <__assert_fail@plt+0xa71c>
   1bccc:	b	1bbbc <__assert_fail@plt+0xa6dc>
   1bcd0:	cmp	r1, #1
   1bcd4:	bne	1bbfc <__assert_fail@plt+0xa71c>
   1bcd8:	b	1bbbc <__assert_fail@plt+0xa6dc>
   1bcdc:	andeq	r0, r0, r6, lsl #8
   1bce0:	andeq	lr, r2, r0, ror #12
   1bce4:	andeq	r0, r0, r7, lsl #8
   1bce8:	andeq	r0, r0, r9, lsl #8
   1bcec:	push	{lr}		; (str lr, [sp, #-4]!)
   1bcf0:	sub	sp, sp, #268	; 0x10c
   1bcf4:	add	r1, sp, #4
   1bcf8:	ldr	r2, [pc, #60]	; 1bd3c <__assert_fail@plt+0xa85c>
   1bcfc:	bl	1bd48 <__assert_fail@plt+0xa868>
   1bd00:	cmp	r0, #0
   1bd04:	movne	r0, #0
   1bd08:	bne	1bd34 <__assert_fail@plt+0xa854>
   1bd0c:	ldr	r1, [pc, #44]	; 1bd40 <__assert_fail@plt+0xa860>
   1bd10:	add	r0, sp, #4
   1bd14:	bl	11168 <strcmp@plt>
   1bd18:	cmp	r0, #0
   1bd1c:	beq	1bd34 <__assert_fail@plt+0xa854>
   1bd20:	add	r0, sp, #4
   1bd24:	ldr	r1, [pc, #24]	; 1bd44 <__assert_fail@plt+0xa864>
   1bd28:	bl	11168 <strcmp@plt>
   1bd2c:	adds	r0, r0, #0
   1bd30:	movne	r0, #1
   1bd34:	add	sp, sp, #268	; 0x10c
   1bd38:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd3c:	andeq	r0, r0, r1, lsl #2
   1bd40:	andeq	sp, r1, r0, lsr fp
   1bd44:	andeq	sp, r1, r4, lsr fp
   1bd48:	push	{r4, r5, r6, lr}
   1bd4c:	mov	r5, r1
   1bd50:	mov	r1, #0
   1bd54:	mov	r4, r2
   1bd58:	bl	11438 <setlocale@plt>
   1bd5c:	subs	r6, r0, #0
   1bd60:	beq	1bdbc <__assert_fail@plt+0xa8dc>
   1bd64:	bl	11354 <strlen@plt>
   1bd68:	cmp	r4, r0
   1bd6c:	bhi	1bda4 <__assert_fail@plt+0xa8c4>
   1bd70:	cmp	r4, #0
   1bd74:	bne	1bd80 <__assert_fail@plt+0xa8a0>
   1bd78:	mov	r0, #34	; 0x22
   1bd7c:	pop	{r4, r5, r6, pc}
   1bd80:	sub	r4, r4, #1
   1bd84:	mov	r1, r6
   1bd88:	mov	r2, r4
   1bd8c:	mov	r0, r5
   1bd90:	bl	111c8 <memcpy@plt>
   1bd94:	mov	r3, #0
   1bd98:	strb	r3, [r5, r4]
   1bd9c:	mov	r0, #34	; 0x22
   1bda0:	pop	{r4, r5, r6, pc}
   1bda4:	add	r2, r0, #1
   1bda8:	mov	r1, r6
   1bdac:	mov	r0, r5
   1bdb0:	bl	111c8 <memcpy@plt>
   1bdb4:	mov	r0, #0
   1bdb8:	pop	{r4, r5, r6, pc}
   1bdbc:	cmp	r4, #0
   1bdc0:	beq	1bdd0 <__assert_fail@plt+0xa8f0>
   1bdc4:	strb	r6, [r5]
   1bdc8:	mov	r0, #22
   1bdcc:	pop	{r4, r5, r6, pc}
   1bdd0:	mov	r0, #22
   1bdd4:	pop	{r4, r5, r6, pc}
   1bdd8:	mov	r1, #0
   1bddc:	b	11438 <setlocale@plt>
   1bde0:	subs	r2, r1, #1
   1bde4:	bxeq	lr
   1bde8:	bcc	1bfc0 <__assert_fail@plt+0xaae0>
   1bdec:	cmp	r0, r1
   1bdf0:	bls	1bfa4 <__assert_fail@plt+0xaac4>
   1bdf4:	tst	r1, r2
   1bdf8:	beq	1bfb0 <__assert_fail@plt+0xaad0>
   1bdfc:	clz	r3, r0
   1be00:	clz	r2, r1
   1be04:	sub	r3, r2, r3
   1be08:	rsbs	r3, r3, #31
   1be0c:	addne	r3, r3, r3, lsl #1
   1be10:	mov	r2, #0
   1be14:	addne	pc, pc, r3, lsl #2
   1be18:	nop			; (mov r0, r0)
   1be1c:	cmp	r0, r1, lsl #31
   1be20:	adc	r2, r2, r2
   1be24:	subcs	r0, r0, r1, lsl #31
   1be28:	cmp	r0, r1, lsl #30
   1be2c:	adc	r2, r2, r2
   1be30:	subcs	r0, r0, r1, lsl #30
   1be34:	cmp	r0, r1, lsl #29
   1be38:	adc	r2, r2, r2
   1be3c:	subcs	r0, r0, r1, lsl #29
   1be40:	cmp	r0, r1, lsl #28
   1be44:	adc	r2, r2, r2
   1be48:	subcs	r0, r0, r1, lsl #28
   1be4c:	cmp	r0, r1, lsl #27
   1be50:	adc	r2, r2, r2
   1be54:	subcs	r0, r0, r1, lsl #27
   1be58:	cmp	r0, r1, lsl #26
   1be5c:	adc	r2, r2, r2
   1be60:	subcs	r0, r0, r1, lsl #26
   1be64:	cmp	r0, r1, lsl #25
   1be68:	adc	r2, r2, r2
   1be6c:	subcs	r0, r0, r1, lsl #25
   1be70:	cmp	r0, r1, lsl #24
   1be74:	adc	r2, r2, r2
   1be78:	subcs	r0, r0, r1, lsl #24
   1be7c:	cmp	r0, r1, lsl #23
   1be80:	adc	r2, r2, r2
   1be84:	subcs	r0, r0, r1, lsl #23
   1be88:	cmp	r0, r1, lsl #22
   1be8c:	adc	r2, r2, r2
   1be90:	subcs	r0, r0, r1, lsl #22
   1be94:	cmp	r0, r1, lsl #21
   1be98:	adc	r2, r2, r2
   1be9c:	subcs	r0, r0, r1, lsl #21
   1bea0:	cmp	r0, r1, lsl #20
   1bea4:	adc	r2, r2, r2
   1bea8:	subcs	r0, r0, r1, lsl #20
   1beac:	cmp	r0, r1, lsl #19
   1beb0:	adc	r2, r2, r2
   1beb4:	subcs	r0, r0, r1, lsl #19
   1beb8:	cmp	r0, r1, lsl #18
   1bebc:	adc	r2, r2, r2
   1bec0:	subcs	r0, r0, r1, lsl #18
   1bec4:	cmp	r0, r1, lsl #17
   1bec8:	adc	r2, r2, r2
   1becc:	subcs	r0, r0, r1, lsl #17
   1bed0:	cmp	r0, r1, lsl #16
   1bed4:	adc	r2, r2, r2
   1bed8:	subcs	r0, r0, r1, lsl #16
   1bedc:	cmp	r0, r1, lsl #15
   1bee0:	adc	r2, r2, r2
   1bee4:	subcs	r0, r0, r1, lsl #15
   1bee8:	cmp	r0, r1, lsl #14
   1beec:	adc	r2, r2, r2
   1bef0:	subcs	r0, r0, r1, lsl #14
   1bef4:	cmp	r0, r1, lsl #13
   1bef8:	adc	r2, r2, r2
   1befc:	subcs	r0, r0, r1, lsl #13
   1bf00:	cmp	r0, r1, lsl #12
   1bf04:	adc	r2, r2, r2
   1bf08:	subcs	r0, r0, r1, lsl #12
   1bf0c:	cmp	r0, r1, lsl #11
   1bf10:	adc	r2, r2, r2
   1bf14:	subcs	r0, r0, r1, lsl #11
   1bf18:	cmp	r0, r1, lsl #10
   1bf1c:	adc	r2, r2, r2
   1bf20:	subcs	r0, r0, r1, lsl #10
   1bf24:	cmp	r0, r1, lsl #9
   1bf28:	adc	r2, r2, r2
   1bf2c:	subcs	r0, r0, r1, lsl #9
   1bf30:	cmp	r0, r1, lsl #8
   1bf34:	adc	r2, r2, r2
   1bf38:	subcs	r0, r0, r1, lsl #8
   1bf3c:	cmp	r0, r1, lsl #7
   1bf40:	adc	r2, r2, r2
   1bf44:	subcs	r0, r0, r1, lsl #7
   1bf48:	cmp	r0, r1, lsl #6
   1bf4c:	adc	r2, r2, r2
   1bf50:	subcs	r0, r0, r1, lsl #6
   1bf54:	cmp	r0, r1, lsl #5
   1bf58:	adc	r2, r2, r2
   1bf5c:	subcs	r0, r0, r1, lsl #5
   1bf60:	cmp	r0, r1, lsl #4
   1bf64:	adc	r2, r2, r2
   1bf68:	subcs	r0, r0, r1, lsl #4
   1bf6c:	cmp	r0, r1, lsl #3
   1bf70:	adc	r2, r2, r2
   1bf74:	subcs	r0, r0, r1, lsl #3
   1bf78:	cmp	r0, r1, lsl #2
   1bf7c:	adc	r2, r2, r2
   1bf80:	subcs	r0, r0, r1, lsl #2
   1bf84:	cmp	r0, r1, lsl #1
   1bf88:	adc	r2, r2, r2
   1bf8c:	subcs	r0, r0, r1, lsl #1
   1bf90:	cmp	r0, r1
   1bf94:	adc	r2, r2, r2
   1bf98:	subcs	r0, r0, r1
   1bf9c:	mov	r0, r2
   1bfa0:	bx	lr
   1bfa4:	moveq	r0, #1
   1bfa8:	movne	r0, #0
   1bfac:	bx	lr
   1bfb0:	clz	r2, r1
   1bfb4:	rsb	r2, r2, #31
   1bfb8:	lsr	r0, r0, r2
   1bfbc:	bx	lr
   1bfc0:	cmp	r0, #0
   1bfc4:	mvnne	r0, #0
   1bfc8:	b	1c268 <__assert_fail@plt+0xad88>
   1bfcc:	cmp	r1, #0
   1bfd0:	beq	1bfc0 <__assert_fail@plt+0xaae0>
   1bfd4:	push	{r0, r1, lr}
   1bfd8:	bl	1bde0 <__assert_fail@plt+0xa900>
   1bfdc:	pop	{r1, r2, lr}
   1bfe0:	mul	r3, r2, r0
   1bfe4:	sub	r1, r1, r3
   1bfe8:	bx	lr
   1bfec:	cmp	r1, #0
   1bff0:	beq	1c1fc <__assert_fail@plt+0xad1c>
   1bff4:	eor	ip, r0, r1
   1bff8:	rsbmi	r1, r1, #0
   1bffc:	subs	r2, r1, #1
   1c000:	beq	1c1c8 <__assert_fail@plt+0xace8>
   1c004:	movs	r3, r0
   1c008:	rsbmi	r3, r0, #0
   1c00c:	cmp	r3, r1
   1c010:	bls	1c1d4 <__assert_fail@plt+0xacf4>
   1c014:	tst	r1, r2
   1c018:	beq	1c1e4 <__assert_fail@plt+0xad04>
   1c01c:	clz	r2, r3
   1c020:	clz	r0, r1
   1c024:	sub	r2, r0, r2
   1c028:	rsbs	r2, r2, #31
   1c02c:	addne	r2, r2, r2, lsl #1
   1c030:	mov	r0, #0
   1c034:	addne	pc, pc, r2, lsl #2
   1c038:	nop			; (mov r0, r0)
   1c03c:	cmp	r3, r1, lsl #31
   1c040:	adc	r0, r0, r0
   1c044:	subcs	r3, r3, r1, lsl #31
   1c048:	cmp	r3, r1, lsl #30
   1c04c:	adc	r0, r0, r0
   1c050:	subcs	r3, r3, r1, lsl #30
   1c054:	cmp	r3, r1, lsl #29
   1c058:	adc	r0, r0, r0
   1c05c:	subcs	r3, r3, r1, lsl #29
   1c060:	cmp	r3, r1, lsl #28
   1c064:	adc	r0, r0, r0
   1c068:	subcs	r3, r3, r1, lsl #28
   1c06c:	cmp	r3, r1, lsl #27
   1c070:	adc	r0, r0, r0
   1c074:	subcs	r3, r3, r1, lsl #27
   1c078:	cmp	r3, r1, lsl #26
   1c07c:	adc	r0, r0, r0
   1c080:	subcs	r3, r3, r1, lsl #26
   1c084:	cmp	r3, r1, lsl #25
   1c088:	adc	r0, r0, r0
   1c08c:	subcs	r3, r3, r1, lsl #25
   1c090:	cmp	r3, r1, lsl #24
   1c094:	adc	r0, r0, r0
   1c098:	subcs	r3, r3, r1, lsl #24
   1c09c:	cmp	r3, r1, lsl #23
   1c0a0:	adc	r0, r0, r0
   1c0a4:	subcs	r3, r3, r1, lsl #23
   1c0a8:	cmp	r3, r1, lsl #22
   1c0ac:	adc	r0, r0, r0
   1c0b0:	subcs	r3, r3, r1, lsl #22
   1c0b4:	cmp	r3, r1, lsl #21
   1c0b8:	adc	r0, r0, r0
   1c0bc:	subcs	r3, r3, r1, lsl #21
   1c0c0:	cmp	r3, r1, lsl #20
   1c0c4:	adc	r0, r0, r0
   1c0c8:	subcs	r3, r3, r1, lsl #20
   1c0cc:	cmp	r3, r1, lsl #19
   1c0d0:	adc	r0, r0, r0
   1c0d4:	subcs	r3, r3, r1, lsl #19
   1c0d8:	cmp	r3, r1, lsl #18
   1c0dc:	adc	r0, r0, r0
   1c0e0:	subcs	r3, r3, r1, lsl #18
   1c0e4:	cmp	r3, r1, lsl #17
   1c0e8:	adc	r0, r0, r0
   1c0ec:	subcs	r3, r3, r1, lsl #17
   1c0f0:	cmp	r3, r1, lsl #16
   1c0f4:	adc	r0, r0, r0
   1c0f8:	subcs	r3, r3, r1, lsl #16
   1c0fc:	cmp	r3, r1, lsl #15
   1c100:	adc	r0, r0, r0
   1c104:	subcs	r3, r3, r1, lsl #15
   1c108:	cmp	r3, r1, lsl #14
   1c10c:	adc	r0, r0, r0
   1c110:	subcs	r3, r3, r1, lsl #14
   1c114:	cmp	r3, r1, lsl #13
   1c118:	adc	r0, r0, r0
   1c11c:	subcs	r3, r3, r1, lsl #13
   1c120:	cmp	r3, r1, lsl #12
   1c124:	adc	r0, r0, r0
   1c128:	subcs	r3, r3, r1, lsl #12
   1c12c:	cmp	r3, r1, lsl #11
   1c130:	adc	r0, r0, r0
   1c134:	subcs	r3, r3, r1, lsl #11
   1c138:	cmp	r3, r1, lsl #10
   1c13c:	adc	r0, r0, r0
   1c140:	subcs	r3, r3, r1, lsl #10
   1c144:	cmp	r3, r1, lsl #9
   1c148:	adc	r0, r0, r0
   1c14c:	subcs	r3, r3, r1, lsl #9
   1c150:	cmp	r3, r1, lsl #8
   1c154:	adc	r0, r0, r0
   1c158:	subcs	r3, r3, r1, lsl #8
   1c15c:	cmp	r3, r1, lsl #7
   1c160:	adc	r0, r0, r0
   1c164:	subcs	r3, r3, r1, lsl #7
   1c168:	cmp	r3, r1, lsl #6
   1c16c:	adc	r0, r0, r0
   1c170:	subcs	r3, r3, r1, lsl #6
   1c174:	cmp	r3, r1, lsl #5
   1c178:	adc	r0, r0, r0
   1c17c:	subcs	r3, r3, r1, lsl #5
   1c180:	cmp	r3, r1, lsl #4
   1c184:	adc	r0, r0, r0
   1c188:	subcs	r3, r3, r1, lsl #4
   1c18c:	cmp	r3, r1, lsl #3
   1c190:	adc	r0, r0, r0
   1c194:	subcs	r3, r3, r1, lsl #3
   1c198:	cmp	r3, r1, lsl #2
   1c19c:	adc	r0, r0, r0
   1c1a0:	subcs	r3, r3, r1, lsl #2
   1c1a4:	cmp	r3, r1, lsl #1
   1c1a8:	adc	r0, r0, r0
   1c1ac:	subcs	r3, r3, r1, lsl #1
   1c1b0:	cmp	r3, r1
   1c1b4:	adc	r0, r0, r0
   1c1b8:	subcs	r3, r3, r1
   1c1bc:	cmp	ip, #0
   1c1c0:	rsbmi	r0, r0, #0
   1c1c4:	bx	lr
   1c1c8:	teq	ip, r0
   1c1cc:	rsbmi	r0, r0, #0
   1c1d0:	bx	lr
   1c1d4:	movcc	r0, #0
   1c1d8:	asreq	r0, ip, #31
   1c1dc:	orreq	r0, r0, #1
   1c1e0:	bx	lr
   1c1e4:	clz	r2, r1
   1c1e8:	rsb	r2, r2, #31
   1c1ec:	cmp	ip, #0
   1c1f0:	lsr	r0, r3, r2
   1c1f4:	rsbmi	r0, r0, #0
   1c1f8:	bx	lr
   1c1fc:	cmp	r0, #0
   1c200:	mvngt	r0, #-2147483648	; 0x80000000
   1c204:	movlt	r0, #-2147483648	; 0x80000000
   1c208:	b	1c268 <__assert_fail@plt+0xad88>
   1c20c:	cmp	r1, #0
   1c210:	beq	1c1fc <__assert_fail@plt+0xad1c>
   1c214:	push	{r0, r1, lr}
   1c218:	bl	1bff4 <__assert_fail@plt+0xab14>
   1c21c:	pop	{r1, r2, lr}
   1c220:	mul	r3, r2, r0
   1c224:	sub	r1, r1, r3
   1c228:	bx	lr
   1c22c:	cmp	r3, #0
   1c230:	cmpeq	r2, #0
   1c234:	bne	1c24c <__assert_fail@plt+0xad6c>
   1c238:	cmp	r1, #0
   1c23c:	cmpeq	r0, #0
   1c240:	mvnne	r1, #0
   1c244:	mvnne	r0, #0
   1c248:	b	1c268 <__assert_fail@plt+0xad88>
   1c24c:	sub	sp, sp, #8
   1c250:	push	{sp, lr}
   1c254:	bl	1c278 <__assert_fail@plt+0xad98>
   1c258:	ldr	lr, [sp, #4]
   1c25c:	add	sp, sp, #8
   1c260:	pop	{r2, r3}
   1c264:	bx	lr
   1c268:	push	{r1, lr}
   1c26c:	mov	r0, #8
   1c270:	bl	1115c <raise@plt>
   1c274:	pop	{r1, pc}
   1c278:	cmp	r1, r3
   1c27c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c280:	cmpeq	r0, r2
   1c284:	mov	r4, r0
   1c288:	mov	r5, r1
   1c28c:	ldr	r9, [sp, #28]
   1c290:	movcc	r0, #0
   1c294:	movcc	r1, #0
   1c298:	bcc	1c390 <__assert_fail@plt+0xaeb0>
   1c29c:	cmp	r3, #0
   1c2a0:	clzeq	ip, r2
   1c2a4:	clzne	ip, r3
   1c2a8:	addeq	ip, ip, #32
   1c2ac:	cmp	r5, #0
   1c2b0:	clzeq	r1, r4
   1c2b4:	addeq	r1, r1, #32
   1c2b8:	clzne	r1, r5
   1c2bc:	sub	ip, ip, r1
   1c2c0:	sub	lr, ip, #32
   1c2c4:	lsl	r7, r3, ip
   1c2c8:	rsb	r8, ip, #32
   1c2cc:	orr	r7, r7, r2, lsl lr
   1c2d0:	orr	r7, r7, r2, lsr r8
   1c2d4:	lsl	r6, r2, ip
   1c2d8:	cmp	r5, r7
   1c2dc:	cmpeq	r4, r6
   1c2e0:	movcc	r0, #0
   1c2e4:	movcc	r1, #0
   1c2e8:	bcc	1c304 <__assert_fail@plt+0xae24>
   1c2ec:	mov	r3, #1
   1c2f0:	subs	r4, r4, r6
   1c2f4:	lsl	r1, r3, lr
   1c2f8:	lsl	r0, r3, ip
   1c2fc:	orr	r1, r1, r3, lsr r8
   1c300:	sbc	r5, r5, r7
   1c304:	cmp	ip, #0
   1c308:	beq	1c390 <__assert_fail@plt+0xaeb0>
   1c30c:	lsrs	r3, r7, #1
   1c310:	rrx	r2, r6
   1c314:	mov	r6, ip
   1c318:	b	1c33c <__assert_fail@plt+0xae5c>
   1c31c:	subs	r4, r4, r2
   1c320:	sbc	r5, r5, r3
   1c324:	adds	r4, r4, r4
   1c328:	adc	r5, r5, r5
   1c32c:	adds	r4, r4, #1
   1c330:	adc	r5, r5, #0
   1c334:	subs	r6, r6, #1
   1c338:	beq	1c358 <__assert_fail@plt+0xae78>
   1c33c:	cmp	r5, r3
   1c340:	cmpeq	r4, r2
   1c344:	bcs	1c31c <__assert_fail@plt+0xae3c>
   1c348:	adds	r4, r4, r4
   1c34c:	adc	r5, r5, r5
   1c350:	subs	r6, r6, #1
   1c354:	bne	1c33c <__assert_fail@plt+0xae5c>
   1c358:	lsr	r6, r4, ip
   1c35c:	lsr	r7, r5, ip
   1c360:	orr	r6, r6, r5, lsl r8
   1c364:	adds	r2, r0, r4
   1c368:	orr	r6, r6, r5, lsr lr
   1c36c:	adc	r3, r1, r5
   1c370:	lsl	r1, r7, ip
   1c374:	orr	r1, r1, r6, lsl lr
   1c378:	lsl	r0, r6, ip
   1c37c:	orr	r1, r1, r6, lsr r8
   1c380:	subs	r0, r2, r0
   1c384:	mov	r4, r6
   1c388:	mov	r5, r7
   1c38c:	sbc	r1, r3, r1
   1c390:	cmp	r9, #0
   1c394:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1c398:	strd	r4, [r9]
   1c39c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c3a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c3a4:	mov	r7, r0
   1c3a8:	ldr	r6, [pc, #72]	; 1c3f8 <__assert_fail@plt+0xaf18>
   1c3ac:	ldr	r5, [pc, #72]	; 1c3fc <__assert_fail@plt+0xaf1c>
   1c3b0:	add	r6, pc, r6
   1c3b4:	add	r5, pc, r5
   1c3b8:	sub	r6, r6, r5
   1c3bc:	mov	r8, r1
   1c3c0:	mov	r9, r2
   1c3c4:	bl	11118 <fdopen@plt-0x20>
   1c3c8:	asrs	r6, r6, #2
   1c3cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c3d0:	mov	r4, #0
   1c3d4:	add	r4, r4, #1
   1c3d8:	ldr	r3, [r5], #4
   1c3dc:	mov	r2, r9
   1c3e0:	mov	r1, r8
   1c3e4:	mov	r0, r7
   1c3e8:	blx	r3
   1c3ec:	cmp	r6, r4
   1c3f0:	bne	1c3d4 <__assert_fail@plt+0xaef4>
   1c3f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c3f8:	andeq	r1, r1, r8, asr fp
   1c3fc:	andeq	r1, r1, r0, asr fp
   1c400:	bx	lr
   1c404:	ldr	r3, [pc, #12]	; 1c418 <__assert_fail@plt+0xaf38>
   1c408:	mov	r1, #0
   1c40c:	add	r3, pc, r3
   1c410:	ldr	r2, [r3]
   1c414:	b	113b4 <__cxa_atexit@plt>
   1c418:	andeq	r1, r1, ip, lsr sp

Disassembly of section .fini:

0001c41c <.fini>:
   1c41c:	push	{r3, lr}
   1c420:	pop	{r3, pc}
