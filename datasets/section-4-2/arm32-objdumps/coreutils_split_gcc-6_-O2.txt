
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011118 <.init>:
   11118:	push	{r3, lr}
   1111c:	bl	133e8 <__assert_fail@plt+0x1f08>
   11120:	pop	{r3, pc}

Disassembly of section .plt:

00011124 <fdopen@plt-0x14>:
   11124:	push	{lr}		; (str lr, [sp, #-4]!)
   11128:	ldr	lr, [pc, #4]	; 11134 <fdopen@plt-0x4>
   1112c:	add	lr, pc, lr
   11130:	ldr	pc, [lr, #8]!
   11134:	andeq	r9, r1, ip, asr #29

00011138 <fdopen@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #102400	; 0x19000
   11140:	ldr	pc, [ip, #3788]!	; 0xecc

00011144 <calloc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #102400	; 0x19000
   1114c:	ldr	pc, [ip, #3780]!	; 0xec4

00011150 <fputs_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #102400	; 0x19000
   11158:	ldr	pc, [ip, #3772]!	; 0xebc

0001115c <raise@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #102400	; 0x19000
   11164:	ldr	pc, [ip, #3764]!	; 0xeb4

00011168 <strcmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #102400	; 0x19000
   11170:	ldr	pc, [ip, #3756]!	; 0xeac

00011174 <strtol@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #102400	; 0x19000
   1117c:	ldr	pc, [ip, #3748]!	; 0xea4

00011180 <read@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #102400	; 0x19000
   11188:	ldr	pc, [ip, #3740]!	; 0xe9c

0001118c <fflush@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #102400	; 0x19000
   11194:	ldr	pc, [ip, #3732]!	; 0xe94

00011198 <sigprocmask@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #102400	; 0x19000
   111a0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a4 <memmove@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #102400	; 0x19000
   111ac:	ldr	pc, [ip, #3716]!	; 0xe84

000111b0 <free@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #102400	; 0x19000
   111b8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111bc <_exit@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #102400	; 0x19000
   111c4:	ldr	pc, [ip, #3700]!	; 0xe74

000111c8 <memcpy@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #102400	; 0x19000
   111d0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d4 <__strtoull_internal@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #102400	; 0x19000
   111dc:	ldr	pc, [ip, #3684]!	; 0xe64

000111e0 <mbsinit@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #102400	; 0x19000
   111e8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111ec <ftruncate64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #102400	; 0x19000
   111f4:	ldr	pc, [ip, #3668]!	; 0xe54

000111f8 <fwrite_unlocked@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #102400	; 0x19000
   11200:	ldr	pc, [ip, #3660]!	; 0xe4c

00011204 <memcmp@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #102400	; 0x19000
   1120c:	ldr	pc, [ip, #3652]!	; 0xe44

00011210 <fputc_unlocked@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #102400	; 0x19000
   11218:	ldr	pc, [ip, #3644]!	; 0xe3c

0001121c <dcgettext@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #102400	; 0x19000
   11224:	ldr	pc, [ip, #3636]!	; 0xe34

00011228 <dup2@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #102400	; 0x19000
   11230:	ldr	pc, [ip, #3628]!	; 0xe2c

00011234 <realloc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #102400	; 0x19000
   1123c:	ldr	pc, [ip, #3620]!	; 0xe24

00011240 <textdomain@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #102400	; 0x19000
   11248:	ldr	pc, [ip, #3612]!	; 0xe1c

0001124c <rawmemchr@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #102400	; 0x19000
   11254:	ldr	pc, [ip, #3604]!	; 0xe14

00011258 <iswprint@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #102400	; 0x19000
   11260:	ldr	pc, [ip, #3596]!	; 0xe0c

00011264 <__fxstat64@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #102400	; 0x19000
   1126c:	ldr	pc, [ip, #3588]!	; 0xe04

00011270 <sigaction@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #102400	; 0x19000
   11278:	ldr	pc, [ip, #3580]!	; 0xdfc

0001127c <fwrite@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #102400	; 0x19000
   11284:	ldr	pc, [ip, #3572]!	; 0xdf4

00011288 <lseek64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #102400	; 0x19000
   11290:	ldr	pc, [ip, #3564]!	; 0xdec

00011294 <waitpid@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #102400	; 0x19000
   1129c:	ldr	pc, [ip, #3556]!	; 0xde4

000112a0 <__ctype_get_mb_cur_max@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #102400	; 0x19000
   112a8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ac <strcpy@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #102400	; 0x19000
   112b4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112b8 <__fpending@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #102400	; 0x19000
   112c0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112c4 <mbrtowc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #102400	; 0x19000
   112cc:	ldr	pc, [ip, #3524]!	; 0xdc4

000112d0 <error@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #102400	; 0x19000
   112d8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112dc <open64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #102400	; 0x19000
   112e4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112e8 <getenv@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #102400	; 0x19000
   112f0:	ldr	pc, [ip, #3500]!	; 0xdac

000112f4 <malloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #102400	; 0x19000
   112fc:	ldr	pc, [ip, #3492]!	; 0xda4

00011300 <sigaddset@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #102400	; 0x19000
   11308:	ldr	pc, [ip, #3484]!	; 0xd9c

0001130c <__libc_start_main@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #102400	; 0x19000
   11314:	ldr	pc, [ip, #3476]!	; 0xd94

00011318 <__freading@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #102400	; 0x19000
   11320:	ldr	pc, [ip, #3468]!	; 0xd8c

00011324 <__gmon_start__@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #102400	; 0x19000
   1132c:	ldr	pc, [ip, #3460]!	; 0xd84

00011330 <getopt_long@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #102400	; 0x19000
   11338:	ldr	pc, [ip, #3452]!	; 0xd7c

0001133c <__ctype_b_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #102400	; 0x19000
   11344:	ldr	pc, [ip, #3444]!	; 0xd74

00011348 <exit@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #102400	; 0x19000
   11350:	ldr	pc, [ip, #3436]!	; 0xd6c

00011354 <strlen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #102400	; 0x19000
   1135c:	ldr	pc, [ip, #3428]!	; 0xd64

00011360 <__libc_current_sigrtmax@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #102400	; 0x19000
   11368:	ldr	pc, [ip, #3420]!	; 0xd5c

0001136c <strchr@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #102400	; 0x19000
   11374:	ldr	pc, [ip, #3412]!	; 0xd54

00011378 <setenv@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #102400	; 0x19000
   11380:	ldr	pc, [ip, #3404]!	; 0xd4c

00011384 <memrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #102400	; 0x19000
   1138c:	ldr	pc, [ip, #3396]!	; 0xd44

00011390 <getpagesize@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #102400	; 0x19000
   11398:	ldr	pc, [ip, #3388]!	; 0xd3c

0001139c <__errno_location@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #102400	; 0x19000
   113a4:	ldr	pc, [ip, #3380]!	; 0xd34

000113a8 <__sprintf_chk@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #102400	; 0x19000
   113b0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113b4 <__cxa_atexit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #102400	; 0x19000
   113bc:	ldr	pc, [ip, #3364]!	; 0xd24

000113c0 <memset@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #102400	; 0x19000
   113c8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113cc <__printf_chk@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #102400	; 0x19000
   113d4:	ldr	pc, [ip, #3348]!	; 0xd14

000113d8 <write@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #102400	; 0x19000
   113e0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113e4 <fileno@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #102400	; 0x19000
   113ec:	ldr	pc, [ip, #3332]!	; 0xd04

000113f0 <__fprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #102400	; 0x19000
   113f8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113fc <memchr@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #102400	; 0x19000
   11404:	ldr	pc, [ip, #3316]!	; 0xcf4

00011408 <fclose@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #102400	; 0x19000
   11410:	ldr	pc, [ip, #3308]!	; 0xcec

00011414 <pipe@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #102400	; 0x19000
   1141c:	ldr	pc, [ip, #3300]!	; 0xce4

00011420 <fseeko64@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #102400	; 0x19000
   11428:	ldr	pc, [ip, #3292]!	; 0xcdc

0001142c <fcntl64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #102400	; 0x19000
   11434:	ldr	pc, [ip, #3284]!	; 0xcd4

00011438 <setlocale@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #102400	; 0x19000
   11440:	ldr	pc, [ip, #3276]!	; 0xccc

00011444 <sigemptyset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #102400	; 0x19000
   1144c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011450 <fork@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #102400	; 0x19000
   11458:	ldr	pc, [ip, #3260]!	; 0xcbc

0001145c <execl@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #102400	; 0x19000
   11464:	ldr	pc, [ip, #3252]!	; 0xcb4

00011468 <strrchr@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #102400	; 0x19000
   11470:	ldr	pc, [ip, #3244]!	; 0xcac

00011474 <nl_langinfo@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #102400	; 0x19000
   1147c:	ldr	pc, [ip, #3236]!	; 0xca4

00011480 <clearerr_unlocked@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #102400	; 0x19000
   11488:	ldr	pc, [ip, #3228]!	; 0xc9c

0001148c <bindtextdomain@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #102400	; 0x19000
   11494:	ldr	pc, [ip, #3220]!	; 0xc94

00011498 <aligned_alloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #102400	; 0x19000
   114a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000114a4 <__libc_current_sigrtmin@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #102400	; 0x19000
   114ac:	ldr	pc, [ip, #3204]!	; 0xc84

000114b0 <strncmp@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #102400	; 0x19000
   114b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000114bc <abort@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #102400	; 0x19000
   114c4:	ldr	pc, [ip, #3188]!	; 0xc74

000114c8 <close@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #102400	; 0x19000
   114d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114d4 <strspn@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #102400	; 0x19000
   114dc:	ldr	pc, [ip, #3172]!	; 0xc64

000114e0 <__assert_fail@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #102400	; 0x19000
   114e8:	ldr	pc, [ip, #3164]!	; 0xc5c

Disassembly of section .text:

000114f0 <.text>:
   114f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114f4:	sub	sp, sp, #260	; 0x104
   114f8:	mov	r5, r1
   114fc:	mov	r6, r0
   11500:	bl	11390 <getpagesize@plt>
   11504:	ldr	r7, [pc, #1748]	; 11be0 <__assert_fail@plt+0x700>
   11508:	ldr	r4, [pc, #1748]	; 11be4 <__assert_fail@plt+0x704>
   1150c:	str	r0, [sp, #56]	; 0x38
   11510:	ldr	r0, [r5]
   11514:	bl	14c40 <__assert_fail@plt+0x3760>
   11518:	ldr	r1, [pc, #1896]	; 11c88 <__assert_fail@plt+0x7a8>
   1151c:	mov	r0, #6
   11520:	bl	11438 <setlocale@plt>
   11524:	ldr	r1, [pc, #1724]	; 11be8 <__assert_fail@plt+0x708>
   11528:	ldr	r0, [pc, #1724]	; 11bec <__assert_fail@plt+0x70c>
   1152c:	bl	1148c <bindtextdomain@plt>
   11530:	ldr	r0, [pc, #1716]	; 11bec <__assert_fail@plt+0x70c>
   11534:	bl	11240 <textdomain@plt>
   11538:	ldr	r0, [pc, #1712]	; 11bf0 <__assert_fail@plt+0x710>
   1153c:	bl	18bf0 <__assert_fail@plt+0x7710>
   11540:	mov	r0, #0
   11544:	mov	r8, r0
   11548:	mov	r1, #0
   1154c:	ldr	r0, [pc, #1876]	; 11ca8 <__assert_fail@plt+0x7c8>
   11550:	mov	r9, r1
   11554:	ldr	r2, [pc, #1812]	; 11c70 <__assert_fail@plt+0x790>
   11558:	ldr	r3, [pc, #1684]	; 11bf4 <__assert_fail@plt+0x714>
   1155c:	strd	r8, [sp, #32]
   11560:	str	r2, [r0, #300]	; 0x12c
   11564:	mov	r2, r8
   11568:	ldr	r8, [pc, #1672]	; 11bf8 <__assert_fail@plt+0x718>
   1156c:	str	r3, [r0, #12]
   11570:	mov	r3, r9
   11574:	mov	r1, #0
   11578:	str	r1, [sp, #48]	; 0x30
   1157c:	strd	r2, [sp, #40]	; 0x28
   11580:	str	r1, [sp, #68]	; 0x44
   11584:	str	r1, [sp, #24]
   11588:	mov	sl, #0
   1158c:	str	sl, [sp]
   11590:	mov	r3, r8
   11594:	ldr	r2, [pc, #1632]	; 11bfc <__assert_fail@plt+0x71c>
   11598:	mov	r1, r5
   1159c:	mov	r0, r6
   115a0:	ldr	r9, [r7]
   115a4:	bl	11330 <getopt_long@plt>
   115a8:	cmp	r9, sl
   115ac:	moveq	r9, #1
   115b0:	cmn	r0, #1
   115b4:	mov	fp, r0
   115b8:	beq	11804 <__assert_fail@plt+0x324>
   115bc:	cmp	r0, #101	; 0x65
   115c0:	beq	11aec <__assert_fail@plt+0x60c>
   115c4:	ble	11600 <__assert_fail@plt+0x120>
   115c8:	cmp	r0, #120	; 0x78
   115cc:	beq	11bc4 <__assert_fail@plt+0x6e4>
   115d0:	bgt	1167c <__assert_fail@plt+0x19c>
   115d4:	cmp	r0, #110	; 0x6e
   115d8:	beq	119c4 <__assert_fail@plt+0x4e4>
   115dc:	ble	11860 <__assert_fail@plt+0x380>
   115e0:	cmp	r0, #116	; 0x74
   115e4:	beq	117b4 <__assert_fail@plt+0x2d4>
   115e8:	cmp	r0, #117	; 0x75
   115ec:	bne	11840 <__assert_fail@plt+0x360>
   115f0:	ldr	r2, [pc, #1712]	; 11ca8 <__assert_fail@plt+0x7c8>
   115f4:	mov	r3, #1
   115f8:	strb	r3, [r2, #304]	; 0x130
   115fc:	b	11588 <__assert_fail@plt+0xa8>
   11600:	cmp	r0, #57	; 0x39
   11604:	ble	116c4 <__assert_fail@plt+0x1e4>
   11608:	cmp	r0, #97	; 0x61
   1160c:	beq	11978 <__assert_fail@plt+0x498>
   11610:	ble	1171c <__assert_fail@plt+0x23c>
   11614:	cmp	r0, #98	; 0x62
   11618:	bne	11b30 <__assert_fail@plt+0x650>
   1161c:	ldr	r3, [sp, #24]
   11620:	cmp	r3, #0
   11624:	bne	1272c <__assert_fail@plt+0x124c>
   11628:	ldr	sl, [sp, #24]
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #1480]	; 11c00 <__assert_fail@plt+0x720>
   11634:	mov	r0, sl
   11638:	ldr	r9, [r4]
   1163c:	bl	1121c <dcgettext@plt>
   11640:	ldr	r3, [pc, #1468]	; 11c04 <__assert_fail@plt+0x724>
   11644:	str	sl, [sp, #16]
   11648:	mvn	fp, #-2147483648	; 0x80000000
   1164c:	mvn	sl, #0
   11650:	str	r3, [sp, #8]
   11654:	mov	r2, #1
   11658:	mov	r3, #0
   1165c:	mov	r1, #1
   11660:	strd	sl, [sp]
   11664:	str	r0, [sp, #12]
   11668:	mov	r0, r9
   1166c:	str	r1, [sp, #24]
   11670:	bl	17a88 <__assert_fail@plt+0x65a8>
   11674:	strd	r0, [sp, #32]
   11678:	b	11588 <__assert_fail@plt+0xa8>
   1167c:	ldr	r3, [pc, #1412]	; 11c08 <__assert_fail@plt+0x728>
   11680:	cmp	r0, r3
   11684:	beq	118b0 <__assert_fail@plt+0x3d0>
   11688:	ble	11848 <__assert_fail@plt+0x368>
   1168c:	ldr	r3, [pc, #1400]	; 11c0c <__assert_fail@plt+0x72c>
   11690:	cmp	r0, r3
   11694:	beq	1176c <__assert_fail@plt+0x28c>
   11698:	add	r3, r3, #1
   1169c:	cmp	r0, r3
   116a0:	bne	11840 <__assert_fail@plt+0x360>
   116a4:	ldr	r9, [r4]
   116a8:	mov	r0, r9
   116ac:	bl	14724 <__assert_fail@plt+0x3244>
   116b0:	cmp	r9, r0
   116b4:	bne	128cc <__assert_fail@plt+0x13ec>
   116b8:	ldr	r3, [pc, #1512]	; 11ca8 <__assert_fail@plt+0x7c8>
   116bc:	str	r9, [r3, #20]
   116c0:	b	11588 <__assert_fail@plt+0xa8>
   116c4:	cmp	r0, #48	; 0x30
   116c8:	bge	118c0 <__assert_fail@plt+0x3e0>
   116cc:	cmn	r0, #3
   116d0:	beq	116e4 <__assert_fail@plt+0x204>
   116d4:	cmn	r0, #2
   116d8:	bne	11840 <__assert_fail@plt+0x360>
   116dc:	mov	r0, sl
   116e0:	bl	143a4 <__assert_fail@plt+0x2ec4>
   116e4:	ldr	r3, [pc, #1316]	; 11c10 <__assert_fail@plt+0x730>
   116e8:	ldr	r0, [pc, #1316]	; 11c14 <__assert_fail@plt+0x734>
   116ec:	ldr	r1, [pc, #1316]	; 11c18 <__assert_fail@plt+0x738>
   116f0:	ldr	r2, [pc, #1316]	; 11c1c <__assert_fail@plt+0x73c>
   116f4:	str	sl, [sp, #8]
   116f8:	ldr	r0, [r0]
   116fc:	ldr	r3, [r3]
   11700:	str	r1, [sp, #4]
   11704:	str	r2, [sp]
   11708:	ldr	r1, [pc, #1296]	; 11c20 <__assert_fail@plt+0x740>
   1170c:	ldr	r2, [pc, #1296]	; 11c24 <__assert_fail@plt+0x744>
   11710:	bl	172b4 <__assert_fail@plt+0x5dd4>
   11714:	mov	r0, sl
   11718:	bl	11348 <exit@plt>
   1171c:	cmp	r0, #67	; 0x43
   11720:	bne	11840 <__assert_fail@plt+0x360>
   11724:	ldr	sl, [sp, #24]
   11728:	cmp	sl, #0
   1172c:	bne	1272c <__assert_fail@plt+0x124c>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #1220]	; 11c00 <__assert_fail@plt+0x720>
   11738:	mov	r0, sl
   1173c:	ldr	r9, [r4]
   11740:	bl	1121c <dcgettext@plt>
   11744:	ldr	r1, [pc, #1208]	; 11c04 <__assert_fail@plt+0x724>
   11748:	mvn	r2, #0
   1174c:	mov	r3, #0
   11750:	str	r1, [sp, #8]
   11754:	strd	r2, [sp]
   11758:	str	sl, [sp, #16]
   1175c:	mov	r2, #1
   11760:	mov	r3, #0
   11764:	mov	r1, #2
   11768:	b	11664 <__assert_fail@plt+0x184>
   1176c:	mov	r2, #5
   11770:	ldr	r1, [pc, #1200]	; 11c28 <__assert_fail@plt+0x748>
   11774:	mov	r0, sl
   11778:	ldr	r9, [r4]
   1177c:	bl	1121c <dcgettext@plt>
   11780:	ldr	r1, [pc, #1148]	; 11c04 <__assert_fail@plt+0x724>
   11784:	mvn	r2, #-2147483647	; 0x80000001
   11788:	mov	r3, #0
   1178c:	str	sl, [sp, #16]
   11790:	strd	r2, [sp]
   11794:	str	r1, [sp, #8]
   11798:	mov	r2, #1
   1179c:	mov	r3, #0
   117a0:	str	r0, [sp, #12]
   117a4:	mov	r0, r9
   117a8:	bl	17a88 <__assert_fail@plt+0x65a8>
   117ac:	str	r0, [sp, #68]	; 0x44
   117b0:	b	11588 <__assert_fail@plt+0xa8>
   117b4:	ldr	r0, [r4]
   117b8:	ldrb	r9, [r0]
   117bc:	cmp	r9, #0
   117c0:	beq	128c0 <__assert_fail@plt+0x13e0>
   117c4:	ldrb	r3, [r0, #1]
   117c8:	cmp	r3, #0
   117cc:	beq	117e0 <__assert_fail@plt+0x300>
   117d0:	ldr	r1, [pc, #1108]	; 11c2c <__assert_fail@plt+0x74c>
   117d4:	bl	11168 <strcmp@plt>
   117d8:	subs	r9, r0, #0
   117dc:	bne	11e50 <__assert_fail@plt+0x970>
   117e0:	ldr	r3, [pc, #1212]	; 11ca4 <__assert_fail@plt+0x7c4>
   117e4:	ldr	r3, [r3, #12]
   117e8:	cmp	r3, #0
   117ec:	blt	117f8 <__assert_fail@plt+0x318>
   117f0:	cmp	r3, r9
   117f4:	bne	11e30 <__assert_fail@plt+0x950>
   117f8:	ldr	r3, [pc, #1188]	; 11ca4 <__assert_fail@plt+0x7c4>
   117fc:	str	r9, [r3, #12]
   11800:	b	11588 <__assert_fail@plt+0xa8>
   11804:	ldrd	r2, [sp, #40]	; 0x28
   11808:	orrs	r3, r2, r3
   1180c:	beq	11cac <__assert_fail@plt+0x7cc>
   11810:	ldr	r3, [pc, #1168]	; 11ca8 <__assert_fail@plt+0x7c8>
   11814:	ldr	r3, [r3, #40]	; 0x28
   11818:	cmp	r3, #0
   1181c:	beq	11cac <__assert_fail@plt+0x7cc>
   11820:	ldr	r1, [pc, #1032]	; 11c30 <__assert_fail@plt+0x750>
   11824:	mov	r2, #5
   11828:	mov	r0, #0
   1182c:	bl	1121c <dcgettext@plt>
   11830:	mov	r1, #0
   11834:	mov	r2, r0
   11838:	mov	r0, r1
   1183c:	bl	112d0 <error@plt>
   11840:	mov	r0, #1
   11844:	bl	143a4 <__assert_fail@plt+0x2ec4>
   11848:	cmp	r0, #256	; 0x100
   1184c:	bne	11840 <__assert_fail@plt+0x360>
   11850:	ldr	r2, [pc, #1104]	; 11ca8 <__assert_fail@plt+0x7c8>
   11854:	mov	r3, #1
   11858:	strb	r3, [r2, #44]	; 0x2c
   1185c:	b	11588 <__assert_fail@plt+0xa8>
   11860:	cmp	r0, #108	; 0x6c
   11864:	bne	11840 <__assert_fail@plt+0x360>
   11868:	ldr	sl, [sp, #24]
   1186c:	cmp	sl, #0
   11870:	bne	1272c <__assert_fail@plt+0x124c>
   11874:	mov	r2, #5
   11878:	ldr	r1, [pc, #984]	; 11c58 <__assert_fail@plt+0x778>
   1187c:	mov	r0, sl
   11880:	ldr	r9, [r4]
   11884:	bl	1121c <dcgettext@plt>
   11888:	ldr	r1, [pc, #1016]	; 11c88 <__assert_fail@plt+0x7a8>
   1188c:	mvn	r2, #0
   11890:	mvn	r3, #0
   11894:	str	r1, [sp, #8]
   11898:	strd	r2, [sp]
   1189c:	str	sl, [sp, #16]
   118a0:	mov	r2, #1
   118a4:	mov	r3, #0
   118a8:	mov	r1, #3
   118ac:	b	11664 <__assert_fail@plt+0x184>
   118b0:	ldr	r2, [pc, #1008]	; 11ca8 <__assert_fail@plt+0x7c8>
   118b4:	ldr	r3, [r4]
   118b8:	str	r3, [r2, #40]	; 0x28
   118bc:	b	11588 <__assert_fail@plt+0xa8>
   118c0:	ldr	r3, [sp, #24]
   118c4:	cmp	r3, #0
   118c8:	beq	11afc <__assert_fail@plt+0x61c>
   118cc:	cmp	r3, #4
   118d0:	bne	1272c <__assert_fail@plt+0x124c>
   118d4:	ldr	r3, [sp, #48]	; 0x30
   118d8:	cmp	r3, #0
   118dc:	cmpne	r3, r9
   118e0:	bne	11dc4 <__assert_fail@plt+0x8e4>
   118e4:	ldrd	r2, [sp, #32]
   118e8:	add	r1, pc, #744	; 0x2e8
   118ec:	ldrd	r0, [r1]
   118f0:	cmp	r3, r1
   118f4:	cmpeq	r2, r0
   118f8:	bhi	11940 <__assert_fail@plt+0x460>
   118fc:	strd	r2, [sp, #72]	; 0x48
   11900:	ldr	ip, [sp, #72]	; 0x48
   11904:	mov	r0, #10
   11908:	sub	r1, fp, #48	; 0x30
   1190c:	umull	r2, r3, ip, r0
   11910:	strd	r2, [sp, #48]	; 0x30
   11914:	ldr	r3, [sp, #76]	; 0x4c
   11918:	ldr	r2, [sp, #52]	; 0x34
   1191c:	mla	r3, r0, r3, r2
   11920:	str	r3, [sp, #52]	; 0x34
   11924:	ldrd	r2, [sp, #48]	; 0x30
   11928:	adds	r2, r2, r1
   1192c:	adc	r3, r3, r1, asr #31
   11930:	ldrd	r0, [sp, #32]
   11934:	cmp	r3, r1
   11938:	cmpeq	r2, r0
   1193c:	bcs	11e24 <__assert_fail@plt+0x944>
   11940:	mov	r2, #5
   11944:	ldr	r1, [pc, #744]	; 11c34 <__assert_fail@plt+0x754>
   11948:	mov	r0, #0
   1194c:	bl	1121c <dcgettext@plt>
   11950:	add	r2, sp, #112	; 0x70
   11954:	mov	r4, r0
   11958:	ldrd	r0, [sp, #32]
   1195c:	bl	14bd8 <__assert_fail@plt+0x36f8>
   11960:	mov	r2, r4
   11964:	str	fp, [sp]
   11968:	mov	r1, #0
   1196c:	mov	r3, r0
   11970:	mov	r0, #1
   11974:	bl	112d0 <error@plt>
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #692]	; 11c38 <__assert_fail@plt+0x758>
   11980:	mov	r0, sl
   11984:	ldr	r9, [r4]
   11988:	bl	1121c <dcgettext@plt>
   1198c:	ldr	r1, [pc, #756]	; 11c88 <__assert_fail@plt+0x7a8>
   11990:	mvn	r2, #-1073741824	; 0xc0000000
   11994:	mov	r3, #0
   11998:	str	sl, [sp, #16]
   1199c:	strd	r2, [sp]
   119a0:	str	r1, [sp, #8]
   119a4:	mov	r3, #0
   119a8:	mov	r2, #0
   119ac:	str	r0, [sp, #12]
   119b0:	mov	r0, r9
   119b4:	bl	17a88 <__assert_fail@plt+0x65a8>
   119b8:	ldr	r3, [pc, #744]	; 11ca8 <__assert_fail@plt+0x7c8>
   119bc:	str	r0, [r3, #4]
   119c0:	b	11588 <__assert_fail@plt+0xa8>
   119c4:	ldr	r3, [sp, #24]
   119c8:	cmp	r3, #0
   119cc:	bne	1272c <__assert_fail@plt+0x124c>
   119d0:	bl	1133c <__ctype_b_loc@plt>
   119d4:	ldr	r3, [r4]
   119d8:	ldr	r1, [r0]
   119dc:	b	119e4 <__assert_fail@plt+0x504>
   119e0:	str	r3, [r4]
   119e4:	mov	r9, r3
   119e8:	add	r3, r3, #1
   119ec:	ldrb	r2, [r9]
   119f0:	lsl	r2, r2, #1
   119f4:	ldrh	r2, [r1, r2]
   119f8:	tst	r2, #8192	; 0x2000
   119fc:	bne	119e0 <__assert_fail@plt+0x500>
   11a00:	mov	r2, #2
   11a04:	ldr	r1, [pc, #560]	; 11c3c <__assert_fail@plt+0x75c>
   11a08:	mov	r0, r9
   11a0c:	bl	114b0 <strncmp@plt>
   11a10:	cmp	r0, #0
   11a14:	beq	11b1c <__assert_fail@plt+0x63c>
   11a18:	mov	r0, r9
   11a1c:	mov	r2, #2
   11a20:	ldr	r1, [pc, #536]	; 11c40 <__assert_fail@plt+0x760>
   11a24:	bl	114b0 <strncmp@plt>
   11a28:	cmp	r0, #0
   11a2c:	addeq	r9, r9, #2
   11a30:	moveq	r3, #6
   11a34:	movne	r3, #5
   11a38:	streq	r9, [r4]
   11a3c:	str	r3, [sp, #24]
   11a40:	ldr	r9, [r4]
   11a44:	mov	r1, #47	; 0x2f
   11a48:	mov	r0, r9
   11a4c:	bl	1136c <strchr@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #488]	; 11c44 <__assert_fail@plt+0x764>
   11a58:	subs	sl, r0, #0
   11a5c:	beq	11e80 <__assert_fail@plt+0x9a0>
   11a60:	mov	r0, #0
   11a64:	bl	1121c <dcgettext@plt>
   11a68:	ldr	fp, [pc, #536]	; 11c88 <__assert_fail@plt+0x7a8>
   11a6c:	mvn	r2, #0
   11a70:	mvn	r3, #0
   11a74:	mov	r9, #0
   11a78:	strd	r2, [sp]
   11a7c:	str	fp, [sp, #8]
   11a80:	mov	r3, #0
   11a84:	str	r9, [sp, #16]
   11a88:	mov	r2, #1
   11a8c:	str	r0, [sp, #12]
   11a90:	add	r0, sl, #1
   11a94:	bl	17a88 <__assert_fail@plt+0x65a8>
   11a98:	ldr	r3, [r4]
   11a9c:	cmp	sl, r3
   11aa0:	strd	r0, [sp, #32]
   11aa4:	beq	11588 <__assert_fail@plt+0xa8>
   11aa8:	strb	r9, [sl]
   11aac:	mov	r2, #5
   11ab0:	ldr	r1, [pc, #400]	; 11c48 <__assert_fail@plt+0x768>
   11ab4:	mov	r0, r9
   11ab8:	ldr	sl, [r4]
   11abc:	bl	1121c <dcgettext@plt>
   11ac0:	ldrd	r2, [sp, #32]
   11ac4:	str	r9, [sp, #16]
   11ac8:	str	fp, [sp, #8]
   11acc:	strd	r2, [sp]
   11ad0:	mov	r2, #1
   11ad4:	mov	r3, #0
   11ad8:	str	r0, [sp, #12]
   11adc:	mov	r0, sl
   11ae0:	bl	17a88 <__assert_fail@plt+0x65a8>
   11ae4:	strd	r0, [sp, #40]	; 0x28
   11ae8:	b	11588 <__assert_fail@plt+0xa8>
   11aec:	ldr	r2, [pc, #436]	; 11ca8 <__assert_fail@plt+0x7c8>
   11af0:	mov	r3, #1
   11af4:	strb	r3, [r2, #296]	; 0x128
   11af8:	b	11588 <__assert_fail@plt+0xa8>
   11afc:	sub	fp, r0, #48	; 0x30
   11b00:	mov	r2, fp
   11b04:	asr	r3, fp, #31
   11b08:	str	r9, [sp, #48]	; 0x30
   11b0c:	strd	r2, [sp, #32]
   11b10:	mov	r3, #4
   11b14:	str	r3, [sp, #24]
   11b18:	b	11588 <__assert_fail@plt+0xa8>
   11b1c:	add	r9, r9, #2
   11b20:	mov	r3, #7
   11b24:	str	r9, [r4]
   11b28:	str	r3, [sp, #24]
   11b2c:	b	11a40 <__assert_fail@plt+0x560>
   11b30:	cmp	r0, #100	; 0x64
   11b34:	bne	11840 <__assert_fail@plt+0x360>
   11b38:	ldr	r2, [pc, #356]	; 11ca4 <__assert_fail@plt+0x7c4>
   11b3c:	ldr	r3, [pc, #264]	; 11c4c <__assert_fail@plt+0x76c>
   11b40:	str	r3, [r2, #4]
   11b44:	ldr	r9, [r4]
   11b48:	cmp	r9, #0
   11b4c:	beq	11588 <__assert_fail@plt+0xa8>
   11b50:	mov	r0, r9
   11b54:	bl	11354 <strlen@plt>
   11b58:	ldr	r3, [pc, #324]	; 11ca4 <__assert_fail@plt+0x7c4>
   11b5c:	ldr	r1, [r3, #4]
   11b60:	mov	sl, r0
   11b64:	mov	r0, r9
   11b68:	bl	114d4 <strspn@plt>
   11b6c:	cmp	sl, r0
   11b70:	bne	128f4 <__assert_fail@plt+0x1414>
   11b74:	ldrb	r3, [r9]
   11b78:	cmp	r3, #48	; 0x30
   11b7c:	bne	11bb8 <__assert_fail@plt+0x6d8>
   11b80:	ldrb	r3, [r9, #1]
   11b84:	cmp	r3, #0
   11b88:	addne	r3, r9, #1
   11b8c:	bne	11ba0 <__assert_fail@plt+0x6c0>
   11b90:	b	11bb8 <__assert_fail@plt+0x6d8>
   11b94:	ldrb	r2, [r3]
   11b98:	cmp	r2, #0
   11b9c:	beq	11bb8 <__assert_fail@plt+0x6d8>
   11ba0:	str	r3, [r4]
   11ba4:	ldrb	r2, [r3]
   11ba8:	mov	r9, r3
   11bac:	add	r3, r3, #1
   11bb0:	cmp	r2, #48	; 0x30
   11bb4:	beq	11b94 <__assert_fail@plt+0x6b4>
   11bb8:	ldr	r3, [pc, #232]	; 11ca8 <__assert_fail@plt+0x7c8>
   11bbc:	str	r9, [r3, #36]	; 0x24
   11bc0:	b	11588 <__assert_fail@plt+0xa8>
   11bc4:	ldr	r2, [pc, #216]	; 11ca4 <__assert_fail@plt+0x7c4>
   11bc8:	ldr	r3, [pc, #128]	; 11c50 <__assert_fail@plt+0x770>
   11bcc:	str	r3, [r2, #4]
   11bd0:	b	11b44 <__assert_fail@plt+0x664>
   11bd4:	nop			; (mov r0, r0)
   11bd8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11bdc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11be0:	andeq	fp, r2, r8, asr r3
   11be4:	andeq	fp, r2, r8, ror #6
   11be8:	andeq	r9, r1, r0, ror r9
   11bec:	andeq	r9, r1, r8, asr #17
   11bf0:	strdeq	r4, [r1], -r0
   11bf4:	andeq	r9, r1, ip, ror #27
   11bf8:	andeq	r8, r1, ip, asr ip
   11bfc:	andeq	r9, r1, ip, lsl #19
   11c00:	andeq	r9, r1, r4, lsl sl
   11c04:	andeq	r8, r1, ip, ror #26
   11c08:	andeq	r0, r0, r1, lsl #2
   11c0c:	andeq	r0, r0, r2, lsl #2
   11c10:	andeq	fp, r2, r4, ror #2
   11c14:	andeq	fp, r2, r4, ror #6
   11c18:	andeq	r9, r1, ip, ror fp
   11c1c:	muleq	r1, r0, fp
   11c20:	strdeq	r8, [r1], -r4
   11c24:	andeq	r9, r1, r4, asr #17
   11c28:	andeq	r9, r1, r4, ror #22
   11c2c:	muleq	r1, r8, sl
   11c30:	andeq	r9, r1, r4, lsr #23
   11c34:	strdeq	r9, [r1], -r4
   11c38:	andeq	r9, r1, r8, lsr #19
   11c3c:	andeq	r9, r1, r4, asr #20
   11c40:	andeq	r9, r1, r8, asr #20
   11c44:	andeq	r9, r1, ip, asr #20
   11c48:	andeq	r9, r1, r8, ror #20
   11c4c:	andeq	r9, r1, r4, ror #21
   11c50:	strdeq	r9, [r1], -r0
   11c54:	andeq	r9, r1, r4, lsl ip
   11c58:	andeq	r9, r1, ip, lsr #20
   11c5c:	ldrdeq	r9, [r1], -ip
   11c60:	andeq	r9, r1, r0, ror #23
   11c64:			; <UNDEFINED> instruction: 0x00019abc
   11c68:	muleq	r1, ip, sl
   11c6c:	andeq	r9, r1, r8, lsr #24
   11c70:	andeq	r9, r1, r8, lsl #19
   11c74:	andeq	fp, r2, r0, lsr #7
   11c78:	svcne	0x00fe0000
   11c7c:	andeq	fp, r2, r4, lsr #9
   11c80:	andeq	fp, r2, r0, lsl r4
   11c84:	strdeq	r9, [r1], -r0
   11c88:	strdeq	r9, [r1], -r0
   11c8c:	andeq	r9, r1, r8, ror #23
   11c90:	andeq	r8, r1, ip, asr #31
   11c94:	andeq	r9, r1, r0, lsl #21
   11c98:	andeq	r9, r1, r0, asr #19
   11c9c:	andeq	r9, r1, r4, lsr fp
   11ca0:	andeq	r9, r1, r4, lsl #22
   11ca4:	andeq	fp, r2, r4, asr r1
   11ca8:	andeq	fp, r2, r0, ror r3
   11cac:	ldr	r3, [sp, #24]
   11cb0:	cmp	r3, #0
   11cb4:	bne	11ddc <__assert_fail@plt+0x8fc>
   11cb8:	mov	r3, #0
   11cbc:	mov	r2, #1000	; 0x3e8
   11cc0:	strd	r2, [sp, #32]
   11cc4:	mov	r3, #3
   11cc8:	str	r3, [sp, #24]
   11ccc:	ldr	r3, [pc, #-48]	; 11ca4 <__assert_fail@plt+0x7c4>
   11cd0:	ldr	r3, [r3, #12]
   11cd4:	cmp	r3, #0
   11cd8:	movlt	r3, #10
   11cdc:	ldrlt	r2, [pc, #-64]	; 11ca4 <__assert_fail@plt+0x7c4>
   11ce0:	strlt	r3, [r2, #12]
   11ce4:	ldr	r3, [pc, #-68]	; 11ca8 <__assert_fail@plt+0x7c8>
   11ce8:	ldr	r0, [r3, #36]	; 0x24
   11cec:	ldr	r3, [sp, #24]
   11cf0:	cmp	r0, #0
   11cf4:	sub	sl, r3, #5
   11cf8:	beq	128a8 <__assert_fail@plt+0x13c8>
   11cfc:	ldr	r3, [pc, #-96]	; 11ca4 <__assert_fail@plt+0x7c4>
   11d00:	mov	r1, #0
   11d04:	cmp	sl, #2
   11d08:	strb	r1, [r3]
   11d0c:	bls	12758 <__assert_fail@plt+0x1278>
   11d10:	ldr	r3, [pc, #-112]	; 11ca8 <__assert_fail@plt+0x7c8>
   11d14:	ldr	r3, [r3, #4]
   11d18:	cmp	r3, #0
   11d1c:	moveq	r8, #0
   11d20:	moveq	r9, #0
   11d24:	bne	12738 <__assert_fail@plt+0x1258>
   11d28:	cmp	r9, #0
   11d2c:	ldr	r3, [pc, #-140]	; 11ca8 <__assert_fail@plt+0x7c8>
   11d30:	cmpeq	r8, #2
   11d34:	movcc	r8, #2
   11d38:	str	r8, [r3, #4]
   11d3c:	ldr	r3, [r7]
   11d40:	cmp	r6, r3
   11d44:	ble	11eb8 <__assert_fail@plt+0x9d8>
   11d48:	add	r2, r3, #1
   11d4c:	ldr	r1, [r5, r3, lsl #2]
   11d50:	cmp	r6, r2
   11d54:	str	r2, [r7]
   11d58:	ldr	r2, [pc, #-184]	; 11ca8 <__assert_fail@plt+0x7c8>
   11d5c:	str	r1, [r2, #300]	; 0x12c
   11d60:	lsl	r2, r3, #2
   11d64:	ble	11eb8 <__assert_fail@plt+0x9d8>
   11d68:	add	r2, r5, r2
   11d6c:	ldr	r1, [pc, #-204]	; 11ca8 <__assert_fail@plt+0x7c8>
   11d70:	add	r3, r3, #2
   11d74:	ldr	r2, [r2, #4]
   11d78:	cmp	r6, r3
   11d7c:	str	r2, [r1, #12]
   11d80:	str	r3, [r7]
   11d84:	ble	11eb8 <__assert_fail@plt+0x9d8>
   11d88:	mov	r2, #5
   11d8c:	ldr	r1, [pc, #-320]	; 11c54 <__assert_fail@plt+0x774>
   11d90:	mov	r0, #0
   11d94:	bl	1121c <dcgettext@plt>
   11d98:	ldr	r3, [r7]
   11d9c:	mov	r4, r0
   11da0:	ldr	r0, [r5, r3, lsl #2]
   11da4:	bl	16b00 <__assert_fail@plt+0x5620>
   11da8:	mov	r2, r4
   11dac:	mov	r3, r0
   11db0:	mov	r1, #0
   11db4:	mov	r0, r1
   11db8:	bl	112d0 <error@plt>
   11dbc:	mov	r0, #1
   11dc0:	bl	143a4 <__assert_fail@plt+0x2ec4>
   11dc4:	sub	fp, r0, #48	; 0x30
   11dc8:	mov	r2, fp
   11dcc:	asr	r3, fp, #31
   11dd0:	str	r9, [sp, #48]	; 0x30
   11dd4:	strd	r2, [sp, #32]
   11dd8:	b	11588 <__assert_fail@plt+0xa8>
   11ddc:	ldrd	r2, [sp, #32]
   11de0:	orrs	r3, r2, r3
   11de4:	bne	11ccc <__assert_fail@plt+0x7ec>
   11de8:	mov	r2, #5
   11dec:	ldr	r1, [pc, #-412]	; 11c58 <__assert_fail@plt+0x778>
   11df0:	mov	r0, #0
   11df4:	bl	1121c <dcgettext@plt>
   11df8:	mov	r4, r0
   11dfc:	ldr	r0, [pc, #-424]	; 11c5c <__assert_fail@plt+0x77c>
   11e00:	bl	16b00 <__assert_fail@plt+0x5620>
   11e04:	mov	r1, #0
   11e08:	mov	r3, r4
   11e0c:	ldr	r2, [pc, #-436]	; 11c60 <__assert_fail@plt+0x780>
   11e10:	str	r0, [sp]
   11e14:	mov	r0, r1
   11e18:	bl	112d0 <error@plt>
   11e1c:	mov	r0, #1
   11e20:	bl	143a4 <__assert_fail@plt+0x2ec4>
   11e24:	strd	r2, [sp, #32]
   11e28:	str	r9, [sp, #48]	; 0x30
   11e2c:	b	11588 <__assert_fail@plt+0xa8>
   11e30:	ldr	r1, [pc, #-468]	; 11c64 <__assert_fail@plt+0x784>
   11e34:	mov	r2, #5
   11e38:	mov	r0, #0
   11e3c:	bl	1121c <dcgettext@plt>
   11e40:	mov	r1, #0
   11e44:	mov	r2, r0
   11e48:	mov	r0, #1
   11e4c:	bl	112d0 <error@plt>
   11e50:	mov	r2, #5
   11e54:	ldr	r1, [pc, #-500]	; 11c68 <__assert_fail@plt+0x788>
   11e58:	mov	r0, #0
   11e5c:	bl	1121c <dcgettext@plt>
   11e60:	mov	r5, r0
   11e64:	ldr	r0, [r4]
   11e68:	bl	16b00 <__assert_fail@plt+0x5620>
   11e6c:	mov	r2, r5
   11e70:	mov	r1, #0
   11e74:	mov	r3, r0
   11e78:	mov	r0, #1
   11e7c:	bl	112d0 <error@plt>
   11e80:	bl	1121c <dcgettext@plt>
   11e84:	ldr	r1, [pc, #-516]	; 11c88 <__assert_fail@plt+0x7a8>
   11e88:	mvn	r2, #0
   11e8c:	mvn	r3, #0
   11e90:	str	sl, [sp, #16]
   11e94:	strd	r2, [sp]
   11e98:	str	r1, [sp, #8]
   11e9c:	mov	r2, #1
   11ea0:	mov	r3, #0
   11ea4:	str	r0, [sp, #12]
   11ea8:	mov	r0, r9
   11eac:	bl	17a88 <__assert_fail@plt+0x65a8>
   11eb0:	strd	r0, [sp, #32]
   11eb4:	b	11588 <__assert_fail@plt+0xa8>
   11eb8:	ldr	r3, [pc, #-536]	; 11ca8 <__assert_fail@plt+0x7c8>
   11ebc:	ldr	r0, [r3, #36]	; 0x24
   11ec0:	cmp	r0, #0
   11ec4:	beq	11ee4 <__assert_fail@plt+0xa04>
   11ec8:	bl	11354 <strlen@plt>
   11ecc:	ldr	r3, [pc, #-556]	; 11ca8 <__assert_fail@plt+0x7c8>
   11ed0:	ldr	r3, [r3, #4]
   11ed4:	cmp	r0, r3
   11ed8:	movhi	r2, #5
   11edc:	ldrhi	r1, [pc, #-632]	; 11c6c <__assert_fail@plt+0x78c>
   11ee0:	bhi	11828 <__assert_fail@plt+0x348>
   11ee4:	ldr	r3, [pc, #-580]	; 11ca8 <__assert_fail@plt+0x7c8>
   11ee8:	ldr	r1, [pc, #-640]	; 11c70 <__assert_fail@plt+0x790>
   11eec:	ldr	r4, [r3, #300]	; 0x12c
   11ef0:	mov	r0, r4
   11ef4:	bl	11168 <strcmp@plt>
   11ef8:	cmp	r0, #0
   11efc:	beq	11f1c <__assert_fail@plt+0xa3c>
   11f00:	mov	r3, #0
   11f04:	mov	r1, r4
   11f08:	mov	r2, r3
   11f0c:	mov	r0, r3
   11f10:	bl	149ac <__assert_fail@plt+0x34cc>
   11f14:	cmp	r0, #0
   11f18:	blt	12d78 <__assert_fail@plt+0x1898>
   11f1c:	ldr	r2, [pc, #-688]	; 11c74 <__assert_fail@plt+0x794>
   11f20:	mov	r1, #0
   11f24:	mov	r0, #3
   11f28:	bl	11264 <__fxstat64@plt>
   11f2c:	cmp	r0, #0
   11f30:	bne	12878 <__assert_fail@plt+0x1398>
   11f34:	ldr	r3, [sp, #68]	; 0x44
   11f38:	cmp	r3, #0
   11f3c:	bne	11f5c <__assert_fail@plt+0xa7c>
   11f40:	ldr	r3, [pc, #-672]	; 11ca8 <__assert_fail@plt+0x7c8>
   11f44:	ldr	r2, [pc, #-724]	; 11c78 <__assert_fail@plt+0x798>
   11f48:	ldr	r3, [r3, #104]	; 0x68
   11f4c:	sub	r1, r3, #131072	; 0x20000
   11f50:	cmp	r1, r2
   11f54:	movhi	r3, #131072	; 0x20000
   11f58:	str	r3, [sp, #68]	; 0x44
   11f5c:	ldr	r3, [sp, #68]	; 0x44
   11f60:	ldr	r0, [sp, #56]	; 0x38
   11f64:	add	r1, r3, #1
   11f68:	bl	173b0 <__assert_fail@plt+0x5ed0>
   11f6c:	cmp	sl, #1
   11f70:	str	r0, [sp, #104]	; 0x68
   11f74:	bls	12cac <__assert_fail@plt+0x17cc>
   11f78:	mvn	r2, #0
   11f7c:	mvn	r3, #-2147483648	; 0x80000000
   11f80:	mvn	r7, #0
   11f84:	strd	r2, [sp, #48]	; 0x30
   11f88:	ldr	r3, [pc, #-744]	; 11ca8 <__assert_fail@plt+0x7c8>
   11f8c:	ldr	r3, [r3, #40]	; 0x28
   11f90:	cmp	r3, #0
   11f94:	beq	11fd8 <__assert_fail@plt+0xaf8>
   11f98:	ldr	r0, [pc, #-804]	; 11c7c <__assert_fail@plt+0x79c>
   11f9c:	bl	11444 <sigemptyset@plt>
   11fa0:	add	r2, sp, #112	; 0x70
   11fa4:	mov	r1, #0
   11fa8:	mov	r0, #13
   11fac:	bl	11270 <sigaction@plt>
   11fb0:	ldr	r3, [sp, #112]	; 0x70
   11fb4:	cmp	r3, #1
   11fb8:	beq	11fc8 <__assert_fail@plt+0xae8>
   11fbc:	mov	r1, #13
   11fc0:	ldr	r0, [pc, #-844]	; 11c7c <__assert_fail@plt+0x79c>
   11fc4:	bl	11300 <sigaddset@plt>
   11fc8:	ldr	r2, [pc, #-848]	; 11c80 <__assert_fail@plt+0x7a0>
   11fcc:	mov	r0, #0
   11fd0:	add	r1, r2, #148	; 0x94
   11fd4:	bl	11198 <sigprocmask@plt>
   11fd8:	ldr	r3, [sp, #24]
   11fdc:	sub	r3, r3, #2
   11fe0:	cmp	r3, #5
   11fe4:	ldrls	pc, [pc, r3, lsl #2]
   11fe8:	b	12628 <__assert_fail@plt+0x1148>
   11fec:	andeq	r2, r1, r4, lsr #7
   11ff0:	andeq	r2, r1, r4, lsl #6
   11ff4:	andeq	r2, r1, r4, lsl #6
   11ff8:	muleq	r1, r4, r2
   11ffc:	andeq	r2, r1, r4
   12000:	andeq	r2, r1, r8, asr #18
   12004:	ldrd	r0, [sp, #40]	; 0x28
   12008:	ldrd	r2, [sp, #32]
   1200c:	cmp	r1, r3
   12010:	cmpeq	r0, r2
   12014:	bhi	1335c <__assert_fail@plt+0x1e7c>
   12018:	ldrd	r0, [sp, #48]	; 0x30
   1201c:	cmp	r1, r3
   12020:	cmpeq	r0, r2
   12024:	bcc	1335c <__assert_fail@plt+0x1e7c>
   12028:	ldrd	r2, [sp, #32]
   1202c:	ldrd	r0, [sp, #48]	; 0x30
   12030:	bl	18a18 <__assert_fail@plt+0x7538>
   12034:	ldrd	r2, [sp, #40]	; 0x28
   12038:	cmp	r3, #0
   1203c:	cmpeq	r2, #1
   12040:	mov	ip, r1
   12044:	str	r0, [sp, #56]	; 0x38
   12048:	str	r1, [sp, #60]	; 0x3c
   1204c:	bls	130e8 <__assert_fail@plt+0x1c08>
   12050:	subs	r2, r2, #1
   12054:	sbc	r3, r3, #0
   12058:	mov	r9, r3
   1205c:	mov	r8, r2
   12060:	mul	lr, r0, r9
   12064:	umull	r0, r1, r0, r8
   12068:	mla	ip, r8, ip, lr
   1206c:	subs	r4, r0, #1
   12070:	mov	r3, #0
   12074:	mov	r2, r7
   12078:	add	r1, ip, r1
   1207c:	sbc	r5, r1, #0
   12080:	cmp	r4, r7
   12084:	strd	r2, [sp, #24]
   12088:	sbcs	r3, r5, r3
   1208c:	mov	sl, r4
   12090:	mov	fp, r5
   12094:	bge	1304c <__assert_fail@plt+0x1b6c>
   12098:	ldr	r0, [sp, #104]	; 0x68
   1209c:	sub	r7, r7, r4
   120a0:	mov	r2, r7
   120a4:	add	r1, r0, r4
   120a8:	bl	111a4 <memmove@plt>
   120ac:	strd	sl, [sp, #24]
   120b0:	mov	r3, #0
   120b4:	str	r3, [sp, #96]	; 0x60
   120b8:	mov	r3, #1
   120bc:	str	r3, [sp, #100]	; 0x64
   120c0:	ldrd	r2, [sp, #40]	; 0x28
   120c4:	mov	r0, r7
   120c8:	ldrd	r6, [sp, #24]
   120cc:	orr	r5, r2, r3
   120d0:	str	r5, [sp, #24]
   120d4:	ldrd	r2, [sp, #48]	; 0x30
   120d8:	cmp	r6, r2
   120dc:	sbcs	r3, r7, r3
   120e0:	bge	132a4 <__assert_fail@plt+0x1dc4>
   120e4:	cmn	r0, #1
   120e8:	beq	12860 <__assert_fail@plt+0x1380>
   120ec:	cmp	r0, #0
   120f0:	beq	132a4 <__assert_fail@plt+0x1dc4>
   120f4:	mov	r2, r0
   120f8:	ldrd	r0, [sp, #48]	; 0x30
   120fc:	mov	r3, #0
   12100:	ldr	r4, [sp, #104]	; 0x68
   12104:	subs	r0, r0, r6
   12108:	sbc	r1, r1, r7
   1210c:	cmp	r2, r0
   12110:	sbcs	ip, r3, r1
   12114:	movlt	r0, r2
   12118:	add	r3, r4, r0
   1211c:	mov	r5, r3
   12120:	mov	r2, #0
   12124:	str	r0, [sp, #72]	; 0x48
   12128:	str	r2, [sp, #96]	; 0x60
   1212c:	cmp	r5, r4
   12130:	mvn	r0, #0
   12134:	beq	120d4 <__assert_fail@plt+0xbf4>
   12138:	subs	r0, sl, r6
   1213c:	sbc	r1, fp, r7
   12140:	cmp	r0, #0
   12144:	sbcs	r3, r1, #0
   12148:	ldr	r2, [sp, #72]	; 0x48
   1214c:	movlt	r0, #0
   12150:	movlt	r1, r0
   12154:	mov	r3, #0
   12158:	cmp	r2, r0
   1215c:	sbcs	ip, r3, r1
   12160:	ldr	r3, [sp, #72]	; 0x48
   12164:	movlt	r0, r2
   12168:	sub	r2, r3, r0
   1216c:	ldr	r3, [pc, #-1232]	; 11ca4 <__assert_fail@plt+0x7c4>
   12170:	add	r0, r4, r0
   12174:	ldr	r1, [r3, #12]
   12178:	bl	113fc <memchr@plt>
   1217c:	subs	r3, r0, #0
   12180:	ldrd	r0, [sp, #40]	; 0x28
   12184:	movne	r2, #1
   12188:	addne	r3, r3, #1
   1218c:	strne	r2, [sp, #88]	; 0x58
   12190:	streq	r3, [sp, #88]	; 0x58
   12194:	moveq	r3, r5
   12198:	cmp	r9, r1
   1219c:	sub	r2, r3, r4
   121a0:	cmpeq	r8, r0
   121a4:	str	r2, [sp, #80]	; 0x50
   121a8:	beq	13028 <__assert_fail@plt+0x1b48>
   121ac:	ldrd	r0, [sp, #40]	; 0x28
   121b0:	orrs	r2, r0, r1
   121b4:	beq	12e38 <__assert_fail@plt+0x1958>
   121b8:	ldr	r2, [sp, #80]	; 0x50
   121bc:	ldr	r4, [sp, #88]	; 0x58
   121c0:	adds	r6, r6, r2
   121c4:	mov	r2, r4
   121c8:	adc	r7, r7, #0
   121cc:	mov	r4, r3
   121d0:	mov	r3, r2
   121d4:	cmp	sl, r6
   121d8:	sbcs	r2, fp, r7
   121dc:	movge	r2, r3
   121e0:	orrlt	r2, r3, #1
   121e4:	tst	r2, #255	; 0xff
   121e8:	beq	12c7c <__assert_fail@plt+0x179c>
   121ec:	eor	r2, r3, #1
   121f0:	cmp	r5, r4
   121f4:	movne	r2, #0
   121f8:	andeq	r2, r2, #1
   121fc:	cmp	r2, #0
   12200:	bne	12ca0 <__assert_fail@plt+0x17c0>
   12204:	ldrd	r0, [sp, #40]	; 0x28
   12208:	adds	r8, r8, #1
   1220c:	adc	r9, r9, #0
   12210:	cmp	r9, r1
   12214:	cmpeq	r8, r0
   12218:	ldr	r1, [sp, #24]
   1221c:	movhi	r2, #1
   12220:	movls	r2, #0
   12224:	cmp	r1, #0
   12228:	moveq	r2, #0
   1222c:	andne	r2, r2, #1
   12230:	cmp	r2, #0
   12234:	bne	122d0 <__assert_fail@plt+0xdf0>
   12238:	ldrd	r0, [sp, #32]
   1223c:	cmp	r9, r1
   12240:	cmpeq	r8, r0
   12244:	beq	12748 <__assert_fail@plt+0x1268>
   12248:	ldrd	r0, [sp, #56]	; 0x38
   1224c:	adds	r0, r0, sl
   12250:	adc	r1, r1, fp
   12254:	mov	sl, r0
   12258:	mov	fp, r1
   1225c:	cmp	sl, r6
   12260:	sbcs	r1, fp, r7
   12264:	movge	r3, r2
   12268:	bge	121d4 <__assert_fail@plt+0xcf4>
   1226c:	ldrd	r0, [sp, #40]	; 0x28
   12270:	orrs	r2, r0, r1
   12274:	bne	121d4 <__assert_fail@plt+0xcf4>
   12278:	mov	r2, #0
   1227c:	mov	r1, r2
   12280:	mov	r0, #1
   12284:	str	r3, [sp, #100]	; 0x64
   12288:	bl	14010 <__assert_fail@plt+0x2b30>
   1228c:	ldr	r3, [sp, #100]	; 0x64
   12290:	b	121d4 <__assert_fail@plt+0xcf4>
   12294:	ldrd	r2, [sp, #40]	; 0x28
   12298:	orrs	r3, r2, r3
   1229c:	bne	12e60 <__assert_fail@plt+0x1980>
   122a0:	ldrd	r4, [sp, #32]
   122a4:	ldrd	r0, [sp, #48]	; 0x30
   122a8:	mov	r2, r4
   122ac:	mov	r3, r5
   122b0:	bl	18a18 <__assert_fail@plt+0x7538>
   122b4:	mov	r2, r4
   122b8:	mov	r3, r5
   122bc:	str	r7, [sp]
   122c0:	strd	r2, [sp, #8]
   122c4:	ldr	r3, [sp, #68]	; 0x44
   122c8:	ldr	r2, [sp, #104]	; 0x68
   122cc:	bl	1410c <__assert_fail@plt+0x2c2c>
   122d0:	mov	r0, #0
   122d4:	bl	114c8 <close@plt>
   122d8:	subs	r4, r0, #0
   122dc:	bne	12878 <__assert_fail@plt+0x1398>
   122e0:	ldr	r3, [pc, #-1604]	; 11ca4 <__assert_fail@plt+0x7c4>
   122e4:	ldr	r2, [pc, #-1604]	; 11ca8 <__assert_fail@plt+0x7c8>
   122e8:	ldr	r1, [r3, #8]
   122ec:	ldr	r3, [pc, #-1612]	; 11ca8 <__assert_fail@plt+0x7c8>
   122f0:	ldr	r2, [r2, #288]	; 0x120
   122f4:	ldr	r3, [r3]
   122f8:	bl	13d54 <__assert_fail@plt+0x2874>
   122fc:	mov	r0, r4
   12300:	bl	11348 <exit@plt>
   12304:	mov	r8, #1
   12308:	mov	sl, r8
   1230c:	mov	r4, #0
   12310:	mov	r5, #0
   12314:	ldr	r2, [sp, #68]	; 0x44
   12318:	ldr	r1, [sp, #104]	; 0x68
   1231c:	mov	r0, #0
   12320:	bl	16b18 <__assert_fail@plt+0x5638>
   12324:	cmn	r0, #1
   12328:	mov	fp, r0
   1232c:	beq	12878 <__assert_fail@plt+0x1398>
   12330:	ldr	r3, [pc, #-1684]	; 11ca4 <__assert_fail@plt+0x7c4>
   12334:	ldr	r2, [r3, #12]
   12338:	ldr	r3, [sp, #104]	; 0x68
   1233c:	add	r6, r3, r0
   12340:	mov	r7, r3
   12344:	mov	r9, r3
   12348:	strb	r2, [r3, r0]
   1234c:	ldr	r3, [pc, #-1712]	; 11ca4 <__assert_fail@plt+0x7c4>
   12350:	mov	r0, r9
   12354:	ldr	r1, [r3, #12]
   12358:	bl	1124c <rawmemchr@plt>
   1235c:	cmp	r6, r0
   12360:	beq	12704 <__assert_fail@plt+0x1224>
   12364:	ldrd	r2, [sp, #32]
   12368:	adds	r4, r4, #1
   1236c:	adc	r5, r5, #0
   12370:	cmp	r5, r3
   12374:	cmpeq	r4, r2
   12378:	add	r9, r0, #1
   1237c:	bcc	1234c <__assert_fail@plt+0xe6c>
   12380:	mov	r0, r8
   12384:	sub	r2, r9, r7
   12388:	mov	r1, r7
   1238c:	bl	14010 <__assert_fail@plt+0x2b30>
   12390:	mov	r7, r9
   12394:	mov	r4, #0
   12398:	mov	r5, #0
   1239c:	mov	r8, sl
   123a0:	b	1234c <__assert_fail@plt+0xe6c>
   123a4:	mov	r3, #0
   123a8:	ldr	r2, [sp, #68]	; 0x44
   123ac:	mov	r8, #0
   123b0:	mov	r9, #0
   123b4:	mov	r6, r3
   123b8:	mov	r4, r3
   123bc:	mvn	r2, r2
   123c0:	str	r3, [sp, #72]	; 0x48
   123c4:	str	r3, [sp, #56]	; 0x38
   123c8:	str	r2, [sp, #96]	; 0x60
   123cc:	ldr	r2, [sp, #68]	; 0x44
   123d0:	ldr	r1, [sp, #104]	; 0x68
   123d4:	mov	r0, #0
   123d8:	bl	16b18 <__assert_fail@plt+0x5638>
   123dc:	cmn	r0, #1
   123e0:	mov	r7, r0
   123e4:	beq	12878 <__assert_fail@plt+0x1398>
   123e8:	cmp	r0, #0
   123ec:	beq	12918 <__assert_fail@plt+0x1438>
   123f0:	str	r6, [sp, #24]
   123f4:	ldr	r5, [sp, #104]	; 0x68
   123f8:	mov	r6, r4
   123fc:	b	12540 <__assert_fail@plt+0x1060>
   12400:	sub	r4, sl, r8
   12404:	sub	r4, r4, ip
   12408:	ldr	r3, [pc, #-1900]	; 11ca4 <__assert_fail@plt+0x7c4>
   1240c:	sub	fp, r4, #1
   12410:	add	ip, r5, fp
   12414:	ldr	r1, [r3, #12]
   12418:	adds	r3, ip, #0
   1241c:	movne	r3, #1
   12420:	mov	r2, r4
   12424:	mov	r0, r5
   12428:	str	r3, [sp, #48]	; 0x30
   1242c:	str	ip, [sp, #40]	; 0x28
   12430:	bl	11384 <memrchr@plt>
   12434:	ldr	r2, [sp, #24]
   12438:	cmp	r2, #0
   1243c:	mov	r3, r0
   12440:	beq	125b4 <__assert_fail@plt+0x10d4>
   12444:	orrs	r2, r8, r9
   12448:	moveq	r0, #1
   1244c:	movne	r0, #0
   12450:	cmp	r3, #0
   12454:	moveq	r2, r0
   12458:	orrne	r2, r0, #1
   1245c:	cmp	r2, #0
   12460:	bne	12650 <__assert_fail@plt+0x1170>
   12464:	ldr	r3, [sp, #72]	; 0x48
   12468:	cmp	r3, #0
   1246c:	bne	1260c <__assert_fail@plt+0x112c>
   12470:	ldr	r3, [sp, #40]	; 0x28
   12474:	cmp	r3, #0
   12478:	beq	126c0 <__assert_fail@plt+0x11e0>
   1247c:	orrs	r3, r8, r9
   12480:	moveq	r0, #1
   12484:	movne	r0, #0
   12488:	mov	r1, r5
   1248c:	adds	r8, r8, r4
   12490:	mov	r2, r4
   12494:	adc	r9, r9, #0
   12498:	bl	14010 <__assert_fail@plt+0x2b30>
   1249c:	sub	r7, r7, r4
   124a0:	add	r5, r5, r4
   124a4:	cmp	r7, #0
   124a8:	ldr	fp, [sp, #40]	; 0x28
   124ac:	clz	fp, fp
   124b0:	lsr	fp, fp, #5
   124b4:	moveq	fp, #0
   124b8:	cmp	fp, #0
   124bc:	beq	12520 <__assert_fail@plt+0x1040>
   124c0:	mov	r4, r7
   124c4:	ldr	r3, [sp, #24]
   124c8:	sub	r2, r6, r3
   124cc:	cmp	r2, r4
   124d0:	bcs	124f8 <__assert_fail@plt+0x1018>
   124d4:	ldr	r3, [sp, #96]	; 0x60
   124d8:	cmp	r3, r6
   124dc:	bcc	1310c <__assert_fail@plt+0x1c2c>
   124e0:	ldr	r3, [sp, #68]	; 0x44
   124e4:	ldr	r0, [sp, #56]	; 0x38
   124e8:	add	r6, r6, r3
   124ec:	mov	r1, r6
   124f0:	bl	17400 <__assert_fail@plt+0x5f20>
   124f4:	str	r0, [sp, #56]	; 0x38
   124f8:	ldr	r3, [sp, #56]	; 0x38
   124fc:	ldr	sl, [sp, #24]
   12500:	mov	r1, r5
   12504:	add	r0, r3, sl
   12508:	mov	r2, r4
   1250c:	sub	r7, r7, r4
   12510:	add	r5, r5, r4
   12514:	bl	111c8 <memcpy@plt>
   12518:	add	r3, sl, r4
   1251c:	str	r3, [sp, #24]
   12520:	ldr	r3, [sp, #48]	; 0x30
   12524:	cmp	r3, #0
   12528:	movne	r3, #0
   1252c:	strne	r3, [sp, #72]	; 0x48
   12530:	movne	r8, #0
   12534:	movne	r9, #0
   12538:	cmp	r7, #0
   1253c:	beq	126f8 <__assert_fail@plt+0x1218>
   12540:	ldr	ip, [sp, #24]
   12544:	ldrd	sl, [sp, #32]
   12548:	mov	r2, ip
   1254c:	mov	r3, #0
   12550:	subs	r0, sl, r8
   12554:	sbc	r1, fp, r9
   12558:	strd	r2, [sp, #80]	; 0x50
   1255c:	subs	r2, r0, ip
   12560:	sbc	r3, r1, r3
   12564:	mov	r1, r3
   12568:	mov	r3, #0
   1256c:	mov	r0, r2
   12570:	cmp	r1, r3
   12574:	mov	r2, r7
   12578:	cmpeq	r0, r7
   1257c:	strd	r2, [sp, #88]	; 0x58
   12580:	bls	12400 <__assert_fail@plt+0xf20>
   12584:	ldr	r3, [pc, #-2280]	; 11ca4 <__assert_fail@plt+0x7c4>
   12588:	mov	r2, r7
   1258c:	mov	r4, #0
   12590:	ldr	r1, [r3, #12]
   12594:	mov	r0, r5
   12598:	str	r4, [sp, #40]	; 0x28
   1259c:	bl	11384 <memrchr@plt>
   125a0:	ldr	r2, [sp, #24]
   125a4:	str	r4, [sp, #48]	; 0x30
   125a8:	cmp	r2, #0
   125ac:	mov	r3, r0
   125b0:	bne	12444 <__assert_fail@plt+0xf64>
   125b4:	cmp	r3, #0
   125b8:	beq	132fc <__assert_fail@plt+0x1e1c>
   125bc:	sub	sl, r3, r5
   125c0:	add	sl, sl, #1
   125c4:	orrs	r3, r8, r9
   125c8:	moveq	r0, #1
   125cc:	movne	r0, #0
   125d0:	mov	r1, r5
   125d4:	adds	r8, r8, sl
   125d8:	mov	r2, sl
   125dc:	adc	r9, r9, #0
   125e0:	bl	14010 <__assert_fail@plt+0x2b30>
   125e4:	ldr	r3, [sp, #40]	; 0x28
   125e8:	sub	r7, r7, sl
   125ec:	cmp	r3, #0
   125f0:	add	r5, r5, sl
   125f4:	beq	126ac <__assert_fail@plt+0x11cc>
   125f8:	mov	r3, #0
   125fc:	sub	r4, r4, sl
   12600:	str	r3, [sp, #24]
   12604:	mov	r3, #1
   12608:	str	r3, [sp, #72]	; 0x48
   1260c:	ldr	r2, [sp, #48]	; 0x30
   12610:	cmp	r4, #0
   12614:	moveq	r2, #0
   12618:	andne	r2, r2, #1
   1261c:	cmp	r2, #0
   12620:	bne	124c4 <__assert_fail@plt+0xfe4>
   12624:	b	124a4 <__assert_fail@plt+0xfc4>
   12628:	mov	r4, #0
   1262c:	mov	r5, #0
   12630:	mvn	ip, #0
   12634:	ldr	r3, [sp, #68]	; 0x44
   12638:	ldr	r2, [sp, #104]	; 0x68
   1263c:	ldrd	r0, [sp, #32]
   12640:	strd	r4, [sp, #8]
   12644:	str	ip, [sp]
   12648:	bl	1410c <__assert_fail@plt+0x2c2c>
   1264c:	b	122d0 <__assert_fail@plt+0xdf0>
   12650:	ldrd	sl, [sp, #80]	; 0x50
   12654:	ldr	r6, [sp, #24]
   12658:	ldr	r1, [sp, #56]	; 0x38
   1265c:	adds	sl, sl, r8
   12660:	mov	r2, r6
   12664:	adc	fp, fp, r9
   12668:	str	r3, [sp, #100]	; 0x64
   1266c:	bl	14010 <__assert_fail@plt+0x2b30>
   12670:	ldr	r3, [sp, #68]	; 0x44
   12674:	mov	r8, sl
   12678:	cmp	r3, r6
   1267c:	mov	r9, fp
   12680:	ldr	r3, [sp, #100]	; 0x64
   12684:	ldrcs	r6, [sp, #68]	; 0x44
   12688:	bcs	125b4 <__assert_fail@plt+0x10d4>
   1268c:	ldr	r6, [sp, #68]	; 0x44
   12690:	ldr	r0, [sp, #56]	; 0x38
   12694:	mov	r1, r6
   12698:	str	r3, [sp, #24]
   1269c:	bl	17400 <__assert_fail@plt+0x5f20>
   126a0:	ldr	r3, [sp, #24]
   126a4:	str	r0, [sp, #56]	; 0x38
   126a8:	b	125b4 <__assert_fail@plt+0x10d4>
   126ac:	ldr	r3, [sp, #40]	; 0x28
   126b0:	str	r3, [sp, #24]
   126b4:	mov	r3, #1
   126b8:	str	r3, [sp, #72]	; 0x48
   126bc:	b	124a4 <__assert_fail@plt+0xfc4>
   126c0:	orrs	r3, r8, r9
   126c4:	ldrd	r2, [sp, #88]	; 0x58
   126c8:	moveq	r0, #1
   126cc:	movne	r0, #0
   126d0:	adds	r2, r2, r8
   126d4:	mov	r1, r5
   126d8:	adc	r3, r3, r9
   126dc:	mov	r8, r2
   126e0:	mov	r2, r7
   126e4:	mov	r9, r3
   126e8:	add	r5, r5, r7
   126ec:	bl	14010 <__assert_fail@plt+0x2b30>
   126f0:	ldr	r7, [sp, #40]	; 0x28
   126f4:	b	124a4 <__assert_fail@plt+0xfc4>
   126f8:	mov	r4, r6
   126fc:	ldr	r6, [sp, #24]
   12700:	b	123cc <__assert_fail@plt+0xeec>
   12704:	cmp	r6, r7
   12708:	beq	12720 <__assert_fail@plt+0x1240>
   1270c:	mov	r0, r8
   12710:	sub	r2, r6, r7
   12714:	mov	r1, r7
   12718:	bl	14010 <__assert_fail@plt+0x2b30>
   1271c:	mov	r8, #0
   12720:	cmp	fp, #0
   12724:	bne	12314 <__assert_fail@plt+0xe34>
   12728:	b	122d0 <__assert_fail@plt+0xdf0>
   1272c:	mov	r2, #5
   12730:	ldr	r1, [pc, #-2740]	; 11c84 <__assert_fail@plt+0x7a4>
   12734:	b	11828 <__assert_fail@plt+0x348>
   12738:	ldr	r2, [pc, #-2716]	; 11ca4 <__assert_fail@plt+0x7c4>
   1273c:	mov	r3, #0
   12740:	strb	r3, [r2]
   12744:	b	11d3c <__assert_fail@plt+0x85c>
   12748:	ldrd	sl, [sp, #48]	; 0x30
   1274c:	subs	sl, sl, #1
   12750:	sbc	fp, fp, #0
   12754:	b	1225c <__assert_fail@plt+0xd7c>
   12758:	ldr	r3, [pc, #-2776]	; 11c88 <__assert_fail@plt+0x7a8>
   1275c:	mov	r2, #10
   12760:	str	r3, [sp]
   12764:	add	r3, sp, #112	; 0x70
   12768:	bl	17b30 <__assert_fail@plt+0x6650>
   1276c:	ldrd	r2, [sp, #32]
   12770:	subs	r2, r2, #1
   12774:	sbc	r3, r3, #0
   12778:	cmp	r0, #0
   1277c:	bne	127c4 <__assert_fail@plt+0x12e4>
   12780:	ldrd	r0, [sp, #32]
   12784:	ldrd	r8, [sp, #112]	; 0x70
   12788:	mvn	r1, r1
   1278c:	cmp	r1, r9
   12790:	mvn	r0, r0
   12794:	cmpeq	r0, r8
   12798:	ldrd	r0, [sp, #32]
   1279c:	movcc	ip, #0
   127a0:	movcs	ip, #1
   127a4:	cmp	r9, r1
   127a8:	cmpeq	r8, r0
   127ac:	movcs	r1, #0
   127b0:	andcc	r1, ip, #1
   127b4:	cmp	r1, #0
   127b8:	beq	127c4 <__assert_fail@plt+0x12e4>
   127bc:	adds	r2, r2, r8
   127c0:	adc	r3, r3, r9
   127c4:	strd	r2, [sp, #48]	; 0x30
   127c8:	ldr	r3, [pc, #-2860]	; 11ca4 <__assert_fail@plt+0x7c4>
   127cc:	mov	r8, #0
   127d0:	mov	r9, #0
   127d4:	ldr	r0, [r3, #4]
   127d8:	bl	11354 <strlen@plt>
   127dc:	ldrd	r2, [sp, #48]	; 0x30
   127e0:	mov	fp, #0
   127e4:	mov	r4, r0
   127e8:	mov	r0, r2
   127ec:	mov	r1, r3
   127f0:	mov	r2, r4
   127f4:	mov	r3, #0
   127f8:	bl	18a18 <__assert_fail@plt+0x7538>
   127fc:	adds	r8, r8, #1
   12800:	adc	r9, r9, #0
   12804:	mov	r2, r0
   12808:	mov	r3, r1
   1280c:	orrs	r1, r2, r3
   12810:	bne	127e8 <__assert_fail@plt+0x1308>
   12814:	ldr	r3, [pc, #-2932]	; 11ca8 <__assert_fail@plt+0x7c8>
   12818:	ldr	r2, [r3, #4]
   1281c:	ldr	r3, [pc, #-2944]	; 11ca4 <__assert_fail@plt+0x7c4>
   12820:	cmp	r2, #0
   12824:	strb	fp, [r3]
   12828:	beq	11d28 <__assert_fail@plt+0x848>
   1282c:	mov	r3, #0
   12830:	cmp	r9, r3
   12834:	cmpeq	r8, r2
   12838:	bls	12738 <__assert_fail@plt+0x1258>
   1283c:	mov	r2, #5
   12840:	ldr	r1, [pc, #-3004]	; 11c8c <__assert_fail@plt+0x7ac>
   12844:	mov	r0, #0
   12848:	bl	1121c <dcgettext@plt>
   1284c:	strd	r8, [sp]
   12850:	mov	r1, #0
   12854:	mov	r2, r0
   12858:	mov	r0, #1
   1285c:	bl	112d0 <error@plt>
   12860:	ldr	r2, [sp, #68]	; 0x44
   12864:	ldr	r1, [sp, #104]	; 0x68
   12868:	mov	r0, #0
   1286c:	bl	16b18 <__assert_fail@plt+0x5638>
   12870:	cmn	r0, #1
   12874:	bne	120ec <__assert_fail@plt+0xc0c>
   12878:	bl	1139c <__errno_location@plt>
   1287c:	ldr	r3, [pc, #-3036]	; 11ca8 <__assert_fail@plt+0x7c8>
   12880:	mov	r1, #3
   12884:	ldr	r2, [r3, #300]	; 0x12c
   12888:	ldr	r4, [r0]
   1288c:	mov	r0, #0
   12890:	bl	1697c <__assert_fail@plt+0x549c>
   12894:	mov	r3, r0
   12898:	mov	r1, r4
   1289c:	ldr	r2, [pc, #-3092]	; 11c90 <__assert_fail@plt+0x7b0>
   128a0:	mov	r0, #1
   128a4:	bl	112d0 <error@plt>
   128a8:	cmp	sl, #2
   128ac:	bhi	11d10 <__assert_fail@plt+0x830>
   128b0:	ldrd	r2, [sp, #32]
   128b4:	subs	r2, r2, #1
   128b8:	sbc	r3, r3, #0
   128bc:	b	127c4 <__assert_fail@plt+0x12e4>
   128c0:	mov	r2, #5
   128c4:	ldr	r1, [pc, #-3128]	; 11c94 <__assert_fail@plt+0x7b4>
   128c8:	b	11e38 <__assert_fail@plt+0x958>
   128cc:	ldr	r1, [pc, #-3132]	; 11c98 <__assert_fail@plt+0x7b8>
   128d0:	mov	r2, #5
   128d4:	mov	r0, #0
   128d8:	bl	1121c <dcgettext@plt>
   128dc:	mov	r5, r0
   128e0:	ldr	r0, [r4]
   128e4:	bl	16b00 <__assert_fail@plt+0x5620>
   128e8:	mov	r2, r5
   128ec:	mov	r3, r0
   128f0:	b	11db0 <__assert_fail@plt+0x8d0>
   128f4:	cmp	fp, #100	; 0x64
   128f8:	mov	r2, #5
   128fc:	ldrne	r1, [pc, #-3176]	; 11c9c <__assert_fail@plt+0x7bc>
   12900:	bne	128d4 <__assert_fail@plt+0x13f4>
   12904:	ldr	r1, [pc, #-3180]	; 11ca0 <__assert_fail@plt+0x7c0>
   12908:	mov	r0, #0
   1290c:	bl	1121c <dcgettext@plt>
   12910:	mov	r5, r0
   12914:	b	128e0 <__assert_fail@plt+0x1400>
   12918:	cmp	r6, #0
   1291c:	mov	r3, r6
   12920:	beq	1293c <__assert_fail@plt+0x145c>
   12924:	orrs	r2, r8, r9
   12928:	moveq	r0, #1
   1292c:	mov	r2, r3
   12930:	movne	r0, #0
   12934:	ldr	r1, [sp, #56]	; 0x38
   12938:	bl	14010 <__assert_fail@plt+0x2b30>
   1293c:	ldr	r0, [sp, #56]	; 0x38
   12940:	bl	14a70 <__assert_fail@plt+0x3590>
   12944:	b	122d0 <__assert_fail@plt+0xdf0>
   12948:	ldrd	r2, [sp, #40]	; 0x28
   1294c:	orrs	r3, r2, r3
   12950:	bne	12e54 <__assert_fail@plt+0x1974>
   12954:	ldrd	sl, [sp, #32]
   12958:	mov	r3, #0
   1295c:	mvn	r2, #0
   12960:	cmp	fp, r3
   12964:	cmpeq	sl, r2
   12968:	bhi	1310c <__assert_fail@plt+0x1c2c>
   1296c:	mov	r1, #16
   12970:	mov	r0, sl
   12974:	bl	174ac <__assert_fail@plt+0x5fcc>
   12978:	mov	r8, #0
   1297c:	mov	r9, r8
   12980:	mov	r6, sl
   12984:	mvn	r5, #0
   12988:	mov	r4, r0
   1298c:	mov	r7, r0
   12990:	b	129b8 <__assert_fail@plt+0x14d8>
   12994:	bl	134d4 <__assert_fail@plt+0x1ff4>
   12998:	ldr	r3, [pc, #-3320]	; 11ca8 <__assert_fail@plt+0x7c8>
   1299c:	add	r8, r8, #1
   129a0:	ldr	r0, [r3]
   129a4:	bl	178f0 <__assert_fail@plt+0x6410>
   129a8:	str	r5, [r7, #-12]
   129ac:	str	r9, [r7, #-8]
   129b0:	str	r9, [r7, #-4]
   129b4:	str	r0, [r7, #-16]
   129b8:	cmp	r6, r8
   129bc:	add	r7, r7, #16
   129c0:	bne	12994 <__assert_fail@plt+0x14b4>
   129c4:	str	r4, [sp, #56]	; 0x38
   129c8:	mov	r2, #1
   129cc:	mov	r3, #0
   129d0:	mov	r9, #1
   129d4:	mov	fp, #0
   129d8:	str	fp, [sp, #48]	; 0x30
   129dc:	str	fp, [sp, #72]	; 0x48
   129e0:	str	fp, [sp, #88]	; 0x58
   129e4:	strd	r2, [sp, #24]
   129e8:	ldr	r2, [sp, #68]	; 0x44
   129ec:	ldr	r1, [sp, #104]	; 0x68
   129f0:	mov	r0, #0
   129f4:	bl	16b18 <__assert_fail@plt+0x5638>
   129f8:	cmn	r0, #1
   129fc:	beq	12878 <__assert_fail@plt+0x1398>
   12a00:	cmp	r0, #0
   12a04:	beq	130c8 <__assert_fail@plt+0x1be8>
   12a08:	ldr	r4, [sp, #104]	; 0x68
   12a0c:	add	r6, r4, r0
   12a10:	cmp	r4, r6
   12a14:	bne	12a60 <__assert_fail@plt+0x1580>
   12a18:	b	129e8 <__assert_fail@plt+0x1508>
   12a1c:	ldrd	r0, [sp, #24]
   12a20:	cmp	r1, r3
   12a24:	cmpeq	r0, r2
   12a28:	beq	12bc0 <__assert_fail@plt+0x16e0>
   12a2c:	cmp	r7, #0
   12a30:	beq	12a54 <__assert_fail@plt+0x1574>
   12a34:	ldrd	r2, [sp, #24]
   12a38:	ldrd	r0, [sp, #32]
   12a3c:	cmp	r3, r1
   12a40:	cmpeq	r2, r0
   12a44:	beq	12c18 <__assert_fail@plt+0x1738>
   12a48:	adds	r2, r2, #1
   12a4c:	adc	r3, r3, #0
   12a50:	strd	r2, [sp, #24]
   12a54:	cmp	r6, r5
   12a58:	mov	r4, r5
   12a5c:	beq	129e8 <__assert_fail@plt+0x1508>
   12a60:	ldr	r3, [pc, #-3524]	; 11ca4 <__assert_fail@plt+0x7c4>
   12a64:	sub	r2, r6, r4
   12a68:	mov	r0, r4
   12a6c:	ldr	r1, [r3, #12]
   12a70:	bl	113fc <memchr@plt>
   12a74:	ldrd	r2, [sp, #40]	; 0x28
   12a78:	cmp	r0, #0
   12a7c:	addne	r5, r0, #1
   12a80:	moveq	r5, r6
   12a84:	movne	r7, r9
   12a88:	moveq	r7, #0
   12a8c:	orrs	r1, r2, r3
   12a90:	sub	r8, r5, r4
   12a94:	bne	12a1c <__assert_fail@plt+0x153c>
   12a98:	ldr	r2, [sp, #32]
   12a9c:	mov	r1, fp
   12aa0:	ldr	r0, [sp, #56]	; 0x38
   12aa4:	bl	13bb8 <__assert_fail@plt+0x26d8>
   12aa8:	ldr	r3, [pc, #-3592]	; 11ca8 <__assert_fail@plt+0x7c8>
   12aac:	ldr	r2, [sp, #56]	; 0x38
   12ab0:	ldrb	r3, [r3, #304]	; 0x130
   12ab4:	cmp	r3, #0
   12ab8:	ldr	r3, [sp, #48]	; 0x30
   12abc:	orr	r0, r3, r0
   12ac0:	uxtb	r3, r0
   12ac4:	str	r3, [sp, #48]	; 0x30
   12ac8:	lsl	r3, fp, #4
   12acc:	str	r3, [sp, #80]	; 0x50
   12ad0:	add	sl, r2, r3
   12ad4:	bne	12b28 <__assert_fail@plt+0x1648>
   12ad8:	mov	r1, r8
   12adc:	mov	r0, r4
   12ae0:	ldr	r3, [sl, #8]
   12ae4:	mov	r2, r9
   12ae8:	bl	111f8 <fwrite_unlocked@plt>
   12aec:	cmp	r0, #1
   12af0:	beq	12b40 <__assert_fail@plt+0x1660>
   12af4:	bl	1139c <__errno_location@plt>
   12af8:	ldr	r3, [pc, #-3672]	; 11ca8 <__assert_fail@plt+0x7c8>
   12afc:	ldr	r3, [r3, #40]	; 0x28
   12b00:	ldr	r4, [r0]
   12b04:	adds	r0, r3, #0
   12b08:	movne	r0, #1
   12b0c:	cmp	r4, #32
   12b10:	movne	r0, #0
   12b14:	cmp	r0, #0
   12b18:	bne	12c70 <__assert_fail@plt+0x1790>
   12b1c:	ldr	r2, [sl]
   12b20:	mov	r1, #3
   12b24:	b	12890 <__assert_fail@plt+0x13b0>
   12b28:	mov	r1, r4
   12b2c:	ldr	r0, [sl, #4]
   12b30:	mov	r2, r8
   12b34:	bl	14b68 <__assert_fail@plt+0x3688>
   12b38:	cmp	r8, r0
   12b3c:	bne	12af4 <__assert_fail@plt+0x1614>
   12b40:	bl	1139c <__errno_location@plt>
   12b44:	ldr	r3, [pc, #-3748]	; 11ca8 <__assert_fail@plt+0x7c8>
   12b48:	ldr	r1, [r3, #40]	; 0x28
   12b4c:	adds	r3, r1, #0
   12b50:	movne	r3, #1
   12b54:	ldr	r2, [r0]
   12b58:	mov	r4, r0
   12b5c:	cmp	r2, #32
   12b60:	movne	r3, #0
   12b64:	ldr	r2, [sp, #72]	; 0x48
   12b68:	cmp	r3, #0
   12b6c:	moveq	r2, #1
   12b70:	str	r2, [sp, #72]	; 0x48
   12b74:	ldr	r3, [sp, #48]	; 0x30
   12b78:	cmp	r3, #0
   12b7c:	bne	12c28 <__assert_fail@plt+0x1748>
   12b80:	cmp	r7, #0
   12b84:	beq	12a54 <__assert_fail@plt+0x1574>
   12b88:	ldrd	r0, [sp, #32]
   12b8c:	mov	r3, #0
   12b90:	add	fp, fp, #1
   12b94:	cmp	r3, r1
   12b98:	cmpeq	fp, r0
   12b9c:	bne	12a54 <__assert_fail@plt+0x1574>
   12ba0:	ldr	r3, [sp, #72]	; 0x48
   12ba4:	cmp	r3, #0
   12ba8:	beq	12db8 <__assert_fail@plt+0x18d8>
   12bac:	ldr	r3, [sp, #72]	; 0x48
   12bb0:	mov	fp, #0
   12bb4:	str	r3, [sp, #88]	; 0x58
   12bb8:	str	fp, [sp, #72]	; 0x48
   12bbc:	b	12a54 <__assert_fail@plt+0x1574>
   12bc0:	ldr	r3, [pc, #-3872]	; 11ca8 <__assert_fail@plt+0x7c8>
   12bc4:	ldrb	sl, [r3, #304]	; 0x130
   12bc8:	cmp	sl, #0
   12bcc:	bne	12c54 <__assert_fail@plt+0x1774>
   12bd0:	ldr	r3, [pc, #1944]	; 13370 <__assert_fail@plt+0x1e90>
   12bd4:	mov	r1, r8
   12bd8:	mov	r0, r4
   12bdc:	ldr	r3, [r3]
   12be0:	mov	r2, r9
   12be4:	bl	111f8 <fwrite_unlocked@plt>
   12be8:	cmp	r0, #1
   12bec:	beq	12a2c <__assert_fail@plt+0x154c>
   12bf0:	ldr	r3, [pc, #1912]	; 13370 <__assert_fail@plt+0x1e90>
   12bf4:	ldr	r0, [r3]
   12bf8:	bl	11480 <clearerr_unlocked@plt>
   12bfc:	bl	1139c <__errno_location@plt>
   12c00:	mov	r2, #5
   12c04:	ldr	r1, [pc, #1896]	; 13374 <__assert_fail@plt+0x1e94>
   12c08:	ldr	r4, [r0]
   12c0c:	mov	r0, #0
   12c10:	bl	1121c <dcgettext@plt>
   12c14:	b	12894 <__assert_fail@plt+0x13b4>
   12c18:	mov	r2, #1
   12c1c:	mov	r3, #0
   12c20:	strd	r2, [sp, #24]
   12c24:	b	12a54 <__assert_fail@plt+0x1574>
   12c28:	ldr	r3, [sp, #56]	; 0x38
   12c2c:	ldr	r2, [sp, #80]	; 0x50
   12c30:	add	r8, r3, r2
   12c34:	ldr	r0, [r8, #8]
   12c38:	bl	148d4 <__assert_fail@plt+0x33f4>
   12c3c:	cmp	r0, #0
   12c40:	bne	13348 <__assert_fail@plt+0x1e68>
   12c44:	mvn	r3, #1
   12c48:	str	r0, [r8, #8]
   12c4c:	str	r3, [r8, #4]
   12c50:	b	12b80 <__assert_fail@plt+0x16a0>
   12c54:	mov	r1, r4
   12c58:	mov	r2, r8
   12c5c:	mov	r0, r9
   12c60:	bl	14b68 <__assert_fail@plt+0x3688>
   12c64:	cmp	r8, r0
   12c68:	beq	12a2c <__assert_fail@plt+0x154c>
   12c6c:	b	12bfc <__assert_fail@plt+0x171c>
   12c70:	bl	1139c <__errno_location@plt>
   12c74:	mov	r4, r0
   12c78:	b	12b74 <__assert_fail@plt+0x1694>
   12c7c:	mov	r3, r4
   12c80:	ldr	r2, [sp, #72]	; 0x48
   12c84:	ldr	r1, [sp, #80]	; 0x50
   12c88:	mov	r4, r3
   12c8c:	ldr	r3, [sp, #88]	; 0x58
   12c90:	sub	r2, r2, r1
   12c94:	str	r2, [sp, #72]	; 0x48
   12c98:	str	r3, [sp, #100]	; 0x64
   12c9c:	b	1212c <__assert_fail@plt+0xc4c>
   12ca0:	mov	r3, r4
   12ca4:	str	r2, [sp, #96]	; 0x60
   12ca8:	b	12c80 <__assert_fail@plt+0x17a0>
   12cac:	mov	r3, #1
   12cb0:	str	r3, [sp]
   12cb4:	mov	r2, #0
   12cb8:	mov	r3, #0
   12cbc:	mov	r0, #0
   12cc0:	bl	11288 <lseek64@plt>
   12cc4:	cmp	r0, #0
   12cc8:	sbcs	r3, r1, #0
   12ccc:	mov	r8, r0
   12cd0:	mov	r9, r1
   12cd4:	blt	13080 <__assert_fail@plt+0x1ba0>
   12cd8:	ldr	r7, [sp, #68]	; 0x44
   12cdc:	strd	r8, [sp, #48]	; 0x30
   12ce0:	mov	sl, #0
   12ce4:	mov	fp, #0
   12ce8:	mov	r6, #0
   12cec:	mov	r4, r7
   12cf0:	mov	r5, #0
   12cf4:	ldr	r9, [sp, #104]	; 0x68
   12cf8:	b	12d18 <__assert_fail@plt+0x1838>
   12cfc:	cmn	r0, #1
   12d00:	beq	13094 <__assert_fail@plt+0x1bb4>
   12d04:	adds	sl, sl, r0
   12d08:	adc	fp, fp, #0
   12d0c:	cmp	sl, r4
   12d10:	sbcs	r3, fp, r5
   12d14:	bge	13110 <__assert_fail@plt+0x1c30>
   12d18:	sub	r2, r7, sl
   12d1c:	add	r1, r9, sl
   12d20:	mov	r0, r6
   12d24:	bl	16b18 <__assert_fail@plt+0x5638>
   12d28:	cmp	r0, #0
   12d2c:	bne	12cfc <__assert_fail@plt+0x181c>
   12d30:	ldr	r2, [sp, #68]	; 0x44
   12d34:	cmp	sl, r2
   12d38:	asr	r3, r2, #31
   12d3c:	sbcs	r1, fp, r3
   12d40:	ldrd	r0, [sp, #32]
   12d44:	movlt	r2, sl
   12d48:	mov	r7, r2
   12d4c:	cmp	r0, #0
   12d50:	sbcs	r1, r1, #0
   12d54:	blt	13238 <__assert_fail@plt+0x1d58>
   12d58:	ldrd	r0, [sp, #32]
   12d5c:	mov	r2, sl
   12d60:	mov	r3, fp
   12d64:	cmp	fp, r1
   12d68:	cmpeq	sl, r0
   12d6c:	strd	r2, [sp, #48]	; 0x30
   12d70:	strdcc	r0, [sp, #48]	; 0x30
   12d74:	b	11f88 <__assert_fail@plt+0xaa8>
   12d78:	bl	1139c <__errno_location@plt>
   12d7c:	ldr	r1, [pc, #1524]	; 13378 <__assert_fail@plt+0x1e98>
   12d80:	mov	r2, #5
   12d84:	ldr	r4, [r0]
   12d88:	mov	r0, #0
   12d8c:	bl	1121c <dcgettext@plt>
   12d90:	ldr	r3, [pc, #1508]	; 1337c <__assert_fail@plt+0x1e9c>
   12d94:	ldr	r1, [r3, #300]	; 0x12c
   12d98:	mov	r5, r0
   12d9c:	mov	r0, #4
   12da0:	bl	168c0 <__assert_fail@plt+0x53e0>
   12da4:	mov	r3, r0
   12da8:	mov	r2, r5
   12dac:	mov	r1, r4
   12db0:	mov	r0, #1
   12db4:	bl	112d0 <error@plt>
   12db8:	ldr	r6, [sp, #32]
   12dbc:	ldr	r7, [sp, #56]	; 0x38
   12dc0:	mov	r4, #0
   12dc4:	mov	r5, #0
   12dc8:	mvn	r8, #1
   12dcc:	ldrd	sl, [sp, #32]
   12dd0:	b	12e00 <__assert_fail@plt+0x1920>
   12dd4:	ldr	r1, [r7, #4]
   12dd8:	cmp	r1, #0
   12ddc:	blt	12df0 <__assert_fail@plt+0x1910>
   12de0:	ldr	r3, [r7]
   12de4:	ldr	r2, [r7, #12]
   12de8:	ldr	r0, [r7, #8]
   12dec:	bl	13d54 <__assert_fail@plt+0x2874>
   12df0:	adds	r4, r4, #1
   12df4:	str	r8, [r7, #4]
   12df8:	adc	r5, r5, #0
   12dfc:	add	r7, r7, #16
   12e00:	cmp	r5, fp
   12e04:	cmpeq	r4, sl
   12e08:	beq	122d0 <__assert_fail@plt+0xdf0>
   12e0c:	cmp	r6, r4
   12e10:	bhi	12dd4 <__assert_fail@plt+0x18f4>
   12e14:	ldr	r3, [pc, #1376]	; 1337c <__assert_fail@plt+0x1e9c>
   12e18:	ldrb	r3, [r3, #296]	; 0x128
   12e1c:	cmp	r3, #0
   12e20:	bne	12dd4 <__assert_fail@plt+0x18f4>
   12e24:	mov	r2, sl
   12e28:	mov	r1, r4
   12e2c:	ldr	r0, [sp, #56]	; 0x38
   12e30:	bl	13bb8 <__assert_fail@plt+0x26d8>
   12e34:	b	12dd4 <__assert_fail@plt+0x18f4>
   12e38:	mov	r1, r4
   12e3c:	ldr	r0, [sp, #100]	; 0x64
   12e40:	ldr	r2, [sp, #80]	; 0x50
   12e44:	str	r3, [sp, #108]	; 0x6c
   12e48:	bl	14010 <__assert_fail@plt+0x2b30>
   12e4c:	ldr	r3, [sp, #108]	; 0x6c
   12e50:	b	121b8 <__assert_fail@plt+0xcd8>
   12e54:	mov	r3, #0
   12e58:	str	r3, [sp, #56]	; 0x38
   12e5c:	b	129c8 <__assert_fail@plt+0x14e8>
   12e60:	ldrd	r0, [sp, #32]
   12e64:	ldrd	r4, [sp, #40]	; 0x28
   12e68:	mov	r3, r1
   12e6c:	cmp	r5, r1
   12e70:	cmpeq	r4, r0
   12e74:	ldrd	r4, [sp, #48]	; 0x30
   12e78:	movls	r3, #1
   12e7c:	movhi	r3, #0
   12e80:	cmp	r5, r1
   12e84:	cmpeq	r4, r0
   12e88:	movcc	r3, #0
   12e8c:	andcs	r3, r3, #1
   12e90:	cmp	r3, #0
   12e94:	beq	13334 <__assert_fail@plt+0x1e54>
   12e98:	ldrd	sl, [sp, #32]
   12e9c:	ldrd	r0, [sp, #48]	; 0x30
   12ea0:	mov	r2, sl
   12ea4:	mov	r3, fp
   12ea8:	bl	18a18 <__assert_fail@plt+0x7538>
   12eac:	ldrd	r8, [sp, #40]	; 0x28
   12eb0:	subs	r2, r8, #1
   12eb4:	sbc	r3, r9, #0
   12eb8:	cmp	r9, fp
   12ebc:	cmpeq	r8, sl
   12ec0:	mul	ip, r2, r1
   12ec4:	umull	sl, fp, r2, r0
   12ec8:	mla	r3, r0, r3, ip
   12ecc:	mov	r4, sl
   12ed0:	add	fp, r3, fp
   12ed4:	mov	r5, fp
   12ed8:	beq	12ef4 <__assert_fail@plt+0x1a14>
   12edc:	mul	ip, r0, r9
   12ee0:	umull	r2, r3, r0, r8
   12ee4:	mla	r1, r8, r1, ip
   12ee8:	strd	r2, [sp, #48]	; 0x30
   12eec:	add	r3, r1, r3
   12ef0:	str	r3, [sp, #52]	; 0x34
   12ef4:	mov	r1, #0
   12ef8:	cmp	sl, r7
   12efc:	sbcs	r3, fp, r1
   12f00:	blt	12ff8 <__assert_fail@plt+0x1b18>
   12f04:	subs	r2, sl, r7
   12f08:	mov	r8, #1
   12f0c:	sbc	r3, fp, r1
   12f10:	str	r8, [sp]
   12f14:	mov	r0, #0
   12f18:	bl	11288 <lseek64@plt>
   12f1c:	cmp	r0, #0
   12f20:	sbcs	r3, r1, #0
   12f24:	blt	13304 <__assert_fail@plt+0x1e24>
   12f28:	ldrd	r2, [sp, #48]	; 0x30
   12f2c:	cmp	sl, r2
   12f30:	sbcs	r3, fp, r3
   12f34:	bge	122d0 <__assert_fail@plt+0xdf0>
   12f38:	ldr	r2, [sp, #68]	; 0x44
   12f3c:	ldr	r1, [sp, #104]	; 0x68
   12f40:	mov	r0, #0
   12f44:	bl	16b18 <__assert_fail@plt+0x5638>
   12f48:	cmn	r0, #1
   12f4c:	mov	r7, r0
   12f50:	beq	12878 <__assert_fail@plt+0x1398>
   12f54:	cmp	r7, #0
   12f58:	beq	122d0 <__assert_fail@plt+0xdf0>
   12f5c:	mov	r2, r7
   12f60:	ldrd	r6, [sp, #48]	; 0x30
   12f64:	mov	r3, #0
   12f68:	mov	r0, #1
   12f6c:	subs	r6, r6, r4
   12f70:	sbc	r7, r7, r5
   12f74:	cmp	r2, r6
   12f78:	sbcs	r1, r3, r7
   12f7c:	movlt	r6, r2
   12f80:	mov	r2, r6
   12f84:	ldr	r1, [sp, #104]	; 0x68
   12f88:	bl	14b68 <__assert_fail@plt+0x3688>
   12f8c:	cmp	r0, r6
   12f90:	beq	12fdc <__assert_fail@plt+0x1afc>
   12f94:	bl	1139c <__errno_location@plt>
   12f98:	ldr	r3, [pc, #988]	; 1337c <__assert_fail@plt+0x1e9c>
   12f9c:	ldr	r3, [r3, #40]	; 0x28
   12fa0:	ldr	r8, [r0]
   12fa4:	adds	r0, r3, #0
   12fa8:	movne	r0, #1
   12fac:	cmp	r8, #32
   12fb0:	movne	r0, #0
   12fb4:	cmp	r0, #0
   12fb8:	bne	12fdc <__assert_fail@plt+0x1afc>
   12fbc:	ldr	r2, [pc, #956]	; 13380 <__assert_fail@plt+0x1ea0>
   12fc0:	mov	r1, #3
   12fc4:	bl	1697c <__assert_fail@plt+0x549c>
   12fc8:	mov	r1, r8
   12fcc:	ldr	r2, [pc, #944]	; 13384 <__assert_fail@plt+0x1ea4>
   12fd0:	mov	r3, r0
   12fd4:	mov	r0, #1
   12fd8:	bl	112d0 <error@plt>
   12fdc:	ldrd	r2, [sp, #48]	; 0x30
   12fe0:	adds	r4, r4, r6
   12fe4:	adc	r5, r5, #0
   12fe8:	cmp	r4, r2
   12fec:	sbcs	r3, r5, r3
   12ff0:	blt	12f38 <__assert_fail@plt+0x1a58>
   12ff4:	b	122d0 <__assert_fail@plt+0xdf0>
   12ff8:	ldr	r0, [sp, #104]	; 0x68
   12ffc:	sub	r7, r7, sl
   13000:	mov	r2, r7
   13004:	add	r1, r0, sl
   13008:	bl	111a4 <memmove@plt>
   1300c:	ldrd	r2, [sp, #48]	; 0x30
   13010:	cmp	sl, r2
   13014:	sbcs	r3, fp, r3
   13018:	bge	122d0 <__assert_fail@plt+0xdf0>
   1301c:	cmn	r7, #1
   13020:	bne	12f54 <__assert_fail@plt+0x1a74>
   13024:	b	12f38 <__assert_fail@plt+0x1a58>
   13028:	mov	r1, r4
   1302c:	mov	r0, #1
   13030:	str	r3, [sp, #100]	; 0x64
   13034:	mov	r4, r2
   13038:	bl	14b68 <__assert_fail@plt+0x3688>
   1303c:	ldr	r3, [sp, #100]	; 0x64
   13040:	cmp	r4, r0
   13044:	beq	121b8 <__assert_fail@plt+0xcd8>
   13048:	b	12bfc <__assert_fail@plt+0x171c>
   1304c:	ldrd	r0, [sp, #24]
   13050:	mov	r4, #1
   13054:	str	r4, [sp]
   13058:	subs	r2, sl, r0
   1305c:	sbc	r3, r5, r1
   13060:	mov	r0, #0
   13064:	bl	11288 <lseek64@plt>
   13068:	cmp	r0, #0
   1306c:	sbcs	r3, r1, #0
   13070:	blt	13274 <__assert_fail@plt+0x1d94>
   13074:	strd	sl, [sp, #24]
   13078:	mvn	r7, #0
   1307c:	b	120b0 <__assert_fail@plt+0xbd0>
   13080:	bl	1139c <__errno_location@plt>
   13084:	ldr	r3, [r0]
   13088:	cmp	r3, #29
   1308c:	moveq	r3, #0
   13090:	streq	r3, [r0]
   13094:	bl	1139c <__errno_location@plt>
   13098:	mov	r2, #5
   1309c:	ldr	r1, [pc, #740]	; 13388 <__assert_fail@plt+0x1ea8>
   130a0:	ldr	r4, [r0]
   130a4:	mov	r0, #0
   130a8:	bl	1121c <dcgettext@plt>
   130ac:	ldr	r3, [pc, #712]	; 1337c <__assert_fail@plt+0x1e9c>
   130b0:	mov	r1, #3
   130b4:	ldr	r2, [r3, #300]	; 0x12c
   130b8:	mov	r5, r0
   130bc:	mov	r0, #0
   130c0:	bl	1697c <__assert_fail@plt+0x549c>
   130c4:	b	12da4 <__assert_fail@plt+0x18c4>
   130c8:	ldrd	r2, [sp, #40]	; 0x28
   130cc:	orrs	r3, r2, r3
   130d0:	bne	122d0 <__assert_fail@plt+0xdf0>
   130d4:	ldr	r3, [sp, #88]	; 0x58
   130d8:	cmp	r3, #0
   130dc:	bne	12db8 <__assert_fail@plt+0x18d8>
   130e0:	mov	r6, fp
   130e4:	b	12dbc <__assert_fail@plt+0x18dc>
   130e8:	ldrd	sl, [sp, #56]	; 0x38
   130ec:	mov	r2, #0
   130f0:	mov	r3, #0
   130f4:	subs	sl, sl, #1
   130f8:	sbc	fp, fp, #0
   130fc:	strd	r2, [sp, #24]
   13100:	mov	r8, #1
   13104:	mov	r9, #0
   13108:	b	120b0 <__assert_fail@plt+0xbd0>
   1310c:	bl	1790c <__assert_fail@plt+0x642c>
   13110:	ldr	r3, [pc, #612]	; 1337c <__assert_fail@plt+0x1e9c>
   13114:	ldrd	r8, [sp, #48]	; 0x30
   13118:	ldrd	r2, [r3, #96]	; 0x60
   1311c:	strd	r2, [sp, #48]	; 0x30
   13120:	orrs	r3, r2, r3
   13124:	beq	13228 <__assert_fail@plt+0x1d48>
   13128:	adds	r2, r8, sl
   1312c:	adc	r3, r9, fp
   13130:	ldrd	r4, [sp, #48]	; 0x30
   13134:	mov	r7, r3
   13138:	mov	r9, r3
   1313c:	ldr	r3, [pc, #568]	; 1337c <__assert_fail@plt+0x1e9c>
   13140:	cmp	r4, r2
   13144:	mov	r6, r2
   13148:	ldr	r3, [r3, #64]	; 0x40
   1314c:	mov	r8, r2
   13150:	sbcs	r2, r5, r7
   13154:	movge	r4, #1
   13158:	movlt	r4, #0
   1315c:	and	r3, r3, #53248	; 0xd000
   13160:	cmp	r3, #32768	; 0x8000
   13164:	movne	r4, #0
   13168:	andeq	r4, r4, #1
   1316c:	cmp	r4, #0
   13170:	bne	131f0 <__assert_fail@plt+0x1d10>
   13174:	mov	r3, #2
   13178:	str	r3, [sp]
   1317c:	mov	r2, #0
   13180:	mov	r3, #0
   13184:	mov	r0, r4
   13188:	bl	11288 <lseek64@plt>
   1318c:	mov	r3, r1
   13190:	cmp	r0, #0
   13194:	sbcs	r3, r3, #0
   13198:	strd	r0, [sp, #48]	; 0x30
   1319c:	blt	13094 <__assert_fail@plt+0x1bb4>
   131a0:	cmp	r9, r1
   131a4:	cmpeq	r8, r0
   131a8:	mov	r2, r6
   131ac:	mov	r3, r7
   131b0:	mov	r6, r0
   131b4:	mov	r7, r1
   131b8:	beq	131f0 <__assert_fail@plt+0x1d10>
   131bc:	str	r4, [sp]
   131c0:	mov	r0, r4
   131c4:	bl	11288 <lseek64@plt>
   131c8:	mov	r5, r9
   131cc:	cmp	r0, #0
   131d0:	sbcs	r3, r1, #0
   131d4:	blt	13094 <__assert_fail@plt+0x1bb4>
   131d8:	mov	r3, r9
   131dc:	cmp	r6, r8
   131e0:	sbcs	r3, r7, r3
   131e4:	movlt	r2, r8
   131e8:	movlt	r3, r9
   131ec:	strdlt	r2, [sp, #48]	; 0x30
   131f0:	ldrd	r6, [sp, #48]	; 0x30
   131f4:	mvn	r3, #-2147483648	; 0x80000000
   131f8:	mvn	r2, #0
   131fc:	subs	r6, r6, r8
   13200:	sbc	r7, r7, r9
   13204:	adds	sl, sl, r6
   13208:	adc	fp, fp, r7
   1320c:	cmp	fp, r3
   13210:	cmpeq	sl, r2
   13214:	beq	13228 <__assert_fail@plt+0x1d48>
   13218:	cmp	sl, #0
   1321c:	sbcs	r3, fp, #0
   13220:	bge	12d30 <__assert_fail@plt+0x1850>
   13224:	b	13094 <__assert_fail@plt+0x1bb4>
   13228:	bl	1139c <__errno_location@plt>
   1322c:	mov	r3, #75	; 0x4b
   13230:	str	r3, [r0]
   13234:	b	13094 <__assert_fail@plt+0x1bb4>
   13238:	mov	r2, #5
   1323c:	ldr	r1, [pc, #328]	; 1338c <__assert_fail@plt+0x1eac>
   13240:	mov	r0, #0
   13244:	bl	1121c <dcgettext@plt>
   13248:	add	r2, sp, #112	; 0x70
   1324c:	mov	r4, r0
   13250:	ldrd	r0, [sp, #32]
   13254:	bl	14bd8 <__assert_fail@plt+0x36f8>
   13258:	bl	16b00 <__assert_fail@plt+0x5620>
   1325c:	mov	r3, r4
   13260:	ldr	r2, [pc, #296]	; 13390 <__assert_fail@plt+0x1eb0>
   13264:	mov	r1, #75	; 0x4b
   13268:	str	r0, [sp]
   1326c:	mov	r0, #1
   13270:	bl	112d0 <error@plt>
   13274:	bl	1139c <__errno_location@plt>
   13278:	ldr	r3, [pc, #252]	; 1337c <__assert_fail@plt+0x1e9c>
   1327c:	mov	r1, #3
   13280:	ldr	r2, [r3, #300]	; 0x12c
   13284:	ldr	r5, [r0]
   13288:	mov	r0, #0
   1328c:	bl	1697c <__assert_fail@plt+0x549c>
   13290:	mov	r1, r5
   13294:	ldr	r2, [pc, #232]	; 13384 <__assert_fail@plt+0x1ea4>
   13298:	mov	r3, r0
   1329c:	mov	r0, r4
   132a0:	bl	112d0 <error@plt>
   132a4:	ldr	r3, [sp, #96]	; 0x60
   132a8:	cmp	r3, #0
   132ac:	beq	132b8 <__assert_fail@plt+0x1dd8>
   132b0:	adds	r8, r8, #1
   132b4:	adc	r9, r9, #0
   132b8:	mov	r5, #0
   132bc:	mov	r4, #1
   132c0:	b	132ec <__assert_fail@plt+0x1e0c>
   132c4:	ldrd	r2, [sp, #32]
   132c8:	cmp	r9, r3
   132cc:	cmpeq	r8, r2
   132d0:	bhi	122d0 <__assert_fail@plt+0xdf0>
   132d4:	mov	r2, r5
   132d8:	mov	r1, #0
   132dc:	mov	r0, r4
   132e0:	bl	14010 <__assert_fail@plt+0x2b30>
   132e4:	adds	r8, r8, #1
   132e8:	adc	r9, r9, #0
   132ec:	ldrd	r2, [sp, #40]	; 0x28
   132f0:	orrs	r3, r2, r3
   132f4:	beq	132c4 <__assert_fail@plt+0x1de4>
   132f8:	b	122d0 <__assert_fail@plt+0xdf0>
   132fc:	str	r3, [sp, #24]
   13300:	b	12464 <__assert_fail@plt+0xf84>
   13304:	bl	1139c <__errno_location@plt>
   13308:	ldr	r3, [pc, #108]	; 1337c <__assert_fail@plt+0x1e9c>
   1330c:	mov	r1, #3
   13310:	ldr	r2, [r3, #300]	; 0x12c
   13314:	ldr	r4, [r0]
   13318:	mov	r0, #0
   1331c:	bl	1697c <__assert_fail@plt+0x549c>
   13320:	mov	r1, r4
   13324:	ldr	r2, [pc, #88]	; 13384 <__assert_fail@plt+0x1ea4>
   13328:	mov	r3, r0
   1332c:	mov	r0, r8
   13330:	bl	112d0 <error@plt>
   13334:	ldr	r3, [pc, #88]	; 13394 <__assert_fail@plt+0x1eb4>
   13338:	mov	r2, #996	; 0x3e4
   1333c:	ldr	r1, [pc, #84]	; 13398 <__assert_fail@plt+0x1eb8>
   13340:	ldr	r0, [pc, #84]	; 1339c <__assert_fail@plt+0x1ebc>
   13344:	bl	114e0 <__assert_fail@plt>
   13348:	ldr	r4, [r4]
   1334c:	ldr	r2, [r8]
   13350:	mov	r1, #3
   13354:	mov	r0, #0
   13358:	b	12890 <__assert_fail@plt+0x13b0>
   1335c:	ldr	r3, [pc, #60]	; 133a0 <__assert_fail@plt+0x1ec0>
   13360:	ldr	r2, [pc, #60]	; 133a4 <__assert_fail@plt+0x1ec4>
   13364:	ldr	r1, [pc, #44]	; 13398 <__assert_fail@plt+0x1eb8>
   13368:	ldr	r0, [pc, #56]	; 133a8 <__assert_fail@plt+0x1ec8>
   1336c:	bl	114e0 <__assert_fail@plt>
   13370:	andeq	fp, r2, r4, ror #6
   13374:	andeq	r9, r1, r8, ror #25
   13378:	andeq	r9, r1, r8, ror #24
   1337c:	andeq	fp, r2, r0, ror r3
   13380:	andeq	r9, r1, r8, lsl #19
   13384:	andeq	r8, r1, ip, asr #31
   13388:	andeq	r9, r1, r4, lsl #25
   1338c:	andeq	r9, r1, ip, asr #20
   13390:	andeq	r9, r1, r0, ror #23
   13394:	andeq	r8, r1, ip, ror sp
   13398:	andeq	r8, r1, r4, lsr #27
   1339c:	andeq	r9, r1, r4, lsr #25
   133a0:	muleq	r1, r0, sp
   133a4:	andeq	r0, r0, r3, ror #6
   133a8:	andeq	r9, r1, r8, asr #25
   133ac:	mov	fp, #0
   133b0:	mov	lr, #0
   133b4:	pop	{r1}		; (ldr r1, [sp], #4)
   133b8:	mov	r2, sp
   133bc:	push	{r2}		; (str r2, [sp, #-4]!)
   133c0:	push	{r0}		; (str r0, [sp, #-4]!)
   133c4:	ldr	ip, [pc, #16]	; 133dc <__assert_fail@plt+0x1efc>
   133c8:	push	{ip}		; (str ip, [sp, #-4]!)
   133cc:	ldr	r0, [pc, #12]	; 133e0 <__assert_fail@plt+0x1f00>
   133d0:	ldr	r3, [pc, #12]	; 133e4 <__assert_fail@plt+0x1f04>
   133d4:	bl	1130c <__libc_start_main@plt>
   133d8:	bl	114bc <abort@plt>
   133dc:	andeq	r8, r1, ip, ror #23
   133e0:	strdeq	r1, [r1], -r0
   133e4:	andeq	r8, r1, ip, lsl #23
   133e8:	ldr	r3, [pc, #20]	; 13404 <__assert_fail@plt+0x1f24>
   133ec:	ldr	r2, [pc, #20]	; 13408 <__assert_fail@plt+0x1f28>
   133f0:	add	r3, pc, r3
   133f4:	ldr	r2, [r3, r2]
   133f8:	cmp	r2, #0
   133fc:	bxeq	lr
   13400:	b	11324 <__gmon_start__@plt>
   13404:	andeq	r7, r1, r8, lsl #24
   13408:	andeq	r0, r0, r8, asr #2
   1340c:	ldr	r3, [pc, #28]	; 13430 <__assert_fail@plt+0x1f50>
   13410:	ldr	r0, [pc, #28]	; 13434 <__assert_fail@plt+0x1f54>
   13414:	sub	r3, r3, r0
   13418:	cmp	r3, #6
   1341c:	bxls	lr
   13420:	ldr	r3, [pc, #16]	; 13438 <__assert_fail@plt+0x1f58>
   13424:	cmp	r3, #0
   13428:	bxeq	lr
   1342c:	bx	r3
   13430:	andeq	fp, r2, r3, asr r3
   13434:	andeq	fp, r2, r0, asr r3
   13438:	andeq	r0, r0, r0
   1343c:	ldr	r1, [pc, #36]	; 13468 <__assert_fail@plt+0x1f88>
   13440:	ldr	r0, [pc, #36]	; 1346c <__assert_fail@plt+0x1f8c>
   13444:	sub	r1, r1, r0
   13448:	asr	r1, r1, #2
   1344c:	add	r1, r1, r1, lsr #31
   13450:	asrs	r1, r1, #1
   13454:	bxeq	lr
   13458:	ldr	r3, [pc, #16]	; 13470 <__assert_fail@plt+0x1f90>
   1345c:	cmp	r3, #0
   13460:	bxeq	lr
   13464:	bx	r3
   13468:	andeq	fp, r2, r0, asr r3
   1346c:	andeq	fp, r2, r0, asr r3
   13470:	andeq	r0, r0, r0
   13474:	push	{r4, lr}
   13478:	ldr	r4, [pc, #24]	; 13498 <__assert_fail@plt+0x1fb8>
   1347c:	ldrb	r3, [r4]
   13480:	cmp	r3, #0
   13484:	popne	{r4, pc}
   13488:	bl	1340c <__assert_fail@plt+0x1f2c>
   1348c:	mov	r3, #1
   13490:	strb	r3, [r4]
   13494:	pop	{r4, pc}
   13498:	andeq	fp, r2, ip, ror #6
   1349c:	ldr	r0, [pc, #40]	; 134cc <__assert_fail@plt+0x1fec>
   134a0:	ldr	r3, [r0]
   134a4:	cmp	r3, #0
   134a8:	bne	134b0 <__assert_fail@plt+0x1fd0>
   134ac:	b	1343c <__assert_fail@plt+0x1f5c>
   134b0:	ldr	r3, [pc, #24]	; 134d0 <__assert_fail@plt+0x1ff0>
   134b4:	cmp	r3, #0
   134b8:	beq	134ac <__assert_fail@plt+0x1fcc>
   134bc:	push	{r4, lr}
   134c0:	blx	r3
   134c4:	pop	{r4, lr}
   134c8:	b	1343c <__assert_fail@plt+0x1f5c>
   134cc:	andeq	sl, r2, r4, lsl pc
   134d0:	andeq	r0, r0, r0
   134d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134d8:	ldr	r4, [pc, #600]	; 13738 <__assert_fail@plt+0x2258>
   134dc:	ldm	r4, {r5, r6}
   134e0:	cmp	r5, #0
   134e4:	beq	13570 <__assert_fail@plt+0x2090>
   134e8:	cmp	r6, #0
   134ec:	sub	r1, r6, #1
   134f0:	beq	13704 <__assert_fail@plt+0x2224>
   134f4:	ldr	r3, [pc, #576]	; 1373c <__assert_fail@plt+0x225c>
   134f8:	ldr	r8, [r4, #32]
   134fc:	ldr	r0, [r4, #28]
   13500:	ldrb	r7, [r3]
   13504:	ldr	ip, [r3, #4]
   13508:	add	r2, r8, r6, lsl #2
   1350c:	add	r0, r0, r6
   13510:	b	1353c <__assert_fail@plt+0x205c>
   13514:	ldrb	r3, [ip, r3]
   13518:	cmp	r3, #0
   1351c:	strb	r3, [r0, #-1]!
   13520:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   13524:	str	r3, [r2, #-4]!
   13528:	ldrb	r3, [ip]
   1352c:	sub	r1, r1, #1
   13530:	cmn	r1, #1
   13534:	strb	r3, [r0]
   13538:	beq	13704 <__assert_fail@plt+0x2224>
   1353c:	ldr	r3, [r2, #-4]
   13540:	cmp	r1, #0
   13544:	movne	lr, #0
   13548:	andeq	lr, r7, #1
   1354c:	add	r3, r3, #1
   13550:	cmp	lr, #0
   13554:	str	r3, [r2, #-4]
   13558:	beq	13514 <__assert_fail@plt+0x2034>
   1355c:	ldr	lr, [r8]
   13560:	add	lr, ip, lr
   13564:	ldrb	lr, [lr, #1]
   13568:	cmp	lr, #0
   1356c:	bne	13514 <__assert_fail@plt+0x2034>
   13570:	ldr	r8, [r4, #8]
   13574:	cmp	r8, #0
   13578:	bne	135ec <__assert_fail@plt+0x210c>
   1357c:	ldr	r0, [r4, #12]
   13580:	bl	11354 <strlen@plt>
   13584:	mov	r7, r0
   13588:	ldr	r0, [r4, #20]
   1358c:	str	r7, [r4, #16]
   13590:	cmp	r0, #0
   13594:	moveq	r0, r8
   13598:	beq	135a0 <__assert_fail@plt+0x20c0>
   1359c:	bl	11354 <strlen@plt>
   135a0:	add	r3, r7, r6
   135a4:	add	r3, r3, r0
   135a8:	add	r1, r3, #1
   135ac:	cmp	r7, r1
   135b0:	str	r3, [r4, #8]
   135b4:	str	r0, [r4, #24]
   135b8:	bhi	13700 <__assert_fail@plt+0x2220>
   135bc:	mov	r0, r5
   135c0:	bl	17400 <__assert_fail@plt+0x5f20>
   135c4:	ldr	r5, [r4, #16]
   135c8:	ldr	r1, [r4, #12]
   135cc:	mov	r2, r5
   135d0:	mov	r6, r0
   135d4:	str	r0, [r4]
   135d8:	bl	111c8 <memcpy@plt>
   135dc:	ldr	r3, [pc, #344]	; 1373c <__assert_fail@plt+0x225c>
   135e0:	ldr	r9, [r4, #32]
   135e4:	ldr	r2, [r3, #4]
   135e8:	b	13640 <__assert_fail@plt+0x2160>
   135ec:	ldr	r3, [r4, #16]
   135f0:	add	r1, r8, #3
   135f4:	add	r6, r6, #1
   135f8:	cmp	r1, r3
   135fc:	add	r3, r8, #2
   13600:	str	r6, [r4, #4]
   13604:	str	r3, [r4, #8]
   13608:	bcc	13700 <__assert_fail@plt+0x2220>
   1360c:	mov	r0, r5
   13610:	bl	17400 <__assert_fail@plt+0x5f20>
   13614:	ldr	r2, [pc, #288]	; 1373c <__assert_fail@plt+0x225c>
   13618:	ldr	r9, [r4, #32]
   1361c:	ldr	r3, [r4, #16]
   13620:	ldr	r2, [r2, #4]
   13624:	ldr	r1, [r9]
   13628:	add	r5, r3, #1
   1362c:	str	r5, [r4, #16]
   13630:	ldrb	r1, [r2, r1]
   13634:	mov	r6, r0
   13638:	str	r0, [r4]
   1363c:	strb	r1, [r0, r3]
   13640:	ldr	r7, [r4, #4]
   13644:	add	r5, r6, r5
   13648:	ldrb	r1, [r2]
   1364c:	mov	r0, r5
   13650:	mov	r2, r7
   13654:	str	r5, [r4, #28]
   13658:	bl	113c0 <memset@plt>
   1365c:	ldr	r1, [r4, #20]
   13660:	cmp	r1, #0
   13664:	beq	13674 <__assert_fail@plt+0x2194>
   13668:	add	r0, r5, r7
   1366c:	ldr	r2, [r4, #24]
   13670:	bl	111c8 <memcpy@plt>
   13674:	ldr	r3, [r4, #8]
   13678:	mov	r2, #0
   1367c:	mov	r0, r9
   13680:	strb	r2, [r6, r3]
   13684:	bl	14a70 <__assert_fail@plt+0x3590>
   13688:	mov	r1, #4
   1368c:	ldr	r0, [r4, #4]
   13690:	bl	17824 <__assert_fail@plt+0x6344>
   13694:	ldr	r7, [r4, #36]	; 0x24
   13698:	cmp	r7, #0
   1369c:	mov	r6, r0
   136a0:	str	r0, [r4, #32]
   136a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   136a8:	cmp	r8, #0
   136ac:	bne	13724 <__assert_fail@plt+0x2244>
   136b0:	mov	r0, r7
   136b4:	bl	11354 <strlen@plt>
   136b8:	ldr	r8, [r4, #4]
   136bc:	mov	r1, r7
   136c0:	mov	r5, r0
   136c4:	ldr	r0, [r4, #28]
   136c8:	sub	r3, r8, r5
   136cc:	add	r0, r0, r3
   136d0:	mov	r2, r5
   136d4:	bl	111c8 <memcpy@plt>
   136d8:	cmp	r5, #0
   136dc:	add	r1, r6, r8, lsl #2
   136e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   136e4:	add	r2, r7, r5
   136e8:	ldrb	r3, [r2, #-1]!
   136ec:	sub	r3, r3, #48	; 0x30
   136f0:	cmp	r2, r7
   136f4:	str	r3, [r1, #-4]!
   136f8:	bne	136e8 <__assert_fail@plt+0x2208>
   136fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13700:	bl	1790c <__assert_fail@plt+0x642c>
   13704:	mov	r2, #5
   13708:	ldr	r1, [pc, #48]	; 13740 <__assert_fail@plt+0x2260>
   1370c:	mov	r0, #0
   13710:	bl	1121c <dcgettext@plt>
   13714:	mov	r1, #0
   13718:	mov	r2, r0
   1371c:	mov	r0, #1
   13720:	bl	112d0 <error@plt>
   13724:	ldr	r3, [pc, #24]	; 13744 <__assert_fail@plt+0x2264>
   13728:	ldr	r2, [pc, #24]	; 13748 <__assert_fail@plt+0x2268>
   1372c:	ldr	r1, [pc, #24]	; 1374c <__assert_fail@plt+0x226c>
   13730:	ldr	r0, [pc, #24]	; 13750 <__assert_fail@plt+0x2270>
   13734:	bl	114e0 <__assert_fail@plt>
   13738:	andeq	fp, r2, r0, ror r3
   1373c:	andeq	fp, r2, r4, asr r1
   13740:			; <UNDEFINED> instruction: 0x00018db8
   13744:	andeq	r8, r1, r4, lsl ip
   13748:	muleq	r0, r9, r1
   1374c:	andeq	r8, r1, r4, lsr #27
   13750:			; <UNDEFINED> instruction: 0x00018db0
   13754:	push	{r4, r5, r6, r7, r8, r9, lr}
   13758:	mov	r7, r0
   1375c:	ldr	r6, [pc, #1016]	; 13b5c <__assert_fail@plt+0x267c>
   13760:	sub	sp, sp, #116	; 0x74
   13764:	ldr	r0, [r6, #40]	; 0x28
   13768:	cmp	r0, #0
   1376c:	beq	13928 <__assert_fail@plt+0x2448>
   13770:	ldr	r0, [pc, #1000]	; 13b60 <__assert_fail@plt+0x2680>
   13774:	bl	112e8 <getenv@plt>
   13778:	ldr	r5, [pc, #996]	; 13b64 <__assert_fail@plt+0x2684>
   1377c:	mov	r2, #1
   13780:	mov	r1, r7
   13784:	cmp	r0, #0
   13788:	movne	r5, r0
   1378c:	ldr	r0, [pc, #980]	; 13b68 <__assert_fail@plt+0x2688>
   13790:	bl	11378 <setenv@plt>
   13794:	subs	r4, r0, #0
   13798:	bne	13b3c <__assert_fail@plt+0x265c>
   1379c:	ldrb	r3, [r6, #44]	; 0x2c
   137a0:	cmp	r3, #0
   137a4:	bne	138e8 <__assert_fail@plt+0x2408>
   137a8:	add	r0, sp, #8
   137ac:	bl	11414 <pipe@plt>
   137b0:	subs	r4, r0, #0
   137b4:	bne	13b2c <__assert_fail@plt+0x264c>
   137b8:	bl	11450 <fork@plt>
   137bc:	subs	r7, r0, #0
   137c0:	beq	13814 <__assert_fail@plt+0x2334>
   137c4:	cmn	r7, #1
   137c8:	beq	13b4c <__assert_fail@plt+0x266c>
   137cc:	ldr	r0, [sp, #8]
   137d0:	bl	114c8 <close@plt>
   137d4:	cmp	r0, #0
   137d8:	bne	13ae0 <__assert_fail@plt+0x2600>
   137dc:	ldr	r3, [r6, #152]	; 0x98
   137e0:	ldr	r2, [r6, #292]	; 0x124
   137e4:	str	r7, [r6, #288]	; 0x120
   137e8:	cmp	r3, r2
   137ec:	beq	13a58 <__assert_fail@plt+0x2578>
   137f0:	ldr	r1, [r6, #156]	; 0x9c
   137f4:	ldr	r0, [sp, #12]
   137f8:	add	r2, r3, #1
   137fc:	str	r0, [r1, r3, lsl #2]
   13800:	ldr	r8, [sp, #12]
   13804:	str	r2, [r6, #152]	; 0x98
   13808:	mov	r0, r8
   1380c:	add	sp, sp, #116	; 0x74
   13810:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13814:	ldr	r3, [r6, #152]	; 0x98
   13818:	cmp	r3, #0
   1381c:	beq	13844 <__assert_fail@plt+0x2364>
   13820:	ldr	r3, [r6, #156]	; 0x9c
   13824:	ldr	r0, [r3, r4, lsl #2]
   13828:	bl	114c8 <close@plt>
   1382c:	cmp	r0, #0
   13830:	bne	13a78 <__assert_fail@plt+0x2598>
   13834:	ldr	r3, [r6, #152]	; 0x98
   13838:	add	r4, r4, #1
   1383c:	cmp	r4, r3
   13840:	bcc	13820 <__assert_fail@plt+0x2340>
   13844:	ldr	r0, [sp, #12]
   13848:	bl	114c8 <close@plt>
   1384c:	subs	r4, r0, #0
   13850:	bne	13af0 <__assert_fail@plt+0x2610>
   13854:	ldr	r0, [sp, #8]
   13858:	cmp	r0, #0
   1385c:	beq	13880 <__assert_fail@plt+0x23a0>
   13860:	mov	r1, r4
   13864:	bl	11228 <dup2@plt>
   13868:	subs	r7, r0, #0
   1386c:	bne	13a88 <__assert_fail@plt+0x25a8>
   13870:	ldr	r0, [sp, #8]
   13874:	bl	114c8 <close@plt>
   13878:	cmp	r0, #0
   1387c:	bne	139f4 <__assert_fail@plt+0x2514>
   13880:	mov	r2, #0
   13884:	ldr	r1, [pc, #736]	; 13b6c <__assert_fail@plt+0x268c>
   13888:	mov	r0, #2
   1388c:	bl	11198 <sigprocmask@plt>
   13890:	mov	r0, r5
   13894:	bl	14724 <__assert_fail@plt+0x3244>
   13898:	ldr	r4, [r6, #40]	; 0x28
   1389c:	mov	r6, #0
   138a0:	mov	r3, r4
   138a4:	ldr	r2, [pc, #708]	; 13b70 <__assert_fail@plt+0x2690>
   138a8:	str	r6, [sp]
   138ac:	mov	r1, r0
   138b0:	mov	r0, r5
   138b4:	bl	1145c <execl@plt>
   138b8:	bl	1139c <__errno_location@plt>
   138bc:	mov	r2, #5
   138c0:	ldr	r1, [pc, #684]	; 13b74 <__assert_fail@plt+0x2694>
   138c4:	ldr	r7, [r0]
   138c8:	mov	r0, r6
   138cc:	bl	1121c <dcgettext@plt>
   138d0:	str	r4, [sp]
   138d4:	mov	r1, r7
   138d8:	mov	r3, r5
   138dc:	mov	r2, r0
   138e0:	mov	r0, #1
   138e4:	bl	112d0 <error@plt>
   138e8:	ldr	r3, [pc, #648]	; 13b78 <__assert_fail@plt+0x2698>
   138ec:	mov	r2, #5
   138f0:	ldr	r1, [pc, #644]	; 13b7c <__assert_fail@plt+0x269c>
   138f4:	ldr	r8, [r3]
   138f8:	bl	1121c <dcgettext@plt>
   138fc:	mov	r2, r7
   13900:	mov	r1, #3
   13904:	mov	r9, r0
   13908:	mov	r0, r4
   1390c:	bl	1697c <__assert_fail@plt+0x549c>
   13910:	mov	r2, r9
   13914:	mov	r1, #1
   13918:	mov	r3, r0
   1391c:	mov	r0, r8
   13920:	bl	113f0 <__fprintf_chk@plt>
   13924:	b	137a8 <__assert_fail@plt+0x22c8>
   13928:	ldrb	r3, [r6, #44]	; 0x2c
   1392c:	cmp	r3, #0
   13930:	bne	13a1c <__assert_fail@plt+0x253c>
   13934:	ldr	r2, [pc, #580]	; 13b80 <__assert_fail@plt+0x26a0>
   13938:	mov	r1, #65	; 0x41
   1393c:	mov	r0, r7
   13940:	bl	14974 <__assert_fail@plt+0x3494>
   13944:	subs	r8, r0, #0
   13948:	blt	13808 <__assert_fail@plt+0x2328>
   1394c:	add	r2, sp, #8
   13950:	mov	r1, r8
   13954:	mov	r0, #3
   13958:	bl	11264 <__fxstat64@plt>
   1395c:	subs	r9, r0, #0
   13960:	bne	13b00 <__assert_fail@plt+0x2620>
   13964:	ldrd	r4, [r6, #144]	; 0x90
   13968:	ldrd	r2, [sp, #104]	; 0x68
   1396c:	cmp	r5, r3
   13970:	cmpeq	r4, r2
   13974:	bne	1398c <__assert_fail@plt+0x24ac>
   13978:	ldrd	r4, [r6, #48]	; 0x30
   1397c:	ldrd	r2, [sp, #8]
   13980:	cmp	r5, r3
   13984:	cmpeq	r4, r2
   13988:	beq	13ab0 <__assert_fail@plt+0x25d0>
   1398c:	mov	r2, #0
   13990:	mov	r3, #0
   13994:	mov	r0, r8
   13998:	bl	111ec <ftruncate64@plt>
   1399c:	cmp	r0, #0
   139a0:	beq	13808 <__assert_fail@plt+0x2328>
   139a4:	ldr	r3, [sp, #24]
   139a8:	and	r3, r3, #61440	; 0xf000
   139ac:	cmp	r3, #32768	; 0x8000
   139b0:	bne	13808 <__assert_fail@plt+0x2328>
   139b4:	bl	1139c <__errno_location@plt>
   139b8:	mov	r2, #5
   139bc:	ldr	r1, [pc, #448]	; 13b84 <__assert_fail@plt+0x26a4>
   139c0:	ldr	r4, [r0]
   139c4:	mov	r0, #0
   139c8:	bl	1121c <dcgettext@plt>
   139cc:	mov	r2, r7
   139d0:	mov	r1, #3
   139d4:	mov	r5, r0
   139d8:	mov	r0, #0
   139dc:	bl	1697c <__assert_fail@plt+0x549c>
   139e0:	mov	r3, r0
   139e4:	mov	r2, r5
   139e8:	mov	r1, r4
   139ec:	mov	r0, #1
   139f0:	bl	112d0 <error@plt>
   139f4:	bl	1139c <__errno_location@plt>
   139f8:	ldr	r1, [pc, #392]	; 13b88 <__assert_fail@plt+0x26a8>
   139fc:	mov	r2, #5
   13a00:	ldr	r4, [r0]
   13a04:	mov	r0, #0
   13a08:	bl	1121c <dcgettext@plt>
   13a0c:	mov	r1, r4
   13a10:	mov	r2, r0
   13a14:	mov	r0, #1
   13a18:	bl	112d0 <error@plt>
   13a1c:	ldr	r3, [pc, #340]	; 13b78 <__assert_fail@plt+0x2698>
   13a20:	mov	r2, #5
   13a24:	ldr	r1, [pc, #352]	; 13b8c <__assert_fail@plt+0x26ac>
   13a28:	ldr	r4, [r3]
   13a2c:	bl	1121c <dcgettext@plt>
   13a30:	mov	r1, r7
   13a34:	mov	r5, r0
   13a38:	mov	r0, #4
   13a3c:	bl	168c0 <__assert_fail@plt+0x53e0>
   13a40:	mov	r2, r5
   13a44:	mov	r1, #1
   13a48:	mov	r3, r0
   13a4c:	mov	r0, r4
   13a50:	bl	113f0 <__fprintf_chk@plt>
   13a54:	b	13934 <__assert_fail@plt+0x2454>
   13a58:	ldr	r1, [pc, #304]	; 13b90 <__assert_fail@plt+0x26b0>
   13a5c:	mov	r2, #4
   13a60:	ldr	r0, [r6, #156]	; 0x9c
   13a64:	bl	174cc <__assert_fail@plt+0x5fec>
   13a68:	ldr	r3, [r6, #152]	; 0x98
   13a6c:	mov	r1, r0
   13a70:	str	r0, [r6, #156]	; 0x9c
   13a74:	b	137f4 <__assert_fail@plt+0x2314>
   13a78:	bl	1139c <__errno_location@plt>
   13a7c:	mov	r2, #5
   13a80:	ldr	r1, [pc, #268]	; 13b94 <__assert_fail@plt+0x26b4>
   13a84:	b	13a00 <__assert_fail@plt+0x2520>
   13a88:	bl	1139c <__errno_location@plt>
   13a8c:	ldr	r1, [pc, #260]	; 13b98 <__assert_fail@plt+0x26b8>
   13a90:	mov	r2, #5
   13a94:	ldr	r5, [r0]
   13a98:	mov	r0, r4
   13a9c:	bl	1121c <dcgettext@plt>
   13aa0:	mov	r1, r5
   13aa4:	mov	r2, r0
   13aa8:	mov	r0, #1
   13aac:	bl	112d0 <error@plt>
   13ab0:	mov	r2, #5
   13ab4:	ldr	r1, [pc, #224]	; 13b9c <__assert_fail@plt+0x26bc>
   13ab8:	bl	1121c <dcgettext@plt>
   13abc:	mov	r1, r7
   13ac0:	mov	r4, r0
   13ac4:	mov	r0, #4
   13ac8:	bl	168c0 <__assert_fail@plt+0x53e0>
   13acc:	mov	r2, r4
   13ad0:	mov	r1, r9
   13ad4:	mov	r3, r0
   13ad8:	mov	r0, #1
   13adc:	bl	112d0 <error@plt>
   13ae0:	bl	1139c <__errno_location@plt>
   13ae4:	mov	r2, #5
   13ae8:	ldr	r1, [pc, #176]	; 13ba0 <__assert_fail@plt+0x26c0>
   13aec:	b	13a94 <__assert_fail@plt+0x25b4>
   13af0:	bl	1139c <__errno_location@plt>
   13af4:	mov	r2, #5
   13af8:	ldr	r1, [pc, #164]	; 13ba4 <__assert_fail@plt+0x26c4>
   13afc:	b	13a00 <__assert_fail@plt+0x2520>
   13b00:	bl	1139c <__errno_location@plt>
   13b04:	mov	r2, #5
   13b08:	ldr	r1, [pc, #152]	; 13ba8 <__assert_fail@plt+0x26c8>
   13b0c:	ldr	r4, [r0]
   13b10:	mov	r0, #0
   13b14:	bl	1121c <dcgettext@plt>
   13b18:	mov	r1, r7
   13b1c:	mov	r5, r0
   13b20:	mov	r0, #4
   13b24:	bl	168c0 <__assert_fail@plt+0x53e0>
   13b28:	b	139e0 <__assert_fail@plt+0x2500>
   13b2c:	bl	1139c <__errno_location@plt>
   13b30:	mov	r2, #5
   13b34:	ldr	r1, [pc, #112]	; 13bac <__assert_fail@plt+0x26cc>
   13b38:	b	13a00 <__assert_fail@plt+0x2520>
   13b3c:	bl	1139c <__errno_location@plt>
   13b40:	mov	r2, #5
   13b44:	ldr	r1, [pc, #100]	; 13bb0 <__assert_fail@plt+0x26d0>
   13b48:	b	13a00 <__assert_fail@plt+0x2520>
   13b4c:	bl	1139c <__errno_location@plt>
   13b50:	mov	r2, #5
   13b54:	ldr	r1, [pc, #88]	; 13bb4 <__assert_fail@plt+0x26d4>
   13b58:	b	13a94 <__assert_fail@plt+0x25b4>
   13b5c:	andeq	fp, r2, r0, ror r3
   13b60:	andeq	r8, r1, r4, asr #28
   13b64:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   13b68:	andeq	r8, r1, ip, asr #28
   13b6c:	andeq	fp, r2, r0, lsl r4
   13b70:	strdeq	r8, [r1], -ip
   13b74:	andeq	r8, r1, r0, lsl #30
   13b78:	andeq	fp, r2, r4, ror #6
   13b7c:	andeq	r8, r1, ip, ror lr
   13b80:			; <UNDEFINED> instruction: 0x000001b6
   13b84:	andeq	r8, r1, ip, lsr #28
   13b88:	andeq	r8, r1, r8, ror #29
   13b8c:	andeq	r8, r1, r0, ror #27
   13b90:	muleq	r2, r4, r4
   13b94:	andeq	r8, r1, ip, lsr #29
   13b98:	ldrdeq	r8, [r1], -r4
   13b9c:	andeq	r8, r1, r8, lsl #28
   13ba0:	andeq	r8, r1, ip, lsr pc
   13ba4:	andeq	r8, r1, r0, asr #29
   13ba8:	strdeq	r8, [r1], -r4
   13bac:	muleq	r1, r4, lr
   13bb0:	andeq	r8, r1, r4, asr lr
   13bb4:	andeq	r8, r1, r4, lsr #30
   13bb8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bbc:	add	r7, r0, r1, lsl #4
   13bc0:	ldr	ip, [r7, #4]
   13bc4:	cmp	ip, #0
   13bc8:	movge	r8, #0
   13bcc:	blt	13bd8 <__assert_fail@plt+0x26f8>
   13bd0:	mov	r0, r8
   13bd4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bd8:	cmp	r1, #0
   13bdc:	subeq	r4, r2, #1
   13be0:	subne	r4, r1, #1
   13be4:	cmn	ip, #1
   13be8:	mov	sl, r2
   13bec:	mov	r5, r0
   13bf0:	mov	r6, r1
   13bf4:	mov	r8, #0
   13bf8:	beq	13c7c <__assert_fail@plt+0x279c>
   13bfc:	ldr	r1, [pc, #320]	; 13d44 <__assert_fail@plt+0x2864>
   13c00:	ldr	r0, [r7]
   13c04:	bl	14974 <__assert_fail@plt+0x3494>
   13c08:	cmp	r0, #0
   13c0c:	bge	13c8c <__assert_fail@plt+0x27ac>
   13c10:	bl	1139c <__errno_location@plt>
   13c14:	ldr	r8, [r0]
   13c18:	mov	r9, r0
   13c1c:	sub	r2, r8, #23
   13c20:	cmp	r2, #1
   13c24:	bls	13c40 <__assert_fail@plt+0x2760>
   13c28:	b	13ce8 <__assert_fail@plt+0x2808>
   13c2c:	cmp	r4, #0
   13c30:	subne	r4, r4, #1
   13c34:	subeq	r4, sl, #1
   13c38:	cmp	r4, r6
   13c3c:	beq	13cc4 <__assert_fail@plt+0x27e4>
   13c40:	add	fp, r5, r4, lsl #4
   13c44:	ldr	r0, [fp, #4]
   13c48:	cmp	r0, #0
   13c4c:	blt	13c2c <__assert_fail@plt+0x274c>
   13c50:	ldr	r0, [fp, #8]
   13c54:	bl	148d4 <__assert_fail@plt+0x33f4>
   13c58:	cmp	r0, #0
   13c5c:	bne	13cf0 <__assert_fail@plt+0x2810>
   13c60:	mvn	r3, #1
   13c64:	str	r3, [fp, #4]
   13c68:	ldr	ip, [r7, #4]
   13c6c:	str	r0, [fp, #8]
   13c70:	cmn	ip, #1
   13c74:	mov	r8, #1
   13c78:	bne	13bfc <__assert_fail@plt+0x271c>
   13c7c:	ldr	r0, [r7]
   13c80:	bl	13754 <__assert_fail@plt+0x2274>
   13c84:	cmp	r0, #0
   13c88:	blt	13c10 <__assert_fail@plt+0x2730>
   13c8c:	str	r0, [r7, #4]
   13c90:	ldr	r1, [pc, #176]	; 13d48 <__assert_fail@plt+0x2868>
   13c94:	bl	11138 <fdopen@plt>
   13c98:	cmp	r0, #0
   13c9c:	mov	r4, r0
   13ca0:	str	r0, [r7, #8]
   13ca4:	beq	13d18 <__assert_fail@plt+0x2838>
   13ca8:	ldr	r3, [pc, #156]	; 13d4c <__assert_fail@plt+0x286c>
   13cac:	mov	r1, #0
   13cb0:	mov	r0, r8
   13cb4:	ldr	r2, [r3, #288]	; 0x120
   13cb8:	str	r1, [r3, #288]	; 0x120
   13cbc:	str	r2, [r7, #12]
   13cc0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cc4:	ldr	r2, [r5, r4, lsl #4]
   13cc8:	mov	r1, #3
   13ccc:	mov	r0, #0
   13cd0:	bl	1697c <__assert_fail@plt+0x549c>
   13cd4:	mov	r1, r8
   13cd8:	ldr	r2, [pc, #112]	; 13d50 <__assert_fail@plt+0x2870>
   13cdc:	mov	r3, r0
   13ce0:	mov	r0, #1
   13ce4:	bl	112d0 <error@plt>
   13ce8:	ldr	r2, [r5, r6, lsl #4]
   13cec:	b	13cc8 <__assert_fail@plt+0x27e8>
   13cf0:	ldr	r2, [fp]
   13cf4:	mov	r1, #3
   13cf8:	mov	r0, #0
   13cfc:	ldr	r4, [r9]
   13d00:	bl	1697c <__assert_fail@plt+0x549c>
   13d04:	mov	r1, r4
   13d08:	ldr	r2, [pc, #64]	; 13d50 <__assert_fail@plt+0x2870>
   13d0c:	mov	r3, r0
   13d10:	mov	r0, #1
   13d14:	bl	112d0 <error@plt>
   13d18:	bl	1139c <__errno_location@plt>
   13d1c:	ldr	r2, [r5, r6, lsl #4]
   13d20:	mov	r1, #3
   13d24:	ldr	r5, [r0]
   13d28:	mov	r0, r4
   13d2c:	bl	1697c <__assert_fail@plt+0x549c>
   13d30:	mov	r1, r5
   13d34:	ldr	r2, [pc, #20]	; 13d50 <__assert_fail@plt+0x2870>
   13d38:	mov	r3, r0
   13d3c:	mov	r0, #1
   13d40:	bl	112d0 <error@plt>
   13d44:	andeq	r0, r0, r1, lsl #24
   13d48:	andeq	r8, r1, r8, asr pc
   13d4c:	andeq	fp, r2, r0, ror r3
   13d50:	andeq	r8, r1, ip, asr #31
   13d54:	push	{r4, r5, r6, r7, lr}
   13d58:	subs	r4, r0, #0
   13d5c:	sub	sp, sp, #36	; 0x24
   13d60:	mov	r5, r1
   13d64:	mov	r7, r2
   13d68:	mov	r6, r3
   13d6c:	beq	13ee0 <__assert_fail@plt+0x2a00>
   13d70:	bl	148d4 <__assert_fail@plt+0x33f4>
   13d74:	cmp	r0, #0
   13d78:	bne	13e80 <__assert_fail@plt+0x29a0>
   13d7c:	cmp	r5, #0
   13d80:	blt	13dd0 <__assert_fail@plt+0x28f0>
   13d84:	ldr	r2, [pc, #616]	; 13ff4 <__assert_fail@plt+0x2b14>
   13d88:	ldr	r4, [r2, #152]	; 0x98
   13d8c:	cmp	r4, #0
   13d90:	beq	13dd0 <__assert_fail@plt+0x28f0>
   13d94:	ldr	r1, [r2, #156]	; 0x9c
   13d98:	ldr	r3, [r1]
   13d9c:	cmp	r5, r3
   13da0:	addne	r0, r1, #4
   13da4:	movne	r3, #0
   13da8:	bne	13dc4 <__assert_fail@plt+0x28e4>
   13dac:	b	13ec8 <__assert_fail@plt+0x29e8>
   13db0:	mov	ip, r0
   13db4:	add	r0, r0, #4
   13db8:	ldr	lr, [ip]
   13dbc:	cmp	r5, lr
   13dc0:	beq	13ecc <__assert_fail@plt+0x29ec>
   13dc4:	add	r3, r3, #1
   13dc8:	cmp	r3, r4
   13dcc:	bne	13db0 <__assert_fail@plt+0x28d0>
   13dd0:	cmp	r7, #0
   13dd4:	ble	13e78 <__assert_fail@plt+0x2998>
   13dd8:	add	r1, sp, #32
   13ddc:	mov	r4, #0
   13de0:	mov	r0, r7
   13de4:	str	r4, [r1, #-24]!	; 0xffffffe8
   13de8:	mov	r2, r4
   13dec:	bl	11294 <waitpid@plt>
   13df0:	cmn	r0, #1
   13df4:	beq	13f40 <__assert_fail@plt+0x2a60>
   13df8:	ldr	r2, [sp, #8]
   13dfc:	and	r4, r2, #127	; 0x7f
   13e00:	add	r3, r4, #1
   13e04:	sxtb	r3, r3
   13e08:	cmp	r3, #1
   13e0c:	ble	13f70 <__assert_fail@plt+0x2a90>
   13e10:	cmp	r4, #13
   13e14:	beq	13e78 <__assert_fail@plt+0x2998>
   13e18:	add	r5, sp, #12
   13e1c:	mov	r1, r5
   13e20:	mov	r0, r4
   13e24:	bl	16d64 <__assert_fail@plt+0x5884>
   13e28:	cmp	r0, #0
   13e2c:	bne	13f24 <__assert_fail@plt+0x2a44>
   13e30:	mov	r2, #5
   13e34:	ldr	r1, [pc, #444]	; 13ff8 <__assert_fail@plt+0x2b18>
   13e38:	mov	r0, #0
   13e3c:	bl	1121c <dcgettext@plt>
   13e40:	mov	r2, r6
   13e44:	mov	r1, #3
   13e48:	mov	r7, r0
   13e4c:	mov	r0, #0
   13e50:	bl	1697c <__assert_fail@plt+0x549c>
   13e54:	ldr	r3, [pc, #408]	; 13ff4 <__assert_fail@plt+0x2b14>
   13e58:	str	r5, [sp]
   13e5c:	mov	r2, r7
   13e60:	ldr	r3, [r3, #40]	; 0x28
   13e64:	mov	r1, #0
   13e68:	str	r3, [sp, #4]
   13e6c:	mov	r3, r0
   13e70:	add	r0, r4, #128	; 0x80
   13e74:	bl	112d0 <error@plt>
   13e78:	add	sp, sp, #36	; 0x24
   13e7c:	pop	{r4, r5, r6, r7, pc}
   13e80:	bl	1139c <__errno_location@plt>
   13e84:	ldr	r3, [pc, #360]	; 13ff4 <__assert_fail@plt+0x2b14>
   13e88:	ldr	r3, [r3, #40]	; 0x28
   13e8c:	ldr	r4, [r0]
   13e90:	adds	r0, r3, #0
   13e94:	movne	r0, #1
   13e98:	cmp	r4, #32
   13e9c:	movne	r0, #0
   13ea0:	cmp	r0, #0
   13ea4:	bne	13d7c <__assert_fail@plt+0x289c>
   13ea8:	mov	r2, r6
   13eac:	mov	r1, #3
   13eb0:	bl	1697c <__assert_fail@plt+0x549c>
   13eb4:	mov	r1, r4
   13eb8:	ldr	r2, [pc, #316]	; 13ffc <__assert_fail@plt+0x2b1c>
   13ebc:	mov	r3, r0
   13ec0:	mov	r0, #1
   13ec4:	bl	112d0 <error@plt>
   13ec8:	mov	ip, r1
   13ecc:	sub	r4, r4, #1
   13ed0:	str	r4, [r2, #152]	; 0x98
   13ed4:	ldr	r3, [r1, r4, lsl #2]
   13ed8:	str	r3, [ip]
   13edc:	b	13dd0 <__assert_fail@plt+0x28f0>
   13ee0:	cmp	r1, #0
   13ee4:	blt	13dd0 <__assert_fail@plt+0x28f0>
   13ee8:	mov	r0, r5
   13eec:	bl	114c8 <close@plt>
   13ef0:	cmp	r0, #0
   13ef4:	bge	13d84 <__assert_fail@plt+0x28a4>
   13ef8:	bl	1139c <__errno_location@plt>
   13efc:	mov	r2, r6
   13f00:	mov	r1, #3
   13f04:	ldr	r5, [r0]
   13f08:	mov	r0, r4
   13f0c:	bl	1697c <__assert_fail@plt+0x549c>
   13f10:	mov	r1, r5
   13f14:	ldr	r2, [pc, #224]	; 13ffc <__assert_fail@plt+0x2b1c>
   13f18:	mov	r3, r0
   13f1c:	mov	r0, #1
   13f20:	bl	112d0 <error@plt>
   13f24:	str	r4, [sp]
   13f28:	ldr	r3, [pc, #208]	; 14000 <__assert_fail@plt+0x2b20>
   13f2c:	mov	r2, #19
   13f30:	mov	r1, #1
   13f34:	mov	r0, r5
   13f38:	bl	113a8 <__sprintf_chk@plt>
   13f3c:	b	13e30 <__assert_fail@plt+0x2950>
   13f40:	bl	1139c <__errno_location@plt>
   13f44:	ldr	r5, [r0]
   13f48:	cmp	r5, #10
   13f4c:	beq	13df8 <__assert_fail@plt+0x2918>
   13f50:	mov	r2, #5
   13f54:	ldr	r1, [pc, #168]	; 14004 <__assert_fail@plt+0x2b24>
   13f58:	mov	r0, r4
   13f5c:	bl	1121c <dcgettext@plt>
   13f60:	mov	r1, r5
   13f64:	mov	r2, r0
   13f68:	mov	r0, #1
   13f6c:	bl	112d0 <error@plt>
   13f70:	cmp	r4, #0
   13f74:	bne	13fd0 <__assert_fail@plt+0x2af0>
   13f78:	asr	r2, r2, #8
   13f7c:	ands	r5, r2, #255	; 0xff
   13f80:	beq	13e78 <__assert_fail@plt+0x2998>
   13f84:	mov	r2, #5
   13f88:	ldr	r1, [pc, #120]	; 14008 <__assert_fail@plt+0x2b28>
   13f8c:	mov	r0, r4
   13f90:	bl	1121c <dcgettext@plt>
   13f94:	mov	r2, r6
   13f98:	mov	r1, #3
   13f9c:	mov	r7, r0
   13fa0:	mov	r0, r4
   13fa4:	bl	1697c <__assert_fail@plt+0x549c>
   13fa8:	ldr	r3, [pc, #68]	; 13ff4 <__assert_fail@plt+0x2b14>
   13fac:	str	r5, [sp]
   13fb0:	mov	r2, r7
   13fb4:	ldr	r3, [r3, #40]	; 0x28
   13fb8:	mov	r1, r4
   13fbc:	str	r3, [sp, #4]
   13fc0:	mov	r3, r0
   13fc4:	mov	r0, r5
   13fc8:	bl	112d0 <error@plt>
   13fcc:	b	13e78 <__assert_fail@plt+0x2998>
   13fd0:	mov	r2, #5
   13fd4:	ldr	r1, [pc, #48]	; 1400c <__assert_fail@plt+0x2b2c>
   13fd8:	mov	r0, #0
   13fdc:	bl	1121c <dcgettext@plt>
   13fe0:	ldr	r3, [sp, #8]
   13fe4:	mov	r1, #0
   13fe8:	mov	r2, r0
   13fec:	mov	r0, #1
   13ff0:	bl	112d0 <error@plt>
   13ff4:	andeq	fp, r2, r0, ror r3
   13ff8:	andeq	r8, r1, ip, ror pc
   13ffc:	andeq	r8, r1, ip, asr #31
   14000:	andeq	r8, r1, r8, ror pc
   14004:	andeq	r8, r1, ip, asr pc
   14008:	andeq	r8, r1, r8, lsr #31
   1400c:	ldrdeq	r8, [r1], -r0
   14010:	cmp	r0, #0
   14014:	push	{r4, r5, r6, r7, r8, lr}
   14018:	mov	r6, r1
   1401c:	mov	r4, r2
   14020:	beq	140d4 <__assert_fail@plt+0x2bf4>
   14024:	cmp	r1, #0
   14028:	cmpeq	r2, #0
   1402c:	ldr	r5, [pc, #204]	; 14100 <__assert_fail@plt+0x2c20>
   14030:	bne	14040 <__assert_fail@plt+0x2b60>
   14034:	ldrb	r3, [r5, #296]	; 0x128
   14038:	cmp	r3, #0
   1403c:	bne	140cc <__assert_fail@plt+0x2bec>
   14040:	ldr	r7, [pc, #188]	; 14104 <__assert_fail@plt+0x2c24>
   14044:	ldr	r3, [r5]
   14048:	ldr	r2, [r5, #288]	; 0x120
   1404c:	ldr	r1, [r7, #8]
   14050:	mov	r0, #0
   14054:	bl	13d54 <__assert_fail@plt+0x2874>
   14058:	bl	134d4 <__assert_fail@plt+0x1ff4>
   1405c:	ldr	r0, [r5]
   14060:	bl	13754 <__assert_fail@plt+0x2274>
   14064:	cmp	r0, #0
   14068:	str	r0, [r7, #8]
   1406c:	blt	140e8 <__assert_fail@plt+0x2c08>
   14070:	mov	r1, r6
   14074:	mov	r2, r4
   14078:	bl	14b68 <__assert_fail@plt+0x3688>
   1407c:	cmp	r4, r0
   14080:	beq	140cc <__assert_fail@plt+0x2bec>
   14084:	bl	1139c <__errno_location@plt>
   14088:	ldr	r2, [pc, #112]	; 14100 <__assert_fail@plt+0x2c20>
   1408c:	ldr	r3, [r2, #40]	; 0x28
   14090:	ldr	r4, [r0]
   14094:	adds	r0, r3, #0
   14098:	movne	r0, #1
   1409c:	cmp	r4, #32
   140a0:	movne	r0, #0
   140a4:	cmp	r0, #0
   140a8:	bne	140e0 <__assert_fail@plt+0x2c00>
   140ac:	ldr	r2, [r2]
   140b0:	mov	r1, #3
   140b4:	bl	1697c <__assert_fail@plt+0x549c>
   140b8:	mov	r1, r4
   140bc:	ldr	r2, [pc, #68]	; 14108 <__assert_fail@plt+0x2c28>
   140c0:	mov	r3, r0
   140c4:	mov	r0, #1
   140c8:	bl	112d0 <error@plt>
   140cc:	mov	r0, #1
   140d0:	pop	{r4, r5, r6, r7, r8, pc}
   140d4:	ldr	r3, [pc, #40]	; 14104 <__assert_fail@plt+0x2c24>
   140d8:	ldr	r0, [r3, #8]
   140dc:	b	14070 <__assert_fail@plt+0x2b90>
   140e0:	mov	r0, #0
   140e4:	pop	{r4, r5, r6, r7, r8, pc}
   140e8:	bl	1139c <__errno_location@plt>
   140ec:	ldr	r2, [r5]
   140f0:	mov	r1, #3
   140f4:	ldr	r4, [r0]
   140f8:	mov	r0, #0
   140fc:	b	140b4 <__assert_fail@plt+0x2bd4>
   14100:	andeq	fp, r2, r0, ror r3
   14104:	andeq	fp, r2, r4, asr r1
   14108:	andeq	r8, r1, ip, asr #31
   1410c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14110:	sub	sp, sp, #52	; 0x34
   14114:	mov	r7, r1
   14118:	ldr	r5, [sp, #88]	; 0x58
   1411c:	strd	r0, [sp, #24]
   14120:	str	r2, [sp, #36]	; 0x24
   14124:	ldr	r1, [sp, #100]	; 0x64
   14128:	ldr	r2, [sp, #96]	; 0x60
   1412c:	mov	sl, #1
   14130:	orr	r2, r2, r1
   14134:	cmn	r5, #1
   14138:	str	r3, [sp, #44]	; 0x2c
   1413c:	mov	r6, r0
   14140:	str	r2, [sp, #40]	; 0x28
   14144:	mov	r4, sl
   14148:	mov	r8, #0
   1414c:	mov	r9, #0
   14150:	beq	14234 <__assert_fail@plt+0x2d54>
   14154:	cmp	r5, r3
   14158:	movcs	r3, #0
   1415c:	movcc	r3, #1
   14160:	str	r3, [sp, #32]
   14164:	mov	r3, #0
   14168:	mov	r2, r5
   1416c:	cmp	r7, r3
   14170:	cmpeq	r6, r5
   14174:	strd	r2, [sp, #8]
   14178:	bhi	14268 <__assert_fail@plt+0x2d88>
   1417c:	ldr	fp, [sp, #36]	; 0x24
   14180:	ldr	r3, [sp, #40]	; 0x28
   14184:	clz	r3, r3
   14188:	lsr	r3, r3, #5
   1418c:	orr	r2, sl, r4
   14190:	str	r3, [sp, #8]
   14194:	mov	r3, fp
   14198:	ldrd	sl, [sp, #24]
   1419c:	b	141e8 <__assert_fail@plt+0x2d08>
   141a0:	ldrd	r0, [sp, #96]	; 0x60
   141a4:	adds	r8, r8, r4
   141a8:	adc	r9, r9, #0
   141ac:	cmp	r9, r1
   141b0:	ldr	r4, [sp, #8]
   141b4:	cmpeq	r8, r0
   141b8:	orrcc	r4, r4, #1
   141bc:	orr	r2, ip, r4
   141c0:	tst	r2, #255	; 0xff
   141c4:	beq	14364 <__assert_fail@plt+0x2e84>
   141c8:	mov	r1, #0
   141cc:	sub	r5, r5, r6
   141d0:	cmp	fp, r1
   141d4:	cmpeq	sl, r5
   141d8:	add	r3, r3, r6
   141dc:	mov	r0, r5
   141e0:	mov	r6, sl
   141e4:	bhi	14210 <__assert_fail@plt+0x2d30>
   141e8:	ands	ip, r2, #255	; 0xff
   141ec:	beq	141a0 <__assert_fail@plt+0x2cc0>
   141f0:	mov	r1, r3
   141f4:	mov	r2, r6
   141f8:	mov	r0, r4
   141fc:	str	r3, [sp, #20]
   14200:	bl	14010 <__assert_fail@plt+0x2b30>
   14204:	ldr	r3, [sp, #20]
   14208:	mov	ip, r0
   1420c:	b	141a0 <__assert_fail@plt+0x2cc0>
   14210:	cmp	r5, #0
   14214:	mov	sl, ip
   14218:	mov	fp, r3
   1421c:	strd	r0, [sp, #8]
   14220:	ldrd	r6, [sp, #24]
   14224:	bne	14288 <__assert_fail@plt+0x2da8>
   14228:	ldr	r3, [sp, #32]
   1422c:	cmp	r3, #0
   14230:	bne	14320 <__assert_fail@plt+0x2e40>
   14234:	cmp	sl, #0
   14238:	beq	142ec <__assert_fail@plt+0x2e0c>
   1423c:	ldr	r2, [sp, #44]	; 0x2c
   14240:	ldr	r1, [sp, #36]	; 0x24
   14244:	mov	r0, #0
   14248:	bl	16b18 <__assert_fail@plt+0x5638>
   1424c:	cmn	r0, #1
   14250:	mov	r5, r0
   14254:	beq	1436c <__assert_fail@plt+0x2e8c>
   14258:	clz	r3, r0
   1425c:	lsr	r3, r3, #5
   14260:	str	r3, [sp, #32]
   14264:	b	14164 <__assert_fail@plt+0x2c84>
   14268:	cmp	r5, #0
   1426c:	beq	14228 <__assert_fail@plt+0x2d48>
   14270:	orr	sl, r4, sl
   14274:	ands	r2, sl, #255	; 0xff
   14278:	moveq	sl, #0
   1427c:	moveq	r4, #1
   14280:	beq	142a8 <__assert_fail@plt+0x2dc8>
   14284:	ldr	fp, [sp, #36]	; 0x24
   14288:	mov	r2, r5
   1428c:	mov	r0, r4
   14290:	mov	r1, fp
   14294:	bl	14010 <__assert_fail@plt+0x2b30>
   14298:	mov	r2, r4
   1429c:	eor	r3, r0, #1
   142a0:	mov	sl, r0
   142a4:	uxtb	r4, r3
   142a8:	uxtb	r2, r2
   142ac:	adds	r8, r8, r2
   142b0:	mov	r3, #0
   142b4:	adc	r9, r9, r3
   142b8:	ldrd	r2, [sp, #96]	; 0x60
   142bc:	cmp	r3, r9
   142c0:	cmpeq	r2, r8
   142c4:	movne	r4, #0
   142c8:	andeq	r4, r4, #1
   142cc:	cmp	r4, #0
   142d0:	bne	14364 <__assert_fail@plt+0x2e84>
   142d4:	ldrd	r2, [sp, #8]
   142d8:	subs	r2, r6, r2
   142dc:	sbc	r3, r7, r3
   142e0:	mov	r6, r2
   142e4:	mov	r7, r3
   142e8:	b	14228 <__assert_fail@plt+0x2d48>
   142ec:	mov	r3, #1
   142f0:	str	r3, [sp]
   142f4:	mov	r2, r6
   142f8:	mov	r3, r7
   142fc:	mov	r0, #0
   14300:	bl	11288 <lseek64@plt>
   14304:	mvn	r3, #0
   14308:	mvn	r2, #0
   1430c:	cmp	r1, r3
   14310:	cmpeq	r0, r2
   14314:	ldrdne	r6, [sp, #24]
   14318:	movne	r4, #1
   1431c:	b	1423c <__assert_fail@plt+0x2d5c>
   14320:	ldrd	r2, [sp, #96]	; 0x60
   14324:	cmp	r9, r3
   14328:	cmpeq	r8, r2
   1432c:	bcs	14364 <__assert_fail@plt+0x2e84>
   14330:	mov	r5, #0
   14334:	mov	r4, #1
   14338:	mov	r6, r2
   1433c:	mov	r7, r3
   14340:	adds	r8, r8, #1
   14344:	adc	r9, r9, #0
   14348:	mov	r2, r5
   1434c:	mov	r1, #0
   14350:	mov	r0, r4
   14354:	bl	14010 <__assert_fail@plt+0x2b30>
   14358:	cmp	r9, r7
   1435c:	cmpeq	r8, r6
   14360:	bne	14340 <__assert_fail@plt+0x2e60>
   14364:	add	sp, sp, #52	; 0x34
   14368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1436c:	bl	1139c <__errno_location@plt>
   14370:	ldr	r3, [pc, #36]	; 1439c <__assert_fail@plt+0x2ebc>
   14374:	mov	r1, #3
   14378:	ldr	r2, [r3, #300]	; 0x12c
   1437c:	ldr	r4, [r0]
   14380:	mov	r0, #0
   14384:	bl	1697c <__assert_fail@plt+0x549c>
   14388:	mov	r1, r4
   1438c:	ldr	r2, [pc, #12]	; 143a0 <__assert_fail@plt+0x2ec0>
   14390:	mov	r3, r0
   14394:	mov	r0, #1
   14398:	bl	112d0 <error@plt>
   1439c:	andeq	fp, r2, r0, ror r3
   143a0:	andeq	r8, r1, ip, asr #31
   143a4:	subs	r5, r0, #0
   143a8:	push	{r7, lr}
   143ac:	sub	sp, sp, #56	; 0x38
   143b0:	beq	143ec <__assert_fail@plt+0x2f0c>
   143b4:	ldr	r3, [pc, #772]	; 146c0 <__assert_fail@plt+0x31e0>
   143b8:	mov	r2, #5
   143bc:	ldr	r1, [pc, #768]	; 146c4 <__assert_fail@plt+0x31e4>
   143c0:	mov	r0, #0
   143c4:	ldr	r4, [r3]
   143c8:	bl	1121c <dcgettext@plt>
   143cc:	ldr	r3, [pc, #756]	; 146c8 <__assert_fail@plt+0x31e8>
   143d0:	mov	r1, #1
   143d4:	ldr	r3, [r3]
   143d8:	mov	r2, r0
   143dc:	mov	r0, r4
   143e0:	bl	113f0 <__fprintf_chk@plt>
   143e4:	mov	r0, r5
   143e8:	bl	11348 <exit@plt>
   143ec:	mov	r2, #5
   143f0:	ldr	r1, [pc, #724]	; 146cc <__assert_fail@plt+0x31ec>
   143f4:	bl	1121c <dcgettext@plt>
   143f8:	ldr	r3, [pc, #712]	; 146c8 <__assert_fail@plt+0x31e8>
   143fc:	ldr	r7, [pc, #716]	; 146d0 <__assert_fail@plt+0x31f0>
   14400:	ldr	r2, [r3]
   14404:	mov	r1, r0
   14408:	mov	r0, #1
   1440c:	bl	113cc <__printf_chk@plt>
   14410:	mov	r2, #5
   14414:	ldr	r1, [pc, #696]	; 146d4 <__assert_fail@plt+0x31f4>
   14418:	mov	r0, r5
   1441c:	bl	1121c <dcgettext@plt>
   14420:	ldr	r1, [r7]
   14424:	bl	11150 <fputs_unlocked@plt>
   14428:	mov	r2, #5
   1442c:	ldr	r1, [pc, #676]	; 146d8 <__assert_fail@plt+0x31f8>
   14430:	mov	r0, r5
   14434:	bl	1121c <dcgettext@plt>
   14438:	ldr	r1, [r7]
   1443c:	bl	11150 <fputs_unlocked@plt>
   14440:	mov	r2, #5
   14444:	ldr	r1, [pc, #656]	; 146dc <__assert_fail@plt+0x31fc>
   14448:	mov	r0, r5
   1444c:	bl	1121c <dcgettext@plt>
   14450:	ldr	r1, [r7]
   14454:	bl	11150 <fputs_unlocked@plt>
   14458:	mov	r2, #5
   1445c:	ldr	r1, [pc, #636]	; 146e0 <__assert_fail@plt+0x3200>
   14460:	mov	r0, r5
   14464:	ldr	r4, [r7]
   14468:	bl	1121c <dcgettext@plt>
   1446c:	mov	r3, #2
   14470:	mov	r1, #1
   14474:	mov	r2, r0
   14478:	mov	r0, r4
   1447c:	bl	113f0 <__fprintf_chk@plt>
   14480:	mov	r2, #5
   14484:	ldr	r1, [pc, #600]	; 146e4 <__assert_fail@plt+0x3204>
   14488:	mov	r0, r5
   1448c:	bl	1121c <dcgettext@plt>
   14490:	ldr	r1, [r7]
   14494:	bl	11150 <fputs_unlocked@plt>
   14498:	mov	r2, #5
   1449c:	ldr	r1, [pc, #580]	; 146e8 <__assert_fail@plt+0x3208>
   144a0:	mov	r0, r5
   144a4:	bl	1121c <dcgettext@plt>
   144a8:	ldr	r1, [r7]
   144ac:	bl	11150 <fputs_unlocked@plt>
   144b0:	mov	r2, #5
   144b4:	ldr	r1, [pc, #560]	; 146ec <__assert_fail@plt+0x320c>
   144b8:	mov	r0, r5
   144bc:	bl	1121c <dcgettext@plt>
   144c0:	ldr	r1, [r7]
   144c4:	bl	11150 <fputs_unlocked@plt>
   144c8:	mov	r2, #5
   144cc:	ldr	r1, [pc, #540]	; 146f0 <__assert_fail@plt+0x3210>
   144d0:	mov	r0, r5
   144d4:	bl	1121c <dcgettext@plt>
   144d8:	ldr	r4, [pc, #532]	; 146f4 <__assert_fail@plt+0x3214>
   144dc:	ldr	r1, [r7]
   144e0:	bl	11150 <fputs_unlocked@plt>
   144e4:	mov	r2, #5
   144e8:	ldr	r1, [pc, #520]	; 146f8 <__assert_fail@plt+0x3218>
   144ec:	mov	r0, r5
   144f0:	bl	1121c <dcgettext@plt>
   144f4:	ldr	r1, [r7]
   144f8:	bl	11150 <fputs_unlocked@plt>
   144fc:	ldm	r4!, {r0, r1, r2, r3}
   14500:	mov	lr, sp
   14504:	stmia	lr!, {r0, r1, r2, r3}
   14508:	ldm	r4!, {r0, r1, r2, r3}
   1450c:	ldr	ip, [sp]
   14510:	stmia	lr!, {r0, r1, r2, r3}
   14514:	cmp	ip, #0
   14518:	ldm	r4!, {r0, r1, r2, r3}
   1451c:	stmia	lr!, {r0, r1, r2, r3}
   14520:	ldm	r4, {r0, r1}
   14524:	moveq	r4, sp
   14528:	stm	lr, {r0, r1}
   1452c:	beq	1455c <__assert_fail@plt+0x307c>
   14530:	ldr	r6, [pc, #452]	; 146fc <__assert_fail@plt+0x321c>
   14534:	mov	r4, sp
   14538:	b	14548 <__assert_fail@plt+0x3068>
   1453c:	ldr	ip, [r4, #8]!
   14540:	cmp	ip, #0
   14544:	beq	1455c <__assert_fail@plt+0x307c>
   14548:	mov	r1, ip
   1454c:	mov	r0, r6
   14550:	bl	11168 <strcmp@plt>
   14554:	cmp	r0, #0
   14558:	bne	1453c <__assert_fail@plt+0x305c>
   1455c:	ldr	r4, [r4, #4]
   14560:	mov	r2, #5
   14564:	cmp	r4, #0
   14568:	ldr	r1, [pc, #400]	; 14700 <__assert_fail@plt+0x3220>
   1456c:	beq	14614 <__assert_fail@plt+0x3134>
   14570:	mov	r0, #0
   14574:	bl	1121c <dcgettext@plt>
   14578:	ldr	r3, [pc, #388]	; 14704 <__assert_fail@plt+0x3224>
   1457c:	ldr	r2, [pc, #388]	; 14708 <__assert_fail@plt+0x3228>
   14580:	mov	r1, r0
   14584:	mov	r0, #1
   14588:	bl	113cc <__printf_chk@plt>
   1458c:	mov	r1, #0
   14590:	mov	r0, #5
   14594:	bl	11438 <setlocale@plt>
   14598:	cmp	r0, #0
   1459c:	ldreq	r6, [pc, #344]	; 146fc <__assert_fail@plt+0x321c>
   145a0:	beq	145bc <__assert_fail@plt+0x30dc>
   145a4:	mov	r2, #3
   145a8:	ldr	r1, [pc, #348]	; 1470c <__assert_fail@plt+0x322c>
   145ac:	bl	114b0 <strncmp@plt>
   145b0:	ldr	r6, [pc, #324]	; 146fc <__assert_fail@plt+0x321c>
   145b4:	cmp	r0, #0
   145b8:	bne	146a4 <__assert_fail@plt+0x31c4>
   145bc:	mov	r2, #5
   145c0:	ldr	r1, [pc, #328]	; 14710 <__assert_fail@plt+0x3230>
   145c4:	mov	r0, #0
   145c8:	bl	1121c <dcgettext@plt>
   145cc:	ldr	r3, [pc, #296]	; 146fc <__assert_fail@plt+0x321c>
   145d0:	ldr	r2, [pc, #300]	; 14704 <__assert_fail@plt+0x3224>
   145d4:	mov	r1, r0
   145d8:	mov	r0, #1
   145dc:	bl	113cc <__printf_chk@plt>
   145e0:	mov	r2, #5
   145e4:	ldr	r1, [pc, #296]	; 14714 <__assert_fail@plt+0x3234>
   145e8:	mov	r0, #0
   145ec:	bl	1121c <dcgettext@plt>
   145f0:	ldr	r2, [pc, #288]	; 14718 <__assert_fail@plt+0x3238>
   145f4:	cmp	r4, r6
   145f8:	ldr	r3, [pc, #284]	; 1471c <__assert_fail@plt+0x323c>
   145fc:	movne	r3, r2
   14600:	mov	r1, r0
   14604:	mov	r2, r4
   14608:	mov	r0, #1
   1460c:	bl	113cc <__printf_chk@plt>
   14610:	b	143e4 <__assert_fail@plt+0x2f04>
   14614:	mov	r0, r4
   14618:	bl	1121c <dcgettext@plt>
   1461c:	ldr	r3, [pc, #224]	; 14704 <__assert_fail@plt+0x3224>
   14620:	ldr	r2, [pc, #224]	; 14708 <__assert_fail@plt+0x3228>
   14624:	mov	r1, r0
   14628:	mov	r0, #1
   1462c:	bl	113cc <__printf_chk@plt>
   14630:	mov	r1, r4
   14634:	mov	r0, #5
   14638:	bl	11438 <setlocale@plt>
   1463c:	cmp	r0, #0
   14640:	beq	14658 <__assert_fail@plt+0x3178>
   14644:	mov	r2, #3
   14648:	ldr	r1, [pc, #188]	; 1470c <__assert_fail@plt+0x322c>
   1464c:	bl	114b0 <strncmp@plt>
   14650:	cmp	r0, #0
   14654:	bne	1469c <__assert_fail@plt+0x31bc>
   14658:	mov	r2, #5
   1465c:	ldr	r1, [pc, #172]	; 14710 <__assert_fail@plt+0x3230>
   14660:	mov	r0, #0
   14664:	bl	1121c <dcgettext@plt>
   14668:	ldr	r3, [pc, #140]	; 146fc <__assert_fail@plt+0x321c>
   1466c:	ldr	r2, [pc, #144]	; 14704 <__assert_fail@plt+0x3224>
   14670:	mov	r4, r3
   14674:	mov	r1, r0
   14678:	mov	r0, #1
   1467c:	bl	113cc <__printf_chk@plt>
   14680:	ldr	r1, [pc, #140]	; 14714 <__assert_fail@plt+0x3234>
   14684:	mov	r2, #5
   14688:	mov	r0, #0
   1468c:	bl	1121c <dcgettext@plt>
   14690:	ldr	r3, [pc, #132]	; 1471c <__assert_fail@plt+0x323c>
   14694:	mov	r1, r0
   14698:	b	14604 <__assert_fail@plt+0x3124>
   1469c:	ldr	r6, [pc, #88]	; 146fc <__assert_fail@plt+0x321c>
   146a0:	mov	r4, r6
   146a4:	mov	r2, #5
   146a8:	ldr	r1, [pc, #112]	; 14720 <__assert_fail@plt+0x3240>
   146ac:	mov	r0, #0
   146b0:	bl	1121c <dcgettext@plt>
   146b4:	ldr	r1, [r7]
   146b8:	bl	11150 <fputs_unlocked@plt>
   146bc:	b	145bc <__assert_fail@plt+0x30dc>
   146c0:	andeq	fp, r2, r0, ror #6
   146c4:	strdeq	r8, [r1], -ip
   146c8:	andeq	fp, r2, ip, lsr #10
   146cc:	andeq	r9, r1, r4, lsr #32
   146d0:	andeq	fp, r2, r4, ror #6
   146d4:	andeq	r9, r1, ip, asr #32
   146d8:	strheq	r9, [r1], -r8
   146dc:	strdeq	r9, [r1], -r0
   146e0:	andeq	r9, r1, ip, lsr r1
   146e4:	andeq	r9, r1, r0, lsl #11
   146e8:	strdeq	r9, [r1], -r4
   146ec:	andeq	r9, r1, r4, lsr #12
   146f0:	andeq	r9, r1, ip, asr r6
   146f4:	andeq	r8, r1, r4, lsr #24
   146f8:	andeq	r9, r1, r0, lsr r7
   146fc:	strdeq	r8, [r1], -r4
   14700:	andeq	r9, r1, r4, lsl #17
   14704:	muleq	r1, ip, r8
   14708:	andeq	r9, r1, r4, asr #17
   1470c:	ldrdeq	r9, [r1], -r4
   14710:	andeq	r9, r1, r0, lsr #18
   14714:	andeq	r9, r1, ip, lsr r9
   14718:	strdeq	r9, [r1], -r0
   1471c:	andeq	r9, r1, r4, lsr #26
   14720:	ldrdeq	r9, [r1], -r8
   14724:	ldrb	r3, [r0]
   14728:	cmp	r3, #47	; 0x2f
   1472c:	bne	1473c <__assert_fail@plt+0x325c>
   14730:	ldrb	r3, [r0, #1]!
   14734:	cmp	r3, #47	; 0x2f
   14738:	beq	14730 <__assert_fail@plt+0x3250>
   1473c:	cmp	r3, #0
   14740:	bxeq	lr
   14744:	mov	r2, #0
   14748:	push	{lr}		; (str lr, [sp, #-4]!)
   1474c:	mov	ip, r2
   14750:	mov	r1, r0
   14754:	mov	lr, #1
   14758:	cmp	r3, #47	; 0x2f
   1475c:	moveq	r2, lr
   14760:	beq	14770 <__assert_fail@plt+0x3290>
   14764:	cmp	r2, #0
   14768:	movne	r0, r1
   1476c:	movne	r2, ip
   14770:	ldrb	r3, [r1, #1]!
   14774:	cmp	r3, #0
   14778:	bne	14758 <__assert_fail@plt+0x3278>
   1477c:	pop	{pc}		; (ldr pc, [sp], #4)
   14780:	push	{r4, lr}
   14784:	mov	r4, r0
   14788:	bl	11354 <strlen@plt>
   1478c:	cmp	r0, #1
   14790:	popls	{r4, pc}
   14794:	sub	r3, r0, #1
   14798:	add	r2, r4, r3
   1479c:	ldrb	r1, [r4, r3]
   147a0:	cmp	r1, #47	; 0x2f
   147a4:	popne	{r4, pc}
   147a8:	cmp	r3, #1
   147ac:	beq	147c0 <__assert_fail@plt+0x32e0>
   147b0:	ldrb	r1, [r2, #-1]!
   147b4:	sub	r0, r3, #1
   147b8:	cmp	r1, #47	; 0x2f
   147bc:	beq	147c8 <__assert_fail@plt+0x32e8>
   147c0:	mov	r0, r3
   147c4:	pop	{r4, pc}
   147c8:	mov	r3, r0
   147cc:	b	147a8 <__assert_fail@plt+0x32c8>
   147d0:	ldr	r3, [pc, #4]	; 147dc <__assert_fail@plt+0x32fc>
   147d4:	str	r0, [r3]
   147d8:	bx	lr
   147dc:	andeq	fp, r2, r4, lsr #10
   147e0:	ldr	r3, [pc, #4]	; 147ec <__assert_fail@plt+0x330c>
   147e4:	strb	r0, [r3, #4]
   147e8:	bx	lr
   147ec:	andeq	fp, r2, r4, lsr #10
   147f0:	ldr	r3, [pc, #192]	; 148b8 <__assert_fail@plt+0x33d8>
   147f4:	push	{r4, r5, r6, lr}
   147f8:	sub	sp, sp, #8
   147fc:	ldr	r0, [r3]
   14800:	bl	181a8 <__assert_fail@plt+0x6cc8>
   14804:	cmp	r0, #0
   14808:	beq	1482c <__assert_fail@plt+0x334c>
   1480c:	ldr	r4, [pc, #168]	; 148bc <__assert_fail@plt+0x33dc>
   14810:	ldrb	r3, [r4, #4]
   14814:	cmp	r3, #0
   14818:	beq	14848 <__assert_fail@plt+0x3368>
   1481c:	bl	1139c <__errno_location@plt>
   14820:	ldr	r3, [r0]
   14824:	cmp	r3, #32
   14828:	bne	14848 <__assert_fail@plt+0x3368>
   1482c:	ldr	r3, [pc, #140]	; 148c0 <__assert_fail@plt+0x33e0>
   14830:	ldr	r0, [r3]
   14834:	bl	181a8 <__assert_fail@plt+0x6cc8>
   14838:	cmp	r0, #0
   1483c:	bne	14890 <__assert_fail@plt+0x33b0>
   14840:	add	sp, sp, #8
   14844:	pop	{r4, r5, r6, pc}
   14848:	mov	r2, #5
   1484c:	ldr	r1, [pc, #112]	; 148c4 <__assert_fail@plt+0x33e4>
   14850:	mov	r0, #0
   14854:	bl	1121c <dcgettext@plt>
   14858:	ldr	r4, [r4]
   1485c:	cmp	r4, #0
   14860:	mov	r5, r0
   14864:	beq	1489c <__assert_fail@plt+0x33bc>
   14868:	bl	1139c <__errno_location@plt>
   1486c:	ldr	r6, [r0]
   14870:	mov	r0, r4
   14874:	bl	16968 <__assert_fail@plt+0x5488>
   14878:	mov	r1, r6
   1487c:	str	r5, [sp]
   14880:	ldr	r2, [pc, #64]	; 148c8 <__assert_fail@plt+0x33e8>
   14884:	mov	r3, r0
   14888:	mov	r0, #0
   1488c:	bl	112d0 <error@plt>
   14890:	ldr	r3, [pc, #52]	; 148cc <__assert_fail@plt+0x33ec>
   14894:	ldr	r0, [r3]
   14898:	bl	111bc <_exit@plt>
   1489c:	bl	1139c <__errno_location@plt>
   148a0:	mov	r3, r5
   148a4:	ldr	r2, [pc, #36]	; 148d0 <__assert_fail@plt+0x33f0>
   148a8:	ldr	r1, [r0]
   148ac:	mov	r0, r4
   148b0:	bl	112d0 <error@plt>
   148b4:	b	14890 <__assert_fail@plt+0x33b0>
   148b8:	andeq	fp, r2, r4, ror #6
   148bc:	andeq	fp, r2, r4, lsr #10
   148c0:	andeq	fp, r2, r0, ror #6
   148c4:	andeq	r9, r1, r8, ror #25
   148c8:	andeq	r9, r1, r0, ror #23
   148cc:	andeq	fp, r2, r8, ror #2
   148d0:	andeq	r8, r1, ip, asr #31
   148d4:	push	{r4, r5, lr}
   148d8:	sub	sp, sp, #12
   148dc:	mov	r4, r0
   148e0:	bl	113e4 <fileno@plt>
   148e4:	cmp	r0, #0
   148e8:	mov	r0, r4
   148ec:	blt	14968 <__assert_fail@plt+0x3488>
   148f0:	bl	11318 <__freading@plt>
   148f4:	cmp	r0, #0
   148f8:	bne	14934 <__assert_fail@plt+0x3454>
   148fc:	mov	r0, r4
   14900:	bl	14a10 <__assert_fail@plt+0x3530>
   14904:	cmp	r0, #0
   14908:	beq	14964 <__assert_fail@plt+0x3484>
   1490c:	bl	1139c <__errno_location@plt>
   14910:	mov	r5, r0
   14914:	mov	r0, r4
   14918:	ldr	r4, [r5]
   1491c:	bl	11408 <fclose@plt>
   14920:	cmp	r4, #0
   14924:	mvnne	r0, #0
   14928:	strne	r4, [r5]
   1492c:	add	sp, sp, #12
   14930:	pop	{r4, r5, pc}
   14934:	mov	r0, r4
   14938:	bl	113e4 <fileno@plt>
   1493c:	mov	r3, #1
   14940:	str	r3, [sp]
   14944:	mov	r2, #0
   14948:	mov	r3, #0
   1494c:	bl	11288 <lseek64@plt>
   14950:	mvn	r3, #0
   14954:	mvn	r2, #0
   14958:	cmp	r1, r3
   1495c:	cmpeq	r0, r2
   14960:	bne	148fc <__assert_fail@plt+0x341c>
   14964:	mov	r0, r4
   14968:	add	sp, sp, #12
   1496c:	pop	{r4, r5, lr}
   14970:	b	11408 <fclose@plt>
   14974:	push	{r1, r2, r3}
   14978:	push	{lr}		; (str lr, [sp, #-4]!)
   1497c:	sub	sp, sp, #8
   14980:	ldr	r1, [sp, #12]
   14984:	ands	r2, r1, #64	; 0x40
   14988:	addne	r3, sp, #16
   1498c:	ldrne	r2, [sp, #16]
   14990:	strne	r3, [sp, #4]
   14994:	bl	112dc <open64@plt>
   14998:	bl	16e54 <__assert_fail@plt+0x5974>
   1499c:	add	sp, sp, #8
   149a0:	pop	{lr}		; (ldr lr, [sp], #4)
   149a4:	add	sp, sp, #12
   149a8:	bx	lr
   149ac:	mov	ip, r1
   149b0:	push	{r4, r5, r6, r7, r8, lr}
   149b4:	mov	r1, r2
   149b8:	mov	r5, r0
   149bc:	mov	r2, r3
   149c0:	mov	r0, ip
   149c4:	bl	112dc <open64@plt>
   149c8:	sub	r3, r5, r0
   149cc:	clz	r3, r3
   149d0:	lsr	r3, r3, #5
   149d4:	orrs	r3, r3, r0, lsr #31
   149d8:	mov	r4, r0
   149dc:	bne	14a08 <__assert_fail@plt+0x3528>
   149e0:	mov	r1, r5
   149e4:	bl	11228 <dup2@plt>
   149e8:	mov	r7, r0
   149ec:	bl	1139c <__errno_location@plt>
   149f0:	mov	r5, r0
   149f4:	mov	r0, r4
   149f8:	ldr	r6, [r5]
   149fc:	mov	r4, r7
   14a00:	bl	114c8 <close@plt>
   14a04:	str	r6, [r5]
   14a08:	mov	r0, r4
   14a0c:	pop	{r4, r5, r6, r7, r8, pc}
   14a10:	push	{r4, lr}
   14a14:	subs	r4, r0, #0
   14a18:	sub	sp, sp, #8
   14a1c:	beq	14a38 <__assert_fail@plt+0x3558>
   14a20:	bl	11318 <__freading@plt>
   14a24:	cmp	r0, #0
   14a28:	beq	14a38 <__assert_fail@plt+0x3558>
   14a2c:	ldr	r3, [r4]
   14a30:	tst	r3, #256	; 0x100
   14a34:	bne	14a48 <__assert_fail@plt+0x3568>
   14a38:	mov	r0, r4
   14a3c:	add	sp, sp, #8
   14a40:	pop	{r4, lr}
   14a44:	b	1118c <fflush@plt>
   14a48:	mov	r3, #1
   14a4c:	str	r3, [sp]
   14a50:	mov	r2, #0
   14a54:	mov	r3, #0
   14a58:	mov	r0, r4
   14a5c:	bl	14ac8 <__assert_fail@plt+0x35e8>
   14a60:	mov	r0, r4
   14a64:	add	sp, sp, #8
   14a68:	pop	{r4, lr}
   14a6c:	b	1118c <fflush@plt>
   14a70:	push	{r4, r5, lr}
   14a74:	sub	sp, sp, #12
   14a78:	mov	r5, r0
   14a7c:	bl	1139c <__errno_location@plt>
   14a80:	mov	r2, #0
   14a84:	mov	r4, r0
   14a88:	ldr	r3, [r0]
   14a8c:	str	r2, [r4]
   14a90:	mov	r0, r5
   14a94:	str	r3, [sp]
   14a98:	str	r3, [sp, #4]
   14a9c:	bl	111b0 <free@plt>
   14aa0:	ldr	r3, [r4]
   14aa4:	add	r2, sp, #8
   14aa8:	cmp	r3, #0
   14aac:	moveq	r3, #4
   14ab0:	movne	r3, #0
   14ab4:	add	r3, r2, r3
   14ab8:	ldr	r3, [r3, #-8]
   14abc:	str	r3, [r4]
   14ac0:	add	sp, sp, #12
   14ac4:	pop	{r4, r5, pc}
   14ac8:	push	{r4, r5, r6, r7, r8, lr}
   14acc:	sub	sp, sp, #8
   14ad0:	ldmib	r0, {ip, lr}
   14ad4:	mov	r4, r0
   14ad8:	ldr	r5, [sp, #32]
   14adc:	cmp	lr, ip
   14ae0:	beq	14af8 <__assert_fail@plt+0x3618>
   14ae4:	str	r5, [sp, #32]
   14ae8:	mov	r0, r4
   14aec:	add	sp, sp, #8
   14af0:	pop	{r4, r5, r6, r7, r8, lr}
   14af4:	b	11420 <fseeko64@plt>
   14af8:	ldr	lr, [r0, #20]
   14afc:	ldr	ip, [r0, #16]
   14b00:	cmp	lr, ip
   14b04:	bne	14ae4 <__assert_fail@plt+0x3604>
   14b08:	ldr	r8, [r0, #36]	; 0x24
   14b0c:	cmp	r8, #0
   14b10:	bne	14ae4 <__assert_fail@plt+0x3604>
   14b14:	mov	r6, r2
   14b18:	mov	r7, r3
   14b1c:	bl	113e4 <fileno@plt>
   14b20:	mov	r2, r6
   14b24:	mov	r3, r7
   14b28:	str	r5, [sp]
   14b2c:	bl	11288 <lseek64@plt>
   14b30:	mvn	r3, #0
   14b34:	mvn	r2, #0
   14b38:	cmp	r1, r3
   14b3c:	cmpeq	r0, r2
   14b40:	beq	14b60 <__assert_fail@plt+0x3680>
   14b44:	ldr	r3, [r4]
   14b48:	strd	r0, [r4, #80]	; 0x50
   14b4c:	mov	r0, r8
   14b50:	bic	r3, r3, #16
   14b54:	str	r3, [r4]
   14b58:	add	sp, sp, #8
   14b5c:	pop	{r4, r5, r6, r7, r8, pc}
   14b60:	mvn	r0, #0
   14b64:	b	14b58 <__assert_fail@plt+0x3678>
   14b68:	push	{r4, r5, r6, r7, r8, lr}
   14b6c:	subs	r4, r2, #0
   14b70:	beq	14bd0 <__assert_fail@plt+0x36f0>
   14b74:	mov	r7, r0
   14b78:	mov	r5, r1
   14b7c:	mov	r6, #0
   14b80:	b	14b9c <__assert_fail@plt+0x36bc>
   14b84:	cmp	r0, #0
   14b88:	beq	14bbc <__assert_fail@plt+0x36dc>
   14b8c:	subs	r4, r4, r0
   14b90:	add	r6, r6, r0
   14b94:	add	r5, r5, r0
   14b98:	beq	14bb4 <__assert_fail@plt+0x36d4>
   14b9c:	mov	r2, r4
   14ba0:	mov	r1, r5
   14ba4:	mov	r0, r7
   14ba8:	bl	16b80 <__assert_fail@plt+0x56a0>
   14bac:	cmn	r0, #1
   14bb0:	bne	14b84 <__assert_fail@plt+0x36a4>
   14bb4:	mov	r0, r6
   14bb8:	pop	{r4, r5, r6, r7, r8, pc}
   14bbc:	bl	1139c <__errno_location@plt>
   14bc0:	mov	r3, #28
   14bc4:	str	r3, [r0]
   14bc8:	mov	r0, r6
   14bcc:	pop	{r4, r5, r6, r7, r8, pc}
   14bd0:	mov	r6, r4
   14bd4:	b	14bb4 <__assert_fail@plt+0x36d4>
   14bd8:	push	{r4, r5, r6, r8, r9, lr}
   14bdc:	mov	r4, r0
   14be0:	mov	r5, r1
   14be4:	add	r6, r2, #20
   14be8:	mov	r8, #10
   14bec:	mov	r9, #0
   14bf0:	mov	r3, #0
   14bf4:	strb	r3, [r2, #20]
   14bf8:	mov	r0, r4
   14bfc:	mov	r1, r5
   14c00:	mov	r2, r8
   14c04:	mov	r3, r9
   14c08:	bl	18a18 <__assert_fail@plt+0x7538>
   14c0c:	mov	r0, r4
   14c10:	mov	r1, r5
   14c14:	mov	r3, r9
   14c18:	add	r2, r2, #48	; 0x30
   14c1c:	strb	r2, [r6, #-1]!
   14c20:	mov	r2, r8
   14c24:	bl	18a18 <__assert_fail@plt+0x7538>
   14c28:	mov	r4, r0
   14c2c:	mov	r5, r1
   14c30:	orrs	r3, r4, r5
   14c34:	bne	14bf8 <__assert_fail@plt+0x3718>
   14c38:	mov	r0, r6
   14c3c:	pop	{r4, r5, r6, r8, r9, pc}
   14c40:	push	{r4, r5, r6, lr}
   14c44:	subs	r4, r0, #0
   14c48:	beq	14cbc <__assert_fail@plt+0x37dc>
   14c4c:	mov	r1, #47	; 0x2f
   14c50:	bl	11468 <strrchr@plt>
   14c54:	subs	r5, r0, #0
   14c58:	beq	14ca8 <__assert_fail@plt+0x37c8>
   14c5c:	add	r6, r5, #1
   14c60:	sub	r3, r6, r4
   14c64:	cmp	r3, #6
   14c68:	ble	14ca8 <__assert_fail@plt+0x37c8>
   14c6c:	mov	r2, #7
   14c70:	ldr	r1, [pc, #96]	; 14cd8 <__assert_fail@plt+0x37f8>
   14c74:	sub	r0, r5, #6
   14c78:	bl	114b0 <strncmp@plt>
   14c7c:	cmp	r0, #0
   14c80:	bne	14ca8 <__assert_fail@plt+0x37c8>
   14c84:	mov	r2, #3
   14c88:	ldr	r1, [pc, #76]	; 14cdc <__assert_fail@plt+0x37fc>
   14c8c:	mov	r0, r6
   14c90:	bl	114b0 <strncmp@plt>
   14c94:	cmp	r0, #0
   14c98:	movne	r4, r6
   14c9c:	ldreq	r3, [pc, #60]	; 14ce0 <__assert_fail@plt+0x3800>
   14ca0:	addeq	r4, r5, #4
   14ca4:	streq	r4, [r3]
   14ca8:	ldr	r2, [pc, #52]	; 14ce4 <__assert_fail@plt+0x3804>
   14cac:	ldr	r3, [pc, #52]	; 14ce8 <__assert_fail@plt+0x3808>
   14cb0:	str	r4, [r2]
   14cb4:	str	r4, [r3]
   14cb8:	pop	{r4, r5, r6, pc}
   14cbc:	ldr	r3, [pc, #40]	; 14cec <__assert_fail@plt+0x380c>
   14cc0:	mov	r2, #55	; 0x37
   14cc4:	mov	r1, #1
   14cc8:	ldr	r3, [r3]
   14ccc:	ldr	r0, [pc, #28]	; 14cf0 <__assert_fail@plt+0x3810>
   14cd0:	bl	1127c <fwrite@plt>
   14cd4:	bl	114bc <abort@plt>
   14cd8:			; <UNDEFINED> instruction: 0x00019eb0
   14cdc:			; <UNDEFINED> instruction: 0x00019eb8
   14ce0:	andeq	fp, r2, r0, asr r3
   14ce4:	andeq	fp, r2, ip, lsr #10
   14ce8:	andeq	fp, r2, r4, asr r3
   14cec:	andeq	fp, r2, r0, ror #6
   14cf0:	andeq	r9, r1, r8, ror lr
   14cf4:	push	{r4, r5, r6, lr}
   14cf8:	mov	r2, #48	; 0x30
   14cfc:	mov	r4, r1
   14d00:	mov	r1, #0
   14d04:	mov	r5, r0
   14d08:	bl	113c0 <memset@plt>
   14d0c:	cmp	r4, #10
   14d10:	beq	14d20 <__assert_fail@plt+0x3840>
   14d14:	str	r4, [r5]
   14d18:	mov	r0, r5
   14d1c:	pop	{r4, r5, r6, pc}
   14d20:	bl	114bc <abort@plt>
   14d24:	push	{r4, r5, r6, lr}
   14d28:	mov	r4, r0
   14d2c:	mov	r5, r1
   14d30:	bl	18224 <__assert_fail@plt+0x6d44>
   14d34:	ldrb	r3, [r0]
   14d38:	bic	r3, r3, #32
   14d3c:	cmp	r3, #85	; 0x55
   14d40:	bne	14da0 <__assert_fail@plt+0x38c0>
   14d44:	ldrb	r3, [r0, #1]
   14d48:	bic	r3, r3, #32
   14d4c:	cmp	r3, #84	; 0x54
   14d50:	bne	14ddc <__assert_fail@plt+0x38fc>
   14d54:	ldrb	r3, [r0, #2]
   14d58:	bic	r3, r3, #32
   14d5c:	cmp	r3, #70	; 0x46
   14d60:	bne	14ddc <__assert_fail@plt+0x38fc>
   14d64:	ldrb	r3, [r0, #3]
   14d68:	cmp	r3, #45	; 0x2d
   14d6c:	bne	14ddc <__assert_fail@plt+0x38fc>
   14d70:	ldrb	r3, [r0, #4]
   14d74:	cmp	r3, #56	; 0x38
   14d78:	bne	14ddc <__assert_fail@plt+0x38fc>
   14d7c:	ldrb	r3, [r0, #5]
   14d80:	cmp	r3, #0
   14d84:	bne	14ddc <__assert_fail@plt+0x38fc>
   14d88:	ldrb	r2, [r4]
   14d8c:	ldr	r3, [pc, #152]	; 14e2c <__assert_fail@plt+0x394c>
   14d90:	ldr	r0, [pc, #152]	; 14e30 <__assert_fail@plt+0x3950>
   14d94:	cmp	r2, #96	; 0x60
   14d98:	movne	r0, r3
   14d9c:	pop	{r4, r5, r6, pc}
   14da0:	cmp	r3, #71	; 0x47
   14da4:	bne	14ddc <__assert_fail@plt+0x38fc>
   14da8:	ldrb	r3, [r0, #1]
   14dac:	bic	r3, r3, #32
   14db0:	cmp	r3, #66	; 0x42
   14db4:	bne	14ddc <__assert_fail@plt+0x38fc>
   14db8:	ldrb	r3, [r0, #2]
   14dbc:	cmp	r3, #49	; 0x31
   14dc0:	bne	14ddc <__assert_fail@plt+0x38fc>
   14dc4:	ldrb	r3, [r0, #3]
   14dc8:	cmp	r3, #56	; 0x38
   14dcc:	bne	14ddc <__assert_fail@plt+0x38fc>
   14dd0:	ldrb	r3, [r0, #4]
   14dd4:	cmp	r3, #48	; 0x30
   14dd8:	beq	14df0 <__assert_fail@plt+0x3910>
   14ddc:	ldr	r3, [pc, #80]	; 14e34 <__assert_fail@plt+0x3954>
   14de0:	cmp	r5, #9
   14de4:	ldr	r0, [pc, #76]	; 14e38 <__assert_fail@plt+0x3958>
   14de8:	movne	r0, r3
   14dec:	pop	{r4, r5, r6, pc}
   14df0:	ldrb	r3, [r0, #5]
   14df4:	cmp	r3, #51	; 0x33
   14df8:	bne	14ddc <__assert_fail@plt+0x38fc>
   14dfc:	ldrb	r3, [r0, #6]
   14e00:	cmp	r3, #48	; 0x30
   14e04:	bne	14ddc <__assert_fail@plt+0x38fc>
   14e08:	ldrb	r3, [r0, #7]
   14e0c:	cmp	r3, #0
   14e10:	bne	14ddc <__assert_fail@plt+0x38fc>
   14e14:	ldrb	r2, [r4]
   14e18:	ldr	r3, [pc, #28]	; 14e3c <__assert_fail@plt+0x395c>
   14e1c:	ldr	r0, [pc, #28]	; 14e40 <__assert_fail@plt+0x3960>
   14e20:	cmp	r2, #96	; 0x60
   14e24:	movne	r0, r3
   14e28:	pop	{r4, r5, r6, pc}
   14e2c:	andeq	r9, r1, r4, lsl pc
   14e30:	andeq	r9, r1, r0, lsl pc
   14e34:	andeq	r9, r1, r0, lsr #30
   14e38:	andeq	r8, r1, r0, lsr #30
   14e3c:	andeq	r9, r1, ip, lsl pc
   14e40:	andeq	r9, r1, r8, lsl pc
   14e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e48:	sub	sp, sp, #116	; 0x74
   14e4c:	mov	sl, r0
   14e50:	str	r3, [sp, #24]
   14e54:	mov	r3, #1
   14e58:	mov	r8, r1
   14e5c:	str	r2, [sp, #56]	; 0x38
   14e60:	str	r3, [sp, #36]	; 0x24
   14e64:	bl	112a0 <__ctype_get_mb_cur_max@plt>
   14e68:	ldr	r3, [sp, #156]	; 0x9c
   14e6c:	mov	fp, r8
   14e70:	mov	r2, #0
   14e74:	lsr	r3, r3, #1
   14e78:	and	r3, r3, #1
   14e7c:	str	r2, [sp, #68]	; 0x44
   14e80:	str	r3, [sp, #28]
   14e84:	str	r2, [sp, #40]	; 0x28
   14e88:	str	r2, [sp, #44]	; 0x2c
   14e8c:	str	r2, [sp, #52]	; 0x34
   14e90:	str	r2, [sp, #64]	; 0x40
   14e94:	str	r2, [sp, #72]	; 0x48
   14e98:	str	sl, [sp, #32]
   14e9c:	str	r0, [sp, #76]	; 0x4c
   14ea0:	ldr	r3, [sp, #152]	; 0x98
   14ea4:	cmp	r3, #10
   14ea8:	ldrls	pc, [pc, r3, lsl #2]
   14eac:	b	1606c <__assert_fail@plt+0x4b8c>
   14eb0:	ldrdeq	r4, [r1], -ip
   14eb4:	andeq	r5, r1, r4, asr #3
   14eb8:	andeq	r5, r1, r8, ror #3
   14ebc:	andeq	r5, r1, ip, lsl #4
   14ec0:	andeq	r5, r1, r8, lsr r3
   14ec4:	andeq	r5, r1, ip, lsl #6
   14ec8:	andeq	r5, r1, r4, ror #5
   14ecc:	andeq	r5, r1, r0, lsr #4
   14ed0:	andeq	r5, r1, r8, lsr r2
   14ed4:	andeq	r5, r1, r8, lsr r2
   14ed8:	andeq	r5, r1, r8, lsr r2
   14edc:	mov	r3, #0
   14ee0:	mov	r7, r3
   14ee4:	str	r3, [sp, #28]
   14ee8:	ldr	r3, [sp, #44]	; 0x2c
   14eec:	mov	sl, #0
   14ef0:	eor	r3, r3, #1
   14ef4:	str	r3, [sp, #60]	; 0x3c
   14ef8:	ldr	r3, [sp, #24]
   14efc:	cmn	r3, #1
   14f00:	beq	15464 <__assert_fail@plt+0x3f84>
   14f04:	ldr	r3, [sp, #24]
   14f08:	subs	r5, r3, sl
   14f0c:	movne	r5, #1
   14f10:	cmp	r5, #0
   14f14:	beq	1547c <__assert_fail@plt+0x3f9c>
   14f18:	ldr	r3, [sp, #152]	; 0x98
   14f1c:	ldr	r8, [sp, #44]	; 0x2c
   14f20:	cmp	r3, #2
   14f24:	moveq	r8, #0
   14f28:	andne	r8, r8, #1
   14f2c:	ldr	r3, [sp, #52]	; 0x34
   14f30:	adds	r9, r3, #0
   14f34:	movne	r9, #1
   14f38:	ands	r6, r9, r8
   14f3c:	beq	158e4 <__assert_fail@plt+0x4404>
   14f40:	ldr	r2, [sp, #52]	; 0x34
   14f44:	ldr	r1, [sp, #24]
   14f48:	cmp	r2, #1
   14f4c:	mov	r3, r2
   14f50:	movls	r3, #0
   14f54:	movhi	r3, #1
   14f58:	cmn	r1, #1
   14f5c:	movne	r3, #0
   14f60:	cmp	r3, #0
   14f64:	add	r4, sl, r2
   14f68:	beq	14f78 <__assert_fail@plt+0x3a98>
   14f6c:	ldr	r0, [sp, #56]	; 0x38
   14f70:	bl	11354 <strlen@plt>
   14f74:	str	r0, [sp, #24]
   14f78:	ldr	r3, [sp, #24]
   14f7c:	cmp	r3, r4
   14f80:	ldr	r3, [sp, #56]	; 0x38
   14f84:	add	r3, r3, sl
   14f88:	str	r3, [sp, #48]	; 0x30
   14f8c:	bcc	158f0 <__assert_fail@plt+0x4410>
   14f90:	mov	r0, r3
   14f94:	ldr	r2, [sp, #52]	; 0x34
   14f98:	ldr	r1, [sp, #64]	; 0x40
   14f9c:	bl	11204 <memcmp@plt>
   14fa0:	cmp	r0, #0
   14fa4:	bne	158f0 <__assert_fail@plt+0x4410>
   14fa8:	ldr	r3, [sp, #28]
   14fac:	cmp	r3, #0
   14fb0:	bne	1616c <__assert_fail@plt+0x4c8c>
   14fb4:	ldr	r3, [sp, #48]	; 0x30
   14fb8:	ldrb	r4, [r3]
   14fbc:	cmp	r4, #126	; 0x7e
   14fc0:	ldrls	pc, [pc, r4, lsl #2]
   14fc4:	b	15884 <__assert_fail@plt+0x43a4>
   14fc8:	andeq	r5, r1, r8, lsr #13
   14fcc:	andeq	r5, r1, r4, lsl #17
   14fd0:	andeq	r5, r1, r4, lsl #17
   14fd4:	andeq	r5, r1, r4, lsl #17
   14fd8:	andeq	r5, r1, r4, lsl #17
   14fdc:	andeq	r5, r1, r4, lsl #17
   14fe0:	andeq	r5, r1, r4, lsl #17
   14fe4:	andeq	r5, r1, ip, lsl #13
   14fe8:	andeq	r5, r1, r0, ror r6
   14fec:	andeq	r5, r1, ip, ror #16
   14ff0:	ldrdeq	r5, [r1], -r0
   14ff4:			; <UNDEFINED> instruction: 0x000155b4
   14ff8:	andeq	r5, r1, r8, asr #16
   14ffc:	andeq	r5, r1, r4, lsr #16
   15000:	andeq	r5, r1, r4, lsl #17
   15004:	andeq	r5, r1, r4, lsl #17
   15008:	andeq	r5, r1, r4, lsl #17
   1500c:	andeq	r5, r1, r4, lsl #17
   15010:	andeq	r5, r1, r4, lsl #17
   15014:	andeq	r5, r1, r4, lsl #17
   15018:	andeq	r5, r1, r4, lsl #17
   1501c:	andeq	r5, r1, r4, lsl #17
   15020:	andeq	r5, r1, r4, lsl #17
   15024:	andeq	r5, r1, r4, lsl #17
   15028:	andeq	r5, r1, r4, lsl #17
   1502c:	andeq	r5, r1, r4, lsl #17
   15030:	andeq	r5, r1, r4, lsl #17
   15034:	andeq	r5, r1, r4, lsl #17
   15038:	andeq	r5, r1, r4, lsl #17
   1503c:	andeq	r5, r1, r4, lsl #17
   15040:	andeq	r5, r1, r4, lsl #17
   15044:	andeq	r5, r1, r4, lsl #17
   15048:	andeq	r5, r1, r4, ror #16
   1504c:	muleq	r1, r8, r7
   15050:	muleq	r1, r8, r7
   15054:	andeq	r5, r1, r8, lsr #7
   15058:	muleq	r1, r8, r7
   1505c:	andeq	r5, r1, r0, lsr r8
   15060:	muleq	r1, r8, r7
   15064:	andeq	r5, r1, r4, lsl #16
   15068:	muleq	r1, r8, r7
   1506c:	muleq	r1, r8, r7
   15070:	muleq	r1, r8, r7
   15074:	andeq	r5, r1, r0, lsr r8
   15078:	andeq	r5, r1, r0, lsr r8
   1507c:	andeq	r5, r1, r0, lsr r8
   15080:	andeq	r5, r1, r0, lsr r8
   15084:	andeq	r5, r1, r0, lsr r8
   15088:	andeq	r5, r1, r0, lsr r8
   1508c:	andeq	r5, r1, r0, lsr r8
   15090:	andeq	r5, r1, r0, lsr r8
   15094:	andeq	r5, r1, r0, lsr r8
   15098:	andeq	r5, r1, r0, lsr r8
   1509c:	andeq	r5, r1, r0, lsr r8
   150a0:	andeq	r5, r1, r0, lsr r8
   150a4:	andeq	r5, r1, r0, lsr r8
   150a8:	andeq	r5, r1, r0, lsr r8
   150ac:	andeq	r5, r1, r0, lsr r8
   150b0:	andeq	r5, r1, r0, lsr r8
   150b4:	muleq	r1, r8, r7
   150b8:	muleq	r1, r8, r7
   150bc:	muleq	r1, r8, r7
   150c0:	muleq	r1, r8, r7
   150c4:	ldrdeq	r5, [r1], -r4
   150c8:	andeq	r5, r1, r4, lsl #17
   150cc:	andeq	r5, r1, r0, lsr r8
   150d0:	andeq	r5, r1, r0, lsr r8
   150d4:	andeq	r5, r1, r0, lsr r8
   150d8:	andeq	r5, r1, r0, lsr r8
   150dc:	andeq	r5, r1, r0, lsr r8
   150e0:	andeq	r5, r1, r0, lsr r8
   150e4:	andeq	r5, r1, r0, lsr r8
   150e8:	andeq	r5, r1, r0, lsr r8
   150ec:	andeq	r5, r1, r0, lsr r8
   150f0:	andeq	r5, r1, r0, lsr r8
   150f4:	andeq	r5, r1, r0, lsr r8
   150f8:	andeq	r5, r1, r0, lsr r8
   150fc:	andeq	r5, r1, r0, lsr r8
   15100:	andeq	r5, r1, r0, lsr r8
   15104:	andeq	r5, r1, r0, lsr r8
   15108:	andeq	r5, r1, r0, lsr r8
   1510c:	andeq	r5, r1, r0, lsr r8
   15110:	andeq	r5, r1, r0, lsr r8
   15114:	andeq	r5, r1, r0, lsr r8
   15118:	andeq	r5, r1, r0, lsr r8
   1511c:	andeq	r5, r1, r0, lsr r8
   15120:	andeq	r5, r1, r0, lsr r8
   15124:	andeq	r5, r1, r0, lsr r8
   15128:	andeq	r5, r1, r0, lsr r8
   1512c:	andeq	r5, r1, r0, lsr r8
   15130:	andeq	r5, r1, r0, lsr r8
   15134:	muleq	r1, r8, r7
   15138:	strdeq	r5, [r1], -r4
   1513c:	andeq	r5, r1, r0, lsr r8
   15140:	muleq	r1, r8, r7
   15144:	andeq	r5, r1, r0, lsr r8
   15148:	muleq	r1, r8, r7
   1514c:	andeq	r5, r1, r0, lsr r8
   15150:	andeq	r5, r1, r0, lsr r8
   15154:	andeq	r5, r1, r0, lsr r8
   15158:	andeq	r5, r1, r0, lsr r8
   1515c:	andeq	r5, r1, r0, lsr r8
   15160:	andeq	r5, r1, r0, lsr r8
   15164:	andeq	r5, r1, r0, lsr r8
   15168:	andeq	r5, r1, r0, lsr r8
   1516c:	andeq	r5, r1, r0, lsr r8
   15170:	andeq	r5, r1, r0, lsr r8
   15174:	andeq	r5, r1, r0, lsr r8
   15178:	andeq	r5, r1, r0, lsr r8
   1517c:	andeq	r5, r1, r0, lsr r8
   15180:	andeq	r5, r1, r0, lsr r8
   15184:	andeq	r5, r1, r0, lsr r8
   15188:	andeq	r5, r1, r0, lsr r8
   1518c:	andeq	r5, r1, r0, lsr r8
   15190:	andeq	r5, r1, r0, lsr r8
   15194:	andeq	r5, r1, r0, lsr r8
   15198:	andeq	r5, r1, r0, lsr r8
   1519c:	andeq	r5, r1, r0, lsr r8
   151a0:	andeq	r5, r1, r0, lsr r8
   151a4:	andeq	r5, r1, r0, lsr r8
   151a8:	andeq	r5, r1, r0, lsr r8
   151ac:	andeq	r5, r1, r0, lsr r8
   151b0:	andeq	r5, r1, r0, lsr r8
   151b4:	andeq	r5, r1, r8, lsl #7
   151b8:	muleq	r1, r8, r7
   151bc:	andeq	r5, r1, r8, lsl #7
   151c0:	andeq	r5, r1, r8, lsr #7
   151c4:	mov	r3, #1
   151c8:	str	r3, [sp, #28]
   151cc:	str	r3, [sp, #52]	; 0x34
   151d0:	ldr	r3, [pc, #4000]	; 16178 <__assert_fail@plt+0x4c98>
   151d4:	mov	r7, #0
   151d8:	str	r3, [sp, #64]	; 0x40
   151dc:	mov	r3, #2
   151e0:	str	r3, [sp, #152]	; 0x98
   151e4:	b	14ee8 <__assert_fail@plt+0x3a08>
   151e8:	ldr	r3, [sp, #28]
   151ec:	cmp	r3, #0
   151f0:	beq	1534c <__assert_fail@plt+0x3e6c>
   151f4:	mov	r3, #1
   151f8:	str	r3, [sp, #52]	; 0x34
   151fc:	ldr	r3, [pc, #3956]	; 16178 <__assert_fail@plt+0x4c98>
   15200:	mov	r7, #0
   15204:	str	r3, [sp, #64]	; 0x40
   15208:	b	14ee8 <__assert_fail@plt+0x3a08>
   1520c:	mov	r3, #1
   15210:	str	r3, [sp, #44]	; 0x2c
   15214:	str	r3, [sp, #52]	; 0x34
   15218:	str	r3, [sp, #28]
   1521c:	b	151d0 <__assert_fail@plt+0x3cf0>
   15220:	mov	r3, #0
   15224:	str	r3, [sp, #28]
   15228:	mov	r3, #1
   1522c:	str	r3, [sp, #44]	; 0x2c
   15230:	mov	r7, #0
   15234:	b	14ee8 <__assert_fail@plt+0x3a08>
   15238:	ldr	r3, [sp, #152]	; 0x98
   1523c:	cmp	r3, #10
   15240:	beq	15284 <__assert_fail@plt+0x3da4>
   15244:	mov	r2, #5
   15248:	ldr	r1, [pc, #3884]	; 1617c <__assert_fail@plt+0x4c9c>
   1524c:	mov	r0, #0
   15250:	bl	1121c <dcgettext@plt>
   15254:	ldr	r2, [pc, #3872]	; 1617c <__assert_fail@plt+0x4c9c>
   15258:	cmp	r0, r2
   1525c:	str	r0, [sp, #164]	; 0xa4
   15260:	beq	16268 <__assert_fail@plt+0x4d88>
   15264:	mov	r2, #5
   15268:	ldr	r1, [pc, #3848]	; 16178 <__assert_fail@plt+0x4c98>
   1526c:	mov	r0, #0
   15270:	bl	1121c <dcgettext@plt>
   15274:	ldr	r2, [pc, #3836]	; 16178 <__assert_fail@plt+0x4c98>
   15278:	cmp	r0, r2
   1527c:	str	r0, [sp, #168]	; 0xa8
   15280:	beq	16258 <__assert_fail@plt+0x4d78>
   15284:	ldr	r7, [sp, #28]
   15288:	cmp	r7, #0
   1528c:	movne	r7, #0
   15290:	bne	152c4 <__assert_fail@plt+0x3de4>
   15294:	ldr	r3, [sp, #164]	; 0xa4
   15298:	ldrb	r3, [r3]
   1529c:	cmp	r3, #0
   152a0:	beq	16278 <__assert_fail@plt+0x4d98>
   152a4:	ldr	r2, [sp, #164]	; 0xa4
   152a8:	ldr	r1, [sp, #32]
   152ac:	cmp	fp, r7
   152b0:	strbhi	r3, [r1, r7]
   152b4:	ldrb	r3, [r2, #1]!
   152b8:	add	r7, r7, #1
   152bc:	cmp	r3, #0
   152c0:	bne	152ac <__assert_fail@plt+0x3dcc>
   152c4:	ldr	r0, [sp, #168]	; 0xa8
   152c8:	bl	11354 <strlen@plt>
   152cc:	ldr	r3, [sp, #168]	; 0xa8
   152d0:	str	r3, [sp, #64]	; 0x40
   152d4:	mov	r3, #1
   152d8:	str	r3, [sp, #44]	; 0x2c
   152dc:	str	r0, [sp, #52]	; 0x34
   152e0:	b	14ee8 <__assert_fail@plt+0x3a08>
   152e4:	mov	r3, #1
   152e8:	str	r3, [sp, #44]	; 0x2c
   152ec:	str	r3, [sp, #52]	; 0x34
   152f0:	str	r3, [sp, #28]
   152f4:	ldr	r3, [pc, #3716]	; 16180 <__assert_fail@plt+0x4ca0>
   152f8:	mov	r7, #0
   152fc:	str	r3, [sp, #64]	; 0x40
   15300:	mov	r3, #5
   15304:	str	r3, [sp, #152]	; 0x98
   15308:	b	14ee8 <__assert_fail@plt+0x3a08>
   1530c:	ldr	r3, [sp, #28]
   15310:	cmp	r3, #0
   15314:	beq	16014 <__assert_fail@plt+0x4b34>
   15318:	ldr	r3, [sp, #28]
   1531c:	mov	r7, #0
   15320:	str	r3, [sp, #44]	; 0x2c
   15324:	mov	r3, #1
   15328:	str	r3, [sp, #52]	; 0x34
   1532c:	ldr	r3, [pc, #3660]	; 16180 <__assert_fail@plt+0x4ca0>
   15330:	str	r3, [sp, #64]	; 0x40
   15334:	b	14ee8 <__assert_fail@plt+0x3a08>
   15338:	ldr	r3, [sp, #28]
   1533c:	cmp	r3, #0
   15340:	mov	r3, #1
   15344:	streq	r3, [sp, #44]	; 0x2c
   15348:	bne	151cc <__assert_fail@plt+0x3cec>
   1534c:	cmp	fp, #0
   15350:	beq	16044 <__assert_fail@plt+0x4b64>
   15354:	ldr	r3, [sp, #32]
   15358:	mov	r2, #39	; 0x27
   1535c:	mov	r7, #1
   15360:	strb	r2, [r3]
   15364:	mov	r3, #0
   15368:	str	r3, [sp, #28]
   1536c:	mov	r3, #1
   15370:	str	r3, [sp, #52]	; 0x34
   15374:	ldr	r3, [pc, #3580]	; 16178 <__assert_fail@plt+0x4c98>
   15378:	str	r3, [sp, #64]	; 0x40
   1537c:	mov	r3, #2
   15380:	str	r3, [sp, #152]	; 0x98
   15384:	b	14ee8 <__assert_fail@plt+0x3a08>
   15388:	ldr	r3, [sp, #24]
   1538c:	cmn	r3, #1
   15390:	beq	15fa8 <__assert_fail@plt+0x4ac8>
   15394:	ldr	r3, [sp, #24]
   15398:	subs	r3, r3, #1
   1539c:	movne	r3, #1
   153a0:	cmp	r3, #0
   153a4:	bne	153b0 <__assert_fail@plt+0x3ed0>
   153a8:	cmp	sl, #0
   153ac:	beq	1579c <__assert_fail@plt+0x42bc>
   153b0:	ldr	r3, [sp, #152]	; 0x98
   153b4:	mov	r5, #0
   153b8:	sub	r2, r3, #2
   153bc:	mov	r8, r5
   153c0:	clz	r2, r2
   153c4:	lsr	r2, r2, #5
   153c8:	ldr	r3, [sp, #60]	; 0x3c
   153cc:	ldr	r1, [sp, #28]
   153d0:	orr	r3, r2, r3
   153d4:	eor	r3, r3, #1
   153d8:	orr	r3, r1, r3
   153dc:	tst	r3, #255	; 0xff
   153e0:	bne	15b0c <__assert_fail@plt+0x462c>
   153e4:	cmp	r6, #0
   153e8:	bne	15538 <__assert_fail@plt+0x4058>
   153ec:	ldr	r3, [sp, #40]	; 0x28
   153f0:	eor	r8, r8, #1
   153f4:	and	r8, r8, r3
   153f8:	add	sl, sl, #1
   153fc:	uxtb	r6, r8
   15400:	cmp	r6, #0
   15404:	beq	15438 <__assert_fail@plt+0x3f58>
   15408:	cmp	fp, r7
   1540c:	movhi	r2, #39	; 0x27
   15410:	ldrhi	r3, [sp, #32]
   15414:	strbhi	r2, [r3, r7]
   15418:	add	r3, r7, #1
   1541c:	cmp	fp, r3
   15420:	movhi	r1, #39	; 0x27
   15424:	ldrhi	r2, [sp, #32]
   15428:	add	r7, r7, #2
   1542c:	strbhi	r1, [r2, r3]
   15430:	mov	r3, #0
   15434:	str	r3, [sp, #40]	; 0x28
   15438:	cmp	r7, fp
   1543c:	ldrcc	r3, [sp, #32]
   15440:	strbcc	r4, [r3, r7]
   15444:	ldr	r3, [sp, #36]	; 0x24
   15448:	cmp	r5, #0
   1544c:	moveq	r3, #0
   15450:	str	r3, [sp, #36]	; 0x24
   15454:	ldr	r3, [sp, #24]
   15458:	add	r7, r7, #1
   1545c:	cmn	r3, #1
   15460:	bne	14f04 <__assert_fail@plt+0x3a24>
   15464:	ldr	r3, [sp, #56]	; 0x38
   15468:	ldrb	r5, [r3, sl]
   1546c:	adds	r5, r5, #0
   15470:	movne	r5, #1
   15474:	cmp	r5, #0
   15478:	bne	14f18 <__assert_fail@plt+0x3a38>
   1547c:	ldr	r3, [sp, #152]	; 0x98
   15480:	ldr	r1, [sp, #28]
   15484:	sub	r3, r3, #2
   15488:	clz	r3, r3
   1548c:	lsr	r3, r3, #5
   15490:	and	r9, r1, r3
   15494:	cmp	r7, #0
   15498:	movne	r2, #0
   1549c:	andeq	r2, r9, #1
   154a0:	cmp	r2, #0
   154a4:	bne	15e80 <__assert_fail@plt+0x49a0>
   154a8:	eor	r2, r1, #1
   154ac:	ands	r3, r3, r2
   154b0:	beq	1633c <__assert_fail@plt+0x4e5c>
   154b4:	ldr	r2, [sp, #68]	; 0x44
   154b8:	cmp	r2, #0
   154bc:	beq	16328 <__assert_fail@plt+0x4e48>
   154c0:	ldr	r3, [sp, #36]	; 0x24
   154c4:	cmp	r3, #0
   154c8:	bne	162e0 <__assert_fail@plt+0x4e00>
   154cc:	ldr	r2, [sp, #72]	; 0x48
   154d0:	clz	r3, fp
   154d4:	cmp	r2, #0
   154d8:	lsr	r3, r3, #5
   154dc:	moveq	r3, #0
   154e0:	cmp	r3, #0
   154e4:	beq	16280 <__assert_fail@plt+0x4da0>
   154e8:	str	r3, [sp, #68]	; 0x44
   154ec:	ldr	fp, [sp, #72]	; 0x48
   154f0:	b	14ea0 <__assert_fail@plt+0x39c0>
   154f4:	ldr	r3, [sp, #152]	; 0x98
   154f8:	cmp	r3, #2
   154fc:	beq	15b50 <__assert_fail@plt+0x4670>
   15500:	ldr	r3, [sp, #44]	; 0x2c
   15504:	ldr	r2, [sp, #28]
   15508:	and	r2, r3, r2
   1550c:	ands	r2, r9, r2
   15510:	bne	15b5c <__assert_fail@plt+0x467c>
   15514:	mov	r4, #92	; 0x5c
   15518:	mov	r3, r4
   1551c:	ldr	r1, [sp, #44]	; 0x2c
   15520:	cmp	r1, #0
   15524:	moveq	r5, #0
   15528:	moveq	r8, r1
   1552c:	beq	153c8 <__assert_fail@plt+0x3ee8>
   15530:	mov	r4, r3
   15534:	mov	r5, #0
   15538:	ldr	r3, [sp, #28]
   1553c:	cmp	r3, #0
   15540:	bne	15b44 <__assert_fail@plt+0x4664>
   15544:	ldr	r3, [sp, #40]	; 0x28
   15548:	eor	r9, r3, #1
   1554c:	and	r9, r9, r2
   15550:	ands	r9, r9, #255	; 0xff
   15554:	beq	15598 <__assert_fail@plt+0x40b8>
   15558:	cmp	fp, r7
   1555c:	movhi	r2, #39	; 0x27
   15560:	ldrhi	r3, [sp, #32]
   15564:	str	r9, [sp, #40]	; 0x28
   15568:	strbhi	r2, [r3, r7]
   1556c:	add	r3, r7, #1
   15570:	cmp	fp, r3
   15574:	movhi	r1, #36	; 0x24
   15578:	ldrhi	r2, [sp, #32]
   1557c:	strbhi	r1, [r2, r3]
   15580:	add	r3, r7, #2
   15584:	cmp	fp, r3
   15588:	add	r7, r7, #3
   1558c:	ldrhi	r2, [sp, #32]
   15590:	movhi	r1, #39	; 0x27
   15594:	strbhi	r1, [r2, r3]
   15598:	cmp	fp, r7
   1559c:	movhi	r2, #92	; 0x5c
   155a0:	ldrhi	r3, [sp, #32]
   155a4:	add	sl, sl, #1
   155a8:	strbhi	r2, [r3, r7]
   155ac:	add	r7, r7, #1
   155b0:	b	15438 <__assert_fail@plt+0x3f58>
   155b4:	ldr	r3, [sp, #152]	; 0x98
   155b8:	mov	r4, #11
   155bc:	sub	r2, r3, #2
   155c0:	mov	r3, #118	; 0x76
   155c4:	clz	r2, r2
   155c8:	lsr	r2, r2, #5
   155cc:	b	1551c <__assert_fail@plt+0x403c>
   155d0:	mov	r4, #10
   155d4:	mov	r3, #110	; 0x6e
   155d8:	ldr	r2, [sp, #152]	; 0x98
   155dc:	ldr	r1, [sp, #28]
   155e0:	sub	r2, r2, #2
   155e4:	clz	r2, r2
   155e8:	lsr	r2, r2, #5
   155ec:	ands	r1, r1, r2
   155f0:	beq	1551c <__assert_fail@plt+0x403c>
   155f4:	ldr	sl, [sp, #32]
   155f8:	mov	r8, fp
   155fc:	mov	r2, r1
   15600:	mov	r3, #2
   15604:	str	r3, [sp, #152]	; 0x98
   15608:	ldr	r9, [sp, #44]	; 0x2c
   1560c:	ldr	r3, [sp, #152]	; 0x98
   15610:	and	r9, r9, r2
   15614:	tst	r9, #255	; 0xff
   15618:	movne	r3, #4
   1561c:	str	r3, [sp, #152]	; 0x98
   15620:	ldr	r3, [sp, #156]	; 0x9c
   15624:	mov	ip, #0
   15628:	bic	r3, r3, #2
   1562c:	str	r3, [sp, #4]
   15630:	ldr	r3, [sp, #168]	; 0xa8
   15634:	ldr	r2, [sp, #56]	; 0x38
   15638:	str	r3, [sp, #16]
   1563c:	ldr	r3, [sp, #164]	; 0xa4
   15640:	mov	r1, r8
   15644:	str	r3, [sp, #12]
   15648:	ldr	r3, [sp, #152]	; 0x98
   1564c:	mov	r0, sl
   15650:	str	r3, [sp]
   15654:	str	ip, [sp, #8]
   15658:	ldr	r3, [sp, #24]
   1565c:	bl	14e44 <__assert_fail@plt+0x3964>
   15660:	mov	fp, r0
   15664:	mov	r0, fp
   15668:	add	sp, sp, #116	; 0x74
   1566c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15670:	ldr	r3, [sp, #152]	; 0x98
   15674:	mov	r4, #8
   15678:	sub	r2, r3, #2
   1567c:	mov	r3, #98	; 0x62
   15680:	clz	r2, r2
   15684:	lsr	r2, r2, #5
   15688:	b	1551c <__assert_fail@plt+0x403c>
   1568c:	ldr	r3, [sp, #152]	; 0x98
   15690:	mov	r4, #7
   15694:	sub	r2, r3, #2
   15698:	mov	r3, #97	; 0x61
   1569c:	clz	r2, r2
   156a0:	lsr	r2, r2, #5
   156a4:	b	1551c <__assert_fail@plt+0x403c>
   156a8:	ldr	r3, [sp, #44]	; 0x2c
   156ac:	cmp	r3, #0
   156b0:	beq	15e94 <__assert_fail@plt+0x49b4>
   156b4:	ldr	r3, [sp, #28]
   156b8:	cmp	r3, #0
   156bc:	bne	1616c <__assert_fail@plt+0x4c8c>
   156c0:	ldr	r3, [sp, #152]	; 0x98
   156c4:	sub	r2, r3, #2
   156c8:	ldr	r3, [sp, #40]	; 0x28
   156cc:	clz	r2, r2
   156d0:	eor	r3, r3, #1
   156d4:	lsr	r2, r2, #5
   156d8:	ands	r3, r2, r3
   156dc:	moveq	r1, r7
   156e0:	beq	15724 <__assert_fail@plt+0x4244>
   156e4:	cmp	fp, r7
   156e8:	movhi	r0, #39	; 0x27
   156ec:	ldrhi	r1, [sp, #32]
   156f0:	str	r3, [sp, #40]	; 0x28
   156f4:	strbhi	r0, [r1, r7]
   156f8:	add	r1, r7, #1
   156fc:	cmp	fp, r1
   15700:	movhi	ip, #36	; 0x24
   15704:	ldrhi	r0, [sp, #32]
   15708:	strbhi	ip, [r0, r1]
   1570c:	add	r1, r7, #2
   15710:	cmp	fp, r1
   15714:	movhi	ip, #39	; 0x27
   15718:	ldrhi	r0, [sp, #32]
   1571c:	strbhi	ip, [r0, r1]
   15720:	add	r1, r7, #3
   15724:	cmp	fp, r1
   15728:	movhi	r0, #92	; 0x5c
   1572c:	ldrhi	r3, [sp, #32]
   15730:	add	r7, r1, #1
   15734:	strbhi	r0, [r3, r1]
   15738:	cmp	r8, #0
   1573c:	beq	16080 <__assert_fail@plt+0x4ba0>
   15740:	ldr	r0, [sp, #24]
   15744:	add	r3, sl, #1
   15748:	cmp	r3, r0
   1574c:	bcs	15fbc <__assert_fail@plt+0x4adc>
   15750:	ldr	r0, [sp, #56]	; 0x38
   15754:	ldrb	r3, [r0, r3]
   15758:	sub	r3, r3, #48	; 0x30
   1575c:	cmp	r3, #9
   15760:	bhi	15fbc <__assert_fail@plt+0x4adc>
   15764:	cmp	fp, r7
   15768:	movhi	r3, #48	; 0x30
   1576c:	ldrhi	r0, [sp, #32]
   15770:	ldr	r5, [sp, #28]
   15774:	mov	r4, #48	; 0x30
   15778:	strbhi	r3, [r0, r7]
   1577c:	add	r3, r1, #2
   15780:	cmp	fp, r3
   15784:	movhi	r0, #48	; 0x30
   15788:	ldrhi	ip, [sp, #32]
   1578c:	add	r7, r1, #3
   15790:	strbhi	r0, [ip, r3]
   15794:	b	153c8 <__assert_fail@plt+0x3ee8>
   15798:	mov	r5, #0
   1579c:	ldr	r3, [sp, #152]	; 0x98
   157a0:	sub	r2, r3, #2
   157a4:	ldr	r3, [sp, #28]
   157a8:	clz	r2, r2
   157ac:	lsr	r2, r2, #5
   157b0:	ands	r8, r3, r2
   157b4:	beq	153c8 <__assert_fail@plt+0x3ee8>
   157b8:	mov	r3, r8
   157bc:	mov	r2, r3
   157c0:	mov	r3, #2
   157c4:	ldr	sl, [sp, #32]
   157c8:	mov	r8, fp
   157cc:	str	r3, [sp, #152]	; 0x98
   157d0:	b	15608 <__assert_fail@plt+0x4128>
   157d4:	ldr	r3, [sp, #152]	; 0x98
   157d8:	cmp	r3, #2
   157dc:	beq	15f00 <__assert_fail@plt+0x4a20>
   157e0:	cmp	r3, #5
   157e4:	beq	15ec0 <__assert_fail@plt+0x49e0>
   157e8:	mov	r5, #0
   157ec:	sub	r2, r3, #2
   157f0:	mov	r8, r5
   157f4:	clz	r2, r2
   157f8:	mov	r4, #63	; 0x3f
   157fc:	lsr	r2, r2, #5
   15800:	b	153c8 <__assert_fail@plt+0x3ee8>
   15804:	ldr	r3, [sp, #152]	; 0x98
   15808:	cmp	r3, #2
   1580c:	beq	15f20 <__assert_fail@plt+0x4a40>
   15810:	mov	r2, #0
   15814:	str	r5, [sp, #68]	; 0x44
   15818:	mov	r8, r2
   1581c:	mov	r4, #39	; 0x27
   15820:	b	153c8 <__assert_fail@plt+0x3ee8>
   15824:	mov	r4, #13
   15828:	mov	r3, #114	; 0x72
   1582c:	b	155d8 <__assert_fail@plt+0x40f8>
   15830:	ldr	r3, [sp, #152]	; 0x98
   15834:	mov	r8, #0
   15838:	sub	r2, r3, #2
   1583c:	clz	r2, r2
   15840:	lsr	r2, r2, #5
   15844:	b	153c8 <__assert_fail@plt+0x3ee8>
   15848:	ldr	r3, [sp, #152]	; 0x98
   1584c:	mov	r4, #12
   15850:	sub	r2, r3, #2
   15854:	mov	r3, #102	; 0x66
   15858:	clz	r2, r2
   1585c:	lsr	r2, r2, #5
   15860:	b	1551c <__assert_fail@plt+0x403c>
   15864:	mov	r5, r6
   15868:	b	1579c <__assert_fail@plt+0x42bc>
   1586c:	ldr	r3, [sp, #152]	; 0x98
   15870:	sub	r2, r3, #2
   15874:	mov	r3, #116	; 0x74
   15878:	clz	r2, r2
   1587c:	lsr	r2, r2, #5
   15880:	b	1551c <__assert_fail@plt+0x403c>
   15884:	ldr	r8, [sp, #76]	; 0x4c
   15888:	cmp	r8, #1
   1588c:	bne	15d3c <__assert_fail@plt+0x485c>
   15890:	bl	1133c <__ctype_b_loc@plt>
   15894:	sxth	r3, r4
   15898:	mov	ip, r8
   1589c:	lsl	r3, r3, #1
   158a0:	ldr	r2, [r0]
   158a4:	ldrh	r3, [r2, r3]
   158a8:	and	r3, r3, #16384	; 0x4000
   158ac:	cmp	r3, #0
   158b0:	movne	r5, #1
   158b4:	moveq	r5, #0
   158b8:	moveq	r3, #1
   158bc:	movne	r3, #0
   158c0:	ldr	r2, [sp, #44]	; 0x2c
   158c4:	and	r3, r3, r2
   158c8:	ands	r8, r3, #255	; 0xff
   158cc:	bne	15bd0 <__assert_fail@plt+0x46f0>
   158d0:	ldr	r3, [sp, #152]	; 0x98
   158d4:	sub	r2, r3, #2
   158d8:	clz	r2, r2
   158dc:	lsr	r2, r2, #5
   158e0:	b	153c8 <__assert_fail@plt+0x3ee8>
   158e4:	ldr	r3, [sp, #56]	; 0x38
   158e8:	add	r3, r3, sl
   158ec:	str	r3, [sp, #48]	; 0x30
   158f0:	ldr	r3, [sp, #48]	; 0x30
   158f4:	mov	r6, #0
   158f8:	ldrb	r4, [r3]
   158fc:	cmp	r4, #126	; 0x7e
   15900:	ldrls	pc, [pc, r4, lsl #2]
   15904:	b	15884 <__assert_fail@plt+0x43a4>
   15908:	andeq	r5, r1, r8, lsr #13
   1590c:	andeq	r5, r1, r4, lsl #17
   15910:	andeq	r5, r1, r4, lsl #17
   15914:	andeq	r5, r1, r4, lsl #17
   15918:	andeq	r5, r1, r4, lsl #17
   1591c:	andeq	r5, r1, r4, lsl #17
   15920:	andeq	r5, r1, r4, lsl #17
   15924:	andeq	r5, r1, ip, lsl #13
   15928:	andeq	r5, r1, r0, ror r6
   1592c:	andeq	r5, r1, r4, lsl #22
   15930:	ldrdeq	r5, [r1], -r0
   15934:			; <UNDEFINED> instruction: 0x000155b4
   15938:	andeq	r5, r1, r8, asr #16
   1593c:	andeq	r5, r1, r4, lsr #16
   15940:	andeq	r5, r1, r4, lsl #17
   15944:	andeq	r5, r1, r4, lsl #17
   15948:	andeq	r5, r1, r4, lsl #17
   1594c:	andeq	r5, r1, r4, lsl #17
   15950:	andeq	r5, r1, r4, lsl #17
   15954:	andeq	r5, r1, r4, lsl #17
   15958:	andeq	r5, r1, r4, lsl #17
   1595c:	andeq	r5, r1, r4, lsl #17
   15960:	andeq	r5, r1, r4, lsl #17
   15964:	andeq	r5, r1, r4, lsl #17
   15968:	andeq	r5, r1, r4, lsl #17
   1596c:	andeq	r5, r1, r4, lsl #17
   15970:	andeq	r5, r1, r4, lsl #17
   15974:	andeq	r5, r1, r4, lsl #17
   15978:	andeq	r5, r1, r4, lsl #17
   1597c:	andeq	r5, r1, r4, lsl #17
   15980:	andeq	r5, r1, r4, lsl #17
   15984:	andeq	r5, r1, r4, lsl #17
   15988:	muleq	r1, ip, r7
   1598c:	muleq	r1, r8, r7
   15990:	muleq	r1, r8, r7
   15994:	andeq	r5, r1, r8, lsr #7
   15998:	muleq	r1, r8, r7
   1599c:	andeq	r5, r1, r0, lsr r8
   159a0:	muleq	r1, r8, r7
   159a4:	andeq	r5, r1, r4, lsl #16
   159a8:	muleq	r1, r8, r7
   159ac:	muleq	r1, r8, r7
   159b0:	muleq	r1, r8, r7
   159b4:	andeq	r5, r1, r0, lsr r8
   159b8:	andeq	r5, r1, r0, lsr r8
   159bc:	andeq	r5, r1, r0, lsr r8
   159c0:	andeq	r5, r1, r0, lsr r8
   159c4:	andeq	r5, r1, r0, lsr r8
   159c8:	andeq	r5, r1, r0, lsr r8
   159cc:	andeq	r5, r1, r0, lsr r8
   159d0:	andeq	r5, r1, r0, lsr r8
   159d4:	andeq	r5, r1, r0, lsr r8
   159d8:	andeq	r5, r1, r0, lsr r8
   159dc:	andeq	r5, r1, r0, lsr r8
   159e0:	andeq	r5, r1, r0, lsr r8
   159e4:	andeq	r5, r1, r0, lsr r8
   159e8:	andeq	r5, r1, r0, lsr r8
   159ec:	andeq	r5, r1, r0, lsr r8
   159f0:	andeq	r5, r1, r0, lsr r8
   159f4:	muleq	r1, r8, r7
   159f8:	muleq	r1, r8, r7
   159fc:	muleq	r1, r8, r7
   15a00:	muleq	r1, r8, r7
   15a04:	ldrdeq	r5, [r1], -r4
   15a08:	andeq	r5, r1, r4, lsl #17
   15a0c:	andeq	r5, r1, r0, lsr r8
   15a10:	andeq	r5, r1, r0, lsr r8
   15a14:	andeq	r5, r1, r0, lsr r8
   15a18:	andeq	r5, r1, r0, lsr r8
   15a1c:	andeq	r5, r1, r0, lsr r8
   15a20:	andeq	r5, r1, r0, lsr r8
   15a24:	andeq	r5, r1, r0, lsr r8
   15a28:	andeq	r5, r1, r0, lsr r8
   15a2c:	andeq	r5, r1, r0, lsr r8
   15a30:	andeq	r5, r1, r0, lsr r8
   15a34:	andeq	r5, r1, r0, lsr r8
   15a38:	andeq	r5, r1, r0, lsr r8
   15a3c:	andeq	r5, r1, r0, lsr r8
   15a40:	andeq	r5, r1, r0, lsr r8
   15a44:	andeq	r5, r1, r0, lsr r8
   15a48:	andeq	r5, r1, r0, lsr r8
   15a4c:	andeq	r5, r1, r0, lsr r8
   15a50:	andeq	r5, r1, r0, lsr r8
   15a54:	andeq	r5, r1, r0, lsr r8
   15a58:	andeq	r5, r1, r0, lsr r8
   15a5c:	andeq	r5, r1, r0, lsr r8
   15a60:	andeq	r5, r1, r0, lsr r8
   15a64:	andeq	r5, r1, r0, lsr r8
   15a68:	andeq	r5, r1, r0, lsr r8
   15a6c:	andeq	r5, r1, r0, lsr r8
   15a70:	andeq	r5, r1, r0, lsr r8
   15a74:	muleq	r1, r8, r7
   15a78:	strdeq	r5, [r1], -r4
   15a7c:	andeq	r5, r1, r0, lsr r8
   15a80:	muleq	r1, r8, r7
   15a84:	andeq	r5, r1, r0, lsr r8
   15a88:	muleq	r1, r8, r7
   15a8c:	andeq	r5, r1, r0, lsr r8
   15a90:	andeq	r5, r1, r0, lsr r8
   15a94:	andeq	r5, r1, r0, lsr r8
   15a98:	andeq	r5, r1, r0, lsr r8
   15a9c:	andeq	r5, r1, r0, lsr r8
   15aa0:	andeq	r5, r1, r0, lsr r8
   15aa4:	andeq	r5, r1, r0, lsr r8
   15aa8:	andeq	r5, r1, r0, lsr r8
   15aac:	andeq	r5, r1, r0, lsr r8
   15ab0:	andeq	r5, r1, r0, lsr r8
   15ab4:	andeq	r5, r1, r0, lsr r8
   15ab8:	andeq	r5, r1, r0, lsr r8
   15abc:	andeq	r5, r1, r0, lsr r8
   15ac0:	andeq	r5, r1, r0, lsr r8
   15ac4:	andeq	r5, r1, r0, lsr r8
   15ac8:	andeq	r5, r1, r0, lsr r8
   15acc:	andeq	r5, r1, r0, lsr r8
   15ad0:	andeq	r5, r1, r0, lsr r8
   15ad4:	andeq	r5, r1, r0, lsr r8
   15ad8:	andeq	r5, r1, r0, lsr r8
   15adc:	andeq	r5, r1, r0, lsr r8
   15ae0:	andeq	r5, r1, r0, lsr r8
   15ae4:	andeq	r5, r1, r0, lsr r8
   15ae8:	andeq	r5, r1, r0, lsr r8
   15aec:	andeq	r5, r1, r0, lsr r8
   15af0:	andeq	r5, r1, r0, lsr r8
   15af4:	andeq	r5, r1, r8, lsl #7
   15af8:	muleq	r1, r8, r7
   15afc:	andeq	r5, r1, r8, lsl #7
   15b00:	andeq	r5, r1, r8, lsr #7
   15b04:	mov	r3, #116	; 0x74
   15b08:	b	155d8 <__assert_fail@plt+0x40f8>
   15b0c:	ldr	r3, [sp, #160]	; 0xa0
   15b10:	cmp	r3, #0
   15b14:	beq	153e4 <__assert_fail@plt+0x3f04>
   15b18:	lsr	r3, r4, #5
   15b1c:	ldr	r0, [sp, #160]	; 0xa0
   15b20:	uxtb	r3, r3
   15b24:	and	r1, r4, #31
   15b28:	ldr	r0, [r0, r3, lsl #2]
   15b2c:	lsr	r3, r0, r1
   15b30:	tst	r3, #1
   15b34:	beq	153e4 <__assert_fail@plt+0x3f04>
   15b38:	ldr	r3, [sp, #28]
   15b3c:	cmp	r3, #0
   15b40:	beq	15544 <__assert_fail@plt+0x4064>
   15b44:	ldr	sl, [sp, #32]
   15b48:	mov	r8, fp
   15b4c:	b	15608 <__assert_fail@plt+0x4128>
   15b50:	ldr	r3, [sp, #28]
   15b54:	cmp	r3, #0
   15b58:	bne	160ac <__assert_fail@plt+0x4bcc>
   15b5c:	add	sl, sl, #1
   15b60:	ldr	r6, [sp, #40]	; 0x28
   15b64:	mov	r5, #0
   15b68:	mov	r4, #92	; 0x5c
   15b6c:	b	15400 <__assert_fail@plt+0x3f20>
   15b70:	cmp	r9, r8
   15b74:	bne	15de4 <__assert_fail@plt+0x4904>
   15b78:	ldr	r0, [sp, #100]	; 0x64
   15b7c:	bl	11258 <iswprint@plt>
   15b80:	add	r5, r5, r4
   15b84:	cmp	r0, #0
   15b88:	add	r0, sp, #104	; 0x68
   15b8c:	moveq	r6, #0
   15b90:	bl	111e0 <mbsinit@plt>
   15b94:	cmp	r0, #0
   15b98:	beq	15d78 <__assert_fail@plt+0x4898>
   15b9c:	mov	r2, r6
   15ba0:	mov	ip, r5
   15ba4:	eor	r5, r2, #1
   15ba8:	ldr	r4, [sp, #80]	; 0x50
   15bac:	ldr	r6, [sp, #84]	; 0x54
   15bb0:	ldr	r7, [sp, #88]	; 0x58
   15bb4:	uxtb	r5, r5
   15bb8:	cmp	ip, #1
   15bbc:	bls	160bc <__assert_fail@plt+0x4bdc>
   15bc0:	ldr	r3, [sp, #44]	; 0x2c
   15bc4:	and	r8, r3, r5
   15bc8:	mov	r5, r2
   15bcc:	uxtb	r8, r8
   15bd0:	add	r2, sl, ip
   15bd4:	ldr	r0, [sp, #48]	; 0x30
   15bd8:	mov	r1, #0
   15bdc:	str	r5, [sp, #48]	; 0x30
   15be0:	ldr	r9, [sp, #28]
   15be4:	ldr	ip, [sp, #40]	; 0x28
   15be8:	ldr	r3, [sp, #32]
   15bec:	ldr	r5, [sp, #152]	; 0x98
   15bf0:	b	15cac <__assert_fail@plt+0x47cc>
   15bf4:	cmp	r9, #0
   15bf8:	bne	15fd0 <__assert_fail@plt+0x4af0>
   15bfc:	eor	r1, ip, #1
   15c00:	cmp	r5, #2
   15c04:	movne	r1, #0
   15c08:	andeq	r1, r1, #1
   15c0c:	cmp	r1, #0
   15c10:	beq	15c48 <__assert_fail@plt+0x4768>
   15c14:	cmp	fp, r7
   15c18:	movhi	ip, #39	; 0x27
   15c1c:	strbhi	ip, [r3, r7]
   15c20:	add	ip, r7, #1
   15c24:	cmp	fp, ip
   15c28:	movhi	lr, #36	; 0x24
   15c2c:	strbhi	lr, [r3, ip]
   15c30:	add	ip, r7, #2
   15c34:	cmp	fp, ip
   15c38:	movhi	lr, #39	; 0x27
   15c3c:	strbhi	lr, [r3, ip]
   15c40:	add	r7, r7, #3
   15c44:	mov	ip, r1
   15c48:	cmp	fp, r7
   15c4c:	movhi	r1, #92	; 0x5c
   15c50:	strbhi	r1, [r3, r7]
   15c54:	add	r1, r7, #1
   15c58:	cmp	fp, r1
   15c5c:	lsrhi	lr, r4, #6
   15c60:	addhi	lr, lr, #48	; 0x30
   15c64:	strbhi	lr, [r3, r1]
   15c68:	add	lr, r7, #2
   15c6c:	cmp	fp, lr
   15c70:	lsrhi	r1, r4, #3
   15c74:	andhi	r1, r1, #7
   15c78:	addhi	r1, r1, #48	; 0x30
   15c7c:	add	sl, sl, #1
   15c80:	strbhi	r1, [r3, lr]
   15c84:	and	r4, r4, #7
   15c88:	cmp	r2, sl
   15c8c:	add	r4, r4, #48	; 0x30
   15c90:	add	r7, r7, #3
   15c94:	bls	15ff4 <__assert_fail@plt+0x4b14>
   15c98:	mov	r1, r8
   15c9c:	cmp	fp, r7
   15ca0:	strbhi	r4, [r3, r7]
   15ca4:	ldrb	r4, [r0, #1]!
   15ca8:	add	r7, r7, #1
   15cac:	cmp	r8, #0
   15cb0:	bne	15bf4 <__assert_fail@plt+0x4714>
   15cb4:	cmp	r6, #0
   15cb8:	bne	15d08 <__assert_fail@plt+0x4828>
   15cbc:	eor	r6, r1, #1
   15cc0:	and	r6, r6, ip
   15cc4:	add	sl, sl, #1
   15cc8:	cmp	r2, sl
   15ccc:	uxtb	r6, r6
   15cd0:	bls	15d30 <__assert_fail@plt+0x4850>
   15cd4:	cmp	r6, #0
   15cd8:	beq	15c9c <__assert_fail@plt+0x47bc>
   15cdc:	cmp	fp, r7
   15ce0:	movhi	ip, #39	; 0x27
   15ce4:	strbhi	ip, [r3, r7]
   15ce8:	add	ip, r7, #1
   15cec:	cmp	fp, ip
   15cf0:	movhi	lr, #39	; 0x27
   15cf4:	strbhi	lr, [r3, ip]
   15cf8:	add	r7, r7, #2
   15cfc:	mov	r6, r8
   15d00:	mov	ip, r8
   15d04:	b	15c9c <__assert_fail@plt+0x47bc>
   15d08:	cmp	fp, r7
   15d0c:	eor	r6, r1, #1
   15d10:	movhi	lr, #92	; 0x5c
   15d14:	and	r6, r6, ip
   15d18:	add	sl, sl, #1
   15d1c:	strbhi	lr, [r3, r7]
   15d20:	cmp	r2, sl
   15d24:	add	r7, r7, #1
   15d28:	uxtb	r6, r6
   15d2c:	bhi	15cd4 <__assert_fail@plt+0x47f4>
   15d30:	str	ip, [sp, #40]	; 0x28
   15d34:	ldr	r5, [sp, #48]	; 0x30
   15d38:	b	15400 <__assert_fail@plt+0x3f20>
   15d3c:	ldr	r3, [sp, #24]
   15d40:	cmn	r3, #1
   15d44:	mov	r3, #0
   15d48:	str	r3, [sp, #104]	; 0x68
   15d4c:	str	r3, [sp, #108]	; 0x6c
   15d50:	beq	16070 <__assert_fail@plt+0x4b90>
   15d54:	mov	r2, r5
   15d58:	mov	r3, #0
   15d5c:	str	r7, [sp, #88]	; 0x58
   15d60:	ldr	r7, [sp, #152]	; 0x98
   15d64:	str	r5, [sp, #92]	; 0x5c
   15d68:	str	r6, [sp, #84]	; 0x54
   15d6c:	mov	r5, r3
   15d70:	mov	r6, r2
   15d74:	str	r4, [sp, #80]	; 0x50
   15d78:	ldr	r3, [sp, #56]	; 0x38
   15d7c:	add	r9, sl, r5
   15d80:	add	r8, r3, r9
   15d84:	ldr	r3, [sp, #24]
   15d88:	mov	r1, r8
   15d8c:	sub	r2, r3, r9
   15d90:	add	r0, sp, #100	; 0x64
   15d94:	add	r3, sp, #104	; 0x68
   15d98:	bl	18258 <__assert_fail@plt+0x6d78>
   15d9c:	subs	r4, r0, #0
   15da0:	beq	16148 <__assert_fail@plt+0x4c68>
   15da4:	cmn	r4, #1
   15da8:	beq	16128 <__assert_fail@plt+0x4c48>
   15dac:	cmn	r4, #2
   15db0:	beq	160c8 <__assert_fail@plt+0x4be8>
   15db4:	ldr	r2, [sp, #28]
   15db8:	cmp	r7, #2
   15dbc:	movne	r2, #0
   15dc0:	andeq	r2, r2, #1
   15dc4:	cmp	r2, #0
   15dc8:	beq	15b78 <__assert_fail@plt+0x4698>
   15dcc:	cmp	r4, #1
   15dd0:	beq	15b78 <__assert_fail@plt+0x4698>
   15dd4:	sub	r3, r4, #1
   15dd8:	add	r9, r3, r9
   15ddc:	ldr	r3, [sp, #56]	; 0x38
   15de0:	add	r9, r3, r9
   15de4:	ldrb	r3, [r8, #1]!
   15de8:	sub	r3, r3, #91	; 0x5b
   15dec:	cmp	r3, #33	; 0x21
   15df0:	ldrls	pc, [pc, r3, lsl #2]
   15df4:	b	15b70 <__assert_fail@plt+0x4690>
   15df8:	andeq	r5, r1, r0, lsl #29
   15dfc:	andeq	r5, r1, r0, lsl #29
   15e00:	andeq	r5, r1, r0, ror fp
   15e04:	andeq	r5, r1, r0, lsl #29
   15e08:	andeq	r5, r1, r0, ror fp
   15e0c:	andeq	r5, r1, r0, lsl #29
   15e10:	andeq	r5, r1, r0, ror fp
   15e14:	andeq	r5, r1, r0, ror fp
   15e18:	andeq	r5, r1, r0, ror fp
   15e1c:	andeq	r5, r1, r0, ror fp
   15e20:	andeq	r5, r1, r0, ror fp
   15e24:	andeq	r5, r1, r0, ror fp
   15e28:	andeq	r5, r1, r0, ror fp
   15e2c:	andeq	r5, r1, r0, ror fp
   15e30:	andeq	r5, r1, r0, ror fp
   15e34:	andeq	r5, r1, r0, ror fp
   15e38:	andeq	r5, r1, r0, ror fp
   15e3c:	andeq	r5, r1, r0, ror fp
   15e40:	andeq	r5, r1, r0, ror fp
   15e44:	andeq	r5, r1, r0, ror fp
   15e48:	andeq	r5, r1, r0, ror fp
   15e4c:	andeq	r5, r1, r0, ror fp
   15e50:	andeq	r5, r1, r0, ror fp
   15e54:	andeq	r5, r1, r0, ror fp
   15e58:	andeq	r5, r1, r0, ror fp
   15e5c:	andeq	r5, r1, r0, ror fp
   15e60:	andeq	r5, r1, r0, ror fp
   15e64:	andeq	r5, r1, r0, ror fp
   15e68:	andeq	r5, r1, r0, ror fp
   15e6c:	andeq	r5, r1, r0, ror fp
   15e70:	andeq	r5, r1, r0, ror fp
   15e74:	andeq	r5, r1, r0, ror fp
   15e78:	andeq	r5, r1, r0, ror fp
   15e7c:	andeq	r5, r1, r0, lsl #29
   15e80:	mov	r3, #2
   15e84:	ldr	sl, [sp, #32]
   15e88:	mov	r8, fp
   15e8c:	str	r3, [sp, #152]	; 0x98
   15e90:	b	15608 <__assert_fail@plt+0x4128>
   15e94:	ldr	r3, [sp, #156]	; 0x9c
   15e98:	tst	r3, #1
   15e9c:	bne	15fc8 <__assert_fail@plt+0x4ae8>
   15ea0:	ldr	r3, [sp, #152]	; 0x98
   15ea4:	ldr	r4, [sp, #44]	; 0x2c
   15ea8:	sub	r2, r3, #2
   15eac:	mov	r5, #0
   15eb0:	clz	r2, r2
   15eb4:	mov	r8, r4
   15eb8:	lsr	r2, r2, #5
   15ebc:	b	153c8 <__assert_fail@plt+0x3ee8>
   15ec0:	ldr	r3, [sp, #156]	; 0x9c
   15ec4:	ands	r9, r3, #4
   15ec8:	beq	16000 <__assert_fail@plt+0x4b20>
   15ecc:	ldr	r2, [sp, #24]
   15ed0:	add	r3, sl, #2
   15ed4:	cmp	r3, r2
   15ed8:	bcs	15eec <__assert_fail@plt+0x4a0c>
   15edc:	ldr	r2, [sp, #48]	; 0x30
   15ee0:	ldrb	r4, [r2, #1]
   15ee4:	cmp	r4, #63	; 0x3f
   15ee8:	beq	16188 <__assert_fail@plt+0x4ca8>
   15eec:	mov	r2, #0
   15ef0:	mov	r8, r2
   15ef4:	mov	r5, r2
   15ef8:	mov	r4, #63	; 0x3f
   15efc:	b	153c8 <__assert_fail@plt+0x3ee8>
   15f00:	ldr	r3, [sp, #28]
   15f04:	cmp	r3, #0
   15f08:	bne	1622c <__assert_fail@plt+0x4d4c>
   15f0c:	mov	r2, r5
   15f10:	mov	r8, r3
   15f14:	mov	r5, #0
   15f18:	mov	r4, #63	; 0x3f
   15f1c:	b	153c8 <__assert_fail@plt+0x3ee8>
   15f20:	ldr	r3, [sp, #28]
   15f24:	cmp	r3, #0
   15f28:	bne	1622c <__assert_fail@plt+0x4d4c>
   15f2c:	ldr	r2, [sp, #72]	; 0x48
   15f30:	adds	r3, fp, #0
   15f34:	movne	r3, #1
   15f38:	cmp	r2, #0
   15f3c:	movne	r3, #0
   15f40:	cmp	r3, #0
   15f44:	strne	fp, [sp, #72]	; 0x48
   15f48:	movne	fp, #0
   15f4c:	bne	15f88 <__assert_fail@plt+0x4aa8>
   15f50:	cmp	fp, r7
   15f54:	movhi	r2, #39	; 0x27
   15f58:	ldrhi	r3, [sp, #32]
   15f5c:	strbhi	r2, [r3, r7]
   15f60:	add	r3, r7, #1
   15f64:	cmp	fp, r3
   15f68:	movhi	r1, #92	; 0x5c
   15f6c:	ldrhi	r2, [sp, #32]
   15f70:	strbhi	r1, [r2, r3]
   15f74:	add	r3, r7, #2
   15f78:	cmp	fp, r3
   15f7c:	movhi	r1, #39	; 0x27
   15f80:	ldrhi	r2, [sp, #32]
   15f84:	strbhi	r1, [r2, r3]
   15f88:	ldr	r3, [sp, #28]
   15f8c:	add	r7, r7, #3
   15f90:	mov	r2, r5
   15f94:	mov	r8, r3
   15f98:	str	r5, [sp, #68]	; 0x44
   15f9c:	str	r3, [sp, #40]	; 0x28
   15fa0:	mov	r4, #39	; 0x27
   15fa4:	b	153c8 <__assert_fail@plt+0x3ee8>
   15fa8:	ldr	r3, [sp, #56]	; 0x38
   15fac:	ldrb	r3, [r3, #1]
   15fb0:	adds	r3, r3, #0
   15fb4:	movne	r3, #1
   15fb8:	b	153a0 <__assert_fail@plt+0x3ec0>
   15fbc:	ldr	r5, [sp, #28]
   15fc0:	mov	r4, #48	; 0x30
   15fc4:	b	153c8 <__assert_fail@plt+0x3ee8>
   15fc8:	add	sl, sl, #1
   15fcc:	b	14ef8 <__assert_fail@plt+0x3a18>
   15fd0:	mov	sl, r3
   15fd4:	ldr	r3, [sp, #28]
   15fd8:	mov	r8, fp
   15fdc:	str	r3, [sp, #44]	; 0x2c
   15fe0:	ldr	r3, [sp, #152]	; 0x98
   15fe4:	sub	r2, r3, #2
   15fe8:	clz	r2, r2
   15fec:	lsr	r2, r2, #5
   15ff0:	b	15608 <__assert_fail@plt+0x4128>
   15ff4:	str	ip, [sp, #40]	; 0x28
   15ff8:	ldr	r5, [sp, #48]	; 0x30
   15ffc:	b	15438 <__assert_fail@plt+0x3f58>
   16000:	mov	r2, r9
   16004:	mov	r8, r9
   16008:	mov	r5, #0
   1600c:	mov	r4, #63	; 0x3f
   16010:	b	153c8 <__assert_fail@plt+0x3ee8>
   16014:	cmp	fp, #0
   16018:	beq	16090 <__assert_fail@plt+0x4bb0>
   1601c:	ldr	r1, [sp, #32]
   16020:	mov	r3, #34	; 0x22
   16024:	mov	r2, #1
   16028:	strb	r3, [r1]
   1602c:	ldr	r3, [pc, #332]	; 16180 <__assert_fail@plt+0x4ca0>
   16030:	str	r2, [sp, #52]	; 0x34
   16034:	mov	r7, r2
   16038:	str	r2, [sp, #44]	; 0x2c
   1603c:	str	r3, [sp, #64]	; 0x40
   16040:	b	14ee8 <__assert_fail@plt+0x3a08>
   16044:	ldr	r3, [pc, #300]	; 16178 <__assert_fail@plt+0x4c98>
   16048:	str	r3, [sp, #64]	; 0x40
   1604c:	mov	r3, #0
   16050:	str	r3, [sp, #28]
   16054:	mov	r3, #1
   16058:	str	r3, [sp, #52]	; 0x34
   1605c:	mov	r7, r3
   16060:	mov	r3, #2
   16064:	str	r3, [sp, #152]	; 0x98
   16068:	b	14ee8 <__assert_fail@plt+0x3a08>
   1606c:	bl	114bc <abort@plt>
   16070:	ldr	r0, [sp, #56]	; 0x38
   16074:	bl	11354 <strlen@plt>
   16078:	str	r0, [sp, #24]
   1607c:	b	15d54 <__assert_fail@plt+0x4874>
   16080:	mov	r5, r8
   16084:	mov	r4, #48	; 0x30
   16088:	ldr	r8, [sp, #44]	; 0x2c
   1608c:	b	153c8 <__assert_fail@plt+0x3ee8>
   16090:	mov	r3, #1
   16094:	str	r3, [sp, #52]	; 0x34
   16098:	mov	r7, r3
   1609c:	str	r3, [sp, #44]	; 0x2c
   160a0:	ldr	r3, [pc, #216]	; 16180 <__assert_fail@plt+0x4ca0>
   160a4:	str	r3, [sp, #64]	; 0x40
   160a8:	b	14ee8 <__assert_fail@plt+0x3a08>
   160ac:	ldr	sl, [sp, #32]
   160b0:	mov	r8, fp
   160b4:	mov	r2, r3
   160b8:	b	15608 <__assert_fail@plt+0x4128>
   160bc:	mov	r3, r5
   160c0:	mov	r5, r2
   160c4:	b	158c0 <__assert_fail@plt+0x43e0>
   160c8:	ldr	r1, [sp, #24]
   160cc:	mov	r2, r5
   160d0:	cmp	r1, r9
   160d4:	mov	ip, r5
   160d8:	ldr	r4, [sp, #80]	; 0x50
   160dc:	ldr	r5, [sp, #92]	; 0x5c
   160e0:	ldr	r6, [sp, #84]	; 0x54
   160e4:	ldr	r7, [sp, #88]	; 0x58
   160e8:	bls	1611c <__assert_fail@plt+0x4c3c>
   160ec:	ldrb	r3, [r8]
   160f0:	cmp	r3, #0
   160f4:	bne	16108 <__assert_fail@plt+0x4c28>
   160f8:	b	16120 <__assert_fail@plt+0x4c40>
   160fc:	ldrb	r3, [r8, #1]!
   16100:	cmp	r3, #0
   16104:	beq	16220 <__assert_fail@plt+0x4d40>
   16108:	add	r2, r2, #1
   1610c:	add	r3, sl, r2
   16110:	cmp	r1, r3
   16114:	bhi	160fc <__assert_fail@plt+0x4c1c>
   16118:	mov	ip, r2
   1611c:	mov	r3, #0
   16120:	mov	r2, r3
   16124:	b	15bb8 <__assert_fail@plt+0x46d8>
   16128:	mov	r3, #0
   1612c:	mov	ip, r5
   16130:	ldr	r4, [sp, #80]	; 0x50
   16134:	ldr	r5, [sp, #92]	; 0x5c
   16138:	ldr	r6, [sp, #84]	; 0x54
   1613c:	ldr	r7, [sp, #88]	; 0x58
   16140:	mov	r2, r3
   16144:	b	15bb8 <__assert_fail@plt+0x46d8>
   16148:	mov	r3, r6
   1614c:	mov	ip, r5
   16150:	eor	r5, r3, #1
   16154:	mov	r2, r6
   16158:	ldr	r4, [sp, #80]	; 0x50
   1615c:	ldr	r6, [sp, #84]	; 0x54
   16160:	ldr	r7, [sp, #88]	; 0x58
   16164:	uxtb	r5, r5
   16168:	b	15bb8 <__assert_fail@plt+0x46d8>
   1616c:	ldr	sl, [sp, #32]
   16170:	mov	r8, fp
   16174:	b	15fdc <__assert_fail@plt+0x4afc>
   16178:	andeq	r9, r1, r0, lsr #30
   1617c:	andeq	r9, r1, r4, lsr #30
   16180:	andeq	r8, r1, r0, lsr #30
   16184:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   16188:	ldr	r2, [sp, #56]	; 0x38
   1618c:	ldrb	r1, [r2, r3]
   16190:	sub	r2, r1, #33	; 0x21
   16194:	uxtb	r2, r2
   16198:	cmp	r2, #29
   1619c:	bhi	1623c <__assert_fail@plt+0x4d5c>
   161a0:	ldr	r0, [pc, #-36]	; 16184 <__assert_fail@plt+0x4ca4>
   161a4:	mov	ip, #1
   161a8:	ands	r2, r0, ip, lsl r2
   161ac:	beq	1624c <__assert_fail@plt+0x4d6c>
   161b0:	ldr	r2, [sp, #28]
   161b4:	cmp	r2, #0
   161b8:	bne	1634c <__assert_fail@plt+0x4e6c>
   161bc:	cmp	fp, r7
   161c0:	ldr	r8, [sp, #28]
   161c4:	ldrhi	r2, [sp, #32]
   161c8:	mov	sl, r3
   161cc:	mov	r5, r8
   161d0:	strbhi	r4, [r2, r7]
   161d4:	add	r2, r7, #1
   161d8:	cmp	fp, r2
   161dc:	movhi	r0, #34	; 0x22
   161e0:	ldrhi	ip, [sp, #32]
   161e4:	mov	r4, r1
   161e8:	strbhi	r0, [ip, r2]
   161ec:	add	r2, r7, #2
   161f0:	cmp	fp, r2
   161f4:	movhi	r0, #34	; 0x22
   161f8:	ldrhi	ip, [sp, #32]
   161fc:	strbhi	r0, [ip, r2]
   16200:	add	r2, r7, #3
   16204:	cmp	fp, r2
   16208:	movhi	r0, #63	; 0x3f
   1620c:	ldrhi	ip, [sp, #32]
   16210:	add	r7, r7, #4
   16214:	strbhi	r0, [ip, r2]
   16218:	mov	r2, r8
   1621c:	b	153c8 <__assert_fail@plt+0x3ee8>
   16220:	mov	ip, r2
   16224:	mov	r2, r3
   16228:	b	15bb8 <__assert_fail@plt+0x46d8>
   1622c:	ldr	sl, [sp, #32]
   16230:	mov	r8, fp
   16234:	ldr	r2, [sp, #28]
   16238:	b	15608 <__assert_fail@plt+0x4128>
   1623c:	mov	r2, #0
   16240:	mov	r8, r2
   16244:	mov	r5, r2
   16248:	b	153c8 <__assert_fail@plt+0x3ee8>
   1624c:	mov	r8, r2
   16250:	mov	r5, #0
   16254:	b	153c8 <__assert_fail@plt+0x3ee8>
   16258:	ldr	r1, [sp, #152]	; 0x98
   1625c:	bl	14d24 <__assert_fail@plt+0x3844>
   16260:	str	r0, [sp, #168]	; 0xa8
   16264:	b	15284 <__assert_fail@plt+0x3da4>
   16268:	ldr	r1, [sp, #152]	; 0x98
   1626c:	bl	14d24 <__assert_fail@plt+0x3844>
   16270:	str	r0, [sp, #164]	; 0xa4
   16274:	b	15264 <__assert_fail@plt+0x3d84>
   16278:	ldr	r7, [sp, #28]
   1627c:	b	152c4 <__assert_fail@plt+0x3de4>
   16280:	ldr	sl, [sp, #32]
   16284:	ldr	r2, [sp, #68]	; 0x44
   16288:	mov	r8, fp
   1628c:	mov	fp, r7
   16290:	ldr	r3, [sp, #64]	; 0x40
   16294:	cmp	r3, #0
   16298:	moveq	r2, #0
   1629c:	andne	r2, r2, #1
   162a0:	cmp	r2, #0
   162a4:	beq	162d0 <__assert_fail@plt+0x4df0>
   162a8:	mov	r2, r3
   162ac:	ldrb	r3, [r3]
   162b0:	cmp	r3, #0
   162b4:	beq	162d0 <__assert_fail@plt+0x4df0>
   162b8:	cmp	r8, fp
   162bc:	strbhi	r3, [sl, fp]
   162c0:	ldrb	r3, [r2, #1]!
   162c4:	add	fp, fp, #1
   162c8:	cmp	r3, #0
   162cc:	bne	162b8 <__assert_fail@plt+0x4dd8>
   162d0:	cmp	r8, fp
   162d4:	movhi	r3, #0
   162d8:	strbhi	r3, [sl, fp]
   162dc:	b	15664 <__assert_fail@plt+0x4184>
   162e0:	ldr	r3, [sp, #168]	; 0xa8
   162e4:	ldr	sl, [sp, #32]
   162e8:	str	r3, [sp, #16]
   162ec:	ldr	r3, [sp, #164]	; 0xa4
   162f0:	mov	ip, #5
   162f4:	str	r3, [sp, #12]
   162f8:	ldr	r3, [sp, #160]	; 0xa0
   162fc:	ldr	r2, [sp, #56]	; 0x38
   16300:	str	r3, [sp, #8]
   16304:	ldr	r3, [sp, #156]	; 0x9c
   16308:	ldr	r1, [sp, #72]	; 0x48
   1630c:	str	r3, [sp, #4]
   16310:	mov	r0, sl
   16314:	ldr	r3, [sp, #24]
   16318:	str	ip, [sp]
   1631c:	bl	14e44 <__assert_fail@plt+0x3964>
   16320:	mov	fp, r0
   16324:	b	15664 <__assert_fail@plt+0x4184>
   16328:	mov	r8, fp
   1632c:	ldr	sl, [sp, #32]
   16330:	mov	fp, r7
   16334:	mov	r2, r3
   16338:	b	16290 <__assert_fail@plt+0x4db0>
   1633c:	mov	r8, fp
   16340:	ldr	sl, [sp, #32]
   16344:	mov	fp, r7
   16348:	b	16290 <__assert_fail@plt+0x4db0>
   1634c:	ldr	sl, [sp, #32]
   16350:	mov	r8, fp
   16354:	b	15620 <__assert_fail@plt+0x4140>
   16358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1635c:	sub	sp, sp, #52	; 0x34
   16360:	mov	r4, r0
   16364:	mov	r5, r3
   16368:	mov	sl, r1
   1636c:	mov	fp, r2
   16370:	bl	1139c <__errno_location@plt>
   16374:	ldr	r7, [pc, #412]	; 16518 <__assert_fail@plt+0x5038>
   16378:	cmn	r4, #-2147483647	; 0x80000001
   1637c:	ldr	r6, [r7]
   16380:	mov	r8, r0
   16384:	movne	r0, #0
   16388:	moveq	r0, #1
   1638c:	ldr	r3, [r8]
   16390:	orrs	r0, r0, r4, lsr #31
   16394:	str	r3, [sp, #24]
   16398:	bne	16514 <__assert_fail@plt+0x5034>
   1639c:	ldr	r2, [r7, #4]
   163a0:	cmp	r4, r2
   163a4:	blt	16404 <__assert_fail@plt+0x4f24>
   163a8:	add	r9, r7, #8
   163ac:	cmp	r6, r9
   163b0:	str	r2, [sp, #44]	; 0x2c
   163b4:	beq	164e4 <__assert_fail@plt+0x5004>
   163b8:	mov	r3, #8
   163bc:	sub	r2, r4, r2
   163c0:	mov	r0, r6
   163c4:	str	r3, [sp]
   163c8:	add	r2, r2, #1
   163cc:	mvn	r3, #-2147483648	; 0x80000000
   163d0:	add	r1, sp, #44	; 0x2c
   163d4:	bl	17550 <__assert_fail@plt+0x6070>
   163d8:	mov	r6, r0
   163dc:	str	r0, [r7]
   163e0:	ldr	r0, [r7, #4]
   163e4:	ldr	r2, [sp, #44]	; 0x2c
   163e8:	mov	r1, #0
   163ec:	sub	r2, r2, r0
   163f0:	add	r0, r6, r0, lsl #3
   163f4:	lsl	r2, r2, #3
   163f8:	bl	113c0 <memset@plt>
   163fc:	ldr	r3, [sp, #44]	; 0x2c
   16400:	str	r3, [r7, #4]
   16404:	add	r3, r6, r4, lsl #3
   16408:	ldr	r1, [r5, #4]
   1640c:	ldr	r7, [r3, #4]
   16410:	ldr	r9, [r6, r4, lsl #3]
   16414:	ldr	r2, [r5, #40]	; 0x28
   16418:	ldr	ip, [r5, #44]	; 0x2c
   1641c:	add	r0, r5, #8
   16420:	str	r3, [sp, #28]
   16424:	ldr	r3, [r5]
   16428:	orr	r1, r1, #1
   1642c:	mov	lr, r0
   16430:	str	r1, [sp, #32]
   16434:	str	r0, [sp, #36]	; 0x24
   16438:	str	r1, [sp, #4]
   1643c:	str	r2, [sp, #12]
   16440:	str	r3, [sp]
   16444:	mov	r0, r7
   16448:	mov	r1, r9
   1644c:	str	ip, [sp, #16]
   16450:	str	lr, [sp, #8]
   16454:	mov	r3, fp
   16458:	mov	r2, sl
   1645c:	bl	14e44 <__assert_fail@plt+0x3964>
   16460:	cmp	r9, r0
   16464:	bhi	164d0 <__assert_fail@plt+0x4ff0>
   16468:	ldr	r3, [pc, #172]	; 1651c <__assert_fail@plt+0x503c>
   1646c:	add	r9, r0, #1
   16470:	cmp	r7, r3
   16474:	str	r9, [r6, r4, lsl #3]
   16478:	beq	16484 <__assert_fail@plt+0x4fa4>
   1647c:	mov	r0, r7
   16480:	bl	14a70 <__assert_fail@plt+0x3590>
   16484:	mov	r0, r9
   16488:	bl	173ec <__assert_fail@plt+0x5f0c>
   1648c:	ldr	lr, [sp, #28]
   16490:	ldr	ip, [r5, #44]	; 0x2c
   16494:	ldr	r4, [r5, #40]	; 0x28
   16498:	mov	r3, fp
   1649c:	mov	r2, sl
   164a0:	mov	r1, r9
   164a4:	str	r0, [lr, #4]
   164a8:	ldr	lr, [r5]
   164ac:	ldr	r5, [sp, #36]	; 0x24
   164b0:	str	ip, [sp, #16]
   164b4:	str	r5, [sp, #8]
   164b8:	ldr	r5, [sp, #32]
   164bc:	str	r4, [sp, #12]
   164c0:	str	r5, [sp, #4]
   164c4:	str	lr, [sp]
   164c8:	mov	r7, r0
   164cc:	bl	14e44 <__assert_fail@plt+0x3964>
   164d0:	ldr	r3, [sp, #24]
   164d4:	mov	r0, r7
   164d8:	str	r3, [r8]
   164dc:	add	sp, sp, #52	; 0x34
   164e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164e4:	mov	r3, #8
   164e8:	sub	r2, r4, r2
   164ec:	str	r3, [sp]
   164f0:	add	r1, sp, #44	; 0x2c
   164f4:	add	r2, r2, #1
   164f8:	mvn	r3, #-2147483648	; 0x80000000
   164fc:	bl	17550 <__assert_fail@plt+0x6070>
   16500:	mov	r6, r0
   16504:	ldm	r9, {r0, r1}
   16508:	str	r6, [r7]
   1650c:	stm	r6, {r0, r1}
   16510:	b	163e0 <__assert_fail@plt+0x4f00>
   16514:	bl	114bc <abort@plt>
   16518:	andeq	fp, r2, ip, ror #2
   1651c:	andeq	fp, r2, r0, lsr r5
   16520:	push	{r4, r5, r6, lr}
   16524:	mov	r5, r0
   16528:	bl	1139c <__errno_location@plt>
   1652c:	cmp	r5, #0
   16530:	mov	r1, #48	; 0x30
   16534:	mov	r4, r0
   16538:	ldr	r0, [pc, #16]	; 16550 <__assert_fail@plt+0x5070>
   1653c:	ldr	r6, [r4]
   16540:	movne	r0, r5
   16544:	bl	1784c <__assert_fail@plt+0x636c>
   16548:	str	r6, [r4]
   1654c:	pop	{r4, r5, r6, pc}
   16550:	andeq	fp, r2, r0, lsr r6
   16554:	ldr	r3, [pc, #12]	; 16568 <__assert_fail@plt+0x5088>
   16558:	cmp	r0, #0
   1655c:	moveq	r0, r3
   16560:	ldr	r0, [r0]
   16564:	bx	lr
   16568:	andeq	fp, r2, r0, lsr r6
   1656c:	ldr	r3, [pc, #12]	; 16580 <__assert_fail@plt+0x50a0>
   16570:	cmp	r0, #0
   16574:	moveq	r0, r3
   16578:	str	r1, [r0]
   1657c:	bx	lr
   16580:	andeq	fp, r2, r0, lsr r6
   16584:	ldr	r3, [pc, #52]	; 165c0 <__assert_fail@plt+0x50e0>
   16588:	cmp	r0, #0
   1658c:	moveq	r0, r3
   16590:	add	r3, r0, #8
   16594:	push	{lr}		; (str lr, [sp, #-4]!)
   16598:	lsr	lr, r1, #5
   1659c:	and	r1, r1, #31
   165a0:	ldr	ip, [r3, lr, lsl #2]
   165a4:	lsr	r0, ip, r1
   165a8:	eor	r2, r2, r0
   165ac:	and	r2, r2, #1
   165b0:	and	r0, r0, #1
   165b4:	eor	r1, ip, r2, lsl r1
   165b8:	str	r1, [r3, lr, lsl #2]
   165bc:	pop	{pc}		; (ldr pc, [sp], #4)
   165c0:	andeq	fp, r2, r0, lsr r6
   165c4:	ldr	r3, [pc, #16]	; 165dc <__assert_fail@plt+0x50fc>
   165c8:	cmp	r0, #0
   165cc:	movne	r3, r0
   165d0:	ldr	r0, [r3, #4]
   165d4:	str	r1, [r3, #4]
   165d8:	bx	lr
   165dc:	andeq	fp, r2, r0, lsr r6
   165e0:	ldr	r3, [pc, #44]	; 16614 <__assert_fail@plt+0x5134>
   165e4:	cmp	r0, #0
   165e8:	moveq	r0, r3
   165ec:	mov	ip, #10
   165f0:	cmp	r2, #0
   165f4:	cmpne	r1, #0
   165f8:	str	ip, [r0]
   165fc:	beq	1660c <__assert_fail@plt+0x512c>
   16600:	str	r1, [r0, #40]	; 0x28
   16604:	str	r2, [r0, #44]	; 0x2c
   16608:	bx	lr
   1660c:	push	{r4, lr}
   16610:	bl	114bc <abort@plt>
   16614:	andeq	fp, r2, r0, lsr r6
   16618:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1661c:	sub	sp, sp, #24
   16620:	ldr	ip, [pc, #108]	; 16694 <__assert_fail@plt+0x51b4>
   16624:	ldr	r4, [sp, #56]	; 0x38
   16628:	mov	r9, r2
   1662c:	cmp	r4, #0
   16630:	moveq	r4, ip
   16634:	mov	sl, r3
   16638:	mov	r7, r0
   1663c:	mov	r8, r1
   16640:	bl	1139c <__errno_location@plt>
   16644:	ldr	r3, [r4, #44]	; 0x2c
   16648:	mov	r1, r8
   1664c:	ldr	r6, [r0]
   16650:	str	r3, [sp, #16]
   16654:	ldr	r2, [r4, #40]	; 0x28
   16658:	add	r3, r4, #8
   1665c:	str	r3, [sp, #8]
   16660:	str	r2, [sp, #12]
   16664:	ldr	r2, [r4, #4]
   16668:	mov	r5, r0
   1666c:	str	r2, [sp, #4]
   16670:	ldr	ip, [r4]
   16674:	mov	r3, sl
   16678:	mov	r2, r9
   1667c:	mov	r0, r7
   16680:	str	ip, [sp]
   16684:	bl	14e44 <__assert_fail@plt+0x3964>
   16688:	str	r6, [r5]
   1668c:	add	sp, sp, #24
   16690:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16694:	andeq	fp, r2, r0, lsr r6
   16698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1669c:	cmp	r3, #0
   166a0:	sub	sp, sp, #44	; 0x2c
   166a4:	ldr	r4, [pc, #192]	; 1676c <__assert_fail@plt+0x528c>
   166a8:	mov	r6, r2
   166ac:	movne	r4, r3
   166b0:	mov	r9, r1
   166b4:	mov	r8, r0
   166b8:	bl	1139c <__errno_location@plt>
   166bc:	ldr	r3, [r4, #44]	; 0x2c
   166c0:	ldr	r5, [r4, #4]
   166c4:	add	sl, r4, #8
   166c8:	cmp	r6, #0
   166cc:	orreq	r5, r5, #1
   166d0:	mov	r1, #0
   166d4:	ldr	r2, [r0]
   166d8:	str	r3, [sp, #16]
   166dc:	ldr	r3, [r4, #40]	; 0x28
   166e0:	stmib	sp, {r5, sl}
   166e4:	str	r3, [sp, #12]
   166e8:	ldr	r3, [r4]
   166ec:	mov	r7, r0
   166f0:	str	r2, [sp, #28]
   166f4:	str	r3, [sp]
   166f8:	mov	r2, r8
   166fc:	mov	r3, r9
   16700:	mov	r0, r1
   16704:	bl	14e44 <__assert_fail@plt+0x3964>
   16708:	add	r1, r0, #1
   1670c:	mov	fp, r0
   16710:	mov	r0, r1
   16714:	str	r1, [sp, #36]	; 0x24
   16718:	bl	173ec <__assert_fail@plt+0x5f0c>
   1671c:	ldr	r3, [r4, #44]	; 0x2c
   16720:	mov	r2, r8
   16724:	str	r3, [sp, #16]
   16728:	ldr	r3, [r4, #40]	; 0x28
   1672c:	str	r5, [sp, #4]
   16730:	str	r3, [sp, #12]
   16734:	str	sl, [sp, #8]
   16738:	ldr	ip, [r4]
   1673c:	ldr	r1, [sp, #36]	; 0x24
   16740:	mov	r3, r9
   16744:	str	ip, [sp]
   16748:	str	r0, [sp, #32]
   1674c:	bl	14e44 <__assert_fail@plt+0x3964>
   16750:	ldr	r2, [sp, #28]
   16754:	cmp	r6, #0
   16758:	str	r2, [r7]
   1675c:	ldr	r0, [sp, #32]
   16760:	strne	fp, [r6]
   16764:	add	sp, sp, #44	; 0x2c
   16768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1676c:	andeq	fp, r2, r0, lsr r6
   16770:	mov	r3, r2
   16774:	mov	r2, #0
   16778:	b	16698 <__assert_fail@plt+0x51b8>
   1677c:	push	{r4, r5, r6, r7, r8, lr}
   16780:	ldr	r6, [pc, #116]	; 167fc <__assert_fail@plt+0x531c>
   16784:	ldr	r3, [r6, #4]
   16788:	ldr	r7, [r6]
   1678c:	cmp	r3, #1
   16790:	movgt	r5, r7
   16794:	movgt	r4, #1
   16798:	ble	167b8 <__assert_fail@plt+0x52d8>
   1679c:	ldr	r0, [r5, #12]
   167a0:	bl	14a70 <__assert_fail@plt+0x3590>
   167a4:	ldr	r3, [r6, #4]
   167a8:	add	r4, r4, #1
   167ac:	cmp	r3, r4
   167b0:	add	r5, r5, #8
   167b4:	bgt	1679c <__assert_fail@plt+0x52bc>
   167b8:	ldr	r0, [r7, #4]
   167bc:	ldr	r4, [pc, #60]	; 16800 <__assert_fail@plt+0x5320>
   167c0:	cmp	r0, r4
   167c4:	beq	167d8 <__assert_fail@plt+0x52f8>
   167c8:	bl	14a70 <__assert_fail@plt+0x3590>
   167cc:	mov	r3, #256	; 0x100
   167d0:	str	r4, [r6, #12]
   167d4:	str	r3, [r6, #8]
   167d8:	ldr	r4, [pc, #36]	; 16804 <__assert_fail@plt+0x5324>
   167dc:	cmp	r7, r4
   167e0:	beq	167f0 <__assert_fail@plt+0x5310>
   167e4:	mov	r0, r7
   167e8:	bl	14a70 <__assert_fail@plt+0x3590>
   167ec:	str	r4, [r6]
   167f0:	mov	r3, #1
   167f4:	str	r3, [r6, #4]
   167f8:	pop	{r4, r5, r6, r7, r8, pc}
   167fc:	andeq	fp, r2, ip, ror #2
   16800:	andeq	fp, r2, r0, lsr r5
   16804:	andeq	fp, r2, r4, ror r1
   16808:	ldr	r3, [pc, #4]	; 16814 <__assert_fail@plt+0x5334>
   1680c:	mvn	r2, #0
   16810:	b	16358 <__assert_fail@plt+0x4e78>
   16814:	andeq	fp, r2, r0, lsr r6
   16818:	ldr	r3, [pc]	; 16820 <__assert_fail@plt+0x5340>
   1681c:	b	16358 <__assert_fail@plt+0x4e78>
   16820:	andeq	fp, r2, r0, lsr r6
   16824:	mov	r1, r0
   16828:	ldr	r3, [pc, #8]	; 16838 <__assert_fail@plt+0x5358>
   1682c:	mvn	r2, #0
   16830:	mov	r0, #0
   16834:	b	16358 <__assert_fail@plt+0x4e78>
   16838:	andeq	fp, r2, r0, lsr r6
   1683c:	mov	r2, r1
   16840:	ldr	r3, [pc, #8]	; 16850 <__assert_fail@plt+0x5370>
   16844:	mov	r1, r0
   16848:	mov	r0, #0
   1684c:	b	16358 <__assert_fail@plt+0x4e78>
   16850:	andeq	fp, r2, r0, lsr r6
   16854:	push	{r4, r5, lr}
   16858:	sub	sp, sp, #52	; 0x34
   1685c:	mov	r5, r2
   16860:	mov	r4, r0
   16864:	mov	r0, sp
   16868:	bl	14cf4 <__assert_fail@plt+0x3814>
   1686c:	mov	r3, sp
   16870:	mov	r1, r5
   16874:	mov	r0, r4
   16878:	mvn	r2, #0
   1687c:	bl	16358 <__assert_fail@plt+0x4e78>
   16880:	add	sp, sp, #52	; 0x34
   16884:	pop	{r4, r5, pc}
   16888:	push	{r4, r5, r6, lr}
   1688c:	sub	sp, sp, #48	; 0x30
   16890:	mov	r5, r2
   16894:	mov	r6, r3
   16898:	mov	r4, r0
   1689c:	mov	r0, sp
   168a0:	bl	14cf4 <__assert_fail@plt+0x3814>
   168a4:	mov	r3, sp
   168a8:	mov	r2, r6
   168ac:	mov	r1, r5
   168b0:	mov	r0, r4
   168b4:	bl	16358 <__assert_fail@plt+0x4e78>
   168b8:	add	sp, sp, #48	; 0x30
   168bc:	pop	{r4, r5, r6, pc}
   168c0:	mov	r2, r1
   168c4:	mov	r1, r0
   168c8:	mov	r0, #0
   168cc:	b	16854 <__assert_fail@plt+0x5374>
   168d0:	mov	r3, r2
   168d4:	mov	r2, r1
   168d8:	mov	r1, r0
   168dc:	mov	r0, #0
   168e0:	b	16888 <__assert_fail@plt+0x53a8>
   168e4:	push	{r4, r5, r6, r7, r8, lr}
   168e8:	mov	r7, r0
   168ec:	ldr	lr, [pc, #100]	; 16958 <__assert_fail@plt+0x5478>
   168f0:	mov	r8, r1
   168f4:	mov	r4, r2
   168f8:	ldm	lr!, {r0, r1, r2, r3}
   168fc:	sub	sp, sp, #48	; 0x30
   16900:	mov	ip, sp
   16904:	lsr	r5, r4, #5
   16908:	stmia	ip!, {r0, r1, r2, r3}
   1690c:	add	r6, sp, #8
   16910:	ldm	lr!, {r0, r1, r2, r3}
   16914:	and	r4, r4, #31
   16918:	stmia	ip!, {r0, r1, r2, r3}
   1691c:	ldm	lr, {r0, r1, r2, r3}
   16920:	stm	ip, {r0, r1, r2, r3}
   16924:	mov	r2, r8
   16928:	ldr	lr, [r6, r5, lsl #2]
   1692c:	mov	r1, r7
   16930:	mov	r3, sp
   16934:	lsr	ip, lr, r4
   16938:	eor	ip, ip, #1
   1693c:	and	ip, ip, #1
   16940:	mov	r0, #0
   16944:	eor	r4, lr, ip, lsl r4
   16948:	str	r4, [r6, r5, lsl #2]
   1694c:	bl	16358 <__assert_fail@plt+0x4e78>
   16950:	add	sp, sp, #48	; 0x30
   16954:	pop	{r4, r5, r6, r7, r8, pc}
   16958:	andeq	fp, r2, r0, lsr r6
   1695c:	mov	r2, r1
   16960:	mvn	r1, #0
   16964:	b	168e4 <__assert_fail@plt+0x5404>
   16968:	mov	r2, #58	; 0x3a
   1696c:	mvn	r1, #0
   16970:	b	168e4 <__assert_fail@plt+0x5404>
   16974:	mov	r2, #58	; 0x3a
   16978:	b	168e4 <__assert_fail@plt+0x5404>
   1697c:	push	{r4, r5, r6, r7, lr}
   16980:	sub	sp, sp, #100	; 0x64
   16984:	mov	r6, r0
   16988:	mov	r0, sp
   1698c:	mov	r7, r2
   16990:	bl	14cf4 <__assert_fail@plt+0x3814>
   16994:	mov	ip, sp
   16998:	add	lr, sp, #48	; 0x30
   1699c:	ldm	ip!, {r0, r1, r2, r3}
   169a0:	stmia	lr!, {r0, r1, r2, r3}
   169a4:	ldm	ip!, {r0, r1, r2, r3}
   169a8:	ldr	r5, [sp, #60]	; 0x3c
   169ac:	stmia	lr!, {r0, r1, r2, r3}
   169b0:	mvn	r4, r5
   169b4:	ldm	ip, {r0, r1, r2, r3}
   169b8:	and	ip, r4, #67108864	; 0x4000000
   169bc:	eor	ip, ip, r5
   169c0:	str	ip, [sp, #60]	; 0x3c
   169c4:	stm	lr, {r0, r1, r2, r3}
   169c8:	mov	r1, r7
   169cc:	mov	r0, r6
   169d0:	add	r3, sp, #48	; 0x30
   169d4:	mvn	r2, #0
   169d8:	bl	16358 <__assert_fail@plt+0x4e78>
   169dc:	add	sp, sp, #100	; 0x64
   169e0:	pop	{r4, r5, r6, r7, pc}
   169e4:	push	{r4, r5, r6, r7, r8, lr}
   169e8:	mov	r5, r1
   169ec:	ldr	lr, [pc, #100]	; 16a58 <__assert_fail@plt+0x5578>
   169f0:	mov	r4, r2
   169f4:	mov	r7, r0
   169f8:	mov	r8, r3
   169fc:	ldm	lr!, {r0, r1, r2, r3}
   16a00:	sub	sp, sp, #48	; 0x30
   16a04:	mov	ip, sp
   16a08:	mov	r6, #10
   16a0c:	stmia	ip!, {r0, r1, r2, r3}
   16a10:	cmp	r4, #0
   16a14:	cmpne	r5, #0
   16a18:	ldm	lr!, {r0, r1, r2, r3}
   16a1c:	str	r6, [sp]
   16a20:	stmia	ip!, {r0, r1, r2, r3}
   16a24:	ldm	lr, {r0, r1, r2, r3}
   16a28:	stm	ip, {r0, r1, r2, r3}
   16a2c:	beq	16a54 <__assert_fail@plt+0x5574>
   16a30:	mov	r3, sp
   16a34:	mov	r1, r8
   16a38:	mov	r0, r7
   16a3c:	ldr	r2, [sp, #72]	; 0x48
   16a40:	str	r5, [sp, #40]	; 0x28
   16a44:	str	r4, [sp, #44]	; 0x2c
   16a48:	bl	16358 <__assert_fail@plt+0x4e78>
   16a4c:	add	sp, sp, #48	; 0x30
   16a50:	pop	{r4, r5, r6, r7, r8, pc}
   16a54:	bl	114bc <abort@plt>
   16a58:	andeq	fp, r2, r0, lsr r6
   16a5c:	push	{lr}		; (str lr, [sp, #-4]!)
   16a60:	sub	sp, sp, #12
   16a64:	mvn	ip, #0
   16a68:	str	ip, [sp]
   16a6c:	bl	169e4 <__assert_fail@plt+0x5504>
   16a70:	add	sp, sp, #12
   16a74:	pop	{pc}		; (ldr pc, [sp], #4)
   16a78:	push	{lr}		; (str lr, [sp, #-4]!)
   16a7c:	sub	sp, sp, #12
   16a80:	mvn	ip, #0
   16a84:	mov	r3, r2
   16a88:	str	ip, [sp]
   16a8c:	mov	r2, r1
   16a90:	mov	r1, r0
   16a94:	mov	r0, #0
   16a98:	bl	169e4 <__assert_fail@plt+0x5504>
   16a9c:	add	sp, sp, #12
   16aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   16aa4:	push	{lr}		; (str lr, [sp, #-4]!)
   16aa8:	sub	sp, sp, #12
   16aac:	str	r3, [sp]
   16ab0:	mov	r3, r2
   16ab4:	mov	r2, r1
   16ab8:	mov	r1, r0
   16abc:	mov	r0, #0
   16ac0:	bl	169e4 <__assert_fail@plt+0x5504>
   16ac4:	add	sp, sp, #12
   16ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   16acc:	ldr	r3, [pc]	; 16ad4 <__assert_fail@plt+0x55f4>
   16ad0:	b	16358 <__assert_fail@plt+0x4e78>
   16ad4:	andeq	fp, r2, ip, ror r1
   16ad8:	mov	r2, r1
   16adc:	ldr	r3, [pc, #8]	; 16aec <__assert_fail@plt+0x560c>
   16ae0:	mov	r1, r0
   16ae4:	mov	r0, #0
   16ae8:	b	16358 <__assert_fail@plt+0x4e78>
   16aec:	andeq	fp, r2, ip, ror r1
   16af0:	ldr	r3, [pc, #4]	; 16afc <__assert_fail@plt+0x561c>
   16af4:	mvn	r2, #0
   16af8:	b	16358 <__assert_fail@plt+0x4e78>
   16afc:	andeq	fp, r2, ip, ror r1
   16b00:	mov	r1, r0
   16b04:	ldr	r3, [pc, #8]	; 16b14 <__assert_fail@plt+0x5634>
   16b08:	mvn	r2, #0
   16b0c:	mov	r0, #0
   16b10:	b	16358 <__assert_fail@plt+0x4e78>
   16b14:	andeq	fp, r2, ip, ror r1
   16b18:	push	{r4, r5, r6, r7, r8, lr}
   16b1c:	mov	r8, r0
   16b20:	ldr	r5, [pc, #84]	; 16b7c <__assert_fail@plt+0x569c>
   16b24:	mov	r7, r1
   16b28:	mov	r4, r2
   16b2c:	mov	r2, r4
   16b30:	mov	r1, r7
   16b34:	mov	r0, r8
   16b38:	bl	11180 <read@plt>
   16b3c:	subs	r6, r0, #0
   16b40:	bge	16b74 <__assert_fail@plt+0x5694>
   16b44:	bl	1139c <__errno_location@plt>
   16b48:	ldr	r3, [r0]
   16b4c:	cmp	r3, #4
   16b50:	beq	16b2c <__assert_fail@plt+0x564c>
   16b54:	cmp	r4, r5
   16b58:	movls	r2, #0
   16b5c:	movhi	r2, #1
   16b60:	cmp	r3, #22
   16b64:	movne	r2, #0
   16b68:	cmp	r2, #0
   16b6c:	mov	r4, r5
   16b70:	bne	16b2c <__assert_fail@plt+0x564c>
   16b74:	mov	r0, r6
   16b78:	pop	{r4, r5, r6, r7, r8, pc}
   16b7c:	svcvc	0x00f00000	; IMB
   16b80:	push	{r4, r5, r6, r7, r8, lr}
   16b84:	mov	r8, r0
   16b88:	ldr	r5, [pc, #84]	; 16be4 <__assert_fail@plt+0x5704>
   16b8c:	mov	r7, r1
   16b90:	mov	r4, r2
   16b94:	mov	r2, r4
   16b98:	mov	r1, r7
   16b9c:	mov	r0, r8
   16ba0:	bl	113d8 <write@plt>
   16ba4:	subs	r6, r0, #0
   16ba8:	bge	16bdc <__assert_fail@plt+0x56fc>
   16bac:	bl	1139c <__errno_location@plt>
   16bb0:	ldr	r3, [r0]
   16bb4:	cmp	r3, #4
   16bb8:	beq	16b94 <__assert_fail@plt+0x56b4>
   16bbc:	cmp	r4, r5
   16bc0:	sub	r3, r3, #22
   16bc4:	clz	r3, r3
   16bc8:	lsr	r3, r3, #5
   16bcc:	movls	r3, #0
   16bd0:	cmp	r3, #0
   16bd4:	mov	r4, r5
   16bd8:	bne	16b94 <__assert_fail@plt+0x56b4>
   16bdc:	mov	r0, r6
   16be0:	pop	{r4, r5, r6, r7, r8, pc}
   16be4:	svcvc	0x00f00000	; IMB
   16be8:	push	{r4, r5, r6, r7, lr}
   16bec:	mov	r7, r1
   16bf0:	ldrb	r3, [r0]
   16bf4:	sub	sp, sp, #12
   16bf8:	sub	r3, r3, #48	; 0x30
   16bfc:	cmp	r3, #9
   16c00:	bls	16c54 <__assert_fail@plt+0x5774>
   16c04:	mov	r6, r0
   16c08:	ldr	r5, [pc, #324]	; 16d54 <__assert_fail@plt+0x5874>
   16c0c:	mov	r4, #0
   16c10:	b	16c20 <__assert_fail@plt+0x5740>
   16c14:	add	r4, r4, #1
   16c18:	cmp	r4, #35	; 0x23
   16c1c:	beq	16c84 <__assert_fail@plt+0x57a4>
   16c20:	mov	r0, r5
   16c24:	mov	r1, r6
   16c28:	bl	11168 <strcmp@plt>
   16c2c:	add	r5, r5, #12
   16c30:	cmp	r0, #0
   16c34:	bne	16c14 <__assert_fail@plt+0x5734>
   16c38:	ldr	r3, [pc, #280]	; 16d58 <__assert_fail@plt+0x5878>
   16c3c:	add	r4, r4, r4, lsl #1
   16c40:	ldr	r0, [r3, r4, lsl #2]
   16c44:	str	r0, [r7]
   16c48:	asr	r0, r0, #31
   16c4c:	add	sp, sp, #12
   16c50:	pop	{r4, r5, r6, r7, pc}
   16c54:	mov	r2, #10
   16c58:	add	r1, sp, #4
   16c5c:	bl	11174 <strtol@plt>
   16c60:	ldr	r3, [sp, #4]
   16c64:	ldrb	r3, [r3]
   16c68:	cmp	r0, #64	; 0x40
   16c6c:	cmple	r3, #0
   16c70:	beq	16c44 <__assert_fail@plt+0x5764>
   16c74:	mvn	r3, #0
   16c78:	mov	r0, r3
   16c7c:	str	r3, [r7]
   16c80:	b	16c4c <__assert_fail@plt+0x576c>
   16c84:	bl	114a4 <__libc_current_sigrtmin@plt>
   16c88:	mov	r5, r0
   16c8c:	bl	11360 <__libc_current_sigrtmax@plt>
   16c90:	cmp	r5, #0
   16c94:	mov	r4, r0
   16c98:	ble	16cb4 <__assert_fail@plt+0x57d4>
   16c9c:	mov	r2, #5
   16ca0:	ldr	r1, [pc, #180]	; 16d5c <__assert_fail@plt+0x587c>
   16ca4:	mov	r0, r6
   16ca8:	bl	114b0 <strncmp@plt>
   16cac:	cmp	r0, #0
   16cb0:	beq	16d1c <__assert_fail@plt+0x583c>
   16cb4:	cmp	r4, #0
   16cb8:	ble	16c74 <__assert_fail@plt+0x5794>
   16cbc:	mov	r2, #5
   16cc0:	ldr	r1, [pc, #152]	; 16d60 <__assert_fail@plt+0x5880>
   16cc4:	mov	r0, r6
   16cc8:	bl	114b0 <strncmp@plt>
   16ccc:	cmp	r0, #0
   16cd0:	bne	16c74 <__assert_fail@plt+0x5794>
   16cd4:	add	r0, r6, #5
   16cd8:	mov	r2, #10
   16cdc:	add	r1, sp, #4
   16ce0:	bl	11174 <strtol@plt>
   16ce4:	ldr	r3, [sp, #4]
   16ce8:	ldrb	r3, [r3]
   16cec:	cmp	r3, #0
   16cf0:	bne	16c74 <__assert_fail@plt+0x5794>
   16cf4:	sub	r5, r5, r4
   16cf8:	cmp	r0, r5
   16cfc:	movlt	r5, #0
   16d00:	movge	r5, #1
   16d04:	cmp	r0, #0
   16d08:	movgt	r5, #0
   16d0c:	cmp	r5, #0
   16d10:	beq	16c74 <__assert_fail@plt+0x5794>
   16d14:	add	r0, r4, r0
   16d18:	b	16c44 <__assert_fail@plt+0x5764>
   16d1c:	add	r0, r6, #5
   16d20:	mov	r2, #10
   16d24:	add	r1, sp, #4
   16d28:	bl	11174 <strtol@plt>
   16d2c:	ldr	r3, [sp, #4]
   16d30:	ldrb	r3, [r3]
   16d34:	cmp	r0, #0
   16d38:	cmpge	r3, #0
   16d3c:	bne	16c74 <__assert_fail@plt+0x5794>
   16d40:	sub	r4, r4, r5
   16d44:	cmp	r0, r4
   16d48:	bgt	16c74 <__assert_fail@plt+0x5794>
   16d4c:	add	r0, r5, r0
   16d50:	b	16c44 <__assert_fail@plt+0x5764>
   16d54:			; <UNDEFINED> instruction: 0x0002b1b0
   16d58:	andeq	fp, r2, ip, lsr #3
   16d5c:	andeq	r9, r1, ip, lsl #31
   16d60:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   16d64:	mov	r3, #0
   16d68:	push	{r4, r5, r6, lr}
   16d6c:	mov	r2, r3
   16d70:	sub	sp, sp, #8
   16d74:	ldr	lr, [pc, #200]	; 16e44 <__assert_fail@plt+0x5964>
   16d78:	mov	r4, r0
   16d7c:	mov	r5, r1
   16d80:	b	16d90 <__assert_fail@plt+0x58b0>
   16d84:	add	r2, r2, #1
   16d88:	cmp	r2, #35	; 0x23
   16d8c:	beq	16dc0 <__assert_fail@plt+0x58e0>
   16d90:	ldr	ip, [lr, r3]
   16d94:	add	r3, r3, #12
   16d98:	cmp	ip, r4
   16d9c:	bne	16d84 <__assert_fail@plt+0x58a4>
   16da0:	add	r2, r2, r2, lsl #1
   16da4:	mov	r0, r5
   16da8:	add	r2, lr, r2, lsl #2
   16dac:	add	r1, r2, #4
   16db0:	bl	112ac <strcpy@plt>
   16db4:	mov	r0, #0
   16db8:	add	sp, sp, #8
   16dbc:	pop	{r4, r5, r6, pc}
   16dc0:	bl	114a4 <__libc_current_sigrtmin@plt>
   16dc4:	mov	r6, r0
   16dc8:	bl	11360 <__libc_current_sigrtmax@plt>
   16dcc:	cmp	r4, r0
   16dd0:	movle	r3, #0
   16dd4:	movgt	r3, #1
   16dd8:	cmp	r4, r6
   16ddc:	orrlt	r3, r3, #1
   16de0:	cmp	r3, #0
   16de4:	bne	16e3c <__assert_fail@plt+0x595c>
   16de8:	sub	r3, r0, r6
   16dec:	add	r3, r6, r3, asr #1
   16df0:	cmp	r4, r3
   16df4:	movgt	r6, r0
   16df8:	ldrle	r3, [pc, #72]	; 16e48 <__assert_fail@plt+0x5968>
   16dfc:	ldrgt	r3, [pc, #72]	; 16e4c <__assert_fail@plt+0x596c>
   16e00:	ldr	r0, [r3]
   16e04:	ldrh	r2, [r3, #4]
   16e08:	str	r0, [r5]
   16e0c:	subs	r0, r4, r6
   16e10:	strh	r2, [r5, #4]
   16e14:	beq	16db8 <__assert_fail@plt+0x58d8>
   16e18:	str	r0, [sp]
   16e1c:	ldr	r3, [pc, #44]	; 16e50 <__assert_fail@plt+0x5970>
   16e20:	add	r0, r5, #5
   16e24:	mvn	r2, #0
   16e28:	mov	r1, #1
   16e2c:	bl	113a8 <__sprintf_chk@plt>
   16e30:	mov	r0, #0
   16e34:	add	sp, sp, #8
   16e38:	pop	{r4, r5, r6, pc}
   16e3c:	mvn	r0, #0
   16e40:	b	16db8 <__assert_fail@plt+0x58d8>
   16e44:	andeq	fp, r2, ip, lsr #3
   16e48:	andeq	r9, r1, ip, lsl #31
   16e4c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   16e50:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16e54:	cmp	r0, #2
   16e58:	push	{r4, r5, r6, r7, r8, lr}
   16e5c:	mov	r4, r0
   16e60:	bhi	16e88 <__assert_fail@plt+0x59a8>
   16e64:	bl	182f8 <__assert_fail@plt+0x6e18>
   16e68:	mov	r7, r0
   16e6c:	bl	1139c <__errno_location@plt>
   16e70:	mov	r5, r0
   16e74:	mov	r0, r4
   16e78:	ldr	r6, [r5]
   16e7c:	mov	r4, r7
   16e80:	bl	114c8 <close@plt>
   16e84:	str	r6, [r5]
   16e88:	mov	r0, r4
   16e8c:	pop	{r4, r5, r6, r7, r8, pc}
   16e90:	push	{r4, r5, r6, lr}
   16e94:	sub	sp, sp, #32
   16e98:	cmp	r1, #0
   16e9c:	mov	r4, r0
   16ea0:	ldr	r5, [sp, #48]	; 0x30
   16ea4:	ldr	r6, [sp, #52]	; 0x34
   16ea8:	beq	171c0 <__assert_fail@plt+0x5ce0>
   16eac:	stm	sp, {r2, r3}
   16eb0:	mov	r3, r1
   16eb4:	ldr	r2, [pc, #808]	; 171e4 <__assert_fail@plt+0x5d04>
   16eb8:	mov	r1, #1
   16ebc:	bl	113f0 <__fprintf_chk@plt>
   16ec0:	mov	r2, #5
   16ec4:	ldr	r1, [pc, #796]	; 171e8 <__assert_fail@plt+0x5d08>
   16ec8:	mov	r0, #0
   16ecc:	bl	1121c <dcgettext@plt>
   16ed0:	ldr	r3, [pc, #788]	; 171ec <__assert_fail@plt+0x5d0c>
   16ed4:	ldr	r2, [pc, #788]	; 171f0 <__assert_fail@plt+0x5d10>
   16ed8:	str	r3, [sp]
   16edc:	mov	r1, #1
   16ee0:	mov	r3, r0
   16ee4:	mov	r0, r4
   16ee8:	bl	113f0 <__fprintf_chk@plt>
   16eec:	mov	r1, r4
   16ef0:	mov	r0, #10
   16ef4:	bl	11210 <fputc_unlocked@plt>
   16ef8:	mov	r2, #5
   16efc:	ldr	r1, [pc, #752]	; 171f4 <__assert_fail@plt+0x5d14>
   16f00:	mov	r0, #0
   16f04:	bl	1121c <dcgettext@plt>
   16f08:	mov	r1, #1
   16f0c:	ldr	r3, [pc, #740]	; 171f8 <__assert_fail@plt+0x5d18>
   16f10:	mov	r2, r0
   16f14:	mov	r0, r4
   16f18:	bl	113f0 <__fprintf_chk@plt>
   16f1c:	mov	r1, r4
   16f20:	mov	r0, #10
   16f24:	bl	11210 <fputc_unlocked@plt>
   16f28:	cmp	r6, #9
   16f2c:	ldrls	pc, [pc, r6, lsl #2]
   16f30:	b	171d8 <__assert_fail@plt+0x5cf8>
   16f34:			; <UNDEFINED> instruction: 0x00016fb8
   16f38:	andeq	r6, r1, r0, asr #31
   16f3c:	andeq	r6, r1, ip, ror #31
   16f40:	andeq	r7, r1, r0, lsr #32
   16f44:	andeq	r7, r1, ip, asr r0
   16f48:	muleq	r1, r8, r0
   16f4c:	ldrdeq	r7, [r1], -r4
   16f50:	andeq	r7, r1, r8, lsl r1
   16f54:	andeq	r7, r1, r8, ror #2
   16f58:	andeq	r6, r1, ip, asr pc
   16f5c:	ldr	r1, [pc, #664]	; 171fc <__assert_fail@plt+0x5d1c>
   16f60:	mov	r2, #5
   16f64:	mov	r0, #0
   16f68:	bl	1121c <dcgettext@plt>
   16f6c:	ldr	ip, [r5, #32]
   16f70:	ldr	r1, [r5, #28]
   16f74:	ldr	r2, [r5, #24]
   16f78:	ldr	r3, [r5]
   16f7c:	ldr	r6, [r5, #20]
   16f80:	str	ip, [sp, #28]
   16f84:	ldr	lr, [r5, #16]
   16f88:	str	r1, [sp, #24]
   16f8c:	ldr	ip, [r5, #12]
   16f90:	str	r2, [sp, #20]
   16f94:	ldr	r1, [r5, #8]
   16f98:	ldr	r2, [r5, #4]
   16f9c:	str	r6, [sp, #16]
   16fa0:	stmib	sp, {r1, ip, lr}
   16fa4:	mov	r1, #1
   16fa8:	str	r2, [sp]
   16fac:	mov	r2, r0
   16fb0:	mov	r0, r4
   16fb4:	bl	113f0 <__fprintf_chk@plt>
   16fb8:	add	sp, sp, #32
   16fbc:	pop	{r4, r5, r6, pc}
   16fc0:	mov	r2, #5
   16fc4:	ldr	r1, [pc, #564]	; 17200 <__assert_fail@plt+0x5d20>
   16fc8:	mov	r0, #0
   16fcc:	bl	1121c <dcgettext@plt>
   16fd0:	ldr	r3, [r5]
   16fd4:	mov	r1, #1
   16fd8:	mov	r2, r0
   16fdc:	mov	r0, r4
   16fe0:	add	sp, sp, #32
   16fe4:	pop	{r4, r5, r6, lr}
   16fe8:	b	113f0 <__fprintf_chk@plt>
   16fec:	mov	r2, #5
   16ff0:	ldr	r1, [pc, #524]	; 17204 <__assert_fail@plt+0x5d24>
   16ff4:	mov	r0, #0
   16ff8:	bl	1121c <dcgettext@plt>
   16ffc:	ldr	r2, [r5, #4]
   17000:	ldr	r3, [r5]
   17004:	mov	r1, #1
   17008:	str	r2, [sp, #48]	; 0x30
   1700c:	mov	r2, r0
   17010:	mov	r0, r4
   17014:	add	sp, sp, #32
   17018:	pop	{r4, r5, r6, lr}
   1701c:	b	113f0 <__fprintf_chk@plt>
   17020:	mov	r2, #5
   17024:	ldr	r1, [pc, #476]	; 17208 <__assert_fail@plt+0x5d28>
   17028:	mov	r0, #0
   1702c:	bl	1121c <dcgettext@plt>
   17030:	ldr	r1, [r5, #8]
   17034:	ldr	r2, [r5, #4]
   17038:	ldr	r3, [r5]
   1703c:	str	r1, [sp, #52]	; 0x34
   17040:	str	r2, [sp, #48]	; 0x30
   17044:	mov	r1, #1
   17048:	mov	r2, r0
   1704c:	mov	r0, r4
   17050:	add	sp, sp, #32
   17054:	pop	{r4, r5, r6, lr}
   17058:	b	113f0 <__fprintf_chk@plt>
   1705c:	mov	r2, #5
   17060:	ldr	r1, [pc, #420]	; 1720c <__assert_fail@plt+0x5d2c>
   17064:	mov	r0, #0
   17068:	bl	1121c <dcgettext@plt>
   1706c:	ldr	r1, [r5, #8]
   17070:	ldr	ip, [r5, #12]
   17074:	ldr	r2, [r5, #4]
   17078:	ldr	r3, [r5]
   1707c:	stmib	sp, {r1, ip}
   17080:	str	r2, [sp]
   17084:	mov	r1, #1
   17088:	mov	r2, r0
   1708c:	mov	r0, r4
   17090:	bl	113f0 <__fprintf_chk@plt>
   17094:	b	16fb8 <__assert_fail@plt+0x5ad8>
   17098:	mov	r2, #5
   1709c:	ldr	r1, [pc, #364]	; 17210 <__assert_fail@plt+0x5d30>
   170a0:	mov	r0, #0
   170a4:	bl	1121c <dcgettext@plt>
   170a8:	add	r1, r5, #8
   170ac:	ldr	r2, [r5, #4]
   170b0:	ldm	r1, {r1, ip, lr}
   170b4:	ldr	r3, [r5]
   170b8:	str	r2, [sp]
   170bc:	stmib	sp, {r1, ip, lr}
   170c0:	mov	r1, #1
   170c4:	mov	r2, r0
   170c8:	mov	r0, r4
   170cc:	bl	113f0 <__fprintf_chk@plt>
   170d0:	b	16fb8 <__assert_fail@plt+0x5ad8>
   170d4:	mov	r2, #5
   170d8:	ldr	r1, [pc, #308]	; 17214 <__assert_fail@plt+0x5d34>
   170dc:	mov	r0, #0
   170e0:	bl	1121c <dcgettext@plt>
   170e4:	add	r1, r5, #8
   170e8:	ldr	r2, [r5, #4]
   170ec:	ldm	r1, {r1, ip, lr}
   170f0:	ldr	r6, [r5, #20]
   170f4:	ldr	r3, [r5]
   170f8:	stmib	sp, {r1, ip, lr}
   170fc:	mov	r1, #1
   17100:	str	r2, [sp]
   17104:	str	r6, [sp, #16]
   17108:	mov	r2, r0
   1710c:	mov	r0, r4
   17110:	bl	113f0 <__fprintf_chk@plt>
   17114:	b	16fb8 <__assert_fail@plt+0x5ad8>
   17118:	mov	r2, #5
   1711c:	ldr	r1, [pc, #244]	; 17218 <__assert_fail@plt+0x5d38>
   17120:	mov	r0, #0
   17124:	bl	1121c <dcgettext@plt>
   17128:	ldr	r2, [r5, #24]
   1712c:	ldr	r3, [r5]
   17130:	ldr	r6, [r5, #20]
   17134:	ldr	lr, [r5, #16]
   17138:	ldr	ip, [r5, #12]
   1713c:	str	r2, [sp, #20]
   17140:	ldr	r1, [r5, #8]
   17144:	ldr	r2, [r5, #4]
   17148:	str	r6, [sp, #16]
   1714c:	stmib	sp, {r1, ip, lr}
   17150:	mov	r1, #1
   17154:	str	r2, [sp]
   17158:	mov	r2, r0
   1715c:	mov	r0, r4
   17160:	bl	113f0 <__fprintf_chk@plt>
   17164:	b	16fb8 <__assert_fail@plt+0x5ad8>
   17168:	mov	r2, #5
   1716c:	ldr	r1, [pc, #168]	; 1721c <__assert_fail@plt+0x5d3c>
   17170:	mov	r0, #0
   17174:	bl	1121c <dcgettext@plt>
   17178:	ldr	r1, [r5, #28]
   1717c:	ldr	r2, [r5, #24]
   17180:	ldr	r3, [r5]
   17184:	ldr	r6, [r5, #20]
   17188:	ldr	lr, [r5, #16]
   1718c:	str	r1, [sp, #24]
   17190:	ldr	ip, [r5, #12]
   17194:	str	r2, [sp, #20]
   17198:	ldr	r1, [r5, #8]
   1719c:	ldr	r2, [r5, #4]
   171a0:	str	r6, [sp, #16]
   171a4:	stmib	sp, {r1, ip, lr}
   171a8:	mov	r1, #1
   171ac:	str	r2, [sp]
   171b0:	mov	r2, r0
   171b4:	mov	r0, r4
   171b8:	bl	113f0 <__fprintf_chk@plt>
   171bc:	b	16fb8 <__assert_fail@plt+0x5ad8>
   171c0:	str	r3, [sp]
   171c4:	mov	r1, #1
   171c8:	mov	r3, r2
   171cc:	ldr	r2, [pc, #76]	; 17220 <__assert_fail@plt+0x5d40>
   171d0:	bl	113f0 <__fprintf_chk@plt>
   171d4:	b	16ec0 <__assert_fail@plt+0x59e0>
   171d8:	mov	r2, #5
   171dc:	ldr	r1, [pc, #64]	; 17224 <__assert_fail@plt+0x5d44>
   171e0:	b	16f64 <__assert_fail@plt+0x5a84>
   171e4:	andeq	r9, r1, r0, lsr #31
   171e8:			; <UNDEFINED> instruction: 0x00019fb4
   171ec:	andeq	r0, r0, r6, ror #15
   171f0:	andeq	sl, r1, ip, lsl #5
   171f4:			; <UNDEFINED> instruction: 0x00019fb8
   171f8:	andeq	sl, r1, r4, rrx
   171fc:	muleq	r1, r4, r1
   17200:	andeq	sl, r1, r8, lsl #1
   17204:	muleq	r1, r8, r0
   17208:	strheq	sl, [r1], -r0
   1720c:	andeq	sl, r1, ip, asr #1
   17210:	andeq	sl, r1, ip, ror #1
   17214:	andeq	sl, r1, r0, lsl r1
   17218:	andeq	sl, r1, r8, lsr r1
   1721c:	andeq	sl, r1, r4, ror #2
   17220:	andeq	r9, r1, ip, lsr #31
   17224:	andeq	sl, r1, r8, asr #3
   17228:	push	{r4, r5, lr}
   1722c:	sub	sp, sp, #12
   17230:	ldr	r5, [sp, #24]
   17234:	ldr	ip, [r5]
   17238:	cmp	ip, #0
   1723c:	beq	17258 <__assert_fail@plt+0x5d78>
   17240:	mov	lr, r5
   17244:	mov	ip, #0
   17248:	ldr	r4, [lr, #4]!
   1724c:	add	ip, ip, #1
   17250:	cmp	r4, #0
   17254:	bne	17248 <__assert_fail@plt+0x5d68>
   17258:	stm	sp, {r5, ip}
   1725c:	bl	16e90 <__assert_fail@plt+0x59b0>
   17260:	add	sp, sp, #12
   17264:	pop	{r4, r5, pc}
   17268:	push	{r4, r5, lr}
   1726c:	sub	sp, sp, #52	; 0x34
   17270:	add	r5, sp, #4
   17274:	ldr	r4, [sp, #64]	; 0x40
   17278:	mov	ip, #0
   1727c:	sub	r4, r4, #4
   17280:	ldr	lr, [r4, #4]!
   17284:	cmp	lr, #0
   17288:	str	lr, [r5, #4]!
   1728c:	beq	1729c <__assert_fail@plt+0x5dbc>
   17290:	add	ip, ip, #1
   17294:	cmp	ip, #10
   17298:	bne	17280 <__assert_fail@plt+0x5da0>
   1729c:	add	lr, sp, #8
   172a0:	str	ip, [sp, #4]
   172a4:	str	lr, [sp]
   172a8:	bl	16e90 <__assert_fail@plt+0x59b0>
   172ac:	add	sp, sp, #52	; 0x34
   172b0:	pop	{r4, r5, pc}
   172b4:	push	{r3}		; (str r3, [sp, #-4]!)
   172b8:	push	{r4, lr}
   172bc:	sub	sp, sp, #60	; 0x3c
   172c0:	add	lr, sp, #56	; 0x38
   172c4:	add	r3, sp, #72	; 0x48
   172c8:	str	r3, [lr, #-44]!	; 0xffffffd4
   172cc:	add	r4, sp, #68	; 0x44
   172d0:	mov	r3, #0
   172d4:	ldr	ip, [r4, #4]!
   172d8:	cmp	ip, #0
   172dc:	str	ip, [lr, #4]!
   172e0:	beq	172f0 <__assert_fail@plt+0x5e10>
   172e4:	add	r3, r3, #1
   172e8:	cmp	r3, #10
   172ec:	bne	172d4 <__assert_fail@plt+0x5df4>
   172f0:	add	ip, sp, #16
   172f4:	str	r3, [sp, #4]
   172f8:	str	ip, [sp]
   172fc:	ldr	r3, [sp, #68]	; 0x44
   17300:	bl	16e90 <__assert_fail@plt+0x59b0>
   17304:	add	sp, sp, #60	; 0x3c
   17308:	pop	{r4, lr}
   1730c:	add	sp, sp, #4
   17310:	bx	lr
   17314:	ldr	r3, [pc, #116]	; 17390 <__assert_fail@plt+0x5eb0>
   17318:	push	{r4, lr}
   1731c:	mov	r0, #10
   17320:	ldr	r1, [r3]
   17324:	bl	11210 <fputc_unlocked@plt>
   17328:	mov	r2, #5
   1732c:	ldr	r1, [pc, #96]	; 17394 <__assert_fail@plt+0x5eb4>
   17330:	mov	r0, #0
   17334:	bl	1121c <dcgettext@plt>
   17338:	ldr	r2, [pc, #88]	; 17398 <__assert_fail@plt+0x5eb8>
   1733c:	mov	r1, r0
   17340:	mov	r0, #1
   17344:	bl	113cc <__printf_chk@plt>
   17348:	mov	r2, #5
   1734c:	ldr	r1, [pc, #72]	; 1739c <__assert_fail@plt+0x5ebc>
   17350:	mov	r0, #0
   17354:	bl	1121c <dcgettext@plt>
   17358:	ldr	r3, [pc, #64]	; 173a0 <__assert_fail@plt+0x5ec0>
   1735c:	ldr	r2, [pc, #64]	; 173a4 <__assert_fail@plt+0x5ec4>
   17360:	mov	r1, r0
   17364:	mov	r0, #1
   17368:	bl	113cc <__printf_chk@plt>
   1736c:	mov	r2, #5
   17370:	ldr	r1, [pc, #48]	; 173a8 <__assert_fail@plt+0x5ec8>
   17374:	mov	r0, #0
   17378:	bl	1121c <dcgettext@plt>
   1737c:	ldr	r2, [pc, #40]	; 173ac <__assert_fail@plt+0x5ecc>
   17380:	pop	{r4, lr}
   17384:	mov	r1, r0
   17388:	mov	r0, #1
   1738c:	b	113cc <__printf_chk@plt>
   17390:	andeq	fp, r2, r4, ror #6
   17394:	andeq	sl, r1, r4, lsl #4
   17398:	andeq	sl, r1, r8, lsl r2
   1739c:	andeq	sl, r1, r0, lsr r2
   173a0:	muleq	r1, ip, r8
   173a4:	andeq	r9, r1, r4, asr #17
   173a8:	andeq	sl, r1, r4, asr #4
   173ac:	andeq	sl, r1, ip, ror #4
   173b0:	push	{r4, lr}
   173b4:	bl	11498 <aligned_alloc@plt>
   173b8:	cmp	r0, #0
   173bc:	popne	{r4, pc}
   173c0:	bl	1790c <__assert_fail@plt+0x642c>
   173c4:	push	{r4, lr}
   173c8:	bl	18120 <__assert_fail@plt+0x6c40>
   173cc:	cmp	r0, #0
   173d0:	popne	{r4, pc}
   173d4:	bl	1790c <__assert_fail@plt+0x642c>
   173d8:	push	{r4, lr}
   173dc:	bl	18120 <__assert_fail@plt+0x6c40>
   173e0:	cmp	r0, #0
   173e4:	popne	{r4, pc}
   173e8:	bl	1790c <__assert_fail@plt+0x642c>
   173ec:	push	{r4, lr}
   173f0:	bl	18120 <__assert_fail@plt+0x6c40>
   173f4:	cmp	r0, #0
   173f8:	popne	{r4, pc}
   173fc:	bl	1790c <__assert_fail@plt+0x642c>
   17400:	push	{r4, r5, r6, lr}
   17404:	mov	r5, r0
   17408:	mov	r4, r1
   1740c:	bl	1814c <__assert_fail@plt+0x6c6c>
   17410:	cmp	r0, #0
   17414:	popne	{r4, r5, r6, pc}
   17418:	adds	r4, r4, #0
   1741c:	movne	r4, #1
   17420:	cmp	r5, #0
   17424:	orreq	r4, r4, #1
   17428:	cmp	r4, #0
   1742c:	popeq	{r4, r5, r6, pc}
   17430:	bl	1790c <__assert_fail@plt+0x642c>
   17434:	push	{r4, lr}
   17438:	cmp	r1, #0
   1743c:	orreq	r1, r1, #1
   17440:	bl	1814c <__assert_fail@plt+0x6c6c>
   17444:	cmp	r0, #0
   17448:	popne	{r4, pc}
   1744c:	bl	1790c <__assert_fail@plt+0x642c>
   17450:	push	{r4, r5, r6, lr}
   17454:	mov	r6, r0
   17458:	mov	r5, r1
   1745c:	mov	r4, r2
   17460:	bl	182ac <__assert_fail@plt+0x6dcc>
   17464:	cmp	r0, #0
   17468:	popne	{r4, r5, r6, pc}
   1746c:	cmp	r6, #0
   17470:	beq	17480 <__assert_fail@plt+0x5fa0>
   17474:	cmp	r5, #0
   17478:	cmpne	r4, #0
   1747c:	popeq	{r4, r5, r6, pc}
   17480:	bl	1790c <__assert_fail@plt+0x642c>
   17484:	b	17450 <__assert_fail@plt+0x5f70>
   17488:	cmp	r2, #0
   1748c:	cmpne	r1, #0
   17490:	moveq	r2, #1
   17494:	moveq	r1, r2
   17498:	push	{r4, lr}
   1749c:	bl	182ac <__assert_fail@plt+0x6dcc>
   174a0:	cmp	r0, #0
   174a4:	popne	{r4, pc}
   174a8:	bl	1790c <__assert_fail@plt+0x642c>
   174ac:	mov	r2, r1
   174b0:	mov	r1, r0
   174b4:	mov	r0, #0
   174b8:	b	17450 <__assert_fail@plt+0x5f70>
   174bc:	mov	r2, r1
   174c0:	mov	r1, r0
   174c4:	mov	r0, #0
   174c8:	b	17488 <__assert_fail@plt+0x5fa8>
   174cc:	push	{r4, r5, r6, lr}
   174d0:	subs	r6, r0, #0
   174d4:	sub	sp, sp, #8
   174d8:	mov	r5, r1
   174dc:	ldr	r4, [r1]
   174e0:	beq	1751c <__assert_fail@plt+0x603c>
   174e4:	lsr	r1, r4, #1
   174e8:	add	r3, r1, #1
   174ec:	mvn	r3, r3
   174f0:	cmp	r4, r3
   174f4:	bhi	17518 <__assert_fail@plt+0x6038>
   174f8:	add	r4, r4, #1
   174fc:	add	r4, r4, r1
   17500:	mov	r0, r6
   17504:	mov	r1, r4
   17508:	bl	17450 <__assert_fail@plt+0x5f70>
   1750c:	str	r4, [r5]
   17510:	add	sp, sp, #8
   17514:	pop	{r4, r5, r6, pc}
   17518:	bl	1790c <__assert_fail@plt+0x642c>
   1751c:	cmp	r4, #0
   17520:	bne	17500 <__assert_fail@plt+0x6020>
   17524:	mov	r1, r2
   17528:	mov	r0, #64	; 0x40
   1752c:	str	r2, [sp, #4]
   17530:	bl	185cc <__assert_fail@plt+0x70ec>
   17534:	ldr	r2, [sp, #4]
   17538:	cmp	r0, #0
   1753c:	movne	r4, r0
   17540:	addeq	r4, r0, #1
   17544:	b	17500 <__assert_fail@plt+0x6020>
   17548:	mov	r2, #1
   1754c:	b	174cc <__assert_fail@plt+0x5fec>
   17550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17554:	sub	sp, sp, #12
   17558:	ldr	r6, [r1]
   1755c:	mov	sl, r1
   17560:	mov	r9, r0
   17564:	asrs	r4, r6, #1
   17568:	mov	r5, r2
   1756c:	mov	fp, r3
   17570:	ldr	r7, [sp, #48]	; 0x30
   17574:	bmi	176e0 <__assert_fail@plt+0x6200>
   17578:	mvn	r3, #-2147483648	; 0x80000000
   1757c:	sub	r3, r3, r4
   17580:	cmp	r6, r3
   17584:	movle	r3, #0
   17588:	movgt	r3, #1
   1758c:	mvn	r8, fp
   17590:	cmp	r3, #0
   17594:	addeq	r4, r4, r6
   17598:	mvnne	r4, #-2147483648	; 0x80000000
   1759c:	lsr	r8, r8, #31
   175a0:	cmp	fp, r4
   175a4:	movge	r3, #0
   175a8:	andlt	r3, r8, #1
   175ac:	cmp	r3, #0
   175b0:	beq	17698 <__assert_fail@plt+0x61b8>
   175b4:	cmp	r7, #0
   175b8:	blt	17768 <__assert_fail@plt+0x6288>
   175bc:	bne	17760 <__assert_fail@plt+0x6280>
   175c0:	mov	r2, #64	; 0x40
   175c4:	mov	r1, r7
   175c8:	mov	r0, r2
   175cc:	str	r2, [sp, #4]
   175d0:	bl	187d8 <__assert_fail@plt+0x72f8>
   175d4:	ldr	r2, [sp, #4]
   175d8:	mov	r1, r7
   175dc:	mov	r4, r0
   175e0:	mov	r0, r2
   175e4:	bl	189f8 <__assert_fail@plt+0x7518>
   175e8:	ldr	r2, [sp, #4]
   175ec:	sub	r1, r2, r1
   175f0:	cmp	r9, #0
   175f4:	sub	r3, r4, r6
   175f8:	streq	r9, [sl]
   175fc:	cmp	r3, r5
   17600:	bge	17684 <__assert_fail@plt+0x61a4>
   17604:	cmp	r5, #0
   17608:	blt	176f4 <__assert_fail@plt+0x6214>
   1760c:	cmp	r6, #0
   17610:	blt	17630 <__assert_fail@plt+0x6150>
   17614:	mvn	r3, #-2147483648	; 0x80000000
   17618:	sub	r3, r3, r5
   1761c:	cmp	r6, r3
   17620:	movle	r3, #0
   17624:	movgt	r3, #1
   17628:	cmp	r3, #0
   1762c:	bne	177f0 <__assert_fail@plt+0x6310>
   17630:	add	r5, r6, r5
   17634:	cmp	fp, r5
   17638:	movge	r8, #0
   1763c:	andlt	r8, r8, #1
   17640:	cmp	r8, #0
   17644:	mov	r4, r5
   17648:	bne	177f0 <__assert_fail@plt+0x6310>
   1764c:	cmp	r7, #0
   17650:	blt	17708 <__assert_fail@plt+0x6228>
   17654:	beq	17680 <__assert_fail@plt+0x61a0>
   17658:	cmp	r5, #0
   1765c:	blt	177b0 <__assert_fail@plt+0x62d0>
   17660:	mov	r1, r7
   17664:	mvn	r0, #-2147483648	; 0x80000000
   17668:	bl	187d8 <__assert_fail@plt+0x72f8>
   1766c:	cmp	r5, r0
   17670:	movle	r0, #0
   17674:	movgt	r0, #1
   17678:	cmp	r0, #0
   1767c:	bne	177f0 <__assert_fail@plt+0x6310>
   17680:	mul	r1, r5, r7
   17684:	mov	r0, r9
   17688:	bl	17400 <__assert_fail@plt+0x5f20>
   1768c:	str	r4, [sl]
   17690:	add	sp, sp, #12
   17694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17698:	cmp	r7, #0
   1769c:	blt	17734 <__assert_fail@plt+0x6254>
   176a0:	beq	175c0 <__assert_fail@plt+0x60e0>
   176a4:	cmp	r4, #0
   176a8:	blt	17770 <__assert_fail@plt+0x6290>
   176ac:	mov	r1, r7
   176b0:	mvn	r0, #-2147483648	; 0x80000000
   176b4:	bl	187d8 <__assert_fail@plt+0x72f8>
   176b8:	cmp	r0, r4
   176bc:	movge	r0, #0
   176c0:	movlt	r0, #1
   176c4:	cmp	r0, #0
   176c8:	mvnne	r2, #-2147483648	; 0x80000000
   176cc:	bne	175c4 <__assert_fail@plt+0x60e4>
   176d0:	mul	r1, r7, r4
   176d4:	cmp	r1, #63	; 0x3f
   176d8:	bgt	175f0 <__assert_fail@plt+0x6110>
   176dc:	b	175c0 <__assert_fail@plt+0x60e0>
   176e0:	rsb	r3, r4, #-2147483648	; 0x80000000
   176e4:	cmp	r6, r3
   176e8:	movge	r3, #0
   176ec:	movlt	r3, #1
   176f0:	b	1758c <__assert_fail@plt+0x60ac>
   176f4:	rsb	r3, r5, #-2147483648	; 0x80000000
   176f8:	cmp	r6, r3
   176fc:	movge	r3, #0
   17700:	movlt	r3, #1
   17704:	b	17628 <__assert_fail@plt+0x6148>
   17708:	cmp	r5, #0
   1770c:	blt	17794 <__assert_fail@plt+0x62b4>
   17710:	cmn	r7, #1
   17714:	beq	17680 <__assert_fail@plt+0x61a0>
   17718:	mov	r1, r7
   1771c:	mov	r0, #-2147483648	; 0x80000000
   17720:	bl	187d8 <__assert_fail@plt+0x72f8>
   17724:	cmp	r5, r0
   17728:	movle	r0, #0
   1772c:	movgt	r0, #1
   17730:	b	17678 <__assert_fail@plt+0x6198>
   17734:	cmp	r4, #0
   17738:	blt	177d4 <__assert_fail@plt+0x62f4>
   1773c:	cmn	r7, #1
   17740:	beq	176d0 <__assert_fail@plt+0x61f0>
   17744:	mov	r1, r7
   17748:	mov	r0, #-2147483648	; 0x80000000
   1774c:	bl	187d8 <__assert_fail@plt+0x72f8>
   17750:	cmp	r0, r4
   17754:	movge	r0, #0
   17758:	movlt	r0, #1
   1775c:	b	176c4 <__assert_fail@plt+0x61e4>
   17760:	mov	r4, fp
   17764:	b	176ac <__assert_fail@plt+0x61cc>
   17768:	mov	r4, fp
   1776c:	b	1773c <__assert_fail@plt+0x625c>
   17770:	cmn	r4, #1
   17774:	beq	176d0 <__assert_fail@plt+0x61f0>
   17778:	mov	r1, r4
   1777c:	mov	r0, #-2147483648	; 0x80000000
   17780:	bl	187d8 <__assert_fail@plt+0x72f8>
   17784:	cmp	r7, r0
   17788:	movle	r0, #0
   1778c:	movgt	r0, #1
   17790:	b	176c4 <__assert_fail@plt+0x61e4>
   17794:	mov	r1, r7
   17798:	mvn	r0, #-2147483648	; 0x80000000
   1779c:	bl	187d8 <__assert_fail@plt+0x72f8>
   177a0:	cmp	r5, r0
   177a4:	movge	r0, #0
   177a8:	movlt	r0, #1
   177ac:	b	17678 <__assert_fail@plt+0x6198>
   177b0:	cmn	r5, #1
   177b4:	beq	17680 <__assert_fail@plt+0x61a0>
   177b8:	mov	r1, r5
   177bc:	mov	r0, #-2147483648	; 0x80000000
   177c0:	bl	187d8 <__assert_fail@plt+0x72f8>
   177c4:	cmp	r7, r0
   177c8:	movle	r0, #0
   177cc:	movgt	r0, #1
   177d0:	b	17678 <__assert_fail@plt+0x6198>
   177d4:	mov	r1, r7
   177d8:	mvn	r0, #-2147483648	; 0x80000000
   177dc:	bl	187d8 <__assert_fail@plt+0x72f8>
   177e0:	cmp	r0, r4
   177e4:	movle	r0, #0
   177e8:	movgt	r0, #1
   177ec:	b	176c4 <__assert_fail@plt+0x61e4>
   177f0:	bl	1790c <__assert_fail@plt+0x642c>
   177f4:	push	{r4, lr}
   177f8:	mov	r1, #1
   177fc:	bl	180d8 <__assert_fail@plt+0x6bf8>
   17800:	cmp	r0, #0
   17804:	popne	{r4, pc}
   17808:	bl	1790c <__assert_fail@plt+0x642c>
   1780c:	push	{r4, lr}
   17810:	mov	r1, #1
   17814:	bl	180d8 <__assert_fail@plt+0x6bf8>
   17818:	cmp	r0, #0
   1781c:	popne	{r4, pc}
   17820:	bl	1790c <__assert_fail@plt+0x642c>
   17824:	push	{r4, lr}
   17828:	bl	180d8 <__assert_fail@plt+0x6bf8>
   1782c:	cmp	r0, #0
   17830:	popne	{r4, pc}
   17834:	bl	1790c <__assert_fail@plt+0x642c>
   17838:	push	{r4, lr}
   1783c:	bl	180d8 <__assert_fail@plt+0x6bf8>
   17840:	cmp	r0, #0
   17844:	popne	{r4, pc}
   17848:	bl	1790c <__assert_fail@plt+0x642c>
   1784c:	push	{r4, r5, r6, lr}
   17850:	mov	r6, r0
   17854:	mov	r0, r1
   17858:	mov	r4, r1
   1785c:	bl	18120 <__assert_fail@plt+0x6c40>
   17860:	subs	r5, r0, #0
   17864:	beq	1787c <__assert_fail@plt+0x639c>
   17868:	mov	r2, r4
   1786c:	mov	r1, r6
   17870:	bl	111c8 <memcpy@plt>
   17874:	mov	r0, r5
   17878:	pop	{r4, r5, r6, pc}
   1787c:	bl	1790c <__assert_fail@plt+0x642c>
   17880:	push	{r4, r5, r6, lr}
   17884:	mov	r6, r0
   17888:	mov	r0, r1
   1788c:	mov	r4, r1
   17890:	bl	18120 <__assert_fail@plt+0x6c40>
   17894:	subs	r5, r0, #0
   17898:	beq	178b0 <__assert_fail@plt+0x63d0>
   1789c:	mov	r2, r4
   178a0:	mov	r1, r6
   178a4:	bl	111c8 <memcpy@plt>
   178a8:	mov	r0, r5
   178ac:	pop	{r4, r5, r6, pc}
   178b0:	bl	1790c <__assert_fail@plt+0x642c>
   178b4:	push	{r4, r5, r6, lr}
   178b8:	mov	r6, r0
   178bc:	add	r0, r1, #1
   178c0:	mov	r4, r1
   178c4:	bl	18120 <__assert_fail@plt+0x6c40>
   178c8:	subs	r5, r0, #0
   178cc:	beq	178ec <__assert_fail@plt+0x640c>
   178d0:	mov	r3, #0
   178d4:	mov	r1, r6
   178d8:	strb	r3, [r5, r4]
   178dc:	mov	r2, r4
   178e0:	bl	111c8 <memcpy@plt>
   178e4:	mov	r0, r5
   178e8:	pop	{r4, r5, r6, pc}
   178ec:	bl	1790c <__assert_fail@plt+0x642c>
   178f0:	push	{r4, lr}
   178f4:	mov	r4, r0
   178f8:	bl	11354 <strlen@plt>
   178fc:	add	r1, r0, #1
   17900:	mov	r0, r4
   17904:	pop	{r4, lr}
   17908:	b	1784c <__assert_fail@plt+0x636c>
   1790c:	ldr	r3, [pc, #44]	; 17940 <__assert_fail@plt+0x6460>
   17910:	push	{r4, lr}
   17914:	mov	r2, #5
   17918:	ldr	r1, [pc, #36]	; 17944 <__assert_fail@plt+0x6464>
   1791c:	mov	r0, #0
   17920:	ldr	r4, [r3]
   17924:	bl	1121c <dcgettext@plt>
   17928:	ldr	r2, [pc, #24]	; 17948 <__assert_fail@plt+0x6468>
   1792c:	mov	r1, #0
   17930:	mov	r3, r0
   17934:	mov	r0, r4
   17938:	bl	112d0 <error@plt>
   1793c:	bl	114bc <abort@plt>
   17940:	andeq	fp, r2, r8, ror #2
   17944:			; <UNDEFINED> instruction: 0x0001a2bc
   17948:	andeq	r8, r1, ip, asr #31
   1794c:	push	{r4, r5, r6, r7, lr}
   17950:	sub	sp, sp, #20
   17954:	mov	r6, r2
   17958:	ldr	ip, [sp, #48]	; 0x30
   1795c:	mov	r2, r1
   17960:	mov	r7, r3
   17964:	str	ip, [sp]
   17968:	add	r3, sp, #8
   1796c:	mov	r1, #0
   17970:	mov	r5, r0
   17974:	ldr	r4, [sp, #56]	; 0x38
   17978:	bl	17b30 <__assert_fail@plt+0x6650>
   1797c:	cmp	r0, #0
   17980:	bne	17a04 <__assert_fail@plt+0x6524>
   17984:	ldrd	r0, [sp, #8]
   17988:	cmp	r1, r7
   1798c:	cmpeq	r0, r6
   17990:	ldrd	r6, [sp, #40]	; 0x28
   17994:	movcc	r3, #1
   17998:	movcs	r3, #0
   1799c:	cmp	r1, r7
   179a0:	cmpeq	r0, r6
   179a4:	orrhi	r3, r3, #1
   179a8:	cmp	r3, #0
   179ac:	beq	179fc <__assert_fail@plt+0x651c>
   179b0:	mov	r3, #0
   179b4:	mvn	r2, #-1073741824	; 0xc0000000
   179b8:	cmp	r1, r3
   179bc:	cmpeq	r0, r2
   179c0:	bhi	17a30 <__assert_fail@plt+0x6550>
   179c4:	bl	1139c <__errno_location@plt>
   179c8:	mov	r3, #34	; 0x22
   179cc:	mov	r6, r3
   179d0:	str	r3, [r0]
   179d4:	cmp	r4, #0
   179d8:	moveq	r4, #1
   179dc:	mov	r0, r5
   179e0:	bl	16b00 <__assert_fail@plt+0x5620>
   179e4:	mov	r1, r6
   179e8:	ldr	r3, [sp, #52]	; 0x34
   179ec:	ldr	r2, [pc, #144]	; 17a84 <__assert_fail@plt+0x65a4>
   179f0:	str	r0, [sp]
   179f4:	mov	r0, r4
   179f8:	bl	112d0 <error@plt>
   179fc:	add	sp, sp, #20
   17a00:	pop	{r4, r5, r6, r7, pc}
   17a04:	cmp	r0, #1
   17a08:	beq	17a44 <__assert_fail@plt+0x6564>
   17a0c:	cmp	r0, #3
   17a10:	beq	17a74 <__assert_fail@plt+0x6594>
   17a14:	cmp	r4, #0
   17a18:	beq	17a64 <__assert_fail@plt+0x6584>
   17a1c:	bl	1139c <__errno_location@plt>
   17a20:	ldr	r6, [r0]
   17a24:	cmp	r6, #22
   17a28:	moveq	r6, #0
   17a2c:	b	179dc <__assert_fail@plt+0x64fc>
   17a30:	bl	1139c <__errno_location@plt>
   17a34:	mov	r3, #75	; 0x4b
   17a38:	mov	r6, r3
   17a3c:	str	r3, [r0]
   17a40:	b	179d4 <__assert_fail@plt+0x64f4>
   17a44:	bl	1139c <__errno_location@plt>
   17a48:	mov	r3, #75	; 0x4b
   17a4c:	mov	r6, r3
   17a50:	str	r3, [r0]
   17a54:	cmp	r4, #0
   17a58:	moveq	r4, #1
   17a5c:	bne	17a24 <__assert_fail@plt+0x6544>
   17a60:	b	179dc <__assert_fail@plt+0x64fc>
   17a64:	bl	1139c <__errno_location@plt>
   17a68:	mov	r4, #1
   17a6c:	ldr	r6, [r0]
   17a70:	b	17a24 <__assert_fail@plt+0x6544>
   17a74:	bl	1139c <__errno_location@plt>
   17a78:	mov	r6, #0
   17a7c:	str	r6, [r0]
   17a80:	b	17a54 <__assert_fail@plt+0x6574>
   17a84:	andeq	r9, r1, r0, ror #23
   17a88:	push	{r4, r5}
   17a8c:	mov	r1, #10
   17a90:	pop	{r4, r5}
   17a94:	b	1794c <__assert_fail@plt+0x646c>
   17a98:	push	{r4, r5, r6, r7, r8, lr}
   17a9c:	subs	r5, r1, #0
   17aa0:	mov	r4, r0
   17aa4:	blt	17b18 <__assert_fail@plt+0x6638>
   17aa8:	moveq	r6, #0
   17aac:	moveq	r7, #0
   17ab0:	bne	17ad8 <__assert_fail@plt+0x65f8>
   17ab4:	ldr	r2, [r4]
   17ab8:	ldr	r1, [r4, #4]
   17abc:	mov	r0, #0
   17ac0:	mul	ip, r2, r7
   17ac4:	umull	r2, r3, r2, r5
   17ac8:	mla	r5, r5, r1, ip
   17acc:	add	r3, r5, r3
   17ad0:	strd	r2, [r4]
   17ad4:	pop	{r4, r5, r6, r7, r8, pc}
   17ad8:	asr	r7, r5, #31
   17adc:	mov	r2, r5
   17ae0:	mov	r3, r7
   17ae4:	mvn	r0, #0
   17ae8:	mvn	r1, #0
   17aec:	bl	18a18 <__assert_fail@plt+0x7538>
   17af0:	ldrd	r2, [r4]
   17af4:	mov	r6, r5
   17af8:	cmp	r1, r3
   17afc:	cmpeq	r0, r2
   17b00:	bcs	17ab4 <__assert_fail@plt+0x65d4>
   17b04:	mvn	r2, #0
   17b08:	mvn	r3, #0
   17b0c:	mov	r0, #1
   17b10:	strd	r2, [r4]
   17b14:	pop	{r4, r5, r6, r7, r8, pc}
   17b18:	ldrd	r2, [r0]
   17b1c:	orrs	r3, r2, r3
   17b20:	moveq	r6, r5
   17b24:	asreq	r7, r6, #31
   17b28:	bne	17b04 <__assert_fail@plt+0x6624>
   17b2c:	b	17ab4 <__assert_fail@plt+0x65d4>
   17b30:	cmp	r2, #36	; 0x24
   17b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b38:	sub	sp, sp, #20
   17b3c:	bhi	180b0 <__assert_fail@plt+0x6bd0>
   17b40:	cmp	r1, #0
   17b44:	mov	r8, r2
   17b48:	mov	r7, r0
   17b4c:	mov	r5, r1
   17b50:	mov	r6, r3
   17b54:	addeq	r5, sp, #4
   17b58:	bl	1139c <__errno_location@plt>
   17b5c:	mov	r3, #0
   17b60:	str	r3, [r0]
   17b64:	mov	r9, r0
   17b68:	bl	1133c <__ctype_b_loc@plt>
   17b6c:	ldrb	r3, [r7]
   17b70:	mov	r2, r7
   17b74:	ldr	r0, [r0]
   17b78:	b	17b80 <__assert_fail@plt+0x66a0>
   17b7c:	ldrb	r3, [r2, #1]!
   17b80:	lsl	r1, r3, #1
   17b84:	ldrh	r4, [r0, r1]
   17b88:	ands	r4, r4, #8192	; 0x2000
   17b8c:	bne	17b7c <__assert_fail@plt+0x669c>
   17b90:	cmp	r3, #45	; 0x2d
   17b94:	bne	17ba8 <__assert_fail@plt+0x66c8>
   17b98:	mov	r4, #4
   17b9c:	mov	r0, r4
   17ba0:	add	sp, sp, #20
   17ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba8:	mov	r2, r8
   17bac:	mov	r3, r4
   17bb0:	mov	r1, r5
   17bb4:	mov	r0, r7
   17bb8:	bl	111d4 <__strtoull_internal@plt>
   17bbc:	ldr	r8, [r5]
   17bc0:	cmp	r7, r8
   17bc4:	mov	r2, r0
   17bc8:	str	r0, [sp, #8]
   17bcc:	str	r1, [sp, #12]
   17bd0:	beq	17c1c <__assert_fail@plt+0x673c>
   17bd4:	ldr	r4, [r9]
   17bd8:	cmp	r4, #0
   17bdc:	bne	17c0c <__assert_fail@plt+0x672c>
   17be0:	ldr	r3, [sp, #56]	; 0x38
   17be4:	cmp	r3, #0
   17be8:	beq	17bf8 <__assert_fail@plt+0x6718>
   17bec:	ldrb	r9, [r8]
   17bf0:	cmp	r9, #0
   17bf4:	bne	17c54 <__assert_fail@plt+0x6774>
   17bf8:	mov	r0, r4
   17bfc:	str	r2, [r6]
   17c00:	str	r1, [r6, #4]
   17c04:	add	sp, sp, #20
   17c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c0c:	cmp	r4, #34	; 0x22
   17c10:	bne	17b98 <__assert_fail@plt+0x66b8>
   17c14:	mov	r4, #1
   17c18:	b	17be0 <__assert_fail@plt+0x6700>
   17c1c:	ldr	r3, [sp, #56]	; 0x38
   17c20:	cmp	r3, #0
   17c24:	beq	17b98 <__assert_fail@plt+0x66b8>
   17c28:	ldrb	r1, [r8]
   17c2c:	cmp	r1, #0
   17c30:	beq	17b98 <__assert_fail@plt+0x66b8>
   17c34:	mov	r0, r3
   17c38:	bl	1136c <strchr@plt>
   17c3c:	cmp	r0, #0
   17c40:	beq	17b98 <__assert_fail@plt+0x66b8>
   17c44:	ldrb	r9, [r8]
   17c48:	mov	r2, #1
   17c4c:	mov	r3, #0
   17c50:	strd	r2, [sp, #8]
   17c54:	mov	r1, r9
   17c58:	ldr	r0, [sp, #56]	; 0x38
   17c5c:	bl	1136c <strchr@plt>
   17c60:	cmp	r0, #0
   17c64:	beq	1806c <__assert_fail@plt+0x6b8c>
   17c68:	sub	r3, r9, #69	; 0x45
   17c6c:	cmp	r3, #47	; 0x2f
   17c70:	ldrls	pc, [pc, r3, lsl #2]
   17c74:	b	17d38 <__assert_fail@plt+0x6858>
   17c78:	andeq	r7, r1, r8, lsr #28
   17c7c:	andeq	r7, r1, r8, lsr sp
   17c80:	andeq	r7, r1, r8, lsr #28
   17c84:	andeq	r7, r1, r8, lsr sp
   17c88:	andeq	r7, r1, r8, lsr sp
   17c8c:	andeq	r7, r1, r8, lsr sp
   17c90:	andeq	r7, r1, r8, lsr #28
   17c94:	andeq	r7, r1, r8, lsr sp
   17c98:	andeq	r7, r1, r8, lsr #28
   17c9c:	andeq	r7, r1, r8, lsr sp
   17ca0:	andeq	r7, r1, r8, lsr sp
   17ca4:	andeq	r7, r1, r8, lsr #28
   17ca8:	andeq	r7, r1, r8, lsr sp
   17cac:	andeq	r7, r1, r8, lsr sp
   17cb0:	andeq	r7, r1, r8, lsr sp
   17cb4:	andeq	r7, r1, r8, lsr #28
   17cb8:	andeq	r7, r1, r8, lsr sp
   17cbc:	andeq	r7, r1, r8, lsr sp
   17cc0:	andeq	r7, r1, r8, lsr sp
   17cc4:	andeq	r7, r1, r8, lsr sp
   17cc8:	andeq	r7, r1, r8, lsr #28
   17ccc:	andeq	r7, r1, r8, lsr #28
   17cd0:	andeq	r7, r1, r8, lsr sp
   17cd4:	andeq	r7, r1, r8, lsr sp
   17cd8:	andeq	r7, r1, r8, lsr sp
   17cdc:	andeq	r7, r1, r8, lsr sp
   17ce0:	andeq	r7, r1, r8, lsr sp
   17ce4:	andeq	r7, r1, r8, lsr sp
   17ce8:	andeq	r7, r1, r8, lsr sp
   17cec:	andeq	r7, r1, r8, lsr sp
   17cf0:	andeq	r7, r1, r8, lsr sp
   17cf4:	andeq	r7, r1, r8, lsr sp
   17cf8:	andeq	r7, r1, r8, lsr sp
   17cfc:	andeq	r7, r1, r8, lsr sp
   17d00:	andeq	r7, r1, r8, lsr #28
   17d04:	andeq	r7, r1, r8, lsr sp
   17d08:	andeq	r7, r1, r8, lsr sp
   17d0c:	andeq	r7, r1, r8, lsr sp
   17d10:	andeq	r7, r1, r8, lsr #28
   17d14:	andeq	r7, r1, r8, lsr sp
   17d18:	andeq	r7, r1, r8, lsr #28
   17d1c:	andeq	r7, r1, r8, lsr sp
   17d20:	andeq	r7, r1, r8, lsr sp
   17d24:	andeq	r7, r1, r8, lsr sp
   17d28:	andeq	r7, r1, r8, lsr sp
   17d2c:	andeq	r7, r1, r8, lsr sp
   17d30:	andeq	r7, r1, r8, lsr sp
   17d34:	andeq	r7, r1, r8, lsr #28
   17d38:	mov	r7, #1
   17d3c:	mov	sl, #1024	; 0x400
   17d40:	sub	r9, r9, #66	; 0x42
   17d44:	cmp	r9, #53	; 0x35
   17d48:	ldrls	pc, [pc, r9, lsl #2]
   17d4c:	b	1806c <__assert_fail@plt+0x6b8c>
   17d50:			; <UNDEFINED> instruction: 0x00017fb8
   17d54:	andeq	r8, r1, ip, rrx
   17d58:	andeq	r8, r1, ip, rrx
   17d5c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   17d60:	andeq	r8, r1, ip, rrx
   17d64:	andeq	r7, r1, r8, ror #30
   17d68:	andeq	r8, r1, ip, rrx
   17d6c:	andeq	r8, r1, ip, rrx
   17d70:	andeq	r8, r1, ip, rrx
   17d74:	andeq	r7, r1, r8, asr #30
   17d78:	andeq	r8, r1, ip, rrx
   17d7c:	andeq	r8, r1, r4, lsl r0
   17d80:	andeq	r8, r1, ip, rrx
   17d84:	andeq	r8, r1, ip, rrx
   17d88:	andeq	r7, r1, ip, ror #31
   17d8c:	andeq	r8, r1, ip, rrx
   17d90:	andeq	r8, r1, ip, rrx
   17d94:	andeq	r8, r1, ip, rrx
   17d98:	andeq	r8, r1, r4, asr #32
   17d9c:	andeq	r8, r1, ip, rrx
   17da0:	andeq	r8, r1, ip, rrx
   17da4:	andeq	r8, r1, ip, rrx
   17da8:	andeq	r8, r1, ip, rrx
   17dac:	andeq	r7, r1, r0, lsr #30
   17db0:	andeq	r7, r1, ip, ror #29
   17db4:	andeq	r8, r1, ip, rrx
   17db8:	andeq	r8, r1, ip, rrx
   17dbc:	andeq	r8, r1, ip, rrx
   17dc0:	andeq	r8, r1, ip, rrx
   17dc4:	andeq	r8, r1, ip, rrx
   17dc8:	andeq	r8, r1, ip, rrx
   17dcc:	andeq	r8, r1, ip, rrx
   17dd0:			; <UNDEFINED> instruction: 0x00017eb8
   17dd4:	andeq	r7, r1, r8, lsr #29
   17dd8:	andeq	r8, r1, ip, rrx
   17ddc:	andeq	r8, r1, ip, rrx
   17de0:	andeq	r8, r1, ip, rrx
   17de4:	andeq	r7, r1, r8, ror #30
   17de8:	andeq	r8, r1, ip, rrx
   17dec:	andeq	r8, r1, ip, rrx
   17df0:	andeq	r8, r1, ip, rrx
   17df4:	andeq	r7, r1, r8, asr #30
   17df8:	andeq	r8, r1, ip, rrx
   17dfc:	andeq	r8, r1, r4, lsl r0
   17e00:	andeq	r8, r1, ip, rrx
   17e04:	andeq	r8, r1, ip, rrx
   17e08:	andeq	r8, r1, ip, rrx
   17e0c:	andeq	r8, r1, ip, rrx
   17e10:	andeq	r8, r1, ip, rrx
   17e14:	andeq	r8, r1, ip, rrx
   17e18:	andeq	r8, r1, r4, asr #32
   17e1c:	andeq	r8, r1, ip, rrx
   17e20:	andeq	r8, r1, ip, rrx
   17e24:	andeq	r7, r1, r4, ror #28
   17e28:	mov	r1, #48	; 0x30
   17e2c:	ldr	r0, [sp, #56]	; 0x38
   17e30:	bl	1136c <strchr@plt>
   17e34:	cmp	r0, #0
   17e38:	beq	17d38 <__assert_fail@plt+0x6858>
   17e3c:	ldrb	r3, [r8, #1]
   17e40:	cmp	r3, #68	; 0x44
   17e44:	beq	17e58 <__assert_fail@plt+0x6978>
   17e48:	cmp	r3, #105	; 0x69
   17e4c:	beq	1807c <__assert_fail@plt+0x6b9c>
   17e50:	cmp	r3, #66	; 0x42
   17e54:	bne	17d38 <__assert_fail@plt+0x6858>
   17e58:	mov	r7, #2
   17e5c:	mov	sl, #1000	; 0x3e8
   17e60:	b	17d40 <__assert_fail@plt+0x6860>
   17e64:	ldrd	r2, [sp, #8]
   17e68:	cmp	r2, #0
   17e6c:	sbcs	r1, r3, #0
   17e70:	blt	18094 <__assert_fail@plt+0x6bb4>
   17e74:	adds	r2, r2, r2
   17e78:	adc	r3, r3, r3
   17e7c:	mov	r1, r3
   17e80:	mov	r9, #0
   17e84:	str	r2, [sp, #8]
   17e88:	str	r3, [sp, #12]
   17e8c:	add	r3, r8, r7
   17e90:	str	r3, [r5]
   17e94:	ldrb	r3, [r8, r7]
   17e98:	orr	r4, r4, r9
   17e9c:	cmp	r3, #0
   17ea0:	orrne	r4, r4, #2
   17ea4:	b	17bf8 <__assert_fail@plt+0x6718>
   17ea8:	ldr	r2, [sp, #8]
   17eac:	ldr	r1, [sp, #12]
   17eb0:	mov	r9, #0
   17eb4:	b	17e8c <__assert_fail@plt+0x69ac>
   17eb8:	ldrd	r2, [sp, #8]
   17ebc:	ldr	r1, [pc, #512]	; 180c4 <__assert_fail@plt+0x6be4>
   17ec0:	mvn	r0, #0
   17ec4:	cmp	r3, r1
   17ec8:	cmpeq	r2, r0
   17ecc:	bhi	18094 <__assert_fail@plt+0x6bb4>
   17ed0:	lsl	r1, r3, #9
   17ed4:	orr	r1, r1, r2, lsr #23
   17ed8:	lsl	r2, r2, #9
   17edc:	str	r1, [sp, #12]
   17ee0:	str	r2, [sp, #8]
   17ee4:	mov	r9, #0
   17ee8:	b	17e8c <__assert_fail@plt+0x69ac>
   17eec:	mov	fp, #7
   17ef0:	mov	r9, #0
   17ef4:	add	r8, sp, #8
   17ef8:	mov	r1, sl
   17efc:	mov	r0, r8
   17f00:	bl	17a98 <__assert_fail@plt+0x65b8>
   17f04:	subs	fp, fp, #1
   17f08:	orr	r9, r9, r0
   17f0c:	bne	17ef8 <__assert_fail@plt+0x6a18>
   17f10:	ldr	r8, [r5]
   17f14:	ldr	r2, [sp, #8]
   17f18:	ldr	r1, [sp, #12]
   17f1c:	b	17e8c <__assert_fail@plt+0x69ac>
   17f20:	mov	fp, #8
   17f24:	mov	r9, #0
   17f28:	add	r8, sp, fp
   17f2c:	mov	r1, sl
   17f30:	mov	r0, r8
   17f34:	bl	17a98 <__assert_fail@plt+0x65b8>
   17f38:	subs	fp, fp, #1
   17f3c:	orr	r9, r9, r0
   17f40:	bne	17f2c <__assert_fail@plt+0x6a4c>
   17f44:	b	17f10 <__assert_fail@plt+0x6a30>
   17f48:	mov	r1, sl
   17f4c:	add	r0, sp, #8
   17f50:	bl	17a98 <__assert_fail@plt+0x65b8>
   17f54:	ldr	r8, [r5]
   17f58:	ldr	r2, [sp, #8]
   17f5c:	ldr	r1, [sp, #12]
   17f60:	mov	r9, r0
   17f64:	b	17e8c <__assert_fail@plt+0x69ac>
   17f68:	mov	fp, #3
   17f6c:	mov	r9, #0
   17f70:	add	r8, sp, #8
   17f74:	mov	r1, sl
   17f78:	mov	r0, r8
   17f7c:	bl	17a98 <__assert_fail@plt+0x65b8>
   17f80:	subs	fp, fp, #1
   17f84:	orr	r9, r9, r0
   17f88:	bne	17f74 <__assert_fail@plt+0x6a94>
   17f8c:	b	17f10 <__assert_fail@plt+0x6a30>
   17f90:	mov	fp, #6
   17f94:	mov	r9, #0
   17f98:	add	r8, sp, #8
   17f9c:	mov	r1, sl
   17fa0:	mov	r0, r8
   17fa4:	bl	17a98 <__assert_fail@plt+0x65b8>
   17fa8:	subs	fp, fp, #1
   17fac:	orr	r9, r9, r0
   17fb0:	bne	17f9c <__assert_fail@plt+0x6abc>
   17fb4:	b	17f10 <__assert_fail@plt+0x6a30>
   17fb8:	ldrd	r0, [sp, #8]
   17fbc:	ldr	r3, [pc, #260]	; 180c8 <__assert_fail@plt+0x6be8>
   17fc0:	mvn	r2, #0
   17fc4:	cmp	r1, r3
   17fc8:	cmpeq	r0, r2
   17fcc:	bhi	18094 <__assert_fail@plt+0x6bb4>
   17fd0:	lsl	r1, r1, #10
   17fd4:	orr	r1, r1, r0, lsr #22
   17fd8:	lsl	r2, r0, #10
   17fdc:	str	r1, [sp, #12]
   17fe0:	str	r2, [sp, #8]
   17fe4:	mov	r9, #0
   17fe8:	b	17e8c <__assert_fail@plt+0x69ac>
   17fec:	mov	fp, #5
   17ff0:	mov	r9, #0
   17ff4:	add	r8, sp, #8
   17ff8:	mov	r1, sl
   17ffc:	mov	r0, r8
   18000:	bl	17a98 <__assert_fail@plt+0x65b8>
   18004:	subs	fp, fp, #1
   18008:	orr	r9, r9, r0
   1800c:	bne	17ff8 <__assert_fail@plt+0x6b18>
   18010:	b	17f10 <__assert_fail@plt+0x6a30>
   18014:	mov	r1, sl
   18018:	add	r0, sp, #8
   1801c:	bl	17a98 <__assert_fail@plt+0x65b8>
   18020:	mov	r1, sl
   18024:	mov	r9, r0
   18028:	add	r0, sp, #8
   1802c:	bl	17a98 <__assert_fail@plt+0x65b8>
   18030:	ldr	r8, [r5]
   18034:	ldr	r2, [sp, #8]
   18038:	ldr	r1, [sp, #12]
   1803c:	orr	r9, r9, r0
   18040:	b	17e8c <__assert_fail@plt+0x69ac>
   18044:	mov	fp, #4
   18048:	mov	r9, #0
   1804c:	add	r8, sp, #8
   18050:	mov	r1, sl
   18054:	mov	r0, r8
   18058:	bl	17a98 <__assert_fail@plt+0x65b8>
   1805c:	subs	fp, fp, #1
   18060:	orr	r9, r9, r0
   18064:	bne	18050 <__assert_fail@plt+0x6b70>
   18068:	b	17f10 <__assert_fail@plt+0x6a30>
   1806c:	ldrd	r2, [sp, #8]
   18070:	orr	r4, r4, #2
   18074:	strd	r2, [r6]
   18078:	b	17b9c <__assert_fail@plt+0x66bc>
   1807c:	ldrb	r7, [r8, #2]
   18080:	mov	sl, #1024	; 0x400
   18084:	cmp	r7, #66	; 0x42
   18088:	movne	r7, #1
   1808c:	moveq	r7, #3
   18090:	b	17d40 <__assert_fail@plt+0x6860>
   18094:	mvn	r1, #0
   18098:	mvn	r0, #0
   1809c:	mvn	r2, #0
   180a0:	strd	r0, [sp, #8]
   180a4:	mov	r9, #1
   180a8:	mov	r1, r2
   180ac:	b	17e8c <__assert_fail@plt+0x69ac>
   180b0:	ldr	r3, [pc, #20]	; 180cc <__assert_fail@plt+0x6bec>
   180b4:	mov	r2, #85	; 0x55
   180b8:	ldr	r1, [pc, #16]	; 180d0 <__assert_fail@plt+0x6bf0>
   180bc:	ldr	r0, [pc, #16]	; 180d4 <__assert_fail@plt+0x6bf4>
   180c0:	bl	114e0 <__assert_fail@plt>
   180c4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   180c8:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   180cc:	ldrdeq	sl, [r1], -r0
   180d0:	ldrdeq	sl, [r1], -ip
   180d4:	andeq	sl, r1, ip, ror #5
   180d8:	cmp	r1, #0
   180dc:	cmpne	r0, #0
   180e0:	moveq	r1, #1
   180e4:	moveq	r0, r1
   180e8:	umull	r2, r3, r0, r1
   180ec:	adds	r3, r3, #0
   180f0:	movne	r3, #1
   180f4:	cmp	r2, #0
   180f8:	blt	18108 <__assert_fail@plt+0x6c28>
   180fc:	cmp	r3, #0
   18100:	bne	18108 <__assert_fail@plt+0x6c28>
   18104:	b	11144 <calloc@plt>
   18108:	push	{r4, lr}
   1810c:	bl	1139c <__errno_location@plt>
   18110:	mov	r3, #12
   18114:	str	r3, [r0]
   18118:	mov	r0, #0
   1811c:	pop	{r4, pc}
   18120:	cmp	r0, #0
   18124:	moveq	r0, #1
   18128:	cmp	r0, #0
   1812c:	blt	18134 <__assert_fail@plt+0x6c54>
   18130:	b	112f4 <malloc@plt>
   18134:	push	{r4, lr}
   18138:	bl	1139c <__errno_location@plt>
   1813c:	mov	r3, #12
   18140:	str	r3, [r0]
   18144:	mov	r0, #0
   18148:	pop	{r4, pc}
   1814c:	cmp	r0, #0
   18150:	beq	18174 <__assert_fail@plt+0x6c94>
   18154:	cmp	r1, #0
   18158:	push	{lr}		; (str lr, [sp, #-4]!)
   1815c:	sub	sp, sp, #12
   18160:	beq	1817c <__assert_fail@plt+0x6c9c>
   18164:	blt	18194 <__assert_fail@plt+0x6cb4>
   18168:	add	sp, sp, #12
   1816c:	pop	{lr}		; (ldr lr, [sp], #4)
   18170:	b	11234 <realloc@plt>
   18174:	mov	r0, r1
   18178:	b	18120 <__assert_fail@plt+0x6c40>
   1817c:	str	r1, [sp, #4]
   18180:	bl	14a70 <__assert_fail@plt+0x3590>
   18184:	ldr	r3, [sp, #4]
   18188:	mov	r0, r3
   1818c:	add	sp, sp, #12
   18190:	pop	{pc}		; (ldr pc, [sp], #4)
   18194:	bl	1139c <__errno_location@plt>
   18198:	mov	r2, #12
   1819c:	mov	r3, #0
   181a0:	str	r2, [r0]
   181a4:	b	18188 <__assert_fail@plt+0x6ca8>
   181a8:	push	{r4, r5, r6, lr}
   181ac:	mov	r4, r0
   181b0:	bl	112b8 <__fpending@plt>
   181b4:	ldr	r5, [r4]
   181b8:	and	r5, r5, #32
   181bc:	mov	r6, r0
   181c0:	mov	r0, r4
   181c4:	bl	148d4 <__assert_fail@plt+0x33f4>
   181c8:	cmp	r5, #0
   181cc:	mov	r4, r0
   181d0:	bne	181f0 <__assert_fail@plt+0x6d10>
   181d4:	cmp	r0, #0
   181d8:	beq	181e8 <__assert_fail@plt+0x6d08>
   181dc:	cmp	r6, #0
   181e0:	beq	1820c <__assert_fail@plt+0x6d2c>
   181e4:	mvn	r4, #0
   181e8:	mov	r0, r4
   181ec:	pop	{r4, r5, r6, pc}
   181f0:	cmp	r0, #0
   181f4:	bne	181e4 <__assert_fail@plt+0x6d04>
   181f8:	bl	1139c <__errno_location@plt>
   181fc:	str	r4, [r0]
   18200:	mvn	r4, #0
   18204:	mov	r0, r4
   18208:	pop	{r4, r5, r6, pc}
   1820c:	bl	1139c <__errno_location@plt>
   18210:	ldr	r4, [r0]
   18214:	subs	r4, r4, #9
   18218:	mvnne	r4, #0
   1821c:	mov	r0, r4
   18220:	pop	{r4, r5, r6, pc}
   18224:	push	{r4, lr}
   18228:	mov	r0, #14
   1822c:	bl	11474 <nl_langinfo@plt>
   18230:	cmp	r0, #0
   18234:	beq	1824c <__assert_fail@plt+0x6d6c>
   18238:	ldrb	r2, [r0]
   1823c:	ldr	r3, [pc, #16]	; 18254 <__assert_fail@plt+0x6d74>
   18240:	cmp	r2, #0
   18244:	moveq	r0, r3
   18248:	pop	{r4, pc}
   1824c:	ldr	r0, [pc]	; 18254 <__assert_fail@plt+0x6d74>
   18250:	pop	{r4, pc}
   18254:	andeq	sl, r1, r4, lsl r3
   18258:	push	{r4, r5, r6, r7, lr}
   1825c:	subs	r6, r0, #0
   18260:	sub	sp, sp, #12
   18264:	addeq	r6, sp, #4
   18268:	mov	r0, r6
   1826c:	mov	r5, r2
   18270:	mov	r7, r1
   18274:	bl	112c4 <mbrtowc@plt>
   18278:	cmp	r5, #0
   1827c:	cmnne	r0, #3
   18280:	mov	r4, r0
   18284:	bls	182a0 <__assert_fail@plt+0x6dc0>
   18288:	mov	r0, #0
   1828c:	bl	184d8 <__assert_fail@plt+0x6ff8>
   18290:	cmp	r0, #0
   18294:	moveq	r4, #1
   18298:	ldrbeq	r3, [r7]
   1829c:	streq	r3, [r6]
   182a0:	mov	r0, r4
   182a4:	add	sp, sp, #12
   182a8:	pop	{r4, r5, r6, r7, pc}
   182ac:	push	{r4, r5, r6, lr}
   182b0:	subs	r4, r2, #0
   182b4:	mov	r6, r0
   182b8:	mov	r5, r1
   182bc:	beq	182e8 <__assert_fail@plt+0x6e08>
   182c0:	mov	r1, r4
   182c4:	mvn	r0, #0
   182c8:	bl	185cc <__assert_fail@plt+0x70ec>
   182cc:	cmp	r0, r5
   182d0:	bcs	182e8 <__assert_fail@plt+0x6e08>
   182d4:	bl	1139c <__errno_location@plt>
   182d8:	mov	r3, #12
   182dc:	str	r3, [r0]
   182e0:	mov	r0, #0
   182e4:	pop	{r4, r5, r6, pc}
   182e8:	mul	r1, r5, r4
   182ec:	mov	r0, r6
   182f0:	pop	{r4, r5, r6, lr}
   182f4:	b	1814c <__assert_fail@plt+0x6c6c>
   182f8:	mov	r2, #3
   182fc:	mov	r1, #0
   18300:	b	18304 <__assert_fail@plt+0x6e24>
   18304:	push	{r1, r2, r3}
   18308:	push	{r4, r5, r6, r7, lr}
   1830c:	sub	sp, sp, #8
   18310:	add	r3, sp, #32
   18314:	ldr	r1, [sp, #28]
   18318:	str	r3, [sp, #4]
   1831c:	cmp	r1, #0
   18320:	beq	183b8 <__assert_fail@plt+0x6ed8>
   18324:	ldr	r2, [pc, #412]	; 184c8 <__assert_fail@plt+0x6fe8>
   18328:	mov	r5, r0
   1832c:	cmp	r1, r2
   18330:	bne	1837c <__assert_fail@plt+0x6e9c>
   18334:	ldr	r6, [pc, #400]	; 184cc <__assert_fail@plt+0x6fec>
   18338:	ldr	r7, [r3]
   1833c:	add	r2, sp, #36	; 0x24
   18340:	ldr	r3, [r6]
   18344:	str	r2, [sp, #4]
   18348:	cmp	r3, #0
   1834c:	mov	r2, r7
   18350:	blt	1847c <__assert_fail@plt+0x6f9c>
   18354:	bl	1142c <fcntl64@plt>
   18358:	subs	r4, r0, #0
   1835c:	blt	18400 <__assert_fail@plt+0x6f20>
   18360:	mov	r3, #1
   18364:	str	r3, [r6]
   18368:	mov	r0, r4
   1836c:	add	sp, sp, #8
   18370:	pop	{r4, r5, r6, r7, lr}
   18374:	add	sp, sp, #12
   18378:	bx	lr
   1837c:	cmp	r1, #11
   18380:	beq	183a8 <__assert_fail@plt+0x6ec8>
   18384:	bgt	183c8 <__assert_fail@plt+0x6ee8>
   18388:	cmp	r1, #3
   1838c:	beq	183a8 <__assert_fail@plt+0x6ec8>
   18390:	ble	184bc <__assert_fail@plt+0x6fdc>
   18394:	cmp	r1, #8
   18398:	beq	183e8 <__assert_fail@plt+0x6f08>
   1839c:	ble	183e8 <__assert_fail@plt+0x6f08>
   183a0:	cmp	r1, #9
   183a4:	bne	183e8 <__assert_fail@plt+0x6f08>
   183a8:	mov	r0, r5
   183ac:	bl	1142c <fcntl64@plt>
   183b0:	mov	r4, r0
   183b4:	b	18368 <__assert_fail@plt+0x6e88>
   183b8:	ldr	r2, [sp, #32]
   183bc:	bl	1142c <fcntl64@plt>
   183c0:	mov	r4, r0
   183c4:	b	18368 <__assert_fail@plt+0x6e88>
   183c8:	ldr	r3, [pc, #256]	; 184d0 <__assert_fail@plt+0x6ff0>
   183cc:	cmp	r1, r3
   183d0:	bgt	1849c <__assert_fail@plt+0x6fbc>
   183d4:	cmp	r1, r2
   183d8:	bge	183e8 <__assert_fail@plt+0x6f08>
   183dc:	sub	r3, r3, #6
   183e0:	cmp	r1, r3
   183e4:	beq	183a8 <__assert_fail@plt+0x6ec8>
   183e8:	ldr	r3, [sp, #4]
   183ec:	mov	r0, r5
   183f0:	ldr	r2, [r3]
   183f4:	bl	1142c <fcntl64@plt>
   183f8:	mov	r4, r0
   183fc:	b	18368 <__assert_fail@plt+0x6e88>
   18400:	bl	1139c <__errno_location@plt>
   18404:	ldr	r3, [r0]
   18408:	cmp	r3, #22
   1840c:	bne	18360 <__assert_fail@plt+0x6e80>
   18410:	mov	r2, r7
   18414:	mov	r0, r5
   18418:	mov	r1, #0
   1841c:	bl	1142c <fcntl64@plt>
   18420:	subs	r4, r0, #0
   18424:	blt	18368 <__assert_fail@plt+0x6e88>
   18428:	mvn	r3, #0
   1842c:	str	r3, [r6]
   18430:	mov	r1, #1
   18434:	mov	r0, r4
   18438:	bl	1142c <fcntl64@plt>
   1843c:	subs	r2, r0, #0
   18440:	blt	1845c <__assert_fail@plt+0x6f7c>
   18444:	orr	r2, r2, #1
   18448:	mov	r1, #2
   1844c:	mov	r0, r4
   18450:	bl	1142c <fcntl64@plt>
   18454:	cmn	r0, #1
   18458:	bne	18368 <__assert_fail@plt+0x6e88>
   1845c:	bl	1139c <__errno_location@plt>
   18460:	mov	r5, r0
   18464:	mov	r0, r4
   18468:	ldr	r6, [r5]
   1846c:	mvn	r4, #0
   18470:	bl	114c8 <close@plt>
   18474:	str	r6, [r5]
   18478:	b	18368 <__assert_fail@plt+0x6e88>
   1847c:	mov	r1, #0
   18480:	bl	1142c <fcntl64@plt>
   18484:	subs	r4, r0, #0
   18488:	blt	18368 <__assert_fail@plt+0x6e88>
   1848c:	ldr	r3, [r6]
   18490:	cmn	r3, #1
   18494:	beq	18430 <__assert_fail@plt+0x6f50>
   18498:	b	18368 <__assert_fail@plt+0x6e88>
   1849c:	ldr	r3, [pc, #48]	; 184d4 <__assert_fail@plt+0x6ff4>
   184a0:	cmp	r1, r3
   184a4:	beq	183e8 <__assert_fail@plt+0x6f08>
   184a8:	blt	183a8 <__assert_fail@plt+0x6ec8>
   184ac:	add	r3, r3, #1
   184b0:	cmp	r1, r3
   184b4:	bne	183e8 <__assert_fail@plt+0x6f08>
   184b8:	b	183a8 <__assert_fail@plt+0x6ec8>
   184bc:	cmp	r1, #1
   184c0:	bne	183e8 <__assert_fail@plt+0x6f08>
   184c4:	b	183a8 <__assert_fail@plt+0x6ec8>
   184c8:	andeq	r0, r0, r6, lsl #8
   184cc:	andeq	fp, r2, r0, ror #12
   184d0:	andeq	r0, r0, r7, lsl #8
   184d4:	andeq	r0, r0, r9, lsl #8
   184d8:	push	{lr}		; (str lr, [sp, #-4]!)
   184dc:	sub	sp, sp, #268	; 0x10c
   184e0:	add	r1, sp, #4
   184e4:	ldr	r2, [pc, #60]	; 18528 <__assert_fail@plt+0x7048>
   184e8:	bl	18534 <__assert_fail@plt+0x7054>
   184ec:	cmp	r0, #0
   184f0:	movne	r0, #0
   184f4:	bne	18520 <__assert_fail@plt+0x7040>
   184f8:	ldr	r1, [pc, #44]	; 1852c <__assert_fail@plt+0x704c>
   184fc:	add	r0, sp, #4
   18500:	bl	11168 <strcmp@plt>
   18504:	cmp	r0, #0
   18508:	beq	18520 <__assert_fail@plt+0x7040>
   1850c:	add	r0, sp, #4
   18510:	ldr	r1, [pc, #24]	; 18530 <__assert_fail@plt+0x7050>
   18514:	bl	11168 <strcmp@plt>
   18518:	adds	r0, r0, #0
   1851c:	movne	r0, #1
   18520:	add	sp, sp, #268	; 0x10c
   18524:	pop	{pc}		; (ldr pc, [sp], #4)
   18528:	andeq	r0, r0, r1, lsl #2
   1852c:	andeq	sl, r1, ip, lsl r3
   18530:	andeq	sl, r1, r0, lsr #6
   18534:	push	{r4, r5, r6, lr}
   18538:	mov	r5, r1
   1853c:	mov	r1, #0
   18540:	mov	r4, r2
   18544:	bl	11438 <setlocale@plt>
   18548:	subs	r6, r0, #0
   1854c:	beq	185a8 <__assert_fail@plt+0x70c8>
   18550:	bl	11354 <strlen@plt>
   18554:	cmp	r4, r0
   18558:	bhi	18590 <__assert_fail@plt+0x70b0>
   1855c:	cmp	r4, #0
   18560:	bne	1856c <__assert_fail@plt+0x708c>
   18564:	mov	r0, #34	; 0x22
   18568:	pop	{r4, r5, r6, pc}
   1856c:	sub	r4, r4, #1
   18570:	mov	r1, r6
   18574:	mov	r2, r4
   18578:	mov	r0, r5
   1857c:	bl	111c8 <memcpy@plt>
   18580:	mov	r3, #0
   18584:	strb	r3, [r5, r4]
   18588:	mov	r0, #34	; 0x22
   1858c:	pop	{r4, r5, r6, pc}
   18590:	add	r2, r0, #1
   18594:	mov	r1, r6
   18598:	mov	r0, r5
   1859c:	bl	111c8 <memcpy@plt>
   185a0:	mov	r0, #0
   185a4:	pop	{r4, r5, r6, pc}
   185a8:	cmp	r4, #0
   185ac:	beq	185bc <__assert_fail@plt+0x70dc>
   185b0:	strb	r6, [r5]
   185b4:	mov	r0, #22
   185b8:	pop	{r4, r5, r6, pc}
   185bc:	mov	r0, #22
   185c0:	pop	{r4, r5, r6, pc}
   185c4:	mov	r1, #0
   185c8:	b	11438 <setlocale@plt>
   185cc:	subs	r2, r1, #1
   185d0:	bxeq	lr
   185d4:	bcc	187ac <__assert_fail@plt+0x72cc>
   185d8:	cmp	r0, r1
   185dc:	bls	18790 <__assert_fail@plt+0x72b0>
   185e0:	tst	r1, r2
   185e4:	beq	1879c <__assert_fail@plt+0x72bc>
   185e8:	clz	r3, r0
   185ec:	clz	r2, r1
   185f0:	sub	r3, r2, r3
   185f4:	rsbs	r3, r3, #31
   185f8:	addne	r3, r3, r3, lsl #1
   185fc:	mov	r2, #0
   18600:	addne	pc, pc, r3, lsl #2
   18604:	nop			; (mov r0, r0)
   18608:	cmp	r0, r1, lsl #31
   1860c:	adc	r2, r2, r2
   18610:	subcs	r0, r0, r1, lsl #31
   18614:	cmp	r0, r1, lsl #30
   18618:	adc	r2, r2, r2
   1861c:	subcs	r0, r0, r1, lsl #30
   18620:	cmp	r0, r1, lsl #29
   18624:	adc	r2, r2, r2
   18628:	subcs	r0, r0, r1, lsl #29
   1862c:	cmp	r0, r1, lsl #28
   18630:	adc	r2, r2, r2
   18634:	subcs	r0, r0, r1, lsl #28
   18638:	cmp	r0, r1, lsl #27
   1863c:	adc	r2, r2, r2
   18640:	subcs	r0, r0, r1, lsl #27
   18644:	cmp	r0, r1, lsl #26
   18648:	adc	r2, r2, r2
   1864c:	subcs	r0, r0, r1, lsl #26
   18650:	cmp	r0, r1, lsl #25
   18654:	adc	r2, r2, r2
   18658:	subcs	r0, r0, r1, lsl #25
   1865c:	cmp	r0, r1, lsl #24
   18660:	adc	r2, r2, r2
   18664:	subcs	r0, r0, r1, lsl #24
   18668:	cmp	r0, r1, lsl #23
   1866c:	adc	r2, r2, r2
   18670:	subcs	r0, r0, r1, lsl #23
   18674:	cmp	r0, r1, lsl #22
   18678:	adc	r2, r2, r2
   1867c:	subcs	r0, r0, r1, lsl #22
   18680:	cmp	r0, r1, lsl #21
   18684:	adc	r2, r2, r2
   18688:	subcs	r0, r0, r1, lsl #21
   1868c:	cmp	r0, r1, lsl #20
   18690:	adc	r2, r2, r2
   18694:	subcs	r0, r0, r1, lsl #20
   18698:	cmp	r0, r1, lsl #19
   1869c:	adc	r2, r2, r2
   186a0:	subcs	r0, r0, r1, lsl #19
   186a4:	cmp	r0, r1, lsl #18
   186a8:	adc	r2, r2, r2
   186ac:	subcs	r0, r0, r1, lsl #18
   186b0:	cmp	r0, r1, lsl #17
   186b4:	adc	r2, r2, r2
   186b8:	subcs	r0, r0, r1, lsl #17
   186bc:	cmp	r0, r1, lsl #16
   186c0:	adc	r2, r2, r2
   186c4:	subcs	r0, r0, r1, lsl #16
   186c8:	cmp	r0, r1, lsl #15
   186cc:	adc	r2, r2, r2
   186d0:	subcs	r0, r0, r1, lsl #15
   186d4:	cmp	r0, r1, lsl #14
   186d8:	adc	r2, r2, r2
   186dc:	subcs	r0, r0, r1, lsl #14
   186e0:	cmp	r0, r1, lsl #13
   186e4:	adc	r2, r2, r2
   186e8:	subcs	r0, r0, r1, lsl #13
   186ec:	cmp	r0, r1, lsl #12
   186f0:	adc	r2, r2, r2
   186f4:	subcs	r0, r0, r1, lsl #12
   186f8:	cmp	r0, r1, lsl #11
   186fc:	adc	r2, r2, r2
   18700:	subcs	r0, r0, r1, lsl #11
   18704:	cmp	r0, r1, lsl #10
   18708:	adc	r2, r2, r2
   1870c:	subcs	r0, r0, r1, lsl #10
   18710:	cmp	r0, r1, lsl #9
   18714:	adc	r2, r2, r2
   18718:	subcs	r0, r0, r1, lsl #9
   1871c:	cmp	r0, r1, lsl #8
   18720:	adc	r2, r2, r2
   18724:	subcs	r0, r0, r1, lsl #8
   18728:	cmp	r0, r1, lsl #7
   1872c:	adc	r2, r2, r2
   18730:	subcs	r0, r0, r1, lsl #7
   18734:	cmp	r0, r1, lsl #6
   18738:	adc	r2, r2, r2
   1873c:	subcs	r0, r0, r1, lsl #6
   18740:	cmp	r0, r1, lsl #5
   18744:	adc	r2, r2, r2
   18748:	subcs	r0, r0, r1, lsl #5
   1874c:	cmp	r0, r1, lsl #4
   18750:	adc	r2, r2, r2
   18754:	subcs	r0, r0, r1, lsl #4
   18758:	cmp	r0, r1, lsl #3
   1875c:	adc	r2, r2, r2
   18760:	subcs	r0, r0, r1, lsl #3
   18764:	cmp	r0, r1, lsl #2
   18768:	adc	r2, r2, r2
   1876c:	subcs	r0, r0, r1, lsl #2
   18770:	cmp	r0, r1, lsl #1
   18774:	adc	r2, r2, r2
   18778:	subcs	r0, r0, r1, lsl #1
   1877c:	cmp	r0, r1
   18780:	adc	r2, r2, r2
   18784:	subcs	r0, r0, r1
   18788:	mov	r0, r2
   1878c:	bx	lr
   18790:	moveq	r0, #1
   18794:	movne	r0, #0
   18798:	bx	lr
   1879c:	clz	r2, r1
   187a0:	rsb	r2, r2, #31
   187a4:	lsr	r0, r0, r2
   187a8:	bx	lr
   187ac:	cmp	r0, #0
   187b0:	mvnne	r0, #0
   187b4:	b	18a54 <__assert_fail@plt+0x7574>
   187b8:	cmp	r1, #0
   187bc:	beq	187ac <__assert_fail@plt+0x72cc>
   187c0:	push	{r0, r1, lr}
   187c4:	bl	185cc <__assert_fail@plt+0x70ec>
   187c8:	pop	{r1, r2, lr}
   187cc:	mul	r3, r2, r0
   187d0:	sub	r1, r1, r3
   187d4:	bx	lr
   187d8:	cmp	r1, #0
   187dc:	beq	189e8 <__assert_fail@plt+0x7508>
   187e0:	eor	ip, r0, r1
   187e4:	rsbmi	r1, r1, #0
   187e8:	subs	r2, r1, #1
   187ec:	beq	189b4 <__assert_fail@plt+0x74d4>
   187f0:	movs	r3, r0
   187f4:	rsbmi	r3, r0, #0
   187f8:	cmp	r3, r1
   187fc:	bls	189c0 <__assert_fail@plt+0x74e0>
   18800:	tst	r1, r2
   18804:	beq	189d0 <__assert_fail@plt+0x74f0>
   18808:	clz	r2, r3
   1880c:	clz	r0, r1
   18810:	sub	r2, r0, r2
   18814:	rsbs	r2, r2, #31
   18818:	addne	r2, r2, r2, lsl #1
   1881c:	mov	r0, #0
   18820:	addne	pc, pc, r2, lsl #2
   18824:	nop			; (mov r0, r0)
   18828:	cmp	r3, r1, lsl #31
   1882c:	adc	r0, r0, r0
   18830:	subcs	r3, r3, r1, lsl #31
   18834:	cmp	r3, r1, lsl #30
   18838:	adc	r0, r0, r0
   1883c:	subcs	r3, r3, r1, lsl #30
   18840:	cmp	r3, r1, lsl #29
   18844:	adc	r0, r0, r0
   18848:	subcs	r3, r3, r1, lsl #29
   1884c:	cmp	r3, r1, lsl #28
   18850:	adc	r0, r0, r0
   18854:	subcs	r3, r3, r1, lsl #28
   18858:	cmp	r3, r1, lsl #27
   1885c:	adc	r0, r0, r0
   18860:	subcs	r3, r3, r1, lsl #27
   18864:	cmp	r3, r1, lsl #26
   18868:	adc	r0, r0, r0
   1886c:	subcs	r3, r3, r1, lsl #26
   18870:	cmp	r3, r1, lsl #25
   18874:	adc	r0, r0, r0
   18878:	subcs	r3, r3, r1, lsl #25
   1887c:	cmp	r3, r1, lsl #24
   18880:	adc	r0, r0, r0
   18884:	subcs	r3, r3, r1, lsl #24
   18888:	cmp	r3, r1, lsl #23
   1888c:	adc	r0, r0, r0
   18890:	subcs	r3, r3, r1, lsl #23
   18894:	cmp	r3, r1, lsl #22
   18898:	adc	r0, r0, r0
   1889c:	subcs	r3, r3, r1, lsl #22
   188a0:	cmp	r3, r1, lsl #21
   188a4:	adc	r0, r0, r0
   188a8:	subcs	r3, r3, r1, lsl #21
   188ac:	cmp	r3, r1, lsl #20
   188b0:	adc	r0, r0, r0
   188b4:	subcs	r3, r3, r1, lsl #20
   188b8:	cmp	r3, r1, lsl #19
   188bc:	adc	r0, r0, r0
   188c0:	subcs	r3, r3, r1, lsl #19
   188c4:	cmp	r3, r1, lsl #18
   188c8:	adc	r0, r0, r0
   188cc:	subcs	r3, r3, r1, lsl #18
   188d0:	cmp	r3, r1, lsl #17
   188d4:	adc	r0, r0, r0
   188d8:	subcs	r3, r3, r1, lsl #17
   188dc:	cmp	r3, r1, lsl #16
   188e0:	adc	r0, r0, r0
   188e4:	subcs	r3, r3, r1, lsl #16
   188e8:	cmp	r3, r1, lsl #15
   188ec:	adc	r0, r0, r0
   188f0:	subcs	r3, r3, r1, lsl #15
   188f4:	cmp	r3, r1, lsl #14
   188f8:	adc	r0, r0, r0
   188fc:	subcs	r3, r3, r1, lsl #14
   18900:	cmp	r3, r1, lsl #13
   18904:	adc	r0, r0, r0
   18908:	subcs	r3, r3, r1, lsl #13
   1890c:	cmp	r3, r1, lsl #12
   18910:	adc	r0, r0, r0
   18914:	subcs	r3, r3, r1, lsl #12
   18918:	cmp	r3, r1, lsl #11
   1891c:	adc	r0, r0, r0
   18920:	subcs	r3, r3, r1, lsl #11
   18924:	cmp	r3, r1, lsl #10
   18928:	adc	r0, r0, r0
   1892c:	subcs	r3, r3, r1, lsl #10
   18930:	cmp	r3, r1, lsl #9
   18934:	adc	r0, r0, r0
   18938:	subcs	r3, r3, r1, lsl #9
   1893c:	cmp	r3, r1, lsl #8
   18940:	adc	r0, r0, r0
   18944:	subcs	r3, r3, r1, lsl #8
   18948:	cmp	r3, r1, lsl #7
   1894c:	adc	r0, r0, r0
   18950:	subcs	r3, r3, r1, lsl #7
   18954:	cmp	r3, r1, lsl #6
   18958:	adc	r0, r0, r0
   1895c:	subcs	r3, r3, r1, lsl #6
   18960:	cmp	r3, r1, lsl #5
   18964:	adc	r0, r0, r0
   18968:	subcs	r3, r3, r1, lsl #5
   1896c:	cmp	r3, r1, lsl #4
   18970:	adc	r0, r0, r0
   18974:	subcs	r3, r3, r1, lsl #4
   18978:	cmp	r3, r1, lsl #3
   1897c:	adc	r0, r0, r0
   18980:	subcs	r3, r3, r1, lsl #3
   18984:	cmp	r3, r1, lsl #2
   18988:	adc	r0, r0, r0
   1898c:	subcs	r3, r3, r1, lsl #2
   18990:	cmp	r3, r1, lsl #1
   18994:	adc	r0, r0, r0
   18998:	subcs	r3, r3, r1, lsl #1
   1899c:	cmp	r3, r1
   189a0:	adc	r0, r0, r0
   189a4:	subcs	r3, r3, r1
   189a8:	cmp	ip, #0
   189ac:	rsbmi	r0, r0, #0
   189b0:	bx	lr
   189b4:	teq	ip, r0
   189b8:	rsbmi	r0, r0, #0
   189bc:	bx	lr
   189c0:	movcc	r0, #0
   189c4:	asreq	r0, ip, #31
   189c8:	orreq	r0, r0, #1
   189cc:	bx	lr
   189d0:	clz	r2, r1
   189d4:	rsb	r2, r2, #31
   189d8:	cmp	ip, #0
   189dc:	lsr	r0, r3, r2
   189e0:	rsbmi	r0, r0, #0
   189e4:	bx	lr
   189e8:	cmp	r0, #0
   189ec:	mvngt	r0, #-2147483648	; 0x80000000
   189f0:	movlt	r0, #-2147483648	; 0x80000000
   189f4:	b	18a54 <__assert_fail@plt+0x7574>
   189f8:	cmp	r1, #0
   189fc:	beq	189e8 <__assert_fail@plt+0x7508>
   18a00:	push	{r0, r1, lr}
   18a04:	bl	187e0 <__assert_fail@plt+0x7300>
   18a08:	pop	{r1, r2, lr}
   18a0c:	mul	r3, r2, r0
   18a10:	sub	r1, r1, r3
   18a14:	bx	lr
   18a18:	cmp	r3, #0
   18a1c:	cmpeq	r2, #0
   18a20:	bne	18a38 <__assert_fail@plt+0x7558>
   18a24:	cmp	r1, #0
   18a28:	cmpeq	r0, #0
   18a2c:	mvnne	r1, #0
   18a30:	mvnne	r0, #0
   18a34:	b	18a54 <__assert_fail@plt+0x7574>
   18a38:	sub	sp, sp, #8
   18a3c:	push	{sp, lr}
   18a40:	bl	18a64 <__assert_fail@plt+0x7584>
   18a44:	ldr	lr, [sp, #4]
   18a48:	add	sp, sp, #8
   18a4c:	pop	{r2, r3}
   18a50:	bx	lr
   18a54:	push	{r1, lr}
   18a58:	mov	r0, #8
   18a5c:	bl	1115c <raise@plt>
   18a60:	pop	{r1, pc}
   18a64:	cmp	r1, r3
   18a68:	push	{r4, r5, r6, r7, r8, r9, lr}
   18a6c:	cmpeq	r0, r2
   18a70:	mov	r4, r0
   18a74:	mov	r5, r1
   18a78:	ldr	r9, [sp, #28]
   18a7c:	movcc	r0, #0
   18a80:	movcc	r1, #0
   18a84:	bcc	18b7c <__assert_fail@plt+0x769c>
   18a88:	cmp	r3, #0
   18a8c:	clzeq	ip, r2
   18a90:	clzne	ip, r3
   18a94:	addeq	ip, ip, #32
   18a98:	cmp	r5, #0
   18a9c:	clzeq	r1, r4
   18aa0:	addeq	r1, r1, #32
   18aa4:	clzne	r1, r5
   18aa8:	sub	ip, ip, r1
   18aac:	sub	lr, ip, #32
   18ab0:	lsl	r7, r3, ip
   18ab4:	rsb	r8, ip, #32
   18ab8:	orr	r7, r7, r2, lsl lr
   18abc:	orr	r7, r7, r2, lsr r8
   18ac0:	lsl	r6, r2, ip
   18ac4:	cmp	r5, r7
   18ac8:	cmpeq	r4, r6
   18acc:	movcc	r0, #0
   18ad0:	movcc	r1, #0
   18ad4:	bcc	18af0 <__assert_fail@plt+0x7610>
   18ad8:	mov	r3, #1
   18adc:	subs	r4, r4, r6
   18ae0:	lsl	r1, r3, lr
   18ae4:	lsl	r0, r3, ip
   18ae8:	orr	r1, r1, r3, lsr r8
   18aec:	sbc	r5, r5, r7
   18af0:	cmp	ip, #0
   18af4:	beq	18b7c <__assert_fail@plt+0x769c>
   18af8:	lsrs	r3, r7, #1
   18afc:	rrx	r2, r6
   18b00:	mov	r6, ip
   18b04:	b	18b28 <__assert_fail@plt+0x7648>
   18b08:	subs	r4, r4, r2
   18b0c:	sbc	r5, r5, r3
   18b10:	adds	r4, r4, r4
   18b14:	adc	r5, r5, r5
   18b18:	adds	r4, r4, #1
   18b1c:	adc	r5, r5, #0
   18b20:	subs	r6, r6, #1
   18b24:	beq	18b44 <__assert_fail@plt+0x7664>
   18b28:	cmp	r5, r3
   18b2c:	cmpeq	r4, r2
   18b30:	bcs	18b08 <__assert_fail@plt+0x7628>
   18b34:	adds	r4, r4, r4
   18b38:	adc	r5, r5, r5
   18b3c:	subs	r6, r6, #1
   18b40:	bne	18b28 <__assert_fail@plt+0x7648>
   18b44:	lsr	r6, r4, ip
   18b48:	lsr	r7, r5, ip
   18b4c:	orr	r6, r6, r5, lsl r8
   18b50:	adds	r2, r0, r4
   18b54:	orr	r6, r6, r5, lsr lr
   18b58:	adc	r3, r1, r5
   18b5c:	lsl	r1, r7, ip
   18b60:	orr	r1, r1, r6, lsl lr
   18b64:	lsl	r0, r6, ip
   18b68:	orr	r1, r1, r6, lsr r8
   18b6c:	subs	r0, r2, r0
   18b70:	mov	r4, r6
   18b74:	mov	r5, r7
   18b78:	sbc	r1, r3, r1
   18b7c:	cmp	r9, #0
   18b80:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18b84:	strd	r4, [r9]
   18b88:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18b8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b90:	mov	r7, r0
   18b94:	ldr	r6, [pc, #72]	; 18be4 <__assert_fail@plt+0x7704>
   18b98:	ldr	r5, [pc, #72]	; 18be8 <__assert_fail@plt+0x7708>
   18b9c:	add	r6, pc, r6
   18ba0:	add	r5, pc, r5
   18ba4:	sub	r6, r6, r5
   18ba8:	mov	r8, r1
   18bac:	mov	r9, r2
   18bb0:	bl	11118 <fdopen@plt-0x20>
   18bb4:	asrs	r6, r6, #2
   18bb8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18bbc:	mov	r4, #0
   18bc0:	add	r4, r4, #1
   18bc4:	ldr	r3, [r5], #4
   18bc8:	mov	r2, r9
   18bcc:	mov	r1, r8
   18bd0:	mov	r0, r7
   18bd4:	blx	r3
   18bd8:	cmp	r6, r4
   18bdc:	bne	18bc0 <__assert_fail@plt+0x76e0>
   18be0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18be4:	andeq	r2, r1, ip, ror #6
   18be8:	andeq	r2, r1, r4, ror #6
   18bec:	bx	lr
   18bf0:	ldr	r3, [pc, #12]	; 18c04 <__assert_fail@plt+0x7724>
   18bf4:	mov	r1, #0
   18bf8:	add	r3, pc, r3
   18bfc:	ldr	r2, [r3]
   18c00:	b	113b4 <__cxa_atexit@plt>
   18c04:	andeq	r2, r1, r0, asr r5

Disassembly of section .fini:

00018c08 <.fini>:
   18c08:	push	{r3, lr}
   18c0c:	pop	{r3, pc}
