
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010d3c <.init>:
   10d3c:	push	{r3, lr}
   10d40:	bl	114bc <close@plt+0x4fc>
   10d44:	pop	{r3, pc}

Disassembly of section .plt:

00010d48 <calloc@plt-0x14>:
   10d48:	push	{lr}		; (str lr, [sp, #-4]!)
   10d4c:	ldr	lr, [pc, #4]	; 10d58 <calloc@plt-0x4>
   10d50:	add	lr, pc, lr
   10d54:	ldr	pc, [lr, #8]!
   10d58:	andeq	r7, r1, r8, lsr #5

00010d5c <calloc@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #680]!	; 0x2a8

00010d68 <fputs_unlocked@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #672]!	; 0x2a0

00010d74 <raise@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #664]!	; 0x298

00010d80 <__getdelim@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #656]!	; 0x290

00010d8c <strcmp@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #648]!	; 0x288

00010d98 <fflush@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #640]!	; 0x280

00010da4 <free@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #632]!	; 0x278

00010db0 <_exit@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #624]!	; 0x270

00010dbc <memcpy@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #616]!	; 0x268

00010dc8 <mbsinit@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #608]!	; 0x260

00010dd4 <fwrite_unlocked@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #600]!	; 0x258

00010de0 <memcmp@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #592]!	; 0x250

00010dec <fputc_unlocked@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #584]!	; 0x248

00010df8 <dcgettext@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #576]!	; 0x240

00010e04 <dup2@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #568]!	; 0x238

00010e10 <realloc@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #560]!	; 0x230

00010e1c <textdomain@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #552]!	; 0x228

00010e28 <iswprint@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #544]!	; 0x220

00010e34 <fwrite@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #536]!	; 0x218

00010e40 <lseek64@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #528]!	; 0x210

00010e4c <__ctype_get_mb_cur_max@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #520]!	; 0x208

00010e58 <__fpending@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #512]!	; 0x200

00010e64 <mbrtowc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #504]!	; 0x1f8

00010e70 <error@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #496]!	; 0x1f0

00010e7c <fnmatch@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #488]!	; 0x1e8

00010e88 <open64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #480]!	; 0x1e0

00010e94 <getenv@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #472]!	; 0x1d8

00010ea0 <puts@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #464]!	; 0x1d0

00010eac <malloc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #456]!	; 0x1c8

00010eb8 <__libc_start_main@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #448]!	; 0x1c0

00010ec4 <__freading@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #440]!	; 0x1b8

00010ed0 <__gmon_start__@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #432]!	; 0x1b0

00010edc <freopen64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #424]!	; 0x1a8

00010ee8 <getopt_long@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #416]!	; 0x1a0

00010ef4 <__ctype_b_loc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #408]!	; 0x198

00010f00 <exit@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #400]!	; 0x190

00010f0c <strlen@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #392]!	; 0x188

00010f18 <__errno_location@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #384]!	; 0x180

00010f24 <__cxa_atexit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #376]!	; 0x178

00010f30 <memset@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #368]!	; 0x170

00010f3c <__printf_chk@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #360]!	; 0x168

00010f48 <fileno@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #352]!	; 0x160

00010f54 <__fprintf_chk@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #344]!	; 0x158

00010f60 <fclose@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #336]!	; 0x150

00010f6c <fseeko64@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #328]!	; 0x148

00010f78 <setlocale@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #320]!	; 0x140

00010f84 <strrchr@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #312]!	; 0x138

00010f90 <nl_langinfo@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #304]!	; 0x130

00010f9c <bindtextdomain@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #296]!	; 0x128

00010fa8 <strncmp@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #288]!	; 0x120

00010fb4 <abort@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #280]!	; 0x118

00010fc0 <close@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #272]!	; 0x110

Disassembly of section .text:

00010fcc <_obstack_begin@@Base-0x1720>:
   10fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fd0:	mov	r6, r0
   10fd4:	sub	sp, sp, #12
   10fd8:	ldr	r0, [r1]
   10fdc:	mov	r4, r1
   10fe0:	bl	12930 <_obstack_memory_used@@Base+0x34>
   10fe4:	ldr	r1, [pc, #1036]	; 113f8 <close@plt+0x438>
   10fe8:	mov	r0, #6
   10fec:	bl	10f78 <setlocale@plt>
   10ff0:	ldr	r1, [pc, #1028]	; 113fc <close@plt+0x43c>
   10ff4:	ldr	r0, [pc, #1028]	; 11400 <close@plt+0x440>
   10ff8:	bl	10f9c <bindtextdomain@plt>
   10ffc:	ldr	r0, [pc, #1020]	; 11400 <close@plt+0x440>
   11000:	bl	10e1c <textdomain@plt>
   11004:	ldr	r0, [pc, #1016]	; 11404 <close@plt+0x444>
   11008:	bl	15a84 <_obstack_memory_used@@Base+0x3188>
   1100c:	mov	r9, #0
   11010:	ldr	r8, [pc, #1008]	; 11408 <close@plt+0x448>
   11014:	ldr	r7, [pc, #1008]	; 1140c <close@plt+0x44c>
   11018:	mov	r5, r9
   1101c:	mov	sl, #2
   11020:	mov	fp, #1
   11024:	str	r5, [sp]
   11028:	mov	r3, r8
   1102c:	mov	r2, r7
   11030:	mov	r1, r4
   11034:	mov	r0, r6
   11038:	bl	10ee8 <getopt_long@plt>
   1103c:	cmn	r0, #1
   11040:	beq	11100 <close@plt+0x140>
   11044:	cmp	r0, #98	; 0x62
   11048:	beq	110f8 <close@plt+0x138>
   1104c:	bgt	11068 <close@plt+0xa8>
   11050:	cmn	r0, #3
   11054:	beq	11080 <close@plt+0xc0>
   11058:	cmn	r0, #2
   1105c:	bne	110f0 <close@plt+0x130>
   11060:	mov	r0, #0
   11064:	bl	11d20 <close@plt+0xd60>
   11068:	cmp	r0, #99	; 0x63
   1106c:	beq	110b0 <close@plt+0xf0>
   11070:	cmp	r0, #112	; 0x70
   11074:	bne	110f0 <close@plt+0x130>
   11078:	mov	r9, fp
   1107c:	b	11024 <close@plt+0x64>
   11080:	ldr	r1, [pc, #904]	; 11410 <close@plt+0x450>
   11084:	ldr	r3, [pc, #904]	; 11414 <close@plt+0x454>
   11088:	ldr	r2, [pc, #904]	; 11418 <close@plt+0x458>
   1108c:	str	r5, [sp, #4]
   11090:	ldr	r0, [r1]
   11094:	ldr	r3, [r3]
   11098:	ldr	r1, [pc, #892]	; 1141c <close@plt+0x45c>
   1109c:	str	r2, [sp]
   110a0:	ldr	r2, [pc, #888]	; 11420 <close@plt+0x460>
   110a4:	bl	14c2c <_obstack_memory_used@@Base+0x2330>
   110a8:	mov	r0, #0
   110ac:	bl	10f00 <exit@plt>
   110b0:	mov	sl, fp
   110b4:	b	11024 <close@plt+0x64>
   110b8:	mov	r2, #5
   110bc:	ldr	r1, [pc, #864]	; 11424 <close@plt+0x464>
   110c0:	mov	r0, r8
   110c4:	bl	10df8 <dcgettext@plt>
   110c8:	cmp	r9, #0
   110cc:	mov	r5, r0
   110d0:	bne	113ac <close@plt+0x3ec>
   110d4:	ldr	r0, [fp, #4]
   110d8:	bl	147f0 <_obstack_memory_used@@Base+0x1ef4>
   110dc:	mov	r2, r5
   110e0:	mov	r1, r9
   110e4:	mov	r3, r0
   110e8:	mov	r0, r9
   110ec:	bl	10e70 <error@plt>
   110f0:	mov	r0, #1
   110f4:	bl	11d20 <close@plt+0xd60>
   110f8:	mov	sl, r5
   110fc:	b	11024 <close@plt+0x64>
   11100:	ldr	r3, [pc, #800]	; 11428 <close@plt+0x468>
   11104:	cmp	sl, #2
   11108:	moveq	r8, #0
   1110c:	andne	r8, r9, #1
   11110:	cmp	r8, #0
   11114:	ldr	r7, [r3]
   11118:	sub	r6, r6, r7
   1111c:	add	fp, r4, r7, lsl #2
   11120:	bne	11388 <close@plt+0x3c8>
   11124:	eor	r5, r9, #1
   11128:	uxtb	r3, r5
   1112c:	cmp	r6, r3
   11130:	bgt	110b8 <close@plt+0xf8>
   11134:	cmp	r9, #0
   11138:	beq	1117c <close@plt+0x1bc>
   1113c:	ldr	r6, [pc, #744]	; 1142c <close@plt+0x46c>
   11140:	ldr	r7, [pc, #744]	; 11430 <close@plt+0x470>
   11144:	mov	r4, r6
   11148:	b	11164 <close@plt+0x1a4>
   1114c:	mov	r0, r4
   11150:	bl	10ea0 <puts@plt>
   11154:	mov	r0, r4
   11158:	bl	10f0c <strlen@plt>
   1115c:	add	r0, r0, #1
   11160:	add	r4, r4, r0
   11164:	sub	r3, r4, r6
   11168:	cmp	r3, r7
   1116c:	bls	1114c <close@plt+0x18c>
   11170:	uxtb	r0, r5
   11174:	add	sp, sp, #12
   11178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1117c:	cmp	sl, #2
   11180:	beq	112e8 <close@plt+0x328>
   11184:	ldr	r3, [pc, #680]	; 11434 <close@plt+0x474>
   11188:	mov	r2, #0
   1118c:	str	r3, [sp]
   11190:	mov	r1, r2
   11194:	ldr	r3, [pc, #668]	; 11438 <close@plt+0x478>
   11198:	ldr	r0, [pc, #668]	; 1143c <close@plt+0x47c>
   1119c:	bl	126ec <_obstack_begin@@Base>
   111a0:	cmp	r6, #0
   111a4:	bne	11264 <close@plt+0x2a4>
   111a8:	mov	r1, r6
   111ac:	mov	r0, r6
   111b0:	bl	11738 <close@plt+0x778>
   111b4:	mov	r9, r0
   111b8:	cmp	r9, #0
   111bc:	moveq	r5, #1
   111c0:	beq	11170 <close@plt+0x1b0>
   111c4:	ldr	r3, [pc, #624]	; 1143c <close@plt+0x47c>
   111c8:	ldr	r6, [pc, #576]	; 11410 <close@plt+0x450>
   111cc:	ldr	r7, [pc, #620]	; 11440 <close@plt+0x480>
   111d0:	ldr	r1, [r3, #12]
   111d4:	ldr	r4, [r3, #8]
   111d8:	ldr	ip, [r3, #16]
   111dc:	cmp	r1, r4
   111e0:	ldr	r0, [r3, #4]
   111e4:	ldrbeq	r2, [r3, #40]	; 0x28
   111e8:	sub	r5, r1, r4
   111ec:	orreq	r2, r2, #2
   111f0:	strbeq	r2, [r3, #40]	; 0x28
   111f4:	ldr	r2, [r3, #24]
   111f8:	add	r1, r1, r2
   111fc:	bic	r1, r1, r2
   11200:	sub	r2, r1, r0
   11204:	sub	r0, ip, r0
   11208:	str	r1, [r3, #12]
   1120c:	cmp	r2, r0
   11210:	ldr	r1, [pc, #556]	; 11444 <close@plt+0x484>
   11214:	strhi	ip, [r3, #12]
   11218:	cmp	sl, #0
   1121c:	ldr	ip, [pc, #548]	; 11448 <close@plt+0x488>
   11220:	ldr	r2, [r3, #12]
   11224:	ldr	r0, [pc, #544]	; 1144c <close@plt+0x48c>
   11228:	movne	r0, r1
   1122c:	ldr	r1, [r6]
   11230:	movne	r7, ip
   11234:	str	r2, [r3, #8]
   11238:	bl	10d68 <fputs_unlocked@plt>
   1123c:	mov	r2, r5
   11240:	ldr	r3, [r6]
   11244:	mov	r1, #1
   11248:	mov	r0, r4
   1124c:	bl	10dd4 <fwrite_unlocked@plt>
   11250:	mov	r0, r7
   11254:	ldr	r1, [r6]
   11258:	bl	10d68 <fputs_unlocked@plt>
   1125c:	eor	r5, r9, #1
   11260:	b	11170 <close@plt+0x1b0>
   11264:	ldr	r4, [r4, r7, lsl #2]
   11268:	ldr	r1, [pc, #480]	; 11450 <close@plt+0x490>
   1126c:	mov	r0, r4
   11270:	bl	10d8c <strcmp@plt>
   11274:	ldr	r6, [pc, #472]	; 11454 <close@plt+0x494>
   11278:	cmp	r0, #0
   1127c:	beq	11298 <close@plt+0x2d8>
   11280:	ldr	r1, [pc, #464]	; 11458 <close@plt+0x498>
   11284:	mov	r0, r4
   11288:	ldr	r2, [r6]
   1128c:	bl	123b8 <close@plt+0x13f8>
   11290:	subs	r7, r0, #0
   11294:	beq	11358 <close@plt+0x398>
   11298:	mov	r1, r4
   1129c:	ldr	r0, [r6]
   112a0:	bl	11738 <close@plt+0x778>
   112a4:	mov	r9, r0
   112a8:	ldr	r0, [r6]
   112ac:	bl	12210 <close@plt+0x1250>
   112b0:	cmp	r0, #0
   112b4:	beq	111b8 <close@plt+0x1f8>
   112b8:	bl	10f18 <__errno_location@plt>
   112bc:	mov	r2, r4
   112c0:	mov	r1, #3
   112c4:	ldr	r4, [r0]
   112c8:	mov	r0, #0
   112cc:	bl	1466c <_obstack_memory_used@@Base+0x1d70>
   112d0:	mov	r1, r4
   112d4:	ldr	r2, [pc, #384]	; 1145c <close@plt+0x49c>
   112d8:	mov	r3, r0
   112dc:	mov	r0, #0
   112e0:	bl	10e70 <error@plt>
   112e4:	b	11170 <close@plt+0x1b0>
   112e8:	ldr	r0, [pc, #368]	; 11460 <close@plt+0x4a0>
   112ec:	bl	10e94 <getenv@plt>
   112f0:	subs	r3, r0, #0
   112f4:	beq	11304 <close@plt+0x344>
   112f8:	ldrb	r3, [r3]
   112fc:	cmp	r3, #0
   11300:	bne	11324 <close@plt+0x364>
   11304:	mov	r2, #5
   11308:	ldr	r1, [pc, #340]	; 11464 <close@plt+0x4a4>
   1130c:	mov	r0, #0
   11310:	bl	10df8 <dcgettext@plt>
   11314:	mov	r1, #0
   11318:	mov	r2, r0
   1131c:	mov	r0, #1
   11320:	bl	10e70 <error@plt>
   11324:	bl	12004 <close@plt+0x1044>
   11328:	ldr	r1, [pc, #312]	; 11468 <close@plt+0x4a8>
   1132c:	mov	r8, r0
   11330:	bl	10d8c <strcmp@plt>
   11334:	cmp	r0, #0
   11338:	moveq	sl, #1
   1133c:	beq	11184 <close@plt+0x1c4>
   11340:	mov	r0, r8
   11344:	ldr	r1, [pc, #288]	; 1146c <close@plt+0x4ac>
   11348:	bl	10d8c <strcmp@plt>
   1134c:	clz	sl, r0
   11350:	lsr	sl, sl, #5
   11354:	b	11184 <close@plt+0x1c4>
   11358:	bl	10f18 <__errno_location@plt>
   1135c:	mov	r2, r4
   11360:	mov	r1, #3
   11364:	ldr	r4, [r0]
   11368:	mov	r0, r7
   1136c:	bl	1466c <_obstack_memory_used@@Base+0x1d70>
   11370:	mov	r1, r4
   11374:	ldr	r2, [pc, #224]	; 1145c <close@plt+0x49c>
   11378:	mov	r3, r0
   1137c:	mov	r0, r7
   11380:	bl	10e70 <error@plt>
   11384:	b	11170 <close@plt+0x1b0>
   11388:	mov	r2, #5
   1138c:	ldr	r1, [pc, #220]	; 11470 <close@plt+0x4b0>
   11390:	mov	r0, #0
   11394:	bl	10df8 <dcgettext@plt>
   11398:	mov	r1, #0
   1139c:	mov	r2, r0
   113a0:	mov	r0, r1
   113a4:	bl	10e70 <error@plt>
   113a8:	b	110f0 <close@plt+0x130>
   113ac:	ldr	r0, [r4, r7, lsl #2]
   113b0:	bl	147f0 <_obstack_memory_used@@Base+0x1ef4>
   113b4:	mov	r2, r5
   113b8:	mov	r1, r8
   113bc:	mov	r3, r0
   113c0:	mov	r0, r8
   113c4:	bl	10e70 <error@plt>
   113c8:	ldr	r3, [pc, #164]	; 11474 <close@plt+0x4b4>
   113cc:	mov	r0, r8
   113d0:	mov	r2, #5
   113d4:	ldr	r1, [pc, #156]	; 11478 <close@plt+0x4b8>
   113d8:	ldr	r4, [r3]
   113dc:	bl	10df8 <dcgettext@plt>
   113e0:	ldr	r2, [pc, #148]	; 1147c <close@plt+0x4bc>
   113e4:	mov	r1, #1
   113e8:	mov	r3, r0
   113ec:	mov	r0, r4
   113f0:	bl	10f54 <__fprintf_chk@plt>
   113f4:	b	110f0 <close@plt+0x130>
   113f8:	andeq	r7, r1, r4, lsr #3
   113fc:	andeq	r7, r1, r8, asr #3
   11400:	andeq	r7, r1, r8, ror #1
   11404:	andeq	r2, r1, ip, lsr #2
   11408:	andeq	r6, r1, r8, ror #25
   1140c:	strdeq	r7, [r1], -r0
   11410:	andeq	r8, r2, r4, asr r1
   11414:	andeq	r8, r2, r8, ror #1
   11418:	andeq	r7, r1, r0, ror #3
   1141c:	strdeq	r6, [r1], -r4
   11420:	andeq	r7, r1, r4, ror #1
   11424:	andeq	r7, r1, ip, asr r2
   11428:	andeq	r8, r2, r0, asr #2
   1142c:	andeq	r5, r1, r8, lsr #21
   11430:	ldrdeq	r1, [r0], -r5
   11434:	andeq	r2, r1, r0, lsl r3
   11438:	strdeq	r5, [r1], -r8
   1143c:	andeq	r8, r2, ip, asr r1
   11440:	muleq	r1, r0, r1
   11444:			; <UNDEFINED> instruction: 0x000171b4
   11448:	andeq	r7, r1, ip, lsl #3
   1144c:	andeq	r7, r1, r8, lsr #3
   11450:	andeq	r7, r1, r4, lsl #5
   11454:	andeq	r8, r2, r0, asr r1
   11458:	andeq	r7, r1, r8, lsl #5
   1145c:	andeq	r7, r1, r4, ror #10
   11460:	andeq	r7, r1, r0, ror r2
   11464:	andeq	r7, r1, r8, asr #5
   11468:	andeq	r7, r1, r8, ror r2
   1146c:	andeq	r7, r1, ip, ror r2
   11470:	strdeq	r7, [r1], -r4
   11474:	andeq	r8, r2, r8, asr #2
   11478:	andeq	r7, r1, ip, lsl #5
   1147c:	andeq	r7, r1, ip, lsr #13
   11480:	mov	fp, #0
   11484:	mov	lr, #0
   11488:	pop	{r1}		; (ldr r1, [sp], #4)
   1148c:	mov	r2, sp
   11490:	push	{r2}		; (str r2, [sp, #-4]!)
   11494:	push	{r0}		; (str r0, [sp, #-4]!)
   11498:	ldr	ip, [pc, #16]	; 114b0 <close@plt+0x4f0>
   1149c:	push	{ip}		; (str ip, [sp, #-4]!)
   114a0:	ldr	r0, [pc, #12]	; 114b4 <close@plt+0x4f4>
   114a4:	ldr	r3, [pc, #12]	; 114b8 <close@plt+0x4f8>
   114a8:	bl	10eb8 <__libc_start_main@plt>
   114ac:	bl	10fb4 <abort@plt>
   114b0:	andeq	r5, r1, r0, lsl #21
   114b4:	andeq	r0, r1, ip, asr #31
   114b8:	andeq	r5, r1, r0, lsr #20
   114bc:	ldr	r3, [pc, #20]	; 114d8 <close@plt+0x518>
   114c0:	ldr	r2, [pc, #20]	; 114dc <close@plt+0x51c>
   114c4:	add	r3, pc, r3
   114c8:	ldr	r2, [r3, r2]
   114cc:	cmp	r2, #0
   114d0:	bxeq	lr
   114d4:	b	10ed0 <__gmon_start__@plt>
   114d8:	andeq	r6, r1, r4, lsr fp
   114dc:	ldrdeq	r0, [r0], -ip
   114e0:	ldr	r3, [pc, #28]	; 11504 <close@plt+0x544>
   114e4:	ldr	r0, [pc, #28]	; 11508 <close@plt+0x548>
   114e8:	sub	r3, r3, r0
   114ec:	cmp	r3, #6
   114f0:	bxls	lr
   114f4:	ldr	r3, [pc, #16]	; 1150c <close@plt+0x54c>
   114f8:	cmp	r3, #0
   114fc:	bxeq	lr
   11500:	bx	r3
   11504:	andeq	r8, r2, r7, lsr r1
   11508:	andeq	r8, r2, r4, lsr r1
   1150c:	andeq	r0, r0, r0
   11510:	ldr	r1, [pc, #36]	; 1153c <close@plt+0x57c>
   11514:	ldr	r0, [pc, #36]	; 11540 <close@plt+0x580>
   11518:	sub	r1, r1, r0
   1151c:	asr	r1, r1, #2
   11520:	add	r1, r1, r1, lsr #31
   11524:	asrs	r1, r1, #1
   11528:	bxeq	lr
   1152c:	ldr	r3, [pc, #16]	; 11544 <close@plt+0x584>
   11530:	cmp	r3, #0
   11534:	bxeq	lr
   11538:	bx	r3
   1153c:	andeq	r8, r2, r4, lsr r1
   11540:	andeq	r8, r2, r4, lsr r1
   11544:	andeq	r0, r0, r0
   11548:	push	{r4, lr}
   1154c:	ldr	r4, [pc, #24]	; 1156c <close@plt+0x5ac>
   11550:	ldrb	r3, [r4]
   11554:	cmp	r3, #0
   11558:	popne	{r4, pc}
   1155c:	bl	114e0 <close@plt+0x520>
   11560:	mov	r3, #1
   11564:	strb	r3, [r4]
   11568:	pop	{r4, pc}
   1156c:	andeq	r8, r2, r8, asr r1
   11570:	ldr	r0, [pc, #40]	; 115a0 <close@plt+0x5e0>
   11574:	ldr	r3, [r0]
   11578:	cmp	r3, #0
   1157c:	bne	11584 <close@plt+0x5c4>
   11580:	b	11510 <close@plt+0x550>
   11584:	ldr	r3, [pc, #24]	; 115a4 <close@plt+0x5e4>
   11588:	cmp	r3, #0
   1158c:	beq	11580 <close@plt+0x5c0>
   11590:	push	{r4, lr}
   11594:	blx	r3
   11598:	pop	{r4, lr}
   1159c:	b	11510 <close@plt+0x550>
   115a0:	andeq	r7, r2, r4, lsl pc
   115a4:	andeq	r0, r0, r0
   115a8:	ldrb	r3, [r0]
   115ac:	cmp	r3, #0
   115b0:	bxeq	lr
   115b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   115b8:	mov	r6, #1
   115bc:	ldr	r4, [pc, #368]	; 11734 <close@plt+0x774>
   115c0:	mov	r5, r0
   115c4:	mov	r8, r4
   115c8:	mov	r9, r6
   115cc:	mov	r7, #92	; 0x5c
   115d0:	mov	sl, #39	; 0x27
   115d4:	b	11638 <close@plt+0x678>
   115d8:	cmp	r3, #39	; 0x27
   115dc:	beq	11684 <close@plt+0x6c4>
   115e0:	cmp	r3, #58	; 0x3a
   115e4:	bne	1167c <close@plt+0x6bc>
   115e8:	cmp	r6, #0
   115ec:	beq	1167c <close@plt+0x6bc>
   115f0:	ldr	r3, [r4, #12]
   115f4:	ldr	r2, [r4, #16]
   115f8:	cmp	r2, r3
   115fc:	beq	11720 <close@plt+0x760>
   11600:	add	r2, r3, #1
   11604:	str	r2, [r4, #12]
   11608:	strb	r7, [r3]
   1160c:	ldr	r3, [r4, #12]
   11610:	ldr	r2, [r4, #16]
   11614:	cmp	r2, r3
   11618:	beq	11668 <close@plt+0x6a8>
   1161c:	add	r2, r3, #1
   11620:	str	r2, [r4, #12]
   11624:	ldrb	r2, [r5]
   11628:	strb	r2, [r3]
   1162c:	ldrb	r3, [r5, #1]!
   11630:	cmp	r3, #0
   11634:	beq	116e0 <close@plt+0x720>
   11638:	cmp	r3, #61	; 0x3d
   1163c:	beq	115e8 <close@plt+0x628>
   11640:	bls	115d8 <close@plt+0x618>
   11644:	cmp	r3, #92	; 0x5c
   11648:	beq	11654 <close@plt+0x694>
   1164c:	cmp	r3, #94	; 0x5e
   11650:	bne	1167c <close@plt+0x6bc>
   11654:	ldr	r3, [r4, #12]
   11658:	ldr	r2, [r4, #16]
   1165c:	eor	r6, r6, #1
   11660:	cmp	r2, r3
   11664:	bne	1161c <close@plt+0x65c>
   11668:	mov	r1, r9
   1166c:	mov	r0, r8
   11670:	bl	1273c <_obstack_newchunk@@Base>
   11674:	ldr	r3, [r4, #12]
   11678:	b	1161c <close@plt+0x65c>
   1167c:	mov	r6, r9
   11680:	b	1160c <close@plt+0x64c>
   11684:	ldr	r3, [r4, #12]
   11688:	ldr	r2, [r4, #16]
   1168c:	cmp	r2, r3
   11690:	beq	116e4 <close@plt+0x724>
   11694:	add	r2, r3, #1
   11698:	str	r2, [r4, #12]
   1169c:	strb	sl, [r3]
   116a0:	ldr	r3, [r4, #12]
   116a4:	ldr	r2, [r4, #16]
   116a8:	cmp	r2, r3
   116ac:	beq	1170c <close@plt+0x74c>
   116b0:	add	r2, r3, #1
   116b4:	str	r2, [r4, #12]
   116b8:	strb	r7, [r3]
   116bc:	ldr	r3, [r4, #12]
   116c0:	ldr	r2, [r4, #16]
   116c4:	cmp	r2, r3
   116c8:	beq	116f8 <close@plt+0x738>
   116cc:	add	r2, r3, #1
   116d0:	str	r2, [r4, #12]
   116d4:	mov	r6, r9
   116d8:	strb	sl, [r3]
   116dc:	b	1160c <close@plt+0x64c>
   116e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   116e4:	mov	r1, r9
   116e8:	mov	r0, r8
   116ec:	bl	1273c <_obstack_newchunk@@Base>
   116f0:	ldr	r3, [r4, #12]
   116f4:	b	11694 <close@plt+0x6d4>
   116f8:	mov	r1, r9
   116fc:	mov	r0, r8
   11700:	bl	1273c <_obstack_newchunk@@Base>
   11704:	ldr	r3, [r4, #12]
   11708:	b	116cc <close@plt+0x70c>
   1170c:	mov	r1, r9
   11710:	mov	r0, r8
   11714:	bl	1273c <_obstack_newchunk@@Base>
   11718:	ldr	r3, [r4, #12]
   1171c:	b	116b0 <close@plt+0x6f0>
   11720:	mov	r1, r9
   11724:	mov	r0, r8
   11728:	bl	1273c <_obstack_newchunk@@Base>
   1172c:	ldr	r3, [r4, #12]
   11730:	b	11600 <close@plt+0x640>
   11734:	andeq	r8, r2, ip, asr r1
   11738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1173c:	sub	sp, sp, #44	; 0x2c
   11740:	mov	r3, #0
   11744:	mov	r7, r0
   11748:	ldr	r0, [pc, #1436]	; 11cec <close@plt+0xd2c>
   1174c:	str	r3, [sp, #32]
   11750:	str	r3, [sp, #36]	; 0x24
   11754:	str	r1, [sp, #24]
   11758:	bl	10e94 <getenv@plt>
   1175c:	subs	r3, r0, #0
   11760:	beq	11ca0 <close@plt+0xce0>
   11764:	ldrb	r2, [r3]
   11768:	mov	r1, r3
   1176c:	ldr	r3, [pc, #1404]	; 11cf0 <close@plt+0xd30>
   11770:	cmp	r2, #0
   11774:	moveq	r1, r3
   11778:	str	r1, [sp, #20]
   1177c:	ldr	fp, [pc, #1392]	; 11cf4 <close@plt+0xd34>
   11780:	mov	r8, #3
   11784:	add	r3, fp, #4288	; 0x10c0
   11788:	add	r3, r3, #22
   1178c:	mov	r6, #0
   11790:	str	r3, [sp, #12]
   11794:	mov	r3, #1
   11798:	str	r3, [sp, #16]
   1179c:	cmp	r7, #0
   117a0:	add	r6, r6, #1
   117a4:	beq	11a94 <close@plt+0xad4>
   117a8:	mov	r3, r7
   117ac:	mov	r2, #10
   117b0:	add	r1, sp, #36	; 0x24
   117b4:	add	r0, sp, #32
   117b8:	bl	10d80 <__getdelim@plt>
   117bc:	cmp	r0, #0
   117c0:	ble	11b50 <close@plt+0xb90>
   117c4:	ldr	r5, [sp, #32]
   117c8:	bl	10ef4 <__ctype_b_loc@plt>
   117cc:	ldr	r1, [r0]
   117d0:	mov	r4, r0
   117d4:	mov	r3, r5
   117d8:	ldrb	r2, [r3], #1
   117dc:	lsl	r0, r2, #1
   117e0:	ldrh	r0, [r1, r0]
   117e4:	tst	r0, #8192	; 0x2000
   117e8:	bne	118c0 <close@plt+0x900>
   117ec:	cmp	r2, #35	; 0x23
   117f0:	cmpne	r2, #0
   117f4:	beq	1179c <close@plt+0x7dc>
   117f8:	mov	r9, r5
   117fc:	ldrb	r3, [r9, #1]!
   11800:	lsl	r2, r3, #1
   11804:	ldrh	sl, [r1, r2]
   11808:	lsr	sl, sl, #13
   1180c:	eor	sl, sl, #1
   11810:	cmp	r3, #0
   11814:	moveq	sl, #0
   11818:	andne	sl, sl, #1
   1181c:	cmp	sl, #0
   11820:	bne	117fc <close@plt+0x83c>
   11824:	sub	r1, r9, r5
   11828:	mov	r0, r5
   1182c:	bl	15218 <_obstack_memory_used@@Base+0x291c>
   11830:	ldrb	r3, [r9]
   11834:	cmp	r3, #0
   11838:	mov	r5, r0
   1183c:	ldrne	r0, [r4]
   11840:	beq	11ae8 <close@plt+0xb28>
   11844:	ldrb	r3, [r9, #1]!
   11848:	lsl	r2, r3, #1
   1184c:	ldrh	r2, [r0, r2]
   11850:	tst	r2, #8192	; 0x2000
   11854:	bne	11844 <close@plt+0x884>
   11858:	cmp	r3, #35	; 0x23
   1185c:	cmpne	r3, #0
   11860:	movne	r3, r9
   11864:	bne	11870 <close@plt+0x8b0>
   11868:	b	11ae8 <close@plt+0xb28>
   1186c:	mov	r3, r1
   11870:	ldrb	r4, [r3, #1]
   11874:	add	r1, r3, #1
   11878:	cmp	r4, #0
   1187c:	cmpne	r4, #35	; 0x23
   11880:	movne	r4, #1
   11884:	moveq	r4, #0
   11888:	bne	1186c <close@plt+0x8ac>
   1188c:	ldrb	r2, [r1, #-1]
   11890:	lsl	r2, r2, #1
   11894:	ldrh	r2, [r0, r2]
   11898:	tst	r2, #8192	; 0x2000
   1189c:	beq	118c8 <close@plt+0x908>
   118a0:	ldrb	r2, [r3, #-1]
   118a4:	sub	r1, r3, #1
   118a8:	lsl	r2, r2, #1
   118ac:	ldrh	r2, [r0, r2]
   118b0:	tst	r2, #8192	; 0x2000
   118b4:	beq	11b3c <close@plt+0xb7c>
   118b8:	mov	r3, r1
   118bc:	b	118a0 <close@plt+0x8e0>
   118c0:	mov	r5, r3
   118c4:	b	117d4 <close@plt+0x814>
   118c8:	sub	r1, r1, r9
   118cc:	mov	r0, r9
   118d0:	bl	15218 <_obstack_memory_used@@Base+0x291c>
   118d4:	mov	sl, r0
   118d8:	ldr	r1, [pc, #1036]	; 11cec <close@plt+0xd2c>
   118dc:	mov	r0, r5
   118e0:	bl	120b0 <close@plt+0x10f0>
   118e4:	subs	r2, r0, #0
   118e8:	beq	11ab8 <close@plt+0xaf8>
   118ec:	cmp	r8, #2
   118f0:	beq	11b34 <close@plt+0xb74>
   118f4:	cmp	r8, #0
   118f8:	beq	11a78 <close@plt+0xab8>
   118fc:	ldrb	r3, [r5]
   11900:	cmp	r3, #46	; 0x2e
   11904:	beq	11a04 <close@plt+0xa44>
   11908:	cmp	r3, #42	; 0x2a
   1190c:	beq	11b64 <close@plt+0xba4>
   11910:	ldr	r1, [pc, #992]	; 11cf8 <close@plt+0xd38>
   11914:	mov	r0, r5
   11918:	bl	120b0 <close@plt+0x10f0>
   1191c:	cmp	r0, #0
   11920:	beq	11a78 <close@plt+0xab8>
   11924:	ldr	r1, [pc, #976]	; 11cfc <close@plt+0xd3c>
   11928:	mov	r0, r5
   1192c:	bl	120b0 <close@plt+0x10f0>
   11930:	cmp	r0, #0
   11934:	beq	11a78 <close@plt+0xab8>
   11938:	ldr	r1, [pc, #960]	; 11d00 <close@plt+0xd40>
   1193c:	mov	r0, r5
   11940:	bl	120b0 <close@plt+0x10f0>
   11944:	cmp	r0, #0
   11948:	beq	11a78 <close@plt+0xab8>
   1194c:	ldr	r3, [pc, #944]	; 11d04 <close@plt+0xd44>
   11950:	str	r4, [sp, #28]
   11954:	mov	r2, r3
   11958:	ldr	r3, [pc, #936]	; 11d08 <close@plt+0xd48>
   1195c:	mov	r9, #0
   11960:	mov	r1, r3
   11964:	mov	r4, r2
   11968:	b	1197c <close@plt+0x9bc>
   1196c:	ldr	r1, [r4, #4]!
   11970:	add	r9, r9, #1
   11974:	cmp	r1, #0
   11978:	beq	11c10 <close@plt+0xc50>
   1197c:	mov	r0, r5
   11980:	bl	120b0 <close@plt+0x10f0>
   11984:	cmp	r0, #0
   11988:	bne	1196c <close@plt+0x9ac>
   1198c:	ldr	r4, [pc, #888]	; 11d0c <close@plt+0xd4c>
   11990:	ldr	r2, [r4, #16]
   11994:	ldr	r3, [r4, #12]
   11998:	cmp	r2, r3
   1199c:	beq	11cdc <close@plt+0xd1c>
   119a0:	ldr	r3, [pc, #872]	; 11d10 <close@plt+0xd50>
   119a4:	ldr	r2, [r4, #12]
   119a8:	add	r9, r3, r9, lsl #2
   119ac:	add	r3, r2, #1
   119b0:	ldr	r9, [r9, #-3720]	; 0xfffff178
   119b4:	str	r3, [r4, #12]
   119b8:	ldrb	r3, [r9]
   119bc:	strb	r3, [r2]
   119c0:	ldr	r2, [r4, #16]
   119c4:	ldr	r3, [r4, #12]
   119c8:	cmp	r2, r3
   119cc:	beq	11ccc <close@plt+0xd0c>
   119d0:	ldr	r3, [r4, #12]
   119d4:	add	r2, r3, #1
   119d8:	str	r2, [r4, #12]
   119dc:	ldrb	r2, [r9, #1]
   119e0:	strb	r2, [r3]
   119e4:	ldr	r2, [r4, #16]
   119e8:	ldr	r3, [r4, #12]
   119ec:	cmp	r2, r3
   119f0:	bne	11b80 <close@plt+0xbc0>
   119f4:	mov	r1, #1
   119f8:	ldr	r0, [pc, #780]	; 11d0c <close@plt+0xd4c>
   119fc:	bl	1273c <_obstack_newchunk@@Base>
   11a00:	b	11b80 <close@plt+0xbc0>
   11a04:	ldr	r4, [pc, #768]	; 11d0c <close@plt+0xd4c>
   11a08:	ldr	r3, [r4, #12]
   11a0c:	ldr	r2, [r4, #16]
   11a10:	cmp	r2, r3
   11a14:	beq	11bfc <close@plt+0xc3c>
   11a18:	add	r1, r3, #1
   11a1c:	mov	r2, #42	; 0x2a
   11a20:	str	r1, [r4, #12]
   11a24:	mov	r0, r5
   11a28:	strb	r2, [r3]
   11a2c:	bl	115a8 <close@plt+0x5e8>
   11a30:	ldr	r3, [r4, #12]
   11a34:	ldr	r2, [r4, #16]
   11a38:	cmp	r2, r3
   11a3c:	beq	11be8 <close@plt+0xc28>
   11a40:	add	r1, r3, #1
   11a44:	mov	r2, #61	; 0x3d
   11a48:	str	r1, [r4, #12]
   11a4c:	mov	r0, sl
   11a50:	strb	r2, [r3]
   11a54:	bl	115a8 <close@plt+0x5e8>
   11a58:	ldr	r3, [r4, #12]
   11a5c:	ldr	r2, [r4, #16]
   11a60:	cmp	r2, r3
   11a64:	beq	11bd4 <close@plt+0xc14>
   11a68:	add	r1, r3, #1
   11a6c:	mov	r2, #58	; 0x3a
   11a70:	str	r1, [r4, #12]
   11a74:	strb	r2, [r3]
   11a78:	mov	r0, r5
   11a7c:	bl	12310 <close@plt+0x1350>
   11a80:	mov	r0, sl
   11a84:	bl	12310 <close@plt+0x1350>
   11a88:	cmp	r7, #0
   11a8c:	add	r6, r6, #1
   11a90:	bne	117a8 <close@plt+0x7e8>
   11a94:	ldr	r3, [sp, #12]
   11a98:	cmp	fp, r3
   11a9c:	beq	11b58 <close@plt+0xb98>
   11aa0:	mov	r0, fp
   11aa4:	bl	10f0c <strlen@plt>
   11aa8:	mov	r5, fp
   11aac:	add	r0, r0, #1
   11ab0:	add	fp, fp, r0
   11ab4:	b	117c8 <close@plt+0x808>
   11ab8:	ldr	r1, [sp, #20]
   11abc:	mov	r0, sl
   11ac0:	bl	10e7c <fnmatch@plt>
   11ac4:	cmp	r0, #0
   11ac8:	cmpne	r8, #2
   11acc:	mov	r0, r5
   11ad0:	movne	r8, #0
   11ad4:	moveq	r8, #2
   11ad8:	bl	12310 <close@plt+0x1350>
   11adc:	mov	r0, sl
   11ae0:	bl	12310 <close@plt+0x1350>
   11ae4:	b	11a88 <close@plt+0xac8>
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #544]	; 11d14 <close@plt+0xd54>
   11af0:	mov	r0, #0
   11af4:	bl	10df8 <dcgettext@plt>
   11af8:	ldr	r2, [sp, #24]
   11afc:	mov	r1, #3
   11b00:	mov	r4, r0
   11b04:	mov	r0, #0
   11b08:	bl	1466c <_obstack_memory_used@@Base+0x1d70>
   11b0c:	mov	r1, #0
   11b10:	mov	r2, r4
   11b14:	str	r6, [sp]
   11b18:	str	sl, [sp, #16]
   11b1c:	mov	r3, r0
   11b20:	mov	r0, r1
   11b24:	bl	10e70 <error@plt>
   11b28:	mov	r0, r5
   11b2c:	bl	12310 <close@plt+0x1350>
   11b30:	b	1179c <close@plt+0x7dc>
   11b34:	mov	r8, #1
   11b38:	b	118fc <close@plt+0x93c>
   11b3c:	sub	r1, r3, r9
   11b40:	mov	r0, r9
   11b44:	bl	15218 <_obstack_memory_used@@Base+0x291c>
   11b48:	mov	sl, r0
   11b4c:	b	118d8 <close@plt+0x918>
   11b50:	ldr	r0, [sp, #32]
   11b54:	bl	12310 <close@plt+0x1350>
   11b58:	ldr	r0, [sp, #16]
   11b5c:	add	sp, sp, #44	; 0x2c
   11b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b64:	ldr	r4, [pc, #416]	; 11d0c <close@plt+0xd4c>
   11b68:	mov	r0, r5
   11b6c:	bl	115a8 <close@plt+0x5e8>
   11b70:	ldr	r2, [r4, #16]
   11b74:	ldr	r3, [r4, #12]
   11b78:	cmp	r2, r3
   11b7c:	beq	11cbc <close@plt+0xcfc>
   11b80:	ldr	r3, [r4, #12]
   11b84:	mov	r2, #61	; 0x3d
   11b88:	add	r1, r3, #1
   11b8c:	str	r1, [r4, #12]
   11b90:	mov	r0, sl
   11b94:	strb	r2, [r3]
   11b98:	bl	115a8 <close@plt+0x5e8>
   11b9c:	ldr	r2, [r4, #16]
   11ba0:	ldr	r3, [r4, #12]
   11ba4:	cmp	r2, r3
   11ba8:	beq	11cac <close@plt+0xcec>
   11bac:	ldr	r3, [r4, #12]
   11bb0:	mov	r2, #58	; 0x3a
   11bb4:	add	r1, r3, #1
   11bb8:	str	r1, [r4, #12]
   11bbc:	mov	r0, r5
   11bc0:	strb	r2, [r3]
   11bc4:	bl	12310 <close@plt+0x1350>
   11bc8:	mov	r0, sl
   11bcc:	bl	12310 <close@plt+0x1350>
   11bd0:	b	11a88 <close@plt+0xac8>
   11bd4:	mov	r1, #1
   11bd8:	ldr	r0, [pc, #300]	; 11d0c <close@plt+0xd4c>
   11bdc:	bl	1273c <_obstack_newchunk@@Base>
   11be0:	ldr	r3, [r4, #12]
   11be4:	b	11a68 <close@plt+0xaa8>
   11be8:	mov	r1, #1
   11bec:	ldr	r0, [pc, #280]	; 11d0c <close@plt+0xd4c>
   11bf0:	bl	1273c <_obstack_newchunk@@Base>
   11bf4:	ldr	r3, [r4, #12]
   11bf8:	b	11a40 <close@plt+0xa80>
   11bfc:	mov	r1, #1
   11c00:	mov	r0, r4
   11c04:	bl	1273c <_obstack_newchunk@@Base>
   11c08:	ldr	r3, [r4, #12]
   11c0c:	b	11a18 <close@plt+0xa58>
   11c10:	cmp	r8, #3
   11c14:	mov	r3, r1
   11c18:	ldr	r4, [sp, #28]
   11c1c:	beq	11a78 <close@plt+0xab8>
   11c20:	mov	r2, #5
   11c24:	ldr	r1, [pc, #236]	; 11d18 <close@plt+0xd58>
   11c28:	mov	r0, r3
   11c2c:	str	r3, [sp, #16]
   11c30:	bl	10df8 <dcgettext@plt>
   11c34:	ldr	r2, [sp, #24]
   11c38:	cmp	r2, #0
   11c3c:	mov	r9, r0
   11c40:	beq	11c88 <close@plt+0xcc8>
   11c44:	ldr	r3, [sp, #16]
   11c48:	mov	r1, #3
   11c4c:	mov	r0, r3
   11c50:	bl	1466c <_obstack_memory_used@@Base+0x1d70>
   11c54:	mov	r3, r0
   11c58:	mov	r1, #0
   11c5c:	mov	r0, r1
   11c60:	mov	r2, r9
   11c64:	str	r5, [sp, #4]
   11c68:	str	r6, [sp]
   11c6c:	bl	10e70 <error@plt>
   11c70:	mov	r0, r5
   11c74:	str	r4, [sp, #16]
   11c78:	bl	12310 <close@plt+0x1350>
   11c7c:	mov	r0, sl
   11c80:	bl	12310 <close@plt+0x1350>
   11c84:	b	11a88 <close@plt+0xac8>
   11c88:	mov	r2, #5
   11c8c:	ldr	r1, [pc, #136]	; 11d1c <close@plt+0xd5c>
   11c90:	ldr	r0, [sp, #24]
   11c94:	bl	10df8 <dcgettext@plt>
   11c98:	mov	r3, r0
   11c9c:	b	11c58 <close@plt+0xc98>
   11ca0:	ldr	r3, [pc, #72]	; 11cf0 <close@plt+0xd30>
   11ca4:	str	r3, [sp, #20]
   11ca8:	b	1177c <close@plt+0x7bc>
   11cac:	mov	r1, #1
   11cb0:	ldr	r0, [pc, #84]	; 11d0c <close@plt+0xd4c>
   11cb4:	bl	1273c <_obstack_newchunk@@Base>
   11cb8:	b	11bac <close@plt+0xbec>
   11cbc:	mov	r1, #1
   11cc0:	mov	r0, r4
   11cc4:	bl	1273c <_obstack_newchunk@@Base>
   11cc8:	b	11b80 <close@plt+0xbc0>
   11ccc:	mov	r1, #1
   11cd0:	ldr	r0, [pc, #52]	; 11d0c <close@plt+0xd4c>
   11cd4:	bl	1273c <_obstack_newchunk@@Base>
   11cd8:	b	119d0 <close@plt+0xa10>
   11cdc:	mov	r1, #1
   11ce0:	mov	r0, r4
   11ce4:	bl	1273c <_obstack_newchunk@@Base>
   11ce8:	b	119a0 <close@plt+0x9e0>
   11cec:	andeq	r6, r1, r8, ror sp
   11cf0:	andeq	r6, r1, r8, ror #26
   11cf4:	andeq	r5, r1, r8, lsr #21
   11cf8:	andeq	r6, r1, ip, lsr #27
   11cfc:			; <UNDEFINED> instruction: 0x00016db4
   11d00:			; <UNDEFINED> instruction: 0x00016dbc
   11d04:	andeq	r6, r1, r0, lsl #23
   11d08:	andeq	r6, r1, r0, ror sp
   11d0c:	andeq	r8, r2, ip, asr r1
   11d10:	andeq	r7, r1, r0, lsr #21
   11d14:	andeq	r6, r1, r0, lsl #27
   11d18:	andeq	r6, r1, r8, asr #27
   11d1c:	andeq	r6, r1, r8, ror #27
   11d20:	subs	r6, r0, #0
   11d24:	push	{r7, lr}
   11d28:	sub	sp, sp, #56	; 0x38
   11d2c:	beq	11d68 <close@plt+0xda8>
   11d30:	ldr	r3, [pc, #636]	; 11fb4 <close@plt+0xff4>
   11d34:	mov	r2, #5
   11d38:	ldr	r1, [pc, #632]	; 11fb8 <close@plt+0xff8>
   11d3c:	mov	r0, #0
   11d40:	ldr	r4, [r3]
   11d44:	bl	10df8 <dcgettext@plt>
   11d48:	ldr	r3, [pc, #620]	; 11fbc <close@plt+0xffc>
   11d4c:	mov	r1, #1
   11d50:	ldr	r3, [r3]
   11d54:	mov	r2, r0
   11d58:	mov	r0, r4
   11d5c:	bl	10f54 <__fprintf_chk@plt>
   11d60:	mov	r0, r6
   11d64:	bl	10f00 <exit@plt>
   11d68:	mov	r2, #5
   11d6c:	ldr	r1, [pc, #588]	; 11fc0 <close@plt+0x1000>
   11d70:	bl	10df8 <dcgettext@plt>
   11d74:	ldr	r3, [pc, #576]	; 11fbc <close@plt+0xffc>
   11d78:	ldr	r7, [pc, #580]	; 11fc4 <close@plt+0x1004>
   11d7c:	ldr	r4, [pc, #580]	; 11fc8 <close@plt+0x1008>
   11d80:	ldr	r2, [r3]
   11d84:	mov	r1, r0
   11d88:	mov	r0, #1
   11d8c:	bl	10f3c <__printf_chk@plt>
   11d90:	mov	r2, #5
   11d94:	ldr	r1, [pc, #560]	; 11fcc <close@plt+0x100c>
   11d98:	mov	r0, r6
   11d9c:	bl	10df8 <dcgettext@plt>
   11da0:	ldr	r1, [r7]
   11da4:	bl	10d68 <fputs_unlocked@plt>
   11da8:	mov	r2, #5
   11dac:	ldr	r1, [pc, #540]	; 11fd0 <close@plt+0x1010>
   11db0:	mov	r0, r6
   11db4:	bl	10df8 <dcgettext@plt>
   11db8:	ldr	r1, [r7]
   11dbc:	bl	10d68 <fputs_unlocked@plt>
   11dc0:	mov	r2, #5
   11dc4:	ldr	r1, [pc, #520]	; 11fd4 <close@plt+0x1014>
   11dc8:	mov	r0, r6
   11dcc:	bl	10df8 <dcgettext@plt>
   11dd0:	ldr	r1, [r7]
   11dd4:	bl	10d68 <fputs_unlocked@plt>
   11dd8:	mov	r2, #5
   11ddc:	ldr	r1, [pc, #500]	; 11fd8 <close@plt+0x1018>
   11de0:	mov	r0, r6
   11de4:	bl	10df8 <dcgettext@plt>
   11de8:	ldr	r1, [r7]
   11dec:	bl	10d68 <fputs_unlocked@plt>
   11df0:	ldm	r4!, {r0, r1, r2, r3}
   11df4:	mov	lr, sp
   11df8:	stmia	lr!, {r0, r1, r2, r3}
   11dfc:	ldm	r4!, {r0, r1, r2, r3}
   11e00:	ldr	ip, [sp]
   11e04:	stmia	lr!, {r0, r1, r2, r3}
   11e08:	cmp	ip, #0
   11e0c:	ldm	r4!, {r0, r1, r2, r3}
   11e10:	stmia	lr!, {r0, r1, r2, r3}
   11e14:	ldm	r4, {r0, r1}
   11e18:	moveq	r4, sp
   11e1c:	stm	lr, {r0, r1}
   11e20:	beq	11e50 <close@plt+0xe90>
   11e24:	ldr	r5, [pc, #432]	; 11fdc <close@plt+0x101c>
   11e28:	mov	r4, sp
   11e2c:	b	11e3c <close@plt+0xe7c>
   11e30:	ldr	ip, [r4, #8]!
   11e34:	cmp	ip, #0
   11e38:	beq	11e50 <close@plt+0xe90>
   11e3c:	mov	r1, ip
   11e40:	mov	r0, r5
   11e44:	bl	10d8c <strcmp@plt>
   11e48:	cmp	r0, #0
   11e4c:	bne	11e30 <close@plt+0xe70>
   11e50:	ldr	r4, [r4, #4]
   11e54:	mov	r2, #5
   11e58:	cmp	r4, #0
   11e5c:	ldr	r1, [pc, #380]	; 11fe0 <close@plt+0x1020>
   11e60:	beq	11f08 <close@plt+0xf48>
   11e64:	mov	r0, #0
   11e68:	bl	10df8 <dcgettext@plt>
   11e6c:	ldr	r3, [pc, #368]	; 11fe4 <close@plt+0x1024>
   11e70:	ldr	r2, [pc, #368]	; 11fe8 <close@plt+0x1028>
   11e74:	mov	r1, r0
   11e78:	mov	r0, #1
   11e7c:	bl	10f3c <__printf_chk@plt>
   11e80:	mov	r1, #0
   11e84:	mov	r0, #5
   11e88:	bl	10f78 <setlocale@plt>
   11e8c:	cmp	r0, #0
   11e90:	ldreq	r5, [pc, #324]	; 11fdc <close@plt+0x101c>
   11e94:	beq	11eb0 <close@plt+0xef0>
   11e98:	mov	r2, #3
   11e9c:	ldr	r1, [pc, #328]	; 11fec <close@plt+0x102c>
   11ea0:	bl	10fa8 <strncmp@plt>
   11ea4:	ldr	r5, [pc, #304]	; 11fdc <close@plt+0x101c>
   11ea8:	cmp	r0, #0
   11eac:	bne	11f98 <close@plt+0xfd8>
   11eb0:	mov	r2, #5
   11eb4:	ldr	r1, [pc, #308]	; 11ff0 <close@plt+0x1030>
   11eb8:	mov	r0, #0
   11ebc:	bl	10df8 <dcgettext@plt>
   11ec0:	ldr	r3, [pc, #276]	; 11fdc <close@plt+0x101c>
   11ec4:	ldr	r2, [pc, #280]	; 11fe4 <close@plt+0x1024>
   11ec8:	mov	r1, r0
   11ecc:	mov	r0, #1
   11ed0:	bl	10f3c <__printf_chk@plt>
   11ed4:	mov	r2, #5
   11ed8:	ldr	r1, [pc, #276]	; 11ff4 <close@plt+0x1034>
   11edc:	mov	r0, #0
   11ee0:	bl	10df8 <dcgettext@plt>
   11ee4:	ldr	r2, [pc, #268]	; 11ff8 <close@plt+0x1038>
   11ee8:	cmp	r4, r5
   11eec:	ldr	r3, [pc, #264]	; 11ffc <close@plt+0x103c>
   11ef0:	movne	r3, r2
   11ef4:	mov	r1, r0
   11ef8:	mov	r2, r4
   11efc:	mov	r0, #1
   11f00:	bl	10f3c <__printf_chk@plt>
   11f04:	b	11d60 <close@plt+0xda0>
   11f08:	mov	r0, r4
   11f0c:	bl	10df8 <dcgettext@plt>
   11f10:	ldr	r3, [pc, #204]	; 11fe4 <close@plt+0x1024>
   11f14:	ldr	r2, [pc, #204]	; 11fe8 <close@plt+0x1028>
   11f18:	mov	r1, r0
   11f1c:	mov	r0, #1
   11f20:	bl	10f3c <__printf_chk@plt>
   11f24:	mov	r1, r4
   11f28:	mov	r0, #5
   11f2c:	bl	10f78 <setlocale@plt>
   11f30:	cmp	r0, #0
   11f34:	beq	11f4c <close@plt+0xf8c>
   11f38:	mov	r2, #3
   11f3c:	ldr	r1, [pc, #168]	; 11fec <close@plt+0x102c>
   11f40:	bl	10fa8 <strncmp@plt>
   11f44:	cmp	r0, #0
   11f48:	bne	11f90 <close@plt+0xfd0>
   11f4c:	mov	r2, #5
   11f50:	ldr	r1, [pc, #152]	; 11ff0 <close@plt+0x1030>
   11f54:	mov	r0, #0
   11f58:	bl	10df8 <dcgettext@plt>
   11f5c:	ldr	r3, [pc, #120]	; 11fdc <close@plt+0x101c>
   11f60:	ldr	r2, [pc, #124]	; 11fe4 <close@plt+0x1024>
   11f64:	mov	r4, r3
   11f68:	mov	r1, r0
   11f6c:	mov	r0, #1
   11f70:	bl	10f3c <__printf_chk@plt>
   11f74:	ldr	r1, [pc, #120]	; 11ff4 <close@plt+0x1034>
   11f78:	mov	r2, #5
   11f7c:	mov	r0, #0
   11f80:	bl	10df8 <dcgettext@plt>
   11f84:	ldr	r3, [pc, #112]	; 11ffc <close@plt+0x103c>
   11f88:	mov	r1, r0
   11f8c:	b	11ef8 <close@plt+0xf38>
   11f90:	ldr	r5, [pc, #68]	; 11fdc <close@plt+0x101c>
   11f94:	mov	r4, r5
   11f98:	mov	r2, #5
   11f9c:	ldr	r1, [pc, #92]	; 12000 <close@plt+0x1040>
   11fa0:	mov	r0, #0
   11fa4:	bl	10df8 <dcgettext@plt>
   11fa8:	ldr	r1, [r7]
   11fac:	bl	10d68 <fputs_unlocked@plt>
   11fb0:	b	11eb0 <close@plt+0xef0>
   11fb4:	andeq	r8, r2, r8, asr #2
   11fb8:	andeq	r6, r1, r0, lsl #28
   11fbc:	muleq	r2, r0, r1
   11fc0:	andeq	r6, r1, r8, lsr #28
   11fc4:	andeq	r8, r2, r4, asr r1
   11fc8:			; <UNDEFINED> instruction: 0x00016cb0
   11fcc:	andeq	r6, r1, r8, asr #28
   11fd0:	andeq	r6, r1, ip, asr pc
   11fd4:	andeq	r6, r1, ip, lsl #31
   11fd8:	andeq	r6, r1, r4, asr #31
   11fdc:	strdeq	r6, [r1], -r4
   11fe0:	andeq	r7, r1, r4, lsr #1
   11fe4:	strheq	r7, [r1], -ip
   11fe8:	andeq	r7, r1, r4, ror #1
   11fec:	strdeq	r7, [r1], -r4
   11ff0:	andeq	r7, r1, r0, asr #2
   11ff4:	andeq	r7, r1, ip, asr r1
   11ff8:	andeq	r7, r1, r4, lsr #3
   11ffc:	andeq	r7, r1, r0, lsl r3
   12000:	strdeq	r7, [r1], -r8
   12004:	ldrb	r3, [r0]
   12008:	cmp	r3, #47	; 0x2f
   1200c:	bne	1201c <close@plt+0x105c>
   12010:	ldrb	r3, [r0, #1]!
   12014:	cmp	r3, #47	; 0x2f
   12018:	beq	12010 <close@plt+0x1050>
   1201c:	cmp	r3, #0
   12020:	bxeq	lr
   12024:	mov	r2, #0
   12028:	push	{lr}		; (str lr, [sp, #-4]!)
   1202c:	mov	ip, r2
   12030:	mov	r1, r0
   12034:	mov	lr, #1
   12038:	cmp	r3, #47	; 0x2f
   1203c:	moveq	r2, lr
   12040:	beq	12050 <close@plt+0x1090>
   12044:	cmp	r2, #0
   12048:	movne	r0, r1
   1204c:	movne	r2, ip
   12050:	ldrb	r3, [r1, #1]!
   12054:	cmp	r3, #0
   12058:	bne	12038 <close@plt+0x1078>
   1205c:	pop	{pc}		; (ldr pc, [sp], #4)
   12060:	push	{r4, lr}
   12064:	mov	r4, r0
   12068:	bl	10f0c <strlen@plt>
   1206c:	cmp	r0, #1
   12070:	popls	{r4, pc}
   12074:	sub	r3, r0, #1
   12078:	add	r2, r4, r3
   1207c:	ldrb	r1, [r4, r3]
   12080:	cmp	r1, #47	; 0x2f
   12084:	popne	{r4, pc}
   12088:	cmp	r3, #1
   1208c:	beq	120a0 <close@plt+0x10e0>
   12090:	ldrb	r1, [r2, #-1]!
   12094:	sub	r0, r3, #1
   12098:	cmp	r1, #47	; 0x2f
   1209c:	beq	120a8 <close@plt+0x10e8>
   120a0:	mov	r0, r3
   120a4:	pop	{r4, pc}
   120a8:	mov	r3, r0
   120ac:	b	12088 <close@plt+0x10c8>
   120b0:	cmp	r0, r1
   120b4:	beq	12104 <close@plt+0x1144>
   120b8:	sub	r2, r0, #1
   120bc:	sub	r1, r1, #1
   120c0:	b	120cc <close@plt+0x110c>
   120c4:	cmp	r0, r3
   120c8:	bne	120fc <close@plt+0x113c>
   120cc:	ldrb	r0, [r2, #1]!
   120d0:	sub	r3, r0, #65	; 0x41
   120d4:	cmp	r3, #25
   120d8:	ldrb	r3, [r1, #1]!
   120dc:	addls	r0, r0, #32
   120e0:	sub	ip, r3, #65	; 0x41
   120e4:	cmp	ip, #25
   120e8:	addls	r3, r3, #32
   120ec:	uxtb	r0, r0
   120f0:	cmp	r0, #0
   120f4:	uxtb	r3, r3
   120f8:	bne	120c4 <close@plt+0x1104>
   120fc:	sub	r0, r0, r3
   12100:	bx	lr
   12104:	mov	r0, #0
   12108:	bx	lr
   1210c:	ldr	r3, [pc, #4]	; 12118 <close@plt+0x1158>
   12110:	str	r0, [r3]
   12114:	bx	lr
   12118:	andeq	r8, r2, r8, lsl #3
   1211c:	ldr	r3, [pc, #4]	; 12128 <close@plt+0x1168>
   12120:	strb	r0, [r3, #4]
   12124:	bx	lr
   12128:	andeq	r8, r2, r8, lsl #3
   1212c:	ldr	r3, [pc, #192]	; 121f4 <close@plt+0x1234>
   12130:	push	{r4, r5, r6, lr}
   12134:	sub	sp, sp, #8
   12138:	ldr	r0, [r3]
   1213c:	bl	15380 <_obstack_memory_used@@Base+0x2a84>
   12140:	cmp	r0, #0
   12144:	beq	12168 <close@plt+0x11a8>
   12148:	ldr	r4, [pc, #168]	; 121f8 <close@plt+0x1238>
   1214c:	ldrb	r3, [r4, #4]
   12150:	cmp	r3, #0
   12154:	beq	12184 <close@plt+0x11c4>
   12158:	bl	10f18 <__errno_location@plt>
   1215c:	ldr	r3, [r0]
   12160:	cmp	r3, #32
   12164:	bne	12184 <close@plt+0x11c4>
   12168:	ldr	r3, [pc, #140]	; 121fc <close@plt+0x123c>
   1216c:	ldr	r0, [r3]
   12170:	bl	15380 <_obstack_memory_used@@Base+0x2a84>
   12174:	cmp	r0, #0
   12178:	bne	121cc <close@plt+0x120c>
   1217c:	add	sp, sp, #8
   12180:	pop	{r4, r5, r6, pc}
   12184:	mov	r2, #5
   12188:	ldr	r1, [pc, #112]	; 12200 <close@plt+0x1240>
   1218c:	mov	r0, #0
   12190:	bl	10df8 <dcgettext@plt>
   12194:	ldr	r4, [r4]
   12198:	cmp	r4, #0
   1219c:	mov	r5, r0
   121a0:	beq	121d8 <close@plt+0x1218>
   121a4:	bl	10f18 <__errno_location@plt>
   121a8:	ldr	r6, [r0]
   121ac:	mov	r0, r4
   121b0:	bl	14658 <_obstack_memory_used@@Base+0x1d5c>
   121b4:	mov	r1, r6
   121b8:	str	r5, [sp]
   121bc:	ldr	r2, [pc, #64]	; 12204 <close@plt+0x1244>
   121c0:	mov	r3, r0
   121c4:	mov	r0, #0
   121c8:	bl	10e70 <error@plt>
   121cc:	ldr	r3, [pc, #52]	; 12208 <close@plt+0x1248>
   121d0:	ldr	r0, [r3]
   121d4:	bl	10db0 <_exit@plt>
   121d8:	bl	10f18 <__errno_location@plt>
   121dc:	mov	r3, r5
   121e0:	ldr	r2, [pc, #36]	; 1220c <close@plt+0x124c>
   121e4:	ldr	r1, [r0]
   121e8:	mov	r0, r4
   121ec:	bl	10e70 <error@plt>
   121f0:	b	121cc <close@plt+0x120c>
   121f4:	andeq	r8, r2, r4, asr r1
   121f8:	andeq	r8, r2, r8, lsl #3
   121fc:	andeq	r8, r2, r8, asr #2
   12200:	andeq	r7, r1, r4, asr r5
   12204:	andeq	r7, r1, r0, ror #10
   12208:	andeq	r8, r2, ip, ror #1
   1220c:	andeq	r7, r1, r4, ror #10
   12210:	push	{r4, r5, lr}
   12214:	sub	sp, sp, #12
   12218:	mov	r4, r0
   1221c:	bl	10f48 <fileno@plt>
   12220:	cmp	r0, #0
   12224:	mov	r0, r4
   12228:	blt	122a4 <close@plt+0x12e4>
   1222c:	bl	10ec4 <__freading@plt>
   12230:	cmp	r0, #0
   12234:	bne	12270 <close@plt+0x12b0>
   12238:	mov	r0, r4
   1223c:	bl	122b0 <close@plt+0x12f0>
   12240:	cmp	r0, #0
   12244:	beq	122a0 <close@plt+0x12e0>
   12248:	bl	10f18 <__errno_location@plt>
   1224c:	mov	r5, r0
   12250:	mov	r0, r4
   12254:	ldr	r4, [r5]
   12258:	bl	10f60 <fclose@plt>
   1225c:	cmp	r4, #0
   12260:	mvnne	r0, #0
   12264:	strne	r4, [r5]
   12268:	add	sp, sp, #12
   1226c:	pop	{r4, r5, pc}
   12270:	mov	r0, r4
   12274:	bl	10f48 <fileno@plt>
   12278:	mov	r3, #1
   1227c:	str	r3, [sp]
   12280:	mov	r2, #0
   12284:	mov	r3, #0
   12288:	bl	10e40 <lseek64@plt>
   1228c:	mvn	r3, #0
   12290:	mvn	r2, #0
   12294:	cmp	r1, r3
   12298:	cmpeq	r0, r2
   1229c:	bne	12238 <close@plt+0x1278>
   122a0:	mov	r0, r4
   122a4:	add	sp, sp, #12
   122a8:	pop	{r4, r5, lr}
   122ac:	b	10f60 <fclose@plt>
   122b0:	push	{r4, lr}
   122b4:	subs	r4, r0, #0
   122b8:	sub	sp, sp, #8
   122bc:	beq	122d8 <close@plt+0x1318>
   122c0:	bl	10ec4 <__freading@plt>
   122c4:	cmp	r0, #0
   122c8:	beq	122d8 <close@plt+0x1318>
   122cc:	ldr	r3, [r4]
   122d0:	tst	r3, #256	; 0x100
   122d4:	bne	122e8 <close@plt+0x1328>
   122d8:	mov	r0, r4
   122dc:	add	sp, sp, #8
   122e0:	pop	{r4, lr}
   122e4:	b	10d98 <fflush@plt>
   122e8:	mov	r3, #1
   122ec:	str	r3, [sp]
   122f0:	mov	r2, #0
   122f4:	mov	r3, #0
   122f8:	mov	r0, r4
   122fc:	bl	1252c <close@plt+0x156c>
   12300:	mov	r0, r4
   12304:	add	sp, sp, #8
   12308:	pop	{r4, lr}
   1230c:	b	10d98 <fflush@plt>
   12310:	push	{r4, r5, lr}
   12314:	sub	sp, sp, #12
   12318:	mov	r5, r0
   1231c:	bl	10f18 <__errno_location@plt>
   12320:	mov	r2, #0
   12324:	mov	r4, r0
   12328:	ldr	r3, [r0]
   1232c:	str	r2, [r4]
   12330:	mov	r0, r5
   12334:	str	r3, [sp]
   12338:	str	r3, [sp, #4]
   1233c:	bl	10da4 <free@plt>
   12340:	ldr	r3, [r4]
   12344:	add	r2, sp, #8
   12348:	cmp	r3, #0
   1234c:	moveq	r3, #4
   12350:	movne	r3, #0
   12354:	add	r3, r2, r3
   12358:	ldr	r3, [r3, #-8]
   1235c:	str	r3, [r4]
   12360:	add	sp, sp, #12
   12364:	pop	{r4, r5, pc}
   12368:	push	{r4, lr}
   1236c:	mov	r1, #0
   12370:	mov	r4, r0
   12374:	ldr	r0, [pc, #56]	; 123b4 <close@plt+0x13f4>
   12378:	bl	10e88 <open64@plt>
   1237c:	cmp	r4, r0
   12380:	moveq	r3, #1
   12384:	beq	123ac <close@plt+0x13ec>
   12388:	cmp	r0, #0
   1238c:	mov	r3, r0
   12390:	movlt	r3, #0
   12394:	blt	123ac <close@plt+0x13ec>
   12398:	bl	10fc0 <close@plt>
   1239c:	bl	10f18 <__errno_location@plt>
   123a0:	mov	r3, #0
   123a4:	mov	r2, #9
   123a8:	str	r2, [r0]
   123ac:	mov	r0, r3
   123b0:	pop	{r4, pc}
   123b4:	andeq	r7, r1, r8, ror #10
   123b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   123bc:	mov	r9, r0
   123c0:	mov	r0, r2
   123c4:	mov	r7, r2
   123c8:	mov	sl, r1
   123cc:	bl	10f48 <fileno@plt>
   123d0:	cmp	r0, #1
   123d4:	beq	12504 <close@plt+0x1544>
   123d8:	cmp	r0, #2
   123dc:	beq	124fc <close@plt+0x153c>
   123e0:	cmp	r0, #0
   123e4:	beq	124a8 <close@plt+0x14e8>
   123e8:	mov	r1, #2
   123ec:	mov	r0, r1
   123f0:	bl	10e04 <dup2@plt>
   123f4:	subs	r4, r0, #2
   123f8:	movne	r4, #1
   123fc:	mov	r1, #1
   12400:	mov	r0, r1
   12404:	bl	10e04 <dup2@plt>
   12408:	mov	r1, #0
   1240c:	subs	r8, r0, #1
   12410:	mov	r0, r1
   12414:	movne	r8, #1
   12418:	bl	10e04 <dup2@plt>
   1241c:	subs	r6, r0, #0
   12420:	beq	12440 <close@plt+0x1480>
   12424:	mov	r0, #0
   12428:	bl	12368 <close@plt+0x13a8>
   1242c:	cmp	r0, #0
   12430:	mov	r6, r0
   12434:	mov	r5, r0
   12438:	moveq	r6, #1
   1243c:	beq	12474 <close@plt+0x14b4>
   12440:	cmp	r8, #0
   12444:	bne	124e8 <close@plt+0x1528>
   12448:	cmp	r4, #0
   1244c:	beq	12460 <close@plt+0x14a0>
   12450:	mov	r0, #2
   12454:	bl	12368 <close@plt+0x13a8>
   12458:	subs	r5, r0, #0
   1245c:	beq	124d0 <close@plt+0x1510>
   12460:	mov	r2, r7
   12464:	mov	r1, sl
   12468:	mov	r0, r9
   1246c:	bl	10edc <freopen64@plt>
   12470:	mov	r5, r0
   12474:	bl	10f18 <__errno_location@plt>
   12478:	cmp	r4, #0
   1247c:	mov	r7, r0
   12480:	ldr	r4, [r0]
   12484:	bne	124dc <close@plt+0x151c>
   12488:	cmp	r8, #0
   1248c:	bne	124c4 <close@plt+0x1504>
   12490:	cmp	r6, #0
   12494:	bne	124b8 <close@plt+0x14f8>
   12498:	cmp	r5, #0
   1249c:	streq	r4, [r7]
   124a0:	mov	r0, r5
   124a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124a8:	mov	r4, r0
   124ac:	mov	r8, r0
   124b0:	mov	r6, r0
   124b4:	b	12460 <close@plt+0x14a0>
   124b8:	mov	r0, #0
   124bc:	bl	10fc0 <close@plt>
   124c0:	b	12498 <close@plt+0x14d8>
   124c4:	mov	r0, #1
   124c8:	bl	10fc0 <close@plt>
   124cc:	b	12490 <close@plt+0x14d0>
   124d0:	bl	10f18 <__errno_location@plt>
   124d4:	ldr	r4, [r0]
   124d8:	mov	r7, r0
   124dc:	mov	r0, #2
   124e0:	bl	10fc0 <close@plt>
   124e4:	b	12488 <close@plt+0x14c8>
   124e8:	mov	r0, #1
   124ec:	bl	12368 <close@plt+0x13a8>
   124f0:	cmp	r0, #0
   124f4:	bne	12448 <close@plt+0x1488>
   124f8:	b	12470 <close@plt+0x14b0>
   124fc:	mov	r4, #0
   12500:	b	123fc <close@plt+0x143c>
   12504:	mov	r1, #0
   12508:	mov	r0, r1
   1250c:	bl	10e04 <dup2@plt>
   12510:	subs	r4, r0, #0
   12514:	moveq	r8, r4
   12518:	moveq	r6, r4
   1251c:	beq	12460 <close@plt+0x14a0>
   12520:	mov	r4, #0
   12524:	mov	r8, r4
   12528:	b	12424 <close@plt+0x1464>
   1252c:	push	{r4, r5, r6, r7, r8, lr}
   12530:	sub	sp, sp, #8
   12534:	ldmib	r0, {ip, lr}
   12538:	mov	r4, r0
   1253c:	ldr	r5, [sp, #32]
   12540:	cmp	lr, ip
   12544:	beq	1255c <close@plt+0x159c>
   12548:	str	r5, [sp, #32]
   1254c:	mov	r0, r4
   12550:	add	sp, sp, #8
   12554:	pop	{r4, r5, r6, r7, r8, lr}
   12558:	b	10f6c <fseeko64@plt>
   1255c:	ldr	lr, [r0, #20]
   12560:	ldr	ip, [r0, #16]
   12564:	cmp	lr, ip
   12568:	bne	12548 <close@plt+0x1588>
   1256c:	ldr	r8, [r0, #36]	; 0x24
   12570:	cmp	r8, #0
   12574:	bne	12548 <close@plt+0x1588>
   12578:	mov	r6, r2
   1257c:	mov	r7, r3
   12580:	bl	10f48 <fileno@plt>
   12584:	mov	r2, r6
   12588:	mov	r3, r7
   1258c:	str	r5, [sp]
   12590:	bl	10e40 <lseek64@plt>
   12594:	mvn	r3, #0
   12598:	mvn	r2, #0
   1259c:	cmp	r1, r3
   125a0:	cmpeq	r0, r2
   125a4:	beq	125c4 <close@plt+0x1604>
   125a8:	ldr	r3, [r4]
   125ac:	strd	r0, [r4, #80]	; 0x50
   125b0:	mov	r0, r8
   125b4:	bic	r3, r3, #16
   125b8:	str	r3, [r4]
   125bc:	add	sp, sp, #8
   125c0:	pop	{r4, r5, r6, r7, r8, pc}
   125c4:	mvn	r0, #0
   125c8:	b	125bc <close@plt+0x15fc>
   125cc:	ldr	r3, [pc, #52]	; 12608 <close@plt+0x1648>
   125d0:	push	{r4, lr}
   125d4:	mov	r2, #5
   125d8:	ldr	r1, [pc, #44]	; 1260c <close@plt+0x164c>
   125dc:	mov	r0, #0
   125e0:	ldr	r4, [r3]
   125e4:	bl	10df8 <dcgettext@plt>
   125e8:	ldr	r2, [pc, #32]	; 12610 <close@plt+0x1650>
   125ec:	mov	r1, #1
   125f0:	mov	r3, r0
   125f4:	mov	r0, r4
   125f8:	bl	10f54 <__fprintf_chk@plt>
   125fc:	ldr	r3, [pc, #16]	; 12614 <close@plt+0x1654>
   12600:	ldr	r0, [r3]
   12604:	bl	10f00 <exit@plt>
   12608:	andeq	r8, r2, r8, asr #2
   1260c:	andeq	r7, r1, r4, ror r5
   12610:	andeq	r7, r1, ip, lsr #13
   12614:	andeq	r8, r2, ip, ror #1
   12618:	ldrb	r3, [r0, #40]	; 0x28
   1261c:	tst	r3, #1
   12620:	ldr	r3, [r0, #28]
   12624:	bne	12630 <close@plt+0x1670>
   12628:	mov	r0, r1
   1262c:	bx	r3
   12630:	ldr	r0, [r0, #36]	; 0x24
   12634:	bx	r3
   12638:	ldrb	r3, [r0, #40]	; 0x28
   1263c:	tst	r3, #1
   12640:	ldr	r3, [r0, #32]
   12644:	bne	12650 <close@plt+0x1690>
   12648:	mov	r0, r1
   1264c:	bx	r3
   12650:	ldr	r0, [r0, #36]	; 0x24
   12654:	bx	r3
   12658:	push	{r4, r5, r6, lr}
   1265c:	subs	r5, r2, #0
   12660:	ldr	r3, [pc, #124]	; 126e4 <close@plt+0x1724>
   12664:	subne	r6, r5, #1
   12668:	moveq	r6, #7
   1266c:	moveq	r5, #8
   12670:	cmp	r1, #0
   12674:	moveq	r1, r3
   12678:	str	r6, [r0, #24]
   1267c:	str	r1, [r0]
   12680:	mov	r4, r0
   12684:	bl	12618 <close@plt+0x1658>
   12688:	cmp	r0, #0
   1268c:	str	r0, [r4, #4]
   12690:	beq	126d8 <close@plt+0x1718>
   12694:	ldr	r3, [r4]
   12698:	add	r2, r0, #8
   1269c:	rsb	r5, r5, #0
   126a0:	add	r2, r2, r6
   126a4:	add	r3, r0, r3
   126a8:	and	r2, r2, r5
   126ac:	mov	r1, #0
   126b0:	str	r2, [r4, #8]
   126b4:	str	r2, [r4, #12]
   126b8:	str	r3, [r0]
   126bc:	str	r3, [r4, #16]
   126c0:	str	r1, [r0, #4]
   126c4:	ldrb	r3, [r4, #40]	; 0x28
   126c8:	mov	r0, #1
   126cc:	and	r3, r3, #249	; 0xf9
   126d0:	strb	r3, [r4, #40]	; 0x28
   126d4:	pop	{r4, r5, r6, pc}
   126d8:	ldr	r3, [pc, #8]	; 126e8 <close@plt+0x1728>
   126dc:	ldr	r3, [r3]
   126e0:	blx	r3
   126e4:	andeq	r0, r0, r8, ror #31
   126e8:	strdeq	r8, [r2], -r0

000126ec <_obstack_begin@@Base>:
   126ec:	push	{r4, lr}
   126f0:	ldrb	lr, [r0, #40]	; 0x28
   126f4:	ldr	r4, [sp, #8]
   126f8:	str	r3, [r0, #28]
   126fc:	bic	lr, lr, #1
   12700:	str	r4, [r0, #32]
   12704:	strb	lr, [r0, #40]	; 0x28
   12708:	pop	{r4, lr}
   1270c:	b	12658 <close@plt+0x1698>

00012710 <_obstack_begin_1@@Base>:
   12710:	push	{r4, r5, lr}
   12714:	ldrb	lr, [r0, #40]	; 0x28
   12718:	ldr	r5, [sp, #12]
   1271c:	ldr	r4, [sp, #16]
   12720:	orr	lr, lr, #1
   12724:	str	r3, [r0, #28]
   12728:	str	r5, [r0, #32]
   1272c:	str	r4, [r0, #36]	; 0x24
   12730:	strb	lr, [r0, #40]	; 0x28
   12734:	pop	{r4, r5, lr}
   12738:	b	12658 <close@plt+0x1698>

0001273c <_obstack_newchunk@@Base>:
   1273c:	ldr	r2, [r0, #8]
   12740:	push	{r4, r5, r6, r7, r8, lr}
   12744:	ldr	r6, [r0, #12]
   12748:	ldr	r3, [r0, #24]
   1274c:	sub	r6, r6, r2
   12750:	add	r1, r6, r1
   12754:	adds	r3, r1, r3
   12758:	movcc	r2, #1
   1275c:	movcs	r2, #0
   12760:	cmp	r6, r1
   12764:	movhi	r1, #0
   12768:	andls	r1, r2, #1
   1276c:	cmp	r1, #0
   12770:	bne	12780 <_obstack_newchunk@@Base+0x44>
   12774:	ldr	r3, [pc, #204]	; 12848 <_obstack_newchunk@@Base+0x10c>
   12778:	ldr	r3, [r3]
   1277c:	blx	r3
   12780:	ldr	r5, [r0]
   12784:	add	r1, r3, r6, lsr #3
   12788:	cmp	r3, r5
   1278c:	movcc	r3, r5
   12790:	add	r1, r1, #100	; 0x64
   12794:	cmp	r3, r1
   12798:	movcs	r5, r3
   1279c:	movcc	r5, r1
   127a0:	mov	r1, r5
   127a4:	mov	r4, r0
   127a8:	ldr	r7, [r0, #4]
   127ac:	bl	12618 <close@plt+0x1658>
   127b0:	subs	r8, r0, #0
   127b4:	beq	12774 <_obstack_newchunk@@Base+0x38>
   127b8:	ldr	r2, [r4, #24]
   127bc:	mov	r3, r8
   127c0:	add	r1, r8, r5
   127c4:	str	r8, [r4, #4]
   127c8:	str	r7, [r8, #4]
   127cc:	str	r1, [r4, #16]
   127d0:	str	r1, [r3], #8
   127d4:	add	r3, r3, r2
   127d8:	bic	r5, r3, r2
   127dc:	mov	r0, r5
   127e0:	mov	r2, r6
   127e4:	ldr	r1, [r4, #8]
   127e8:	bl	10dbc <memcpy@plt>
   127ec:	ldrb	r3, [r4, #40]	; 0x28
   127f0:	tst	r3, #2
   127f4:	bne	12814 <_obstack_newchunk@@Base+0xd8>
   127f8:	ldr	r2, [r4, #24]
   127fc:	add	r3, r7, #8
   12800:	add	r3, r3, r2
   12804:	ldr	r1, [r4, #8]
   12808:	bic	r3, r3, r2
   1280c:	cmp	r1, r3
   12810:	beq	12830 <_obstack_newchunk@@Base+0xf4>
   12814:	ldrb	r3, [r4, #40]	; 0x28
   12818:	add	r2, r5, r6
   1281c:	str	r2, [r4, #12]
   12820:	bic	r3, r3, #2
   12824:	str	r5, [r4, #8]
   12828:	strb	r3, [r4, #40]	; 0x28
   1282c:	pop	{r4, r5, r6, r7, r8, pc}
   12830:	ldr	r3, [r7, #4]
   12834:	mov	r1, r7
   12838:	str	r3, [r8, #4]
   1283c:	mov	r0, r4
   12840:	bl	12638 <close@plt+0x1678>
   12844:	b	12814 <_obstack_newchunk@@Base+0xd8>
   12848:	strdeq	r8, [r2], -r0

0001284c <_obstack_allocated_p@@Base>:
   1284c:	ldr	r0, [r0, #4]
   12850:	cmp	r0, #0
   12854:	bne	12868 <_obstack_allocated_p@@Base+0x1c>
   12858:	b	12884 <_obstack_allocated_p@@Base+0x38>
   1285c:	ldr	r0, [r0, #4]
   12860:	cmp	r0, #0
   12864:	bxeq	lr
   12868:	cmp	r1, r0
   1286c:	bls	1285c <_obstack_allocated_p@@Base+0x10>
   12870:	ldr	r3, [r0]
   12874:	cmp	r1, r3
   12878:	bhi	1285c <_obstack_allocated_p@@Base+0x10>
   1287c:	mov	r0, #1
   12880:	bx	lr
   12884:	bx	lr

00012888 <_obstack_free@@Base>:
   12888:	push	{r4, r5, r6, lr}
   1288c:	mov	r6, r1
   12890:	ldr	r4, [r0, #4]
   12894:	cmp	r4, #0
   12898:	movne	r5, r0
   1289c:	beq	128d8 <_obstack_free@@Base+0x50>
   128a0:	cmp	r6, r4
   128a4:	bls	128b4 <_obstack_free@@Base+0x2c>
   128a8:	ldr	r2, [r4]
   128ac:	cmp	r6, r2
   128b0:	bls	128e4 <_obstack_free@@Base+0x5c>
   128b4:	mov	r1, r4
   128b8:	mov	r0, r5
   128bc:	ldr	r4, [r4, #4]
   128c0:	bl	12638 <close@plt+0x1678>
   128c4:	ldrb	r2, [r5, #40]	; 0x28
   128c8:	cmp	r4, #0
   128cc:	orr	r2, r2, #2
   128d0:	strb	r2, [r5, #40]	; 0x28
   128d4:	bne	128a0 <_obstack_free@@Base+0x18>
   128d8:	cmp	r6, #0
   128dc:	bne	128f8 <_obstack_free@@Base+0x70>
   128e0:	pop	{r4, r5, r6, pc}
   128e4:	str	r6, [r5, #12]
   128e8:	str	r6, [r5, #8]
   128ec:	str	r2, [r5, #16]
   128f0:	str	r4, [r5, #4]
   128f4:	pop	{r4, r5, r6, pc}
   128f8:	bl	10fb4 <abort@plt>

000128fc <_obstack_memory_used@@Base>:
   128fc:	ldr	r3, [r0, #4]
   12900:	cmp	r3, #0
   12904:	beq	12928 <_obstack_memory_used@@Base+0x2c>
   12908:	mov	r0, #0
   1290c:	ldr	r2, [r3]
   12910:	sub	r2, r2, r3
   12914:	ldr	r3, [r3, #4]
   12918:	add	r0, r0, r2
   1291c:	cmp	r3, #0
   12920:	bne	1290c <_obstack_memory_used@@Base+0x10>
   12924:	bx	lr
   12928:	mov	r0, r3
   1292c:	bx	lr
   12930:	push	{r4, r5, r6, lr}
   12934:	subs	r4, r0, #0
   12938:	beq	129ac <_obstack_memory_used@@Base+0xb0>
   1293c:	mov	r1, #47	; 0x2f
   12940:	bl	10f84 <strrchr@plt>
   12944:	subs	r5, r0, #0
   12948:	beq	12998 <_obstack_memory_used@@Base+0x9c>
   1294c:	add	r6, r5, #1
   12950:	sub	r3, r6, r4
   12954:	cmp	r3, #6
   12958:	ble	12998 <_obstack_memory_used@@Base+0x9c>
   1295c:	mov	r2, #7
   12960:	ldr	r1, [pc, #96]	; 129c8 <_obstack_memory_used@@Base+0xcc>
   12964:	sub	r0, r5, #6
   12968:	bl	10fa8 <strncmp@plt>
   1296c:	cmp	r0, #0
   12970:	bne	12998 <_obstack_memory_used@@Base+0x9c>
   12974:	mov	r2, #3
   12978:	ldr	r1, [pc, #76]	; 129cc <_obstack_memory_used@@Base+0xd0>
   1297c:	mov	r0, r6
   12980:	bl	10fa8 <strncmp@plt>
   12984:	cmp	r0, #0
   12988:	movne	r4, r6
   1298c:	ldreq	r3, [pc, #60]	; 129d0 <_obstack_memory_used@@Base+0xd4>
   12990:	addeq	r4, r5, #4
   12994:	streq	r4, [r3]
   12998:	ldr	r2, [pc, #52]	; 129d4 <_obstack_memory_used@@Base+0xd8>
   1299c:	ldr	r3, [pc, #52]	; 129d8 <_obstack_memory_used@@Base+0xdc>
   129a0:	str	r4, [r2]
   129a4:	str	r4, [r3]
   129a8:	pop	{r4, r5, r6, pc}
   129ac:	ldr	r3, [pc, #40]	; 129dc <_obstack_memory_used@@Base+0xe0>
   129b0:	mov	r2, #55	; 0x37
   129b4:	mov	r1, #1
   129b8:	ldr	r3, [r3]
   129bc:	ldr	r0, [pc, #28]	; 129e0 <_obstack_memory_used@@Base+0xe4>
   129c0:	bl	10e34 <fwrite@plt>
   129c4:	bl	10fb4 <abort@plt>
   129c8:	andeq	r7, r1, r0, asr #11
   129cc:	andeq	r7, r1, r8, asr #11
   129d0:	andeq	r8, r2, r8, lsr r1
   129d4:	muleq	r2, r0, r1
   129d8:	andeq	r8, r2, ip, lsr r1
   129dc:	andeq	r8, r2, r8, asr #2
   129e0:	andeq	r7, r1, r8, lsl #11
   129e4:	push	{r4, r5, r6, lr}
   129e8:	mov	r2, #48	; 0x30
   129ec:	mov	r4, r1
   129f0:	mov	r1, #0
   129f4:	mov	r5, r0
   129f8:	bl	10f30 <memset@plt>
   129fc:	cmp	r4, #10
   12a00:	beq	12a10 <_obstack_memory_used@@Base+0x114>
   12a04:	str	r4, [r5]
   12a08:	mov	r0, r5
   12a0c:	pop	{r4, r5, r6, pc}
   12a10:	bl	10fb4 <abort@plt>
   12a14:	push	{r4, r5, r6, lr}
   12a18:	mov	r4, r0
   12a1c:	mov	r5, r1
   12a20:	bl	153fc <_obstack_memory_used@@Base+0x2b00>
   12a24:	ldrb	r3, [r0]
   12a28:	bic	r3, r3, #32
   12a2c:	cmp	r3, #85	; 0x55
   12a30:	bne	12a90 <_obstack_memory_used@@Base+0x194>
   12a34:	ldrb	r3, [r0, #1]
   12a38:	bic	r3, r3, #32
   12a3c:	cmp	r3, #84	; 0x54
   12a40:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12a44:	ldrb	r3, [r0, #2]
   12a48:	bic	r3, r3, #32
   12a4c:	cmp	r3, #70	; 0x46
   12a50:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12a54:	ldrb	r3, [r0, #3]
   12a58:	cmp	r3, #45	; 0x2d
   12a5c:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12a60:	ldrb	r3, [r0, #4]
   12a64:	cmp	r3, #56	; 0x38
   12a68:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12a6c:	ldrb	r3, [r0, #5]
   12a70:	cmp	r3, #0
   12a74:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12a78:	ldrb	r2, [r4]
   12a7c:	ldr	r3, [pc, #152]	; 12b1c <_obstack_memory_used@@Base+0x220>
   12a80:	ldr	r0, [pc, #152]	; 12b20 <_obstack_memory_used@@Base+0x224>
   12a84:	cmp	r2, #96	; 0x60
   12a88:	movne	r0, r3
   12a8c:	pop	{r4, r5, r6, pc}
   12a90:	cmp	r3, #71	; 0x47
   12a94:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12a98:	ldrb	r3, [r0, #1]
   12a9c:	bic	r3, r3, #32
   12aa0:	cmp	r3, #66	; 0x42
   12aa4:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12aa8:	ldrb	r3, [r0, #2]
   12aac:	cmp	r3, #49	; 0x31
   12ab0:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12ab4:	ldrb	r3, [r0, #3]
   12ab8:	cmp	r3, #56	; 0x38
   12abc:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12ac0:	ldrb	r3, [r0, #4]
   12ac4:	cmp	r3, #48	; 0x30
   12ac8:	beq	12ae0 <_obstack_memory_used@@Base+0x1e4>
   12acc:	ldr	r3, [pc, #80]	; 12b24 <_obstack_memory_used@@Base+0x228>
   12ad0:	cmp	r5, #9
   12ad4:	ldr	r0, [pc, #76]	; 12b28 <_obstack_memory_used@@Base+0x22c>
   12ad8:	movne	r0, r3
   12adc:	pop	{r4, r5, r6, pc}
   12ae0:	ldrb	r3, [r0, #5]
   12ae4:	cmp	r3, #51	; 0x33
   12ae8:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12aec:	ldrb	r3, [r0, #6]
   12af0:	cmp	r3, #48	; 0x30
   12af4:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12af8:	ldrb	r3, [r0, #7]
   12afc:	cmp	r3, #0
   12b00:	bne	12acc <_obstack_memory_used@@Base+0x1d0>
   12b04:	ldrb	r2, [r4]
   12b08:	ldr	r3, [pc, #28]	; 12b2c <_obstack_memory_used@@Base+0x230>
   12b0c:	ldr	r0, [pc, #28]	; 12b30 <_obstack_memory_used@@Base+0x234>
   12b10:	cmp	r2, #96	; 0x60
   12b14:	movne	r0, r3
   12b18:	pop	{r4, r5, r6, pc}
   12b1c:	andeq	r7, r1, r4, lsr #12
   12b20:	andeq	r7, r1, r0, lsr #12
   12b24:	andeq	r7, r1, r4, lsr r6
   12b28:	andeq	r7, r1, r0, lsr r6
   12b2c:	andeq	r7, r1, ip, lsr #12
   12b30:	andeq	r7, r1, r8, lsr #12
   12b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b38:	sub	sp, sp, #116	; 0x74
   12b3c:	mov	sl, r0
   12b40:	str	r3, [sp, #24]
   12b44:	mov	r3, #1
   12b48:	mov	r8, r1
   12b4c:	str	r2, [sp, #56]	; 0x38
   12b50:	str	r3, [sp, #36]	; 0x24
   12b54:	bl	10e4c <__ctype_get_mb_cur_max@plt>
   12b58:	ldr	r3, [sp, #156]	; 0x9c
   12b5c:	mov	fp, r8
   12b60:	mov	r2, #0
   12b64:	lsr	r3, r3, #1
   12b68:	and	r3, r3, #1
   12b6c:	str	r2, [sp, #68]	; 0x44
   12b70:	str	r3, [sp, #28]
   12b74:	str	r2, [sp, #40]	; 0x28
   12b78:	str	r2, [sp, #44]	; 0x2c
   12b7c:	str	r2, [sp, #52]	; 0x34
   12b80:	str	r2, [sp, #64]	; 0x40
   12b84:	str	r2, [sp, #72]	; 0x48
   12b88:	str	sl, [sp, #32]
   12b8c:	str	r0, [sp, #76]	; 0x4c
   12b90:	ldr	r3, [sp, #152]	; 0x98
   12b94:	cmp	r3, #10
   12b98:	ldrls	pc, [pc, r3, lsl #2]
   12b9c:	b	13d5c <_obstack_memory_used@@Base+0x1460>
   12ba0:	andeq	r2, r1, ip, asr #23
   12ba4:			; <UNDEFINED> instruction: 0x00012eb4
   12ba8:	ldrdeq	r2, [r1], -r8
   12bac:	strdeq	r2, [r1], -ip
   12bb0:	andeq	r3, r1, r8, lsr #32
   12bb4:	strdeq	r2, [r1], -ip
   12bb8:	ldrdeq	r2, [r1], -r4
   12bbc:	andeq	r2, r1, r0, lsl pc
   12bc0:	andeq	r2, r1, r8, lsr #30
   12bc4:	andeq	r2, r1, r8, lsr #30
   12bc8:	andeq	r2, r1, r8, lsr #30
   12bcc:	mov	r3, #0
   12bd0:	mov	r7, r3
   12bd4:	str	r3, [sp, #28]
   12bd8:	ldr	r3, [sp, #44]	; 0x2c
   12bdc:	mov	sl, #0
   12be0:	eor	r3, r3, #1
   12be4:	str	r3, [sp, #60]	; 0x3c
   12be8:	ldr	r3, [sp, #24]
   12bec:	cmn	r3, #1
   12bf0:	beq	13154 <_obstack_memory_used@@Base+0x858>
   12bf4:	ldr	r3, [sp, #24]
   12bf8:	subs	r5, r3, sl
   12bfc:	movne	r5, #1
   12c00:	cmp	r5, #0
   12c04:	beq	1316c <_obstack_memory_used@@Base+0x870>
   12c08:	ldr	r3, [sp, #152]	; 0x98
   12c0c:	ldr	r8, [sp, #44]	; 0x2c
   12c10:	cmp	r3, #2
   12c14:	moveq	r8, #0
   12c18:	andne	r8, r8, #1
   12c1c:	ldr	r3, [sp, #52]	; 0x34
   12c20:	adds	r9, r3, #0
   12c24:	movne	r9, #1
   12c28:	ands	r6, r9, r8
   12c2c:	beq	135d4 <_obstack_memory_used@@Base+0xcd8>
   12c30:	ldr	r2, [sp, #52]	; 0x34
   12c34:	ldr	r1, [sp, #24]
   12c38:	cmp	r2, #1
   12c3c:	mov	r3, r2
   12c40:	movls	r3, #0
   12c44:	movhi	r3, #1
   12c48:	cmn	r1, #1
   12c4c:	movne	r3, #0
   12c50:	cmp	r3, #0
   12c54:	add	r4, sl, r2
   12c58:	beq	12c68 <_obstack_memory_used@@Base+0x36c>
   12c5c:	ldr	r0, [sp, #56]	; 0x38
   12c60:	bl	10f0c <strlen@plt>
   12c64:	str	r0, [sp, #24]
   12c68:	ldr	r3, [sp, #24]
   12c6c:	cmp	r3, r4
   12c70:	ldr	r3, [sp, #56]	; 0x38
   12c74:	add	r3, r3, sl
   12c78:	str	r3, [sp, #48]	; 0x30
   12c7c:	bcc	135e0 <_obstack_memory_used@@Base+0xce4>
   12c80:	mov	r0, r3
   12c84:	ldr	r2, [sp, #52]	; 0x34
   12c88:	ldr	r1, [sp, #64]	; 0x40
   12c8c:	bl	10de0 <memcmp@plt>
   12c90:	cmp	r0, #0
   12c94:	bne	135e0 <_obstack_memory_used@@Base+0xce4>
   12c98:	ldr	r3, [sp, #28]
   12c9c:	cmp	r3, #0
   12ca0:	bne	13e5c <_obstack_memory_used@@Base+0x1560>
   12ca4:	ldr	r3, [sp, #48]	; 0x30
   12ca8:	ldrb	r4, [r3]
   12cac:	cmp	r4, #126	; 0x7e
   12cb0:	ldrls	pc, [pc, r4, lsl #2]
   12cb4:	b	13574 <_obstack_memory_used@@Base+0xc78>
   12cb8:	muleq	r1, r8, r3
   12cbc:	andeq	r3, r1, r4, ror r5
   12cc0:	andeq	r3, r1, r4, ror r5
   12cc4:	andeq	r3, r1, r4, ror r5
   12cc8:	andeq	r3, r1, r4, ror r5
   12ccc:	andeq	r3, r1, r4, ror r5
   12cd0:	andeq	r3, r1, r4, ror r5
   12cd4:	andeq	r3, r1, ip, ror r3
   12cd8:	andeq	r3, r1, r0, ror #6
   12cdc:	andeq	r3, r1, ip, asr r5
   12ce0:	andeq	r3, r1, r0, asr #5
   12ce4:	andeq	r3, r1, r4, lsr #5
   12ce8:	andeq	r3, r1, r8, lsr r5
   12cec:	andeq	r3, r1, r4, lsl r5
   12cf0:	andeq	r3, r1, r4, ror r5
   12cf4:	andeq	r3, r1, r4, ror r5
   12cf8:	andeq	r3, r1, r4, ror r5
   12cfc:	andeq	r3, r1, r4, ror r5
   12d00:	andeq	r3, r1, r4, ror r5
   12d04:	andeq	r3, r1, r4, ror r5
   12d08:	andeq	r3, r1, r4, ror r5
   12d0c:	andeq	r3, r1, r4, ror r5
   12d10:	andeq	r3, r1, r4, ror r5
   12d14:	andeq	r3, r1, r4, ror r5
   12d18:	andeq	r3, r1, r4, ror r5
   12d1c:	andeq	r3, r1, r4, ror r5
   12d20:	andeq	r3, r1, r4, ror r5
   12d24:	andeq	r3, r1, r4, ror r5
   12d28:	andeq	r3, r1, r4, ror r5
   12d2c:	andeq	r3, r1, r4, ror r5
   12d30:	andeq	r3, r1, r4, ror r5
   12d34:	andeq	r3, r1, r4, ror r5
   12d38:	andeq	r3, r1, r4, asr r5
   12d3c:	andeq	r3, r1, r8, lsl #9
   12d40:	andeq	r3, r1, r8, lsl #9
   12d44:	muleq	r1, r8, r0
   12d48:	andeq	r3, r1, r8, lsl #9
   12d4c:	andeq	r3, r1, r0, lsr #10
   12d50:	andeq	r3, r1, r8, lsl #9
   12d54:	strdeq	r3, [r1], -r4
   12d58:	andeq	r3, r1, r8, lsl #9
   12d5c:	andeq	r3, r1, r8, lsl #9
   12d60:	andeq	r3, r1, r8, lsl #9
   12d64:	andeq	r3, r1, r0, lsr #10
   12d68:	andeq	r3, r1, r0, lsr #10
   12d6c:	andeq	r3, r1, r0, lsr #10
   12d70:	andeq	r3, r1, r0, lsr #10
   12d74:	andeq	r3, r1, r0, lsr #10
   12d78:	andeq	r3, r1, r0, lsr #10
   12d7c:	andeq	r3, r1, r0, lsr #10
   12d80:	andeq	r3, r1, r0, lsr #10
   12d84:	andeq	r3, r1, r0, lsr #10
   12d88:	andeq	r3, r1, r0, lsr #10
   12d8c:	andeq	r3, r1, r0, lsr #10
   12d90:	andeq	r3, r1, r0, lsr #10
   12d94:	andeq	r3, r1, r0, lsr #10
   12d98:	andeq	r3, r1, r0, lsr #10
   12d9c:	andeq	r3, r1, r0, lsr #10
   12da0:	andeq	r3, r1, r0, lsr #10
   12da4:	andeq	r3, r1, r8, lsl #9
   12da8:	andeq	r3, r1, r8, lsl #9
   12dac:	andeq	r3, r1, r8, lsl #9
   12db0:	andeq	r3, r1, r8, lsl #9
   12db4:	andeq	r3, r1, r4, asr #9
   12db8:	andeq	r3, r1, r4, ror r5
   12dbc:	andeq	r3, r1, r0, lsr #10
   12dc0:	andeq	r3, r1, r0, lsr #10
   12dc4:	andeq	r3, r1, r0, lsr #10
   12dc8:	andeq	r3, r1, r0, lsr #10
   12dcc:	andeq	r3, r1, r0, lsr #10
   12dd0:	andeq	r3, r1, r0, lsr #10
   12dd4:	andeq	r3, r1, r0, lsr #10
   12dd8:	andeq	r3, r1, r0, lsr #10
   12ddc:	andeq	r3, r1, r0, lsr #10
   12de0:	andeq	r3, r1, r0, lsr #10
   12de4:	andeq	r3, r1, r0, lsr #10
   12de8:	andeq	r3, r1, r0, lsr #10
   12dec:	andeq	r3, r1, r0, lsr #10
   12df0:	andeq	r3, r1, r0, lsr #10
   12df4:	andeq	r3, r1, r0, lsr #10
   12df8:	andeq	r3, r1, r0, lsr #10
   12dfc:	andeq	r3, r1, r0, lsr #10
   12e00:	andeq	r3, r1, r0, lsr #10
   12e04:	andeq	r3, r1, r0, lsr #10
   12e08:	andeq	r3, r1, r0, lsr #10
   12e0c:	andeq	r3, r1, r0, lsr #10
   12e10:	andeq	r3, r1, r0, lsr #10
   12e14:	andeq	r3, r1, r0, lsr #10
   12e18:	andeq	r3, r1, r0, lsr #10
   12e1c:	andeq	r3, r1, r0, lsr #10
   12e20:	andeq	r3, r1, r0, lsr #10
   12e24:	andeq	r3, r1, r8, lsl #9
   12e28:	andeq	r3, r1, r4, ror #3
   12e2c:	andeq	r3, r1, r0, lsr #10
   12e30:	andeq	r3, r1, r8, lsl #9
   12e34:	andeq	r3, r1, r0, lsr #10
   12e38:	andeq	r3, r1, r8, lsl #9
   12e3c:	andeq	r3, r1, r0, lsr #10
   12e40:	andeq	r3, r1, r0, lsr #10
   12e44:	andeq	r3, r1, r0, lsr #10
   12e48:	andeq	r3, r1, r0, lsr #10
   12e4c:	andeq	r3, r1, r0, lsr #10
   12e50:	andeq	r3, r1, r0, lsr #10
   12e54:	andeq	r3, r1, r0, lsr #10
   12e58:	andeq	r3, r1, r0, lsr #10
   12e5c:	andeq	r3, r1, r0, lsr #10
   12e60:	andeq	r3, r1, r0, lsr #10
   12e64:	andeq	r3, r1, r0, lsr #10
   12e68:	andeq	r3, r1, r0, lsr #10
   12e6c:	andeq	r3, r1, r0, lsr #10
   12e70:	andeq	r3, r1, r0, lsr #10
   12e74:	andeq	r3, r1, r0, lsr #10
   12e78:	andeq	r3, r1, r0, lsr #10
   12e7c:	andeq	r3, r1, r0, lsr #10
   12e80:	andeq	r3, r1, r0, lsr #10
   12e84:	andeq	r3, r1, r0, lsr #10
   12e88:	andeq	r3, r1, r0, lsr #10
   12e8c:	andeq	r3, r1, r0, lsr #10
   12e90:	andeq	r3, r1, r0, lsr #10
   12e94:	andeq	r3, r1, r0, lsr #10
   12e98:	andeq	r3, r1, r0, lsr #10
   12e9c:	andeq	r3, r1, r0, lsr #10
   12ea0:	andeq	r3, r1, r0, lsr #10
   12ea4:	andeq	r3, r1, r8, ror r0
   12ea8:	andeq	r3, r1, r8, lsl #9
   12eac:	andeq	r3, r1, r8, ror r0
   12eb0:	muleq	r1, r8, r0
   12eb4:	mov	r3, #1
   12eb8:	str	r3, [sp, #28]
   12ebc:	str	r3, [sp, #52]	; 0x34
   12ec0:	ldr	r3, [pc, #4000]	; 13e68 <_obstack_memory_used@@Base+0x156c>
   12ec4:	mov	r7, #0
   12ec8:	str	r3, [sp, #64]	; 0x40
   12ecc:	mov	r3, #2
   12ed0:	str	r3, [sp, #152]	; 0x98
   12ed4:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   12ed8:	ldr	r3, [sp, #28]
   12edc:	cmp	r3, #0
   12ee0:	beq	1303c <_obstack_memory_used@@Base+0x740>
   12ee4:	mov	r3, #1
   12ee8:	str	r3, [sp, #52]	; 0x34
   12eec:	ldr	r3, [pc, #3956]	; 13e68 <_obstack_memory_used@@Base+0x156c>
   12ef0:	mov	r7, #0
   12ef4:	str	r3, [sp, #64]	; 0x40
   12ef8:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   12efc:	mov	r3, #1
   12f00:	str	r3, [sp, #44]	; 0x2c
   12f04:	str	r3, [sp, #52]	; 0x34
   12f08:	str	r3, [sp, #28]
   12f0c:	b	12ec0 <_obstack_memory_used@@Base+0x5c4>
   12f10:	mov	r3, #0
   12f14:	str	r3, [sp, #28]
   12f18:	mov	r3, #1
   12f1c:	str	r3, [sp, #44]	; 0x2c
   12f20:	mov	r7, #0
   12f24:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   12f28:	ldr	r3, [sp, #152]	; 0x98
   12f2c:	cmp	r3, #10
   12f30:	beq	12f74 <_obstack_memory_used@@Base+0x678>
   12f34:	mov	r2, #5
   12f38:	ldr	r1, [pc, #3884]	; 13e6c <_obstack_memory_used@@Base+0x1570>
   12f3c:	mov	r0, #0
   12f40:	bl	10df8 <dcgettext@plt>
   12f44:	ldr	r2, [pc, #3872]	; 13e6c <_obstack_memory_used@@Base+0x1570>
   12f48:	cmp	r0, r2
   12f4c:	str	r0, [sp, #164]	; 0xa4
   12f50:	beq	13f58 <_obstack_memory_used@@Base+0x165c>
   12f54:	mov	r2, #5
   12f58:	ldr	r1, [pc, #3848]	; 13e68 <_obstack_memory_used@@Base+0x156c>
   12f5c:	mov	r0, #0
   12f60:	bl	10df8 <dcgettext@plt>
   12f64:	ldr	r2, [pc, #3836]	; 13e68 <_obstack_memory_used@@Base+0x156c>
   12f68:	cmp	r0, r2
   12f6c:	str	r0, [sp, #168]	; 0xa8
   12f70:	beq	13f48 <_obstack_memory_used@@Base+0x164c>
   12f74:	ldr	r7, [sp, #28]
   12f78:	cmp	r7, #0
   12f7c:	movne	r7, #0
   12f80:	bne	12fb4 <_obstack_memory_used@@Base+0x6b8>
   12f84:	ldr	r3, [sp, #164]	; 0xa4
   12f88:	ldrb	r3, [r3]
   12f8c:	cmp	r3, #0
   12f90:	beq	13f68 <_obstack_memory_used@@Base+0x166c>
   12f94:	ldr	r2, [sp, #164]	; 0xa4
   12f98:	ldr	r1, [sp, #32]
   12f9c:	cmp	fp, r7
   12fa0:	strbhi	r3, [r1, r7]
   12fa4:	ldrb	r3, [r2, #1]!
   12fa8:	add	r7, r7, #1
   12fac:	cmp	r3, #0
   12fb0:	bne	12f9c <_obstack_memory_used@@Base+0x6a0>
   12fb4:	ldr	r0, [sp, #168]	; 0xa8
   12fb8:	bl	10f0c <strlen@plt>
   12fbc:	ldr	r3, [sp, #168]	; 0xa8
   12fc0:	str	r3, [sp, #64]	; 0x40
   12fc4:	mov	r3, #1
   12fc8:	str	r3, [sp, #44]	; 0x2c
   12fcc:	str	r0, [sp, #52]	; 0x34
   12fd0:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   12fd4:	mov	r3, #1
   12fd8:	str	r3, [sp, #44]	; 0x2c
   12fdc:	str	r3, [sp, #52]	; 0x34
   12fe0:	str	r3, [sp, #28]
   12fe4:	ldr	r3, [pc, #3716]	; 13e70 <_obstack_memory_used@@Base+0x1574>
   12fe8:	mov	r7, #0
   12fec:	str	r3, [sp, #64]	; 0x40
   12ff0:	mov	r3, #5
   12ff4:	str	r3, [sp, #152]	; 0x98
   12ff8:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   12ffc:	ldr	r3, [sp, #28]
   13000:	cmp	r3, #0
   13004:	beq	13d04 <_obstack_memory_used@@Base+0x1408>
   13008:	ldr	r3, [sp, #28]
   1300c:	mov	r7, #0
   13010:	str	r3, [sp, #44]	; 0x2c
   13014:	mov	r3, #1
   13018:	str	r3, [sp, #52]	; 0x34
   1301c:	ldr	r3, [pc, #3660]	; 13e70 <_obstack_memory_used@@Base+0x1574>
   13020:	str	r3, [sp, #64]	; 0x40
   13024:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   13028:	ldr	r3, [sp, #28]
   1302c:	cmp	r3, #0
   13030:	mov	r3, #1
   13034:	streq	r3, [sp, #44]	; 0x2c
   13038:	bne	12ebc <_obstack_memory_used@@Base+0x5c0>
   1303c:	cmp	fp, #0
   13040:	beq	13d34 <_obstack_memory_used@@Base+0x1438>
   13044:	ldr	r3, [sp, #32]
   13048:	mov	r2, #39	; 0x27
   1304c:	mov	r7, #1
   13050:	strb	r2, [r3]
   13054:	mov	r3, #0
   13058:	str	r3, [sp, #28]
   1305c:	mov	r3, #1
   13060:	str	r3, [sp, #52]	; 0x34
   13064:	ldr	r3, [pc, #3580]	; 13e68 <_obstack_memory_used@@Base+0x156c>
   13068:	str	r3, [sp, #64]	; 0x40
   1306c:	mov	r3, #2
   13070:	str	r3, [sp, #152]	; 0x98
   13074:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   13078:	ldr	r3, [sp, #24]
   1307c:	cmn	r3, #1
   13080:	beq	13c98 <_obstack_memory_used@@Base+0x139c>
   13084:	ldr	r3, [sp, #24]
   13088:	subs	r3, r3, #1
   1308c:	movne	r3, #1
   13090:	cmp	r3, #0
   13094:	bne	130a0 <_obstack_memory_used@@Base+0x7a4>
   13098:	cmp	sl, #0
   1309c:	beq	1348c <_obstack_memory_used@@Base+0xb90>
   130a0:	ldr	r3, [sp, #152]	; 0x98
   130a4:	mov	r5, #0
   130a8:	sub	r2, r3, #2
   130ac:	mov	r8, r5
   130b0:	clz	r2, r2
   130b4:	lsr	r2, r2, #5
   130b8:	ldr	r3, [sp, #60]	; 0x3c
   130bc:	ldr	r1, [sp, #28]
   130c0:	orr	r3, r2, r3
   130c4:	eor	r3, r3, #1
   130c8:	orr	r3, r1, r3
   130cc:	tst	r3, #255	; 0xff
   130d0:	bne	137fc <_obstack_memory_used@@Base+0xf00>
   130d4:	cmp	r6, #0
   130d8:	bne	13228 <_obstack_memory_used@@Base+0x92c>
   130dc:	ldr	r3, [sp, #40]	; 0x28
   130e0:	eor	r8, r8, #1
   130e4:	and	r8, r8, r3
   130e8:	add	sl, sl, #1
   130ec:	uxtb	r6, r8
   130f0:	cmp	r6, #0
   130f4:	beq	13128 <_obstack_memory_used@@Base+0x82c>
   130f8:	cmp	fp, r7
   130fc:	movhi	r2, #39	; 0x27
   13100:	ldrhi	r3, [sp, #32]
   13104:	strbhi	r2, [r3, r7]
   13108:	add	r3, r7, #1
   1310c:	cmp	fp, r3
   13110:	movhi	r1, #39	; 0x27
   13114:	ldrhi	r2, [sp, #32]
   13118:	add	r7, r7, #2
   1311c:	strbhi	r1, [r2, r3]
   13120:	mov	r3, #0
   13124:	str	r3, [sp, #40]	; 0x28
   13128:	cmp	r7, fp
   1312c:	ldrcc	r3, [sp, #32]
   13130:	strbcc	r4, [r3, r7]
   13134:	ldr	r3, [sp, #36]	; 0x24
   13138:	cmp	r5, #0
   1313c:	moveq	r3, #0
   13140:	str	r3, [sp, #36]	; 0x24
   13144:	ldr	r3, [sp, #24]
   13148:	add	r7, r7, #1
   1314c:	cmn	r3, #1
   13150:	bne	12bf4 <_obstack_memory_used@@Base+0x2f8>
   13154:	ldr	r3, [sp, #56]	; 0x38
   13158:	ldrb	r5, [r3, sl]
   1315c:	adds	r5, r5, #0
   13160:	movne	r5, #1
   13164:	cmp	r5, #0
   13168:	bne	12c08 <_obstack_memory_used@@Base+0x30c>
   1316c:	ldr	r3, [sp, #152]	; 0x98
   13170:	ldr	r1, [sp, #28]
   13174:	sub	r3, r3, #2
   13178:	clz	r3, r3
   1317c:	lsr	r3, r3, #5
   13180:	and	r9, r1, r3
   13184:	cmp	r7, #0
   13188:	movne	r2, #0
   1318c:	andeq	r2, r9, #1
   13190:	cmp	r2, #0
   13194:	bne	13b70 <_obstack_memory_used@@Base+0x1274>
   13198:	eor	r2, r1, #1
   1319c:	ands	r3, r3, r2
   131a0:	beq	1402c <_obstack_memory_used@@Base+0x1730>
   131a4:	ldr	r2, [sp, #68]	; 0x44
   131a8:	cmp	r2, #0
   131ac:	beq	14018 <_obstack_memory_used@@Base+0x171c>
   131b0:	ldr	r3, [sp, #36]	; 0x24
   131b4:	cmp	r3, #0
   131b8:	bne	13fd0 <_obstack_memory_used@@Base+0x16d4>
   131bc:	ldr	r2, [sp, #72]	; 0x48
   131c0:	clz	r3, fp
   131c4:	cmp	r2, #0
   131c8:	lsr	r3, r3, #5
   131cc:	moveq	r3, #0
   131d0:	cmp	r3, #0
   131d4:	beq	13f70 <_obstack_memory_used@@Base+0x1674>
   131d8:	str	r3, [sp, #68]	; 0x44
   131dc:	ldr	fp, [sp, #72]	; 0x48
   131e0:	b	12b90 <_obstack_memory_used@@Base+0x294>
   131e4:	ldr	r3, [sp, #152]	; 0x98
   131e8:	cmp	r3, #2
   131ec:	beq	13840 <_obstack_memory_used@@Base+0xf44>
   131f0:	ldr	r3, [sp, #44]	; 0x2c
   131f4:	ldr	r2, [sp, #28]
   131f8:	and	r2, r3, r2
   131fc:	ands	r2, r9, r2
   13200:	bne	1384c <_obstack_memory_used@@Base+0xf50>
   13204:	mov	r4, #92	; 0x5c
   13208:	mov	r3, r4
   1320c:	ldr	r1, [sp, #44]	; 0x2c
   13210:	cmp	r1, #0
   13214:	moveq	r5, #0
   13218:	moveq	r8, r1
   1321c:	beq	130b8 <_obstack_memory_used@@Base+0x7bc>
   13220:	mov	r4, r3
   13224:	mov	r5, #0
   13228:	ldr	r3, [sp, #28]
   1322c:	cmp	r3, #0
   13230:	bne	13834 <_obstack_memory_used@@Base+0xf38>
   13234:	ldr	r3, [sp, #40]	; 0x28
   13238:	eor	r9, r3, #1
   1323c:	and	r9, r9, r2
   13240:	ands	r9, r9, #255	; 0xff
   13244:	beq	13288 <_obstack_memory_used@@Base+0x98c>
   13248:	cmp	fp, r7
   1324c:	movhi	r2, #39	; 0x27
   13250:	ldrhi	r3, [sp, #32]
   13254:	str	r9, [sp, #40]	; 0x28
   13258:	strbhi	r2, [r3, r7]
   1325c:	add	r3, r7, #1
   13260:	cmp	fp, r3
   13264:	movhi	r1, #36	; 0x24
   13268:	ldrhi	r2, [sp, #32]
   1326c:	strbhi	r1, [r2, r3]
   13270:	add	r3, r7, #2
   13274:	cmp	fp, r3
   13278:	add	r7, r7, #3
   1327c:	ldrhi	r2, [sp, #32]
   13280:	movhi	r1, #39	; 0x27
   13284:	strbhi	r1, [r2, r3]
   13288:	cmp	fp, r7
   1328c:	movhi	r2, #92	; 0x5c
   13290:	ldrhi	r3, [sp, #32]
   13294:	add	sl, sl, #1
   13298:	strbhi	r2, [r3, r7]
   1329c:	add	r7, r7, #1
   132a0:	b	13128 <_obstack_memory_used@@Base+0x82c>
   132a4:	ldr	r3, [sp, #152]	; 0x98
   132a8:	mov	r4, #11
   132ac:	sub	r2, r3, #2
   132b0:	mov	r3, #118	; 0x76
   132b4:	clz	r2, r2
   132b8:	lsr	r2, r2, #5
   132bc:	b	1320c <_obstack_memory_used@@Base+0x910>
   132c0:	mov	r4, #10
   132c4:	mov	r3, #110	; 0x6e
   132c8:	ldr	r2, [sp, #152]	; 0x98
   132cc:	ldr	r1, [sp, #28]
   132d0:	sub	r2, r2, #2
   132d4:	clz	r2, r2
   132d8:	lsr	r2, r2, #5
   132dc:	ands	r1, r1, r2
   132e0:	beq	1320c <_obstack_memory_used@@Base+0x910>
   132e4:	ldr	sl, [sp, #32]
   132e8:	mov	r8, fp
   132ec:	mov	r2, r1
   132f0:	mov	r3, #2
   132f4:	str	r3, [sp, #152]	; 0x98
   132f8:	ldr	r9, [sp, #44]	; 0x2c
   132fc:	ldr	r3, [sp, #152]	; 0x98
   13300:	and	r9, r9, r2
   13304:	tst	r9, #255	; 0xff
   13308:	movne	r3, #4
   1330c:	str	r3, [sp, #152]	; 0x98
   13310:	ldr	r3, [sp, #156]	; 0x9c
   13314:	mov	ip, #0
   13318:	bic	r3, r3, #2
   1331c:	str	r3, [sp, #4]
   13320:	ldr	r3, [sp, #168]	; 0xa8
   13324:	ldr	r2, [sp, #56]	; 0x38
   13328:	str	r3, [sp, #16]
   1332c:	ldr	r3, [sp, #164]	; 0xa4
   13330:	mov	r1, r8
   13334:	str	r3, [sp, #12]
   13338:	ldr	r3, [sp, #152]	; 0x98
   1333c:	mov	r0, sl
   13340:	str	r3, [sp]
   13344:	str	ip, [sp, #8]
   13348:	ldr	r3, [sp, #24]
   1334c:	bl	12b34 <_obstack_memory_used@@Base+0x238>
   13350:	mov	fp, r0
   13354:	mov	r0, fp
   13358:	add	sp, sp, #116	; 0x74
   1335c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13360:	ldr	r3, [sp, #152]	; 0x98
   13364:	mov	r4, #8
   13368:	sub	r2, r3, #2
   1336c:	mov	r3, #98	; 0x62
   13370:	clz	r2, r2
   13374:	lsr	r2, r2, #5
   13378:	b	1320c <_obstack_memory_used@@Base+0x910>
   1337c:	ldr	r3, [sp, #152]	; 0x98
   13380:	mov	r4, #7
   13384:	sub	r2, r3, #2
   13388:	mov	r3, #97	; 0x61
   1338c:	clz	r2, r2
   13390:	lsr	r2, r2, #5
   13394:	b	1320c <_obstack_memory_used@@Base+0x910>
   13398:	ldr	r3, [sp, #44]	; 0x2c
   1339c:	cmp	r3, #0
   133a0:	beq	13b84 <_obstack_memory_used@@Base+0x1288>
   133a4:	ldr	r3, [sp, #28]
   133a8:	cmp	r3, #0
   133ac:	bne	13e5c <_obstack_memory_used@@Base+0x1560>
   133b0:	ldr	r3, [sp, #152]	; 0x98
   133b4:	sub	r2, r3, #2
   133b8:	ldr	r3, [sp, #40]	; 0x28
   133bc:	clz	r2, r2
   133c0:	eor	r3, r3, #1
   133c4:	lsr	r2, r2, #5
   133c8:	ands	r3, r2, r3
   133cc:	moveq	r1, r7
   133d0:	beq	13414 <_obstack_memory_used@@Base+0xb18>
   133d4:	cmp	fp, r7
   133d8:	movhi	r0, #39	; 0x27
   133dc:	ldrhi	r1, [sp, #32]
   133e0:	str	r3, [sp, #40]	; 0x28
   133e4:	strbhi	r0, [r1, r7]
   133e8:	add	r1, r7, #1
   133ec:	cmp	fp, r1
   133f0:	movhi	ip, #36	; 0x24
   133f4:	ldrhi	r0, [sp, #32]
   133f8:	strbhi	ip, [r0, r1]
   133fc:	add	r1, r7, #2
   13400:	cmp	fp, r1
   13404:	movhi	ip, #39	; 0x27
   13408:	ldrhi	r0, [sp, #32]
   1340c:	strbhi	ip, [r0, r1]
   13410:	add	r1, r7, #3
   13414:	cmp	fp, r1
   13418:	movhi	r0, #92	; 0x5c
   1341c:	ldrhi	r3, [sp, #32]
   13420:	add	r7, r1, #1
   13424:	strbhi	r0, [r3, r1]
   13428:	cmp	r8, #0
   1342c:	beq	13d70 <_obstack_memory_used@@Base+0x1474>
   13430:	ldr	r0, [sp, #24]
   13434:	add	r3, sl, #1
   13438:	cmp	r3, r0
   1343c:	bcs	13cac <_obstack_memory_used@@Base+0x13b0>
   13440:	ldr	r0, [sp, #56]	; 0x38
   13444:	ldrb	r3, [r0, r3]
   13448:	sub	r3, r3, #48	; 0x30
   1344c:	cmp	r3, #9
   13450:	bhi	13cac <_obstack_memory_used@@Base+0x13b0>
   13454:	cmp	fp, r7
   13458:	movhi	r3, #48	; 0x30
   1345c:	ldrhi	r0, [sp, #32]
   13460:	ldr	r5, [sp, #28]
   13464:	mov	r4, #48	; 0x30
   13468:	strbhi	r3, [r0, r7]
   1346c:	add	r3, r1, #2
   13470:	cmp	fp, r3
   13474:	movhi	r0, #48	; 0x30
   13478:	ldrhi	ip, [sp, #32]
   1347c:	add	r7, r1, #3
   13480:	strbhi	r0, [ip, r3]
   13484:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13488:	mov	r5, #0
   1348c:	ldr	r3, [sp, #152]	; 0x98
   13490:	sub	r2, r3, #2
   13494:	ldr	r3, [sp, #28]
   13498:	clz	r2, r2
   1349c:	lsr	r2, r2, #5
   134a0:	ands	r8, r3, r2
   134a4:	beq	130b8 <_obstack_memory_used@@Base+0x7bc>
   134a8:	mov	r3, r8
   134ac:	mov	r2, r3
   134b0:	mov	r3, #2
   134b4:	ldr	sl, [sp, #32]
   134b8:	mov	r8, fp
   134bc:	str	r3, [sp, #152]	; 0x98
   134c0:	b	132f8 <_obstack_memory_used@@Base+0x9fc>
   134c4:	ldr	r3, [sp, #152]	; 0x98
   134c8:	cmp	r3, #2
   134cc:	beq	13bf0 <_obstack_memory_used@@Base+0x12f4>
   134d0:	cmp	r3, #5
   134d4:	beq	13bb0 <_obstack_memory_used@@Base+0x12b4>
   134d8:	mov	r5, #0
   134dc:	sub	r2, r3, #2
   134e0:	mov	r8, r5
   134e4:	clz	r2, r2
   134e8:	mov	r4, #63	; 0x3f
   134ec:	lsr	r2, r2, #5
   134f0:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   134f4:	ldr	r3, [sp, #152]	; 0x98
   134f8:	cmp	r3, #2
   134fc:	beq	13c10 <_obstack_memory_used@@Base+0x1314>
   13500:	mov	r2, #0
   13504:	str	r5, [sp, #68]	; 0x44
   13508:	mov	r8, r2
   1350c:	mov	r4, #39	; 0x27
   13510:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13514:	mov	r4, #13
   13518:	mov	r3, #114	; 0x72
   1351c:	b	132c8 <_obstack_memory_used@@Base+0x9cc>
   13520:	ldr	r3, [sp, #152]	; 0x98
   13524:	mov	r8, #0
   13528:	sub	r2, r3, #2
   1352c:	clz	r2, r2
   13530:	lsr	r2, r2, #5
   13534:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13538:	ldr	r3, [sp, #152]	; 0x98
   1353c:	mov	r4, #12
   13540:	sub	r2, r3, #2
   13544:	mov	r3, #102	; 0x66
   13548:	clz	r2, r2
   1354c:	lsr	r2, r2, #5
   13550:	b	1320c <_obstack_memory_used@@Base+0x910>
   13554:	mov	r5, r6
   13558:	b	1348c <_obstack_memory_used@@Base+0xb90>
   1355c:	ldr	r3, [sp, #152]	; 0x98
   13560:	sub	r2, r3, #2
   13564:	mov	r3, #116	; 0x74
   13568:	clz	r2, r2
   1356c:	lsr	r2, r2, #5
   13570:	b	1320c <_obstack_memory_used@@Base+0x910>
   13574:	ldr	r8, [sp, #76]	; 0x4c
   13578:	cmp	r8, #1
   1357c:	bne	13a2c <_obstack_memory_used@@Base+0x1130>
   13580:	bl	10ef4 <__ctype_b_loc@plt>
   13584:	sxth	r3, r4
   13588:	mov	ip, r8
   1358c:	lsl	r3, r3, #1
   13590:	ldr	r2, [r0]
   13594:	ldrh	r3, [r2, r3]
   13598:	and	r3, r3, #16384	; 0x4000
   1359c:	cmp	r3, #0
   135a0:	movne	r5, #1
   135a4:	moveq	r5, #0
   135a8:	moveq	r3, #1
   135ac:	movne	r3, #0
   135b0:	ldr	r2, [sp, #44]	; 0x2c
   135b4:	and	r3, r3, r2
   135b8:	ands	r8, r3, #255	; 0xff
   135bc:	bne	138c0 <_obstack_memory_used@@Base+0xfc4>
   135c0:	ldr	r3, [sp, #152]	; 0x98
   135c4:	sub	r2, r3, #2
   135c8:	clz	r2, r2
   135cc:	lsr	r2, r2, #5
   135d0:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   135d4:	ldr	r3, [sp, #56]	; 0x38
   135d8:	add	r3, r3, sl
   135dc:	str	r3, [sp, #48]	; 0x30
   135e0:	ldr	r3, [sp, #48]	; 0x30
   135e4:	mov	r6, #0
   135e8:	ldrb	r4, [r3]
   135ec:	cmp	r4, #126	; 0x7e
   135f0:	ldrls	pc, [pc, r4, lsl #2]
   135f4:	b	13574 <_obstack_memory_used@@Base+0xc78>
   135f8:	muleq	r1, r8, r3
   135fc:	andeq	r3, r1, r4, ror r5
   13600:	andeq	r3, r1, r4, ror r5
   13604:	andeq	r3, r1, r4, ror r5
   13608:	andeq	r3, r1, r4, ror r5
   1360c:	andeq	r3, r1, r4, ror r5
   13610:	andeq	r3, r1, r4, ror r5
   13614:	andeq	r3, r1, ip, ror r3
   13618:	andeq	r3, r1, r0, ror #6
   1361c:	strdeq	r3, [r1], -r4
   13620:	andeq	r3, r1, r0, asr #5
   13624:	andeq	r3, r1, r4, lsr #5
   13628:	andeq	r3, r1, r8, lsr r5
   1362c:	andeq	r3, r1, r4, lsl r5
   13630:	andeq	r3, r1, r4, ror r5
   13634:	andeq	r3, r1, r4, ror r5
   13638:	andeq	r3, r1, r4, ror r5
   1363c:	andeq	r3, r1, r4, ror r5
   13640:	andeq	r3, r1, r4, ror r5
   13644:	andeq	r3, r1, r4, ror r5
   13648:	andeq	r3, r1, r4, ror r5
   1364c:	andeq	r3, r1, r4, ror r5
   13650:	andeq	r3, r1, r4, ror r5
   13654:	andeq	r3, r1, r4, ror r5
   13658:	andeq	r3, r1, r4, ror r5
   1365c:	andeq	r3, r1, r4, ror r5
   13660:	andeq	r3, r1, r4, ror r5
   13664:	andeq	r3, r1, r4, ror r5
   13668:	andeq	r3, r1, r4, ror r5
   1366c:	andeq	r3, r1, r4, ror r5
   13670:	andeq	r3, r1, r4, ror r5
   13674:	andeq	r3, r1, r4, ror r5
   13678:	andeq	r3, r1, ip, lsl #9
   1367c:	andeq	r3, r1, r8, lsl #9
   13680:	andeq	r3, r1, r8, lsl #9
   13684:	muleq	r1, r8, r0
   13688:	andeq	r3, r1, r8, lsl #9
   1368c:	andeq	r3, r1, r0, lsr #10
   13690:	andeq	r3, r1, r8, lsl #9
   13694:	strdeq	r3, [r1], -r4
   13698:	andeq	r3, r1, r8, lsl #9
   1369c:	andeq	r3, r1, r8, lsl #9
   136a0:	andeq	r3, r1, r8, lsl #9
   136a4:	andeq	r3, r1, r0, lsr #10
   136a8:	andeq	r3, r1, r0, lsr #10
   136ac:	andeq	r3, r1, r0, lsr #10
   136b0:	andeq	r3, r1, r0, lsr #10
   136b4:	andeq	r3, r1, r0, lsr #10
   136b8:	andeq	r3, r1, r0, lsr #10
   136bc:	andeq	r3, r1, r0, lsr #10
   136c0:	andeq	r3, r1, r0, lsr #10
   136c4:	andeq	r3, r1, r0, lsr #10
   136c8:	andeq	r3, r1, r0, lsr #10
   136cc:	andeq	r3, r1, r0, lsr #10
   136d0:	andeq	r3, r1, r0, lsr #10
   136d4:	andeq	r3, r1, r0, lsr #10
   136d8:	andeq	r3, r1, r0, lsr #10
   136dc:	andeq	r3, r1, r0, lsr #10
   136e0:	andeq	r3, r1, r0, lsr #10
   136e4:	andeq	r3, r1, r8, lsl #9
   136e8:	andeq	r3, r1, r8, lsl #9
   136ec:	andeq	r3, r1, r8, lsl #9
   136f0:	andeq	r3, r1, r8, lsl #9
   136f4:	andeq	r3, r1, r4, asr #9
   136f8:	andeq	r3, r1, r4, ror r5
   136fc:	andeq	r3, r1, r0, lsr #10
   13700:	andeq	r3, r1, r0, lsr #10
   13704:	andeq	r3, r1, r0, lsr #10
   13708:	andeq	r3, r1, r0, lsr #10
   1370c:	andeq	r3, r1, r0, lsr #10
   13710:	andeq	r3, r1, r0, lsr #10
   13714:	andeq	r3, r1, r0, lsr #10
   13718:	andeq	r3, r1, r0, lsr #10
   1371c:	andeq	r3, r1, r0, lsr #10
   13720:	andeq	r3, r1, r0, lsr #10
   13724:	andeq	r3, r1, r0, lsr #10
   13728:	andeq	r3, r1, r0, lsr #10
   1372c:	andeq	r3, r1, r0, lsr #10
   13730:	andeq	r3, r1, r0, lsr #10
   13734:	andeq	r3, r1, r0, lsr #10
   13738:	andeq	r3, r1, r0, lsr #10
   1373c:	andeq	r3, r1, r0, lsr #10
   13740:	andeq	r3, r1, r0, lsr #10
   13744:	andeq	r3, r1, r0, lsr #10
   13748:	andeq	r3, r1, r0, lsr #10
   1374c:	andeq	r3, r1, r0, lsr #10
   13750:	andeq	r3, r1, r0, lsr #10
   13754:	andeq	r3, r1, r0, lsr #10
   13758:	andeq	r3, r1, r0, lsr #10
   1375c:	andeq	r3, r1, r0, lsr #10
   13760:	andeq	r3, r1, r0, lsr #10
   13764:	andeq	r3, r1, r8, lsl #9
   13768:	andeq	r3, r1, r4, ror #3
   1376c:	andeq	r3, r1, r0, lsr #10
   13770:	andeq	r3, r1, r8, lsl #9
   13774:	andeq	r3, r1, r0, lsr #10
   13778:	andeq	r3, r1, r8, lsl #9
   1377c:	andeq	r3, r1, r0, lsr #10
   13780:	andeq	r3, r1, r0, lsr #10
   13784:	andeq	r3, r1, r0, lsr #10
   13788:	andeq	r3, r1, r0, lsr #10
   1378c:	andeq	r3, r1, r0, lsr #10
   13790:	andeq	r3, r1, r0, lsr #10
   13794:	andeq	r3, r1, r0, lsr #10
   13798:	andeq	r3, r1, r0, lsr #10
   1379c:	andeq	r3, r1, r0, lsr #10
   137a0:	andeq	r3, r1, r0, lsr #10
   137a4:	andeq	r3, r1, r0, lsr #10
   137a8:	andeq	r3, r1, r0, lsr #10
   137ac:	andeq	r3, r1, r0, lsr #10
   137b0:	andeq	r3, r1, r0, lsr #10
   137b4:	andeq	r3, r1, r0, lsr #10
   137b8:	andeq	r3, r1, r0, lsr #10
   137bc:	andeq	r3, r1, r0, lsr #10
   137c0:	andeq	r3, r1, r0, lsr #10
   137c4:	andeq	r3, r1, r0, lsr #10
   137c8:	andeq	r3, r1, r0, lsr #10
   137cc:	andeq	r3, r1, r0, lsr #10
   137d0:	andeq	r3, r1, r0, lsr #10
   137d4:	andeq	r3, r1, r0, lsr #10
   137d8:	andeq	r3, r1, r0, lsr #10
   137dc:	andeq	r3, r1, r0, lsr #10
   137e0:	andeq	r3, r1, r0, lsr #10
   137e4:	andeq	r3, r1, r8, ror r0
   137e8:	andeq	r3, r1, r8, lsl #9
   137ec:	andeq	r3, r1, r8, ror r0
   137f0:	muleq	r1, r8, r0
   137f4:	mov	r3, #116	; 0x74
   137f8:	b	132c8 <_obstack_memory_used@@Base+0x9cc>
   137fc:	ldr	r3, [sp, #160]	; 0xa0
   13800:	cmp	r3, #0
   13804:	beq	130d4 <_obstack_memory_used@@Base+0x7d8>
   13808:	lsr	r3, r4, #5
   1380c:	ldr	r0, [sp, #160]	; 0xa0
   13810:	uxtb	r3, r3
   13814:	and	r1, r4, #31
   13818:	ldr	r0, [r0, r3, lsl #2]
   1381c:	lsr	r3, r0, r1
   13820:	tst	r3, #1
   13824:	beq	130d4 <_obstack_memory_used@@Base+0x7d8>
   13828:	ldr	r3, [sp, #28]
   1382c:	cmp	r3, #0
   13830:	beq	13234 <_obstack_memory_used@@Base+0x938>
   13834:	ldr	sl, [sp, #32]
   13838:	mov	r8, fp
   1383c:	b	132f8 <_obstack_memory_used@@Base+0x9fc>
   13840:	ldr	r3, [sp, #28]
   13844:	cmp	r3, #0
   13848:	bne	13d9c <_obstack_memory_used@@Base+0x14a0>
   1384c:	add	sl, sl, #1
   13850:	ldr	r6, [sp, #40]	; 0x28
   13854:	mov	r5, #0
   13858:	mov	r4, #92	; 0x5c
   1385c:	b	130f0 <_obstack_memory_used@@Base+0x7f4>
   13860:	cmp	r9, r8
   13864:	bne	13ad4 <_obstack_memory_used@@Base+0x11d8>
   13868:	ldr	r0, [sp, #100]	; 0x64
   1386c:	bl	10e28 <iswprint@plt>
   13870:	add	r5, r5, r4
   13874:	cmp	r0, #0
   13878:	add	r0, sp, #104	; 0x68
   1387c:	moveq	r6, #0
   13880:	bl	10dc8 <mbsinit@plt>
   13884:	cmp	r0, #0
   13888:	beq	13a68 <_obstack_memory_used@@Base+0x116c>
   1388c:	mov	r2, r6
   13890:	mov	ip, r5
   13894:	eor	r5, r2, #1
   13898:	ldr	r4, [sp, #80]	; 0x50
   1389c:	ldr	r6, [sp, #84]	; 0x54
   138a0:	ldr	r7, [sp, #88]	; 0x58
   138a4:	uxtb	r5, r5
   138a8:	cmp	ip, #1
   138ac:	bls	13dac <_obstack_memory_used@@Base+0x14b0>
   138b0:	ldr	r3, [sp, #44]	; 0x2c
   138b4:	and	r8, r3, r5
   138b8:	mov	r5, r2
   138bc:	uxtb	r8, r8
   138c0:	add	r2, sl, ip
   138c4:	ldr	r0, [sp, #48]	; 0x30
   138c8:	mov	r1, #0
   138cc:	str	r5, [sp, #48]	; 0x30
   138d0:	ldr	r9, [sp, #28]
   138d4:	ldr	ip, [sp, #40]	; 0x28
   138d8:	ldr	r3, [sp, #32]
   138dc:	ldr	r5, [sp, #152]	; 0x98
   138e0:	b	1399c <_obstack_memory_used@@Base+0x10a0>
   138e4:	cmp	r9, #0
   138e8:	bne	13cc0 <_obstack_memory_used@@Base+0x13c4>
   138ec:	eor	r1, ip, #1
   138f0:	cmp	r5, #2
   138f4:	movne	r1, #0
   138f8:	andeq	r1, r1, #1
   138fc:	cmp	r1, #0
   13900:	beq	13938 <_obstack_memory_used@@Base+0x103c>
   13904:	cmp	fp, r7
   13908:	movhi	ip, #39	; 0x27
   1390c:	strbhi	ip, [r3, r7]
   13910:	add	ip, r7, #1
   13914:	cmp	fp, ip
   13918:	movhi	lr, #36	; 0x24
   1391c:	strbhi	lr, [r3, ip]
   13920:	add	ip, r7, #2
   13924:	cmp	fp, ip
   13928:	movhi	lr, #39	; 0x27
   1392c:	strbhi	lr, [r3, ip]
   13930:	add	r7, r7, #3
   13934:	mov	ip, r1
   13938:	cmp	fp, r7
   1393c:	movhi	r1, #92	; 0x5c
   13940:	strbhi	r1, [r3, r7]
   13944:	add	r1, r7, #1
   13948:	cmp	fp, r1
   1394c:	lsrhi	lr, r4, #6
   13950:	addhi	lr, lr, #48	; 0x30
   13954:	strbhi	lr, [r3, r1]
   13958:	add	lr, r7, #2
   1395c:	cmp	fp, lr
   13960:	lsrhi	r1, r4, #3
   13964:	andhi	r1, r1, #7
   13968:	addhi	r1, r1, #48	; 0x30
   1396c:	add	sl, sl, #1
   13970:	strbhi	r1, [r3, lr]
   13974:	and	r4, r4, #7
   13978:	cmp	r2, sl
   1397c:	add	r4, r4, #48	; 0x30
   13980:	add	r7, r7, #3
   13984:	bls	13ce4 <_obstack_memory_used@@Base+0x13e8>
   13988:	mov	r1, r8
   1398c:	cmp	fp, r7
   13990:	strbhi	r4, [r3, r7]
   13994:	ldrb	r4, [r0, #1]!
   13998:	add	r7, r7, #1
   1399c:	cmp	r8, #0
   139a0:	bne	138e4 <_obstack_memory_used@@Base+0xfe8>
   139a4:	cmp	r6, #0
   139a8:	bne	139f8 <_obstack_memory_used@@Base+0x10fc>
   139ac:	eor	r6, r1, #1
   139b0:	and	r6, r6, ip
   139b4:	add	sl, sl, #1
   139b8:	cmp	r2, sl
   139bc:	uxtb	r6, r6
   139c0:	bls	13a20 <_obstack_memory_used@@Base+0x1124>
   139c4:	cmp	r6, #0
   139c8:	beq	1398c <_obstack_memory_used@@Base+0x1090>
   139cc:	cmp	fp, r7
   139d0:	movhi	ip, #39	; 0x27
   139d4:	strbhi	ip, [r3, r7]
   139d8:	add	ip, r7, #1
   139dc:	cmp	fp, ip
   139e0:	movhi	lr, #39	; 0x27
   139e4:	strbhi	lr, [r3, ip]
   139e8:	add	r7, r7, #2
   139ec:	mov	r6, r8
   139f0:	mov	ip, r8
   139f4:	b	1398c <_obstack_memory_used@@Base+0x1090>
   139f8:	cmp	fp, r7
   139fc:	eor	r6, r1, #1
   13a00:	movhi	lr, #92	; 0x5c
   13a04:	and	r6, r6, ip
   13a08:	add	sl, sl, #1
   13a0c:	strbhi	lr, [r3, r7]
   13a10:	cmp	r2, sl
   13a14:	add	r7, r7, #1
   13a18:	uxtb	r6, r6
   13a1c:	bhi	139c4 <_obstack_memory_used@@Base+0x10c8>
   13a20:	str	ip, [sp, #40]	; 0x28
   13a24:	ldr	r5, [sp, #48]	; 0x30
   13a28:	b	130f0 <_obstack_memory_used@@Base+0x7f4>
   13a2c:	ldr	r3, [sp, #24]
   13a30:	cmn	r3, #1
   13a34:	mov	r3, #0
   13a38:	str	r3, [sp, #104]	; 0x68
   13a3c:	str	r3, [sp, #108]	; 0x6c
   13a40:	beq	13d60 <_obstack_memory_used@@Base+0x1464>
   13a44:	mov	r2, r5
   13a48:	mov	r3, #0
   13a4c:	str	r7, [sp, #88]	; 0x58
   13a50:	ldr	r7, [sp, #152]	; 0x98
   13a54:	str	r5, [sp, #92]	; 0x5c
   13a58:	str	r6, [sp, #84]	; 0x54
   13a5c:	mov	r5, r3
   13a60:	mov	r6, r2
   13a64:	str	r4, [sp, #80]	; 0x50
   13a68:	ldr	r3, [sp, #56]	; 0x38
   13a6c:	add	r9, sl, r5
   13a70:	add	r8, r3, r9
   13a74:	ldr	r3, [sp, #24]
   13a78:	mov	r1, r8
   13a7c:	sub	r2, r3, r9
   13a80:	add	r0, sp, #100	; 0x64
   13a84:	add	r3, sp, #104	; 0x68
   13a88:	bl	15430 <_obstack_memory_used@@Base+0x2b34>
   13a8c:	subs	r4, r0, #0
   13a90:	beq	13e38 <_obstack_memory_used@@Base+0x153c>
   13a94:	cmn	r4, #1
   13a98:	beq	13e18 <_obstack_memory_used@@Base+0x151c>
   13a9c:	cmn	r4, #2
   13aa0:	beq	13db8 <_obstack_memory_used@@Base+0x14bc>
   13aa4:	ldr	r2, [sp, #28]
   13aa8:	cmp	r7, #2
   13aac:	movne	r2, #0
   13ab0:	andeq	r2, r2, #1
   13ab4:	cmp	r2, #0
   13ab8:	beq	13868 <_obstack_memory_used@@Base+0xf6c>
   13abc:	cmp	r4, #1
   13ac0:	beq	13868 <_obstack_memory_used@@Base+0xf6c>
   13ac4:	sub	r3, r4, #1
   13ac8:	add	r9, r3, r9
   13acc:	ldr	r3, [sp, #56]	; 0x38
   13ad0:	add	r9, r3, r9
   13ad4:	ldrb	r3, [r8, #1]!
   13ad8:	sub	r3, r3, #91	; 0x5b
   13adc:	cmp	r3, #33	; 0x21
   13ae0:	ldrls	pc, [pc, r3, lsl #2]
   13ae4:	b	13860 <_obstack_memory_used@@Base+0xf64>
   13ae8:	andeq	r3, r1, r0, ror fp
   13aec:	andeq	r3, r1, r0, ror fp
   13af0:	andeq	r3, r1, r0, ror #16
   13af4:	andeq	r3, r1, r0, ror fp
   13af8:	andeq	r3, r1, r0, ror #16
   13afc:	andeq	r3, r1, r0, ror fp
   13b00:	andeq	r3, r1, r0, ror #16
   13b04:	andeq	r3, r1, r0, ror #16
   13b08:	andeq	r3, r1, r0, ror #16
   13b0c:	andeq	r3, r1, r0, ror #16
   13b10:	andeq	r3, r1, r0, ror #16
   13b14:	andeq	r3, r1, r0, ror #16
   13b18:	andeq	r3, r1, r0, ror #16
   13b1c:	andeq	r3, r1, r0, ror #16
   13b20:	andeq	r3, r1, r0, ror #16
   13b24:	andeq	r3, r1, r0, ror #16
   13b28:	andeq	r3, r1, r0, ror #16
   13b2c:	andeq	r3, r1, r0, ror #16
   13b30:	andeq	r3, r1, r0, ror #16
   13b34:	andeq	r3, r1, r0, ror #16
   13b38:	andeq	r3, r1, r0, ror #16
   13b3c:	andeq	r3, r1, r0, ror #16
   13b40:	andeq	r3, r1, r0, ror #16
   13b44:	andeq	r3, r1, r0, ror #16
   13b48:	andeq	r3, r1, r0, ror #16
   13b4c:	andeq	r3, r1, r0, ror #16
   13b50:	andeq	r3, r1, r0, ror #16
   13b54:	andeq	r3, r1, r0, ror #16
   13b58:	andeq	r3, r1, r0, ror #16
   13b5c:	andeq	r3, r1, r0, ror #16
   13b60:	andeq	r3, r1, r0, ror #16
   13b64:	andeq	r3, r1, r0, ror #16
   13b68:	andeq	r3, r1, r0, ror #16
   13b6c:	andeq	r3, r1, r0, ror fp
   13b70:	mov	r3, #2
   13b74:	ldr	sl, [sp, #32]
   13b78:	mov	r8, fp
   13b7c:	str	r3, [sp, #152]	; 0x98
   13b80:	b	132f8 <_obstack_memory_used@@Base+0x9fc>
   13b84:	ldr	r3, [sp, #156]	; 0x9c
   13b88:	tst	r3, #1
   13b8c:	bne	13cb8 <_obstack_memory_used@@Base+0x13bc>
   13b90:	ldr	r3, [sp, #152]	; 0x98
   13b94:	ldr	r4, [sp, #44]	; 0x2c
   13b98:	sub	r2, r3, #2
   13b9c:	mov	r5, #0
   13ba0:	clz	r2, r2
   13ba4:	mov	r8, r4
   13ba8:	lsr	r2, r2, #5
   13bac:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13bb0:	ldr	r3, [sp, #156]	; 0x9c
   13bb4:	ands	r9, r3, #4
   13bb8:	beq	13cf0 <_obstack_memory_used@@Base+0x13f4>
   13bbc:	ldr	r2, [sp, #24]
   13bc0:	add	r3, sl, #2
   13bc4:	cmp	r3, r2
   13bc8:	bcs	13bdc <_obstack_memory_used@@Base+0x12e0>
   13bcc:	ldr	r2, [sp, #48]	; 0x30
   13bd0:	ldrb	r4, [r2, #1]
   13bd4:	cmp	r4, #63	; 0x3f
   13bd8:	beq	13e78 <_obstack_memory_used@@Base+0x157c>
   13bdc:	mov	r2, #0
   13be0:	mov	r8, r2
   13be4:	mov	r5, r2
   13be8:	mov	r4, #63	; 0x3f
   13bec:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13bf0:	ldr	r3, [sp, #28]
   13bf4:	cmp	r3, #0
   13bf8:	bne	13f1c <_obstack_memory_used@@Base+0x1620>
   13bfc:	mov	r2, r5
   13c00:	mov	r8, r3
   13c04:	mov	r5, #0
   13c08:	mov	r4, #63	; 0x3f
   13c0c:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13c10:	ldr	r3, [sp, #28]
   13c14:	cmp	r3, #0
   13c18:	bne	13f1c <_obstack_memory_used@@Base+0x1620>
   13c1c:	ldr	r2, [sp, #72]	; 0x48
   13c20:	adds	r3, fp, #0
   13c24:	movne	r3, #1
   13c28:	cmp	r2, #0
   13c2c:	movne	r3, #0
   13c30:	cmp	r3, #0
   13c34:	strne	fp, [sp, #72]	; 0x48
   13c38:	movne	fp, #0
   13c3c:	bne	13c78 <_obstack_memory_used@@Base+0x137c>
   13c40:	cmp	fp, r7
   13c44:	movhi	r2, #39	; 0x27
   13c48:	ldrhi	r3, [sp, #32]
   13c4c:	strbhi	r2, [r3, r7]
   13c50:	add	r3, r7, #1
   13c54:	cmp	fp, r3
   13c58:	movhi	r1, #92	; 0x5c
   13c5c:	ldrhi	r2, [sp, #32]
   13c60:	strbhi	r1, [r2, r3]
   13c64:	add	r3, r7, #2
   13c68:	cmp	fp, r3
   13c6c:	movhi	r1, #39	; 0x27
   13c70:	ldrhi	r2, [sp, #32]
   13c74:	strbhi	r1, [r2, r3]
   13c78:	ldr	r3, [sp, #28]
   13c7c:	add	r7, r7, #3
   13c80:	mov	r2, r5
   13c84:	mov	r8, r3
   13c88:	str	r5, [sp, #68]	; 0x44
   13c8c:	str	r3, [sp, #40]	; 0x28
   13c90:	mov	r4, #39	; 0x27
   13c94:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13c98:	ldr	r3, [sp, #56]	; 0x38
   13c9c:	ldrb	r3, [r3, #1]
   13ca0:	adds	r3, r3, #0
   13ca4:	movne	r3, #1
   13ca8:	b	13090 <_obstack_memory_used@@Base+0x794>
   13cac:	ldr	r5, [sp, #28]
   13cb0:	mov	r4, #48	; 0x30
   13cb4:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13cb8:	add	sl, sl, #1
   13cbc:	b	12be8 <_obstack_memory_used@@Base+0x2ec>
   13cc0:	mov	sl, r3
   13cc4:	ldr	r3, [sp, #28]
   13cc8:	mov	r8, fp
   13ccc:	str	r3, [sp, #44]	; 0x2c
   13cd0:	ldr	r3, [sp, #152]	; 0x98
   13cd4:	sub	r2, r3, #2
   13cd8:	clz	r2, r2
   13cdc:	lsr	r2, r2, #5
   13ce0:	b	132f8 <_obstack_memory_used@@Base+0x9fc>
   13ce4:	str	ip, [sp, #40]	; 0x28
   13ce8:	ldr	r5, [sp, #48]	; 0x30
   13cec:	b	13128 <_obstack_memory_used@@Base+0x82c>
   13cf0:	mov	r2, r9
   13cf4:	mov	r8, r9
   13cf8:	mov	r5, #0
   13cfc:	mov	r4, #63	; 0x3f
   13d00:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13d04:	cmp	fp, #0
   13d08:	beq	13d80 <_obstack_memory_used@@Base+0x1484>
   13d0c:	ldr	r1, [sp, #32]
   13d10:	mov	r3, #34	; 0x22
   13d14:	mov	r2, #1
   13d18:	strb	r3, [r1]
   13d1c:	ldr	r3, [pc, #332]	; 13e70 <_obstack_memory_used@@Base+0x1574>
   13d20:	str	r2, [sp, #52]	; 0x34
   13d24:	mov	r7, r2
   13d28:	str	r2, [sp, #44]	; 0x2c
   13d2c:	str	r3, [sp, #64]	; 0x40
   13d30:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   13d34:	ldr	r3, [pc, #300]	; 13e68 <_obstack_memory_used@@Base+0x156c>
   13d38:	str	r3, [sp, #64]	; 0x40
   13d3c:	mov	r3, #0
   13d40:	str	r3, [sp, #28]
   13d44:	mov	r3, #1
   13d48:	str	r3, [sp, #52]	; 0x34
   13d4c:	mov	r7, r3
   13d50:	mov	r3, #2
   13d54:	str	r3, [sp, #152]	; 0x98
   13d58:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   13d5c:	bl	10fb4 <abort@plt>
   13d60:	ldr	r0, [sp, #56]	; 0x38
   13d64:	bl	10f0c <strlen@plt>
   13d68:	str	r0, [sp, #24]
   13d6c:	b	13a44 <_obstack_memory_used@@Base+0x1148>
   13d70:	mov	r5, r8
   13d74:	mov	r4, #48	; 0x30
   13d78:	ldr	r8, [sp, #44]	; 0x2c
   13d7c:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13d80:	mov	r3, #1
   13d84:	str	r3, [sp, #52]	; 0x34
   13d88:	mov	r7, r3
   13d8c:	str	r3, [sp, #44]	; 0x2c
   13d90:	ldr	r3, [pc, #216]	; 13e70 <_obstack_memory_used@@Base+0x1574>
   13d94:	str	r3, [sp, #64]	; 0x40
   13d98:	b	12bd8 <_obstack_memory_used@@Base+0x2dc>
   13d9c:	ldr	sl, [sp, #32]
   13da0:	mov	r8, fp
   13da4:	mov	r2, r3
   13da8:	b	132f8 <_obstack_memory_used@@Base+0x9fc>
   13dac:	mov	r3, r5
   13db0:	mov	r5, r2
   13db4:	b	135b0 <_obstack_memory_used@@Base+0xcb4>
   13db8:	ldr	r1, [sp, #24]
   13dbc:	mov	r2, r5
   13dc0:	cmp	r1, r9
   13dc4:	mov	ip, r5
   13dc8:	ldr	r4, [sp, #80]	; 0x50
   13dcc:	ldr	r5, [sp, #92]	; 0x5c
   13dd0:	ldr	r6, [sp, #84]	; 0x54
   13dd4:	ldr	r7, [sp, #88]	; 0x58
   13dd8:	bls	13e0c <_obstack_memory_used@@Base+0x1510>
   13ddc:	ldrb	r3, [r8]
   13de0:	cmp	r3, #0
   13de4:	bne	13df8 <_obstack_memory_used@@Base+0x14fc>
   13de8:	b	13e10 <_obstack_memory_used@@Base+0x1514>
   13dec:	ldrb	r3, [r8, #1]!
   13df0:	cmp	r3, #0
   13df4:	beq	13f10 <_obstack_memory_used@@Base+0x1614>
   13df8:	add	r2, r2, #1
   13dfc:	add	r3, sl, r2
   13e00:	cmp	r1, r3
   13e04:	bhi	13dec <_obstack_memory_used@@Base+0x14f0>
   13e08:	mov	ip, r2
   13e0c:	mov	r3, #0
   13e10:	mov	r2, r3
   13e14:	b	138a8 <_obstack_memory_used@@Base+0xfac>
   13e18:	mov	r3, #0
   13e1c:	mov	ip, r5
   13e20:	ldr	r4, [sp, #80]	; 0x50
   13e24:	ldr	r5, [sp, #92]	; 0x5c
   13e28:	ldr	r6, [sp, #84]	; 0x54
   13e2c:	ldr	r7, [sp, #88]	; 0x58
   13e30:	mov	r2, r3
   13e34:	b	138a8 <_obstack_memory_used@@Base+0xfac>
   13e38:	mov	r3, r6
   13e3c:	mov	ip, r5
   13e40:	eor	r5, r3, #1
   13e44:	mov	r2, r6
   13e48:	ldr	r4, [sp, #80]	; 0x50
   13e4c:	ldr	r6, [sp, #84]	; 0x54
   13e50:	ldr	r7, [sp, #88]	; 0x58
   13e54:	uxtb	r5, r5
   13e58:	b	138a8 <_obstack_memory_used@@Base+0xfac>
   13e5c:	ldr	sl, [sp, #32]
   13e60:	mov	r8, fp
   13e64:	b	13ccc <_obstack_memory_used@@Base+0x13d0>
   13e68:	andeq	r7, r1, r4, lsr r6
   13e6c:	andeq	r7, r1, r8, lsr r6
   13e70:	andeq	r7, r1, r0, lsr r6
   13e74:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13e78:	ldr	r2, [sp, #56]	; 0x38
   13e7c:	ldrb	r1, [r2, r3]
   13e80:	sub	r2, r1, #33	; 0x21
   13e84:	uxtb	r2, r2
   13e88:	cmp	r2, #29
   13e8c:	bhi	13f2c <_obstack_memory_used@@Base+0x1630>
   13e90:	ldr	r0, [pc, #-36]	; 13e74 <_obstack_memory_used@@Base+0x1578>
   13e94:	mov	ip, #1
   13e98:	ands	r2, r0, ip, lsl r2
   13e9c:	beq	13f3c <_obstack_memory_used@@Base+0x1640>
   13ea0:	ldr	r2, [sp, #28]
   13ea4:	cmp	r2, #0
   13ea8:	bne	1403c <_obstack_memory_used@@Base+0x1740>
   13eac:	cmp	fp, r7
   13eb0:	ldr	r8, [sp, #28]
   13eb4:	ldrhi	r2, [sp, #32]
   13eb8:	mov	sl, r3
   13ebc:	mov	r5, r8
   13ec0:	strbhi	r4, [r2, r7]
   13ec4:	add	r2, r7, #1
   13ec8:	cmp	fp, r2
   13ecc:	movhi	r0, #34	; 0x22
   13ed0:	ldrhi	ip, [sp, #32]
   13ed4:	mov	r4, r1
   13ed8:	strbhi	r0, [ip, r2]
   13edc:	add	r2, r7, #2
   13ee0:	cmp	fp, r2
   13ee4:	movhi	r0, #34	; 0x22
   13ee8:	ldrhi	ip, [sp, #32]
   13eec:	strbhi	r0, [ip, r2]
   13ef0:	add	r2, r7, #3
   13ef4:	cmp	fp, r2
   13ef8:	movhi	r0, #63	; 0x3f
   13efc:	ldrhi	ip, [sp, #32]
   13f00:	add	r7, r7, #4
   13f04:	strbhi	r0, [ip, r2]
   13f08:	mov	r2, r8
   13f0c:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13f10:	mov	ip, r2
   13f14:	mov	r2, r3
   13f18:	b	138a8 <_obstack_memory_used@@Base+0xfac>
   13f1c:	ldr	sl, [sp, #32]
   13f20:	mov	r8, fp
   13f24:	ldr	r2, [sp, #28]
   13f28:	b	132f8 <_obstack_memory_used@@Base+0x9fc>
   13f2c:	mov	r2, #0
   13f30:	mov	r8, r2
   13f34:	mov	r5, r2
   13f38:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13f3c:	mov	r8, r2
   13f40:	mov	r5, #0
   13f44:	b	130b8 <_obstack_memory_used@@Base+0x7bc>
   13f48:	ldr	r1, [sp, #152]	; 0x98
   13f4c:	bl	12a14 <_obstack_memory_used@@Base+0x118>
   13f50:	str	r0, [sp, #168]	; 0xa8
   13f54:	b	12f74 <_obstack_memory_used@@Base+0x678>
   13f58:	ldr	r1, [sp, #152]	; 0x98
   13f5c:	bl	12a14 <_obstack_memory_used@@Base+0x118>
   13f60:	str	r0, [sp, #164]	; 0xa4
   13f64:	b	12f54 <_obstack_memory_used@@Base+0x658>
   13f68:	ldr	r7, [sp, #28]
   13f6c:	b	12fb4 <_obstack_memory_used@@Base+0x6b8>
   13f70:	ldr	sl, [sp, #32]
   13f74:	ldr	r2, [sp, #68]	; 0x44
   13f78:	mov	r8, fp
   13f7c:	mov	fp, r7
   13f80:	ldr	r3, [sp, #64]	; 0x40
   13f84:	cmp	r3, #0
   13f88:	moveq	r2, #0
   13f8c:	andne	r2, r2, #1
   13f90:	cmp	r2, #0
   13f94:	beq	13fc0 <_obstack_memory_used@@Base+0x16c4>
   13f98:	mov	r2, r3
   13f9c:	ldrb	r3, [r3]
   13fa0:	cmp	r3, #0
   13fa4:	beq	13fc0 <_obstack_memory_used@@Base+0x16c4>
   13fa8:	cmp	r8, fp
   13fac:	strbhi	r3, [sl, fp]
   13fb0:	ldrb	r3, [r2, #1]!
   13fb4:	add	fp, fp, #1
   13fb8:	cmp	r3, #0
   13fbc:	bne	13fa8 <_obstack_memory_used@@Base+0x16ac>
   13fc0:	cmp	r8, fp
   13fc4:	movhi	r3, #0
   13fc8:	strbhi	r3, [sl, fp]
   13fcc:	b	13354 <_obstack_memory_used@@Base+0xa58>
   13fd0:	ldr	r3, [sp, #168]	; 0xa8
   13fd4:	ldr	sl, [sp, #32]
   13fd8:	str	r3, [sp, #16]
   13fdc:	ldr	r3, [sp, #164]	; 0xa4
   13fe0:	mov	ip, #5
   13fe4:	str	r3, [sp, #12]
   13fe8:	ldr	r3, [sp, #160]	; 0xa0
   13fec:	ldr	r2, [sp, #56]	; 0x38
   13ff0:	str	r3, [sp, #8]
   13ff4:	ldr	r3, [sp, #156]	; 0x9c
   13ff8:	ldr	r1, [sp, #72]	; 0x48
   13ffc:	str	r3, [sp, #4]
   14000:	mov	r0, sl
   14004:	ldr	r3, [sp, #24]
   14008:	str	ip, [sp]
   1400c:	bl	12b34 <_obstack_memory_used@@Base+0x238>
   14010:	mov	fp, r0
   14014:	b	13354 <_obstack_memory_used@@Base+0xa58>
   14018:	mov	r8, fp
   1401c:	ldr	sl, [sp, #32]
   14020:	mov	fp, r7
   14024:	mov	r2, r3
   14028:	b	13f80 <_obstack_memory_used@@Base+0x1684>
   1402c:	mov	r8, fp
   14030:	ldr	sl, [sp, #32]
   14034:	mov	fp, r7
   14038:	b	13f80 <_obstack_memory_used@@Base+0x1684>
   1403c:	ldr	sl, [sp, #32]
   14040:	mov	r8, fp
   14044:	b	13310 <_obstack_memory_used@@Base+0xa14>
   14048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1404c:	sub	sp, sp, #52	; 0x34
   14050:	mov	r4, r0
   14054:	mov	r5, r3
   14058:	mov	sl, r1
   1405c:	mov	fp, r2
   14060:	bl	10f18 <__errno_location@plt>
   14064:	ldr	r7, [pc, #412]	; 14208 <_obstack_memory_used@@Base+0x190c>
   14068:	cmn	r4, #-2147483647	; 0x80000001
   1406c:	ldr	r6, [r7]
   14070:	mov	r8, r0
   14074:	movne	r0, #0
   14078:	moveq	r0, #1
   1407c:	ldr	r3, [r8]
   14080:	orrs	r0, r0, r4, lsr #31
   14084:	str	r3, [sp, #24]
   14088:	bne	14204 <_obstack_memory_used@@Base+0x1908>
   1408c:	ldr	r2, [r7, #4]
   14090:	cmp	r4, r2
   14094:	blt	140f4 <_obstack_memory_used@@Base+0x17f8>
   14098:	add	r9, r7, #8
   1409c:	cmp	r6, r9
   140a0:	str	r2, [sp, #44]	; 0x2c
   140a4:	beq	141d4 <_obstack_memory_used@@Base+0x18d8>
   140a8:	mov	r3, #8
   140ac:	sub	r2, r4, r2
   140b0:	mov	r0, r6
   140b4:	str	r3, [sp]
   140b8:	add	r2, r2, #1
   140bc:	mvn	r3, #-2147483648	; 0x80000000
   140c0:	add	r1, sp, #44	; 0x2c
   140c4:	bl	14eb4 <_obstack_memory_used@@Base+0x25b8>
   140c8:	mov	r6, r0
   140cc:	str	r0, [r7]
   140d0:	ldr	r0, [r7, #4]
   140d4:	ldr	r2, [sp, #44]	; 0x2c
   140d8:	mov	r1, #0
   140dc:	sub	r2, r2, r0
   140e0:	add	r0, r6, r0, lsl #3
   140e4:	lsl	r2, r2, #3
   140e8:	bl	10f30 <memset@plt>
   140ec:	ldr	r3, [sp, #44]	; 0x2c
   140f0:	str	r3, [r7, #4]
   140f4:	add	r3, r6, r4, lsl #3
   140f8:	ldr	r1, [r5, #4]
   140fc:	ldr	r7, [r3, #4]
   14100:	ldr	r9, [r6, r4, lsl #3]
   14104:	ldr	r2, [r5, #40]	; 0x28
   14108:	ldr	ip, [r5, #44]	; 0x2c
   1410c:	add	r0, r5, #8
   14110:	str	r3, [sp, #28]
   14114:	ldr	r3, [r5]
   14118:	orr	r1, r1, #1
   1411c:	mov	lr, r0
   14120:	str	r1, [sp, #32]
   14124:	str	r0, [sp, #36]	; 0x24
   14128:	str	r1, [sp, #4]
   1412c:	str	r2, [sp, #12]
   14130:	str	r3, [sp]
   14134:	mov	r0, r7
   14138:	mov	r1, r9
   1413c:	str	ip, [sp, #16]
   14140:	str	lr, [sp, #8]
   14144:	mov	r3, fp
   14148:	mov	r2, sl
   1414c:	bl	12b34 <_obstack_memory_used@@Base+0x238>
   14150:	cmp	r9, r0
   14154:	bhi	141c0 <_obstack_memory_used@@Base+0x18c4>
   14158:	ldr	r3, [pc, #172]	; 1420c <_obstack_memory_used@@Base+0x1910>
   1415c:	add	r9, r0, #1
   14160:	cmp	r7, r3
   14164:	str	r9, [r6, r4, lsl #3]
   14168:	beq	14174 <_obstack_memory_used@@Base+0x1878>
   1416c:	mov	r0, r7
   14170:	bl	12310 <close@plt+0x1350>
   14174:	mov	r0, r9
   14178:	bl	14d50 <_obstack_memory_used@@Base+0x2454>
   1417c:	ldr	lr, [sp, #28]
   14180:	ldr	ip, [r5, #44]	; 0x2c
   14184:	ldr	r4, [r5, #40]	; 0x28
   14188:	mov	r3, fp
   1418c:	mov	r2, sl
   14190:	mov	r1, r9
   14194:	str	r0, [lr, #4]
   14198:	ldr	lr, [r5]
   1419c:	ldr	r5, [sp, #36]	; 0x24
   141a0:	str	ip, [sp, #16]
   141a4:	str	r5, [sp, #8]
   141a8:	ldr	r5, [sp, #32]
   141ac:	str	r4, [sp, #12]
   141b0:	str	r5, [sp, #4]
   141b4:	str	lr, [sp]
   141b8:	mov	r7, r0
   141bc:	bl	12b34 <_obstack_memory_used@@Base+0x238>
   141c0:	ldr	r3, [sp, #24]
   141c4:	mov	r0, r7
   141c8:	str	r3, [r8]
   141cc:	add	sp, sp, #52	; 0x34
   141d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d4:	mov	r3, #8
   141d8:	sub	r2, r4, r2
   141dc:	str	r3, [sp]
   141e0:	add	r1, sp, #44	; 0x2c
   141e4:	add	r2, r2, #1
   141e8:	mvn	r3, #-2147483648	; 0x80000000
   141ec:	bl	14eb4 <_obstack_memory_used@@Base+0x25b8>
   141f0:	mov	r6, r0
   141f4:	ldm	r9, {r0, r1}
   141f8:	str	r6, [r7]
   141fc:	stm	r6, {r0, r1}
   14200:	b	140d0 <_obstack_memory_used@@Base+0x17d4>
   14204:	bl	10fb4 <abort@plt>
   14208:	strdeq	r8, [r2], -r4
   1420c:	muleq	r2, r4, r1
   14210:	push	{r4, r5, r6, lr}
   14214:	mov	r5, r0
   14218:	bl	10f18 <__errno_location@plt>
   1421c:	cmp	r5, #0
   14220:	mov	r1, #48	; 0x30
   14224:	mov	r4, r0
   14228:	ldr	r0, [pc, #16]	; 14240 <_obstack_memory_used@@Base+0x1944>
   1422c:	ldr	r6, [r4]
   14230:	movne	r0, r5
   14234:	bl	151b0 <_obstack_memory_used@@Base+0x28b4>
   14238:	str	r6, [r4]
   1423c:	pop	{r4, r5, r6, pc}
   14240:	muleq	r2, r4, r2
   14244:	ldr	r3, [pc, #12]	; 14258 <_obstack_memory_used@@Base+0x195c>
   14248:	cmp	r0, #0
   1424c:	moveq	r0, r3
   14250:	ldr	r0, [r0]
   14254:	bx	lr
   14258:	muleq	r2, r4, r2
   1425c:	ldr	r3, [pc, #12]	; 14270 <_obstack_memory_used@@Base+0x1974>
   14260:	cmp	r0, #0
   14264:	moveq	r0, r3
   14268:	str	r1, [r0]
   1426c:	bx	lr
   14270:	muleq	r2, r4, r2
   14274:	ldr	r3, [pc, #52]	; 142b0 <_obstack_memory_used@@Base+0x19b4>
   14278:	cmp	r0, #0
   1427c:	moveq	r0, r3
   14280:	add	r3, r0, #8
   14284:	push	{lr}		; (str lr, [sp, #-4]!)
   14288:	lsr	lr, r1, #5
   1428c:	and	r1, r1, #31
   14290:	ldr	ip, [r3, lr, lsl #2]
   14294:	lsr	r0, ip, r1
   14298:	eor	r2, r2, r0
   1429c:	and	r2, r2, #1
   142a0:	and	r0, r0, #1
   142a4:	eor	r1, ip, r2, lsl r1
   142a8:	str	r1, [r3, lr, lsl #2]
   142ac:	pop	{pc}		; (ldr pc, [sp], #4)
   142b0:	muleq	r2, r4, r2
   142b4:	ldr	r3, [pc, #16]	; 142cc <_obstack_memory_used@@Base+0x19d0>
   142b8:	cmp	r0, #0
   142bc:	movne	r3, r0
   142c0:	ldr	r0, [r3, #4]
   142c4:	str	r1, [r3, #4]
   142c8:	bx	lr
   142cc:	muleq	r2, r4, r2
   142d0:	ldr	r3, [pc, #44]	; 14304 <_obstack_memory_used@@Base+0x1a08>
   142d4:	cmp	r0, #0
   142d8:	moveq	r0, r3
   142dc:	mov	ip, #10
   142e0:	cmp	r2, #0
   142e4:	cmpne	r1, #0
   142e8:	str	ip, [r0]
   142ec:	beq	142fc <_obstack_memory_used@@Base+0x1a00>
   142f0:	str	r1, [r0, #40]	; 0x28
   142f4:	str	r2, [r0, #44]	; 0x2c
   142f8:	bx	lr
   142fc:	push	{r4, lr}
   14300:	bl	10fb4 <abort@plt>
   14304:	muleq	r2, r4, r2
   14308:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1430c:	sub	sp, sp, #24
   14310:	ldr	ip, [pc, #108]	; 14384 <_obstack_memory_used@@Base+0x1a88>
   14314:	ldr	r4, [sp, #56]	; 0x38
   14318:	mov	r9, r2
   1431c:	cmp	r4, #0
   14320:	moveq	r4, ip
   14324:	mov	sl, r3
   14328:	mov	r7, r0
   1432c:	mov	r8, r1
   14330:	bl	10f18 <__errno_location@plt>
   14334:	ldr	r3, [r4, #44]	; 0x2c
   14338:	mov	r1, r8
   1433c:	ldr	r6, [r0]
   14340:	str	r3, [sp, #16]
   14344:	ldr	r2, [r4, #40]	; 0x28
   14348:	add	r3, r4, #8
   1434c:	str	r3, [sp, #8]
   14350:	str	r2, [sp, #12]
   14354:	ldr	r2, [r4, #4]
   14358:	mov	r5, r0
   1435c:	str	r2, [sp, #4]
   14360:	ldr	ip, [r4]
   14364:	mov	r3, sl
   14368:	mov	r2, r9
   1436c:	mov	r0, r7
   14370:	str	ip, [sp]
   14374:	bl	12b34 <_obstack_memory_used@@Base+0x238>
   14378:	str	r6, [r5]
   1437c:	add	sp, sp, #24
   14380:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14384:	muleq	r2, r4, r2
   14388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1438c:	cmp	r3, #0
   14390:	sub	sp, sp, #44	; 0x2c
   14394:	ldr	r4, [pc, #192]	; 1445c <_obstack_memory_used@@Base+0x1b60>
   14398:	mov	r6, r2
   1439c:	movne	r4, r3
   143a0:	mov	r9, r1
   143a4:	mov	r8, r0
   143a8:	bl	10f18 <__errno_location@plt>
   143ac:	ldr	r3, [r4, #44]	; 0x2c
   143b0:	ldr	r5, [r4, #4]
   143b4:	add	sl, r4, #8
   143b8:	cmp	r6, #0
   143bc:	orreq	r5, r5, #1
   143c0:	mov	r1, #0
   143c4:	ldr	r2, [r0]
   143c8:	str	r3, [sp, #16]
   143cc:	ldr	r3, [r4, #40]	; 0x28
   143d0:	stmib	sp, {r5, sl}
   143d4:	str	r3, [sp, #12]
   143d8:	ldr	r3, [r4]
   143dc:	mov	r7, r0
   143e0:	str	r2, [sp, #28]
   143e4:	str	r3, [sp]
   143e8:	mov	r2, r8
   143ec:	mov	r3, r9
   143f0:	mov	r0, r1
   143f4:	bl	12b34 <_obstack_memory_used@@Base+0x238>
   143f8:	add	r1, r0, #1
   143fc:	mov	fp, r0
   14400:	mov	r0, r1
   14404:	str	r1, [sp, #36]	; 0x24
   14408:	bl	14d50 <_obstack_memory_used@@Base+0x2454>
   1440c:	ldr	r3, [r4, #44]	; 0x2c
   14410:	mov	r2, r8
   14414:	str	r3, [sp, #16]
   14418:	ldr	r3, [r4, #40]	; 0x28
   1441c:	str	r5, [sp, #4]
   14420:	str	r3, [sp, #12]
   14424:	str	sl, [sp, #8]
   14428:	ldr	ip, [r4]
   1442c:	ldr	r1, [sp, #36]	; 0x24
   14430:	mov	r3, r9
   14434:	str	ip, [sp]
   14438:	str	r0, [sp, #32]
   1443c:	bl	12b34 <_obstack_memory_used@@Base+0x238>
   14440:	ldr	r2, [sp, #28]
   14444:	cmp	r6, #0
   14448:	str	r2, [r7]
   1444c:	ldr	r0, [sp, #32]
   14450:	strne	fp, [r6]
   14454:	add	sp, sp, #44	; 0x2c
   14458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1445c:	muleq	r2, r4, r2
   14460:	mov	r3, r2
   14464:	mov	r2, #0
   14468:	b	14388 <_obstack_memory_used@@Base+0x1a8c>
   1446c:	push	{r4, r5, r6, r7, r8, lr}
   14470:	ldr	r6, [pc, #116]	; 144ec <_obstack_memory_used@@Base+0x1bf0>
   14474:	ldr	r3, [r6, #4]
   14478:	ldr	r7, [r6]
   1447c:	cmp	r3, #1
   14480:	movgt	r5, r7
   14484:	movgt	r4, #1
   14488:	ble	144a8 <_obstack_memory_used@@Base+0x1bac>
   1448c:	ldr	r0, [r5, #12]
   14490:	bl	12310 <close@plt+0x1350>
   14494:	ldr	r3, [r6, #4]
   14498:	add	r4, r4, #1
   1449c:	cmp	r3, r4
   144a0:	add	r5, r5, #8
   144a4:	bgt	1448c <_obstack_memory_used@@Base+0x1b90>
   144a8:	ldr	r0, [r7, #4]
   144ac:	ldr	r4, [pc, #60]	; 144f0 <_obstack_memory_used@@Base+0x1bf4>
   144b0:	cmp	r0, r4
   144b4:	beq	144c8 <_obstack_memory_used@@Base+0x1bcc>
   144b8:	bl	12310 <close@plt+0x1350>
   144bc:	mov	r3, #256	; 0x100
   144c0:	str	r4, [r6, #12]
   144c4:	str	r3, [r6, #8]
   144c8:	ldr	r4, [pc, #36]	; 144f4 <_obstack_memory_used@@Base+0x1bf8>
   144cc:	cmp	r7, r4
   144d0:	beq	144e0 <_obstack_memory_used@@Base+0x1be4>
   144d4:	mov	r0, r7
   144d8:	bl	12310 <close@plt+0x1350>
   144dc:	str	r4, [r6]
   144e0:	mov	r3, #1
   144e4:	str	r3, [r6, #4]
   144e8:	pop	{r4, r5, r6, r7, r8, pc}
   144ec:	strdeq	r8, [r2], -r4
   144f0:	muleq	r2, r4, r1
   144f4:	strdeq	r8, [r2], -ip
   144f8:	ldr	r3, [pc, #4]	; 14504 <_obstack_memory_used@@Base+0x1c08>
   144fc:	mvn	r2, #0
   14500:	b	14048 <_obstack_memory_used@@Base+0x174c>
   14504:	muleq	r2, r4, r2
   14508:	ldr	r3, [pc]	; 14510 <_obstack_memory_used@@Base+0x1c14>
   1450c:	b	14048 <_obstack_memory_used@@Base+0x174c>
   14510:	muleq	r2, r4, r2
   14514:	mov	r1, r0
   14518:	ldr	r3, [pc, #8]	; 14528 <_obstack_memory_used@@Base+0x1c2c>
   1451c:	mvn	r2, #0
   14520:	mov	r0, #0
   14524:	b	14048 <_obstack_memory_used@@Base+0x174c>
   14528:	muleq	r2, r4, r2
   1452c:	mov	r2, r1
   14530:	ldr	r3, [pc, #8]	; 14540 <_obstack_memory_used@@Base+0x1c44>
   14534:	mov	r1, r0
   14538:	mov	r0, #0
   1453c:	b	14048 <_obstack_memory_used@@Base+0x174c>
   14540:	muleq	r2, r4, r2
   14544:	push	{r4, r5, lr}
   14548:	sub	sp, sp, #52	; 0x34
   1454c:	mov	r5, r2
   14550:	mov	r4, r0
   14554:	mov	r0, sp
   14558:	bl	129e4 <_obstack_memory_used@@Base+0xe8>
   1455c:	mov	r3, sp
   14560:	mov	r1, r5
   14564:	mov	r0, r4
   14568:	mvn	r2, #0
   1456c:	bl	14048 <_obstack_memory_used@@Base+0x174c>
   14570:	add	sp, sp, #52	; 0x34
   14574:	pop	{r4, r5, pc}
   14578:	push	{r4, r5, r6, lr}
   1457c:	sub	sp, sp, #48	; 0x30
   14580:	mov	r5, r2
   14584:	mov	r6, r3
   14588:	mov	r4, r0
   1458c:	mov	r0, sp
   14590:	bl	129e4 <_obstack_memory_used@@Base+0xe8>
   14594:	mov	r3, sp
   14598:	mov	r2, r6
   1459c:	mov	r1, r5
   145a0:	mov	r0, r4
   145a4:	bl	14048 <_obstack_memory_used@@Base+0x174c>
   145a8:	add	sp, sp, #48	; 0x30
   145ac:	pop	{r4, r5, r6, pc}
   145b0:	mov	r2, r1
   145b4:	mov	r1, r0
   145b8:	mov	r0, #0
   145bc:	b	14544 <_obstack_memory_used@@Base+0x1c48>
   145c0:	mov	r3, r2
   145c4:	mov	r2, r1
   145c8:	mov	r1, r0
   145cc:	mov	r0, #0
   145d0:	b	14578 <_obstack_memory_used@@Base+0x1c7c>
   145d4:	push	{r4, r5, r6, r7, r8, lr}
   145d8:	mov	r7, r0
   145dc:	ldr	lr, [pc, #100]	; 14648 <_obstack_memory_used@@Base+0x1d4c>
   145e0:	mov	r8, r1
   145e4:	mov	r4, r2
   145e8:	ldm	lr!, {r0, r1, r2, r3}
   145ec:	sub	sp, sp, #48	; 0x30
   145f0:	mov	ip, sp
   145f4:	lsr	r5, r4, #5
   145f8:	stmia	ip!, {r0, r1, r2, r3}
   145fc:	add	r6, sp, #8
   14600:	ldm	lr!, {r0, r1, r2, r3}
   14604:	and	r4, r4, #31
   14608:	stmia	ip!, {r0, r1, r2, r3}
   1460c:	ldm	lr, {r0, r1, r2, r3}
   14610:	stm	ip, {r0, r1, r2, r3}
   14614:	mov	r2, r8
   14618:	ldr	lr, [r6, r5, lsl #2]
   1461c:	mov	r1, r7
   14620:	mov	r3, sp
   14624:	lsr	ip, lr, r4
   14628:	eor	ip, ip, #1
   1462c:	and	ip, ip, #1
   14630:	mov	r0, #0
   14634:	eor	r4, lr, ip, lsl r4
   14638:	str	r4, [r6, r5, lsl #2]
   1463c:	bl	14048 <_obstack_memory_used@@Base+0x174c>
   14640:	add	sp, sp, #48	; 0x30
   14644:	pop	{r4, r5, r6, r7, r8, pc}
   14648:	muleq	r2, r4, r2
   1464c:	mov	r2, r1
   14650:	mvn	r1, #0
   14654:	b	145d4 <_obstack_memory_used@@Base+0x1cd8>
   14658:	mov	r2, #58	; 0x3a
   1465c:	mvn	r1, #0
   14660:	b	145d4 <_obstack_memory_used@@Base+0x1cd8>
   14664:	mov	r2, #58	; 0x3a
   14668:	b	145d4 <_obstack_memory_used@@Base+0x1cd8>
   1466c:	push	{r4, r5, r6, r7, lr}
   14670:	sub	sp, sp, #100	; 0x64
   14674:	mov	r6, r0
   14678:	mov	r0, sp
   1467c:	mov	r7, r2
   14680:	bl	129e4 <_obstack_memory_used@@Base+0xe8>
   14684:	mov	ip, sp
   14688:	add	lr, sp, #48	; 0x30
   1468c:	ldm	ip!, {r0, r1, r2, r3}
   14690:	stmia	lr!, {r0, r1, r2, r3}
   14694:	ldm	ip!, {r0, r1, r2, r3}
   14698:	ldr	r5, [sp, #60]	; 0x3c
   1469c:	stmia	lr!, {r0, r1, r2, r3}
   146a0:	mvn	r4, r5
   146a4:	ldm	ip, {r0, r1, r2, r3}
   146a8:	and	ip, r4, #67108864	; 0x4000000
   146ac:	eor	ip, ip, r5
   146b0:	str	ip, [sp, #60]	; 0x3c
   146b4:	stm	lr, {r0, r1, r2, r3}
   146b8:	mov	r1, r7
   146bc:	mov	r0, r6
   146c0:	add	r3, sp, #48	; 0x30
   146c4:	mvn	r2, #0
   146c8:	bl	14048 <_obstack_memory_used@@Base+0x174c>
   146cc:	add	sp, sp, #100	; 0x64
   146d0:	pop	{r4, r5, r6, r7, pc}
   146d4:	push	{r4, r5, r6, r7, r8, lr}
   146d8:	mov	r5, r1
   146dc:	ldr	lr, [pc, #100]	; 14748 <_obstack_memory_used@@Base+0x1e4c>
   146e0:	mov	r4, r2
   146e4:	mov	r7, r0
   146e8:	mov	r8, r3
   146ec:	ldm	lr!, {r0, r1, r2, r3}
   146f0:	sub	sp, sp, #48	; 0x30
   146f4:	mov	ip, sp
   146f8:	mov	r6, #10
   146fc:	stmia	ip!, {r0, r1, r2, r3}
   14700:	cmp	r4, #0
   14704:	cmpne	r5, #0
   14708:	ldm	lr!, {r0, r1, r2, r3}
   1470c:	str	r6, [sp]
   14710:	stmia	ip!, {r0, r1, r2, r3}
   14714:	ldm	lr, {r0, r1, r2, r3}
   14718:	stm	ip, {r0, r1, r2, r3}
   1471c:	beq	14744 <_obstack_memory_used@@Base+0x1e48>
   14720:	mov	r3, sp
   14724:	mov	r1, r8
   14728:	mov	r0, r7
   1472c:	ldr	r2, [sp, #72]	; 0x48
   14730:	str	r5, [sp, #40]	; 0x28
   14734:	str	r4, [sp, #44]	; 0x2c
   14738:	bl	14048 <_obstack_memory_used@@Base+0x174c>
   1473c:	add	sp, sp, #48	; 0x30
   14740:	pop	{r4, r5, r6, r7, r8, pc}
   14744:	bl	10fb4 <abort@plt>
   14748:	muleq	r2, r4, r2
   1474c:	push	{lr}		; (str lr, [sp, #-4]!)
   14750:	sub	sp, sp, #12
   14754:	mvn	ip, #0
   14758:	str	ip, [sp]
   1475c:	bl	146d4 <_obstack_memory_used@@Base+0x1dd8>
   14760:	add	sp, sp, #12
   14764:	pop	{pc}		; (ldr pc, [sp], #4)
   14768:	push	{lr}		; (str lr, [sp, #-4]!)
   1476c:	sub	sp, sp, #12
   14770:	mvn	ip, #0
   14774:	mov	r3, r2
   14778:	str	ip, [sp]
   1477c:	mov	r2, r1
   14780:	mov	r1, r0
   14784:	mov	r0, #0
   14788:	bl	146d4 <_obstack_memory_used@@Base+0x1dd8>
   1478c:	add	sp, sp, #12
   14790:	pop	{pc}		; (ldr pc, [sp], #4)
   14794:	push	{lr}		; (str lr, [sp, #-4]!)
   14798:	sub	sp, sp, #12
   1479c:	str	r3, [sp]
   147a0:	mov	r3, r2
   147a4:	mov	r2, r1
   147a8:	mov	r1, r0
   147ac:	mov	r0, #0
   147b0:	bl	146d4 <_obstack_memory_used@@Base+0x1dd8>
   147b4:	add	sp, sp, #12
   147b8:	pop	{pc}		; (ldr pc, [sp], #4)
   147bc:	ldr	r3, [pc]	; 147c4 <_obstack_memory_used@@Base+0x1ec8>
   147c0:	b	14048 <_obstack_memory_used@@Base+0x174c>
   147c4:	andeq	r8, r2, r4, lsl #2
   147c8:	mov	r2, r1
   147cc:	ldr	r3, [pc, #8]	; 147dc <_obstack_memory_used@@Base+0x1ee0>
   147d0:	mov	r1, r0
   147d4:	mov	r0, #0
   147d8:	b	14048 <_obstack_memory_used@@Base+0x174c>
   147dc:	andeq	r8, r2, r4, lsl #2
   147e0:	ldr	r3, [pc, #4]	; 147ec <_obstack_memory_used@@Base+0x1ef0>
   147e4:	mvn	r2, #0
   147e8:	b	14048 <_obstack_memory_used@@Base+0x174c>
   147ec:	andeq	r8, r2, r4, lsl #2
   147f0:	mov	r1, r0
   147f4:	ldr	r3, [pc, #8]	; 14804 <_obstack_memory_used@@Base+0x1f08>
   147f8:	mvn	r2, #0
   147fc:	mov	r0, #0
   14800:	b	14048 <_obstack_memory_used@@Base+0x174c>
   14804:	andeq	r8, r2, r4, lsl #2
   14808:	push	{r4, r5, r6, lr}
   1480c:	sub	sp, sp, #32
   14810:	cmp	r1, #0
   14814:	mov	r4, r0
   14818:	ldr	r5, [sp, #48]	; 0x30
   1481c:	ldr	r6, [sp, #52]	; 0x34
   14820:	beq	14b38 <_obstack_memory_used@@Base+0x223c>
   14824:	stm	sp, {r2, r3}
   14828:	mov	r3, r1
   1482c:	ldr	r2, [pc, #808]	; 14b5c <_obstack_memory_used@@Base+0x2260>
   14830:	mov	r1, #1
   14834:	bl	10f54 <__fprintf_chk@plt>
   14838:	mov	r2, #5
   1483c:	ldr	r1, [pc, #796]	; 14b60 <_obstack_memory_used@@Base+0x2264>
   14840:	mov	r0, #0
   14844:	bl	10df8 <dcgettext@plt>
   14848:	ldr	r3, [pc, #788]	; 14b64 <_obstack_memory_used@@Base+0x2268>
   1484c:	ldr	r2, [pc, #788]	; 14b68 <_obstack_memory_used@@Base+0x226c>
   14850:	str	r3, [sp]
   14854:	mov	r1, #1
   14858:	mov	r3, r0
   1485c:	mov	r0, r4
   14860:	bl	10f54 <__fprintf_chk@plt>
   14864:	mov	r1, r4
   14868:	mov	r0, #10
   1486c:	bl	10dec <fputc_unlocked@plt>
   14870:	mov	r2, #5
   14874:	ldr	r1, [pc, #752]	; 14b6c <_obstack_memory_used@@Base+0x2270>
   14878:	mov	r0, #0
   1487c:	bl	10df8 <dcgettext@plt>
   14880:	mov	r1, #1
   14884:	ldr	r3, [pc, #740]	; 14b70 <_obstack_memory_used@@Base+0x2274>
   14888:	mov	r2, r0
   1488c:	mov	r0, r4
   14890:	bl	10f54 <__fprintf_chk@plt>
   14894:	mov	r1, r4
   14898:	mov	r0, #10
   1489c:	bl	10dec <fputc_unlocked@plt>
   148a0:	cmp	r6, #9
   148a4:	ldrls	pc, [pc, r6, lsl #2]
   148a8:	b	14b50 <_obstack_memory_used@@Base+0x2254>
   148ac:	andeq	r4, r1, r0, lsr r9
   148b0:	andeq	r4, r1, r8, lsr r9
   148b4:	andeq	r4, r1, r4, ror #18
   148b8:	muleq	r1, r8, r9
   148bc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148c0:	andeq	r4, r1, r0, lsl sl
   148c4:	andeq	r4, r1, ip, asr #20
   148c8:	muleq	r1, r0, sl
   148cc:	andeq	r4, r1, r0, ror #21
   148d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148d4:	ldr	r1, [pc, #664]	; 14b74 <_obstack_memory_used@@Base+0x2278>
   148d8:	mov	r2, #5
   148dc:	mov	r0, #0
   148e0:	bl	10df8 <dcgettext@plt>
   148e4:	ldr	ip, [r5, #32]
   148e8:	ldr	r1, [r5, #28]
   148ec:	ldr	r2, [r5, #24]
   148f0:	ldr	r3, [r5]
   148f4:	ldr	r6, [r5, #20]
   148f8:	str	ip, [sp, #28]
   148fc:	ldr	lr, [r5, #16]
   14900:	str	r1, [sp, #24]
   14904:	ldr	ip, [r5, #12]
   14908:	str	r2, [sp, #20]
   1490c:	ldr	r1, [r5, #8]
   14910:	ldr	r2, [r5, #4]
   14914:	str	r6, [sp, #16]
   14918:	stmib	sp, {r1, ip, lr}
   1491c:	mov	r1, #1
   14920:	str	r2, [sp]
   14924:	mov	r2, r0
   14928:	mov	r0, r4
   1492c:	bl	10f54 <__fprintf_chk@plt>
   14930:	add	sp, sp, #32
   14934:	pop	{r4, r5, r6, pc}
   14938:	mov	r2, #5
   1493c:	ldr	r1, [pc, #564]	; 14b78 <_obstack_memory_used@@Base+0x227c>
   14940:	mov	r0, #0
   14944:	bl	10df8 <dcgettext@plt>
   14948:	ldr	r3, [r5]
   1494c:	mov	r1, #1
   14950:	mov	r2, r0
   14954:	mov	r0, r4
   14958:	add	sp, sp, #32
   1495c:	pop	{r4, r5, r6, lr}
   14960:	b	10f54 <__fprintf_chk@plt>
   14964:	mov	r2, #5
   14968:	ldr	r1, [pc, #524]	; 14b7c <_obstack_memory_used@@Base+0x2280>
   1496c:	mov	r0, #0
   14970:	bl	10df8 <dcgettext@plt>
   14974:	ldr	r2, [r5, #4]
   14978:	ldr	r3, [r5]
   1497c:	mov	r1, #1
   14980:	str	r2, [sp, #48]	; 0x30
   14984:	mov	r2, r0
   14988:	mov	r0, r4
   1498c:	add	sp, sp, #32
   14990:	pop	{r4, r5, r6, lr}
   14994:	b	10f54 <__fprintf_chk@plt>
   14998:	mov	r2, #5
   1499c:	ldr	r1, [pc, #476]	; 14b80 <_obstack_memory_used@@Base+0x2284>
   149a0:	mov	r0, #0
   149a4:	bl	10df8 <dcgettext@plt>
   149a8:	ldr	r1, [r5, #8]
   149ac:	ldr	r2, [r5, #4]
   149b0:	ldr	r3, [r5]
   149b4:	str	r1, [sp, #52]	; 0x34
   149b8:	str	r2, [sp, #48]	; 0x30
   149bc:	mov	r1, #1
   149c0:	mov	r2, r0
   149c4:	mov	r0, r4
   149c8:	add	sp, sp, #32
   149cc:	pop	{r4, r5, r6, lr}
   149d0:	b	10f54 <__fprintf_chk@plt>
   149d4:	mov	r2, #5
   149d8:	ldr	r1, [pc, #420]	; 14b84 <_obstack_memory_used@@Base+0x2288>
   149dc:	mov	r0, #0
   149e0:	bl	10df8 <dcgettext@plt>
   149e4:	ldr	r1, [r5, #8]
   149e8:	ldr	ip, [r5, #12]
   149ec:	ldr	r2, [r5, #4]
   149f0:	ldr	r3, [r5]
   149f4:	stmib	sp, {r1, ip}
   149f8:	str	r2, [sp]
   149fc:	mov	r1, #1
   14a00:	mov	r2, r0
   14a04:	mov	r0, r4
   14a08:	bl	10f54 <__fprintf_chk@plt>
   14a0c:	b	14930 <_obstack_memory_used@@Base+0x2034>
   14a10:	mov	r2, #5
   14a14:	ldr	r1, [pc, #364]	; 14b88 <_obstack_memory_used@@Base+0x228c>
   14a18:	mov	r0, #0
   14a1c:	bl	10df8 <dcgettext@plt>
   14a20:	add	r1, r5, #8
   14a24:	ldr	r2, [r5, #4]
   14a28:	ldm	r1, {r1, ip, lr}
   14a2c:	ldr	r3, [r5]
   14a30:	str	r2, [sp]
   14a34:	stmib	sp, {r1, ip, lr}
   14a38:	mov	r1, #1
   14a3c:	mov	r2, r0
   14a40:	mov	r0, r4
   14a44:	bl	10f54 <__fprintf_chk@plt>
   14a48:	b	14930 <_obstack_memory_used@@Base+0x2034>
   14a4c:	mov	r2, #5
   14a50:	ldr	r1, [pc, #308]	; 14b8c <_obstack_memory_used@@Base+0x2290>
   14a54:	mov	r0, #0
   14a58:	bl	10df8 <dcgettext@plt>
   14a5c:	add	r1, r5, #8
   14a60:	ldr	r2, [r5, #4]
   14a64:	ldm	r1, {r1, ip, lr}
   14a68:	ldr	r6, [r5, #20]
   14a6c:	ldr	r3, [r5]
   14a70:	stmib	sp, {r1, ip, lr}
   14a74:	mov	r1, #1
   14a78:	str	r2, [sp]
   14a7c:	str	r6, [sp, #16]
   14a80:	mov	r2, r0
   14a84:	mov	r0, r4
   14a88:	bl	10f54 <__fprintf_chk@plt>
   14a8c:	b	14930 <_obstack_memory_used@@Base+0x2034>
   14a90:	mov	r2, #5
   14a94:	ldr	r1, [pc, #244]	; 14b90 <_obstack_memory_used@@Base+0x2294>
   14a98:	mov	r0, #0
   14a9c:	bl	10df8 <dcgettext@plt>
   14aa0:	ldr	r2, [r5, #24]
   14aa4:	ldr	r3, [r5]
   14aa8:	ldr	r6, [r5, #20]
   14aac:	ldr	lr, [r5, #16]
   14ab0:	ldr	ip, [r5, #12]
   14ab4:	str	r2, [sp, #20]
   14ab8:	ldr	r1, [r5, #8]
   14abc:	ldr	r2, [r5, #4]
   14ac0:	str	r6, [sp, #16]
   14ac4:	stmib	sp, {r1, ip, lr}
   14ac8:	mov	r1, #1
   14acc:	str	r2, [sp]
   14ad0:	mov	r2, r0
   14ad4:	mov	r0, r4
   14ad8:	bl	10f54 <__fprintf_chk@plt>
   14adc:	b	14930 <_obstack_memory_used@@Base+0x2034>
   14ae0:	mov	r2, #5
   14ae4:	ldr	r1, [pc, #168]	; 14b94 <_obstack_memory_used@@Base+0x2298>
   14ae8:	mov	r0, #0
   14aec:	bl	10df8 <dcgettext@plt>
   14af0:	ldr	r1, [r5, #28]
   14af4:	ldr	r2, [r5, #24]
   14af8:	ldr	r3, [r5]
   14afc:	ldr	r6, [r5, #20]
   14b00:	ldr	lr, [r5, #16]
   14b04:	str	r1, [sp, #24]
   14b08:	ldr	ip, [r5, #12]
   14b0c:	str	r2, [sp, #20]
   14b10:	ldr	r1, [r5, #8]
   14b14:	ldr	r2, [r5, #4]
   14b18:	str	r6, [sp, #16]
   14b1c:	stmib	sp, {r1, ip, lr}
   14b20:	mov	r1, #1
   14b24:	str	r2, [sp]
   14b28:	mov	r2, r0
   14b2c:	mov	r0, r4
   14b30:	bl	10f54 <__fprintf_chk@plt>
   14b34:	b	14930 <_obstack_memory_used@@Base+0x2034>
   14b38:	str	r3, [sp]
   14b3c:	mov	r1, #1
   14b40:	mov	r3, r2
   14b44:	ldr	r2, [pc, #76]	; 14b98 <_obstack_memory_used@@Base+0x229c>
   14b48:	bl	10f54 <__fprintf_chk@plt>
   14b4c:	b	14838 <_obstack_memory_used@@Base+0x1f3c>
   14b50:	mov	r2, #5
   14b54:	ldr	r1, [pc, #64]	; 14b9c <_obstack_memory_used@@Base+0x22a0>
   14b58:	b	148dc <_obstack_memory_used@@Base+0x1fe0>
   14b5c:	andeq	r7, r1, r4, lsr #13
   14b60:			; <UNDEFINED> instruction: 0x000176b8
   14b64:	andeq	r0, r0, r6, ror #15
   14b68:	muleq	r1, r0, r9
   14b6c:			; <UNDEFINED> instruction: 0x000176bc
   14b70:	andeq	r7, r1, r8, ror #14
   14b74:	muleq	r1, r8, r8
   14b78:	andeq	r7, r1, ip, lsl #15
   14b7c:	muleq	r1, ip, r7
   14b80:			; <UNDEFINED> instruction: 0x000177b4
   14b84:	ldrdeq	r7, [r1], -r0
   14b88:	strdeq	r7, [r1], -r0
   14b8c:	andeq	r7, r1, r4, lsl r8
   14b90:	andeq	r7, r1, ip, lsr r8
   14b94:	andeq	r7, r1, r8, ror #16
   14b98:			; <UNDEFINED> instruction: 0x000176b0
   14b9c:	andeq	r7, r1, ip, asr #17
   14ba0:	push	{r4, r5, lr}
   14ba4:	sub	sp, sp, #12
   14ba8:	ldr	r5, [sp, #24]
   14bac:	ldr	ip, [r5]
   14bb0:	cmp	ip, #0
   14bb4:	beq	14bd0 <_obstack_memory_used@@Base+0x22d4>
   14bb8:	mov	lr, r5
   14bbc:	mov	ip, #0
   14bc0:	ldr	r4, [lr, #4]!
   14bc4:	add	ip, ip, #1
   14bc8:	cmp	r4, #0
   14bcc:	bne	14bc0 <_obstack_memory_used@@Base+0x22c4>
   14bd0:	stm	sp, {r5, ip}
   14bd4:	bl	14808 <_obstack_memory_used@@Base+0x1f0c>
   14bd8:	add	sp, sp, #12
   14bdc:	pop	{r4, r5, pc}
   14be0:	push	{r4, r5, lr}
   14be4:	sub	sp, sp, #52	; 0x34
   14be8:	add	r5, sp, #4
   14bec:	ldr	r4, [sp, #64]	; 0x40
   14bf0:	mov	ip, #0
   14bf4:	sub	r4, r4, #4
   14bf8:	ldr	lr, [r4, #4]!
   14bfc:	cmp	lr, #0
   14c00:	str	lr, [r5, #4]!
   14c04:	beq	14c14 <_obstack_memory_used@@Base+0x2318>
   14c08:	add	ip, ip, #1
   14c0c:	cmp	ip, #10
   14c10:	bne	14bf8 <_obstack_memory_used@@Base+0x22fc>
   14c14:	add	lr, sp, #8
   14c18:	str	ip, [sp, #4]
   14c1c:	str	lr, [sp]
   14c20:	bl	14808 <_obstack_memory_used@@Base+0x1f0c>
   14c24:	add	sp, sp, #52	; 0x34
   14c28:	pop	{r4, r5, pc}
   14c2c:	push	{r3}		; (str r3, [sp, #-4]!)
   14c30:	push	{r4, lr}
   14c34:	sub	sp, sp, #60	; 0x3c
   14c38:	add	lr, sp, #56	; 0x38
   14c3c:	add	r3, sp, #72	; 0x48
   14c40:	str	r3, [lr, #-44]!	; 0xffffffd4
   14c44:	add	r4, sp, #68	; 0x44
   14c48:	mov	r3, #0
   14c4c:	ldr	ip, [r4, #4]!
   14c50:	cmp	ip, #0
   14c54:	str	ip, [lr, #4]!
   14c58:	beq	14c68 <_obstack_memory_used@@Base+0x236c>
   14c5c:	add	r3, r3, #1
   14c60:	cmp	r3, #10
   14c64:	bne	14c4c <_obstack_memory_used@@Base+0x2350>
   14c68:	add	ip, sp, #16
   14c6c:	str	r3, [sp, #4]
   14c70:	str	ip, [sp]
   14c74:	ldr	r3, [sp, #68]	; 0x44
   14c78:	bl	14808 <_obstack_memory_used@@Base+0x1f0c>
   14c7c:	add	sp, sp, #60	; 0x3c
   14c80:	pop	{r4, lr}
   14c84:	add	sp, sp, #4
   14c88:	bx	lr
   14c8c:	ldr	r3, [pc, #116]	; 14d08 <_obstack_memory_used@@Base+0x240c>
   14c90:	push	{r4, lr}
   14c94:	mov	r0, #10
   14c98:	ldr	r1, [r3]
   14c9c:	bl	10dec <fputc_unlocked@plt>
   14ca0:	mov	r2, #5
   14ca4:	ldr	r1, [pc, #96]	; 14d0c <_obstack_memory_used@@Base+0x2410>
   14ca8:	mov	r0, #0
   14cac:	bl	10df8 <dcgettext@plt>
   14cb0:	ldr	r2, [pc, #88]	; 14d10 <_obstack_memory_used@@Base+0x2414>
   14cb4:	mov	r1, r0
   14cb8:	mov	r0, #1
   14cbc:	bl	10f3c <__printf_chk@plt>
   14cc0:	mov	r2, #5
   14cc4:	ldr	r1, [pc, #72]	; 14d14 <_obstack_memory_used@@Base+0x2418>
   14cc8:	mov	r0, #0
   14ccc:	bl	10df8 <dcgettext@plt>
   14cd0:	ldr	r3, [pc, #64]	; 14d18 <_obstack_memory_used@@Base+0x241c>
   14cd4:	ldr	r2, [pc, #64]	; 14d1c <_obstack_memory_used@@Base+0x2420>
   14cd8:	mov	r1, r0
   14cdc:	mov	r0, #1
   14ce0:	bl	10f3c <__printf_chk@plt>
   14ce4:	mov	r2, #5
   14ce8:	ldr	r1, [pc, #48]	; 14d20 <_obstack_memory_used@@Base+0x2424>
   14cec:	mov	r0, #0
   14cf0:	bl	10df8 <dcgettext@plt>
   14cf4:	ldr	r2, [pc, #40]	; 14d24 <_obstack_memory_used@@Base+0x2428>
   14cf8:	pop	{r4, lr}
   14cfc:	mov	r1, r0
   14d00:	mov	r0, #1
   14d04:	b	10f3c <__printf_chk@plt>
   14d08:	andeq	r8, r2, r4, asr r1
   14d0c:	andeq	r7, r1, r8, lsl #18
   14d10:	andeq	r7, r1, ip, lsl r9
   14d14:	andeq	r7, r1, r4, lsr r9
   14d18:	strheq	r7, [r1], -ip
   14d1c:	andeq	r7, r1, r4, ror #1
   14d20:	andeq	r7, r1, r8, asr #18
   14d24:	andeq	r7, r1, r0, ror r9
   14d28:	push	{r4, lr}
   14d2c:	bl	152f8 <_obstack_memory_used@@Base+0x29fc>
   14d30:	cmp	r0, #0
   14d34:	popne	{r4, pc}
   14d38:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   14d3c:	push	{r4, lr}
   14d40:	bl	152f8 <_obstack_memory_used@@Base+0x29fc>
   14d44:	cmp	r0, #0
   14d48:	popne	{r4, pc}
   14d4c:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   14d50:	push	{r4, lr}
   14d54:	bl	152f8 <_obstack_memory_used@@Base+0x29fc>
   14d58:	cmp	r0, #0
   14d5c:	popne	{r4, pc}
   14d60:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   14d64:	push	{r4, r5, r6, lr}
   14d68:	mov	r5, r0
   14d6c:	mov	r4, r1
   14d70:	bl	15324 <_obstack_memory_used@@Base+0x2a28>
   14d74:	cmp	r0, #0
   14d78:	popne	{r4, r5, r6, pc}
   14d7c:	adds	r4, r4, #0
   14d80:	movne	r4, #1
   14d84:	cmp	r5, #0
   14d88:	orreq	r4, r4, #1
   14d8c:	cmp	r4, #0
   14d90:	popeq	{r4, r5, r6, pc}
   14d94:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   14d98:	push	{r4, lr}
   14d9c:	cmp	r1, #0
   14da0:	orreq	r1, r1, #1
   14da4:	bl	15324 <_obstack_memory_used@@Base+0x2a28>
   14da8:	cmp	r0, #0
   14dac:	popne	{r4, pc}
   14db0:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   14db4:	push	{r4, r5, r6, lr}
   14db8:	mov	r6, r0
   14dbc:	mov	r5, r1
   14dc0:	mov	r4, r2
   14dc4:	bl	15484 <_obstack_memory_used@@Base+0x2b88>
   14dc8:	cmp	r0, #0
   14dcc:	popne	{r4, r5, r6, pc}
   14dd0:	cmp	r6, #0
   14dd4:	beq	14de4 <_obstack_memory_used@@Base+0x24e8>
   14dd8:	cmp	r5, #0
   14ddc:	cmpne	r4, #0
   14de0:	popeq	{r4, r5, r6, pc}
   14de4:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   14de8:	b	14db4 <_obstack_memory_used@@Base+0x24b8>
   14dec:	cmp	r2, #0
   14df0:	cmpne	r1, #0
   14df4:	moveq	r2, #1
   14df8:	moveq	r1, r2
   14dfc:	push	{r4, lr}
   14e00:	bl	15484 <_obstack_memory_used@@Base+0x2b88>
   14e04:	cmp	r0, #0
   14e08:	popne	{r4, pc}
   14e0c:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   14e10:	mov	r2, r1
   14e14:	mov	r1, r0
   14e18:	mov	r0, #0
   14e1c:	b	14db4 <_obstack_memory_used@@Base+0x24b8>
   14e20:	mov	r2, r1
   14e24:	mov	r1, r0
   14e28:	mov	r0, #0
   14e2c:	b	14dec <_obstack_memory_used@@Base+0x24f0>
   14e30:	push	{r4, r5, r6, lr}
   14e34:	subs	r6, r0, #0
   14e38:	sub	sp, sp, #8
   14e3c:	mov	r5, r1
   14e40:	ldr	r4, [r1]
   14e44:	beq	14e80 <_obstack_memory_used@@Base+0x2584>
   14e48:	lsr	r1, r4, #1
   14e4c:	add	r3, r1, #1
   14e50:	mvn	r3, r3
   14e54:	cmp	r4, r3
   14e58:	bhi	14e7c <_obstack_memory_used@@Base+0x2580>
   14e5c:	add	r4, r4, #1
   14e60:	add	r4, r4, r1
   14e64:	mov	r0, r6
   14e68:	mov	r1, r4
   14e6c:	bl	14db4 <_obstack_memory_used@@Base+0x24b8>
   14e70:	str	r4, [r5]
   14e74:	add	sp, sp, #8
   14e78:	pop	{r4, r5, r6, pc}
   14e7c:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   14e80:	cmp	r4, #0
   14e84:	bne	14e64 <_obstack_memory_used@@Base+0x2568>
   14e88:	mov	r1, r2
   14e8c:	mov	r0, #64	; 0x40
   14e90:	str	r2, [sp, #4]
   14e94:	bl	155c4 <_obstack_memory_used@@Base+0x2cc8>
   14e98:	ldr	r2, [sp, #4]
   14e9c:	cmp	r0, #0
   14ea0:	movne	r4, r0
   14ea4:	addeq	r4, r0, #1
   14ea8:	b	14e64 <_obstack_memory_used@@Base+0x2568>
   14eac:	mov	r2, #1
   14eb0:	b	14e30 <_obstack_memory_used@@Base+0x2534>
   14eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb8:	sub	sp, sp, #12
   14ebc:	ldr	r6, [r1]
   14ec0:	mov	sl, r1
   14ec4:	mov	r9, r0
   14ec8:	asrs	r4, r6, #1
   14ecc:	mov	r5, r2
   14ed0:	mov	fp, r3
   14ed4:	ldr	r7, [sp, #48]	; 0x30
   14ed8:	bmi	15044 <_obstack_memory_used@@Base+0x2748>
   14edc:	mvn	r3, #-2147483648	; 0x80000000
   14ee0:	sub	r3, r3, r4
   14ee4:	cmp	r6, r3
   14ee8:	movle	r3, #0
   14eec:	movgt	r3, #1
   14ef0:	mvn	r8, fp
   14ef4:	cmp	r3, #0
   14ef8:	addeq	r4, r4, r6
   14efc:	mvnne	r4, #-2147483648	; 0x80000000
   14f00:	lsr	r8, r8, #31
   14f04:	cmp	fp, r4
   14f08:	movge	r3, #0
   14f0c:	andlt	r3, r8, #1
   14f10:	cmp	r3, #0
   14f14:	beq	14ffc <_obstack_memory_used@@Base+0x2700>
   14f18:	cmp	r7, #0
   14f1c:	blt	150cc <_obstack_memory_used@@Base+0x27d0>
   14f20:	bne	150c4 <_obstack_memory_used@@Base+0x27c8>
   14f24:	mov	r2, #64	; 0x40
   14f28:	mov	r1, r7
   14f2c:	mov	r0, r2
   14f30:	str	r2, [sp, #4]
   14f34:	bl	157d0 <_obstack_memory_used@@Base+0x2ed4>
   14f38:	ldr	r2, [sp, #4]
   14f3c:	mov	r1, r7
   14f40:	mov	r4, r0
   14f44:	mov	r0, r2
   14f48:	bl	159f0 <_obstack_memory_used@@Base+0x30f4>
   14f4c:	ldr	r2, [sp, #4]
   14f50:	sub	r1, r2, r1
   14f54:	cmp	r9, #0
   14f58:	sub	r3, r4, r6
   14f5c:	streq	r9, [sl]
   14f60:	cmp	r3, r5
   14f64:	bge	14fe8 <_obstack_memory_used@@Base+0x26ec>
   14f68:	cmp	r5, #0
   14f6c:	blt	15058 <_obstack_memory_used@@Base+0x275c>
   14f70:	cmp	r6, #0
   14f74:	blt	14f94 <_obstack_memory_used@@Base+0x2698>
   14f78:	mvn	r3, #-2147483648	; 0x80000000
   14f7c:	sub	r3, r3, r5
   14f80:	cmp	r6, r3
   14f84:	movle	r3, #0
   14f88:	movgt	r3, #1
   14f8c:	cmp	r3, #0
   14f90:	bne	15154 <_obstack_memory_used@@Base+0x2858>
   14f94:	add	r5, r6, r5
   14f98:	cmp	fp, r5
   14f9c:	movge	r8, #0
   14fa0:	andlt	r8, r8, #1
   14fa4:	cmp	r8, #0
   14fa8:	mov	r4, r5
   14fac:	bne	15154 <_obstack_memory_used@@Base+0x2858>
   14fb0:	cmp	r7, #0
   14fb4:	blt	1506c <_obstack_memory_used@@Base+0x2770>
   14fb8:	beq	14fe4 <_obstack_memory_used@@Base+0x26e8>
   14fbc:	cmp	r5, #0
   14fc0:	blt	15114 <_obstack_memory_used@@Base+0x2818>
   14fc4:	mov	r1, r7
   14fc8:	mvn	r0, #-2147483648	; 0x80000000
   14fcc:	bl	157d0 <_obstack_memory_used@@Base+0x2ed4>
   14fd0:	cmp	r5, r0
   14fd4:	movle	r0, #0
   14fd8:	movgt	r0, #1
   14fdc:	cmp	r0, #0
   14fe0:	bne	15154 <_obstack_memory_used@@Base+0x2858>
   14fe4:	mul	r1, r5, r7
   14fe8:	mov	r0, r9
   14fec:	bl	14d64 <_obstack_memory_used@@Base+0x2468>
   14ff0:	str	r4, [sl]
   14ff4:	add	sp, sp, #12
   14ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ffc:	cmp	r7, #0
   15000:	blt	15098 <_obstack_memory_used@@Base+0x279c>
   15004:	beq	14f24 <_obstack_memory_used@@Base+0x2628>
   15008:	cmp	r4, #0
   1500c:	blt	150d4 <_obstack_memory_used@@Base+0x27d8>
   15010:	mov	r1, r7
   15014:	mvn	r0, #-2147483648	; 0x80000000
   15018:	bl	157d0 <_obstack_memory_used@@Base+0x2ed4>
   1501c:	cmp	r0, r4
   15020:	movge	r0, #0
   15024:	movlt	r0, #1
   15028:	cmp	r0, #0
   1502c:	mvnne	r2, #-2147483648	; 0x80000000
   15030:	bne	14f28 <_obstack_memory_used@@Base+0x262c>
   15034:	mul	r1, r7, r4
   15038:	cmp	r1, #63	; 0x3f
   1503c:	bgt	14f54 <_obstack_memory_used@@Base+0x2658>
   15040:	b	14f24 <_obstack_memory_used@@Base+0x2628>
   15044:	rsb	r3, r4, #-2147483648	; 0x80000000
   15048:	cmp	r6, r3
   1504c:	movge	r3, #0
   15050:	movlt	r3, #1
   15054:	b	14ef0 <_obstack_memory_used@@Base+0x25f4>
   15058:	rsb	r3, r5, #-2147483648	; 0x80000000
   1505c:	cmp	r6, r3
   15060:	movge	r3, #0
   15064:	movlt	r3, #1
   15068:	b	14f8c <_obstack_memory_used@@Base+0x2690>
   1506c:	cmp	r5, #0
   15070:	blt	150f8 <_obstack_memory_used@@Base+0x27fc>
   15074:	cmn	r7, #1
   15078:	beq	14fe4 <_obstack_memory_used@@Base+0x26e8>
   1507c:	mov	r1, r7
   15080:	mov	r0, #-2147483648	; 0x80000000
   15084:	bl	157d0 <_obstack_memory_used@@Base+0x2ed4>
   15088:	cmp	r5, r0
   1508c:	movle	r0, #0
   15090:	movgt	r0, #1
   15094:	b	14fdc <_obstack_memory_used@@Base+0x26e0>
   15098:	cmp	r4, #0
   1509c:	blt	15138 <_obstack_memory_used@@Base+0x283c>
   150a0:	cmn	r7, #1
   150a4:	beq	15034 <_obstack_memory_used@@Base+0x2738>
   150a8:	mov	r1, r7
   150ac:	mov	r0, #-2147483648	; 0x80000000
   150b0:	bl	157d0 <_obstack_memory_used@@Base+0x2ed4>
   150b4:	cmp	r0, r4
   150b8:	movge	r0, #0
   150bc:	movlt	r0, #1
   150c0:	b	15028 <_obstack_memory_used@@Base+0x272c>
   150c4:	mov	r4, fp
   150c8:	b	15010 <_obstack_memory_used@@Base+0x2714>
   150cc:	mov	r4, fp
   150d0:	b	150a0 <_obstack_memory_used@@Base+0x27a4>
   150d4:	cmn	r4, #1
   150d8:	beq	15034 <_obstack_memory_used@@Base+0x2738>
   150dc:	mov	r1, r4
   150e0:	mov	r0, #-2147483648	; 0x80000000
   150e4:	bl	157d0 <_obstack_memory_used@@Base+0x2ed4>
   150e8:	cmp	r7, r0
   150ec:	movle	r0, #0
   150f0:	movgt	r0, #1
   150f4:	b	15028 <_obstack_memory_used@@Base+0x272c>
   150f8:	mov	r1, r7
   150fc:	mvn	r0, #-2147483648	; 0x80000000
   15100:	bl	157d0 <_obstack_memory_used@@Base+0x2ed4>
   15104:	cmp	r5, r0
   15108:	movge	r0, #0
   1510c:	movlt	r0, #1
   15110:	b	14fdc <_obstack_memory_used@@Base+0x26e0>
   15114:	cmn	r5, #1
   15118:	beq	14fe4 <_obstack_memory_used@@Base+0x26e8>
   1511c:	mov	r1, r5
   15120:	mov	r0, #-2147483648	; 0x80000000
   15124:	bl	157d0 <_obstack_memory_used@@Base+0x2ed4>
   15128:	cmp	r7, r0
   1512c:	movle	r0, #0
   15130:	movgt	r0, #1
   15134:	b	14fdc <_obstack_memory_used@@Base+0x26e0>
   15138:	mov	r1, r7
   1513c:	mvn	r0, #-2147483648	; 0x80000000
   15140:	bl	157d0 <_obstack_memory_used@@Base+0x2ed4>
   15144:	cmp	r0, r4
   15148:	movle	r0, #0
   1514c:	movgt	r0, #1
   15150:	b	15028 <_obstack_memory_used@@Base+0x272c>
   15154:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   15158:	push	{r4, lr}
   1515c:	mov	r1, #1
   15160:	bl	152b0 <_obstack_memory_used@@Base+0x29b4>
   15164:	cmp	r0, #0
   15168:	popne	{r4, pc}
   1516c:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   15170:	push	{r4, lr}
   15174:	mov	r1, #1
   15178:	bl	152b0 <_obstack_memory_used@@Base+0x29b4>
   1517c:	cmp	r0, #0
   15180:	popne	{r4, pc}
   15184:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   15188:	push	{r4, lr}
   1518c:	bl	152b0 <_obstack_memory_used@@Base+0x29b4>
   15190:	cmp	r0, #0
   15194:	popne	{r4, pc}
   15198:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   1519c:	push	{r4, lr}
   151a0:	bl	152b0 <_obstack_memory_used@@Base+0x29b4>
   151a4:	cmp	r0, #0
   151a8:	popne	{r4, pc}
   151ac:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   151b0:	push	{r4, r5, r6, lr}
   151b4:	mov	r6, r0
   151b8:	mov	r0, r1
   151bc:	mov	r4, r1
   151c0:	bl	152f8 <_obstack_memory_used@@Base+0x29fc>
   151c4:	subs	r5, r0, #0
   151c8:	beq	151e0 <_obstack_memory_used@@Base+0x28e4>
   151cc:	mov	r2, r4
   151d0:	mov	r1, r6
   151d4:	bl	10dbc <memcpy@plt>
   151d8:	mov	r0, r5
   151dc:	pop	{r4, r5, r6, pc}
   151e0:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   151e4:	push	{r4, r5, r6, lr}
   151e8:	mov	r6, r0
   151ec:	mov	r0, r1
   151f0:	mov	r4, r1
   151f4:	bl	152f8 <_obstack_memory_used@@Base+0x29fc>
   151f8:	subs	r5, r0, #0
   151fc:	beq	15214 <_obstack_memory_used@@Base+0x2918>
   15200:	mov	r2, r4
   15204:	mov	r1, r6
   15208:	bl	10dbc <memcpy@plt>
   1520c:	mov	r0, r5
   15210:	pop	{r4, r5, r6, pc}
   15214:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   15218:	push	{r4, r5, r6, lr}
   1521c:	mov	r6, r0
   15220:	add	r0, r1, #1
   15224:	mov	r4, r1
   15228:	bl	152f8 <_obstack_memory_used@@Base+0x29fc>
   1522c:	subs	r5, r0, #0
   15230:	beq	15250 <_obstack_memory_used@@Base+0x2954>
   15234:	mov	r3, #0
   15238:	mov	r1, r6
   1523c:	strb	r3, [r5, r4]
   15240:	mov	r2, r4
   15244:	bl	10dbc <memcpy@plt>
   15248:	mov	r0, r5
   1524c:	pop	{r4, r5, r6, pc}
   15250:	bl	15270 <_obstack_memory_used@@Base+0x2974>
   15254:	push	{r4, lr}
   15258:	mov	r4, r0
   1525c:	bl	10f0c <strlen@plt>
   15260:	add	r1, r0, #1
   15264:	mov	r0, r4
   15268:	pop	{r4, lr}
   1526c:	b	151b0 <_obstack_memory_used@@Base+0x28b4>
   15270:	ldr	r3, [pc, #44]	; 152a4 <_obstack_memory_used@@Base+0x29a8>
   15274:	push	{r4, lr}
   15278:	mov	r2, #5
   1527c:	ldr	r1, [pc, #36]	; 152a8 <_obstack_memory_used@@Base+0x29ac>
   15280:	mov	r0, #0
   15284:	ldr	r4, [r3]
   15288:	bl	10df8 <dcgettext@plt>
   1528c:	ldr	r2, [pc, #24]	; 152ac <_obstack_memory_used@@Base+0x29b0>
   15290:	mov	r1, #0
   15294:	mov	r3, r0
   15298:	mov	r0, r4
   1529c:	bl	10e70 <error@plt>
   152a0:	bl	10fb4 <abort@plt>
   152a4:	andeq	r8, r2, ip, ror #1
   152a8:	andeq	r7, r1, r4, ror r5
   152ac:	andeq	r7, r1, r4, ror #10
   152b0:	cmp	r1, #0
   152b4:	cmpne	r0, #0
   152b8:	moveq	r1, #1
   152bc:	moveq	r0, r1
   152c0:	umull	r2, r3, r0, r1
   152c4:	adds	r3, r3, #0
   152c8:	movne	r3, #1
   152cc:	cmp	r2, #0
   152d0:	blt	152e0 <_obstack_memory_used@@Base+0x29e4>
   152d4:	cmp	r3, #0
   152d8:	bne	152e0 <_obstack_memory_used@@Base+0x29e4>
   152dc:	b	10d5c <calloc@plt>
   152e0:	push	{r4, lr}
   152e4:	bl	10f18 <__errno_location@plt>
   152e8:	mov	r3, #12
   152ec:	str	r3, [r0]
   152f0:	mov	r0, #0
   152f4:	pop	{r4, pc}
   152f8:	cmp	r0, #0
   152fc:	moveq	r0, #1
   15300:	cmp	r0, #0
   15304:	blt	1530c <_obstack_memory_used@@Base+0x2a10>
   15308:	b	10eac <malloc@plt>
   1530c:	push	{r4, lr}
   15310:	bl	10f18 <__errno_location@plt>
   15314:	mov	r3, #12
   15318:	str	r3, [r0]
   1531c:	mov	r0, #0
   15320:	pop	{r4, pc}
   15324:	cmp	r0, #0
   15328:	beq	1534c <_obstack_memory_used@@Base+0x2a50>
   1532c:	cmp	r1, #0
   15330:	push	{lr}		; (str lr, [sp, #-4]!)
   15334:	sub	sp, sp, #12
   15338:	beq	15354 <_obstack_memory_used@@Base+0x2a58>
   1533c:	blt	1536c <_obstack_memory_used@@Base+0x2a70>
   15340:	add	sp, sp, #12
   15344:	pop	{lr}		; (ldr lr, [sp], #4)
   15348:	b	10e10 <realloc@plt>
   1534c:	mov	r0, r1
   15350:	b	152f8 <_obstack_memory_used@@Base+0x29fc>
   15354:	str	r1, [sp, #4]
   15358:	bl	12310 <close@plt+0x1350>
   1535c:	ldr	r3, [sp, #4]
   15360:	mov	r0, r3
   15364:	add	sp, sp, #12
   15368:	pop	{pc}		; (ldr pc, [sp], #4)
   1536c:	bl	10f18 <__errno_location@plt>
   15370:	mov	r2, #12
   15374:	mov	r3, #0
   15378:	str	r2, [r0]
   1537c:	b	15360 <_obstack_memory_used@@Base+0x2a64>
   15380:	push	{r4, r5, r6, lr}
   15384:	mov	r4, r0
   15388:	bl	10e58 <__fpending@plt>
   1538c:	ldr	r5, [r4]
   15390:	and	r5, r5, #32
   15394:	mov	r6, r0
   15398:	mov	r0, r4
   1539c:	bl	12210 <close@plt+0x1250>
   153a0:	cmp	r5, #0
   153a4:	mov	r4, r0
   153a8:	bne	153c8 <_obstack_memory_used@@Base+0x2acc>
   153ac:	cmp	r0, #0
   153b0:	beq	153c0 <_obstack_memory_used@@Base+0x2ac4>
   153b4:	cmp	r6, #0
   153b8:	beq	153e4 <_obstack_memory_used@@Base+0x2ae8>
   153bc:	mvn	r4, #0
   153c0:	mov	r0, r4
   153c4:	pop	{r4, r5, r6, pc}
   153c8:	cmp	r0, #0
   153cc:	bne	153bc <_obstack_memory_used@@Base+0x2ac0>
   153d0:	bl	10f18 <__errno_location@plt>
   153d4:	str	r4, [r0]
   153d8:	mvn	r4, #0
   153dc:	mov	r0, r4
   153e0:	pop	{r4, r5, r6, pc}
   153e4:	bl	10f18 <__errno_location@plt>
   153e8:	ldr	r4, [r0]
   153ec:	subs	r4, r4, #9
   153f0:	mvnne	r4, #0
   153f4:	mov	r0, r4
   153f8:	pop	{r4, r5, r6, pc}
   153fc:	push	{r4, lr}
   15400:	mov	r0, #14
   15404:	bl	10f90 <nl_langinfo@plt>
   15408:	cmp	r0, #0
   1540c:	beq	15424 <_obstack_memory_used@@Base+0x2b28>
   15410:	ldrb	r2, [r0]
   15414:	ldr	r3, [pc, #16]	; 1542c <_obstack_memory_used@@Base+0x2b30>
   15418:	cmp	r2, #0
   1541c:	moveq	r0, r3
   15420:	pop	{r4, pc}
   15424:	ldr	r0, [pc]	; 1542c <_obstack_memory_used@@Base+0x2b30>
   15428:	pop	{r4, pc}
   1542c:	andeq	r7, r1, r0, asr #19
   15430:	push	{r4, r5, r6, r7, lr}
   15434:	subs	r6, r0, #0
   15438:	sub	sp, sp, #12
   1543c:	addeq	r6, sp, #4
   15440:	mov	r0, r6
   15444:	mov	r5, r2
   15448:	mov	r7, r1
   1544c:	bl	10e64 <mbrtowc@plt>
   15450:	cmp	r5, #0
   15454:	cmnne	r0, #3
   15458:	mov	r4, r0
   1545c:	bls	15478 <_obstack_memory_used@@Base+0x2b7c>
   15460:	mov	r0, #0
   15464:	bl	154d0 <_obstack_memory_used@@Base+0x2bd4>
   15468:	cmp	r0, #0
   1546c:	moveq	r4, #1
   15470:	ldrbeq	r3, [r7]
   15474:	streq	r3, [r6]
   15478:	mov	r0, r4
   1547c:	add	sp, sp, #12
   15480:	pop	{r4, r5, r6, r7, pc}
   15484:	push	{r4, r5, r6, lr}
   15488:	subs	r4, r2, #0
   1548c:	mov	r6, r0
   15490:	mov	r5, r1
   15494:	beq	154c0 <_obstack_memory_used@@Base+0x2bc4>
   15498:	mov	r1, r4
   1549c:	mvn	r0, #0
   154a0:	bl	155c4 <_obstack_memory_used@@Base+0x2cc8>
   154a4:	cmp	r0, r5
   154a8:	bcs	154c0 <_obstack_memory_used@@Base+0x2bc4>
   154ac:	bl	10f18 <__errno_location@plt>
   154b0:	mov	r3, #12
   154b4:	str	r3, [r0]
   154b8:	mov	r0, #0
   154bc:	pop	{r4, r5, r6, pc}
   154c0:	mul	r1, r5, r4
   154c4:	mov	r0, r6
   154c8:	pop	{r4, r5, r6, lr}
   154cc:	b	15324 <_obstack_memory_used@@Base+0x2a28>
   154d0:	push	{lr}		; (str lr, [sp, #-4]!)
   154d4:	sub	sp, sp, #268	; 0x10c
   154d8:	add	r1, sp, #4
   154dc:	ldr	r2, [pc, #60]	; 15520 <_obstack_memory_used@@Base+0x2c24>
   154e0:	bl	1552c <_obstack_memory_used@@Base+0x2c30>
   154e4:	cmp	r0, #0
   154e8:	movne	r0, #0
   154ec:	bne	15518 <_obstack_memory_used@@Base+0x2c1c>
   154f0:	ldr	r1, [pc, #44]	; 15524 <_obstack_memory_used@@Base+0x2c28>
   154f4:	add	r0, sp, #4
   154f8:	bl	10d8c <strcmp@plt>
   154fc:	cmp	r0, #0
   15500:	beq	15518 <_obstack_memory_used@@Base+0x2c1c>
   15504:	add	r0, sp, #4
   15508:	ldr	r1, [pc, #24]	; 15528 <_obstack_memory_used@@Base+0x2c2c>
   1550c:	bl	10d8c <strcmp@plt>
   15510:	adds	r0, r0, #0
   15514:	movne	r0, #1
   15518:	add	sp, sp, #268	; 0x10c
   1551c:	pop	{pc}		; (ldr pc, [sp], #4)
   15520:	andeq	r0, r0, r1, lsl #2
   15524:	andeq	r7, r1, r8, asr #19
   15528:	andeq	r7, r1, ip, asr #19
   1552c:	push	{r4, r5, r6, lr}
   15530:	mov	r5, r1
   15534:	mov	r1, #0
   15538:	mov	r4, r2
   1553c:	bl	10f78 <setlocale@plt>
   15540:	subs	r6, r0, #0
   15544:	beq	155a0 <_obstack_memory_used@@Base+0x2ca4>
   15548:	bl	10f0c <strlen@plt>
   1554c:	cmp	r4, r0
   15550:	bhi	15588 <_obstack_memory_used@@Base+0x2c8c>
   15554:	cmp	r4, #0
   15558:	bne	15564 <_obstack_memory_used@@Base+0x2c68>
   1555c:	mov	r0, #34	; 0x22
   15560:	pop	{r4, r5, r6, pc}
   15564:	sub	r4, r4, #1
   15568:	mov	r1, r6
   1556c:	mov	r2, r4
   15570:	mov	r0, r5
   15574:	bl	10dbc <memcpy@plt>
   15578:	mov	r3, #0
   1557c:	strb	r3, [r5, r4]
   15580:	mov	r0, #34	; 0x22
   15584:	pop	{r4, r5, r6, pc}
   15588:	add	r2, r0, #1
   1558c:	mov	r1, r6
   15590:	mov	r0, r5
   15594:	bl	10dbc <memcpy@plt>
   15598:	mov	r0, #0
   1559c:	pop	{r4, r5, r6, pc}
   155a0:	cmp	r4, #0
   155a4:	beq	155b4 <_obstack_memory_used@@Base+0x2cb8>
   155a8:	strb	r6, [r5]
   155ac:	mov	r0, #22
   155b0:	pop	{r4, r5, r6, pc}
   155b4:	mov	r0, #22
   155b8:	pop	{r4, r5, r6, pc}
   155bc:	mov	r1, #0
   155c0:	b	10f78 <setlocale@plt>
   155c4:	subs	r2, r1, #1
   155c8:	bxeq	lr
   155cc:	bcc	157a4 <_obstack_memory_used@@Base+0x2ea8>
   155d0:	cmp	r0, r1
   155d4:	bls	15788 <_obstack_memory_used@@Base+0x2e8c>
   155d8:	tst	r1, r2
   155dc:	beq	15794 <_obstack_memory_used@@Base+0x2e98>
   155e0:	clz	r3, r0
   155e4:	clz	r2, r1
   155e8:	sub	r3, r2, r3
   155ec:	rsbs	r3, r3, #31
   155f0:	addne	r3, r3, r3, lsl #1
   155f4:	mov	r2, #0
   155f8:	addne	pc, pc, r3, lsl #2
   155fc:	nop			; (mov r0, r0)
   15600:	cmp	r0, r1, lsl #31
   15604:	adc	r2, r2, r2
   15608:	subcs	r0, r0, r1, lsl #31
   1560c:	cmp	r0, r1, lsl #30
   15610:	adc	r2, r2, r2
   15614:	subcs	r0, r0, r1, lsl #30
   15618:	cmp	r0, r1, lsl #29
   1561c:	adc	r2, r2, r2
   15620:	subcs	r0, r0, r1, lsl #29
   15624:	cmp	r0, r1, lsl #28
   15628:	adc	r2, r2, r2
   1562c:	subcs	r0, r0, r1, lsl #28
   15630:	cmp	r0, r1, lsl #27
   15634:	adc	r2, r2, r2
   15638:	subcs	r0, r0, r1, lsl #27
   1563c:	cmp	r0, r1, lsl #26
   15640:	adc	r2, r2, r2
   15644:	subcs	r0, r0, r1, lsl #26
   15648:	cmp	r0, r1, lsl #25
   1564c:	adc	r2, r2, r2
   15650:	subcs	r0, r0, r1, lsl #25
   15654:	cmp	r0, r1, lsl #24
   15658:	adc	r2, r2, r2
   1565c:	subcs	r0, r0, r1, lsl #24
   15660:	cmp	r0, r1, lsl #23
   15664:	adc	r2, r2, r2
   15668:	subcs	r0, r0, r1, lsl #23
   1566c:	cmp	r0, r1, lsl #22
   15670:	adc	r2, r2, r2
   15674:	subcs	r0, r0, r1, lsl #22
   15678:	cmp	r0, r1, lsl #21
   1567c:	adc	r2, r2, r2
   15680:	subcs	r0, r0, r1, lsl #21
   15684:	cmp	r0, r1, lsl #20
   15688:	adc	r2, r2, r2
   1568c:	subcs	r0, r0, r1, lsl #20
   15690:	cmp	r0, r1, lsl #19
   15694:	adc	r2, r2, r2
   15698:	subcs	r0, r0, r1, lsl #19
   1569c:	cmp	r0, r1, lsl #18
   156a0:	adc	r2, r2, r2
   156a4:	subcs	r0, r0, r1, lsl #18
   156a8:	cmp	r0, r1, lsl #17
   156ac:	adc	r2, r2, r2
   156b0:	subcs	r0, r0, r1, lsl #17
   156b4:	cmp	r0, r1, lsl #16
   156b8:	adc	r2, r2, r2
   156bc:	subcs	r0, r0, r1, lsl #16
   156c0:	cmp	r0, r1, lsl #15
   156c4:	adc	r2, r2, r2
   156c8:	subcs	r0, r0, r1, lsl #15
   156cc:	cmp	r0, r1, lsl #14
   156d0:	adc	r2, r2, r2
   156d4:	subcs	r0, r0, r1, lsl #14
   156d8:	cmp	r0, r1, lsl #13
   156dc:	adc	r2, r2, r2
   156e0:	subcs	r0, r0, r1, lsl #13
   156e4:	cmp	r0, r1, lsl #12
   156e8:	adc	r2, r2, r2
   156ec:	subcs	r0, r0, r1, lsl #12
   156f0:	cmp	r0, r1, lsl #11
   156f4:	adc	r2, r2, r2
   156f8:	subcs	r0, r0, r1, lsl #11
   156fc:	cmp	r0, r1, lsl #10
   15700:	adc	r2, r2, r2
   15704:	subcs	r0, r0, r1, lsl #10
   15708:	cmp	r0, r1, lsl #9
   1570c:	adc	r2, r2, r2
   15710:	subcs	r0, r0, r1, lsl #9
   15714:	cmp	r0, r1, lsl #8
   15718:	adc	r2, r2, r2
   1571c:	subcs	r0, r0, r1, lsl #8
   15720:	cmp	r0, r1, lsl #7
   15724:	adc	r2, r2, r2
   15728:	subcs	r0, r0, r1, lsl #7
   1572c:	cmp	r0, r1, lsl #6
   15730:	adc	r2, r2, r2
   15734:	subcs	r0, r0, r1, lsl #6
   15738:	cmp	r0, r1, lsl #5
   1573c:	adc	r2, r2, r2
   15740:	subcs	r0, r0, r1, lsl #5
   15744:	cmp	r0, r1, lsl #4
   15748:	adc	r2, r2, r2
   1574c:	subcs	r0, r0, r1, lsl #4
   15750:	cmp	r0, r1, lsl #3
   15754:	adc	r2, r2, r2
   15758:	subcs	r0, r0, r1, lsl #3
   1575c:	cmp	r0, r1, lsl #2
   15760:	adc	r2, r2, r2
   15764:	subcs	r0, r0, r1, lsl #2
   15768:	cmp	r0, r1, lsl #1
   1576c:	adc	r2, r2, r2
   15770:	subcs	r0, r0, r1, lsl #1
   15774:	cmp	r0, r1
   15778:	adc	r2, r2, r2
   1577c:	subcs	r0, r0, r1
   15780:	mov	r0, r2
   15784:	bx	lr
   15788:	moveq	r0, #1
   1578c:	movne	r0, #0
   15790:	bx	lr
   15794:	clz	r2, r1
   15798:	rsb	r2, r2, #31
   1579c:	lsr	r0, r0, r2
   157a0:	bx	lr
   157a4:	cmp	r0, #0
   157a8:	mvnne	r0, #0
   157ac:	b	15a10 <_obstack_memory_used@@Base+0x3114>
   157b0:	cmp	r1, #0
   157b4:	beq	157a4 <_obstack_memory_used@@Base+0x2ea8>
   157b8:	push	{r0, r1, lr}
   157bc:	bl	155c4 <_obstack_memory_used@@Base+0x2cc8>
   157c0:	pop	{r1, r2, lr}
   157c4:	mul	r3, r2, r0
   157c8:	sub	r1, r1, r3
   157cc:	bx	lr
   157d0:	cmp	r1, #0
   157d4:	beq	159e0 <_obstack_memory_used@@Base+0x30e4>
   157d8:	eor	ip, r0, r1
   157dc:	rsbmi	r1, r1, #0
   157e0:	subs	r2, r1, #1
   157e4:	beq	159ac <_obstack_memory_used@@Base+0x30b0>
   157e8:	movs	r3, r0
   157ec:	rsbmi	r3, r0, #0
   157f0:	cmp	r3, r1
   157f4:	bls	159b8 <_obstack_memory_used@@Base+0x30bc>
   157f8:	tst	r1, r2
   157fc:	beq	159c8 <_obstack_memory_used@@Base+0x30cc>
   15800:	clz	r2, r3
   15804:	clz	r0, r1
   15808:	sub	r2, r0, r2
   1580c:	rsbs	r2, r2, #31
   15810:	addne	r2, r2, r2, lsl #1
   15814:	mov	r0, #0
   15818:	addne	pc, pc, r2, lsl #2
   1581c:	nop			; (mov r0, r0)
   15820:	cmp	r3, r1, lsl #31
   15824:	adc	r0, r0, r0
   15828:	subcs	r3, r3, r1, lsl #31
   1582c:	cmp	r3, r1, lsl #30
   15830:	adc	r0, r0, r0
   15834:	subcs	r3, r3, r1, lsl #30
   15838:	cmp	r3, r1, lsl #29
   1583c:	adc	r0, r0, r0
   15840:	subcs	r3, r3, r1, lsl #29
   15844:	cmp	r3, r1, lsl #28
   15848:	adc	r0, r0, r0
   1584c:	subcs	r3, r3, r1, lsl #28
   15850:	cmp	r3, r1, lsl #27
   15854:	adc	r0, r0, r0
   15858:	subcs	r3, r3, r1, lsl #27
   1585c:	cmp	r3, r1, lsl #26
   15860:	adc	r0, r0, r0
   15864:	subcs	r3, r3, r1, lsl #26
   15868:	cmp	r3, r1, lsl #25
   1586c:	adc	r0, r0, r0
   15870:	subcs	r3, r3, r1, lsl #25
   15874:	cmp	r3, r1, lsl #24
   15878:	adc	r0, r0, r0
   1587c:	subcs	r3, r3, r1, lsl #24
   15880:	cmp	r3, r1, lsl #23
   15884:	adc	r0, r0, r0
   15888:	subcs	r3, r3, r1, lsl #23
   1588c:	cmp	r3, r1, lsl #22
   15890:	adc	r0, r0, r0
   15894:	subcs	r3, r3, r1, lsl #22
   15898:	cmp	r3, r1, lsl #21
   1589c:	adc	r0, r0, r0
   158a0:	subcs	r3, r3, r1, lsl #21
   158a4:	cmp	r3, r1, lsl #20
   158a8:	adc	r0, r0, r0
   158ac:	subcs	r3, r3, r1, lsl #20
   158b0:	cmp	r3, r1, lsl #19
   158b4:	adc	r0, r0, r0
   158b8:	subcs	r3, r3, r1, lsl #19
   158bc:	cmp	r3, r1, lsl #18
   158c0:	adc	r0, r0, r0
   158c4:	subcs	r3, r3, r1, lsl #18
   158c8:	cmp	r3, r1, lsl #17
   158cc:	adc	r0, r0, r0
   158d0:	subcs	r3, r3, r1, lsl #17
   158d4:	cmp	r3, r1, lsl #16
   158d8:	adc	r0, r0, r0
   158dc:	subcs	r3, r3, r1, lsl #16
   158e0:	cmp	r3, r1, lsl #15
   158e4:	adc	r0, r0, r0
   158e8:	subcs	r3, r3, r1, lsl #15
   158ec:	cmp	r3, r1, lsl #14
   158f0:	adc	r0, r0, r0
   158f4:	subcs	r3, r3, r1, lsl #14
   158f8:	cmp	r3, r1, lsl #13
   158fc:	adc	r0, r0, r0
   15900:	subcs	r3, r3, r1, lsl #13
   15904:	cmp	r3, r1, lsl #12
   15908:	adc	r0, r0, r0
   1590c:	subcs	r3, r3, r1, lsl #12
   15910:	cmp	r3, r1, lsl #11
   15914:	adc	r0, r0, r0
   15918:	subcs	r3, r3, r1, lsl #11
   1591c:	cmp	r3, r1, lsl #10
   15920:	adc	r0, r0, r0
   15924:	subcs	r3, r3, r1, lsl #10
   15928:	cmp	r3, r1, lsl #9
   1592c:	adc	r0, r0, r0
   15930:	subcs	r3, r3, r1, lsl #9
   15934:	cmp	r3, r1, lsl #8
   15938:	adc	r0, r0, r0
   1593c:	subcs	r3, r3, r1, lsl #8
   15940:	cmp	r3, r1, lsl #7
   15944:	adc	r0, r0, r0
   15948:	subcs	r3, r3, r1, lsl #7
   1594c:	cmp	r3, r1, lsl #6
   15950:	adc	r0, r0, r0
   15954:	subcs	r3, r3, r1, lsl #6
   15958:	cmp	r3, r1, lsl #5
   1595c:	adc	r0, r0, r0
   15960:	subcs	r3, r3, r1, lsl #5
   15964:	cmp	r3, r1, lsl #4
   15968:	adc	r0, r0, r0
   1596c:	subcs	r3, r3, r1, lsl #4
   15970:	cmp	r3, r1, lsl #3
   15974:	adc	r0, r0, r0
   15978:	subcs	r3, r3, r1, lsl #3
   1597c:	cmp	r3, r1, lsl #2
   15980:	adc	r0, r0, r0
   15984:	subcs	r3, r3, r1, lsl #2
   15988:	cmp	r3, r1, lsl #1
   1598c:	adc	r0, r0, r0
   15990:	subcs	r3, r3, r1, lsl #1
   15994:	cmp	r3, r1
   15998:	adc	r0, r0, r0
   1599c:	subcs	r3, r3, r1
   159a0:	cmp	ip, #0
   159a4:	rsbmi	r0, r0, #0
   159a8:	bx	lr
   159ac:	teq	ip, r0
   159b0:	rsbmi	r0, r0, #0
   159b4:	bx	lr
   159b8:	movcc	r0, #0
   159bc:	asreq	r0, ip, #31
   159c0:	orreq	r0, r0, #1
   159c4:	bx	lr
   159c8:	clz	r2, r1
   159cc:	rsb	r2, r2, #31
   159d0:	cmp	ip, #0
   159d4:	lsr	r0, r3, r2
   159d8:	rsbmi	r0, r0, #0
   159dc:	bx	lr
   159e0:	cmp	r0, #0
   159e4:	mvngt	r0, #-2147483648	; 0x80000000
   159e8:	movlt	r0, #-2147483648	; 0x80000000
   159ec:	b	15a10 <_obstack_memory_used@@Base+0x3114>
   159f0:	cmp	r1, #0
   159f4:	beq	159e0 <_obstack_memory_used@@Base+0x30e4>
   159f8:	push	{r0, r1, lr}
   159fc:	bl	157d8 <_obstack_memory_used@@Base+0x2edc>
   15a00:	pop	{r1, r2, lr}
   15a04:	mul	r3, r2, r0
   15a08:	sub	r1, r1, r3
   15a0c:	bx	lr
   15a10:	push	{r1, lr}
   15a14:	mov	r0, #8
   15a18:	bl	10d74 <raise@plt>
   15a1c:	pop	{r1, pc}
   15a20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a24:	mov	r7, r0
   15a28:	ldr	r6, [pc, #72]	; 15a78 <_obstack_memory_used@@Base+0x317c>
   15a2c:	ldr	r5, [pc, #72]	; 15a7c <_obstack_memory_used@@Base+0x3180>
   15a30:	add	r6, pc, r6
   15a34:	add	r5, pc, r5
   15a38:	sub	r6, r6, r5
   15a3c:	mov	r8, r1
   15a40:	mov	r9, r2
   15a44:	bl	10d3c <calloc@plt-0x20>
   15a48:	asrs	r6, r6, #2
   15a4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a50:	mov	r4, #0
   15a54:	add	r4, r4, #1
   15a58:	ldr	r3, [r5], #4
   15a5c:	mov	r2, r9
   15a60:	mov	r1, r8
   15a64:	mov	r0, r7
   15a68:	blx	r3
   15a6c:	cmp	r6, r4
   15a70:	bne	15a54 <_obstack_memory_used@@Base+0x3158>
   15a74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a78:	ldrdeq	r2, [r1], -r8
   15a7c:	ldrdeq	r2, [r1], -r0
   15a80:	bx	lr
   15a84:	ldr	r3, [pc, #12]	; 15a98 <_obstack_memory_used@@Base+0x319c>
   15a88:	mov	r1, #0
   15a8c:	add	r3, pc, r3
   15a90:	ldr	r2, [r3]
   15a94:	b	10f24 <__cxa_atexit@plt>
   15a98:	andeq	r2, r1, r0, asr r6

Disassembly of section .fini:

00015a9c <.fini>:
   15a9c:	push	{r3, lr}
   15aa0:	pop	{r3, pc}
