
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_solo/monster_test_solo:     file format elf32-littlearm


Disassembly of section .init:

000126ec <.init>:
   126ec:	push	{r3, lr}
   126f0:	bl	127f0 <_start@@Base+0x3c>
   126f4:	pop	{r3, pc}

Disassembly of section .plt:

000126f8 <free@plt-0x14>:
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	ldr	lr, [pc, #4]	; 12708 <free@plt-0x4>
   12700:	add	lr, pc, lr
   12704:	ldr	pc, [lr, #8]!
   12708:	strdeq	r7, [r1], -r8

0001270c <free@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #94208	; 0x17000
   12714:	ldr	pc, [ip, #2296]!	; 0x8f8

00012718 <memcpy@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #94208	; 0x17000
   12720:	ldr	pc, [ip, #2288]!	; 0x8f0

00012724 <memcmp@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #94208	; 0x17000
   1272c:	ldr	pc, [ip, #2280]!	; 0x8e8

00012730 <realloc@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #94208	; 0x17000
   12738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001273c <malloc@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #94208	; 0x17000
   12744:	ldr	pc, [ip, #2264]!	; 0x8d8

00012748 <__libc_start_main@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #94208	; 0x17000
   12750:	ldr	pc, [ip, #2256]!	; 0x8d0

00012754 <__gmon_start__@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #94208	; 0x17000
   1275c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012760 <strlen@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #94208	; 0x17000
   12768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001276c <posix_memalign@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #94208	; 0x17000
   12774:	ldr	pc, [ip, #2232]!	; 0x8b8

00012778 <memset@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #94208	; 0x17000
   12780:	ldr	pc, [ip, #2224]!	; 0x8b0

00012784 <strncpy@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #94208	; 0x17000
   1278c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012790 <memchr@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #94208	; 0x17000
   12798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001279c <abort@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #94208	; 0x17000
   127a4:	ldr	pc, [ip, #2200]!	; 0x898

000127a8 <__assert_fail@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #94208	; 0x17000
   127b0:	ldr	pc, [ip, #2192]!	; 0x890

Disassembly of section .text:

000127b4 <_start@@Base>:
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <_start@@Base+0x30>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <_start@@Base+0x34>
   127d8:	ldr	r3, [pc, #12]	; 127ec <_start@@Base+0x38>
   127dc:	bl	12748 <__libc_start_main@plt>
   127e0:	bl	1279c <abort@plt>
   127e4:			; <UNDEFINED> instruction: 0x00017eb0
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	r7, r1, r0, asr lr
   127f0:	ldr	r3, [pc, #20]	; 1280c <_start@@Base+0x58>
   127f4:	ldr	r2, [pc, #20]	; 12810 <_start@@Base+0x5c>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	12754 <__gmon_start__@plt>
   1280c:	andeq	r7, r1, r0, lsl #16
   12810:	andeq	r0, r0, r4, asr #32
   12814:	ldr	r0, [pc, #24]	; 12834 <_start@@Base+0x80>
   12818:	ldr	r3, [pc, #24]	; 12838 <_start@@Base+0x84>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <_start@@Base+0x88>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:	andeq	sl, r2, r0, asr r0
   12838:	andeq	sl, r2, r0, asr r0
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <_start@@Base+0xb8>
   12844:	ldr	r1, [pc, #36]	; 12870 <_start@@Base+0xbc>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <_start@@Base+0xc0>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:	andeq	sl, r2, r0, asr r0
   12870:	andeq	sl, r2, r0, asr r0
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <_start@@Base+0xe8>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <_start@@Base+0x60>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	sl, r2, r0, asr r0
   128a0:	b	12840 <_start@@Base+0x8c>

000128a4 <main@@Base>:
   128a4:	push	{r4, r5, r6, r7, fp, lr}
   128a8:	add	fp, sp, #16
   128ac:	sub	sp, sp, #240	; 0xf0
   128b0:	add	r4, sp, #4
   128b4:	mov	r0, r4
   128b8:	bl	13534 <flatcc_builder_init@@Base>
   128bc:	mov	r0, r4
   128c0:	bl	12900 <main@@Base+0x5c>
   128c4:	mov	r0, r4
   128c8:	bl	12924 <main@@Base+0x80>
   128cc:	mov	r0, r4
   128d0:	bl	1294c <main@@Base+0xa8>
   128d4:	sub	r1, fp, #20
   128d8:	mov	r0, r4
   128dc:	bl	163b4 <flatcc_builder_get_direct_buffer@@Base>
   128e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   128e4:	bl	1296c <main@@Base+0xc8>
   128e8:	mov	r5, r0
   128ec:	mov	r0, r4
   128f0:	bl	136ac <flatcc_builder_clear@@Base>
   128f4:	mov	r0, r5
   128f8:	sub	sp, fp, #16
   128fc:	pop	{r4, r5, r6, r7, fp, pc}
   12900:	push	{r4, sl, fp, lr}
   12904:	add	fp, sp, #8
   12908:	mov	r4, r0
   1290c:	bl	12980 <main@@Base+0xdc>
   12910:	cmp	r0, #0
   12914:	popne	{r4, sl, fp, pc}
   12918:	mov	r0, r4
   1291c:	pop	{r4, sl, fp, lr}
   12920:	b	12994 <main@@Base+0xf0>
   12924:	push	{r4, sl, fp, lr}
   12928:	add	fp, sp, #8
   1292c:	mov	r4, r0
   12930:	movw	r1, #32452	; 0x7ec4
   12934:	movt	r1, #1
   12938:	bl	16040 <flatcc_builder_create_string_str@@Base>
   1293c:	mov	r1, r0
   12940:	mov	r0, r4
   12944:	pop	{r4, sl, fp, lr}
   12948:	b	1299c <main@@Base+0xf8>
   1294c:	push	{r4, sl, fp, lr}
   12950:	add	fp, sp, #8
   12954:	mov	r4, r0
   12958:	bl	129c8 <main@@Base+0x124>
   1295c:	mov	r1, r0
   12960:	mov	r0, r4
   12964:	pop	{r4, sl, fp, lr}
   12968:	b	129c4 <main@@Base+0x120>
   1296c:	movw	r2, #32462	; 0x7ece
   12970:	movt	r2, #1
   12974:	movw	r3, #10776	; 0x2a18
   12978:	movt	r3, #1
   1297c:	b	176ec <flatcc_verify_table_as_root@@Base>
   12980:	movw	r1, #32462	; 0x7ece
   12984:	movt	r1, #1
   12988:	mov	r2, #0
   1298c:	mov	r3, #0
   12990:	b	13e44 <flatcc_builder_start_buffer@@Base>
   12994:	mov	r1, #36	; 0x24
   12998:	b	14b2c <flatcc_builder_start_table@@Base>
   1299c:	push	{r4, sl, fp, lr}
   129a0:	add	fp, sp, #8
   129a4:	cmp	r1, #0
   129a8:	popeq	{r4, sl, fp, pc}
   129ac:	mov	r4, r1
   129b0:	mov	r1, #3
   129b4:	bl	1587c <flatcc_builder_table_add_offset@@Base>
   129b8:	cmp	r0, #0
   129bc:	strne	r4, [r0]
   129c0:	pop	{r4, sl, fp, pc}
   129c4:	b	13ff8 <flatcc_builder_end_buffer@@Base>
   129c8:	push	{r4, sl, fp, lr}
   129cc:	add	fp, sp, #8
   129d0:	mov	r4, r0
   129d4:	movw	r1, #32808	; 0x8028
   129d8:	movt	r1, #1
   129dc:	mov	r2, #1
   129e0:	bl	151bc <flatcc_builder_check_required@@Base>
   129e4:	cmp	r0, #0
   129e8:	beq	129f8 <main@@Base+0x154>
   129ec:	mov	r0, r4
   129f0:	pop	{r4, sl, fp, lr}
   129f4:	b	1524c <flatcc_builder_end_table@@Base>
   129f8:	movw	r0, #32467	; 0x7ed3
   129fc:	movt	r0, #1
   12a00:	movw	r1, #32629	; 0x7f75
   12a04:	movt	r1, #1
   12a08:	movw	r3, #32725	; 0x7fd5
   12a0c:	movt	r3, #1
   12a10:	movw	r2, #2398	; 0x95e
   12a14:	bl	127a8 <__assert_fail@plt>
   12a18:	push	{r4, r5, r6, r7, fp, lr}
   12a1c:	add	fp, sp, #16
   12a20:	sub	sp, sp, #8
   12a24:	mov	r4, r0
   12a28:	mov	r1, #0
   12a2c:	mov	r2, #32
   12a30:	mov	r3, #16
   12a34:	bl	16dc0 <flatcc_verify_field@@Base>
   12a38:	cmp	r0, #0
   12a3c:	bne	12e44 <main@@Base+0x5a0>
   12a40:	mov	r0, r4
   12a44:	mov	r1, #2
   12a48:	mov	r2, #2
   12a4c:	mov	r3, #2
   12a50:	bl	16dc0 <flatcc_verify_field@@Base>
   12a54:	cmp	r0, #0
   12a58:	bne	12e44 <main@@Base+0x5a0>
   12a5c:	mov	r0, r4
   12a60:	mov	r1, #1
   12a64:	mov	r2, #2
   12a68:	mov	r3, #2
   12a6c:	bl	16dc0 <flatcc_verify_field@@Base>
   12a70:	cmp	r0, #0
   12a74:	bne	12e44 <main@@Base+0x5a0>
   12a78:	mov	r0, r4
   12a7c:	mov	r1, #3
   12a80:	mov	r2, #1
   12a84:	bl	16e2c <flatcc_verify_string_field@@Base>
   12a88:	cmp	r0, #0
   12a8c:	bne	12e44 <main@@Base+0x5a0>
   12a90:	mov	r5, #1
   12a94:	mov	r0, r4
   12a98:	mov	r1, #6
   12a9c:	mov	r2, #1
   12aa0:	mov	r3, #1
   12aa4:	bl	16dc0 <flatcc_verify_field@@Base>
   12aa8:	cmp	r0, #0
   12aac:	bne	12e44 <main@@Base+0x5a0>
   12ab0:	mvn	r0, #0
   12ab4:	str	r5, [sp]
   12ab8:	str	r0, [sp, #4]
   12abc:	mov	r0, r4
   12ac0:	mov	r1, #5
   12ac4:	mov	r2, #0
   12ac8:	mov	r3, #1
   12acc:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12ad0:	cmp	r0, #0
   12ad4:	bne	12e44 <main@@Base+0x5a0>
   12ad8:	movw	r3, #10776	; 0x2a18
   12adc:	movt	r3, #1
   12ae0:	mov	r0, r4
   12ae4:	mov	r1, #11
   12ae8:	mov	r2, #0
   12aec:	bl	172e8 <flatcc_verify_table_vector_field@@Base>
   12af0:	cmp	r0, #0
   12af4:	bne	12e44 <main@@Base+0x5a0>
   12af8:	mov	r0, r4
   12afc:	mov	r1, #10
   12b00:	mov	r2, #0
   12b04:	bl	1706c <flatcc_verify_string_vector_field@@Base>
   12b08:	cmp	r0, #0
   12b0c:	bne	12e44 <main@@Base+0x5a0>
   12b10:	mov	r0, r4
   12b14:	mov	r1, #28
   12b18:	mov	r2, #0
   12b1c:	bl	1706c <flatcc_verify_string_vector_field@@Base>
   12b20:	cmp	r0, #0
   12b24:	bne	12e44 <main@@Base+0x5a0>
   12b28:	mvn	r0, #0
   12b2c:	mov	r1, #1
   12b30:	str	r1, [sp]
   12b34:	str	r0, [sp, #4]
   12b38:	mov	r0, r4
   12b3c:	mov	r1, #24
   12b40:	mov	r2, #0
   12b44:	mov	r3, #1
   12b48:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	12e44 <main@@Base+0x5a0>
   12b54:	mvn	r0, #-536870912	; 0xe0000000
   12b58:	mov	r1, #4
   12b5c:	str	r1, [sp]
   12b60:	str	r0, [sp, #4]
   12b64:	mov	r0, r4
   12b68:	mov	r1, #29
   12b6c:	mov	r2, #0
   12b70:	mov	r3, #8
   12b74:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12b78:	cmp	r0, #0
   12b7c:	bne	12e44 <main@@Base+0x5a0>
   12b80:	movw	r5, #10776	; 0x2a18
   12b84:	movt	r5, #1
   12b88:	mov	r0, r4
   12b8c:	mov	r1, #12
   12b90:	mov	r2, #0
   12b94:	mov	r3, r5
   12b98:	bl	1717c <flatcc_verify_table_field@@Base>
   12b9c:	cmp	r0, #0
   12ba0:	bne	12e44 <main@@Base+0x5a0>
   12ba4:	movw	r3, #11884	; 0x2e6c
   12ba8:	movt	r3, #1
   12bac:	mov	r0, r4
   12bb0:	mov	r1, #8
   12bb4:	mov	r2, #0
   12bb8:	bl	179ac <flatcc_verify_union_field@@Base>
   12bbc:	cmp	r0, #0
   12bc0:	bne	12e44 <main@@Base+0x5a0>
   12bc4:	mvn	r6, #-1073741824	; 0xc0000000
   12bc8:	mov	r7, #2
   12bcc:	str	r7, [sp]
   12bd0:	str	r6, [sp, #4]
   12bd4:	mov	r0, r4
   12bd8:	mov	r1, #9
   12bdc:	mov	r2, #0
   12be0:	mov	r3, #4
   12be4:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12be8:	cmp	r0, #0
   12bec:	bne	12e44 <main@@Base+0x5a0>
   12bf0:	str	r7, [sp]
   12bf4:	str	r6, [sp, #4]
   12bf8:	mov	r0, r4
   12bfc:	mov	r1, #31
   12c00:	mov	r2, #0
   12c04:	mov	r3, #4
   12c08:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12c0c:	cmp	r0, #0
   12c10:	bne	12e44 <main@@Base+0x5a0>
   12c14:	mov	r0, #1
   12c18:	stm	sp, {r0, r5}
   12c1c:	mov	r0, r4
   12c20:	mov	r1, #13
   12c24:	mov	r2, #0
   12c28:	mov	r3, #0
   12c2c:	bl	178a4 <flatcc_verify_table_as_nested_root@@Base>
   12c30:	cmp	r0, #0
   12c34:	bne	12e44 <main@@Base+0x5a0>
   12c38:	movw	r3, #11928	; 0x2e98
   12c3c:	movt	r3, #1
   12c40:	mov	r0, r4
   12c44:	mov	r1, #14
   12c48:	mov	r2, #0
   12c4c:	bl	1717c <flatcc_verify_table_field@@Base>
   12c50:	cmp	r0, #0
   12c54:	bne	12e44 <main@@Base+0x5a0>
   12c58:	mov	r0, r4
   12c5c:	mov	r1, #15
   12c60:	mov	r2, #1
   12c64:	mov	r3, #1
   12c68:	bl	16dc0 <flatcc_verify_field@@Base>
   12c6c:	cmp	r0, #0
   12c70:	bne	12e44 <main@@Base+0x5a0>
   12c74:	mov	r0, r4
   12c78:	mov	r1, #16
   12c7c:	mov	r2, #4
   12c80:	mov	r3, #4
   12c84:	bl	16dc0 <flatcc_verify_field@@Base>
   12c88:	cmp	r0, #0
   12c8c:	bne	12e44 <main@@Base+0x5a0>
   12c90:	mov	r0, r4
   12c94:	mov	r1, #17
   12c98:	mov	r2, #4
   12c9c:	mov	r3, #4
   12ca0:	bl	16dc0 <flatcc_verify_field@@Base>
   12ca4:	cmp	r0, #0
   12ca8:	bne	12e44 <main@@Base+0x5a0>
   12cac:	mov	r0, r4
   12cb0:	mov	r1, #18
   12cb4:	mov	r2, #8
   12cb8:	mov	r3, #8
   12cbc:	bl	16dc0 <flatcc_verify_field@@Base>
   12cc0:	cmp	r0, #0
   12cc4:	bne	12e44 <main@@Base+0x5a0>
   12cc8:	mov	r0, r4
   12ccc:	mov	r1, #19
   12cd0:	mov	r2, #8
   12cd4:	mov	r3, #8
   12cd8:	bl	16dc0 <flatcc_verify_field@@Base>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12e44 <main@@Base+0x5a0>
   12ce4:	mov	r0, r4
   12ce8:	mov	r1, #20
   12cec:	mov	r2, #4
   12cf0:	mov	r3, #4
   12cf4:	bl	16dc0 <flatcc_verify_field@@Base>
   12cf8:	cmp	r0, #0
   12cfc:	bne	12e44 <main@@Base+0x5a0>
   12d00:	mov	r0, r4
   12d04:	mov	r1, #21
   12d08:	mov	r2, #4
   12d0c:	mov	r3, #4
   12d10:	bl	16dc0 <flatcc_verify_field@@Base>
   12d14:	cmp	r0, #0
   12d18:	bne	12e44 <main@@Base+0x5a0>
   12d1c:	mov	r0, r4
   12d20:	mov	r1, #22
   12d24:	mov	r2, #8
   12d28:	mov	r3, #8
   12d2c:	bl	16dc0 <flatcc_verify_field@@Base>
   12d30:	cmp	r0, #0
   12d34:	bne	12e44 <main@@Base+0x5a0>
   12d38:	mov	r0, r4
   12d3c:	mov	r1, #23
   12d40:	mov	r2, #8
   12d44:	mov	r3, #8
   12d48:	bl	16dc0 <flatcc_verify_field@@Base>
   12d4c:	cmp	r0, #0
   12d50:	bne	12e44 <main@@Base+0x5a0>
   12d54:	mov	r0, r4
   12d58:	mov	r1, #25
   12d5c:	mov	r2, #4
   12d60:	mov	r3, #4
   12d64:	bl	16dc0 <flatcc_verify_field@@Base>
   12d68:	cmp	r0, #0
   12d6c:	bne	12e44 <main@@Base+0x5a0>
   12d70:	mov	r0, r4
   12d74:	mov	r1, #26
   12d78:	mov	r2, #4
   12d7c:	mov	r3, #4
   12d80:	bl	16dc0 <flatcc_verify_field@@Base>
   12d84:	cmp	r0, #0
   12d88:	bne	12e44 <main@@Base+0x5a0>
   12d8c:	mov	r0, r4
   12d90:	mov	r1, #27
   12d94:	mov	r2, #4
   12d98:	mov	r3, #4
   12d9c:	bl	16dc0 <flatcc_verify_field@@Base>
   12da0:	cmp	r0, #0
   12da4:	bne	12e44 <main@@Base+0x5a0>
   12da8:	mvn	r0, #0
   12dac:	mov	r1, #1
   12db0:	str	r1, [sp]
   12db4:	str	r0, [sp, #4]
   12db8:	mov	r0, r4
   12dbc:	mov	r1, #30
   12dc0:	mov	r2, #0
   12dc4:	mov	r3, #1
   12dc8:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12dcc:	cmp	r0, #0
   12dd0:	bne	12e44 <main@@Base+0x5a0>
   12dd4:	mvn	r5, #-536870912	; 0xe0000000
   12dd8:	mov	r6, #8
   12ddc:	str	r6, [sp]
   12de0:	str	r5, [sp, #4]
   12de4:	mov	r0, r4
   12de8:	mov	r1, #32
   12dec:	mov	r2, #0
   12df0:	mov	r3, #8
   12df4:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12df8:	cmp	r0, #0
   12dfc:	bne	12e44 <main@@Base+0x5a0>
   12e00:	str	r6, [sp]
   12e04:	str	r5, [sp, #4]
   12e08:	mov	r0, r4
   12e0c:	mov	r1, #33	; 0x21
   12e10:	mov	r2, #0
   12e14:	mov	r3, #8
   12e18:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12e1c:	cmp	r0, #0
   12e20:	bne	12e44 <main@@Base+0x5a0>
   12e24:	movw	r3, #12016	; 0x2ef0
   12e28:	movt	r3, #1
   12e2c:	mov	r0, r4
   12e30:	mov	r1, #34	; 0x22
   12e34:	mov	r2, #0
   12e38:	bl	1717c <flatcc_verify_table_field@@Base>
   12e3c:	cmp	r0, #0
   12e40:	beq	12e4c <main@@Base+0x5a8>
   12e44:	sub	sp, fp, #16
   12e48:	pop	{r4, r5, r6, r7, fp, pc}
   12e4c:	movw	r3, #12024	; 0x2ef8
   12e50:	movt	r3, #1
   12e54:	mov	r0, r4
   12e58:	mov	r1, #35	; 0x23
   12e5c:	mov	r2, #0
   12e60:	sub	sp, fp, #16
   12e64:	pop	{r4, r5, r6, r7, fp, lr}
   12e68:	b	1717c <flatcc_verify_table_field@@Base>
   12e6c:	ldrb	r1, [r0, #12]
   12e70:	sub	r1, r1, #1
   12e74:	uxtb	r2, r1
   12e78:	cmp	r2, #3
   12e7c:	movhi	r0, #0
   12e80:	bxhi	lr
   12e84:	sxtb	r1, r1
   12e88:	movw	r2, #32812	; 0x802c
   12e8c:	movt	r2, #1
   12e90:	ldr	r1, [r2, r1, lsl #2]
   12e94:	b	17450 <flatcc_verify_union_table@@Base>
   12e98:	push	{r4, sl, fp, lr}
   12e9c:	add	fp, sp, #8
   12ea0:	mov	r4, r0
   12ea4:	mov	r1, #0
   12ea8:	mov	r2, #0
   12eac:	bl	16e2c <flatcc_verify_string_field@@Base>
   12eb0:	cmp	r0, #0
   12eb4:	popne	{r4, sl, fp, pc}
   12eb8:	mov	r0, r4
   12ebc:	mov	r1, #1
   12ec0:	mov	r2, #8
   12ec4:	mov	r3, #8
   12ec8:	bl	16dc0 <flatcc_verify_field@@Base>
   12ecc:	cmp	r0, #0
   12ed0:	beq	12ed8 <main@@Base+0x634>
   12ed4:	pop	{r4, sl, fp, pc}
   12ed8:	mov	r0, r4
   12edc:	mov	r1, #2
   12ee0:	mov	r2, #2
   12ee4:	mov	r3, #2
   12ee8:	pop	{r4, sl, fp, lr}
   12eec:	b	16dc0 <flatcc_verify_field@@Base>
   12ef0:	mov	r0, #0
   12ef4:	bx	lr
   12ef8:	push	{r4, r5, r6, sl, fp, lr}
   12efc:	add	fp, sp, #16
   12f00:	sub	sp, sp, #8
   12f04:	mov	r4, r0
   12f08:	mvn	r5, #0
   12f0c:	mov	r6, #1
   12f10:	str	r6, [sp]
   12f14:	str	r5, [sp, #4]
   12f18:	mov	r1, #0
   12f1c:	mov	r2, #0
   12f20:	mov	r3, #1
   12f24:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12f28:	cmp	r0, #0
   12f2c:	bne	12f54 <main@@Base+0x6b0>
   12f30:	str	r6, [sp]
   12f34:	str	r5, [sp, #4]
   12f38:	mov	r0, r4
   12f3c:	mov	r1, #1
   12f40:	mov	r2, #0
   12f44:	mov	r3, #1
   12f48:	bl	16f80 <flatcc_verify_vector_field@@Base>
   12f4c:	cmp	r0, #0
   12f50:	beq	12f5c <main@@Base+0x6b8>
   12f54:	sub	sp, fp, #16
   12f58:	pop	{r4, r5, r6, sl, fp, pc}
   12f5c:	movw	r0, #10776	; 0x2a18
   12f60:	movt	r0, #1
   12f64:	mov	r1, #1
   12f68:	str	r1, [sp]
   12f6c:	str	r0, [sp, #4]
   12f70:	mov	r0, r4
   12f74:	mov	r1, #2
   12f78:	mov	r2, #0
   12f7c:	mov	r3, #0
   12f80:	bl	178a4 <flatcc_verify_table_as_nested_root@@Base>
   12f84:	sub	sp, fp, #16
   12f88:	pop	{r4, r5, r6, sl, fp, pc}
   12f8c:	push	{r4, sl, fp, lr}
   12f90:	add	fp, sp, #8
   12f94:	mov	r4, r0
   12f98:	mov	r1, #0
   12f9c:	mov	r2, #1
   12fa0:	mov	r3, #1
   12fa4:	bl	16dc0 <flatcc_verify_field@@Base>
   12fa8:	cmp	r0, #0
   12fac:	bne	12fe8 <main@@Base+0x744>
   12fb0:	mov	r0, r4
   12fb4:	mov	r1, #1
   12fb8:	mov	r2, #1
   12fbc:	mov	r3, #1
   12fc0:	bl	16dc0 <flatcc_verify_field@@Base>
   12fc4:	cmp	r0, #0
   12fc8:	popne	{r4, sl, fp, pc}
   12fcc:	mov	r0, r4
   12fd0:	mov	r1, #2
   12fd4:	mov	r2, #1
   12fd8:	mov	r3, #1
   12fdc:	bl	16dc0 <flatcc_verify_field@@Base>
   12fe0:	cmp	r0, #0
   12fe4:	beq	12fec <main@@Base+0x748>
   12fe8:	pop	{r4, sl, fp, pc}
   12fec:	mov	r0, r4
   12ff0:	mov	r1, #3
   12ff4:	mov	r2, #1
   12ff8:	mov	r3, #1
   12ffc:	pop	{r4, sl, fp, lr}
   13000:	b	16dc0 <flatcc_verify_field@@Base>
   13004:	mov	r0, #0
   13008:	bx	lr
   1300c:	push	{r4, sl, fp, lr}
   13010:	add	fp, sp, #8
   13014:	mov	r4, r0
   13018:	movw	r3, #12404	; 0x3074
   1301c:	movt	r3, #1
   13020:	mov	r1, #0
   13024:	mov	r2, #0
   13028:	bl	1717c <flatcc_verify_table_field@@Base>
   1302c:	cmp	r0, #0
   13030:	popne	{r4, sl, fp, pc}
   13034:	movw	r3, #12508	; 0x30dc
   13038:	movt	r3, #1
   1303c:	mov	r0, r4
   13040:	mov	r1, #1
   13044:	mov	r2, #0
   13048:	bl	1717c <flatcc_verify_table_field@@Base>
   1304c:	cmp	r0, #0
   13050:	beq	13058 <main@@Base+0x7b4>
   13054:	pop	{r4, sl, fp, pc}
   13058:	movw	r3, #11884	; 0x2e6c
   1305c:	movt	r3, #1
   13060:	mov	r0, r4
   13064:	mov	r1, #3
   13068:	mov	r2, #0
   1306c:	pop	{r4, sl, fp, lr}
   13070:	b	17b18 <flatcc_verify_union_vector_field@@Base>
   13074:	push	{r4, sl, fp, lr}
   13078:	add	fp, sp, #8
   1307c:	mov	r4, r0
   13080:	movw	r3, #12676	; 0x3184
   13084:	movt	r3, #1
   13088:	mov	r1, #0
   1308c:	mov	r2, #0
   13090:	bl	1717c <flatcc_verify_table_field@@Base>
   13094:	cmp	r0, #0
   13098:	popne	{r4, sl, fp, pc}
   1309c:	movw	r3, #12924	; 0x327c
   130a0:	movt	r3, #1
   130a4:	mov	r0, r4
   130a8:	mov	r1, #1
   130ac:	mov	r2, #0
   130b0:	bl	1717c <flatcc_verify_table_field@@Base>
   130b4:	cmp	r0, #0
   130b8:	beq	130c0 <main@@Base+0x81c>
   130bc:	pop	{r4, sl, fp, pc}
   130c0:	movw	r3, #12984	; 0x32b8
   130c4:	movt	r3, #1
   130c8:	mov	r0, r4
   130cc:	mov	r1, #2
   130d0:	mov	r2, #0
   130d4:	pop	{r4, sl, fp, lr}
   130d8:	b	1717c <flatcc_verify_table_field@@Base>
   130dc:	push	{r4, sl, fp, lr}
   130e0:	add	fp, sp, #8
   130e4:	mov	r4, r0
   130e8:	movw	r3, #13044	; 0x32f4
   130ec:	movt	r3, #1
   130f0:	mov	r1, #1
   130f4:	mov	r2, #0
   130f8:	bl	179ac <flatcc_verify_union_field@@Base>
   130fc:	cmp	r0, #0
   13100:	bne	13164 <main@@Base+0x8c0>
   13104:	movw	r3, #13044	; 0x32f4
   13108:	movt	r3, #1
   1310c:	mov	r0, r4
   13110:	mov	r1, #3
   13114:	mov	r2, #0
   13118:	bl	179ac <flatcc_verify_union_field@@Base>
   1311c:	cmp	r0, #0
   13120:	bne	13164 <main@@Base+0x8c0>
   13124:	movw	r3, #13044	; 0x32f4
   13128:	movt	r3, #1
   1312c:	mov	r0, r4
   13130:	mov	r1, #5
   13134:	mov	r2, #0
   13138:	bl	179ac <flatcc_verify_union_field@@Base>
   1313c:	cmp	r0, #0
   13140:	popne	{r4, sl, fp, pc}
   13144:	movw	r3, #13044	; 0x32f4
   13148:	movt	r3, #1
   1314c:	mov	r0, r4
   13150:	mov	r1, #7
   13154:	mov	r2, #0
   13158:	bl	179ac <flatcc_verify_union_field@@Base>
   1315c:	cmp	r0, #0
   13160:	beq	13168 <main@@Base+0x8c4>
   13164:	pop	{r4, sl, fp, pc}
   13168:	movw	r3, #13044	; 0x32f4
   1316c:	movt	r3, #1
   13170:	mov	r0, r4
   13174:	mov	r1, #9
   13178:	mov	r2, #0
   1317c:	pop	{r4, sl, fp, lr}
   13180:	b	17b18 <flatcc_verify_union_vector_field@@Base>
   13184:	push	{r4, sl, fp, lr}
   13188:	add	fp, sp, #8
   1318c:	mov	r4, r0
   13190:	mov	r1, #0
   13194:	mov	r2, #0
   13198:	bl	16e2c <flatcc_verify_string_field@@Base>
   1319c:	cmp	r0, #0
   131a0:	bne	13260 <main@@Base+0x9bc>
   131a4:	mov	r0, r4
   131a8:	mov	r1, #1
   131ac:	mov	r2, #4
   131b0:	mov	r3, #4
   131b4:	bl	16dc0 <flatcc_verify_field@@Base>
   131b8:	cmp	r0, #0
   131bc:	bne	13260 <main@@Base+0x9bc>
   131c0:	mov	r0, r4
   131c4:	mov	r1, #2
   131c8:	mov	r2, #0
   131cc:	bl	16e2c <flatcc_verify_string_field@@Base>
   131d0:	cmp	r0, #0
   131d4:	bne	13260 <main@@Base+0x9bc>
   131d8:	mov	r0, r4
   131dc:	mov	r1, #3
   131e0:	mov	r2, #8
   131e4:	mov	r3, #8
   131e8:	bl	16dc0 <flatcc_verify_field@@Base>
   131ec:	cmp	r0, #0
   131f0:	bne	13260 <main@@Base+0x9bc>
   131f4:	mov	r0, r4
   131f8:	mov	r1, #4
   131fc:	mov	r2, #0
   13200:	bl	16e2c <flatcc_verify_string_field@@Base>
   13204:	cmp	r0, #0
   13208:	bne	13260 <main@@Base+0x9bc>
   1320c:	mov	r0, r4
   13210:	mov	r1, #5
   13214:	mov	r2, #8
   13218:	mov	r3, #8
   1321c:	bl	16dc0 <flatcc_verify_field@@Base>
   13220:	cmp	r0, #0
   13224:	bne	13260 <main@@Base+0x9bc>
   13228:	mov	r0, r4
   1322c:	mov	r1, #6
   13230:	mov	r2, #4
   13234:	mov	r3, #4
   13238:	bl	16dc0 <flatcc_verify_field@@Base>
   1323c:	cmp	r0, #0
   13240:	popne	{r4, sl, fp, pc}
   13244:	mov	r0, r4
   13248:	mov	r1, #7
   1324c:	mov	r2, #8
   13250:	mov	r3, #8
   13254:	bl	16dc0 <flatcc_verify_field@@Base>
   13258:	cmp	r0, #0
   1325c:	beq	13264 <main@@Base+0x9c0>
   13260:	pop	{r4, sl, fp, pc}
   13264:	mov	r0, r4
   13268:	mov	r1, #8
   1326c:	mov	r2, #4
   13270:	mov	r3, #4
   13274:	pop	{r4, sl, fp, lr}
   13278:	b	16dc0 <flatcc_verify_field@@Base>
   1327c:	push	{r4, sl, fp, lr}
   13280:	add	fp, sp, #8
   13284:	mov	r4, r0
   13288:	mov	r1, #0
   1328c:	mov	r2, #8
   13290:	mov	r3, #8
   13294:	bl	16dc0 <flatcc_verify_field@@Base>
   13298:	cmp	r0, #0
   1329c:	popne	{r4, sl, fp, pc}
   132a0:	mov	r0, r4
   132a4:	mov	r1, #1
   132a8:	mov	r2, #4
   132ac:	mov	r3, #4
   132b0:	pop	{r4, sl, fp, lr}
   132b4:	b	16dc0 <flatcc_verify_field@@Base>
   132b8:	push	{r4, sl, fp, lr}
   132bc:	add	fp, sp, #8
   132c0:	mov	r4, r0
   132c4:	mov	r1, #0
   132c8:	mov	r2, #8
   132cc:	mov	r3, #8
   132d0:	bl	16dc0 <flatcc_verify_field@@Base>
   132d4:	cmp	r0, #0
   132d8:	popne	{r4, sl, fp, pc}
   132dc:	mov	r0, r4
   132e0:	mov	r1, #1
   132e4:	mov	r2, #4
   132e8:	mov	r3, #4
   132ec:	pop	{r4, sl, fp, lr}
   132f0:	b	16dc0 <flatcc_verify_field@@Base>
   132f4:	ldrb	r2, [r0, #12]
   132f8:	sub	r1, r2, #2
   132fc:	cmp	r1, #9
   13300:	bhi	13340 <main@@Base+0xa9c>
   13304:	add	r2, pc, #0
   13308:	ldr	pc, [r2, r1, lsl #2]
   1330c:	andeq	r3, r1, r4, asr r3
   13310:	andeq	r3, r1, ip, asr #6
   13314:	andeq	r3, r1, ip, asr #6
   13318:	andeq	r3, r1, ip, asr #6
   1331c:	andeq	r3, r1, ip, asr #6
   13320:	andeq	r3, r1, ip, asr #6
   13324:	andeq	r3, r1, r0, ror #6
   13328:	andeq	r3, r1, r4, lsr r3
   1332c:	andeq	r3, r1, r4, lsr r3
   13330:	andeq	r3, r1, r8, asr #6
   13334:	mov	r1, #4
   13338:	mov	r2, #4
   1333c:	b	17484 <flatcc_verify_union_struct@@Base>
   13340:	cmp	r2, #255	; 0xff
   13344:	bne	1334c <main@@Base+0xaa8>
   13348:	b	17504 <flatcc_verify_union_string@@Base>
   1334c:	mov	r0, #0
   13350:	bx	lr
   13354:	movw	r1, #13164	; 0x336c
   13358:	movt	r1, #1
   1335c:	b	17450 <flatcc_verify_union_table@@Base>
   13360:	mov	r1, #2
   13364:	mov	r2, #2
   13368:	b	17484 <flatcc_verify_union_struct@@Base>
   1336c:	mov	r1, #0
   13370:	mov	r2, #4
   13374:	mov	r3, #4
   13378:	b	16dc0 <flatcc_verify_field@@Base>

0001337c <flatcc_builder_default_alloc@@Base>:
   1337c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13380:	add	fp, sp, #24
   13384:	mov	r4, r1
   13388:	cmp	r2, #0
   1338c:	beq	133d4 <flatcc_builder_default_alloc@@Base+0x58>
   13390:	mov	r8, r3
   13394:	ldr	r0, [fp, #8]
   13398:	sub	r1, r0, #1
   1339c:	cmp	r1, #6
   133a0:	bhi	13400 <flatcc_builder_default_alloc@@Base+0x84>
   133a4:	mov	r0, #256	; 0x100
   133a8:	add	r3, pc, #0
   133ac:	ldr	pc, [r3, r1, lsl #2]
   133b0:	andeq	r3, r1, r4, lsl r4
   133b4:	andeq	r3, r1, r0, lsl #8
   133b8:	andeq	r3, r1, r0, lsl #8
   133bc:	andeq	r3, r1, ip, asr #7
   133c0:	andeq	r3, r1, r8, lsl #8
   133c4:	andeq	r3, r1, r0, lsl #8
   133c8:	andeq	r3, r1, r0, lsl r4
   133cc:	mov	r0, #288	; 0x120
   133d0:	b	13414 <flatcc_builder_default_alloc@@Base+0x98>
   133d4:	ldr	r0, [r4]
   133d8:	cmp	r0, #0
   133dc:	moveq	r6, #0
   133e0:	moveq	r0, r6
   133e4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   133e8:	bl	1270c <free@plt>
   133ec:	mov	r6, #0
   133f0:	str	r6, [r4]
   133f4:	str	r6, [r4, #4]
   133f8:	mov	r0, r6
   133fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13400:	mov	r0, #32
   13404:	b	13414 <flatcc_builder_default_alloc@@Base+0x98>
   13408:	mov	r0, r2
   1340c:	b	13414 <flatcc_builder_default_alloc@@Base+0x98>
   13410:	mov	r0, #64	; 0x40
   13414:	mov	r7, r0
   13418:	lsl	r0, r0, #1
   1341c:	cmp	r7, r2
   13420:	bcc	13414 <flatcc_builder_default_alloc@@Base+0x98>
   13424:	ldr	r0, [r4, #4]
   13428:	mov	r6, #0
   1342c:	cmp	r0, r2
   13430:	lsrcs	r0, r0, #1
   13434:	cmpcs	r0, r7
   13438:	bcs	13470 <flatcc_builder_default_alloc@@Base+0xf4>
   1343c:	ldr	r0, [r4]
   13440:	mov	r1, r7
   13444:	bl	12730 <realloc@plt>
   13448:	cmp	r0, #0
   1344c:	mvneq	r6, #0
   13450:	moveq	r0, r6
   13454:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13458:	mov	r5, r0
   1345c:	cmp	r8, #0
   13460:	ldrne	r1, [r4, #4]
   13464:	cmpne	r7, r1
   13468:	bhi	13478 <flatcc_builder_default_alloc@@Base+0xfc>
   1346c:	stm	r4, {r5, r7}
   13470:	mov	r0, r6
   13474:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13478:	add	r0, r5, r1
   1347c:	sub	r2, r7, r1
   13480:	mov	r1, #0
   13484:	bl	12778 <memset@plt>
   13488:	b	1346c <flatcc_builder_default_alloc@@Base+0xf0>

0001348c <flatcc_builder_flush_vtable_cache@@Base>:
   1348c:	push	{r4, r5, fp, lr}
   13490:	add	fp, sp, #8
   13494:	mov	r4, r0
   13498:	ldr	r0, [r0, #116]	; 0x74
   1349c:	cmp	r0, #0
   134a0:	popeq	{r4, r5, fp, pc}
   134a4:	ldr	r0, [r4, #92]	; 0x5c
   134a8:	ldr	r2, [r4, #96]	; 0x60
   134ac:	mov	r5, #0
   134b0:	mov	r1, #0
   134b4:	bl	12778 <memset@plt>
   134b8:	mov	r0, #16
   134bc:	str	r5, [r4, #120]	; 0x78
   134c0:	str	r0, [r4, #124]	; 0x7c
   134c4:	pop	{r4, r5, fp, pc}

000134c8 <flatcc_builder_custom_init@@Base>:
   134c8:	push	{r4, r5, r6, r7, fp, lr}
   134cc:	add	fp, sp, #16
   134d0:	mov	r5, r3
   134d4:	mov	r6, r2
   134d8:	mov	r7, r1
   134dc:	mov	r4, r0
   134e0:	mov	r1, #0
   134e4:	mov	r2, #232	; 0xe8
   134e8:	bl	12778 <memset@plt>
   134ec:	ldr	r0, [fp, #8]
   134f0:	cmp	r7, #0
   134f4:	bne	1350c <flatcc_builder_custom_init@@Base+0x44>
   134f8:	mov	r1, #1
   134fc:	str	r1, [r4, #184]	; 0xb8
   13500:	add	r6, r4, #188	; 0xbc
   13504:	movw	r7, #26784	; 0x68a0
   13508:	movt	r7, #1
   1350c:	movw	r1, #13180	; 0x337c
   13510:	movt	r1, #1
   13514:	cmp	r5, #0
   13518:	movne	r1, r5
   1351c:	str	r6, [r4, #36]	; 0x24
   13520:	str	r0, [r4, #40]	; 0x28
   13524:	str	r7, [r4, #44]	; 0x2c
   13528:	str	r1, [r4, #48]	; 0x30
   1352c:	mov	r0, #0
   13530:	pop	{r4, r5, r6, r7, fp, pc}

00013534 <flatcc_builder_init@@Base>:
   13534:	push	{fp, lr}
   13538:	mov	fp, sp
   1353c:	sub	sp, sp, #8
   13540:	mov	r1, #0
   13544:	str	r1, [sp]
   13548:	mov	r1, #0
   1354c:	mov	r2, #0
   13550:	mov	r3, #0
   13554:	bl	134c8 <flatcc_builder_custom_init@@Base>
   13558:	mov	r0, #0
   1355c:	mov	sp, fp
   13560:	pop	{fp, pc}

00013564 <flatcc_builder_custom_reset@@Base>:
   13564:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13568:	add	fp, sp, #24
   1356c:	sub	sp, sp, #8
   13570:	mov	r9, r2
   13574:	mov	r8, r1
   13578:	mov	r4, r0
   1357c:	add	r7, r0, #52	; 0x34
   13580:	mov	r5, #0
   13584:	ldr	r0, [r7]
   13588:	cmp	r0, #0
   1358c:	beq	135d0 <flatcc_builder_custom_reset@@Base+0x6c>
   13590:	cmp	r9, #0
   13594:	cmpne	r5, #5
   13598:	beq	135c0 <flatcc_builder_custom_reset@@Base+0x5c>
   1359c:	ldr	r0, [r4, #40]	; 0x28
   135a0:	ldr	r6, [r4, #48]	; 0x30
   135a4:	str	r5, [sp]
   135a8:	mov	r1, r7
   135ac:	mov	r2, #1
   135b0:	mov	r3, #1
   135b4:	blx	r6
   135b8:	cmp	r0, #0
   135bc:	bne	13670 <flatcc_builder_custom_reset@@Base+0x10c>
   135c0:	ldm	r7, {r0, r2}
   135c4:	mov	r1, #0
   135c8:	bl	12778 <memset@plt>
   135cc:	b	135dc <flatcc_builder_custom_reset@@Base+0x78>
   135d0:	ldr	r0, [r7, #4]
   135d4:	cmp	r0, #0
   135d8:	bne	13680 <flatcc_builder_custom_reset@@Base+0x11c>
   135dc:	add	r7, r7, #8
   135e0:	add	r5, r5, #1
   135e4:	cmp	r5, #8
   135e8:	bcc	13584 <flatcc_builder_custom_reset@@Base+0x20>
   135ec:	mov	r0, #0
   135f0:	str	r0, [r4, #120]	; 0x78
   135f4:	ldr	r1, [r4, #124]	; 0x7c
   135f8:	cmp	r1, #0
   135fc:	movne	r1, #16
   13600:	strne	r1, [r4, #124]	; 0x7c
   13604:	vmov.i32	q8, #0	; 0x00000000
   13608:	strh	r0, [r4, #128]	; 0x80
   1360c:	str	r0, [r4, #136]	; 0x88
   13610:	str	r0, [r4, #140]	; 0x8c
   13614:	str	r0, [r4, #32]
   13618:	add	r1, r4, #148	; 0x94
   1361c:	vst1.32	{d16-d17}, [r1]
   13620:	ldr	r1, [r4, #52]	; 0x34
   13624:	ldr	r2, [r4, #60]	; 0x3c
   13628:	ldr	r3, [r4, #76]	; 0x4c
   1362c:	str	r2, [r4, #16]
   13630:	str	r0, [r4, #20]
   13634:	str	r0, [r4, #24]
   13638:	str	r3, [r4]
   1363c:	str	r1, [r4, #4]
   13640:	cmp	r8, #0
   13644:	movne	r0, #0
   13648:	strne	r0, [r4, #172]	; 0xac
   1364c:	strne	r0, [r4, #176]	; 0xb0
   13650:	strne	r0, [r4, #180]	; 0xb4
   13654:	ldr	r0, [r4, #184]	; 0xb8
   13658:	mov	r5, #0
   1365c:	cmp	r0, #0
   13660:	beq	13674 <flatcc_builder_custom_reset@@Base+0x110>
   13664:	add	r0, r4, #188	; 0xbc
   13668:	bl	16780 <flatcc_emitter_reset@@Base>
   1366c:	b	13674 <flatcc_builder_custom_reset@@Base+0x110>
   13670:	mvn	r5, #0
   13674:	mov	r0, r5
   13678:	sub	sp, fp, #24
   1367c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13680:	movw	r0, #33340	; 0x823c
   13684:	movt	r0, #1
   13688:	movw	r1, #33358	; 0x824e
   1368c:	movt	r1, #1
   13690:	movw	r3, #33428	; 0x8294
   13694:	movt	r3, #1
   13698:	movw	r2, #434	; 0x1b2
   1369c:	bl	127a8 <__assert_fail@plt>

000136a0 <flatcc_builder_reset@@Base>:
   136a0:	mov	r1, #0
   136a4:	mov	r2, #0
   136a8:	b	13564 <flatcc_builder_custom_reset@@Base>

000136ac <flatcc_builder_clear@@Base>:
   136ac:	push	{r4, r5, r6, r7, fp, lr}
   136b0:	add	fp, sp, #16
   136b4:	sub	sp, sp, #8
   136b8:	mov	r7, r0
   136bc:	add	r5, r0, #52	; 0x34
   136c0:	mov	r6, #0
   136c4:	ldr	r0, [r7, #40]	; 0x28
   136c8:	ldr	r4, [r7, #48]	; 0x30
   136cc:	str	r6, [sp]
   136d0:	mov	r1, r5
   136d4:	mov	r2, #0
   136d8:	mov	r3, #0
   136dc:	blx	r4
   136e0:	add	r5, r5, #8
   136e4:	add	r6, r6, #1
   136e8:	cmp	r6, #8
   136ec:	bne	136c4 <flatcc_builder_clear@@Base+0x18>
   136f0:	ldr	r0, [r7, #184]	; 0xb8
   136f4:	cmp	r0, #0
   136f8:	beq	13704 <flatcc_builder_clear@@Base+0x58>
   136fc:	add	r0, r7, #188	; 0xbc
   13700:	bl	1683c <flatcc_emitter_clear@@Base>
   13704:	mov	r0, r7
   13708:	mov	r1, #0
   1370c:	mov	r2, #232	; 0xe8
   13710:	sub	sp, fp, #16
   13714:	pop	{r4, r5, r6, r7, fp, lr}
   13718:	b	12778 <memset@plt>

0001371c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1371c:	push	{r4, r5, r6, r7, fp, lr}
   13720:	add	fp, sp, #16
   13724:	sub	sp, sp, #8
   13728:	mov	r4, r0
   1372c:	ldr	r2, [r0, #228]	; 0xe4
   13730:	mov	r7, #0
   13734:	str	r7, [sp]
   13738:	add	r0, r1, #7
   1373c:	bic	r5, r0, #3
   13740:	mov	r0, r4
   13744:	mov	r1, #7
   13748:	mov	r3, r5
   1374c:	bl	13794 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13750:	cmp	r0, #0
   13754:	beq	13788 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   13758:	mov	r6, r0
   1375c:	mov	r1, #0
   13760:	mov	r2, r5
   13764:	bl	12778 <memset@plt>
   13768:	ldr	r0, [r4, #224]	; 0xe0
   1376c:	str	r0, [r6], #4
   13770:	ldr	r0, [r4, #228]	; 0xe4
   13774:	add	r1, r0, #4
   13778:	add	r0, r0, r5
   1377c:	str	r1, [r4, #224]	; 0xe0
   13780:	str	r0, [r4, #228]	; 0xe4
   13784:	mov	r7, r6
   13788:	mov	r0, r7
   1378c:	sub	sp, fp, #16
   13790:	pop	{r4, r5, r6, r7, fp, pc}
   13794:	push	{r4, r5, fp, lr}
   13798:	add	fp, sp, #8
   1379c:	sub	sp, sp, #8
   137a0:	mov	r4, r2
   137a4:	add	r2, r3, r2
   137a8:	add	r3, r0, r1, lsl #3
   137ac:	add	r5, r3, #52	; 0x34
   137b0:	ldr	r3, [r3, #56]	; 0x38
   137b4:	cmp	r2, r3
   137b8:	bls	137e0 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   137bc:	ldr	r3, [fp, #8]
   137c0:	ldr	ip, [r0, #40]	; 0x28
   137c4:	ldr	lr, [r0, #48]	; 0x30
   137c8:	str	r1, [sp]
   137cc:	mov	r0, ip
   137d0:	mov	r1, r5
   137d4:	blx	lr
   137d8:	cmp	r0, #0
   137dc:	bne	137f0 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   137e0:	ldr	r0, [r5]
   137e4:	add	r0, r0, r4
   137e8:	sub	sp, fp, #8
   137ec:	pop	{r4, r5, fp, pc}
   137f0:	movw	r0, #37876	; 0x93f4
   137f4:	movt	r0, #1
   137f8:	movw	r1, #33358	; 0x824e
   137fc:	movt	r1, #1
   13800:	movw	r3, #37422	; 0x922e
   13804:	movt	r3, #1
   13808:	mov	r2, #308	; 0x134
   1380c:	bl	127a8 <__assert_fail@plt>

00013810 <flatcc_builder_enter_user_frame@@Base>:
   13810:	push	{r4, r5, r6, r7, fp, lr}
   13814:	add	fp, sp, #16
   13818:	sub	sp, sp, #8
   1381c:	mov	r4, r0
   13820:	ldr	r2, [r0, #228]	; 0xe4
   13824:	mov	r6, #0
   13828:	str	r6, [sp]
   1382c:	add	r0, r1, #7
   13830:	bic	r5, r0, #3
   13834:	mov	r0, r4
   13838:	mov	r1, #7
   1383c:	mov	r3, r5
   13840:	bl	13794 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13844:	cmp	r0, #0
   13848:	beq	13878 <flatcc_builder_enter_user_frame@@Base+0x68>
   1384c:	mov	r7, r0
   13850:	mov	r1, #0
   13854:	mov	r2, r5
   13858:	bl	12778 <memset@plt>
   1385c:	ldr	r0, [r4, #224]	; 0xe0
   13860:	str	r0, [r7]
   13864:	ldr	r0, [r4, #228]	; 0xe4
   13868:	add	r6, r0, #4
   1386c:	add	r0, r0, r5
   13870:	str	r6, [r4, #224]	; 0xe0
   13874:	str	r0, [r4, #228]	; 0xe4
   13878:	mov	r0, r6
   1387c:	sub	sp, fp, #16
   13880:	pop	{r4, r5, r6, r7, fp, pc}

00013884 <flatcc_builder_exit_user_frame@@Base>:
   13884:	ldr	r1, [r0, #224]	; 0xe0
   13888:	cmp	r1, #0
   1388c:	subne	r2, r1, #4
   13890:	strne	r2, [r0, #228]	; 0xe4
   13894:	ldrne	r2, [r0, #108]	; 0x6c
   13898:	addne	r1, r2, r1
   1389c:	ldrne	r1, [r1, #-4]
   138a0:	strne	r1, [r0, #224]	; 0xe0
   138a4:	movne	r0, r1
   138a8:	bxne	lr
   138ac:	push	{fp, lr}
   138b0:	mov	fp, sp
   138b4:	movw	r0, #33490	; 0x82d2
   138b8:	movt	r0, #1
   138bc:	movw	r1, #33358	; 0x824e
   138c0:	movt	r1, #1
   138c4:	movw	r3, #33515	; 0x82eb
   138c8:	movt	r3, #1
   138cc:	movw	r2, #542	; 0x21e
   138d0:	bl	127a8 <__assert_fail@plt>

000138d4 <flatcc_builder_exit_user_frame_at@@Base>:
   138d4:	ldr	r2, [r0, #224]	; 0xe0
   138d8:	cmp	r2, r1
   138dc:	bcc	138e8 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   138e0:	str	r1, [r0, #224]	; 0xe0
   138e4:	b	13884 <flatcc_builder_exit_user_frame@@Base>
   138e8:	push	{fp, lr}
   138ec:	mov	fp, sp
   138f0:	movw	r0, #33573	; 0x8325
   138f4:	movt	r0, #1
   138f8:	movw	r1, #33358	; 0x824e
   138fc:	movt	r1, #1
   13900:	movw	r3, #33604	; 0x8344
   13904:	movt	r3, #1
   13908:	movw	r2, #551	; 0x227
   1390c:	bl	127a8 <__assert_fail@plt>

00013910 <flatcc_builder_get_current_user_frame@@Base>:
   13910:	ldr	r0, [r0, #224]	; 0xe0
   13914:	bx	lr

00013918 <flatcc_builder_get_user_frame_ptr@@Base>:
   13918:	ldr	r0, [r0, #108]	; 0x6c
   1391c:	add	r0, r0, r1
   13920:	bx	lr

00013924 <flatcc_builder_embed_buffer@@Base>:
   13924:	push	{r4, r5, r6, r7, fp, lr}
   13928:	add	fp, sp, #16
   1392c:	sub	sp, sp, #80	; 0x50
   13930:	mov	r5, r3
   13934:	mov	r6, r2
   13938:	mov	r2, r1
   1393c:	mov	r4, r0
   13940:	ldr	r0, [fp, #8]
   13944:	strh	r0, [fp, #-18]	; 0xffffffee
   13948:	ldr	r3, [r4, #152]	; 0x98
   1394c:	cmp	r3, #0
   13950:	movwne	r3, #1
   13954:	sub	r1, fp, #18
   13958:	mov	r0, r4
   1395c:	bl	13a30 <flatcc_builder_embed_buffer@@Base+0x10c>
   13960:	ldr	r0, [fp, #12]
   13964:	and	r0, r0, #2
   13968:	add	r1, r5, r0, lsl #1
   1396c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   13970:	mov	r0, r4
   13974:	bl	13aec <flatcc_builder_embed_buffer@@Base+0x1c8>
   13978:	mov	r7, r0
   1397c:	add	r0, r0, r5
   13980:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   13984:	mov	r1, #0
   13988:	str	r1, [sp]
   1398c:	str	r0, [fp, #-24]	; 0xffffffe8
   13990:	str	r1, [sp, #4]
   13994:	ldr	r0, [r4, #152]	; 0x98
   13998:	cmp	r0, #0
   1399c:	beq	139bc <flatcc_builder_embed_buffer@@Base+0x98>
   139a0:	sub	r0, fp, #24
   139a4:	str	r0, [sp, #8]
   139a8:	mov	r0, #4
   139ac:	str	r0, [sp]
   139b0:	str	r0, [sp, #12]
   139b4:	mov	r0, #1
   139b8:	str	r0, [sp, #4]
   139bc:	cmp	r5, #0
   139c0:	beq	139e8 <flatcc_builder_embed_buffer@@Base+0xc4>
   139c4:	ldm	sp, {r0, r1}
   139c8:	add	r0, r0, r5
   139cc:	str	r0, [sp]
   139d0:	mov	r0, sp
   139d4:	add	r0, r0, r1, lsl #3
   139d8:	str	r6, [r0, #8]
   139dc:	str	r5, [r0, #12]
   139e0:	add	r0, r1, #1
   139e4:	str	r0, [sp, #4]
   139e8:	cmp	r7, #0
   139ec:	beq	13a1c <flatcc_builder_embed_buffer@@Base+0xf8>
   139f0:	ldm	sp, {r0, r1}
   139f4:	add	r0, r0, r7
   139f8:	str	r0, [sp]
   139fc:	mov	r0, sp
   13a00:	add	r0, r0, r1, lsl #3
   13a04:	movw	r2, #32828	; 0x803c
   13a08:	movt	r2, #1
   13a0c:	str	r2, [r0, #8]
   13a10:	str	r7, [r0, #12]
   13a14:	add	r0, r1, #1
   13a18:	str	r0, [sp, #4]
   13a1c:	mov	r1, sp
   13a20:	mov	r0, r4
   13a24:	bl	13b04 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13a28:	sub	sp, fp, #16
   13a2c:	pop	{r4, r5, r6, r7, fp, pc}
   13a30:	push	{r4, r5, r6, r7, fp, lr}
   13a34:	add	fp, sp, #16
   13a38:	sub	sp, sp, #72	; 0x48
   13a3c:	mov	r6, r3
   13a40:	mov	r5, r2
   13a44:	mov	r7, r1
   13a48:	mov	r4, r0
   13a4c:	cmp	r2, #0
   13a50:	bne	13a60 <flatcc_builder_embed_buffer@@Base+0x13c>
   13a54:	ldrh	r5, [r4, #132]	; 0x84
   13a58:	cmp	r5, #0
   13a5c:	movweq	r5, #1
   13a60:	mov	r0, r7
   13a64:	mov	r1, #4
   13a68:	bl	148d8 <flatcc_builder_start_vector@@Base+0x80>
   13a6c:	mov	r0, r7
   13a70:	mov	r1, r5
   13a74:	bl	148d8 <flatcc_builder_start_vector@@Base+0x80>
   13a78:	cmp	r6, #0
   13a7c:	bne	13ac4 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13a80:	mov	r0, r4
   13a84:	mov	r1, r5
   13a88:	bl	165d4 <flatcc_builder_get_emit_context@@Base+0x8>
   13a8c:	cmp	r0, #0
   13a90:	beq	13ac4 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13a94:	movw	r1, #32828	; 0x803c
   13a98:	movt	r1, #1
   13a9c:	str	r1, [sp, #8]
   13aa0:	str	r0, [sp]
   13aa4:	str	r0, [sp, #12]
   13aa8:	mov	r0, #1
   13aac:	str	r0, [sp, #4]
   13ab0:	mov	r1, sp
   13ab4:	mov	r0, r4
   13ab8:	bl	14c64 <flatcc_builder_create_vtable@@Base+0x80>
   13abc:	cmp	r0, #0
   13ac0:	beq	13acc <flatcc_builder_embed_buffer@@Base+0x1a8>
   13ac4:	sub	sp, fp, #16
   13ac8:	pop	{r4, r5, r6, r7, fp, pc}
   13acc:	movw	r0, #37876	; 0x93f4
   13ad0:	movt	r0, #1
   13ad4:	movw	r1, #33358	; 0x824e
   13ad8:	movt	r1, #1
   13adc:	movw	r3, #37489	; 0x9271
   13ae0:	movt	r3, #1
   13ae4:	movw	r2, #702	; 0x2be
   13ae8:	bl	127a8 <__assert_fail@plt>
   13aec:	ldr	r0, [r0, #136]	; 0x88
   13af0:	sub	r0, r0, r1
   13af4:	sub	r1, r2, #1
   13af8:	and	r0, r0, r1
   13afc:	bx	lr
   13b00:	bx	lr
   13b04:	push	{r4, r5, fp, lr}
   13b08:	add	fp, sp, #8
   13b0c:	sub	sp, sp, #8
   13b10:	ldr	r3, [r1]
   13b14:	cmp	r3, #0
   13b18:	ble	13b78 <flatcc_builder_embed_buffer@@Base+0x254>
   13b1c:	mov	r4, r0
   13b20:	ldr	r0, [r0, #136]	; 0x88
   13b24:	sub	r5, r0, r3
   13b28:	ldr	r2, [r1, #4]
   13b2c:	ldr	r0, [r4, #36]	; 0x24
   13b30:	ldr	ip, [r4, #44]	; 0x2c
   13b34:	str	r3, [sp]
   13b38:	add	r1, r1, #8
   13b3c:	mov	r3, r5
   13b40:	blx	ip
   13b44:	cmp	r0, #0
   13b48:	streq	r5, [r4, #136]	; 0x88
   13b4c:	moveq	r0, r5
   13b50:	subeq	sp, fp, #8
   13b54:	popeq	{r4, r5, fp, pc}
   13b58:	movw	r0, #37876	; 0x93f4
   13b5c:	movt	r0, #1
   13b60:	movw	r1, #33358	; 0x824e
   13b64:	movt	r1, #1
   13b68:	movw	r3, #37555	; 0x92b3
   13b6c:	movt	r3, #1
   13b70:	movw	r2, #651	; 0x28b
   13b74:	bl	127a8 <__assert_fail@plt>
   13b78:	movw	r0, #37876	; 0x93f4
   13b7c:	movt	r0, #1
   13b80:	movw	r1, #33358	; 0x824e
   13b84:	movt	r1, #1
   13b88:	movw	r3, #37555	; 0x92b3
   13b8c:	movt	r3, #1
   13b90:	movw	r2, #647	; 0x287
   13b94:	bl	127a8 <__assert_fail@plt>

00013b98 <flatcc_builder_create_buffer@@Base>:
   13b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b9c:	add	fp, sp, #28
   13ba0:	sub	sp, sp, #92	; 0x5c
   13ba4:	mov	r6, r3
   13ba8:	mov	r7, r1
   13bac:	mov	r4, r0
   13bb0:	ldr	r0, [fp, #8]
   13bb4:	strh	r0, [fp, #-30]	; 0xffffffe2
   13bb8:	mov	r0, #0
   13bbc:	str	r0, [sp, #4]
   13bc0:	ldr	sl, [fp, #12]
   13bc4:	and	r9, sl, #1
   13bc8:	sub	r1, fp, #30
   13bcc:	mov	r0, r4
   13bd0:	mov	r3, r9
   13bd4:	bl	13a30 <flatcc_builder_embed_buffer@@Base+0x10c>
   13bd8:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   13bdc:	mov	r0, r4
   13be0:	mov	r1, r5
   13be4:	bl	13d68 <flatcc_builder_create_buffer@@Base+0x1d0>
   13be8:	cmp	r7, #0
   13bec:	str	r6, [sp]
   13bf0:	beq	13c0c <flatcc_builder_create_buffer@@Base+0x74>
   13bf4:	ldr	r7, [r7]
   13bf8:	mov	r0, r7
   13bfc:	bl	13d78 <flatcc_builder_create_buffer@@Base+0x1e0>
   13c00:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   13c04:	str	r7, [sp, #4]
   13c08:	b	13c10 <flatcc_builder_create_buffer@@Base+0x78>
   13c0c:	ldr	r7, [sp, #4]
   13c10:	mov	r8, #4
   13c14:	and	r0, r8, sl, lsl #1
   13c18:	cmp	r7, #0
   13c1c:	mov	r6, r7
   13c20:	movwne	r6, #1
   13c24:	add	r0, r0, r6, lsl #2
   13c28:	add	r1, r0, #4
   13c2c:	mov	r0, r4
   13c30:	mov	r2, r5
   13c34:	bl	13aec <flatcc_builder_embed_buffer@@Base+0x1c8>
   13c38:	mov	r1, #0
   13c3c:	str	r1, [sp, #8]
   13c40:	str	r1, [sp, #12]
   13c44:	ands	ip, sl, #3
   13c48:	beq	13c64 <flatcc_builder_create_buffer@@Base+0xcc>
   13c4c:	sub	r1, fp, #40	; 0x28
   13c50:	str	r1, [sp, #16]
   13c54:	str	r8, [sp, #8]
   13c58:	str	r8, [sp, #20]
   13c5c:	mov	r1, #1
   13c60:	str	r1, [sp, #12]
   13c64:	ldr	r1, [sp, #8]
   13c68:	ldr	r3, [sp, #12]
   13c6c:	add	r5, r1, #4
   13c70:	str	r5, [sp, #8]
   13c74:	add	lr, sp, #8
   13c78:	add	r1, lr, r3, lsl #3
   13c7c:	sub	r2, fp, #36	; 0x24
   13c80:	str	r2, [r1, #8]
   13c84:	str	r8, [r1, #12]
   13c88:	add	r1, r3, #1
   13c8c:	str	r1, [sp, #12]
   13c90:	cmp	r7, #0
   13c94:	beq	13cbc <flatcc_builder_create_buffer@@Base+0x124>
   13c98:	lsl	r2, r6, #2
   13c9c:	add	r5, r5, r2
   13ca0:	str	r5, [sp, #8]
   13ca4:	add	r1, lr, r1, lsl #3
   13ca8:	add	r5, sp, #4
   13cac:	str	r5, [r1, #8]
   13cb0:	str	r2, [r1, #12]
   13cb4:	add	r1, r3, #2
   13cb8:	str	r1, [sp, #12]
   13cbc:	cmp	r0, #0
   13cc0:	beq	13cf0 <flatcc_builder_create_buffer@@Base+0x158>
   13cc4:	ldr	r1, [sp, #8]
   13cc8:	ldr	r2, [sp, #12]
   13ccc:	add	r1, r1, r0
   13cd0:	str	r1, [sp, #8]
   13cd4:	add	r1, lr, r2, lsl #3
   13cd8:	movw	r3, #32828	; 0x803c
   13cdc:	movt	r3, #1
   13ce0:	str	r3, [r1, #8]
   13ce4:	str	r0, [r1, #12]
   13ce8:	add	r0, r2, #1
   13cec:	str	r0, [sp, #12]
   13cf0:	ldr	r0, [r4, #136]	; 0x88
   13cf4:	ldr	r1, [sp, #8]
   13cf8:	sub	r5, r0, r1
   13cfc:	cmp	ip, #0
   13d00:	addne	r5, r5, #4
   13d04:	mov	r0, #144	; 0x90
   13d08:	cmp	r9, #0
   13d0c:	movweq	r0, #140	; 0x8c
   13d10:	ldr	r0, [r4, r0]
   13d14:	sub	r0, r0, r5
   13d18:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   13d1c:	str	r0, [fp, #-40]	; 0xffffffd8
   13d20:	ldr	r0, [sp]
   13d24:	sub	r0, r0, r5
   13d28:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   13d2c:	str	r0, [fp, #-36]	; 0xffffffdc
   13d30:	add	r1, sp, #8
   13d34:	mov	r0, r4
   13d38:	bl	13b04 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13d3c:	cmp	r0, #0
   13d40:	subne	sp, fp, #28
   13d44:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d48:	movw	r0, #37876	; 0x93f4
   13d4c:	movt	r0, #1
   13d50:	movw	r1, #33358	; 0x824e
   13d54:	movt	r1, #1
   13d58:	movw	r3, #33673	; 0x8389
   13d5c:	movt	r3, #1
   13d60:	mov	r2, #772	; 0x304
   13d64:	bl	127a8 <__assert_fail@plt>
   13d68:	ldrh	r2, [r0, #128]	; 0x80
   13d6c:	cmp	r2, r1
   13d70:	strhcc	r1, [r0, #128]	; 0x80
   13d74:	bx	lr
   13d78:	bx	lr

00013d7c <flatcc_builder_create_struct@@Base>:
   13d7c:	push	{r4, r5, r6, r7, fp, lr}
   13d80:	add	fp, sp, #16
   13d84:	sub	sp, sp, #72	; 0x48
   13d88:	cmp	r3, #0
   13d8c:	beq	13e24 <flatcc_builder_create_struct@@Base+0xa8>
   13d90:	mov	r7, r3
   13d94:	mov	r5, r2
   13d98:	mov	r6, r1
   13d9c:	mov	r4, r0
   13da0:	mov	r1, r3
   13da4:	bl	13d68 <flatcc_builder_create_buffer@@Base+0x1d0>
   13da8:	mov	r0, r4
   13dac:	mov	r1, r5
   13db0:	mov	r2, r7
   13db4:	bl	13aec <flatcc_builder_embed_buffer@@Base+0x1c8>
   13db8:	mov	r1, #0
   13dbc:	str	r1, [sp]
   13dc0:	str	r1, [sp, #4]
   13dc4:	cmp	r5, #0
   13dc8:	strne	r6, [sp, #8]
   13dcc:	strne	r5, [sp]
   13dd0:	strne	r5, [sp, #12]
   13dd4:	movne	r1, #1
   13dd8:	strne	r1, [sp, #4]
   13ddc:	cmp	r0, #0
   13de0:	beq	13e10 <flatcc_builder_create_struct@@Base+0x94>
   13de4:	ldm	sp, {r1, r2}
   13de8:	add	r1, r1, r0
   13dec:	str	r1, [sp]
   13df0:	mov	r1, sp
   13df4:	add	r1, r1, r2, lsl #3
   13df8:	movw	r3, #32828	; 0x803c
   13dfc:	movt	r3, #1
   13e00:	str	r3, [r1, #8]
   13e04:	str	r0, [r1, #12]
   13e08:	add	r0, r2, #1
   13e0c:	str	r0, [sp, #4]
   13e10:	mov	r1, sp
   13e14:	mov	r0, r4
   13e18:	bl	13b04 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13e1c:	sub	sp, fp, #16
   13e20:	pop	{r4, r5, r6, r7, fp, pc}
   13e24:	movw	r0, #33804	; 0x840c
   13e28:	movt	r0, #1
   13e2c:	movw	r1, #33358	; 0x824e
   13e30:	movt	r1, #1
   13e34:	movw	r3, #33815	; 0x8417
   13e38:	movt	r3, #1
   13e3c:	movw	r2, #783	; 0x30f
   13e40:	bl	127a8 <__assert_fail@plt>

00013e44 <flatcc_builder_start_buffer@@Base>:
   13e44:	push	{r4, r5, r6, r7, fp, lr}
   13e48:	add	fp, sp, #16
   13e4c:	mov	r6, r3
   13e50:	mov	r7, r2
   13e54:	mov	r5, r1
   13e58:	mov	r4, r0
   13e5c:	ldrh	r1, [r0, #128]	; 0x80
   13e60:	bl	13f00 <flatcc_builder_start_buffer@@Base+0xbc>
   13e64:	mov	r1, r0
   13e68:	mvn	r0, #0
   13e6c:	cmp	r1, #0
   13e70:	popne	{r4, r5, r6, r7, fp, pc}
   13e74:	mov	r0, #1
   13e78:	strh	r0, [r4, #128]	; 0x80
   13e7c:	ldrh	r1, [r4, #132]	; 0x84
   13e80:	ldr	r2, [r4, #32]
   13e84:	strh	r1, [r2, #34]	; 0x22
   13e88:	strh	r7, [r4, #132]	; 0x84
   13e8c:	ldrh	r1, [r4, #164]	; 0xa4
   13e90:	ldr	r2, [r4, #32]
   13e94:	strh	r1, [r2, #32]
   13e98:	strh	r6, [r4, #164]	; 0xa4
   13e9c:	ldr	r1, [r4, #32]
   13ea0:	ldr	r2, [r4, #144]	; 0x90
   13ea4:	str	r2, [r1, #20]
   13ea8:	ldr	r1, [r4, #32]
   13eac:	ldr	r2, [r4, #152]	; 0x98
   13eb0:	str	r2, [r1, #28]
   13eb4:	ldr	r1, [r4, #32]
   13eb8:	ldr	r2, [r4, #136]	; 0x88
   13ebc:	ldr	r3, [r4, #148]	; 0x94
   13ec0:	ldr	r7, [r4, #168]	; 0xa8
   13ec4:	add	r6, r3, #1
   13ec8:	str	r2, [r4, #144]	; 0x90
   13ecc:	str	r6, [r4, #148]	; 0x94
   13ed0:	str	r3, [r4, #152]	; 0x98
   13ed4:	str	r7, [r1, #16]
   13ed8:	movw	r1, #32828	; 0x803c
   13edc:	movt	r1, #1
   13ee0:	cmp	r5, #0
   13ee4:	movne	r1, r5
   13ee8:	ldr	r1, [r1]
   13eec:	str	r1, [r4, #168]	; 0xa8
   13ef0:	ldr	r1, [r4, #32]
   13ef4:	strh	r0, [r1, #14]
   13ef8:	mov	r0, #0
   13efc:	pop	{r4, r5, r6, r7, fp, pc}
   13f00:	push	{r4, r5, r6, sl, fp, lr}
   13f04:	add	fp, sp, #16
   13f08:	sub	sp, sp, #8
   13f0c:	mov	r5, r1
   13f10:	mov	r4, r0
   13f14:	ldr	r1, [r0, #156]	; 0x9c
   13f18:	ldr	r2, [r0, #160]	; 0xa0
   13f1c:	add	r0, r1, #1
   13f20:	str	r0, [r4, #156]	; 0x9c
   13f24:	cmp	r1, r2
   13f28:	bge	13f3c <flatcc_builder_start_buffer@@Base+0xf8>
   13f2c:	ldr	r0, [r4, #32]
   13f30:	add	r0, r0, #36	; 0x24
   13f34:	str	r0, [r4, #32]
   13f38:	b	13fb0 <flatcc_builder_start_buffer@@Base+0x16c>
   13f3c:	ldr	r2, [r4, #176]	; 0xb0
   13f40:	mvn	r6, #0
   13f44:	cmp	r2, #1
   13f48:	cmpge	r1, r2
   13f4c:	bge	13fec <flatcc_builder_start_buffer@@Base+0x1a8>
   13f50:	mov	r1, #0
   13f54:	str	r1, [sp]
   13f58:	add	r0, r0, r0, lsl #3
   13f5c:	mvn	r1, #35	; 0x23
   13f60:	add	r2, r1, r0, lsl #2
   13f64:	mov	r0, r4
   13f68:	mov	r1, #4
   13f6c:	mov	r3, #36	; 0x24
   13f70:	bl	13794 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13f74:	str	r0, [r4, #32]
   13f78:	cmp	r0, #0
   13f7c:	beq	13fec <flatcc_builder_start_buffer@@Base+0x1a8>
   13f80:	ldr	r0, [r4, #88]	; 0x58
   13f84:	ldr	r1, [r4, #176]	; 0xb0
   13f88:	movw	r2, #36409	; 0x8e39
   13f8c:	movt	r2, #14563	; 0x38e3
   13f90:	umull	r0, r2, r0, r2
   13f94:	lsr	r0, r2, #3
   13f98:	cmp	r1, r2, lsr #3
   13f9c:	mov	r2, r0
   13fa0:	movlt	r2, r1
   13fa4:	cmp	r1, #0
   13fa8:	movle	r2, r0
   13fac:	str	r2, [r4, #160]	; 0xa0
   13fb0:	ldr	r0, [r4, #20]
   13fb4:	ldr	r1, [r4, #32]
   13fb8:	str	r0, [r1, #8]
   13fbc:	ldrh	r2, [r4, #130]	; 0x82
   13fc0:	strh	r2, [r1, #12]
   13fc4:	strh	r5, [r4, #130]	; 0x82
   13fc8:	ldr	r2, [r4, #28]
   13fcc:	mvn	r3, #3
   13fd0:	stm	r1, {r2, r3}
   13fd4:	mov	r6, #0
   13fd8:	str	r6, [r4, #20]
   13fdc:	add	r0, r0, r2
   13fe0:	add	r0, r0, #7
   13fe4:	bic	r0, r0, #7
   13fe8:	str	r0, [r4, #28]
   13fec:	mov	r0, r6
   13ff0:	sub	sp, fp, #16
   13ff4:	pop	{r4, r5, r6, sl, fp, pc}

00013ff8 <flatcc_builder_end_buffer@@Base>:
   13ff8:	push	{r4, r5, r6, r7, fp, lr}
   13ffc:	add	fp, sp, #16
   14000:	sub	sp, sp, #8
   14004:	mov	r4, r0
   14008:	ldr	r0, [r0, #32]
   1400c:	ldrh	r0, [r0, #14]
   14010:	cmp	r0, #1
   14014:	bne	140a0 <flatcc_builder_end_buffer@@Base+0xa8>
   14018:	mov	r5, r1
   1401c:	ldr	r6, [r4, #152]	; 0x98
   14020:	ldrh	r7, [r4, #164]	; 0xa4
   14024:	ldrh	r1, [r4, #132]	; 0x84
   14028:	mov	r0, r4
   1402c:	bl	13d68 <flatcc_builder_create_buffer@@Base+0x1d0>
   14030:	and	r0, r7, #2
   14034:	cmp	r6, #0
   14038:	orrne	r0, r0, #1
   1403c:	ldrh	r2, [r4, #132]	; 0x84
   14040:	ldrh	r1, [r4, #128]	; 0x80
   14044:	str	r1, [sp]
   14048:	str	r0, [sp, #4]
   1404c:	add	r1, r4, #168	; 0xa8
   14050:	mov	r0, r4
   14054:	mov	r3, r5
   14058:	bl	13b98 <flatcc_builder_create_buffer@@Base>
   1405c:	mov	r5, r0
   14060:	cmp	r0, #0
   14064:	beq	14094 <flatcc_builder_end_buffer@@Base+0x9c>
   14068:	ldr	r0, [r4, #32]
   1406c:	ldr	r1, [r0, #20]
   14070:	str	r1, [r4, #144]	; 0x90
   14074:	ldr	r1, [r0, #28]
   14078:	str	r1, [r4, #152]	; 0x98
   1407c:	ldr	r1, [r0, #16]
   14080:	str	r1, [r4, #168]	; 0xa8
   14084:	ldrh	r0, [r0, #32]
   14088:	strh	r0, [r4, #164]	; 0xa4
   1408c:	mov	r0, r4
   14090:	bl	140c0 <flatcc_builder_end_buffer@@Base+0xc8>
   14094:	mov	r0, r5
   14098:	sub	sp, fp, #16
   1409c:	pop	{r4, r5, r6, r7, fp, pc}
   140a0:	movw	r0, #33917	; 0x847d
   140a4:	movt	r0, #1
   140a8:	movw	r1, #33358	; 0x824e
   140ac:	movt	r1, #1
   140b0:	movw	r3, #33961	; 0x84a9
   140b4:	movt	r3, #1
   140b8:	movw	r2, #838	; 0x346
   140bc:	bl	127a8 <__assert_fail@plt>
   140c0:	push	{r4, sl, fp, lr}
   140c4:	add	fp, sp, #8
   140c8:	mov	r4, r0
   140cc:	ldr	r0, [r0, #16]
   140d0:	ldr	r2, [r4, #20]
   140d4:	mov	r1, #0
   140d8:	bl	12778 <memset@plt>
   140dc:	ldr	r0, [r4, #32]
   140e0:	ldr	r1, [r0, #8]
   140e4:	str	r1, [r4, #20]
   140e8:	ldr	r1, [r0]
   140ec:	str	r1, [r4, #28]
   140f0:	ldr	r1, [r0, #4]
   140f4:	mov	r0, r4
   140f8:	bl	14178 <flatcc_builder_start_struct@@Base+0x4c>
   140fc:	ldrh	r1, [r4, #130]	; 0x82
   14100:	mov	r0, r4
   14104:	bl	13d68 <flatcc_builder_create_buffer@@Base+0x1d0>
   14108:	ldr	r0, [r4, #32]
   1410c:	ldr	r1, [r4, #156]	; 0x9c
   14110:	ldrh	r2, [r0, #12]
   14114:	sub	r0, r0, #36	; 0x24
   14118:	str	r0, [r4, #32]
   1411c:	sub	r0, r1, #1
   14120:	str	r0, [r4, #156]	; 0x9c
   14124:	strh	r2, [r4, #130]	; 0x82
   14128:	pop	{r4, sl, fp, pc}

0001412c <flatcc_builder_start_struct@@Base>:
   1412c:	push	{r4, r5, fp, lr}
   14130:	add	fp, sp, #8
   14134:	mov	r4, r1
   14138:	mov	r5, r0
   1413c:	mov	r1, r2
   14140:	bl	13f00 <flatcc_builder_start_buffer@@Base+0xbc>
   14144:	cmp	r0, #0
   14148:	movne	r0, #0
   1414c:	popne	{r4, r5, fp, pc}
   14150:	ldr	r0, [r5, #32]
   14154:	mov	r1, #2
   14158:	strh	r1, [r0, #14]
   1415c:	mov	r0, r5
   14160:	mvn	r1, #3
   14164:	bl	14178 <flatcc_builder_start_struct@@Base+0x4c>
   14168:	mov	r0, r5
   1416c:	mov	r1, r4
   14170:	pop	{r4, r5, fp, lr}
   14174:	b	141b0 <flatcc_builder_start_struct@@Base+0x84>
   14178:	push	{fp, lr}
   1417c:	mov	fp, sp
   14180:	ldr	r2, [r0, #28]
   14184:	ldr	ip, [r0, #32]
   14188:	ldr	r3, [r0, #60]	; 0x3c
   1418c:	ldr	lr, [r0, #64]	; 0x40
   14190:	add	r3, r3, r2
   14194:	str	r3, [r0, #16]
   14198:	sub	r2, lr, r2
   1419c:	cmp	r2, r1
   141a0:	movhi	r2, r1
   141a4:	str	r2, [r0, #24]
   141a8:	str	r1, [ip, #4]
   141ac:	pop	{fp, pc}
   141b0:	push	{r4, r5, fp, lr}
   141b4:	add	fp, sp, #8
   141b8:	mov	r4, r0
   141bc:	ldr	r5, [r0, #20]
   141c0:	ldr	r2, [r0, #24]
   141c4:	add	r0, r5, r1
   141c8:	str	r0, [r4, #20]
   141cc:	cmp	r0, r2
   141d0:	bcc	141f4 <flatcc_builder_start_struct@@Base+0xc8>
   141d4:	add	r1, r0, #1
   141d8:	mov	r0, r4
   141dc:	mvn	r2, #3
   141e0:	bl	165e4 <flatcc_builder_get_emit_context@@Base+0x18>
   141e4:	mov	r1, r0
   141e8:	mov	r0, #0
   141ec:	cmp	r1, #0
   141f0:	popne	{r4, r5, fp, pc}
   141f4:	ldr	r0, [r4, #16]
   141f8:	add	r0, r0, r5
   141fc:	pop	{r4, r5, fp, pc}

00014200 <flatcc_builder_struct_edit@@Base>:
   14200:	ldr	r0, [r0, #16]
   14204:	bx	lr

00014208 <flatcc_builder_end_struct@@Base>:
   14208:	push	{r4, r5, fp, lr}
   1420c:	add	fp, sp, #8
   14210:	mov	r4, r0
   14214:	ldr	r0, [r0, #32]
   14218:	ldrh	r0, [r0, #14]
   1421c:	cmp	r0, #2
   14220:	bne	14250 <flatcc_builder_end_struct@@Base+0x48>
   14224:	ldrh	r3, [r4, #130]	; 0x82
   14228:	ldr	r1, [r4, #16]
   1422c:	ldr	r2, [r4, #20]
   14230:	mov	r0, r4
   14234:	bl	13d7c <flatcc_builder_create_struct@@Base>
   14238:	mov	r5, r0
   1423c:	cmp	r0, #0
   14240:	movne	r0, r4
   14244:	blne	140c0 <flatcc_builder_end_buffer@@Base+0xc8>
   14248:	mov	r0, r5
   1424c:	pop	{r4, r5, fp, pc}
   14250:	movw	r0, #34050	; 0x8502
   14254:	movt	r0, #1
   14258:	movw	r1, #33358	; 0x824e
   1425c:	movt	r1, #1
   14260:	movw	r3, #34094	; 0x852e
   14264:	movt	r3, #1
   14268:	mov	r2, #872	; 0x368
   1426c:	bl	127a8 <__assert_fail@plt>

00014270 <flatcc_builder_extend_vector@@Base>:
   14270:	push	{r4, r5, fp, lr}
   14274:	add	fp, sp, #8
   14278:	mov	r5, r1
   1427c:	mov	r4, r0
   14280:	ldr	r0, [r0, #32]
   14284:	ldr	r2, [r0, #24]
   14288:	mov	r0, r4
   1428c:	bl	142b4 <flatcc_builder_extend_vector@@Base+0x44>
   14290:	cmp	r0, #0
   14294:	movne	r0, #0
   14298:	popne	{r4, r5, fp, pc}
   1429c:	ldr	r0, [r4, #32]
   142a0:	ldr	r0, [r0, #16]
   142a4:	mul	r1, r0, r5
   142a8:	mov	r0, r4
   142ac:	pop	{r4, r5, fp, lr}
   142b0:	b	141b0 <flatcc_builder_start_struct@@Base+0x84>
   142b4:	ldr	r0, [r0, #32]
   142b8:	ldr	r3, [r0, #20]
   142bc:	adds	r1, r3, r1
   142c0:	bcs	142d4 <flatcc_builder_extend_vector@@Base+0x64>
   142c4:	cmp	r1, r2
   142c8:	strls	r1, [r0, #20]
   142cc:	movls	r0, #0
   142d0:	bxls	lr
   142d4:	push	{fp, lr}
   142d8:	mov	fp, sp
   142dc:	movw	r0, #37629	; 0x92fd
   142e0:	movt	r0, #1
   142e4:	movw	r1, #33358	; 0x824e
   142e8:	movt	r1, #1
   142ec:	movw	r3, #37656	; 0x9318
   142f0:	movt	r3, #1
   142f4:	mov	r2, #892	; 0x37c
   142f8:	bl	127a8 <__assert_fail@plt>

000142fc <flatcc_builder_vector_push@@Base>:
   142fc:	push	{fp, lr}
   14300:	mov	fp, sp
   14304:	ldr	r2, [r0, #32]
   14308:	ldrh	r3, [r2, #14]
   1430c:	cmp	r3, #4
   14310:	bne	1433c <flatcc_builder_vector_push@@Base+0x40>
   14314:	ldr	ip, [r2, #20]
   14318:	ldr	r3, [r2, #24]
   1431c:	cmp	ip, r3
   14320:	bhi	1435c <flatcc_builder_vector_push@@Base+0x60>
   14324:	add	r3, ip, #1
   14328:	str	r3, [r2, #20]
   1432c:	ldr	r2, [r0, #32]
   14330:	ldr	r2, [r2, #16]
   14334:	pop	{fp, lr}
   14338:	b	1437c <flatcc_builder_vector_push@@Base+0x80>
   1433c:	movw	r0, #34161	; 0x8571
   14340:	movt	r0, #1
   14344:	movw	r1, #33358	; 0x824e
   14348:	movt	r1, #1
   1434c:	movw	r3, #34205	; 0x859d
   14350:	movt	r3, #1
   14354:	movw	r2, #907	; 0x38b
   14358:	bl	127a8 <__assert_fail@plt>
   1435c:	movw	r0, #34272	; 0x85e0
   14360:	movt	r0, #1
   14364:	movw	r1, #33358	; 0x824e
   14368:	movt	r1, #1
   1436c:	movw	r3, #34205	; 0x859d
   14370:	movt	r3, #1
   14374:	mov	r2, #908	; 0x38c
   14378:	bl	127a8 <__assert_fail@plt>
   1437c:	push	{r4, r5, r6, sl, fp, lr}
   14380:	add	fp, sp, #16
   14384:	mov	r4, r2
   14388:	mov	r5, r1
   1438c:	mov	r1, r2
   14390:	bl	141b0 <flatcc_builder_start_struct@@Base+0x84>
   14394:	mov	r6, r0
   14398:	cmp	r0, #0
   1439c:	beq	143b0 <flatcc_builder_vector_push@@Base+0xb4>
   143a0:	mov	r0, r6
   143a4:	mov	r1, r5
   143a8:	mov	r2, r4
   143ac:	bl	12718 <memcpy@plt>
   143b0:	mov	r0, r6
   143b4:	pop	{r4, r5, r6, sl, fp, pc}

000143b8 <flatcc_builder_append_vector@@Base>:
   143b8:	push	{r4, r5, r6, sl, fp, lr}
   143bc:	add	fp, sp, #16
   143c0:	mov	r4, r1
   143c4:	mov	r6, r0
   143c8:	ldr	r0, [r0, #32]
   143cc:	ldrh	r1, [r0, #14]
   143d0:	cmp	r1, #4
   143d4:	bne	14414 <flatcc_builder_append_vector@@Base+0x5c>
   143d8:	mov	r5, r2
   143dc:	ldr	r2, [r0, #24]
   143e0:	mov	r0, r6
   143e4:	mov	r1, r5
   143e8:	bl	142b4 <flatcc_builder_extend_vector@@Base+0x44>
   143ec:	cmp	r0, #0
   143f0:	movne	r0, #0
   143f4:	popne	{r4, r5, r6, sl, fp, pc}
   143f8:	ldr	r0, [r6, #32]
   143fc:	ldr	r0, [r0, #16]
   14400:	mul	r2, r0, r5
   14404:	mov	r0, r6
   14408:	mov	r1, r4
   1440c:	pop	{r4, r5, r6, sl, fp, lr}
   14410:	b	1437c <flatcc_builder_vector_push@@Base+0x80>
   14414:	movw	r0, #34161	; 0x8571
   14418:	movt	r0, #1
   1441c:	movw	r1, #33358	; 0x824e
   14420:	movt	r1, #1
   14424:	movw	r3, #34333	; 0x861d
   14428:	movt	r3, #1
   1442c:	movw	r2, #915	; 0x393
   14430:	bl	127a8 <__assert_fail@plt>

00014434 <flatcc_builder_extend_offset_vector@@Base>:
   14434:	push	{r4, r5, fp, lr}
   14438:	add	fp, sp, #8
   1443c:	mov	r5, r1
   14440:	mov	r4, r0
   14444:	mvn	r2, #-1073741824	; 0xc0000000
   14448:	bl	142b4 <flatcc_builder_extend_vector@@Base+0x44>
   1444c:	mov	r1, r0
   14450:	mov	r0, #0
   14454:	cmp	r1, #0
   14458:	popne	{r4, r5, fp, pc}
   1445c:	lsl	r1, r5, #2
   14460:	mov	r0, r4
   14464:	bl	141b0 <flatcc_builder_start_struct@@Base+0x84>
   14468:	pop	{r4, r5, fp, pc}

0001446c <flatcc_builder_offset_vector_push@@Base>:
   1446c:	push	{r4, r5, fp, lr}
   14470:	add	fp, sp, #8
   14474:	mov	r4, r1
   14478:	ldr	r1, [r0, #32]
   1447c:	ldrh	r2, [r1, #14]
   14480:	cmp	r2, #5
   14484:	bne	144bc <flatcc_builder_offset_vector_push@@Base+0x50>
   14488:	ldr	r2, [r1, #20]
   1448c:	mov	r5, #0
   14490:	cmn	r2, #-1073741823	; 0xc0000001
   14494:	beq	144b4 <flatcc_builder_offset_vector_push@@Base+0x48>
   14498:	add	r2, r2, #1
   1449c:	str	r2, [r1, #20]
   144a0:	mov	r1, #4
   144a4:	bl	141b0 <flatcc_builder_start_struct@@Base+0x84>
   144a8:	cmp	r0, #0
   144ac:	strne	r4, [r0]
   144b0:	movne	r5, r0
   144b4:	mov	r0, r5
   144b8:	pop	{r4, r5, fp, pc}
   144bc:	movw	r0, #34410	; 0x866a
   144c0:	movt	r0, #1
   144c4:	movw	r1, #33358	; 0x824e
   144c8:	movt	r1, #1
   144cc:	movw	r3, #34461	; 0x869d
   144d0:	movt	r3, #1
   144d4:	movw	r2, #934	; 0x3a6
   144d8:	bl	127a8 <__assert_fail@plt>

000144dc <flatcc_builder_append_offset_vector@@Base>:
   144dc:	push	{r4, r5, r6, sl, fp, lr}
   144e0:	add	fp, sp, #16
   144e4:	mov	r6, r0
   144e8:	ldr	r0, [r0, #32]
   144ec:	ldrh	r0, [r0, #14]
   144f0:	cmp	r0, #5
   144f4:	bne	14534 <flatcc_builder_append_offset_vector@@Base+0x58>
   144f8:	mov	r5, r2
   144fc:	mov	r4, r1
   14500:	mov	r0, r6
   14504:	mov	r1, r2
   14508:	mvn	r2, #-1073741824	; 0xc0000000
   1450c:	bl	142b4 <flatcc_builder_extend_vector@@Base+0x44>
   14510:	mov	r1, r0
   14514:	mov	r0, #0
   14518:	cmp	r1, #0
   1451c:	popne	{r4, r5, r6, sl, fp, pc}
   14520:	lsl	r2, r5, #2
   14524:	mov	r0, r6
   14528:	mov	r1, r4
   1452c:	bl	1437c <flatcc_builder_vector_push@@Base+0x80>
   14530:	pop	{r4, r5, r6, sl, fp, pc}
   14534:	movw	r0, #34410	; 0x866a
   14538:	movt	r0, #1
   1453c:	movw	r1, #33358	; 0x824e
   14540:	movt	r1, #1
   14544:	movw	r3, #34559	; 0x86ff
   14548:	movt	r3, #1
   1454c:	mov	r2, #948	; 0x3b4
   14550:	bl	127a8 <__assert_fail@plt>

00014554 <flatcc_builder_extend_string@@Base>:
   14554:	push	{r4, r5, fp, lr}
   14558:	add	fp, sp, #8
   1455c:	mov	r5, r0
   14560:	ldr	r0, [r0, #32]
   14564:	ldrh	r0, [r0, #14]
   14568:	cmp	r0, #6
   1456c:	bne	1459c <flatcc_builder_extend_string@@Base+0x48>
   14570:	mov	r4, r1
   14574:	mov	r0, r5
   14578:	mvn	r2, #0
   1457c:	bl	142b4 <flatcc_builder_extend_vector@@Base+0x44>
   14580:	cmp	r0, #0
   14584:	movne	r0, #0
   14588:	popne	{r4, r5, fp, pc}
   1458c:	mov	r0, r5
   14590:	mov	r1, r4
   14594:	pop	{r4, r5, fp, lr}
   14598:	b	141b0 <flatcc_builder_start_struct@@Base+0x84>
   1459c:	movw	r0, #34675	; 0x8773
   145a0:	movt	r0, #1
   145a4:	movw	r1, #33358	; 0x824e
   145a8:	movt	r1, #1
   145ac:	movw	r3, #34719	; 0x879f
   145b0:	movt	r3, #1
   145b4:	movw	r2, #957	; 0x3bd
   145b8:	bl	127a8 <__assert_fail@plt>

000145bc <flatcc_builder_append_string@@Base>:
   145bc:	push	{r4, r5, r6, sl, fp, lr}
   145c0:	add	fp, sp, #16
   145c4:	mov	r6, r0
   145c8:	ldr	r0, [r0, #32]
   145cc:	ldrh	r0, [r0, #14]
   145d0:	cmp	r0, #6
   145d4:	bne	14610 <flatcc_builder_append_string@@Base+0x54>
   145d8:	mov	r4, r2
   145dc:	mov	r5, r1
   145e0:	mov	r0, r6
   145e4:	mov	r1, r2
   145e8:	mvn	r2, #0
   145ec:	bl	142b4 <flatcc_builder_extend_vector@@Base+0x44>
   145f0:	cmp	r0, #0
   145f4:	movne	r0, #0
   145f8:	popne	{r4, r5, r6, sl, fp, pc}
   145fc:	mov	r0, r6
   14600:	mov	r1, r5
   14604:	mov	r2, r4
   14608:	pop	{r4, r5, r6, sl, fp, lr}
   1460c:	b	1437c <flatcc_builder_vector_push@@Base+0x80>
   14610:	movw	r0, #34675	; 0x8773
   14614:	movt	r0, #1
   14618:	movw	r1, #33358	; 0x824e
   1461c:	movt	r1, #1
   14620:	movw	r3, #34782	; 0x87de
   14624:	movt	r3, #1
   14628:	movw	r2, #966	; 0x3c6
   1462c:	bl	127a8 <__assert_fail@plt>

00014630 <flatcc_builder_append_string_str@@Base>:
   14630:	push	{r4, r5, fp, lr}
   14634:	add	fp, sp, #8
   14638:	mov	r4, r1
   1463c:	mov	r5, r0
   14640:	mov	r0, r1
   14644:	bl	12760 <strlen@plt>
   14648:	mov	r2, r0
   1464c:	mov	r0, r5
   14650:	mov	r1, r4
   14654:	pop	{r4, r5, fp, lr}
   14658:	b	145bc <flatcc_builder_append_string@@Base>

0001465c <flatcc_builder_append_string_strn@@Base>:
   1465c:	push	{r4, r5, fp, lr}
   14660:	add	fp, sp, #8
   14664:	mov	r4, r1
   14668:	mov	r5, r0
   1466c:	mov	r0, r1
   14670:	mov	r1, r2
   14674:	bl	1468c <flatcc_builder_append_string_strn@@Base+0x30>
   14678:	mov	r2, r0
   1467c:	mov	r0, r5
   14680:	mov	r1, r4
   14684:	pop	{r4, r5, fp, lr}
   14688:	b	145bc <flatcc_builder_append_string@@Base>
   1468c:	push	{r4, r5, fp, lr}
   14690:	add	fp, sp, #8
   14694:	mov	r4, r1
   14698:	mov	r5, r0
   1469c:	mov	r1, #0
   146a0:	mov	r2, r4
   146a4:	bl	12790 <memchr@plt>
   146a8:	cmp	r0, #0
   146ac:	subne	r4, r0, r5
   146b0:	mov	r0, r4
   146b4:	pop	{r4, r5, fp, pc}

000146b8 <flatcc_builder_truncate_vector@@Base>:
   146b8:	push	{fp, lr}
   146bc:	mov	fp, sp
   146c0:	ldr	r2, [r0, #32]
   146c4:	ldrh	r3, [r2, #14]
   146c8:	cmp	r3, #4
   146cc:	bne	146fc <flatcc_builder_truncate_vector@@Base+0x44>
   146d0:	ldr	r3, [r2, #20]
   146d4:	cmp	r3, r1
   146d8:	bcc	1471c <flatcc_builder_truncate_vector@@Base+0x64>
   146dc:	sub	r3, r3, r1
   146e0:	str	r3, [r2, #20]
   146e4:	ldr	r2, [r0, #32]
   146e8:	ldr	r2, [r2, #16]
   146ec:	mul	r1, r2, r1
   146f0:	bl	1473c <flatcc_builder_truncate_vector@@Base+0x84>
   146f4:	mov	r0, #0
   146f8:	pop	{fp, pc}
   146fc:	movw	r0, #34161	; 0x8571
   14700:	movt	r0, #1
   14704:	movw	r1, #33358	; 0x824e
   14708:	movt	r1, #1
   1470c:	movw	r3, #34859	; 0x882b
   14710:	movt	r3, #1
   14714:	movw	r2, #985	; 0x3d9
   14718:	bl	127a8 <__assert_fail@plt>
   1471c:	movw	r0, #34922	; 0x886a
   14720:	movt	r0, #1
   14724:	movw	r1, #33358	; 0x824e
   14728:	movt	r1, #1
   1472c:	movw	r3, #34859	; 0x882b
   14730:	movt	r3, #1
   14734:	movw	r2, #986	; 0x3da
   14738:	bl	127a8 <__assert_fail@plt>
   1473c:	mov	r2, r1
   14740:	ldr	r1, [r0, #16]
   14744:	ldr	r3, [r0, #20]
   14748:	sub	r3, r3, r2
   1474c:	str	r3, [r0, #20]
   14750:	add	r0, r1, r3
   14754:	mov	r1, #0
   14758:	b	12778 <memset@plt>

0001475c <flatcc_builder_truncate_offset_vector@@Base>:
   1475c:	push	{fp, lr}
   14760:	mov	fp, sp
   14764:	ldr	r2, [r0, #32]
   14768:	ldrh	r3, [r2, #14]
   1476c:	cmp	r3, #5
   14770:	bne	147a0 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   14774:	ldr	r3, [r2, #20]
   14778:	cmp	r3, r1
   1477c:	bcc	147c0 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14780:	sub	r3, r3, r1
   14784:	str	r3, [r2, #20]
   14788:	ldr	r2, [r0, #32]
   1478c:	ldr	r2, [r2, #16]
   14790:	mul	r1, r2, r1
   14794:	bl	1473c <flatcc_builder_truncate_vector@@Base+0x84>
   14798:	mov	r0, #0
   1479c:	pop	{fp, pc}
   147a0:	movw	r0, #34410	; 0x866a
   147a4:	movt	r0, #1
   147a8:	movw	r1, #33358	; 0x824e
   147ac:	movt	r1, #1
   147b0:	movw	r3, #34958	; 0x888e
   147b4:	movt	r3, #1
   147b8:	movw	r2, #994	; 0x3e2
   147bc:	bl	127a8 <__assert_fail@plt>
   147c0:	movw	r0, #35028	; 0x88d4
   147c4:	movt	r0, #1
   147c8:	movw	r1, #33358	; 0x824e
   147cc:	movt	r1, #1
   147d0:	movw	r3, #34958	; 0x888e
   147d4:	movt	r3, #1
   147d8:	movw	r2, #995	; 0x3e3
   147dc:	bl	127a8 <__assert_fail@plt>

000147e0 <flatcc_builder_truncate_string@@Base>:
   147e0:	push	{fp, lr}
   147e4:	mov	fp, sp
   147e8:	ldr	r2, [r0, #32]
   147ec:	ldrh	r3, [r2, #14]
   147f0:	cmp	r3, #6
   147f4:	bne	14818 <flatcc_builder_truncate_string@@Base+0x38>
   147f8:	ldr	r3, [r2, #20]
   147fc:	cmp	r3, r1
   14800:	bcc	14838 <flatcc_builder_truncate_string@@Base+0x58>
   14804:	sub	r3, r3, r1
   14808:	str	r3, [r2, #20]
   1480c:	bl	1473c <flatcc_builder_truncate_vector@@Base+0x84>
   14810:	mov	r0, #0
   14814:	pop	{fp, pc}
   14818:	movw	r0, #34675	; 0x8773
   1481c:	movt	r0, #1
   14820:	movw	r1, #33358	; 0x824e
   14824:	movt	r1, #1
   14828:	movw	r3, #35087	; 0x890f
   1482c:	movt	r3, #1
   14830:	movw	r2, #1003	; 0x3eb
   14834:	bl	127a8 <__assert_fail@plt>
   14838:	movw	r0, #35150	; 0x894e
   1483c:	movt	r0, #1
   14840:	movw	r1, #33358	; 0x824e
   14844:	movt	r1, #1
   14848:	movw	r3, #35087	; 0x890f
   1484c:	movt	r3, #1
   14850:	mov	r2, #1004	; 0x3ec
   14854:	bl	127a8 <__assert_fail@plt>

00014858 <flatcc_builder_start_vector@@Base>:
   14858:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1485c:	add	fp, sp, #24
   14860:	sub	sp, sp, #8
   14864:	mov	r5, r3
   14868:	mov	r6, r1
   1486c:	mov	r4, r0
   14870:	strh	r2, [sp, #6]
   14874:	add	r0, sp, #6
   14878:	mov	r8, #4
   1487c:	mov	r1, #4
   14880:	bl	148d8 <flatcc_builder_start_vector@@Base+0x80>
   14884:	ldrh	r1, [sp, #6]
   14888:	mov	r0, r4
   1488c:	bl	13f00 <flatcc_builder_start_buffer@@Base+0xbc>
   14890:	mvn	r7, #0
   14894:	cmp	r0, #0
   14898:	bne	148cc <flatcc_builder_start_vector@@Base+0x74>
   1489c:	ldr	r0, [r4, #32]
   148a0:	str	r6, [r0, #16]
   148a4:	ldr	r0, [r4, #32]
   148a8:	mov	r7, #0
   148ac:	str	r7, [r0, #20]
   148b0:	ldr	r0, [r4, #32]
   148b4:	str	r5, [r0, #24]
   148b8:	ldr	r0, [r4, #32]
   148bc:	strh	r8, [r0, #14]
   148c0:	mov	r0, r4
   148c4:	mvn	r1, #3
   148c8:	bl	14178 <flatcc_builder_start_struct@@Base+0x4c>
   148cc:	mov	r0, r7
   148d0:	sub	sp, fp, #24
   148d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148d8:	ldrh	r2, [r0]
   148dc:	cmp	r2, r1
   148e0:	strhcc	r1, [r0]
   148e4:	bx	lr

000148e8 <flatcc_builder_start_offset_vector@@Base>:
   148e8:	push	{r4, r5, r6, sl, fp, lr}
   148ec:	add	fp, sp, #16
   148f0:	mov	r4, r0
   148f4:	mov	r6, #4
   148f8:	mov	r1, #4
   148fc:	bl	13f00 <flatcc_builder_start_buffer@@Base+0xbc>
   14900:	mvn	r5, #0
   14904:	cmp	r0, #0
   14908:	beq	14914 <flatcc_builder_start_offset_vector@@Base+0x2c>
   1490c:	mov	r0, r5
   14910:	pop	{r4, r5, r6, sl, fp, pc}
   14914:	ldr	r0, [r4, #32]
   14918:	str	r6, [r0, #16]
   1491c:	ldr	r0, [r4, #32]
   14920:	mov	r5, #0
   14924:	str	r5, [r0, #20]
   14928:	ldr	r0, [r4, #32]
   1492c:	mov	r1, #5
   14930:	strh	r1, [r0, #14]
   14934:	mov	r0, r4
   14938:	mvn	r1, #3
   1493c:	bl	14178 <flatcc_builder_start_struct@@Base+0x4c>
   14940:	mov	r0, r5
   14944:	pop	{r4, r5, r6, sl, fp, pc}

00014948 <flatcc_builder_create_offset_vector@@Base>:
   14948:	push	{r4, r5, r6, sl, fp, lr}
   1494c:	add	fp, sp, #16
   14950:	mov	r6, r2
   14954:	mov	r5, r1
   14958:	mov	r4, r0
   1495c:	bl	148e8 <flatcc_builder_start_offset_vector@@Base>
   14960:	cmp	r0, #0
   14964:	beq	14970 <flatcc_builder_create_offset_vector@@Base+0x28>
   14968:	mov	r0, #0
   1496c:	pop	{r4, r5, r6, sl, fp, pc}
   14970:	mov	r0, r4
   14974:	mov	r1, r6
   14978:	bl	14434 <flatcc_builder_extend_offset_vector@@Base>
   1497c:	cmp	r0, #0
   14980:	beq	14968 <flatcc_builder_create_offset_vector@@Base+0x20>
   14984:	lsl	r2, r6, #2
   14988:	mov	r1, r5
   1498c:	bl	12718 <memcpy@plt>
   14990:	mov	r0, r4
   14994:	pop	{r4, r5, r6, sl, fp, lr}
   14998:	b	1499c <flatcc_builder_end_offset_vector@@Base>

0001499c <flatcc_builder_end_offset_vector@@Base>:
   1499c:	push	{r4, r5, fp, lr}
   149a0:	add	fp, sp, #8
   149a4:	mov	r4, r0
   149a8:	ldr	r0, [r0, #32]
   149ac:	ldrh	r1, [r0, #14]
   149b0:	cmp	r1, #5
   149b4:	bne	149e0 <flatcc_builder_end_offset_vector@@Base+0x44>
   149b8:	ldr	r2, [r0, #20]
   149bc:	ldr	r1, [r4, #16]
   149c0:	mov	r0, r4
   149c4:	bl	1553c <flatcc_builder_create_offset_vector_direct@@Base>
   149c8:	mov	r5, r0
   149cc:	cmp	r0, #0
   149d0:	movne	r0, r4
   149d4:	blne	140c0 <flatcc_builder_end_buffer@@Base+0xc8>
   149d8:	mov	r0, r5
   149dc:	pop	{r4, r5, fp, pc}
   149e0:	movw	r0, #34410	; 0x866a
   149e4:	movt	r0, #1
   149e8:	movw	r1, #33358	; 0x824e
   149ec:	movt	r1, #1
   149f0:	movw	r3, #35993	; 0x8c99
   149f4:	movt	r3, #1
   149f8:	movw	r2, #1480	; 0x5c8
   149fc:	bl	127a8 <__assert_fail@plt>

00014a00 <flatcc_builder_start_string@@Base>:
   14a00:	push	{r4, r5, r6, sl, fp, lr}
   14a04:	add	fp, sp, #16
   14a08:	mov	r4, r0
   14a0c:	mov	r6, #1
   14a10:	mov	r1, #1
   14a14:	bl	13f00 <flatcc_builder_start_buffer@@Base+0xbc>
   14a18:	mvn	r5, #0
   14a1c:	cmp	r0, #0
   14a20:	beq	14a2c <flatcc_builder_start_string@@Base+0x2c>
   14a24:	mov	r0, r5
   14a28:	pop	{r4, r5, r6, sl, fp, pc}
   14a2c:	ldr	r0, [r4, #32]
   14a30:	str	r6, [r0, #16]
   14a34:	ldr	r0, [r4, #32]
   14a38:	mov	r5, #0
   14a3c:	str	r5, [r0, #20]
   14a40:	ldr	r0, [r4, #32]
   14a44:	mov	r1, #6
   14a48:	strh	r1, [r0, #14]
   14a4c:	mov	r0, r4
   14a50:	mvn	r1, #3
   14a54:	bl	14178 <flatcc_builder_start_struct@@Base+0x4c>
   14a58:	mov	r0, r5
   14a5c:	pop	{r4, r5, r6, sl, fp, pc}

00014a60 <flatcc_builder_reserve_table@@Base>:
   14a60:	cmn	r1, #1
   14a64:	ble	14a6c <flatcc_builder_reserve_table@@Base+0xc>
   14a68:	b	14a94 <flatcc_builder_reserve_table@@Base+0x34>
   14a6c:	push	{fp, lr}
   14a70:	mov	fp, sp
   14a74:	movw	r0, #35249	; 0x89b1
   14a78:	movt	r0, #1
   14a7c:	movw	r1, #33358	; 0x824e
   14a80:	movt	r1, #1
   14a84:	movw	r3, #35184	; 0x8970
   14a88:	movt	r3, #1
   14a8c:	movw	r2, #1065	; 0x429
   14a90:	bl	127a8 <__assert_fail@plt>
   14a94:	push	{r4, r5, r6, sl, fp, lr}
   14a98:	add	fp, sp, #16
   14a9c:	sub	sp, sp, #8
   14aa0:	mov	r6, r1
   14aa4:	mov	r4, r0
   14aa8:	ldr	r0, [r0, #32]
   14aac:	ldrh	r1, [r0, #28]
   14ab0:	ldr	r0, [r0, #16]
   14ab4:	mov	r2, #1
   14ab8:	str	r2, [sp]
   14abc:	mov	r2, #4
   14ac0:	add	r3, r2, r6, lsl #1
   14ac4:	add	r2, r0, r1, lsl #1
   14ac8:	mov	r5, #0
   14acc:	mov	r0, r4
   14ad0:	mov	r1, #0
   14ad4:	bl	13794 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14ad8:	str	r0, [r4, #4]
   14adc:	cmp	r0, #0
   14ae0:	beq	14b1c <flatcc_builder_reserve_table@@Base+0xbc>
   14ae4:	lsl	r1, r6, #1
   14ae8:	add	r0, r0, #4
   14aec:	str	r0, [r4, #4]
   14af0:	ldr	r0, [r4, #32]
   14af4:	ldr	r2, [r0, #20]
   14af8:	str	r5, [sp]
   14afc:	orr	r3, r1, #1
   14b00:	mov	r0, r4
   14b04:	mov	r1, #3
   14b08:	bl	13794 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14b0c:	str	r0, [r4]
   14b10:	cmp	r0, #0
   14b14:	mvneq	r5, #0
   14b18:	b	14b20 <flatcc_builder_reserve_table@@Base+0xc0>
   14b1c:	mvn	r5, #0
   14b20:	mov	r0, r5
   14b24:	sub	sp, fp, #16
   14b28:	pop	{r4, r5, r6, sl, fp, pc}

00014b2c <flatcc_builder_start_table@@Base>:
   14b2c:	push	{r4, r5, r6, sl, fp, lr}
   14b30:	add	fp, sp, #16
   14b34:	mov	r6, r1
   14b38:	mov	r4, r0
   14b3c:	mov	r1, #4
   14b40:	bl	13f00 <flatcc_builder_start_buffer@@Base+0xbc>
   14b44:	mvn	r5, #0
   14b48:	cmp	r0, #0
   14b4c:	bne	14bc4 <flatcc_builder_start_table@@Base+0x98>
   14b50:	ldr	r0, [r4, #4]
   14b54:	ldr	r1, [r4, #32]
   14b58:	ldr	r2, [r4, #52]	; 0x34
   14b5c:	sub	r0, r0, r2
   14b60:	str	r0, [r1, #16]
   14b64:	ldr	r0, [r4]
   14b68:	ldr	r1, [r4, #32]
   14b6c:	ldr	r2, [r4, #76]	; 0x4c
   14b70:	sub	r0, r0, r2
   14b74:	str	r0, [r1, #20]
   14b78:	ldr	r0, [r4, #12]
   14b7c:	ldr	r1, [r4, #32]
   14b80:	str	r0, [r1, #24]
   14b84:	ldr	r0, [r4, #32]
   14b88:	ldrh	r1, [r4, #8]
   14b8c:	strh	r1, [r0, #28]
   14b90:	mov	r0, #0
   14b94:	strh	r0, [r4, #8]
   14b98:	movw	r0, #15186	; 0x3b52
   14b9c:	movt	r0, #12137	; 0x2f69
   14ba0:	str	r0, [r4, #12]
   14ba4:	ldr	r0, [r4, #32]
   14ba8:	mov	r1, #3
   14bac:	strh	r1, [r0, #14]
   14bb0:	mov	r0, r4
   14bb4:	mov	r1, r6
   14bb8:	bl	14a94 <flatcc_builder_reserve_table@@Base+0x34>
   14bbc:	cmp	r0, #0
   14bc0:	beq	14bcc <flatcc_builder_start_table@@Base+0xa0>
   14bc4:	mov	r0, r5
   14bc8:	pop	{r4, r5, r6, sl, fp, pc}
   14bcc:	mov	r0, r4
   14bd0:	movw	r1, #65532	; 0xfffc
   14bd4:	bl	14178 <flatcc_builder_start_struct@@Base+0x4c>
   14bd8:	mov	r5, #0
   14bdc:	mov	r0, r5
   14be0:	pop	{r4, r5, r6, sl, fp, pc}

00014be4 <flatcc_builder_create_vtable@@Base>:
   14be4:	push	{fp, lr}
   14be8:	mov	fp, sp
   14bec:	sub	sp, sp, #72	; 0x48
   14bf0:	mov	r3, #0
   14bf4:	str	r3, [sp, #4]
   14bf8:	str	r3, [sp]
   14bfc:	cmp	r2, #0
   14c00:	strne	r1, [sp, #8]
   14c04:	strne	r2, [sp]
   14c08:	strne	r2, [sp, #12]
   14c0c:	movne	r1, #1
   14c10:	strne	r1, [sp, #4]
   14c14:	ldr	r1, [r0, #152]	; 0x98
   14c18:	cmp	r1, #0
   14c1c:	bne	14c2c <flatcc_builder_create_vtable@@Base+0x48>
   14c20:	ldr	r1, [r0, #180]	; 0xb4
   14c24:	cmp	r1, #0
   14c28:	beq	14c48 <flatcc_builder_create_vtable@@Base+0x64>
   14c2c:	mov	r1, sp
   14c30:	bl	13b04 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14c34:	cmp	r0, #0
   14c38:	beq	14c58 <flatcc_builder_create_vtable@@Base+0x74>
   14c3c:	add	r0, r0, #1
   14c40:	mov	sp, fp
   14c44:	pop	{fp, pc}
   14c48:	mov	r1, sp
   14c4c:	bl	14c64 <flatcc_builder_create_vtable@@Base+0x80>
   14c50:	cmp	r0, #0
   14c54:	bne	14c40 <flatcc_builder_create_vtable@@Base+0x5c>
   14c58:	mov	r0, #0
   14c5c:	mov	sp, fp
   14c60:	pop	{fp, pc}
   14c64:	push	{r4, sl, fp, lr}
   14c68:	add	fp, sp, #8
   14c6c:	sub	sp, sp, #8
   14c70:	ldr	r4, [r0, #140]	; 0x8c
   14c74:	ldr	r3, [r1]
   14c78:	add	r2, r3, r4
   14c7c:	str	r2, [r0, #140]	; 0x8c
   14c80:	cmn	r3, #1
   14c84:	ble	14cd8 <flatcc_builder_create_vtable@@Base+0xf4>
   14c88:	ldr	r2, [r1, #4]
   14c8c:	ldr	ip, [r0, #36]	; 0x24
   14c90:	ldr	lr, [r0, #44]	; 0x2c
   14c94:	str	r3, [sp]
   14c98:	add	r1, r1, #8
   14c9c:	mov	r0, ip
   14ca0:	mov	r3, r4
   14ca4:	blx	lr
   14ca8:	cmp	r0, #0
   14cac:	addeq	r0, r4, #1
   14cb0:	subeq	sp, fp, #8
   14cb4:	popeq	{r4, sl, fp, pc}
   14cb8:	movw	r0, #37876	; 0x93f4
   14cbc:	movt	r0, #1
   14cc0:	movw	r1, #33358	; 0x824e
   14cc4:	movt	r1, #1
   14cc8:	movw	r3, #37743	; 0x936f
   14ccc:	movt	r3, #1
   14cd0:	movw	r2, #677	; 0x2a5
   14cd4:	bl	127a8 <__assert_fail@plt>
   14cd8:	movw	r0, #37876	; 0x93f4
   14cdc:	movt	r0, #1
   14ce0:	movw	r1, #33358	; 0x824e
   14ce4:	movt	r1, #1
   14ce8:	movw	r3, #37743	; 0x936f
   14cec:	movt	r3, #1
   14cf0:	movw	r2, #673	; 0x2a1
   14cf4:	bl	127a8 <__assert_fail@plt>

00014cf8 <flatcc_builder_create_cached_vtable@@Base>:
   14cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cfc:	add	fp, sp, #28
   14d00:	sub	sp, sp, #20
   14d04:	mov	r4, r2
   14d08:	mov	r9, r1
   14d0c:	mov	sl, r0
   14d10:	mov	r1, r3
   14d14:	bl	14eec <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   14d18:	cmp	r0, #0
   14d1c:	beq	14e40 <flatcc_builder_create_cached_vtable@@Base+0x148>
   14d20:	mov	r7, r0
   14d24:	ldr	r6, [r0]
   14d28:	mov	r5, #0
   14d2c:	cmp	r6, #0
   14d30:	mov	r8, #0
   14d34:	beq	14dcc <flatcc_builder_create_cached_vtable@@Base+0xd4>
   14d38:	ldr	r5, [sl, #68]	; 0x44
   14d3c:	str	sl, [sp, #16]
   14d40:	ldr	sl, [sl, #100]	; 0x64
   14d44:	mov	r0, #0
   14d48:	str	r7, [sp, #8]
   14d4c:	str	r0, [sp, #12]
   14d50:	add	r8, sl, r6
   14d54:	ldr	r0, [r8, #8]
   14d58:	mov	r1, r5
   14d5c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   14d60:	cmp	r0, r4
   14d64:	bne	14d7c <flatcc_builder_create_cached_vtable@@Base+0x84>
   14d68:	mov	r0, r9
   14d6c:	mov	r2, r4
   14d70:	bl	12724 <memcmp@plt>
   14d74:	cmp	r0, #0
   14d78:	beq	14d90 <flatcc_builder_create_cached_vtable@@Base+0x98>
   14d7c:	ldr	r6, [r8, #12]!
   14d80:	cmp	r6, #0
   14d84:	mov	r7, r8
   14d88:	bne	14d50 <flatcc_builder_create_cached_vtable@@Base+0x58>
   14d8c:	b	14dbc <flatcc_builder_create_cached_vtable@@Base+0xc4>
   14d90:	ldr	r0, [sp, #16]
   14d94:	ldr	r0, [r0, #152]	; 0x98
   14d98:	ldr	r1, [r8, #4]
   14d9c:	cmp	r1, r0
   14da0:	beq	14ec8 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14da4:	mov	r7, r8
   14da8:	ldr	r6, [r7, #12]!
   14dac:	cmp	r6, #0
   14db0:	mov	r0, r8
   14db4:	bne	14d4c <flatcc_builder_create_cached_vtable@@Base+0x54>
   14db8:	b	14dc0 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14dbc:	ldr	r8, [sp, #12]
   14dc0:	ldr	sl, [sp, #16]
   14dc4:	mov	r5, #0
   14dc8:	ldr	r7, [sp, #8]
   14dcc:	ldr	r2, [sl, #124]	; 0x7c
   14dd0:	str	r5, [sp]
   14dd4:	mov	r0, sl
   14dd8:	mov	r1, #6
   14ddc:	mov	r3, #16
   14de0:	bl	13794 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14de4:	cmp	r0, #0
   14de8:	beq	14eb4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14dec:	mov	r6, r0
   14df0:	ldr	r0, [sl, #124]	; 0x7c
   14df4:	ldr	r1, [sl, #152]	; 0x98
   14df8:	add	r2, r0, #16
   14dfc:	str	r2, [sl, #124]	; 0x7c
   14e00:	str	r1, [r6, #4]
   14e04:	ldr	r1, [r7]
   14e08:	str	r1, [r6, #12]
   14e0c:	str	r0, [r7]
   14e10:	mov	r0, sl
   14e14:	mov	r1, r9
   14e18:	mov	r2, r4
   14e1c:	bl	14be4 <flatcc_builder_create_vtable@@Base>
   14e20:	str	r0, [r6]
   14e24:	cmp	r0, #0
   14e28:	beq	14eb4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14e2c:	cmp	r8, #0
   14e30:	beq	14e48 <flatcc_builder_create_cached_vtable@@Base+0x150>
   14e34:	ldr	r0, [r8, #8]
   14e38:	str	r0, [r6, #8]
   14e3c:	b	14eb0 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   14e40:	mov	r5, #0
   14e44:	b	14eb4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14e48:	ldr	r0, [sl, #172]	; 0xac
   14e4c:	cmp	r0, #0
   14e50:	beq	14e70 <flatcc_builder_create_cached_vtable@@Base+0x178>
   14e54:	ldr	r1, [sl, #120]	; 0x78
   14e58:	add	r1, r1, r4
   14e5c:	cmp	r0, r1
   14e60:	bcs	14e70 <flatcc_builder_create_cached_vtable@@Base+0x178>
   14e64:	mov	r0, sl
   14e68:	bl	1348c <flatcc_builder_flush_vtable_cache@@Base>
   14e6c:	b	14eb0 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   14e70:	ldr	r2, [sl, #120]	; 0x78
   14e74:	mov	r0, #0
   14e78:	str	r0, [sp]
   14e7c:	mov	r0, sl
   14e80:	mov	r1, #2
   14e84:	mov	r3, r4
   14e88:	bl	13794 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14e8c:	cmp	r0, #0
   14e90:	beq	14ec0 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   14e94:	ldr	r1, [sl, #120]	; 0x78
   14e98:	str	r1, [r6, #8]
   14e9c:	add	r1, r1, r4
   14ea0:	str	r1, [sl, #120]	; 0x78
   14ea4:	mov	r1, r9
   14ea8:	mov	r2, r4
   14eac:	bl	12718 <memcpy@plt>
   14eb0:	ldr	r5, [r6]
   14eb4:	mov	r0, r5
   14eb8:	sub	sp, fp, #28
   14ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec0:	mvn	r5, #0
   14ec4:	b	14eb4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14ec8:	ldr	r1, [sp, #8]
   14ecc:	cmp	r7, r1
   14ed0:	ldrne	r0, [r8, #12]
   14ed4:	strne	r0, [r7]
   14ed8:	ldrne	r0, [r1]
   14edc:	strne	r0, [r8, #12]
   14ee0:	strne	r6, [r1]
   14ee4:	ldr	r5, [r8]
   14ee8:	b	14eb4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14eec:	push	{r4, r5, fp, lr}
   14ef0:	add	fp, sp, #8
   14ef4:	mov	r4, r1
   14ef8:	mov	r5, r0
   14efc:	ldr	r0, [r0, #116]	; 0x74
   14f00:	cmp	r0, #0
   14f04:	bne	14f20 <flatcc_builder_create_cached_vtable@@Base+0x228>
   14f08:	mov	r0, r5
   14f0c:	bl	1664c <flatcc_builder_get_emit_context@@Base+0x80>
   14f10:	mov	r1, r0
   14f14:	mov	r0, #0
   14f18:	cmp	r1, #0
   14f1c:	popne	{r4, r5, fp, pc}
   14f20:	ldr	r0, [r5, #92]	; 0x5c
   14f24:	ldr	r1, [r5, #116]	; 0x74
   14f28:	rsb	r1, r1, #32
   14f2c:	lsr	r1, r4, r1
   14f30:	add	r0, r0, r1, lsl #2
   14f34:	pop	{r4, r5, fp, pc}

00014f38 <flatcc_builder_create_table@@Base>:
   14f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f3c:	add	fp, sp, #28
   14f40:	sub	sp, sp, #84	; 0x54
   14f44:	strh	r3, [fp, #-30]	; 0xffffffe2
   14f48:	ldr	r4, [fp, #12]
   14f4c:	cmn	r4, #1
   14f50:	ble	15080 <flatcc_builder_create_table@@Base+0x148>
   14f54:	ldr	r8, [fp, #16]
   14f58:	tst	r8, #1
   14f5c:	beq	150a0 <flatcc_builder_create_table@@Base+0x168>
   14f60:	mov	sl, r2
   14f64:	mov	r6, r1
   14f68:	mov	r5, r0
   14f6c:	sub	r0, fp, #30
   14f70:	mov	r1, #4
   14f74:	bl	148d8 <flatcc_builder_start_vector@@Base+0x80>
   14f78:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   14f7c:	mov	r0, r5
   14f80:	mov	r1, r7
   14f84:	bl	13d68 <flatcc_builder_create_buffer@@Base+0x1d0>
   14f88:	mov	r0, r5
   14f8c:	mov	r1, sl
   14f90:	mov	r2, r7
   14f94:	bl	13aec <flatcc_builder_embed_buffer@@Base+0x1c8>
   14f98:	mov	r9, r0
   14f9c:	mvn	r0, #3
   14fa0:	sub	r0, r0, sl
   14fa4:	sub	r0, r0, r9
   14fa8:	str	r5, [sp]
   14fac:	ldr	r1, [r5, #136]	; 0x88
   14fb0:	add	r5, r0, r1
   14fb4:	rsb	r0, r8, #1
   14fb8:	add	r0, r0, r5
   14fbc:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14fc0:	str	r0, [fp, #-36]	; 0xffffffdc
   14fc4:	cmp	r4, #1
   14fc8:	blt	14ff8 <flatcc_builder_create_table@@Base+0xc0>
   14fcc:	mvn	r0, #3
   14fd0:	ldr	r7, [fp, #8]
   14fd4:	sub	r5, r0, r5
   14fd8:	ldrh	r8, [r7], #2
   14fdc:	ldr	r0, [r8, r6]
   14fe0:	add	r0, r5, r0
   14fe4:	sub	r0, r0, r8
   14fe8:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14fec:	str	r0, [r8, r6]
   14ff0:	subs	r4, r4, #1
   14ff4:	bne	14fd8 <flatcc_builder_create_table@@Base+0xa0>
   14ff8:	sub	r0, fp, #36	; 0x24
   14ffc:	str	r0, [sp, #12]
   15000:	mov	r0, #4
   15004:	str	r0, [sp, #4]
   15008:	str	r0, [sp, #16]
   1500c:	mov	r0, #1
   15010:	str	r0, [sp, #8]
   15014:	cmp	sl, #0
   15018:	beq	15034 <flatcc_builder_create_table@@Base+0xfc>
   1501c:	str	r6, [sp, #20]
   15020:	str	sl, [sp, #24]
   15024:	mov	r0, #2
   15028:	str	r0, [sp, #8]
   1502c:	add	r0, sl, #4
   15030:	str	r0, [sp, #4]
   15034:	cmp	r9, #0
   15038:	ldr	r0, [sp]
   1503c:	beq	15070 <flatcc_builder_create_table@@Base+0x138>
   15040:	ldr	r2, [sp, #4]
   15044:	ldr	r1, [sp, #8]
   15048:	add	r2, r2, r9
   1504c:	str	r2, [sp, #4]
   15050:	add	r2, sp, #4
   15054:	add	r3, r2, r1, lsl #3
   15058:	movw	r2, #32828	; 0x803c
   1505c:	movt	r2, #1
   15060:	str	r2, [r3, #8]
   15064:	str	r9, [r3, #12]
   15068:	add	r1, r1, #1
   1506c:	str	r1, [sp, #8]
   15070:	add	r1, sp, #4
   15074:	bl	13b04 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15078:	sub	sp, fp, #28
   1507c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15080:	movw	r0, #35242	; 0x89aa
   15084:	movt	r0, #1
   15088:	movw	r1, #33358	; 0x824e
   1508c:	movt	r1, #1
   15090:	movw	r3, #35260	; 0x89bc
   15094:	movt	r3, #1
   15098:	movw	r2, #1237	; 0x4d5
   1509c:	bl	127a8 <__assert_fail@plt>
   150a0:	movw	r0, #35416	; 0x8a58
   150a4:	movt	r0, #1
   150a8:	movw	r1, #33358	; 0x824e
   150ac:	movt	r1, #1
   150b0:	movw	r3, #35260	; 0x89bc
   150b4:	movt	r3, #1
   150b8:	movw	r2, #1243	; 0x4db
   150bc:	bl	127a8 <__assert_fail@plt>

000150c0 <flatcc_builder_check_required_field@@Base>:
   150c0:	ldr	r2, [r0, #32]
   150c4:	ldrh	r2, [r2, #14]
   150c8:	cmp	r2, #3
   150cc:	bne	150fc <flatcc_builder_check_required_field@@Base+0x3c>
   150d0:	ldrh	r3, [r0, #8]
   150d4:	mov	r2, #0
   150d8:	cmp	r3, r1
   150dc:	bls	150f4 <flatcc_builder_check_required_field@@Base+0x34>
   150e0:	ldr	r0, [r0, #4]
   150e4:	add	r0, r0, r1, lsl #1
   150e8:	ldrh	r2, [r0]
   150ec:	cmp	r2, #0
   150f0:	movwne	r2, #1
   150f4:	mov	r0, r2
   150f8:	bx	lr
   150fc:	push	{fp, lr}
   15100:	mov	fp, sp
   15104:	movw	r0, #35427	; 0x8a63
   15108:	movt	r0, #1
   1510c:	movw	r1, #33358	; 0x824e
   15110:	movt	r1, #1
   15114:	movw	r3, #35470	; 0x8a8e
   15118:	movt	r3, #1
   1511c:	movw	r2, #1272	; 0x4f8
   15120:	bl	127a8 <__assert_fail@plt>

00015124 <flatcc_builder_check_union_field@@Base>:
   15124:	mov	r2, r0
   15128:	ldr	r0, [r0, #32]
   1512c:	ldrh	r0, [r0, #14]
   15130:	cmp	r0, #3
   15134:	bne	15194 <flatcc_builder_check_union_field@@Base+0x70>
   15138:	mov	r0, #0
   1513c:	cmp	r1, #0
   15140:	ldrhne	r3, [r2, #8]
   15144:	cmpne	r3, r1
   15148:	bhi	15150 <flatcc_builder_check_union_field@@Base+0x2c>
   1514c:	bx	lr
   15150:	ldr	r0, [r2, #4]
   15154:	add	r0, r0, r1, lsl #1
   15158:	ldrh	r1, [r0, #-2]
   1515c:	cmp	r1, #0
   15160:	beq	15184 <flatcc_builder_check_union_field@@Base+0x60>
   15164:	ldr	r2, [r2, #16]
   15168:	ldrb	r1, [r2, r1]
   1516c:	ldrh	r0, [r0]
   15170:	cmp	r1, #0
   15174:	beq	15188 <flatcc_builder_check_union_field@@Base+0x64>
   15178:	cmp	r0, #0
   1517c:	movwne	r0, #1
   15180:	bx	lr
   15184:	ldrh	r0, [r0]
   15188:	clz	r0, r0
   1518c:	lsr	r0, r0, #5
   15190:	bx	lr
   15194:	push	{fp, lr}
   15198:	mov	fp, sp
   1519c:	movw	r0, #35427	; 0x8a63
   151a0:	movt	r0, #1
   151a4:	movw	r1, #33358	; 0x824e
   151a8:	movt	r1, #1
   151ac:	movw	r3, #35553	; 0x8ae1
   151b0:	movt	r3, #1
   151b4:	movw	r2, #1279	; 0x4ff
   151b8:	bl	127a8 <__assert_fail@plt>

000151bc <flatcc_builder_check_required@@Base>:
   151bc:	push	{fp, lr}
   151c0:	mov	fp, sp
   151c4:	mov	r3, r0
   151c8:	ldr	r0, [r0, #32]
   151cc:	ldrh	r0, [r0, #14]
   151d0:	cmp	r0, #3
   151d4:	bne	1522c <flatcc_builder_check_required@@Base+0x70>
   151d8:	ldrh	ip, [r3, #8]
   151dc:	mov	r0, #0
   151e0:	cmp	ip, r2
   151e4:	movge	r0, #1
   151e8:	cmpge	r2, #1
   151ec:	bge	151f4 <flatcc_builder_check_required@@Base+0x38>
   151f0:	pop	{fp, pc}
   151f4:	ldr	ip, [r3, #4]
   151f8:	mov	lr, #0
   151fc:	b	15210 <flatcc_builder_check_required@@Base+0x54>
   15200:	add	lr, lr, #1
   15204:	add	r1, r1, #2
   15208:	cmp	lr, r2
   1520c:	popge	{fp, pc}
   15210:	ldrh	r3, [r1]
   15214:	add	r3, ip, r3, lsl #1
   15218:	ldrh	r3, [r3]
   1521c:	cmp	r3, #0
   15220:	bne	15200 <flatcc_builder_check_required@@Base+0x44>
   15224:	mov	r0, #0
   15228:	pop	{fp, pc}
   1522c:	movw	r0, #35427	; 0x8a63
   15230:	movt	r0, #1
   15234:	movw	r1, #33358	; 0x824e
   15238:	movt	r1, #1
   1523c:	movw	r3, #35633	; 0x8b31
   15240:	movt	r3, #1
   15244:	movw	r2, #1297	; 0x511
   15248:	bl	127a8 <__assert_fail@plt>

0001524c <flatcc_builder_end_table@@Base>:
   1524c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15250:	add	fp, sp, #24
   15254:	sub	sp, sp, #16
   15258:	mov	r4, r0
   1525c:	ldr	r0, [r0, #32]
   15260:	ldrh	r0, [r0, #14]
   15264:	cmp	r0, #3
   15268:	bne	15378 <flatcc_builder_end_table@@Base+0x12c>
   1526c:	ldrh	r0, [r4, #8]
   15270:	mov	r1, #4
   15274:	add	r0, r1, r0, lsl #1
   15278:	ldr	r6, [r4, #4]
   1527c:	strh	r0, [r6, #-4]!
   15280:	ldrh	r1, [r4, #20]
   15284:	add	r1, r1, #4
   15288:	strh	r1, [r6, #2]
   1528c:	uxth	r5, r0
   15290:	ldr	r0, [r4, #12]
   15294:	eor	r0, r0, r5
   15298:	movw	r2, #31153	; 0x79b1
   1529c:	movt	r2, #40503	; 0x9e37
   152a0:	mul	r0, r0, r2
   152a4:	uxth	r1, r1
   152a8:	eor	r0, r0, r1
   152ac:	mul	r3, r0, r2
   152b0:	str	r3, [r4, #12]
   152b4:	mov	r0, r4
   152b8:	mov	r1, r6
   152bc:	mov	r2, r5
   152c0:	bl	14cf8 <flatcc_builder_create_cached_vtable@@Base>
   152c4:	cmp	r0, #0
   152c8:	beq	15368 <flatcc_builder_end_table@@Base+0x11c>
   152cc:	mov	r7, r0
   152d0:	mov	r8, #0
   152d4:	mov	r0, r6
   152d8:	mov	r1, #0
   152dc:	mov	r2, r5
   152e0:	bl	12778 <memset@plt>
   152e4:	ldrh	r3, [r4, #130]	; 0x82
   152e8:	ldr	r0, [r4, #76]	; 0x4c
   152ec:	ldr	r6, [r4]
   152f0:	ldr	r1, [r4, #16]
   152f4:	ldr	r2, [r4, #20]
   152f8:	ldr	r5, [r4, #32]
   152fc:	ldr	r5, [r5, #20]
   15300:	add	r0, r0, r5
   15304:	sub	r6, r6, r0
   15308:	asr	r6, r6, #1
   1530c:	stm	sp, {r0, r6, r7}
   15310:	mov	r0, r4
   15314:	bl	14f38 <flatcc_builder_create_table@@Base>
   15318:	cmp	r0, #0
   1531c:	beq	1536c <flatcc_builder_end_table@@Base+0x120>
   15320:	mov	r5, r0
   15324:	ldr	r0, [r4, #32]
   15328:	ldr	r1, [r4, #52]	; 0x34
   1532c:	ldr	r2, [r4, #76]	; 0x4c
   15330:	ldr	r3, [r0, #24]
   15334:	str	r3, [r4, #12]
   15338:	ldrh	r3, [r0, #28]
   1533c:	strh	r3, [r4, #8]
   15340:	ldr	r3, [r0, #16]
   15344:	add	r1, r1, r3
   15348:	str	r1, [r4, #4]
   1534c:	ldr	r0, [r0, #20]
   15350:	add	r0, r2, r0
   15354:	str	r0, [r4]
   15358:	mov	r0, r4
   1535c:	bl	140c0 <flatcc_builder_end_buffer@@Base+0xc8>
   15360:	mov	r8, r5
   15364:	b	1536c <flatcc_builder_end_table@@Base+0x120>
   15368:	mov	r8, #0
   1536c:	mov	r0, r8
   15370:	sub	sp, fp, #24
   15374:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15378:	movw	r0, #35427	; 0x8a63
   1537c:	movt	r0, #1
   15380:	movw	r1, #33358	; 0x824e
   15384:	movt	r1, #1
   15388:	movw	r3, #35723	; 0x8b8b
   1538c:	movt	r3, #1
   15390:	movw	r2, #1317	; 0x525
   15394:	bl	127a8 <__assert_fail@plt>

00015398 <flatcc_builder_create_vector@@Base>:
   15398:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1539c:	add	fp, sp, #24
   153a0:	sub	sp, sp, #80	; 0x50
   153a4:	mov	r4, r0
   153a8:	ldr	r0, [fp, #8]
   153ac:	strh	r0, [fp, #-26]	; 0xffffffe6
   153b0:	ldr	r0, [fp, #12]
   153b4:	cmp	r2, r0
   153b8:	bhi	15488 <flatcc_builder_create_vector@@Base+0xf0>
   153bc:	mov	r6, r3
   153c0:	mov	r7, r2
   153c4:	mov	r8, r1
   153c8:	sub	r0, fp, #26
   153cc:	mov	r9, #4
   153d0:	mov	r1, #4
   153d4:	bl	148d8 <flatcc_builder_start_vector@@Base+0x80>
   153d8:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   153dc:	mov	r0, r4
   153e0:	mov	r1, r5
   153e4:	bl	13d68 <flatcc_builder_create_buffer@@Base+0x1d0>
   153e8:	mov	r0, r7
   153ec:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   153f0:	str	r7, [fp, #-32]	; 0xffffffe0
   153f4:	mul	r6, r6, r7
   153f8:	mov	r0, r4
   153fc:	mov	r1, r6
   15400:	mov	r2, r5
   15404:	bl	13aec <flatcc_builder_embed_buffer@@Base+0x1c8>
   15408:	str	r9, [sp]
   1540c:	sub	r1, fp, #32
   15410:	str	r1, [sp, #8]
   15414:	str	r9, [sp, #12]
   15418:	mov	r1, #1
   1541c:	str	r1, [sp, #4]
   15420:	cmp	r6, #0
   15424:	beq	15440 <flatcc_builder_create_vector@@Base+0xa8>
   15428:	str	r8, [sp, #16]
   1542c:	str	r6, [sp, #20]
   15430:	mov	r1, #2
   15434:	str	r1, [sp, #4]
   15438:	add	r1, r6, #4
   1543c:	str	r1, [sp]
   15440:	cmp	r0, #0
   15444:	beq	15474 <flatcc_builder_create_vector@@Base+0xdc>
   15448:	ldm	sp, {r1, r2}
   1544c:	add	r1, r1, r0
   15450:	str	r1, [sp]
   15454:	mov	r1, sp
   15458:	add	r1, r1, r2, lsl #3
   1545c:	movw	r3, #32828	; 0x803c
   15460:	movt	r3, #1
   15464:	str	r3, [r1, #8]
   15468:	str	r0, [r1, #12]
   1546c:	add	r0, r2, #1
   15470:	str	r0, [sp, #4]
   15474:	mov	r1, sp
   15478:	mov	r0, r4
   1547c:	bl	13b04 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15480:	sub	sp, fp, #24
   15484:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15488:	movw	r0, #35789	; 0x8bcd
   1548c:	movt	r0, #1
   15490:	movw	r1, #33358	; 0x824e
   15494:	movt	r1, #1
   15498:	movw	r3, #35808	; 0x8be0
   1549c:	movt	r3, #1
   154a0:	movw	r2, #1365	; 0x555
   154a4:	bl	127a8 <__assert_fail@plt>

000154a8 <flatcc_builder_end_vector@@Base>:
   154a8:	push	{r4, r5, fp, lr}
   154ac:	add	fp, sp, #8
   154b0:	sub	sp, sp, #8
   154b4:	mov	r4, r0
   154b8:	ldr	r0, [r0, #32]
   154bc:	ldrh	r1, [r0, #14]
   154c0:	cmp	r1, #4
   154c4:	bne	15508 <flatcc_builder_end_vector@@Base+0x60>
   154c8:	ldr	r1, [r4, #16]
   154cc:	ldrh	r5, [r4, #130]	; 0x82
   154d0:	ldr	r3, [r0, #16]
   154d4:	ldr	r2, [r0, #20]
   154d8:	ldr	r0, [r0, #24]
   154dc:	str	r5, [sp]
   154e0:	str	r0, [sp, #4]
   154e4:	mov	r0, r4
   154e8:	bl	15398 <flatcc_builder_create_vector@@Base>
   154ec:	mov	r5, r0
   154f0:	cmp	r0, #0
   154f4:	movne	r0, r4
   154f8:	blne	140c0 <flatcc_builder_end_buffer@@Base+0xc8>
   154fc:	mov	r0, r5
   15500:	sub	sp, fp, #8
   15504:	pop	{r4, r5, fp, pc}
   15508:	movw	r0, #34161	; 0x8571
   1550c:	movt	r0, #1
   15510:	movw	r1, #33358	; 0x824e
   15514:	movt	r1, #1
   15518:	movw	r3, #35926	; 0x8c56
   1551c:	movt	r3, #1
   15520:	movw	r2, #1400	; 0x578
   15524:	bl	127a8 <__assert_fail@plt>

00015528 <flatcc_builder_vector_count@@Base>:
   15528:	ldr	r0, [r0, #32]
   1552c:	ldr	r0, [r0, #20]
   15530:	bx	lr

00015534 <flatcc_builder_vector_edit@@Base>:
   15534:	ldr	r0, [r0, #16]
   15538:	bx	lr

0001553c <flatcc_builder_create_offset_vector_direct@@Base>:
   1553c:	mov	r3, #0
   15540:	b	15544 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15544:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15548:	add	fp, sp, #24
   1554c:	sub	sp, sp, #80	; 0x50
   15550:	mov	r8, r0
   15554:	mov	r0, #0
   15558:	cmn	r2, #-1073741823	; 0xc0000001
   1555c:	bhi	1568c <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   15560:	mov	r5, r3
   15564:	mov	r9, r2
   15568:	mov	r7, r1
   1556c:	mov	r6, #4
   15570:	mov	r0, r8
   15574:	mov	r1, #4
   15578:	bl	13d68 <flatcc_builder_create_buffer@@Base+0x1d0>
   1557c:	mov	r0, r9
   15580:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15584:	str	r9, [fp, #-28]	; 0xffffffe4
   15588:	lsl	r4, r9, #2
   1558c:	mov	r0, r8
   15590:	mov	r1, r4
   15594:	mov	r2, #4
   15598:	bl	13aec <flatcc_builder_embed_buffer@@Base+0x1c8>
   1559c:	str	r6, [sp, #4]
   155a0:	sub	r1, fp, #28
   155a4:	str	r1, [sp, #12]
   155a8:	str	r6, [sp, #16]
   155ac:	mov	r1, #1
   155b0:	str	r1, [sp, #8]
   155b4:	mov	r1, #0
   155b8:	cmp	r1, r9, lsl #2
   155bc:	beq	155d8 <flatcc_builder_create_offset_vector_direct@@Base+0x9c>
   155c0:	str	r7, [sp, #20]
   155c4:	str	r4, [sp, #24]
   155c8:	mov	r1, #2
   155cc:	str	r1, [sp, #8]
   155d0:	add	r1, r4, #4
   155d4:	str	r1, [sp, #4]
   155d8:	cmp	r0, #0
   155dc:	beq	1560c <flatcc_builder_create_offset_vector_direct@@Base+0xd0>
   155e0:	ldmib	sp, {r1, r2}
   155e4:	add	r1, r1, r0
   155e8:	str	r1, [sp, #4]
   155ec:	add	r1, sp, #4
   155f0:	add	r1, r1, r2, lsl #3
   155f4:	movw	r3, #32828	; 0x803c
   155f8:	movt	r3, #1
   155fc:	str	r3, [r1, #8]
   15600:	str	r0, [r1, #12]
   15604:	add	r0, r2, #1
   15608:	str	r0, [sp, #8]
   1560c:	cmp	r9, #0
   15610:	beq	15680 <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   15614:	ldr	r0, [r8, #136]	; 0x88
   15618:	mvn	r1, #3
   1561c:	sub	r0, r1, r0
   15620:	ldr	r1, [sp, #4]
   15624:	add	r4, r0, r1
   15628:	mov	r6, #0
   1562c:	ldr	r0, [r7, r6, lsl #2]
   15630:	cmp	r0, #0
   15634:	beq	1565c <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15638:	add	r0, r4, r0
   1563c:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15640:	str	r0, [r7, r6, lsl #2]
   15644:	cmp	r5, #0
   15648:	beq	15670 <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   1564c:	ldrb	r0, [r5, r6]
   15650:	cmp	r0, #0
   15654:	bne	15670 <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   15658:	b	15694 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   1565c:	cmp	r5, #0
   15660:	beq	156b4 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   15664:	ldrb	r0, [r5, r6]
   15668:	cmp	r0, #0
   1566c:	bne	156d4 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   15670:	sub	r4, r4, #4
   15674:	add	r6, r6, #1
   15678:	cmp	r6, r9
   1567c:	bcc	1562c <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   15680:	add	r1, sp, #4
   15684:	mov	r0, r8
   15688:	bl	13b04 <flatcc_builder_embed_buffer@@Base+0x1e0>
   1568c:	sub	sp, fp, #24
   15690:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15694:	movw	r0, #37864	; 0x93e8
   15698:	movt	r0, #1
   1569c:	movw	r1, #33358	; 0x824e
   156a0:	movt	r1, #1
   156a4:	movw	r3, #37878	; 0x93f6
   156a8:	movt	r3, #1
   156ac:	movw	r2, #1457	; 0x5b1
   156b0:	bl	127a8 <__assert_fail@plt>
   156b4:	movw	r0, #37876	; 0x93f4
   156b8:	movt	r0, #1
   156bc:	movw	r1, #33358	; 0x824e
   156c0:	movt	r1, #1
   156c4:	movw	r3, #37878	; 0x93f6
   156c8:	movt	r3, #1
   156cc:	movw	r2, #1463	; 0x5b7
   156d0:	bl	127a8 <__assert_fail@plt>
   156d4:	movw	r0, #38009	; 0x9479
   156d8:	movt	r0, #1
   156dc:	movw	r1, #33358	; 0x824e
   156e0:	movt	r1, #1
   156e4:	movw	r3, #37878	; 0x93f6
   156e8:	movt	r3, #1
   156ec:	movw	r2, #1461	; 0x5b5
   156f0:	bl	127a8 <__assert_fail@plt>

000156f4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   156f4:	push	{r4, r5, fp, lr}
   156f8:	add	fp, sp, #8
   156fc:	mov	r3, r1
   15700:	mov	r4, r0
   15704:	ldr	r0, [r0, #32]
   15708:	ldrh	r1, [r0, #14]
   1570c:	cmp	r1, #5
   15710:	bne	1573c <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   15714:	ldr	r2, [r0, #20]
   15718:	ldr	r1, [r4, #16]
   1571c:	mov	r0, r4
   15720:	bl	15544 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15724:	mov	r5, r0
   15728:	cmp	r0, #0
   1572c:	movne	r0, r4
   15730:	blne	140c0 <flatcc_builder_end_buffer@@Base+0xc8>
   15734:	mov	r0, r5
   15738:	pop	{r4, r5, fp, pc}
   1573c:	movw	r0, #34410	; 0x866a
   15740:	movt	r0, #1
   15744:	movw	r1, #33358	; 0x824e
   15748:	movt	r1, #1
   1574c:	movw	r3, #36067	; 0x8ce3
   15750:	movt	r3, #1
   15754:	movw	r2, #1493	; 0x5d5
   15758:	bl	127a8 <__assert_fail@plt>

0001575c <flatcc_builder_offset_vector_edit@@Base>:
   1575c:	ldr	r0, [r0, #16]
   15760:	bx	lr

00015764 <flatcc_builder_offset_vector_count@@Base>:
   15764:	ldr	r0, [r0, #32]
   15768:	ldr	r0, [r0, #20]
   1576c:	bx	lr

00015770 <flatcc_builder_table_add_union@@Base>:
   15770:	push	{r4, r5, r6, r7, fp, lr}
   15774:	add	fp, sp, #16
   15778:	mov	r5, r0
   1577c:	ldr	r0, [r0, #32]
   15780:	ldrh	r0, [r0, #14]
   15784:	cmp	r0, #3
   15788:	bne	157fc <flatcc_builder_table_add_union@@Base+0x8c>
   1578c:	mov	r7, r3
   15790:	mov	r6, r1
   15794:	uxtb	r4, r2
   15798:	cmp	r3, #0
   1579c:	beq	157a8 <flatcc_builder_table_add_union@@Base+0x38>
   157a0:	cmp	r4, #0
   157a4:	beq	1581c <flatcc_builder_table_add_union@@Base+0xac>
   157a8:	cmp	r7, #0
   157ac:	beq	157c8 <flatcc_builder_table_add_union@@Base+0x58>
   157b0:	mov	r0, r5
   157b4:	mov	r1, r6
   157b8:	bl	1587c <flatcc_builder_table_add_offset@@Base>
   157bc:	cmp	r0, #0
   157c0:	beq	1585c <flatcc_builder_table_add_union@@Base+0xec>
   157c4:	str	r7, [r0]
   157c8:	sub	r1, r6, #1
   157cc:	mov	r0, r5
   157d0:	mov	r2, #1
   157d4:	mov	r3, #1
   157d8:	bl	15940 <flatcc_builder_table_add@@Base>
   157dc:	cmp	r0, #0
   157e0:	beq	1583c <flatcc_builder_table_add_union@@Base+0xcc>
   157e4:	mov	r5, r0
   157e8:	mov	r0, r4
   157ec:	bl	15a20 <flatcc_builder_table_add@@Base+0xe0>
   157f0:	strb	r4, [r5]
   157f4:	mov	r0, #0
   157f8:	pop	{r4, r5, r6, r7, fp, pc}
   157fc:	movw	r0, #35427	; 0x8a63
   15800:	movt	r0, #1
   15804:	movw	r1, #33358	; 0x824e
   15808:	movt	r1, #1
   1580c:	movw	r3, #36181	; 0x8d55
   15810:	movt	r3, #1
   15814:	movw	r2, #1518	; 0x5ee
   15818:	bl	127a8 <__assert_fail@plt>
   1581c:	movw	r0, #36269	; 0x8dad
   15820:	movt	r0, #1
   15824:	movw	r1, #33358	; 0x824e
   15828:	movt	r1, #1
   1582c:	movw	r3, #36181	; 0x8d55
   15830:	movt	r3, #1
   15834:	movw	r2, #1519	; 0x5ef
   15838:	bl	127a8 <__assert_fail@plt>
   1583c:	movw	r0, #36313	; 0x8dd9
   15840:	movt	r0, #1
   15844:	movw	r1, #33358	; 0x824e
   15848:	movt	r1, #1
   1584c:	movw	r3, #36181	; 0x8d55
   15850:	movt	r3, #1
   15854:	movw	r2, #1526	; 0x5f6
   15858:	bl	127a8 <__assert_fail@plt>
   1585c:	movw	r0, #36303	; 0x8dcf
   15860:	movt	r0, #1
   15864:	movw	r1, #33358	; 0x824e
   15868:	movt	r1, #1
   1586c:	movw	r3, #36181	; 0x8d55
   15870:	movt	r3, #1
   15874:	movw	r2, #1522	; 0x5f2
   15878:	bl	127a8 <__assert_fail@plt>

0001587c <flatcc_builder_table_add_offset@@Base>:
   1587c:	push	{fp, lr}
   15880:	mov	fp, sp
   15884:	ldr	r2, [r0, #32]
   15888:	ldrh	r2, [r2, #14]
   1588c:	cmp	r2, #3
   15890:	bne	158e0 <flatcc_builder_table_add_offset@@Base+0x64>
   15894:	movw	r2, #32765	; 0x7ffd
   15898:	cmp	r1, r2
   1589c:	bcs	15900 <flatcc_builder_table_add_offset@@Base+0x84>
   158a0:	ldr	r2, [r0, #4]
   158a4:	add	r2, r2, r1, lsl #1
   158a8:	ldrh	r2, [r2]
   158ac:	cmp	r2, #0
   158b0:	bne	15920 <flatcc_builder_table_add_offset@@Base+0xa4>
   158b4:	ldr	r2, [r0, #12]
   158b8:	eor	r2, r2, r1
   158bc:	movw	r3, #31153	; 0x79b1
   158c0:	movt	r3, #40503	; 0x9e37
   158c4:	mul	r2, r2, r3
   158c8:	eor	r2, r2, #4
   158cc:	mul	r2, r2, r3
   158d0:	str	r2, [r0, #12]
   158d4:	uxth	r1, r1
   158d8:	pop	{fp, lr}
   158dc:	b	1624c <flatcc_builder_table_add_copy@@Base+0x40>
   158e0:	movw	r0, #35427	; 0x8a63
   158e4:	movt	r0, #1
   158e8:	movw	r1, #33358	; 0x824e
   158ec:	movt	r1, #1
   158f0:	movw	r3, #37207	; 0x9157
   158f4:	movt	r3, #1
   158f8:	movw	r2, #1811	; 0x713
   158fc:	bl	127a8 <__assert_fail@plt>
   15900:	movw	r0, #37079	; 0x90d7
   15904:	movt	r0, #1
   15908:	movw	r1, #33358	; 0x824e
   1590c:	movt	r1, #1
   15910:	movw	r3, #37207	; 0x9157
   15914:	movt	r3, #1
   15918:	movw	r2, #1812	; 0x714
   1591c:	bl	127a8 <__assert_fail@plt>
   15920:	movw	r0, #37876	; 0x93f4
   15924:	movt	r0, #1
   15928:	movw	r1, #33358	; 0x824e
   1592c:	movt	r1, #1
   15930:	movw	r3, #37207	; 0x9157
   15934:	movt	r3, #1
   15938:	movw	r2, #1819	; 0x71b
   1593c:	bl	127a8 <__assert_fail@plt>

00015940 <flatcc_builder_table_add@@Base>:
   15940:	push	{fp, lr}
   15944:	mov	fp, sp
   15948:	mov	ip, r3
   1594c:	ldr	r3, [r0, #32]
   15950:	ldrh	r3, [r3, #14]
   15954:	cmp	r3, #3
   15958:	bne	159c0 <flatcc_builder_table_add@@Base+0x80>
   1595c:	movw	r3, #32765	; 0x7ffd
   15960:	cmp	r1, r3
   15964:	bcs	159e0 <flatcc_builder_table_add@@Base+0xa0>
   15968:	mov	lr, r2
   1596c:	ldrh	r3, [r0, #130]	; 0x82
   15970:	cmp	r3, ip
   15974:	strhcc	ip, [r0, #130]	; 0x82
   15978:	ldr	r3, [r0, #4]
   1597c:	add	r3, r3, r1, lsl #1
   15980:	ldrh	r3, [r3]
   15984:	cmp	r3, #0
   15988:	bne	15a00 <flatcc_builder_table_add@@Base+0xc0>
   1598c:	ldr	r3, [r0, #12]
   15990:	eor	r3, r3, r1
   15994:	movw	r2, #31153	; 0x79b1
   15998:	movt	r2, #40503	; 0x9e37
   1599c:	mul	r3, r3, r2
   159a0:	eor	r3, r3, lr
   159a4:	mul	r2, r3, r2
   159a8:	str	r2, [r0, #12]
   159ac:	uxth	r3, r1
   159b0:	mov	r1, lr
   159b4:	mov	r2, ip
   159b8:	pop	{fp, lr}
   159bc:	b	16140 <flatcc_builder_string_len@@Base+0xc>
   159c0:	movw	r0, #35427	; 0x8a63
   159c4:	movt	r0, #1
   159c8:	movw	r1, #33358	; 0x824e
   159cc:	movt	r1, #1
   159d0:	movw	r3, #37005	; 0x908d
   159d4:	movt	r3, #1
   159d8:	movw	r2, #1773	; 0x6ed
   159dc:	bl	127a8 <__assert_fail@plt>
   159e0:	movw	r0, #37079	; 0x90d7
   159e4:	movt	r0, #1
   159e8:	movw	r1, #33358	; 0x824e
   159ec:	movt	r1, #1
   159f0:	movw	r3, #37005	; 0x908d
   159f4:	movt	r3, #1
   159f8:	movw	r2, #1774	; 0x6ee
   159fc:	bl	127a8 <__assert_fail@plt>
   15a00:	movw	r0, #37876	; 0x93f4
   15a04:	movt	r0, #1
   15a08:	movw	r1, #33358	; 0x824e
   15a0c:	movt	r1, #1
   15a10:	movw	r3, #37005	; 0x908d
   15a14:	movt	r3, #1
   15a18:	movw	r2, #1784	; 0x6f8
   15a1c:	bl	127a8 <__assert_fail@plt>
   15a20:	bx	lr

00015a24 <flatcc_builder_table_add_union_vector@@Base>:
   15a24:	push	{r4, r5, r6, r7, fp, lr}
   15a28:	add	fp, sp, #16
   15a2c:	mov	r6, r0
   15a30:	ldr	r0, [r0, #32]
   15a34:	ldrh	r0, [r0, #14]
   15a38:	cmp	r0, #3
   15a3c:	bne	15aa4 <flatcc_builder_table_add_union_vector@@Base+0x80>
   15a40:	mov	r4, r3
   15a44:	mov	r7, r2
   15a48:	mov	r5, r1
   15a4c:	clz	r0, r3
   15a50:	lsr	r0, r0, #5
   15a54:	clz	r1, r2
   15a58:	lsr	r1, r1, #5
   15a5c:	cmp	r1, r0
   15a60:	bne	15ac4 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   15a64:	cmp	r7, #0
   15a68:	beq	15a9c <flatcc_builder_table_add_union_vector@@Base+0x78>
   15a6c:	sub	r1, r5, #1
   15a70:	mov	r0, r6
   15a74:	bl	1587c <flatcc_builder_table_add_offset@@Base>
   15a78:	cmp	r0, #0
   15a7c:	beq	15ae4 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   15a80:	str	r7, [r0]
   15a84:	mov	r0, r6
   15a88:	mov	r1, r5
   15a8c:	bl	1587c <flatcc_builder_table_add_offset@@Base>
   15a90:	cmp	r0, #0
   15a94:	beq	15b04 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15a98:	str	r4, [r0]
   15a9c:	mov	r0, #0
   15aa0:	pop	{r4, r5, r6, r7, fp, pc}
   15aa4:	movw	r0, #35427	; 0x8a63
   15aa8:	movt	r0, #1
   15aac:	movw	r1, #33358	; 0x824e
   15ab0:	movt	r1, #1
   15ab4:	movw	r3, #36325	; 0x8de5
   15ab8:	movt	r3, #1
   15abc:	mov	r2, #1536	; 0x600
   15ac0:	bl	127a8 <__assert_fail@plt>
   15ac4:	movw	r0, #36424	; 0x8e48
   15ac8:	movt	r0, #1
   15acc:	movw	r1, #33358	; 0x824e
   15ad0:	movt	r1, #1
   15ad4:	movw	r3, #36325	; 0x8de5
   15ad8:	movt	r3, #1
   15adc:	movw	r2, #1537	; 0x601
   15ae0:	bl	127a8 <__assert_fail@plt>
   15ae4:	movw	r0, #36303	; 0x8dcf
   15ae8:	movt	r0, #1
   15aec:	movw	r1, #33358	; 0x824e
   15af0:	movt	r1, #1
   15af4:	movw	r3, #36325	; 0x8de5
   15af8:	movt	r3, #1
   15afc:	movw	r2, #1540	; 0x604
   15b00:	bl	127a8 <__assert_fail@plt>
   15b04:	movw	r0, #36303	; 0x8dcf
   15b08:	movt	r0, #1
   15b0c:	movw	r1, #33358	; 0x824e
   15b10:	movt	r1, #1
   15b14:	movw	r3, #36325	; 0x8de5
   15b18:	movt	r3, #1
   15b1c:	movw	r2, #1544	; 0x608
   15b20:	bl	127a8 <__assert_fail@plt>

00015b24 <flatcc_builder_create_union_vector@@Base>:
   15b24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b28:	add	fp, sp, #24
   15b2c:	sub	sp, sp, #16
   15b30:	mov	r6, r3
   15b34:	mov	r7, r2
   15b38:	mov	r4, r1
   15b3c:	mov	r5, r0
   15b40:	mov	r0, #0
   15b44:	str	r0, [r5]
   15b48:	str	r0, [r5, #4]
   15b4c:	mov	r0, r1
   15b50:	bl	148e8 <flatcc_builder_start_offset_vector@@Base>
   15b54:	cmp	r0, #0
   15b58:	beq	15b64 <flatcc_builder_create_union_vector@@Base+0x40>
   15b5c:	sub	sp, fp, #24
   15b60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b64:	mov	r0, r4
   15b68:	mov	r1, r6
   15b6c:	bl	14434 <flatcc_builder_extend_offset_vector@@Base>
   15b70:	cmp	r0, #0
   15b74:	beq	15b5c <flatcc_builder_create_union_vector@@Base+0x38>
   15b78:	mov	r0, r4
   15b7c:	mov	r1, r6
   15b80:	bl	141b0 <flatcc_builder_start_struct@@Base+0x84>
   15b84:	cmp	r0, #0
   15b88:	beq	15b5c <flatcc_builder_create_union_vector@@Base+0x38>
   15b8c:	mov	r8, r0
   15b90:	mov	r0, r4
   15b94:	bl	1575c <flatcc_builder_offset_vector_edit@@Base>
   15b98:	mov	ip, r0
   15b9c:	cmp	r6, #0
   15ba0:	beq	15bd0 <flatcc_builder_create_union_vector@@Base+0xac>
   15ba4:	add	r0, r7, #4
   15ba8:	mov	r1, r6
   15bac:	mov	r2, ip
   15bb0:	mov	r7, r8
   15bb4:	ldrb	r3, [r0, #-4]
   15bb8:	strb	r3, [r7], #1
   15bbc:	ldr	r3, [r0]
   15bc0:	str	r3, [r2], #4
   15bc4:	add	r0, r0, #8
   15bc8:	subs	r1, r1, #1
   15bcc:	bne	15bb4 <flatcc_builder_create_union_vector@@Base+0x90>
   15bd0:	str	r6, [sp]
   15bd4:	add	r0, sp, #8
   15bd8:	mov	r1, r4
   15bdc:	mov	r2, r8
   15be0:	mov	r3, ip
   15be4:	bl	15c04 <flatcc_builder_create_union_vector_direct@@Base>
   15be8:	ldr	r0, [sp, #8]
   15bec:	ldr	r1, [sp, #12]
   15bf0:	stm	r5, {r0, r1}
   15bf4:	mov	r0, r4
   15bf8:	bl	140c0 <flatcc_builder_end_buffer@@Base+0xc8>
   15bfc:	sub	sp, fp, #24
   15c00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00015c04 <flatcc_builder_create_union_vector_direct@@Base>:
   15c04:	push	{r4, r5, r6, r7, fp, lr}
   15c08:	add	fp, sp, #16
   15c0c:	sub	sp, sp, #8
   15c10:	mov	r5, r2
   15c14:	mov	r6, r1
   15c18:	mov	r4, r0
   15c1c:	mov	r0, #0
   15c20:	str	r0, [r4]
   15c24:	str	r0, [r4, #4]
   15c28:	ldr	r7, [fp, #8]
   15c2c:	mov	r0, r1
   15c30:	mov	r1, r3
   15c34:	mov	r2, r7
   15c38:	mov	r3, r5
   15c3c:	bl	15544 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15c40:	str	r0, [r4, #4]
   15c44:	cmp	r0, #0
   15c48:	beq	15c74 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   15c4c:	mvn	r0, #0
   15c50:	mov	r1, #1
   15c54:	str	r1, [sp]
   15c58:	str	r0, [sp, #4]
   15c5c:	mov	r0, r6
   15c60:	mov	r1, r5
   15c64:	mov	r2, r7
   15c68:	mov	r3, #1
   15c6c:	bl	15398 <flatcc_builder_create_vector@@Base>
   15c70:	str	r0, [r4]
   15c74:	sub	sp, fp, #16
   15c78:	pop	{r4, r5, r6, r7, fp, pc}

00015c7c <flatcc_builder_start_union_vector@@Base>:
   15c7c:	push	{r4, r5, fp, lr}
   15c80:	add	fp, sp, #8
   15c84:	mov	r4, r0
   15c88:	mov	r1, #4
   15c8c:	bl	13f00 <flatcc_builder_start_buffer@@Base+0xbc>
   15c90:	mvn	r5, #0
   15c94:	cmp	r0, #0
   15c98:	beq	15ca4 <flatcc_builder_start_union_vector@@Base+0x28>
   15c9c:	mov	r0, r5
   15ca0:	pop	{r4, r5, fp, pc}
   15ca4:	ldr	r0, [r4, #32]
   15ca8:	mov	r1, #8
   15cac:	str	r1, [r0, #16]
   15cb0:	ldr	r0, [r4, #32]
   15cb4:	mov	r5, #0
   15cb8:	str	r5, [r0, #20]
   15cbc:	ldr	r0, [r4, #32]
   15cc0:	mov	r1, #7
   15cc4:	strh	r1, [r0, #14]
   15cc8:	mov	r0, r4
   15ccc:	mvn	r1, #3
   15cd0:	bl	14178 <flatcc_builder_start_struct@@Base+0x4c>
   15cd4:	mov	r0, r5
   15cd8:	pop	{r4, r5, fp, pc}

00015cdc <flatcc_builder_end_union_vector@@Base>:
   15cdc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15ce0:	add	fp, sp, #24
   15ce4:	sub	sp, sp, #16
   15ce8:	mov	r9, r0
   15cec:	mov	r0, #0
   15cf0:	str	r0, [r9]
   15cf4:	str	r0, [r9, #4]
   15cf8:	ldr	r0, [r1, #32]
   15cfc:	ldrh	r0, [r0, #14]
   15d00:	cmp	r0, #7
   15d04:	bne	15da4 <flatcc_builder_end_union_vector@@Base+0xc8>
   15d08:	mov	r4, r1
   15d0c:	mov	r0, r1
   15d10:	bl	15dc4 <flatcc_builder_union_vector_count@@Base>
   15d14:	mov	r6, r0
   15d18:	add	r1, r0, r0, lsl #2
   15d1c:	mov	r0, r4
   15d20:	bl	141b0 <flatcc_builder_start_struct@@Base+0x84>
   15d24:	cmp	r0, #0
   15d28:	beq	15d9c <flatcc_builder_end_union_vector@@Base+0xc0>
   15d2c:	mov	r7, r0
   15d30:	add	r8, r0, r6, lsl #2
   15d34:	mov	r0, r4
   15d38:	bl	15dd0 <flatcc_builder_union_vector_edit@@Base>
   15d3c:	cmp	r6, #0
   15d40:	beq	15d70 <flatcc_builder_end_union_vector@@Base+0x94>
   15d44:	add	r0, r0, #4
   15d48:	mov	r1, r6
   15d4c:	mov	r2, r7
   15d50:	mov	r3, r8
   15d54:	ldrb	r5, [r0, #-4]
   15d58:	strb	r5, [r3], #1
   15d5c:	ldr	r5, [r0]
   15d60:	str	r5, [r2], #4
   15d64:	add	r0, r0, #8
   15d68:	subs	r1, r1, #1
   15d6c:	bne	15d54 <flatcc_builder_end_union_vector@@Base+0x78>
   15d70:	str	r6, [sp]
   15d74:	add	r0, sp, #8
   15d78:	mov	r1, r4
   15d7c:	mov	r2, r8
   15d80:	mov	r3, r7
   15d84:	bl	15c04 <flatcc_builder_create_union_vector_direct@@Base>
   15d88:	ldr	r0, [sp, #8]
   15d8c:	ldr	r1, [sp, #12]
   15d90:	stm	r9, {r0, r1}
   15d94:	mov	r0, r4
   15d98:	bl	140c0 <flatcc_builder_end_buffer@@Base+0xc8>
   15d9c:	sub	sp, fp, #24
   15da0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15da4:	movw	r0, #36464	; 0x8e70
   15da8:	movt	r0, #1
   15dac:	movw	r1, #33358	; 0x824e
   15db0:	movt	r1, #1
   15db4:	movw	r3, #36514	; 0x8ea2
   15db8:	movt	r3, #1
   15dbc:	movw	r2, #1617	; 0x651
   15dc0:	bl	127a8 <__assert_fail@plt>

00015dc4 <flatcc_builder_union_vector_count@@Base>:
   15dc4:	ldr	r0, [r0, #32]
   15dc8:	ldr	r0, [r0, #20]
   15dcc:	bx	lr

00015dd0 <flatcc_builder_union_vector_edit@@Base>:
   15dd0:	ldr	r0, [r0, #16]
   15dd4:	bx	lr

00015dd8 <flatcc_builder_extend_union_vector@@Base>:
   15dd8:	push	{r4, r5, fp, lr}
   15ddc:	add	fp, sp, #8
   15de0:	mov	r5, r1
   15de4:	mov	r4, r0
   15de8:	mvn	r2, #-536870912	; 0xe0000000
   15dec:	bl	142b4 <flatcc_builder_extend_vector@@Base+0x44>
   15df0:	mov	r1, r0
   15df4:	mov	r0, #0
   15df8:	cmp	r1, #0
   15dfc:	popne	{r4, r5, fp, pc}
   15e00:	lsl	r1, r5, #3
   15e04:	mov	r0, r4
   15e08:	bl	141b0 <flatcc_builder_start_struct@@Base+0x84>
   15e0c:	pop	{r4, r5, fp, pc}

00015e10 <flatcc_builder_truncate_union_vector@@Base>:
   15e10:	push	{fp, lr}
   15e14:	mov	fp, sp
   15e18:	ldr	r2, [r0, #32]
   15e1c:	ldrh	r3, [r2, #14]
   15e20:	cmp	r3, #7
   15e24:	bne	15e54 <flatcc_builder_truncate_union_vector@@Base+0x44>
   15e28:	ldr	r3, [r2, #20]
   15e2c:	cmp	r3, r1
   15e30:	bcc	15e74 <flatcc_builder_truncate_union_vector@@Base+0x64>
   15e34:	sub	r3, r3, r1
   15e38:	str	r3, [r2, #20]
   15e3c:	ldr	r2, [r0, #32]
   15e40:	ldr	r2, [r2, #16]
   15e44:	mul	r1, r2, r1
   15e48:	bl	1473c <flatcc_builder_truncate_vector@@Base+0x84>
   15e4c:	mov	r0, #0
   15e50:	pop	{fp, pc}
   15e54:	movw	r0, #36464	; 0x8e70
   15e58:	movt	r0, #1
   15e5c:	movw	r1, #33358	; 0x824e
   15e60:	movt	r1, #1
   15e64:	movw	r3, #36597	; 0x8ef5
   15e68:	movt	r3, #1
   15e6c:	movw	r2, #1665	; 0x681
   15e70:	bl	127a8 <__assert_fail@plt>
   15e74:	movw	r0, #35028	; 0x88d4
   15e78:	movt	r0, #1
   15e7c:	movw	r1, #33358	; 0x824e
   15e80:	movt	r1, #1
   15e84:	movw	r3, #36597	; 0x8ef5
   15e88:	movt	r3, #1
   15e8c:	movw	r2, #1666	; 0x682
   15e90:	bl	127a8 <__assert_fail@plt>

00015e94 <flatcc_builder_union_vector_push@@Base>:
   15e94:	push	{r4, r5, r6, sl, fp, lr}
   15e98:	add	fp, sp, #16
   15e9c:	mov	r4, r2
   15ea0:	mov	r5, r1
   15ea4:	ldr	r1, [r0, #32]
   15ea8:	ldrh	r2, [r1, #14]
   15eac:	cmp	r2, #7
   15eb0:	bne	15eec <flatcc_builder_union_vector_push@@Base+0x58>
   15eb4:	ldr	r2, [r1, #20]
   15eb8:	mov	r6, #0
   15ebc:	cmn	r2, #-536870911	; 0xe0000001
   15ec0:	beq	15ee4 <flatcc_builder_union_vector_push@@Base+0x50>
   15ec4:	add	r2, r2, #1
   15ec8:	str	r2, [r1, #20]
   15ecc:	mov	r1, #8
   15ed0:	bl	141b0 <flatcc_builder_start_struct@@Base+0x84>
   15ed4:	cmp	r0, #0
   15ed8:	strne	r5, [r0]
   15edc:	strne	r4, [r0, #4]
   15ee0:	movne	r6, r0
   15ee4:	mov	r0, r6
   15ee8:	pop	{r4, r5, r6, sl, fp, pc}
   15eec:	movw	r0, #36464	; 0x8e70
   15ef0:	movt	r0, #1
   15ef4:	movw	r1, #33358	; 0x824e
   15ef8:	movt	r1, #1
   15efc:	movw	r3, #36666	; 0x8f3a
   15f00:	movt	r3, #1
   15f04:	movw	r2, #1677	; 0x68d
   15f08:	bl	127a8 <__assert_fail@plt>

00015f0c <flatcc_builder_append_union_vector@@Base>:
   15f0c:	push	{r4, r5, r6, sl, fp, lr}
   15f10:	add	fp, sp, #16
   15f14:	mov	r6, r0
   15f18:	ldr	r0, [r0, #32]
   15f1c:	ldrh	r0, [r0, #14]
   15f20:	cmp	r0, #7
   15f24:	bne	15f64 <flatcc_builder_append_union_vector@@Base+0x58>
   15f28:	mov	r5, r2
   15f2c:	mov	r4, r1
   15f30:	mov	r0, r6
   15f34:	mov	r1, r2
   15f38:	mvn	r2, #-536870912	; 0xe0000000
   15f3c:	bl	142b4 <flatcc_builder_extend_vector@@Base+0x44>
   15f40:	mov	r1, r0
   15f44:	mov	r0, #0
   15f48:	cmp	r1, #0
   15f4c:	popne	{r4, r5, r6, sl, fp, pc}
   15f50:	lsl	r2, r5, #3
   15f54:	mov	r0, r6
   15f58:	mov	r1, r4
   15f5c:	bl	1437c <flatcc_builder_vector_push@@Base+0x80>
   15f60:	pop	{r4, r5, r6, sl, fp, pc}
   15f64:	movw	r0, #36464	; 0x8e70
   15f68:	movt	r0, #1
   15f6c:	movw	r1, #33358	; 0x824e
   15f70:	movt	r1, #1
   15f74:	movw	r3, #36775	; 0x8fa7
   15f78:	movt	r3, #1
   15f7c:	movw	r2, #1692	; 0x69c
   15f80:	bl	127a8 <__assert_fail@plt>

00015f84 <flatcc_builder_create_string@@Base>:
   15f84:	push	{r4, r5, r6, r7, fp, lr}
   15f88:	add	fp, sp, #16
   15f8c:	sub	sp, sp, #80	; 0x50
   15f90:	mov	r5, r2
   15f94:	mov	r6, r1
   15f98:	mov	r4, r0
   15f9c:	mov	r0, r2
   15fa0:	bl	13b00 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15fa4:	str	r5, [fp, #-20]	; 0xffffffec
   15fa8:	add	r1, r5, #1
   15fac:	mov	r7, #4
   15fb0:	mov	r0, r4
   15fb4:	mov	r2, #4
   15fb8:	bl	13aec <flatcc_builder_embed_buffer@@Base+0x1c8>
   15fbc:	str	r7, [sp, #4]
   15fc0:	sub	r1, fp, #20
   15fc4:	str	r1, [sp, #12]
   15fc8:	str	r7, [sp, #16]
   15fcc:	mov	r1, #1
   15fd0:	str	r1, [sp, #8]
   15fd4:	add	r0, r0, #1
   15fd8:	cmp	r5, #0
   15fdc:	beq	15ff8 <flatcc_builder_create_string@@Base+0x74>
   15fe0:	str	r6, [sp, #20]
   15fe4:	str	r5, [sp, #24]
   15fe8:	mov	r1, #2
   15fec:	str	r1, [sp, #8]
   15ff0:	add	r1, r5, #4
   15ff4:	str	r1, [sp, #4]
   15ff8:	cmp	r0, #0
   15ffc:	beq	1602c <flatcc_builder_create_string@@Base+0xa8>
   16000:	ldmib	sp, {r1, r2}
   16004:	add	r1, r1, r0
   16008:	str	r1, [sp, #4]
   1600c:	add	r1, sp, #4
   16010:	add	r1, r1, r2, lsl #3
   16014:	movw	r3, #32828	; 0x803c
   16018:	movt	r3, #1
   1601c:	str	r3, [r1, #8]
   16020:	str	r0, [r1, #12]
   16024:	add	r0, r2, #1
   16028:	str	r0, [sp, #8]
   1602c:	add	r1, sp, #4
   16030:	mov	r0, r4
   16034:	bl	13b04 <flatcc_builder_embed_buffer@@Base+0x1e0>
   16038:	sub	sp, fp, #16
   1603c:	pop	{r4, r5, r6, r7, fp, pc}

00016040 <flatcc_builder_create_string_str@@Base>:
   16040:	push	{r4, r5, fp, lr}
   16044:	add	fp, sp, #8
   16048:	mov	r4, r1
   1604c:	mov	r5, r0
   16050:	mov	r0, r1
   16054:	bl	12760 <strlen@plt>
   16058:	mov	r2, r0
   1605c:	mov	r0, r5
   16060:	mov	r1, r4
   16064:	pop	{r4, r5, fp, lr}
   16068:	b	15f84 <flatcc_builder_create_string@@Base>

0001606c <flatcc_builder_create_string_strn@@Base>:
   1606c:	push	{r4, r5, fp, lr}
   16070:	add	fp, sp, #8
   16074:	mov	r4, r1
   16078:	mov	r5, r0
   1607c:	mov	r0, r1
   16080:	mov	r1, r2
   16084:	bl	1468c <flatcc_builder_append_string_strn@@Base+0x30>
   16088:	mov	r2, r0
   1608c:	mov	r0, r5
   16090:	mov	r1, r4
   16094:	pop	{r4, r5, fp, lr}
   16098:	b	15f84 <flatcc_builder_create_string@@Base>

0001609c <flatcc_builder_end_string@@Base>:
   1609c:	push	{r4, r5, fp, lr}
   160a0:	add	fp, sp, #8
   160a4:	mov	r4, r0
   160a8:	ldr	r0, [r0, #32]
   160ac:	ldrh	r1, [r0, #14]
   160b0:	cmp	r1, #6
   160b4:	bne	160ec <flatcc_builder_end_string@@Base+0x50>
   160b8:	ldr	r2, [r4, #20]
   160bc:	ldr	r0, [r0, #20]
   160c0:	cmp	r0, r2
   160c4:	bne	1610c <flatcc_builder_end_string@@Base+0x70>
   160c8:	ldr	r1, [r4, #16]
   160cc:	mov	r0, r4
   160d0:	bl	15f84 <flatcc_builder_create_string@@Base>
   160d4:	mov	r5, r0
   160d8:	cmp	r0, #0
   160dc:	movne	r0, r4
   160e0:	blne	140c0 <flatcc_builder_end_buffer@@Base+0xc8>
   160e4:	mov	r0, r5
   160e8:	pop	{r4, r5, fp, pc}
   160ec:	movw	r0, #34675	; 0x8773
   160f0:	movt	r0, #1
   160f4:	movw	r1, #33358	; 0x824e
   160f8:	movt	r1, #1
   160fc:	movw	r3, #36902	; 0x9026
   16100:	movt	r3, #1
   16104:	movw	r2, #1732	; 0x6c4
   16108:	bl	127a8 <__assert_fail@plt>
   1610c:	movw	r0, #36969	; 0x9069
   16110:	movt	r0, #1
   16114:	movw	r1, #33358	; 0x824e
   16118:	movt	r1, #1
   1611c:	movw	r3, #36902	; 0x9026
   16120:	movt	r3, #1
   16124:	movw	r2, #1733	; 0x6c5
   16128:	bl	127a8 <__assert_fail@plt>

0001612c <flatcc_builder_string_edit@@Base>:
   1612c:	ldr	r0, [r0, #16]
   16130:	bx	lr

00016134 <flatcc_builder_string_len@@Base>:
   16134:	ldr	r0, [r0, #32]
   16138:	ldr	r0, [r0, #20]
   1613c:	bx	lr
   16140:	push	{r4, r5, r6, sl, fp, lr}
   16144:	add	fp, sp, #16
   16148:	mov	r5, r3
   1614c:	mov	r4, r0
   16150:	ldr	r0, [r0, #20]
   16154:	ldr	r3, [r4, #24]
   16158:	add	r0, r2, r0
   1615c:	sub	r0, r0, #1
   16160:	rsb	r2, r2, #0
   16164:	and	r6, r0, r2
   16168:	add	r0, r6, r1
   1616c:	str	r0, [r4, #20]
   16170:	cmp	r0, r3
   16174:	bcc	16198 <flatcc_builder_string_len@@Base+0x64>
   16178:	add	r1, r0, #1
   1617c:	mov	r0, r4
   16180:	movw	r2, #65532	; 0xfffc
   16184:	bl	165e4 <flatcc_builder_get_emit_context@@Base+0x18>
   16188:	mov	r1, r0
   1618c:	mov	r0, #0
   16190:	cmp	r1, #0
   16194:	popne	{r4, r5, r6, sl, fp, pc}
   16198:	ldr	r0, [r4, #4]
   1619c:	add	r0, r0, r5, lsl #1
   161a0:	add	r1, r6, #4
   161a4:	strh	r1, [r0]
   161a8:	ldrh	r0, [r4, #8]
   161ac:	cmp	r0, r5
   161b0:	addls	r0, r5, #1
   161b4:	strhls	r0, [r4, #8]
   161b8:	ldr	r0, [r4, #16]
   161bc:	add	r0, r0, r6
   161c0:	pop	{r4, r5, r6, sl, fp, pc}

000161c4 <flatcc_builder_table_edit@@Base>:
   161c4:	ldr	r2, [r0, #32]
   161c8:	ldrh	r2, [r2, #14]
   161cc:	cmp	r2, #3
   161d0:	ldreq	r2, [r0, #16]
   161d4:	ldreq	r0, [r0, #20]
   161d8:	addeq	r0, r2, r0
   161dc:	subeq	r0, r0, r1
   161e0:	bxeq	lr
   161e4:	push	{fp, lr}
   161e8:	mov	fp, sp
   161ec:	movw	r0, #35427	; 0x8a63
   161f0:	movt	r0, #1
   161f4:	movw	r1, #33358	; 0x824e
   161f8:	movt	r1, #1
   161fc:	movw	r3, #37147	; 0x911b
   16200:	movt	r3, #1
   16204:	movw	r2, #1794	; 0x702
   16208:	bl	127a8 <__assert_fail@plt>

0001620c <flatcc_builder_table_add_copy@@Base>:
   1620c:	push	{r4, r5, r6, sl, fp, lr}
   16210:	add	fp, sp, #16
   16214:	mov	r4, r3
   16218:	mov	r5, r2
   1621c:	ldr	r3, [fp, #8]
   16220:	mov	r2, r4
   16224:	bl	15940 <flatcc_builder_table_add@@Base>
   16228:	mov	r6, r0
   1622c:	cmp	r0, #0
   16230:	beq	16244 <flatcc_builder_table_add_copy@@Base+0x38>
   16234:	mov	r0, r6
   16238:	mov	r1, r5
   1623c:	mov	r2, r4
   16240:	bl	12718 <memcpy@plt>
   16244:	mov	r0, r6
   16248:	pop	{r4, r5, r6, sl, fp, pc}
   1624c:	push	{r4, r5, r6, r7, fp, lr}
   16250:	add	fp, sp, #16
   16254:	mov	r5, r1
   16258:	mov	r4, r0
   1625c:	ldr	r0, [r0, #20]
   16260:	ldr	r1, [r4, #24]
   16264:	add	r0, r0, #3
   16268:	bic	r7, r0, #3
   1626c:	add	r6, r7, #4
   16270:	str	r6, [r4, #20]
   16274:	cmp	r6, r1
   16278:	bls	1629c <flatcc_builder_table_add_copy@@Base+0x90>
   1627c:	mov	r0, r4
   16280:	mov	r1, r6
   16284:	movw	r2, #65532	; 0xfffc
   16288:	bl	165e4 <flatcc_builder_get_emit_context@@Base+0x18>
   1628c:	mov	r1, r0
   16290:	mov	r0, #0
   16294:	cmp	r1, #0
   16298:	popne	{r4, r5, r6, r7, fp, pc}
   1629c:	ldr	r0, [r4, #4]
   162a0:	add	r0, r0, r5, lsl #1
   162a4:	strh	r6, [r0]
   162a8:	ldrh	r0, [r4, #8]
   162ac:	cmp	r0, r5
   162b0:	addls	r0, r5, #1
   162b4:	strhls	r0, [r4, #8]
   162b8:	ldr	r0, [r4]
   162bc:	add	r1, r0, #2
   162c0:	str	r1, [r4]
   162c4:	strh	r7, [r0]
   162c8:	ldr	r0, [r4, #16]
   162cc:	add	r0, r0, r7
   162d0:	pop	{r4, r5, r6, r7, fp, pc}

000162d4 <flatcc_builder_push_buffer_alignment@@Base>:
   162d4:	ldrh	r1, [r0, #128]	; 0x80
   162d8:	mov	r2, #4
   162dc:	strh	r2, [r0, #128]	; 0x80
   162e0:	mov	r0, r1
   162e4:	bx	lr

000162e8 <flatcc_builder_pop_buffer_alignment@@Base>:
   162e8:	b	13d68 <flatcc_builder_create_buffer@@Base+0x1d0>

000162ec <flatcc_builder_get_buffer_alignment@@Base>:
   162ec:	ldrh	r0, [r0, #128]	; 0x80
   162f0:	bx	lr

000162f4 <flatcc_builder_set_vtable_clustering@@Base>:
   162f4:	clz	r1, r1
   162f8:	lsr	r1, r1, #5
   162fc:	str	r1, [r0, #180]	; 0xb4
   16300:	bx	lr

00016304 <flatcc_builder_set_block_align@@Base>:
   16304:	strh	r1, [r0, #132]	; 0x84
   16308:	bx	lr

0001630c <flatcc_builder_get_level@@Base>:
   1630c:	ldr	r0, [r0, #156]	; 0x9c
   16310:	bx	lr

00016314 <flatcc_builder_set_max_level@@Base>:
   16314:	str	r1, [r0, #176]	; 0xb0
   16318:	ldr	r2, [r0, #160]	; 0xa0
   1631c:	cmp	r2, r1
   16320:	strlt	r1, [r0, #160]	; 0xa0
   16324:	bx	lr

00016328 <flatcc_builder_get_buffer_size@@Base>:
   16328:	ldr	r1, [r0, #136]	; 0x88
   1632c:	ldr	r0, [r0, #140]	; 0x8c
   16330:	sub	r0, r0, r1
   16334:	bx	lr

00016338 <flatcc_builder_get_buffer_start@@Base>:
   16338:	ldr	r0, [r0, #136]	; 0x88
   1633c:	bx	lr

00016340 <flatcc_builder_get_buffer_end@@Base>:
   16340:	ldr	r0, [r0, #140]	; 0x8c
   16344:	bx	lr

00016348 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16348:	str	r1, [r0, #172]	; 0xac
   1634c:	bx	lr

00016350 <flatcc_builder_set_identifier@@Base>:
   16350:	movw	r2, #32828	; 0x803c
   16354:	movt	r2, #1
   16358:	cmp	r1, #0
   1635c:	movne	r2, r1
   16360:	ldr	r1, [r2]
   16364:	str	r1, [r0, #168]	; 0xa8
   16368:	bx	lr

0001636c <flatcc_builder_get_type@@Base>:
   1636c:	ldr	r0, [r0, #32]
   16370:	cmp	r0, #0
   16374:	ldrhne	r0, [r0, #14]
   16378:	moveq	r0, #0
   1637c:	bx	lr

00016380 <flatcc_builder_get_type_at@@Base>:
   16380:	mov	r2, r0
   16384:	mov	r0, #0
   16388:	cmp	r1, #1
   1638c:	ldrge	r3, [r2, #156]	; 0x9c
   16390:	cmpge	r3, r1
   16394:	bge	1639c <flatcc_builder_get_type_at@@Base+0x1c>
   16398:	bx	lr
   1639c:	sub	r0, r1, r3
   163a0:	add	r0, r0, r0, lsl #3
   163a4:	ldr	r1, [r2, #32]
   163a8:	add	r0, r1, r0, lsl #2
   163ac:	ldrh	r0, [r0, #14]
   163b0:	bx	lr

000163b4 <flatcc_builder_get_direct_buffer@@Base>:
   163b4:	ldr	r2, [r0, #184]	; 0xb8
   163b8:	cmp	r2, #0
   163bc:	beq	163c8 <flatcc_builder_get_direct_buffer@@Base+0x14>
   163c0:	add	r0, r0, #188	; 0xbc
   163c4:	b	163dc <flatcc_builder_get_direct_buffer@@Base+0x28>
   163c8:	cmp	r1, #0
   163cc:	movne	r0, #0
   163d0:	strne	r0, [r1]
   163d4:	mov	r0, #0
   163d8:	bx	lr
   163dc:	ldm	r0, {r2, r3}
   163e0:	cmp	r2, r3
   163e4:	beq	163f8 <flatcc_builder_get_direct_buffer@@Base+0x44>
   163e8:	mov	r0, #0
   163ec:	cmp	r1, #0
   163f0:	strne	r0, [r1]
   163f4:	bx	lr
   163f8:	cmp	r1, #0
   163fc:	ldrne	r2, [r0, #24]
   16400:	strne	r2, [r1]
   16404:	ldr	r0, [r0, #8]
   16408:	bx	lr

0001640c <flatcc_builder_copy_buffer@@Base>:
   1640c:	push	{fp, lr}
   16410:	mov	fp, sp
   16414:	ldr	r3, [r0, #184]	; 0xb8
   16418:	cmp	r3, #0
   1641c:	beq	16450 <flatcc_builder_copy_buffer@@Base+0x44>
   16420:	add	r0, r0, #188	; 0xbc
   16424:	bl	16b28 <flatcc_emitter_copy_buffer@@Base>
   16428:	cmp	r0, #0
   1642c:	popne	{fp, pc}
   16430:	movw	r0, #33954	; 0x84a2
   16434:	movt	r0, #1
   16438:	movw	r1, #33358	; 0x824e
   1643c:	movt	r1, #1
   16440:	movw	r3, #37286	; 0x91a6
   16444:	movt	r3, #1
   16448:	movw	r2, #1926	; 0x786
   1644c:	bl	127a8 <__assert_fail@plt>
   16450:	mov	r0, #0
   16454:	pop	{fp, pc}

00016458 <flatcc_builder_finalize_buffer@@Base>:
   16458:	push	{r4, r5, r6, sl, fp, lr}
   1645c:	add	fp, sp, #16
   16460:	mov	r6, r1
   16464:	mov	r4, r0
   16468:	bl	16328 <flatcc_builder_get_buffer_size@@Base>
   1646c:	mov	r5, r0
   16470:	cmp	r6, #0
   16474:	strne	r5, [r6]
   16478:	mov	r0, r5
   1647c:	bl	1273c <malloc@plt>
   16480:	cmp	r0, #0
   16484:	beq	164c8 <flatcc_builder_finalize_buffer@@Base+0x70>
   16488:	mov	r6, r0
   1648c:	mov	r0, r4
   16490:	mov	r1, r6
   16494:	mov	r2, r5
   16498:	bl	1640c <flatcc_builder_copy_buffer@@Base>
   1649c:	cmp	r0, #0
   164a0:	movne	r0, r6
   164a4:	popne	{r4, r5, r6, sl, fp, pc}
   164a8:	movw	r0, #37876	; 0x93f4
   164ac:	movt	r0, #1
   164b0:	movw	r1, #33358	; 0x824e
   164b4:	movt	r1, #1
   164b8:	movw	r3, #37355	; 0x91eb
   164bc:	movt	r3, #1
   164c0:	movw	r2, #1948	; 0x79c
   164c4:	bl	127a8 <__assert_fail@plt>
   164c8:	movw	r0, #37876	; 0x93f4
   164cc:	movt	r0, #1
   164d0:	movw	r1, #33358	; 0x824e
   164d4:	movt	r1, #1
   164d8:	movw	r3, #37355	; 0x91eb
   164dc:	movt	r3, #1
   164e0:	movw	r2, #1944	; 0x798
   164e4:	bl	127a8 <__assert_fail@plt>

000164e8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   164e8:	push	{r4, r5, r6, r7, fp, lr}
   164ec:	add	fp, sp, #16
   164f0:	mov	r4, r1
   164f4:	mov	r5, r0
   164f8:	bl	16328 <flatcc_builder_get_buffer_size@@Base>
   164fc:	mov	r6, r0
   16500:	cmp	r4, #0
   16504:	strne	r6, [r4]
   16508:	mov	r0, r5
   1650c:	bl	162ec <flatcc_builder_get_buffer_alignment@@Base>
   16510:	add	r1, r6, r0
   16514:	sub	r1, r1, #1
   16518:	rsb	r2, r0, #0
   1651c:	and	r7, r1, r2
   16520:	mov	r1, r7
   16524:	bl	16570 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   16528:	cmp	r0, #0
   1652c:	beq	1655c <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   16530:	mov	r6, r0
   16534:	mov	r0, r5
   16538:	mov	r1, r6
   1653c:	mov	r2, r7
   16540:	bl	1640c <flatcc_builder_copy_buffer@@Base>
   16544:	cmp	r0, #0
   16548:	beq	16554 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   1654c:	mov	r0, r6
   16550:	pop	{r4, r5, r6, r7, fp, pc}
   16554:	mov	r0, r6
   16558:	bl	1270c <free@plt>
   1655c:	mov	r6, #0
   16560:	cmp	r4, #0
   16564:	strne	r6, [r4]
   16568:	mov	r0, r6
   1656c:	pop	{r4, r5, r6, r7, fp, pc}
   16570:	push	{fp, lr}
   16574:	mov	fp, sp
   16578:	sub	sp, sp, #8
   1657c:	mov	r2, r1
   16580:	mov	r1, r0
   16584:	mov	r0, #0
   16588:	str	r0, [sp, #4]
   1658c:	cmp	r1, #4
   16590:	movls	r1, #4
   16594:	add	r0, sp, #4
   16598:	bl	1276c <posix_memalign@plt>
   1659c:	cmp	r0, #0
   165a0:	ldrne	r0, [sp, #4]
   165a4:	cmpne	r0, #0
   165a8:	beq	165b8 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   165ac:	bl	1270c <free@plt>
   165b0:	mov	r0, #0
   165b4:	str	r0, [sp, #4]
   165b8:	ldr	r0, [sp, #4]
   165bc:	mov	sp, fp
   165c0:	pop	{fp, pc}

000165c4 <flatcc_builder_aligned_alloc@@Base>:
   165c4:	b	16570 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

000165c8 <flatcc_builder_aligned_free@@Base>:
   165c8:	b	1270c <free@plt>

000165cc <flatcc_builder_get_emit_context@@Base>:
   165cc:	ldr	r0, [r0, #36]	; 0x24
   165d0:	bx	lr
   165d4:	ldr	r0, [r0, #140]	; 0x8c
   165d8:	sub	r1, r1, #1
   165dc:	and	r0, r0, r1
   165e0:	bx	lr
   165e4:	push	{r4, r5, r6, sl, fp, lr}
   165e8:	add	fp, sp, #16
   165ec:	sub	sp, sp, #8
   165f0:	mov	r6, r2
   165f4:	mov	r5, r0
   165f8:	ldr	r2, [r0, #28]
   165fc:	ldr	r0, [r0, #40]	; 0x28
   16600:	ldr	r4, [r5, #48]	; 0x30
   16604:	mov	r3, #1
   16608:	str	r3, [sp]
   1660c:	add	r2, r2, r1
   16610:	add	r1, r5, #60	; 0x3c
   16614:	mov	r3, #1
   16618:	blx	r4
   1661c:	mov	r1, r0
   16620:	mvn	r0, #0
   16624:	cmp	r1, #0
   16628:	beq	16634 <flatcc_builder_get_emit_context@@Base+0x68>
   1662c:	sub	sp, fp, #16
   16630:	pop	{r4, r5, r6, sl, fp, pc}
   16634:	mov	r0, r5
   16638:	mov	r1, r6
   1663c:	bl	14178 <flatcc_builder_start_struct@@Base+0x4c>
   16640:	mov	r0, #0
   16644:	sub	sp, fp, #16
   16648:	pop	{r4, r5, r6, sl, fp, pc}
   1664c:	push	{r4, r5, r6, sl, fp, lr}
   16650:	add	fp, sp, #16
   16654:	sub	sp, sp, #8
   16658:	ldr	r2, [r0, #124]	; 0x7c
   1665c:	cmp	r2, #0
   16660:	bne	16700 <flatcc_builder_get_emit_context@@Base+0x134>
   16664:	mov	r4, r0
   16668:	mov	r0, #0
   1666c:	str	r0, [sp]
   16670:	mov	r6, #16
   16674:	mov	r0, r4
   16678:	mov	r1, #6
   1667c:	mov	r3, #16
   16680:	bl	13794 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   16684:	mvn	r5, #0
   16688:	cmp	r0, #0
   1668c:	beq	166f4 <flatcc_builder_get_emit_context@@Base+0x128>
   16690:	add	r1, r4, #92	; 0x5c
   16694:	str	r6, [r4, #124]	; 0x7c
   16698:	ldr	r0, [r4, #40]	; 0x28
   1669c:	ldr	ip, [r4, #48]	; 0x30
   166a0:	mov	r2, #5
   166a4:	str	r2, [sp]
   166a8:	mov	r6, #256	; 0x100
   166ac:	mov	r2, #256	; 0x100
   166b0:	mov	r3, #1
   166b4:	blx	ip
   166b8:	cmp	r0, #0
   166bc:	bne	166f4 <flatcc_builder_get_emit_context@@Base+0x128>
   166c0:	ldr	r0, [r4, #96]	; 0x60
   166c4:	mov	r1, r6
   166c8:	lsl	r6, r6, #1
   166cc:	cmp	r0, r1, lsl #1
   166d0:	bcs	166c4 <flatcc_builder_get_emit_context@@Base+0xf8>
   166d4:	lsr	r1, r1, #2
   166d8:	mvn	r0, #0
   166dc:	mov	r2, #1
   166e0:	add	r0, r0, #1
   166e4:	cmp	r1, r2, lsl r0
   166e8:	bhi	166e0 <flatcc_builder_get_emit_context@@Base+0x114>
   166ec:	str	r0, [r4, #116]	; 0x74
   166f0:	mov	r5, #0
   166f4:	mov	r0, r5
   166f8:	sub	sp, fp, #16
   166fc:	pop	{r4, r5, r6, sl, fp, pc}
   16700:	movw	r0, #37816	; 0x93b8
   16704:	movt	r0, #1
   16708:	movw	r1, #33358	; 0x824e
   1670c:	movt	r1, #1
   16710:	movw	r3, #37831	; 0x93c7
   16714:	movt	r3, #1
   16718:	movw	r2, #342	; 0x156
   1671c:	bl	127a8 <__assert_fail@plt>

00016720 <flatcc_emitter_recycle_page@@Base>:
   16720:	ldr	ip, [r0]
   16724:	mvn	r2, #0
   16728:	cmp	ip, r1
   1672c:	ldrne	r3, [r0, #4]
   16730:	cmpne	r3, r1
   16734:	bne	16740 <flatcc_emitter_recycle_page@@Base+0x20>
   16738:	mov	r0, r2
   1673c:	bx	lr
   16740:	ldr	r2, [r1, #2944]	; 0xb80
   16744:	ldr	r3, [r1, #2948]	; 0xb84
   16748:	str	r3, [r2, #2948]	; 0xb84
   1674c:	ldr	r2, [r1, #2944]	; 0xb80
   16750:	ldr	r3, [r1, #2948]	; 0xb84
   16754:	str	r2, [r3, #2944]	; 0xb80
   16758:	ldr	r2, [ip, #2948]	; 0xb84
   1675c:	str	r2, [r1, #2948]	; 0xb84
   16760:	ldr	r0, [r0]
   16764:	str	r0, [r1, #2944]	; 0xb80
   16768:	str	r1, [r2, #2944]	; 0xb80
   1676c:	ldr	r0, [r1, #2944]	; 0xb80
   16770:	str	r1, [r0, #2948]	; 0xb84
   16774:	mov	r2, #0
   16778:	mov	r0, r2
   1677c:	bx	lr

00016780 <flatcc_emitter_reset@@Base>:
   16780:	push	{r4, sl, fp, lr}
   16784:	add	fp, sp, #8
   16788:	mov	r4, r0
   1678c:	ldr	r0, [r0]
   16790:	cmp	r0, #0
   16794:	beq	16838 <flatcc_emitter_reset@@Base+0xb8>
   16798:	mov	r1, #1472	; 0x5c0
   1679c:	add	r2, r0, #1472	; 0x5c0
   167a0:	stmib	r4, {r0, r2}
   167a4:	str	r1, [r4, #12]
   167a8:	str	r2, [r4, #16]
   167ac:	str	r1, [r4, #20]
   167b0:	movw	r1, #64064	; 0xfa40
   167b4:	movt	r1, #65535	; 0xffff
   167b8:	str	r1, [r0, #2952]	; 0xb88
   167bc:	ldr	r0, [r4, #32]
   167c0:	cmp	r0, #0
   167c4:	ldreq	r0, [r4, #24]
   167c8:	streq	r0, [r4, #32]
   167cc:	add	r2, r4, #24
   167d0:	ldm	r2, {r0, r1, r2}
   167d4:	mov	r3, #0
   167d8:	str	r3, [r4, #24]
   167dc:	add	r2, r2, r2, lsl #1
   167e0:	lsr	r2, r2, #2
   167e4:	add	r0, r2, r0, lsr #2
   167e8:	str	r0, [r4, #32]
   167ec:	cmp	r1, r0, lsl #1
   167f0:	bls	16838 <flatcc_emitter_reset@@Base+0xb8>
   167f4:	ldr	r2, [r4]
   167f8:	ldr	r1, [r4, #4]
   167fc:	ldr	r0, [r1, #2944]	; 0xb80
   16800:	cmp	r0, r2
   16804:	popeq	{r4, sl, fp, pc}
   16808:	ldr	r2, [r0, #2944]	; 0xb80
   1680c:	str	r2, [r1, #2944]	; 0xb80
   16810:	ldr	r1, [r0, #2944]	; 0xb80
   16814:	ldr	r2, [r4, #4]
   16818:	str	r2, [r1, #2948]	; 0xb84
   1681c:	bl	1270c <free@plt>
   16820:	ldr	r0, [r4, #28]
   16824:	ldr	r1, [r4, #32]
   16828:	sub	r0, r0, #2944	; 0xb80
   1682c:	str	r0, [r4, #28]
   16830:	cmp	r0, r1, lsl #1
   16834:	bhi	167f4 <flatcc_emitter_reset@@Base+0x74>
   16838:	pop	{r4, sl, fp, pc}

0001683c <flatcc_emitter_clear@@Base>:
   1683c:	push	{r4, r5, r6, sl, fp, lr}
   16840:	add	fp, sp, #16
   16844:	ldr	r5, [r0]
   16848:	cmp	r5, #0
   1684c:	popeq	{r4, r5, r6, sl, fp, pc}
   16850:	mov	r4, r0
   16854:	ldr	r0, [r5, #2948]	; 0xb84
   16858:	mov	r6, #0
   1685c:	str	r6, [r0, #2944]	; 0xb80
   16860:	b	16870 <flatcc_emitter_clear@@Base+0x34>
   16864:	mov	r5, r0
   16868:	ldr	r0, [r0, #2948]	; 0xb84
   1686c:	bl	1270c <free@plt>
   16870:	ldr	r0, [r5, #2944]	; 0xb80
   16874:	cmp	r0, #0
   16878:	bne	16864 <flatcc_emitter_clear@@Base+0x28>
   1687c:	mov	r0, r5
   16880:	bl	1270c <free@plt>
   16884:	vmov.i32	q8, #0	; 0x00000000
   16888:	add	r0, r4, #16
   1688c:	vst1.32	{d16-d17}, [r0]
   16890:	mov	r0, #32
   16894:	vst1.32	{d16-d17}, [r4], r0
   16898:	str	r6, [r4]
   1689c:	pop	{r4, r5, r6, sl, fp, pc}

000168a0 <flatcc_emitter@@Base>:
   168a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   168a4:	add	fp, sp, #24
   168a8:	mov	r4, r2
   168ac:	mov	r5, r1
   168b0:	mov	r6, r0
   168b4:	ldr	r1, [r0, #24]
   168b8:	ldr	r0, [fp, #8]
   168bc:	add	r1, r1, r0
   168c0:	str	r1, [r6, #24]
   168c4:	mov	r1, r6
   168c8:	cmn	r3, #1
   168cc:	ble	1690c <flatcc_emitter@@Base+0x6c>
   168d0:	ldr	r2, [r1, #20]!
   168d4:	cmp	r2, r0
   168d8:	bcs	16954 <flatcc_emitter@@Base+0xb4>
   168dc:	mov	r8, #0
   168e0:	cmp	r4, #0
   168e4:	beq	169a4 <flatcc_emitter@@Base+0x104>
   168e8:	ldm	r5, {r1, r2}
   168ec:	mov	r0, r6
   168f0:	bl	16a70 <flatcc_emitter@@Base+0x1d0>
   168f4:	cmp	r0, #0
   168f8:	bne	16948 <flatcc_emitter@@Base+0xa8>
   168fc:	subs	r4, r4, #1
   16900:	add	r5, r5, #8
   16904:	bne	168e8 <flatcc_emitter@@Base+0x48>
   16908:	b	169a4 <flatcc_emitter@@Base+0x104>
   1690c:	ldr	r2, [r1, #12]!
   16910:	cmp	r2, r0
   16914:	bcs	16964 <flatcc_emitter@@Base+0xc4>
   16918:	add	r0, r5, r4, lsl #3
   1691c:	sub	r5, r0, #4
   16920:	rsb	r4, r4, #1
   16924:	cmp	r4, #1
   16928:	beq	169ac <flatcc_emitter@@Base+0x10c>
   1692c:	ldmda	r5, {r1, r2}
   16930:	mov	r0, r6
   16934:	bl	169b8 <flatcc_emitter@@Base+0x118>
   16938:	sub	r5, r5, #8
   1693c:	add	r4, r4, #1
   16940:	cmp	r0, #0
   16944:	beq	16924 <flatcc_emitter@@Base+0x84>
   16948:	mvn	r8, #0
   1694c:	mov	r0, r8
   16950:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16954:	ldr	r7, [r6, #16]
   16958:	add	r3, r7, r0
   1695c:	str	r3, [r6, #16]
   16960:	b	16970 <flatcc_emitter@@Base+0xd0>
   16964:	ldr	r3, [r6, #8]
   16968:	sub	r7, r3, r0
   1696c:	str	r7, [r6, #8]
   16970:	sub	r0, r2, r0
   16974:	str	r0, [r1]
   16978:	mov	r8, #0
   1697c:	cmp	r4, #0
   16980:	beq	169a4 <flatcc_emitter@@Base+0x104>
   16984:	ldm	r5, {r1, r2}
   16988:	mov	r0, r7
   1698c:	bl	12718 <memcpy@plt>
   16990:	ldr	r0, [r5, #4]
   16994:	add	r7, r7, r0
   16998:	add	r5, r5, #8
   1699c:	subs	r4, r4, #1
   169a0:	bne	16984 <flatcc_emitter@@Base+0xe4>
   169a4:	mov	r0, r8
   169a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169ac:	mov	r8, #0
   169b0:	mov	r0, r8
   169b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169b8:	push	{r4, r5, r6, r7, fp, lr}
   169bc:	add	fp, sp, #16
   169c0:	cmp	r2, #0
   169c4:	moveq	r0, #0
   169c8:	popeq	{r4, r5, r6, r7, fp, pc}
   169cc:	mov	r4, r2
   169d0:	mov	r5, r0
   169d4:	clz	r0, r2
   169d8:	lsr	r7, r0, #5
   169dc:	add	r6, r1, r2
   169e0:	b	16a1c <flatcc_emitter@@Base+0x17c>
   169e4:	sub	r0, r0, r7
   169e8:	str	r0, [r5, #12]
   169ec:	ldr	r0, [r5, #8]
   169f0:	sub	r0, r0, r7
   169f4:	str	r0, [r5, #8]
   169f8:	sub	r6, r6, r7
   169fc:	mov	r1, r6
   16a00:	mov	r2, r7
   16a04:	bl	12718 <memcpy@plt>
   16a08:	subs	r4, r4, r7
   16a0c:	clz	r0, r4
   16a10:	lsr	r7, r0, #5
   16a14:	moveq	r0, #0
   16a18:	popeq	{r4, r5, r6, r7, fp, pc}
   16a1c:	ldr	r0, [r5, #12]
   16a20:	cmp	r4, r0
   16a24:	bls	16a54 <flatcc_emitter@@Base+0x1b4>
   16a28:	cmp	r0, #0
   16a2c:	bne	16a5c <flatcc_emitter@@Base+0x1bc>
   16a30:	mov	r0, r5
   16a34:	bl	16be4 <flatcc_emitter_copy_buffer@@Base+0xbc>
   16a38:	cmp	r0, #0
   16a3c:	mov	r1, r0
   16a40:	movwne	r1, #1
   16a44:	orr	r1, r1, r7
   16a48:	tst	r1, #1
   16a4c:	beq	16a1c <flatcc_emitter@@Base+0x17c>
   16a50:	b	16a64 <flatcc_emitter@@Base+0x1c4>
   16a54:	mov	r7, r4
   16a58:	b	169e4 <flatcc_emitter@@Base+0x144>
   16a5c:	mov	r7, r0
   16a60:	b	169e4 <flatcc_emitter@@Base+0x144>
   16a64:	cmp	r0, #0
   16a68:	mvnne	r0, #0
   16a6c:	pop	{r4, r5, r6, r7, fp, pc}
   16a70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16a74:	add	fp, sp, #24
   16a78:	cmp	r2, #0
   16a7c:	moveq	r0, #0
   16a80:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16a84:	mov	r4, r2
   16a88:	mov	r8, r1
   16a8c:	mov	r6, r0
   16a90:	clz	r0, r2
   16a94:	lsr	r5, r0, #5
   16a98:	b	16adc <flatcc_emitter@@Base+0x23c>
   16a9c:	ldr	r0, [r6, #16]
   16aa0:	mov	r1, r8
   16aa4:	mov	r2, r7
   16aa8:	bl	12718 <memcpy@plt>
   16aac:	ldr	r0, [r6, #16]
   16ab0:	ldr	r1, [r6, #20]
   16ab4:	add	r0, r0, r7
   16ab8:	sub	r1, r1, r7
   16abc:	str	r0, [r6, #16]
   16ac0:	str	r1, [r6, #20]
   16ac4:	add	r8, r8, r7
   16ac8:	subs	r4, r4, r7
   16acc:	clz	r0, r4
   16ad0:	lsr	r5, r0, #5
   16ad4:	moveq	r0, #0
   16ad8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16adc:	ldr	r7, [r6, #20]
   16ae0:	cmp	r4, r7
   16ae4:	bls	16b14 <flatcc_emitter@@Base+0x274>
   16ae8:	cmp	r7, #0
   16aec:	bne	16a9c <flatcc_emitter@@Base+0x1fc>
   16af0:	mov	r0, r6
   16af4:	bl	16cd0 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   16af8:	cmp	r0, #0
   16afc:	mov	r1, r0
   16b00:	movwne	r1, #1
   16b04:	orr	r1, r1, r5
   16b08:	tst	r1, #1
   16b0c:	beq	16adc <flatcc_emitter@@Base+0x23c>
   16b10:	b	16b1c <flatcc_emitter@@Base+0x27c>
   16b14:	mov	r7, r4
   16b18:	b	16a9c <flatcc_emitter@@Base+0x1fc>
   16b1c:	cmp	r0, #0
   16b20:	mvnne	r0, #0
   16b24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016b28 <flatcc_emitter_copy_buffer@@Base>:
   16b28:	push	{r4, r5, r6, sl, fp, lr}
   16b2c:	add	fp, sp, #16
   16b30:	mov	r3, r2
   16b34:	ldr	r2, [r0, #24]
   16b38:	mov	r5, #0
   16b3c:	cmp	r2, r3
   16b40:	bhi	16bc8 <flatcc_emitter_copy_buffer@@Base+0xa0>
   16b44:	mov	r4, r0
   16b48:	ldr	r0, [r0]
   16b4c:	cmp	r0, #0
   16b50:	beq	16bc8 <flatcc_emitter_copy_buffer@@Base+0xa0>
   16b54:	mov	r6, r1
   16b58:	ldr	r1, [r4, #4]
   16b5c:	cmp	r0, r1
   16b60:	beq	16bd0 <flatcc_emitter_copy_buffer@@Base+0xa8>
   16b64:	ldr	r1, [r4, #8]
   16b68:	ldr	r0, [r4, #12]
   16b6c:	rsb	r5, r0, #2944	; 0xb80
   16b70:	mov	r0, r6
   16b74:	mov	r2, r5
   16b78:	bl	12718 <memcpy@plt>
   16b7c:	add	r5, r6, r5
   16b80:	ldm	r4, {r0, r1}
   16b84:	ldr	r6, [r0, #2944]	; 0xb80
   16b88:	cmp	r6, r1
   16b8c:	beq	16bb4 <flatcc_emitter_copy_buffer@@Base+0x8c>
   16b90:	mov	r0, r5
   16b94:	mov	r1, r6
   16b98:	mov	r2, #2944	; 0xb80
   16b9c:	bl	12718 <memcpy@plt>
   16ba0:	add	r5, r5, #2944	; 0xb80
   16ba4:	ldr	r6, [r6, #2944]	; 0xb80
   16ba8:	ldr	r0, [r4, #4]
   16bac:	cmp	r6, r0
   16bb0:	bne	16b90 <flatcc_emitter_copy_buffer@@Base+0x68>
   16bb4:	ldr	r0, [r4, #20]
   16bb8:	rsb	r2, r0, #2944	; 0xb80
   16bbc:	mov	r0, r5
   16bc0:	mov	r1, r6
   16bc4:	bl	12718 <memcpy@plt>
   16bc8:	mov	r0, r5
   16bcc:	pop	{r4, r5, r6, sl, fp, pc}
   16bd0:	ldr	r1, [r4, #8]
   16bd4:	mov	r0, r6
   16bd8:	bl	12718 <memcpy@plt>
   16bdc:	mov	r0, r6
   16be0:	pop	{r4, r5, r6, sl, fp, pc}
   16be4:	push	{r4, r5, fp, lr}
   16be8:	add	fp, sp, #8
   16bec:	mov	r4, r0
   16bf0:	ldr	r5, [r0]
   16bf4:	cmp	r5, #0
   16bf8:	beq	16c20 <flatcc_emitter_copy_buffer@@Base+0xf8>
   16bfc:	ldr	r0, [r5, #2948]	; 0xb84
   16c00:	ldr	r1, [r4, #4]
   16c04:	cmp	r0, r1
   16c08:	beq	16c20 <flatcc_emitter_copy_buffer@@Base+0xf8>
   16c0c:	ldr	r1, [r5, #2952]	; 0xb88
   16c10:	sub	r1, r1, #2944	; 0xb80
   16c14:	str	r1, [r0, #2952]	; 0xb88
   16c18:	ldr	r0, [r5, #2948]	; 0xb84
   16c1c:	b	16c60 <flatcc_emitter_copy_buffer@@Base+0x138>
   16c20:	movw	r0, #2956	; 0xb8c
   16c24:	bl	1273c <malloc@plt>
   16c28:	cmp	r0, #0
   16c2c:	mvneq	r0, #0
   16c30:	popeq	{r4, r5, fp, pc}
   16c34:	ldr	r1, [r4, #28]
   16c38:	add	r1, r1, #2944	; 0xb80
   16c3c:	str	r1, [r4, #28]
   16c40:	cmp	r5, #0
   16c44:	beq	16c90 <flatcc_emitter_copy_buffer@@Base+0x168>
   16c48:	ldm	r4, {r1, r2}
   16c4c:	str	r1, [r0, #2944]	; 0xb80
   16c50:	str	r2, [r0, #2948]	; 0xb84
   16c54:	str	r0, [r1, #2948]	; 0xb84
   16c58:	ldr	r1, [r4, #4]
   16c5c:	str	r0, [r1, #2944]	; 0xb80
   16c60:	str	r0, [r4]
   16c64:	mov	r0, #2944	; 0xb80
   16c68:	ldr	r1, [r4]
   16c6c:	add	r2, r1, #2944	; 0xb80
   16c70:	str	r2, [r4, #8]
   16c74:	str	r0, [r4, #12]
   16c78:	ldr	r0, [r1, #2944]	; 0xb80
   16c7c:	ldr	r0, [r0, #2952]	; 0xb88
   16c80:	sub	r0, r0, #2944	; 0xb80
   16c84:	str	r0, [r1, #2952]	; 0xb88
   16c88:	mov	r0, #0
   16c8c:	pop	{r4, r5, fp, pc}
   16c90:	str	r0, [r4, #4]
   16c94:	str	r0, [r4]
   16c98:	mov	r1, #1472	; 0x5c0
   16c9c:	str	r1, [r4, #12]
   16ca0:	str	r1, [r4, #20]
   16ca4:	ldr	r1, [r4]
   16ca8:	add	r1, r1, #1472	; 0x5c0
   16cac:	str	r1, [r4, #8]
   16cb0:	str	r1, [r4, #16]
   16cb4:	movw	r1, #64064	; 0xfa40
   16cb8:	movt	r1, #65535	; 0xffff
   16cbc:	str	r0, [r0, #2944]	; 0xb80
   16cc0:	str	r0, [r0, #2948]	; 0xb84
   16cc4:	str	r1, [r0, #2952]	; 0xb88
   16cc8:	mov	r0, #0
   16ccc:	pop	{r4, r5, fp, pc}
   16cd0:	push	{r4, r5, fp, lr}
   16cd4:	add	fp, sp, #8
   16cd8:	mov	r4, r0
   16cdc:	ldr	r5, [r0, #4]
   16ce0:	cmp	r5, #0
   16ce4:	beq	16cf8 <flatcc_emitter_copy_buffer@@Base+0x1d0>
   16ce8:	ldr	r0, [r5, #2944]	; 0xb80
   16cec:	ldr	r1, [r4]
   16cf0:	cmp	r0, r1
   16cf4:	bne	16d34 <flatcc_emitter_copy_buffer@@Base+0x20c>
   16cf8:	movw	r0, #2956	; 0xb8c
   16cfc:	bl	1273c <malloc@plt>
   16d00:	cmp	r0, #0
   16d04:	mvneq	r0, #0
   16d08:	popeq	{r4, r5, fp, pc}
   16d0c:	ldr	r1, [r4, #28]
   16d10:	add	r1, r1, #2944	; 0xb80
   16d14:	str	r1, [r4, #28]
   16d18:	cmp	r5, #0
   16d1c:	beq	16d60 <flatcc_emitter_copy_buffer@@Base+0x238>
   16d20:	ldr	r1, [r4]
   16d24:	str	r1, [r0, #2944]	; 0xb80
   16d28:	str	r5, [r0, #2948]	; 0xb84
   16d2c:	str	r0, [r1, #2948]	; 0xb84
   16d30:	str	r0, [r5, #2944]	; 0xb80
   16d34:	str	r0, [r4, #4]
   16d38:	mov	r0, #2944	; 0xb80
   16d3c:	ldr	r1, [r4, #4]
   16d40:	str	r1, [r4, #16]
   16d44:	str	r0, [r4, #20]
   16d48:	ldr	r0, [r1, #2948]	; 0xb84
   16d4c:	ldr	r0, [r0, #2952]	; 0xb88
   16d50:	add	r0, r0, #2944	; 0xb80
   16d54:	str	r0, [r1, #2952]	; 0xb88
   16d58:	mov	r0, #0
   16d5c:	pop	{r4, r5, fp, pc}
   16d60:	str	r0, [r4, #4]
   16d64:	str	r0, [r4]
   16d68:	mov	r1, #1472	; 0x5c0
   16d6c:	str	r1, [r4, #12]
   16d70:	str	r1, [r4, #20]
   16d74:	ldr	r1, [r4]
   16d78:	add	r1, r1, #1472	; 0x5c0
   16d7c:	str	r1, [r4, #8]
   16d80:	str	r1, [r4, #16]
   16d84:	movw	r1, #64064	; 0xfa40
   16d88:	movt	r1, #65535	; 0xffff
   16d8c:	str	r0, [r0, #2944]	; 0xb80
   16d90:	str	r0, [r0, #2948]	; 0xb84
   16d94:	str	r1, [r0, #2952]	; 0xb88
   16d98:	mov	r0, #0
   16d9c:	pop	{r4, r5, fp, pc}

00016da0 <flatcc_verify_error_string@@Base>:
   16da0:	cmp	r0, #36	; 0x24
   16da4:	movwhi	r0, #39090	; 0x98b2
   16da8:	movthi	r0, #1
   16dac:	bxhi	lr
   16db0:	movw	r1, #39104	; 0x98c0
   16db4:	movt	r1, #1
   16db8:	ldr	r0, [r1, r0, lsl #2]
   16dbc:	bx	lr

00016dc0 <flatcc_verify_field@@Base>:
   16dc0:	b	16dc4 <flatcc_verify_field@@Base+0x4>
   16dc4:	push	{r4, r5, r6, r7, fp, lr}
   16dc8:	add	fp, sp, #16
   16dcc:	mov	r4, r3
   16dd0:	mov	r6, r2
   16dd4:	mov	r5, r0
   16dd8:	ldr	r7, [r0]
   16ddc:	bl	17adc <flatcc_verify_union_field@@Base+0x130>
   16de0:	movw	r1, #65535	; 0xffff
   16de4:	tst	r0, r1
   16de8:	beq	16e20 <flatcc_verify_field@@Base+0x60>
   16dec:	uxtah	r2, r6, r0
   16df0:	ldrh	r3, [r5, #20]
   16df4:	mov	r1, #13
   16df8:	cmp	r2, r3
   16dfc:	bhi	16e24 <flatcc_verify_field@@Base+0x64>
   16e00:	uxth	r0, r0
   16e04:	add	r0, r0, r7
   16e08:	ldr	r1, [r5, #16]
   16e0c:	add	r0, r0, r1
   16e10:	sub	r1, r4, #1
   16e14:	ands	r0, r0, r1
   16e18:	movwne	r0, #12
   16e1c:	pop	{r4, r5, r6, r7, fp, pc}
   16e20:	mov	r1, #0
   16e24:	mov	r0, r1
   16e28:	pop	{r4, r5, r6, r7, fp, pc}

00016e2c <flatcc_verify_string_field@@Base>:
   16e2c:	push	{r4, r5, r6, sl, fp, lr}
   16e30:	add	fp, sp, #16
   16e34:	sub	sp, sp, #8
   16e38:	mov	r4, r0
   16e3c:	add	r3, sp, #4
   16e40:	bl	16e88 <flatcc_verify_string_field@@Base+0x5c>
   16e44:	cmp	r0, #0
   16e48:	bne	16e80 <flatcc_verify_string_field@@Base+0x54>
   16e4c:	ldr	r5, [sp, #4]
   16e50:	cmp	r5, #0
   16e54:	beq	16e80 <flatcc_verify_string_field@@Base+0x54>
   16e58:	ldr	r6, [r4]
   16e5c:	ldr	r4, [r4, #4]
   16e60:	mov	r0, r6
   16e64:	mov	r1, r5
   16e68:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   16e6c:	mov	r3, r0
   16e70:	mov	r0, r6
   16e74:	mov	r1, r4
   16e78:	mov	r2, r5
   16e7c:	bl	16f00 <flatcc_verify_string_field@@Base+0xd4>
   16e80:	sub	sp, fp, #16
   16e84:	pop	{r4, r5, r6, sl, fp, pc}
   16e88:	push	{r4, r5, r6, sl, fp, lr}
   16e8c:	add	fp, sp, #16
   16e90:	mov	r4, r3
   16e94:	mov	r5, r2
   16e98:	mov	r6, r0
   16e9c:	bl	17adc <flatcc_verify_union_field@@Base+0x130>
   16ea0:	movw	r1, #65535	; 0xffff
   16ea4:	tst	r0, r1
   16ea8:	beq	16ee8 <flatcc_verify_string_field@@Base+0xbc>
   16eac:	mov	r1, #4
   16eb0:	uxtah	r1, r1, r0
   16eb4:	ldrh	r2, [r6, #20]
   16eb8:	mov	r5, #13
   16ebc:	cmp	r1, r2
   16ec0:	bhi	16ee0 <flatcc_verify_string_field@@Base+0xb4>
   16ec4:	uxth	r0, r0
   16ec8:	ldr	r1, [r6, #16]
   16ecc:	add	r0, r1, r0
   16ed0:	mov	r5, #12
   16ed4:	tst	r0, #3
   16ed8:	streq	r0, [r4]
   16edc:	moveq	r5, #0
   16ee0:	mov	r0, r5
   16ee4:	pop	{r4, r5, r6, sl, fp, pc}
   16ee8:	mov	r0, #0
   16eec:	str	r0, [r4]
   16ef0:	cmp	r5, #0
   16ef4:	movwne	r5, #4
   16ef8:	mov	r0, r5
   16efc:	pop	{r4, r5, r6, sl, fp, pc}
   16f00:	push	{r4, r5, r6, r7, fp, lr}
   16f04:	add	fp, sp, #16
   16f08:	mov	r6, r3
   16f0c:	mov	r7, r2
   16f10:	mov	r5, r1
   16f14:	mov	r4, r0
   16f18:	mov	r0, r1
   16f1c:	mov	r1, r2
   16f20:	mov	r2, r3
   16f24:	bl	17da8 <flatcc_verify_union_vector_field@@Base+0x290>
   16f28:	cmp	r0, #0
   16f2c:	beq	16f6c <flatcc_verify_string_field@@Base+0x140>
   16f30:	add	r6, r6, r7
   16f34:	mov	r0, r4
   16f38:	mov	r1, r6
   16f3c:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   16f40:	add	r2, r6, #4
   16f44:	sub	r3, r5, r2
   16f48:	add	r7, r0, #1
   16f4c:	mov	r1, #8
   16f50:	cmp	r3, r7
   16f54:	bcc	16f70 <flatcc_verify_string_field@@Base+0x144>
   16f58:	add	r1, r4, r2
   16f5c:	ldrb	r0, [r1, r0]
   16f60:	cmp	r0, #0
   16f64:	movwne	r0, #7
   16f68:	pop	{r4, r5, r6, r7, fp, pc}
   16f6c:	mov	r1, #17
   16f70:	mov	r0, r1
   16f74:	pop	{r4, r5, r6, r7, fp, pc}
   16f78:	add	r0, r0, r1
   16f7c:	b	17de0 <flatcc_verify_union_vector_field@@Base+0x2c8>

00016f80 <flatcc_verify_vector_field@@Base>:
   16f80:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16f84:	add	fp, sp, #24
   16f88:	sub	sp, sp, #16
   16f8c:	mov	r4, r3
   16f90:	mov	r6, r0
   16f94:	add	r3, sp, #12
   16f98:	bl	16e88 <flatcc_verify_string_field@@Base+0x5c>
   16f9c:	cmp	r0, #0
   16fa0:	bne	16fe8 <flatcc_verify_vector_field@@Base+0x68>
   16fa4:	ldr	r5, [sp, #12]
   16fa8:	cmp	r5, #0
   16fac:	beq	16fe8 <flatcc_verify_vector_field@@Base+0x68>
   16fb0:	ldr	r8, [fp, #12]
   16fb4:	ldr	r9, [fp, #8]
   16fb8:	ldr	r7, [r6]
   16fbc:	ldr	r6, [r6, #4]
   16fc0:	mov	r0, r7
   16fc4:	mov	r1, r5
   16fc8:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   16fcc:	mov	r3, r0
   16fd0:	stm	sp, {r4, r9}
   16fd4:	str	r8, [sp, #8]
   16fd8:	mov	r0, r7
   16fdc:	mov	r1, r6
   16fe0:	mov	r2, r5
   16fe4:	bl	16ff0 <flatcc_verify_vector_field@@Base+0x70>
   16fe8:	sub	sp, fp, #24
   16fec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ff0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ff4:	add	fp, sp, #24
   16ff8:	mov	r5, r3
   16ffc:	mov	r7, r2
   17000:	mov	r4, r1
   17004:	mov	r6, r0
   17008:	ldr	r3, [fp, #12]
   1700c:	mov	r0, r1
   17010:	mov	r1, r2
   17014:	mov	r2, r5
   17018:	bl	17dec <flatcc_verify_union_vector_field@@Base+0x2d4>
   1701c:	cmp	r0, #0
   17020:	moveq	r0, #16
   17024:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   17028:	ldr	r8, [fp, #16]
   1702c:	add	r5, r5, r7
   17030:	mov	r0, r6
   17034:	mov	r1, r5
   17038:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   1703c:	mov	r1, r0
   17040:	mov	r0, #25
   17044:	cmp	r1, r8
   17048:	pophi	{r4, r5, r6, r7, r8, sl, fp, pc}
   1704c:	ldr	r0, [fp, #8]
   17050:	mul	r1, r1, r0
   17054:	sub	r0, r4, #4
   17058:	sub	r2, r0, r5
   1705c:	mov	r0, #0
   17060:	cmp	r2, r1
   17064:	movwcc	r0, #26
   17068:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001706c <flatcc_verify_string_vector_field@@Base>:
   1706c:	push	{r4, r5, r6, sl, fp, lr}
   17070:	add	fp, sp, #16
   17074:	sub	sp, sp, #8
   17078:	mov	r4, r0
   1707c:	add	r3, sp, #4
   17080:	bl	16e88 <flatcc_verify_string_field@@Base+0x5c>
   17084:	cmp	r0, #0
   17088:	bne	170c0 <flatcc_verify_string_vector_field@@Base+0x54>
   1708c:	ldr	r5, [sp, #4]
   17090:	cmp	r5, #0
   17094:	beq	170c0 <flatcc_verify_string_vector_field@@Base+0x54>
   17098:	ldr	r6, [r4]
   1709c:	ldr	r4, [r4, #4]
   170a0:	mov	r0, r6
   170a4:	mov	r1, r5
   170a8:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   170ac:	mov	r3, r0
   170b0:	mov	r0, r6
   170b4:	mov	r1, r4
   170b8:	mov	r2, r5
   170bc:	bl	170c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   170c0:	sub	sp, fp, #16
   170c4:	pop	{r4, r5, r6, sl, fp, pc}
   170c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   170cc:	add	fp, sp, #24
   170d0:	sub	sp, sp, #16
   170d4:	mov	r6, r3
   170d8:	mov	r7, r2
   170dc:	mov	r8, r1
   170e0:	mov	r5, r0
   170e4:	mvn	r0, #-1073741824	; 0xc0000000
   170e8:	mov	r1, #4
   170ec:	str	r1, [sp]
   170f0:	str	r1, [sp, #4]
   170f4:	str	r0, [sp, #8]
   170f8:	mov	r0, r5
   170fc:	mov	r1, r8
   17100:	bl	16ff0 <flatcc_verify_vector_field@@Base+0x70>
   17104:	cmp	r0, #0
   17108:	beq	17114 <flatcc_verify_string_vector_field@@Base+0xa8>
   1710c:	sub	sp, fp, #24
   17110:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17114:	add	r7, r6, r7
   17118:	mov	r0, r5
   1711c:	mov	r1, r7
   17120:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17124:	cmp	r0, #0
   17128:	beq	17170 <flatcc_verify_string_vector_field@@Base+0x104>
   1712c:	mov	r6, r0
   17130:	add	r7, r7, #4
   17134:	mov	r4, #0
   17138:	mov	r0, r5
   1713c:	mov	r1, r7
   17140:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17144:	mov	r3, r0
   17148:	mov	r0, r5
   1714c:	mov	r1, r8
   17150:	mov	r2, r7
   17154:	bl	16f00 <flatcc_verify_string_field@@Base+0xd4>
   17158:	cmp	r0, #0
   1715c:	bne	1710c <flatcc_verify_string_vector_field@@Base+0xa0>
   17160:	add	r4, r4, #1
   17164:	add	r7, r7, #4
   17168:	cmp	r4, r6
   1716c:	bcc	17138 <flatcc_verify_string_vector_field@@Base+0xcc>
   17170:	mov	r0, #0
   17174:	sub	sp, fp, #24
   17178:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001717c <flatcc_verify_table_field@@Base>:
   1717c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17180:	add	fp, sp, #24
   17184:	sub	sp, sp, #16
   17188:	mov	r8, r3
   1718c:	mov	r5, r0
   17190:	add	r3, sp, #12
   17194:	bl	16e88 <flatcc_verify_string_field@@Base+0x5c>
   17198:	cmp	r0, #0
   1719c:	bne	171dc <flatcc_verify_table_field@@Base+0x60>
   171a0:	ldr	r6, [sp, #12]
   171a4:	cmp	r6, #0
   171a8:	beq	171dc <flatcc_verify_table_field@@Base+0x60>
   171ac:	ldr	r7, [r5]
   171b0:	ldr	r4, [r5, #4]
   171b4:	mov	r0, r7
   171b8:	mov	r1, r6
   171bc:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   171c0:	mov	r3, r0
   171c4:	ldr	r0, [r5, #8]
   171c8:	stm	sp, {r0, r8}
   171cc:	mov	r0, r7
   171d0:	mov	r1, r4
   171d4:	mov	r2, r6
   171d8:	bl	171e4 <flatcc_verify_table_field@@Base+0x68>
   171dc:	sub	sp, fp, #24
   171e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   171e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   171e8:	add	fp, sp, #24
   171ec:	sub	sp, sp, #24
   171f0:	mov	r4, r0
   171f4:	ldr	r0, [fp, #8]
   171f8:	subs	r0, r0, #1
   171fc:	str	r0, [sp, #8]
   17200:	moveq	r0, #3
   17204:	subeq	sp, fp, #24
   17208:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1720c:	mov	r6, r3
   17210:	mov	r7, r2
   17214:	mov	r5, r1
   17218:	mov	r0, r1
   1721c:	mov	r1, r2
   17220:	mov	r2, r3
   17224:	bl	17da8 <flatcc_verify_union_vector_field@@Base+0x290>
   17228:	cmp	r0, #0
   1722c:	moveq	r0, #15
   17230:	subeq	sp, fp, #24
   17234:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   17238:	add	r7, r6, r7
   1723c:	str	r7, [sp, #16]
   17240:	mov	r0, r4
   17244:	mov	r1, r7
   17248:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   1724c:	sub	r6, r7, r0
   17250:	mov	r0, #29
   17254:	tst	r6, #-2147483647	; 0x80000001
   17258:	bne	172e0 <flatcc_verify_table_field@@Base+0x164>
   1725c:	add	r8, r6, #2
   17260:	mov	r0, #27
   17264:	cmp	r8, r5
   17268:	bhi	172e0 <flatcc_verify_table_field@@Base+0x164>
   1726c:	mov	r0, r4
   17270:	mov	r1, r6
   17274:	bl	17e2c <flatcc_verify_union_vector_field@@Base+0x314>
   17278:	mov	r1, r0
   1727c:	strh	r0, [sp, #22]
   17280:	mov	r0, #30
   17284:	tst	r1, #1
   17288:	bne	172e0 <flatcc_verify_table_field@@Base+0x164>
   1728c:	add	r2, r6, r1
   17290:	cmp	r2, r5
   17294:	bhi	172e0 <flatcc_verify_table_field@@Base+0x164>
   17298:	mov	r0, #28
   1729c:	cmp	r1, #4
   172a0:	bcc	172e0 <flatcc_verify_table_field@@Base+0x164>
   172a4:	mov	r0, r4
   172a8:	mov	r1, r8
   172ac:	bl	17e2c <flatcc_verify_union_vector_field@@Base+0x314>
   172b0:	mov	r1, r0
   172b4:	strh	r0, [sp, #20]
   172b8:	sub	r2, r5, r7
   172bc:	mov	r0, #20
   172c0:	cmp	r2, r1
   172c4:	bcc	172e0 <flatcc_verify_table_field@@Base+0x164>
   172c8:	ldr	r1, [fp, #12]
   172cc:	stm	sp, {r4, r5}
   172d0:	add	r0, r4, r6
   172d4:	str	r0, [sp, #12]
   172d8:	mov	r0, sp
   172dc:	blx	r1
   172e0:	sub	sp, fp, #24
   172e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000172e8 <flatcc_verify_table_vector_field@@Base>:
   172e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   172ec:	add	fp, sp, #24
   172f0:	sub	sp, sp, #16
   172f4:	mov	r8, r3
   172f8:	mov	r5, r0
   172fc:	add	r3, sp, #12
   17300:	bl	16e88 <flatcc_verify_string_field@@Base+0x5c>
   17304:	cmp	r0, #0
   17308:	bne	17348 <flatcc_verify_table_vector_field@@Base+0x60>
   1730c:	ldr	r6, [sp, #12]
   17310:	cmp	r6, #0
   17314:	beq	17348 <flatcc_verify_table_vector_field@@Base+0x60>
   17318:	ldr	r7, [r5]
   1731c:	ldr	r4, [r5, #4]
   17320:	mov	r0, r7
   17324:	mov	r1, r6
   17328:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   1732c:	mov	r3, r0
   17330:	ldr	r0, [r5, #8]
   17334:	stm	sp, {r0, r8}
   17338:	mov	r0, r7
   1733c:	mov	r1, r4
   17340:	mov	r2, r6
   17344:	bl	17350 <flatcc_verify_table_vector_field@@Base+0x68>
   17348:	sub	sp, fp, #24
   1734c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17354:	add	fp, sp, #28
   17358:	sub	sp, sp, #12
   1735c:	ldr	r8, [fp, #8]
   17360:	cmp	r8, #1
   17364:	movlt	r0, #3
   17368:	sublt	sp, fp, #28
   1736c:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17370:	mov	r6, r3
   17374:	mov	r7, r2
   17378:	mov	sl, r1
   1737c:	mov	r5, r0
   17380:	mvn	r0, #-1073741824	; 0xc0000000
   17384:	mov	r1, #4
   17388:	str	r1, [sp]
   1738c:	str	r1, [sp, #4]
   17390:	str	r0, [sp, #8]
   17394:	mov	r0, r5
   17398:	mov	r1, sl
   1739c:	bl	16ff0 <flatcc_verify_vector_field@@Base+0x70>
   173a0:	cmp	r0, #0
   173a4:	beq	173b0 <flatcc_verify_table_vector_field@@Base+0xc8>
   173a8:	sub	sp, fp, #28
   173ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173b0:	add	r6, r6, r7
   173b4:	mov	r0, r5
   173b8:	mov	r1, r6
   173bc:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   173c0:	cmp	r0, #0
   173c4:	beq	17418 <flatcc_verify_table_vector_field@@Base+0x130>
   173c8:	mov	r7, r0
   173cc:	sub	r8, r8, #1
   173d0:	ldr	r9, [fp, #12]
   173d4:	add	r6, r6, #4
   173d8:	mov	r4, #0
   173dc:	mov	r0, r5
   173e0:	mov	r1, r6
   173e4:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   173e8:	mov	r3, r0
   173ec:	stm	sp, {r8, r9}
   173f0:	mov	r0, r5
   173f4:	mov	r1, sl
   173f8:	mov	r2, r6
   173fc:	bl	171e4 <flatcc_verify_table_field@@Base+0x68>
   17400:	cmp	r0, #0
   17404:	bne	17424 <flatcc_verify_table_vector_field@@Base+0x13c>
   17408:	add	r4, r4, #1
   1740c:	add	r6, r6, #4
   17410:	cmp	r4, r7
   17414:	bcc	173dc <flatcc_verify_table_vector_field@@Base+0xf4>
   17418:	mov	r0, #0
   1741c:	sub	sp, fp, #28
   17420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17424:	mov	r0, r5
   17428:	mov	r1, r6
   1742c:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17430:	mov	r3, r0
   17434:	stm	sp, {r8, r9}
   17438:	mov	r0, r5
   1743c:	mov	r1, sl
   17440:	mov	r2, r6
   17444:	bl	171e4 <flatcc_verify_table_field@@Base+0x68>
   17448:	sub	sp, fp, #28
   1744c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017450 <flatcc_verify_union_table@@Base>:
   17450:	push	{fp, lr}
   17454:	mov	fp, sp
   17458:	sub	sp, sp, #8
   1745c:	ldr	r2, [r0, #16]
   17460:	ldr	r3, [r0, #20]
   17464:	ldm	r0, {ip, lr}
   17468:	ldr	r0, [r0, #8]
   1746c:	stm	sp, {r0, r1}
   17470:	mov	r0, ip
   17474:	mov	r1, lr
   17478:	bl	171e4 <flatcc_verify_table_field@@Base+0x68>
   1747c:	mov	sp, fp
   17480:	pop	{fp, pc}

00017484 <flatcc_verify_union_struct@@Base>:
   17484:	push	{fp, lr}
   17488:	mov	fp, sp
   1748c:	sub	sp, sp, #8
   17490:	mov	ip, r1
   17494:	ldr	r3, [r0, #4]
   17498:	ldr	r1, [r0, #16]
   1749c:	ldr	lr, [r0, #20]
   174a0:	str	r2, [sp]
   174a4:	mov	r0, r3
   174a8:	mov	r2, lr
   174ac:	mov	r3, ip
   174b0:	bl	174bc <flatcc_verify_union_struct@@Base+0x38>
   174b4:	mov	sp, fp
   174b8:	pop	{fp, pc}
   174bc:	mov	ip, r0
   174c0:	mov	r0, #18
   174c4:	cmp	r2, #0
   174c8:	beq	17500 <flatcc_verify_union_struct@@Base+0x7c>
   174cc:	add	r1, r2, r1
   174d0:	cmp	r1, ip
   174d4:	bhi	17500 <flatcc_verify_union_struct@@Base+0x7c>
   174d8:	adds	r2, r1, r3
   174dc:	mov	r0, #10
   174e0:	bcs	17500 <flatcc_verify_union_struct@@Base+0x7c>
   174e4:	mov	r0, #9
   174e8:	cmp	r2, ip
   174ec:	bxhi	lr
   174f0:	ldr	r0, [sp]
   174f4:	sub	r0, r0, #1
   174f8:	ands	r0, r0, r1
   174fc:	movwne	r0, #11
   17500:	bx	lr

00017504 <flatcc_verify_union_string@@Base>:
   17504:	ldr	ip, [r0]
   17508:	ldr	r1, [r0, #4]
   1750c:	ldr	r2, [r0, #16]
   17510:	ldr	r3, [r0, #20]
   17514:	mov	r0, ip
   17518:	b	16f00 <flatcc_verify_string_field@@Base+0xd4>

0001751c <flatcc_verify_buffer_header@@Base>:
   1751c:	push	{r4, r5, fp, lr}
   17520:	add	fp, sp, #8
   17524:	mov	r4, r0
   17528:	mov	r0, #5
   1752c:	tst	r4, #3
   17530:	bne	1757c <flatcc_verify_buffer_header@@Base+0x60>
   17534:	mov	r0, #6
   17538:	cmn	r1, #9
   1753c:	bhi	1757c <flatcc_verify_buffer_header@@Base+0x60>
   17540:	mov	r0, #1
   17544:	cmp	r1, #8
   17548:	popcc	{r4, r5, fp, pc}
   1754c:	cmp	r2, #0
   17550:	beq	17580 <flatcc_verify_buffer_header@@Base+0x64>
   17554:	mov	r0, r2
   17558:	bl	17588 <flatcc_verify_buffer_header@@Base+0x6c>
   1755c:	mov	r5, r0
   17560:	mov	r0, r4
   17564:	bl	175bc <flatcc_verify_buffer_header@@Base+0xa0>
   17568:	cmp	r5, #0
   1756c:	movne	r1, r0
   17570:	movne	r0, #2
   17574:	cmpne	r1, r5
   17578:	moveq	r0, #0
   1757c:	pop	{r4, r5, fp, pc}
   17580:	mov	r0, #0
   17584:	pop	{r4, r5, fp, pc}
   17588:	push	{fp, lr}
   1758c:	mov	fp, sp
   17590:	sub	sp, sp, #8
   17594:	mov	r1, r0
   17598:	mov	r0, #0
   1759c:	str	r0, [sp, #4]
   175a0:	add	r0, sp, #4
   175a4:	mov	r2, #4
   175a8:	bl	12784 <strncpy@plt>
   175ac:	ldr	r0, [sp, #4]
   175b0:	bl	17e40 <flatcc_verify_union_vector_field@@Base+0x328>
   175b4:	mov	sp, fp
   175b8:	pop	{fp, pc}
   175bc:	add	r0, r0, #4
   175c0:	b	17e44 <flatcc_verify_union_vector_field@@Base+0x32c>

000175c4 <flatcc_verify_typed_buffer_header@@Base>:
   175c4:	push	{r4, sl, fp, lr}
   175c8:	add	fp, sp, #8
   175cc:	mov	r4, r2
   175d0:	mov	r2, #5
   175d4:	tst	r0, #3
   175d8:	bne	1760c <flatcc_verify_typed_buffer_header@@Base+0x48>
   175dc:	mov	r2, #6
   175e0:	cmn	r1, #9
   175e4:	bhi	1760c <flatcc_verify_typed_buffer_header@@Base+0x48>
   175e8:	mov	r2, #1
   175ec:	cmp	r1, #8
   175f0:	bcc	1760c <flatcc_verify_typed_buffer_header@@Base+0x48>
   175f4:	cmp	r4, #0
   175f8:	beq	17614 <flatcc_verify_typed_buffer_header@@Base+0x50>
   175fc:	bl	175bc <flatcc_verify_buffer_header@@Base+0xa0>
   17600:	mov	r2, #2
   17604:	cmp	r0, r4
   17608:	moveq	r2, #0
   1760c:	mov	r0, r2
   17610:	pop	{r4, sl, fp, pc}
   17614:	mov	r2, #0
   17618:	mov	r0, r2
   1761c:	pop	{r4, sl, fp, pc}

00017620 <flatcc_verify_struct_as_root@@Base>:
   17620:	push	{r4, r5, r6, r7, fp, lr}
   17624:	add	fp, sp, #16
   17628:	sub	sp, sp, #8
   1762c:	mov	r4, r3
   17630:	mov	r7, r2
   17634:	mov	r5, r1
   17638:	mov	r6, r0
   1763c:	bl	1751c <flatcc_verify_buffer_header@@Base>
   17640:	cmp	r0, #0
   17644:	beq	17660 <flatcc_verify_struct_as_root@@Base+0x40>
   17648:	mov	r0, r6
   1764c:	mov	r1, r5
   17650:	mov	r2, r7
   17654:	sub	sp, fp, #16
   17658:	pop	{r4, r5, r6, r7, fp, lr}
   1765c:	b	1751c <flatcc_verify_buffer_header@@Base>
   17660:	ldr	r7, [fp, #8]
   17664:	mov	r0, r6
   17668:	mov	r1, #0
   1766c:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17670:	mov	r2, r0
   17674:	str	r7, [sp]
   17678:	mov	r0, r5
   1767c:	mov	r1, #0
   17680:	mov	r3, r4
   17684:	bl	174bc <flatcc_verify_union_struct@@Base+0x38>
   17688:	sub	sp, fp, #16
   1768c:	pop	{r4, r5, r6, r7, fp, pc}

00017690 <flatcc_verify_struct_as_typed_root@@Base>:
   17690:	push	{r4, r5, r6, r7, fp, lr}
   17694:	add	fp, sp, #16
   17698:	sub	sp, sp, #8
   1769c:	mov	r4, r3
   176a0:	mov	r5, r1
   176a4:	mov	r6, r0
   176a8:	bl	175c4 <flatcc_verify_typed_buffer_header@@Base>
   176ac:	cmp	r0, #0
   176b0:	beq	176bc <flatcc_verify_struct_as_typed_root@@Base+0x2c>
   176b4:	sub	sp, fp, #16
   176b8:	pop	{r4, r5, r6, r7, fp, pc}
   176bc:	ldr	r7, [fp, #8]
   176c0:	mov	r0, r6
   176c4:	mov	r1, #0
   176c8:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   176cc:	mov	r2, r0
   176d0:	str	r7, [sp]
   176d4:	mov	r0, r5
   176d8:	mov	r1, #0
   176dc:	mov	r3, r4
   176e0:	bl	174bc <flatcc_verify_union_struct@@Base+0x38>
   176e4:	sub	sp, fp, #16
   176e8:	pop	{r4, r5, r6, r7, fp, pc}

000176ec <flatcc_verify_table_as_root@@Base>:
   176ec:	push	{r4, r5, r6, r7, fp, lr}
   176f0:	add	fp, sp, #16
   176f4:	sub	sp, sp, #8
   176f8:	mov	r5, r3
   176fc:	mov	r7, r2
   17700:	mov	r4, r1
   17704:	mov	r6, r0
   17708:	bl	1751c <flatcc_verify_buffer_header@@Base>
   1770c:	cmp	r0, #0
   17710:	beq	1772c <flatcc_verify_table_as_root@@Base+0x40>
   17714:	mov	r0, r6
   17718:	mov	r1, r4
   1771c:	mov	r2, r7
   17720:	sub	sp, fp, #16
   17724:	pop	{r4, r5, r6, r7, fp, lr}
   17728:	b	1751c <flatcc_verify_buffer_header@@Base>
   1772c:	mov	r0, r6
   17730:	mov	r1, #0
   17734:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17738:	mov	r3, r0
   1773c:	mov	r0, #100	; 0x64
   17740:	stm	sp, {r0, r5}
   17744:	mov	r0, r6
   17748:	mov	r1, r4
   1774c:	mov	r2, #0
   17750:	bl	171e4 <flatcc_verify_table_field@@Base+0x68>
   17754:	sub	sp, fp, #16
   17758:	pop	{r4, r5, r6, r7, fp, pc}

0001775c <flatcc_verify_table_as_typed_root@@Base>:
   1775c:	push	{r4, r5, r6, sl, fp, lr}
   17760:	add	fp, sp, #16
   17764:	sub	sp, sp, #8
   17768:	mov	r5, r3
   1776c:	mov	r4, r1
   17770:	mov	r6, r0
   17774:	bl	175c4 <flatcc_verify_typed_buffer_header@@Base>
   17778:	cmp	r0, #0
   1777c:	beq	17788 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   17780:	sub	sp, fp, #16
   17784:	pop	{r4, r5, r6, sl, fp, pc}
   17788:	mov	r0, r6
   1778c:	mov	r1, #0
   17790:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17794:	mov	r3, r0
   17798:	mov	r0, #100	; 0x64
   1779c:	stm	sp, {r0, r5}
   177a0:	mov	r0, r6
   177a4:	mov	r1, r4
   177a8:	mov	r2, #0
   177ac:	bl	171e4 <flatcc_verify_table_field@@Base+0x68>
   177b0:	sub	sp, fp, #16
   177b4:	pop	{r4, r5, r6, sl, fp, pc}

000177b8 <flatcc_verify_struct_as_nested_root@@Base>:
   177b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177bc:	add	fp, sp, #28
   177c0:	sub	sp, sp, #12
   177c4:	mov	r8, r3
   177c8:	mov	r7, r2
   177cc:	mov	r6, r1
   177d0:	mov	r4, r0
   177d4:	mvn	sl, #0
   177d8:	mov	r5, #1
   177dc:	stm	sp, {r5, sl}
   177e0:	ldr	r9, [fp, #12]
   177e4:	mov	r3, r9
   177e8:	bl	16f80 <flatcc_verify_vector_field@@Base>
   177ec:	cmp	r0, #0
   177f0:	beq	17814 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   177f4:	stm	sp, {r5, sl}
   177f8:	mov	r0, r4
   177fc:	mov	r1, r6
   17800:	mov	r2, r7
   17804:	mov	r3, r9
   17808:	bl	16f80 <flatcc_verify_vector_field@@Base>
   1780c:	sub	sp, fp, #28
   17810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17814:	mov	r0, r4
   17818:	mov	r1, r6
   1781c:	bl	17870 <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   17820:	cmp	r0, #0
   17824:	moveq	r0, #0
   17828:	subeq	sp, fp, #28
   1782c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17830:	mov	r4, r0
   17834:	ldr	r6, [fp, #8]
   17838:	mov	r1, #0
   1783c:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17840:	add	r4, r0, r4
   17844:	mov	r0, r4
   17848:	mov	r1, #0
   1784c:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17850:	mov	r1, r0
   17854:	str	r9, [sp]
   17858:	add	r0, r4, #4
   1785c:	mov	r2, r8
   17860:	mov	r3, r6
   17864:	bl	17620 <flatcc_verify_struct_as_root@@Base>
   17868:	sub	sp, fp, #28
   1786c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17870:	push	{r4, sl, fp, lr}
   17874:	add	fp, sp, #8
   17878:	mov	r4, r0
   1787c:	bl	17adc <flatcc_verify_union_field@@Base+0x130>
   17880:	uxth	r0, r0
   17884:	cmp	r0, #0
   17888:	ldrne	r1, [r4]
   1788c:	ldrne	r2, [r4, #16]
   17890:	addne	r1, r1, r2
   17894:	addne	r0, r1, r0
   17898:	popne	{r4, sl, fp, pc}
   1789c:	mov	r0, #0
   178a0:	pop	{r4, sl, fp, pc}

000178a4 <flatcc_verify_table_as_nested_root@@Base>:
   178a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178a8:	add	fp, sp, #28
   178ac:	sub	sp, sp, #12
   178b0:	mov	r8, r3
   178b4:	mov	r7, r2
   178b8:	mov	r6, r1
   178bc:	mov	r4, r0
   178c0:	mvn	r9, #0
   178c4:	mov	sl, #1
   178c8:	str	sl, [sp]
   178cc:	str	r9, [sp, #4]
   178d0:	ldr	r5, [fp, #8]
   178d4:	mov	r3, r5
   178d8:	bl	16f80 <flatcc_verify_vector_field@@Base>
   178dc:	cmp	r0, #0
   178e0:	beq	17908 <flatcc_verify_table_as_nested_root@@Base+0x64>
   178e4:	str	sl, [sp]
   178e8:	str	r9, [sp, #4]
   178ec:	mov	r0, r4
   178f0:	mov	r1, r6
   178f4:	mov	r2, r7
   178f8:	mov	r3, r5
   178fc:	bl	16f80 <flatcc_verify_vector_field@@Base>
   17900:	sub	sp, fp, #28
   17904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17908:	ldr	r9, [fp, #12]
   1790c:	mov	r0, r4
   17910:	mov	r1, r6
   17914:	bl	17870 <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   17918:	cmp	r0, #0
   1791c:	moveq	r0, #0
   17920:	subeq	sp, fp, #28
   17924:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17928:	mov	r5, r0
   1792c:	mov	r1, #0
   17930:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17934:	add	r5, r0, r5
   17938:	mov	r0, r5
   1793c:	mov	r1, #0
   17940:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17944:	mov	r6, r0
   17948:	add	r7, r5, #4
   1794c:	mov	r0, r7
   17950:	mov	r1, r6
   17954:	mov	r2, r8
   17958:	bl	1751c <flatcc_verify_buffer_header@@Base>
   1795c:	cmp	r0, #0
   17960:	beq	1797c <flatcc_verify_table_as_nested_root@@Base+0xd8>
   17964:	mov	r0, r7
   17968:	mov	r1, r6
   1796c:	mov	r2, r8
   17970:	sub	sp, fp, #28
   17974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17978:	b	1751c <flatcc_verify_buffer_header@@Base>
   1797c:	mov	r0, r7
   17980:	mov	r1, #0
   17984:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17988:	mov	r3, r0
   1798c:	ldr	r0, [r4, #8]
   17990:	stm	sp, {r0, r9}
   17994:	mov	r0, r7
   17998:	mov	r1, r6
   1799c:	mov	r2, #0
   179a0:	bl	171e4 <flatcc_verify_table_field@@Base+0x68>
   179a4:	sub	sp, fp, #28
   179a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000179ac <flatcc_verify_union_field@@Base>:
   179ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   179b0:	add	fp, sp, #24
   179b4:	sub	sp, sp, #32
   179b8:	mov	r8, r3
   179bc:	mov	r9, r2
   179c0:	mov	r7, r1
   179c4:	mov	r5, r0
   179c8:	sub	r0, r1, #1
   179cc:	uxth	r4, r0
   179d0:	mov	r0, r5
   179d4:	mov	r1, r4
   179d8:	bl	17adc <flatcc_verify_union_field@@Base+0x130>
   179dc:	uxth	r6, r0
   179e0:	cmp	r6, #0
   179e4:	beq	17aa0 <flatcc_verify_union_field@@Base+0xf4>
   179e8:	mov	r0, r5
   179ec:	mov	r1, r4
   179f0:	mov	r2, #1
   179f4:	mov	r3, #1
   179f8:	bl	16dc4 <flatcc_verify_field@@Base+0x4>
   179fc:	cmp	r0, #0
   17a00:	bne	17ac0 <flatcc_verify_union_field@@Base+0x114>
   17a04:	mov	r0, r5
   17a08:	mov	r1, r7
   17a0c:	bl	17adc <flatcc_verify_union_field@@Base+0x130>
   17a10:	ldr	r1, [r5]
   17a14:	ldr	r2, [r5, #16]
   17a18:	add	r4, r1, r2
   17a1c:	ldrb	r1, [r4, r6]
   17a20:	movw	r2, #65535	; 0xffff
   17a24:	tst	r0, r2
   17a28:	beq	17a38 <flatcc_verify_union_field@@Base+0x8c>
   17a2c:	mov	r0, #24
   17a30:	cmp	r1, #0
   17a34:	beq	17ac0 <flatcc_verify_union_field@@Base+0x114>
   17a38:	cmp	r1, #0
   17a3c:	moveq	r0, #0
   17a40:	subeq	sp, fp, #24
   17a44:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   17a48:	add	r3, sp, #28
   17a4c:	mov	r0, r5
   17a50:	mov	r1, r7
   17a54:	mov	r2, r9
   17a58:	bl	16e88 <flatcc_verify_string_field@@Base+0x5c>
   17a5c:	cmp	r0, #0
   17a60:	bne	17ac0 <flatcc_verify_union_field@@Base+0x114>
   17a64:	ldr	r1, [sp, #28]
   17a68:	cmp	r1, #0
   17a6c:	beq	17ac0 <flatcc_verify_union_field@@Base+0x114>
   17a70:	ldm	r5, {r0, r2, r3}
   17a74:	str	r1, [sp, #20]
   17a78:	stmib	sp, {r0, r2, r3}
   17a7c:	ldr	r0, [r5]
   17a80:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17a84:	str	r0, [sp, #24]
   17a88:	ldrb	r0, [r4, r6]
   17a8c:	strb	r0, [sp, #16]
   17a90:	add	r0, sp, #4
   17a94:	blx	r8
   17a98:	sub	sp, fp, #24
   17a9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17aa0:	mov	r0, r5
   17aa4:	mov	r1, r7
   17aa8:	bl	17adc <flatcc_verify_union_field@@Base+0x130>
   17aac:	mov	r1, r0
   17ab0:	mov	r0, #23
   17ab4:	movw	r2, #65535	; 0xffff
   17ab8:	tst	r1, r2
   17abc:	beq	17ac8 <flatcc_verify_union_field@@Base+0x11c>
   17ac0:	sub	sp, fp, #24
   17ac4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17ac8:	cmp	r9, #0
   17acc:	movwne	r9, #21
   17ad0:	mov	r0, r9
   17ad4:	sub	sp, fp, #24
   17ad8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17adc:	mov	r2, #4
   17ae0:	add	r1, r2, r1, lsl #1
   17ae4:	uxth	r1, r1
   17ae8:	ldrh	r3, [r0, #22]
   17aec:	mov	r2, #0
   17af0:	cmp	r1, r3
   17af4:	bcs	17b10 <flatcc_verify_union_field@@Base+0x164>
   17af8:	push	{fp, lr}
   17afc:	mov	fp, sp
   17b00:	ldr	r0, [r0, #12]
   17b04:	bl	17e2c <flatcc_verify_union_vector_field@@Base+0x314>
   17b08:	mov	r2, r0
   17b0c:	pop	{fp, lr}
   17b10:	mov	r0, r2
   17b14:	bx	lr

00017b18 <flatcc_verify_union_vector_field@@Base>:
   17b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b1c:	add	fp, sp, #28
   17b20:	sub	sp, sp, #20
   17b24:	mov	r8, r3
   17b28:	mov	r6, r2
   17b2c:	mov	sl, r1
   17b30:	mov	r5, r0
   17b34:	sub	r0, r1, #1
   17b38:	uxth	r4, r0
   17b3c:	mov	r0, r5
   17b40:	mov	r1, r4
   17b44:	bl	17adc <flatcc_verify_union_field@@Base+0x130>
   17b48:	movw	r1, #65535	; 0xffff
   17b4c:	tst	r0, r1
   17b50:	beq	17b9c <flatcc_verify_union_vector_field@@Base+0x84>
   17b54:	mvn	r9, #0
   17b58:	mov	r7, #1
   17b5c:	stm	sp, {r7, r9}
   17b60:	mov	r0, r5
   17b64:	mov	r1, r4
   17b68:	mov	r2, r6
   17b6c:	mov	r3, #1
   17b70:	bl	16f80 <flatcc_verify_vector_field@@Base>
   17b74:	cmp	r0, #0
   17b78:	beq	17bc4 <flatcc_verify_union_vector_field@@Base+0xac>
   17b7c:	stm	sp, {r7, r9}
   17b80:	mov	r0, r5
   17b84:	mov	r1, r4
   17b88:	mov	r2, r6
   17b8c:	mov	r3, #1
   17b90:	bl	16f80 <flatcc_verify_vector_field@@Base>
   17b94:	sub	sp, fp, #28
   17b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b9c:	mov	r0, r5
   17ba0:	mov	r1, sl
   17ba4:	bl	17adc <flatcc_verify_union_field@@Base+0x130>
   17ba8:	cmp	r6, #0
   17bac:	beq	17b54 <flatcc_verify_union_vector_field@@Base+0x3c>
   17bb0:	uxth	r1, r0
   17bb4:	mov	r0, #22
   17bb8:	cmp	r1, #0
   17bbc:	beq	17c64 <flatcc_verify_union_vector_field@@Base+0x14c>
   17bc0:	b	17b54 <flatcc_verify_union_vector_field@@Base+0x3c>
   17bc4:	mov	r0, r5
   17bc8:	mov	r1, r4
   17bcc:	bl	17870 <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   17bd0:	cmp	r0, #0
   17bd4:	moveq	r0, #0
   17bd8:	subeq	sp, fp, #28
   17bdc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17be0:	mov	r4, r0
   17be4:	mov	r1, #0
   17be8:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17bec:	add	r4, r0, r4
   17bf0:	mov	r0, r4
   17bf4:	mov	r1, #0
   17bf8:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17bfc:	mov	r9, r0
   17c00:	add	r3, sp, #16
   17c04:	mov	r0, r5
   17c08:	mov	r1, sl
   17c0c:	mov	r2, r6
   17c10:	bl	16e88 <flatcc_verify_string_field@@Base+0x5c>
   17c14:	cmp	r0, #0
   17c18:	bne	17c64 <flatcc_verify_union_vector_field@@Base+0x14c>
   17c1c:	ldr	r6, [sp, #16]
   17c20:	cmp	r6, #0
   17c24:	beq	17c64 <flatcc_verify_union_vector_field@@Base+0x14c>
   17c28:	ldm	r5, {r7, sl}
   17c2c:	mov	r0, r7
   17c30:	mov	r1, r6
   17c34:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17c38:	mov	r3, r0
   17c3c:	ldr	r0, [r5, #8]
   17c40:	add	r1, r4, #4
   17c44:	str	r9, [sp]
   17c48:	str	r1, [sp, #4]
   17c4c:	str	r0, [sp, #8]
   17c50:	str	r8, [sp, #12]
   17c54:	mov	r0, r7
   17c58:	mov	r1, sl
   17c5c:	mov	r2, r6
   17c60:	bl	17c6c <flatcc_verify_union_vector_field@@Base+0x154>
   17c64:	sub	sp, fp, #28
   17c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c70:	add	fp, sp, #28
   17c74:	sub	sp, sp, #36	; 0x24
   17c78:	ldr	r8, [fp, #16]
   17c7c:	cmp	r8, #1
   17c80:	movlt	r0, #3
   17c84:	sublt	sp, fp, #28
   17c88:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c8c:	mov	r5, r3
   17c90:	mov	r7, r2
   17c94:	mov	r6, r1
   17c98:	mov	r4, r0
   17c9c:	mvn	r0, #-1073741824	; 0xc0000000
   17ca0:	mov	r1, #4
   17ca4:	str	r1, [sp]
   17ca8:	str	r1, [sp, #4]
   17cac:	str	r0, [sp, #8]
   17cb0:	mov	r0, r4
   17cb4:	mov	r1, r6
   17cb8:	bl	16ff0 <flatcc_verify_vector_field@@Base+0x70>
   17cbc:	cmp	r0, #0
   17cc0:	bne	17d78 <flatcc_verify_union_vector_field@@Base+0x260>
   17cc4:	ldr	r9, [fp, #8]
   17cc8:	add	r7, r5, r7
   17ccc:	mov	r0, r4
   17cd0:	mov	r1, r7
   17cd4:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17cd8:	mov	r5, r0
   17cdc:	mov	r0, #34	; 0x22
   17ce0:	cmp	r5, r9
   17ce4:	bne	17d78 <flatcc_verify_union_vector_field@@Base+0x260>
   17ce8:	sub	r0, r8, #1
   17cec:	str	r6, [sp, #16]
   17cf0:	str	r4, [sp, #12]
   17cf4:	str	r0, [sp, #20]
   17cf8:	cmp	r5, #0
   17cfc:	moveq	r0, #0
   17d00:	subeq	sp, fp, #28
   17d04:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d08:	ldr	r8, [fp, #20]
   17d0c:	ldr	r9, [fp, #12]
   17d10:	add	r6, r7, #4
   17d14:	mov	r7, #0
   17d18:	add	sl, sp, #12
   17d1c:	mov	r0, r4
   17d20:	mov	r1, r6
   17d24:	bl	16f78 <flatcc_verify_string_field@@Base+0x14c>
   17d28:	ldrb	r1, [r9, r7]
   17d2c:	cmp	r0, #0
   17d30:	beq	17d5c <flatcc_verify_union_vector_field@@Base+0x244>
   17d34:	cmp	r1, #0
   17d38:	beq	17d80 <flatcc_verify_union_vector_field@@Base+0x268>
   17d3c:	str	r6, [sp, #28]
   17d40:	strb	r1, [sp, #24]
   17d44:	str	r0, [sp, #32]
   17d48:	mov	r0, sl
   17d4c:	blx	r8
   17d50:	cmp	r0, #0
   17d54:	beq	17d64 <flatcc_verify_union_vector_field@@Base+0x24c>
   17d58:	b	17d8c <flatcc_verify_union_vector_field@@Base+0x274>
   17d5c:	cmp	r1, #0
   17d60:	bne	17d9c <flatcc_verify_union_vector_field@@Base+0x284>
   17d64:	add	r6, r6, #4
   17d68:	add	r7, r7, #1
   17d6c:	mov	r0, #0
   17d70:	cmp	r7, r5
   17d74:	bcc	17d1c <flatcc_verify_union_vector_field@@Base+0x204>
   17d78:	sub	sp, fp, #28
   17d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d80:	mov	r0, #33	; 0x21
   17d84:	sub	sp, fp, #28
   17d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d8c:	add	r0, sp, #12
   17d90:	blx	r8
   17d94:	sub	sp, fp, #28
   17d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d9c:	mov	r0, #32
   17da0:	sub	sp, fp, #28
   17da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17da8:	add	ip, r2, r1
   17dac:	mov	r3, #0
   17db0:	cmp	ip, r1
   17db4:	mov	r1, #0
   17db8:	movwhi	r1, #1
   17dbc:	add	r2, ip, #4
   17dc0:	cmp	r2, r0
   17dc4:	movwls	r3, #1
   17dc8:	and	r0, r1, r3
   17dcc:	and	r1, ip, #3
   17dd0:	clz	r1, r1
   17dd4:	lsr	r1, r1, #5
   17dd8:	and	r0, r1, r0
   17ddc:	bx	lr
   17de0:	ldr	r0, [r0]
   17de4:	b	17de8 <flatcc_verify_union_vector_field@@Base+0x2d0>
   17de8:	bx	lr
   17dec:	mov	ip, r0
   17df0:	cmp	r3, #4
   17df4:	movls	r3, #4
   17df8:	add	r2, r2, r1
   17dfc:	mov	r0, #0
   17e00:	cmp	r2, r1
   17e04:	bls	17e28 <flatcc_verify_union_vector_field@@Base+0x310>
   17e08:	add	r1, r2, #4
   17e0c:	cmp	r1, ip
   17e10:	bxhi	lr
   17e14:	sub	r0, r3, #1
   17e18:	orr	r0, r0, #3
   17e1c:	and	r0, r0, r1
   17e20:	clz	r0, r0
   17e24:	lsr	r0, r0, #5
   17e28:	bx	lr
   17e2c:	add	r0, r0, r1
   17e30:	b	17e34 <flatcc_verify_union_vector_field@@Base+0x31c>
   17e34:	ldrh	r0, [r0]
   17e38:	b	17e3c <flatcc_verify_union_vector_field@@Base+0x324>
   17e3c:	bx	lr
   17e40:	bx	lr
   17e44:	ldr	r0, [r0]
   17e48:	b	17e4c <flatcc_verify_union_vector_field@@Base+0x334>
   17e4c:	bx	lr

00017e50 <__libc_csu_init@@Base>:
   17e50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e54:	mov	r7, r0
   17e58:	ldr	r6, [pc, #72]	; 17ea8 <__libc_csu_init@@Base+0x58>
   17e5c:	ldr	r5, [pc, #72]	; 17eac <__libc_csu_init@@Base+0x5c>
   17e60:	add	r6, pc, r6
   17e64:	add	r5, pc, r5
   17e68:	sub	r6, r6, r5
   17e6c:	mov	r8, r1
   17e70:	mov	r9, r2
   17e74:	bl	126ec <free@plt-0x20>
   17e78:	asrs	r6, r6, #2
   17e7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e80:	mov	r4, #0
   17e84:	add	r4, r4, #1
   17e88:	ldr	r3, [r5], #4
   17e8c:	mov	r2, r9
   17e90:	mov	r1, r8
   17e94:	mov	r0, r7
   17e98:	blx	r3
   17e9c:	cmp	r6, r4
   17ea0:	bne	17e84 <__libc_csu_init@@Base+0x34>
   17ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ea8:	andeq	r2, r1, r4, lsr #1
   17eac:	muleq	r1, ip, r0

00017eb0 <__libc_csu_fini@@Base>:
   17eb0:	bx	lr

Disassembly of section .fini:

00017eb4 <.fini>:
   17eb4:	push	{r3, lr}
   17eb8:	pop	{r3, pc}
