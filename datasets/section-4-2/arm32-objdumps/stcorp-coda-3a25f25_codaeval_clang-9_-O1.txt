
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010df8 <.init>:
   10df8:	push	{r3, lr}
   10dfc:	bl	1101c <_start@@Base+0x3c>
   10e00:	pop	{r3, pc}

Disassembly of section .plt:

00010e04 <coda_match_filefilter@plt-0x14>:
   10e04:	push	{lr}		; (str lr, [sp, #-4]!)
   10e08:	ldr	lr, [pc, #4]	; 10e14 <coda_match_filefilter@plt-0x4>
   10e0c:	add	lr, pc, lr
   10e10:	ldr	pc, [lr, #8]!
   10e14:	andeq	r2, r1, ip, ror #3

00010e18 <coda_match_filefilter@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #73728	; 0x12000
   10e20:	ldr	pc, [ip, #492]!	; 0x1ec

00010e24 <coda_expression_eval_integer@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #73728	; 0x12000
   10e2c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e30 <strcmp@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #73728	; 0x12000
   10e38:	ldr	pc, [ip, #476]!	; 0x1dc

00010e3c <printf@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #73728	; 0x12000
   10e44:	ldr	pc, [ip, #468]!	; 0x1d4

00010e48 <coda_set_error@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #73728	; 0x12000
   10e50:	ldr	pc, [ip, #460]!	; 0x1cc

00010e54 <coda_open@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #73728	; 0x12000
   10e5c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e60 <free@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #73728	; 0x12000
   10e68:	ldr	pc, [ip, #444]!	; 0x1bc

00010e6c <coda_set_definition_path_conditional@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #73728	; 0x12000
   10e74:	ldr	pc, [ip, #436]!	; 0x1b4

00010e78 <coda_set_definition_path@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #73728	; 0x12000
   10e80:	ldr	pc, [ip, #428]!	; 0x1ac

00010e84 <fwrite@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #73728	; 0x12000
   10e8c:	ldr	pc, [ip, #420]!	; 0x1a4

00010e90 <coda_expression_eval_bool@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #73728	; 0x12000
   10e98:	ldr	pc, [ip, #412]!	; 0x19c

00010e9c <coda_cursor_set_product@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #73728	; 0x12000
   10ea4:	ldr	pc, [ip, #404]!	; 0x194

00010ea8 <coda_done@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #73728	; 0x12000
   10eb0:	ldr	pc, [ip, #396]!	; 0x18c

00010eb4 <puts@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #73728	; 0x12000
   10ebc:	ldr	pc, [ip, #388]!	; 0x184

00010ec0 <__libc_start_main@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #73728	; 0x12000
   10ec8:	ldr	pc, [ip, #380]!	; 0x17c

00010ecc <coda_expression_delete@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #73728	; 0x12000
   10ed4:	ldr	pc, [ip, #372]!	; 0x174

00010ed8 <__gmon_start__@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #73728	; 0x12000
   10ee0:	ldr	pc, [ip, #364]!	; 0x16c

00010ee4 <__ctype_b_loc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #73728	; 0x12000
   10eec:	ldr	pc, [ip, #356]!	; 0x164

00010ef0 <exit@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #73728	; 0x12000
   10ef8:	ldr	pc, [ip, #348]!	; 0x15c

00010efc <strlen@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #73728	; 0x12000
   10f04:	ldr	pc, [ip, #340]!	; 0x154

00010f08 <fprintf@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #73728	; 0x12000
   10f10:	ldr	pc, [ip, #332]!	; 0x14c

00010f14 <coda_init@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #73728	; 0x12000
   10f1c:	ldr	pc, [ip, #324]!	; 0x144

00010f20 <coda_set_option_perform_conversions@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #73728	; 0x12000
   10f28:	ldr	pc, [ip, #316]!	; 0x13c

00010f2c <coda_expression_eval_string@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #73728	; 0x12000
   10f34:	ldr	pc, [ip, #308]!	; 0x134

00010f38 <putchar@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #73728	; 0x12000
   10f40:	ldr	pc, [ip, #300]!	; 0x12c

00010f44 <coda_expression_get_type@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #73728	; 0x12000
   10f4c:	ldr	pc, [ip, #292]!	; 0x124

00010f50 <coda_close@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #73728	; 0x12000
   10f58:	ldr	pc, [ip, #284]!	; 0x11c

00010f5c <coda_expression_is_constant@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #73728	; 0x12000
   10f64:	ldr	pc, [ip, #276]!	; 0x114

00010f68 <coda_expression_eval_float@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #73728	; 0x12000
   10f70:	ldr	pc, [ip, #268]!	; 0x10c

00010f74 <coda_expression_eval_node@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #73728	; 0x12000
   10f7c:	ldr	pc, [ip, #260]!	; 0x104

00010f80 <coda_errno_to_string@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #73728	; 0x12000
   10f88:	ldr	pc, [ip, #252]!	; 0xfc

00010f8c <coda_expression_get_type_name@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #73728	; 0x12000
   10f94:	ldr	pc, [ip, #244]!	; 0xf4

00010f98 <coda_expression_from_string@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #73728	; 0x12000
   10fa0:	ldr	pc, [ip, #236]!	; 0xec

00010fa4 <coda_get_libcoda_version@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #73728	; 0x12000
   10fac:	ldr	pc, [ip, #228]!	; 0xe4

00010fb0 <coda_get_errno@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #73728	; 0x12000
   10fb8:	ldr	pc, [ip, #220]!	; 0xdc

00010fbc <abort@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #73728	; 0x12000
   10fc4:	ldr	pc, [ip, #212]!	; 0xd4

00010fc8 <coda_str64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #73728	; 0x12000
   10fd0:	ldr	pc, [ip, #204]!	; 0xcc

00010fd4 <__assert_fail@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #73728	; 0x12000
   10fdc:	ldr	pc, [ip, #196]!	; 0xc4

Disassembly of section .text:

00010fe0 <_start@@Base>:
   10fe0:	mov	fp, #0
   10fe4:	mov	lr, #0
   10fe8:	pop	{r1}		; (ldr r1, [sp], #4)
   10fec:	mov	r2, sp
   10ff0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ff4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ff8:	ldr	ip, [pc, #16]	; 11010 <_start@@Base+0x30>
   10ffc:	push	{ip}		; (str ip, [sp, #-4]!)
   11000:	ldr	r0, [pc, #12]	; 11014 <_start@@Base+0x34>
   11004:	ldr	r3, [pc, #12]	; 11018 <_start@@Base+0x38>
   11008:	bl	10ec0 <__libc_start_main@plt>
   1100c:	bl	10fbc <abort@plt>
   11010:	andeq	r1, r1, r4, asr #26
   11014:	andeq	r1, r1, ip, lsl #5
   11018:	andeq	r1, r1, r4, ror #25
   1101c:	ldr	r3, [pc, #20]	; 11038 <_start@@Base+0x58>
   11020:	ldr	r2, [pc, #20]	; 1103c <_start@@Base+0x5c>
   11024:	add	r3, pc, r3
   11028:	ldr	r2, [r3, r2]
   1102c:	cmp	r2, #0
   11030:	bxeq	lr
   11034:	b	10ed8 <__gmon_start__@plt>
   11038:	ldrdeq	r1, [r1], -r4
   1103c:	andeq	r0, r0, r4, lsr #1
   11040:	ldr	r0, [pc, #24]	; 11060 <_start@@Base+0x80>
   11044:	ldr	r3, [pc, #24]	; 11064 <_start@@Base+0x84>
   11048:	cmp	r3, r0
   1104c:	bxeq	lr
   11050:	ldr	r3, [pc, #16]	; 11068 <_start@@Base+0x88>
   11054:	cmp	r3, #0
   11058:	bxeq	lr
   1105c:	bx	r3
   11060:	strheq	r3, [r2], -r0
   11064:	strheq	r3, [r2], -r0
   11068:	andeq	r0, r0, r0
   1106c:	ldr	r0, [pc, #36]	; 11098 <_start@@Base+0xb8>
   11070:	ldr	r1, [pc, #36]	; 1109c <_start@@Base+0xbc>
   11074:	sub	r1, r1, r0
   11078:	asr	r1, r1, #2
   1107c:	add	r1, r1, r1, lsr #31
   11080:	asrs	r1, r1, #1
   11084:	bxeq	lr
   11088:	ldr	r3, [pc, #16]	; 110a0 <_start@@Base+0xc0>
   1108c:	cmp	r3, #0
   11090:	bxeq	lr
   11094:	bx	r3
   11098:	strheq	r3, [r2], -r0
   1109c:	strheq	r3, [r2], -r0
   110a0:	andeq	r0, r0, r0
   110a4:	push	{r4, lr}
   110a8:	ldr	r4, [pc, #24]	; 110c8 <_start@@Base+0xe8>
   110ac:	ldrb	r3, [r4]
   110b0:	cmp	r3, #0
   110b4:	popne	{r4, pc}
   110b8:	bl	11040 <_start@@Base+0x60>
   110bc:	mov	r3, #1
   110c0:	strb	r3, [r4]
   110c4:	pop	{r4, pc}
   110c8:	strheq	r3, [r2], -r4
   110cc:	b	1106c <_start@@Base+0x8c>

000110d0 <callback@@Base>:
   110d0:	push	{fp, lr}
   110d4:	mov	fp, sp
   110d8:	cmp	r1, #4
   110dc:	bhi	1114c <callback@@Base+0x7c>
   110e0:	mov	ip, r2
   110e4:	mov	r3, r0
   110e8:	add	r0, pc, #0
   110ec:	ldr	pc, [r0, r1, lsl #2]
   110f0:	andeq	r1, r1, r0, lsl r1
   110f4:	andeq	r1, r1, ip, lsr #2
   110f8:	andeq	r1, r1, r4, asr r1
   110fc:	andeq	r1, r1, ip, asr #2
   11100:	andeq	r1, r1, r4, lsl #2
   11104:	mov	r0, r3
   11108:	pop	{fp, lr}
   1110c:	b	11178 <callback@@Base+0xa8>
   11110:	movw	r0, #12464	; 0x30b0
   11114:	movt	r0, #2
   11118:	ldr	r0, [r0]
   1111c:	movw	r1, #7508	; 0x1d54
   11120:	movt	r1, #1
   11124:	mov	r2, ip
   11128:	b	11148 <callback@@Base+0x78>
   1112c:	movw	r0, #12464	; 0x30b0
   11130:	movt	r0, #2
   11134:	ldr	r0, [r0]
   11138:	movw	r1, #7564	; 0x1d8c
   1113c:	movt	r1, #1
   11140:	mov	r2, r3
   11144:	mov	r3, ip
   11148:	bl	10f08 <fprintf@plt>
   1114c:	mov	r0, #0
   11150:	pop	{fp, pc}
   11154:	movw	r0, #12464	; 0x30b0
   11158:	movt	r0, #2
   1115c:	ldr	r0, [r0]
   11160:	movw	r1, #7526	; 0x1d66
   11164:	movt	r1, #1
   11168:	mov	r2, r3
   1116c:	bl	10f08 <fprintf@plt>
   11170:	mov	r0, #0
   11174:	pop	{fp, pc}
   11178:	push	{r4, r5, r6, r7, fp, lr}
   1117c:	add	fp, sp, #16
   11180:	sub	sp, sp, #528	; 0x210
   11184:	mov	r4, r0
   11188:	mov	r0, #0
   1118c:	str	r0, [fp, #-20]	; 0xffffffec
   11190:	sub	r1, fp, #20
   11194:	mov	r0, r4
   11198:	bl	10e54 <coda_open@plt>
   1119c:	mov	r5, #1
   111a0:	cmp	r0, #0
   111a4:	bne	11210 <callback@@Base+0x140>
   111a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   111ac:	mov	r0, sp
   111b0:	bl	10e9c <coda_cursor_set_product@plt>
   111b4:	cmp	r0, #0
   111b8:	beq	111c8 <callback@@Base+0xf8>
   111bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   111c0:	bl	10f50 <coda_close@plt>
   111c4:	b	11210 <callback@@Base+0x140>
   111c8:	movw	r0, #12472	; 0x30b8
   111cc:	movt	r0, #2
   111d0:	ldr	r0, [r0]
   111d4:	cmp	r0, #0
   111d8:	beq	111ec <callback@@Base+0x11c>
   111dc:	mov	r1, sp
   111e0:	bl	10f74 <coda_expression_eval_node@plt>
   111e4:	cmp	r0, #0
   111e8:	bne	11250 <callback@@Base+0x180>
   111ec:	mov	r0, sp
   111f0:	bl	11684 <main@@Base+0x3f8>
   111f4:	cmp	r0, #0
   111f8:	bne	1121c <callback@@Base+0x14c>
   111fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   11200:	bl	10f50 <coda_close@plt>
   11204:	mov	r5, r0
   11208:	cmp	r0, #0
   1120c:	movwne	r5, #1
   11210:	mov	r0, r5
   11214:	sub	sp, fp, #16
   11218:	pop	{r4, r5, r6, r7, fp, pc}
   1121c:	movw	r0, #12464	; 0x30b0
   11220:	movt	r0, #2
   11224:	ldr	r5, [r0]
   11228:	bl	10fb0 <coda_get_errno@plt>
   1122c:	ldr	r0, [r0]
   11230:	bl	10f80 <coda_errno_to_string@plt>
   11234:	mov	r2, r0
   11238:	movw	r1, #7508	; 0x1d54
   1123c:	movt	r1, #1
   11240:	mov	r0, r5
   11244:	mov	r3, r4
   11248:	bl	10f08 <fprintf@plt>
   1124c:	b	111fc <callback@@Base+0x12c>
   11250:	movw	r0, #12464	; 0x30b0
   11254:	movt	r0, #2
   11258:	ldr	r4, [r0]
   1125c:	bl	10fb0 <coda_get_errno@plt>
   11260:	ldr	r0, [r0]
   11264:	bl	10f80 <coda_errno_to_string@plt>
   11268:	mov	r2, r0
   1126c:	movw	r1, #8006	; 0x1f46
   11270:	movt	r1, #1
   11274:	mov	r0, r4
   11278:	bl	10f08 <fprintf@plt>
   1127c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11280:	bl	10f50 <coda_close@plt>
   11284:	mov	r5, #0
   11288:	b	11210 <callback@@Base+0x140>

0001128c <main@@Base>:
   1128c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11290:	add	fp, sp, #28
   11294:	sub	sp, sp, #12
   11298:	cmp	r0, #1
   1129c:	beq	115b8 <main@@Base+0x32c>
   112a0:	mov	r4, r1
   112a4:	mov	r5, r0
   112a8:	ldr	r6, [r1, #4]
   112ac:	movw	r1, #7600	; 0x1db0
   112b0:	movt	r1, #1
   112b4:	mov	r0, r6
   112b8:	bl	10e30 <strcmp@plt>
   112bc:	cmp	r0, #0
   112c0:	beq	115b8 <main@@Base+0x32c>
   112c4:	movw	r1, #9530	; 0x253a
   112c8:	movt	r1, #1
   112cc:	mov	r0, r6
   112d0:	bl	10e30 <strcmp@plt>
   112d4:	cmp	r0, #0
   112d8:	beq	115b8 <main@@Base+0x32c>
   112dc:	movw	r1, #7603	; 0x1db3
   112e0:	movt	r1, #1
   112e4:	mov	r0, r6
   112e8:	bl	10e30 <strcmp@plt>
   112ec:	cmp	r0, #0
   112f0:	beq	115ec <main@@Base+0x360>
   112f4:	movw	r1, #9584	; 0x2570
   112f8:	movt	r1, #1
   112fc:	mov	r0, r6
   11300:	bl	10e30 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	beq	115ec <main@@Base+0x360>
   1130c:	cmp	r5, #3
   11310:	blt	1132c <main@@Base+0xa0>
   11314:	movw	r1, #7606	; 0x1db6
   11318:	movt	r1, #1
   1131c:	mov	r0, r6
   11320:	bl	10e30 <strcmp@plt>
   11324:	cmp	r0, #0
   11328:	beq	114e4 <main@@Base+0x258>
   1132c:	ldr	r0, [r4]
   11330:	movw	r2, #7609	; 0x1db9
   11334:	movt	r2, #1
   11338:	mov	r1, #0
   1133c:	bl	10e6c <coda_set_definition_path_conditional@plt>
   11340:	mov	r7, #1
   11344:	cmp	r0, #0
   11348:	bne	115c4 <main@@Base+0x338>
   1134c:	cmp	r7, r5
   11350:	bge	114f8 <main@@Base+0x26c>
   11354:	mov	r0, #1
   11358:	str	r0, [sp, #8]
   1135c:	mov	r9, #0
   11360:	movw	r6, #7646	; 0x1dde
   11364:	movt	r6, #1
   11368:	b	11380 <main@@Base+0xf4>
   1136c:	mov	r9, #1
   11370:	mov	sl, r7
   11374:	add	r7, sl, #1
   11378:	cmp	r7, r5
   1137c:	bge	114f8 <main@@Base+0x26c>
   11380:	ldr	r8, [r4, r7, lsl #2]
   11384:	mov	r0, r8
   11388:	mov	r1, r6
   1138c:	bl	10e30 <strcmp@plt>
   11390:	cmp	r0, #0
   11394:	beq	1136c <main@@Base+0xe0>
   11398:	mov	r0, r8
   1139c:	movw	r1, #8821	; 0x2275
   113a0:	movt	r1, #1
   113a4:	bl	10e30 <strcmp@plt>
   113a8:	cmp	r0, #0
   113ac:	beq	1136c <main@@Base+0xe0>
   113b0:	mov	r0, r8
   113b4:	movw	r1, #7649	; 0x1de1
   113b8:	movt	r1, #1
   113bc:	bl	10e30 <strcmp@plt>
   113c0:	cmp	r0, #0
   113c4:	beq	1142c <main@@Base+0x1a0>
   113c8:	mov	r0, r8
   113cc:	movw	r1, #9005	; 0x232d
   113d0:	movt	r1, #1
   113d4:	bl	10e30 <strcmp@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	1142c <main@@Base+0x1a0>
   113e0:	mov	r0, r8
   113e4:	movw	r1, #7652	; 0x1de4
   113e8:	movt	r1, #1
   113ec:	bl	10e30 <strcmp@plt>
   113f0:	cmp	r0, #0
   113f4:	bne	11438 <main@@Base+0x1ac>
   113f8:	add	sl, r7, #1
   113fc:	cmp	sl, r5
   11400:	bge	11438 <main@@Base+0x1ac>
   11404:	ldr	r0, [r4, sl, lsl #2]
   11408:	ldrb	r1, [r0]
   1140c:	cmp	r1, #45	; 0x2d
   11410:	beq	11438 <main@@Base+0x1ac>
   11414:	movw	r1, #12472	; 0x30b8
   11418:	movt	r1, #2
   1141c:	bl	10f98 <coda_expression_from_string@plt>
   11420:	cmp	r0, #0
   11424:	beq	11374 <main@@Base+0xe8>
   11428:	b	11584 <main@@Base+0x2f8>
   1142c:	mov	r0, #0
   11430:	str	r0, [sp, #8]
   11434:	b	11370 <main@@Base+0xe4>
   11438:	ldrb	r0, [r8]
   1143c:	cmp	r0, #45	; 0x2d
   11440:	beq	114f8 <main@@Base+0x26c>
   11444:	ldr	r0, [r4, r7, lsl #2]
   11448:	movw	r8, #12476	; 0x30bc
   1144c:	movt	r8, #2
   11450:	mov	r1, r8
   11454:	bl	10f98 <coda_expression_from_string@plt>
   11458:	cmp	r0, #0
   1145c:	bne	115f8 <main@@Base+0x36c>
   11460:	ldr	r0, [r8]
   11464:	movw	r6, #12480	; 0x30c0
   11468:	movt	r6, #2
   1146c:	mov	r1, r6
   11470:	bl	10f44 <coda_expression_get_type@plt>
   11474:	cmp	r0, #0
   11478:	bne	115c4 <main@@Base+0x338>
   1147c:	ldr	r0, [r6]
   11480:	orr	r1, r0, #1
   11484:	cmp	r1, #5
   11488:	beq	11620 <main@@Base+0x394>
   1148c:	cmp	r9, #0
   11490:	bne	11558 <main@@Base+0x2cc>
   11494:	add	r6, r7, #1
   11498:	cmp	r6, r5
   1149c:	bge	11524 <main@@Base+0x298>
   114a0:	bl	10f14 <coda_init@plt>
   114a4:	cmp	r0, #0
   114a8:	bne	115c4 <main@@Base+0x338>
   114ac:	ldr	r0, [sp, #8]
   114b0:	bl	10f20 <coda_set_option_perform_conversions@plt>
   114b4:	mov	r0, #0
   114b8:	str	r0, [sp]
   114bc:	sub	r1, r5, r6
   114c0:	add	r2, r4, r6, lsl #2
   114c4:	movw	r3, #4304	; 0x10d0
   114c8:	movt	r3, #1
   114cc:	mov	r0, #0
   114d0:	bl	10e18 <coda_match_filefilter@plt>
   114d4:	cmp	r0, #0
   114d8:	bne	115c4 <main@@Base+0x338>
   114dc:	bl	10ea8 <coda_done@plt>
   114e0:	b	11558 <main@@Base+0x2cc>
   114e4:	ldr	r0, [r4, #8]
   114e8:	bl	10e78 <coda_set_definition_path@plt>
   114ec:	mov	r7, #3
   114f0:	cmp	r7, r5
   114f4:	blt	11354 <main@@Base+0xc8>
   114f8:	movw	r0, #12464	; 0x30b0
   114fc:	movt	r0, #2
   11500:	ldr	r3, [r0]
   11504:	movw	r0, #7692	; 0x1e0c
   11508:	movt	r0, #1
   1150c:	mov	r1, #25
   11510:	mov	r2, #1
   11514:	bl	10e84 <fwrite@plt>
   11518:	bl	11870 <main@@Base+0x5e4>
   1151c:	mov	r0, #1
   11520:	bl	10ef0 <exit@plt>
   11524:	movw	r0, #12472	; 0x30b8
   11528:	movt	r0, #2
   1152c:	ldr	r0, [r0]
   11530:	cmp	r0, #0
   11534:	bne	11640 <main@@Base+0x3b4>
   11538:	ldr	r0, [r8]
   1153c:	bl	10f5c <coda_expression_is_constant@plt>
   11540:	cmp	r0, #0
   11544:	beq	1165c <main@@Base+0x3d0>
   11548:	mov	r0, #0
   1154c:	bl	11684 <main@@Base+0x3f8>
   11550:	cmp	r0, #0
   11554:	bne	115c4 <main@@Base+0x338>
   11558:	ldr	r0, [r8]
   1155c:	bl	10ecc <coda_expression_delete@plt>
   11560:	movw	r0, #12472	; 0x30b8
   11564:	movt	r0, #2
   11568:	ldr	r0, [r0]
   1156c:	cmp	r0, #0
   11570:	beq	11578 <main@@Base+0x2ec>
   11574:	bl	10ecc <coda_expression_delete@plt>
   11578:	mov	r0, #0
   1157c:	sub	sp, fp, #28
   11580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11584:	movw	r0, #12464	; 0x30b0
   11588:	movt	r0, #2
   1158c:	ldr	r4, [r0]
   11590:	bl	10fb0 <coda_get_errno@plt>
   11594:	ldr	r0, [r0]
   11598:	bl	10f80 <coda_errno_to_string@plt>
   1159c:	mov	r2, r0
   115a0:	movw	r1, #7655	; 0x1de7
   115a4:	movt	r1, #1
   115a8:	mov	r0, r4
   115ac:	bl	10f08 <fprintf@plt>
   115b0:	mov	r0, #1
   115b4:	bl	10ef0 <exit@plt>
   115b8:	bl	11870 <main@@Base+0x5e4>
   115bc:	mov	r0, #0
   115c0:	bl	10ef0 <exit@plt>
   115c4:	movw	r0, #12464	; 0x30b0
   115c8:	movt	r0, #2
   115cc:	ldr	r4, [r0]
   115d0:	bl	10fb0 <coda_get_errno@plt>
   115d4:	ldr	r0, [r0]
   115d8:	bl	10f80 <coda_errno_to_string@plt>
   115dc:	mov	r2, r0
   115e0:	movw	r1, #7635	; 0x1dd3
   115e4:	movt	r1, #1
   115e8:	b	115a8 <main@@Base+0x31c>
   115ec:	bl	11a2c <main@@Base+0x7a0>
   115f0:	mov	r0, #0
   115f4:	bl	10ef0 <exit@plt>
   115f8:	movw	r0, #12464	; 0x30b0
   115fc:	movt	r0, #2
   11600:	ldr	r4, [r0]
   11604:	bl	10fb0 <coda_get_errno@plt>
   11608:	ldr	r0, [r0]
   1160c:	bl	10f80 <coda_errno_to_string@plt>
   11610:	mov	r2, r0
   11614:	movw	r1, #7718	; 0x1e26
   11618:	movt	r1, #1
   1161c:	b	115a8 <main@@Base+0x31c>
   11620:	movw	r1, #12464	; 0x30b0
   11624:	movt	r1, #2
   11628:	ldr	r4, [r1]
   1162c:	bl	10f8c <coda_expression_get_type_name@plt>
   11630:	mov	r2, r0
   11634:	movw	r1, #7750	; 0x1e46
   11638:	movt	r1, #1
   1163c:	b	115a8 <main@@Base+0x31c>
   11640:	movw	r0, #12464	; 0x30b0
   11644:	movt	r0, #2
   11648:	ldr	r3, [r0]
   1164c:	movw	r0, #7797	; 0x1e75
   11650:	movt	r0, #1
   11654:	mov	r1, #96	; 0x60
   11658:	b	11674 <main@@Base+0x3e8>
   1165c:	movw	r0, #12464	; 0x30b0
   11660:	movt	r0, #2
   11664:	ldr	r3, [r0]
   11668:	movw	r0, #7894	; 0x1ed6
   1166c:	movt	r0, #1
   11670:	mov	r1, #111	; 0x6f
   11674:	mov	r2, #1
   11678:	bl	10e84 <fwrite@plt>
   1167c:	mov	r0, #1
   11680:	bl	10ef0 <exit@plt>
   11684:	push	{r4, r5, fp, lr}
   11688:	add	fp, sp, #8
   1168c:	sub	sp, sp, #32
   11690:	mov	r1, r0
   11694:	movw	r0, #12480	; 0x30c0
   11698:	movt	r0, #2
   1169c:	ldr	r0, [r0]
   116a0:	mov	r4, #0
   116a4:	cmp	r0, #5
   116a8:	bhi	11844 <main@@Base+0x5b8>
   116ac:	add	r2, pc, #0
   116b0:	ldr	pc, [r2, r0, lsl #2]
   116b4:	andeq	r1, r1, ip, asr #13
   116b8:	andeq	r1, r1, r4, lsl #14
   116bc:	andeq	r1, r1, ip, lsr r7
   116c0:	andeq	r1, r1, r4, ror r7
   116c4:	andeq	r1, r1, r0, asr r8
   116c8:	andeq	r1, r1, r0, asr r8
   116cc:	movw	r0, #12476	; 0x30bc
   116d0:	movt	r0, #2
   116d4:	ldr	r0, [r0]
   116d8:	mov	r2, sp
   116dc:	bl	10e90 <coda_expression_eval_bool@plt>
   116e0:	cmp	r0, #0
   116e4:	beq	117c4 <main@@Base+0x538>
   116e8:	bl	10fb0 <coda_get_errno@plt>
   116ec:	ldr	r0, [r0]
   116f0:	bl	10f80 <coda_errno_to_string@plt>
   116f4:	mov	r2, r0
   116f8:	movw	r1, #8066	; 0x1f82
   116fc:	movt	r1, #1
   11700:	b	117b4 <main@@Base+0x528>
   11704:	movw	r0, #12476	; 0x30bc
   11708:	movt	r0, #2
   1170c:	ldr	r0, [r0]
   11710:	sub	r2, fp, #16
   11714:	bl	10e24 <coda_expression_eval_integer@plt>
   11718:	cmp	r0, #0
   1171c:	beq	117e4 <main@@Base+0x558>
   11720:	bl	10fb0 <coda_get_errno@plt>
   11724:	ldr	r0, [r0]
   11728:	bl	10f80 <coda_errno_to_string@plt>
   1172c:	mov	r2, r0
   11730:	movw	r1, #8117	; 0x1fb5
   11734:	movt	r1, #1
   11738:	b	117b4 <main@@Base+0x528>
   1173c:	movw	r0, #12476	; 0x30bc
   11740:	movt	r0, #2
   11744:	ldr	r0, [r0]
   11748:	mov	r2, sp
   1174c:	bl	10f68 <coda_expression_eval_float@plt>
   11750:	cmp	r0, #0
   11754:	beq	11804 <main@@Base+0x578>
   11758:	bl	10fb0 <coda_get_errno@plt>
   1175c:	ldr	r0, [r0]
   11760:	bl	10f80 <coda_errno_to_string@plt>
   11764:	mov	r2, r0
   11768:	movw	r1, #8157	; 0x1fdd
   1176c:	movt	r1, #1
   11770:	b	117b4 <main@@Base+0x528>
   11774:	mov	r0, #0
   11778:	str	r0, [sp]
   1177c:	movw	r0, #12476	; 0x30bc
   11780:	movt	r0, #2
   11784:	ldr	r0, [r0]
   11788:	mov	r2, sp
   1178c:	sub	r3, fp, #16
   11790:	bl	10f2c <coda_expression_eval_string@plt>
   11794:	cmp	r0, #0
   11798:	beq	1181c <main@@Base+0x590>
   1179c:	bl	10fb0 <coda_get_errno@plt>
   117a0:	ldr	r0, [r0]
   117a4:	bl	10f80 <coda_errno_to_string@plt>
   117a8:	mov	r2, r0
   117ac:	movw	r1, #8211	; 0x2013
   117b0:	movt	r1, #1
   117b4:	mvn	r0, #400	; 0x190
   117b8:	bl	10e48 <coda_set_error@plt>
   117bc:	mvn	r4, #0
   117c0:	b	11844 <main@@Base+0x5b8>
   117c4:	ldr	r1, [sp]
   117c8:	movw	r2, #8111	; 0x1faf
   117cc:	movt	r2, #1
   117d0:	movw	r0, #8106	; 0x1faa
   117d4:	movt	r0, #1
   117d8:	cmp	r1, #0
   117dc:	moveq	r0, r2
   117e0:	b	117fc <main@@Base+0x570>
   117e4:	ldr	r0, [fp, #-16]
   117e8:	ldr	r1, [fp, #-12]
   117ec:	mov	r5, sp
   117f0:	mov	r2, r5
   117f4:	bl	10fc8 <coda_str64@plt>
   117f8:	mov	r0, r5
   117fc:	bl	10eb4 <puts@plt>
   11800:	b	11844 <main@@Base+0x5b8>
   11804:	vldr	d16, [sp]
   11808:	vmov	r2, r3, d16
   1180c:	movw	r0, #8204	; 0x200c
   11810:	movt	r0, #1
   11814:	bl	10e3c <printf@plt>
   11818:	b	11844 <main@@Base+0x5b8>
   1181c:	ldr	r1, [fp, #-16]
   11820:	ldr	r0, [sp]
   11824:	bl	11a60 <main@@Base+0x7d4>
   11828:	mov	r0, #10
   1182c:	bl	10f38 <putchar@plt>
   11830:	ldr	r0, [sp]
   11834:	cmp	r0, #0
   11838:	beq	11840 <main@@Base+0x5b4>
   1183c:	bl	10e60 <free@plt>
   11840:	mov	r4, #0
   11844:	mov	r0, r4
   11848:	sub	sp, fp, #8
   1184c:	pop	{r4, r5, fp, pc}
   11850:	movw	r0, #8250	; 0x203a
   11854:	movt	r0, #1
   11858:	movw	r1, #8252	; 0x203c
   1185c:	movt	r1, #1
   11860:	movw	r3, #8321	; 0x2081
   11864:	movt	r3, #1
   11868:	mov	r2, #230	; 0xe6
   1186c:	bl	10fd4 <__assert_fail@plt>
   11870:	push	{fp, lr}
   11874:	mov	fp, sp
   11878:	movw	r0, #8392	; 0x20c8
   1187c:	movt	r0, #1
   11880:	bl	10eb4 <puts@plt>
   11884:	movw	r0, #8399	; 0x20cf
   11888:	movt	r0, #1
   1188c:	bl	10eb4 <puts@plt>
   11890:	movw	r0, #8477	; 0x211d
   11894:	movt	r0, #1
   11898:	bl	10eb4 <puts@plt>
   1189c:	movw	r0, #8555	; 0x216b
   118a0:	movt	r0, #1
   118a4:	bl	10eb4 <puts@plt>
   118a8:	movw	r0, #8591	; 0x218f
   118ac:	movt	r0, #1
   118b0:	bl	10eb4 <puts@plt>
   118b4:	movw	r0, #8665	; 0x21d9
   118b8:	movt	r0, #1
   118bc:	bl	10eb4 <puts@plt>
   118c0:	movw	r0, #8740	; 0x2224
   118c4:	movt	r0, #1
   118c8:	bl	10eb4 <puts@plt>
   118cc:	mov	r0, #10
   118d0:	bl	10f38 <putchar@plt>
   118d4:	movw	r0, #8788	; 0x2254
   118d8:	movt	r0, #1
   118dc:	bl	10eb4 <puts@plt>
   118e0:	movw	r0, #8805	; 0x2265
   118e4:	movt	r0, #1
   118e8:	bl	10eb4 <puts@plt>
   118ec:	movw	r0, #8829	; 0x227d
   118f0:	movt	r0, #1
   118f4:	bl	10eb4 <puts@plt>
   118f8:	movw	r0, #8909	; 0x22cd
   118fc:	movt	r0, #1
   11900:	bl	10eb4 <puts@plt>
   11904:	movw	r0, #8989	; 0x231d
   11908:	movt	r0, #1
   1190c:	bl	10eb4 <puts@plt>
   11910:	movw	r0, #9027	; 0x2343
   11914:	movt	r0, #1
   11918:	bl	10eb4 <puts@plt>
   1191c:	movw	r0, #9085	; 0x237d
   11920:	movt	r0, #1
   11924:	bl	10eb4 <puts@plt>
   11928:	movw	r0, #9109	; 0x2395
   1192c:	movt	r0, #1
   11930:	bl	10eb4 <puts@plt>
   11934:	movw	r0, #9183	; 0x23df
   11938:	movt	r0, #1
   1193c:	bl	10eb4 <puts@plt>
   11940:	movw	r0, #9258	; 0x242a
   11944:	movt	r0, #1
   11948:	bl	10eb4 <puts@plt>
   1194c:	movw	r0, #9288	; 0x2448
   11950:	movt	r0, #1
   11954:	bl	10eb4 <puts@plt>
   11958:	movw	r0, #9364	; 0x2494
   1195c:	movt	r0, #1
   11960:	bl	10eb4 <puts@plt>
   11964:	mov	r0, #10
   11968:	bl	10f38 <putchar@plt>
   1196c:	movw	r0, #9411	; 0x24c3
   11970:	movt	r0, #1
   11974:	bl	10eb4 <puts@plt>
   11978:	movw	r0, #9491	; 0x2513
   1197c:	movt	r0, #1
   11980:	bl	10eb4 <puts@plt>
   11984:	mov	r0, #10
   11988:	bl	10f38 <putchar@plt>
   1198c:	movw	r0, #9514	; 0x252a
   11990:	movt	r0, #1
   11994:	bl	10eb4 <puts@plt>
   11998:	movw	r0, #9537	; 0x2541
   1199c:	movt	r0, #1
   119a0:	bl	10eb4 <puts@plt>
   119a4:	mov	r0, #10
   119a8:	bl	10f38 <putchar@plt>
   119ac:	movw	r0, #9567	; 0x255f
   119b0:	movt	r0, #1
   119b4:	bl	10eb4 <puts@plt>
   119b8:	movw	r0, #9594	; 0x257a
   119bc:	movt	r0, #1
   119c0:	bl	10eb4 <puts@plt>
   119c4:	mov	r0, #10
   119c8:	bl	10f38 <putchar@plt>
   119cc:	movw	r0, #9644	; 0x25ac
   119d0:	movt	r0, #1
   119d4:	bl	10eb4 <puts@plt>
   119d8:	movw	r0, #9718	; 0x25f6
   119dc:	movt	r0, #1
   119e0:	bl	10eb4 <puts@plt>
   119e4:	movw	r0, #9792	; 0x2640
   119e8:	movt	r0, #1
   119ec:	bl	10eb4 <puts@plt>
   119f0:	movw	r0, #9838	; 0x266e
   119f4:	movt	r0, #1
   119f8:	bl	10eb4 <puts@plt>
   119fc:	movw	r0, #9911	; 0x26b7
   11a00:	movt	r0, #1
   11a04:	bl	10eb4 <puts@plt>
   11a08:	movw	r0, #9984	; 0x2700
   11a0c:	movt	r0, #1
   11a10:	bl	10eb4 <puts@plt>
   11a14:	movw	r0, #10047	; 0x273f
   11a18:	movt	r0, #1
   11a1c:	bl	10eb4 <puts@plt>
   11a20:	mov	r0, #10
   11a24:	pop	{fp, lr}
   11a28:	b	10f38 <putchar@plt>
   11a2c:	push	{fp, lr}
   11a30:	mov	fp, sp
   11a34:	bl	10fa4 <coda_get_libcoda_version@plt>
   11a38:	mov	r1, r0
   11a3c:	movw	r0, #8053	; 0x1f75
   11a40:	movt	r0, #1
   11a44:	bl	10e3c <printf@plt>
   11a48:	movw	r0, #10111	; 0x277f
   11a4c:	movt	r0, #1
   11a50:	bl	10eb4 <puts@plt>
   11a54:	mov	r0, #10
   11a58:	pop	{fp, lr}
   11a5c:	b	10f38 <putchar@plt>
   11a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a64:	add	fp, sp, #28
   11a68:	sub	sp, sp, #4
   11a6c:	cmp	r0, #0
   11a70:	movne	r5, r1
   11a74:	cmpne	r1, #0
   11a78:	beq	11cdc <main@@Base+0xa50>
   11a7c:	mov	r4, r0
   11a80:	cmn	r5, #1
   11a84:	bgt	11a9c <main@@Base+0x810>
   11a88:	mov	r0, r4
   11a8c:	bl	10efc <strlen@plt>
   11a90:	mov	r5, r0
   11a94:	cmp	r0, #1
   11a98:	blt	11cdc <main@@Base+0xa50>
   11a9c:	movw	sl, #8371	; 0x20b3
   11aa0:	movt	sl, #1
   11aa4:	movw	r7, #8356	; 0x20a4
   11aa8:	movt	r7, #1
   11aac:	movw	r6, #8383	; 0x20bf
   11ab0:	movt	r6, #1
   11ab4:	movw	r8, #8380	; 0x20bc
   11ab8:	movt	r8, #1
   11abc:	b	11ad4 <main@@Base+0x848>
   11ac0:	mov	r0, r6
   11ac4:	bl	10e3c <printf@plt>
   11ac8:	add	r4, r4, #1
   11acc:	subs	r5, r5, #1
   11ad0:	beq	11cdc <main@@Base+0xa50>
   11ad4:	ldrb	r9, [r4]
   11ad8:	sub	r0, r9, #7
   11adc:	cmp	r0, #85	; 0x55
   11ae0:	bhi	11c94 <main@@Base+0xa08>
   11ae4:	add	r1, pc, #0
   11ae8:	ldr	pc, [r1, r0, lsl #2]
   11aec:	andeq	r1, r1, r4, asr #24
   11af0:	andeq	r1, r1, r0, asr ip
   11af4:	andeq	r1, r1, ip, asr ip
   11af8:	andeq	r1, r1, r8, ror #24
   11afc:	andeq	r1, r1, r4, ror ip
   11b00:	andeq	r1, r1, r0, lsl #25
   11b04:	andeq	r1, r1, ip, lsl #25
   11b08:	muleq	r1, r4, ip
   11b0c:	muleq	r1, r4, ip
   11b10:	muleq	r1, r4, ip
   11b14:	muleq	r1, r4, ip
   11b18:	muleq	r1, r4, ip
   11b1c:	muleq	r1, r4, ip
   11b20:	muleq	r1, r4, ip
   11b24:	muleq	r1, r4, ip
   11b28:	muleq	r1, r4, ip
   11b2c:	muleq	r1, r4, ip
   11b30:	muleq	r1, r4, ip
   11b34:	muleq	r1, r4, ip
   11b38:	muleq	r1, r4, ip
   11b3c:	andeq	r1, r1, r0, asr #25
   11b40:	muleq	r1, r4, ip
   11b44:	muleq	r1, r4, ip
   11b48:	muleq	r1, r4, ip
   11b4c:	muleq	r1, r4, ip
   11b50:	muleq	r1, r4, ip
   11b54:	muleq	r1, r4, ip
   11b58:	andeq	r1, r1, r0, asr #21
   11b5c:	muleq	r1, r4, ip
   11b60:	muleq	r1, r4, ip
   11b64:	muleq	r1, r4, ip
   11b68:	muleq	r1, r4, ip
   11b6c:	muleq	r1, r4, ip
   11b70:	muleq	r1, r4, ip
   11b74:	muleq	r1, r4, ip
   11b78:	muleq	r1, r4, ip
   11b7c:	muleq	r1, r4, ip
   11b80:	muleq	r1, r4, ip
   11b84:	muleq	r1, r4, ip
   11b88:	muleq	r1, r4, ip
   11b8c:	muleq	r1, r4, ip
   11b90:	muleq	r1, r4, ip
   11b94:	muleq	r1, r4, ip
   11b98:	muleq	r1, r4, ip
   11b9c:	muleq	r1, r4, ip
   11ba0:	muleq	r1, r4, ip
   11ba4:	muleq	r1, r4, ip
   11ba8:	muleq	r1, r4, ip
   11bac:	muleq	r1, r4, ip
   11bb0:	muleq	r1, r4, ip
   11bb4:	muleq	r1, r4, ip
   11bb8:	muleq	r1, r4, ip
   11bbc:	muleq	r1, r4, ip
   11bc0:	muleq	r1, r4, ip
   11bc4:	muleq	r1, r4, ip
   11bc8:	muleq	r1, r4, ip
   11bcc:	muleq	r1, r4, ip
   11bd0:	muleq	r1, r4, ip
   11bd4:	muleq	r1, r4, ip
   11bd8:	muleq	r1, r4, ip
   11bdc:	muleq	r1, r4, ip
   11be0:	muleq	r1, r4, ip
   11be4:	muleq	r1, r4, ip
   11be8:	muleq	r1, r4, ip
   11bec:	muleq	r1, r4, ip
   11bf0:	muleq	r1, r4, ip
   11bf4:	muleq	r1, r4, ip
   11bf8:	muleq	r1, r4, ip
   11bfc:	muleq	r1, r4, ip
   11c00:	muleq	r1, r4, ip
   11c04:	muleq	r1, r4, ip
   11c08:	muleq	r1, r4, ip
   11c0c:	muleq	r1, r4, ip
   11c10:	muleq	r1, r4, ip
   11c14:	muleq	r1, r4, ip
   11c18:	muleq	r1, r4, ip
   11c1c:	muleq	r1, r4, ip
   11c20:	muleq	r1, r4, ip
   11c24:	muleq	r1, r4, ip
   11c28:	muleq	r1, r4, ip
   11c2c:	muleq	r1, r4, ip
   11c30:	muleq	r1, r4, ip
   11c34:	muleq	r1, r4, ip
   11c38:	muleq	r1, r4, ip
   11c3c:	muleq	r1, r4, ip
   11c40:	andeq	r1, r1, r8, asr #25
   11c44:	movw	r0, #8359	; 0x20a7
   11c48:	movt	r0, #1
   11c4c:	b	11ac4 <main@@Base+0x838>
   11c50:	movw	r0, #8362	; 0x20aa
   11c54:	movt	r0, #1
   11c58:	b	11ac4 <main@@Base+0x838>
   11c5c:	movw	r0, #8374	; 0x20b6
   11c60:	movt	r0, #1
   11c64:	b	11ac4 <main@@Base+0x838>
   11c68:	movw	r0, #8368	; 0x20b0
   11c6c:	movt	r0, #1
   11c70:	b	11ac4 <main@@Base+0x838>
   11c74:	movw	r0, #8377	; 0x20b9
   11c78:	movt	r0, #1
   11c7c:	b	11ac4 <main@@Base+0x838>
   11c80:	movw	r0, #8365	; 0x20ad
   11c84:	movt	r0, #1
   11c88:	b	11ac4 <main@@Base+0x838>
   11c8c:	mov	r0, sl
   11c90:	b	11ac4 <main@@Base+0x838>
   11c94:	bl	10ee4 <__ctype_b_loc@plt>
   11c98:	ldr	r0, [r0]
   11c9c:	add	r0, r0, r9, lsl #1
   11ca0:	ldrb	r0, [r0, #1]
   11ca4:	tst	r0, #64	; 0x40
   11ca8:	bne	11cd0 <main@@Base+0xa44>
   11cac:	movw	r0, #8386	; 0x20c2
   11cb0:	movt	r0, #1
   11cb4:	mov	r1, r9
   11cb8:	bl	10e3c <printf@plt>
   11cbc:	b	11ac8 <main@@Base+0x83c>
   11cc0:	mov	r0, r7
   11cc4:	b	11ac4 <main@@Base+0x838>
   11cc8:	mov	r0, r8
   11ccc:	b	11ac4 <main@@Base+0x838>
   11cd0:	mov	r0, r9
   11cd4:	bl	10f38 <putchar@plt>
   11cd8:	b	11ac8 <main@@Base+0x83c>
   11cdc:	sub	sp, fp, #28
   11ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011ce4 <__libc_csu_init@@Base>:
   11ce4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11ce8:	mov	r7, r0
   11cec:	ldr	r6, [pc, #72]	; 11d3c <__libc_csu_init@@Base+0x58>
   11cf0:	ldr	r5, [pc, #72]	; 11d40 <__libc_csu_init@@Base+0x5c>
   11cf4:	add	r6, pc, r6
   11cf8:	add	r5, pc, r5
   11cfc:	sub	r6, r6, r5
   11d00:	mov	r8, r1
   11d04:	mov	r9, r2
   11d08:	bl	10df8 <coda_match_filefilter@plt-0x20>
   11d0c:	asrs	r6, r6, #2
   11d10:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d14:	mov	r4, #0
   11d18:	add	r4, r4, #1
   11d1c:	ldr	r3, [r5], #4
   11d20:	mov	r2, r9
   11d24:	mov	r1, r8
   11d28:	mov	r0, r7
   11d2c:	blx	r3
   11d30:	cmp	r6, r4
   11d34:	bne	11d18 <__libc_csu_init@@Base+0x34>
   11d38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d3c:	strdeq	r1, [r1], -r8
   11d40:	strdeq	r1, [r1], -r0

00011d44 <__libc_csu_fini@@Base>:
   11d44:	bx	lr

Disassembly of section .fini:

00011d48 <.fini>:
   11d48:	push	{r3, lr}
   11d4c:	pop	{r3, pc}
