
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f40 <.init>:
   11f40:	push	{r3, lr}
   11f44:	bl	125f4 <_start@@Base+0x3c>
   11f48:	pop	{r3, pc}

Disassembly of section .plt:

00011f4c <strcmp@plt-0x14>:
   11f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   11f50:	ldr	lr, [pc, #4]	; 11f5c <strcmp@plt-0x4>
   11f54:	add	lr, pc, lr
   11f58:	ldr	pc, [lr, #8]!
   11f5c:	andeq	r8, r1, r4, lsr #1

00011f60 <strcmp@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #24, 20	; 0x18000
   11f68:	ldr	pc, [ip, #164]!	; 0xa4

00011f6c <printf@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #24, 20	; 0x18000
   11f74:	ldr	pc, [ip, #156]!	; 0x9c

00011f78 <fopen@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #24, 20	; 0x18000
   11f80:	ldr	pc, [ip, #148]!	; 0x94

00011f84 <free@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #24, 20	; 0x18000
   11f8c:	ldr	pc, [ip, #140]!	; 0x8c

00011f90 <memcpy@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #24, 20	; 0x18000
   11f98:	ldr	pc, [ip, #132]!	; 0x84

00011f9c <memcmp@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #24, 20	; 0x18000
   11fa4:	ldr	pc, [ip, #124]!	; 0x7c

00011fa8 <realloc@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #24, 20	; 0x18000
   11fb0:	ldr	pc, [ip, #116]!	; 0x74

00011fb4 <fwrite@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #24, 20	; 0x18000
   11fbc:	ldr	pc, [ip, #108]!	; 0x6c

00011fc0 <gettimeofday@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #24, 20	; 0x18000
   11fc8:	ldr	pc, [ip, #100]!	; 0x64

00011fcc <puts@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #24, 20	; 0x18000
   11fd4:	ldr	pc, [ip, #92]!	; 0x5c

00011fd8 <malloc@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #24, 20	; 0x18000
   11fe0:	ldr	pc, [ip, #84]!	; 0x54

00011fe4 <__libc_start_main@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #24, 20	; 0x18000
   11fec:	ldr	pc, [ip, #76]!	; 0x4c

00011ff0 <__gmon_start__@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #24, 20	; 0x18000
   11ff8:	ldr	pc, [ip, #68]!	; 0x44

00011ffc <strlen@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #24, 20	; 0x18000
   12004:	ldr	pc, [ip, #60]!	; 0x3c

00012008 <posix_memalign@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #24, 20	; 0x18000
   12010:	ldr	pc, [ip, #52]!	; 0x34

00012014 <memset@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #24, 20	; 0x18000
   1201c:	ldr	pc, [ip, #44]!	; 0x2c

00012020 <memchr@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #24, 20	; 0x18000
   12028:	ldr	pc, [ip, #36]!	; 0x24

0001202c <fclose@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #24, 20	; 0x18000
   12034:	ldr	pc, [ip, #28]!

00012038 <abort@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #24, 20	; 0x18000
   12040:	ldr	pc, [ip, #20]!

00012044 <__assert_fail@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #24, 20	; 0x18000
   1204c:	ldr	pc, [ip, #12]!

Disassembly of section .text:

00012050 <main@@Base>:
   12050:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12054:	strd	r6, [sp, #8]
   12058:	strd	r8, [sp, #16]
   1205c:	strd	sl, [sp, #24]
   12060:	str	lr, [sp, #32]
   12064:	vpush	{d8-d10}
   12068:	sub	sp, sp, #268	; 0x10c
   1206c:	add	r0, sp, #32
   12070:	bl	12fa8 <flatcc_builder_init@@Base>
   12074:	add	r0, sp, #32
   12078:	bl	12718 <_start@@Base+0x160>
   1207c:	add	r1, sp, #28
   12080:	add	r0, sp, #32
   12084:	bl	18300 <flatcc_builder_finalize_buffer@@Base>
   12088:	mov	r8, r0
   1208c:	movw	r1, #36172	; 0x8d4c
   12090:	movt	r1, #1
   12094:	movw	r0, #36176	; 0x8d50
   12098:	movt	r0, #1
   1209c:	bl	11f78 <fopen@plt>
   120a0:	subs	r4, r0, #0
   120a4:	beq	12188 <main@@Base+0x138>
   120a8:	mov	r3, r4
   120ac:	mov	r1, #1
   120b0:	ldr	r2, [sp, #28]
   120b4:	mov	r0, r8
   120b8:	bl	11fb4 <fwrite@plt>
   120bc:	ldr	r5, [sp, #28]
   120c0:	mov	r6, r0
   120c4:	mov	r0, r4
   120c8:	bl	1202c <fclose@plt>
   120cc:	cmp	r6, r5
   120d0:	beq	120ec <main@@Base+0x9c>
   120d4:	add	r0, sp, #32
   120d8:	mov	r5, #1
   120dc:	bl	13170 <flatcc_builder_clear@@Base>
   120e0:	mov	r0, r8
   120e4:	bl	11f84 <free@plt>
   120e8:	b	1219c <main@@Base+0x14c>
   120ec:	movw	r0, #36200	; 0x8d68
   120f0:	movt	r0, #1
   120f4:	ldr	r1, [sp, #28]
   120f8:	bl	11f6c <printf@plt>
   120fc:	movw	r0, #36220	; 0x8d7c
   12100:	movt	r0, #1
   12104:	bl	11fcc <puts@plt>
   12108:	bl	126a8 <_start@@Base+0xf0>
   1210c:	movw	r3, #20301	; 0x4f4d
   12110:	movt	r3, #21326	; 0x534e
   12114:	vmov.f64	d8, d0
   12118:	movw	r6, #35820	; 0x8bec
   1211c:	movt	r6, #1
   12120:	str	r3, [sp, #12]
   12124:	movw	r3, #35804	; 0x8bdc
   12128:	movt	r3, #1
   1212c:	str	r3, [sp, #16]
   12130:	movw	r3, #34464	; 0x86a0
   12134:	movt	r3, #1
   12138:	str	r3, [sp, #20]
   1213c:	mov	r3, #10
   12140:	str	r3, [sp, #4]
   12144:	add	r0, sp, #32
   12148:	bl	12718 <_start@@Base+0x160>
   1214c:	mov	r1, r8
   12150:	add	r0, sp, #32
   12154:	ldr	r2, [sp, #28]
   12158:	bl	182c4 <flatcc_builder_copy_buffer@@Base>
   1215c:	ldr	r3, [r8, #4]
   12160:	ldr	r2, [sp, #12]
   12164:	cmp	r3, r2
   12168:	beq	121cc <main@@Base+0x17c>
   1216c:	movw	r1, #36240	; 0x8d90
   12170:	movt	r1, #1
   12174:	ldr	r3, [pc, #1068]	; 125a8 <main@@Base+0x558>
   12178:	movw	r0, #36336	; 0x8df0
   1217c:	movt	r0, #1
   12180:	movw	r2, #699	; 0x2bb
   12184:	bl	12044 <__assert_fail@plt>
   12188:	add	r0, sp, #32
   1218c:	mvn	r5, #0
   12190:	bl	13170 <flatcc_builder_clear@@Base>
   12194:	mov	r0, r8
   12198:	bl	11f84 <free@plt>
   1219c:	movw	r0, #36748	; 0x8f8c
   121a0:	movt	r0, #1
   121a4:	bl	11fcc <puts@plt>
   121a8:	mov	r0, r5
   121ac:	add	sp, sp, #268	; 0x10c
   121b0:	vpop	{d8-d10}
   121b4:	ldrd	r4, [sp]
   121b8:	ldrd	r6, [sp, #8]
   121bc:	ldrd	r8, [sp, #16]
   121c0:	ldrd	sl, [sp, #24]
   121c4:	add	sp, sp, #32
   121c8:	pop	{pc}		; (ldr pc, [sp], #4)
   121cc:	ldr	r3, [r8]
   121d0:	adds	r4, r8, r3
   121d4:	beq	1216c <main@@Base+0x11c>
   121d8:	ldr	r5, [r8, r3]
   121dc:	sub	r5, r4, r5
   121e0:	ldrh	r7, [r5]
   121e4:	cmp	r7, #11
   121e8:	bls	12568 <main@@Base+0x518>
   121ec:	ldrh	r3, [r5, #10]
   121f0:	cmp	r3, #0
   121f4:	beq	12568 <main@@Base+0x518>
   121f8:	ldr	r0, [r4, r3]
   121fc:	add	r3, r4, r3
   12200:	ldr	r1, [sp, #16]
   12204:	add	r0, r0, #4
   12208:	add	r0, r3, r0
   1220c:	bl	11f60 <strcmp@plt>
   12210:	cmp	r0, #0
   12214:	bne	1254c <main@@Base+0x4fc>
   12218:	cmp	r7, #27
   1221c:	bls	12490 <main@@Base+0x440>
   12220:	ldrh	r9, [r5, #26]
   12224:	cmp	r9, #0
   12228:	beq	12490 <main@@Base+0x440>
   1222c:	ldr	r3, [r4, r9]
   12230:	add	r9, r4, r9
   12234:	add	r3, r3, #4
   12238:	adds	r9, r9, r3
   1223c:	beq	12490 <main@@Base+0x440>
   12240:	ldr	r3, [r9, #-4]
   12244:	cmp	r3, #1000	; 0x3e8
   12248:	bne	12490 <main@@Base+0x440>
   1224c:	ldr	r7, [pc, #856]	; 125ac <main@@Base+0x55c>
   12250:	add	r3, r9, #4000	; 0xfa0
   12254:	str	r3, [sp, #8]
   12258:	mov	r2, r9
   1225c:	add	r9, r9, #4
   12260:	ldr	r1, [r2]
   12264:	adds	r3, r2, r1
   12268:	beq	1216c <main@@Base+0x11c>
   1226c:	ldr	r1, [r2, r1]
   12270:	sub	r1, r3, r1
   12274:	ldrh	r0, [r1]
   12278:	cmp	r0, #11
   1227c:	bls	12568 <main@@Base+0x518>
   12280:	ldrh	r2, [r1, #10]
   12284:	cmp	r2, #0
   12288:	beq	12568 <main@@Base+0x518>
   1228c:	ldr	sl, [r3, r2]
   12290:	cmp	r0, #15
   12294:	add	r2, r3, r2
   12298:	movls	r4, #0
   1229c:	add	sl, sl, #4
   122a0:	add	sl, r2, sl
   122a4:	bls	122c4 <main@@Base+0x274>
   122a8:	ldrh	r4, [r1, #14]
   122ac:	cmp	r4, #0
   122b0:	beq	122c4 <main@@Base+0x274>
   122b4:	ldr	r2, [r3, r4]
   122b8:	add	r4, r3, r4
   122bc:	add	r3, r2, #4
   122c0:	add	r4, r4, r3
   122c4:	cmp	sl, #0
   122c8:	beq	12458 <main@@Base+0x408>
   122cc:	ldr	r3, [sl, #-4]
   122d0:	cmp	r3, #700	; 0x2bc
   122d4:	bne	12458 <main@@Base+0x408>
   122d8:	cmp	r4, #0
   122dc:	beq	12474 <main@@Base+0x424>
   122e0:	ldr	r3, [r4, #-4]
   122e4:	ldr	r2, [sp, #20]
   122e8:	cmp	r3, r2
   122ec:	bne	12474 <main@@Base+0x424>
   122f0:	mov	r5, sl
   122f4:	mov	fp, #0
   122f8:	mov	r2, #7
   122fc:	mov	r1, r6
   12300:	mov	r0, r5
   12304:	bl	11f9c <memcmp@plt>
   12308:	cmp	r0, #0
   1230c:	bne	1250c <main@@Base+0x4bc>
   12310:	add	fp, fp, #1
   12314:	add	r5, r5, #7
   12318:	cmp	fp, #100	; 0x64
   1231c:	bne	122f8 <main@@Base+0x2a8>
   12320:	add	r5, r4, #99328	; 0x18400
   12324:	add	r5, r5, #672	; 0x2a0
   12328:	mov	r2, #1000	; 0x3e8
   1232c:	mov	r1, r7
   12330:	mov	r0, r4
   12334:	bl	11f9c <memcmp@plt>
   12338:	cmp	r0, #0
   1233c:	bne	124f0 <main@@Base+0x4a0>
   12340:	add	r4, r4, #1000	; 0x3e8
   12344:	cmp	r4, r5
   12348:	bne	12328 <main@@Base+0x2d8>
   1234c:	ldr	r3, [sp, #8]
   12350:	cmp	r3, r9
   12354:	bne	12258 <main@@Base+0x208>
   12358:	ldr	r3, [sp, #4]
   1235c:	subs	r3, r3, #1
   12360:	str	r3, [sp, #4]
   12364:	bne	12144 <main@@Base+0xf4>
   12368:	mov	r5, r0
   1236c:	vldr	d9, [pc, #532]	; 12588 <main@@Base+0x538>
   12370:	bl	126a8 <_start@@Base+0xf0>
   12374:	vsub.f64	d8, d0, d8
   12378:	ldr	r4, [sp, #28]
   1237c:	movw	r1, #36472	; 0x8e78
   12380:	movt	r1, #1
   12384:	movw	r0, #36516	; 0x8ea4
   12388:	movt	r0, #1
   1238c:	vldr	d10, [pc, #508]	; 12590 <main@@Base+0x540>
   12390:	bl	11f6c <printf@plt>
   12394:	movw	r0, #36532	; 0x8eb4
   12398:	movt	r0, #1
   1239c:	vmov	r2, r3, d8
   123a0:	bl	11f6c <printf@plt>
   123a4:	mov	r1, #10
   123a8:	movw	r0, #36556	; 0x8ecc
   123ac:	movt	r0, #1
   123b0:	bl	11f6c <printf@plt>
   123b4:	mov	r1, r4
   123b8:	movw	r0, #36572	; 0x8edc
   123bc:	movt	r0, #1
   123c0:	bl	11f6c <printf@plt>
   123c4:	vmov	s15, r4
   123c8:	movw	r0, #36592	; 0x8ef0
   123cc:	movt	r0, #1
   123d0:	vcvt.f64.u32	d7, s15
   123d4:	vmul.f64	d7, d7, d9
   123d8:	vdiv.f64	d6, d7, d10
   123dc:	vdiv.f64	d7, d6, d8
   123e0:	vmov	r2, r3, d7
   123e4:	bl	11f6c <printf@plt>
   123e8:	vdiv.f64	d7, d9, d8
   123ec:	movw	r0, #36616	; 0x8f08
   123f0:	movt	r0, #1
   123f4:	vmov	r2, r3, d7
   123f8:	bl	11f6c <printf@plt>
   123fc:	vldr	d6, [pc, #404]	; 12598 <main@@Base+0x548>
   12400:	vldr	d5, [pc, #408]	; 125a0 <main@@Base+0x550>
   12404:	vmul.f64	d8, d8, d6
   12408:	vdiv.f64	d7, d8, d9
   1240c:	vcmpe.f64	d7, d5
   12410:	vmrs	APSR_nzcv, fpscr
   12414:	bmi	124dc <main@@Base+0x48c>
   12418:	vcmpe.f64	d7, d10
   1241c:	vmrs	APSR_nzcv, fpscr
   12420:	bmi	124c4 <main@@Base+0x474>
   12424:	vcmpe.f64	d7, d6
   12428:	vmrs	APSR_nzcv, fpscr
   1242c:	bpl	124ac <main@@Base+0x45c>
   12430:	vdiv.f64	d7, d7, d10
   12434:	movw	r0, #36700	; 0x8f5c
   12438:	movt	r0, #1
   1243c:	vmov	r2, r3, d7
   12440:	bl	11f6c <printf@plt>
   12444:	add	r0, sp, #32
   12448:	bl	13170 <flatcc_builder_clear@@Base>
   1244c:	mov	r0, r8
   12450:	bl	11f84 <free@plt>
   12454:	b	121a8 <main@@Base+0x158>
   12458:	movw	r1, #36088	; 0x8cf8
   1245c:	movt	r1, #1
   12460:	ldr	r3, [pc, #328]	; 125b0 <main@@Base+0x560>
   12464:	movw	r0, #38832	; 0x97b0
   12468:	movt	r0, #1
   1246c:	mov	r2, #74	; 0x4a
   12470:	bl	12044 <__assert_fail@plt>
   12474:	movw	r1, #36088	; 0x8cf8
   12478:	movt	r1, #1
   1247c:	ldr	r3, [pc, #300]	; 125b0 <main@@Base+0x560>
   12480:	movw	r0, #38832	; 0x97b0
   12484:	movt	r0, #1
   12488:	mov	r2, #78	; 0x4e
   1248c:	bl	12044 <__assert_fail@plt>
   12490:	movw	r1, #36088	; 0x8cf8
   12494:	movt	r1, #1
   12498:	ldr	r3, [pc, #276]	; 125b4 <main@@Base+0x564>
   1249c:	movw	r0, #36412	; 0x8e3c
   124a0:	movt	r0, #1
   124a4:	mov	r2, #143	; 0x8f
   124a8:	bl	12044 <__assert_fail@plt>
   124ac:	vdiv.f64	d7, d7, d6
   124b0:	movw	r0, #36724	; 0x8f74
   124b4:	movt	r0, #1
   124b8:	vmov	r2, r3, d7
   124bc:	bl	11f6c <printf@plt>
   124c0:	b	12444 <main@@Base+0x3f4>
   124c4:	vdiv.f64	d7, d7, d5
   124c8:	movw	r0, #36676	; 0x8f44
   124cc:	movt	r0, #1
   124d0:	vmov	r2, r3, d7
   124d4:	bl	11f6c <printf@plt>
   124d8:	b	12444 <main@@Base+0x3f4>
   124dc:	movw	r0, #36652	; 0x8f2c
   124e0:	movt	r0, #1
   124e4:	vmov	r2, r3, d7
   124e8:	bl	11f6c <printf@plt>
   124ec:	b	12444 <main@@Base+0x3f4>
   124f0:	movw	r1, #36088	; 0x8cf8
   124f4:	movt	r1, #1
   124f8:	ldr	r3, [pc, #176]	; 125b0 <main@@Base+0x560>
   124fc:	movw	r0, #38832	; 0x97b0
   12500:	movt	r0, #1
   12504:	mov	r2, #91	; 0x5b
   12508:	bl	12044 <__assert_fail@plt>
   1250c:	mov	r2, sl
   12510:	mov	r1, fp
   12514:	movw	r0, #36424	; 0x8e48
   12518:	movt	r0, #1
   1251c:	bl	11f6c <printf@plt>
   12520:	sub	r1, r5, r8
   12524:	movw	r0, #36456	; 0x8e68
   12528:	movt	r0, #1
   1252c:	bl	11f6c <printf@plt>
   12530:	movw	r1, #36088	; 0x8cf8
   12534:	movt	r1, #1
   12538:	ldr	r3, [pc, #112]	; 125b0 <main@@Base+0x560>
   1253c:	movw	r0, #38832	; 0x97b0
   12540:	movt	r0, #1
   12544:	mov	r2, #85	; 0x55
   12548:	bl	12044 <__assert_fail@plt>
   1254c:	movw	r1, #36088	; 0x8cf8
   12550:	movt	r1, #1
   12554:	ldr	r3, [pc, #88]	; 125b4 <main@@Base+0x564>
   12558:	movw	r0, #36412	; 0x8e3c
   1255c:	movt	r0, #1
   12560:	mov	r2, #139	; 0x8b
   12564:	bl	12044 <__assert_fail@plt>
   12568:	movw	r1, #36240	; 0x8d90
   1256c:	movt	r1, #1
   12570:	ldr	r3, [pc, #48]	; 125a8 <main@@Base+0x558>
   12574:	movw	r0, #36376	; 0x8e18
   12578:	movt	r0, #1
   1257c:	movw	r2, #699	; 0x2bb
   12580:	bl	12044 <__assert_fail@plt>
   12584:	nop	{0}
   12588:	andeq	r0, r0, r0
   1258c:	eormi	r0, r4, r0
   12590:	andeq	r0, r0, r0
   12594:	smlawbmi	lr, r0, r4, r8
   12598:	andeq	r0, r0, r0
   1259c:	bicmi	ip, sp, r5, ror #26
   125a0:	andeq	r0, r0, r0
   125a4:	addmi	r4, pc, r0
   125a8:	andeq	r8, r1, r0, lsr #23
   125ac:	andeq	sl, r2, r4, ror r0
   125b0:	andeq	r8, r1, r4, asr #23
   125b4:			; <UNDEFINED> instruction: 0x00018bbc

000125b8 <_start@@Base>:
   125b8:	mov	fp, #0
   125bc:	mov	lr, #0
   125c0:	pop	{r1}		; (ldr r1, [sp], #4)
   125c4:	mov	r2, sp
   125c8:	push	{r2}		; (str r2, [sp, #-4]!)
   125cc:	push	{r0}		; (str r0, [sp, #-4]!)
   125d0:	ldr	ip, [pc, #16]	; 125e8 <_start@@Base+0x30>
   125d4:	push	{ip}		; (str ip, [sp, #-4]!)
   125d8:	ldr	r0, [pc, #12]	; 125ec <_start@@Base+0x34>
   125dc:	ldr	r3, [pc, #12]	; 125f0 <_start@@Base+0x38>
   125e0:	bl	11fe4 <__libc_start_main@plt>
   125e4:	bl	12038 <abort@plt>
   125e8:	andeq	r8, r1, ip, asr #22
   125ec:	andeq	r2, r1, r0, asr r0
   125f0:	andeq	r8, r1, ip, ror #21
   125f4:	ldr	r3, [pc, #20]	; 12610 <_start@@Base+0x58>
   125f8:	ldr	r2, [pc, #20]	; 12614 <_start@@Base+0x5c>
   125fc:	add	r3, pc, r3
   12600:	ldr	r2, [r3, r2]
   12604:	cmp	r2, #0
   12608:	bxeq	lr
   1260c:	b	11ff0 <__gmon_start__@plt>
   12610:	strdeq	r7, [r1], -ip
   12614:	andeq	r0, r0, ip, asr r0
   12618:	ldr	r0, [pc, #24]	; 12638 <_start@@Base+0x80>
   1261c:	ldr	r3, [pc, #24]	; 1263c <_start@@Base+0x84>
   12620:	cmp	r3, r0
   12624:	bxeq	lr
   12628:	ldr	r3, [pc, #16]	; 12640 <_start@@Base+0x88>
   1262c:	cmp	r3, #0
   12630:	bxeq	lr
   12634:	bx	r3
   12638:	andeq	sl, r2, r8, rrx
   1263c:	andeq	sl, r2, r8, rrx
   12640:	andeq	r0, r0, r0
   12644:	ldr	r0, [pc, #36]	; 12670 <_start@@Base+0xb8>
   12648:	ldr	r1, [pc, #36]	; 12674 <_start@@Base+0xbc>
   1264c:	sub	r1, r1, r0
   12650:	asr	r1, r1, #2
   12654:	add	r1, r1, r1, lsr #31
   12658:	asrs	r1, r1, #1
   1265c:	bxeq	lr
   12660:	ldr	r3, [pc, #16]	; 12678 <_start@@Base+0xc0>
   12664:	cmp	r3, #0
   12668:	bxeq	lr
   1266c:	bx	r3
   12670:	andeq	sl, r2, r8, rrx
   12674:	andeq	sl, r2, r8, rrx
   12678:	andeq	r0, r0, r0
   1267c:	push	{r4, lr}
   12680:	ldr	r4, [pc, #24]	; 126a0 <_start@@Base+0xe8>
   12684:	ldrb	r3, [r4]
   12688:	cmp	r3, #0
   1268c:	popne	{r4, pc}
   12690:	bl	12618 <_start@@Base+0x60>
   12694:	mov	r3, #1
   12698:	strb	r3, [r4]
   1269c:	pop	{r4, pc}
   126a0:	andeq	sl, r2, r8, rrx
   126a4:	b	12644 <_start@@Base+0x8c>
   126a8:	push	{lr}		; (str lr, [sp, #-4]!)
   126ac:	sub	sp, sp, #12
   126b0:	mov	r1, #0
   126b4:	mov	r0, sp
   126b8:	bl	11fc0 <gettimeofday@plt>
   126bc:	movw	r3, #41068	; 0xa06c
   126c0:	movt	r3, #2
   126c4:	vldr	d5, [pc, #68]	; 12710 <_start@@Base+0x158>
   126c8:	ldr	r2, [r3]
   126cc:	cmp	r2, #0
   126d0:	ldr	r2, [sp]
   126d4:	ldrdeq	r0, [sp]
   126d8:	strdeq	r0, [r3]
   126dc:	ldr	r1, [sp, #4]
   126e0:	ldr	r0, [r3, #4]
   126e4:	ldr	r3, [r3]
   126e8:	sub	r1, r1, r0
   126ec:	vmov	s15, r1
   126f0:	sub	r3, r2, r3
   126f4:	vmov	s0, r3
   126f8:	vcvt.f64.s32	d7, s15
   126fc:	vcvt.f64.s32	d0, s0
   12700:	vdiv.f64	d6, d7, d5
   12704:	vadd.f64	d0, d6, d0
   12708:	add	sp, sp, #12
   1270c:	pop	{pc}		; (ldr pc, [sp], #4)
   12710:	andeq	r0, r0, r0
   12714:	smlawbmi	lr, r0, r4, r8
   12718:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1271c:	mov	r4, r0
   12720:	strd	r6, [sp, #8]
   12724:	str	r8, [sp, #16]
   12728:	str	lr, [sp, #20]
   1272c:	bl	13164 <flatcc_builder_reset@@Base>
   12730:	mov	r3, #0
   12734:	mov	r0, r4
   12738:	mov	r2, r3
   1273c:	movw	r1, #35796	; 0x8bd4
   12740:	movt	r1, #1
   12744:	bl	13a40 <flatcc_builder_start_buffer@@Base>
   12748:	cmp	r0, #0
   1274c:	bne	1275c <_start@@Base+0x1a4>
   12750:	mov	r1, #36	; 0x24
   12754:	mov	r0, r4
   12758:	bl	1552c <flatcc_builder_start_table@@Base>
   1275c:	movw	r1, #35804	; 0x8bdc
   12760:	movt	r1, #1
   12764:	mov	r0, r4
   12768:	bl	174b4 <flatcc_builder_create_string_str@@Base>
   1276c:	subs	r5, r0, #0
   12770:	beq	12788 <_start@@Base+0x1d0>
   12774:	mov	r1, #3
   12778:	mov	r0, r4
   1277c:	bl	17c70 <flatcc_builder_table_add_offset@@Base>
   12780:	cmp	r0, #0
   12784:	strne	r5, [r0]
   12788:	mov	r0, r4
   1278c:	movw	r6, #35820	; 0x8bec
   12790:	movt	r6, #1
   12794:	ldr	r8, [pc, #424]	; 12944 <_start@@Base+0x38c>
   12798:	mov	r5, #1000	; 0x3e8
   1279c:	bl	14f0c <flatcc_builder_start_offset_vector@@Base>
   127a0:	mov	r1, #36	; 0x24
   127a4:	mov	r0, r4
   127a8:	bl	1552c <flatcc_builder_start_table@@Base>
   127ac:	mov	r0, r4
   127b0:	mov	r7, #100	; 0x64
   127b4:	bl	152bc <flatcc_builder_start_string@@Base>
   127b8:	mov	r2, #7
   127bc:	mov	r1, r6
   127c0:	mov	r0, r4
   127c4:	bl	14878 <flatcc_builder_append_string@@Base>
   127c8:	subs	r7, r7, #1
   127cc:	bne	127b8 <_start@@Base+0x200>
   127d0:	mov	r0, r4
   127d4:	bl	176c8 <flatcc_builder_end_string@@Base>
   127d8:	subs	r7, r0, #0
   127dc:	beq	127f4 <_start@@Base+0x23c>
   127e0:	mov	r1, #3
   127e4:	mov	r0, r4
   127e8:	bl	17c70 <flatcc_builder_table_add_offset@@Base>
   127ec:	cmp	r0, #0
   127f0:	strne	r7, [r0]
   127f4:	mov	r2, #1
   127f8:	mvn	r3, #0
   127fc:	mov	r1, r2
   12800:	mov	r0, r4
   12804:	mov	r7, #100	; 0x64
   12808:	bl	14d94 <flatcc_builder_start_vector@@Base>
   1280c:	mov	r2, #1000	; 0x3e8
   12810:	mov	r1, r8
   12814:	mov	r0, r4
   12818:	bl	1431c <flatcc_builder_append_vector@@Base>
   1281c:	subs	r7, r7, #1
   12820:	bne	1280c <_start@@Base+0x254>
   12824:	mov	r0, r4
   12828:	bl	161c8 <flatcc_builder_end_vector@@Base>
   1282c:	subs	r7, r0, #0
   12830:	beq	12848 <_start@@Base+0x290>
   12834:	mov	r1, #5
   12838:	mov	r0, r4
   1283c:	bl	17c70 <flatcc_builder_table_add_offset@@Base>
   12840:	cmp	r0, #0
   12844:	strne	r7, [r0]
   12848:	movw	r1, #35676	; 0x8b5c
   1284c:	movt	r1, #1
   12850:	mov	r2, #1
   12854:	mov	r0, r4
   12858:	bl	15e10 <flatcc_builder_check_required@@Base>
   1285c:	cmp	r0, #0
   12860:	beq	128f0 <_start@@Base+0x338>
   12864:	mov	r0, r4
   12868:	bl	15eac <flatcc_builder_end_table@@Base>
   1286c:	subs	r1, r0, #0
   12870:	beq	1290c <_start@@Base+0x354>
   12874:	mov	r0, r4
   12878:	bl	14544 <flatcc_builder_offset_vector_push@@Base>
   1287c:	subs	r5, r5, #1
   12880:	bne	127a0 <_start@@Base+0x1e8>
   12884:	mov	r0, r4
   12888:	bl	1658c <flatcc_builder_end_offset_vector@@Base>
   1288c:	subs	r5, r0, #0
   12890:	beq	12928 <_start@@Base+0x370>
   12894:	mov	r1, #11
   12898:	mov	r0, r4
   1289c:	bl	17c70 <flatcc_builder_table_add_offset@@Base>
   128a0:	cmp	r0, #0
   128a4:	movw	r1, #35676	; 0x8b5c
   128a8:	movt	r1, #1
   128ac:	mov	r2, #1
   128b0:	strne	r5, [r0]
   128b4:	mov	r0, r4
   128b8:	bl	15e10 <flatcc_builder_check_required@@Base>
   128bc:	cmp	r0, #0
   128c0:	beq	128f0 <_start@@Base+0x338>
   128c4:	mov	r0, r4
   128c8:	bl	15eac <flatcc_builder_end_table@@Base>
   128cc:	mov	r1, r0
   128d0:	mov	r0, r4
   128d4:	bl	13bec <flatcc_builder_end_buffer@@Base>
   128d8:	ldrd	r4, [sp]
   128dc:	mov	r0, #0
   128e0:	ldrd	r6, [sp, #8]
   128e4:	ldr	r8, [sp, #16]
   128e8:	add	sp, sp, #20
   128ec:	pop	{pc}		; (ldr pc, [sp], #4)
   128f0:	movw	r1, #35828	; 0x8bf4
   128f4:	movt	r1, #1
   128f8:	ldr	r3, [pc, #72]	; 12948 <_start@@Base+0x390>
   128fc:	movw	r0, #35924	; 0x8c54
   12900:	movt	r0, #1
   12904:	mov	r2, #235	; 0xeb
   12908:	bl	12044 <__assert_fail@plt>
   1290c:	movw	r1, #36088	; 0x8cf8
   12910:	movt	r1, #1
   12914:	ldr	r3, [pc, #48]	; 1294c <_start@@Base+0x394>
   12918:	movw	r0, #36164	; 0x8d44
   1291c:	movt	r0, #1
   12920:	mov	r2, #42	; 0x2a
   12924:	bl	12044 <__assert_fail@plt>
   12928:	movw	r1, #36088	; 0x8cf8
   1292c:	movt	r1, #1
   12930:	ldr	r3, [pc, #24]	; 12950 <_start@@Base+0x398>
   12934:	movw	r0, #36168	; 0x8d48
   12938:	movt	r0, #1
   1293c:	mov	r2, #56	; 0x38
   12940:	bl	12044 <__assert_fail@plt>
   12944:	andeq	sl, r2, r4, ror r0
   12948:	andeq	r8, r1, r0, ror #22
   1294c:	andeq	r8, r1, ip, ror fp
   12950:	andeq	r8, r1, ip, lsl #23

00012954 <flatcc_builder_default_alloc@@Base>:
   12954:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12958:	subs	r5, r2, #0
   1295c:	strd	r6, [sp, #8]
   12960:	mov	r6, r1
   12964:	str	r8, [sp, #16]
   12968:	str	lr, [sp, #20]
   1296c:	beq	129a4 <flatcc_builder_default_alloc@@Base+0x50>
   12970:	mov	r7, r3
   12974:	ldr	r3, [sp, #24]
   12978:	sub	r2, r3, #1
   1297c:	cmp	r2, #6
   12980:	ldrls	pc, [pc, r2, lsl #2]
   12984:	b	12a54 <flatcc_builder_default_alloc@@Base+0x100>
   12988:	ldrdeq	r2, [r1], -r4
   1298c:	andeq	r2, r1, r4, asr sl
   12990:	andeq	r2, r1, r4, asr sl
   12994:	andeq	r2, r1, ip, asr #20
   12998:	andeq	r2, r1, ip, lsr sl
   1299c:	andeq	r2, r1, r4, asr sl
   129a0:	andeq	r2, r1, r4, asr #20
   129a4:	ldr	r0, [r1]
   129a8:	cmp	r0, #0
   129ac:	beq	129c0 <flatcc_builder_default_alloc@@Base+0x6c>
   129b0:	bl	11f84 <free@plt>
   129b4:	mov	r0, r5
   129b8:	str	r5, [r6]
   129bc:	str	r5, [r6, #4]
   129c0:	ldrd	r4, [sp]
   129c4:	ldrd	r6, [sp, #8]
   129c8:	ldr	r8, [sp, #16]
   129cc:	add	sp, sp, #20
   129d0:	pop	{pc}		; (ldr pc, [sp], #4)
   129d4:	mov	r4, #256	; 0x100
   129d8:	cmp	r4, r5
   129dc:	bcs	129ec <flatcc_builder_default_alloc@@Base+0x98>
   129e0:	lsl	r4, r4, #1
   129e4:	cmp	r5, r4
   129e8:	bhi	129e0 <flatcc_builder_default_alloc@@Base+0x8c>
   129ec:	ldr	r2, [r6, #4]
   129f0:	cmp	r5, r2
   129f4:	bhi	12a04 <flatcc_builder_default_alloc@@Base+0xb0>
   129f8:	cmp	r4, r2, lsr #1
   129fc:	movls	r0, #0
   12a00:	bls	129c0 <flatcc_builder_default_alloc@@Base+0x6c>
   12a04:	mov	r1, r4
   12a08:	ldr	r0, [r6]
   12a0c:	bl	11fa8 <realloc@plt>
   12a10:	subs	r5, r0, #0
   12a14:	beq	12a70 <flatcc_builder_default_alloc@@Base+0x11c>
   12a18:	cmp	r7, #0
   12a1c:	beq	12a2c <flatcc_builder_default_alloc@@Base+0xd8>
   12a20:	ldr	r0, [r6, #4]
   12a24:	cmp	r0, r4
   12a28:	bcc	12a5c <flatcc_builder_default_alloc@@Base+0x108>
   12a2c:	mov	r0, #0
   12a30:	str	r5, [r6]
   12a34:	str	r4, [r6, #4]
   12a38:	b	129c0 <flatcc_builder_default_alloc@@Base+0x6c>
   12a3c:	mov	r4, r5
   12a40:	b	129ec <flatcc_builder_default_alloc@@Base+0x98>
   12a44:	mov	r4, #64	; 0x40
   12a48:	b	129d8 <flatcc_builder_default_alloc@@Base+0x84>
   12a4c:	mov	r4, #288	; 0x120
   12a50:	b	129d8 <flatcc_builder_default_alloc@@Base+0x84>
   12a54:	mov	r4, #32
   12a58:	b	129d8 <flatcc_builder_default_alloc@@Base+0x84>
   12a5c:	sub	r2, r4, r0
   12a60:	mov	r1, #0
   12a64:	add	r0, r5, r0
   12a68:	bl	12014 <memset@plt>
   12a6c:	b	12a2c <flatcc_builder_default_alloc@@Base+0xd8>
   12a70:	mvn	r0, #0
   12a74:	b	129c0 <flatcc_builder_default_alloc@@Base+0x6c>
   12a78:	movw	r3, #36768	; 0x8fa0
   12a7c:	movt	r3, #1
   12a80:	str	r4, [sp, #-8]!
   12a84:	movw	r1, #38640	; 0x96f0
   12a88:	movt	r1, #1
   12a8c:	str	lr, [sp, #4]
   12a90:	movw	r0, #38832	; 0x97b0
   12a94:	movt	r0, #1
   12a98:	mov	r2, #308	; 0x134
   12a9c:	bl	12044 <__assert_fail@plt>
   12aa0:	movw	r1, #38640	; 0x96f0
   12aa4:	movt	r1, #1
   12aa8:	ldr	r3, [pc, #20]	; 12ac4 <flatcc_builder_default_alloc@@Base+0x170>
   12aac:	movw	r0, #38832	; 0x97b0
   12ab0:	movt	r0, #1
   12ab4:	str	r4, [sp, #-8]!
   12ab8:	movw	r2, #677	; 0x2a5
   12abc:	str	lr, [sp, #4]
   12ac0:	bl	12044 <__assert_fail@plt>
   12ac4:			; <UNDEFINED> instruction: 0x00018fb0
   12ac8:	movw	r1, #38640	; 0x96f0
   12acc:	movt	r1, #1
   12ad0:	ldr	r3, [pc, #20]	; 12aec <flatcc_builder_default_alloc@@Base+0x198>
   12ad4:	movw	r0, #38832	; 0x97b0
   12ad8:	movt	r0, #1
   12adc:	str	r4, [sp, #-8]!
   12ae0:	movw	r2, #702	; 0x2be
   12ae4:	str	lr, [sp, #4]
   12ae8:	bl	12044 <__assert_fail@plt>
   12aec:			; <UNDEFINED> instruction: 0x00018fbc
   12af0:	movw	r1, #38640	; 0x96f0
   12af4:	movt	r1, #1
   12af8:	ldr	r3, [pc, #20]	; 12b14 <flatcc_builder_default_alloc@@Base+0x1c0>
   12afc:	movw	r0, #38832	; 0x97b0
   12b00:	movt	r0, #1
   12b04:	str	r4, [sp, #-8]!
   12b08:	movw	r2, #651	; 0x28b
   12b0c:	str	lr, [sp, #4]
   12b10:	bl	12044 <__assert_fail@plt>
   12b14:	andeq	r8, r1, ip, asr #31
   12b18:	movw	r1, #38640	; 0x96f0
   12b1c:	movt	r1, #1
   12b20:	ldr	r3, [pc, #20]	; 12b3c <flatcc_builder_default_alloc@@Base+0x1e8>
   12b24:	movw	r0, #38712	; 0x9738
   12b28:	movt	r0, #1
   12b2c:	str	r4, [sp, #-8]!
   12b30:	mov	r2, #892	; 0x37c
   12b34:	str	lr, [sp, #4]
   12b38:	bl	12044 <__assert_fail@plt>
   12b3c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12b40:	movw	r1, #38640	; 0x96f0
   12b44:	movt	r1, #1
   12b48:	ldr	r3, [pc, #20]	; 12b64 <flatcc_builder_default_alloc@@Base+0x210>
   12b4c:	movw	r0, #38740	; 0x9754
   12b50:	movt	r0, #1
   12b54:	str	r4, [sp, #-8]!
   12b58:	movw	r2, #542	; 0x21e
   12b5c:	str	lr, [sp, #4]
   12b60:	bl	12044 <__assert_fail@plt>
   12b64:	andeq	r8, r1, ip, ror #31
   12b68:	movw	r1, #38640	; 0x96f0
   12b6c:	movt	r1, #1
   12b70:	ldr	r3, [pc, #20]	; 12b8c <flatcc_builder_default_alloc@@Base+0x238>
   12b74:	movw	r0, #38768	; 0x9770
   12b78:	movt	r0, #1
   12b7c:	str	r4, [sp, #-8]!
   12b80:	movw	r2, #966	; 0x3c6
   12b84:	str	lr, [sp, #4]
   12b88:	bl	12044 <__assert_fail@plt>
   12b8c:	andeq	r9, r1, ip
   12b90:	movw	r1, #38640	; 0x96f0
   12b94:	movt	r1, #1
   12b98:	ldr	r3, [pc, #20]	; 12bb4 <flatcc_builder_default_alloc@@Base+0x260>
   12b9c:	movw	r0, #38812	; 0x979c
   12ba0:	movt	r0, #1
   12ba4:	str	r4, [sp, #-8]!
   12ba8:	movw	r2, #1926	; 0x786
   12bac:	str	lr, [sp, #4]
   12bb0:	bl	12044 <__assert_fail@plt>
   12bb4:	andeq	r9, r1, ip, lsr #32
   12bb8:	ldrd	r2, [r0, #156]	; 0x9c
   12bbc:	strd	r4, [sp, #-20]!	; 0xffffffec
   12bc0:	mov	r5, r1
   12bc4:	mov	r4, r0
   12bc8:	strd	r6, [sp, #8]
   12bcc:	str	lr, [sp, #16]
   12bd0:	sub	sp, sp, #12
   12bd4:	add	r1, r2, #1
   12bd8:	cmp	r1, r3
   12bdc:	str	r1, [r0, #156]	; 0x9c
   12be0:	ble	12cc0 <flatcc_builder_default_alloc@@Base+0x36c>
   12be4:	ldr	r3, [r0, #176]	; 0xb0
   12be8:	cmp	r1, r3
   12bec:	cmpgt	r3, #0
   12bf0:	movgt	r3, #1
   12bf4:	movle	r3, #0
   12bf8:	bgt	12cd0 <flatcc_builder_default_alloc@@Base+0x37c>
   12bfc:	add	r2, r2, r2, lsl #3
   12c00:	ldr	r1, [r0, #88]	; 0x58
   12c04:	lsl	r6, r2, #2
   12c08:	add	r2, r6, #36	; 0x24
   12c0c:	cmp	r2, r1
   12c10:	bls	12c34 <flatcc_builder_default_alloc@@Base+0x2e0>
   12c14:	mov	ip, #4
   12c18:	add	r1, r0, #84	; 0x54
   12c1c:	ldr	r0, [r0, #40]	; 0x28
   12c20:	str	ip, [sp]
   12c24:	ldr	r7, [r4, #48]	; 0x30
   12c28:	blx	r7
   12c2c:	cmp	r0, #0
   12c30:	bne	12cd8 <flatcc_builder_default_alloc@@Base+0x384>
   12c34:	ldr	r2, [r4, #84]	; 0x54
   12c38:	add	r2, r2, r6
   12c3c:	cmp	r2, #0
   12c40:	str	r2, [r4, #32]
   12c44:	beq	12cd0 <flatcc_builder_default_alloc@@Base+0x37c>
   12c48:	ldr	r3, [r4, #88]	; 0x58
   12c4c:	movw	r0, #36409	; 0x8e39
   12c50:	movt	r0, #14563	; 0x38e3
   12c54:	ldr	r1, [r4, #176]	; 0xb0
   12c58:	umull	r0, r3, r0, r3
   12c5c:	lsr	r3, r3, #3
   12c60:	cmp	r3, r1
   12c64:	cmpgt	r1, #0
   12c68:	movgt	r3, r1
   12c6c:	str	r3, [r4, #160]	; 0xa0
   12c70:	ldr	r3, [r4, #20]
   12c74:	mov	r1, #0
   12c78:	mvn	lr, #3
   12c7c:	mov	r0, r1
   12c80:	ldr	ip, [r4, #28]
   12c84:	ldrh	r6, [r4, #130]	; 0x82
   12c88:	str	r3, [r2, #8]
   12c8c:	add	r3, r3, ip
   12c90:	add	r3, r3, #7
   12c94:	bic	r3, r3, #7
   12c98:	strh	r6, [r2, #12]
   12c9c:	strh	r5, [r4, #130]	; 0x82
   12ca0:	stm	r2, {ip, lr}
   12ca4:	str	r1, [r4, #20]
   12ca8:	str	r3, [r4, #28]
   12cac:	add	sp, sp, #12
   12cb0:	ldrd	r4, [sp]
   12cb4:	ldrd	r6, [sp, #8]
   12cb8:	add	sp, sp, #16
   12cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   12cc0:	ldr	r2, [r0, #32]
   12cc4:	add	r2, r2, #36	; 0x24
   12cc8:	str	r2, [r0, #32]
   12ccc:	b	12c70 <flatcc_builder_default_alloc@@Base+0x31c>
   12cd0:	mvn	r0, #0
   12cd4:	b	12cac <flatcc_builder_default_alloc@@Base+0x358>
   12cd8:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>
   12cdc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12ce0:	mov	r4, r0
   12ce4:	ldrh	r0, [r0, #128]	; 0x80
   12ce8:	strd	r6, [sp, #8]
   12cec:	mov	r6, #4
   12cf0:	ldr	r5, [r4, #136]	; 0x88
   12cf4:	str	lr, [sp, #20]
   12cf8:	mov	lr, r2
   12cfc:	str	r8, [sp, #16]
   12d00:	sub	sp, sp, #88	; 0x58
   12d04:	cmp	r0, #3
   12d08:	add	r0, sp, #12
   12d0c:	movls	r2, #4
   12d10:	str	lr, [sp, #12]
   12d14:	str	r6, [sp, #16]
   12d18:	strhls	r2, [r4, #128]	; 0x80
   12d1c:	mov	r2, #1
   12d20:	lsls	ip, lr, #2
   12d24:	moveq	r7, #2
   12d28:	str	r2, [sp, #20]
   12d2c:	str	r0, [sp, #24]
   12d30:	and	r0, r5, #3
   12d34:	str	r6, [sp, #28]
   12d38:	beq	12d5c <flatcc_builder_default_alloc@@Base+0x408>
   12d3c:	mov	r8, #2
   12d40:	add	r6, ip, r6
   12d44:	mov	r2, r8
   12d48:	mov	r7, #3
   12d4c:	str	r6, [sp, #16]
   12d50:	str	r8, [sp, #20]
   12d54:	str	r1, [sp, #32]
   12d58:	str	ip, [sp, #36]	; 0x24
   12d5c:	cmp	r0, #0
   12d60:	beq	12d88 <flatcc_builder_default_alloc@@Base+0x434>
   12d64:	ldr	r8, [pc, #360]	; 12ed4 <flatcc_builder_default_alloc@@Base+0x580>
   12d68:	add	r2, r2, #1
   12d6c:	add	ip, sp, #88	; 0x58
   12d70:	add	ip, ip, r2, lsl #3
   12d74:	add	r6, r6, r0
   12d78:	mov	r2, r7
   12d7c:	strd	r6, [sp, #16]
   12d80:	str	r8, [ip, #-72]	; 0xffffffb8
   12d84:	str	r0, [ip, #-68]	; 0xffffffbc
   12d88:	cmp	lr, #0
   12d8c:	beq	12e1c <flatcc_builder_default_alloc@@Base+0x4c8>
   12d90:	cmp	r3, #0
   12d94:	subne	r5, r1, r5
   12d98:	addne	lr, r3, lr
   12d9c:	addne	r5, r5, r6
   12da0:	bne	12dcc <flatcc_builder_default_alloc@@Base+0x478>
   12da4:	b	12e84 <flatcc_builder_default_alloc@@Base+0x530>
   12da8:	sub	ip, r5, r1
   12dac:	add	r0, ip, r0
   12db0:	str	r0, [r1, #-4]
   12db4:	ldrb	r0, [r3]
   12db8:	cmp	r0, #0
   12dbc:	beq	12e68 <flatcc_builder_default_alloc@@Base+0x514>
   12dc0:	add	r3, r3, #1
   12dc4:	cmp	r3, lr
   12dc8:	beq	12e18 <flatcc_builder_default_alloc@@Base+0x4c4>
   12dcc:	ldr	r0, [r1], #4
   12dd0:	cmp	r0, #0
   12dd4:	bne	12da8 <flatcc_builder_default_alloc@@Base+0x454>
   12dd8:	ldrb	r0, [r3]
   12ddc:	cmp	r0, #0
   12de0:	beq	12dc0 <flatcc_builder_default_alloc@@Base+0x46c>
   12de4:	movw	r1, #38640	; 0x96f0
   12de8:	movt	r1, #1
   12dec:	ldr	r3, [pc, #228]	; 12ed8 <flatcc_builder_default_alloc@@Base+0x584>
   12df0:	movw	r0, #38836	; 0x97b4
   12df4:	movt	r0, #1
   12df8:	movw	r2, #1461	; 0x5b5
   12dfc:	bl	12044 <__assert_fail@plt>
   12e00:	sub	r0, ip, r1
   12e04:	add	r3, r3, #1
   12e08:	add	r0, r0, r5
   12e0c:	cmp	lr, r3
   12e10:	str	r0, [r1, #-4]
   12e14:	bne	12e8c <flatcc_builder_default_alloc@@Base+0x538>
   12e18:	ldr	r5, [r4, #136]	; 0x88
   12e1c:	sub	r7, r5, r6
   12e20:	cmp	r7, r5
   12e24:	bge	12eb8 <flatcc_builder_default_alloc@@Base+0x564>
   12e28:	mov	r3, r7
   12e2c:	add	r1, sp, #24
   12e30:	str	r6, [sp]
   12e34:	ldr	r0, [r4, #36]	; 0x24
   12e38:	ldr	r5, [r4, #44]	; 0x2c
   12e3c:	blx	r5
   12e40:	cmp	r0, #0
   12e44:	bne	12eb4 <flatcc_builder_default_alloc@@Base+0x560>
   12e48:	mov	r0, r7
   12e4c:	str	r7, [r4, #136]	; 0x88
   12e50:	add	sp, sp, #88	; 0x58
   12e54:	ldrd	r4, [sp]
   12e58:	ldrd	r6, [sp, #8]
   12e5c:	ldr	r8, [sp, #16]
   12e60:	add	sp, sp, #20
   12e64:	pop	{pc}		; (ldr pc, [sp], #4)
   12e68:	movw	r1, #38640	; 0x96f0
   12e6c:	movt	r1, #1
   12e70:	ldr	r3, [pc, #96]	; 12ed8 <flatcc_builder_default_alloc@@Base+0x584>
   12e74:	movw	r0, #38820	; 0x97a4
   12e78:	movt	r0, #1
   12e7c:	movw	r2, #1457	; 0x5b1
   12e80:	bl	12044 <__assert_fail@plt>
   12e84:	sub	ip, r1, r5
   12e88:	add	ip, ip, r6
   12e8c:	ldr	r5, [r1], #4
   12e90:	cmp	r5, #0
   12e94:	bne	12e00 <flatcc_builder_default_alloc@@Base+0x4ac>
   12e98:	movw	r1, #38640	; 0x96f0
   12e9c:	movt	r1, #1
   12ea0:	ldr	r3, [pc, #48]	; 12ed8 <flatcc_builder_default_alloc@@Base+0x584>
   12ea4:	movw	r0, #38832	; 0x97b0
   12ea8:	movt	r0, #1
   12eac:	movw	r2, #1463	; 0x5b7
   12eb0:	bl	12044 <__assert_fail@plt>
   12eb4:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   12eb8:	movw	r1, #38640	; 0x96f0
   12ebc:	movt	r1, #1
   12ec0:	ldr	r3, [pc, #20]	; 12edc <flatcc_builder_default_alloc@@Base+0x588>
   12ec4:	movw	r0, #38832	; 0x97b0
   12ec8:	movt	r0, #1
   12ecc:	movw	r2, #647	; 0x287
   12ed0:	bl	12044 <__assert_fail@plt>
   12ed4:	andeq	r9, r1, r8, asr #32
   12ed8:	andeq	r9, r1, r8, asr #4
   12edc:	andeq	r8, r1, ip, asr #31

00012ee0 <flatcc_builder_flush_vtable_cache@@Base>:
   12ee0:	ldr	r3, [r0, #116]	; 0x74
   12ee4:	cmp	r3, #0
   12ee8:	bxeq	lr
   12eec:	str	r4, [sp, #-8]!
   12ef0:	mov	r4, r0
   12ef4:	mov	r1, #0
   12ef8:	ldr	r0, [r0, #92]	; 0x5c
   12efc:	ldr	r2, [r4, #96]	; 0x60
   12f00:	str	lr, [sp, #4]
   12f04:	bl	12014 <memset@plt>
   12f08:	mov	r3, #16
   12f0c:	mov	r2, #0
   12f10:	strd	r2, [r4, #120]	; 0x78
   12f14:	ldr	r4, [sp]
   12f18:	add	sp, sp, #4
   12f1c:	pop	{pc}		; (ldr pc, [sp], #4)

00012f20 <flatcc_builder_custom_init@@Base>:
   12f20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12f24:	mov	r5, r3
   12f28:	mov	r4, r0
   12f2c:	strd	r6, [sp, #8]
   12f30:	mov	r6, r1
   12f34:	mov	r7, r2
   12f38:	mov	r1, #0
   12f3c:	mov	r2, #232	; 0xe8
   12f40:	str	r8, [sp, #16]
   12f44:	str	lr, [sp, #20]
   12f48:	ldr	r8, [sp, #24]
   12f4c:	bl	12014 <memset@plt>
   12f50:	cmp	r6, #0
   12f54:	beq	12f90 <flatcc_builder_custom_init@@Base+0x70>
   12f58:	cmp	r5, #0
   12f5c:	movw	r3, #10580	; 0x2954
   12f60:	movt	r3, #1
   12f64:	str	r7, [r4, #36]	; 0x24
   12f68:	mov	r0, #0
   12f6c:	moveq	r5, r3
   12f70:	str	r8, [r4, #40]	; 0x28
   12f74:	str	r6, [r4, #44]	; 0x2c
   12f78:	str	r5, [r4, #48]	; 0x30
   12f7c:	ldrd	r4, [sp]
   12f80:	ldrd	r6, [sp, #8]
   12f84:	ldr	r8, [sp, #16]
   12f88:	add	sp, sp, #20
   12f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f90:	mov	r3, #1
   12f94:	movw	r6, #34448	; 0x8690
   12f98:	movt	r6, #1
   12f9c:	add	r7, r4, #188	; 0xbc
   12fa0:	str	r3, [r4, #184]	; 0xb8
   12fa4:	b	12f58 <flatcc_builder_custom_init@@Base+0x38>

00012fa8 <flatcc_builder_init@@Base>:
   12fa8:	mov	r2, #232	; 0xe8
   12fac:	mov	r1, #0
   12fb0:	str	r4, [sp, #-8]!
   12fb4:	str	lr, [sp, #4]
   12fb8:	bl	12014 <memset@plt>
   12fbc:	mov	r3, r0
   12fc0:	movw	r2, #10580	; 0x2954
   12fc4:	movt	r2, #1
   12fc8:	mov	r0, #1
   12fcc:	ldr	r4, [sp]
   12fd0:	add	ip, r3, #188	; 0xbc
   12fd4:	movw	r1, #34448	; 0x8690
   12fd8:	movt	r1, #1
   12fdc:	add	sp, sp, #4
   12fe0:	str	ip, [r3, #36]	; 0x24
   12fe4:	str	r1, [r3, #44]	; 0x2c
   12fe8:	str	r2, [r3, #48]	; 0x30
   12fec:	str	r0, [r3, #184]	; 0xb8
   12ff0:	mov	r0, #0
   12ff4:	pop	{pc}		; (ldr pc, [sp], #4)

00012ff8 <flatcc_builder_custom_reset@@Base>:
   12ff8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12ffc:	mov	r5, #0
   13000:	mov	r4, r0
   13004:	strd	r6, [sp, #8]
   13008:	mov	r6, r0
   1300c:	strd	r8, [sp, #16]
   13010:	mov	r8, r1
   13014:	mov	r9, r2
   13018:	str	lr, [sp, #24]
   1301c:	sub	sp, sp, #12
   13020:	b	13070 <flatcc_builder_custom_reset@@Base+0x78>
   13024:	cmp	r5, #5
   13028:	cmpne	r9, #0
   1302c:	beq	13054 <flatcc_builder_custom_reset@@Base+0x5c>
   13030:	mov	r3, #1
   13034:	str	r5, [sp]
   13038:	mov	r2, r3
   1303c:	ldr	r0, [r6, #40]	; 0x28
   13040:	ldr	r7, [r6, #48]	; 0x30
   13044:	blx	r7
   13048:	cmp	r0, #0
   1304c:	bne	13158 <flatcc_builder_custom_reset@@Base+0x160>
   13050:	ldr	r0, [r4, #52]	; 0x34
   13054:	mov	r1, #0
   13058:	ldr	r2, [r4, #56]	; 0x38
   1305c:	bl	12014 <memset@plt>
   13060:	add	r5, r5, #1
   13064:	add	r4, r4, #8
   13068:	cmp	r5, #8
   1306c:	beq	130a8 <flatcc_builder_custom_reset@@Base+0xb0>
   13070:	ldr	r0, [r4, #52]	; 0x34
   13074:	add	r1, r4, #52	; 0x34
   13078:	cmp	r0, #0
   1307c:	bne	13024 <flatcc_builder_custom_reset@@Base+0x2c>
   13080:	ldr	r3, [r4, #56]	; 0x38
   13084:	cmp	r3, #0
   13088:	beq	13060 <flatcc_builder_custom_reset@@Base+0x68>
   1308c:	movw	r1, #38640	; 0x96f0
   13090:	movt	r1, #1
   13094:	ldr	r3, [pc, #196]	; 13160 <flatcc_builder_custom_reset@@Base+0x168>
   13098:	movw	r0, #38852	; 0x97c4
   1309c:	movt	r0, #1
   130a0:	movw	r2, #434	; 0x1b2
   130a4:	bl	12044 <__assert_fail@plt>
   130a8:	mov	r2, #0
   130ac:	ldr	r0, [r6, #52]	; 0x34
   130b0:	ldr	r3, [r6, #124]	; 0x7c
   130b4:	ldr	r1, [r6, #60]	; 0x3c
   130b8:	str	r0, [r6, #4]
   130bc:	str	r2, [r6, #120]	; 0x78
   130c0:	cmp	r3, r2
   130c4:	ldr	r2, [r6, #76]	; 0x4c
   130c8:	movne	r3, #16
   130cc:	strne	r3, [r6, #124]	; 0x7c
   130d0:	mov	r3, #0
   130d4:	cmp	r8, r3
   130d8:	str	r2, [r6]
   130dc:	str	r1, [r6, #16]
   130e0:	str	r3, [r6, #20]
   130e4:	str	r3, [r6, #24]
   130e8:	str	r3, [r6, #32]
   130ec:	strh	r3, [r6, #128]	; 0x80
   130f0:	str	r3, [r6, #136]	; 0x88
   130f4:	str	r3, [r6, #140]	; 0x8c
   130f8:	str	r3, [r6, #148]	; 0x94
   130fc:	str	r3, [r6, #152]	; 0x98
   13100:	str	r3, [r6, #156]	; 0x9c
   13104:	str	r3, [r6, #160]	; 0xa0
   13108:	bne	13130 <flatcc_builder_custom_reset@@Base+0x138>
   1310c:	ldr	r0, [r6, #184]	; 0xb8
   13110:	cmp	r0, #0
   13114:	bne	13148 <flatcc_builder_custom_reset@@Base+0x150>
   13118:	add	sp, sp, #12
   1311c:	ldrd	r4, [sp]
   13120:	ldrd	r6, [sp, #8]
   13124:	ldrd	r8, [sp, #16]
   13128:	add	sp, sp, #24
   1312c:	pop	{pc}		; (ldr pc, [sp], #4)
   13130:	ldr	r0, [r6, #184]	; 0xb8
   13134:	str	r3, [r6, #172]	; 0xac
   13138:	str	r3, [r6, #176]	; 0xb0
   1313c:	str	r3, [r6, #180]	; 0xb4
   13140:	cmp	r0, #0
   13144:	beq	13118 <flatcc_builder_custom_reset@@Base+0x120>
   13148:	add	r0, r6, #188	; 0xbc
   1314c:	bl	1853c <flatcc_emitter_reset@@Base>
   13150:	mov	r0, #0
   13154:	b	13118 <flatcc_builder_custom_reset@@Base+0x120>
   13158:	mvn	r0, #0
   1315c:	b	13118 <flatcc_builder_custom_reset@@Base+0x120>
   13160:	andeq	r9, r1, r8, ror #4

00013164 <flatcc_builder_reset@@Base>:
   13164:	mov	r2, #0
   13168:	mov	r1, r2
   1316c:	b	12ff8 <flatcc_builder_custom_reset@@Base>

00013170 <flatcc_builder_clear@@Base>:
   13170:	strd	r4, [sp, #-20]!	; 0xffffffec
   13174:	mov	r4, #0
   13178:	add	r5, r0, #52	; 0x34
   1317c:	strd	r6, [sp, #8]
   13180:	mov	r6, r0
   13184:	str	lr, [sp, #16]
   13188:	sub	sp, sp, #12
   1318c:	mov	r3, #0
   13190:	mov	r1, r5
   13194:	str	r4, [sp]
   13198:	mov	r2, r3
   1319c:	add	r4, r4, #1
   131a0:	ldr	r0, [r6, #40]	; 0x28
   131a4:	add	r5, r5, #8
   131a8:	ldr	r7, [r6, #48]	; 0x30
   131ac:	blx	r7
   131b0:	cmp	r4, #8
   131b4:	bne	1318c <flatcc_builder_clear@@Base+0x1c>
   131b8:	ldr	r3, [r6, #184]	; 0xb8
   131bc:	cmp	r3, #0
   131c0:	bne	131e8 <flatcc_builder_clear@@Base+0x78>
   131c4:	mov	r0, r6
   131c8:	mov	r2, #232	; 0xe8
   131cc:	mov	r1, #0
   131d0:	add	sp, sp, #12
   131d4:	ldrd	r4, [sp]
   131d8:	ldrd	r6, [sp, #8]
   131dc:	ldr	lr, [sp, #16]
   131e0:	add	sp, sp, #20
   131e4:	b	12014 <memset@plt>
   131e8:	add	r0, r6, #188	; 0xbc
   131ec:	bl	18610 <flatcc_emitter_clear@@Base>
   131f0:	b	131c4 <flatcc_builder_clear@@Base+0x54>

000131f4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   131f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   131f8:	add	r4, r1, #3
   131fc:	mov	r5, r0
   13200:	ldr	r3, [r0, #112]	; 0x70
   13204:	bic	r4, r4, #3
   13208:	strd	r6, [sp, #8]
   1320c:	add	r4, r4, #4
   13210:	ldr	r6, [r0, #228]	; 0xe4
   13214:	str	lr, [sp, #16]
   13218:	sub	sp, sp, #12
   1321c:	add	r2, r6, r4
   13220:	cmp	r2, r3
   13224:	bls	1324c <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   13228:	mov	ip, #7
   1322c:	add	r1, r0, #108	; 0x6c
   13230:	ldr	r0, [r0, #40]	; 0x28
   13234:	mov	r3, #0
   13238:	str	ip, [sp]
   1323c:	ldr	r7, [r5, #48]	; 0x30
   13240:	blx	r7
   13244:	cmp	r0, #0
   13248:	bne	132a0 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   1324c:	ldr	r7, [r5, #108]	; 0x6c
   13250:	adds	r3, r7, r6
   13254:	moveq	r0, r3
   13258:	beq	1328c <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   1325c:	mov	r2, r4
   13260:	mov	r0, r3
   13264:	mov	r1, #0
   13268:	bl	12014 <memset@plt>
   1326c:	ldr	r2, [r5, #224]	; 0xe0
   13270:	add	r0, r0, #4
   13274:	str	r2, [r7, r6]
   13278:	ldr	r3, [r5, #228]	; 0xe4
   1327c:	add	r4, r3, r4
   13280:	add	r3, r3, #4
   13284:	str	r3, [r5, #224]	; 0xe0
   13288:	str	r4, [r5, #228]	; 0xe4
   1328c:	add	sp, sp, #12
   13290:	ldrd	r4, [sp]
   13294:	ldrd	r6, [sp, #8]
   13298:	add	sp, sp, #16
   1329c:	pop	{pc}		; (ldr pc, [sp], #4)
   132a0:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>

000132a4 <flatcc_builder_enter_user_frame@@Base>:
   132a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   132a8:	add	r4, r1, #3
   132ac:	mov	r5, r0
   132b0:	ldr	r3, [r0, #112]	; 0x70
   132b4:	bic	r4, r4, #3
   132b8:	strd	r6, [sp, #8]
   132bc:	add	r4, r4, #4
   132c0:	ldr	r6, [r0, #228]	; 0xe4
   132c4:	str	lr, [sp, #16]
   132c8:	sub	sp, sp, #12
   132cc:	add	r2, r6, r4
   132d0:	cmp	r2, r3
   132d4:	bls	132fc <flatcc_builder_enter_user_frame@@Base+0x58>
   132d8:	mov	ip, #7
   132dc:	add	r1, r0, #108	; 0x6c
   132e0:	ldr	r0, [r0, #40]	; 0x28
   132e4:	mov	r3, #0
   132e8:	str	ip, [sp]
   132ec:	ldr	r7, [r5, #48]	; 0x30
   132f0:	blx	r7
   132f4:	cmp	r0, #0
   132f8:	bne	13344 <flatcc_builder_enter_user_frame@@Base+0xa0>
   132fc:	ldr	r7, [r5, #108]	; 0x6c
   13300:	adds	r0, r7, r6
   13304:	beq	13330 <flatcc_builder_enter_user_frame@@Base+0x8c>
   13308:	mov	r2, r4
   1330c:	mov	r1, #0
   13310:	bl	12014 <memset@plt>
   13314:	ldr	r3, [r5, #224]	; 0xe0
   13318:	str	r3, [r7, r6]
   1331c:	ldr	r0, [r5, #228]	; 0xe4
   13320:	add	r4, r0, r4
   13324:	add	r0, r0, #4
   13328:	str	r0, [r5, #224]	; 0xe0
   1332c:	str	r4, [r5, #228]	; 0xe4
   13330:	add	sp, sp, #12
   13334:	ldrd	r4, [sp]
   13338:	ldrd	r6, [sp, #8]
   1333c:	add	sp, sp, #16
   13340:	pop	{pc}		; (ldr pc, [sp], #4)
   13344:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>

00013348 <flatcc_builder_exit_user_frame@@Base>:
   13348:	ldr	r2, [r0, #224]	; 0xe0
   1334c:	cmp	r2, #0
   13350:	beq	13378 <flatcc_builder_exit_user_frame@@Base+0x30>
   13354:	mov	r3, r0
   13358:	sub	r0, r2, #4
   1335c:	ldr	r1, [r3, #108]	; 0x6c
   13360:	str	r0, [r3, #228]	; 0xe4
   13364:	add	r2, r1, r2
   13368:	ldr	r2, [r2, #-4]
   1336c:	mov	r0, r2
   13370:	str	r2, [r3, #224]	; 0xe0
   13374:	bx	lr
   13378:	str	r4, [sp, #-8]!
   1337c:	str	lr, [sp, #4]
   13380:	bl	12b40 <flatcc_builder_default_alloc@@Base+0x1ec>

00013384 <flatcc_builder_exit_user_frame_at@@Base>:
   13384:	ldr	r2, [r0, #224]	; 0xe0
   13388:	str	r4, [sp, #-8]!
   1338c:	str	lr, [sp, #4]
   13390:	cmp	r2, r1
   13394:	bcc	133d0 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   13398:	cmp	r1, #0
   1339c:	mov	r3, r0
   133a0:	str	r1, [r0, #224]	; 0xe0
   133a4:	beq	133ec <flatcc_builder_exit_user_frame_at@@Base+0x68>
   133a8:	ldr	r2, [r3, #108]	; 0x6c
   133ac:	sub	r0, r1, #4
   133b0:	ldr	r4, [sp]
   133b4:	add	sp, sp, #4
   133b8:	str	r0, [r3, #228]	; 0xe4
   133bc:	add	r1, r2, r1
   133c0:	ldr	r2, [r1, #-4]
   133c4:	mov	r0, r2
   133c8:	str	r2, [r3, #224]	; 0xe0
   133cc:	pop	{pc}		; (ldr pc, [sp], #4)
   133d0:	movw	r1, #38640	; 0x96f0
   133d4:	movt	r1, #1
   133d8:	ldr	r3, [pc, #16]	; 133f0 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   133dc:	movw	r0, #38872	; 0x97d8
   133e0:	movt	r0, #1
   133e4:	movw	r2, #551	; 0x227
   133e8:	bl	12044 <__assert_fail@plt>
   133ec:	bl	12b40 <flatcc_builder_default_alloc@@Base+0x1ec>
   133f0:	andeq	r9, r1, r4, lsl #5

000133f4 <flatcc_builder_get_current_user_frame@@Base>:
   133f4:	ldr	r0, [r0, #224]	; 0xe0
   133f8:	bx	lr

000133fc <flatcc_builder_get_user_frame_ptr@@Base>:
   133fc:	ldr	r0, [r0, #108]	; 0x6c
   13400:	add	r0, r0, r1
   13404:	bx	lr

00013408 <flatcc_builder_embed_buffer@@Base>:
   13408:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1340c:	mov	r5, r0
   13410:	ldr	r0, [r0, #152]	; 0x98
   13414:	strd	r6, [sp, #8]
   13418:	mov	r7, r2
   1341c:	mov	r6, r3
   13420:	strd	r8, [sp, #16]
   13424:	str	sl, [sp, #24]
   13428:	str	lr, [sp, #28]
   1342c:	sub	sp, sp, #88	; 0x58
   13430:	ldrh	r4, [sp, #120]	; 0x78
   13434:	ldr	r8, [sp, #124]	; 0x7c
   13438:	cmp	r4, #4
   1343c:	movcc	r4, #4
   13440:	cmp	r1, #0
   13444:	and	r8, r8, #2
   13448:	bne	13458 <flatcc_builder_embed_buffer@@Base+0x50>
   1344c:	ldrh	r1, [r5, #132]	; 0x84
   13450:	cmp	r1, #0
   13454:	beq	13478 <flatcc_builder_embed_buffer@@Base+0x70>
   13458:	cmp	r1, r4
   1345c:	movcs	r4, r1
   13460:	cmp	r0, #0
   13464:	bne	13478 <flatcc_builder_embed_buffer@@Base+0x70>
   13468:	ldr	r9, [r5, #140]	; 0x8c
   1346c:	sub	r1, r1, #1
   13470:	ands	r1, r1, r9
   13474:	bne	135a0 <flatcc_builder_embed_buffer@@Base+0x198>
   13478:	ldr	r1, [r5, #136]	; 0x88
   1347c:	cmp	r8, #0
   13480:	sub	r4, r4, #1
   13484:	movne	ip, #4
   13488:	moveq	ip, #0
   1348c:	mov	r2, #0
   13490:	cmp	r0, r2
   13494:	str	r2, [sp, #16]
   13498:	sub	r3, r1, r6
   1349c:	str	r2, [sp, #20]
   134a0:	sub	r3, r3, ip
   134a4:	and	r4, r4, r3
   134a8:	add	r3, r6, r4
   134ac:	str	r3, [sp, #12]
   134b0:	bne	13570 <flatcc_builder_embed_buffer@@Base+0x168>
   134b4:	mov	lr, #2
   134b8:	mov	r3, #1
   134bc:	mov	r2, r0
   134c0:	cmp	r6, #0
   134c4:	beq	134f0 <flatcc_builder_embed_buffer@@Base+0xe8>
   134c8:	add	r2, r2, #1
   134cc:	add	ip, sp, #88	; 0x58
   134d0:	add	ip, ip, r2, lsl #3
   134d4:	add	r0, r0, r6
   134d8:	mov	r2, r3
   134dc:	str	r0, [sp, #16]
   134e0:	str	r7, [ip, #-72]	; 0xffffffb8
   134e4:	str	r6, [ip, #-68]	; 0xffffffbc
   134e8:	str	r3, [sp, #20]
   134ec:	mov	r3, lr
   134f0:	cmp	r4, #0
   134f4:	beq	13520 <flatcc_builder_embed_buffer@@Base+0x118>
   134f8:	ldr	lr, [pc, #312]	; 13638 <flatcc_builder_embed_buffer@@Base+0x230>
   134fc:	add	r2, r2, #1
   13500:	add	ip, sp, #88	; 0x58
   13504:	add	ip, ip, r2, lsl #3
   13508:	add	r0, r0, r4
   1350c:	mov	r2, r3
   13510:	str	r0, [sp, #16]
   13514:	str	lr, [ip, #-72]	; 0xffffffb8
   13518:	str	r4, [ip, #-68]	; 0xffffffbc
   1351c:	str	r3, [sp, #20]
   13520:	sub	r4, r1, r0
   13524:	cmp	r1, r4
   13528:	ble	135f8 <flatcc_builder_embed_buffer@@Base+0x1f0>
   1352c:	mov	r3, r4
   13530:	add	r1, sp, #24
   13534:	str	r0, [sp]
   13538:	ldr	r0, [r5, #36]	; 0x24
   1353c:	ldr	r6, [r5, #44]	; 0x2c
   13540:	blx	r6
   13544:	cmp	r0, #0
   13548:	bne	135f4 <flatcc_builder_embed_buffer@@Base+0x1ec>
   1354c:	mov	r0, r4
   13550:	str	r4, [r5, #136]	; 0x88
   13554:	add	sp, sp, #88	; 0x58
   13558:	ldrd	r4, [sp]
   1355c:	ldrd	r6, [sp, #8]
   13560:	ldrd	r8, [sp, #16]
   13564:	ldr	sl, [sp, #24]
   13568:	add	sp, sp, #28
   1356c:	pop	{pc}		; (ldr pc, [sp], #4)
   13570:	mov	ip, #4
   13574:	mov	r3, #1
   13578:	add	r8, sp, #12
   1357c:	mov	r2, r3
   13580:	mov	r0, ip
   13584:	mov	lr, #3
   13588:	str	ip, [sp, #16]
   1358c:	str	r3, [sp, #20]
   13590:	mov	r3, #2
   13594:	str	r8, [sp, #24]
   13598:	str	ip, [sp, #28]
   1359c:	b	134c0 <flatcc_builder_embed_buffer@@Base+0xb8>
   135a0:	ldr	r3, [pc, #144]	; 13638 <flatcc_builder_embed_buffer@@Base+0x230>
   135a4:	add	r0, r9, r1
   135a8:	mov	r2, #1
   135ac:	cmp	r9, r0
   135b0:	str	r1, [sp, #16]
   135b4:	str	r0, [r5, #140]	; 0x8c
   135b8:	strd	r2, [sp, #20]
   135bc:	str	r1, [sp, #28]
   135c0:	bgt	13614 <flatcc_builder_embed_buffer@@Base+0x20c>
   135c4:	mov	r3, r9
   135c8:	str	r1, [sp]
   135cc:	add	r1, sp, #24
   135d0:	ldr	r0, [r5, #36]	; 0x24
   135d4:	ldr	sl, [r5, #44]	; 0x2c
   135d8:	blx	sl
   135dc:	cmp	r0, #0
   135e0:	bne	13634 <flatcc_builder_embed_buffer@@Base+0x22c>
   135e4:	cmn	r9, #1
   135e8:	beq	13630 <flatcc_builder_embed_buffer@@Base+0x228>
   135ec:	ldr	r0, [r5, #152]	; 0x98
   135f0:	b	13478 <flatcc_builder_embed_buffer@@Base+0x70>
   135f4:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   135f8:	movw	r1, #38640	; 0x96f0
   135fc:	movt	r1, #1
   13600:	ldr	r3, [pc, #52]	; 1363c <flatcc_builder_embed_buffer@@Base+0x234>
   13604:	movw	r0, #38832	; 0x97b0
   13608:	movt	r0, #1
   1360c:	movw	r2, #647	; 0x287
   13610:	bl	12044 <__assert_fail@plt>
   13614:	movw	r1, #38640	; 0x96f0
   13618:	movt	r1, #1
   1361c:	movw	r0, #38832	; 0x97b0
   13620:	movt	r0, #1
   13624:	sub	r3, r3, #152	; 0x98
   13628:	movw	r2, #673	; 0x2a1
   1362c:	bl	12044 <__assert_fail@plt>
   13630:	bl	12ac8 <flatcc_builder_default_alloc@@Base+0x174>
   13634:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x14c>
   13638:	andeq	r9, r1, r8, asr #32
   1363c:	andeq	r8, r1, ip, asr #31

00013640 <flatcc_builder_create_buffer@@Base>:
   13640:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13644:	mov	ip, #0
   13648:	mov	r5, r0
   1364c:	strd	r6, [sp, #8]
   13650:	mov	r7, r3
   13654:	strd	r8, [sp, #16]
   13658:	mov	r9, r1
   1365c:	strd	sl, [sp, #24]
   13660:	str	lr, [sp, #32]
   13664:	sub	sp, sp, #100	; 0x64
   13668:	ldrh	r4, [sp, #136]	; 0x88
   1366c:	str	ip, [sp, #20]
   13670:	ldr	r6, [sp, #140]	; 0x8c
   13674:	cmp	r4, #4
   13678:	movcc	r4, #4
   1367c:	cmp	r2, #0
   13680:	and	r8, r6, #1
   13684:	bne	13694 <flatcc_builder_create_buffer@@Base+0x54>
   13688:	ldrh	r2, [r0, #132]	; 0x84
   1368c:	cmp	r2, ip
   13690:	beq	136b4 <flatcc_builder_create_buffer@@Base+0x74>
   13694:	cmp	r2, r4
   13698:	movcs	r4, r2
   1369c:	cmp	r8, #0
   136a0:	bne	136b4 <flatcc_builder_create_buffer@@Base+0x74>
   136a4:	ldr	sl, [r5, #140]	; 0x8c
   136a8:	sub	r2, r2, #1
   136ac:	ands	r1, r2, sl
   136b0:	bne	13848 <flatcc_builder_create_buffer@@Base+0x208>
   136b4:	ldrh	r3, [r5, #128]	; 0x80
   136b8:	ldr	r0, [r5, #136]	; 0x88
   136bc:	cmp	r3, r4
   136c0:	strhcc	r4, [r5, #128]	; 0x80
   136c4:	cmp	r9, #0
   136c8:	sub	r4, r4, #1
   136cc:	ldrne	r3, [r9]
   136d0:	ldreq	r1, [sp, #20]
   136d4:	movne	r1, r3
   136d8:	strne	r3, [sp, #20]
   136dc:	sub	r3, r0, #4
   136e0:	cmp	r1, #0
   136e4:	movne	r1, #4
   136e8:	tst	r6, #2
   136ec:	movne	r2, #4
   136f0:	moveq	r2, #0
   136f4:	sub	r3, r3, r1
   136f8:	ands	r6, r6, #3
   136fc:	sub	r3, r3, r2
   13700:	and	r4, r4, r3
   13704:	bne	13820 <flatcc_builder_create_buffer@@Base+0x1e0>
   13708:	mov	r3, r6
   1370c:	mov	r9, #3
   13710:	mov	lr, #2
   13714:	mov	r2, #1
   13718:	mov	ip, #4
   1371c:	add	fp, sp, #96	; 0x60
   13720:	add	r3, r3, #1
   13724:	str	ip, [sp, #24]
   13728:	add	r3, fp, r3, lsl #3
   1372c:	add	sl, sp, #12
   13730:	mov	fp, #4
   13734:	cmp	r1, #0
   13738:	strd	sl, [r3, #-72]	; 0xffffffb8
   1373c:	str	r2, [sp, #28]
   13740:	beq	13770 <flatcc_builder_create_buffer@@Base+0x130>
   13744:	add	r2, r2, #1
   13748:	add	r3, sp, #96	; 0x60
   1374c:	add	r3, r3, r2, lsl #3
   13750:	add	ip, ip, r1
   13754:	add	sl, sp, #20
   13758:	mov	r2, lr
   1375c:	str	ip, [sp, #24]
   13760:	str	sl, [r3, #-72]	; 0xffffffb8
   13764:	str	r1, [r3, #-68]	; 0xffffffbc
   13768:	str	lr, [sp, #28]
   1376c:	mov	lr, r9
   13770:	cmp	r4, #0
   13774:	beq	137a0 <flatcc_builder_create_buffer@@Base+0x160>
   13778:	ldr	r1, [pc, #372]	; 138f4 <flatcc_builder_create_buffer@@Base+0x2b4>
   1377c:	add	r2, r2, #1
   13780:	add	r3, sp, #96	; 0x60
   13784:	add	r3, r3, r2, lsl #3
   13788:	add	ip, ip, r4
   1378c:	mov	r2, lr
   13790:	str	ip, [sp, #24]
   13794:	str	r1, [r3, #-72]	; 0xffffffb8
   13798:	str	r4, [r3, #-68]	; 0xffffffbc
   1379c:	str	lr, [sp, #28]
   137a0:	sub	r4, r0, ip
   137a4:	cmp	r6, #0
   137a8:	mov	r1, r4
   137ac:	addne	r1, r4, #4
   137b0:	cmp	r8, #0
   137b4:	sub	r7, r7, r1
   137b8:	ldrne	r3, [r5, #144]	; 0x90
   137bc:	str	r7, [sp, #12]
   137c0:	ldreq	r3, [r5, #140]	; 0x8c
   137c4:	cmp	r0, r4
   137c8:	sub	r3, r3, r1
   137cc:	str	r3, [sp, #16]
   137d0:	ble	13898 <flatcc_builder_create_buffer@@Base+0x258>
   137d4:	mov	r3, r4
   137d8:	add	r1, sp, #32
   137dc:	str	ip, [sp]
   137e0:	ldr	r0, [r5, #36]	; 0x24
   137e4:	ldr	r6, [r5, #44]	; 0x2c
   137e8:	blx	r6
   137ec:	cmp	r0, #0
   137f0:	bne	138b4 <flatcc_builder_create_buffer@@Base+0x274>
   137f4:	cmp	r4, #0
   137f8:	str	r4, [r5, #136]	; 0x88
   137fc:	beq	138b8 <flatcc_builder_create_buffer@@Base+0x278>
   13800:	mov	r0, r4
   13804:	add	sp, sp, #100	; 0x64
   13808:	ldrd	r4, [sp]
   1380c:	ldrd	r6, [sp, #8]
   13810:	ldrd	r8, [sp, #16]
   13814:	ldrd	sl, [sp, #24]
   13818:	add	sp, sp, #32
   1381c:	pop	{pc}		; (ldr pc, [sp], #4)
   13820:	mov	ip, #4
   13824:	add	r3, sp, #16
   13828:	mov	r9, ip
   1382c:	mov	lr, #3
   13830:	mov	r2, #2
   13834:	str	r3, [sp, #32]
   13838:	mov	r3, #1
   1383c:	str	ip, [sp, #36]	; 0x24
   13840:	mov	ip, #8
   13844:	b	1371c <flatcc_builder_create_buffer@@Base+0xdc>
   13848:	ldr	r3, [pc, #164]	; 138f4 <flatcc_builder_create_buffer@@Base+0x2b4>
   1384c:	add	r0, sl, r1
   13850:	mov	r2, #1
   13854:	cmp	sl, r0
   13858:	str	r1, [sp, #24]
   1385c:	str	r0, [r5, #140]	; 0x8c
   13860:	strd	r2, [sp, #28]
   13864:	str	r1, [sp, #36]	; 0x24
   13868:	bgt	138d8 <flatcc_builder_create_buffer@@Base+0x298>
   1386c:	mov	r3, sl
   13870:	str	r1, [sp]
   13874:	add	r1, sp, #32
   13878:	ldr	r0, [r5, #36]	; 0x24
   1387c:	ldr	fp, [r5, #44]	; 0x2c
   13880:	blx	fp
   13884:	cmp	r0, #0
   13888:	bne	138d4 <flatcc_builder_create_buffer@@Base+0x294>
   1388c:	cmn	sl, #1
   13890:	bne	136b4 <flatcc_builder_create_buffer@@Base+0x74>
   13894:	bl	12ac8 <flatcc_builder_default_alloc@@Base+0x174>
   13898:	movw	r1, #38640	; 0x96f0
   1389c:	movt	r1, #1
   138a0:	ldr	r3, [pc, #80]	; 138f8 <flatcc_builder_create_buffer@@Base+0x2b8>
   138a4:	movw	r0, #38832	; 0x97b0
   138a8:	movt	r0, #1
   138ac:	movw	r2, #647	; 0x287
   138b0:	bl	12044 <__assert_fail@plt>
   138b4:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   138b8:	movw	r1, #38640	; 0x96f0
   138bc:	movt	r1, #1
   138c0:	ldr	r3, [pc, #52]	; 138fc <flatcc_builder_create_buffer@@Base+0x2bc>
   138c4:	movw	r0, #38832	; 0x97b0
   138c8:	movt	r0, #1
   138cc:	mov	r2, #772	; 0x304
   138d0:	bl	12044 <__assert_fail@plt>
   138d4:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x14c>
   138d8:	movw	r1, #38640	; 0x96f0
   138dc:	movt	r1, #1
   138e0:	movw	r0, #38832	; 0x97b0
   138e4:	movt	r0, #1
   138e8:	sub	r3, r3, #152	; 0x98
   138ec:	movw	r2, #673	; 0x2a1
   138f0:	bl	12044 <__assert_fail@plt>
   138f4:	andeq	r9, r1, r8, asr #32
   138f8:	andeq	r8, r1, ip, asr #31
   138fc:	andeq	r9, r1, r8, lsr #5

00013900 <flatcc_builder_create_struct@@Base>:
   13900:	cmp	r3, #0
   13904:	strd	r4, [sp, #-16]!
   13908:	str	r6, [sp, #8]
   1390c:	str	lr, [sp, #12]
   13910:	sub	sp, sp, #80	; 0x50
   13914:	beq	13a18 <flatcc_builder_create_struct@@Base+0x118>
   13918:	mov	r4, r0
   1391c:	mov	r0, r2
   13920:	ldrh	r2, [r4, #128]	; 0x80
   13924:	ldr	ip, [r4, #136]	; 0x88
   13928:	cmp	r2, r3
   1392c:	mov	r2, #0
   13930:	strhcc	r3, [r4, #128]	; 0x80
   13934:	sub	r5, ip, r0
   13938:	sub	r3, r3, #1
   1393c:	cmp	r0, r2
   13940:	and	r3, r3, r5
   13944:	str	r2, [sp, #8]
   13948:	str	r2, [sp, #12]
   1394c:	bne	139cc <flatcc_builder_create_struct@@Base+0xcc>
   13950:	cmp	r3, #0
   13954:	movne	r1, r2
   13958:	movne	r0, r3
   1395c:	movne	r2, #1
   13960:	beq	139f8 <flatcc_builder_create_struct@@Base+0xf8>
   13964:	ldr	lr, [pc, #200]	; 13a34 <flatcc_builder_create_struct@@Base+0x134>
   13968:	add	r5, sp, #80	; 0x50
   1396c:	add	r1, r1, #1
   13970:	add	r1, r5, r1, lsl #3
   13974:	sub	r5, ip, r0
   13978:	str	r0, [sp, #8]
   1397c:	str	r2, [sp, #12]
   13980:	str	lr, [r1, #-72]	; 0xffffffb8
   13984:	str	r3, [r1, #-68]	; 0xffffffbc
   13988:	cmp	ip, r5
   1398c:	ble	139f8 <flatcc_builder_create_struct@@Base+0xf8>
   13990:	mov	r3, r5
   13994:	add	r1, sp, #16
   13998:	str	r0, [sp]
   1399c:	ldr	r0, [r4, #36]	; 0x24
   139a0:	ldr	r6, [r4, #44]	; 0x2c
   139a4:	blx	r6
   139a8:	cmp	r0, #0
   139ac:	bne	13a14 <flatcc_builder_create_struct@@Base+0x114>
   139b0:	mov	r0, r5
   139b4:	str	r5, [r4, #136]	; 0x88
   139b8:	add	sp, sp, #80	; 0x50
   139bc:	ldrd	r4, [sp]
   139c0:	ldr	r6, [sp, #8]
   139c4:	add	sp, sp, #12
   139c8:	pop	{pc}		; (ldr pc, [sp], #4)
   139cc:	mov	r2, #1
   139d0:	cmp	r3, #0
   139d4:	str	r0, [sp, #8]
   139d8:	str	r2, [sp, #12]
   139dc:	str	r1, [sp, #16]
   139e0:	movne	r1, r2
   139e4:	movne	r2, #2
   139e8:	str	r0, [sp, #20]
   139ec:	addne	r0, r0, r3
   139f0:	beq	13988 <flatcc_builder_create_struct@@Base+0x88>
   139f4:	b	13964 <flatcc_builder_create_struct@@Base+0x64>
   139f8:	movw	r1, #38640	; 0x96f0
   139fc:	movt	r1, #1
   13a00:	ldr	r3, [pc, #48]	; 13a38 <flatcc_builder_create_struct@@Base+0x138>
   13a04:	movw	r0, #38832	; 0x97b0
   13a08:	movt	r0, #1
   13a0c:	movw	r2, #647	; 0x287
   13a10:	bl	12044 <__assert_fail@plt>
   13a14:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   13a18:	movw	r1, #38640	; 0x96f0
   13a1c:	movt	r1, #1
   13a20:	ldr	r3, [pc, #20]	; 13a3c <flatcc_builder_create_struct@@Base+0x13c>
   13a24:	movw	r0, #38904	; 0x97f8
   13a28:	movt	r0, #1
   13a2c:	movw	r2, #783	; 0x30f
   13a30:	bl	12044 <__assert_fail@plt>
   13a34:	andeq	r9, r1, r8, asr #32
   13a38:	andeq	r8, r1, ip, asr #31
   13a3c:	andeq	r9, r1, r8, asr #5

00013a40 <flatcc_builder_start_buffer@@Base>:
   13a40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13a44:	mov	r5, r1
   13a48:	mov	r4, r0
   13a4c:	ldr	r1, [r0, #156]	; 0x9c
   13a50:	strd	r6, [sp, #8]
   13a54:	mov	r6, r3
   13a58:	mov	r7, r2
   13a5c:	ldr	r3, [r0, #160]	; 0xa0
   13a60:	strd	r8, [sp, #16]
   13a64:	ldrh	r8, [r0, #128]	; 0x80
   13a68:	add	r2, r1, #1
   13a6c:	strd	sl, [sp, #24]
   13a70:	str	lr, [sp, #32]
   13a74:	sub	sp, sp, #12
   13a78:	cmp	r2, r3
   13a7c:	str	r2, [r0, #156]	; 0x9c
   13a80:	ble	13bcc <flatcc_builder_start_buffer@@Base+0x18c>
   13a84:	ldr	r3, [r0, #176]	; 0xb0
   13a88:	cmp	r3, #0
   13a8c:	cmpgt	r2, r3
   13a90:	movgt	r3, #1
   13a94:	movle	r3, #0
   13a98:	bgt	13bdc <flatcc_builder_start_buffer@@Base+0x19c>
   13a9c:	add	r1, r1, r1, lsl #3
   13aa0:	ldr	r0, [r0, #88]	; 0x58
   13aa4:	lsl	r9, r1, #2
   13aa8:	add	r2, r9, #36	; 0x24
   13aac:	cmp	r2, r0
   13ab0:	bls	13ad4 <flatcc_builder_start_buffer@@Base+0x94>
   13ab4:	mov	ip, #4
   13ab8:	add	r1, r4, #84	; 0x54
   13abc:	ldr	r0, [r4, #40]	; 0x28
   13ac0:	str	ip, [sp]
   13ac4:	ldr	sl, [r4, #48]	; 0x30
   13ac8:	blx	sl
   13acc:	cmp	r0, #0
   13ad0:	bne	13be4 <flatcc_builder_start_buffer@@Base+0x1a4>
   13ad4:	ldr	r3, [r4, #84]	; 0x54
   13ad8:	add	r3, r3, r9
   13adc:	cmp	r3, #0
   13ae0:	str	r3, [r4, #32]
   13ae4:	beq	13bdc <flatcc_builder_start_buffer@@Base+0x19c>
   13ae8:	ldr	r2, [r4, #88]	; 0x58
   13aec:	movw	r0, #36409	; 0x8e39
   13af0:	movt	r0, #14563	; 0x38e3
   13af4:	ldr	r1, [r4, #176]	; 0xb0
   13af8:	umull	r0, r2, r0, r2
   13afc:	lsr	r2, r2, #3
   13b00:	cmp	r1, #0
   13b04:	cmpgt	r2, r1
   13b08:	movgt	r2, r1
   13b0c:	str	r2, [r4, #160]	; 0xa0
   13b10:	ldr	sl, [pc, #208]	; 13be8 <flatcc_builder_start_buffer@@Base+0x1a8>
   13b14:	mov	r0, #0
   13b18:	mvn	lr, #3
   13b1c:	cmp	r5, r0
   13b20:	ldr	r2, [r4, #20]
   13b24:	ldr	ip, [r4, #28]
   13b28:	moveq	r5, sl
   13b2c:	ldrh	r9, [r4, #130]	; 0x82
   13b30:	ldrh	fp, [r4, #132]	; 0x84
   13b34:	ldr	r1, [r4, #148]	; 0x94
   13b38:	ldr	sl, [r4, #152]	; 0x98
   13b3c:	str	r2, [r3, #8]
   13b40:	add	r2, r2, ip
   13b44:	add	r2, r2, #7
   13b48:	strh	r9, [r3, #12]
   13b4c:	bic	r2, r2, #7
   13b50:	strh	r8, [r4, #130]	; 0x82
   13b54:	ldrh	r8, [r4, #164]	; 0xa4
   13b58:	ldr	r9, [r4, #136]	; 0x88
   13b5c:	stm	r3, {ip, lr}
   13b60:	mov	ip, #1
   13b64:	str	r0, [r4, #20]
   13b68:	str	r2, [r4, #28]
   13b6c:	add	r2, r1, ip
   13b70:	strh	ip, [r4, #128]	; 0x80
   13b74:	ldr	lr, [r4, #144]	; 0x90
   13b78:	strh	fp, [r3, #34]	; 0x22
   13b7c:	strh	r7, [r4, #132]	; 0x84
   13b80:	ldr	r7, [r4, #168]	; 0xa8
   13b84:	strh	r8, [r3, #32]
   13b88:	strh	r6, [r4, #164]	; 0xa4
   13b8c:	str	lr, [r3, #20]
   13b90:	str	sl, [r3, #28]
   13b94:	str	r9, [r4, #144]	; 0x90
   13b98:	str	r2, [r4, #148]	; 0x94
   13b9c:	str	r1, [r4, #152]	; 0x98
   13ba0:	str	r7, [r3, #16]
   13ba4:	ldr	r2, [r5]
   13ba8:	str	r2, [r4, #168]	; 0xa8
   13bac:	strh	ip, [r3, #14]
   13bb0:	add	sp, sp, #12
   13bb4:	ldrd	r4, [sp]
   13bb8:	ldrd	r6, [sp, #8]
   13bbc:	ldrd	r8, [sp, #16]
   13bc0:	ldrd	sl, [sp, #24]
   13bc4:	add	sp, sp, #32
   13bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bcc:	ldr	r3, [r0, #32]
   13bd0:	add	r3, r3, #36	; 0x24
   13bd4:	str	r3, [r0, #32]
   13bd8:	b	13b10 <flatcc_builder_start_buffer@@Base+0xd0>
   13bdc:	mvn	r0, #0
   13be0:	b	13bb0 <flatcc_builder_start_buffer@@Base+0x170>
   13be4:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>
   13be8:	andeq	r9, r1, r8, asr #32

00013bec <flatcc_builder_end_buffer@@Base>:
   13bec:	ldr	ip, [r0, #32]
   13bf0:	strd	r4, [sp, #-16]!
   13bf4:	mov	r4, r0
   13bf8:	ldrh	r2, [r0, #164]	; 0xa4
   13bfc:	ldr	r0, [r0, #152]	; 0x98
   13c00:	ldrh	ip, [ip, #14]
   13c04:	and	r2, r2, #2
   13c08:	str	r6, [sp, #8]
   13c0c:	str	lr, [sp, #12]
   13c10:	sub	sp, sp, #8
   13c14:	cmp	r0, #0
   13c18:	moveq	r0, r2
   13c1c:	orrne	r0, r2, #1
   13c20:	cmp	ip, #1
   13c24:	bne	13d0c <flatcc_builder_end_buffer@@Base+0x120>
   13c28:	ldrh	r2, [r4, #132]	; 0x84
   13c2c:	mov	r3, r1
   13c30:	add	r1, r4, #168	; 0xa8
   13c34:	ldrh	ip, [r4, #128]	; 0x80
   13c38:	cmp	r2, ip
   13c3c:	movhi	ip, r2
   13c40:	strhhi	r2, [r4, #128]	; 0x80
   13c44:	str	ip, [sp]
   13c48:	str	r0, [sp, #4]
   13c4c:	mov	r0, r4
   13c50:	bl	13640 <flatcc_builder_create_buffer@@Base>
   13c54:	subs	r5, r0, #0
   13c58:	beq	13cf4 <flatcc_builder_end_buffer@@Base+0x108>
   13c5c:	mov	r1, #0
   13c60:	ldr	r0, [r4, #16]
   13c64:	ldr	r3, [r4, #32]
   13c68:	ldr	r2, [r4, #20]
   13c6c:	ldrh	lr, [r3, #32]
   13c70:	ldr	ip, [r3, #16]
   13c74:	ldr	r6, [r3, #20]
   13c78:	ldr	r3, [r3, #28]
   13c7c:	str	r6, [r4, #144]	; 0x90
   13c80:	strh	lr, [r4, #164]	; 0xa4
   13c84:	str	r3, [r4, #152]	; 0x98
   13c88:	str	ip, [r4, #168]	; 0xa8
   13c8c:	bl	12014 <memset@plt>
   13c90:	ldr	r3, [r4, #32]
   13c94:	ldr	r0, [r4, #60]	; 0x3c
   13c98:	ldr	r2, [r4, #64]	; 0x40
   13c9c:	ldr	ip, [r3]
   13ca0:	ldmib	r3, {r1, lr}
   13ca4:	add	r0, r0, ip
   13ca8:	sub	r2, r2, ip
   13cac:	str	r0, [r4, #16]
   13cb0:	cmp	r2, r1
   13cb4:	ldrh	r0, [r4, #128]	; 0x80
   13cb8:	movcs	r2, r1
   13cbc:	str	lr, [r4, #20]
   13cc0:	str	ip, [r4, #28]
   13cc4:	ldrh	ip, [r4, #130]	; 0x82
   13cc8:	str	r2, [r4, #24]
   13ccc:	ldr	r2, [r4, #156]	; 0x9c
   13cd0:	str	r1, [r3, #4]
   13cd4:	cmp	r0, ip
   13cd8:	sub	r0, r3, #36	; 0x24
   13cdc:	strhcc	ip, [r4, #128]	; 0x80
   13ce0:	ldrh	r1, [r3, #12]
   13ce4:	sub	r3, r2, #1
   13ce8:	str	r0, [r4, #32]
   13cec:	strh	r1, [r4, #130]	; 0x82
   13cf0:	str	r3, [r4, #156]	; 0x9c
   13cf4:	mov	r0, r5
   13cf8:	add	sp, sp, #8
   13cfc:	ldrd	r4, [sp]
   13d00:	ldr	r6, [sp, #8]
   13d04:	add	sp, sp, #12
   13d08:	pop	{pc}		; (ldr pc, [sp], #4)
   13d0c:	movw	r1, #38640	; 0x96f0
   13d10:	movt	r1, #1
   13d14:	ldr	r3, [pc, #12]	; 13d28 <flatcc_builder_end_buffer@@Base+0x13c>
   13d18:	movw	r0, #38916	; 0x9804
   13d1c:	movt	r0, #1
   13d20:	movw	r2, #838	; 0x346
   13d24:	bl	12044 <__assert_fail@plt>
   13d28:	andeq	r9, r1, r8, ror #5

00013d2c <flatcc_builder_start_struct@@Base>:
   13d2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13d30:	mov	r5, r1
   13d34:	mov	r4, r0
   13d38:	ldr	r1, [r0, #156]	; 0x9c
   13d3c:	ldr	r3, [r0, #160]	; 0xa0
   13d40:	strd	r6, [sp, #8]
   13d44:	mov	r6, r2
   13d48:	str	r8, [sp, #16]
   13d4c:	add	r2, r1, #1
   13d50:	str	lr, [sp, #20]
   13d54:	sub	sp, sp, #8
   13d58:	cmp	r2, r3
   13d5c:	str	r2, [r0, #156]	; 0x9c
   13d60:	ble	13e80 <flatcc_builder_start_struct@@Base+0x154>
   13d64:	ldr	r3, [r0, #176]	; 0xb0
   13d68:	cmp	r3, #0
   13d6c:	cmpgt	r2, r3
   13d70:	movgt	r3, #1
   13d74:	movle	r3, #0
   13d78:	bgt	13eec <flatcc_builder_start_struct@@Base+0x1c0>
   13d7c:	add	r1, r1, r1, lsl #3
   13d80:	ldr	r0, [r0, #88]	; 0x58
   13d84:	lsl	r7, r1, #2
   13d88:	add	r2, r7, #36	; 0x24
   13d8c:	cmp	r2, r0
   13d90:	bls	13db4 <flatcc_builder_start_struct@@Base+0x88>
   13d94:	mov	ip, #4
   13d98:	add	r1, r4, #84	; 0x54
   13d9c:	ldr	r0, [r4, #40]	; 0x28
   13da0:	str	ip, [sp]
   13da4:	ldr	r8, [r4, #48]	; 0x30
   13da8:	blx	r8
   13dac:	cmp	r0, #0
   13db0:	bne	13ef4 <flatcc_builder_start_struct@@Base+0x1c8>
   13db4:	ldr	r1, [r4, #84]	; 0x54
   13db8:	add	r1, r1, r7
   13dbc:	cmp	r1, #0
   13dc0:	str	r1, [r4, #32]
   13dc4:	beq	13eec <flatcc_builder_start_struct@@Base+0x1c0>
   13dc8:	ldr	r3, [r4, #88]	; 0x58
   13dcc:	movw	r0, #36409	; 0x8e39
   13dd0:	movt	r0, #14563	; 0x38e3
   13dd4:	ldr	r2, [r4, #176]	; 0xb0
   13dd8:	umull	r0, r3, r0, r3
   13ddc:	lsr	r3, r3, #3
   13de0:	cmp	r2, #0
   13de4:	cmpgt	r3, r2
   13de8:	movgt	r3, r2
   13dec:	str	r3, [r4, #160]	; 0xa0
   13df0:	ldr	r3, [r4, #20]
   13df4:	mvn	lr, #3
   13df8:	ldr	ip, [r4, #28]
   13dfc:	ldrh	r7, [r4, #130]	; 0x82
   13e00:	ldr	r2, [r4, #64]	; 0x40
   13e04:	ldr	r0, [r4, #60]	; 0x3c
   13e08:	str	r3, [r1, #8]
   13e0c:	add	r3, r3, ip
   13e10:	add	r3, r3, #7
   13e14:	strh	r7, [r1, #12]
   13e18:	mov	r7, #0
   13e1c:	bic	r3, r3, #7
   13e20:	strh	r6, [r4, #130]	; 0x82
   13e24:	mvn	r6, #3
   13e28:	sub	r2, r2, r3
   13e2c:	stm	r1, {ip, lr}
   13e30:	mov	ip, #2
   13e34:	cmp	r2, lr
   13e38:	add	r0, r0, r3
   13e3c:	str	r7, [r4, #20]
   13e40:	movhi	r2, lr
   13e44:	str	r3, [r4, #28]
   13e48:	strh	ip, [r1, #14]
   13e4c:	strls	r2, [r4, #24]
   13e50:	strhi	lr, [r4, #24]
   13e54:	cmp	r5, r2
   13e58:	str	r0, [r4, #16]
   13e5c:	str	r6, [r1, #4]
   13e60:	str	r5, [r4, #20]
   13e64:	bcs	13e90 <flatcc_builder_start_struct@@Base+0x164>
   13e68:	add	sp, sp, #8
   13e6c:	ldrd	r4, [sp]
   13e70:	ldrd	r6, [sp, #8]
   13e74:	ldr	r8, [sp, #16]
   13e78:	add	sp, sp, #20
   13e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e80:	ldr	r1, [r0, #32]
   13e84:	add	r1, r1, #36	; 0x24
   13e88:	str	r1, [r0, #32]
   13e8c:	b	13df0 <flatcc_builder_start_struct@@Base+0xc4>
   13e90:	mov	ip, #1
   13e94:	add	r1, r4, #60	; 0x3c
   13e98:	ldr	r0, [r4, #40]	; 0x28
   13e9c:	add	r2, r5, ip
   13ea0:	add	r2, r2, r3
   13ea4:	mov	r3, ip
   13ea8:	str	ip, [sp]
   13eac:	ldr	r5, [r4, #48]	; 0x30
   13eb0:	blx	r5
   13eb4:	cmp	r0, #0
   13eb8:	bne	13eec <flatcc_builder_start_struct@@Base+0x1c0>
   13ebc:	ldr	r0, [r4, #28]
   13ec0:	ldr	r2, [r4, #32]
   13ec4:	ldr	r3, [r4, #64]	; 0x40
   13ec8:	ldr	r1, [r4, #60]	; 0x3c
   13ecc:	sub	r3, r3, r0
   13ed0:	cmp	r3, r6
   13ed4:	movhi	r3, r6
   13ed8:	add	r0, r1, r0
   13edc:	str	r0, [r4, #16]
   13ee0:	str	r3, [r4, #24]
   13ee4:	str	r6, [r2, #4]
   13ee8:	b	13e68 <flatcc_builder_start_struct@@Base+0x13c>
   13eec:	mov	r0, #0
   13ef0:	b	13e68 <flatcc_builder_start_struct@@Base+0x13c>
   13ef4:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>

00013ef8 <flatcc_builder_struct_edit@@Base>:
   13ef8:	ldr	r0, [r0, #16]
   13efc:	bx	lr

00013f00 <flatcc_builder_end_struct@@Base>:
   13f00:	ldr	r3, [r0, #32]
   13f04:	strd	r4, [sp, #-16]!
   13f08:	ldrh	r3, [r3, #14]
   13f0c:	str	r6, [sp, #8]
   13f10:	str	lr, [sp, #12]
   13f14:	sub	sp, sp, #80	; 0x50
   13f18:	cmp	r3, #2
   13f1c:	bne	140c4 <flatcc_builder_end_struct@@Base+0x1c4>
   13f20:	ldrh	r3, [r0, #130]	; 0x82
   13f24:	mov	r4, r0
   13f28:	ldr	r1, [r0, #16]
   13f2c:	ldr	r0, [r0, #20]
   13f30:	cmp	r3, #0
   13f34:	beq	140a8 <flatcc_builder_end_struct@@Base+0x1a8>
   13f38:	ldrh	r2, [r4, #128]	; 0x80
   13f3c:	ldr	ip, [r4, #136]	; 0x88
   13f40:	cmp	r2, r3
   13f44:	mov	r2, #0
   13f48:	strhcc	r3, [r4, #128]	; 0x80
   13f4c:	sub	r5, ip, r0
   13f50:	sub	r3, r3, #1
   13f54:	cmp	r0, r2
   13f58:	and	r3, r3, r5
   13f5c:	str	r2, [sp, #8]
   13f60:	str	r2, [sp, #12]
   13f64:	bne	1405c <flatcc_builder_end_struct@@Base+0x15c>
   13f68:	cmp	r3, #0
   13f6c:	movne	r1, r2
   13f70:	movne	r0, r3
   13f74:	movne	r2, #1
   13f78:	beq	14088 <flatcc_builder_end_struct@@Base+0x188>
   13f7c:	ldr	lr, [pc, #348]	; 140e0 <flatcc_builder_end_struct@@Base+0x1e0>
   13f80:	add	r5, sp, #80	; 0x50
   13f84:	add	r1, r1, #1
   13f88:	add	r1, r5, r1, lsl #3
   13f8c:	sub	r5, ip, r0
   13f90:	str	r0, [sp, #8]
   13f94:	str	r2, [sp, #12]
   13f98:	str	lr, [r1, #-72]	; 0xffffffb8
   13f9c:	str	r3, [r1, #-68]	; 0xffffffbc
   13fa0:	cmp	ip, r5
   13fa4:	ble	14088 <flatcc_builder_end_struct@@Base+0x188>
   13fa8:	add	r1, sp, #16
   13fac:	mov	r3, r5
   13fb0:	str	r0, [sp]
   13fb4:	ldr	r0, [r4, #36]	; 0x24
   13fb8:	ldr	r6, [r4, #44]	; 0x2c
   13fbc:	blx	r6
   13fc0:	subs	r1, r0, #0
   13fc4:	bne	140a4 <flatcc_builder_end_struct@@Base+0x1a4>
   13fc8:	cmp	r5, #0
   13fcc:	str	r5, [r4, #136]	; 0x88
   13fd0:	beq	14044 <flatcc_builder_end_struct@@Base+0x144>
   13fd4:	ldr	r0, [r4, #16]
   13fd8:	ldr	r2, [r4, #20]
   13fdc:	bl	12014 <memset@plt>
   13fe0:	ldr	r3, [r4, #32]
   13fe4:	ldr	r0, [r4, #60]	; 0x3c
   13fe8:	ldr	r2, [r4, #64]	; 0x40
   13fec:	ldr	ip, [r3]
   13ff0:	ldmib	r3, {r1, lr}
   13ff4:	add	r0, r0, ip
   13ff8:	sub	r2, r2, ip
   13ffc:	str	r0, [r4, #16]
   14000:	cmp	r2, r1
   14004:	ldrh	r0, [r4, #128]	; 0x80
   14008:	movcs	r2, r1
   1400c:	str	lr, [r4, #20]
   14010:	str	ip, [r4, #28]
   14014:	ldrh	ip, [r4, #130]	; 0x82
   14018:	str	r2, [r4, #24]
   1401c:	ldr	r2, [r4, #156]	; 0x9c
   14020:	str	r1, [r3, #4]
   14024:	cmp	r0, ip
   14028:	sub	r0, r3, #36	; 0x24
   1402c:	strhcc	ip, [r4, #128]	; 0x80
   14030:	ldrh	r1, [r3, #12]
   14034:	sub	r3, r2, #1
   14038:	str	r0, [r4, #32]
   1403c:	strh	r1, [r4, #130]	; 0x82
   14040:	str	r3, [r4, #156]	; 0x9c
   14044:	mov	r0, r5
   14048:	add	sp, sp, #80	; 0x50
   1404c:	ldrd	r4, [sp]
   14050:	ldr	r6, [sp, #8]
   14054:	add	sp, sp, #12
   14058:	pop	{pc}		; (ldr pc, [sp], #4)
   1405c:	mov	r2, #1
   14060:	cmp	r3, #0
   14064:	str	r0, [sp, #8]
   14068:	str	r2, [sp, #12]
   1406c:	str	r1, [sp, #16]
   14070:	movne	r1, r2
   14074:	movne	r2, #2
   14078:	str	r0, [sp, #20]
   1407c:	addne	r0, r0, r3
   14080:	beq	13fa0 <flatcc_builder_end_struct@@Base+0xa0>
   14084:	b	13f7c <flatcc_builder_end_struct@@Base+0x7c>
   14088:	movw	r1, #38640	; 0x96f0
   1408c:	movt	r1, #1
   14090:	ldr	r3, [pc, #76]	; 140e4 <flatcc_builder_end_struct@@Base+0x1e4>
   14094:	movw	r0, #38832	; 0x97b0
   14098:	movt	r0, #1
   1409c:	movw	r2, #647	; 0x287
   140a0:	bl	12044 <__assert_fail@plt>
   140a4:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   140a8:	movw	r1, #38640	; 0x96f0
   140ac:	movt	r1, #1
   140b0:	ldr	r3, [pc, #48]	; 140e8 <flatcc_builder_end_struct@@Base+0x1e8>
   140b4:	movw	r0, #38904	; 0x97f8
   140b8:	movt	r0, #1
   140bc:	movw	r2, #783	; 0x30f
   140c0:	bl	12044 <__assert_fail@plt>
   140c4:	movw	r1, #38640	; 0x96f0
   140c8:	movt	r1, #1
   140cc:	ldr	r3, [pc, #24]	; 140ec <flatcc_builder_end_struct@@Base+0x1ec>
   140d0:	movw	r0, #38960	; 0x9830
   140d4:	movt	r0, #1
   140d8:	mov	r2, #872	; 0x368
   140dc:	bl	12044 <__assert_fail@plt>
   140e0:	andeq	r9, r1, r8, asr #32
   140e4:	andeq	r8, r1, ip, asr #31
   140e8:	andeq	r9, r1, r8, asr #5
   140ec:	andeq	r9, r1, r4, lsl #6

000140f0 <flatcc_builder_extend_vector@@Base>:
   140f0:	ldr	ip, [r0, #32]
   140f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   140f8:	mov	r4, r0
   140fc:	ldr	r3, [ip, #20]
   14100:	ldr	r0, [ip, #24]
   14104:	strd	r6, [sp, #8]
   14108:	str	lr, [sp, #16]
   1410c:	sub	sp, sp, #12
   14110:	adds	r3, r1, r3
   14114:	movcs	r5, #1
   14118:	movcc	r5, #0
   1411c:	cmp	r0, r3
   14120:	orrcc	r5, r5, #1
   14124:	cmp	r5, #0
   14128:	bne	141d4 <flatcc_builder_extend_vector@@Base+0xe4>
   1412c:	ldr	r2, [ip, #16]
   14130:	ldr	r6, [r4, #20]
   14134:	str	r3, [ip, #20]
   14138:	ldr	r3, [r4, #24]
   1413c:	mla	r2, r2, r1, r6
   14140:	cmp	r2, r3
   14144:	str	r2, [r4, #20]
   14148:	bcs	14168 <flatcc_builder_extend_vector@@Base+0x78>
   1414c:	ldr	r0, [r4, #16]
   14150:	add	r0, r0, r6
   14154:	add	sp, sp, #12
   14158:	ldrd	r4, [sp]
   1415c:	ldrd	r6, [sp, #8]
   14160:	add	sp, sp, #16
   14164:	pop	{pc}		; (ldr pc, [sp], #4)
   14168:	ldr	ip, [r4, #28]
   1416c:	mov	r0, #1
   14170:	add	r1, r4, #60	; 0x3c
   14174:	mov	r3, r0
   14178:	str	r0, [sp]
   1417c:	ldr	r7, [r4, #48]	; 0x30
   14180:	add	ip, ip, r0
   14184:	ldr	r0, [r4, #40]	; 0x28
   14188:	add	r2, ip, r2
   1418c:	blx	r7
   14190:	cmp	r0, #0
   14194:	bne	141cc <flatcc_builder_extend_vector@@Base+0xdc>
   14198:	ldr	r2, [r4, #28]
   1419c:	ldr	r0, [r4, #60]	; 0x3c
   141a0:	ldr	r3, [r4, #64]	; 0x40
   141a4:	add	r0, r0, r2
   141a8:	sub	r3, r3, r2
   141ac:	mvn	r2, #3
   141b0:	str	r0, [r4, #16]
   141b4:	cmn	r3, #4
   141b8:	mvnhi	r3, #3
   141bc:	str	r3, [r4, #24]
   141c0:	ldr	r3, [r4, #32]
   141c4:	str	r2, [r3, #4]
   141c8:	b	14150 <flatcc_builder_extend_vector@@Base+0x60>
   141cc:	mov	r0, r5
   141d0:	b	14154 <flatcc_builder_extend_vector@@Base+0x64>
   141d4:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>

000141d8 <flatcc_builder_vector_push@@Base>:
   141d8:	ldr	r3, [r0, #32]
   141dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   141e0:	ldrh	r2, [r3, #14]
   141e4:	strd	r6, [sp, #8]
   141e8:	str	r8, [sp, #16]
   141ec:	str	lr, [sp, #20]
   141f0:	sub	sp, sp, #8
   141f4:	cmp	r2, #4
   141f8:	bne	142fc <flatcc_builder_vector_push@@Base+0x124>
   141fc:	mov	r6, r1
   14200:	ldr	r2, [r3, #20]
   14204:	ldr	r1, [r3, #24]
   14208:	cmp	r2, r1
   1420c:	bhi	142e0 <flatcc_builder_vector_push@@Base+0x108>
   14210:	add	r2, r2, #1
   14214:	ldr	r5, [r3, #16]
   14218:	mov	r4, r0
   1421c:	ldr	r7, [r0, #20]
   14220:	str	r2, [r3, #20]
   14224:	ldr	r3, [r0, #24]
   14228:	add	ip, r5, r7
   1422c:	cmp	ip, r3
   14230:	str	ip, [r0, #20]
   14234:	bcs	14274 <flatcc_builder_vector_push@@Base+0x9c>
   14238:	ldr	r3, [r0, #16]
   1423c:	adds	r3, r3, r7
   14240:	beq	14258 <flatcc_builder_vector_push@@Base+0x80>
   14244:	mov	r0, r3
   14248:	mov	r2, r5
   1424c:	mov	r1, r6
   14250:	bl	11f90 <memcpy@plt>
   14254:	mov	r3, r0
   14258:	mov	r0, r3
   1425c:	add	sp, sp, #8
   14260:	ldrd	r4, [sp]
   14264:	ldrd	r6, [sp, #8]
   14268:	ldr	r8, [sp, #16]
   1426c:	add	sp, sp, #20
   14270:	pop	{pc}		; (ldr pc, [sp], #4)
   14274:	ldr	r2, [r4, #28]
   14278:	mov	r0, #1
   1427c:	add	r1, r4, #60	; 0x3c
   14280:	mov	r3, r0
   14284:	str	r0, [sp]
   14288:	ldr	r8, [r4, #48]	; 0x30
   1428c:	add	r2, r2, r0
   14290:	ldr	r0, [r4, #40]	; 0x28
   14294:	add	r2, r2, ip
   14298:	blx	r8
   1429c:	cmp	r0, #0
   142a0:	bne	142d8 <flatcc_builder_vector_push@@Base+0x100>
   142a4:	ldr	r1, [r4, #28]
   142a8:	ldr	r3, [r4, #60]	; 0x3c
   142ac:	ldr	r2, [r4, #64]	; 0x40
   142b0:	add	r3, r3, r1
   142b4:	sub	r2, r2, r1
   142b8:	mvn	r1, #3
   142bc:	str	r3, [r4, #16]
   142c0:	cmn	r2, #4
   142c4:	mvnhi	r2, #3
   142c8:	str	r2, [r4, #24]
   142cc:	ldr	r2, [r4, #32]
   142d0:	str	r1, [r2, #4]
   142d4:	b	1423c <flatcc_builder_vector_push@@Base+0x64>
   142d8:	mov	r3, #0
   142dc:	b	14258 <flatcc_builder_vector_push@@Base+0x80>
   142e0:	movw	r1, #38640	; 0x96f0
   142e4:	movt	r1, #1
   142e8:	ldr	r3, [pc, #40]	; 14318 <flatcc_builder_vector_push@@Base+0x140>
   142ec:	movw	r0, #39048	; 0x9888
   142f0:	movt	r0, #1
   142f4:	mov	r2, #908	; 0x38c
   142f8:	bl	12044 <__assert_fail@plt>
   142fc:	movw	r1, #38640	; 0x96f0
   14300:	movt	r1, #1
   14304:	ldr	r3, [pc, #12]	; 14318 <flatcc_builder_vector_push@@Base+0x140>
   14308:	movw	r0, #39004	; 0x985c
   1430c:	movt	r0, #1
   14310:	movw	r2, #907	; 0x38b
   14314:	bl	12044 <__assert_fail@plt>
   14318:	andeq	r9, r1, r0, lsr #6

0001431c <flatcc_builder_append_vector@@Base>:
   1431c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14320:	mov	r5, r0
   14324:	ldr	r0, [r0, #32]
   14328:	ldrh	r3, [r0, #14]
   1432c:	strd	r6, [sp, #8]
   14330:	strd	r8, [sp, #16]
   14334:	str	lr, [sp, #24]
   14338:	sub	sp, sp, #12
   1433c:	cmp	r3, #4
   14340:	bne	14440 <flatcc_builder_append_vector@@Base+0x124>
   14344:	mov	r6, r1
   14348:	ldr	r1, [r0, #20]
   1434c:	ldr	r4, [r0, #24]
   14350:	adds	r1, r2, r1
   14354:	movcs	r3, #1
   14358:	movcc	r3, #0
   1435c:	cmp	r4, r1
   14360:	movcs	r4, r3
   14364:	orrcc	r4, r3, #1
   14368:	cmp	r4, #0
   1436c:	bne	1443c <flatcc_builder_append_vector@@Base+0x120>
   14370:	ldr	r7, [r0, #16]
   14374:	ldr	r8, [r5, #20]
   14378:	ldr	r3, [r5, #24]
   1437c:	mul	r7, r7, r2
   14380:	str	r1, [r0, #20]
   14384:	add	ip, r7, r8
   14388:	cmp	ip, r3
   1438c:	str	ip, [r5, #20]
   14390:	bcs	143d0 <flatcc_builder_append_vector@@Base+0xb4>
   14394:	ldr	r3, [r5, #16]
   14398:	adds	r3, r3, r8
   1439c:	beq	143b4 <flatcc_builder_append_vector@@Base+0x98>
   143a0:	mov	r0, r3
   143a4:	mov	r2, r7
   143a8:	mov	r1, r6
   143ac:	bl	11f90 <memcpy@plt>
   143b0:	mov	r3, r0
   143b4:	mov	r0, r3
   143b8:	add	sp, sp, #12
   143bc:	ldrd	r4, [sp]
   143c0:	ldrd	r6, [sp, #8]
   143c4:	ldrd	r8, [sp, #16]
   143c8:	add	sp, sp, #24
   143cc:	pop	{pc}		; (ldr pc, [sp], #4)
   143d0:	ldr	r2, [r5, #28]
   143d4:	mov	r0, #1
   143d8:	add	r1, r5, #60	; 0x3c
   143dc:	mov	r3, r0
   143e0:	str	r0, [sp]
   143e4:	ldr	r9, [r5, #48]	; 0x30
   143e8:	add	r2, r2, r0
   143ec:	ldr	r0, [r5, #40]	; 0x28
   143f0:	add	r2, r2, ip
   143f4:	blx	r9
   143f8:	cmp	r0, #0
   143fc:	bne	14434 <flatcc_builder_append_vector@@Base+0x118>
   14400:	ldr	r1, [r5, #28]
   14404:	ldr	r3, [r5, #60]	; 0x3c
   14408:	ldr	r2, [r5, #64]	; 0x40
   1440c:	add	r3, r3, r1
   14410:	sub	r2, r2, r1
   14414:	mvn	r1, #3
   14418:	str	r3, [r5, #16]
   1441c:	cmn	r2, #4
   14420:	mvnhi	r2, #3
   14424:	str	r2, [r5, #24]
   14428:	ldr	r2, [r5, #32]
   1442c:	str	r1, [r2, #4]
   14430:	b	14398 <flatcc_builder_append_vector@@Base+0x7c>
   14434:	mov	r3, r4
   14438:	b	143b4 <flatcc_builder_append_vector@@Base+0x98>
   1443c:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>
   14440:	movw	r1, #38640	; 0x96f0
   14444:	movt	r1, #1
   14448:	ldr	r3, [pc, #12]	; 1445c <flatcc_builder_append_vector@@Base+0x140>
   1444c:	movw	r0, #39004	; 0x985c
   14450:	movt	r0, #1
   14454:	movw	r2, #915	; 0x393
   14458:	bl	12044 <__assert_fail@plt>
   1445c:	andeq	r9, r1, ip, lsr r3

00014460 <flatcc_builder_extend_offset_vector@@Base>:
   14460:	ldr	ip, [r0, #32]
   14464:	strd	r4, [sp, #-20]!	; 0xffffffec
   14468:	mov	r4, r0
   1446c:	ldr	r3, [ip, #20]
   14470:	strd	r6, [sp, #8]
   14474:	str	lr, [sp, #16]
   14478:	sub	sp, sp, #12
   1447c:	adds	r3, r1, r3
   14480:	movcs	r2, #1
   14484:	movcc	r2, #0
   14488:	cmn	r3, #-1073741823	; 0xc0000001
   1448c:	movls	r0, #0
   14490:	movhi	r0, #1
   14494:	orrs	r5, r2, r0
   14498:	bne	14540 <flatcc_builder_extend_offset_vector@@Base+0xe0>
   1449c:	ldr	r6, [r4, #20]
   144a0:	str	r3, [ip, #20]
   144a4:	ldr	r3, [r4, #24]
   144a8:	add	r2, r6, r1, lsl #2
   144ac:	cmp	r2, r3
   144b0:	str	r2, [r4, #20]
   144b4:	bcs	144d4 <flatcc_builder_extend_offset_vector@@Base+0x74>
   144b8:	ldr	r0, [r4, #16]
   144bc:	add	r0, r0, r6
   144c0:	add	sp, sp, #12
   144c4:	ldrd	r4, [sp]
   144c8:	ldrd	r6, [sp, #8]
   144cc:	add	sp, sp, #16
   144d0:	pop	{pc}		; (ldr pc, [sp], #4)
   144d4:	ldr	ip, [r4, #28]
   144d8:	mov	r0, #1
   144dc:	add	r1, r4, #60	; 0x3c
   144e0:	mov	r3, r0
   144e4:	str	r0, [sp]
   144e8:	ldr	r7, [r4, #48]	; 0x30
   144ec:	add	ip, ip, r0
   144f0:	ldr	r0, [r4, #40]	; 0x28
   144f4:	add	r2, ip, r2
   144f8:	blx	r7
   144fc:	cmp	r0, #0
   14500:	bne	14538 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   14504:	ldr	r2, [r4, #28]
   14508:	ldr	r0, [r4, #60]	; 0x3c
   1450c:	ldr	r3, [r4, #64]	; 0x40
   14510:	add	r0, r0, r2
   14514:	sub	r3, r3, r2
   14518:	mvn	r2, #3
   1451c:	str	r0, [r4, #16]
   14520:	cmn	r3, #4
   14524:	mvnhi	r3, #3
   14528:	str	r3, [r4, #24]
   1452c:	ldr	r3, [r4, #32]
   14530:	str	r2, [r3, #4]
   14534:	b	144bc <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14538:	mov	r0, r5
   1453c:	b	144c0 <flatcc_builder_extend_offset_vector@@Base+0x60>
   14540:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>

00014544 <flatcc_builder_offset_vector_push@@Base>:
   14544:	ldr	r2, [r0, #32]
   14548:	strd	r4, [sp, #-20]!	; 0xffffffec
   1454c:	ldrh	r3, [r2, #14]
   14550:	strd	r6, [sp, #8]
   14554:	str	lr, [sp, #16]
   14558:	sub	sp, sp, #12
   1455c:	cmp	r3, #5
   14560:	bne	14624 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14564:	ldr	r3, [r2, #20]
   14568:	cmn	r3, #-1073741823	; 0xc0000001
   1456c:	beq	1461c <flatcc_builder_offset_vector_push@@Base+0xd8>
   14570:	ldr	r5, [r0, #20]
   14574:	mov	r6, r1
   14578:	add	r3, r3, #1
   1457c:	mov	r4, r0
   14580:	ldr	r1, [r0, #24]
   14584:	str	r3, [r2, #20]
   14588:	add	r3, r5, #4
   1458c:	cmp	r3, r1
   14590:	str	r3, [r0, #20]
   14594:	bcs	145b8 <flatcc_builder_offset_vector_push@@Base+0x74>
   14598:	ldr	r3, [r0, #16]
   1459c:	adds	r0, r3, r5
   145a0:	strne	r6, [r3, r5]
   145a4:	add	sp, sp, #12
   145a8:	ldrd	r4, [sp]
   145ac:	ldrd	r6, [sp, #8]
   145b0:	add	sp, sp, #16
   145b4:	pop	{pc}		; (ldr pc, [sp], #4)
   145b8:	ldr	r2, [r4, #28]
   145bc:	mov	r0, #1
   145c0:	add	r1, r4, #60	; 0x3c
   145c4:	mov	r3, r0
   145c8:	str	r0, [sp]
   145cc:	ldr	r0, [r4, #40]	; 0x28
   145d0:	add	r2, r5, r2
   145d4:	ldr	r7, [r4, #48]	; 0x30
   145d8:	add	r2, r2, #5
   145dc:	blx	r7
   145e0:	cmp	r0, #0
   145e4:	bne	1461c <flatcc_builder_offset_vector_push@@Base+0xd8>
   145e8:	ldr	r1, [r4, #28]
   145ec:	ldr	r3, [r4, #60]	; 0x3c
   145f0:	ldr	r2, [r4, #64]	; 0x40
   145f4:	add	r3, r3, r1
   145f8:	sub	r2, r2, r1
   145fc:	mvn	r1, #3
   14600:	str	r3, [r4, #16]
   14604:	cmn	r2, #4
   14608:	mvnhi	r2, #3
   1460c:	str	r2, [r4, #24]
   14610:	ldr	r2, [r4, #32]
   14614:	str	r1, [r2, #4]
   14618:	b	1459c <flatcc_builder_offset_vector_push@@Base+0x58>
   1461c:	mov	r0, #0
   14620:	b	145a4 <flatcc_builder_offset_vector_push@@Base+0x60>
   14624:	movw	r1, #38640	; 0x96f0
   14628:	movt	r1, #1
   1462c:	ldr	r3, [pc, #12]	; 14640 <flatcc_builder_offset_vector_push@@Base+0xfc>
   14630:	movw	r0, #39112	; 0x98c8
   14634:	movt	r0, #1
   14638:	movw	r2, #934	; 0x3a6
   1463c:	bl	12044 <__assert_fail@plt>
   14640:	andeq	r9, r1, ip, asr r3

00014644 <flatcc_builder_append_offset_vector@@Base>:
   14644:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14648:	mov	r5, r0
   1464c:	ldr	r0, [r0, #32]
   14650:	ldrh	r3, [r0, #14]
   14654:	strd	r6, [sp, #8]
   14658:	strd	r8, [sp, #16]
   1465c:	str	lr, [sp, #24]
   14660:	sub	sp, sp, #12
   14664:	cmp	r3, #5
   14668:	bne	14760 <flatcc_builder_append_offset_vector@@Base+0x11c>
   1466c:	ldr	r3, [r0, #20]
   14670:	mov	r7, r1
   14674:	adds	r1, r2, r3
   14678:	movcs	r4, #1
   1467c:	movcc	r4, #0
   14680:	cmn	r1, #-1073741823	; 0xc0000001
   14684:	movls	r3, #0
   14688:	movhi	r3, #1
   1468c:	orrs	r4, r4, r3
   14690:	bne	1475c <flatcc_builder_append_offset_vector@@Base+0x118>
   14694:	ldr	r8, [r5, #20]
   14698:	lsl	r6, r2, #2
   1469c:	ldr	r3, [r5, #24]
   146a0:	str	r1, [r0, #20]
   146a4:	add	ip, r6, r8
   146a8:	cmp	ip, r3
   146ac:	str	ip, [r5, #20]
   146b0:	bcs	146f0 <flatcc_builder_append_offset_vector@@Base+0xac>
   146b4:	ldr	r3, [r5, #16]
   146b8:	adds	r3, r3, r8
   146bc:	beq	146d4 <flatcc_builder_append_offset_vector@@Base+0x90>
   146c0:	mov	r0, r3
   146c4:	mov	r2, r6
   146c8:	mov	r1, r7
   146cc:	bl	11f90 <memcpy@plt>
   146d0:	mov	r3, r0
   146d4:	mov	r0, r3
   146d8:	add	sp, sp, #12
   146dc:	ldrd	r4, [sp]
   146e0:	ldrd	r6, [sp, #8]
   146e4:	ldrd	r8, [sp, #16]
   146e8:	add	sp, sp, #24
   146ec:	pop	{pc}		; (ldr pc, [sp], #4)
   146f0:	ldr	r2, [r5, #28]
   146f4:	mov	r0, #1
   146f8:	add	r1, r5, #60	; 0x3c
   146fc:	mov	r3, r0
   14700:	str	r0, [sp]
   14704:	ldr	r9, [r5, #48]	; 0x30
   14708:	add	r2, r2, r0
   1470c:	ldr	r0, [r5, #40]	; 0x28
   14710:	add	r2, r2, ip
   14714:	blx	r9
   14718:	cmp	r0, #0
   1471c:	bne	14754 <flatcc_builder_append_offset_vector@@Base+0x110>
   14720:	ldr	r1, [r5, #28]
   14724:	ldr	r3, [r5, #60]	; 0x3c
   14728:	ldr	r2, [r5, #64]	; 0x40
   1472c:	add	r3, r3, r1
   14730:	sub	r2, r2, r1
   14734:	mvn	r1, #3
   14738:	str	r3, [r5, #16]
   1473c:	cmn	r2, #4
   14740:	mvnhi	r2, #3
   14744:	str	r2, [r5, #24]
   14748:	ldr	r2, [r5, #32]
   1474c:	str	r1, [r2, #4]
   14750:	b	146b8 <flatcc_builder_append_offset_vector@@Base+0x74>
   14754:	mov	r3, r4
   14758:	b	146d4 <flatcc_builder_append_offset_vector@@Base+0x90>
   1475c:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>
   14760:	movw	r1, #38640	; 0x96f0
   14764:	movt	r1, #1
   14768:	ldr	r3, [pc, #12]	; 1477c <flatcc_builder_append_offset_vector@@Base+0x138>
   1476c:	movw	r0, #39112	; 0x98c8
   14770:	movt	r0, #1
   14774:	mov	r2, #948	; 0x3b4
   14778:	bl	12044 <__assert_fail@plt>
   1477c:	andeq	r9, r1, r0, lsl #7

00014780 <flatcc_builder_extend_string@@Base>:
   14780:	ldr	r2, [r0, #32]
   14784:	strd	r4, [sp, #-16]!
   14788:	ldrh	r3, [r2, #14]
   1478c:	str	r6, [sp, #8]
   14790:	str	lr, [sp, #12]
   14794:	sub	sp, sp, #8
   14798:	cmp	r3, #6
   1479c:	bne	14858 <flatcc_builder_extend_string@@Base+0xd8>
   147a0:	ldr	r3, [r2, #20]
   147a4:	adds	r3, r1, r3
   147a8:	bcs	14854 <flatcc_builder_extend_string@@Base+0xd4>
   147ac:	ldr	r5, [r0, #20]
   147b0:	mov	r4, r0
   147b4:	str	r3, [r2, #20]
   147b8:	ldr	r3, [r0, #24]
   147bc:	add	r2, r1, r5
   147c0:	cmp	r2, r3
   147c4:	str	r2, [r0, #20]
   147c8:	bcs	147e8 <flatcc_builder_extend_string@@Base+0x68>
   147cc:	ldr	r0, [r0, #16]
   147d0:	add	r0, r0, r5
   147d4:	add	sp, sp, #8
   147d8:	ldrd	r4, [sp]
   147dc:	ldr	r6, [sp, #8]
   147e0:	add	sp, sp, #12
   147e4:	pop	{pc}		; (ldr pc, [sp], #4)
   147e8:	ldr	ip, [r4, #28]
   147ec:	mov	r0, #1
   147f0:	add	r1, r4, #60	; 0x3c
   147f4:	mov	r3, r0
   147f8:	str	r0, [sp]
   147fc:	ldr	r6, [r4, #48]	; 0x30
   14800:	add	ip, ip, r0
   14804:	ldr	r0, [r4, #40]	; 0x28
   14808:	add	r2, ip, r2
   1480c:	blx	r6
   14810:	cmp	r0, #0
   14814:	bne	1484c <flatcc_builder_extend_string@@Base+0xcc>
   14818:	ldr	r2, [r4, #28]
   1481c:	ldr	r0, [r4, #60]	; 0x3c
   14820:	ldr	r3, [r4, #64]	; 0x40
   14824:	add	r0, r0, r2
   14828:	sub	r3, r3, r2
   1482c:	mvn	r2, #3
   14830:	str	r0, [r4, #16]
   14834:	cmn	r3, #4
   14838:	mvnhi	r3, #3
   1483c:	str	r3, [r4, #24]
   14840:	ldr	r3, [r4, #32]
   14844:	str	r2, [r3, #4]
   14848:	b	147d0 <flatcc_builder_extend_string@@Base+0x50>
   1484c:	mov	r0, #0
   14850:	b	147d4 <flatcc_builder_extend_string@@Base+0x54>
   14854:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>
   14858:	movw	r1, #38640	; 0x96f0
   1485c:	movt	r1, #1
   14860:	ldr	r3, [pc, #12]	; 14874 <flatcc_builder_extend_string@@Base+0xf4>
   14864:	movw	r0, #38768	; 0x9770
   14868:	movt	r0, #1
   1486c:	movw	r2, #957	; 0x3bd
   14870:	bl	12044 <__assert_fail@plt>
   14874:	andeq	r9, r1, r4, lsr #7

00014878 <flatcc_builder_append_string@@Base>:
   14878:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1487c:	strd	r6, [sp, #8]
   14880:	mov	r6, r1
   14884:	ldr	r1, [r0, #32]
   14888:	str	r8, [sp, #16]
   1488c:	str	lr, [sp, #20]
   14890:	sub	sp, sp, #8
   14894:	ldrh	r3, [r1, #14]
   14898:	cmp	r3, #6
   1489c:	bne	1497c <flatcc_builder_append_string@@Base+0x104>
   148a0:	ldr	r3, [r1, #20]
   148a4:	mov	r5, r2
   148a8:	adds	r3, r2, r3
   148ac:	bcs	14978 <flatcc_builder_append_string@@Base+0x100>
   148b0:	ldr	r7, [r0, #20]
   148b4:	mov	r4, r0
   148b8:	str	r3, [r1, #20]
   148bc:	ldr	r3, [r0, #24]
   148c0:	add	ip, r2, r7
   148c4:	cmp	ip, r3
   148c8:	str	ip, [r0, #20]
   148cc:	bcs	1490c <flatcc_builder_append_string@@Base+0x94>
   148d0:	ldr	r3, [r0, #16]
   148d4:	adds	r3, r3, r7
   148d8:	beq	148f0 <flatcc_builder_append_string@@Base+0x78>
   148dc:	mov	r0, r3
   148e0:	mov	r2, r5
   148e4:	mov	r1, r6
   148e8:	bl	11f90 <memcpy@plt>
   148ec:	mov	r3, r0
   148f0:	mov	r0, r3
   148f4:	add	sp, sp, #8
   148f8:	ldrd	r4, [sp]
   148fc:	ldrd	r6, [sp, #8]
   14900:	ldr	r8, [sp, #16]
   14904:	add	sp, sp, #20
   14908:	pop	{pc}		; (ldr pc, [sp], #4)
   1490c:	ldr	r2, [r4, #28]
   14910:	mov	r0, #1
   14914:	add	r1, r4, #60	; 0x3c
   14918:	mov	r3, r0
   1491c:	str	r0, [sp]
   14920:	ldr	r8, [r4, #48]	; 0x30
   14924:	add	r2, r2, r0
   14928:	ldr	r0, [r4, #40]	; 0x28
   1492c:	add	r2, r2, ip
   14930:	blx	r8
   14934:	cmp	r0, #0
   14938:	bne	14970 <flatcc_builder_append_string@@Base+0xf8>
   1493c:	ldr	r1, [r4, #28]
   14940:	ldr	r3, [r4, #60]	; 0x3c
   14944:	ldr	r2, [r4, #64]	; 0x40
   14948:	add	r3, r3, r1
   1494c:	sub	r2, r2, r1
   14950:	mvn	r1, #3
   14954:	str	r3, [r4, #16]
   14958:	cmn	r2, #4
   1495c:	mvnhi	r2, #3
   14960:	str	r2, [r4, #24]
   14964:	ldr	r2, [r4, #32]
   14968:	str	r1, [r2, #4]
   1496c:	b	148d4 <flatcc_builder_append_string@@Base+0x5c>
   14970:	mov	r3, #0
   14974:	b	148f0 <flatcc_builder_append_string@@Base+0x78>
   14978:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>
   1497c:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x214>

00014980 <flatcc_builder_append_string_str@@Base>:
   14980:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14984:	mov	r4, r0
   14988:	mov	r0, r1
   1498c:	strd	r6, [sp, #8]
   14990:	mov	r6, r1
   14994:	str	r8, [sp, #16]
   14998:	str	lr, [sp, #20]
   1499c:	sub	sp, sp, #8
   149a0:	bl	11ffc <strlen@plt>
   149a4:	ldr	r2, [r4, #32]
   149a8:	ldrh	r3, [r2, #14]
   149ac:	cmp	r3, #6
   149b0:	bne	14a8c <flatcc_builder_append_string_str@@Base+0x10c>
   149b4:	ldr	r3, [r2, #20]
   149b8:	mov	r5, r0
   149bc:	adds	r3, r0, r3
   149c0:	bcs	14a88 <flatcc_builder_append_string_str@@Base+0x108>
   149c4:	ldr	r7, [r4, #20]
   149c8:	str	r3, [r2, #20]
   149cc:	ldr	r3, [r4, #24]
   149d0:	add	ip, r0, r7
   149d4:	cmp	ip, r3
   149d8:	str	ip, [r4, #20]
   149dc:	bcs	14a1c <flatcc_builder_append_string_str@@Base+0x9c>
   149e0:	ldr	r3, [r4, #16]
   149e4:	adds	r3, r3, r7
   149e8:	beq	14a00 <flatcc_builder_append_string_str@@Base+0x80>
   149ec:	mov	r0, r3
   149f0:	mov	r2, r5
   149f4:	mov	r1, r6
   149f8:	bl	11f90 <memcpy@plt>
   149fc:	mov	r3, r0
   14a00:	mov	r0, r3
   14a04:	add	sp, sp, #8
   14a08:	ldrd	r4, [sp]
   14a0c:	ldrd	r6, [sp, #8]
   14a10:	ldr	r8, [sp, #16]
   14a14:	add	sp, sp, #20
   14a18:	pop	{pc}		; (ldr pc, [sp], #4)
   14a1c:	ldr	r2, [r4, #28]
   14a20:	mov	r0, #1
   14a24:	add	r1, r4, #60	; 0x3c
   14a28:	mov	r3, r0
   14a2c:	str	r0, [sp]
   14a30:	ldr	r8, [r4, #48]	; 0x30
   14a34:	add	r2, r2, r0
   14a38:	ldr	r0, [r4, #40]	; 0x28
   14a3c:	add	r2, r2, ip
   14a40:	blx	r8
   14a44:	cmp	r0, #0
   14a48:	bne	14a80 <flatcc_builder_append_string_str@@Base+0x100>
   14a4c:	ldr	r1, [r4, #28]
   14a50:	ldr	r3, [r4, #60]	; 0x3c
   14a54:	ldr	r2, [r4, #64]	; 0x40
   14a58:	add	r3, r3, r1
   14a5c:	sub	r2, r2, r1
   14a60:	mvn	r1, #3
   14a64:	str	r3, [r4, #16]
   14a68:	cmn	r2, #4
   14a6c:	mvnhi	r2, #3
   14a70:	str	r2, [r4, #24]
   14a74:	ldr	r2, [r4, #32]
   14a78:	str	r1, [r2, #4]
   14a7c:	b	149e4 <flatcc_builder_append_string_str@@Base+0x64>
   14a80:	mov	r3, #0
   14a84:	b	14a00 <flatcc_builder_append_string_str@@Base+0x80>
   14a88:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>
   14a8c:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x214>

00014a90 <flatcc_builder_append_string_strn@@Base>:
   14a90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a94:	mov	r4, r0
   14a98:	mov	r5, r2
   14a9c:	strd	r6, [sp, #8]
   14aa0:	mov	r6, r1
   14aa4:	mov	r1, #0
   14aa8:	mov	r0, r6
   14aac:	str	r8, [sp, #16]
   14ab0:	str	lr, [sp, #20]
   14ab4:	sub	sp, sp, #8
   14ab8:	bl	12020 <memchr@plt>
   14abc:	ldr	r2, [r4, #32]
   14ac0:	cmp	r0, #0
   14ac4:	subne	r5, r0, r6
   14ac8:	ldrh	r3, [r2, #14]
   14acc:	cmp	r3, #6
   14ad0:	bne	14ba8 <flatcc_builder_append_string_strn@@Base+0x118>
   14ad4:	ldr	r3, [r2, #20]
   14ad8:	adds	r3, r5, r3
   14adc:	bcs	14ba4 <flatcc_builder_append_string_strn@@Base+0x114>
   14ae0:	ldr	r7, [r4, #20]
   14ae4:	str	r3, [r2, #20]
   14ae8:	ldr	r3, [r4, #24]
   14aec:	add	ip, r5, r7
   14af0:	cmp	ip, r3
   14af4:	str	ip, [r4, #20]
   14af8:	bcs	14b38 <flatcc_builder_append_string_strn@@Base+0xa8>
   14afc:	ldr	r3, [r4, #16]
   14b00:	adds	r3, r3, r7
   14b04:	beq	14b1c <flatcc_builder_append_string_strn@@Base+0x8c>
   14b08:	mov	r0, r3
   14b0c:	mov	r2, r5
   14b10:	mov	r1, r6
   14b14:	bl	11f90 <memcpy@plt>
   14b18:	mov	r3, r0
   14b1c:	mov	r0, r3
   14b20:	add	sp, sp, #8
   14b24:	ldrd	r4, [sp]
   14b28:	ldrd	r6, [sp, #8]
   14b2c:	ldr	r8, [sp, #16]
   14b30:	add	sp, sp, #20
   14b34:	pop	{pc}		; (ldr pc, [sp], #4)
   14b38:	ldr	r2, [r4, #28]
   14b3c:	mov	r0, #1
   14b40:	add	r1, r4, #60	; 0x3c
   14b44:	mov	r3, r0
   14b48:	str	r0, [sp]
   14b4c:	ldr	r8, [r4, #48]	; 0x30
   14b50:	add	r2, r2, r0
   14b54:	ldr	r0, [r4, #40]	; 0x28
   14b58:	add	r2, r2, ip
   14b5c:	blx	r8
   14b60:	cmp	r0, #0
   14b64:	bne	14b9c <flatcc_builder_append_string_strn@@Base+0x10c>
   14b68:	ldr	r1, [r4, #28]
   14b6c:	ldr	r3, [r4, #60]	; 0x3c
   14b70:	ldr	r2, [r4, #64]	; 0x40
   14b74:	add	r3, r3, r1
   14b78:	sub	r2, r2, r1
   14b7c:	mvn	r1, #3
   14b80:	str	r3, [r4, #16]
   14b84:	cmn	r2, #4
   14b88:	mvnhi	r2, #3
   14b8c:	str	r2, [r4, #24]
   14b90:	ldr	r2, [r4, #32]
   14b94:	str	r1, [r2, #4]
   14b98:	b	14b00 <flatcc_builder_append_string_strn@@Base+0x70>
   14b9c:	mov	r3, #0
   14ba0:	b	14b1c <flatcc_builder_append_string_strn@@Base+0x8c>
   14ba4:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>
   14ba8:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x214>

00014bac <flatcc_builder_truncate_vector@@Base>:
   14bac:	mov	r3, r0
   14bb0:	ldr	r0, [r0, #32]
   14bb4:	str	r4, [sp, #-8]!
   14bb8:	ldrh	r2, [r0, #14]
   14bbc:	str	lr, [sp, #4]
   14bc0:	cmp	r2, #4
   14bc4:	bne	14c14 <flatcc_builder_truncate_vector@@Base+0x68>
   14bc8:	mov	lr, r1
   14bcc:	ldr	r1, [r0, #20]
   14bd0:	cmp	r1, lr
   14bd4:	bcc	14c30 <flatcc_builder_truncate_vector@@Base+0x84>
   14bd8:	ldr	r2, [r0, #16]
   14bdc:	sub	ip, r1, lr
   14be0:	mov	r1, #0
   14be4:	str	ip, [r0, #20]
   14be8:	ldr	r0, [r3, #16]
   14bec:	ldr	ip, [r3, #20]
   14bf0:	mul	r2, r2, lr
   14bf4:	sub	ip, ip, r2
   14bf8:	add	r0, r0, ip
   14bfc:	str	ip, [r3, #20]
   14c00:	bl	12014 <memset@plt>
   14c04:	ldr	r4, [sp]
   14c08:	add	sp, sp, #4
   14c0c:	mov	r0, #0
   14c10:	pop	{pc}		; (ldr pc, [sp], #4)
   14c14:	movw	r1, #38640	; 0x96f0
   14c18:	movt	r1, #1
   14c1c:	ldr	r3, [pc, #40]	; 14c4c <flatcc_builder_truncate_vector@@Base+0xa0>
   14c20:	movw	r0, #39004	; 0x985c
   14c24:	movt	r0, #1
   14c28:	movw	r2, #985	; 0x3d9
   14c2c:	bl	12044 <__assert_fail@plt>
   14c30:	movw	r1, #38640	; 0x96f0
   14c34:	movt	r1, #1
   14c38:	ldr	r3, [pc, #12]	; 14c4c <flatcc_builder_truncate_vector@@Base+0xa0>
   14c3c:	movw	r0, #39164	; 0x98fc
   14c40:	movt	r0, #1
   14c44:	movw	r2, #986	; 0x3da
   14c48:	bl	12044 <__assert_fail@plt>
   14c4c:	andeq	r9, r1, r4, asr #7

00014c50 <flatcc_builder_truncate_offset_vector@@Base>:
   14c50:	mov	r3, r0
   14c54:	ldr	r0, [r0, #32]
   14c58:	str	r4, [sp, #-8]!
   14c5c:	ldrh	r2, [r0, #14]
   14c60:	str	lr, [sp, #4]
   14c64:	cmp	r2, #5
   14c68:	bne	14cb8 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   14c6c:	mov	lr, r1
   14c70:	ldr	r1, [r0, #20]
   14c74:	cmp	r1, lr
   14c78:	bcc	14cd4 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   14c7c:	ldr	r2, [r0, #16]
   14c80:	sub	ip, r1, lr
   14c84:	mov	r1, #0
   14c88:	str	ip, [r0, #20]
   14c8c:	ldr	r0, [r3, #16]
   14c90:	ldr	ip, [r3, #20]
   14c94:	mul	r2, r2, lr
   14c98:	sub	ip, ip, r2
   14c9c:	add	r0, r0, ip
   14ca0:	str	ip, [r3, #20]
   14ca4:	bl	12014 <memset@plt>
   14ca8:	ldr	r4, [sp]
   14cac:	add	sp, sp, #4
   14cb0:	mov	r0, #0
   14cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cb8:	movw	r1, #38640	; 0x96f0
   14cbc:	movt	r1, #1
   14cc0:	ldr	r3, [pc, #40]	; 14cf0 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   14cc4:	movw	r0, #39112	; 0x98c8
   14cc8:	movt	r0, #1
   14ccc:	movw	r2, #994	; 0x3e2
   14cd0:	bl	12044 <__assert_fail@plt>
   14cd4:	movw	r1, #38640	; 0x96f0
   14cd8:	movt	r1, #1
   14cdc:	ldr	r3, [pc, #12]	; 14cf0 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   14ce0:	movw	r0, #39200	; 0x9920
   14ce4:	movt	r0, #1
   14ce8:	movw	r2, #995	; 0x3e3
   14cec:	bl	12044 <__assert_fail@plt>
   14cf0:	andeq	r9, r1, r4, ror #7

00014cf4 <flatcc_builder_truncate_string@@Base>:
   14cf4:	str	r4, [sp, #-8]!
   14cf8:	str	lr, [sp, #4]
   14cfc:	ldr	lr, [r0, #32]
   14d00:	ldrh	r2, [lr, #14]
   14d04:	cmp	r2, #6
   14d08:	bne	14d58 <flatcc_builder_truncate_string@@Base+0x64>
   14d0c:	ldr	r2, [lr, #20]
   14d10:	mov	ip, r1
   14d14:	cmp	r2, r1
   14d18:	bcc	14d74 <flatcc_builder_truncate_string@@Base+0x80>
   14d1c:	sub	r1, r2, r1
   14d20:	mov	r3, r0
   14d24:	ldr	r0, [r0, #16]
   14d28:	mov	r2, ip
   14d2c:	str	r1, [lr, #20]
   14d30:	mov	r1, #0
   14d34:	ldr	lr, [r3, #20]
   14d38:	sub	ip, lr, ip
   14d3c:	add	r0, r0, ip
   14d40:	str	ip, [r3, #20]
   14d44:	bl	12014 <memset@plt>
   14d48:	ldr	r4, [sp]
   14d4c:	add	sp, sp, #4
   14d50:	mov	r0, #0
   14d54:	pop	{pc}		; (ldr pc, [sp], #4)
   14d58:	movw	r1, #38640	; 0x96f0
   14d5c:	movt	r1, #1
   14d60:	ldr	r3, [pc, #40]	; 14d90 <flatcc_builder_truncate_string@@Base+0x9c>
   14d64:	movw	r0, #38768	; 0x9770
   14d68:	movt	r0, #1
   14d6c:	movw	r2, #1003	; 0x3eb
   14d70:	bl	12044 <__assert_fail@plt>
   14d74:	movw	r1, #38640	; 0x96f0
   14d78:	movt	r1, #1
   14d7c:	ldr	r3, [pc, #12]	; 14d90 <flatcc_builder_truncate_string@@Base+0x9c>
   14d80:	movw	r0, #39260	; 0x995c
   14d84:	movt	r0, #1
   14d88:	mov	r2, #1004	; 0x3ec
   14d8c:	bl	12044 <__assert_fail@plt>
   14d90:	andeq	r9, r1, ip, lsl #8

00014d94 <flatcc_builder_start_vector@@Base>:
   14d94:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14d98:	mov	r4, r0
   14d9c:	mov	r5, r3
   14da0:	ldr	r0, [r0, #156]	; 0x9c
   14da4:	cmp	r2, #4
   14da8:	ldr	r3, [r4, #160]	; 0xa0
   14dac:	strd	r6, [sp, #8]
   14db0:	movcs	r7, r2
   14db4:	movcc	r7, #4
   14db8:	mov	r6, r1
   14dbc:	strd	r8, [sp, #16]
   14dc0:	add	r2, r0, #1
   14dc4:	str	lr, [sp, #24]
   14dc8:	sub	sp, sp, #12
   14dcc:	cmp	r2, r3
   14dd0:	str	r2, [r4, #156]	; 0x9c
   14dd4:	ble	14ef0 <flatcc_builder_start_vector@@Base+0x15c>
   14dd8:	ldr	r3, [r4, #176]	; 0xb0
   14ddc:	cmp	r3, #0
   14de0:	cmpgt	r2, r3
   14de4:	movgt	r3, #1
   14de8:	movle	r3, #0
   14dec:	bgt	14f00 <flatcc_builder_start_vector@@Base+0x16c>
   14df0:	add	r0, r0, r0, lsl #3
   14df4:	ldr	r1, [r4, #88]	; 0x58
   14df8:	lsl	r8, r0, #2
   14dfc:	add	r2, r8, #36	; 0x24
   14e00:	cmp	r2, r1
   14e04:	bls	14e28 <flatcc_builder_start_vector@@Base+0x94>
   14e08:	mov	ip, #4
   14e0c:	add	r1, r4, #84	; 0x54
   14e10:	ldr	r0, [r4, #40]	; 0x28
   14e14:	str	ip, [sp]
   14e18:	ldr	r9, [r4, #48]	; 0x30
   14e1c:	blx	r9
   14e20:	cmp	r0, #0
   14e24:	bne	14f08 <flatcc_builder_start_vector@@Base+0x174>
   14e28:	ldr	r3, [r4, #84]	; 0x54
   14e2c:	add	r3, r3, r8
   14e30:	cmp	r3, #0
   14e34:	str	r3, [r4, #32]
   14e38:	beq	14f00 <flatcc_builder_start_vector@@Base+0x16c>
   14e3c:	ldr	r2, [r4, #88]	; 0x58
   14e40:	movw	r0, #36409	; 0x8e39
   14e44:	movt	r0, #14563	; 0x38e3
   14e48:	ldr	r1, [r4, #176]	; 0xb0
   14e4c:	umull	r0, r2, r0, r2
   14e50:	lsr	r2, r2, #3
   14e54:	cmp	r1, #0
   14e58:	cmpgt	r2, r1
   14e5c:	movgt	r2, r1
   14e60:	str	r2, [r4, #160]	; 0xa0
   14e64:	ldr	r2, [r4, #20]
   14e68:	mvn	r9, #3
   14e6c:	mov	ip, #0
   14e70:	ldr	r0, [r4, #28]
   14e74:	ldrh	lr, [r4, #130]	; 0x82
   14e78:	ldr	r1, [r4, #64]	; 0x40
   14e7c:	ldr	r8, [r4, #60]	; 0x3c
   14e80:	str	r2, [r3, #8]
   14e84:	add	r2, r2, r0
   14e88:	add	r2, r2, #7
   14e8c:	strh	lr, [r3, #12]
   14e90:	bic	r2, r2, #7
   14e94:	strh	r7, [r4, #130]	; 0x82
   14e98:	mov	r7, #4
   14e9c:	sub	r1, r1, r2
   14ea0:	str	r0, [r3]
   14ea4:	mov	r0, ip
   14ea8:	cmp	r1, r9
   14eac:	add	lr, r8, r2
   14eb0:	str	ip, [r4, #20]
   14eb4:	movhi	r1, r9
   14eb8:	str	r2, [r4, #28]
   14ebc:	strh	r7, [r3, #14]
   14ec0:	str	r6, [r3, #16]
   14ec4:	str	ip, [r3, #20]
   14ec8:	str	r5, [r3, #24]
   14ecc:	str	lr, [r4, #16]
   14ed0:	str	r1, [r4, #24]
   14ed4:	str	r9, [r3, #4]
   14ed8:	add	sp, sp, #12
   14edc:	ldrd	r4, [sp]
   14ee0:	ldrd	r6, [sp, #8]
   14ee4:	ldrd	r8, [sp, #16]
   14ee8:	add	sp, sp, #24
   14eec:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef0:	ldr	r3, [r4, #32]
   14ef4:	add	r3, r3, #36	; 0x24
   14ef8:	str	r3, [r4, #32]
   14efc:	b	14e64 <flatcc_builder_start_vector@@Base+0xd0>
   14f00:	mvn	r0, #0
   14f04:	b	14ed8 <flatcc_builder_start_vector@@Base+0x144>
   14f08:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>

00014f0c <flatcc_builder_start_offset_vector@@Base>:
   14f0c:	ldrd	r2, [r0, #156]	; 0x9c
   14f10:	strd	r4, [sp, #-16]!
   14f14:	mov	r4, r0
   14f18:	str	r6, [sp, #8]
   14f1c:	str	lr, [sp, #12]
   14f20:	sub	sp, sp, #8
   14f24:	add	r1, r2, #1
   14f28:	cmp	r1, r3
   14f2c:	str	r1, [r0, #156]	; 0x9c
   14f30:	ble	15048 <flatcc_builder_start_offset_vector@@Base+0x13c>
   14f34:	ldr	r3, [r0, #176]	; 0xb0
   14f38:	cmp	r3, #0
   14f3c:	cmpgt	r1, r3
   14f40:	movgt	r3, #1
   14f44:	movle	r3, #0
   14f48:	bgt	15058 <flatcc_builder_start_offset_vector@@Base+0x14c>
   14f4c:	add	r2, r2, r2, lsl #3
   14f50:	ldr	r1, [r0, #88]	; 0x58
   14f54:	lsl	r5, r2, #2
   14f58:	add	r2, r5, #36	; 0x24
   14f5c:	cmp	r2, r1
   14f60:	bls	14f84 <flatcc_builder_start_offset_vector@@Base+0x78>
   14f64:	mov	ip, #4
   14f68:	add	r1, r0, #84	; 0x54
   14f6c:	ldr	r0, [r0, #40]	; 0x28
   14f70:	str	ip, [sp]
   14f74:	ldr	r6, [r4, #48]	; 0x30
   14f78:	blx	r6
   14f7c:	cmp	r0, #0
   14f80:	bne	15060 <flatcc_builder_start_offset_vector@@Base+0x154>
   14f84:	ldr	r3, [r4, #84]	; 0x54
   14f88:	add	r3, r3, r5
   14f8c:	cmp	r3, #0
   14f90:	str	r3, [r4, #32]
   14f94:	beq	15058 <flatcc_builder_start_offset_vector@@Base+0x14c>
   14f98:	ldr	r2, [r4, #88]	; 0x58
   14f9c:	movw	r0, #36409	; 0x8e39
   14fa0:	movt	r0, #14563	; 0x38e3
   14fa4:	ldr	r1, [r4, #176]	; 0xb0
   14fa8:	umull	r0, r2, r0, r2
   14fac:	lsr	r2, r2, #3
   14fb0:	cmp	r1, #0
   14fb4:	cmpgt	r2, r1
   14fb8:	movgt	r2, r1
   14fbc:	str	r2, [r4, #160]	; 0xa0
   14fc0:	ldr	r2, [r4, #20]
   14fc4:	mvn	r5, #3
   14fc8:	mov	lr, #0
   14fcc:	ldr	r0, [r4, #28]
   14fd0:	ldrh	r6, [r4, #130]	; 0x82
   14fd4:	ldr	ip, [r4, #60]	; 0x3c
   14fd8:	ldr	r1, [r4, #64]	; 0x40
   14fdc:	str	r2, [r3, #8]
   14fe0:	add	r2, r2, r0
   14fe4:	add	r2, r2, #7
   14fe8:	strh	r6, [r3, #12]
   14fec:	mov	r6, #4
   14ff0:	bic	r2, r2, #7
   14ff4:	add	ip, ip, r2
   14ff8:	strh	r6, [r4, #130]	; 0x82
   14ffc:	sub	r1, r1, r2
   15000:	str	r0, [r3]
   15004:	mov	r0, lr
   15008:	cmp	r1, r5
   1500c:	str	lr, [r4, #20]
   15010:	movhi	r1, r5
   15014:	str	r2, [r4, #28]
   15018:	mov	r2, #5
   1501c:	strh	r2, [r3, #14]
   15020:	str	r6, [r3, #16]
   15024:	str	lr, [r3, #20]
   15028:	str	ip, [r4, #16]
   1502c:	str	r1, [r4, #24]
   15030:	str	r5, [r3, #4]
   15034:	add	sp, sp, #8
   15038:	ldrd	r4, [sp]
   1503c:	ldr	r6, [sp, #8]
   15040:	add	sp, sp, #12
   15044:	pop	{pc}		; (ldr pc, [sp], #4)
   15048:	ldr	r3, [r0, #32]
   1504c:	add	r3, r3, #36	; 0x24
   15050:	str	r3, [r0, #32]
   15054:	b	14fc0 <flatcc_builder_start_offset_vector@@Base+0xb4>
   15058:	mvn	r0, #0
   1505c:	b	15034 <flatcc_builder_start_offset_vector@@Base+0x128>
   15060:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>

00015064 <flatcc_builder_create_offset_vector@@Base>:
   15064:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15068:	mov	r5, r2
   1506c:	mov	r4, r0
   15070:	ldr	r3, [r0, #160]	; 0xa0
   15074:	strd	r6, [sp, #8]
   15078:	mov	r6, r1
   1507c:	ldr	r1, [r0, #156]	; 0x9c
   15080:	strd	r8, [sp, #16]
   15084:	str	lr, [sp, #24]
   15088:	sub	sp, sp, #12
   1508c:	add	r2, r1, #1
   15090:	cmp	r2, r3
   15094:	str	r2, [r0, #156]	; 0x9c
   15098:	ble	15210 <flatcc_builder_create_offset_vector@@Base+0x1ac>
   1509c:	ldr	r3, [r0, #176]	; 0xb0
   150a0:	cmp	r2, r3
   150a4:	cmpgt	r3, #0
   150a8:	movgt	r3, #1
   150ac:	movle	r3, #0
   150b0:	bgt	151f0 <flatcc_builder_create_offset_vector@@Base+0x18c>
   150b4:	add	r1, r1, r1, lsl #3
   150b8:	ldr	r0, [r0, #88]	; 0x58
   150bc:	lsl	r7, r1, #2
   150c0:	add	r2, r7, #36	; 0x24
   150c4:	cmp	r2, r0
   150c8:	bls	150ec <flatcc_builder_create_offset_vector@@Base+0x88>
   150cc:	mov	ip, #4
   150d0:	add	r1, r4, #84	; 0x54
   150d4:	ldr	r0, [r4, #40]	; 0x28
   150d8:	str	ip, [sp]
   150dc:	ldr	r8, [r4, #48]	; 0x30
   150e0:	blx	r8
   150e4:	cmp	r0, #0
   150e8:	bne	152b4 <flatcc_builder_create_offset_vector@@Base+0x250>
   150ec:	ldr	r3, [r4, #84]	; 0x54
   150f0:	add	r3, r3, r7
   150f4:	cmp	r3, #0
   150f8:	str	r3, [r4, #32]
   150fc:	beq	151f0 <flatcc_builder_create_offset_vector@@Base+0x18c>
   15100:	ldr	r2, [r4, #88]	; 0x58
   15104:	movw	r0, #36409	; 0x8e39
   15108:	movt	r0, #14563	; 0x38e3
   1510c:	ldr	r1, [r4, #176]	; 0xb0
   15110:	umull	r0, r2, r0, r2
   15114:	lsr	r2, r2, #3
   15118:	cmp	r2, r1
   1511c:	cmpgt	r1, #0
   15120:	movgt	r2, r1
   15124:	str	r2, [r4, #160]	; 0xa0
   15128:	ldr	r2, [r4, #20]
   1512c:	mvn	lr, #3
   15130:	mov	r0, #4
   15134:	ldr	r8, [r4, #28]
   15138:	ldrh	r7, [r4, #130]	; 0x82
   1513c:	ldr	r1, [r4, #64]	; 0x40
   15140:	ldr	r9, [r4, #60]	; 0x3c
   15144:	str	r2, [r3, #8]
   15148:	add	r2, r2, r8
   1514c:	add	r2, r2, #7
   15150:	strh	r7, [r3, #12]
   15154:	mov	r7, #0
   15158:	bic	r2, r2, #7
   1515c:	strh	r0, [r4, #130]	; 0x82
   15160:	sub	r1, r1, r2
   15164:	str	r8, [r3]
   15168:	cmp	r1, lr
   1516c:	add	r9, r9, r2
   15170:	str	r7, [r4, #20]
   15174:	movls	ip, r1
   15178:	movhi	ip, lr
   1517c:	str	r2, [r4, #28]
   15180:	mov	r1, #5
   15184:	strh	r1, [r3, #14]
   15188:	mov	r1, r5
   1518c:	str	r0, [r3, #16]
   15190:	mov	r0, r4
   15194:	str	r7, [r3, #20]
   15198:	str	r9, [r4, #16]
   1519c:	str	ip, [r4, #24]
   151a0:	str	lr, [r3, #4]
   151a4:	bl	14460 <flatcc_builder_extend_offset_vector@@Base>
   151a8:	cmp	r0, r7
   151ac:	beq	151f0 <flatcc_builder_create_offset_vector@@Base+0x18c>
   151b0:	lsl	r2, r5, #2
   151b4:	mov	r1, r6
   151b8:	bl	11f90 <memcpy@plt>
   151bc:	ldr	r3, [r4, #32]
   151c0:	ldrh	r2, [r3, #14]
   151c4:	cmp	r2, #5
   151c8:	bne	15298 <flatcc_builder_create_offset_vector@@Base+0x234>
   151cc:	ldr	r2, [r3, #20]
   151d0:	cmn	r2, #-1073741823	; 0xc0000001
   151d4:	bhi	151f0 <flatcc_builder_create_offset_vector@@Base+0x18c>
   151d8:	mov	r3, r7
   151dc:	mov	r0, r4
   151e0:	ldr	r1, [r4, #16]
   151e4:	bl	12cdc <flatcc_builder_default_alloc@@Base+0x388>
   151e8:	subs	r5, r0, #0
   151ec:	bne	15220 <flatcc_builder_create_offset_vector@@Base+0x1bc>
   151f0:	mov	r5, #0
   151f4:	mov	r0, r5
   151f8:	add	sp, sp, #12
   151fc:	ldrd	r4, [sp]
   15200:	ldrd	r6, [sp, #8]
   15204:	ldrd	r8, [sp, #16]
   15208:	add	sp, sp, #24
   1520c:	pop	{pc}		; (ldr pc, [sp], #4)
   15210:	ldr	r3, [r0, #32]
   15214:	add	r3, r3, #36	; 0x24
   15218:	str	r3, [r0, #32]
   1521c:	b	15128 <flatcc_builder_create_offset_vector@@Base+0xc4>
   15220:	mov	r1, r7
   15224:	ldr	r0, [r4, #16]
   15228:	ldr	r2, [r4, #20]
   1522c:	bl	12014 <memset@plt>
   15230:	ldr	r3, [r4, #32]
   15234:	ldr	r0, [r4, #60]	; 0x3c
   15238:	ldr	r2, [r4, #64]	; 0x40
   1523c:	ldr	ip, [r3]
   15240:	ldmib	r3, {r1, lr}
   15244:	add	r0, r0, ip
   15248:	sub	r2, r2, ip
   1524c:	str	r0, [r4, #16]
   15250:	cmp	r2, r1
   15254:	ldrh	r0, [r4, #128]	; 0x80
   15258:	movcs	r2, r1
   1525c:	str	lr, [r4, #20]
   15260:	str	ip, [r4, #28]
   15264:	ldrh	ip, [r4, #130]	; 0x82
   15268:	str	r2, [r4, #24]
   1526c:	ldr	r2, [r4, #156]	; 0x9c
   15270:	str	r1, [r3, #4]
   15274:	cmp	r0, ip
   15278:	sub	r0, r3, #36	; 0x24
   1527c:	strhcc	ip, [r4, #128]	; 0x80
   15280:	ldrh	r1, [r3, #12]
   15284:	sub	r3, r2, #1
   15288:	str	r0, [r4, #32]
   1528c:	strh	r1, [r4, #130]	; 0x82
   15290:	str	r3, [r4, #156]	; 0x9c
   15294:	b	151f4 <flatcc_builder_create_offset_vector@@Base+0x190>
   15298:	movw	r1, #38640	; 0x96f0
   1529c:	movt	r1, #1
   152a0:	ldr	r3, [pc, #16]	; 152b8 <flatcc_builder_create_offset_vector@@Base+0x254>
   152a4:	movw	r0, #39112	; 0x98c8
   152a8:	movt	r0, #1
   152ac:	movw	r2, #1480	; 0x5c8
   152b0:	bl	12044 <__assert_fail@plt>
   152b4:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>
   152b8:	andeq	r9, r1, ip, lsr #8

000152bc <flatcc_builder_start_string@@Base>:
   152bc:	ldrd	r2, [r0, #156]	; 0x9c
   152c0:	strd	r4, [sp, #-16]!
   152c4:	mov	r4, r0
   152c8:	str	r6, [sp, #8]
   152cc:	str	lr, [sp, #12]
   152d0:	sub	sp, sp, #8
   152d4:	add	r1, r2, #1
   152d8:	cmp	r1, r3
   152dc:	str	r1, [r0, #156]	; 0x9c
   152e0:	ble	153f8 <flatcc_builder_start_string@@Base+0x13c>
   152e4:	ldr	r3, [r0, #176]	; 0xb0
   152e8:	cmp	r3, #0
   152ec:	cmpgt	r1, r3
   152f0:	movgt	r3, #1
   152f4:	movle	r3, #0
   152f8:	bgt	15408 <flatcc_builder_start_string@@Base+0x14c>
   152fc:	add	r2, r2, r2, lsl #3
   15300:	ldr	r1, [r0, #88]	; 0x58
   15304:	lsl	r5, r2, #2
   15308:	add	r2, r5, #36	; 0x24
   1530c:	cmp	r2, r1
   15310:	bls	15334 <flatcc_builder_start_string@@Base+0x78>
   15314:	mov	ip, #4
   15318:	add	r1, r0, #84	; 0x54
   1531c:	ldr	r0, [r0, #40]	; 0x28
   15320:	str	ip, [sp]
   15324:	ldr	r6, [r4, #48]	; 0x30
   15328:	blx	r6
   1532c:	cmp	r0, #0
   15330:	bne	15410 <flatcc_builder_start_string@@Base+0x154>
   15334:	ldr	r3, [r4, #84]	; 0x54
   15338:	add	r3, r3, r5
   1533c:	cmp	r3, #0
   15340:	str	r3, [r4, #32]
   15344:	beq	15408 <flatcc_builder_start_string@@Base+0x14c>
   15348:	ldr	r2, [r4, #88]	; 0x58
   1534c:	movw	r0, #36409	; 0x8e39
   15350:	movt	r0, #14563	; 0x38e3
   15354:	ldr	r1, [r4, #176]	; 0xb0
   15358:	umull	r0, r2, r0, r2
   1535c:	lsr	r2, r2, #3
   15360:	cmp	r1, #0
   15364:	cmpgt	r2, r1
   15368:	movgt	r2, r1
   1536c:	str	r2, [r4, #160]	; 0xa0
   15370:	ldr	r2, [r4, #20]
   15374:	mvn	r5, #3
   15378:	mov	lr, #0
   1537c:	ldr	r0, [r4, #28]
   15380:	ldrh	r6, [r4, #130]	; 0x82
   15384:	ldr	ip, [r4, #60]	; 0x3c
   15388:	ldr	r1, [r4, #64]	; 0x40
   1538c:	str	r2, [r3, #8]
   15390:	add	r2, r2, r0
   15394:	add	r2, r2, #7
   15398:	strh	r6, [r3, #12]
   1539c:	mov	r6, #1
   153a0:	bic	r2, r2, #7
   153a4:	add	ip, ip, r2
   153a8:	strh	r6, [r4, #130]	; 0x82
   153ac:	sub	r1, r1, r2
   153b0:	str	r0, [r3]
   153b4:	mov	r0, lr
   153b8:	cmp	r1, r5
   153bc:	str	lr, [r4, #20]
   153c0:	movhi	r1, r5
   153c4:	str	r2, [r4, #28]
   153c8:	mov	r2, #6
   153cc:	strh	r2, [r3, #14]
   153d0:	str	r6, [r3, #16]
   153d4:	str	lr, [r3, #20]
   153d8:	str	ip, [r4, #16]
   153dc:	str	r1, [r4, #24]
   153e0:	str	r5, [r3, #4]
   153e4:	add	sp, sp, #8
   153e8:	ldrd	r4, [sp]
   153ec:	ldr	r6, [sp, #8]
   153f0:	add	sp, sp, #12
   153f4:	pop	{pc}		; (ldr pc, [sp], #4)
   153f8:	ldr	r3, [r0, #32]
   153fc:	add	r3, r3, #36	; 0x24
   15400:	str	r3, [r0, #32]
   15404:	b	15370 <flatcc_builder_start_string@@Base+0xb4>
   15408:	mvn	r0, #0
   1540c:	b	153e4 <flatcc_builder_start_string@@Base+0x128>
   15410:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>

00015414 <flatcc_builder_reserve_table@@Base>:
   15414:	cmp	r1, #0
   15418:	strd	r4, [sp, #-20]!	; 0xffffffec
   1541c:	strd	r6, [sp, #8]
   15420:	str	lr, [sp, #16]
   15424:	sub	sp, sp, #12
   15428:	blt	1550c <flatcc_builder_reserve_table@@Base+0xf8>
   1542c:	ldr	r2, [r0, #32]
   15430:	add	r1, r1, #2
   15434:	mov	r4, r0
   15438:	lsl	r5, r1, #1
   1543c:	ldr	r1, [r0, #56]	; 0x38
   15440:	ldrh	r6, [r2, #28]
   15444:	ldr	r3, [r2, #16]
   15448:	add	r6, r3, r6, lsl #1
   1544c:	add	r2, r6, r5
   15450:	cmp	r2, r1
   15454:	bhi	154bc <flatcc_builder_reserve_table@@Base+0xa8>
   15458:	ldr	r3, [r4, #52]	; 0x34
   1545c:	adds	r3, r3, r6
   15460:	mvneq	r0, #0
   15464:	streq	r3, [r4, #4]
   15468:	beq	154a8 <flatcc_builder_reserve_table@@Base+0x94>
   1546c:	ldr	r2, [r4, #32]
   15470:	add	r3, r3, #4
   15474:	ldr	r1, [r4, #80]	; 0x50
   15478:	ldr	r6, [r2, #20]
   1547c:	str	r3, [r4, #4]
   15480:	add	r2, r5, r6
   15484:	sub	r2, r2, #3
   15488:	cmp	r2, r1
   1548c:	bhi	154e4 <flatcc_builder_reserve_table@@Base+0xd0>
   15490:	ldr	r3, [r4, #76]	; 0x4c
   15494:	add	r3, r3, r6
   15498:	clz	r0, r3
   1549c:	lsr	r0, r0, #5
   154a0:	str	r3, [r4]
   154a4:	rsb	r0, r0, #0
   154a8:	add	sp, sp, #12
   154ac:	ldrd	r4, [sp]
   154b0:	ldrd	r6, [sp, #8]
   154b4:	add	sp, sp, #16
   154b8:	pop	{pc}		; (ldr pc, [sp], #4)
   154bc:	mov	ip, #0
   154c0:	add	r1, r0, #52	; 0x34
   154c4:	ldr	r0, [r0, #40]	; 0x28
   154c8:	mov	r3, #1
   154cc:	str	ip, [sp]
   154d0:	ldr	r7, [r4, #48]	; 0x30
   154d4:	blx	r7
   154d8:	cmp	r0, #0
   154dc:	beq	15458 <flatcc_builder_reserve_table@@Base+0x44>
   154e0:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>
   154e4:	mov	ip, #3
   154e8:	mov	r3, #0
   154ec:	ldr	r0, [r4, #40]	; 0x28
   154f0:	add	r1, r4, #76	; 0x4c
   154f4:	str	ip, [sp]
   154f8:	ldr	r5, [r4, #48]	; 0x30
   154fc:	blx	r5
   15500:	cmp	r0, #0
   15504:	beq	15490 <flatcc_builder_reserve_table@@Base+0x7c>
   15508:	b	154e0 <flatcc_builder_reserve_table@@Base+0xcc>
   1550c:	movw	r1, #38640	; 0x96f0
   15510:	movt	r1, #1
   15514:	ldr	r3, [pc, #12]	; 15528 <flatcc_builder_reserve_table@@Base+0x114>
   15518:	movw	r0, #39296	; 0x9980
   1551c:	movt	r0, #1
   15520:	movw	r2, #1065	; 0x429
   15524:	bl	12044 <__assert_fail@plt>
   15528:	andeq	r9, r1, r0, asr r4

0001552c <flatcc_builder_start_table@@Base>:
   1552c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15530:	mov	r5, r1
   15534:	mov	r1, #4
   15538:	strd	r6, [sp, #8]
   1553c:	mov	r4, r0
   15540:	strd	r8, [sp, #16]
   15544:	str	sl, [sp, #24]
   15548:	str	lr, [sp, #28]
   1554c:	sub	sp, sp, #8
   15550:	bl	12bb8 <flatcc_builder_default_alloc@@Base+0x264>
   15554:	subs	r7, r0, #0
   15558:	bne	156a0 <flatcc_builder_start_table@@Base+0x174>
   1555c:	ldm	r4, {r0, r2}
   15560:	add	r5, r5, #2
   15564:	movw	ip, #15186	; 0x3b52
   15568:	movt	ip, #12137	; 0x2f69
   1556c:	lsl	r5, r5, #1
   15570:	mov	r8, #3
   15574:	ldrh	lr, [r4, #8]
   15578:	ldr	r1, [r4, #52]	; 0x34
   1557c:	ldr	sl, [r4, #76]	; 0x4c
   15580:	ldr	r3, [r4, #32]
   15584:	sub	r2, r2, r1
   15588:	ldr	r9, [r4, #56]	; 0x38
   1558c:	add	r6, r2, lr, lsl #1
   15590:	sub	r0, r0, sl
   15594:	ldr	sl, [r4, #12]
   15598:	str	r2, [r3, #16]
   1559c:	add	r2, r6, r5
   155a0:	str	r0, [r3, #20]
   155a4:	cmp	r2, r9
   155a8:	str	sl, [r3, #24]
   155ac:	strh	lr, [r3, #28]
   155b0:	strh	r7, [r4, #8]
   155b4:	str	ip, [r4, #12]
   155b8:	strh	r8, [r3, #14]
   155bc:	bls	155e4 <flatcc_builder_start_table@@Base+0xb8>
   155c0:	mov	r3, #1
   155c4:	add	r1, r4, #52	; 0x34
   155c8:	str	r7, [sp]
   155cc:	ldr	r0, [r4, #40]	; 0x28
   155d0:	ldr	r8, [r4, #48]	; 0x30
   155d4:	blx	r8
   155d8:	cmp	r0, #0
   155dc:	bne	1569c <flatcc_builder_start_table@@Base+0x170>
   155e0:	ldr	r1, [r4, #52]	; 0x34
   155e4:	adds	r6, r6, r1
   155e8:	streq	r6, [r4, #4]
   155ec:	beq	156a0 <flatcc_builder_start_table@@Base+0x174>
   155f0:	ldr	r1, [r4, #32]
   155f4:	sub	r2, r5, #3
   155f8:	add	r6, r6, #4
   155fc:	ldr	r3, [r4, #80]	; 0x50
   15600:	ldr	r5, [r1, #20]
   15604:	str	r6, [r4, #4]
   15608:	add	r2, r2, r5
   1560c:	cmp	r2, r3
   15610:	bhi	15678 <flatcc_builder_start_table@@Base+0x14c>
   15614:	ldr	r3, [r4, #76]	; 0x4c
   15618:	add	r3, r3, r5
   1561c:	cmp	r3, #0
   15620:	str	r3, [r4]
   15624:	beq	156a0 <flatcc_builder_start_table@@Base+0x174>
   15628:	ldr	r0, [r4, #28]
   1562c:	movw	r2, #65532	; 0xfffc
   15630:	ldr	ip, [r4, #32]
   15634:	ldr	r3, [r4, #64]	; 0x40
   15638:	ldr	r1, [r4, #60]	; 0x3c
   1563c:	sub	r3, r3, r0
   15640:	cmp	r3, r2
   15644:	add	r1, r1, r0
   15648:	movcs	r3, r2
   1564c:	str	r1, [r4, #16]
   15650:	str	r3, [r4, #24]
   15654:	str	r2, [ip, #4]
   15658:	mov	r0, r7
   1565c:	add	sp, sp, #8
   15660:	ldrd	r4, [sp]
   15664:	ldrd	r6, [sp, #8]
   15668:	ldrd	r8, [sp, #16]
   1566c:	ldr	sl, [sp, #24]
   15670:	add	sp, sp, #28
   15674:	pop	{pc}		; (ldr pc, [sp], #4)
   15678:	mov	ip, #3
   1567c:	mov	r3, #0
   15680:	ldr	r0, [r4, #40]	; 0x28
   15684:	add	r1, r4, #76	; 0x4c
   15688:	str	ip, [sp]
   1568c:	ldr	r6, [r4, #48]	; 0x30
   15690:	blx	r6
   15694:	cmp	r0, #0
   15698:	beq	15614 <flatcc_builder_start_table@@Base+0xe8>
   1569c:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>
   156a0:	mvn	r7, #0
   156a4:	b	15658 <flatcc_builder_start_table@@Base+0x12c>

000156a8 <flatcc_builder_create_vtable@@Base>:
   156a8:	strd	r4, [sp, #-16]!
   156ac:	mov	r5, r0
   156b0:	mov	r3, #0
   156b4:	ldr	ip, [r5, #152]	; 0x98
   156b8:	subs	r0, r2, #0
   156bc:	str	r6, [sp, #8]
   156c0:	str	lr, [sp, #12]
   156c4:	sub	sp, sp, #80	; 0x50
   156c8:	str	r3, [sp, #8]
   156cc:	str	r3, [sp, #12]
   156d0:	beq	1574c <flatcc_builder_create_vtable@@Base+0xa4>
   156d4:	mov	r2, #1
   156d8:	cmp	ip, r3
   156dc:	str	r0, [sp, #8]
   156e0:	str	r2, [sp, #12]
   156e4:	str	r1, [sp, #16]
   156e8:	str	r0, [sp, #20]
   156ec:	beq	1577c <flatcc_builder_create_vtable@@Base+0xd4>
   156f0:	ldr	r3, [r5, #136]	; 0x88
   156f4:	sub	r4, r3, r0
   156f8:	cmp	r3, r4
   156fc:	ble	15760 <flatcc_builder_create_vtable@@Base+0xb8>
   15700:	mov	r3, r4
   15704:	mov	r2, #1
   15708:	str	r0, [sp]
   1570c:	add	r1, sp, #16
   15710:	ldr	r0, [r5, #36]	; 0x24
   15714:	ldr	r6, [r5, #44]	; 0x2c
   15718:	blx	r6
   1571c:	cmp	r0, #0
   15720:	bne	157c4 <flatcc_builder_create_vtable@@Base+0x11c>
   15724:	cmp	r4, #0
   15728:	str	r4, [r5, #136]	; 0x88
   1572c:	beq	15734 <flatcc_builder_create_vtable@@Base+0x8c>
   15730:	add	r4, r4, #1
   15734:	mov	r0, r4
   15738:	add	sp, sp, #80	; 0x50
   1573c:	ldrd	r4, [sp]
   15740:	ldr	r6, [sp, #8]
   15744:	add	sp, sp, #12
   15748:	pop	{pc}		; (ldr pc, [sp], #4)
   1574c:	cmp	ip, #0
   15750:	bne	15760 <flatcc_builder_create_vtable@@Base+0xb8>
   15754:	ldr	r2, [r5, #180]	; 0xb4
   15758:	cmp	r2, #0
   1575c:	beq	157bc <flatcc_builder_create_vtable@@Base+0x114>
   15760:	movw	r1, #38640	; 0x96f0
   15764:	movt	r1, #1
   15768:	ldr	r3, [pc, #88]	; 157c8 <flatcc_builder_create_vtable@@Base+0x120>
   1576c:	movw	r0, #38832	; 0x97b0
   15770:	movt	r0, #1
   15774:	movw	r2, #647	; 0x287
   15778:	bl	12044 <__assert_fail@plt>
   1577c:	ldr	r3, [r5, #180]	; 0xb4
   15780:	cmp	r3, #0
   15784:	bne	156f0 <flatcc_builder_create_vtable@@Base+0x48>
   15788:	ldr	r4, [r5, #140]	; 0x8c
   1578c:	mov	ip, r0
   15790:	add	r0, r4, r0
   15794:	str	r0, [r5, #140]	; 0x8c
   15798:	mov	r3, r4
   1579c:	add	r1, sp, #16
   157a0:	str	ip, [sp]
   157a4:	ldr	r0, [r5, #36]	; 0x24
   157a8:	ldr	r5, [r5, #44]	; 0x2c
   157ac:	blx	r5
   157b0:	cmp	r0, #0
   157b4:	beq	15730 <flatcc_builder_create_vtable@@Base+0x88>
   157b8:	bl	12aa0 <flatcc_builder_default_alloc@@Base+0x14c>
   157bc:	ldr	r4, [r5, #140]	; 0x8c
   157c0:	b	15798 <flatcc_builder_create_vtable@@Base+0xf0>
   157c4:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   157c8:	andeq	r8, r1, ip, asr #31

000157cc <flatcc_builder_create_cached_vtable@@Base>:
   157cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157d0:	strd	r6, [sp, #8]
   157d4:	mov	r6, r0
   157d8:	strd	r8, [sp, #16]
   157dc:	mov	r9, r2
   157e0:	mov	r8, r3
   157e4:	strd	sl, [sp, #24]
   157e8:	str	lr, [sp, #32]
   157ec:	sub	sp, sp, #28
   157f0:	str	r1, [sp, #8]
   157f4:	ldr	r1, [r0, #116]	; 0x74
   157f8:	cmp	r1, #0
   157fc:	rsbne	r1, r1, #32
   15800:	beq	15988 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15804:	ldr	sl, [r6, #92]	; 0x5c
   15808:	lsr	r8, r8, r1
   1580c:	adds	fp, sl, r8, lsl #2
   15810:	str	fp, [sp, #12]
   15814:	beq	15a24 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15818:	ldr	r5, [sl, r8, lsl #2]
   1581c:	cmp	r5, #0
   15820:	beq	15a58 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   15824:	mov	r3, #0
   15828:	str	r8, [sp, #16]
   1582c:	mov	r8, fp
   15830:	mov	fp, r6
   15834:	ldr	r7, [r6, #68]	; 0x44
   15838:	str	r3, [sp, #20]
   1583c:	ldr	r3, [r6, #100]	; 0x64
   15840:	mov	r6, r3
   15844:	add	r4, r6, r5
   15848:	ldr	r1, [r4, #8]
   1584c:	ldrh	r2, [r7, r1]
   15850:	add	r1, r7, r1
   15854:	cmp	r2, r9
   15858:	bne	15934 <flatcc_builder_create_cached_vtable@@Base+0x168>
   1585c:	mov	r2, r9
   15860:	ldr	r0, [sp, #8]
   15864:	bl	11f9c <memcmp@plt>
   15868:	cmp	r0, #0
   1586c:	bne	15934 <flatcc_builder_create_cached_vtable@@Base+0x168>
   15870:	ldr	r1, [r4, #4]
   15874:	ldr	r2, [fp, #152]	; 0x98
   15878:	cmp	r1, r2
   1587c:	beq	15940 <flatcc_builder_create_cached_vtable@@Base+0x174>
   15880:	ldr	r5, [r4, #12]
   15884:	add	r8, r4, #12
   15888:	str	r4, [sp, #20]
   1588c:	cmp	r5, #0
   15890:	bne	15844 <flatcc_builder_create_cached_vtable@@Base+0x78>
   15894:	ldr	r8, [sp, #16]
   15898:	mov	r6, fp
   1589c:	ldr	r3, [r6, #104]	; 0x68
   158a0:	ldr	r4, [r6, #124]	; 0x7c
   158a4:	add	r2, r4, #16
   158a8:	cmp	r2, r3
   158ac:	bls	158d4 <flatcc_builder_create_cached_vtable@@Base+0x108>
   158b0:	mov	ip, #6
   158b4:	mov	r3, #0
   158b8:	ldr	r0, [r6, #40]	; 0x28
   158bc:	add	r1, r6, #100	; 0x64
   158c0:	str	ip, [sp]
   158c4:	ldr	r5, [r6, #48]	; 0x30
   158c8:	blx	r5
   158cc:	cmp	r0, #0
   158d0:	bne	15a54 <flatcc_builder_create_cached_vtable@@Base+0x288>
   158d4:	ldr	r5, [r6, #100]	; 0x64
   158d8:	adds	r7, r5, r4
   158dc:	beq	15a24 <flatcc_builder_create_cached_vtable@@Base+0x258>
   158e0:	ldr	r3, [r6, #124]	; 0x7c
   158e4:	mov	r2, r9
   158e8:	ldr	r0, [r6, #152]	; 0x98
   158ec:	ldr	r1, [sp, #8]
   158f0:	add	ip, r3, #16
   158f4:	str	ip, [r6, #124]	; 0x7c
   158f8:	str	r0, [r7, #4]
   158fc:	mov	r0, r6
   15900:	ldr	ip, [sl, r8, lsl #2]
   15904:	str	ip, [r7, #12]
   15908:	str	r3, [sl, r8, lsl #2]
   1590c:	bl	156a8 <flatcc_builder_create_vtable@@Base>
   15910:	cmp	r0, #0
   15914:	str	r0, [r5, r4]
   15918:	beq	15a24 <flatcc_builder_create_cached_vtable@@Base+0x258>
   1591c:	ldr	r3, [sp, #20]
   15920:	cmp	r3, #0
   15924:	beq	15a68 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   15928:	ldr	r3, [r3, #8]
   1592c:	str	r3, [r7, #8]
   15930:	b	1596c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15934:	add	r8, r4, #12
   15938:	ldr	r5, [r4, #12]
   1593c:	b	1588c <flatcc_builder_create_cached_vtable@@Base+0xc0>
   15940:	ldr	r3, [sp, #12]
   15944:	mov	fp, r8
   15948:	ldr	r8, [sp, #16]
   1594c:	cmp	r3, fp
   15950:	beq	15968 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15954:	ldr	r3, [r4, #12]
   15958:	str	r3, [fp]
   1595c:	ldr	r3, [sl, r8, lsl #2]
   15960:	str	r3, [r4, #12]
   15964:	str	r5, [sl, r8, lsl #2]
   15968:	ldr	r0, [r4]
   1596c:	add	sp, sp, #28
   15970:	ldrd	r4, [sp]
   15974:	ldrd	r6, [sp, #8]
   15978:	ldrd	r8, [sp, #16]
   1597c:	ldrd	sl, [sp, #24]
   15980:	add	sp, sp, #32
   15984:	pop	{pc}		; (ldr pc, [sp], #4)
   15988:	ldr	r4, [r0, #124]	; 0x7c
   1598c:	add	r5, r0, #92	; 0x5c
   15990:	cmp	r4, #0
   15994:	bne	15b18 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   15998:	ldr	r3, [r0, #104]	; 0x68
   1599c:	cmp	r3, #15
   159a0:	bls	15a2c <flatcc_builder_create_cached_vtable@@Base+0x260>
   159a4:	ldr	r3, [r6, #100]	; 0x64
   159a8:	cmp	r3, #0
   159ac:	beq	15a24 <flatcc_builder_create_cached_vtable@@Base+0x258>
   159b0:	mov	ip, #16
   159b4:	mov	r2, #5
   159b8:	ldr	r0, [r6, #40]	; 0x28
   159bc:	mov	r1, r5
   159c0:	mov	r3, #1
   159c4:	str	r2, [sp]
   159c8:	mov	r2, #256	; 0x100
   159cc:	str	ip, [r6, #124]	; 0x7c
   159d0:	ldr	r5, [r6, #48]	; 0x30
   159d4:	blx	r5
   159d8:	cmp	r0, #0
   159dc:	bne	15a24 <flatcc_builder_create_cached_vtable@@Base+0x258>
   159e0:	mov	r3, #256	; 0x100
   159e4:	ldr	r1, [r6, #96]	; 0x60
   159e8:	b	159f0 <flatcc_builder_create_cached_vtable@@Base+0x224>
   159ec:	mov	r3, r2
   159f0:	lsl	r2, r3, #1
   159f4:	cmp	r2, r1
   159f8:	bls	159ec <flatcc_builder_create_cached_vtable@@Base+0x220>
   159fc:	lsr	r3, r3, #2
   15a00:	cmp	r3, #1
   15a04:	bls	15a60 <flatcc_builder_create_cached_vtable@@Base+0x294>
   15a08:	mov	r2, #1
   15a0c:	add	r4, r4, #1
   15a10:	cmp	r3, r2, lsl r4
   15a14:	bhi	15a0c <flatcc_builder_create_cached_vtable@@Base+0x240>
   15a18:	rsb	r1, r4, #32
   15a1c:	str	r4, [r6, #116]	; 0x74
   15a20:	b	15804 <flatcc_builder_create_cached_vtable@@Base+0x38>
   15a24:	mov	r0, #0
   15a28:	b	1596c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15a2c:	mov	ip, #6
   15a30:	add	r1, r0, #100	; 0x64
   15a34:	ldr	r0, [r0, #40]	; 0x28
   15a38:	mov	r3, r4
   15a3c:	mov	r2, #16
   15a40:	str	ip, [sp]
   15a44:	ldr	r7, [r6, #48]	; 0x30
   15a48:	blx	r7
   15a4c:	cmp	r0, #0
   15a50:	beq	159a4 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   15a54:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>
   15a58:	str	r5, [sp, #20]
   15a5c:	b	1589c <flatcc_builder_create_cached_vtable@@Base+0xd0>
   15a60:	mov	r1, #32
   15a64:	b	15a1c <flatcc_builder_create_cached_vtable@@Base+0x250>
   15a68:	ldr	r8, [r6, #120]	; 0x78
   15a6c:	ldr	r3, [r6, #172]	; 0xac
   15a70:	add	r2, r9, r8
   15a74:	cmp	r3, #0
   15a78:	beq	15ab8 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   15a7c:	cmp	r3, r2
   15a80:	bcs	15ab8 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   15a84:	ldr	r3, [r6, #116]	; 0x74
   15a88:	cmp	r3, #0
   15a8c:	beq	1596c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15a90:	ldr	r7, [sp, #20]
   15a94:	ldr	r0, [r6, #92]	; 0x5c
   15a98:	ldr	r2, [r6, #96]	; 0x60
   15a9c:	mov	r1, r7
   15aa0:	bl	12014 <memset@plt>
   15aa4:	mov	r3, #16
   15aa8:	mov	r2, r7
   15aac:	ldr	r0, [r5, r4]
   15ab0:	strd	r2, [r6, #120]	; 0x78
   15ab4:	b	1596c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15ab8:	ldr	r3, [r6, #72]	; 0x48
   15abc:	cmp	r3, r2
   15ac0:	bcs	15ae8 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15ac4:	mov	ip, #2
   15ac8:	mov	r3, #0
   15acc:	ldr	r0, [r6, #40]	; 0x28
   15ad0:	add	r1, r6, #68	; 0x44
   15ad4:	str	ip, [sp]
   15ad8:	ldr	sl, [r6, #48]	; 0x30
   15adc:	blx	sl
   15ae0:	cmp	r0, #0
   15ae4:	bne	15a54 <flatcc_builder_create_cached_vtable@@Base+0x288>
   15ae8:	ldr	r3, [r6, #68]	; 0x44
   15aec:	adds	r0, r3, r8
   15af0:	beq	15b34 <flatcc_builder_create_cached_vtable@@Base+0x368>
   15af4:	ldr	r3, [r6, #120]	; 0x78
   15af8:	mov	r2, r9
   15afc:	ldr	r1, [sp, #8]
   15b00:	add	r9, r3, r9
   15b04:	str	r3, [r7, #8]
   15b08:	str	r9, [r6, #120]	; 0x78
   15b0c:	bl	11f90 <memcpy@plt>
   15b10:	ldr	r0, [r5, r4]
   15b14:	b	1596c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15b18:	movw	r1, #38640	; 0x96f0
   15b1c:	movt	r1, #1
   15b20:	ldr	r3, [pc, #20]	; 15b3c <flatcc_builder_create_cached_vtable@@Base+0x370>
   15b24:	movw	r0, #39308	; 0x998c
   15b28:	movt	r0, #1
   15b2c:	movw	r2, #342	; 0x156
   15b30:	bl	12044 <__assert_fail@plt>
   15b34:	mvn	r0, #0
   15b38:	b	1596c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15b3c:	andeq	r9, r1, r0, ror r4

00015b40 <flatcc_builder_create_table@@Base>:
   15b40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b44:	mov	r5, r0
   15b48:	strd	r6, [sp, #8]
   15b4c:	str	r8, [sp, #16]
   15b50:	str	lr, [sp, #20]
   15b54:	sub	sp, sp, #88	; 0x58
   15b58:	ldr	r6, [sp, #116]	; 0x74
   15b5c:	ldr	r0, [sp, #120]	; 0x78
   15b60:	cmp	r6, #0
   15b64:	blt	15ccc <flatcc_builder_create_table@@Base+0x18c>
   15b68:	ands	r7, r0, #1
   15b6c:	beq	15cb0 <flatcc_builder_create_table@@Base+0x170>
   15b70:	ldrh	ip, [r5, #128]	; 0x80
   15b74:	cmp	r3, #4
   15b78:	sub	r0, r0, #1
   15b7c:	movcc	r3, #4
   15b80:	cmp	ip, r3
   15b84:	ldr	ip, [r5, #136]	; 0x88
   15b88:	strhcc	r3, [r5, #128]	; 0x80
   15b8c:	sub	r3, r3, #1
   15b90:	cmp	r6, #0
   15b94:	sub	r4, ip, r2
   15b98:	mov	r8, r4
   15b9c:	sub	r4, r4, #4
   15ba0:	and	r8, r8, r3
   15ba4:	sub	r0, r4, r0
   15ba8:	sub	r0, r0, r8
   15bac:	str	r0, [sp, #12]
   15bb0:	beq	15be4 <flatcc_builder_create_table@@Base+0xa4>
   15bb4:	ldr	ip, [sp, #112]	; 0x70
   15bb8:	sub	r4, r8, r4
   15bbc:	sub	r4, r4, #4
   15bc0:	add	r6, ip, r6, lsl #1
   15bc4:	ldrh	r3, [ip], #2
   15bc8:	ldr	r0, [r1, r3]
   15bcc:	sub	lr, r4, r3
   15bd0:	cmp	r6, ip
   15bd4:	add	r0, r0, lr
   15bd8:	str	r0, [r1, r3]
   15bdc:	bne	15bc4 <flatcc_builder_create_table@@Base+0x84>
   15be0:	ldr	ip, [r5, #136]	; 0x88
   15be4:	mov	r0, #4
   15be8:	add	r3, sp, #12
   15bec:	mov	lr, #1
   15bf0:	cmp	r2, #0
   15bf4:	moveq	r2, #2
   15bf8:	str	r0, [sp, #16]
   15bfc:	str	lr, [sp, #20]
   15c00:	str	r3, [sp, #24]
   15c04:	str	r0, [sp, #28]
   15c08:	beq	15c2c <flatcc_builder_create_table@@Base+0xec>
   15c0c:	mov	r3, #2
   15c10:	add	r0, r2, r0
   15c14:	mov	r7, r3
   15c18:	str	r0, [sp, #16]
   15c1c:	str	r2, [sp, #36]	; 0x24
   15c20:	mov	r2, #3
   15c24:	str	r3, [sp, #20]
   15c28:	str	r1, [sp, #32]
   15c2c:	cmp	r8, #0
   15c30:	bne	15c84 <flatcc_builder_create_table@@Base+0x144>
   15c34:	sub	r4, ip, r0
   15c38:	cmp	r4, ip
   15c3c:	bge	15cec <flatcc_builder_create_table@@Base+0x1ac>
   15c40:	mov	r2, r7
   15c44:	mov	r3, r4
   15c48:	str	r0, [sp]
   15c4c:	add	r1, sp, #24
   15c50:	ldr	r0, [r5, #36]	; 0x24
   15c54:	ldr	r6, [r5, #44]	; 0x2c
   15c58:	blx	r6
   15c5c:	cmp	r0, #0
   15c60:	bne	15ce8 <flatcc_builder_create_table@@Base+0x1a8>
   15c64:	mov	r0, r4
   15c68:	str	r4, [r5, #136]	; 0x88
   15c6c:	add	sp, sp, #88	; 0x58
   15c70:	ldrd	r4, [sp]
   15c74:	ldrd	r6, [sp, #8]
   15c78:	ldr	r8, [sp, #16]
   15c7c:	add	sp, sp, #20
   15c80:	pop	{pc}		; (ldr pc, [sp], #4)
   15c84:	ldr	r1, [pc, #124]	; 15d08 <flatcc_builder_create_table@@Base+0x1c8>
   15c88:	add	r7, r7, #1
   15c8c:	add	r3, sp, #88	; 0x58
   15c90:	add	r3, r3, r7, lsl #3
   15c94:	add	r0, r0, r8
   15c98:	mov	r7, r2
   15c9c:	str	r0, [sp, #16]
   15ca0:	str	r2, [sp, #20]
   15ca4:	str	r1, [r3, #-72]	; 0xffffffb8
   15ca8:	str	r8, [r3, #-68]	; 0xffffffbc
   15cac:	b	15c34 <flatcc_builder_create_table@@Base+0xf4>
   15cb0:	movw	r1, #38640	; 0x96f0
   15cb4:	movt	r1, #1
   15cb8:	ldr	r3, [pc, #76]	; 15d0c <flatcc_builder_create_table@@Base+0x1cc>
   15cbc:	movw	r0, #39344	; 0x99b0
   15cc0:	movt	r0, #1
   15cc4:	movw	r2, #1243	; 0x4db
   15cc8:	bl	12044 <__assert_fail@plt>
   15ccc:	movw	r1, #38640	; 0x96f0
   15cd0:	movt	r1, #1
   15cd4:	ldr	r3, [pc, #48]	; 15d0c <flatcc_builder_create_table@@Base+0x1cc>
   15cd8:	movw	r0, #39324	; 0x999c
   15cdc:	movt	r0, #1
   15ce0:	movw	r2, #1237	; 0x4d5
   15ce4:	bl	12044 <__assert_fail@plt>
   15ce8:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   15cec:	movw	r1, #38640	; 0x96f0
   15cf0:	movt	r1, #1
   15cf4:	ldr	r3, [pc, #20]	; 15d10 <flatcc_builder_create_table@@Base+0x1d0>
   15cf8:	movw	r0, #38832	; 0x97b0
   15cfc:	movt	r0, #1
   15d00:	movw	r2, #647	; 0x287
   15d04:	bl	12044 <__assert_fail@plt>
   15d08:	andeq	r9, r1, r8, asr #32
   15d0c:	andeq	r9, r1, ip, ror r4
   15d10:	andeq	r8, r1, ip, asr #31

00015d14 <flatcc_builder_check_required_field@@Base>:
   15d14:	ldr	r3, [r0, #32]
   15d18:	ldrh	r3, [r3, #14]
   15d1c:	cmp	r3, #3
   15d20:	bne	15d50 <flatcc_builder_check_required_field@@Base+0x3c>
   15d24:	ldrh	r3, [r0, #8]
   15d28:	cmp	r3, r1
   15d2c:	bls	15d48 <flatcc_builder_check_required_field@@Base+0x34>
   15d30:	ldr	r3, [r0, #4]
   15d34:	lsl	r1, r1, #1
   15d38:	ldrh	r0, [r3, r1]
   15d3c:	adds	r0, r0, #0
   15d40:	movne	r0, #1
   15d44:	bx	lr
   15d48:	mov	r0, #0
   15d4c:	bx	lr
   15d50:	movw	r1, #38640	; 0x96f0
   15d54:	movt	r1, #1
   15d58:	ldr	r3, [pc, #20]	; 15d74 <flatcc_builder_check_required_field@@Base+0x60>
   15d5c:	movw	r0, #39356	; 0x99bc
   15d60:	movt	r0, #1
   15d64:	str	r4, [sp, #-8]!
   15d68:	movw	r2, #1272	; 0x4f8
   15d6c:	str	lr, [sp, #4]
   15d70:	bl	12044 <__assert_fail@plt>
   15d74:	muleq	r1, r8, r4

00015d78 <flatcc_builder_check_union_field@@Base>:
   15d78:	ldr	r3, [r0, #32]
   15d7c:	ldrh	r3, [r3, #14]
   15d80:	cmp	r3, #3
   15d84:	bne	15de8 <flatcc_builder_check_union_field@@Base+0x70>
   15d88:	cmp	r1, #0
   15d8c:	beq	15dd4 <flatcc_builder_check_union_field@@Base+0x5c>
   15d90:	ldrh	r3, [r0, #8]
   15d94:	cmp	r3, r1
   15d98:	bls	15dd4 <flatcc_builder_check_union_field@@Base+0x5c>
   15d9c:	ldr	r3, [r0, #4]
   15da0:	sub	r1, r1, #-2147483647	; 0x80000001
   15da4:	lsl	r1, r1, #1
   15da8:	ldrh	r2, [r3, r1]!
   15dac:	cmp	r2, #0
   15db0:	ldrh	r1, [r3, #2]
   15db4:	beq	15dc8 <flatcc_builder_check_union_field@@Base+0x50>
   15db8:	ldr	r3, [r0, #16]
   15dbc:	ldrb	r3, [r3, r2]
   15dc0:	cmp	r3, #0
   15dc4:	bne	15ddc <flatcc_builder_check_union_field@@Base+0x64>
   15dc8:	clz	r0, r1
   15dcc:	lsr	r0, r0, #5
   15dd0:	bx	lr
   15dd4:	mov	r0, #0
   15dd8:	bx	lr
   15ddc:	adds	r0, r1, #0
   15de0:	movne	r0, #1
   15de4:	bx	lr
   15de8:	movw	r1, #38640	; 0x96f0
   15dec:	movt	r1, #1
   15df0:	ldr	r3, [pc, #20]	; 15e0c <flatcc_builder_check_union_field@@Base+0x94>
   15df4:	movw	r0, #39356	; 0x99bc
   15df8:	movt	r0, #1
   15dfc:	str	r4, [sp, #-8]!
   15e00:	movw	r2, #1279	; 0x4ff
   15e04:	str	lr, [sp, #4]
   15e08:	bl	12044 <__assert_fail@plt>
   15e0c:			; <UNDEFINED> instruction: 0x000194bc

00015e10 <flatcc_builder_check_required@@Base>:
   15e10:	ldr	r3, [r0, #32]
   15e14:	ldrh	r3, [r3, #14]
   15e18:	cmp	r3, #3
   15e1c:	bne	15e84 <flatcc_builder_check_required@@Base+0x74>
   15e20:	ldrh	r3, [r0, #8]
   15e24:	cmp	r3, r2
   15e28:	blt	15e7c <flatcc_builder_check_required@@Base+0x6c>
   15e2c:	cmp	r2, #0
   15e30:	ble	15e74 <flatcc_builder_check_required@@Base+0x64>
   15e34:	ldrh	r3, [r1]
   15e38:	ldr	ip, [r0, #4]
   15e3c:	lsl	r3, r3, #1
   15e40:	ldrh	r0, [ip, r3]
   15e44:	cmp	r0, #0
   15e48:	bxeq	lr
   15e4c:	add	r2, r1, r2, lsl #1
   15e50:	add	r1, r1, #2
   15e54:	b	15e6c <flatcc_builder_check_required@@Base+0x5c>
   15e58:	ldrh	r3, [r1], #2
   15e5c:	lsl	r3, r3, #1
   15e60:	ldrh	r0, [ip, r3]
   15e64:	cmp	r0, #0
   15e68:	bxeq	lr
   15e6c:	cmp	r1, r2
   15e70:	bne	15e58 <flatcc_builder_check_required@@Base+0x48>
   15e74:	mov	r0, #1
   15e78:	bx	lr
   15e7c:	mov	r0, #0
   15e80:	bx	lr
   15e84:	movw	r1, #38640	; 0x96f0
   15e88:	movt	r1, #1
   15e8c:	ldr	r3, [pc, #20]	; 15ea8 <flatcc_builder_check_required@@Base+0x98>
   15e90:	movw	r0, #39356	; 0x99bc
   15e94:	movt	r0, #1
   15e98:	str	r4, [sp, #-8]!
   15e9c:	movw	r2, #1297	; 0x511
   15ea0:	str	lr, [sp, #4]
   15ea4:	bl	12044 <__assert_fail@plt>
   15ea8:	andeq	r9, r1, r0, ror #9

00015eac <flatcc_builder_end_table@@Base>:
   15eac:	ldr	r3, [r0, #32]
   15eb0:	strd	r4, [sp, #-20]!	; 0xffffffec
   15eb4:	ldrh	r3, [r3, #14]
   15eb8:	strd	r6, [sp, #8]
   15ebc:	str	lr, [sp, #16]
   15ec0:	sub	sp, sp, #20
   15ec4:	cmp	r3, #3
   15ec8:	bne	1604c <flatcc_builder_end_table@@Base+0x1a0>
   15ecc:	ldrh	r5, [r0, #8]
   15ed0:	movw	ip, #31153	; 0x79b1
   15ed4:	movt	ip, #40503	; 0x9e37
   15ed8:	mov	r4, r0
   15edc:	ldr	r1, [r0, #4]
   15ee0:	ldr	r3, [r0, #12]
   15ee4:	add	r5, r5, #2
   15ee8:	lsl	r5, r5, #1
   15eec:	ldr	lr, [r0, #20]
   15ef0:	sub	r6, r1, #4
   15ef4:	uxth	r5, r5
   15ef8:	eor	r3, r3, r5
   15efc:	mov	r2, r5
   15f00:	strh	r5, [r1, #-4]
   15f04:	mul	r3, ip, r3
   15f08:	add	lr, lr, #4
   15f0c:	uxth	lr, lr
   15f10:	eor	r3, r3, lr
   15f14:	strh	lr, [r1, #-2]
   15f18:	mov	r1, r6
   15f1c:	mul	r3, ip, r3
   15f20:	str	r3, [r0, #12]
   15f24:	bl	157cc <flatcc_builder_create_cached_vtable@@Base>
   15f28:	subs	r7, r0, #0
   15f2c:	bne	15f4c <flatcc_builder_end_table@@Base+0xa0>
   15f30:	mov	r5, #0
   15f34:	mov	r0, r5
   15f38:	add	sp, sp, #20
   15f3c:	ldrd	r4, [sp]
   15f40:	ldrd	r6, [sp, #8]
   15f44:	add	sp, sp, #16
   15f48:	pop	{pc}		; (ldr pc, [sp], #4)
   15f4c:	mov	r2, r5
   15f50:	mov	r1, #0
   15f54:	mov	r0, r6
   15f58:	bl	12014 <memset@plt>
   15f5c:	ldr	ip, [r4]
   15f60:	mov	r0, r4
   15f64:	ldr	r3, [r4, #32]
   15f68:	ldr	r2, [r4, #76]	; 0x4c
   15f6c:	ldr	r1, [r3, #20]
   15f70:	str	r7, [sp, #8]
   15f74:	ldrh	r3, [r4, #130]	; 0x82
   15f78:	add	r2, r2, r1
   15f7c:	ldr	r1, [r4, #16]
   15f80:	sub	ip, ip, r2
   15f84:	asr	ip, ip, #1
   15f88:	str	r2, [sp]
   15f8c:	ldr	r2, [r4, #20]
   15f90:	str	ip, [sp, #4]
   15f94:	bl	15b40 <flatcc_builder_create_table@@Base>
   15f98:	subs	r5, r0, #0
   15f9c:	beq	15f30 <flatcc_builder_end_table@@Base+0x84>
   15fa0:	ldr	r3, [r4, #32]
   15fa4:	mov	r1, #0
   15fa8:	ldr	r0, [r4, #52]	; 0x34
   15fac:	ldr	r2, [r4, #76]	; 0x4c
   15fb0:	ldr	ip, [r3, #16]
   15fb4:	ldr	r6, [r3, #20]
   15fb8:	ldrh	lr, [r3, #28]
   15fbc:	add	r0, r0, ip
   15fc0:	ldr	ip, [r3, #24]
   15fc4:	add	r3, r2, r6
   15fc8:	ldr	r2, [r4, #20]
   15fcc:	str	r3, [r4]
   15fd0:	str	r0, [r4, #4]
   15fd4:	strh	lr, [r4, #8]
   15fd8:	str	ip, [r4, #12]
   15fdc:	ldr	r0, [r4, #16]
   15fe0:	bl	12014 <memset@plt>
   15fe4:	ldr	r3, [r4, #32]
   15fe8:	ldr	r0, [r4, #60]	; 0x3c
   15fec:	ldr	r2, [r4, #64]	; 0x40
   15ff0:	ldr	ip, [r3]
   15ff4:	ldmib	r3, {r1, lr}
   15ff8:	add	r0, r0, ip
   15ffc:	sub	r2, r2, ip
   16000:	str	r0, [r4, #16]
   16004:	cmp	r2, r1
   16008:	ldrh	r0, [r4, #128]	; 0x80
   1600c:	movcs	r2, r1
   16010:	str	lr, [r4, #20]
   16014:	str	ip, [r4, #28]
   16018:	ldrh	ip, [r4, #130]	; 0x82
   1601c:	str	r2, [r4, #24]
   16020:	ldr	r2, [r4, #156]	; 0x9c
   16024:	str	r1, [r3, #4]
   16028:	cmp	r0, ip
   1602c:	sub	r0, r3, #36	; 0x24
   16030:	strhcc	ip, [r4, #128]	; 0x80
   16034:	ldrh	r1, [r3, #12]
   16038:	sub	r3, r2, #1
   1603c:	str	r0, [r4, #32]
   16040:	strh	r1, [r4, #130]	; 0x82
   16044:	str	r3, [r4, #156]	; 0x9c
   16048:	b	15f34 <flatcc_builder_end_table@@Base+0x88>
   1604c:	movw	r1, #38640	; 0x96f0
   16050:	movt	r1, #1
   16054:	ldr	r3, [pc, #12]	; 16068 <flatcc_builder_end_table@@Base+0x1bc>
   16058:	movw	r0, #39356	; 0x99bc
   1605c:	movt	r0, #1
   16060:	movw	r2, #1317	; 0x525
   16064:	bl	12044 <__assert_fail@plt>
   16068:	andeq	r9, r1, r0, lsl #10

0001606c <flatcc_builder_create_vector@@Base>:
   1606c:	strd	r4, [sp, #-16]!
   16070:	mov	r4, r0
   16074:	str	r6, [sp, #8]
   16078:	str	lr, [sp, #12]
   1607c:	sub	sp, sp, #88	; 0x58
   16080:	ldr	ip, [sp, #108]	; 0x6c
   16084:	ldrh	r0, [sp, #104]	; 0x68
   16088:	cmp	r2, ip
   1608c:	bhi	16180 <flatcc_builder_create_vector@@Base+0x114>
   16090:	ldrh	ip, [r4, #128]	; 0x80
   16094:	cmp	r0, #4
   16098:	mul	r3, r3, r2
   1609c:	movcc	r0, #4
   160a0:	add	lr, sp, #12
   160a4:	str	r2, [sp, #12]
   160a8:	ldr	r6, [r4, #136]	; 0x88
   160ac:	mov	r2, #1
   160b0:	str	lr, [sp, #24]
   160b4:	cmp	ip, r0
   160b8:	mov	ip, #4
   160bc:	strhcc	r0, [r4, #128]	; 0x80
   160c0:	sub	lr, r6, r3
   160c4:	sub	r0, r0, #1
   160c8:	cmp	r3, #0
   160cc:	and	r0, r0, lr
   160d0:	str	ip, [sp, #16]
   160d4:	moveq	r3, #2
   160d8:	str	r2, [sp, #20]
   160dc:	str	ip, [sp, #28]
   160e0:	beq	16104 <flatcc_builder_create_vector@@Base+0x98>
   160e4:	mov	lr, #2
   160e8:	add	ip, r3, ip
   160ec:	mov	r2, lr
   160f0:	str	ip, [sp, #16]
   160f4:	str	r3, [sp, #36]	; 0x24
   160f8:	mov	r3, #3
   160fc:	str	lr, [sp, #20]
   16100:	str	r1, [sp, #32]
   16104:	cmp	r0, #0
   16108:	bne	16154 <flatcc_builder_create_vector@@Base+0xe8>
   1610c:	sub	r5, r6, ip
   16110:	cmp	r6, r5
   16114:	ble	161a0 <flatcc_builder_create_vector@@Base+0x134>
   16118:	mov	r3, r5
   1611c:	add	r1, sp, #24
   16120:	str	ip, [sp]
   16124:	ldr	r0, [r4, #36]	; 0x24
   16128:	ldr	r6, [r4, #44]	; 0x2c
   1612c:	blx	r6
   16130:	cmp	r0, #0
   16134:	bne	1619c <flatcc_builder_create_vector@@Base+0x130>
   16138:	mov	r0, r5
   1613c:	str	r5, [r4, #136]	; 0x88
   16140:	add	sp, sp, #88	; 0x58
   16144:	ldrd	r4, [sp]
   16148:	ldr	r6, [sp, #8]
   1614c:	add	sp, sp, #12
   16150:	pop	{pc}		; (ldr pc, [sp], #4)
   16154:	ldr	lr, [pc, #96]	; 161bc <flatcc_builder_create_vector@@Base+0x150>
   16158:	add	r2, r2, #1
   1615c:	add	r1, sp, #88	; 0x58
   16160:	add	r1, r1, r2, lsl #3
   16164:	add	ip, ip, r0
   16168:	mov	r2, r3
   1616c:	str	ip, [sp, #16]
   16170:	str	r3, [sp, #20]
   16174:	str	lr, [r1, #-72]	; 0xffffffb8
   16178:	str	r0, [r1, #-68]	; 0xffffffbc
   1617c:	b	1610c <flatcc_builder_create_vector@@Base+0xa0>
   16180:	movw	r1, #38640	; 0x96f0
   16184:	movt	r1, #1
   16188:	ldr	r3, [pc, #48]	; 161c0 <flatcc_builder_create_vector@@Base+0x154>
   1618c:	movw	r0, #39400	; 0x99e8
   16190:	movt	r0, #1
   16194:	movw	r2, #1365	; 0x555
   16198:	bl	12044 <__assert_fail@plt>
   1619c:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   161a0:	movw	r1, #38640	; 0x96f0
   161a4:	movt	r1, #1
   161a8:	ldr	r3, [pc, #20]	; 161c4 <flatcc_builder_create_vector@@Base+0x158>
   161ac:	movw	r0, #38832	; 0x97b0
   161b0:	movt	r0, #1
   161b4:	movw	r2, #647	; 0x287
   161b8:	bl	12044 <__assert_fail@plt>
   161bc:	andeq	r9, r1, r8, asr #32
   161c0:	andeq	r9, r1, ip, lsl r5
   161c4:	andeq	r8, r1, ip, asr #31

000161c8 <flatcc_builder_end_vector@@Base>:
   161c8:	ldr	r2, [r0, #32]
   161cc:	strd	r4, [sp, #-16]!
   161d0:	ldrh	r3, [r2, #14]
   161d4:	str	r6, [sp, #8]
   161d8:	str	lr, [sp, #12]
   161dc:	sub	sp, sp, #88	; 0x58
   161e0:	cmp	r3, #4
   161e4:	bne	163ac <flatcc_builder_end_vector@@Base+0x1e4>
   161e8:	ldr	ip, [r2, #20]
   161ec:	mov	r4, r0
   161f0:	ldr	r1, [r2, #24]
   161f4:	ldrh	r3, [r0, #130]	; 0x82
   161f8:	ldr	r5, [r4, #16]
   161fc:	cmp	ip, r1
   16200:	ldr	r0, [r2, #16]
   16204:	bhi	16390 <flatcc_builder_end_vector@@Base+0x1c8>
   16208:	cmp	r3, #4
   1620c:	mul	r0, r0, ip
   16210:	mov	r1, #4
   16214:	ldrh	r2, [r4, #128]	; 0x80
   16218:	movcc	r3, #4
   1621c:	add	r6, sp, #12
   16220:	str	ip, [sp, #12]
   16224:	ldr	lr, [r4, #136]	; 0x88
   16228:	str	r1, [sp, #16]
   1622c:	str	r6, [sp, #24]
   16230:	cmp	r2, r3
   16234:	mov	r2, #1
   16238:	strhcc	r3, [r4, #128]	; 0x80
   1623c:	sub	ip, lr, r0
   16240:	sub	r3, r3, #1
   16244:	cmp	r0, #0
   16248:	and	r3, r3, ip
   1624c:	str	r2, [sp, #20]
   16250:	moveq	r0, #2
   16254:	str	r1, [sp, #28]
   16258:	beq	1627c <flatcc_builder_end_vector@@Base+0xb4>
   1625c:	mov	ip, #2
   16260:	add	r1, r0, r1
   16264:	mov	r2, ip
   16268:	str	r1, [sp, #16]
   1626c:	str	r0, [sp, #36]	; 0x24
   16270:	mov	r0, #3
   16274:	str	ip, [sp, #20]
   16278:	str	r5, [sp, #32]
   1627c:	cmp	r3, #0
   16280:	bne	16344 <flatcc_builder_end_vector@@Base+0x17c>
   16284:	sub	r5, lr, r1
   16288:	cmp	lr, r5
   1628c:	ble	16374 <flatcc_builder_end_vector@@Base+0x1ac>
   16290:	mov	r3, r5
   16294:	str	r1, [sp]
   16298:	add	r1, sp, #24
   1629c:	ldr	r0, [r4, #36]	; 0x24
   162a0:	ldr	r6, [r4, #44]	; 0x2c
   162a4:	blx	r6
   162a8:	subs	r1, r0, #0
   162ac:	bne	16370 <flatcc_builder_end_vector@@Base+0x1a8>
   162b0:	cmp	r5, #0
   162b4:	str	r5, [r4, #136]	; 0x88
   162b8:	beq	1632c <flatcc_builder_end_vector@@Base+0x164>
   162bc:	ldr	r0, [r4, #16]
   162c0:	ldr	r2, [r4, #20]
   162c4:	bl	12014 <memset@plt>
   162c8:	ldr	r3, [r4, #32]
   162cc:	ldr	r0, [r4, #60]	; 0x3c
   162d0:	ldr	r2, [r4, #64]	; 0x40
   162d4:	ldr	ip, [r3]
   162d8:	ldmib	r3, {r1, lr}
   162dc:	add	r0, r0, ip
   162e0:	sub	r2, r2, ip
   162e4:	str	r0, [r4, #16]
   162e8:	cmp	r2, r1
   162ec:	ldrh	r0, [r4, #128]	; 0x80
   162f0:	movcs	r2, r1
   162f4:	str	lr, [r4, #20]
   162f8:	str	ip, [r4, #28]
   162fc:	ldrh	ip, [r4, #130]	; 0x82
   16300:	str	r2, [r4, #24]
   16304:	ldr	r2, [r4, #156]	; 0x9c
   16308:	str	r1, [r3, #4]
   1630c:	cmp	r0, ip
   16310:	sub	r0, r3, #36	; 0x24
   16314:	strhcc	ip, [r4, #128]	; 0x80
   16318:	ldrh	r1, [r3, #12]
   1631c:	sub	r3, r2, #1
   16320:	str	r0, [r4, #32]
   16324:	strh	r1, [r4, #130]	; 0x82
   16328:	str	r3, [r4, #156]	; 0x9c
   1632c:	mov	r0, r5
   16330:	add	sp, sp, #88	; 0x58
   16334:	ldrd	r4, [sp]
   16338:	ldr	r6, [sp, #8]
   1633c:	add	sp, sp, #12
   16340:	pop	{pc}		; (ldr pc, [sp], #4)
   16344:	ldr	r5, [pc, #124]	; 163c8 <flatcc_builder_end_vector@@Base+0x200>
   16348:	add	r2, r2, #1
   1634c:	add	ip, sp, #88	; 0x58
   16350:	add	ip, ip, r2, lsl #3
   16354:	add	r1, r1, r3
   16358:	mov	r2, r0
   1635c:	str	r1, [sp, #16]
   16360:	str	r0, [sp, #20]
   16364:	str	r5, [ip, #-72]	; 0xffffffb8
   16368:	str	r3, [ip, #-68]	; 0xffffffbc
   1636c:	b	16284 <flatcc_builder_end_vector@@Base+0xbc>
   16370:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   16374:	movw	r1, #38640	; 0x96f0
   16378:	movt	r1, #1
   1637c:	ldr	r3, [pc, #72]	; 163cc <flatcc_builder_end_vector@@Base+0x204>
   16380:	movw	r0, #38832	; 0x97b0
   16384:	movt	r0, #1
   16388:	movw	r2, #647	; 0x287
   1638c:	bl	12044 <__assert_fail@plt>
   16390:	movw	r1, #38640	; 0x96f0
   16394:	movt	r1, #1
   16398:	ldr	r3, [pc, #48]	; 163d0 <flatcc_builder_end_vector@@Base+0x208>
   1639c:	movw	r0, #39400	; 0x99e8
   163a0:	movt	r0, #1
   163a4:	movw	r2, #1365	; 0x555
   163a8:	bl	12044 <__assert_fail@plt>
   163ac:	movw	r1, #38640	; 0x96f0
   163b0:	movt	r1, #1
   163b4:	ldr	r3, [pc, #24]	; 163d4 <flatcc_builder_end_vector@@Base+0x20c>
   163b8:	movw	r0, #39004	; 0x985c
   163bc:	movt	r0, #1
   163c0:	movw	r2, #1400	; 0x578
   163c4:	bl	12044 <__assert_fail@plt>
   163c8:	andeq	r9, r1, r8, asr #32
   163cc:	andeq	r8, r1, ip, asr #31
   163d0:	andeq	r9, r1, ip, lsl r5
   163d4:	andeq	r9, r1, ip, lsr r5

000163d8 <flatcc_builder_vector_count@@Base>:
   163d8:	ldr	r3, [r0, #32]
   163dc:	ldr	r0, [r3, #20]
   163e0:	bx	lr

000163e4 <flatcc_builder_vector_edit@@Base>:
   163e4:	ldr	r0, [r0, #16]
   163e8:	bx	lr

000163ec <flatcc_builder_create_offset_vector_direct@@Base>:
   163ec:	cmn	r2, #-1073741823	; 0xc0000001
   163f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   163f4:	strd	r6, [sp, #8]
   163f8:	str	r8, [sp, #16]
   163fc:	str	lr, [sp, #20]
   16400:	sub	sp, sp, #88	; 0x58
   16404:	bhi	16508 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   16408:	ldrh	r3, [r0, #128]	; 0x80
   1640c:	mov	r4, r0
   16410:	mov	ip, #1
   16414:	str	r2, [sp, #12]
   16418:	ldr	r5, [r4, #136]	; 0x88
   1641c:	str	ip, [sp, #20]
   16420:	cmp	r3, #3
   16424:	movls	r3, #4
   16428:	strhls	r3, [r0, #128]	; 0x80
   1642c:	mov	r0, #4
   16430:	add	r3, sp, #12
   16434:	lsls	lr, r2, #2
   16438:	str	r0, [sp, #16]
   1643c:	moveq	r7, #2
   16440:	str	r3, [sp, #24]
   16444:	and	r3, r5, #3
   16448:	str	r0, [sp, #28]
   1644c:	beq	16470 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16450:	mov	r6, #2
   16454:	add	r0, lr, r0
   16458:	mov	ip, r6
   1645c:	mov	r7, #3
   16460:	str	r0, [sp, #16]
   16464:	str	r6, [sp, #20]
   16468:	str	r1, [sp, #32]
   1646c:	str	lr, [sp, #36]	; 0x24
   16470:	cmp	r3, #0
   16474:	bne	164dc <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   16478:	cmp	r2, #0
   1647c:	beq	1652c <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   16480:	ldr	r3, [r1]
   16484:	cmp	r3, #0
   16488:	subne	lr, lr, #4
   1648c:	movne	r2, #0
   16490:	beq	164c0 <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   16494:	sub	r3, r3, #4
   16498:	cmp	r2, lr
   1649c:	sub	r3, r3, r5
   164a0:	add	r3, r3, r0
   164a4:	sub	r3, r3, r2
   164a8:	str	r3, [r1]
   164ac:	beq	16528 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   164b0:	ldr	r3, [r1, #4]!
   164b4:	add	r2, r2, #4
   164b8:	cmp	r3, #0
   164bc:	bne	16494 <flatcc_builder_create_offset_vector_direct@@Base+0xa8>
   164c0:	movw	r1, #38640	; 0x96f0
   164c4:	movt	r1, #1
   164c8:	ldr	r3, [pc, #176]	; 16580 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   164cc:	movw	r0, #38832	; 0x97b0
   164d0:	movt	r0, #1
   164d4:	movw	r2, #1463	; 0x5b7
   164d8:	bl	12044 <__assert_fail@plt>
   164dc:	ldr	r8, [pc, #160]	; 16584 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   164e0:	add	ip, ip, #1
   164e4:	add	r6, sp, #88	; 0x58
   164e8:	add	r6, r6, ip, lsl #3
   164ec:	add	r0, r0, r3
   164f0:	mov	ip, r7
   164f4:	str	r0, [sp, #16]
   164f8:	str	r7, [sp, #20]
   164fc:	str	r8, [r6, #-72]	; 0xffffffb8
   16500:	str	r3, [r6, #-68]	; 0xffffffbc
   16504:	b	16478 <flatcc_builder_create_offset_vector_direct@@Base+0x8c>
   16508:	mov	r6, #0
   1650c:	mov	r0, r6
   16510:	add	sp, sp, #88	; 0x58
   16514:	ldrd	r4, [sp]
   16518:	ldrd	r6, [sp, #8]
   1651c:	ldr	r8, [sp, #16]
   16520:	add	sp, sp, #20
   16524:	pop	{pc}		; (ldr pc, [sp], #4)
   16528:	ldr	r5, [r4, #136]	; 0x88
   1652c:	sub	r6, r5, r0
   16530:	cmp	r6, r5
   16534:	bge	16564 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   16538:	mov	r2, ip
   1653c:	mov	r3, r6
   16540:	str	r0, [sp]
   16544:	add	r1, sp, #24
   16548:	ldr	r0, [r4, #36]	; 0x24
   1654c:	ldr	r5, [r4, #44]	; 0x2c
   16550:	blx	r5
   16554:	cmp	r0, #0
   16558:	streq	r6, [r4, #136]	; 0x88
   1655c:	beq	1650c <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   16560:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   16564:	movw	r1, #38640	; 0x96f0
   16568:	movt	r1, #1
   1656c:	ldr	r3, [pc, #20]	; 16588 <flatcc_builder_create_offset_vector_direct@@Base+0x19c>
   16570:	movw	r0, #38832	; 0x97b0
   16574:	movt	r0, #1
   16578:	movw	r2, #647	; 0x287
   1657c:	bl	12044 <__assert_fail@plt>
   16580:	andeq	r9, r1, r8, asr #4
   16584:	andeq	r9, r1, r8, asr #32
   16588:	andeq	r8, r1, ip, asr #31

0001658c <flatcc_builder_end_offset_vector@@Base>:
   1658c:	ldr	r3, [r0, #32]
   16590:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16594:	ldrh	r2, [r3, #14]
   16598:	strd	r6, [sp, #8]
   1659c:	str	r8, [sp, #16]
   165a0:	str	lr, [sp, #20]
   165a4:	sub	sp, sp, #88	; 0x58
   165a8:	cmp	r2, #5
   165ac:	bne	16794 <flatcc_builder_end_offset_vector@@Base+0x208>
   165b0:	ldr	r3, [r3, #20]
   165b4:	cmn	r3, #-1073741823	; 0xc0000001
   165b8:	bhi	166bc <flatcc_builder_end_offset_vector@@Base+0x130>
   165bc:	ldrh	r2, [r0, #128]	; 0x80
   165c0:	mov	r4, r0
   165c4:	add	r5, sp, #12
   165c8:	mov	r1, #1
   165cc:	str	r3, [sp, #12]
   165d0:	ldr	ip, [r4, #136]	; 0x88
   165d4:	str	r1, [sp, #20]
   165d8:	ldr	r0, [r0, #16]
   165dc:	cmp	r2, #3
   165e0:	str	r5, [sp, #24]
   165e4:	movls	r2, #4
   165e8:	and	r5, ip, #3
   165ec:	strhls	r2, [r4, #128]	; 0x80
   165f0:	mov	r2, #4
   165f4:	lsls	lr, r3, #2
   165f8:	moveq	r6, #2
   165fc:	str	r2, [sp, #16]
   16600:	str	r2, [sp, #28]
   16604:	beq	16628 <flatcc_builder_end_offset_vector@@Base+0x9c>
   16608:	mov	r7, #2
   1660c:	add	r2, lr, r2
   16610:	mov	r1, r7
   16614:	mov	r6, #3
   16618:	str	r2, [sp, #16]
   1661c:	str	r7, [sp, #20]
   16620:	str	r0, [sp, #32]
   16624:	str	lr, [sp, #36]	; 0x24
   16628:	cmp	r5, #0
   1662c:	bne	16694 <flatcc_builder_end_offset_vector@@Base+0x108>
   16630:	cmp	r3, #0
   16634:	beq	166e4 <flatcc_builder_end_offset_vector@@Base+0x158>
   16638:	ldr	r3, [r0]
   1663c:	cmp	r3, #0
   16640:	subne	lr, lr, #4
   16644:	movne	r1, #0
   16648:	beq	16678 <flatcc_builder_end_offset_vector@@Base+0xec>
   1664c:	sub	r3, r3, #4
   16650:	cmp	r1, lr
   16654:	sub	r3, r3, ip
   16658:	add	r3, r3, r2
   1665c:	sub	r3, r3, r1
   16660:	str	r3, [r0]
   16664:	beq	166dc <flatcc_builder_end_offset_vector@@Base+0x150>
   16668:	ldr	r3, [r0, #4]!
   1666c:	add	r1, r1, #4
   16670:	cmp	r3, #0
   16674:	bne	1664c <flatcc_builder_end_offset_vector@@Base+0xc0>
   16678:	movw	r1, #38640	; 0x96f0
   1667c:	movt	r1, #1
   16680:	ldr	r3, [pc, #328]	; 167d0 <flatcc_builder_end_offset_vector@@Base+0x244>
   16684:	movw	r0, #38832	; 0x97b0
   16688:	movt	r0, #1
   1668c:	movw	r2, #1463	; 0x5b7
   16690:	bl	12044 <__assert_fail@plt>
   16694:	ldr	r7, [pc, #312]	; 167d4 <flatcc_builder_end_offset_vector@@Base+0x248>
   16698:	add	r1, r1, #1
   1669c:	add	r8, sp, #88	; 0x58
   166a0:	add	r1, r8, r1, lsl #3
   166a4:	add	r2, r2, r5
   166a8:	str	r2, [sp, #16]
   166ac:	str	r6, [sp, #20]
   166b0:	str	r7, [r1, #-72]	; 0xffffffb8
   166b4:	str	r5, [r1, #-68]	; 0xffffffbc
   166b8:	b	16630 <flatcc_builder_end_offset_vector@@Base+0xa4>
   166bc:	mov	r5, #0
   166c0:	mov	r0, r5
   166c4:	add	sp, sp, #88	; 0x58
   166c8:	ldrd	r4, [sp]
   166cc:	ldrd	r6, [sp, #8]
   166d0:	ldr	r8, [sp, #16]
   166d4:	add	sp, sp, #20
   166d8:	pop	{pc}		; (ldr pc, [sp], #4)
   166dc:	ldr	r2, [sp, #16]
   166e0:	ldr	ip, [r4, #136]	; 0x88
   166e4:	sub	r5, ip, r2
   166e8:	cmp	r5, ip
   166ec:	bge	167b4 <flatcc_builder_end_offset_vector@@Base+0x228>
   166f0:	add	r1, sp, #24
   166f4:	mov	r3, r5
   166f8:	str	r2, [sp]
   166fc:	ldr	r2, [sp, #20]
   16700:	ldr	r0, [r4, #36]	; 0x24
   16704:	ldr	r6, [r4, #44]	; 0x2c
   16708:	blx	r6
   1670c:	subs	r1, r0, #0
   16710:	bne	167b0 <flatcc_builder_end_offset_vector@@Base+0x224>
   16714:	cmp	r5, #0
   16718:	str	r5, [r4, #136]	; 0x88
   1671c:	beq	166bc <flatcc_builder_end_offset_vector@@Base+0x130>
   16720:	ldr	r0, [r4, #16]
   16724:	ldr	r2, [r4, #20]
   16728:	bl	12014 <memset@plt>
   1672c:	ldr	r3, [r4, #32]
   16730:	ldr	r0, [r4, #60]	; 0x3c
   16734:	ldr	r2, [r4, #64]	; 0x40
   16738:	ldr	ip, [r3]
   1673c:	ldmib	r3, {r1, lr}
   16740:	add	r0, r0, ip
   16744:	sub	r2, r2, ip
   16748:	str	r0, [r4, #16]
   1674c:	cmp	r2, r1
   16750:	ldrh	r0, [r4, #128]	; 0x80
   16754:	movcs	r2, r1
   16758:	str	lr, [r4, #20]
   1675c:	str	ip, [r4, #28]
   16760:	ldrh	ip, [r4, #130]	; 0x82
   16764:	str	r2, [r4, #24]
   16768:	ldr	r2, [r4, #156]	; 0x9c
   1676c:	str	r1, [r3, #4]
   16770:	cmp	r0, ip
   16774:	sub	r0, r3, #36	; 0x24
   16778:	strhcc	ip, [r4, #128]	; 0x80
   1677c:	ldrh	r1, [r3, #12]
   16780:	sub	r3, r2, #1
   16784:	str	r0, [r4, #32]
   16788:	strh	r1, [r4, #130]	; 0x82
   1678c:	str	r3, [r4, #156]	; 0x9c
   16790:	b	166c0 <flatcc_builder_end_offset_vector@@Base+0x134>
   16794:	movw	r1, #38640	; 0x96f0
   16798:	movt	r1, #1
   1679c:	ldr	r3, [pc, #52]	; 167d8 <flatcc_builder_end_offset_vector@@Base+0x24c>
   167a0:	movw	r0, #39112	; 0x98c8
   167a4:	movt	r0, #1
   167a8:	movw	r2, #1480	; 0x5c8
   167ac:	bl	12044 <__assert_fail@plt>
   167b0:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   167b4:	movw	r1, #38640	; 0x96f0
   167b8:	movt	r1, #1
   167bc:	ldr	r3, [pc, #24]	; 167dc <flatcc_builder_end_offset_vector@@Base+0x250>
   167c0:	movw	r0, #38832	; 0x97b0
   167c4:	movt	r0, #1
   167c8:	movw	r2, #647	; 0x287
   167cc:	bl	12044 <__assert_fail@plt>
   167d0:	andeq	r9, r1, r8, asr #4
   167d4:	andeq	r9, r1, r8, asr #32
   167d8:	andeq	r9, r1, ip, lsr #8
   167dc:	andeq	r8, r1, ip, asr #31

000167e0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   167e0:	ldr	r2, [r0, #32]
   167e4:	strd	r4, [sp, #-16]!
   167e8:	ldrh	ip, [r2, #14]
   167ec:	str	r6, [sp, #8]
   167f0:	str	lr, [sp, #12]
   167f4:	cmp	ip, #5
   167f8:	bne	168b0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   167fc:	ldr	r2, [r2, #20]
   16800:	cmn	r2, #-1073741823	; 0xc0000001
   16804:	bhi	16820 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   16808:	mov	r3, r1
   1680c:	ldr	r1, [r0, #16]
   16810:	mov	r4, r0
   16814:	bl	12cdc <flatcc_builder_default_alloc@@Base+0x388>
   16818:	subs	r5, r0, #0
   1681c:	bne	16838 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   16820:	mov	r5, #0
   16824:	mov	r0, r5
   16828:	ldrd	r4, [sp]
   1682c:	ldr	r6, [sp, #8]
   16830:	add	sp, sp, #12
   16834:	pop	{pc}		; (ldr pc, [sp], #4)
   16838:	mov	r1, #0
   1683c:	ldr	r0, [r4, #16]
   16840:	ldr	r2, [r4, #20]
   16844:	bl	12014 <memset@plt>
   16848:	ldr	r3, [r4, #32]
   1684c:	ldr	r0, [r4, #60]	; 0x3c
   16850:	ldr	r2, [r4, #64]	; 0x40
   16854:	ldr	ip, [r3]
   16858:	ldmib	r3, {r1, lr}
   1685c:	add	r0, r0, ip
   16860:	sub	r2, r2, ip
   16864:	str	r0, [r4, #16]
   16868:	cmp	r2, r1
   1686c:	ldrh	r0, [r4, #128]	; 0x80
   16870:	movcs	r2, r1
   16874:	str	lr, [r4, #20]
   16878:	str	ip, [r4, #28]
   1687c:	ldrh	ip, [r4, #130]	; 0x82
   16880:	str	r2, [r4, #24]
   16884:	ldr	r2, [r4, #156]	; 0x9c
   16888:	str	r1, [r3, #4]
   1688c:	cmp	r0, ip
   16890:	sub	r0, r3, #36	; 0x24
   16894:	strhcc	ip, [r4, #128]	; 0x80
   16898:	ldrh	r1, [r3, #12]
   1689c:	sub	r3, r2, #1
   168a0:	str	r0, [r4, #32]
   168a4:	strh	r1, [r4, #130]	; 0x82
   168a8:	str	r3, [r4, #156]	; 0x9c
   168ac:	b	16824 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   168b0:	movw	r1, #38640	; 0x96f0
   168b4:	movt	r1, #1
   168b8:	ldr	r3, [pc, #12]	; 168cc <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   168bc:	movw	r0, #39112	; 0x98c8
   168c0:	movt	r0, #1
   168c4:	movw	r2, #1493	; 0x5d5
   168c8:	bl	12044 <__assert_fail@plt>
   168cc:	andeq	r9, r1, r8, asr r5

000168d0 <flatcc_builder_offset_vector_edit@@Base>:
   168d0:	ldr	r0, [r0, #16]
   168d4:	bx	lr

000168d8 <flatcc_builder_offset_vector_count@@Base>:
   168d8:	ldr	r3, [r0, #32]
   168dc:	ldr	r0, [r3, #20]
   168e0:	bx	lr

000168e4 <flatcc_builder_create_union_vector@@Base>:
   168e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   168e8:	mov	r4, r1
   168ec:	mov	r1, #4
   168f0:	strd	r6, [sp, #8]
   168f4:	mov	r6, r0
   168f8:	mov	r0, r4
   168fc:	strd	r8, [sp, #16]
   16900:	mov	r5, r2
   16904:	mov	r7, r3
   16908:	str	sl, [sp, #24]
   1690c:	str	lr, [sp, #28]
   16910:	sub	sp, sp, #8
   16914:	bl	12bb8 <flatcc_builder_default_alloc@@Base+0x264>
   16918:	cmp	r0, #0
   1691c:	bne	16a88 <flatcc_builder_create_union_vector@@Base+0x1a4>
   16920:	ldr	ip, [r4, #28]
   16924:	mov	lr, #4
   16928:	mov	r8, #5
   1692c:	mvn	r9, #3
   16930:	ldr	r3, [r4, #32]
   16934:	ldr	r2, [r4, #64]	; 0x40
   16938:	ldr	r1, [r4, #60]	; 0x3c
   1693c:	strh	r8, [r3, #14]
   16940:	str	lr, [r3, #16]
   16944:	sub	r2, r2, ip
   16948:	str	r0, [r3, #20]
   1694c:	mov	r0, r4
   16950:	cmn	r2, #4
   16954:	add	r1, r1, ip
   16958:	mvnhi	r2, #3
   1695c:	str	r1, [r4, #16]
   16960:	mov	r1, r7
   16964:	str	r2, [r4, #24]
   16968:	str	r9, [r3, #4]
   1696c:	bl	14460 <flatcc_builder_extend_offset_vector@@Base>
   16970:	cmp	r0, #0
   16974:	beq	16a88 <flatcc_builder_create_union_vector@@Base+0x1a4>
   16978:	ldr	r8, [r4, #20]
   1697c:	ldr	r3, [r4, #24]
   16980:	add	r2, r7, r8
   16984:	cmp	r2, r3
   16988:	str	r2, [r4, #20]
   1698c:	bcs	16ab4 <flatcc_builder_create_union_vector@@Base+0x1d0>
   16990:	ldr	r1, [r4, #16]
   16994:	adds	r8, r1, r8
   16998:	beq	16a88 <flatcc_builder_create_union_vector@@Base+0x1a4>
   1699c:	cmp	r7, #0
   169a0:	beq	169d0 <flatcc_builder_create_union_vector@@Base+0xec>
   169a4:	add	lr, r5, r7, lsl #3
   169a8:	mov	r2, r5
   169ac:	sub	r0, r8, #1
   169b0:	sub	r3, r1, #4
   169b4:	ldrb	ip, [r2]
   169b8:	add	r2, r2, #8
   169bc:	strb	ip, [r0, #1]!
   169c0:	ldr	ip, [r2, #-4]
   169c4:	cmp	lr, r2
   169c8:	str	ip, [r3, #4]!
   169cc:	bne	169b4 <flatcc_builder_create_union_vector@@Base+0xd0>
   169d0:	mov	r3, r8
   169d4:	mov	r2, r7
   169d8:	mov	r0, r4
   169dc:	bl	12cdc <flatcc_builder_default_alloc@@Base+0x388>
   169e0:	subs	r5, r0, #0
   169e4:	beq	16b14 <flatcc_builder_create_union_vector@@Base+0x230>
   169e8:	mvn	ip, #0
   169ec:	mov	r3, #1
   169f0:	mov	r2, r7
   169f4:	mov	r1, r8
   169f8:	mov	r0, r4
   169fc:	stm	sp, {r3, ip}
   16a00:	bl	1606c <flatcc_builder_create_vector@@Base>
   16a04:	mov	r7, r0
   16a08:	mov	r1, #0
   16a0c:	ldr	r0, [r4, #16]
   16a10:	ldr	r2, [r4, #20]
   16a14:	bl	12014 <memset@plt>
   16a18:	ldr	r3, [r4, #32]
   16a1c:	str	r7, [r6]
   16a20:	ldr	r0, [r4, #60]	; 0x3c
   16a24:	str	r5, [r6, #4]
   16a28:	ldr	r2, [r4, #64]	; 0x40
   16a2c:	ldr	ip, [r3]
   16a30:	ldmib	r3, {r1, lr}
   16a34:	add	r0, r0, ip
   16a38:	sub	r2, r2, ip
   16a3c:	str	r0, [r4, #16]
   16a40:	cmp	r2, r1
   16a44:	ldrh	r0, [r4, #128]	; 0x80
   16a48:	movcs	r2, r1
   16a4c:	str	lr, [r4, #20]
   16a50:	str	ip, [r4, #28]
   16a54:	ldrh	ip, [r4, #130]	; 0x82
   16a58:	str	r2, [r4, #24]
   16a5c:	ldr	r2, [r4, #156]	; 0x9c
   16a60:	str	r1, [r3, #4]
   16a64:	cmp	r0, ip
   16a68:	sub	r0, r3, #36	; 0x24
   16a6c:	strhcc	ip, [r4, #128]	; 0x80
   16a70:	ldrh	r1, [r3, #12]
   16a74:	sub	r3, r2, #1
   16a78:	str	r0, [r4, #32]
   16a7c:	strh	r1, [r4, #130]	; 0x82
   16a80:	str	r3, [r4, #156]	; 0x9c
   16a84:	b	16a94 <flatcc_builder_create_union_vector@@Base+0x1b0>
   16a88:	mov	r3, #0
   16a8c:	str	r3, [r6]
   16a90:	str	r3, [r6, #4]
   16a94:	mov	r0, r6
   16a98:	add	sp, sp, #8
   16a9c:	ldrd	r4, [sp]
   16aa0:	ldrd	r6, [sp, #8]
   16aa4:	ldrd	r8, [sp, #16]
   16aa8:	ldr	sl, [sp, #24]
   16aac:	add	sp, sp, #28
   16ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ab4:	ldr	ip, [r4, #28]
   16ab8:	mov	r0, #1
   16abc:	add	r1, r4, #60	; 0x3c
   16ac0:	mov	r3, r0
   16ac4:	str	r0, [sp]
   16ac8:	ldr	sl, [r4, #48]	; 0x30
   16acc:	add	ip, ip, r0
   16ad0:	ldr	r0, [r4, #40]	; 0x28
   16ad4:	add	r2, ip, r2
   16ad8:	blx	sl
   16adc:	cmp	r0, #0
   16ae0:	bne	16a88 <flatcc_builder_create_union_vector@@Base+0x1a4>
   16ae4:	ldr	r1, [r4, #28]
   16ae8:	ldr	r2, [r4, #32]
   16aec:	ldr	r3, [r4, #64]	; 0x40
   16af0:	ldr	r0, [r4, #60]	; 0x3c
   16af4:	sub	r3, r3, r1
   16af8:	cmn	r3, #4
   16afc:	movhi	r3, r9
   16b00:	add	r1, r0, r1
   16b04:	str	r1, [r4, #16]
   16b08:	str	r3, [r4, #24]
   16b0c:	str	r9, [r2, #4]
   16b10:	b	16994 <flatcc_builder_create_union_vector@@Base+0xb0>
   16b14:	mov	r7, r5
   16b18:	b	16a08 <flatcc_builder_create_union_vector@@Base+0x124>

00016b1c <flatcc_builder_create_union_vector_direct@@Base>:
   16b1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16b20:	strd	r6, [sp, #8]
   16b24:	mov	r6, r0
   16b28:	str	r8, [sp, #16]
   16b2c:	str	lr, [sp, #20]
   16b30:	sub	sp, sp, #88	; 0x58
   16b34:	ldr	r4, [sp, #112]	; 0x70
   16b38:	cmn	r4, #-1073741823	; 0xc0000001
   16b3c:	bhi	16c10 <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   16b40:	mov	r5, r1
   16b44:	mov	r8, r2
   16b48:	mov	r1, r3
   16b4c:	mov	r0, r5
   16b50:	mov	r3, r2
   16b54:	mov	r2, r4
   16b58:	bl	12cdc <flatcc_builder_default_alloc@@Base+0x388>
   16b5c:	subs	r7, r0, #0
   16b60:	beq	16c10 <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   16b64:	ldrh	r3, [r5, #128]	; 0x80
   16b68:	mov	r2, #1
   16b6c:	mov	r1, #4
   16b70:	str	r4, [sp, #12]
   16b74:	ldr	r0, [r5, #136]	; 0x88
   16b78:	str	r1, [sp, #16]
   16b7c:	str	r1, [sp, #28]
   16b80:	cmp	r3, #3
   16b84:	movls	r3, #4
   16b88:	strhls	r3, [r5, #128]	; 0x80
   16b8c:	add	r3, sp, #12
   16b90:	cmp	r4, #0
   16b94:	moveq	ip, #2
   16b98:	strd	r2, [sp, #20]
   16b9c:	sub	r3, r0, r4
   16ba0:	and	r3, r3, #3
   16ba4:	bne	16c38 <flatcc_builder_create_union_vector_direct@@Base+0x11c>
   16ba8:	cmp	r3, #0
   16bac:	beq	16bd8 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   16bb0:	ldr	r4, [pc, #196]	; 16c7c <flatcc_builder_create_union_vector_direct@@Base+0x160>
   16bb4:	add	r2, r2, #1
   16bb8:	add	lr, sp, #88	; 0x58
   16bbc:	add	lr, lr, r2, lsl #3
   16bc0:	add	r1, r1, r3
   16bc4:	mov	r2, ip
   16bc8:	str	r1, [sp, #16]
   16bcc:	str	ip, [sp, #20]
   16bd0:	str	r4, [lr, #-72]	; 0xffffffb8
   16bd4:	str	r3, [lr, #-68]	; 0xffffffbc
   16bd8:	sub	r4, r0, r1
   16bdc:	cmp	r0, r4
   16be0:	ble	16c5c <flatcc_builder_create_union_vector_direct@@Base+0x140>
   16be4:	mov	r3, r4
   16be8:	str	r1, [sp]
   16bec:	add	r1, sp, #24
   16bf0:	ldr	r0, [r5, #36]	; 0x24
   16bf4:	ldr	r8, [r5, #44]	; 0x2c
   16bf8:	blx	r8
   16bfc:	cmp	r0, #0
   16c00:	bne	16c78 <flatcc_builder_create_union_vector_direct@@Base+0x15c>
   16c04:	stm	r6, {r4, r7}
   16c08:	str	r4, [r5, #136]	; 0x88
   16c0c:	b	16c1c <flatcc_builder_create_union_vector_direct@@Base+0x100>
   16c10:	mov	r3, #0
   16c14:	str	r3, [r6]
   16c18:	str	r3, [r6, #4]
   16c1c:	mov	r0, r6
   16c20:	add	sp, sp, #88	; 0x58
   16c24:	ldrd	r4, [sp]
   16c28:	ldrd	r6, [sp, #8]
   16c2c:	ldr	r8, [sp, #16]
   16c30:	add	sp, sp, #20
   16c34:	pop	{pc}		; (ldr pc, [sp], #4)
   16c38:	mov	lr, #2
   16c3c:	add	r1, r4, r1
   16c40:	mov	r2, lr
   16c44:	mov	ip, #3
   16c48:	str	r1, [sp, #16]
   16c4c:	str	lr, [sp, #20]
   16c50:	str	r8, [sp, #32]
   16c54:	str	r4, [sp, #36]	; 0x24
   16c58:	b	16ba8 <flatcc_builder_create_union_vector_direct@@Base+0x8c>
   16c5c:	movw	r1, #38640	; 0x96f0
   16c60:	movt	r1, #1
   16c64:	ldr	r3, [pc, #20]	; 16c80 <flatcc_builder_create_union_vector_direct@@Base+0x164>
   16c68:	movw	r0, #38832	; 0x97b0
   16c6c:	movt	r0, #1
   16c70:	movw	r2, #647	; 0x287
   16c74:	bl	12044 <__assert_fail@plt>
   16c78:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   16c7c:	andeq	r9, r1, r8, asr #32
   16c80:	andeq	r8, r1, ip, asr #31

00016c84 <flatcc_builder_start_union_vector@@Base>:
   16c84:	ldrd	r2, [r0, #156]	; 0x9c
   16c88:	strd	r4, [sp, #-16]!
   16c8c:	mov	r4, r0
   16c90:	str	r6, [sp, #8]
   16c94:	str	lr, [sp, #12]
   16c98:	sub	sp, sp, #8
   16c9c:	add	r1, r2, #1
   16ca0:	cmp	r1, r3
   16ca4:	str	r1, [r0, #156]	; 0x9c
   16ca8:	ble	16dc4 <flatcc_builder_start_union_vector@@Base+0x140>
   16cac:	ldr	r3, [r0, #176]	; 0xb0
   16cb0:	cmp	r3, #0
   16cb4:	cmpgt	r1, r3
   16cb8:	movgt	r3, #1
   16cbc:	movle	r3, #0
   16cc0:	bgt	16dd4 <flatcc_builder_start_union_vector@@Base+0x150>
   16cc4:	add	r2, r2, r2, lsl #3
   16cc8:	ldr	r1, [r0, #88]	; 0x58
   16ccc:	lsl	r5, r2, #2
   16cd0:	add	r2, r5, #36	; 0x24
   16cd4:	cmp	r2, r1
   16cd8:	bls	16cfc <flatcc_builder_start_union_vector@@Base+0x78>
   16cdc:	mov	ip, #4
   16ce0:	add	r1, r0, #84	; 0x54
   16ce4:	ldr	r0, [r0, #40]	; 0x28
   16ce8:	str	ip, [sp]
   16cec:	ldr	r6, [r4, #48]	; 0x30
   16cf0:	blx	r6
   16cf4:	cmp	r0, #0
   16cf8:	bne	16ddc <flatcc_builder_start_union_vector@@Base+0x158>
   16cfc:	ldr	r3, [r4, #84]	; 0x54
   16d00:	add	r3, r3, r5
   16d04:	cmp	r3, #0
   16d08:	str	r3, [r4, #32]
   16d0c:	beq	16dd4 <flatcc_builder_start_union_vector@@Base+0x150>
   16d10:	ldr	r2, [r4, #88]	; 0x58
   16d14:	movw	r0, #36409	; 0x8e39
   16d18:	movt	r0, #14563	; 0x38e3
   16d1c:	ldr	r1, [r4, #176]	; 0xb0
   16d20:	umull	r0, r2, r0, r2
   16d24:	lsr	r2, r2, #3
   16d28:	cmp	r1, #0
   16d2c:	cmpgt	r2, r1
   16d30:	movgt	r2, r1
   16d34:	str	r2, [r4, #160]	; 0xa0
   16d38:	ldr	r2, [r4, #20]
   16d3c:	mvn	r5, #3
   16d40:	mov	lr, #0
   16d44:	ldr	r6, [r4, #28]
   16d48:	ldrh	r0, [r4, #130]	; 0x82
   16d4c:	ldr	ip, [r4, #60]	; 0x3c
   16d50:	ldr	r1, [r4, #64]	; 0x40
   16d54:	str	r2, [r3, #8]
   16d58:	add	r2, r2, r6
   16d5c:	add	r2, r2, #7
   16d60:	strh	r0, [r3, #12]
   16d64:	mov	r0, #4
   16d68:	bic	r2, r2, #7
   16d6c:	add	ip, ip, r2
   16d70:	strh	r0, [r4, #130]	; 0x82
   16d74:	mov	r0, lr
   16d78:	sub	r1, r1, r2
   16d7c:	str	r6, [r3]
   16d80:	mov	r6, #8
   16d84:	cmp	r1, r5
   16d88:	str	lr, [r4, #20]
   16d8c:	movhi	r1, r5
   16d90:	str	r2, [r4, #28]
   16d94:	mov	r2, #7
   16d98:	strh	r2, [r3, #14]
   16d9c:	str	r6, [r3, #16]
   16da0:	str	lr, [r3, #20]
   16da4:	str	ip, [r4, #16]
   16da8:	str	r1, [r4, #24]
   16dac:	str	r5, [r3, #4]
   16db0:	add	sp, sp, #8
   16db4:	ldrd	r4, [sp]
   16db8:	ldr	r6, [sp, #8]
   16dbc:	add	sp, sp, #12
   16dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc4:	ldr	r3, [r0, #32]
   16dc8:	add	r3, r3, #36	; 0x24
   16dcc:	str	r3, [r0, #32]
   16dd0:	b	16d38 <flatcc_builder_start_union_vector@@Base+0xb4>
   16dd4:	mvn	r0, #0
   16dd8:	b	16db0 <flatcc_builder_start_union_vector@@Base+0x12c>
   16ddc:	bl	12a78 <flatcc_builder_default_alloc@@Base+0x124>

00016de0 <flatcc_builder_end_union_vector@@Base>:
   16de0:	ldr	r3, [r1, #32]
   16de4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16de8:	ldrh	r2, [r3, #14]
   16dec:	strd	r6, [sp, #8]
   16df0:	strd	r8, [sp, #16]
   16df4:	str	lr, [sp, #24]
   16df8:	sub	sp, sp, #12
   16dfc:	cmp	r2, #7
   16e00:	bne	16fbc <flatcc_builder_end_union_vector@@Base+0x1dc>
   16e04:	ldr	r5, [r3, #20]
   16e08:	mov	r4, r1
   16e0c:	mov	r6, r0
   16e10:	ldr	r8, [r1, #20]
   16e14:	ldr	r3, [r1, #24]
   16e18:	lsl	r7, r5, #2
   16e1c:	add	r2, r7, r5
   16e20:	add	r2, r2, r8
   16e24:	cmp	r2, r3
   16e28:	str	r2, [r1, #20]
   16e2c:	bcs	16f3c <flatcc_builder_end_union_vector@@Base+0x15c>
   16e30:	ldr	r3, [r1, #16]
   16e34:	adds	r1, r3, r8
   16e38:	beq	16fa4 <flatcc_builder_end_union_vector@@Base+0x1c4>
   16e3c:	cmp	r5, #0
   16e40:	add	r7, r1, r7
   16e44:	subne	r0, r7, #1
   16e48:	addne	lr, r3, r5, lsl #3
   16e4c:	subne	r2, r1, #4
   16e50:	beq	16e70 <flatcc_builder_end_union_vector@@Base+0x90>
   16e54:	ldrb	ip, [r3]
   16e58:	add	r3, r3, #8
   16e5c:	strb	ip, [r0, #1]!
   16e60:	ldr	ip, [r3, #-4]
   16e64:	cmp	lr, r3
   16e68:	str	ip, [r2, #4]!
   16e6c:	bne	16e54 <flatcc_builder_end_union_vector@@Base+0x74>
   16e70:	mov	r3, r7
   16e74:	mov	r2, r5
   16e78:	mov	r0, r4
   16e7c:	bl	12cdc <flatcc_builder_default_alloc@@Base+0x388>
   16e80:	subs	r8, r0, #0
   16e84:	beq	16fb4 <flatcc_builder_end_union_vector@@Base+0x1d4>
   16e88:	mvn	ip, #0
   16e8c:	mov	r3, #1
   16e90:	mov	r2, r5
   16e94:	mov	r1, r7
   16e98:	mov	r0, r4
   16e9c:	stm	sp, {r3, ip}
   16ea0:	bl	1606c <flatcc_builder_create_vector@@Base>
   16ea4:	mov	r5, r0
   16ea8:	mov	r1, #0
   16eac:	ldr	r0, [r4, #16]
   16eb0:	ldr	r2, [r4, #20]
   16eb4:	bl	12014 <memset@plt>
   16eb8:	ldr	r3, [r4, #32]
   16ebc:	stm	r6, {r5, r8}
   16ec0:	ldr	r0, [r4, #60]	; 0x3c
   16ec4:	ldr	r2, [r4, #64]	; 0x40
   16ec8:	ldr	ip, [r3]
   16ecc:	ldmib	r3, {r1, lr}
   16ed0:	add	r0, r0, ip
   16ed4:	sub	r2, r2, ip
   16ed8:	str	r0, [r4, #16]
   16edc:	cmp	r2, r1
   16ee0:	ldrh	r0, [r4, #128]	; 0x80
   16ee4:	movcs	r2, r1
   16ee8:	str	lr, [r4, #20]
   16eec:	str	ip, [r4, #28]
   16ef0:	ldrh	ip, [r4, #130]	; 0x82
   16ef4:	str	r2, [r4, #24]
   16ef8:	ldr	r2, [r4, #156]	; 0x9c
   16efc:	str	r1, [r3, #4]
   16f00:	cmp	r0, ip
   16f04:	sub	r0, r3, #36	; 0x24
   16f08:	strhcc	ip, [r4, #128]	; 0x80
   16f0c:	ldrh	r1, [r3, #12]
   16f10:	sub	r3, r2, #1
   16f14:	str	r0, [r4, #32]
   16f18:	strh	r1, [r4, #130]	; 0x82
   16f1c:	str	r3, [r4, #156]	; 0x9c
   16f20:	mov	r0, r6
   16f24:	add	sp, sp, #12
   16f28:	ldrd	r4, [sp]
   16f2c:	ldrd	r6, [sp, #8]
   16f30:	ldrd	r8, [sp, #16]
   16f34:	add	sp, sp, #24
   16f38:	pop	{pc}		; (ldr pc, [sp], #4)
   16f3c:	ldr	ip, [r4, #28]
   16f40:	mov	r0, #1
   16f44:	add	r1, r1, #60	; 0x3c
   16f48:	mov	r3, r0
   16f4c:	str	r0, [sp]
   16f50:	ldr	r9, [r4, #48]	; 0x30
   16f54:	add	ip, ip, r0
   16f58:	ldr	r0, [r4, #40]	; 0x28
   16f5c:	add	r2, ip, r2
   16f60:	blx	r9
   16f64:	cmp	r0, #0
   16f68:	bne	16fa4 <flatcc_builder_end_union_vector@@Base+0x1c4>
   16f6c:	ldr	r1, [r4, #28]
   16f70:	ldr	r3, [r4, #60]	; 0x3c
   16f74:	ldr	r2, [r4, #64]	; 0x40
   16f78:	add	r3, r3, r1
   16f7c:	sub	r2, r2, r1
   16f80:	mvn	r1, #3
   16f84:	str	r3, [r4, #16]
   16f88:	cmn	r2, #4
   16f8c:	mvnhi	r2, #3
   16f90:	str	r2, [r4, #24]
   16f94:	ldr	r2, [r4, #32]
   16f98:	str	r1, [r2, #4]
   16f9c:	adds	r1, r3, r8
   16fa0:	bne	16e3c <flatcc_builder_end_union_vector@@Base+0x5c>
   16fa4:	mov	r3, #0
   16fa8:	str	r3, [r6]
   16fac:	str	r3, [r6, #4]
   16fb0:	b	16f20 <flatcc_builder_end_union_vector@@Base+0x140>
   16fb4:	mov	r5, r8
   16fb8:	b	16ea8 <flatcc_builder_end_union_vector@@Base+0xc8>
   16fbc:	movw	r1, #38640	; 0x96f0
   16fc0:	movt	r1, #1
   16fc4:	ldr	r3, [pc, #12]	; 16fd8 <flatcc_builder_end_union_vector@@Base+0x1f8>
   16fc8:	movw	r0, #39420	; 0x99fc
   16fcc:	movt	r0, #1
   16fd0:	movw	r2, #1617	; 0x651
   16fd4:	bl	12044 <__assert_fail@plt>
   16fd8:	andeq	r9, r1, r4, lsl #11

00016fdc <flatcc_builder_union_vector_edit@@Base>:
   16fdc:	ldr	r0, [r0, #16]
   16fe0:	bx	lr

00016fe4 <flatcc_builder_union_vector_count@@Base>:
   16fe4:	ldr	r3, [r0, #32]
   16fe8:	ldr	r0, [r3, #20]
   16fec:	bx	lr

00016ff0 <flatcc_builder_extend_union_vector@@Base>:
   16ff0:	ldr	ip, [r0, #32]
   16ff4:	strd	r4, [sp, #-20]!	; 0xffffffec
   16ff8:	mov	r4, r0
   16ffc:	ldr	r3, [ip, #20]
   17000:	strd	r6, [sp, #8]
   17004:	str	lr, [sp, #16]
   17008:	sub	sp, sp, #12
   1700c:	adds	r3, r1, r3
   17010:	movcs	r2, #1
   17014:	movcc	r2, #0
   17018:	cmn	r3, #-536870911	; 0xe0000001
   1701c:	movls	r0, #0
   17020:	movhi	r0, #1
   17024:	orrs	r5, r2, r0
   17028:	bne	170d0 <flatcc_builder_extend_union_vector@@Base+0xe0>
   1702c:	ldr	r6, [r4, #20]
   17030:	str	r3, [ip, #20]
   17034:	ldr	r3, [r4, #24]
   17038:	add	r2, r6, r1, lsl #3
   1703c:	cmp	r2, r3
   17040:	str	r2, [r4, #20]
   17044:	bcs	17064 <flatcc_builder_extend_union_vector@@Base+0x74>
   17048:	ldr	r0, [r4, #16]
   1704c:	add	r0, r0, r6
   17050:	add	sp, sp, #12
   17054:	ldrd	r4, [sp]
   17058:	ldrd	r6, [sp, #8]
   1705c:	add	sp, sp, #16
   17060:	pop	{pc}		; (ldr pc, [sp], #4)
   17064:	ldr	ip, [r4, #28]
   17068:	mov	r0, #1
   1706c:	add	r1, r4, #60	; 0x3c
   17070:	mov	r3, r0
   17074:	str	r0, [sp]
   17078:	ldr	r7, [r4, #48]	; 0x30
   1707c:	add	ip, ip, r0
   17080:	ldr	r0, [r4, #40]	; 0x28
   17084:	add	r2, ip, r2
   17088:	blx	r7
   1708c:	cmp	r0, #0
   17090:	bne	170c8 <flatcc_builder_extend_union_vector@@Base+0xd8>
   17094:	ldr	r2, [r4, #28]
   17098:	ldr	r0, [r4, #60]	; 0x3c
   1709c:	ldr	r3, [r4, #64]	; 0x40
   170a0:	add	r0, r0, r2
   170a4:	sub	r3, r3, r2
   170a8:	mvn	r2, #3
   170ac:	str	r0, [r4, #16]
   170b0:	cmn	r3, #4
   170b4:	mvnhi	r3, #3
   170b8:	str	r3, [r4, #24]
   170bc:	ldr	r3, [r4, #32]
   170c0:	str	r2, [r3, #4]
   170c4:	b	1704c <flatcc_builder_extend_union_vector@@Base+0x5c>
   170c8:	mov	r0, r5
   170cc:	b	17050 <flatcc_builder_extend_union_vector@@Base+0x60>
   170d0:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>

000170d4 <flatcc_builder_truncate_union_vector@@Base>:
   170d4:	mov	r3, r0
   170d8:	ldr	r0, [r0, #32]
   170dc:	str	r4, [sp, #-8]!
   170e0:	ldrh	r2, [r0, #14]
   170e4:	str	lr, [sp, #4]
   170e8:	cmp	r2, #7
   170ec:	bne	1713c <flatcc_builder_truncate_union_vector@@Base+0x68>
   170f0:	mov	lr, r1
   170f4:	ldr	r1, [r0, #20]
   170f8:	cmp	r1, lr
   170fc:	bcc	17158 <flatcc_builder_truncate_union_vector@@Base+0x84>
   17100:	ldr	r2, [r0, #16]
   17104:	sub	ip, r1, lr
   17108:	mov	r1, #0
   1710c:	str	ip, [r0, #20]
   17110:	ldr	r0, [r3, #16]
   17114:	ldr	ip, [r3, #20]
   17118:	mul	r2, r2, lr
   1711c:	sub	ip, ip, r2
   17120:	add	r0, r0, ip
   17124:	str	ip, [r3, #20]
   17128:	bl	12014 <memset@plt>
   1712c:	ldr	r4, [sp]
   17130:	add	sp, sp, #4
   17134:	mov	r0, #0
   17138:	pop	{pc}		; (ldr pc, [sp], #4)
   1713c:	movw	r1, #38640	; 0x96f0
   17140:	movt	r1, #1
   17144:	ldr	r3, [pc, #40]	; 17174 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   17148:	movw	r0, #39420	; 0x99fc
   1714c:	movt	r0, #1
   17150:	movw	r2, #1665	; 0x681
   17154:	bl	12044 <__assert_fail@plt>
   17158:	movw	r1, #38640	; 0x96f0
   1715c:	movt	r1, #1
   17160:	ldr	r3, [pc, #12]	; 17174 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   17164:	movw	r0, #39200	; 0x9920
   17168:	movt	r0, #1
   1716c:	movw	r2, #1666	; 0x682
   17170:	bl	12044 <__assert_fail@plt>
   17174:	andeq	r9, r1, r4, lsr #11

00017178 <flatcc_builder_union_vector_push@@Base>:
   17178:	strd	r4, [sp, #-20]!	; 0xffffffec
   1717c:	strd	r6, [sp, #8]
   17180:	str	lr, [sp, #16]
   17184:	sub	sp, sp, #20
   17188:	add	r3, sp, #16
   1718c:	stmdb	r3, {r1, r2}
   17190:	ldr	r2, [r0, #32]
   17194:	ldrh	r3, [r2, #14]
   17198:	cmp	r3, #7
   1719c:	bne	17260 <flatcc_builder_union_vector_push@@Base+0xe8>
   171a0:	ldr	r3, [r2, #20]
   171a4:	cmn	r3, #-536870911	; 0xe0000001
   171a8:	beq	17258 <flatcc_builder_union_vector_push@@Base+0xe0>
   171ac:	ldr	r5, [r0, #20]
   171b0:	add	r3, r3, #1
   171b4:	mov	r4, r0
   171b8:	ldr	r1, [r0, #24]
   171bc:	str	r3, [r2, #20]
   171c0:	add	r3, r5, #8
   171c4:	cmp	r3, r1
   171c8:	str	r3, [r0, #20]
   171cc:	bcs	171f4 <flatcc_builder_union_vector_push@@Base+0x7c>
   171d0:	ldr	r3, [r0, #16]
   171d4:	adds	r0, r3, r5
   171d8:	ldrdne	r6, [sp, #8]
   171dc:	strdne	r6, [r3, r5]
   171e0:	add	sp, sp, #20
   171e4:	ldrd	r4, [sp]
   171e8:	ldrd	r6, [sp, #8]
   171ec:	add	sp, sp, #16
   171f0:	pop	{pc}		; (ldr pc, [sp], #4)
   171f4:	ldr	r2, [r4, #28]
   171f8:	mov	r0, #1
   171fc:	add	r1, r4, #60	; 0x3c
   17200:	mov	r3, r0
   17204:	str	r0, [sp]
   17208:	ldr	r0, [r4, #40]	; 0x28
   1720c:	add	r2, r5, r2
   17210:	ldr	r6, [r4, #48]	; 0x30
   17214:	add	r2, r2, #9
   17218:	blx	r6
   1721c:	cmp	r0, #0
   17220:	bne	17258 <flatcc_builder_union_vector_push@@Base+0xe0>
   17224:	ldr	r1, [r4, #28]
   17228:	ldr	r3, [r4, #60]	; 0x3c
   1722c:	ldr	r2, [r4, #64]	; 0x40
   17230:	add	r3, r3, r1
   17234:	sub	r2, r2, r1
   17238:	mvn	r1, #3
   1723c:	str	r3, [r4, #16]
   17240:	cmn	r2, #4
   17244:	mvnhi	r2, #3
   17248:	str	r2, [r4, #24]
   1724c:	ldr	r2, [r4, #32]
   17250:	str	r1, [r2, #4]
   17254:	b	171d4 <flatcc_builder_union_vector_push@@Base+0x5c>
   17258:	mov	r0, #0
   1725c:	b	171e0 <flatcc_builder_union_vector_push@@Base+0x68>
   17260:	movw	r1, #38640	; 0x96f0
   17264:	movt	r1, #1
   17268:	ldr	r3, [pc, #12]	; 1727c <flatcc_builder_union_vector_push@@Base+0x104>
   1726c:	movw	r0, #39420	; 0x99fc
   17270:	movt	r0, #1
   17274:	movw	r2, #1677	; 0x68d
   17278:	bl	12044 <__assert_fail@plt>
   1727c:	andeq	r9, r1, ip, asr #11

00017280 <flatcc_builder_append_union_vector@@Base>:
   17280:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17284:	mov	r5, r0
   17288:	ldr	r0, [r0, #32]
   1728c:	ldrh	r3, [r0, #14]
   17290:	strd	r6, [sp, #8]
   17294:	strd	r8, [sp, #16]
   17298:	str	lr, [sp, #24]
   1729c:	sub	sp, sp, #12
   172a0:	cmp	r3, #7
   172a4:	bne	1739c <flatcc_builder_append_union_vector@@Base+0x11c>
   172a8:	ldr	r3, [r0, #20]
   172ac:	mov	r7, r1
   172b0:	adds	r1, r2, r3
   172b4:	movcs	r4, #1
   172b8:	movcc	r4, #0
   172bc:	cmn	r1, #-536870911	; 0xe0000001
   172c0:	movls	r3, #0
   172c4:	movhi	r3, #1
   172c8:	orrs	r4, r4, r3
   172cc:	bne	17398 <flatcc_builder_append_union_vector@@Base+0x118>
   172d0:	ldr	r8, [r5, #20]
   172d4:	lsl	r6, r2, #3
   172d8:	ldr	r3, [r5, #24]
   172dc:	str	r1, [r0, #20]
   172e0:	add	ip, r6, r8
   172e4:	cmp	ip, r3
   172e8:	str	ip, [r5, #20]
   172ec:	bcs	1732c <flatcc_builder_append_union_vector@@Base+0xac>
   172f0:	ldr	r3, [r5, #16]
   172f4:	adds	r3, r3, r8
   172f8:	beq	17310 <flatcc_builder_append_union_vector@@Base+0x90>
   172fc:	mov	r0, r3
   17300:	mov	r2, r6
   17304:	mov	r1, r7
   17308:	bl	11f90 <memcpy@plt>
   1730c:	mov	r3, r0
   17310:	mov	r0, r3
   17314:	add	sp, sp, #12
   17318:	ldrd	r4, [sp]
   1731c:	ldrd	r6, [sp, #8]
   17320:	ldrd	r8, [sp, #16]
   17324:	add	sp, sp, #24
   17328:	pop	{pc}		; (ldr pc, [sp], #4)
   1732c:	ldr	r2, [r5, #28]
   17330:	mov	r0, #1
   17334:	add	r1, r5, #60	; 0x3c
   17338:	mov	r3, r0
   1733c:	str	r0, [sp]
   17340:	ldr	r9, [r5, #48]	; 0x30
   17344:	add	r2, r2, r0
   17348:	ldr	r0, [r5, #40]	; 0x28
   1734c:	add	r2, r2, ip
   17350:	blx	r9
   17354:	cmp	r0, #0
   17358:	bne	17390 <flatcc_builder_append_union_vector@@Base+0x110>
   1735c:	ldr	r1, [r5, #28]
   17360:	ldr	r3, [r5, #60]	; 0x3c
   17364:	ldr	r2, [r5, #64]	; 0x40
   17368:	add	r3, r3, r1
   1736c:	sub	r2, r2, r1
   17370:	mvn	r1, #3
   17374:	str	r3, [r5, #16]
   17378:	cmn	r2, #4
   1737c:	mvnhi	r2, #3
   17380:	str	r2, [r5, #24]
   17384:	ldr	r2, [r5, #32]
   17388:	str	r1, [r2, #4]
   1738c:	b	172f4 <flatcc_builder_append_union_vector@@Base+0x74>
   17390:	mov	r3, r4
   17394:	b	17310 <flatcc_builder_append_union_vector@@Base+0x90>
   17398:	bl	12b18 <flatcc_builder_default_alloc@@Base+0x1c4>
   1739c:	movw	r1, #38640	; 0x96f0
   173a0:	movt	r1, #1
   173a4:	ldr	r3, [pc, #12]	; 173b8 <flatcc_builder_append_union_vector@@Base+0x138>
   173a8:	movw	r0, #39420	; 0x99fc
   173ac:	movt	r0, #1
   173b0:	movw	r2, #1692	; 0x69c
   173b4:	bl	12044 <__assert_fail@plt>
   173b8:	strdeq	r9, [r1], -r0

000173bc <flatcc_builder_create_string@@Base>:
   173bc:	strd	r4, [sp, #-16]!
   173c0:	mov	r4, r0
   173c4:	mov	ip, #4
   173c8:	str	r6, [sp, #8]
   173cc:	cmp	r2, #0
   173d0:	str	lr, [sp, #12]
   173d4:	sub	sp, sp, #88	; 0x58
   173d8:	moveq	r6, #2
   173dc:	ldr	lr, [r0, #136]	; 0x88
   173e0:	add	r3, sp, #12
   173e4:	str	r2, [sp, #12]
   173e8:	str	r3, [sp, #24]
   173ec:	mov	r3, #1
   173f0:	moveq	r1, r3
   173f4:	str	ip, [sp, #28]
   173f8:	sub	r0, lr, r2
   173fc:	sub	r0, r0, #1
   17400:	and	r0, r0, #3
   17404:	add	r0, r0, r3
   17408:	beq	17420 <flatcc_builder_create_string@@Base+0x64>
   1740c:	add	ip, r2, ip
   17410:	mov	r6, #3
   17414:	str	r1, [sp, #32]
   17418:	mov	r1, #2
   1741c:	str	r2, [sp, #36]	; 0x24
   17420:	ldr	r3, [pc, #136]	; 174b0 <flatcc_builder_create_string@@Base+0xf4>
   17424:	add	r1, r1, #1
   17428:	add	r2, sp, #88	; 0x58
   1742c:	add	ip, r0, ip
   17430:	add	r1, r2, r1, lsl #3
   17434:	sub	r5, lr, ip
   17438:	cmp	lr, r5
   1743c:	str	ip, [sp, #16]
   17440:	str	r6, [sp, #20]
   17444:	str	r3, [r1, #-72]	; 0xffffffb8
   17448:	str	r0, [r1, #-68]	; 0xffffffbc
   1744c:	ble	17490 <flatcc_builder_create_string@@Base+0xd4>
   17450:	mov	r2, r6
   17454:	mov	r3, r5
   17458:	str	ip, [sp]
   1745c:	add	r1, sp, #24
   17460:	ldr	r0, [r4, #36]	; 0x24
   17464:	ldr	r6, [r4, #44]	; 0x2c
   17468:	blx	r6
   1746c:	cmp	r0, #0
   17470:	bne	174ac <flatcc_builder_create_string@@Base+0xf0>
   17474:	mov	r0, r5
   17478:	str	r5, [r4, #136]	; 0x88
   1747c:	add	sp, sp, #88	; 0x58
   17480:	ldrd	r4, [sp]
   17484:	ldr	r6, [sp, #8]
   17488:	add	sp, sp, #12
   1748c:	pop	{pc}		; (ldr pc, [sp], #4)
   17490:	movw	r1, #38640	; 0x96f0
   17494:	movt	r1, #1
   17498:	movw	r0, #38832	; 0x97b0
   1749c:	movt	r0, #1
   174a0:	sub	r3, r3, #124	; 0x7c
   174a4:	movw	r2, #647	; 0x287
   174a8:	bl	12044 <__assert_fail@plt>
   174ac:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   174b0:	andeq	r9, r1, r8, asr #32

000174b4 <flatcc_builder_create_string_str@@Base>:
   174b4:	strd	r4, [sp, #-16]!
   174b8:	mov	r4, r0
   174bc:	mov	r0, r1
   174c0:	str	r6, [sp, #8]
   174c4:	mov	r6, r1
   174c8:	str	lr, [sp, #12]
   174cc:	sub	sp, sp, #88	; 0x58
   174d0:	bl	11ffc <strlen@plt>
   174d4:	ldr	r5, [r4, #136]	; 0x88
   174d8:	mov	r2, #4
   174dc:	add	r1, sp, #12
   174e0:	mov	r3, #1
   174e4:	cmp	r0, #0
   174e8:	str	r0, [sp, #12]
   174ec:	str	r1, [sp, #24]
   174f0:	str	r2, [sp, #28]
   174f4:	sub	ip, r5, #1
   174f8:	sub	ip, ip, r0
   174fc:	and	ip, ip, #3
   17500:	add	ip, ip, r3
   17504:	beq	17588 <flatcc_builder_create_string_str@@Base+0xd4>
   17508:	add	lr, r0, r2
   1750c:	mov	r1, #2
   17510:	str	r6, [sp, #32]
   17514:	mov	r2, #3
   17518:	str	r0, [sp, #36]	; 0x24
   1751c:	ldr	r3, [pc, #148]	; 175b8 <flatcc_builder_create_string_str@@Base+0x104>
   17520:	add	r0, ip, lr
   17524:	add	r1, r1, #1
   17528:	add	lr, sp, #88	; 0x58
   1752c:	sub	r6, r5, r0
   17530:	add	r1, lr, r1, lsl #3
   17534:	cmp	r5, r6
   17538:	str	r0, [sp, #16]
   1753c:	str	r2, [sp, #20]
   17540:	str	r3, [r1, #-72]	; 0xffffffb8
   17544:	str	ip, [r1, #-68]	; 0xffffffbc
   17548:	ble	17598 <flatcc_builder_create_string_str@@Base+0xe4>
   1754c:	mov	r3, r6
   17550:	add	r1, sp, #24
   17554:	str	r0, [sp]
   17558:	ldr	r0, [r4, #36]	; 0x24
   1755c:	ldr	r5, [r4, #44]	; 0x2c
   17560:	blx	r5
   17564:	cmp	r0, #0
   17568:	bne	175b4 <flatcc_builder_create_string_str@@Base+0x100>
   1756c:	mov	r0, r6
   17570:	str	r6, [r4, #136]	; 0x88
   17574:	add	sp, sp, #88	; 0x58
   17578:	ldrd	r4, [sp]
   1757c:	ldr	r6, [sp, #8]
   17580:	add	sp, sp, #12
   17584:	pop	{pc}		; (ldr pc, [sp], #4)
   17588:	mov	lr, r2
   1758c:	mov	r1, r3
   17590:	mov	r2, #2
   17594:	b	1751c <flatcc_builder_create_string_str@@Base+0x68>
   17598:	movw	r1, #38640	; 0x96f0
   1759c:	movt	r1, #1
   175a0:	movw	r0, #38832	; 0x97b0
   175a4:	movt	r0, #1
   175a8:	sub	r3, r3, #124	; 0x7c
   175ac:	movw	r2, #647	; 0x287
   175b0:	bl	12044 <__assert_fail@plt>
   175b4:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   175b8:	andeq	r9, r1, r8, asr #32

000175bc <flatcc_builder_create_string_strn@@Base>:
   175bc:	strd	r4, [sp, #-16]!
   175c0:	mov	r4, r0
   175c4:	mov	r5, r2
   175c8:	str	r6, [sp, #8]
   175cc:	mov	r6, r1
   175d0:	mov	r1, #0
   175d4:	mov	r0, r6
   175d8:	str	lr, [sp, #12]
   175dc:	sub	sp, sp, #88	; 0x58
   175e0:	bl	12020 <memchr@plt>
   175e4:	ldr	lr, [r4, #136]	; 0x88
   175e8:	cmp	r0, #0
   175ec:	mov	ip, #4
   175f0:	subne	r5, r0, r6
   175f4:	add	r3, sp, #12
   175f8:	cmp	r5, #0
   175fc:	mov	r0, #1
   17600:	moveq	r2, #2
   17604:	str	r5, [sp, #12]
   17608:	str	r3, [sp, #24]
   1760c:	sub	r1, lr, #1
   17610:	str	ip, [sp, #28]
   17614:	sub	r1, r1, r5
   17618:	and	r1, r1, #3
   1761c:	add	r1, r1, r0
   17620:	beq	17638 <flatcc_builder_create_string_strn@@Base+0x7c>
   17624:	add	ip, r5, ip
   17628:	mov	r2, #3
   1762c:	str	r6, [sp, #32]
   17630:	mov	r0, #2
   17634:	str	r5, [sp, #36]	; 0x24
   17638:	ldr	r3, [pc, #132]	; 176c4 <flatcc_builder_create_string_strn@@Base+0x108>
   1763c:	add	r5, sp, #88	; 0x58
   17640:	add	r0, r0, #1
   17644:	add	r0, r5, r0, lsl #3
   17648:	add	ip, r1, ip
   1764c:	sub	r5, lr, ip
   17650:	cmp	lr, r5
   17654:	str	ip, [sp, #16]
   17658:	str	r2, [sp, #20]
   1765c:	str	r3, [r0, #-72]	; 0xffffffb8
   17660:	str	r1, [r0, #-68]	; 0xffffffbc
   17664:	ble	176a4 <flatcc_builder_create_string_strn@@Base+0xe8>
   17668:	mov	r3, r5
   1766c:	add	r1, sp, #24
   17670:	str	ip, [sp]
   17674:	ldr	r0, [r4, #36]	; 0x24
   17678:	ldr	r6, [r4, #44]	; 0x2c
   1767c:	blx	r6
   17680:	cmp	r0, #0
   17684:	bne	176c0 <flatcc_builder_create_string_strn@@Base+0x104>
   17688:	mov	r0, r5
   1768c:	str	r5, [r4, #136]	; 0x88
   17690:	add	sp, sp, #88	; 0x58
   17694:	ldrd	r4, [sp]
   17698:	ldr	r6, [sp, #8]
   1769c:	add	sp, sp, #12
   176a0:	pop	{pc}		; (ldr pc, [sp], #4)
   176a4:	movw	r1, #38640	; 0x96f0
   176a8:	movt	r1, #1
   176ac:	movw	r0, #38832	; 0x97b0
   176b0:	movt	r0, #1
   176b4:	sub	r3, r3, #124	; 0x7c
   176b8:	movw	r2, #647	; 0x287
   176bc:	bl	12044 <__assert_fail@plt>
   176c0:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   176c4:	andeq	r9, r1, r8, asr #32

000176c8 <flatcc_builder_end_string@@Base>:
   176c8:	ldr	r3, [r0, #32]
   176cc:	strd	r4, [sp, #-16]!
   176d0:	ldrh	r2, [r3, #14]
   176d4:	str	r6, [sp, #8]
   176d8:	str	lr, [sp, #12]
   176dc:	sub	sp, sp, #88	; 0x58
   176e0:	cmp	r2, #6
   176e4:	bne	1786c <flatcc_builder_end_string@@Base+0x1a4>
   176e8:	ldr	r3, [r3, #20]
   176ec:	mov	r4, r0
   176f0:	ldr	r2, [r0, #20]
   176f4:	cmp	r3, r2
   176f8:	bne	17850 <flatcc_builder_end_string@@Base+0x188>
   176fc:	ldr	lr, [r4, #136]	; 0x88
   17700:	add	r2, sp, #12
   17704:	mov	ip, #4
   17708:	cmp	r3, #0
   1770c:	mov	r0, #1
   17710:	str	r3, [sp, #12]
   17714:	str	r2, [sp, #24]
   17718:	str	ip, [sp, #28]
   1771c:	ldr	r2, [r4, #16]
   17720:	moveq	r2, #2
   17724:	sub	r1, lr, r3
   17728:	sub	r1, r1, #1
   1772c:	and	r1, r1, #3
   17730:	add	r1, r1, r0
   17734:	bne	1781c <flatcc_builder_end_string@@Base+0x154>
   17738:	ldr	r3, [pc, #328]	; 17888 <flatcc_builder_end_string@@Base+0x1c0>
   1773c:	add	r5, sp, #88	; 0x58
   17740:	add	r0, r0, #1
   17744:	add	r0, r5, r0, lsl #3
   17748:	add	ip, r1, ip
   1774c:	sub	r5, lr, ip
   17750:	cmp	lr, r5
   17754:	str	ip, [sp, #16]
   17758:	str	r2, [sp, #20]
   1775c:	str	r3, [r0, #-72]	; 0xffffffb8
   17760:	str	r1, [r0, #-68]	; 0xffffffbc
   17764:	ble	17834 <flatcc_builder_end_string@@Base+0x16c>
   17768:	add	r1, sp, #24
   1776c:	mov	r3, r5
   17770:	str	ip, [sp]
   17774:	ldr	r0, [r4, #36]	; 0x24
   17778:	ldr	r6, [r4, #44]	; 0x2c
   1777c:	blx	r6
   17780:	subs	r1, r0, #0
   17784:	bne	17830 <flatcc_builder_end_string@@Base+0x168>
   17788:	cmp	r5, #0
   1778c:	str	r5, [r4, #136]	; 0x88
   17790:	beq	17804 <flatcc_builder_end_string@@Base+0x13c>
   17794:	ldr	r0, [r4, #16]
   17798:	ldr	r2, [r4, #20]
   1779c:	bl	12014 <memset@plt>
   177a0:	ldr	r3, [r4, #32]
   177a4:	ldr	r0, [r4, #60]	; 0x3c
   177a8:	ldr	r2, [r4, #64]	; 0x40
   177ac:	ldr	ip, [r3]
   177b0:	ldmib	r3, {r1, lr}
   177b4:	add	r0, r0, ip
   177b8:	sub	r2, r2, ip
   177bc:	str	r0, [r4, #16]
   177c0:	cmp	r2, r1
   177c4:	ldrh	r0, [r4, #128]	; 0x80
   177c8:	movcs	r2, r1
   177cc:	str	lr, [r4, #20]
   177d0:	str	ip, [r4, #28]
   177d4:	ldrh	ip, [r4, #130]	; 0x82
   177d8:	str	r2, [r4, #24]
   177dc:	ldr	r2, [r4, #156]	; 0x9c
   177e0:	str	r1, [r3, #4]
   177e4:	cmp	r0, ip
   177e8:	sub	r0, r3, #36	; 0x24
   177ec:	strhcc	ip, [r4, #128]	; 0x80
   177f0:	ldrh	r1, [r3, #12]
   177f4:	sub	r3, r2, #1
   177f8:	str	r0, [r4, #32]
   177fc:	strh	r1, [r4, #130]	; 0x82
   17800:	str	r3, [r4, #156]	; 0x9c
   17804:	mov	r0, r5
   17808:	add	sp, sp, #88	; 0x58
   1780c:	ldrd	r4, [sp]
   17810:	ldr	r6, [sp, #8]
   17814:	add	sp, sp, #12
   17818:	pop	{pc}		; (ldr pc, [sp], #4)
   1781c:	add	ip, r3, ip
   17820:	mov	r0, #2
   17824:	strd	r2, [sp, #32]
   17828:	mov	r2, #3
   1782c:	b	17738 <flatcc_builder_end_string@@Base+0x70>
   17830:	bl	12af0 <flatcc_builder_default_alloc@@Base+0x19c>
   17834:	movw	r1, #38640	; 0x96f0
   17838:	movt	r1, #1
   1783c:	movw	r0, #38832	; 0x97b0
   17840:	movt	r0, #1
   17844:	sub	r3, r3, #124	; 0x7c
   17848:	movw	r2, #647	; 0x287
   1784c:	bl	12044 <__assert_fail@plt>
   17850:	movw	r1, #38640	; 0x96f0
   17854:	movt	r1, #1
   17858:	ldr	r3, [pc, #44]	; 1788c <flatcc_builder_end_string@@Base+0x1c4>
   1785c:	movw	r0, #39472	; 0x9a30
   17860:	movt	r0, #1
   17864:	movw	r2, #1733	; 0x6c5
   17868:	bl	12044 <__assert_fail@plt>
   1786c:	movw	r1, #38640	; 0x96f0
   17870:	movt	r1, #1
   17874:	ldr	r3, [pc, #16]	; 1788c <flatcc_builder_end_string@@Base+0x1c4>
   17878:	movw	r0, #38768	; 0x9770
   1787c:	movt	r0, #1
   17880:	movw	r2, #1732	; 0x6c4
   17884:	bl	12044 <__assert_fail@plt>
   17888:	andeq	r9, r1, r8, asr #32
   1788c:	andeq	r9, r1, r4, lsl r6

00017890 <flatcc_builder_string_edit@@Base>:
   17890:	ldr	r0, [r0, #16]
   17894:	bx	lr

00017898 <flatcc_builder_string_len@@Base>:
   17898:	ldr	r3, [r0, #32]
   1789c:	ldr	r0, [r3, #20]
   178a0:	bx	lr

000178a4 <flatcc_builder_table_add@@Base>:
   178a4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   178a8:	mov	r4, r0
   178ac:	ldr	r0, [r0, #32]
   178b0:	ldrh	r0, [r0, #14]
   178b4:	strd	r6, [sp, #8]
   178b8:	strd	r8, [sp, #16]
   178bc:	str	lr, [sp, #24]
   178c0:	sub	sp, sp, #12
   178c4:	cmp	r0, #3
   178c8:	bne	17a2c <flatcc_builder_table_add@@Base+0x188>
   178cc:	movw	r0, #32764	; 0x7ffc
   178d0:	cmp	r1, r0
   178d4:	bhi	17a10 <flatcc_builder_table_add@@Base+0x16c>
   178d8:	ldrh	r0, [r4, #130]	; 0x82
   178dc:	lsl	r7, r1, #1
   178e0:	ldr	ip, [r4, #4]
   178e4:	cmp	r0, r3
   178e8:	strhcc	r3, [r4, #130]	; 0x82
   178ec:	ldrh	r5, [ip, r7]
   178f0:	add	ip, ip, r7
   178f4:	cmp	r5, #0
   178f8:	bne	179f4 <flatcc_builder_table_add@@Base+0x150>
   178fc:	ldr	r9, [r4, #12]
   17900:	movw	lr, #31153	; 0x79b1
   17904:	movt	lr, #40503	; 0x9e37
   17908:	uxth	r6, r1
   1790c:	sub	r8, r3, #1
   17910:	ldr	r0, [r4, #20]
   17914:	rsb	r3, r3, #0
   17918:	eor	r1, r1, r9
   1791c:	mul	r1, lr, r1
   17920:	add	r8, r8, r0
   17924:	ldr	r0, [r4, #24]
   17928:	and	r8, r8, r3
   1792c:	eor	r1, r1, r2
   17930:	add	r2, r2, r8
   17934:	mul	r1, lr, r1
   17938:	cmp	r2, r0
   1793c:	str	r1, [r4, #12]
   17940:	str	r2, [r4, #20]
   17944:	bcs	17980 <flatcc_builder_table_add@@Base+0xdc>
   17948:	ldr	r0, [r4, #16]
   1794c:	add	r3, r8, #4
   17950:	add	r0, r0, r8
   17954:	strh	r3, [ip]
   17958:	ldrh	r3, [r4, #8]
   1795c:	cmp	r3, r6
   17960:	addls	r6, r6, #1
   17964:	strhls	r6, [r4, #8]
   17968:	add	sp, sp, #12
   1796c:	ldrd	r4, [sp]
   17970:	ldrd	r6, [sp, #8]
   17974:	ldrd	r8, [sp, #16]
   17978:	add	sp, sp, #24
   1797c:	pop	{pc}		; (ldr pc, [sp], #4)
   17980:	ldr	ip, [r4, #28]
   17984:	mov	r0, #1
   17988:	add	r1, r4, #60	; 0x3c
   1798c:	mov	r3, r0
   17990:	str	r0, [sp]
   17994:	ldr	r9, [r4, #48]	; 0x30
   17998:	add	ip, ip, r0
   1799c:	ldr	r0, [r4, #40]	; 0x28
   179a0:	add	r2, ip, r2
   179a4:	blx	r9
   179a8:	cmp	r0, #0
   179ac:	bne	179ec <flatcc_builder_table_add@@Base+0x148>
   179b0:	ldr	ip, [r4, #4]
   179b4:	movw	r2, #65532	; 0xfffc
   179b8:	ldr	r5, [r4, #28]
   179bc:	ldr	r3, [r4, #64]	; 0x40
   179c0:	add	ip, ip, r7
   179c4:	ldr	r0, [r4, #60]	; 0x3c
   179c8:	ldr	r1, [r4, #32]
   179cc:	sub	r3, r3, r5
   179d0:	cmp	r3, r2
   179d4:	add	r0, r0, r5
   179d8:	movcs	r3, r2
   179dc:	str	r0, [r4, #16]
   179e0:	str	r3, [r4, #24]
   179e4:	str	r2, [r1, #4]
   179e8:	b	1794c <flatcc_builder_table_add@@Base+0xa8>
   179ec:	mov	r0, r5
   179f0:	b	17968 <flatcc_builder_table_add@@Base+0xc4>
   179f4:	movw	r1, #38640	; 0x96f0
   179f8:	movt	r1, #1
   179fc:	ldr	r3, [pc, #68]	; 17a48 <flatcc_builder_table_add@@Base+0x1a4>
   17a00:	movw	r0, #38832	; 0x97b0
   17a04:	movt	r0, #1
   17a08:	movw	r2, #1784	; 0x6f8
   17a0c:	bl	12044 <__assert_fail@plt>
   17a10:	movw	r1, #38640	; 0x96f0
   17a14:	movt	r1, #1
   17a18:	ldr	r3, [pc, #40]	; 17a48 <flatcc_builder_table_add@@Base+0x1a4>
   17a1c:	movw	r0, #39508	; 0x9a54
   17a20:	movt	r0, #1
   17a24:	movw	r2, #1774	; 0x6ee
   17a28:	bl	12044 <__assert_fail@plt>
   17a2c:	movw	r1, #38640	; 0x96f0
   17a30:	movt	r1, #1
   17a34:	ldr	r3, [pc, #12]	; 17a48 <flatcc_builder_table_add@@Base+0x1a4>
   17a38:	movw	r0, #39356	; 0x99bc
   17a3c:	movt	r0, #1
   17a40:	movw	r2, #1773	; 0x6ed
   17a44:	bl	12044 <__assert_fail@plt>
   17a48:	andeq	r9, r1, r0, lsr r6

00017a4c <flatcc_builder_table_edit@@Base>:
   17a4c:	ldr	r2, [r0, #32]
   17a50:	ldrh	r2, [r2, #14]
   17a54:	cmp	r2, #3
   17a58:	bne	17a70 <flatcc_builder_table_edit@@Base+0x24>
   17a5c:	ldr	r3, [r0, #20]
   17a60:	ldr	r0, [r0, #16]
   17a64:	sub	r3, r3, r1
   17a68:	add	r0, r0, r3
   17a6c:	bx	lr
   17a70:	movw	r1, #38640	; 0x96f0
   17a74:	movt	r1, #1
   17a78:	ldr	r3, [pc, #20]	; 17a94 <flatcc_builder_table_edit@@Base+0x48>
   17a7c:	movw	r0, #39356	; 0x99bc
   17a80:	movt	r0, #1
   17a84:	str	r4, [sp, #-8]!
   17a88:	movw	r2, #1794	; 0x702
   17a8c:	str	lr, [sp, #4]
   17a90:	bl	12044 <__assert_fail@plt>
   17a94:	andeq	r9, r1, ip, asr #12

00017a98 <flatcc_builder_table_add_copy@@Base>:
   17a98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17a9c:	mov	r5, r3
   17aa0:	ldr	r3, [r0, #32]
   17aa4:	ldrh	r3, [r3, #14]
   17aa8:	strd	r6, [sp, #8]
   17aac:	strd	r8, [sp, #16]
   17ab0:	strd	sl, [sp, #24]
   17ab4:	str	lr, [sp, #32]
   17ab8:	sub	sp, sp, #12
   17abc:	cmp	r3, #3
   17ac0:	ldrh	ip, [sp, #48]	; 0x30
   17ac4:	bne	17c50 <flatcc_builder_table_add_copy@@Base+0x1b8>
   17ac8:	movw	r3, #32764	; 0x7ffc
   17acc:	cmp	r1, r3
   17ad0:	bhi	17c34 <flatcc_builder_table_add_copy@@Base+0x19c>
   17ad4:	ldrh	r3, [r0, #130]	; 0x82
   17ad8:	mov	r7, r2
   17adc:	lsl	r8, r1, #1
   17ae0:	mov	r4, r0
   17ae4:	ldr	r2, [r0, #4]
   17ae8:	cmp	r3, ip
   17aec:	strhcc	ip, [r0, #130]	; 0x82
   17af0:	ldrh	r9, [r2, r8]
   17af4:	add	r2, r2, r8
   17af8:	cmp	r9, #0
   17afc:	bne	17c18 <flatcc_builder_table_add_copy@@Base+0x180>
   17b00:	ldr	lr, [r4, #12]
   17b04:	movw	r0, #31153	; 0x79b1
   17b08:	movt	r0, #40503	; 0x9e37
   17b0c:	uxth	r6, r1
   17b10:	sub	r3, ip, #1
   17b14:	ldr	sl, [r4, #20]
   17b18:	rsb	ip, ip, #0
   17b1c:	eor	r1, r1, lr
   17b20:	ldr	lr, [r4, #24]
   17b24:	mul	r1, r0, r1
   17b28:	add	r3, r3, sl
   17b2c:	and	sl, r3, ip
   17b30:	add	ip, r5, sl
   17b34:	eor	r1, r1, r5
   17b38:	cmp	ip, lr
   17b3c:	str	ip, [r4, #20]
   17b40:	mul	r1, r0, r1
   17b44:	str	r1, [r4, #12]
   17b48:	bcs	17ba4 <flatcc_builder_table_add_copy@@Base+0x10c>
   17b4c:	ldr	r3, [r4, #16]
   17b50:	add	r1, sl, #4
   17b54:	strh	r1, [r2]
   17b58:	ldrh	r2, [r4, #8]
   17b5c:	cmp	r2, r6
   17b60:	addls	r6, r6, #1
   17b64:	strhls	r6, [r4, #8]
   17b68:	adds	r3, r3, sl
   17b6c:	beq	17b84 <flatcc_builder_table_add_copy@@Base+0xec>
   17b70:	mov	r0, r3
   17b74:	mov	r2, r5
   17b78:	mov	r1, r7
   17b7c:	bl	11f90 <memcpy@plt>
   17b80:	mov	r3, r0
   17b84:	mov	r0, r3
   17b88:	add	sp, sp, #12
   17b8c:	ldrd	r4, [sp]
   17b90:	ldrd	r6, [sp, #8]
   17b94:	ldrd	r8, [sp, #16]
   17b98:	ldrd	sl, [sp, #24]
   17b9c:	add	sp, sp, #32
   17ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ba4:	ldr	r2, [r4, #28]
   17ba8:	mov	r0, #1
   17bac:	add	r1, r4, #60	; 0x3c
   17bb0:	mov	r3, r0
   17bb4:	str	r0, [sp]
   17bb8:	ldr	fp, [r4, #48]	; 0x30
   17bbc:	add	r2, r2, r0
   17bc0:	ldr	r0, [r4, #40]	; 0x28
   17bc4:	add	r2, r2, ip
   17bc8:	blx	fp
   17bcc:	cmp	r0, #0
   17bd0:	bne	17c10 <flatcc_builder_table_add_copy@@Base+0x178>
   17bd4:	ldr	r2, [r4, #4]
   17bd8:	movw	r0, #65532	; 0xfffc
   17bdc:	ldr	r3, [r4, #28]
   17be0:	ldr	r1, [r4, #64]	; 0x40
   17be4:	add	r2, r2, r8
   17be8:	ldr	lr, [r4, #60]	; 0x3c
   17bec:	ldr	ip, [r4, #32]
   17bf0:	sub	r1, r1, r3
   17bf4:	cmp	r1, r0
   17bf8:	add	r3, lr, r3
   17bfc:	movcs	r1, r0
   17c00:	str	r3, [r4, #16]
   17c04:	str	r1, [r4, #24]
   17c08:	str	r0, [ip, #4]
   17c0c:	b	17b50 <flatcc_builder_table_add_copy@@Base+0xb8>
   17c10:	mov	r3, r9
   17c14:	b	17b84 <flatcc_builder_table_add_copy@@Base+0xec>
   17c18:	movw	r1, #38640	; 0x96f0
   17c1c:	movt	r1, #1
   17c20:	ldr	r3, [pc, #68]	; 17c6c <flatcc_builder_table_add_copy@@Base+0x1d4>
   17c24:	movw	r0, #38832	; 0x97b0
   17c28:	movt	r0, #1
   17c2c:	movw	r2, #1784	; 0x6f8
   17c30:	bl	12044 <__assert_fail@plt>
   17c34:	movw	r1, #38640	; 0x96f0
   17c38:	movt	r1, #1
   17c3c:	ldr	r3, [pc, #40]	; 17c6c <flatcc_builder_table_add_copy@@Base+0x1d4>
   17c40:	movw	r0, #39508	; 0x9a54
   17c44:	movt	r0, #1
   17c48:	movw	r2, #1774	; 0x6ee
   17c4c:	bl	12044 <__assert_fail@plt>
   17c50:	movw	r1, #38640	; 0x96f0
   17c54:	movt	r1, #1
   17c58:	ldr	r3, [pc, #12]	; 17c6c <flatcc_builder_table_add_copy@@Base+0x1d4>
   17c5c:	movw	r0, #39356	; 0x99bc
   17c60:	movt	r0, #1
   17c64:	movw	r2, #1773	; 0x6ed
   17c68:	bl	12044 <__assert_fail@plt>
   17c6c:	andeq	r9, r1, r0, lsr r6

00017c70 <flatcc_builder_table_add_offset@@Base>:
   17c70:	ldr	r3, [r0, #32]
   17c74:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17c78:	ldrh	r3, [r3, #14]
   17c7c:	strd	r6, [sp, #8]
   17c80:	strd	r8, [sp, #16]
   17c84:	str	lr, [sp, #24]
   17c88:	sub	sp, sp, #12
   17c8c:	cmp	r3, #3
   17c90:	bne	17df0 <flatcc_builder_table_add_offset@@Base+0x180>
   17c94:	movw	r3, #32764	; 0x7ffc
   17c98:	cmp	r1, r3
   17c9c:	bhi	17dd4 <flatcc_builder_table_add_offset@@Base+0x164>
   17ca0:	ldr	ip, [r0, #4]
   17ca4:	lsl	r7, r1, #1
   17ca8:	mov	r4, r0
   17cac:	ldrh	r5, [ip, r7]
   17cb0:	add	ip, ip, r7
   17cb4:	cmp	r5, #0
   17cb8:	bne	17db8 <flatcc_builder_table_add_offset@@Base+0x148>
   17cbc:	ldr	r2, [r0, #12]
   17cc0:	movw	r3, #31153	; 0x79b1
   17cc4:	movt	r3, #40503	; 0x9e37
   17cc8:	uxth	r6, r1
   17ccc:	ldr	r8, [r0, #20]
   17cd0:	ldr	r0, [r0, #24]
   17cd4:	eor	r1, r1, r2
   17cd8:	mul	r1, r3, r1
   17cdc:	add	r8, r8, #3
   17ce0:	bic	r8, r8, #3
   17ce4:	add	r2, r8, #4
   17ce8:	eor	r1, r1, #4
   17cec:	cmp	r2, r0
   17cf0:	str	r2, [r4, #20]
   17cf4:	mul	r1, r3, r1
   17cf8:	str	r1, [r4, #12]
   17cfc:	bhi	17d4c <flatcc_builder_table_add_offset@@Base+0xdc>
   17d00:	ldr	r0, [r4, #16]
   17d04:	uxth	r2, r8
   17d08:	add	r0, r0, r8
   17d0c:	add	r3, r2, #4
   17d10:	strh	r3, [ip]
   17d14:	ldrh	r3, [r4, #8]
   17d18:	cmp	r3, r6
   17d1c:	ldr	r3, [r4]
   17d20:	addls	r6, r6, #1
   17d24:	strhls	r6, [r4, #8]
   17d28:	add	r1, r3, #2
   17d2c:	str	r1, [r4]
   17d30:	strh	r2, [r3]
   17d34:	add	sp, sp, #12
   17d38:	ldrd	r4, [sp]
   17d3c:	ldrd	r6, [sp, #8]
   17d40:	ldrd	r8, [sp, #16]
   17d44:	add	sp, sp, #24
   17d48:	pop	{pc}		; (ldr pc, [sp], #4)
   17d4c:	ldr	ip, [r4, #28]
   17d50:	mov	r0, #1
   17d54:	add	r1, r4, #60	; 0x3c
   17d58:	mov	r3, r0
   17d5c:	str	r0, [sp]
   17d60:	ldr	r0, [r4, #40]	; 0x28
   17d64:	add	r2, r2, ip
   17d68:	ldr	r9, [r4, #48]	; 0x30
   17d6c:	blx	r9
   17d70:	cmp	r0, #0
   17d74:	bne	17db0 <flatcc_builder_table_add_offset@@Base+0x140>
   17d78:	ldr	ip, [r4, #4]
   17d7c:	movw	r2, #65532	; 0xfffc
   17d80:	ldrd	r0, [r4, #28]
   17d84:	ldr	r3, [r4, #64]	; 0x40
   17d88:	add	ip, ip, r7
   17d8c:	ldr	r5, [r4, #60]	; 0x3c
   17d90:	sub	r3, r3, r0
   17d94:	cmp	r3, r2
   17d98:	add	r0, r5, r0
   17d9c:	movcs	r3, r2
   17da0:	str	r0, [r4, #16]
   17da4:	str	r3, [r4, #24]
   17da8:	str	r2, [r1, #4]
   17dac:	b	17d04 <flatcc_builder_table_add_offset@@Base+0x94>
   17db0:	mov	r0, r5
   17db4:	b	17d34 <flatcc_builder_table_add_offset@@Base+0xc4>
   17db8:	movw	r1, #38640	; 0x96f0
   17dbc:	movt	r1, #1
   17dc0:	ldr	r3, [pc, #68]	; 17e0c <flatcc_builder_table_add_offset@@Base+0x19c>
   17dc4:	movw	r0, #38832	; 0x97b0
   17dc8:	movt	r0, #1
   17dcc:	movw	r2, #1819	; 0x71b
   17dd0:	bl	12044 <__assert_fail@plt>
   17dd4:	movw	r1, #38640	; 0x96f0
   17dd8:	movt	r1, #1
   17ddc:	ldr	r3, [pc, #40]	; 17e0c <flatcc_builder_table_add_offset@@Base+0x19c>
   17de0:	movw	r0, #39508	; 0x9a54
   17de4:	movt	r0, #1
   17de8:	movw	r2, #1812	; 0x714
   17dec:	bl	12044 <__assert_fail@plt>
   17df0:	movw	r1, #38640	; 0x96f0
   17df4:	movt	r1, #1
   17df8:	ldr	r3, [pc, #12]	; 17e0c <flatcc_builder_table_add_offset@@Base+0x19c>
   17dfc:	movw	r0, #39356	; 0x99bc
   17e00:	movt	r0, #1
   17e04:	movw	r2, #1811	; 0x713
   17e08:	bl	12044 <__assert_fail@plt>
   17e0c:	andeq	r9, r1, r8, ror #12

00017e10 <flatcc_builder_table_add_union@@Base>:
   17e10:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17e14:	strd	r6, [sp, #8]
   17e18:	strd	r8, [sp, #16]
   17e1c:	str	lr, [sp, #24]
   17e20:	sub	sp, sp, #20
   17e24:	add	ip, sp, #16
   17e28:	stmdb	ip, {r2, r3}
   17e2c:	ldr	r3, [r0, #32]
   17e30:	ldrb	r7, [sp, #8]
   17e34:	ldr	r6, [sp, #12]
   17e38:	ldrh	r3, [r3, #14]
   17e3c:	cmp	r3, #3
   17e40:	bne	17ffc <flatcc_builder_table_add_union@@Base+0x1ec>
   17e44:	cmp	r7, #0
   17e48:	mov	r4, r0
   17e4c:	mov	r5, r1
   17e50:	beq	17f34 <flatcc_builder_table_add_union@@Base+0x124>
   17e54:	cmp	r6, #0
   17e58:	beq	17e7c <flatcc_builder_table_add_union@@Base+0x6c>
   17e5c:	bl	17c70 <flatcc_builder_table_add_offset@@Base>
   17e60:	cmp	r0, #0
   17e64:	beq	18050 <flatcc_builder_table_add_union@@Base+0x240>
   17e68:	ldr	r3, [r4, #32]
   17e6c:	ldrh	r3, [r3, #14]
   17e70:	str	r6, [r0]
   17e74:	cmp	r3, #3
   17e78:	bne	18018 <flatcc_builder_table_add_union@@Base+0x208>
   17e7c:	sub	r1, r5, #1
   17e80:	movw	r3, #32764	; 0x7ffc
   17e84:	cmp	r1, r3
   17e88:	bhi	18034 <flatcc_builder_table_add_union@@Base+0x224>
   17e8c:	ldrh	r3, [r4, #130]	; 0x82
   17e90:	lsl	r8, r1, #1
   17e94:	cmp	r3, #0
   17e98:	moveq	r3, #1
   17e9c:	strheq	r3, [r4, #130]	; 0x82
   17ea0:	ldr	r3, [r4, #4]
   17ea4:	ldrh	r2, [r3, r8]
   17ea8:	add	r0, r3, r8
   17eac:	cmp	r2, #0
   17eb0:	bne	17fe0 <flatcc_builder_table_add_union@@Base+0x1d0>
   17eb4:	ldr	r2, [r4, #12]
   17eb8:	movw	r3, #31153	; 0x79b1
   17ebc:	movt	r3, #40503	; 0x9e37
   17ec0:	uxth	r6, r1
   17ec4:	ldr	r5, [r4, #20]
   17ec8:	ldr	ip, [r4, #24]
   17ecc:	eor	r1, r1, r2
   17ed0:	mul	r1, r3, r1
   17ed4:	add	r2, r5, #1
   17ed8:	cmp	r2, ip
   17edc:	str	r2, [r4, #20]
   17ee0:	eor	r1, r1, #1
   17ee4:	mul	r1, r3, r1
   17ee8:	str	r1, [r4, #12]
   17eec:	bcs	17f58 <flatcc_builder_table_add_union@@Base+0x148>
   17ef0:	ldr	r3, [r4, #16]
   17ef4:	add	r2, r5, #4
   17ef8:	strh	r2, [r0]
   17efc:	ldrh	r2, [r4, #8]
   17f00:	cmp	r2, r6
   17f04:	addls	r6, r6, #1
   17f08:	strhls	r6, [r4, #8]
   17f0c:	cmn	r3, r5
   17f10:	beq	17fc4 <flatcc_builder_table_add_union@@Base+0x1b4>
   17f14:	mov	r0, #0
   17f18:	strb	r7, [r3, r5]
   17f1c:	add	sp, sp, #20
   17f20:	ldrd	r4, [sp]
   17f24:	ldrd	r6, [sp, #8]
   17f28:	ldrd	r8, [sp, #16]
   17f2c:	add	sp, sp, #24
   17f30:	pop	{pc}		; (ldr pc, [sp], #4)
   17f34:	cmp	r6, #0
   17f38:	beq	17e7c <flatcc_builder_table_add_union@@Base+0x6c>
   17f3c:	movw	r1, #38640	; 0x96f0
   17f40:	movt	r1, #1
   17f44:	ldr	r3, [pc, #288]	; 1806c <flatcc_builder_table_add_union@@Base+0x25c>
   17f48:	movw	r0, #39576	; 0x9a98
   17f4c:	movt	r0, #1
   17f50:	movw	r2, #1519	; 0x5ef
   17f54:	bl	12044 <__assert_fail@plt>
   17f58:	ldr	r2, [r4, #28]
   17f5c:	mov	r0, #1
   17f60:	add	r1, r4, #60	; 0x3c
   17f64:	mov	r3, r0
   17f68:	str	r0, [sp]
   17f6c:	ldr	r0, [r4, #40]	; 0x28
   17f70:	add	r2, r5, r2
   17f74:	ldr	r9, [r4, #48]	; 0x30
   17f78:	add	r2, r2, #2
   17f7c:	blx	r9
   17f80:	cmp	r0, #0
   17f84:	bne	17fc4 <flatcc_builder_table_add_union@@Base+0x1b4>
   17f88:	ldr	r0, [r4, #4]
   17f8c:	movw	r1, #65532	; 0xfffc
   17f90:	ldr	ip, [r4, #28]
   17f94:	ldr	r2, [r4, #64]	; 0x40
   17f98:	add	r0, r0, r8
   17f9c:	ldr	r3, [r4, #60]	; 0x3c
   17fa0:	ldr	lr, [r4, #32]
   17fa4:	sub	r2, r2, ip
   17fa8:	cmp	r2, r1
   17fac:	add	r3, r3, ip
   17fb0:	movcs	r2, r1
   17fb4:	str	r3, [r4, #16]
   17fb8:	str	r2, [r4, #24]
   17fbc:	str	r1, [lr, #4]
   17fc0:	b	17ef4 <flatcc_builder_table_add_union@@Base+0xe4>
   17fc4:	movw	r1, #38640	; 0x96f0
   17fc8:	movt	r1, #1
   17fcc:	ldr	r3, [pc, #152]	; 1806c <flatcc_builder_table_add_union@@Base+0x25c>
   17fd0:	movw	r0, #39624	; 0x9ac8
   17fd4:	movt	r0, #1
   17fd8:	movw	r2, #1526	; 0x5f6
   17fdc:	bl	12044 <__assert_fail@plt>
   17fe0:	movw	r1, #38640	; 0x96f0
   17fe4:	movt	r1, #1
   17fe8:	ldr	r3, [pc, #128]	; 18070 <flatcc_builder_table_add_union@@Base+0x260>
   17fec:	movw	r0, #38832	; 0x97b0
   17ff0:	movt	r0, #1
   17ff4:	movw	r2, #1784	; 0x6f8
   17ff8:	bl	12044 <__assert_fail@plt>
   17ffc:	movw	r1, #38640	; 0x96f0
   18000:	movt	r1, #1
   18004:	ldr	r3, [pc, #96]	; 1806c <flatcc_builder_table_add_union@@Base+0x25c>
   18008:	movw	r0, #39356	; 0x99bc
   1800c:	movt	r0, #1
   18010:	movw	r2, #1518	; 0x5ee
   18014:	bl	12044 <__assert_fail@plt>
   18018:	movw	r1, #38640	; 0x96f0
   1801c:	movt	r1, #1
   18020:	ldr	r3, [pc, #72]	; 18070 <flatcc_builder_table_add_union@@Base+0x260>
   18024:	movw	r0, #39356	; 0x99bc
   18028:	movt	r0, #1
   1802c:	movw	r2, #1773	; 0x6ed
   18030:	bl	12044 <__assert_fail@plt>
   18034:	movw	r1, #38640	; 0x96f0
   18038:	movt	r1, #1
   1803c:	ldr	r3, [pc, #44]	; 18070 <flatcc_builder_table_add_union@@Base+0x260>
   18040:	movw	r0, #39508	; 0x9a54
   18044:	movt	r0, #1
   18048:	movw	r2, #1774	; 0x6ee
   1804c:	bl	12044 <__assert_fail@plt>
   18050:	movw	r1, #38640	; 0x96f0
   18054:	movt	r1, #1
   18058:	ldr	r3, [pc, #12]	; 1806c <flatcc_builder_table_add_union@@Base+0x25c>
   1805c:	movw	r0, #39612	; 0x9abc
   18060:	movt	r0, #1
   18064:	movw	r2, #1522	; 0x5f2
   18068:	bl	12044 <__assert_fail@plt>
   1806c:	andeq	r9, r1, r8, lsl #13
   18070:	andeq	r9, r1, r0, lsr r6

00018074 <flatcc_builder_table_add_union_vector@@Base>:
   18074:	strd	r4, [sp, #-20]!	; 0xffffffec
   18078:	strd	r6, [sp, #8]
   1807c:	mov	r7, r1
   18080:	str	lr, [sp, #16]
   18084:	sub	sp, sp, #12
   18088:	add	r1, sp, #8
   1808c:	stmdb	r1, {r2, r3}
   18090:	ldr	r3, [r0, #32]
   18094:	ldm	sp, {r4, r6}
   18098:	ldrh	r3, [r3, #14]
   1809c:	cmp	r3, #3
   180a0:	bne	18140 <flatcc_builder_table_add_union_vector@@Base+0xcc>
   180a4:	clz	r3, r6
   180a8:	clz	r2, r4
   180ac:	lsr	r3, r3, #5
   180b0:	lsr	r2, r2, #5
   180b4:	cmp	r2, r3
   180b8:	beq	180e8 <flatcc_builder_table_add_union_vector@@Base+0x74>
   180bc:	adds	r4, r4, #0
   180c0:	movne	r4, #1
   180c4:	cmp	r4, r3
   180c8:	mvnne	r4, #0
   180cc:	beq	1815c <flatcc_builder_table_add_union_vector@@Base+0xe8>
   180d0:	mov	r0, r4
   180d4:	add	sp, sp, #12
   180d8:	ldrd	r4, [sp]
   180dc:	ldrd	r6, [sp, #8]
   180e0:	add	sp, sp, #16
   180e4:	pop	{pc}		; (ldr pc, [sp], #4)
   180e8:	cmp	r4, #0
   180ec:	beq	180d0 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   180f0:	sub	r1, r7, #1
   180f4:	mov	r5, r0
   180f8:	bl	17c70 <flatcc_builder_table_add_offset@@Base>
   180fc:	subs	r3, r0, #0
   18100:	beq	18178 <flatcc_builder_table_add_union_vector@@Base+0x104>
   18104:	mov	r1, r7
   18108:	mov	r0, r5
   1810c:	str	r4, [r3]
   18110:	bl	17c70 <flatcc_builder_table_add_offset@@Base>
   18114:	cmp	r0, #0
   18118:	movne	r4, #0
   1811c:	strne	r6, [r0]
   18120:	bne	180d0 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   18124:	movw	r1, #38640	; 0x96f0
   18128:	movt	r1, #1
   1812c:	ldr	r3, [pc, #96]	; 18194 <flatcc_builder_table_add_union_vector@@Base+0x120>
   18130:	movw	r0, #39612	; 0x9abc
   18134:	movt	r0, #1
   18138:	movw	r2, #1544	; 0x608
   1813c:	bl	12044 <__assert_fail@plt>
   18140:	movw	r1, #38640	; 0x96f0
   18144:	movt	r1, #1
   18148:	ldr	r3, [pc, #68]	; 18194 <flatcc_builder_table_add_union_vector@@Base+0x120>
   1814c:	movw	r0, #39356	; 0x99bc
   18150:	movt	r0, #1
   18154:	mov	r2, #1536	; 0x600
   18158:	bl	12044 <__assert_fail@plt>
   1815c:	movw	r1, #38640	; 0x96f0
   18160:	movt	r1, #1
   18164:	ldr	r3, [pc, #40]	; 18194 <flatcc_builder_table_add_union_vector@@Base+0x120>
   18168:	movw	r0, #39636	; 0x9ad4
   1816c:	movt	r0, #1
   18170:	movw	r2, #1537	; 0x601
   18174:	bl	12044 <__assert_fail@plt>
   18178:	movw	r1, #38640	; 0x96f0
   1817c:	movt	r1, #1
   18180:	ldr	r3, [pc, #12]	; 18194 <flatcc_builder_table_add_union_vector@@Base+0x120>
   18184:	movw	r0, #39612	; 0x9abc
   18188:	movt	r0, #1
   1818c:	movw	r2, #1540	; 0x604
   18190:	bl	12044 <__assert_fail@plt>
   18194:	andeq	r9, r1, r8, lsr #13

00018198 <flatcc_builder_push_buffer_alignment@@Base>:
   18198:	mov	r3, r0
   1819c:	mov	r2, #4
   181a0:	ldrh	r0, [r0, #128]	; 0x80
   181a4:	strh	r2, [r3, #128]	; 0x80
   181a8:	bx	lr

000181ac <flatcc_builder_pop_buffer_alignment@@Base>:
   181ac:	ldrh	r3, [r0, #128]	; 0x80
   181b0:	cmp	r3, r1
   181b4:	strhcc	r1, [r0, #128]	; 0x80
   181b8:	bx	lr

000181bc <flatcc_builder_get_buffer_alignment@@Base>:
   181bc:	ldrh	r0, [r0, #128]	; 0x80
   181c0:	bx	lr

000181c4 <flatcc_builder_set_vtable_clustering@@Base>:
   181c4:	clz	r1, r1
   181c8:	lsr	r1, r1, #5
   181cc:	str	r1, [r0, #180]	; 0xb4
   181d0:	bx	lr

000181d4 <flatcc_builder_set_block_align@@Base>:
   181d4:	strh	r1, [r0, #132]	; 0x84
   181d8:	bx	lr

000181dc <flatcc_builder_get_level@@Base>:
   181dc:	ldr	r0, [r0, #156]	; 0x9c
   181e0:	bx	lr

000181e4 <flatcc_builder_set_max_level@@Base>:
   181e4:	ldr	r3, [r0, #160]	; 0xa0
   181e8:	str	r1, [r0, #176]	; 0xb0
   181ec:	cmp	r3, r1
   181f0:	strlt	r1, [r0, #160]	; 0xa0
   181f4:	bx	lr

000181f8 <flatcc_builder_get_buffer_size@@Base>:
   181f8:	ldr	r3, [r0, #136]	; 0x88
   181fc:	ldr	r0, [r0, #140]	; 0x8c
   18200:	sub	r0, r0, r3
   18204:	bx	lr

00018208 <flatcc_builder_get_buffer_start@@Base>:
   18208:	ldr	r0, [r0, #136]	; 0x88
   1820c:	bx	lr

00018210 <flatcc_builder_get_buffer_end@@Base>:
   18210:	ldr	r0, [r0, #140]	; 0x8c
   18214:	bx	lr

00018218 <flatcc_builder_set_vtable_cache_limit@@Base>:
   18218:	str	r1, [r0, #172]	; 0xac
   1821c:	bx	lr

00018220 <flatcc_builder_set_identifier@@Base>:
   18220:	ldr	r3, [pc, #16]	; 18238 <flatcc_builder_set_identifier@@Base+0x18>
   18224:	cmp	r1, #0
   18228:	moveq	r1, r3
   1822c:	ldr	r3, [r1]
   18230:	str	r3, [r0, #168]	; 0xa8
   18234:	bx	lr
   18238:	andeq	r9, r1, r8, asr #32

0001823c <flatcc_builder_get_type@@Base>:
   1823c:	ldr	r0, [r0, #32]
   18240:	cmp	r0, #0
   18244:	ldrhne	r0, [r0, #14]
   18248:	bx	lr

0001824c <flatcc_builder_get_type_at@@Base>:
   1824c:	cmp	r1, #0
   18250:	ble	18278 <flatcc_builder_get_type_at@@Base+0x2c>
   18254:	ldr	r3, [r0, #156]	; 0x9c
   18258:	cmp	r3, r1
   1825c:	blt	18278 <flatcc_builder_get_type_at@@Base+0x2c>
   18260:	ldr	r2, [r0, #32]
   18264:	sub	r1, r1, r3
   18268:	add	r1, r1, r1, lsl #3
   1826c:	add	r1, r2, r1, lsl #2
   18270:	ldrh	r0, [r1, #14]
   18274:	bx	lr
   18278:	mov	r0, #0
   1827c:	bx	lr

00018280 <flatcc_builder_get_direct_buffer@@Base>:
   18280:	ldr	r3, [r0, #184]	; 0xb8
   18284:	cmp	r3, #0
   18288:	bne	182a4 <flatcc_builder_get_direct_buffer@@Base+0x24>
   1828c:	cmp	r1, #0
   18290:	movne	r3, #0
   18294:	movne	r0, r3
   18298:	moveq	r0, r1
   1829c:	strne	r3, [r1]
   182a0:	bx	lr
   182a4:	ldrd	r2, [r0, #188]	; 0xbc
   182a8:	cmp	r2, r3
   182ac:	bne	1828c <flatcc_builder_get_direct_buffer@@Base+0xc>
   182b0:	cmp	r1, #0
   182b4:	ldrne	r3, [r0, #212]	; 0xd4
   182b8:	ldr	r0, [r0, #196]	; 0xc4
   182bc:	strne	r3, [r1]
   182c0:	bx	lr

000182c4 <flatcc_builder_copy_buffer@@Base>:
   182c4:	ldr	r3, [r0, #184]	; 0xb8
   182c8:	cmp	r3, #0
   182cc:	beq	182f4 <flatcc_builder_copy_buffer@@Base+0x30>
   182d0:	add	r0, r0, #188	; 0xbc
   182d4:	str	r4, [sp, #-8]!
   182d8:	str	lr, [sp, #4]
   182dc:	bl	18a30 <flatcc_emitter_copy_buffer@@Base>
   182e0:	cmp	r0, #0
   182e4:	beq	182fc <flatcc_builder_copy_buffer@@Base+0x38>
   182e8:	ldr	r4, [sp]
   182ec:	add	sp, sp, #4
   182f0:	pop	{pc}		; (ldr pc, [sp], #4)
   182f4:	mov	r0, r3
   182f8:	bx	lr
   182fc:	bl	12b90 <flatcc_builder_default_alloc@@Base+0x23c>

00018300 <flatcc_builder_finalize_buffer@@Base>:
   18300:	strd	r4, [sp, #-16]!
   18304:	cmp	r1, #0
   18308:	mov	r5, r0
   1830c:	ldr	r2, [r0, #136]	; 0x88
   18310:	ldr	r4, [r0, #140]	; 0x8c
   18314:	str	r6, [sp, #8]
   18318:	str	lr, [sp, #12]
   1831c:	sub	r4, r4, r2
   18320:	mov	r0, r4
   18324:	strne	r4, [r1]
   18328:	bl	11fd8 <malloc@plt>
   1832c:	subs	r6, r0, #0
   18330:	beq	18388 <flatcc_builder_finalize_buffer@@Base+0x88>
   18334:	ldr	r3, [r5, #184]	; 0xb8
   18338:	cmp	r3, #0
   1833c:	beq	1836c <flatcc_builder_finalize_buffer@@Base+0x6c>
   18340:	mov	r2, r4
   18344:	add	r0, r5, #188	; 0xbc
   18348:	mov	r1, r6
   1834c:	bl	18a30 <flatcc_emitter_copy_buffer@@Base>
   18350:	cmp	r0, #0
   18354:	beq	183a4 <flatcc_builder_finalize_buffer@@Base+0xa4>
   18358:	mov	r0, r6
   1835c:	ldrd	r4, [sp]
   18360:	ldr	r6, [sp, #8]
   18364:	add	sp, sp, #12
   18368:	pop	{pc}		; (ldr pc, [sp], #4)
   1836c:	movw	r1, #38640	; 0x96f0
   18370:	movt	r1, #1
   18374:	ldr	r3, [pc, #44]	; 183a8 <flatcc_builder_finalize_buffer@@Base+0xa8>
   18378:	movw	r0, #38832	; 0x97b0
   1837c:	movt	r0, #1
   18380:	movw	r2, #1948	; 0x79c
   18384:	bl	12044 <__assert_fail@plt>
   18388:	movw	r1, #38640	; 0x96f0
   1838c:	movt	r1, #1
   18390:	ldr	r3, [pc, #16]	; 183a8 <flatcc_builder_finalize_buffer@@Base+0xa8>
   18394:	movw	r0, #38832	; 0x97b0
   18398:	movt	r0, #1
   1839c:	movw	r2, #1944	; 0x798
   183a0:	bl	12044 <__assert_fail@plt>
   183a4:	bl	12b90 <flatcc_builder_default_alloc@@Base+0x23c>
   183a8:	ldrdeq	r9, [r1], -r0

000183ac <flatcc_builder_finalize_aligned_buffer@@Base>:
   183ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   183b0:	mov	r2, #0
   183b4:	mov	r5, r0
   183b8:	ldr	r3, [r0, #136]	; 0x88
   183bc:	ldr	r4, [r0, #140]	; 0x8c
   183c0:	strd	r6, [sp, #8]
   183c4:	subs	r6, r1, #0
   183c8:	ldrh	r1, [r0, #128]	; 0x80
   183cc:	str	lr, [sp, #16]
   183d0:	sub	sp, sp, #12
   183d4:	add	r0, sp, #4
   183d8:	sub	r3, r4, r3
   183dc:	str	r2, [sp, #4]
   183e0:	sub	r4, r1, #1
   183e4:	rsb	r2, r1, #0
   183e8:	strne	r3, [r6]
   183ec:	add	r4, r4, r3
   183f0:	cmp	r1, #4
   183f4:	and	r4, r4, r2
   183f8:	movcc	r1, #4
   183fc:	mov	r2, r4
   18400:	bl	12008 <posix_memalign@plt>
   18404:	cmp	r0, #0
   18408:	beq	18448 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   1840c:	ldr	r0, [sp, #4]
   18410:	cmp	r0, #0
   18414:	beq	1841c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   18418:	bl	11f84 <free@plt>
   1841c:	cmp	r6, #0
   18420:	movne	r3, #0
   18424:	moveq	r7, r6
   18428:	movne	r7, r3
   1842c:	strne	r3, [r6]
   18430:	mov	r0, r7
   18434:	add	sp, sp, #12
   18438:	ldrd	r4, [sp]
   1843c:	ldrd	r6, [sp, #8]
   18440:	add	sp, sp, #16
   18444:	pop	{pc}		; (ldr pc, [sp], #4)
   18448:	ldr	r7, [sp, #4]
   1844c:	cmp	r7, #0
   18450:	beq	1841c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   18454:	ldr	r3, [r5, #184]	; 0xb8
   18458:	cmp	r3, #0
   1845c:	beq	1847c <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   18460:	mov	r2, r4
   18464:	add	r0, r5, #188	; 0xbc
   18468:	mov	r1, r7
   1846c:	bl	18a30 <flatcc_emitter_copy_buffer@@Base>
   18470:	cmp	r0, #0
   18474:	bne	18430 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   18478:	bl	12b90 <flatcc_builder_default_alloc@@Base+0x23c>
   1847c:	mov	r0, r7
   18480:	b	18418 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00018484 <flatcc_builder_aligned_alloc@@Base>:
   18484:	cmp	r0, #4
   18488:	str	r4, [sp, #-8]!
   1848c:	mov	r4, #0
   18490:	str	lr, [sp, #4]
   18494:	sub	sp, sp, #8
   18498:	mov	r2, r1
   1849c:	movcs	r1, r0
   184a0:	movcc	r1, #4
   184a4:	add	r0, sp, #4
   184a8:	str	r4, [sp, #4]
   184ac:	bl	12008 <posix_memalign@plt>
   184b0:	cmp	r0, r4
   184b4:	ldr	r0, [sp, #4]
   184b8:	beq	184cc <flatcc_builder_aligned_alloc@@Base+0x48>
   184bc:	cmp	r0, #0
   184c0:	beq	184cc <flatcc_builder_aligned_alloc@@Base+0x48>
   184c4:	bl	11f84 <free@plt>
   184c8:	mov	r0, r4
   184cc:	add	sp, sp, #8
   184d0:	ldr	r4, [sp]
   184d4:	add	sp, sp, #4
   184d8:	pop	{pc}		; (ldr pc, [sp], #4)

000184dc <flatcc_builder_aligned_free@@Base>:
   184dc:	b	11f84 <free@plt>

000184e0 <flatcc_builder_get_emit_context@@Base>:
   184e0:	ldr	r0, [r0, #36]	; 0x24
   184e4:	bx	lr

000184e8 <flatcc_emitter_recycle_page@@Base>:
   184e8:	ldr	r3, [r0]
   184ec:	cmp	r3, r1
   184f0:	beq	18534 <flatcc_emitter_recycle_page@@Base+0x4c>
   184f4:	ldr	r2, [r0, #4]
   184f8:	cmp	r2, r1
   184fc:	beq	18534 <flatcc_emitter_recycle_page@@Base+0x4c>
   18500:	push	{lr}		; (str lr, [sp, #-4]!)
   18504:	mov	r0, #0
   18508:	ldr	lr, [r1, #2944]	; 0xb80
   1850c:	ldr	ip, [r1, #2948]	; 0xb84
   18510:	str	ip, [lr, #2948]	; 0xb84
   18514:	ldr	r2, [r3, #2948]	; 0xb84
   18518:	str	lr, [ip, #2944]	; 0xb80
   1851c:	str	r3, [r1, #2944]	; 0xb80
   18520:	str	r2, [r1, #2948]	; 0xb84
   18524:	str	r1, [r2, #2944]	; 0xb80
   18528:	ldr	r3, [r1, #2944]	; 0xb80
   1852c:	str	r1, [r3, #2948]	; 0xb84
   18530:	pop	{pc}		; (ldr pc, [sp], #4)
   18534:	mvn	r0, #0
   18538:	bx	lr

0001853c <flatcc_emitter_reset@@Base>:
   1853c:	ldr	r2, [r0]
   18540:	cmp	r2, #0
   18544:	bxeq	lr
   18548:	strd	r4, [sp, #-16]!
   1854c:	movw	ip, #64064	; 0xfa40
   18550:	movt	ip, #65535	; 0xffff
   18554:	ldr	r1, [r0, #24]
   18558:	add	r4, r2, #1472	; 0x5c0
   1855c:	ldr	r3, [r0, #32]
   18560:	ldr	r5, [r0, #28]
   18564:	str	r6, [sp, #8]
   18568:	str	lr, [sp, #12]
   1856c:	mov	lr, #1472	; 0x5c0
   18570:	cmp	r3, #0
   18574:	stmib	r0, {r2, r4}
   18578:	moveq	r3, r1
   1857c:	lsr	r1, r1, #2
   18580:	str	lr, [r0, #12]
   18584:	add	r3, r3, r3, lsl #1
   18588:	str	r4, [r0, #16]
   1858c:	str	lr, [r0, #20]
   18590:	add	r3, r1, r3, lsr #2
   18594:	str	ip, [r2, #2952]	; 0xb88
   18598:	mov	ip, #0
   1859c:	cmp	r5, r3, lsl #1
   185a0:	str	ip, [r0, #24]
   185a4:	str	r3, [r0, #32]
   185a8:	bls	18600 <flatcc_emitter_reset@@Base+0xc4>
   185ac:	ldr	r3, [r2, #2944]	; 0xb80
   185b0:	mov	r4, r0
   185b4:	cmp	r2, r3
   185b8:	bne	185d0 <flatcc_emitter_reset@@Base+0x94>
   185bc:	b	18600 <flatcc_emitter_reset@@Base+0xc4>
   185c0:	ldm	r4, {r1, r2}
   185c4:	ldr	r3, [r2, #2944]	; 0xb80
   185c8:	cmp	r3, r1
   185cc:	beq	18600 <flatcc_emitter_reset@@Base+0xc4>
   185d0:	ldr	r1, [r3, #2944]	; 0xb80
   185d4:	mov	r0, r3
   185d8:	str	r1, [r2, #2944]	; 0xb80
   185dc:	ldr	r3, [r3, #2944]	; 0xb80
   185e0:	str	r2, [r3, #2948]	; 0xb84
   185e4:	bl	11f84 <free@plt>
   185e8:	ldr	r3, [r4, #28]
   185ec:	ldr	r2, [r4, #32]
   185f0:	sub	r3, r3, #2944	; 0xb80
   185f4:	cmp	r3, r2, lsl #1
   185f8:	str	r3, [r4, #28]
   185fc:	bhi	185c0 <flatcc_emitter_reset@@Base+0x84>
   18600:	ldrd	r4, [sp]
   18604:	ldr	r6, [sp, #8]
   18608:	add	sp, sp, #12
   1860c:	pop	{pc}		; (ldr pc, [sp], #4)

00018610 <flatcc_emitter_clear@@Base>:
   18610:	ldr	r3, [r0]
   18614:	cmp	r3, #0
   18618:	bxeq	lr
   1861c:	mov	r1, #0
   18620:	strd	r4, [sp, #-16]!
   18624:	mov	r5, r0
   18628:	ldr	r2, [r3, #2948]	; 0xb84
   1862c:	str	r6, [sp, #8]
   18630:	str	lr, [sp, #12]
   18634:	str	r1, [r2, #2944]	; 0xb80
   18638:	ldr	r4, [r3, #2944]	; 0xb80
   1863c:	cmp	r4, r1
   18640:	bne	1864c <flatcc_emitter_clear@@Base+0x3c>
   18644:	b	18688 <flatcc_emitter_clear@@Base+0x78>
   18648:	mov	r4, r3
   1864c:	ldr	r0, [r4, #2948]	; 0xb84
   18650:	bl	11f84 <free@plt>
   18654:	ldr	r3, [r4, #2944]	; 0xb80
   18658:	cmp	r3, #0
   1865c:	bne	18648 <flatcc_emitter_clear@@Base+0x38>
   18660:	mov	r0, r4
   18664:	bl	11f84 <free@plt>
   18668:	mov	r0, r5
   1866c:	mov	r2, #36	; 0x24
   18670:	ldrd	r4, [sp]
   18674:	mov	r1, #0
   18678:	ldr	r6, [sp, #8]
   1867c:	ldr	lr, [sp, #12]
   18680:	add	sp, sp, #16
   18684:	b	12014 <memset@plt>
   18688:	mov	r4, r3
   1868c:	b	18660 <flatcc_emitter_clear@@Base+0x50>

00018690 <flatcc_emitter@@Base>:
   18690:	cmp	r3, #0
   18694:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18698:	mov	r4, r0
   1869c:	ldr	r3, [r0, #24]
   186a0:	strd	r6, [sp, #8]
   186a4:	strd	r8, [sp, #16]
   186a8:	sub	r8, r2, #1
   186ac:	strd	sl, [sp, #24]
   186b0:	str	lr, [sp, #32]
   186b4:	sub	sp, sp, #12
   186b8:	ldr	ip, [sp, #48]	; 0x30
   186bc:	add	r3, r3, ip
   186c0:	str	r3, [r0, #24]
   186c4:	blt	188a8 <flatcc_emitter@@Base+0x218>
   186c8:	ldr	r0, [r0, #20]
   186cc:	cmp	r0, ip
   186d0:	bcs	18768 <flatcc_emitter@@Base+0xd8>
   186d4:	cmp	r2, #0
   186d8:	beq	187ac <flatcc_emitter@@Base+0x11c>
   186dc:	movw	r3, #64064	; 0xfa40
   186e0:	movt	r3, #65535	; 0xffff
   186e4:	add	r5, r1, #8
   186e8:	mov	r8, r2
   186ec:	mov	r9, #1472	; 0x5c0
   186f0:	str	r3, [sp, #4]
   186f4:	ldr	r7, [r5, #-8]
   186f8:	ldr	r6, [r5, #-4]
   186fc:	cmp	r6, #0
   18700:	beq	18844 <flatcc_emitter@@Base+0x1b4>
   18704:	mov	r3, r0
   18708:	cmp	r6, r3
   1870c:	bls	18760 <flatcc_emitter@@Base+0xd0>
   18710:	cmp	r3, #0
   18714:	beq	187cc <flatcc_emitter@@Base+0x13c>
   18718:	sub	fp, r6, r3
   1871c:	mov	r6, r3
   18720:	mov	r2, r6
   18724:	mov	r1, r7
   18728:	ldr	r0, [r4, #16]
   1872c:	bl	11f90 <memcpy@plt>
   18730:	ldr	r2, [r4, #16]
   18734:	cmp	fp, #0
   18738:	add	r7, r7, r6
   1873c:	ldr	r0, [r4, #20]
   18740:	add	r2, r2, r6
   18744:	sub	r3, r0, r6
   18748:	mov	r0, r3
   1874c:	strd	r2, [r4, #16]
   18750:	beq	18844 <flatcc_emitter@@Base+0x1b4>
   18754:	mov	r6, fp
   18758:	cmp	r6, r3
   1875c:	bhi	18710 <flatcc_emitter@@Base+0x80>
   18760:	mov	fp, #0
   18764:	b	18720 <flatcc_emitter@@Base+0x90>
   18768:	ldr	r3, [r4, #16]
   1876c:	sub	r0, r0, ip
   18770:	str	r0, [r4, #20]
   18774:	add	ip, r3, ip
   18778:	str	ip, [r4, #16]
   1877c:	cmp	r2, #0
   18780:	addne	r4, r1, #8
   18784:	beq	187ac <flatcc_emitter@@Base+0x11c>
   18788:	mov	r0, r3
   1878c:	ldmdb	r4, {r1, r2}
   18790:	sub	r8, r8, #1
   18794:	bl	11f90 <memcpy@plt>
   18798:	ldr	r2, [r4, #-4]
   1879c:	cmn	r8, #1
   187a0:	add	r4, r4, #8
   187a4:	add	r3, r0, r2
   187a8:	bne	18788 <flatcc_emitter@@Base+0xf8>
   187ac:	mov	r0, #0
   187b0:	add	sp, sp, #12
   187b4:	ldrd	r4, [sp]
   187b8:	ldrd	r6, [sp, #8]
   187bc:	ldrd	r8, [sp, #16]
   187c0:	ldrd	sl, [sp, #24]
   187c4:	add	sp, sp, #32
   187c8:	pop	{pc}		; (ldr pc, [sp], #4)
   187cc:	ldr	fp, [r4, #4]
   187d0:	cmp	fp, #0
   187d4:	beq	18854 <flatcc_emitter@@Base+0x1c4>
   187d8:	ldr	sl, [r4]
   187dc:	ldr	r0, [fp, #2944]	; 0xb80
   187e0:	cmp	r0, sl
   187e4:	beq	18810 <flatcc_emitter@@Base+0x180>
   187e8:	str	r0, [r4, #4]
   187ec:	ldr	r1, [r0, #2948]	; 0xb84
   187f0:	mov	r2, #2944	; 0xb80
   187f4:	mov	r3, r2
   187f8:	str	r0, [r4, #16]
   187fc:	str	r2, [r4, #20]
   18800:	ldr	r2, [r1, #2952]	; 0xb88
   18804:	add	r2, r2, r3
   18808:	str	r2, [r0, #2952]	; 0xb88
   1880c:	b	18708 <flatcc_emitter@@Base+0x78>
   18810:	movw	r0, #2956	; 0xb8c
   18814:	bl	11fd8 <malloc@plt>
   18818:	cmp	r0, #0
   1881c:	beq	188a0 <flatcc_emitter@@Base+0x210>
   18820:	ldr	r2, [r4, #28]
   18824:	str	sl, [r0, #2944]	; 0xb80
   18828:	str	fp, [r0, #2948]	; 0xb84
   1882c:	add	r2, r2, #2944	; 0xb80
   18830:	str	r2, [r4, #28]
   18834:	str	r0, [sl, #2948]	; 0xb84
   18838:	str	r0, [fp, #2944]	; 0xb80
   1883c:	str	r0, [r4, #4]
   18840:	b	187ec <flatcc_emitter@@Base+0x15c>
   18844:	subs	r8, r8, #1
   18848:	add	r5, r5, #8
   1884c:	bne	186f4 <flatcc_emitter@@Base+0x64>
   18850:	b	187ac <flatcc_emitter@@Base+0x11c>
   18854:	movw	r0, #2956	; 0xb8c
   18858:	bl	11fd8 <malloc@plt>
   1885c:	cmp	r0, #0
   18860:	beq	188a0 <flatcc_emitter@@Base+0x210>
   18864:	ldr	r2, [r4, #28]
   18868:	add	r1, r0, #1472	; 0x5c0
   1886c:	mov	r3, #1472	; 0x5c0
   18870:	str	r0, [r4]
   18874:	strd	r0, [r4, #4]
   18878:	str	r9, [r4, #12]
   1887c:	str	r1, [r4, #16]
   18880:	add	r2, r2, #2944	; 0xb80
   18884:	str	r9, [r4, #20]
   18888:	str	r0, [r0, #2944]	; 0xb80
   1888c:	str	r2, [r4, #28]
   18890:	ldr	r2, [sp, #4]
   18894:	str	r0, [r0, #2948]	; 0xb84
   18898:	str	r2, [r0, #2952]	; 0xb88
   1889c:	b	18708 <flatcc_emitter@@Base+0x78>
   188a0:	mvn	r0, #0
   188a4:	b	187b0 <flatcc_emitter@@Base+0x120>
   188a8:	ldr	r0, [r0, #12]
   188ac:	cmp	r0, ip
   188b0:	bcs	18a18 <flatcc_emitter@@Base+0x388>
   188b4:	add	r5, r1, r2, lsl #3
   188b8:	movw	r3, #64064	; 0xfa40
   188bc:	movt	r3, #65535	; 0xffff
   188c0:	str	r3, [sp, #4]
   188c4:	cmn	r8, #1
   188c8:	beq	187ac <flatcc_emitter@@Base+0x11c>
   188cc:	ldr	r7, [r5, #-8]
   188d0:	ldr	r6, [r5, #-4]
   188d4:	cmp	r6, #0
   188d8:	add	r7, r7, r6
   188dc:	beq	1892c <flatcc_emitter@@Base+0x29c>
   188e0:	mov	r9, #1472	; 0x5c0
   188e4:	ldr	r2, [r4, #12]
   188e8:	cmp	r2, r6
   188ec:	bcs	18990 <flatcc_emitter@@Base+0x300>
   188f0:	cmp	r2, #0
   188f4:	beq	18938 <flatcc_emitter@@Base+0x2a8>
   188f8:	sub	r6, r6, r2
   188fc:	mov	r1, #0
   18900:	ldr	r3, [r4, #8]
   18904:	rsb	r0, r2, #0
   18908:	add	r7, r7, r0
   1890c:	str	r1, [r4, #12]
   18910:	mov	r1, r7
   18914:	add	r3, r3, r0
   18918:	mov	r0, r3
   1891c:	str	r3, [r4, #8]
   18920:	bl	11f90 <memcpy@plt>
   18924:	cmp	r6, #0
   18928:	bne	188e4 <flatcc_emitter@@Base+0x254>
   1892c:	sub	r5, r5, #8
   18930:	sub	r8, r8, #1
   18934:	b	188c4 <flatcc_emitter@@Base+0x234>
   18938:	ldr	fp, [r4]
   1893c:	cmp	fp, #0
   18940:	beq	189d4 <flatcc_emitter@@Base+0x344>
   18944:	ldr	sl, [r4, #4]
   18948:	ldr	r0, [fp, #2948]	; 0xb84
   1894c:	cmp	r0, sl
   18950:	beq	189a0 <flatcc_emitter@@Base+0x310>
   18954:	ldr	r3, [fp, #2952]	; 0xb88
   18958:	sub	r3, r3, #2944	; 0xb80
   1895c:	str	r3, [r0, #2952]	; 0xb88
   18960:	str	r0, [r4]
   18964:	ldr	r3, [r0, #2944]	; 0xb80
   18968:	mov	r2, #2944	; 0xb80
   1896c:	add	r1, r0, #2944	; 0xb80
   18970:	ldr	r3, [r3, #2952]	; 0xb88
   18974:	str	r1, [r4, #8]
   18978:	str	r2, [r4, #12]
   1897c:	sub	r3, r3, #2944	; 0xb80
   18980:	str	r3, [r0, #2952]	; 0xb88
   18984:	ldr	r2, [r4, #12]
   18988:	cmp	r2, r6
   1898c:	bcc	188f0 <flatcc_emitter@@Base+0x260>
   18990:	sub	r1, r2, r6
   18994:	mov	r2, r6
   18998:	mov	r6, #0
   1899c:	b	18900 <flatcc_emitter@@Base+0x270>
   189a0:	movw	r0, #2956	; 0xb8c
   189a4:	bl	11fd8 <malloc@plt>
   189a8:	cmp	r0, #0
   189ac:	beq	188a0 <flatcc_emitter@@Base+0x210>
   189b0:	ldr	r2, [r4, #28]
   189b4:	str	fp, [r0, #2944]	; 0xb80
   189b8:	str	sl, [r0, #2948]	; 0xb84
   189bc:	add	r2, r2, #2944	; 0xb80
   189c0:	str	r2, [r4, #28]
   189c4:	str	r0, [fp, #2948]	; 0xb84
   189c8:	str	r0, [sl, #2944]	; 0xb80
   189cc:	str	r0, [r4]
   189d0:	b	18964 <flatcc_emitter@@Base+0x2d4>
   189d4:	movw	r0, #2956	; 0xb8c
   189d8:	bl	11fd8 <malloc@plt>
   189dc:	cmp	r0, #0
   189e0:	beq	188a0 <flatcc_emitter@@Base+0x210>
   189e4:	ldr	r3, [r4, #28]
   189e8:	add	r2, r0, #1472	; 0x5c0
   189ec:	str	r0, [r4]
   189f0:	stmib	r4, {r0, r2, r9}
   189f4:	add	r3, r3, #2944	; 0xb80
   189f8:	str	r2, [r4, #16]
   189fc:	str	r9, [r4, #20]
   18a00:	str	r3, [r4, #28]
   18a04:	ldr	r3, [sp, #4]
   18a08:	str	r0, [r0, #2944]	; 0xb80
   18a0c:	str	r0, [r0, #2948]	; 0xb84
   18a10:	str	r3, [r0, #2952]	; 0xb88
   18a14:	b	188e4 <flatcc_emitter@@Base+0x254>
   18a18:	ldr	r3, [r4, #8]
   18a1c:	sub	r0, r0, ip
   18a20:	str	r0, [r4, #12]
   18a24:	sub	r3, r3, ip
   18a28:	str	r3, [r4, #8]
   18a2c:	b	1877c <flatcc_emitter@@Base+0xec>

00018a30 <flatcc_emitter_copy_buffer@@Base>:
   18a30:	ldr	r3, [r0, #24]
   18a34:	strd	r4, [sp, #-16]!
   18a38:	str	r6, [sp, #8]
   18a3c:	str	lr, [sp, #12]
   18a40:	cmp	r3, r2
   18a44:	movhi	r5, #0
   18a48:	bhi	18ac8 <flatcc_emitter_copy_buffer@@Base+0x98>
   18a4c:	ldr	r5, [r0]
   18a50:	mov	r6, r0
   18a54:	cmp	r5, #0
   18a58:	beq	18ac8 <flatcc_emitter_copy_buffer@@Base+0x98>
   18a5c:	ldr	r2, [r6, #4]
   18a60:	mov	r0, r1
   18a64:	ldr	r1, [r6, #8]
   18a68:	cmp	r5, r2
   18a6c:	beq	18adc <flatcc_emitter_copy_buffer@@Base+0xac>
   18a70:	ldr	r2, [r6, #12]
   18a74:	rsb	r2, r2, #2944	; 0xb80
   18a78:	add	r5, r0, r2
   18a7c:	bl	11f90 <memcpy@plt>
   18a80:	ldrd	r2, [r6]
   18a84:	ldr	r4, [r2, #2944]	; 0xb80
   18a88:	cmp	r4, r3
   18a8c:	beq	18ab4 <flatcc_emitter_copy_buffer@@Base+0x84>
   18a90:	mov	r2, #2944	; 0xb80
   18a94:	mov	r1, r4
   18a98:	mov	r0, r5
   18a9c:	add	r5, r5, r2
   18aa0:	bl	11f90 <memcpy@plt>
   18aa4:	ldr	r3, [r6, #4]
   18aa8:	ldr	r4, [r4, #2944]	; 0xb80
   18aac:	cmp	r3, r4
   18ab0:	bne	18a90 <flatcc_emitter_copy_buffer@@Base+0x60>
   18ab4:	ldr	r2, [r6, #20]
   18ab8:	mov	r1, r4
   18abc:	mov	r0, r5
   18ac0:	rsb	r2, r2, #2944	; 0xb80
   18ac4:	bl	11f90 <memcpy@plt>
   18ac8:	mov	r0, r5
   18acc:	ldrd	r4, [sp]
   18ad0:	ldr	r6, [sp, #8]
   18ad4:	add	sp, sp, #12
   18ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   18adc:	mov	r2, r3
   18ae0:	mov	r5, r0
   18ae4:	bl	11f90 <memcpy@plt>
   18ae8:	b	18ac8 <flatcc_emitter_copy_buffer@@Base+0x98>

00018aec <__libc_csu_init@@Base>:
   18aec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18af0:	mov	r7, r0
   18af4:	ldr	r6, [pc, #72]	; 18b44 <__libc_csu_init@@Base+0x58>
   18af8:	ldr	r5, [pc, #72]	; 18b48 <__libc_csu_init@@Base+0x5c>
   18afc:	add	r6, pc, r6
   18b00:	add	r5, pc, r5
   18b04:	sub	r6, r6, r5
   18b08:	mov	r8, r1
   18b0c:	mov	r9, r2
   18b10:	bl	11f40 <strcmp@plt-0x20>
   18b14:	asrs	r6, r6, #2
   18b18:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b1c:	mov	r4, #0
   18b20:	add	r4, r4, #1
   18b24:	ldr	r3, [r5], #4
   18b28:	mov	r2, r9
   18b2c:	mov	r1, r8
   18b30:	mov	r0, r7
   18b34:	blx	r3
   18b38:	cmp	r6, r4
   18b3c:	bne	18b20 <__libc_csu_init@@Base+0x34>
   18b40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b44:	andeq	r1, r1, r0, lsl r4
   18b48:	andeq	r1, r1, r8, lsl #8

00018b4c <__libc_csu_fini@@Base>:
   18b4c:	bx	lr

Disassembly of section .fini:

00018b50 <.fini>:
   18b50:	push	{r3, lr}
   18b54:	pop	{r3, pc}
