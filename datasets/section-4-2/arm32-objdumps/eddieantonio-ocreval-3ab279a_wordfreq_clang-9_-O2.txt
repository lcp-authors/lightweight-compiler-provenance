
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010b60 <.init>:
   10b60:	push	{r3, lr}
   10b64:	bl	10d94 <__assert_fail@plt+0x4c>
   10b68:	pop	{r3, pc}

Disassembly of section .plt:

00010b6c <calloc@plt-0x14>:
   10b6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b70:	ldr	lr, [pc, #4]	; 10b7c <calloc@plt-0x4>
   10b74:	add	lr, pc, lr
   10b78:	ldr	pc, [lr, #8]!
   10b7c:	andeq	r7, r1, r4, lsl #9

00010b80 <calloc@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #94208	; 0x17000
   10b88:	ldr	pc, [ip, #1156]!	; 0x484

00010b8c <strcmp@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #94208	; 0x17000
   10b94:	ldr	pc, [ip, #1148]!	; 0x47c

00010b98 <strtol@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #94208	; 0x17000
   10ba0:	ldr	pc, [ip, #1140]!	; 0x474

00010ba4 <printf@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #94208	; 0x17000
   10bac:	ldr	pc, [ip, #1132]!	; 0x46c

00010bb0 <fopen@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #94208	; 0x17000
   10bb8:	ldr	pc, [ip, #1124]!	; 0x464

00010bbc <free@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #94208	; 0x17000
   10bc4:	ldr	pc, [ip, #1116]!	; 0x45c

00010bc8 <utf8proc_get_property@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #94208	; 0x17000
   10bd0:	ldr	pc, [ip, #1108]!	; 0x454

00010bd4 <fgets@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #94208	; 0x17000
   10bdc:	ldr	pc, [ip, #1100]!	; 0x44c

00010be0 <utf8proc_encode_char@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #94208	; 0x17000
   10be8:	ldr	pc, [ip, #1092]!	; 0x444

00010bec <strdup@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #94208	; 0x17000
   10bf4:	ldr	pc, [ip, #1084]!	; 0x43c

00010bf8 <rewind@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #94208	; 0x17000
   10c00:	ldr	pc, [ip, #1076]!	; 0x434

00010c04 <unlink@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #94208	; 0x17000
   10c0c:	ldr	pc, [ip, #1068]!	; 0x42c

00010c10 <utf8proc_tolower@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #94208	; 0x17000
   10c18:	ldr	pc, [ip, #1060]!	; 0x424

00010c1c <__xstat@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #94208	; 0x17000
   10c24:	ldr	pc, [ip, #1052]!	; 0x41c

00010c28 <fwrite@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #94208	; 0x17000
   10c30:	ldr	pc, [ip, #1044]!	; 0x414

00010c34 <fread@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #94208	; 0x17000
   10c3c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c40 <utf8proc_iterate@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #94208	; 0x17000
   10c48:	ldr	pc, [ip, #1028]!	; 0x404

00010c4c <puts@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #94208	; 0x17000
   10c54:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c58 <malloc@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #94208	; 0x17000
   10c60:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c64 <__libc_start_main@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #94208	; 0x17000
   10c6c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c70 <__sysv_signal@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #94208	; 0x17000
   10c78:	ldr	pc, [ip, #996]!	; 0x3e4

00010c7c <__gmon_start__@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #94208	; 0x17000
   10c84:	ldr	pc, [ip, #988]!	; 0x3dc

00010c88 <getpid@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #94208	; 0x17000
   10c90:	ldr	pc, [ip, #980]!	; 0x3d4

00010c94 <exit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #94208	; 0x17000
   10c9c:	ldr	pc, [ip, #972]!	; 0x3cc

00010ca0 <bcmp@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #94208	; 0x17000
   10ca8:	ldr	pc, [ip, #964]!	; 0x3c4

00010cac <utf8proc_category@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #94208	; 0x17000
   10cb4:	ldr	pc, [ip, #956]!	; 0x3bc

00010cb8 <strlen@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #94208	; 0x17000
   10cc0:	ldr	pc, [ip, #948]!	; 0x3b4

00010cc4 <fprintf@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #94208	; 0x17000
   10ccc:	ldr	pc, [ip, #940]!	; 0x3ac

00010cd0 <__isoc99_sscanf@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #94208	; 0x17000
   10cd8:	ldr	pc, [ip, #932]!	; 0x3a4

00010cdc <fclose@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #94208	; 0x17000
   10ce4:	ldr	pc, [ip, #924]!	; 0x39c

00010ce8 <utf8proc_NFC@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #94208	; 0x17000
   10cf0:	ldr	pc, [ip, #916]!	; 0x394

00010cf4 <fputc@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #94208	; 0x17000
   10cfc:	ldr	pc, [ip, #908]!	; 0x38c

00010d00 <sprintf@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #94208	; 0x17000
   10d08:	ldr	pc, [ip, #900]!	; 0x384

00010d0c <utf8proc_errmsg@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #94208	; 0x17000
   10d14:	ldr	pc, [ip, #892]!	; 0x37c

00010d18 <fputs@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #94208	; 0x17000
   10d20:	ldr	pc, [ip, #884]!	; 0x374

00010d24 <strncmp@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #94208	; 0x17000
   10d2c:	ldr	pc, [ip, #876]!	; 0x36c

00010d30 <abort@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #94208	; 0x17000
   10d38:	ldr	pc, [ip, #868]!	; 0x364

00010d3c <getc@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #94208	; 0x17000
   10d44:	ldr	pc, [ip, #860]!	; 0x35c

00010d48 <__assert_fail@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #94208	; 0x17000
   10d50:	ldr	pc, [ip, #852]!	; 0x354

Disassembly of section .text:

00010d58 <error@@Base-0x10c8>:
   10d58:	mov	fp, #0
   10d5c:	mov	lr, #0
   10d60:	pop	{r1}		; (ldr r1, [sp], #4)
   10d64:	mov	r2, sp
   10d68:	push	{r2}		; (str r2, [sp, #-4]!)
   10d6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d70:	ldr	ip, [pc, #16]	; 10d88 <__assert_fail@plt+0x40>
   10d74:	push	{ip}		; (str ip, [sp, #-4]!)
   10d78:	ldr	r0, [pc, #12]	; 10d8c <__assert_fail@plt+0x44>
   10d7c:	ldr	r3, [pc, #12]	; 10d90 <__assert_fail@plt+0x48>
   10d80:	bl	10c64 <__libc_start_main@plt>
   10d84:	bl	10d30 <abort@plt>
   10d88:	andeq	r3, r1, r4, lsr ip
   10d8c:	andeq	r1, r1, r0, asr r1
   10d90:	ldrdeq	r3, [r1], -r4
   10d94:	ldr	r3, [pc, #20]	; 10db0 <__assert_fail@plt+0x68>
   10d98:	ldr	r2, [pc, #20]	; 10db4 <__assert_fail@plt+0x6c>
   10d9c:	add	r3, pc, r3
   10da0:	ldr	r2, [r3, r2]
   10da4:	cmp	r2, #0
   10da8:	bxeq	lr
   10dac:	b	10c7c <__gmon_start__@plt>
   10db0:	andeq	r7, r1, ip, asr r2
   10db4:	andeq	r0, r0, r8, asr #1
   10db8:	ldr	r0, [pc, #24]	; 10dd8 <__assert_fail@plt+0x90>
   10dbc:	ldr	r3, [pc, #24]	; 10ddc <__assert_fail@plt+0x94>
   10dc0:	cmp	r3, r0
   10dc4:	bxeq	lr
   10dc8:	ldr	r3, [pc, #16]	; 10de0 <__assert_fail@plt+0x98>
   10dcc:	cmp	r3, #0
   10dd0:	bxeq	lr
   10dd4:	bx	r3
   10dd8:	andeq	r8, r2, ip, lsl #2
   10ddc:	andeq	r8, r2, ip, lsl #2
   10de0:	andeq	r0, r0, r0
   10de4:	ldr	r0, [pc, #36]	; 10e10 <__assert_fail@plt+0xc8>
   10de8:	ldr	r1, [pc, #36]	; 10e14 <__assert_fail@plt+0xcc>
   10dec:	sub	r1, r1, r0
   10df0:	asr	r1, r1, #2
   10df4:	add	r1, r1, r1, lsr #31
   10df8:	asrs	r1, r1, #1
   10dfc:	bxeq	lr
   10e00:	ldr	r3, [pc, #16]	; 10e18 <__assert_fail@plt+0xd0>
   10e04:	cmp	r3, #0
   10e08:	bxeq	lr
   10e0c:	bx	r3
   10e10:	andeq	r8, r2, ip, lsl #2
   10e14:	andeq	r8, r2, ip, lsl #2
   10e18:	andeq	r0, r0, r0
   10e1c:	push	{r4, lr}
   10e20:	ldr	r4, [pc, #24]	; 10e40 <__assert_fail@plt+0xf8>
   10e24:	ldrb	r3, [r4]
   10e28:	cmp	r3, #0
   10e2c:	popne	{r4, pc}
   10e30:	bl	10db8 <__assert_fail@plt+0x70>
   10e34:	mov	r3, #1
   10e38:	strb	r3, [r4]
   10e3c:	pop	{r4, pc}
   10e40:	andeq	r8, r2, ip, lsl #2
   10e44:	b	10de4 <__assert_fail@plt+0x9c>
   10e48:	push	{r4, r5, fp, lr}
   10e4c:	add	fp, sp, #8
   10e50:	ldr	r4, [pc, #136]	; 10ee0 <__assert_fail@plt+0x198>
   10e54:	mov	r1, r0
   10e58:	ldr	r4, [pc, r4]
   10e5c:	ldr	r2, [pc, #128]	; 10ee4 <__assert_fail@plt+0x19c>
   10e60:	ldr	r2, [pc, r2]
   10e64:	mov	r0, r4
   10e68:	bl	1356c <error@@Base+0x174c>
   10e6c:	ldr	r5, [pc, #116]	; 10ee8 <__assert_fail@plt+0x1a0>
   10e70:	mov	r1, r4
   10e74:	ldr	r5, [pc, r5]
   10e78:	mov	r0, r5
   10e7c:	bl	12d18 <error@@Base+0xef8>
   10e80:	ldr	r5, [r5]
   10e84:	cmp	r5, #0
   10e88:	beq	10eb4 <__assert_fail@plt+0x16c>
   10e8c:	ldr	r4, [pc, #88]	; 10eec <__assert_fail@plt+0x1a4>
   10e90:	ldr	r4, [pc, r4]
   10e94:	ldr	r1, [r5, #8]
   10e98:	mov	r0, r4
   10e9c:	mov	r2, #1
   10ea0:	mov	r3, #0
   10ea4:	bl	1205c <error@@Base+0x23c>
   10ea8:	ldr	r5, [r5, #4]
   10eac:	cmp	r5, #0
   10eb0:	bne	10e94 <__assert_fail@plt+0x14c>
   10eb4:	ldr	r0, [pc, #52]	; 10ef0 <__assert_fail@plt+0x1a8>
   10eb8:	ldr	r0, [pc, r0]
   10ebc:	ldr	r1, [pc, #48]	; 10ef4 <__assert_fail@plt+0x1ac>
   10ec0:	ldr	r1, [pc, r1]
   10ec4:	bl	11480 <__assert_fail@plt+0x738>
   10ec8:	ldr	r0, [pc, #40]	; 10ef8 <__assert_fail@plt+0x1b0>
   10ecc:	ldr	r0, [pc, r0]
   10ed0:	ldr	r1, [pc, #36]	; 10efc <__assert_fail@plt+0x1b4>
   10ed4:	ldr	r1, [pc, r1]
   10ed8:	pop	{r4, r5, fp, lr}
   10edc:	b	11480 <__assert_fail@plt+0x738>
   10ee0:	andeq	r7, r1, r8, asr #4
   10ee4:	andeq	r7, r1, r4, asr r2
   10ee8:	andeq	r7, r1, r4, asr #4
   10eec:	andeq	r7, r1, r8, asr #4
   10ef0:	andeq	r7, r1, r8, ror #3
   10ef4:	andeq	r7, r1, ip, ror #3
   10ef8:	andeq	r7, r1, ip, ror #3
   10efc:	ldrdeq	r7, [r1], -r0
   10f00:	ldr	r1, [r1, #8]
   10f04:	ldr	r0, [r0, #8]
   10f08:	b	11974 <__assert_fail@plt+0xc2c>
   10f0c:	ldr	r2, [r1, #12]
   10f10:	ldr	r3, [r0, #12]
   10f14:	cmp	r2, r3
   10f18:	subne	r0, r2, r3
   10f1c:	bxne	lr
   10f20:	ldr	r1, [r1, #8]
   10f24:	ldr	r0, [r0, #8]
   10f28:	b	11974 <__assert_fail@plt+0xc2c>
   10f2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10f30:	add	fp, sp, #24
   10f34:	ldr	r0, [pc, #132]	; 10fc0 <__assert_fail@plt+0x278>
   10f38:	add	r0, pc, r0
   10f3c:	bl	10c4c <puts@plt>
   10f40:	ldr	r6, [pc, #124]	; 10fc4 <__assert_fail@plt+0x27c>
   10f44:	movw	r8, #8052	; 0x1f74
   10f48:	ldr	r6, [pc, r6]
   10f4c:	ldr	r0, [r6, r8]
   10f50:	cmp	r0, #1
   10f54:	blt	10fa8 <__assert_fail@plt+0x260>
   10f58:	movw	r9, #8048	; 0x1f70
   10f5c:	mov	r4, #0
   10f60:	mov	r7, #0
   10f64:	ldr	r0, [r6, r9]
   10f68:	ldr	r5, [pc, #88]	; 10fc8 <__assert_fail@plt+0x280>
   10f6c:	add	r5, pc, r5
   10f70:	ldr	r0, [r0, r7, lsl #2]
   10f74:	ldr	r2, [r0, #8]
   10f78:	ldr	r1, [r0, #12]
   10f7c:	mov	r0, r5
   10f80:	bl	10ba4 <printf@plt>
   10f84:	ldr	r0, [r6, r9]
   10f88:	ldr	r1, [r6, r8]
   10f8c:	ldr	r2, [r0, r7, lsl #2]
   10f90:	add	r7, r7, #1
   10f94:	cmp	r7, r1
   10f98:	ldr	r2, [r2, #12]
   10f9c:	add	r4, r2, r4
   10fa0:	blt	10f70 <__assert_fail@plt+0x228>
   10fa4:	b	10fac <__assert_fail@plt+0x264>
   10fa8:	mov	r4, #0
   10fac:	ldr	r0, [pc, #24]	; 10fcc <__assert_fail@plt+0x284>
   10fb0:	mov	r1, r4
   10fb4:	add	r0, pc, r0
   10fb8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   10fbc:	b	10ba4 <printf@plt>
   10fc0:	andeq	r2, r0, r9, asr sp
   10fc4:	muleq	r1, r0, r1
   10fc8:	ldrdeq	r2, [r0], -r0
   10fcc:	muleq	r0, r3, ip
   10fd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fd4:	add	fp, sp, #28
   10fd8:	sub	sp, sp, #4
   10fdc:	ldr	r4, [pc, #324]	; 11128 <__assert_fail@plt+0x3e0>
   10fe0:	ldr	r4, [pc, r4]
   10fe4:	mov	r0, r4
   10fe8:	bl	11878 <__assert_fail@plt+0xb30>
   10fec:	movw	r8, #8052	; 0x1f74
   10ff0:	mov	r5, r4
   10ff4:	ldr	r0, [r5, r8]!
   10ff8:	ldr	r1, [r5, #-4]
   10ffc:	ldr	r2, [pc, #296]	; 1112c <__assert_fail@plt+0x3e4>
   11000:	ldr	r2, [pc, r2]
   11004:	bl	11510 <__assert_fail@plt+0x7c8>
   11008:	ldr	r0, [pc, #288]	; 11130 <__assert_fail@plt+0x3e8>
   1100c:	add	r0, pc, r0
   11010:	bl	10c4c <puts@plt>
   11014:	ldr	r0, [r5]
   11018:	mov	r5, #0
   1101c:	mov	r6, #0
   11020:	cmp	r0, #1
   11024:	blt	11074 <__assert_fail@plt+0x32c>
   11028:	movw	r9, #8048	; 0x1f70
   1102c:	mov	r6, #0
   11030:	mov	r7, #0
   11034:	ldr	r0, [r4, r9]
   11038:	ldr	sl, [pc, #244]	; 11134 <__assert_fail@plt+0x3ec>
   1103c:	add	sl, pc, sl
   11040:	ldr	r0, [r0, r7, lsl #2]
   11044:	ldr	r2, [r0, #8]
   11048:	ldr	r1, [r0, #12]
   1104c:	mov	r0, sl
   11050:	bl	10ba4 <printf@plt>
   11054:	ldr	r0, [r4, r9]
   11058:	ldr	r1, [r4, r8]
   1105c:	ldr	r2, [r0, r7, lsl #2]
   11060:	add	r7, r7, #1
   11064:	cmp	r7, r1
   11068:	ldr	r2, [r2, #12]
   1106c:	add	r6, r2, r6
   11070:	blt	11040 <__assert_fail@plt+0x2f8>
   11074:	ldr	r0, [pc, #188]	; 11138 <__assert_fail@plt+0x3f0>
   11078:	mov	r1, r6
   1107c:	add	r0, pc, r0
   11080:	bl	10ba4 <printf@plt>
   11084:	ldr	r0, [pc, #176]	; 1113c <__assert_fail@plt+0x3f4>
   11088:	add	r0, pc, r0
   1108c:	bl	10c4c <puts@plt>
   11090:	mov	r6, r4
   11094:	ldr	r0, [r6, r8]!
   11098:	ldr	r1, [r6, #-4]
   1109c:	ldr	r2, [pc, #156]	; 11140 <__assert_fail@plt+0x3f8>
   110a0:	ldr	r2, [pc, r2]
   110a4:	bl	11510 <__assert_fail@plt+0x7c8>
   110a8:	ldr	r0, [pc, #148]	; 11144 <__assert_fail@plt+0x3fc>
   110ac:	add	r0, pc, r0
   110b0:	bl	10c4c <puts@plt>
   110b4:	ldr	r0, [r6]
   110b8:	cmp	r0, #1
   110bc:	blt	11110 <__assert_fail@plt+0x3c8>
   110c0:	movw	r8, #8048	; 0x1f70
   110c4:	mov	r5, #0
   110c8:	movw	r7, #8052	; 0x1f74
   110cc:	mov	r6, #0
   110d0:	ldr	r0, [r4, r8]
   110d4:	ldr	r9, [pc, #108]	; 11148 <__assert_fail@plt+0x400>
   110d8:	add	r9, pc, r9
   110dc:	ldr	r0, [r0, r6, lsl #2]
   110e0:	ldr	r2, [r0, #8]
   110e4:	ldr	r1, [r0, #12]
   110e8:	mov	r0, r9
   110ec:	bl	10ba4 <printf@plt>
   110f0:	ldr	r0, [r4, r8]
   110f4:	ldr	r1, [r4, r7]
   110f8:	ldr	r2, [r0, r6, lsl #2]
   110fc:	add	r6, r6, #1
   11100:	cmp	r6, r1
   11104:	ldr	r2, [r2, #12]
   11108:	add	r5, r2, r5
   1110c:	blt	110dc <__assert_fail@plt+0x394>
   11110:	ldr	r0, [pc, #52]	; 1114c <__assert_fail@plt+0x404>
   11114:	mov	r1, r5
   11118:	add	r0, pc, r0
   1111c:	sub	sp, fp, #28
   11120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11124:	b	10ba4 <printf@plt>
   11128:	strdeq	r7, [r1], -r8
   1112c:	andeq	r7, r1, r0, ror #1
   11130:	andeq	r2, r0, r5, lsl #25
   11134:	andeq	r2, r0, r0, lsl #24
   11138:	andeq	r2, r0, fp, asr #23
   1113c:	andeq	r2, r0, r9, ror #24
   11140:	andeq	r7, r1, r4, asr #32
   11144:	andeq	r2, r0, r5, ror #23
   11148:	andeq	r2, r0, r4, ror #22
   1114c:	andeq	r2, r0, pc, lsr #22
   11150:	push	{fp, lr}
   11154:	mov	fp, sp
   11158:	sub	sp, sp, #8
   1115c:	str	r0, [sp, #4]
   11160:	add	r0, sp, #4
   11164:	mov	r3, #0
   11168:	mov	r4, r1
   1116c:	ldr	r2, [pc, #196]	; 11238 <__assert_fail@plt+0x4f0>
   11170:	add	r2, pc, r2
   11174:	bl	11b98 <__assert_fail@plt+0xe50>
   11178:	ldr	r0, [sp, #4]
   1117c:	cmp	r0, #0
   11180:	beq	1122c <__assert_fail@plt+0x4e4>
   11184:	cmp	r0, #1
   11188:	blt	11224 <__assert_fail@plt+0x4dc>
   1118c:	ldr	r5, [pc, #168]	; 1123c <__assert_fail@plt+0x4f4>
   11190:	mov	r8, #0
   11194:	ldr	r5, [pc, r5]
   11198:	ldr	r7, [pc, #160]	; 11240 <__assert_fail@plt+0x4f8>
   1119c:	ldr	r7, [pc, r7]
   111a0:	ldr	sl, [pc, #156]	; 11244 <__assert_fail@plt+0x4fc>
   111a4:	ldr	sl, [pc, sl]
   111a8:	ldr	r6, [pc, #152]	; 11248 <__assert_fail@plt+0x500>
   111ac:	ldr	r6, [pc, r6]
   111b0:	ldr	r1, [r4, r8, lsl #2]
   111b4:	ldr	r2, [pc, #144]	; 1124c <__assert_fail@plt+0x504>
   111b8:	mov	r0, r5
   111bc:	ldr	r2, [pc, r2]
   111c0:	bl	1356c <error@@Base+0x174c>
   111c4:	mov	r0, r7
   111c8:	mov	r1, r5
   111cc:	bl	12d18 <error@@Base+0xef8>
   111d0:	ldr	r9, [r7]
   111d4:	b	111f0 <__assert_fail@plt+0x4a8>
   111d8:	ldr	r1, [r9, #8]
   111dc:	mov	r0, r6
   111e0:	mov	r2, #1
   111e4:	mov	r3, #0
   111e8:	bl	1205c <error@@Base+0x23c>
   111ec:	ldr	r9, [r9, #4]
   111f0:	cmp	r9, #0
   111f4:	bne	111d8 <__assert_fail@plt+0x490>
   111f8:	ldr	r1, [pc, #80]	; 11250 <__assert_fail@plt+0x508>
   111fc:	mov	r0, r5
   11200:	ldr	r1, [pc, r1]
   11204:	bl	11480 <__assert_fail@plt+0x738>
   11208:	mov	r0, r7
   1120c:	mov	r1, sl
   11210:	bl	11480 <__assert_fail@plt+0x738>
   11214:	ldr	r0, [sp, #4]
   11218:	add	r8, r8, #1
   1121c:	cmp	r8, r0
   11220:	blt	111b0 <__assert_fail@plt+0x468>
   11224:	bl	10fd0 <__assert_fail@plt+0x288>
   11228:	bl	11ddc <__assert_fail@plt+0x1094>
   1122c:	ldr	r0, [pc, #32]	; 11254 <__assert_fail@plt+0x50c>
   11230:	add	r0, pc, r0
   11234:	bl	11e20 <error@@Base>
   11238:	andeq	r2, r0, r5, ror #21
   1123c:	andeq	r6, r1, ip, lsl #30
   11240:	andeq	r6, r1, ip, lsl pc
   11244:	andeq	r6, r1, r0, lsl #30
   11248:	andeq	r6, r1, ip, lsr #30
   1124c:	strdeq	r6, [r1], -r8
   11250:	andeq	r6, r1, ip, lsr #29
   11254:	andeq	r2, r0, r9, asr #20
   11258:	vmov.i32	q8, #0	; 0x00000000
   1125c:	vst1.32	{d16-d17}, [r0]
   11260:	bx	lr
   11264:	push	{r4, r5, fp, lr}
   11268:	add	fp, sp, #8
   1126c:	mov	r4, r0
   11270:	ldr	r0, [r0]
   11274:	mov	r5, #0
   11278:	str	r5, [r1]
   1127c:	cmp	r0, #0
   11280:	str	r0, [r1, #4]
   11284:	str	r1, [r4]
   11288:	addeq	r0, r4, #4
   1128c:	str	r1, [r0]
   11290:	ldr	r0, [r4, #8]
   11294:	cmp	r0, #0
   11298:	beq	112a4 <__assert_fail@plt+0x55c>
   1129c:	bl	10bbc <free@plt>
   112a0:	str	r5, [r4, #8]
   112a4:	ldr	r0, [r4, #12]
   112a8:	add	r0, r0, #1
   112ac:	str	r0, [r4, #12]
   112b0:	pop	{r4, r5, fp, pc}
   112b4:	push	{r4, r5, fp, lr}
   112b8:	add	fp, sp, #8
   112bc:	mov	r4, r0
   112c0:	ldr	r0, [r0, #4]
   112c4:	mov	r5, #0
   112c8:	mov	r2, r4
   112cc:	cmp	r0, #0
   112d0:	stm	r1, {r0, r5}
   112d4:	addne	r2, r0, #4
   112d8:	str	r1, [r2]
   112dc:	str	r1, [r4, #4]
   112e0:	ldr	r0, [r4, #8]
   112e4:	cmp	r0, #0
   112e8:	beq	112f4 <__assert_fail@plt+0x5ac>
   112ec:	bl	10bbc <free@plt>
   112f0:	str	r5, [r4, #8]
   112f4:	ldr	r0, [r4, #12]
   112f8:	add	r0, r0, #1
   112fc:	str	r0, [r4, #12]
   11300:	pop	{r4, r5, fp, pc}
   11304:	push	{r4, sl, fp, lr}
   11308:	add	fp, sp, #8
   1130c:	mov	r4, r0
   11310:	ldr	r0, [r2]
   11314:	mov	r3, r4
   11318:	cmp	r0, #0
   1131c:	stm	r1, {r0, r2}
   11320:	addne	r3, r0, #4
   11324:	str	r1, [r3]
   11328:	str	r1, [r2]
   1132c:	ldr	r0, [r4, #8]
   11330:	cmp	r0, #0
   11334:	beq	11344 <__assert_fail@plt+0x5fc>
   11338:	bl	10bbc <free@plt>
   1133c:	mov	r0, #0
   11340:	str	r0, [r4, #8]
   11344:	ldr	r0, [r4, #12]
   11348:	add	r0, r0, #1
   1134c:	str	r0, [r4, #12]
   11350:	pop	{r4, sl, fp, pc}
   11354:	push	{r4, sl, fp, lr}
   11358:	add	fp, sp, #8
   1135c:	mov	r4, r0
   11360:	mov	r0, r1
   11364:	cmp	r1, #0
   11368:	ldr	r3, [r0, #4]!
   1136c:	moveq	r0, r4
   11370:	stm	r2, {r1, r3}
   11374:	str	r2, [r0]
   11378:	cmp	r3, #0
   1137c:	addeq	r3, r4, #4
   11380:	str	r2, [r3]
   11384:	ldr	r0, [r4, #8]
   11388:	cmp	r0, #0
   1138c:	beq	1139c <__assert_fail@plt+0x654>
   11390:	bl	10bbc <free@plt>
   11394:	mov	r0, #0
   11398:	str	r0, [r4, #8]
   1139c:	ldr	r0, [r4, #12]
   113a0:	add	r0, r0, #1
   113a4:	str	r0, [r4, #12]
   113a8:	pop	{r4, sl, fp, pc}
   113ac:	push	{r4, r5, fp, lr}
   113b0:	add	fp, sp, #8
   113b4:	mov	r4, r0
   113b8:	ldm	r1, {r0, r2}
   113bc:	cmp	r0, #0
   113c0:	beq	113d0 <__assert_fail@plt+0x688>
   113c4:	str	r2, [r0, #4]
   113c8:	ldr	r2, [r1, #4]
   113cc:	b	113d4 <__assert_fail@plt+0x68c>
   113d0:	str	r2, [r4]
   113d4:	cmp	r2, #0
   113d8:	mov	r5, #0
   113dc:	addeq	r2, r4, #4
   113e0:	str	r0, [r2]
   113e4:	str	r5, [r1]
   113e8:	str	r5, [r1, #4]
   113ec:	ldr	r0, [r4, #8]
   113f0:	cmp	r0, #0
   113f4:	beq	11400 <__assert_fail@plt+0x6b8>
   113f8:	bl	10bbc <free@plt>
   113fc:	str	r5, [r4, #8]
   11400:	ldr	r0, [r4, #12]
   11404:	sub	r0, r0, #1
   11408:	str	r0, [r4, #12]
   1140c:	pop	{r4, r5, fp, pc}
   11410:	push	{r4, sl, fp, lr}
   11414:	add	fp, sp, #8
   11418:	mov	r4, r0
   1141c:	ldr	r0, [r0, #8]
   11420:	cmp	r0, #0
   11424:	beq	1142c <__assert_fail@plt+0x6e4>
   11428:	pop	{r4, sl, fp, pc}
   1142c:	ldr	r0, [r4, #12]
   11430:	cmp	r0, #0
   11434:	beq	11428 <__assert_fail@plt+0x6e0>
   11438:	mov	r1, #4
   1143c:	bl	11950 <__assert_fail@plt+0xc08>
   11440:	str	r0, [r4, #8]
   11444:	ldr	r1, [r4]
   11448:	cmp	r1, #0
   1144c:	beq	11428 <__assert_fail@plt+0x6e0>
   11450:	str	r1, [r0]
   11454:	ldr	r0, [r1, #4]
   11458:	cmp	r0, #0
   1145c:	popeq	{r4, sl, fp, pc}
   11460:	mov	r1, #4
   11464:	ldr	r2, [r4, #8]
   11468:	str	r0, [r2, r1]
   1146c:	add	r1, r1, #4
   11470:	ldr	r0, [r0, #4]
   11474:	cmp	r0, #0
   11478:	bne	11464 <__assert_fail@plt+0x71c>
   1147c:	b	11428 <__assert_fail@plt+0x6e0>
   11480:	push	{r4, r5, r6, r7, fp, lr}
   11484:	add	fp, sp, #16
   11488:	ldr	r6, [r0]
   1148c:	cmp	r6, #0
   11490:	beq	1150c <__assert_fail@plt+0x7c4>
   11494:	mov	r4, r1
   11498:	mov	r5, r0
   1149c:	mov	r7, #0
   114a0:	b	114c4 <__assert_fail@plt+0x77c>
   114a4:	ldr	r0, [r5, #12]
   114a8:	sub	r0, r0, #1
   114ac:	str	r0, [r5, #12]
   114b0:	mov	r0, r6
   114b4:	blx	r4
   114b8:	ldr	r6, [r5]
   114bc:	cmp	r6, #0
   114c0:	beq	1150c <__assert_fail@plt+0x7c4>
   114c4:	ldm	r6, {r0, r1}
   114c8:	cmp	r0, #0
   114cc:	beq	114dc <__assert_fail@plt+0x794>
   114d0:	str	r1, [r0, #4]
   114d4:	ldr	r1, [r6, #4]
   114d8:	b	114e0 <__assert_fail@plt+0x798>
   114dc:	str	r1, [r5]
   114e0:	cmp	r1, #0
   114e4:	addeq	r1, r5, #4
   114e8:	str	r0, [r1]
   114ec:	str	r7, [r6]
   114f0:	str	r7, [r6, #4]
   114f4:	ldr	r0, [r5, #8]
   114f8:	cmp	r0, #0
   114fc:	beq	114a4 <__assert_fail@plt+0x75c>
   11500:	bl	10bbc <free@plt>
   11504:	str	r7, [r5, #8]
   11508:	b	114a4 <__assert_fail@plt+0x75c>
   1150c:	pop	{r4, r5, r6, r7, fp, pc}
   11510:	cmp	r0, #2
   11514:	bxlt	lr
   11518:	ldr	r3, [pc, #28]	; 1153c <__assert_fail@plt+0x7f4>
   1151c:	add	r3, pc, r3
   11520:	str	r2, [r3]
   11524:	ldr	r2, [pc, #20]	; 11540 <__assert_fail@plt+0x7f8>
   11528:	add	r2, pc, r2
   1152c:	str	r1, [r2]
   11530:	sub	r1, r0, #1
   11534:	mov	r0, #0
   11538:	b	11544 <__assert_fail@plt+0x7fc>
   1153c:	strdeq	r6, [r1], -r0
   11540:	andeq	r6, r1, r0, ror #23
   11544:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11548:	add	fp, sp, #24
   1154c:	mov	r8, r1
   11550:	mov	r5, r0
   11554:	b	11584 <__assert_fail@plt+0x83c>
   11558:	mov	r7, r4
   1155c:	ldr	r0, [pc, #308]	; 11698 <__assert_fail@plt+0x950>
   11560:	ldr	r0, [pc, r0]
   11564:	sub	r1, r4, #1
   11568:	str	r6, [r0, r4, lsl #2]
   1156c:	cmp	r1, r5
   11570:	movgt	r0, r5
   11574:	blgt	11544 <__assert_fail@plt+0x7fc>
   11578:	add	r5, r7, #1
   1157c:	cmp	r5, r8
   11580:	bge	11678 <__assert_fail@plt+0x930>
   11584:	ldr	r0, [pc, #240]	; 1167c <__assert_fail@plt+0x934>
   11588:	cmp	r5, r8
   1158c:	mov	r4, r8
   11590:	mov	r7, r5
   11594:	ldr	r0, [pc, r0]
   11598:	ldr	r6, [r0, r5, lsl #2]
   1159c:	bge	11564 <__assert_fail@plt+0x81c>
   115a0:	mov	r7, r5
   115a4:	mov	r4, r8
   115a8:	cmp	r7, r4
   115ac:	blt	115c4 <__assert_fail@plt+0x87c>
   115b0:	b	115f4 <__assert_fail@plt+0x8ac>
   115b4:	cmp	r7, r4
   115b8:	bge	1155c <__assert_fail@plt+0x814>
   115bc:	cmp	r7, r4
   115c0:	bge	115f4 <__assert_fail@plt+0x8ac>
   115c4:	ldr	r0, [pc, #180]	; 11680 <__assert_fail@plt+0x938>
   115c8:	ldr	r0, [pc, r0]
   115cc:	ldr	r1, [r0, r4, lsl #2]
   115d0:	ldr	r2, [pc, #172]	; 11684 <__assert_fail@plt+0x93c>
   115d4:	mov	r0, r6
   115d8:	ldr	r2, [pc, r2]
   115dc:	blx	r2
   115e0:	cmn	r0, #1
   115e4:	bgt	115f4 <__assert_fail@plt+0x8ac>
   115e8:	sub	r4, r4, #1
   115ec:	cmp	r7, r4
   115f0:	blt	115c4 <__assert_fail@plt+0x87c>
   115f4:	cmp	r7, r4
   115f8:	bne	11608 <__assert_fail@plt+0x8c0>
   115fc:	cmp	r7, r4
   11600:	blt	11624 <__assert_fail@plt+0x8dc>
   11604:	b	11658 <__assert_fail@plt+0x910>
   11608:	ldr	r0, [pc, #120]	; 11688 <__assert_fail@plt+0x940>
   1160c:	ldr	r0, [pc, r0]
   11610:	ldr	r1, [r0, r4, lsl #2]
   11614:	str	r1, [r0, r7, lsl #2]
   11618:	add	r7, r7, #1
   1161c:	cmp	r7, r4
   11620:	bge	11658 <__assert_fail@plt+0x910>
   11624:	ldr	r0, [pc, #96]	; 1168c <__assert_fail@plt+0x944>
   11628:	ldr	r0, [pc, r0]
   1162c:	ldr	r1, [r0, r7, lsl #2]
   11630:	ldr	r2, [pc, #88]	; 11690 <__assert_fail@plt+0x948>
   11634:	mov	r0, r6
   11638:	ldr	r2, [pc, r2]
   1163c:	blx	r2
   11640:	cmp	r0, #1
   11644:	blt	11658 <__assert_fail@plt+0x910>
   11648:	add	r7, r7, #1
   1164c:	cmp	r4, r7
   11650:	bne	11624 <__assert_fail@plt+0x8dc>
   11654:	b	11558 <__assert_fail@plt+0x810>
   11658:	cmp	r7, r4
   1165c:	beq	115b4 <__assert_fail@plt+0x86c>
   11660:	ldr	r0, [pc, #44]	; 11694 <__assert_fail@plt+0x94c>
   11664:	ldr	r0, [pc, r0]
   11668:	ldr	r1, [r0, r7, lsl #2]
   1166c:	str	r1, [r0, r4, lsl #2]
   11670:	sub	r4, r4, #1
   11674:	b	115b4 <__assert_fail@plt+0x86c>
   11678:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1167c:	andeq	r6, r1, r4, ror fp
   11680:	andeq	r6, r1, r0, asr #22
   11684:	andeq	r6, r1, r4, lsr fp
   11688:	strdeq	r6, [r1], -ip
   1168c:	andeq	r6, r1, r0, ror #21
   11690:	ldrdeq	r6, [r1], -r4
   11694:	andeq	r6, r1, r4, lsr #21
   11698:	andeq	r6, r1, r8, lsr #23
   1169c:	push	{r4, r5, r6, sl, fp, lr}
   116a0:	add	fp, sp, #16
   116a4:	mov	r4, r0
   116a8:	movw	r0, #8048	; 0x1f70
   116ac:	movw	r6, #503	; 0x1f7
   116b0:	add	r5, r4, r0
   116b4:	mov	r0, r4
   116b8:	bl	11258 <__assert_fail@plt+0x510>
   116bc:	subs	r6, r6, #1
   116c0:	add	r4, r4, #16
   116c4:	bne	116b4 <__assert_fail@plt+0x96c>
   116c8:	mov	r0, #0
   116cc:	str	r0, [r5]
   116d0:	str	r0, [r5, #4]
   116d4:	pop	{r4, r5, r6, sl, fp, pc}
   116d8:	push	{r4, r5, r6, sl, fp, lr}
   116dc:	add	fp, sp, #16
   116e0:	mov	r5, r1
   116e4:	ldrb	r1, [r1]
   116e8:	mov	r4, #0
   116ec:	mov	r2, #0
   116f0:	cmp	r1, #0
   116f4:	beq	11728 <__assert_fail@plt+0x9e0>
   116f8:	add	r3, r5, #1
   116fc:	mov	r2, #0
   11700:	uxtab	r2, r2, r1
   11704:	ldrb	r1, [r3], #1
   11708:	cmp	r1, #0
   1170c:	bne	11700 <__assert_fail@plt+0x9b8>
   11710:	movw	r1, #20065	; 0x4e61
   11714:	movt	r1, #33354	; 0x824a
   11718:	umull	r1, r3, r2, r1
   1171c:	lsr	r1, r3, #8
   11720:	movw	r3, #503	; 0x1f7
   11724:	mls	r2, r1, r3, r2
   11728:	ldr	r6, [r0, r2, lsl #4]
   1172c:	cmp	r6, #0
   11730:	beq	11754 <__assert_fail@plt+0xa0c>
   11734:	ldr	r1, [r6, #8]
   11738:	mov	r0, r5
   1173c:	bl	10b8c <strcmp@plt>
   11740:	cmp	r0, #0
   11744:	beq	1175c <__assert_fail@plt+0xa14>
   11748:	ldr	r6, [r6, #4]
   1174c:	cmp	r6, #0
   11750:	bne	11734 <__assert_fail@plt+0x9ec>
   11754:	mov	r0, r4
   11758:	pop	{r4, r5, r6, sl, fp, pc}
   1175c:	mov	r4, r6
   11760:	mov	r0, r4
   11764:	pop	{r4, r5, r6, sl, fp, pc}
   11768:	push	{r4, r5, fp, lr}
   1176c:	add	fp, sp, #8
   11770:	movw	r2, #8048	; 0x1f70
   11774:	add	r5, r0, r2
   11778:	ldr	r2, [r1, #8]
   1177c:	ldrb	r3, [r2]
   11780:	cmp	r3, #0
   11784:	beq	117bc <__assert_fail@plt+0xa74>
   11788:	add	r4, r2, #1
   1178c:	mov	r2, #0
   11790:	uxtab	r2, r2, r3
   11794:	ldrb	r3, [r4], #1
   11798:	cmp	r3, #0
   1179c:	bne	11790 <__assert_fail@plt+0xa48>
   117a0:	movw	r3, #20065	; 0x4e61
   117a4:	movt	r3, #33354	; 0x824a
   117a8:	umull	r3, r4, r2, r3
   117ac:	lsr	r3, r4, #8
   117b0:	movw	r4, #503	; 0x1f7
   117b4:	mls	r2, r3, r4, r2
   117b8:	b	117c0 <__assert_fail@plt+0xa78>
   117bc:	mov	r2, #0
   117c0:	add	r0, r0, r2, lsl #4
   117c4:	bl	11264 <__assert_fail@plt+0x51c>
   117c8:	ldr	r0, [r5]
   117cc:	cmp	r0, #0
   117d0:	beq	117e0 <__assert_fail@plt+0xa98>
   117d4:	bl	10bbc <free@plt>
   117d8:	mov	r0, #0
   117dc:	str	r0, [r5]
   117e0:	ldr	r0, [r5, #4]
   117e4:	add	r0, r0, #1
   117e8:	str	r0, [r5, #4]
   117ec:	pop	{r4, r5, fp, pc}
   117f0:	push	{r4, r5, fp, lr}
   117f4:	add	fp, sp, #8
   117f8:	movw	r2, #8048	; 0x1f70
   117fc:	add	r5, r0, r2
   11800:	ldr	r2, [r1, #8]
   11804:	ldrb	r3, [r2]
   11808:	cmp	r3, #0
   1180c:	beq	11844 <__assert_fail@plt+0xafc>
   11810:	add	r4, r2, #1
   11814:	mov	r2, #0
   11818:	uxtab	r2, r2, r3
   1181c:	ldrb	r3, [r4], #1
   11820:	cmp	r3, #0
   11824:	bne	11818 <__assert_fail@plt+0xad0>
   11828:	movw	r3, #20065	; 0x4e61
   1182c:	movt	r3, #33354	; 0x824a
   11830:	umull	r3, r4, r2, r3
   11834:	lsr	r3, r4, #8
   11838:	movw	r4, #503	; 0x1f7
   1183c:	mls	r2, r3, r4, r2
   11840:	b	11848 <__assert_fail@plt+0xb00>
   11844:	mov	r2, #0
   11848:	add	r0, r0, r2, lsl #4
   1184c:	bl	113ac <__assert_fail@plt+0x664>
   11850:	ldr	r0, [r5]
   11854:	cmp	r0, #0
   11858:	beq	11868 <__assert_fail@plt+0xb20>
   1185c:	bl	10bbc <free@plt>
   11860:	mov	r0, #0
   11864:	str	r0, [r5]
   11868:	ldr	r0, [r5, #4]
   1186c:	sub	r0, r0, #1
   11870:	str	r0, [r5, #4]
   11874:	pop	{r4, r5, fp, pc}
   11878:	push	{r4, r5, fp, lr}
   1187c:	add	fp, sp, #8
   11880:	mov	r4, r0
   11884:	movw	r0, #8048	; 0x1f70
   11888:	mov	r5, r4
   1188c:	ldr	r0, [r5, r0]!
   11890:	cmp	r0, #0
   11894:	bne	118f4 <__assert_fail@plt+0xbac>
   11898:	ldr	r0, [r5, #4]
   1189c:	cmp	r0, #0
   118a0:	popeq	{r4, r5, fp, pc}
   118a4:	mov	r1, #4
   118a8:	bl	11950 <__assert_fail@plt+0xc08>
   118ac:	str	r0, [r5]
   118b0:	mov	r0, #0
   118b4:	movw	ip, #503	; 0x1f7
   118b8:	mov	r2, #0
   118bc:	b	118cc <__assert_fail@plt+0xb84>
   118c0:	add	r2, r2, #1
   118c4:	cmp	r2, ip
   118c8:	beq	118f4 <__assert_fail@plt+0xbac>
   118cc:	ldr	r3, [r4, r2, lsl #4]
   118d0:	cmp	r3, #0
   118d4:	beq	118c0 <__assert_fail@plt+0xb78>
   118d8:	ldr	r1, [r5]
   118dc:	str	r3, [r1, r0, lsl #2]
   118e0:	add	r0, r0, #1
   118e4:	ldr	r3, [r3, #4]
   118e8:	cmp	r3, #0
   118ec:	bne	118d8 <__assert_fail@plt+0xb90>
   118f0:	b	118c0 <__assert_fail@plt+0xb78>
   118f4:	pop	{r4, r5, fp, pc}
   118f8:	push	{r4, r5, r6, r7, fp, lr}
   118fc:	add	fp, sp, #16
   11900:	mov	r5, r0
   11904:	movw	r0, #8048	; 0x1f70
   11908:	mov	r4, r1
   1190c:	movw	r7, #503	; 0x1f7
   11910:	add	r6, r5, r0
   11914:	mov	r0, r5
   11918:	mov	r1, r4
   1191c:	bl	11480 <__assert_fail@plt+0x738>
   11920:	subs	r7, r7, #1
   11924:	add	r5, r5, #16
   11928:	bne	11914 <__assert_fail@plt+0xbcc>
   1192c:	ldr	r0, [r6]
   11930:	cmp	r0, #0
   11934:	beq	11944 <__assert_fail@plt+0xbfc>
   11938:	bl	10bbc <free@plt>
   1193c:	mov	r0, #0
   11940:	str	r0, [r6]
   11944:	mov	r0, #0
   11948:	str	r0, [r6, #4]
   1194c:	pop	{r4, r5, r6, r7, fp, pc}
   11950:	push	{fp, lr}
   11954:	mov	fp, sp
   11958:	bl	10b80 <calloc@plt>
   1195c:	cmp	r0, #0
   11960:	popne	{fp, pc}
   11964:	ldr	r0, [pc, #4]	; 11970 <__assert_fail@plt+0xc28>
   11968:	add	r0, pc, r0
   1196c:	bl	11e20 <error@@Base>
   11970:	andeq	r2, r0, r2, lsr r3
   11974:	push	{r4, r5, r6, sl, fp, lr}
   11978:	add	fp, sp, #16
   1197c:	ldrb	r3, [r0]
   11980:	ldrb	ip, [r1]
   11984:	mov	r2, r0
   11988:	mov	r0, #0
   1198c:	cmp	r3, #0
   11990:	beq	119d0 <__assert_fail@plt+0xc88>
   11994:	add	r6, r2, #1
   11998:	add	lr, r1, #1
   1199c:	mov	r2, #0
   119a0:	uxtb	r4, ip
   119a4:	uxtb	r5, r3
   119a8:	cmp	r5, r4
   119ac:	bne	119e0 <__assert_fail@plt+0xc98>
   119b0:	ldrb	r3, [r6, r2]
   119b4:	ldrb	ip, [lr, r2]
   119b8:	add	r2, r2, #1
   119bc:	cmp	r3, #0
   119c0:	bne	119a0 <__assert_fail@plt+0xc58>
   119c4:	cmp	ip, #0
   119c8:	bne	119dc <__assert_fail@plt+0xc94>
   119cc:	pop	{r4, r5, r6, sl, fp, pc}
   119d0:	mov	r2, #0
   119d4:	cmp	ip, #0
   119d8:	beq	119cc <__assert_fail@plt+0xc84>
   119dc:	mov	r3, #0
   119e0:	ldrb	r1, [r1, r2]
   119e4:	uxtb	r2, r3
   119e8:	mov	r0, #1
   119ec:	cmp	r2, r1
   119f0:	mvncc	r0, #0
   119f4:	pop	{r4, r5, r6, sl, fp, pc}
   119f8:	push	{r4, r5, fp, lr}
   119fc:	add	fp, sp, #8
   11a00:	mov	r5, r1
   11a04:	cmp	r0, #0
   11a08:	beq	11a3c <__assert_fail@plt+0xcf4>
   11a0c:	mov	r1, r5
   11a10:	mov	r4, r0
   11a14:	bl	10bb0 <fopen@plt>
   11a18:	cmp	r0, #0
   11a1c:	popne	{r4, r5, fp, pc}
   11a20:	ldrb	r0, [r5]
   11a24:	cmp	r0, #119	; 0x77
   11a28:	bne	11a60 <__assert_fail@plt+0xd18>
   11a2c:	ldr	r0, [pc, #72]	; 11a7c <__assert_fail@plt+0xd34>
   11a30:	mov	r1, r4
   11a34:	add	r0, pc, r0
   11a38:	bl	11e70 <error@@Base+0x50>
   11a3c:	ldrb	r0, [r5]
   11a40:	ldr	r1, [pc, #40]	; 11a70 <__assert_fail@plt+0xd28>
   11a44:	ldr	r1, [pc, r1]
   11a48:	ldr	r2, [pc, #36]	; 11a74 <__assert_fail@plt+0xd2c>
   11a4c:	cmp	r0, #114	; 0x72
   11a50:	ldr	r2, [pc, r2]
   11a54:	moveq	r2, r1
   11a58:	ldr	r0, [r2]
   11a5c:	pop	{r4, r5, fp, pc}
   11a60:	ldr	r0, [pc, #16]	; 11a78 <__assert_fail@plt+0xd30>
   11a64:	mov	r1, r4
   11a68:	add	r0, pc, r0
   11a6c:	bl	11e70 <error@@Base+0x50>
   11a70:	andeq	r6, r1, ip, lsl #13
   11a74:	andeq	r6, r1, r4, lsl #13
   11a78:	andeq	r2, r0, r2, ror #4
   11a7c:	andeq	r2, r0, r0, lsl #5
   11a80:	ldr	r1, [pc, #40]	; 11ab0 <__assert_fail@plt+0xd68>
   11a84:	ldr	r1, [pc, r1]
   11a88:	ldr	r1, [r1]
   11a8c:	cmp	r1, r0
   11a90:	bxeq	lr
   11a94:	ldr	r1, [pc, #24]	; 11ab4 <__assert_fail@plt+0xd6c>
   11a98:	ldr	r1, [pc, r1]
   11a9c:	ldr	r1, [r1]
   11aa0:	cmp	r1, r0
   11aa4:	beq	11aac <__assert_fail@plt+0xd64>
   11aa8:	b	10cdc <fclose@plt>
   11aac:	bx	lr
   11ab0:	andeq	r6, r1, ip, asr #12
   11ab4:	andeq	r6, r1, ip, lsr r6
   11ab8:	push	{fp, lr}
   11abc:	mov	fp, sp
   11ac0:	sub	sp, sp, #88	; 0x58
   11ac4:	mov	r1, r0
   11ac8:	mov	r2, sp
   11acc:	mov	r0, #3
   11ad0:	bl	10c1c <__xstat@plt>
   11ad4:	clz	r0, r0
   11ad8:	lsr	r0, r0, #5
   11adc:	mov	sp, fp
   11ae0:	pop	{fp, pc}
   11ae4:	push	{r4, r5, fp, lr}
   11ae8:	add	fp, sp, #8
   11aec:	sub	sp, sp, #104	; 0x68
   11af0:	ldr	r0, [pc, #92]	; 11b54 <__assert_fail@plt+0xe0c>
   11af4:	add	r0, pc, r0
   11af8:	ldrh	r1, [r0]
   11afc:	add	r5, r1, #1
   11b00:	strh	r5, [r0]
   11b04:	ldr	r0, [pc, #76]	; 11b58 <__assert_fail@plt+0xe10>
   11b08:	ldr	r0, [pc, r0]
   11b0c:	ldr	r4, [r0]
   11b10:	bl	10c88 <getpid@plt>
   11b14:	mov	r3, r0
   11b18:	sxth	r0, r5
   11b1c:	add	r5, sp, #4
   11b20:	mov	r2, r4
   11b24:	str	r0, [sp]
   11b28:	mov	r0, r5
   11b2c:	ldr	r1, [pc, #40]	; 11b5c <__assert_fail@plt+0xe14>
   11b30:	add	r1, pc, r1
   11b34:	bl	10d00 <sprintf@plt>
   11b38:	mov	r0, r5
   11b3c:	bl	10bec <strdup@plt>
   11b40:	mov	r4, r0
   11b44:	bl	10c04 <unlink@plt>
   11b48:	mov	r0, r4
   11b4c:	sub	sp, fp, #8
   11b50:	pop	{r4, r5, fp, pc}
   11b54:	andeq	r6, r1, ip, lsl r6
   11b58:			; <UNDEFINED> instruction: 0x000165bc
   11b5c:	andeq	r2, r0, r3, asr #3
   11b60:	push	{r4, sl, fp, lr}
   11b64:	add	fp, sp, #8
   11b68:	mov	r4, r0
   11b6c:	bl	10cb8 <strlen@plt>
   11b70:	sub	r0, r0, #1
   11b74:	sxth	r0, r0
   11b78:	cmp	r0, #0
   11b7c:	bmi	11b8c <__assert_fail@plt+0xe44>
   11b80:	ldrb	r1, [r4, r0]
   11b84:	cmp	r1, #47	; 0x2f
   11b88:	bne	11b70 <__assert_fail@plt+0xe28>
   11b8c:	add	r0, r0, r4
   11b90:	add	r0, r0, #1
   11b94:	pop	{r4, sl, fp, pc}
   11b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b9c:	add	fp, sp, #28
   11ba0:	sub	sp, sp, #12
   11ba4:	stmib	sp, {r0, r1}
   11ba8:	mov	r6, r3
   11bac:	str	r2, [sp]
   11bb0:	ldr	r4, [r1]
   11bb4:	mov	r0, r4
   11bb8:	bl	10cb8 <strlen@plt>
   11bbc:	sub	r0, r0, #1
   11bc0:	sxth	r0, r0
   11bc4:	cmp	r0, #0
   11bc8:	bmi	11bd8 <__assert_fail@plt+0xe90>
   11bcc:	ldrb	r1, [r4, r0]
   11bd0:	cmp	r1, #47	; 0x2f
   11bd4:	bne	11bbc <__assert_fail@plt+0xe74>
   11bd8:	ldr	r1, [pc, #484]	; 11dc4 <__assert_fail@plt+0x107c>
   11bdc:	add	r0, r0, r4
   11be0:	add	r0, r0, #1
   11be4:	ldr	r1, [pc, r1]
   11be8:	str	r0, [r1]
   11bec:	mov	r0, #2
   11bf0:	ldr	r4, [pc, #464]	; 11dc8 <__assert_fail@plt+0x1080>
   11bf4:	add	r4, pc, r4
   11bf8:	mov	r1, r4
   11bfc:	bl	10c70 <__sysv_signal@plt>
   11c00:	mov	r0, #15
   11c04:	mov	r1, r4
   11c08:	bl	10c70 <__sysv_signal@plt>
   11c0c:	ldr	r0, [sp, #4]
   11c10:	ldr	r5, [r0]
   11c14:	cmp	r5, #1
   11c18:	bne	11c30 <__assert_fail@plt+0xee8>
   11c1c:	ldr	r0, [pc, #424]	; 11dcc <__assert_fail@plt+0x1084>
   11c20:	ldr	r0, [pc, r0]
   11c24:	ldrb	r0, [r0]
   11c28:	cmp	r0, #0
   11c2c:	bne	11dac <__assert_fail@plt+0x1064>
   11c30:	ldr	ip, [sp, #8]
   11c34:	mov	r8, #0
   11c38:	cmp	r5, #2
   11c3c:	blt	11d88 <__assert_fail@plt+0x1040>
   11c40:	mov	r8, #0
   11c44:	mov	r7, #1
   11c48:	mov	r9, #1
   11c4c:	ldr	r4, [ip, r7, lsl #2]
   11c50:	ldrb	r0, [r4]
   11c54:	cmp	r0, #45	; 0x2d
   11c58:	bne	11d30 <__assert_fail@plt+0xfe8>
   11c5c:	ldrb	sl, [r4, #1]
   11c60:	cmp	sl, #0
   11c64:	beq	11d30 <__assert_fail@plt+0xfe8>
   11c68:	mov	r0, r4
   11c6c:	bl	10cb8 <strlen@plt>
   11c70:	mov	r2, r0
   11c74:	ldr	r0, [pc, #340]	; 11dd0 <__assert_fail@plt+0x1088>
   11c78:	mov	r1, r4
   11c7c:	add	r0, pc, r0
   11c80:	bl	10d24 <strncmp@plt>
   11c84:	cmp	r0, #0
   11c88:	beq	11dac <__assert_fail@plt+0x1064>
   11c8c:	ldr	ip, [sp, #8]
   11c90:	add	r1, r7, #1
   11c94:	mov	r0, #0
   11c98:	cmp	r1, r5
   11c9c:	ldrlt	r0, [ip, r1, lsl #2]
   11ca0:	cmp	r6, #0
   11ca4:	ldrbne	r2, [r6]
   11ca8:	cmpne	r2, #0
   11cac:	beq	11d9c <__assert_fail@plt+0x1054>
   11cb0:	mov	r1, #0
   11cb4:	cmp	sl, r2
   11cb8:	beq	11ce0 <__assert_fail@plt+0xf98>
   11cbc:	mov	r2, #1
   11cc0:	sxth	r1, r2
   11cc4:	add	r3, r1, r1, lsl #1
   11cc8:	ldrb	r3, [r6, r3, lsl #2]
   11ccc:	cmp	r3, #0
   11cd0:	beq	11d9c <__assert_fail@plt+0x1054>
   11cd4:	add	r2, r2, #1
   11cd8:	cmp	sl, r3
   11cdc:	bne	11cc0 <__assert_fail@plt+0xf78>
   11ce0:	add	r1, r1, r1, lsl #1
   11ce4:	add	r3, r6, r1, lsl #2
   11ce8:	ldr	r1, [r3, #4]
   11cec:	cmp	r1, #0
   11cf0:	beq	11d50 <__assert_fail@plt+0x1008>
   11cf4:	mov	r2, r4
   11cf8:	cmp	r0, #0
   11cfc:	ldrb	r7, [r2, #2]!
   11d00:	cmpeq	r7, #0
   11d04:	beq	11d50 <__assert_fail@plt+0x1008>
   11d08:	ldr	r3, [r1]
   11d0c:	cmp	r3, #0
   11d10:	bne	11db4 <__assert_fail@plt+0x106c>
   11d14:	cmp	r7, #0
   11d18:	movne	r0, r2
   11d1c:	str	r0, [r1]
   11d20:	ldrb	r0, [r2]
   11d24:	cmp	r0, #0
   11d28:	addeq	r9, r9, #1
   11d2c:	b	11d3c <__assert_fail@plt+0xff4>
   11d30:	sxth	r0, r8
   11d34:	add	r8, r8, #1
   11d38:	str	r4, [ip, r0, lsl #2]
   11d3c:	add	r9, r9, #1
   11d40:	sxth	r7, r9
   11d44:	cmp	r5, r7
   11d48:	bgt	11c4c <__assert_fail@plt+0xf04>
   11d4c:	b	11d88 <__assert_fail@plt+0x1040>
   11d50:	ldr	r0, [r3, #8]
   11d54:	cmp	r0, #0
   11d58:	beq	11d9c <__assert_fail@plt+0x1054>
   11d5c:	ldrb	r1, [r4, #2]
   11d60:	cmp	r1, #0
   11d64:	bne	11d9c <__assert_fail@plt+0x1054>
   11d68:	ldrb	r1, [r0]
   11d6c:	cmp	r1, #0
   11d70:	bne	11db4 <__assert_fail@plt+0x106c>
   11d74:	mov	r1, #1
   11d78:	strb	r1, [r0]
   11d7c:	ldr	r0, [sp, #4]
   11d80:	ldr	r5, [r0]
   11d84:	b	11d3c <__assert_fail@plt+0xff4>
   11d88:	ldr	r1, [sp, #4]
   11d8c:	sxth	r0, r8
   11d90:	str	r0, [r1]
   11d94:	sub	sp, fp, #28
   11d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d9c:	ldr	r0, [pc, #52]	; 11dd8 <__assert_fail@plt+0x1090>
   11da0:	mov	r1, r4
   11da4:	add	r0, pc, r0
   11da8:	bl	11e70 <error@@Base+0x50>
   11dac:	ldr	r0, [sp]
   11db0:	bl	11f4c <error@@Base+0x12c>
   11db4:	ldr	r0, [pc, #24]	; 11dd4 <__assert_fail@plt+0x108c>
   11db8:	mov	r1, r4
   11dbc:	add	r0, pc, r0
   11dc0:	bl	11e70 <error@@Base+0x50>
   11dc4:	andeq	r6, r1, r0, ror #9
   11dc8:	andeq	r0, r0, r8, lsl r3
   11dcc:	andeq	r6, r1, r8, lsl #9
   11dd0:	muleq	r0, r4, r0
   11dd4:	andeq	r1, r0, r8, ror pc
   11dd8:	andeq	r1, r0, r1, lsl #31
   11ddc:	push	{fp, lr}
   11de0:	mov	fp, sp
   11de4:	mov	r0, #0
   11de8:	bl	11dec <__assert_fail@plt+0x10a4>
   11dec:	push	{fp, lr}
   11df0:	mov	fp, sp
   11df4:	mov	r4, r0
   11df8:	ldr	r0, [pc, #28]	; 11e1c <__assert_fail@plt+0x10d4>
   11dfc:	ldr	r0, [pc, r0]
   11e00:	ldr	r0, [r0]
   11e04:	cmp	r0, #0
   11e08:	beq	11e10 <__assert_fail@plt+0x10c8>
   11e0c:	blx	r0
   11e10:	bl	11fac <error@@Base+0x18c>
   11e14:	mov	r0, r4
   11e18:	bl	10c94 <exit@plt>
   11e1c:	andeq	r6, r1, ip, asr #5

00011e20 <error@@Base>:
   11e20:	push	{fp, lr}
   11e24:	mov	fp, sp
   11e28:	mov	r3, r0
   11e2c:	ldr	r0, [pc, #44]	; 11e60 <error@@Base+0x40>
   11e30:	ldr	r0, [pc, r0]
   11e34:	ldr	r2, [r0]
   11e38:	ldr	r0, [pc, #36]	; 11e64 <error@@Base+0x44>
   11e3c:	ldr	r0, [pc, r0]
   11e40:	ldr	r0, [r0]
   11e44:	ldr	r1, [pc, #28]	; 11e68 <error@@Base+0x48>
   11e48:	add	r1, pc, r1
   11e4c:	bl	10cc4 <fprintf@plt>
   11e50:	ldr	r0, [pc, #20]	; 11e6c <error@@Base+0x4c>
   11e54:	ldr	r0, [pc, r0]
   11e58:	ldr	r0, [r0]
   11e5c:	bl	11dec <__assert_fail@plt+0x10a4>
   11e60:	muleq	r1, r4, r2
   11e64:	andeq	r6, r1, r0, lsl #5
   11e68:	muleq	r0, r6, lr
   11e6c:	andeq	r6, r1, r8, lsl #5
   11e70:	push	{fp, lr}
   11e74:	mov	fp, sp
   11e78:	sub	sp, sp, #8
   11e7c:	mov	r3, r0
   11e80:	ldr	r0, [pc, #48]	; 11eb8 <error@@Base+0x98>
   11e84:	ldr	r0, [pc, r0]
   11e88:	ldr	r2, [r0]
   11e8c:	ldr	r0, [pc, #40]	; 11ebc <error@@Base+0x9c>
   11e90:	ldr	r0, [pc, r0]
   11e94:	str	r1, [sp]
   11e98:	ldr	r0, [r0]
   11e9c:	ldr	r1, [pc, #28]	; 11ec0 <error@@Base+0xa0>
   11ea0:	add	r1, pc, r1
   11ea4:	bl	10cc4 <fprintf@plt>
   11ea8:	ldr	r0, [pc, #20]	; 11ec4 <error@@Base+0xa4>
   11eac:	ldr	r0, [pc, r0]
   11eb0:	ldr	r0, [r0]
   11eb4:	bl	11dec <__assert_fail@plt+0x10a4>
   11eb8:	andeq	r6, r1, r0, asr #4
   11ebc:	andeq	r6, r1, ip, lsr #4
   11ec0:	andeq	r1, r0, r6, asr #28
   11ec4:	andeq	r6, r1, r0, lsr r2
   11ec8:	push	{fp, lr}
   11ecc:	mov	fp, sp
   11ed0:	sub	sp, sp, #8
   11ed4:	mov	r3, r0
   11ed8:	ldr	r0, [pc, #40]	; 11f08 <error@@Base+0xe8>
   11edc:	ldr	r0, [pc, r0]
   11ee0:	ldr	r2, [r0]
   11ee4:	ldr	r0, [pc, #32]	; 11f0c <error@@Base+0xec>
   11ee8:	ldr	r0, [pc, r0]
   11eec:	str	r1, [sp]
   11ef0:	ldr	r0, [r0]
   11ef4:	ldr	r1, [pc, #20]	; 11f10 <error@@Base+0xf0>
   11ef8:	add	r1, pc, r1
   11efc:	bl	10cc4 <fprintf@plt>
   11f00:	mov	sp, fp
   11f04:	pop	{fp, pc}
   11f08:	andeq	r6, r1, r8, ror #3
   11f0c:	ldrdeq	r6, [r1], -r4
   11f10:	andeq	r1, r0, lr, ror #27
   11f14:	push	{fp, lr}
   11f18:	mov	fp, sp
   11f1c:	ldr	r0, [pc, #32]	; 11f44 <error@@Base+0x124>
   11f20:	add	r0, pc, r0
   11f24:	ldrb	r1, [r0]
   11f28:	cmp	r1, #1
   11f2c:	popeq	{fp, pc}
   11f30:	mov	r1, #1
   11f34:	strb	r1, [r0]
   11f38:	ldr	r0, [pc, #8]	; 11f48 <error@@Base+0x128>
   11f3c:	add	r0, pc, r0
   11f40:	bl	11e20 <error@@Base>
   11f44:	strdeq	r6, [r1], -r2
   11f48:	andeq	r1, r0, r5, asr #27
   11f4c:	push	{fp, lr}
   11f50:	mov	fp, sp
   11f54:	mov	r3, r0
   11f58:	ldr	r0, [pc, #60]	; 11f9c <error@@Base+0x17c>
   11f5c:	ldr	r0, [pc, r0]
   11f60:	ldr	r0, [r0]
   11f64:	cmp	r0, #0
   11f68:	bne	11f94 <error@@Base+0x174>
   11f6c:	ldr	r0, [pc, #44]	; 11fa0 <error@@Base+0x180>
   11f70:	ldr	r0, [pc, r0]
   11f74:	ldr	r2, [r0]
   11f78:	ldr	r0, [pc, #36]	; 11fa4 <error@@Base+0x184>
   11f7c:	ldr	r0, [pc, r0]
   11f80:	ldr	r0, [r0]
   11f84:	ldr	r1, [pc, #28]	; 11fa8 <error@@Base+0x188>
   11f88:	add	r1, pc, r1
   11f8c:	bl	10cc4 <fprintf@plt>
   11f90:	bl	11ddc <__assert_fail@plt+0x1094>
   11f94:	blx	r0
   11f98:	bl	11ddc <__assert_fail@plt+0x1094>
   11f9c:	andeq	r6, r1, r4, asr r1
   11fa0:	andeq	r6, r1, r4, asr r1
   11fa4:	andeq	r6, r1, r0, asr #2
   11fa8:	andeq	r1, r0, lr, lsl #27
   11fac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11fb0:	add	fp, sp, #24
   11fb4:	sub	sp, sp, #104	; 0x68
   11fb8:	ldr	r8, [pc, #124]	; 1203c <error@@Base+0x21c>
   11fbc:	add	r8, pc, r8
   11fc0:	ldrsh	r0, [r8]
   11fc4:	cmp	r0, #1
   11fc8:	blt	12034 <error@@Base+0x214>
   11fcc:	ldr	r9, [pc, #108]	; 12040 <error@@Base+0x220>
   11fd0:	mov	r7, #1
   11fd4:	add	r4, sp, #4
   11fd8:	ldr	r9, [pc, r9]
   11fdc:	ldr	r5, [pc, #96]	; 12044 <error@@Base+0x224>
   11fe0:	add	r5, pc, r5
   11fe4:	ldr	r6, [r9]
   11fe8:	bl	10c88 <getpid@plt>
   11fec:	mov	r3, r0
   11ff0:	sxth	r0, r7
   11ff4:	mov	r1, r5
   11ff8:	mov	r2, r6
   11ffc:	str	r0, [sp]
   12000:	mov	r0, r4
   12004:	bl	10d00 <sprintf@plt>
   12008:	mov	r0, r4
   1200c:	bl	10bec <strdup@plt>
   12010:	mov	r6, r0
   12014:	bl	10c04 <unlink@plt>
   12018:	mov	r0, r6
   1201c:	bl	10bbc <free@plt>
   12020:	add	r0, r7, #1
   12024:	sxth	r7, r0
   12028:	ldrsh	r0, [r8]
   1202c:	cmp	r7, r0
   12030:	ble	11fe4 <error@@Base+0x1c4>
   12034:	sub	sp, fp, #24
   12038:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1203c:	andeq	r6, r1, r4, asr r1
   12040:	andeq	r6, r1, ip, ror #1
   12044:	andeq	r1, r0, r3, lsl sp
   12048:	ldm	r0, {r3, ip}
   1204c:	add	r2, ip, r2
   12050:	add	r1, r3, r1
   12054:	stm	r0, {r1, r2}
   12058:	bx	lr
   1205c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12060:	add	fp, sp, #24
   12064:	mov	r8, r3
   12068:	mov	r5, r2
   1206c:	mov	r4, r1
   12070:	mov	r6, r0
   12074:	bl	116d8 <__assert_fail@plt+0x990>
   12078:	mov	r7, r0
   1207c:	cmp	r0, #0
   12080:	bne	120ac <error@@Base+0x28c>
   12084:	mov	r0, #1
   12088:	mov	r1, #20
   1208c:	bl	11950 <__assert_fail@plt+0xc08>
   12090:	mov	r7, r0
   12094:	mov	r0, r4
   12098:	bl	10bec <strdup@plt>
   1209c:	str	r0, [r7, #8]
   120a0:	mov	r0, r6
   120a4:	mov	r1, r7
   120a8:	bl	11768 <__assert_fail@plt+0xa20>
   120ac:	ldr	r0, [r7, #12]
   120b0:	ldr	r1, [r7, #16]
   120b4:	add	r0, r0, r5
   120b8:	add	r1, r1, r8
   120bc:	str	r0, [r7, #12]
   120c0:	str	r1, [r7, #16]
   120c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120c8:	push	{r4, r5, r6, r7, fp, lr}
   120cc:	add	fp, sp, #16
   120d0:	sub	sp, sp, #8
   120d4:	mov	r6, r1
   120d8:	ldr	r1, [pc, #484]	; 122c4 <error@@Base+0x4a4>
   120dc:	mov	r5, r0
   120e0:	mov	r0, r6
   120e4:	add	r1, pc, r1
   120e8:	bl	119f8 <__assert_fail@plt+0xcb0>
   120ec:	mov	r4, r0
   120f0:	ldr	r0, [pc, #464]	; 122c8 <error@@Base+0x4a8>
   120f4:	mov	r1, #99	; 0x63
   120f8:	mov	r2, r4
   120fc:	add	r0, pc, r0
   12100:	bl	10bd4 <fgets@plt>
   12104:	cmp	r0, #0
   12108:	beq	122a8 <error@@Base+0x488>
   1210c:	ldr	r0, [pc, #440]	; 122cc <error@@Base+0x4ac>
   12110:	ldr	r1, [pc, #440]	; 122d0 <error@@Base+0x4b0>
   12114:	mov	r2, #45	; 0x2d
   12118:	add	r0, pc, r0
   1211c:	add	r1, pc, r1
   12120:	bl	10ca0 <bcmp@plt>
   12124:	cmp	r0, #0
   12128:	bne	122a8 <error@@Base+0x488>
   1212c:	ldr	r0, [pc, #416]	; 122d4 <error@@Base+0x4b4>
   12130:	mov	r1, #99	; 0x63
   12134:	mov	r2, r4
   12138:	add	r0, pc, r0
   1213c:	bl	10bd4 <fgets@plt>
   12140:	cmp	r0, #0
   12144:	beq	122a8 <error@@Base+0x488>
   12148:	ldr	r0, [pc, #392]	; 122d8 <error@@Base+0x4b8>
   1214c:	ldr	r1, [pc, #392]	; 122dc <error@@Base+0x4bc>
   12150:	mov	r2, #48	; 0x30
   12154:	add	r0, pc, r0
   12158:	add	r1, pc, r1
   1215c:	bl	10ca0 <bcmp@plt>
   12160:	cmp	r0, #0
   12164:	bne	122a8 <error@@Base+0x488>
   12168:	ldr	r0, [pc, #368]	; 122e0 <error@@Base+0x4c0>
   1216c:	mov	r1, #99	; 0x63
   12170:	mov	r2, r4
   12174:	add	r0, pc, r0
   12178:	bl	10bd4 <fgets@plt>
   1217c:	cmp	r0, #0
   12180:	beq	122a8 <error@@Base+0x488>
   12184:	ldr	r0, [pc, #344]	; 122e4 <error@@Base+0x4c4>
   12188:	ldr	r1, [pc, #344]	; 122e8 <error@@Base+0x4c8>
   1218c:	add	r2, sp, #4
   12190:	add	r0, pc, r0
   12194:	add	r1, pc, r1
   12198:	bl	10cd0 <__isoc99_sscanf@plt>
   1219c:	cmp	r0, #1
   121a0:	bne	122a8 <error@@Base+0x488>
   121a4:	ldr	r0, [pc, #320]	; 122ec <error@@Base+0x4cc>
   121a8:	mov	r1, #99	; 0x63
   121ac:	mov	r2, r4
   121b0:	add	r0, pc, r0
   121b4:	bl	10bd4 <fgets@plt>
   121b8:	cmp	r0, #0
   121bc:	beq	122a8 <error@@Base+0x488>
   121c0:	ldr	r0, [pc, #296]	; 122f0 <error@@Base+0x4d0>
   121c4:	ldr	r1, [pc, #296]	; 122f4 <error@@Base+0x4d4>
   121c8:	mov	r2, sp
   121cc:	add	r0, pc, r0
   121d0:	add	r1, pc, r1
   121d4:	bl	10cd0 <__isoc99_sscanf@plt>
   121d8:	cmp	r0, #1
   121dc:	bne	122a8 <error@@Base+0x488>
   121e0:	ldr	r0, [pc, #272]	; 122f8 <error@@Base+0x4d8>
   121e4:	mov	r1, #99	; 0x63
   121e8:	mov	r2, r4
   121ec:	add	r0, pc, r0
   121f0:	bl	10bd4 <fgets@plt>
   121f4:	cmp	r0, #0
   121f8:	beq	122a8 <error@@Base+0x488>
   121fc:	ldr	r0, [pc, #248]	; 122fc <error@@Base+0x4dc>
   12200:	mov	r1, #99	; 0x63
   12204:	mov	r2, r4
   12208:	add	r0, pc, r0
   1220c:	bl	10bd4 <fgets@plt>
   12210:	cmp	r0, #0
   12214:	beq	122a8 <error@@Base+0x488>
   12218:	ldr	r2, [sp, #4]
   1221c:	ldm	r5, {r0, r1}
   12220:	add	r0, r0, r2
   12224:	ldr	r2, [sp]
   12228:	add	r1, r1, r2
   1222c:	stm	r5, {r0, r1}
   12230:	add	r1, r5, #8
   12234:	mov	r0, r4
   12238:	bl	12308 <error@@Base+0x4e8>
   1223c:	mov	r7, r0
   12240:	add	r1, r5, #416	; 0x1a0
   12244:	mov	r0, r4
   12248:	bl	12308 <error@@Base+0x4e8>
   1224c:	mov	r6, r0
   12250:	add	r1, r5, #824	; 0x338
   12254:	mov	r0, r4
   12258:	bl	12308 <error@@Base+0x4e8>
   1225c:	ldr	r0, [sp, #4]
   12260:	cmp	r0, #1
   12264:	blt	12298 <error@@Base+0x478>
   12268:	add	r1, r5, #920	; 0x398
   1226c:	mov	r0, r4
   12270:	bl	12308 <error@@Base+0x4e8>
   12274:	cmp	r7, #1
   12278:	addge	r1, r5, #992	; 0x3e0
   1227c:	movge	r0, r4
   12280:	blge	12448 <error@@Base+0x628>
   12284:	cmp	r6, #1
   12288:	movwge	r0, #9048	; 0x2358
   1228c:	addge	r1, r5, r0
   12290:	movge	r0, r4
   12294:	blge	12448 <error@@Base+0x628>
   12298:	mov	r0, r4
   1229c:	bl	11a80 <__assert_fail@plt+0xd38>
   122a0:	sub	sp, fp, #16
   122a4:	pop	{r4, r5, r6, r7, fp, pc}
   122a8:	ldr	r1, [pc, #80]	; 12300 <error@@Base+0x4e0>
   122ac:	ldr	r0, [pc, #80]	; 12304 <error@@Base+0x4e4>
   122b0:	cmp	r6, #0
   122b4:	add	r1, pc, r1
   122b8:	movne	r1, r6
   122bc:	add	r0, pc, r0
   122c0:	bl	11e70 <error@@Base+0x50>
   122c4:	ldrdeq	r5, [r0], -r2
   122c8:	andeq	r6, r1, r7, lsl r0
   122cc:	strdeq	r5, [r1], -fp
   122d0:	andeq	r1, r0, r9, lsr #24
   122d4:	ldrdeq	r5, [r1], -fp
   122d8:			; <UNDEFINED> instruction: 0x00015fbf
   122dc:	andeq	r5, r0, r8, lsl r1
   122e0:	muleq	r1, pc, pc	; <UNPREDICTABLE>
   122e4:	andeq	r5, r1, r3, lsl #31
   122e8:	andeq	r1, r0, lr, asr ip
   122ec:	andeq	r5, r1, r3, ror #30
   122f0:	andeq	r5, r1, r7, asr #30
   122f4:	andeq	r1, r0, r2, lsr #24
   122f8:	andeq	r5, r1, r7, lsr #30
   122fc:	andeq	r5, r1, fp, lsl #30
   12300:	ldrdeq	r1, [r0], -r3
   12304:			; <UNDEFINED> instruction: 0x00001ab9
   12308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1230c:	add	fp, sp, #28
   12310:	sub	sp, sp, #12
   12314:	mov	r5, r0
   12318:	ldr	r0, [pc, #276]	; 12434 <error@@Base+0x614>
   1231c:	mov	r4, r1
   12320:	mov	r1, #99	; 0x63
   12324:	mov	r2, r5
   12328:	add	r0, pc, r0
   1232c:	bl	10bd4 <fgets@plt>
   12330:	mov	r6, #0
   12334:	cmp	r0, #0
   12338:	beq	12428 <error@@Base+0x608>
   1233c:	ldr	r0, [pc, #244]	; 12438 <error@@Base+0x618>
   12340:	mov	r1, #99	; 0x63
   12344:	mov	r2, r5
   12348:	add	r0, pc, r0
   1234c:	bl	10bd4 <fgets@plt>
   12350:	cmp	r0, #0
   12354:	beq	12428 <error@@Base+0x608>
   12358:	ldr	r7, [pc, #220]	; 1243c <error@@Base+0x61c>
   1235c:	mov	r1, #99	; 0x63
   12360:	mov	r2, r5
   12364:	add	r7, pc, r7
   12368:	mov	r0, r7
   1236c:	bl	10bd4 <fgets@plt>
   12370:	cmp	r0, #0
   12374:	beq	12428 <error@@Base+0x608>
   12378:	mov	r6, #0
   1237c:	add	r9, sp, #8
   12380:	add	sl, sp, #4
   12384:	add	r8, r7, #29
   12388:	b	123e8 <error@@Base+0x5c8>
   1238c:	ldr	r1, [pc, #176]	; 12444 <error@@Base+0x624>
   12390:	mov	r0, r8
   12394:	mov	r2, #8
   12398:	add	r1, pc, r1
   1239c:	bl	10ca0 <bcmp@plt>
   123a0:	ldr	r1, [sp, #8]
   123a4:	cmp	r0, #0
   123a8:	movwne	r0, #11
   123ac:	moveq	r6, r1
   123b0:	mov	r2, r4
   123b4:	ldr	r0, [r2, r0, lsl #3]!
   123b8:	add	r0, r0, r1
   123bc:	ldr	r1, [sp, #4]
   123c0:	str	r0, [r2]
   123c4:	ldr	r0, [r2, #4]
   123c8:	add	r0, r0, r1
   123cc:	mov	r1, #99	; 0x63
   123d0:	str	r0, [r2, #4]
   123d4:	mov	r0, r7
   123d8:	mov	r2, r5
   123dc:	bl	10bd4 <fgets@plt>
   123e0:	cmp	r0, #0
   123e4:	beq	12428 <error@@Base+0x608>
   123e8:	ldr	r1, [pc, #80]	; 12440 <error@@Base+0x620>
   123ec:	mov	r0, r7
   123f0:	mov	r2, r9
   123f4:	mov	r3, sl
   123f8:	add	r1, pc, r1
   123fc:	bl	10cd0 <__isoc99_sscanf@plt>
   12400:	cmp	r0, #2
   12404:	bne	12428 <error@@Base+0x608>
   12408:	mov	r0, r8
   1240c:	mov	r1, #0
   12410:	mov	r2, #10
   12414:	bl	10b98 <strtol@plt>
   12418:	cmp	r0, #0
   1241c:	beq	1238c <error@@Base+0x56c>
   12420:	ldr	r1, [sp, #8]
   12424:	b	123b0 <error@@Base+0x590>
   12428:	mov	r0, r6
   1242c:	sub	sp, fp, #28
   12430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12434:	andeq	r5, r1, fp, ror #27
   12438:	andeq	r5, r1, fp, asr #27
   1243c:	andeq	r5, r1, pc, lsr #27
   12440:	strdeq	r1, [r0], -r6
   12444:			; <UNDEFINED> instruction: 0x000018b5
   12448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1244c:	add	fp, sp, #28
   12450:	sub	sp, sp, #12
   12454:	mov	r5, r0
   12458:	ldr	r0, [pc, #276]	; 12574 <error@@Base+0x754>
   1245c:	mov	r4, r1
   12460:	mov	r1, #99	; 0x63
   12464:	mov	r2, r5
   12468:	add	r0, pc, r0
   1246c:	bl	10bd4 <fgets@plt>
   12470:	cmp	r0, #0
   12474:	beq	1256c <error@@Base+0x74c>
   12478:	ldr	r0, [pc, #248]	; 12578 <error@@Base+0x758>
   1247c:	mov	r1, #99	; 0x63
   12480:	mov	r2, r5
   12484:	add	r0, pc, r0
   12488:	bl	10bd4 <fgets@plt>
   1248c:	cmp	r0, #0
   12490:	beq	1256c <error@@Base+0x74c>
   12494:	ldr	r6, [pc, #224]	; 1257c <error@@Base+0x75c>
   12498:	mov	r1, #99	; 0x63
   1249c:	mov	r2, r5
   124a0:	add	r6, pc, r6
   124a4:	mov	r0, r6
   124a8:	bl	10bd4 <fgets@plt>
   124ac:	cmp	r0, #0
   124b0:	beq	1256c <error@@Base+0x74c>
   124b4:	add	r7, r6, #29
   124b8:	b	124ec <error@@Base+0x6cc>
   124bc:	ldr	r0, [r8, #12]
   124c0:	ldr	r1, [r8, #16]
   124c4:	mov	r2, r5
   124c8:	add	r0, r0, r9
   124cc:	add	r1, r1, sl
   124d0:	str	r0, [r8, #12]
   124d4:	str	r1, [r8, #16]
   124d8:	mov	r0, r6
   124dc:	mov	r1, #99	; 0x63
   124e0:	bl	10bd4 <fgets@plt>
   124e4:	cmp	r0, #0
   124e8:	beq	1256c <error@@Base+0x74c>
   124ec:	ldr	r1, [pc, #140]	; 12580 <error@@Base+0x760>
   124f0:	mov	r0, r6
   124f4:	add	r2, sp, #8
   124f8:	add	r3, sp, #4
   124fc:	add	r1, pc, r1
   12500:	bl	10cd0 <__isoc99_sscanf@plt>
   12504:	cmp	r0, #2
   12508:	bne	1256c <error@@Base+0x74c>
   1250c:	mov	r0, r6
   12510:	bl	10cb8 <strlen@plt>
   12514:	ldr	r9, [sp, #8]
   12518:	ldr	sl, [sp, #4]
   1251c:	add	r0, r0, r6
   12520:	mov	r1, #0
   12524:	strb	r1, [r0, #-1]
   12528:	mov	r0, r4
   1252c:	mov	r1, r7
   12530:	bl	116d8 <__assert_fail@plt+0x990>
   12534:	mov	r8, r0
   12538:	cmp	r0, #0
   1253c:	bne	124bc <error@@Base+0x69c>
   12540:	mov	r0, #1
   12544:	mov	r1, #20
   12548:	bl	11950 <__assert_fail@plt+0xc08>
   1254c:	mov	r8, r0
   12550:	mov	r0, r7
   12554:	bl	10bec <strdup@plt>
   12558:	str	r0, [r8, #8]
   1255c:	mov	r0, r4
   12560:	mov	r1, r8
   12564:	bl	11768 <__assert_fail@plt+0xa20>
   12568:	b	124bc <error@@Base+0x69c>
   1256c:	sub	sp, fp, #28
   12570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12574:	andeq	r5, r1, fp, lsr #25
   12578:	andeq	r5, r1, pc, lsl #25
   1257c:	andeq	r5, r1, r3, ror ip
   12580:	strdeq	r1, [r0], -r2
   12584:	nop	{0}
   12588:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1258c:	add	fp, sp, #24
   12590:	sub	sp, sp, #8
   12594:	mov	r2, r1
   12598:	ldr	r1, [pc, #448]	; 12760 <error@@Base+0x940>
   1259c:	mov	r5, r0
   125a0:	mov	r0, r2
   125a4:	add	r1, pc, r1
   125a8:	bl	119f8 <__assert_fail@plt+0xcb0>
   125ac:	ldr	r1, [pc, #432]	; 12764 <error@@Base+0x944>
   125b0:	ldr	r2, [pc, #432]	; 12768 <error@@Base+0x948>
   125b4:	ldr	r3, [pc, #432]	; 1276c <error@@Base+0x94c>
   125b8:	mov	r4, r0
   125bc:	add	r1, pc, r1
   125c0:	add	r2, pc, r2
   125c4:	add	r3, pc, r3
   125c8:	bl	10cc4 <fprintf@plt>
   125cc:	ldr	r2, [r5]
   125d0:	ldr	r1, [pc, #408]	; 12770 <error@@Base+0x950>
   125d4:	mov	r0, r4
   125d8:	add	r1, pc, r1
   125dc:	bl	10cc4 <fprintf@plt>
   125e0:	ldr	r2, [r5, #4]
   125e4:	ldr	r1, [pc, #392]	; 12774 <error@@Base+0x954>
   125e8:	mov	r0, r4
   125ec:	add	r1, pc, r1
   125f0:	bl	10cc4 <fprintf@plt>
   125f4:	ldr	r0, [r5]
   125f8:	cmp	r0, #0
   125fc:	beq	1263c <error@@Base+0x81c>
   12600:	ldr	r1, [r5, #4]
   12604:	vldr	d16, [pc, #332]	; 12758 <error@@Base+0x938>
   12608:	vmov	s2, r0
   1260c:	sub	r1, r0, r1
   12610:	mov	r0, r4
   12614:	vmov	s0, r1
   12618:	vcvt.f64.s32	d17, s0
   1261c:	vcvt.f64.s32	d18, s2
   12620:	ldr	r1, [pc, #340]	; 1277c <error@@Base+0x95c>
   12624:	add	r1, pc, r1
   12628:	vmul.f64	d16, d17, d16
   1262c:	vdiv.f64	d16, d16, d18
   12630:	vmov	r2, r3, d16
   12634:	bl	10cc4 <fprintf@plt>
   12638:	b	12654 <error@@Base+0x834>
   1263c:	ldr	r0, [pc, #308]	; 12778 <error@@Base+0x958>
   12640:	mov	r1, #8
   12644:	mov	r2, #1
   12648:	mov	r3, r4
   1264c:	add	r0, pc, r0
   12650:	bl	10c28 <fwrite@plt>
   12654:	ldr	r0, [pc, #292]	; 12780 <error@@Base+0x960>
   12658:	mov	r1, #12
   1265c:	mov	r2, #1
   12660:	mov	r3, r4
   12664:	mov	r7, #1
   12668:	add	r0, pc, r0
   1266c:	bl	10c28 <fwrite@plt>
   12670:	mov	r8, #0
   12674:	str	r7, [sp, #4]
   12678:	add	r1, r5, #8
   1267c:	mov	r0, r4
   12680:	mov	r2, #50	; 0x32
   12684:	str	r8, [sp]
   12688:	ldr	r3, [pc, #244]	; 12784 <error@@Base+0x964>
   1268c:	add	r3, pc, r3
   12690:	bl	127a0 <error@@Base+0x980>
   12694:	str	r8, [sp]
   12698:	str	r7, [sp, #4]
   1269c:	add	r6, r5, #416	; 0x1a0
   126a0:	mov	r0, r4
   126a4:	mov	r2, #50	; 0x32
   126a8:	ldr	r3, [pc, #216]	; 12788 <error@@Base+0x968>
   126ac:	mov	r1, r6
   126b0:	add	r3, pc, r3
   126b4:	bl	127a0 <error@@Base+0x980>
   126b8:	str	r7, [sp]
   126bc:	str	r7, [sp, #4]
   126c0:	add	r1, r5, #824	; 0x338
   126c4:	mov	r0, r4
   126c8:	mov	r2, #10
   126cc:	ldr	r3, [pc, #184]	; 1278c <error@@Base+0x96c>
   126d0:	add	r3, pc, r3
   126d4:	bl	127a0 <error@@Base+0x980>
   126d8:	ldr	r0, [r5]
   126dc:	cmp	r0, #1
   126e0:	blt	12748 <error@@Base+0x928>
   126e4:	str	r8, [sp]
   126e8:	str	r8, [sp, #4]
   126ec:	add	r1, r5, #920	; 0x398
   126f0:	mov	r0, r4
   126f4:	mov	r2, #8
   126f8:	ldr	r3, [pc, #144]	; 12790 <error@@Base+0x970>
   126fc:	add	r3, pc, r3
   12700:	bl	127a0 <error@@Base+0x980>
   12704:	ldr	r0, [r5, #8]
   12708:	cmp	r0, #1
   1270c:	blt	12724 <error@@Base+0x904>
   12710:	ldr	r2, [pc, #124]	; 12794 <error@@Base+0x974>
   12714:	add	r1, r5, #992	; 0x3e0
   12718:	mov	r0, r4
   1271c:	add	r2, pc, r2
   12720:	bl	12b60 <error@@Base+0xd40>
   12724:	ldr	r0, [r6]
   12728:	cmp	r0, #1
   1272c:	blt	12748 <error@@Base+0x928>
   12730:	ldr	r2, [pc, #96]	; 12798 <error@@Base+0x978>
   12734:	movw	r0, #9048	; 0x2358
   12738:	add	r1, r5, r0
   1273c:	mov	r0, r4
   12740:	add	r2, pc, r2
   12744:	bl	12b60 <error@@Base+0xd40>
   12748:	mov	r0, r4
   1274c:	sub	sp, fp, #24
   12750:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12754:	b	11a80 <__assert_fail@plt+0xd38>
   12758:	andeq	r0, r0, r0
   1275c:	subsmi	r0, r9, r0
   12760:	andeq	r1, r0, r9, ror #15
   12764:	ldrdeq	r1, [r0], -r3
   12768:	andeq	r1, r0, r5, lsl #15
   1276c:	andeq	r4, r0, ip, lsr #25
   12770:			; <UNDEFINED> instruction: 0x000017bc
   12774:			; <UNDEFINED> instruction: 0x000017b6
   12778:	andeq	r1, r0, sl, lsr #15
   1277c:	ldrdeq	r1, [r0], -fp
   12780:	andeq	r1, r0, r0, asr r7
   12784:	andeq	r1, r0, r9, lsr r7
   12788:	andeq	r1, r0, r8, lsr #14
   1278c:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12790:	andeq	r1, r0, sl, ror #13
   12794:	andeq	r1, r0, r9, lsr #13
   12798:	muleq	r0, r8, r6
   1279c:	nop	{0}
   127a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127a4:	add	fp, sp, #28
   127a8:	sub	sp, sp, #4
   127ac:	vpush	{d8}
   127b0:	sub	sp, sp, #8
   127b4:	mov	r5, r1
   127b8:	ldr	r1, [pc, #832]	; 12b00 <error@@Base+0xce0>
   127bc:	mov	r8, r2
   127c0:	mov	r2, r3
   127c4:	mov	r4, r0
   127c8:	add	r1, pc, r1
   127cc:	bl	10cc4 <fprintf@plt>
   127d0:	ldr	r0, [pc, #812]	; 12b04 <error@@Base+0xce4>
   127d4:	mov	r1, #26
   127d8:	mov	r2, #1
   127dc:	mov	r3, r4
   127e0:	mov	r7, #1
   127e4:	add	r0, pc, r0
   127e8:	bl	10c28 <fwrite@plt>
   127ec:	ldr	r0, [pc, #788]	; 12b08 <error@@Base+0xce8>
   127f0:	mov	r1, #3
   127f4:	mov	r2, #1
   127f8:	mov	r3, r4
   127fc:	add	r0, pc, r0
   12800:	bl	10c28 <fwrite@plt>
   12804:	ldrb	r1, [fp, #8]
   12808:	ldr	r0, [pc, #764]	; 12b0c <error@@Base+0xcec>
   1280c:	ldr	r2, [pc, #764]	; 12b10 <error@@Base+0xcf0>
   12810:	str	r1, [sp]
   12814:	cmp	r1, #0
   12818:	add	r0, pc, r0
   1281c:	add	r2, pc, r2
   12820:	ldr	r1, [pc, #748]	; 12b14 <error@@Base+0xcf4>
   12824:	movne	r2, r0
   12828:	mov	r0, r4
   1282c:	add	r1, pc, r1
   12830:	bl	10cc4 <fprintf@plt>
   12834:	ldr	r1, [fp, #12]
   12838:	lsl	r0, r8, #16
   1283c:	sxth	r6, r8
   12840:	cmp	r0, #65536	; 0x10000
   12844:	str	r1, [sp, #4]
   12848:	blt	12934 <error@@Base+0xb14>
   1284c:	ldr	sl, [pc, #708]	; 12b18 <error@@Base+0xcf8>
   12850:	vldr	d8, [pc, #672]	; 12af8 <error@@Base+0xcd8>
   12854:	mov	r8, #1
   12858:	add	sl, pc, sl
   1285c:	b	128b0 <error@@Base+0xa90>
   12860:	ldr	r0, [pc, #704]	; 12b28 <error@@Base+0xd08>
   12864:	mov	r1, #26
   12868:	add	r0, pc, r0
   1286c:	mov	r2, #1
   12870:	mov	r3, r4
   12874:	bl	10c28 <fwrite@plt>
   12878:	ldr	r0, [pc, #684]	; 12b2c <error@@Base+0xd0c>
   1287c:	mov	r1, #3
   12880:	mov	r2, #1
   12884:	mov	r3, r4
   12888:	add	r0, pc, r0
   1288c:	bl	10c28 <fwrite@plt>
   12890:	mov	r0, r4
   12894:	mov	r1, sl
   12898:	mov	r2, r7
   1289c:	bl	10cc4 <fprintf@plt>
   128a0:	add	r8, r8, #1
   128a4:	sxth	r7, r8
   128a8:	cmp	r6, r7
   128ac:	blt	12934 <error@@Base+0xb14>
   128b0:	mov	r0, r5
   128b4:	ldr	r2, [r0, r7, lsl #3]!
   128b8:	cmp	r2, #1
   128bc:	blt	128a0 <error@@Base+0xa80>
   128c0:	cmp	r0, #0
   128c4:	beq	12860 <error@@Base+0xa40>
   128c8:	add	r9, r5, r7, lsl #3
   128cc:	mov	r0, r4
   128d0:	ldr	r3, [r9, #4]!
   128d4:	ldr	r1, [pc, #576]	; 12b1c <error@@Base+0xcfc>
   128d8:	add	r1, pc, r1
   128dc:	bl	10cc4 <fprintf@plt>
   128e0:	ldr	r0, [r5, r7, lsl #3]
   128e4:	cmp	r0, #0
   128e8:	beq	12924 <error@@Base+0xb04>
   128ec:	ldr	r1, [r9]
   128f0:	vmov	s2, r0
   128f4:	sub	r1, r0, r1
   128f8:	mov	r0, r4
   128fc:	vmov	s0, r1
   12900:	vcvt.f64.s32	d16, s0
   12904:	vcvt.f64.s32	d17, s2
   12908:	ldr	r1, [pc, #532]	; 12b24 <error@@Base+0xd04>
   1290c:	add	r1, pc, r1
   12910:	vmul.f64	d16, d16, d8
   12914:	vdiv.f64	d16, d16, d17
   12918:	vmov	r2, r3, d16
   1291c:	bl	10cc4 <fprintf@plt>
   12920:	b	12878 <error@@Base+0xa58>
   12924:	ldr	r0, [pc, #500]	; 12b20 <error@@Base+0xd00>
   12928:	mov	r1, #8
   1292c:	add	r0, pc, r0
   12930:	b	1286c <error@@Base+0xa4c>
   12934:	ldr	r0, [sp]
   12938:	cmp	r0, #0
   1293c:	beq	12a10 <error@@Base+0xbf0>
   12940:	add	r7, r6, #1
   12944:	mov	r0, r5
   12948:	ldr	r2, [r0, r7, lsl #3]!
   1294c:	cmp	r2, #1
   12950:	blt	12a10 <error@@Base+0xbf0>
   12954:	cmp	r0, #0
   12958:	beq	129bc <error@@Base+0xb9c>
   1295c:	add	r8, r5, r7, lsl #3
   12960:	mov	r0, r4
   12964:	ldr	r3, [r8, #4]!
   12968:	ldr	r1, [pc, #448]	; 12b30 <error@@Base+0xd10>
   1296c:	add	r1, pc, r1
   12970:	bl	10cc4 <fprintf@plt>
   12974:	ldr	r0, [r5, r7, lsl #3]
   12978:	cmp	r0, #0
   1297c:	beq	129cc <error@@Base+0xbac>
   12980:	ldr	r1, [r8]
   12984:	vldr	d16, [pc, #364]	; 12af8 <error@@Base+0xcd8>
   12988:	vmov	s2, r0
   1298c:	sub	r1, r0, r1
   12990:	mov	r0, r4
   12994:	vmov	s0, r1
   12998:	vcvt.f64.s32	d17, s0
   1299c:	vcvt.f64.s32	d18, s2
   129a0:	ldr	r1, [pc, #400]	; 12b38 <error@@Base+0xd18>
   129a4:	add	r1, pc, r1
   129a8:	vmul.f64	d16, d17, d16
   129ac:	vdiv.f64	d16, d16, d18
   129b0:	vmov	r2, r3, d16
   129b4:	bl	10cc4 <fprintf@plt>
   129b8:	b	129e4 <error@@Base+0xbc4>
   129bc:	ldr	r0, [pc, #376]	; 12b3c <error@@Base+0xd1c>
   129c0:	mov	r1, #26
   129c4:	add	r0, pc, r0
   129c8:	b	129d8 <error@@Base+0xbb8>
   129cc:	ldr	r0, [pc, #352]	; 12b34 <error@@Base+0xd14>
   129d0:	mov	r1, #8
   129d4:	add	r0, pc, r0
   129d8:	mov	r2, #1
   129dc:	mov	r3, r4
   129e0:	bl	10c28 <fwrite@plt>
   129e4:	ldr	r0, [pc, #340]	; 12b40 <error@@Base+0xd20>
   129e8:	mov	r1, #3
   129ec:	mov	r2, #1
   129f0:	mov	r3, r4
   129f4:	add	r0, pc, r0
   129f8:	bl	10c28 <fwrite@plt>
   129fc:	ldr	r1, [pc, #320]	; 12b44 <error@@Base+0xd24>
   12a00:	mov	r0, r4
   12a04:	mov	r2, r6
   12a08:	add	r1, pc, r1
   12a0c:	bl	10cc4 <fprintf@plt>
   12a10:	ldr	r0, [sp, #4]
   12a14:	tst	r0, #255	; 0xff
   12a18:	beq	12a80 <error@@Base+0xc60>
   12a1c:	cmp	r5, #0
   12a20:	beq	12a90 <error@@Base+0xc70>
   12a24:	ldm	r5, {r2, r3}
   12a28:	ldr	r1, [pc, #280]	; 12b48 <error@@Base+0xd28>
   12a2c:	mov	r0, r4
   12a30:	add	r1, pc, r1
   12a34:	bl	10cc4 <fprintf@plt>
   12a38:	ldr	r0, [r5]
   12a3c:	cmp	r0, #0
   12a40:	beq	12aa0 <error@@Base+0xc80>
   12a44:	ldr	r1, [r5, #4]
   12a48:	vldr	d16, [pc, #168]	; 12af8 <error@@Base+0xcd8>
   12a4c:	vmov	s2, r0
   12a50:	sub	r1, r0, r1
   12a54:	mov	r0, r4
   12a58:	vmov	s0, r1
   12a5c:	vcvt.f64.s32	d17, s0
   12a60:	vcvt.f64.s32	d18, s2
   12a64:	ldr	r1, [pc, #228]	; 12b50 <error@@Base+0xd30>
   12a68:	add	r1, pc, r1
   12a6c:	vmul.f64	d16, d17, d16
   12a70:	vdiv.f64	d16, d16, d18
   12a74:	vmov	r2, r3, d16
   12a78:	bl	10cc4 <fprintf@plt>
   12a7c:	b	12ab8 <error@@Base+0xc98>
   12a80:	sub	sp, fp, #40	; 0x28
   12a84:	vpop	{d8}
   12a88:	add	sp, sp, #4
   12a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a90:	ldr	r0, [pc, #188]	; 12b54 <error@@Base+0xd34>
   12a94:	mov	r1, #26
   12a98:	add	r0, pc, r0
   12a9c:	b	12aac <error@@Base+0xc8c>
   12aa0:	ldr	r0, [pc, #164]	; 12b4c <error@@Base+0xd2c>
   12aa4:	mov	r1, #8
   12aa8:	add	r0, pc, r0
   12aac:	mov	r2, #1
   12ab0:	mov	r3, r4
   12ab4:	bl	10c28 <fwrite@plt>
   12ab8:	ldr	r0, [pc, #152]	; 12b58 <error@@Base+0xd38>
   12abc:	mov	r1, #3
   12ac0:	mov	r2, #1
   12ac4:	mov	r3, r4
   12ac8:	add	r0, pc, r0
   12acc:	bl	10c28 <fwrite@plt>
   12ad0:	ldr	r0, [pc, #132]	; 12b5c <error@@Base+0xd3c>
   12ad4:	mov	r1, #7
   12ad8:	mov	r2, #1
   12adc:	mov	r3, r4
   12ae0:	add	r0, pc, r0
   12ae4:	sub	sp, fp, #40	; 0x28
   12ae8:	vpop	{d8}
   12aec:	add	sp, sp, #4
   12af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af4:	b	10c28 <fwrite@plt>
   12af8:	andeq	r0, r0, r0
   12afc:	subsmi	r0, r9, r0
   12b00:	andeq	r1, r0, sp, lsr r6
   12b04:	andeq	r1, r0, r1, asr r6
   12b08:	andeq	r1, r0, r4, asr r6
   12b0c:	strdeq	r1, [r0], -r2
   12b10:	strdeq	r1, [r0], -r5
   12b14:	ldrdeq	r1, [r0], -sl
   12b18:	andeq	r1, r0, r0, asr #11
   12b1c:	andeq	r1, r0, r2, asr r5
   12b20:	andeq	r1, r0, sl, asr #9
   12b24:	strdeq	r1, [r0], -r3
   12b28:	andeq	r1, r0, sp, asr #11
   12b2c:	andeq	r1, r0, r8, asr #11
   12b30:			; <UNDEFINED> instruction: 0x000014be
   12b34:	andeq	r1, r0, r2, lsr #8
   12b38:	andeq	r1, r0, fp, asr r4
   12b3c:	andeq	r1, r0, r1, ror r4
   12b40:	andeq	r1, r0, ip, asr r4
   12b44:	andeq	r1, r0, r9, lsl r4
   12b48:	strdeq	r1, [r0], -sl
   12b4c:	andeq	r1, r0, lr, asr #6
   12b50:	muleq	r0, r7, r3
   12b54:	muleq	r0, sp, r3
   12b58:	andeq	r1, r0, r8, lsl #7
   12b5c:	andeq	r1, r0, sp, ror #2
   12b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b64:	add	fp, sp, #28
   12b68:	sub	sp, sp, #4
   12b6c:	vpush	{d8}
   12b70:	mov	r5, r0
   12b74:	mov	r0, r1
   12b78:	mov	r6, r2
   12b7c:	mov	r4, r1
   12b80:	bl	11878 <__assert_fail@plt+0xb30>
   12b84:	movw	r0, #8048	; 0x1f70
   12b88:	ldr	r1, [r4, r0]!
   12b8c:	ldr	r0, [r4, #4]
   12b90:	ldr	r2, [pc, #336]	; 12ce8 <error@@Base+0xec8>
   12b94:	add	r2, pc, r2
   12b98:	bl	11510 <__assert_fail@plt+0x7c8>
   12b9c:	ldr	r1, [pc, #328]	; 12cec <error@@Base+0xecc>
   12ba0:	mov	r0, r5
   12ba4:	mov	r2, r6
   12ba8:	add	r1, pc, r1
   12bac:	bl	10cc4 <fprintf@plt>
   12bb0:	ldr	r0, [pc, #312]	; 12cf0 <error@@Base+0xed0>
   12bb4:	mov	r1, #26
   12bb8:	mov	r2, #1
   12bbc:	mov	r3, r5
   12bc0:	add	r0, pc, r0
   12bc4:	bl	10c28 <fwrite@plt>
   12bc8:	ldr	r0, [pc, #292]	; 12cf4 <error@@Base+0xed4>
   12bcc:	mov	r1, #3
   12bd0:	mov	r2, #1
   12bd4:	mov	r3, r5
   12bd8:	add	r0, pc, r0
   12bdc:	bl	10c28 <fwrite@plt>
   12be0:	mov	r0, #10
   12be4:	mov	r1, r5
   12be8:	bl	10cf4 <fputc@plt>
   12bec:	ldr	r0, [r4, #4]
   12bf0:	cmp	r0, #1
   12bf4:	blt	12cd0 <error@@Base+0xeb0>
   12bf8:	ldr	r9, [pc, #248]	; 12cf8 <error@@Base+0xed8>
   12bfc:	ldr	r7, [pc, #248]	; 12cfc <error@@Base+0xedc>
   12c00:	ldr	r6, [pc, #248]	; 12d00 <error@@Base+0xee0>
   12c04:	vldr	d8, [pc, #212]	; 12ce0 <error@@Base+0xec0>
   12c08:	mov	r8, #0
   12c0c:	add	r9, pc, r9
   12c10:	add	r7, pc, r7
   12c14:	add	r6, pc, r6
   12c18:	b	12c8c <error@@Base+0xe6c>
   12c1c:	ldr	r1, [sl, #16]
   12c20:	vmov	s2, r0
   12c24:	sub	r1, r0, r1
   12c28:	mov	r0, r5
   12c2c:	vmov	s0, r1
   12c30:	vcvt.f64.s32	d16, s0
   12c34:	vcvt.f64.s32	d17, s2
   12c38:	ldr	r1, [pc, #200]	; 12d08 <error@@Base+0xee8>
   12c3c:	add	r1, pc, r1
   12c40:	vmul.f64	d16, d16, d8
   12c44:	vdiv.f64	d16, d16, d17
   12c48:	vmov	r2, r3, d16
   12c4c:	bl	10cc4 <fprintf@plt>
   12c50:	mov	r0, r7
   12c54:	mov	r1, #3
   12c58:	mov	r2, #1
   12c5c:	mov	r3, r5
   12c60:	bl	10c28 <fwrite@plt>
   12c64:	ldr	r0, [r4]
   12c68:	mov	r1, r6
   12c6c:	ldr	r0, [r0, r8, lsl #2]
   12c70:	ldr	r2, [r0, #8]
   12c74:	mov	r0, r5
   12c78:	bl	10cc4 <fprintf@plt>
   12c7c:	ldr	r0, [r4, #4]
   12c80:	add	r8, r8, #1
   12c84:	cmp	r8, r0
   12c88:	bge	12cd0 <error@@Base+0xeb0>
   12c8c:	ldr	r0, [r4]
   12c90:	mov	r1, r9
   12c94:	ldr	sl, [r0, r8, lsl #2]
   12c98:	mov	r0, r5
   12c9c:	ldr	r2, [sl, #12]
   12ca0:	ldr	r3, [sl, #16]
   12ca4:	bl	10cc4 <fprintf@plt>
   12ca8:	ldr	r0, [sl, #12]
   12cac:	cmp	r0, #0
   12cb0:	bne	12c1c <error@@Base+0xdfc>
   12cb4:	ldr	r0, [pc, #72]	; 12d04 <error@@Base+0xee4>
   12cb8:	mov	r1, #8
   12cbc:	mov	r2, #1
   12cc0:	mov	r3, r5
   12cc4:	add	r0, pc, r0
   12cc8:	bl	10c28 <fwrite@plt>
   12ccc:	b	12c50 <error@@Base+0xe30>
   12cd0:	vpop	{d8}
   12cd4:	add	sp, sp, #4
   12cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cdc:	nop	{0}
   12ce0:	andeq	r0, r0, r0
   12ce4:	subsmi	r0, r9, r0
   12ce8:	andeq	r0, r0, r0, ror r1
   12cec:	andeq	r1, r0, sp, asr r2
   12cf0:	andeq	r1, r0, r5, ror r2
   12cf4:	andeq	r1, r0, r8, ror r2
   12cf8:	andeq	r1, r0, lr, lsl r2
   12cfc:	andeq	r1, r0, r0, asr #4
   12d00:	strdeq	r1, [r0], -r2
   12d04:	andeq	r1, r0, r2, lsr r1
   12d08:	andeq	r1, r0, r3, asr #3
   12d0c:	ldr	r1, [r1, #8]
   12d10:	ldr	r0, [r0, #8]
   12d14:	b	11974 <__assert_fail@plt+0xc2c>
   12d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d1c:	add	fp, sp, #28
   12d20:	sub	sp, sp, #28
   12d24:	ldr	r8, [r1]
   12d28:	str	r0, [sp, #4]
   12d2c:	cmp	r8, #0
   12d30:	str	r8, [sp, #16]
   12d34:	beq	13484 <error@@Base+0x1664>
   12d38:	ldr	sl, [pc, #1964]	; 134ec <error@@Base+0x16cc>
   12d3c:	add	r9, sp, #12
   12d40:	add	sl, pc, sl
   12d44:	mov	r0, #17
   12d48:	mov	r1, r8
   12d4c:	mov	r7, r9
   12d50:	mov	ip, r0
   12d54:	mov	lr, #18
   12d58:	cmp	r7, #0
   12d5c:	beq	12ec8 <error@@Base+0x10a8>
   12d60:	mov	r7, r1
   12d64:	ldr	r0, [r7, #12]
   12d68:	mov	r2, #0
   12d6c:	movw	r1, #1092	; 0x444
   12d70:	sub	r3, r1, r2
   12d74:	add	r3, r2, r3, lsr #1
   12d78:	add	r4, r3, r3, lsl #1
   12d7c:	ldr	r5, [sl, r4, lsl #2]
   12d80:	cmp	r5, r0
   12d84:	bls	12d98 <error@@Base+0xf78>
   12d88:	sub	r1, r3, #1
   12d8c:	cmp	r1, r2
   12d90:	bcs	12d70 <error@@Base+0xf50>
   12d94:	b	12de4 <error@@Base+0xfc4>
   12d98:	add	r2, sl, r4, lsl #2
   12d9c:	ldr	r4, [r2, #4]
   12da0:	cmp	r4, r0
   12da4:	bcs	12db8 <error@@Base+0xf98>
   12da8:	add	r2, r3, #1
   12dac:	cmp	r1, r2
   12db0:	bcs	12d70 <error@@Base+0xf50>
   12db4:	b	12de4 <error@@Base+0xfc4>
   12db8:	ldr	r1, [r2, #8]
   12dbc:	orr	r1, r1, #2
   12dc0:	cmp	r1, #6
   12dc4:	bne	12de4 <error@@Base+0xfc4>
   12dc8:	ldr	r7, [r7, #4]
   12dcc:	cmp	r7, #0
   12dd0:	bne	12d64 <error@@Base+0xf44>
   12dd4:	mov	r2, #18
   12dd8:	mov	r9, #18
   12ddc:	mov	r7, #0
   12de0:	b	12ed4 <error@@Base+0x10b4>
   12de4:	cmp	r7, #0
   12de8:	beq	12ec8 <error@@Base+0x10a8>
   12dec:	mov	r2, #0
   12df0:	movw	r1, #1092	; 0x444
   12df4:	sub	r3, r1, r2
   12df8:	add	r3, r2, r3, lsr #1
   12dfc:	add	r4, r3, r3, lsl #1
   12e00:	ldr	r5, [sl, r4, lsl #2]
   12e04:	cmp	r5, r0
   12e08:	bls	12e1c <error@@Base+0xffc>
   12e0c:	sub	r1, r3, #1
   12e10:	cmp	r1, r2
   12e14:	bcs	12df4 <error@@Base+0xfd4>
   12e18:	b	12e38 <error@@Base+0x1018>
   12e1c:	add	r2, sl, r4, lsl #2
   12e20:	ldr	r4, [r2, #4]
   12e24:	cmp	r4, r0
   12e28:	bcs	13200 <error@@Base+0x13e0>
   12e2c:	add	r2, r3, #1
   12e30:	cmp	r1, r2
   12e34:	bcs	12df4 <error@@Base+0xfd4>
   12e38:	mov	r9, #0
   12e3c:	ldr	r6, [r7, #4]
   12e40:	cmp	r6, #0
   12e44:	beq	1304c <error@@Base+0x122c>
   12e48:	mov	r2, r6
   12e4c:	str	r7, [sp, #8]
   12e50:	ldr	r0, [r2, #12]
   12e54:	mov	r4, #0
   12e58:	movw	r3, #1092	; 0x444
   12e5c:	sub	r7, r3, r4
   12e60:	add	r7, r4, r7, lsr #1
   12e64:	add	r5, r7, r7, lsl #1
   12e68:	ldr	r1, [sl, r5, lsl #2]
   12e6c:	cmp	r1, r0
   12e70:	bls	12e84 <error@@Base+0x1064>
   12e74:	sub	r3, r7, #1
   12e78:	cmp	r3, r4
   12e7c:	bcs	12e5c <error@@Base+0x103c>
   12e80:	b	12f5c <error@@Base+0x113c>
   12e84:	add	r5, sl, r5, lsl #2
   12e88:	ldr	r1, [r5, #4]
   12e8c:	cmp	r1, r0
   12e90:	bcs	12ea4 <error@@Base+0x1084>
   12e94:	add	r4, r7, #1
   12e98:	cmp	r3, r4
   12e9c:	bcs	12e5c <error@@Base+0x103c>
   12ea0:	b	12f5c <error@@Base+0x113c>
   12ea4:	ldr	r1, [r5, #8]
   12ea8:	orr	r1, r1, #2
   12eac:	cmp	r1, #6
   12eb0:	bne	12f5c <error@@Base+0x113c>
   12eb4:	ldr	r2, [r2, #4]
   12eb8:	cmp	r2, #0
   12ebc:	bne	12e50 <error@@Base+0x1030>
   12ec0:	mov	r2, #18
   12ec4:	b	13060 <error@@Base+0x1240>
   12ec8:	mov	r7, #0
   12ecc:	mov	r2, #18
   12ed0:	mov	r9, #18
   12ed4:	sub	r0, r2, #1
   12ed8:	cmp	r0, #3
   12edc:	subcs	r0, r9, #1
   12ee0:	cmpcs	r0, #3
   12ee4:	bcc	132d4 <error@@Base+0x14b4>
   12ee8:	orr	r4, r2, #1
   12eec:	orr	r6, r9, #1
   12ef0:	cmp	r4, #9
   12ef4:	cmpeq	r6, #9
   12ef8:	beq	12f54 <error@@Base+0x1134>
   12efc:	cmp	r6, #9
   12f00:	bne	12f28 <error@@Base+0x1108>
   12f04:	cmp	r2, #13
   12f08:	bhi	12f28 <error@@Base+0x1108>
   12f0c:	mov	r0, #1
   12f10:	mov	r1, #13312	; 0x3400
   12f14:	tst	r1, r0, lsl r2
   12f18:	beq	12f28 <error@@Base+0x1108>
   12f1c:	orr	r0, lr, #1
   12f20:	cmp	r0, #9
   12f24:	beq	12f54 <error@@Base+0x1134>
   12f28:	orr	r0, ip, #1
   12f2c:	cmp	r0, #9
   12f30:	bne	12fb8 <error@@Base+0x1198>
   12f34:	cmp	r9, #13
   12f38:	bhi	12fb8 <error@@Base+0x1198>
   12f3c:	mov	r0, #1
   12f40:	mov	r1, #13312	; 0x3400
   12f44:	tst	r1, r0, lsl r9
   12f48:	beq	12fb8 <error@@Base+0x1198>
   12f4c:	cmp	r4, #9
   12f50:	bne	12fb8 <error@@Base+0x1198>
   12f54:	mov	r0, r9
   12f58:	b	131d4 <error@@Base+0x13b4>
   12f5c:	cmp	r2, #0
   12f60:	beq	1305c <error@@Base+0x123c>
   12f64:	mov	r3, #0
   12f68:	movw	r2, #1092	; 0x444
   12f6c:	sub	r1, r2, r3
   12f70:	add	r7, r3, r1, lsr #1
   12f74:	add	r5, r7, r7, lsl #1
   12f78:	ldr	r1, [sl, r5, lsl #2]
   12f7c:	cmp	r1, r0
   12f80:	bls	12f94 <error@@Base+0x1174>
   12f84:	sub	r2, r7, #1
   12f88:	cmp	r2, r3
   12f8c:	bcs	12f6c <error@@Base+0x114c>
   12f90:	b	13054 <error@@Base+0x1234>
   12f94:	add	r3, sl, r5, lsl #2
   12f98:	ldr	r1, [r3, #4]
   12f9c:	cmp	r1, r0
   12fa0:	bcs	13208 <error@@Base+0x13e8>
   12fa4:	add	r3, r7, #1
   12fa8:	cmp	r2, r3
   12fac:	bcs	12f6c <error@@Base+0x114c>
   12fb0:	mov	r2, #0
   12fb4:	b	13060 <error@@Base+0x1240>
   12fb8:	cmp	r2, #10
   12fbc:	mov	r0, #8
   12fc0:	cmpeq	r9, #8
   12fc4:	beq	131d4 <error@@Base+0x13b4>
   12fc8:	cmp	lr, #8
   12fcc:	cmpeq	r2, #11
   12fd0:	beq	131e4 <error@@Base+0x13c4>
   12fd4:	cmp	r2, #8
   12fd8:	cmpeq	ip, #8
   12fdc:	beq	131f0 <error@@Base+0x13d0>
   12fe0:	cmp	r2, #15
   12fe4:	mov	r0, #15
   12fe8:	cmpeq	r9, #15
   12fec:	beq	131d4 <error@@Base+0x13b4>
   12ff0:	cmp	r2, #15
   12ff4:	cmpeq	r6, #9
   12ff8:	beq	12f54 <error@@Base+0x1134>
   12ffc:	cmp	r9, #15
   13000:	cmpeq	r4, #9
   13004:	beq	131d4 <error@@Base+0x13b4>
   13008:	cmp	ip, #15
   1300c:	cmpeq	r2, #15
   13010:	beq	13288 <error@@Base+0x1468>
   13014:	cmp	r9, #15
   13018:	bne	13210 <error@@Base+0x13f0>
   1301c:	cmp	lr, #15
   13020:	bne	13220 <error@@Base+0x1400>
   13024:	orr	r3, r2, #2
   13028:	sub	r1, r2, #10
   1302c:	sub	r3, r3, #14
   13030:	clz	r1, r1
   13034:	clz	r3, r3
   13038:	lsr	r1, r1, #5
   1303c:	lsr	r3, r3, #5
   13040:	orrs	r1, r1, r3
   13044:	bne	131d4 <error@@Base+0x13b4>
   13048:	b	13220 <error@@Base+0x1400>
   1304c:	mov	r2, #18
   13050:	b	12ed4 <error@@Base+0x10b4>
   13054:	mov	r2, #0
   13058:	b	13060 <error@@Base+0x1240>
   1305c:	mov	r2, #18
   13060:	ldr	r0, [r6, #12]
   13064:	mov	r4, #0
   13068:	movw	r3, #1092	; 0x444
   1306c:	sub	r1, r3, r4
   13070:	add	r7, r4, r1, lsr #1
   13074:	add	r5, r7, r7, lsl #1
   13078:	ldr	r1, [sl, r5, lsl #2]
   1307c:	cmp	r1, r0
   13080:	bls	13094 <error@@Base+0x1274>
   13084:	sub	r3, r7, #1
   13088:	cmp	r3, r4
   1308c:	bcs	1306c <error@@Base+0x124c>
   13090:	b	130e0 <error@@Base+0x12c0>
   13094:	add	r5, sl, r5, lsl #2
   13098:	ldr	r1, [r5, #4]
   1309c:	cmp	r1, r0
   130a0:	bcs	130b4 <error@@Base+0x1294>
   130a4:	add	r4, r7, #1
   130a8:	cmp	r3, r4
   130ac:	bcs	1306c <error@@Base+0x124c>
   130b0:	b	130e0 <error@@Base+0x12c0>
   130b4:	ldr	r0, [r5, #8]
   130b8:	orr	r0, r0, #2
   130bc:	cmp	r0, #6
   130c0:	bne	130e0 <error@@Base+0x12c0>
   130c4:	ldr	r6, [r6, #4]
   130c8:	cmp	r6, #0
   130cc:	bne	13060 <error@@Base+0x1240>
   130d0:	mov	lr, #18
   130d4:	cmp	r9, #1
   130d8:	beq	131c4 <error@@Base+0x13a4>
   130dc:	b	132bc <error@@Base+0x149c>
   130e0:	mov	lr, #18
   130e4:	cmp	r6, #0
   130e8:	beq	131bc <error@@Base+0x139c>
   130ec:	ldr	r6, [r6, #4]
   130f0:	cmp	r6, #0
   130f4:	beq	131bc <error@@Base+0x139c>
   130f8:	ldr	r0, [r6, #12]
   130fc:	mov	r3, #0
   13100:	movw	r4, #1092	; 0x444
   13104:	sub	r1, r4, r3
   13108:	add	r7, r3, r1, lsr #1
   1310c:	add	r5, r7, r7, lsl #1
   13110:	ldr	r1, [sl, r5, lsl #2]
   13114:	cmp	r1, r0
   13118:	bls	1312c <error@@Base+0x130c>
   1311c:	sub	r4, r7, #1
   13120:	cmp	r4, r3
   13124:	bcs	13104 <error@@Base+0x12e4>
   13128:	b	1315c <error@@Base+0x133c>
   1312c:	add	r3, sl, r5, lsl #2
   13130:	ldr	r1, [r3, #4]
   13134:	cmp	r1, r0
   13138:	bcs	1314c <error@@Base+0x132c>
   1313c:	add	r3, r7, #1
   13140:	cmp	r4, r3
   13144:	bcs	13104 <error@@Base+0x12e4>
   13148:	b	1315c <error@@Base+0x133c>
   1314c:	ldr	r1, [r3, #8]
   13150:	orr	r1, r1, #2
   13154:	cmp	r1, #6
   13158:	beq	130ec <error@@Base+0x12cc>
   1315c:	cmp	r6, #0
   13160:	beq	131bc <error@@Base+0x139c>
   13164:	mov	r4, #0
   13168:	movw	r6, #1092	; 0x444
   1316c:	sub	r1, r6, r4
   13170:	add	r3, r4, r1, lsr #1
   13174:	add	r7, r3, r3, lsl #1
   13178:	ldr	r1, [sl, r7, lsl #2]
   1317c:	cmp	r1, r0
   13180:	bls	13194 <error@@Base+0x1374>
   13184:	sub	r6, r3, #1
   13188:	cmp	r6, r4
   1318c:	bcs	1316c <error@@Base+0x134c>
   13190:	b	131b8 <error@@Base+0x1398>
   13194:	add	r7, sl, r7, lsl #2
   13198:	ldr	r1, [r7, #4]
   1319c:	cmp	r1, r0
   131a0:	bcs	132b0 <error@@Base+0x1490>
   131a4:	add	r4, r3, #1
   131a8:	mov	lr, #0
   131ac:	cmp	r6, r4
   131b0:	bcs	1316c <error@@Base+0x134c>
   131b4:	b	131bc <error@@Base+0x139c>
   131b8:	mov	lr, #0
   131bc:	cmp	r9, #1
   131c0:	bne	132bc <error@@Base+0x149c>
   131c4:	ldr	r7, [sp, #8]
   131c8:	mov	r0, #1
   131cc:	cmp	r2, #2
   131d0:	bne	12ed4 <error@@Base+0x10b4>
   131d4:	ldr	r1, [r7, #4]
   131d8:	cmp	r1, #0
   131dc:	bne	12d50 <error@@Base+0xf30>
   131e0:	b	132d4 <error@@Base+0x14b4>
   131e4:	cmp	r9, #8
   131e8:	beq	131d4 <error@@Base+0x13b4>
   131ec:	b	12fd4 <error@@Base+0x11b4>
   131f0:	mov	r0, #11
   131f4:	cmp	r9, #11
   131f8:	beq	131d4 <error@@Base+0x13b4>
   131fc:	b	12fe0 <error@@Base+0x11c0>
   13200:	ldr	r9, [r2, #8]
   13204:	b	12e3c <error@@Base+0x101c>
   13208:	ldr	r2, [r3, #8]
   1320c:	b	13060 <error@@Base+0x1240>
   13210:	cmp	r2, #7
   13214:	moveq	r0, #7
   13218:	cmpeq	r9, #7
   1321c:	beq	131d4 <error@@Base+0x13b4>
   13220:	cmp	r2, #16
   13224:	bne	1325c <error@@Base+0x143c>
   13228:	orr	r1, r9, #8
   1322c:	sub	r0, r6, #9
   13230:	sub	r1, r1, #15
   13234:	clz	r0, r0
   13238:	clz	r1, r1
   1323c:	lsr	r0, r0, #5
   13240:	lsr	r1, r1, #5
   13244:	orr	r0, r1, r0
   13248:	sub	r1, r9, #16
   1324c:	clz	r1, r1
   13250:	lsr	r1, r1, #5
   13254:	orrs	r0, r1, r0
   13258:	bne	12f54 <error@@Base+0x1134>
   1325c:	cmp	r9, #16
   13260:	bne	132c4 <error@@Base+0x14a4>
   13264:	cmp	r2, #16
   13268:	bhi	132d4 <error@@Base+0x14b4>
   1326c:	movw	r3, #33664	; 0x8380
   13270:	mov	r1, #1
   13274:	mov	r0, #16
   13278:	movt	r3, #1
   1327c:	tst	r3, r1, lsl r2
   13280:	bne	131d4 <error@@Base+0x13b4>
   13284:	b	132d4 <error@@Base+0x14b4>
   13288:	orr	r3, r9, #2
   1328c:	sub	r1, r9, #10
   13290:	sub	r3, r3, #14
   13294:	clz	r1, r1
   13298:	clz	r3, r3
   1329c:	lsr	r1, r1, #5
   132a0:	lsr	r3, r3, #5
   132a4:	orrs	r1, r1, r3
   132a8:	bne	12f54 <error@@Base+0x1134>
   132ac:	b	13014 <error@@Base+0x11f4>
   132b0:	ldr	lr, [r7, #8]
   132b4:	cmp	r9, #1
   132b8:	beq	131c4 <error@@Base+0x13a4>
   132bc:	ldr	r7, [sp, #8]
   132c0:	b	12ed4 <error@@Base+0x10b4>
   132c4:	cmp	r2, #5
   132c8:	moveq	r0, #5
   132cc:	cmpeq	r9, #5
   132d0:	beq	131d4 <error@@Base+0x13b4>
   132d4:	cmp	r7, #0
   132d8:	add	r9, sp, #12
   132dc:	beq	13484 <error@@Base+0x1664>
   132e0:	ldr	r1, [r7, #4]
   132e4:	cmp	r1, #0
   132e8:	beq	13378 <error@@Base+0x1558>
   132ec:	mov	r0, r1
   132f0:	ldr	r1, [r1, #12]
   132f4:	mov	r4, r7
   132f8:	mov	r3, #0
   132fc:	movw	r2, #1092	; 0x444
   13300:	sub	r7, r2, r3
   13304:	add	r7, r3, r7, lsr #1
   13308:	add	r6, r7, r7, lsl #1
   1330c:	ldr	r5, [sl, r6, lsl #2]
   13310:	cmp	r5, r1
   13314:	bls	13328 <error@@Base+0x1508>
   13318:	sub	r2, r7, #1
   1331c:	cmp	r2, r3
   13320:	bcs	13300 <error@@Base+0x14e0>
   13324:	b	1336c <error@@Base+0x154c>
   13328:	add	r3, sl, r6, lsl #2
   1332c:	ldr	r6, [r3, #4]
   13330:	cmp	r6, r1
   13334:	bcs	13348 <error@@Base+0x1528>
   13338:	add	r3, r7, #1
   1333c:	cmp	r2, r3
   13340:	bcs	13300 <error@@Base+0x14e0>
   13344:	b	1336c <error@@Base+0x154c>
   13348:	ldr	r1, [r3, #8]
   1334c:	orr	r1, r1, #2
   13350:	cmp	r1, #6
   13354:	bne	1336c <error@@Base+0x154c>
   13358:	ldr	r1, [r0, #4]
   1335c:	mov	r7, r0
   13360:	cmp	r1, #0
   13364:	bne	132ec <error@@Base+0x14cc>
   13368:	b	1337c <error@@Base+0x155c>
   1336c:	cmp	r4, #0
   13370:	bne	13380 <error@@Base+0x1560>
   13374:	b	13484 <error@@Base+0x1664>
   13378:	mov	r0, r7
   1337c:	mov	r4, r0
   13380:	ldr	r0, [r8, #12]
   13384:	bl	10bc8 <utf8proc_get_property@plt>
   13388:	ldrsh	r0, [r0]
   1338c:	sub	r1, r0, #1
   13390:	cmp	r1, #12
   13394:	bcs	13478 <error@@Base+0x1658>
   13398:	mov	r5, r4
   1339c:	ldr	r4, [r4, #4]
   133a0:	cmp	r4, r8
   133a4:	beq	13414 <error@@Base+0x15f4>
   133a8:	mov	r6, #0
   133ac:	mov	r7, r8
   133b0:	cmp	r7, #0
   133b4:	beq	1348c <error@@Base+0x166c>
   133b8:	ldr	r0, [r7, #12]
   133bc:	mov	r1, r9
   133c0:	bl	10be0 <utf8proc_encode_char@plt>
   133c4:	cmp	r0, #0
   133c8:	beq	134ac <error@@Base+0x168c>
   133cc:	ldr	r7, [r7, #4]
   133d0:	add	r6, r0, r6
   133d4:	cmp	r7, r4
   133d8:	bne	133b0 <error@@Base+0x1590>
   133dc:	add	r0, r6, #1
   133e0:	bl	10c58 <malloc@plt>
   133e4:	mov	r6, r0
   133e8:	mov	r9, #0
   133ec:	cmp	r8, #0
   133f0:	beq	134cc <error@@Base+0x16ac>
   133f4:	ldr	r0, [r8, #12]
   133f8:	add	r1, r6, r9
   133fc:	bl	10be0 <utf8proc_encode_char@plt>
   13400:	ldr	r8, [r8, #4]
   13404:	add	r9, r0, r9
   13408:	cmp	r8, r4
   1340c:	bne	133ec <error@@Base+0x15cc>
   13410:	b	13424 <error@@Base+0x1604>
   13414:	mov	r0, #1
   13418:	bl	10c58 <malloc@plt>
   1341c:	mov	r6, r0
   13420:	mov	r9, #0
   13424:	mov	r0, #0
   13428:	mov	r1, #12
   1342c:	strb	r0, [r6, r9]
   13430:	mov	r0, #1
   13434:	bl	11950 <__assert_fail@plt+0xc08>
   13438:	mov	r7, r0
   1343c:	mov	r0, r6
   13440:	bl	10ce8 <utf8proc_NFC@plt>
   13444:	str	r0, [r7, #8]
   13448:	ldr	r0, [sp, #4]
   1344c:	mov	r1, r7
   13450:	bl	112b4 <__assert_fail@plt+0x56c>
   13454:	mov	r0, r6
   13458:	bl	10bbc <free@plt>
   1345c:	add	r9, sp, #12
   13460:	mov	r4, r5
   13464:	ldr	r8, [r4, #4]
   13468:	cmp	r8, #0
   1346c:	str	r8, [sp, #16]
   13470:	bne	12d44 <error@@Base+0xf24>
   13474:	b	13484 <error@@Base+0x1664>
   13478:	cmp	r0, #29
   1347c:	beq	13398 <error@@Base+0x1578>
   13480:	b	13464 <error@@Base+0x1644>
   13484:	sub	sp, fp, #28
   13488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1348c:	ldr	r0, [pc, #92]	; 134f0 <error@@Base+0x16d0>
   13490:	ldr	r1, [pc, #92]	; 134f4 <error@@Base+0x16d4>
   13494:	ldr	r3, [pc, #92]	; 134f8 <error@@Base+0x16d8>
   13498:	mov	r2, #249	; 0xf9
   1349c:	add	r0, pc, r0
   134a0:	add	r1, pc, r1
   134a4:	add	r3, pc, r3
   134a8:	bl	10d48 <__assert_fail@plt>
   134ac:	ldr	r0, [pc, #72]	; 134fc <error@@Base+0x16dc>
   134b0:	ldr	r1, [pc, #72]	; 13500 <error@@Base+0x16e0>
   134b4:	ldr	r3, [pc, #72]	; 13504 <error@@Base+0x16e4>
   134b8:	mov	r2, #253	; 0xfd
   134bc:	add	r0, pc, r0
   134c0:	add	r1, pc, r1
   134c4:	add	r3, pc, r3
   134c8:	bl	10d48 <__assert_fail@plt>
   134cc:	ldr	r0, [pc, #52]	; 13508 <error@@Base+0x16e8>
   134d0:	ldr	r1, [pc, #52]	; 1350c <error@@Base+0x16ec>
   134d4:	ldr	r3, [pc, #52]	; 13510 <error@@Base+0x16f0>
   134d8:	movw	r2, #269	; 0x10d
   134dc:	add	r0, pc, r0
   134e0:	add	r1, pc, r1
   134e4:	add	r3, pc, r3
   134e8:	bl	10d48 <__assert_fail@plt>
   134ec:	andeq	r1, r0, r4, lsl r1
   134f0:	strdeq	r3, [r0], -fp
   134f4:	strdeq	r3, [r0], -r0
   134f8:	andeq	r3, r0, r3, lsl #26
   134fc:	andeq	r3, r0, r5, lsl #26
   13500:	ldrdeq	r3, [r0], -r0
   13504:	andeq	r3, r0, r3, ror #25
   13508:			; <UNDEFINED> instruction: 0x00003cbb
   1350c:			; <UNDEFINED> instruction: 0x00003cb0
   13510:	strdeq	r3, [r0], -r0
   13514:	push	{r4, sl, fp, lr}
   13518:	add	fp, sp, #8
   1351c:	mov	r4, r0
   13520:	ldr	r0, [r0, #8]
   13524:	bl	10bbc <free@plt>
   13528:	mov	r0, r4
   1352c:	pop	{r4, sl, fp, lr}
   13530:	b	10bbc <free@plt>
   13534:	push	{r4, r5, r6, sl, fp, lr}
   13538:	add	fp, sp, #16
   1353c:	mov	r5, r1
   13540:	mov	r6, r0
   13544:	mov	r0, #1
   13548:	mov	r1, #16
   1354c:	mov	r4, r2
   13550:	bl	11950 <__assert_fail@plt+0xc08>
   13554:	str	r4, [r0, #12]
   13558:	mov	r1, r0
   1355c:	strb	r5, [r0, #8]
   13560:	mov	r0, r6
   13564:	pop	{r4, r5, r6, sl, fp, lr}
   13568:	b	112b4 <__assert_fail@plt+0x56c>
   1356c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13570:	add	fp, sp, #28
   13574:	sub	sp, sp, #124	; 0x7c
   13578:	mov	r4, r2
   1357c:	mov	r2, r1
   13580:	cmp	r1, #0
   13584:	str	r0, [sp, #16]
   13588:	bne	13598 <error@@Base+0x1778>
   1358c:	ldrb	r0, [r4]
   13590:	cmp	r0, #0
   13594:	bne	138d8 <error@@Base+0x1ab8>
   13598:	ldr	r0, [sp, #16]
   1359c:	ldr	r0, [r0, #4]
   135a0:	str	r0, [sp, #4]
   135a4:	mov	r0, r2
   135a8:	ldr	r1, [pc, #828]	; 138ec <error@@Base+0x1acc>
   135ac:	add	r1, pc, r1
   135b0:	bl	119f8 <__assert_fail@plt+0xcb0>
   135b4:	mov	r6, r0
   135b8:	ldrb	r0, [r4]
   135bc:	cmp	r0, #0
   135c0:	beq	13608 <error@@Base+0x17e8>
   135c4:	add	r0, sp, #20
   135c8:	mov	r1, #99	; 0x63
   135cc:	mov	r2, r6
   135d0:	bl	10bd4 <fgets@plt>
   135d4:	cmp	r0, #0
   135d8:	beq	135f8 <error@@Base+0x17d8>
   135dc:	ldr	r1, [pc, #780]	; 138f0 <error@@Base+0x1ad0>
   135e0:	add	r0, sp, #20
   135e4:	mov	r2, #51	; 0x33
   135e8:	add	r1, pc, r1
   135ec:	bl	10ca0 <bcmp@plt>
   135f0:	cmp	r0, #0
   135f4:	beq	13864 <error@@Base+0x1a44>
   135f8:	mov	r0, r6
   135fc:	bl	10bf8 <rewind@plt>
   13600:	mov	r5, #0
   13604:	strb	r5, [r4, #11]
   13608:	ldr	r9, [r4, #4]
   1360c:	ldrb	r8, [r4, #1]
   13610:	mov	r0, r6
   13614:	str	r4, [sp, #8]
   13618:	cmp	r9, #0
   1361c:	movweq	r9, #94	; 0x5e
   13620:	bl	10d3c <getc@plt>
   13624:	cmn	r0, #1
   13628:	beq	136f4 <error@@Base+0x18d4>
   1362c:	add	r1, sp, #20
   13630:	mov	sl, #0
   13634:	sub	r4, fp, #32
   13638:	add	r1, r1, #1
   1363c:	str	r1, [sp, #12]
   13640:	b	1367c <error@@Base+0x185c>
   13644:	mov	r0, #1
   13648:	mov	r1, #16
   1364c:	bl	11950 <__assert_fail@plt+0xc08>
   13650:	str	r5, [r0, #12]
   13654:	mov	r1, r0
   13658:	strb	sl, [r0, #8]
   1365c:	ldr	r0, [sp, #16]
   13660:	bl	112b4 <__assert_fail@plt+0x56c>
   13664:	mov	r7, #0
   13668:	mov	r0, r6
   1366c:	bl	10d3c <getc@plt>
   13670:	cmn	r0, #1
   13674:	mov	sl, r7
   13678:	beq	136f4 <error@@Base+0x18d4>
   1367c:	ldr	r1, [pc, #628]	; 138f8 <error@@Base+0x1ad8>
   13680:	ldr	r1, [pc, r1]
   13684:	add	r1, r1, r0
   13688:	ldrsb	r5, [r1]
   1368c:	cmp	r5, #0
   13690:	ble	138b8 <error@@Base+0x1a98>
   13694:	cmp	r5, #1
   13698:	strb	r0, [sp, #20]
   1369c:	beq	136c0 <error@@Base+0x18a0>
   136a0:	ldr	r0, [sp, #12]
   136a4:	sub	r7, r5, #1
   136a8:	mov	r1, #1
   136ac:	mov	r3, r6
   136b0:	mov	r2, r7
   136b4:	bl	10c34 <fread@plt>
   136b8:	cmp	r0, r7
   136bc:	bne	138cc <error@@Base+0x1aac>
   136c0:	add	r0, sp, #20
   136c4:	mov	r1, #4
   136c8:	mov	r2, r4
   136cc:	bl	10c40 <utf8proc_iterate@plt>
   136d0:	cmp	r0, r5
   136d4:	bne	138c4 <error@@Base+0x1aa4>
   136d8:	ldr	r5, [fp, #-32]	; 0xffffffe0
   136dc:	cmp	r8, #0
   136e0:	beq	13644 <error@@Base+0x1824>
   136e4:	mov	r7, #1
   136e8:	cmp	r5, r9
   136ec:	beq	13668 <error@@Base+0x1848>
   136f0:	b	13644 <error@@Base+0x1824>
   136f4:	mov	r0, r6
   136f8:	bl	11a80 <__assert_fail@plt+0xd38>
   136fc:	ldr	r8, [sp, #8]
   13700:	ldr	r9, [sp, #4]
   13704:	ldrb	r0, [r8, #9]
   13708:	cmp	r0, #0
   1370c:	beq	13820 <error@@Base+0x1a00>
   13710:	cmp	r9, #0
   13714:	ldr	r0, [sp, #16]
   13718:	addne	r0, r9, #4
   1371c:	ldr	r6, [r0]
   13720:	cmp	r6, #0
   13724:	beq	13820 <error@@Base+0x1a00>
   13728:	mov	r5, #32
   1372c:	mov	r7, r6
   13730:	b	13744 <error@@Base+0x1924>
   13734:	str	r5, [r7, #12]
   13738:	ldr	r7, [r7, #4]
   1373c:	cmp	r7, #0
   13740:	beq	13794 <error@@Base+0x1974>
   13744:	ldr	r4, [r7, #12]
   13748:	mov	r0, r4
   1374c:	bl	10bc8 <utf8proc_get_property@plt>
   13750:	cmp	r4, #10
   13754:	ble	13770 <error@@Base+0x1950>
   13758:	sub	r1, r4, #11
   1375c:	cmp	r1, #3
   13760:	bcc	13734 <error@@Base+0x1914>
   13764:	cmp	r4, #160	; 0xa0
   13768:	beq	13734 <error@@Base+0x1914>
   1376c:	b	13780 <error@@Base+0x1960>
   13770:	cmp	r4, #9
   13774:	beq	13734 <error@@Base+0x1914>
   13778:	cmp	r4, #10
   1377c:	beq	13738 <error@@Base+0x1918>
   13780:	ldrsh	r0, [r0]
   13784:	sub	r0, r0, #23
   13788:	cmp	r0, #2
   1378c:	strls	r5, [r7, #12]
   13790:	b	13738 <error@@Base+0x1918>
   13794:	mov	r4, #0
   13798:	b	137c8 <error@@Base+0x19a8>
   1379c:	tst	r4, #255	; 0xff
   137a0:	cmpne	r5, #0
   137a4:	bne	137f4 <error@@Base+0x19d4>
   137a8:	ldr	r0, [sp, #16]
   137ac:	mov	r1, r6
   137b0:	bl	113ac <__assert_fail@plt+0x664>
   137b4:	mov	r0, r6
   137b8:	bl	10bbc <free@plt>
   137bc:	cmp	r5, #0
   137c0:	mov	r6, r5
   137c4:	beq	13820 <error@@Base+0x1a00>
   137c8:	ldr	r1, [r6, #12]
   137cc:	ldr	r5, [r6, #4]
   137d0:	cmp	r1, #32
   137d4:	beq	1379c <error@@Base+0x197c>
   137d8:	subs	r0, r1, #10
   137dc:	movwne	r0, #1
   137e0:	tst	r4, #255	; 0xff
   137e4:	cmpeq	r1, #10
   137e8:	beq	137a8 <error@@Base+0x1988>
   137ec:	mov	r4, r0
   137f0:	b	137bc <error@@Base+0x199c>
   137f4:	ldr	r1, [r5, #12]
   137f8:	cmp	r1, #10
   137fc:	beq	137a8 <error@@Base+0x1988>
   13800:	mov	r0, #1
   13804:	cmp	r1, #32
   13808:	bne	137ec <error@@Base+0x19cc>
   1380c:	ldrb	r0, [r6, #8]
   13810:	ldrb	r1, [r5, #8]
   13814:	orr	r0, r1, r0
   13818:	strb	r0, [r5, #8]
   1381c:	b	137a8 <error@@Base+0x1988>
   13820:	ldrb	r0, [r8, #10]
   13824:	cmp	r0, #0
   13828:	beq	1385c <error@@Base+0x1a3c>
   1382c:	cmp	r9, #0
   13830:	ldr	r0, [sp, #16]
   13834:	addne	r0, r9, #4
   13838:	ldr	r4, [r0]
   1383c:	cmp	r4, #0
   13840:	beq	1385c <error@@Base+0x1a3c>
   13844:	ldr	r0, [r4, #12]
   13848:	bl	10c10 <utf8proc_tolower@plt>
   1384c:	str	r0, [r4, #12]
   13850:	ldr	r4, [r4, #4]
   13854:	cmp	r4, #0
   13858:	bne	13844 <error@@Base+0x1a24>
   1385c:	sub	sp, fp, #28
   13860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13864:	ldr	r8, [pc, #136]	; 138f4 <error@@Base+0x1ad4>
   13868:	mov	r7, #0
   1386c:	add	r9, sp, #20
   13870:	mov	r5, #1
   13874:	add	r8, pc, r8
   13878:	mov	r0, r9
   1387c:	mov	r1, #99	; 0x63
   13880:	mov	r2, r6
   13884:	bl	10bd4 <fgets@plt>
   13888:	cmp	r0, #0
   1388c:	beq	13604 <error@@Base+0x17e4>
   13890:	mov	r0, r9
   13894:	mov	r1, r8
   13898:	mov	r2, #56	; 0x38
   1389c:	bl	10ca0 <bcmp@plt>
   138a0:	cmp	r0, #0
   138a4:	addeq	r7, r7, #1
   138a8:	uxth	r0, r7
   138ac:	cmp	r0, #2
   138b0:	bcc	13878 <error@@Base+0x1a58>
   138b4:	b	13604 <error@@Base+0x17e4>
   138b8:	ldr	r0, [pc, #68]	; 13904 <error@@Base+0x1ae4>
   138bc:	add	r0, pc, r0
   138c0:	bl	11e20 <error@@Base>
   138c4:	bl	10d0c <utf8proc_errmsg@plt>
   138c8:	bl	11e20 <error@@Base>
   138cc:	ldr	r0, [pc, #52]	; 13908 <error@@Base+0x1ae8>
   138d0:	add	r0, pc, r0
   138d4:	bl	11e20 <error@@Base>
   138d8:	ldr	r0, [pc, #28]	; 138fc <error@@Base+0x1adc>
   138dc:	ldr	r1, [pc, #28]	; 13900 <error@@Base+0x1ae0>
   138e0:	add	r0, pc, r0
   138e4:	add	r1, pc, r1
   138e8:	bl	11e70 <error@@Base+0x50>
   138ec:	andeq	r3, r0, sl, lsl #26
   138f0:	andeq	r3, r0, r8, asr #24
   138f4:	strdeq	r3, [r0], -r4
   138f8:	andeq	r4, r1, ip, asr #20
   138fc:	andeq	r3, r0, ip, lsl #18
   13900:	andeq	r3, r0, r8, lsl r9
   13904:	andeq	r3, r0, r4, ror #19
   13908:	andeq	r3, r0, r8, ror #19
   1390c:	push	{fp, lr}
   13910:	mov	fp, sp
   13914:	bl	10be0 <utf8proc_encode_char@plt>
   13918:	cmp	r0, #0
   1391c:	sxtbgt	r0, r0
   13920:	popgt	{fp, pc}
   13924:	ldr	r0, [pc, #4]	; 13930 <error@@Base+0x1b10>
   13928:	add	r0, pc, r0
   1392c:	bl	11e20 <error@@Base>
   13930:	ldrdeq	r3, [r0], -lr
   13934:	push	{r4, r5, r6, r7, fp, lr}
   13938:	add	fp, sp, #16
   1393c:	mov	r6, r3
   13940:	mov	r4, r2
   13944:	mov	r5, r1
   13948:	tst	r0, #255	; 0xff
   1394c:	beq	13994 <error@@Base+0x1b74>
   13950:	mov	r0, #94	; 0x5e
   13954:	mov	r1, r4
   13958:	bl	10be0 <utf8proc_encode_char@plt>
   1395c:	cmp	r0, #0
   13960:	ble	13a0c <error@@Base+0x1bec>
   13964:	sxtb	r7, r0
   13968:	cmp	r5, #10
   1396c:	bne	139a0 <error@@Base+0x1b80>
   13970:	ldr	r0, [pc, #224]	; 13a58 <error@@Base+0x1c38>
   13974:	ldr	r1, [pc, #224]	; 13a5c <error@@Base+0x1c3c>
   13978:	tst	r6, #255	; 0xff
   1397c:	add	r0, pc, r0
   13980:	add	r1, pc, r1
   13984:	moveq	r1, r0
   13988:	add	r0, r4, r7
   1398c:	pop	{r4, r5, r6, r7, fp, lr}
   13990:	b	10d00 <sprintf@plt>
   13994:	mov	r7, #0
   13998:	cmp	r5, #10
   1399c:	beq	13970 <error@@Base+0x1b50>
   139a0:	mov	r0, r5
   139a4:	bl	10bc8 <utf8proc_get_property@plt>
   139a8:	cmp	r5, #32
   139ac:	beq	139c0 <error@@Base+0x1ba0>
   139b0:	ldrsh	r0, [r0]
   139b4:	sub	r1, r0, #1
   139b8:	cmp	r1, #22
   139bc:	bcs	13a18 <error@@Base+0x1bf8>
   139c0:	mov	r0, r5
   139c4:	bl	10cac <utf8proc_category@plt>
   139c8:	sub	r0, r0, #6
   139cc:	cmp	r0, #2
   139d0:	bhi	139ec <error@@Base+0x1bcc>
   139d4:	add	r1, r4, r7
   139d8:	movw	r0, #9676	; 0x25cc
   139dc:	bl	10be0 <utf8proc_encode_char@plt>
   139e0:	cmp	r0, #0
   139e4:	ble	13a0c <error@@Base+0x1bec>
   139e8:	sxtab	r7, r7, r0
   139ec:	add	r1, r4, r7
   139f0:	mov	r0, r5
   139f4:	bl	10be0 <utf8proc_encode_char@plt>
   139f8:	cmp	r0, #0
   139fc:	sxtabgt	r0, r7, r0
   13a00:	movgt	r1, #0
   13a04:	strbgt	r1, [r4, r0]
   13a08:	popgt	{r4, r5, r6, r7, fp, pc}
   13a0c:	ldr	r0, [pc, #64]	; 13a54 <error@@Base+0x1c34>
   13a10:	add	r0, pc, r0
   13a14:	bl	11e20 <error@@Base>
   13a18:	cmp	r0, #29
   13a1c:	beq	139c0 <error@@Base+0x1ba0>
   13a20:	add	r0, r4, r7
   13a24:	cmp	r5, #255	; 0xff
   13a28:	bhi	13a38 <error@@Base+0x1c18>
   13a2c:	ldr	r1, [pc, #24]	; 13a4c <error@@Base+0x1c2c>
   13a30:	add	r1, pc, r1
   13a34:	b	13a40 <error@@Base+0x1c20>
   13a38:	ldr	r1, [pc, #16]	; 13a50 <error@@Base+0x1c30>
   13a3c:	add	r1, pc, r1
   13a40:	mov	r2, r5
   13a44:	pop	{r4, r5, r6, r7, fp, lr}
   13a48:	b	10d00 <sprintf@plt>
   13a4c:	strdeq	r3, [r0], -r2
   13a50:	andeq	r3, r0, sp, ror #15
   13a54:	strdeq	r3, [r0], -r6
   13a58:	andeq	r0, r0, r5, ror r3
   13a5c:	muleq	r0, sp, r8
   13a60:	push	{r4, r5, r6, r7, fp, lr}
   13a64:	add	fp, sp, #16
   13a68:	sub	sp, sp, #16
   13a6c:	mov	r6, r2
   13a70:	mov	r2, r1
   13a74:	ldr	r1, [pc, #180]	; 13b30 <error@@Base+0x1d10>
   13a78:	mov	r5, r0
   13a7c:	mov	r0, r2
   13a80:	add	r1, pc, r1
   13a84:	bl	119f8 <__assert_fail@plt+0xcb0>
   13a88:	mov	r4, r0
   13a8c:	cmp	r6, #0
   13a90:	beq	13ae4 <error@@Base+0x1cc4>
   13a94:	ldr	r0, [pc, #152]	; 13b34 <error@@Base+0x1d14>
   13a98:	mov	r1, #55	; 0x37
   13a9c:	mov	r2, #1
   13aa0:	mov	r3, r4
   13aa4:	add	r0, pc, r0
   13aa8:	bl	10c28 <fwrite@plt>
   13aac:	ldr	r7, [pc, #132]	; 13b38 <error@@Base+0x1d18>
   13ab0:	mov	r1, #55	; 0x37
   13ab4:	mov	r2, #1
   13ab8:	mov	r3, r4
   13abc:	add	r7, pc, r7
   13ac0:	mov	r0, r7
   13ac4:	bl	10c28 <fwrite@plt>
   13ac8:	mov	r0, r4
   13acc:	blx	r6
   13ad0:	mov	r0, r7
   13ad4:	mov	r1, #55	; 0x37
   13ad8:	mov	r2, #1
   13adc:	mov	r3, r4
   13ae0:	bl	10c28 <fwrite@plt>
   13ae4:	ldr	r6, [r5]
   13ae8:	cmp	r6, #0
   13aec:	beq	13b20 <error@@Base+0x1d00>
   13af0:	add	r5, sp, #7
   13af4:	ldr	r1, [r6, #12]
   13af8:	ldrb	r0, [r6, #8]
   13afc:	mov	r2, r5
   13b00:	mov	r3, #0
   13b04:	bl	13934 <error@@Base+0x1b14>
   13b08:	mov	r0, r5
   13b0c:	mov	r1, r4
   13b10:	bl	10d18 <fputs@plt>
   13b14:	ldr	r6, [r6, #4]
   13b18:	cmp	r6, #0
   13b1c:	bne	13af4 <error@@Base+0x1cd4>
   13b20:	mov	r0, r4
   13b24:	bl	11a80 <__assert_fail@plt+0xd38>
   13b28:	sub	sp, fp, #16
   13b2c:	pop	{r4, r5, r6, r7, fp, pc}
   13b30:	andeq	r0, r0, sp, lsl #6
   13b34:	andeq	r3, r0, ip, lsl #15
   13b38:	andeq	r3, r0, ip, lsr #15
   13b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b40:	add	fp, sp, #28
   13b44:	sub	sp, sp, #4
   13b48:	mov	r9, #0
   13b4c:	mov	sl, r0
   13b50:	str	r9, [sp]
   13b54:	ldrb	r0, [r1]
   13b58:	cmp	r0, #0
   13b5c:	beq	13bbc <error@@Base+0x1d9c>
   13b60:	mov	r4, r1
   13b64:	mov	r8, sp
   13b68:	mov	r7, #1
   13b6c:	mov	r0, r4
   13b70:	mvn	r1, #0
   13b74:	mov	r2, r8
   13b78:	bl	10c40 <utf8proc_iterate@plt>
   13b7c:	cmp	r0, #1
   13b80:	blt	13bc4 <error@@Base+0x1da4>
   13b84:	ldr	r5, [sp]
   13b88:	mov	r6, r0
   13b8c:	mov	r0, #1
   13b90:	mov	r1, #16
   13b94:	bl	11950 <__assert_fail@plt+0xc08>
   13b98:	str	r5, [r0, #12]
   13b9c:	mov	r1, r0
   13ba0:	strb	r9, [r0, #8]
   13ba4:	mov	r0, sl
   13ba8:	bl	112b4 <__assert_fail@plt+0x56c>
   13bac:	ldrb	r0, [r4, r6]!
   13bb0:	cmp	r0, #0
   13bb4:	bne	13b6c <error@@Base+0x1d4c>
   13bb8:	b	13bc8 <error@@Base+0x1da8>
   13bbc:	mov	r7, #1
   13bc0:	b	13bc8 <error@@Base+0x1da8>
   13bc4:	mov	r7, #0
   13bc8:	mov	r0, r7
   13bcc:	sub	sp, fp, #28
   13bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bd8:	mov	r7, r0
   13bdc:	ldr	r6, [pc, #72]	; 13c2c <error@@Base+0x1e0c>
   13be0:	ldr	r5, [pc, #72]	; 13c30 <error@@Base+0x1e10>
   13be4:	add	r6, pc, r6
   13be8:	add	r5, pc, r5
   13bec:	sub	r6, r6, r5
   13bf0:	mov	r8, r1
   13bf4:	mov	r9, r2
   13bf8:	bl	10b60 <calloc@plt-0x20>
   13bfc:	asrs	r6, r6, #2
   13c00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c04:	mov	r4, #0
   13c08:	add	r4, r4, #1
   13c0c:	ldr	r3, [r5], #4
   13c10:	mov	r2, r9
   13c14:	mov	r1, r8
   13c18:	mov	r0, r7
   13c1c:	blx	r3
   13c20:	cmp	r6, r4
   13c24:	bne	13c08 <error@@Base+0x1de8>
   13c28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c2c:	andeq	r4, r1, r0, lsl r3
   13c30:	andeq	r4, r1, r8, lsl #6
   13c34:	bx	lr

Disassembly of section .fini:

00013c38 <.fini>:
   13c38:	push	{r3, lr}
   13c3c:	pop	{r3, pc}
