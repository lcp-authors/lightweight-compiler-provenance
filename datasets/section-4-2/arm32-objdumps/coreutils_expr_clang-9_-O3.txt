
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011368 <.init>:
   11368:	push	{r3, lr}
   1136c:	bl	1174c <__assert_fail@plt+0x4c>
   11370:	pop	{r3, pc}

Disassembly of section .plt:

00011374 <pthread_mutex_unlock@plt-0x14>:
   11374:	push	{lr}		; (str lr, [sp, #-4]!)
   11378:	ldr	lr, [pc, #4]	; 11384 <pthread_mutex_unlock@plt-0x4>
   1137c:	add	lr, pc, lr
   11380:	ldr	pc, [lr, #8]!
   11384:	andeq	ip, r2, ip, ror ip

00011388 <pthread_mutex_unlock@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #44, 20	; 0x2c000
   11390:	ldr	pc, [ip, #3196]!	; 0xc7c

00011394 <calloc@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #44, 20	; 0x2c000
   1139c:	ldr	pc, [ip, #3188]!	; 0xc74

000113a0 <fputs_unlocked@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #44, 20	; 0x2c000
   113a8:	ldr	pc, [ip, #3180]!	; 0xc6c

000113ac <wctype@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #44, 20	; 0x2c000
   113b4:	ldr	pc, [ip, #3172]!	; 0xc64

000113b8 <wcrtomb@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #44, 20	; 0x2c000
   113c0:	ldr	pc, [ip, #3164]!	; 0xc5c

000113c4 <iswctype@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #44, 20	; 0x2c000
   113cc:	ldr	pc, [ip, #3156]!	; 0xc54

000113d0 <strcmp@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #44, 20	; 0x2c000
   113d8:	ldr	pc, [ip, #3148]!	; 0xc4c

000113dc <__gmpz_tdiv_q@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #44, 20	; 0x2c000
   113e4:	ldr	pc, [ip, #3140]!	; 0xc44

000113e8 <strcspn@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #44, 20	; 0x2c000
   113f0:	ldr	pc, [ip, #3132]!	; 0xc3c

000113f4 <pthread_mutex_destroy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #44, 20	; 0x2c000
   113fc:	ldr	pc, [ip, #3124]!	; 0xc34

00011400 <fflush@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #44, 20	; 0x2c000
   11408:	ldr	pc, [ip, #3116]!	; 0xc2c

0001140c <wcwidth@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #44, 20	; 0x2c000
   11414:	ldr	pc, [ip, #3108]!	; 0xc24

00011418 <memmove@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #44, 20	; 0x2c000
   11420:	ldr	pc, [ip, #3100]!	; 0xc1c

00011424 <free@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #44, 20	; 0x2c000
   1142c:	ldr	pc, [ip, #3092]!	; 0xc14

00011430 <pthread_mutex_lock@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #44, 20	; 0x2c000
   11438:	ldr	pc, [ip, #3084]!	; 0xc0c

0001143c <_exit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #44, 20	; 0x2c000
   11444:	ldr	pc, [ip, #3076]!	; 0xc04

00011448 <memcpy@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #44, 20	; 0x2c000
   11450:	ldr	pc, [ip, #3068]!	; 0xbfc

00011454 <__gmpz_sub@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #44, 20	; 0x2c000
   1145c:	ldr	pc, [ip, #3060]!	; 0xbf4

00011460 <pthread_mutex_init@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #44, 20	; 0x2c000
   11468:	ldr	pc, [ip, #3052]!	; 0xbec

0001146c <towlower@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #44, 20	; 0x2c000
   11474:	ldr	pc, [ip, #3044]!	; 0xbe4

00011478 <mbsinit@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #44, 20	; 0x2c000
   11480:	ldr	pc, [ip, #3036]!	; 0xbdc

00011484 <dcgettext@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #44, 20	; 0x2c000
   1148c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011490 <__gmpz_get_str@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #44, 20	; 0x2c000
   11498:	ldr	pc, [ip, #3020]!	; 0xbcc

0001149c <realloc@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #44, 20	; 0x2c000
   114a4:	ldr	pc, [ip, #3012]!	; 0xbc4

000114a8 <__gmpz_mul@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #44, 20	; 0x2c000
   114b0:	ldr	pc, [ip, #3004]!	; 0xbbc

000114b4 <textdomain@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #44, 20	; 0x2c000
   114bc:	ldr	pc, [ip, #2996]!	; 0xbb4

000114c0 <iswcntrl@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #44, 20	; 0x2c000
   114c8:	ldr	pc, [ip, #2988]!	; 0xbac

000114cc <__gmpz_out_str@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #44, 20	; 0x2c000
   114d4:	ldr	pc, [ip, #2980]!	; 0xba4

000114d8 <iswprint@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #44, 20	; 0x2c000
   114e0:	ldr	pc, [ip, #2972]!	; 0xb9c

000114e4 <fwrite@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #44, 20	; 0x2c000
   114ec:	ldr	pc, [ip, #2964]!	; 0xb94

000114f0 <lseek64@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #44, 20	; 0x2c000
   114f8:	ldr	pc, [ip, #2956]!	; 0xb8c

000114fc <__ctype_get_mb_cur_max@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #44, 20	; 0x2c000
   11504:	ldr	pc, [ip, #2948]!	; 0xb84

00011508 <__fpending@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #44, 20	; 0x2c000
   11510:	ldr	pc, [ip, #2940]!	; 0xb7c

00011514 <mbrtowc@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #44, 20	; 0x2c000
   1151c:	ldr	pc, [ip, #2932]!	; 0xb74

00011520 <error@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #44, 20	; 0x2c000
   11528:	ldr	pc, [ip, #2924]!	; 0xb6c

0001152c <strcoll@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #44, 20	; 0x2c000
   11534:	ldr	pc, [ip, #2916]!	; 0xb64

00011538 <puts@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #44, 20	; 0x2c000
   11540:	ldr	pc, [ip, #2908]!	; 0xb5c

00011544 <malloc@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #44, 20	; 0x2c000
   1154c:	ldr	pc, [ip, #2900]!	; 0xb54

00011550 <__libc_start_main@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #44, 20	; 0x2c000
   11558:	ldr	pc, [ip, #2892]!	; 0xb4c

0001155c <__freading@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #44, 20	; 0x2c000
   11564:	ldr	pc, [ip, #2884]!	; 0xb44

00011568 <__ctype_tolower_loc@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #44, 20	; 0x2c000
   11570:	ldr	pc, [ip, #2876]!	; 0xb3c

00011574 <__ctype_toupper_loc@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #44, 20	; 0x2c000
   1157c:	ldr	pc, [ip, #2868]!	; 0xb34

00011580 <__gmon_start__@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #44, 20	; 0x2c000
   11588:	ldr	pc, [ip, #2860]!	; 0xb2c

0001158c <getopt_long@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #44, 20	; 0x2c000
   11594:	ldr	pc, [ip, #2852]!	; 0xb24

00011598 <__ctype_b_loc@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #44, 20	; 0x2c000
   115a0:	ldr	pc, [ip, #2844]!	; 0xb1c

000115a4 <exit@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #44, 20	; 0x2c000
   115ac:	ldr	pc, [ip, #2836]!	; 0xb14

000115b0 <bcmp@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #44, 20	; 0x2c000
   115b8:	ldr	pc, [ip, #2828]!	; 0xb0c

000115bc <strlen@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #44, 20	; 0x2c000
   115c4:	ldr	pc, [ip, #2820]!	; 0xb04

000115c8 <strchr@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #44, 20	; 0x2c000
   115d0:	ldr	pc, [ip, #2812]!	; 0xafc

000115d4 <__gmpz_tdiv_r@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #44, 20	; 0x2c000
   115dc:	ldr	pc, [ip, #2804]!	; 0xaf4

000115e0 <__gmpz_clear@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #44, 20	; 0x2c000
   115e8:	ldr	pc, [ip, #2796]!	; 0xaec

000115ec <__errno_location@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #44, 20	; 0x2c000
   115f4:	ldr	pc, [ip, #2788]!	; 0xae4

000115f8 <iswalnum@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #44, 20	; 0x2c000
   11600:	ldr	pc, [ip, #2780]!	; 0xadc

00011604 <__cxa_atexit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #44, 20	; 0x2c000
   1160c:	ldr	pc, [ip, #2772]!	; 0xad4

00011610 <memset@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #44, 20	; 0x2c000
   11618:	ldr	pc, [ip, #2764]!	; 0xacc

0001161c <btowc@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #44, 20	; 0x2c000
   11624:	ldr	pc, [ip, #2756]!	; 0xac4

00011628 <__printf_chk@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #44, 20	; 0x2c000
   11630:	ldr	pc, [ip, #2748]!	; 0xabc

00011634 <fileno@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #44, 20	; 0x2c000
   1163c:	ldr	pc, [ip, #2740]!	; 0xab4

00011640 <__fprintf_chk@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #44, 20	; 0x2c000
   11648:	ldr	pc, [ip, #2732]!	; 0xaac

0001164c <memchr@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #44, 20	; 0x2c000
   11654:	ldr	pc, [ip, #2724]!	; 0xaa4

00011658 <fclose@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #44, 20	; 0x2c000
   11660:	ldr	pc, [ip, #2716]!	; 0xa9c

00011664 <fseeko64@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #44, 20	; 0x2c000
   1166c:	ldr	pc, [ip, #2708]!	; 0xa94

00011670 <__gmpz_init_set_ui@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #44, 20	; 0x2c000
   11678:	ldr	pc, [ip, #2700]!	; 0xa8c

0001167c <__overflow@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #44, 20	; 0x2c000
   11684:	ldr	pc, [ip, #2692]!	; 0xa84

00011688 <setlocale@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #44, 20	; 0x2c000
   11690:	ldr	pc, [ip, #2684]!	; 0xa7c

00011694 <strrchr@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #44, 20	; 0x2c000
   1169c:	ldr	pc, [ip, #2676]!	; 0xa74

000116a0 <nl_langinfo@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #44, 20	; 0x2c000
   116a8:	ldr	pc, [ip, #2668]!	; 0xa6c

000116ac <__gmpz_add@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #44, 20	; 0x2c000
   116b4:	ldr	pc, [ip, #2660]!	; 0xa64

000116b8 <__gmpz_init_set_str@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #44, 20	; 0x2c000
   116c0:	ldr	pc, [ip, #2652]!	; 0xa5c

000116c4 <bindtextdomain@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #44, 20	; 0x2c000
   116cc:	ldr	pc, [ip, #2644]!	; 0xa54

000116d0 <towupper@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #44, 20	; 0x2c000
   116d8:	ldr	pc, [ip, #2636]!	; 0xa4c

000116dc <strncmp@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #44, 20	; 0x2c000
   116e4:	ldr	pc, [ip, #2628]!	; 0xa44

000116e8 <abort@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #44, 20	; 0x2c000
   116f0:	ldr	pc, [ip, #2620]!	; 0xa3c

000116f4 <__mempcpy_chk@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #44, 20	; 0x2c000
   116fc:	ldr	pc, [ip, #2612]!	; 0xa34

00011700 <__assert_fail@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #44, 20	; 0x2c000
   11708:	ldr	pc, [ip, #2604]!	; 0xa2c

Disassembly of section .text:

00011710 <.text>:
   11710:	mov	fp, #0
   11714:	mov	lr, #0
   11718:	pop	{r1}		; (ldr r1, [sp], #4)
   1171c:	mov	r2, sp
   11720:	push	{r2}		; (str r2, [sp, #-4]!)
   11724:	push	{r0}		; (str r0, [sp, #-4]!)
   11728:	ldr	ip, [pc, #16]	; 11740 <__assert_fail@plt+0x40>
   1172c:	push	{ip}		; (str ip, [sp, #-4]!)
   11730:	ldr	r0, [pc, #12]	; 11744 <__assert_fail@plt+0x44>
   11734:	ldr	r3, [pc, #12]	; 11748 <__assert_fail@plt+0x48>
   11738:	bl	11550 <__libc_start_main@plt>
   1173c:	bl	116e8 <abort@plt>
   11740:	andeq	fp, r2, r0, asr #30
   11744:	andeq	r1, r1, ip, lsr fp
   11748:	andeq	fp, r2, r0, ror #29
   1174c:	ldr	r3, [pc, #20]	; 11768 <__assert_fail@plt+0x68>
   11750:	ldr	r2, [pc, #20]	; 1176c <__assert_fail@plt+0x6c>
   11754:	add	r3, pc, r3
   11758:	ldr	r2, [r3, r2]
   1175c:	cmp	r2, #0
   11760:	bxeq	lr
   11764:	b	11580 <__gmon_start__@plt>
   11768:	andeq	ip, r2, r4, lsr #17
   1176c:	andeq	r0, r0, r8, lsr r1
   11770:	ldr	r0, [pc, #24]	; 11790 <__assert_fail@plt+0x90>
   11774:	ldr	r3, [pc, #24]	; 11794 <__assert_fail@plt+0x94>
   11778:	cmp	r3, r0
   1177c:	bxeq	lr
   11780:	ldr	r3, [pc, #16]	; 11798 <__assert_fail@plt+0x98>
   11784:	cmp	r3, #0
   11788:	bxeq	lr
   1178c:	bx	r3
   11790:	muleq	r3, r0, r1
   11794:	muleq	r3, r0, r1
   11798:	andeq	r0, r0, r0
   1179c:	ldr	r0, [pc, #36]	; 117c8 <__assert_fail@plt+0xc8>
   117a0:	ldr	r1, [pc, #36]	; 117cc <__assert_fail@plt+0xcc>
   117a4:	sub	r1, r1, r0
   117a8:	asr	r1, r1, #2
   117ac:	add	r1, r1, r1, lsr #31
   117b0:	asrs	r1, r1, #1
   117b4:	bxeq	lr
   117b8:	ldr	r3, [pc, #16]	; 117d0 <__assert_fail@plt+0xd0>
   117bc:	cmp	r3, #0
   117c0:	bxeq	lr
   117c4:	bx	r3
   117c8:	muleq	r3, r0, r1
   117cc:	muleq	r3, r0, r1
   117d0:	andeq	r0, r0, r0
   117d4:	push	{r4, lr}
   117d8:	ldr	r4, [pc, #24]	; 117f8 <__assert_fail@plt+0xf8>
   117dc:	ldrb	r3, [r4]
   117e0:	cmp	r3, #0
   117e4:	popne	{r4, pc}
   117e8:	bl	11770 <__assert_fail@plt+0x70>
   117ec:	mov	r3, #1
   117f0:	strb	r3, [r4]
   117f4:	pop	{r4, pc}
   117f8:	andeq	lr, r3, ip, lsr #3
   117fc:	b	1179c <__assert_fail@plt+0x9c>
   11800:	push	{fp, lr}
   11804:	mov	fp, sp
   11808:	sub	sp, sp, #56	; 0x38
   1180c:	mov	r4, r0
   11810:	cmp	r0, #0
   11814:	bne	11af8 <__assert_fail@plt+0x3f8>
   11818:	movw	r1, #49043	; 0xbf93
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #2
   11828:	bl	11484 <dcgettext@plt>
   1182c:	mov	r1, r0
   11830:	movw	r0, #57788	; 0xe1bc
   11834:	movt	r0, #3
   11838:	ldr	r2, [r0]
   1183c:	mov	r0, #1
   11840:	mov	r3, r2
   11844:	bl	11628 <__printf_chk@plt>
   11848:	movw	r7, #57764	; 0xe1a4
   1184c:	movt	r7, #3
   11850:	ldr	r0, [r7]
   11854:	ldr	r1, [r0, #20]
   11858:	ldr	r2, [r0, #24]
   1185c:	cmp	r1, r2
   11860:	bcs	11aec <__assert_fail@plt+0x3ec>
   11864:	add	r2, r1, #1
   11868:	str	r2, [r0, #20]
   1186c:	mov	r0, #10
   11870:	strb	r0, [r1]
   11874:	movw	r1, #49082	; 0xbfba
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #2
   11884:	bl	11484 <dcgettext@plt>
   11888:	ldr	r1, [r7]
   1188c:	bl	113a0 <fputs_unlocked@plt>
   11890:	movw	r1, #49127	; 0xbfe7
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #2
   118a0:	bl	11484 <dcgettext@plt>
   118a4:	ldr	r1, [r7]
   118a8:	bl	113a0 <fputs_unlocked@plt>
   118ac:	movw	r1, #49181	; 0xc01d
   118b0:	mov	r0, #0
   118b4:	mov	r2, #5
   118b8:	movt	r1, #2
   118bc:	bl	11484 <dcgettext@plt>
   118c0:	ldr	r1, [r7]
   118c4:	bl	113a0 <fputs_unlocked@plt>
   118c8:	movw	r1, #49455	; 0xc12f
   118cc:	mov	r0, #0
   118d0:	mov	r2, #5
   118d4:	movt	r1, #2
   118d8:	bl	11484 <dcgettext@plt>
   118dc:	ldr	r1, [r7]
   118e0:	bl	113a0 <fputs_unlocked@plt>
   118e4:	movw	r1, #49745	; 0xc251
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #2
   118f4:	bl	11484 <dcgettext@plt>
   118f8:	ldr	r1, [r7]
   118fc:	bl	113a0 <fputs_unlocked@plt>
   11900:	movw	r1, #49858	; 0xc2c2
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #2
   11910:	bl	11484 <dcgettext@plt>
   11914:	ldr	r1, [r7]
   11918:	bl	113a0 <fputs_unlocked@plt>
   1191c:	movw	r1, #50045	; 0xc37d
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	movt	r1, #2
   1192c:	bl	11484 <dcgettext@plt>
   11930:	ldr	r1, [r7]
   11934:	bl	113a0 <fputs_unlocked@plt>
   11938:	movw	r1, #50355	; 0xc4b3
   1193c:	mov	r0, #0
   11940:	mov	r2, #5
   11944:	movt	r1, #2
   11948:	bl	11484 <dcgettext@plt>
   1194c:	ldr	r1, [r7]
   11950:	bl	113a0 <fputs_unlocked@plt>
   11954:	movw	r1, #50556	; 0xc57c
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	movt	r1, #2
   11964:	bl	11484 <dcgettext@plt>
   11968:	ldr	r1, [r7]
   1196c:	bl	113a0 <fputs_unlocked@plt>
   11970:	movw	r1, #50848	; 0xc6a0
   11974:	mov	r0, #0
   11978:	mov	r2, #5
   1197c:	movt	r1, #2
   11980:	bl	11484 <dcgettext@plt>
   11984:	ldr	r1, [r7]
   11988:	bl	113a0 <fputs_unlocked@plt>
   1198c:	movw	r0, #51752	; 0xca28
   11990:	mov	r2, #48	; 0x30
   11994:	mov	r6, sp
   11998:	movw	r5, #51004	; 0xc73c
   1199c:	movt	r0, #2
   119a0:	movt	r5, #2
   119a4:	add	r1, r0, #32
   119a8:	add	r3, r0, #16
   119ac:	vld1.64	{d18-d19}, [r0], r2
   119b0:	vld1.64	{d16-d17}, [r1]
   119b4:	vld1.64	{d20-d21}, [r3]
   119b8:	vldr	d22, [r0]
   119bc:	add	r1, r6, #32
   119c0:	add	r0, r6, #16
   119c4:	vst1.64	{d16-d17}, [r1]
   119c8:	movw	r1, #51157	; 0xc7d5
   119cc:	vst1.64	{d20-d21}, [r0]
   119d0:	mov	r0, r6
   119d4:	movt	r1, #2
   119d8:	vst1.64	{d18-d19}, [r0], r2
   119dc:	vstr	d22, [r0]
   119e0:	mov	r0, r5
   119e4:	bl	113d0 <strcmp@plt>
   119e8:	cmp	r0, #0
   119ec:	ldrne	r1, [r6, #8]!
   119f0:	cmpne	r1, #0
   119f4:	bne	119e0 <__assert_fail@plt+0x2e0>
   119f8:	movw	r1, #51252	; 0xc834
   119fc:	ldr	r6, [r6, #4]
   11a00:	mov	r0, #0
   11a04:	mov	r2, #5
   11a08:	movt	r1, #2
   11a0c:	bl	11484 <dcgettext@plt>
   11a10:	movw	r2, #51033	; 0xc759
   11a14:	movw	r3, #51275	; 0xc84b
   11a18:	mov	r1, r0
   11a1c:	mov	r0, #1
   11a20:	movt	r2, #2
   11a24:	movt	r3, #2
   11a28:	bl	11628 <__printf_chk@plt>
   11a2c:	cmp	r6, #0
   11a30:	mov	r0, #5
   11a34:	mov	r1, #0
   11a38:	moveq	r6, r5
   11a3c:	bl	11688 <setlocale@plt>
   11a40:	cmp	r0, #0
   11a44:	beq	11a7c <__assert_fail@plt+0x37c>
   11a48:	movw	r1, #51315	; 0xc873
   11a4c:	mov	r2, #3
   11a50:	movt	r1, #2
   11a54:	bl	116dc <strncmp@plt>
   11a58:	cmp	r0, #0
   11a5c:	beq	11a7c <__assert_fail@plt+0x37c>
   11a60:	movw	r1, #51319	; 0xc877
   11a64:	mov	r0, #0
   11a68:	mov	r2, #5
   11a6c:	movt	r1, #2
   11a70:	bl	11484 <dcgettext@plt>
   11a74:	ldr	r1, [r7]
   11a78:	bl	113a0 <fputs_unlocked@plt>
   11a7c:	movw	r1, #51390	; 0xc8be
   11a80:	mov	r0, #0
   11a84:	mov	r2, #5
   11a88:	movt	r1, #2
   11a8c:	bl	11484 <dcgettext@plt>
   11a90:	movw	r2, #51275	; 0xc84b
   11a94:	mov	r1, r0
   11a98:	mov	r0, #1
   11a9c:	mov	r3, r5
   11aa0:	movt	r2, #2
   11aa4:	bl	11628 <__printf_chk@plt>
   11aa8:	movw	r1, #51417	; 0xc8d9
   11aac:	mov	r0, #0
   11ab0:	mov	r2, #5
   11ab4:	movt	r1, #2
   11ab8:	bl	11484 <dcgettext@plt>
   11abc:	mov	r1, r0
   11ac0:	movw	r0, #51185	; 0xc7f1
   11ac4:	movw	r3, #51467	; 0xc90b
   11ac8:	cmp	r6, r5
   11acc:	mov	r2, r6
   11ad0:	movt	r0, #2
   11ad4:	movt	r3, #2
   11ad8:	moveq	r3, r0
   11adc:	mov	r0, #1
   11ae0:	bl	11628 <__printf_chk@plt>
   11ae4:	mov	r0, r4
   11ae8:	bl	115a4 <exit@plt>
   11aec:	mov	r1, #10
   11af0:	bl	1167c <__overflow@plt>
   11af4:	b	11874 <__assert_fail@plt+0x174>
   11af8:	movw	r0, #57760	; 0xe1a0
   11afc:	movw	r1, #49004	; 0xbf6c
   11b00:	mov	r2, #5
   11b04:	movt	r0, #3
   11b08:	movt	r1, #2
   11b0c:	ldr	r5, [r0]
   11b10:	mov	r0, #0
   11b14:	bl	11484 <dcgettext@plt>
   11b18:	mov	r2, r0
   11b1c:	movw	r0, #57788	; 0xe1bc
   11b20:	mov	r1, #1
   11b24:	movt	r0, #3
   11b28:	ldr	r3, [r0]
   11b2c:	mov	r0, r5
   11b30:	bl	11640 <__fprintf_chk@plt>
   11b34:	mov	r0, r4
   11b38:	bl	115a4 <exit@plt>
   11b3c:	push	{r4, r5, r6, sl, fp, lr}
   11b40:	add	fp, sp, #16
   11b44:	sub	sp, sp, #24
   11b48:	mov	r5, r0
   11b4c:	ldr	r0, [r1]
   11b50:	mov	r4, r1
   11b54:	bl	14360 <__assert_fail@plt+0x2c60>
   11b58:	movw	r1, #51467	; 0xc90b
   11b5c:	mov	r0, #6
   11b60:	movt	r1, #2
   11b64:	bl	11688 <setlocale@plt>
   11b68:	movw	r6, #51037	; 0xc75d
   11b6c:	movw	r1, #51009	; 0xc741
   11b70:	movt	r6, #2
   11b74:	movt	r1, #2
   11b78:	mov	r0, r6
   11b7c:	bl	116c4 <bindtextdomain@plt>
   11b80:	mov	r0, r6
   11b84:	bl	114b4 <textdomain@plt>
   11b88:	movw	r0, #57672	; 0xe148
   11b8c:	mov	r1, #3
   11b90:	movt	r0, #3
   11b94:	str	r1, [r0]
   11b98:	movw	r0, #15600	; 0x3cf0
   11b9c:	movt	r0, #1
   11ba0:	bl	2bf44 <__assert_fail@plt+0x1a844>
   11ba4:	movw	r2, #51074	; 0xc782
   11ba8:	movw	r3, #51062	; 0xc776
   11bac:	movw	r0, #51047	; 0xc767
   11bb0:	movw	r1, #51089	; 0xc791
   11bb4:	movw	r6, #6144	; 0x1800
   11bb8:	mov	ip, #0
   11bbc:	movt	r2, #2
   11bc0:	movt	r3, #2
   11bc4:	movt	r0, #2
   11bc8:	movt	r6, #1
   11bcc:	movt	r1, #2
   11bd0:	stm	sp, {r0, r6}
   11bd4:	str	r3, [sp, #8]
   11bd8:	movw	r3, #51033	; 0xc759
   11bdc:	str	r2, [sp, #12]
   11be0:	movw	r2, #51004	; 0xc73c
   11be4:	str	r1, [sp, #16]
   11be8:	mov	r0, r5
   11bec:	mov	r1, r4
   11bf0:	str	ip, [sp, #20]
   11bf4:	movt	r2, #2
   11bf8:	movt	r3, #2
   11bfc:	bl	13e04 <__assert_fail@plt+0x2704>
   11c00:	cmp	r5, #2
   11c04:	bcc	11d50 <__assert_fail@plt+0x650>
   11c08:	mov	r6, r4
   11c0c:	movw	r1, #51101	; 0xc79d
   11c10:	ldr	r0, [r6, #4]!
   11c14:	movt	r1, #2
   11c18:	bl	113d0 <strcmp@plt>
   11c1c:	cmp	r0, #0
   11c20:	bne	11c34 <__assert_fail@plt+0x534>
   11c24:	sub	r0, r5, #1
   11c28:	mov	r4, r6
   11c2c:	cmp	r0, #1
   11c30:	bls	11d50 <__assert_fail@plt+0x650>
   11c34:	movw	r5, #57776	; 0xe1b0
   11c38:	add	r0, r4, #4
   11c3c:	movt	r5, #3
   11c40:	str	r0, [r5]
   11c44:	mov	r0, #1
   11c48:	bl	11dbc <__assert_fail@plt+0x6bc>
   11c4c:	mov	r4, r0
   11c50:	ldr	r0, [r5]
   11c54:	ldr	r0, [r0]
   11c58:	cmp	r0, #0
   11c5c:	bne	11d7c <__assert_fail@plt+0x67c>
   11c60:	ldr	r0, [r4]
   11c64:	cmp	r0, #1
   11c68:	beq	11cd8 <__assert_fail@plt+0x5d8>
   11c6c:	cmp	r0, #0
   11c70:	bne	11cd4 <__assert_fail@plt+0x5d4>
   11c74:	movw	r6, #57764	; 0xe1a4
   11c78:	add	r2, r4, #4
   11c7c:	mov	r1, #10
   11c80:	mov	r5, #10
   11c84:	movt	r6, #3
   11c88:	ldr	r0, [r6]
   11c8c:	bl	114cc <__gmpz_out_str@plt>
   11c90:	ldr	r0, [r6]
   11c94:	ldr	r1, [r0, #20]
   11c98:	ldr	r2, [r0, #24]
   11c9c:	cmp	r1, r2
   11ca0:	bcs	11d38 <__assert_fail@plt+0x638>
   11ca4:	add	r2, r1, #1
   11ca8:	str	r2, [r0, #20]
   11cac:	strb	r5, [r1]
   11cb0:	ldr	r0, [r4]
   11cb4:	cmp	r0, #1
   11cb8:	beq	11cec <__assert_fail@plt+0x5ec>
   11cbc:	cmp	r0, #0
   11cc0:	ldreq	r0, [r4, #8]
   11cc4:	clzeq	r0, r0
   11cc8:	lsreq	r0, r0, #5
   11ccc:	subeq	sp, fp, #16
   11cd0:	popeq	{r4, r5, r6, sl, fp, pc}
   11cd4:	bl	116e8 <abort@plt>
   11cd8:	ldr	r0, [r4, #4]
   11cdc:	bl	11538 <puts@plt>
   11ce0:	ldr	r0, [r4]
   11ce4:	cmp	r0, #1
   11ce8:	bne	11cbc <__assert_fail@plt+0x5bc>
   11cec:	ldr	r1, [r4, #4]
   11cf0:	mov	r0, #1
   11cf4:	ldrb	r2, [r1]
   11cf8:	cmp	r2, #0
   11cfc:	beq	11d24 <__assert_fail@plt+0x624>
   11d00:	cmp	r2, #45	; 0x2d
   11d04:	addeq	r1, r1, #1
   11d08:	ldrb	r2, [r1], #1
   11d0c:	uxtb	r2, r2
   11d10:	cmp	r2, #48	; 0x30
   11d14:	bne	11d2c <__assert_fail@plt+0x62c>
   11d18:	ldrb	r2, [r1], #1
   11d1c:	cmp	r2, #0
   11d20:	bne	11d0c <__assert_fail@plt+0x60c>
   11d24:	sub	sp, fp, #16
   11d28:	pop	{r4, r5, r6, sl, fp, pc}
   11d2c:	mov	r0, #0
   11d30:	sub	sp, fp, #16
   11d34:	pop	{r4, r5, r6, sl, fp, pc}
   11d38:	mov	r1, #10
   11d3c:	bl	1167c <__overflow@plt>
   11d40:	ldr	r0, [r4]
   11d44:	cmp	r0, #1
   11d48:	bne	11cbc <__assert_fail@plt+0x5bc>
   11d4c:	b	11cec <__assert_fail@plt+0x5ec>
   11d50:	movw	r1, #51104	; 0xc7a0
   11d54:	mov	r0, #0
   11d58:	mov	r2, #5
   11d5c:	movt	r1, #2
   11d60:	bl	11484 <dcgettext@plt>
   11d64:	mov	r2, r0
   11d68:	mov	r0, #0
   11d6c:	mov	r1, #0
   11d70:	bl	11520 <error@plt>
   11d74:	mov	r0, #2
   11d78:	bl	11800 <__assert_fail@plt+0x100>
   11d7c:	movw	r1, #51120	; 0xc7b0
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	movt	r1, #2
   11d8c:	bl	11484 <dcgettext@plt>
   11d90:	mov	r4, r0
   11d94:	ldr	r0, [r5]
   11d98:	mov	r1, #8
   11d9c:	ldr	r2, [r0]
   11da0:	mov	r0, #0
   11da4:	bl	15d54 <__assert_fail@plt+0x4654>
   11da8:	mov	r3, r0
   11dac:	mov	r0, #2
   11db0:	mov	r1, #0
   11db4:	mov	r2, r4
   11db8:	bl	11520 <error@plt>
   11dbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11dc0:	add	fp, sp, #24
   11dc4:	mov	r4, r0
   11dc8:	bl	12004 <__assert_fail@plt+0x904>
   11dcc:	movw	r5, #57776	; 0xe1b0
   11dd0:	mov	r6, r0
   11dd4:	movt	r5, #3
   11dd8:	ldr	r7, [r5]
   11ddc:	ldr	r0, [r7]
   11de0:	cmp	r0, #0
   11de4:	beq	11ff8 <__assert_fail@plt+0x8f8>
   11de8:	movw	r8, #51468	; 0xc90c
   11dec:	mov	r9, #0
   11df0:	movt	r8, #2
   11df4:	b	11e14 <__assert_fail@plt+0x714>
   11df8:	bl	115e0 <__gmpz_clear@plt>
   11dfc:	mov	r0, r7
   11e00:	bl	13ddc <__assert_fail@plt+0x26dc>
   11e04:	ldr	r7, [r5]
   11e08:	ldr	r0, [r7]
   11e0c:	cmp	r0, #0
   11e10:	beq	11ff8 <__assert_fail@plt+0x8f8>
   11e14:	mov	r1, r8
   11e18:	bl	113d0 <strcmp@plt>
   11e1c:	clz	r1, r0
   11e20:	cmp	r0, #0
   11e24:	lsr	r1, r1, #5
   11e28:	add	r1, r7, r1, lsl #2
   11e2c:	str	r1, [r5]
   11e30:	bne	11ff8 <__assert_fail@plt+0x8f8>
   11e34:	mov	r0, #0
   11e38:	cmp	r4, #0
   11e3c:	beq	11e9c <__assert_fail@plt+0x79c>
   11e40:	ldr	r1, [r6]
   11e44:	cmp	r1, #1
   11e48:	beq	11e64 <__assert_fail@plt+0x764>
   11e4c:	cmp	r1, #0
   11e50:	bne	12000 <__assert_fail@plt+0x900>
   11e54:	ldr	r0, [r6, #8]
   11e58:	clz	r0, r0
   11e5c:	lsr	r0, r0, #5
   11e60:	b	11e9c <__assert_fail@plt+0x79c>
   11e64:	ldr	r1, [r6, #4]
   11e68:	ldrb	r2, [r1]
   11e6c:	cmp	r2, #0
   11e70:	beq	11e98 <__assert_fail@plt+0x798>
   11e74:	cmp	r2, #45	; 0x2d
   11e78:	addeq	r1, r1, #1
   11e7c:	ldrb	r2, [r1], #1
   11e80:	uxtb	r2, r2
   11e84:	cmp	r2, #48	; 0x30
   11e88:	bne	11e9c <__assert_fail@plt+0x79c>
   11e8c:	ldrb	r2, [r1], #1
   11e90:	cmp	r2, #0
   11e94:	bne	11e80 <__assert_fail@plt+0x780>
   11e98:	mov	r0, #1
   11e9c:	bl	12004 <__assert_fail@plt+0x904>
   11ea0:	mov	r7, r0
   11ea4:	ldr	r0, [r6]
   11ea8:	cmp	r0, #0
   11eac:	beq	11ef8 <__assert_fail@plt+0x7f8>
   11eb0:	cmp	r0, #1
   11eb4:	bne	12000 <__assert_fail@plt+0x900>
   11eb8:	ldr	r0, [r6, #4]
   11ebc:	ldrb	r1, [r0]
   11ec0:	cmp	r1, #0
   11ec4:	beq	11ef0 <__assert_fail@plt+0x7f0>
   11ec8:	cmp	r1, #45	; 0x2d
   11ecc:	mov	r1, r0
   11ed0:	addeq	r1, r1, #1
   11ed4:	ldrb	r2, [r1], #1
   11ed8:	uxtb	r2, r2
   11edc:	cmp	r2, #48	; 0x30
   11ee0:	bne	11f04 <__assert_fail@plt+0x804>
   11ee4:	ldrb	r2, [r1], #1
   11ee8:	cmp	r2, #0
   11eec:	bne	11ed8 <__assert_fail@plt+0x7d8>
   11ef0:	bl	13ddc <__assert_fail@plt+0x26dc>
   11ef4:	b	11f28 <__assert_fail@plt+0x828>
   11ef8:	ldr	r0, [r6, #8]
   11efc:	cmp	r0, #0
   11f00:	beq	11f20 <__assert_fail@plt+0x820>
   11f04:	mov	r0, r7
   11f08:	ldr	r1, [r0], #4
   11f0c:	cmp	r1, #1
   11f10:	bne	11df8 <__assert_fail@plt+0x6f8>
   11f14:	ldr	r0, [r0]
   11f18:	bl	13ddc <__assert_fail@plt+0x26dc>
   11f1c:	b	11dfc <__assert_fail@plt+0x6fc>
   11f20:	add	r0, r6, #4
   11f24:	bl	115e0 <__gmpz_clear@plt>
   11f28:	mov	r0, r6
   11f2c:	bl	13ddc <__assert_fail@plt+0x26dc>
   11f30:	ldr	r0, [r7]
   11f34:	cmp	r0, #0
   11f38:	beq	11f84 <__assert_fail@plt+0x884>
   11f3c:	cmp	r0, #1
   11f40:	bne	12000 <__assert_fail@plt+0x900>
   11f44:	ldr	r0, [r7, #4]
   11f48:	ldrb	r1, [r0]
   11f4c:	cmp	r1, #0
   11f50:	beq	11f7c <__assert_fail@plt+0x87c>
   11f54:	cmp	r1, #45	; 0x2d
   11f58:	mov	r1, r0
   11f5c:	addeq	r1, r1, #1
   11f60:	ldrb	r2, [r1], #1
   11f64:	uxtb	r2, r2
   11f68:	cmp	r2, #48	; 0x30
   11f6c:	bne	11fe4 <__assert_fail@plt+0x8e4>
   11f70:	ldrb	r2, [r1], #1
   11f74:	cmp	r2, #0
   11f78:	bne	11f64 <__assert_fail@plt+0x864>
   11f7c:	bl	13ddc <__assert_fail@plt+0x26dc>
   11f80:	b	11fb0 <__assert_fail@plt+0x8b0>
   11f84:	ldr	r0, [r7, #8]
   11f88:	cmp	r0, #0
   11f8c:	beq	11fa8 <__assert_fail@plt+0x8a8>
   11f90:	mov	r6, r7
   11f94:	ldr	r7, [r5]
   11f98:	ldr	r0, [r7]
   11f9c:	cmp	r0, #0
   11fa0:	bne	11e14 <__assert_fail@plt+0x714>
   11fa4:	b	11ff8 <__assert_fail@plt+0x8f8>
   11fa8:	add	r0, r7, #4
   11fac:	bl	115e0 <__gmpz_clear@plt>
   11fb0:	mov	r0, r7
   11fb4:	bl	13ddc <__assert_fail@plt+0x26dc>
   11fb8:	mov	r0, #16
   11fbc:	bl	2b30c <__assert_fail@plt+0x19c0c>
   11fc0:	mov	r6, r0
   11fc4:	str	r9, [r0], #4
   11fc8:	mov	r1, #0
   11fcc:	bl	11670 <__gmpz_init_set_ui@plt>
   11fd0:	ldr	r7, [r5]
   11fd4:	ldr	r0, [r7]
   11fd8:	cmp	r0, #0
   11fdc:	bne	11e14 <__assert_fail@plt+0x714>
   11fe0:	b	11ff8 <__assert_fail@plt+0x8f8>
   11fe4:	mov	r6, r7
   11fe8:	ldr	r7, [r5]
   11fec:	ldr	r0, [r7]
   11ff0:	cmp	r0, #0
   11ff4:	bne	11e14 <__assert_fail@plt+0x714>
   11ff8:	mov	r0, r6
   11ffc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12000:	bl	116e8 <abort@plt>
   12004:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12008:	add	fp, sp, #24
   1200c:	mov	r4, r0
   12010:	bl	12240 <__assert_fail@plt+0xb40>
   12014:	movw	r5, #57776	; 0xe1b0
   12018:	mov	r6, r0
   1201c:	movt	r5, #3
   12020:	ldr	r7, [r5]
   12024:	ldr	r0, [r7]
   12028:	cmp	r0, #0
   1202c:	beq	12234 <__assert_fail@plt+0xb34>
   12030:	movw	r8, #51470	; 0xc90e
   12034:	mov	r9, #0
   12038:	movt	r8, #2
   1203c:	b	12074 <__assert_fail@plt+0x974>
   12040:	bl	115e0 <__gmpz_clear@plt>
   12044:	mov	r0, r7
   12048:	bl	13ddc <__assert_fail@plt+0x26dc>
   1204c:	mov	r0, #16
   12050:	bl	2b30c <__assert_fail@plt+0x19c0c>
   12054:	mov	r6, r0
   12058:	str	r9, [r0], #4
   1205c:	mov	r1, #0
   12060:	bl	11670 <__gmpz_init_set_ui@plt>
   12064:	ldr	r7, [r5]
   12068:	ldr	r0, [r7]
   1206c:	cmp	r0, #0
   12070:	beq	12234 <__assert_fail@plt+0xb34>
   12074:	mov	r1, r8
   12078:	bl	113d0 <strcmp@plt>
   1207c:	clz	r1, r0
   12080:	cmp	r0, #0
   12084:	lsr	r1, r1, #5
   12088:	add	r1, r7, r1, lsl #2
   1208c:	str	r1, [r5]
   12090:	bne	12234 <__assert_fail@plt+0xb34>
   12094:	mov	r0, #0
   12098:	cmp	r4, #0
   1209c:	beq	12108 <__assert_fail@plt+0xa08>
   120a0:	ldr	r0, [r6]
   120a4:	cmp	r0, #1
   120a8:	beq	120c4 <__assert_fail@plt+0x9c4>
   120ac:	cmp	r0, #0
   120b0:	bne	1223c <__assert_fail@plt+0xb3c>
   120b4:	ldr	r0, [r6, #8]
   120b8:	clz	r0, r0
   120bc:	lsr	r0, r0, #5
   120c0:	b	12104 <__assert_fail@plt+0xa04>
   120c4:	ldr	r1, [r6, #4]
   120c8:	mov	r0, #1
   120cc:	ldrb	r2, [r1]
   120d0:	cmp	r2, #0
   120d4:	beq	12104 <__assert_fail@plt+0xa04>
   120d8:	cmp	r2, #45	; 0x2d
   120dc:	addeq	r1, r1, #1
   120e0:	ldrb	r2, [r1], #1
   120e4:	uxtb	r2, r2
   120e8:	cmp	r2, #48	; 0x30
   120ec:	bne	12100 <__assert_fail@plt+0xa00>
   120f0:	ldrb	r2, [r1], #1
   120f4:	cmp	r2, #0
   120f8:	bne	120e4 <__assert_fail@plt+0x9e4>
   120fc:	b	12104 <__assert_fail@plt+0xa04>
   12100:	mov	r0, #0
   12104:	eor	r0, r0, #1
   12108:	bl	12240 <__assert_fail@plt+0xb40>
   1210c:	ldr	r1, [r6]
   12110:	mov	r7, r0
   12114:	cmp	r1, #0
   12118:	beq	1215c <__assert_fail@plt+0xa5c>
   1211c:	cmp	r1, #1
   12120:	bne	1223c <__assert_fail@plt+0xb3c>
   12124:	ldr	r0, [r6, #4]
   12128:	ldrb	r2, [r0]
   1212c:	cmp	r2, #0
   12130:	beq	121e4 <__assert_fail@plt+0xae4>
   12134:	cmp	r2, #45	; 0x2d
   12138:	addeq	r0, r0, #1
   1213c:	ldrb	r2, [r0], #1
   12140:	uxtb	r2, r2
   12144:	cmp	r2, #48	; 0x30
   12148:	bne	12168 <__assert_fail@plt+0xa68>
   1214c:	ldrb	r2, [r0], #1
   12150:	cmp	r2, #0
   12154:	bne	12140 <__assert_fail@plt+0xa40>
   12158:	b	121d8 <__assert_fail@plt+0xad8>
   1215c:	ldr	r0, [r6, #8]
   12160:	cmp	r0, #0
   12164:	beq	121ec <__assert_fail@plt+0xaec>
   12168:	ldr	r0, [r7]
   1216c:	cmp	r0, #0
   12170:	beq	121c0 <__assert_fail@plt+0xac0>
   12174:	cmp	r0, #1
   12178:	bne	1223c <__assert_fail@plt+0xb3c>
   1217c:	ldr	r0, [r7, #4]
   12180:	ldrb	r2, [r0]
   12184:	cmp	r2, #0
   12188:	beq	121d8 <__assert_fail@plt+0xad8>
   1218c:	sub	r2, r2, #45	; 0x2d
   12190:	clz	r2, r2
   12194:	lsr	r2, r2, #5
   12198:	ldrb	r3, [r0, r2]
   1219c:	add	r2, r2, #1
   121a0:	uxtb	r3, r3
   121a4:	cmp	r3, #48	; 0x30
   121a8:	bne	12218 <__assert_fail@plt+0xb18>
   121ac:	ldrb	r3, [r0, r2]
   121b0:	add	r2, r2, #1
   121b4:	cmp	r3, #0
   121b8:	bne	121a0 <__assert_fail@plt+0xaa0>
   121bc:	b	121d8 <__assert_fail@plt+0xad8>
   121c0:	ldr	r0, [r7, #8]
   121c4:	cmp	r0, #0
   121c8:	beq	121d8 <__assert_fail@plt+0xad8>
   121cc:	add	r0, r7, #4
   121d0:	bl	115e0 <__gmpz_clear@plt>
   121d4:	b	1221c <__assert_fail@plt+0xb1c>
   121d8:	cmp	r1, #1
   121dc:	bne	121ec <__assert_fail@plt+0xaec>
   121e0:	ldr	r0, [r6, #4]
   121e4:	bl	13ddc <__assert_fail@plt+0x26dc>
   121e8:	b	121f4 <__assert_fail@plt+0xaf4>
   121ec:	add	r0, r6, #4
   121f0:	bl	115e0 <__gmpz_clear@plt>
   121f4:	mov	r0, r6
   121f8:	bl	13ddc <__assert_fail@plt+0x26dc>
   121fc:	mov	r0, r7
   12200:	ldr	r1, [r0], #4
   12204:	cmp	r1, #1
   12208:	bne	12040 <__assert_fail@plt+0x940>
   1220c:	ldr	r0, [r0]
   12210:	bl	13ddc <__assert_fail@plt+0x26dc>
   12214:	b	12044 <__assert_fail@plt+0x944>
   12218:	bl	13ddc <__assert_fail@plt+0x26dc>
   1221c:	mov	r0, r7
   12220:	bl	13ddc <__assert_fail@plt+0x26dc>
   12224:	ldr	r7, [r5]
   12228:	ldr	r0, [r7]
   1222c:	cmp	r0, #0
   12230:	bne	12074 <__assert_fail@plt+0x974>
   12234:	mov	r0, r6
   12238:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1223c:	bl	116e8 <abort@plt>
   12240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12244:	add	fp, sp, #28
   12248:	sub	sp, sp, #4
   1224c:	mov	r6, r0
   12250:	bl	12660 <__assert_fail@plt+0xf60>
   12254:	movw	r7, #57776	; 0xe1b0
   12258:	mov	r5, r0
   1225c:	movt	r7, #3
   12260:	ldr	r4, [r7]
   12264:	ldr	r0, [r4]
   12268:	cmp	r0, #0
   1226c:	beq	12650 <__assert_fail@plt+0xf50>
   12270:	mvn	r8, #47	; 0x2f
   12274:	str	r6, [sp]
   12278:	b	122bc <__assert_fail@plt+0xbbc>
   1227c:	bl	115e0 <__gmpz_clear@plt>
   12280:	mov	r0, sl
   12284:	bl	13ddc <__assert_fail@plt+0x26dc>
   12288:	mov	r0, #16
   1228c:	bl	2b30c <__assert_fail@plt+0x19c0c>
   12290:	mov	r1, #0
   12294:	mov	r5, r0
   12298:	str	r1, [r0], #4
   1229c:	mov	r1, r9
   122a0:	bl	11670 <__gmpz_init_set_ui@plt>
   122a4:	movw	r7, #57776	; 0xe1b0
   122a8:	movt	r7, #3
   122ac:	ldr	r4, [r7]
   122b0:	ldr	r0, [r4]
   122b4:	cmp	r0, #0
   122b8:	beq	12650 <__assert_fail@plt+0xf50>
   122bc:	movw	r1, #51472	; 0xc910
   122c0:	mov	r9, r6
   122c4:	movt	r1, #2
   122c8:	bl	113d0 <strcmp@plt>
   122cc:	clz	r1, r0
   122d0:	cmp	r0, #0
   122d4:	lsr	r1, r1, #5
   122d8:	add	r6, r4, r1, lsl #2
   122dc:	mov	r4, #0
   122e0:	str	r6, [r7]
   122e4:	beq	12418 <__assert_fail@plt+0xd18>
   122e8:	ldr	r0, [r6]
   122ec:	cmp	r0, #0
   122f0:	beq	12650 <__assert_fail@plt+0xf50>
   122f4:	movw	r1, #51474	; 0xc912
   122f8:	movt	r1, #2
   122fc:	bl	113d0 <strcmp@plt>
   12300:	clz	r1, r0
   12304:	cmp	r0, #0
   12308:	lsr	r1, r1, #5
   1230c:	add	r4, r6, r1, lsl #2
   12310:	str	r4, [r7]
   12314:	beq	12414 <__assert_fail@plt+0xd14>
   12318:	ldr	r0, [r4]
   1231c:	cmp	r0, #0
   12320:	beq	12650 <__assert_fail@plt+0xf50>
   12324:	movw	r1, #51481	; 0xc919
   12328:	movt	r1, #2
   1232c:	bl	113d0 <strcmp@plt>
   12330:	clz	r1, r0
   12334:	cmp	r0, #0
   12338:	lsr	r1, r1, #5
   1233c:	add	r6, r4, r1, lsl #2
   12340:	mov	r4, #2
   12344:	str	r6, [r7]
   12348:	beq	12418 <__assert_fail@plt+0xd18>
   1234c:	ldr	r0, [r6]
   12350:	cmp	r0, #0
   12354:	beq	12650 <__assert_fail@plt+0xf50>
   12358:	movw	r1, #51477	; 0xc915
   1235c:	movt	r1, #2
   12360:	bl	113d0 <strcmp@plt>
   12364:	clz	r1, r0
   12368:	cmp	r0, #0
   1236c:	lsr	r1, r1, #5
   12370:	add	r6, r6, r1, lsl #2
   12374:	str	r6, [r7]
   12378:	beq	12418 <__assert_fail@plt+0xd18>
   1237c:	ldr	r0, [r6]
   12380:	cmp	r0, #0
   12384:	beq	12650 <__assert_fail@plt+0xf50>
   12388:	movw	r1, #51480	; 0xc918
   1238c:	movt	r1, #2
   12390:	bl	113d0 <strcmp@plt>
   12394:	clz	r1, r0
   12398:	cmp	r0, #0
   1239c:	lsr	r1, r1, #5
   123a0:	add	r4, r6, r1, lsl #2
   123a4:	str	r4, [r7]
   123a8:	beq	12640 <__assert_fail@plt+0xf40>
   123ac:	ldr	r0, [r4]
   123b0:	cmp	r0, #0
   123b4:	beq	12650 <__assert_fail@plt+0xf50>
   123b8:	movw	r1, #51483	; 0xc91b
   123bc:	movt	r1, #2
   123c0:	bl	113d0 <strcmp@plt>
   123c4:	clz	r1, r0
   123c8:	cmp	r0, #0
   123cc:	lsr	r1, r1, #5
   123d0:	add	r4, r4, r1, lsl #2
   123d4:	str	r4, [r7]
   123d8:	beq	12648 <__assert_fail@plt+0xf48>
   123dc:	ldr	r0, [r4]
   123e0:	cmp	r0, #0
   123e4:	beq	12650 <__assert_fail@plt+0xf50>
   123e8:	movw	r1, #51486	; 0xc91e
   123ec:	movt	r1, #2
   123f0:	bl	113d0 <strcmp@plt>
   123f4:	clz	r1, r0
   123f8:	cmp	r0, #0
   123fc:	lsr	r1, r1, #5
   12400:	add	r1, r4, r1, lsl #2
   12404:	mov	r4, #5
   12408:	str	r1, [r7]
   1240c:	beq	12418 <__assert_fail@plt+0xd18>
   12410:	b	12650 <__assert_fail@plt+0xf50>
   12414:	mov	r4, #1
   12418:	mov	r0, r9
   1241c:	mov	r6, r9
   12420:	bl	12660 <__assert_fail@plt+0xf60>
   12424:	mov	sl, r0
   12428:	mov	r9, #0
   1242c:	cmp	r6, #0
   12430:	beq	12580 <__assert_fail@plt+0xe80>
   12434:	ldr	r0, [r5]
   12438:	cmp	r0, #1
   1243c:	beq	12474 <__assert_fail@plt+0xd74>
   12440:	cmp	r0, #0
   12444:	bne	1265c <__assert_fail@plt+0xf5c>
   12448:	add	r7, r5, #4
   1244c:	mov	r0, #0
   12450:	mov	r1, #10
   12454:	mov	r2, r7
   12458:	bl	11490 <__gmpz_get_str@plt>
   1245c:	mov	r6, r0
   12460:	mov	r0, r7
   12464:	bl	115e0 <__gmpz_clear@plt>
   12468:	mov	r0, #1
   1246c:	stm	r5, {r0, r6}
   12470:	ldr	r6, [sp]
   12474:	ldr	r0, [sl]
   12478:	cmp	r0, #1
   1247c:	beq	124b4 <__assert_fail@plt+0xdb4>
   12480:	cmp	r0, #0
   12484:	bne	1265c <__assert_fail@plt+0xf5c>
   12488:	add	r6, sl, #4
   1248c:	mov	r0, #0
   12490:	mov	r1, #10
   12494:	mov	r2, r6
   12498:	bl	11490 <__gmpz_get_str@plt>
   1249c:	mov	r7, r0
   124a0:	mov	r0, r6
   124a4:	bl	115e0 <__gmpz_clear@plt>
   124a8:	mov	r0, #1
   124ac:	stm	sl, {r0, r7}
   124b0:	ldr	r6, [sp]
   124b4:	ldr	r0, [r5, #4]
   124b8:	ldrb	r1, [r0]
   124bc:	sub	r1, r1, #45	; 0x2d
   124c0:	clz	r1, r1
   124c4:	lsr	r1, r1, #5
   124c8:	ldrb	r2, [r0, r1]
   124cc:	add	r1, r1, #1
   124d0:	uxtab	r2, r8, r2
   124d4:	cmp	r2, #9
   124d8:	bhi	12538 <__assert_fail@plt+0xe38>
   124dc:	ldrb	r2, [r0, r1]
   124e0:	add	r1, r1, #1
   124e4:	cmp	r2, #0
   124e8:	bne	124d0 <__assert_fail@plt+0xdd0>
   124ec:	ldr	r1, [sl, #4]
   124f0:	ldrb	r2, [r1]
   124f4:	sub	r2, r2, #45	; 0x2d
   124f8:	clz	r2, r2
   124fc:	lsr	r2, r2, #5
   12500:	ldrb	r3, [r1, r2]
   12504:	add	r2, r2, #1
   12508:	uxtab	r3, r8, r3
   1250c:	cmp	r3, #9
   12510:	bhi	12538 <__assert_fail@plt+0xe38>
   12514:	ldrb	r3, [r1, r2]
   12518:	add	r2, r2, #1
   1251c:	cmp	r3, #0
   12520:	bne	12508 <__assert_fail@plt+0xe08>
   12524:	bl	2a9e8 <__assert_fail@plt+0x192e8>
   12528:	mov	r9, r0
   1252c:	cmp	r4, #5
   12530:	bls	1255c <__assert_fail@plt+0xe5c>
   12534:	b	1265c <__assert_fail@plt+0xf5c>
   12538:	bl	115ec <__errno_location@plt>
   1253c:	mov	r1, #0
   12540:	str	r1, [r0]
   12544:	ldr	r0, [r5, #4]
   12548:	ldr	r1, [sl, #4]
   1254c:	bl	1152c <strcoll@plt>
   12550:	mov	r9, r0
   12554:	cmp	r4, #5
   12558:	bhi	1265c <__assert_fail@plt+0xf5c>
   1255c:	add	r0, pc, #0
   12560:	ldr	pc, [r0, r4, lsl #2]
   12564:	andeq	r2, r1, ip, ror r5
   12568:	andeq	r2, r1, r0, asr #11
   1256c:	muleq	r1, ip, r5
   12570:	andeq	r2, r1, r0, ror #11
   12574:			; <UNDEFINED> instruction: 0x000125b8
   12578:	strdeq	r2, [r1], -ip
   1257c:	lsr	r9, r9, #31
   12580:	mov	r0, r5
   12584:	ldr	r1, [r0], #4
   12588:	cmp	r1, #1
   1258c:	bne	12618 <__assert_fail@plt+0xf18>
   12590:	ldr	r0, [r0]
   12594:	bl	13ddc <__assert_fail@plt+0x26dc>
   12598:	b	1261c <__assert_fail@plt+0xf1c>
   1259c:	clz	r0, r9
   125a0:	lsr	r9, r0, #5
   125a4:	mov	r0, r5
   125a8:	ldr	r1, [r0], #4
   125ac:	cmp	r1, #1
   125b0:	beq	12590 <__assert_fail@plt+0xe90>
   125b4:	b	12618 <__assert_fail@plt+0xf18>
   125b8:	cmn	r9, #1
   125bc:	b	12600 <__assert_fail@plt+0xf00>
   125c0:	cmp	r9, #1
   125c4:	mov	r9, #0
   125c8:	movwlt	r9, #1
   125cc:	mov	r0, r5
   125d0:	ldr	r1, [r0], #4
   125d4:	cmp	r1, #1
   125d8:	beq	12590 <__assert_fail@plt+0xe90>
   125dc:	b	12618 <__assert_fail@plt+0xf18>
   125e0:	cmp	r9, #0
   125e4:	movwne	r9, #1
   125e8:	mov	r0, r5
   125ec:	ldr	r1, [r0], #4
   125f0:	cmp	r1, #1
   125f4:	beq	12590 <__assert_fail@plt+0xe90>
   125f8:	b	12618 <__assert_fail@plt+0xf18>
   125fc:	cmp	r9, #0
   12600:	mov	r9, #0
   12604:	movwgt	r9, #1
   12608:	mov	r0, r5
   1260c:	ldr	r1, [r0], #4
   12610:	cmp	r1, #1
   12614:	beq	12590 <__assert_fail@plt+0xe90>
   12618:	bl	115e0 <__gmpz_clear@plt>
   1261c:	mov	r0, r5
   12620:	bl	13ddc <__assert_fail@plt+0x26dc>
   12624:	mov	r0, sl
   12628:	ldr	r1, [r0], #4
   1262c:	cmp	r1, #1
   12630:	bne	1227c <__assert_fail@plt+0xb7c>
   12634:	ldr	r0, [r0]
   12638:	bl	13ddc <__assert_fail@plt+0x26dc>
   1263c:	b	12280 <__assert_fail@plt+0xb80>
   12640:	mov	r4, #3
   12644:	b	12418 <__assert_fail@plt+0xd18>
   12648:	mov	r4, #4
   1264c:	b	12418 <__assert_fail@plt+0xd18>
   12650:	mov	r0, r5
   12654:	sub	sp, fp, #28
   12658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1265c:	bl	116e8 <abort@plt>
   12660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12664:	add	fp, sp, #28
   12668:	sub	sp, sp, #4
   1266c:	mov	r5, r0
   12670:	bl	1294c <__assert_fail@plt+0x124c>
   12674:	movw	r4, #57776	; 0xe1b0
   12678:	mov	sl, r0
   1267c:	cmp	r5, #0
   12680:	movt	r4, #3
   12684:	ldr	r7, [r4]
   12688:	ldr	r0, [r7]
   1268c:	beq	12858 <__assert_fail@plt+0x1158>
   12690:	cmp	r0, #0
   12694:	beq	12900 <__assert_fail@plt+0x1200>
   12698:	add	r5, sl, #4
   1269c:	mvn	r8, #47	; 0x2f
   126a0:	b	126c4 <__assert_fail@plt+0xfc4>
   126a4:	ldr	r0, [r6]
   126a8:	bl	13ddc <__assert_fail@plt+0x26dc>
   126ac:	mov	r0, r7
   126b0:	bl	13ddc <__assert_fail@plt+0x26dc>
   126b4:	ldr	r7, [r4]
   126b8:	ldr	r0, [r7]
   126bc:	cmp	r0, #0
   126c0:	beq	12900 <__assert_fail@plt+0x1200>
   126c4:	movw	r1, #51488	; 0xc920
   126c8:	movt	r1, #2
   126cc:	bl	113d0 <strcmp@plt>
   126d0:	clz	r1, r0
   126d4:	cmp	r0, #0
   126d8:	mov	r9, #0
   126dc:	lsr	r1, r1, #5
   126e0:	add	r6, r7, r1, lsl #2
   126e4:	str	r6, [r4]
   126e8:	beq	12720 <__assert_fail@plt+0x1020>
   126ec:	ldr	r0, [r6]
   126f0:	cmp	r0, #0
   126f4:	beq	12900 <__assert_fail@plt+0x1200>
   126f8:	movw	r1, #51102	; 0xc79e
   126fc:	movt	r1, #2
   12700:	bl	113d0 <strcmp@plt>
   12704:	clz	r1, r0
   12708:	mov	r9, #1
   1270c:	cmp	r0, #0
   12710:	lsr	r1, r1, #5
   12714:	add	r1, r6, r1, lsl #2
   12718:	str	r1, [r4]
   1271c:	bne	12900 <__assert_fail@plt+0x1200>
   12720:	mov	r0, #1
   12724:	bl	1294c <__assert_fail@plt+0x124c>
   12728:	mov	r7, r0
   1272c:	ldr	r0, [sl]
   12730:	cmp	r0, #0
   12734:	beq	127a0 <__assert_fail@plt+0x10a0>
   12738:	cmp	r0, #1
   1273c:	bne	12930 <__assert_fail@plt+0x1230>
   12740:	ldr	r6, [r5]
   12744:	ldrb	r0, [r6]
   12748:	sub	r0, r0, #45	; 0x2d
   1274c:	clz	r0, r0
   12750:	lsr	r0, r0, #5
   12754:	ldrb	r1, [r6, r0]
   12758:	add	r0, r0, #1
   1275c:	uxtab	r1, r8, r1
   12760:	cmp	r1, #9
   12764:	bhi	1290c <__assert_fail@plt+0x120c>
   12768:	ldrb	r1, [r6, r0]
   1276c:	add	r0, r0, #1
   12770:	cmp	r1, #0
   12774:	bne	1275c <__assert_fail@plt+0x105c>
   12778:	mov	r0, r5
   1277c:	mov	r1, r6
   12780:	mov	r2, #10
   12784:	bl	116b8 <__gmpz_init_set_str@plt>
   12788:	cmp	r0, #0
   1278c:	bne	12934 <__assert_fail@plt+0x1234>
   12790:	mov	r0, r6
   12794:	bl	13ddc <__assert_fail@plt+0x26dc>
   12798:	mov	r0, #0
   1279c:	str	r0, [sl]
   127a0:	ldr	r0, [r7]
   127a4:	cmp	r0, #0
   127a8:	beq	12814 <__assert_fail@plt+0x1114>
   127ac:	cmp	r0, #1
   127b0:	bne	12930 <__assert_fail@plt+0x1230>
   127b4:	mov	r0, r7
   127b8:	ldr	r6, [r0, #4]!
   127bc:	ldrb	r1, [r6]
   127c0:	sub	r1, r1, #45	; 0x2d
   127c4:	clz	r1, r1
   127c8:	lsr	r1, r1, #5
   127cc:	ldrb	r2, [r6, r1]
   127d0:	add	r1, r1, #1
   127d4:	uxtab	r2, r8, r2
   127d8:	cmp	r2, #9
   127dc:	bhi	1290c <__assert_fail@plt+0x120c>
   127e0:	ldrb	r2, [r6, r1]
   127e4:	add	r1, r1, #1
   127e8:	cmp	r2, #0
   127ec:	bne	127d4 <__assert_fail@plt+0x10d4>
   127f0:	mov	r1, r6
   127f4:	mov	r2, #10
   127f8:	bl	116b8 <__gmpz_init_set_str@plt>
   127fc:	cmp	r0, #0
   12800:	bne	12934 <__assert_fail@plt+0x1234>
   12804:	mov	r0, r6
   12808:	bl	13ddc <__assert_fail@plt+0x26dc>
   1280c:	mov	r0, #0
   12810:	str	r0, [r7]
   12814:	movw	r0, #5804	; 0x16ac
   12818:	movw	r3, #5204	; 0x1454
   1281c:	add	r6, r7, #4
   12820:	cmp	r9, #0
   12824:	mov	r1, r5
   12828:	movt	r0, #1
   1282c:	movt	r3, #1
   12830:	mov	r2, r6
   12834:	moveq	r3, r0
   12838:	mov	r0, r5
   1283c:	blx	r3
   12840:	ldr	r0, [r7]
   12844:	cmp	r0, #1
   12848:	beq	126a4 <__assert_fail@plt+0xfa4>
   1284c:	mov	r0, r6
   12850:	bl	115e0 <__gmpz_clear@plt>
   12854:	b	126ac <__assert_fail@plt+0xfac>
   12858:	cmp	r0, #0
   1285c:	beq	12900 <__assert_fail@plt+0x1200>
   12860:	movw	r5, #51488	; 0xc920
   12864:	movw	r6, #51102	; 0xc79e
   12868:	movt	r5, #2
   1286c:	movt	r6, #2
   12870:	b	12890 <__assert_fail@plt+0x1190>
   12874:	bl	115e0 <__gmpz_clear@plt>
   12878:	mov	r0, r7
   1287c:	bl	13ddc <__assert_fail@plt+0x26dc>
   12880:	ldr	r7, [r4]
   12884:	ldr	r0, [r7]
   12888:	cmp	r0, #0
   1288c:	beq	12900 <__assert_fail@plt+0x1200>
   12890:	mov	r1, r5
   12894:	bl	113d0 <strcmp@plt>
   12898:	clz	r1, r0
   1289c:	cmp	r0, #0
   128a0:	lsr	r1, r1, #5
   128a4:	add	r7, r7, r1, lsl #2
   128a8:	str	r7, [r4]
   128ac:	beq	128dc <__assert_fail@plt+0x11dc>
   128b0:	ldr	r0, [r7]
   128b4:	cmp	r0, #0
   128b8:	beq	12900 <__assert_fail@plt+0x1200>
   128bc:	mov	r1, r6
   128c0:	bl	113d0 <strcmp@plt>
   128c4:	clz	r1, r0
   128c8:	cmp	r0, #0
   128cc:	lsr	r1, r1, #5
   128d0:	add	r1, r7, r1, lsl #2
   128d4:	str	r1, [r4]
   128d8:	bne	12900 <__assert_fail@plt+0x1200>
   128dc:	mov	r0, #0
   128e0:	bl	1294c <__assert_fail@plt+0x124c>
   128e4:	mov	r7, r0
   128e8:	ldr	r1, [r0], #4
   128ec:	cmp	r1, #1
   128f0:	bne	12874 <__assert_fail@plt+0x1174>
   128f4:	ldr	r0, [r0]
   128f8:	bl	13ddc <__assert_fail@plt+0x26dc>
   128fc:	b	12878 <__assert_fail@plt+0x1178>
   12900:	mov	r0, sl
   12904:	sub	sp, fp, #28
   12908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1290c:	movw	r1, #51490	; 0xc922
   12910:	mov	r0, #0
   12914:	mov	r2, #5
   12918:	movt	r1, #2
   1291c:	bl	11484 <dcgettext@plt>
   12920:	mov	r2, r0
   12924:	mov	r0, #2
   12928:	mov	r1, #0
   1292c:	bl	11520 <error@plt>
   12930:	bl	116e8 <abort@plt>
   12934:	movw	r2, #51824	; 0xca70
   12938:	mov	r0, #3
   1293c:	mov	r1, #34	; 0x22
   12940:	mov	r3, r6
   12944:	movt	r2, #2
   12948:	bl	11520 <error@plt>
   1294c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12950:	add	fp, sp, #28
   12954:	sub	sp, sp, #20
   12958:	mov	r4, r0
   1295c:	bl	12e64 <__assert_fail@plt+0x1764>
   12960:	movw	r5, #57776	; 0xe1b0
   12964:	mov	r6, r0
   12968:	str	r4, [sp, #12]
   1296c:	movt	r5, #3
   12970:	ldr	r7, [r5]
   12974:	ldr	r0, [r7]
   12978:	cmp	r0, #0
   1297c:	beq	12a94 <__assert_fail@plt+0x1394>
   12980:	movw	r8, #51532	; 0xc94c
   12984:	cmp	r4, #0
   12988:	movt	r8, #2
   1298c:	beq	12a50 <__assert_fail@plt+0x1350>
   12990:	b	129b8 <__assert_fail@plt+0x12b8>
   12994:	ldr	r0, [r0]
   12998:	bl	13ddc <__assert_fail@plt+0x26dc>
   1299c:	mov	r0, r7
   129a0:	bl	13ddc <__assert_fail@plt+0x26dc>
   129a4:	ldr	r7, [r5]
   129a8:	mov	r6, r4
   129ac:	ldr	r0, [r7]
   129b0:	cmp	r0, #0
   129b4:	beq	12a98 <__assert_fail@plt+0x1398>
   129b8:	mov	r1, r8
   129bc:	bl	113d0 <strcmp@plt>
   129c0:	clz	r1, r0
   129c4:	cmp	r0, #0
   129c8:	lsr	r1, r1, #5
   129cc:	add	r7, r7, r1, lsl #2
   129d0:	str	r7, [r5]
   129d4:	bne	12a94 <__assert_fail@plt+0x1394>
   129d8:	mov	r0, #1
   129dc:	bl	12e64 <__assert_fail@plt+0x1764>
   129e0:	mov	r7, r0
   129e4:	mov	r0, r6
   129e8:	mov	r1, r7
   129ec:	bl	1399c <__assert_fail@plt+0x229c>
   129f0:	mov	r4, r0
   129f4:	mov	r0, r6
   129f8:	ldr	r1, [r0], #4
   129fc:	cmp	r1, #1
   12a00:	bne	12a10 <__assert_fail@plt+0x1310>
   12a04:	ldr	r0, [r0]
   12a08:	bl	13ddc <__assert_fail@plt+0x26dc>
   12a0c:	b	12a14 <__assert_fail@plt+0x1314>
   12a10:	bl	115e0 <__gmpz_clear@plt>
   12a14:	mov	r0, r6
   12a18:	bl	13ddc <__assert_fail@plt+0x26dc>
   12a1c:	mov	r0, r7
   12a20:	ldr	r1, [r0], #4
   12a24:	cmp	r1, #1
   12a28:	beq	12994 <__assert_fail@plt+0x1294>
   12a2c:	bl	115e0 <__gmpz_clear@plt>
   12a30:	b	1299c <__assert_fail@plt+0x129c>
   12a34:	bl	115e0 <__gmpz_clear@plt>
   12a38:	mov	r0, r7
   12a3c:	bl	13ddc <__assert_fail@plt+0x26dc>
   12a40:	ldr	r7, [r5]
   12a44:	ldr	r0, [r7]
   12a48:	cmp	r0, #0
   12a4c:	beq	12a94 <__assert_fail@plt+0x1394>
   12a50:	mov	r1, r8
   12a54:	bl	113d0 <strcmp@plt>
   12a58:	clz	r1, r0
   12a5c:	cmp	r0, #0
   12a60:	lsr	r1, r1, #5
   12a64:	add	r7, r7, r1, lsl #2
   12a68:	str	r7, [r5]
   12a6c:	bne	12a94 <__assert_fail@plt+0x1394>
   12a70:	mov	r0, #0
   12a74:	bl	12e64 <__assert_fail@plt+0x1764>
   12a78:	mov	r7, r0
   12a7c:	ldr	r1, [r0], #4
   12a80:	cmp	r1, #1
   12a84:	bne	12a34 <__assert_fail@plt+0x1334>
   12a88:	ldr	r0, [r0]
   12a8c:	bl	13ddc <__assert_fail@plt+0x26dc>
   12a90:	b	12a38 <__assert_fail@plt+0x1338>
   12a94:	mov	r4, r6
   12a98:	ldr	r0, [r7]
   12a9c:	str	r4, [sp, #4]
   12aa0:	cmp	r0, #0
   12aa4:	beq	12e0c <__assert_fail@plt+0x170c>
   12aa8:	ldr	r1, [sp, #4]
   12aac:	movw	r4, #51532	; 0xc94c
   12ab0:	movt	r4, #2
   12ab4:	add	r1, r1, #4
   12ab8:	str	r1, [sp, #8]
   12abc:	b	12adc <__assert_fail@plt+0x13dc>
   12ac0:	bl	115e0 <__gmpz_clear@plt>
   12ac4:	mov	r0, r9
   12ac8:	bl	13ddc <__assert_fail@plt+0x26dc>
   12acc:	ldr	r7, [r5]
   12ad0:	ldr	r0, [r7]
   12ad4:	cmp	r0, #0
   12ad8:	beq	12e0c <__assert_fail@plt+0x170c>
   12adc:	movw	r1, #51511	; 0xc937
   12ae0:	movt	r1, #2
   12ae4:	bl	113d0 <strcmp@plt>
   12ae8:	clz	r1, r0
   12aec:	cmp	r0, #0
   12af0:	lsr	r1, r1, #5
   12af4:	add	r6, r7, r1, lsl #2
   12af8:	mov	r1, #0
   12afc:	str	r6, [r5]
   12b00:	beq	12b70 <__assert_fail@plt+0x1470>
   12b04:	ldr	r0, [r6]
   12b08:	cmp	r0, #0
   12b0c:	beq	12e0c <__assert_fail@plt+0x170c>
   12b10:	movw	r1, #53576	; 0xd148
   12b14:	movt	r1, #2
   12b18:	bl	113d0 <strcmp@plt>
   12b1c:	clz	r1, r0
   12b20:	cmp	r0, #0
   12b24:	lsr	r1, r1, #5
   12b28:	add	r6, r6, r1, lsl #2
   12b2c:	str	r6, [r5]
   12b30:	beq	12b6c <__assert_fail@plt+0x146c>
   12b34:	ldr	r0, [r6]
   12b38:	cmp	r0, #0
   12b3c:	beq	12e0c <__assert_fail@plt+0x170c>
   12b40:	movw	r1, #51513	; 0xc939
   12b44:	movt	r1, #2
   12b48:	bl	113d0 <strcmp@plt>
   12b4c:	clz	r1, r0
   12b50:	cmp	r0, #0
   12b54:	lsr	r1, r1, #5
   12b58:	add	r1, r6, r1, lsl #2
   12b5c:	str	r1, [r5]
   12b60:	mov	r1, #2
   12b64:	beq	12b70 <__assert_fail@plt+0x1470>
   12b68:	b	12e0c <__assert_fail@plt+0x170c>
   12b6c:	mov	r1, #1
   12b70:	ldr	r7, [sp, #12]
   12b74:	str	r1, [sp, #16]
   12b78:	mov	r0, r7
   12b7c:	bl	12e64 <__assert_fail@plt+0x1764>
   12b80:	ldr	r6, [r5]
   12b84:	mov	sl, r0
   12b88:	ldr	r0, [r6]
   12b8c:	cmp	r0, #0
   12b90:	beq	12ca0 <__assert_fail@plt+0x15a0>
   12b94:	cmp	r7, #0
   12b98:	beq	12c5c <__assert_fail@plt+0x155c>
   12b9c:	b	12bc4 <__assert_fail@plt+0x14c4>
   12ba0:	ldr	r0, [r0]
   12ba4:	bl	13ddc <__assert_fail@plt+0x26dc>
   12ba8:	mov	r0, r8
   12bac:	bl	13ddc <__assert_fail@plt+0x26dc>
   12bb0:	ldr	r6, [r5]
   12bb4:	mov	sl, r9
   12bb8:	ldr	r0, [r6]
   12bbc:	cmp	r0, #0
   12bc0:	beq	12ca4 <__assert_fail@plt+0x15a4>
   12bc4:	mov	r1, r4
   12bc8:	bl	113d0 <strcmp@plt>
   12bcc:	clz	r1, r0
   12bd0:	cmp	r0, #0
   12bd4:	lsr	r1, r1, #5
   12bd8:	add	r1, r6, r1, lsl #2
   12bdc:	str	r1, [r5]
   12be0:	bne	12ca0 <__assert_fail@plt+0x15a0>
   12be4:	mov	r0, #1
   12be8:	bl	12e64 <__assert_fail@plt+0x1764>
   12bec:	mov	r8, r0
   12bf0:	mov	r0, sl
   12bf4:	mov	r1, r8
   12bf8:	bl	1399c <__assert_fail@plt+0x229c>
   12bfc:	mov	r9, r0
   12c00:	mov	r0, sl
   12c04:	ldr	r1, [r0], #4
   12c08:	cmp	r1, #1
   12c0c:	bne	12c1c <__assert_fail@plt+0x151c>
   12c10:	ldr	r0, [r0]
   12c14:	bl	13ddc <__assert_fail@plt+0x26dc>
   12c18:	b	12c20 <__assert_fail@plt+0x1520>
   12c1c:	bl	115e0 <__gmpz_clear@plt>
   12c20:	mov	r0, sl
   12c24:	bl	13ddc <__assert_fail@plt+0x26dc>
   12c28:	mov	r0, r8
   12c2c:	ldr	r1, [r0], #4
   12c30:	cmp	r1, #1
   12c34:	beq	12ba0 <__assert_fail@plt+0x14a0>
   12c38:	bl	115e0 <__gmpz_clear@plt>
   12c3c:	b	12ba8 <__assert_fail@plt+0x14a8>
   12c40:	bl	115e0 <__gmpz_clear@plt>
   12c44:	mov	r0, r6
   12c48:	bl	13ddc <__assert_fail@plt+0x26dc>
   12c4c:	ldr	r6, [r5]
   12c50:	ldr	r0, [r6]
   12c54:	cmp	r0, #0
   12c58:	beq	12ca0 <__assert_fail@plt+0x15a0>
   12c5c:	mov	r1, r4
   12c60:	bl	113d0 <strcmp@plt>
   12c64:	clz	r1, r0
   12c68:	cmp	r0, #0
   12c6c:	lsr	r1, r1, #5
   12c70:	add	r1, r6, r1, lsl #2
   12c74:	str	r1, [r5]
   12c78:	bne	12ca0 <__assert_fail@plt+0x15a0>
   12c7c:	mov	r0, #0
   12c80:	bl	12e64 <__assert_fail@plt+0x1764>
   12c84:	mov	r6, r0
   12c88:	ldr	r1, [r0], #4
   12c8c:	cmp	r1, #1
   12c90:	bne	12c40 <__assert_fail@plt+0x1540>
   12c94:	ldr	r0, [r0]
   12c98:	bl	13ddc <__assert_fail@plt+0x26dc>
   12c9c:	b	12c44 <__assert_fail@plt+0x1544>
   12ca0:	mov	r9, sl
   12ca4:	cmp	r7, #0
   12ca8:	beq	12df0 <__assert_fail@plt+0x16f0>
   12cac:	ldr	r0, [sp, #4]
   12cb0:	ldr	r0, [r0]
   12cb4:	cmp	r0, #0
   12cb8:	beq	12d30 <__assert_fail@plt+0x1630>
   12cbc:	cmp	r0, #1
   12cc0:	mvn	r2, #47	; 0x2f
   12cc4:	bne	12e3c <__assert_fail@plt+0x173c>
   12cc8:	ldr	r0, [sp, #8]
   12ccc:	ldr	r6, [r0]
   12cd0:	ldrb	r0, [r6]
   12cd4:	sub	r0, r0, #45	; 0x2d
   12cd8:	clz	r0, r0
   12cdc:	lsr	r0, r0, #5
   12ce0:	ldrb	r1, [r6, r0]
   12ce4:	add	r0, r0, #1
   12ce8:	uxtab	r1, r2, r1
   12cec:	cmp	r1, #9
   12cf0:	bhi	12e18 <__assert_fail@plt+0x1718>
   12cf4:	ldrb	r1, [r6, r0]
   12cf8:	add	r0, r0, #1
   12cfc:	cmp	r1, #0
   12d00:	bne	12ce8 <__assert_fail@plt+0x15e8>
   12d04:	ldr	r0, [sp, #8]
   12d08:	mov	r1, r6
   12d0c:	mov	r2, #10
   12d10:	bl	116b8 <__gmpz_init_set_str@plt>
   12d14:	cmp	r0, #0
   12d18:	bne	12e40 <__assert_fail@plt+0x1740>
   12d1c:	mov	r0, r6
   12d20:	bl	13ddc <__assert_fail@plt+0x26dc>
   12d24:	ldr	r0, [sp, #4]
   12d28:	mov	r1, #0
   12d2c:	str	r1, [r0]
   12d30:	ldr	r0, [r9]
   12d34:	cmp	r0, #0
   12d38:	beq	12da8 <__assert_fail@plt+0x16a8>
   12d3c:	cmp	r0, #1
   12d40:	mvn	r3, #47	; 0x2f
   12d44:	bne	12e3c <__assert_fail@plt+0x173c>
   12d48:	mov	r0, r9
   12d4c:	ldr	r6, [r0, #4]!
   12d50:	ldrb	r1, [r6]
   12d54:	sub	r1, r1, #45	; 0x2d
   12d58:	clz	r1, r1
   12d5c:	lsr	r1, r1, #5
   12d60:	ldrb	r2, [r6, r1]
   12d64:	add	r1, r1, #1
   12d68:	uxtab	r2, r3, r2
   12d6c:	cmp	r2, #9
   12d70:	bhi	12e18 <__assert_fail@plt+0x1718>
   12d74:	ldrb	r2, [r6, r1]
   12d78:	add	r1, r1, #1
   12d7c:	cmp	r2, #0
   12d80:	bne	12d68 <__assert_fail@plt+0x1668>
   12d84:	mov	r1, r6
   12d88:	mov	r2, #10
   12d8c:	bl	116b8 <__gmpz_init_set_str@plt>
   12d90:	cmp	r0, #0
   12d94:	bne	12e40 <__assert_fail@plt+0x1740>
   12d98:	mov	r0, r6
   12d9c:	bl	13ddc <__assert_fail@plt+0x26dc>
   12da0:	mov	r0, #0
   12da4:	str	r0, [r9]
   12da8:	ldr	r1, [sp, #16]
   12dac:	movw	r3, #5288	; 0x14a8
   12db0:	movt	r3, #1
   12db4:	cmp	r1, #0
   12db8:	beq	12de0 <__assert_fail@plt+0x16e0>
   12dbc:	ldr	r0, [r9, #8]
   12dc0:	cmp	r0, #0
   12dc4:	beq	12e58 <__assert_fail@plt+0x1758>
   12dc8:	movw	r0, #5084	; 0x13dc
   12dcc:	movw	r3, #5588	; 0x15d4
   12dd0:	cmp	r1, #1
   12dd4:	movt	r0, #1
   12dd8:	movt	r3, #1
   12ddc:	moveq	r3, r0
   12de0:	ldr	r0, [sp, #8]
   12de4:	add	r2, r9, #4
   12de8:	mov	r1, r0
   12dec:	blx	r3
   12df0:	mov	r0, r9
   12df4:	ldr	r1, [r0], #4
   12df8:	cmp	r1, #1
   12dfc:	bne	12ac0 <__assert_fail@plt+0x13c0>
   12e00:	ldr	r0, [r0]
   12e04:	bl	13ddc <__assert_fail@plt+0x26dc>
   12e08:	b	12ac4 <__assert_fail@plt+0x13c4>
   12e0c:	ldr	r0, [sp, #4]
   12e10:	sub	sp, fp, #28
   12e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e18:	movw	r1, #51490	; 0xc922
   12e1c:	movt	r1, #2
   12e20:	mov	r0, #0
   12e24:	mov	r2, #5
   12e28:	bl	11484 <dcgettext@plt>
   12e2c:	mov	r2, r0
   12e30:	mov	r0, #2
   12e34:	mov	r1, #0
   12e38:	bl	11520 <error@plt>
   12e3c:	bl	116e8 <abort@plt>
   12e40:	movw	r2, #51824	; 0xca70
   12e44:	mov	r0, #3
   12e48:	mov	r1, #34	; 0x22
   12e4c:	mov	r3, r6
   12e50:	movt	r2, #2
   12e54:	bl	11520 <error@plt>
   12e58:	movw	r1, #51515	; 0xc93b
   12e5c:	movt	r1, #2
   12e60:	b	12e20 <__assert_fail@plt+0x1720>
   12e64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e68:	add	fp, sp, #28
   12e6c:	sub	sp, sp, #132	; 0x84
   12e70:	movw	r6, #57776	; 0xe1b0
   12e74:	mov	r4, r0
   12e78:	movt	r6, #3
   12e7c:	ldr	r5, [r6]
   12e80:	ldr	r0, [r5]
   12e84:	cmp	r0, #0
   12e88:	beq	138ec <__assert_fail@plt+0x21ec>
   12e8c:	movw	r1, #51488	; 0xc920
   12e90:	movt	r1, #2
   12e94:	bl	113d0 <strcmp@plt>
   12e98:	clz	r1, r0
   12e9c:	cmp	r0, #0
   12ea0:	lsr	r1, r1, #5
   12ea4:	add	r7, r5, r1, lsl #2
   12ea8:	str	r7, [r6]
   12eac:	ldr	r5, [r5, r1, lsl #2]
   12eb0:	beq	12ffc <__assert_fail@plt+0x18fc>
   12eb4:	cmp	r5, #0
   12eb8:	beq	138ec <__assert_fail@plt+0x21ec>
   12ebc:	movw	r1, #51534	; 0xc94e
   12ec0:	mov	r0, r5
   12ec4:	movt	r1, #2
   12ec8:	bl	113d0 <strcmp@plt>
   12ecc:	clz	r1, r0
   12ed0:	cmp	r0, #0
   12ed4:	lsr	r1, r1, #5
   12ed8:	add	r5, r7, r1, lsl #2
   12edc:	str	r5, [r6]
   12ee0:	beq	13038 <__assert_fail@plt+0x1938>
   12ee4:	ldr	r0, [r5]
   12ee8:	cmp	r0, #0
   12eec:	beq	138ec <__assert_fail@plt+0x21ec>
   12ef0:	movw	r1, #51541	; 0xc955
   12ef4:	movt	r1, #2
   12ef8:	bl	113d0 <strcmp@plt>
   12efc:	clz	r1, r0
   12f00:	cmp	r0, #0
   12f04:	lsr	r1, r1, #5
   12f08:	add	r5, r5, r1, lsl #2
   12f0c:	str	r5, [r6]
   12f10:	beq	13064 <__assert_fail@plt+0x1964>
   12f14:	ldr	r0, [r5]
   12f18:	cmp	r0, #0
   12f1c:	beq	138ec <__assert_fail@plt+0x21ec>
   12f20:	movw	r1, #51547	; 0xc95b
   12f24:	movt	r1, #2
   12f28:	bl	113d0 <strcmp@plt>
   12f2c:	clz	r1, r0
   12f30:	cmp	r0, #0
   12f34:	lsr	r1, r1, #5
   12f38:	add	r5, r5, r1, lsl #2
   12f3c:	str	r5, [r6]
   12f40:	beq	13118 <__assert_fail@plt+0x1a18>
   12f44:	ldr	r0, [r5]
   12f48:	cmp	r0, #0
   12f4c:	beq	138ec <__assert_fail@plt+0x21ec>
   12f50:	movw	r1, #51553	; 0xc961
   12f54:	movt	r1, #2
   12f58:	bl	113d0 <strcmp@plt>
   12f5c:	clz	r1, r0
   12f60:	cmp	r0, #0
   12f64:	lsr	r1, r1, #5
   12f68:	add	r5, r5, r1, lsl #2
   12f6c:	str	r5, [r6]
   12f70:	beq	131a8 <__assert_fail@plt+0x1aa8>
   12f74:	ldr	r0, [r5]
   12f78:	cmp	r0, #0
   12f7c:	beq	138ec <__assert_fail@plt+0x21ec>
   12f80:	movw	r1, #51600	; 0xc990
   12f84:	movt	r1, #2
   12f88:	bl	113d0 <strcmp@plt>
   12f8c:	clz	r1, r0
   12f90:	cmp	r0, #0
   12f94:	lsr	r1, r1, #5
   12f98:	add	r5, r5, r1, lsl #2
   12f9c:	str	r5, [r6]
   12fa0:	beq	13540 <__assert_fail@plt+0x1e40>
   12fa4:	ldr	r0, [r5]
   12fa8:	cmp	r0, #0
   12fac:	beq	12fd4 <__assert_fail@plt+0x18d4>
   12fb0:	movw	r1, #51973	; 0xcb05
   12fb4:	movt	r1, #2
   12fb8:	bl	113d0 <strcmp@plt>
   12fbc:	clz	r1, r0
   12fc0:	cmp	r0, #0
   12fc4:	lsr	r1, r1, #5
   12fc8:	add	r5, r5, r1, lsl #2
   12fcc:	str	r5, [r6]
   12fd0:	beq	13930 <__assert_fail@plt+0x2230>
   12fd4:	add	r0, r5, #4
   12fd8:	str	r0, [r6]
   12fdc:	mov	r0, #16
   12fe0:	ldr	r4, [r5]
   12fe4:	bl	2b30c <__assert_fail@plt+0x19c0c>
   12fe8:	mov	r7, r0
   12fec:	mov	r0, #1
   12ff0:	str	r0, [r7]
   12ff4:	mov	r0, r4
   12ff8:	b	13024 <__assert_fail@plt+0x1924>
   12ffc:	cmp	r5, #0
   13000:	beq	138ec <__assert_fail@plt+0x21ec>
   13004:	add	r0, r7, #4
   13008:	str	r0, [r6]
   1300c:	mov	r0, #16
   13010:	bl	2b30c <__assert_fail@plt+0x19c0c>
   13014:	mov	r7, r0
   13018:	mov	r0, #1
   1301c:	str	r0, [r7]
   13020:	mov	r0, r5
   13024:	bl	2b810 <__assert_fail@plt+0x1a110>
   13028:	str	r0, [r7, #4]
   1302c:	mov	r0, r7
   13030:	sub	sp, fp, #28
   13034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13038:	mov	r0, r4
   1303c:	bl	12e64 <__assert_fail@plt+0x1764>
   13040:	mov	r4, r0
   13044:	ldr	r0, [r0]
   13048:	cmp	r0, #0
   1304c:	beq	130b0 <__assert_fail@plt+0x19b0>
   13050:	cmp	r0, #1
   13054:	bne	1392c <__assert_fail@plt+0x222c>
   13058:	mov	r5, r4
   1305c:	ldr	r6, [r5, #4]!
   13060:	b	130d8 <__assert_fail@plt+0x19d8>
   13064:	mov	r0, r4
   13068:	bl	12e64 <__assert_fail@plt+0x1764>
   1306c:	mov	r6, r0
   13070:	mov	r0, r4
   13074:	bl	12e64 <__assert_fail@plt+0x1764>
   13078:	mov	r5, r0
   1307c:	cmp	r4, #0
   13080:	beq	1318c <__assert_fail@plt+0x1a8c>
   13084:	mov	r0, r6
   13088:	mov	r1, r5
   1308c:	bl	1399c <__assert_fail@plt+0x229c>
   13090:	mov	r7, r0
   13094:	mov	r0, r6
   13098:	ldr	r1, [r0], #4
   1309c:	cmp	r1, #1
   130a0:	bne	13508 <__assert_fail@plt+0x1e08>
   130a4:	ldr	r0, [r0]
   130a8:	bl	13ddc <__assert_fail@plt+0x26dc>
   130ac:	b	1350c <__assert_fail@plt+0x1e0c>
   130b0:	add	r5, r4, #4
   130b4:	mov	r0, #0
   130b8:	mov	r1, #10
   130bc:	mov	r2, r5
   130c0:	bl	11490 <__gmpz_get_str@plt>
   130c4:	mov	r6, r0
   130c8:	mov	r0, r5
   130cc:	bl	115e0 <__gmpz_clear@plt>
   130d0:	mov	r0, #1
   130d4:	stm	r4, {r0, r6}
   130d8:	mov	r0, r6
   130dc:	bl	1405c <__assert_fail@plt+0x295c>
   130e0:	mov	r6, r0
   130e4:	mov	r0, #16
   130e8:	bl	2b30c <__assert_fail@plt+0x19c0c>
   130ec:	mov	r1, #0
   130f0:	mov	r7, r0
   130f4:	str	r1, [r0], #4
   130f8:	mov	r1, r6
   130fc:	bl	11670 <__gmpz_init_set_ui@plt>
   13100:	ldr	r0, [r4]
   13104:	cmp	r0, #1
   13108:	bne	13650 <__assert_fail@plt+0x1f50>
   1310c:	ldr	r0, [r5]
   13110:	bl	13ddc <__assert_fail@plt+0x26dc>
   13114:	b	13658 <__assert_fail@plt+0x1f58>
   13118:	mov	r0, r4
   1311c:	bl	12e64 <__assert_fail@plt+0x1764>
   13120:	mov	r8, r0
   13124:	mov	r0, r4
   13128:	bl	12e64 <__assert_fail@plt+0x1764>
   1312c:	mov	r4, r0
   13130:	ldr	r0, [r8]
   13134:	cmp	r0, #1
   13138:	beq	1316c <__assert_fail@plt+0x1a6c>
   1313c:	cmp	r0, #0
   13140:	bne	1392c <__assert_fail@plt+0x222c>
   13144:	add	r6, r8, #4
   13148:	mov	r0, #0
   1314c:	mov	r1, #10
   13150:	mov	r2, r6
   13154:	bl	11490 <__gmpz_get_str@plt>
   13158:	mov	r7, r0
   1315c:	mov	r0, r6
   13160:	bl	115e0 <__gmpz_clear@plt>
   13164:	mov	r0, #1
   13168:	stm	r8, {r0, r7}
   1316c:	ldr	r0, [r4]
   13170:	cmp	r0, #0
   13174:	beq	13330 <__assert_fail@plt+0x1c30>
   13178:	cmp	r0, #1
   1317c:	bne	1392c <__assert_fail@plt+0x222c>
   13180:	mov	r9, r4
   13184:	ldr	r7, [r9, #4]!
   13188:	b	13358 <__assert_fail@plt+0x1c58>
   1318c:	mov	r7, r6
   13190:	mov	r0, r5
   13194:	ldr	r1, [r0], #4
   13198:	cmp	r1, #1
   1319c:	beq	13524 <__assert_fail@plt+0x1e24>
   131a0:	bl	115e0 <__gmpz_clear@plt>
   131a4:	b	1352c <__assert_fail@plt+0x1e2c>
   131a8:	mov	r0, r4
   131ac:	bl	12e64 <__assert_fail@plt+0x1764>
   131b0:	mov	r5, r0
   131b4:	mov	r0, r4
   131b8:	bl	12e64 <__assert_fail@plt+0x1764>
   131bc:	mov	sl, r0
   131c0:	mov	r0, r4
   131c4:	bl	12e64 <__assert_fail@plt+0x1764>
   131c8:	mov	r9, r0
   131cc:	ldr	r0, [r5]
   131d0:	cmp	r0, #1
   131d4:	beq	13210 <__assert_fail@plt+0x1b10>
   131d8:	cmp	r0, #0
   131dc:	bne	1392c <__assert_fail@plt+0x222c>
   131e0:	add	r4, r5, #4
   131e4:	mov	r0, #0
   131e8:	mov	r1, #10
   131ec:	mov	r2, r4
   131f0:	bl	11490 <__gmpz_get_str@plt>
   131f4:	mov	r6, r5
   131f8:	mov	r5, r0
   131fc:	mov	r0, r4
   13200:	bl	115e0 <__gmpz_clear@plt>
   13204:	mov	r0, #1
   13208:	stm	r6, {r0, r5}
   1320c:	mov	r5, r6
   13210:	ldr	r0, [sl]
   13214:	cmp	r0, #0
   13218:	beq	13288 <__assert_fail@plt+0x1b88>
   1321c:	cmp	r0, #1
   13220:	bne	1392c <__assert_fail@plt+0x222c>
   13224:	mov	r0, sl
   13228:	mvn	r2, #47	; 0x2f
   1322c:	ldr	r4, [r0, #4]!
   13230:	ldrb	r1, [r4]
   13234:	sub	r1, r1, #45	; 0x2d
   13238:	clz	r1, r1
   1323c:	lsr	r1, r1, #5
   13240:	ldrb	r3, [r4, r1]
   13244:	add	r1, r1, #1
   13248:	uxtab	r3, r2, r3
   1324c:	cmp	r3, #9
   13250:	bhi	135a8 <__assert_fail@plt+0x1ea8>
   13254:	ldrb	r3, [r4, r1]
   13258:	add	r1, r1, #1
   1325c:	cmp	r3, #0
   13260:	bne	13248 <__assert_fail@plt+0x1b48>
   13264:	mov	r1, r4
   13268:	mov	r2, #10
   1326c:	bl	116b8 <__gmpz_init_set_str@plt>
   13270:	cmp	r0, #0
   13274:	bne	13984 <__assert_fail@plt+0x2284>
   13278:	mov	r0, r4
   1327c:	bl	13ddc <__assert_fail@plt+0x26dc>
   13280:	mov	r0, #0
   13284:	str	r0, [sl]
   13288:	ldr	r0, [r9]
   1328c:	cmp	r0, #0
   13290:	beq	13300 <__assert_fail@plt+0x1c00>
   13294:	cmp	r0, #1
   13298:	bne	1392c <__assert_fail@plt+0x222c>
   1329c:	mov	r0, r9
   132a0:	mvn	r2, #47	; 0x2f
   132a4:	ldr	r4, [r0, #4]!
   132a8:	ldrb	r1, [r4]
   132ac:	sub	r1, r1, #45	; 0x2d
   132b0:	clz	r1, r1
   132b4:	lsr	r1, r1, #5
   132b8:	ldrb	r3, [r4, r1]
   132bc:	add	r1, r1, #1
   132c0:	uxtab	r3, r2, r3
   132c4:	cmp	r3, #9
   132c8:	bhi	135a8 <__assert_fail@plt+0x1ea8>
   132cc:	ldrb	r3, [r4, r1]
   132d0:	add	r1, r1, #1
   132d4:	cmp	r3, #0
   132d8:	bne	132c0 <__assert_fail@plt+0x1bc0>
   132dc:	mov	r1, r4
   132e0:	mov	r2, #10
   132e4:	bl	116b8 <__gmpz_init_set_str@plt>
   132e8:	cmp	r0, #0
   132ec:	bne	13984 <__assert_fail@plt+0x2284>
   132f0:	mov	r0, r4
   132f4:	bl	13ddc <__assert_fail@plt+0x26dc>
   132f8:	mov	r0, #0
   132fc:	str	r0, [r9]
   13300:	ldr	r0, [sl, #8]
   13304:	mvn	r6, #0
   13308:	mvn	r8, #0
   1330c:	cmp	r0, #0
   13310:	bmi	13684 <__assert_fail@plt+0x1f84>
   13314:	cmp	r0, #1
   13318:	bls	1366c <__assert_fail@plt+0x1f6c>
   1331c:	mvn	r8, #1
   13320:	ldr	r0, [r9, #8]
   13324:	cmp	r0, #0
   13328:	bpl	13690 <__assert_fail@plt+0x1f90>
   1332c:	b	136b8 <__assert_fail@plt+0x1fb8>
   13330:	add	r9, r4, #4
   13334:	mov	r0, #0
   13338:	mov	r1, #10
   1333c:	mov	r2, r9
   13340:	bl	11490 <__gmpz_get_str@plt>
   13344:	mov	r7, r0
   13348:	mov	r0, r9
   1334c:	bl	115e0 <__gmpz_clear@plt>
   13350:	mov	r0, #1
   13354:	stm	r4, {r0, r7}
   13358:	mov	r5, r8
   1335c:	ldrb	r0, [r7]
   13360:	mov	sl, #0
   13364:	ldr	r6, [r5, #4]!
   13368:	cmp	r0, #0
   1336c:	beq	135f4 <__assert_fail@plt+0x1ef4>
   13370:	bl	114fc <__ctype_get_mb_cur_max@plt>
   13374:	cmp	r0, #2
   13378:	bcc	1358c <__assert_fail@plt+0x1e8c>
   1337c:	mov	sl, #0
   13380:	add	r0, sp, #76	; 0x4c
   13384:	str	r4, [sp, #8]
   13388:	str	r5, [sp, #4]
   1338c:	str	r9, [sp, #12]
   13390:	str	sl, [sp, #84]	; 0x54
   13394:	str	sl, [sp, #80]	; 0x50
   13398:	strb	sl, [sp, #88]	; 0x58
   1339c:	strb	sl, [sp, #76]	; 0x4c
   133a0:	str	r6, [sp, #92]	; 0x5c
   133a4:	bl	14110 <__assert_fail@plt+0x2a10>
   133a8:	ldrb	r0, [sp, #100]	; 0x64
   133ac:	cmp	r0, #0
   133b0:	beq	133c0 <__assert_fail@plt+0x1cc0>
   133b4:	ldr	r0, [sp, #104]	; 0x68
   133b8:	cmp	r0, #0
   133bc:	beq	135e8 <__assert_fail@plt+0x1ee8>
   133c0:	add	r4, sp, #20
   133c4:	mov	r9, #0
   133c8:	mov	r5, #0
   133cc:	mov	sl, #0
   133d0:	add	r0, r4, #4
   133d4:	str	r0, [sp, #16]
   133d8:	ldr	r0, [sp, #96]	; 0x60
   133dc:	add	r5, r5, #1
   133e0:	cmp	r0, #1
   133e4:	bne	13408 <__assert_fail@plt+0x1d08>
   133e8:	ldr	r6, [sp, #92]	; 0x5c
   133ec:	mov	r0, r7
   133f0:	ldrb	r1, [r6]
   133f4:	bl	13f78 <__assert_fail@plt+0x2878>
   133f8:	mov	r1, #1
   133fc:	cmp	r0, #0
   13400:	beq	134d8 <__assert_fail@plt+0x1dd8>
   13404:	b	135e4 <__assert_fail@plt+0x1ee4>
   13408:	ldr	r0, [sp, #16]
   1340c:	strb	r9, [sp, #20]
   13410:	str	r7, [sp, #36]	; 0x24
   13414:	str	r9, [r0]
   13418:	str	r9, [r0, #4]
   1341c:	mov	r0, r4
   13420:	strb	r9, [sp, #32]
   13424:	bl	14110 <__assert_fail@plt+0x2a10>
   13428:	ldr	r0, [sp, #48]	; 0x30
   1342c:	ldrb	r1, [sp, #44]	; 0x2c
   13430:	cmp	r0, #0
   13434:	bne	13440 <__assert_fail@plt+0x1d40>
   13438:	cmp	r1, #0
   1343c:	bne	134d0 <__assert_fail@plt+0x1dd0>
   13440:	clz	r1, r1
   13444:	lsr	r1, r1, #5
   13448:	tst	r1, #1
   1344c:	bne	13470 <__assert_fail@plt+0x1d70>
   13450:	ldrb	r1, [sp, #100]	; 0x64
   13454:	cmp	r1, #0
   13458:	beq	13470 <__assert_fail@plt+0x1d70>
   1345c:	ldr	r1, [sp, #104]	; 0x68
   13460:	cmp	r0, r1
   13464:	beq	135e4 <__assert_fail@plt+0x1ee4>
   13468:	ldr	r6, [sp, #40]	; 0x28
   1346c:	b	13498 <__assert_fail@plt+0x1d98>
   13470:	ldr	r6, [sp, #40]	; 0x28
   13474:	ldr	r0, [sp, #96]	; 0x60
   13478:	cmp	r6, r0
   1347c:	bne	13498 <__assert_fail@plt+0x1d98>
   13480:	ldr	r1, [sp, #92]	; 0x5c
   13484:	ldr	r0, [sp, #36]	; 0x24
   13488:	mov	r2, r6
   1348c:	bl	115b0 <bcmp@plt>
   13490:	cmp	r0, #0
   13494:	beq	135e4 <__assert_fail@plt+0x1ee4>
   13498:	strb	r9, [sp, #32]
   1349c:	ldr	r0, [sp, #36]	; 0x24
   134a0:	add	r0, r0, r6
   134a4:	str	r0, [sp, #36]	; 0x24
   134a8:	mov	r0, r4
   134ac:	bl	14110 <__assert_fail@plt+0x2a10>
   134b0:	ldrb	r2, [sp, #44]	; 0x2c
   134b4:	clz	r0, r2
   134b8:	lsr	r1, r0, #5
   134bc:	ldr	r0, [sp, #48]	; 0x30
   134c0:	cmp	r0, #0
   134c4:	bne	13448 <__assert_fail@plt+0x1d48>
   134c8:	cmp	r2, #0
   134cc:	beq	13448 <__assert_fail@plt+0x1d48>
   134d0:	ldr	r6, [sp, #92]	; 0x5c
   134d4:	ldr	r1, [sp, #96]	; 0x60
   134d8:	add	r0, r6, r1
   134dc:	strb	sl, [sp, #88]	; 0x58
   134e0:	str	r0, [sp, #92]	; 0x5c
   134e4:	add	r0, sp, #76	; 0x4c
   134e8:	bl	14110 <__assert_fail@plt+0x2a10>
   134ec:	ldrb	r0, [sp, #100]	; 0x64
   134f0:	cmp	r0, #0
   134f4:	beq	133d8 <__assert_fail@plt+0x1cd8>
   134f8:	ldr	r0, [sp, #104]	; 0x68
   134fc:	cmp	r0, #0
   13500:	bne	133d8 <__assert_fail@plt+0x1cd8>
   13504:	b	135e8 <__assert_fail@plt+0x1ee8>
   13508:	bl	115e0 <__gmpz_clear@plt>
   1350c:	mov	r0, r6
   13510:	bl	13ddc <__assert_fail@plt+0x26dc>
   13514:	mov	r0, r5
   13518:	ldr	r1, [r0], #4
   1351c:	cmp	r1, #1
   13520:	bne	131a0 <__assert_fail@plt+0x1aa0>
   13524:	ldr	r0, [r0]
   13528:	bl	13ddc <__assert_fail@plt+0x26dc>
   1352c:	mov	r0, r5
   13530:	bl	13ddc <__assert_fail@plt+0x26dc>
   13534:	mov	r0, r7
   13538:	sub	sp, fp, #28
   1353c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13540:	mov	r0, r4
   13544:	bl	11dbc <__assert_fail@plt+0x6bc>
   13548:	ldr	r4, [r6]
   1354c:	mov	r7, r0
   13550:	ldr	r0, [r4]
   13554:	cmp	r0, #0
   13558:	beq	13954 <__assert_fail@plt+0x2254>
   1355c:	movw	r1, #51973	; 0xcb05
   13560:	movt	r1, #2
   13564:	bl	113d0 <strcmp@plt>
   13568:	clz	r1, r0
   1356c:	cmp	r0, #0
   13570:	lsr	r1, r1, #5
   13574:	add	r1, r4, r1, lsl #2
   13578:	str	r1, [r6]
   1357c:	bne	13960 <__assert_fail@plt+0x2260>
   13580:	mov	r0, r7
   13584:	sub	sp, fp, #28
   13588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1358c:	mov	r0, r6
   13590:	mov	r1, r7
   13594:	bl	113e8 <strcspn@plt>
   13598:	ldrb	sl, [r6, r0]
   1359c:	cmp	sl, #0
   135a0:	addne	sl, r0, #1
   135a4:	b	135f4 <__assert_fail@plt+0x1ef4>
   135a8:	mov	r0, #16
   135ac:	bl	2b30c <__assert_fail@plt+0x19c0c>
   135b0:	mov	r7, r0
   135b4:	mov	r0, #1
   135b8:	str	r0, [r7]
   135bc:	movw	r0, #51467	; 0xc90b
   135c0:	movt	r0, #2
   135c4:	bl	2b810 <__assert_fail@plt+0x1a110>
   135c8:	str	r0, [r7, #4]
   135cc:	mov	r0, r5
   135d0:	ldr	r1, [r0], #4
   135d4:	cmp	r1, #1
   135d8:	beq	13880 <__assert_fail@plt+0x2180>
   135dc:	bl	115e0 <__gmpz_clear@plt>
   135e0:	b	13888 <__assert_fail@plt+0x2188>
   135e4:	mov	sl, r5
   135e8:	ldr	r9, [sp, #12]
   135ec:	ldr	r5, [sp, #4]
   135f0:	ldr	r4, [sp, #8]
   135f4:	mov	r0, #16
   135f8:	bl	2b30c <__assert_fail@plt+0x19c0c>
   135fc:	mov	r1, #0
   13600:	mov	r7, r0
   13604:	str	r1, [r0], #4
   13608:	mov	r1, sl
   1360c:	bl	11670 <__gmpz_init_set_ui@plt>
   13610:	ldr	r0, [r8]
   13614:	cmp	r0, #1
   13618:	bne	13628 <__assert_fail@plt+0x1f28>
   1361c:	ldr	r0, [r5]
   13620:	bl	13ddc <__assert_fail@plt+0x26dc>
   13624:	b	13630 <__assert_fail@plt+0x1f30>
   13628:	mov	r0, r5
   1362c:	bl	115e0 <__gmpz_clear@plt>
   13630:	mov	r0, r8
   13634:	bl	13ddc <__assert_fail@plt+0x26dc>
   13638:	ldr	r0, [r4]
   1363c:	cmp	r0, #1
   13640:	bne	13650 <__assert_fail@plt+0x1f50>
   13644:	ldr	r0, [r9]
   13648:	bl	13ddc <__assert_fail@plt+0x26dc>
   1364c:	b	13658 <__assert_fail@plt+0x1f58>
   13650:	add	r0, r4, #4
   13654:	bl	115e0 <__gmpz_clear@plt>
   13658:	mov	r0, r4
   1365c:	bl	13ddc <__assert_fail@plt+0x26dc>
   13660:	mov	r0, r7
   13664:	sub	sp, fp, #28
   13668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1366c:	ldr	r1, [sl, #12]
   13670:	cmp	r0, #0
   13674:	ldr	r8, [r1]
   13678:	moveq	r8, r0
   1367c:	cmn	r8, #1
   13680:	mvneq	r8, #1
   13684:	ldr	r0, [r9, #8]
   13688:	cmp	r0, #0
   1368c:	bmi	136b8 <__assert_fail@plt+0x1fb8>
   13690:	cmp	r0, #1
   13694:	bls	136a0 <__assert_fail@plt+0x1fa0>
   13698:	mvn	r6, #1
   1369c:	b	136b8 <__assert_fail@plt+0x1fb8>
   136a0:	ldr	r1, [r9, #12]
   136a4:	cmp	r0, #0
   136a8:	ldr	r6, [r1]
   136ac:	moveq	r6, r0
   136b0:	cmn	r6, #1
   136b4:	mvneq	r6, #1
   136b8:	ldr	r4, [r5, #4]
   136bc:	str	r5, [sp, #16]
   136c0:	mov	r0, r4
   136c4:	bl	115bc <strlen@plt>
   136c8:	mov	r5, r0
   136cc:	bl	114fc <__ctype_get_mb_cur_max@plt>
   136d0:	cmp	r0, #2
   136d4:	mov	r0, r5
   136d8:	bcc	136e4 <__assert_fail@plt+0x1fe4>
   136dc:	mov	r0, r4
   136e0:	bl	1405c <__assert_fail@plt+0x295c>
   136e4:	add	r1, r6, #1
   136e8:	cmp	r1, #2
   136ec:	bcc	13740 <__assert_fail@plt+0x2040>
   136f0:	sub	r1, r8, #1
   136f4:	cmp	r1, r0
   136f8:	bcs	13740 <__assert_fail@plt+0x2040>
   136fc:	sub	r0, r0, r8
   13700:	add	r7, r0, #1
   13704:	cmp	r7, r6
   13708:	movhi	r7, r6
   1370c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   13710:	cmp	r0, #1
   13714:	bne	13754 <__assert_fail@plt+0x2054>
   13718:	add	r0, r7, #1
   1371c:	add	r4, r4, r8
   13720:	bl	2b30c <__assert_fail@plt+0x19c0c>
   13724:	sub	r1, r4, #1
   13728:	mov	r2, r7
   1372c:	mvn	r3, #0
   13730:	mov	r5, r0
   13734:	bl	116f4 <__mempcpy_chk@plt>
   13738:	mov	r4, r0
   1373c:	b	1383c <__assert_fail@plt+0x213c>
   13740:	movw	r0, #51467	; 0xc90b
   13744:	movt	r0, #2
   13748:	bl	2b810 <__assert_fail@plt+0x1a110>
   1374c:	mov	r5, r0
   13750:	b	13844 <__assert_fail@plt+0x2144>
   13754:	add	r0, r5, #1
   13758:	str	sl, [sp, #8]
   1375c:	str	r9, [sp, #12]
   13760:	bl	2b30c <__assert_fail@plt+0x19c0c>
   13764:	mov	r5, r0
   13768:	mov	r0, #0
   1376c:	str	r0, [sp, #84]	; 0x54
   13770:	str	r0, [sp, #80]	; 0x50
   13774:	strb	r0, [sp, #88]	; 0x58
   13778:	strb	r0, [sp, #76]	; 0x4c
   1377c:	add	r0, sp, #76	; 0x4c
   13780:	str	r4, [sp, #92]	; 0x5c
   13784:	bl	14110 <__assert_fail@plt+0x2a10>
   13788:	ldr	r0, [sp, #104]	; 0x68
   1378c:	mov	r4, r5
   13790:	cmp	r0, #0
   13794:	movwne	r0, #1
   13798:	cmp	r7, #0
   1379c:	beq	13834 <__assert_fail@plt+0x2134>
   137a0:	ldrb	r1, [sp, #100]	; 0x64
   137a4:	mov	r4, r5
   137a8:	clz	r1, r1
   137ac:	lsr	r1, r1, #5
   137b0:	orrs	r0, r1, r0
   137b4:	beq	13834 <__assert_fail@plt+0x2134>
   137b8:	mov	r9, #1
   137bc:	mov	sl, #0
   137c0:	add	r6, sp, #76	; 0x4c
   137c4:	mov	r4, r5
   137c8:	cmp	r9, r8
   137cc:	bcc	137ec <__assert_fail@plt+0x20ec>
   137d0:	ldr	r1, [sp, #92]	; 0x5c
   137d4:	ldr	r2, [sp, #96]	; 0x60
   137d8:	mov	r0, r4
   137dc:	mvn	r3, #0
   137e0:	bl	116f4 <__mempcpy_chk@plt>
   137e4:	mov	r4, r0
   137e8:	sub	r7, r7, #1
   137ec:	strb	sl, [sp, #88]	; 0x58
   137f0:	ldr	r0, [sp, #92]	; 0x5c
   137f4:	ldr	r1, [sp, #96]	; 0x60
   137f8:	add	r0, r0, r1
   137fc:	str	r0, [sp, #92]	; 0x5c
   13800:	mov	r0, r6
   13804:	bl	14110 <__assert_fail@plt+0x2a10>
   13808:	ldr	r0, [sp, #104]	; 0x68
   1380c:	cmp	r0, #0
   13810:	movwne	r0, #1
   13814:	cmp	r7, #0
   13818:	beq	13834 <__assert_fail@plt+0x2134>
   1381c:	ldrb	r1, [sp, #100]	; 0x64
   13820:	add	r9, r9, #1
   13824:	clz	r1, r1
   13828:	lsr	r1, r1, #5
   1382c:	orrs	r0, r1, r0
   13830:	bne	137c8 <__assert_fail@plt+0x20c8>
   13834:	ldr	r9, [sp, #12]
   13838:	ldr	sl, [sp, #8]
   1383c:	mov	r0, #0
   13840:	strb	r0, [r4]
   13844:	mov	r0, #16
   13848:	bl	2b30c <__assert_fail@plt+0x19c0c>
   1384c:	mov	r7, r0
   13850:	mov	r0, #1
   13854:	str	r0, [r7]
   13858:	mov	r0, r5
   1385c:	bl	2b810 <__assert_fail@plt+0x1a110>
   13860:	str	r0, [r7, #4]
   13864:	mov	r0, r5
   13868:	bl	13ddc <__assert_fail@plt+0x26dc>
   1386c:	ldr	r5, [sp, #16]
   13870:	mov	r0, r5
   13874:	ldr	r1, [r0], #4
   13878:	cmp	r1, #1
   1387c:	bne	135dc <__assert_fail@plt+0x1edc>
   13880:	ldr	r0, [r0]
   13884:	bl	13ddc <__assert_fail@plt+0x26dc>
   13888:	mov	r0, r5
   1388c:	bl	13ddc <__assert_fail@plt+0x26dc>
   13890:	mov	r0, sl
   13894:	ldr	r1, [r0], #4
   13898:	cmp	r1, #1
   1389c:	bne	138ac <__assert_fail@plt+0x21ac>
   138a0:	ldr	r0, [r0]
   138a4:	bl	13ddc <__assert_fail@plt+0x26dc>
   138a8:	b	138b0 <__assert_fail@plt+0x21b0>
   138ac:	bl	115e0 <__gmpz_clear@plt>
   138b0:	mov	r0, sl
   138b4:	bl	13ddc <__assert_fail@plt+0x26dc>
   138b8:	mov	r0, r9
   138bc:	ldr	r1, [r0], #4
   138c0:	cmp	r1, #1
   138c4:	bne	138d4 <__assert_fail@plt+0x21d4>
   138c8:	ldr	r0, [r0]
   138cc:	bl	13ddc <__assert_fail@plt+0x26dc>
   138d0:	b	138d8 <__assert_fail@plt+0x21d8>
   138d4:	bl	115e0 <__gmpz_clear@plt>
   138d8:	mov	r0, r9
   138dc:	bl	13ddc <__assert_fail@plt+0x26dc>
   138e0:	mov	r0, r7
   138e4:	sub	sp, fp, #28
   138e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138ec:	movw	r1, #51560	; 0xc968
   138f0:	movt	r1, #2
   138f4:	mov	r0, #0
   138f8:	mov	r2, #5
   138fc:	bl	11484 <dcgettext@plt>
   13900:	mov	r4, r0
   13904:	ldr	r0, [r6]
   13908:	ldr	r2, [r0, #-4]
   1390c:	mov	r0, #0
   13910:	mov	r1, #8
   13914:	bl	15d54 <__assert_fail@plt+0x4654>
   13918:	mov	r3, r0
   1391c:	mov	r0, #2
   13920:	mov	r1, #0
   13924:	mov	r2, r4
   13928:	bl	11520 <error@plt>
   1392c:	bl	116e8 <abort@plt>
   13930:	movw	r1, #51681	; 0xc9e1
   13934:	mov	r0, #0
   13938:	mov	r2, #5
   1393c:	movt	r1, #2
   13940:	bl	11484 <dcgettext@plt>
   13944:	mov	r2, r0
   13948:	mov	r0, #2
   1394c:	mov	r1, #0
   13950:	bl	11520 <error@plt>
   13954:	movw	r1, #51602	; 0xc992
   13958:	movt	r1, #2
   1395c:	b	138f4 <__assert_fail@plt+0x21f4>
   13960:	movw	r1, #51639	; 0xc9b7
   13964:	mov	r0, #0
   13968:	mov	r2, #5
   1396c:	movt	r1, #2
   13970:	bl	11484 <dcgettext@plt>
   13974:	mov	r4, r0
   13978:	ldr	r0, [r6]
   1397c:	ldr	r2, [r0]
   13980:	b	1390c <__assert_fail@plt+0x220c>
   13984:	movw	r2, #51824	; 0xca70
   13988:	mov	r0, #3
   1398c:	mov	r1, #34	; 0x22
   13990:	mov	r3, r4
   13994:	movt	r2, #2
   13998:	bl	11520 <error@plt>
   1399c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139a0:	add	fp, sp, #24
   139a4:	sub	sp, sp, #360	; 0x168
   139a8:	mov	r4, r0
   139ac:	ldr	r0, [r0]
   139b0:	mov	r5, r1
   139b4:	cmp	r0, #1
   139b8:	beq	139ec <__assert_fail@plt+0x22ec>
   139bc:	cmp	r0, #0
   139c0:	bne	13c7c <__assert_fail@plt+0x257c>
   139c4:	add	r6, r4, #4
   139c8:	mov	r0, #0
   139cc:	mov	r1, #10
   139d0:	mov	r2, r6
   139d4:	bl	11490 <__gmpz_get_str@plt>
   139d8:	mov	r7, r0
   139dc:	mov	r0, r6
   139e0:	bl	115e0 <__gmpz_clear@plt>
   139e4:	mov	r0, #1
   139e8:	stm	r4, {r0, r7}
   139ec:	ldr	r0, [r5]
   139f0:	cmp	r0, #0
   139f4:	beq	13a08 <__assert_fail@plt+0x2308>
   139f8:	cmp	r0, #1
   139fc:	bne	13c7c <__assert_fail@plt+0x257c>
   13a00:	ldr	r6, [r5, #4]
   13a04:	b	13a30 <__assert_fail@plt+0x2330>
   13a08:	add	r7, r5, #4
   13a0c:	mov	r0, #0
   13a10:	mov	r1, #10
   13a14:	mov	r2, r7
   13a18:	bl	11490 <__gmpz_get_str@plt>
   13a1c:	mov	r6, r0
   13a20:	mov	r0, r7
   13a24:	bl	115e0 <__gmpz_clear@plt>
   13a28:	mov	r0, #1
   13a2c:	stm	r5, {r0, r6}
   13a30:	movw	r0, #58096	; 0xe2f0
   13a34:	movw	r1, #710	; 0x2c6
   13a38:	movt	r0, #3
   13a3c:	str	r1, [r0]
   13a40:	mov	r0, #0
   13a44:	add	r1, sp, #16
   13a48:	str	r0, [sp, #12]
   13a4c:	str	r0, [sp, #8]
   13a50:	str	r0, [fp, #-92]	; 0xffffffa4
   13a54:	str	r1, [fp, #-96]	; 0xffffffa0
   13a58:	str	r0, [fp, #-108]	; 0xffffff94
   13a5c:	str	r0, [sp, #4]
   13a60:	str	r0, [fp, #-112]	; 0xffffff90
   13a64:	mov	r0, r6
   13a68:	bl	115bc <strlen@plt>
   13a6c:	mov	r1, r0
   13a70:	sub	r2, fp, #112	; 0x70
   13a74:	mov	r0, r6
   13a78:	bl	16340 <__assert_fail@plt+0x4c40>
   13a7c:	cmp	r0, #0
   13a80:	bne	13c80 <__assert_fail@plt+0x2580>
   13a84:	ldrb	r0, [fp, #-84]	; 0xffffffac
   13a88:	and	r0, r0, #127	; 0x7f
   13a8c:	strb	r0, [fp, #-84]	; 0xffffffac
   13a90:	ldr	r5, [r4, #4]
   13a94:	mov	r0, r5
   13a98:	bl	115bc <strlen@plt>
   13a9c:	mov	r2, r0
   13aa0:	add	r0, sp, #4
   13aa4:	mov	r1, r5
   13aa8:	mov	r3, #0
   13aac:	str	r0, [sp]
   13ab0:	sub	r0, fp, #112	; 0x70
   13ab4:	bl	1b570 <__assert_fail@plt+0x9e70>
   13ab8:	mov	r5, r0
   13abc:	cmp	r0, #0
   13ac0:	bmi	13b14 <__assert_fail@plt+0x2414>
   13ac4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13ac8:	cmp	r0, #0
   13acc:	beq	13b58 <__assert_fail@plt+0x2458>
   13ad0:	ldr	r0, [sp, #12]
   13ad4:	ldr	r0, [r0, #4]
   13ad8:	cmn	r0, #1
   13adc:	ble	13c20 <__assert_fail@plt+0x2520>
   13ae0:	ldr	r1, [r4, #4]
   13ae4:	mov	r2, #0
   13ae8:	strb	r2, [r1, r0]
   13aec:	ldr	r0, [sp, #8]
   13af0:	ldr	r5, [r4, #4]
   13af4:	ldr	r6, [r0, #4]
   13af8:	mov	r0, #16
   13afc:	bl	2b30c <__assert_fail@plt+0x19c0c>
   13b00:	mov	r4, r0
   13b04:	mov	r0, #1
   13b08:	str	r0, [r4]
   13b0c:	add	r0, r5, r6
   13b10:	b	13c3c <__assert_fail@plt+0x253c>
   13b14:	cmn	r5, #1
   13b18:	bne	13c98 <__assert_fail@plt+0x2598>
   13b1c:	ldr	r5, [fp, #-88]	; 0xffffffa8
   13b20:	mov	r0, #16
   13b24:	bl	2b30c <__assert_fail@plt+0x19c0c>
   13b28:	mov	r4, r0
   13b2c:	cmp	r5, #0
   13b30:	bne	13c2c <__assert_fail@plt+0x252c>
   13b34:	mov	r1, #0
   13b38:	mov	r0, r4
   13b3c:	str	r1, [r0], #4
   13b40:	mov	r1, #0
   13b44:	bl	11670 <__gmpz_init_set_ui@plt>
   13b48:	ldr	r0, [sp, #4]
   13b4c:	cmp	r0, #0
   13b50:	bne	13c50 <__assert_fail@plt+0x2550>
   13b54:	b	13c60 <__assert_fail@plt+0x2560>
   13b58:	bl	114fc <__ctype_get_mb_cur_max@plt>
   13b5c:	cmp	r0, #1
   13b60:	mov	r6, r5
   13b64:	beq	13bf4 <__assert_fail@plt+0x24f4>
   13b68:	ldr	r7, [r4, #4]
   13b6c:	mov	r6, #0
   13b70:	sub	r0, fp, #80	; 0x50
   13b74:	str	r6, [fp, #-72]	; 0xffffffb8
   13b78:	str	r6, [fp, #-76]	; 0xffffffb4
   13b7c:	strb	r6, [fp, #-68]	; 0xffffffbc
   13b80:	strb	r6, [fp, #-80]	; 0xffffffb0
   13b84:	str	r7, [fp, #-64]	; 0xffffffc0
   13b88:	bl	14110 <__assert_fail@plt+0x2a10>
   13b8c:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   13b90:	cmp	r0, #0
   13b94:	beq	13ba4 <__assert_fail@plt+0x24a4>
   13b98:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13b9c:	cmp	r0, #0
   13ba0:	beq	13bf4 <__assert_fail@plt+0x24f4>
   13ba4:	mov	r8, #0
   13ba8:	sub	r4, fp, #80	; 0x50
   13bac:	mov	r6, #0
   13bb0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13bb4:	sub	r1, r0, r7
   13bb8:	cmp	r1, r5
   13bbc:	addcc	r6, r6, #1
   13bc0:	bcs	13bf4 <__assert_fail@plt+0x24f4>
   13bc4:	strb	r8, [fp, #-68]	; 0xffffffbc
   13bc8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13bcc:	add	r0, r0, r1
   13bd0:	str	r0, [fp, #-64]	; 0xffffffc0
   13bd4:	mov	r0, r4
   13bd8:	bl	14110 <__assert_fail@plt+0x2a10>
   13bdc:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   13be0:	cmp	r0, #0
   13be4:	beq	13bb0 <__assert_fail@plt+0x24b0>
   13be8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13bec:	cmp	r0, #0
   13bf0:	bne	13bb0 <__assert_fail@plt+0x24b0>
   13bf4:	mov	r0, #16
   13bf8:	bl	2b30c <__assert_fail@plt+0x19c0c>
   13bfc:	mov	r1, #0
   13c00:	mov	r4, r0
   13c04:	str	r1, [r0], #4
   13c08:	mov	r1, r6
   13c0c:	bl	11670 <__gmpz_init_set_ui@plt>
   13c10:	ldr	r0, [sp, #4]
   13c14:	cmp	r0, #0
   13c18:	bne	13c50 <__assert_fail@plt+0x2550>
   13c1c:	b	13c60 <__assert_fail@plt+0x2560>
   13c20:	mov	r0, #16
   13c24:	bl	2b30c <__assert_fail@plt+0x19c0c>
   13c28:	mov	r4, r0
   13c2c:	mov	r0, #1
   13c30:	str	r0, [r4]
   13c34:	movw	r0, #51467	; 0xc90b
   13c38:	movt	r0, #2
   13c3c:	bl	2b810 <__assert_fail@plt+0x1a110>
   13c40:	str	r0, [r4, #4]
   13c44:	ldr	r0, [sp, #4]
   13c48:	cmp	r0, #0
   13c4c:	beq	13c60 <__assert_fail@plt+0x2560>
   13c50:	ldr	r0, [sp, #8]
   13c54:	bl	13ddc <__assert_fail@plt+0x26dc>
   13c58:	ldr	r0, [sp, #12]
   13c5c:	bl	13ddc <__assert_fail@plt+0x26dc>
   13c60:	mov	r0, #0
   13c64:	str	r0, [fp, #-96]	; 0xffffffa0
   13c68:	sub	r0, fp, #112	; 0x70
   13c6c:	bl	1898c <__assert_fail@plt+0x728c>
   13c70:	mov	r0, r4
   13c74:	sub	sp, fp, #24
   13c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c7c:	bl	116e8 <abort@plt>
   13c80:	movw	r2, #51824	; 0xca70
   13c84:	mov	r3, r0
   13c88:	mov	r0, #2
   13c8c:	mov	r1, #0
   13c90:	movt	r2, #2
   13c94:	bl	11520 <error@plt>
   13c98:	mov	r4, #75	; 0x4b
   13c9c:	cmn	r5, #2
   13ca0:	bne	13cac <__assert_fail@plt+0x25ac>
   13ca4:	bl	115ec <__errno_location@plt>
   13ca8:	ldr	r4, [r0]
   13cac:	movw	r1, #51710	; 0xc9fe
   13cb0:	mov	r0, #0
   13cb4:	mov	r2, #5
   13cb8:	movt	r1, #2
   13cbc:	bl	11484 <dcgettext@plt>
   13cc0:	mov	r2, r0
   13cc4:	mov	r0, #3
   13cc8:	mov	r1, r4
   13ccc:	bl	11520 <error@plt>
   13cd0:	movw	r1, #57780	; 0xe1b4
   13cd4:	movt	r1, #3
   13cd8:	str	r0, [r1, #4]
   13cdc:	bx	lr
   13ce0:	movw	r1, #57780	; 0xe1b4
   13ce4:	movt	r1, #3
   13ce8:	strb	r0, [r1]
   13cec:	bx	lr
   13cf0:	push	{r4, r5, r6, sl, fp, lr}
   13cf4:	add	fp, sp, #16
   13cf8:	sub	sp, sp, #8
   13cfc:	movw	r0, #57764	; 0xe1a4
   13d00:	movt	r0, #3
   13d04:	ldr	r0, [r0]
   13d08:	bl	2b964 <__assert_fail@plt+0x1a264>
   13d0c:	cmp	r0, #0
   13d10:	beq	13d38 <__assert_fail@plt+0x2638>
   13d14:	movw	r5, #57780	; 0xe1b4
   13d18:	movt	r5, #3
   13d1c:	ldrb	r0, [r5]
   13d20:	cmp	r0, #0
   13d24:	beq	13d64 <__assert_fail@plt+0x2664>
   13d28:	bl	115ec <__errno_location@plt>
   13d2c:	ldr	r0, [r0]
   13d30:	cmp	r0, #32
   13d34:	bne	13d64 <__assert_fail@plt+0x2664>
   13d38:	movw	r0, #57760	; 0xe1a0
   13d3c:	movt	r0, #3
   13d40:	ldr	r0, [r0]
   13d44:	bl	2b964 <__assert_fail@plt+0x1a264>
   13d48:	cmp	r0, #0
   13d4c:	subeq	sp, fp, #16
   13d50:	popeq	{r4, r5, r6, sl, fp, pc}
   13d54:	movw	r0, #57672	; 0xe148
   13d58:	movt	r0, #3
   13d5c:	ldr	r0, [r0]
   13d60:	bl	1143c <_exit@plt>
   13d64:	movw	r1, #51808	; 0xca60
   13d68:	mov	r0, #0
   13d6c:	mov	r2, #5
   13d70:	movt	r1, #2
   13d74:	bl	11484 <dcgettext@plt>
   13d78:	ldr	r6, [r5, #4]
   13d7c:	mov	r4, r0
   13d80:	bl	115ec <__errno_location@plt>
   13d84:	ldr	r5, [r0]
   13d88:	cmp	r6, #0
   13d8c:	bne	13da8 <__assert_fail@plt+0x26a8>
   13d90:	movw	r2, #51824	; 0xca70
   13d94:	mov	r0, #0
   13d98:	mov	r1, r5
   13d9c:	mov	r3, r4
   13da0:	movt	r2, #2
   13da4:	b	13dc8 <__assert_fail@plt+0x26c8>
   13da8:	mov	r0, r6
   13dac:	bl	15f9c <__assert_fail@plt+0x489c>
   13db0:	movw	r2, #51820	; 0xca6c
   13db4:	mov	r3, r0
   13db8:	str	r4, [sp]
   13dbc:	mov	r0, #0
   13dc0:	mov	r1, r5
   13dc4:	movt	r2, #2
   13dc8:	bl	11520 <error@plt>
   13dcc:	movw	r0, #57672	; 0xe148
   13dd0:	movt	r0, #3
   13dd4:	ldr	r0, [r0]
   13dd8:	bl	1143c <_exit@plt>
   13ddc:	push	{r4, r5, r6, sl, fp, lr}
   13de0:	add	fp, sp, #16
   13de4:	mov	r4, r0
   13de8:	bl	115ec <__errno_location@plt>
   13dec:	ldr	r6, [r0]
   13df0:	mov	r5, r0
   13df4:	mov	r0, r4
   13df8:	bl	11424 <free@plt>
   13dfc:	str	r6, [r5]
   13e00:	pop	{r4, r5, r6, sl, fp, pc}
   13e04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e08:	add	fp, sp, #24
   13e0c:	sub	sp, sp, #8
   13e10:	movw	r6, #57768	; 0xe1a8
   13e14:	mov	r4, #0
   13e18:	cmp	r0, #2
   13e1c:	movt	r6, #3
   13e20:	ldr	r7, [r6]
   13e24:	str	r4, [r6]
   13e28:	bne	13e9c <__assert_fail@plt+0x279c>
   13e2c:	mov	r8, r3
   13e30:	movw	r3, #51840	; 0xca80
   13e34:	mov	r5, r2
   13e38:	movw	r2, #51488	; 0xc920
   13e3c:	mov	r0, #2
   13e40:	str	r4, [sp]
   13e44:	movt	r2, #2
   13e48:	movt	r3, #2
   13e4c:	bl	1158c <getopt_long@plt>
   13e50:	cmp	r0, #104	; 0x68
   13e54:	beq	13e90 <__assert_fail@plt+0x2790>
   13e58:	cmp	r0, #118	; 0x76
   13e5c:	bne	13e9c <__assert_fail@plt+0x279c>
   13e60:	movw	r0, #57764	; 0xe1a4
   13e64:	ldr	r3, [fp, #8]
   13e68:	add	r1, fp, #16
   13e6c:	mov	r2, r8
   13e70:	movt	r0, #3
   13e74:	str	r1, [sp, #4]
   13e78:	str	r1, [sp]
   13e7c:	mov	r1, r5
   13e80:	ldr	r0, [r0]
   13e84:	bl	2afc4 <__assert_fail@plt+0x198c4>
   13e88:	mov	r0, #0
   13e8c:	bl	115a4 <exit@plt>
   13e90:	ldr	r1, [fp, #12]
   13e94:	mov	r0, #0
   13e98:	blx	r1
   13e9c:	movw	r0, #57752	; 0xe198
   13ea0:	str	r7, [r6]
   13ea4:	movt	r0, #3
   13ea8:	str	r4, [r0]
   13eac:	sub	sp, fp, #24
   13eb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13eb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13eb8:	add	fp, sp, #24
   13ebc:	sub	sp, sp, #8
   13ec0:	mov	r8, r3
   13ec4:	ldr	r3, [fp, #12]
   13ec8:	movw	r7, #57768	; 0xe1a8
   13ecc:	movw	r5, #51467	; 0xc90b
   13ed0:	mov	r9, r2
   13ed4:	mov	r2, #1
   13ed8:	mov	r6, #0
   13edc:	movt	r7, #3
   13ee0:	movt	r5, #2
   13ee4:	str	r6, [sp]
   13ee8:	ldr	r4, [r7]
   13eec:	str	r2, [r7]
   13ef0:	movw	r2, #51488	; 0xc920
   13ef4:	cmp	r3, #0
   13ef8:	movw	r3, #51840	; 0xca80
   13efc:	movt	r2, #2
   13f00:	movt	r3, #2
   13f04:	movne	r2, r5
   13f08:	bl	1158c <getopt_long@plt>
   13f0c:	cmn	r0, #1
   13f10:	beq	13f3c <__assert_fail@plt+0x283c>
   13f14:	cmp	r0, #104	; 0x68
   13f18:	beq	13f30 <__assert_fail@plt+0x2830>
   13f1c:	cmp	r0, #118	; 0x76
   13f20:	beq	13f48 <__assert_fail@plt+0x2848>
   13f24:	movw	r0, #57672	; 0xe148
   13f28:	movt	r0, #3
   13f2c:	ldr	r6, [r0]
   13f30:	ldr	r1, [fp, #16]
   13f34:	mov	r0, r6
   13f38:	blx	r1
   13f3c:	str	r4, [r7]
   13f40:	sub	sp, fp, #24
   13f44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f48:	movw	r0, #57764	; 0xe1a4
   13f4c:	ldr	r3, [fp, #8]
   13f50:	add	r1, fp, #20
   13f54:	mov	r2, r8
   13f58:	movt	r0, #3
   13f5c:	str	r1, [sp, #4]
   13f60:	str	r1, [sp]
   13f64:	mov	r1, r9
   13f68:	ldr	r0, [r0]
   13f6c:	bl	2afc4 <__assert_fail@plt+0x198c4>
   13f70:	mov	r0, #0
   13f74:	bl	115a4 <exit@plt>
   13f78:	push	{r4, r5, r6, sl, fp, lr}
   13f7c:	add	fp, sp, #16
   13f80:	sub	sp, sp, #56	; 0x38
   13f84:	mov	r5, r1
   13f88:	mov	r6, r0
   13f8c:	and	r4, r1, #240	; 0xf0
   13f90:	bl	114fc <__ctype_get_mb_cur_max@plt>
   13f94:	cmp	r4, #48	; 0x30
   13f98:	cmpcs	r0, #2
   13f9c:	bcs	13fb4 <__assert_fail@plt+0x28b4>
   13fa0:	mov	r0, r6
   13fa4:	mov	r1, r5
   13fa8:	sub	sp, fp, #16
   13fac:	pop	{r4, r5, r6, sl, fp, lr}
   13fb0:	b	115c8 <strchr@plt>
   13fb4:	mov	r4, #0
   13fb8:	mov	r0, sp
   13fbc:	str	r4, [sp, #8]
   13fc0:	str	r4, [sp, #4]
   13fc4:	strb	r4, [sp, #12]
   13fc8:	strb	r4, [sp]
   13fcc:	str	r6, [sp, #16]
   13fd0:	bl	14110 <__assert_fail@plt+0x2a10>
   13fd4:	ldrb	r0, [sp, #24]
   13fd8:	cmp	r0, #0
   13fdc:	beq	13fec <__assert_fail@plt+0x28ec>
   13fe0:	ldr	r0, [sp, #28]
   13fe4:	cmp	r0, #0
   13fe8:	beq	14040 <__assert_fail@plt+0x2940>
   13fec:	uxtb	r6, r5
   13ff0:	mov	r5, sp
   13ff4:	mov	r4, #0
   13ff8:	ldr	r1, [sp, #20]
   13ffc:	ldr	r0, [sp, #16]
   14000:	cmp	r1, #1
   14004:	bne	14014 <__assert_fail@plt+0x2914>
   14008:	ldrb	r2, [r0]
   1400c:	cmp	r2, r6
   14010:	beq	1404c <__assert_fail@plt+0x294c>
   14014:	add	r0, r0, r1
   14018:	strb	r4, [sp, #12]
   1401c:	str	r0, [sp, #16]
   14020:	mov	r0, r5
   14024:	bl	14110 <__assert_fail@plt+0x2a10>
   14028:	ldrb	r0, [sp, #24]
   1402c:	cmp	r0, #0
   14030:	beq	13ff8 <__assert_fail@plt+0x28f8>
   14034:	ldr	r0, [sp, #28]
   14038:	cmp	r0, #0
   1403c:	bne	13ff8 <__assert_fail@plt+0x28f8>
   14040:	mov	r0, r4
   14044:	sub	sp, fp, #16
   14048:	pop	{r4, r5, r6, sl, fp, pc}
   1404c:	mov	r4, r0
   14050:	mov	r0, r4
   14054:	sub	sp, fp, #16
   14058:	pop	{r4, r5, r6, sl, fp, pc}
   1405c:	push	{r4, r5, r6, sl, fp, lr}
   14060:	add	fp, sp, #16
   14064:	sub	sp, sp, #56	; 0x38
   14068:	mov	r5, r0
   1406c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   14070:	cmp	r0, #2
   14074:	bcc	14100 <__assert_fail@plt+0x2a00>
   14078:	mov	r4, #0
   1407c:	mov	r0, sp
   14080:	str	r4, [sp, #8]
   14084:	str	r4, [sp, #4]
   14088:	strb	r4, [sp, #12]
   1408c:	strb	r4, [sp]
   14090:	str	r5, [sp, #16]
   14094:	bl	14110 <__assert_fail@plt+0x2a10>
   14098:	ldrb	r0, [sp, #24]
   1409c:	cmp	r0, #0
   140a0:	beq	140b0 <__assert_fail@plt+0x29b0>
   140a4:	ldr	r0, [sp, #28]
   140a8:	cmp	r0, #0
   140ac:	beq	140f4 <__assert_fail@plt+0x29f4>
   140b0:	mov	r6, #0
   140b4:	mov	r5, sp
   140b8:	mov	r4, #0
   140bc:	strb	r6, [sp, #12]
   140c0:	ldr	r0, [sp, #16]
   140c4:	ldr	r1, [sp, #20]
   140c8:	add	r0, r0, r1
   140cc:	str	r0, [sp, #16]
   140d0:	mov	r0, r5
   140d4:	bl	14110 <__assert_fail@plt+0x2a10>
   140d8:	ldrb	r1, [sp, #24]
   140dc:	ldr	r0, [sp, #28]
   140e0:	add	r4, r4, #1
   140e4:	cmp	r1, #0
   140e8:	beq	140bc <__assert_fail@plt+0x29bc>
   140ec:	cmp	r0, #0
   140f0:	bne	140bc <__assert_fail@plt+0x29bc>
   140f4:	mov	r0, r4
   140f8:	sub	sp, fp, #16
   140fc:	pop	{r4, r5, r6, sl, fp, pc}
   14100:	mov	r0, r5
   14104:	sub	sp, fp, #16
   14108:	pop	{r4, r5, r6, sl, fp, lr}
   1410c:	b	115bc <strlen@plt>
   14110:	push	{r4, r5, r6, r7, fp, lr}
   14114:	add	fp, sp, #16
   14118:	mov	r4, r0
   1411c:	ldrb	r0, [r0, #12]
   14120:	cmp	r0, #0
   14124:	popne	{r4, r5, r6, r7, fp, pc}
   14128:	ldrb	r0, [r4]
   1412c:	ldr	r5, [r4, #16]
   14130:	cmp	r0, #0
   14134:	beq	1419c <__assert_fail@plt+0x2a9c>
   14138:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1413c:	mov	r1, r0
   14140:	mov	r0, r5
   14144:	bl	2a9b8 <__assert_fail@plt+0x192b8>
   14148:	add	r6, r4, #4
   1414c:	add	r7, r4, #28
   14150:	mov	r2, r0
   14154:	mov	r1, r5
   14158:	mov	r0, r7
   1415c:	mov	r3, r6
   14160:	bl	2bd34 <__assert_fail@plt+0x1a634>
   14164:	cmn	r0, #2
   14168:	str	r0, [r4, #20]
   1416c:	beq	14228 <__assert_fail@plt+0x2b28>
   14170:	cmp	r0, #0
   14174:	beq	141dc <__assert_fail@plt+0x2adc>
   14178:	cmn	r0, #1
   1417c:	bne	14200 <__assert_fail@plt+0x2b00>
   14180:	mov	r0, #0
   14184:	strb	r0, [r4, #24]
   14188:	mov	r0, #1
   1418c:	str	r0, [r4, #20]
   14190:	mov	r0, #1
   14194:	strb	r0, [r4, #12]
   14198:	pop	{r4, r5, r6, r7, fp, pc}
   1419c:	ldrb	r0, [r5]
   141a0:	movw	r2, #53648	; 0xd190
   141a4:	movt	r2, #2
   141a8:	ubfx	r1, r0, #5, #3
   141ac:	ldr	r1, [r2, r1, lsl #2]
   141b0:	and	r2, r0, #31
   141b4:	mov	r0, #1
   141b8:	tst	r1, r0, lsl r2
   141bc:	beq	14248 <__assert_fail@plt+0x2b48>
   141c0:	str	r0, [r4, #20]
   141c4:	ldrb	r1, [r5]
   141c8:	strb	r0, [r4, #24]
   141cc:	str	r1, [r4, #28]
   141d0:	mov	r0, #1
   141d4:	strb	r0, [r4, #12]
   141d8:	pop	{r4, r5, r6, r7, fp, pc}
   141dc:	mov	r0, #1
   141e0:	str	r0, [r4, #20]
   141e4:	ldr	r0, [r4, #16]
   141e8:	ldrb	r0, [r0]
   141ec:	cmp	r0, #0
   141f0:	bne	14264 <__assert_fail@plt+0x2b64>
   141f4:	ldr	r0, [r7]
   141f8:	cmp	r0, #0
   141fc:	bne	14284 <__assert_fail@plt+0x2b84>
   14200:	mov	r0, #1
   14204:	strb	r0, [r4, #24]
   14208:	mov	r0, r6
   1420c:	bl	11478 <mbsinit@plt>
   14210:	cmp	r0, #0
   14214:	movne	r0, #0
   14218:	strbne	r0, [r4]
   1421c:	mov	r0, #1
   14220:	strb	r0, [r4, #12]
   14224:	pop	{r4, r5, r6, r7, fp, pc}
   14228:	ldr	r0, [r4, #16]
   1422c:	bl	115bc <strlen@plt>
   14230:	mov	r1, #0
   14234:	strb	r1, [r4, #24]
   14238:	str	r0, [r4, #20]
   1423c:	mov	r0, #1
   14240:	strb	r0, [r4, #12]
   14244:	pop	{r4, r5, r6, r7, fp, pc}
   14248:	add	r0, r4, #4
   1424c:	bl	11478 <mbsinit@plt>
   14250:	cmp	r0, #0
   14254:	beq	142a4 <__assert_fail@plt+0x2ba4>
   14258:	mov	r0, #1
   1425c:	strb	r0, [r4]
   14260:	b	14138 <__assert_fail@plt+0x2a38>
   14264:	movw	r0, #51975	; 0xcb07
   14268:	movw	r1, #51911	; 0xcac7
   1426c:	movw	r3, #51927	; 0xcad7
   14270:	mov	r2, #171	; 0xab
   14274:	movt	r0, #2
   14278:	movt	r1, #2
   1427c:	movt	r3, #2
   14280:	bl	11700 <__assert_fail@plt>
   14284:	movw	r0, #51998	; 0xcb1e
   14288:	movw	r1, #51911	; 0xcac7
   1428c:	movw	r3, #51927	; 0xcad7
   14290:	mov	r2, #172	; 0xac
   14294:	movt	r0, #2
   14298:	movt	r1, #2
   1429c:	movt	r3, #2
   142a0:	bl	11700 <__assert_fail@plt>
   142a4:	movw	r0, #51888	; 0xcab0
   142a8:	movw	r1, #51911	; 0xcac7
   142ac:	movw	r3, #51927	; 0xcad7
   142b0:	mov	r2, #143	; 0x8f
   142b4:	movt	r0, #2
   142b8:	movt	r1, #2
   142bc:	movt	r3, #2
   142c0:	bl	11700 <__assert_fail@plt>
   142c4:	ldr	r2, [r0, #16]
   142c8:	add	r1, r2, r1
   142cc:	str	r1, [r0, #16]
   142d0:	bx	lr
   142d4:	push	{r4, r5, r6, sl, fp, lr}
   142d8:	add	fp, sp, #16
   142dc:	mov	r5, r1
   142e0:	ldrb	r1, [r1]
   142e4:	mov	r4, r0
   142e8:	strb	r1, [r0], #4
   142ec:	cmp	r1, #0
   142f0:	beq	14300 <__assert_fail@plt+0x2c00>
   142f4:	ldmib	r5, {r1, r2}
   142f8:	stm	r0, {r1, r2}
   142fc:	b	1430c <__assert_fail@plt+0x2c0c>
   14300:	mov	r1, #0
   14304:	str	r1, [r0]
   14308:	str	r1, [r0, #4]
   1430c:	ldrb	r0, [r5, #12]
   14310:	strb	r0, [r4, #12]
   14314:	add	r0, r5, #32
   14318:	ldr	r1, [r5, #16]
   1431c:	cmp	r1, r0
   14320:	beq	1432c <__assert_fail@plt+0x2c2c>
   14324:	mov	r6, r1
   14328:	b	1433c <__assert_fail@plt+0x2c3c>
   1432c:	ldr	r2, [r5, #20]
   14330:	add	r6, r4, #32
   14334:	mov	r0, r6
   14338:	bl	11448 <memcpy@plt>
   1433c:	str	r6, [r4, #16]
   14340:	ldr	r0, [r5, #20]
   14344:	str	r0, [r4, #20]
   14348:	ldrb	r0, [r5, #24]
   1434c:	strb	r0, [r4, #24]
   14350:	cmp	r0, #0
   14354:	ldrne	r0, [r5, #28]
   14358:	strne	r0, [r4, #28]
   1435c:	pop	{r4, r5, r6, sl, fp, pc}
   14360:	push	{r4, r5, fp, lr}
   14364:	add	fp, sp, #8
   14368:	cmp	r0, #0
   1436c:	beq	14400 <__assert_fail@plt+0x2d00>
   14370:	mov	r1, #47	; 0x2f
   14374:	mov	r4, r0
   14378:	bl	11694 <strrchr@plt>
   1437c:	cmp	r0, #0
   14380:	mov	r5, r4
   14384:	addne	r5, r0, #1
   14388:	sub	r0, r5, r4
   1438c:	cmp	r0, #7
   14390:	blt	143e4 <__assert_fail@plt+0x2ce4>
   14394:	movw	r1, #52072	; 0xcb68
   14398:	sub	r0, r5, #7
   1439c:	mov	r2, #7
   143a0:	movt	r1, #2
   143a4:	bl	116dc <strncmp@plt>
   143a8:	cmp	r0, #0
   143ac:	bne	143e4 <__assert_fail@plt+0x2ce4>
   143b0:	movw	r1, #52080	; 0xcb70
   143b4:	mov	r0, r5
   143b8:	mov	r2, #3
   143bc:	movt	r1, #2
   143c0:	bl	116dc <strncmp@plt>
   143c4:	cmp	r0, #0
   143c8:	beq	143d4 <__assert_fail@plt+0x2cd4>
   143cc:	mov	r4, r5
   143d0:	b	143e4 <__assert_fail@plt+0x2ce4>
   143d4:	movw	r0, #57744	; 0xe190
   143d8:	add	r4, r5, #3
   143dc:	movt	r0, #3
   143e0:	str	r4, [r0]
   143e4:	movw	r0, #57748	; 0xe194
   143e8:	movt	r0, #3
   143ec:	str	r4, [r0]
   143f0:	movw	r0, #57788	; 0xe1bc
   143f4:	movt	r0, #3
   143f8:	str	r4, [r0]
   143fc:	pop	{r4, r5, fp, pc}
   14400:	movw	r0, #57760	; 0xe1a0
   14404:	mov	r1, #55	; 0x37
   14408:	mov	r2, #1
   1440c:	movt	r0, #3
   14410:	ldr	r3, [r0]
   14414:	movw	r0, #52016	; 0xcb30
   14418:	movt	r0, #2
   1441c:	bl	114e4 <fwrite@plt>
   14420:	bl	116e8 <abort@plt>
   14424:	push	{r4, r5, r6, sl, fp, lr}
   14428:	add	fp, sp, #16
   1442c:	mov	r4, r0
   14430:	movw	r0, #57792	; 0xe1c0
   14434:	movt	r0, #3
   14438:	cmp	r4, #0
   1443c:	moveq	r4, r0
   14440:	bl	115ec <__errno_location@plt>
   14444:	ldr	r6, [r0]
   14448:	mov	r5, r0
   1444c:	mov	r0, r4
   14450:	mov	r1, #48	; 0x30
   14454:	bl	2b76c <__assert_fail@plt+0x1a06c>
   14458:	str	r6, [r5]
   1445c:	pop	{r4, r5, r6, sl, fp, pc}
   14460:	movw	r1, #57792	; 0xe1c0
   14464:	cmp	r0, #0
   14468:	movt	r1, #3
   1446c:	movne	r1, r0
   14470:	ldr	r0, [r1]
   14474:	bx	lr
   14478:	movw	r2, #57792	; 0xe1c0
   1447c:	cmp	r0, #0
   14480:	movt	r2, #3
   14484:	movne	r2, r0
   14488:	str	r1, [r2]
   1448c:	bx	lr
   14490:	movw	r3, #57792	; 0xe1c0
   14494:	cmp	r0, #0
   14498:	and	r2, r2, #1
   1449c:	movt	r3, #3
   144a0:	movne	r3, r0
   144a4:	ubfx	r0, r1, #5, #3
   144a8:	and	r1, r1, #31
   144ac:	add	ip, r3, r0, lsl #2
   144b0:	mov	r0, #1
   144b4:	ldr	r3, [ip, #8]
   144b8:	and	r0, r0, r3, lsr r1
   144bc:	eor	r2, r0, r2
   144c0:	eor	r1, r3, r2, lsl r1
   144c4:	str	r1, [ip, #8]
   144c8:	bx	lr
   144cc:	movw	r2, #57792	; 0xe1c0
   144d0:	cmp	r0, #0
   144d4:	movt	r2, #3
   144d8:	movne	r2, r0
   144dc:	ldr	r0, [r2, #4]
   144e0:	str	r1, [r2, #4]
   144e4:	bx	lr
   144e8:	push	{fp, lr}
   144ec:	mov	fp, sp
   144f0:	movw	r3, #57792	; 0xe1c0
   144f4:	cmp	r0, #0
   144f8:	movt	r3, #3
   144fc:	movne	r3, r0
   14500:	cmp	r1, #0
   14504:	mov	r0, #10
   14508:	cmpne	r2, #0
   1450c:	str	r0, [r3]
   14510:	bne	14518 <__assert_fail@plt+0x2e18>
   14514:	bl	116e8 <abort@plt>
   14518:	str	r1, [r3, #40]	; 0x28
   1451c:	str	r2, [r3, #44]	; 0x2c
   14520:	pop	{fp, pc}
   14524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14528:	add	fp, sp, #28
   1452c:	sub	sp, sp, #20
   14530:	mov	r7, r0
   14534:	ldr	r0, [fp, #8]
   14538:	movw	r5, #57792	; 0xe1c0
   1453c:	mov	r8, r3
   14540:	mov	r9, r2
   14544:	mov	sl, r1
   14548:	movt	r5, #3
   1454c:	cmp	r0, #0
   14550:	movne	r5, r0
   14554:	bl	115ec <__errno_location@plt>
   14558:	ldr	r2, [r5, #40]	; 0x28
   1455c:	ldr	r3, [r5, #44]	; 0x2c
   14560:	mov	r4, r0
   14564:	ldm	r5, {r0, r1}
   14568:	add	r5, r5, #8
   1456c:	ldr	r6, [r4]
   14570:	stm	sp, {r0, r1, r5}
   14574:	mov	r0, r7
   14578:	mov	r1, sl
   1457c:	str	r2, [sp, #12]
   14580:	str	r3, [sp, #16]
   14584:	mov	r2, r9
   14588:	mov	r3, r8
   1458c:	bl	1459c <__assert_fail@plt+0x2e9c>
   14590:	str	r6, [r4]
   14594:	sub	sp, fp, #28
   14598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1459c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a0:	add	fp, sp, #28
   145a4:	sub	sp, sp, #156	; 0x9c
   145a8:	str	r0, [fp, #-84]	; 0xffffffac
   145ac:	add	r0, r2, #1
   145b0:	mov	r6, r1
   145b4:	mov	r7, r3
   145b8:	str	r2, [fp, #-80]	; 0xffffffb0
   145bc:	str	r0, [sp, #80]	; 0x50
   145c0:	ldr	r0, [fp, #12]
   145c4:	and	r1, r0, #1
   145c8:	str	r1, [sp, #36]	; 0x24
   145cc:	and	r1, r0, #4
   145d0:	str	r1, [sp, #32]
   145d4:	ubfx	r8, r0, #1, #1
   145d8:	bl	114fc <__ctype_get_mb_cur_max@plt>
   145dc:	str	r0, [sp, #40]	; 0x28
   145e0:	ldr	r0, [fp, #24]
   145e4:	ldr	r4, [fp, #8]
   145e8:	mov	r1, #0
   145ec:	str	r1, [fp, #-52]	; 0xffffffcc
   145f0:	mov	r1, #0
   145f4:	str	r1, [sp, #60]	; 0x3c
   145f8:	mov	r1, #1
   145fc:	str	r1, [sp, #84]	; 0x54
   14600:	str	r0, [sp, #76]	; 0x4c
   14604:	ldr	r0, [fp, #20]
   14608:	str	r0, [sp, #72]	; 0x48
   1460c:	mov	r0, #0
   14610:	str	r0, [sp, #56]	; 0x38
   14614:	mov	r0, #0
   14618:	str	r0, [fp, #-88]	; 0xffffffa8
   1461c:	mov	r0, #0
   14620:	str	r0, [fp, #-72]	; 0xffffffb8
   14624:	mov	r0, #0
   14628:	cmp	r4, #10
   1462c:	bhi	15948 <__assert_fail@plt+0x4248>
   14630:	add	r1, pc, #24
   14634:	ldr	ip, [fp, #-84]	; 0xffffffac
   14638:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1463c:	mov	r5, r6
   14640:	mov	r9, #0
   14644:	mov	r2, #1
   14648:	mov	r3, #0
   1464c:	ldr	pc, [r1, r4, lsl #2]
   14650:	andeq	r4, r1, r8, lsl r7
   14654:	andeq	r4, r1, r4, asr r7
   14658:	andeq	r4, r1, r8, lsr #14
   1465c:	andeq	r4, r1, r0, lsl r7
   14660:	andeq	r4, r1, r8, asr #14
   14664:	andeq	r4, r1, ip, lsr #15
   14668:	andeq	r4, r1, r8, lsr r7
   1466c:	andeq	r4, r1, r4, lsr #20
   14670:	andeq	r4, r1, ip, ror r6
   14674:	andeq	r4, r1, ip, ror r6
   14678:			; <UNDEFINED> instruction: 0x000148b4
   1467c:	movw	r6, #52164	; 0xcbc4
   14680:	mov	r0, #0
   14684:	mov	r2, #5
   14688:	movt	r6, #2
   1468c:	mov	r1, r6
   14690:	bl	11484 <dcgettext@plt>
   14694:	cmp	r0, r6
   14698:	str	r0, [sp, #72]	; 0x48
   1469c:	bne	1488c <__assert_fail@plt+0x318c>
   146a0:	bl	2bc4c <__assert_fail@plt+0x1a54c>
   146a4:	ldrb	r1, [r0]
   146a8:	and	r1, r1, #223	; 0xdf
   146ac:	cmp	r1, #71	; 0x47
   146b0:	beq	1480c <__assert_fail@plt+0x310c>
   146b4:	cmp	r1, #85	; 0x55
   146b8:	bne	14870 <__assert_fail@plt+0x3170>
   146bc:	ldrb	r1, [r0, #1]
   146c0:	and	r1, r1, #223	; 0xdf
   146c4:	cmp	r1, #84	; 0x54
   146c8:	bne	14870 <__assert_fail@plt+0x3170>
   146cc:	ldrb	r1, [r0, #2]
   146d0:	and	r1, r1, #223	; 0xdf
   146d4:	cmp	r1, #70	; 0x46
   146d8:	bne	14870 <__assert_fail@plt+0x3170>
   146dc:	ldrb	r1, [r0, #3]
   146e0:	cmp	r1, #45	; 0x2d
   146e4:	bne	14870 <__assert_fail@plt+0x3170>
   146e8:	ldrb	r1, [r0, #4]
   146ec:	cmp	r1, #56	; 0x38
   146f0:	bne	14870 <__assert_fail@plt+0x3170>
   146f4:	ldrb	r0, [r0, #5]
   146f8:	cmp	r0, #0
   146fc:	movw	r0, #52166	; 0xcbc6
   14700:	movt	r0, #2
   14704:	str	r0, [sp, #72]	; 0x48
   14708:	bne	14870 <__assert_fail@plt+0x3170>
   1470c:	b	1488c <__assert_fail@plt+0x318c>
   14710:	mov	r0, #1
   14714:	b	14754 <__assert_fail@plt+0x3054>
   14718:	mov	r4, #0
   1471c:	mov	r9, #0
   14720:	mov	r2, r0
   14724:	b	147a4 <__assert_fail@plt+0x30a4>
   14728:	tst	r8, #1
   1472c:	bne	14754 <__assert_fail@plt+0x3054>
   14730:	mov	r2, r0
   14734:	b	1477c <__assert_fail@plt+0x307c>
   14738:	mov	r0, #1
   1473c:	mov	r9, #0
   14740:	mov	r4, #5
   14744:	b	147c0 <__assert_fail@plt+0x30c0>
   14748:	mov	r2, #1
   1474c:	tst	r8, #1
   14750:	beq	1477c <__assert_fail@plt+0x307c>
   14754:	mov	r1, #1
   14758:	mov	r9, #0
   1475c:	mov	r4, #2
   14760:	mov	r2, r0
   14764:	mov	r3, #1
   14768:	str	r1, [fp, #-72]	; 0xffffffb8
   1476c:	movw	r1, #51708	; 0xc9fc
   14770:	movt	r1, #2
   14774:	str	r1, [fp, #-88]	; 0xffffffa8
   14778:	b	14a24 <__assert_fail@plt+0x3324>
   1477c:	cmp	r5, #0
   14780:	mov	r9, #1
   14784:	mov	r4, #2
   14788:	movne	r0, #39	; 0x27
   1478c:	strbne	r0, [ip]
   14790:	movw	r0, #51708	; 0xc9fc
   14794:	movt	r0, #2
   14798:	str	r0, [fp, #-88]	; 0xffffffa8
   1479c:	mov	r0, #1
   147a0:	str	r0, [fp, #-72]	; 0xffffffb8
   147a4:	mov	r3, #0
   147a8:	b	14a24 <__assert_fail@plt+0x3324>
   147ac:	mov	r4, #5
   147b0:	tst	r8, #1
   147b4:	beq	147dc <__assert_fail@plt+0x30dc>
   147b8:	mov	r0, #1
   147bc:	mov	r9, #0
   147c0:	str	r0, [fp, #-72]	; 0xffffffb8
   147c4:	movw	r0, #52162	; 0xcbc2
   147c8:	mov	r2, #1
   147cc:	mov	r3, #1
   147d0:	movt	r0, #2
   147d4:	str	r0, [fp, #-88]	; 0xffffffa8
   147d8:	b	14a24 <__assert_fail@plt+0x3324>
   147dc:	cmp	r5, #0
   147e0:	mov	r3, #0
   147e4:	mov	r9, #1
   147e8:	mov	r2, #1
   147ec:	movne	r0, #34	; 0x22
   147f0:	strbne	r0, [ip]
   147f4:	movw	r0, #52162	; 0xcbc2
   147f8:	movt	r0, #2
   147fc:	str	r0, [fp, #-88]	; 0xffffffa8
   14800:	mov	r0, #1
   14804:	str	r0, [fp, #-72]	; 0xffffffb8
   14808:	b	14a24 <__assert_fail@plt+0x3324>
   1480c:	ldrb	r1, [r0, #1]
   14810:	and	r1, r1, #223	; 0xdf
   14814:	cmp	r1, #66	; 0x42
   14818:	bne	14870 <__assert_fail@plt+0x3170>
   1481c:	ldrb	r1, [r0, #2]
   14820:	cmp	r1, #49	; 0x31
   14824:	bne	14870 <__assert_fail@plt+0x3170>
   14828:	ldrb	r1, [r0, #3]
   1482c:	cmp	r1, #56	; 0x38
   14830:	bne	14870 <__assert_fail@plt+0x3170>
   14834:	ldrb	r1, [r0, #4]
   14838:	cmp	r1, #48	; 0x30
   1483c:	bne	14870 <__assert_fail@plt+0x3170>
   14840:	ldrb	r1, [r0, #5]
   14844:	cmp	r1, #51	; 0x33
   14848:	bne	14870 <__assert_fail@plt+0x3170>
   1484c:	ldrb	r1, [r0, #6]
   14850:	cmp	r1, #48	; 0x30
   14854:	bne	14870 <__assert_fail@plt+0x3170>
   14858:	ldrb	r0, [r0, #7]
   1485c:	cmp	r0, #0
   14860:	movw	r0, #52174	; 0xcbce
   14864:	movt	r0, #2
   14868:	str	r0, [sp, #72]	; 0x48
   1486c:	beq	1488c <__assert_fail@plt+0x318c>
   14870:	movw	r1, #52162	; 0xcbc2
   14874:	movw	r0, #51708	; 0xc9fc
   14878:	cmp	r4, #9
   1487c:	movt	r1, #2
   14880:	movt	r0, #2
   14884:	moveq	r0, r1
   14888:	str	r0, [sp, #72]	; 0x48
   1488c:	movw	r6, #51708	; 0xc9fc
   14890:	mov	r0, #0
   14894:	mov	r2, #5
   14898:	movt	r6, #2
   1489c:	mov	r1, r6
   148a0:	bl	11484 <dcgettext@plt>
   148a4:	cmp	r0, r6
   148a8:	str	r0, [sp, #76]	; 0x4c
   148ac:	beq	148f8 <__assert_fail@plt+0x31f8>
   148b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   148b4:	mov	r9, #0
   148b8:	tst	r8, #1
   148bc:	bne	14a00 <__assert_fail@plt+0x3300>
   148c0:	ldr	r0, [sp, #72]	; 0x48
   148c4:	ldrb	r0, [r0]
   148c8:	cmp	r0, #0
   148cc:	beq	14a00 <__assert_fail@plt+0x3300>
   148d0:	ldr	r1, [sp, #72]	; 0x48
   148d4:	mov	r9, #0
   148d8:	add	r1, r1, #1
   148dc:	cmp	r9, r5
   148e0:	strbcc	r0, [ip, r9]
   148e4:	ldrb	r0, [r1, r9]
   148e8:	add	r9, r9, #1
   148ec:	cmp	r0, #0
   148f0:	bne	148dc <__assert_fail@plt+0x31dc>
   148f4:	b	14a00 <__assert_fail@plt+0x3300>
   148f8:	bl	2bc4c <__assert_fail@plt+0x1a54c>
   148fc:	ldrb	r1, [r0]
   14900:	and	r1, r1, #223	; 0xdf
   14904:	cmp	r1, #71	; 0x47
   14908:	beq	14978 <__assert_fail@plt+0x3278>
   1490c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14910:	cmp	r1, #85	; 0x55
   14914:	bne	149d4 <__assert_fail@plt+0x32d4>
   14918:	ldrb	r1, [r0, #1]
   1491c:	and	r1, r1, #223	; 0xdf
   14920:	cmp	r1, #84	; 0x54
   14924:	bne	149d4 <__assert_fail@plt+0x32d4>
   14928:	ldrb	r1, [r0, #2]
   1492c:	and	r1, r1, #223	; 0xdf
   14930:	cmp	r1, #70	; 0x46
   14934:	bne	149d4 <__assert_fail@plt+0x32d4>
   14938:	ldrb	r1, [r0, #3]
   1493c:	cmp	r1, #45	; 0x2d
   14940:	bne	149d4 <__assert_fail@plt+0x32d4>
   14944:	ldrb	r1, [r0, #4]
   14948:	cmp	r1, #56	; 0x38
   1494c:	bne	149d4 <__assert_fail@plt+0x32d4>
   14950:	ldrb	r0, [r0, #5]
   14954:	cmp	r0, #0
   14958:	bne	149d4 <__assert_fail@plt+0x32d4>
   1495c:	movw	r0, #52170	; 0xcbca
   14960:	movt	r0, #2
   14964:	str	r0, [sp, #76]	; 0x4c
   14968:	mov	r9, #0
   1496c:	tst	r8, #1
   14970:	beq	148c0 <__assert_fail@plt+0x31c0>
   14974:	b	14a00 <__assert_fail@plt+0x3300>
   14978:	ldrb	r1, [r0, #1]
   1497c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14980:	and	r1, r1, #223	; 0xdf
   14984:	cmp	r1, #66	; 0x42
   14988:	bne	149d4 <__assert_fail@plt+0x32d4>
   1498c:	ldrb	r1, [r0, #2]
   14990:	cmp	r1, #49	; 0x31
   14994:	bne	149d4 <__assert_fail@plt+0x32d4>
   14998:	ldrb	r1, [r0, #3]
   1499c:	cmp	r1, #56	; 0x38
   149a0:	bne	149d4 <__assert_fail@plt+0x32d4>
   149a4:	ldrb	r1, [r0, #4]
   149a8:	cmp	r1, #48	; 0x30
   149ac:	bne	149d4 <__assert_fail@plt+0x32d4>
   149b0:	ldrb	r1, [r0, #5]
   149b4:	cmp	r1, #51	; 0x33
   149b8:	bne	149d4 <__assert_fail@plt+0x32d4>
   149bc:	ldrb	r1, [r0, #6]
   149c0:	cmp	r1, #48	; 0x30
   149c4:	bne	149d4 <__assert_fail@plt+0x32d4>
   149c8:	ldrb	r0, [r0, #7]
   149cc:	cmp	r0, #0
   149d0:	beq	157e8 <__assert_fail@plt+0x40e8>
   149d4:	movw	r0, #51708	; 0xc9fc
   149d8:	cmp	r4, #9
   149dc:	movt	r0, #2
   149e0:	mov	r1, r0
   149e4:	movw	r0, #52162	; 0xcbc2
   149e8:	movt	r0, #2
   149ec:	moveq	r1, r0
   149f0:	str	r1, [sp, #76]	; 0x4c
   149f4:	mov	r9, #0
   149f8:	tst	r8, #1
   149fc:	beq	148c0 <__assert_fail@plt+0x31c0>
   14a00:	ldr	r6, [sp, #76]	; 0x4c
   14a04:	mov	r0, r6
   14a08:	bl	115bc <strlen@plt>
   14a0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a10:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14a14:	str	r0, [fp, #-72]	; 0xffffffb8
   14a18:	str	r6, [fp, #-88]	; 0xffffffa8
   14a1c:	mov	r2, #1
   14a20:	mov	r3, r8
   14a24:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14a28:	str	r4, [fp, #-64]	; 0xffffffc0
   14a2c:	mov	sl, #0
   14a30:	str	r3, [fp, #-76]	; 0xffffffb4
   14a34:	str	r2, [sp, #88]	; 0x58
   14a38:	cmp	r0, #0
   14a3c:	movwne	r0, #1
   14a40:	and	r1, r0, r3
   14a44:	and	r1, r2, r1
   14a48:	str	r1, [sp, #48]	; 0x30
   14a4c:	sub	r1, r4, #2
   14a50:	clz	r1, r1
   14a54:	lsr	r1, r1, #5
   14a58:	and	r1, r1, r3
   14a5c:	str	r1, [sp, #44]	; 0x2c
   14a60:	subs	r1, r4, #2
   14a64:	eor	r4, r3, #1
   14a68:	movwne	r1, #1
   14a6c:	str	r4, [sp, #92]	; 0x5c
   14a70:	orr	r4, r1, r4
   14a74:	and	r1, r1, r2
   14a78:	and	r0, r0, r1
   14a7c:	str	r4, [sp, #64]	; 0x40
   14a80:	ldr	r4, [sp, #84]	; 0x54
   14a84:	str	r0, [fp, #-60]	; 0xffffffc4
   14a88:	orr	r0, r1, r3
   14a8c:	ldr	r1, [fp, #16]
   14a90:	eor	r0, r0, #1
   14a94:	clz	r1, r1
   14a98:	lsr	r1, r1, #5
   14a9c:	orr	r0, r1, r0
   14aa0:	str	r0, [fp, #-68]	; 0xffffffbc
   14aa4:	eor	r0, r2, #1
   14aa8:	str	r0, [sp, #52]	; 0x34
   14aac:	cmn	r7, #1
   14ab0:	beq	14ac0 <__assert_fail@plt+0x33c0>
   14ab4:	cmp	sl, r7
   14ab8:	bne	14acc <__assert_fail@plt+0x33cc>
   14abc:	b	15760 <__assert_fail@plt+0x4060>
   14ac0:	ldrb	r0, [lr, sl]
   14ac4:	cmp	r0, #0
   14ac8:	beq	15768 <__assert_fail@plt+0x4068>
   14acc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14ad0:	cmp	r0, #0
   14ad4:	beq	14b34 <__assert_fail@plt+0x3434>
   14ad8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14adc:	mov	r6, r5
   14ae0:	add	r5, sl, r0
   14ae4:	cmp	r0, #2
   14ae8:	bcc	14b54 <__assert_fail@plt+0x3454>
   14aec:	mov	r0, #0
   14af0:	cmn	r7, #1
   14af4:	str	r0, [fp, #-56]	; 0xffffffc8
   14af8:	bne	14b10 <__assert_fail@plt+0x3410>
   14afc:	mov	r0, lr
   14b00:	bl	115bc <strlen@plt>
   14b04:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14b08:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b0c:	mov	r7, r0
   14b10:	cmp	r5, r7
   14b14:	bls	14b64 <__assert_fail@plt+0x3464>
   14b18:	mov	r0, #0
   14b1c:	mov	r5, r6
   14b20:	str	r0, [fp, #-48]	; 0xffffffd0
   14b24:	ldrb	r6, [lr, sl]
   14b28:	cmp	r6, #126	; 0x7e
   14b2c:	bls	14bb4 <__assert_fail@plt+0x34b4>
   14b30:	b	15110 <__assert_fail@plt+0x3a10>
   14b34:	mov	r0, #0
   14b38:	str	r0, [fp, #-56]	; 0xffffffc8
   14b3c:	mov	r0, #0
   14b40:	str	r0, [fp, #-48]	; 0xffffffd0
   14b44:	ldrb	r6, [lr, sl]
   14b48:	cmp	r6, #126	; 0x7e
   14b4c:	bls	14bb4 <__assert_fail@plt+0x34b4>
   14b50:	b	15110 <__assert_fail@plt+0x3a10>
   14b54:	mov	r0, #0
   14b58:	str	r0, [fp, #-56]	; 0xffffffc8
   14b5c:	cmp	r5, r7
   14b60:	bhi	14b18 <__assert_fail@plt+0x3418>
   14b64:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14b68:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14b6c:	add	r0, lr, sl
   14b70:	bl	115b0 <bcmp@plt>
   14b74:	ldr	r2, [sp, #92]	; 0x5c
   14b78:	cmp	r0, #0
   14b7c:	mov	r1, r0
   14b80:	mov	r5, r6
   14b84:	movwne	r1, #1
   14b88:	orr	r1, r1, r2
   14b8c:	tst	r1, #1
   14b90:	beq	15828 <__assert_fail@plt+0x4128>
   14b94:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b98:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14b9c:	clz	r0, r0
   14ba0:	lsr	r0, r0, #5
   14ba4:	str	r0, [fp, #-48]	; 0xffffffd0
   14ba8:	ldrb	r6, [lr, sl]
   14bac:	cmp	r6, #126	; 0x7e
   14bb0:	bhi	15110 <__assert_fail@plt+0x3a10>
   14bb4:	add	r3, pc, #16
   14bb8:	mov	r8, #1
   14bbc:	mov	r2, #110	; 0x6e
   14bc0:	mov	r0, #97	; 0x61
   14bc4:	mov	r1, #0
   14bc8:	ldr	pc, [r3, r6, lsl #2]
   14bcc:	andeq	r4, r1, r8, asr #29
   14bd0:	andeq	r5, r1, r0, lsl r1
   14bd4:	andeq	r5, r1, r0, lsl r1
   14bd8:	andeq	r5, r1, r0, lsl r1
   14bdc:	andeq	r5, r1, r0, lsl r1
   14be0:	andeq	r5, r1, r0, lsl r1
   14be4:	andeq	r5, r1, r0, lsl r1
   14be8:	andeq	r5, r1, r4, asr #3
   14bec:	andeq	r4, r1, r8, lsr #29
   14bf0:	andeq	r4, r1, r0, lsr #29
   14bf4:			; <UNDEFINED> instruction: 0x00014eb4
   14bf8:	andeq	r4, r1, r4, ror #31
   14bfc:	muleq	r1, r8, lr
   14c00:			; <UNDEFINED> instruction: 0x00014eb0
   14c04:	andeq	r5, r1, r0, lsl r1
   14c08:	andeq	r5, r1, r0, lsl r1
   14c0c:	andeq	r5, r1, r0, lsl r1
   14c10:	andeq	r5, r1, r0, lsl r1
   14c14:	andeq	r5, r1, r0, lsl r1
   14c18:	andeq	r5, r1, r0, lsl r1
   14c1c:	andeq	r5, r1, r0, lsl r1
   14c20:	andeq	r5, r1, r0, lsl r1
   14c24:	andeq	r5, r1, r0, lsl r1
   14c28:	andeq	r5, r1, r0, lsl r1
   14c2c:	andeq	r5, r1, r0, lsl r1
   14c30:	andeq	r5, r1, r0, lsl r1
   14c34:	andeq	r5, r1, r0, lsl r1
   14c38:	andeq	r5, r1, r0, lsl r1
   14c3c:	andeq	r5, r1, r0, lsl r1
   14c40:	andeq	r5, r1, r0, lsl r1
   14c44:	andeq	r5, r1, r0, lsl r1
   14c48:	andeq	r5, r1, r0, lsl r1
   14c4c:	andeq	r4, r1, ip, lsr lr
   14c50:	andeq	r4, r1, r0, asr #28
   14c54:	andeq	r4, r1, r0, asr #28
   14c58:	andeq	r4, r1, r0, lsr lr
   14c5c:	andeq	r4, r1, r0, asr #28
   14c60:	andeq	r4, r1, r8, asr #27
   14c64:	andeq	r4, r1, r0, asr #28
   14c68:	andeq	r4, r1, ip, ror #31
   14c6c:	andeq	r4, r1, r0, asr #28
   14c70:	andeq	r4, r1, r0, asr #28
   14c74:	andeq	r4, r1, r0, asr #28
   14c78:	andeq	r4, r1, r8, asr #27
   14c7c:	andeq	r4, r1, r8, asr #27
   14c80:	andeq	r4, r1, r8, asr #27
   14c84:	andeq	r4, r1, r8, asr #27
   14c88:	andeq	r4, r1, r8, asr #27
   14c8c:	andeq	r4, r1, r8, asr #27
   14c90:	andeq	r4, r1, r8, asr #27
   14c94:	andeq	r4, r1, r8, asr #27
   14c98:	andeq	r4, r1, r8, asr #27
   14c9c:	andeq	r4, r1, r8, asr #27
   14ca0:	andeq	r4, r1, r8, asr #27
   14ca4:	andeq	r4, r1, r8, asr #27
   14ca8:	andeq	r4, r1, r8, asr #27
   14cac:	andeq	r4, r1, r8, asr #27
   14cb0:	andeq	r4, r1, r8, asr #27
   14cb4:	andeq	r4, r1, r8, asr #27
   14cb8:	andeq	r4, r1, r0, asr #28
   14cbc:	andeq	r4, r1, r0, asr #28
   14cc0:	andeq	r4, r1, r0, asr #28
   14cc4:	andeq	r4, r1, r0, asr #28
   14cc8:			; <UNDEFINED> instruction: 0x00014fb0
   14ccc:	andeq	r5, r1, r0, lsl r1
   14cd0:	andeq	r4, r1, r8, asr #27
   14cd4:	andeq	r4, r1, r8, asr #27
   14cd8:	andeq	r4, r1, r8, asr #27
   14cdc:	andeq	r4, r1, r8, asr #27
   14ce0:	andeq	r4, r1, r8, asr #27
   14ce4:	andeq	r4, r1, r8, asr #27
   14ce8:	andeq	r4, r1, r8, asr #27
   14cec:	andeq	r4, r1, r8, asr #27
   14cf0:	andeq	r4, r1, r8, asr #27
   14cf4:	andeq	r4, r1, r8, asr #27
   14cf8:	andeq	r4, r1, r8, asr #27
   14cfc:	andeq	r4, r1, r8, asr #27
   14d00:	andeq	r4, r1, r8, asr #27
   14d04:	andeq	r4, r1, r8, asr #27
   14d08:	andeq	r4, r1, r8, asr #27
   14d0c:	andeq	r4, r1, r8, asr #27
   14d10:	andeq	r4, r1, r8, asr #27
   14d14:	andeq	r4, r1, r8, asr #27
   14d18:	andeq	r4, r1, r8, asr #27
   14d1c:	andeq	r4, r1, r8, asr #27
   14d20:	andeq	r4, r1, r8, asr #27
   14d24:	andeq	r4, r1, r8, asr #27
   14d28:	andeq	r4, r1, r8, asr #27
   14d2c:	andeq	r4, r1, r8, asr #27
   14d30:	andeq	r4, r1, r8, asr #27
   14d34:	andeq	r4, r1, r8, asr #27
   14d38:	andeq	r4, r1, r0, asr #28
   14d3c:	andeq	r4, r1, r4, ror lr
   14d40:	andeq	r4, r1, r8, asr #27
   14d44:	andeq	r4, r1, r0, asr #28
   14d48:	andeq	r4, r1, r8, asr #27
   14d4c:	andeq	r4, r1, r0, asr #28
   14d50:	andeq	r4, r1, r8, asr #27
   14d54:	andeq	r4, r1, r8, asr #27
   14d58:	andeq	r4, r1, r8, asr #27
   14d5c:	andeq	r4, r1, r8, asr #27
   14d60:	andeq	r4, r1, r8, asr #27
   14d64:	andeq	r4, r1, r8, asr #27
   14d68:	andeq	r4, r1, r8, asr #27
   14d6c:	andeq	r4, r1, r8, asr #27
   14d70:	andeq	r4, r1, r8, asr #27
   14d74:	andeq	r4, r1, r8, asr #27
   14d78:	andeq	r4, r1, r8, asr #27
   14d7c:	andeq	r4, r1, r8, asr #27
   14d80:	andeq	r4, r1, r8, asr #27
   14d84:	andeq	r4, r1, r8, asr #27
   14d88:	andeq	r4, r1, r8, asr #27
   14d8c:	andeq	r4, r1, r8, asr #27
   14d90:	andeq	r4, r1, r8, asr #27
   14d94:	andeq	r4, r1, r8, asr #27
   14d98:	andeq	r4, r1, r8, asr #27
   14d9c:	andeq	r4, r1, r8, asr #27
   14da0:	andeq	r4, r1, r8, asr #27
   14da4:	andeq	r4, r1, r8, asr #27
   14da8:	andeq	r4, r1, r8, asr #27
   14dac:	andeq	r4, r1, r8, asr #27
   14db0:	andeq	r4, r1, r8, asr #27
   14db4:	andeq	r4, r1, r8, asr #27
   14db8:	andeq	r4, r1, r8, lsl #28
   14dbc:	andeq	r4, r1, r0, asr #28
   14dc0:	andeq	r4, r1, r8, lsl #28
   14dc4:	andeq	r4, r1, r0, lsr lr
   14dc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14dcc:	tst	r0, #1
   14dd0:	bne	15088 <__assert_fail@plt+0x3988>
   14dd4:	ldr	r1, [fp, #16]
   14dd8:	ubfx	r0, r6, #5, #3
   14ddc:	mov	r2, #1
   14de0:	ldr	r0, [r1, r0, lsl #2]
   14de4:	and	r1, r6, #31
   14de8:	tst	r0, r2, lsl r1
   14dec:	beq	15088 <__assert_fail@plt+0x3988>
   14df0:	mov	r0, r6
   14df4:	mov	r1, r8
   14df8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14dfc:	tst	r2, #1
   14e00:	beq	150a8 <__assert_fail@plt+0x39a8>
   14e04:	b	15804 <__assert_fail@plt+0x4104>
   14e08:	cmp	r7, #1
   14e0c:	beq	14e30 <__assert_fail@plt+0x3730>
   14e10:	mov	r8, #0
   14e14:	cmn	r7, #1
   14e18:	bne	15074 <__assert_fail@plt+0x3974>
   14e1c:	ldrb	r0, [lr, #1]
   14e20:	cmp	r0, #0
   14e24:	beq	14e30 <__assert_fail@plt+0x3730>
   14e28:	mvn	r7, #0
   14e2c:	b	15074 <__assert_fail@plt+0x3974>
   14e30:	mov	r8, #0
   14e34:	cmp	sl, #0
   14e38:	bne	15074 <__assert_fail@plt+0x3974>
   14e3c:	mov	r1, #1
   14e40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14e44:	cmp	r0, #2
   14e48:	bne	14e60 <__assert_fail@plt+0x3760>
   14e4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14e50:	mov	r8, r1
   14e54:	tst	r0, #1
   14e58:	beq	14dc8 <__assert_fail@plt+0x36c8>
   14e5c:	b	15804 <__assert_fail@plt+0x4104>
   14e60:	mov	r8, r1
   14e64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14e68:	tst	r0, #1
   14e6c:	beq	14dd4 <__assert_fail@plt+0x36d4>
   14e70:	b	15088 <__assert_fail@plt+0x3988>
   14e74:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14e78:	cmp	r0, #2
   14e7c:	bne	1513c <__assert_fail@plt+0x3a3c>
   14e80:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14e84:	tst	r0, #1
   14e88:	bne	15804 <__assert_fail@plt+0x4104>
   14e8c:	mov	r0, #0
   14e90:	str	r0, [fp, #-56]	; 0xffffffc8
   14e94:	b	15154 <__assert_fail@plt+0x3a54>
   14e98:	mov	r0, #102	; 0x66
   14e9c:	b	151c4 <__assert_fail@plt+0x3ac4>
   14ea0:	mov	r2, #116	; 0x74
   14ea4:	b	14eb4 <__assert_fail@plt+0x37b4>
   14ea8:	mov	r0, #98	; 0x62
   14eac:	b	151c4 <__assert_fail@plt+0x3ac4>
   14eb0:	mov	r2, #114	; 0x72
   14eb4:	ldr	r0, [sp, #64]	; 0x40
   14eb8:	tst	r0, #1
   14ebc:	mov	r0, r2
   14ec0:	bne	151c4 <__assert_fail@plt+0x3ac4>
   14ec4:	b	15804 <__assert_fail@plt+0x4104>
   14ec8:	ldr	r0, [sp, #88]	; 0x58
   14ecc:	tst	r0, #1
   14ed0:	beq	151e4 <__assert_fail@plt+0x3ae4>
   14ed4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ed8:	tst	r0, #1
   14edc:	bne	15940 <__assert_fail@plt+0x4240>
   14ee0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14ee4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14ee8:	subs	r0, r0, #2
   14eec:	movwne	r0, #1
   14ef0:	orr	r0, r0, r1
   14ef4:	tst	r0, #1
   14ef8:	bne	14f34 <__assert_fail@plt+0x3834>
   14efc:	cmp	r9, r5
   14f00:	movcc	r0, #39	; 0x27
   14f04:	strbcc	r0, [ip, r9]
   14f08:	add	r0, r9, #1
   14f0c:	cmp	r0, r5
   14f10:	movcc	r1, #36	; 0x24
   14f14:	strbcc	r1, [ip, r0]
   14f18:	add	r0, r9, #2
   14f1c:	add	r9, r9, #3
   14f20:	cmp	r0, r5
   14f24:	movcc	r1, #39	; 0x27
   14f28:	strbcc	r1, [ip, r0]
   14f2c:	mov	r0, #1
   14f30:	str	r0, [fp, #-52]	; 0xffffffcc
   14f34:	mov	r1, #1
   14f38:	cmp	r9, r5
   14f3c:	mov	r8, #0
   14f40:	mov	r6, #48	; 0x30
   14f44:	str	r1, [fp, #-56]	; 0xffffffc8
   14f48:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14f4c:	movcc	r0, #92	; 0x5c
   14f50:	strbcc	r0, [ip, r9]
   14f54:	add	r0, r9, #1
   14f58:	cmp	r1, #2
   14f5c:	beq	153b0 <__assert_fail@plt+0x3cb0>
   14f60:	add	r1, sl, #1
   14f64:	cmp	r1, r7
   14f68:	bcs	153b0 <__assert_fail@plt+0x3cb0>
   14f6c:	ldrb	r1, [lr, r1]
   14f70:	sub	r1, r1, #48	; 0x30
   14f74:	uxtb	r1, r1
   14f78:	cmp	r1, #9
   14f7c:	bhi	153b0 <__assert_fail@plt+0x3cb0>
   14f80:	cmp	r0, r5
   14f84:	movcc	r1, #48	; 0x30
   14f88:	strbcc	r1, [ip, r0]
   14f8c:	add	r0, r9, #2
   14f90:	add	r9, r9, #3
   14f94:	cmp	r0, r5
   14f98:	movcc	r1, #48	; 0x30
   14f9c:	strbcc	r1, [ip, r0]
   14fa0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fa4:	tst	r0, #1
   14fa8:	beq	14dd4 <__assert_fail@plt+0x36d4>
   14fac:	b	15088 <__assert_fail@plt+0x3988>
   14fb0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14fb4:	mov	r6, #63	; 0x3f
   14fb8:	cmp	r0, #5
   14fbc:	beq	153c4 <__assert_fail@plt+0x3cc4>
   14fc0:	mov	r1, #0
   14fc4:	cmp	r0, #2
   14fc8:	str	r1, [fp, #-56]	; 0xffffffc8
   14fcc:	bne	1548c <__assert_fail@plt+0x3d8c>
   14fd0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14fd4:	mov	r8, #0
   14fd8:	tst	r0, #1
   14fdc:	beq	14dc8 <__assert_fail@plt+0x36c8>
   14fe0:	b	15804 <__assert_fail@plt+0x4104>
   14fe4:	mov	r0, #118	; 0x76
   14fe8:	b	151c4 <__assert_fail@plt+0x3ac4>
   14fec:	mov	r0, #1
   14ff0:	mov	r6, #39	; 0x27
   14ff4:	str	r0, [sp, #60]	; 0x3c
   14ff8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14ffc:	cmp	r0, #2
   15000:	bne	15204 <__assert_fail@plt+0x3b04>
   15004:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15008:	tst	r0, #1
   1500c:	bne	15804 <__assert_fail@plt+0x4104>
   15010:	ldr	r2, [sp, #56]	; 0x38
   15014:	clz	r1, r5
   15018:	mov	r8, #1
   1501c:	lsr	r1, r1, #5
   15020:	cmp	r2, #0
   15024:	mov	r0, r2
   15028:	movwne	r0, #1
   1502c:	orrs	r0, r0, r1
   15030:	moveq	r2, r5
   15034:	moveq	r5, r0
   15038:	cmp	r9, r5
   1503c:	str	r2, [sp, #56]	; 0x38
   15040:	movcc	r0, #39	; 0x27
   15044:	strbcc	r0, [ip, r9]
   15048:	add	r0, r9, #1
   1504c:	cmp	r0, r5
   15050:	movcc	r1, #92	; 0x5c
   15054:	strbcc	r1, [ip, r0]
   15058:	add	r0, r9, #2
   1505c:	add	r9, r9, #3
   15060:	cmp	r0, r5
   15064:	movcc	r1, #39	; 0x27
   15068:	strbcc	r1, [ip, r0]
   1506c:	mov	r0, #0
   15070:	str	r0, [fp, #-52]	; 0xffffffcc
   15074:	mov	r0, #0
   15078:	str	r0, [fp, #-56]	; 0xffffffc8
   1507c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15080:	tst	r0, #1
   15084:	beq	14dd4 <__assert_fail@plt+0x36d4>
   15088:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1508c:	mov	r1, r8
   15090:	cmp	r0, #0
   15094:	mov	r0, r6
   15098:	beq	1515c <__assert_fail@plt+0x3a5c>
   1509c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   150a0:	tst	r2, #1
   150a4:	bne	15804 <__assert_fail@plt+0x4104>
   150a8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   150ac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   150b0:	subs	r2, r2, #2
   150b4:	movwne	r2, #1
   150b8:	orr	r2, r2, r3
   150bc:	tst	r2, #1
   150c0:	bne	150fc <__assert_fail@plt+0x39fc>
   150c4:	cmp	r9, r5
   150c8:	movcc	r2, #39	; 0x27
   150cc:	strbcc	r2, [ip, r9]
   150d0:	add	r2, r9, #1
   150d4:	cmp	r2, r5
   150d8:	movcc	r3, #36	; 0x24
   150dc:	strbcc	r3, [ip, r2]
   150e0:	add	r2, r9, #2
   150e4:	add	r9, r9, #3
   150e8:	cmp	r2, r5
   150ec:	movcc	r3, #39	; 0x27
   150f0:	strbcc	r3, [ip, r2]
   150f4:	mov	r2, #1
   150f8:	str	r2, [fp, #-52]	; 0xffffffcc
   150fc:	cmp	r9, r5
   15100:	movcc	r2, #92	; 0x5c
   15104:	strbcc	r2, [ip, r9]
   15108:	add	r9, r9, #1
   1510c:	b	151a4 <__assert_fail@plt+0x3aa4>
   15110:	ldr	r0, [sp, #40]	; 0x28
   15114:	cmp	r0, #1
   15118:	bne	15218 <__assert_fail@plt+0x3b18>
   1511c:	bl	11598 <__ctype_b_loc@plt>
   15120:	ldr	r0, [r0]
   15124:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15128:	mov	r1, #1
   1512c:	add	r0, r0, r6, lsl #1
   15130:	ldrb	r0, [r0, #1]
   15134:	ubfx	r8, r0, #6, #1
   15138:	b	15570 <__assert_fail@plt+0x3e70>
   1513c:	ldr	r1, [sp, #48]	; 0x30
   15140:	mov	r0, #0
   15144:	str	r0, [fp, #-56]	; 0xffffffc8
   15148:	mov	r0, #92	; 0x5c
   1514c:	cmp	r1, #0
   15150:	beq	151c4 <__assert_fail@plt+0x3ac4>
   15154:	mov	r6, #92	; 0x5c
   15158:	mov	r8, #0
   1515c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15160:	cmp	r0, #0
   15164:	bne	1519c <__assert_fail@plt+0x3a9c>
   15168:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1516c:	tst	r0, #1
   15170:	beq	1519c <__assert_fail@plt+0x3a9c>
   15174:	cmp	r9, r5
   15178:	movcc	r0, #39	; 0x27
   1517c:	strbcc	r0, [ip, r9]
   15180:	add	r0, r9, #1
   15184:	add	r9, r9, #2
   15188:	cmp	r0, r5
   1518c:	movcc	r1, #39	; 0x27
   15190:	strbcc	r1, [ip, r0]
   15194:	mov	r0, #0
   15198:	str	r0, [fp, #-52]	; 0xffffffcc
   1519c:	mov	r1, r8
   151a0:	mov	r0, r6
   151a4:	cmp	r9, r5
   151a8:	and	r4, r4, r1
   151ac:	strbcc	r0, [ip, r9]
   151b0:	add	r9, r9, #1
   151b4:	add	sl, sl, #1
   151b8:	cmn	r7, #1
   151bc:	bne	14ab4 <__assert_fail@plt+0x33b4>
   151c0:	b	14ac0 <__assert_fail@plt+0x33c0>
   151c4:	mov	r1, #0
   151c8:	mov	r8, #0
   151cc:	str	r1, [fp, #-56]	; 0xffffffc8
   151d0:	ldr	r1, [sp, #88]	; 0x58
   151d4:	tst	r1, #1
   151d8:	mov	r1, #0
   151dc:	beq	14dc8 <__assert_fail@plt+0x36c8>
   151e0:	b	1509c <__assert_fail@plt+0x399c>
   151e4:	ldr	r0, [sp, #36]	; 0x24
   151e8:	mov	r6, #0
   151ec:	mov	r8, #0
   151f0:	cmp	r0, #0
   151f4:	mov	r0, #0
   151f8:	str	r0, [fp, #-56]	; 0xffffffc8
   151fc:	bne	151b4 <__assert_fail@plt+0x3ab4>
   15200:	b	14dc8 <__assert_fail@plt+0x36c8>
   15204:	mov	r8, #1
   15208:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1520c:	tst	r0, #1
   15210:	beq	14dd4 <__assert_fail@plt+0x36d4>
   15214:	b	15088 <__assert_fail@plt+0x3988>
   15218:	mov	r0, #0
   1521c:	cmn	r7, #1
   15220:	str	r0, [fp, #-36]	; 0xffffffdc
   15224:	str	r0, [fp, #-40]	; 0xffffffd8
   15228:	bne	1523c <__assert_fail@plt+0x3b3c>
   1522c:	mov	r0, lr
   15230:	bl	115bc <strlen@plt>
   15234:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15238:	mov	r7, r0
   1523c:	ldr	r0, [sp, #44]	; 0x2c
   15240:	str	r4, [sp, #84]	; 0x54
   15244:	str	r5, [sp, #28]
   15248:	cmp	r0, #0
   1524c:	beq	154a0 <__assert_fail@plt+0x3da0>
   15250:	ldr	r0, [sp, #80]	; 0x50
   15254:	mov	r8, #1
   15258:	mov	r5, #0
   1525c:	add	r0, r0, sl
   15260:	str	r0, [sp, #24]
   15264:	sub	r0, fp, #40	; 0x28
   15268:	mov	r3, r0
   1526c:	b	152a8 <__assert_fail@plt+0x3ba8>
   15270:	ldr	r5, [sp, #68]	; 0x44
   15274:	add	r5, r0, r5
   15278:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1527c:	bl	114d8 <iswprint@plt>
   15280:	cmp	r0, #0
   15284:	sub	r4, fp, #40	; 0x28
   15288:	movwne	r0, #1
   1528c:	and	r8, r8, r0
   15290:	mov	r0, r4
   15294:	bl	11478 <mbsinit@plt>
   15298:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1529c:	mov	r3, r4
   152a0:	cmp	r0, #0
   152a4:	bne	15564 <__assert_fail@plt+0x3e64>
   152a8:	str	r5, [sp, #68]	; 0x44
   152ac:	add	r5, r5, sl
   152b0:	sub	r0, fp, #44	; 0x2c
   152b4:	add	r1, lr, r5
   152b8:	sub	r2, r7, r5
   152bc:	bl	2bd34 <__assert_fail@plt+0x1a634>
   152c0:	cmn	r0, #2
   152c4:	beq	15524 <__assert_fail@plt+0x3e24>
   152c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   152cc:	cmn	r0, #1
   152d0:	beq	15518 <__assert_fail@plt+0x3e18>
   152d4:	cmp	r0, #0
   152d8:	beq	1551c <__assert_fail@plt+0x3e1c>
   152dc:	cmp	r0, #2
   152e0:	bcc	15270 <__assert_fail@plt+0x3b70>
   152e4:	ldr	r1, [sp, #68]	; 0x44
   152e8:	ldr	r2, [sp, #24]
   152ec:	add	r1, r2, r1
   152f0:	sub	r2, r0, #1
   152f4:	ldrb	r3, [r1]
   152f8:	sub	r3, r3, #91	; 0x5b
   152fc:	cmp	r3, #33	; 0x21
   15300:	bls	15320 <__assert_fail@plt+0x3c20>
   15304:	add	r1, r1, #1
   15308:	subs	r2, r2, #1
   1530c:	beq	15270 <__assert_fail@plt+0x3b70>
   15310:	ldrb	r3, [r1]
   15314:	sub	r3, r3, #91	; 0x5b
   15318:	cmp	r3, #33	; 0x21
   1531c:	bhi	15304 <__assert_fail@plt+0x3c04>
   15320:	add	r5, pc, #0
   15324:	ldr	pc, [r5, r3, lsl #2]
   15328:	andeq	r5, r1, ip, lsr r8
   1532c:	andeq	r5, r1, ip, lsr r8
   15330:	andeq	r5, r1, r4, lsl #6
   15334:	andeq	r5, r1, ip, lsr r8
   15338:	andeq	r5, r1, r4, lsl #6
   1533c:	andeq	r5, r1, ip, lsr r8
   15340:	andeq	r5, r1, r4, lsl #6
   15344:	andeq	r5, r1, r4, lsl #6
   15348:	andeq	r5, r1, r4, lsl #6
   1534c:	andeq	r5, r1, r4, lsl #6
   15350:	andeq	r5, r1, r4, lsl #6
   15354:	andeq	r5, r1, r4, lsl #6
   15358:	andeq	r5, r1, r4, lsl #6
   1535c:	andeq	r5, r1, r4, lsl #6
   15360:	andeq	r5, r1, r4, lsl #6
   15364:	andeq	r5, r1, r4, lsl #6
   15368:	andeq	r5, r1, r4, lsl #6
   1536c:	andeq	r5, r1, r4, lsl #6
   15370:	andeq	r5, r1, r4, lsl #6
   15374:	andeq	r5, r1, r4, lsl #6
   15378:	andeq	r5, r1, r4, lsl #6
   1537c:	andeq	r5, r1, r4, lsl #6
   15380:	andeq	r5, r1, r4, lsl #6
   15384:	andeq	r5, r1, r4, lsl #6
   15388:	andeq	r5, r1, r4, lsl #6
   1538c:	andeq	r5, r1, r4, lsl #6
   15390:	andeq	r5, r1, r4, lsl #6
   15394:	andeq	r5, r1, r4, lsl #6
   15398:	andeq	r5, r1, r4, lsl #6
   1539c:	andeq	r5, r1, r4, lsl #6
   153a0:	andeq	r5, r1, r4, lsl #6
   153a4:	andeq	r5, r1, r4, lsl #6
   153a8:	andeq	r5, r1, r4, lsl #6
   153ac:	andeq	r5, r1, ip, lsr r8
   153b0:	mov	r9, r0
   153b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   153b8:	tst	r0, #1
   153bc:	beq	14dd4 <__assert_fail@plt+0x36d4>
   153c0:	b	15088 <__assert_fail@plt+0x3988>
   153c4:	mov	r0, #0
   153c8:	str	r0, [fp, #-56]	; 0xffffffc8
   153cc:	ldr	r0, [sp, #32]
   153d0:	cmp	r0, #0
   153d4:	beq	1548c <__assert_fail@plt+0x3d8c>
   153d8:	add	r0, sl, #2
   153dc:	mov	r1, r7
   153e0:	cmp	r0, r7
   153e4:	bcs	1548c <__assert_fail@plt+0x3d8c>
   153e8:	add	r1, sl, lr
   153ec:	ldrb	r1, [r1, #1]
   153f0:	cmp	r1, #63	; 0x3f
   153f4:	bne	1548c <__assert_fail@plt+0x3d8c>
   153f8:	ldrb	r8, [lr, r0]
   153fc:	sub	r2, r8, #33	; 0x21
   15400:	cmp	r2, #29
   15404:	bhi	1548c <__assert_fail@plt+0x3d8c>
   15408:	mov	r1, r4
   1540c:	movw	r4, #20929	; 0x51c1
   15410:	mov	r3, #1
   15414:	movt	r4, #14336	; 0x3800
   15418:	tst	r4, r3, lsl r2
   1541c:	beq	15748 <__assert_fail@plt+0x4048>
   15420:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15424:	tst	r2, #1
   15428:	bne	15804 <__assert_fail@plt+0x4104>
   1542c:	cmp	r9, r5
   15430:	mov	r6, r8
   15434:	mov	r4, r1
   15438:	mov	sl, r0
   1543c:	mov	r8, #0
   15440:	movcc	r2, #63	; 0x3f
   15444:	strbcc	r2, [ip, r9]
   15448:	add	r2, r9, #1
   1544c:	cmp	r2, r5
   15450:	movcc	r3, #34	; 0x22
   15454:	strbcc	r3, [ip, r2]
   15458:	add	r2, r9, #2
   1545c:	cmp	r2, r5
   15460:	movcc	r3, #34	; 0x22
   15464:	strbcc	r3, [ip, r2]
   15468:	add	r2, r9, #3
   1546c:	add	r9, r9, #4
   15470:	cmp	r2, r5
   15474:	movcc	r3, #63	; 0x3f
   15478:	strbcc	r3, [ip, r2]
   1547c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15480:	tst	r0, #1
   15484:	beq	14dd4 <__assert_fail@plt+0x36d4>
   15488:	b	15088 <__assert_fail@plt+0x3988>
   1548c:	mov	r8, #0
   15490:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15494:	tst	r0, #1
   15498:	beq	14dd4 <__assert_fail@plt+0x36d4>
   1549c:	b	15088 <__assert_fail@plt+0x3988>
   154a0:	mov	r8, #1
   154a4:	mov	r5, #0
   154a8:	sub	r4, fp, #40	; 0x28
   154ac:	str	r5, [sp, #68]	; 0x44
   154b0:	add	r5, r5, sl
   154b4:	sub	r0, fp, #44	; 0x2c
   154b8:	mov	r3, r4
   154bc:	add	r1, lr, r5
   154c0:	sub	r2, r7, r5
   154c4:	bl	2bd34 <__assert_fail@plt+0x1a634>
   154c8:	cmn	r0, #2
   154cc:	beq	15524 <__assert_fail@plt+0x3e24>
   154d0:	cmn	r0, #1
   154d4:	beq	15518 <__assert_fail@plt+0x3e18>
   154d8:	ldr	r5, [sp, #68]	; 0x44
   154dc:	cmp	r0, #0
   154e0:	beq	15560 <__assert_fail@plt+0x3e60>
   154e4:	add	r5, r0, r5
   154e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   154ec:	bl	114d8 <iswprint@plt>
   154f0:	cmp	r0, #0
   154f4:	sub	r4, fp, #40	; 0x28
   154f8:	movwne	r0, #1
   154fc:	and	r8, r8, r0
   15500:	mov	r0, r4
   15504:	bl	11478 <mbsinit@plt>
   15508:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1550c:	cmp	r0, #0
   15510:	beq	154ac <__assert_fail@plt+0x3dac>
   15514:	b	15564 <__assert_fail@plt+0x3e64>
   15518:	mov	r8, #0
   1551c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15520:	b	15558 <__assert_fail@plt+0x3e58>
   15524:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15528:	mov	r8, #0
   1552c:	cmp	r5, r7
   15530:	bcs	15558 <__assert_fail@plt+0x3e58>
   15534:	ldrb	r0, [lr, r5]
   15538:	cmp	r0, #0
   1553c:	beq	15558 <__assert_fail@plt+0x3e58>
   15540:	ldr	r0, [sp, #68]	; 0x44
   15544:	add	r0, r0, #1
   15548:	add	r5, r0, sl
   1554c:	str	r0, [sp, #68]	; 0x44
   15550:	cmp	r5, r7
   15554:	bcc	15534 <__assert_fail@plt+0x3e34>
   15558:	ldr	r5, [sp, #68]	; 0x44
   1555c:	b	15564 <__assert_fail@plt+0x3e64>
   15560:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15564:	mov	r1, r5
   15568:	ldr	r5, [sp, #28]
   1556c:	ldr	r4, [sp, #84]	; 0x54
   15570:	ldr	r0, [sp, #52]	; 0x34
   15574:	ldr	ip, [fp, #-84]	; 0xffffffac
   15578:	cmp	r1, #1
   1557c:	orr	r2, r8, r0
   15580:	mov	r0, r1
   15584:	bhi	15590 <__assert_fail@plt+0x3e90>
   15588:	tst	r2, #1
   1558c:	bne	14dc8 <__assert_fail@plt+0x36c8>
   15590:	add	r0, r0, sl
   15594:	str	r2, [sp, #84]	; 0x54
   15598:	str	r0, [fp, #-56]	; 0xffffffc8
   1559c:	mov	r0, #0
   155a0:	tst	r2, #1
   155a4:	bne	15684 <__assert_fail@plt+0x3f84>
   155a8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   155ac:	tst	r1, #1
   155b0:	bne	15804 <__assert_fail@plt+0x4104>
   155b4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   155b8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   155bc:	subs	r2, r1, #2
   155c0:	movwne	r2, #1
   155c4:	orr	r2, r2, r0
   155c8:	tst	r2, #1
   155cc:	bne	15608 <__assert_fail@plt+0x3f08>
   155d0:	cmp	r9, r5
   155d4:	add	r2, r9, #1
   155d8:	mov	r0, #1
   155dc:	movcc	r1, #39	; 0x27
   155e0:	str	r0, [fp, #-52]	; 0xffffffcc
   155e4:	strbcc	r1, [ip, r9]
   155e8:	cmp	r2, r5
   155ec:	movcc	r1, #36	; 0x24
   155f0:	strbcc	r1, [ip, r2]
   155f4:	add	r2, r9, #2
   155f8:	add	r9, r9, #3
   155fc:	cmp	r2, r5
   15600:	movcc	r1, #39	; 0x27
   15604:	strbcc	r1, [ip, r2]
   15608:	cmp	r9, r5
   1560c:	add	r2, r9, #1
   15610:	movcc	r1, #92	; 0x5c
   15614:	strbcc	r1, [ip, r9]
   15618:	cmp	r2, r5
   1561c:	bcs	15630 <__assert_fail@plt+0x3f30>
   15620:	uxtb	r3, r6
   15624:	mov	r1, #48	; 0x30
   15628:	orr	r3, r1, r3, lsr #6
   1562c:	strb	r3, [ip, r2]
   15630:	add	r2, r9, #2
   15634:	add	r9, r9, #3
   15638:	cmp	r2, r5
   1563c:	lsrcc	r3, r6, #3
   15640:	movcc	r1, #6
   15644:	bficc	r3, r1, #3, #29
   15648:	mov	r1, #6
   1564c:	bfi	r6, r1, #3, #29
   15650:	strbcc	r3, [ip, r2]
   15654:	mov	r2, #1
   15658:	b	156b8 <__assert_fail@plt+0x3fb8>
   1565c:	ldr	r1, [sp, #80]	; 0x50
   15660:	cmp	r9, r2
   15664:	mov	r5, r2
   15668:	ldr	r2, [sp, #84]	; 0x54
   1566c:	strbcc	r6, [ip, r9]
   15670:	add	r9, r9, #1
   15674:	ldrb	r6, [r1, sl]
   15678:	mov	sl, r3
   1567c:	tst	r2, #1
   15680:	beq	155a8 <__assert_fail@plt+0x3ea8>
   15684:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15688:	tst	r1, #1
   1568c:	beq	156ac <__assert_fail@plt+0x3fac>
   15690:	cmp	r9, r5
   15694:	mov	r2, r0
   15698:	movcc	r1, #92	; 0x5c
   1569c:	strbcc	r1, [ip, r9]
   156a0:	add	r9, r9, #1
   156a4:	mov	r1, #0
   156a8:	b	156b4 <__assert_fail@plt+0x3fb4>
   156ac:	mov	r1, #0
   156b0:	mov	r2, r0
   156b4:	str	r1, [fp, #-48]	; 0xffffffd0
   156b8:	mov	r0, r2
   156bc:	and	r1, r2, #1
   156c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   156c4:	add	r3, sl, #1
   156c8:	cmp	r2, r3
   156cc:	bls	1572c <__assert_fail@plt+0x402c>
   156d0:	mov	r2, r5
   156d4:	ldr	r5, [fp, #-52]	; 0xffffffcc
   156d8:	cmp	r1, #0
   156dc:	movwne	r1, #1
   156e0:	mvn	r5, r5
   156e4:	orr	r5, r5, r1
   156e8:	tst	r5, #1
   156ec:	bne	1565c <__assert_fail@plt+0x3f5c>
   156f0:	cmp	r9, r2
   156f4:	movcc	r5, r4
   156f8:	movcc	r4, #39	; 0x27
   156fc:	strbcc	r4, [ip, r9]
   15700:	movcc	r4, r5
   15704:	add	r5, r9, #1
   15708:	add	r9, r9, #2
   1570c:	cmp	r5, r2
   15710:	movcc	r1, r4
   15714:	movcc	r4, #39	; 0x27
   15718:	strbcc	r4, [ip, r5]
   1571c:	movcc	r4, r1
   15720:	mov	r1, #0
   15724:	str	r1, [fp, #-52]	; 0xffffffcc
   15728:	b	1565c <__assert_fail@plt+0x3f5c>
   1572c:	cmp	r1, #0
   15730:	movwne	r1, #1
   15734:	str	r1, [fp, #-56]	; 0xffffffc8
   15738:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1573c:	cmp	r0, #0
   15740:	beq	15168 <__assert_fail@plt+0x3a68>
   15744:	b	1519c <__assert_fail@plt+0x3a9c>
   15748:	mov	r8, #0
   1574c:	mov	r4, r1
   15750:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15754:	tst	r0, #1
   15758:	beq	14dd4 <__assert_fail@plt+0x36d4>
   1575c:	b	15088 <__assert_fail@plt+0x3988>
   15760:	mov	r7, sl
   15764:	b	1576c <__assert_fail@plt+0x406c>
   15768:	mvn	r7, #0
   1576c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15770:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15774:	ldr	r2, [sp, #88]	; 0x58
   15778:	eor	r0, r1, #2
   1577c:	orr	r0, r0, r9
   15780:	clz	r0, r0
   15784:	lsr	r0, r0, #5
   15788:	tst	r3, r0
   1578c:	bne	15804 <__assert_fail@plt+0x4104>
   15790:	subs	r0, r1, #2
   15794:	movwne	r0, #1
   15798:	orr	r0, r3, r0
   1579c:	tst	r0, #1
   157a0:	ldreq	r0, [sp, #60]	; 0x3c
   157a4:	eoreq	r0, r0, #1
   157a8:	tsteq	r0, #1
   157ac:	bne	158e0 <__assert_fail@plt+0x41e0>
   157b0:	tst	r4, #1
   157b4:	bne	158a4 <__assert_fail@plt+0x41a4>
   157b8:	ldr	r6, [sp, #56]	; 0x38
   157bc:	mov	r8, #0
   157c0:	cmp	r6, #0
   157c4:	beq	158dc <__assert_fail@plt+0x41dc>
   157c8:	mov	r1, #0
   157cc:	mov	r4, #2
   157d0:	cmp	r5, #0
   157d4:	mov	r0, r2
   157d8:	mov	r3, #0
   157dc:	str	r1, [sp, #84]	; 0x54
   157e0:	beq	14628 <__assert_fail@plt+0x2f28>
   157e4:	b	158e0 <__assert_fail@plt+0x41e0>
   157e8:	movw	r0, #52178	; 0xcbd2
   157ec:	movt	r0, #2
   157f0:	str	r0, [sp, #76]	; 0x4c
   157f4:	mov	r9, #0
   157f8:	tst	r8, #1
   157fc:	beq	148c0 <__assert_fail@plt+0x31c0>
   15800:	b	14a00 <__assert_fail@plt+0x3300>
   15804:	ldr	r1, [sp, #88]	; 0x58
   15808:	mov	r0, #2
   1580c:	tst	r1, #1
   15810:	movwne	r0, #4
   15814:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15818:	ldr	r1, [fp, #12]
   1581c:	cmp	r2, #2
   15820:	moveq	r2, r0
   15824:	b	1585c <__assert_fail@plt+0x415c>
   15828:	ldr	ip, [fp, #-84]	; 0xffffffac
   1582c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15830:	ldr	r1, [fp, #12]
   15834:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15838:	b	1585c <__assert_fail@plt+0x415c>
   1583c:	ldr	r1, [sp, #88]	; 0x58
   15840:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15844:	ldr	r5, [sp, #28]
   15848:	mov	r0, #2
   1584c:	tst	r1, #1
   15850:	ldr	r1, [fp, #12]
   15854:	movwne	r0, #4
   15858:	mov	r2, r0
   1585c:	mov	r0, #0
   15860:	bic	r1, r1, #2
   15864:	str	r2, [sp]
   15868:	mov	r2, lr
   1586c:	str	r0, [sp, #8]
   15870:	ldr	r0, [sp, #72]	; 0x48
   15874:	str	r1, [sp, #4]
   15878:	mov	r1, r5
   1587c:	str	r0, [sp, #12]
   15880:	ldr	r0, [sp, #76]	; 0x4c
   15884:	str	r0, [sp, #16]
   15888:	mov	r0, ip
   1588c:	mov	r3, r7
   15890:	bl	1459c <__assert_fail@plt+0x2e9c>
   15894:	mov	r9, r0
   15898:	mov	r0, r9
   1589c:	sub	sp, fp, #28
   158a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158a4:	mov	r0, #5
   158a8:	ldr	r1, [sp, #56]	; 0x38
   158ac:	ldr	r2, [fp, #-80]	; 0xffffffb0
   158b0:	str	r0, [sp]
   158b4:	ldr	r0, [fp, #12]
   158b8:	str	r0, [sp, #4]
   158bc:	ldr	r0, [fp, #16]
   158c0:	str	r0, [sp, #8]
   158c4:	ldr	r0, [sp, #72]	; 0x48
   158c8:	str	r0, [sp, #12]
   158cc:	ldr	r0, [sp, #76]	; 0x4c
   158d0:	str	r0, [sp, #16]
   158d4:	ldr	r0, [fp, #-84]	; 0xffffffac
   158d8:	b	1588c <__assert_fail@plt+0x418c>
   158dc:	mov	r3, #0
   158e0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   158e4:	cmp	r1, #0
   158e8:	beq	15924 <__assert_fail@plt+0x4224>
   158ec:	ldr	r2, [fp, #-84]	; 0xffffffac
   158f0:	tst	r3, #1
   158f4:	bne	15928 <__assert_fail@plt+0x4228>
   158f8:	ldrb	r0, [r1]
   158fc:	cmp	r0, #0
   15900:	beq	15928 <__assert_fail@plt+0x4228>
   15904:	add	r1, r1, #1
   15908:	cmp	r9, r5
   1590c:	strbcc	r0, [r2, r9]
   15910:	add	r9, r9, #1
   15914:	ldrb	r0, [r1], #1
   15918:	cmp	r0, #0
   1591c:	bne	15908 <__assert_fail@plt+0x4208>
   15920:	b	15928 <__assert_fail@plt+0x4228>
   15924:	ldr	r2, [fp, #-84]	; 0xffffffac
   15928:	cmp	r9, r5
   1592c:	movcc	r0, #0
   15930:	strbcc	r0, [r2, r9]
   15934:	mov	r0, r9
   15938:	sub	sp, fp, #28
   1593c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15940:	mov	r0, #4
   15944:	b	15814 <__assert_fail@plt+0x4114>
   15948:	bl	116e8 <abort@plt>
   1594c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15950:	add	fp, sp, #28
   15954:	sub	sp, sp, #28
   15958:	movw	r5, #57792	; 0xe1c0
   1595c:	cmp	r2, #0
   15960:	mov	r4, r1
   15964:	mov	r7, r0
   15968:	str	r0, [sp, #20]
   1596c:	movt	r5, #3
   15970:	movne	r5, r2
   15974:	bl	115ec <__errno_location@plt>
   15978:	mov	sl, r0
   1597c:	ldr	r2, [r5, #40]	; 0x28
   15980:	ldr	r3, [r5, #44]	; 0x2c
   15984:	ldm	r5, {r0, r1}
   15988:	orr	r8, r1, #1
   1598c:	add	r9, r5, #8
   15990:	mov	r1, #0
   15994:	ldr	r6, [sl]
   15998:	stm	sp, {r0, r8, r9}
   1599c:	mov	r0, #0
   159a0:	str	r2, [sp, #12]
   159a4:	str	r3, [sp, #16]
   159a8:	mov	r2, r7
   159ac:	mov	r3, r4
   159b0:	str	r6, [sp, #24]
   159b4:	mov	r6, r4
   159b8:	bl	1459c <__assert_fail@plt+0x2e9c>
   159bc:	add	r7, r0, #1
   159c0:	mov	r0, r7
   159c4:	bl	2b33c <__assert_fail@plt+0x19c3c>
   159c8:	mov	r4, r0
   159cc:	ldr	r0, [r5]
   159d0:	ldr	r2, [r5, #44]	; 0x2c
   159d4:	ldr	r1, [r5, #40]	; 0x28
   159d8:	mov	r3, r6
   159dc:	stm	sp, {r0, r8, r9}
   159e0:	str	r2, [sp, #16]
   159e4:	ldr	r2, [sp, #20]
   159e8:	str	r1, [sp, #12]
   159ec:	mov	r0, r4
   159f0:	mov	r1, r7
   159f4:	bl	1459c <__assert_fail@plt+0x2e9c>
   159f8:	ldr	r0, [sp, #24]
   159fc:	str	r0, [sl]
   15a00:	mov	r0, r4
   15a04:	sub	sp, fp, #28
   15a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a10:	add	fp, sp, #28
   15a14:	sub	sp, sp, #36	; 0x24
   15a18:	movw	r8, #57792	; 0xe1c0
   15a1c:	cmp	r3, #0
   15a20:	mov	r4, r2
   15a24:	str	r2, [sp, #24]
   15a28:	mov	r5, r1
   15a2c:	mov	r6, r0
   15a30:	str	r0, [sp, #20]
   15a34:	movt	r8, #3
   15a38:	movne	r8, r3
   15a3c:	bl	115ec <__errno_location@plt>
   15a40:	str	r0, [sp, #28]
   15a44:	ldr	r1, [r8, #40]	; 0x28
   15a48:	ldr	r2, [r8, #44]	; 0x2c
   15a4c:	ldr	r7, [r0]
   15a50:	cmp	r4, #0
   15a54:	add	sl, r8, #8
   15a58:	mov	r0, #0
   15a5c:	ldm	r8, {r3, r9}
   15a60:	orreq	r9, r9, #1
   15a64:	stm	sp, {r3, r9, sl}
   15a68:	str	r1, [sp, #12]
   15a6c:	str	r2, [sp, #16]
   15a70:	mov	r1, #0
   15a74:	mov	r2, r6
   15a78:	mov	r3, r5
   15a7c:	str	r7, [sp, #32]
   15a80:	mov	r7, r5
   15a84:	bl	1459c <__assert_fail@plt+0x2e9c>
   15a88:	add	r4, r0, #1
   15a8c:	mov	r5, r0
   15a90:	mov	r0, r4
   15a94:	bl	2b33c <__assert_fail@plt+0x19c3c>
   15a98:	mov	r6, r0
   15a9c:	ldr	r0, [r8]
   15aa0:	ldr	r2, [r8, #44]	; 0x2c
   15aa4:	ldr	r1, [r8, #40]	; 0x28
   15aa8:	mov	r3, r7
   15aac:	stm	sp, {r0, r9, sl}
   15ab0:	str	r2, [sp, #16]
   15ab4:	ldr	r2, [sp, #20]
   15ab8:	str	r1, [sp, #12]
   15abc:	mov	r0, r6
   15ac0:	mov	r1, r4
   15ac4:	bl	1459c <__assert_fail@plt+0x2e9c>
   15ac8:	ldr	r0, [sp, #24]
   15acc:	ldr	r1, [sp, #32]
   15ad0:	ldr	r2, [sp, #28]
   15ad4:	cmp	r0, #0
   15ad8:	str	r1, [r2]
   15adc:	strne	r5, [r0]
   15ae0:	mov	r0, r6
   15ae4:	sub	sp, fp, #28
   15ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aec:	push	{r4, r5, r6, r7, fp, lr}
   15af0:	add	fp, sp, #16
   15af4:	movw	r4, #57728	; 0xe180
   15af8:	movt	r4, #3
   15afc:	ldrd	r6, [r4]
   15b00:	cmp	r7, #2
   15b04:	blt	15b30 <__assert_fail@plt+0x4430>
   15b08:	add	r5, r6, #12
   15b0c:	mov	r7, #0
   15b10:	ldr	r0, [r5, r7, lsl #3]
   15b14:	bl	13ddc <__assert_fail@plt+0x26dc>
   15b18:	ldr	r1, [r4, #4]
   15b1c:	add	r2, r7, #2
   15b20:	add	r0, r7, #1
   15b24:	mov	r7, r0
   15b28:	cmp	r2, r1
   15b2c:	blt	15b10 <__assert_fail@plt+0x4410>
   15b30:	ldr	r0, [r6, #4]
   15b34:	movw	r5, #57840	; 0xe1f0
   15b38:	movt	r5, #3
   15b3c:	cmp	r0, r5
   15b40:	beq	15b54 <__assert_fail@plt+0x4454>
   15b44:	bl	13ddc <__assert_fail@plt+0x26dc>
   15b48:	mov	r0, #256	; 0x100
   15b4c:	str	r0, [r4, #8]
   15b50:	str	r5, [r4, #12]
   15b54:	add	r5, r4, #8
   15b58:	cmp	r6, r5
   15b5c:	beq	15b6c <__assert_fail@plt+0x446c>
   15b60:	mov	r0, r6
   15b64:	bl	13ddc <__assert_fail@plt+0x26dc>
   15b68:	str	r5, [r4]
   15b6c:	mov	r0, #1
   15b70:	str	r0, [r4, #4]
   15b74:	pop	{r4, r5, r6, r7, fp, pc}
   15b78:	movw	r3, #57792	; 0xe1c0
   15b7c:	mvn	r2, #0
   15b80:	movt	r3, #3
   15b84:	b	15b88 <__assert_fail@plt+0x4488>
   15b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b8c:	add	fp, sp, #28
   15b90:	sub	sp, sp, #44	; 0x2c
   15b94:	mov	r7, r3
   15b98:	str	r2, [sp, #36]	; 0x24
   15b9c:	str	r1, [sp, #32]
   15ba0:	mov	r5, r0
   15ba4:	bl	115ec <__errno_location@plt>
   15ba8:	cmp	r5, #0
   15bac:	bmi	15d14 <__assert_fail@plt+0x4614>
   15bb0:	cmn	r5, #-2147483647	; 0x80000001
   15bb4:	beq	15d14 <__assert_fail@plt+0x4614>
   15bb8:	movw	r8, #57728	; 0xe180
   15bbc:	mov	r4, r0
   15bc0:	ldr	r0, [r0]
   15bc4:	movt	r8, #3
   15bc8:	str	r4, [sp, #28]
   15bcc:	ldr	r1, [r8, #4]
   15bd0:	ldr	r6, [r8]
   15bd4:	str	r0, [sp, #24]
   15bd8:	cmp	r1, r5
   15bdc:	ble	15be8 <__assert_fail@plt+0x44e8>
   15be0:	mov	sl, r6
   15be4:	b	15c50 <__assert_fail@plt+0x4550>
   15be8:	mov	r0, #8
   15bec:	add	r9, r8, #8
   15bf0:	str	r1, [fp, #-32]	; 0xffffffe0
   15bf4:	sub	r1, r5, r1
   15bf8:	mvn	r3, #-2147483648	; 0x80000000
   15bfc:	str	r0, [sp]
   15c00:	subs	r0, r6, r9
   15c04:	add	r2, r1, #1
   15c08:	sub	r1, fp, #32
   15c0c:	movne	r0, r6
   15c10:	bl	2b53c <__assert_fail@plt+0x19e3c>
   15c14:	mov	sl, r0
   15c18:	cmp	r6, r9
   15c1c:	str	r0, [r8]
   15c20:	bne	15c2c <__assert_fail@plt+0x452c>
   15c24:	ldrd	r0, [r8, #8]
   15c28:	stm	sl, {r0, r1}
   15c2c:	ldr	r1, [r8, #4]
   15c30:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15c34:	add	r0, sl, r1, lsl #3
   15c38:	sub	r1, r2, r1
   15c3c:	lsl	r2, r1, #3
   15c40:	mov	r1, #0
   15c44:	bl	11610 <memset@plt>
   15c48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15c4c:	str	r0, [r8, #4]
   15c50:	mov	r9, sl
   15c54:	ldm	r7, {r0, r1}
   15c58:	orr	r8, r1, #1
   15c5c:	add	r1, r7, #8
   15c60:	ldr	r2, [r7, #40]	; 0x28
   15c64:	ldr	r3, [r7, #44]	; 0x2c
   15c68:	ldr	r6, [r9, r5, lsl #3]!
   15c6c:	str	r1, [sp, #20]
   15c70:	ldr	r4, [r9, #4]!
   15c74:	stm	sp, {r0, r8}
   15c78:	add	r0, sp, #8
   15c7c:	stm	r0, {r1, r2, r3}
   15c80:	ldr	r2, [sp, #32]
   15c84:	ldr	r3, [sp, #36]	; 0x24
   15c88:	mov	r1, r6
   15c8c:	mov	r0, r4
   15c90:	bl	1459c <__assert_fail@plt+0x2e9c>
   15c94:	cmp	r6, r0
   15c98:	bhi	15cfc <__assert_fail@plt+0x45fc>
   15c9c:	add	r6, r0, #1
   15ca0:	movw	r0, #57840	; 0xe1f0
   15ca4:	movt	r0, #3
   15ca8:	str	r6, [sl, r5, lsl #3]
   15cac:	cmp	r4, r0
   15cb0:	beq	15cbc <__assert_fail@plt+0x45bc>
   15cb4:	mov	r0, r4
   15cb8:	bl	13ddc <__assert_fail@plt+0x26dc>
   15cbc:	mov	r0, r6
   15cc0:	bl	2b33c <__assert_fail@plt+0x19c3c>
   15cc4:	str	r0, [r9]
   15cc8:	mov	r4, r0
   15ccc:	add	r3, sp, #8
   15cd0:	ldr	r0, [r7]
   15cd4:	ldr	r1, [r7, #40]	; 0x28
   15cd8:	ldr	r2, [r7, #44]	; 0x2c
   15cdc:	stm	sp, {r0, r8}
   15ce0:	ldr	r0, [sp, #20]
   15ce4:	stm	r3, {r0, r1, r2}
   15ce8:	ldr	r2, [sp, #32]
   15cec:	ldr	r3, [sp, #36]	; 0x24
   15cf0:	mov	r0, r4
   15cf4:	mov	r1, r6
   15cf8:	bl	1459c <__assert_fail@plt+0x2e9c>
   15cfc:	ldr	r1, [sp, #24]
   15d00:	ldr	r0, [sp, #28]
   15d04:	str	r1, [r0]
   15d08:	mov	r0, r4
   15d0c:	sub	sp, fp, #28
   15d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d14:	bl	116e8 <abort@plt>
   15d18:	movw	r3, #57792	; 0xe1c0
   15d1c:	movt	r3, #3
   15d20:	b	15b88 <__assert_fail@plt+0x4488>
   15d24:	movw	r3, #57792	; 0xe1c0
   15d28:	mov	r1, r0
   15d2c:	mov	r0, #0
   15d30:	mvn	r2, #0
   15d34:	movt	r3, #3
   15d38:	b	15b88 <__assert_fail@plt+0x4488>
   15d3c:	movw	r3, #57792	; 0xe1c0
   15d40:	mov	r2, r1
   15d44:	mov	r1, r0
   15d48:	mov	r0, #0
   15d4c:	movt	r3, #3
   15d50:	b	15b88 <__assert_fail@plt+0x4488>
   15d54:	push	{fp, lr}
   15d58:	mov	fp, sp
   15d5c:	sub	sp, sp, #48	; 0x30
   15d60:	vmov.i32	q8, #0	; 0x00000000
   15d64:	mov	ip, #32
   15d68:	mov	r3, sp
   15d6c:	mov	lr, r2
   15d70:	cmp	r1, #10
   15d74:	add	r2, r3, #16
   15d78:	vst1.64	{d16-d17}, [r3], ip
   15d7c:	vst1.64	{d16-d17}, [r2]
   15d80:	vst1.64	{d16-d17}, [r3]
   15d84:	beq	15da4 <__assert_fail@plt+0x46a4>
   15d88:	str	r1, [sp]
   15d8c:	mov	r3, sp
   15d90:	mov	r1, lr
   15d94:	mvn	r2, #0
   15d98:	bl	15b88 <__assert_fail@plt+0x4488>
   15d9c:	mov	sp, fp
   15da0:	pop	{fp, pc}
   15da4:	bl	116e8 <abort@plt>
   15da8:	push	{r4, sl, fp, lr}
   15dac:	add	fp, sp, #8
   15db0:	sub	sp, sp, #48	; 0x30
   15db4:	vmov.i32	q8, #0	; 0x00000000
   15db8:	mov	ip, r3
   15dbc:	mov	r3, sp
   15dc0:	mov	lr, #32
   15dc4:	cmp	r1, #10
   15dc8:	add	r4, r3, #16
   15dcc:	vst1.64	{d16-d17}, [r3], lr
   15dd0:	vst1.64	{d16-d17}, [r4]
   15dd4:	vst1.64	{d16-d17}, [r3]
   15dd8:	beq	15df8 <__assert_fail@plt+0x46f8>
   15ddc:	str	r1, [sp]
   15de0:	mov	r1, r2
   15de4:	mov	r3, sp
   15de8:	mov	r2, ip
   15dec:	bl	15b88 <__assert_fail@plt+0x4488>
   15df0:	sub	sp, fp, #8
   15df4:	pop	{r4, sl, fp, pc}
   15df8:	bl	116e8 <abort@plt>
   15dfc:	push	{fp, lr}
   15e00:	mov	fp, sp
   15e04:	sub	sp, sp, #48	; 0x30
   15e08:	vmov.i32	q8, #0	; 0x00000000
   15e0c:	mov	r3, sp
   15e10:	mov	ip, #32
   15e14:	cmp	r0, #10
   15e18:	add	r2, r3, #16
   15e1c:	vst1.64	{d16-d17}, [r3], ip
   15e20:	vst1.64	{d16-d17}, [r2]
   15e24:	vst1.64	{d16-d17}, [r3]
   15e28:	beq	15e48 <__assert_fail@plt+0x4748>
   15e2c:	str	r0, [sp]
   15e30:	mov	r3, sp
   15e34:	mov	r0, #0
   15e38:	mvn	r2, #0
   15e3c:	bl	15b88 <__assert_fail@plt+0x4488>
   15e40:	mov	sp, fp
   15e44:	pop	{fp, pc}
   15e48:	bl	116e8 <abort@plt>
   15e4c:	push	{fp, lr}
   15e50:	mov	fp, sp
   15e54:	sub	sp, sp, #48	; 0x30
   15e58:	vmov.i32	q8, #0	; 0x00000000
   15e5c:	mov	r3, sp
   15e60:	mov	ip, #32
   15e64:	cmp	r0, #10
   15e68:	add	lr, r3, #16
   15e6c:	vst1.64	{d16-d17}, [r3], ip
   15e70:	vst1.64	{d16-d17}, [lr]
   15e74:	vst1.64	{d16-d17}, [r3]
   15e78:	beq	15e94 <__assert_fail@plt+0x4794>
   15e7c:	str	r0, [sp]
   15e80:	mov	r3, sp
   15e84:	mov	r0, #0
   15e88:	bl	15b88 <__assert_fail@plt+0x4488>
   15e8c:	mov	sp, fp
   15e90:	pop	{fp, pc}
   15e94:	bl	116e8 <abort@plt>
   15e98:	push	{r4, sl, fp, lr}
   15e9c:	add	fp, sp, #8
   15ea0:	sub	sp, sp, #48	; 0x30
   15ea4:	mov	lr, r0
   15ea8:	movw	r0, #57792	; 0xe1c0
   15eac:	mov	ip, r1
   15eb0:	mov	r1, #32
   15eb4:	mov	r4, #1
   15eb8:	movt	r0, #3
   15ebc:	add	r3, r0, #16
   15ec0:	vld1.64	{d16-d17}, [r0], r1
   15ec4:	vld1.64	{d20-d21}, [r0]
   15ec8:	vld1.64	{d18-d19}, [r3]
   15ecc:	mov	r3, sp
   15ed0:	add	r0, r3, #32
   15ed4:	add	r1, r3, #16
   15ed8:	vst1.64	{d20-d21}, [r0]
   15edc:	mov	r0, #28
   15ee0:	vst1.64	{d18-d19}, [r1]
   15ee4:	mov	r1, r3
   15ee8:	and	r0, r0, r2, lsr #3
   15eec:	and	r2, r2, #31
   15ef0:	vst1.64	{d16-d17}, [r1], r0
   15ef4:	ldr	r0, [r1, #8]
   15ef8:	bic	r4, r4, r0, lsr r2
   15efc:	eor	r0, r0, r4, lsl r2
   15f00:	mov	r2, ip
   15f04:	str	r0, [r1, #8]
   15f08:	mov	r0, #0
   15f0c:	mov	r1, lr
   15f10:	bl	15b88 <__assert_fail@plt+0x4488>
   15f14:	sub	sp, fp, #8
   15f18:	pop	{r4, sl, fp, pc}
   15f1c:	push	{fp, lr}
   15f20:	mov	fp, sp
   15f24:	sub	sp, sp, #48	; 0x30
   15f28:	mov	ip, r0
   15f2c:	movw	r0, #57792	; 0xe1c0
   15f30:	mov	r2, #32
   15f34:	movt	r0, #3
   15f38:	add	r3, r0, #16
   15f3c:	vld1.64	{d16-d17}, [r0], r2
   15f40:	vld1.64	{d20-d21}, [r0]
   15f44:	vld1.64	{d18-d19}, [r3]
   15f48:	mov	r3, sp
   15f4c:	add	r0, r3, #32
   15f50:	add	r2, r3, #16
   15f54:	vst1.64	{d20-d21}, [r0]
   15f58:	mov	r0, #28
   15f5c:	vst1.64	{d18-d19}, [r2]
   15f60:	mov	r2, r3
   15f64:	and	r0, r0, r1, lsr #3
   15f68:	and	r1, r1, #31
   15f6c:	vst1.64	{d16-d17}, [r2], r0
   15f70:	mov	r0, #1
   15f74:	ldr	lr, [r2, #8]
   15f78:	bic	r0, r0, lr, lsr r1
   15f7c:	eor	r0, lr, r0, lsl r1
   15f80:	mov	r1, ip
   15f84:	str	r0, [r2, #8]
   15f88:	mov	r0, #0
   15f8c:	mvn	r2, #0
   15f90:	bl	15b88 <__assert_fail@plt+0x4488>
   15f94:	mov	sp, fp
   15f98:	pop	{fp, pc}
   15f9c:	push	{fp, lr}
   15fa0:	mov	fp, sp
   15fa4:	sub	sp, sp, #48	; 0x30
   15fa8:	mov	r1, r0
   15fac:	movw	r0, #57792	; 0xe1c0
   15fb0:	mov	r3, #32
   15fb4:	movt	r0, #3
   15fb8:	add	r2, r0, #16
   15fbc:	vld1.64	{d16-d17}, [r0], r3
   15fc0:	mov	r3, sp
   15fc4:	vld1.64	{d18-d19}, [r2]
   15fc8:	vld1.64	{d20-d21}, [r0]
   15fcc:	add	r2, r3, #16
   15fd0:	add	r0, r3, #32
   15fd4:	vst1.64	{d18-d19}, [r2]
   15fd8:	vst1.64	{d20-d21}, [r0]
   15fdc:	mov	r0, #12
   15fe0:	mov	r2, r3
   15fe4:	vst1.64	{d16-d17}, [r2], r0
   15fe8:	ldr	r0, [r2]
   15fec:	orr	r0, r0, #67108864	; 0x4000000
   15ff0:	str	r0, [r2]
   15ff4:	mov	r0, #0
   15ff8:	mvn	r2, #0
   15ffc:	bl	15b88 <__assert_fail@plt+0x4488>
   16000:	mov	sp, fp
   16004:	pop	{fp, pc}
   16008:	push	{fp, lr}
   1600c:	mov	fp, sp
   16010:	sub	sp, sp, #48	; 0x30
   16014:	mov	ip, r1
   16018:	mov	r1, r0
   1601c:	movw	r0, #57792	; 0xe1c0
   16020:	mov	r2, #32
   16024:	movt	r0, #3
   16028:	add	r3, r0, #16
   1602c:	vld1.64	{d16-d17}, [r0], r2
   16030:	vld1.64	{d18-d19}, [r3]
   16034:	vld1.64	{d20-d21}, [r0]
   16038:	mov	r3, sp
   1603c:	add	r2, r3, #16
   16040:	add	r0, r3, #32
   16044:	vst1.64	{d18-d19}, [r2]
   16048:	vst1.64	{d20-d21}, [r0]
   1604c:	mov	r0, #12
   16050:	mov	r2, r3
   16054:	vst1.64	{d16-d17}, [r2], r0
   16058:	ldr	r0, [r2]
   1605c:	orr	r0, r0, #67108864	; 0x4000000
   16060:	str	r0, [r2]
   16064:	mov	r0, #0
   16068:	mov	r2, ip
   1606c:	bl	15b88 <__assert_fail@plt+0x4488>
   16070:	mov	sp, fp
   16074:	pop	{fp, pc}
   16078:	push	{r4, sl, fp, lr}
   1607c:	add	fp, sp, #8
   16080:	sub	sp, sp, #96	; 0x60
   16084:	vmov.i32	q8, #0	; 0x00000000
   16088:	mov	ip, r2
   1608c:	mov	r2, sp
   16090:	mov	r4, #28
   16094:	cmp	r1, #10
   16098:	mov	r3, r2
   1609c:	add	lr, r2, #16
   160a0:	vst1.64	{d16-d17}, [r3], r4
   160a4:	vst1.64	{d16-d17}, [lr]
   160a8:	vst1.32	{d16-d17}, [r3]
   160ac:	beq	160fc <__assert_fail@plt+0x49fc>
   160b0:	vld1.64	{d16-d17}, [r2], r4
   160b4:	vld1.64	{d18-d19}, [lr]
   160b8:	add	r3, sp, #48	; 0x30
   160bc:	vld1.32	{d20-d21}, [r2]
   160c0:	add	r2, r3, #20
   160c4:	add	r4, r3, #4
   160c8:	vst1.32	{d18-d19}, [r2]
   160cc:	add	r2, r3, #32
   160d0:	vst1.32	{d16-d17}, [r4]
   160d4:	vst1.32	{d20-d21}, [r2]
   160d8:	str	r1, [sp, #48]	; 0x30
   160dc:	mvn	r2, #0
   160e0:	ldr	r1, [sp, #60]	; 0x3c
   160e4:	orr	r1, r1, #67108864	; 0x4000000
   160e8:	str	r1, [sp, #60]	; 0x3c
   160ec:	mov	r1, ip
   160f0:	bl	15b88 <__assert_fail@plt+0x4488>
   160f4:	sub	sp, fp, #8
   160f8:	pop	{r4, sl, fp, pc}
   160fc:	bl	116e8 <abort@plt>
   16100:	push	{r4, r5, r6, sl, fp, lr}
   16104:	add	fp, sp, #16
   16108:	sub	sp, sp, #48	; 0x30
   1610c:	mov	ip, r3
   16110:	movw	r3, #57792	; 0xe1c0
   16114:	mov	r6, #32
   16118:	cmp	r1, #0
   1611c:	mov	r4, sp
   16120:	movt	r3, #3
   16124:	cmpne	r2, #0
   16128:	add	r5, r4, #16
   1612c:	add	lr, r3, #16
   16130:	vld1.64	{d16-d17}, [r3], r6
   16134:	vld1.64	{d18-d19}, [lr]
   16138:	vld1.64	{d20-d21}, [r3]
   1613c:	mov	r3, #10
   16140:	vst1.64	{d16-d17}, [r4], r6
   16144:	vst1.64	{d18-d19}, [r5]
   16148:	vst1.64	{d20-d21}, [r4]
   1614c:	str	r3, [sp]
   16150:	bne	16158 <__assert_fail@plt+0x4a58>
   16154:	bl	116e8 <abort@plt>
   16158:	str	r2, [sp, #44]	; 0x2c
   1615c:	str	r1, [sp, #40]	; 0x28
   16160:	mov	r3, sp
   16164:	mov	r1, ip
   16168:	mvn	r2, #0
   1616c:	bl	15b88 <__assert_fail@plt+0x4488>
   16170:	sub	sp, fp, #16
   16174:	pop	{r4, r5, r6, sl, fp, pc}
   16178:	push	{r4, r5, r6, sl, fp, lr}
   1617c:	add	fp, sp, #16
   16180:	sub	sp, sp, #48	; 0x30
   16184:	mov	lr, r3
   16188:	movw	r3, #57792	; 0xe1c0
   1618c:	mov	r6, #32
   16190:	cmp	r1, #0
   16194:	mov	r4, sp
   16198:	movt	r3, #3
   1619c:	cmpne	r2, #0
   161a0:	add	r5, r4, #16
   161a4:	add	ip, r3, #16
   161a8:	vld1.64	{d16-d17}, [r3], r6
   161ac:	vld1.64	{d18-d19}, [ip]
   161b0:	vld1.64	{d20-d21}, [r3]
   161b4:	mov	r3, #10
   161b8:	vst1.64	{d16-d17}, [r4], r6
   161bc:	vst1.64	{d18-d19}, [r5]
   161c0:	vst1.64	{d20-d21}, [r4]
   161c4:	str	r3, [sp]
   161c8:	bne	161d0 <__assert_fail@plt+0x4ad0>
   161cc:	bl	116e8 <abort@plt>
   161d0:	ldr	ip, [fp, #8]
   161d4:	str	r2, [sp, #44]	; 0x2c
   161d8:	str	r1, [sp, #40]	; 0x28
   161dc:	mov	r3, sp
   161e0:	mov	r1, lr
   161e4:	mov	r2, ip
   161e8:	bl	15b88 <__assert_fail@plt+0x4488>
   161ec:	sub	sp, fp, #16
   161f0:	pop	{r4, r5, r6, sl, fp, pc}
   161f4:	push	{r4, sl, fp, lr}
   161f8:	add	fp, sp, #8
   161fc:	sub	sp, sp, #48	; 0x30
   16200:	movw	r3, #57792	; 0xe1c0
   16204:	mov	lr, #32
   16208:	mov	ip, r2
   1620c:	cmp	r0, #0
   16210:	movt	r3, #3
   16214:	cmpne	r1, #0
   16218:	add	r2, r3, #16
   1621c:	vld1.64	{d16-d17}, [r3], lr
   16220:	vld1.64	{d20-d21}, [r3]
   16224:	vld1.64	{d18-d19}, [r2]
   16228:	mov	r2, sp
   1622c:	add	r4, r2, #16
   16230:	vst1.64	{d16-d17}, [r2], lr
   16234:	vst1.64	{d20-d21}, [r2]
   16238:	mov	r2, #10
   1623c:	vst1.64	{d18-d19}, [r4]
   16240:	str	r2, [sp]
   16244:	bne	1624c <__assert_fail@plt+0x4b4c>
   16248:	bl	116e8 <abort@plt>
   1624c:	str	r1, [sp, #44]	; 0x2c
   16250:	str	r0, [sp, #40]	; 0x28
   16254:	mov	r3, sp
   16258:	mov	r0, #0
   1625c:	mov	r1, ip
   16260:	mvn	r2, #0
   16264:	bl	15b88 <__assert_fail@plt+0x4488>
   16268:	sub	sp, fp, #8
   1626c:	pop	{r4, sl, fp, pc}
   16270:	push	{r4, r5, fp, lr}
   16274:	add	fp, sp, #8
   16278:	sub	sp, sp, #48	; 0x30
   1627c:	mov	ip, r3
   16280:	movw	r3, #57792	; 0xe1c0
   16284:	mov	r4, #32
   16288:	mov	lr, r2
   1628c:	cmp	r0, #0
   16290:	movt	r3, #3
   16294:	cmpne	r1, #0
   16298:	add	r2, r3, #16
   1629c:	vld1.64	{d16-d17}, [r3], r4
   162a0:	vld1.64	{d20-d21}, [r3]
   162a4:	vld1.64	{d18-d19}, [r2]
   162a8:	mov	r2, sp
   162ac:	add	r5, r2, #16
   162b0:	vst1.64	{d16-d17}, [r2], r4
   162b4:	vst1.64	{d20-d21}, [r2]
   162b8:	mov	r2, #10
   162bc:	vst1.64	{d18-d19}, [r5]
   162c0:	str	r2, [sp]
   162c4:	bne	162cc <__assert_fail@plt+0x4bcc>
   162c8:	bl	116e8 <abort@plt>
   162cc:	str	r1, [sp, #44]	; 0x2c
   162d0:	str	r0, [sp, #40]	; 0x28
   162d4:	mov	r3, sp
   162d8:	mov	r0, #0
   162dc:	mov	r1, lr
   162e0:	mov	r2, ip
   162e4:	bl	15b88 <__assert_fail@plt+0x4488>
   162e8:	sub	sp, fp, #8
   162ec:	pop	{r4, r5, fp, pc}
   162f0:	movw	r3, #57680	; 0xe150
   162f4:	movt	r3, #3
   162f8:	b	15b88 <__assert_fail@plt+0x4488>
   162fc:	movw	r3, #57680	; 0xe150
   16300:	mov	r2, r1
   16304:	mov	r1, r0
   16308:	mov	r0, #0
   1630c:	movt	r3, #3
   16310:	b	15b88 <__assert_fail@plt+0x4488>
   16314:	movw	r3, #57680	; 0xe150
   16318:	mvn	r2, #0
   1631c:	movt	r3, #3
   16320:	b	15b88 <__assert_fail@plt+0x4488>
   16324:	movw	r3, #57680	; 0xe150
   16328:	mov	r1, r0
   1632c:	mov	r0, #0
   16330:	mvn	r2, #0
   16334:	movt	r3, #3
   16338:	b	15b88 <__assert_fail@plt+0x4488>
   1633c:	andeq	r0, r0, r0
   16340:	push	{fp, lr}
   16344:	mov	fp, sp
   16348:	mov	lr, r0
   1634c:	movw	r0, #58096	; 0xe2f0
   16350:	mov	ip, r1
   16354:	ldrb	r1, [r2, #28]
   16358:	movt	r0, #3
   1635c:	ldr	r3, [r0]
   16360:	mov	r0, #16
   16364:	and	r1, r1, #111	; 0x6f
   16368:	and	r0, r0, r3, lsr #21
   1636c:	orr	r0, r1, r0
   16370:	mov	r1, lr
   16374:	orr	r0, r0, #128	; 0x80
   16378:	strb	r0, [r2, #28]
   1637c:	mov	r0, r2
   16380:	mov	r2, ip
   16384:	bl	163c0 <__assert_fail@plt+0x4cc0>
   16388:	cmp	r0, #0
   1638c:	beq	163b8 <__assert_fail@plt+0x4cb8>
   16390:	movw	r1, #52656	; 0xcdb0
   16394:	mov	r2, #5
   16398:	movt	r1, #2
   1639c:	ldr	r0, [r1, r0, lsl #2]
   163a0:	movw	r1, #52272	; 0xcc30
   163a4:	movt	r1, #2
   163a8:	add	r1, r1, r0
   163ac:	mov	r0, #0
   163b0:	pop	{fp, lr}
   163b4:	b	11484 <dcgettext@plt>
   163b8:	mov	r0, #0
   163bc:	pop	{fp, pc}
   163c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163c4:	add	fp, sp, #28
   163c8:	sub	sp, sp, #140	; 0x8c
   163cc:	mov	sl, r0
   163d0:	mov	r0, #0
   163d4:	mov	r9, r3
   163d8:	mov	r7, r2
   163dc:	str	r1, [sp, #28]
   163e0:	str	r0, [fp, #-52]	; 0xffffffcc
   163e4:	str	r0, [sl, #24]
   163e8:	str	r0, [sl, #8]
   163ec:	str	r3, [sl, #12]
   163f0:	ldrb	r0, [sl, #28]
   163f4:	and	r0, r0, #144	; 0x90
   163f8:	strb	r0, [sl, #28]
   163fc:	ldr	r0, [sl, #4]
   16400:	ldr	r5, [sl]
   16404:	cmp	r0, #159	; 0x9f
   16408:	bls	16f24 <__assert_fail@plt+0x5824>
   1640c:	mov	r0, #160	; 0xa0
   16410:	mov	r1, #0
   16414:	mov	r2, #160	; 0xa0
   16418:	str	r0, [sl, #8]
   1641c:	mov	r0, r5
   16420:	bl	11610 <memset@plt>
   16424:	mov	r0, #31
   16428:	str	r0, [r5, #64]	; 0x40
   1642c:	movw	r0, #43689	; 0xaaa9
   16430:	movt	r0, #2730	; 0xaaa
   16434:	cmp	r7, r0
   16438:	bhi	16838 <__assert_fail@plt+0x5138>
   1643c:	add	r8, r7, #1
   16440:	lsl	r0, r8, #3
   16444:	str	r8, [r5, #4]
   16448:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1644c:	str	r0, [r5]
   16450:	mov	r0, #1
   16454:	mov	r6, r0
   16458:	lsl	r0, r0, #1
   1645c:	cmp	r6, r7
   16460:	bls	16454 <__assert_fail@plt+0x4d54>
   16464:	mov	r0, #12
   16468:	mov	r1, r6
   1646c:	bl	2b88c <__assert_fail@plt+0x1a18c>
   16470:	sub	r1, r6, #1
   16474:	str	r1, [r5, #68]	; 0x44
   16478:	str	r0, [r5, #32]
   1647c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   16480:	str	r0, [r5, #92]	; 0x5c
   16484:	mov	r0, #14
   16488:	bl	116a0 <nl_langinfo@plt>
   1648c:	ldrb	r1, [r0]
   16490:	orr	r1, r1, #32
   16494:	cmp	r1, #117	; 0x75
   16498:	bne	164e8 <__assert_fail@plt+0x4de8>
   1649c:	ldrb	r1, [r0, #1]
   164a0:	orr	r1, r1, #32
   164a4:	cmp	r1, #116	; 0x74
   164a8:	bne	164e8 <__assert_fail@plt+0x4de8>
   164ac:	ldrb	r1, [r0, #2]
   164b0:	orr	r1, r1, #32
   164b4:	cmp	r1, #102	; 0x66
   164b8:	bne	164e8 <__assert_fail@plt+0x4de8>
   164bc:	ldrb	r1, [r0, #3]!
   164c0:	cmp	r1, #45	; 0x2d
   164c4:	movw	r1, #52772	; 0xce24
   164c8:	movt	r1, #2
   164cc:	addeq	r0, r0, #1
   164d0:	bl	113d0 <strcmp@plt>
   164d4:	cmp	r0, #0
   164d8:	bne	164e8 <__assert_fail@plt+0x4de8>
   164dc:	ldrb	r0, [r5, #88]	; 0x58
   164e0:	orr	r0, r0, #4
   164e4:	strb	r0, [r5, #88]	; 0x58
   164e8:	ldrb	r0, [r5, #88]	; 0x58
   164ec:	and	r1, r0, #247	; 0xf7
   164f0:	strb	r1, [r5, #88]	; 0x58
   164f4:	ldr	r1, [r5, #92]	; 0x5c
   164f8:	cmp	r1, #2
   164fc:	blt	16824 <__assert_fail@plt+0x5124>
   16500:	tst	r0, #4
   16504:	bne	16580 <__assert_fail@plt+0x4e80>
   16508:	mov	r0, #32
   1650c:	mov	r1, #1
   16510:	mov	r4, #1
   16514:	bl	2b88c <__assert_fail@plt+0x1a18c>
   16518:	cmp	r0, #0
   1651c:	str	r0, [r5, #60]	; 0x3c
   16520:	beq	16838 <__assert_fail@plt+0x5138>
   16524:	mov	r6, #0
   16528:	mov	r0, r6
   1652c:	bl	1161c <btowc@plt>
   16530:	cmn	r0, #1
   16534:	bne	16558 <__assert_fail@plt+0x4e58>
   16538:	b	16568 <__assert_fail@plt+0x4e68>
   1653c:	add	r6, r6, #1
   16540:	cmp	r6, #32
   16544:	beq	16590 <__assert_fail@plt+0x4e90>
   16548:	mov	r0, r6
   1654c:	bl	1161c <btowc@plt>
   16550:	cmn	r0, #1
   16554:	beq	16568 <__assert_fail@plt+0x4e68>
   16558:	ldr	r1, [r5, #60]	; 0x3c
   1655c:	ldr	r2, [r1]
   16560:	orr	r2, r2, r4, lsl r6
   16564:	str	r2, [r1]
   16568:	cmp	r6, r0
   1656c:	beq	1653c <__assert_fail@plt+0x4e3c>
   16570:	ldrb	r0, [r5, #88]	; 0x58
   16574:	orr	r0, r0, #8
   16578:	strb	r0, [r5, #88]	; 0x58
   1657c:	b	1653c <__assert_fail@plt+0x4e3c>
   16580:	movw	r0, #52724	; 0xcdf4
   16584:	movt	r0, #2
   16588:	str	r0, [r5, #60]	; 0x3c
   1658c:	b	16824 <__assert_fail@plt+0x5124>
   16590:	mov	r6, #32
   16594:	mov	r4, #1
   16598:	mov	r0, r6
   1659c:	bl	1161c <btowc@plt>
   165a0:	cmn	r0, #1
   165a4:	bne	165d0 <__assert_fail@plt+0x4ed0>
   165a8:	b	165e4 <__assert_fail@plt+0x4ee4>
   165ac:	sub	r1, r6, #31
   165b0:	add	r0, r6, #1
   165b4:	cmp	r1, #32
   165b8:	mov	r6, r0
   165bc:	beq	165fc <__assert_fail@plt+0x4efc>
   165c0:	mov	r0, r6
   165c4:	bl	1161c <btowc@plt>
   165c8:	cmn	r0, #1
   165cc:	beq	165e4 <__assert_fail@plt+0x4ee4>
   165d0:	ldr	r2, [r5, #60]	; 0x3c
   165d4:	sub	r1, r6, #32
   165d8:	ldr	r3, [r2, #4]
   165dc:	orr	r1, r3, r4, lsl r1
   165e0:	str	r1, [r2, #4]
   165e4:	cmp	r0, r6
   165e8:	beq	165ac <__assert_fail@plt+0x4eac>
   165ec:	ldrb	r0, [r5, #88]	; 0x58
   165f0:	orr	r0, r0, #8
   165f4:	strb	r0, [r5, #88]	; 0x58
   165f8:	b	165ac <__assert_fail@plt+0x4eac>
   165fc:	mov	r6, #64	; 0x40
   16600:	mov	r4, #1
   16604:	mov	r0, r6
   16608:	bl	1161c <btowc@plt>
   1660c:	cmn	r0, #1
   16610:	bne	1663c <__assert_fail@plt+0x4f3c>
   16614:	b	16650 <__assert_fail@plt+0x4f50>
   16618:	sub	r1, r6, #63	; 0x3f
   1661c:	add	r0, r6, #1
   16620:	cmp	r1, #32
   16624:	mov	r6, r0
   16628:	beq	16668 <__assert_fail@plt+0x4f68>
   1662c:	mov	r0, r6
   16630:	bl	1161c <btowc@plt>
   16634:	cmn	r0, #1
   16638:	beq	16650 <__assert_fail@plt+0x4f50>
   1663c:	ldr	r2, [r5, #60]	; 0x3c
   16640:	sub	r1, r6, #64	; 0x40
   16644:	ldr	r3, [r2, #8]
   16648:	orr	r1, r3, r4, lsl r1
   1664c:	str	r1, [r2, #8]
   16650:	cmp	r0, r6
   16654:	beq	16618 <__assert_fail@plt+0x4f18>
   16658:	ldrb	r0, [r5, #88]	; 0x58
   1665c:	orr	r0, r0, #8
   16660:	strb	r0, [r5, #88]	; 0x58
   16664:	b	16618 <__assert_fail@plt+0x4f18>
   16668:	mov	r6, #96	; 0x60
   1666c:	mov	r4, #1
   16670:	mov	r0, r6
   16674:	bl	1161c <btowc@plt>
   16678:	cmn	r0, #1
   1667c:	bne	166a8 <__assert_fail@plt+0x4fa8>
   16680:	b	166bc <__assert_fail@plt+0x4fbc>
   16684:	sub	r1, r6, #95	; 0x5f
   16688:	add	r0, r6, #1
   1668c:	cmp	r1, #32
   16690:	mov	r6, r0
   16694:	beq	166d4 <__assert_fail@plt+0x4fd4>
   16698:	mov	r0, r6
   1669c:	bl	1161c <btowc@plt>
   166a0:	cmn	r0, #1
   166a4:	beq	166bc <__assert_fail@plt+0x4fbc>
   166a8:	ldr	r2, [r5, #60]	; 0x3c
   166ac:	sub	r1, r6, #96	; 0x60
   166b0:	ldr	r3, [r2, #12]
   166b4:	orr	r1, r3, r4, lsl r1
   166b8:	str	r1, [r2, #12]
   166bc:	cmp	r0, r6
   166c0:	beq	16684 <__assert_fail@plt+0x4f84>
   166c4:	ldrb	r0, [r5, #88]	; 0x58
   166c8:	orr	r0, r0, #8
   166cc:	strb	r0, [r5, #88]	; 0x58
   166d0:	b	16684 <__assert_fail@plt+0x4f84>
   166d4:	mov	r6, #128	; 0x80
   166d8:	mov	r4, #1
   166dc:	mov	r0, r6
   166e0:	bl	1161c <btowc@plt>
   166e4:	cmn	r0, #1
   166e8:	bne	16710 <__assert_fail@plt+0x5010>
   166ec:	sub	r1, r6, #127	; 0x7f
   166f0:	add	r0, r6, #1
   166f4:	cmp	r1, #32
   166f8:	mov	r6, r0
   166fc:	beq	16728 <__assert_fail@plt+0x5028>
   16700:	mov	r0, r6
   16704:	bl	1161c <btowc@plt>
   16708:	cmn	r0, #1
   1670c:	beq	166ec <__assert_fail@plt+0x4fec>
   16710:	ldr	r1, [r5, #60]	; 0x3c
   16714:	sub	r0, r6, #128	; 0x80
   16718:	ldr	r2, [r1, #16]
   1671c:	orr	r0, r2, r4, lsl r0
   16720:	str	r0, [r1, #16]
   16724:	b	166ec <__assert_fail@plt+0x4fec>
   16728:	mov	r6, #160	; 0xa0
   1672c:	mov	r4, #1
   16730:	mov	r0, r6
   16734:	bl	1161c <btowc@plt>
   16738:	cmn	r0, #1
   1673c:	bne	16764 <__assert_fail@plt+0x5064>
   16740:	sub	r1, r6, #159	; 0x9f
   16744:	add	r0, r6, #1
   16748:	cmp	r1, #32
   1674c:	mov	r6, r0
   16750:	beq	1677c <__assert_fail@plt+0x507c>
   16754:	mov	r0, r6
   16758:	bl	1161c <btowc@plt>
   1675c:	cmn	r0, #1
   16760:	beq	16740 <__assert_fail@plt+0x5040>
   16764:	ldr	r1, [r5, #60]	; 0x3c
   16768:	sub	r0, r6, #160	; 0xa0
   1676c:	ldr	r2, [r1, #20]
   16770:	orr	r0, r2, r4, lsl r0
   16774:	str	r0, [r1, #20]
   16778:	b	16740 <__assert_fail@plt+0x5040>
   1677c:	mov	r6, #192	; 0xc0
   16780:	mov	r4, #1
   16784:	mov	r0, r6
   16788:	bl	1161c <btowc@plt>
   1678c:	cmn	r0, #1
   16790:	bne	167b8 <__assert_fail@plt+0x50b8>
   16794:	sub	r1, r6, #191	; 0xbf
   16798:	add	r0, r6, #1
   1679c:	cmp	r1, #32
   167a0:	mov	r6, r0
   167a4:	beq	167d0 <__assert_fail@plt+0x50d0>
   167a8:	mov	r0, r6
   167ac:	bl	1161c <btowc@plt>
   167b0:	cmn	r0, #1
   167b4:	beq	16794 <__assert_fail@plt+0x5094>
   167b8:	ldr	r1, [r5, #60]	; 0x3c
   167bc:	sub	r0, r6, #192	; 0xc0
   167c0:	ldr	r2, [r1, #24]
   167c4:	orr	r0, r2, r4, lsl r0
   167c8:	str	r0, [r1, #24]
   167cc:	b	16794 <__assert_fail@plt+0x5094>
   167d0:	mov	r6, #224	; 0xe0
   167d4:	mov	r4, #1
   167d8:	mov	r0, r6
   167dc:	bl	1161c <btowc@plt>
   167e0:	cmn	r0, #1
   167e4:	bne	1680c <__assert_fail@plt+0x510c>
   167e8:	sub	r1, r6, #223	; 0xdf
   167ec:	add	r0, r6, #1
   167f0:	cmp	r1, #32
   167f4:	mov	r6, r0
   167f8:	beq	16824 <__assert_fail@plt+0x5124>
   167fc:	mov	r0, r6
   16800:	bl	1161c <btowc@plt>
   16804:	cmn	r0, #1
   16808:	beq	167e8 <__assert_fail@plt+0x50e8>
   1680c:	ldr	r1, [r5, #60]	; 0x3c
   16810:	sub	r0, r6, #224	; 0xe0
   16814:	ldr	r2, [r1, #28]
   16818:	orr	r0, r2, r4, lsl r0
   1681c:	str	r0, [r1, #28]
   16820:	b	167e8 <__assert_fail@plt+0x50e8>
   16824:	ldr	r0, [r5]
   16828:	cmp	r0, #0
   1682c:	ldrne	r0, [r5, #32]
   16830:	cmpne	r0, #0
   16834:	bne	16860 <__assert_fail@plt+0x5160>
   16838:	mov	r4, #12
   1683c:	mov	r0, r5
   16840:	str	r4, [fp, #-52]	; 0xffffffcc
   16844:	bl	189f4 <__assert_fail@plt+0x72f4>
   16848:	mov	r0, #0
   1684c:	str	r0, [sl]
   16850:	str	r0, [sl, #4]
   16854:	mov	r0, r4
   16858:	sub	sp, fp, #28
   1685c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16860:	movw	r0, #0
   16864:	movw	r1, #0
   16868:	mov	r6, #0
   1686c:	movt	r0, #0
   16870:	movt	r1, #0
   16874:	str	r6, [fp, #-52]	; 0xffffffcc
   16878:	orrs	r4, r1, r0
   1687c:	beq	16894 <__assert_fail@plt+0x5194>
   16880:	add	r0, r5, #136	; 0x88
   16884:	mov	r1, #0
   16888:	bl	11460 <pthread_mutex_init@plt>
   1688c:	cmp	r0, #0
   16890:	bne	16838 <__assert_fail@plt+0x5138>
   16894:	vmov.i32	q8, #0	; 0x00000000
   16898:	add	r1, sp, #32
   1689c:	str	r4, [sp, #8]
   168a0:	ldr	r4, [sl, #20]
   168a4:	ldr	r3, [sp, #28]
   168a8:	add	r0, r1, #64	; 0x40
   168ac:	vst1.32	{d16-d17}, [r0]
   168b0:	add	r0, r1, #52	; 0x34
   168b4:	vst1.32	{d16-d17}, [r0]
   168b8:	add	r0, r1, #36	; 0x24
   168bc:	vst1.32	{d16-d17}, [r0]
   168c0:	add	r0, r1, #20
   168c4:	vst1.32	{d16-d17}, [r0]
   168c8:	add	r0, r1, #4
   168cc:	add	r1, r1, #44	; 0x2c
   168d0:	vst1.32	{d16-d17}, [r0]
   168d4:	str	r3, [sp, #32]
   168d8:	ubfx	r0, r9, #22, #1
   168dc:	str	r9, [sp, #24]
   168e0:	vdup.32	q8, r7
   168e4:	str	r5, [sp, #20]
   168e8:	strb	r0, [sp, #104]	; 0x68
   168ec:	and	r0, r9, #4194304	; 0x400000
   168f0:	str	r4, [sp, #96]	; 0x60
   168f4:	orrs	r9, r0, r4
   168f8:	str	r0, [sp, #12]
   168fc:	movwne	r9, #1
   16900:	cmp	r7, #1
   16904:	strb	r9, [sp, #107]	; 0x6b
   16908:	ldr	r0, [r5, #92]	; 0x5c
   1690c:	str	r0, [sp, #112]	; 0x70
   16910:	ldrb	r2, [r5, #88]	; 0x58
   16914:	vst1.32	{d16-d17}, [r1]
   16918:	ubfx	r1, r2, #3, #1
   1691c:	strb	r1, [sp, #106]	; 0x6a
   16920:	ubfx	r1, r2, #2, #1
   16924:	strb	r1, [sp, #105]	; 0x69
   16928:	blt	169a0 <__assert_fail@plt+0x52a0>
   1692c:	cmp	r0, #2
   16930:	blt	1695c <__assert_fail@plt+0x525c>
   16934:	mov	r6, #12
   16938:	cmn	r7, #-1073741822	; 0xc0000002
   1693c:	bhi	16f08 <__assert_fail@plt+0x5808>
   16940:	lsl	r1, r8, #2
   16944:	mov	r0, #0
   16948:	bl	2b910 <__assert_fail@plt+0x1a210>
   1694c:	cmp	r0, #0
   16950:	beq	16f08 <__assert_fail@plt+0x5808>
   16954:	ldr	r3, [sp, #28]
   16958:	str	r0, [sp, #40]	; 0x28
   1695c:	cmp	r9, #0
   16960:	mov	r6, #0
   16964:	mov	r9, #0
   16968:	beq	16990 <__assert_fail@plt+0x5290>
   1696c:	mov	r0, #0
   16970:	mov	r1, r8
   16974:	bl	2b910 <__assert_fail@plt+0x1a210>
   16978:	cmp	r0, #0
   1697c:	beq	16f04 <__assert_fail@plt+0x5804>
   16980:	ldr	r3, [sp, #28]
   16984:	mov	r6, r0
   16988:	mov	r9, #1
   1698c:	str	r0, [sp, #36]	; 0x24
   16990:	ldr	r0, [sp, #20]
   16994:	str	r8, [sp, #68]	; 0x44
   16998:	ldr	r0, [r0, #92]	; 0x5c
   1699c:	b	169a4 <__assert_fail@plt+0x52a4>
   169a0:	mov	r8, #0
   169a4:	ldr	r1, [sp, #12]
   169a8:	cmp	r9, #0
   169ac:	moveq	r6, r3
   169b0:	str	r6, [sp, #36]	; 0x24
   169b4:	cmp	r1, #0
   169b8:	beq	16aa8 <__assert_fail@plt+0x53a8>
   169bc:	cmp	r0, #2
   169c0:	blt	16ac0 <__assert_fail@plt+0x53c0>
   169c4:	add	r0, sp, #32
   169c8:	bl	1be20 <__assert_fail@plt+0xa720>
   169cc:	ldr	r9, [sp, #20]
   169d0:	cmp	r0, #0
   169d4:	bne	16efc <__assert_fail@plt+0x57fc>
   169d8:	add	r5, sp, #32
   169dc:	ldr	r0, [sp, #64]	; 0x40
   169e0:	cmp	r0, r7
   169e4:	blt	16a0c <__assert_fail@plt+0x530c>
   169e8:	b	16bb4 <__assert_fail@plt+0x54b4>
   169ec:	mov	r0, r5
   169f0:	str	r4, [sp, #68]	; 0x44
   169f4:	bl	1be20 <__assert_fail@plt+0xa720>
   169f8:	cmp	r0, #0
   169fc:	bne	16efc <__assert_fail@plt+0x57fc>
   16a00:	ldr	r0, [sp, #64]	; 0x40
   16a04:	cmp	r0, r7
   16a08:	bge	16bb4 <__assert_fail@plt+0x54b4>
   16a0c:	ldr	r0, [r9, #92]	; 0x5c
   16a10:	ldr	r2, [sp, #60]	; 0x3c
   16a14:	ldr	r1, [sp, #68]	; 0x44
   16a18:	add	r0, r0, r2
   16a1c:	cmp	r1, r0
   16a20:	bgt	16bb4 <__assert_fail@plt+0x54b4>
   16a24:	ldr	r0, [sp, #112]	; 0x70
   16a28:	lsl	r4, r1, #1
   16a2c:	cmp	r0, #2
   16a30:	blt	16a80 <__assert_fail@plt+0x5380>
   16a34:	mov	r6, #12
   16a38:	cmn	r4, #-1073741823	; 0xc0000001
   16a3c:	bhi	16f08 <__assert_fail@plt+0x5808>
   16a40:	ldr	r0, [sp, #40]	; 0x28
   16a44:	lsl	r8, r1, #3
   16a48:	mov	r1, r8
   16a4c:	bl	2b910 <__assert_fail@plt+0x1a210>
   16a50:	cmp	r0, #0
   16a54:	beq	16f08 <__assert_fail@plt+0x5808>
   16a58:	str	r0, [sp, #40]	; 0x28
   16a5c:	ldr	r0, [sp, #44]	; 0x2c
   16a60:	cmp	r0, #0
   16a64:	beq	16a80 <__assert_fail@plt+0x5380>
   16a68:	mov	r1, r8
   16a6c:	bl	2b910 <__assert_fail@plt+0x1a210>
   16a70:	cmp	r0, #0
   16a74:	beq	16f08 <__assert_fail@plt+0x5808>
   16a78:	ldr	r9, [sp, #20]
   16a7c:	str	r0, [sp, #44]	; 0x2c
   16a80:	ldrb	r0, [sp, #107]	; 0x6b
   16a84:	cmp	r0, #0
   16a88:	beq	169ec <__assert_fail@plt+0x52ec>
   16a8c:	ldr	r0, [sp, #36]	; 0x24
   16a90:	mov	r1, r4
   16a94:	bl	2b910 <__assert_fail@plt+0x1a210>
   16a98:	cmp	r0, #0
   16a9c:	beq	16f04 <__assert_fail@plt+0x5804>
   16aa0:	str	r0, [sp, #36]	; 0x24
   16aa4:	b	169ec <__assert_fail@plt+0x52ec>
   16aa8:	cmp	r0, #2
   16aac:	blt	16b40 <__assert_fail@plt+0x5440>
   16ab0:	add	r0, sp, #32
   16ab4:	bl	1c740 <__assert_fail@plt+0xb040>
   16ab8:	ldr	r9, [sp, #20]
   16abc:	b	16bb4 <__assert_fail@plt+0x54b4>
   16ac0:	ldr	r9, [sp, #20]
   16ac4:	cmp	r8, r7
   16ac8:	movgt	r8, r7
   16acc:	cmp	r8, #1
   16ad0:	blt	16ba8 <__assert_fail@plt+0x54a8>
   16ad4:	mov	r6, #0
   16ad8:	bl	11574 <__ctype_toupper_loc@plt>
   16adc:	ldr	r3, [sp, #28]
   16ae0:	mov	r1, #0
   16ae4:	add	r2, r3, r6
   16ae8:	cmp	r4, #0
   16aec:	ldrb	r2, [r2, r1]
   16af0:	beq	16b1c <__assert_fail@plt+0x541c>
   16af4:	b	16b18 <__assert_fail@plt+0x5418>
   16af8:	ldr	r3, [sp, #32]
   16afc:	ldr	r6, [sp, #56]	; 0x38
   16b00:	ldr	r4, [sp, #96]	; 0x60
   16b04:	mov	r1, r2
   16b08:	add	r2, r3, r6
   16b0c:	cmp	r4, #0
   16b10:	ldrb	r2, [r2, r1]
   16b14:	beq	16b1c <__assert_fail@plt+0x541c>
   16b18:	ldrb	r2, [r4, r2]
   16b1c:	ldr	r3, [r0]
   16b20:	ldr	r2, [r3, r2, lsl #2]
   16b24:	ldr	r3, [sp, #36]	; 0x24
   16b28:	strb	r2, [r3, r1]
   16b2c:	add	r2, r1, #1
   16b30:	cmp	r2, r8
   16b34:	blt	16af8 <__assert_fail@plt+0x53f8>
   16b38:	add	r0, r1, #1
   16b3c:	b	16bac <__assert_fail@plt+0x54ac>
   16b40:	ldr	r9, [sp, #20]
   16b44:	cmp	r4, #0
   16b48:	beq	16e5c <__assert_fail@plt+0x575c>
   16b4c:	cmp	r8, r7
   16b50:	movgt	r8, r7
   16b54:	cmp	r8, #1
   16b58:	blt	16ba8 <__assert_fail@plt+0x54a8>
   16b5c:	ldrb	r0, [r3]
   16b60:	cmp	r8, #1
   16b64:	ldrb	r0, [r4, r0]
   16b68:	strb	r0, [r6]
   16b6c:	mov	r0, #1
   16b70:	beq	16bac <__assert_fail@plt+0x54ac>
   16b74:	mov	r0, #1
   16b78:	ldr	r1, [sp, #32]
   16b7c:	ldr	r3, [sp, #56]	; 0x38
   16b80:	ldr	r7, [sp, #96]	; 0x60
   16b84:	ldr	r2, [sp, #36]	; 0x24
   16b88:	add	r1, r1, r3
   16b8c:	ldrb	r1, [r1, r0]
   16b90:	ldrb	r1, [r7, r1]
   16b94:	strb	r1, [r2, r0]
   16b98:	add	r0, r0, #1
   16b9c:	cmp	r0, r8
   16ba0:	blt	16b78 <__assert_fail@plt+0x5478>
   16ba4:	b	16bac <__assert_fail@plt+0x54ac>
   16ba8:	mov	r0, #0
   16bac:	str	r0, [sp, #64]	; 0x40
   16bb0:	str	r0, [sp, #60]	; 0x3c
   16bb4:	mov	r5, #0
   16bb8:	ldr	r4, [sp, #24]
   16bbc:	sub	r8, fp, #48	; 0x30
   16bc0:	add	r6, sp, #32
   16bc4:	str	r5, [fp, #-52]	; 0xffffffcc
   16bc8:	str	r5, [sl, #24]
   16bcc:	mov	r0, r8
   16bd0:	mov	r1, r6
   16bd4:	ldr	r7, [sl]
   16bd8:	orr	r2, r4, #8388608	; 0x800000
   16bdc:	str	r4, [r7, #128]	; 0x80
   16be0:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   16be4:	ldr	r1, [sp, #72]	; 0x48
   16be8:	mov	r2, r8
   16bec:	mov	r3, r4
   16bf0:	str	r5, [sp]
   16bf4:	add	r0, r1, r0
   16bf8:	mov	r1, sl
   16bfc:	str	r0, [sp, #72]	; 0x48
   16c00:	sub	r0, fp, #52	; 0x34
   16c04:	str	r0, [sp, #4]
   16c08:	mov	r0, r6
   16c0c:	bl	1c950 <__assert_fail@plt+0xb250>
   16c10:	mov	r4, r0
   16c14:	cmp	r0, #0
   16c18:	bne	16c28 <__assert_fail@plt+0x5528>
   16c1c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16c20:	cmp	r0, #0
   16c24:	bne	16fb0 <__assert_fail@plt+0x58b0>
   16c28:	ldr	r1, [r7, #64]	; 0x40
   16c2c:	cmp	r1, #31
   16c30:	beq	16f48 <__assert_fail@plt+0x5848>
   16c34:	ldr	r0, [r7, #56]	; 0x38
   16c38:	add	r0, r0, r1, lsl #5
   16c3c:	add	r2, r1, #1
   16c40:	vmov.i32	q8, #0	; 0x00000000
   16c44:	mov	r1, #0
   16c48:	str	r2, [r7, #64]	; 0x40
   16c4c:	mov	r2, #2
   16c50:	add	r6, r0, #4
   16c54:	str	r1, [r0, #20]
   16c58:	str	r1, [r0, #24]
   16c5c:	str	r2, [r0, #28]
   16c60:	mov	r0, #28
   16c64:	mov	r1, r6
   16c68:	vst1.32	{d16-d17}, [r1], r0
   16c6c:	mvn	r0, #0
   16c70:	str	r0, [r1]
   16c74:	cmp	r4, #0
   16c78:	mov	r0, r6
   16c7c:	beq	16cd0 <__assert_fail@plt+0x55d0>
   16c80:	ldr	r1, [r7, #64]	; 0x40
   16c84:	cmp	r1, #31
   16c88:	beq	16f80 <__assert_fail@plt+0x5880>
   16c8c:	ldr	r0, [r7, #56]	; 0x38
   16c90:	add	r0, r0, r1, lsl #5
   16c94:	add	r2, r1, #1
   16c98:	mov	r1, #0
   16c9c:	cmp	r6, #0
   16ca0:	mvn	r3, #0
   16ca4:	str	r2, [r7, #64]	; 0x40
   16ca8:	mov	r2, #16
   16cac:	str	r1, [r0, #4]!
   16cb0:	add	ip, r0, #20
   16cb4:	stmib	r0, {r4, r6}
   16cb8:	str	r1, [r0, #12]
   16cbc:	str	r1, [r0, #16]
   16cc0:	stm	ip, {r1, r2, r3}
   16cc4:	str	r0, [r4]
   16cc8:	beq	16fa8 <__assert_fail@plt+0x58a8>
   16ccc:	str	r0, [r6]
   16cd0:	cmp	r6, #0
   16cd4:	cmpne	r0, #0
   16cd8:	beq	16fa8 <__assert_fail@plt+0x58a8>
   16cdc:	str	r0, [r9, #52]	; 0x34
   16ce0:	ldr	r8, [sl]
   16ce4:	ldr	r0, [r8, #4]
   16ce8:	lsl	r0, r0, #2
   16cec:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   16cf0:	str	r0, [r8, #12]
   16cf4:	ldr	r0, [r8, #4]
   16cf8:	lsl	r0, r0, #2
   16cfc:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   16d00:	str	r0, [r8, #16]
   16d04:	ldr	r0, [r8, #4]
   16d08:	add	r0, r0, r0, lsl #1
   16d0c:	lsl	r0, r0, #2
   16d10:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   16d14:	str	r0, [r8, #20]
   16d18:	ldr	r0, [r8, #4]
   16d1c:	add	r0, r0, r0, lsl #1
   16d20:	lsl	r0, r0, #2
   16d24:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   16d28:	str	r0, [r8, #24]
   16d2c:	ldr	r1, [r8, #12]
   16d30:	cmp	r1, #0
   16d34:	ldrne	r1, [r8, #16]
   16d38:	cmpne	r1, #0
   16d3c:	beq	16d50 <__assert_fail@plt+0x5650>
   16d40:	cmp	r0, #0
   16d44:	ldrne	r0, [r8, #20]
   16d48:	cmpne	r0, #0
   16d4c:	bne	16df8 <__assert_fail@plt+0x56f8>
   16d50:	mov	r0, #12
   16d54:	str	r0, [fp, #-52]	; 0xffffffcc
   16d58:	ldr	r4, [sl]
   16d5c:	ldr	r0, [r4, #56]	; 0x38
   16d60:	cmp	r0, #0
   16d64:	beq	16d7c <__assert_fail@plt+0x567c>
   16d68:	ldr	r5, [r0]
   16d6c:	bl	13ddc <__assert_fail@plt+0x26dc>
   16d70:	cmp	r5, #0
   16d74:	mov	r0, r5
   16d78:	bne	16d68 <__assert_fail@plt+0x5668>
   16d7c:	mov	r0, #31
   16d80:	mov	r5, #0
   16d84:	str	r0, [r4, #64]	; 0x40
   16d88:	str	r5, [r4, #52]	; 0x34
   16d8c:	str	r5, [r4, #56]	; 0x38
   16d90:	ldr	r0, [r4, #16]
   16d94:	bl	13ddc <__assert_fail@plt+0x26dc>
   16d98:	str	r5, [r4, #16]
   16d9c:	ldr	r0, [sp, #40]	; 0x28
   16da0:	bl	13ddc <__assert_fail@plt+0x26dc>
   16da4:	ldr	r0, [sp, #44]	; 0x2c
   16da8:	bl	13ddc <__assert_fail@plt+0x26dc>
   16dac:	ldrb	r0, [sp, #107]	; 0x6b
   16db0:	cmp	r0, #0
   16db4:	beq	16dc0 <__assert_fail@plt+0x56c0>
   16db8:	ldr	r0, [sp, #36]	; 0x24
   16dbc:	bl	13ddc <__assert_fail@plt+0x26dc>
   16dc0:	ldr	r0, [sp, #8]
   16dc4:	cmp	r0, #0
   16dc8:	beq	16dd4 <__assert_fail@plt+0x56d4>
   16dcc:	add	r0, r9, #136	; 0x88
   16dd0:	bl	113f4 <pthread_mutex_destroy@plt>
   16dd4:	mov	r0, r9
   16dd8:	bl	189f4 <__assert_fail@plt+0x72f4>
   16ddc:	mov	r0, #0
   16de0:	str	r0, [sl]
   16de4:	str	r0, [sl, #4]
   16de8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   16dec:	mov	r0, r4
   16df0:	sub	sp, fp, #28
   16df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16df8:	ldr	r0, [sl, #24]
   16dfc:	lsl	r0, r0, #2
   16e00:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   16e04:	cmp	r0, #0
   16e08:	str	r0, [r8, #132]	; 0x84
   16e0c:	beq	171c4 <__assert_fail@plt+0x5ac4>
   16e10:	ldr	r1, [sl, #24]
   16e14:	cmp	r1, #0
   16e18:	beq	16ff0 <__assert_fail@plt+0x58f0>
   16e1c:	mov	r2, #0
   16e20:	cmp	r1, #4
   16e24:	bcc	16fe0 <__assert_fail@plt+0x58e0>
   16e28:	bic	r2, r1, #3
   16e2c:	mov	r3, #1
   16e30:	add	r7, pc, #872	; 0x368
   16e34:	sub	r6, r2, #4
   16e38:	add	r3, r3, r6, lsr #2
   16e3c:	cmp	r6, #12
   16e40:	and	ip, r3, #3
   16e44:	bcs	16e68 <__assert_fail@plt+0x5768>
   16e48:	vld1.64	{d16-d17}, [r7 :128]
   16e4c:	mov	r7, #0
   16e50:	cmp	ip, #0
   16e54:	bne	16ed8 <__assert_fail@plt+0x57d8>
   16e58:	b	16fe8 <__assert_fail@plt+0x58e8>
   16e5c:	str	r8, [sp, #64]	; 0x40
   16e60:	str	r8, [sp, #60]	; 0x3c
   16e64:	b	16bb4 <__assert_fail@plt+0x54b4>
   16e68:	sub	r6, r3, ip
   16e6c:	add	r3, pc, #812	; 0x32c
   16e70:	vmov.i32	q9, #12	; 0x0000000c
   16e74:	vmov.i32	q10, #8	; 0x00000008
   16e78:	vmov.i32	q11, #4	; 0x00000004
   16e7c:	vmov.i32	q12, #16	; 0x00000010
   16e80:	mov	r7, #0
   16e84:	mov	lr, #64	; 0x40
   16e88:	mov	r4, r0
   16e8c:	vld1.64	{d16-d17}, [r3 :128]
   16e90:	mov	r3, r0
   16e94:	vadd.i32	q13, q8, q9
   16e98:	add	r5, r3, #48	; 0x30
   16e9c:	vadd.i32	q14, q8, q10
   16ea0:	vadd.i32	q15, q8, q11
   16ea4:	subs	r6, r6, #4
   16ea8:	add	r7, r7, #16
   16eac:	vst1.32	{d26-d27}, [r5]
   16eb0:	vst1.32	{d16-d17}, [r4], lr
   16eb4:	vadd.i32	q8, q8, q12
   16eb8:	add	r5, r3, #32
   16ebc:	add	r3, r3, #16
   16ec0:	vst1.32	{d28-d29}, [r5]
   16ec4:	vst1.32	{d30-d31}, [r3]
   16ec8:	mov	r3, r4
   16ecc:	bne	16e94 <__assert_fail@plt+0x5794>
   16ed0:	cmp	ip, #0
   16ed4:	beq	16fe8 <__assert_fail@plt+0x58e8>
   16ed8:	vmov.i32	q9, #4	; 0x00000004
   16edc:	add	r3, r0, r7, lsl #2
   16ee0:	rsb	r7, ip, #0
   16ee4:	vadd.i32	q10, q8, q9
   16ee8:	vst1.32	{d16-d17}, [r3]!
   16eec:	adds	r7, r7, #1
   16ef0:	vorr	q8, q10, q10
   16ef4:	bcc	16ee4 <__assert_fail@plt+0x57e4>
   16ef8:	b	16fe8 <__assert_fail@plt+0x58e8>
   16efc:	mov	r6, r0
   16f00:	b	16f08 <__assert_fail@plt+0x5808>
   16f04:	mov	r6, #12
   16f08:	ldr	r9, [sp, #20]
   16f0c:	str	r6, [fp, #-52]	; 0xffffffcc
   16f10:	ldr	r4, [sl]
   16f14:	ldr	r0, [r4, #56]	; 0x38
   16f18:	cmp	r0, #0
   16f1c:	bne	16d68 <__assert_fail@plt+0x5668>
   16f20:	b	16d7c <__assert_fail@plt+0x567c>
   16f24:	mov	r0, r5
   16f28:	mov	r1, #160	; 0xa0
   16f2c:	mov	r4, #160	; 0xa0
   16f30:	bl	2b910 <__assert_fail@plt+0x1a210>
   16f34:	cmp	r0, #0
   16f38:	beq	16f70 <__assert_fail@plt+0x5870>
   16f3c:	mov	r5, r0
   16f40:	stm	sl, {r0, r4}
   16f44:	b	1640c <__assert_fail@plt+0x4d0c>
   16f48:	mov	r0, #996	; 0x3e4
   16f4c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   16f50:	cmp	r0, #0
   16f54:	beq	16fcc <__assert_fail@plt+0x58cc>
   16f58:	ldr	r1, [r7, #56]	; 0x38
   16f5c:	str	r1, [r0]
   16f60:	mov	r1, #0
   16f64:	str	r1, [r7, #64]	; 0x40
   16f68:	str	r0, [r7, #56]	; 0x38
   16f6c:	b	16c38 <__assert_fail@plt+0x5538>
   16f70:	mov	r4, #12
   16f74:	mov	r0, r4
   16f78:	sub	sp, fp, #28
   16f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f80:	mov	r0, #996	; 0x3e4
   16f84:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   16f88:	cmp	r0, #0
   16f8c:	beq	16fa8 <__assert_fail@plt+0x58a8>
   16f90:	ldr	r1, [r7, #56]	; 0x38
   16f94:	str	r1, [r0]
   16f98:	mov	r1, #0
   16f9c:	str	r1, [r7, #64]	; 0x40
   16fa0:	str	r0, [r7, #56]	; 0x38
   16fa4:	b	16c90 <__assert_fail@plt+0x5590>
   16fa8:	mov	r0, #12
   16fac:	str	r0, [fp, #-52]	; 0xffffffcc
   16fb0:	mov	r0, #0
   16fb4:	str	r0, [r9, #52]	; 0x34
   16fb8:	ldr	r4, [sl]
   16fbc:	ldr	r0, [r4, #56]	; 0x38
   16fc0:	cmp	r0, #0
   16fc4:	bne	16d68 <__assert_fail@plt+0x5668>
   16fc8:	b	16d7c <__assert_fail@plt+0x567c>
   16fcc:	mov	r6, #0
   16fd0:	cmp	r4, #0
   16fd4:	mov	r0, r6
   16fd8:	bne	16c80 <__assert_fail@plt+0x5580>
   16fdc:	b	16cd0 <__assert_fail@plt+0x55d0>
   16fe0:	str	r2, [r0, r2, lsl #2]
   16fe4:	add	r2, r2, #1
   16fe8:	cmp	r1, r2
   16fec:	bne	16fe0 <__assert_fail@plt+0x58e0>
   16ff0:	ldr	r2, [r8, #52]	; 0x34
   16ff4:	ldrb	r1, [r2, #24]
   16ff8:	cmp	r1, #17
   16ffc:	beq	17028 <__assert_fail@plt+0x5928>
   17000:	cmp	r1, #4
   17004:	bne	17078 <__assert_fail@plt+0x5978>
   17008:	ldr	r1, [r2, #20]
   1700c:	mov	r3, #1
   17010:	ldr	r0, [r0, r1, lsl #2]
   17014:	str	r0, [r2, #20]
   17018:	ldr	r1, [r8, #80]	; 0x50
   1701c:	orr	r0, r1, r3, lsl r0
   17020:	str	r0, [r8, #80]	; 0x50
   17024:	b	17078 <__assert_fail@plt+0x5978>
   17028:	ldr	r1, [r2, #4]
   1702c:	cmp	r1, #0
   17030:	beq	17078 <__assert_fail@plt+0x5978>
   17034:	ldrb	r3, [r1, #24]
   17038:	cmp	r3, #17
   1703c:	bne	17078 <__assert_fail@plt+0x5978>
   17040:	ldr	r3, [r1, #4]
   17044:	ldr	r1, [r1, #20]
   17048:	cmp	r3, #0
   1704c:	str	r3, [r2, #4]
   17050:	strne	r2, [r3]
   17054:	cmp	r1, #31
   17058:	ldr	r3, [r2, #20]
   1705c:	ldr	r3, [r0, r3, lsl #2]
   17060:	str	r3, [r0, r1, lsl #2]
   17064:	bgt	17078 <__assert_fail@plt+0x5978>
   17068:	ldr	r0, [r8, #80]	; 0x50
   1706c:	mov	r3, #1
   17070:	bic	r0, r0, r3, lsl r1
   17074:	b	17020 <__assert_fail@plt+0x5920>
   17078:	mov	r0, #1
   1707c:	ldr	r7, [r2, #4]
   17080:	cmp	r7, #0
   17084:	bne	170b4 <__assert_fail@plt+0x59b4>
   17088:	mov	r3, #0
   1708c:	ldr	r7, [r2, #8]
   17090:	mov	r1, r2
   17094:	cmp	r7, r3
   17098:	cmpne	r7, #0
   1709c:	bne	170b4 <__assert_fail@plt+0x59b4>
   170a0:	ldr	r2, [r1]
   170a4:	mov	r3, r1
   170a8:	cmp	r2, #0
   170ac:	bne	1708c <__assert_fail@plt+0x598c>
   170b0:	b	17164 <__assert_fail@plt+0x5a64>
   170b4:	ldrb	r1, [r7, #24]
   170b8:	cmp	r1, #17
   170bc:	beq	17108 <__assert_fail@plt+0x5a08>
   170c0:	cmp	r1, #4
   170c4:	mov	r2, r7
   170c8:	bne	1707c <__assert_fail@plt+0x597c>
   170cc:	ldr	r1, [r8, #132]	; 0x84
   170d0:	mov	r2, r7
   170d4:	cmp	r1, #0
   170d8:	beq	1707c <__assert_fail@plt+0x597c>
   170dc:	ldr	r2, [r7, #20]
   170e0:	ldr	r1, [r1, r2, lsl #2]
   170e4:	str	r1, [r7, #20]
   170e8:	ldr	r2, [r8, #80]	; 0x50
   170ec:	orr	r1, r2, r0, lsl r1
   170f0:	str	r1, [r8, #80]	; 0x50
   170f4:	mov	r2, r7
   170f8:	ldr	r7, [r2, #4]
   170fc:	cmp	r7, #0
   17100:	bne	170b4 <__assert_fail@plt+0x59b4>
   17104:	b	17088 <__assert_fail@plt+0x5988>
   17108:	ldr	r3, [r7, #4]
   1710c:	mov	r2, r7
   17110:	cmp	r3, #0
   17114:	beq	1707c <__assert_fail@plt+0x597c>
   17118:	ldrb	r1, [r3, #24]
   1711c:	mov	r2, r7
   17120:	cmp	r1, #17
   17124:	bne	1707c <__assert_fail@plt+0x597c>
   17128:	ldr	r1, [r3, #4]
   1712c:	ldr	r3, [r3, #20]
   17130:	cmp	r1, #0
   17134:	str	r1, [r7, #4]
   17138:	strne	r7, [r1]
   1713c:	cmp	r3, #31
   17140:	ldr	r1, [r7, #20]
   17144:	ldr	r2, [r8, #132]	; 0x84
   17148:	ldr	r1, [r2, r1, lsl #2]
   1714c:	str	r1, [r2, r3, lsl #2]
   17150:	mov	r2, r7
   17154:	bgt	1707c <__assert_fail@plt+0x597c>
   17158:	ldr	r1, [r8, #80]	; 0x50
   1715c:	bic	r1, r1, r0, lsl r3
   17160:	b	170f0 <__assert_fail@plt+0x59f0>
   17164:	ldr	r1, [sl, #24]
   17168:	cmp	r1, #0
   1716c:	beq	17194 <__assert_fail@plt+0x5a94>
   17170:	ldr	r0, [r8, #132]	; 0x84
   17174:	mov	r2, #0
   17178:	ldr	r3, [r0, r2, lsl #2]
   1717c:	cmp	r2, r3
   17180:	bne	171b0 <__assert_fail@plt+0x5ab0>
   17184:	add	r2, r2, #1
   17188:	cmp	r1, r2
   1718c:	bne	17178 <__assert_fail@plt+0x5a78>
   17190:	b	171b8 <__assert_fail@plt+0x5ab8>
   17194:	ldr	r0, [r8, #132]	; 0x84
   17198:	b	171b8 <__assert_fail@plt+0x5ab8>
   1719c:	nop	{0}
   171a0:	andeq	r0, r0, r0
   171a4:	andeq	r0, r0, r1
   171a8:	andeq	r0, r0, r2
   171ac:	andeq	r0, r0, r3
   171b0:	cmp	r1, r2
   171b4:	bne	171c4 <__assert_fail@plt+0x5ac4>
   171b8:	bl	13ddc <__assert_fail@plt+0x26dc>
   171bc:	mov	r0, #0
   171c0:	str	r0, [r8, #132]	; 0x84
   171c4:	ldr	r0, [r8, #52]	; 0x34
   171c8:	str	r8, [sp, #24]
   171cc:	mov	r7, #0
   171d0:	sub	r8, fp, #48	; 0x30
   171d4:	mov	r4, r0
   171d8:	ldr	r0, [r0, #4]
   171dc:	cmp	r0, #0
   171e0:	bne	171d4 <__assert_fail@plt+0x5ad4>
   171e4:	ldr	r0, [r4, #8]
   171e8:	cmp	r0, #0
   171ec:	bne	171d4 <__assert_fail@plt+0x5ad4>
   171f0:	mov	r3, #0
   171f4:	cmp	r3, #0
   171f8:	str	r7, [fp, #-48]	; 0xffffffd0
   171fc:	beq	17228 <__assert_fail@plt+0x5b28>
   17200:	ldrb	r0, [r3, #24]
   17204:	cmp	r0, #17
   17208:	bne	17228 <__assert_fail@plt+0x5b28>
   1720c:	ldrb	r2, [sl, #28]
   17210:	ldr	r1, [sl]
   17214:	mov	r0, r8
   17218:	bl	214d0 <__assert_fail@plt+0xfdd0>
   1721c:	cmp	r0, #0
   17220:	str	r0, [r4, #4]
   17224:	strne	r4, [r0]
   17228:	ldr	r3, [r4, #8]
   1722c:	cmp	r3, #0
   17230:	beq	1725c <__assert_fail@plt+0x5b5c>
   17234:	ldrb	r0, [r3, #24]
   17238:	cmp	r0, #17
   1723c:	bne	1725c <__assert_fail@plt+0x5b5c>
   17240:	ldrb	r2, [sl, #28]
   17244:	ldr	r1, [sl]
   17248:	mov	r0, r8
   1724c:	bl	214d0 <__assert_fail@plt+0xfdd0>
   17250:	cmp	r0, #0
   17254:	str	r0, [r4, #8]
   17258:	strne	r4, [r0]
   1725c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17260:	cmp	r0, #0
   17264:	bne	16d54 <__assert_fail@plt+0x5654>
   17268:	ldr	r1, [r4]
   1726c:	cmp	r1, #0
   17270:	beq	1729c <__assert_fail@plt+0x5b9c>
   17274:	ldr	r0, [r1, #8]
   17278:	cmp	r0, r4
   1727c:	cmpne	r0, #0
   17280:	bne	171d4 <__assert_fail@plt+0x5ad4>
   17284:	ldr	r3, [r1, #4]
   17288:	mov	r4, r1
   1728c:	cmp	r3, #0
   17290:	str	r7, [fp, #-48]	; 0xffffffd0
   17294:	bne	17200 <__assert_fail@plt+0x5b00>
   17298:	b	17228 <__assert_fail@plt+0x5b28>
   1729c:	ldr	r8, [sp, #24]
   172a0:	ldr	r0, [r8, #52]	; 0x34
   172a4:	mov	r4, r0
   172a8:	ldr	r0, [r0, #4]
   172ac:	cmp	r0, #0
   172b0:	bne	172a4 <__assert_fail@plt+0x5ba4>
   172b4:	ldr	r0, [r4, #8]
   172b8:	cmp	r0, #0
   172bc:	bne	172a4 <__assert_fail@plt+0x5ba4>
   172c0:	ldr	r2, [r4, #24]
   172c4:	uxtb	r0, r2
   172c8:	cmp	r0, #16
   172cc:	bne	17310 <__assert_fail@plt+0x5c10>
   172d0:	ldr	r0, [r4, #4]
   172d4:	ldr	r1, [r0, #12]
   172d8:	str	r1, [r4, #12]
   172dc:	ldr	r0, [r0, #28]
   172e0:	str	r0, [r4, #28]
   172e4:	ldr	r1, [r4]
   172e8:	cmp	r1, #0
   172ec:	beq	1735c <__assert_fail@plt+0x5c5c>
   172f0:	ldr	r0, [r1, #8]
   172f4:	cmp	r0, r4
   172f8:	mov	r4, r1
   172fc:	beq	172c0 <__assert_fail@plt+0x5bc0>
   17300:	cmp	r0, #0
   17304:	mov	r4, r1
   17308:	beq	172c0 <__assert_fail@plt+0x5bc0>
   1730c:	b	172a4 <__assert_fail@plt+0x5ba4>
   17310:	str	r4, [r4, #12]
   17314:	mov	r0, r8
   17318:	ldr	r1, [r4, #20]
   1731c:	bl	217b8 <__assert_fail@plt+0x100b8>
   17320:	cmn	r0, #1
   17324:	str	r0, [r4, #28]
   17328:	beq	16d50 <__assert_fail@plt+0x5650>
   1732c:	ldrb	r1, [r4, #24]
   17330:	cmp	r1, #12
   17334:	bne	17350 <__assert_fail@plt+0x5c50>
   17338:	ldr	r1, [r8]
   1733c:	ldr	r2, [r4, #20]
   17340:	add	r0, r1, r0, lsl #3
   17344:	ldr	r1, [r0, #4]
   17348:	bfi	r1, r2, #8, #10
   1734c:	str	r1, [r0, #4]
   17350:	ldr	r1, [r4]
   17354:	cmp	r1, #0
   17358:	bne	172f0 <__assert_fail@plt+0x5bf0>
   1735c:	ldr	r4, [r8, #52]	; 0x34
   17360:	ldrb	r0, [r4, #24]
   17364:	cmp	r0, #16
   17368:	beq	1738c <__assert_fail@plt+0x5c8c>
   1736c:	cmp	r0, #11
   17370:	bne	1739c <__assert_fail@plt+0x5c9c>
   17374:	ldr	r0, [r4, #4]
   17378:	str	r4, [r0, #16]
   1737c:	mov	r1, r4
   17380:	cmp	r0, #0
   17384:	bne	173e0 <__assert_fail@plt+0x5ce0>
   17388:	b	17444 <__assert_fail@plt+0x5d44>
   1738c:	ldmib	r4, {r0, r1}
   17390:	ldr	r2, [r1, #12]
   17394:	str	r2, [r0, #16]
   17398:	b	173b8 <__assert_fail@plt+0x5cb8>
   1739c:	ldr	r0, [r4, #4]
   173a0:	cmp	r0, #0
   173a4:	ldrne	r1, [r4, #16]
   173a8:	strne	r1, [r0, #16]
   173ac:	ldr	r1, [r4, #8]
   173b0:	cmp	r1, #0
   173b4:	beq	173c0 <__assert_fail@plt+0x5cc0>
   173b8:	ldr	r2, [r4, #16]
   173bc:	str	r2, [r1, #16]
   173c0:	mov	r1, r4
   173c4:	cmp	r0, #0
   173c8:	bne	173e0 <__assert_fail@plt+0x5ce0>
   173cc:	b	17444 <__assert_fail@plt+0x5d44>
   173d0:	ldr	r0, [r1, #4]
   173d4:	str	r1, [r0, #16]
   173d8:	cmp	r0, #0
   173dc:	beq	17444 <__assert_fail@plt+0x5d44>
   173e0:	mov	r1, r0
   173e4:	ldrb	r0, [r0, #24]
   173e8:	cmp	r0, #16
   173ec:	beq	17428 <__assert_fail@plt+0x5d28>
   173f0:	cmp	r0, #11
   173f4:	beq	173d0 <__assert_fail@plt+0x5cd0>
   173f8:	ldr	r0, [r1, #4]
   173fc:	cmp	r0, #0
   17400:	ldrne	r2, [r1, #16]
   17404:	strne	r2, [r0, #16]
   17408:	ldr	r2, [r1, #8]
   1740c:	cmp	r2, #0
   17410:	beq	173d8 <__assert_fail@plt+0x5cd8>
   17414:	ldr	r3, [r1, #16]
   17418:	str	r3, [r2, #16]
   1741c:	cmp	r0, #0
   17420:	bne	173e0 <__assert_fail@plt+0x5ce0>
   17424:	b	17444 <__assert_fail@plt+0x5d44>
   17428:	ldmib	r1, {r0, r2}
   1742c:	ldr	r3, [r2, #12]
   17430:	str	r3, [r0, #16]
   17434:	ldr	r3, [r1, #16]
   17438:	str	r3, [r2, #16]
   1743c:	cmp	r0, #0
   17440:	bne	173e0 <__assert_fail@plt+0x5ce0>
   17444:	mov	r3, #0
   17448:	ldr	r0, [r1, #8]
   1744c:	mov	r2, r1
   17450:	cmp	r0, r3
   17454:	cmpne	r0, #0
   17458:	bne	173e0 <__assert_fail@plt+0x5ce0>
   1745c:	ldr	r1, [r2]
   17460:	mov	r3, r2
   17464:	cmp	r1, #0
   17468:	bne	17448 <__assert_fail@plt+0x5d48>
   1746c:	mov	r0, r8
   17470:	mov	r1, r4
   17474:	bl	21334 <__assert_fail@plt+0xfc34>
   17478:	cmp	r0, #0
   1747c:	beq	1749c <__assert_fail@plt+0x5d9c>
   17480:	b	16d54 <__assert_fail@plt+0x5654>
   17484:	mov	r0, r8
   17488:	mov	r1, r7
   1748c:	bl	21334 <__assert_fail@plt+0xfc34>
   17490:	cmp	r0, #0
   17494:	mov	r4, r7
   17498:	bne	16d54 <__assert_fail@plt+0x5654>
   1749c:	ldr	r7, [r4, #4]
   174a0:	cmp	r7, #0
   174a4:	bne	17484 <__assert_fail@plt+0x5d84>
   174a8:	mov	r1, #0
   174ac:	ldr	r7, [r4, #8]
   174b0:	mov	r0, r4
   174b4:	cmp	r7, r1
   174b8:	cmpne	r7, #0
   174bc:	bne	17484 <__assert_fail@plt+0x5d84>
   174c0:	ldr	r4, [r0]
   174c4:	mov	r1, r0
   174c8:	cmp	r4, #0
   174cc:	bne	174ac <__assert_fail@plt+0x5dac>
   174d0:	mov	r5, #0
   174d4:	sub	r4, fp, #48	; 0x30
   174d8:	mov	r7, #0
   174dc:	b	1750c <__assert_fail@plt+0x5e0c>
   174e0:	mov	r1, r5
   174e4:	ldr	r2, [r8, #8]
   174e8:	add	r0, r7, #1
   174ec:	subs	r3, r0, r2
   174f0:	mov	r7, r3
   174f4:	movwne	r3, #1
   174f8:	movne	r7, r0
   174fc:	tst	r1, #1
   17500:	and	r5, r1, r3
   17504:	cmpeq	r0, r2
   17508:	beq	17568 <__assert_fail@plt+0x5e68>
   1750c:	ldr	r0, [r8, #24]
   17510:	add	r6, r7, r7, lsl #1
   17514:	add	r0, r0, r6, lsl #2
   17518:	ldr	r0, [r0, #4]
   1751c:	cmp	r0, #0
   17520:	bne	174e0 <__assert_fail@plt+0x5de0>
   17524:	mov	r0, r4
   17528:	mov	r1, r8
   1752c:	mov	r2, r7
   17530:	mov	r3, #1
   17534:	bl	21990 <__assert_fail@plt+0x10290>
   17538:	cmp	r0, #0
   1753c:	bne	16d54 <__assert_fail@plt+0x5654>
   17540:	ldr	r0, [r8, #24]
   17544:	mov	r1, r5
   17548:	add	r0, r0, r6, lsl #2
   1754c:	ldr	r0, [r0, #4]
   17550:	cmp	r0, #0
   17554:	bne	174e4 <__assert_fail@plt+0x5de4>
   17558:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1755c:	bl	13ddc <__assert_fail@plt+0x26dc>
   17560:	mov	r1, #1
   17564:	b	174e4 <__assert_fail@plt+0x5de4>
   17568:	ldrb	r1, [sl, #28]
   1756c:	tst	r1, #16
   17570:	bne	1758c <__assert_fail@plt+0x5e8c>
   17574:	ldr	r1, [sl, #24]
   17578:	cmp	r1, #0
   1757c:	beq	1758c <__assert_fail@plt+0x5e8c>
   17580:	ldrb	r1, [r8, #88]	; 0x58
   17584:	tst	r1, #1
   17588:	bne	17598 <__assert_fail@plt+0x5e98>
   1758c:	ldr	r1, [r8, #76]	; 0x4c
   17590:	cmp	r1, #0
   17594:	beq	176dc <__assert_fail@plt+0x5fdc>
   17598:	add	r0, r0, r0, lsl #1
   1759c:	lsl	r0, r0, #2
   175a0:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   175a4:	cmp	r0, #0
   175a8:	str	r0, [r8, #28]
   175ac:	beq	17b90 <__assert_fail@plt+0x6490>
   175b0:	ldr	r1, [r8, #8]
   175b4:	cmp	r1, #0
   175b8:	beq	176dc <__assert_fail@plt+0x5fdc>
   175bc:	mov	r1, #0
   175c0:	str	r1, [r0]
   175c4:	str	r1, [r0, #4]
   175c8:	str	r1, [r0, #8]
   175cc:	ldr	r0, [r8, #8]
   175d0:	cmp	r0, #2
   175d4:	bcc	17604 <__assert_fail@plt+0x5f04>
   175d8:	mov	r2, #1
   175dc:	mov	r3, #12
   175e0:	ldr	r0, [r8, #28]
   175e4:	add	r2, r2, #1
   175e8:	str	r1, [r0, r3]!
   175ec:	add	r3, r3, #12
   175f0:	str	r1, [r0, #4]
   175f4:	str	r1, [r0, #8]
   175f8:	ldr	r0, [r8, #8]
   175fc:	cmp	r2, r0
   17600:	bcc	175e0 <__assert_fail@plt+0x5ee0>
   17604:	cmp	r0, #0
   17608:	beq	176dc <__assert_fail@plt+0x5fdc>
   1760c:	ldr	ip, [r8, #24]
   17610:	mov	r7, #0
   17614:	str	sl, [sp, #16]
   17618:	b	17630 <__assert_fail@plt+0x5f30>
   1761c:	ldr	r0, [r8, #8]
   17620:	ldr	sl, [sp, #16]
   17624:	add	r7, r7, #1
   17628:	cmp	r7, r0
   1762c:	bcs	176dc <__assert_fail@plt+0x5fdc>
   17630:	add	r9, r7, r7, lsl #1
   17634:	add	r2, ip, r9, lsl #2
   17638:	ldr	r3, [r2, #4]
   1763c:	cmp	r3, #1
   17640:	blt	17624 <__assert_fail@plt+0x5f24>
   17644:	ldr	r1, [r2, #8]
   17648:	mov	r6, #0
   1764c:	str	r1, [sp, #28]
   17650:	b	1767c <__assert_fail@plt+0x5f7c>
   17654:	add	r0, r4, r0, lsl #2
   17658:	ldr	r0, [r0, #8]
   1765c:	add	r3, r2, #1
   17660:	add	r6, r6, #1
   17664:	str	r3, [sl]
   17668:	str	r7, [r0, r2, lsl #2]
   1766c:	add	r0, ip, r9, lsl #2
   17670:	ldr	r0, [r0, #4]
   17674:	cmp	r6, r0
   17678:	bge	1761c <__assert_fail@plt+0x5f1c>
   1767c:	ldr	r0, [r1, r6, lsl #2]
   17680:	ldr	r4, [r8, #28]
   17684:	add	r0, r0, r0, lsl #1
   17688:	mov	r3, r4
   1768c:	ldr	r5, [r3, r0, lsl #2]!
   17690:	mov	sl, r3
   17694:	ldr	r2, [sl, #4]!
   17698:	cmp	r5, r2
   1769c:	bne	17654 <__assert_fail@plt+0x5f54>
   176a0:	mov	r1, #2
   176a4:	add	r8, r4, r0, lsl #2
   176a8:	add	r1, r1, r5, lsl #1
   176ac:	str	r1, [r3]
   176b0:	lsl	r1, r1, #2
   176b4:	ldr	r0, [r8, #8]!
   176b8:	bl	2b910 <__assert_fail@plt+0x1a210>
   176bc:	cmp	r0, #0
   176c0:	beq	17b8c <__assert_fail@plt+0x648c>
   176c4:	str	r0, [r8]
   176c8:	ldr	r8, [sp, #24]
   176cc:	ldr	r1, [sp, #28]
   176d0:	ldr	r2, [sl]
   176d4:	ldr	ip, [r8, #24]
   176d8:	b	1765c <__assert_fail@plt+0x5f5c>
   176dc:	mov	r0, #0
   176e0:	str	r0, [fp, #-52]	; 0xffffffcc
   176e4:	ldr	r0, [sp, #12]
   176e8:	cmp	r0, #0
   176ec:	bne	178a8 <__assert_fail@plt+0x61a8>
   176f0:	ldr	r0, [sp, #20]
   176f4:	ldrb	r2, [r0, #88]	; 0x58
   176f8:	ands	r0, r2, #4
   176fc:	beq	178a8 <__assert_fail@plt+0x61a8>
   17700:	ldr	r0, [sl, #20]
   17704:	cmp	r0, #0
   17708:	bne	178a8 <__assert_fail@plt+0x61a8>
   1770c:	ldr	r0, [sp, #20]
   17710:	mov	r9, #0
   17714:	ldr	r7, [r0, #8]
   17718:	cmp	r7, #0
   1771c:	beq	1773c <__assert_fail@plt+0x603c>
   17720:	ldr	r3, [r0]
   17724:	mov	r8, #0
   17728:	mov	ip, #1
   1772c:	mov	lr, #139	; 0x8b
   17730:	mov	r6, #0
   17734:	mov	r4, #0
   17738:	b	17790 <__assert_fail@plt+0x6090>
   1773c:	mov	r8, #0
   17740:	ldr	r3, [sp, #20]
   17744:	mov	r0, #1
   17748:	and	r1, r2, #249	; 0xf9
   1774c:	str	r0, [r3, #92]	; 0x5c
   17750:	ldr	r0, [r3, #76]	; 0x4c
   17754:	cmp	r0, #0
   17758:	movwgt	r9, #1
   1775c:	orr	r0, r8, r9
   17760:	and	r0, r0, #1
   17764:	orr	r0, r1, r0, lsl #1
   17768:	strb	r0, [r3, #88]	; 0x58
   1776c:	b	178a8 <__assert_fail@plt+0x61a8>
   17770:	ldrsb	r0, [r5]
   17774:	cmp	r0, #0
   17778:	mov	r0, #0
   1777c:	movwmi	r0, #1
   17780:	orr	r6, r6, r0
   17784:	add	r4, r4, #1
   17788:	cmp	r7, r4
   1778c:	beq	17840 <__assert_fail@plt+0x6140>
   17790:	add	r5, r3, r4, lsl #3
   17794:	ldrb	r1, [r5, #4]
   17798:	sub	r1, r1, #1
   1779c:	cmp	r1, #11
   177a0:	bhi	17be0 <__assert_fail@plt+0x64e0>
   177a4:	add	r0, pc, #0
   177a8:	ldr	pc, [r0, r1, lsl #2]
   177ac:	andeq	r7, r1, r0, ror r7
   177b0:	andeq	r7, r1, r4, lsl #15
   177b4:	ldrdeq	r7, [r1], -ip
   177b8:	andeq	r7, r1, r4, lsl #15
   177bc:	andeq	r7, r1, r0, lsr r8
   177c0:	andeq	r7, r1, r8, lsr #17
   177c4:	andeq	r7, r1, r0, ror #23
   177c8:	andeq	r7, r1, r4, lsl #15
   177cc:	andeq	r7, r1, r4, lsl #15
   177d0:	andeq	r7, r1, r4, lsl #15
   177d4:	andeq	r7, r1, r4, lsl #15
   177d8:	andeq	r7, r1, r0, lsl r8
   177dc:	ldr	r5, [r3, r4, lsl #3]
   177e0:	ldr	r0, [r5, #16]
   177e4:	cmp	r0, #0
   177e8:	bne	178a8 <__assert_fail@plt+0x61a8>
   177ec:	ldr	r0, [r5, #20]
   177f0:	cmp	r0, #0
   177f4:	ldreq	r0, [r5, #24]
   177f8:	cmpeq	r0, #0
   177fc:	bne	178a8 <__assert_fail@plt+0x61a8>
   17800:	ldr	r0, [r5, #28]
   17804:	cmp	r0, #0
   17808:	beq	17784 <__assert_fail@plt+0x6084>
   1780c:	b	178a8 <__assert_fail@plt+0x61a8>
   17810:	ldr	r0, [r3, r4, lsl #3]
   17814:	sub	r0, r0, #16
   17818:	ror	r1, r0, #4
   1781c:	cmp	r1, #7
   17820:	bhi	178a8 <__assert_fail@plt+0x61a8>
   17824:	tst	lr, ip, lsl r1
   17828:	bne	17784 <__assert_fail@plt+0x6084>
   1782c:	b	178a8 <__assert_fail@plt+0x61a8>
   17830:	mov	r8, #1
   17834:	add	r4, r4, #1
   17838:	cmp	r7, r4
   1783c:	bne	17790 <__assert_fail@plt+0x6090>
   17840:	orr	r0, r6, r8
   17844:	tst	r0, #1
   17848:	beq	17740 <__assert_fail@plt+0x6040>
   1784c:	mov	r2, #0
   17850:	mov	r7, #7
   17854:	add	r3, r3, r2, lsl #3
   17858:	ldr	r6, [r3, #4]
   1785c:	uxtb	r1, r6
   17860:	cmp	r1, #5
   17864:	beq	17884 <__assert_fail@plt+0x6184>
   17868:	cmp	r1, #1
   1786c:	bne	1788c <__assert_fail@plt+0x618c>
   17870:	ldrsb	r0, [r3]
   17874:	cmn	r0, #1
   17878:	bicle	r0, r6, #2097152	; 0x200000
   1787c:	strle	r0, [r3, #4]
   17880:	b	1788c <__assert_fail@plt+0x618c>
   17884:	bfi	r6, r7, #0, #8
   17888:	str	r6, [r3, #4]
   1788c:	ldr	r1, [sp, #20]
   17890:	add	r2, r2, #1
   17894:	ldr	r0, [r1, #8]
   17898:	cmp	r2, r0
   1789c:	bcs	17ba4 <__assert_fail@plt+0x64a4>
   178a0:	ldr	r3, [r1]
   178a4:	b	17854 <__assert_fail@plt+0x6154>
   178a8:	ldr	r8, [sp, #20]
   178ac:	ldr	r1, [r8, #52]	; 0x34
   178b0:	ldr	r0, [r8, #24]
   178b4:	ldr	r1, [r1, #12]
   178b8:	ldr	r1, [r1, #28]
   178bc:	str	r1, [r8, #72]	; 0x48
   178c0:	add	r1, r1, r1, lsl #1
   178c4:	add	r5, r0, r1, lsl #2
   178c8:	mov	r4, r5
   178cc:	ldr	r7, [r4, #4]!
   178d0:	str	r7, [fp, #-44]	; 0xffffffd4
   178d4:	ldr	r0, [r4]
   178d8:	cmp	r0, #1
   178dc:	blt	17a34 <__assert_fail@plt+0x6334>
   178e0:	lsl	r0, r7, #2
   178e4:	str	r7, [fp, #-48]	; 0xffffffd0
   178e8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   178ec:	cmp	r0, #0
   178f0:	str	r0, [fp, #-40]	; 0xffffffd8
   178f4:	beq	17bc8 <__assert_fail@plt+0x64c8>
   178f8:	mov	r6, r0
   178fc:	ldr	r0, [r4]
   17900:	ldr	r1, [r5, #8]
   17904:	lsl	r2, r0, #2
   17908:	mov	r0, r6
   1790c:	bl	11448 <memcpy@plt>
   17910:	mov	r0, #0
   17914:	cmp	r7, #1
   17918:	str	r0, [fp, #-32]	; 0xffffffe0
   1791c:	blt	17a48 <__assert_fail@plt+0x6348>
   17920:	ldr	r0, [sp, #20]
   17924:	ldr	r0, [r0, #76]	; 0x4c
   17928:	cmp	r0, #1
   1792c:	blt	17a48 <__assert_fail@plt+0x6348>
   17930:	mov	r0, #0
   17934:	sub	r8, fp, #48	; 0x30
   17938:	mov	r9, #1
   1793c:	ldr	r2, [sp, #20]
   17940:	ldr	r1, [r6, r0, lsl #2]
   17944:	ldr	r2, [r2]
   17948:	add	r3, r2, r1, lsl #3
   1794c:	ldrb	r3, [r3, #4]
   17950:	cmp	r3, #4
   17954:	bne	17a20 <__assert_fail@plt+0x6320>
   17958:	mov	r3, #0
   1795c:	cmp	r7, #1
   17960:	bge	17974 <__assert_fail@plt+0x6274>
   17964:	b	17998 <__assert_fail@plt+0x6298>
   17968:	add	r3, r3, #1
   1796c:	cmp	r7, r3
   17970:	beq	17a20 <__assert_fail@plt+0x6320>
   17974:	ldr	r5, [r6, r3, lsl #2]
   17978:	add	r4, r2, r5, lsl #3
   1797c:	ldrb	r4, [r4, #4]
   17980:	cmp	r4, #9
   17984:	bne	17968 <__assert_fail@plt+0x6268>
   17988:	ldr	r4, [r2, r1, lsl #3]
   1798c:	ldr	r5, [r2, r5, lsl #3]
   17990:	cmp	r5, r4
   17994:	bne	17968 <__assert_fail@plt+0x6268>
   17998:	cmp	r3, r7
   1799c:	beq	17a20 <__assert_fail@plt+0x6320>
   179a0:	ldr	r2, [sp, #20]
   179a4:	add	r1, r1, r1, lsl #1
   179a8:	cmp	r7, #1
   179ac:	ldr	r2, [r2, #20]
   179b0:	add	r1, r2, r1, lsl #2
   179b4:	ldr	r1, [r1, #8]
   179b8:	ldr	ip, [r1]
   179bc:	blt	179f8 <__assert_fail@plt+0x62f8>
   179c0:	mov	r2, #0
   179c4:	subs	r3, r7, #1
   179c8:	beq	179ec <__assert_fail@plt+0x62ec>
   179cc:	add	r5, r2, r3
   179d0:	lsr	r4, r5, #1
   179d4:	ldr	r1, [r6, r4, lsl #2]
   179d8:	cmp	r1, ip
   179dc:	addlt	r2, r9, r5, lsr #1
   179e0:	movge	r3, r4
   179e4:	cmp	r2, r3
   179e8:	bcc	179cc <__assert_fail@plt+0x62cc>
   179ec:	ldr	r1, [r6, r2, lsl #2]
   179f0:	cmp	r1, ip
   179f4:	beq	17a20 <__assert_fail@plt+0x6320>
   179f8:	ldr	r0, [sp, #20]
   179fc:	add	r1, ip, ip, lsl #1
   17a00:	ldr	r0, [r0, #24]
   17a04:	add	r1, r0, r1, lsl #2
   17a08:	mov	r0, r8
   17a0c:	bl	22048 <__assert_fail@plt+0x10948>
   17a10:	cmp	r0, #0
   17a14:	bne	17b9c <__assert_fail@plt+0x649c>
   17a18:	ldr	r7, [fp, #-44]	; 0xffffffd4
   17a1c:	mov	r0, #0
   17a20:	add	r0, r0, #1
   17a24:	cmp	r0, r7
   17a28:	bge	17a48 <__assert_fail@plt+0x6348>
   17a2c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   17a30:	b	1793c <__assert_fail@plt+0x623c>
   17a34:	mov	r0, #0
   17a38:	str	r0, [fp, #-44]	; 0xffffffd4
   17a3c:	str	r0, [fp, #-48]	; 0xffffffd0
   17a40:	str	r0, [fp, #-40]	; 0xffffffd8
   17a44:	str	r0, [fp, #-32]	; 0xffffffe0
   17a48:	ldr	r8, [sp, #20]
   17a4c:	sub	r0, fp, #32
   17a50:	sub	r2, fp, #48	; 0x30
   17a54:	mov	r3, #0
   17a58:	mov	r1, r8
   17a5c:	bl	22368 <__assert_fail@plt+0x10c68>
   17a60:	cmp	r0, #0
   17a64:	str	r0, [r8, #36]	; 0x24
   17a68:	beq	17ae8 <__assert_fail@plt+0x63e8>
   17a6c:	ldrsb	r1, [r0, #52]	; 0x34
   17a70:	cmn	r1, #1
   17a74:	ble	17a88 <__assert_fail@plt+0x6388>
   17a78:	str	r0, [r8, #40]	; 0x28
   17a7c:	str	r0, [r8, #44]	; 0x2c
   17a80:	str	r0, [r8, #48]	; 0x30
   17a84:	b	17afc <__assert_fail@plt+0x63fc>
   17a88:	sub	r4, fp, #32
   17a8c:	sub	r6, fp, #48	; 0x30
   17a90:	mov	r1, r8
   17a94:	mov	r3, #1
   17a98:	mov	r0, r4
   17a9c:	mov	r2, r6
   17aa0:	bl	22368 <__assert_fail@plt+0x10c68>
   17aa4:	str	r0, [r8, #40]	; 0x28
   17aa8:	mov	r0, r4
   17aac:	mov	r1, r8
   17ab0:	mov	r2, r6
   17ab4:	mov	r3, #2
   17ab8:	bl	22368 <__assert_fail@plt+0x10c68>
   17abc:	str	r0, [r8, #44]	; 0x2c
   17ac0:	mov	r0, r4
   17ac4:	mov	r1, r8
   17ac8:	mov	r2, r6
   17acc:	mov	r3, #6
   17ad0:	bl	22368 <__assert_fail@plt+0x10c68>
   17ad4:	str	r0, [r8, #48]	; 0x30
   17ad8:	ldr	r1, [r8, #40]	; 0x28
   17adc:	cmp	r1, #0
   17ae0:	cmpne	r0, #0
   17ae4:	bne	17af0 <__assert_fail@plt+0x63f0>
   17ae8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17aec:	b	17b08 <__assert_fail@plt+0x6408>
   17af0:	ldr	r0, [r8, #44]	; 0x2c
   17af4:	cmp	r0, #0
   17af8:	beq	17ae8 <__assert_fail@plt+0x63e8>
   17afc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17b00:	bl	13ddc <__assert_fail@plt+0x26dc>
   17b04:	mov	r0, #0
   17b08:	str	r0, [fp, #-52]	; 0xffffffcc
   17b0c:	ldr	r5, [sl]
   17b10:	ldr	r0, [r5, #56]	; 0x38
   17b14:	cmp	r0, #0
   17b18:	beq	17b30 <__assert_fail@plt+0x6430>
   17b1c:	ldr	r4, [r0]
   17b20:	bl	13ddc <__assert_fail@plt+0x26dc>
   17b24:	cmp	r4, #0
   17b28:	mov	r0, r4
   17b2c:	bne	17b1c <__assert_fail@plt+0x641c>
   17b30:	mov	r0, #31
   17b34:	mov	r4, #0
   17b38:	str	r0, [r5, #64]	; 0x40
   17b3c:	str	r4, [r5, #52]	; 0x34
   17b40:	str	r4, [r5, #56]	; 0x38
   17b44:	ldr	r0, [r5, #16]
   17b48:	bl	13ddc <__assert_fail@plt+0x26dc>
   17b4c:	str	r4, [r5, #16]
   17b50:	ldr	r0, [sp, #40]	; 0x28
   17b54:	bl	13ddc <__assert_fail@plt+0x26dc>
   17b58:	ldr	r0, [sp, #44]	; 0x2c
   17b5c:	bl	13ddc <__assert_fail@plt+0x26dc>
   17b60:	ldrb	r0, [sp, #107]	; 0x6b
   17b64:	cmp	r0, #0
   17b68:	beq	17b74 <__assert_fail@plt+0x6474>
   17b6c:	ldr	r0, [sp, #36]	; 0x24
   17b70:	bl	13ddc <__assert_fail@plt+0x26dc>
   17b74:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17b78:	cmp	r0, #0
   17b7c:	bne	17bac <__assert_fail@plt+0x64ac>
   17b80:	mov	r0, r4
   17b84:	sub	sp, fp, #28
   17b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b8c:	ldr	sl, [sp, #16]
   17b90:	mov	r0, #12
   17b94:	ldr	r9, [sp, #20]
   17b98:	b	16d54 <__assert_fail@plt+0x5654>
   17b9c:	ldr	r8, [sp, #20]
   17ba0:	b	17b08 <__assert_fail@plt+0x6408>
   17ba4:	ldrb	r2, [r1, #88]	; 0x58
   17ba8:	b	17740 <__assert_fail@plt+0x6040>
   17bac:	ldr	r0, [sp, #8]
   17bb0:	cmp	r0, #0
   17bb4:	beq	17bc0 <__assert_fail@plt+0x64c0>
   17bb8:	add	r0, r8, #136	; 0x88
   17bbc:	bl	113f4 <pthread_mutex_destroy@plt>
   17bc0:	mov	r0, r8
   17bc4:	b	16dd8 <__assert_fail@plt+0x56d8>
   17bc8:	mov	r0, #0
   17bcc:	str	r0, [fp, #-48]	; 0xffffffd0
   17bd0:	str	r0, [fp, #-44]	; 0xffffffd4
   17bd4:	mov	r0, #12
   17bd8:	str	r0, [fp, #-32]	; 0xffffffe0
   17bdc:	b	17b08 <__assert_fail@plt+0x6408>
   17be0:	bl	116e8 <abort@plt>
   17be4:	movw	r2, #58096	; 0xe2f0
   17be8:	movt	r2, #3
   17bec:	ldr	r1, [r2]
   17bf0:	str	r0, [r2]
   17bf4:	mov	r0, r1
   17bf8:	bx	lr
   17bfc:	push	{r4, r5, r6, sl, fp, lr}
   17c00:	add	fp, sp, #16
   17c04:	ldr	r5, [r0, #16]
   17c08:	ldr	r6, [r0]
   17c0c:	mov	r4, r0
   17c10:	mov	r1, #0
   17c14:	mov	r2, #256	; 0x100
   17c18:	mov	r0, r5
   17c1c:	bl	11610 <memset@plt>
   17c20:	ldr	r1, [r6, #36]	; 0x24
   17c24:	mov	r0, r4
   17c28:	mov	r2, r5
   17c2c:	bl	17c94 <__assert_fail@plt+0x6594>
   17c30:	ldr	r0, [r6, #36]	; 0x24
   17c34:	ldr	r1, [r6, #40]	; 0x28
   17c38:	cmp	r0, r1
   17c3c:	beq	17c50 <__assert_fail@plt+0x6550>
   17c40:	mov	r0, r4
   17c44:	mov	r2, r5
   17c48:	bl	17c94 <__assert_fail@plt+0x6594>
   17c4c:	ldr	r0, [r6, #36]	; 0x24
   17c50:	ldr	r1, [r6, #44]	; 0x2c
   17c54:	cmp	r0, r1
   17c58:	beq	17c6c <__assert_fail@plt+0x656c>
   17c5c:	mov	r0, r4
   17c60:	mov	r2, r5
   17c64:	bl	17c94 <__assert_fail@plt+0x6594>
   17c68:	ldr	r0, [r6, #36]	; 0x24
   17c6c:	ldr	r1, [r6, #48]	; 0x30
   17c70:	cmp	r0, r1
   17c74:	movne	r0, r4
   17c78:	movne	r2, r5
   17c7c:	blne	17c94 <__assert_fail@plt+0x6594>
   17c80:	ldrb	r0, [r4, #28]
   17c84:	orr	r0, r0, #8
   17c88:	strb	r0, [r4, #28]
   17c8c:	mov	r0, #0
   17c90:	pop	{r4, r5, r6, sl, fp, pc}
   17c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c98:	add	fp, sp, #28
   17c9c:	sub	sp, sp, #348	; 0x15c
   17ca0:	ldr	r3, [r0]
   17ca4:	mov	r8, r0
   17ca8:	mov	sl, r2
   17cac:	mov	r2, #0
   17cb0:	str	r2, [sp, #40]	; 0x28
   17cb4:	ldr	r0, [r3, #92]	; 0x5c
   17cb8:	cmp	r0, #1
   17cbc:	bne	17ccc <__assert_fail@plt+0x65cc>
   17cc0:	ldrb	r0, [r8, #14]
   17cc4:	ubfx	r0, r0, #6, #1
   17cc8:	str	r0, [sp, #40]	; 0x28
   17ccc:	ldr	r0, [r1, #8]
   17cd0:	cmp	r0, #1
   17cd4:	blt	1877c <__assert_fail@plt+0x707c>
   17cd8:	mvn	r0, #5
   17cdc:	mov	r7, #0
   17ce0:	mov	lr, #1
   17ce4:	mov	r2, #0
   17ce8:	str	r8, [sp, #28]
   17cec:	str	sl, [sp, #68]	; 0x44
   17cf0:	str	r1, [sp, #48]	; 0x30
   17cf4:	str	r3, [sp, #64]	; 0x40
   17cf8:	sub	r0, r0, sl
   17cfc:	str	r0, [sp, #24]
   17d00:	add	r0, sl, #7
   17d04:	str	r0, [sp, #20]
   17d08:	add	r0, sl, #5
   17d0c:	str	r0, [sp, #16]
   17d10:	add	r0, sl, #4
   17d14:	str	r0, [sp, #12]
   17d18:	add	r0, sl, #3
   17d1c:	str	r0, [sp, #8]
   17d20:	add	r0, sp, #72	; 0x48
   17d24:	add	r0, r0, #1
   17d28:	str	r0, [sp, #4]
   17d2c:	b	17d50 <__assert_fail@plt+0x6650>
   17d30:	mov	lr, #1
   17d34:	ldr	r1, [sp, #48]	; 0x30
   17d38:	ldr	r2, [sp, #52]	; 0x34
   17d3c:	ldr	r3, [sp, #64]	; 0x40
   17d40:	ldr	r0, [r1, #8]
   17d44:	add	r2, r2, #1
   17d48:	cmp	r2, r0
   17d4c:	bge	1877c <__assert_fail@plt+0x707c>
   17d50:	ldr	r0, [r1, #12]
   17d54:	str	r2, [sp, #52]	; 0x34
   17d58:	ldr	r6, [r0, r2, lsl #2]
   17d5c:	ldr	r2, [r3]
   17d60:	add	r0, r2, r6, lsl #3
   17d64:	ldrb	r4, [r0, #4]
   17d68:	sub	r0, r4, #1
   17d6c:	cmp	r0, #6
   17d70:	bhi	17d34 <__assert_fail@plt+0x6634>
   17d74:	add	r1, pc, #0
   17d78:	ldr	pc, [r1, r0, lsl #2]
   17d7c:	muleq	r1, r8, sp
   17d80:	andeq	r8, r1, r8, asr r7
   17d84:	andeq	r7, r1, r0, lsr #29
   17d88:	andeq	r7, r1, r4, lsr sp
   17d8c:	andeq	r8, r1, r8, asr r7
   17d90:	andeq	r7, r1, r8, asr pc
   17d94:	andeq	r8, r1, r8, asr r7
   17d98:	ldrb	r4, [r2, r6, lsl #3]
   17d9c:	ldr	r0, [sp, #40]	; 0x28
   17da0:	cmp	r0, #0
   17da4:	strb	lr, [sl, r4]
   17da8:	beq	17dc0 <__assert_fail@plt+0x66c0>
   17dac:	bl	11568 <__ctype_tolower_loc@plt>
   17db0:	ldr	r0, [r0]
   17db4:	mov	lr, #1
   17db8:	ldr	r0, [r0, r4, lsl #2]
   17dbc:	strb	lr, [sl, r0]
   17dc0:	ldrb	r0, [r8, #14]
   17dc4:	tst	r0, #64	; 0x40
   17dc8:	beq	17d34 <__assert_fail@plt+0x6634>
   17dcc:	ldr	r0, [sp, #64]	; 0x40
   17dd0:	ldr	r0, [r0, #92]	; 0x5c
   17dd4:	cmp	r0, #2
   17dd8:	blt	17d34 <__assert_fail@plt+0x6634>
   17ddc:	ldr	ip, [sp, #64]	; 0x40
   17de0:	add	r1, r6, #1
   17de4:	movw	r4, #1
   17de8:	mov	r9, #1
   17dec:	add	r5, sp, #72	; 0x48
   17df0:	movt	r4, #32
   17df4:	ldr	r0, [ip]
   17df8:	ldrb	r0, [r0, r6, lsl #3]
   17dfc:	strb	r0, [sp, #72]	; 0x48
   17e00:	ldr	r0, [ip, #8]
   17e04:	cmp	r1, r0
   17e08:	ldr	r0, [sp, #4]
   17e0c:	bcs	17e50 <__assert_fail@plt+0x6750>
   17e10:	ldr	r0, [sp, #4]
   17e14:	ldr	r1, [ip]
   17e18:	add	r3, r4, #254	; 0xfe
   17e1c:	add	r1, r1, r6, lsl #3
   17e20:	ldr	r2, [r1, #12]
   17e24:	and	r2, r2, r3
   17e28:	cmp	r2, r4
   17e2c:	bne	17e50 <__assert_fail@plt+0x6750>
   17e30:	ldrb	r1, [r1, #8]
   17e34:	add	r3, r6, #2
   17e38:	strb	r1, [r0], #1
   17e3c:	add	r1, r6, #1
   17e40:	ldr	r2, [ip, #8]
   17e44:	mov	r6, r1
   17e48:	cmp	r3, r2
   17e4c:	bcc	17e14 <__assert_fail@plt+0x6714>
   17e50:	sub	r4, r0, r5
   17e54:	sub	r0, fp, #36	; 0x24
   17e58:	mov	r1, r5
   17e5c:	sub	r3, fp, #48	; 0x30
   17e60:	str	r7, [fp, #-44]	; 0xffffffd4
   17e64:	str	r7, [fp, #-48]	; 0xffffffd0
   17e68:	mov	r2, r4
   17e6c:	bl	2bd34 <__assert_fail@plt+0x1a634>
   17e70:	cmp	r0, r4
   17e74:	bne	17d30 <__assert_fail@plt+0x6630>
   17e78:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17e7c:	bl	1146c <towlower@plt>
   17e80:	mov	r1, r0
   17e84:	mov	r0, r5
   17e88:	sub	r2, fp, #48	; 0x30
   17e8c:	bl	113b8 <wcrtomb@plt>
   17e90:	cmn	r0, #1
   17e94:	ldrbne	r0, [sp, #72]	; 0x48
   17e98:	strbne	r9, [sl, r0]
   17e9c:	b	17d30 <__assert_fail@plt+0x6630>
   17ea0:	ldr	r0, [sp, #40]	; 0x28
   17ea4:	cmp	r0, #0
   17ea8:	beq	1813c <__assert_fail@plt+0x6a3c>
   17eac:	ldr	r0, [r2, r6, lsl #3]
   17eb0:	ldr	r1, [sp, #16]
   17eb4:	ldr	r2, [sp, #12]
   17eb8:	ldr	r7, [sp, #8]
   17ebc:	mov	lr, #0
   17ec0:	mov	r3, #4
   17ec4:	str	r6, [sp, #44]	; 0x2c
   17ec8:	ldr	r0, [r0]
   17ecc:	str	r0, [sp, #60]	; 0x3c
   17ed0:	ldr	r0, [sp, #20]
   17ed4:	b	17f00 <__assert_fail@plt+0x6800>
   17ed8:	ldr	r1, [sp, #68]	; 0x44
   17edc:	strb	r2, [r1, r0]
   17ee0:	add	lr, r8, #1
   17ee4:	add	r0, r6, #1
   17ee8:	add	r1, r5, #1
   17eec:	add	r2, r9, #1
   17ef0:	add	r7, sl, #1
   17ef4:	add	r3, r4, #4
   17ef8:	cmp	lr, #32
   17efc:	beq	182e4 <__assert_fail@plt+0x6be4>
   17f00:	mov	r6, r0
   17f04:	ldr	r0, [sp, #60]	; 0x3c
   17f08:	mov	r9, r2
   17f0c:	mov	r2, #1
   17f10:	mov	r8, lr
   17f14:	mov	r4, r3
   17f18:	mov	sl, r7
   17f1c:	mov	r5, r1
   17f20:	tst	r0, r2, lsl lr
   17f24:	beq	17ee0 <__assert_fail@plt+0x67e0>
   17f28:	ldr	r0, [sp, #68]	; 0x44
   17f2c:	strb	r2, [r0, r8]
   17f30:	add	r0, r8, #128	; 0x80
   17f34:	lsr	r0, r0, #7
   17f38:	cmp	r0, #2
   17f3c:	mov	r0, r8
   17f40:	bhi	17ed8 <__assert_fail@plt+0x67d8>
   17f44:	bl	11568 <__ctype_tolower_loc@plt>
   17f48:	ldr	r0, [r0]
   17f4c:	mov	r2, #1
   17f50:	ldr	r0, [r0, r8, lsl #2]
   17f54:	b	17ed8 <__assert_fail@plt+0x67d8>
   17f58:	ldr	r0, [sp, #64]	; 0x40
   17f5c:	ldr	r4, [r2, r6, lsl #3]
   17f60:	ldr	r0, [r0, #92]	; 0x5c
   17f64:	cmp	r0, #2
   17f68:	blt	17fe0 <__assert_fail@plt+0x68e0>
   17f6c:	ldr	r0, [r4, #36]	; 0x24
   17f70:	cmp	r0, #0
   17f74:	bne	17f90 <__assert_fail@plt+0x6890>
   17f78:	ldrb	r0, [r4, #16]
   17f7c:	tst	r0, #1
   17f80:	bne	17f90 <__assert_fail@plt+0x6890>
   17f84:	ldr	r0, [r4, #32]
   17f88:	cmp	r0, #0
   17f8c:	beq	17fe0 <__assert_fail@plt+0x68e0>
   17f90:	add	r4, sp, #72	; 0x48
   17f94:	sub	r5, fp, #48	; 0x30
   17f98:	strb	r7, [fp, #-48]	; 0xffffffd0
   17f9c:	mov	r0, #0
   17fa0:	mov	r1, r5
   17fa4:	mov	r2, #1
   17fa8:	mov	r3, r4
   17fac:	str	r7, [sp, #76]	; 0x4c
   17fb0:	str	r7, [sp, #72]	; 0x48
   17fb4:	bl	2bd34 <__assert_fail@plt+0x1a634>
   17fb8:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   17fbc:	cmn	r0, #2
   17fc0:	mov	lr, #1
   17fc4:	add	r0, r1, #1
   17fc8:	strbeq	lr, [sl, r1]
   17fcc:	uxtb	r1, r0
   17fd0:	strb	r0, [fp, #-48]	; 0xffffffd0
   17fd4:	cmp	r1, r0
   17fd8:	beq	17f9c <__assert_fail@plt+0x689c>
   17fdc:	b	17d34 <__assert_fail@plt+0x6634>
   17fe0:	ldr	r0, [r4, #20]
   17fe4:	cmp	r0, #1
   17fe8:	blt	17d34 <__assert_fail@plt+0x6634>
   17fec:	ldr	r0, [sp, #40]	; 0x28
   17ff0:	mov	r5, #0
   17ff4:	cmp	r0, #0
   17ff8:	bne	18014 <__assert_fail@plt+0x6914>
   17ffc:	b	180bc <__assert_fail@plt+0x69bc>
   18000:	ldr	r0, [r4, #20]
   18004:	add	r5, r5, #1
   18008:	mov	r7, #0
   1800c:	cmp	r5, r0
   18010:	bge	17d34 <__assert_fail@plt+0x6634>
   18014:	str	r7, [fp, #-44]	; 0xffffffd4
   18018:	str	r7, [fp, #-48]	; 0xffffffd0
   1801c:	sub	r9, fp, #48	; 0x30
   18020:	add	r7, sp, #72	; 0x48
   18024:	ldr	r0, [r4]
   18028:	mov	r2, r9
   1802c:	ldr	r1, [r0, r5, lsl #2]
   18030:	mov	r0, r7
   18034:	bl	113b8 <wcrtomb@plt>
   18038:	mov	lr, #1
   1803c:	cmn	r0, #1
   18040:	beq	18060 <__assert_fail@plt+0x6960>
   18044:	ldrb	r6, [sp, #72]	; 0x48
   18048:	strb	lr, [sl, r6]
   1804c:	bl	11568 <__ctype_tolower_loc@plt>
   18050:	ldr	r0, [r0]
   18054:	mov	lr, #1
   18058:	ldr	r0, [r0, r6, lsl #2]
   1805c:	strb	lr, [sl, r0]
   18060:	ldrb	r0, [r8, #14]
   18064:	tst	r0, #64	; 0x40
   18068:	beq	18000 <__assert_fail@plt+0x6900>
   1806c:	ldr	r0, [sp, #64]	; 0x40
   18070:	ldr	r0, [r0, #92]	; 0x5c
   18074:	cmp	r0, #2
   18078:	blt	18000 <__assert_fail@plt+0x6900>
   1807c:	ldr	r0, [r4]
   18080:	ldr	r0, [r0, r5, lsl #2]
   18084:	bl	1146c <towlower@plt>
   18088:	mov	r1, r0
   1808c:	mov	r0, r7
   18090:	mov	r2, r9
   18094:	bl	113b8 <wcrtomb@plt>
   18098:	cmn	r0, #1
   1809c:	mov	lr, #1
   180a0:	ldrbne	r0, [sp, #72]	; 0x48
   180a4:	strbne	lr, [sl, r0]
   180a8:	b	18000 <__assert_fail@plt+0x6900>
   180ac:	ldr	r0, [r4, #20]
   180b0:	add	r5, r5, #1
   180b4:	cmp	r5, r0
   180b8:	bge	17d34 <__assert_fail@plt+0x6634>
   180bc:	str	r7, [fp, #-44]	; 0xffffffd4
   180c0:	str	r7, [fp, #-48]	; 0xffffffd0
   180c4:	sub	r9, fp, #48	; 0x30
   180c8:	add	r6, sp, #72	; 0x48
   180cc:	ldr	r0, [r4]
   180d0:	mov	r2, r9
   180d4:	ldr	r1, [r0, r5, lsl #2]
   180d8:	mov	r0, r6
   180dc:	bl	113b8 <wcrtomb@plt>
   180e0:	cmn	r0, #1
   180e4:	mov	lr, #1
   180e8:	ldrbne	r0, [sp, #72]	; 0x48
   180ec:	strbne	lr, [sl, r0]
   180f0:	ldrb	r0, [r8, #14]
   180f4:	tst	r0, #64	; 0x40
   180f8:	beq	180ac <__assert_fail@plt+0x69ac>
   180fc:	ldr	r0, [sp, #64]	; 0x40
   18100:	ldr	r0, [r0, #92]	; 0x5c
   18104:	cmp	r0, #2
   18108:	blt	180ac <__assert_fail@plt+0x69ac>
   1810c:	ldr	r0, [r4]
   18110:	ldr	r0, [r0, r5, lsl #2]
   18114:	bl	1146c <towlower@plt>
   18118:	mov	r1, r0
   1811c:	mov	r0, r6
   18120:	mov	r2, r9
   18124:	bl	113b8 <wcrtomb@plt>
   18128:	cmn	r0, #1
   1812c:	mov	lr, #1
   18130:	ldrbne	r0, [sp, #72]	; 0x48
   18134:	strbne	lr, [sl, r0]
   18138:	b	180ac <__assert_fail@plt+0x69ac>
   1813c:	mov	r0, #0
   18140:	mov	r1, #31
   18144:	ldr	r2, [r2, r6, lsl #3]
   18148:	ldr	r2, [r2, r0]
   1814c:	tst	r2, #1
   18150:	addne	r3, sl, r1
   18154:	strbne	lr, [r3, #-31]	; 0xffffffe1
   18158:	tst	r2, #2
   1815c:	addne	r3, sl, r0, lsl #3
   18160:	strbne	lr, [r3, #1]
   18164:	tst	r2, #4
   18168:	addne	r3, sl, r0, lsl #3
   1816c:	strbne	lr, [r3, #2]
   18170:	tst	r2, #8
   18174:	addne	r3, sl, r0, lsl #3
   18178:	strbne	lr, [r3, #3]
   1817c:	tst	r2, #16
   18180:	addne	r3, sl, r0, lsl #3
   18184:	strbne	lr, [r3, #4]
   18188:	tst	r2, #32
   1818c:	addne	r3, sl, r0, lsl #3
   18190:	strbne	lr, [r3, #5]
   18194:	tst	r2, #64	; 0x40
   18198:	addne	r3, sl, r0, lsl #3
   1819c:	strbne	lr, [r3, #6]
   181a0:	tst	r2, #128	; 0x80
   181a4:	addne	r3, sl, r0, lsl #3
   181a8:	strbne	lr, [r3, #7]
   181ac:	tst	r2, #256	; 0x100
   181b0:	addne	r3, sl, r0, lsl #3
   181b4:	strbne	lr, [r3, #8]
   181b8:	tst	r2, #512	; 0x200
   181bc:	addne	r3, sl, r0, lsl #3
   181c0:	strbne	lr, [r3, #9]
   181c4:	tst	r2, #1024	; 0x400
   181c8:	addne	r3, sl, r0, lsl #3
   181cc:	strbne	lr, [r3, #10]
   181d0:	tst	r2, #2048	; 0x800
   181d4:	addne	r3, sl, r0, lsl #3
   181d8:	strbne	lr, [r3, #11]
   181dc:	tst	r2, #4096	; 0x1000
   181e0:	addne	r3, sl, r0, lsl #3
   181e4:	strbne	lr, [r3, #12]
   181e8:	tst	r2, #8192	; 0x2000
   181ec:	addne	r3, sl, r0, lsl #3
   181f0:	strbne	lr, [r3, #13]
   181f4:	tst	r2, #16384	; 0x4000
   181f8:	addne	r3, sl, r0, lsl #3
   181fc:	strbne	lr, [r3, #14]
   18200:	tst	r2, #32768	; 0x8000
   18204:	addne	r3, sl, r0, lsl #3
   18208:	strbne	lr, [r3, #15]
   1820c:	tst	r2, #65536	; 0x10000
   18210:	addne	r3, sl, r0, lsl #3
   18214:	strbne	lr, [r3, #16]
   18218:	tst	r2, #131072	; 0x20000
   1821c:	addne	r3, sl, r0, lsl #3
   18220:	strbne	lr, [r3, #17]
   18224:	tst	r2, #262144	; 0x40000
   18228:	addne	r3, sl, r0, lsl #3
   1822c:	strbne	lr, [r3, #18]
   18230:	tst	r2, #524288	; 0x80000
   18234:	addne	r3, sl, r0, lsl #3
   18238:	strbne	lr, [r3, #19]
   1823c:	tst	r2, #1048576	; 0x100000
   18240:	addne	r3, sl, r0, lsl #3
   18244:	strbne	lr, [r3, #20]
   18248:	tst	r2, #2097152	; 0x200000
   1824c:	addne	r3, sl, r0, lsl #3
   18250:	strbne	lr, [r3, #21]
   18254:	tst	r2, #4194304	; 0x400000
   18258:	addne	r3, sl, r0, lsl #3
   1825c:	strbne	lr, [r3, #22]
   18260:	tst	r2, #8388608	; 0x800000
   18264:	addne	r3, sl, r0, lsl #3
   18268:	strbne	lr, [r3, #23]
   1826c:	tst	r2, #16777216	; 0x1000000
   18270:	addne	r3, sl, r0, lsl #3
   18274:	strbne	lr, [r3, #24]
   18278:	tst	r2, #33554432	; 0x2000000
   1827c:	addne	r3, sl, r0, lsl #3
   18280:	strbne	lr, [r3, #25]
   18284:	tst	r2, #67108864	; 0x4000000
   18288:	addne	r3, sl, r0, lsl #3
   1828c:	strbne	lr, [r3, #26]
   18290:	tst	r2, #134217728	; 0x8000000
   18294:	addne	r3, sl, r0, lsl #3
   18298:	strbne	lr, [r3, #27]
   1829c:	tst	r2, #268435456	; 0x10000000
   182a0:	addne	r3, sl, r0, lsl #3
   182a4:	strbne	lr, [r3, #28]
   182a8:	tst	r2, #536870912	; 0x20000000
   182ac:	addne	r3, sl, r0, lsl #3
   182b0:	strbne	lr, [r3, #29]
   182b4:	tst	r2, #1073741824	; 0x40000000
   182b8:	addne	r3, sl, r0, lsl #3
   182bc:	strbne	lr, [r3, #30]
   182c0:	cmn	r2, #1
   182c4:	strble	lr, [sl, r1]
   182c8:	cmp	r0, #28
   182cc:	beq	17d34 <__assert_fail@plt+0x6634>
   182d0:	ldr	r2, [sp, #64]	; 0x40
   182d4:	add	r1, r1, #32
   182d8:	add	r0, r0, #4
   182dc:	ldr	r2, [r2]
   182e0:	b	18144 <__assert_fail@plt+0x6a44>
   182e4:	ldr	r0, [sp, #68]	; 0x44
   182e8:	ldr	r1, [sp, #44]	; 0x2c
   182ec:	mov	ip, r5
   182f0:	mov	r5, r8
   182f4:	str	r8, [sp, #36]	; 0x24
   182f8:	add	r3, r0, lr
   182fc:	ldr	r0, [sp, #64]	; 0x40
   18300:	ldr	r0, [r0]
   18304:	ldr	r0, [r0, r1, lsl #3]
   18308:	mov	r1, ip
   1830c:	ldr	r0, [r0, #4]
   18310:	str	r0, [sp, #60]	; 0x3c
   18314:	mov	r0, #0
   18318:	b	18380 <__assert_fail@plt+0x6c80>
   1831c:	mov	r9, r7
   18320:	str	sl, [sp, #56]	; 0x38
   18324:	mov	r6, ip
   18328:	mov	sl, lr
   1832c:	mov	r7, r3
   18330:	bl	11568 <__ctype_tolower_loc@plt>
   18334:	ldr	r0, [r0]
   18338:	mov	lr, sl
   1833c:	ldr	sl, [sp, #56]	; 0x38
   18340:	ldr	r1, [sp, #68]	; 0x44
   18344:	mov	r3, r7
   18348:	mov	r7, r9
   1834c:	mov	ip, r6
   18350:	mov	r2, #1
   18354:	ldr	r0, [r0, r4]
   18358:	strb	r2, [r1, r0]
   1835c:	add	r0, r8, #1
   18360:	mov	r2, sl
   18364:	add	r6, ip, #1
   18368:	add	r1, r7, #1
   1836c:	add	r9, r5, #1
   18370:	add	sl, sl, #1
   18374:	add	r4, r4, #4
   18378:	cmp	r0, #32
   1837c:	beq	183c8 <__assert_fail@plt+0x6cc8>
   18380:	mov	r7, r1
   18384:	ldr	r1, [sp, #60]	; 0x3c
   18388:	mov	r8, r0
   1838c:	mov	r0, #1
   18390:	mov	r5, r9
   18394:	mov	ip, r6
   18398:	tst	r1, r0, lsl r8
   1839c:	beq	1835c <__assert_fail@plt+0x6c5c>
   183a0:	strb	r0, [r3, r8]
   183a4:	add	r0, lr, r8
   183a8:	add	r0, r0, #128	; 0x80
   183ac:	lsr	r0, r0, #7
   183b0:	cmp	r0, #2
   183b4:	bls	1831c <__assert_fail@plt+0x6c1c>
   183b8:	ldr	r1, [sp, #68]	; 0x44
   183bc:	add	r0, lr, r8
   183c0:	mov	r2, #1
   183c4:	b	18358 <__assert_fail@plt+0x6c58>
   183c8:	add	r9, lr, r0
   183cc:	ldr	r0, [sp, #64]	; 0x40
   183d0:	ldr	r1, [sp, #44]	; 0x2c
   183d4:	mov	lr, #1
   183d8:	mov	r6, r2
   183dc:	str	r8, [sp, #60]	; 0x3c
   183e0:	ldr	r0, [r0]
   183e4:	ldr	r0, [r0, r1, lsl #3]
   183e8:	ldr	sl, [r0, #8]
   183ec:	mov	r0, #0
   183f0:	b	1841c <__assert_fail@plt+0x6d1c>
   183f4:	ldr	r7, [sp, #68]	; 0x44
   183f8:	strb	lr, [r7, r0]
   183fc:	add	r0, r1, #1
   18400:	add	ip, r2, #1
   18404:	add	r7, r3, #1
   18408:	add	r5, r4, #1
   1840c:	add	r6, r8, #1
   18410:	add	r9, r9, #1
   18414:	cmp	r0, #32
   18418:	beq	18488 <__assert_fail@plt+0x6d88>
   1841c:	tst	sl, lr, lsl r0
   18420:	mov	r1, r0
   18424:	mov	r8, r6
   18428:	mov	r4, r5
   1842c:	mov	r3, r7
   18430:	mov	r2, ip
   18434:	beq	183fc <__assert_fail@plt+0x6cfc>
   18438:	ldr	r0, [sp, #68]	; 0x44
   1843c:	strb	lr, [r0, r9]
   18440:	add	r0, r9, #128	; 0x80
   18444:	lsr	r0, r0, #7
   18448:	cmp	r0, #2
   1844c:	mov	r0, r9
   18450:	bhi	183f4 <__assert_fail@plt+0x6cf4>
   18454:	mov	r6, sl
   18458:	mov	r7, r1
   1845c:	mov	r5, r2
   18460:	mov	sl, r3
   18464:	bl	11568 <__ctype_tolower_loc@plt>
   18468:	ldr	r0, [r0]
   1846c:	mov	r3, sl
   18470:	mov	sl, r6
   18474:	mov	r2, r5
   18478:	mov	r1, r7
   1847c:	mov	lr, #1
   18480:	ldr	r0, [r0, r9, lsl #2]
   18484:	b	183f4 <__assert_fail@plt+0x6cf4>
   18488:	ldr	r0, [sp, #64]	; 0x40
   1848c:	str	r1, [sp, #56]	; 0x38
   18490:	ldr	r1, [sp, #44]	; 0x2c
   18494:	ldr	r0, [r0]
   18498:	ldr	r0, [r0, r1, lsl #3]
   1849c:	ldr	r5, [r0, #12]
   184a0:	mov	r0, #0
   184a4:	b	184d4 <__assert_fail@plt+0x6dd4>
   184a8:	ldr	r1, [sp, #68]	; 0x44
   184ac:	strb	lr, [r1, r0]
   184b0:	mov	r1, r4
   184b4:	add	r0, r1, #1
   184b8:	add	r2, sl, #1
   184bc:	add	r3, r7, #1
   184c0:	add	r4, r6, #1
   184c4:	add	r8, r8, #1
   184c8:	add	r9, r9, #1
   184cc:	cmp	r0, #32
   184d0:	beq	1851c <__assert_fail@plt+0x6e1c>
   184d4:	tst	r5, lr, lsl r0
   184d8:	mov	r1, r0
   184dc:	mov	r6, r4
   184e0:	mov	r7, r3
   184e4:	mov	sl, r2
   184e8:	beq	184b4 <__assert_fail@plt+0x6db4>
   184ec:	add	r0, r9, #128	; 0x80
   184f0:	mov	r4, r1
   184f4:	strb	lr, [r8]
   184f8:	lsr	r0, r0, #7
   184fc:	cmp	r0, #2
   18500:	mov	r0, r9
   18504:	bhi	184a8 <__assert_fail@plt+0x6da8>
   18508:	bl	11568 <__ctype_tolower_loc@plt>
   1850c:	ldr	r0, [r0]
   18510:	mov	lr, #1
   18514:	ldr	r0, [r0, r9, lsl #2]
   18518:	b	184a8 <__assert_fail@plt+0x6da8>
   1851c:	ldr	r0, [sp, #64]	; 0x40
   18520:	str	r1, [sp, #32]
   18524:	ldr	r1, [sp, #44]	; 0x2c
   18528:	ldr	r0, [r0]
   1852c:	ldr	r0, [r0, r1, lsl #3]
   18530:	ldr	r2, [r0, #16]
   18534:	mov	r0, #0
   18538:	b	18560 <__assert_fail@plt+0x6e60>
   1853c:	ldr	r1, [sp, #68]	; 0x44
   18540:	strb	lr, [r1, r0]
   18544:	add	r0, r8, #1
   18548:	add	sl, r5, #1
   1854c:	add	r7, r4, #1
   18550:	add	r6, r6, #1
   18554:	add	r9, r9, #1
   18558:	cmp	r0, #32
   1855c:	beq	185a8 <__assert_fail@plt+0x6ea8>
   18560:	tst	r2, lr, lsl r0
   18564:	mov	r8, r0
   18568:	mov	r4, r7
   1856c:	mov	r5, sl
   18570:	beq	18544 <__assert_fail@plt+0x6e44>
   18574:	add	r0, r9, #128	; 0x80
   18578:	strb	lr, [r6]
   1857c:	lsr	r0, r0, #7
   18580:	cmp	r0, #2
   18584:	mov	r0, r9
   18588:	bhi	1853c <__assert_fail@plt+0x6e3c>
   1858c:	mov	r7, r2
   18590:	bl	11568 <__ctype_tolower_loc@plt>
   18594:	ldr	r0, [r0]
   18598:	mov	r2, r7
   1859c:	mov	lr, #1
   185a0:	ldr	r0, [r0, r9, lsl #2]
   185a4:	b	1853c <__assert_fail@plt+0x6e3c>
   185a8:	ldr	r0, [sp, #64]	; 0x40
   185ac:	ldr	r1, [sp, #44]	; 0x2c
   185b0:	ldr	r0, [r0]
   185b4:	ldr	r0, [r0, r1, lsl #3]
   185b8:	ldr	sl, [r0, #20]
   185bc:	mov	r0, #0
   185c0:	tst	sl, lr, lsl r0
   185c4:	mov	r7, r0
   185c8:	mov	r6, r5
   185cc:	bne	18604 <__assert_fail@plt+0x6f04>
   185d0:	b	185dc <__assert_fail@plt+0x6edc>
   185d4:	ldr	r1, [sp, #68]	; 0x44
   185d8:	strb	lr, [r1, r0]
   185dc:	add	r0, r7, #1
   185e0:	add	r5, r6, #1
   185e4:	add	r4, r4, #1
   185e8:	add	r9, r9, #1
   185ec:	cmp	r0, #32
   185f0:	beq	18630 <__assert_fail@plt+0x6f30>
   185f4:	tst	sl, lr, lsl r0
   185f8:	mov	r7, r0
   185fc:	mov	r6, r5
   18600:	beq	185dc <__assert_fail@plt+0x6edc>
   18604:	add	r0, r9, #128	; 0x80
   18608:	strb	lr, [r4]
   1860c:	lsr	r0, r0, #7
   18610:	cmp	r0, #2
   18614:	mov	r0, r9
   18618:	bhi	185d4 <__assert_fail@plt+0x6ed4>
   1861c:	bl	11568 <__ctype_tolower_loc@plt>
   18620:	ldr	r0, [r0]
   18624:	mov	lr, #1
   18628:	ldr	r0, [r0, r9, lsl #2]
   1862c:	b	185d4 <__assert_fail@plt+0x6ed4>
   18630:	ldr	r0, [sp, #24]
   18634:	ldr	r1, [sp, #36]	; 0x24
   18638:	ldr	sl, [sp, #68]	; 0x44
   1863c:	sub	r0, r0, r1
   18640:	ldr	r1, [sp, #60]	; 0x3c
   18644:	sub	r0, r0, r1
   18648:	ldr	r1, [sp, #56]	; 0x38
   1864c:	sub	r0, r0, r1
   18650:	ldr	r1, [sp, #32]
   18654:	sub	r0, r0, r1
   18658:	ldr	r1, [sp, #44]	; 0x2c
   1865c:	sub	r0, r0, r8
   18660:	sub	r5, r0, r7
   18664:	ldr	r0, [sp, #64]	; 0x40
   18668:	mov	r7, #0
   1866c:	ldr	r0, [r0]
   18670:	ldr	r0, [r0, r1, lsl #3]
   18674:	ldr	r8, [r0, #24]
   18678:	tst	r8, lr, lsl r7
   1867c:	mov	r4, r6
   18680:	bne	186b0 <__assert_fail@plt+0x6fb0>
   18684:	b	1868c <__assert_fail@plt+0x6f8c>
   18688:	strb	lr, [sl, r0]
   1868c:	add	r7, r7, #1
   18690:	add	r6, r4, #1
   18694:	sub	r5, r5, #1
   18698:	add	r9, r9, #1
   1869c:	cmp	r7, #32
   186a0:	beq	186e0 <__assert_fail@plt+0x6fe0>
   186a4:	tst	r8, lr, lsl r7
   186a8:	mov	r4, r6
   186ac:	beq	1868c <__assert_fail@plt+0x6f8c>
   186b0:	mov	r0, #0
   186b4:	strb	lr, [r0, -r5]
   186b8:	add	r0, r9, #128	; 0x80
   186bc:	lsr	r0, r0, #7
   186c0:	cmp	r0, #2
   186c4:	mov	r0, r9
   186c8:	bhi	18688 <__assert_fail@plt+0x6f88>
   186cc:	bl	11568 <__ctype_tolower_loc@plt>
   186d0:	ldr	r0, [r0]
   186d4:	mov	lr, #1
   186d8:	ldr	r0, [r0, r9, lsl #2]
   186dc:	b	18688 <__assert_fail@plt+0x6f88>
   186e0:	ldr	r0, [sp, #64]	; 0x40
   186e4:	ldr	r1, [sp, #44]	; 0x2c
   186e8:	ldr	r8, [sp, #28]
   186ec:	mov	r6, #0
   186f0:	mov	r7, #0
   186f4:	ldr	r0, [r0]
   186f8:	ldr	r0, [r0, r1, lsl #3]
   186fc:	ldr	r5, [r0, #28]
   18700:	tst	r5, lr, lsl r6
   18704:	bne	1872c <__assert_fail@plt+0x702c>
   18708:	b	18710 <__assert_fail@plt+0x7010>
   1870c:	strb	lr, [sl, r0]
   18710:	add	r6, r6, #1
   18714:	add	r4, r4, #1
   18718:	add	r9, r9, #1
   1871c:	cmp	r6, #32
   18720:	beq	17d34 <__assert_fail@plt+0x6634>
   18724:	tst	r5, lr, lsl r6
   18728:	beq	18710 <__assert_fail@plt+0x7010>
   1872c:	add	r0, r9, #128	; 0x80
   18730:	strb	lr, [r4]
   18734:	lsr	r0, r0, #7
   18738:	cmp	r0, #2
   1873c:	mov	r0, r9
   18740:	bhi	1870c <__assert_fail@plt+0x700c>
   18744:	bl	11568 <__ctype_tolower_loc@plt>
   18748:	ldr	r0, [r0]
   1874c:	mov	lr, #1
   18750:	ldr	r0, [r0, r9, lsl #2]
   18754:	b	1870c <__assert_fail@plt+0x700c>
   18758:	mov	r0, sl
   1875c:	mov	r1, #1
   18760:	mov	r2, #256	; 0x100
   18764:	bl	11610 <memset@plt>
   18768:	cmp	r4, #2
   1876c:	bne	1877c <__assert_fail@plt+0x707c>
   18770:	ldrb	r0, [r8, #28]
   18774:	orr	r0, r0, #1
   18778:	strb	r0, [r8, #28]
   1877c:	sub	sp, fp, #28
   18780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18784:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18788:	add	fp, sp, #24
   1878c:	mov	r4, r0
   18790:	mov	r0, #0
   18794:	mov	r6, r2
   18798:	mov	r5, r1
   1879c:	str	r0, [r4]
   187a0:	str	r0, [r4, #4]
   187a4:	str	r0, [r4, #8]
   187a8:	mov	r0, #256	; 0x100
   187ac:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   187b0:	cmp	r0, #0
   187b4:	str	r0, [r4, #16]
   187b8:	beq	188e8 <__assert_fail@plt+0x71e8>
   187bc:	movw	r0, #45820	; 0xb2fc
   187c0:	tst	r6, #1
   187c4:	and	r1, r6, #2
   187c8:	movt	r0, #3
   187cc:	movweq	r0, #710	; 0x2c6
   187d0:	movteq	r0, #257	; 0x101
   187d4:	tst	r6, #4
   187d8:	orr	r7, r0, r1, lsl #21
   187dc:	bne	187f0 <__assert_fail@plt+0x70f0>
   187e0:	ldrb	r0, [r4, #28]
   187e4:	and	r0, r0, #127	; 0x7f
   187e8:	strb	r0, [r4, #28]
   187ec:	b	18810 <__assert_fail@plt+0x7110>
   187f0:	ldrb	r0, [r4, #28]
   187f4:	mvn	r1, #127	; 0x7f
   187f8:	orr	r0, r0, r1
   187fc:	movw	r1, #45758	; 0xb2be
   18800:	movt	r1, #323	; 0x143
   18804:	strb	r0, [r4, #28]
   18808:	and	r1, r7, r1
   1880c:	orr	r7, r1, #256	; 0x100
   18810:	and	r1, r6, #8
   18814:	and	r0, r0, #239	; 0xef
   18818:	mov	r8, #0
   1881c:	orr	r0, r0, r1, lsl #1
   18820:	str	r8, [r4, #20]
   18824:	strb	r0, [r4, #28]
   18828:	mov	r0, r5
   1882c:	bl	115bc <strlen@plt>
   18830:	mov	r2, r0
   18834:	mov	r0, r4
   18838:	mov	r1, r5
   1883c:	mov	r3, r7
   18840:	bl	163c0 <__assert_fail@plt+0x4cc0>
   18844:	cmp	r0, #16
   18848:	mov	r5, r0
   1884c:	movweq	r5, #8
   18850:	cmp	r5, #0
   18854:	bne	188f4 <__assert_fail@plt+0x71f4>
   18858:	ldr	r5, [r4, #16]
   1885c:	ldr	r6, [r4]
   18860:	mov	r1, #0
   18864:	mov	r2, #256	; 0x100
   18868:	mov	r0, r5
   1886c:	bl	11610 <memset@plt>
   18870:	ldr	r1, [r6, #36]	; 0x24
   18874:	mov	r0, r4
   18878:	mov	r2, r5
   1887c:	bl	17c94 <__assert_fail@plt+0x6594>
   18880:	ldr	r0, [r6, #36]	; 0x24
   18884:	ldr	r1, [r6, #40]	; 0x28
   18888:	cmp	r0, r1
   1888c:	beq	188a0 <__assert_fail@plt+0x71a0>
   18890:	mov	r0, r4
   18894:	mov	r2, r5
   18898:	bl	17c94 <__assert_fail@plt+0x6594>
   1889c:	ldr	r0, [r6, #36]	; 0x24
   188a0:	ldr	r1, [r6, #44]	; 0x2c
   188a4:	cmp	r0, r1
   188a8:	beq	188bc <__assert_fail@plt+0x71bc>
   188ac:	mov	r0, r4
   188b0:	mov	r2, r5
   188b4:	bl	17c94 <__assert_fail@plt+0x6594>
   188b8:	ldr	r0, [r6, #36]	; 0x24
   188bc:	ldr	r1, [r6, #48]	; 0x30
   188c0:	cmp	r0, r1
   188c4:	movne	r0, r4
   188c8:	movne	r2, r5
   188cc:	blne	17c94 <__assert_fail@plt+0x6594>
   188d0:	ldrb	r0, [r4, #28]
   188d4:	mov	r5, #0
   188d8:	orr	r0, r0, #8
   188dc:	strb	r0, [r4, #28]
   188e0:	mov	r0, r5
   188e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   188e8:	mov	r5, #12
   188ec:	mov	r0, r5
   188f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   188f4:	ldr	r0, [r4, #16]
   188f8:	bl	13ddc <__assert_fail@plt+0x26dc>
   188fc:	mov	r0, r5
   18900:	str	r8, [r4, #16]
   18904:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18908:	push	{r4, r5, r6, r7, fp, lr}
   1890c:	add	fp, sp, #16
   18910:	cmp	r0, #17
   18914:	bcs	18988 <__assert_fail@plt+0x7288>
   18918:	movw	r1, #52656	; 0xcdb0
   1891c:	mov	r4, r2
   18920:	mov	r2, #5
   18924:	mov	r5, r3
   18928:	movt	r1, #2
   1892c:	ldr	r0, [r1, r0, lsl #2]
   18930:	movw	r1, #52272	; 0xcc30
   18934:	movt	r1, #2
   18938:	add	r1, r1, r0
   1893c:	mov	r0, #0
   18940:	bl	11484 <dcgettext@plt>
   18944:	mov	r6, r0
   18948:	bl	115bc <strlen@plt>
   1894c:	add	r7, r0, #1
   18950:	cmp	r5, #0
   18954:	beq	18970 <__assert_fail@plt+0x7270>
   18958:	cmp	r7, r5
   1895c:	mov	r2, r7
   18960:	bhi	18978 <__assert_fail@plt+0x7278>
   18964:	mov	r0, r4
   18968:	mov	r1, r6
   1896c:	bl	11448 <memcpy@plt>
   18970:	mov	r0, r7
   18974:	pop	{r4, r5, r6, r7, fp, pc}
   18978:	sub	r2, r5, #1
   1897c:	mov	r0, #0
   18980:	strb	r0, [r4, r2]
   18984:	b	18964 <__assert_fail@plt+0x7264>
   18988:	bl	116e8 <abort@plt>
   1898c:	push	{r4, r5, fp, lr}
   18990:	add	fp, sp, #8
   18994:	ldr	r5, [r0]
   18998:	mov	r4, r0
   1899c:	cmp	r5, #0
   189a0:	beq	189cc <__assert_fail@plt+0x72cc>
   189a4:	movw	r0, #0
   189a8:	movw	r1, #0
   189ac:	movt	r0, #0
   189b0:	movt	r1, #0
   189b4:	orrs	r0, r1, r0
   189b8:	beq	189c4 <__assert_fail@plt+0x72c4>
   189bc:	add	r0, r5, #136	; 0x88
   189c0:	bl	113f4 <pthread_mutex_destroy@plt>
   189c4:	mov	r0, r5
   189c8:	bl	189f4 <__assert_fail@plt+0x72f4>
   189cc:	mov	r5, #0
   189d0:	str	r5, [r4]
   189d4:	str	r5, [r4, #4]
   189d8:	ldr	r0, [r4, #16]
   189dc:	bl	13ddc <__assert_fail@plt+0x26dc>
   189e0:	str	r5, [r4, #16]
   189e4:	ldr	r0, [r4, #20]
   189e8:	bl	13ddc <__assert_fail@plt+0x26dc>
   189ec:	str	r5, [r4, #20]
   189f0:	pop	{r4, r5, fp, pc}
   189f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   189f8:	add	fp, sp, #24
   189fc:	mov	r8, r0
   18a00:	ldr	r0, [r0]
   18a04:	cmp	r0, #0
   18a08:	beq	18a8c <__assert_fail@plt+0x738c>
   18a0c:	ldr	r1, [r8, #8]
   18a10:	cmp	r1, #0
   18a14:	beq	18a8c <__assert_fail@plt+0x738c>
   18a18:	movw	r7, #255	; 0xff
   18a1c:	mov	r6, #0
   18a20:	movt	r7, #4
   18a24:	add	r1, r0, r6, lsl #3
   18a28:	ldr	r1, [r1, #4]
   18a2c:	and	r1, r1, r7
   18a30:	cmp	r1, #3
   18a34:	beq	18a68 <__assert_fail@plt+0x7368>
   18a38:	cmp	r1, #6
   18a3c:	bne	18a74 <__assert_fail@plt+0x7374>
   18a40:	ldr	r5, [r0, r6, lsl #3]
   18a44:	ldr	r0, [r5]
   18a48:	bl	13ddc <__assert_fail@plt+0x26dc>
   18a4c:	ldr	r0, [r5, #4]
   18a50:	bl	13ddc <__assert_fail@plt+0x26dc>
   18a54:	ldr	r0, [r5, #8]
   18a58:	bl	13ddc <__assert_fail@plt+0x26dc>
   18a5c:	ldr	r0, [r5, #12]
   18a60:	bl	13ddc <__assert_fail@plt+0x26dc>
   18a64:	b	18a6c <__assert_fail@plt+0x736c>
   18a68:	ldr	r5, [r0, r6, lsl #3]
   18a6c:	mov	r0, r5
   18a70:	bl	13ddc <__assert_fail@plt+0x26dc>
   18a74:	ldr	r0, [r8, #8]
   18a78:	add	r6, r6, #1
   18a7c:	cmp	r6, r0
   18a80:	bcs	18a8c <__assert_fail@plt+0x738c>
   18a84:	ldr	r0, [r8]
   18a88:	b	18a24 <__assert_fail@plt+0x7324>
   18a8c:	ldr	r0, [r8, #12]
   18a90:	bl	13ddc <__assert_fail@plt+0x26dc>
   18a94:	ldr	r0, [r8, #8]
   18a98:	cmp	r0, #0
   18a9c:	beq	18b0c <__assert_fail@plt+0x740c>
   18aa0:	mov	r5, #0
   18aa4:	mov	r6, #8
   18aa8:	ldr	r0, [r8, #24]
   18aac:	cmp	r0, #0
   18ab0:	bne	18ad8 <__assert_fail@plt+0x73d8>
   18ab4:	b	18ae0 <__assert_fail@plt+0x73e0>
   18ab8:	ldr	r0, [r8, #8]
   18abc:	add	r5, r5, #1
   18ac0:	add	r6, r6, #12
   18ac4:	cmp	r5, r0
   18ac8:	bcs	18b0c <__assert_fail@plt+0x740c>
   18acc:	ldr	r0, [r8, #24]
   18ad0:	cmp	r0, #0
   18ad4:	beq	18ae0 <__assert_fail@plt+0x73e0>
   18ad8:	ldr	r0, [r0, r6]
   18adc:	bl	13ddc <__assert_fail@plt+0x26dc>
   18ae0:	ldr	r0, [r8, #28]
   18ae4:	cmp	r0, #0
   18ae8:	beq	18af4 <__assert_fail@plt+0x73f4>
   18aec:	ldr	r0, [r0, r6]
   18af0:	bl	13ddc <__assert_fail@plt+0x26dc>
   18af4:	ldr	r0, [r8, #20]
   18af8:	cmp	r0, #0
   18afc:	beq	18ab8 <__assert_fail@plt+0x73b8>
   18b00:	ldr	r0, [r0, r6]
   18b04:	bl	13ddc <__assert_fail@plt+0x26dc>
   18b08:	b	18ab8 <__assert_fail@plt+0x73b8>
   18b0c:	ldr	r0, [r8, #20]
   18b10:	bl	13ddc <__assert_fail@plt+0x26dc>
   18b14:	ldr	r0, [r8, #24]
   18b18:	bl	13ddc <__assert_fail@plt+0x26dc>
   18b1c:	ldr	r0, [r8, #28]
   18b20:	bl	13ddc <__assert_fail@plt+0x26dc>
   18b24:	ldr	r0, [r8]
   18b28:	bl	13ddc <__assert_fail@plt+0x26dc>
   18b2c:	ldr	r5, [r8, #32]
   18b30:	cmp	r5, #0
   18b34:	beq	18b94 <__assert_fail@plt+0x7494>
   18b38:	mov	r6, #0
   18b3c:	add	r0, r6, r6, lsl #1
   18b40:	ldr	r0, [r5, r0, lsl #2]!
   18b44:	add	r7, r5, #8
   18b48:	cmp	r0, #1
   18b4c:	blt	18b70 <__assert_fail@plt+0x7470>
   18b50:	mov	r4, #0
   18b54:	ldr	r0, [r7]
   18b58:	ldr	r0, [r0, r4, lsl #2]
   18b5c:	bl	1bdc0 <__assert_fail@plt+0xa6c0>
   18b60:	ldr	r0, [r5]
   18b64:	add	r4, r4, #1
   18b68:	cmp	r4, r0
   18b6c:	blt	18b54 <__assert_fail@plt+0x7454>
   18b70:	ldr	r0, [r7]
   18b74:	bl	13ddc <__assert_fail@plt+0x26dc>
   18b78:	ldr	r0, [r8, #68]	; 0x44
   18b7c:	cmp	r6, r0
   18b80:	bcs	18b90 <__assert_fail@plt+0x7490>
   18b84:	ldr	r5, [r8, #32]
   18b88:	add	r6, r6, #1
   18b8c:	b	18b3c <__assert_fail@plt+0x743c>
   18b90:	ldr	r5, [r8, #32]
   18b94:	mov	r0, r5
   18b98:	bl	13ddc <__assert_fail@plt+0x26dc>
   18b9c:	ldr	r0, [r8, #60]	; 0x3c
   18ba0:	movw	r1, #52724	; 0xcdf4
   18ba4:	movt	r1, #2
   18ba8:	cmp	r0, r1
   18bac:	beq	18bb4 <__assert_fail@plt+0x74b4>
   18bb0:	bl	13ddc <__assert_fail@plt+0x26dc>
   18bb4:	ldr	r0, [r8, #132]	; 0x84
   18bb8:	bl	13ddc <__assert_fail@plt+0x26dc>
   18bbc:	mov	r0, r8
   18bc0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18bc4:	b	13ddc <__assert_fail@plt+0x26dc>
   18bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bcc:	add	fp, sp, #28
   18bd0:	sub	sp, sp, #28
   18bd4:	ldr	sl, [fp, #8]
   18bd8:	mov	r7, #2
   18bdc:	cmp	sl, #7
   18be0:	bhi	18cb4 <__assert_fail@plt+0x75b4>
   18be4:	mov	r5, r0
   18be8:	ldr	r0, [r0]
   18bec:	mov	r6, r3
   18bf0:	mov	r9, r2
   18bf4:	mov	r4, r1
   18bf8:	tst	sl, #4
   18bfc:	str	r0, [sp, #24]
   18c00:	bne	18c18 <__assert_fail@plt+0x7518>
   18c04:	mov	r0, r4
   18c08:	bl	115bc <strlen@plt>
   18c0c:	mov	r7, r0
   18c10:	mov	r8, #0
   18c14:	b	18c20 <__assert_fail@plt+0x7520>
   18c18:	ldr	r8, [r6]
   18c1c:	ldr	r7, [r6, #4]
   18c20:	movw	r0, #0
   18c24:	movw	r1, #0
   18c28:	movt	r0, #0
   18c2c:	movt	r1, #0
   18c30:	orrs	r0, r1, r0
   18c34:	str	r0, [sp, #20]
   18c38:	beq	18c48 <__assert_fail@plt+0x7548>
   18c3c:	ldr	r0, [sp, #24]
   18c40:	add	r0, r0, #136	; 0x88
   18c44:	bl	11430 <pthread_mutex_lock@plt>
   18c48:	ldrb	r0, [r5, #28]
   18c4c:	tst	r0, #16
   18c50:	bne	18c64 <__assert_fail@plt+0x7564>
   18c54:	str	r7, [sp]
   18c58:	stmib	sp, {r7, r9}
   18c5c:	str	r6, [sp, #12]
   18c60:	b	18c78 <__assert_fail@plt+0x7578>
   18c64:	mov	r0, #0
   18c68:	str	r7, [sp]
   18c6c:	str	r7, [sp, #4]
   18c70:	str	r0, [sp, #8]
   18c74:	str	r0, [sp, #12]
   18c78:	mov	r0, r5
   18c7c:	mov	r1, r4
   18c80:	mov	r2, r7
   18c84:	mov	r3, r8
   18c88:	str	sl, [sp, #16]
   18c8c:	bl	18cc0 <__assert_fail@plt+0x75c0>
   18c90:	mov	r7, r0
   18c94:	ldr	r0, [sp, #20]
   18c98:	cmp	r0, #0
   18c9c:	beq	18cac <__assert_fail@plt+0x75ac>
   18ca0:	ldr	r0, [sp, #24]
   18ca4:	add	r0, r0, #136	; 0x88
   18ca8:	bl	11388 <pthread_mutex_unlock@plt>
   18cac:	cmp	r7, #0
   18cb0:	movwne	r7, #1
   18cb4:	mov	r0, r7
   18cb8:	sub	sp, fp, #28
   18cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cc4:	add	fp, sp, #28
   18cc8:	sub	sp, sp, #412	; 0x19c
   18ccc:	ldr	r7, [r0]
   18cd0:	str	r2, [sp, #76]	; 0x4c
   18cd4:	str	r1, [sp, #100]	; 0x64
   18cd8:	mov	r4, r0
   18cdc:	add	r0, sp, #104	; 0x68
   18ce0:	mov	r1, #0
   18ce4:	mov	r2, #136	; 0x88
   18ce8:	mov	r6, r3
   18cec:	mov	r9, #0
   18cf0:	bl	11610 <memset@plt>
   18cf4:	str	r7, [sp, #188]	; 0xbc
   18cf8:	ldr	r0, [fp, #16]
   18cfc:	ldr	sl, [fp, #8]
   18d00:	mov	r5, #0
   18d04:	ldr	r1, [r4, #16]
   18d08:	cmp	r1, #0
   18d0c:	beq	18d28 <__assert_fail@plt+0x7628>
   18d10:	ldrb	r2, [r4, #28]
   18d14:	and	r2, r2, #9
   18d18:	cmp	r2, #8
   18d1c:	movne	r1, #0
   18d20:	subs	r5, r6, sl
   18d24:	movne	r5, r1
   18d28:	ldr	r2, [r4, #24]
   18d2c:	ldr	r1, [r4, #8]
   18d30:	mov	r8, #1
   18d34:	mvn	r3, r2
   18d38:	cmp	r2, r0
   18d3c:	addcc	r9, r3, r0
   18d40:	cmp	r1, #0
   18d44:	beq	1b338 <__assert_fail@plt+0x9c38>
   18d48:	ldr	r1, [r7, #36]	; 0x24
   18d4c:	cmp	r1, #0
   18d50:	ldrne	r2, [r7, #40]	; 0x28
   18d54:	cmpne	r2, #0
   18d58:	beq	1b338 <__assert_fail@plt+0x9c38>
   18d5c:	ldr	r3, [r7, #44]	; 0x2c
   18d60:	cmp	r3, #0
   18d64:	strne	r7, [sp, #96]	; 0x60
   18d68:	ldrne	r7, [r7, #48]	; 0x30
   18d6c:	cmpne	r7, #0
   18d70:	beq	1b338 <__assert_fail@plt+0x9c38>
   18d74:	ldr	r1, [r1, #8]
   18d78:	ldr	ip, [r4, #20]
   18d7c:	cmp	r1, #0
   18d80:	beq	18d8c <__assert_fail@plt+0x768c>
   18d84:	ldr	lr, [sp, #96]	; 0x60
   18d88:	b	18d9c <__assert_fail@plt+0x769c>
   18d8c:	ldr	r1, [r2, #8]
   18d90:	ldr	lr, [sp, #96]	; 0x60
   18d94:	cmp	r1, #0
   18d98:	beq	1a450 <__assert_fail@plt+0x8d50>
   18d9c:	str	sl, [sp, #80]	; 0x50
   18da0:	subs	r0, r0, r9
   18da4:	str	r9, [sp, #32]
   18da8:	str	r0, [sp, #92]	; 0x5c
   18dac:	mov	r0, #1
   18db0:	str	r0, [sp, #56]	; 0x38
   18db4:	bne	18dc8 <__assert_fail@plt+0x76c8>
   18db8:	ldr	r0, [lr, #76]	; 0x4c
   18dbc:	cmp	r0, #0
   18dc0:	movwne	r0, #1
   18dc4:	str	r0, [sp, #56]	; 0x38
   18dc8:	ldr	r0, [r4, #12]
   18dcc:	ldr	r2, [lr, #92]	; 0x5c
   18dd0:	ldr	r3, [sp, #100]	; 0x64
   18dd4:	ldr	r1, [lr, #8]
   18dd8:	str	ip, [sp, #168]	; 0xa8
   18ddc:	mov	r7, r4
   18de0:	str	r3, [sp, #104]	; 0x68
   18de4:	str	r2, [sp, #184]	; 0xb8
   18de8:	ubfx	r3, r0, #22, #1
   18dec:	ldr	r4, [sp, #76]	; 0x4c
   18df0:	and	r0, r0, #4194304	; 0x400000
   18df4:	add	r9, r1, #1
   18df8:	orrs	sl, ip, r0
   18dfc:	strb	r3, [sp, #176]	; 0xb0
   18e00:	mov	r3, lr
   18e04:	add	r3, sp, #104	; 0x68
   18e08:	movwne	sl, #1
   18e0c:	add	r3, r3, #44	; 0x2c
   18e10:	cmp	r2, r9
   18e14:	strb	sl, [sp, #179]	; 0xb3
   18e18:	movgt	r9, r2
   18e1c:	vdup.32	q8, r4
   18e20:	ldrb	r0, [lr, #88]	; 0x58
   18e24:	vst1.32	{d16-d17}, [r3]
   18e28:	ubfx	r3, r0, #3, #1
   18e2c:	strb	r3, [sp, #178]	; 0xb2
   18e30:	ubfx	r0, r0, #2, #1
   18e34:	str	r7, [sp, #64]	; 0x40
   18e38:	str	r5, [sp, #88]	; 0x58
   18e3c:	str	ip, [sp, #84]	; 0x54
   18e40:	strb	r0, [sp, #177]	; 0xb1
   18e44:	add	r0, r4, #1
   18e48:	cmp	r0, r9
   18e4c:	movlt	r9, r0
   18e50:	cmp	r2, #2
   18e54:	blt	18e88 <__assert_fail@plt+0x7788>
   18e58:	mov	r8, #12
   18e5c:	cmn	r9, #-1073741823	; 0xc0000001
   18e60:	bhi	1b2e4 <__assert_fail@plt+0x9be4>
   18e64:	lsl	r1, r9, #2
   18e68:	mov	r0, #0
   18e6c:	bl	2b910 <__assert_fail@plt+0x1a210>
   18e70:	ldr	ip, [sp, #84]	; 0x54
   18e74:	ldr	r5, [sp, #88]	; 0x58
   18e78:	cmp	r0, #0
   18e7c:	beq	1b2e4 <__assert_fail@plt+0x9be4>
   18e80:	ldr	r7, [sp, #64]	; 0x40
   18e84:	str	r0, [sp, #112]	; 0x70
   18e88:	ldr	r4, [sp, #96]	; 0x60
   18e8c:	mov	r8, #1
   18e90:	cmp	sl, #0
   18e94:	beq	18ebc <__assert_fail@plt+0x77bc>
   18e98:	mov	r0, #0
   18e9c:	mov	r1, r9
   18ea0:	mov	r8, #0
   18ea4:	bl	2b910 <__assert_fail@plt+0x1a210>
   18ea8:	cmp	r0, #0
   18eac:	beq	1b34c <__assert_fail@plt+0x9c4c>
   18eb0:	ldr	r5, [sp, #88]	; 0x58
   18eb4:	ldr	ip, [sp, #84]	; 0x54
   18eb8:	str	r0, [sp, #108]	; 0x6c
   18ebc:	add	r1, r4, #96	; 0x60
   18ec0:	str	r9, [sp, #140]	; 0x8c
   18ec4:	ldr	r0, [fp, #12]
   18ec8:	cmp	r8, #0
   18ecc:	str	r1, [sp, #172]	; 0xac
   18ed0:	ldrb	r1, [r4, #88]	; 0x58
   18ed4:	ubfx	r1, r1, #4, #1
   18ed8:	strb	r1, [sp, #182]	; 0xb6
   18edc:	mov	r1, #0
   18ee0:	beq	18efc <__assert_fail@plt+0x77fc>
   18ee4:	ldr	r1, [sp, #100]	; 0x64
   18ee8:	str	r1, [sp, #108]	; 0x6c
   18eec:	ldr	r1, [r4, #92]	; 0x5c
   18ef0:	cmp	r1, #1
   18ef4:	ldr	r1, [sp, #76]	; 0x4c
   18ef8:	movwgt	r1, #0
   18efc:	str	r0, [sp, #160]	; 0xa0
   18f00:	str	r1, [sp, #136]	; 0x88
   18f04:	str	r1, [sp, #132]	; 0x84
   18f08:	str	r0, [sp, #156]	; 0x9c
   18f0c:	ldrb	r0, [r7, #28]
   18f10:	lsr	r0, r0, #7
   18f14:	strb	r0, [sp, #181]	; 0xb5
   18f18:	mvn	r0, #0
   18f1c:	ldr	sl, [r4, #76]	; 0x4c
   18f20:	str	r0, [sp, #196]	; 0xc4
   18f24:	ldr	r0, [fp, #24]
   18f28:	lsl	r4, sl, #1
   18f2c:	cmp	sl, #1
   18f30:	str	r0, [sp, #192]	; 0xc0
   18f34:	blt	18f84 <__assert_fail@plt+0x7884>
   18f38:	movw	r0, #43690	; 0xaaaa
   18f3c:	mov	r8, #12
   18f40:	movt	r0, #2730	; 0xaaa
   18f44:	cmp	r4, r0
   18f48:	bhi	1b2e4 <__assert_fail@plt+0x9be4>
   18f4c:	add	r0, sl, sl, lsl #1
   18f50:	lsl	r0, r0, #4
   18f54:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   18f58:	mov	r5, r0
   18f5c:	str	r0, [sp, #220]	; 0xdc
   18f60:	lsl	r0, sl, #3
   18f64:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   18f68:	cmp	r0, #0
   18f6c:	str	r0, [sp, #236]	; 0xec
   18f70:	beq	1b2e4 <__assert_fail@plt+0x9be4>
   18f74:	cmp	r5, #0
   18f78:	ldr	r5, [sp, #88]	; 0x58
   18f7c:	ldr	ip, [sp, #84]	; 0x54
   18f80:	beq	1b2e4 <__assert_fail@plt+0x9be4>
   18f84:	mov	r0, #1
   18f88:	str	r4, [sp, #232]	; 0xe8
   18f8c:	str	r0, [sp, #224]	; 0xe0
   18f90:	ldr	r0, [sp, #92]	; 0x5c
   18f94:	str	r4, [sp, #216]	; 0xd8
   18f98:	cmp	r0, #1
   18f9c:	bhi	18fb0 <__assert_fail@plt+0x78b0>
   18fa0:	ldr	r0, [sp, #96]	; 0x60
   18fa4:	ldrb	r0, [r0, #88]	; 0x58
   18fa8:	tst	r0, #2
   18fac:	beq	18fdc <__assert_fail@plt+0x78dc>
   18fb0:	mov	r8, #12
   18fb4:	cmn	r9, #-1073741822	; 0xc0000002
   18fb8:	bhi	1b2e4 <__assert_fail@plt+0x9be4>
   18fbc:	mov	r0, #4
   18fc0:	add	r0, r0, r9, lsl #2
   18fc4:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   18fc8:	ldr	ip, [sp, #84]	; 0x54
   18fcc:	ldr	r5, [sp, #88]	; 0x58
   18fd0:	cmp	r0, #0
   18fd4:	str	r0, [sp, #204]	; 0xcc
   18fd8:	beq	1b2e4 <__assert_fail@plt+0x9be4>
   18fdc:	ldr	r1, [fp, #24]
   18fe0:	ldr	r2, [sp, #80]	; 0x50
   18fe4:	str	r6, [fp, #-200]	; 0xffffff38
   18fe8:	mov	r0, #4
   18fec:	mov	r9, #1
   18ff0:	mov	sl, #1
   18ff4:	mov	r4, r6
   18ff8:	tst	r1, #1
   18ffc:	mov	r1, #4
   19000:	mov	r7, r2
   19004:	movweq	r1, #6
   19008:	cmp	r2, r6
   1900c:	str	r1, [sp, #164]	; 0xa4
   19010:	ldr	r1, [sp, #96]	; 0x60
   19014:	mvnlt	sl, #0
   19018:	movlt	r7, r6
   1901c:	movlt	r4, r2
   19020:	cmp	r5, #0
   19024:	ldr	r1, [r1, #92]	; 0x5c
   19028:	str	r1, [sp, #60]	; 0x3c
   1902c:	beq	19070 <__assert_fail@plt+0x7970>
   19030:	cmp	r1, #1
   19034:	beq	19054 <__assert_fail@plt+0x7954>
   19038:	ldr	r0, [sp, #64]	; 0x40
   1903c:	ldr	r0, [r0, #12]
   19040:	and	r0, r0, #4194304	; 0x400000
   19044:	orr	r0, ip, r0
   19048:	clz	r0, r0
   1904c:	lsr	r0, r0, #5
   19050:	lsl	r0, r0, #2
   19054:	cmp	ip, #0
   19058:	mov	r1, ip
   1905c:	movwne	r1, #1
   19060:	cmp	r2, r6
   19064:	orrge	r1, r1, #2
   19068:	orr	r0, r1, r0
   1906c:	b	19074 <__assert_fail@plt+0x7974>
   19070:	mov	r0, #8
   19074:	add	r1, sp, #104	; 0x68
   19078:	cmp	r2, r6
   1907c:	sub	r0, r0, #4
   19080:	str	sl, [sp, #68]	; 0x44
   19084:	str	r7, [sp, #52]	; 0x34
   19088:	str	r4, [sp, #48]	; 0x30
   1908c:	add	r1, r1, #32
   19090:	str	r0, [sp, #80]	; 0x50
   19094:	str	r1, [sp, #24]
   19098:	sub	r1, fp, #200	; 0xc8
   1909c:	movwlt	r1, #0
   190a0:	cmp	r1, #0
   190a4:	str	r1, [sp, #40]	; 0x28
   190a8:	movwne	r1, #1
   190ac:	str	r1, [sp, #44]	; 0x2c
   190b0:	sub	r1, fp, #192	; 0xc0
   190b4:	add	r1, r1, #16
   190b8:	str	r1, [sp, #36]	; 0x24
   190bc:	ldr	r1, [sp, #80]	; 0x50
   190c0:	cmp	r1, #4
   190c4:	bhi	19138 <__assert_fail@plt+0x7a38>
   190c8:	add	r0, pc, #0
   190cc:	ldr	pc, [r0, r1, lsl #2]
   190d0:	andeq	r9, r1, r4, ror #1
   190d4:	andeq	r9, r1, r4, ror #1
   190d8:	ldrdeq	r9, [r1], -r4
   190dc:	andeq	r9, r1, r4, lsl #4
   190e0:	andeq	r9, r1, ip, lsr r2
   190e4:	mov	r8, #1
   190e8:	cmp	r6, r4
   190ec:	blt	1b2e4 <__assert_fail@plt+0x9be4>
   190f0:	cmp	ip, #0
   190f4:	beq	19d80 <__assert_fail@plt+0x8680>
   190f8:	ldr	r1, [sp, #76]	; 0x4c
   190fc:	mov	r0, #0
   19100:	cmp	r6, r1
   19104:	bge	19110 <__assert_fail@plt+0x7a10>
   19108:	ldr	r0, [sp, #100]	; 0x64
   1910c:	ldrb	r0, [r0, r6]
   19110:	ldrb	r0, [ip, r0]
   19114:	ldrb	r0, [r5, r0]
   19118:	cmp	r0, #0
   1911c:	bne	1923c <__assert_fail@plt+0x7b3c>
   19120:	sub	r0, r6, #1
   19124:	cmp	r6, r4
   19128:	mov	r6, r0
   1912c:	str	r0, [fp, #-200]	; 0xffffff38
   19130:	bgt	190fc <__assert_fail@plt+0x79fc>
   19134:	b	1b2e4 <__assert_fail@plt+0x9be4>
   19138:	ldr	r0, [sp, #128]	; 0x80
   1913c:	ldr	r2, [sp, #136]	; 0x88
   19140:	sub	r1, r6, r0
   19144:	cmp	r1, r2
   19148:	bcs	19190 <__assert_fail@plt+0x7a90>
   1914c:	ldr	r3, [sp, #132]	; 0x84
   19150:	mov	r2, #0
   19154:	cmp	r1, r3
   19158:	bcs	19164 <__assert_fail@plt+0x7a64>
   1915c:	ldr	r2, [sp, #108]	; 0x6c
   19160:	ldrb	r2, [r2, r1]
   19164:	ldrb	r1, [r5, r2]
   19168:	cmp	r1, #0
   1916c:	bne	1923c <__assert_fail@plt+0x7b3c>
   19170:	add	r6, r6, sl
   19174:	mov	r8, #1
   19178:	cmp	r6, r4
   1917c:	str	r6, [fp, #-200]	; 0xffffff38
   19180:	blt	1b2e4 <__assert_fail@plt+0x9be4>
   19184:	cmp	r6, r7
   19188:	ble	1913c <__assert_fail@plt+0x7a3c>
   1918c:	b	1b2e4 <__assert_fail@plt+0x9be4>
   19190:	ldr	r2, [fp, #24]
   19194:	add	r0, sp, #104	; 0x68
   19198:	mov	r1, r6
   1919c:	bl	22f0c <__assert_fail@plt+0x1180c>
   191a0:	cmp	r0, #0
   191a4:	bne	1b3e4 <__assert_fail@plt+0x9ce4>
   191a8:	ldr	r0, [sp, #128]	; 0x80
   191ac:	ldr	r6, [fp, #-200]	; 0xffffff38
   191b0:	ldr	r5, [sp, #88]	; 0x58
   191b4:	ldr	r7, [sp, #52]	; 0x34
   191b8:	ldr	r4, [sp, #48]	; 0x30
   191bc:	sub	r1, r6, r0
   191c0:	ldr	r3, [sp, #132]	; 0x84
   191c4:	mov	r2, #0
   191c8:	cmp	r1, r3
   191cc:	bcc	1915c <__assert_fail@plt+0x7a5c>
   191d0:	b	19164 <__assert_fail@plt+0x7a64>
   191d4:	ldr	r1, [sp, #100]	; 0x64
   191d8:	cmp	r6, r7
   191dc:	bge	19234 <__assert_fail@plt+0x7b34>
   191e0:	ldrb	r0, [r1, r6]
   191e4:	ldrb	r0, [r5, r0]
   191e8:	cmp	r0, #0
   191ec:	bne	19234 <__assert_fail@plt+0x7b34>
   191f0:	add	r6, r6, #1
   191f4:	cmp	r6, r7
   191f8:	str	r6, [fp, #-200]	; 0xffffff38
   191fc:	blt	191e0 <__assert_fail@plt+0x7ae0>
   19200:	b	19234 <__assert_fail@plt+0x7b34>
   19204:	cmp	r6, r7
   19208:	bge	19234 <__assert_fail@plt+0x7b34>
   1920c:	ldr	r1, [sp, #100]	; 0x64
   19210:	ldrb	r0, [r1, r6]
   19214:	ldrb	r0, [ip, r0]
   19218:	ldrb	r0, [r5, r0]
   1921c:	cmp	r0, #0
   19220:	bne	19234 <__assert_fail@plt+0x7b34>
   19224:	add	r6, r6, #1
   19228:	cmp	r6, r7
   1922c:	str	r6, [fp, #-200]	; 0xffffff38
   19230:	blt	19210 <__assert_fail@plt+0x7b10>
   19234:	cmp	r6, r7
   19238:	beq	1a154 <__assert_fail@plt+0x8a54>
   1923c:	ldr	r2, [fp, #24]
   19240:	add	r0, sp, #104	; 0x68
   19244:	mov	r1, r6
   19248:	bl	22f0c <__assert_fail@plt+0x1180c>
   1924c:	cmp	r0, #0
   19250:	bne	1b3e4 <__assert_fail@plt+0x9ce4>
   19254:	ldr	r0, [sp, #60]	; 0x3c
   19258:	cmp	r0, #1
   1925c:	ldrne	r0, [sp, #132]	; 0x84
   19260:	cmpne	r0, #0
   19264:	bne	19cec <__assert_fail@plt+0x85ec>
   19268:	mov	r0, #0
   1926c:	str	r0, [sp, #212]	; 0xd4
   19270:	str	r0, [sp, #224]	; 0xe0
   19274:	str	r0, [sp, #208]	; 0xd0
   19278:	str	r0, [fp, #-196]	; 0xffffff3c
   1927c:	ldr	r4, [sp, #188]	; 0xbc
   19280:	ldr	ip, [sp, #144]	; 0x90
   19284:	ldr	r6, [r4, #36]	; 0x24
   19288:	ldrsb	r0, [r6, #52]	; 0x34
   1928c:	cmn	r0, #1
   19290:	ble	19d00 <__assert_fail@plt+0x8600>
   19294:	ldr	r7, [sp, #44]	; 0x2c
   19298:	cmp	r6, #0
   1929c:	beq	1b34c <__assert_fail@plt+0x9c4c>
   192a0:	ldr	r0, [sp, #204]	; 0xcc
   192a4:	mov	r8, r7
   192a8:	cmp	r0, #0
   192ac:	beq	192c4 <__assert_fail@plt+0x7bc4>
   192b0:	str	r6, [r0, ip, lsl #2]
   192b4:	mov	r8, r7
   192b8:	ldr	r0, [r4, #76]	; 0x4c
   192bc:	cmp	r0, #0
   192c0:	bne	1a034 <__assert_fail@plt+0x8934>
   192c4:	ldrb	r0, [r6, #52]	; 0x34
   192c8:	tst	r0, #16
   192cc:	bne	1a00c <__assert_fail@plt+0x890c>
   192d0:	mov	r0, #0
   192d4:	mvn	r4, #0
   192d8:	str	r0, [sp, #72]	; 0x48
   192dc:	ldr	r0, [sp, #144]	; 0x90
   192e0:	ldr	r1, [sp, #160]	; 0xa0
   192e4:	cmp	r1, r0
   192e8:	ble	19ab8 <__assert_fail@plt+0x83b8>
   192ec:	ldr	sl, [sp, #40]	; 0x28
   192f0:	b	19304 <__assert_fail@plt+0x7c04>
   192f4:	ldr	r0, [sp, #144]	; 0x90
   192f8:	ldr	r1, [sp, #160]	; 0xa0
   192fc:	cmp	r1, r0
   19300:	ble	19abc <__assert_fail@plt+0x83bc>
   19304:	ldr	r2, [sp, #140]	; 0x8c
   19308:	ldr	r1, [sp, #152]	; 0x98
   1930c:	add	r7, r0, #1
   19310:	mov	r5, r6
   19314:	cmp	r7, r2
   19318:	blt	19324 <__assert_fail@plt+0x7c24>
   1931c:	cmp	r2, r1
   19320:	blt	1994c <__assert_fail@plt+0x824c>
   19324:	ldr	r2, [sp, #132]	; 0x84
   19328:	cmp	r7, r2
   1932c:	blt	19338 <__assert_fail@plt+0x7c38>
   19330:	cmp	r2, r1
   19334:	blt	1994c <__assert_fail@plt+0x824c>
   19338:	ldrb	r0, [r5, #52]	; 0x34
   1933c:	tst	r0, #32
   19340:	bne	194fc <__assert_fail@plt+0x7dfc>
   19344:	ldr	r1, [sp, #144]	; 0x90
   19348:	ldr	r0, [sp, #108]	; 0x6c
   1934c:	add	r2, r1, #1
   19350:	str	r2, [sp, #144]	; 0x90
   19354:	ldrb	r6, [r0, r1]
   19358:	ldr	r0, [r5, #44]	; 0x2c
   1935c:	cmp	r0, #0
   19360:	bne	193a0 <__assert_fail@plt+0x7ca0>
   19364:	ldr	r2, [r5, #48]	; 0x30
   19368:	cmp	r2, #0
   1936c:	bne	19970 <__assert_fail@plt+0x8270>
   19370:	ldr	r0, [sp, #188]	; 0xbc
   19374:	mov	r1, r5
   19378:	mov	r9, r8
   1937c:	mov	r8, ip
   19380:	bl	26c20 <__assert_fail@plt+0x15520>
   19384:	mov	ip, r8
   19388:	mov	r8, r9
   1938c:	mov	r9, #1
   19390:	cmp	r0, #0
   19394:	bne	19358 <__assert_fail@plt+0x7c58>
   19398:	mov	r0, #12
   1939c:	b	19a38 <__assert_fail@plt+0x8338>
   193a0:	ldr	r6, [r0, r6, lsl #2]
   193a4:	ldr	r0, [sp, #204]	; 0xcc
   193a8:	cmp	r0, #0
   193ac:	beq	193cc <__assert_fail@plt+0x7ccc>
   193b0:	mov	r2, r6
   193b4:	sub	r0, fp, #196	; 0xc4
   193b8:	add	r1, sp, #104	; 0x68
   193bc:	mov	r6, ip
   193c0:	bl	24978 <__assert_fail@plt+0x13278>
   193c4:	mov	ip, r6
   193c8:	mov	r6, r0
   193cc:	cmp	r6, #0
   193d0:	beq	19444 <__assert_fail@plt+0x7d44>
   193d4:	sub	r0, r5, r6
   193d8:	clz	r0, r0
   193dc:	lsr	r0, r0, #5
   193e0:	ands	r8, r8, r0
   193e4:	ldrb	r0, [r6, #52]	; 0x34
   193e8:	moveq	r7, ip
   193ec:	mov	ip, r7
   193f0:	tst	r0, #16
   193f4:	beq	192f4 <__assert_fail@plt+0x7bf4>
   193f8:	sxtb	r0, r0
   193fc:	cmn	r0, #1
   19400:	bgt	19424 <__assert_fail@plt+0x7d24>
   19404:	ldr	r2, [sp, #144]	; 0x90
   19408:	add	r0, sp, #104	; 0x68
   1940c:	mov	r1, r6
   19410:	mov	r5, ip
   19414:	bl	2396c <__assert_fail@plt+0x1226c>
   19418:	mov	ip, r5
   1941c:	cmp	r0, #0
   19420:	beq	192f4 <__assert_fail@plt+0x7bf4>
   19424:	ldr	r0, [sp, #56]	; 0x38
   19428:	ldr	r4, [sp, #144]	; 0x90
   1942c:	cmp	r0, #0
   19430:	beq	19acc <__assert_fail@plt+0x83cc>
   19434:	mov	sl, #0
   19438:	mov	r0, #1
   1943c:	str	r0, [sp, #72]	; 0x48
   19440:	b	192f4 <__assert_fail@plt+0x7bf4>
   19444:	ldr	r0, [fp, #-196]	; 0xffffff3c
   19448:	cmp	r0, #0
   1944c:	bne	1b34c <__assert_fail@plt+0x9c4c>
   19450:	ldr	r0, [sp, #72]	; 0x48
   19454:	ldr	r1, [sp, #56]	; 0x38
   19458:	cmp	r0, #0
   1945c:	mvn	r1, r1
   19460:	movwne	r0, #1
   19464:	tst	r1, r0
   19468:	bne	19abc <__assert_fail@plt+0x83bc>
   1946c:	ldr	r0, [sp, #204]	; 0xcc
   19470:	cmp	r0, #0
   19474:	beq	19abc <__assert_fail@plt+0x83bc>
   19478:	ldr	r2, [sp, #144]	; 0x90
   1947c:	ldr	r1, [sp, #208]	; 0xd0
   19480:	add	r0, r0, #4
   19484:	cmp	r2, r1
   19488:	bge	19abc <__assert_fail@plt+0x83bc>
   1948c:	add	r3, r2, #1
   19490:	str	r3, [sp, #144]	; 0x90
   19494:	ldr	r2, [r0, r2, lsl #2]
   19498:	cmp	r2, #0
   1949c:	mov	r2, r3
   194a0:	beq	19484 <__assert_fail@plt+0x7d84>
   194a4:	sub	r0, fp, #196	; 0xc4
   194a8:	add	r1, sp, #104	; 0x68
   194ac:	mov	r2, #0
   194b0:	mov	r9, r8
   194b4:	mov	r8, ip
   194b8:	bl	24978 <__assert_fail@plt+0x13278>
   194bc:	cmp	r0, #0
   194c0:	mov	r6, r0
   194c4:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   194c8:	cmpeq	r0, #0
   194cc:	bne	194e4 <__assert_fail@plt+0x7de4>
   194d0:	ldr	r0, [sp, #204]	; 0xcc
   194d4:	mov	ip, r8
   194d8:	mov	r8, r9
   194dc:	mov	r9, #1
   194e0:	b	19478 <__assert_fail@plt+0x7d78>
   194e4:	mov	ip, r8
   194e8:	mov	r8, r9
   194ec:	cmp	r6, #0
   194f0:	mov	r9, #1
   194f4:	bne	193d4 <__assert_fail@plt+0x7cd4>
   194f8:	b	19abc <__assert_fail@plt+0x83bc>
   194fc:	ldr	r0, [r5, #8]
   19500:	cmp	r0, #1
   19504:	blt	199bc <__assert_fail@plt+0x82bc>
   19508:	ldr	lr, [sp, #188]	; 0xbc
   1950c:	mov	r3, #0
   19510:	str	ip, [sp, #8]
   19514:	str	lr, [sp, #16]
   19518:	b	1952c <__assert_fail@plt+0x7e2c>
   1951c:	ldr	r0, [r5, #8]
   19520:	add	r3, r3, #1
   19524:	cmp	r3, r0
   19528:	bge	199bc <__assert_fail@plt+0x82bc>
   1952c:	ldr	r0, [r5, #12]
   19530:	ldr	r2, [r0, r3, lsl #2]
   19534:	ldr	r0, [lr]
   19538:	add	r0, r0, r2, lsl #3
   1953c:	mov	r1, r2
   19540:	str	r2, [sp, #28]
   19544:	ldr	r1, [r0, #4]
   19548:	tst	r1, #1048576	; 0x100000
   1954c:	beq	1951c <__assert_fail@plt+0x7e1c>
   19550:	movw	r0, #65280	; 0xff00
   19554:	str	r3, [sp, #20]
   19558:	movt	r0, #3
   1955c:	tst	r1, r0
   19560:	beq	19674 <__assert_fail@plt+0x7f74>
   19564:	ldr	r0, [sp, #144]	; 0x90
   19568:	str	r1, [sp, #12]
   1956c:	cmn	r0, #1
   19570:	ble	195ac <__assert_fail@plt+0x7eac>
   19574:	ldr	r1, [sp, #152]	; 0x98
   19578:	cmp	r1, r0
   1957c:	beq	19890 <__assert_fail@plt+0x8190>
   19580:	ldr	r1, [sp, #184]	; 0xb8
   19584:	cmp	r1, #2
   19588:	blt	195b4 <__assert_fail@plt+0x7eb4>
   1958c:	ldr	r1, [sp, #112]	; 0x70
   19590:	ldr	r3, [sp, #20]
   19594:	ldr	r6, [r1, r0, lsl #2]
   19598:	cmn	r6, #1
   1959c:	bne	195f0 <__assert_fail@plt+0x7ef0>
   195a0:	sub	r0, r0, #1
   195a4:	cmn	r0, #1
   195a8:	bne	19594 <__assert_fail@plt+0x7e94>
   195ac:	ldr	r1, [sp, #164]	; 0xa4
   195b0:	b	19618 <__assert_fail@plt+0x7f18>
   195b4:	ldr	r1, [sp, #108]	; 0x6c
   195b8:	ldr	r2, [sp, #172]	; 0xac
   195bc:	ldrb	r0, [r1, r0]
   195c0:	ubfx	r1, r0, #5, #3
   195c4:	and	r6, r0, #31
   195c8:	ldr	r3, [r2, r1, lsl #2]
   195cc:	mov	r1, #1
   195d0:	mov	r2, #0
   195d4:	tst	r3, r1, lsl r6
   195d8:	ldr	r3, [sp, #20]
   195dc:	bne	19634 <__assert_fail@plt+0x7f34>
   195e0:	mov	r1, #0
   195e4:	cmp	r0, #10
   195e8:	beq	19608 <__assert_fail@plt+0x7f08>
   195ec:	b	19618 <__assert_fail@plt+0x7f18>
   195f0:	ldrb	r0, [sp, #182]	; 0xb6
   195f4:	cmp	r0, #0
   195f8:	bne	198c0 <__assert_fail@plt+0x81c0>
   195fc:	mov	r1, #0
   19600:	cmp	r6, #10
   19604:	bne	19618 <__assert_fail@plt+0x7f18>
   19608:	ldrb	r0, [sp, #181]	; 0xb5
   1960c:	cmp	r0, #0
   19610:	movwne	r0, #1
   19614:	lsl	r1, r0, #1
   19618:	ldr	r6, [sp, #12]
   1961c:	and	r0, r1, #1
   19620:	eor	r2, r0, #1
   19624:	tst	r6, #1024	; 0x400
   19628:	beq	19634 <__assert_fail@plt+0x7f34>
   1962c:	cmp	r0, #0
   19630:	beq	1951c <__assert_fail@plt+0x7e1c>
   19634:	ldr	r0, [lr]
   19638:	ldr	r6, [sp, #28]
   1963c:	cmp	r2, #0
   19640:	add	r0, r0, r6, lsl #3
   19644:	ldr	r0, [r0, #4]
   19648:	bne	19654 <__assert_fail@plt+0x7f54>
   1964c:	ands	r2, r0, #2048	; 0x800
   19650:	bne	1951c <__assert_fail@plt+0x7e1c>
   19654:	tst	r1, #2
   19658:	bne	19664 <__assert_fail@plt+0x7f64>
   1965c:	ands	r2, r0, #8192	; 0x2000
   19660:	bne	1951c <__assert_fail@plt+0x7e1c>
   19664:	tst	r1, #8
   19668:	bne	19674 <__assert_fail@plt+0x7f74>
   1966c:	ands	r0, r0, #32768	; 0x8000
   19670:	bne	1951c <__assert_fail@plt+0x7e1c>
   19674:	ldr	r3, [sp, #144]	; 0x90
   19678:	ldr	r1, [sp, #28]
   1967c:	mov	r0, lr
   19680:	add	r2, sp, #104	; 0x68
   19684:	bl	26664 <__assert_fail@plt+0x14f64>
   19688:	ldr	r3, [sp, #20]
   1968c:	ldr	lr, [sp, #16]
   19690:	ldr	ip, [sp, #8]
   19694:	cmp	r0, #0
   19698:	beq	1951c <__assert_fail@plt+0x7e1c>
   1969c:	ldr	r1, [sp, #224]	; 0xe0
   196a0:	cmp	r1, r0
   196a4:	movlt	r1, r0
   196a8:	str	r1, [sp, #224]	; 0xe0
   196ac:	ldr	r3, [sp, #144]	; 0x90
   196b0:	ldr	r2, [sp, #140]	; 0x8c
   196b4:	ldr	r1, [sp, #152]	; 0x98
   196b8:	ldr	r6, [sp, #208]	; 0xd0
   196bc:	add	r3, r3, r0
   196c0:	cmp	r2, r3
   196c4:	str	r3, [sp, #12]
   196c8:	cmple	r2, r1
   196cc:	blt	196e0 <__assert_fail@plt+0x7fe0>
   196d0:	ldr	r0, [sp, #132]	; 0x84
   196d4:	cmp	r0, r3
   196d8:	cmple	r0, r1
   196dc:	bge	196fc <__assert_fail@plt+0x7ffc>
   196e0:	add	r1, r3, #1
   196e4:	add	r0, sp, #104	; 0x68
   196e8:	bl	24774 <__assert_fail@plt+0x13074>
   196ec:	ldr	r3, [sp, #12]
   196f0:	ldr	lr, [sp, #16]
   196f4:	cmp	r0, #0
   196f8:	bne	19a30 <__assert_fail@plt+0x8330>
   196fc:	cmp	r3, r6
   19700:	ble	1972c <__assert_fail@plt+0x802c>
   19704:	sub	r0, r3, r6
   19708:	mov	r1, #0
   1970c:	lsl	r2, r0, #2
   19710:	ldr	r0, [sp, #204]	; 0xcc
   19714:	add	r0, r0, r6, lsl #2
   19718:	add	r0, r0, #4
   1971c:	bl	11610 <memset@plt>
   19720:	ldr	r3, [sp, #12]
   19724:	ldr	lr, [sp, #16]
   19728:	str	r3, [sp, #208]	; 0xd0
   1972c:	mov	r0, #0
   19730:	ldr	r2, [sp, #28]
   19734:	str	r0, [fp, #-48]	; 0xffffffd0
   19738:	ldr	r0, [sp, #204]	; 0xcc
   1973c:	ldr	r1, [lr, #24]
   19740:	ldr	r6, [r0, r3, lsl #2]
   19744:	ldr	r0, [lr, #12]
   19748:	ldr	r0, [r0, r2, lsl #2]
   1974c:	cmp	r6, #0
   19750:	add	r0, r0, r0, lsl #1
   19754:	add	r2, r1, r0, lsl #2
   19758:	beq	1977c <__assert_fail@plt+0x807c>
   1975c:	ldr	r1, [r6, #40]	; 0x28
   19760:	sub	r0, fp, #192	; 0xc0
   19764:	bl	24bb8 <__assert_fail@plt+0x134b8>
   19768:	ldr	r3, [sp, #12]
   1976c:	cmp	r0, #0
   19770:	str	r0, [fp, #-48]	; 0xffffffd0
   19774:	beq	1978c <__assert_fail@plt+0x808c>
   19778:	b	19a50 <__assert_fail@plt+0x8350>
   1977c:	vldr	d16, [r2]
   19780:	ldr	r0, [r2, #8]
   19784:	str	r0, [fp, #-184]	; 0xffffff48
   19788:	vstr	d16, [fp, #-192]	; 0xffffff40
   1978c:	cmp	r3, #0
   19790:	str	r6, [sp, #4]
   19794:	ble	198a4 <__assert_fail@plt+0x81a4>
   19798:	ldr	r1, [sp, #152]	; 0x98
   1979c:	sub	r0, r3, #1
   197a0:	cmp	r1, r0
   197a4:	ldr	r1, [sp, #16]
   197a8:	beq	198b0 <__assert_fail@plt+0x81b0>
   197ac:	ldr	r2, [sp, #184]	; 0xb8
   197b0:	cmp	r2, #2
   197b4:	blt	197dc <__assert_fail@plt+0x80dc>
   197b8:	ldr	r2, [sp, #112]	; 0x70
   197bc:	ldr	r6, [r2, r0, lsl #2]
   197c0:	cmn	r6, #1
   197c4:	bne	1980c <__assert_fail@plt+0x810c>
   197c8:	sub	r0, r0, #1
   197cc:	cmn	r0, #1
   197d0:	bne	197bc <__assert_fail@plt+0x80bc>
   197d4:	ldr	r3, [sp, #164]	; 0xa4
   197d8:	b	19834 <__assert_fail@plt+0x8134>
   197dc:	ldr	r3, [sp, #108]	; 0x6c
   197e0:	ldr	r2, [sp, #172]	; 0xac
   197e4:	ldrb	r0, [r3, r0]
   197e8:	ubfx	r3, r0, #5, #3
   197ec:	ldr	r6, [r2, r3, lsl #2]
   197f0:	and	r2, r0, #31
   197f4:	mov	r3, #1
   197f8:	tst	r6, r3, lsl r2
   197fc:	moveq	r3, #0
   19800:	cmpeq	r0, #10
   19804:	bne	19834 <__assert_fail@plt+0x8134>
   19808:	b	19824 <__assert_fail@plt+0x8124>
   1980c:	ldrb	r0, [sp, #182]	; 0xb6
   19810:	cmp	r0, #0
   19814:	bne	19900 <__assert_fail@plt+0x8200>
   19818:	mov	r3, #0
   1981c:	cmp	r6, #10
   19820:	bne	19834 <__assert_fail@plt+0x8134>
   19824:	ldrb	r0, [sp, #181]	; 0xb5
   19828:	cmp	r0, #0
   1982c:	movwne	r0, #1
   19830:	lsl	r3, r0, #1
   19834:	sub	r0, fp, #48	; 0x30
   19838:	sub	r2, fp, #192	; 0xc0
   1983c:	bl	22368 <__assert_fail@plt+0x10c68>
   19840:	ldr	r1, [sp, #204]	; 0xcc
   19844:	ldr	r2, [sp, #12]
   19848:	str	r0, [r1, r2, lsl #2]
   1984c:	ldr	r0, [sp, #4]
   19850:	cmp	r0, #0
   19854:	beq	19864 <__assert_fail@plt+0x8164>
   19858:	ldr	r0, [fp, #-184]	; 0xffffff48
   1985c:	bl	13ddc <__assert_fail@plt+0x26dc>
   19860:	ldr	r2, [sp, #12]
   19864:	ldr	r0, [sp, #204]	; 0xcc
   19868:	ldr	ip, [sp, #8]
   1986c:	ldr	lr, [sp, #16]
   19870:	ldr	r3, [sp, #20]
   19874:	ldr	r0, [r0, r2, lsl #2]
   19878:	cmp	r0, #0
   1987c:	bne	1951c <__assert_fail@plt+0x7e1c>
   19880:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19884:	cmp	r0, #0
   19888:	beq	1951c <__assert_fail@plt+0x7e1c>
   1988c:	b	19a38 <__assert_fail@plt+0x8338>
   19890:	ldr	r0, [sp, #192]	; 0xc0
   19894:	ldr	r3, [sp, #20]
   19898:	and	r0, r0, #2
   1989c:	eor	r1, r0, #10
   198a0:	b	19618 <__assert_fail@plt+0x7f18>
   198a4:	ldr	r3, [sp, #164]	; 0xa4
   198a8:	ldr	r1, [sp, #16]
   198ac:	b	19834 <__assert_fail@plt+0x8134>
   198b0:	ldr	r0, [sp, #192]	; 0xc0
   198b4:	and	r0, r0, #2
   198b8:	eor	r3, r0, #10
   198bc:	b	19834 <__assert_fail@plt+0x8134>
   198c0:	mov	r0, r6
   198c4:	str	r8, [sp, #4]
   198c8:	mov	r8, ip
   198cc:	bl	115f8 <iswalnum@plt>
   198d0:	mov	r1, #1
   198d4:	mov	r2, #0
   198d8:	cmp	r6, #95	; 0x5f
   198dc:	beq	19928 <__assert_fail@plt+0x8228>
   198e0:	mov	ip, r8
   198e4:	ldr	r8, [sp, #4]
   198e8:	ldr	lr, [sp, #16]
   198ec:	ldr	r3, [sp, #20]
   198f0:	cmp	r0, #0
   198f4:	mov	r9, #1
   198f8:	beq	195fc <__assert_fail@plt+0x7efc>
   198fc:	b	19634 <__assert_fail@plt+0x7f34>
   19900:	mov	r0, r6
   19904:	bl	115f8 <iswalnum@plt>
   19908:	mov	r3, #1
   1990c:	cmp	r6, #95	; 0x5f
   19910:	beq	19940 <__assert_fail@plt+0x8240>
   19914:	ldr	r1, [sp, #16]
   19918:	cmp	r0, #0
   1991c:	mov	r9, #1
   19920:	beq	19818 <__assert_fail@plt+0x8118>
   19924:	b	19834 <__assert_fail@plt+0x8134>
   19928:	mov	ip, r8
   1992c:	ldr	r8, [sp, #4]
   19930:	ldr	lr, [sp, #16]
   19934:	ldr	r3, [sp, #20]
   19938:	mov	r9, #1
   1993c:	b	19634 <__assert_fail@plt+0x7f34>
   19940:	ldr	r1, [sp, #16]
   19944:	mov	r9, #1
   19948:	b	19834 <__assert_fail@plt+0x8134>
   1994c:	add	r1, r0, #2
   19950:	add	r0, sp, #104	; 0x68
   19954:	mov	r6, ip
   19958:	bl	24774 <__assert_fail@plt+0x13074>
   1995c:	mov	ip, r6
   19960:	cmp	r0, #0
   19964:	str	r0, [fp, #-196]	; 0xffffff3c
   19968:	beq	19338 <__assert_fail@plt+0x7c38>
   1996c:	b	1b34c <__assert_fail@plt+0x9c4c>
   19970:	ldr	r0, [sp, #144]	; 0x90
   19974:	cmp	r0, #0
   19978:	ble	199b4 <__assert_fail@plt+0x82b4>
   1997c:	ldr	r1, [sp, #152]	; 0x98
   19980:	sub	r3, r0, #1
   19984:	cmp	r1, r3
   19988:	beq	19a58 <__assert_fail@plt+0x8358>
   1998c:	ldr	r1, [sp, #184]	; 0xb8
   19990:	cmp	r1, #2
   19994:	blt	199c8 <__assert_fail@plt+0x82c8>
   19998:	ldr	r1, [sp, #112]	; 0x70
   1999c:	ldr	r0, [r1, r3, lsl #2]
   199a0:	cmn	r0, #1
   199a4:	bne	199f0 <__assert_fail@plt+0x82f0>
   199a8:	sub	r3, r3, #1
   199ac:	cmn	r3, #1
   199b0:	bne	1999c <__assert_fail@plt+0x829c>
   199b4:	ldr	r1, [sp, #164]	; 0xa4
   199b8:	b	19a18 <__assert_fail@plt+0x8318>
   199bc:	mov	r0, #0
   199c0:	str	r0, [fp, #-196]	; 0xffffff3c
   199c4:	b	19344 <__assert_fail@plt+0x7c44>
   199c8:	ldr	r1, [sp, #108]	; 0x6c
   199cc:	ldr	lr, [sp, #172]	; 0xac
   199d0:	ldrb	r0, [r1, r3]
   199d4:	ubfx	r1, r0, #5, #3
   199d8:	and	r3, r0, #31
   199dc:	ldr	lr, [lr, r1, lsl #2]
   199e0:	mov	r1, #1
   199e4:	tst	lr, r1, lsl r3
   199e8:	bne	19a18 <__assert_fail@plt+0x8318>
   199ec:	b	199fc <__assert_fail@plt+0x82fc>
   199f0:	ldrb	r1, [sp, #182]	; 0xb6
   199f4:	cmp	r1, #0
   199f8:	bne	19a60 <__assert_fail@plt+0x8360>
   199fc:	mov	r1, #0
   19a00:	cmp	r0, #10
   19a04:	bne	19a18 <__assert_fail@plt+0x8318>
   19a08:	ldrb	r0, [sp, #181]	; 0xb5
   19a0c:	cmp	r0, #0
   19a10:	movwne	r0, #1
   19a14:	lsl	r1, r0, #1
   19a18:	bfi	r6, r1, #8, #1
   19a1c:	ldr	r6, [r2, r6, lsl #2]
   19a20:	ldr	r0, [sp, #204]	; 0xcc
   19a24:	cmp	r0, #0
   19a28:	bne	193b0 <__assert_fail@plt+0x7cb0>
   19a2c:	b	193cc <__assert_fail@plt+0x7ccc>
   19a30:	ldr	ip, [sp, #8]
   19a34:	str	r0, [fp, #-48]	; 0xffffffd0
   19a38:	mov	r6, #0
   19a3c:	str	r0, [fp, #-196]	; 0xffffff3c
   19a40:	ldr	r0, [sp, #204]	; 0xcc
   19a44:	cmp	r0, #0
   19a48:	bne	193b0 <__assert_fail@plt+0x7cb0>
   19a4c:	b	193cc <__assert_fail@plt+0x7ccc>
   19a50:	ldr	ip, [sp, #8]
   19a54:	b	19a38 <__assert_fail@plt+0x8338>
   19a58:	mov	r1, #10
   19a5c:	b	19a18 <__assert_fail@plt+0x8318>
   19a60:	str	r8, [sp, #4]
   19a64:	str	r2, [sp, #28]
   19a68:	mov	r8, ip
   19a6c:	mov	r9, r0
   19a70:	bl	115f8 <iswalnum@plt>
   19a74:	mov	r1, #1
   19a78:	cmp	r9, #95	; 0x5f
   19a7c:	beq	19aa4 <__assert_fail@plt+0x83a4>
   19a80:	mov	ip, r8
   19a84:	ldr	r8, [sp, #4]
   19a88:	ldr	r2, [sp, #28]
   19a8c:	mov	r3, r9
   19a90:	cmp	r0, #0
   19a94:	mov	r9, #1
   19a98:	mov	r0, r3
   19a9c:	beq	199fc <__assert_fail@plt+0x82fc>
   19aa0:	b	19a18 <__assert_fail@plt+0x8318>
   19aa4:	mov	ip, r8
   19aa8:	ldr	r8, [sp, #4]
   19aac:	ldr	r2, [sp, #28]
   19ab0:	mov	r9, #1
   19ab4:	b	19a18 <__assert_fail@plt+0x8318>
   19ab8:	ldr	sl, [sp, #40]	; 0x28
   19abc:	cmp	sl, #0
   19ac0:	ldrne	r0, [sl]
   19ac4:	addne	r0, r0, ip
   19ac8:	strne	r0, [sl]
   19acc:	ldr	sl, [sp, #68]	; 0x44
   19ad0:	cmn	r4, #1
   19ad4:	beq	19f20 <__assert_fail@plt+0x8820>
   19ad8:	cmn	r4, #2
   19adc:	beq	1b34c <__assert_fail@plt+0x9c4c>
   19ae0:	ldr	sl, [sp, #64]	; 0x40
   19ae4:	str	r4, [sp, #196]	; 0xc4
   19ae8:	ldr	r1, [sp, #92]	; 0x5c
   19aec:	ldr	r9, [sp, #96]	; 0x60
   19af0:	ldrb	r0, [sl, #28]
   19af4:	cmp	r1, #2
   19af8:	bcc	19b04 <__assert_fail@plt+0x8404>
   19afc:	ands	r1, r0, #16
   19b00:	beq	19b10 <__assert_fail@plt+0x8410>
   19b04:	ldr	r1, [r9, #76]	; 0x4c
   19b08:	cmp	r1, #0
   19b0c:	beq	19b2c <__assert_fail@plt+0x842c>
   19b10:	ldr	r0, [sp, #204]	; 0xcc
   19b14:	mov	r2, r4
   19b18:	ldr	r1, [r0, r4, lsl #2]
   19b1c:	add	r0, sp, #104	; 0x68
   19b20:	bl	2396c <__assert_fail@plt+0x1226c>
   19b24:	str	r0, [sp, #200]	; 0xc8
   19b28:	ldrb	r0, [sl, #28]
   19b2c:	ldr	r1, [sp, #92]	; 0x5c
   19b30:	cmp	r1, #2
   19b34:	bcc	19b4c <__assert_fail@plt+0x844c>
   19b38:	ands	r0, r0, #16
   19b3c:	bne	19b4c <__assert_fail@plt+0x844c>
   19b40:	ldrb	r0, [r9, #88]	; 0x58
   19b44:	tst	r0, #1
   19b48:	bne	19b58 <__assert_fail@plt+0x8458>
   19b4c:	ldr	r0, [r9, #76]	; 0x4c
   19b50:	cmp	r0, #0
   19b54:	beq	1a2ac <__assert_fail@plt+0x8bac>
   19b58:	ldr	r9, [sp, #196]	; 0xc4
   19b5c:	cmn	r9, #-1073741823	; 0xc0000001
   19b60:	bcs	1b34c <__assert_fail@plt+0x9c4c>
   19b64:	ldr	r0, [sp, #188]	; 0xbc
   19b68:	ldr	r5, [sp, #200]	; 0xc8
   19b6c:	str	r0, [sp, #72]	; 0x48
   19b70:	mov	r0, #4
   19b74:	add	r4, r0, r9, lsl #2
   19b78:	mov	r0, r4
   19b7c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   19b80:	mov	r6, r0
   19b84:	cmp	r0, #0
   19b88:	beq	1b40c <__assert_fail@plt+0x9d0c>
   19b8c:	ldr	r0, [sp, #72]	; 0x48
   19b90:	ldr	r0, [r0, #76]	; 0x4c
   19b94:	cmp	r0, #0
   19b98:	beq	19dbc <__assert_fail@plt+0x86bc>
   19b9c:	mov	r0, r4
   19ba0:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   19ba4:	cmp	r0, #0
   19ba8:	beq	1b40c <__assert_fail@plt+0x9d0c>
   19bac:	add	r7, r9, #1
   19bb0:	mov	r1, #0
   19bb4:	mov	r4, r0
   19bb8:	lsl	r2, r7, #2
   19bbc:	bl	11610 <memset@plt>
   19bc0:	ldr	r0, [sp, #36]	; 0x24
   19bc4:	mov	r1, #0
   19bc8:	str	r9, [fp, #-180]	; 0xffffff4c
   19bcc:	str	r5, [fp, #-184]	; 0xffffff48
   19bd0:	str	r4, [fp, #-188]	; 0xffffff44
   19bd4:	str	r6, [fp, #-192]	; 0xffffff40
   19bd8:	str	r4, [sp, #28]
   19bdc:	str	r1, [r0]
   19be0:	str	r1, [r0, #4]
   19be4:	str	r1, [r0, #8]
   19be8:	add	r0, sp, #104	; 0x68
   19bec:	sub	r1, fp, #192	; 0xc0
   19bf0:	bl	28940 <__assert_fail@plt+0x17240>
   19bf4:	mov	r8, r0
   19bf8:	mov	r0, #0
   19bfc:	bl	13ddc <__assert_fail@plt+0x26dc>
   19c00:	cmp	r8, #0
   19c04:	bne	1a20c <__assert_fail@plt+0x8b0c>
   19c08:	ldr	r0, [r6]
   19c0c:	sub	r4, fp, #48	; 0x30
   19c10:	cmp	r0, #0
   19c14:	beq	19e14 <__assert_fail@plt+0x8714>
   19c18:	ldr	sl, [sp, #64]	; 0x40
   19c1c:	mov	r1, #0
   19c20:	cmp	r9, #0
   19c24:	mov	r8, #0
   19c28:	str	r5, [sp, #16]
   19c2c:	str	r6, [sp, #20]
   19c30:	str	r1, [sp, #12]
   19c34:	bmi	19cd0 <__assert_fail@plt+0x85d0>
   19c38:	ldr	r1, [sp, #20]
   19c3c:	sub	r6, r7, #1
   19c40:	ldr	r7, [sp, #28]
   19c44:	add	r5, r1, #4
   19c48:	ldr	r2, [r7]
   19c4c:	cmp	r0, #0
   19c50:	bne	19c70 <__assert_fail@plt+0x8570>
   19c54:	b	19cc0 <__assert_fail@plt+0x85c0>
   19c58:	ldr	r0, [r5], #4
   19c5c:	add	r7, r7, #4
   19c60:	sub	r6, r6, #1
   19c64:	ldr	r2, [r7]
   19c68:	cmp	r0, #0
   19c6c:	beq	19cc0 <__assert_fail@plt+0x85c0>
   19c70:	cmp	r2, #0
   19c74:	beq	19cc4 <__assert_fail@plt+0x85c4>
   19c78:	add	r1, r0, #4
   19c7c:	add	r2, r2, #4
   19c80:	mov	r0, r4
   19c84:	bl	24bb8 <__assert_fail@plt+0x134b8>
   19c88:	cmp	r0, #0
   19c8c:	str	r0, [fp, #-196]	; 0xffffff3c
   19c90:	bne	1a004 <__assert_fail@plt+0x8904>
   19c94:	ldr	r1, [sp, #72]	; 0x48
   19c98:	sub	r0, fp, #196	; 0xc4
   19c9c:	mov	r2, r4
   19ca0:	bl	26334 <__assert_fail@plt+0x14c34>
   19ca4:	str	r0, [r5, #-4]
   19ca8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19cac:	bl	13ddc <__assert_fail@plt+0x26dc>
   19cb0:	ldr	r8, [fp, #-196]	; 0xffffff3c
   19cb4:	cmp	r8, #0
   19cb8:	beq	19cc4 <__assert_fail@plt+0x85c4>
   19cbc:	b	19cd0 <__assert_fail@plt+0x85d0>
   19cc0:	str	r2, [r5, #-4]
   19cc4:	cmp	r6, #0
   19cc8:	bne	19c58 <__assert_fail@plt+0x8558>
   19ccc:	mov	r8, #0
   19cd0:	ldr	r0, [sp, #28]
   19cd4:	bl	13ddc <__assert_fail@plt+0x26dc>
   19cd8:	ldr	r6, [sp, #20]
   19cdc:	ldr	r5, [sp, #16]
   19ce0:	cmp	r8, #0
   19ce4:	beq	1a284 <__assert_fail@plt+0x8b84>
   19ce8:	b	1a24c <__assert_fail@plt+0x8b4c>
   19cec:	ldr	r0, [sp, #112]	; 0x70
   19cf0:	ldr	r0, [r0]
   19cf4:	cmn	r0, #1
   19cf8:	bne	19268 <__assert_fail@plt+0x7b68>
   19cfc:	b	19f28 <__assert_fail@plt+0x8828>
   19d00:	cmp	ip, #0
   19d04:	ble	1a184 <__assert_fail@plt+0x8a84>
   19d08:	ldr	r1, [sp, #152]	; 0x98
   19d0c:	ldr	r7, [sp, #44]	; 0x2c
   19d10:	sub	r0, ip, #1
   19d14:	cmp	r1, r0
   19d18:	beq	1a198 <__assert_fail@plt+0x8a98>
   19d1c:	ldr	r1, [sp, #184]	; 0xb8
   19d20:	cmp	r1, #2
   19d24:	blt	19d54 <__assert_fail@plt+0x8654>
   19d28:	ldr	r1, [sp, #112]	; 0x70
   19d2c:	ldr	r5, [r1, r0, lsl #2]
   19d30:	cmn	r5, #1
   19d34:	bne	19f5c <__assert_fail@plt+0x885c>
   19d38:	sub	r0, r0, #1
   19d3c:	cmn	r0, #1
   19d40:	bne	19d2c <__assert_fail@plt+0x862c>
   19d44:	ldr	r3, [sp, #164]	; 0xa4
   19d48:	tst	r3, #1
   19d4c:	beq	19f88 <__assert_fail@plt+0x8888>
   19d50:	b	1a1ac <__assert_fail@plt+0x8aac>
   19d54:	ldr	r1, [sp, #108]	; 0x6c
   19d58:	ldr	r2, [sp, #172]	; 0xac
   19d5c:	ldrb	r0, [r1, r0]
   19d60:	ubfx	r1, r0, #5, #3
   19d64:	ldr	r1, [r2, r1, lsl #2]
   19d68:	and	r2, r0, #31
   19d6c:	tst	r1, r9, lsl r2
   19d70:	bne	1a1ac <__assert_fail@plt+0x8aac>
   19d74:	cmp	r0, #10
   19d78:	beq	19f70 <__assert_fail@plt+0x8870>
   19d7c:	b	1a1b0 <__assert_fail@plt+0x8ab0>
   19d80:	ldr	r1, [sp, #76]	; 0x4c
   19d84:	mov	r0, #0
   19d88:	cmp	r6, r1
   19d8c:	bge	19d98 <__assert_fail@plt+0x8698>
   19d90:	ldr	r0, [sp, #100]	; 0x64
   19d94:	ldrb	r0, [r0, r6]
   19d98:	ldrb	r0, [r5, r0]
   19d9c:	cmp	r0, #0
   19da0:	bne	1923c <__assert_fail@plt+0x7b3c>
   19da4:	sub	r0, r6, #1
   19da8:	cmp	r6, r4
   19dac:	mov	r6, r0
   19db0:	str	r0, [fp, #-200]	; 0xffffff38
   19db4:	bgt	19d84 <__assert_fail@plt+0x8684>
   19db8:	b	1b2e4 <__assert_fail@plt+0x9be4>
   19dbc:	ldr	r0, [sp, #36]	; 0x24
   19dc0:	mov	r1, #0
   19dc4:	str	r9, [fp, #-180]	; 0xffffff4c
   19dc8:	str	r5, [fp, #-184]	; 0xffffff48
   19dcc:	str	r1, [fp, #-188]	; 0xffffff44
   19dd0:	str	r6, [fp, #-192]	; 0xffffff40
   19dd4:	str	r1, [r0]
   19dd8:	str	r1, [r0, #4]
   19ddc:	str	r1, [r0, #8]
   19de0:	add	r0, sp, #104	; 0x68
   19de4:	sub	r1, fp, #192	; 0xc0
   19de8:	bl	28940 <__assert_fail@plt+0x17240>
   19dec:	mov	r8, r0
   19df0:	mov	r0, #0
   19df4:	bl	13ddc <__assert_fail@plt+0x26dc>
   19df8:	cmp	r8, #0
   19dfc:	bne	1a214 <__assert_fail@plt+0x8b14>
   19e00:	ldr	r0, [r6]
   19e04:	mov	r8, #0
   19e08:	cmp	r0, #0
   19e0c:	beq	19f08 <__assert_fail@plt+0x8808>
   19e10:	b	1a284 <__assert_fail@plt+0x8b84>
   19e14:	ldr	r8, [sp, #28]
   19e18:	ldr	r1, [r8]
   19e1c:	cmp	r1, #0
   19e20:	bne	19ffc <__assert_fail@plt+0x88fc>
   19e24:	cmp	r9, #1
   19e28:	blt	19f08 <__assert_fail@plt+0x8808>
   19e2c:	ldr	r0, [sp, #204]	; 0xcc
   19e30:	lsl	r4, r9, #2
   19e34:	add	sl, r9, #1
   19e38:	sub	r0, r0, #4
   19e3c:	ldr	r1, [r0, r4]
   19e40:	cmp	r1, #0
   19e44:	bne	19e64 <__assert_fail@plt+0x8764>
   19e48:	sub	sl, sl, #1
   19e4c:	sub	r4, r4, #4
   19e50:	cmp	sl, #2
   19e54:	blt	19f08 <__assert_fail@plt+0x8808>
   19e58:	ldr	r1, [r0, r4]
   19e5c:	cmp	r1, #0
   19e60:	beq	19e48 <__assert_fail@plt+0x8748>
   19e64:	ldrb	r2, [r1, #52]	; 0x34
   19e68:	tst	r2, #16
   19e6c:	beq	19e48 <__assert_fail@plt+0x8748>
   19e70:	sub	r9, sl, #2
   19e74:	add	r5, sp, #104	; 0x68
   19e78:	mov	r0, r5
   19e7c:	mov	r2, r9
   19e80:	bl	2396c <__assert_fail@plt+0x1226c>
   19e84:	mov	r5, r0
   19e88:	mov	r0, r8
   19e8c:	mov	r1, #0
   19e90:	mov	r2, r4
   19e94:	bl	11610 <memset@plt>
   19e98:	ldr	r0, [sp, #36]	; 0x24
   19e9c:	mov	r1, #0
   19ea0:	str	r9, [fp, #-180]	; 0xffffff4c
   19ea4:	str	r5, [fp, #-184]	; 0xffffff48
   19ea8:	str	r8, [fp, #-188]	; 0xffffff44
   19eac:	str	r6, [fp, #-192]	; 0xffffff40
   19eb0:	mov	r7, r5
   19eb4:	str	r1, [r0]
   19eb8:	str	r1, [r0, #4]
   19ebc:	str	r1, [r0, #8]
   19ec0:	add	r0, sp, #104	; 0x68
   19ec4:	sub	r1, fp, #192	; 0xc0
   19ec8:	bl	28940 <__assert_fail@plt+0x17240>
   19ecc:	mov	r8, r0
   19ed0:	mov	r0, #0
   19ed4:	bl	13ddc <__assert_fail@plt+0x26dc>
   19ed8:	cmp	r8, #0
   19edc:	bne	1a240 <__assert_fail@plt+0x8b40>
   19ee0:	ldr	r0, [r6]
   19ee4:	sub	r1, sl, #1
   19ee8:	mov	r5, r7
   19eec:	sub	r4, fp, #48	; 0x30
   19ef0:	mov	r7, r1
   19ef4:	cmp	r0, #0
   19ef8:	beq	19e14 <__assert_fail@plt+0x8714>
   19efc:	sub	r9, sl, #2
   19f00:	sub	r7, sl, #1
   19f04:	b	19c18 <__assert_fail@plt+0x8518>
   19f08:	mov	r0, r6
   19f0c:	bl	13ddc <__assert_fail@plt+0x26dc>
   19f10:	mov	r0, r8
   19f14:	bl	13ddc <__assert_fail@plt+0x26dc>
   19f18:	ldr	sl, [sp, #68]	; 0x44
   19f1c:	mov	r9, #1
   19f20:	add	r0, sp, #104	; 0x68
   19f24:	bl	23b14 <__assert_fail@plt+0x12414>
   19f28:	ldr	r0, [fp, #-200]	; 0xffffff38
   19f2c:	ldr	r4, [sp, #48]	; 0x30
   19f30:	ldr	r7, [sp, #52]	; 0x34
   19f34:	mov	r8, #1
   19f38:	add	r6, r0, sl
   19f3c:	cmp	r6, r4
   19f40:	str	r6, [fp, #-200]	; 0xffffff38
   19f44:	blt	1b2e4 <__assert_fail@plt+0x9be4>
   19f48:	ldr	r5, [sp, #88]	; 0x58
   19f4c:	ldr	ip, [sp, #84]	; 0x54
   19f50:	cmp	r7, r6
   19f54:	bge	190bc <__assert_fail@plt+0x79bc>
   19f58:	b	1b2e4 <__assert_fail@plt+0x9be4>
   19f5c:	ldrb	r0, [sp, #182]	; 0xb6
   19f60:	cmp	r0, #0
   19f64:	bne	1a21c <__assert_fail@plt+0x8b1c>
   19f68:	cmp	r5, #10
   19f6c:	bne	1a1b0 <__assert_fail@plt+0x8ab0>
   19f70:	ldrb	r0, [sp, #181]	; 0xb5
   19f74:	cmp	r0, #0
   19f78:	movwne	r0, #1
   19f7c:	lsl	r3, r0, #1
   19f80:	tst	r3, #1
   19f84:	bne	1a1ac <__assert_fail@plt+0x8aac>
   19f88:	cmp	r3, #0
   19f8c:	beq	1a1b0 <__assert_fail@plt+0x8ab0>
   19f90:	ands	r1, r3, #2
   19f94:	and	r0, r3, #4
   19f98:	cmpne	r0, #0
   19f9c:	bne	19fdc <__assert_fail@plt+0x88dc>
   19fa0:	cmp	r1, #0
   19fa4:	bne	19fec <__assert_fail@plt+0x88ec>
   19fa8:	ldr	r6, [r4, #36]	; 0x24
   19fac:	cmp	r0, #0
   19fb0:	beq	1a1b0 <__assert_fail@plt+0x8ab0>
   19fb4:	ldr	r2, [r6, #40]	; 0x28
   19fb8:	sub	r0, fp, #196	; 0xc4
   19fbc:	mov	r1, r4
   19fc0:	mov	r5, ip
   19fc4:	bl	22368 <__assert_fail@plt+0x10c68>
   19fc8:	mov	ip, r5
   19fcc:	mov	r6, r0
   19fd0:	cmp	r6, #0
   19fd4:	bne	192a0 <__assert_fail@plt+0x7ba0>
   19fd8:	b	1b34c <__assert_fail@plt+0x9c4c>
   19fdc:	ldr	r6, [r4, #48]	; 0x30
   19fe0:	cmp	r6, #0
   19fe4:	bne	192a0 <__assert_fail@plt+0x7ba0>
   19fe8:	b	1b34c <__assert_fail@plt+0x9c4c>
   19fec:	ldr	r6, [r4, #44]	; 0x2c
   19ff0:	cmp	r6, #0
   19ff4:	bne	192a0 <__assert_fail@plt+0x7ba0>
   19ff8:	b	1b34c <__assert_fail@plt+0x9c4c>
   19ffc:	mov	r2, r7
   1a000:	b	19c18 <__assert_fail@plt+0x8518>
   1a004:	mov	r8, r0
   1a008:	b	19cd0 <__assert_fail@plt+0x85d0>
   1a00c:	sxtb	r0, r0
   1a010:	cmn	r0, #1
   1a014:	ble	1a1bc <__assert_fail@plt+0x8abc>
   1a018:	mov	r0, #1
   1a01c:	mov	r4, ip
   1a020:	str	r0, [sp, #72]	; 0x48
   1a024:	ldr	r0, [sp, #56]	; 0x38
   1a028:	cmp	r0, #0
   1a02c:	bne	192dc <__assert_fail@plt+0x7bdc>
   1a030:	b	1a1fc <__assert_fail@plt+0x8afc>
   1a034:	ldr	r0, [r6, #8]
   1a038:	cmp	r0, #1
   1a03c:	blt	1a110 <__assert_fail@plt+0x8a10>
   1a040:	ldr	r4, [sp, #188]	; 0xbc
   1a044:	mov	r5, #0
   1a048:	str	ip, [sp, #8]
   1a04c:	b	1a07c <__assert_fail@plt+0x897c>
   1a050:	add	r1, r1, #1
   1a054:	str	r7, [r0, #4]
   1a058:	ldr	ip, [sp, #8]
   1a05c:	mov	r9, #1
   1a060:	str	r1, [sp, #228]	; 0xe4
   1a064:	mov	r1, #0
   1a068:	str	r1, [r0]
   1a06c:	ldr	r0, [r6, #8]
   1a070:	add	r5, r5, #1
   1a074:	cmp	r5, r0
   1a078:	bge	1a110 <__assert_fail@plt+0x8a10>
   1a07c:	ldr	r1, [r6, #12]
   1a080:	ldr	r7, [r1, r5, lsl #2]
   1a084:	ldr	r1, [r4]
   1a088:	add	r2, r1, r7, lsl #3
   1a08c:	ldrb	r2, [r2, #4]
   1a090:	cmp	r2, #8
   1a094:	bne	1a070 <__assert_fail@plt+0x8970>
   1a098:	ldr	r1, [r1, r7, lsl #3]
   1a09c:	cmp	r1, #31
   1a0a0:	bgt	1a070 <__assert_fail@plt+0x8970>
   1a0a4:	ldr	r2, [r4, #80]	; 0x50
   1a0a8:	tst	r2, r9, lsl r1
   1a0ac:	beq	1a070 <__assert_fail@plt+0x8970>
   1a0b0:	ldr	r0, [sp, #228]	; 0xe4
   1a0b4:	ldr	r9, [sp, #232]	; 0xe8
   1a0b8:	cmp	r0, r9
   1a0bc:	beq	1a0ec <__assert_fail@plt+0x89ec>
   1a0c0:	mov	r0, #1
   1a0c4:	mov	r1, #24
   1a0c8:	bl	2b88c <__assert_fail@plt+0x1a18c>
   1a0cc:	ldr	r1, [sp, #228]	; 0xe4
   1a0d0:	ldr	r2, [sp, #236]	; 0xec
   1a0d4:	str	r0, [r2, r1, lsl #2]
   1a0d8:	ldr	r0, [sp, #236]	; 0xec
   1a0dc:	ldr	r0, [r0, r1, lsl #2]
   1a0e0:	cmp	r0, #0
   1a0e4:	bne	1a050 <__assert_fail@plt+0x8950>
   1a0e8:	b	1a27c <__assert_fail@plt+0x8b7c>
   1a0ec:	ldr	r0, [sp, #236]	; 0xec
   1a0f0:	lsl	r1, r9, #3
   1a0f4:	bl	2b910 <__assert_fail@plt+0x1a210>
   1a0f8:	cmp	r0, #0
   1a0fc:	beq	1a27c <__assert_fail@plt+0x8b7c>
   1a100:	str	r0, [sp, #236]	; 0xec
   1a104:	lsl	r0, r9, #1
   1a108:	str	r0, [sp, #232]	; 0xe8
   1a10c:	b	1a0c0 <__assert_fail@plt+0x89c0>
   1a110:	mov	r8, #0
   1a114:	str	r8, [fp, #-196]	; 0xffffff3c
   1a118:	ldrb	r0, [r6, #52]	; 0x34
   1a11c:	tst	r0, #64	; 0x40
   1a120:	beq	192c4 <__assert_fail@plt+0x7bc4>
   1a124:	add	r1, r6, #4
   1a128:	add	r0, sp, #104	; 0x68
   1a12c:	mov	r4, ip
   1a130:	bl	23da0 <__assert_fail@plt+0x126a0>
   1a134:	mov	ip, r4
   1a138:	cmp	r0, #0
   1a13c:	str	r0, [fp, #-196]	; 0xffffff3c
   1a140:	beq	192c4 <__assert_fail@plt+0x7bc4>
   1a144:	mov	r4, r0
   1a148:	cmn	r4, #1
   1a14c:	bne	19ad8 <__assert_fail@plt+0x83d8>
   1a150:	b	19f20 <__assert_fail@plt+0x8820>
   1a154:	ldr	r1, [sp, #76]	; 0x4c
   1a158:	mov	r0, #0
   1a15c:	mov	r6, r7
   1a160:	cmp	r7, r1
   1a164:	ldr	r1, [sp, #100]	; 0x64
   1a168:	ldrblt	r0, [r1, r7]
   1a16c:	cmp	ip, #0
   1a170:	ldrbne	r0, [ip, r0]
   1a174:	ldrb	r0, [r5, r0]
   1a178:	cmp	r0, #0
   1a17c:	bne	1923c <__assert_fail@plt+0x7b3c>
   1a180:	b	1b54c <__assert_fail@plt+0x9e4c>
   1a184:	ldr	r3, [sp, #164]	; 0xa4
   1a188:	ldr	r7, [sp, #44]	; 0x2c
   1a18c:	tst	r3, #1
   1a190:	beq	19f88 <__assert_fail@plt+0x8888>
   1a194:	b	1a1ac <__assert_fail@plt+0x8aac>
   1a198:	ldr	r0, [sp, #192]	; 0xc0
   1a19c:	and	r0, r0, #2
   1a1a0:	eor	r3, r0, #10
   1a1a4:	tst	r3, #1
   1a1a8:	beq	19f88 <__assert_fail@plt+0x8888>
   1a1ac:	ldr	r6, [r4, #40]	; 0x28
   1a1b0:	cmp	r6, #0
   1a1b4:	bne	192a0 <__assert_fail@plt+0x7ba0>
   1a1b8:	b	1b34c <__assert_fail@plt+0x9c4c>
   1a1bc:	add	r0, sp, #104	; 0x68
   1a1c0:	mov	r1, r6
   1a1c4:	mov	r2, ip
   1a1c8:	mov	r4, ip
   1a1cc:	bl	2396c <__assert_fail@plt+0x1226c>
   1a1d0:	clz	r1, r0
   1a1d4:	cmp	r0, #0
   1a1d8:	mov	ip, r4
   1a1dc:	lsr	r2, r1, #5
   1a1e0:	ldr	r1, [sp, #56]	; 0x38
   1a1e4:	movwne	r0, #1
   1a1e8:	mvneq	r4, #0
   1a1ec:	str	r0, [sp, #72]	; 0x48
   1a1f0:	orr	r1, r1, r2
   1a1f4:	cmp	r1, #0
   1a1f8:	bne	192dc <__assert_fail@plt+0x7bdc>
   1a1fc:	mov	r4, ip
   1a200:	cmn	r4, #1
   1a204:	bne	19ad8 <__assert_fail@plt+0x83d8>
   1a208:	b	19f20 <__assert_fail@plt+0x8820>
   1a20c:	ldr	r0, [sp, #28]
   1a210:	b	1a248 <__assert_fail@plt+0x8b48>
   1a214:	mov	r0, #0
   1a218:	b	1a248 <__assert_fail@plt+0x8b48>
   1a21c:	mov	r0, r5
   1a220:	mov	r8, ip
   1a224:	bl	115f8 <iswalnum@plt>
   1a228:	mov	ip, r8
   1a22c:	cmp	r5, #95	; 0x5f
   1a230:	beq	1a1ac <__assert_fail@plt+0x8aac>
   1a234:	cmp	r0, #0
   1a238:	beq	19f68 <__assert_fail@plt+0x8868>
   1a23c:	b	1a1ac <__assert_fail@plt+0x8aac>
   1a240:	ldr	r0, [sp, #28]
   1a244:	ldr	sl, [sp, #64]	; 0x40
   1a248:	str	r0, [sp, #12]
   1a24c:	mov	r0, r6
   1a250:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a254:	ldr	r0, [sp, #12]
   1a258:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a25c:	ldr	r9, [sp, #96]	; 0x60
   1a260:	cmp	r8, #0
   1a264:	beq	1a2ac <__assert_fail@plt+0x8bac>
   1a268:	ldr	sl, [sp, #68]	; 0x44
   1a26c:	cmp	r8, #1
   1a270:	mov	r9, #1
   1a274:	beq	19f20 <__assert_fail@plt+0x8820>
   1a278:	b	1b2e4 <__assert_fail@plt+0x9be4>
   1a27c:	mov	r4, #12
   1a280:	b	19ae0 <__assert_fail@plt+0x83e0>
   1a284:	ldr	r0, [sp, #204]	; 0xcc
   1a288:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a28c:	mov	r0, #0
   1a290:	str	r5, [sp, #200]	; 0xc8
   1a294:	str	r6, [sp, #204]	; 0xcc
   1a298:	str	r9, [sp, #196]	; 0xc4
   1a29c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a2a0:	mov	r0, #0
   1a2a4:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a2a8:	ldr	r9, [sp, #96]	; 0x60
   1a2ac:	ldr	r0, [sp, #92]	; 0x5c
   1a2b0:	cmp	r0, #0
   1a2b4:	beq	1b2e0 <__assert_fail@plt+0x9be0>
   1a2b8:	ldr	r0, [sp, #92]	; 0x5c
   1a2bc:	ldr	r1, [fp, #16]
   1a2c0:	ldr	r8, [fp, #20]
   1a2c4:	cmp	r0, #1
   1a2c8:	beq	1a2e8 <__assert_fail@plt+0x8be8>
   1a2cc:	ldr	r0, [sp, #32]
   1a2d0:	mvn	r0, r0
   1a2d4:	add	r0, r0, r1
   1a2d8:	mov	r1, #255	; 0xff
   1a2dc:	lsl	r2, r0, #3
   1a2e0:	add	r0, r8, #8
   1a2e4:	bl	11610 <memset@plt>
   1a2e8:	mov	r0, #0
   1a2ec:	ldr	r1, [sp, #196]	; 0xc4
   1a2f0:	stm	r8, {r0, r1}
   1a2f4:	ldr	r0, [sp, #92]	; 0x5c
   1a2f8:	cmp	r0, #2
   1a2fc:	bcc	1b1e0 <__assert_fail@plt+0x9ae0>
   1a300:	ldrb	r0, [sl, #28]
   1a304:	ands	r0, r0, #16
   1a308:	bne	1b1e0 <__assert_fail@plt+0x9ae0>
   1a30c:	ldrb	r1, [r9, #88]	; 0x58
   1a310:	sub	r5, fp, #48	; 0x30
   1a314:	mov	r0, #0
   1a318:	tst	r1, #1
   1a31c:	mov	r1, #0
   1a320:	beq	1a334 <__assert_fail@plt+0x8c34>
   1a324:	ldr	r2, [r9, #76]	; 0x4c
   1a328:	mov	r1, #0
   1a32c:	cmp	r2, #0
   1a330:	movwgt	r1, #1
   1a334:	movw	r2, #52760	; 0xce18
   1a338:	ldr	r7, [sl]
   1a33c:	cmp	r1, #0
   1a340:	mov	r6, #0
   1a344:	movt	r2, #2
   1a348:	vldr	d16, [r2]
   1a34c:	ldr	r2, [r2, #8]
   1a350:	str	r2, [fp, #-40]	; 0xffffffd8
   1a354:	sub	r2, fp, #192	; 0xc0
   1a358:	add	r4, r2, #12
   1a35c:	mov	r2, #16
   1a360:	vstr	d16, [fp, #-48]	; 0xffffffd0
   1a364:	str	r4, [fp, #-184]	; 0xffffff48
   1a368:	str	r2, [fp, #-188]	; 0xffffff44
   1a36c:	str	r0, [fp, #-192]	; 0xffffff40
   1a370:	beq	1a390 <__assert_fail@plt+0x8c90>
   1a374:	mov	r0, #48	; 0x30
   1a378:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1a37c:	cmp	r0, #0
   1a380:	str	r0, [fp, #-40]	; 0xffffffd8
   1a384:	beq	1b34c <__assert_fail@plt+0x9c4c>
   1a388:	ldr	r0, [fp, #-192]	; 0xffffff40
   1a38c:	mov	r6, r5
   1a390:	ldr	r5, [sp, #92]	; 0x5c
   1a394:	ldr	sl, [r7, #72]	; 0x48
   1a398:	str	r4, [sp, #88]	; 0x58
   1a39c:	cmp	r0, r5
   1a3a0:	bcs	1a488 <__assert_fail@plt+0x8d88>
   1a3a4:	sub	r0, fp, #192	; 0xc0
   1a3a8:	mov	r1, r5
   1a3ac:	mov	r2, r4
   1a3b0:	mov	r3, #8
   1a3b4:	bl	2b9e8 <__assert_fail@plt+0x1a2e8>
   1a3b8:	cmp	r0, #0
   1a3bc:	bne	1a48c <__assert_fail@plt+0x8d8c>
   1a3c0:	ldr	r1, [sp, #88]	; 0x58
   1a3c4:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a3c8:	mov	r4, r6
   1a3cc:	mov	r5, r1
   1a3d0:	cmp	r0, r1
   1a3d4:	beq	1a3dc <__assert_fail@plt+0x8cdc>
   1a3d8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a3dc:	mov	r0, #16
   1a3e0:	str	r5, [fp, #-184]	; 0xffffff48
   1a3e4:	mov	r8, #12
   1a3e8:	cmp	r4, #0
   1a3ec:	str	r0, [fp, #-188]	; 0xffffff44
   1a3f0:	mov	r0, #0
   1a3f4:	str	r0, [fp, #-192]	; 0xffffff40
   1a3f8:	beq	1b2e4 <__assert_fail@plt+0x9be4>
   1a3fc:	ldr	r1, [r4]
   1a400:	mov	r0, r4
   1a404:	ldr	r0, [r4, #8]
   1a408:	cmp	r1, #1
   1a40c:	blt	1b3dc <__assert_fail@plt+0x9cdc>
   1a410:	mov	r5, #0
   1a414:	mov	r6, #0
   1a418:	add	r0, r0, r5
   1a41c:	ldr	r0, [r0, #20]
   1a420:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a424:	ldr	r0, [r4, #8]
   1a428:	add	r0, r0, r5
   1a42c:	ldr	r0, [r0, #8]
   1a430:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a434:	ldr	r1, [r4]
   1a438:	ldr	r0, [r4, #8]
   1a43c:	add	r6, r6, #1
   1a440:	add	r5, r5, #24
   1a444:	cmp	r6, r1
   1a448:	blt	1a418 <__assert_fail@plt+0x8d18>
   1a44c:	b	1b3dc <__assert_fail@plt+0x9cdc>
   1a450:	ldr	r1, [r3, #8]
   1a454:	cmp	r1, #0
   1a458:	beq	1a468 <__assert_fail@plt+0x8d68>
   1a45c:	ldrsb	r1, [r4, #28]
   1a460:	cmp	r1, #0
   1a464:	bmi	18d9c <__assert_fail@plt+0x769c>
   1a468:	mov	r1, #0
   1a46c:	cmp	r6, #0
   1a470:	str	r1, [sp, #80]	; 0x50
   1a474:	beq	1b344 <__assert_fail@plt+0x9c44>
   1a478:	cmp	sl, #0
   1a47c:	mov	r6, #0
   1a480:	bne	1b338 <__assert_fail@plt+0x9c38>
   1a484:	b	18da0 <__assert_fail@plt+0x76a0>
   1a488:	str	r5, [fp, #-192]	; 0xffffff40
   1a48c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a490:	lsl	r2, r5, #3
   1a494:	mov	r1, r8
   1a498:	str	r2, [sp, #76]	; 0x4c
   1a49c:	str	r0, [sp, #84]	; 0x54
   1a4a0:	bl	11448 <memcpy@plt>
   1a4a4:	ldr	r4, [r8]
   1a4a8:	ldr	r0, [r8, #4]
   1a4ac:	mov	ip, #0
   1a4b0:	cmp	r4, r0
   1a4b4:	ble	1a540 <__assert_fail@plt+0x8e40>
   1a4b8:	mov	r0, ip
   1a4bc:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a4c0:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a4c4:	ldr	r4, [sp, #88]	; 0x58
   1a4c8:	cmp	r0, r4
   1a4cc:	beq	1a4d4 <__assert_fail@plt+0x8dd4>
   1a4d0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a4d4:	mov	r0, #16
   1a4d8:	str	r4, [fp, #-184]	; 0xffffff48
   1a4dc:	cmp	r6, #0
   1a4e0:	str	r0, [fp, #-188]	; 0xffffff44
   1a4e4:	mov	r0, #0
   1a4e8:	str	r0, [fp, #-192]	; 0xffffff40
   1a4ec:	beq	1b1e0 <__assert_fail@plt+0x9ae0>
   1a4f0:	ldr	r1, [r6]
   1a4f4:	ldr	r0, [r6, #8]
   1a4f8:	cmp	r1, #1
   1a4fc:	blt	1b1d8 <__assert_fail@plt+0x9ad8>
   1a500:	mov	r4, #0
   1a504:	mov	r5, #0
   1a508:	add	r0, r0, r4
   1a50c:	ldr	r0, [r0, #20]
   1a510:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a514:	ldr	r0, [r6, #8]
   1a518:	add	r0, r0, r4
   1a51c:	ldr	r0, [r0, #8]
   1a520:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a524:	ldr	r1, [r6]
   1a528:	ldr	r0, [r6, #8]
   1a52c:	add	r5, r5, #1
   1a530:	add	r4, r4, #24
   1a534:	cmp	r5, r1
   1a538:	blt	1a508 <__assert_fail@plt+0x8e08>
   1a53c:	b	1b1d8 <__assert_fail@plt+0x9ad8>
   1a540:	add	r0, r8, #4
   1a544:	mov	lr, #1
   1a548:	mov	r5, #0
   1a54c:	mov	ip, #0
   1a550:	mov	r3, #0
   1a554:	str	r7, [sp, #60]	; 0x3c
   1a558:	str	r6, [sp, #68]	; 0x44
   1a55c:	str	r0, [sp, #64]	; 0x40
   1a560:	ldr	r0, [sp, #92]	; 0x5c
   1a564:	lsl	r0, r0, #4
   1a568:	str	r0, [sp, #44]	; 0x2c
   1a56c:	mov	r0, #0
   1a570:	str	r0, [sp, #72]	; 0x48
   1a574:	ldr	r0, [r7]
   1a578:	add	r1, r0, sl, lsl #3
   1a57c:	ldr	r1, [r1, #4]
   1a580:	uxtb	r2, r1
   1a584:	cmp	r2, #9
   1a588:	beq	1a5bc <__assert_fail@plt+0x8ebc>
   1a58c:	cmp	r2, #8
   1a590:	bne	1a638 <__assert_fail@plt+0x8f38>
   1a594:	ldr	r0, [r0, sl, lsl #3]
   1a598:	ldr	r1, [sp, #92]	; 0x5c
   1a59c:	add	r0, r0, #1
   1a5a0:	cmp	r0, r1
   1a5a4:	bge	1a638 <__assert_fail@plt+0x8f38>
   1a5a8:	mov	r1, r8
   1a5ac:	str	r4, [r1, r0, lsl #3]!
   1a5b0:	mvn	r0, #0
   1a5b4:	str	r0, [r1, #4]
   1a5b8:	b	1a638 <__assert_fail@plt+0x8f38>
   1a5bc:	ldr	r0, [r0, sl, lsl #3]
   1a5c0:	ldr	r2, [sp, #92]	; 0x5c
   1a5c4:	add	r0, r0, #1
   1a5c8:	cmp	r0, r2
   1a5cc:	bge	1a638 <__assert_fail@plt+0x8f38>
   1a5d0:	ldr	r2, [r8, r0, lsl #3]
   1a5d4:	cmp	r2, r4
   1a5d8:	bge	1a5f0 <__assert_fail@plt+0x8ef0>
   1a5dc:	add	r0, r8, r0, lsl #3
   1a5e0:	mov	r1, r8
   1a5e4:	str	r4, [r0, #4]
   1a5e8:	ldr	r0, [sp, #84]	; 0x54
   1a5ec:	b	1a610 <__assert_fail@plt+0x8f10>
   1a5f0:	tst	r1, #524288	; 0x80000
   1a5f4:	beq	1a630 <__assert_fail@plt+0x8f30>
   1a5f8:	ldr	r1, [sp, #84]	; 0x54
   1a5fc:	ldr	r1, [r1, r0, lsl #3]
   1a600:	cmn	r1, #1
   1a604:	beq	1a630 <__assert_fail@plt+0x8f30>
   1a608:	ldr	r1, [sp, #84]	; 0x54
   1a60c:	mov	r0, r8
   1a610:	ldr	r2, [sp, #76]	; 0x4c
   1a614:	mov	r7, ip
   1a618:	str	r3, [sp, #48]	; 0x30
   1a61c:	bl	11448 <memcpy@plt>
   1a620:	ldr	r3, [sp, #48]	; 0x30
   1a624:	mov	ip, r7
   1a628:	mov	lr, #1
   1a62c:	b	1a638 <__assert_fail@plt+0x8f38>
   1a630:	add	r0, r8, r0, lsl #3
   1a634:	str	r4, [r0, #4]
   1a638:	ldr	r0, [r8, #4]
   1a63c:	cmp	r4, r0
   1a640:	ldreq	r0, [sp, #200]	; 0xc8
   1a644:	cmpeq	sl, r0
   1a648:	beq	1a6a4 <__assert_fail@plt+0x8fa4>
   1a64c:	cmp	r6, #0
   1a650:	beq	1a77c <__assert_fail@plt+0x907c>
   1a654:	cmp	r3, #1
   1a658:	blt	1a77c <__assert_fail@plt+0x907c>
   1a65c:	str	ip, [sp, #52]	; 0x34
   1a660:	mov	ip, r3
   1a664:	mov	r0, #0
   1a668:	subs	r1, r3, #1
   1a66c:	beq	1a690 <__assert_fail@plt+0x8f90>
   1a670:	add	r2, r0, r1
   1a674:	lsr	r3, r2, #1
   1a678:	ldr	r7, [r5, r3, lsl #2]
   1a67c:	cmp	r7, sl
   1a680:	addlt	r0, lr, r2, lsr #1
   1a684:	movge	r1, r3
   1a688:	cmp	r0, r1
   1a68c:	bcc	1a670 <__assert_fail@plt+0x8f70>
   1a690:	ldr	r0, [r5, r0, lsl #2]
   1a694:	mov	r3, ip
   1a698:	ldr	ip, [sp, #52]	; 0x34
   1a69c:	cmp	r0, sl
   1a6a0:	bne	1a77c <__assert_fail@plt+0x907c>
   1a6a4:	ldr	r4, [sp, #88]	; 0x58
   1a6a8:	cmp	r6, #0
   1a6ac:	beq	1b158 <__assert_fail@plt+0x9a58>
   1a6b0:	ldr	r0, [sp, #92]	; 0x5c
   1a6b4:	ldr	r1, [sp, #64]	; 0x40
   1a6b8:	ldr	r2, [r1, #-4]
   1a6bc:	cmp	r2, #0
   1a6c0:	bpl	1a6dc <__assert_fail@plt+0x8fdc>
   1a6c4:	subs	r0, r0, #1
   1a6c8:	add	r1, r1, #8
   1a6cc:	beq	1b158 <__assert_fail@plt+0x9a58>
   1a6d0:	ldr	r2, [r1, #-4]
   1a6d4:	cmp	r2, #0
   1a6d8:	bmi	1a6c4 <__assert_fail@plt+0x8fc4>
   1a6dc:	ldr	r2, [r1]
   1a6e0:	cmn	r2, #1
   1a6e4:	bne	1a6c4 <__assert_fail@plt+0x8fc4>
   1a6e8:	ldr	r0, [r6]
   1a6ec:	cmp	r0, #0
   1a6f0:	beq	1b158 <__assert_fail@plt+0x9a58>
   1a6f4:	sub	r1, r0, #1
   1a6f8:	ldr	r7, [sp, #76]	; 0x4c
   1a6fc:	mov	r0, r8
   1a700:	mov	r8, ip
   1a704:	str	r1, [r6]
   1a708:	add	sl, r1, r1, lsl #1
   1a70c:	ldr	r4, [r6, #8]
   1a710:	mov	r2, r7
   1a714:	ldr	r1, [r4, sl, lsl #3]!
   1a718:	str	r1, [sp, #100]	; 0x64
   1a71c:	ldr	r1, [r4, #8]
   1a720:	bl	11448 <memcpy@plt>
   1a724:	ldr	r0, [r4, #8]
   1a728:	ldr	r1, [sp, #92]	; 0x5c
   1a72c:	mov	r2, r7
   1a730:	add	r1, r0, r1, lsl #3
   1a734:	ldr	r0, [sp, #84]	; 0x54
   1a738:	bl	11448 <memcpy@plt>
   1a73c:	mov	r0, r8
   1a740:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a744:	ldr	r0, [r6, #8]
   1a748:	add	r0, r0, sl, lsl #3
   1a74c:	ldr	r0, [r0, #8]
   1a750:	bl	13ddc <__assert_fail@plt+0x26dc>
   1a754:	ldr	r0, [r6, #8]
   1a758:	mov	lr, #1
   1a75c:	add	r0, r0, sl, lsl #3
   1a760:	ldr	ip, [r0, #20]
   1a764:	ldr	r1, [r0, #12]
   1a768:	ldr	sl, [r0, #4]
   1a76c:	ldr	r3, [r0, #16]
   1a770:	mov	r5, ip
   1a774:	str	r1, [sp, #72]	; 0x48
   1a778:	b	1a780 <__assert_fail@plt+0x9080>
   1a77c:	str	r4, [sp, #100]	; 0x64
   1a780:	ldr	r4, [sp, #188]	; 0xbc
   1a784:	ldr	r0, [r4]
   1a788:	add	r1, r0, sl, lsl #3
   1a78c:	ldr	r1, [r1, #4]
   1a790:	tst	r1, #8
   1a794:	bne	1a868 <__assert_fail@plt+0x9168>
   1a798:	tst	r1, #1048576	; 0x100000
   1a79c:	bne	1a8f8 <__assert_fail@plt+0x91f8>
   1a7a0:	uxtb	r1, r1
   1a7a4:	cmp	r1, #4
   1a7a8:	bne	1a924 <__assert_fail@plt+0x9224>
   1a7ac:	ldr	r0, [r0, sl, lsl #3]
   1a7b0:	ldr	r2, [sp, #92]	; 0x5c
   1a7b4:	str	r5, [sp, #56]	; 0x38
   1a7b8:	mov	r7, #0
   1a7bc:	mov	r5, r2
   1a7c0:	add	r0, r0, #1
   1a7c4:	cmp	r0, r2
   1a7c8:	bge	1a7dc <__assert_fail@plt+0x90dc>
   1a7cc:	ldr	r1, [fp, #20]
   1a7d0:	ldr	r2, [r1, r0, lsl #3]!
   1a7d4:	ldr	r1, [r1, #4]
   1a7d8:	sub	r7, r1, r2
   1a7dc:	ldr	r8, [sp, #100]	; 0x64
   1a7e0:	cmp	r6, #0
   1a7e4:	beq	1abe8 <__assert_fail@plt+0x94e8>
   1a7e8:	cmp	r0, r5
   1a7ec:	bge	1a84c <__assert_fail@plt+0x914c>
   1a7f0:	ldr	r2, [fp, #20]
   1a7f4:	ldr	r1, [r2, r0, lsl #3]
   1a7f8:	cmn	r1, #1
   1a7fc:	beq	1a84c <__assert_fail@plt+0x914c>
   1a800:	add	r0, r2, r0, lsl #3
   1a804:	ldr	r0, [r0, #4]
   1a808:	cmn	r0, #1
   1a80c:	beq	1a84c <__assert_fail@plt+0x914c>
   1a810:	cmp	r7, #0
   1a814:	beq	1ac60 <__assert_fail@plt+0x9560>
   1a818:	ldr	r0, [sp, #132]	; 0x84
   1a81c:	sub	r0, r0, r8
   1a820:	cmp	r0, r7
   1a824:	blt	1a84c <__assert_fail@plt+0x914c>
   1a828:	ldr	r2, [sp, #108]	; 0x6c
   1a82c:	str	ip, [sp, #52]	; 0x34
   1a830:	add	r0, r2, r1
   1a834:	add	r1, r2, r8
   1a838:	mov	r2, r7
   1a83c:	bl	115b0 <bcmp@plt>
   1a840:	cmp	r0, #0
   1a844:	beq	1ae1c <__assert_fail@plt+0x971c>
   1a848:	ldr	ip, [sp, #52]	; 0x34
   1a84c:	mov	sl, r5
   1a850:	ldr	r5, [sp, #56]	; 0x38
   1a854:	ldr	r4, [sp, #88]	; 0x58
   1a858:	ldr	r0, [r6]
   1a85c:	cmp	r0, #0
   1a860:	bne	1ae58 <__assert_fail@plt+0x9758>
   1a864:	b	1b354 <__assert_fail@plt+0x9c54>
   1a868:	ldr	r0, [sp, #204]	; 0xcc
   1a86c:	ldr	r1, [sp, #100]	; 0x64
   1a870:	ldr	r8, [r4, #20]
   1a874:	cmp	r3, #1
   1a878:	ldr	r7, [r0, r1, lsl #2]
   1a87c:	blt	1a8d0 <__assert_fail@plt+0x91d0>
   1a880:	mov	r4, r3
   1a884:	mov	r0, #0
   1a888:	subs	r1, r3, #1
   1a88c:	str	r7, [sp, #80]	; 0x50
   1a890:	beq	1a8b4 <__assert_fail@plt+0x91b4>
   1a894:	add	r2, r0, r1
   1a898:	lsr	r3, r2, #1
   1a89c:	ldr	r7, [r5, r3, lsl #2]
   1a8a0:	cmp	r7, sl
   1a8a4:	addlt	r0, lr, r2, lsr #1
   1a8a8:	movge	r1, r3
   1a8ac:	cmp	r0, r1
   1a8b0:	bcc	1a894 <__assert_fail@plt+0x9194>
   1a8b4:	ldr	r0, [r5, r0, lsl #2]
   1a8b8:	ldr	r7, [sp, #80]	; 0x50
   1a8bc:	mov	r3, r4
   1a8c0:	cmp	r0, sl
   1a8c4:	bne	1a8d0 <__assert_fail@plt+0x91d0>
   1a8c8:	str	r5, [sp, #56]	; 0x38
   1a8cc:	b	1aa18 <__assert_fail@plt+0x9318>
   1a8d0:	ldr	r0, [sp, #72]	; 0x48
   1a8d4:	cmp	r0, #0
   1a8d8:	beq	1a9ec <__assert_fail@plt+0x92ec>
   1a8dc:	cmp	r3, #0
   1a8e0:	str	r5, [sp, #56]	; 0x38
   1a8e4:	bne	1aef8 <__assert_fail@plt+0x97f8>
   1a8e8:	mov	r0, r5
   1a8ec:	str	sl, [r5]
   1a8f0:	mov	r3, #1
   1a8f4:	b	1aa18 <__assert_fail@plt+0x9318>
   1a8f8:	ldr	r3, [sp, #100]	; 0x64
   1a8fc:	mov	r0, r4
   1a900:	mov	r1, sl
   1a904:	add	r2, sp, #104	; 0x68
   1a908:	mov	r8, ip
   1a90c:	bl	26664 <__assert_fail@plt+0x14f64>
   1a910:	mov	lr, #1
   1a914:	mov	r1, r0
   1a918:	cmp	r1, #0
   1a91c:	mov	ip, r8
   1a920:	bne	1a950 <__assert_fail@plt+0x9250>
   1a924:	ldr	r0, [r4]
   1a928:	ldr	r2, [sp, #100]	; 0x64
   1a92c:	mov	r6, ip
   1a930:	add	r1, r0, sl, lsl #3
   1a934:	add	r0, sp, #104	; 0x68
   1a938:	bl	269f0 <__assert_fail@plt+0x152f0>
   1a93c:	mov	ip, r6
   1a940:	mov	lr, #1
   1a944:	mov	r1, #1
   1a948:	cmp	r0, #0
   1a94c:	beq	1aa38 <__assert_fail@plt+0x9338>
   1a950:	ldr	r0, [r4, #12]
   1a954:	ldr	r2, [sp, #100]	; 0x64
   1a958:	ldr	r6, [sp, #68]	; 0x44
   1a95c:	ldr	r7, [r0, sl, lsl #2]
   1a960:	add	r2, r1, r2
   1a964:	cmp	r6, #0
   1a968:	beq	1aae0 <__assert_fail@plt+0x93e0>
   1a96c:	ldr	r0, [sp, #196]	; 0xc4
   1a970:	ldr	r4, [sp, #88]	; 0x58
   1a974:	cmp	r2, r0
   1a978:	bgt	1ae48 <__assert_fail@plt+0x9748>
   1a97c:	ldr	r0, [sp, #204]	; 0xcc
   1a980:	ldr	r0, [r0, r2, lsl #2]
   1a984:	cmp	r0, #0
   1a988:	beq	1ae48 <__assert_fail@plt+0x9748>
   1a98c:	ldr	r1, [r0, #8]
   1a990:	cmp	r1, #1
   1a994:	blt	1ae48 <__assert_fail@plt+0x9748>
   1a998:	ldr	r0, [r0, #12]
   1a99c:	str	r2, [sp, #100]	; 0x64
   1a9a0:	mov	r8, r5
   1a9a4:	subs	r1, r1, #1
   1a9a8:	mov	r2, #0
   1a9ac:	beq	1a9d4 <__assert_fail@plt+0x92d4>
   1a9b0:	mov	r2, #0
   1a9b4:	add	r3, r2, r1
   1a9b8:	lsr	r6, r3, #1
   1a9bc:	ldr	r5, [r0, r6, lsl #2]
   1a9c0:	cmp	r5, r7
   1a9c4:	addlt	r2, lr, r3, lsr #1
   1a9c8:	movge	r1, r6
   1a9cc:	cmp	r2, r1
   1a9d0:	bcc	1a9b4 <__assert_fail@plt+0x92b4>
   1a9d4:	ldr	r0, [r0, r2, lsl #2]
   1a9d8:	mov	r3, #0
   1a9dc:	mov	r5, r8
   1a9e0:	cmp	r0, r7
   1a9e4:	bne	1aa38 <__assert_fail@plt+0x9338>
   1a9e8:	b	1abcc <__assert_fail@plt+0x94cc>
   1a9ec:	mov	r0, #4
   1a9f0:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1a9f4:	cmp	r0, #0
   1a9f8:	beq	1b554 <__assert_fail@plt+0x9e54>
   1a9fc:	mov	ip, r0
   1aa00:	str	sl, [r0]
   1aa04:	mov	r0, #1
   1aa08:	mov	r3, #1
   1aa0c:	mov	lr, #1
   1aa10:	str	r0, [sp, #72]	; 0x48
   1aa14:	str	ip, [sp, #56]	; 0x38
   1aa18:	add	r0, sl, sl, lsl #1
   1aa1c:	add	r1, r8, r0, lsl #2
   1aa20:	ldr	sl, [r1, #4]
   1aa24:	cmp	sl, #1
   1aa28:	ldrge	r2, [r7, #8]
   1aa2c:	subsge	r2, r2, #1
   1aa30:	bge	1aa5c <__assert_fail@plt+0x935c>
   1aa34:	ldr	r5, [sp, #56]	; 0x38
   1aa38:	ldr	r6, [sp, #68]	; 0x44
   1aa3c:	cmp	r6, #0
   1aa40:	beq	1b3ec <__assert_fail@plt+0x9cec>
   1aa44:	ldr	sl, [sp, #92]	; 0x5c
   1aa48:	ldr	r4, [sp, #88]	; 0x58
   1aa4c:	ldr	r0, [r6]
   1aa50:	cmp	r0, #0
   1aa54:	bne	1ae58 <__assert_fail@plt+0x9758>
   1aa58:	b	1b354 <__assert_fail@plt+0x9c54>
   1aa5c:	str	r3, [sp, #48]	; 0x30
   1aa60:	ldr	r1, [r1, #8]
   1aa64:	ldr	r3, [r7, #12]
   1aa68:	cmp	r2, #0
   1aa6c:	beq	1ab0c <__assert_fail@plt+0x940c>
   1aa70:	mov	r5, #0
   1aa74:	mvn	lr, #0
   1aa78:	str	ip, [sp, #52]	; 0x34
   1aa7c:	str	r2, [sp, #80]	; 0x50
   1aa80:	b	1aa94 <__assert_fail@plt+0x9394>
   1aa84:	ldr	r2, [sp, #80]	; 0x50
   1aa88:	add	r5, r5, #1
   1aa8c:	cmp	r5, sl
   1aa90:	beq	1aafc <__assert_fail@plt+0x93fc>
   1aa94:	ldr	r4, [r1, r5, lsl #2]
   1aa98:	mov	r7, #0
   1aa9c:	mov	ip, #1
   1aaa0:	add	r6, r7, r2
   1aaa4:	lsr	r0, r6, #1
   1aaa8:	ldr	r9, [r3, r0, lsl #2]
   1aaac:	cmp	r9, r4
   1aab0:	addlt	r7, ip, r6, lsr #1
   1aab4:	movge	r2, r0
   1aab8:	cmp	r7, r2
   1aabc:	bcc	1aaa0 <__assert_fail@plt+0x93a0>
   1aac0:	ldr	r0, [r3, r7, lsl #2]
   1aac4:	cmp	r0, r4
   1aac8:	bne	1aa84 <__assert_fail@plt+0x9384>
   1aacc:	cmn	lr, #1
   1aad0:	mov	r7, lr
   1aad4:	mov	lr, r4
   1aad8:	beq	1aa84 <__assert_fail@plt+0x9384>
   1aadc:	b	1ab50 <__assert_fail@plt+0x9450>
   1aae0:	str	r2, [sp, #100]	; 0x64
   1aae4:	mov	r3, #0
   1aae8:	cmn	r7, #1
   1aaec:	bgt	1abd4 <__assert_fail@plt+0x94d4>
   1aaf0:	cmn	r7, #2
   1aaf4:	bne	1aa38 <__assert_fail@plt+0x9338>
   1aaf8:	b	1b4b4 <__assert_fail@plt+0x9db4>
   1aafc:	ldr	ip, [sp, #52]	; 0x34
   1ab00:	mov	r7, lr
   1ab04:	mov	lr, #1
   1ab08:	b	1abc4 <__assert_fail@plt+0x94c4>
   1ab0c:	ldr	r4, [r3]
   1ab10:	mvn	r7, #0
   1ab14:	ldr	r2, [r1]
   1ab18:	cmp	r4, r2
   1ab1c:	beq	1ab40 <__assert_fail@plt+0x9440>
   1ab20:	mov	r2, r7
   1ab24:	add	r1, r1, #4
   1ab28:	subs	sl, sl, #1
   1ab2c:	mov	r7, r2
   1ab30:	beq	1abc0 <__assert_fail@plt+0x94c0>
   1ab34:	ldr	r2, [r1]
   1ab38:	cmp	r4, r2
   1ab3c:	bne	1ab20 <__assert_fail@plt+0x9420>
   1ab40:	cmn	r7, #1
   1ab44:	mov	r2, r4
   1ab48:	beq	1ab24 <__assert_fail@plt+0x9424>
   1ab4c:	str	ip, [sp, #52]	; 0x34
   1ab50:	ldr	r3, [sp, #48]	; 0x30
   1ab54:	ldr	sl, [sp, #68]	; 0x44
   1ab58:	ldr	ip, [sp, #52]	; 0x34
   1ab5c:	ldr	r8, [sp, #56]	; 0x38
   1ab60:	mov	lr, #1
   1ab64:	cmp	r3, #1
   1ab68:	blt	1ac14 <__assert_fail@plt+0x9514>
   1ab6c:	mov	r0, #0
   1ab70:	mov	r5, r8
   1ab74:	subs	r1, r3, #1
   1ab78:	beq	1ab9c <__assert_fail@plt+0x949c>
   1ab7c:	add	r2, r0, r1
   1ab80:	lsr	r3, r2, #1
   1ab84:	ldr	r6, [r5, r3, lsl #2]
   1ab88:	cmp	r6, r7
   1ab8c:	addlt	r0, lr, r2, lsr #1
   1ab90:	movge	r1, r3
   1ab94:	cmp	r0, r1
   1ab98:	bcc	1ab7c <__assert_fail@plt+0x947c>
   1ab9c:	ldr	r0, [r5, r0, lsl #2]
   1aba0:	ldr	r3, [sp, #48]	; 0x30
   1aba4:	cmp	r0, r7
   1aba8:	bne	1ac14 <__assert_fail@plt+0x9514>
   1abac:	mov	r7, r4
   1abb0:	mov	r5, r8
   1abb4:	cmn	r7, #1
   1abb8:	bgt	1abd4 <__assert_fail@plt+0x94d4>
   1abbc:	b	1aaf0 <__assert_fail@plt+0x93f0>
   1abc0:	mov	r7, r2
   1abc4:	ldr	r5, [sp, #56]	; 0x38
   1abc8:	ldr	r3, [sp, #48]	; 0x30
   1abcc:	cmn	r7, #1
   1abd0:	ble	1aaf0 <__assert_fail@plt+0x93f0>
   1abd4:	ldr	r8, [fp, #20]
   1abd8:	ldr	r6, [sp, #68]	; 0x44
   1abdc:	ldr	r4, [sp, #100]	; 0x64
   1abe0:	mov	sl, r7
   1abe4:	b	1aee0 <__assert_fail@plt+0x97e0>
   1abe8:	cmp	r7, #0
   1abec:	beq	1ac60 <__assert_fail@plt+0x9560>
   1abf0:	ldr	r0, [r4, #12]
   1abf4:	add	r8, r7, r8
   1abf8:	ldr	r5, [sp, #56]	; 0x38
   1abfc:	mov	r3, #0
   1ac00:	str	r8, [sp, #100]	; 0x64
   1ac04:	ldr	r7, [r0, sl, lsl #2]
   1ac08:	cmn	r7, #1
   1ac0c:	bgt	1abd4 <__assert_fail@plt+0x94d4>
   1ac10:	b	1aaf0 <__assert_fail@plt+0x93f0>
   1ac14:	cmp	sl, #0
   1ac18:	beq	1ac88 <__assert_fail@plt+0x9588>
   1ac1c:	ldr	r6, [sl]
   1ac20:	ldr	r0, [sl, #4]
   1ac24:	add	r1, r6, #1
   1ac28:	cmp	r1, r0
   1ac2c:	str	r1, [sl]
   1ac30:	bne	1ac98 <__assert_fail@plt+0x9598>
   1ac34:	ldr	r0, [sl, #8]
   1ac38:	add	r1, r1, r1, lsl #1
   1ac3c:	lsl	r1, r1, #4
   1ac40:	bl	2b910 <__assert_fail@plt+0x1a210>
   1ac44:	cmp	r0, #0
   1ac48:	beq	1b4b0 <__assert_fail@plt+0x9db0>
   1ac4c:	str	r0, [sl, #8]
   1ac50:	ldr	r1, [sl, #4]
   1ac54:	lsl	r1, r1, #1
   1ac58:	str	r1, [sl, #4]
   1ac5c:	b	1ac9c <__assert_fail@plt+0x959c>
   1ac60:	ldr	r0, [sp, #72]	; 0x48
   1ac64:	str	r7, [sp, #80]	; 0x50
   1ac68:	cmp	r0, #0
   1ac6c:	beq	1ad6c <__assert_fail@plt+0x966c>
   1ac70:	cmp	r3, #0
   1ac74:	bne	1b03c <__assert_fail@plt+0x993c>
   1ac78:	ldr	r5, [sp, #56]	; 0x38
   1ac7c:	mov	r2, #1
   1ac80:	str	sl, [r5]
   1ac84:	b	1ad98 <__assert_fail@plt+0x9698>
   1ac88:	mov	r5, r8
   1ac8c:	cmn	r7, #1
   1ac90:	bgt	1abd4 <__assert_fail@plt+0x94d4>
   1ac94:	b	1aaf0 <__assert_fail@plt+0x93f0>
   1ac98:	ldr	r0, [sl, #8]
   1ac9c:	ldr	r1, [sp, #100]	; 0x64
   1aca0:	add	r6, r6, r6, lsl #1
   1aca4:	str	r1, [r0, r6, lsl #3]!
   1aca8:	str	r4, [r0, #4]
   1acac:	ldr	r0, [sp, #44]	; 0x2c
   1acb0:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1acb4:	ldr	r1, [sl, #8]
   1acb8:	cmp	r0, #0
   1acbc:	add	r4, r1, r6, lsl #3
   1acc0:	str	r0, [r4, #8]!
   1acc4:	beq	1b4a8 <__assert_fail@plt+0x9da8>
   1acc8:	ldr	r9, [sp, #76]	; 0x4c
   1accc:	ldr	r1, [fp, #20]
   1acd0:	mov	r2, r9
   1acd4:	bl	11448 <memcpy@plt>
   1acd8:	ldr	r0, [r4]
   1acdc:	ldr	r1, [sp, #92]	; 0x5c
   1ace0:	mov	r2, r9
   1ace4:	add	r0, r0, r1, lsl #3
   1ace8:	ldr	r1, [sp, #84]	; 0x54
   1acec:	bl	11448 <memcpy@plt>
   1acf0:	ldr	r0, [sl, #8]
   1acf4:	ldr	r3, [sp, #48]	; 0x30
   1acf8:	add	r5, r0, r6, lsl #3
   1acfc:	cmp	r3, #1
   1ad00:	mov	r6, r5
   1ad04:	str	r3, [r6, #16]!
   1ad08:	sub	sl, r6, #4
   1ad0c:	blt	1ad44 <__assert_fail@plt+0x9644>
   1ad10:	lsl	r4, r3, #2
   1ad14:	str	r3, [sl]
   1ad18:	mov	r0, r4
   1ad1c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1ad20:	cmp	r0, #0
   1ad24:	str	r0, [r5, #20]
   1ad28:	beq	1b55c <__assert_fail@plt+0x9e5c>
   1ad2c:	ldr	r5, [sp, #52]	; 0x34
   1ad30:	mov	r2, r4
   1ad34:	mov	r1, r5
   1ad38:	bl	11448 <memcpy@plt>
   1ad3c:	mov	ip, r5
   1ad40:	b	1ab04 <__assert_fail@plt+0x9404>
   1ad44:	ldr	ip, [sp, #52]	; 0x34
   1ad48:	ldr	r5, [sp, #56]	; 0x38
   1ad4c:	mov	r0, #0
   1ad50:	mov	lr, #1
   1ad54:	str	r0, [sl]
   1ad58:	str	r0, [sl, #4]
   1ad5c:	str	r0, [sl, #8]
   1ad60:	cmn	r7, #1
   1ad64:	bgt	1abd4 <__assert_fail@plt+0x94d4>
   1ad68:	b	1aaf0 <__assert_fail@plt+0x93f0>
   1ad6c:	mov	r0, #4
   1ad70:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1ad74:	cmp	r0, #0
   1ad78:	beq	1b554 <__assert_fail@plt+0x9e54>
   1ad7c:	mov	ip, r0
   1ad80:	str	sl, [r0]
   1ad84:	mov	r0, #1
   1ad88:	mov	r2, #1
   1ad8c:	mov	lr, #1
   1ad90:	str	r0, [sp, #72]	; 0x48
   1ad94:	mov	r5, ip
   1ad98:	ldr	r0, [sp, #204]	; 0xcc
   1ad9c:	ldr	r0, [r0, r8, lsl #2]
   1ada0:	ldr	r1, [r0, #8]
   1ada4:	cmp	r1, #1
   1ada8:	blt	1a924 <__assert_fail@plt+0x9224>
   1adac:	mov	r9, r2
   1adb0:	ldr	r2, [r4, #20]
   1adb4:	add	r3, sl, sl, lsl #1
   1adb8:	mov	r8, ip
   1adbc:	ldr	ip, [r0, #12]
   1adc0:	add	r2, r2, r3, lsl #2
   1adc4:	ldr	r2, [r2, #8]
   1adc8:	ldr	r7, [r2]
   1adcc:	subs	r2, r1, #1
   1add0:	mov	r1, #0
   1add4:	beq	1adf8 <__assert_fail@plt+0x96f8>
   1add8:	add	r3, r1, r2
   1addc:	lsr	r6, r3, #1
   1ade0:	ldr	r0, [ip, r6, lsl #2]
   1ade4:	cmp	r0, r7
   1ade8:	addlt	r1, lr, r3, lsr #1
   1adec:	movge	r2, r6
   1adf0:	cmp	r1, r2
   1adf4:	bcc	1add8 <__assert_fail@plt+0x96d8>
   1adf8:	ldr	r0, [ip, r1, lsl #2]
   1adfc:	ldr	r1, [sp, #80]	; 0x50
   1ae00:	cmp	r0, r7
   1ae04:	bne	1a918 <__assert_fail@plt+0x9218>
   1ae08:	mov	ip, r8
   1ae0c:	mov	r3, r9
   1ae10:	cmn	r7, #1
   1ae14:	bgt	1abd4 <__assert_fail@plt+0x94d4>
   1ae18:	b	1aaf0 <__assert_fail@plt+0x93f0>
   1ae1c:	ldr	r0, [r4, #12]
   1ae20:	add	r8, r7, r8
   1ae24:	ldr	ip, [sp, #52]	; 0x34
   1ae28:	ldr	r5, [sp, #56]	; 0x38
   1ae2c:	mov	lr, #1
   1ae30:	mov	r2, r8
   1ae34:	ldr	r7, [r0, sl, lsl #2]
   1ae38:	ldr	r0, [sp, #196]	; 0xc4
   1ae3c:	ldr	r4, [sp, #88]	; 0x58
   1ae40:	cmp	r2, r0
   1ae44:	ble	1a97c <__assert_fail@plt+0x927c>
   1ae48:	ldr	sl, [sp, #92]	; 0x5c
   1ae4c:	ldr	r0, [r6]
   1ae50:	cmp	r0, #0
   1ae54:	beq	1b354 <__assert_fail@plt+0x9c54>
   1ae58:	sub	r0, r0, #1
   1ae5c:	ldr	r7, [sp, #76]	; 0x4c
   1ae60:	ldr	r8, [fp, #20]
   1ae64:	mov	r9, ip
   1ae68:	str	r0, [r6]
   1ae6c:	add	r5, r0, r0, lsl #1
   1ae70:	ldr	r4, [r6, #8]
   1ae74:	mov	r2, r7
   1ae78:	ldr	r0, [r4, r5, lsl #3]!
   1ae7c:	ldr	r1, [r4, #8]
   1ae80:	str	r0, [sp, #100]	; 0x64
   1ae84:	mov	r0, r8
   1ae88:	bl	11448 <memcpy@plt>
   1ae8c:	ldr	r0, [r4, #8]
   1ae90:	mov	r2, r7
   1ae94:	add	r1, r0, sl, lsl #3
   1ae98:	ldr	r0, [sp, #84]	; 0x54
   1ae9c:	bl	11448 <memcpy@plt>
   1aea0:	ldr	r4, [sp, #100]	; 0x64
   1aea4:	mov	r0, r9
   1aea8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1aeac:	ldr	r0, [r6, #8]
   1aeb0:	add	r0, r0, r5, lsl #3
   1aeb4:	ldr	r0, [r0, #8]
   1aeb8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1aebc:	ldr	r0, [r6, #8]
   1aec0:	mov	lr, #1
   1aec4:	add	r0, r0, r5, lsl #3
   1aec8:	ldr	ip, [r0, #20]
   1aecc:	ldr	r1, [r0, #12]
   1aed0:	ldr	sl, [r0, #4]
   1aed4:	ldr	r3, [r0, #16]
   1aed8:	mov	r5, ip
   1aedc:	str	r1, [sp, #72]	; 0x48
   1aee0:	ldr	r0, [r8, #4]
   1aee4:	ldr	r9, [sp, #96]	; 0x60
   1aee8:	ldr	r7, [sp, #60]	; 0x3c
   1aeec:	cmp	r4, r0
   1aef0:	ble	1a574 <__assert_fail@plt+0x8e74>
   1aef4:	b	1a4b8 <__assert_fail@plt+0x8db8>
   1aef8:	ldr	r0, [sp, #72]	; 0x48
   1aefc:	str	r8, [sp, #52]	; 0x34
   1af00:	mov	r4, ip
   1af04:	mov	r8, r3
   1af08:	str	r7, [sp, #80]	; 0x50
   1af0c:	cmp	r0, r3
   1af10:	bne	1af44 <__assert_fail@plt+0x9844>
   1af14:	ldr	r0, [sp, #72]	; 0x48
   1af18:	lsl	r1, r0, #3
   1af1c:	mov	r0, r4
   1af20:	bl	2b910 <__assert_fail@plt+0x1a210>
   1af24:	ldr	r5, [sp, #56]	; 0x38
   1af28:	cmp	r0, #0
   1af2c:	beq	1b4b4 <__assert_fail@plt+0x9db4>
   1af30:	ldr	r1, [sp, #72]	; 0x48
   1af34:	mov	r4, r0
   1af38:	str	r0, [sp, #56]	; 0x38
   1af3c:	lsl	r1, r1, #1
   1af40:	str	r1, [sp, #72]	; 0x48
   1af44:	ldr	r0, [sp, #56]	; 0x38
   1af48:	ldr	r0, [r0]
   1af4c:	cmp	r0, sl
   1af50:	ble	1afe0 <__assert_fail@plt+0x98e0>
   1af54:	mov	ip, r8
   1af58:	cmp	r8, #1
   1af5c:	blt	1b018 <__assert_fail@plt+0x9918>
   1af60:	mov	r0, r8
   1af64:	ands	r1, r8, #3
   1af68:	sub	r2, r8, #1
   1af6c:	beq	1af9c <__assert_fail@plt+0x989c>
   1af70:	ldr	r0, [sp, #56]	; 0x38
   1af74:	mov	r3, r8
   1af78:	add	r7, r0, r8, lsl #2
   1af7c:	mov	r0, r8
   1af80:	mov	r3, r7
   1af84:	ldr	r6, [r3, #-4]!
   1af88:	subs	r1, r1, #1
   1af8c:	sub	r0, r0, #1
   1af90:	str	r6, [r7]
   1af94:	mov	r7, r3
   1af98:	bne	1af84 <__assert_fail@plt+0x9884>
   1af9c:	mov	ip, #0
   1afa0:	cmp	r2, #3
   1afa4:	bcc	1b018 <__assert_fail@plt+0x9918>
   1afa8:	ldr	r1, [sp, #56]	; 0x38
   1afac:	add	r2, r1, r0, lsl #2
   1afb0:	sub	r2, r2, #8
   1afb4:	ldr	r6, [r2]
   1afb8:	ldr	r1, [r2, #4]
   1afbc:	ldmdb	r2, {r3, r7}
   1afc0:	sub	r0, r0, #4
   1afc4:	cmp	r0, #0
   1afc8:	stmda	r2, {r3, r7}
   1afcc:	str	r6, [r2, #4]
   1afd0:	str	r1, [r2, #8]
   1afd4:	sub	r2, r2, #16
   1afd8:	bgt	1afb4 <__assert_fail@plt+0x98b4>
   1afdc:	b	1b018 <__assert_fail@plt+0x9918>
   1afe0:	ldr	r0, [sp, #56]	; 0x38
   1afe4:	mov	ip, r8
   1afe8:	add	r0, r0, r8, lsl #2
   1afec:	ldr	r2, [r0, #-4]
   1aff0:	cmp	r2, sl
   1aff4:	ble	1b018 <__assert_fail@plt+0x9918>
   1aff8:	sub	r1, r8, #2
   1affc:	str	r2, [r0]
   1b000:	sub	r1, r1, #1
   1b004:	ldr	r2, [r0, #-8]
   1b008:	sub	r0, r0, #4
   1b00c:	cmp	r2, sl
   1b010:	bgt	1affc <__assert_fail@plt+0x98fc>
   1b014:	add	ip, r1, #2
   1b018:	ldr	r0, [sp, #56]	; 0x38
   1b01c:	mov	r3, r8
   1b020:	add	r3, r8, #1
   1b024:	ldr	r7, [sp, #80]	; 0x50
   1b028:	ldr	r8, [sp, #52]	; 0x34
   1b02c:	mov	lr, #1
   1b030:	str	sl, [r0, ip, lsl #2]
   1b034:	mov	ip, r4
   1b038:	b	1aa18 <__assert_fail@plt+0x9318>
   1b03c:	ldr	r0, [sp, #72]	; 0x48
   1b040:	ldr	r5, [sp, #56]	; 0x38
   1b044:	mov	r8, ip
   1b048:	mov	r9, r3
   1b04c:	cmp	r0, r3
   1b050:	bne	1b080 <__assert_fail@plt+0x9980>
   1b054:	ldr	r0, [sp, #72]	; 0x48
   1b058:	lsl	r1, r0, #3
   1b05c:	mov	r0, r8
   1b060:	bl	2b910 <__assert_fail@plt+0x1a210>
   1b064:	cmp	r0, #0
   1b068:	beq	1b4b4 <__assert_fail@plt+0x9db4>
   1b06c:	ldr	r1, [sp, #72]	; 0x48
   1b070:	mov	r8, r0
   1b074:	mov	r5, r0
   1b078:	lsl	r1, r1, #1
   1b07c:	str	r1, [sp, #72]	; 0x48
   1b080:	ldr	r0, [r5]
   1b084:	mov	ip, r9
   1b088:	cmp	r0, sl
   1b08c:	ble	1b10c <__assert_fail@plt+0x9a0c>
   1b090:	cmp	r9, #1
   1b094:	blt	1b13c <__assert_fail@plt+0x9a3c>
   1b098:	mov	r0, r9
   1b09c:	ands	r1, r9, #3
   1b0a0:	sub	r2, r9, #1
   1b0a4:	beq	1b0cc <__assert_fail@plt+0x99cc>
   1b0a8:	add	r7, r5, r9, lsl #2
   1b0ac:	mov	r0, r9
   1b0b0:	mov	r3, r7
   1b0b4:	ldr	r6, [r3, #-4]!
   1b0b8:	subs	r1, r1, #1
   1b0bc:	sub	r0, r0, #1
   1b0c0:	str	r6, [r7]
   1b0c4:	mov	r7, r3
   1b0c8:	bne	1b0b4 <__assert_fail@plt+0x99b4>
   1b0cc:	mov	ip, #0
   1b0d0:	cmp	r2, #3
   1b0d4:	bcc	1b13c <__assert_fail@plt+0x9a3c>
   1b0d8:	add	r2, r5, r0, lsl #2
   1b0dc:	sub	r2, r2, #8
   1b0e0:	ldr	r6, [r2]
   1b0e4:	ldr	r1, [r2, #4]
   1b0e8:	ldmdb	r2, {r3, r7}
   1b0ec:	sub	r0, r0, #4
   1b0f0:	cmp	r0, #0
   1b0f4:	stmda	r2, {r3, r7}
   1b0f8:	str	r6, [r2, #4]
   1b0fc:	str	r1, [r2, #8]
   1b100:	sub	r2, r2, #16
   1b104:	bgt	1b0e0 <__assert_fail@plt+0x99e0>
   1b108:	b	1b13c <__assert_fail@plt+0x9a3c>
   1b10c:	add	r0, r5, r9, lsl #2
   1b110:	ldr	r2, [r0, #-4]
   1b114:	cmp	r2, sl
   1b118:	ble	1b13c <__assert_fail@plt+0x9a3c>
   1b11c:	sub	r1, r9, #2
   1b120:	str	r2, [r0]
   1b124:	sub	r1, r1, #1
   1b128:	ldr	r2, [r0, #-8]
   1b12c:	sub	r0, r0, #4
   1b130:	cmp	r2, sl
   1b134:	bgt	1b120 <__assert_fail@plt+0x9a20>
   1b138:	add	ip, r1, #2
   1b13c:	str	sl, [r5, ip, lsl #2]
   1b140:	mov	ip, r8
   1b144:	ldr	r8, [sp, #100]	; 0x64
   1b148:	mov	r2, r9
   1b14c:	add	r2, r9, #1
   1b150:	mov	lr, #1
   1b154:	b	1ad98 <__assert_fail@plt+0x9698>
   1b158:	mov	r0, ip
   1b15c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b160:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b164:	cmp	r0, r4
   1b168:	beq	1b170 <__assert_fail@plt+0x9a70>
   1b16c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b170:	mov	r0, #16
   1b174:	str	r4, [fp, #-184]	; 0xffffff48
   1b178:	cmp	r6, #0
   1b17c:	str	r0, [fp, #-188]	; 0xffffff44
   1b180:	mov	r0, #0
   1b184:	str	r0, [fp, #-192]	; 0xffffff40
   1b188:	beq	1b1e0 <__assert_fail@plt+0x9ae0>
   1b18c:	ldr	r1, [r6]
   1b190:	ldr	r0, [r6, #8]
   1b194:	cmp	r1, #1
   1b198:	blt	1b1d8 <__assert_fail@plt+0x9ad8>
   1b19c:	mov	r4, #0
   1b1a0:	mov	r5, #0
   1b1a4:	add	r0, r0, r4
   1b1a8:	ldr	r0, [r0, #20]
   1b1ac:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b1b0:	ldr	r0, [r6, #8]
   1b1b4:	add	r0, r0, r4
   1b1b8:	ldr	r0, [r0, #8]
   1b1bc:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b1c0:	ldr	r1, [r6]
   1b1c4:	ldr	r0, [r6, #8]
   1b1c8:	add	r5, r5, #1
   1b1cc:	add	r4, r4, #24
   1b1d0:	cmp	r5, r1
   1b1d4:	blt	1b1a4 <__assert_fail@plt+0x9aa4>
   1b1d8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b1dc:	ldr	r8, [fp, #20]
   1b1e0:	ldrb	r0, [sp, #180]	; 0xb4
   1b1e4:	cmp	r0, #0
   1b1e8:	bne	1b424 <__assert_fail@plt+0x9d24>
   1b1ec:	ldr	r1, [fp, #-200]	; 0xffffff38
   1b1f0:	ldr	r2, [sp, #92]	; 0x5c
   1b1f4:	ldr	r5, [sp, #32]
   1b1f8:	add	r0, r8, #4
   1b1fc:	ldr	r3, [r0, #-4]
   1b200:	cmn	r3, #1
   1b204:	bne	1b220 <__assert_fail@plt+0x9b20>
   1b208:	add	r0, r0, #8
   1b20c:	subs	r2, r2, #1
   1b210:	beq	1b240 <__assert_fail@plt+0x9b40>
   1b214:	ldr	r3, [r0, #-4]
   1b218:	cmn	r3, #1
   1b21c:	beq	1b208 <__assert_fail@plt+0x9b08>
   1b220:	add	r3, r3, r1
   1b224:	str	r3, [r0, #-4]
   1b228:	ldr	r3, [r0]
   1b22c:	add	r3, r3, r1
   1b230:	str	r3, [r0]
   1b234:	add	r0, r0, #8
   1b238:	subs	r2, r2, #1
   1b23c:	bne	1b214 <__assert_fail@plt+0x9b14>
   1b240:	cmp	r5, #1
   1b244:	blt	1b25c <__assert_fail@plt+0x9b5c>
   1b248:	ldr	r0, [sp, #92]	; 0x5c
   1b24c:	lsl	r2, r5, #3
   1b250:	mov	r1, #255	; 0xff
   1b254:	add	r0, r8, r0, lsl #3
   1b258:	bl	11610 <memset@plt>
   1b25c:	ldr	r0, [r9, #132]	; 0x84
   1b260:	mov	r8, #0
   1b264:	cmp	r0, #0
   1b268:	beq	1b2e4 <__assert_fail@plt+0x9be4>
   1b26c:	ldr	r1, [sp, #92]	; 0x5c
   1b270:	cmp	r1, #2
   1b274:	bcc	1b2e4 <__assert_fail@plt+0x9be4>
   1b278:	ldr	r1, [sp, #32]
   1b27c:	ldr	r2, [fp, #16]
   1b280:	ldr	r6, [fp, #20]
   1b284:	mvn	r1, r1
   1b288:	add	r1, r1, r2
   1b28c:	mov	r2, #0
   1b290:	ldr	r3, [r0, r2, lsl #2]
   1b294:	cmp	r2, r3
   1b298:	bne	1b2b4 <__assert_fail@plt+0x9bb4>
   1b29c:	add	r2, r2, #1
   1b2a0:	cmp	r1, r2
   1b2a4:	beq	1b2e0 <__assert_fail@plt+0x9be0>
   1b2a8:	ldr	r3, [r0, r2, lsl #2]
   1b2ac:	cmp	r2, r3
   1b2b0:	beq	1b29c <__assert_fail@plt+0x9b9c>
   1b2b4:	add	r3, r6, r3, lsl #3
   1b2b8:	add	r7, r6, r2, lsl #3
   1b2bc:	ldr	r3, [r3, #8]
   1b2c0:	str	r3, [r7, #8]
   1b2c4:	ldr	r3, [r0, r2, lsl #2]
   1b2c8:	add	r3, r6, r3, lsl #3
   1b2cc:	ldr	r3, [r3, #12]
   1b2d0:	str	r3, [r7, #12]
   1b2d4:	add	r2, r2, #1
   1b2d8:	cmp	r1, r2
   1b2dc:	bne	1b2a8 <__assert_fail@plt+0x9ba8>
   1b2e0:	mov	r8, #0
   1b2e4:	ldr	r0, [sp, #204]	; 0xcc
   1b2e8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b2ec:	ldr	r0, [sp, #96]	; 0x60
   1b2f0:	ldr	r0, [r0, #76]	; 0x4c
   1b2f4:	cmp	r0, #0
   1b2f8:	beq	1b314 <__assert_fail@plt+0x9c14>
   1b2fc:	add	r0, sp, #104	; 0x68
   1b300:	bl	23b14 <__assert_fail@plt+0x12414>
   1b304:	ldr	r0, [sp, #236]	; 0xec
   1b308:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b30c:	ldr	r0, [sp, #220]	; 0xdc
   1b310:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b314:	ldr	r0, [sp, #112]	; 0x70
   1b318:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b31c:	ldr	r0, [sp, #116]	; 0x74
   1b320:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b324:	ldrb	r0, [sp, #179]	; 0xb3
   1b328:	cmp	r0, #0
   1b32c:	beq	1b338 <__assert_fail@plt+0x9c38>
   1b330:	ldr	r0, [sp, #108]	; 0x6c
   1b334:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b338:	mov	r0, r8
   1b33c:	sub	sp, fp, #28
   1b340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b344:	mov	r6, #0
   1b348:	b	18da0 <__assert_fail@plt+0x76a0>
   1b34c:	mov	r8, #12
   1b350:	b	1b2e4 <__assert_fail@plt+0x9be4>
   1b354:	mov	r0, r5
   1b358:	mov	r5, #0
   1b35c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b360:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b364:	cmp	r0, r4
   1b368:	beq	1b370 <__assert_fail@plt+0x9c70>
   1b36c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b370:	mov	r0, #16
   1b374:	str	r4, [fp, #-184]	; 0xffffff48
   1b378:	mov	r8, #1
   1b37c:	cmp	r5, #0
   1b380:	str	r0, [fp, #-188]	; 0xffffff44
   1b384:	mov	r0, #0
   1b388:	str	r0, [fp, #-192]	; 0xffffff40
   1b38c:	bne	1b2e4 <__assert_fail@plt+0x9be4>
   1b390:	ldr	r1, [r6]
   1b394:	ldr	r0, [r6, #8]
   1b398:	cmp	r1, #1
   1b39c:	blt	1b3dc <__assert_fail@plt+0x9cdc>
   1b3a0:	mov	r5, #0
   1b3a4:	mov	r4, #0
   1b3a8:	add	r0, r0, r5
   1b3ac:	ldr	r0, [r0, #20]
   1b3b0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b3b4:	ldr	r0, [r6, #8]
   1b3b8:	add	r0, r0, r5
   1b3bc:	ldr	r0, [r0, #8]
   1b3c0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b3c4:	ldr	r1, [r6]
   1b3c8:	ldr	r0, [r6, #8]
   1b3cc:	add	r4, r4, #1
   1b3d0:	add	r5, r5, #24
   1b3d4:	cmp	r4, r1
   1b3d8:	blt	1b3a8 <__assert_fail@plt+0x9ca8>
   1b3dc:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b3e0:	b	1b2e4 <__assert_fail@plt+0x9be4>
   1b3e4:	mov	r8, r0
   1b3e8:	b	1b2e4 <__assert_fail@plt+0x9be4>
   1b3ec:	ldr	r4, [sp, #88]	; 0x58
   1b3f0:	mov	r0, r5
   1b3f4:	mov	r5, #1
   1b3f8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b3fc:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b400:	cmp	r0, r4
   1b404:	bne	1b36c <__assert_fail@plt+0x9c6c>
   1b408:	b	1b370 <__assert_fail@plt+0x9c70>
   1b40c:	mov	r0, r6
   1b410:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b414:	mov	r0, #0
   1b418:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b41c:	mov	r8, #12
   1b420:	b	1b2e4 <__assert_fail@plt+0x9be4>
   1b424:	ldr	r1, [sp, #92]	; 0x5c
   1b428:	ldr	r5, [sp, #32]
   1b42c:	add	r0, r8, #4
   1b430:	ldr	r2, [r0, #-4]
   1b434:	cmn	r2, #1
   1b438:	bne	1b454 <__assert_fail@plt+0x9d54>
   1b43c:	add	r0, r0, #8
   1b440:	subs	r1, r1, #1
   1b444:	beq	1b240 <__assert_fail@plt+0x9b40>
   1b448:	ldr	r2, [r0, #-4]
   1b44c:	cmn	r2, #1
   1b450:	beq	1b43c <__assert_fail@plt+0x9d3c>
   1b454:	ldr	r3, [sp, #132]	; 0x84
   1b458:	ldr	r7, [sp, #24]
   1b45c:	ldr	ip, [sp, #116]	; 0x74
   1b460:	cmp	r2, r3
   1b464:	mov	r6, r7
   1b468:	addne	r6, ip, r2, lsl #2
   1b46c:	ldr	r2, [r6]
   1b470:	str	r2, [r0, #-4]
   1b474:	ldr	r6, [r0]
   1b478:	cmp	r6, r3
   1b47c:	addne	r7, ip, r6, lsl #2
   1b480:	ldr	r3, [r7]
   1b484:	ldr	r7, [fp, #-200]	; 0xffffff38
   1b488:	add	r3, r3, r7
   1b48c:	add	r2, r2, r7
   1b490:	str	r3, [r0]
   1b494:	str	r2, [r0, #-4]
   1b498:	add	r0, r0, #8
   1b49c:	subs	r1, r1, #1
   1b4a0:	bne	1b448 <__assert_fail@plt+0x9d48>
   1b4a4:	b	1b240 <__assert_fail@plt+0x9b40>
   1b4a8:	ldr	r5, [sp, #56]	; 0x38
   1b4ac:	b	1b4b4 <__assert_fail@plt+0x9db4>
   1b4b0:	mov	r5, r8
   1b4b4:	mov	r0, r5
   1b4b8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b4bc:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b4c0:	ldr	r4, [sp, #88]	; 0x58
   1b4c4:	cmp	r0, r4
   1b4c8:	beq	1b4d0 <__assert_fail@plt+0x9dd0>
   1b4cc:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b4d0:	mov	r0, #16
   1b4d4:	str	r4, [fp, #-184]	; 0xffffff48
   1b4d8:	mov	r8, #12
   1b4dc:	str	r0, [fp, #-188]	; 0xffffff44
   1b4e0:	mov	r0, #0
   1b4e4:	str	r0, [fp, #-192]	; 0xffffff40
   1b4e8:	ldr	r0, [sp, #68]	; 0x44
   1b4ec:	cmp	r0, #0
   1b4f0:	beq	1b2e4 <__assert_fail@plt+0x9be4>
   1b4f4:	ldr	r0, [sp, #68]	; 0x44
   1b4f8:	ldr	r1, [r0]
   1b4fc:	mov	r4, r0
   1b500:	ldr	r0, [r0, #8]
   1b504:	cmp	r1, #1
   1b508:	blt	1b3dc <__assert_fail@plt+0x9cdc>
   1b50c:	mov	r5, #0
   1b510:	mov	r6, #0
   1b514:	add	r0, r0, r5
   1b518:	ldr	r0, [r0, #20]
   1b51c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b520:	ldr	r0, [r4, #8]
   1b524:	add	r0, r0, r5
   1b528:	ldr	r0, [r0, #8]
   1b52c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b530:	ldr	r1, [r4]
   1b534:	ldr	r0, [r4, #8]
   1b538:	add	r6, r6, #1
   1b53c:	add	r5, r5, #24
   1b540:	cmp	r6, r1
   1b544:	blt	1b514 <__assert_fail@plt+0x9e14>
   1b548:	b	1b3dc <__assert_fail@plt+0x9cdc>
   1b54c:	mov	r8, #1
   1b550:	b	1b2e4 <__assert_fail@plt+0x9be4>
   1b554:	mov	r5, #0
   1b558:	b	1b4b4 <__assert_fail@plt+0x9db4>
   1b55c:	ldr	r5, [sp, #56]	; 0x38
   1b560:	mov	r0, #0
   1b564:	str	r0, [r6]
   1b568:	str	r0, [sl]
   1b56c:	b	1b4b4 <__assert_fail@plt+0x9db4>
   1b570:	push	{fp, lr}
   1b574:	mov	fp, sp
   1b578:	sub	sp, sp, #16
   1b57c:	mov	ip, #1
   1b580:	str	r2, [sp, #4]
   1b584:	str	ip, [sp, #12]
   1b588:	mov	ip, #0
   1b58c:	str	ip, [sp]
   1b590:	ldr	ip, [fp, #8]
   1b594:	str	ip, [sp, #8]
   1b598:	bl	1b5a4 <__assert_fail@plt+0x9ea4>
   1b59c:	mov	sp, fp
   1b5a0:	pop	{fp, pc}
   1b5a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5a8:	add	fp, sp, #28
   1b5ac:	sub	sp, sp, #60	; 0x3c
   1b5b0:	mvn	r4, #0
   1b5b4:	cmp	r3, #0
   1b5b8:	bmi	1b7dc <__assert_fail@plt+0xa0dc>
   1b5bc:	mov	r6, r3
   1b5c0:	mov	r7, r2
   1b5c4:	cmp	r3, r2
   1b5c8:	bgt	1b7dc <__assert_fail@plt+0xa0dc>
   1b5cc:	mov	r5, r0
   1b5d0:	ldr	r0, [fp, #8]
   1b5d4:	str	r1, [sp, #44]	; 0x2c
   1b5d8:	movw	r1, #0
   1b5dc:	mov	r8, r7
   1b5e0:	ldr	r4, [r5]
   1b5e4:	movt	r1, #0
   1b5e8:	add	r0, r0, r6
   1b5ec:	cmp	r0, r7
   1b5f0:	bicle	r8, r0, r0, asr #31
   1b5f4:	movw	r0, #0
   1b5f8:	movt	r0, #0
   1b5fc:	orrs	r9, r1, r0
   1b600:	beq	1b60c <__assert_fail@plt+0x9f0c>
   1b604:	add	r0, r4, #136	; 0x88
   1b608:	bl	11430 <pthread_mutex_lock@plt>
   1b60c:	ldrb	r0, [r5, #28]
   1b610:	ldr	r2, [fp, #16]
   1b614:	cmp	r8, r6
   1b618:	ubfx	r1, r0, #5, #2
   1b61c:	str	r4, [sp, #36]	; 0x24
   1b620:	str	r6, [fp, #-36]	; 0xffffffdc
   1b624:	str	r1, [sp, #40]	; 0x28
   1b628:	ble	1b6c8 <__assert_fail@plt+0x9fc8>
   1b62c:	tst	r0, #8
   1b630:	bne	1b6c8 <__assert_fail@plt+0x9fc8>
   1b634:	ldr	r6, [r5, #16]
   1b638:	cmp	r6, #0
   1b63c:	beq	1b6c8 <__assert_fail@plt+0x9fc8>
   1b640:	ldr	r4, [r5]
   1b644:	mov	sl, r2
   1b648:	mov	r0, r6
   1b64c:	mov	r1, #0
   1b650:	mov	r2, #256	; 0x100
   1b654:	bl	11610 <memset@plt>
   1b658:	ldr	r1, [r4, #36]	; 0x24
   1b65c:	mov	r0, r5
   1b660:	mov	r2, r6
   1b664:	bl	17c94 <__assert_fail@plt+0x6594>
   1b668:	ldr	r0, [r4, #36]	; 0x24
   1b66c:	ldr	r1, [r4, #40]	; 0x28
   1b670:	cmp	r0, r1
   1b674:	beq	1b688 <__assert_fail@plt+0x9f88>
   1b678:	mov	r0, r5
   1b67c:	mov	r2, r6
   1b680:	bl	17c94 <__assert_fail@plt+0x6594>
   1b684:	ldr	r0, [r4, #36]	; 0x24
   1b688:	ldr	r1, [r4, #44]	; 0x2c
   1b68c:	cmp	r0, r1
   1b690:	beq	1b6a4 <__assert_fail@plt+0x9fa4>
   1b694:	mov	r0, r5
   1b698:	mov	r2, r6
   1b69c:	bl	17c94 <__assert_fail@plt+0x6594>
   1b6a0:	ldr	r0, [r4, #36]	; 0x24
   1b6a4:	ldr	r1, [r4, #48]	; 0x30
   1b6a8:	cmp	r0, r1
   1b6ac:	movne	r0, r5
   1b6b0:	movne	r2, r6
   1b6b4:	blne	17c94 <__assert_fail@plt+0x6594>
   1b6b8:	ldrb	r0, [r5, #28]
   1b6bc:	mov	r2, sl
   1b6c0:	orr	r0, r0, #8
   1b6c4:	strb	r0, [r5, #28]
   1b6c8:	str	r9, [fp, #-40]	; 0xffffffd8
   1b6cc:	mov	sl, #1
   1b6d0:	mov	r9, #0
   1b6d4:	cmp	r2, #0
   1b6d8:	str	r5, [fp, #-32]	; 0xffffffe0
   1b6dc:	beq	1b730 <__assert_fail@plt+0xa030>
   1b6e0:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1b6e4:	ands	r1, r0, #16
   1b6e8:	bne	1b768 <__assert_fail@plt+0xa068>
   1b6ec:	and	r0, r0, #6
   1b6f0:	cmp	r0, #4
   1b6f4:	bne	1b758 <__assert_fail@plt+0xa058>
   1b6f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b6fc:	ldr	sl, [r2]
   1b700:	ldr	r0, [r0, #24]
   1b704:	cmp	sl, r0
   1b708:	bhi	1b760 <__assert_fail@plt+0xa060>
   1b70c:	cmp	sl, #1
   1b710:	bge	1b764 <__assert_fail@plt+0xa064>
   1b714:	mov	sl, #1
   1b718:	mov	r9, #0
   1b71c:	lsl	r0, sl, #3
   1b720:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1b724:	cmp	r0, #0
   1b728:	bne	1b778 <__assert_fail@plt+0xa078>
   1b72c:	b	1b744 <__assert_fail@plt+0xa044>
   1b730:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1b734:	lsl	r0, sl, #3
   1b738:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1b73c:	cmp	r0, #0
   1b740:	bne	1b778 <__assert_fail@plt+0xa078>
   1b744:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1b748:	mvn	r4, #1
   1b74c:	cmp	r5, #0
   1b750:	bne	1b7d0 <__assert_fail@plt+0xa0d0>
   1b754:	b	1b7dc <__assert_fail@plt+0xa0dc>
   1b758:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b75c:	ldr	r0, [r0, #24]
   1b760:	add	sl, r0, #1
   1b764:	mov	r9, r2
   1b768:	lsl	r0, sl, #3
   1b76c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1b770:	cmp	r0, #0
   1b774:	beq	1b744 <__assert_fail@plt+0xa044>
   1b778:	mov	r6, r0
   1b77c:	ldr	r0, [fp, #12]
   1b780:	str	r8, [sp]
   1b784:	ldr	r1, [sp, #44]	; 0x2c
   1b788:	mov	r2, r7
   1b78c:	mov	r3, r4
   1b790:	stmib	sp, {r0, sl}
   1b794:	ldr	r0, [sp, #40]	; 0x28
   1b798:	str	r6, [sp, #12]
   1b79c:	str	r0, [sp, #16]
   1b7a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b7a4:	bl	18cc0 <__assert_fail@plt+0x75c0>
   1b7a8:	cmp	r0, #0
   1b7ac:	beq	1b7e8 <__assert_fail@plt+0xa0e8>
   1b7b0:	cmp	r0, #1
   1b7b4:	mvn	r4, #1
   1b7b8:	mvneq	r4, #0
   1b7bc:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1b7c0:	mov	r0, r6
   1b7c4:	bl	13ddc <__assert_fail@plt+0x26dc>
   1b7c8:	cmp	r5, #0
   1b7cc:	beq	1b7dc <__assert_fail@plt+0xa0dc>
   1b7d0:	ldr	r0, [sp, #36]	; 0x24
   1b7d4:	add	r0, r0, #136	; 0x88
   1b7d8:	bl	11388 <pthread_mutex_unlock@plt>
   1b7dc:	mov	r0, r4
   1b7e0:	sub	sp, fp, #28
   1b7e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7e8:	cmp	r9, #0
   1b7ec:	beq	1bad0 <__assert_fail@plt+0xa3d0>
   1b7f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b7f4:	add	r8, sl, #1
   1b7f8:	ldrb	r0, [r0, #28]
   1b7fc:	ubfx	r0, r0, #1, #2
   1b800:	cmp	r0, #1
   1b804:	beq	1b854 <__assert_fail@plt+0xa154>
   1b808:	cmp	r0, #0
   1b80c:	bne	1b880 <__assert_fail@plt+0xa180>
   1b810:	lsl	r5, r8, #2
   1b814:	mov	r0, r5
   1b818:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1b81c:	mov	r7, #0
   1b820:	cmp	r0, #0
   1b824:	str	r0, [r9, #4]
   1b828:	beq	1bab4 <__assert_fail@plt+0xa3b4>
   1b82c:	mov	r0, r5
   1b830:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1b834:	cmp	r0, #0
   1b838:	str	r0, [r9, #8]
   1b83c:	beq	1bb50 <__assert_fail@plt+0xa450>
   1b840:	str	r8, [r9]
   1b844:	mov	lr, #1
   1b848:	cmp	sl, #1
   1b84c:	bge	1b890 <__assert_fail@plt+0xa190>
   1b850:	b	1b870 <__assert_fail@plt+0xa170>
   1b854:	ldr	r0, [r9]
   1b858:	mov	lr, #1
   1b85c:	cmp	r8, r0
   1b860:	bhi	1baf8 <__assert_fail@plt+0xa3f8>
   1b864:	mov	r8, r0
   1b868:	cmp	sl, #1
   1b86c:	bge	1b890 <__assert_fail@plt+0xa190>
   1b870:	mov	sl, #0
   1b874:	cmp	sl, r8
   1b878:	bcc	1ba90 <__assert_fail@plt+0xa390>
   1b87c:	b	1bab0 <__assert_fail@plt+0xa3b0>
   1b880:	ldr	r8, [r9]
   1b884:	mov	lr, #2
   1b888:	cmp	sl, #1
   1b88c:	blt	1b870 <__assert_fail@plt+0xa170>
   1b890:	ldr	r5, [r9, #4]
   1b894:	ldr	r4, [r9, #8]
   1b898:	mov	r2, #0
   1b89c:	cmp	sl, #3
   1b8a0:	str	r6, [sp, #44]	; 0x2c
   1b8a4:	bhi	1b938 <__assert_fail@plt+0xa238>
   1b8a8:	tst	sl, #1
   1b8ac:	mov	r3, r2
   1b8b0:	beq	1b8cc <__assert_fail@plt+0xa1cc>
   1b8b4:	ldr	r0, [sp, #44]	; 0x2c
   1b8b8:	orr	r3, r2, #1
   1b8bc:	ldr	r1, [r0, r2, lsl #3]!
   1b8c0:	str	r1, [r5, r2, lsl #2]
   1b8c4:	ldr	r0, [r0, #4]
   1b8c8:	str	r0, [r4, r2, lsl #2]
   1b8cc:	orr	r0, r2, #1
   1b8d0:	cmp	sl, r0
   1b8d4:	beq	1ba7c <__assert_fail@plt+0xa37c>
   1b8d8:	ldr	r7, [sp, #44]	; 0x2c
   1b8dc:	add	r2, r3, #1
   1b8e0:	sub	r0, sl, r3
   1b8e4:	mov	r6, #0
   1b8e8:	add	r1, r5, r2, lsl #2
   1b8ec:	add	r2, r4, r2, lsl #2
   1b8f0:	add	ip, r7, r3, lsl #3
   1b8f4:	add	r7, ip, #12
   1b8f8:	ldr	r4, [r7, #-12]
   1b8fc:	add	r5, r1, r6
   1b900:	subs	r0, r0, #2
   1b904:	str	r4, [r5, #-4]
   1b908:	add	r4, ip, r6, lsl #1
   1b90c:	add	r5, r2, r6
   1b910:	ldr	r3, [r4, #4]
   1b914:	str	r3, [r5, #-4]
   1b918:	ldr	r3, [r4, #8]
   1b91c:	str	r3, [r1, r6]
   1b920:	ldr	r3, [r7]
   1b924:	add	r7, r7, #16
   1b928:	str	r3, [r2, r6]
   1b92c:	add	r6, r6, #8
   1b930:	bne	1b8f8 <__assert_fail@plt+0xa1f8>
   1b934:	b	1ba7c <__assert_fail@plt+0xa37c>
   1b938:	ldr	r0, [sp, #44]	; 0x2c
   1b93c:	str	lr, [sp, #40]	; 0x28
   1b940:	add	lr, r4, sl, lsl #2
   1b944:	add	r6, r5, sl, lsl #2
   1b948:	mov	r8, #0
   1b94c:	mov	r1, #0
   1b950:	mov	r3, #0
   1b954:	mov	r2, #0
   1b958:	add	r7, r0, sl, lsl #3
   1b95c:	cmp	r0, lr
   1b960:	movwcc	r8, #1
   1b964:	cmp	r7, r4
   1b968:	movwhi	r1, #1
   1b96c:	cmp	r0, r6
   1b970:	mov	r0, #0
   1b974:	movwcc	r3, #1
   1b978:	cmp	r7, r5
   1b97c:	mov	r7, #0
   1b980:	movwhi	r7, #1
   1b984:	cmp	r4, r6
   1b988:	mov	r6, #0
   1b98c:	movwcc	r6, #1
   1b990:	cmp	r5, lr
   1b994:	movwcc	r0, #1
   1b998:	tst	r0, r6
   1b99c:	bne	1ba28 <__assert_fail@plt+0xa328>
   1b9a0:	ands	r0, r7, r3
   1b9a4:	bne	1ba28 <__assert_fail@plt+0xa328>
   1b9a8:	ldr	lr, [sp, #40]	; 0x28
   1b9ac:	ands	r0, r1, r8
   1b9b0:	bne	1b8a8 <__assert_fail@plt+0xa1a8>
   1b9b4:	bic	r0, sl, #3
   1b9b8:	mov	r1, #1
   1b9bc:	str	r4, [sp, #32]
   1b9c0:	str	r0, [sp, #28]
   1b9c4:	subs	r0, r0, #4
   1b9c8:	add	r0, r1, r0, lsr #2
   1b9cc:	and	r1, r0, #1
   1b9d0:	str	r1, [sp, #24]
   1b9d4:	beq	1ba3c <__assert_fail@plt+0xa33c>
   1b9d8:	ldr	r6, [sp, #44]	; 0x2c
   1b9dc:	sub	r7, r0, r1
   1b9e0:	mov	r8, r4
   1b9e4:	mov	r3, #0
   1b9e8:	mov	r1, #32
   1b9ec:	mov	r4, #64	; 0x40
   1b9f0:	mov	lr, r5
   1b9f4:	add	ip, r6, #32
   1b9f8:	vld2.32	{d16-d19}, [r6], r4
   1b9fc:	add	r2, lr, #16
   1ba00:	add	r0, r8, #16
   1ba04:	subs	r7, r7, #2
   1ba08:	add	r3, r3, #8
   1ba0c:	vst1.32	{d16-d17}, [lr], r1
   1ba10:	vst1.32	{d18-d19}, [r8], r1
   1ba14:	vld2.32	{d16-d19}, [ip]
   1ba18:	vst1.32	{d16-d17}, [r2]
   1ba1c:	vst1.32	{d18-d19}, [r0]
   1ba20:	bne	1b9f4 <__assert_fail@plt+0xa2f4>
   1ba24:	b	1ba40 <__assert_fail@plt+0xa340>
   1ba28:	ldr	lr, [sp, #40]	; 0x28
   1ba2c:	tst	sl, #1
   1ba30:	mov	r3, r2
   1ba34:	bne	1b8b4 <__assert_fail@plt+0xa1b4>
   1ba38:	b	1b8cc <__assert_fail@plt+0xa1cc>
   1ba3c:	mov	r3, #0
   1ba40:	ldr	r0, [sp, #24]
   1ba44:	ldr	lr, [sp, #40]	; 0x28
   1ba48:	ldr	r4, [sp, #32]
   1ba4c:	cmp	r0, #0
   1ba50:	beq	1ba70 <__assert_fail@plt+0xa370>
   1ba54:	ldr	r0, [sp, #44]	; 0x2c
   1ba58:	add	r0, r0, r3, lsl #3
   1ba5c:	vld2.32	{d16-d19}, [r0]
   1ba60:	add	r0, r5, r3, lsl #2
   1ba64:	vst1.32	{d16-d17}, [r0]
   1ba68:	add	r0, r4, r3, lsl #2
   1ba6c:	vst1.32	{d18-d19}, [r0]
   1ba70:	ldr	r2, [sp, #28]
   1ba74:	cmp	sl, r2
   1ba78:	bne	1b8a8 <__assert_fail@plt+0xa1a8>
   1ba7c:	ldr	r8, [r9]
   1ba80:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1ba84:	ldr	r6, [sp, #44]	; 0x2c
   1ba88:	cmp	sl, r8
   1ba8c:	bcs	1bab0 <__assert_fail@plt+0xa3b0>
   1ba90:	ldmib	r9, {r0, r1}
   1ba94:	mvn	r2, #0
   1ba98:	str	r2, [r1, sl, lsl #2]
   1ba9c:	str	r2, [r0, sl, lsl #2]
   1baa0:	add	sl, sl, #1
   1baa4:	ldr	r3, [r9]
   1baa8:	cmp	sl, r3
   1baac:	bcc	1ba98 <__assert_fail@plt+0xa398>
   1bab0:	mov	r7, lr
   1bab4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bab8:	cmp	r7, #0
   1babc:	ldrb	r0, [r1, #28]
   1bac0:	and	r0, r0, #249	; 0xf9
   1bac4:	orr	r0, r0, r7, lsl #1
   1bac8:	strb	r0, [r1, #28]
   1bacc:	beq	1baf0 <__assert_fail@plt+0xa3f0>
   1bad0:	ldr	r0, [fp, #20]
   1bad4:	cmp	r0, #0
   1bad8:	beq	1bae8 <__assert_fail@plt+0xa3e8>
   1badc:	ldr	r0, [r6, #4]
   1bae0:	sub	r4, r0, r4
   1bae4:	b	1b7bc <__assert_fail@plt+0xa0bc>
   1bae8:	ldr	r4, [r6]
   1baec:	b	1b7bc <__assert_fail@plt+0xa0bc>
   1baf0:	mvn	r4, #1
   1baf4:	b	1b7bc <__assert_fail@plt+0xa0bc>
   1baf8:	ldr	r0, [r9, #4]
   1bafc:	lsl	r1, r8, #2
   1bb00:	str	r6, [sp, #44]	; 0x2c
   1bb04:	mov	r6, r1
   1bb08:	bl	2b910 <__assert_fail@plt+0x1a210>
   1bb0c:	mov	r7, #0
   1bb10:	cmp	r0, #0
   1bb14:	beq	1bb5c <__assert_fail@plt+0xa45c>
   1bb18:	mov	r5, r0
   1bb1c:	ldr	r0, [r9, #8]
   1bb20:	mov	r1, r6
   1bb24:	bl	2b910 <__assert_fail@plt+0x1a210>
   1bb28:	cmp	r0, #0
   1bb2c:	beq	1bb64 <__assert_fail@plt+0xa464>
   1bb30:	ldr	r6, [sp, #44]	; 0x2c
   1bb34:	str	r8, [r9]
   1bb38:	str	r5, [r9, #4]
   1bb3c:	str	r0, [r9, #8]
   1bb40:	mov	lr, #1
   1bb44:	cmp	sl, #1
   1bb48:	bge	1b890 <__assert_fail@plt+0xa190>
   1bb4c:	b	1b870 <__assert_fail@plt+0xa170>
   1bb50:	ldr	r0, [r9, #4]
   1bb54:	bl	13ddc <__assert_fail@plt+0x26dc>
   1bb58:	b	1bab4 <__assert_fail@plt+0xa3b4>
   1bb5c:	ldr	r6, [sp, #44]	; 0x2c
   1bb60:	b	1bab4 <__assert_fail@plt+0xa3b4>
   1bb64:	mov	r0, r5
   1bb68:	bl	13ddc <__assert_fail@plt+0x26dc>
   1bb6c:	ldr	r6, [sp, #44]	; 0x2c
   1bb70:	b	1bab4 <__assert_fail@plt+0xa3b4>
   1bb74:	push	{fp, lr}
   1bb78:	mov	fp, sp
   1bb7c:	sub	sp, sp, #16
   1bb80:	mov	ip, #0
   1bb84:	str	r2, [sp, #4]
   1bb88:	str	ip, [sp, #12]
   1bb8c:	ldr	ip, [fp, #12]
   1bb90:	str	ip, [sp, #8]
   1bb94:	ldr	ip, [fp, #8]
   1bb98:	str	ip, [sp]
   1bb9c:	bl	1b5a4 <__assert_fail@plt+0x9ea4>
   1bba0:	mov	sp, fp
   1bba4:	pop	{fp, pc}
   1bba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbac:	add	fp, sp, #28
   1bbb0:	sub	sp, sp, #20
   1bbb4:	ldr	r4, [fp, #8]
   1bbb8:	mov	r8, r1
   1bbbc:	mov	r1, r0
   1bbc0:	mov	r6, r2
   1bbc4:	orr	r0, r4, r2
   1bbc8:	ldr	r2, [fp, #20]
   1bbcc:	orrs	r0, r0, r2
   1bbd0:	bmi	1bc90 <__assert_fail@plt+0xa590>
   1bbd4:	adds	sl, r6, r4
   1bbd8:	bvs	1bc90 <__assert_fail@plt+0xa590>
   1bbdc:	mov	r5, #0
   1bbe0:	cmp	r4, #1
   1bbe4:	blt	1bc3c <__assert_fail@plt+0xa53c>
   1bbe8:	mov	r9, r3
   1bbec:	cmp	r6, #1
   1bbf0:	blt	1bc44 <__assert_fail@plt+0xa544>
   1bbf4:	mov	r0, sl
   1bbf8:	mov	r5, r1
   1bbfc:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1bc00:	cmp	r0, #0
   1bc04:	beq	1bc90 <__assert_fail@plt+0xa590>
   1bc08:	mov	r1, r8
   1bc0c:	mov	r2, r6
   1bc10:	mov	r7, r0
   1bc14:	bl	11448 <memcpy@plt>
   1bc18:	add	r0, r7, r6
   1bc1c:	mov	r1, r9
   1bc20:	mov	r2, r4
   1bc24:	bl	11448 <memcpy@plt>
   1bc28:	ldr	r2, [fp, #20]
   1bc2c:	mov	r1, r5
   1bc30:	mov	r4, r7
   1bc34:	mov	r5, #0
   1bc38:	b	1bc4c <__assert_fail@plt+0xa54c>
   1bc3c:	mov	r7, r8
   1bc40:	b	1bc48 <__assert_fail@plt+0xa548>
   1bc44:	mov	r7, r9
   1bc48:	mov	r4, #0
   1bc4c:	ldr	r0, [fp, #16]
   1bc50:	ldr	r3, [fp, #12]
   1bc54:	mov	r6, #1
   1bc58:	str	r2, [sp, #4]
   1bc5c:	mov	r2, sl
   1bc60:	str	r5, [sp]
   1bc64:	str	r6, [sp, #12]
   1bc68:	str	r0, [sp, #8]
   1bc6c:	mov	r0, r1
   1bc70:	mov	r1, r7
   1bc74:	bl	1b5a4 <__assert_fail@plt+0x9ea4>
   1bc78:	mov	r5, r0
   1bc7c:	mov	r0, r4
   1bc80:	bl	13ddc <__assert_fail@plt+0x26dc>
   1bc84:	mov	r0, r5
   1bc88:	sub	sp, fp, #28
   1bc8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc90:	mvn	r0, #1
   1bc94:	sub	sp, fp, #28
   1bc98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bca0:	add	fp, sp, #28
   1bca4:	sub	sp, sp, #20
   1bca8:	ldr	r4, [fp, #8]
   1bcac:	mov	r8, r1
   1bcb0:	mov	r1, r0
   1bcb4:	mov	r6, r2
   1bcb8:	orr	r0, r4, r2
   1bcbc:	ldr	r2, [fp, #24]
   1bcc0:	orrs	r0, r0, r2
   1bcc4:	bmi	1bd84 <__assert_fail@plt+0xa684>
   1bcc8:	adds	sl, r6, r4
   1bccc:	bvs	1bd84 <__assert_fail@plt+0xa684>
   1bcd0:	mov	r5, #0
   1bcd4:	cmp	r4, #1
   1bcd8:	blt	1bd30 <__assert_fail@plt+0xa630>
   1bcdc:	mov	r9, r3
   1bce0:	cmp	r6, #1
   1bce4:	blt	1bd38 <__assert_fail@plt+0xa638>
   1bce8:	mov	r0, sl
   1bcec:	mov	r5, r1
   1bcf0:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1bcf4:	cmp	r0, #0
   1bcf8:	beq	1bd84 <__assert_fail@plt+0xa684>
   1bcfc:	mov	r1, r8
   1bd00:	mov	r2, r6
   1bd04:	mov	r7, r0
   1bd08:	bl	11448 <memcpy@plt>
   1bd0c:	add	r0, r7, r6
   1bd10:	mov	r1, r9
   1bd14:	mov	r2, r4
   1bd18:	bl	11448 <memcpy@plt>
   1bd1c:	ldr	r2, [fp, #24]
   1bd20:	mov	r1, r5
   1bd24:	mov	r4, r7
   1bd28:	mov	r5, #0
   1bd2c:	b	1bd40 <__assert_fail@plt+0xa640>
   1bd30:	mov	r7, r8
   1bd34:	b	1bd3c <__assert_fail@plt+0xa63c>
   1bd38:	mov	r7, r9
   1bd3c:	mov	r4, #0
   1bd40:	ldr	r0, [fp, #20]
   1bd44:	ldr	r6, [fp, #16]
   1bd48:	ldr	r3, [fp, #12]
   1bd4c:	str	r2, [sp, #4]
   1bd50:	mov	r2, sl
   1bd54:	str	r5, [sp, #12]
   1bd58:	str	r0, [sp, #8]
   1bd5c:	mov	r0, r1
   1bd60:	mov	r1, r7
   1bd64:	str	r6, [sp]
   1bd68:	bl	1b5a4 <__assert_fail@plt+0x9ea4>
   1bd6c:	mov	r5, r0
   1bd70:	mov	r0, r4
   1bd74:	bl	13ddc <__assert_fail@plt+0x26dc>
   1bd78:	mov	r0, r5
   1bd7c:	sub	sp, fp, #28
   1bd80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd84:	mvn	r0, #1
   1bd88:	sub	sp, fp, #28
   1bd8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd90:	ldrb	ip, [r0, #28]
   1bd94:	cmp	r2, #0
   1bd98:	bic	ip, ip, #6
   1bd9c:	orrne	ip, ip, #2
   1bda0:	strb	ip, [r0, #28]
   1bda4:	ldr	r0, [sp]
   1bda8:	moveq	r0, r2
   1bdac:	cmp	r2, #0
   1bdb0:	moveq	r3, r2
   1bdb4:	stm	r1, {r2, r3}
   1bdb8:	str	r0, [r1, #8]
   1bdbc:	bx	lr
   1bdc0:	push	{r4, sl, fp, lr}
   1bdc4:	add	fp, sp, #8
   1bdc8:	mov	r4, r0
   1bdcc:	ldr	r0, [r0, #24]
   1bdd0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1bdd4:	ldr	r0, [r4, #36]	; 0x24
   1bdd8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1bddc:	ldr	r0, [r4, #40]	; 0x28
   1bde0:	add	r1, r4, #4
   1bde4:	cmp	r0, r1
   1bde8:	beq	1bdfc <__assert_fail@plt+0xa6fc>
   1bdec:	ldr	r0, [r0, #8]
   1bdf0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1bdf4:	ldr	r0, [r4, #40]	; 0x28
   1bdf8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1bdfc:	ldr	r0, [r4, #12]
   1be00:	bl	13ddc <__assert_fail@plt+0x26dc>
   1be04:	ldr	r0, [r4, #48]	; 0x30
   1be08:	bl	13ddc <__assert_fail@plt+0x26dc>
   1be0c:	ldr	r0, [r4, #44]	; 0x2c
   1be10:	bl	13ddc <__assert_fail@plt+0x26dc>
   1be14:	mov	r0, r4
   1be18:	pop	{r4, sl, fp, lr}
   1be1c:	b	13ddc <__assert_fail@plt+0x26dc>
   1be20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be24:	add	fp, sp, #28
   1be28:	sub	sp, sp, #108	; 0x6c
   1be2c:	mov	r3, r0
   1be30:	ldrb	r0, [r0, #74]	; 0x4a
   1be34:	ldr	r9, [r3, #36]	; 0x24
   1be38:	ldr	r1, [r3, #48]	; 0x30
   1be3c:	ldr	r8, [r3, #28]
   1be40:	str	r3, [sp, #20]
   1be44:	cmp	r9, r1
   1be48:	movgt	r9, r1
   1be4c:	cmp	r0, #0
   1be50:	bne	1be6c <__assert_fail@plt+0xa76c>
   1be54:	ldr	r0, [r3, #64]	; 0x40
   1be58:	cmp	r0, #0
   1be5c:	bne	1be6c <__assert_fail@plt+0xa76c>
   1be60:	ldrb	r0, [r3, #76]	; 0x4c
   1be64:	cmp	r0, #0
   1be68:	beq	1be74 <__assert_fail@plt+0xa774>
   1be6c:	ldr	r7, [r3, #32]
   1be70:	b	1c0b0 <__assert_fail@plt+0xa9b0>
   1be74:	cmp	r9, r8
   1be78:	ble	1c088 <__assert_fail@plt+0xa988>
   1be7c:	add	r5, r3, #16
   1be80:	add	sl, sp, #32
   1be84:	str	r9, [sp, #16]
   1be88:	b	1bea8 <__assert_fail@plt+0xa7a8>
   1be8c:	mov	r8, r9
   1be90:	ldr	r9, [sp, #16]
   1be94:	mov	r3, sl
   1be98:	add	sl, sp, #32
   1be9c:	cmp	r9, r8
   1bea0:	mov	r7, r8
   1bea4:	ble	1c480 <__assert_fail@plt+0xad80>
   1bea8:	ldr	r6, [r3, #24]
   1beac:	ldr	r4, [r3]
   1beb0:	add	r0, r6, r8
   1beb4:	ldrb	r7, [r4, r0]
   1beb8:	tst	r7, #128	; 0x80
   1bebc:	bne	1bf14 <__assert_fail@plt+0xa814>
   1bec0:	mov	r0, r5
   1bec4:	bl	11478 <mbsinit@plt>
   1bec8:	cmp	r0, #0
   1becc:	beq	1bf14 <__assert_fail@plt+0xa814>
   1bed0:	mov	r0, r7
   1bed4:	bl	116d0 <towupper@plt>
   1bed8:	cmp	r0, #128	; 0x80
   1bedc:	bcs	1bf08 <__assert_fail@plt+0xa808>
   1bee0:	ldr	r3, [sp, #20]
   1bee4:	ldr	r1, [r3, #4]
   1bee8:	strb	r0, [r1, r8]
   1beec:	ldr	r1, [r3, #8]
   1bef0:	str	r0, [r1, r8, lsl #2]
   1bef4:	add	r8, r8, #1
   1bef8:	cmp	r9, r8
   1befc:	mov	r7, r8
   1bf00:	bgt	1bea8 <__assert_fail@plt+0xa7a8>
   1bf04:	b	1c480 <__assert_fail@plt+0xad80>
   1bf08:	ldr	r0, [sp, #20]
   1bf0c:	ldr	r4, [r0]
   1bf10:	ldr	r6, [r0, #24]
   1bf14:	ldm	r5, {r0, r1}
   1bf18:	str	r1, [fp, #-36]	; 0xffffffdc
   1bf1c:	sub	r2, r9, r8
   1bf20:	mov	r3, r5
   1bf24:	str	r0, [fp, #-40]	; 0xffffffd8
   1bf28:	add	r0, r4, r6
   1bf2c:	add	r1, r0, r8
   1bf30:	add	r0, sp, #28
   1bf34:	bl	2bd34 <__assert_fail@plt+0x1a634>
   1bf38:	sub	r4, r0, #1
   1bf3c:	mov	r6, r0
   1bf40:	cmn	r4, #4
   1bf44:	bhi	1c030 <__assert_fail@plt+0xa930>
   1bf48:	ldr	r0, [sp, #28]
   1bf4c:	bl	116d0 <towupper@plt>
   1bf50:	mov	r7, r0
   1bf54:	ldr	r0, [sp, #28]
   1bf58:	cmp	r7, r0
   1bf5c:	bne	1bf80 <__assert_fail@plt+0xa880>
   1bf60:	ldr	sl, [sp, #20]
   1bf64:	ldr	r1, [sl]
   1bf68:	ldr	r2, [sl, #24]
   1bf6c:	ldr	r0, [sl, #4]
   1bf70:	add	r1, r1, r2
   1bf74:	add	r0, r0, r8
   1bf78:	add	r1, r1, r8
   1bf7c:	b	1bfa8 <__assert_fail@plt+0xa8a8>
   1bf80:	mov	r0, sl
   1bf84:	mov	r1, r7
   1bf88:	sub	r2, fp, #40	; 0x28
   1bf8c:	bl	113b8 <wcrtomb@plt>
   1bf90:	cmp	r6, r0
   1bf94:	bne	1c090 <__assert_fail@plt+0xa990>
   1bf98:	mov	r1, sl
   1bf9c:	ldr	sl, [sp, #20]
   1bfa0:	ldr	r0, [sl, #4]
   1bfa4:	add	r0, r0, r8
   1bfa8:	mov	r2, r6
   1bfac:	bl	11448 <memcpy@plt>
   1bfb0:	ldr	r0, [sl, #8]
   1bfb4:	add	r9, r8, #1
   1bfb8:	str	r7, [r0, r8, lsl #2]
   1bfbc:	add	r7, r6, r8
   1bfc0:	cmp	r9, r7
   1bfc4:	bge	1be8c <__assert_fail@plt+0xa78c>
   1bfc8:	add	r0, r0, r8, lsl #2
   1bfcc:	mvn	r1, #3
   1bfd0:	add	r2, r1, r6, lsl #2
   1bfd4:	mov	r1, #255	; 0xff
   1bfd8:	add	r0, r0, #4
   1bfdc:	bl	11610 <memset@plt>
   1bfe0:	sub	r0, r6, #2
   1bfe4:	ands	r1, r4, #7
   1bfe8:	add	sl, sp, #32
   1bfec:	beq	1bffc <__assert_fail@plt+0xa8fc>
   1bff0:	subs	r1, r1, #1
   1bff4:	add	r9, r9, #1
   1bff8:	bne	1bff0 <__assert_fail@plt+0xa8f0>
   1bffc:	ldr	r3, [sp, #20]
   1c000:	cmp	r0, #7
   1c004:	bcc	1c018 <__assert_fail@plt+0xa918>
   1c008:	add	r0, r6, r8
   1c00c:	sub	r0, r0, r9
   1c010:	subs	r0, r0, #8
   1c014:	bne	1c010 <__assert_fail@plt+0xa910>
   1c018:	ldr	r9, [sp, #16]
   1c01c:	mov	r8, r7
   1c020:	cmp	r9, r8
   1c024:	mov	r7, r8
   1c028:	bgt	1bea8 <__assert_fail@plt+0xa7a8>
   1c02c:	b	1c480 <__assert_fail@plt+0xad80>
   1c030:	ldr	r3, [sp, #20]
   1c034:	add	r0, r6, #1
   1c038:	cmp	r0, #2
   1c03c:	bcc	1c050 <__assert_fail@plt+0xa950>
   1c040:	ldr	r0, [r3, #36]	; 0x24
   1c044:	ldr	r1, [r3, #48]	; 0x30
   1c048:	cmp	r0, r1
   1c04c:	blt	1c09c <__assert_fail@plt+0xa99c>
   1c050:	ldr	r0, [r3, #4]
   1c054:	cmn	r6, #1
   1c058:	strb	r7, [r0, r8]
   1c05c:	ldr	r0, [r3, #8]
   1c060:	str	r7, [r0, r8, lsl #2]
   1c064:	add	r8, r8, #1
   1c068:	bne	1be9c <__assert_fail@plt+0xa79c>
   1c06c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c070:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c074:	stm	r5, {r0, r1}
   1c078:	cmp	r9, r8
   1c07c:	mov	r7, r8
   1c080:	bgt	1bea8 <__assert_fail@plt+0xa7a8>
   1c084:	b	1c480 <__assert_fail@plt+0xad80>
   1c088:	mov	r7, r8
   1c08c:	b	1c480 <__assert_fail@plt+0xad80>
   1c090:	ldr	r3, [sp, #20]
   1c094:	mov	r7, r8
   1c098:	b	1c0b8 <__assert_fail@plt+0xa9b8>
   1c09c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c0a0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c0a4:	mov	r7, r8
   1c0a8:	stm	r5, {r0, r1}
   1c0ac:	b	1c480 <__assert_fail@plt+0xad80>
   1c0b0:	cmp	r8, r9
   1c0b4:	bge	1c480 <__assert_fail@plt+0xad80>
   1c0b8:	mov	r4, r3
   1c0bc:	mov	sl, r9
   1c0c0:	sub	r2, r9, r8
   1c0c4:	ldr	r0, [r4, #16]!
   1c0c8:	ldr	r1, [r4, #4]
   1c0cc:	str	r0, [fp, #-40]	; 0xffffffd8
   1c0d0:	str	r1, [fp, #-36]	; 0xffffffdc
   1c0d4:	ldr	r0, [r4, #48]	; 0x30
   1c0d8:	cmp	r0, #0
   1c0dc:	bne	1c1fc <__assert_fail@plt+0xaafc>
   1c0e0:	ldr	r0, [r3]
   1c0e4:	ldr	r1, [r3, #24]
   1c0e8:	mov	r9, r7
   1c0ec:	add	r0, r0, r1
   1c0f0:	add	r7, r0, r7
   1c0f4:	add	r0, sp, #24
   1c0f8:	mov	r1, r7
   1c0fc:	mov	r3, r4
   1c100:	bl	2bd34 <__assert_fail@plt+0x1a634>
   1c104:	mov	r5, r0
   1c108:	sub	r0, r0, #1
   1c10c:	cmn	r0, #4
   1c110:	str	r0, [sp, #16]
   1c114:	bhi	1c250 <__assert_fail@plt+0xab50>
   1c118:	ldr	r0, [sp, #24]
   1c11c:	bl	116d0 <towupper@plt>
   1c120:	mov	r6, r0
   1c124:	ldr	r0, [sp, #24]
   1c128:	cmp	r6, r0
   1c12c:	bne	1c13c <__assert_fail@plt+0xaa3c>
   1c130:	ldr	r4, [sp, #20]
   1c134:	mov	r1, r7
   1c138:	b	1c15c <__assert_fail@plt+0xaa5c>
   1c13c:	add	r0, sp, #32
   1c140:	sub	r2, fp, #40	; 0x28
   1c144:	mov	r1, r6
   1c148:	bl	113b8 <wcrtomb@plt>
   1c14c:	cmp	r0, r5
   1c150:	bne	1c2d0 <__assert_fail@plt+0xabd0>
   1c154:	ldr	r4, [sp, #20]
   1c158:	add	r1, sp, #32
   1c15c:	ldr	r0, [r4, #4]
   1c160:	add	r0, r0, r8
   1c164:	mov	r2, r5
   1c168:	bl	11448 <memcpy@plt>
   1c16c:	ldrb	r0, [r4, #76]	; 0x4c
   1c170:	mov	r7, r9
   1c174:	mov	r9, sl
   1c178:	mov	r3, r4
   1c17c:	cmp	r0, #0
   1c180:	bne	1c384 <__assert_fail@plt+0xac84>
   1c184:	ldr	r0, [r3, #8]
   1c188:	add	r4, r5, r8
   1c18c:	add	r7, r5, r7
   1c190:	str	r6, [r0, r8, lsl #2]
   1c194:	add	r6, r8, #1
   1c198:	cmp	r6, r4
   1c19c:	bge	1c1f4 <__assert_fail@plt+0xaaf4>
   1c1a0:	mvn	r1, #3
   1c1a4:	add	r0, r0, r6, lsl #2
   1c1a8:	add	r2, r1, r5, lsl #2
   1c1ac:	mov	r1, #255	; 0xff
   1c1b0:	bl	11610 <memset@plt>
   1c1b4:	ldr	r1, [sp, #16]
   1c1b8:	sub	r0, r5, #2
   1c1bc:	ands	r1, r1, #7
   1c1c0:	beq	1c1d0 <__assert_fail@plt+0xaad0>
   1c1c4:	subs	r1, r1, #1
   1c1c8:	add	r6, r6, #1
   1c1cc:	bne	1c1c4 <__assert_fail@plt+0xaac4>
   1c1d0:	ldr	r3, [sp, #20]
   1c1d4:	cmp	r0, #7
   1c1d8:	bcc	1c1ec <__assert_fail@plt+0xaaec>
   1c1dc:	add	r0, r5, r8
   1c1e0:	sub	r0, r0, r6
   1c1e4:	subs	r0, r0, #8
   1c1e8:	bne	1c1e4 <__assert_fail@plt+0xaae4>
   1c1ec:	mov	r8, r4
   1c1f0:	b	1c0b0 <__assert_fail@plt+0xa9b0>
   1c1f4:	mov	r8, r6
   1c1f8:	b	1c0b0 <__assert_fail@plt+0xa9b0>
   1c1fc:	cmp	r2, #1
   1c200:	mov	r9, r7
   1c204:	add	r7, sp, #32
   1c208:	ldrge	r1, [r3, #80]	; 0x50
   1c20c:	cmpge	r1, #1
   1c210:	blt	1c0f4 <__assert_fail@plt+0xa9f4>
   1c214:	ldr	r7, [r3, #24]
   1c218:	ldr	r6, [r3]
   1c21c:	add	r7, r9, r7
   1c220:	add	r3, r6, r7
   1c224:	mov	r6, #0
   1c228:	add	r7, sp, #32
   1c22c:	ldrb	r5, [r3, r6]
   1c230:	ldrb	r5, [r0, r5]
   1c234:	strb	r5, [r7, r6]
   1c238:	add	r6, r6, #1
   1c23c:	cmp	r6, r2
   1c240:	bge	1c0f4 <__assert_fail@plt+0xa9f4>
   1c244:	cmp	r6, r1
   1c248:	blt	1c22c <__assert_fail@plt+0xab2c>
   1c24c:	b	1c0f4 <__assert_fail@plt+0xa9f4>
   1c250:	ldr	r3, [sp, #20]
   1c254:	add	r0, r5, #1
   1c258:	cmp	r0, #2
   1c25c:	bcc	1c270 <__assert_fail@plt+0xab70>
   1c260:	ldr	r0, [r3, #36]	; 0x24
   1c264:	ldr	r1, [r3, #48]	; 0x30
   1c268:	cmp	r0, r1
   1c26c:	blt	1c470 <__assert_fail@plt+0xad70>
   1c270:	ldr	r2, [r3, #24]
   1c274:	ldr	r0, [r3]
   1c278:	ldr	r1, [r3, #64]	; 0x40
   1c27c:	mov	r7, r9
   1c280:	add	r2, r2, r9
   1c284:	cmp	r1, #0
   1c288:	ldrb	r0, [r0, r2]
   1c28c:	bne	1c704 <__assert_fail@plt+0xb004>
   1c290:	ldr	r1, [r3, #4]
   1c294:	mov	r9, sl
   1c298:	strb	r0, [r1, r8]
   1c29c:	ldrb	r1, [r3, #76]	; 0x4c
   1c2a0:	cmp	r1, #0
   1c2a4:	bne	1c70c <__assert_fail@plt+0xb00c>
   1c2a8:	ldr	r1, [r3, #8]
   1c2ac:	add	r7, r7, #1
   1c2b0:	cmn	r5, #1
   1c2b4:	str	r0, [r1, r8, lsl #2]
   1c2b8:	add	r8, r8, #1
   1c2bc:	bne	1c0b0 <__assert_fail@plt+0xa9b0>
   1c2c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c2c4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c2c8:	stm	r4, {r0, r1}
   1c2cc:	b	1c0b0 <__assert_fail@plt+0xa9b0>
   1c2d0:	ldr	r3, [sp, #20]
   1c2d4:	mov	r2, r0
   1c2d8:	cmn	r0, #1
   1c2dc:	beq	1c400 <__assert_fail@plt+0xad00>
   1c2e0:	ldr	r1, [r3, #36]	; 0x24
   1c2e4:	add	r0, r2, r8
   1c2e8:	cmp	r0, r1
   1c2ec:	bhi	1c470 <__assert_fail@plt+0xad70>
   1c2f0:	str	r0, [sp, #12]
   1c2f4:	ldr	r0, [r3, #12]
   1c2f8:	mov	r7, r9
   1c2fc:	cmp	r0, #0
   1c300:	bne	1c324 <__assert_fail@plt+0xac24>
   1c304:	lsl	r0, r1, #2
   1c308:	mov	r4, r2
   1c30c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1c310:	ldr	r3, [sp, #20]
   1c314:	mov	r2, r4
   1c318:	cmp	r0, #0
   1c31c:	str	r0, [r3, #12]
   1c320:	beq	1c6f8 <__assert_fail@plt+0xaff8>
   1c324:	ldrb	r1, [r3, #76]	; 0x4c
   1c328:	ldr	r9, [sp, #16]
   1c32c:	cmp	r1, #0
   1c330:	bne	1c550 <__assert_fail@plt+0xae50>
   1c334:	cmp	r8, #0
   1c338:	beq	1c548 <__assert_fail@plt+0xae48>
   1c33c:	mov	r1, #0
   1c340:	cmp	r8, #4
   1c344:	bcc	1c538 <__assert_fail@plt+0xae38>
   1c348:	bic	r1, r8, #3
   1c34c:	stmib	sp, {r2, r7}
   1c350:	mov	r2, #1
   1c354:	add	r3, pc, #964	; 0x3c4
   1c358:	sub	r7, r1, #4
   1c35c:	add	r2, r2, r7, lsr #2
   1c360:	cmp	r7, #12
   1c364:	and	r4, r2, #3
   1c368:	bcs	1c494 <__assert_fail@plt+0xad94>
   1c36c:	vld1.64	{d16-d17}, [r3 :128]
   1c370:	mov	sl, r4
   1c374:	mov	r3, #0
   1c378:	cmp	sl, #0
   1c37c:	bne	1c508 <__assert_fail@plt+0xae08>
   1c380:	b	1c528 <__assert_fail@plt+0xae28>
   1c384:	ldr	lr, [r3, #12]
   1c388:	mov	r1, #0
   1c38c:	cmp	r5, #4
   1c390:	bcc	1c44c <__assert_fail@plt+0xad4c>
   1c394:	vdup.32	q8, r7
   1c398:	bic	r1, r5, #3
   1c39c:	mov	r3, #1
   1c3a0:	mov	r9, r7
   1c3a4:	subs	r2, r1, #4
   1c3a8:	add	r2, r3, r2, lsr #2
   1c3ac:	add	r3, pc, #876	; 0x36c
   1c3b0:	and	ip, r2, #1
   1c3b4:	beq	1c418 <__assert_fail@plt+0xad18>
   1c3b8:	sub	r4, r2, ip
   1c3bc:	add	r2, pc, #860	; 0x35c
   1c3c0:	vmov.i32	q10, #4	; 0x00000004
   1c3c4:	vmov.i32	q11, #8	; 0x00000008
   1c3c8:	add	r7, lr, r8, lsl #2
   1c3cc:	mov	r3, #0
   1c3d0:	vld1.64	{d18-d19}, [r2 :128]
   1c3d4:	mov	r2, #32
   1c3d8:	vadd.i32	q12, q9, q8
   1c3dc:	vadd.i32	q9, q9, q11
   1c3e0:	add	r0, r7, #16
   1c3e4:	subs	r4, r4, #2
   1c3e8:	add	r3, r3, #8
   1c3ec:	vadd.i32	q13, q12, q10
   1c3f0:	vst1.32	{d24-d25}, [r7], r2
   1c3f4:	vst1.32	{d26-d27}, [r0]
   1c3f8:	bne	1c3d8 <__assert_fail@plt+0xacd8>
   1c3fc:	b	1c420 <__assert_fail@plt+0xad20>
   1c400:	ldr	r0, [r3, #4]
   1c404:	mov	r1, r7
   1c408:	mov	r2, r5
   1c40c:	mov	r4, r3
   1c410:	add	r0, r0, r8
   1c414:	b	1c168 <__assert_fail@plt+0xaa68>
   1c418:	vld1.64	{d18-d19}, [r3 :128]
   1c41c:	mov	r3, #0
   1c420:	cmp	ip, #0
   1c424:	beq	1c438 <__assert_fail@plt+0xad38>
   1c428:	add	r0, r3, r8
   1c42c:	vadd.i32	q8, q9, q8
   1c430:	add	r0, lr, r0, lsl #2
   1c434:	vst1.32	{d16-d17}, [r0]
   1c438:	ldr	r3, [sp, #20]
   1c43c:	mov	r7, r9
   1c440:	cmp	r5, r1
   1c444:	mov	r9, sl
   1c448:	beq	1c184 <__assert_fail@plt+0xaa84>
   1c44c:	add	r0, r8, r1
   1c450:	add	r2, r7, r1
   1c454:	sub	r4, r5, r1
   1c458:	add	r0, lr, r0, lsl #2
   1c45c:	str	r2, [r0], #4
   1c460:	add	r2, r2, #1
   1c464:	subs	r4, r4, #1
   1c468:	bne	1c45c <__assert_fail@plt+0xad5c>
   1c46c:	b	1c184 <__assert_fail@plt+0xaa84>
   1c470:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c474:	mov	r7, r9
   1c478:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c47c:	stm	r4, {r0, r1}
   1c480:	str	r8, [r3, #28]
   1c484:	str	r7, [r3, #32]
   1c488:	mov	r0, #0
   1c48c:	sub	sp, fp, #28
   1c490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c494:	mov	sl, r4
   1c498:	sub	r4, r2, r4
   1c49c:	add	r2, pc, #636	; 0x27c
   1c4a0:	vmov.i32	q9, #12	; 0x0000000c
   1c4a4:	vmov.i32	q10, #8	; 0x00000008
   1c4a8:	vmov.i32	q11, #4	; 0x00000004
   1c4ac:	vmov.i32	q12, #16	; 0x00000010
   1c4b0:	mov	r3, #0
   1c4b4:	mov	lr, #64	; 0x40
   1c4b8:	mov	r7, r0
   1c4bc:	vld1.64	{d16-d17}, [r2 :128]
   1c4c0:	mov	r2, r0
   1c4c4:	vadd.i32	q13, q8, q9
   1c4c8:	add	ip, r2, #48	; 0x30
   1c4cc:	vadd.i32	q14, q8, q10
   1c4d0:	vadd.i32	q15, q8, q11
   1c4d4:	subs	r4, r4, #4
   1c4d8:	add	r3, r3, #16
   1c4dc:	vst1.32	{d26-d27}, [ip]
   1c4e0:	vst1.32	{d16-d17}, [r7], lr
   1c4e4:	vadd.i32	q8, q8, q12
   1c4e8:	add	ip, r2, #32
   1c4ec:	add	r2, r2, #16
   1c4f0:	vst1.32	{d28-d29}, [ip]
   1c4f4:	vst1.32	{d30-d31}, [r2]
   1c4f8:	mov	r2, r7
   1c4fc:	bne	1c4c4 <__assert_fail@plt+0xadc4>
   1c500:	cmp	sl, #0
   1c504:	beq	1c528 <__assert_fail@plt+0xae28>
   1c508:	vmov.i32	q9, #4	; 0x00000004
   1c50c:	add	r2, r0, r3, lsl #2
   1c510:	rsb	r3, sl, #0
   1c514:	vadd.i32	q10, q8, q9
   1c518:	vst1.32	{d16-d17}, [r2]!
   1c51c:	adds	r3, r3, #1
   1c520:	vorr	q8, q10, q10
   1c524:	bcc	1c514 <__assert_fail@plt+0xae14>
   1c528:	ldr	r3, [sp, #20]
   1c52c:	ldmib	sp, {r2, r7}
   1c530:	cmp	r8, r1
   1c534:	beq	1c548 <__assert_fail@plt+0xae48>
   1c538:	str	r1, [r0, r1, lsl #2]
   1c53c:	add	r1, r1, #1
   1c540:	cmp	r8, r1
   1c544:	bne	1c538 <__assert_fail@plt+0xae38>
   1c548:	mov	r0, #1
   1c54c:	strb	r0, [r3, #76]	; 0x4c
   1c550:	ldr	r0, [r3, #4]
   1c554:	add	r1, sp, #32
   1c558:	mov	r4, r3
   1c55c:	mov	sl, r2
   1c560:	add	r0, r0, r8
   1c564:	bl	11448 <memcpy@plt>
   1c568:	ldr	r0, [r4, #8]
   1c56c:	cmp	sl, #2
   1c570:	str	r6, [r0, r8, lsl #2]
   1c574:	mov	r6, r7
   1c578:	ldr	r1, [r4, #12]
   1c57c:	str	r7, [r1, r8, lsl #2]
   1c580:	bcc	1c6b0 <__assert_fail@plt+0xafb0>
   1c584:	sub	lr, sl, #1
   1c588:	mov	ip, r6
   1c58c:	mov	r2, #1
   1c590:	cmp	lr, #4
   1c594:	bcc	1c618 <__assert_fail@plt+0xaf18>
   1c598:	add	r7, sl, r8
   1c59c:	add	r4, r8, #1
   1c5a0:	str	ip, [sp, #8]
   1c5a4:	add	r6, r0, r4, lsl #2
   1c5a8:	add	r3, r0, r7, lsl #2
   1c5ac:	add	r4, r1, r4, lsl #2
   1c5b0:	cmp	r4, r3
   1c5b4:	addcc	r3, r1, r7, lsl #2
   1c5b8:	cmpcc	r6, r3
   1c5bc:	bcc	1c618 <__assert_fail@plt+0xaf18>
   1c5c0:	add	r2, pc, #360	; 0x168
   1c5c4:	ldr	r3, [sp, #8]
   1c5c8:	vdup.32	q9, r9
   1c5cc:	vdup.32	q10, r5
   1c5d0:	vmov.i32	q12, #4	; 0x00000004
   1c5d4:	vmov.i8	q13, #255	; 0xff
   1c5d8:	vld1.64	{d22-d23}, [r2 :128]
   1c5dc:	vdup.32	q8, r3
   1c5e0:	bic	r3, lr, #3
   1c5e4:	orr	r2, r3, #1
   1c5e8:	mov	r7, r3
   1c5ec:	vcgt.u32	q14, q10, q11
   1c5f0:	subs	r7, r7, #4
   1c5f4:	vbsl	q14, q11, q9
   1c5f8:	vadd.i32	q11, q11, q12
   1c5fc:	vadd.i32	q14, q14, q8
   1c600:	vst1.32	{d28-d29}, [r4]!
   1c604:	vst1.32	{d26-d27}, [r6]!
   1c608:	bne	1c5ec <__assert_fail@plt+0xaeec>
   1c60c:	cmp	lr, r3
   1c610:	mov	r6, ip
   1c614:	beq	1c6b0 <__assert_fail@plt+0xafb0>
   1c618:	tst	sl, #1
   1c61c:	mov	r3, r2
   1c620:	bne	1c648 <__assert_fail@plt+0xaf48>
   1c624:	cmp	r2, r5
   1c628:	mov	r3, r9
   1c62c:	add	r7, r2, r8
   1c630:	movcc	r3, r2
   1c634:	add	r3, r3, ip
   1c638:	str	r3, [r1, r7, lsl #2]
   1c63c:	mvn	r3, #0
   1c640:	str	r3, [r0, r7, lsl #2]
   1c644:	add	r3, r2, #1
   1c648:	add	r2, r2, #1
   1c64c:	mov	r6, ip
   1c650:	cmp	sl, r2
   1c654:	beq	1c6b0 <__assert_fail@plt+0xafb0>
   1c658:	add	r2, r8, r3
   1c65c:	add	r2, r2, #1
   1c660:	add	r1, r1, r2, lsl #2
   1c664:	add	r0, r0, r2, lsl #2
   1c668:	mvn	r2, #0
   1c66c:	cmp	r3, r5
   1c670:	mov	r7, r9
   1c674:	movcc	r7, r3
   1c678:	add	r7, r7, r6
   1c67c:	str	r7, [r1, #-4]
   1c680:	add	r7, r3, #1
   1c684:	add	r3, r3, #2
   1c688:	str	r2, [r0, #-4]
   1c68c:	cmp	r7, r5
   1c690:	movcs	r7, r9
   1c694:	cmp	r3, sl
   1c698:	add	r7, r7, r6
   1c69c:	str	r7, [r1]
   1c6a0:	str	r2, [r0]
   1c6a4:	add	r1, r1, #8
   1c6a8:	add	r0, r0, #8
   1c6ac:	bne	1c66c <__assert_fail@plt+0xaf6c>
   1c6b0:	ldr	r3, [sp, #20]
   1c6b4:	sub	r1, sl, r5
   1c6b8:	mov	r7, r6
   1c6bc:	ldr	r0, [r3, #48]	; 0x30
   1c6c0:	ldr	r2, [r3, #52]	; 0x34
   1c6c4:	add	r0, r0, r1
   1c6c8:	cmp	r2, r6
   1c6cc:	str	r0, [r3, #48]	; 0x30
   1c6d0:	ble	1c6e0 <__assert_fail@plt+0xafe0>
   1c6d4:	ldr	r2, [r3, #56]	; 0x38
   1c6d8:	add	r1, r2, r1
   1c6dc:	str	r1, [r3, #56]	; 0x38
   1c6e0:	ldr	r9, [r3, #36]	; 0x24
   1c6e4:	ldr	r8, [sp, #12]
   1c6e8:	add	r7, r5, r7
   1c6ec:	cmp	r9, r0
   1c6f0:	movgt	r9, r0
   1c6f4:	b	1c0b0 <__assert_fail@plt+0xa9b0>
   1c6f8:	mov	r0, #12
   1c6fc:	sub	sp, fp, #28
   1c700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c704:	ldrb	r0, [r1, r0]
   1c708:	b	1c290 <__assert_fail@plt+0xab90>
   1c70c:	ldr	r1, [r3, #12]
   1c710:	str	r7, [r1, r8, lsl #2]
   1c714:	b	1c2a8 <__assert_fail@plt+0xaba8>
   1c718:	nop	{0}
   1c71c:	nop	{0}
   1c720:	andeq	r0, r0, r0
   1c724:	andeq	r0, r0, r1
   1c728:	andeq	r0, r0, r2
   1c72c:	andeq	r0, r0, r3
   1c730:	andeq	r0, r0, r1
   1c734:	andeq	r0, r0, r2
   1c738:	andeq	r0, r0, r3
   1c73c:	andeq	r0, r0, r4
   1c740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c744:	add	fp, sp, #28
   1c748:	sub	sp, sp, #68	; 0x44
   1c74c:	mov	r4, r0
   1c750:	ldr	r8, [r0, #28]
   1c754:	ldr	r5, [r0, #36]	; 0x24
   1c758:	ldr	r0, [r0, #48]	; 0x30
   1c75c:	cmp	r5, r0
   1c760:	movgt	r5, r0
   1c764:	cmp	r5, r8
   1c768:	ble	1c940 <__assert_fail@plt+0xb240>
   1c76c:	add	r9, r4, #16
   1c770:	mov	r0, sp
   1c774:	ldr	r3, [r4, #64]	; 0x40
   1c778:	ldm	r9, {r6, sl}
   1c77c:	sub	r2, r5, r8
   1c780:	cmp	r3, #0
   1c784:	bne	1c884 <__assert_fail@plt+0xb184>
   1c788:	ldr	r3, [r4]
   1c78c:	ldr	r1, [r4, #24]
   1c790:	add	r1, r3, r1
   1c794:	add	r1, r1, r8
   1c798:	mov	r3, r9
   1c79c:	bl	2bd34 <__assert_fail@plt+0x1a634>
   1c7a0:	mov	r7, r0
   1c7a4:	add	r0, r0, #1
   1c7a8:	cmp	r0, #2
   1c7ac:	bcc	1c7c8 <__assert_fail@plt+0xb0c8>
   1c7b0:	cmn	r7, #2
   1c7b4:	bne	1c7f4 <__assert_fail@plt+0xb0f4>
   1c7b8:	ldr	r0, [r4, #36]	; 0x24
   1c7bc:	ldr	r1, [r4, #48]	; 0x30
   1c7c0:	cmp	r0, r1
   1c7c4:	blt	1c93c <__assert_fail@plt+0xb23c>
   1c7c8:	ldr	r1, [r4, #24]
   1c7cc:	ldr	r0, [r4]
   1c7d0:	add	r1, r1, r8
   1c7d4:	ldrb	r0, [r0, r1]
   1c7d8:	str	r0, [sp]
   1c7dc:	ldr	r1, [r4, #64]	; 0x40
   1c7e0:	cmp	r1, #0
   1c7e4:	bne	1c930 <__assert_fail@plt+0xb230>
   1c7e8:	mov	r7, #1
   1c7ec:	stm	r9, {r6, sl}
   1c7f0:	b	1c7f8 <__assert_fail@plt+0xb0f8>
   1c7f4:	ldr	r0, [sp]
   1c7f8:	ldr	r1, [r4, #8]
   1c7fc:	add	sl, r7, r8
   1c800:	add	r6, r8, #1
   1c804:	cmp	r6, sl
   1c808:	str	r0, [r1, r8, lsl #2]
   1c80c:	bge	1c870 <__assert_fail@plt+0xb170>
   1c810:	mvn	r0, #3
   1c814:	add	r2, r0, r7, lsl #2
   1c818:	add	r0, r1, r8, lsl #2
   1c81c:	mov	r1, #255	; 0xff
   1c820:	add	r0, r0, #4
   1c824:	bl	11610 <memset@plt>
   1c828:	sub	r1, r7, #1
   1c82c:	sub	r0, r7, #2
   1c830:	ands	r1, r1, #7
   1c834:	beq	1c844 <__assert_fail@plt+0xb144>
   1c838:	subs	r1, r1, #1
   1c83c:	add	r6, r6, #1
   1c840:	bne	1c838 <__assert_fail@plt+0xb138>
   1c844:	cmp	r0, #7
   1c848:	bcc	1c85c <__assert_fail@plt+0xb15c>
   1c84c:	add	r0, r7, r8
   1c850:	sub	r0, r0, r6
   1c854:	subs	r0, r0, #8
   1c858:	bne	1c854 <__assert_fail@plt+0xb154>
   1c85c:	mov	r8, sl
   1c860:	mov	r0, sp
   1c864:	cmp	r5, r8
   1c868:	bgt	1c774 <__assert_fail@plt+0xb074>
   1c86c:	b	1c940 <__assert_fail@plt+0xb240>
   1c870:	mov	r8, r6
   1c874:	mov	r0, sp
   1c878:	cmp	r5, r8
   1c87c:	bgt	1c774 <__assert_fail@plt+0xb074>
   1c880:	b	1c940 <__assert_fail@plt+0xb240>
   1c884:	cmp	r2, #1
   1c888:	add	r1, sp, #4
   1c88c:	blt	1c798 <__assert_fail@plt+0xb098>
   1c890:	ldr	r1, [r4, #80]	; 0x50
   1c894:	cmp	r1, #1
   1c898:	add	r1, sp, #4
   1c89c:	blt	1c798 <__assert_fail@plt+0xb098>
   1c8a0:	ldr	r7, [r4, #24]
   1c8a4:	ldm	r4, {r1, ip}
   1c8a8:	cmp	r2, #2
   1c8ac:	add	r7, r8, r7
   1c8b0:	ldrb	r1, [r1, r7]
   1c8b4:	ldrb	r1, [r3, r1]
   1c8b8:	strb	r1, [ip, r8]
   1c8bc:	strb	r1, [sp, #4]
   1c8c0:	add	r1, sp, #4
   1c8c4:	blt	1c798 <__assert_fail@plt+0xb098>
   1c8c8:	ldr	r1, [r4, #80]	; 0x50
   1c8cc:	cmp	r1, #2
   1c8d0:	add	r1, sp, #4
   1c8d4:	blt	1c798 <__assert_fail@plt+0xb098>
   1c8d8:	mov	lr, r0
   1c8dc:	mov	r0, #1
   1c8e0:	ldr	r7, [r4, #24]
   1c8e4:	ldm	r4, {r1, ip}
   1c8e8:	ldr	r3, [r4, #64]	; 0x40
   1c8ec:	add	r1, r1, r7
   1c8f0:	add	r1, r1, r8
   1c8f4:	ldrb	r1, [r1, r0]
   1c8f8:	ldrb	r1, [r3, r1]
   1c8fc:	add	r3, ip, r8
   1c900:	strb	r1, [r3, r0]
   1c904:	add	r3, sp, #4
   1c908:	strb	r1, [r3, r0]
   1c90c:	add	r0, r0, #1
   1c910:	cmp	r0, r2
   1c914:	bge	1c924 <__assert_fail@plt+0xb224>
   1c918:	ldr	r1, [r4, #80]	; 0x50
   1c91c:	cmp	r0, r1
   1c920:	blt	1c8e0 <__assert_fail@plt+0xb1e0>
   1c924:	add	r1, sp, #4
   1c928:	mov	r0, lr
   1c92c:	b	1c798 <__assert_fail@plt+0xb098>
   1c930:	ldrb	r0, [r1, r0]
   1c934:	str	r0, [sp]
   1c938:	b	1c7e8 <__assert_fail@plt+0xb0e8>
   1c93c:	stm	r9, {r6, sl}
   1c940:	str	r8, [r4, #28]
   1c944:	str	r8, [r4, #32]
   1c948:	sub	sp, fp, #28
   1c94c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c954:	add	fp, sp, #28
   1c958:	sub	sp, sp, #28
   1c95c:	ldr	r8, [r1]
   1c960:	mov	r7, r0
   1c964:	ldr	r6, [fp, #12]
   1c968:	mov	r5, r2
   1c96c:	str	r1, [sp, #20]
   1c970:	str	r3, [sp, #24]
   1c974:	ldr	r0, [r8, #84]	; 0x54
   1c978:	str	r6, [sp, #4]
   1c97c:	str	r0, [sp, #16]
   1c980:	ldr	r0, [fp, #8]
   1c984:	str	r0, [sp]
   1c988:	mov	r0, r7
   1c98c:	bl	1d52c <__assert_fail@plt+0xbe2c>
   1c990:	mov	r4, r0
   1c994:	cmp	r0, #0
   1c998:	bne	1c9a8 <__assert_fail@plt+0xb2a8>
   1c99c:	ldr	r0, [r6]
   1c9a0:	cmp	r0, #0
   1c9a4:	bne	1cccc <__assert_fail@plt+0xb5cc>
   1c9a8:	ldrb	r0, [r5, #4]
   1c9ac:	cmp	r0, #10
   1c9b0:	bne	1cafc <__assert_fail@plt+0xb3fc>
   1c9b4:	ldr	r0, [sp, #24]
   1c9b8:	mov	r9, #0
   1c9bc:	orr	sl, r0, #8388608	; 0x800000
   1c9c0:	ldr	r0, [fp, #8]
   1c9c4:	str	sl, [sp, #12]
   1c9c8:	cmp	r0, #0
   1c9cc:	beq	1cb30 <__assert_fail@plt+0xb430>
   1c9d0:	mov	r0, r5
   1c9d4:	mov	r1, r7
   1c9d8:	mov	r2, sl
   1c9dc:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1c9e0:	ldr	r1, [r7, #40]	; 0x28
   1c9e4:	mov	r6, #0
   1c9e8:	add	r0, r1, r0
   1c9ec:	str	r0, [r7, #40]	; 0x28
   1c9f0:	ldrb	r0, [r5, #4]
   1c9f4:	orr	r1, r0, #8
   1c9f8:	cmp	r1, #10
   1c9fc:	bne	1ca60 <__assert_fail@plt+0xb360>
   1ca00:	ldr	r1, [r8, #64]	; 0x40
   1ca04:	cmp	r1, #31
   1ca08:	beq	1cad4 <__assert_fail@plt+0xb3d4>
   1ca0c:	ldr	r0, [r8, #56]	; 0x38
   1ca10:	add	r0, r0, r1, lsl #5
   1ca14:	add	r2, r1, #1
   1ca18:	mov	r1, #10
   1ca1c:	cmp	r4, #0
   1ca20:	str	r2, [r8, #64]	; 0x40
   1ca24:	str	r9, [r0, #4]!
   1ca28:	stmib	r0, {r4, r6, r9}
   1ca2c:	str	r9, [r0, #16]
   1ca30:	str	r9, [r0, #20]
   1ca34:	str	r1, [r0, #24]
   1ca38:	mvn	r1, #0
   1ca3c:	str	r1, [r0, #28]
   1ca40:	strne	r0, [r4]
   1ca44:	cmp	r6, #0
   1ca48:	mov	r4, r0
   1ca4c:	strne	r0, [r6]
   1ca50:	ldrb	r1, [r5, #4]
   1ca54:	cmp	r1, #10
   1ca58:	beq	1c9d0 <__assert_fail@plt+0xb2d0>
   1ca5c:	b	1cc14 <__assert_fail@plt+0xb514>
   1ca60:	cmp	r0, #9
   1ca64:	mov	r6, #0
   1ca68:	beq	1ca00 <__assert_fail@plt+0xb300>
   1ca6c:	ldr	r0, [sp, #16]
   1ca70:	ldr	sl, [r8, #84]	; 0x54
   1ca74:	ldr	r1, [sp, #20]
   1ca78:	ldr	r3, [sp, #24]
   1ca7c:	mov	r2, r5
   1ca80:	str	r0, [r8, #84]	; 0x54
   1ca84:	ldr	r0, [fp, #8]
   1ca88:	str	r0, [sp]
   1ca8c:	ldr	r0, [fp, #12]
   1ca90:	str	r0, [sp, #4]
   1ca94:	mov	r0, r7
   1ca98:	bl	1d52c <__assert_fail@plt+0xbe2c>
   1ca9c:	mov	r6, r0
   1caa0:	cmp	r0, #0
   1caa4:	bne	1cab8 <__assert_fail@plt+0xb3b8>
   1caa8:	ldr	r0, [fp, #12]
   1caac:	ldr	r0, [r0]
   1cab0:	cmp	r0, #0
   1cab4:	bne	1cc1c <__assert_fail@plt+0xb51c>
   1cab8:	ldr	r0, [r8, #84]	; 0x54
   1cabc:	orr	r0, r0, sl
   1cac0:	ldr	sl, [sp, #12]
   1cac4:	str	r0, [r8, #84]	; 0x54
   1cac8:	ldr	r1, [r8, #64]	; 0x40
   1cacc:	cmp	r1, #31
   1cad0:	bne	1ca0c <__assert_fail@plt+0xb30c>
   1cad4:	mov	r0, #996	; 0x3e4
   1cad8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1cadc:	cmp	r0, #0
   1cae0:	beq	1ccc0 <__assert_fail@plt+0xb5c0>
   1cae4:	ldr	r1, [r8, #56]	; 0x38
   1cae8:	str	r1, [r0]
   1caec:	mov	r1, #0
   1caf0:	str	r1, [r8, #64]	; 0x40
   1caf4:	str	r0, [r8, #56]	; 0x38
   1caf8:	b	1ca10 <__assert_fail@plt+0xb310>
   1cafc:	mov	r0, r4
   1cb00:	sub	sp, fp, #28
   1cb04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb08:	mov	r0, #996	; 0x3e4
   1cb0c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1cb10:	cmp	r0, #0
   1cb14:	beq	1ccc0 <__assert_fail@plt+0xb5c0>
   1cb18:	ldr	r1, [r8, #56]	; 0x38
   1cb1c:	str	r1, [r0]
   1cb20:	mov	r1, #0
   1cb24:	str	r1, [r8, #64]	; 0x40
   1cb28:	str	r0, [r8, #56]	; 0x38
   1cb2c:	b	1cbc8 <__assert_fail@plt+0xb4c8>
   1cb30:	mov	r0, r5
   1cb34:	mov	r1, r7
   1cb38:	mov	r2, sl
   1cb3c:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1cb40:	ldr	r1, [r7, #40]	; 0x28
   1cb44:	mov	r6, #0
   1cb48:	add	r0, r1, r0
   1cb4c:	str	r0, [r7, #40]	; 0x28
   1cb50:	ldrb	r0, [r5, #4]
   1cb54:	orr	r0, r0, #8
   1cb58:	cmp	r0, #10
   1cb5c:	beq	1cbb8 <__assert_fail@plt+0xb4b8>
   1cb60:	ldr	r0, [sp, #16]
   1cb64:	ldr	sl, [r8, #84]	; 0x54
   1cb68:	ldr	r1, [sp, #20]
   1cb6c:	ldr	r3, [sp, #24]
   1cb70:	mov	r2, r5
   1cb74:	str	r0, [r8, #84]	; 0x54
   1cb78:	ldr	r0, [fp, #12]
   1cb7c:	str	r9, [sp]
   1cb80:	str	r0, [sp, #4]
   1cb84:	mov	r0, r7
   1cb88:	bl	1d52c <__assert_fail@plt+0xbe2c>
   1cb8c:	mov	r6, r0
   1cb90:	cmp	r0, #0
   1cb94:	bne	1cba8 <__assert_fail@plt+0xb4a8>
   1cb98:	ldr	r0, [fp, #12]
   1cb9c:	ldr	r0, [r0]
   1cba0:	cmp	r0, #0
   1cba4:	bne	1cc1c <__assert_fail@plt+0xb51c>
   1cba8:	ldr	r0, [r8, #84]	; 0x54
   1cbac:	orr	r0, r0, sl
   1cbb0:	ldr	sl, [sp, #12]
   1cbb4:	str	r0, [r8, #84]	; 0x54
   1cbb8:	ldr	r1, [r8, #64]	; 0x40
   1cbbc:	cmp	r1, #31
   1cbc0:	beq	1cb08 <__assert_fail@plt+0xb408>
   1cbc4:	ldr	r0, [r8, #56]	; 0x38
   1cbc8:	add	r0, r0, r1, lsl #5
   1cbcc:	add	r2, r1, #1
   1cbd0:	mov	r1, #10
   1cbd4:	cmp	r4, #0
   1cbd8:	str	r2, [r8, #64]	; 0x40
   1cbdc:	str	r9, [r0, #4]!
   1cbe0:	stmib	r0, {r4, r6, r9}
   1cbe4:	str	r9, [r0, #16]
   1cbe8:	str	r9, [r0, #20]
   1cbec:	str	r1, [r0, #24]
   1cbf0:	mvn	r1, #0
   1cbf4:	str	r1, [r0, #28]
   1cbf8:	strne	r0, [r4]
   1cbfc:	cmp	r6, #0
   1cc00:	mov	r4, r0
   1cc04:	strne	r0, [r6]
   1cc08:	ldrb	r1, [r5, #4]
   1cc0c:	cmp	r1, #10
   1cc10:	beq	1cb30 <__assert_fail@plt+0xb430>
   1cc14:	sub	sp, fp, #28
   1cc18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc1c:	cmp	r4, #0
   1cc20:	beq	1cccc <__assert_fail@plt+0xb5cc>
   1cc24:	movw	r5, #255	; 0xff
   1cc28:	movt	r5, #4
   1cc2c:	mov	r6, r4
   1cc30:	ldr	r4, [r4, #4]
   1cc34:	cmp	r4, #0
   1cc38:	bne	1cc2c <__assert_fail@plt+0xb52c>
   1cc3c:	ldr	r4, [r6, #8]
   1cc40:	cmp	r4, #0
   1cc44:	bne	1cc2c <__assert_fail@plt+0xb52c>
   1cc48:	ldr	r0, [r6, #24]
   1cc4c:	and	r0, r0, r5
   1cc50:	cmp	r0, #3
   1cc54:	beq	1cc88 <__assert_fail@plt+0xb588>
   1cc58:	cmp	r0, #6
   1cc5c:	bne	1cc94 <__assert_fail@plt+0xb594>
   1cc60:	ldr	r4, [r6, #20]
   1cc64:	ldr	r0, [r4]
   1cc68:	bl	13ddc <__assert_fail@plt+0x26dc>
   1cc6c:	ldr	r0, [r4, #4]
   1cc70:	bl	13ddc <__assert_fail@plt+0x26dc>
   1cc74:	ldr	r0, [r4, #8]
   1cc78:	bl	13ddc <__assert_fail@plt+0x26dc>
   1cc7c:	ldr	r0, [r4, #12]
   1cc80:	bl	13ddc <__assert_fail@plt+0x26dc>
   1cc84:	b	1cc8c <__assert_fail@plt+0xb58c>
   1cc88:	ldr	r4, [r6, #20]
   1cc8c:	mov	r0, r4
   1cc90:	bl	13ddc <__assert_fail@plt+0x26dc>
   1cc94:	ldr	r0, [r6]
   1cc98:	cmp	r0, #0
   1cc9c:	beq	1cccc <__assert_fail@plt+0xb5cc>
   1cca0:	ldr	r4, [r0, #8]
   1cca4:	cmp	r4, r6
   1cca8:	mov	r6, r0
   1ccac:	beq	1cc48 <__assert_fail@plt+0xb548>
   1ccb0:	cmp	r4, #0
   1ccb4:	mov	r6, r0
   1ccb8:	beq	1cc48 <__assert_fail@plt+0xb548>
   1ccbc:	b	1cc2c <__assert_fail@plt+0xb52c>
   1ccc0:	ldr	r1, [fp, #12]
   1ccc4:	mov	r0, #12
   1ccc8:	str	r0, [r1]
   1cccc:	mov	r0, #0
   1ccd0:	sub	sp, fp, #28
   1ccd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccd8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ccdc:	add	fp, sp, #24
   1cce0:	sub	sp, sp, #8
   1cce4:	mov	r9, r0
   1cce8:	mov	r7, r1
   1ccec:	ldr	r0, [r1, #40]	; 0x28
   1ccf0:	ldr	r1, [r1, #56]	; 0x38
   1ccf4:	cmp	r1, r0
   1ccf8:	ble	1cde0 <__assert_fail@plt+0xb6e0>
   1ccfc:	ldr	r1, [r7, #4]
   1cd00:	mov	r5, r9
   1cd04:	mov	r8, r2
   1cd08:	ldrb	r6, [r1, r0]
   1cd0c:	strb	r6, [r5], #4
   1cd10:	ldr	r0, [r5]
   1cd14:	bic	r1, r0, #6291456	; 0x600000
   1cd18:	str	r1, [r5]
   1cd1c:	ldr	r3, [r7, #80]	; 0x50
   1cd20:	cmp	r3, #2
   1cd24:	blt	1cd48 <__assert_fail@plt+0xb648>
   1cd28:	ldr	r2, [r7, #28]
   1cd2c:	ldr	r1, [r7, #40]	; 0x28
   1cd30:	cmp	r1, r2
   1cd34:	beq	1cd48 <__assert_fail@plt+0xb648>
   1cd38:	ldr	r2, [r7, #8]
   1cd3c:	ldr	r1, [r2, r1, lsl #2]
   1cd40:	cmn	r1, #1
   1cd44:	beq	1d224 <__assert_fail@plt+0xbb24>
   1cd48:	movw	r1, #65280	; 0xff00
   1cd4c:	cmp	r6, #92	; 0x5c
   1cd50:	movt	r1, #65439	; 0xff9f
   1cd54:	bne	1cdf8 <__assert_fail@plt+0xb6f8>
   1cd58:	ldr	r6, [r7, #40]	; 0x28
   1cd5c:	ldr	r4, [r7, #48]	; 0x30
   1cd60:	add	r2, r6, #1
   1cd64:	cmp	r2, r4
   1cd68:	bge	1ce4c <__assert_fail@plt+0xb74c>
   1cd6c:	ldrb	r4, [r7, #75]	; 0x4b
   1cd70:	cmp	r4, #0
   1cd74:	bne	1d4b8 <__assert_fail@plt+0xbdb8>
   1cd78:	ldr	r3, [r7, #4]
   1cd7c:	ldrb	r6, [r3, r2]
   1cd80:	and	r0, r0, r1
   1cd84:	strb	r6, [r9]
   1cd88:	orr	r4, r0, #1
   1cd8c:	str	r4, [r9, #4]
   1cd90:	ldr	r0, [r7, #80]	; 0x50
   1cd94:	cmp	r0, #2
   1cd98:	blt	1d070 <__assert_fail@plt+0xb970>
   1cd9c:	ldr	r0, [r7, #8]
   1cda0:	ldr	r1, [r7, #40]	; 0x28
   1cda4:	add	r0, r0, r1, lsl #2
   1cda8:	ldr	r4, [r0, #4]
   1cdac:	mov	r0, r4
   1cdb0:	bl	115f8 <iswalnum@plt>
   1cdb4:	sub	r1, r4, #95	; 0x5f
   1cdb8:	cmp	r0, #0
   1cdbc:	clz	r1, r1
   1cdc0:	movwne	r0, #1
   1cdc4:	lsr	r1, r1, #5
   1cdc8:	orr	r0, r1, r0
   1cdcc:	ldr	r1, [r5]
   1cdd0:	bic	r1, r1, #4194304	; 0x400000
   1cdd4:	orr	r0, r1, r0, lsl #22
   1cdd8:	uxtb	r1, r6
   1cddc:	b	1d094 <__assert_fail@plt+0xb994>
   1cde0:	mov	r0, #2
   1cde4:	mov	r4, #0
   1cde8:	strb	r0, [r9, #4]
   1cdec:	mov	r0, r4
   1cdf0:	sub	sp, fp, #24
   1cdf4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cdf8:	and	r0, r0, r1
   1cdfc:	orr	r4, r0, #1
   1ce00:	str	r4, [r5]
   1ce04:	ldr	r0, [r7, #80]	; 0x50
   1ce08:	cmp	r0, #2
   1ce0c:	blt	1ce58 <__assert_fail@plt+0xb758>
   1ce10:	ldr	r0, [r7, #8]
   1ce14:	ldr	r1, [r7, #40]	; 0x28
   1ce18:	ldr	r4, [r0, r1, lsl #2]
   1ce1c:	mov	r0, r4
   1ce20:	bl	115f8 <iswalnum@plt>
   1ce24:	sub	r1, r4, #95	; 0x5f
   1ce28:	cmp	r0, #0
   1ce2c:	clz	r1, r1
   1ce30:	movwne	r0, #1
   1ce34:	lsr	r1, r1, #5
   1ce38:	orr	r0, r1, r0
   1ce3c:	ldr	r1, [r5]
   1ce40:	bic	r1, r1, #4194304	; 0x400000
   1ce44:	orr	r0, r1, r0, lsl #22
   1ce48:	b	1ce78 <__assert_fail@plt+0xb778>
   1ce4c:	and	r0, r0, r1
   1ce50:	orr	r0, r0, #36	; 0x24
   1ce54:	b	1d238 <__assert_fail@plt+0xbb38>
   1ce58:	bl	11598 <__ctype_b_loc@plt>
   1ce5c:	ldr	r0, [r0]
   1ce60:	cmp	r6, #95	; 0x5f
   1ce64:	add	r0, r0, r6, lsl #1
   1ce68:	ldrh	r0, [r0]
   1ce6c:	ubfx	r0, r0, #3, #1
   1ce70:	movweq	r0, #1
   1ce74:	orr	r0, r4, r0, lsl #22
   1ce78:	sub	r1, r6, #10
   1ce7c:	mov	r4, #1
   1ce80:	str	r0, [r5]
   1ce84:	cmp	r1, #115	; 0x73
   1ce88:	bhi	1d4ac <__assert_fail@plt+0xbdac>
   1ce8c:	add	r2, pc, #0
   1ce90:	ldr	pc, [r2, r1, lsl #2]
   1ce94:	andeq	sp, r1, r4, rrx
   1ce98:	andeq	sp, r1, ip, lsr #9
   1ce9c:	andeq	sp, r1, ip, lsr #9
   1cea0:	andeq	sp, r1, ip, lsr #9
   1cea4:	andeq	sp, r1, ip, lsr #9
   1cea8:	andeq	sp, r1, ip, lsr #9
   1ceac:	andeq	sp, r1, ip, lsr #9
   1ceb0:	andeq	sp, r1, ip, lsr #9
   1ceb4:	andeq	sp, r1, ip, lsr #9
   1ceb8:	andeq	sp, r1, ip, lsr #9
   1cebc:	andeq	sp, r1, ip, lsr #9
   1cec0:	andeq	sp, r1, ip, lsr #9
   1cec4:	andeq	sp, r1, ip, lsr #9
   1cec8:	andeq	sp, r1, ip, lsr #9
   1cecc:	andeq	sp, r1, ip, lsr #9
   1ced0:	andeq	sp, r1, ip, lsr #9
   1ced4:	andeq	sp, r1, ip, lsr #9
   1ced8:	andeq	sp, r1, ip, lsr #9
   1cedc:	andeq	sp, r1, ip, lsr #9
   1cee0:	andeq	sp, r1, ip, lsr #9
   1cee4:	andeq	sp, r1, ip, lsr #9
   1cee8:	andeq	sp, r1, ip, lsr #9
   1ceec:	andeq	sp, r1, ip, lsr #9
   1cef0:	andeq	sp, r1, ip, lsr #9
   1cef4:	andeq	sp, r1, ip, lsr #9
   1cef8:	andeq	sp, r1, ip, lsr #9
   1cefc:	andeq	sp, r1, ip, asr #4
   1cf00:	andeq	sp, r1, ip, lsr #9
   1cf04:	andeq	sp, r1, ip, lsr #9
   1cf08:	andeq	sp, r1, ip, lsr #9
   1cf0c:	andeq	sp, r1, r4, lsr #5
   1cf10:			; <UNDEFINED> instruction: 0x0001d2b0
   1cf14:			; <UNDEFINED> instruction: 0x0001d2bc
   1cf18:	andeq	sp, r1, r4, asr #5
   1cf1c:	andeq	sp, r1, ip, lsr #9
   1cf20:	andeq	sp, r1, ip, lsr #9
   1cf24:	ldrdeq	sp, [r1], -r4
   1cf28:	andeq	sp, r1, ip, lsr #9
   1cf2c:	andeq	sp, r1, ip, lsr #9
   1cf30:	andeq	sp, r1, ip, lsr #9
   1cf34:	andeq	sp, r1, ip, lsr #9
   1cf38:	andeq	sp, r1, ip, lsr #9
   1cf3c:	andeq	sp, r1, ip, lsr #9
   1cf40:	andeq	sp, r1, ip, lsr #9
   1cf44:	andeq	sp, r1, ip, lsr #9
   1cf48:	andeq	sp, r1, ip, lsr #9
   1cf4c:	andeq	sp, r1, ip, lsr #9
   1cf50:	andeq	sp, r1, ip, lsr #9
   1cf54:	andeq	sp, r1, ip, lsr #9
   1cf58:	andeq	sp, r1, ip, lsr #9
   1cf5c:	andeq	sp, r1, ip, lsr #9
   1cf60:	andeq	sp, r1, ip, lsr #9
   1cf64:	andeq	sp, r1, ip, lsr #9
   1cf68:	ldrdeq	sp, [r1], -ip
   1cf6c:	andeq	sp, r1, ip, lsr #9
   1cf70:	andeq	sp, r1, ip, lsr #9
   1cf74:	andeq	sp, r1, ip, lsr #9
   1cf78:	andeq	sp, r1, ip, lsr #9
   1cf7c:	andeq	sp, r1, ip, lsr #9
   1cf80:	andeq	sp, r1, ip, lsr #9
   1cf84:	andeq	sp, r1, ip, lsr #9
   1cf88:	andeq	sp, r1, ip, lsr #9
   1cf8c:	andeq	sp, r1, ip, lsr #9
   1cf90:	andeq	sp, r1, ip, lsr #9
   1cf94:	andeq	sp, r1, ip, lsr #9
   1cf98:	andeq	sp, r1, ip, lsr #9
   1cf9c:	andeq	sp, r1, ip, lsr #9
   1cfa0:	andeq	sp, r1, ip, lsr #9
   1cfa4:	andeq	sp, r1, ip, lsr #9
   1cfa8:	andeq	sp, r1, ip, lsr #9
   1cfac:	andeq	sp, r1, ip, lsr #9
   1cfb0:	andeq	sp, r1, ip, lsr #9
   1cfb4:	andeq	sp, r1, ip, lsr #9
   1cfb8:	andeq	sp, r1, ip, lsr #9
   1cfbc:	andeq	sp, r1, ip, lsr #9
   1cfc0:	andeq	sp, r1, ip, lsr #9
   1cfc4:	andeq	sp, r1, ip, lsr #9
   1cfc8:	andeq	sp, r1, ip, lsr #9
   1cfcc:	andeq	sp, r1, ip, lsr #9
   1cfd0:	andeq	sp, r1, ip, lsr #9
   1cfd4:	andeq	sp, r1, ip, lsr #9
   1cfd8:	andeq	sp, r1, ip, ror #5
   1cfdc:	andeq	sp, r1, ip, lsr #9
   1cfe0:	andeq	sp, r1, ip, lsr #9
   1cfe4:	strdeq	sp, [r1], -r4
   1cfe8:	andeq	sp, r1, ip, lsr #9
   1cfec:	andeq	sp, r1, ip, lsr #9
   1cff0:	andeq	sp, r1, ip, lsr #9
   1cff4:	andeq	sp, r1, ip, lsr #9
   1cff8:	andeq	sp, r1, ip, lsr #9
   1cffc:	andeq	sp, r1, ip, lsr #9
   1d000:	andeq	sp, r1, ip, lsr #9
   1d004:	andeq	sp, r1, ip, lsr #9
   1d008:	andeq	sp, r1, ip, lsr #9
   1d00c:	andeq	sp, r1, ip, lsr #9
   1d010:	andeq	sp, r1, ip, lsr #9
   1d014:	andeq	sp, r1, ip, lsr #9
   1d018:	andeq	sp, r1, ip, lsr #9
   1d01c:	andeq	sp, r1, ip, lsr #9
   1d020:	andeq	sp, r1, ip, lsr #9
   1d024:	andeq	sp, r1, ip, lsr #9
   1d028:	andeq	sp, r1, ip, lsr #9
   1d02c:	andeq	sp, r1, ip, lsr #9
   1d030:	andeq	sp, r1, ip, lsr #9
   1d034:	andeq	sp, r1, ip, lsr #9
   1d038:	andeq	sp, r1, ip, lsr #9
   1d03c:	andeq	sp, r1, ip, lsr #9
   1d040:	andeq	sp, r1, ip, lsr #9
   1d044:	andeq	sp, r1, ip, lsr #9
   1d048:	andeq	sp, r1, ip, lsr #9
   1d04c:	andeq	sp, r1, ip, lsr #9
   1d050:	andeq	sp, r1, ip, lsr #9
   1d054:	andeq	sp, r1, ip, lsr #9
   1d058:	andeq	sp, r1, r4, lsr #6
   1d05c:	andeq	sp, r1, r4, lsr r3
   1d060:	andeq	sp, r1, r8, asr #6
   1d064:	tst	r8, #2048	; 0x800
   1d068:	bne	1d340 <__assert_fail@plt+0xbc40>
   1d06c:	b	1d4ac <__assert_fail@plt+0xbdac>
   1d070:	bl	11598 <__ctype_b_loc@plt>
   1d074:	ldr	r0, [r0]
   1d078:	uxtb	r1, r6
   1d07c:	cmp	r1, #95	; 0x5f
   1d080:	add	r0, r0, r1, lsl #1
   1d084:	ldrh	r0, [r0]
   1d088:	ubfx	r0, r0, #3, #1
   1d08c:	movweq	r0, #1
   1d090:	orr	r0, r4, r0, lsl #22
   1d094:	mvn	r2, #38	; 0x26
   1d098:	mov	r4, #2
   1d09c:	str	r0, [r5]
   1d0a0:	uxtab	r2, r2, r6
   1d0a4:	cmp	r2, #86	; 0x56
   1d0a8:	bhi	1d4ac <__assert_fail@plt+0xbdac>
   1d0ac:	add	r3, pc, #0
   1d0b0:	ldr	pc, [r3, r2, lsl #2]
   1d0b4:	andeq	sp, r1, r4, lsl #7
   1d0b8:	muleq	r1, r4, r3
   1d0bc:	andeq	sp, r1, r4, lsr #7
   1d0c0:	andeq	sp, r1, ip, lsr #9
   1d0c4:			; <UNDEFINED> instruction: 0x0001d3b4
   1d0c8:	andeq	sp, r1, ip, lsr #9
   1d0cc:	andeq	sp, r1, ip, lsr #9
   1d0d0:	andeq	sp, r1, ip, lsr #9
   1d0d4:	andeq	sp, r1, ip, lsr #9
   1d0d8:	andeq	sp, r1, ip, lsr #9
   1d0dc:	andeq	sp, r1, r0, lsl r2
   1d0e0:	andeq	sp, r1, r0, lsl r2
   1d0e4:	andeq	sp, r1, r0, lsl r2
   1d0e8:	andeq	sp, r1, r0, lsl r2
   1d0ec:	andeq	sp, r1, r0, lsl r2
   1d0f0:	andeq	sp, r1, r0, lsl r2
   1d0f4:	andeq	sp, r1, r0, lsl r2
   1d0f8:	andeq	sp, r1, r0, lsl r2
   1d0fc:	andeq	sp, r1, r0, lsl r2
   1d100:	andeq	sp, r1, ip, lsr #9
   1d104:	andeq	sp, r1, ip, lsr #9
   1d108:	andeq	sp, r1, ip, asr #7
   1d10c:	andeq	sp, r1, ip, lsr #9
   1d110:	ldrdeq	sp, [r1], -ip
   1d114:	andeq	sp, r1, ip, ror #7
   1d118:	andeq	sp, r1, ip, lsr #9
   1d11c:	andeq	sp, r1, ip, lsr #9
   1d120:	andeq	sp, r1, r4, lsl #8
   1d124:	andeq	sp, r1, ip, lsr #9
   1d128:	andeq	sp, r1, ip, lsr #9
   1d12c:	andeq	sp, r1, ip, lsr #9
   1d130:	andeq	sp, r1, ip, lsr #9
   1d134:	andeq	sp, r1, ip, lsr #9
   1d138:	andeq	sp, r1, ip, lsr #9
   1d13c:	andeq	sp, r1, ip, lsr #9
   1d140:	andeq	sp, r1, ip, lsr #9
   1d144:	andeq	sp, r1, ip, lsr #9
   1d148:	andeq	sp, r1, ip, lsr #9
   1d14c:	andeq	sp, r1, ip, lsr #9
   1d150:	andeq	sp, r1, ip, lsr #9
   1d154:	andeq	sp, r1, ip, lsr #9
   1d158:	andeq	sp, r1, ip, lsr #9
   1d15c:	andeq	sp, r1, ip, lsr #9
   1d160:	andeq	sp, r1, ip, lsr #9
   1d164:	andeq	sp, r1, r4, lsl r4
   1d168:	andeq	sp, r1, ip, lsr #9
   1d16c:	andeq	sp, r1, ip, lsr #9
   1d170:	andeq	sp, r1, ip, lsr #9
   1d174:	andeq	sp, r1, r4, lsr #8
   1d178:	andeq	sp, r1, ip, lsr #9
   1d17c:	andeq	sp, r1, ip, lsr #9
   1d180:	andeq	sp, r1, ip, lsr #9
   1d184:	andeq	sp, r1, ip, lsr #9
   1d188:	andeq	sp, r1, ip, lsr #9
   1d18c:	andeq	sp, r1, ip, lsr #9
   1d190:	andeq	sp, r1, ip, lsr #9
   1d194:	andeq	sp, r1, ip, lsr #9
   1d198:	andeq	sp, r1, r4, lsr r4
   1d19c:	andeq	sp, r1, ip, lsr #9
   1d1a0:	andeq	sp, r1, r4, asr #8
   1d1a4:	andeq	sp, r1, ip, lsr #9
   1d1a8:	andeq	sp, r1, ip, lsr #9
   1d1ac:	andeq	sp, r1, ip, lsr #9
   1d1b0:	andeq	sp, r1, ip, lsr #9
   1d1b4:	andeq	sp, r1, ip, lsr #9
   1d1b8:	andeq	sp, r1, ip, lsr #9
   1d1bc:	andeq	sp, r1, ip, lsr #9
   1d1c0:	andeq	sp, r1, ip, lsr #9
   1d1c4:	andeq	sp, r1, ip, lsr #9
   1d1c8:	andeq	sp, r1, ip, lsr #9
   1d1cc:	andeq	sp, r1, ip, lsr #9
   1d1d0:	andeq	sp, r1, ip, lsr #9
   1d1d4:	andeq	sp, r1, ip, lsr #9
   1d1d8:	andeq	sp, r1, ip, lsr #9
   1d1dc:	andeq	sp, r1, ip, lsr #9
   1d1e0:	andeq	sp, r1, ip, lsr #9
   1d1e4:	andeq	sp, r1, r4, asr r4
   1d1e8:	andeq	sp, r1, ip, lsr #9
   1d1ec:	andeq	sp, r1, ip, lsr #9
   1d1f0:	andeq	sp, r1, ip, lsr #9
   1d1f4:	andeq	sp, r1, r4, ror #8
   1d1f8:	andeq	sp, r1, ip, lsr #9
   1d1fc:	andeq	sp, r1, ip, lsr #9
   1d200:	andeq	sp, r1, ip, lsr #9
   1d204:	andeq	sp, r1, r4, ror r4
   1d208:	andeq	sp, r1, r8, lsl #9
   1d20c:	muleq	r1, r4, r4
   1d210:	tst	r8, #16384	; 0x4000
   1d214:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d218:	sub	r1, r1, #49	; 0x31
   1d21c:	mov	r2, #4
   1d220:	b	1d30c <__assert_fail@plt+0xbc0c>
   1d224:	movw	r1, #65280	; 0xff00
   1d228:	movt	r1, #65439	; 0xff9f
   1d22c:	and	r0, r0, r1
   1d230:	orr	r0, r0, #1
   1d234:	orr	r0, r0, #2097152	; 0x200000
   1d238:	str	r0, [r5]
   1d23c:	mov	r4, #1
   1d240:	mov	r0, r4
   1d244:	sub	sp, fp, #24
   1d248:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d24c:	tst	r8, #8
   1d250:	bne	1d29c <__assert_fail@plt+0xbb9c>
   1d254:	ldr	r1, [r7, #40]	; 0x28
   1d258:	ldr	r2, [r7, #48]	; 0x30
   1d25c:	add	r1, r1, #1
   1d260:	cmp	r1, r2
   1d264:	beq	1d29c <__assert_fail@plt+0xbb9c>
   1d268:	str	r1, [r7, #40]	; 0x28
   1d26c:	mov	r0, sp
   1d270:	mov	r1, r7
   1d274:	mov	r2, r8
   1d278:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1d27c:	ldr	r0, [r7, #40]	; 0x28
   1d280:	sub	r0, r0, #1
   1d284:	str	r0, [r7, #40]	; 0x28
   1d288:	ldrb	r0, [sp, #4]
   1d28c:	sub	r0, r0, #9
   1d290:	cmp	r0, #1
   1d294:	bhi	1d4ac <__assert_fail@plt+0xbdac>
   1d298:	ldr	r0, [r5]
   1d29c:	mov	r1, #32
   1d2a0:	b	1d308 <__assert_fail@plt+0xbc08>
   1d2a4:	tst	r8, #8192	; 0x2000
   1d2a8:	bne	1d39c <__assert_fail@plt+0xbc9c>
   1d2ac:	b	1d4ac <__assert_fail@plt+0xbdac>
   1d2b0:	tst	r8, #8192	; 0x2000
   1d2b4:	bne	1d3ac <__assert_fail@plt+0xbcac>
   1d2b8:	b	1d4ac <__assert_fail@plt+0xbdac>
   1d2bc:	mov	r1, #11
   1d2c0:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d2c4:	movw	r1, #1026	; 0x402
   1d2c8:	tst	r8, r1
   1d2cc:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d2d0:	b	1d3c4 <__assert_fail@plt+0xbcc4>
   1d2d4:	mov	r1, #5
   1d2d8:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d2dc:	movw	r1, #1026	; 0x402
   1d2e0:	tst	r8, r1
   1d2e4:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d2e8:	b	1d3fc <__assert_fail@plt+0xbcfc>
   1d2ec:	mov	r1, #20
   1d2f0:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d2f4:	movw	r1, #8
   1d2f8:	movt	r1, #128	; 0x80
   1d2fc:	tst	r8, r1
   1d300:	beq	1d358 <__assert_fail@plt+0xbc58>
   1d304:	mov	r1, #16
   1d308:	mov	r2, #12
   1d30c:	bfi	r0, r2, #0, #8
   1d310:	str	r1, [r9]
   1d314:	str	r0, [r9, #4]
   1d318:	mov	r0, r4
   1d31c:	sub	sp, fp, #24
   1d320:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d324:	and	r1, r8, #4608	; 0x1200
   1d328:	cmp	r1, #4608	; 0x1200
   1d32c:	beq	1d480 <__assert_fail@plt+0xbd80>
   1d330:	b	1d4ac <__assert_fail@plt+0xbdac>
   1d334:	and	r1, r8, #33792	; 0x8400
   1d338:	cmp	r1, #32768	; 0x8000
   1d33c:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d340:	mov	r1, #10
   1d344:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d348:	and	r1, r8, #4608	; 0x1200
   1d34c:	cmp	r1, #4608	; 0x1200
   1d350:	beq	1d4a0 <__assert_fail@plt+0xbda0>
   1d354:	b	1d4ac <__assert_fail@plt+0xbdac>
   1d358:	ldr	r1, [r7, #40]	; 0x28
   1d35c:	cmp	r1, #0
   1d360:	beq	1d304 <__assert_fail@plt+0xbc04>
   1d364:	tst	r8, #2048	; 0x800
   1d368:	beq	1d4ac <__assert_fail@plt+0xbdac>
   1d36c:	ldr	r2, [r7, #4]
   1d370:	add	r1, r1, r2
   1d374:	ldrb	r1, [r1, #-1]
   1d378:	cmp	r1, #10
   1d37c:	beq	1d304 <__assert_fail@plt+0xbc04>
   1d380:	b	1d4ac <__assert_fail@plt+0xbdac>
   1d384:	tst	r8, #524288	; 0x80000
   1d388:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d38c:	mov	r1, #128	; 0x80
   1d390:	b	1d308 <__assert_fail@plt+0xbc08>
   1d394:	tst	r8, #8192	; 0x2000
   1d398:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d39c:	mov	r1, #8
   1d3a0:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d3a4:	tst	r8, #8192	; 0x2000
   1d3a8:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d3ac:	mov	r1, #9
   1d3b0:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d3b4:	movw	r1, #1026	; 0x402
   1d3b8:	and	r1, r8, r1
   1d3bc:	cmp	r1, #2
   1d3c0:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d3c4:	mov	r1, #18
   1d3c8:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d3cc:	tst	r8, #524288	; 0x80000
   1d3d0:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d3d4:	mov	r1, #6
   1d3d8:	b	1d308 <__assert_fail@plt+0xbc08>
   1d3dc:	tst	r8, #524288	; 0x80000
   1d3e0:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d3e4:	mov	r1, #9
   1d3e8:	b	1d308 <__assert_fail@plt+0xbc08>
   1d3ec:	movw	r1, #1026	; 0x402
   1d3f0:	and	r1, r8, r1
   1d3f4:	cmp	r1, #2
   1d3f8:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d3fc:	mov	r1, #19
   1d400:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d404:	tst	r8, #524288	; 0x80000
   1d408:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d40c:	mov	r1, #512	; 0x200
   1d410:	b	1d308 <__assert_fail@plt+0xbc08>
   1d414:	tst	r8, #524288	; 0x80000
   1d418:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d41c:	mov	r1, #35	; 0x23
   1d420:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d424:	tst	r8, #524288	; 0x80000
   1d428:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d42c:	mov	r1, #33	; 0x21
   1d430:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d434:	tst	r8, #524288	; 0x80000
   1d438:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d43c:	mov	r1, #64	; 0x40
   1d440:	b	1d308 <__assert_fail@plt+0xbc08>
   1d444:	tst	r8, #524288	; 0x80000
   1d448:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d44c:	mov	r1, #256	; 0x100
   1d450:	b	1d308 <__assert_fail@plt+0xbc08>
   1d454:	tst	r8, #524288	; 0x80000
   1d458:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d45c:	mov	r1, #34	; 0x22
   1d460:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d464:	tst	r8, #524288	; 0x80000
   1d468:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d46c:	mov	r1, #32
   1d470:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d474:	and	r1, r8, #4608	; 0x1200
   1d478:	cmp	r1, #512	; 0x200
   1d47c:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d480:	mov	r1, #23
   1d484:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1d488:	tst	r8, #33792	; 0x8400
   1d48c:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d490:	b	1d340 <__assert_fail@plt+0xbc40>
   1d494:	and	r1, r8, #4608	; 0x1200
   1d498:	cmp	r1, #512	; 0x200
   1d49c:	bne	1d4ac <__assert_fail@plt+0xbdac>
   1d4a0:	mov	r1, #24
   1d4a4:	bfi	r0, r1, #0, #8
   1d4a8:	str	r0, [r5]
   1d4ac:	mov	r0, r4
   1d4b0:	sub	sp, fp, #24
   1d4b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d4b8:	cmp	r3, #2
   1d4bc:	blt	1d4ec <__assert_fail@plt+0xbdec>
   1d4c0:	ldr	r3, [r7, #8]
   1d4c4:	ldr	r4, [r3, r2, lsl #2]
   1d4c8:	cmn	r4, #1
   1d4cc:	beq	1cd78 <__assert_fail@plt+0xb678>
   1d4d0:	ldr	r4, [r7, #28]
   1d4d4:	add	r6, r6, #2
   1d4d8:	cmp	r4, r6
   1d4dc:	beq	1d4ec <__assert_fail@plt+0xbdec>
   1d4e0:	ldr	r3, [r3, r6, lsl #2]
   1d4e4:	cmn	r3, #1
   1d4e8:	beq	1cd78 <__assert_fail@plt+0xb678>
   1d4ec:	ldrb	r3, [r7, #76]	; 0x4c
   1d4f0:	mov	r6, r2
   1d4f4:	cmp	r3, #0
   1d4f8:	beq	1d504 <__assert_fail@plt+0xbe04>
   1d4fc:	ldr	r6, [r7, #12]
   1d500:	ldr	r6, [r6, r2, lsl #2]
   1d504:	ldr	r4, [r7, #24]
   1d508:	ldr	ip, [r7]
   1d50c:	cmp	r3, #0
   1d510:	add	r6, r4, r6
   1d514:	add	r6, ip, r6
   1d518:	ldrsb	r6, [r6]
   1d51c:	beq	1cd80 <__assert_fail@plt+0xb680>
   1d520:	cmn	r6, #1
   1d524:	ble	1cd78 <__assert_fail@plt+0xb678>
   1d528:	b	1cd80 <__assert_fail@plt+0xb680>
   1d52c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d530:	add	fp, sp, #28
   1d534:	sub	sp, sp, #12
   1d538:	mov	r4, r1
   1d53c:	ldr	r8, [r1]
   1d540:	ldr	r1, [fp, #8]
   1d544:	ldr	r5, [fp, #12]
   1d548:	mov	r7, r2
   1d54c:	str	r0, [sp, #8]
   1d550:	mov	sl, r3
   1d554:	mov	r9, r1
   1d558:	str	r1, [sp]
   1d55c:	mov	r1, r4
   1d560:	str	r5, [sp, #4]
   1d564:	bl	1d990 <__assert_fail@plt+0xc290>
   1d568:	mov	r3, r5
   1d56c:	mov	r5, r0
   1d570:	mov	r0, #0
   1d574:	cmp	r5, #0
   1d578:	bne	1d588 <__assert_fail@plt+0xbe88>
   1d57c:	ldr	r1, [r3]
   1d580:	cmp	r1, #0
   1d584:	bne	1d78c <__assert_fail@plt+0xc08c>
   1d588:	cmp	r9, #0
   1d58c:	beq	1d680 <__assert_fail@plt+0xbf80>
   1d590:	ldrb	r0, [r7, #4]
   1d594:	orr	r1, r0, #8
   1d598:	cmp	r1, #10
   1d59c:	cmpne	r0, #9
   1d5a0:	beq	1d788 <__assert_fail@plt+0xc088>
   1d5a4:	ldr	r0, [sp, #8]
   1d5a8:	str	r3, [sp, #4]
   1d5ac:	mov	r1, r4
   1d5b0:	mov	r2, r7
   1d5b4:	mov	r3, sl
   1d5b8:	str	r9, [sp]
   1d5bc:	bl	1d990 <__assert_fail@plt+0xc290>
   1d5c0:	ldr	r3, [fp, #12]
   1d5c4:	cmp	r5, #0
   1d5c8:	mov	r2, r5
   1d5cc:	mov	r6, r0
   1d5d0:	movwne	r2, #1
   1d5d4:	cmp	r0, #0
   1d5d8:	bne	1d5e8 <__assert_fail@plt+0xbee8>
   1d5dc:	ldr	r1, [r3]
   1d5e0:	cmp	r1, #0
   1d5e4:	bne	1d794 <__assert_fail@plt+0xc094>
   1d5e8:	cmp	r5, #0
   1d5ec:	cmpne	r6, #0
   1d5f0:	bne	1d600 <__assert_fail@plt+0xbf00>
   1d5f4:	cmp	r5, #0
   1d5f8:	moveq	r5, r6
   1d5fc:	b	1d590 <__assert_fail@plt+0xbe90>
   1d600:	ldr	r1, [r8, #64]	; 0x40
   1d604:	cmp	r1, #31
   1d608:	beq	1d654 <__assert_fail@plt+0xbf54>
   1d60c:	ldr	r0, [r8, #56]	; 0x38
   1d610:	add	r0, r0, r1, lsl #5
   1d614:	add	r2, r1, #1
   1d618:	mov	r1, #0
   1d61c:	str	r2, [r8, #64]	; 0x40
   1d620:	str	r1, [r0, #4]!
   1d624:	stmib	r0, {r5, r6}
   1d628:	str	r1, [r0, #12]
   1d62c:	str	r1, [r0, #16]
   1d630:	str	r1, [r0, #20]
   1d634:	mov	r1, #16
   1d638:	str	r1, [r0, #24]
   1d63c:	mvn	r1, #0
   1d640:	str	r1, [r0, #28]
   1d644:	str	r0, [r5]
   1d648:	str	r0, [r6]
   1d64c:	mov	r5, r0
   1d650:	b	1d590 <__assert_fail@plt+0xbe90>
   1d654:	mov	r0, #996	; 0x3e4
   1d658:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1d65c:	cmp	r0, #0
   1d660:	beq	1d840 <__assert_fail@plt+0xc140>
   1d664:	ldr	r1, [r8, #56]	; 0x38
   1d668:	ldr	r3, [fp, #12]
   1d66c:	str	r1, [r0]
   1d670:	mov	r1, #0
   1d674:	str	r1, [r8, #64]	; 0x40
   1d678:	str	r0, [r8, #56]	; 0x38
   1d67c:	b	1d610 <__assert_fail@plt+0xbf10>
   1d680:	mov	r9, #0
   1d684:	ldrb	r0, [r7, #4]
   1d688:	orr	r0, r0, #8
   1d68c:	cmp	r0, #10
   1d690:	bne	1d6b0 <__assert_fail@plt+0xbfb0>
   1d694:	b	1d788 <__assert_fail@plt+0xc088>
   1d698:	cmp	r5, #0
   1d69c:	moveq	r5, r6
   1d6a0:	ldrb	r0, [r7, #4]
   1d6a4:	orr	r0, r0, #8
   1d6a8:	cmp	r0, #10
   1d6ac:	beq	1d788 <__assert_fail@plt+0xc088>
   1d6b0:	ldr	r0, [sp, #8]
   1d6b4:	str	r3, [sp, #4]
   1d6b8:	mov	r1, r4
   1d6bc:	mov	r2, r7
   1d6c0:	mov	r3, sl
   1d6c4:	str	r9, [sp]
   1d6c8:	bl	1d990 <__assert_fail@plt+0xc290>
   1d6cc:	ldr	r3, [fp, #12]
   1d6d0:	cmp	r5, #0
   1d6d4:	mov	r2, r5
   1d6d8:	mov	r6, r0
   1d6dc:	movwne	r2, #1
   1d6e0:	cmp	r0, #0
   1d6e4:	bne	1d6f4 <__assert_fail@plt+0xbff4>
   1d6e8:	ldr	r1, [r3]
   1d6ec:	cmp	r1, #0
   1d6f0:	bne	1d794 <__assert_fail@plt+0xc094>
   1d6f4:	cmp	r5, #0
   1d6f8:	cmpne	r6, #0
   1d6fc:	beq	1d698 <__assert_fail@plt+0xbf98>
   1d700:	ldr	r1, [r8, #64]	; 0x40
   1d704:	cmp	r1, #31
   1d708:	beq	1d75c <__assert_fail@plt+0xc05c>
   1d70c:	ldr	r0, [r8, #56]	; 0x38
   1d710:	add	r0, r0, r1, lsl #5
   1d714:	add	r2, r1, #1
   1d718:	mov	r1, #16
   1d71c:	str	r2, [r8, #64]	; 0x40
   1d720:	str	r9, [r0, #4]!
   1d724:	stmib	r0, {r5, r6, r9}
   1d728:	str	r9, [r0, #16]
   1d72c:	str	r9, [r0, #20]
   1d730:	str	r1, [r0, #24]
   1d734:	mvn	r1, #0
   1d738:	str	r1, [r0, #28]
   1d73c:	str	r0, [r5]
   1d740:	str	r0, [r6]
   1d744:	mov	r5, r0
   1d748:	ldrb	r0, [r7, #4]
   1d74c:	orr	r0, r0, #8
   1d750:	cmp	r0, #10
   1d754:	bne	1d6b0 <__assert_fail@plt+0xbfb0>
   1d758:	b	1d788 <__assert_fail@plt+0xc088>
   1d75c:	mov	r0, #996	; 0x3e4
   1d760:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1d764:	cmp	r0, #0
   1d768:	beq	1d840 <__assert_fail@plt+0xc140>
   1d76c:	ldr	r1, [r8, #56]	; 0x38
   1d770:	ldr	r3, [fp, #12]
   1d774:	str	r1, [r0]
   1d778:	mov	r1, #0
   1d77c:	str	r1, [r8, #64]	; 0x40
   1d780:	str	r0, [r8, #56]	; 0x38
   1d784:	b	1d710 <__assert_fail@plt+0xc010>
   1d788:	mov	r0, r5
   1d78c:	sub	sp, fp, #28
   1d790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d794:	mov	r0, #0
   1d798:	cmp	r2, #0
   1d79c:	beq	1d78c <__assert_fail@plt+0xc08c>
   1d7a0:	movw	r6, #255	; 0xff
   1d7a4:	movt	r6, #4
   1d7a8:	mov	r7, r5
   1d7ac:	ldr	r5, [r5, #4]
   1d7b0:	cmp	r5, #0
   1d7b4:	bne	1d7a8 <__assert_fail@plt+0xc0a8>
   1d7b8:	ldr	r5, [r7, #8]
   1d7bc:	cmp	r5, #0
   1d7c0:	bne	1d7a8 <__assert_fail@plt+0xc0a8>
   1d7c4:	ldr	r1, [r7, #24]
   1d7c8:	and	r1, r1, r6
   1d7cc:	cmp	r1, #3
   1d7d0:	beq	1d804 <__assert_fail@plt+0xc104>
   1d7d4:	cmp	r1, #6
   1d7d8:	bne	1d814 <__assert_fail@plt+0xc114>
   1d7dc:	ldr	r4, [r7, #20]
   1d7e0:	ldr	r0, [r4]
   1d7e4:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d7e8:	ldr	r0, [r4, #4]
   1d7ec:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d7f0:	ldr	r0, [r4, #8]
   1d7f4:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d7f8:	ldr	r0, [r4, #12]
   1d7fc:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d800:	b	1d808 <__assert_fail@plt+0xc108>
   1d804:	ldr	r4, [r7, #20]
   1d808:	mov	r0, r4
   1d80c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d810:	mov	r0, #0
   1d814:	ldr	r1, [r7]
   1d818:	cmp	r1, #0
   1d81c:	beq	1d78c <__assert_fail@plt+0xc08c>
   1d820:	ldr	r5, [r1, #8]
   1d824:	cmp	r5, r7
   1d828:	mov	r7, r1
   1d82c:	beq	1d7c4 <__assert_fail@plt+0xc0c4>
   1d830:	cmp	r5, #0
   1d834:	mov	r7, r1
   1d838:	beq	1d7c4 <__assert_fail@plt+0xc0c4>
   1d83c:	b	1d7a8 <__assert_fail@plt+0xc0a8>
   1d840:	ldr	r1, [fp, #12]
   1d844:	movw	r8, #255	; 0xff
   1d848:	movt	r8, #4
   1d84c:	mov	r7, r6
   1d850:	ldr	r6, [r6, #4]
   1d854:	cmp	r6, #0
   1d858:	bne	1d84c <__assert_fail@plt+0xc14c>
   1d85c:	ldr	r6, [r7, #8]
   1d860:	cmp	r6, #0
   1d864:	bne	1d84c <__assert_fail@plt+0xc14c>
   1d868:	ldr	r0, [r7, #24]
   1d86c:	and	r0, r0, r8
   1d870:	cmp	r0, #3
   1d874:	beq	1d8a8 <__assert_fail@plt+0xc1a8>
   1d878:	cmp	r0, #6
   1d87c:	bne	1d8b8 <__assert_fail@plt+0xc1b8>
   1d880:	ldr	r4, [r7, #20]
   1d884:	ldr	r0, [r4]
   1d888:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d88c:	ldr	r0, [r4, #4]
   1d890:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d894:	ldr	r0, [r4, #8]
   1d898:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d89c:	ldr	r0, [r4, #12]
   1d8a0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d8a4:	b	1d8ac <__assert_fail@plt+0xc1ac>
   1d8a8:	ldr	r4, [r7, #20]
   1d8ac:	mov	r0, r4
   1d8b0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d8b4:	ldr	r1, [fp, #12]
   1d8b8:	ldr	r0, [r7]
   1d8bc:	cmp	r0, #0
   1d8c0:	beq	1d8e4 <__assert_fail@plt+0xc1e4>
   1d8c4:	ldr	r6, [r0, #8]
   1d8c8:	cmp	r6, r7
   1d8cc:	mov	r7, r0
   1d8d0:	beq	1d868 <__assert_fail@plt+0xc168>
   1d8d4:	cmp	r6, #0
   1d8d8:	mov	r7, r0
   1d8dc:	beq	1d868 <__assert_fail@plt+0xc168>
   1d8e0:	b	1d84c <__assert_fail@plt+0xc14c>
   1d8e4:	mov	r6, r5
   1d8e8:	ldr	r5, [r5, #4]
   1d8ec:	cmp	r5, #0
   1d8f0:	bne	1d8e4 <__assert_fail@plt+0xc1e4>
   1d8f4:	ldr	r5, [r6, #8]
   1d8f8:	cmp	r5, #0
   1d8fc:	bne	1d8e4 <__assert_fail@plt+0xc1e4>
   1d900:	ldr	r0, [r6, #24]
   1d904:	and	r0, r0, r8
   1d908:	cmp	r0, #3
   1d90c:	beq	1d940 <__assert_fail@plt+0xc240>
   1d910:	cmp	r0, #6
   1d914:	bne	1d950 <__assert_fail@plt+0xc250>
   1d918:	ldr	r4, [r6, #20]
   1d91c:	ldr	r0, [r4]
   1d920:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d924:	ldr	r0, [r4, #4]
   1d928:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d92c:	ldr	r0, [r4, #8]
   1d930:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d934:	ldr	r0, [r4, #12]
   1d938:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d93c:	b	1d944 <__assert_fail@plt+0xc244>
   1d940:	ldr	r4, [r6, #20]
   1d944:	mov	r0, r4
   1d948:	bl	13ddc <__assert_fail@plt+0x26dc>
   1d94c:	ldr	r1, [fp, #12]
   1d950:	ldr	r0, [r6]
   1d954:	cmp	r0, #0
   1d958:	beq	1d97c <__assert_fail@plt+0xc27c>
   1d95c:	ldr	r5, [r0, #8]
   1d960:	cmp	r5, r6
   1d964:	mov	r6, r0
   1d968:	beq	1d900 <__assert_fail@plt+0xc200>
   1d96c:	cmp	r5, #0
   1d970:	mov	r6, r0
   1d974:	beq	1d900 <__assert_fail@plt+0xc200>
   1d978:	b	1d8e4 <__assert_fail@plt+0xc1e4>
   1d97c:	mov	r0, #12
   1d980:	str	r0, [r1]
   1d984:	mov	r0, #0
   1d988:	sub	sp, fp, #28
   1d98c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d994:	add	fp, sp, #28
   1d998:	sub	sp, sp, #156	; 0x9c
   1d99c:	mov	r5, r0
   1d9a0:	mov	lr, r2
   1d9a4:	ldr	r0, [r2, #4]
   1d9a8:	ldr	r2, [fp, #12]
   1d9ac:	mov	r7, r1
   1d9b0:	mvn	r1, #0
   1d9b4:	mov	r9, #0
   1d9b8:	mov	ip, r3
   1d9bc:	ldr	sl, [r7]
   1d9c0:	str	r2, [sp, #20]
   1d9c4:	uxtab	r1, r1, r0
   1d9c8:	ldr	r6, [fp, #8]
   1d9cc:	add	r2, pc, #12
   1d9d0:	str	r5, [sp, #28]
   1d9d4:	str	r3, [sp, #48]	; 0x30
   1d9d8:	str	lr, [sp, #44]	; 0x2c
   1d9dc:	ldr	pc, [r2, r1, lsl #2]
   1d9e0:	strdeq	sp, [r1], -r8
   1d9e4:	andeq	pc, r1, r8, asr #20
   1d9e8:	ldrdeq	r0, [r2], -ip
   1d9ec:	andeq	sp, r1, r0, asr #29
   1d9f0:	andeq	sp, r1, r0, asr #30
   1d9f4:	ldrdeq	r0, [r2], -ip
   1d9f8:	ldrdeq	r0, [r2], -ip
   1d9fc:	andeq	sp, r1, r8, lsr #31
   1da00:	muleq	r1, r0, sl
   1da04:	andeq	pc, r1, r8, asr #20
   1da08:	andeq	sp, r1, r0, lsl #21
   1da0c:	andeq	sp, r1, r4, lsl #23
   1da10:	ldrdeq	r0, [r2], -ip
   1da14:	ldrdeq	r0, [r2], -ip
   1da18:	ldrdeq	r0, [r2], -ip
   1da1c:	ldrdeq	r0, [r2], -ip
   1da20:	ldrdeq	r0, [r2], -ip
   1da24:	andeq	sp, r1, r0, lsl #21
   1da28:	andeq	sp, r1, r0, lsl #21
   1da2c:	andeq	sp, r1, r4, lsl #25
   1da30:	ldrdeq	r0, [r2], -ip
   1da34:	ldrdeq	r0, [r2], -ip
   1da38:	andeq	lr, r1, ip, lsr #32
   1da3c:	andeq	sp, r1, r0, lsr #21
   1da40:	ldrdeq	r0, [r2], -ip
   1da44:	ldrdeq	r0, [r2], -ip
   1da48:	ldrdeq	r0, [r2], -ip
   1da4c:	ldrdeq	r0, [r2], -ip
   1da50:	ldrdeq	r0, [r2], -ip
   1da54:	ldrdeq	r0, [r2], -ip
   1da58:	ldrdeq	r0, [r2], -ip
   1da5c:	strdeq	sp, [r1], -ip
   1da60:	strdeq	sp, [r1], -ip
   1da64:	andeq	sp, r1, ip, lsl fp
   1da68:	andeq	sp, r1, ip, lsl fp
   1da6c:	andeq	lr, r1, ip, lsr r0
   1da70:	andeq	r0, r0, r0
   1da74:	mvnseq	r0, #0
   1da78:			; <UNDEFINED> instruction: 0x87fffffe
   1da7c:			; <UNDEFINED> instruction: 0x07fffffe
   1da80:	tst	ip, #32
   1da84:	bne	1e034 <__assert_fail@plt+0xc934>
   1da88:	tst	ip, #16
   1da8c:	bne	1e04c <__assert_fail@plt+0xc94c>
   1da90:	tst	ip, #131072	; 0x20000
   1da94:	uxtbeq	r1, r0
   1da98:	cmpeq	r1, #9
   1da9c:	beq	1e08c <__assert_fail@plt+0xc98c>
   1daa0:	mov	r1, #1
   1daa4:	bfi	r0, r1, #0, #8
   1daa8:	str	r0, [lr, #4]
   1daac:	ldr	r1, [sl, #64]	; 0x40
   1dab0:	cmp	r1, #31
   1dab4:	beq	1fc04 <__assert_fail@plt+0xe504>
   1dab8:	ldr	r0, [sl, #56]	; 0x38
   1dabc:	add	r7, r0, r1, lsl #5
   1dac0:	add	r2, r1, #1
   1dac4:	mov	r0, #0
   1dac8:	mvn	r3, #0
   1dacc:	str	r2, [sl, #64]	; 0x40
   1dad0:	str	r0, [r7, #4]!
   1dad4:	str	r0, [r7, #8]
   1dad8:	str	r0, [r7, #4]
   1dadc:	ldm	lr, {r1, r2}
   1dae0:	str	r3, [r7, #28]
   1dae4:	str	r0, [r7, #16]
   1dae8:	str	r0, [r7, #12]
   1daec:	bic	r0, r2, #786432	; 0xc0000
   1daf0:	str	r1, [r7, #20]
   1daf4:	str	r0, [r7, #24]
   1daf8:	b	1eae8 <__assert_fail@plt+0xd3e8>
   1dafc:	mvn	r2, #32
   1db00:	ldr	r1, [r5, #64]	; 0x40
   1db04:	movw	r3, #51317	; 0xc875
   1db08:	uxtab	r0, r2, r0
   1db0c:	movw	r2, #52774	; 0xce26
   1db10:	movt	r3, #2
   1db14:	movt	r2, #2
   1db18:	b	1db38 <__assert_fail@plt+0xc438>
   1db1c:	mvn	r2, #34	; 0x22
   1db20:	ldr	r1, [r5, #64]	; 0x40
   1db24:	movw	r3, #51467	; 0xc90b
   1db28:	uxtab	r0, r2, r0
   1db2c:	movw	r2, #52780	; 0xce2c
   1db30:	movt	r3, #2
   1db34:	movt	r2, #2
   1db38:	clz	r0, r0
   1db3c:	lsr	r0, r0, #5
   1db40:	str	r0, [sp]
   1db44:	ldr	r4, [sp, #20]
   1db48:	str	r4, [sp, #4]
   1db4c:	mov	r0, sl
   1db50:	bl	200dc <__assert_fail@plt+0xe9dc>
   1db54:	mov	r7, r0
   1db58:	cmp	r0, #0
   1db5c:	bne	1db78 <__assert_fail@plt+0xc478>
   1db60:	ldr	r0, [r4]
   1db64:	cmp	r0, #0
   1db68:	ldr	ip, [sp, #48]	; 0x30
   1db6c:	ldr	lr, [sp, #44]	; 0x2c
   1db70:	beq	1eae8 <__assert_fail@plt+0xd3e8>
   1db74:	b	1fa48 <__assert_fail@plt+0xe348>
   1db78:	ldr	ip, [sp, #48]	; 0x30
   1db7c:	ldr	lr, [sp, #44]	; 0x2c
   1db80:	b	1eae8 <__assert_fail@plt+0xd3e8>
   1db84:	ldr	r0, [lr]
   1db88:	movw	r1, #783	; 0x30f
   1db8c:	tst	r0, r1
   1db90:	beq	1dbd8 <__assert_fail@plt+0xc4d8>
   1db94:	ldrb	r0, [sl, #88]	; 0x58
   1db98:	tst	r0, #16
   1db9c:	bne	1dbd4 <__assert_fail@plt+0xc4d4>
   1dba0:	orr	r1, r0, #16
   1dba4:	tst	r0, #8
   1dba8:	strb	r1, [sl, #88]	; 0x58
   1dbac:	bne	1fea4 <__assert_fail@plt+0xe7a4>
   1dbb0:	sub	r1, pc, #328	; 0x148
   1dbb4:	tst	r0, #4
   1dbb8:	vld1.64	{d16-d17}, [r1 :128]
   1dbbc:	add	r1, sl, #96	; 0x60
   1dbc0:	vst1.32	{d16-d17}, [r1]
   1dbc4:	beq	1feb0 <__assert_fail@plt+0xe7b0>
   1dbc8:	vmov.i32	q8, #0	; 0x00000000
   1dbcc:	add	r0, sl, #112	; 0x70
   1dbd0:	vst1.32	{d16-d17}, [r0]
   1dbd4:	ldr	r0, [lr]
   1dbd8:	cmp	r0, #512	; 0x200
   1dbdc:	beq	1e8d4 <__assert_fail@plt+0xd1d4>
   1dbe0:	cmp	r0, #256	; 0x100
   1dbe4:	bne	1e9ec <__assert_fail@plt+0xd2ec>
   1dbe8:	mov	r0, #6
   1dbec:	str	r0, [lr]
   1dbf0:	ldr	r1, [sl, #64]	; 0x40
   1dbf4:	cmp	r1, #31
   1dbf8:	beq	1fe04 <__assert_fail@plt+0xe704>
   1dbfc:	ldr	r0, [sl, #56]	; 0x38
   1dc00:	add	r4, r0, r1, lsl #5
   1dc04:	add	r2, r1, #1
   1dc08:	mov	r0, #0
   1dc0c:	mvn	r3, #0
   1dc10:	str	r2, [sl, #64]	; 0x40
   1dc14:	str	r0, [r4, #4]!
   1dc18:	str	r0, [r4, #8]
   1dc1c:	str	r0, [r4, #4]
   1dc20:	ldm	lr, {r1, r2}
   1dc24:	str	r3, [r4, #28]
   1dc28:	str	r0, [r4, #16]
   1dc2c:	str	r0, [r4, #12]
   1dc30:	bic	r0, r2, #786432	; 0xc0000
   1dc34:	str	r1, [r4, #20]
   1dc38:	str	r0, [r4, #24]
   1dc3c:	mov	r0, #9
   1dc40:	str	r0, [lr]
   1dc44:	ldr	r1, [sl, #64]	; 0x40
   1dc48:	cmp	r1, #31
   1dc4c:	bne	1e93c <__assert_fail@plt+0xd23c>
   1dc50:	mov	r0, #996	; 0x3e4
   1dc54:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1dc58:	cmp	r0, #0
   1dc5c:	beq	1ff40 <__assert_fail@plt+0xe840>
   1dc60:	ldr	r1, [sl, #56]	; 0x38
   1dc64:	ldr	ip, [sp, #48]	; 0x30
   1dc68:	ldr	lr, [sp, #44]	; 0x2c
   1dc6c:	mov	r9, #0
   1dc70:	str	r1, [r0]
   1dc74:	mov	r1, #0
   1dc78:	str	r1, [sl, #64]	; 0x40
   1dc7c:	str	r0, [sl, #56]	; 0x38
   1dc80:	b	1e940 <__assert_fail@plt+0xd240>
   1dc84:	mov	r9, #0
   1dc88:	mov	r0, #32
   1dc8c:	mov	r1, #1
   1dc90:	str	r9, [fp, #-32]	; 0xffffffe0
   1dc94:	bl	2b88c <__assert_fail@plt+0x1a18c>
   1dc98:	mov	r8, r0
   1dc9c:	mov	r0, #40	; 0x28
   1dca0:	mov	r1, #1
   1dca4:	bl	2b88c <__assert_fail@plt+0x1a18c>
   1dca8:	mov	r7, r0
   1dcac:	cmp	r8, #0
   1dcb0:	cmpne	r7, #0
   1dcb4:	beq	1fc64 <__assert_fail@plt+0xe564>
   1dcb8:	ldr	r6, [sp, #44]	; 0x2c
   1dcbc:	ldr	r4, [sp, #48]	; 0x30
   1dcc0:	mov	r1, r5
   1dcc4:	mov	r0, r6
   1dcc8:	mov	r2, r4
   1dccc:	bl	204d0 <__assert_fail@plt+0xedd0>
   1dcd0:	mov	r3, r0
   1dcd4:	ldr	r0, [r6, #4]
   1dcd8:	str	r7, [sp, #60]	; 0x3c
   1dcdc:	uxtb	r1, r0
   1dce0:	cmp	r1, #25
   1dce4:	beq	1e094 <__assert_fail@plt+0xc994>
   1dce8:	cmp	r1, #2
   1dcec:	beq	1fc50 <__assert_fail@plt+0xe550>
   1dcf0:	mov	r1, #0
   1dcf4:	b	1e0ec <__assert_fail@plt+0xc9ec>
   1dcf8:	ldr	r1, [sl, #64]	; 0x40
   1dcfc:	cmp	r1, #31
   1dd00:	beq	1fc78 <__assert_fail@plt+0xe578>
   1dd04:	ldr	r0, [sl, #56]	; 0x38
   1dd08:	add	r4, r0, r1, lsl #5
   1dd0c:	add	r2, r1, #1
   1dd10:	mov	r0, #0
   1dd14:	mvn	r3, #0
   1dd18:	str	r2, [sl, #64]	; 0x40
   1dd1c:	str	r0, [r4, #4]!
   1dd20:	str	r0, [r4, #8]
   1dd24:	str	r0, [r4, #4]
   1dd28:	ldm	lr, {r1, r2}
   1dd2c:	str	r3, [r4, #28]
   1dd30:	str	r0, [r4, #16]
   1dd34:	str	r0, [r4, #12]
   1dd38:	bic	r0, r2, #786432	; 0xc0000
   1dd3c:	str	r1, [r4, #20]
   1dd40:	str	r0, [r4, #24]
   1dd44:	ldr	r0, [sl, #92]	; 0x5c
   1dd48:	cmp	r0, #2
   1dd4c:	blt	1e044 <__assert_fail@plt+0xc944>
   1dd50:	ldr	r0, [r5, #40]	; 0x28
   1dd54:	ldr	r1, [r5, #56]	; 0x38
   1dd58:	cmp	r1, r0
   1dd5c:	ble	1e044 <__assert_fail@plt+0xc944>
   1dd60:	mov	r8, #0
   1dd64:	mvn	r9, #0
   1dd68:	ldr	r1, [r5, #28]
   1dd6c:	cmp	r0, r1
   1dd70:	beq	1e044 <__assert_fail@plt+0xc944>
   1dd74:	ldr	r1, [r5, #8]
   1dd78:	ldr	r0, [r1, r0, lsl #2]
   1dd7c:	cmn	r0, #1
   1dd80:	bne	1e044 <__assert_fail@plt+0xc944>
   1dd84:	mov	r0, lr
   1dd88:	mov	r1, r5
   1dd8c:	mov	r2, ip
   1dd90:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1dd94:	ldr	r1, [r5, #40]	; 0x28
   1dd98:	add	r0, r1, r0
   1dd9c:	str	r0, [r5, #40]	; 0x28
   1dda0:	ldr	r1, [sl, #64]	; 0x40
   1dda4:	cmp	r1, #31
   1dda8:	beq	1de50 <__assert_fail@plt+0xc750>
   1ddac:	ldr	r0, [sl, #56]	; 0x38
   1ddb0:	add	r6, r0, r1, lsl #5
   1ddb4:	ldr	lr, [sp, #44]	; 0x2c
   1ddb8:	add	r2, r1, #1
   1ddbc:	ldr	ip, [sp, #48]	; 0x30
   1ddc0:	str	r2, [sl, #64]	; 0x40
   1ddc4:	str	r8, [r6, #4]!
   1ddc8:	str	r8, [r6, #8]
   1ddcc:	str	r8, [r6, #4]
   1ddd0:	ldm	lr, {r0, r1}
   1ddd4:	str	r9, [r6, #28]
   1ddd8:	str	r8, [r6, #16]
   1dddc:	str	r8, [r6, #12]
   1dde0:	str	r0, [r6, #20]
   1dde4:	bic	r0, r1, #786432	; 0xc0000
   1dde8:	str	r0, [r6, #24]
   1ddec:	ldr	r1, [sl, #64]	; 0x40
   1ddf0:	cmp	r1, #31
   1ddf4:	beq	1de90 <__assert_fail@plt+0xc790>
   1ddf8:	ldr	r0, [sl, #56]	; 0x38
   1ddfc:	add	r7, r0, r1, lsl #5
   1de00:	add	r2, r1, #1
   1de04:	mov	r0, #16
   1de08:	cmp	r6, #0
   1de0c:	str	r2, [sl, #64]	; 0x40
   1de10:	str	r8, [r7, #4]!
   1de14:	stmib	r7, {r4, r6, r8}
   1de18:	str	r8, [r7, #16]
   1de1c:	str	r8, [r7, #20]
   1de20:	str	r0, [r7, #24]
   1de24:	str	r9, [r7, #28]
   1de28:	str	r7, [r4]
   1de2c:	beq	1fe9c <__assert_fail@plt+0xe79c>
   1de30:	ldr	r5, [sp, #28]
   1de34:	str	r7, [r6]
   1de38:	mov	r4, r7
   1de3c:	ldr	r0, [r5, #40]	; 0x28
   1de40:	ldr	r1, [r5, #56]	; 0x38
   1de44:	cmp	r1, r0
   1de48:	bgt	1dd68 <__assert_fail@plt+0xc668>
   1de4c:	b	1eae8 <__assert_fail@plt+0xd3e8>
   1de50:	mov	r0, #996	; 0x3e4
   1de54:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1de58:	cmp	r0, #0
   1de5c:	beq	1de78 <__assert_fail@plt+0xc778>
   1de60:	ldr	r1, [sl, #56]	; 0x38
   1de64:	str	r1, [r0]
   1de68:	mov	r1, #0
   1de6c:	str	r1, [sl, #64]	; 0x40
   1de70:	str	r0, [sl, #56]	; 0x38
   1de74:	b	1ddb0 <__assert_fail@plt+0xc6b0>
   1de78:	ldr	ip, [sp, #48]	; 0x30
   1de7c:	ldr	lr, [sp, #44]	; 0x2c
   1de80:	mov	r6, #0
   1de84:	ldr	r1, [sl, #64]	; 0x40
   1de88:	cmp	r1, #31
   1de8c:	bne	1ddf8 <__assert_fail@plt+0xc6f8>
   1de90:	mov	r0, #996	; 0x3e4
   1de94:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1de98:	ldr	lr, [sp, #44]	; 0x2c
   1de9c:	ldr	ip, [sp, #48]	; 0x30
   1dea0:	cmp	r0, #0
   1dea4:	beq	1fe9c <__assert_fail@plt+0xe79c>
   1dea8:	ldr	r1, [sl, #56]	; 0x38
   1deac:	str	r1, [r0]
   1deb0:	mov	r1, #0
   1deb4:	str	r1, [sl, #64]	; 0x40
   1deb8:	str	r0, [sl, #56]	; 0x38
   1debc:	b	1ddfc <__assert_fail@plt+0xc6fc>
   1dec0:	ldr	r0, [lr]
   1dec4:	ldr	r2, [sl, #84]	; 0x54
   1dec8:	mov	r1, #1
   1decc:	tst	r2, r1, lsl r0
   1ded0:	beq	1fcac <__assert_fail@plt+0xe5ac>
   1ded4:	lsl	r0, r1, r0
   1ded8:	ldr	r1, [sl, #64]	; 0x40
   1dedc:	ldr	r2, [sl, #80]	; 0x50
   1dee0:	orr	r0, r2, r0
   1dee4:	cmp	r1, #31
   1dee8:	str	r0, [sl, #80]	; 0x50
   1deec:	beq	1fce8 <__assert_fail@plt+0xe5e8>
   1def0:	ldr	r0, [sl, #56]	; 0x38
   1def4:	add	r7, r0, r1, lsl #5
   1def8:	add	r2, r1, #1
   1defc:	mov	r0, #0
   1df00:	mvn	r3, #0
   1df04:	str	r2, [sl, #64]	; 0x40
   1df08:	str	r0, [r7, #4]!
   1df0c:	str	r0, [r7, #8]
   1df10:	str	r0, [r7, #4]
   1df14:	ldm	lr, {r1, r2}
   1df18:	str	r3, [r7, #28]
   1df1c:	str	r0, [r7, #16]
   1df20:	str	r0, [r7, #12]
   1df24:	bic	r0, r2, #786432	; 0xc0000
   1df28:	str	r1, [r7, #20]
   1df2c:	str	r0, [r7, #24]
   1df30:	ldr	r0, [sl, #76]	; 0x4c
   1df34:	add	r0, r0, #1
   1df38:	str	r0, [sl, #76]	; 0x4c
   1df3c:	b	1df98 <__assert_fail@plt+0xc898>
   1df40:	ldr	r1, [sl, #64]	; 0x40
   1df44:	cmp	r1, #31
   1df48:	beq	1fcb4 <__assert_fail@plt+0xe5b4>
   1df4c:	ldr	r0, [sl, #56]	; 0x38
   1df50:	add	r7, r0, r1, lsl #5
   1df54:	add	r2, r1, #1
   1df58:	mov	r0, #0
   1df5c:	mvn	r3, #0
   1df60:	str	r2, [sl, #64]	; 0x40
   1df64:	str	r0, [r7, #4]!
   1df68:	str	r0, [r7, #8]
   1df6c:	str	r0, [r7, #4]
   1df70:	ldm	lr, {r1, r2}
   1df74:	str	r3, [r7, #28]
   1df78:	str	r0, [r7, #16]
   1df7c:	str	r0, [r7, #12]
   1df80:	bic	r0, r2, #786432	; 0xc0000
   1df84:	str	r1, [r7, #20]
   1df88:	str	r0, [r7, #24]
   1df8c:	ldr	r0, [sl, #92]	; 0x5c
   1df90:	cmp	r0, #2
   1df94:	blt	1eae8 <__assert_fail@plt+0xd3e8>
   1df98:	ldrb	r0, [sl, #88]	; 0x58
   1df9c:	orr	r0, r0, #2
   1dfa0:	strb	r0, [sl, #88]	; 0x58
   1dfa4:	b	1eae8 <__assert_fail@plt+0xd3e8>
   1dfa8:	ldr	r4, [r7, #24]
   1dfac:	orr	r2, ip, #8388608	; 0x800000
   1dfb0:	mov	r1, r5
   1dfb4:	add	r0, r4, #1
   1dfb8:	str	r0, [r7, #24]
   1dfbc:	mov	r0, lr
   1dfc0:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1dfc4:	ldr	r1, [r5, #40]	; 0x28
   1dfc8:	ldr	lr, [sp, #44]	; 0x2c
   1dfcc:	mov	r9, #0
   1dfd0:	add	r0, r1, r0
   1dfd4:	str	r0, [r5, #40]	; 0x28
   1dfd8:	ldrb	r0, [lr, #4]
   1dfdc:	cmp	r0, #9
   1dfe0:	beq	1ea78 <__assert_fail@plt+0xd378>
   1dfe4:	add	r0, r6, #1
   1dfe8:	mov	r1, r7
   1dfec:	mov	r2, lr
   1dff0:	mov	r7, lr
   1dff4:	str	r0, [sp]
   1dff8:	mov	r0, r5
   1dffc:	ldr	r6, [sp, #20]
   1e000:	str	r6, [sp, #4]
   1e004:	ldr	r3, [sp, #48]	; 0x30
   1e008:	bl	1c950 <__assert_fail@plt+0xb250>
   1e00c:	mov	r9, r0
   1e010:	ldr	r0, [r6]
   1e014:	cmp	r0, #0
   1e018:	beq	1ea68 <__assert_fail@plt+0xd368>
   1e01c:	mov	r9, #0
   1e020:	mov	r0, r9
   1e024:	sub	sp, fp, #28
   1e028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e02c:	tst	ip, #16777216	; 0x1000000
   1e030:	beq	1da80 <__assert_fail@plt+0xc380>
   1e034:	mov	r0, #13
   1e038:	b	1e9d8 <__assert_fail@plt+0xd2d8>
   1e03c:	mov	r0, #5
   1e040:	b	1e9d8 <__assert_fail@plt+0xd2d8>
   1e044:	mov	r7, r4
   1e048:	b	1eae8 <__assert_fail@plt+0xd3e8>
   1e04c:	mov	r0, lr
   1e050:	mov	r1, r5
   1e054:	mov	r2, ip
   1e058:	mov	r4, ip
   1e05c:	mov	r6, lr
   1e060:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1e064:	ldr	r1, [r5, #40]	; 0x28
   1e068:	mov	r2, r6
   1e06c:	mov	r3, r4
   1e070:	add	r0, r1, r0
   1e074:	mov	r1, r7
   1e078:	str	r0, [r5, #40]	; 0x28
   1e07c:	mov	r0, r5
   1e080:	sub	sp, fp, #28
   1e084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e088:	b	1d990 <__assert_fail@plt+0xc290>
   1e08c:	mov	r0, #16
   1e090:	b	1e9d8 <__assert_fail@plt+0xd2d8>
   1e094:	ldrb	r0, [r7, #16]
   1e098:	tst	r4, #256	; 0x100
   1e09c:	orr	r0, r0, #1
   1e0a0:	strb	r0, [r7, #16]
   1e0a4:	beq	1e0b4 <__assert_fail@plt+0xc9b4>
   1e0a8:	ldr	r0, [r8]
   1e0ac:	orr	r0, r0, #1024	; 0x400
   1e0b0:	str	r0, [r8]
   1e0b4:	ldr	r0, [r5, #40]	; 0x28
   1e0b8:	mov	r1, r5
   1e0bc:	mov	r2, r4
   1e0c0:	add	r0, r0, r3
   1e0c4:	str	r0, [r5, #40]	; 0x28
   1e0c8:	mov	r0, r6
   1e0cc:	bl	204d0 <__assert_fail@plt+0xedd0>
   1e0d0:	ldr	r6, [sp, #44]	; 0x2c
   1e0d4:	mov	r3, r0
   1e0d8:	ldr	r0, [r6, #4]
   1e0dc:	uxtb	r1, r0
   1e0e0:	cmp	r1, #2
   1e0e4:	beq	1fc50 <__assert_fail@plt+0xe550>
   1e0e8:	mov	r1, #1
   1e0ec:	str	r1, [sp, #56]	; 0x38
   1e0f0:	uxtb	r1, r0
   1e0f4:	mov	r2, r6
   1e0f8:	ldr	r7, [sp, #48]	; 0x30
   1e0fc:	cmp	r1, #21
   1e100:	moveq	r1, #1
   1e104:	bfieq	r0, r1, #0, #8
   1e108:	mov	r1, r5
   1e10c:	streq	r0, [r6, #4]
   1e110:	sub	r0, fp, #80	; 0x50
   1e114:	str	r0, [fp, #-36]	; 0xffffffdc
   1e118:	mov	r0, #3
   1e11c:	str	r0, [fp, #-40]	; 0xffffffd8
   1e120:	mov	r0, #1
   1e124:	str	r7, [sp]
   1e128:	str	r0, [sp, #4]
   1e12c:	sub	r0, fp, #40	; 0x28
   1e130:	bl	20678 <__assert_fail@plt+0xef78>
   1e134:	cmp	r0, #0
   1e138:	bne	1fc38 <__assert_fail@plt+0xe538>
   1e13c:	and	r0, r7, #65536	; 0x10000
   1e140:	mov	r2, r7
   1e144:	str	r0, [sp, #40]	; 0x28
   1e148:	mov	r0, #0
   1e14c:	str	r0, [sp, #36]	; 0x24
   1e150:	mov	r0, #0
   1e154:	str	r0, [sp, #32]
   1e158:	ldr	r4, [sp, #44]	; 0x2c
   1e15c:	ldr	r7, [sp, #60]	; 0x3c
   1e160:	mov	r0, r4
   1e164:	mov	r1, r5
   1e168:	bl	204d0 <__assert_fail@plt+0xedd0>
   1e16c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1e170:	mov	r9, r0
   1e174:	cmp	r6, #2
   1e178:	beq	1e3a0 <__assert_fail@plt+0xcca0>
   1e17c:	cmp	r6, #4
   1e180:	bne	1e1c4 <__assert_fail@plt+0xcac4>
   1e184:	ldr	r5, [sp, #28]
   1e188:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1e18c:	mov	r2, r7
   1e190:	sub	r3, fp, #32
   1e194:	ldr	r0, [r5, #64]	; 0x40
   1e198:	str	r1, [sp]
   1e19c:	ldr	r1, [sp, #48]	; 0x30
   1e1a0:	str	r1, [sp, #4]
   1e1a4:	mov	r1, r8
   1e1a8:	bl	20984 <__assert_fail@plt+0xf284>
   1e1ac:	ldr	r1, [sp, #20]
   1e1b0:	ldr	lr, [sp, #44]	; 0x2c
   1e1b4:	cmp	r0, #0
   1e1b8:	str	r0, [r1]
   1e1bc:	beq	1e3e8 <__assert_fail@plt+0xcce8>
   1e1c0:	b	1fbb0 <__assert_fail@plt+0xe4b0>
   1e1c4:	ldr	r0, [sp, #44]	; 0x2c
   1e1c8:	ldr	r2, [sp, #48]	; 0x30
   1e1cc:	mov	r4, r9
   1e1d0:	mov	r9, #7
   1e1d4:	str	sl, [sp, #52]	; 0x34
   1e1d8:	ldrb	r0, [r0, #4]
   1e1dc:	cmp	r0, #22
   1e1e0:	beq	1e1f0 <__assert_fail@plt+0xcaf0>
   1e1e4:	cmp	r0, #2
   1e1e8:	bne	1e348 <__assert_fail@plt+0xcc48>
   1e1ec:	b	1fb9c <__assert_fail@plt+0xe49c>
   1e1f0:	ldr	r7, [sp, #28]
   1e1f4:	mov	r5, r4
   1e1f8:	ldr	r0, [r7, #40]	; 0x28
   1e1fc:	mov	r1, r7
   1e200:	add	r0, r0, r4
   1e204:	str	r0, [r7, #40]	; 0x28
   1e208:	add	r0, sp, #64	; 0x40
   1e20c:	bl	204d0 <__assert_fail@plt+0xedd0>
   1e210:	mov	r3, r0
   1e214:	ldrb	r0, [sp, #68]	; 0x44
   1e218:	cmp	r0, #21
   1e21c:	beq	1e330 <__assert_fail@plt+0xcc30>
   1e220:	ldr	r4, [sp, #48]	; 0x30
   1e224:	cmp	r0, #2
   1e228:	beq	1fb9c <__assert_fail@plt+0xe49c>
   1e22c:	mov	r0, #3
   1e230:	str	r8, [sp, #24]
   1e234:	add	r2, sp, #64	; 0x40
   1e238:	str	r0, [fp, #-48]	; 0xffffffd0
   1e23c:	add	r0, sp, #72	; 0x48
   1e240:	str	r0, [fp, #-44]	; 0xffffffd4
   1e244:	mov	r0, #1
   1e248:	str	r4, [sp]
   1e24c:	str	r0, [sp, #4]
   1e250:	sub	r0, fp, #48	; 0x30
   1e254:	ldr	r7, [sp, #28]
   1e258:	mov	r1, r7
   1e25c:	bl	20678 <__assert_fail@plt+0xef78>
   1e260:	cmp	r0, #0
   1e264:	bne	20038 <__assert_fail@plt+0xe938>
   1e268:	ldr	r0, [sp, #44]	; 0x2c
   1e26c:	mov	r1, r7
   1e270:	mov	r2, r4
   1e274:	bl	204d0 <__assert_fail@plt+0xedd0>
   1e278:	ldr	r8, [fp, #-48]	; 0xffffffd0
   1e27c:	mov	r9, #11
   1e280:	str	r0, [sp, #16]
   1e284:	cmp	r8, #2
   1e288:	beq	1fb98 <__assert_fail@plt+0xe498>
   1e28c:	cmp	r8, #4
   1e290:	beq	1fb98 <__assert_fail@plt+0xe498>
   1e294:	cmp	r6, #3
   1e298:	bne	1e2ac <__assert_fail@plt+0xcbac>
   1e29c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e2a0:	bl	115bc <strlen@plt>
   1e2a4:	cmp	r0, #1
   1e2a8:	bhi	20044 <__assert_fail@plt+0xe944>
   1e2ac:	cmp	r8, #3
   1e2b0:	bne	1e2c4 <__assert_fail@plt+0xcbc4>
   1e2b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1e2b8:	bl	115bc <strlen@plt>
   1e2bc:	cmp	r0, #1
   1e2c0:	bhi	20044 <__assert_fail@plt+0xe944>
   1e2c4:	ldr	lr, [sp, #44]	; 0x2c
   1e2c8:	cmp	r6, #3
   1e2cc:	beq	1e498 <__assert_fail@plt+0xcd98>
   1e2d0:	cmp	r6, #0
   1e2d4:	mov	r7, #0
   1e2d8:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   1e2dc:	cmp	r8, #3
   1e2e0:	beq	1e4a8 <__assert_fail@plt+0xcda8>
   1e2e4:	cmp	r8, #0
   1e2e8:	mov	sl, #0
   1e2ec:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   1e2f0:	cmp	r6, #3
   1e2f4:	cmpne	r6, #0
   1e2f8:	bne	1e4bc <__assert_fail@plt+0xcdbc>
   1e2fc:	ldr	r0, [sp, #52]	; 0x34
   1e300:	ldr	r0, [r0, #92]	; 0x5c
   1e304:	cmp	r0, #2
   1e308:	blt	1e4c0 <__assert_fail@plt+0xcdc0>
   1e30c:	mov	r0, r7
   1e310:	bl	1161c <btowc@plt>
   1e314:	ldr	lr, [sp, #44]	; 0x2c
   1e318:	mov	r7, r0
   1e31c:	cmp	r8, #3
   1e320:	cmpne	r8, #0
   1e324:	beq	1e4cc <__assert_fail@plt+0xcdcc>
   1e328:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1e32c:	b	1e4ec <__assert_fail@plt+0xcdec>
   1e330:	ldr	r0, [r7, #40]	; 0x28
   1e334:	mov	r1, #1
   1e338:	sub	r0, r0, r5
   1e33c:	str	r0, [r7, #40]	; 0x28
   1e340:	ldr	r0, [sp, #44]	; 0x2c
   1e344:	strb	r1, [r0, #4]
   1e348:	add	r0, pc, #12
   1e34c:	ldr	sl, [sp, #52]	; 0x34
   1e350:	ldr	r7, [sp, #60]	; 0x3c
   1e354:	mov	r9, r4
   1e358:	ldr	pc, [r0, r6, lsl #2]
   1e35c:	andeq	lr, r1, ip, ror #6
   1e360:	andeq	lr, r1, r4, asr #8
   1e364:	andeq	lr, r1, r0, lsr #7
   1e368:	andeq	lr, r1, r0, lsl #9
   1e36c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1e370:	mov	r3, #1
   1e374:	ubfx	r1, r0, #5, #3
   1e378:	and	r0, r0, #31
   1e37c:	ldr	r5, [sp, #28]
   1e380:	ldr	lr, [sp, #44]	; 0x2c
   1e384:	ldr	r2, [r8, r1, lsl #2]
   1e388:	orr	r0, r2, r3, lsl r0
   1e38c:	str	r0, [r8, r1, lsl #2]
   1e390:	ldrb	r0, [lr, #4]
   1e394:	cmp	r0, #21
   1e398:	bne	1e3f4 <__assert_fail@plt+0xccf4>
   1e39c:	b	1e670 <__assert_fail@plt+0xcf70>
   1e3a0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1e3a4:	mov	r0, r7
   1e3a8:	bl	115bc <strlen@plt>
   1e3ac:	cmp	r0, #1
   1e3b0:	bne	1fdac <__assert_fail@plt+0xe6ac>
   1e3b4:	ldrb	r0, [r7]
   1e3b8:	mov	r3, #1
   1e3bc:	ubfx	r1, r0, #5, #3
   1e3c0:	and	r0, r0, #31
   1e3c4:	ldr	r2, [r8, r1, lsl #2]
   1e3c8:	orr	r0, r2, r3, lsl r0
   1e3cc:	str	r0, [r8, r1, lsl #2]
   1e3d0:	mov	r1, #0
   1e3d4:	ldr	r0, [sp, #20]
   1e3d8:	ldr	r5, [sp, #28]
   1e3dc:	ldr	lr, [sp, #44]	; 0x2c
   1e3e0:	ldr	r7, [sp, #60]	; 0x3c
   1e3e4:	str	r1, [r0]
   1e3e8:	ldrb	r0, [lr, #4]
   1e3ec:	cmp	r0, #21
   1e3f0:	beq	1e670 <__assert_fail@plt+0xcf70>
   1e3f4:	cmp	r0, #2
   1e3f8:	ldr	r0, [sp, #48]	; 0x30
   1e3fc:	beq	1fc44 <__assert_fail@plt+0xe544>
   1e400:	sub	r1, fp, #80	; 0x50
   1e404:	mov	r2, lr
   1e408:	mov	r3, r9
   1e40c:	mov	r4, lr
   1e410:	str	r1, [fp, #-36]	; 0xffffffdc
   1e414:	mov	r1, #3
   1e418:	str	r1, [fp, #-40]	; 0xffffffd8
   1e41c:	str	r0, [sp]
   1e420:	mov	r0, #0
   1e424:	mov	r1, r5
   1e428:	str	r0, [sp, #4]
   1e42c:	sub	r0, fp, #40	; 0x28
   1e430:	bl	20678 <__assert_fail@plt+0xef78>
   1e434:	ldr	r2, [sp, #48]	; 0x30
   1e438:	cmp	r0, #0
   1e43c:	beq	1e160 <__assert_fail@plt+0xca60>
   1e440:	b	1fc38 <__assert_fail@plt+0xe538>
   1e444:	ldr	r1, [r7, #20]
   1e448:	ldr	r0, [sp, #36]	; 0x24
   1e44c:	cmp	r0, r1
   1e450:	beq	1e5d4 <__assert_fail@plt+0xced4>
   1e454:	ldr	r0, [r7]
   1e458:	ldr	r5, [sp, #28]
   1e45c:	ldr	lr, [sp, #44]	; 0x2c
   1e460:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e464:	add	r2, r1, #1
   1e468:	str	r2, [r7, #20]
   1e46c:	str	r3, [r0, r1, lsl #2]
   1e470:	ldrb	r0, [lr, #4]
   1e474:	cmp	r0, #21
   1e478:	bne	1e3f4 <__assert_fail@plt+0xccf4>
   1e47c:	b	1e670 <__assert_fail@plt+0xcf70>
   1e480:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1e484:	mov	r0, r7
   1e488:	bl	115bc <strlen@plt>
   1e48c:	cmp	r0, #1
   1e490:	beq	1e3b4 <__assert_fail@plt+0xccb4>
   1e494:	b	1fdb0 <__assert_fail@plt+0xe6b0>
   1e498:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e49c:	ldrb	r7, [r0]
   1e4a0:	cmp	r8, #3
   1e4a4:	bne	1e2e4 <__assert_fail@plt+0xcbe4>
   1e4a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1e4ac:	ldrb	sl, [r0]
   1e4b0:	cmp	r6, #3
   1e4b4:	cmpne	r6, #0
   1e4b8:	beq	1e2fc <__assert_fail@plt+0xcbfc>
   1e4bc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1e4c0:	cmp	r8, #3
   1e4c4:	cmpne	r8, #0
   1e4c8:	bne	1e328 <__assert_fail@plt+0xcc28>
   1e4cc:	ldr	r0, [sp, #52]	; 0x34
   1e4d0:	ldr	r0, [r0, #92]	; 0x5c
   1e4d4:	cmp	r0, #2
   1e4d8:	blt	1e4ec <__assert_fail@plt+0xcdec>
   1e4dc:	mov	r0, sl
   1e4e0:	bl	1161c <btowc@plt>
   1e4e4:	ldr	lr, [sp, #44]	; 0x2c
   1e4e8:	mov	sl, r0
   1e4ec:	ldr	r8, [sp, #24]
   1e4f0:	cmn	r7, #1
   1e4f4:	mov	r9, #3
   1e4f8:	cmnne	sl, #1
   1e4fc:	beq	1fb9c <__assert_fail@plt+0xe49c>
   1e500:	ldr	r0, [sp, #40]	; 0x28
   1e504:	cmp	r0, #0
   1e508:	beq	1e518 <__assert_fail@plt+0xce18>
   1e50c:	cmp	r7, sl
   1e510:	mov	r9, #11
   1e514:	bhi	1fb9c <__assert_fail@plt+0xe49c>
   1e518:	ldr	r0, [sp, #52]	; 0x34
   1e51c:	ldr	r0, [r0, #92]	; 0x5c
   1e520:	cmp	r0, #2
   1e524:	blt	1e55c <__assert_fail@plt+0xce5c>
   1e528:	ldr	r4, [sp, #60]	; 0x3c
   1e52c:	ldr	r1, [sp, #32]
   1e530:	ldr	r5, [sp, #28]
   1e534:	ldr	r0, [r4, #32]
   1e538:	cmp	r1, r0
   1e53c:	beq	1e614 <__assert_fail@plt+0xcf14>
   1e540:	ldmib	r4, {r6, r9}
   1e544:	str	r7, [r6, r0, lsl #2]
   1e548:	ldr	r0, [r4, #32]
   1e54c:	add	r1, r0, #1
   1e550:	str	r1, [r4, #32]
   1e554:	str	sl, [r9, r0, lsl #2]
   1e558:	b	1e560 <__assert_fail@plt+0xce60>
   1e55c:	ldr	r5, [sp, #28]
   1e560:	ldr	r9, [sp, #16]
   1e564:	mov	r0, #0
   1e568:	cmp	r7, r0
   1e56c:	cmpls	r0, sl
   1e570:	bls	1e58c <__assert_fail@plt+0xce8c>
   1e574:	add	r0, r0, #1
   1e578:	cmp	r0, #256	; 0x100
   1e57c:	beq	1e5b0 <__assert_fail@plt+0xceb0>
   1e580:	cmp	r7, r0
   1e584:	cmpls	r0, sl
   1e588:	bhi	1e574 <__assert_fail@plt+0xce74>
   1e58c:	ubfx	r1, r0, #5, #3
   1e590:	and	r3, r0, #31
   1e594:	mov	r4, #1
   1e598:	ldr	r2, [r8, r1, lsl #2]
   1e59c:	orr	r2, r2, r4, lsl r3
   1e5a0:	str	r2, [r8, r1, lsl #2]
   1e5a4:	add	r0, r0, #1
   1e5a8:	cmp	r0, #256	; 0x100
   1e5ac:	bne	1e580 <__assert_fail@plt+0xce80>
   1e5b0:	ldr	r0, [sp, #20]
   1e5b4:	ldr	sl, [sp, #52]	; 0x34
   1e5b8:	ldr	r7, [sp, #60]	; 0x3c
   1e5bc:	mov	r1, #0
   1e5c0:	str	r1, [r0]
   1e5c4:	ldrb	r0, [lr, #4]
   1e5c8:	cmp	r0, #21
   1e5cc:	bne	1e3f4 <__assert_fail@plt+0xccf4>
   1e5d0:	b	1e670 <__assert_fail@plt+0xcf70>
   1e5d4:	ldr	r1, [sp, #36]	; 0x24
   1e5d8:	mov	r0, #1
   1e5dc:	orr	r1, r0, r1, lsl #1
   1e5e0:	ldr	r0, [r7]
   1e5e4:	str	r1, [sp, #36]	; 0x24
   1e5e8:	lsl	r1, r1, #2
   1e5ec:	bl	2b910 <__assert_fail@plt+0x1a210>
   1e5f0:	cmp	r0, #0
   1e5f4:	beq	200a8 <__assert_fail@plt+0xe9a8>
   1e5f8:	ldr	r7, [sp, #60]	; 0x3c
   1e5fc:	ldr	r5, [sp, #28]
   1e600:	ldr	lr, [sp, #44]	; 0x2c
   1e604:	mov	r9, r4
   1e608:	str	r0, [r7]
   1e60c:	ldr	r1, [r7, #20]
   1e610:	b	1e460 <__assert_fail@plt+0xcd60>
   1e614:	ldr	r1, [sp, #32]
   1e618:	mov	r0, #1
   1e61c:	orr	r1, r0, r1, lsl #1
   1e620:	ldr	r0, [r4, #4]
   1e624:	lsl	r9, r1, #2
   1e628:	str	r1, [sp, #32]
   1e62c:	mov	r1, r9
   1e630:	bl	2b910 <__assert_fail@plt+0x1a210>
   1e634:	mov	r6, r0
   1e638:	ldr	r0, [r4, #8]
   1e63c:	mov	r1, r9
   1e640:	bl	2b910 <__assert_fail@plt+0x1a210>
   1e644:	mov	r9, r0
   1e648:	cmp	r6, #0
   1e64c:	cmpne	r9, #0
   1e650:	beq	200c0 <__assert_fail@plt+0xe9c0>
   1e654:	ldr	r4, [sp, #60]	; 0x3c
   1e658:	stmib	r4, {r6, r9}
   1e65c:	ldr	r0, [r4, #32]
   1e660:	ldr	r5, [sp, #28]
   1e664:	ldr	lr, [sp, #44]	; 0x2c
   1e668:	ldr	r8, [sp, #24]
   1e66c:	b	1e544 <__assert_fail@plt+0xce44>
   1e670:	ldr	r0, [r5, #40]	; 0x28
   1e674:	ldr	ip, [sp, #48]	; 0x30
   1e678:	add	r0, r0, r9
   1e67c:	str	r0, [r5, #40]	; 0x28
   1e680:	ldr	r0, [sp, #56]	; 0x38
   1e684:	cmp	r0, #0
   1e688:	beq	1e6c4 <__assert_fail@plt+0xcfc4>
   1e68c:	vld1.32	{d16-d17}, [r8]
   1e690:	mov	r0, r8
   1e694:	vmvn	q8, q8
   1e698:	vst1.32	{d16-d17}, [r0]!
   1e69c:	vld1.32	{d16-d17}, [r0]
   1e6a0:	vmvn	q8, q8
   1e6a4:	vst1.32	{d16-d17}, [r0]
   1e6a8:	ldr	r0, [sl, #92]	; 0x5c
   1e6ac:	cmp	r0, #2
   1e6b0:	bge	1e6d0 <__assert_fail@plt+0xcfd0>
   1e6b4:	ldr	r1, [r7, #20]
   1e6b8:	cmp	r1, #0
   1e6bc:	bne	1e780 <__assert_fail@plt+0xd080>
   1e6c0:	b	1e75c <__assert_fail@plt+0xd05c>
   1e6c4:	ldr	r0, [sl, #92]	; 0x5c
   1e6c8:	cmp	r0, #2
   1e6cc:	blt	1e6b4 <__assert_fail@plt+0xcfb4>
   1e6d0:	ldr	r6, [sl, #60]	; 0x3c
   1e6d4:	ldm	r8, {r1, r2, r3, r7}
   1e6d8:	ldr	r5, [r6]
   1e6dc:	and	r1, r1, r5
   1e6e0:	ldr	r5, [sp, #28]
   1e6e4:	str	r1, [r8]
   1e6e8:	ldr	r1, [r6, #4]
   1e6ec:	and	r1, r2, r1
   1e6f0:	str	r1, [r8, #4]
   1e6f4:	ldr	r1, [r6, #8]
   1e6f8:	and	r1, r3, r1
   1e6fc:	str	r1, [r8, #8]
   1e700:	ldr	r1, [r6, #12]
   1e704:	and	r1, r7, r1
   1e708:	ldr	r7, [sp, #60]	; 0x3c
   1e70c:	str	r1, [r8, #12]
   1e710:	ldr	r1, [r8, #16]
   1e714:	ldr	r2, [r6, #16]
   1e718:	and	r1, r1, r2
   1e71c:	str	r1, [r8, #16]
   1e720:	ldr	r1, [r6, #20]
   1e724:	ldr	r2, [r8, #20]
   1e728:	and	r1, r2, r1
   1e72c:	str	r1, [r8, #20]
   1e730:	ldr	r1, [r6, #24]
   1e734:	ldr	r2, [r8, #24]
   1e738:	and	r1, r2, r1
   1e73c:	str	r1, [r8, #24]
   1e740:	ldr	r1, [r6, #28]
   1e744:	ldr	r2, [r8, #28]
   1e748:	and	r1, r2, r1
   1e74c:	str	r1, [r8, #28]
   1e750:	ldr	r1, [r7, #20]
   1e754:	cmp	r1, #0
   1e758:	bne	1e780 <__assert_fail@plt+0xd080>
   1e75c:	ldr	r1, [r7, #24]
   1e760:	cmp	r1, #0
   1e764:	bne	1e780 <__assert_fail@plt+0xd080>
   1e768:	ldr	r1, [r7, #28]
   1e76c:	cmp	r1, #0
   1e770:	bne	1e780 <__assert_fail@plt+0xd080>
   1e774:	ldr	r1, [r7, #32]
   1e778:	cmp	r1, #0
   1e77c:	beq	1faf8 <__assert_fail@plt+0xe3f8>
   1e780:	ldrb	r0, [sl, #88]	; 0x58
   1e784:	orr	r0, r0, #2
   1e788:	strb	r0, [sl, #88]	; 0x58
   1e78c:	ldr	r1, [sl, #64]	; 0x40
   1e790:	cmp	r1, #31
   1e794:	beq	1fd1c <__assert_fail@plt+0xe61c>
   1e798:	ldr	r0, [sl, #56]	; 0x38
   1e79c:	add	r0, r0, r1, lsl #5
   1e7a0:	add	r2, r1, #1
   1e7a4:	vmov.i32	q8, #0	; 0x00000000
   1e7a8:	mov	r1, #6
   1e7ac:	str	r2, [sl, #64]	; 0x40
   1e7b0:	mov	r2, #0
   1e7b4:	add	r4, r0, #4
   1e7b8:	str	r2, [r0, #20]
   1e7bc:	str	r7, [r0, #24]
   1e7c0:	str	r1, [r0, #28]
   1e7c4:	mov	r0, #28
   1e7c8:	mov	r1, r4
   1e7cc:	vst1.32	{d16-d17}, [r1], r0
   1e7d0:	mvn	r0, #0
   1e7d4:	str	r0, [r1]
   1e7d8:	ldr	r0, [r8]
   1e7dc:	cmp	r0, #0
   1e7e0:	bne	1e838 <__assert_fail@plt+0xd138>
   1e7e4:	ldr	r0, [r8, #4]
   1e7e8:	cmp	r0, #0
   1e7ec:	bne	1e838 <__assert_fail@plt+0xd138>
   1e7f0:	ldr	r0, [r8, #8]
   1e7f4:	cmp	r0, #0
   1e7f8:	bne	1e838 <__assert_fail@plt+0xd138>
   1e7fc:	ldr	r0, [r8, #12]
   1e800:	cmp	r0, #0
   1e804:	bne	1e838 <__assert_fail@plt+0xd138>
   1e808:	ldr	r0, [r8, #16]
   1e80c:	cmp	r0, #0
   1e810:	bne	1e838 <__assert_fail@plt+0xd138>
   1e814:	ldr	r0, [r8, #20]
   1e818:	cmp	r0, #0
   1e81c:	bne	1e838 <__assert_fail@plt+0xd138>
   1e820:	ldr	r0, [r8, #24]
   1e824:	cmp	r0, #0
   1e828:	bne	1e838 <__assert_fail@plt+0xd138>
   1e82c:	ldr	r0, [r8, #28]
   1e830:	cmp	r0, #0
   1e834:	beq	1fdb8 <__assert_fail@plt+0xe6b8>
   1e838:	ldr	r1, [sl, #64]	; 0x40
   1e83c:	cmp	r1, #31
   1e840:	beq	1fd4c <__assert_fail@plt+0xe64c>
   1e844:	ldr	r0, [sl, #56]	; 0x38
   1e848:	add	r0, r0, r1, lsl #5
   1e84c:	add	r2, r1, #1
   1e850:	vmov.i32	q8, #0	; 0x00000000
   1e854:	mov	r1, #3
   1e858:	str	r2, [sl, #64]	; 0x40
   1e85c:	mov	r2, #0
   1e860:	add	r6, r0, #4
   1e864:	str	r2, [r0, #20]
   1e868:	str	r8, [r0, #24]
   1e86c:	str	r1, [r0, #28]
   1e870:	mov	r0, #28
   1e874:	mov	r1, r6
   1e878:	vst1.32	{d16-d17}, [r1], r0
   1e87c:	mvn	r0, #0
   1e880:	str	r0, [r1]
   1e884:	ldr	r1, [sl, #64]	; 0x40
   1e888:	cmp	r1, #31
   1e88c:	beq	1fd7c <__assert_fail@plt+0xe67c>
   1e890:	ldr	r0, [sl, #56]	; 0x38
   1e894:	add	r7, r0, r1, lsl #5
   1e898:	add	r2, r1, #1
   1e89c:	mov	r0, #0
   1e8a0:	mov	r1, #10
   1e8a4:	str	r2, [sl, #64]	; 0x40
   1e8a8:	mvn	r2, #0
   1e8ac:	str	r0, [r7, #4]!
   1e8b0:	add	r3, r7, #20
   1e8b4:	str	r6, [r7, #4]
   1e8b8:	str	r4, [r7, #8]
   1e8bc:	str	r0, [r7, #12]
   1e8c0:	str	r0, [r7, #16]
   1e8c4:	stm	r3, {r0, r1, r2}
   1e8c8:	str	r7, [r6]
   1e8cc:	str	r7, [r4]
   1e8d0:	b	1eae8 <__assert_fail@plt+0xd3e8>
   1e8d4:	mov	r0, #5
   1e8d8:	str	r0, [lr]
   1e8dc:	ldr	r1, [sl, #64]	; 0x40
   1e8e0:	cmp	r1, #31
   1e8e4:	beq	1fe38 <__assert_fail@plt+0xe738>
   1e8e8:	ldr	r0, [sl, #56]	; 0x38
   1e8ec:	add	r4, r0, r1, lsl #5
   1e8f0:	add	r2, r1, #1
   1e8f4:	mov	r0, #0
   1e8f8:	mvn	r3, #0
   1e8fc:	str	r2, [sl, #64]	; 0x40
   1e900:	str	r0, [r4, #4]!
   1e904:	str	r0, [r4, #8]
   1e908:	str	r0, [r4, #4]
   1e90c:	ldm	lr, {r1, r2}
   1e910:	str	r3, [r4, #28]
   1e914:	str	r0, [r4, #16]
   1e918:	str	r0, [r4, #12]
   1e91c:	bic	r0, r2, #786432	; 0xc0000
   1e920:	str	r1, [r4, #20]
   1e924:	str	r0, [r4, #24]
   1e928:	mov	r0, #10
   1e92c:	str	r0, [lr]
   1e930:	ldr	r1, [sl, #64]	; 0x40
   1e934:	cmp	r1, #31
   1e938:	beq	1dc50 <__assert_fail@plt+0xc550>
   1e93c:	ldr	r0, [sl, #56]	; 0x38
   1e940:	add	r5, r0, r1, lsl #5
   1e944:	add	r2, r1, #1
   1e948:	mov	r0, #0
   1e94c:	mvn	r3, #0
   1e950:	str	r2, [sl, #64]	; 0x40
   1e954:	str	r0, [r5, #4]!
   1e958:	str	r0, [r5, #8]
   1e95c:	str	r0, [r5, #4]
   1e960:	ldm	lr, {r1, r2}
   1e964:	str	r3, [r5, #28]
   1e968:	str	r0, [r5, #16]
   1e96c:	str	r0, [r5, #12]
   1e970:	bic	r0, r2, #786432	; 0xc0000
   1e974:	str	r1, [r5, #20]
   1e978:	str	r0, [r5, #24]
   1e97c:	ldr	r1, [sl, #64]	; 0x40
   1e980:	cmp	r1, #31
   1e984:	beq	1ff5c <__assert_fail@plt+0xe85c>
   1e988:	ldr	r0, [sl, #56]	; 0x38
   1e98c:	add	r6, r0, r1, lsl #5
   1e990:	add	r2, r1, #1
   1e994:	mov	r0, #0
   1e998:	cmp	r4, #0
   1e99c:	mov	r1, #10
   1e9a0:	str	r2, [sl, #64]	; 0x40
   1e9a4:	mvn	r2, #0
   1e9a8:	str	r0, [r6, #4]!
   1e9ac:	add	r3, r6, #20
   1e9b0:	stmib	r6, {r4, r5}
   1e9b4:	str	r0, [r6, #12]
   1e9b8:	str	r0, [r6, #16]
   1e9bc:	stm	r3, {r0, r1, r2}
   1e9c0:	strne	r6, [r4]
   1e9c4:	cmp	r5, #0
   1e9c8:	strne	r6, [r5]
   1e9cc:	cmpne	r4, #0
   1e9d0:	bne	1ea38 <__assert_fail@plt+0xd338>
   1e9d4:	mov	r0, #12
   1e9d8:	ldr	r1, [sp, #20]
   1e9dc:	str	r0, [r1]
   1e9e0:	mov	r0, r9
   1e9e4:	sub	sp, fp, #28
   1e9e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9ec:	ldr	r1, [sl, #64]	; 0x40
   1e9f0:	cmp	r1, #31
   1e9f4:	beq	1fe6c <__assert_fail@plt+0xe76c>
   1e9f8:	ldr	r0, [sl, #56]	; 0x38
   1e9fc:	add	r6, r0, r1, lsl #5
   1ea00:	add	r2, r1, #1
   1ea04:	mov	r0, #0
   1ea08:	mvn	r3, #0
   1ea0c:	str	r2, [sl, #64]	; 0x40
   1ea10:	str	r0, [r6, #4]!
   1ea14:	str	r0, [r6, #8]
   1ea18:	str	r0, [r6, #4]
   1ea1c:	ldm	lr, {r1, r2}
   1ea20:	str	r3, [r6, #28]
   1ea24:	str	r0, [r6, #16]
   1ea28:	str	r0, [r6, #12]
   1ea2c:	bic	r0, r2, #786432	; 0xc0000
   1ea30:	str	r1, [r6, #20]
   1ea34:	str	r0, [r6, #24]
   1ea38:	ldr	r4, [sp, #28]
   1ea3c:	mov	r0, lr
   1ea40:	mov	r2, ip
   1ea44:	mov	r1, r4
   1ea48:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1ea4c:	ldr	r1, [r4, #40]	; 0x28
   1ea50:	mov	r9, r6
   1ea54:	add	r0, r1, r0
   1ea58:	str	r0, [r4, #40]	; 0x28
   1ea5c:	mov	r0, r9
   1ea60:	sub	sp, fp, #28
   1ea64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea68:	ldrb	r0, [r7, #4]
   1ea6c:	cmp	r0, #9
   1ea70:	bne	1ff8c <__assert_fail@plt+0xe88c>
   1ea74:	mov	lr, r7
   1ea78:	cmp	r4, #8
   1ea7c:	bhi	1ea90 <__assert_fail@plt+0xd390>
   1ea80:	ldr	r0, [sl, #84]	; 0x54
   1ea84:	mov	r1, #1
   1ea88:	orr	r0, r0, r1, lsl r4
   1ea8c:	str	r0, [sl, #84]	; 0x54
   1ea90:	ldr	r1, [sl, #64]	; 0x40
   1ea94:	ldr	ip, [sp, #48]	; 0x30
   1ea98:	cmp	r1, #31
   1ea9c:	beq	1fdd0 <__assert_fail@plt+0xe6d0>
   1eaa0:	ldr	r0, [sl, #56]	; 0x38
   1eaa4:	add	r0, r0, r1, lsl #5
   1eaa8:	add	r2, r1, #1
   1eaac:	mov	r1, #0
   1eab0:	cmp	r9, #0
   1eab4:	mvn	r3, #0
   1eab8:	str	r2, [sl, #64]	; 0x40
   1eabc:	mov	r2, #17
   1eac0:	mov	r7, r0
   1eac4:	str	r1, [r7, #4]!
   1eac8:	add	r6, r7, #20
   1eacc:	str	r9, [r7, #4]
   1ead0:	str	r1, [r7, #8]
   1ead4:	str	r1, [r7, #12]
   1ead8:	str	r1, [r7, #16]
   1eadc:	stm	r6, {r1, r2, r3}
   1eae0:	strne	r7, [r9]
   1eae4:	str	r4, [r0, #24]
   1eae8:	mov	r0, lr
   1eaec:	mov	r1, r5
   1eaf0:	mov	r2, ip
   1eaf4:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1eaf8:	ldr	r1, [r5, #40]	; 0x28
   1eafc:	ldr	ip, [sp, #48]	; 0x30
   1eb00:	ldr	lr, [sp, #44]	; 0x2c
   1eb04:	mov	r4, #0
   1eb08:	add	r0, r1, r0
   1eb0c:	str	r0, [r5, #40]	; 0x28
   1eb10:	and	r0, ip, #16777216	; 0x1000000
   1eb14:	str	r0, [sp, #32]
   1eb18:	and	r0, ip, #2097152	; 0x200000
   1eb1c:	str	r0, [sp, #16]
   1eb20:	add	r0, sl, #56	; 0x38
   1eb24:	str	r0, [sp, #60]	; 0x3c
   1eb28:	add	r0, sl, #64	; 0x40
   1eb2c:	str	r0, [sp, #24]
   1eb30:	ldrb	r0, [lr, #4]
   1eb34:	mov	r9, r7
   1eb38:	cmp	r0, #23
   1eb3c:	bls	1eb64 <__assert_fail@plt+0xd464>
   1eb40:	b	1fa48 <__assert_fail@plt+0xe348>
   1eb44:	ldrb	r1, [lr, #4]
   1eb48:	cmp	r1, #23
   1eb4c:	cmpne	r1, #11
   1eb50:	beq	1f994 <__assert_fail@plt+0xe294>
   1eb54:	ldrb	r0, [lr, #4]
   1eb58:	mov	r9, r7
   1eb5c:	cmp	r0, #23
   1eb60:	bhi	1fa48 <__assert_fail@plt+0xe348>
   1eb64:	movw	r2, #2048	; 0x800
   1eb68:	mov	r1, #1
   1eb6c:	movt	r2, #140	; 0x8c
   1eb70:	tst	r2, r1, lsl r0
   1eb74:	beq	1fa48 <__assert_fail@plt+0xe348>
   1eb78:	cmp	r0, #23
   1eb7c:	str	r9, [sp, #40]	; 0x28
   1eb80:	bne	1ec30 <__assert_fail@plt+0xd530>
   1eb84:	ldr	r9, [r5, #40]	; 0x28
   1eb88:	ldm	lr, {r7, sl}
   1eb8c:	mov	r6, r5
   1eb90:	mvn	r2, #0
   1eb94:	mov	r8, r2
   1eb98:	mov	r0, lr
   1eb9c:	mov	r1, r6
   1eba0:	mov	r2, ip
   1eba4:	mov	r5, r6
   1eba8:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1ebac:	ldr	r1, [r6, #40]	; 0x28
   1ebb0:	ldr	lr, [sp, #44]	; 0x2c
   1ebb4:	add	r0, r1, r0
   1ebb8:	str	r0, [r6, #40]	; 0x28
   1ebbc:	ldrb	r0, [lr, #4]
   1ebc0:	ldrb	r1, [lr]
   1ebc4:	cmp	r0, #24
   1ebc8:	beq	1ec4c <__assert_fail@plt+0xd54c>
   1ebcc:	cmp	r0, #2
   1ebd0:	beq	1f2a8 <__assert_fail@plt+0xdba8>
   1ebd4:	cmp	r1, #44	; 0x2c
   1ebd8:	beq	1ec4c <__assert_fail@plt+0xd54c>
   1ebdc:	ldr	ip, [sp, #48]	; 0x30
   1ebe0:	mvn	r2, #1
   1ebe4:	cmp	r1, #48	; 0x30
   1ebe8:	bcc	1eb94 <__assert_fail@plt+0xd494>
   1ebec:	cmp	r0, #1
   1ebf0:	bne	1eb94 <__assert_fail@plt+0xd494>
   1ebf4:	cmn	r8, #2
   1ebf8:	beq	1eb94 <__assert_fail@plt+0xd494>
   1ebfc:	cmp	r1, #57	; 0x39
   1ec00:	bhi	1eb94 <__assert_fail@plt+0xd494>
   1ec04:	cmn	r8, #1
   1ec08:	beq	1ec28 <__assert_fail@plt+0xd528>
   1ec0c:	add	r0, r8, r8, lsl #2
   1ec10:	add	r0, r1, r0, lsl #1
   1ec14:	movw	r1, #32816	; 0x8030
   1ec18:	cmp	r0, r1
   1ec1c:	movge	r0, r1
   1ec20:	sub	r2, r0, #48	; 0x30
   1ec24:	b	1eb94 <__assert_fail@plt+0xd494>
   1ec28:	sub	r2, r1, #48	; 0x30
   1ec2c:	b	1eb94 <__assert_fail@plt+0xd494>
   1ec30:	cmp	r0, #19
   1ec34:	sub	r0, r0, #18
   1ec38:	mvn	sl, #0
   1ec3c:	clz	r0, r0
   1ec40:	movweq	sl, #1
   1ec44:	lsr	r8, r0, #5
   1ec48:	b	1ee00 <__assert_fail@plt+0xd700>
   1ec4c:	cmn	r8, #1
   1ec50:	bne	1ec94 <__assert_fail@plt+0xd594>
   1ec54:	ldr	ip, [sp, #48]	; 0x30
   1ec58:	cmp	r1, #44	; 0x2c
   1ec5c:	moveq	r8, #0
   1ec60:	cmpeq	r0, #1
   1ec64:	beq	1ecf0 <__assert_fail@plt+0xd5f0>
   1ec68:	ldr	r0, [sp, #20]
   1ec6c:	mov	r1, #10
   1ec70:	str	r1, [r0]
   1ec74:	ldr	r9, [sp, #40]	; 0x28
   1ec78:	mov	r7, #0
   1ec7c:	mov	r5, r6
   1ec80:	clz	r0, r7
   1ec84:	cmp	r7, #0
   1ec88:	lsr	r0, r0, #5
   1ec8c:	beq	1f974 <__assert_fail@plt+0xe274>
   1ec90:	b	1f984 <__assert_fail@plt+0xe284>
   1ec94:	ldr	ip, [sp, #48]	; 0x30
   1ec98:	cmn	r8, #2
   1ec9c:	beq	1ecb4 <__assert_fail@plt+0xd5b4>
   1eca0:	cmp	r0, #24
   1eca4:	beq	1edac <__assert_fail@plt+0xd6ac>
   1eca8:	cmp	r0, #1
   1ecac:	cmpeq	r1, #44	; 0x2c
   1ecb0:	beq	1ecf0 <__assert_fail@plt+0xd5f0>
   1ecb4:	ldr	r1, [sp, #16]
   1ecb8:	cmp	r1, #0
   1ecbc:	beq	1f2b8 <__assert_fail@plt+0xdbb8>
   1ecc0:	mov	r0, #1
   1ecc4:	str	r9, [r6, #40]	; 0x28
   1ecc8:	mov	r5, r6
   1eccc:	bfi	sl, r0, #0, #8
   1ecd0:	stm	lr, {r7, sl}
   1ecd4:	ldr	r9, [sp, #40]	; 0x28
   1ecd8:	mov	r7, r9
   1ecdc:	clz	r0, r7
   1ece0:	cmp	r7, #0
   1ece4:	lsr	r0, r0, #5
   1ece8:	beq	1f974 <__assert_fail@plt+0xe274>
   1ecec:	b	1f984 <__assert_fail@plt+0xe284>
   1ecf0:	mvn	r2, #0
   1ecf4:	str	r9, [sp, #56]	; 0x38
   1ecf8:	mov	r9, r2
   1ecfc:	mov	r0, lr
   1ed00:	mov	r1, r6
   1ed04:	mov	r2, ip
   1ed08:	mov	r5, r6
   1ed0c:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1ed10:	ldr	r1, [r6, #40]	; 0x28
   1ed14:	ldr	lr, [sp, #44]	; 0x2c
   1ed18:	add	r0, r1, r0
   1ed1c:	str	r0, [r6, #40]	; 0x28
   1ed20:	ldrb	r0, [lr, #4]
   1ed24:	cmp	r0, #24
   1ed28:	beq	1ed94 <__assert_fail@plt+0xd694>
   1ed2c:	cmp	r0, #2
   1ed30:	beq	1f714 <__assert_fail@plt+0xe014>
   1ed34:	ldrb	r1, [lr]
   1ed38:	ldr	ip, [sp, #48]	; 0x30
   1ed3c:	cmp	r1, #44	; 0x2c
   1ed40:	beq	1ed98 <__assert_fail@plt+0xd698>
   1ed44:	mvn	r2, #1
   1ed48:	cmp	r1, #48	; 0x30
   1ed4c:	bcc	1ecf8 <__assert_fail@plt+0xd5f8>
   1ed50:	cmp	r0, #1
   1ed54:	bne	1ecf8 <__assert_fail@plt+0xd5f8>
   1ed58:	cmn	r9, #2
   1ed5c:	beq	1ecf8 <__assert_fail@plt+0xd5f8>
   1ed60:	cmp	r1, #57	; 0x39
   1ed64:	bhi	1ecf8 <__assert_fail@plt+0xd5f8>
   1ed68:	cmn	r9, #1
   1ed6c:	beq	1ed8c <__assert_fail@plt+0xd68c>
   1ed70:	add	r0, r9, r9, lsl #2
   1ed74:	add	r0, r1, r0, lsl #1
   1ed78:	movw	r1, #32816	; 0x8030
   1ed7c:	cmp	r0, r1
   1ed80:	movge	r0, r1
   1ed84:	sub	r2, r0, #48	; 0x30
   1ed88:	b	1ecf8 <__assert_fail@plt+0xd5f8>
   1ed8c:	sub	r2, r1, #48	; 0x30
   1ed90:	b	1ecf8 <__assert_fail@plt+0xd5f8>
   1ed94:	ldr	ip, [sp, #48]	; 0x30
   1ed98:	mov	r2, r9
   1ed9c:	ldr	r9, [sp, #56]	; 0x38
   1eda0:	cmn	r2, #2
   1eda4:	bne	1edb8 <__assert_fail@plt+0xd6b8>
   1eda8:	b	1ecb4 <__assert_fail@plt+0xd5b4>
   1edac:	mov	r2, r8
   1edb0:	cmn	r2, #2
   1edb4:	beq	1ecb4 <__assert_fail@plt+0xd5b4>
   1edb8:	ldr	r9, [sp, #40]	; 0x28
   1edbc:	cmp	r8, r2
   1edc0:	mov	r1, #0
   1edc4:	mov	r5, r6
   1edc8:	movwle	r1, #1
   1edcc:	cmp	r0, #24
   1edd0:	bne	1f6d4 <__assert_fail@plt+0xdfd4>
   1edd4:	add	r0, r2, #1
   1edd8:	mov	sl, r2
   1eddc:	clz	r0, r0
   1ede0:	lsr	r0, r0, #5
   1ede4:	orrs	r0, r1, r0
   1ede8:	beq	1f6d4 <__assert_fail@plt+0xdfd4>
   1edec:	cmn	sl, #1
   1edf0:	mov	r0, sl
   1edf4:	moveq	r0, r8
   1edf8:	cmp	r0, #32768	; 0x8000
   1edfc:	bge	1f8a4 <__assert_fail@plt+0xe1a4>
   1ee00:	mov	r0, lr
   1ee04:	mov	r1, r5
   1ee08:	mov	r2, ip
   1ee0c:	bl	1ccd8 <__assert_fail@plt+0xb5d8>
   1ee10:	ldr	r1, [r5, #40]	; 0x28
   1ee14:	mov	r7, #0
   1ee18:	cmp	r9, #0
   1ee1c:	add	r0, r1, r0
   1ee20:	str	r0, [r5, #40]	; 0x28
   1ee24:	beq	1f2d0 <__assert_fail@plt+0xdbd0>
   1ee28:	ldr	ip, [sp, #48]	; 0x30
   1ee2c:	orrs	r0, sl, r8
   1ee30:	beq	1f2ec <__assert_fail@plt+0xdbec>
   1ee34:	mov	r0, #0
   1ee38:	cmp	r8, #1
   1ee3c:	mov	r7, r9
   1ee40:	str	r0, [sp, #36]	; 0x24
   1ee44:	ldr	lr, [sp, #44]	; 0x2c
   1ee48:	ldr	r5, [sp, #24]
   1ee4c:	bge	1f3b0 <__assert_fail@plt+0xdcb0>
   1ee50:	ldrb	r0, [r7, #24]
   1ee54:	cmp	r0, #17
   1ee58:	bne	1eecc <__assert_fail@plt+0xd7cc>
   1ee5c:	ldr	r0, [r7, #20]
   1ee60:	mov	r2, r7
   1ee64:	mov	r1, r2
   1ee68:	ldr	r2, [r2, #4]
   1ee6c:	cmp	r2, #0
   1ee70:	bne	1ee64 <__assert_fail@plt+0xd764>
   1ee74:	ldr	r2, [r1, #8]
   1ee78:	cmp	r2, #0
   1ee7c:	bne	1ee64 <__assert_fail@plt+0xd764>
   1ee80:	ldr	r2, [r1, #24]
   1ee84:	uxtb	r3, r2
   1ee88:	cmp	r3, #17
   1ee8c:	bne	1eea0 <__assert_fail@plt+0xd7a0>
   1ee90:	ldr	r3, [r1, #20]
   1ee94:	cmp	r3, r0
   1ee98:	orreq	r2, r2, #524288	; 0x80000
   1ee9c:	streq	r2, [r1, #24]
   1eea0:	ldr	r3, [r1]
   1eea4:	cmp	r3, #0
   1eea8:	beq	1eecc <__assert_fail@plt+0xd7cc>
   1eeac:	ldr	r2, [r3, #8]
   1eeb0:	cmp	r2, r1
   1eeb4:	mov	r1, r3
   1eeb8:	beq	1ee80 <__assert_fail@plt+0xd780>
   1eebc:	cmp	r2, #0
   1eec0:	mov	r1, r3
   1eec4:	beq	1ee80 <__assert_fail@plt+0xd780>
   1eec8:	b	1ee64 <__assert_fail@plt+0xd764>
   1eecc:	ldr	r1, [r5]
   1eed0:	cmn	sl, #1
   1eed4:	mov	r6, #10
   1eed8:	movweq	r6, #11
   1eedc:	cmp	r1, #31
   1eee0:	beq	1f678 <__assert_fail@plt+0xdf78>
   1eee4:	ldr	r0, [sp, #60]	; 0x3c
   1eee8:	ldr	r0, [r0]
   1eeec:	add	r9, r0, r1, lsl #5
   1eef0:	add	r2, r1, #1
   1eef4:	mvn	r0, #0
   1eef8:	str	r2, [r5]
   1eefc:	str	r4, [r9, #4]!
   1ef00:	str	r7, [r9, #4]
   1ef04:	str	r4, [r9, #8]
   1ef08:	str	r4, [r9, #12]
   1ef0c:	str	r4, [r9, #16]
   1ef10:	str	r4, [r9, #20]
   1ef14:	str	r6, [r9, #24]
   1ef18:	str	r0, [r9, #28]
   1ef1c:	add	r0, r8, #2
   1ef20:	str	r9, [r7]
   1ef24:	cmp	r0, sl
   1ef28:	bgt	1f228 <__assert_fail@plt+0xdb28>
   1ef2c:	str	sl, [sp, #52]	; 0x34
   1ef30:	mov	sl, r9
   1ef34:	ldr	r1, [r5]
   1ef38:	str	r0, [sp, #56]	; 0x38
   1ef3c:	cmp	r1, #31
   1ef40:	beq	1f160 <__assert_fail@plt+0xda60>
   1ef44:	ldr	r0, [sp, #60]	; 0x3c
   1ef48:	ldr	r0, [r0]
   1ef4c:	add	r8, r0, r1, lsl #5
   1ef50:	add	r3, r1, #1
   1ef54:	add	r2, r7, #20
   1ef58:	sub	r6, fp, #80	; 0x50
   1ef5c:	str	r3, [r5]
   1ef60:	str	r4, [r8, #4]!
   1ef64:	str	r4, [r8, #8]
   1ef68:	str	r4, [r8, #4]
   1ef6c:	ldm	r2, {r0, r1}
   1ef70:	mvn	r2, #0
   1ef74:	str	r2, [r8, #28]
   1ef78:	str	r4, [r8, #16]
   1ef7c:	str	r4, [r8, #12]
   1ef80:	str	r0, [r8, #20]
   1ef84:	bic	r0, r1, #786432	; 0xc0000
   1ef88:	str	r0, [r8, #24]
   1ef8c:	mov	r0, r8
   1ef90:	str	r8, [fp, #-80]	; 0xffffffb0
   1ef94:	str	r9, [r0]
   1ef98:	ldr	r0, [r6]
   1ef9c:	ldr	r1, [r0, #24]
   1efa0:	orr	r1, r1, #262144	; 0x40000
   1efa4:	str	r1, [r0, #24]
   1efa8:	ldr	r0, [r7, #4]
   1efac:	ldr	r9, [r6]
   1efb0:	cmp	r0, #0
   1efb4:	beq	1f018 <__assert_fail@plt+0xd918>
   1efb8:	add	r6, r9, #4
   1efbc:	mov	r7, r0
   1efc0:	ldr	r1, [r5]
   1efc4:	cmp	r1, #31
   1efc8:	beq	1f058 <__assert_fail@plt+0xd958>
   1efcc:	ldr	r0, [sp, #60]	; 0x3c
   1efd0:	ldr	r0, [r0]
   1efd4:	add	r0, r0, r1, lsl #5
   1efd8:	add	r3, r1, #1
   1efdc:	add	r2, r7, #20
   1efe0:	str	r3, [r5]
   1efe4:	mvn	r3, #0
   1efe8:	str	r4, [r0, #4]!
   1efec:	str	r4, [r0, #8]
   1eff0:	str	r4, [r0, #4]
   1eff4:	ldm	r2, {r1, r2}
   1eff8:	str	r3, [r0, #28]
   1effc:	str	r4, [r0, #16]
   1f000:	str	r4, [r0, #12]
   1f004:	str	r1, [r0, #20]
   1f008:	bic	r1, r2, #786432	; 0xc0000
   1f00c:	str	r1, [r0, #24]
   1f010:	str	r0, [r6]
   1f014:	b	1ef94 <__assert_fail@plt+0xd894>
   1f018:	mov	r1, #0
   1f01c:	mov	r0, r7
   1f020:	ldr	r7, [r7, #8]
   1f024:	cmp	r7, r1
   1f028:	cmpne	r7, #0
   1f02c:	bne	1f048 <__assert_fail@plt+0xd948>
   1f030:	ldr	r7, [r0]
   1f034:	ldr	r9, [r9]
   1f038:	mov	r1, r0
   1f03c:	cmp	r7, #0
   1f040:	bne	1f01c <__assert_fail@plt+0xd91c>
   1f044:	b	1f08c <__assert_fail@plt+0xd98c>
   1f048:	add	r6, r9, #8
   1f04c:	ldr	r1, [r5]
   1f050:	cmp	r1, #31
   1f054:	bne	1efcc <__assert_fail@plt+0xd8cc>
   1f058:	mov	r0, #996	; 0x3e4
   1f05c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f060:	cmp	r0, #0
   1f064:	beq	1f1d4 <__assert_fail@plt+0xdad4>
   1f068:	ldr	r2, [sp, #60]	; 0x3c
   1f06c:	ldr	ip, [sp, #48]	; 0x30
   1f070:	ldr	lr, [sp, #44]	; 0x2c
   1f074:	ldr	r1, [r2]
   1f078:	str	r1, [r0]
   1f07c:	mov	r1, #0
   1f080:	str	r0, [r2]
   1f084:	str	r1, [r5]
   1f088:	b	1efd4 <__assert_fail@plt+0xd8d4>
   1f08c:	mov	r7, r8
   1f090:	ldr	r1, [r5]
   1f094:	cmp	r1, #31
   1f098:	beq	1f1f0 <__assert_fail@plt+0xdaf0>
   1f09c:	ldr	r0, [sp, #60]	; 0x3c
   1f0a0:	ldr	r0, [r0]
   1f0a4:	add	r6, r0, r1, lsl #5
   1f0a8:	add	r2, r1, #1
   1f0ac:	mov	r0, #16
   1f0b0:	cmp	r7, #0
   1f0b4:	str	r2, [r5]
   1f0b8:	str	r4, [r6, #4]!
   1f0bc:	str	sl, [r6, #4]
   1f0c0:	str	r7, [r6, #8]
   1f0c4:	str	r4, [r6, #12]
   1f0c8:	str	r4, [r6, #16]
   1f0cc:	str	r4, [r6, #20]
   1f0d0:	str	r0, [r6, #24]
   1f0d4:	mvn	r0, #0
   1f0d8:	str	r0, [r6, #28]
   1f0dc:	str	r6, [sl]
   1f0e0:	beq	1f94c <__assert_fail@plt+0xe24c>
   1f0e4:	str	r6, [r7]
   1f0e8:	ldr	r1, [r5]
   1f0ec:	cmp	r1, #31
   1f0f0:	beq	1f194 <__assert_fail@plt+0xda94>
   1f0f4:	ldr	r0, [sp, #60]	; 0x3c
   1f0f8:	ldr	r0, [r0]
   1f0fc:	add	sl, r0, r1, lsl #5
   1f100:	add	r2, r1, #1
   1f104:	mov	r0, #10
   1f108:	ldr	r1, [sp, #56]	; 0x38
   1f10c:	str	r2, [r5]
   1f110:	str	r4, [sl, #4]!
   1f114:	str	r6, [sl, #4]
   1f118:	str	r4, [sl, #8]
   1f11c:	str	r4, [sl, #12]
   1f120:	str	r4, [sl, #16]
   1f124:	str	r4, [sl, #20]
   1f128:	str	r0, [sl, #24]
   1f12c:	mvn	r0, #0
   1f130:	str	r0, [sl, #28]
   1f134:	ldr	r0, [sp, #52]	; 0x34
   1f138:	str	sl, [r6]
   1f13c:	cmp	r1, r0
   1f140:	bge	1f224 <__assert_fail@plt+0xdb24>
   1f144:	ldr	r9, [r7]
   1f148:	mov	r0, r1
   1f14c:	add	r0, r1, #1
   1f150:	ldr	r1, [r5]
   1f154:	str	r0, [sp, #56]	; 0x38
   1f158:	cmp	r1, #31
   1f15c:	bne	1ef44 <__assert_fail@plt+0xd844>
   1f160:	mov	r0, #996	; 0x3e4
   1f164:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f168:	cmp	r0, #0
   1f16c:	beq	1f1c8 <__assert_fail@plt+0xdac8>
   1f170:	ldr	r2, [sp, #60]	; 0x3c
   1f174:	ldr	ip, [sp, #48]	; 0x30
   1f178:	ldr	lr, [sp, #44]	; 0x2c
   1f17c:	ldr	r1, [r2]
   1f180:	str	r1, [r0]
   1f184:	mov	r1, #0
   1f188:	str	r0, [r2]
   1f18c:	str	r1, [r5]
   1f190:	b	1ef4c <__assert_fail@plt+0xd84c>
   1f194:	mov	r0, #996	; 0x3e4
   1f198:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f19c:	ldr	lr, [sp, #44]	; 0x2c
   1f1a0:	ldr	ip, [sp, #48]	; 0x30
   1f1a4:	cmp	r0, #0
   1f1a8:	beq	1f94c <__assert_fail@plt+0xe24c>
   1f1ac:	ldr	r2, [sp, #60]	; 0x3c
   1f1b0:	ldr	r1, [r2]
   1f1b4:	str	r1, [r0]
   1f1b8:	mov	r1, #0
   1f1bc:	str	r0, [r2]
   1f1c0:	str	r1, [r5]
   1f1c4:	b	1f0fc <__assert_fail@plt+0xd9fc>
   1f1c8:	mov	r7, #0
   1f1cc:	str	r7, [fp, #-80]	; 0xffffffb0
   1f1d0:	b	1f1dc <__assert_fail@plt+0xdadc>
   1f1d4:	mov	r7, #0
   1f1d8:	str	r7, [r6]
   1f1dc:	ldr	ip, [sp, #48]	; 0x30
   1f1e0:	ldr	lr, [sp, #44]	; 0x2c
   1f1e4:	ldr	r1, [r5]
   1f1e8:	cmp	r1, #31
   1f1ec:	bne	1f09c <__assert_fail@plt+0xd99c>
   1f1f0:	mov	r0, #996	; 0x3e4
   1f1f4:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f1f8:	ldr	lr, [sp, #44]	; 0x2c
   1f1fc:	ldr	ip, [sp, #48]	; 0x30
   1f200:	cmp	r0, #0
   1f204:	beq	1f94c <__assert_fail@plt+0xe24c>
   1f208:	ldr	r2, [sp, #60]	; 0x3c
   1f20c:	ldr	r1, [r2]
   1f210:	str	r1, [r0]
   1f214:	mov	r1, #0
   1f218:	str	r0, [r2]
   1f21c:	str	r1, [r5]
   1f220:	b	1f0a4 <__assert_fail@plt+0xd9a4>
   1f224:	mov	r9, sl
   1f228:	ldr	r6, [sp, #36]	; 0x24
   1f22c:	ldr	r8, [sp, #28]
   1f230:	cmp	r6, #0
   1f234:	beq	1f28c <__assert_fail@plt+0xdb8c>
   1f238:	ldr	r1, [r5]
   1f23c:	cmp	r1, #31
   1f240:	beq	1f6e0 <__assert_fail@plt+0xdfe0>
   1f244:	ldr	r0, [sp, #60]	; 0x3c
   1f248:	ldr	r0, [r0]
   1f24c:	add	r7, r0, r1, lsl #5
   1f250:	add	r2, r1, #1
   1f254:	mov	r0, #0
   1f258:	mov	r1, #16
   1f25c:	str	r2, [r5]
   1f260:	str	r0, [r7, #4]!
   1f264:	stmib	r7, {r6, r9}
   1f268:	str	r0, [r7, #12]
   1f26c:	str	r0, [r7, #16]
   1f270:	str	r0, [r7, #20]
   1f274:	str	r1, [r7, #24]
   1f278:	mvn	r1, #0
   1f27c:	str	r1, [r7, #28]
   1f280:	str	r7, [r6]
   1f284:	str	r7, [r9]
   1f288:	b	1f294 <__assert_fail@plt+0xdb94>
   1f28c:	mov	r0, #0
   1f290:	mov	r7, r9
   1f294:	mov	r5, r8
   1f298:	ldr	r1, [sp, #32]
   1f29c:	cmp	r1, #0
   1f2a0:	beq	1eb54 <__assert_fail@plt+0xd454>
   1f2a4:	b	1eb44 <__assert_fail@plt+0xd444>
   1f2a8:	ldr	ip, [sp, #48]	; 0x30
   1f2ac:	ldr	r1, [sp, #16]
   1f2b0:	cmp	r1, #0
   1f2b4:	bne	1ecc0 <__assert_fail@plt+0xd5c0>
   1f2b8:	ldr	r1, [sp, #20]
   1f2bc:	cmp	r0, #2
   1f2c0:	mov	r0, #10
   1f2c4:	movweq	r0, #9
   1f2c8:	str	r0, [r1]
   1f2cc:	b	1ec74 <__assert_fail@plt+0xd574>
   1f2d0:	ldr	ip, [sp, #48]	; 0x30
   1f2d4:	ldr	lr, [sp, #44]	; 0x2c
   1f2d8:	clz	r0, r7
   1f2dc:	cmp	r7, #0
   1f2e0:	lsr	r0, r0, #5
   1f2e4:	beq	1f974 <__assert_fail@plt+0xe274>
   1f2e8:	b	1f984 <__assert_fail@plt+0xe284>
   1f2ec:	ldr	lr, [sp, #44]	; 0x2c
   1f2f0:	mov	r0, r9
   1f2f4:	mov	r6, r0
   1f2f8:	ldr	r0, [r0, #4]
   1f2fc:	cmp	r0, #0
   1f300:	bne	1f2f4 <__assert_fail@plt+0xdbf4>
   1f304:	ldr	r0, [r6, #8]
   1f308:	cmp	r0, #0
   1f30c:	bne	1f2f4 <__assert_fail@plt+0xdbf4>
   1f310:	ldr	r0, [r6, #24]
   1f314:	movw	r1, #255	; 0xff
   1f318:	movt	r1, #4
   1f31c:	and	r0, r0, r1
   1f320:	cmp	r0, #3
   1f324:	beq	1f358 <__assert_fail@plt+0xdc58>
   1f328:	cmp	r0, #6
   1f32c:	bne	1f36c <__assert_fail@plt+0xdc6c>
   1f330:	ldr	r5, [r6, #20]
   1f334:	ldr	r0, [r5]
   1f338:	bl	13ddc <__assert_fail@plt+0x26dc>
   1f33c:	ldr	r0, [r5, #4]
   1f340:	bl	13ddc <__assert_fail@plt+0x26dc>
   1f344:	ldr	r0, [r5, #8]
   1f348:	bl	13ddc <__assert_fail@plt+0x26dc>
   1f34c:	ldr	r0, [r5, #12]
   1f350:	bl	13ddc <__assert_fail@plt+0x26dc>
   1f354:	b	1f35c <__assert_fail@plt+0xdc5c>
   1f358:	ldr	r5, [r6, #20]
   1f35c:	mov	r0, r5
   1f360:	bl	13ddc <__assert_fail@plt+0x26dc>
   1f364:	ldr	ip, [sp, #48]	; 0x30
   1f368:	ldr	lr, [sp, #44]	; 0x2c
   1f36c:	ldr	r1, [r6]
   1f370:	cmp	r1, #0
   1f374:	beq	1f398 <__assert_fail@plt+0xdc98>
   1f378:	ldr	r0, [r1, #8]
   1f37c:	cmp	r0, r6
   1f380:	mov	r6, r1
   1f384:	beq	1f310 <__assert_fail@plt+0xdc10>
   1f388:	cmp	r0, #0
   1f38c:	mov	r6, r1
   1f390:	beq	1f310 <__assert_fail@plt+0xdc10>
   1f394:	b	1f2f4 <__assert_fail@plt+0xdbf4>
   1f398:	ldr	r5, [sp, #28]
   1f39c:	clz	r0, r7
   1f3a0:	cmp	r7, #0
   1f3a4:	lsr	r0, r0, #5
   1f3a8:	beq	1f974 <__assert_fail@plt+0xe274>
   1f3ac:	b	1f984 <__assert_fail@plt+0xe284>
   1f3b0:	mov	r3, r9
   1f3b4:	str	sl, [sp, #52]	; 0x34
   1f3b8:	str	r9, [sp, #36]	; 0x24
   1f3bc:	beq	1f6ac <__assert_fail@plt+0xdfac>
   1f3c0:	ldr	sl, [sp, #40]	; 0x28
   1f3c4:	ldr	r0, [sl]
   1f3c8:	mov	r3, sl
   1f3cc:	str	r0, [sp, #36]	; 0x24
   1f3d0:	mov	r0, #2
   1f3d4:	ldr	r1, [r5]
   1f3d8:	str	r0, [sp, #56]	; 0x38
   1f3dc:	cmp	r1, #31
   1f3e0:	beq	1f5bc <__assert_fail@plt+0xdebc>
   1f3e4:	ldr	r0, [sp, #60]	; 0x3c
   1f3e8:	ldr	r0, [r0]
   1f3ec:	add	r6, r0, r1, lsl #5
   1f3f0:	add	r2, r3, #20
   1f3f4:	mov	r9, r3
   1f3f8:	add	r3, r1, #1
   1f3fc:	sub	r7, fp, #80	; 0x50
   1f400:	str	r3, [r5]
   1f404:	str	r4, [r6, #4]!
   1f408:	str	r4, [r6, #8]
   1f40c:	str	r4, [r6, #4]
   1f410:	ldm	r2, {r0, r1}
   1f414:	mvn	r2, #0
   1f418:	str	r2, [r6, #28]
   1f41c:	str	r4, [r6, #16]
   1f420:	str	r4, [r6, #12]
   1f424:	str	r0, [r6, #20]
   1f428:	bic	r0, r1, #786432	; 0xc0000
   1f42c:	str	r0, [r6, #24]
   1f430:	mov	r0, r6
   1f434:	str	r6, [fp, #-80]	; 0xffffffb0
   1f438:	ldr	r1, [sp, #36]	; 0x24
   1f43c:	str	r1, [r0]
   1f440:	ldr	r0, [r7]
   1f444:	ldr	r1, [r0, #24]
   1f448:	orr	r1, r1, #262144	; 0x40000
   1f44c:	str	r1, [r0, #24]
   1f450:	ldr	r0, [r9, #4]
   1f454:	ldr	r1, [r7]
   1f458:	cmp	r0, #0
   1f45c:	str	r1, [sp, #36]	; 0x24
   1f460:	beq	1f4c4 <__assert_fail@plt+0xddc4>
   1f464:	add	r7, r1, #4
   1f468:	mov	r9, r0
   1f46c:	ldr	r1, [r5]
   1f470:	cmp	r1, #31
   1f474:	beq	1f510 <__assert_fail@plt+0xde10>
   1f478:	ldr	r0, [sp, #60]	; 0x3c
   1f47c:	ldr	r0, [r0]
   1f480:	add	r0, r0, r1, lsl #5
   1f484:	add	r3, r1, #1
   1f488:	add	r2, r9, #20
   1f48c:	str	r3, [r5]
   1f490:	mvn	r3, #0
   1f494:	str	r4, [r0, #4]!
   1f498:	str	r4, [r0, #8]
   1f49c:	str	r4, [r0, #4]
   1f4a0:	ldm	r2, {r1, r2}
   1f4a4:	str	r3, [r0, #28]
   1f4a8:	str	r4, [r0, #16]
   1f4ac:	str	r4, [r0, #12]
   1f4b0:	str	r1, [r0, #20]
   1f4b4:	bic	r1, r2, #786432	; 0xc0000
   1f4b8:	str	r1, [r0, #24]
   1f4bc:	str	r0, [r7]
   1f4c0:	b	1f438 <__assert_fail@plt+0xdd38>
   1f4c4:	mov	r1, #0
   1f4c8:	mov	r0, r9
   1f4cc:	ldr	r9, [r9, #8]
   1f4d0:	cmp	r9, r1
   1f4d4:	cmpne	r9, #0
   1f4d8:	bne	1f4fc <__assert_fail@plt+0xddfc>
   1f4dc:	ldr	r1, [sp, #36]	; 0x24
   1f4e0:	ldr	r9, [r0]
   1f4e4:	ldr	r1, [r1]
   1f4e8:	cmp	r9, #0
   1f4ec:	str	r1, [sp, #36]	; 0x24
   1f4f0:	mov	r1, r0
   1f4f4:	bne	1f4c8 <__assert_fail@plt+0xddc8>
   1f4f8:	b	1f544 <__assert_fail@plt+0xde44>
   1f4fc:	ldr	r0, [sp, #36]	; 0x24
   1f500:	add	r7, r0, #8
   1f504:	ldr	r1, [r5]
   1f508:	cmp	r1, #31
   1f50c:	bne	1f478 <__assert_fail@plt+0xdd78>
   1f510:	mov	r0, #996	; 0x3e4
   1f514:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f518:	cmp	r0, #0
   1f51c:	beq	1f658 <__assert_fail@plt+0xdf58>
   1f520:	ldr	r2, [sp, #60]	; 0x3c
   1f524:	ldr	ip, [sp, #48]	; 0x30
   1f528:	ldr	lr, [sp, #44]	; 0x2c
   1f52c:	ldr	r1, [r2]
   1f530:	str	r1, [r0]
   1f534:	mov	r1, #0
   1f538:	str	r0, [r2]
   1f53c:	str	r1, [r5]
   1f540:	b	1f480 <__assert_fail@plt+0xdd80>
   1f544:	mov	r3, r6
   1f548:	ldr	r1, [r5]
   1f54c:	cmp	r1, #31
   1f550:	beq	1f61c <__assert_fail@plt+0xdf1c>
   1f554:	ldr	r0, [sp, #60]	; 0x3c
   1f558:	ldr	r0, [r0]
   1f55c:	add	r2, r1, #1
   1f560:	add	r1, r0, r1, lsl #5
   1f564:	mov	r0, #16
   1f568:	cmp	r3, #0
   1f56c:	str	r2, [r5]
   1f570:	str	r4, [r1, #4]!
   1f574:	str	sl, [r1, #4]
   1f578:	str	r3, [r1, #8]
   1f57c:	str	r4, [r1, #12]
   1f580:	str	r4, [r1, #16]
   1f584:	str	r4, [r1, #20]
   1f588:	str	r0, [r1, #24]
   1f58c:	mvn	r0, #0
   1f590:	str	r1, [sp, #36]	; 0x24
   1f594:	str	r0, [r1, #28]
   1f598:	str	r1, [sl]
   1f59c:	beq	1f94c <__assert_fail@plt+0xe24c>
   1f5a0:	ldr	r1, [sp, #56]	; 0x38
   1f5a4:	ldr	sl, [sp, #36]	; 0x24
   1f5a8:	add	r0, r1, #1
   1f5ac:	cmp	r1, r8
   1f5b0:	str	sl, [r3]
   1f5b4:	bne	1f3d4 <__assert_fail@plt+0xdcd4>
   1f5b8:	b	1f6ac <__assert_fail@plt+0xdfac>
   1f5bc:	mov	r0, #996	; 0x3e4
   1f5c0:	mov	r6, r3
   1f5c4:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f5c8:	cmp	r0, #0
   1f5cc:	beq	1f5fc <__assert_fail@plt+0xdefc>
   1f5d0:	ldr	r2, [sp, #60]	; 0x3c
   1f5d4:	ldr	r5, [sp, #24]
   1f5d8:	ldr	ip, [sp, #48]	; 0x30
   1f5dc:	ldr	lr, [sp, #44]	; 0x2c
   1f5e0:	mov	r3, r6
   1f5e4:	ldr	r1, [r2]
   1f5e8:	str	r1, [r0]
   1f5ec:	mov	r1, #0
   1f5f0:	str	r0, [r2]
   1f5f4:	str	r1, [r5]
   1f5f8:	b	1f3ec <__assert_fail@plt+0xdcec>
   1f5fc:	ldr	ip, [sp, #48]	; 0x30
   1f600:	ldr	lr, [sp, #44]	; 0x2c
   1f604:	ldr	r5, [sp, #24]
   1f608:	mov	r3, #0
   1f60c:	str	r3, [fp, #-80]	; 0xffffffb0
   1f610:	ldr	r1, [r5]
   1f614:	cmp	r1, #31
   1f618:	bne	1f554 <__assert_fail@plt+0xde54>
   1f61c:	mov	r0, #996	; 0x3e4
   1f620:	mov	r6, r3
   1f624:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f628:	ldr	lr, [sp, #44]	; 0x2c
   1f62c:	ldr	ip, [sp, #48]	; 0x30
   1f630:	cmp	r0, #0
   1f634:	beq	1f94c <__assert_fail@plt+0xe24c>
   1f638:	ldr	r2, [sp, #60]	; 0x3c
   1f63c:	mov	r3, r6
   1f640:	ldr	r1, [r2]
   1f644:	str	r1, [r0]
   1f648:	mov	r1, #0
   1f64c:	str	r0, [r2]
   1f650:	str	r1, [r5]
   1f654:	b	1f55c <__assert_fail@plt+0xde5c>
   1f658:	ldr	ip, [sp, #48]	; 0x30
   1f65c:	ldr	lr, [sp, #44]	; 0x2c
   1f660:	mov	r3, #0
   1f664:	str	r3, [r7]
   1f668:	ldr	r1, [r5]
   1f66c:	cmp	r1, #31
   1f670:	bne	1f554 <__assert_fail@plt+0xde54>
   1f674:	b	1f61c <__assert_fail@plt+0xdf1c>
   1f678:	mov	r0, #996	; 0x3e4
   1f67c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f680:	ldr	lr, [sp, #44]	; 0x2c
   1f684:	ldr	ip, [sp, #48]	; 0x30
   1f688:	cmp	r0, #0
   1f68c:	beq	1f94c <__assert_fail@plt+0xe24c>
   1f690:	ldr	r2, [sp, #60]	; 0x3c
   1f694:	ldr	r1, [r2]
   1f698:	str	r1, [r0]
   1f69c:	mov	r1, #0
   1f6a0:	str	r0, [r2]
   1f6a4:	str	r1, [r5]
   1f6a8:	b	1eeec <__assert_fail@plt+0xd7ec>
   1f6ac:	ldr	sl, [sp, #52]	; 0x34
   1f6b0:	mov	r0, #0
   1f6b4:	cmp	r8, sl
   1f6b8:	bne	1f72c <__assert_fail@plt+0xe02c>
   1f6bc:	ldr	r7, [sp, #36]	; 0x24
   1f6c0:	ldr	r5, [sp, #28]
   1f6c4:	ldr	r1, [sp, #32]
   1f6c8:	cmp	r1, #0
   1f6cc:	beq	1eb54 <__assert_fail@plt+0xd454>
   1f6d0:	b	1eb44 <__assert_fail@plt+0xd444>
   1f6d4:	ldr	r0, [sp, #20]
   1f6d8:	mov	r1, #10
   1f6dc:	b	1f8ac <__assert_fail@plt+0xe1ac>
   1f6e0:	mov	r0, #996	; 0x3e4
   1f6e4:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f6e8:	cmp	r0, #0
   1f6ec:	beq	1f8c8 <__assert_fail@plt+0xe1c8>
   1f6f0:	ldr	r2, [sp, #60]	; 0x3c
   1f6f4:	ldr	ip, [sp, #48]	; 0x30
   1f6f8:	ldr	lr, [sp, #44]	; 0x2c
   1f6fc:	ldr	r1, [r2]
   1f700:	str	r1, [r0]
   1f704:	mov	r1, #0
   1f708:	str	r0, [r2]
   1f70c:	str	r1, [r5]
   1f710:	b	1f24c <__assert_fail@plt+0xdb4c>
   1f714:	ldr	ip, [sp, #48]	; 0x30
   1f718:	ldr	r9, [sp, #56]	; 0x38
   1f71c:	ldr	r1, [sp, #16]
   1f720:	cmp	r1, #0
   1f724:	bne	1ecc0 <__assert_fail@plt+0xd5c0>
   1f728:	b	1f2b8 <__assert_fail@plt+0xdbb8>
   1f72c:	mov	r6, r3
   1f730:	ldr	r1, [r5]
   1f734:	ldr	r9, [r6], #20
   1f738:	cmp	r1, #31
   1f73c:	beq	1f8f0 <__assert_fail@plt+0xe1f0>
   1f740:	ldr	r0, [sp, #60]	; 0x3c
   1f744:	ldr	r0, [r0]
   1f748:	add	r7, r0, r1, lsl #5
   1f74c:	add	r2, r1, #1
   1f750:	str	r2, [r5]
   1f754:	mvn	r2, #0
   1f758:	str	r4, [r7, #4]!
   1f75c:	str	r4, [r7, #8]
   1f760:	str	r4, [r7, #4]
   1f764:	ldm	r6, {r0, r1}
   1f768:	str	r2, [r7, #28]
   1f76c:	str	r4, [r7, #16]
   1f770:	str	r4, [r7, #12]
   1f774:	sub	r6, fp, #80	; 0x50
   1f778:	str	r0, [r7, #20]
   1f77c:	bic	r0, r1, #786432	; 0xc0000
   1f780:	str	r0, [r7, #24]
   1f784:	mov	r0, r7
   1f788:	str	r7, [fp, #-80]	; 0xffffffb0
   1f78c:	str	r9, [r0]
   1f790:	ldr	r0, [r6]
   1f794:	ldr	r1, [r0, #24]
   1f798:	orr	r1, r1, #262144	; 0x40000
   1f79c:	str	r1, [r0, #24]
   1f7a0:	ldr	r0, [r3, #4]
   1f7a4:	ldr	r9, [r6]
   1f7a8:	cmp	r0, #0
   1f7ac:	beq	1f81c <__assert_fail@plt+0xe11c>
   1f7b0:	add	r2, r9, #4
   1f7b4:	mov	r6, r0
   1f7b8:	ldr	r1, [r5]
   1f7bc:	str	r2, [sp, #56]	; 0x38
   1f7c0:	cmp	r1, #31
   1f7c4:	beq	1f860 <__assert_fail@plt+0xe160>
   1f7c8:	ldr	r0, [sp, #60]	; 0x3c
   1f7cc:	ldr	r0, [r0]
   1f7d0:	add	r0, r0, r1, lsl #5
   1f7d4:	add	r3, r1, #1
   1f7d8:	add	r2, r6, #20
   1f7dc:	str	r3, [r5]
   1f7e0:	mvn	r3, #0
   1f7e4:	str	r4, [r0, #4]!
   1f7e8:	str	r4, [r0, #8]
   1f7ec:	str	r4, [r0, #4]
   1f7f0:	ldm	r2, {r1, r2}
   1f7f4:	str	r3, [r0, #28]
   1f7f8:	mov	r3, r6
   1f7fc:	ldr	r6, [sp, #56]	; 0x38
   1f800:	str	r4, [r0, #16]
   1f804:	str	r4, [r0, #12]
   1f808:	str	r1, [r0, #20]
   1f80c:	bic	r1, r2, #786432	; 0xc0000
   1f810:	str	r1, [r0, #24]
   1f814:	str	r0, [r6]
   1f818:	b	1f78c <__assert_fail@plt+0xe08c>
   1f81c:	mov	r1, #0
   1f820:	ldr	r6, [r3, #8]
   1f824:	mov	r0, r3
   1f828:	cmp	r6, r1
   1f82c:	cmpne	r6, #0
   1f830:	bne	1f84c <__assert_fail@plt+0xe14c>
   1f834:	ldr	r3, [r0]
   1f838:	ldr	r9, [r9]
   1f83c:	mov	r1, r0
   1f840:	cmp	r3, #0
   1f844:	bne	1f820 <__assert_fail@plt+0xe120>
   1f848:	b	1ee50 <__assert_fail@plt+0xd750>
   1f84c:	add	r2, r9, #8
   1f850:	ldr	r1, [r5]
   1f854:	str	r2, [sp, #56]	; 0x38
   1f858:	cmp	r1, #31
   1f85c:	bne	1f7c8 <__assert_fail@plt+0xe0c8>
   1f860:	mov	r0, #996	; 0x3e4
   1f864:	str	r6, [sp, #12]
   1f868:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f86c:	cmp	r0, #0
   1f870:	beq	1f93c <__assert_fail@plt+0xe23c>
   1f874:	ldr	r2, [sp, #60]	; 0x3c
   1f878:	ldr	r5, [sp, #24]
   1f87c:	ldr	ip, [sp, #48]	; 0x30
   1f880:	ldr	lr, [sp, #44]	; 0x2c
   1f884:	ldr	sl, [sp, #52]	; 0x34
   1f888:	ldr	r6, [sp, #12]
   1f88c:	ldr	r1, [r2]
   1f890:	str	r1, [r0]
   1f894:	mov	r1, #0
   1f898:	str	r0, [r2]
   1f89c:	str	r1, [r5]
   1f8a0:	b	1f7d0 <__assert_fail@plt+0xe0d0>
   1f8a4:	ldr	r0, [sp, #20]
   1f8a8:	mov	r1, #15
   1f8ac:	str	r1, [r0]
   1f8b0:	mov	r7, #0
   1f8b4:	clz	r0, r7
   1f8b8:	cmp	r7, #0
   1f8bc:	lsr	r0, r0, #5
   1f8c0:	beq	1f974 <__assert_fail@plt+0xe274>
   1f8c4:	b	1f984 <__assert_fail@plt+0xe284>
   1f8c8:	ldr	ip, [sp, #48]	; 0x30
   1f8cc:	ldr	lr, [sp, #44]	; 0x2c
   1f8d0:	ldr	r9, [sp, #40]	; 0x28
   1f8d4:	mov	r7, #0
   1f8d8:	mov	r5, r8
   1f8dc:	clz	r0, r7
   1f8e0:	cmp	r7, #0
   1f8e4:	lsr	r0, r0, #5
   1f8e8:	beq	1f974 <__assert_fail@plt+0xe274>
   1f8ec:	b	1f984 <__assert_fail@plt+0xe284>
   1f8f0:	mov	r0, #996	; 0x3e4
   1f8f4:	mov	r7, r3
   1f8f8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1f8fc:	cmp	r0, #0
   1f900:	beq	1f934 <__assert_fail@plt+0xe234>
   1f904:	ldr	r2, [sp, #60]	; 0x3c
   1f908:	ldr	r5, [sp, #24]
   1f90c:	ldr	ip, [sp, #48]	; 0x30
   1f910:	ldr	lr, [sp, #44]	; 0x2c
   1f914:	ldr	sl, [sp, #52]	; 0x34
   1f918:	mov	r3, r7
   1f91c:	ldr	r1, [r2]
   1f920:	str	r1, [r0]
   1f924:	mov	r1, #0
   1f928:	str	r0, [r2]
   1f92c:	str	r1, [r5]
   1f930:	b	1f748 <__assert_fail@plt+0xe048>
   1f934:	str	r4, [fp, #-80]	; 0xffffffb0
   1f938:	b	1f944 <__assert_fail@plt+0xe244>
   1f93c:	ldr	r0, [sp, #56]	; 0x38
   1f940:	str	r4, [r0]
   1f944:	ldr	ip, [sp, #48]	; 0x30
   1f948:	ldr	lr, [sp, #44]	; 0x2c
   1f94c:	ldr	r0, [sp, #20]
   1f950:	ldr	r5, [sp, #28]
   1f954:	ldr	r9, [sp, #40]	; 0x28
   1f958:	mov	r1, #12
   1f95c:	mov	r7, #0
   1f960:	str	r1, [r0]
   1f964:	clz	r0, r7
   1f968:	cmp	r7, #0
   1f96c:	lsr	r0, r0, #5
   1f970:	bne	1f984 <__assert_fail@plt+0xe284>
   1f974:	ldr	r1, [sp, #20]
   1f978:	ldr	r1, [r1]
   1f97c:	cmp	r1, #0
   1f980:	bne	1fa54 <__assert_fail@plt+0xe354>
   1f984:	ldr	r1, [sp, #32]
   1f988:	cmp	r1, #0
   1f98c:	beq	1eb54 <__assert_fail@plt+0xd454>
   1f990:	b	1eb44 <__assert_fail@plt+0xd444>
   1f994:	movw	r6, #255	; 0xff
   1f998:	cmp	r0, #0
   1f99c:	movt	r6, #4
   1f9a0:	bne	1fa38 <__assert_fail@plt+0xe338>
   1f9a4:	mov	r5, r7
   1f9a8:	ldr	r7, [r7, #4]
   1f9ac:	cmp	r7, #0
   1f9b0:	bne	1f9a4 <__assert_fail@plt+0xe2a4>
   1f9b4:	ldr	r7, [r5, #8]
   1f9b8:	cmp	r7, #0
   1f9bc:	bne	1f9a4 <__assert_fail@plt+0xe2a4>
   1f9c0:	ldr	r0, [r5, #24]
   1f9c4:	and	r0, r0, r6
   1f9c8:	cmp	r0, #3
   1f9cc:	beq	1fa00 <__assert_fail@plt+0xe300>
   1f9d0:	cmp	r0, #6
   1f9d4:	bne	1fa0c <__assert_fail@plt+0xe30c>
   1f9d8:	ldr	r4, [r5, #20]
   1f9dc:	ldr	r0, [r4]
   1f9e0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1f9e4:	ldr	r0, [r4, #4]
   1f9e8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1f9ec:	ldr	r0, [r4, #8]
   1f9f0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1f9f4:	ldr	r0, [r4, #12]
   1f9f8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1f9fc:	b	1fa04 <__assert_fail@plt+0xe304>
   1fa00:	ldr	r4, [r5, #20]
   1fa04:	mov	r0, r4
   1fa08:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fa0c:	ldr	r0, [r5]
   1fa10:	cmp	r0, #0
   1fa14:	beq	1fa38 <__assert_fail@plt+0xe338>
   1fa18:	ldr	r7, [r0, #8]
   1fa1c:	cmp	r7, r5
   1fa20:	mov	r5, r0
   1fa24:	beq	1f9c0 <__assert_fail@plt+0xe2c0>
   1fa28:	cmp	r7, #0
   1fa2c:	mov	r5, r0
   1fa30:	beq	1f9c0 <__assert_fail@plt+0xe2c0>
   1fa34:	b	1f9a4 <__assert_fail@plt+0xe2a4>
   1fa38:	mov	r0, #13
   1fa3c:	ldr	r1, [sp, #20]
   1fa40:	mov	r9, #0
   1fa44:	str	r0, [r1]
   1fa48:	mov	r0, r9
   1fa4c:	sub	sp, fp, #28
   1fa50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa54:	cmp	r9, #0
   1fa58:	beq	1e01c <__assert_fail@plt+0xc91c>
   1fa5c:	movw	r6, #255	; 0xff
   1fa60:	movt	r6, #4
   1fa64:	mov	r5, r9
   1fa68:	ldr	r9, [r9, #4]
   1fa6c:	cmp	r9, #0
   1fa70:	bne	1fa64 <__assert_fail@plt+0xe364>
   1fa74:	ldr	r9, [r5, #8]
   1fa78:	cmp	r9, #0
   1fa7c:	bne	1fa64 <__assert_fail@plt+0xe364>
   1fa80:	ldr	r0, [r5, #24]
   1fa84:	and	r0, r0, r6
   1fa88:	cmp	r0, #3
   1fa8c:	beq	1fac0 <__assert_fail@plt+0xe3c0>
   1fa90:	cmp	r0, #6
   1fa94:	bne	1facc <__assert_fail@plt+0xe3cc>
   1fa98:	ldr	r4, [r5, #20]
   1fa9c:	ldr	r0, [r4]
   1faa0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1faa4:	ldr	r0, [r4, #4]
   1faa8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1faac:	ldr	r0, [r4, #8]
   1fab0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fab4:	ldr	r0, [r4, #12]
   1fab8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fabc:	b	1fac4 <__assert_fail@plt+0xe3c4>
   1fac0:	ldr	r4, [r5, #20]
   1fac4:	mov	r0, r4
   1fac8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1facc:	ldr	r0, [r5]
   1fad0:	cmp	r0, #0
   1fad4:	beq	1e01c <__assert_fail@plt+0xc91c>
   1fad8:	ldr	r9, [r0, #8]
   1fadc:	cmp	r9, r5
   1fae0:	mov	r5, r0
   1fae4:	beq	1fa80 <__assert_fail@plt+0xe380>
   1fae8:	cmp	r9, #0
   1faec:	mov	r5, r0
   1faf0:	beq	1fa80 <__assert_fail@plt+0xe380>
   1faf4:	b	1fa64 <__assert_fail@plt+0xe364>
   1faf8:	cmp	r0, #2
   1fafc:	blt	1fb18 <__assert_fail@plt+0xe418>
   1fb00:	ldr	r0, [r7, #36]	; 0x24
   1fb04:	cmp	r0, #0
   1fb08:	bne	1e780 <__assert_fail@plt+0xd080>
   1fb0c:	ldrb	r0, [r7, #16]
   1fb10:	tst	r0, #1
   1fb14:	bne	1e780 <__assert_fail@plt+0xd080>
   1fb18:	ldr	r0, [r7]
   1fb1c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fb20:	ldr	r0, [r7, #4]
   1fb24:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fb28:	ldr	r0, [r7, #8]
   1fb2c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fb30:	ldr	r0, [r7, #12]
   1fb34:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fb38:	mov	r0, r7
   1fb3c:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fb40:	ldr	r1, [sl, #64]	; 0x40
   1fb44:	cmp	r1, #31
   1fb48:	beq	20080 <__assert_fail@plt+0xe980>
   1fb4c:	ldr	r0, [sl, #56]	; 0x38
   1fb50:	add	r0, r0, r1, lsl #5
   1fb54:	add	r2, r1, #1
   1fb58:	vmov.i32	q8, #0	; 0x00000000
   1fb5c:	ldr	ip, [sp, #48]	; 0x30
   1fb60:	ldr	lr, [sp, #44]	; 0x2c
   1fb64:	mov	r1, #3
   1fb68:	str	r2, [sl, #64]	; 0x40
   1fb6c:	mov	r2, #0
   1fb70:	add	r7, r0, #4
   1fb74:	str	r2, [r0, #20]
   1fb78:	str	r8, [r0, #24]
   1fb7c:	str	r1, [r0, #28]
   1fb80:	mov	r0, #28
   1fb84:	mov	r1, r7
   1fb88:	vst1.32	{d16-d17}, [r1], r0
   1fb8c:	mvn	r0, #0
   1fb90:	str	r0, [r1]
   1fb94:	b	1eae8 <__assert_fail@plt+0xd3e8>
   1fb98:	ldr	r8, [sp, #24]
   1fb9c:	ldr	r0, [sp, #20]
   1fba0:	ldr	r5, [sp, #28]
   1fba4:	ldr	sl, [sp, #52]	; 0x34
   1fba8:	ldr	r7, [sp, #60]	; 0x3c
   1fbac:	str	r9, [r0]
   1fbb0:	ldr	r4, [sp, #20]
   1fbb4:	mov	r0, r8
   1fbb8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fbbc:	ldr	r0, [r7]
   1fbc0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fbc4:	ldr	r0, [r7, #4]
   1fbc8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fbcc:	ldr	r0, [r7, #8]
   1fbd0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fbd4:	ldr	r0, [r7, #12]
   1fbd8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fbdc:	mov	r0, r7
   1fbe0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fbe4:	ldr	r0, [r4]
   1fbe8:	mov	r7, #0
   1fbec:	mov	r9, #0
   1fbf0:	cmp	r0, #0
   1fbf4:	ldr	ip, [sp, #48]	; 0x30
   1fbf8:	ldr	lr, [sp, #44]	; 0x2c
   1fbfc:	beq	1eae8 <__assert_fail@plt+0xd3e8>
   1fc00:	b	1fa48 <__assert_fail@plt+0xe348>
   1fc04:	mov	r0, #996	; 0x3e4
   1fc08:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fc0c:	cmp	r0, #0
   1fc10:	beq	1fe9c <__assert_fail@plt+0xe79c>
   1fc14:	ldr	r1, [sl, #56]	; 0x38
   1fc18:	ldr	r5, [sp, #28]
   1fc1c:	ldr	ip, [sp, #48]	; 0x30
   1fc20:	ldr	lr, [sp, #44]	; 0x2c
   1fc24:	str	r1, [r0]
   1fc28:	mov	r1, #0
   1fc2c:	str	r1, [sl, #64]	; 0x40
   1fc30:	str	r0, [sl, #56]	; 0x38
   1fc34:	b	1dabc <__assert_fail@plt+0xc3bc>
   1fc38:	mov	r9, r0
   1fc3c:	str	sl, [sp, #52]	; 0x34
   1fc40:	b	1fb9c <__assert_fail@plt+0xe49c>
   1fc44:	mov	r9, #7
   1fc48:	str	sl, [sp, #52]	; 0x34
   1fc4c:	b	1fb9c <__assert_fail@plt+0xe49c>
   1fc50:	ldr	r4, [sp, #20]
   1fc54:	ldr	r7, [sp, #60]	; 0x3c
   1fc58:	mov	r0, #2
   1fc5c:	str	r0, [r4]
   1fc60:	b	1fbb4 <__assert_fail@plt+0xe4b4>
   1fc64:	mov	r0, r8
   1fc68:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fc6c:	mov	r0, r7
   1fc70:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fc74:	b	1e9d4 <__assert_fail@plt+0xd2d4>
   1fc78:	mov	r0, #996	; 0x3e4
   1fc7c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fc80:	cmp	r0, #0
   1fc84:	beq	1fe9c <__assert_fail@plt+0xe79c>
   1fc88:	ldr	r1, [sl, #56]	; 0x38
   1fc8c:	ldr	r5, [sp, #28]
   1fc90:	ldr	ip, [sp, #48]	; 0x30
   1fc94:	ldr	lr, [sp, #44]	; 0x2c
   1fc98:	str	r1, [r0]
   1fc9c:	mov	r1, #0
   1fca0:	str	r1, [sl, #64]	; 0x40
   1fca4:	str	r0, [sl, #56]	; 0x38
   1fca8:	b	1dd08 <__assert_fail@plt+0xc608>
   1fcac:	mov	r0, #6
   1fcb0:	b	1e9d8 <__assert_fail@plt+0xd2d8>
   1fcb4:	mov	r0, #996	; 0x3e4
   1fcb8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fcbc:	cmp	r0, #0
   1fcc0:	beq	1fe9c <__assert_fail@plt+0xe79c>
   1fcc4:	ldr	r1, [sl, #56]	; 0x38
   1fcc8:	ldr	r5, [sp, #28]
   1fccc:	ldr	ip, [sp, #48]	; 0x30
   1fcd0:	ldr	lr, [sp, #44]	; 0x2c
   1fcd4:	str	r1, [r0]
   1fcd8:	mov	r1, #0
   1fcdc:	str	r1, [sl, #64]	; 0x40
   1fce0:	str	r0, [sl, #56]	; 0x38
   1fce4:	b	1df50 <__assert_fail@plt+0xc850>
   1fce8:	mov	r0, #996	; 0x3e4
   1fcec:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fcf0:	cmp	r0, #0
   1fcf4:	beq	1fe9c <__assert_fail@plt+0xe79c>
   1fcf8:	ldr	r1, [sl, #56]	; 0x38
   1fcfc:	ldr	r5, [sp, #28]
   1fd00:	ldr	ip, [sp, #48]	; 0x30
   1fd04:	ldr	lr, [sp, #44]	; 0x2c
   1fd08:	str	r1, [r0]
   1fd0c:	mov	r1, #0
   1fd10:	str	r1, [sl, #64]	; 0x40
   1fd14:	str	r0, [sl, #56]	; 0x38
   1fd18:	b	1def4 <__assert_fail@plt+0xc7f4>
   1fd1c:	mov	r0, #996	; 0x3e4
   1fd20:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fd24:	cmp	r0, #0
   1fd28:	beq	200b0 <__assert_fail@plt+0xe9b0>
   1fd2c:	ldr	r1, [sl, #56]	; 0x38
   1fd30:	ldr	ip, [sp, #48]	; 0x30
   1fd34:	ldr	lr, [sp, #44]	; 0x2c
   1fd38:	str	r1, [r0]
   1fd3c:	mov	r1, #0
   1fd40:	str	r1, [sl, #64]	; 0x40
   1fd44:	str	r0, [sl, #56]	; 0x38
   1fd48:	b	1e79c <__assert_fail@plt+0xd09c>
   1fd4c:	mov	r0, #996	; 0x3e4
   1fd50:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fd54:	cmp	r0, #0
   1fd58:	beq	200b0 <__assert_fail@plt+0xe9b0>
   1fd5c:	ldr	r1, [sl, #56]	; 0x38
   1fd60:	ldr	ip, [sp, #48]	; 0x30
   1fd64:	ldr	lr, [sp, #44]	; 0x2c
   1fd68:	str	r1, [r0]
   1fd6c:	mov	r1, #0
   1fd70:	str	r1, [sl, #64]	; 0x40
   1fd74:	str	r0, [sl, #56]	; 0x38
   1fd78:	b	1e848 <__assert_fail@plt+0xd148>
   1fd7c:	mov	r0, #996	; 0x3e4
   1fd80:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fd84:	cmp	r0, #0
   1fd88:	beq	200b0 <__assert_fail@plt+0xe9b0>
   1fd8c:	ldr	r1, [sl, #56]	; 0x38
   1fd90:	ldr	ip, [sp, #48]	; 0x30
   1fd94:	ldr	lr, [sp, #44]	; 0x2c
   1fd98:	str	r1, [r0]
   1fd9c:	mov	r1, #0
   1fda0:	str	r1, [sl, #64]	; 0x40
   1fda4:	str	r0, [sl, #56]	; 0x38
   1fda8:	b	1e894 <__assert_fail@plt+0xd194>
   1fdac:	str	sl, [sp, #52]	; 0x34
   1fdb0:	mov	r9, #3
   1fdb4:	b	1fb9c <__assert_fail@plt+0xe49c>
   1fdb8:	mov	r0, r8
   1fdbc:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fdc0:	ldr	lr, [sp, #44]	; 0x2c
   1fdc4:	ldr	ip, [sp, #48]	; 0x30
   1fdc8:	mov	r7, r4
   1fdcc:	b	1eae8 <__assert_fail@plt+0xd3e8>
   1fdd0:	mov	r0, #996	; 0x3e4
   1fdd4:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fdd8:	cmp	r0, #0
   1fddc:	beq	1fe9c <__assert_fail@plt+0xe79c>
   1fde0:	ldr	r1, [sl, #56]	; 0x38
   1fde4:	ldr	r5, [sp, #28]
   1fde8:	ldr	ip, [sp, #48]	; 0x30
   1fdec:	ldr	lr, [sp, #44]	; 0x2c
   1fdf0:	str	r1, [r0]
   1fdf4:	mov	r1, #0
   1fdf8:	str	r1, [sl, #64]	; 0x40
   1fdfc:	str	r0, [sl, #56]	; 0x38
   1fe00:	b	1eaa4 <__assert_fail@plt+0xd3a4>
   1fe04:	mov	r0, #996	; 0x3e4
   1fe08:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fe0c:	cmp	r0, #0
   1fe10:	beq	2004c <__assert_fail@plt+0xe94c>
   1fe14:	ldr	r1, [sl, #56]	; 0x38
   1fe18:	ldr	ip, [sp, #48]	; 0x30
   1fe1c:	ldr	lr, [sp, #44]	; 0x2c
   1fe20:	mov	r9, #0
   1fe24:	str	r1, [r0]
   1fe28:	mov	r1, #0
   1fe2c:	str	r1, [sl, #64]	; 0x40
   1fe30:	str	r0, [sl, #56]	; 0x38
   1fe34:	b	1dc00 <__assert_fail@plt+0xc500>
   1fe38:	mov	r0, #996	; 0x3e4
   1fe3c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fe40:	cmp	r0, #0
   1fe44:	beq	20058 <__assert_fail@plt+0xe958>
   1fe48:	ldr	r1, [sl, #56]	; 0x38
   1fe4c:	ldr	ip, [sp, #48]	; 0x30
   1fe50:	ldr	lr, [sp, #44]	; 0x2c
   1fe54:	mov	r9, #0
   1fe58:	str	r1, [r0]
   1fe5c:	mov	r1, #0
   1fe60:	str	r1, [sl, #64]	; 0x40
   1fe64:	str	r0, [sl, #56]	; 0x38
   1fe68:	b	1e8ec <__assert_fail@plt+0xd1ec>
   1fe6c:	mov	r0, #996	; 0x3e4
   1fe70:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1fe74:	cmp	r0, #0
   1fe78:	beq	1fe9c <__assert_fail@plt+0xe79c>
   1fe7c:	ldr	r1, [sl, #56]	; 0x38
   1fe80:	ldr	ip, [sp, #48]	; 0x30
   1fe84:	ldr	lr, [sp, #44]	; 0x2c
   1fe88:	str	r1, [r0]
   1fe8c:	mov	r1, #0
   1fe90:	str	r1, [sl, #64]	; 0x40
   1fe94:	str	r0, [sl, #56]	; 0x38
   1fe98:	b	1e9fc <__assert_fail@plt+0xd2fc>
   1fe9c:	mov	r0, #12
   1fea0:	b	1fa3c <__assert_fail@plt+0xe33c>
   1fea4:	mov	r4, #0
   1fea8:	mov	r5, #0
   1feac:	b	1feb8 <__assert_fail@plt+0xe7b8>
   1feb0:	mov	r5, #4
   1feb4:	mov	r4, #128	; 0x80
   1feb8:	bl	11598 <__ctype_b_loc@plt>
   1febc:	ldr	r0, [r0]
   1fec0:	ldr	ip, [sp, #48]	; 0x30
   1fec4:	ldr	lr, [sp, #44]	; 0x2c
   1fec8:	mov	r1, #1
   1fecc:	mov	r9, #0
   1fed0:	add	r7, r0, r4, lsl #1
   1fed4:	b	1feec <__assert_fail@plt+0xe7ec>
   1fed8:	add	r5, r5, #1
   1fedc:	add	r7, r7, #64	; 0x40
   1fee0:	add	r4, r4, #32
   1fee4:	cmp	r5, #8
   1fee8:	beq	1dbd4 <__assert_fail@plt+0xc4d4>
   1feec:	add	r0, sl, r5, lsl #2
   1fef0:	mov	r3, #0
   1fef4:	add	r2, r0, #96	; 0x60
   1fef8:	mov	r0, r7
   1fefc:	add	r6, r4, r3
   1ff00:	cmp	r6, #95	; 0x5f
   1ff04:	bne	1ff30 <__assert_fail@plt+0xe830>
   1ff08:	ldr	r6, [r2]
   1ff0c:	orr	r6, r6, r1, lsl r3
   1ff10:	str	r6, [r2]
   1ff14:	add	r3, r3, #1
   1ff18:	add	r0, r0, #2
   1ff1c:	cmp	r3, #32
   1ff20:	beq	1fed8 <__assert_fail@plt+0xe7d8>
   1ff24:	add	r6, r4, r3
   1ff28:	cmp	r6, #95	; 0x5f
   1ff2c:	beq	1ff08 <__assert_fail@plt+0xe808>
   1ff30:	ldrh	r6, [r0]
   1ff34:	ands	r6, r6, #8
   1ff38:	beq	1ff14 <__assert_fail@plt+0xe814>
   1ff3c:	b	1ff08 <__assert_fail@plt+0xe808>
   1ff40:	ldr	ip, [sp, #48]	; 0x30
   1ff44:	ldr	lr, [sp, #44]	; 0x2c
   1ff48:	mov	r5, #0
   1ff4c:	mov	r9, #0
   1ff50:	ldr	r1, [sl, #64]	; 0x40
   1ff54:	cmp	r1, #31
   1ff58:	bne	1e988 <__assert_fail@plt+0xd288>
   1ff5c:	mov	r0, #996	; 0x3e4
   1ff60:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   1ff64:	ldr	lr, [sp, #44]	; 0x2c
   1ff68:	ldr	ip, [sp, #48]	; 0x30
   1ff6c:	cmp	r0, #0
   1ff70:	beq	1e9d4 <__assert_fail@plt+0xd2d4>
   1ff74:	ldr	r1, [sl, #56]	; 0x38
   1ff78:	str	r1, [r0]
   1ff7c:	mov	r1, #0
   1ff80:	str	r1, [sl, #64]	; 0x40
   1ff84:	str	r0, [sl, #56]	; 0x38
   1ff88:	b	1e98c <__assert_fail@plt+0xd28c>
   1ff8c:	cmp	r9, #0
   1ff90:	beq	20030 <__assert_fail@plt+0xe930>
   1ff94:	movw	r5, #255	; 0xff
   1ff98:	movt	r5, #4
   1ff9c:	mov	r6, r9
   1ffa0:	ldr	r9, [r9, #4]
   1ffa4:	cmp	r9, #0
   1ffa8:	bne	1ff9c <__assert_fail@plt+0xe89c>
   1ffac:	ldr	r9, [r6, #8]
   1ffb0:	cmp	r9, #0
   1ffb4:	bne	1ff9c <__assert_fail@plt+0xe89c>
   1ffb8:	ldr	r0, [r6, #24]
   1ffbc:	and	r0, r0, r5
   1ffc0:	cmp	r0, #3
   1ffc4:	beq	1fff8 <__assert_fail@plt+0xe8f8>
   1ffc8:	cmp	r0, #6
   1ffcc:	bne	20004 <__assert_fail@plt+0xe904>
   1ffd0:	ldr	r4, [r6, #20]
   1ffd4:	ldr	r0, [r4]
   1ffd8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1ffdc:	ldr	r0, [r4, #4]
   1ffe0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1ffe4:	ldr	r0, [r4, #8]
   1ffe8:	bl	13ddc <__assert_fail@plt+0x26dc>
   1ffec:	ldr	r0, [r4, #12]
   1fff0:	bl	13ddc <__assert_fail@plt+0x26dc>
   1fff4:	b	1fffc <__assert_fail@plt+0xe8fc>
   1fff8:	ldr	r4, [r6, #20]
   1fffc:	mov	r0, r4
   20000:	bl	13ddc <__assert_fail@plt+0x26dc>
   20004:	ldr	r0, [r6]
   20008:	cmp	r0, #0
   2000c:	beq	20030 <__assert_fail@plt+0xe930>
   20010:	ldr	r9, [r0, #8]
   20014:	cmp	r9, r6
   20018:	mov	r6, r0
   2001c:	beq	1ffb8 <__assert_fail@plt+0xe8b8>
   20020:	cmp	r9, #0
   20024:	mov	r6, r0
   20028:	beq	1ffb8 <__assert_fail@plt+0xe8b8>
   2002c:	b	1ff9c <__assert_fail@plt+0xe89c>
   20030:	mov	r0, #8
   20034:	b	1fa3c <__assert_fail@plt+0xe33c>
   20038:	ldr	r8, [sp, #24]
   2003c:	mov	r9, r0
   20040:	b	1fb9c <__assert_fail@plt+0xe49c>
   20044:	ldr	r8, [sp, #24]
   20048:	b	1fdb0 <__assert_fail@plt+0xe6b0>
   2004c:	mov	r4, #0
   20050:	mov	r0, #9
   20054:	b	20060 <__assert_fail@plt+0xe960>
   20058:	mov	r4, #0
   2005c:	mov	r0, #10
   20060:	ldr	ip, [sp, #48]	; 0x30
   20064:	ldr	lr, [sp, #44]	; 0x2c
   20068:	mov	r9, #0
   2006c:	str	r0, [lr]
   20070:	ldr	r1, [sl, #64]	; 0x40
   20074:	cmp	r1, #31
   20078:	bne	1e93c <__assert_fail@plt+0xd23c>
   2007c:	b	1dc50 <__assert_fail@plt+0xc550>
   20080:	mov	r0, #996	; 0x3e4
   20084:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   20088:	cmp	r0, #0
   2008c:	beq	200b0 <__assert_fail@plt+0xe9b0>
   20090:	ldr	r1, [sl, #56]	; 0x38
   20094:	str	r1, [r0]
   20098:	mov	r1, #0
   2009c:	str	r1, [sl, #64]	; 0x40
   200a0:	str	r0, [sl, #56]	; 0x38
   200a4:	b	1fb50 <__assert_fail@plt+0xe450>
   200a8:	ldr	r5, [sp, #28]
   200ac:	ldr	r7, [sp, #60]	; 0x3c
   200b0:	ldr	r4, [sp, #20]
   200b4:	mov	r0, #12
   200b8:	str	r0, [r4]
   200bc:	b	1fbb4 <__assert_fail@plt+0xe4b4>
   200c0:	mov	r0, r6
   200c4:	bl	13ddc <__assert_fail@plt+0x26dc>
   200c8:	mov	r0, r9
   200cc:	bl	13ddc <__assert_fail@plt+0x26dc>
   200d0:	ldr	r8, [sp, #24]
   200d4:	mov	r9, #12
   200d8:	b	1fb9c <__assert_fail@plt+0xe49c>
   200dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200e0:	add	fp, sp, #28
   200e4:	sub	sp, sp, #12
   200e8:	mov	r9, r1
   200ec:	mov	r6, r0
   200f0:	mov	r4, #0
   200f4:	mov	r0, #32
   200f8:	mov	r1, #1
   200fc:	mov	sl, r3
   20100:	mov	r5, r2
   20104:	str	r4, [sp, #8]
   20108:	bl	2b88c <__assert_fail@plt+0x1a18c>
   2010c:	ldr	r1, [fp, #12]
   20110:	cmp	r0, #0
   20114:	beq	20494 <__assert_fail@plt+0xed94>
   20118:	mov	r7, r0
   2011c:	mov	r0, #40	; 0x28
   20120:	mov	r1, #1
   20124:	bl	2b88c <__assert_fail@plt+0x1a18c>
   20128:	cmp	r0, #0
   2012c:	beq	203cc <__assert_fail@plt+0xeccc>
   20130:	mov	r8, r0
   20134:	ldrb	r0, [r0, #16]
   20138:	ldr	r1, [fp, #8]
   2013c:	mov	r4, #0
   20140:	add	r3, sp, #8
   20144:	str	r5, [sp]
   20148:	mov	r2, r8
   2014c:	str	r4, [sp, #4]
   20150:	and	r0, r0, #254	; 0xfe
   20154:	orr	r0, r0, r1
   20158:	mov	r1, r7
   2015c:	strb	r0, [r8, #16]
   20160:	mov	r0, r9
   20164:	bl	20984 <__assert_fail@plt+0xf284>
   20168:	cmp	r0, #0
   2016c:	bne	203f0 <__assert_fail@plt+0xecf0>
   20170:	ldrb	r0, [sl]
   20174:	cmp	r0, #0
   20178:	beq	201a4 <__assert_fail@plt+0xeaa4>
   2017c:	add	r1, sl, #1
   20180:	mov	r2, #1
   20184:	ubfx	r3, r0, #5, #3
   20188:	and	r0, r0, #31
   2018c:	ldr	r5, [r7, r3, lsl #2]
   20190:	orr	r0, r5, r2, lsl r0
   20194:	str	r0, [r7, r3, lsl #2]
   20198:	ldrb	r0, [r1], #1
   2019c:	cmp	r0, #0
   201a0:	bne	20184 <__assert_fail@plt+0xea84>
   201a4:	ldr	r0, [fp, #8]
   201a8:	cmp	r0, #0
   201ac:	beq	202dc <__assert_fail@plt+0xebdc>
   201b0:	vld1.32	{d16-d17}, [r7]
   201b4:	mov	r0, r7
   201b8:	vmvn	q8, q8
   201bc:	vst1.32	{d16-d17}, [r0]!
   201c0:	vld1.32	{d16-d17}, [r0]
   201c4:	vmvn	q8, q8
   201c8:	vst1.32	{d16-d17}, [r0]
   201cc:	ldr	r0, [r6, #92]	; 0x5c
   201d0:	cmp	r0, #2
   201d4:	bge	202e8 <__assert_fail@plt+0xebe8>
   201d8:	ldr	r1, [r6, #64]	; 0x40
   201dc:	cmp	r1, #31
   201e0:	beq	2036c <__assert_fail@plt+0xec6c>
   201e4:	ldr	r0, [r6, #56]	; 0x38
   201e8:	add	r0, r0, r1, lsl #5
   201ec:	add	r2, r1, #1
   201f0:	vmov.i32	q8, #0	; 0x00000000
   201f4:	mov	r1, #3
   201f8:	str	r2, [r6, #64]	; 0x40
   201fc:	mov	r2, #0
   20200:	add	r5, r0, #4
   20204:	str	r2, [r0, #20]
   20208:	str	r7, [r0, #24]
   2020c:	str	r1, [r0, #28]
   20210:	mov	r0, #28
   20214:	mov	r1, r5
   20218:	vst1.32	{d16-d17}, [r1], r0
   2021c:	mvn	r0, #0
   20220:	str	r0, [r1]
   20224:	ldr	r0, [r6, #92]	; 0x5c
   20228:	cmp	r0, #2
   2022c:	blt	20394 <__assert_fail@plt+0xec94>
   20230:	ldrb	r0, [r6, #88]	; 0x58
   20234:	orr	r0, r0, #2
   20238:	strb	r0, [r6, #88]	; 0x58
   2023c:	ldr	r1, [r6, #64]	; 0x40
   20240:	cmp	r1, #31
   20244:	beq	20438 <__assert_fail@plt+0xed38>
   20248:	ldr	r0, [r6, #56]	; 0x38
   2024c:	add	r0, r0, r1, lsl #5
   20250:	vmov.i32	q8, #0	; 0x00000000
   20254:	add	r2, r1, #1
   20258:	mov	r1, #6
   2025c:	mov	r4, #0
   20260:	str	r2, [r6, #64]	; 0x40
   20264:	add	r7, r0, #4
   20268:	str	r4, [r0, #20]
   2026c:	str	r8, [r0, #24]
   20270:	str	r1, [r0, #28]
   20274:	mov	r0, #28
   20278:	mov	r1, r7
   2027c:	vst1.32	{d16-d17}, [r1], r0
   20280:	mvn	r0, #0
   20284:	str	r0, [r1]
   20288:	ldr	r1, [r6, #64]	; 0x40
   2028c:	cmp	r1, #31
   20290:	beq	204a8 <__assert_fail@plt+0xeda8>
   20294:	ldr	r0, [r6, #56]	; 0x38
   20298:	add	r4, r0, r1, lsl #5
   2029c:	add	r2, r1, #1
   202a0:	mov	r0, #0
   202a4:	mov	r1, #10
   202a8:	str	r2, [r6, #64]	; 0x40
   202ac:	mvn	r2, #0
   202b0:	str	r0, [r4, #4]!
   202b4:	add	r3, r4, #20
   202b8:	stmib	r4, {r5, r7}
   202bc:	str	r0, [r4, #12]
   202c0:	str	r0, [r4, #16]
   202c4:	stm	r3, {r0, r1, r2}
   202c8:	str	r4, [r5]
   202cc:	str	r4, [r7]
   202d0:	mov	r0, r4
   202d4:	sub	sp, fp, #28
   202d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202dc:	ldr	r0, [r6, #92]	; 0x5c
   202e0:	cmp	r0, #2
   202e4:	blt	201d8 <__assert_fail@plt+0xead8>
   202e8:	ldr	r5, [r6, #60]	; 0x3c
   202ec:	ldm	r7, {r0, r1, r2, ip}
   202f0:	ldr	r3, [r5]
   202f4:	and	r0, r0, r3
   202f8:	str	r0, [r7]
   202fc:	ldr	r0, [r5, #4]
   20300:	and	r0, r1, r0
   20304:	str	r0, [r7, #4]
   20308:	ldr	r0, [r5, #8]
   2030c:	and	r0, r2, r0
   20310:	str	r0, [r7, #8]
   20314:	ldr	r0, [r5, #12]
   20318:	and	r0, ip, r0
   2031c:	str	r0, [r7, #12]
   20320:	ldr	r0, [r7, #16]
   20324:	ldr	r1, [r5, #16]
   20328:	and	r0, r0, r1
   2032c:	str	r0, [r7, #16]
   20330:	ldr	r0, [r5, #20]
   20334:	ldr	r1, [r7, #20]
   20338:	and	r0, r1, r0
   2033c:	str	r0, [r7, #20]
   20340:	ldr	r0, [r5, #24]
   20344:	ldr	r1, [r7, #24]
   20348:	and	r0, r1, r0
   2034c:	str	r0, [r7, #24]
   20350:	ldr	r0, [r5, #28]
   20354:	ldr	r1, [r7, #28]
   20358:	and	r0, r1, r0
   2035c:	str	r0, [r7, #28]
   20360:	ldr	r1, [r6, #64]	; 0x40
   20364:	cmp	r1, #31
   20368:	bne	201e4 <__assert_fail@plt+0xeae4>
   2036c:	mov	r0, #996	; 0x3e4
   20370:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   20374:	cmp	r0, #0
   20378:	beq	20460 <__assert_fail@plt+0xed60>
   2037c:	ldr	r1, [r6, #56]	; 0x38
   20380:	str	r1, [r0]
   20384:	mov	r1, #0
   20388:	str	r1, [r6, #64]	; 0x40
   2038c:	str	r0, [r6, #56]	; 0x38
   20390:	b	201e8 <__assert_fail@plt+0xeae8>
   20394:	ldr	r0, [r8]
   20398:	bl	13ddc <__assert_fail@plt+0x26dc>
   2039c:	ldr	r0, [r8, #4]
   203a0:	bl	13ddc <__assert_fail@plt+0x26dc>
   203a4:	ldr	r0, [r8, #8]
   203a8:	bl	13ddc <__assert_fail@plt+0x26dc>
   203ac:	ldr	r0, [r8, #12]
   203b0:	bl	13ddc <__assert_fail@plt+0x26dc>
   203b4:	mov	r0, r8
   203b8:	bl	13ddc <__assert_fail@plt+0x26dc>
   203bc:	mov	r4, r5
   203c0:	mov	r0, r4
   203c4:	sub	sp, fp, #28
   203c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203cc:	mov	r0, r7
   203d0:	bl	13ddc <__assert_fail@plt+0x26dc>
   203d4:	ldr	r1, [fp, #12]
   203d8:	mov	r0, #12
   203dc:	mov	r4, #0
   203e0:	str	r0, [r1]
   203e4:	mov	r0, r4
   203e8:	sub	sp, fp, #28
   203ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203f0:	mov	r5, r0
   203f4:	mov	r0, r7
   203f8:	bl	13ddc <__assert_fail@plt+0x26dc>
   203fc:	ldr	r0, [r8]
   20400:	bl	13ddc <__assert_fail@plt+0x26dc>
   20404:	ldr	r0, [r8, #4]
   20408:	bl	13ddc <__assert_fail@plt+0x26dc>
   2040c:	ldr	r0, [r8, #8]
   20410:	bl	13ddc <__assert_fail@plt+0x26dc>
   20414:	ldr	r0, [r8, #12]
   20418:	bl	13ddc <__assert_fail@plt+0x26dc>
   2041c:	mov	r0, r8
   20420:	bl	13ddc <__assert_fail@plt+0x26dc>
   20424:	ldr	r0, [fp, #12]
   20428:	str	r5, [r0]
   2042c:	mov	r0, r4
   20430:	sub	sp, fp, #28
   20434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20438:	mov	r0, #996	; 0x3e4
   2043c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   20440:	cmp	r0, #0
   20444:	beq	20460 <__assert_fail@plt+0xed60>
   20448:	ldr	r1, [r6, #56]	; 0x38
   2044c:	str	r1, [r0]
   20450:	mov	r1, #0
   20454:	str	r1, [r6, #64]	; 0x40
   20458:	str	r0, [r6, #56]	; 0x38
   2045c:	b	2024c <__assert_fail@plt+0xeb4c>
   20460:	mov	r0, r7
   20464:	bl	13ddc <__assert_fail@plt+0x26dc>
   20468:	ldr	r0, [r8]
   2046c:	bl	13ddc <__assert_fail@plt+0x26dc>
   20470:	ldr	r0, [r8, #4]
   20474:	bl	13ddc <__assert_fail@plt+0x26dc>
   20478:	ldr	r0, [r8, #8]
   2047c:	bl	13ddc <__assert_fail@plt+0x26dc>
   20480:	ldr	r0, [r8, #12]
   20484:	bl	13ddc <__assert_fail@plt+0x26dc>
   20488:	mov	r0, r8
   2048c:	bl	13ddc <__assert_fail@plt+0x26dc>
   20490:	ldr	r1, [fp, #12]
   20494:	mov	r0, #12
   20498:	str	r0, [r1]
   2049c:	mov	r0, r4
   204a0:	sub	sp, fp, #28
   204a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204a8:	mov	r0, #996	; 0x3e4
   204ac:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   204b0:	cmp	r0, #0
   204b4:	beq	203c0 <__assert_fail@plt+0xecc0>
   204b8:	ldr	r1, [r6, #56]	; 0x38
   204bc:	str	r1, [r0]
   204c0:	mov	r1, #0
   204c4:	str	r1, [r6, #64]	; 0x40
   204c8:	str	r0, [r6, #56]	; 0x38
   204cc:	b	20298 <__assert_fail@plt+0xeb98>
   204d0:	push	{fp, lr}
   204d4:	mov	fp, sp
   204d8:	ldr	ip, [r1, #40]	; 0x28
   204dc:	ldr	r3, [r1, #56]	; 0x38
   204e0:	cmp	r3, ip
   204e4:	ble	20564 <__assert_fail@plt+0xee64>
   204e8:	ldr	r3, [r1, #4]
   204ec:	ldrb	lr, [r3, ip]
   204f0:	strb	lr, [r0]
   204f4:	ldr	r3, [r1, #80]	; 0x50
   204f8:	cmp	r3, #2
   204fc:	blt	20520 <__assert_fail@plt+0xee20>
   20500:	ldr	r3, [r1, #28]
   20504:	ldr	ip, [r1, #40]	; 0x28
   20508:	cmp	ip, r3
   2050c:	beq	20520 <__assert_fail@plt+0xee20>
   20510:	ldr	r3, [r1, #8]
   20514:	ldr	r3, [r3, ip, lsl #2]
   20518:	cmn	r3, #1
   2051c:	beq	20638 <__assert_fail@plt+0xef38>
   20520:	tst	r2, #1
   20524:	beq	20578 <__assert_fail@plt+0xee78>
   20528:	cmp	lr, #92	; 0x5c
   2052c:	bne	20578 <__assert_fail@plt+0xee78>
   20530:	ldr	r2, [r1, #40]	; 0x28
   20534:	ldr	r3, [r1, #48]	; 0x30
   20538:	add	r2, r2, #1
   2053c:	cmp	r2, r3
   20540:	bge	20638 <__assert_fail@plt+0xef38>
   20544:	str	r2, [r1, #40]	; 0x28
   20548:	ldr	r1, [r1, #4]
   2054c:	ldrb	r2, [r1, r2]
   20550:	mov	r1, #1
   20554:	strb	r1, [r0, #4]
   20558:	strb	r2, [r0]
   2055c:	mov	r0, r1
   20560:	pop	{fp, pc}
   20564:	mov	r1, #2
   20568:	strb	r1, [r0, #4]
   2056c:	mov	r1, #0
   20570:	mov	r0, r1
   20574:	pop	{fp, pc}
   20578:	cmp	lr, #92	; 0x5c
   2057c:	bgt	205dc <__assert_fail@plt+0xeedc>
   20580:	cmp	lr, #45	; 0x2d
   20584:	beq	20600 <__assert_fail@plt+0xef00>
   20588:	cmp	lr, #91	; 0x5b
   2058c:	bne	20638 <__assert_fail@plt+0xef38>
   20590:	ldr	r3, [r1, #40]	; 0x28
   20594:	ldr	ip, [r1, #48]	; 0x30
   20598:	add	r3, r3, #1
   2059c:	cmp	r3, ip
   205a0:	bge	20628 <__assert_fail@plt+0xef28>
   205a4:	ldr	r1, [r1, #4]
   205a8:	ldrb	r1, [r1, r3]
   205ac:	cmp	r1, #61	; 0x3d
   205b0:	strb	r1, [r0]
   205b4:	beq	20648 <__assert_fail@plt+0xef48>
   205b8:	cmp	r1, #58	; 0x3a
   205bc:	beq	2065c <__assert_fail@plt+0xef5c>
   205c0:	cmp	r1, #46	; 0x2e
   205c4:	bne	20630 <__assert_fail@plt+0xef30>
   205c8:	mov	r1, #26
   205cc:	strb	r1, [r0, #4]
   205d0:	mov	r1, #2
   205d4:	mov	r0, r1
   205d8:	pop	{fp, pc}
   205dc:	cmp	lr, #93	; 0x5d
   205e0:	beq	20614 <__assert_fail@plt+0xef14>
   205e4:	cmp	lr, #94	; 0x5e
   205e8:	bne	20638 <__assert_fail@plt+0xef38>
   205ec:	mov	r1, #25
   205f0:	strb	r1, [r0, #4]
   205f4:	mov	r1, #1
   205f8:	mov	r0, r1
   205fc:	pop	{fp, pc}
   20600:	mov	r1, #22
   20604:	strb	r1, [r0, #4]
   20608:	mov	r1, #1
   2060c:	mov	r0, r1
   20610:	pop	{fp, pc}
   20614:	mov	r1, #21
   20618:	strb	r1, [r0, #4]
   2061c:	mov	r1, #1
   20620:	mov	r0, r1
   20624:	pop	{fp, pc}
   20628:	mov	r1, #0
   2062c:	strb	r1, [r0]
   20630:	mov	r1, #91	; 0x5b
   20634:	strb	r1, [r0]
   20638:	mov	r1, #1
   2063c:	strb	r1, [r0, #4]
   20640:	mov	r0, r1
   20644:	pop	{fp, pc}
   20648:	mov	r1, #28
   2064c:	strb	r1, [r0, #4]
   20650:	mov	r1, #2
   20654:	mov	r0, r1
   20658:	pop	{fp, pc}
   2065c:	tst	r2, #4
   20660:	beq	20630 <__assert_fail@plt+0xef30>
   20664:	mov	r1, #30
   20668:	strb	r1, [r0, #4]
   2066c:	mov	r1, #2
   20670:	mov	r0, r1
   20674:	pop	{fp, pc}
   20678:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2067c:	add	fp, sp, #24
   20680:	sub	sp, sp, #8
   20684:	mov	r5, r2
   20688:	ldr	r2, [r1, #80]	; 0x50
   2068c:	mov	r9, r0
   20690:	ldr	r0, [r1, #40]	; 0x28
   20694:	cmp	r2, #1
   20698:	beq	20710 <__assert_fail@plt+0xf010>
   2069c:	ldr	r2, [r1, #28]
   206a0:	add	r6, r0, #1
   206a4:	cmp	r6, r2
   206a8:	bge	20710 <__assert_fail@plt+0xf010>
   206ac:	ldr	lr, [r1, #8]
   206b0:	sub	r4, r0, r2
   206b4:	sub	ip, r2, r0
   206b8:	mvn	r2, #0
   206bc:	add	r6, lr, r0, lsl #2
   206c0:	ldr	r7, [r6, -r2, lsl #2]
   206c4:	cmn	r7, #1
   206c8:	bne	206dc <__assert_fail@plt+0xefdc>
   206cc:	sub	r2, r2, #1
   206d0:	cmp	r4, r2
   206d4:	bne	206c0 <__assert_fail@plt+0xefc0>
   206d8:	b	206e8 <__assert_fail@plt+0xefe8>
   206dc:	rsb	ip, r2, #0
   206e0:	cmp	ip, #2
   206e4:	bcc	20710 <__assert_fail@plt+0xf010>
   206e8:	mov	r2, #1
   206ec:	str	r2, [r9]
   206f0:	ldr	r0, [lr, r0, lsl #2]
   206f4:	str	r0, [r9, #4]
   206f8:	ldr	r0, [r1, #40]	; 0x28
   206fc:	add	r0, r0, ip
   20700:	str	r0, [r1, #40]	; 0x28
   20704:	mov	r0, #0
   20708:	sub	sp, fp, #24
   2070c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20710:	add	r2, r0, r3
   20714:	str	r2, [r1, #40]	; 0x28
   20718:	ldrb	r6, [r5, #4]
   2071c:	sub	r0, r6, #22
   20720:	cmp	r0, #8
   20724:	bhi	2096c <__assert_fail@plt+0xf26c>
   20728:	add	r3, pc, #0
   2072c:	ldr	pc, [r3, r0, lsl #2]
   20730:	andeq	r0, r2, r4, asr #18
   20734:	andeq	r0, r2, ip, ror #18
   20738:	andeq	r0, r2, ip, ror #18
   2073c:	andeq	r0, r2, ip, ror #18
   20740:	andeq	r0, r2, r4, asr r7
   20744:	andeq	r0, r2, ip, ror #18
   20748:	andeq	r0, r2, r4, asr r7
   2074c:	andeq	r0, r2, ip, ror #18
   20750:	andeq	r0, r2, r4, asr r7
   20754:	ldr	r3, [r1, #56]	; 0x38
   20758:	mov	r0, #7
   2075c:	cmp	r3, r2
   20760:	ble	2097c <__assert_fail@plt+0xf27c>
   20764:	ldrb	r3, [r5]
   20768:	mov	r2, #0
   2076c:	uxtb	r7, r6
   20770:	cmp	r7, #30
   20774:	bne	20784 <__assert_fail@plt+0xf084>
   20778:	ldrb	r7, [r1, #75]	; 0x4b
   2077c:	cmp	r7, #0
   20780:	bne	207e8 <__assert_fail@plt+0xf0e8>
   20784:	ldr	r4, [r1, #40]	; 0x28
   20788:	ldr	r7, [r1, #4]
   2078c:	add	r6, r4, #1
   20790:	str	r6, [r1, #40]	; 0x28
   20794:	ldrb	r4, [r7, r4]
   20798:	ldr	r7, [r1, #56]	; 0x38
   2079c:	cmp	r7, r6
   207a0:	ble	2097c <__assert_fail@plt+0xf27c>
   207a4:	uxtb	r7, r4
   207a8:	cmp	r7, r3
   207ac:	bne	207c0 <__assert_fail@plt+0xf0c0>
   207b0:	ldr	r7, [r1, #4]
   207b4:	ldrb	r7, [r7, r6]
   207b8:	cmp	r7, #93	; 0x5d
   207bc:	beq	208e4 <__assert_fail@plt+0xf1e4>
   207c0:	ldr	r7, [r9, #4]
   207c4:	strb	r4, [r7, r2]
   207c8:	add	r2, r2, #1
   207cc:	cmp	r2, #32
   207d0:	beq	2097c <__assert_fail@plt+0xf27c>
   207d4:	ldrb	r6, [r5, #4]
   207d8:	uxtb	r7, r6
   207dc:	cmp	r7, #30
   207e0:	beq	20778 <__assert_fail@plt+0xf078>
   207e4:	b	20784 <__assert_fail@plt+0xf084>
   207e8:	ldrb	r7, [r1, #76]	; 0x4c
   207ec:	cmp	r7, #0
   207f0:	beq	20898 <__assert_fail@plt+0xf198>
   207f4:	ldr	lr, [r1, #28]
   207f8:	ldr	ip, [r1, #40]	; 0x28
   207fc:	cmp	lr, ip
   20800:	beq	20814 <__assert_fail@plt+0xf114>
   20804:	ldr	r4, [r1, #8]
   20808:	ldr	r4, [r4, ip, lsl #2]
   2080c:	cmn	r4, #1
   20810:	beq	208c4 <__assert_fail@plt+0xf1c4>
   20814:	ldr	r6, [r1, #12]
   20818:	ldr	r7, [r1, #24]
   2081c:	ldr	r4, [r1]
   20820:	ldr	r6, [r6, ip, lsl #2]
   20824:	add	r6, r7, r6
   20828:	add	r4, r4, r6
   2082c:	ldrsb	r4, [r4]
   20830:	cmn	r4, #1
   20834:	ble	208c4 <__assert_fail@plt+0xf1c4>
   20838:	ldr	r7, [r1, #80]	; 0x50
   2083c:	mov	r6, #1
   20840:	cmp	r7, #1
   20844:	beq	20880 <__assert_fail@plt+0xf180>
   20848:	add	r7, ip, #1
   2084c:	cmp	r7, lr
   20850:	bge	20880 <__assert_fail@plt+0xf180>
   20854:	ldr	r6, [r1, #8]
   20858:	sub	lr, lr, ip
   2085c:	add	r8, r6, ip, lsl #2
   20860:	mov	r6, #1
   20864:	ldr	r7, [r8, r6, lsl #2]
   20868:	cmn	r7, #1
   2086c:	bne	20880 <__assert_fail@plt+0xf180>
   20870:	add	r6, r6, #1
   20874:	cmp	lr, r6
   20878:	bne	20864 <__assert_fail@plt+0xf164>
   2087c:	mov	r6, lr
   20880:	add	r6, r6, ip
   20884:	str	r6, [r1, #40]	; 0x28
   20888:	ldr	r7, [r1, #56]	; 0x38
   2088c:	cmp	r7, r6
   20890:	bgt	207a4 <__assert_fail@plt+0xf0a4>
   20894:	b	2097c <__assert_fail@plt+0xf27c>
   20898:	ldr	r7, [r1, #40]	; 0x28
   2089c:	ldr	r4, [r1, #24]
   208a0:	ldr	ip, [r1]
   208a4:	add	r6, r7, #1
   208a8:	add	r7, r7, r4
   208ac:	str	r6, [r1, #40]	; 0x28
   208b0:	ldrb	r4, [ip, r7]
   208b4:	ldr	r7, [r1, #56]	; 0x38
   208b8:	cmp	r7, r6
   208bc:	bgt	207a4 <__assert_fail@plt+0xf0a4>
   208c0:	b	2097c <__assert_fail@plt+0xf27c>
   208c4:	add	r6, ip, #1
   208c8:	str	r6, [r1, #40]	; 0x28
   208cc:	ldr	r7, [r1, #4]
   208d0:	ldrb	r4, [r7, ip]
   208d4:	ldr	r7, [r1, #56]	; 0x38
   208d8:	cmp	r7, r6
   208dc:	bgt	207a4 <__assert_fail@plt+0xf0a4>
   208e0:	b	2097c <__assert_fail@plt+0xf27c>
   208e4:	add	r0, r6, #1
   208e8:	str	r0, [r1, #40]	; 0x28
   208ec:	mov	r0, #0
   208f0:	ldr	r1, [r9, #4]
   208f4:	strb	r0, [r1, r2]
   208f8:	ldrb	r1, [r5, #4]
   208fc:	cmp	r1, #30
   20900:	beq	20924 <__assert_fail@plt+0xf224>
   20904:	cmp	r1, #28
   20908:	beq	20934 <__assert_fail@plt+0xf234>
   2090c:	cmp	r1, #26
   20910:	bne	2097c <__assert_fail@plt+0xf27c>
   20914:	mov	r1, #3
   20918:	str	r1, [r9]
   2091c:	sub	sp, fp, #24
   20920:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20924:	mov	r1, #4
   20928:	str	r1, [r9]
   2092c:	sub	sp, fp, #24
   20930:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20934:	mov	r1, #2
   20938:	str	r1, [r9]
   2093c:	sub	sp, fp, #24
   20940:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20944:	ldr	r0, [fp, #12]
   20948:	cmp	r0, #0
   2094c:	bne	2096c <__assert_fail@plt+0xf26c>
   20950:	ldr	r2, [fp, #8]
   20954:	mov	r0, sp
   20958:	bl	204d0 <__assert_fail@plt+0xedd0>
   2095c:	ldrb	r1, [sp, #4]
   20960:	mov	r0, #11
   20964:	cmp	r1, #21
   20968:	bne	2097c <__assert_fail@plt+0xf27c>
   2096c:	mov	r0, #0
   20970:	str	r0, [r9]
   20974:	ldrb	r1, [r5]
   20978:	strb	r1, [r9, #4]
   2097c:	sub	sp, fp, #24
   20980:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20984:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20988:	add	fp, sp, #24
   2098c:	mov	r8, r0
   20990:	ldrb	r0, [fp, #14]
   20994:	ldr	r6, [fp, #8]
   20998:	mov	r5, r3
   2099c:	mov	r7, r2
   209a0:	mov	r4, r1
   209a4:	tst	r0, #64	; 0x40
   209a8:	beq	209e4 <__assert_fail@plt+0xf2e4>
   209ac:	movw	r1, #52786	; 0xce32
   209b0:	mov	r0, r6
   209b4:	movt	r1, #2
   209b8:	bl	113d0 <strcmp@plt>
   209bc:	cmp	r0, #0
   209c0:	beq	209dc <__assert_fail@plt+0xf2dc>
   209c4:	movw	r1, #52792	; 0xce38
   209c8:	mov	r0, r6
   209cc:	movt	r1, #2
   209d0:	bl	113d0 <strcmp@plt>
   209d4:	cmp	r0, #0
   209d8:	bne	209e4 <__assert_fail@plt+0xf2e4>
   209dc:	movw	r6, #52798	; 0xce3e
   209e0:	movt	r6, #2
   209e4:	ldr	r0, [r5]
   209e8:	ldr	r1, [r7, #36]	; 0x24
   209ec:	cmp	r0, r1
   209f0:	beq	20fb8 <__assert_fail@plt+0xf8b8>
   209f4:	mov	r0, r6
   209f8:	bl	113ac <wctype@plt>
   209fc:	ldr	r2, [r7, #36]	; 0x24
   20a00:	ldr	r1, [r7, #12]
   20a04:	add	r3, r2, #1
   20a08:	str	r3, [r7, #36]	; 0x24
   20a0c:	str	r0, [r1, r2, lsl #2]
   20a10:	movw	r1, #52774	; 0xce26
   20a14:	mov	r0, r6
   20a18:	movt	r1, #2
   20a1c:	bl	113d0 <strcmp@plt>
   20a20:	cmp	r0, #0
   20a24:	beq	20b54 <__assert_fail@plt+0xf454>
   20a28:	movw	r1, #52804	; 0xce44
   20a2c:	mov	r0, r6
   20a30:	movt	r1, #2
   20a34:	bl	113d0 <strcmp@plt>
   20a38:	cmp	r0, #0
   20a3c:	beq	20bc0 <__assert_fail@plt+0xf4c0>
   20a40:	movw	r1, #52792	; 0xce38
   20a44:	mov	r0, r6
   20a48:	movt	r1, #2
   20a4c:	bl	113d0 <strcmp@plt>
   20a50:	cmp	r0, #0
   20a54:	beq	20c2c <__assert_fail@plt+0xf52c>
   20a58:	movw	r1, #52780	; 0xce2c
   20a5c:	mov	r0, r6
   20a60:	movt	r1, #2
   20a64:	bl	113d0 <strcmp@plt>
   20a68:	cmp	r0, #0
   20a6c:	beq	20c98 <__assert_fail@plt+0xf598>
   20a70:	movw	r1, #52798	; 0xce3e
   20a74:	mov	r0, r6
   20a78:	movt	r1, #2
   20a7c:	bl	113d0 <strcmp@plt>
   20a80:	cmp	r0, #0
   20a84:	beq	20d3c <__assert_fail@plt+0xf63c>
   20a88:	movw	r1, #52835	; 0xce63
   20a8c:	mov	r0, r6
   20a90:	movt	r1, #2
   20a94:	bl	113d0 <strcmp@plt>
   20a98:	cmp	r0, #0
   20a9c:	beq	20da8 <__assert_fail@plt+0xf6a8>
   20aa0:	movw	r1, #52810	; 0xce4a
   20aa4:	mov	r0, r6
   20aa8:	movt	r1, #2
   20aac:	bl	113d0 <strcmp@plt>
   20ab0:	cmp	r0, #0
   20ab4:	beq	20e14 <__assert_fail@plt+0xf714>
   20ab8:	movw	r1, #52786	; 0xce32
   20abc:	mov	r0, r6
   20ac0:	movt	r1, #2
   20ac4:	bl	113d0 <strcmp@plt>
   20ac8:	cmp	r0, #0
   20acc:	beq	20e68 <__assert_fail@plt+0xf768>
   20ad0:	movw	r1, #52816	; 0xce50
   20ad4:	mov	r0, r6
   20ad8:	movt	r1, #2
   20adc:	bl	113d0 <strcmp@plt>
   20ae0:	cmp	r0, #0
   20ae4:	beq	20ebc <__assert_fail@plt+0xf7bc>
   20ae8:	movw	r1, #52822	; 0xce56
   20aec:	mov	r0, r6
   20af0:	movt	r1, #2
   20af4:	bl	113d0 <strcmp@plt>
   20af8:	cmp	r0, #0
   20afc:	beq	20f10 <__assert_fail@plt+0xf810>
   20b00:	movw	r1, #52828	; 0xce5c
   20b04:	mov	r0, r6
   20b08:	movt	r1, #2
   20b0c:	bl	113d0 <strcmp@plt>
   20b10:	cmp	r0, #0
   20b14:	beq	20f64 <__assert_fail@plt+0xf864>
   20b18:	movw	r1, #52834	; 0xce62
   20b1c:	mov	r0, r6
   20b20:	movt	r1, #2
   20b24:	bl	113d0 <strcmp@plt>
   20b28:	mov	r1, r0
   20b2c:	mov	r0, #4
   20b30:	cmp	r1, #0
   20b34:	bne	21328 <__assert_fail@plt+0xfc28>
   20b38:	bl	11598 <__ctype_b_loc@plt>
   20b3c:	ldr	r1, [r0]
   20b40:	mov	r2, #0
   20b44:	mov	r3, #1
   20b48:	cmp	r8, #0
   20b4c:	beq	20d18 <__assert_fail@plt+0xf618>
   20b50:	b	21260 <__assert_fail@plt+0xfb60>
   20b54:	bl	11598 <__ctype_b_loc@plt>
   20b58:	ldr	r1, [r0]
   20b5c:	cmp	r8, #0
   20b60:	bne	21058 <__assert_fail@plt+0xf958>
   20b64:	mov	r0, #0
   20b68:	mov	r2, #1
   20b6c:	ldrb	r3, [r1]
   20b70:	tst	r3, #8
   20b74:	bne	20b94 <__assert_fail@plt+0xf494>
   20b78:	add	r0, r0, #1
   20b7c:	add	r1, r1, #2
   20b80:	cmp	r0, #256	; 0x100
   20b84:	beq	20bb8 <__assert_fail@plt+0xf4b8>
   20b88:	ldrb	r3, [r1]
   20b8c:	tst	r3, #8
   20b90:	beq	20b78 <__assert_fail@plt+0xf478>
   20b94:	ubfx	r3, r0, #5, #3
   20b98:	and	r6, r0, #31
   20b9c:	ldr	r7, [r4, r3, lsl #2]
   20ba0:	orr	r7, r7, r2, lsl r6
   20ba4:	str	r7, [r4, r3, lsl #2]
   20ba8:	add	r0, r0, #1
   20bac:	add	r1, r1, #2
   20bb0:	cmp	r0, #256	; 0x100
   20bb4:	bne	20b88 <__assert_fail@plt+0xf488>
   20bb8:	mov	r0, #0
   20bbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20bc0:	bl	11598 <__ctype_b_loc@plt>
   20bc4:	ldr	r1, [r0]
   20bc8:	cmp	r8, #0
   20bcc:	bne	210e4 <__assert_fail@plt+0xf9e4>
   20bd0:	mov	r0, #0
   20bd4:	mov	r2, #1
   20bd8:	ldrb	r3, [r1]
   20bdc:	tst	r3, #2
   20be0:	bne	20c00 <__assert_fail@plt+0xf500>
   20be4:	add	r0, r0, #1
   20be8:	add	r1, r1, #2
   20bec:	cmp	r0, #256	; 0x100
   20bf0:	beq	20c24 <__assert_fail@plt+0xf524>
   20bf4:	ldrb	r3, [r1]
   20bf8:	tst	r3, #2
   20bfc:	beq	20be4 <__assert_fail@plt+0xf4e4>
   20c00:	ubfx	r3, r0, #5, #3
   20c04:	and	r6, r0, #31
   20c08:	ldr	r7, [r4, r3, lsl #2]
   20c0c:	orr	r7, r7, r2, lsl r6
   20c10:	str	r7, [r4, r3, lsl #2]
   20c14:	add	r0, r0, #1
   20c18:	add	r1, r1, #2
   20c1c:	cmp	r0, #256	; 0x100
   20c20:	bne	20bf4 <__assert_fail@plt+0xf4f4>
   20c24:	mov	r0, #0
   20c28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c2c:	bl	11598 <__ctype_b_loc@plt>
   20c30:	ldr	r1, [r0]
   20c34:	cmp	r8, #0
   20c38:	bne	21170 <__assert_fail@plt+0xfa70>
   20c3c:	mov	r0, #0
   20c40:	mov	r2, #1
   20c44:	ldrb	r3, [r1, #1]
   20c48:	tst	r3, #2
   20c4c:	bne	20c6c <__assert_fail@plt+0xf56c>
   20c50:	add	r0, r0, #1
   20c54:	add	r1, r1, #2
   20c58:	cmp	r0, #256	; 0x100
   20c5c:	beq	20c90 <__assert_fail@plt+0xf590>
   20c60:	ldrb	r3, [r1, #1]
   20c64:	tst	r3, #2
   20c68:	beq	20c50 <__assert_fail@plt+0xf550>
   20c6c:	ubfx	r3, r0, #5, #3
   20c70:	and	r6, r0, #31
   20c74:	ldr	r7, [r4, r3, lsl #2]
   20c78:	orr	r7, r7, r2, lsl r6
   20c7c:	str	r7, [r4, r3, lsl #2]
   20c80:	add	r0, r0, #1
   20c84:	add	r1, r1, #2
   20c88:	cmp	r0, #256	; 0x100
   20c8c:	bne	20c60 <__assert_fail@plt+0xf560>
   20c90:	mov	r0, #0
   20c94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c98:	bl	11598 <__ctype_b_loc@plt>
   20c9c:	ldr	r1, [r0]
   20ca0:	cmp	r8, #0
   20ca4:	bne	211fc <__assert_fail@plt+0xfafc>
   20ca8:	mov	r0, #0
   20cac:	mov	r2, #1
   20cb0:	ldrb	r3, [r1, #1]
   20cb4:	tst	r3, #32
   20cb8:	bne	20cd8 <__assert_fail@plt+0xf5d8>
   20cbc:	add	r0, r0, #1
   20cc0:	add	r1, r1, #2
   20cc4:	cmp	r0, #256	; 0x100
   20cc8:	beq	20cfc <__assert_fail@plt+0xf5fc>
   20ccc:	ldrb	r3, [r1, #1]
   20cd0:	tst	r3, #32
   20cd4:	beq	20cbc <__assert_fail@plt+0xf5bc>
   20cd8:	ubfx	r3, r0, #5, #3
   20cdc:	and	r6, r0, #31
   20ce0:	ldr	r7, [r4, r3, lsl #2]
   20ce4:	orr	r7, r7, r2, lsl r6
   20ce8:	str	r7, [r4, r3, lsl #2]
   20cec:	add	r0, r0, #1
   20cf0:	add	r1, r1, #2
   20cf4:	cmp	r0, #256	; 0x100
   20cf8:	bne	20ccc <__assert_fail@plt+0xf5cc>
   20cfc:	mov	r0, #0
   20d00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20d04:	add	r2, r2, #1
   20d08:	add	r1, r1, #2
   20d0c:	mov	r0, #0
   20d10:	cmp	r2, #256	; 0x100
   20d14:	beq	21328 <__assert_fail@plt+0xfc28>
   20d18:	ldrb	r0, [r1, #1]
   20d1c:	tst	r0, #16
   20d20:	beq	20d04 <__assert_fail@plt+0xf604>
   20d24:	ubfx	r0, r2, #5, #3
   20d28:	and	r6, r2, #31
   20d2c:	ldr	r7, [r4, r0, lsl #2]
   20d30:	orr	r7, r7, r3, lsl r6
   20d34:	str	r7, [r4, r0, lsl #2]
   20d38:	b	20d04 <__assert_fail@plt+0xf604>
   20d3c:	bl	11598 <__ctype_b_loc@plt>
   20d40:	ldr	r1, [r0]
   20d44:	cmp	r8, #0
   20d48:	bne	21288 <__assert_fail@plt+0xfb88>
   20d4c:	mov	r0, #0
   20d50:	mov	r2, #1
   20d54:	ldrb	r3, [r1, #1]
   20d58:	tst	r3, #4
   20d5c:	bne	20d7c <__assert_fail@plt+0xf67c>
   20d60:	add	r0, r0, #1
   20d64:	add	r1, r1, #2
   20d68:	cmp	r0, #256	; 0x100
   20d6c:	beq	20da0 <__assert_fail@plt+0xf6a0>
   20d70:	ldrb	r3, [r1, #1]
   20d74:	tst	r3, #4
   20d78:	beq	20d60 <__assert_fail@plt+0xf660>
   20d7c:	ubfx	r3, r0, #5, #3
   20d80:	and	r6, r0, #31
   20d84:	ldr	r7, [r4, r3, lsl #2]
   20d88:	orr	r7, r7, r2, lsl r6
   20d8c:	str	r7, [r4, r3, lsl #2]
   20d90:	add	r0, r0, #1
   20d94:	add	r1, r1, #2
   20d98:	cmp	r0, #256	; 0x100
   20d9c:	bne	20d70 <__assert_fail@plt+0xf670>
   20da0:	mov	r0, #0
   20da4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20da8:	bl	11598 <__ctype_b_loc@plt>
   20dac:	ldr	r1, [r0]
   20db0:	cmp	r8, #0
   20db4:	bne	212d8 <__assert_fail@plt+0xfbd8>
   20db8:	mov	r0, #0
   20dbc:	mov	r2, #1
   20dc0:	ldrb	r3, [r1, #1]
   20dc4:	tst	r3, #8
   20dc8:	bne	20de8 <__assert_fail@plt+0xf6e8>
   20dcc:	add	r0, r0, #1
   20dd0:	add	r1, r1, #2
   20dd4:	cmp	r0, #256	; 0x100
   20dd8:	beq	20e0c <__assert_fail@plt+0xf70c>
   20ddc:	ldrb	r3, [r1, #1]
   20de0:	tst	r3, #8
   20de4:	beq	20dcc <__assert_fail@plt+0xf6cc>
   20de8:	ubfx	r3, r0, #5, #3
   20dec:	and	r6, r0, #31
   20df0:	ldr	r7, [r4, r3, lsl #2]
   20df4:	orr	r7, r7, r2, lsl r6
   20df8:	str	r7, [r4, r3, lsl #2]
   20dfc:	add	r0, r0, #1
   20e00:	add	r1, r1, #2
   20e04:	cmp	r0, #256	; 0x100
   20e08:	bne	20ddc <__assert_fail@plt+0xf6dc>
   20e0c:	mov	r0, #0
   20e10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20e14:	bl	11598 <__ctype_b_loc@plt>
   20e18:	ldr	r1, [r0]
   20e1c:	mov	r2, #0
   20e20:	mov	r3, #1
   20e24:	cmp	r8, #0
   20e28:	beq	20e44 <__assert_fail@plt+0xf744>
   20e2c:	b	20ff4 <__assert_fail@plt+0xf8f4>
   20e30:	add	r2, r2, #1
   20e34:	add	r1, r1, #2
   20e38:	mov	r0, #0
   20e3c:	cmp	r2, #256	; 0x100
   20e40:	beq	21328 <__assert_fail@plt+0xfc28>
   20e44:	ldrb	r0, [r1, #1]
   20e48:	tst	r0, #64	; 0x40
   20e4c:	beq	20e30 <__assert_fail@plt+0xf730>
   20e50:	ubfx	r0, r2, #5, #3
   20e54:	and	r6, r2, #31
   20e58:	ldr	r7, [r4, r0, lsl #2]
   20e5c:	orr	r7, r7, r3, lsl r6
   20e60:	str	r7, [r4, r0, lsl #2]
   20e64:	b	20e30 <__assert_fail@plt+0xf730>
   20e68:	bl	11598 <__ctype_b_loc@plt>
   20e6c:	ldr	r1, [r0]
   20e70:	mov	r2, #0
   20e74:	mov	r3, #1
   20e78:	cmp	r8, #0
   20e7c:	beq	20e98 <__assert_fail@plt+0xf798>
   20e80:	b	21030 <__assert_fail@plt+0xf930>
   20e84:	add	r2, r2, #1
   20e88:	add	r1, r1, #2
   20e8c:	mov	r0, #0
   20e90:	cmp	r2, #256	; 0x100
   20e94:	beq	21328 <__assert_fail@plt+0xfc28>
   20e98:	ldrb	r0, [r1, #1]
   20e9c:	tst	r0, #1
   20ea0:	beq	20e84 <__assert_fail@plt+0xf784>
   20ea4:	ubfx	r0, r2, #5, #3
   20ea8:	and	r6, r2, #31
   20eac:	ldr	r7, [r4, r0, lsl #2]
   20eb0:	orr	r7, r7, r3, lsl r6
   20eb4:	str	r7, [r4, r0, lsl #2]
   20eb8:	b	20e84 <__assert_fail@plt+0xf784>
   20ebc:	bl	11598 <__ctype_b_loc@plt>
   20ec0:	ldr	r1, [r0]
   20ec4:	mov	r2, #0
   20ec8:	mov	r3, #1
   20ecc:	cmp	r8, #0
   20ed0:	beq	20eec <__assert_fail@plt+0xf7ec>
   20ed4:	b	210bc <__assert_fail@plt+0xf9bc>
   20ed8:	add	r2, r2, #1
   20edc:	add	r1, r1, #2
   20ee0:	mov	r0, #0
   20ee4:	cmp	r2, #256	; 0x100
   20ee8:	beq	21328 <__assert_fail@plt+0xfc28>
   20eec:	ldrb	r0, [r1]
   20ef0:	tst	r0, #1
   20ef4:	beq	20ed8 <__assert_fail@plt+0xf7d8>
   20ef8:	ubfx	r0, r2, #5, #3
   20efc:	and	r6, r2, #31
   20f00:	ldr	r7, [r4, r0, lsl #2]
   20f04:	orr	r7, r7, r3, lsl r6
   20f08:	str	r7, [r4, r0, lsl #2]
   20f0c:	b	20ed8 <__assert_fail@plt+0xf7d8>
   20f10:	bl	11598 <__ctype_b_loc@plt>
   20f14:	ldr	r1, [r0]
   20f18:	mov	r2, #0
   20f1c:	mov	r3, #1
   20f20:	cmp	r8, #0
   20f24:	beq	20f40 <__assert_fail@plt+0xf840>
   20f28:	b	21148 <__assert_fail@plt+0xfa48>
   20f2c:	add	r2, r2, #1
   20f30:	add	r1, r1, #2
   20f34:	mov	r0, #0
   20f38:	cmp	r2, #256	; 0x100
   20f3c:	beq	21328 <__assert_fail@plt+0xfc28>
   20f40:	ldrsh	r0, [r1]
   20f44:	cmn	r0, #1
   20f48:	bgt	20f2c <__assert_fail@plt+0xf82c>
   20f4c:	ubfx	r0, r2, #5, #3
   20f50:	and	r6, r2, #31
   20f54:	ldr	r7, [r4, r0, lsl #2]
   20f58:	orr	r7, r7, r3, lsl r6
   20f5c:	str	r7, [r4, r0, lsl #2]
   20f60:	b	20f2c <__assert_fail@plt+0xf82c>
   20f64:	bl	11598 <__ctype_b_loc@plt>
   20f68:	ldr	r1, [r0]
   20f6c:	mov	r2, #0
   20f70:	mov	r3, #1
   20f74:	cmp	r8, #0
   20f78:	beq	20f94 <__assert_fail@plt+0xf894>
   20f7c:	b	211d4 <__assert_fail@plt+0xfad4>
   20f80:	add	r2, r2, #1
   20f84:	add	r1, r1, #2
   20f88:	mov	r0, #0
   20f8c:	cmp	r2, #256	; 0x100
   20f90:	beq	21328 <__assert_fail@plt+0xfc28>
   20f94:	ldrb	r0, [r1]
   20f98:	tst	r0, #4
   20f9c:	beq	20f80 <__assert_fail@plt+0xf880>
   20fa0:	ubfx	r0, r2, #5, #3
   20fa4:	and	r6, r2, #31
   20fa8:	ldr	r7, [r4, r0, lsl #2]
   20fac:	orr	r7, r7, r3, lsl r6
   20fb0:	str	r7, [r4, r0, lsl #2]
   20fb4:	b	20f80 <__assert_fail@plt+0xf880>
   20fb8:	mov	r1, #1
   20fbc:	orr	r9, r1, r0, lsl #1
   20fc0:	ldr	r0, [r7, #12]
   20fc4:	lsl	r1, r9, #2
   20fc8:	bl	2b910 <__assert_fail@plt+0x1a210>
   20fcc:	cmp	r0, #0
   20fd0:	beq	2132c <__assert_fail@plt+0xfc2c>
   20fd4:	str	r0, [r7, #12]
   20fd8:	str	r9, [r5]
   20fdc:	b	209f4 <__assert_fail@plt+0xf2f4>
   20fe0:	add	r2, r2, #1
   20fe4:	add	r1, r1, #2
   20fe8:	mov	r0, #0
   20fec:	cmp	r2, #256	; 0x100
   20ff0:	beq	21328 <__assert_fail@plt+0xfc28>
   20ff4:	ldrb	r0, [r1, #1]
   20ff8:	tst	r0, #64	; 0x40
   20ffc:	beq	20fe0 <__assert_fail@plt+0xf8e0>
   21000:	ldrb	r0, [r8, r2]
   21004:	ubfx	r7, r0, #5, #3
   21008:	and	r0, r0, #31
   2100c:	ldr	r6, [r4, r7, lsl #2]
   21010:	orr	r0, r6, r3, lsl r0
   21014:	str	r0, [r4, r7, lsl #2]
   21018:	b	20fe0 <__assert_fail@plt+0xf8e0>
   2101c:	add	r2, r2, #1
   21020:	add	r1, r1, #2
   21024:	mov	r0, #0
   21028:	cmp	r2, #256	; 0x100
   2102c:	beq	21328 <__assert_fail@plt+0xfc28>
   21030:	ldrb	r0, [r1, #1]
   21034:	tst	r0, #1
   21038:	beq	2101c <__assert_fail@plt+0xf91c>
   2103c:	ldrb	r0, [r8, r2]
   21040:	ubfx	r7, r0, #5, #3
   21044:	and	r0, r0, #31
   21048:	ldr	r6, [r4, r7, lsl #2]
   2104c:	orr	r0, r6, r3, lsl r0
   21050:	str	r0, [r4, r7, lsl #2]
   21054:	b	2101c <__assert_fail@plt+0xf91c>
   21058:	mov	r2, #0
   2105c:	mov	r3, #1
   21060:	ldrb	r0, [r1]
   21064:	tst	r0, #8
   21068:	bne	2108c <__assert_fail@plt+0xf98c>
   2106c:	add	r2, r2, #1
   21070:	add	r1, r1, #2
   21074:	mov	r0, #0
   21078:	cmp	r2, #256	; 0x100
   2107c:	beq	21328 <__assert_fail@plt+0xfc28>
   21080:	ldrb	r0, [r1]
   21084:	tst	r0, #8
   21088:	beq	2106c <__assert_fail@plt+0xf96c>
   2108c:	ldrb	r0, [r8, r2]
   21090:	ubfx	r7, r0, #5, #3
   21094:	and	r0, r0, #31
   21098:	ldr	r6, [r4, r7, lsl #2]
   2109c:	orr	r0, r6, r3, lsl r0
   210a0:	str	r0, [r4, r7, lsl #2]
   210a4:	b	2106c <__assert_fail@plt+0xf96c>
   210a8:	add	r2, r2, #1
   210ac:	add	r1, r1, #2
   210b0:	mov	r0, #0
   210b4:	cmp	r2, #256	; 0x100
   210b8:	beq	21328 <__assert_fail@plt+0xfc28>
   210bc:	ldrb	r0, [r1]
   210c0:	tst	r0, #1
   210c4:	beq	210a8 <__assert_fail@plt+0xf9a8>
   210c8:	ldrb	r0, [r8, r2]
   210cc:	ubfx	r7, r0, #5, #3
   210d0:	and	r0, r0, #31
   210d4:	ldr	r6, [r4, r7, lsl #2]
   210d8:	orr	r0, r6, r3, lsl r0
   210dc:	str	r0, [r4, r7, lsl #2]
   210e0:	b	210a8 <__assert_fail@plt+0xf9a8>
   210e4:	mov	r2, #0
   210e8:	mov	r3, #1
   210ec:	ldrb	r0, [r1]
   210f0:	tst	r0, #2
   210f4:	bne	21118 <__assert_fail@plt+0xfa18>
   210f8:	add	r2, r2, #1
   210fc:	add	r1, r1, #2
   21100:	mov	r0, #0
   21104:	cmp	r2, #256	; 0x100
   21108:	beq	21328 <__assert_fail@plt+0xfc28>
   2110c:	ldrb	r0, [r1]
   21110:	tst	r0, #2
   21114:	beq	210f8 <__assert_fail@plt+0xf9f8>
   21118:	ldrb	r0, [r8, r2]
   2111c:	ubfx	r7, r0, #5, #3
   21120:	and	r0, r0, #31
   21124:	ldr	r6, [r4, r7, lsl #2]
   21128:	orr	r0, r6, r3, lsl r0
   2112c:	str	r0, [r4, r7, lsl #2]
   21130:	b	210f8 <__assert_fail@plt+0xf9f8>
   21134:	add	r2, r2, #1
   21138:	add	r1, r1, #2
   2113c:	mov	r0, #0
   21140:	cmp	r2, #256	; 0x100
   21144:	beq	21328 <__assert_fail@plt+0xfc28>
   21148:	ldrsh	r0, [r1]
   2114c:	cmn	r0, #1
   21150:	bgt	21134 <__assert_fail@plt+0xfa34>
   21154:	ldrb	r0, [r8, r2]
   21158:	ubfx	r7, r0, #5, #3
   2115c:	and	r0, r0, #31
   21160:	ldr	r6, [r4, r7, lsl #2]
   21164:	orr	r0, r6, r3, lsl r0
   21168:	str	r0, [r4, r7, lsl #2]
   2116c:	b	21134 <__assert_fail@plt+0xfa34>
   21170:	mov	r2, #0
   21174:	mov	r3, #1
   21178:	ldrb	r0, [r1, #1]
   2117c:	tst	r0, #2
   21180:	bne	211a4 <__assert_fail@plt+0xfaa4>
   21184:	add	r2, r2, #1
   21188:	add	r1, r1, #2
   2118c:	mov	r0, #0
   21190:	cmp	r2, #256	; 0x100
   21194:	beq	21328 <__assert_fail@plt+0xfc28>
   21198:	ldrb	r0, [r1, #1]
   2119c:	tst	r0, #2
   211a0:	beq	21184 <__assert_fail@plt+0xfa84>
   211a4:	ldrb	r0, [r8, r2]
   211a8:	ubfx	r7, r0, #5, #3
   211ac:	and	r0, r0, #31
   211b0:	ldr	r6, [r4, r7, lsl #2]
   211b4:	orr	r0, r6, r3, lsl r0
   211b8:	str	r0, [r4, r7, lsl #2]
   211bc:	b	21184 <__assert_fail@plt+0xfa84>
   211c0:	add	r2, r2, #1
   211c4:	add	r1, r1, #2
   211c8:	mov	r0, #0
   211cc:	cmp	r2, #256	; 0x100
   211d0:	beq	21328 <__assert_fail@plt+0xfc28>
   211d4:	ldrb	r0, [r1]
   211d8:	tst	r0, #4
   211dc:	beq	211c0 <__assert_fail@plt+0xfac0>
   211e0:	ldrb	r0, [r8, r2]
   211e4:	ubfx	r7, r0, #5, #3
   211e8:	and	r0, r0, #31
   211ec:	ldr	r6, [r4, r7, lsl #2]
   211f0:	orr	r0, r6, r3, lsl r0
   211f4:	str	r0, [r4, r7, lsl #2]
   211f8:	b	211c0 <__assert_fail@plt+0xfac0>
   211fc:	mov	r2, #0
   21200:	mov	r3, #1
   21204:	ldrb	r0, [r1, #1]
   21208:	tst	r0, #32
   2120c:	bne	21230 <__assert_fail@plt+0xfb30>
   21210:	add	r2, r2, #1
   21214:	add	r1, r1, #2
   21218:	mov	r0, #0
   2121c:	cmp	r2, #256	; 0x100
   21220:	beq	21328 <__assert_fail@plt+0xfc28>
   21224:	ldrb	r0, [r1, #1]
   21228:	tst	r0, #32
   2122c:	beq	21210 <__assert_fail@plt+0xfb10>
   21230:	ldrb	r0, [r8, r2]
   21234:	ubfx	r7, r0, #5, #3
   21238:	and	r0, r0, #31
   2123c:	ldr	r6, [r4, r7, lsl #2]
   21240:	orr	r0, r6, r3, lsl r0
   21244:	str	r0, [r4, r7, lsl #2]
   21248:	b	21210 <__assert_fail@plt+0xfb10>
   2124c:	add	r2, r2, #1
   21250:	add	r1, r1, #2
   21254:	mov	r0, #0
   21258:	cmp	r2, #256	; 0x100
   2125c:	beq	21328 <__assert_fail@plt+0xfc28>
   21260:	ldrb	r0, [r1, #1]
   21264:	tst	r0, #16
   21268:	beq	2124c <__assert_fail@plt+0xfb4c>
   2126c:	ldrb	r0, [r8, r2]
   21270:	ubfx	r7, r0, #5, #3
   21274:	and	r0, r0, #31
   21278:	ldr	r6, [r4, r7, lsl #2]
   2127c:	orr	r0, r6, r3, lsl r0
   21280:	str	r0, [r4, r7, lsl #2]
   21284:	b	2124c <__assert_fail@plt+0xfb4c>
   21288:	mov	r2, #0
   2128c:	mov	r3, #1
   21290:	ldrb	r0, [r1, #1]
   21294:	tst	r0, #4
   21298:	bne	212bc <__assert_fail@plt+0xfbbc>
   2129c:	add	r2, r2, #1
   212a0:	add	r1, r1, #2
   212a4:	mov	r0, #0
   212a8:	cmp	r2, #256	; 0x100
   212ac:	beq	21328 <__assert_fail@plt+0xfc28>
   212b0:	ldrb	r0, [r1, #1]
   212b4:	tst	r0, #4
   212b8:	beq	2129c <__assert_fail@plt+0xfb9c>
   212bc:	ldrb	r0, [r8, r2]
   212c0:	ubfx	r7, r0, #5, #3
   212c4:	and	r0, r0, #31
   212c8:	ldr	r6, [r4, r7, lsl #2]
   212cc:	orr	r0, r6, r3, lsl r0
   212d0:	str	r0, [r4, r7, lsl #2]
   212d4:	b	2129c <__assert_fail@plt+0xfb9c>
   212d8:	mov	r2, #0
   212dc:	mov	r3, #1
   212e0:	ldrb	r0, [r1, #1]
   212e4:	tst	r0, #8
   212e8:	bne	2130c <__assert_fail@plt+0xfc0c>
   212ec:	add	r2, r2, #1
   212f0:	add	r1, r1, #2
   212f4:	mov	r0, #0
   212f8:	cmp	r2, #256	; 0x100
   212fc:	beq	21328 <__assert_fail@plt+0xfc28>
   21300:	ldrb	r0, [r1, #1]
   21304:	tst	r0, #8
   21308:	beq	212ec <__assert_fail@plt+0xfbec>
   2130c:	ldrb	r0, [r8, r2]
   21310:	ubfx	r7, r0, #5, #3
   21314:	and	r0, r0, #31
   21318:	ldr	r6, [r4, r7, lsl #2]
   2131c:	orr	r0, r6, r3, lsl r0
   21320:	str	r0, [r4, r7, lsl #2]
   21324:	b	212ec <__assert_fail@plt+0xfbec>
   21328:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2132c:	mov	r0, #12
   21330:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21334:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21338:	add	fp, sp, #24
   2133c:	ldr	r3, [r1, #24]
   21340:	mvn	r7, #1
   21344:	ldr	r2, [r1, #28]
   21348:	mov	r4, #0
   2134c:	uxtab	r3, r7, r3
   21350:	cmp	r3, #14
   21354:	bhi	21478 <__assert_fail@plt+0xfd78>
   21358:	add	r7, pc, #0
   2135c:	ldr	pc, [r7, r3, lsl #2]
   21360:	andeq	r1, r2, ip, lsr #9
   21364:	andeq	r1, r2, r8, ror r4
   21368:	muleq	r2, r0, r4
   2136c:	andeq	r1, r2, r8, ror r4
   21370:	andeq	r1, r2, r8, ror r4
   21374:	andeq	r1, r2, r8, ror r4
   21378:	muleq	r2, ip, r3
   2137c:	muleq	r2, ip, r3
   21380:	strdeq	r1, [r2], -r0
   21384:	strdeq	r1, [r2], -r0
   21388:	muleq	r2, ip, r3
   2138c:	andeq	r1, r2, r8, ror r4
   21390:	andeq	r1, r2, r8, ror r4
   21394:	andeq	r1, r2, r8, ror r4
   21398:	andeq	r1, r2, ip, lsr #9
   2139c:	ldr	r1, [r1, #16]
   213a0:	ldr	r5, [r1, #28]
   213a4:	ldr	r6, [r0, #20]
   213a8:	add	r0, r2, r2, lsl #1
   213ac:	mov	r1, #1
   213b0:	str	r1, [r6, r0, lsl #2]!
   213b4:	mov	r0, #4
   213b8:	mov	r7, r6
   213bc:	str	r1, [r7, #4]!
   213c0:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   213c4:	cmp	r0, #0
   213c8:	str	r0, [r6, #8]
   213cc:	strne	r5, [r0]
   213d0:	movne	r0, r4
   213d4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   213d8:	mov	r0, #0
   213dc:	str	r0, [r7]
   213e0:	str	r0, [r6]
   213e4:	mov	r4, #12
   213e8:	mov	r0, r4
   213ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   213f0:	ldrb	r3, [r0, #88]	; 0x58
   213f4:	add	r6, r1, #16
   213f8:	add	r5, r2, r2, lsl #1
   213fc:	orr	r3, r3, #1
   21400:	strb	r3, [r0, #88]	; 0x58
   21404:	mov	r3, r6
   21408:	ldr	r7, [r1, #4]
   2140c:	ldr	r1, [r1, #8]
   21410:	cmp	r1, #0
   21414:	addne	r3, r1, #12
   21418:	cmp	r7, #0
   2141c:	ldr	r1, [r3]
   21420:	addne	r6, r7, #12
   21424:	ldr	r8, [r1, #28]
   21428:	ldr	r1, [r6]
   2142c:	ldr	r6, [r0, #20]
   21430:	mov	r0, #2
   21434:	ldr	r9, [r1, #28]
   21438:	mov	r7, r6
   2143c:	str	r0, [r7, r5, lsl #2]!
   21440:	mov	r0, #8
   21444:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   21448:	cmp	r0, #0
   2144c:	str	r0, [r7, #8]
   21450:	beq	213e4 <__assert_fail@plt+0xfce4>
   21454:	add	r1, r6, r5, lsl #2
   21458:	cmp	r9, r8
   2145c:	add	r1, r1, #4
   21460:	bne	214b4 <__assert_fail@plt+0xfdb4>
   21464:	mov	r2, #1
   21468:	str	r2, [r1]
   2146c:	str	r9, [r0]
   21470:	mov	r0, r4
   21474:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21478:	ldr	r1, [r1, #16]
   2147c:	ldr	r0, [r0, #12]
   21480:	ldr	r1, [r1, #28]
   21484:	str	r1, [r0, r2, lsl #2]
   21488:	mov	r0, r4
   2148c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21490:	ldr	r7, [r1, #16]
   21494:	ldr	r3, [r0, #12]
   21498:	ldr	r5, [r7, #28]
   2149c:	str	r5, [r3, r2, lsl #2]
   214a0:	ldrb	r1, [r1, #24]
   214a4:	cmp	r1, #4
   214a8:	beq	213a4 <__assert_fail@plt+0xfca4>
   214ac:	mov	r0, r4
   214b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   214b4:	mov	r2, #2
   214b8:	str	r2, [r1]
   214bc:	stmcs	r0, {r8, r9}
   214c0:	strcc	r9, [r0]
   214c4:	strcc	r8, [r0, #4]
   214c8:	mov	r0, r4
   214cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   214d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214d4:	add	fp, sp, #28
   214d8:	sub	sp, sp, #4
   214dc:	ldr	r6, [r3, #4]
   214e0:	tst	r2, #16
   214e4:	mov	r9, r3
   214e8:	mov	r7, r1
   214ec:	mov	r8, r0
   214f0:	cmpne	r6, #0
   214f4:	bne	216ac <__assert_fail@plt+0xffac>
   214f8:	ldr	r1, [r7, #64]	; 0x40
   214fc:	cmp	r1, #31
   21500:	beq	216d4 <__assert_fail@plt+0xffd4>
   21504:	ldr	r0, [r7, #56]	; 0x38
   21508:	add	r0, r0, r1, lsl #5
   2150c:	add	r2, r1, #1
   21510:	vmov.i32	q8, #0	; 0x00000000
   21514:	mov	r1, #0
   21518:	str	r2, [r7, #64]	; 0x40
   2151c:	mov	r2, #8
   21520:	add	sl, r0, #4
   21524:	str	r1, [r0, #20]
   21528:	str	r1, [r0, #24]
   2152c:	str	r2, [r0, #28]
   21530:	mov	r0, #28
   21534:	mov	r1, sl
   21538:	vst1.32	{d16-d17}, [r1], r0
   2153c:	mvn	r0, #0
   21540:	str	r0, [r1]
   21544:	ldr	r1, [r7, #64]	; 0x40
   21548:	cmp	r1, #31
   2154c:	beq	21734 <__assert_fail@plt+0x10034>
   21550:	ldr	r0, [r7, #56]	; 0x38
   21554:	add	r0, r0, r1, lsl #5
   21558:	add	r2, r1, #1
   2155c:	vmov.i32	q8, #0	; 0x00000000
   21560:	mov	r1, #0
   21564:	str	r2, [r7, #64]	; 0x40
   21568:	mov	r2, #9
   2156c:	add	r5, r0, #4
   21570:	str	r1, [r0, #20]
   21574:	str	r1, [r0, #24]
   21578:	str	r2, [r0, #28]
   2157c:	mov	r0, #28
   21580:	mov	r1, r5
   21584:	vst1.32	{d16-d17}, [r1], r0
   21588:	mvn	r0, #0
   2158c:	str	r0, [r1]
   21590:	cmp	r6, #0
   21594:	mov	r4, r5
   21598:	beq	215ec <__assert_fail@plt+0xfeec>
   2159c:	ldr	r1, [r7, #64]	; 0x40
   215a0:	cmp	r1, #31
   215a4:	beq	216fc <__assert_fail@plt+0xfffc>
   215a8:	ldr	r0, [r7, #56]	; 0x38
   215ac:	add	r4, r0, r1, lsl #5
   215b0:	add	r2, r1, #1
   215b4:	mov	r0, #0
   215b8:	cmp	r5, #0
   215bc:	mov	r1, #16
   215c0:	str	r2, [r7, #64]	; 0x40
   215c4:	mvn	r2, #0
   215c8:	str	r0, [r4, #4]!
   215cc:	add	r3, r4, #20
   215d0:	str	r6, [r4, #4]
   215d4:	str	r5, [r4, #8]
   215d8:	str	r0, [r4, #12]
   215dc:	str	r0, [r4, #16]
   215e0:	stm	r3, {r0, r1, r2}
   215e4:	str	r4, [r6]
   215e8:	strne	r4, [r5]
   215ec:	ldr	r1, [r7, #64]	; 0x40
   215f0:	cmp	r1, #31
   215f4:	beq	21780 <__assert_fail@plt+0x10080>
   215f8:	ldr	r0, [r7, #56]	; 0x38
   215fc:	add	r6, r0, r1, lsl #5
   21600:	add	r2, r1, #1
   21604:	mov	r0, #0
   21608:	cmp	sl, #0
   2160c:	mov	r1, #16
   21610:	str	r2, [r7, #64]	; 0x40
   21614:	mvn	r2, #0
   21618:	str	r0, [r6, #4]!
   2161c:	add	r3, r6, #20
   21620:	str	sl, [r6, #4]
   21624:	str	r4, [r6, #8]
   21628:	str	r0, [r6, #12]
   2162c:	str	r0, [r6, #16]
   21630:	stm	r3, {r0, r1, r2}
   21634:	strne	r6, [sl]
   21638:	cmp	r4, #0
   2163c:	strne	r6, [r4]
   21640:	cmp	r5, #0
   21644:	beq	21654 <__assert_fail@plt+0xff54>
   21648:	cmp	sl, #0
   2164c:	cmpne	r4, #0
   21650:	bne	2166c <__assert_fail@plt+0xff6c>
   21654:	mov	r0, #12
   21658:	mov	r6, #0
   2165c:	str	r0, [r8]
   21660:	mov	r0, r6
   21664:	sub	sp, fp, #28
   21668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2166c:	cmp	r6, #0
   21670:	beq	21654 <__assert_fail@plt+0xff54>
   21674:	ldr	r0, [r9, #20]
   21678:	str	r0, [r5, #20]
   2167c:	str	r0, [sl, #20]
   21680:	ldr	r1, [r9, #24]
   21684:	ldr	r0, [r5, #24]
   21688:	lsr	r1, r1, #19
   2168c:	bfi	r0, r1, #19, #1
   21690:	str	r0, [r5, #24]
   21694:	ldr	r0, [sl, #24]
   21698:	bfi	r0, r1, #19, #1
   2169c:	str	r0, [sl, #24]
   216a0:	mov	r0, r6
   216a4:	sub	sp, fp, #28
   216a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216ac:	ldr	r0, [r9, #20]
   216b0:	cmp	r0, #31
   216b4:	bgt	216c8 <__assert_fail@plt+0xffc8>
   216b8:	ldr	r1, [r7, #80]	; 0x50
   216bc:	mov	r2, #1
   216c0:	tst	r1, r2, lsl r0
   216c4:	bne	214f8 <__assert_fail@plt+0xfdf8>
   216c8:	mov	r0, r6
   216cc:	sub	sp, fp, #28
   216d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216d4:	mov	r0, #996	; 0x3e4
   216d8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   216dc:	cmp	r0, #0
   216e0:	beq	21724 <__assert_fail@plt+0x10024>
   216e4:	ldr	r1, [r7, #56]	; 0x38
   216e8:	str	r1, [r0]
   216ec:	mov	r1, #0
   216f0:	str	r1, [r7, #64]	; 0x40
   216f4:	str	r0, [r7, #56]	; 0x38
   216f8:	b	21508 <__assert_fail@plt+0xfe08>
   216fc:	mov	r0, #996	; 0x3e4
   21700:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   21704:	cmp	r0, #0
   21708:	beq	21770 <__assert_fail@plt+0x10070>
   2170c:	ldr	r1, [r7, #56]	; 0x38
   21710:	str	r1, [r0]
   21714:	mov	r1, #0
   21718:	str	r1, [r7, #64]	; 0x40
   2171c:	str	r0, [r7, #56]	; 0x38
   21720:	b	215ac <__assert_fail@plt+0xfeac>
   21724:	mov	sl, #0
   21728:	ldr	r1, [r7, #64]	; 0x40
   2172c:	cmp	r1, #31
   21730:	bne	21550 <__assert_fail@plt+0xfe50>
   21734:	mov	r0, #996	; 0x3e4
   21738:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   2173c:	cmp	r0, #0
   21740:	beq	2175c <__assert_fail@plt+0x1005c>
   21744:	ldr	r1, [r7, #56]	; 0x38
   21748:	str	r1, [r0]
   2174c:	mov	r1, #0
   21750:	str	r1, [r7, #64]	; 0x40
   21754:	str	r0, [r7, #56]	; 0x38
   21758:	b	21554 <__assert_fail@plt+0xfe54>
   2175c:	mov	r5, #0
   21760:	cmp	r6, #0
   21764:	mov	r4, r5
   21768:	bne	2159c <__assert_fail@plt+0xfe9c>
   2176c:	b	215ec <__assert_fail@plt+0xfeec>
   21770:	mov	r4, #0
   21774:	ldr	r1, [r7, #64]	; 0x40
   21778:	cmp	r1, #31
   2177c:	bne	215f8 <__assert_fail@plt+0xfef8>
   21780:	mov	r0, #996	; 0x3e4
   21784:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   21788:	cmp	r0, #0
   2178c:	beq	217a8 <__assert_fail@plt+0x100a8>
   21790:	ldr	r1, [r7, #56]	; 0x38
   21794:	str	r1, [r0]
   21798:	mov	r1, #0
   2179c:	str	r1, [r7, #64]	; 0x40
   217a0:	str	r0, [r7, #56]	; 0x38
   217a4:	b	215fc <__assert_fail@plt+0xfefc>
   217a8:	mov	r6, #0
   217ac:	cmp	r5, #0
   217b0:	bne	21648 <__assert_fail@plt+0xff48>
   217b4:	b	21654 <__assert_fail@plt+0xff54>
   217b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217bc:	add	fp, sp, #28
   217c0:	sub	sp, sp, #12
   217c4:	mov	r4, r0
   217c8:	ldr	r7, [r0, #4]
   217cc:	ldr	r0, [r0, #8]
   217d0:	mov	r5, r2
   217d4:	mov	r9, r1
   217d8:	cmp	r0, r7
   217dc:	bcs	218a8 <__assert_fail@plt+0x101a8>
   217e0:	ldr	r1, [r4]
   217e4:	str	r9, [r1, r0, lsl #3]!
   217e8:	str	r5, [r1, #4]
   217ec:	ldr	r0, [r4]
   217f0:	ldr	r1, [r4, #8]
   217f4:	add	r0, r0, r1, lsl #3
   217f8:	ldr	r1, [r0, #4]
   217fc:	bfc	r1, #8, #10
   21800:	str	r1, [r0, #4]
   21804:	uxtb	r1, r5
   21808:	cmp	r1, #5
   2180c:	bne	21820 <__assert_fail@plt+0x10120>
   21810:	ldr	r2, [r4, #92]	; 0x5c
   21814:	mov	r0, #1048576	; 0x100000
   21818:	cmp	r2, #1
   2181c:	bgt	21830 <__assert_fail@plt+0x10130>
   21820:	sub	r0, r1, #6
   21824:	clz	r0, r0
   21828:	lsr	r0, r0, #5
   2182c:	lsl	r0, r0, #20
   21830:	ldr	r1, [r4]
   21834:	ldr	r2, [r4, #8]
   21838:	add	r1, r1, r2, lsl #3
   2183c:	ldr	r2, [r1, #4]
   21840:	bic	r2, r2, #1048576	; 0x100000
   21844:	orr	r0, r2, r0
   21848:	mvn	r2, #0
   2184c:	str	r0, [r1, #4]
   21850:	ldr	r0, [r4, #8]
   21854:	ldr	r1, [r4, #12]
   21858:	str	r2, [r1, r0, lsl #2]
   2185c:	mov	r2, #0
   21860:	ldr	r0, [r4, #8]
   21864:	ldr	r1, [r4, #20]
   21868:	add	r0, r0, r0, lsl #1
   2186c:	str	r2, [r1, r0, lsl #2]!
   21870:	str	r2, [r1, #4]
   21874:	str	r2, [r1, #8]
   21878:	ldr	r0, [r4, #8]
   2187c:	ldr	r1, [r4, #24]
   21880:	add	r0, r0, r0, lsl #1
   21884:	str	r2, [r1, r0, lsl #2]!
   21888:	str	r2, [r1, #4]
   2188c:	str	r2, [r1, #8]
   21890:	ldr	r6, [r4, #8]
   21894:	add	r0, r6, #1
   21898:	str	r0, [r4, #8]
   2189c:	mov	r0, r6
   218a0:	sub	sp, fp, #28
   218a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218a8:	movw	r0, #21845	; 0x5555
   218ac:	lsl	r1, r7, #1
   218b0:	mvn	r6, #0
   218b4:	movt	r0, #5461	; 0x1555
   218b8:	cmp	r1, r0
   218bc:	bhi	2189c <__assert_fail@plt+0x1019c>
   218c0:	ldr	r0, [r4]
   218c4:	str	r1, [sp, #8]
   218c8:	lsl	r1, r7, #4
   218cc:	bl	2b910 <__assert_fail@plt+0x1a210>
   218d0:	cmp	r0, #0
   218d4:	beq	2189c <__assert_fail@plt+0x1019c>
   218d8:	str	r0, [r4]
   218dc:	lsl	r8, r7, #3
   218e0:	ldr	r0, [r4, #12]
   218e4:	mov	r1, r8
   218e8:	bl	2b910 <__assert_fail@plt+0x1a210>
   218ec:	str	r0, [sp, #4]
   218f0:	ldr	r0, [r4, #16]
   218f4:	mov	r1, r8
   218f8:	bl	2b910 <__assert_fail@plt+0x1a210>
   218fc:	mov	r2, r0
   21900:	add	r1, r7, r7, lsl #1
   21904:	ldr	r0, [r4, #20]
   21908:	mov	r7, r2
   2190c:	lsl	r8, r1, #3
   21910:	mov	r1, r8
   21914:	bl	2b910 <__assert_fail@plt+0x1a210>
   21918:	mov	sl, r0
   2191c:	ldr	r0, [r4, #24]
   21920:	mov	r1, r8
   21924:	bl	2b910 <__assert_fail@plt+0x1a210>
   21928:	mov	r8, r0
   2192c:	ldr	r0, [sp, #4]
   21930:	cmp	r0, #0
   21934:	beq	21944 <__assert_fail@plt+0x10244>
   21938:	cmp	r7, #0
   2193c:	cmpne	sl, #0
   21940:	bne	2196c <__assert_fail@plt+0x1026c>
   21944:	bl	13ddc <__assert_fail@plt+0x26dc>
   21948:	mov	r0, r7
   2194c:	bl	13ddc <__assert_fail@plt+0x26dc>
   21950:	mov	r0, sl
   21954:	bl	13ddc <__assert_fail@plt+0x26dc>
   21958:	mov	r0, r8
   2195c:	bl	13ddc <__assert_fail@plt+0x26dc>
   21960:	mov	r0, r6
   21964:	sub	sp, fp, #28
   21968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2196c:	cmp	r8, #0
   21970:	beq	21944 <__assert_fail@plt+0x10244>
   21974:	add	r1, r4, #12
   21978:	stm	r1, {r0, r7, sl}
   2197c:	str	r8, [r4, #24]
   21980:	ldr	r0, [sp, #8]
   21984:	str	r0, [r4, #4]
   21988:	ldr	r0, [r4, #8]
   2198c:	b	217e0 <__assert_fail@plt+0x100e0>
   21990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21994:	add	fp, sp, #28
   21998:	sub	sp, sp, #44	; 0x2c
   2199c:	mov	r8, r0
   219a0:	ldr	r0, [r1, #20]
   219a4:	add	r4, r2, r2, lsl #1
   219a8:	mov	r5, r1
   219ac:	mov	r1, #0
   219b0:	mov	r9, r3
   219b4:	mov	r6, r2
   219b8:	add	r0, r0, r4, lsl #2
   219bc:	ldr	r0, [r0, #4]
   219c0:	str	r1, [sp, #36]	; 0x24
   219c4:	add	r0, r0, #1
   219c8:	str	r0, [sp, #32]
   219cc:	lsl	r0, r0, #2
   219d0:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   219d4:	cmp	r0, #0
   219d8:	str	r0, [sp, #40]	; 0x28
   219dc:	beq	21bac <__assert_fail@plt+0x104ac>
   219e0:	mov	r1, #1
   219e4:	str	r6, [r0]
   219e8:	str	r1, [sp, #36]	; 0x24
   219ec:	mvn	r1, #0
   219f0:	ldr	r0, [r5, #24]
   219f4:	add	r0, r0, r4, lsl #2
   219f8:	str	r1, [r0, #4]
   219fc:	ldr	r2, [r5]
   21a00:	add	r0, r2, r6, lsl #3
   21a04:	ldr	r0, [r0, #4]
   21a08:	ubfx	r1, r0, #8, #10
   21a0c:	cmp	r1, #0
   21a10:	beq	21a6c <__assert_fail@plt+0x1036c>
   21a14:	ldr	r3, [r5, #20]
   21a18:	add	r3, r3, r4, lsl #2
   21a1c:	ldr	r7, [r3, #4]
   21a20:	cmp	r7, #0
   21a24:	beq	21a6c <__assert_fail@plt+0x1036c>
   21a28:	ldr	r3, [r3, #8]
   21a2c:	ldr	r3, [r3]
   21a30:	add	r2, r2, r3, lsl #3
   21a34:	ldrb	r2, [r2, #6]
   21a38:	tst	r2, #4
   21a3c:	bne	21a6c <__assert_fail@plt+0x1036c>
   21a40:	str	r1, [sp]
   21a44:	mov	r0, r5
   21a48:	mov	r1, r6
   21a4c:	mov	r2, r6
   21a50:	mov	r3, r6
   21a54:	bl	21bb8 <__assert_fail@plt+0x104b8>
   21a58:	cmp	r0, #0
   21a5c:	bne	21ba4 <__assert_fail@plt+0x104a4>
   21a60:	ldr	r0, [r5]
   21a64:	add	r0, r0, r6, lsl #3
   21a68:	ldr	r0, [r0, #4]
   21a6c:	tst	r0, #8
   21a70:	beq	21b78 <__assert_fail@plt+0x10478>
   21a74:	ldr	r0, [r5, #20]
   21a78:	add	r1, r0, r4, lsl #2
   21a7c:	ldr	r1, [r1, #4]
   21a80:	cmp	r1, #1
   21a84:	blt	21b78 <__assert_fail@plt+0x10478>
   21a88:	str	r8, [sp, #12]
   21a8c:	mov	r8, #0
   21a90:	add	r7, sp, #16
   21a94:	add	sl, sp, #32
   21a98:	mov	r6, #0
   21a9c:	str	r9, [sp, #8]
   21aa0:	b	21ac0 <__assert_fail@plt+0x103c0>
   21aa4:	mov	r8, #1
   21aa8:	ldr	r0, [r5, #20]
   21aac:	add	r6, r6, #1
   21ab0:	add	r1, r0, r4, lsl #2
   21ab4:	ldr	r1, [r1, #4]
   21ab8:	cmp	r6, r1
   21abc:	bge	21b4c <__assert_fail@plt+0x1044c>
   21ac0:	add	r0, r0, r4, lsl #2
   21ac4:	ldr	r0, [r0, #8]
   21ac8:	ldr	r2, [r0, r6, lsl #2]
   21acc:	ldr	r0, [r5, #24]
   21ad0:	add	r9, r2, r2, lsl #1
   21ad4:	add	r0, r0, r9, lsl #2
   21ad8:	ldr	r1, [r0, #4]
   21adc:	cmn	r1, #1
   21ae0:	beq	21aa4 <__assert_fail@plt+0x103a4>
   21ae4:	cmp	r1, #0
   21ae8:	bne	21b08 <__assert_fail@plt+0x10408>
   21aec:	mov	r0, r7
   21af0:	mov	r1, r5
   21af4:	mov	r3, #0
   21af8:	bl	21990 <__assert_fail@plt+0x10290>
   21afc:	cmp	r0, #0
   21b00:	beq	21b18 <__assert_fail@plt+0x10418>
   21b04:	b	21ba4 <__assert_fail@plt+0x104a4>
   21b08:	vldr	d16, [r0]
   21b0c:	ldr	r0, [r0, #8]
   21b10:	str	r0, [sp, #24]
   21b14:	vstr	d16, [sp, #16]
   21b18:	mov	r0, sl
   21b1c:	mov	r1, r7
   21b20:	bl	22048 <__assert_fail@plt+0x10948>
   21b24:	cmp	r0, #0
   21b28:	bne	21ba4 <__assert_fail@plt+0x104a4>
   21b2c:	ldr	r0, [r5, #24]
   21b30:	add	r0, r0, r9, lsl #2
   21b34:	ldr	r0, [r0, #4]
   21b38:	cmp	r0, #0
   21b3c:	bne	21aa8 <__assert_fail@plt+0x103a8>
   21b40:	ldr	r0, [sp, #24]
   21b44:	bl	13ddc <__assert_fail@plt+0x26dc>
   21b48:	b	21aa4 <__assert_fail@plt+0x103a4>
   21b4c:	tst	r8, #1
   21b50:	ldr	r8, [sp, #12]
   21b54:	ldr	r0, [sp, #8]
   21b58:	beq	21b78 <__assert_fail@plt+0x10478>
   21b5c:	cmp	r0, #0
   21b60:	bne	21b78 <__assert_fail@plt+0x10478>
   21b64:	ldr	r0, [r5, #24]
   21b68:	mov	r1, #0
   21b6c:	add	r0, r0, r4, lsl #2
   21b70:	str	r1, [r0, #4]
   21b74:	b	21b90 <__assert_fail@plt+0x10490>
   21b78:	ldr	r0, [r5, #24]
   21b7c:	vldr	d16, [sp, #32]
   21b80:	ldr	r1, [sp, #40]	; 0x28
   21b84:	add	r0, r0, r4, lsl #2
   21b88:	str	r1, [r0, #8]
   21b8c:	vstr	d16, [r0]
   21b90:	ldr	r0, [sp, #40]	; 0x28
   21b94:	vldr	d16, [sp, #32]
   21b98:	str	r0, [r8, #8]
   21b9c:	mov	r0, #0
   21ba0:	vstr	d16, [r8]
   21ba4:	sub	sp, fp, #28
   21ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21bac:	mov	r0, #12
   21bb0:	sub	sp, fp, #28
   21bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21bbc:	add	fp, sp, #28
   21bc0:	sub	sp, sp, #20
   21bc4:	mov	r9, r0
   21bc8:	ldr	r0, [fp, #8]
   21bcc:	mov	r8, r2
   21bd0:	mov	r5, r1
   21bd4:	str	r3, [sp, #8]
   21bd8:	str	r0, [sp, #12]
   21bdc:	ldr	r1, [sp, #12]
   21be0:	movw	r0, #65280	; 0xff00
   21be4:	movt	r0, #3
   21be8:	and	r0, r0, r1, lsl #8
   21bec:	str	r0, [sp, #16]
   21bf0:	ldr	r2, [r9]
   21bf4:	add	r3, r2, r5, lsl #3
   21bf8:	ldrb	r0, [r3, #4]!
   21bfc:	cmp	r0, #4
   21c00:	bne	21cd8 <__assert_fail@plt+0x105d8>
   21c04:	ldr	r0, [r9, #12]
   21c08:	ldr	r1, [r9, #20]
   21c0c:	add	r7, r8, r8, lsl #1
   21c10:	ldr	r6, [r0, r5, lsl #2]
   21c14:	add	r0, r1, r7, lsl #2
   21c18:	mov	r1, #0
   21c1c:	str	r1, [r0, #4]
   21c20:	mov	r0, r9
   21c24:	ldr	r1, [r2, r6, lsl #3]!
   21c28:	ldr	r2, [r2, #4]
   21c2c:	bl	217b8 <__assert_fail@plt+0x100b8>
   21c30:	cmn	r0, #1
   21c34:	beq	22038 <__assert_fail@plt+0x10938>
   21c38:	mov	r4, r0
   21c3c:	ldr	r0, [r9]
   21c40:	movw	r2, #255	; 0xff
   21c44:	movt	r2, #65532	; 0xfffc
   21c48:	add	r0, r0, r4, lsl #3
   21c4c:	ldr	r1, [r0, #4]
   21c50:	and	r1, r1, r2
   21c54:	ldr	r2, [sp, #16]
   21c58:	orr	r1, r1, r2
   21c5c:	movw	r2, #65280	; 0xff00
   21c60:	str	r1, [r0, #4]
   21c64:	movt	r2, #3
   21c68:	ldr	r0, [r9]
   21c6c:	add	r1, r0, r6, lsl #3
   21c70:	add	r0, r0, r4, lsl #3
   21c74:	ldr	r1, [r1, #4]
   21c78:	and	r1, r1, r2
   21c7c:	ldr	r2, [r0, #4]
   21c80:	orr	r1, r1, r2
   21c84:	str	r1, [r0, #4]
   21c88:	ldr	r0, [r9]
   21c8c:	add	r0, r0, r4, lsl #3
   21c90:	ldr	r1, [r0, #4]
   21c94:	orr	r1, r1, #262144	; 0x40000
   21c98:	str	r1, [r0, #4]
   21c9c:	ldr	r0, [r9, #16]
   21ca0:	str	r6, [r0, r4, lsl #2]
   21ca4:	ldr	r0, [r9, #12]
   21ca8:	ldr	r1, [r0, r5, lsl #2]
   21cac:	str	r1, [r0, r8, lsl #2]
   21cb0:	mov	r1, r4
   21cb4:	ldr	r0, [r9, #20]
   21cb8:	add	r0, r0, r7, lsl #2
   21cbc:	bl	221e8 <__assert_fail@plt+0x10ae8>
   21cc0:	cmp	r0, #0
   21cc4:	mov	r5, r6
   21cc8:	mov	r8, r4
   21ccc:	mov	r7, #12
   21cd0:	bne	21bf0 <__assert_fail@plt+0x104f0>
   21cd4:	b	22008 <__assert_fail@plt+0x10908>
   21cd8:	ldr	r0, [r9, #20]
   21cdc:	add	ip, r5, r5, lsl #1
   21ce0:	add	r7, r0, ip, lsl #2
   21ce4:	ldr	r1, [r7, #4]
   21ce8:	cmp	r1, #0
   21cec:	beq	21fec <__assert_fail@plt+0x108ec>
   21cf0:	ldr	r7, [r7, #8]
   21cf4:	add	r4, r8, r8, lsl #1
   21cf8:	cmp	r1, #1
   21cfc:	add	r0, r0, r4, lsl #2
   21d00:	ldr	sl, [r7]
   21d04:	mov	r7, #0
   21d08:	str	r7, [r0, #4]
   21d0c:	beq	21f14 <__assert_fail@plt+0x10814>
   21d10:	ldr	r1, [r9, #8]
   21d14:	mov	r8, r4
   21d18:	ldr	r4, [sp, #12]
   21d1c:	sub	r3, r1, #1
   21d20:	cmp	r3, #1
   21d24:	blt	21d74 <__assert_fail@plt+0x10674>
   21d28:	add	r3, r2, r3, lsl #3
   21d2c:	ldr	r7, [r3, #4]
   21d30:	ands	r3, r7, #262144	; 0x40000
   21d34:	beq	21d74 <__assert_fail@plt+0x10674>
   21d38:	ldr	r6, [r9, #16]
   21d3c:	sub	r3, r2, #12
   21d40:	sub	r6, r6, #4
   21d44:	ldr	r5, [r6, r1, lsl #2]
   21d48:	cmp	r5, sl
   21d4c:	ubfxeq	r7, r7, #8, #10
   21d50:	cmpeq	r7, r4
   21d54:	beq	21ef8 <__assert_fail@plt+0x107f8>
   21d58:	sub	r7, r1, #2
   21d5c:	cmp	r7, #1
   21d60:	blt	21d74 <__assert_fail@plt+0x10674>
   21d64:	ldr	r7, [r3, r1, lsl #3]
   21d68:	sub	r1, r1, #1
   21d6c:	ands	r5, r7, #262144	; 0x40000
   21d70:	bne	21d44 <__assert_fail@plt+0x10644>
   21d74:	ldr	r1, [r2, sl, lsl #3]!
   21d78:	mov	r0, r9
   21d7c:	mov	r5, ip
   21d80:	ldr	r2, [r2, #4]
   21d84:	bl	217b8 <__assert_fail@plt+0x100b8>
   21d88:	mov	r7, #12
   21d8c:	cmn	r0, #1
   21d90:	beq	22008 <__assert_fail@plt+0x10908>
   21d94:	mov	r6, r0
   21d98:	ldr	r0, [r9]
   21d9c:	movw	r2, #255	; 0xff
   21da0:	mov	r4, r8
   21da4:	movt	r2, #65532	; 0xfffc
   21da8:	add	r0, r0, r6, lsl #3
   21dac:	ldr	r1, [r0, #4]
   21db0:	and	r1, r1, r2
   21db4:	ldr	r2, [sp, #16]
   21db8:	orr	r1, r1, r2
   21dbc:	movw	r2, #65280	; 0xff00
   21dc0:	str	r1, [r0, #4]
   21dc4:	movt	r2, #3
   21dc8:	ldr	r0, [r9]
   21dcc:	add	r1, r0, sl, lsl #3
   21dd0:	add	r0, r0, r6, lsl #3
   21dd4:	ldr	r1, [r1, #4]
   21dd8:	and	r1, r1, r2
   21ddc:	ldr	r2, [r0, #4]
   21de0:	orr	r1, r1, r2
   21de4:	str	r1, [r0, #4]
   21de8:	ldr	r0, [r9]
   21dec:	add	r0, r0, r6, lsl #3
   21df0:	ldr	r1, [r0, #4]
   21df4:	orr	r1, r1, #262144	; 0x40000
   21df8:	str	r1, [r0, #4]
   21dfc:	mov	r1, r6
   21e00:	ldr	r0, [r9, #16]
   21e04:	str	sl, [r0, r6, lsl #2]
   21e08:	ldr	r0, [r9, #20]
   21e0c:	add	r0, r0, r8, lsl #2
   21e10:	bl	221e8 <__assert_fail@plt+0x10ae8>
   21e14:	cmp	r0, #0
   21e18:	beq	22008 <__assert_fail@plt+0x10908>
   21e1c:	ldr	r0, [sp, #12]
   21e20:	ldr	r3, [sp, #8]
   21e24:	mov	r1, sl
   21e28:	mov	r2, r6
   21e2c:	str	r0, [sp]
   21e30:	mov	r0, r9
   21e34:	bl	21bb8 <__assert_fail@plt+0x104b8>
   21e38:	cmp	r0, #0
   21e3c:	bne	22004 <__assert_fail@plt+0x10904>
   21e40:	ldr	r1, [r9, #20]
   21e44:	ldr	r0, [r9]
   21e48:	add	r1, r1, r5, lsl #2
   21e4c:	ldr	r1, [r1, #8]
   21e50:	ldr	r5, [r1, #4]
   21e54:	ldr	r1, [r0, r5, lsl #3]!
   21e58:	ldr	r2, [r0, #4]
   21e5c:	mov	r0, r9
   21e60:	bl	217b8 <__assert_fail@plt+0x100b8>
   21e64:	mov	r7, #12
   21e68:	cmn	r0, #1
   21e6c:	beq	22008 <__assert_fail@plt+0x10908>
   21e70:	mov	r8, r0
   21e74:	ldr	r0, [r9]
   21e78:	movw	r2, #255	; 0xff
   21e7c:	movt	r2, #65532	; 0xfffc
   21e80:	add	r0, r0, r8, lsl #3
   21e84:	ldr	r1, [r0, #4]
   21e88:	and	r1, r1, r2
   21e8c:	ldr	r2, [sp, #16]
   21e90:	orr	r1, r1, r2
   21e94:	movw	r2, #65280	; 0xff00
   21e98:	str	r1, [r0, #4]
   21e9c:	movt	r2, #3
   21ea0:	ldr	r0, [r9]
   21ea4:	add	r1, r0, r5, lsl #3
   21ea8:	add	r0, r0, r8, lsl #3
   21eac:	ldr	r1, [r1, #4]
   21eb0:	and	r1, r1, r2
   21eb4:	ldr	r2, [r0, #4]
   21eb8:	orr	r1, r1, r2
   21ebc:	str	r1, [r0, #4]
   21ec0:	ldr	r0, [r9]
   21ec4:	add	r0, r0, r8, lsl #3
   21ec8:	ldr	r1, [r0, #4]
   21ecc:	orr	r1, r1, #262144	; 0x40000
   21ed0:	str	r1, [r0, #4]
   21ed4:	mov	r1, r8
   21ed8:	ldr	r0, [r9, #16]
   21edc:	str	r5, [r0, r8, lsl #2]
   21ee0:	ldr	r0, [r9, #20]
   21ee4:	add	r0, r0, r4, lsl #2
   21ee8:	bl	221e8 <__assert_fail@plt+0x10ae8>
   21eec:	cmp	r0, #0
   21ef0:	bne	21bf0 <__assert_fail@plt+0x104f0>
   21ef4:	b	22008 <__assert_fail@plt+0x10908>
   21ef8:	sub	r1, r1, #1
   21efc:	mov	r5, ip
   21f00:	bl	221e8 <__assert_fail@plt+0x10ae8>
   21f04:	cmp	r0, #0
   21f08:	mov	r4, r8
   21f0c:	bne	21e40 <__assert_fail@plt+0x10740>
   21f10:	b	22038 <__assert_fail@plt+0x10938>
   21f14:	ldr	r1, [sp, #8]
   21f18:	cmp	r5, r1
   21f1c:	bne	21f28 <__assert_fail@plt+0x10828>
   21f20:	cmp	r8, r5
   21f24:	bne	22014 <__assert_fail@plt+0x10914>
   21f28:	ldr	r1, [r2, sl, lsl #3]!
   21f2c:	ldr	r6, [r3]
   21f30:	mov	r0, r9
   21f34:	ldr	r2, [r2, #4]
   21f38:	bl	217b8 <__assert_fail@plt+0x100b8>
   21f3c:	mov	r8, r0
   21f40:	ubfx	r0, r6, #8, #10
   21f44:	mov	r7, #12
   21f48:	cmn	r8, #1
   21f4c:	beq	22008 <__assert_fail@plt+0x10908>
   21f50:	ldr	r1, [sp, #12]
   21f54:	movw	r7, #255	; 0xff
   21f58:	movt	r7, #65532	; 0xfffc
   21f5c:	orr	r1, r0, r1
   21f60:	movw	r0, #65280	; 0xff00
   21f64:	movt	r0, #3
   21f68:	str	r1, [sp, #12]
   21f6c:	mov	r3, r0
   21f70:	and	r0, r0, r1, lsl #8
   21f74:	ldr	r1, [r9]
   21f78:	add	r1, r1, r8, lsl #3
   21f7c:	ldr	r2, [r1, #4]
   21f80:	and	r2, r2, r7
   21f84:	mov	r7, #12
   21f88:	orr	r0, r2, r0
   21f8c:	str	r0, [r1, #4]
   21f90:	ldr	r0, [r9]
   21f94:	add	r1, r0, sl, lsl #3
   21f98:	add	r0, r0, r8, lsl #3
   21f9c:	ldr	r1, [r1, #4]
   21fa0:	ldr	r2, [r0, #4]
   21fa4:	and	r1, r1, r3
   21fa8:	orr	r1, r1, r2
   21fac:	str	r1, [r0, #4]
   21fb0:	ldr	r0, [r9]
   21fb4:	add	r0, r0, r8, lsl #3
   21fb8:	ldr	r1, [r0, #4]
   21fbc:	orr	r1, r1, #262144	; 0x40000
   21fc0:	str	r1, [r0, #4]
   21fc4:	mov	r1, r8
   21fc8:	ldr	r0, [r9, #16]
   21fcc:	str	sl, [r0, r8, lsl #2]
   21fd0:	ldr	r0, [r9, #20]
   21fd4:	add	r0, r0, r4, lsl #2
   21fd8:	bl	221e8 <__assert_fail@plt+0x10ae8>
   21fdc:	cmp	r0, #0
   21fe0:	mov	r5, sl
   21fe4:	bne	21bdc <__assert_fail@plt+0x104dc>
   21fe8:	b	22008 <__assert_fail@plt+0x10908>
   21fec:	ldr	r0, [r9, #12]
   21ff0:	ldr	r1, [r0, r5, lsl #2]
   21ff4:	str	r1, [r0, r8, lsl #2]
   21ff8:	mov	r0, #0
   21ffc:	sub	sp, fp, #28
   22000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22004:	mov	r7, r0
   22008:	mov	r0, r7
   2200c:	sub	sp, fp, #28
   22010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22014:	mov	r1, sl
   22018:	bl	221e8 <__assert_fail@plt+0x10ae8>
   2201c:	mov	r1, r0
   22020:	mov	r7, #12
   22024:	mov	r0, #0
   22028:	cmp	r1, #0
   2202c:	moveq	r0, r7
   22030:	sub	sp, fp, #28
   22034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22038:	mov	r7, #12
   2203c:	mov	r0, r7
   22040:	sub	sp, fp, #28
   22044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22048:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2204c:	add	fp, sp, #24
   22050:	mov	r8, #0
   22054:	cmp	r1, #0
   22058:	beq	221bc <__assert_fail@plt+0x10abc>
   2205c:	mov	r6, r1
   22060:	ldr	r1, [r1, #4]
   22064:	cmp	r1, #0
   22068:	beq	221bc <__assert_fail@plt+0x10abc>
   2206c:	mov	r9, r0
   22070:	ldr	r2, [r0]
   22074:	ldr	r0, [r0, #4]
   22078:	add	r3, r0, r1, lsl #1
   2207c:	cmp	r2, r3
   22080:	bge	220ac <__assert_fail@plt+0x109ac>
   22084:	ldr	r0, [r9, #8]
   22088:	add	r7, r2, r1
   2208c:	lsl	r1, r7, #3
   22090:	bl	2b910 <__assert_fail@plt+0x1a210>
   22094:	cmp	r0, #0
   22098:	beq	221dc <__assert_fail@plt+0x10adc>
   2209c:	str	r0, [r9, #8]
   220a0:	lsl	r0, r7, #1
   220a4:	str	r0, [r9]
   220a8:	ldr	r0, [r9, #4]
   220ac:	cmp	r0, #0
   220b0:	beq	221c4 <__assert_fail@plt+0x10ac4>
   220b4:	ldr	r2, [r6, #4]
   220b8:	sub	r1, r0, #1
   220bc:	add	r7, r0, r2, lsl #1
   220c0:	sub	r0, r2, #1
   220c4:	orrs	r2, r0, r1
   220c8:	bmi	22124 <__assert_fail@plt+0x10a24>
   220cc:	ldr	r2, [r6, #8]
   220d0:	ldr	r3, [r9, #8]
   220d4:	ldr	r4, [r2, r0, lsl #2]
   220d8:	ldr	r5, [r3, r1, lsl #2]
   220dc:	cmp	r5, r4
   220e0:	beq	22110 <__assert_fail@plt+0x10a10>
   220e4:	sublt	r7, r7, #1
   220e8:	subge	r1, r1, #1
   220ec:	sublt	r0, r0, #1
   220f0:	strlt	r4, [r3, r7, lsl #2]
   220f4:	orr	r5, r0, r1
   220f8:	cmn	r5, #1
   220fc:	ble	22124 <__assert_fail@plt+0x10a24>
   22100:	ldr	r4, [r2, r0, lsl #2]
   22104:	ldr	r5, [r3, r1, lsl #2]
   22108:	cmp	r5, r4
   2210c:	bne	220e4 <__assert_fail@plt+0x109e4>
   22110:	sub	r1, r1, #1
   22114:	sub	r0, r0, #1
   22118:	orr	r5, r0, r1
   2211c:	cmn	r5, #1
   22120:	bgt	22100 <__assert_fail@plt+0x10a00>
   22124:	cmp	r0, #0
   22128:	bmi	22148 <__assert_fail@plt+0x10a48>
   2212c:	add	r2, r0, #1
   22130:	ldr	r0, [r9, #8]
   22134:	ldr	r1, [r6, #8]
   22138:	sub	r7, r7, r2
   2213c:	lsl	r2, r2, #2
   22140:	add	r0, r0, r7, lsl #2
   22144:	bl	11448 <memcpy@plt>
   22148:	ldr	r0, [r9, #4]
   2214c:	ldr	r2, [r6, #4]
   22150:	sub	r1, r0, #1
   22154:	add	r3, r1, r2, lsl #1
   22158:	sub	r2, r3, r7
   2215c:	adds	r2, r2, #1
   22160:	bcs	221bc <__assert_fail@plt+0x10abc>
   22164:	add	r0, r2, r0
   22168:	str	r0, [r9, #4]
   2216c:	ldr	r0, [r9, #8]
   22170:	ldr	r6, [r0, r1, lsl #2]
   22174:	ldr	r5, [r0, r3, lsl #2]
   22178:	cmp	r5, r6
   2217c:	ble	22198 <__assert_fail@plt+0x10a98>
   22180:	add	r6, r2, r1
   22184:	subs	r2, r2, #1
   22188:	sub	r3, r3, #1
   2218c:	str	r5, [r0, r6, lsl #2]
   22190:	bne	22170 <__assert_fail@plt+0x10a70>
   22194:	b	221bc <__assert_fail@plt+0x10abc>
   22198:	add	r5, r2, r1
   2219c:	cmp	r1, #0
   221a0:	str	r6, [r0, r5, lsl #2]
   221a4:	sub	r6, r1, #1
   221a8:	mov	r1, r6
   221ac:	bgt	22170 <__assert_fail@plt+0x10a70>
   221b0:	add	r1, r0, r7, lsl #2
   221b4:	lsl	r2, r2, #2
   221b8:	bl	11448 <memcpy@plt>
   221bc:	mov	r0, r8
   221c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   221c4:	ldr	r0, [r6, #4]
   221c8:	str	r0, [r9, #4]
   221cc:	ldr	r0, [r9, #8]
   221d0:	ldr	r2, [r6, #4]
   221d4:	ldr	r1, [r6, #8]
   221d8:	b	221b4 <__assert_fail@plt+0x10ab4>
   221dc:	mov	r8, #12
   221e0:	mov	r0, r8
   221e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   221e8:	push	{r4, r5, r6, sl, fp, lr}
   221ec:	add	fp, sp, #16
   221f0:	ldr	r2, [r0]
   221f4:	mov	r5, r1
   221f8:	mov	r4, r0
   221fc:	cmp	r2, #0
   22200:	beq	22230 <__assert_fail@plt+0x10b30>
   22204:	ldr	r1, [r4, #4]
   22208:	cmp	r1, #0
   2220c:	bne	2226c <__assert_fail@plt+0x10b6c>
   22210:	ldr	r0, [r4, #8]
   22214:	str	r5, [r0]
   22218:	ldr	r0, [r4, #4]
   2221c:	mov	r6, #1
   22220:	add	r0, r0, #1
   22224:	str	r0, [r4, #4]
   22228:	mov	r0, r6
   2222c:	pop	{r4, r5, r6, sl, fp, pc}
   22230:	mov	r6, #1
   22234:	mov	r0, #4
   22238:	str	r6, [r4]
   2223c:	str	r6, [r4, #4]
   22240:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   22244:	cmp	r0, #0
   22248:	str	r0, [r4, #8]
   2224c:	strne	r5, [r0]
   22250:	movne	r0, r6
   22254:	popne	{r4, r5, r6, sl, fp, pc}
   22258:	mov	r6, #0
   2225c:	mov	r0, r6
   22260:	str	r6, [r4]
   22264:	str	r6, [r4, #4]
   22268:	pop	{r4, r5, r6, sl, fp, pc}
   2226c:	cmp	r2, r1
   22270:	bne	222a8 <__assert_fail@plt+0x10ba8>
   22274:	lsl	r0, r2, #1
   22278:	lsl	r1, r2, #3
   2227c:	str	r0, [r4]
   22280:	ldr	r0, [r4, #8]
   22284:	bl	2b910 <__assert_fail@plt+0x1a210>
   22288:	cmp	r0, #0
   2228c:	beq	2235c <__assert_fail@plt+0x10c5c>
   22290:	str	r0, [r4, #8]
   22294:	ldr	r1, [r4, #4]
   22298:	ldr	r2, [r0]
   2229c:	cmp	r2, r5
   222a0:	bgt	222b8 <__assert_fail@plt+0x10bb8>
   222a4:	b	22324 <__assert_fail@plt+0x10c24>
   222a8:	ldr	r0, [r4, #8]
   222ac:	ldr	r2, [r0]
   222b0:	cmp	r2, r5
   222b4:	ble	22324 <__assert_fail@plt+0x10c24>
   222b8:	cmp	r1, #1
   222bc:	blt	22354 <__assert_fail@plt+0x10c54>
   222c0:	ands	r3, r1, #3
   222c4:	sub	ip, r1, #1
   222c8:	beq	222ec <__assert_fail@plt+0x10bec>
   222cc:	add	lr, r0, r1, lsl #2
   222d0:	mov	r6, lr
   222d4:	ldr	r2, [r6, #-4]!
   222d8:	subs	r3, r3, #1
   222dc:	sub	r1, r1, #1
   222e0:	str	r2, [lr]
   222e4:	mov	lr, r6
   222e8:	bne	222d4 <__assert_fail@plt+0x10bd4>
   222ec:	cmp	ip, #3
   222f0:	bcc	2231c <__assert_fail@plt+0x10c1c>
   222f4:	add	r2, r0, r1, lsl #2
   222f8:	sub	r2, r2, #8
   222fc:	sub	lr, r2, #8
   22300:	sub	r1, r1, #4
   22304:	sub	sl, r2, #4
   22308:	sub	r2, r2, #16
   2230c:	ldm	lr, {r3, r6, ip, lr}
   22310:	cmp	r1, #0
   22314:	stm	sl, {r3, r6, ip, lr}
   22318:	bgt	222fc <__assert_fail@plt+0x10bfc>
   2231c:	mov	r1, #0
   22320:	b	22354 <__assert_fail@plt+0x10c54>
   22324:	add	r2, r0, r1, lsl #2
   22328:	ldr	r3, [r2, #-4]
   2232c:	cmp	r3, r5
   22330:	ble	22354 <__assert_fail@plt+0x10c54>
   22334:	sub	r1, r1, #2
   22338:	str	r3, [r2]
   2233c:	sub	r1, r1, #1
   22340:	ldr	r3, [r2, #-8]
   22344:	sub	r2, r2, #4
   22348:	cmp	r3, r5
   2234c:	bgt	22338 <__assert_fail@plt+0x10c38>
   22350:	add	r1, r1, #2
   22354:	str	r5, [r0, r1, lsl #2]
   22358:	b	22218 <__assert_fail@plt+0x10b18>
   2235c:	mov	r6, #0
   22360:	mov	r0, r6
   22364:	pop	{r4, r5, r6, sl, fp, pc}
   22368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2236c:	add	fp, sp, #28
   22370:	sub	sp, sp, #28
   22374:	ldr	sl, [r2, #4]
   22378:	cmp	sl, #0
   2237c:	beq	225a0 <__assert_fail@plt+0x10ea0>
   22380:	mov	r9, r3
   22384:	add	r7, sl, r3
   22388:	cmp	sl, #1
   2238c:	str	r1, [sp, #16]
   22390:	str	r2, [sp, #20]
   22394:	str	r0, [sp]
   22398:	blt	22480 <__assert_fail@plt+0x10d80>
   2239c:	ldr	ip, [r2, #8]
   223a0:	mov	r8, #0
   223a4:	cmp	sl, #4
   223a8:	bcc	22468 <__assert_fail@plt+0x10d68>
   223ac:	mov	r3, #0
   223b0:	bic	r8, sl, #3
   223b4:	mov	r1, #1
   223b8:	vdup.32	q8, r3
   223bc:	sub	r4, r8, #4
   223c0:	add	r1, r1, r4, lsr #2
   223c4:	cmp	r4, #12
   223c8:	and	lr, r1, #3
   223cc:	vmov.32	d16[0], r7
   223d0:	bcc	22424 <__assert_fail@plt+0x10d24>
   223d4:	sub	r6, r1, lr
   223d8:	mov	r3, #0
   223dc:	mov	r4, #64	; 0x40
   223e0:	mov	r7, ip
   223e4:	mov	r1, ip
   223e8:	vld1.32	{d18-d19}, [r1], r4
   223ec:	add	r5, r7, #16
   223f0:	add	r2, r7, #32
   223f4:	subs	r6, r6, #4
   223f8:	add	r3, r3, #16
   223fc:	vld1.32	{d20-d21}, [r5]
   22400:	vadd.i32	q8, q9, q8
   22404:	vld1.32	{d18-d19}, [r2]
   22408:	add	r2, r7, #48	; 0x30
   2240c:	mov	r7, r1
   22410:	vadd.i32	q8, q10, q8
   22414:	vld1.32	{d20-d21}, [r2]
   22418:	vadd.i32	q8, q9, q8
   2241c:	vadd.i32	q8, q10, q8
   22420:	bne	223e8 <__assert_fail@plt+0x10ce8>
   22424:	cmp	lr, #0
   22428:	beq	22444 <__assert_fail@plt+0x10d44>
   2242c:	add	r1, ip, r3, lsl #2
   22430:	rsb	r3, lr, #0
   22434:	vld1.32	{d18-d19}, [r1]!
   22438:	adds	r3, r3, #1
   2243c:	vadd.i32	q8, q9, q8
   22440:	bcc	22434 <__assert_fail@plt+0x10d34>
   22444:	vext.8	q9, q8, q8, #8
   22448:	ldr	r1, [sp, #16]
   2244c:	ldr	r2, [sp, #20]
   22450:	cmp	sl, r8
   22454:	vadd.i32	q8, q8, q9
   22458:	vdup.32	q9, d16[1]
   2245c:	vadd.i32	q8, q8, q9
   22460:	vmov.32	r7, d16[0]
   22464:	beq	22480 <__assert_fail@plt+0x10d80>
   22468:	add	r0, ip, r8, lsl #2
   2246c:	sub	r6, sl, r8
   22470:	ldr	r3, [r0], #4
   22474:	subs	r6, r6, #1
   22478:	add	r7, r3, r7
   2247c:	bne	22470 <__assert_fail@plt+0x10d70>
   22480:	ldr	r0, [r1, #32]
   22484:	ldr	r1, [r1, #68]	; 0x44
   22488:	and	r1, r1, r7
   2248c:	add	r3, r1, r1, lsl #1
   22490:	ldr	r1, [r0, r3, lsl #2]
   22494:	cmp	r1, #1
   22498:	blt	22538 <__assert_fail@plt+0x10e38>
   2249c:	cmp	r2, #0
   224a0:	beq	22538 <__assert_fail@plt+0x10e38>
   224a4:	add	r0, r0, r3, lsl #2
   224a8:	sub	ip, sl, #1
   224ac:	mov	r6, #0
   224b0:	ldr	lr, [r0, #8]
   224b4:	ldr	r8, [lr, r6, lsl #2]
   224b8:	ldr	r3, [r8]
   224bc:	cmp	r3, r7
   224c0:	beq	224e0 <__assert_fail@plt+0x10de0>
   224c4:	add	r6, r6, #1
   224c8:	cmp	r6, r1
   224cc:	bge	22538 <__assert_fail@plt+0x10e38>
   224d0:	ldr	r8, [lr, r6, lsl #2]
   224d4:	ldr	r3, [r8]
   224d8:	cmp	r3, r7
   224dc:	bne	224c4 <__assert_fail@plt+0x10dc4>
   224e0:	ldrb	r3, [r8, #52]	; 0x34
   224e4:	and	r3, r3, #15
   224e8:	cmp	r3, r9
   224ec:	bne	224c4 <__assert_fail@plt+0x10dc4>
   224f0:	ldr	r4, [r8, #40]	; 0x28
   224f4:	cmp	r4, #0
   224f8:	beq	224c4 <__assert_fail@plt+0x10dc4>
   224fc:	ldr	r3, [r4, #4]
   22500:	cmp	r3, sl
   22504:	bne	224c4 <__assert_fail@plt+0x10dc4>
   22508:	mov	r3, ip
   2250c:	add	r5, r3, #1
   22510:	cmp	r5, #1
   22514:	blt	22d74 <__assert_fail@plt+0x11674>
   22518:	ldr	r5, [r2, #8]
   2251c:	ldr	r0, [r4, #8]
   22520:	ldr	r5, [r5, r3, lsl #2]
   22524:	ldr	r0, [r0, r3, lsl #2]
   22528:	sub	r3, r3, #1
   2252c:	cmp	r0, r5
   22530:	beq	2250c <__assert_fail@plt+0x10e0c>
   22534:	b	224c4 <__assert_fail@plt+0x10dc4>
   22538:	mov	r0, #56	; 0x38
   2253c:	mov	r1, #1
   22540:	bl	2b88c <__assert_fail@plt+0x1a18c>
   22544:	cmp	r0, #0
   22548:	beq	22d94 <__assert_fail@plt+0x11694>
   2254c:	ldr	ip, [sp, #20]
   22550:	mov	r8, r0
   22554:	add	r6, r0, #4
   22558:	ldr	r3, [ip, #4]
   2255c:	cmp	r3, #1
   22560:	str	r3, [r0, #8]
   22564:	blt	225b4 <__assert_fail@plt+0x10eb4>
   22568:	lsl	r0, r3, #2
   2256c:	str	r3, [r8, #4]
   22570:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   22574:	cmp	r0, #0
   22578:	str	r0, [r8, #12]
   2257c:	beq	22db0 <__assert_fail@plt+0x116b0>
   22580:	ldr	r4, [sp, #20]
   22584:	ldr	r5, [r4, #4]
   22588:	ldr	r1, [r4, #8]
   2258c:	lsl	r2, r5, #2
   22590:	bl	11448 <memcpy@plt>
   22594:	mov	r3, r5
   22598:	mov	ip, r4
   2259c:	b	225c4 <__assert_fail@plt+0x10ec4>
   225a0:	mov	r8, #0
   225a4:	str	r8, [r0]
   225a8:	mov	r0, r8
   225ac:	sub	sp, fp, #28
   225b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225b4:	mov	r0, #0
   225b8:	str	r0, [r6]
   225bc:	str	r0, [r6, #4]
   225c0:	str	r0, [r6, #8]
   225c4:	mov	sl, r8
   225c8:	and	r1, r9, #15
   225cc:	cmp	r3, #1
   225d0:	str	r6, [sp, #24]
   225d4:	ldrb	r0, [sl, #52]!	; 0x34
   225d8:	str	r6, [sl, #-12]
   225dc:	and	r0, r0, #240	; 0xf0
   225e0:	orr	r0, r0, r1
   225e4:	strb	r0, [sl]
   225e8:	ldr	r0, [sp, #16]
   225ec:	blt	22d60 <__assert_fail@plt+0x11660>
   225f0:	and	r1, r9, #4
   225f4:	tst	r9, #1
   225f8:	str	sl, [sp, #8]
   225fc:	str	r1, [sp, #12]
   22600:	and	r1, r9, #2
   22604:	bne	227e4 <__assert_fail@plt+0x110e4>
   22608:	movw	r9, #65280	; 0xff00
   2260c:	mov	r6, #0
   22610:	mov	lr, #0
   22614:	cmp	r1, #0
   22618:	movt	r9, #3
   2261c:	add	r5, r9, #255	; 0xff
   22620:	bne	229c0 <__assert_fail@plt+0x112c0>
   22624:	str	r5, [sp, #4]
   22628:	b	22640 <__assert_fail@plt+0x10f40>
   2262c:	mov	r3, r5
   22630:	ldr	r5, [sp, #4]
   22634:	add	r6, r6, #1
   22638:	cmp	r6, r3
   2263c:	bge	22d60 <__assert_fail@plt+0x11660>
   22640:	ldr	r1, [ip, #8]
   22644:	ldr	r2, [r0]
   22648:	ldr	r1, [r1, r6, lsl #2]
   2264c:	add	r1, r2, r1, lsl #3
   22650:	ldr	r4, [r1, #4]
   22654:	and	r1, r4, r5
   22658:	cmp	r1, #1
   2265c:	beq	22634 <__assert_fail@plt+0x10f34>
   22660:	mov	r5, r3
   22664:	ldrb	r3, [sl]
   22668:	mov	r2, #32
   2266c:	and	r1, r4, r9
   22670:	and	r2, r2, r4, lsr #15
   22674:	orr	r2, r3, r2
   22678:	uxtb	r3, r4
   2267c:	strb	r2, [sl]
   22680:	cmp	r3, #4
   22684:	beq	22698 <__assert_fail@plt+0x10f98>
   22688:	cmp	r3, #2
   2268c:	bne	226a4 <__assert_fail@plt+0x10fa4>
   22690:	mov	r3, #16
   22694:	b	2269c <__assert_fail@plt+0x10f9c>
   22698:	mov	r3, #64	; 0x40
   2269c:	orr	r2, r2, r3
   226a0:	strb	r2, [sl]
   226a4:	cmp	r1, #0
   226a8:	beq	2262c <__assert_fail@plt+0x10f2c>
   226ac:	ldr	r1, [r8, #40]	; 0x28
   226b0:	ldr	r2, [sp, #24]
   226b4:	mov	r3, r5
   226b8:	cmp	r1, r2
   226bc:	beq	226e4 <__assert_fail@plt+0x10fe4>
   226c0:	ldr	r5, [sp, #4]
   226c4:	tst	r4, #4352	; 0x1100
   226c8:	bne	22788 <__assert_fail@plt+0x11088>
   226cc:	ldr	r1, [sp, #12]
   226d0:	cmp	r1, #0
   226d4:	bne	22634 <__assert_fail@plt+0x10f34>
   226d8:	ands	r1, r4, #16384	; 0x4000
   226dc:	bne	22788 <__assert_fail@plt+0x11088>
   226e0:	b	22634 <__assert_fail@plt+0x10f34>
   226e4:	mov	r0, #12
   226e8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   226ec:	cmp	r0, #0
   226f0:	beq	22d8c <__assert_fail@plt+0x1168c>
   226f4:	ldr	ip, [sp, #20]
   226f8:	str	r0, [r8, #40]	; 0x28
   226fc:	mov	sl, r0
   22700:	mov	r5, r0
   22704:	ldr	r3, [ip, #4]
   22708:	str	r3, [sl, #4]!
   2270c:	cmp	r3, #0
   22710:	ble	22754 <__assert_fail@plt+0x11054>
   22714:	lsl	r0, r3, #2
   22718:	str	r3, [r5]
   2271c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   22720:	cmp	r0, #0
   22724:	str	r0, [r5, #8]
   22728:	beq	22d80 <__assert_fail@plt+0x11680>
   2272c:	ldr	r5, [sp, #20]
   22730:	ldr	r9, [r5, #4]
   22734:	ldr	r1, [r5, #8]
   22738:	lsl	r2, r9, #2
   2273c:	bl	11448 <memcpy@plt>
   22740:	mov	r3, r9
   22744:	movw	r9, #65280	; 0xff00
   22748:	mov	ip, r5
   2274c:	movt	r9, #3
   22750:	b	22764 <__assert_fail@plt+0x11064>
   22754:	mov	r0, #0
   22758:	str	r0, [r5]
   2275c:	str	r0, [r5, #4]
   22760:	str	r0, [r5, #8]
   22764:	ldr	sl, [sp, #8]
   22768:	mov	lr, #0
   2276c:	ldrb	r0, [sl]
   22770:	orr	r0, r0, #128	; 0x80
   22774:	strb	r0, [sl]
   22778:	ldr	r0, [sp, #16]
   2277c:	ldr	r5, [sp, #4]
   22780:	tst	r4, #4352	; 0x1100
   22784:	beq	226cc <__assert_fail@plt+0x10fcc>
   22788:	subs	r1, r6, lr
   2278c:	bmi	227a8 <__assert_fail@plt+0x110a8>
   22790:	ldr	r2, [r8, #8]
   22794:	cmp	r2, r1
   22798:	subgt	r2, r2, #1
   2279c:	strgt	r2, [r8, #8]
   227a0:	cmpgt	r2, r1
   227a4:	bgt	227bc <__assert_fail@plt+0x110bc>
   227a8:	add	lr, lr, #1
   227ac:	add	r6, r6, #1
   227b0:	cmp	r6, r3
   227b4:	blt	22640 <__assert_fail@plt+0x10f40>
   227b8:	b	22d60 <__assert_fail@plt+0x11660>
   227bc:	ldr	r2, [r8, #12]
   227c0:	add	r3, r2, r1, lsl #2
   227c4:	ldr	r3, [r3, #4]
   227c8:	str	r3, [r2, r1, lsl #2]
   227cc:	add	r1, r1, #1
   227d0:	ldr	r3, [r8, #8]
   227d4:	cmp	r1, r3
   227d8:	blt	227c0 <__assert_fail@plt+0x110c0>
   227dc:	ldr	r3, [ip, #4]
   227e0:	b	227a8 <__assert_fail@plt+0x110a8>
   227e4:	cmp	r1, #0
   227e8:	bne	22b80 <__assert_fail@plt+0x11480>
   227ec:	movw	r9, #65280	; 0xff00
   227f0:	mov	r6, #0
   227f4:	mov	lr, #0
   227f8:	movt	r9, #3
   227fc:	add	r5, r9, #255	; 0xff
   22800:	str	r5, [sp, #4]
   22804:	b	2281c <__assert_fail@plt+0x1111c>
   22808:	mov	r3, r5
   2280c:	ldr	r5, [sp, #4]
   22810:	add	r6, r6, #1
   22814:	cmp	r6, r3
   22818:	bge	22d60 <__assert_fail@plt+0x11660>
   2281c:	ldr	r1, [ip, #8]
   22820:	ldr	r2, [r0]
   22824:	ldr	r1, [r1, r6, lsl #2]
   22828:	add	r1, r2, r1, lsl #3
   2282c:	ldr	r4, [r1, #4]
   22830:	and	r1, r4, r5
   22834:	cmp	r1, #1
   22838:	beq	22810 <__assert_fail@plt+0x11110>
   2283c:	mov	r5, r3
   22840:	ldrb	r3, [sl]
   22844:	mov	r2, #32
   22848:	and	r1, r4, r9
   2284c:	and	r2, r2, r4, lsr #15
   22850:	orr	r2, r3, r2
   22854:	uxtb	r3, r4
   22858:	strb	r2, [sl]
   2285c:	cmp	r3, #4
   22860:	beq	22874 <__assert_fail@plt+0x11174>
   22864:	cmp	r3, #2
   22868:	bne	22880 <__assert_fail@plt+0x11180>
   2286c:	mov	r3, #16
   22870:	b	22878 <__assert_fail@plt+0x11178>
   22874:	mov	r3, #64	; 0x40
   22878:	orr	r2, r2, r3
   2287c:	strb	r2, [sl]
   22880:	cmp	r1, #0
   22884:	beq	22808 <__assert_fail@plt+0x11108>
   22888:	ldr	r1, [r8, #40]	; 0x28
   2288c:	ldr	r2, [sp, #24]
   22890:	mov	r3, r5
   22894:	cmp	r1, r2
   22898:	beq	228c0 <__assert_fail@plt+0x111c0>
   2289c:	ldr	r5, [sp, #4]
   228a0:	tst	r4, #4608	; 0x1200
   228a4:	bne	22964 <__assert_fail@plt+0x11264>
   228a8:	ldr	r1, [sp, #12]
   228ac:	cmp	r1, #0
   228b0:	bne	22810 <__assert_fail@plt+0x11110>
   228b4:	ands	r1, r4, #16384	; 0x4000
   228b8:	bne	22964 <__assert_fail@plt+0x11264>
   228bc:	b	22810 <__assert_fail@plt+0x11110>
   228c0:	mov	r0, #12
   228c4:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   228c8:	cmp	r0, #0
   228cc:	beq	22d8c <__assert_fail@plt+0x1168c>
   228d0:	ldr	ip, [sp, #20]
   228d4:	str	r0, [r8, #40]	; 0x28
   228d8:	mov	sl, r0
   228dc:	mov	r5, r0
   228e0:	ldr	r3, [ip, #4]
   228e4:	str	r3, [sl, #4]!
   228e8:	cmp	r3, #0
   228ec:	ble	22930 <__assert_fail@plt+0x11230>
   228f0:	lsl	r0, r3, #2
   228f4:	str	r3, [r5]
   228f8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   228fc:	cmp	r0, #0
   22900:	str	r0, [r5, #8]
   22904:	beq	22d80 <__assert_fail@plt+0x11680>
   22908:	ldr	r5, [sp, #20]
   2290c:	ldr	r9, [r5, #4]
   22910:	ldr	r1, [r5, #8]
   22914:	lsl	r2, r9, #2
   22918:	bl	11448 <memcpy@plt>
   2291c:	mov	r3, r9
   22920:	movw	r9, #65280	; 0xff00
   22924:	mov	ip, r5
   22928:	movt	r9, #3
   2292c:	b	22940 <__assert_fail@plt+0x11240>
   22930:	mov	r0, #0
   22934:	str	r0, [r5]
   22938:	str	r0, [r5, #4]
   2293c:	str	r0, [r5, #8]
   22940:	ldr	sl, [sp, #8]
   22944:	mov	lr, #0
   22948:	ldrb	r0, [sl]
   2294c:	orr	r0, r0, #128	; 0x80
   22950:	strb	r0, [sl]
   22954:	ldr	r0, [sp, #16]
   22958:	ldr	r5, [sp, #4]
   2295c:	tst	r4, #4608	; 0x1200
   22960:	beq	228a8 <__assert_fail@plt+0x111a8>
   22964:	subs	r1, r6, lr
   22968:	bmi	22984 <__assert_fail@plt+0x11284>
   2296c:	ldr	r2, [r8, #8]
   22970:	cmp	r2, r1
   22974:	subgt	r2, r2, #1
   22978:	strgt	r2, [r8, #8]
   2297c:	cmpgt	r2, r1
   22980:	bgt	22998 <__assert_fail@plt+0x11298>
   22984:	add	lr, lr, #1
   22988:	add	r6, r6, #1
   2298c:	cmp	r6, r3
   22990:	blt	2281c <__assert_fail@plt+0x1111c>
   22994:	b	22d60 <__assert_fail@plt+0x11660>
   22998:	ldr	r2, [r8, #12]
   2299c:	add	r3, r2, r1, lsl #2
   229a0:	ldr	r3, [r3, #4]
   229a4:	str	r3, [r2, r1, lsl #2]
   229a8:	add	r1, r1, #1
   229ac:	ldr	r3, [r8, #8]
   229b0:	cmp	r1, r3
   229b4:	blt	2299c <__assert_fail@plt+0x1129c>
   229b8:	ldr	r3, [ip, #4]
   229bc:	b	22984 <__assert_fail@plt+0x11284>
   229c0:	str	r5, [sp, #4]
   229c4:	b	229dc <__assert_fail@plt+0x112dc>
   229c8:	mov	r3, r5
   229cc:	ldr	r5, [sp, #4]
   229d0:	add	r6, r6, #1
   229d4:	cmp	r6, r3
   229d8:	bge	22d60 <__assert_fail@plt+0x11660>
   229dc:	ldr	r1, [ip, #8]
   229e0:	ldr	r2, [r0]
   229e4:	ldr	r1, [r1, r6, lsl #2]
   229e8:	add	r1, r2, r1, lsl #3
   229ec:	ldr	r4, [r1, #4]
   229f0:	and	r1, r4, r5
   229f4:	cmp	r1, #1
   229f8:	beq	229d0 <__assert_fail@plt+0x112d0>
   229fc:	mov	r5, r3
   22a00:	ldrb	r3, [sl]
   22a04:	mov	r2, #32
   22a08:	and	r1, r4, r9
   22a0c:	and	r2, r2, r4, lsr #15
   22a10:	orr	r2, r3, r2
   22a14:	uxtb	r3, r4
   22a18:	strb	r2, [sl]
   22a1c:	cmp	r3, #4
   22a20:	beq	22a34 <__assert_fail@plt+0x11334>
   22a24:	cmp	r3, #2
   22a28:	bne	22a40 <__assert_fail@plt+0x11340>
   22a2c:	mov	r3, #16
   22a30:	b	22a38 <__assert_fail@plt+0x11338>
   22a34:	mov	r3, #64	; 0x40
   22a38:	orr	r2, r2, r3
   22a3c:	strb	r2, [sl]
   22a40:	cmp	r1, #0
   22a44:	beq	229c8 <__assert_fail@plt+0x112c8>
   22a48:	ldr	r1, [r8, #40]	; 0x28
   22a4c:	ldr	r2, [sp, #24]
   22a50:	mov	r3, r5
   22a54:	cmp	r1, r2
   22a58:	beq	22a80 <__assert_fail@plt+0x11380>
   22a5c:	ldr	r5, [sp, #4]
   22a60:	tst	r4, #256	; 0x100
   22a64:	bne	22b24 <__assert_fail@plt+0x11424>
   22a68:	ldr	r1, [sp, #12]
   22a6c:	cmp	r1, #0
   22a70:	bne	229d0 <__assert_fail@plt+0x112d0>
   22a74:	ands	r1, r4, #16384	; 0x4000
   22a78:	bne	22b24 <__assert_fail@plt+0x11424>
   22a7c:	b	229d0 <__assert_fail@plt+0x112d0>
   22a80:	mov	r0, #12
   22a84:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   22a88:	cmp	r0, #0
   22a8c:	beq	22d8c <__assert_fail@plt+0x1168c>
   22a90:	ldr	ip, [sp, #20]
   22a94:	str	r0, [r8, #40]	; 0x28
   22a98:	mov	sl, r0
   22a9c:	mov	r5, r0
   22aa0:	ldr	r3, [ip, #4]
   22aa4:	str	r3, [sl, #4]!
   22aa8:	cmp	r3, #0
   22aac:	ble	22af0 <__assert_fail@plt+0x113f0>
   22ab0:	lsl	r0, r3, #2
   22ab4:	str	r3, [r5]
   22ab8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   22abc:	cmp	r0, #0
   22ac0:	str	r0, [r5, #8]
   22ac4:	beq	22d80 <__assert_fail@plt+0x11680>
   22ac8:	ldr	r5, [sp, #20]
   22acc:	ldr	r9, [r5, #4]
   22ad0:	ldr	r1, [r5, #8]
   22ad4:	lsl	r2, r9, #2
   22ad8:	bl	11448 <memcpy@plt>
   22adc:	mov	r3, r9
   22ae0:	movw	r9, #65280	; 0xff00
   22ae4:	mov	ip, r5
   22ae8:	movt	r9, #3
   22aec:	b	22b00 <__assert_fail@plt+0x11400>
   22af0:	mov	r0, #0
   22af4:	str	r0, [r5]
   22af8:	str	r0, [r5, #4]
   22afc:	str	r0, [r5, #8]
   22b00:	ldr	sl, [sp, #8]
   22b04:	mov	lr, #0
   22b08:	ldrb	r0, [sl]
   22b0c:	orr	r0, r0, #128	; 0x80
   22b10:	strb	r0, [sl]
   22b14:	ldr	r0, [sp, #16]
   22b18:	ldr	r5, [sp, #4]
   22b1c:	tst	r4, #256	; 0x100
   22b20:	beq	22a68 <__assert_fail@plt+0x11368>
   22b24:	subs	r1, r6, lr
   22b28:	bmi	22b44 <__assert_fail@plt+0x11444>
   22b2c:	ldr	r2, [r8, #8]
   22b30:	cmp	r2, r1
   22b34:	subgt	r2, r2, #1
   22b38:	strgt	r2, [r8, #8]
   22b3c:	cmpgt	r2, r1
   22b40:	bgt	22b58 <__assert_fail@plt+0x11458>
   22b44:	add	lr, lr, #1
   22b48:	add	r6, r6, #1
   22b4c:	cmp	r6, r3
   22b50:	blt	229dc <__assert_fail@plt+0x112dc>
   22b54:	b	22d60 <__assert_fail@plt+0x11660>
   22b58:	ldr	r2, [r8, #12]
   22b5c:	add	r3, r2, r1, lsl #2
   22b60:	ldr	r3, [r3, #4]
   22b64:	str	r3, [r2, r1, lsl #2]
   22b68:	add	r1, r1, #1
   22b6c:	ldr	r3, [r8, #8]
   22b70:	cmp	r1, r3
   22b74:	blt	22b5c <__assert_fail@plt+0x1145c>
   22b78:	ldr	r3, [ip, #4]
   22b7c:	b	22b44 <__assert_fail@plt+0x11444>
   22b80:	movw	lr, #65280	; 0xff00
   22b84:	mov	r9, #0
   22b88:	mov	r4, #0
   22b8c:	movt	lr, #3
   22b90:	add	r5, lr, #255	; 0xff
   22b94:	str	r5, [sp, #4]
   22b98:	b	22bb0 <__assert_fail@plt+0x114b0>
   22b9c:	mov	r3, r5
   22ba0:	ldr	r5, [sp, #4]
   22ba4:	add	r9, r9, #1
   22ba8:	cmp	r9, r3
   22bac:	bge	22d60 <__assert_fail@plt+0x11660>
   22bb0:	ldr	r1, [ip, #8]
   22bb4:	ldr	r2, [r0]
   22bb8:	ldr	r1, [r1, r9, lsl #2]
   22bbc:	add	r1, r2, r1, lsl #3
   22bc0:	ldr	r6, [r1, #4]
   22bc4:	and	r1, r6, r5
   22bc8:	cmp	r1, #1
   22bcc:	beq	22ba4 <__assert_fail@plt+0x114a4>
   22bd0:	mov	r5, r3
   22bd4:	ldrb	r3, [sl]
   22bd8:	mov	r2, #32
   22bdc:	and	r1, r6, lr
   22be0:	and	r2, r2, r6, lsr #15
   22be4:	orr	r2, r3, r2
   22be8:	uxtb	r3, r6
   22bec:	strb	r2, [sl]
   22bf0:	cmp	r3, #2
   22bf4:	beq	22c08 <__assert_fail@plt+0x11508>
   22bf8:	cmp	r3, #4
   22bfc:	bne	22c14 <__assert_fail@plt+0x11514>
   22c00:	mov	r3, #64	; 0x40
   22c04:	b	22c0c <__assert_fail@plt+0x1150c>
   22c08:	mov	r3, #16
   22c0c:	orr	r2, r2, r3
   22c10:	strb	r2, [sl]
   22c14:	cmp	r1, #0
   22c18:	beq	22b9c <__assert_fail@plt+0x1149c>
   22c1c:	ldr	r1, [r8, #40]	; 0x28
   22c20:	ldr	r2, [sp, #24]
   22c24:	mov	r3, r5
   22c28:	cmp	r1, r2
   22c2c:	beq	22c54 <__assert_fail@plt+0x11554>
   22c30:	ldr	r5, [sp, #4]
   22c34:	tst	r6, #512	; 0x200
   22c38:	bne	22cf8 <__assert_fail@plt+0x115f8>
   22c3c:	ldr	r1, [sp, #12]
   22c40:	cmp	r1, #0
   22c44:	bne	22ba4 <__assert_fail@plt+0x114a4>
   22c48:	ands	r1, r6, #16384	; 0x4000
   22c4c:	bne	22cf8 <__assert_fail@plt+0x115f8>
   22c50:	b	22ba4 <__assert_fail@plt+0x114a4>
   22c54:	mov	r0, #12
   22c58:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   22c5c:	cmp	r0, #0
   22c60:	beq	22d8c <__assert_fail@plt+0x1168c>
   22c64:	ldr	ip, [sp, #20]
   22c68:	str	r0, [r8, #40]	; 0x28
   22c6c:	mov	sl, r0
   22c70:	mov	r5, r0
   22c74:	ldr	r3, [ip, #4]
   22c78:	str	r3, [sl, #4]!
   22c7c:	cmp	r3, #1
   22c80:	blt	22cbc <__assert_fail@plt+0x115bc>
   22c84:	lsl	r0, r3, #2
   22c88:	str	r3, [r5]
   22c8c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   22c90:	cmp	r0, #0
   22c94:	str	r0, [r5, #8]
   22c98:	beq	22d80 <__assert_fail@plt+0x11680>
   22c9c:	ldr	r4, [sp, #20]
   22ca0:	ldr	r5, [r4, #4]
   22ca4:	ldr	r1, [r4, #8]
   22ca8:	lsl	r2, r5, #2
   22cac:	bl	11448 <memcpy@plt>
   22cb0:	mov	r3, r5
   22cb4:	mov	ip, r4
   22cb8:	b	22ccc <__assert_fail@plt+0x115cc>
   22cbc:	mov	r0, #0
   22cc0:	str	r0, [r5]
   22cc4:	str	r0, [r5, #4]
   22cc8:	str	r0, [r5, #8]
   22ccc:	ldr	sl, [sp, #8]
   22cd0:	movw	lr, #65280	; 0xff00
   22cd4:	mov	r4, #0
   22cd8:	movt	lr, #3
   22cdc:	ldrb	r0, [sl]
   22ce0:	orr	r0, r0, #128	; 0x80
   22ce4:	strb	r0, [sl]
   22ce8:	ldr	r0, [sp, #16]
   22cec:	ldr	r5, [sp, #4]
   22cf0:	tst	r6, #512	; 0x200
   22cf4:	beq	22c3c <__assert_fail@plt+0x1153c>
   22cf8:	subs	r1, r9, r4
   22cfc:	bmi	22d18 <__assert_fail@plt+0x11618>
   22d00:	ldr	r2, [r8, #8]
   22d04:	cmp	r2, r1
   22d08:	subgt	r2, r2, #1
   22d0c:	strgt	r2, [r8, #8]
   22d10:	cmpgt	r2, r1
   22d14:	bgt	22d2c <__assert_fail@plt+0x1162c>
   22d18:	add	r4, r4, #1
   22d1c:	add	r9, r9, #1
   22d20:	cmp	r9, r3
   22d24:	blt	22bb0 <__assert_fail@plt+0x114b0>
   22d28:	b	22d60 <__assert_fail@plt+0x11660>
   22d2c:	ldr	r2, [r8, #12]
   22d30:	add	r3, r2, r1, lsl #2
   22d34:	ldr	r3, [r3, #4]
   22d38:	str	r3, [r2, r1, lsl #2]
   22d3c:	add	r1, r1, #1
   22d40:	ldr	r3, [r8, #8]
   22d44:	cmp	r1, r3
   22d48:	blt	22d30 <__assert_fail@plt+0x11630>
   22d4c:	ldr	r3, [ip, #4]
   22d50:	add	r4, r4, #1
   22d54:	add	r9, r9, #1
   22d58:	cmp	r9, r3
   22d5c:	blt	22bb0 <__assert_fail@plt+0x114b0>
   22d60:	mov	r1, r8
   22d64:	mov	r2, r7
   22d68:	bl	22dc8 <__assert_fail@plt+0x116c8>
   22d6c:	cmp	r0, #0
   22d70:	bne	22d8c <__assert_fail@plt+0x1168c>
   22d74:	mov	r0, r8
   22d78:	sub	sp, fp, #28
   22d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d80:	mov	r0, #0
   22d84:	str	r0, [sl]
   22d88:	str	r0, [r5]
   22d8c:	mov	r0, r8
   22d90:	bl	1bdc0 <__assert_fail@plt+0xa6c0>
   22d94:	ldr	r1, [sp]
   22d98:	mov	r0, #12
   22d9c:	mov	r8, #0
   22da0:	str	r0, [r1]
   22da4:	mov	r0, r8
   22da8:	sub	sp, fp, #28
   22dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22db0:	mov	r0, #0
   22db4:	str	r0, [r8, #4]
   22db8:	str	r0, [r8, #8]
   22dbc:	mov	r0, r8
   22dc0:	bl	13ddc <__assert_fail@plt+0x26dc>
   22dc4:	b	22d94 <__assert_fail@plt+0x11694>
   22dc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22dcc:	add	fp, sp, #28
   22dd0:	sub	sp, sp, #4
   22dd4:	str	r2, [r1]
   22dd8:	mov	r4, r1
   22ddc:	mov	r7, r0
   22de0:	mov	r0, #0
   22de4:	mov	r9, r2
   22de8:	ldr	r1, [r1, #8]
   22dec:	str	r1, [r4, #16]
   22df0:	str	r0, [r4, #20]
   22df4:	lsl	r0, r1, #2
   22df8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   22dfc:	mov	r8, #12
   22e00:	cmp	r0, #0
   22e04:	str	r0, [r4, #24]
   22e08:	beq	22ed0 <__assert_fail@plt+0x117d0>
   22e0c:	ldr	r1, [r4, #8]
   22e10:	cmp	r1, #1
   22e14:	blt	22e90 <__assert_fail@plt+0x11790>
   22e18:	mov	r5, #0
   22e1c:	mov	sl, #2
   22e20:	b	22e40 <__assert_fail@plt+0x11740>
   22e24:	add	r2, r1, #1
   22e28:	str	r2, [r4, #20]
   22e2c:	str	r6, [r0, r1, lsl #2]
   22e30:	ldr	r1, [r4, #8]
   22e34:	add	r5, r5, #1
   22e38:	cmp	r5, r1
   22e3c:	bge	22e90 <__assert_fail@plt+0x11790>
   22e40:	ldr	r2, [r4, #12]
   22e44:	ldr	r6, [r2, r5, lsl #2]
   22e48:	ldr	r2, [r7]
   22e4c:	add	r2, r2, r6, lsl #3
   22e50:	ldrb	r2, [r2, #4]
   22e54:	tst	r2, #8
   22e58:	bne	22e34 <__assert_fail@plt+0x11734>
   22e5c:	ldr	r2, [r4, #16]
   22e60:	ldr	r1, [r4, #20]
   22e64:	cmp	r2, r1
   22e68:	bne	22e24 <__assert_fail@plt+0x11724>
   22e6c:	add	r1, sl, r2, lsl #1
   22e70:	str	r1, [r4, #16]
   22e74:	lsl	r1, r1, #2
   22e78:	bl	2b910 <__assert_fail@plt+0x1a210>
   22e7c:	cmp	r0, #0
   22e80:	beq	22ed0 <__assert_fail@plt+0x117d0>
   22e84:	str	r0, [r4, #24]
   22e88:	ldr	r1, [r4, #20]
   22e8c:	b	22e24 <__assert_fail@plt+0x11724>
   22e90:	ldr	r1, [r7, #68]	; 0x44
   22e94:	ldr	r0, [r7, #32]
   22e98:	and	r1, r1, r9
   22e9c:	mov	r5, r0
   22ea0:	add	r2, r1, r1, lsl #1
   22ea4:	ldr	r1, [r5, r2, lsl #2]!
   22ea8:	mov	r6, r5
   22eac:	ldr	r3, [r6, #4]!
   22eb0:	cmp	r3, r1
   22eb4:	ble	22edc <__assert_fail@plt+0x117dc>
   22eb8:	add	r0, r0, r2, lsl #2
   22ebc:	ldr	r0, [r0, #8]
   22ec0:	add	r2, r1, #1
   22ec4:	mov	r8, #0
   22ec8:	str	r2, [r5]
   22ecc:	str	r4, [r0, r1, lsl #2]
   22ed0:	mov	r0, r8
   22ed4:	sub	sp, fp, #28
   22ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22edc:	add	r7, r0, r2, lsl #2
   22ee0:	mov	r2, #2
   22ee4:	add	r9, r2, r1, lsl #1
   22ee8:	ldr	r0, [r7, #8]!
   22eec:	lsl	r1, r9, #2
   22ef0:	bl	2b910 <__assert_fail@plt+0x1a210>
   22ef4:	cmp	r0, #0
   22ef8:	beq	22ed0 <__assert_fail@plt+0x117d0>
   22efc:	str	r0, [r7]
   22f00:	str	r9, [r6]
   22f04:	ldr	r1, [r5]
   22f08:	b	22ec0 <__assert_fail@plt+0x117c0>
   22f0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f10:	add	fp, sp, #28
   22f14:	sub	sp, sp, #36	; 0x24
   22f18:	mov	r4, r0
   22f1c:	ldr	r0, [r0, #24]
   22f20:	mov	r6, r2
   22f24:	mov	r9, r1
   22f28:	cmp	r0, r1
   22f2c:	ble	23144 <__assert_fail@plt+0x11a44>
   22f30:	ldr	r0, [r4, #80]	; 0x50
   22f34:	mov	r1, #4
   22f38:	cmp	r0, #2
   22f3c:	movge	r0, #0
   22f40:	strge	r0, [r4, #16]
   22f44:	strge	r0, [r4, #20]
   22f48:	mov	r0, #0
   22f4c:	tst	r6, #1
   22f50:	strb	r0, [r4, #76]	; 0x4c
   22f54:	str	r0, [r4, #24]
   22f58:	str	r0, [r4, #28]
   22f5c:	str	r0, [r4, #32]
   22f60:	movweq	r1, #6
   22f64:	ldr	r2, [r4, #44]	; 0x2c
   22f68:	ldr	r3, [r4, #52]	; 0x34
   22f6c:	str	r2, [r4, #48]	; 0x30
   22f70:	str	r3, [r4, #56]	; 0x38
   22f74:	str	r1, [r4, #60]	; 0x3c
   22f78:	ldrb	r1, [r4, #75]	; 0x4b
   22f7c:	cmp	r1, #0
   22f80:	bne	22f8c <__assert_fail@plt+0x1188c>
   22f84:	ldr	r1, [r4]
   22f88:	str	r1, [r4, #4]
   22f8c:	mov	r5, r9
   22f90:	cmp	r5, #0
   22f94:	beq	230c0 <__assert_fail@plt+0x119c0>
   22f98:	ldr	r1, [r4, #32]
   22f9c:	cmp	r5, r1
   22fa0:	bge	23154 <__assert_fail@plt+0x11a54>
   22fa4:	ldrb	r0, [r4, #76]	; 0x4c
   22fa8:	cmp	r0, #0
   22fac:	bne	23308 <__assert_fail@plt+0x11c08>
   22fb0:	cmp	r5, #0
   22fb4:	ble	22ff0 <__assert_fail@plt+0x118f0>
   22fb8:	ldr	r1, [r4, #48]	; 0x30
   22fbc:	sub	r0, r5, #1
   22fc0:	cmp	r1, r0
   22fc4:	beq	233d0 <__assert_fail@plt+0x11cd0>
   22fc8:	ldr	r1, [r4, #80]	; 0x50
   22fcc:	cmp	r1, #2
   22fd0:	blt	23008 <__assert_fail@plt+0x11908>
   22fd4:	ldr	r1, [r4, #8]
   22fd8:	ldr	r6, [r1, r0, lsl #2]
   22fdc:	cmn	r6, #1
   22fe0:	bne	23038 <__assert_fail@plt+0x11938>
   22fe4:	sub	r0, r0, #1
   22fe8:	cmn	r0, #1
   22fec:	bne	22fd8 <__assert_fail@plt+0x118d8>
   22ff0:	ldr	r1, [r4, #60]	; 0x3c
   22ff4:	str	r1, [r4, #60]	; 0x3c
   22ff8:	ldr	r0, [r4, #80]	; 0x50
   22ffc:	cmp	r0, #2
   23000:	bge	23070 <__assert_fail@plt+0x11970>
   23004:	b	23088 <__assert_fail@plt+0x11988>
   23008:	ldr	r1, [r4, #4]
   2300c:	ldr	r2, [r4, #68]	; 0x44
   23010:	ldrb	r0, [r1, r0]
   23014:	ubfx	r1, r0, #5, #3
   23018:	and	r3, r0, #31
   2301c:	ldr	r2, [r2, r1, lsl #2]
   23020:	mov	r1, #1
   23024:	tst	r2, r1, lsl r3
   23028:	moveq	r1, #0
   2302c:	cmpeq	r0, #10
   23030:	bne	23060 <__assert_fail@plt+0x11960>
   23034:	b	23050 <__assert_fail@plt+0x11950>
   23038:	ldrb	r0, [r4, #78]	; 0x4e
   2303c:	cmp	r0, #0
   23040:	bne	2359c <__assert_fail@plt+0x11e9c>
   23044:	mov	r1, #0
   23048:	cmp	r6, #10
   2304c:	bne	23060 <__assert_fail@plt+0x11960>
   23050:	ldrb	r0, [r4, #77]	; 0x4d
   23054:	cmp	r0, #0
   23058:	movwne	r0, #1
   2305c:	lsl	r1, r0, #1
   23060:	str	r1, [r4, #60]	; 0x3c
   23064:	ldr	r0, [r4, #80]	; 0x50
   23068:	cmp	r0, #2
   2306c:	blt	23088 <__assert_fail@plt+0x11988>
   23070:	ldr	r2, [r4, #28]
   23074:	ldr	r0, [r4, #8]
   23078:	sub	r2, r2, r5
   2307c:	add	r1, r0, r5, lsl #2
   23080:	lsl	r2, r2, #2
   23084:	bl	11418 <memmove@plt>
   23088:	ldrb	r0, [r4, #75]	; 0x4b
   2308c:	cmp	r0, #0
   23090:	bne	233b8 <__assert_fail@plt+0x11cb8>
   23094:	ldr	r0, [r4, #28]
   23098:	ldr	r1, [r4, #32]
   2309c:	sub	r0, r0, r5
   230a0:	sub	r1, r1, r5
   230a4:	str	r0, [r4, #28]
   230a8:	str	r1, [r4, #32]
   230ac:	ldrb	r0, [r4, #75]	; 0x4b
   230b0:	cmp	r0, #0
   230b4:	ldreq	r0, [r4, #4]
   230b8:	addeq	r0, r0, r5
   230bc:	streq	r0, [r4, #4]
   230c0:	str	r9, [r4, #24]
   230c4:	ldr	r0, [r4, #48]	; 0x30
   230c8:	ldr	r3, [r4, #80]	; 0x50
   230cc:	ldr	r1, [r4, #56]	; 0x38
   230d0:	sub	r2, r0, r5
   230d4:	cmp	r3, #2
   230d8:	sub	r0, r1, r5
   230dc:	str	r2, [r4, #48]	; 0x30
   230e0:	str	r0, [r4, #56]	; 0x38
   230e4:	blt	2310c <__assert_fail@plt+0x11a0c>
   230e8:	ldrb	r0, [r4, #72]	; 0x48
   230ec:	cmp	r0, #0
   230f0:	beq	2312c <__assert_fail@plt+0x11a2c>
   230f4:	mov	r0, r4
   230f8:	bl	1be20 <__assert_fail@plt+0xa720>
   230fc:	cmp	r0, #0
   23100:	beq	23134 <__assert_fail@plt+0x11a34>
   23104:	sub	sp, fp, #28
   23108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2310c:	ldrb	r0, [r4, #75]	; 0x4b
   23110:	cmp	r0, #0
   23114:	bne	233ec <__assert_fail@plt+0x11cec>
   23118:	str	r2, [r4, #28]
   2311c:	mov	r0, #0
   23120:	str	r0, [r4, #40]	; 0x28
   23124:	sub	sp, fp, #28
   23128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2312c:	mov	r0, r4
   23130:	bl	1c740 <__assert_fail@plt+0xb040>
   23134:	mov	r0, #0
   23138:	str	r0, [r4, #40]	; 0x28
   2313c:	sub	sp, fp, #28
   23140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23144:	sub	r5, r9, r0
   23148:	cmp	r5, #0
   2314c:	bne	22f98 <__assert_fail@plt+0x11898>
   23150:	b	230c0 <__assert_fail@plt+0x119c0>
   23154:	ldrb	r2, [r4, #76]	; 0x4c
   23158:	ldr	lr, [r4, #28]
   2315c:	cmp	r2, #0
   23160:	bne	2373c <__assert_fail@plt+0x1203c>
   23164:	mov	r2, #0
   23168:	str	r2, [r4, #28]
   2316c:	ldr	r3, [r4, #80]	; 0x50
   23170:	cmp	r3, #2
   23174:	blt	2345c <__assert_fail@plt+0x11d5c>
   23178:	ldrb	r2, [r4, #73]	; 0x49
   2317c:	cmp	r2, #0
   23180:	beq	2323c <__assert_fail@plt+0x11b3c>
   23184:	ldr	r7, [r4]
   23188:	sub	r3, r5, r3
   2318c:	add	ip, r7, r0
   23190:	add	r3, ip, r3
   23194:	add	r8, ip, r5
   23198:	cmp	r3, r7
   2319c:	movcc	r3, r7
   231a0:	mov	r7, r8
   231a4:	sub	r7, r7, #1
   231a8:	cmp	r7, r3
   231ac:	bcc	2323c <__assert_fail@plt+0x11b3c>
   231b0:	ldrb	r2, [r7]
   231b4:	and	r2, r2, #192	; 0xc0
   231b8:	cmp	r2, #128	; 0x80
   231bc:	beq	231a4 <__assert_fail@plt+0x11aa4>
   231c0:	ldr	r0, [r4, #48]	; 0x30
   231c4:	mov	sl, lr
   231c8:	mov	r1, r7
   231cc:	add	r0, ip, r0
   231d0:	sub	r2, r0, r7
   231d4:	ldr	r0, [r4, #64]	; 0x40
   231d8:	cmp	r0, #0
   231dc:	bne	23908 <__assert_fail@plt+0x12208>
   231e0:	mov	r0, #0
   231e4:	add	r3, sp, #24
   231e8:	str	r0, [sp, #28]
   231ec:	str	r0, [sp, #24]
   231f0:	add	r0, sp, #20
   231f4:	bl	2bd34 <__assert_fail@plt+0x1a634>
   231f8:	sub	r1, r8, r7
   231fc:	mvn	r7, #0
   23200:	cmp	r0, r1
   23204:	bcc	23228 <__assert_fail@plt+0x11b28>
   23208:	cmn	r0, #3
   2320c:	bhi	23228 <__assert_fail@plt+0x11b28>
   23210:	mov	r2, #0
   23214:	sub	r0, r0, r1
   23218:	str	r2, [r4, #16]
   2321c:	str	r2, [r4, #20]
   23220:	str	r0, [r4, #28]
   23224:	ldr	r7, [sp, #20]
   23228:	cmn	r7, #1
   2322c:	bne	232ec <__assert_fail@plt+0x11bec>
   23230:	ldr	r0, [r4, #24]
   23234:	ldr	r1, [r4, #32]
   23238:	mov	lr, sl
   2323c:	add	r8, r1, r0
   23240:	cmp	r8, r9
   23244:	bge	235bc <__assert_fail@plt+0x11ebc>
   23248:	add	sl, r4, #16
   2324c:	str	lr, [sp]
   23250:	ldr	r0, [r4]
   23254:	ldr	r2, [r4, #44]	; 0x2c
   23258:	mov	r3, sl
   2325c:	add	r1, r0, r8
   23260:	ldr	r0, [sl]
   23264:	sub	r7, r2, r8
   23268:	mov	r2, r7
   2326c:	str	r0, [sp, #8]
   23270:	ldr	r0, [sl, #4]
   23274:	str	r0, [sp, #4]
   23278:	add	r0, sp, #24
   2327c:	bl	2bd34 <__assert_fail@plt+0x1a634>
   23280:	sub	r1, r0, #1
   23284:	cmn	r1, #3
   23288:	bcs	232a0 <__assert_fail@plt+0x11ba0>
   2328c:	ldr	r7, [sp, #24]
   23290:	add	r8, r0, r8
   23294:	cmp	r8, r9
   23298:	blt	23250 <__assert_fail@plt+0x11b50>
   2329c:	b	232d8 <__assert_fail@plt+0x11bd8>
   232a0:	ldr	r3, [sp, #4]
   232a4:	ldr	r2, [sp, #8]
   232a8:	cmp	r7, #0
   232ac:	mov	r1, #0
   232b0:	cmpne	r0, #0
   232b4:	beq	232c0 <__assert_fail@plt+0x11bc0>
   232b8:	ldr	r0, [r4]
   232bc:	ldrb	r1, [r0, r8]
   232c0:	stm	sl, {r2, r3}
   232c4:	mov	r0, #1
   232c8:	mov	r7, r1
   232cc:	add	r8, r0, r8
   232d0:	cmp	r8, r9
   232d4:	blt	23250 <__assert_fail@plt+0x11b50>
   232d8:	ldr	lr, [sp]
   232dc:	sub	r0, r8, r9
   232e0:	cmn	r7, #1
   232e4:	str	r0, [r4, #28]
   232e8:	beq	235c4 <__assert_fail@plt+0x11ec4>
   232ec:	ldrb	r0, [r4, #78]	; 0x4e
   232f0:	cmp	r0, #0
   232f4:	bne	238d8 <__assert_fail@plt+0x121d8>
   232f8:	mov	r1, #0
   232fc:	cmp	r7, #10
   23300:	beq	23710 <__assert_fail@plt+0x12010>
   23304:	b	23720 <__assert_fail@plt+0x12020>
   23308:	ldr	ip, [r4, #12]
   2330c:	ldr	r0, [r4, #28]
   23310:	mov	r2, #0
   23314:	b	23324 <__assert_fail@plt+0x11c24>
   23318:	cmp	r2, r3
   2331c:	mov	r0, r3
   23320:	bge	23350 <__assert_fail@plt+0x11c50>
   23324:	add	r1, r2, r0
   23328:	add	r1, r1, r1, lsr #31
   2332c:	asr	r1, r1, #1
   23330:	ldr	r7, [ip, r1, lsl #2]
   23334:	mov	r3, r1
   23338:	cmp	r7, r5
   2333c:	bgt	23318 <__assert_fail@plt+0x11c18>
   23340:	bge	23350 <__assert_fail@plt+0x11c50>
   23344:	add	r2, r1, #1
   23348:	mov	r3, r0
   2334c:	b	23318 <__assert_fail@plt+0x11c18>
   23350:	cmp	r7, r5
   23354:	mov	r0, #0
   23358:	movwlt	r0, #1
   2335c:	add	r7, r1, r0
   23360:	cmp	r7, #0
   23364:	ble	233a0 <__assert_fail@plt+0x11ca0>
   23368:	ldr	r1, [r4, #48]	; 0x30
   2336c:	sub	r0, r7, #1
   23370:	cmp	r1, r0
   23374:	beq	23764 <__assert_fail@plt+0x12064>
   23378:	ldr	r1, [r4, #80]	; 0x50
   2337c:	cmp	r1, #2
   23380:	blt	234a8 <__assert_fail@plt+0x11da8>
   23384:	ldr	r1, [r4, #8]
   23388:	ldr	r6, [r1, r0, lsl #2]
   2338c:	cmn	r6, #1
   23390:	bne	234d8 <__assert_fail@plt+0x11dd8>
   23394:	sub	r0, r0, #1
   23398:	cmn	r0, #1
   2339c:	bne	23388 <__assert_fail@plt+0x11c88>
   233a0:	ldr	r1, [r4, #60]	; 0x3c
   233a4:	str	r1, [r4, #60]	; 0x3c
   233a8:	cmp	r7, r5
   233ac:	ldr	r2, [r4, #28]
   233b0:	beq	23510 <__assert_fail@plt+0x11e10>
   233b4:	b	2377c <__assert_fail@plt+0x1207c>
   233b8:	ldr	r2, [r4, #28]
   233bc:	ldr	r0, [r4, #4]
   233c0:	add	r1, r0, r5
   233c4:	sub	r2, r2, r5
   233c8:	bl	11418 <memmove@plt>
   233cc:	b	23094 <__assert_fail@plt+0x11994>
   233d0:	and	r0, r6, #2
   233d4:	eor	r1, r0, #10
   233d8:	str	r1, [r4, #60]	; 0x3c
   233dc:	ldr	r0, [r4, #80]	; 0x50
   233e0:	cmp	r0, #2
   233e4:	bge	23070 <__assert_fail@plt+0x11970>
   233e8:	b	23088 <__assert_fail@plt+0x11988>
   233ec:	ldrb	r0, [r4, #72]	; 0x48
   233f0:	cmp	r0, #0
   233f4:	beq	2360c <__assert_fail@plt+0x11f0c>
   233f8:	ldr	r6, [r4, #36]	; 0x24
   233fc:	ldr	r5, [r4, #28]
   23400:	cmp	r6, r2
   23404:	movgt	r6, r2
   23408:	cmp	r5, r6
   2340c:	bge	23698 <__assert_fail@plt+0x11f98>
   23410:	bl	11574 <__ctype_toupper_loc@plt>
   23414:	ldr	r1, [r4]
   23418:	ldr	r2, [r4, #64]	; 0x40
   2341c:	add	r1, r1, r9
   23420:	cmp	r2, #0
   23424:	ldrb	r1, [r1, r5]
   23428:	bne	23454 <__assert_fail@plt+0x11d54>
   2342c:	ldr	r2, [r0]
   23430:	ldr	r1, [r2, r1, lsl #2]
   23434:	ldr	r2, [r4, #4]
   23438:	strb	r1, [r2, r5]
   2343c:	add	r1, r5, #1
   23440:	cmp	r1, r6
   23444:	bge	23694 <__assert_fail@plt+0x11f94>
   23448:	ldr	r9, [r4, #24]
   2344c:	mov	r5, r1
   23450:	b	23414 <__assert_fail@plt+0x11d14>
   23454:	ldrb	r1, [r2, r1]
   23458:	b	2342c <__assert_fail@plt+0x11d2c>
   2345c:	ldr	r3, [r4]
   23460:	add	r0, r5, r0
   23464:	ldr	r1, [r4, #64]	; 0x40
   23468:	add	r0, r0, r3
   2346c:	cmp	r1, #0
   23470:	ldrb	r0, [r0, #-1]
   23474:	str	r2, [r4, #32]
   23478:	ldrbne	r0, [r1, r0]
   2347c:	ldr	r1, [r4, #68]	; 0x44
   23480:	ubfx	r2, r0, #5, #3
   23484:	and	r3, r0, #31
   23488:	ldr	r2, [r1, r2, lsl #2]
   2348c:	mov	r1, #1
   23490:	tst	r2, r1, lsl r3
   23494:	moveq	r1, #0
   23498:	cmpeq	r0, #10
   2349c:	beq	236e4 <__assert_fail@plt+0x11fe4>
   234a0:	str	r1, [r4, #60]	; 0x3c
   234a4:	b	230ac <__assert_fail@plt+0x119ac>
   234a8:	ldr	r1, [r4, #4]
   234ac:	ldr	r2, [r4, #68]	; 0x44
   234b0:	ldrb	r0, [r1, r0]
   234b4:	ubfx	r1, r0, #5, #3
   234b8:	and	r3, r0, #31
   234bc:	ldr	r2, [r2, r1, lsl #2]
   234c0:	mov	r1, #1
   234c4:	tst	r2, r1, lsl r3
   234c8:	moveq	r1, #0
   234cc:	cmpeq	r0, #10
   234d0:	bne	23500 <__assert_fail@plt+0x11e00>
   234d4:	b	234f0 <__assert_fail@plt+0x11df0>
   234d8:	ldrb	r0, [r4, #78]	; 0x4e
   234dc:	cmp	r0, #0
   234e0:	bne	238b8 <__assert_fail@plt+0x121b8>
   234e4:	mov	r1, #0
   234e8:	cmp	r6, #10
   234ec:	bne	23500 <__assert_fail@plt+0x11e00>
   234f0:	ldrb	r0, [r4, #77]	; 0x4d
   234f4:	cmp	r0, #0
   234f8:	movwne	r0, #1
   234fc:	lsl	r1, r0, #1
   23500:	str	r1, [r4, #60]	; 0x3c
   23504:	cmp	r7, r5
   23508:	ldr	r2, [r4, #28]
   2350c:	bne	2377c <__assert_fail@plt+0x1207c>
   23510:	cmp	r2, r5
   23514:	ble	2377c <__assert_fail@plt+0x1207c>
   23518:	ldr	r0, [r4, #12]
   2351c:	ldr	r0, [r0, r5, lsl #2]
   23520:	cmp	r0, r5
   23524:	bne	2377c <__assert_fail@plt+0x1207c>
   23528:	ldr	r0, [r4, #8]
   2352c:	sub	r2, r2, r5
   23530:	lsl	r2, r2, #2
   23534:	add	r1, r0, r5, lsl #2
   23538:	bl	11418 <memmove@plt>
   2353c:	ldr	r2, [r4, #28]
   23540:	ldr	r0, [r4, #4]
   23544:	add	r1, r0, r5
   23548:	sub	r2, r2, r5
   2354c:	bl	11418 <memmove@plt>
   23550:	ldr	r0, [r4, #28]
   23554:	ldr	r1, [r4, #32]
   23558:	sub	r0, r0, r5
   2355c:	sub	r1, r1, r5
   23560:	cmp	r0, #1
   23564:	str	r0, [r4, #28]
   23568:	str	r1, [r4, #32]
   2356c:	blt	230ac <__assert_fail@plt+0x119ac>
   23570:	ldr	r0, [r4, #12]
   23574:	mov	r2, #0
   23578:	add	r1, r0, r5, lsl #2
   2357c:	ldr	r3, [r1, r2, lsl #2]
   23580:	sub	r3, r3, r5
   23584:	str	r3, [r0, r2, lsl #2]
   23588:	add	r2, r2, #1
   2358c:	ldr	r3, [r4, #28]
   23590:	cmp	r2, r3
   23594:	blt	2357c <__assert_fail@plt+0x11e7c>
   23598:	b	230ac <__assert_fail@plt+0x119ac>
   2359c:	mov	r0, r6
   235a0:	bl	115f8 <iswalnum@plt>
   235a4:	mov	r1, #1
   235a8:	cmp	r6, #95	; 0x5f
   235ac:	beq	23060 <__assert_fail@plt+0x11960>
   235b0:	cmp	r0, #0
   235b4:	beq	23044 <__assert_fail@plt+0x11944>
   235b8:	b	23060 <__assert_fail@plt+0x11960>
   235bc:	sub	r0, r8, r9
   235c0:	str	r0, [r4, #28]
   235c4:	cmp	lr, #0
   235c8:	ble	23604 <__assert_fail@plt+0x11f04>
   235cc:	ldr	r1, [r4, #48]	; 0x30
   235d0:	sub	r0, lr, #1
   235d4:	cmp	r1, r0
   235d8:	beq	238ac <__assert_fail@plt+0x121ac>
   235dc:	ldr	r1, [r4, #80]	; 0x50
   235e0:	cmp	r1, #2
   235e4:	blt	236b0 <__assert_fail@plt+0x11fb0>
   235e8:	ldr	r1, [r4, #8]
   235ec:	ldr	r6, [r1, r0, lsl #2]
   235f0:	cmn	r6, #1
   235f4:	bne	236f8 <__assert_fail@plt+0x11ff8>
   235f8:	sub	r0, r0, #1
   235fc:	cmn	r0, #1
   23600:	bne	235ec <__assert_fail@plt+0x11eec>
   23604:	ldr	r1, [r4, #60]	; 0x3c
   23608:	b	23720 <__assert_fail@plt+0x12020>
   2360c:	ldr	r3, [r4, #64]	; 0x40
   23610:	cmp	r3, #0
   23614:	beq	23134 <__assert_fail@plt+0x11a34>
   23618:	ldr	r1, [r4, #36]	; 0x24
   2361c:	ldr	r0, [r4, #28]
   23620:	cmp	r1, r2
   23624:	movgt	r1, r2
   23628:	cmp	r0, r1
   2362c:	bge	2367c <__assert_fail@plt+0x11f7c>
   23630:	ldr	r7, [r4]
   23634:	add	r2, r0, r9
   23638:	ldr	r6, [r4, #4]
   2363c:	ldrb	r2, [r7, r2]
   23640:	ldrb	r2, [r3, r2]
   23644:	strb	r2, [r6, r0]
   23648:	add	r0, r0, #1
   2364c:	cmp	r0, r1
   23650:	bge	2367c <__assert_fail@plt+0x11f7c>
   23654:	ldr	r7, [r4, #24]
   23658:	ldm	r4, {r2, r3}
   2365c:	ldr	r6, [r4, #64]	; 0x40
   23660:	add	r2, r2, r7
   23664:	ldrb	r2, [r2, r0]
   23668:	ldrb	r2, [r6, r2]
   2366c:	strb	r2, [r3, r0]
   23670:	add	r0, r0, #1
   23674:	cmp	r0, r1
   23678:	blt	23654 <__assert_fail@plt+0x11f54>
   2367c:	str	r0, [r4, #28]
   23680:	str	r0, [r4, #32]
   23684:	mov	r0, #0
   23688:	str	r0, [r4, #40]	; 0x28
   2368c:	sub	sp, fp, #28
   23690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23694:	add	r5, r5, #1
   23698:	str	r5, [r4, #28]
   2369c:	str	r5, [r4, #32]
   236a0:	mov	r0, #0
   236a4:	str	r0, [r4, #40]	; 0x28
   236a8:	sub	sp, fp, #28
   236ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   236b0:	ldr	r1, [r4, #4]
   236b4:	ldr	r2, [r4, #68]	; 0x44
   236b8:	ldrb	r0, [r1, r0]
   236bc:	ubfx	r1, r0, #5, #3
   236c0:	and	r3, r0, #31
   236c4:	ldr	r2, [r2, r1, lsl #2]
   236c8:	mov	r1, #1
   236cc:	tst	r2, r1, lsl r3
   236d0:	bne	23720 <__assert_fail@plt+0x12020>
   236d4:	mov	r1, #0
   236d8:	cmp	r0, #10
   236dc:	beq	23710 <__assert_fail@plt+0x12010>
   236e0:	b	23720 <__assert_fail@plt+0x12020>
   236e4:	ldrb	r0, [r4, #77]	; 0x4d
   236e8:	cmp	r0, #0
   236ec:	movwne	r0, #1
   236f0:	lsl	r1, r0, #1
   236f4:	b	234a0 <__assert_fail@plt+0x11da0>
   236f8:	ldrb	r0, [r4, #78]	; 0x4e
   236fc:	cmp	r0, #0
   23700:	bne	23944 <__assert_fail@plt+0x12244>
   23704:	mov	r1, #0
   23708:	cmp	r6, #10
   2370c:	bne	23720 <__assert_fail@plt+0x12020>
   23710:	ldrb	r0, [r4, #77]	; 0x4d
   23714:	cmp	r0, #0
   23718:	movwne	r0, #1
   2371c:	lsl	r1, r0, #1
   23720:	str	r1, [r4, #60]	; 0x3c
   23724:	mov	r0, #0
   23728:	ldr	r2, [r4, #28]
   2372c:	cmp	r2, #0
   23730:	bne	23864 <__assert_fail@plt+0x12164>
   23734:	str	r0, [r4, #32]
   23738:	b	230ac <__assert_fail@plt+0x119ac>
   2373c:	mov	r2, #0
   23740:	strb	r2, [r4, #76]	; 0x4c
   23744:	sub	r2, r5, r9
   23748:	ldr	r3, [r4, #44]	; 0x2c
   2374c:	ldr	r7, [r4, #52]	; 0x34
   23750:	add	r3, r2, r3
   23754:	add	r2, r2, r7
   23758:	str	r3, [r4, #48]	; 0x30
   2375c:	str	r2, [r4, #56]	; 0x38
   23760:	b	23164 <__assert_fail@plt+0x11a64>
   23764:	and	r0, r6, #2
   23768:	eor	r1, r0, #10
   2376c:	str	r1, [r4, #60]	; 0x3c
   23770:	cmp	r7, r5
   23774:	ldr	r2, [r4, #28]
   23778:	beq	23510 <__assert_fail@plt+0x11e10>
   2377c:	mov	r0, #0
   23780:	strb	r0, [r4, #76]	; 0x4c
   23784:	sub	r0, r5, r9
   23788:	ldr	r1, [r4, #44]	; 0x2c
   2378c:	ldr	r3, [r4, #52]	; 0x34
   23790:	add	r1, r0, r1
   23794:	add	r0, r0, r3
   23798:	str	r1, [r4, #48]	; 0x30
   2379c:	sub	r1, r7, #1
   237a0:	str	r0, [r4, #56]	; 0x38
   237a4:	add	r0, r1, #1
   237a8:	cmp	r0, #1
   237ac:	blt	237c4 <__assert_fail@plt+0x120c4>
   237b0:	ldr	r3, [r4, #12]
   237b4:	ldr	r3, [r3, r1, lsl #2]
   237b8:	sub	r1, r1, #1
   237bc:	cmp	r3, r5
   237c0:	beq	237a4 <__assert_fail@plt+0x120a4>
   237c4:	cmp	r0, r2
   237c8:	bge	237ec <__assert_fail@plt+0x120ec>
   237cc:	ldr	r1, [r4, #8]
   237d0:	ldr	r3, [r1, r0, lsl #2]
   237d4:	cmn	r3, #1
   237d8:	bne	237ec <__assert_fail@plt+0x120ec>
   237dc:	add	r0, r0, #1
   237e0:	cmp	r2, r0
   237e4:	bne	237d0 <__assert_fail@plt+0x120d0>
   237e8:	b	237f4 <__assert_fail@plt+0x120f4>
   237ec:	cmp	r0, r2
   237f0:	bne	23804 <__assert_fail@plt+0x12104>
   237f4:	mov	r0, #0
   237f8:	str	r0, [r4, #28]
   237fc:	str	r0, [r4, #32]
   23800:	b	230ac <__assert_fail@plt+0x119ac>
   23804:	ldr	r1, [r4, #12]
   23808:	ldr	r0, [r1, r0, lsl #2]
   2380c:	subs	r2, r0, r5
   23810:	str	r2, [r4, #28]
   23814:	beq	23858 <__assert_fail@plt+0x12158>
   23818:	cmp	r2, #1
   2381c:	blt	23840 <__assert_fail@plt+0x12140>
   23820:	ldr	r0, [r4, #8]
   23824:	mov	r1, #0
   23828:	mvn	r3, #0
   2382c:	str	r3, [r0, r1, lsl #2]
   23830:	add	r1, r1, #1
   23834:	ldr	r2, [r4, #28]
   23838:	cmp	r1, r2
   2383c:	blt	2382c <__assert_fail@plt+0x1212c>
   23840:	ldr	r0, [r4, #4]
   23844:	mov	r1, #255	; 0xff
   23848:	bl	11610 <memset@plt>
   2384c:	ldr	r0, [r4, #28]
   23850:	str	r0, [r4, #32]
   23854:	b	230ac <__assert_fail@plt+0x119ac>
   23858:	mov	r0, #0
   2385c:	str	r0, [r4, #32]
   23860:	b	230ac <__assert_fail@plt+0x119ac>
   23864:	cmp	r2, #1
   23868:	blt	2388c <__assert_fail@plt+0x1218c>
   2386c:	ldr	r0, [r4, #8]
   23870:	mov	r1, #0
   23874:	mvn	r3, #0
   23878:	str	r3, [r0, r1, lsl #2]
   2387c:	add	r1, r1, #1
   23880:	ldr	r2, [r4, #28]
   23884:	cmp	r1, r2
   23888:	blt	23878 <__assert_fail@plt+0x12178>
   2388c:	ldrb	r0, [r4, #75]	; 0x4b
   23890:	cmp	r0, #0
   23894:	beq	238fc <__assert_fail@plt+0x121fc>
   23898:	ldr	r0, [r4, #4]
   2389c:	mov	r1, #255	; 0xff
   238a0:	bl	11610 <memset@plt>
   238a4:	ldr	r0, [r4, #28]
   238a8:	b	23734 <__assert_fail@plt+0x12034>
   238ac:	and	r0, r6, #2
   238b0:	eor	r1, r0, #10
   238b4:	b	23720 <__assert_fail@plt+0x12020>
   238b8:	mov	r0, r6
   238bc:	bl	115f8 <iswalnum@plt>
   238c0:	mov	r1, #1
   238c4:	cmp	r6, #95	; 0x5f
   238c8:	beq	23500 <__assert_fail@plt+0x11e00>
   238cc:	cmp	r0, #0
   238d0:	beq	234e4 <__assert_fail@plt+0x11de4>
   238d4:	b	23500 <__assert_fail@plt+0x11e00>
   238d8:	mov	r0, r7
   238dc:	bl	115f8 <iswalnum@plt>
   238e0:	mov	r1, #1
   238e4:	cmp	r7, #95	; 0x5f
   238e8:	beq	23720 <__assert_fail@plt+0x12020>
   238ec:	cmp	r0, #0
   238f0:	mov	r2, r7
   238f4:	beq	232f8 <__assert_fail@plt+0x11bf8>
   238f8:	b	23720 <__assert_fail@plt+0x12020>
   238fc:	mov	r0, r2
   23900:	str	r2, [r4, #32]
   23904:	b	230ac <__assert_fail@plt+0x119ac>
   23908:	cmp	r2, #1
   2390c:	blt	23964 <__assert_fail@plt+0x12264>
   23910:	cmp	r2, #6
   23914:	mov	r1, r2
   23918:	movge	r1, #6
   2391c:	sub	ip, r1, #1
   23920:	add	r1, sp, #14
   23924:	ldrb	r3, [r7, ip]
   23928:	cmp	ip, #0
   2392c:	ldrb	r3, [r0, r3]
   23930:	strb	r3, [r1, ip]
   23934:	sub	r3, ip, #1
   23938:	mov	ip, r3
   2393c:	bgt	23924 <__assert_fail@plt+0x12224>
   23940:	b	231e0 <__assert_fail@plt+0x11ae0>
   23944:	mov	r0, r6
   23948:	bl	115f8 <iswalnum@plt>
   2394c:	mov	r1, #1
   23950:	cmp	r6, #95	; 0x5f
   23954:	beq	23720 <__assert_fail@plt+0x12020>
   23958:	cmp	r0, #0
   2395c:	beq	23704 <__assert_fail@plt+0x12004>
   23960:	b	23720 <__assert_fail@plt+0x12020>
   23964:	add	r1, sp, #14
   23968:	b	231e0 <__assert_fail@plt+0x11ae0>
   2396c:	push	{r4, r5, r6, sl, fp, lr}
   23970:	add	fp, sp, #16
   23974:	mov	r3, r2
   23978:	ldr	r2, [r0, #88]	; 0x58
   2397c:	mov	r5, r1
   23980:	mov	r4, r0
   23984:	mov	r1, r3
   23988:	bl	23bc4 <__assert_fail@plt+0x124c4>
   2398c:	ldr	r1, [r5, #8]
   23990:	cmp	r1, #1
   23994:	blt	23b0c <__assert_fail@plt+0x1240c>
   23998:	ldr	r3, [r5, #12]
   2399c:	ldr	r5, [r4, #84]	; 0x54
   239a0:	movw	lr, #65280	; 0xff00
   239a4:	and	ip, r0, #8
   239a8:	and	r2, r0, #2
   239ac:	tst	r0, #1
   239b0:	movt	lr, #3
   239b4:	ldr	r5, [r5]
   239b8:	bne	23a14 <__assert_fail@plt+0x12314>
   239bc:	cmp	r2, #0
   239c0:	bne	23a6c <__assert_fail@plt+0x1236c>
   239c4:	mov	r2, #0
   239c8:	b	239d8 <__assert_fail@plt+0x122d8>
   239cc:	add	r2, r2, #1
   239d0:	cmp	r2, r1
   239d4:	bge	23b0c <__assert_fail@plt+0x1240c>
   239d8:	ldr	r0, [r3, r2, lsl #2]
   239dc:	add	r4, r5, r0, lsl #3
   239e0:	ldr	r4, [r4, #4]
   239e4:	uxtb	r6, r4
   239e8:	cmp	r6, #2
   239ec:	bne	239cc <__assert_fail@plt+0x122cc>
   239f0:	tst	r4, lr
   239f4:	beq	23b10 <__assert_fail@plt+0x12410>
   239f8:	tst	r4, #9216	; 0x2400
   239fc:	bne	239cc <__assert_fail@plt+0x122cc>
   23a00:	cmp	ip, #0
   23a04:	bne	23b10 <__assert_fail@plt+0x12410>
   23a08:	ands	r4, r4, #32768	; 0x8000
   23a0c:	bne	239cc <__assert_fail@plt+0x122cc>
   23a10:	b	23b10 <__assert_fail@plt+0x12410>
   23a14:	cmp	r2, #0
   23a18:	bne	23abc <__assert_fail@plt+0x123bc>
   23a1c:	mov	r2, #0
   23a20:	b	23a30 <__assert_fail@plt+0x12330>
   23a24:	add	r2, r2, #1
   23a28:	cmp	r2, r1
   23a2c:	bge	23b0c <__assert_fail@plt+0x1240c>
   23a30:	ldr	r0, [r3, r2, lsl #2]
   23a34:	add	r4, r5, r0, lsl #3
   23a38:	ldr	r4, [r4, #4]
   23a3c:	uxtb	r6, r4
   23a40:	cmp	r6, #2
   23a44:	bne	23a24 <__assert_fail@plt+0x12324>
   23a48:	tst	r4, lr
   23a4c:	beq	23b10 <__assert_fail@plt+0x12410>
   23a50:	tst	r4, #10240	; 0x2800
   23a54:	bne	23a24 <__assert_fail@plt+0x12324>
   23a58:	cmp	ip, #0
   23a5c:	bne	23b10 <__assert_fail@plt+0x12410>
   23a60:	ands	r4, r4, #32768	; 0x8000
   23a64:	bne	23a24 <__assert_fail@plt+0x12324>
   23a68:	b	23b10 <__assert_fail@plt+0x12410>
   23a6c:	mov	r2, #0
   23a70:	b	23a80 <__assert_fail@plt+0x12380>
   23a74:	add	r2, r2, #1
   23a78:	cmp	r2, r1
   23a7c:	bge	23b0c <__assert_fail@plt+0x1240c>
   23a80:	ldr	r0, [r3, r2, lsl #2]
   23a84:	add	r4, r5, r0, lsl #3
   23a88:	ldr	r4, [r4, #4]
   23a8c:	uxtb	r6, r4
   23a90:	cmp	r6, #2
   23a94:	bne	23a74 <__assert_fail@plt+0x12374>
   23a98:	tst	r4, lr
   23a9c:	beq	23b10 <__assert_fail@plt+0x12410>
   23aa0:	tst	r4, #1024	; 0x400
   23aa4:	bne	23a74 <__assert_fail@plt+0x12374>
   23aa8:	cmp	ip, #0
   23aac:	bne	23b10 <__assert_fail@plt+0x12410>
   23ab0:	ands	r4, r4, #32768	; 0x8000
   23ab4:	bne	23a74 <__assert_fail@plt+0x12374>
   23ab8:	b	23b10 <__assert_fail@plt+0x12410>
   23abc:	mov	r2, #0
   23ac0:	b	23ad0 <__assert_fail@plt+0x123d0>
   23ac4:	add	r2, r2, #1
   23ac8:	cmp	r2, r1
   23acc:	bge	23b0c <__assert_fail@plt+0x1240c>
   23ad0:	ldr	r0, [r3, r2, lsl #2]
   23ad4:	add	r4, r5, r0, lsl #3
   23ad8:	ldr	r4, [r4, #4]
   23adc:	uxtb	r6, r4
   23ae0:	cmp	r6, #2
   23ae4:	bne	23ac4 <__assert_fail@plt+0x123c4>
   23ae8:	tst	r4, lr
   23aec:	beq	23b10 <__assert_fail@plt+0x12410>
   23af0:	tst	r4, #2048	; 0x800
   23af4:	bne	23ac4 <__assert_fail@plt+0x123c4>
   23af8:	cmp	ip, #0
   23afc:	bne	23b10 <__assert_fail@plt+0x12410>
   23b00:	ands	r4, r4, #32768	; 0x8000
   23b04:	bne	23ac4 <__assert_fail@plt+0x123c4>
   23b08:	b	23b10 <__assert_fail@plt+0x12410>
   23b0c:	mov	r0, #0
   23b10:	pop	{r4, r5, r6, sl, fp, pc}
   23b14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23b18:	add	fp, sp, #24
   23b1c:	mov	r8, r0
   23b20:	ldr	r0, [r0, #124]	; 0x7c
   23b24:	cmp	r0, #1
   23b28:	blt	23bb4 <__assert_fail@plt+0x124b4>
   23b2c:	mov	r7, #0
   23b30:	b	23b4c <__assert_fail@plt+0x1244c>
   23b34:	mov	r0, r5
   23b38:	bl	13ddc <__assert_fail@plt+0x26dc>
   23b3c:	ldr	r0, [r8, #124]	; 0x7c
   23b40:	add	r7, r7, #1
   23b44:	cmp	r7, r0
   23b48:	bge	23bb4 <__assert_fail@plt+0x124b4>
   23b4c:	ldr	r0, [r8, #132]	; 0x84
   23b50:	ldr	r5, [r0, r7, lsl #2]
   23b54:	ldr	r0, [r5, #16]
   23b58:	cmp	r0, #1
   23b5c:	blt	23b8c <__assert_fail@plt+0x1248c>
   23b60:	mov	r4, #0
   23b64:	ldr	r0, [r5, #20]
   23b68:	ldr	r6, [r0, r4, lsl #2]
   23b6c:	ldr	r0, [r6, #16]
   23b70:	bl	13ddc <__assert_fail@plt+0x26dc>
   23b74:	mov	r0, r6
   23b78:	bl	13ddc <__assert_fail@plt+0x26dc>
   23b7c:	ldr	r0, [r5, #16]
   23b80:	add	r4, r4, #1
   23b84:	cmp	r4, r0
   23b88:	blt	23b64 <__assert_fail@plt+0x12464>
   23b8c:	ldr	r0, [r5, #20]
   23b90:	bl	13ddc <__assert_fail@plt+0x26dc>
   23b94:	ldr	r0, [r5, #8]
   23b98:	cmp	r0, #0
   23b9c:	beq	23b34 <__assert_fail@plt+0x12434>
   23ba0:	ldr	r0, [r0, #8]
   23ba4:	bl	13ddc <__assert_fail@plt+0x26dc>
   23ba8:	ldr	r0, [r5, #8]
   23bac:	bl	13ddc <__assert_fail@plt+0x26dc>
   23bb0:	b	23b34 <__assert_fail@plt+0x12434>
   23bb4:	mov	r0, #0
   23bb8:	str	r0, [r8, #108]	; 0x6c
   23bbc:	str	r0, [r8, #124]	; 0x7c
   23bc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23bc4:	push	{r4, r5, fp, lr}
   23bc8:	add	fp, sp, #8
   23bcc:	mov	r4, r0
   23bd0:	cmn	r1, #1
   23bd4:	ble	23c0c <__assert_fail@plt+0x1250c>
   23bd8:	ldr	r0, [r4, #48]	; 0x30
   23bdc:	cmp	r0, r1
   23be0:	beq	23c70 <__assert_fail@plt+0x12570>
   23be4:	ldr	r0, [r4, #80]	; 0x50
   23be8:	cmp	r0, #2
   23bec:	blt	23c14 <__assert_fail@plt+0x12514>
   23bf0:	ldr	r0, [r4, #8]
   23bf4:	ldr	r5, [r0, r1, lsl #2]
   23bf8:	cmn	r5, #1
   23bfc:	bne	23c44 <__assert_fail@plt+0x12544>
   23c00:	sub	r1, r1, #1
   23c04:	cmn	r1, #1
   23c08:	bne	23bf4 <__assert_fail@plt+0x124f4>
   23c0c:	ldr	r0, [r4, #60]	; 0x3c
   23c10:	pop	{r4, r5, fp, pc}
   23c14:	ldr	r0, [r4, #4]
   23c18:	ldr	r2, [r4, #68]	; 0x44
   23c1c:	ldrb	r1, [r0, r1]
   23c20:	ubfx	r0, r1, #5, #3
   23c24:	and	r3, r1, #31
   23c28:	ldr	r2, [r2, r0, lsl #2]
   23c2c:	mov	r0, #1
   23c30:	tst	r2, r0, lsl r3
   23c34:	moveq	r0, #0
   23c38:	cmpeq	r1, #10
   23c3c:	bne	23c6c <__assert_fail@plt+0x1256c>
   23c40:	b	23c5c <__assert_fail@plt+0x1255c>
   23c44:	ldrb	r0, [r4, #78]	; 0x4e
   23c48:	cmp	r0, #0
   23c4c:	bne	23c7c <__assert_fail@plt+0x1257c>
   23c50:	mov	r0, #0
   23c54:	cmp	r5, #10
   23c58:	popne	{r4, r5, fp, pc}
   23c5c:	ldrb	r0, [r4, #77]	; 0x4d
   23c60:	cmp	r0, #0
   23c64:	movwne	r0, #1
   23c68:	lsl	r0, r0, #1
   23c6c:	pop	{r4, r5, fp, pc}
   23c70:	and	r0, r2, #2
   23c74:	eor	r0, r0, #10
   23c78:	pop	{r4, r5, fp, pc}
   23c7c:	mov	r0, r5
   23c80:	bl	115f8 <iswalnum@plt>
   23c84:	mov	r1, r0
   23c88:	mov	r0, #1
   23c8c:	cmp	r5, #95	; 0x5f
   23c90:	beq	23c6c <__assert_fail@plt+0x1256c>
   23c94:	cmp	r1, #0
   23c98:	beq	23c50 <__assert_fail@plt+0x12550>
   23c9c:	b	23c6c <__assert_fail@plt+0x1256c>
   23ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ca4:	add	fp, sp, #28
   23ca8:	sub	sp, sp, #4
   23cac:	mov	sl, r0
   23cb0:	ldr	r0, [r1, #4]
   23cb4:	cmp	r0, #1
   23cb8:	blt	23d88 <__assert_fail@plt+0x12688>
   23cbc:	ldr	r7, [sl, #84]	; 0x54
   23cc0:	mov	r8, r2
   23cc4:	mov	r5, r1
   23cc8:	mov	r4, #0
   23ccc:	b	23cdc <__assert_fail@plt+0x125dc>
   23cd0:	add	r4, r4, #1
   23cd4:	cmp	r4, r0
   23cd8:	bge	23d88 <__assert_fail@plt+0x12688>
   23cdc:	ldr	r1, [r5, #8]
   23ce0:	ldr	r6, [r1, r4, lsl #2]
   23ce4:	ldr	r1, [r7]
   23ce8:	add	r2, r1, r6, lsl #3
   23cec:	ldrb	r2, [r2, #4]
   23cf0:	cmp	r2, #8
   23cf4:	bne	23cd0 <__assert_fail@plt+0x125d0>
   23cf8:	ldr	r1, [r1, r6, lsl #3]
   23cfc:	cmp	r1, #31
   23d00:	bgt	23cd0 <__assert_fail@plt+0x125d0>
   23d04:	ldr	r2, [r7, #80]	; 0x50
   23d08:	mov	r3, #1
   23d0c:	tst	r2, r3, lsl r1
   23d10:	beq	23cd0 <__assert_fail@plt+0x125d0>
   23d14:	ldr	r0, [sl, #124]	; 0x7c
   23d18:	ldr	r9, [sl, #128]	; 0x80
   23d1c:	cmp	r0, r9
   23d20:	beq	23d64 <__assert_fail@plt+0x12664>
   23d24:	mov	r0, #1
   23d28:	mov	r1, #24
   23d2c:	bl	2b88c <__assert_fail@plt+0x1a18c>
   23d30:	ldr	r1, [sl, #124]	; 0x7c
   23d34:	ldr	r2, [sl, #132]	; 0x84
   23d38:	str	r0, [r2, r1, lsl #2]
   23d3c:	ldr	r0, [sl, #132]	; 0x84
   23d40:	ldr	r0, [r0, r1, lsl #2]
   23d44:	cmp	r0, #0
   23d48:	beq	23d94 <__assert_fail@plt+0x12694>
   23d4c:	add	r1, r1, #1
   23d50:	str	r6, [r0, #4]
   23d54:	str	r1, [sl, #124]	; 0x7c
   23d58:	str	r8, [r0]
   23d5c:	ldr	r0, [r5, #4]
   23d60:	b	23cd0 <__assert_fail@plt+0x125d0>
   23d64:	ldr	r0, [sl, #132]	; 0x84
   23d68:	lsl	r1, r9, #3
   23d6c:	bl	2b910 <__assert_fail@plt+0x1a210>
   23d70:	cmp	r0, #0
   23d74:	beq	23d94 <__assert_fail@plt+0x12694>
   23d78:	lsl	r1, r9, #1
   23d7c:	str	r1, [sl, #128]	; 0x80
   23d80:	str	r0, [sl, #132]	; 0x84
   23d84:	b	23d24 <__assert_fail@plt+0x12624>
   23d88:	mov	r0, #0
   23d8c:	sub	sp, fp, #28
   23d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d94:	mov	r0, #12
   23d98:	sub	sp, fp, #28
   23d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23da4:	add	fp, sp, #28
   23da8:	sub	sp, sp, #76	; 0x4c
   23dac:	mov	ip, r0
   23db0:	ldr	r0, [r1, #4]
   23db4:	cmp	r0, #1
   23db8:	blt	24728 <__assert_fail@plt+0x13028>
   23dbc:	ldr	r2, [ip, #84]	; 0x54
   23dc0:	ldr	r0, [ip, #40]	; 0x28
   23dc4:	mov	r3, #0
   23dc8:	str	ip, [sp, #44]	; 0x2c
   23dcc:	str	r1, [sp, #12]
   23dd0:	str	r0, [sp, #52]	; 0x34
   23dd4:	str	r2, [sp, #24]
   23dd8:	b	23df8 <__assert_fail@plt+0x126f8>
   23ddc:	ldr	r1, [sp, #12]
   23de0:	ldr	r3, [sp, #16]
   23de4:	ldr	r2, [sp, #24]
   23de8:	ldr	r0, [r1, #4]
   23dec:	add	r3, r3, #1
   23df0:	cmp	r3, r0
   23df4:	bge	24728 <__assert_fail@plt+0x13028>
   23df8:	ldr	r0, [r1, #8]
   23dfc:	str	r3, [sp, #16]
   23e00:	ldr	r3, [r0, r3, lsl #2]
   23e04:	ldr	r0, [r2]
   23e08:	add	r4, r0, r3, lsl #3
   23e0c:	mov	r1, r3
   23e10:	str	r3, [sp, #48]	; 0x30
   23e14:	ldr	r5, [r4, #4]!
   23e18:	uxtb	r0, r5
   23e1c:	cmp	r0, #4
   23e20:	bne	23ddc <__assert_fail@plt+0x126dc>
   23e24:	movw	r0, #65280	; 0xff00
   23e28:	movt	r0, #3
   23e2c:	tst	r5, r0
   23e30:	beq	23f40 <__assert_fail@plt+0x12840>
   23e34:	ldr	r1, [sp, #52]	; 0x34
   23e38:	cmn	r1, #1
   23e3c:	ble	23e78 <__assert_fail@plt+0x12778>
   23e40:	ldr	r0, [ip, #48]	; 0x30
   23e44:	cmp	r0, r1
   23e48:	beq	246cc <__assert_fail@plt+0x12fcc>
   23e4c:	ldr	r0, [ip, #80]	; 0x50
   23e50:	cmp	r0, #2
   23e54:	blt	23e98 <__assert_fail@plt+0x12798>
   23e58:	ldr	r0, [ip, #8]
   23e5c:	ldr	r1, [sp, #52]	; 0x34
   23e60:	ldr	r6, [r0, r1, lsl #2]
   23e64:	cmn	r6, #1
   23e68:	bne	23ed4 <__assert_fail@plt+0x127d4>
   23e6c:	sub	r1, r1, #1
   23e70:	cmn	r1, #1
   23e74:	bne	23e60 <__assert_fail@plt+0x12760>
   23e78:	ldr	r1, [ip, #60]	; 0x3c
   23e7c:	and	r0, r1, #1
   23e80:	tst	r5, #1024	; 0x400
   23e84:	eor	r2, r0, #1
   23e88:	beq	23f0c <__assert_fail@plt+0x1280c>
   23e8c:	cmp	r0, #0
   23e90:	beq	23ddc <__assert_fail@plt+0x126dc>
   23e94:	b	23f0c <__assert_fail@plt+0x1280c>
   23e98:	ldr	r0, [ip, #4]
   23e9c:	ldr	r2, [sp, #52]	; 0x34
   23ea0:	ldr	r1, [ip, #68]	; 0x44
   23ea4:	ldrb	r0, [r0, r2]
   23ea8:	ubfx	r2, r0, #5, #3
   23eac:	and	r7, r0, #31
   23eb0:	ldr	r3, [r1, r2, lsl #2]
   23eb4:	mov	r1, #1
   23eb8:	mov	r2, #0
   23ebc:	tst	r3, r1, lsl r7
   23ec0:	bne	23f0c <__assert_fail@plt+0x1280c>
   23ec4:	mov	r1, #0
   23ec8:	cmp	r0, #10
   23ecc:	beq	23eec <__assert_fail@plt+0x127ec>
   23ed0:	b	23efc <__assert_fail@plt+0x127fc>
   23ed4:	ldrb	r0, [ip, #78]	; 0x4e
   23ed8:	cmp	r0, #0
   23edc:	bne	246ec <__assert_fail@plt+0x12fec>
   23ee0:	mov	r1, #0
   23ee4:	cmp	r6, #10
   23ee8:	bne	23efc <__assert_fail@plt+0x127fc>
   23eec:	ldrb	r0, [ip, #77]	; 0x4d
   23ef0:	cmp	r0, #0
   23ef4:	movwne	r0, #1
   23ef8:	lsl	r1, r0, #1
   23efc:	and	r0, r1, #1
   23f00:	tst	r5, #1024	; 0x400
   23f04:	eor	r2, r0, #1
   23f08:	bne	23e8c <__assert_fail@plt+0x1278c>
   23f0c:	ldr	r0, [r4]
   23f10:	cmp	r2, #0
   23f14:	bne	23f20 <__assert_fail@plt+0x12820>
   23f18:	ands	r2, r0, #2048	; 0x800
   23f1c:	bne	23ddc <__assert_fail@plt+0x126dc>
   23f20:	tst	r1, #2
   23f24:	bne	23f30 <__assert_fail@plt+0x12830>
   23f28:	ands	r2, r0, #8192	; 0x2000
   23f2c:	bne	23ddc <__assert_fail@plt+0x126dc>
   23f30:	tst	r1, #8
   23f34:	bne	23f40 <__assert_fail@plt+0x12840>
   23f38:	ands	r0, r0, #32768	; 0x8000
   23f3c:	bne	23ddc <__assert_fail@plt+0x126dc>
   23f40:	ldr	r2, [ip, #108]	; 0x6c
   23f44:	ldr	r0, [ip, #84]	; 0x54
   23f48:	ldr	r9, [ip, #4]
   23f4c:	cmp	r2, #1
   23f50:	str	r0, [sp, #36]	; 0x24
   23f54:	str	r2, [sp, #20]
   23f58:	blt	23fec <__assert_fail@plt+0x128ec>
   23f5c:	ldr	r4, [sp, #52]	; 0x34
   23f60:	ldr	r1, [ip, #116]	; 0x74
   23f64:	mov	r0, #0
   23f68:	mov	r5, #1
   23f6c:	mov	lr, r4
   23f70:	add	r3, r2, r0
   23f74:	add	r3, r3, r3, lsr #31
   23f78:	asr	r7, r3, #1
   23f7c:	add	r6, r7, r7, lsl #1
   23f80:	add	r6, r1, r6, lsl #3
   23f84:	ldr	r6, [r6, #4]
   23f88:	cmp	r6, lr
   23f8c:	addlt	r0, r5, r3, asr #1
   23f90:	movge	r2, r7
   23f94:	cmp	r0, r2
   23f98:	blt	23f70 <__assert_fail@plt+0x12870>
   23f9c:	ldr	r1, [sp, #20]
   23fa0:	cmp	r0, r1
   23fa4:	bge	24004 <__assert_fail@plt+0x12904>
   23fa8:	cmn	r0, #1
   23fac:	beq	24004 <__assert_fail@plt+0x12904>
   23fb0:	ldr	r1, [ip, #116]	; 0x74
   23fb4:	add	r0, r0, r0, lsl #1
   23fb8:	add	r0, r1, r0, lsl #3
   23fbc:	ldr	r1, [r0, #4]
   23fc0:	cmp	r1, lr
   23fc4:	bne	24004 <__assert_fail@plt+0x12904>
   23fc8:	ldr	r1, [r0]
   23fcc:	ldr	r2, [sp, #48]	; 0x30
   23fd0:	cmp	r1, r2
   23fd4:	beq	2440c <__assert_fail@plt+0x12d0c>
   23fd8:	ldrb	r1, [r0, #20]
   23fdc:	add	r0, r0, #24
   23fe0:	cmp	r1, #0
   23fe4:	bne	23fc8 <__assert_fail@plt+0x128c8>
   23fe8:	b	24004 <__assert_fail@plt+0x12904>
   23fec:	ldr	r4, [sp, #52]	; 0x34
   23ff0:	mov	r0, #0
   23ff4:	mov	lr, r4
   23ff8:	ldr	r1, [sp, #20]
   23ffc:	cmp	r0, r1
   24000:	blt	23fa8 <__assert_fail@plt+0x128a8>
   24004:	ldr	r0, [ip, #124]	; 0x7c
   24008:	cmp	r0, #1
   2400c:	ldr	r0, [sp, #20]
   24010:	blt	24410 <__assert_fail@plt+0x12d10>
   24014:	ldr	r0, [sp, #36]	; 0x24
   24018:	ldr	r1, [sp, #48]	; 0x30
   2401c:	mov	r3, #0
   24020:	ldr	r0, [r0]
   24024:	ldr	r2, [r0, r1, lsl #3]
   24028:	str	r2, [sp, #32]
   2402c:	ldr	r1, [ip, #132]	; 0x84
   24030:	str	r3, [sp, #28]
   24034:	ldr	r6, [r1, r3, lsl #2]
   24038:	ldr	r1, [r6, #4]
   2403c:	ldr	r0, [r0, r1, lsl #3]
   24040:	cmp	r0, r2
   24044:	bne	243e0 <__assert_fail@plt+0x12ce0>
   24048:	ldr	r0, [r6, #16]
   2404c:	ldr	r1, [r6]
   24050:	mov	r8, #0
   24054:	mov	r7, lr
   24058:	str	r6, [sp, #40]	; 0x28
   2405c:	cmp	r0, #1
   24060:	blt	24198 <__assert_fail@plt+0x12a98>
   24064:	mov	r5, r1
   24068:	ldr	r1, [r6, #20]
   2406c:	ldr	r4, [r1, r8, lsl #2]
   24070:	ldr	r1, [r4, #4]
   24074:	sub	sl, r1, r5
   24078:	str	r1, [fp, #-48]	; 0xffffffd0
   2407c:	cmp	sl, #1
   24080:	blt	240b4 <__assert_fail@plt+0x129b4>
   24084:	ldr	r1, [ip, #28]
   24088:	add	r3, sl, r7
   2408c:	cmp	r3, r1
   24090:	bgt	24108 <__assert_fail@plt+0x12a08>
   24094:	add	r0, r9, r7
   24098:	add	r1, r9, r5
   2409c:	mov	r2, sl
   240a0:	bl	115b0 <bcmp@plt>
   240a4:	ldr	ip, [sp, #44]	; 0x2c
   240a8:	ldr	lr, [sp, #52]	; 0x34
   240ac:	cmp	r0, #0
   240b0:	bne	24190 <__assert_fail@plt+0x12a90>
   240b4:	ldr	r3, [sp, #48]	; 0x30
   240b8:	mov	r2, r4
   240bc:	mov	r0, ip
   240c0:	mov	r1, r6
   240c4:	str	lr, [sp]
   240c8:	mov	r4, ip
   240cc:	bl	24e48 <__assert_fail@plt+0x13748>
   240d0:	cmp	r0, #1
   240d4:	bhi	2473c <__assert_fail@plt+0x1303c>
   240d8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   240dc:	ldr	r0, [r6, #16]
   240e0:	ldr	r9, [r4, #4]
   240e4:	mov	ip, r4
   240e8:	ldr	r4, [sp, #52]	; 0x34
   240ec:	add	r8, r8, #1
   240f0:	add	r7, sl, r7
   240f4:	cmp	r8, r0
   240f8:	mov	r5, r1
   240fc:	mov	lr, r4
   24100:	blt	24068 <__assert_fail@plt+0x12968>
   24104:	b	24198 <__assert_fail@plt+0x12a98>
   24108:	ldr	r2, [ip, #48]	; 0x30
   2410c:	cmp	r3, r2
   24110:	bgt	243d4 <__assert_fail@plt+0x12cd4>
   24114:	ldr	r0, [ip, #36]	; 0x24
   24118:	ldr	r6, [ip, #104]	; 0x68
   2411c:	cmp	r0, r3
   24120:	cmple	r0, r2
   24124:	blt	24134 <__assert_fail@plt+0x12a34>
   24128:	cmp	r1, r3
   2412c:	cmple	r1, r2
   24130:	bge	24154 <__assert_fail@plt+0x12a54>
   24134:	add	r1, r3, #1
   24138:	mov	r0, ip
   2413c:	mov	r9, r3
   24140:	bl	24774 <__assert_fail@plt+0x13074>
   24144:	ldr	ip, [sp, #44]	; 0x2c
   24148:	mov	r3, r9
   2414c:	cmp	r0, #0
   24150:	bne	2473c <__assert_fail@plt+0x1303c>
   24154:	cmp	r3, r6
   24158:	ble	24184 <__assert_fail@plt+0x12a84>
   2415c:	sub	r0, r3, r6
   24160:	mov	r1, #0
   24164:	lsl	r2, r0, #2
   24168:	ldr	r0, [ip, #100]	; 0x64
   2416c:	add	r0, r0, r6, lsl #2
   24170:	mov	r6, r3
   24174:	add	r0, r0, #4
   24178:	bl	11610 <memset@plt>
   2417c:	ldr	ip, [sp, #44]	; 0x2c
   24180:	str	r6, [ip, #104]	; 0x68
   24184:	ldr	r9, [ip, #4]
   24188:	ldr	r6, [sp, #40]	; 0x28
   2418c:	b	24094 <__assert_fail@plt+0x12994>
   24190:	ldr	r0, [r6, #16]
   24194:	mov	r1, r5
   24198:	cmp	r8, r0
   2419c:	blt	243e0 <__assert_fail@plt+0x12ce0>
   241a0:	cmp	r8, #0
   241a4:	addne	r1, r1, #1
   241a8:	cmp	r1, lr
   241ac:	ble	241c8 <__assert_fail@plt+0x12ac8>
   241b0:	b	243e0 <__assert_fail@plt+0x12ce0>
   241b4:	ldr	r6, [sp, #40]	; 0x28
   241b8:	add	r1, sl, #1
   241bc:	cmp	sl, lr
   241c0:	mov	r9, r8
   241c4:	bge	243e0 <__assert_fail@plt+0x12ce0>
   241c8:	ldr	r0, [r6]
   241cc:	mov	sl, r1
   241d0:	cmp	r1, r0
   241d4:	ble	24200 <__assert_fail@plt+0x12b00>
   241d8:	ldr	r0, [ip, #28]
   241dc:	cmp	r7, r0
   241e0:	bge	24364 <__assert_fail@plt+0x12c64>
   241e4:	add	r5, r7, #1
   241e8:	add	r1, sl, r9
   241ec:	ldrb	r0, [r9, r7]
   241f0:	ldrb	r1, [r1, #-1]
   241f4:	cmp	r0, r1
   241f8:	beq	24204 <__assert_fail@plt+0x12b04>
   241fc:	b	243e0 <__assert_fail@plt+0x12ce0>
   24200:	mov	r5, r7
   24204:	ldr	r0, [ip, #100]	; 0x64
   24208:	mov	r8, r9
   2420c:	mov	r7, r5
   24210:	ldr	r2, [r0, sl, lsl #2]
   24214:	cmp	r2, #0
   24218:	beq	241b4 <__assert_fail@plt+0x12ab4>
   2421c:	ldr	r0, [r2, #8]
   24220:	cmp	r0, #1
   24224:	blt	241b4 <__assert_fail@plt+0x12ab4>
   24228:	ldr	r1, [sp, #36]	; 0x24
   2422c:	ldr	r2, [r2, #12]
   24230:	ldr	r4, [sp, #32]
   24234:	ldr	r1, [r1]
   24238:	b	24248 <__assert_fail@plt+0x12b48>
   2423c:	add	r2, r2, #4
   24240:	subs	r0, r0, #1
   24244:	beq	241b4 <__assert_fail@plt+0x12ab4>
   24248:	ldr	r5, [r2]
   2424c:	add	r3, r1, r5, lsl #3
   24250:	ldrb	r3, [r3, #4]
   24254:	cmp	r3, #9
   24258:	bne	2423c <__assert_fail@plt+0x12b3c>
   2425c:	ldr	r3, [r1, r5, lsl #3]
   24260:	cmp	r3, r4
   24264:	bne	2423c <__assert_fail@plt+0x12b3c>
   24268:	cmn	r5, #1
   2426c:	beq	241b4 <__assert_fail@plt+0x12ab4>
   24270:	ldr	r1, [r6, #8]
   24274:	mov	r4, lr
   24278:	str	r7, [fp, #-48]	; 0xffffffd0
   2427c:	cmp	r1, #0
   24280:	bne	242b0 <__assert_fail@plt+0x12bb0>
   24284:	ldr	r0, [r6]
   24288:	mov	r9, #12
   2428c:	sub	r0, sl, r0
   24290:	add	r1, r0, #1
   24294:	mov	r0, #12
   24298:	bl	2b88c <__assert_fail@plt+0x1a18c>
   2429c:	ldr	ip, [sp, #44]	; 0x2c
   242a0:	mov	r1, r0
   242a4:	cmp	r0, #0
   242a8:	str	r0, [r6, #8]
   242ac:	beq	2472c <__assert_fail@plt+0x1302c>
   242b0:	ldr	r3, [r6]
   242b4:	ldr	r2, [r6, #4]
   242b8:	mov	r0, #9
   242bc:	stm	sp, {r5, sl}
   242c0:	str	r0, [sp, #8]
   242c4:	mov	r0, ip
   242c8:	bl	25020 <__assert_fail@plt+0x13920>
   242cc:	ldr	ip, [sp, #44]	; 0x2c
   242d0:	ldr	r7, [fp, #-48]	; 0xffffffd0
   242d4:	cmp	r0, #1
   242d8:	mov	lr, r4
   242dc:	beq	241b4 <__assert_fail@plt+0x12ab4>
   242e0:	mov	r9, r0
   242e4:	cmp	r0, #0
   242e8:	bne	2472c <__assert_fail@plt+0x1302c>
   242ec:	ldr	r7, [sp, #40]	; 0x28
   242f0:	ldr	r1, [r7, #12]
   242f4:	ldr	r0, [r7, #16]
   242f8:	cmp	r0, r1
   242fc:	beq	243ac <__assert_fail@plt+0x12cac>
   24300:	mov	r0, #1
   24304:	mov	r1, #20
   24308:	bl	2b88c <__assert_fail@plt+0x1a18c>
   2430c:	cmp	r0, #0
   24310:	beq	2475c <__assert_fail@plt+0x1305c>
   24314:	mov	r2, r0
   24318:	ldr	r0, [r7, #16]
   2431c:	ldr	r1, [r7, #20]
   24320:	ldr	r3, [sp, #48]	; 0x30
   24324:	str	r2, [r1, r0, lsl #2]
   24328:	stm	r2, {r5, sl}
   2432c:	ldr	r5, [sp, #44]	; 0x2c
   24330:	add	r0, r0, #1
   24334:	mov	r1, r7
   24338:	str	r0, [r7, #16]
   2433c:	str	r4, [sp]
   24340:	mov	r0, r5
   24344:	bl	24e48 <__assert_fail@plt+0x13748>
   24348:	cmp	r0, #1
   2434c:	bhi	2473c <__assert_fail@plt+0x1303c>
   24350:	ldr	r8, [r5, #4]
   24354:	ldr	r7, [fp, #-48]	; 0xffffffd0
   24358:	mov	ip, r5
   2435c:	mov	lr, r4
   24360:	b	241b4 <__assert_fail@plt+0x12ab4>
   24364:	ldr	r0, [ip, #48]	; 0x30
   24368:	cmp	r7, r0
   2436c:	bge	243e0 <__assert_fail@plt+0x12ce0>
   24370:	add	r5, r7, #1
   24374:	mov	r0, ip
   24378:	mov	r8, r7
   2437c:	mov	r4, ip
   24380:	mov	r1, r5
   24384:	bl	24774 <__assert_fail@plt+0x13074>
   24388:	cmp	r0, #0
   2438c:	bne	2473c <__assert_fail@plt+0x1303c>
   24390:	ldr	r9, [r4, #4]
   24394:	mov	ip, r4
   24398:	ldr	r4, [sp, #52]	; 0x34
   2439c:	ldr	r6, [sp, #40]	; 0x28
   243a0:	mov	r7, r8
   243a4:	mov	lr, r4
   243a8:	b	241e8 <__assert_fail@plt+0x12ae8>
   243ac:	mov	r1, #1
   243b0:	orr	r6, r1, r0, lsl #1
   243b4:	ldr	r0, [r7, #20]
   243b8:	lsl	r1, r6, #2
   243bc:	bl	2b910 <__assert_fail@plt+0x1a210>
   243c0:	cmp	r0, #0
   243c4:	beq	2475c <__assert_fail@plt+0x1305c>
   243c8:	str	r6, [r7, #12]
   243cc:	str	r0, [r7, #20]
   243d0:	b	24300 <__assert_fail@plt+0x12c00>
   243d4:	mov	r1, r5
   243d8:	cmp	r8, r0
   243dc:	bge	241a0 <__assert_fail@plt+0x12aa0>
   243e0:	ldr	r3, [sp, #28]
   243e4:	ldr	r0, [ip, #124]	; 0x7c
   243e8:	add	r3, r3, #1
   243ec:	cmp	r3, r0
   243f0:	bge	24404 <__assert_fail@plt+0x12d04>
   243f4:	ldr	r0, [sp, #36]	; 0x24
   243f8:	ldr	r2, [sp, #32]
   243fc:	ldr	r0, [r0]
   24400:	b	2402c <__assert_fail@plt+0x1292c>
   24404:	ldr	r0, [ip, #108]	; 0x6c
   24408:	b	24410 <__assert_fail@plt+0x12d10>
   2440c:	ldr	r0, [sp, #20]
   24410:	ldr	r7, [sp, #20]
   24414:	mov	r1, #0
   24418:	str	r1, [fp, #-32]	; 0xffffffe0
   2441c:	cmp	r7, r0
   24420:	blt	24438 <__assert_fail@plt+0x12d38>
   24424:	b	23ddc <__assert_fail@plt+0x126dc>
   24428:	ldr	r0, [ip, #108]	; 0x6c
   2442c:	add	r7, r7, #1
   24430:	cmp	r7, r0
   24434:	bge	23ddc <__assert_fail@plt+0x126dc>
   24438:	ldr	r0, [ip, #116]	; 0x74
   2443c:	add	r1, r7, r7, lsl #1
   24440:	ldr	r3, [sp, #48]	; 0x30
   24444:	ldr	r2, [r0, r1, lsl #3]
   24448:	cmp	r2, r3
   2444c:	bne	24428 <__assert_fail@plt+0x12d28>
   24450:	add	r0, r0, r1, lsl #3
   24454:	ldr	r2, [sp, #52]	; 0x34
   24458:	ldr	r1, [r0, #4]
   2445c:	cmp	r1, r2
   24460:	bne	24428 <__assert_fail@plt+0x12d28>
   24464:	str	r7, [sp, #20]
   24468:	ldr	r4, [r0, #8]
   2446c:	ldr	r7, [r0, #12]
   24470:	ldr	r0, [sp, #24]
   24474:	ldr	r8, [r0, #24]
   24478:	cmp	r7, r4
   2447c:	bne	24498 <__assert_fail@plt+0x12d98>
   24480:	ldr	r1, [sp, #48]	; 0x30
   24484:	ldr	r0, [r0, #20]
   24488:	add	r1, r1, r1, lsl #1
   2448c:	add	r0, r0, r1, lsl #2
   24490:	ldr	r0, [r0, #8]
   24494:	b	244a4 <__assert_fail@plt+0x12da4>
   24498:	ldr	r0, [r0, #12]
   2449c:	ldr	r1, [sp, #48]	; 0x30
   244a0:	add	r0, r0, r1, lsl #2
   244a4:	ldr	r9, [r0]
   244a8:	ldr	r0, [sp, #52]	; 0x34
   244ac:	add	r0, r7, r0
   244b0:	sub	r5, r0, r4
   244b4:	cmp	r5, #0
   244b8:	ble	244f4 <__assert_fail@plt+0x12df4>
   244bc:	ldr	r1, [ip, #48]	; 0x30
   244c0:	sub	r0, r5, #1
   244c4:	cmp	r1, r0
   244c8:	beq	24690 <__assert_fail@plt+0x12f90>
   244cc:	ldr	r1, [ip, #80]	; 0x50
   244d0:	cmp	r1, #2
   244d4:	blt	244fc <__assert_fail@plt+0x12dfc>
   244d8:	ldr	r1, [ip, #8]
   244dc:	ldr	r6, [r1, r0, lsl #2]
   244e0:	cmn	r6, #1
   244e4:	bne	2452c <__assert_fail@plt+0x12e2c>
   244e8:	sub	r0, r0, #1
   244ec:	cmn	r0, #1
   244f0:	bne	244dc <__assert_fail@plt+0x12ddc>
   244f4:	ldr	sl, [ip, #60]	; 0x3c
   244f8:	b	24554 <__assert_fail@plt+0x12e54>
   244fc:	ldr	r1, [ip, #4]
   24500:	ldr	r2, [ip, #68]	; 0x44
   24504:	mov	sl, #1
   24508:	ldrb	r0, [r1, r0]
   2450c:	ubfx	r1, r0, #5, #3
   24510:	ldr	r1, [r2, r1, lsl #2]
   24514:	and	r2, r0, #31
   24518:	tst	r1, sl, lsl r2
   2451c:	moveq	sl, #0
   24520:	cmpeq	r0, #10
   24524:	bne	24554 <__assert_fail@plt+0x12e54>
   24528:	b	24544 <__assert_fail@plt+0x12e44>
   2452c:	ldrb	r0, [ip, #78]	; 0x4e
   24530:	cmp	r0, #0
   24534:	bne	246a0 <__assert_fail@plt+0x12fa0>
   24538:	mov	sl, #0
   2453c:	cmp	r6, #10
   24540:	bne	24554 <__assert_fail@plt+0x12e54>
   24544:	ldrb	r0, [ip, #77]	; 0x4d
   24548:	cmp	r0, #0
   2454c:	movwne	r0, #1
   24550:	lsl	sl, r0, #1
   24554:	ldr	r0, [ip, #100]	; 0x64
   24558:	ldr	r2, [sp, #52]	; 0x34
   2455c:	add	r1, r9, r9, lsl #1
   24560:	ldr	r2, [r0, r2, lsl #2]
   24564:	ldr	r0, [r0, r5, lsl #2]
   24568:	cmp	r2, #0
   2456c:	beq	24578 <__assert_fail@plt+0x12e78>
   24570:	ldr	r2, [r2, #8]
   24574:	b	2457c <__assert_fail@plt+0x12e7c>
   24578:	mov	r2, #0
   2457c:	add	r8, r8, r1, lsl #2
   24580:	sub	r6, fp, #44	; 0x2c
   24584:	cmp	r0, #0
   24588:	str	r2, [fp, #-48]	; 0xffffffd0
   2458c:	beq	245f8 <__assert_fail@plt+0x12ef8>
   24590:	ldr	r1, [r0, #40]	; 0x28
   24594:	mov	r0, r6
   24598:	mov	r2, r8
   2459c:	bl	24bb8 <__assert_fail@plt+0x134b8>
   245a0:	cmp	r0, #0
   245a4:	str	r0, [fp, #-32]	; 0xffffffe0
   245a8:	bne	24744 <__assert_fail@plt+0x13044>
   245ac:	ldr	r1, [sp, #24]
   245b0:	sub	r0, fp, #32
   245b4:	mov	r2, r6
   245b8:	mov	r3, sl
   245bc:	bl	22368 <__assert_fail@plt+0x10c68>
   245c0:	ldr	r6, [sp, #44]	; 0x2c
   245c4:	ldr	r1, [r6, #100]	; 0x64
   245c8:	str	r0, [r1, r5, lsl #2]
   245cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   245d0:	bl	13ddc <__assert_fail@plt+0x26dc>
   245d4:	ldr	r0, [r6, #100]	; 0x64
   245d8:	mov	ip, r6
   245dc:	ldr	r1, [r0, r5, lsl #2]
   245e0:	cmp	r1, #0
   245e4:	bne	24628 <__assert_fail@plt+0x12f28>
   245e8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   245ec:	cmp	r9, #0
   245f0:	beq	24628 <__assert_fail@plt+0x12f28>
   245f4:	b	24730 <__assert_fail@plt+0x13030>
   245f8:	ldr	r1, [sp, #24]
   245fc:	sub	r0, fp, #32
   24600:	mov	r2, r8
   24604:	mov	r3, sl
   24608:	bl	22368 <__assert_fail@plt+0x10c68>
   2460c:	ldr	ip, [sp, #44]	; 0x2c
   24610:	ldr	r1, [ip, #100]	; 0x64
   24614:	str	r0, [r1, r5, lsl #2]
   24618:	ldr	r0, [ip, #100]	; 0x64
   2461c:	ldr	r1, [r0, r5, lsl #2]
   24620:	cmp	r1, #0
   24624:	beq	245e8 <__assert_fail@plt+0x12ee8>
   24628:	cmp	r7, r4
   2462c:	ldr	r7, [sp, #20]
   24630:	bne	24428 <__assert_fail@plt+0x12d28>
   24634:	ldr	r1, [sp, #52]	; 0x34
   24638:	ldr	r0, [r0, r1, lsl #2]
   2463c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   24640:	ldr	r0, [r0, #8]
   24644:	cmp	r0, r1
   24648:	ble	24428 <__assert_fail@plt+0x12d28>
   2464c:	ldr	r2, [sp, #52]	; 0x34
   24650:	mov	r0, ip
   24654:	mov	r1, r8
   24658:	mov	r4, ip
   2465c:	bl	23ca0 <__assert_fail@plt+0x125a0>
   24660:	cmp	r0, #0
   24664:	str	r0, [fp, #-32]	; 0xffffffe0
   24668:	bne	24764 <__assert_fail@plt+0x13064>
   2466c:	mov	r0, r4
   24670:	mov	r1, r8
   24674:	bl	23da0 <__assert_fail@plt+0x126a0>
   24678:	ldr	r7, [sp, #20]
   2467c:	cmp	r0, #0
   24680:	mov	ip, r4
   24684:	str	r0, [fp, #-32]	; 0xffffffe0
   24688:	beq	24428 <__assert_fail@plt+0x12d28>
   2468c:	b	24764 <__assert_fail@plt+0x13064>
   24690:	ldr	r0, [ip, #88]	; 0x58
   24694:	and	r0, r0, #2
   24698:	eor	sl, r0, #10
   2469c:	b	24554 <__assert_fail@plt+0x12e54>
   246a0:	mov	r0, r6
   246a4:	bl	115f8 <iswalnum@plt>
   246a8:	mov	sl, #1
   246ac:	cmp	r6, #95	; 0x5f
   246b0:	beq	246c4 <__assert_fail@plt+0x12fc4>
   246b4:	ldr	ip, [sp, #44]	; 0x2c
   246b8:	cmp	r0, #0
   246bc:	beq	24538 <__assert_fail@plt+0x12e38>
   246c0:	b	24554 <__assert_fail@plt+0x12e54>
   246c4:	ldr	ip, [sp, #44]	; 0x2c
   246c8:	b	24554 <__assert_fail@plt+0x12e54>
   246cc:	ldr	r0, [ip, #88]	; 0x58
   246d0:	and	r0, r0, #2
   246d4:	eor	r1, r0, #10
   246d8:	and	r0, r1, #1
   246dc:	tst	r5, #1024	; 0x400
   246e0:	eor	r2, r0, #1
   246e4:	bne	23e8c <__assert_fail@plt+0x1278c>
   246e8:	b	23f0c <__assert_fail@plt+0x1280c>
   246ec:	mov	r0, r6
   246f0:	bl	115f8 <iswalnum@plt>
   246f4:	mov	r1, #1
   246f8:	mov	r2, #0
   246fc:	cmp	r6, #95	; 0x5f
   24700:	beq	24714 <__assert_fail@plt+0x13014>
   24704:	ldr	ip, [sp, #44]	; 0x2c
   24708:	cmp	r0, #0
   2470c:	beq	23ee0 <__assert_fail@plt+0x127e0>
   24710:	b	23f0c <__assert_fail@plt+0x1280c>
   24714:	ldr	ip, [sp, #44]	; 0x2c
   24718:	ldr	r0, [r4]
   2471c:	cmp	r2, #0
   24720:	beq	23f18 <__assert_fail@plt+0x12818>
   24724:	b	23f20 <__assert_fail@plt+0x12820>
   24728:	mov	r9, #0
   2472c:	str	r9, [fp, #-32]	; 0xffffffe0
   24730:	mov	r0, r9
   24734:	sub	sp, fp, #28
   24738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2473c:	mov	r9, r0
   24740:	b	2472c <__assert_fail@plt+0x1302c>
   24744:	mov	r9, r0
   24748:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2474c:	bl	13ddc <__assert_fail@plt+0x26dc>
   24750:	mov	r0, r9
   24754:	sub	sp, fp, #28
   24758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2475c:	mov	r9, #12
   24760:	b	2472c <__assert_fail@plt+0x1302c>
   24764:	mov	r9, r0
   24768:	mov	r0, r9
   2476c:	sub	sp, fp, #28
   24770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24774:	push	{r4, r5, r6, r7, fp, lr}
   24778:	add	fp, sp, #16
   2477c:	mov	r4, r0
   24780:	ldr	r0, [r0, #36]	; 0x24
   24784:	mov	r5, #12
   24788:	cmn	r0, #-536870910	; 0xe0000002
   2478c:	bhi	24970 <__assert_fail@plt+0x13270>
   24790:	ldr	r6, [r4, #48]	; 0x30
   24794:	ldr	r2, [r4, #80]	; 0x50
   24798:	cmp	r6, r0, lsl #1
   2479c:	lslge	r6, r0, #1
   247a0:	cmp	r6, r1
   247a4:	movle	r6, r1
   247a8:	cmp	r2, #2
   247ac:	blt	247f4 <__assert_fail@plt+0x130f4>
   247b0:	cmn	r6, #-1073741823	; 0xc0000001
   247b4:	bhi	24970 <__assert_fail@plt+0x13270>
   247b8:	ldr	r0, [r4, #8]
   247bc:	lsl	r7, r6, #2
   247c0:	mov	r1, r7
   247c4:	bl	2b910 <__assert_fail@plt+0x1a210>
   247c8:	cmp	r0, #0
   247cc:	beq	24970 <__assert_fail@plt+0x13270>
   247d0:	str	r0, [r4, #8]
   247d4:	ldr	r0, [r4, #12]
   247d8:	cmp	r0, #0
   247dc:	beq	247f4 <__assert_fail@plt+0x130f4>
   247e0:	mov	r1, r7
   247e4:	bl	2b910 <__assert_fail@plt+0x1a210>
   247e8:	cmp	r0, #0
   247ec:	beq	24970 <__assert_fail@plt+0x13270>
   247f0:	str	r0, [r4, #12]
   247f4:	ldrb	r0, [r4, #75]	; 0x4b
   247f8:	cmp	r0, #0
   247fc:	beq	24818 <__assert_fail@plt+0x13118>
   24800:	ldr	r0, [r4, #4]
   24804:	mov	r1, r6
   24808:	bl	2b910 <__assert_fail@plt+0x1a210>
   2480c:	cmp	r0, #0
   24810:	beq	24970 <__assert_fail@plt+0x13270>
   24814:	str	r0, [r4, #4]
   24818:	str	r6, [r4, #36]	; 0x24
   2481c:	ldr	r0, [r4, #100]	; 0x64
   24820:	cmp	r0, #0
   24824:	beq	24840 <__assert_fail@plt+0x13140>
   24828:	mov	r1, #4
   2482c:	add	r1, r1, r6, lsl #2
   24830:	bl	2b910 <__assert_fail@plt+0x1a210>
   24834:	cmp	r0, #0
   24838:	beq	24970 <__assert_fail@plt+0x13270>
   2483c:	str	r0, [r4, #100]	; 0x64
   24840:	ldrb	r1, [r4, #72]	; 0x48
   24844:	ldr	r0, [r4, #80]	; 0x50
   24848:	cmp	r1, #0
   2484c:	beq	2486c <__assert_fail@plt+0x1316c>
   24850:	cmp	r0, #2
   24854:	blt	24880 <__assert_fail@plt+0x13180>
   24858:	mov	r0, r4
   2485c:	bl	1be20 <__assert_fail@plt+0xa720>
   24860:	cmp	r0, #0
   24864:	beq	2496c <__assert_fail@plt+0x1326c>
   24868:	pop	{r4, r5, r6, r7, fp, pc}
   2486c:	cmp	r0, #2
   24870:	blt	248f0 <__assert_fail@plt+0x131f0>
   24874:	mov	r0, r4
   24878:	bl	1c740 <__assert_fail@plt+0xb040>
   2487c:	b	2496c <__assert_fail@plt+0x1326c>
   24880:	ldr	r6, [r4, #36]	; 0x24
   24884:	ldr	r0, [r4, #48]	; 0x30
   24888:	ldr	r5, [r4, #28]
   2488c:	cmp	r6, r0
   24890:	movgt	r6, r0
   24894:	cmp	r5, r6
   24898:	bge	248e4 <__assert_fail@plt+0x131e4>
   2489c:	bl	11574 <__ctype_toupper_loc@plt>
   248a0:	ldr	r1, [r4]
   248a4:	ldr	r3, [r4, #24]
   248a8:	ldr	r2, [r4, #64]	; 0x40
   248ac:	add	r1, r1, r3
   248b0:	cmp	r2, #0
   248b4:	ldrb	r1, [r1, r5]
   248b8:	bne	248dc <__assert_fail@plt+0x131dc>
   248bc:	ldr	r2, [r0]
   248c0:	ldr	r1, [r2, r1, lsl #2]
   248c4:	ldr	r2, [r4, #4]
   248c8:	strb	r1, [r2, r5]
   248cc:	add	r5, r5, #1
   248d0:	cmp	r5, r6
   248d4:	blt	248a0 <__assert_fail@plt+0x131a0>
   248d8:	b	248e4 <__assert_fail@plt+0x131e4>
   248dc:	ldrb	r1, [r2, r1]
   248e0:	b	248bc <__assert_fail@plt+0x131bc>
   248e4:	str	r5, [r4, #28]
   248e8:	str	r5, [r4, #32]
   248ec:	b	2496c <__assert_fail@plt+0x1326c>
   248f0:	ldr	r2, [r4, #64]	; 0x40
   248f4:	cmp	r2, #0
   248f8:	beq	2496c <__assert_fail@plt+0x1326c>
   248fc:	ldr	r1, [r4, #36]	; 0x24
   24900:	ldr	r3, [r4, #48]	; 0x30
   24904:	ldr	r0, [r4, #28]
   24908:	cmp	r1, r3
   2490c:	movgt	r1, r3
   24910:	cmp	r0, r1
   24914:	bge	24964 <__assert_fail@plt+0x13264>
   24918:	ldr	r6, [r4, #24]
   2491c:	ldm	r4, {r3, r7}
   24920:	add	r6, r6, r0
   24924:	ldrb	r3, [r3, r6]
   24928:	ldrb	r2, [r2, r3]
   2492c:	strb	r2, [r7, r0]
   24930:	add	r0, r0, #1
   24934:	cmp	r0, r1
   24938:	bge	24964 <__assert_fail@plt+0x13264>
   2493c:	ldr	r7, [r4, #24]
   24940:	ldm	r4, {r2, r3}
   24944:	ldr	r6, [r4, #64]	; 0x40
   24948:	add	r2, r2, r7
   2494c:	ldrb	r2, [r2, r0]
   24950:	ldrb	r2, [r6, r2]
   24954:	strb	r2, [r3, r0]
   24958:	add	r0, r0, #1
   2495c:	cmp	r0, r1
   24960:	blt	2493c <__assert_fail@plt+0x1323c>
   24964:	str	r0, [r4, #28]
   24968:	str	r0, [r4, #32]
   2496c:	mov	r5, #0
   24970:	mov	r0, r5
   24974:	pop	{r4, r5, r6, r7, fp, pc}
   24978:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2497c:	add	fp, sp, #24
   24980:	sub	sp, sp, #16
   24984:	mov	r9, r0
   24988:	mov	r4, r1
   2498c:	ldr	r5, [r1, #40]	; 0x28
   24990:	ldr	r7, [r1, #84]	; 0x54
   24994:	ldr	r0, [r1, #100]	; 0x64
   24998:	ldr	r1, [r1, #104]	; 0x68
   2499c:	mov	r6, r2
   249a0:	cmp	r5, r1
   249a4:	ble	249c4 <__assert_fail@plt+0x132c4>
   249a8:	str	r6, [r0, r5, lsl #2]
   249ac:	str	r5, [r4, #104]	; 0x68
   249b0:	cmp	r6, #0
   249b4:	ldrne	r0, [r7, #76]	; 0x4c
   249b8:	cmpne	r0, #0
   249bc:	beq	24b14 <__assert_fail@plt+0x13414>
   249c0:	b	24b20 <__assert_fail@plt+0x13420>
   249c4:	ldr	r1, [r0, r5, lsl #2]
   249c8:	cmp	r1, #0
   249cc:	beq	24a44 <__assert_fail@plt+0x13344>
   249d0:	ldr	r2, [r1, #40]	; 0x28
   249d4:	cmp	r6, #0
   249d8:	beq	24a8c <__assert_fail@plt+0x1338c>
   249dc:	ldr	r8, [r6, #40]	; 0x28
   249e0:	mov	r0, sp
   249e4:	mov	r1, r8
   249e8:	bl	24bb8 <__assert_fail@plt+0x134b8>
   249ec:	cmp	r0, #0
   249f0:	str	r0, [r9]
   249f4:	bne	24b78 <__assert_fail@plt+0x13478>
   249f8:	ldr	r0, [r4, #40]	; 0x28
   249fc:	cmp	r0, #0
   24a00:	ble	24a3c <__assert_fail@plt+0x1333c>
   24a04:	ldr	r1, [r4, #48]	; 0x30
   24a08:	sub	r0, r0, #1
   24a0c:	cmp	r1, r0
   24a10:	beq	24b88 <__assert_fail@plt+0x13488>
   24a14:	ldr	r1, [r4, #80]	; 0x50
   24a18:	cmp	r1, #2
   24a1c:	blt	24a5c <__assert_fail@plt+0x1335c>
   24a20:	ldr	r1, [r4, #8]
   24a24:	ldr	r6, [r1, r0, lsl #2]
   24a28:	cmn	r6, #1
   24a2c:	bne	24ab0 <__assert_fail@plt+0x133b0>
   24a30:	sub	r0, r0, #1
   24a34:	cmn	r0, #1
   24a38:	bne	24a24 <__assert_fail@plt+0x13324>
   24a3c:	ldr	r3, [r4, #60]	; 0x3c
   24a40:	b	24ad8 <__assert_fail@plt+0x133d8>
   24a44:	str	r6, [r0, r5, lsl #2]
   24a48:	cmp	r6, #0
   24a4c:	ldrne	r0, [r7, #76]	; 0x4c
   24a50:	cmpne	r0, #0
   24a54:	beq	24b14 <__assert_fail@plt+0x13414>
   24a58:	b	24b20 <__assert_fail@plt+0x13420>
   24a5c:	ldr	r1, [r4, #4]
   24a60:	ldr	r2, [r4, #68]	; 0x44
   24a64:	mov	r3, #1
   24a68:	ldrb	r0, [r1, r0]
   24a6c:	ubfx	r1, r0, #5, #3
   24a70:	ldr	r1, [r2, r1, lsl #2]
   24a74:	and	r2, r0, #31
   24a78:	tst	r1, r3, lsl r2
   24a7c:	moveq	r3, #0
   24a80:	cmpeq	r0, #10
   24a84:	bne	24ad8 <__assert_fail@plt+0x133d8>
   24a88:	b	24ac8 <__assert_fail@plt+0x133c8>
   24a8c:	vldr	d16, [r2]
   24a90:	ldr	r0, [r2, #8]
   24a94:	mov	r8, #0
   24a98:	str	r0, [sp, #8]
   24a9c:	mov	r0, r5
   24aa0:	vstr	d16, [sp]
   24aa4:	cmp	r0, #0
   24aa8:	bgt	24a04 <__assert_fail@plt+0x13304>
   24aac:	b	24a3c <__assert_fail@plt+0x1333c>
   24ab0:	ldrb	r0, [r4, #78]	; 0x4e
   24ab4:	cmp	r0, #0
   24ab8:	bne	24b98 <__assert_fail@plt+0x13498>
   24abc:	mov	r3, #0
   24ac0:	cmp	r6, #10
   24ac4:	bne	24ad8 <__assert_fail@plt+0x133d8>
   24ac8:	ldrb	r0, [r4, #77]	; 0x4d
   24acc:	cmp	r0, #0
   24ad0:	movwne	r0, #1
   24ad4:	lsl	r3, r0, #1
   24ad8:	mov	r2, sp
   24adc:	mov	r0, r9
   24ae0:	mov	r1, r7
   24ae4:	bl	22368 <__assert_fail@plt+0x10c68>
   24ae8:	mov	r6, r0
   24aec:	ldr	r0, [r4, #100]	; 0x64
   24af0:	cmp	r8, #0
   24af4:	str	r6, [r0, r5, lsl #2]
   24af8:	beq	24b04 <__assert_fail@plt+0x13404>
   24afc:	ldr	r0, [sp, #8]
   24b00:	bl	13ddc <__assert_fail@plt+0x26dc>
   24b04:	cmp	r6, #0
   24b08:	ldrne	r0, [r7, #76]	; 0x4c
   24b0c:	cmpne	r0, #0
   24b10:	bne	24b20 <__assert_fail@plt+0x13420>
   24b14:	mov	r0, r6
   24b18:	sub	sp, fp, #24
   24b1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24b20:	add	r7, r6, #4
   24b24:	mov	r0, r4
   24b28:	mov	r2, r5
   24b2c:	mov	r1, r7
   24b30:	bl	23ca0 <__assert_fail@plt+0x125a0>
   24b34:	cmp	r0, #0
   24b38:	str	r0, [r9]
   24b3c:	bne	24b78 <__assert_fail@plt+0x13478>
   24b40:	ldrb	r0, [r6, #52]	; 0x34
   24b44:	tst	r0, #64	; 0x40
   24b48:	beq	24b14 <__assert_fail@plt+0x13414>
   24b4c:	mov	r0, r4
   24b50:	mov	r1, r7
   24b54:	bl	23da0 <__assert_fail@plt+0x126a0>
   24b58:	str	r0, [r9]
   24b5c:	cmp	r0, #0
   24b60:	mov	r6, #0
   24b64:	ldreq	r0, [r4, #100]	; 0x64
   24b68:	ldreq	r6, [r0, r5, lsl #2]
   24b6c:	mov	r0, r6
   24b70:	sub	sp, fp, #24
   24b74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24b78:	mov	r6, #0
   24b7c:	mov	r0, r6
   24b80:	sub	sp, fp, #24
   24b84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24b88:	ldr	r0, [r4, #88]	; 0x58
   24b8c:	and	r0, r0, #2
   24b90:	eor	r3, r0, #10
   24b94:	b	24ad8 <__assert_fail@plt+0x133d8>
   24b98:	mov	r0, r6
   24b9c:	bl	115f8 <iswalnum@plt>
   24ba0:	mov	r3, #1
   24ba4:	cmp	r6, #95	; 0x5f
   24ba8:	beq	24ad8 <__assert_fail@plt+0x133d8>
   24bac:	cmp	r0, #0
   24bb0:	beq	24abc <__assert_fail@plt+0x133bc>
   24bb4:	b	24ad8 <__assert_fail@plt+0x133d8>
   24bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bbc:	add	fp, sp, #28
   24bc0:	sub	sp, sp, #20
   24bc4:	mov	sl, r2
   24bc8:	cmp	r1, #0
   24bcc:	str	r0, [sp, #16]
   24bd0:	beq	24d44 <__assert_fail@plt+0x13644>
   24bd4:	ldr	r0, [r1, #4]
   24bd8:	mov	r8, r1
   24bdc:	cmp	sl, #0
   24be0:	beq	24d00 <__assert_fail@plt+0x13600>
   24be4:	cmp	r0, #1
   24be8:	blt	24d00 <__assert_fail@plt+0x13600>
   24bec:	ldr	r1, [sl, #4]
   24bf0:	cmp	r1, #1
   24bf4:	blt	24d00 <__assert_fail@plt+0x13600>
   24bf8:	ldr	r4, [sp, #16]
   24bfc:	add	r0, r1, r0
   24c00:	str	r0, [r4]
   24c04:	lsl	r0, r0, #2
   24c08:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   24c0c:	cmp	r0, #0
   24c10:	str	r0, [r4, #8]
   24c14:	beq	24e3c <__assert_fail@plt+0x1373c>
   24c18:	ldr	r9, [sl, #4]
   24c1c:	ldr	lr, [r8, #4]
   24c20:	mov	r7, #0
   24c24:	mov	r1, #0
   24c28:	cmp	r9, #0
   24c2c:	movwgt	r1, #1
   24c30:	cmp	lr, #1
   24c34:	blt	24dc0 <__assert_fail@plt+0x136c0>
   24c38:	mov	r2, #0
   24c3c:	mov	ip, #0
   24c40:	str	r2, [sp, #8]
   24c44:	mov	r2, #0
   24c48:	str	r2, [sp, #12]
   24c4c:	mov	r2, #0
   24c50:	ldr	r4, [sp, #12]
   24c54:	mov	r7, ip
   24c58:	tst	r1, #1
   24c5c:	beq	24df0 <__assert_fail@plt+0x136f0>
   24c60:	ldr	r1, [sl, #8]
   24c64:	ldr	r5, [r1, r7, lsl #2]
   24c68:	ldr	r1, [r8, #8]
   24c6c:	ldr	r3, [r1, r2, lsl #2]
   24c70:	cmp	r3, r5
   24c74:	ble	24c9c <__assert_fail@plt+0x1359c>
   24c78:	add	r7, r7, #1
   24c7c:	str	r5, [r0, r4, lsl #2]
   24c80:	mov	r1, #0
   24c84:	add	r4, r4, #1
   24c88:	cmp	r9, r7
   24c8c:	movwgt	r1, #1
   24c90:	cmp	lr, r2
   24c94:	bgt	24c58 <__assert_fail@plt+0x13558>
   24c98:	b	24dc4 <__assert_fail@plt+0x136c4>
   24c9c:	str	r3, [r0, r4, lsl #2]
   24ca0:	ldr	r6, [sp, #8]
   24ca4:	add	r1, r7, #1
   24ca8:	mov	ip, r7
   24cac:	add	r2, r2, #1
   24cb0:	ldr	r9, [sl, #4]
   24cb4:	ldr	lr, [r8, #4]
   24cb8:	moveq	ip, r1
   24cbc:	str	r1, [sp, #4]
   24cc0:	mov	r1, #0
   24cc4:	sub	r6, r6, #1
   24cc8:	cmp	r9, ip
   24ccc:	str	r6, [sp, #8]
   24cd0:	add	r6, r4, #1
   24cd4:	movwgt	r1, #1
   24cd8:	cmp	lr, r2
   24cdc:	str	r6, [sp, #12]
   24ce0:	bgt	24c50 <__assert_fail@plt+0x13550>
   24ce4:	ldr	r2, [sp, #4]
   24ce8:	cmp	r3, r5
   24cec:	add	r4, r4, #1
   24cf0:	moveq	r7, r2
   24cf4:	cmp	r1, #0
   24cf8:	bne	24dcc <__assert_fail@plt+0x136cc>
   24cfc:	b	24e18 <__assert_fail@plt+0x13718>
   24d00:	cmp	r0, #1
   24d04:	blt	24d44 <__assert_fail@plt+0x13644>
   24d08:	ldr	r1, [sp, #16]
   24d0c:	str	r0, [r1, #4]
   24d10:	ldr	r1, [r8, #4]
   24d14:	cmp	r1, #1
   24d18:	blt	24da4 <__assert_fail@plt+0x136a4>
   24d1c:	ldr	r4, [sp, #16]
   24d20:	str	r0, [r4]
   24d24:	lsl	r0, r0, #2
   24d28:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   24d2c:	cmp	r0, #0
   24d30:	str	r0, [r4, #8]
   24d34:	beq	24e2c <__assert_fail@plt+0x1372c>
   24d38:	ldr	r2, [r8, #4]
   24d3c:	ldr	r1, [r8, #8]
   24d40:	b	24d90 <__assert_fail@plt+0x13690>
   24d44:	cmp	sl, #0
   24d48:	beq	24da4 <__assert_fail@plt+0x136a4>
   24d4c:	ldr	r0, [sl, #4]
   24d50:	cmp	r0, #1
   24d54:	blt	24da4 <__assert_fail@plt+0x136a4>
   24d58:	ldr	r1, [sp, #16]
   24d5c:	str	r0, [r1, #4]
   24d60:	ldr	r1, [sl, #4]
   24d64:	cmp	r1, #1
   24d68:	blt	24da4 <__assert_fail@plt+0x136a4>
   24d6c:	ldr	r4, [sp, #16]
   24d70:	str	r0, [r4]
   24d74:	lsl	r0, r0, #2
   24d78:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   24d7c:	cmp	r0, #0
   24d80:	str	r0, [r4, #8]
   24d84:	beq	24e2c <__assert_fail@plt+0x1372c>
   24d88:	ldr	r2, [sl, #4]
   24d8c:	ldr	r1, [sl, #8]
   24d90:	lsl	r2, r2, #2
   24d94:	bl	11448 <memcpy@plt>
   24d98:	mov	r0, #0
   24d9c:	sub	sp, fp, #28
   24da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24da4:	ldr	r1, [sp, #16]
   24da8:	mov	r0, #0
   24dac:	str	r0, [r1]
   24db0:	str	r0, [r1, #4]
   24db4:	str	r0, [r1, #8]
   24db8:	sub	sp, fp, #28
   24dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dc0:	mov	r4, #0
   24dc4:	cmp	r1, #0
   24dc8:	beq	24e18 <__assert_fail@plt+0x13718>
   24dcc:	ldr	r1, [sl, #8]
   24dd0:	sub	r2, r9, r7
   24dd4:	add	r0, r0, r4, lsl #2
   24dd8:	lsl	r2, r2, #2
   24ddc:	add	r1, r1, r7, lsl #2
   24de0:	bl	11448 <memcpy@plt>
   24de4:	sub	r0, r4, r7
   24de8:	add	r4, r0, r9
   24dec:	b	24e18 <__assert_fail@plt+0x13718>
   24df0:	ldr	r1, [r8, #8]
   24df4:	add	r0, r0, r4, lsl #2
   24df8:	add	r1, r1, r2, lsl #2
   24dfc:	sub	r2, lr, r2
   24e00:	lsl	r2, r2, #2
   24e04:	bl	11448 <memcpy@plt>
   24e08:	ldr	r0, [r8, #4]
   24e0c:	ldr	r1, [sp, #8]
   24e10:	add	r0, r0, r1
   24e14:	add	r4, r0, r4
   24e18:	ldr	r0, [sp, #16]
   24e1c:	str	r4, [r0, #4]
   24e20:	mov	r0, #0
   24e24:	sub	sp, fp, #28
   24e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e2c:	ldr	r1, [sp, #16]
   24e30:	mov	r0, #0
   24e34:	str	r0, [r1]
   24e38:	str	r0, [r1, #4]
   24e3c:	mov	r0, #12
   24e40:	sub	sp, fp, #28
   24e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e4c:	add	fp, sp, #28
   24e50:	sub	sp, sp, #12
   24e54:	mov	r6, r2
   24e58:	mov	r7, r3
   24e5c:	ldr	r2, [r2]
   24e60:	mov	r4, r0
   24e64:	mov	r0, #8
   24e68:	mov	r8, r1
   24e6c:	ldr	r9, [fp, #8]
   24e70:	ldr	r3, [r6, #4]
   24e74:	str	r0, [sp, #8]
   24e78:	add	r1, r6, #8
   24e7c:	mov	r0, r4
   24e80:	stm	sp, {r7, r9}
   24e84:	bl	25020 <__assert_fail@plt+0x13920>
   24e88:	mov	r5, r0
   24e8c:	cmp	r0, #0
   24e90:	beq	24ea0 <__assert_fail@plt+0x137a0>
   24e94:	mov	r0, r5
   24e98:	sub	sp, fp, #28
   24e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ea0:	ldr	r0, [r4, #108]	; 0x6c
   24ea4:	ldr	r1, [r4, #112]	; 0x70
   24ea8:	ldr	sl, [r6, #4]
   24eac:	ldr	r5, [r8]
   24eb0:	cmp	r0, r1
   24eb4:	blt	24f04 <__assert_fail@plt+0x13804>
   24eb8:	ldr	r0, [r4, #116]	; 0x74
   24ebc:	add	r1, r1, r1, lsl #1
   24ec0:	lsl	r1, r1, #4
   24ec4:	bl	2b910 <__assert_fail@plt+0x1a210>
   24ec8:	cmp	r0, #0
   24ecc:	beq	25008 <__assert_fail@plt+0x13908>
   24ed0:	str	r0, [r4, #116]	; 0x74
   24ed4:	ldr	r1, [r4, #108]	; 0x6c
   24ed8:	ldr	r2, [r4, #112]	; 0x70
   24edc:	add	r1, r1, r1, lsl #1
   24ee0:	add	r0, r0, r1, lsl #3
   24ee4:	add	r1, r2, r2, lsl #1
   24ee8:	lsl	r2, r1, #3
   24eec:	mov	r1, #0
   24ef0:	bl	11610 <memset@plt>
   24ef4:	ldr	r1, [r4, #112]	; 0x70
   24ef8:	ldr	r0, [r4, #108]	; 0x6c
   24efc:	lsl	r1, r1, #1
   24f00:	str	r1, [r4, #112]	; 0x70
   24f04:	ldr	r1, [r4, #116]	; 0x74
   24f08:	cmp	r0, #1
   24f0c:	blt	24f2c <__assert_fail@plt+0x1382c>
   24f10:	sub	r2, r0, #1
   24f14:	add	r2, r2, r2, lsl #1
   24f18:	add	r2, r1, r2, lsl #3
   24f1c:	ldr	r3, [r2, #4]
   24f20:	cmp	r3, r9
   24f24:	moveq	r3, #1
   24f28:	strbeq	r3, [r2, #20]
   24f2c:	add	r2, r0, r0, lsl #1
   24f30:	cmp	sl, r5
   24f34:	mov	r3, #0
   24f38:	mov	ip, #0
   24f3c:	add	r0, r0, #1
   24f40:	mvneq	r3, #0
   24f44:	str	r7, [r1, r2, lsl #3]!
   24f48:	str	r9, [r1, #4]
   24f4c:	str	r5, [r1, #8]
   24f50:	str	sl, [r1, #12]
   24f54:	str	r3, [r1, #16]
   24f58:	str	r0, [r4, #108]	; 0x6c
   24f5c:	strb	ip, [r1, #20]
   24f60:	sub	r0, sl, r5
   24f64:	ldr	r1, [r4, #120]	; 0x78
   24f68:	cmp	r1, r0
   24f6c:	strlt	r0, [r4, #120]	; 0x78
   24f70:	ldr	r0, [r6, #4]
   24f74:	ldr	r1, [r8]
   24f78:	ldr	r7, [r4, #104]	; 0x68
   24f7c:	add	r0, r0, r9
   24f80:	sub	r6, r0, r1
   24f84:	ldr	r0, [r4, #36]	; 0x24
   24f88:	cmp	r0, r6
   24f8c:	bgt	24f9c <__assert_fail@plt+0x1389c>
   24f90:	ldr	r1, [r4, #48]	; 0x30
   24f94:	cmp	r0, r1
   24f98:	blt	24fb4 <__assert_fail@plt+0x138b4>
   24f9c:	ldr	r0, [r4, #28]
   24fa0:	cmp	r0, r6
   24fa4:	bgt	24fcc <__assert_fail@plt+0x138cc>
   24fa8:	ldr	r1, [r4, #48]	; 0x30
   24fac:	cmp	r0, r1
   24fb0:	bge	24fcc <__assert_fail@plt+0x138cc>
   24fb4:	add	r1, r6, #1
   24fb8:	mov	r0, r4
   24fbc:	bl	24774 <__assert_fail@plt+0x13074>
   24fc0:	mov	r5, r0
   24fc4:	cmp	r0, #0
   24fc8:	bne	24e94 <__assert_fail@plt+0x13794>
   24fcc:	mov	r5, #0
   24fd0:	cmp	r6, r7
   24fd4:	ble	24e94 <__assert_fail@plt+0x13794>
   24fd8:	sub	r0, r6, r7
   24fdc:	mov	r1, #0
   24fe0:	mov	r5, #0
   24fe4:	lsl	r2, r0, #2
   24fe8:	ldr	r0, [r4, #100]	; 0x64
   24fec:	add	r0, r0, r7, lsl #2
   24ff0:	add	r0, r0, #4
   24ff4:	bl	11610 <memset@plt>
   24ff8:	str	r6, [r4, #104]	; 0x68
   24ffc:	mov	r0, r5
   25000:	sub	sp, fp, #28
   25004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25008:	ldr	r0, [r4, #116]	; 0x74
   2500c:	bl	13ddc <__assert_fail@plt+0x26dc>
   25010:	mov	r5, #12
   25014:	mov	r0, r5
   25018:	sub	sp, fp, #28
   2501c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25024:	add	fp, sp, #28
   25028:	sub	sp, sp, #84	; 0x54
   2502c:	ldr	r7, [r0, #84]	; 0x54
   25030:	mov	ip, r1
   25034:	mov	r1, #0
   25038:	mov	lr, r2
   2503c:	mov	r9, r3
   25040:	str	r0, [sp, #44]	; 0x2c
   25044:	str	r1, [fp, #-52]	; 0xffffffcc
   25048:	ldr	r4, [ip, #4]
   2504c:	ldr	r1, [r7]
   25050:	str	r7, [sp, #24]
   25054:	ldr	sl, [r1, r2, lsl #3]
   25058:	ldr	r1, [r0, #120]	; 0x78
   2505c:	ldr	r2, [fp, #12]
   25060:	add	r2, r1, r2
   25064:	cmp	r4, r2
   25068:	str	sl, [sp, #20]
   2506c:	ble	259d8 <__assert_fail@plt+0x142d8>
   25070:	ldr	r2, [r0, #100]	; 0x64
   25074:	ldr	r5, [ip]
   25078:	ldr	r4, [r0, #40]	; 0x28
   2507c:	ldr	r1, [r0, #88]	; 0x58
   25080:	str	r2, [sp, #8]
   25084:	ldr	r2, [ip, #8]
   25088:	cmp	r5, #0
   2508c:	str	r4, [sp, #12]
   25090:	moveq	r5, r9
   25094:	cmp	r5, #0
   25098:	str	r2, [r0, #100]	; 0x64
   2509c:	str	r5, [r0, #40]	; 0x28
   250a0:	ble	25a48 <__assert_fail@plt+0x14348>
   250a4:	ldr	r2, [r0, #48]	; 0x30
   250a8:	sub	r3, r5, #1
   250ac:	cmp	r2, r3
   250b0:	beq	25a5c <__assert_fail@plt+0x1435c>
   250b4:	ldr	r1, [r0, #80]	; 0x50
   250b8:	cmp	r1, #2
   250bc:	blt	25130 <__assert_fail@plt+0x13a30>
   250c0:	ldr	r1, [r0, #8]
   250c4:	ldr	r6, [r1, r3, lsl #2]
   250c8:	cmn	r6, #1
   250cc:	bne	25160 <__assert_fail@plt+0x13a60>
   250d0:	sub	r3, r3, #1
   250d4:	cmn	r3, #1
   250d8:	bne	250c4 <__assert_fail@plt+0x139c4>
   250dc:	ldr	r0, [sp, #44]	; 0x2c
   250e0:	ldr	r8, [r0, #60]	; 0x3c
   250e4:	cmp	r5, r9
   250e8:	str	ip, [sp, #16]
   250ec:	beq	2519c <__assert_fail@plt+0x13a9c>
   250f0:	ldr	r9, [sp, #44]	; 0x2c
   250f4:	ldr	r0, [r9, #100]	; 0x64
   250f8:	ldr	r6, [r0, r5, lsl #2]
   250fc:	cmp	r6, #0
   25100:	beq	25268 <__assert_fail@plt+0x13b68>
   25104:	ldrb	r0, [r6, #52]	; 0x34
   25108:	tst	r0, #64	; 0x40
   2510c:	bne	25288 <__assert_fail@plt+0x13b88>
   25110:	mov	r0, #0
   25114:	str	r0, [sp, #52]	; 0x34
   25118:	str	r0, [sp, #48]	; 0x30
   2511c:	str	r0, [sp, #56]	; 0x38
   25120:	ldr	r4, [fp, #12]
   25124:	cmp	r5, r4
   25128:	blt	252e0 <__assert_fail@plt+0x13be0>
   2512c:	b	258c0 <__assert_fail@plt+0x141c0>
   25130:	ldr	r1, [r0, #4]
   25134:	ldr	r2, [r0, #68]	; 0x44
   25138:	mov	r8, #1
   2513c:	ldrb	r0, [r1, r3]
   25140:	ubfx	r1, r0, #5, #3
   25144:	ldr	r1, [r2, r1, lsl #2]
   25148:	and	r2, r0, #31
   2514c:	tst	r1, r8, lsl r2
   25150:	moveq	r8, #0
   25154:	cmpeq	r0, #10
   25158:	bne	25190 <__assert_fail@plt+0x13a90>
   2515c:	b	2517c <__assert_fail@plt+0x13a7c>
   25160:	ldr	r0, [sp, #44]	; 0x2c
   25164:	ldrb	r0, [r0, #78]	; 0x4e
   25168:	cmp	r0, #0
   2516c:	bne	25aac <__assert_fail@plt+0x143ac>
   25170:	mov	r8, #0
   25174:	cmp	r6, #10
   25178:	bne	25190 <__assert_fail@plt+0x13a90>
   2517c:	ldr	r0, [sp, #44]	; 0x2c
   25180:	ldrb	r0, [r0, #77]	; 0x4d
   25184:	cmp	r0, #0
   25188:	movwne	r0, #1
   2518c:	lsl	r8, r0, #1
   25190:	cmp	r5, r9
   25194:	str	ip, [sp, #16]
   25198:	bne	250f0 <__assert_fail@plt+0x139f0>
   2519c:	mov	r0, #1
   251a0:	mov	r6, lr
   251a4:	str	r0, [sp, #52]	; 0x34
   251a8:	str	r0, [sp, #48]	; 0x30
   251ac:	mov	r0, #4
   251b0:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   251b4:	cmp	r0, #0
   251b8:	str	r0, [sp, #56]	; 0x38
   251bc:	beq	25a8c <__assert_fail@plt+0x1438c>
   251c0:	ldr	r3, [fp, #16]
   251c4:	str	r6, [r0]
   251c8:	mov	r0, #0
   251cc:	add	r1, sp, #48	; 0x30
   251d0:	mov	r2, sl
   251d4:	str	r0, [fp, #-52]	; 0xffffffcc
   251d8:	mov	r0, r7
   251dc:	bl	25af4 <__assert_fail@plt+0x143f4>
   251e0:	cmp	r0, #0
   251e4:	str	r0, [fp, #-52]	; 0xffffffcc
   251e8:	bne	25a74 <__assert_fail@plt+0x14374>
   251ec:	ldr	r0, [sp, #52]	; 0x34
   251f0:	ldr	r9, [sp, #44]	; 0x2c
   251f4:	cmp	r0, #0
   251f8:	beq	25224 <__assert_fail@plt+0x13b24>
   251fc:	ldr	r0, [fp, #16]
   25200:	ldr	r3, [sp, #20]
   25204:	add	r1, sp, #48	; 0x30
   25208:	mov	r2, r5
   2520c:	str	r0, [sp]
   25210:	mov	r0, r9
   25214:	bl	25c3c <__assert_fail@plt+0x1453c>
   25218:	cmp	r0, #0
   2521c:	str	r0, [fp, #-52]	; 0xffffffcc
   25220:	bne	25a74 <__assert_fail@plt+0x14374>
   25224:	ldr	r1, [sp, #24]
   25228:	sub	r0, fp, #52	; 0x34
   2522c:	add	r2, sp, #48	; 0x30
   25230:	mov	r3, r8
   25234:	bl	22368 <__assert_fail@plt+0x10c68>
   25238:	mov	r6, r0
   2523c:	cmp	r0, #0
   25240:	bne	25250 <__assert_fail@plt+0x13b50>
   25244:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25248:	cmp	r0, #0
   2524c:	bne	259ac <__assert_fail@plt+0x142ac>
   25250:	ldr	r0, [r9, #100]	; 0x64
   25254:	str	r6, [r0, r5, lsl #2]
   25258:	ldr	r4, [fp, #12]
   2525c:	cmp	r5, r4
   25260:	blt	252e0 <__assert_fail@plt+0x13be0>
   25264:	b	258c0 <__assert_fail@plt+0x141c0>
   25268:	mov	r6, #0
   2526c:	str	r6, [sp, #52]	; 0x34
   25270:	str	r6, [sp, #48]	; 0x30
   25274:	str	r6, [sp, #56]	; 0x38
   25278:	ldr	r4, [fp, #12]
   2527c:	cmp	r5, r4
   25280:	blt	252e0 <__assert_fail@plt+0x13be0>
   25284:	b	258c0 <__assert_fail@plt+0x141c0>
   25288:	ldr	r0, [r6, #8]
   2528c:	cmp	r0, #1
   25290:	str	r0, [sp, #52]	; 0x34
   25294:	blt	25970 <__assert_fail@plt+0x14270>
   25298:	str	r0, [sp, #48]	; 0x30
   2529c:	lsl	r0, r0, #2
   252a0:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   252a4:	cmp	r0, #0
   252a8:	str	r0, [sp, #56]	; 0x38
   252ac:	beq	25a8c <__assert_fail@plt+0x1438c>
   252b0:	ldr	r2, [r6, #8]
   252b4:	ldr	r1, [r6, #12]
   252b8:	lsl	r2, r2, #2
   252bc:	bl	11448 <memcpy@plt>
   252c0:	ldrb	r0, [r6, #52]	; 0x34
   252c4:	mov	r1, #0
   252c8:	str	r1, [fp, #-52]	; 0xffffffcc
   252cc:	tst	r0, #64	; 0x40
   252d0:	bne	251fc <__assert_fail@plt+0x13afc>
   252d4:	ldr	r4, [fp, #12]
   252d8:	cmp	r5, r4
   252dc:	bge	258c0 <__assert_fail@plt+0x141c0>
   252e0:	ldr	r7, [sp, #24]
   252e4:	ldr	sl, [sp, #20]
   252e8:	ldr	r4, [fp, #16]
   252ec:	add	r8, sp, #48	; 0x30
   252f0:	mov	r0, #0
   252f4:	str	r6, [sp, #40]	; 0x28
   252f8:	b	25328 <__assert_fail@plt+0x13c28>
   252fc:	ldr	r1, [sp, #40]	; 0x28
   25300:	ldr	r0, [r9, #100]	; 0x64
   25304:	ldr	r5, [sp, #28]
   25308:	str	r1, [r0, r5, lsl #2]
   2530c:	cmp	r1, #0
   25310:	ldr	r1, [sp, #32]
   25314:	mov	r0, #0
   25318:	addeq	r0, r1, #1
   2531c:	ldr	r1, [fp, #12]
   25320:	cmp	r5, r1
   25324:	beq	258bc <__assert_fail@plt+0x141bc>
   25328:	str	r0, [sp, #32]
   2532c:	ldr	r0, [r9, #120]	; 0x78
   25330:	ldr	r1, [sp, #32]
   25334:	cmp	r1, r0
   25338:	bgt	258c0 <__assert_fail@plt+0x141c0>
   2533c:	mov	r0, #0
   25340:	add	r1, r5, #1
   25344:	str	r0, [sp, #52]	; 0x34
   25348:	str	r1, [sp, #28]
   2534c:	ldr	r0, [r9, #100]	; 0x64
   25350:	ldr	r0, [r0, r1, lsl #2]
   25354:	cmp	r0, #0
   25358:	beq	25374 <__assert_fail@plt+0x13c74>
   2535c:	add	r1, r0, #4
   25360:	mov	r0, r8
   25364:	bl	22048 <__assert_fail@plt+0x10948>
   25368:	cmp	r0, #0
   2536c:	str	r0, [fp, #-52]	; 0xffffffcc
   25370:	bne	259ac <__assert_fail@plt+0x142ac>
   25374:	ldr	r1, [sp, #40]	; 0x28
   25378:	cmp	r1, #0
   2537c:	beq	25774 <__assert_fail@plt+0x14074>
   25380:	mov	r0, #0
   25384:	ldr	r8, [r9, #84]	; 0x54
   25388:	str	r0, [fp, #-32]	; 0xffffffe0
   2538c:	str	r0, [fp, #-44]	; 0xffffffd4
   25390:	str	r0, [fp, #-48]	; 0xffffffd0
   25394:	str	r0, [fp, #-40]	; 0xffffffd8
   25398:	ldr	r1, [r1, #20]
   2539c:	cmp	r1, #1
   253a0:	blt	25760 <__assert_fail@plt+0x14060>
   253a4:	ldr	r7, [sp, #40]	; 0x28
   253a8:	mov	r4, #0
   253ac:	b	253e0 <__assert_fail@plt+0x13ce0>
   253b0:	ldr	r1, [sp, #52]	; 0x34
   253b4:	cmp	r1, #0
   253b8:	bne	2556c <__assert_fail@plt+0x13e6c>
   253bc:	ldr	r0, [sp, #56]	; 0x38
   253c0:	str	r6, [r0]
   253c4:	ldr	r0, [sp, #52]	; 0x34
   253c8:	add	r0, r0, #1
   253cc:	str	r0, [sp, #52]	; 0x34
   253d0:	ldr	r0, [r7, #20]
   253d4:	add	r4, r4, #1
   253d8:	cmp	r4, r0
   253dc:	bge	25754 <__assert_fail@plt+0x14054>
   253e0:	ldr	r0, [r7, #24]
   253e4:	ldr	sl, [r0, r4, lsl #2]
   253e8:	ldr	r0, [r8]
   253ec:	add	r1, r0, sl, lsl #3
   253f0:	ldrb	r1, [r1, #6]
   253f4:	tst	r1, #16
   253f8:	beq	25508 <__assert_fail@plt+0x13e08>
   253fc:	mov	r0, r8
   25400:	mov	r1, sl
   25404:	mov	r2, r9
   25408:	mov	r3, r5
   2540c:	bl	26664 <__assert_fail@plt+0x14f64>
   25410:	mov	r9, r0
   25414:	cmp	r0, #2
   25418:	blt	254f4 <__assert_fail@plt+0x13df4>
   2541c:	ldr	r0, [sp, #44]	; 0x2c
   25420:	ldr	r1, [r8, #12]
   25424:	add	r6, r9, r5
   25428:	ldr	r0, [r0, #100]	; 0x64
   2542c:	ldr	r1, [r1, sl, lsl #2]
   25430:	ldr	r0, [r0, r6, lsl #2]
   25434:	str	r1, [sp, #36]	; 0x24
   25438:	mov	r1, #0
   2543c:	str	r1, [fp, #-44]	; 0xffffffd4
   25440:	cmp	r0, #0
   25444:	beq	25460 <__assert_fail@plt+0x13d60>
   25448:	add	r1, r0, #4
   2544c:	sub	r0, fp, #48	; 0x30
   25450:	bl	22048 <__assert_fail@plt+0x10948>
   25454:	cmp	r0, #0
   25458:	str	r0, [fp, #-32]	; 0xffffffe0
   2545c:	bne	2599c <__assert_fail@plt+0x1429c>
   25460:	ldr	r2, [fp, #-48]	; 0xffffffd0
   25464:	cmp	r2, #0
   25468:	beq	25494 <__assert_fail@plt+0x13d94>
   2546c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25470:	ldr	r7, [sp, #36]	; 0x24
   25474:	cmp	r1, #0
   25478:	bne	2565c <__assert_fail@plt+0x13f5c>
   2547c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25480:	str	r7, [r0]
   25484:	ldr	r0, [fp, #-44]	; 0xffffffd4
   25488:	add	r0, r0, #1
   2548c:	str	r0, [fp, #-44]	; 0xffffffd4
   25490:	b	254bc <__assert_fail@plt+0x13dbc>
   25494:	mov	r0, #1
   25498:	str	r0, [fp, #-44]	; 0xffffffd4
   2549c:	str	r0, [fp, #-48]	; 0xffffffd0
   254a0:	mov	r0, #4
   254a4:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   254a8:	ldr	r1, [sp, #36]	; 0x24
   254ac:	cmp	r0, #0
   254b0:	str	r0, [fp, #-40]	; 0xffffffd8
   254b4:	beq	259c4 <__assert_fail@plt+0x142c4>
   254b8:	str	r1, [r0]
   254bc:	sub	r0, fp, #32
   254c0:	mov	r1, r8
   254c4:	sub	r2, fp, #48	; 0x30
   254c8:	bl	26334 <__assert_fail@plt+0x14c34>
   254cc:	ldr	r2, [sp, #44]	; 0x2c
   254d0:	ldr	r1, [r2, #100]	; 0x64
   254d4:	str	r0, [r1, r6, lsl #2]
   254d8:	ldr	r0, [r2, #100]	; 0x64
   254dc:	ldr	r0, [r0, r6, lsl #2]
   254e0:	cmp	r0, #0
   254e4:	bne	254f4 <__assert_fail@plt+0x13df4>
   254e8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   254ec:	cmp	r7, #0
   254f0:	bne	259a0 <__assert_fail@plt+0x142a0>
   254f4:	cmp	r9, #0
   254f8:	ldr	r9, [sp, #44]	; 0x2c
   254fc:	ldr	r7, [sp, #40]	; 0x28
   25500:	bne	25520 <__assert_fail@plt+0x13e20>
   25504:	ldr	r0, [r8]
   25508:	add	r1, r0, sl, lsl #3
   2550c:	mov	r0, r9
   25510:	mov	r2, r5
   25514:	bl	269f0 <__assert_fail@plt+0x152f0>
   25518:	cmp	r0, #0
   2551c:	beq	253d0 <__assert_fail@plt+0x13cd0>
   25520:	ldr	r0, [r8, #12]
   25524:	ldr	r2, [sp, #48]	; 0x30
   25528:	ldr	r6, [r0, sl, lsl #2]
   2552c:	cmp	r2, #0
   25530:	bne	253b0 <__assert_fail@plt+0x13cb0>
   25534:	mov	r0, #1
   25538:	str	r0, [sp, #52]	; 0x34
   2553c:	str	r0, [sp, #48]	; 0x30
   25540:	mov	r0, #4
   25544:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   25548:	cmp	r0, #0
   2554c:	str	r0, [sp, #56]	; 0x38
   25550:	beq	25988 <__assert_fail@plt+0x14288>
   25554:	str	r6, [r0]
   25558:	ldr	r0, [r7, #20]
   2555c:	add	r4, r4, #1
   25560:	cmp	r4, r0
   25564:	blt	253e0 <__assert_fail@plt+0x13ce0>
   25568:	b	25754 <__assert_fail@plt+0x14054>
   2556c:	cmp	r2, r1
   25570:	bne	255d8 <__assert_fail@plt+0x13ed8>
   25574:	lsl	r0, r2, #1
   25578:	lsl	r1, r2, #3
   2557c:	str	r0, [sp, #48]	; 0x30
   25580:	ldr	r0, [sp, #56]	; 0x38
   25584:	bl	2b910 <__assert_fail@plt+0x1a210>
   25588:	cmp	r0, #0
   2558c:	beq	25994 <__assert_fail@plt+0x14294>
   25590:	str	r0, [sp, #56]	; 0x38
   25594:	ldr	r1, [sp, #52]	; 0x34
   25598:	ldr	r2, [r0]
   2559c:	cmp	r2, r6
   255a0:	bgt	255e8 <__assert_fail@plt+0x13ee8>
   255a4:	add	r2, r0, r1, lsl #2
   255a8:	ldr	r3, [r2, #-4]
   255ac:	cmp	r3, r6
   255b0:	ble	25654 <__assert_fail@plt+0x13f54>
   255b4:	sub	r1, r1, #2
   255b8:	str	r3, [r2]
   255bc:	sub	r1, r1, #1
   255c0:	ldr	r3, [r2, #-8]
   255c4:	sub	r2, r2, #4
   255c8:	cmp	r3, r6
   255cc:	bgt	255b8 <__assert_fail@plt+0x13eb8>
   255d0:	add	r1, r1, #2
   255d4:	b	25654 <__assert_fail@plt+0x13f54>
   255d8:	ldr	r0, [sp, #56]	; 0x38
   255dc:	ldr	r2, [r0]
   255e0:	cmp	r2, r6
   255e4:	ble	255a4 <__assert_fail@plt+0x13ea4>
   255e8:	cmp	r1, #1
   255ec:	blt	25654 <__assert_fail@plt+0x13f54>
   255f0:	ands	r7, r1, #3
   255f4:	sub	ip, r1, #1
   255f8:	beq	2561c <__assert_fail@plt+0x13f1c>
   255fc:	add	lr, r0, r1, lsl #2
   25600:	mov	r3, lr
   25604:	ldr	r2, [r3, #-4]!
   25608:	subs	r7, r7, #1
   2560c:	sub	r1, r1, #1
   25610:	str	r2, [lr]
   25614:	mov	lr, r3
   25618:	bne	25604 <__assert_fail@plt+0x13f04>
   2561c:	cmp	ip, #3
   25620:	bcc	2564c <__assert_fail@plt+0x13f4c>
   25624:	add	r2, r0, r1, lsl #2
   25628:	sub	r2, r2, #8
   2562c:	sub	lr, r2, #8
   25630:	sub	r1, r1, #4
   25634:	sub	sl, r2, #4
   25638:	sub	r2, r2, #16
   2563c:	ldm	lr, {r3, r7, ip, lr}
   25640:	cmp	r1, #0
   25644:	stm	sl, {r3, r7, ip, lr}
   25648:	bgt	2562c <__assert_fail@plt+0x13f2c>
   2564c:	ldr	r7, [sp, #40]	; 0x28
   25650:	mov	r1, #0
   25654:	str	r6, [r0, r1, lsl #2]
   25658:	b	253c4 <__assert_fail@plt+0x13cc4>
   2565c:	cmp	r2, r1
   25660:	bne	256c8 <__assert_fail@plt+0x13fc8>
   25664:	lsl	r0, r2, #1
   25668:	lsl	r1, r2, #3
   2566c:	str	r0, [fp, #-48]	; 0xffffffd0
   25670:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25674:	bl	2b910 <__assert_fail@plt+0x1a210>
   25678:	cmp	r0, #0
   2567c:	beq	25994 <__assert_fail@plt+0x14294>
   25680:	str	r0, [fp, #-40]	; 0xffffffd8
   25684:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25688:	ldr	r2, [r0]
   2568c:	cmp	r2, r7
   25690:	bgt	256d8 <__assert_fail@plt+0x13fd8>
   25694:	add	r2, r0, r1, lsl #2
   25698:	ldr	r3, [r2, #-4]
   2569c:	cmp	r3, r7
   256a0:	ble	2574c <__assert_fail@plt+0x1404c>
   256a4:	sub	r1, r1, #2
   256a8:	str	r3, [r2]
   256ac:	sub	r1, r1, #1
   256b0:	ldr	r3, [r2, #-8]
   256b4:	sub	r2, r2, #4
   256b8:	cmp	r3, r7
   256bc:	bgt	256a8 <__assert_fail@plt+0x13fa8>
   256c0:	add	r1, r1, #2
   256c4:	b	2574c <__assert_fail@plt+0x1404c>
   256c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   256cc:	ldr	r2, [r0]
   256d0:	cmp	r2, r7
   256d4:	ble	25694 <__assert_fail@plt+0x13f94>
   256d8:	cmp	r1, #1
   256dc:	blt	2574c <__assert_fail@plt+0x1404c>
   256e0:	ands	r3, r1, #3
   256e4:	sub	ip, r1, #1
   256e8:	beq	2570c <__assert_fail@plt+0x1400c>
   256ec:	add	lr, r0, r1, lsl #2
   256f0:	mov	r7, lr
   256f4:	ldr	r2, [r7, #-4]!
   256f8:	subs	r3, r3, #1
   256fc:	sub	r1, r1, #1
   25700:	str	r2, [lr]
   25704:	mov	lr, r7
   25708:	bne	256f4 <__assert_fail@plt+0x13ff4>
   2570c:	cmp	ip, #3
   25710:	bcc	25744 <__assert_fail@plt+0x14044>
   25714:	add	r2, r0, r1, lsl #2
   25718:	sub	r2, r2, #8
   2571c:	sub	lr, r2, #8
   25720:	sub	r1, r1, #4
   25724:	ldm	lr, {r3, r7, ip, lr}
   25728:	cmp	r1, #0
   2572c:	str	r3, [r2, #-4]
   25730:	str	r7, [r2]
   25734:	str	ip, [r2, #4]
   25738:	str	lr, [r2, #8]
   2573c:	sub	r2, r2, #16
   25740:	bgt	2571c <__assert_fail@plt+0x1401c>
   25744:	ldr	r7, [sp, #36]	; 0x24
   25748:	mov	r1, #0
   2574c:	str	r7, [r0, r1, lsl #2]
   25750:	b	25484 <__assert_fail@plt+0x13d84>
   25754:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25758:	ldr	r7, [sp, #24]
   2575c:	ldr	sl, [sp, #20]
   25760:	bl	13ddc <__assert_fail@plt+0x26dc>
   25764:	ldr	r4, [fp, #16]
   25768:	mov	r0, #0
   2576c:	add	r8, sp, #48	; 0x30
   25770:	str	r0, [fp, #-52]	; 0xffffffcc
   25774:	ldr	r0, [sp, #52]	; 0x34
   25778:	cmp	r0, #0
   2577c:	beq	257c4 <__assert_fail@plt+0x140c4>
   25780:	mov	r0, r7
   25784:	mov	r1, r8
   25788:	mov	r2, sl
   2578c:	mov	r3, r4
   25790:	bl	25af4 <__assert_fail@plt+0x143f4>
   25794:	cmp	r0, #0
   25798:	str	r0, [fp, #-52]	; 0xffffffcc
   2579c:	bne	259ac <__assert_fail@plt+0x142ac>
   257a0:	ldr	r2, [sp, #28]
   257a4:	mov	r0, r9
   257a8:	mov	r1, r8
   257ac:	mov	r3, sl
   257b0:	str	r4, [sp]
   257b4:	bl	25c3c <__assert_fail@plt+0x1453c>
   257b8:	cmp	r0, #0
   257bc:	str	r0, [fp, #-52]	; 0xffffffcc
   257c0:	bne	259ac <__assert_fail@plt+0x142ac>
   257c4:	cmn	r5, #1
   257c8:	ble	25800 <__assert_fail@plt+0x14100>
   257cc:	ldr	r0, [r9, #48]	; 0x30
   257d0:	cmp	r0, r5
   257d4:	beq	2588c <__assert_fail@plt+0x1418c>
   257d8:	ldr	r0, [r9, #80]	; 0x50
   257dc:	cmp	r0, #2
   257e0:	blt	25808 <__assert_fail@plt+0x14108>
   257e4:	ldr	r0, [r9, #8]
   257e8:	ldr	r6, [r0, r5, lsl #2]
   257ec:	cmn	r6, #1
   257f0:	bne	25838 <__assert_fail@plt+0x14138>
   257f4:	sub	r5, r5, #1
   257f8:	cmn	r5, #1
   257fc:	bne	257e8 <__assert_fail@plt+0x140e8>
   25800:	ldr	r3, [r9, #60]	; 0x3c
   25804:	b	25860 <__assert_fail@plt+0x14160>
   25808:	ldr	r0, [r9, #4]
   2580c:	ldr	r1, [r9, #68]	; 0x44
   25810:	mov	r3, #1
   25814:	ldrb	r0, [r0, r5]
   25818:	ubfx	r2, r0, #5, #3
   2581c:	ldr	r1, [r1, r2, lsl #2]
   25820:	and	r2, r0, #31
   25824:	tst	r1, r3, lsl r2
   25828:	moveq	r3, #0
   2582c:	cmpeq	r0, #10
   25830:	bne	25860 <__assert_fail@plt+0x14160>
   25834:	b	25850 <__assert_fail@plt+0x14150>
   25838:	ldrb	r0, [r9, #78]	; 0x4e
   2583c:	cmp	r0, #0
   25840:	bne	2589c <__assert_fail@plt+0x1419c>
   25844:	mov	r3, #0
   25848:	cmp	r6, #10
   2584c:	bne	25860 <__assert_fail@plt+0x14160>
   25850:	ldrb	r0, [r9, #77]	; 0x4d
   25854:	cmp	r0, #0
   25858:	movwne	r0, #1
   2585c:	lsl	r3, r0, #1
   25860:	sub	r0, fp, #52	; 0x34
   25864:	mov	r1, r7
   25868:	mov	r2, r8
   2586c:	bl	22368 <__assert_fail@plt+0x10c68>
   25870:	cmp	r0, #0
   25874:	str	r0, [sp, #40]	; 0x28
   25878:	bne	252fc <__assert_fail@plt+0x13bfc>
   2587c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25880:	cmp	r0, #0
   25884:	beq	252fc <__assert_fail@plt+0x13bfc>
   25888:	b	259ac <__assert_fail@plt+0x142ac>
   2588c:	ldr	r0, [r9, #88]	; 0x58
   25890:	and	r0, r0, #2
   25894:	eor	r3, r0, #10
   25898:	b	25860 <__assert_fail@plt+0x14160>
   2589c:	mov	r0, r6
   258a0:	bl	115f8 <iswalnum@plt>
   258a4:	mov	r3, #1
   258a8:	cmp	r6, #95	; 0x5f
   258ac:	beq	25860 <__assert_fail@plt+0x14160>
   258b0:	cmp	r0, #0
   258b4:	beq	25844 <__assert_fail@plt+0x14144>
   258b8:	b	25860 <__assert_fail@plt+0x14160>
   258bc:	ldr	r5, [fp, #12]
   258c0:	ldr	r0, [sp, #56]	; 0x38
   258c4:	bl	13ddc <__assert_fail@plt+0x26dc>
   258c8:	ldr	r0, [r9, #100]	; 0x64
   258cc:	ldr	r1, [fp, #12]
   258d0:	mov	sl, #1
   258d4:	ldr	r1, [r0, r1, lsl #2]
   258d8:	ldr	r0, [sp, #16]
   258dc:	str	r5, [r0]
   258e0:	ldr	r0, [sp, #12]
   258e4:	cmp	r1, #0
   258e8:	addne	r1, r1, #4
   258ec:	str	r0, [r9, #40]	; 0x28
   258f0:	ldr	r0, [sp, #8]
   258f4:	str	r0, [r9, #100]	; 0x64
   258f8:	beq	25954 <__assert_fail@plt+0x14254>
   258fc:	ldr	r2, [r1, #4]
   25900:	cmp	r2, #1
   25904:	blt	25960 <__assert_fail@plt+0x14260>
   25908:	ldr	r0, [fp, #8]
   2590c:	ldr	r1, [r1, #8]
   25910:	subs	r2, r2, #1
   25914:	mov	sl, #0
   25918:	mov	r3, #0
   2591c:	beq	25948 <__assert_fail@plt+0x14248>
   25920:	mov	r3, #0
   25924:	mov	r7, #1
   25928:	add	r5, r3, r2
   2592c:	lsr	r4, r5, #1
   25930:	ldr	r6, [r1, r4, lsl #2]
   25934:	cmp	r6, r0
   25938:	addlt	r3, r7, r5, lsr #1
   2593c:	movge	r2, r4
   25940:	cmp	r3, r2
   25944:	bcc	25928 <__assert_fail@plt+0x14228>
   25948:	ldr	r1, [r1, r3, lsl #2]
   2594c:	cmp	r1, r0
   25950:	movne	sl, #1
   25954:	mov	r0, sl
   25958:	sub	sp, fp, #28
   2595c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25960:	mov	sl, #1
   25964:	mov	r0, sl
   25968:	sub	sp, fp, #28
   2596c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25970:	mov	r0, #0
   25974:	str	r0, [sp, #52]	; 0x34
   25978:	str	r0, [sp, #48]	; 0x30
   2597c:	str	r0, [sp, #56]	; 0x38
   25980:	str	r0, [fp, #-52]	; 0xffffffcc
   25984:	b	25224 <__assert_fail@plt+0x13b24>
   25988:	mov	r0, #0
   2598c:	str	r0, [sp, #48]	; 0x30
   25990:	str	r0, [sp, #52]	; 0x34
   25994:	mov	r7, #12
   25998:	b	259a0 <__assert_fail@plt+0x142a0>
   2599c:	mov	r7, r0
   259a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   259a4:	bl	13ddc <__assert_fail@plt+0x26dc>
   259a8:	str	r7, [fp, #-52]	; 0xffffffcc
   259ac:	ldr	r0, [sp, #56]	; 0x38
   259b0:	bl	13ddc <__assert_fail@plt+0x26dc>
   259b4:	ldr	sl, [fp, #-52]	; 0xffffffcc
   259b8:	mov	r0, sl
   259bc:	sub	sp, fp, #28
   259c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259c4:	mov	r0, #0
   259c8:	mov	r7, #12
   259cc:	str	r0, [fp, #-48]	; 0xffffffd0
   259d0:	str	r0, [fp, #-44]	; 0xffffffd4
   259d4:	b	259a4 <__assert_fail@plt+0x142a4>
   259d8:	mvn	r1, #-2147483648	; 0x80000000
   259dc:	mov	sl, #12
   259e0:	sub	r1, r1, r4
   259e4:	cmp	r1, r2
   259e8:	ble	25954 <__assert_fail@plt+0x14254>
   259ec:	add	r8, r2, #1
   259f0:	str	lr, [sp, #40]	; 0x28
   259f4:	add	r5, r8, r4
   259f8:	cmn	r5, #-1073741823	; 0xc0000001
   259fc:	bhi	25954 <__assert_fail@plt+0x14254>
   25a00:	ldr	r0, [ip, #8]
   25a04:	lsl	r1, r5, #2
   25a08:	mov	r6, ip
   25a0c:	bl	2b910 <__assert_fail@plt+0x1a210>
   25a10:	cmp	r0, #0
   25a14:	beq	25954 <__assert_fail@plt+0x14254>
   25a18:	str	r5, [r6, #4]
   25a1c:	str	r0, [r6, #8]
   25a20:	add	r0, r0, r4, lsl #2
   25a24:	lsl	r2, r8, #2
   25a28:	mov	r1, #0
   25a2c:	bl	11610 <memset@plt>
   25a30:	ldr	r0, [sp, #44]	; 0x2c
   25a34:	ldr	r7, [sp, #24]
   25a38:	ldr	sl, [sp, #20]
   25a3c:	ldr	lr, [sp, #40]	; 0x28
   25a40:	mov	ip, r6
   25a44:	b	25070 <__assert_fail@plt+0x13970>
   25a48:	ldr	r8, [r0, #60]	; 0x3c
   25a4c:	cmp	r5, r9
   25a50:	str	ip, [sp, #16]
   25a54:	beq	2519c <__assert_fail@plt+0x13a9c>
   25a58:	b	250f0 <__assert_fail@plt+0x139f0>
   25a5c:	and	r0, r1, #2
   25a60:	eor	r8, r0, #10
   25a64:	cmp	r5, r9
   25a68:	str	ip, [sp, #16]
   25a6c:	beq	2519c <__assert_fail@plt+0x13a9c>
   25a70:	b	250f0 <__assert_fail@plt+0x139f0>
   25a74:	mov	sl, r0
   25a78:	ldr	r0, [sp, #56]	; 0x38
   25a7c:	bl	13ddc <__assert_fail@plt+0x26dc>
   25a80:	mov	r0, sl
   25a84:	sub	sp, fp, #28
   25a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a8c:	mov	r0, #0
   25a90:	mov	sl, #12
   25a94:	str	r0, [sp, #48]	; 0x30
   25a98:	str	r0, [sp, #52]	; 0x34
   25a9c:	str	sl, [fp, #-52]	; 0xffffffcc
   25aa0:	mov	r0, sl
   25aa4:	sub	sp, fp, #28
   25aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25aac:	mov	r0, r6
   25ab0:	str	lr, [sp, #40]	; 0x28
   25ab4:	mov	r4, ip
   25ab8:	bl	115f8 <iswalnum@plt>
   25abc:	mov	r8, #1
   25ac0:	cmp	r6, #95	; 0x5f
   25ac4:	beq	25adc <__assert_fail@plt+0x143dc>
   25ac8:	ldr	lr, [sp, #40]	; 0x28
   25acc:	cmp	r0, #0
   25ad0:	mov	ip, r4
   25ad4:	beq	25170 <__assert_fail@plt+0x13a70>
   25ad8:	b	25190 <__assert_fail@plt+0x13a90>
   25adc:	ldr	lr, [sp, #40]	; 0x28
   25ae0:	mov	ip, r4
   25ae4:	cmp	r5, r9
   25ae8:	str	ip, [sp, #16]
   25aec:	beq	2519c <__assert_fail@plt+0x13a9c>
   25af0:	b	250f0 <__assert_fail@plt+0x139f0>
   25af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25af8:	add	fp, sp, #28
   25afc:	sub	sp, sp, #20
   25b00:	str	r0, [sp, #4]
   25b04:	ldr	r0, [r1, #4]
   25b08:	mov	sl, r1
   25b0c:	mov	r1, #0
   25b10:	mov	r5, r3
   25b14:	mov	r8, r2
   25b18:	str	r1, [sp, #12]
   25b1c:	str	r0, [sp, #8]
   25b20:	lsl	r0, r0, #2
   25b24:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   25b28:	cmp	r0, #0
   25b2c:	str	r0, [sp, #16]
   25b30:	beq	25c2c <__assert_fail@plt+0x1452c>
   25b34:	ldr	r0, [sl, #4]
   25b38:	cmp	r0, #1
   25b3c:	blt	25bec <__assert_fail@plt+0x144ec>
   25b40:	mov	r9, #0
   25b44:	ldr	r0, [sl, #8]
   25b48:	ldr	r1, [sp, #4]
   25b4c:	ldr	r2, [r0, r9, lsl #2]
   25b50:	ldr	r1, [r1, #24]
   25b54:	add	r0, r2, r2, lsl #1
   25b58:	add	r1, r1, r0, lsl #2
   25b5c:	ldr	r0, [r1, #4]
   25b60:	cmp	r0, #1
   25b64:	blt	25bcc <__assert_fail@plt+0x144cc>
   25b68:	ldr	r7, [sp, #4]
   25b6c:	ldr	r3, [r1, #8]
   25b70:	ldr	r7, [r7]
   25b74:	b	25b84 <__assert_fail@plt+0x14484>
   25b78:	add	r3, r3, #4
   25b7c:	subs	r0, r0, #1
   25b80:	beq	25bcc <__assert_fail@plt+0x144cc>
   25b84:	ldr	r6, [r3]
   25b88:	add	r4, r7, r6, lsl #3
   25b8c:	ldrb	r4, [r4, #4]
   25b90:	cmp	r4, r5
   25b94:	bne	25b78 <__assert_fail@plt+0x14478>
   25b98:	ldr	r4, [r7, r6, lsl #3]
   25b9c:	cmp	r4, r8
   25ba0:	bne	25b78 <__assert_fail@plt+0x14478>
   25ba4:	cmn	r6, #1
   25ba8:	beq	25bcc <__assert_fail@plt+0x144cc>
   25bac:	ldr	r0, [sp, #4]
   25bb0:	add	r1, sp, #8
   25bb4:	mov	r3, r8
   25bb8:	str	r5, [sp]
   25bbc:	bl	261f0 <__assert_fail@plt+0x14af0>
   25bc0:	cmp	r0, #0
   25bc4:	beq	25bdc <__assert_fail@plt+0x144dc>
   25bc8:	b	25c14 <__assert_fail@plt+0x14514>
   25bcc:	add	r0, sp, #8
   25bd0:	bl	22048 <__assert_fail@plt+0x10948>
   25bd4:	cmp	r0, #0
   25bd8:	bne	25c14 <__assert_fail@plt+0x14514>
   25bdc:	ldr	r0, [sl, #4]
   25be0:	add	r9, r9, #1
   25be4:	cmp	r9, r0
   25be8:	blt	25b44 <__assert_fail@plt+0x14444>
   25bec:	ldr	r0, [sl, #8]
   25bf0:	bl	13ddc <__assert_fail@plt+0x26dc>
   25bf4:	vldr	d16, [sp, #8]
   25bf8:	ldr	r0, [sp, #16]
   25bfc:	mov	r7, #0
   25c00:	str	r0, [sl, #8]
   25c04:	vstr	d16, [sl]
   25c08:	mov	r0, r7
   25c0c:	sub	sp, fp, #28
   25c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c14:	mov	r7, r0
   25c18:	ldr	r0, [sp, #16]
   25c1c:	bl	13ddc <__assert_fail@plt+0x26dc>
   25c20:	mov	r0, r7
   25c24:	sub	sp, fp, #28
   25c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c2c:	mov	r7, #12
   25c30:	mov	r0, r7
   25c34:	sub	sp, fp, #28
   25c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c40:	add	fp, sp, #28
   25c44:	sub	sp, sp, #52	; 0x34
   25c48:	ldr	ip, [r0, #108]	; 0x6c
   25c4c:	mov	lr, r1
   25c50:	ldr	r1, [r0, #84]	; 0x54
   25c54:	str	r0, [sp, #24]
   25c58:	mov	sl, r2
   25c5c:	mov	r8, #0
   25c60:	mov	r0, #0
   25c64:	cmp	ip, #1
   25c68:	str	r1, [sp, #28]
   25c6c:	blt	25cb0 <__assert_fail@plt+0x145b0>
   25c70:	ldr	r0, [sp, #24]
   25c74:	mov	r7, #1
   25c78:	mov	r1, ip
   25c7c:	ldr	r2, [r0, #116]	; 0x74
   25c80:	mov	r0, #0
   25c84:	add	r6, r1, r0
   25c88:	add	r6, r6, r6, lsr #31
   25c8c:	asr	r4, r6, #1
   25c90:	add	r5, r4, r4, lsl #1
   25c94:	add	r5, r2, r5, lsl #3
   25c98:	ldr	r5, [r5, #4]
   25c9c:	cmp	r5, sl
   25ca0:	addlt	r0, r7, r6, asr #1
   25ca4:	movge	r1, r4
   25ca8:	cmp	r0, r1
   25cac:	blt	25c84 <__assert_fail@plt+0x14584>
   25cb0:	cmp	r0, ip
   25cb4:	bge	261d4 <__assert_fail@plt+0x14ad4>
   25cb8:	cmn	r0, #1
   25cbc:	beq	261d4 <__assert_fail@plt+0x14ad4>
   25cc0:	ldr	r1, [sp, #24]
   25cc4:	add	r0, r0, r0, lsl #1
   25cc8:	str	r0, [sp, #8]
   25ccc:	ldr	r1, [r1, #116]	; 0x74
   25cd0:	add	r0, r1, r0, lsl #3
   25cd4:	ldr	r0, [r0, #4]
   25cd8:	cmp	r0, sl
   25cdc:	bne	261d4 <__assert_fail@plt+0x14ad4>
   25ce0:	str	r3, [sp, #12]
   25ce4:	mov	r9, #1
   25ce8:	str	lr, [sp, #16]
   25cec:	ldr	r0, [sp, #8]
   25cf0:	add	r0, r1, r0, lsl #3
   25cf4:	mov	r8, r0
   25cf8:	ldr	r0, [lr, #4]
   25cfc:	cmp	r0, #1
   25d00:	bge	25db4 <__assert_fail@plt+0x146b4>
   25d04:	b	25d94 <__assert_fail@plt+0x14694>
   25d08:	mov	r0, #4
   25d0c:	str	r9, [sp, #36]	; 0x24
   25d10:	mov	r4, r1
   25d14:	str	r9, [sp, #32]
   25d18:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   25d1c:	cmp	r0, #0
   25d20:	str	r0, [sp, #40]	; 0x28
   25d24:	beq	26048 <__assert_fail@plt+0x14948>
   25d28:	str	r4, [r0]
   25d2c:	mov	r0, #0
   25d30:	str	r0, [fp, #-32]	; 0xffffffe0
   25d34:	ldr	r1, [sp, #28]
   25d38:	sub	r0, fp, #32
   25d3c:	add	r2, sp, #32
   25d40:	bl	26334 <__assert_fail@plt+0x14c34>
   25d44:	ldr	r4, [sp, #24]
   25d48:	ldr	r1, [r4, #100]	; 0x64
   25d4c:	str	r0, [r1, r7, lsl #2]
   25d50:	ldr	r0, [sp, #40]	; 0x28
   25d54:	bl	13ddc <__assert_fail@plt+0x26dc>
   25d58:	ldr	r0, [r4, #100]	; 0x64
   25d5c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25d60:	ldr	r0, [r0, r7, lsl #2]
   25d64:	cmp	r1, #0
   25d68:	mov	r2, r1
   25d6c:	movwne	r2, #1
   25d70:	clz	r0, r0
   25d74:	lsr	r0, r0, #5
   25d78:	ands	r0, r0, r2
   25d7c:	ldreq	r1, [sp, #20]
   25d80:	str	r1, [sp, #20]
   25d84:	ldr	lr, [sp, #16]
   25d88:	cmp	r0, #0
   25d8c:	cmpne	r0, #4
   25d90:	bne	261bc <__assert_fail@plt+0x14abc>
   25d94:	ldrb	r1, [r8, #20]
   25d98:	add	r0, r8, #24
   25d9c:	cmp	r1, #0
   25da0:	beq	261d0 <__assert_fail@plt+0x14ad0>
   25da4:	mov	r8, r0
   25da8:	ldr	r0, [lr, #4]
   25dac:	cmp	r0, #1
   25db0:	blt	25d94 <__assert_fail@plt+0x14694>
   25db4:	subs	r6, r0, #1
   25db8:	ldr	r2, [r8]
   25dbc:	ldr	r0, [lr, #8]
   25dc0:	mov	r3, #0
   25dc4:	beq	25dec <__assert_fail@plt+0x146ec>
   25dc8:	mov	r1, r6
   25dcc:	add	r7, r3, r1
   25dd0:	lsr	r5, r7, #1
   25dd4:	ldr	r4, [r0, r5, lsl #2]
   25dd8:	cmp	r4, r2
   25ddc:	addlt	r3, r9, r7, lsr #1
   25de0:	movge	r1, r5
   25de4:	cmp	r3, r1
   25de8:	bcc	25dcc <__assert_fail@plt+0x146cc>
   25dec:	ldr	r1, [r0, r3, lsl #2]
   25df0:	cmp	r1, r2
   25df4:	bne	25d94 <__assert_fail@plt+0x14694>
   25df8:	ldr	r3, [r8, #12]
   25dfc:	ldr	r1, [r8, #8]
   25e00:	add	r3, r3, sl
   25e04:	sub	r7, r3, r1
   25e08:	cmp	r7, sl
   25e0c:	bne	25f04 <__assert_fail@plt+0x14804>
   25e10:	ldr	r1, [sp, #28]
   25e14:	add	r2, r2, r2, lsl #1
   25e18:	cmp	r6, #0
   25e1c:	ldr	r1, [r1, #20]
   25e20:	add	r1, r1, r2, lsl #2
   25e24:	mov	r2, #0
   25e28:	ldr	r1, [r1, #8]
   25e2c:	ldr	r4, [r1]
   25e30:	beq	25e54 <__assert_fail@plt+0x14754>
   25e34:	add	r1, r2, r6
   25e38:	lsr	r3, r1, #1
   25e3c:	ldr	r7, [r0, r3, lsl #2]
   25e40:	cmp	r7, r4
   25e44:	addlt	r2, r9, r1, lsr #1
   25e48:	movge	r6, r3
   25e4c:	cmp	r2, r6
   25e50:	bcc	25e34 <__assert_fail@plt+0x14734>
   25e54:	ldr	r1, [r0, r2, lsl #2]
   25e58:	mov	r0, #4
   25e5c:	cmp	r1, r4
   25e60:	beq	25d88 <__assert_fail@plt+0x14688>
   25e64:	mov	r0, #4
   25e68:	str	r9, [sp, #36]	; 0x24
   25e6c:	str	r9, [sp, #32]
   25e70:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   25e74:	cmp	r0, #0
   25e78:	str	r0, [sp, #40]	; 0x28
   25e7c:	beq	26034 <__assert_fail@plt+0x14934>
   25e80:	mov	r6, #0
   25e84:	str	r4, [r0]
   25e88:	ldr	r0, [sp, #28]
   25e8c:	ldr	r2, [sp, #12]
   25e90:	ldr	r3, [fp, #8]
   25e94:	add	r4, sp, #32
   25e98:	str	r6, [fp, #-32]	; 0xffffffe0
   25e9c:	mov	r1, r4
   25ea0:	bl	25af4 <__assert_fail@plt+0x143f4>
   25ea4:	ldr	r5, [sp, #16]
   25ea8:	mov	r7, r0
   25eac:	mov	r1, r4
   25eb0:	mov	r0, r5
   25eb4:	bl	22048 <__assert_fail@plt+0x10948>
   25eb8:	mov	r4, r0
   25ebc:	ldr	r0, [sp, #40]	; 0x28
   25ec0:	bl	13ddc <__assert_fail@plt+0x26dc>
   25ec4:	orr	r0, r7, r6
   25ec8:	mov	lr, r5
   25ecc:	orrs	r0, r0, r4
   25ed0:	mov	r0, #2
   25ed4:	beq	25d88 <__assert_fail@plt+0x14688>
   25ed8:	cmp	r7, #0
   25edc:	mov	r0, #1
   25ee0:	movne	r4, r7
   25ee4:	cmp	r6, #0
   25ee8:	movne	r4, r6
   25eec:	str	r4, [fp, #-32]	; 0xffffffe0
   25ef0:	str	r4, [sp, #20]
   25ef4:	cmp	r0, #0
   25ef8:	cmpne	r0, #4
   25efc:	beq	25d94 <__assert_fail@plt+0x14694>
   25f00:	b	261bc <__assert_fail@plt+0x14abc>
   25f04:	ldr	r0, [sp, #24]
   25f08:	ldr	r0, [r0, #100]	; 0x64
   25f0c:	ldr	r5, [r0, r7, lsl #2]
   25f10:	ldr	r0, [sp, #28]
   25f14:	ldr	r0, [r0, #12]
   25f18:	cmp	r5, #0
   25f1c:	ldr	r1, [r0, r2, lsl #2]
   25f20:	beq	25d08 <__assert_fail@plt+0x14608>
   25f24:	ldr	ip, [r5, #8]
   25f28:	cmp	ip, #0
   25f2c:	ble	25fec <__assert_fail@plt+0x148ec>
   25f30:	ldr	r0, [r5, #12]
   25f34:	subs	r3, ip, #1
   25f38:	mov	r2, #0
   25f3c:	str	r7, [sp, #4]
   25f40:	beq	25f64 <__assert_fail@plt+0x14864>
   25f44:	add	r6, r2, r3
   25f48:	lsr	r7, r6, #1
   25f4c:	ldr	r4, [r0, r7, lsl #2]
   25f50:	cmp	r4, r1
   25f54:	addlt	r2, r9, r6, lsr #1
   25f58:	movge	r3, r7
   25f5c:	cmp	r2, r3
   25f60:	bcc	25f44 <__assert_fail@plt+0x14844>
   25f64:	ldr	r2, [r0, r2, lsl #2]
   25f68:	mov	r0, #4
   25f6c:	cmp	r2, r1
   25f70:	beq	25d88 <__assert_fail@plt+0x14688>
   25f74:	ldr	r7, [sp, #4]
   25f78:	mov	r4, r1
   25f7c:	cmp	ip, #1
   25f80:	str	ip, [sp, #36]	; 0x24
   25f84:	blt	25ff4 <__assert_fail@plt+0x148f4>
   25f88:	lsl	r0, ip, #2
   25f8c:	str	ip, [sp, #32]
   25f90:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   25f94:	cmp	r0, #0
   25f98:	str	r0, [sp, #40]	; 0x28
   25f9c:	beq	2609c <__assert_fail@plt+0x1499c>
   25fa0:	ldr	r2, [r5, #8]
   25fa4:	ldr	r1, [r5, #12]
   25fa8:	mov	r5, r0
   25fac:	lsl	r2, r2, #2
   25fb0:	bl	11448 <memcpy@plt>
   25fb4:	ldr	r1, [sp, #32]
   25fb8:	mov	r6, #0
   25fbc:	str	r6, [fp, #-32]	; 0xffffffe0
   25fc0:	cmp	r1, #0
   25fc4:	beq	26008 <__assert_fail@plt+0x14908>
   25fc8:	ldr	r0, [sp, #36]	; 0x24
   25fcc:	cmp	r0, #0
   25fd0:	bne	260b0 <__assert_fail@plt+0x149b0>
   25fd4:	str	r4, [r5]
   25fd8:	str	r9, [sp, #36]	; 0x24
   25fdc:	mov	r6, #0
   25fe0:	cmp	r6, #0
   25fe4:	beq	25d34 <__assert_fail@plt+0x14634>
   25fe8:	b	26074 <__assert_fail@plt+0x14974>
   25fec:	mov	r4, r1
   25ff0:	str	ip, [sp, #36]	; 0x24
   25ff4:	mov	r6, #0
   25ff8:	str	r6, [sp, #36]	; 0x24
   25ffc:	str	r6, [sp, #32]
   26000:	str	r6, [sp, #40]	; 0x28
   26004:	str	r6, [fp, #-32]	; 0xffffffe0
   26008:	mov	r0, #4
   2600c:	str	r9, [sp, #36]	; 0x24
   26010:	str	r9, [sp, #32]
   26014:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   26018:	cmp	r0, #0
   2601c:	str	r0, [sp, #40]	; 0x28
   26020:	beq	26068 <__assert_fail@plt+0x14968>
   26024:	str	r4, [r0]
   26028:	cmp	r6, #0
   2602c:	beq	25d34 <__assert_fail@plt+0x14634>
   26030:	b	26074 <__assert_fail@plt+0x14974>
   26034:	mov	r0, #0
   26038:	mov	r6, #12
   2603c:	str	r0, [sp, #32]
   26040:	str	r0, [sp, #36]	; 0x24
   26044:	b	25e88 <__assert_fail@plt+0x14788>
   26048:	mov	r0, #0
   2604c:	mov	r1, #12
   26050:	str	r0, [sp, #32]
   26054:	str	r0, [sp, #36]	; 0x24
   26058:	mov	r0, #12
   2605c:	str	r1, [fp, #-32]	; 0xffffffe0
   26060:	str	r0, [sp, #20]
   26064:	b	26094 <__assert_fail@plt+0x14994>
   26068:	mov	r0, #0
   2606c:	str	r0, [sp, #32]
   26070:	str	r0, [sp, #36]	; 0x24
   26074:	clz	r0, r6
   26078:	lsr	r4, r0, #5
   2607c:	ldr	r0, [sp, #40]	; 0x28
   26080:	bl	13ddc <__assert_fail@plt+0x26dc>
   26084:	cmp	r4, #0
   26088:	movwne	r6, #12
   2608c:	str	r6, [sp, #20]
   26090:	str	r6, [fp, #-32]	; 0xffffffe0
   26094:	mov	r0, #1
   26098:	b	25d84 <__assert_fail@plt+0x14684>
   2609c:	mov	r0, #0
   260a0:	mov	r6, #12
   260a4:	str	r0, [sp, #32]
   260a8:	str	r0, [sp, #36]	; 0x24
   260ac:	b	26004 <__assert_fail@plt+0x14904>
   260b0:	cmp	r1, r0
   260b4:	bne	260e0 <__assert_fail@plt+0x149e0>
   260b8:	lsl	r0, r1, #1
   260bc:	lsl	r1, r1, #3
   260c0:	str	r0, [sp, #32]
   260c4:	mov	r0, r5
   260c8:	bl	2b910 <__assert_fail@plt+0x1a210>
   260cc:	cmp	r0, #0
   260d0:	beq	261b4 <__assert_fail@plt+0x14ab4>
   260d4:	str	r0, [sp, #40]	; 0x28
   260d8:	mov	r5, r0
   260dc:	ldr	r0, [sp, #36]	; 0x24
   260e0:	ldr	r1, [r5]
   260e4:	cmp	r1, r4
   260e8:	ble	2615c <__assert_fail@plt+0x14a5c>
   260ec:	cmp	r0, #1
   260f0:	blt	26190 <__assert_fail@plt+0x14a90>
   260f4:	ands	r2, r0, #3
   260f8:	sub	r1, r0, #1
   260fc:	beq	26120 <__assert_fail@plt+0x14a20>
   26100:	add	r6, r5, r0, lsl #2
   26104:	mov	r3, r6
   26108:	ldr	r7, [r3, #-4]!
   2610c:	subs	r2, r2, #1
   26110:	sub	r0, r0, #1
   26114:	str	r7, [r6]
   26118:	mov	r6, r3
   2611c:	bne	26108 <__assert_fail@plt+0x14a08>
   26120:	cmp	r1, #3
   26124:	bcc	26154 <__assert_fail@plt+0x14a54>
   26128:	add	r1, r5, r0, lsl #2
   2612c:	sub	r1, r1, #8
   26130:	ldr	r6, [r1, #4]
   26134:	ldmda	r1, {r2, r3, r7}
   26138:	sub	ip, r1, #4
   2613c:	sub	r0, r0, #4
   26140:	cmp	r0, #0
   26144:	stm	ip, {r2, r3, r7}
   26148:	str	r6, [r1, #8]
   2614c:	sub	r1, r1, #16
   26150:	bgt	26130 <__assert_fail@plt+0x14a30>
   26154:	mov	r0, #0
   26158:	b	26190 <__assert_fail@plt+0x14a90>
   2615c:	add	r1, r5, r0, lsl #2
   26160:	ldr	r2, [r1, #-4]
   26164:	cmp	r2, r4
   26168:	ble	26190 <__assert_fail@plt+0x14a90>
   2616c:	sub	r0, r0, #2
   26170:	mov	r3, r4
   26174:	str	r2, [r1]
   26178:	sub	r0, r0, #1
   2617c:	ldr	r2, [r1, #-8]
   26180:	sub	r1, r1, #4
   26184:	cmp	r2, r3
   26188:	bgt	26174 <__assert_fail@plt+0x14a74>
   2618c:	add	r0, r0, #2
   26190:	str	r4, [r5, r0, lsl #2]
   26194:	ldr	r7, [sp, #4]
   26198:	mov	r6, #0
   2619c:	ldr	r0, [sp, #36]	; 0x24
   261a0:	add	r0, r0, #1
   261a4:	str	r0, [sp, #36]	; 0x24
   261a8:	cmp	r6, #0
   261ac:	beq	25d34 <__assert_fail@plt+0x14634>
   261b0:	b	26074 <__assert_fail@plt+0x14974>
   261b4:	mov	r6, #0
   261b8:	b	26074 <__assert_fail@plt+0x14974>
   261bc:	cmp	r0, #2
   261c0:	bne	261e0 <__assert_fail@plt+0x14ae0>
   261c4:	ldr	r0, [sp, #24]
   261c8:	ldr	r1, [r0, #116]	; 0x74
   261cc:	b	25cec <__assert_fail@plt+0x145ec>
   261d0:	mov	r8, #0
   261d4:	mov	r0, r8
   261d8:	sub	sp, fp, #28
   261dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261e0:	ldr	r8, [sp, #20]
   261e4:	mov	r0, r8
   261e8:	sub	sp, fp, #28
   261ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261f4:	add	fp, sp, #28
   261f8:	sub	sp, sp, #4
   261fc:	ldr	r4, [fp, #8]
   26200:	mov	r9, r3
   26204:	mov	r7, r2
   26208:	mov	r8, r1
   2620c:	mov	sl, r0
   26210:	mov	r5, #1
   26214:	ldr	r0, [r8, #4]
   26218:	cmp	r0, #1
   2621c:	bge	26244 <__assert_fail@plt+0x14b44>
   26220:	b	26288 <__assert_fail@plt+0x14b88>
   26224:	cmp	r2, #0
   26228:	beq	2631c <__assert_fail@plt+0x14c1c>
   2622c:	add	r0, r0, r7, lsl #2
   26230:	ldr	r0, [r0, #8]
   26234:	ldr	r7, [r0]
   26238:	ldr	r0, [r8, #4]
   2623c:	cmp	r0, #1
   26240:	blt	26288 <__assert_fail@plt+0x14b88>
   26244:	subs	r2, r0, #1
   26248:	ldr	r0, [r8, #8]
   2624c:	mov	ip, r4
   26250:	mov	r1, #0
   26254:	beq	26278 <__assert_fail@plt+0x14b78>
   26258:	add	r3, r1, r2
   2625c:	lsr	r6, r3, #1
   26260:	ldr	r4, [r0, r6, lsl #2]
   26264:	cmp	r4, r7
   26268:	addlt	r1, r5, r3, lsr #1
   2626c:	movge	r2, r6
   26270:	cmp	r1, r2
   26274:	bcc	26258 <__assert_fail@plt+0x14b58>
   26278:	ldr	r0, [r0, r1, lsl #2]
   2627c:	mov	r4, ip
   26280:	cmp	r0, r7
   26284:	beq	2631c <__assert_fail@plt+0x14c1c>
   26288:	ldr	r0, [sl]
   2628c:	add	r1, r0, r7, lsl #3
   26290:	ldrb	r1, [r1, #4]
   26294:	cmp	r1, r4
   26298:	bne	262a8 <__assert_fail@plt+0x14ba8>
   2629c:	ldr	r0, [r0, r7, lsl #3]
   262a0:	cmp	r0, r9
   262a4:	beq	26300 <__assert_fail@plt+0x14c00>
   262a8:	mov	r0, r8
   262ac:	mov	r1, r7
   262b0:	bl	221e8 <__assert_fail@plt+0x10ae8>
   262b4:	cmp	r0, #0
   262b8:	beq	26328 <__assert_fail@plt+0x14c28>
   262bc:	ldr	r0, [sl, #20]
   262c0:	add	r7, r7, r7, lsl #1
   262c4:	add	r1, r0, r7, lsl #2
   262c8:	ldr	r2, [r1, #4]
   262cc:	cmp	r2, #2
   262d0:	bne	26224 <__assert_fail@plt+0x14b24>
   262d4:	ldr	r0, [r1, #8]
   262d8:	mov	r1, r8
   262dc:	mov	r3, r9
   262e0:	ldr	r2, [r0, #4]
   262e4:	mov	r0, sl
   262e8:	str	r4, [sp]
   262ec:	bl	261f0 <__assert_fail@plt+0x14af0>
   262f0:	cmp	r0, #0
   262f4:	bne	26320 <__assert_fail@plt+0x14c20>
   262f8:	ldr	r0, [sl, #20]
   262fc:	b	2622c <__assert_fail@plt+0x14b2c>
   26300:	cmp	r4, #9
   26304:	bne	2631c <__assert_fail@plt+0x14c1c>
   26308:	mov	r0, r8
   2630c:	mov	r1, r7
   26310:	bl	221e8 <__assert_fail@plt+0x10ae8>
   26314:	cmp	r0, #0
   26318:	beq	26328 <__assert_fail@plt+0x14c28>
   2631c:	mov	r0, #0
   26320:	sub	sp, fp, #28
   26324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26328:	mov	r0, #12
   2632c:	sub	sp, fp, #28
   26330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26338:	add	fp, sp, #28
   2633c:	sub	sp, sp, #4
   26340:	ldr	r9, [r2, #4]
   26344:	cmp	r9, #0
   26348:	beq	26614 <__assert_fail@plt+0x14f14>
   2634c:	mov	r6, r2
   26350:	mov	r8, r1
   26354:	cmp	r9, #1
   26358:	mov	r7, r9
   2635c:	blt	26448 <__assert_fail@plt+0x14d48>
   26360:	ldr	ip, [r6, #8]
   26364:	mov	sl, #0
   26368:	cmp	r9, #4
   2636c:	mov	r7, r9
   26370:	bcc	26430 <__assert_fail@plt+0x14d30>
   26374:	mov	r3, #0
   26378:	bic	sl, r9, #3
   2637c:	mov	r1, #1
   26380:	str	r8, [sp]
   26384:	vdup.32	q8, r3
   26388:	sub	r4, sl, #4
   2638c:	add	r1, r1, r4, lsr #2
   26390:	cmp	r4, #12
   26394:	and	lr, r1, #3
   26398:	vmov.32	d16[0], r9
   2639c:	bcc	263f0 <__assert_fail@plt+0x14cf0>
   263a0:	sub	r5, r1, lr
   263a4:	mov	r3, #0
   263a8:	mov	r4, #64	; 0x40
   263ac:	mov	r7, ip
   263b0:	mov	r1, ip
   263b4:	vld1.32	{d18-d19}, [r1], r4
   263b8:	add	r8, r7, #16
   263bc:	add	r2, r7, #32
   263c0:	subs	r5, r5, #4
   263c4:	add	r3, r3, #16
   263c8:	vld1.32	{d20-d21}, [r8]
   263cc:	vadd.i32	q8, q9, q8
   263d0:	vld1.32	{d18-d19}, [r2]
   263d4:	add	r2, r7, #48	; 0x30
   263d8:	mov	r7, r1
   263dc:	vadd.i32	q8, q10, q8
   263e0:	vld1.32	{d20-d21}, [r2]
   263e4:	vadd.i32	q8, q9, q8
   263e8:	vadd.i32	q8, q10, q8
   263ec:	bne	263b4 <__assert_fail@plt+0x14cb4>
   263f0:	cmp	lr, #0
   263f4:	beq	26410 <__assert_fail@plt+0x14d10>
   263f8:	add	r1, ip, r3, lsl #2
   263fc:	rsb	r3, lr, #0
   26400:	vld1.32	{d18-d19}, [r1]!
   26404:	adds	r3, r3, #1
   26408:	vadd.i32	q8, q9, q8
   2640c:	bcc	26400 <__assert_fail@plt+0x14d00>
   26410:	vext.8	q9, q8, q8, #8
   26414:	ldr	r8, [sp]
   26418:	cmp	r9, sl
   2641c:	vadd.i32	q8, q8, q9
   26420:	vdup.32	q9, d16[1]
   26424:	vadd.i32	q8, q8, q9
   26428:	vmov.32	r7, d16[0]
   2642c:	beq	26448 <__assert_fail@plt+0x14d48>
   26430:	add	r1, ip, sl, lsl #2
   26434:	sub	r2, r9, sl
   26438:	ldr	r3, [r1], #4
   2643c:	subs	r2, r2, #1
   26440:	add	r7, r3, r7
   26444:	bne	26438 <__assert_fail@plt+0x14d38>
   26448:	ldr	r1, [r8, #68]	; 0x44
   2644c:	ldr	r2, [r8, #32]
   26450:	str	r0, [sp]
   26454:	and	r1, r1, r7
   26458:	add	r3, r1, r1, lsl #1
   2645c:	ldr	r1, [r2, r3, lsl #2]
   26460:	cmp	r1, #1
   26464:	blt	264e8 <__assert_fail@plt+0x14de8>
   26468:	cmp	r6, #0
   2646c:	beq	264e8 <__assert_fail@plt+0x14de8>
   26470:	add	r2, r2, r3, lsl #2
   26474:	sub	ip, r9, #1
   26478:	mov	r5, #0
   2647c:	ldr	lr, [r2, #8]
   26480:	ldr	r4, [lr, r5, lsl #2]
   26484:	ldr	r3, [r4]
   26488:	cmp	r7, r3
   2648c:	beq	264ac <__assert_fail@plt+0x14dac>
   26490:	add	r5, r5, #1
   26494:	cmp	r5, r1
   26498:	bge	264e8 <__assert_fail@plt+0x14de8>
   2649c:	ldr	r4, [lr, r5, lsl #2]
   264a0:	ldr	r3, [r4]
   264a4:	cmp	r7, r3
   264a8:	bne	26490 <__assert_fail@plt+0x14d90>
   264ac:	ldr	r3, [r4, #8]
   264b0:	cmp	r3, r9
   264b4:	bne	26490 <__assert_fail@plt+0x14d90>
   264b8:	mov	r3, ip
   264bc:	add	r0, r3, #1
   264c0:	cmp	r0, #1
   264c4:	blt	26608 <__assert_fail@plt+0x14f08>
   264c8:	ldr	r0, [r6, #8]
   264cc:	ldr	r2, [r4, #12]
   264d0:	ldr	r0, [r0, r3, lsl #2]
   264d4:	ldr	r2, [r2, r3, lsl #2]
   264d8:	sub	r3, r3, #1
   264dc:	cmp	r2, r0
   264e0:	beq	264bc <__assert_fail@plt+0x14dbc>
   264e4:	b	26490 <__assert_fail@plt+0x14d90>
   264e8:	mov	r0, #56	; 0x38
   264ec:	mov	r1, #1
   264f0:	bl	2b88c <__assert_fail@plt+0x1a18c>
   264f4:	cmp	r0, #0
   264f8:	beq	26648 <__assert_fail@plt+0x14f48>
   264fc:	mov	r4, r0
   26500:	ldr	r0, [r6, #4]
   26504:	add	sl, r4, #4
   26508:	cmp	r0, #1
   2650c:	str	r0, [r4, #8]
   26510:	blt	265d8 <__assert_fail@plt+0x14ed8>
   26514:	str	r0, [r4, #4]
   26518:	lsl	r0, r0, #2
   2651c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   26520:	cmp	r0, #0
   26524:	str	r0, [r4, #12]
   26528:	beq	26634 <__assert_fail@plt+0x14f34>
   2652c:	ldmib	r6, {r5, r6}
   26530:	mov	r1, r6
   26534:	mov	r9, r8
   26538:	lsl	r2, r5, #2
   2653c:	bl	11448 <memcpy@plt>
   26540:	cmp	r5, #1
   26544:	str	sl, [r4, #40]	; 0x28
   26548:	blt	265f0 <__assert_fail@plt+0x14ef0>
   2654c:	movw	ip, #65280	; 0xff00
   26550:	ldr	sl, [r9]
   26554:	mov	lr, #32
   26558:	movt	ip, #3
   2655c:	add	r8, ip, #255	; 0xff
   26560:	b	26584 <__assert_fail@plt+0x14e84>
   26564:	ldr	r0, [r1]
   26568:	tst	r0, ip
   2656c:	beq	26578 <__assert_fail@plt+0x14e78>
   26570:	orr	r0, r3, #128	; 0x80
   26574:	strb	r0, [r4, #52]	; 0x34
   26578:	add	r6, r6, #4
   2657c:	subs	r5, r5, #1
   26580:	beq	265f0 <__assert_fail@plt+0x14ef0>
   26584:	ldr	r0, [r6]
   26588:	add	r1, sl, r0, lsl #3
   2658c:	ldr	r0, [r1, #4]!
   26590:	and	r3, r0, r8
   26594:	cmp	r3, #1
   26598:	beq	26578 <__assert_fail@plt+0x14e78>
   2659c:	ldrb	r2, [r4, #52]	; 0x34
   265a0:	and	r3, lr, r0, lsr #15
   265a4:	uxtb	r0, r0
   265a8:	cmp	r0, #12
   265ac:	orr	r3, r2, r3
   265b0:	strb	r3, [r4, #52]	; 0x34
   265b4:	beq	26570 <__assert_fail@plt+0x14e70>
   265b8:	cmp	r0, #4
   265bc:	beq	265d0 <__assert_fail@plt+0x14ed0>
   265c0:	cmp	r0, #2
   265c4:	bne	26564 <__assert_fail@plt+0x14e64>
   265c8:	orr	r0, r3, #16
   265cc:	b	26574 <__assert_fail@plt+0x14e74>
   265d0:	orr	r0, r3, #64	; 0x40
   265d4:	b	26574 <__assert_fail@plt+0x14e74>
   265d8:	mov	r0, #0
   265dc:	mov	r9, r8
   265e0:	str	r0, [sl]
   265e4:	str	r0, [sl, #4]
   265e8:	str	r0, [sl, #8]
   265ec:	str	sl, [r4, #40]	; 0x28
   265f0:	mov	r0, r9
   265f4:	mov	r1, r4
   265f8:	mov	r2, r7
   265fc:	bl	22dc8 <__assert_fail@plt+0x116c8>
   26600:	cmp	r0, #0
   26604:	bne	26628 <__assert_fail@plt+0x14f28>
   26608:	mov	r0, r4
   2660c:	sub	sp, fp, #28
   26610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26614:	mov	r4, #0
   26618:	str	r4, [r0]
   2661c:	mov	r0, r4
   26620:	sub	sp, fp, #28
   26624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26628:	mov	r0, r4
   2662c:	bl	1bdc0 <__assert_fail@plt+0xa6c0>
   26630:	b	26648 <__assert_fail@plt+0x14f48>
   26634:	mov	r0, #0
   26638:	str	r0, [r4, #4]
   2663c:	str	r0, [r4, #8]
   26640:	mov	r0, r4
   26644:	bl	13ddc <__assert_fail@plt+0x26dc>
   26648:	ldr	r1, [sp]
   2664c:	mov	r0, #12
   26650:	mov	r4, #0
   26654:	str	r0, [r1]
   26658:	mov	r0, r4
   2665c:	sub	sp, fp, #28
   26660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26664:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26668:	add	fp, sp, #24
   2666c:	ldr	lr, [r0]
   26670:	add	r7, lr, r1, lsl #3
   26674:	ldrb	r9, [r7, #4]
   26678:	cmp	r9, #7
   2667c:	beq	2687c <__assert_fail@plt+0x1517c>
   26680:	ldr	ip, [r2, #80]	; 0x50
   26684:	mov	r6, #1
   26688:	cmp	ip, #1
   2668c:	beq	266cc <__assert_fail@plt+0x14fcc>
   26690:	ldr	r5, [r2, #28]
   26694:	add	r7, r3, #1
   26698:	cmp	r7, r5
   2669c:	bge	266cc <__assert_fail@plt+0x14fcc>
   266a0:	ldr	r6, [r2, #8]
   266a4:	sub	r5, r5, r3
   266a8:	add	r7, r6, r3, lsl #2
   266ac:	mov	r6, #1
   266b0:	ldr	r4, [r7, r6, lsl #2]
   266b4:	cmn	r4, #1
   266b8:	bne	266cc <__assert_fail@plt+0x14fcc>
   266bc:	add	r6, r6, #1
   266c0:	cmp	r5, r6
   266c4:	bne	266b0 <__assert_fail@plt+0x14fb0>
   266c8:	mov	r6, r5
   266cc:	mov	r8, #0
   266d0:	cmp	r9, #5
   266d4:	bne	2671c <__assert_fail@plt+0x1501c>
   266d8:	cmp	r6, #2
   266dc:	blt	2684c <__assert_fail@plt+0x1514c>
   266e0:	ldr	r0, [r0, #128]	; 0x80
   266e4:	tst	r0, #64	; 0x40
   266e8:	bne	266fc <__assert_fail@plt+0x14ffc>
   266ec:	ldr	r1, [r2, #4]
   266f0:	ldrb	r1, [r1, r3]
   266f4:	cmp	r1, #10
   266f8:	beq	2684c <__assert_fail@plt+0x1514c>
   266fc:	tst	r0, #128	; 0x80
   26700:	beq	26848 <__assert_fail@plt+0x15148>
   26704:	ldr	r0, [r2, #4]
   26708:	ldrb	r0, [r0, r3]
   2670c:	cmp	r0, #0
   26710:	movne	r8, r6
   26714:	mov	r0, r8
   26718:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2671c:	cmp	r9, #6
   26720:	bne	2684c <__assert_fail@plt+0x1514c>
   26724:	cmp	r6, #2
   26728:	blt	2684c <__assert_fail@plt+0x1514c>
   2672c:	ldr	r7, [lr, r1, lsl #3]
   26730:	ldr	r0, [r7, #32]
   26734:	cmp	r0, #0
   26738:	bne	26754 <__assert_fail@plt+0x15054>
   2673c:	ldr	r1, [r7, #36]	; 0x24
   26740:	cmp	r1, #0
   26744:	bne	26754 <__assert_fail@plt+0x15054>
   26748:	ldr	r1, [r7, #20]
   2674c:	cmp	r1, #0
   26750:	beq	26868 <__assert_fail@plt+0x15168>
   26754:	cmp	ip, #1
   26758:	bne	26774 <__assert_fail@plt+0x15074>
   2675c:	ldr	r1, [r2, #4]
   26760:	ldrb	r5, [r1, r3]
   26764:	ldr	r1, [r7, #20]
   26768:	cmp	r1, #1
   2676c:	bge	26788 <__assert_fail@plt+0x15088>
   26770:	b	267a8 <__assert_fail@plt+0x150a8>
   26774:	ldr	r1, [r2, #8]
   26778:	ldr	r5, [r1, r3, lsl #2]
   2677c:	ldr	r1, [r7, #20]
   26780:	cmp	r1, #1
   26784:	blt	267a8 <__assert_fail@plt+0x150a8>
   26788:	ldr	r2, [r7]
   2678c:	mov	r3, #0
   26790:	ldr	r4, [r2, r3, lsl #2]
   26794:	cmp	r5, r4
   26798:	beq	26828 <__assert_fail@plt+0x15128>
   2679c:	add	r3, r3, #1
   267a0:	cmp	r3, r1
   267a4:	blt	26790 <__assert_fail@plt+0x15090>
   267a8:	ldr	r1, [r7, #36]	; 0x24
   267ac:	cmp	r1, #1
   267b0:	blt	267e4 <__assert_fail@plt+0x150e4>
   267b4:	mov	r4, #0
   267b8:	ldr	r0, [r7, #12]
   267bc:	ldr	r1, [r0, r4, lsl #2]
   267c0:	mov	r0, r5
   267c4:	bl	113c4 <iswctype@plt>
   267c8:	cmp	r0, #0
   267cc:	bne	26828 <__assert_fail@plt+0x15128>
   267d0:	ldr	r0, [r7, #36]	; 0x24
   267d4:	add	r4, r4, #1
   267d8:	cmp	r4, r0
   267dc:	blt	267b8 <__assert_fail@plt+0x150b8>
   267e0:	ldr	r0, [r7, #32]
   267e4:	cmp	r0, #1
   267e8:	blt	26854 <__assert_fail@plt+0x15154>
   267ec:	ldr	r1, [r7, #4]
   267f0:	mov	r2, #0
   267f4:	ldr	r3, [r1, r2, lsl #2]
   267f8:	cmp	r3, r5
   267fc:	bls	26818 <__assert_fail@plt+0x15118>
   26800:	add	r2, r2, #1
   26804:	cmp	r2, r0
   26808:	bge	26854 <__assert_fail@plt+0x15154>
   2680c:	ldr	r3, [r1, r2, lsl #2]
   26810:	cmp	r3, r5
   26814:	bhi	26800 <__assert_fail@plt+0x15100>
   26818:	ldr	r3, [r7, #8]
   2681c:	ldr	r3, [r3, r2, lsl #2]
   26820:	cmp	r5, r3
   26824:	bhi	26800 <__assert_fail@plt+0x15100>
   26828:	mov	r0, r6
   2682c:	ldrb	r1, [r7, #16]
   26830:	tst	r1, #1
   26834:	beq	26864 <__assert_fail@plt+0x15164>
   26838:	cmp	r0, #0
   2683c:	bgt	2684c <__assert_fail@plt+0x1514c>
   26840:	cmp	r6, #1
   26844:	movle	r6, #1
   26848:	mov	r8, r6
   2684c:	mov	r0, r8
   26850:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26854:	mov	r0, #0
   26858:	ldrb	r1, [r7, #16]
   2685c:	tst	r1, #1
   26860:	bne	26838 <__assert_fail@plt+0x15138>
   26864:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26868:	mov	r5, #0
   2686c:	ldr	r1, [r7, #20]
   26870:	cmp	r1, #1
   26874:	bge	26788 <__assert_fail@plt+0x15088>
   26878:	b	267a8 <__assert_fail@plt+0x150a8>
   2687c:	ldr	r0, [r2, #4]
   26880:	mov	r8, #0
   26884:	ldrb	r6, [r0, r3]
   26888:	cmp	r6, #194	; 0xc2
   2688c:	bcc	2684c <__assert_fail@plt+0x1514c>
   26890:	ldr	r2, [r2, #48]	; 0x30
   26894:	add	r1, r3, #2
   26898:	cmp	r1, r2
   2689c:	bgt	2684c <__assert_fail@plt+0x1514c>
   268a0:	add	r1, r3, r0
   268a4:	cmp	r6, #223	; 0xdf
   268a8:	ldrb	r7, [r1, #1]
   268ac:	bhi	268d4 <__assert_fail@plt+0x151d4>
   268b0:	cmp	r7, #192	; 0xc0
   268b4:	mov	r0, #0
   268b8:	movwcc	r0, #1
   268bc:	lsl	r8, r0, #1
   268c0:	sxtb	r0, r7
   268c4:	cmn	r0, #1
   268c8:	movwgt	r8, #0
   268cc:	mov	r0, r8
   268d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   268d4:	cmp	r6, #239	; 0xef
   268d8:	bhi	268f4 <__assert_fail@plt+0x151f4>
   268dc:	mov	r0, #3
   268e0:	cmp	r6, #224	; 0xe0
   268e4:	bne	26950 <__assert_fail@plt+0x15250>
   268e8:	cmp	r7, #160	; 0xa0
   268ec:	bcc	2684c <__assert_fail@plt+0x1514c>
   268f0:	b	26950 <__assert_fail@plt+0x15250>
   268f4:	cmp	r6, #247	; 0xf7
   268f8:	bhi	26914 <__assert_fail@plt+0x15214>
   268fc:	mov	r0, #4
   26900:	cmp	r6, #240	; 0xf0
   26904:	bne	26950 <__assert_fail@plt+0x15250>
   26908:	cmp	r7, #144	; 0x90
   2690c:	bcc	2684c <__assert_fail@plt+0x1514c>
   26910:	b	26950 <__assert_fail@plt+0x15250>
   26914:	cmp	r6, #251	; 0xfb
   26918:	bhi	26934 <__assert_fail@plt+0x15234>
   2691c:	mov	r0, #5
   26920:	cmp	r6, #248	; 0xf8
   26924:	bne	26950 <__assert_fail@plt+0x15250>
   26928:	cmp	r7, #136	; 0x88
   2692c:	bcc	2684c <__assert_fail@plt+0x1514c>
   26930:	b	26950 <__assert_fail@plt+0x15250>
   26934:	cmp	r6, #253	; 0xfd
   26938:	bhi	2684c <__assert_fail@plt+0x1514c>
   2693c:	mov	r0, #6
   26940:	cmp	r6, #252	; 0xfc
   26944:	bne	26950 <__assert_fail@plt+0x15250>
   26948:	cmp	r7, #132	; 0x84
   2694c:	bcc	2684c <__assert_fail@plt+0x1514c>
   26950:	add	r3, r0, r3
   26954:	cmp	r3, r2
   26958:	bgt	2684c <__assert_fail@plt+0x1514c>
   2695c:	ldrb	r2, [r1, #1]
   26960:	sxtb	r3, r2
   26964:	cmn	r3, #1
   26968:	bgt	2684c <__assert_fail@plt+0x1514c>
   2696c:	cmp	r2, #191	; 0xbf
   26970:	bhi	2684c <__assert_fail@plt+0x1514c>
   26974:	ldrb	r2, [r1, #2]
   26978:	sxtb	r3, r2
   2697c:	cmn	r3, #1
   26980:	bgt	2684c <__assert_fail@plt+0x1514c>
   26984:	cmp	r2, #191	; 0xbf
   26988:	bhi	2684c <__assert_fail@plt+0x1514c>
   2698c:	cmp	r0, #3
   26990:	beq	26864 <__assert_fail@plt+0x15164>
   26994:	ldrb	r2, [r1, #3]
   26998:	sxtb	r3, r2
   2699c:	cmn	r3, #1
   269a0:	bgt	2684c <__assert_fail@plt+0x1514c>
   269a4:	cmp	r2, #191	; 0xbf
   269a8:	bhi	2684c <__assert_fail@plt+0x1514c>
   269ac:	cmp	r0, #4
   269b0:	beq	26864 <__assert_fail@plt+0x15164>
   269b4:	ldrb	r2, [r1, #4]
   269b8:	sxtb	r3, r2
   269bc:	cmn	r3, #1
   269c0:	bgt	2684c <__assert_fail@plt+0x1514c>
   269c4:	cmp	r2, #191	; 0xbf
   269c8:	bhi	2684c <__assert_fail@plt+0x1514c>
   269cc:	cmp	r0, #5
   269d0:	beq	26864 <__assert_fail@plt+0x15164>
   269d4:	ldrsb	r1, [r1, #5]
   269d8:	uxtb	r2, r1
   269dc:	cmp	r2, #191	; 0xbf
   269e0:	movwhi	r0, #0
   269e4:	cmn	r1, #1
   269e8:	movwgt	r0, #0
   269ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   269f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   269f4:	add	fp, sp, #24
   269f8:	ldr	r4, [r1, #4]
   269fc:	mov	r6, r0
   26a00:	mvn	r0, #0
   26a04:	mov	r8, #0
   26a08:	uxtab	r3, r0, r4
   26a0c:	cmp	r3, #6
   26a10:	bhi	26bbc <__assert_fail@plt+0x154bc>
   26a14:	ldr	r0, [r6, #4]
   26a18:	mov	r9, r1
   26a1c:	ldrb	r1, [r0, r2]
   26a20:	add	r7, pc, #4
   26a24:	sxtb	r0, r1
   26a28:	ldr	pc, [r7, r3, lsl #2]
   26a2c:	andeq	r6, r2, r8, asr #20
   26a30:			; <UNDEFINED> instruction: 0x00026bbc
   26a34:	andeq	r6, r2, ip, asr sl
   26a38:			; <UNDEFINED> instruction: 0x00026bbc
   26a3c:	andeq	r6, r2, r4, lsl #21
   26a40:			; <UNDEFINED> instruction: 0x00026bbc
   26a44:	andeq	r6, r2, ip, ror sl
   26a48:	ldrb	r3, [r9]
   26a4c:	uxtb	r7, r0
   26a50:	cmp	r3, r7
   26a54:	beq	26aa4 <__assert_fail@plt+0x153a4>
   26a58:	b	26bbc <__assert_fail@plt+0x154bc>
   26a5c:	ldr	r3, [r9]
   26a60:	ubfx	r7, r1, #5, #3
   26a64:	mov	r5, #1
   26a68:	ldr	r3, [r3, r7, lsl #2]
   26a6c:	and	r7, r1, #31
   26a70:	tst	r3, r5, lsl r7
   26a74:	bne	26aa4 <__assert_fail@plt+0x153a4>
   26a78:	b	26bbc <__assert_fail@plt+0x154bc>
   26a7c:	cmp	r0, #0
   26a80:	bmi	26bbc <__assert_fail@plt+0x154bc>
   26a84:	cmp	r1, #0
   26a88:	beq	26b4c <__assert_fail@plt+0x1544c>
   26a8c:	cmp	r1, #10
   26a90:	bne	26aa4 <__assert_fail@plt+0x153a4>
   26a94:	ldr	r3, [r6, #84]	; 0x54
   26a98:	ldrb	r3, [r3, #128]	; 0x80
   26a9c:	tst	r3, #64	; 0x40
   26aa0:	beq	26bbc <__assert_fail@plt+0x154bc>
   26aa4:	movw	r3, #65280	; 0xff00
   26aa8:	movt	r3, #3
   26aac:	tst	r4, r3
   26ab0:	beq	26b10 <__assert_fail@plt+0x15410>
   26ab4:	cmn	r2, #1
   26ab8:	ble	26af0 <__assert_fail@plt+0x153f0>
   26abc:	ldr	r3, [r6, #48]	; 0x30
   26ac0:	cmp	r3, r2
   26ac4:	beq	26bdc <__assert_fail@plt+0x154dc>
   26ac8:	ldr	r3, [r6, #80]	; 0x50
   26acc:	cmp	r3, #2
   26ad0:	blt	26b1c <__assert_fail@plt+0x1541c>
   26ad4:	ldr	r0, [r6, #8]
   26ad8:	ldr	r7, [r0, r2, lsl #2]
   26adc:	cmn	r7, #1
   26ae0:	bne	26b60 <__assert_fail@plt+0x15460>
   26ae4:	sub	r2, r2, #1
   26ae8:	cmn	r2, #1
   26aec:	bne	26ad8 <__assert_fail@plt+0x153d8>
   26af0:	ldr	r1, [r6, #60]	; 0x3c
   26af4:	and	r0, r1, #1
   26af8:	tst	r4, #1024	; 0x400
   26afc:	eor	r2, r0, #1
   26b00:	beq	26b98 <__assert_fail@plt+0x15498>
   26b04:	cmp	r0, #0
   26b08:	beq	26bbc <__assert_fail@plt+0x154bc>
   26b0c:	b	26b98 <__assert_fail@plt+0x15498>
   26b10:	mov	r8, #1
   26b14:	mov	r0, r8
   26b18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26b1c:	ldr	r2, [r6, #68]	; 0x44
   26b20:	ubfx	r3, r1, #5, #3
   26b24:	and	r7, r1, #31
   26b28:	mov	r1, #1
   26b2c:	ldr	r3, [r2, r3, lsl #2]
   26b30:	mov	r2, #0
   26b34:	tst	r3, r1, lsl r7
   26b38:	bne	26b98 <__assert_fail@plt+0x15498>
   26b3c:	mov	r1, #0
   26b40:	cmp	r0, #10
   26b44:	beq	26b78 <__assert_fail@plt+0x15478>
   26b48:	b	26b88 <__assert_fail@plt+0x15488>
   26b4c:	ldr	r3, [r6, #84]	; 0x54
   26b50:	ldrb	r3, [r3, #128]	; 0x80
   26b54:	tst	r3, #128	; 0x80
   26b58:	bne	26bbc <__assert_fail@plt+0x154bc>
   26b5c:	b	26aa4 <__assert_fail@plt+0x153a4>
   26b60:	ldrb	r0, [r6, #78]	; 0x4e
   26b64:	cmp	r0, #0
   26b68:	bne	26bfc <__assert_fail@plt+0x154fc>
   26b6c:	mov	r1, #0
   26b70:	cmp	r7, #10
   26b74:	bne	26b88 <__assert_fail@plt+0x15488>
   26b78:	ldrb	r0, [r6, #77]	; 0x4d
   26b7c:	cmp	r0, #0
   26b80:	movwne	r0, #1
   26b84:	lsl	r1, r0, #1
   26b88:	and	r0, r1, #1
   26b8c:	tst	r4, #1024	; 0x400
   26b90:	eor	r2, r0, #1
   26b94:	bne	26b04 <__assert_fail@plt+0x15404>
   26b98:	ldr	r0, [r9, #4]
   26b9c:	cmp	r2, #0
   26ba0:	bne	26bac <__assert_fail@plt+0x154ac>
   26ba4:	ands	r2, r0, #2048	; 0x800
   26ba8:	bne	26bbc <__assert_fail@plt+0x154bc>
   26bac:	tst	r1, #2
   26bb0:	bne	26bc4 <__assert_fail@plt+0x154c4>
   26bb4:	ands	r2, r0, #8192	; 0x2000
   26bb8:	beq	26bc4 <__assert_fail@plt+0x154c4>
   26bbc:	mov	r0, r8
   26bc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26bc4:	uxth	r0, r0
   26bc8:	mov	r2, #1
   26bcc:	and	r1, r1, #8
   26bd0:	eor	r0, r2, r0, lsr #15
   26bd4:	orr	r0, r0, r1, lsr #3
   26bd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26bdc:	ldr	r0, [r6, #88]	; 0x58
   26be0:	and	r0, r0, #2
   26be4:	eor	r1, r0, #10
   26be8:	and	r0, r1, #1
   26bec:	tst	r4, #1024	; 0x400
   26bf0:	eor	r2, r0, #1
   26bf4:	bne	26b04 <__assert_fail@plt+0x15404>
   26bf8:	b	26b98 <__assert_fail@plt+0x15498>
   26bfc:	mov	r0, r7
   26c00:	bl	115f8 <iswalnum@plt>
   26c04:	mov	r1, #1
   26c08:	mov	r2, #0
   26c0c:	cmp	r7, #95	; 0x5f
   26c10:	beq	26b98 <__assert_fail@plt+0x15498>
   26c14:	cmp	r0, #0
   26c18:	beq	26b6c <__assert_fail@plt+0x1546c>
   26c1c:	b	26b98 <__assert_fail@plt+0x15498>
   26c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c24:	add	fp, sp, #28
   26c28:	sub	sp, sp, #4
   26c2c:	vpush	{d8-d9}
   26c30:	sub	sp, sp, #2272	; 0x8e0
   26c34:	sub	sp, sp, #12288	; 0x3000
   26c38:	sub	lr, fp, #1024	; 0x400
   26c3c:	vmov.i32	q4, #0	; 0x00000000
   26c40:	mov	r8, r0
   26c44:	mov	r0, #0
   26c48:	str	r1, [sp, #104]	; 0x68
   26c4c:	sub	r3, lr, #56	; 0x38
   26c50:	str	r0, [r1, #44]	; 0x2c
   26c54:	str	r0, [r1, #48]	; 0x30
   26c58:	mov	r0, r3
   26c5c:	vst1.64	{d8-d9}, [r0]!
   26c60:	vst1.64	{d8-d9}, [r0]
   26c64:	ldr	r0, [r1, #8]
   26c68:	cmp	r0, #0
   26c6c:	ble	283c4 <__assert_fail@plt+0x16cc4>
   26c70:	add	r0, sp, #168	; 0xa8
   26c74:	add	r2, r8, #96	; 0x60
   26c78:	mov	r1, #0
   26c7c:	str	r8, [sp, #96]	; 0x60
   26c80:	add	r0, r0, #28
   26c84:	str	r2, [sp]
   26c88:	str	r0, [sp, #12]
   26c8c:	add	r0, r2, #16
   26c90:	str	r0, [sp, #4]
   26c94:	add	r0, r3, #16
   26c98:	str	r0, [sp, #8]
   26c9c:	mov	r0, #0
   26ca0:	str	r0, [sp, #164]	; 0xa4
   26ca4:	b	26cd4 <__assert_fail@plt+0x155d4>
   26ca8:	sub	lr, fp, #1024	; 0x400
   26cac:	sub	r0, lr, #56	; 0x38
   26cb0:	vst1.64	{d8-d9}, [r0]!
   26cb4:	vst1.64	{d8-d9}, [r0]
   26cb8:	ldr	r8, [sp, #96]	; 0x60
   26cbc:	ldr	r1, [sp, #100]	; 0x64
   26cc0:	ldr	r0, [sp, #104]	; 0x68
   26cc4:	add	r1, r1, #1
   26cc8:	ldr	r0, [r0, #8]
   26ccc:	cmp	r1, r0
   26cd0:	bge	27a38 <__assert_fail@plt+0x16338>
   26cd4:	ldr	r0, [sp, #104]	; 0x68
   26cd8:	ldr	r9, [r8]
   26cdc:	str	r1, [sp, #100]	; 0x64
   26ce0:	ldr	r0, [r0, #12]
   26ce4:	ldr	ip, [r0, r1, lsl #2]
   26ce8:	add	r0, r9, ip, lsl #3
   26cec:	ldr	r0, [r0, #4]
   26cf0:	uxtb	r6, r0
   26cf4:	cmp	r6, #1
   26cf8:	bne	26dec <__assert_fail@plt+0x156ec>
   26cfc:	ldrb	r1, [r9, ip, lsl #3]
   26d00:	sub	lr, fp, #1024	; 0x400
   26d04:	mov	r5, #1
   26d08:	sub	r3, lr, #56	; 0x38
   26d0c:	add	lr, sp, #168	; 0xa8
   26d10:	mov	r7, r3
   26d14:	ubfx	r2, r1, #5, #3
   26d18:	and	r1, r1, #31
   26d1c:	ldr	r3, [r3, r2, lsl #2]
   26d20:	orr	r1, r3, r5, lsl r1
   26d24:	str	r1, [r7, r2, lsl #2]
   26d28:	movw	r1, #65280	; 0xff00
   26d2c:	ldr	r7, [sp, #12]
   26d30:	movt	r1, #3
   26d34:	ands	r1, r0, r1
   26d38:	beq	27138 <__assert_fail@plt+0x15a38>
   26d3c:	tst	r0, #8192	; 0x2000
   26d40:	beq	26d6c <__assert_fail@plt+0x1566c>
   26d44:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   26d48:	sub	r2, fp, #1024	; 0x400
   26d4c:	sub	r2, r2, #56	; 0x38
   26d50:	vst1.64	{d8-d9}, [r2]!
   26d54:	vst1.64	{d8-d9}, [r2]
   26d58:	tst	r1, #1024	; 0x400
   26d5c:	beq	26cb8 <__assert_fail@plt+0x155b8>
   26d60:	ldr	r7, [sp, #12]
   26d64:	mov	r1, #1024	; 0x400
   26d68:	str	r1, [fp, #-1080]	; 0xfffffbc8
   26d6c:	tst	r0, #32768	; 0x8000
   26d70:	bne	26ca8 <__assert_fail@plt+0x155a8>
   26d74:	tst	r0, #1024	; 0x400
   26d78:	bne	26edc <__assert_fail@plt+0x157dc>
   26d7c:	tst	r0, #2048	; 0x800
   26d80:	beq	27138 <__assert_fail@plt+0x15a38>
   26d84:	tst	r0, #4194304	; 0x400000
   26d88:	beq	26d94 <__assert_fail@plt+0x15694>
   26d8c:	cmp	r6, #1
   26d90:	beq	26ca8 <__assert_fail@plt+0x155a8>
   26d94:	ldr	r1, [sp, #96]	; 0x60
   26d98:	ldr	r0, [r1, #92]	; 0x5c
   26d9c:	cmp	r0, #1
   26da0:	ble	270c0 <__assert_fail@plt+0x159c0>
   26da4:	ldr	r0, [r1, #60]	; 0x3c
   26da8:	ldr	r1, [sp]
   26dac:	vld1.32	{d16-d17}, [r1]
   26db0:	vld1.32	{d18-d19}, [r0]!
   26db4:	sub	r1, fp, #1024	; 0x400
   26db8:	sub	r1, r1, #56	; 0x38
   26dbc:	vld1.64	{d20-d21}, [r1]
   26dc0:	vand	q8, q9, q8
   26dc4:	vbic	q9, q10, q8
   26dc8:	vst1.64	{d18-d19}, [r1]
   26dcc:	ldr	r1, [sp, #4]
   26dd0:	vld1.32	{d20-d21}, [r0]
   26dd4:	ldr	r0, [sp, #8]
   26dd8:	vld1.32	{d16-d17}, [r1]
   26ddc:	vld1.32	{d22-d23}, [r0]
   26de0:	vand	q8, q10, q8
   26de4:	vbic	q8, q11, q8
   26de8:	b	270f0 <__assert_fail@plt+0x159f0>
   26dec:	cmp	r6, #7
   26df0:	add	lr, sp, #168	; 0xa8
   26df4:	beq	26e3c <__assert_fail@plt+0x1573c>
   26df8:	cmp	r6, #5
   26dfc:	beq	26e8c <__assert_fail@plt+0x1578c>
   26e00:	cmp	r6, #3
   26e04:	bne	26ed4 <__assert_fail@plt+0x157d4>
   26e08:	ldr	r1, [r9, ip, lsl #3]
   26e0c:	sub	r2, fp, #1024	; 0x400
   26e10:	sub	r2, r2, #56	; 0x38
   26e14:	vld1.64	{d16-d17}, [r2]
   26e18:	vld1.32	{d18-d19}, [r1]!
   26e1c:	vorr	q8, q8, q9
   26e20:	vst1.64	{d16-d17}, [r2]
   26e24:	vld1.32	{d16-d17}, [r1]
   26e28:	ldr	r1, [sp, #8]
   26e2c:	vld1.32	{d18-d19}, [r1]
   26e30:	vorr	q8, q9, q8
   26e34:	vst1.32	{d16-d17}, [r1]
   26e38:	b	26d28 <__assert_fail@plt+0x15628>
   26e3c:	mvn	r1, #0
   26e40:	str	r1, [fp, #-1068]	; 0xfffffbd4
   26e44:	str	r1, [fp, #-1072]	; 0xfffffbd0
   26e48:	str	r1, [fp, #-1076]	; 0xfffffbcc
   26e4c:	str	r1, [fp, #-1080]	; 0xfffffbc8
   26e50:	ldr	r1, [sp, #96]	; 0x60
   26e54:	ldr	r2, [r1, #128]	; 0x80
   26e58:	and	r1, r2, #128	; 0x80
   26e5c:	ands	r2, r2, #64	; 0x40
   26e60:	beq	26e6c <__assert_fail@plt+0x1576c>
   26e64:	cmp	r1, #0
   26e68:	beq	26d28 <__assert_fail@plt+0x15628>
   26e6c:	cmp	r2, #0
   26e70:	mvn	r2, #1
   26e74:	movweq	r2, #64510	; 0xfbfe
   26e78:	movteq	r2, #65535	; 0xffff
   26e7c:	cmp	r1, #0
   26e80:	mvneq	r2, #1024	; 0x400
   26e84:	str	r2, [fp, #-1080]	; 0xfffffbc8
   26e88:	b	26d28 <__assert_fail@plt+0x15628>
   26e8c:	ldr	r3, [sp, #96]	; 0x60
   26e90:	ldr	r1, [r3, #92]	; 0x5c
   26e94:	cmp	r1, #2
   26e98:	blt	26f94 <__assert_fail@plt+0x15894>
   26e9c:	ldr	r1, [r3, #60]	; 0x3c
   26ea0:	sub	r2, fp, #1024	; 0x400
   26ea4:	sub	r2, r2, #56	; 0x38
   26ea8:	vld1.64	{d16-d17}, [r2]
   26eac:	vld1.32	{d18-d19}, [r1]!
   26eb0:	vorr	q8, q8, q9
   26eb4:	vst1.64	{d16-d17}, [r2]
   26eb8:	vld1.32	{d18-d19}, [r1]
   26ebc:	ldr	r1, [sp, #8]
   26ec0:	vld1.32	{d20-d21}, [r1]
   26ec4:	vorr	q9, q10, q9
   26ec8:	vst1.32	{d18-d19}, [r1]
   26ecc:	vmov.32	r1, d16[0]
   26ed0:	b	26fb8 <__assert_fail@plt+0x158b8>
   26ed4:	ldr	r8, [sp, #96]	; 0x60
   26ed8:	b	26cc0 <__assert_fail@plt+0x155c0>
   26edc:	movw	r1, #255	; 0xff
   26ee0:	movt	r1, #64	; 0x40
   26ee4:	and	r1, r0, r1
   26ee8:	cmp	r1, #1
   26eec:	beq	26ca8 <__assert_fail@plt+0x155a8>
   26ef0:	ldr	r7, [sp, #96]	; 0x60
   26ef4:	ldr	r1, [r7, #92]	; 0x5c
   26ef8:	cmp	r1, #1
   26efc:	ble	26fe4 <__assert_fail@plt+0x158e4>
   26f00:	ldr	r1, [r7, #60]	; 0x3c
   26f04:	ldr	r2, [sp]
   26f08:	vld1.32	{d16-d17}, [r2]
   26f0c:	vld1.32	{d18-d19}, [r1]!
   26f10:	sub	r2, fp, #1024	; 0x400
   26f14:	sub	r2, r2, #56	; 0x38
   26f18:	vld1.64	{d20-d21}, [r2]
   26f1c:	vorn	q8, q8, q9
   26f20:	vand	q8, q10, q8
   26f24:	vst1.64	{d16-d17}, [r2]
   26f28:	vmov.32	r2, d16[1]
   26f2c:	vld1.32	{d18-d19}, [r1]
   26f30:	ldr	r1, [sp, #4]
   26f34:	vld1.32	{d20-d21}, [r1]
   26f38:	ldr	r1, [sp, #8]
   26f3c:	vld1.32	{d22-d23}, [r1]
   26f40:	vorn	q9, q10, q9
   26f44:	vand	q9, q11, q9
   26f48:	vst1.32	{d18-d19}, [r1]
   26f4c:	vmov.32	r1, d16[0]
   26f50:	orr	r1, r2, r1
   26f54:	vmov.32	r2, d17[0]
   26f58:	orr	r1, r1, r2
   26f5c:	vmov.32	r2, d17[1]
   26f60:	orr	r1, r1, r2
   26f64:	vmov.32	r2, d18[0]
   26f68:	orr	r1, r1, r2
   26f6c:	vmov.32	r2, d18[1]
   26f70:	orr	r1, r1, r2
   26f74:	vmov.32	r2, d19[0]
   26f78:	orr	r1, r1, r2
   26f7c:	vmov.32	r2, d19[1]
   26f80:	orr	r1, r1, r2
   26f84:	ldr	r7, [sp, #12]
   26f88:	cmp	r1, #0
   26f8c:	bne	26d7c <__assert_fail@plt+0x1567c>
   26f90:	b	26cb8 <__assert_fail@plt+0x155b8>
   26f94:	mvn	r1, #0
   26f98:	str	r1, [fp, #-1052]	; 0xfffffbe4
   26f9c:	str	r1, [fp, #-1056]	; 0xfffffbe0
   26fa0:	str	r1, [fp, #-1060]	; 0xfffffbdc
   26fa4:	str	r1, [fp, #-1064]	; 0xfffffbd8
   26fa8:	str	r1, [fp, #-1068]	; 0xfffffbd4
   26fac:	str	r1, [fp, #-1072]	; 0xfffffbd0
   26fb0:	str	r1, [fp, #-1076]	; 0xfffffbcc
   26fb4:	str	r1, [fp, #-1080]	; 0xfffffbc8
   26fb8:	ldr	r2, [r3, #128]	; 0x80
   26fbc:	ands	r3, r2, #64	; 0x40
   26fc0:	and	r2, r2, #128	; 0x80
   26fc4:	biceq	r1, r1, #1024	; 0x400
   26fc8:	beq	26fd4 <__assert_fail@plt+0x158d4>
   26fcc:	cmp	r2, #0
   26fd0:	beq	26d28 <__assert_fail@plt+0x15628>
   26fd4:	cmp	r2, #0
   26fd8:	bicne	r1, r1, #1
   26fdc:	str	r1, [fp, #-1080]	; 0xfffffbc8
   26fe0:	b	26d28 <__assert_fail@plt+0x15628>
   26fe4:	ldr	r1, [r7, #112]	; 0x70
   26fe8:	add	sl, r7, #96	; 0x60
   26fec:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   26ff0:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   26ff4:	ldm	sl, {r2, r3, r8, sl}
   26ff8:	str	ip, [sp, #28]
   26ffc:	str	r9, [sp, #24]
   27000:	ldr	r9, [sp, #24]
   27004:	str	r1, [sp, #148]	; 0x94
   27008:	ldr	r1, [r7, #116]	; 0x74
   2700c:	and	ip, r5, r3
   27010:	and	lr, r4, r2
   27014:	ldr	r2, [sp, #148]	; 0x94
   27018:	str	r1, [sp, #152]	; 0x98
   2701c:	ldr	r1, [r7, #120]	; 0x78
   27020:	str	r1, [sp, #156]	; 0x9c
   27024:	ldr	r1, [r7, #124]	; 0x7c
   27028:	ldr	r7, [fp, #-1072]	; 0xfffffbd0
   2702c:	ldr	r3, [sp, #156]	; 0x9c
   27030:	str	r1, [sp, #160]	; 0xa0
   27034:	ldr	r1, [fp, #-1068]	; 0xfffffbd4
   27038:	and	r8, r7, r8
   2703c:	str	lr, [fp, #-1080]	; 0xfffffbc8
   27040:	str	ip, [fp, #-1076]	; 0xfffffbcc
   27044:	str	r8, [fp, #-1072]	; 0xfffffbd0
   27048:	ldr	r7, [sp, #160]	; 0xa0
   2704c:	and	r1, r1, sl
   27050:	add	sl, sp, #168	; 0xa8
   27054:	str	r1, [fp, #-1068]	; 0xfffffbd4
   27058:	ldr	r5, [fp, #-1064]	; 0xfffffbd8
   2705c:	and	r5, r5, r2
   27060:	ldr	r2, [sp, #152]	; 0x98
   27064:	str	r5, [fp, #-1064]	; 0xfffffbd8
   27068:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2706c:	and	r4, r4, r2
   27070:	str	r4, [fp, #-1060]	; 0xfffffbdc
   27074:	ldr	r2, [fp, #-1056]	; 0xfffffbe0
   27078:	and	r2, r2, r3
   2707c:	str	r2, [fp, #-1056]	; 0xfffffbe0
   27080:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
   27084:	and	r3, r3, r7
   27088:	orr	r7, ip, lr
   2708c:	ldr	ip, [sp, #28]
   27090:	mov	lr, sl
   27094:	orr	r7, r7, r8
   27098:	str	r3, [fp, #-1052]	; 0xfffffbe4
   2709c:	orr	r1, r7, r1
   270a0:	orr	r1, r1, r5
   270a4:	orr	r1, r1, r4
   270a8:	orr	r1, r1, r2
   270ac:	orr	r1, r1, r3
   270b0:	ldr	r7, [sp, #12]
   270b4:	cmp	r1, #0
   270b8:	bne	26d7c <__assert_fail@plt+0x1567c>
   270bc:	b	26cb8 <__assert_fail@plt+0x155b8>
   270c0:	ldr	r0, [sp]
   270c4:	vld1.32	{d16-d17}, [r0]
   270c8:	sub	r0, fp, #1024	; 0x400
   270cc:	sub	r0, r0, #56	; 0x38
   270d0:	vld1.64	{d18-d19}, [r0]
   270d4:	vbic	q9, q9, q8
   270d8:	vst1.64	{d18-d19}, [r0]
   270dc:	ldr	r0, [sp, #4]
   270e0:	vld1.32	{d16-d17}, [r0]
   270e4:	ldr	r0, [sp, #8]
   270e8:	vld1.32	{d20-d21}, [r0]
   270ec:	vbic	q8, q10, q8
   270f0:	vst1.32	{d16-d17}, [r0]
   270f4:	vmov.32	r0, d18[0]
   270f8:	vmov.32	r1, d18[1]
   270fc:	ldr	r7, [sp, #12]
   27100:	orr	r0, r1, r0
   27104:	vmov.32	r1, d19[0]
   27108:	orr	r0, r0, r1
   2710c:	vmov.32	r1, d19[1]
   27110:	orr	r0, r0, r1
   27114:	vmov.32	r1, d16[0]
   27118:	orr	r0, r0, r1
   2711c:	vmov.32	r1, d16[1]
   27120:	orr	r0, r0, r1
   27124:	vmov.32	r1, d17[0]
   27128:	orr	r0, r0, r1
   2712c:	vmov.32	r1, d17[1]
   27130:	orrs	r0, r0, r1
   27134:	beq	26cb8 <__assert_fail@plt+0x155b8>
   27138:	ldr	r0, [sp, #164]	; 0xa4
   2713c:	cmp	r0, #1
   27140:	blt	275ac <__assert_fail@plt+0x15eac>
   27144:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   27148:	ldr	r2, [fp, #-1052]	; 0xfffffbe4
   2714c:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   27150:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   27154:	cmp	r6, #1
   27158:	mov	r4, #0
   2715c:	str	r0, [sp, #140]	; 0x8c
   27160:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   27164:	str	r1, [sp, #120]	; 0x78
   27168:	str	r2, [sp, #144]	; 0x90
   2716c:	str	r3, [sp, #152]	; 0x98
   27170:	str	r0, [sp, #160]	; 0xa0
   27174:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   27178:	str	r0, [sp, #156]	; 0x9c
   2717c:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   27180:	str	r0, [sp, #132]	; 0x84
   27184:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   27188:	str	r0, [sp, #148]	; 0x94
   2718c:	bne	275c8 <__assert_fail@plt+0x15ec8>
   27190:	ldr	r3, [sp, #148]	; 0x94
   27194:	sub	r0, fp, #6144	; 0x1800
   27198:	str	r7, [sp, #128]	; 0x80
   2719c:	str	ip, [sp, #28]
   271a0:	str	r9, [sp, #24]
   271a4:	sub	r6, r0, #104	; 0x68
   271a8:	str	r6, [sp, #124]	; 0x7c
   271ac:	b	271e0 <__assert_fail@plt+0x15ae0>
   271b0:	mov	r8, ip
   271b4:	ldr	r0, [sp, #128]	; 0x80
   271b8:	add	r4, r4, #1
   271bc:	mov	ip, r8
   271c0:	add	r0, r0, #32
   271c4:	str	r0, [sp, #128]	; 0x80
   271c8:	ldr	r0, [sp, #124]	; 0x7c
   271cc:	add	r0, r0, #12
   271d0:	str	r0, [sp, #124]	; 0x7c
   271d4:	ldr	r0, [sp, #164]	; 0xa4
   271d8:	cmp	r4, r0
   271dc:	bge	27574 <__assert_fail@plt+0x15e74>
   271e0:	ldrb	r0, [r9, ip, lsl #3]
   271e4:	mov	r2, #1
   271e8:	ubfx	r1, r0, #5, #3
   271ec:	and	r0, r0, #31
   271f0:	add	r1, lr, r1, lsl #2
   271f4:	ldr	r1, [r1, r4, lsl #5]
   271f8:	tst	r1, r2, lsl r0
   271fc:	beq	271b0 <__assert_fail@plt+0x15ab0>
   27200:	add	r9, lr, r4, lsl #5
   27204:	ldr	r2, [sp, #132]	; 0x84
   27208:	str	r4, [sp, #136]	; 0x88
   2720c:	ldr	r4, [sp, #120]	; 0x78
   27210:	ldr	sl, [sp, #156]	; 0x9c
   27214:	str	r3, [sp, #148]	; 0x94
   27218:	ldr	ip, [sp, #152]	; 0x98
   2721c:	ldr	r0, [r9, #8]
   27220:	ldr	r6, [r9, #4]
   27224:	ldr	r7, [r9, #12]
   27228:	ldr	r5, [r9, #16]
   2722c:	and	r1, r0, r2
   27230:	str	r0, [sp, #88]	; 0x58
   27234:	ldr	r0, [sp, #128]	; 0x80
   27238:	str	r6, [sp, #108]	; 0x6c
   2723c:	and	r6, r6, sl
   27240:	str	r7, [sp, #112]	; 0x70
   27244:	str	r5, [sp, #92]	; 0x5c
   27248:	str	r1, [sp, #84]	; 0x54
   2724c:	str	r6, [sp, #76]	; 0x4c
   27250:	ldr	lr, [r0, #-28]	; 0xffffffe4
   27254:	ldr	r8, [r0]
   27258:	and	r0, lr, r4
   2725c:	str	r8, [sp, #116]	; 0x74
   27260:	str	r0, [sp, #80]	; 0x50
   27264:	orr	r0, r6, r0
   27268:	orr	r0, r0, r1
   2726c:	and	r1, r7, r3
   27270:	ldr	r7, [sp, #160]	; 0xa0
   27274:	ldr	r3, [sp, #140]	; 0x8c
   27278:	str	r1, [sp, #72]	; 0x48
   2727c:	orr	r0, r0, r1
   27280:	and	r1, r5, r7
   27284:	str	r1, [sp, #68]	; 0x44
   27288:	orr	r0, r0, r1
   2728c:	ldr	r1, [r9, #20]
   27290:	and	r6, r1, r3
   27294:	ldr	r3, [r9, #24]
   27298:	str	r6, [sp, #64]	; 0x40
   2729c:	orr	r0, r0, r6
   272a0:	ldr	r6, [sp, #144]	; 0x90
   272a4:	and	r5, r3, ip
   272a8:	orr	r0, r0, r5
   272ac:	and	r6, r8, r6
   272b0:	orrs	r0, r0, r6
   272b4:	beq	27460 <__assert_fail@plt+0x15d60>
   272b8:	bic	r0, r4, lr
   272bc:	ldr	ip, [sp, #88]	; 0x58
   272c0:	str	r5, [sp, #20]
   272c4:	ldr	r5, [sp, #148]	; 0x94
   272c8:	str	r6, [sp, #16]
   272cc:	ldr	r6, [sp, #92]	; 0x5c
   272d0:	ldr	r8, [sp, #140]	; 0x8c
   272d4:	bic	lr, lr, r4
   272d8:	ldr	r4, [sp, #148]	; 0x94
   272dc:	str	r0, [sp, #60]	; 0x3c
   272e0:	ldr	r0, [sp, #108]	; 0x6c
   272e4:	bic	r0, sl, r0
   272e8:	str	r0, [sp, #56]	; 0x38
   272ec:	bic	r0, r2, ip
   272f0:	bic	r2, ip, r2
   272f4:	str	r0, [sp, #52]	; 0x34
   272f8:	ldr	r0, [sp, #112]	; 0x70
   272fc:	str	r2, [sp, #156]	; 0x9c
   27300:	bic	r0, r5, r0
   27304:	ldr	r5, [sp, #144]	; 0x90
   27308:	str	r0, [sp, #48]	; 0x30
   2730c:	bic	r0, r7, r6
   27310:	str	r0, [sp, #44]	; 0x2c
   27314:	bic	r0, r8, r1
   27318:	bic	r1, r1, r8
   2731c:	str	r0, [sp, #40]	; 0x28
   27320:	ldr	r0, [sp, #152]	; 0x98
   27324:	bic	r0, r0, r3
   27328:	str	r0, [sp, #36]	; 0x24
   2732c:	ldr	r0, [sp, #116]	; 0x74
   27330:	bic	r0, r5, r0
   27334:	str	r0, [sp, #32]
   27338:	ldr	r0, [sp, #108]	; 0x6c
   2733c:	bic	sl, r0, sl
   27340:	orr	r0, sl, lr
   27344:	orr	r0, r0, r2
   27348:	ldr	r2, [sp, #112]	; 0x70
   2734c:	bic	ip, r2, r4
   27350:	ldr	r4, [sp, #152]	; 0x98
   27354:	bic	r2, r6, r7
   27358:	orr	r0, r0, ip
   2735c:	orr	r0, r0, r2
   27360:	orr	r0, r0, r1
   27364:	bic	r3, r3, r4
   27368:	orr	r4, r0, r3
   2736c:	ldr	r0, [sp, #116]	; 0x74
   27370:	bic	r0, r0, r5
   27374:	orrs	r4, r4, r0
   27378:	beq	27478 <__assert_fail@plt+0x15d78>
   2737c:	ldr	r5, [sp, #164]	; 0xa4
   27380:	ldr	r7, [sp, #156]	; 0x9c
   27384:	mov	r6, sl
   27388:	add	sl, sp, #168	; 0xa8
   2738c:	add	r4, sl, r5, lsl #5
   27390:	str	lr, [sl, r5, lsl #5]
   27394:	sub	lr, fp, #6144	; 0x1800
   27398:	str	r5, [sp, #164]	; 0xa4
   2739c:	str	r6, [r4, #4]
   273a0:	str	r7, [r4, #8]
   273a4:	str	ip, [r4, #12]
   273a8:	str	r2, [r4, #16]
   273ac:	str	r1, [r4, #20]
   273b0:	str	r3, [r4, #24]
   273b4:	str	r0, [r4, #28]
   273b8:	ldr	r0, [sp, #128]	; 0x80
   273bc:	ldr	r1, [sp, #80]	; 0x50
   273c0:	ldr	r6, [sp, #124]	; 0x7c
   273c4:	mov	ip, r5
   273c8:	str	r1, [r0, #-28]	; 0xffffffe4
   273cc:	ldr	r1, [sp, #76]	; 0x4c
   273d0:	str	r1, [r9, #4]
   273d4:	ldr	r1, [sp, #84]	; 0x54
   273d8:	str	r1, [r9, #8]
   273dc:	ldr	r1, [sp, #72]	; 0x48
   273e0:	str	r1, [r9, #12]
   273e4:	ldr	r1, [sp, #68]	; 0x44
   273e8:	str	r1, [r9, #16]
   273ec:	ldr	r1, [sp, #64]	; 0x40
   273f0:	str	r1, [r9, #20]
   273f4:	ldr	r1, [sp, #20]
   273f8:	str	r1, [r9, #24]
   273fc:	ldr	r1, [sp, #16]
   27400:	str	r1, [r0]
   27404:	add	r0, r5, r5, lsl #1
   27408:	sub	r1, lr, #104	; 0x68
   2740c:	add	r5, r1, r0, lsl #2
   27410:	ldr	r0, [r6, #4]
   27414:	mov	r4, r5
   27418:	str	r0, [r4, #4]!
   2741c:	ldr	r8, [r6, #4]
   27420:	cmp	r8, #0
   27424:	ble	2749c <__assert_fail@plt+0x15d9c>
   27428:	str	r0, [r5]
   2742c:	lsl	r0, r0, #2
   27430:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   27434:	ldr	r9, [sp, #44]	; 0x2c
   27438:	ldr	r7, [sp, #40]	; 0x28
   2743c:	ldr	sl, [sp, #32]
   27440:	cmp	r0, #0
   27444:	str	r0, [r5, #8]
   27448:	beq	28308 <__assert_fail@plt+0x16c08>
   2744c:	ldr	r1, [r6, #8]
   27450:	lsl	r2, r8, #2
   27454:	bl	11448 <memcpy@plt>
   27458:	ldr	r4, [sp, #136]	; 0x88
   2745c:	b	274bc <__assert_fail@plt+0x15dbc>
   27460:	ldr	r4, [sp, #136]	; 0x88
   27464:	ldr	r8, [sp, #28]
   27468:	ldr	r9, [sp, #24]
   2746c:	ldr	r3, [sp, #148]	; 0x94
   27470:	add	lr, sp, #168	; 0xa8
   27474:	b	271b4 <__assert_fail@plt+0x15ab4>
   27478:	add	sl, sp, #168	; 0xa8
   2747c:	ldr	r4, [sp, #136]	; 0x88
   27480:	ldr	r6, [sp, #124]	; 0x7c
   27484:	ldr	r5, [sp, #48]	; 0x30
   27488:	ldr	r9, [sp, #44]	; 0x2c
   2748c:	ldr	r7, [sp, #40]	; 0x28
   27490:	mov	r8, sl
   27494:	ldr	sl, [sp, #32]
   27498:	b	274d0 <__assert_fail@plt+0x15dd0>
   2749c:	mov	r0, #0
   274a0:	ldr	r4, [sp, #136]	; 0x88
   274a4:	ldr	r9, [sp, #44]	; 0x2c
   274a8:	ldr	r7, [sp, #40]	; 0x28
   274ac:	ldr	sl, [sp, #32]
   274b0:	str	r0, [r5]
   274b4:	str	r0, [r5, #4]
   274b8:	str	r0, [r5, #8]
   274bc:	ldr	r5, [sp, #48]	; 0x30
   274c0:	ldr	r0, [sp, #164]	; 0xa4
   274c4:	add	r8, sp, #168	; 0xa8
   274c8:	add	r0, r0, #1
   274cc:	str	r0, [sp, #164]	; 0xa4
   274d0:	ldr	r0, [sp, #104]	; 0x68
   274d4:	ldr	r1, [sp, #100]	; 0x64
   274d8:	ldr	r0, [r0, #12]
   274dc:	ldr	r1, [r0, r1, lsl #2]
   274e0:	mov	r0, r6
   274e4:	bl	221e8 <__assert_fail@plt+0x10ae8>
   274e8:	cmp	r0, #0
   274ec:	beq	2828c <__assert_fail@plt+0x16b8c>
   274f0:	ldr	r1, [sp, #60]	; 0x3c
   274f4:	ldr	r2, [sp, #56]	; 0x38
   274f8:	ldr	r3, [sp, #52]	; 0x34
   274fc:	ldr	ip, [sp, #36]	; 0x24
   27500:	mov	lr, r8
   27504:	mov	r6, r9
   27508:	str	r9, [sp, #160]	; 0xa0
   2750c:	ldr	r8, [sp, #28]
   27510:	str	sl, [sp, #144]	; 0x90
   27514:	str	r7, [sp, #140]	; 0x8c
   27518:	orr	r0, r2, r1
   2751c:	str	ip, [sp, #152]	; 0x98
   27520:	str	r2, [sp, #156]	; 0x9c
   27524:	str	r1, [sp, #120]	; 0x78
   27528:	orr	r0, r0, r3
   2752c:	orr	r0, r0, r5
   27530:	orr	r0, r0, r9
   27534:	ldr	r9, [sp, #24]
   27538:	orr	r0, r0, r7
   2753c:	orr	r0, r0, ip
   27540:	orrs	r0, r0, sl
   27544:	mov	r0, r3
   27548:	mov	r3, r5
   2754c:	str	r0, [sp, #132]	; 0x84
   27550:	bne	271b4 <__assert_fail@plt+0x15ab4>
   27554:	str	sl, [sp, #144]	; 0x90
   27558:	str	ip, [sp, #152]	; 0x98
   2755c:	str	r7, [sp, #140]	; 0x8c
   27560:	str	r6, [sp, #160]	; 0xa0
   27564:	mov	r3, r5
   27568:	str	r0, [sp, #132]	; 0x84
   2756c:	str	r2, [sp, #156]	; 0x9c
   27570:	str	r1, [sp, #120]	; 0x78
   27574:	ldr	r0, [sp, #144]	; 0x90
   27578:	ldr	r8, [sp, #96]	; 0x60
   2757c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   27580:	ldr	r0, [sp, #152]	; 0x98
   27584:	str	r0, [fp, #-1056]	; 0xfffffbe0
   27588:	ldr	r0, [sp, #140]	; 0x8c
   2758c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   27590:	ldr	r0, [sp, #160]	; 0xa0
   27594:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27598:	ldr	r0, [sp, #132]	; 0x84
   2759c:	str	r3, [fp, #-1068]	; 0xfffffbd4
   275a0:	str	r0, [fp, #-1072]	; 0xfffffbd0
   275a4:	ldr	r0, [sp, #156]	; 0x9c
   275a8:	b	27998 <__assert_fail@plt+0x16298>
   275ac:	ldr	r8, [sp, #96]	; 0x60
   275b0:	mov	r4, #0
   275b4:	ldr	r0, [sp, #164]	; 0xa4
   275b8:	ldr	r1, [sp, #100]	; 0x64
   275bc:	cmp	r4, r0
   275c0:	bne	26cc0 <__assert_fail@plt+0x155c0>
   275c4:	b	279b4 <__assert_fail@plt+0x162b4>
   275c8:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   275cc:	sub	lr, fp, #6144	; 0x1800
   275d0:	ldr	ip, [sp, #164]	; 0xa4
   275d4:	ldr	sl, [sp, #132]	; 0x84
   275d8:	str	r0, [sp, #48]	; 0x30
   275dc:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   275e0:	str	r0, [sp, #44]	; 0x2c
   275e4:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   275e8:	str	r0, [sp, #40]	; 0x28
   275ec:	sub	r0, lr, #104	; 0x68
   275f0:	mov	lr, r1
   275f4:	str	r0, [sp, #128]	; 0x80
   275f8:	ldr	r0, [sp, #156]	; 0x9c
   275fc:	b	27638 <__assert_fail@plt+0x15f38>
   27600:	ldr	r4, [sp, #136]	; 0x88
   27604:	ldr	ip, [sp, #164]	; 0xa4
   27608:	ldr	r8, [sp, #96]	; 0x60
   2760c:	ldr	r0, [sp, #156]	; 0x9c
   27610:	ldr	sl, [sp, #132]	; 0x84
   27614:	ldr	lr, [sp, #124]	; 0x7c
   27618:	ldr	r7, [sp, #116]	; 0x74
   2761c:	ldr	r1, [sp, #128]	; 0x80
   27620:	add	r4, r4, #1
   27624:	cmp	r4, ip
   27628:	add	r7, r7, #32
   2762c:	add	r1, r1, #12
   27630:	str	r1, [sp, #128]	; 0x80
   27634:	bge	27960 <__assert_fail@plt+0x16260>
   27638:	add	r1, sp, #168	; 0xa8
   2763c:	str	r4, [sp, #136]	; 0x88
   27640:	str	lr, [sp, #124]	; 0x7c
   27644:	str	ip, [sp, #164]	; 0xa4
   27648:	ldr	ip, [sp, #160]	; 0xa0
   2764c:	str	sl, [sp, #132]	; 0x84
   27650:	str	r7, [sp, #116]	; 0x74
   27654:	ldr	r3, [r7]
   27658:	str	r0, [sp, #156]	; 0x9c
   2765c:	add	r8, r1, r4, lsl #5
   27660:	ldr	r4, [r7, #-28]	; 0xffffffe4
   27664:	ldr	r7, [sp, #140]	; 0x8c
   27668:	ldr	r5, [r8, #4]
   2766c:	ldr	r1, [r8, #8]
   27670:	ldr	r2, [r8, #12]
   27674:	ldr	r9, [r8, #16]
   27678:	str	r4, [sp, #108]	; 0x6c
   2767c:	and	r4, r4, lr
   27680:	ldr	lr, [sp, #148]	; 0x94
   27684:	str	r4, [sp, #72]	; 0x48
   27688:	and	r6, r5, r0
   2768c:	str	r1, [sp, #80]	; 0x50
   27690:	and	r1, r1, sl
   27694:	ldr	sl, [r8, #20]
   27698:	str	r9, [sp, #84]	; 0x54
   2769c:	str	r5, [sp, #112]	; 0x70
   276a0:	str	r2, [sp, #88]	; 0x58
   276a4:	orr	r0, r6, r4
   276a8:	str	r1, [sp, #76]	; 0x4c
   276ac:	str	r6, [sp, #68]	; 0x44
   276b0:	ldr	r6, [sp, #152]	; 0x98
   276b4:	orr	r0, r0, r1
   276b8:	and	r1, r2, lr
   276bc:	str	r1, [sp, #64]	; 0x40
   276c0:	orr	r0, r0, r1
   276c4:	and	r1, r9, ip
   276c8:	ldr	r9, [sp, #144]	; 0x90
   276cc:	and	r4, sl, r7
   276d0:	orr	r0, r0, r1
   276d4:	str	r1, [sp, #60]	; 0x3c
   276d8:	str	r4, [sp, #56]	; 0x38
   276dc:	orr	r0, r0, r4
   276e0:	ldr	r4, [r8, #24]
   276e4:	and	r5, r4, r6
   276e8:	str	r5, [sp, #52]	; 0x34
   276ec:	orr	r0, r0, r5
   276f0:	and	r5, r3, r9
   276f4:	orrs	r0, r0, r5
   276f8:	beq	27600 <__assert_fail@plt+0x15f00>
   276fc:	ldr	r0, [sp, #124]	; 0x7c
   27700:	ldr	r1, [sp, #108]	; 0x6c
   27704:	ldr	r2, [sp, #156]	; 0x9c
   27708:	str	r5, [sp, #20]
   2770c:	ldr	r5, [sp, #132]	; 0x84
   27710:	ldr	ip, [sp, #84]	; 0x54
   27714:	str	r3, [sp, #92]	; 0x5c
   27718:	ldr	r3, [sp, #108]	; 0x6c
   2771c:	bic	r0, r0, r1
   27720:	ldr	r1, [sp, #88]	; 0x58
   27724:	str	r0, [sp, #120]	; 0x78
   27728:	ldr	r0, [sp, #112]	; 0x70
   2772c:	bic	r0, r2, r0
   27730:	ldr	r2, [sp, #80]	; 0x50
   27734:	str	r0, [sp, #48]	; 0x30
   27738:	bic	r0, r5, r2
   2773c:	bic	r2, r2, r5
   27740:	ldr	r5, [sp, #156]	; 0x9c
   27744:	str	r0, [sp, #44]	; 0x2c
   27748:	bic	r0, lr, r1
   2774c:	str	r2, [sp, #156]	; 0x9c
   27750:	str	r0, [sp, #40]	; 0x28
   27754:	ldr	r0, [sp, #160]	; 0xa0
   27758:	bic	r0, r0, ip
   2775c:	str	r0, [sp, #32]
   27760:	bic	r0, r7, sl
   27764:	str	r0, [sp, #28]
   27768:	bic	r0, r6, r4
   2776c:	bic	r4, r4, r6
   27770:	str	r0, [sp, #24]
   27774:	ldr	r0, [sp, #92]	; 0x5c
   27778:	bic	r0, r9, r0
   2777c:	str	r0, [sp, #36]	; 0x24
   27780:	ldr	r0, [sp, #124]	; 0x7c
   27784:	bic	r0, r3, r0
   27788:	ldr	r3, [sp, #112]	; 0x70
   2778c:	bic	r3, r3, r5
   27790:	orr	r5, r3, r0
   27794:	str	r3, [sp, #132]	; 0x84
   27798:	orr	r3, r5, r2
   2779c:	bic	r5, r1, lr
   277a0:	ldr	r1, [sp, #160]	; 0xa0
   277a4:	orr	r2, r3, r5
   277a8:	bic	r3, ip, r1
   277ac:	bic	r1, sl, r7
   277b0:	orr	r2, r2, r3
   277b4:	orr	r7, r2, r1
   277b8:	orr	r2, r7, r4
   277bc:	ldr	r7, [sp, #92]	; 0x5c
   277c0:	bic	r7, r7, r9
   277c4:	orrs	r2, r2, r7
   277c8:	beq	27898 <__assert_fail@plt+0x16198>
   277cc:	ldr	r2, [sp, #164]	; 0xa4
   277d0:	ldr	r6, [sp, #132]	; 0x84
   277d4:	add	sl, sp, #168	; 0xa8
   277d8:	sub	lr, fp, #6144	; 0x1800
   277dc:	str	r0, [sl, r2, lsl #5]
   277e0:	add	r0, sl, r2, lsl #5
   277e4:	str	r6, [r0, #4]
   277e8:	ldr	r6, [sp, #156]	; 0x9c
   277ec:	str	r6, [r0, #8]
   277f0:	str	r5, [r0, #12]
   277f4:	str	r3, [r0, #16]
   277f8:	add	r0, r0, #20
   277fc:	stm	r0, {r1, r4, r7}
   27800:	ldr	r0, [sp, #116]	; 0x74
   27804:	ldr	r1, [sp, #72]	; 0x48
   27808:	ldr	r7, [sp, #128]	; 0x80
   2780c:	str	r1, [r0, #-28]	; 0xffffffe4
   27810:	ldr	r1, [sp, #68]	; 0x44
   27814:	str	r1, [r8, #4]
   27818:	ldr	r1, [sp, #76]	; 0x4c
   2781c:	str	r1, [r8, #8]
   27820:	ldr	r1, [sp, #64]	; 0x40
   27824:	str	r1, [r8, #12]
   27828:	ldr	r1, [sp, #60]	; 0x3c
   2782c:	str	r1, [r8, #16]
   27830:	ldr	r1, [sp, #56]	; 0x38
   27834:	str	r1, [r8, #20]
   27838:	ldr	r1, [sp, #52]	; 0x34
   2783c:	str	r1, [r8, #24]
   27840:	ldr	r1, [sp, #20]
   27844:	str	r1, [r0]
   27848:	add	r0, r2, r2, lsl #1
   2784c:	sub	r1, lr, #104	; 0x68
   27850:	add	r6, r1, r0, lsl #2
   27854:	ldr	r0, [r7, #4]
   27858:	mov	r4, r6
   2785c:	str	r0, [r4, #4]!
   27860:	ldr	r5, [r7, #4]
   27864:	cmp	r5, #1
   27868:	blt	278b0 <__assert_fail@plt+0x161b0>
   2786c:	str	r0, [r6]
   27870:	lsl	r0, r0, #2
   27874:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   27878:	ldr	r9, [sp, #36]	; 0x24
   2787c:	cmp	r0, #0
   27880:	str	r0, [r6, #8]
   27884:	beq	282cc <__assert_fail@plt+0x16bcc>
   27888:	ldr	r1, [r7, #8]
   2788c:	lsl	r2, r5, #2
   27890:	bl	11448 <memcpy@plt>
   27894:	b	278c4 <__assert_fail@plt+0x161c4>
   27898:	ldr	r8, [sp, #96]	; 0x60
   2789c:	ldr	r5, [sp, #100]	; 0x64
   278a0:	ldr	r4, [sp, #136]	; 0x88
   278a4:	ldr	r7, [sp, #128]	; 0x80
   278a8:	ldr	r9, [sp, #36]	; 0x24
   278ac:	b	278dc <__assert_fail@plt+0x161dc>
   278b0:	ldr	r9, [sp, #36]	; 0x24
   278b4:	mov	r0, #0
   278b8:	str	r0, [r6]
   278bc:	str	r0, [r6, #4]
   278c0:	str	r0, [r6, #8]
   278c4:	ldr	r0, [sp, #164]	; 0xa4
   278c8:	ldr	r8, [sp, #96]	; 0x60
   278cc:	ldr	r5, [sp, #100]	; 0x64
   278d0:	ldr	r4, [sp, #136]	; 0x88
   278d4:	add	r0, r0, #1
   278d8:	str	r0, [sp, #164]	; 0xa4
   278dc:	ldr	r0, [sp, #104]	; 0x68
   278e0:	ldr	r0, [r0, #12]
   278e4:	ldr	r1, [r0, r5, lsl #2]
   278e8:	mov	r0, r7
   278ec:	bl	221e8 <__assert_fail@plt+0x10ae8>
   278f0:	cmp	r0, #0
   278f4:	beq	28250 <__assert_fail@plt+0x16b50>
   278f8:	ldr	lr, [sp, #120]	; 0x78
   278fc:	ldr	r2, [sp, #48]	; 0x30
   27900:	ldr	sl, [sp, #44]	; 0x2c
   27904:	ldr	r5, [sp, #40]	; 0x28
   27908:	ldr	r7, [sp, #32]
   2790c:	ldr	r6, [sp, #28]
   27910:	ldr	r1, [sp, #24]
   27914:	ldr	ip, [sp, #164]	; 0xa4
   27918:	str	r9, [sp, #144]	; 0x90
   2791c:	orr	r0, r2, lr
   27920:	str	r1, [sp, #152]	; 0x98
   27924:	str	r6, [sp, #140]	; 0x8c
   27928:	str	r7, [sp, #160]	; 0xa0
   2792c:	str	r5, [sp, #148]	; 0x94
   27930:	orr	r0, r0, sl
   27934:	orr	r0, r0, r5
   27938:	orr	r0, r0, r7
   2793c:	orr	r0, r0, r6
   27940:	orr	r0, r0, r1
   27944:	orrs	r0, r0, r9
   27948:	mov	r0, r2
   2794c:	bne	27618 <__assert_fail@plt+0x15f18>
   27950:	str	r9, [sp, #144]	; 0x90
   27954:	str	r1, [sp, #152]	; 0x98
   27958:	str	r6, [sp, #140]	; 0x8c
   2795c:	str	r7, [sp, #160]	; 0xa0
   27960:	ldr	r0, [sp, #144]	; 0x90
   27964:	str	ip, [sp, #164]	; 0xa4
   27968:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2796c:	ldr	r0, [sp, #152]	; 0x98
   27970:	str	r0, [fp, #-1056]	; 0xfffffbe0
   27974:	ldr	r0, [sp, #140]	; 0x8c
   27978:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2797c:	ldr	r0, [sp, #160]	; 0xa0
   27980:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27984:	ldr	r0, [sp, #40]	; 0x28
   27988:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2798c:	ldr	r0, [sp, #44]	; 0x2c
   27990:	str	r0, [fp, #-1072]	; 0xfffffbd0
   27994:	ldr	r0, [sp, #48]	; 0x30
   27998:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2799c:	ldr	r0, [sp, #120]	; 0x78
   279a0:	str	r0, [fp, #-1080]	; 0xfffffbc8
   279a4:	ldr	r0, [sp, #164]	; 0xa4
   279a8:	ldr	r1, [sp, #100]	; 0x64
   279ac:	cmp	r4, r0
   279b0:	bne	26cc0 <__assert_fail@plt+0x155c0>
   279b4:	sub	lr, fp, #1024	; 0x400
   279b8:	sub	r7, lr, #56	; 0x38
   279bc:	sub	lr, fp, #6144	; 0x1800
   279c0:	mov	r0, r7
   279c4:	mov	r8, r7
   279c8:	sub	r2, lr, #104	; 0x68
   279cc:	vld1.32	{d16-d17}, [r0]!
   279d0:	vld1.64	{d18-d19}, [r0]
   279d4:	add	r0, sp, #168	; 0xa8
   279d8:	add	r0, r0, r4, lsl #5
   279dc:	vst1.32	{d16-d17}, [r0]!
   279e0:	vst1.32	{d18-d19}, [r0]
   279e4:	ldr	r0, [sp, #104]	; 0x68
   279e8:	ldr	r0, [r0, #12]
   279ec:	ldr	r7, [r0, r1, lsl #2]
   279f0:	add	r0, r4, r4, lsl #1
   279f4:	mov	r1, #1
   279f8:	add	r5, r2, r0, lsl #2
   279fc:	str	r1, [r2, r0, lsl #2]
   27a00:	mov	r0, #4
   27a04:	mov	r6, r5
   27a08:	str	r1, [r6, #4]!
   27a0c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   27a10:	cmp	r0, #0
   27a14:	str	r0, [r5, #8]
   27a18:	beq	2839c <__assert_fail@plt+0x16c9c>
   27a1c:	str	r7, [r0]
   27a20:	mov	r0, r8
   27a24:	vst1.64	{d8-d9}, [r0]!
   27a28:	vst1.64	{d8-d9}, [r0]
   27a2c:	add	r0, r4, #1
   27a30:	str	r0, [sp, #164]	; 0xa4
   27a34:	b	26cb8 <__assert_fail@plt+0x155b8>
   27a38:	ldr	r0, [sp, #164]	; 0xa4
   27a3c:	cmp	r0, #0
   27a40:	ble	283bc <__assert_fail@plt+0x16cbc>
   27a44:	ldr	r0, [sp, #164]	; 0xa4
   27a48:	mov	r4, #0
   27a4c:	str	r4, [fp, #-3136]	; 0xfffff3c0
   27a50:	add	r0, r0, #1
   27a54:	str	r0, [fp, #-3140]	; 0xfffff3bc
   27a58:	lsl	r0, r0, #2
   27a5c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   27a60:	cmp	r0, #0
   27a64:	str	r0, [fp, #-3132]	; 0xfffff3c4
   27a68:	moveq	r4, #12
   27a6c:	cmp	r0, #0
   27a70:	str	r4, [fp, #-56]	; 0xffffffc8
   27a74:	beq	283f0 <__assert_fail@plt+0x16cf0>
   27a78:	vmov.i32	q8, #0	; 0x00000000
   27a7c:	sub	lr, fp, #3072	; 0xc00
   27a80:	mov	r1, #0
   27a84:	mov	r7, #0
   27a88:	mov	r2, #0
   27a8c:	mov	r6, #0
   27a90:	mov	r5, #0
   27a94:	mov	r9, #0
   27a98:	sub	r0, lr, #104	; 0x68
   27a9c:	sub	lr, fp, #3072	; 0xc00
   27aa0:	vst1.64	{d16-d17}, [r0]!
   27aa4:	vst1.64	{d16-d17}, [r0]
   27aa8:	sub	r0, lr, #56	; 0x38
   27aac:	str	r0, [sp, #128]	; 0x80
   27ab0:	mov	r0, #0
   27ab4:	str	r0, [sp, #148]	; 0x94
   27ab8:	mov	r0, #0
   27abc:	str	r0, [sp, #152]	; 0x98
   27ac0:	mov	r0, #0
   27ac4:	str	r0, [sp, #156]	; 0x9c
   27ac8:	mov	r0, #0
   27acc:	str	r0, [sp, #160]	; 0xa0
   27ad0:	mov	r0, #0
   27ad4:	str	r0, [sp, #132]	; 0x84
   27ad8:	b	27ba4 <__assert_fail@plt+0x164a4>
   27adc:	ldrsb	r0, [r7, #52]	; 0x34
   27ae0:	cmn	r0, #1
   27ae4:	ble	27c7c <__assert_fail@plt+0x1657c>
   27ae8:	sub	lr, fp, #3072	; 0xc00
   27aec:	sub	r0, lr, #56	; 0x38
   27af0:	sub	lr, fp, #2048	; 0x800
   27af4:	str	r7, [r0, r9, lsl #2]
   27af8:	sub	r0, lr, #56	; 0x38
   27afc:	str	r7, [r0, r9, lsl #2]
   27b00:	add	r0, sp, #168	; 0xa8
   27b04:	ldr	r3, [sp, #148]	; 0x94
   27b08:	ldr	sl, [sp, #164]	; 0xa4
   27b0c:	ldr	r8, [sp, #96]	; 0x60
   27b10:	mov	r2, r0
   27b14:	ldr	r0, [r0, r9, lsl #5]
   27b18:	orr	r5, r5, r0
   27b1c:	add	r0, r2, r9, lsl #5
   27b20:	add	r9, r9, #1
   27b24:	mov	ip, r5
   27b28:	cmp	r9, sl
   27b2c:	ldr	r2, [r0, #4]
   27b30:	ldr	lr, [r0, #8]
   27b34:	ldr	r7, [r0, #12]
   27b38:	ldr	r5, [r0, #16]
   27b3c:	ldr	r4, [r0, #20]
   27b40:	str	r2, [sp, #136]	; 0x88
   27b44:	mov	r2, r6
   27b48:	ldr	r6, [r0, #24]
   27b4c:	ldr	r0, [r0, #28]
   27b50:	orr	r3, r3, r0
   27b54:	ldr	r0, [sp, #152]	; 0x98
   27b58:	str	r3, [sp, #148]	; 0x94
   27b5c:	orr	r0, r0, r6
   27b60:	mov	r6, r2
   27b64:	ldr	r2, [sp, #144]	; 0x90
   27b68:	str	r0, [sp, #152]	; 0x98
   27b6c:	ldr	r0, [sp, #156]	; 0x9c
   27b70:	orr	r2, r2, lr
   27b74:	orr	r0, r0, r4
   27b78:	str	r0, [sp, #156]	; 0x9c
   27b7c:	ldr	r0, [sp, #160]	; 0xa0
   27b80:	orr	r0, r0, r5
   27b84:	mov	r5, ip
   27b88:	str	r0, [sp, #160]	; 0xa0
   27b8c:	ldr	r0, [sp, #140]	; 0x8c
   27b90:	orr	r0, r0, r7
   27b94:	mov	r7, r0
   27b98:	ldr	r0, [sp, #136]	; 0x88
   27b9c:	orr	r6, r6, r0
   27ba0:	beq	27d44 <__assert_fail@plt+0x16644>
   27ba4:	mov	r0, #0
   27ba8:	sub	lr, fp, #6144	; 0x1800
   27bac:	str	r2, [sp, #144]	; 0x90
   27bb0:	str	r7, [sp, #140]	; 0x8c
   27bb4:	str	r0, [fp, #-3136]	; 0xfffff3c0
   27bb8:	add	r0, r9, r9, lsl #1
   27bbc:	sub	r2, lr, #104	; 0x68
   27bc0:	add	r2, r2, r0, lsl #2
   27bc4:	mov	r7, r2
   27bc8:	ldr	r0, [r7, #4]!
   27bcc:	cmp	r0, #1
   27bd0:	blt	27c3c <__assert_fail@plt+0x1653c>
   27bd4:	mov	r4, r9
   27bd8:	add	sl, r2, #8
   27bdc:	mov	r9, #0
   27be0:	b	27bf8 <__assert_fail@plt+0x164f8>
   27be4:	ldr	r0, [r7]
   27be8:	mov	r1, #0
   27bec:	add	r9, r9, #1
   27bf0:	cmp	r9, r0
   27bf4:	bge	27c34 <__assert_fail@plt+0x16534>
   27bf8:	ldr	r2, [sl]
   27bfc:	ldr	r3, [r8, #12]
   27c00:	ldr	r2, [r2, r9, lsl #2]
   27c04:	ldr	r2, [r3, r2, lsl #2]
   27c08:	cmn	r2, #1
   27c0c:	beq	27bec <__assert_fail@plt+0x164ec>
   27c10:	ldr	r0, [r8, #24]
   27c14:	add	r1, r2, r2, lsl #1
   27c18:	sub	lr, fp, #3072	; 0xc00
   27c1c:	add	r1, r0, r1, lsl #2
   27c20:	sub	r0, lr, #68	; 0x44
   27c24:	bl	22048 <__assert_fail@plt+0x10948>
   27c28:	cmp	r0, #0
   27c2c:	beq	27be4 <__assert_fail@plt+0x164e4>
   27c30:	b	281d8 <__assert_fail@plt+0x16ad8>
   27c34:	mov	r9, r4
   27c38:	str	r1, [fp, #-56]	; 0xffffffc8
   27c3c:	sub	lr, fp, #3072	; 0xc00
   27c40:	sub	r0, fp, #56	; 0x38
   27c44:	mov	r1, r8
   27c48:	mov	r3, #0
   27c4c:	sub	r2, lr, #68	; 0x44
   27c50:	bl	22368 <__assert_fail@plt+0x10c68>
   27c54:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27c58:	mov	r7, r0
   27c5c:	sub	lr, fp, #1024	; 0x400
   27c60:	sub	r0, lr, #56	; 0x38
   27c64:	cmp	r7, #0
   27c68:	str	r7, [r0, r9, lsl #2]
   27c6c:	bne	27adc <__assert_fail@plt+0x163dc>
   27c70:	cmp	r1, #0
   27c74:	beq	27adc <__assert_fail@plt+0x163dc>
   27c78:	b	27d10 <__assert_fail@plt+0x16610>
   27c7c:	sub	lr, fp, #3072	; 0xc00
   27c80:	sub	r0, fp, #56	; 0x38
   27c84:	mov	r1, r8
   27c88:	mov	r3, #1
   27c8c:	sub	r2, lr, #68	; 0x44
   27c90:	bl	22368 <__assert_fail@plt+0x10c68>
   27c94:	sub	lr, fp, #2048	; 0x800
   27c98:	cmp	r0, #0
   27c9c:	sub	r1, lr, #56	; 0x38
   27ca0:	str	r0, [r1, r9, lsl #2]
   27ca4:	bne	27cb4 <__assert_fail@plt+0x165b4>
   27ca8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27cac:	cmp	r1, #0
   27cb0:	bne	27d10 <__assert_fail@plt+0x16610>
   27cb4:	cmp	r7, r0
   27cb8:	beq	27cd8 <__assert_fail@plt+0x165d8>
   27cbc:	ldr	r0, [r8, #92]	; 0x5c
   27cc0:	ldr	r1, [sp, #132]	; 0x84
   27cc4:	cmp	r0, #1
   27cc8:	mov	r0, #0
   27ccc:	movwgt	r0, #1
   27cd0:	orr	r1, r1, r0
   27cd4:	str	r1, [sp, #132]	; 0x84
   27cd8:	sub	lr, fp, #3072	; 0xc00
   27cdc:	sub	r0, fp, #56	; 0x38
   27ce0:	mov	r1, r8
   27ce4:	mov	r3, #2
   27ce8:	sub	r2, lr, #68	; 0x44
   27cec:	bl	22368 <__assert_fail@plt+0x10c68>
   27cf0:	sub	lr, fp, #3072	; 0xc00
   27cf4:	cmp	r0, #0
   27cf8:	sub	r1, lr, #56	; 0x38
   27cfc:	str	r0, [r1, r9, lsl #2]
   27d00:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27d04:	bne	27b00 <__assert_fail@plt+0x16400>
   27d08:	cmp	r1, #0
   27d0c:	beq	27b00 <__assert_fail@plt+0x16400>
   27d10:	ldr	r0, [sp, #148]	; 0x94
   27d14:	str	r0, [fp, #-3148]	; 0xfffff3b4
   27d18:	ldr	r0, [sp, #152]	; 0x98
   27d1c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   27d20:	ldr	r0, [sp, #156]	; 0x9c
   27d24:	str	r0, [fp, #-3156]	; 0xfffff3ac
   27d28:	ldr	r0, [sp, #160]	; 0xa0
   27d2c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   27d30:	ldr	r0, [sp, #140]	; 0x8c
   27d34:	str	r0, [fp, #-3164]	; 0xfffff3a4
   27d38:	ldr	r0, [sp, #144]	; 0x90
   27d3c:	str	r0, [fp, #-3168]	; 0xfffff3a0
   27d40:	b	2820c <__assert_fail@plt+0x16b0c>
   27d44:	ldr	r0, [sp, #148]	; 0x94
   27d48:	ldr	r8, [sp, #132]	; 0x84
   27d4c:	ldr	r4, [sp, #104]	; 0x68
   27d50:	str	r0, [fp, #-3148]	; 0xfffff3b4
   27d54:	ldr	r0, [sp, #152]	; 0x98
   27d58:	tst	r8, #1
   27d5c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   27d60:	ldr	r0, [sp, #156]	; 0x9c
   27d64:	str	r0, [fp, #-3156]	; 0xfffff3ac
   27d68:	ldr	r0, [sp, #160]	; 0xa0
   27d6c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   27d70:	mov	r0, #4
   27d74:	str	r7, [fp, #-3164]	; 0xfffff3a4
   27d78:	str	r2, [fp, #-3168]	; 0xfffff3a0
   27d7c:	str	r6, [fp, #-3172]	; 0xfffff39c
   27d80:	str	r5, [fp, #-3176]	; 0xfffff398
   27d84:	bne	283fc <__assert_fail@plt+0x16cfc>
   27d88:	mov	r1, #256	; 0x100
   27d8c:	bl	2b88c <__assert_fail@plt+0x1a18c>
   27d90:	cmp	r0, #0
   27d94:	str	r0, [r4, #44]	; 0x2c
   27d98:	beq	28214 <__assert_fail@plt+0x16b14>
   27d9c:	ldr	ip, [fp, #-3176]	; 0xfffff398
   27da0:	cmp	ip, #0
   27da4:	beq	27e24 <__assert_fail@plt+0x16724>
   27da8:	mov	r2, #0
   27dac:	mov	r3, #1
   27db0:	mov	r1, ip
   27db4:	mov	r7, #0
   27db8:	tst	r1, #1
   27dbc:	bne	27ddc <__assert_fail@plt+0x166dc>
   27dc0:	lsr	r6, r1, #1
   27dc4:	cmp	r2, r1, lsr #1
   27dc8:	add	r7, r7, #1
   27dcc:	lsl	r3, r3, #1
   27dd0:	mov	r1, r6
   27dd4:	bne	27db8 <__assert_fail@plt+0x166b8>
   27dd8:	b	27e24 <__assert_fail@plt+0x16724>
   27ddc:	mov	r6, #0
   27de0:	add	r4, sp, #168	; 0xa8
   27de4:	ldr	r5, [r4, r6, lsl #3]
   27de8:	add	r6, r6, #4
   27dec:	tst	r5, r3
   27df0:	beq	27de4 <__assert_fail@plt+0x166e4>
   27df4:	ldr	r5, [sp]
   27df8:	sub	lr, fp, #2048	; 0x800
   27dfc:	ldr	r5, [r5]
   27e00:	tst	r5, r3
   27e04:	sub	r5, lr, #56	; 0x38
   27e08:	sub	lr, fp, #1024	; 0x400
   27e0c:	sub	r4, lr, #56	; 0x38
   27e10:	moveq	r5, r4
   27e14:	add	r6, r5, r6
   27e18:	ldr	r6, [r6, #-4]
   27e1c:	str	r6, [r0, r7, lsl #2]
   27e20:	b	27dc0 <__assert_fail@plt+0x166c0>
   27e24:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   27e28:	cmp	r2, #0
   27e2c:	beq	27eac <__assert_fail@plt+0x167ac>
   27e30:	add	r1, sp, #168	; 0xa8
   27e34:	mov	r7, #32
   27e38:	mov	r6, #1
   27e3c:	mov	r5, #0
   27e40:	add	lr, r1, #4
   27e44:	tst	r2, #1
   27e48:	bne	27e68 <__assert_fail@plt+0x16768>
   27e4c:	lsr	r1, r2, #1
   27e50:	cmp	r5, r2, lsr #1
   27e54:	add	r7, r7, #1
   27e58:	lsl	r6, r6, #1
   27e5c:	mov	r2, r1
   27e60:	bne	27e44 <__assert_fail@plt+0x16744>
   27e64:	b	27eac <__assert_fail@plt+0x167ac>
   27e68:	mov	r1, #0
   27e6c:	ldr	r4, [lr, r1, lsl #3]
   27e70:	add	r1, r1, #4
   27e74:	tst	r4, r6
   27e78:	beq	27e6c <__assert_fail@plt+0x1676c>
   27e7c:	ldr	r3, [sp, #96]	; 0x60
   27e80:	ldr	r4, [r3, #100]	; 0x64
   27e84:	sub	r3, fp, #2048	; 0x800
   27e88:	tst	r4, r6
   27e8c:	sub	r4, r3, #56	; 0x38
   27e90:	sub	r3, fp, #1024	; 0x400
   27e94:	sub	r3, r3, #56	; 0x38
   27e98:	moveq	r4, r3
   27e9c:	add	r1, r4, r1
   27ea0:	ldr	r1, [r1, #-4]
   27ea4:	str	r1, [r0, r7, lsl #2]
   27ea8:	b	27e4c <__assert_fail@plt+0x1674c>
   27eac:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   27eb0:	cmp	r2, #0
   27eb4:	beq	27f34 <__assert_fail@plt+0x16834>
   27eb8:	add	r1, sp, #168	; 0xa8
   27ebc:	mov	r7, #64	; 0x40
   27ec0:	mov	r6, #1
   27ec4:	mov	r5, #0
   27ec8:	add	lr, r1, #8
   27ecc:	tst	r2, #1
   27ed0:	bne	27ef0 <__assert_fail@plt+0x167f0>
   27ed4:	lsr	r1, r2, #1
   27ed8:	cmp	r5, r2, lsr #1
   27edc:	add	r7, r7, #1
   27ee0:	lsl	r6, r6, #1
   27ee4:	mov	r2, r1
   27ee8:	bne	27ecc <__assert_fail@plt+0x167cc>
   27eec:	b	27f34 <__assert_fail@plt+0x16834>
   27ef0:	mov	r1, #0
   27ef4:	ldr	r4, [lr, r1, lsl #3]
   27ef8:	add	r1, r1, #4
   27efc:	tst	r4, r6
   27f00:	beq	27ef4 <__assert_fail@plt+0x167f4>
   27f04:	ldr	r3, [sp, #96]	; 0x60
   27f08:	ldr	r4, [r3, #104]	; 0x68
   27f0c:	sub	r3, fp, #2048	; 0x800
   27f10:	tst	r4, r6
   27f14:	sub	r4, r3, #56	; 0x38
   27f18:	sub	r3, fp, #1024	; 0x400
   27f1c:	sub	r3, r3, #56	; 0x38
   27f20:	moveq	r4, r3
   27f24:	add	r1, r4, r1
   27f28:	ldr	r1, [r1, #-4]
   27f2c:	str	r1, [r0, r7, lsl #2]
   27f30:	b	27ed4 <__assert_fail@plt+0x167d4>
   27f34:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   27f38:	cmp	r2, #0
   27f3c:	beq	27fbc <__assert_fail@plt+0x168bc>
   27f40:	add	r1, sp, #168	; 0xa8
   27f44:	mov	r7, #96	; 0x60
   27f48:	mov	r6, #1
   27f4c:	mov	r5, #0
   27f50:	add	lr, r1, #12
   27f54:	tst	r2, #1
   27f58:	bne	27f78 <__assert_fail@plt+0x16878>
   27f5c:	lsr	r1, r2, #1
   27f60:	cmp	r5, r2, lsr #1
   27f64:	add	r7, r7, #1
   27f68:	lsl	r6, r6, #1
   27f6c:	mov	r2, r1
   27f70:	bne	27f54 <__assert_fail@plt+0x16854>
   27f74:	b	27fbc <__assert_fail@plt+0x168bc>
   27f78:	mov	r1, #0
   27f7c:	ldr	r4, [lr, r1, lsl #3]
   27f80:	add	r1, r1, #4
   27f84:	tst	r4, r6
   27f88:	beq	27f7c <__assert_fail@plt+0x1687c>
   27f8c:	ldr	r3, [sp, #96]	; 0x60
   27f90:	ldr	r4, [r3, #108]	; 0x6c
   27f94:	sub	r3, fp, #2048	; 0x800
   27f98:	tst	r4, r6
   27f9c:	sub	r4, r3, #56	; 0x38
   27fa0:	sub	r3, fp, #1024	; 0x400
   27fa4:	sub	r3, r3, #56	; 0x38
   27fa8:	moveq	r4, r3
   27fac:	add	r1, r4, r1
   27fb0:	ldr	r1, [r1, #-4]
   27fb4:	str	r1, [r0, r7, lsl #2]
   27fb8:	b	27f5c <__assert_fail@plt+0x1685c>
   27fbc:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   27fc0:	cmp	r2, #0
   27fc4:	beq	28044 <__assert_fail@plt+0x16944>
   27fc8:	add	r1, sp, #168	; 0xa8
   27fcc:	mov	r7, #128	; 0x80
   27fd0:	mov	r6, #1
   27fd4:	mov	r5, #0
   27fd8:	add	lr, r1, #16
   27fdc:	tst	r2, #1
   27fe0:	bne	28000 <__assert_fail@plt+0x16900>
   27fe4:	lsr	r1, r2, #1
   27fe8:	cmp	r5, r2, lsr #1
   27fec:	add	r7, r7, #1
   27ff0:	lsl	r6, r6, #1
   27ff4:	mov	r2, r1
   27ff8:	bne	27fdc <__assert_fail@plt+0x168dc>
   27ffc:	b	28044 <__assert_fail@plt+0x16944>
   28000:	mov	r1, #0
   28004:	ldr	r4, [lr, r1, lsl #3]
   28008:	add	r1, r1, #4
   2800c:	tst	r4, r6
   28010:	beq	28004 <__assert_fail@plt+0x16904>
   28014:	ldr	r3, [sp, #4]
   28018:	ldr	r4, [r3]
   2801c:	sub	r3, fp, #2048	; 0x800
   28020:	tst	r4, r6
   28024:	sub	r4, r3, #56	; 0x38
   28028:	sub	r3, fp, #1024	; 0x400
   2802c:	sub	r3, r3, #56	; 0x38
   28030:	moveq	r4, r3
   28034:	add	r1, r4, r1
   28038:	ldr	r1, [r1, #-4]
   2803c:	str	r1, [r0, r7, lsl #2]
   28040:	b	27fe4 <__assert_fail@plt+0x168e4>
   28044:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   28048:	cmp	r2, #0
   2804c:	beq	280cc <__assert_fail@plt+0x169cc>
   28050:	add	r1, sp, #168	; 0xa8
   28054:	mov	r7, #160	; 0xa0
   28058:	mov	r6, #1
   2805c:	mov	r5, #0
   28060:	add	lr, r1, #20
   28064:	tst	r2, #1
   28068:	bne	28088 <__assert_fail@plt+0x16988>
   2806c:	lsr	r1, r2, #1
   28070:	cmp	r5, r2, lsr #1
   28074:	add	r7, r7, #1
   28078:	lsl	r6, r6, #1
   2807c:	mov	r2, r1
   28080:	bne	28064 <__assert_fail@plt+0x16964>
   28084:	b	280cc <__assert_fail@plt+0x169cc>
   28088:	mov	r1, #0
   2808c:	ldr	r4, [lr, r1, lsl #3]
   28090:	add	r1, r1, #4
   28094:	tst	r4, r6
   28098:	beq	2808c <__assert_fail@plt+0x1698c>
   2809c:	ldr	r3, [sp, #96]	; 0x60
   280a0:	ldr	r4, [r3, #116]	; 0x74
   280a4:	sub	r3, fp, #2048	; 0x800
   280a8:	tst	r4, r6
   280ac:	sub	r4, r3, #56	; 0x38
   280b0:	sub	r3, fp, #1024	; 0x400
   280b4:	sub	r3, r3, #56	; 0x38
   280b8:	moveq	r4, r3
   280bc:	add	r1, r4, r1
   280c0:	ldr	r1, [r1, #-4]
   280c4:	str	r1, [r0, r7, lsl #2]
   280c8:	b	2806c <__assert_fail@plt+0x1696c>
   280cc:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   280d0:	cmp	r2, #0
   280d4:	beq	28154 <__assert_fail@plt+0x16a54>
   280d8:	add	r1, sp, #168	; 0xa8
   280dc:	mov	r7, #192	; 0xc0
   280e0:	mov	r6, #1
   280e4:	mov	r5, #0
   280e8:	add	lr, r1, #24
   280ec:	tst	r2, #1
   280f0:	bne	28110 <__assert_fail@plt+0x16a10>
   280f4:	lsr	r1, r2, #1
   280f8:	cmp	r5, r2, lsr #1
   280fc:	add	r7, r7, #1
   28100:	lsl	r6, r6, #1
   28104:	mov	r2, r1
   28108:	bne	280ec <__assert_fail@plt+0x169ec>
   2810c:	b	28154 <__assert_fail@plt+0x16a54>
   28110:	mov	r1, #0
   28114:	ldr	r4, [lr, r1, lsl #3]
   28118:	add	r1, r1, #4
   2811c:	tst	r4, r6
   28120:	beq	28114 <__assert_fail@plt+0x16a14>
   28124:	ldr	r3, [sp, #96]	; 0x60
   28128:	ldr	r4, [r3, #120]	; 0x78
   2812c:	sub	r3, fp, #2048	; 0x800
   28130:	tst	r4, r6
   28134:	sub	r4, r3, #56	; 0x38
   28138:	sub	r3, fp, #1024	; 0x400
   2813c:	sub	r3, r3, #56	; 0x38
   28140:	moveq	r4, r3
   28144:	add	r1, r4, r1
   28148:	ldr	r1, [r1, #-4]
   2814c:	str	r1, [r0, r7, lsl #2]
   28150:	b	280f4 <__assert_fail@plt+0x169f4>
   28154:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   28158:	cmp	r2, #0
   2815c:	beq	288b4 <__assert_fail@plt+0x171b4>
   28160:	mov	r3, #224	; 0xe0
   28164:	mov	r7, #1
   28168:	mov	r6, #0
   2816c:	tst	r2, #1
   28170:	bne	28190 <__assert_fail@plt+0x16a90>
   28174:	lsr	r1, r2, #1
   28178:	cmp	r6, r2, lsr #1
   2817c:	add	r3, r3, #1
   28180:	lsl	r7, r7, #1
   28184:	mov	r2, r1
   28188:	bne	2816c <__assert_fail@plt+0x16a6c>
   2818c:	b	288b4 <__assert_fail@plt+0x171b4>
   28190:	ldr	r4, [sp, #12]
   28194:	mov	r1, #0
   28198:	ldr	r5, [r4, r1, lsl #3]
   2819c:	add	r1, r1, #4
   281a0:	tst	r5, r7
   281a4:	beq	28198 <__assert_fail@plt+0x16a98>
   281a8:	ldr	r5, [sp, #96]	; 0x60
   281ac:	sub	lr, fp, #2048	; 0x800
   281b0:	ldr	r5, [r5, #124]	; 0x7c
   281b4:	tst	r5, r7
   281b8:	sub	r5, lr, #56	; 0x38
   281bc:	sub	lr, fp, #1024	; 0x400
   281c0:	sub	r4, lr, #56	; 0x38
   281c4:	moveq	r5, r4
   281c8:	add	r1, r5, r1
   281cc:	ldr	r1, [r1, #-4]
   281d0:	str	r1, [r0, r3, lsl #2]
   281d4:	b	28174 <__assert_fail@plt+0x16a74>
   281d8:	ldr	r1, [sp, #148]	; 0x94
   281dc:	str	r0, [fp, #-56]	; 0xffffffc8
   281e0:	str	r1, [fp, #-3148]	; 0xfffff3b4
   281e4:	ldr	r1, [sp, #152]	; 0x98
   281e8:	str	r1, [fp, #-3152]	; 0xfffff3b0
   281ec:	ldr	r1, [sp, #156]	; 0x9c
   281f0:	str	r1, [fp, #-3156]	; 0xfffff3ac
   281f4:	ldr	r1, [sp, #160]	; 0xa0
   281f8:	str	r1, [fp, #-3160]	; 0xfffff3a8
   281fc:	ldr	r1, [sp, #140]	; 0x8c
   28200:	str	r1, [fp, #-3164]	; 0xfffff3a4
   28204:	ldr	r1, [sp, #144]	; 0x90
   28208:	str	r1, [fp, #-3168]	; 0xfffff3a0
   2820c:	str	r6, [fp, #-3172]	; 0xfffff39c
   28210:	str	r5, [fp, #-3176]	; 0xfffff398
   28214:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   28218:	bl	13ddc <__assert_fail@plt+0x26dc>
   2821c:	ldr	r0, [sp, #164]	; 0xa4
   28220:	cmp	r0, #1
   28224:	blt	28388 <__assert_fail@plt+0x16c88>
   28228:	sub	lr, fp, #6144	; 0x1800
   2822c:	sub	r0, lr, #104	; 0x68
   28230:	add	r4, r0, #8
   28234:	ldr	r0, [r4], #12
   28238:	bl	13ddc <__assert_fail@plt+0x26dc>
   2823c:	ldr	r0, [sp, #164]	; 0xa4
   28240:	subs	r0, r0, #1
   28244:	str	r0, [sp, #164]	; 0xa4
   28248:	bne	28234 <__assert_fail@plt+0x16b34>
   2824c:	b	28388 <__assert_fail@plt+0x16c88>
   28250:	ldr	r0, [sp, #24]
   28254:	str	r9, [fp, #-1052]	; 0xfffffbe4
   28258:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2825c:	ldr	r0, [sp, #28]
   28260:	str	r0, [fp, #-1060]	; 0xfffffbdc
   28264:	ldr	r0, [sp, #32]
   28268:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2826c:	ldr	r0, [sp, #40]	; 0x28
   28270:	str	r0, [fp, #-1068]	; 0xfffffbd4
   28274:	ldr	r0, [sp, #44]	; 0x2c
   28278:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2827c:	ldr	r0, [sp, #48]	; 0x30
   28280:	str	r0, [fp, #-1076]	; 0xfffffbcc
   28284:	ldr	r0, [sp, #120]	; 0x78
   28288:	b	282b8 <__assert_fail@plt+0x16bb8>
   2828c:	ldr	r0, [sp, #36]	; 0x24
   28290:	str	sl, [fp, #-1052]	; 0xfffffbe4
   28294:	str	r0, [fp, #-1056]	; 0xfffffbe0
   28298:	ldr	r0, [sp, #52]	; 0x34
   2829c:	str	r7, [fp, #-1060]	; 0xfffffbdc
   282a0:	str	r9, [fp, #-1064]	; 0xfffffbd8
   282a4:	str	r5, [fp, #-1068]	; 0xfffffbd4
   282a8:	str	r0, [fp, #-1072]	; 0xfffffbd0
   282ac:	ldr	r0, [sp, #56]	; 0x38
   282b0:	str	r0, [fp, #-1076]	; 0xfffffbcc
   282b4:	ldr	r0, [sp, #60]	; 0x3c
   282b8:	str	r0, [fp, #-1080]	; 0xfffffbc8
   282bc:	ldr	r0, [sp, #164]	; 0xa4
   282c0:	cmp	r0, #1
   282c4:	bge	28364 <__assert_fail@plt+0x16c64>
   282c8:	b	28388 <__assert_fail@plt+0x16c88>
   282cc:	ldr	r0, [sp, #24]
   282d0:	str	r9, [fp, #-1052]	; 0xfffffbe4
   282d4:	str	r0, [fp, #-1056]	; 0xfffffbe0
   282d8:	ldr	r0, [sp, #28]
   282dc:	str	r0, [fp, #-1060]	; 0xfffffbdc
   282e0:	ldr	r0, [sp, #32]
   282e4:	str	r0, [fp, #-1064]	; 0xfffffbd8
   282e8:	ldr	r0, [sp, #40]	; 0x28
   282ec:	str	r0, [fp, #-1068]	; 0xfffffbd4
   282f0:	ldr	r0, [sp, #44]	; 0x2c
   282f4:	str	r0, [fp, #-1072]	; 0xfffffbd0
   282f8:	ldr	r0, [sp, #48]	; 0x30
   282fc:	str	r0, [fp, #-1076]	; 0xfffffbcc
   28300:	ldr	r0, [sp, #120]	; 0x78
   28304:	b	28338 <__assert_fail@plt+0x16c38>
   28308:	ldr	r0, [sp, #36]	; 0x24
   2830c:	str	sl, [fp, #-1052]	; 0xfffffbe4
   28310:	str	r0, [fp, #-1056]	; 0xfffffbe0
   28314:	ldr	r0, [sp, #48]	; 0x30
   28318:	str	r7, [fp, #-1060]	; 0xfffffbdc
   2831c:	str	r9, [fp, #-1064]	; 0xfffffbd8
   28320:	str	r0, [fp, #-1068]	; 0xfffffbd4
   28324:	ldr	r0, [sp, #52]	; 0x34
   28328:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2832c:	ldr	r0, [sp, #56]	; 0x38
   28330:	str	r0, [fp, #-1076]	; 0xfffffbcc
   28334:	ldr	r0, [sp, #60]	; 0x3c
   28338:	ldr	r1, [sp, #164]	; 0xa4
   2833c:	sub	lr, fp, #6144	; 0x1800
   28340:	str	r0, [fp, #-1080]	; 0xfffffbc8
   28344:	mov	r0, #0
   28348:	sub	r2, lr, #104	; 0x68
   2834c:	str	r0, [r4]
   28350:	add	r1, r1, r1, lsl #1
   28354:	str	r0, [r2, r1, lsl #2]
   28358:	ldr	r0, [sp, #164]	; 0xa4
   2835c:	cmp	r0, #1
   28360:	blt	28388 <__assert_fail@plt+0x16c88>
   28364:	sub	lr, fp, #6144	; 0x1800
   28368:	sub	r0, lr, #104	; 0x68
   2836c:	add	r4, r0, #8
   28370:	ldr	r0, [r4], #12
   28374:	bl	13ddc <__assert_fail@plt+0x26dc>
   28378:	ldr	r0, [sp, #164]	; 0xa4
   2837c:	subs	r0, r0, #1
   28380:	str	r0, [sp, #164]	; 0xa4
   28384:	bne	28370 <__assert_fail@plt+0x16c70>
   28388:	mov	r0, #0
   2838c:	sub	sp, fp, #48	; 0x30
   28390:	vpop	{d8-d9}
   28394:	add	sp, sp, #4
   28398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2839c:	mov	r0, #0
   283a0:	str	r4, [sp, #164]	; 0xa4
   283a4:	str	r0, [r6]
   283a8:	str	r0, [r5]
   283ac:	ldr	r0, [sp, #164]	; 0xa4
   283b0:	cmp	r0, #1
   283b4:	bge	28364 <__assert_fail@plt+0x16c64>
   283b8:	b	28388 <__assert_fail@plt+0x16c88>
   283bc:	mov	r0, #0
   283c0:	bne	283e0 <__assert_fail@plt+0x16ce0>
   283c4:	mov	r0, #4
   283c8:	mov	r1, #256	; 0x100
   283cc:	bl	2b88c <__assert_fail@plt+0x1a18c>
   283d0:	ldr	r1, [sp, #104]	; 0x68
   283d4:	cmp	r0, #0
   283d8:	str	r0, [r1, #44]	; 0x2c
   283dc:	movwne	r0, #1
   283e0:	sub	sp, fp, #48	; 0x30
   283e4:	vpop	{d8-d9}
   283e8:	add	sp, sp, #4
   283ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   283f0:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   283f4:	bl	13ddc <__assert_fail@plt+0x26dc>
   283f8:	b	28228 <__assert_fail@plt+0x16b28>
   283fc:	mov	r1, #512	; 0x200
   28400:	bl	2b88c <__assert_fail@plt+0x1a18c>
   28404:	cmp	r0, #0
   28408:	str	r0, [r4, #48]	; 0x30
   2840c:	beq	28214 <__assert_fail@plt+0x16b14>
   28410:	ldr	ip, [fp, #-3176]	; 0xfffff398
   28414:	cmp	ip, #0
   28418:	beq	284a4 <__assert_fail@plt+0x16da4>
   2841c:	sub	lr, fp, #1024	; 0x400
   28420:	mov	r7, #0
   28424:	mov	r6, #1
   28428:	add	r4, sp, #168	; 0xa8
   2842c:	mov	r5, ip
   28430:	sub	r1, lr, #56	; 0x38
   28434:	sub	lr, r1, #4
   28438:	sub	r1, fp, #2048	; 0x800
   2843c:	sub	r1, r1, #56	; 0x38
   28440:	sub	r8, r1, #4
   28444:	mov	r1, #0
   28448:	tst	r5, #1
   2844c:	bne	2846c <__assert_fail@plt+0x16d6c>
   28450:	lsr	r2, r5, #1
   28454:	cmp	r7, r5, lsr #1
   28458:	add	r1, r1, #1
   2845c:	lsl	r6, r6, #1
   28460:	mov	r5, r2
   28464:	bne	28448 <__assert_fail@plt+0x16d48>
   28468:	b	284a4 <__assert_fail@plt+0x16da4>
   2846c:	mov	r3, r4
   28470:	mov	sl, lr
   28474:	mov	r9, r8
   28478:	ldr	r2, [r3], #32
   2847c:	add	sl, sl, #4
   28480:	add	r9, r9, #4
   28484:	tst	r2, r6
   28488:	beq	28478 <__assert_fail@plt+0x16d78>
   2848c:	ldr	r2, [sl]
   28490:	mov	r3, r0
   28494:	str	r2, [r3, r1, lsl #2]!
   28498:	ldr	r2, [r9]
   2849c:	str	r2, [r3, #1024]	; 0x400
   284a0:	b	28450 <__assert_fail@plt+0x16d50>
   284a4:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   284a8:	cmp	r2, #0
   284ac:	beq	28538 <__assert_fail@plt+0x16e38>
   284b0:	add	r1, sp, #168	; 0xa8
   284b4:	sub	lr, fp, #2048	; 0x800
   284b8:	mov	r5, #32
   284bc:	mov	r3, #0
   284c0:	add	r4, r1, #4
   284c4:	sub	r1, lr, #56	; 0x38
   284c8:	sub	lr, r1, #4
   284cc:	sub	r1, fp, #1024	; 0x400
   284d0:	sub	r1, r1, #56	; 0x38
   284d4:	sub	r8, r1, #4
   284d8:	mov	r1, #1
   284dc:	tst	r2, #1
   284e0:	bne	28500 <__assert_fail@plt+0x16e00>
   284e4:	lsr	r6, r2, #1
   284e8:	cmp	r3, r2, lsr #1
   284ec:	add	r5, r5, #1
   284f0:	lsl	r1, r1, #1
   284f4:	mov	r2, r6
   284f8:	bne	284dc <__assert_fail@plt+0x16ddc>
   284fc:	b	28538 <__assert_fail@plt+0x16e38>
   28500:	mov	r7, r4
   28504:	mov	r9, lr
   28508:	mov	sl, r8
   2850c:	ldr	r6, [r7], #32
   28510:	add	r9, r9, #4
   28514:	add	sl, sl, #4
   28518:	tst	r6, r1
   2851c:	beq	2850c <__assert_fail@plt+0x16e0c>
   28520:	ldr	r6, [sl]
   28524:	mov	r7, r0
   28528:	str	r6, [r7, r5, lsl #2]!
   2852c:	ldr	r6, [r9]
   28530:	str	r6, [r7, #1024]	; 0x400
   28534:	b	284e4 <__assert_fail@plt+0x16de4>
   28538:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   2853c:	cmp	r2, #0
   28540:	beq	285cc <__assert_fail@plt+0x16ecc>
   28544:	add	r1, sp, #168	; 0xa8
   28548:	sub	lr, fp, #2048	; 0x800
   2854c:	mov	r5, #64	; 0x40
   28550:	mov	r3, #0
   28554:	add	r4, r1, #8
   28558:	sub	r1, lr, #56	; 0x38
   2855c:	sub	lr, r1, #4
   28560:	sub	r1, fp, #1024	; 0x400
   28564:	sub	r1, r1, #56	; 0x38
   28568:	sub	r8, r1, #4
   2856c:	mov	r1, #1
   28570:	tst	r2, #1
   28574:	bne	28594 <__assert_fail@plt+0x16e94>
   28578:	lsr	r6, r2, #1
   2857c:	cmp	r3, r2, lsr #1
   28580:	add	r5, r5, #1
   28584:	lsl	r1, r1, #1
   28588:	mov	r2, r6
   2858c:	bne	28570 <__assert_fail@plt+0x16e70>
   28590:	b	285cc <__assert_fail@plt+0x16ecc>
   28594:	mov	r7, r4
   28598:	mov	r9, lr
   2859c:	mov	sl, r8
   285a0:	ldr	r6, [r7], #32
   285a4:	add	r9, r9, #4
   285a8:	add	sl, sl, #4
   285ac:	tst	r6, r1
   285b0:	beq	285a0 <__assert_fail@plt+0x16ea0>
   285b4:	ldr	r6, [sl]
   285b8:	mov	r7, r0
   285bc:	str	r6, [r7, r5, lsl #2]!
   285c0:	ldr	r6, [r9]
   285c4:	str	r6, [r7, #1024]	; 0x400
   285c8:	b	28578 <__assert_fail@plt+0x16e78>
   285cc:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   285d0:	cmp	r2, #0
   285d4:	beq	28660 <__assert_fail@plt+0x16f60>
   285d8:	add	r1, sp, #168	; 0xa8
   285dc:	sub	lr, fp, #2048	; 0x800
   285e0:	mov	r5, #96	; 0x60
   285e4:	mov	r3, #0
   285e8:	add	r4, r1, #12
   285ec:	sub	r1, lr, #56	; 0x38
   285f0:	sub	lr, r1, #4
   285f4:	sub	r1, fp, #1024	; 0x400
   285f8:	sub	r1, r1, #56	; 0x38
   285fc:	sub	r8, r1, #4
   28600:	mov	r1, #1
   28604:	tst	r2, #1
   28608:	bne	28628 <__assert_fail@plt+0x16f28>
   2860c:	lsr	r6, r2, #1
   28610:	cmp	r3, r2, lsr #1
   28614:	add	r5, r5, #1
   28618:	lsl	r1, r1, #1
   2861c:	mov	r2, r6
   28620:	bne	28604 <__assert_fail@plt+0x16f04>
   28624:	b	28660 <__assert_fail@plt+0x16f60>
   28628:	mov	r7, r4
   2862c:	mov	r9, lr
   28630:	mov	sl, r8
   28634:	ldr	r6, [r7], #32
   28638:	add	r9, r9, #4
   2863c:	add	sl, sl, #4
   28640:	tst	r6, r1
   28644:	beq	28634 <__assert_fail@plt+0x16f34>
   28648:	ldr	r6, [sl]
   2864c:	mov	r7, r0
   28650:	str	r6, [r7, r5, lsl #2]!
   28654:	ldr	r6, [r9]
   28658:	str	r6, [r7, #1024]	; 0x400
   2865c:	b	2860c <__assert_fail@plt+0x16f0c>
   28660:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   28664:	cmp	r2, #0
   28668:	beq	286f4 <__assert_fail@plt+0x16ff4>
   2866c:	add	r1, sp, #168	; 0xa8
   28670:	sub	lr, fp, #2048	; 0x800
   28674:	mov	r5, #128	; 0x80
   28678:	mov	r3, #0
   2867c:	add	r4, r1, #16
   28680:	sub	r1, lr, #56	; 0x38
   28684:	sub	lr, r1, #4
   28688:	sub	r1, fp, #1024	; 0x400
   2868c:	sub	r1, r1, #56	; 0x38
   28690:	sub	r8, r1, #4
   28694:	mov	r1, #1
   28698:	tst	r2, #1
   2869c:	bne	286bc <__assert_fail@plt+0x16fbc>
   286a0:	lsr	r6, r2, #1
   286a4:	cmp	r3, r2, lsr #1
   286a8:	add	r5, r5, #1
   286ac:	lsl	r1, r1, #1
   286b0:	mov	r2, r6
   286b4:	bne	28698 <__assert_fail@plt+0x16f98>
   286b8:	b	286f4 <__assert_fail@plt+0x16ff4>
   286bc:	mov	r7, r4
   286c0:	mov	r9, lr
   286c4:	mov	sl, r8
   286c8:	ldr	r6, [r7], #32
   286cc:	add	r9, r9, #4
   286d0:	add	sl, sl, #4
   286d4:	tst	r6, r1
   286d8:	beq	286c8 <__assert_fail@plt+0x16fc8>
   286dc:	ldr	r6, [sl]
   286e0:	mov	r7, r0
   286e4:	str	r6, [r7, r5, lsl #2]!
   286e8:	ldr	r6, [r9]
   286ec:	str	r6, [r7, #1024]	; 0x400
   286f0:	b	286a0 <__assert_fail@plt+0x16fa0>
   286f4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   286f8:	cmp	r2, #0
   286fc:	beq	28788 <__assert_fail@plt+0x17088>
   28700:	add	r1, sp, #168	; 0xa8
   28704:	sub	lr, fp, #2048	; 0x800
   28708:	mov	r5, #160	; 0xa0
   2870c:	mov	r3, #0
   28710:	add	r4, r1, #20
   28714:	sub	r1, lr, #56	; 0x38
   28718:	sub	lr, r1, #4
   2871c:	sub	r1, fp, #1024	; 0x400
   28720:	sub	r1, r1, #56	; 0x38
   28724:	sub	r8, r1, #4
   28728:	mov	r1, #1
   2872c:	tst	r2, #1
   28730:	bne	28750 <__assert_fail@plt+0x17050>
   28734:	lsr	r6, r2, #1
   28738:	cmp	r3, r2, lsr #1
   2873c:	add	r5, r5, #1
   28740:	lsl	r1, r1, #1
   28744:	mov	r2, r6
   28748:	bne	2872c <__assert_fail@plt+0x1702c>
   2874c:	b	28788 <__assert_fail@plt+0x17088>
   28750:	mov	r7, r4
   28754:	mov	r9, lr
   28758:	mov	sl, r8
   2875c:	ldr	r6, [r7], #32
   28760:	add	r9, r9, #4
   28764:	add	sl, sl, #4
   28768:	tst	r6, r1
   2876c:	beq	2875c <__assert_fail@plt+0x1705c>
   28770:	ldr	r6, [sl]
   28774:	mov	r7, r0
   28778:	str	r6, [r7, r5, lsl #2]!
   2877c:	ldr	r6, [r9]
   28780:	str	r6, [r7, #1024]	; 0x400
   28784:	b	28734 <__assert_fail@plt+0x17034>
   28788:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   2878c:	cmp	r2, #0
   28790:	beq	2881c <__assert_fail@plt+0x1711c>
   28794:	add	r1, sp, #168	; 0xa8
   28798:	sub	lr, fp, #2048	; 0x800
   2879c:	mov	r5, #192	; 0xc0
   287a0:	mov	r3, #0
   287a4:	add	r4, r1, #24
   287a8:	sub	r1, lr, #56	; 0x38
   287ac:	sub	lr, r1, #4
   287b0:	sub	r1, fp, #1024	; 0x400
   287b4:	sub	r1, r1, #56	; 0x38
   287b8:	sub	r8, r1, #4
   287bc:	mov	r1, #1
   287c0:	tst	r2, #1
   287c4:	bne	287e4 <__assert_fail@plt+0x170e4>
   287c8:	lsr	r6, r2, #1
   287cc:	cmp	r3, r2, lsr #1
   287d0:	add	r5, r5, #1
   287d4:	lsl	r1, r1, #1
   287d8:	mov	r2, r6
   287dc:	bne	287c0 <__assert_fail@plt+0x170c0>
   287e0:	b	2881c <__assert_fail@plt+0x1711c>
   287e4:	mov	r7, r4
   287e8:	mov	r9, lr
   287ec:	mov	sl, r8
   287f0:	ldr	r6, [r7], #32
   287f4:	add	r9, r9, #4
   287f8:	add	sl, sl, #4
   287fc:	tst	r6, r1
   28800:	beq	287f0 <__assert_fail@plt+0x170f0>
   28804:	ldr	r6, [sl]
   28808:	mov	r7, r0
   2880c:	str	r6, [r7, r5, lsl #2]!
   28810:	ldr	r6, [r9]
   28814:	str	r6, [r7, #1024]	; 0x400
   28818:	b	287c8 <__assert_fail@plt+0x170c8>
   2881c:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   28820:	cmp	r2, #0
   28824:	beq	288b0 <__assert_fail@plt+0x171b0>
   28828:	add	r1, sp, #168	; 0xa8
   2882c:	sub	lr, fp, #2048	; 0x800
   28830:	mov	r5, #224	; 0xe0
   28834:	mov	r3, #0
   28838:	add	r4, r1, #28
   2883c:	sub	r1, lr, #56	; 0x38
   28840:	sub	lr, r1, #4
   28844:	sub	r1, fp, #1024	; 0x400
   28848:	sub	r1, r1, #56	; 0x38
   2884c:	sub	r8, r1, #4
   28850:	mov	r1, #1
   28854:	tst	r2, #1
   28858:	bne	28878 <__assert_fail@plt+0x17178>
   2885c:	lsr	r6, r2, #1
   28860:	cmp	r3, r2, lsr #1
   28864:	add	r5, r5, #1
   28868:	lsl	r1, r1, #1
   2886c:	mov	r2, r6
   28870:	bne	28854 <__assert_fail@plt+0x17154>
   28874:	b	288b0 <__assert_fail@plt+0x171b0>
   28878:	mov	r7, r4
   2887c:	mov	r9, lr
   28880:	mov	sl, r8
   28884:	ldr	r6, [r7], #32
   28888:	add	r9, r9, #4
   2888c:	add	sl, sl, #4
   28890:	tst	r6, r1
   28894:	beq	28884 <__assert_fail@plt+0x17184>
   28898:	ldr	r6, [sl]
   2889c:	mov	r7, r0
   288a0:	str	r6, [r7, r5, lsl #2]!
   288a4:	ldr	r6, [r9]
   288a8:	str	r6, [r7, #1024]	; 0x400
   288ac:	b	2885c <__assert_fail@plt+0x1715c>
   288b0:	ldr	r8, [sp, #132]	; 0x84
   288b4:	tst	ip, #1024	; 0x400
   288b8:	add	r3, sp, #168	; 0xa8
   288bc:	beq	28900 <__assert_fail@plt+0x17200>
   288c0:	ldr	r1, [sp, #164]	; 0xa4
   288c4:	ldrb	r2, [r3, #1]
   288c8:	tst	r2, #4
   288cc:	bne	288ec <__assert_fail@plt+0x171ec>
   288d0:	ldr	r2, [sp, #128]	; 0x80
   288d4:	add	r3, r3, #32
   288d8:	subs	r1, r1, #1
   288dc:	add	r2, r2, #4
   288e0:	str	r2, [sp, #128]	; 0x80
   288e4:	bne	288c4 <__assert_fail@plt+0x171c4>
   288e8:	b	28900 <__assert_fail@plt+0x17200>
   288ec:	ldr	r1, [sp, #128]	; 0x80
   288f0:	tst	r8, #1
   288f4:	ldr	r1, [r1]
   288f8:	str	r1, [r0, #40]	; 0x28
   288fc:	strne	r1, [r0, #1064]	; 0x428
   28900:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   28904:	bl	13ddc <__assert_fail@plt+0x26dc>
   28908:	sub	lr, fp, #6144	; 0x1800
   2890c:	sub	r0, lr, #104	; 0x68
   28910:	add	r4, r0, #8
   28914:	ldr	r0, [r4], #12
   28918:	bl	13ddc <__assert_fail@plt+0x26dc>
   2891c:	ldr	r0, [sp, #164]	; 0xa4
   28920:	subs	r0, r0, #1
   28924:	str	r0, [sp, #164]	; 0xa4
   28928:	bne	28914 <__assert_fail@plt+0x17214>
   2892c:	mov	r0, #1
   28930:	sub	sp, fp, #48	; 0x30
   28934:	vpop	{d8-d9}
   28938:	add	sp, sp, #4
   2893c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28944:	add	fp, sp, #28
   28948:	sub	sp, sp, #68	; 0x44
   2894c:	ldr	r4, [r1, #8]
   28950:	ldr	r6, [r1, #12]
   28954:	mov	r8, r0
   28958:	mov	r0, #1
   2895c:	mov	r5, r1
   28960:	str	r0, [fp, #-36]	; 0xffffffdc
   28964:	str	r0, [fp, #-40]	; 0xffffffd8
   28968:	mov	r0, #4
   2896c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   28970:	cmp	r0, #0
   28974:	str	r0, [fp, #-32]	; 0xffffffe0
   28978:	beq	29058 <__assert_fail@plt+0x17958>
   2897c:	str	r4, [r0]
   28980:	sub	r3, fp, #40	; 0x28
   28984:	mov	r0, r8
   28988:	mov	r1, r5
   2898c:	mov	r2, r6
   28990:	str	r5, [sp, #28]
   28994:	bl	2907c <__assert_fail@plt+0x1797c>
   28998:	cmp	r0, #0
   2899c:	bne	29050 <__assert_fail@plt+0x17950>
   289a0:	mov	r4, r6
   289a4:	mov	r9, #1
   289a8:	mov	r1, #0
   289ac:	str	r8, [sp, #48]	; 0x30
   289b0:	cmp	r4, #1
   289b4:	bge	289e4 <__assert_fail@plt+0x172e4>
   289b8:	b	29010 <__assert_fail@plt+0x17910>
   289bc:	mov	r0, r8
   289c0:	mov	r1, lr
   289c4:	mov	r2, r4
   289c8:	sub	r3, fp, #40	; 0x28
   289cc:	bl	2907c <__assert_fail@plt+0x1797c>
   289d0:	ldr	r1, [sp, #4]
   289d4:	cmp	r0, #0
   289d8:	bne	29050 <__assert_fail@plt+0x17950>
   289dc:	cmp	r4, #1
   289e0:	blt	29010 <__assert_fail@plt+0x17910>
   289e4:	ldr	lr, [sp, #28]
   289e8:	ldr	r0, [lr]
   289ec:	ldr	r2, [r0, r4, lsl #2]
   289f0:	cmp	r2, #0
   289f4:	mov	r2, #0
   289f8:	addeq	r2, r1, #1
   289fc:	ldr	r1, [r8, #120]	; 0x78
   28a00:	cmp	r2, r1
   28a04:	bgt	29018 <__assert_fail@plt+0x17918>
   28a08:	mov	r0, #0
   28a0c:	str	r4, [sp, #36]	; 0x24
   28a10:	sub	r4, r4, #1
   28a14:	str	r2, [sp, #4]
   28a18:	str	r0, [fp, #-36]	; 0xffffffdc
   28a1c:	ldr	r0, [r8, #100]	; 0x64
   28a20:	ldr	r1, [r0, r4, lsl #2]
   28a24:	cmp	r1, #0
   28a28:	beq	289bc <__assert_fail@plt+0x172bc>
   28a2c:	ldr	r0, [r1, #20]
   28a30:	cmp	r0, #1
   28a34:	blt	289bc <__assert_fail@plt+0x172bc>
   28a38:	ldr	r0, [r8, #84]	; 0x54
   28a3c:	mov	r2, #0
   28a40:	str	r4, [sp, #32]
   28a44:	str	r1, [sp, #16]
   28a48:	str	r0, [sp, #24]
   28a4c:	b	28a98 <__assert_fail@plt+0x17398>
   28a50:	ldr	r2, [fp, #-40]	; 0xffffffd8
   28a54:	cmp	r2, #0
   28a58:	beq	28ce0 <__assert_fail@plt+0x175e0>
   28a5c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   28a60:	ldr	r6, [fp, #-44]	; 0xffffffd4
   28a64:	cmp	r1, #0
   28a68:	bne	28f18 <__assert_fail@plt+0x17818>
   28a6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28a70:	str	r6, [r0]
   28a74:	ldr	r0, [fp, #-36]	; 0xffffffdc
   28a78:	add	r0, r0, #1
   28a7c:	str	r0, [fp, #-36]	; 0xffffffdc
   28a80:	ldr	r1, [sp, #16]
   28a84:	ldr	r2, [sp, #20]
   28a88:	ldr	r0, [r1, #20]
   28a8c:	add	r2, r2, #1
   28a90:	cmp	r2, r0
   28a94:	bge	289bc <__assert_fail@plt+0x172bc>
   28a98:	ldr	r0, [r1, #24]
   28a9c:	str	r2, [sp, #20]
   28aa0:	ldr	r2, [r0, r2, lsl #2]
   28aa4:	ldr	r0, [sp, #24]
   28aa8:	ldr	r0, [r0]
   28aac:	mov	r1, r2
   28ab0:	str	r2, [fp, #-44]	; 0xffffffd4
   28ab4:	add	r0, r0, r2, lsl #3
   28ab8:	ldrb	r0, [r0, #6]
   28abc:	tst	r0, #16
   28ac0:	bne	28b60 <__assert_fail@plt+0x17460>
   28ac4:	ldr	r0, [sp, #24]
   28ac8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28acc:	mov	r2, r4
   28ad0:	ldr	r0, [r0]
   28ad4:	add	r1, r0, r1, lsl #3
   28ad8:	mov	r0, r8
   28adc:	bl	269f0 <__assert_fail@plt+0x152f0>
   28ae0:	ldr	lr, [sp, #28]
   28ae4:	cmp	r0, #0
   28ae8:	beq	28a80 <__assert_fail@plt+0x17380>
   28aec:	ldr	r0, [lr]
   28af0:	ldr	r1, [sp, #36]	; 0x24
   28af4:	ldr	r0, [r0, r1, lsl #2]
   28af8:	cmp	r0, #0
   28afc:	beq	28a80 <__assert_fail@plt+0x17380>
   28b00:	ldr	r2, [r0, #8]
   28b04:	cmp	r2, #1
   28b08:	blt	28a80 <__assert_fail@plt+0x17380>
   28b0c:	ldr	r1, [sp, #24]
   28b10:	ldr	r3, [fp, #-44]	; 0xffffffd4
   28b14:	ldr	r0, [r0, #12]
   28b18:	ldr	r1, [r1, #12]
   28b1c:	ldr	r1, [r1, r3, lsl #2]
   28b20:	subs	r3, r2, #1
   28b24:	mov	r2, #0
   28b28:	beq	28b4c <__assert_fail@plt+0x1744c>
   28b2c:	add	r7, r2, r3
   28b30:	lsr	r6, r7, #1
   28b34:	ldr	r5, [r0, r6, lsl #2]
   28b38:	cmp	r5, r1
   28b3c:	addlt	r2, r9, r7, lsr #1
   28b40:	movge	r3, r6
   28b44:	cmp	r2, r3
   28b48:	bcc	28b2c <__assert_fail@plt+0x1742c>
   28b4c:	ldr	r2, [r0, r2, lsl #2]
   28b50:	mov	r0, #1
   28b54:	cmp	r2, r1
   28b58:	bne	28a80 <__assert_fail@plt+0x17380>
   28b5c:	b	28bbc <__assert_fail@plt+0x174bc>
   28b60:	ldr	r7, [r8, #84]	; 0x54
   28b64:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28b68:	mov	r5, r4
   28b6c:	ldr	r4, [lr, #12]
   28b70:	mov	r2, r8
   28b74:	mov	r3, r5
   28b78:	mov	r0, r7
   28b7c:	bl	26664 <__assert_fail@plt+0x14f64>
   28b80:	cmp	r0, #1
   28b84:	blt	28bac <__assert_fail@plt+0x174ac>
   28b88:	add	r1, r0, r5
   28b8c:	cmp	r1, r4
   28b90:	ble	28c64 <__assert_fail@plt+0x17564>
   28b94:	ldr	lr, [sp, #28]
   28b98:	ldr	r4, [sp, #32]
   28b9c:	ldr	ip, [lr, #20]
   28ba0:	cmp	ip, #0
   28ba4:	bne	28bc8 <__assert_fail@plt+0x174c8>
   28ba8:	b	28a50 <__assert_fail@plt+0x17350>
   28bac:	ldr	lr, [sp, #28]
   28bb0:	cmp	r0, #0
   28bb4:	mov	r4, r5
   28bb8:	beq	28ac4 <__assert_fail@plt+0x173c4>
   28bbc:	ldr	ip, [lr, #20]
   28bc0:	cmp	ip, #0
   28bc4:	beq	28a50 <__assert_fail@plt+0x17350>
   28bc8:	add	r0, r0, r4
   28bcc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28bd0:	str	r0, [sp, #40]	; 0x28
   28bd4:	ldr	r0, [sp, #24]
   28bd8:	ldr	r0, [r0, #12]
   28bdc:	ldr	r0, [r0, r1, lsl #2]
   28be0:	str	r0, [sp, #8]
   28be4:	ldr	r0, [r8, #108]	; 0x6c
   28be8:	cmp	r0, #1
   28bec:	blt	28d0c <__assert_fail@plt+0x1760c>
   28bf0:	ldr	r2, [r8, #116]	; 0x74
   28bf4:	ldr	r1, [sp, #40]	; 0x28
   28bf8:	mov	sl, #0
   28bfc:	mov	r3, r0
   28c00:	add	r7, r3, sl
   28c04:	add	r7, r7, r7, lsr #31
   28c08:	asr	r6, r7, #1
   28c0c:	add	r5, r6, r6, lsl #1
   28c10:	add	r5, r2, r5, lsl #3
   28c14:	ldr	r5, [r5, #4]
   28c18:	cmp	r5, r1
   28c1c:	addlt	sl, r9, r7, asr #1
   28c20:	movge	r3, r6
   28c24:	cmp	sl, r3
   28c28:	blt	28c00 <__assert_fail@plt+0x17500>
   28c2c:	cmp	sl, r0
   28c30:	bge	28d1c <__assert_fail@plt+0x1761c>
   28c34:	ldr	r2, [r8, #116]	; 0x74
   28c38:	add	r3, sl, sl, lsl #1
   28c3c:	add	r2, r2, r3, lsl #3
   28c40:	ldr	r2, [r2, #4]
   28c44:	cmp	r2, r1
   28c48:	mvnne	sl, #0
   28c4c:	cmp	r0, #1
   28c50:	bge	28d28 <__assert_fail@plt+0x17628>
   28c54:	mov	r5, #0
   28c58:	cmp	r5, r0
   28c5c:	blt	28d68 <__assert_fail@plt+0x17668>
   28c60:	b	28d8c <__assert_fail@plt+0x1768c>
   28c64:	ldr	lr, [sp, #28]
   28c68:	ldr	r4, [sp, #32]
   28c6c:	ldr	r2, [lr]
   28c70:	ldr	r2, [r2, r1, lsl #2]
   28c74:	cmp	r2, #0
   28c78:	beq	28ac4 <__assert_fail@plt+0x173c4>
   28c7c:	ldr	r3, [r2, #8]
   28c80:	cmp	r3, #1
   28c84:	blt	28ac4 <__assert_fail@plt+0x173c4>
   28c88:	ldr	r1, [r7, #12]
   28c8c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   28c90:	ldr	r2, [r2, #12]
   28c94:	ldr	r1, [r1, r7, lsl #2]
   28c98:	subs	r7, r3, #1
   28c9c:	mov	r3, #0
   28ca0:	beq	28cc4 <__assert_fail@plt+0x175c4>
   28ca4:	add	r6, r3, r7
   28ca8:	lsr	r5, r6, #1
   28cac:	ldr	r4, [r2, r5, lsl #2]
   28cb0:	cmp	r4, r1
   28cb4:	addlt	r3, r9, r6, lsr #1
   28cb8:	movge	r7, r5
   28cbc:	cmp	r3, r7
   28cc0:	bcc	28ca4 <__assert_fail@plt+0x175a4>
   28cc4:	ldr	r4, [sp, #32]
   28cc8:	cmp	r0, #0
   28ccc:	beq	28ac4 <__assert_fail@plt+0x173c4>
   28cd0:	ldr	r2, [r2, r3, lsl #2]
   28cd4:	cmp	r2, r1
   28cd8:	beq	28bbc <__assert_fail@plt+0x174bc>
   28cdc:	b	28ac4 <__assert_fail@plt+0x173c4>
   28ce0:	mov	r0, #4
   28ce4:	str	r9, [fp, #-36]	; 0xffffffdc
   28ce8:	str	r9, [fp, #-40]	; 0xffffffd8
   28cec:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   28cf0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28cf4:	cmp	r0, #0
   28cf8:	str	r0, [fp, #-32]	; 0xffffffe0
   28cfc:	beq	2903c <__assert_fail@plt+0x1793c>
   28d00:	ldr	lr, [sp, #28]
   28d04:	str	r1, [r0]
   28d08:	b	28a80 <__assert_fail@plt+0x17380>
   28d0c:	ldr	r1, [sp, #40]	; 0x28
   28d10:	mov	sl, #0
   28d14:	cmp	sl, r0
   28d18:	blt	28c34 <__assert_fail@plt+0x17534>
   28d1c:	mvn	sl, #0
   28d20:	cmp	r0, #1
   28d24:	blt	28c54 <__assert_fail@plt+0x17554>
   28d28:	ldr	r2, [r8, #116]	; 0x74
   28d2c:	mov	r5, #0
   28d30:	mov	r3, r0
   28d34:	add	r7, r3, r5
   28d38:	add	r7, r7, r7, lsr #31
   28d3c:	asr	r6, r7, #1
   28d40:	add	r1, r6, r6, lsl #1
   28d44:	add	r1, r2, r1, lsl #3
   28d48:	ldr	r1, [r1, #4]
   28d4c:	cmp	r1, r4
   28d50:	addlt	r5, r9, r7, asr #1
   28d54:	movge	r3, r6
   28d58:	cmp	r5, r3
   28d5c:	blt	28d34 <__assert_fail@plt+0x17634>
   28d60:	cmp	r5, r0
   28d64:	bge	28d8c <__assert_fail@plt+0x1768c>
   28d68:	ldr	r0, [r8, #116]	; 0x74
   28d6c:	add	r1, r5, r5, lsl #1
   28d70:	add	r0, r0, r1, lsl #3
   28d74:	ldr	r0, [r0, #4]
   28d78:	cmp	r0, r4
   28d7c:	mvnne	r5, #0
   28d80:	cmp	ip, #1
   28d84:	bge	28d98 <__assert_fail@plt+0x17698>
   28d88:	b	28a50 <__assert_fail@plt+0x17350>
   28d8c:	mvn	r5, #0
   28d90:	cmp	ip, #1
   28d94:	blt	28a50 <__assert_fail@plt+0x17350>
   28d98:	ldr	ip, [r8, #84]	; 0x54
   28d9c:	mov	r6, #0
   28da0:	str	ip, [sp, #12]
   28da4:	ldr	r0, [lr, #24]
   28da8:	ldr	r3, [r8, #116]	; 0x74
   28dac:	ldr	r4, [ip]
   28db0:	mvn	r8, #0
   28db4:	ldr	r2, [r0, r6, lsl #2]
   28db8:	mov	r0, r3
   28dbc:	add	r1, r2, r2, lsl #1
   28dc0:	ldr	r7, [r0, r1, lsl #3]!
   28dc4:	ldr	r0, [r0, #8]
   28dc8:	ldr	r4, [r4, r7, lsl #3]
   28dcc:	ldr	r7, [sp, #40]	; 0x28
   28dd0:	cmp	r0, r7
   28dd4:	str	r4, [sp, #44]	; 0x2c
   28dd8:	ble	28df4 <__assert_fail@plt+0x176f4>
   28ddc:	mvn	r9, #0
   28de0:	ldr	r1, [sp, #36]	; 0x24
   28de4:	ldr	r4, [sp, #32]
   28de8:	cmp	r0, r1
   28dec:	blt	28e78 <__assert_fail@plt+0x17778>
   28df0:	b	28ef4 <__assert_fail@plt+0x177f4>
   28df4:	add	r1, r3, r1, lsl #3
   28df8:	mov	r9, #1
   28dfc:	ldr	r1, [r1, #12]
   28e00:	cmp	r1, r7
   28e04:	blt	28e68 <__assert_fail@plt+0x17768>
   28e08:	sub	r1, r1, r7
   28e0c:	cmp	r0, r7
   28e10:	mov	r7, #1
   28e14:	clz	r1, r1
   28e18:	lsr	r4, r1, #5
   28e1c:	lsl	r1, r4, #1
   28e20:	orreq	r1, r7, r4, lsl #1
   28e24:	cmp	r1, #0
   28e28:	beq	28ed8 <__assert_fail@plt+0x177d8>
   28e2c:	ldr	r4, [sp, #48]	; 0x30
   28e30:	ldr	r2, [sp, #44]	; 0x2c
   28e34:	ldr	r3, [sp, #8]
   28e38:	str	sl, [sp]
   28e3c:	mov	r0, r4
   28e40:	bl	2a678 <__assert_fail@plt+0x18f78>
   28e44:	ldr	lr, [sp, #28]
   28e48:	mov	r9, r0
   28e4c:	ldr	r3, [r4, #116]	; 0x74
   28e50:	ldr	ip, [sp, #12]
   28e54:	ldr	r0, [lr, #24]
   28e58:	ldr	r2, [r0, r6, lsl #2]
   28e5c:	add	r0, r2, r2, lsl #1
   28e60:	add	r0, r3, r0, lsl #3
   28e64:	ldr	r0, [r0, #8]
   28e68:	ldr	r1, [sp, #36]	; 0x24
   28e6c:	ldr	r4, [sp, #32]
   28e70:	cmp	r0, r1
   28e74:	bge	28ef4 <__assert_fail@plt+0x177f4>
   28e78:	add	r1, r2, r2, lsl #1
   28e7c:	mov	r8, #1
   28e80:	add	r1, r3, r1, lsl #3
   28e84:	ldr	r1, [r1, #12]
   28e88:	cmp	r1, r4
   28e8c:	blt	28ef4 <__assert_fail@plt+0x177f4>
   28e90:	sub	r1, r1, r4
   28e94:	cmp	r0, r4
   28e98:	mov	r0, #1
   28e9c:	clz	r1, r1
   28ea0:	lsr	r2, r1, #5
   28ea4:	lsl	r1, r2, #1
   28ea8:	orreq	r1, r0, r2, lsl #1
   28eac:	cmp	r1, #0
   28eb0:	beq	28ef0 <__assert_fail@plt+0x177f0>
   28eb4:	ldr	r0, [sp, #48]	; 0x30
   28eb8:	ldr	r2, [sp, #44]	; 0x2c
   28ebc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   28ec0:	str	r5, [sp]
   28ec4:	bl	2a678 <__assert_fail@plt+0x18f78>
   28ec8:	ldr	ip, [sp, #12]
   28ecc:	ldr	lr, [sp, #28]
   28ed0:	mov	r8, r0
   28ed4:	b	28ef4 <__assert_fail@plt+0x177f4>
   28ed8:	mov	r9, #0
   28edc:	ldr	r1, [sp, #36]	; 0x24
   28ee0:	ldr	r4, [sp, #32]
   28ee4:	cmp	r0, r1
   28ee8:	blt	28e78 <__assert_fail@plt+0x17778>
   28eec:	b	28ef4 <__assert_fail@plt+0x177f4>
   28ef0:	mov	r8, #0
   28ef4:	cmp	r8, r9
   28ef8:	ldr	r8, [sp, #48]	; 0x30
   28efc:	mov	r9, #1
   28f00:	bne	28a80 <__assert_fail@plt+0x17380>
   28f04:	ldr	r0, [lr, #20]
   28f08:	add	r6, r6, #1
   28f0c:	cmp	r6, r0
   28f10:	blt	28da4 <__assert_fail@plt+0x176a4>
   28f14:	b	28a50 <__assert_fail@plt+0x17350>
   28f18:	cmp	r2, r1
   28f1c:	bne	28f58 <__assert_fail@plt+0x17858>
   28f20:	lsl	r0, r2, #1
   28f24:	lsl	r1, r2, #3
   28f28:	str	r0, [fp, #-40]	; 0xffffffd8
   28f2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28f30:	bl	2b910 <__assert_fail@plt+0x1a210>
   28f34:	cmp	r0, #0
   28f38:	beq	29074 <__assert_fail@plt+0x17974>
   28f3c:	str	r0, [fp, #-32]	; 0xffffffe0
   28f40:	ldr	lr, [sp, #28]
   28f44:	ldr	r1, [fp, #-36]	; 0xffffffdc
   28f48:	ldr	r2, [r0]
   28f4c:	cmp	r2, r6
   28f50:	bgt	28f68 <__assert_fail@plt+0x17868>
   28f54:	b	28fd8 <__assert_fail@plt+0x178d8>
   28f58:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28f5c:	ldr	r2, [r0]
   28f60:	cmp	r2, r6
   28f64:	ble	28fd8 <__assert_fail@plt+0x178d8>
   28f68:	cmp	r1, #1
   28f6c:	blt	29008 <__assert_fail@plt+0x17908>
   28f70:	ands	r3, r1, #3
   28f74:	sub	ip, r1, #1
   28f78:	beq	28f9c <__assert_fail@plt+0x1789c>
   28f7c:	add	r2, r0, r1, lsl #2
   28f80:	mov	r7, r2
   28f84:	ldr	r5, [r7, #-4]!
   28f88:	subs	r3, r3, #1
   28f8c:	sub	r1, r1, #1
   28f90:	str	r5, [r2]
   28f94:	mov	r2, r7
   28f98:	bne	28f84 <__assert_fail@plt+0x17884>
   28f9c:	cmp	ip, #3
   28fa0:	bcc	28fd0 <__assert_fail@plt+0x178d0>
   28fa4:	add	r2, r0, r1, lsl #2
   28fa8:	sub	r2, r2, #8
   28fac:	ldr	r5, [r2, #4]
   28fb0:	ldmda	r2, {r3, r7, ip}
   28fb4:	sub	sl, r2, #4
   28fb8:	sub	r1, r1, #4
   28fbc:	cmp	r1, #0
   28fc0:	stm	sl, {r3, r7, ip}
   28fc4:	str	r5, [r2, #8]
   28fc8:	sub	r2, r2, #16
   28fcc:	bgt	28fac <__assert_fail@plt+0x178ac>
   28fd0:	mov	r1, #0
   28fd4:	b	29008 <__assert_fail@plt+0x17908>
   28fd8:	add	r2, r0, r1, lsl #2
   28fdc:	ldr	r3, [r2, #-4]
   28fe0:	cmp	r3, r6
   28fe4:	ble	29008 <__assert_fail@plt+0x17908>
   28fe8:	sub	r1, r1, #2
   28fec:	str	r3, [r2]
   28ff0:	sub	r1, r1, #1
   28ff4:	ldr	r3, [r2, #-8]
   28ff8:	sub	r2, r2, #4
   28ffc:	cmp	r3, r6
   29000:	bgt	28fec <__assert_fail@plt+0x178ec>
   29004:	add	r1, r1, #2
   29008:	str	r6, [r0, r1, lsl #2]
   2900c:	b	28a74 <__assert_fail@plt+0x17374>
   29010:	mov	r7, #0
   29014:	b	29028 <__assert_fail@plt+0x17928>
   29018:	lsl	r2, r4, #2
   2901c:	mov	r1, #0
   29020:	mov	r7, #0
   29024:	bl	11610 <memset@plt>
   29028:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2902c:	bl	13ddc <__assert_fail@plt+0x26dc>
   29030:	mov	r0, r7
   29034:	sub	sp, fp, #28
   29038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2903c:	mov	r0, #0
   29040:	mov	r7, #12
   29044:	str	r0, [fp, #-40]	; 0xffffffd8
   29048:	str	r0, [fp, #-36]	; 0xffffffdc
   2904c:	b	29028 <__assert_fail@plt+0x17928>
   29050:	mov	r7, r0
   29054:	b	29028 <__assert_fail@plt+0x17928>
   29058:	mov	r0, #0
   2905c:	mov	r7, #12
   29060:	str	r0, [fp, #-40]	; 0xffffffd8
   29064:	str	r0, [fp, #-36]	; 0xffffffdc
   29068:	mov	r0, r7
   2906c:	sub	sp, fp, #28
   29070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29074:	mov	r7, #12
   29078:	b	29028 <__assert_fail@plt+0x17928>
   2907c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29080:	add	fp, sp, #28
   29084:	sub	sp, sp, #140	; 0x8c
   29088:	mov	r5, r1
   2908c:	ldr	r1, [r0, #84]	; 0x54
   29090:	mov	ip, r2
   29094:	mov	r2, #0
   29098:	str	r0, [sp, #76]	; 0x4c
   2909c:	str	r2, [fp, #-76]	; 0xffffffb4
   290a0:	str	ip, [sp, #80]	; 0x50
   290a4:	str	r5, [sp, #84]	; 0x54
   290a8:	str	r1, [fp, #-80]	; 0xffffffb0
   290ac:	ldr	r1, [r0, #100]	; 0x64
   290b0:	ldr	r8, [r1, ip, lsl #2]
   290b4:	ldr	r1, [r3, #4]
   290b8:	cmp	r8, #0
   290bc:	mov	r6, r8
   290c0:	addne	r6, r6, #4
   290c4:	cmp	r1, #0
   290c8:	str	r6, [sp, #68]	; 0x44
   290cc:	beq	294b0 <__assert_fail@plt+0x17db0>
   290d0:	mov	r9, r3
   290d4:	cmp	r8, #0
   290d8:	beq	294d0 <__assert_fail@plt+0x17dd0>
   290dc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   290e0:	mov	r0, #0
   290e4:	mov	r2, r9
   290e8:	str	r9, [sp, #60]	; 0x3c
   290ec:	str	r0, [fp, #-72]	; 0xffffffb8
   290f0:	sub	r0, fp, #72	; 0x48
   290f4:	bl	26334 <__assert_fail@plt+0x14c34>
   290f8:	ldr	r9, [fp, #-72]	; 0xffffffb8
   290fc:	cmp	r9, #0
   29100:	bne	29f88 <__assert_fail@plt+0x18888>
   29104:	mov	r4, r0
   29108:	mov	r5, r0
   2910c:	ldr	r0, [r4, #28]!
   29110:	cmp	r0, #0
   29114:	bne	291ac <__assert_fail@plt+0x17aac>
   29118:	ldr	r0, [sp, #60]	; 0x3c
   2911c:	mov	r1, #0
   29120:	ldr	r0, [r0, #4]
   29124:	str	r0, [r5, #28]
   29128:	lsl	r0, r0, #2
   2912c:	str	r1, [r5, #32]
   29130:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   29134:	cmp	r0, #0
   29138:	mov	r1, #12
   2913c:	mov	r9, #12
   29140:	str	r0, [r5, #36]	; 0x24
   29144:	movne	r1, #0
   29148:	cmp	r0, #0
   2914c:	str	r1, [fp, #-72]	; 0xffffffb8
   29150:	beq	29f88 <__assert_fail@plt+0x18888>
   29154:	ldr	r0, [sp, #60]	; 0x3c
   29158:	ldr	r0, [r0, #4]
   2915c:	cmp	r0, #1
   29160:	blt	291ac <__assert_fail@plt+0x17aac>
   29164:	ldr	r7, [sp, #60]	; 0x3c
   29168:	mov	r5, #0
   2916c:	ldr	r0, [r7, #8]
   29170:	ldr	r1, [fp, #-80]	; 0xffffffb0
   29174:	ldr	r0, [r0, r5, lsl #2]
   29178:	ldr	r1, [r1, #28]
   2917c:	add	r0, r0, r0, lsl #1
   29180:	add	r1, r1, r0, lsl #2
   29184:	mov	r0, r4
   29188:	bl	22048 <__assert_fail@plt+0x10948>
   2918c:	cmp	r0, #0
   29190:	bne	29f84 <__assert_fail@plt+0x18884>
   29194:	ldr	r0, [r7, #4]
   29198:	add	r5, r5, #1
   2919c:	cmp	r5, r0
   291a0:	blt	2916c <__assert_fail@plt+0x17a6c>
   291a4:	mov	r0, #0
   291a8:	str	r0, [fp, #-72]	; 0xffffffb8
   291ac:	ldr	r0, [sp, #60]	; 0x3c
   291b0:	mov	r1, r6
   291b4:	mov	r2, r4
   291b8:	bl	29ff8 <__assert_fail@plt+0x188f8>
   291bc:	cmp	r0, #0
   291c0:	str	r0, [fp, #-76]	; 0xffffffb4
   291c4:	bne	29fb0 <__assert_fail@plt+0x188b0>
   291c8:	ldr	r5, [sp, #84]	; 0x54
   291cc:	ldr	r9, [sp, #60]	; 0x3c
   291d0:	ldr	r0, [r5, #20]
   291d4:	cmp	r0, #0
   291d8:	beq	294d0 <__assert_fail@plt+0x17dd0>
   291dc:	ldr	lr, [sp, #80]	; 0x50
   291e0:	cmp	r0, #1
   291e4:	str	r8, [sp, #56]	; 0x38
   291e8:	blt	294c4 <__assert_fail@plt+0x17dc4>
   291ec:	ldr	r0, [sp, #76]	; 0x4c
   291f0:	mov	r1, #0
   291f4:	ldr	r0, [r0, #116]	; 0x74
   291f8:	str	r0, [sp, #64]	; 0x40
   291fc:	b	29214 <__assert_fail@plt+0x17b14>
   29200:	ldr	r1, [sp, #72]	; 0x48
   29204:	ldr	r0, [r5, #20]
   29208:	add	r1, r1, #1
   2920c:	cmp	r1, r0
   29210:	bge	294c4 <__assert_fail@plt+0x17dc4>
   29214:	ldr	r0, [r5, #24]
   29218:	str	r1, [sp, #72]	; 0x48
   2921c:	ldr	r0, [r0, r1, lsl #2]
   29220:	ldr	r1, [sp, #64]	; 0x40
   29224:	add	r0, r0, r0, lsl #1
   29228:	add	r1, r1, r0, lsl #3
   2922c:	ldr	r2, [r1, #8]
   29230:	cmp	r2, lr
   29234:	bge	29200 <__assert_fail@plt+0x17b00>
   29238:	ldr	r1, [r1, #4]
   2923c:	cmp	r1, lr
   29240:	blt	29200 <__assert_fail@plt+0x17b00>
   29244:	ldr	r1, [sp, #64]	; 0x40
   29248:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2924c:	ldr	r0, [r1, r0, lsl #3]!
   29250:	ldr	r2, [r2]
   29254:	ldr	r1, [r1, #12]
   29258:	ldr	r6, [r2, r0, lsl #3]
   2925c:	ldr	r0, [r9, #4]
   29260:	cmp	r1, lr
   29264:	bne	29440 <__assert_fail@plt+0x17d40>
   29268:	cmp	r0, #1
   2926c:	blt	29200 <__assert_fail@plt+0x17b00>
   29270:	ldr	r3, [r9, #8]
   29274:	mvn	r8, #0
   29278:	mvn	r1, #0
   2927c:	b	2929c <__assert_fail@plt+0x17b9c>
   29280:	ldr	r4, [r2, r7, lsl #3]
   29284:	cmp	r6, r4
   29288:	moveq	r8, r7
   2928c:	mov	r4, #1
   29290:	add	r3, r3, #4
   29294:	subs	r0, r0, #1
   29298:	beq	292d4 <__assert_fail@plt+0x17bd4>
   2929c:	ldr	r7, [r3]
   292a0:	add	r4, r2, r7, lsl #3
   292a4:	ldrb	r4, [r4, #4]
   292a8:	cmp	r4, #9
   292ac:	beq	29280 <__assert_fail@plt+0x17b80>
   292b0:	cmp	r4, #8
   292b4:	bne	2928c <__assert_fail@plt+0x17b8c>
   292b8:	ldr	r4, [r2, r7, lsl #3]
   292bc:	cmp	r6, r4
   292c0:	moveq	r1, r7
   292c4:	mov	r4, #1
   292c8:	add	r3, r3, #4
   292cc:	subs	r0, r0, #1
   292d0:	bne	2929c <__assert_fail@plt+0x17b9c>
   292d4:	ldr	r3, [sp, #68]	; 0x44
   292d8:	cmp	r1, #0
   292dc:	bmi	292f8 <__assert_fail@plt+0x17bf8>
   292e0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   292e4:	ldr	r2, [sp, #60]	; 0x3c
   292e8:	bl	2a1ec <__assert_fail@plt+0x18aec>
   292ec:	ldr	lr, [sp, #80]	; 0x50
   292f0:	cmp	r0, #0
   292f4:	bne	29f38 <__assert_fail@plt+0x18838>
   292f8:	ldr	r9, [sp, #60]	; 0x3c
   292fc:	cmp	r8, #0
   29300:	bmi	29200 <__assert_fail@plt+0x17b00>
   29304:	ldr	ip, [r9, #4]
   29308:	cmp	ip, #1
   2930c:	blt	29200 <__assert_fail@plt+0x17b00>
   29310:	mov	sl, #0
   29314:	b	2934c <__assert_fail@plt+0x17c4c>
   29318:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2931c:	ldr	r3, [sp, #68]	; 0x44
   29320:	mov	r2, r9
   29324:	bl	2a1ec <__assert_fail@plt+0x18aec>
   29328:	cmp	r0, #0
   2932c:	bne	29f38 <__assert_fail@plt+0x18838>
   29330:	ldr	ip, [r9, #4]
   29334:	ldr	lr, [sp, #80]	; 0x50
   29338:	sub	sl, sl, #1
   2933c:	mov	r1, r9
   29340:	add	sl, sl, #1
   29344:	cmp	sl, ip
   29348:	bge	29200 <__assert_fail@plt+0x17b00>
   2934c:	ldr	r1, [r9, #8]
   29350:	ldr	r0, [fp, #-80]	; 0xffffffb0
   29354:	ldr	r1, [r1, sl, lsl #2]
   29358:	ldr	r3, [r0, #28]
   2935c:	add	r2, r1, r1, lsl #1
   29360:	add	r3, r3, r2, lsl #2
   29364:	ldr	r7, [r3, #4]
   29368:	cmp	r7, #1
   2936c:	blt	293cc <__assert_fail@plt+0x17ccc>
   29370:	ldr	r3, [r3, #8]
   29374:	mov	lr, ip
   29378:	subs	r6, r7, #1
   2937c:	beq	293b0 <__assert_fail@plt+0x17cb0>
   29380:	mov	r7, #0
   29384:	add	r4, r7, r6
   29388:	mov	ip, #1
   2938c:	lsr	r0, r4, #1
   29390:	ldr	r5, [r3, r0, lsl #2]
   29394:	cmp	r5, r8
   29398:	addlt	r7, ip, r4, lsr #1
   2939c:	movge	r6, r0
   293a0:	mov	r4, #1
   293a4:	cmp	r7, r6
   293a8:	bcc	29384 <__assert_fail@plt+0x17c84>
   293ac:	b	293b4 <__assert_fail@plt+0x17cb4>
   293b0:	mov	r7, #0
   293b4:	ldr	r0, [r3, r7, lsl #2]
   293b8:	mov	ip, lr
   293bc:	ldr	r5, [sp, #84]	; 0x54
   293c0:	ldr	lr, [sp, #80]	; 0x50
   293c4:	cmp	r0, r8
   293c8:	beq	29340 <__assert_fail@plt+0x17c40>
   293cc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   293d0:	ldr	r0, [r0, #24]
   293d4:	add	r2, r0, r2, lsl #2
   293d8:	ldr	r3, [r2, #4]
   293dc:	cmp	r3, #1
   293e0:	blt	29318 <__assert_fail@plt+0x17c18>
   293e4:	ldr	r2, [r2, #8]
   293e8:	subs	r7, r3, #1
   293ec:	beq	29428 <__assert_fail@plt+0x17d28>
   293f0:	mov	r3, #0
   293f4:	add	r0, r3, r7
   293f8:	lsr	r6, r0, #1
   293fc:	ldr	r5, [r2, r6, lsl #2]
   29400:	cmp	r5, r8
   29404:	addlt	r3, r4, r0, lsr #1
   29408:	movge	r7, r6
   2940c:	cmp	r3, r7
   29410:	bcc	293f4 <__assert_fail@plt+0x17cf4>
   29414:	ldr	r0, [r2, r3, lsl #2]
   29418:	ldr	r5, [sp, #84]	; 0x54
   2941c:	cmp	r0, r8
   29420:	bne	29318 <__assert_fail@plt+0x17c18>
   29424:	b	29340 <__assert_fail@plt+0x17c40>
   29428:	mov	r3, #0
   2942c:	ldr	r0, [r2, r3, lsl #2]
   29430:	ldr	r5, [sp, #84]	; 0x54
   29434:	cmp	r0, r8
   29438:	beq	29340 <__assert_fail@plt+0x17c40>
   2943c:	b	29318 <__assert_fail@plt+0x17c18>
   29440:	cmp	r0, #1
   29444:	blt	29200 <__assert_fail@plt+0x17b00>
   29448:	mov	r7, #0
   2944c:	ldr	r1, [r9, #8]
   29450:	ldr	r1, [r1, r7, lsl #2]
   29454:	add	r3, r2, r1, lsl #3
   29458:	ldrb	r3, [r3, #4]
   2945c:	orr	r3, r3, #1
   29460:	cmp	r3, #9
   29464:	bne	29498 <__assert_fail@plt+0x17d98>
   29468:	ldr	r2, [r2, r1, lsl #3]
   2946c:	cmp	r6, r2
   29470:	bne	29498 <__assert_fail@plt+0x17d98>
   29474:	ldr	r0, [fp, #-80]	; 0xffffffb0
   29478:	ldr	r3, [sp, #68]	; 0x44
   2947c:	mov	r2, r9
   29480:	bl	2a1ec <__assert_fail@plt+0x18aec>
   29484:	cmp	r0, #0
   29488:	bne	29f38 <__assert_fail@plt+0x18838>
   2948c:	ldr	r0, [r9, #4]
   29490:	ldr	lr, [sp, #80]	; 0x50
   29494:	mov	r1, r9
   29498:	add	r7, r7, #1
   2949c:	cmp	r7, r0
   294a0:	bge	29200 <__assert_fail@plt+0x17b00>
   294a4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   294a8:	ldr	r2, [r1]
   294ac:	b	2944c <__assert_fail@plt+0x17d4c>
   294b0:	ldr	r1, [r5]
   294b4:	str	r2, [r1, ip, lsl #2]
   294b8:	cmp	r8, #0
   294bc:	bne	29504 <__assert_fail@plt+0x17e04>
   294c0:	b	29f28 <__assert_fail@plt+0x18828>
   294c4:	ldr	r8, [sp, #56]	; 0x38
   294c8:	mov	r0, #0
   294cc:	str	r0, [fp, #-76]	; 0xffffffb4
   294d0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   294d4:	sub	r0, fp, #76	; 0x4c
   294d8:	mov	r2, r9
   294dc:	bl	26334 <__assert_fail@plt+0x14c34>
   294e0:	ldr	r1, [r5]
   294e4:	ldr	ip, [sp, #80]	; 0x50
   294e8:	str	r0, [r1, ip, lsl #2]
   294ec:	ldr	r0, [sp, #76]	; 0x4c
   294f0:	ldr	r9, [fp, #-76]	; 0xffffffb4
   294f4:	cmp	r9, #0
   294f8:	bne	29f2c <__assert_fail@plt+0x1882c>
   294fc:	cmp	r8, #0
   29500:	beq	29f28 <__assert_fail@plt+0x18828>
   29504:	ldr	r1, [r0, #100]	; 0x64
   29508:	ldr	r1, [r1, ip, lsl #2]
   2950c:	ldrb	r1, [r1, #52]	; 0x34
   29510:	tst	r1, #64	; 0x40
   29514:	beq	29f28 <__assert_fail@plt+0x18828>
   29518:	ldr	lr, [r0, #108]	; 0x6c
   2951c:	ldr	r8, [r0, #84]	; 0x54
   29520:	cmp	lr, #1
   29524:	blt	29f14 <__assert_fail@plt+0x18814>
   29528:	ldr	r1, [r0, #116]	; 0x74
   2952c:	mov	r4, #0
   29530:	mov	r2, #1
   29534:	mov	r3, lr
   29538:	add	r7, r3, r4
   2953c:	add	r7, r7, r7, lsr #31
   29540:	asr	r6, r7, #1
   29544:	add	r5, r6, r6, lsl #1
   29548:	add	r5, r1, r5, lsl #3
   2954c:	ldr	r5, [r5, #4]
   29550:	cmp	r5, ip
   29554:	addlt	r4, r2, r7, asr #1
   29558:	movge	r3, r6
   2955c:	cmp	r4, r3
   29560:	blt	29538 <__assert_fail@plt+0x17e38>
   29564:	cmp	r4, lr
   29568:	bge	29f20 <__assert_fail@plt+0x18820>
   2956c:	cmn	r4, #1
   29570:	beq	29f20 <__assert_fail@plt+0x18820>
   29574:	ldr	r0, [sp, #76]	; 0x4c
   29578:	add	r1, r4, r4, lsl #1
   2957c:	str	r1, [sp, #28]
   29580:	ldr	r0, [r0, #116]	; 0x74
   29584:	add	r0, r0, r1, lsl #3
   29588:	ldr	r0, [r0, #4]
   2958c:	cmp	r0, ip
   29590:	bne	29f20 <__assert_fail@plt+0x18820>
   29594:	ldr	r1, [sp, #68]	; 0x44
   29598:	mov	r2, #0
   2959c:	str	r2, [fp, #-72]	; 0xffffffb8
   295a0:	ldr	r0, [r1, #4]
   295a4:	cmp	r0, #0
   295a8:	ble	29f4c <__assert_fail@plt+0x1884c>
   295ac:	str	r4, [sp, #20]
   295b0:	add	r0, ip, #1
   295b4:	ldr	r4, [sp, #84]	; 0x54
   295b8:	mov	r9, #0
   295bc:	str	r8, [sp, #36]	; 0x24
   295c0:	str	r0, [sp, #12]
   295c4:	sub	r0, fp, #72	; 0x48
   295c8:	add	r0, r0, #16
   295cc:	str	r0, [sp, #8]
   295d0:	mov	r0, #0
   295d4:	str	r0, [sp, #48]	; 0x30
   295d8:	b	295f0 <__assert_fail@plt+0x17ef0>
   295dc:	ldr	r1, [sp, #68]	; 0x44
   295e0:	add	r9, r9, #1
   295e4:	ldr	r0, [r1, #4]
   295e8:	cmp	r9, r0
   295ec:	bge	29f54 <__assert_fail@plt+0x18854>
   295f0:	ldr	r0, [r1, #8]
   295f4:	ldr	r1, [r4, #8]
   295f8:	ldr	r3, [r0, r9, lsl #2]
   295fc:	ldr	r0, [r8]
   29600:	add	r0, r0, r3, lsl #3
   29604:	cmp	r3, r1
   29608:	ldrb	r0, [r0, #4]
   2960c:	bne	29628 <__assert_fail@plt+0x17f28>
   29610:	cmp	r0, #4
   29614:	bne	295dc <__assert_fail@plt+0x17edc>
   29618:	ldr	r0, [r4, #12]
   2961c:	cmp	r0, ip
   29620:	bne	29630 <__assert_fail@plt+0x17f30>
   29624:	b	295dc <__assert_fail@plt+0x17edc>
   29628:	cmp	r0, #4
   2962c:	bne	295dc <__assert_fail@plt+0x17edc>
   29630:	ldr	r0, [sp, #76]	; 0x4c
   29634:	ldr	r1, [sp, #28]
   29638:	ldr	r5, [sp, #20]
   2963c:	str	r9, [sp, #40]	; 0x28
   29640:	str	r3, [sp, #56]	; 0x38
   29644:	ldr	r0, [r0, #116]	; 0x74
   29648:	add	r7, r0, r1, lsl #3
   2964c:	ldr	r0, [r7]
   29650:	cmp	r0, r3
   29654:	beq	29da0 <__assert_fail@plt+0x186a0>
   29658:	b	29ef8 <__assert_fail@plt+0x187f8>
   2965c:	mov	r8, lr
   29660:	ldr	r4, [sp, #84]	; 0x54
   29664:	ldr	r3, [sp, #56]	; 0x38
   29668:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2966c:	ldr	lr, [sp, #64]	; 0x40
   29670:	b	29ef8 <__assert_fail@plt+0x187f8>
   29674:	mov	r9, #0
   29678:	ldr	r3, [sp, #76]	; 0x4c
   2967c:	cmp	r9, r0
   29680:	blt	29e8c <__assert_fail@plt+0x1878c>
   29684:	mvn	r9, #0
   29688:	cmp	r0, #1
   2968c:	blt	29eac <__assert_fail@plt+0x187ac>
   29690:	ldr	r1, [r3, #116]	; 0x74
   29694:	ldr	lr, [sp, #64]	; 0x40
   29698:	mov	r8, #0
   2969c:	mov	r2, r0
   296a0:	add	r3, r2, r8
   296a4:	add	r3, r3, r3, lsr #31
   296a8:	asr	r6, r3, #1
   296ac:	add	r5, r6, r6, lsl #1
   296b0:	add	r5, r1, r5, lsl #3
   296b4:	ldr	r5, [r5, #4]
   296b8:	cmp	r5, sl
   296bc:	addlt	r8, r4, r3, asr #1
   296c0:	movge	r2, r6
   296c4:	cmp	r8, r2
   296c8:	blt	296a0 <__assert_fail@plt+0x17fa0>
   296cc:	ldr	r3, [sp, #76]	; 0x4c
   296d0:	cmp	r8, r0
   296d4:	bge	29ec0 <__assert_fail@plt+0x187c0>
   296d8:	ldr	r0, [r3, #116]	; 0x74
   296dc:	add	r1, r8, r8, lsl #1
   296e0:	add	r0, r0, r1, lsl #3
   296e4:	ldr	r0, [r0, #4]
   296e8:	cmp	r0, sl
   296ec:	mvnne	r8, #0
   296f0:	ldr	r5, [sp, #84]	; 0x54
   296f4:	ldr	r4, [r5, #20]
   296f8:	cmp	r4, #1
   296fc:	blt	29880 <__assert_fail@plt+0x18180>
   29700:	ldr	r0, [r3, #84]	; 0x54
   29704:	mov	r6, #0
   29708:	str	r0, [sp, #60]	; 0x3c
   2970c:	ldr	r0, [r5, #24]
   29710:	ldr	r3, [r3, #116]	; 0x74
   29714:	ldr	r4, [sp, #60]	; 0x3c
   29718:	ldr	r2, [r0, r6, lsl #2]
   2971c:	mov	r0, r3
   29720:	ldr	r4, [r4]
   29724:	add	r1, r2, r2, lsl #1
   29728:	ldr	r5, [r0, r1, lsl #3]!
   2972c:	ldr	r0, [r0, #8]
   29730:	ldr	r4, [r4, r5, lsl #3]
   29734:	mvn	r5, #0
   29738:	cmp	r0, ip
   2973c:	str	r4, [sp, #72]	; 0x48
   29740:	ble	29754 <__assert_fail@plt+0x18054>
   29744:	mvn	r4, #0
   29748:	cmp	r0, sl
   2974c:	ble	297dc <__assert_fail@plt+0x180dc>
   29750:	b	29838 <__assert_fail@plt+0x18138>
   29754:	add	r1, r3, r1, lsl #3
   29758:	mov	r4, #1
   2975c:	ldr	r1, [r1, #12]
   29760:	cmp	r1, ip
   29764:	blt	297d4 <__assert_fail@plt+0x180d4>
   29768:	sub	r1, r1, ip
   2976c:	cmp	r0, ip
   29770:	mov	lr, #1
   29774:	clz	r1, r1
   29778:	lsr	r4, r1, #5
   2977c:	lsl	r1, r4, #1
   29780:	orreq	r1, lr, r4, lsl #1
   29784:	cmp	r1, #0
   29788:	beq	297cc <__assert_fail@plt+0x180cc>
   2978c:	ldr	r0, [sp, #76]	; 0x4c
   29790:	ldr	r2, [sp, #72]	; 0x48
   29794:	ldr	r3, [sp, #56]	; 0x38
   29798:	str	r9, [sp]
   2979c:	bl	2a678 <__assert_fail@plt+0x18f78>
   297a0:	mov	r4, r0
   297a4:	ldr	r0, [sp, #84]	; 0x54
   297a8:	ldr	r1, [sp, #76]	; 0x4c
   297ac:	ldr	ip, [sp, #80]	; 0x50
   297b0:	ldr	r0, [r0, #24]
   297b4:	ldr	r3, [r1, #116]	; 0x74
   297b8:	ldr	r2, [r0, r6, lsl #2]
   297bc:	add	r0, r2, r2, lsl #1
   297c0:	add	r0, r3, r0, lsl #3
   297c4:	ldr	r0, [r0, #8]
   297c8:	b	297d0 <__assert_fail@plt+0x180d0>
   297cc:	mov	r4, #0
   297d0:	ldr	lr, [sp, #64]	; 0x40
   297d4:	cmp	r0, sl
   297d8:	bgt	29838 <__assert_fail@plt+0x18138>
   297dc:	add	r1, r2, r2, lsl #1
   297e0:	mov	r5, #1
   297e4:	add	r1, r3, r1, lsl #3
   297e8:	ldr	r1, [r1, #12]
   297ec:	cmp	r1, sl
   297f0:	blt	29838 <__assert_fail@plt+0x18138>
   297f4:	sub	r1, r1, sl
   297f8:	cmp	r0, sl
   297fc:	mov	r0, #1
   29800:	clz	r1, r1
   29804:	lsr	r2, r1, #5
   29808:	lsl	r1, r2, #1
   2980c:	orreq	r1, r0, r2, lsl #1
   29810:	cmp	r1, #0
   29814:	beq	2985c <__assert_fail@plt+0x1815c>
   29818:	ldr	r0, [sp, #76]	; 0x4c
   2981c:	ldr	r2, [sp, #72]	; 0x48
   29820:	ldr	r3, [sp, #52]	; 0x34
   29824:	str	r8, [sp]
   29828:	bl	2a678 <__assert_fail@plt+0x18f78>
   2982c:	ldr	lr, [sp, #64]	; 0x40
   29830:	ldr	ip, [sp, #80]	; 0x50
   29834:	mov	r5, r0
   29838:	cmp	r5, r4
   2983c:	bne	29868 <__assert_fail@plt+0x18168>
   29840:	ldr	r5, [sp, #84]	; 0x54
   29844:	ldr	r3, [sp, #76]	; 0x4c
   29848:	add	r6, r6, #1
   2984c:	ldr	r4, [r5, #20]
   29850:	cmp	r6, r4
   29854:	blt	2970c <__assert_fail@plt+0x1800c>
   29858:	b	29880 <__assert_fail@plt+0x18180>
   2985c:	mov	r5, #0
   29860:	cmp	r5, r4
   29864:	beq	29840 <__assert_fail@plt+0x18140>
   29868:	ldr	r4, [sp, #84]	; 0x54
   2986c:	ldr	r8, [sp, #36]	; 0x24
   29870:	ldr	r9, [sp, #40]	; 0x28
   29874:	ldr	r3, [sp, #56]	; 0x38
   29878:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2987c:	b	29ef8 <__assert_fail@plt+0x187f8>
   29880:	ldr	r0, [sp, #48]	; 0x30
   29884:	cmp	r0, #0
   29888:	beq	298c8 <__assert_fail@plt+0x181c8>
   2988c:	ldr	r0, [sp, #56]	; 0x38
   29890:	str	ip, [fp, #-60]	; 0xffffffc4
   29894:	ldr	r8, [sp, #36]	; 0x24
   29898:	ldr	r9, [fp, #-80]	; 0xffffffb0
   2989c:	str	r0, [fp, #-64]	; 0xffffffc0
   298a0:	ldr	r0, [sp, #24]
   298a4:	cmp	r0, #0
   298a8:	beq	29a4c <__assert_fail@plt+0x1834c>
   298ac:	ldr	r6, [sp, #44]	; 0x2c
   298b0:	cmp	r6, #0
   298b4:	bne	29d80 <__assert_fail@plt+0x18680>
   298b8:	mov	r6, #1
   298bc:	str	r9, [lr]
   298c0:	str	lr, [sp, #32]
   298c4:	b	29ad8 <__assert_fail@plt+0x183d8>
   298c8:	mov	r0, r5
   298cc:	mov	r1, #12
   298d0:	ldr	r8, [sp, #36]	; 0x24
   298d4:	ldr	r9, [fp, #-80]	; 0xffffffb0
   298d8:	cmp	r4, #1
   298dc:	vld1.32	{d16-d17}, [r0], r1
   298e0:	sub	r1, fp, #72	; 0x48
   298e4:	vld1.32	{d18-d19}, [r0]
   298e8:	add	r0, r1, #12
   298ec:	vst1.32	{d18-d19}, [r0]
   298f0:	mov	r0, r1
   298f4:	mov	r1, #20
   298f8:	vst1.64	{d16-d17}, [r0], r1
   298fc:	str	r4, [r0]
   29900:	blt	29a2c <__assert_fail@plt+0x1832c>
   29904:	lsl	r0, r4, #2
   29908:	str	r4, [fp, #-56]	; 0xffffffc8
   2990c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   29910:	cmp	r0, #0
   29914:	str	r0, [fp, #-48]	; 0xffffffd0
   29918:	beq	29fc0 <__assert_fail@plt+0x188c0>
   2991c:	ldr	r2, [r5, #20]
   29920:	ldr	r1, [r5, #24]
   29924:	mov	r6, r0
   29928:	lsl	r2, r2, #2
   2992c:	bl	11448 <memcpy@plt>
   29930:	ldr	r0, [sp, #80]	; 0x50
   29934:	mov	r2, r6
   29938:	mov	r6, r4
   2993c:	mov	lr, r2
   29940:	str	r0, [fp, #-60]	; 0xffffffc4
   29944:	ldr	r0, [sp, #56]	; 0x38
   29948:	str	r0, [fp, #-64]	; 0xffffffc0
   2994c:	lsl	r0, r6, #1
   29950:	lsl	r1, r6, #3
   29954:	mov	r4, lr
   29958:	str	r0, [sp, #24]
   2995c:	str	r0, [fp, #-56]	; 0xffffffc8
   29960:	mov	r0, r2
   29964:	bl	2b910 <__assert_fail@plt+0x1a210>
   29968:	cmp	r0, #0
   2996c:	beq	29fe0 <__assert_fail@plt+0x188e0>
   29970:	ldr	ip, [sp, #80]	; 0x50
   29974:	mov	lr, r0
   29978:	mov	r2, r0
   2997c:	str	r0, [fp, #-48]	; 0xffffffd0
   29980:	str	r0, [sp, #16]
   29984:	ldr	r0, [lr]
   29988:	str	r2, [sp, #32]
   2998c:	cmp	r0, r9
   29990:	ble	29a94 <__assert_fail@plt+0x18394>
   29994:	ldr	r3, [sp, #76]	; 0x4c
   29998:	cmp	r6, #1
   2999c:	mov	r1, r6
   299a0:	blt	29acc <__assert_fail@plt+0x183cc>
   299a4:	mov	sl, r3
   299a8:	ands	r1, r6, #3
   299ac:	sub	r2, r6, #1
   299b0:	mov	r4, r6
   299b4:	mov	r0, r6
   299b8:	beq	299e0 <__assert_fail@plt+0x182e0>
   299bc:	add	r7, lr, r4, lsl #2
   299c0:	mov	r0, r4
   299c4:	mov	r3, r7
   299c8:	ldr	r6, [r3, #-4]!
   299cc:	subs	r1, r1, #1
   299d0:	sub	r0, r0, #1
   299d4:	str	r6, [r7]
   299d8:	mov	r7, r3
   299dc:	bne	299c8 <__assert_fail@plt+0x182c8>
   299e0:	mov	r1, #0
   299e4:	cmp	r2, #3
   299e8:	bcc	29a20 <__assert_fail@plt+0x18320>
   299ec:	add	r2, lr, r0, lsl #2
   299f0:	sub	r2, r2, #8
   299f4:	ldr	r6, [r2]
   299f8:	ldr	r5, [r2, #4]
   299fc:	ldmdb	r2, {r3, r7}
   29a00:	sub	r0, r0, #4
   29a04:	cmp	r0, #0
   29a08:	stmda	r2, {r3, r7}
   29a0c:	str	r6, [r2, #4]
   29a10:	str	r5, [r2, #8]
   29a14:	sub	r2, r2, #16
   29a18:	bgt	299f4 <__assert_fail@plt+0x182f4>
   29a1c:	ldr	r5, [sp, #84]	; 0x54
   29a20:	mov	r6, r4
   29a24:	mov	r3, sl
   29a28:	b	29acc <__assert_fail@plt+0x183cc>
   29a2c:	ldr	r1, [sp, #8]
   29a30:	mov	r0, #0
   29a34:	str	r0, [r1]
   29a38:	str	r0, [r1, #4]
   29a3c:	str	r0, [r1, #8]
   29a40:	ldr	r0, [sp, #56]	; 0x38
   29a44:	str	ip, [fp, #-60]	; 0xffffffc4
   29a48:	str	r0, [fp, #-64]	; 0xffffffc0
   29a4c:	mov	r0, #1
   29a50:	str	r0, [fp, #-52]	; 0xffffffcc
   29a54:	str	r0, [fp, #-56]	; 0xffffffc8
   29a58:	mov	r0, #4
   29a5c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   29a60:	cmp	r0, #0
   29a64:	str	r0, [fp, #-48]	; 0xffffffd0
   29a68:	beq	29fc0 <__assert_fail@plt+0x188c0>
   29a6c:	ldr	ip, [sp, #80]	; 0x50
   29a70:	ldr	r3, [sp, #76]	; 0x4c
   29a74:	str	r9, [r0]
   29a78:	str	r0, [sp, #16]
   29a7c:	str	r0, [sp, #64]	; 0x40
   29a80:	str	r0, [sp, #32]
   29a84:	mov	r0, #1
   29a88:	mov	r6, #1
   29a8c:	str	r0, [sp, #24]
   29a90:	b	29adc <__assert_fail@plt+0x183dc>
   29a94:	add	r0, lr, r6, lsl #2
   29a98:	ldr	r3, [sp, #76]	; 0x4c
   29a9c:	mov	r1, r6
   29aa0:	ldr	r2, [r0, #-4]
   29aa4:	cmp	r2, r9
   29aa8:	ble	29acc <__assert_fail@plt+0x183cc>
   29aac:	sub	r1, r6, #2
   29ab0:	str	r2, [r0]
   29ab4:	sub	r1, r1, #1
   29ab8:	ldr	r2, [r0, #-8]
   29abc:	sub	r0, r0, #4
   29ac0:	cmp	r2, r9
   29ac4:	bgt	29ab0 <__assert_fail@plt+0x183b0>
   29ac8:	add	r1, r1, #2
   29acc:	add	r6, r6, #1
   29ad0:	str	r9, [lr, r1, lsl #2]
   29ad4:	str	lr, [sp, #64]	; 0x40
   29ad8:	str	r6, [fp, #-52]	; 0xffffffcc
   29adc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29ae0:	sub	r1, fp, #72	; 0x48
   29ae4:	ldr	sl, [r0, ip, lsl #2]
   29ae8:	str	r0, [sp, #48]	; 0x30
   29aec:	mov	r0, r3
   29af0:	bl	28940 <__assert_fail@plt+0x17240>
   29af4:	cmp	r0, #0
   29af8:	bne	29f98 <__assert_fail@plt+0x18898>
   29afc:	ldr	r5, [r5, #4]
   29b00:	ldr	ip, [sp, #80]	; 0x50
   29b04:	ldr	lr, [sp, #64]	; 0x40
   29b08:	str	r6, [sp, #44]	; 0x2c
   29b0c:	cmp	r5, #0
   29b10:	beq	29bb8 <__assert_fail@plt+0x184b8>
   29b14:	cmp	ip, #0
   29b18:	bmi	29bb4 <__assert_fail@plt+0x184b4>
   29b1c:	ldr	r6, [sp, #48]	; 0x30
   29b20:	ldr	r7, [sp, #12]
   29b24:	ldr	r1, [r5]
   29b28:	ldr	r0, [r6]
   29b2c:	cmp	r1, #0
   29b30:	bne	29b58 <__assert_fail@plt+0x18458>
   29b34:	str	r0, [r5]
   29b38:	add	r5, r5, #4
   29b3c:	add	r6, r6, #4
   29b40:	subs	r7, r7, #1
   29b44:	beq	29bb4 <__assert_fail@plt+0x184b4>
   29b48:	ldr	r1, [r5]
   29b4c:	ldr	r0, [r6]
   29b50:	cmp	r1, #0
   29b54:	beq	29b34 <__assert_fail@plt+0x18434>
   29b58:	cmp	r0, #0
   29b5c:	beq	29b38 <__assert_fail@plt+0x18438>
   29b60:	sub	r4, fp, #44	; 0x2c
   29b64:	add	r2, r0, #4
   29b68:	add	r1, r1, #4
   29b6c:	mov	r0, r4
   29b70:	bl	24bb8 <__assert_fail@plt+0x134b8>
   29b74:	cmp	r0, #0
   29b78:	str	r0, [fp, #-32]	; 0xffffffe0
   29b7c:	bne	29f98 <__assert_fail@plt+0x18898>
   29b80:	sub	r0, fp, #32
   29b84:	mov	r1, r8
   29b88:	mov	r2, r4
   29b8c:	bl	26334 <__assert_fail@plt+0x14c34>
   29b90:	str	r0, [r5]
   29b94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   29b98:	bl	13ddc <__assert_fail@plt+0x26dc>
   29b9c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   29ba0:	ldr	ip, [sp, #80]	; 0x50
   29ba4:	ldr	lr, [sp, #64]	; 0x40
   29ba8:	cmp	r9, #0
   29bac:	beq	29b38 <__assert_fail@plt+0x18438>
   29bb0:	b	29f58 <__assert_fail@plt+0x18858>
   29bb4:	ldr	r6, [sp, #44]	; 0x2c
   29bb8:	ldr	r0, [sp, #48]	; 0x30
   29bbc:	cmp	r6, #1
   29bc0:	str	sl, [r0, ip, lsl #2]
   29bc4:	blt	29c58 <__assert_fail@plt+0x18558>
   29bc8:	ldr	r4, [sp, #84]	; 0x54
   29bcc:	ldr	r5, [fp, #-80]	; 0xffffffb0
   29bd0:	subs	sl, r6, #1
   29bd4:	mov	r9, #20
   29bd8:	mov	r1, #0
   29bdc:	beq	29c08 <__assert_fail@plt+0x18508>
   29be0:	mov	r2, sl
   29be4:	mov	r0, #1
   29be8:	add	r3, r1, r2
   29bec:	lsr	r7, r3, #1
   29bf0:	ldr	r6, [lr, r7, lsl #2]
   29bf4:	cmp	r6, r5
   29bf8:	addlt	r1, r0, r3, lsr #1
   29bfc:	movge	r2, r7
   29c00:	cmp	r1, r2
   29c04:	bcc	29be8 <__assert_fail@plt+0x184e8>
   29c08:	ldr	r2, [lr, r1, lsl #2]
   29c0c:	mov	r3, #1
   29c10:	cmp	r2, r5
   29c14:	mov	r2, r1
   29c18:	mvnne	r2, #0
   29c1c:	cmp	r2, #0
   29c20:	bmi	29c6c <__assert_fail@plt+0x1856c>
   29c24:	ldr	r0, [sp, #44]	; 0x2c
   29c28:	cmp	r0, r2
   29c2c:	ble	29c6c <__assert_fail@plt+0x1856c>
   29c30:	cmp	sl, r2
   29c34:	str	sl, [fp, #-52]	; 0xffffffcc
   29c38:	ble	29c78 <__assert_fail@plt+0x18578>
   29c3c:	mvn	r2, r1
   29c40:	str	sl, [sp, #72]	; 0x48
   29c44:	add	sl, r0, r2
   29c48:	cmp	sl, #4
   29c4c:	bcs	29c88 <__assert_fail@plt+0x18588>
   29c50:	ldr	r9, [sp, #40]	; 0x28
   29c54:	b	29d3c <__assert_fail@plt+0x1863c>
   29c58:	ldr	r4, [sp, #84]	; 0x54
   29c5c:	ldr	r9, [sp, #40]	; 0x28
   29c60:	ldr	r3, [sp, #56]	; 0x38
   29c64:	ldr	r5, [fp, #-80]	; 0xffffffb0
   29c68:	b	29d6c <__assert_fail@plt+0x1866c>
   29c6c:	ldr	r0, [sp, #16]
   29c70:	ldr	r9, [sp, #40]	; 0x28
   29c74:	b	29d64 <__assert_fail@plt+0x18664>
   29c78:	ldr	r0, [sp, #16]
   29c7c:	ldr	r9, [sp, #40]	; 0x28
   29c80:	str	sl, [sp, #44]	; 0x2c
   29c84:	b	29d64 <__assert_fail@plt+0x18664>
   29c88:	bic	lr, sl, #3
   29c8c:	subs	r7, lr, #4
   29c90:	add	r6, r3, r7, lsr #2
   29c94:	and	ip, r6, #1
   29c98:	beq	29cdc <__assert_fail@plt+0x185dc>
   29c9c:	ldr	r3, [sp, #64]	; 0x40
   29ca0:	sub	r2, ip, r6
   29ca4:	mov	r6, #0
   29ca8:	add	r3, r3, r1, lsl #2
   29cac:	add	r7, r3, #4
   29cb0:	mov	r4, r3
   29cb4:	adds	r2, r2, #2
   29cb8:	add	r6, r6, #8
   29cbc:	vld1.32	{d16-d17}, [r7]
   29cc0:	vst1.32	{d16-d17}, [r4], r9
   29cc4:	vld1.32	{d16-d17}, [r4]
   29cc8:	add	r4, r3, #16
   29ccc:	add	r3, r3, #32
   29cd0:	vst1.32	{d16-d17}, [r4]
   29cd4:	bne	29cac <__assert_fail@plt+0x185ac>
   29cd8:	b	29ce0 <__assert_fail@plt+0x185e0>
   29cdc:	mov	r6, #0
   29ce0:	cmp	ip, #0
   29ce4:	beq	29d00 <__assert_fail@plt+0x18600>
   29ce8:	ldr	r7, [sp, #64]	; 0x40
   29cec:	add	r3, r1, r6
   29cf0:	add	r3, r7, r3, lsl #2
   29cf4:	add	r7, r3, #4
   29cf8:	vld1.32	{d16-d17}, [r7]
   29cfc:	vst1.32	{d16-d17}, [r3]
   29d00:	ldr	r4, [sp, #84]	; 0x54
   29d04:	ldr	r9, [sp, #40]	; 0x28
   29d08:	cmp	sl, lr
   29d0c:	bne	29d2c <__assert_fail@plt+0x1862c>
   29d10:	ldr	r0, [sp, #16]
   29d14:	ldr	ip, [sp, #80]	; 0x50
   29d18:	ldr	lr, [sp, #64]	; 0x40
   29d1c:	str	r0, [sp, #32]
   29d20:	ldr	r0, [sp, #72]	; 0x48
   29d24:	str	r0, [sp, #44]	; 0x2c
   29d28:	b	29d68 <__assert_fail@plt+0x18668>
   29d2c:	add	r1, r1, lr
   29d30:	ldr	ip, [sp, #80]	; 0x50
   29d34:	ldr	lr, [sp, #64]	; 0x40
   29d38:	ldr	r0, [sp, #44]	; 0x2c
   29d3c:	ldr	r6, [sp, #72]	; 0x48
   29d40:	sub	r2, r0, #1
   29d44:	add	r3, lr, r1, lsl #2
   29d48:	ldr	r3, [r3, #4]
   29d4c:	str	r3, [lr, r1, lsl #2]
   29d50:	add	r1, r1, #1
   29d54:	cmp	r2, r1
   29d58:	bne	29d44 <__assert_fail@plt+0x18644>
   29d5c:	ldr	r0, [sp, #16]
   29d60:	str	r6, [sp, #44]	; 0x2c
   29d64:	str	r0, [sp, #32]
   29d68:	ldr	r3, [sp, #56]	; 0x38
   29d6c:	ldr	r0, [sp, #76]	; 0x4c
   29d70:	add	r1, r5, r5, lsl #1
   29d74:	ldr	r0, [r0, #116]	; 0x74
   29d78:	add	r0, r0, r1, lsl #3
   29d7c:	b	29efc <__assert_fail@plt+0x187fc>
   29d80:	ldr	r0, [sp, #24]
   29d84:	ldr	r2, [sp, #32]
   29d88:	cmp	r0, r6
   29d8c:	beq	2994c <__assert_fail@plt+0x1824c>
   29d90:	b	29984 <__assert_fail@plt+0x18284>
   29d94:	ldr	r0, [r7]
   29d98:	cmp	r0, r3
   29d9c:	bne	29ef8 <__assert_fail@plt+0x187f8>
   29da0:	ldr	r0, [r7, #8]
   29da4:	ldr	r1, [r7, #12]
   29da8:	str	r5, [fp, #-80]	; 0xffffffb0
   29dac:	subs	r0, r1, r0
   29db0:	add	sl, r0, ip
   29db4:	beq	29ed8 <__assert_fail@plt+0x187d8>
   29db8:	ldr	r0, [r8, #12]
   29dbc:	add	r0, r0, r3, lsl #2
   29dc0:	ldr	r1, [r4, #12]
   29dc4:	cmp	sl, r1
   29dc8:	bgt	29ef4 <__assert_fail@plt+0x187f4>
   29dcc:	ldr	r1, [r4]
   29dd0:	ldr	r1, [r1, sl, lsl #2]
   29dd4:	cmp	r1, #0
   29dd8:	beq	29ef4 <__assert_fail@plt+0x187f4>
   29ddc:	ldr	r2, [r1, #8]
   29de0:	cmp	r2, #1
   29de4:	blt	29ef4 <__assert_fail@plt+0x187f4>
   29de8:	str	lr, [sp, #64]	; 0x40
   29dec:	mov	lr, r8
   29df0:	ldr	r8, [r0]
   29df4:	ldr	r0, [r1, #12]
   29df8:	subs	r2, r2, #1
   29dfc:	mov	r1, #0
   29e00:	mov	r4, #1
   29e04:	beq	29e28 <__assert_fail@plt+0x18728>
   29e08:	add	r3, r1, r2
   29e0c:	lsr	r6, r3, #1
   29e10:	ldr	r5, [r0, r6, lsl #2]
   29e14:	cmp	r5, r8
   29e18:	addlt	r1, r4, r3, lsr #1
   29e1c:	movge	r2, r6
   29e20:	cmp	r1, r2
   29e24:	bcc	29e08 <__assert_fail@plt+0x18708>
   29e28:	ldr	r0, [r0, r1, lsl #2]
   29e2c:	cmp	r0, r8
   29e30:	bne	2965c <__assert_fail@plt+0x17f5c>
   29e34:	ldr	r1, [sp, #76]	; 0x4c
   29e38:	str	r8, [sp, #52]	; 0x34
   29e3c:	ldr	r0, [r1, #108]	; 0x6c
   29e40:	cmp	r0, #1
   29e44:	blt	29674 <__assert_fail@plt+0x17f74>
   29e48:	ldr	r1, [r1, #116]	; 0x74
   29e4c:	mov	r9, #0
   29e50:	mov	r2, r0
   29e54:	add	r3, r2, r9
   29e58:	add	r3, r3, r3, lsr #31
   29e5c:	asr	r6, r3, #1
   29e60:	add	r5, r6, r6, lsl #1
   29e64:	add	r5, r1, r5, lsl #3
   29e68:	ldr	r5, [r5, #4]
   29e6c:	cmp	r5, ip
   29e70:	addlt	r9, r4, r3, asr #1
   29e74:	movge	r2, r6
   29e78:	cmp	r9, r2
   29e7c:	blt	29e54 <__assert_fail@plt+0x18754>
   29e80:	ldr	r3, [sp, #76]	; 0x4c
   29e84:	cmp	r9, r0
   29e88:	bge	29684 <__assert_fail@plt+0x17f84>
   29e8c:	ldr	r1, [r3, #116]	; 0x74
   29e90:	add	r2, r9, r9, lsl #1
   29e94:	add	r1, r1, r2, lsl #3
   29e98:	ldr	r1, [r1, #4]
   29e9c:	cmp	r1, ip
   29ea0:	mvnne	r9, #0
   29ea4:	cmp	r0, #1
   29ea8:	bge	29690 <__assert_fail@plt+0x17f90>
   29eac:	ldr	lr, [sp, #64]	; 0x40
   29eb0:	mov	r8, #0
   29eb4:	ldr	r3, [sp, #76]	; 0x4c
   29eb8:	cmp	r8, r0
   29ebc:	blt	296d8 <__assert_fail@plt+0x17fd8>
   29ec0:	mvn	r8, #0
   29ec4:	ldr	r5, [sp, #84]	; 0x54
   29ec8:	ldr	r4, [r5, #20]
   29ecc:	cmp	r4, #1
   29ed0:	bge	29700 <__assert_fail@plt+0x18000>
   29ed4:	b	29880 <__assert_fail@plt+0x18180>
   29ed8:	ldr	r0, [r8, #20]
   29edc:	add	r1, r3, r3, lsl #1
   29ee0:	add	r0, r0, r1, lsl #2
   29ee4:	ldr	r0, [r0, #8]
   29ee8:	ldr	r1, [r4, #12]
   29eec:	cmp	sl, r1
   29ef0:	ble	29dcc <__assert_fail@plt+0x186cc>
   29ef4:	ldr	r5, [fp, #-80]	; 0xffffffb0
   29ef8:	mov	r0, r7
   29efc:	add	r7, r0, #24
   29f00:	ldrb	r0, [r0, #20]
   29f04:	add	r5, r5, #1
   29f08:	cmp	r0, #0
   29f0c:	bne	29d94 <__assert_fail@plt+0x18694>
   29f10:	b	295dc <__assert_fail@plt+0x17edc>
   29f14:	mov	r4, #0
   29f18:	cmp	r4, lr
   29f1c:	blt	2956c <__assert_fail@plt+0x17e6c>
   29f20:	mov	r0, #0
   29f24:	str	r0, [fp, #-76]	; 0xffffffb4
   29f28:	mov	r9, #0
   29f2c:	mov	r0, r9
   29f30:	sub	sp, fp, #28
   29f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f38:	mov	r9, r0
   29f3c:	str	r0, [fp, #-76]	; 0xffffffb4
   29f40:	mov	r0, r9
   29f44:	sub	sp, fp, #28
   29f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f4c:	str	r2, [fp, #-76]	; 0xffffffb4
   29f50:	b	29f28 <__assert_fail@plt+0x18828>
   29f54:	mov	r9, #0
   29f58:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29f5c:	cmp	r0, #0
   29f60:	beq	29f6c <__assert_fail@plt+0x1886c>
   29f64:	mov	r0, lr
   29f68:	bl	13ddc <__assert_fail@plt+0x26dc>
   29f6c:	cmp	r9, #0
   29f70:	str	r9, [fp, #-76]	; 0xffffffb4
   29f74:	moveq	r9, #0
   29f78:	mov	r0, r9
   29f7c:	sub	sp, fp, #28
   29f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f84:	str	r0, [fp, #-72]	; 0xffffffb8
   29f88:	str	r9, [fp, #-76]	; 0xffffffb4
   29f8c:	mov	r0, r9
   29f90:	sub	sp, fp, #28
   29f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f98:	ldr	lr, [sp, #64]	; 0x40
   29f9c:	mov	r9, r0
   29fa0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29fa4:	cmp	r0, #0
   29fa8:	bne	29f64 <__assert_fail@plt+0x18864>
   29fac:	b	29f6c <__assert_fail@plt+0x1886c>
   29fb0:	mov	r9, r0
   29fb4:	mov	r0, r9
   29fb8:	sub	sp, fp, #28
   29fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29fc0:	mov	lr, #0
   29fc4:	mov	r9, #12
   29fc8:	str	lr, [fp, #-56]	; 0xffffffc8
   29fcc:	str	lr, [fp, #-52]	; 0xffffffcc
   29fd0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29fd4:	cmp	r0, #0
   29fd8:	bne	29f64 <__assert_fail@plt+0x18864>
   29fdc:	b	29f6c <__assert_fail@plt+0x1886c>
   29fe0:	mov	r9, #12
   29fe4:	mov	lr, r4
   29fe8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29fec:	cmp	r0, #0
   29ff0:	bne	29f64 <__assert_fail@plt+0x18864>
   29ff4:	b	29f6c <__assert_fail@plt+0x1886c>
   29ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ffc:	add	fp, sp, #28
   2a000:	sub	sp, sp, #4
   2a004:	mov	r9, r0
   2a008:	ldr	r0, [r1, #4]
   2a00c:	mov	r8, #0
   2a010:	cmp	r0, #0
   2a014:	beq	2a1d0 <__assert_fail@plt+0x18ad0>
   2a018:	mov	r5, r2
   2a01c:	ldr	r2, [r2, #4]
   2a020:	cmp	r2, #0
   2a024:	beq	2a1d0 <__assert_fail@plt+0x18ad0>
   2a028:	mov	sl, r1
   2a02c:	ldr	r1, [r9, #4]
   2a030:	ldr	r7, [r9]
   2a034:	add	r3, r2, r0
   2a038:	add	r6, r1, r3
   2a03c:	cmp	r6, r7
   2a040:	ble	2a070 <__assert_fail@plt+0x18970>
   2a044:	ldr	r0, [r9, #8]
   2a048:	add	r4, r7, r3
   2a04c:	lsl	r1, r4, #2
   2a050:	bl	2b910 <__assert_fail@plt+0x1a210>
   2a054:	cmp	r0, #0
   2a058:	beq	2a1dc <__assert_fail@plt+0x18adc>
   2a05c:	str	r4, [r9]
   2a060:	str	r0, [r9, #8]
   2a064:	ldr	r1, [r9, #4]
   2a068:	ldr	r2, [r5, #4]
   2a06c:	ldr	r0, [sl, #4]
   2a070:	ldr	lr, [r5, #8]
   2a074:	ldr	r4, [sl, #8]
   2a078:	add	r3, r0, r1
   2a07c:	sub	r7, r1, #1
   2a080:	add	ip, r3, r2
   2a084:	sub	r0, r0, #1
   2a088:	sub	r3, r2, #1
   2a08c:	ldr	r1, [lr, r3, lsl #2]
   2a090:	ldr	r6, [r4, r0, lsl #2]
   2a094:	cmp	r6, r1
   2a098:	beq	2a0c4 <__assert_fail@plt+0x189c4>
   2a09c:	blt	2a0b4 <__assert_fail@plt+0x189b4>
   2a0a0:	sub	r6, r0, #1
   2a0a4:	cmp	r0, #0
   2a0a8:	mov	r0, r6
   2a0ac:	bgt	2a090 <__assert_fail@plt+0x18990>
   2a0b0:	b	2a134 <__assert_fail@plt+0x18a34>
   2a0b4:	cmp	r2, #2
   2a0b8:	mov	r2, r3
   2a0bc:	bge	2a088 <__assert_fail@plt+0x18988>
   2a0c0:	b	2a134 <__assert_fail@plt+0x18a34>
   2a0c4:	cmp	r7, #0
   2a0c8:	bmi	2a110 <__assert_fail@plt+0x18a10>
   2a0cc:	ldr	r8, [r9, #8]
   2a0d0:	mov	r1, r7
   2a0d4:	ldr	r7, [r8, r1, lsl #2]
   2a0d8:	cmp	r7, r6
   2a0dc:	ble	2a0f4 <__assert_fail@plt+0x189f4>
   2a0e0:	sub	r7, r1, #1
   2a0e4:	cmp	r1, #0
   2a0e8:	mov	r1, r7
   2a0ec:	bgt	2a0d4 <__assert_fail@plt+0x189d4>
   2a0f0:	b	2a110 <__assert_fail@plt+0x18a10>
   2a0f4:	mov	r7, r1
   2a0f8:	bne	2a110 <__assert_fail@plt+0x18a10>
   2a0fc:	mov	r7, r1
   2a100:	cmp	r0, #1
   2a104:	mov	r8, #0
   2a108:	bge	2a128 <__assert_fail@plt+0x18a28>
   2a10c:	b	2a134 <__assert_fail@plt+0x18a34>
   2a110:	ldr	r1, [r9, #8]
   2a114:	sub	ip, ip, #1
   2a118:	str	r6, [r1, ip, lsl #2]
   2a11c:	cmp	r0, #1
   2a120:	mov	r8, #0
   2a124:	blt	2a134 <__assert_fail@plt+0x18a34>
   2a128:	cmp	r2, #2
   2a12c:	mov	r2, r3
   2a130:	bge	2a084 <__assert_fail@plt+0x18984>
   2a134:	ldr	r2, [r9, #4]
   2a138:	ldr	lr, [sl, #4]
   2a13c:	ldr	r4, [r5, #4]
   2a140:	ldr	r0, [r9, #8]
   2a144:	subs	r1, r2, #1
   2a148:	add	r3, r1, lr
   2a14c:	add	r3, r3, r4
   2a150:	sub	r7, r3, ip
   2a154:	add	r6, r7, #1
   2a158:	add	r5, r6, r2
   2a15c:	str	r5, [r9, #4]
   2a160:	blt	2a1c0 <__assert_fail@plt+0x18ac0>
   2a164:	cmp	r7, #0
   2a168:	bmi	2a1c0 <__assert_fail@plt+0x18ac0>
   2a16c:	add	r2, r2, r4
   2a170:	add	r2, r2, lr
   2a174:	sub	r2, r2, ip
   2a178:	add	r7, r0, r2, lsl #2
   2a17c:	ldr	r2, [r0, r1, lsl #2]
   2a180:	ldr	r5, [r0, r3, lsl #2]
   2a184:	cmp	r5, r2
   2a188:	bgt	2a1a4 <__assert_fail@plt+0x18aa4>
   2a18c:	str	r2, [r7, r1, lsl #2]
   2a190:	sub	r2, r1, #1
   2a194:	cmp	r1, #0
   2a198:	mov	r1, r2
   2a19c:	bgt	2a17c <__assert_fail@plt+0x18a7c>
   2a1a0:	b	2a1c0 <__assert_fail@plt+0x18ac0>
   2a1a4:	str	r5, [r7, r1, lsl #2]
   2a1a8:	sub	r7, r7, #4
   2a1ac:	subs	r6, r6, #1
   2a1b0:	sub	r3, r3, #1
   2a1b4:	mov	r2, #0
   2a1b8:	bne	2a17c <__assert_fail@plt+0x18a7c>
   2a1bc:	b	2a1c4 <__assert_fail@plt+0x18ac4>
   2a1c0:	mov	r2, r6
   2a1c4:	add	r1, r0, ip, lsl #2
   2a1c8:	lsl	r2, r2, #2
   2a1cc:	bl	11448 <memcpy@plt>
   2a1d0:	mov	r0, r8
   2a1d4:	sub	sp, fp, #28
   2a1d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1dc:	mov	r8, #12
   2a1e0:	mov	r0, r8
   2a1e4:	sub	sp, fp, #28
   2a1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a1f0:	add	fp, sp, #28
   2a1f4:	sub	sp, sp, #44	; 0x2c
   2a1f8:	mov	ip, r0
   2a1fc:	ldr	r0, [r0, #28]
   2a200:	str	r3, [sp, #4]
   2a204:	add	r3, r1, r1, lsl #1
   2a208:	mov	r4, #0
   2a20c:	str	r4, [sp, #36]	; 0x24
   2a210:	str	r4, [sp, #32]
   2a214:	str	r4, [sp, #40]	; 0x28
   2a218:	add	r3, r0, r3, lsl #2
   2a21c:	mov	r0, r3
   2a220:	ldr	lr, [r0, #4]!
   2a224:	str	r0, [sp, #24]
   2a228:	cmp	lr, #1
   2a22c:	blt	2a56c <__assert_fail@plt+0x18e6c>
   2a230:	add	r4, r3, #8
   2a234:	mov	r9, #0
   2a238:	mov	sl, #1
   2a23c:	str	r2, [sp, #28]
   2a240:	str	r3, [sp]
   2a244:	str	r1, [sp, #12]
   2a248:	str	ip, [sp, #8]
   2a24c:	str	r4, [sp, #20]
   2a250:	ldr	r3, [r4]
   2a254:	ldr	r0, [r3, r9, lsl #2]
   2a258:	cmp	r0, r1
   2a25c:	bne	2a27c <__assert_fail@plt+0x18b7c>
   2a260:	add	r9, r9, #1
   2a264:	cmp	r9, lr
   2a268:	bge	2a42c <__assert_fail@plt+0x18d2c>
   2a26c:	ldr	r3, [r4]
   2a270:	ldr	r0, [r3, r9, lsl #2]
   2a274:	cmp	r0, r1
   2a278:	beq	2a260 <__assert_fail@plt+0x18b60>
   2a27c:	ldr	r2, [ip]
   2a280:	add	r2, r2, r0, lsl #3
   2a284:	ldrb	r2, [r2, #4]
   2a288:	tst	r2, #8
   2a28c:	beq	2a260 <__assert_fail@plt+0x18b60>
   2a290:	ldr	r2, [ip, #20]
   2a294:	add	r0, r0, r0, lsl #1
   2a298:	mvn	r8, #0
   2a29c:	str	r0, [sp, #16]
   2a2a0:	add	r0, r2, r0, lsl #2
   2a2a4:	ldr	r7, [r0, #4]
   2a2a8:	ldr	r0, [r0, #8]
   2a2ac:	cmp	r7, #2
   2a2b0:	ldr	r5, [r0]
   2a2b4:	ldrge	r8, [r0, #4]
   2a2b8:	cmp	lr, #1
   2a2bc:	blt	2a2fc <__assert_fail@plt+0x18bfc>
   2a2c0:	mov	r2, #0
   2a2c4:	subs	r7, lr, #1
   2a2c8:	beq	2a2ec <__assert_fail@plt+0x18bec>
   2a2cc:	add	r6, r2, r7
   2a2d0:	lsr	r4, r6, #1
   2a2d4:	ldr	r0, [r3, r4, lsl #2]
   2a2d8:	cmp	r0, r5
   2a2dc:	addlt	r2, sl, r6, lsr #1
   2a2e0:	movge	r7, r4
   2a2e4:	cmp	r2, r7
   2a2e8:	bcc	2a2cc <__assert_fail@plt+0x18bcc>
   2a2ec:	ldr	r0, [r3, r2, lsl #2]
   2a2f0:	ldr	r4, [sp, #20]
   2a2f4:	cmp	r0, r5
   2a2f8:	beq	2a358 <__assert_fail@plt+0x18c58>
   2a2fc:	ldr	r0, [sp, #28]
   2a300:	ldr	r0, [r0, #4]
   2a304:	cmp	r0, #1
   2a308:	blt	2a358 <__assert_fail@plt+0x18c58>
   2a30c:	subs	r7, r0, #1
   2a310:	ldr	r0, [sp, #28]
   2a314:	mov	r6, #0
   2a318:	ldr	r1, [r0, #8]
   2a31c:	beq	2a340 <__assert_fail@plt+0x18c40>
   2a320:	add	r0, r6, r7
   2a324:	lsr	r4, r0, #1
   2a328:	ldr	ip, [r1, r4, lsl #2]
   2a32c:	cmp	ip, r5
   2a330:	addlt	r6, sl, r0, lsr #1
   2a334:	movge	r7, r4
   2a338:	cmp	r6, r7
   2a33c:	bcc	2a320 <__assert_fail@plt+0x18c20>
   2a340:	ldr	r0, [r1, r6, lsl #2]
   2a344:	ldr	r1, [sp, #12]
   2a348:	ldr	ip, [sp, #8]
   2a34c:	ldr	r4, [sp, #20]
   2a350:	cmp	r0, r5
   2a354:	beq	2a3f0 <__assert_fail@plt+0x18cf0>
   2a358:	cmp	r8, #1
   2a35c:	blt	2a260 <__assert_fail@plt+0x18b60>
   2a360:	cmp	lr, #1
   2a364:	blt	2a3a0 <__assert_fail@plt+0x18ca0>
   2a368:	mov	r2, #0
   2a36c:	subs	r7, lr, #1
   2a370:	beq	2a394 <__assert_fail@plt+0x18c94>
   2a374:	add	r0, r2, r7
   2a378:	lsr	r6, r0, #1
   2a37c:	ldr	r5, [r3, r6, lsl #2]
   2a380:	cmp	r5, r8
   2a384:	addlt	r2, sl, r0, lsr #1
   2a388:	movge	r7, r6
   2a38c:	cmp	r2, r7
   2a390:	bcc	2a374 <__assert_fail@plt+0x18c74>
   2a394:	ldr	r0, [r3, r2, lsl #2]
   2a398:	cmp	r0, r8
   2a39c:	beq	2a260 <__assert_fail@plt+0x18b60>
   2a3a0:	ldr	r2, [sp, #28]
   2a3a4:	ldr	r0, [r2, #4]
   2a3a8:	cmp	r0, #1
   2a3ac:	blt	2a260 <__assert_fail@plt+0x18b60>
   2a3b0:	ldr	r4, [r2, #8]
   2a3b4:	subs	r7, r0, #1
   2a3b8:	mov	r3, #0
   2a3bc:	beq	2a3e0 <__assert_fail@plt+0x18ce0>
   2a3c0:	add	r0, r3, r7
   2a3c4:	lsr	r6, r0, #1
   2a3c8:	ldr	r5, [r4, r6, lsl #2]
   2a3cc:	cmp	r5, r8
   2a3d0:	addlt	r3, sl, r0, lsr #1
   2a3d4:	movge	r7, r6
   2a3d8:	cmp	r3, r7
   2a3dc:	bcc	2a3c0 <__assert_fail@plt+0x18cc0>
   2a3e0:	ldr	r0, [r4, r3, lsl #2]
   2a3e4:	ldr	r4, [sp, #20]
   2a3e8:	cmp	r0, r8
   2a3ec:	bne	2a260 <__assert_fail@plt+0x18b60>
   2a3f0:	ldr	r0, [ip, #28]
   2a3f4:	ldr	r1, [sp, #16]
   2a3f8:	add	r2, r0, r1, lsl #2
   2a3fc:	ldr	r1, [sp, #4]
   2a400:	add	r0, sp, #32
   2a404:	bl	29ff8 <__assert_fail@plt+0x188f8>
   2a408:	cmp	r0, #0
   2a40c:	bne	2a65c <__assert_fail@plt+0x18f5c>
   2a410:	ldr	r0, [sp, #24]
   2a414:	ldr	r1, [sp, #12]
   2a418:	ldr	ip, [sp, #8]
   2a41c:	ldr	lr, [r0]
   2a420:	add	r9, r9, #1
   2a424:	cmp	r9, lr
   2a428:	blt	2a26c <__assert_fail@plt+0x18b6c>
   2a42c:	ldr	r2, [sp, #28]
   2a430:	ldr	r0, [sp]
   2a434:	cmp	lr, #0
   2a438:	mov	r4, #0
   2a43c:	ble	2a56c <__assert_fail@plt+0x18e6c>
   2a440:	ldr	r1, [sp, #36]	; 0x24
   2a444:	ldr	r9, [r0, #8]
   2a448:	ldr	r0, [sp, #40]	; 0x28
   2a44c:	subs	lr, r1, #1
   2a450:	str	r9, [sp, #20]
   2a454:	blt	2a580 <__assert_fail@plt+0x18e80>
   2a458:	mov	ip, #0
   2a45c:	mov	r7, #1
   2a460:	ldr	r6, [r9, ip, lsl #2]
   2a464:	cmp	lr, #0
   2a468:	mov	r1, #0
   2a46c:	bne	2a498 <__assert_fail@plt+0x18d98>
   2a470:	b	2a4c0 <__assert_fail@plt+0x18dc0>
   2a474:	ldr	r1, [sp, #24]
   2a478:	add	ip, ip, #1
   2a47c:	ldr	r1, [r1]
   2a480:	cmp	ip, r1
   2a484:	bge	2a648 <__assert_fail@plt+0x18f48>
   2a488:	ldr	r6, [r9, ip, lsl #2]
   2a48c:	cmp	lr, #0
   2a490:	mov	r1, #0
   2a494:	beq	2a4c0 <__assert_fail@plt+0x18dc0>
   2a498:	mov	r1, #0
   2a49c:	mov	r2, lr
   2a4a0:	add	r5, r1, r2
   2a4a4:	lsr	r4, r5, #1
   2a4a8:	ldr	r3, [r0, r4, lsl #2]
   2a4ac:	cmp	r3, r6
   2a4b0:	addlt	r1, r7, r5, lsr #1
   2a4b4:	movge	r2, r4
   2a4b8:	cmp	r1, r2
   2a4bc:	bcc	2a4a0 <__assert_fail@plt+0x18da0>
   2a4c0:	ldr	r1, [r0, r1, lsl #2]
   2a4c4:	cmp	r1, r6
   2a4c8:	ldr	r1, [sp, #28]
   2a4cc:	beq	2a474 <__assert_fail@plt+0x18d74>
   2a4d0:	ldr	sl, [r1, #4]
   2a4d4:	cmp	sl, #1
   2a4d8:	blt	2a474 <__assert_fail@plt+0x18d74>
   2a4dc:	ldr	r5, [r1, #8]
   2a4e0:	subs	r4, sl, #1
   2a4e4:	beq	2a514 <__assert_fail@plt+0x18e14>
   2a4e8:	mov	r1, #0
   2a4ec:	mov	r8, r4
   2a4f0:	add	r3, r1, r4
   2a4f4:	lsr	r2, r3, #1
   2a4f8:	ldr	r9, [r5, r2, lsl #2]
   2a4fc:	cmp	r9, r6
   2a500:	addlt	r1, r7, r3, lsr #1
   2a504:	movge	r4, r2
   2a508:	cmp	r1, r4
   2a50c:	bcc	2a4f0 <__assert_fail@plt+0x18df0>
   2a510:	b	2a51c <__assert_fail@plt+0x18e1c>
   2a514:	mov	r8, r4
   2a518:	mov	r1, #0
   2a51c:	ldr	r2, [r5, r1, lsl #2]
   2a520:	ldr	r3, [sp, #28]
   2a524:	ldr	r9, [sp, #20]
   2a528:	mov	r4, r1
   2a52c:	cmp	r2, r6
   2a530:	mvnne	r4, #0
   2a534:	cmp	r4, #0
   2a538:	bmi	2a474 <__assert_fail@plt+0x18d74>
   2a53c:	cmp	sl, r4
   2a540:	strgt	r8, [r3, #4]
   2a544:	cmpgt	r8, r4
   2a548:	ble	2a474 <__assert_fail@plt+0x18d74>
   2a54c:	add	r2, r5, r1, lsl #2
   2a550:	ldr	r2, [r2, #4]
   2a554:	str	r2, [r5, r1, lsl #2]
   2a558:	add	r1, r1, #1
   2a55c:	ldr	r2, [r3, #4]
   2a560:	cmp	r1, r2
   2a564:	blt	2a54c <__assert_fail@plt+0x18e4c>
   2a568:	b	2a474 <__assert_fail@plt+0x18d74>
   2a56c:	ldr	r0, [sp, #40]	; 0x28
   2a570:	bl	13ddc <__assert_fail@plt+0x26dc>
   2a574:	mov	r0, r4
   2a578:	sub	sp, fp, #28
   2a57c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a580:	ldr	r7, [r2, #4]
   2a584:	mov	sl, #0
   2a588:	mov	r9, #1
   2a58c:	cmp	r7, #1
   2a590:	bge	2a5b8 <__assert_fail@plt+0x18eb8>
   2a594:	b	2a59c <__assert_fail@plt+0x18e9c>
   2a598:	ldr	r2, [sp, #28]
   2a59c:	ldr	r1, [sp, #24]
   2a5a0:	add	sl, sl, #1
   2a5a4:	ldr	r1, [r1]
   2a5a8:	cmp	sl, r1
   2a5ac:	bge	2a648 <__assert_fail@plt+0x18f48>
   2a5b0:	cmp	r7, #1
   2a5b4:	blt	2a59c <__assert_fail@plt+0x18e9c>
   2a5b8:	ldr	r1, [sp, #20]
   2a5bc:	ldr	r6, [r2, #8]
   2a5c0:	subs	lr, r7, #1
   2a5c4:	mov	r5, #0
   2a5c8:	ldr	r1, [r1, sl, lsl #2]
   2a5cc:	beq	2a5f4 <__assert_fail@plt+0x18ef4>
   2a5d0:	mov	r4, lr
   2a5d4:	add	r3, r5, r4
   2a5d8:	lsr	r2, r3, #1
   2a5dc:	ldr	ip, [r6, r2, lsl #2]
   2a5e0:	cmp	ip, r1
   2a5e4:	addlt	r5, r9, r3, lsr #1
   2a5e8:	movge	r4, r2
   2a5ec:	cmp	r5, r4
   2a5f0:	bcc	2a5d4 <__assert_fail@plt+0x18ed4>
   2a5f4:	ldr	r2, [r6, r5, lsl #2]
   2a5f8:	cmp	r2, r1
   2a5fc:	mov	r1, r5
   2a600:	mvnne	r1, #0
   2a604:	cmp	r1, #0
   2a608:	bmi	2a598 <__assert_fail@plt+0x18e98>
   2a60c:	ldr	r2, [sp, #28]
   2a610:	cmp	r7, r1
   2a614:	ble	2a59c <__assert_fail@plt+0x18e9c>
   2a618:	cmp	lr, r1
   2a61c:	mov	r7, lr
   2a620:	str	lr, [r2, #4]
   2a624:	ble	2a59c <__assert_fail@plt+0x18e9c>
   2a628:	add	r1, r6, r5, lsl #2
   2a62c:	ldr	r1, [r1, #4]
   2a630:	str	r1, [r6, r5, lsl #2]
   2a634:	add	r5, r5, #1
   2a638:	ldr	r7, [r2, #4]
   2a63c:	cmp	r5, r7
   2a640:	blt	2a628 <__assert_fail@plt+0x18f28>
   2a644:	b	2a59c <__assert_fail@plt+0x18e9c>
   2a648:	mov	r4, #0
   2a64c:	bl	13ddc <__assert_fail@plt+0x26dc>
   2a650:	mov	r0, r4
   2a654:	sub	sp, fp, #28
   2a658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a65c:	mov	r1, r0
   2a660:	ldr	r0, [sp, #40]	; 0x28
   2a664:	mov	r4, r1
   2a668:	bl	13ddc <__assert_fail@plt+0x26dc>
   2a66c:	mov	r0, r4
   2a670:	sub	sp, fp, #28
   2a674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a67c:	add	fp, sp, #28
   2a680:	sub	sp, sp, #44	; 0x2c
   2a684:	ldr	r4, [r0, #84]	; 0x54
   2a688:	mov	r7, r0
   2a68c:	str	r1, [fp, #-32]	; 0xffffffe0
   2a690:	add	r1, r3, r3, lsl #1
   2a694:	mov	r6, r2
   2a698:	str	r3, [sp, #36]	; 0x24
   2a69c:	ldr	r0, [r4, #24]
   2a6a0:	add	r0, r0, r1, lsl #2
   2a6a4:	mov	r2, r0
   2a6a8:	ldr	r1, [r2, #4]!
   2a6ac:	str	r2, [sp, #28]
   2a6b0:	cmp	r1, #1
   2a6b4:	blt	2a980 <__assert_fail@plt+0x19280>
   2a6b8:	mov	r1, #1
   2a6bc:	cmp	r6, #31
   2a6c0:	add	r0, r0, #8
   2a6c4:	mov	sl, #0
   2a6c8:	mvn	r2, r1, lsl r6
   2a6cc:	lsl	r1, r1, r6
   2a6d0:	str	r0, [sp, #32]
   2a6d4:	str	r2, [sp, #16]
   2a6d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2a6dc:	str	r1, [sp, #24]
   2a6e0:	mov	r1, #0
   2a6e4:	movwgt	r1, #1
   2a6e8:	and	r3, r2, #2
   2a6ec:	and	r0, r2, #1
   2a6f0:	orr	r1, r1, r3, lsr #1
   2a6f4:	str	r3, [sp, #20]
   2a6f8:	str	r0, [sp, #8]
   2a6fc:	str	r1, [sp, #12]
   2a700:	b	2a718 <__assert_fail@plt+0x19018>
   2a704:	ldr	r0, [sp, #28]
   2a708:	add	sl, sl, #1
   2a70c:	ldr	r0, [r0]
   2a710:	cmp	sl, r0
   2a714:	bge	2a980 <__assert_fail@plt+0x19280>
   2a718:	ldr	r0, [sp, #32]
   2a71c:	ldr	r0, [r0]
   2a720:	ldr	r8, [r0, sl, lsl #2]
   2a724:	ldr	r0, [r4]
   2a728:	add	r1, r0, r8, lsl #3
   2a72c:	ldrb	r1, [r1, #4]
   2a730:	cmp	r1, #9
   2a734:	beq	2a780 <__assert_fail@plt+0x19080>
   2a738:	cmp	r1, #8
   2a73c:	beq	2a79c <__assert_fail@plt+0x1909c>
   2a740:	cmp	r1, #4
   2a744:	bne	2a704 <__assert_fail@plt+0x19004>
   2a748:	ldr	r0, [fp, #8]
   2a74c:	cmn	r0, #1
   2a750:	beq	2a704 <__assert_fail@plt+0x19004>
   2a754:	ldr	r1, [fp, #8]
   2a758:	ldr	r0, [r7, #116]	; 0x74
   2a75c:	cmp	r6, #31
   2a760:	add	r1, r1, r1, lsl #1
   2a764:	bgt	2a858 <__assert_fail@plt+0x19158>
   2a768:	add	r0, r0, r1, lsl #3
   2a76c:	add	r9, r0, #16
   2a770:	ldr	r0, [r9, #-16]
   2a774:	cmp	r0, r8
   2a778:	bne	2a7d0 <__assert_fail@plt+0x190d0>
   2a77c:	b	2a7ec <__assert_fail@plt+0x190ec>
   2a780:	ldr	r1, [sp, #20]
   2a784:	cmp	r1, #0
   2a788:	beq	2a704 <__assert_fail@plt+0x19004>
   2a78c:	ldr	r0, [r0, r8, lsl #3]
   2a790:	cmp	r0, r6
   2a794:	bne	2a704 <__assert_fail@plt+0x19004>
   2a798:	b	2a9a0 <__assert_fail@plt+0x192a0>
   2a79c:	ldr	r1, [sp, #8]
   2a7a0:	cmp	r1, #0
   2a7a4:	beq	2a704 <__assert_fail@plt+0x19004>
   2a7a8:	ldr	r0, [r0, r8, lsl #3]
   2a7ac:	cmp	r0, r6
   2a7b0:	bne	2a704 <__assert_fail@plt+0x19004>
   2a7b4:	b	2a9ac <__assert_fail@plt+0x192ac>
   2a7b8:	cmn	r0, #1
   2a7bc:	beq	2a978 <__assert_fail@plt+0x19278>
   2a7c0:	ldr	r0, [r9]
   2a7c4:	ldr	r1, [sp, #16]
   2a7c8:	and	r0, r0, r1
   2a7cc:	str	r0, [r9]
   2a7d0:	ldrb	r0, [r9, #4]
   2a7d4:	add	r9, r9, #24
   2a7d8:	cmp	r0, #0
   2a7dc:	beq	2a704 <__assert_fail@plt+0x19004>
   2a7e0:	ldr	r0, [r9, #-16]
   2a7e4:	cmp	r0, r8
   2a7e8:	bne	2a7d0 <__assert_fail@plt+0x190d0>
   2a7ec:	ldr	r0, [r9]
   2a7f0:	ldr	r1, [sp, #24]
   2a7f4:	tst	r0, r1
   2a7f8:	beq	2a7d0 <__assert_fail@plt+0x190d0>
   2a7fc:	ldr	r0, [r4, #20]
   2a800:	add	r1, r8, r8, lsl #1
   2a804:	add	r0, r0, r1, lsl #2
   2a808:	ldr	r0, [r0, #8]
   2a80c:	ldr	r3, [r0]
   2a810:	ldr	r0, [sp, #36]	; 0x24
   2a814:	cmp	r3, r0
   2a818:	beq	2a990 <__assert_fail@plt+0x19290>
   2a81c:	ldr	r0, [fp, #8]
   2a820:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2a824:	mov	r2, r6
   2a828:	str	r0, [sp]
   2a82c:	mov	r0, r7
   2a830:	bl	2a678 <__assert_fail@plt+0x18f78>
   2a834:	cmp	r0, #0
   2a838:	bne	2a7b8 <__assert_fail@plt+0x190b8>
   2a83c:	ldr	r0, [sp, #12]
   2a840:	cmp	r0, #0
   2a844:	beq	2a7c0 <__assert_fail@plt+0x190c0>
   2a848:	ldr	r0, [sp, #20]
   2a84c:	cmp	r0, #0
   2a850:	beq	2a7d0 <__assert_fail@plt+0x190d0>
   2a854:	b	2a9a0 <__assert_fail@plt+0x192a0>
   2a858:	ldr	r2, [sp, #12]
   2a85c:	cmp	r2, #0
   2a860:	beq	2a8ec <__assert_fail@plt+0x191ec>
   2a864:	add	r5, r0, r1, lsl #3
   2a868:	ldr	r0, [r5]
   2a86c:	cmp	r0, r8
   2a870:	bne	2a884 <__assert_fail@plt+0x19184>
   2a874:	b	2a8a0 <__assert_fail@plt+0x191a0>
   2a878:	ldr	r0, [sp, #20]
   2a87c:	cmp	r0, #0
   2a880:	bne	2a9a0 <__assert_fail@plt+0x192a0>
   2a884:	ldrb	r0, [r5, #20]
   2a888:	add	r5, r5, #24
   2a88c:	cmp	r0, #0
   2a890:	beq	2a704 <__assert_fail@plt+0x19004>
   2a894:	ldr	r0, [r5]
   2a898:	cmp	r0, r8
   2a89c:	bne	2a884 <__assert_fail@plt+0x19184>
   2a8a0:	ldr	r0, [r4, #20]
   2a8a4:	add	r1, r8, r8, lsl #1
   2a8a8:	add	r0, r0, r1, lsl #2
   2a8ac:	ldr	r0, [r0, #8]
   2a8b0:	ldr	r3, [r0]
   2a8b4:	ldr	r0, [sp, #36]	; 0x24
   2a8b8:	cmp	r3, r0
   2a8bc:	beq	2a990 <__assert_fail@plt+0x19290>
   2a8c0:	ldr	r0, [fp, #8]
   2a8c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2a8c8:	mov	r2, r6
   2a8cc:	str	r0, [sp]
   2a8d0:	mov	r0, r7
   2a8d4:	bl	2a678 <__assert_fail@plt+0x18f78>
   2a8d8:	cmp	r0, #0
   2a8dc:	beq	2a878 <__assert_fail@plt+0x19178>
   2a8e0:	cmn	r0, #1
   2a8e4:	bne	2a884 <__assert_fail@plt+0x19184>
   2a8e8:	b	2a978 <__assert_fail@plt+0x19278>
   2a8ec:	add	r0, r0, r1, lsl #3
   2a8f0:	add	r5, r0, #16
   2a8f4:	ldr	r0, [r5, #-16]
   2a8f8:	cmp	r0, r8
   2a8fc:	bne	2a914 <__assert_fail@plt+0x19214>
   2a900:	b	2a930 <__assert_fail@plt+0x19230>
   2a904:	ldr	r0, [r5]
   2a908:	ldr	r1, [sp, #16]
   2a90c:	and	r0, r0, r1
   2a910:	str	r0, [r5]
   2a914:	ldrb	r0, [r5, #4]
   2a918:	add	r5, r5, #24
   2a91c:	cmp	r0, #0
   2a920:	beq	2a704 <__assert_fail@plt+0x19004>
   2a924:	ldr	r0, [r5, #-16]
   2a928:	cmp	r0, r8
   2a92c:	bne	2a914 <__assert_fail@plt+0x19214>
   2a930:	ldr	r0, [r4, #20]
   2a934:	add	r1, r8, r8, lsl #1
   2a938:	add	r0, r0, r1, lsl #2
   2a93c:	ldr	r0, [r0, #8]
   2a940:	ldr	r3, [r0]
   2a944:	ldr	r0, [sp, #36]	; 0x24
   2a948:	cmp	r3, r0
   2a94c:	beq	2a990 <__assert_fail@plt+0x19290>
   2a950:	ldr	r0, [fp, #8]
   2a954:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2a958:	mov	r2, r6
   2a95c:	str	r0, [sp]
   2a960:	mov	r0, r7
   2a964:	bl	2a678 <__assert_fail@plt+0x18f78>
   2a968:	cmp	r0, #0
   2a96c:	beq	2a904 <__assert_fail@plt+0x19204>
   2a970:	cmn	r0, #1
   2a974:	bne	2a914 <__assert_fail@plt+0x19214>
   2a978:	sub	sp, fp, #28
   2a97c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a980:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2a984:	ubfx	r0, r0, #1, #1
   2a988:	sub	sp, fp, #28
   2a98c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a990:	ldr	r0, [sp, #8]
   2a994:	rsb	r0, r0, #0
   2a998:	sub	sp, fp, #28
   2a99c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a9a0:	mov	r0, #0
   2a9a4:	sub	sp, fp, #28
   2a9a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a9ac:	mvn	r0, #0
   2a9b0:	sub	sp, fp, #28
   2a9b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a9b8:	push	{r4, r5, fp, lr}
   2a9bc:	add	fp, sp, #8
   2a9c0:	mov	r4, r1
   2a9c4:	mov	r1, #0
   2a9c8:	mov	r5, r0
   2a9cc:	mov	r2, r4
   2a9d0:	bl	1164c <memchr@plt>
   2a9d4:	sub	r1, r0, r5
   2a9d8:	cmp	r0, #0
   2a9dc:	addne	r4, r1, #1
   2a9e0:	mov	r0, r4
   2a9e4:	pop	{r4, r5, fp, pc}
   2a9e8:	push	{r4, sl, fp, lr}
   2a9ec:	add	fp, sp, #8
   2a9f0:	ldrb	r3, [r0]
   2a9f4:	ldrb	ip, [r1]
   2a9f8:	cmp	r3, #45	; 0x2d
   2a9fc:	bne	2aad4 <__assert_fail@plt+0x193d4>
   2aa00:	ldrb	r3, [r0, #1]!
   2aa04:	cmp	r3, #48	; 0x30
   2aa08:	beq	2aa00 <__assert_fail@plt+0x19300>
   2aa0c:	cmp	ip, #45	; 0x2d
   2aa10:	bne	2abe4 <__assert_fail@plt+0x194e4>
   2aa14:	ldrb	ip, [r1, #1]!
   2aa18:	cmp	ip, #48	; 0x30
   2aa1c:	beq	2aa14 <__assert_fail@plt+0x19314>
   2aa20:	sub	lr, r3, #48	; 0x30
   2aa24:	cmp	lr, #9
   2aa28:	bhi	2aa68 <__assert_fail@plt+0x19368>
   2aa2c:	cmp	ip, r3
   2aa30:	bne	2aa68 <__assert_fail@plt+0x19368>
   2aa34:	mov	r2, #0
   2aa38:	add	r3, r1, r2
   2aa3c:	ldrb	ip, [r3, #1]
   2aa40:	add	r3, r0, r2
   2aa44:	add	r2, r2, #1
   2aa48:	ldrb	r3, [r3, #1]
   2aa4c:	sub	lr, r3, #48	; 0x30
   2aa50:	cmp	ip, r3
   2aa54:	bne	2aa60 <__assert_fail@plt+0x19360>
   2aa58:	cmp	lr, #10
   2aa5c:	bcc	2aa38 <__assert_fail@plt+0x19338>
   2aa60:	add	r1, r1, r2
   2aa64:	add	r0, r0, r2
   2aa68:	cmp	lr, #9
   2aa6c:	mov	r2, #0
   2aa70:	mov	lr, #0
   2aa74:	bhi	2aa94 <__assert_fail@plt+0x19394>
   2aa78:	add	r0, r0, #1
   2aa7c:	mov	lr, #0
   2aa80:	ldrb	r4, [r0, lr]
   2aa84:	add	lr, lr, #1
   2aa88:	sub	r4, r4, #48	; 0x30
   2aa8c:	cmp	r4, #10
   2aa90:	bcc	2aa80 <__assert_fail@plt+0x19380>
   2aa94:	sub	r0, ip, #48	; 0x30
   2aa98:	cmp	r0, #9
   2aa9c:	bhi	2aabc <__assert_fail@plt+0x193bc>
   2aaa0:	add	r0, r1, #1
   2aaa4:	mov	r2, #0
   2aaa8:	ldrb	r1, [r0, r2]
   2aaac:	add	r2, r2, #1
   2aab0:	sub	r1, r1, #48	; 0x30
   2aab4:	cmp	r1, #10
   2aab8:	bcc	2aaa8 <__assert_fail@plt+0x193a8>
   2aabc:	cmp	lr, r2
   2aac0:	bne	2abfc <__assert_fail@plt+0x194fc>
   2aac4:	cmp	lr, #0
   2aac8:	subne	lr, ip, r3
   2aacc:	mov	r0, lr
   2aad0:	pop	{r4, sl, fp, pc}
   2aad4:	cmp	ip, #45	; 0x2d
   2aad8:	bne	2ab2c <__assert_fail@plt+0x1942c>
   2aadc:	add	r1, r1, #1
   2aae0:	ldrb	r2, [r1], #1
   2aae4:	cmp	r2, #48	; 0x30
   2aae8:	beq	2aae0 <__assert_fail@plt+0x193e0>
   2aaec:	sub	r1, r2, #48	; 0x30
   2aaf0:	mov	lr, #1
   2aaf4:	cmp	r1, #10
   2aaf8:	bcc	2abf4 <__assert_fail@plt+0x194f4>
   2aafc:	cmp	r3, #48	; 0x30
   2ab00:	bne	2ab14 <__assert_fail@plt+0x19414>
   2ab04:	add	r0, r0, #1
   2ab08:	ldrb	r3, [r0], #1
   2ab0c:	cmp	r3, #48	; 0x30
   2ab10:	beq	2ab08 <__assert_fail@plt+0x19408>
   2ab14:	sub	r0, r3, #48	; 0x30
   2ab18:	mov	lr, #0
   2ab1c:	cmp	r0, #10
   2ab20:	movwcc	lr, #1
   2ab24:	mov	r0, lr
   2ab28:	pop	{r4, sl, fp, pc}
   2ab2c:	cmp	r3, #48	; 0x30
   2ab30:	bne	2ab40 <__assert_fail@plt+0x19440>
   2ab34:	ldrb	r3, [r0, #1]!
   2ab38:	b	2ab2c <__assert_fail@plt+0x1942c>
   2ab3c:	ldrb	ip, [r1, #1]!
   2ab40:	cmp	ip, #48	; 0x30
   2ab44:	beq	2ab3c <__assert_fail@plt+0x1943c>
   2ab48:	sub	r2, r3, #48	; 0x30
   2ab4c:	cmp	r2, #9
   2ab50:	bhi	2ab78 <__assert_fail@plt+0x19478>
   2ab54:	cmp	r3, ip
   2ab58:	bne	2ab78 <__assert_fail@plt+0x19478>
   2ab5c:	ldrb	r3, [r0, #1]!
   2ab60:	ldrb	ip, [r1, #1]!
   2ab64:	sub	r2, r3, #48	; 0x30
   2ab68:	cmp	r3, ip
   2ab6c:	bne	2ab78 <__assert_fail@plt+0x19478>
   2ab70:	cmp	r2, #10
   2ab74:	bcc	2ab5c <__assert_fail@plt+0x1945c>
   2ab78:	mov	r4, #0
   2ab7c:	cmp	r2, #9
   2ab80:	mov	lr, #0
   2ab84:	bhi	2aba4 <__assert_fail@plt+0x194a4>
   2ab88:	add	r0, r0, #1
   2ab8c:	mov	lr, #0
   2ab90:	ldrb	r2, [r0, lr]
   2ab94:	add	lr, lr, #1
   2ab98:	sub	r2, r2, #48	; 0x30
   2ab9c:	cmp	r2, #10
   2aba0:	bcc	2ab90 <__assert_fail@plt+0x19490>
   2aba4:	sub	r0, ip, #48	; 0x30
   2aba8:	cmp	r0, #9
   2abac:	bhi	2abcc <__assert_fail@plt+0x194cc>
   2abb0:	add	r0, r1, #1
   2abb4:	mov	r4, #0
   2abb8:	ldrb	r1, [r0, r4]
   2abbc:	add	r4, r4, #1
   2abc0:	sub	r1, r1, #48	; 0x30
   2abc4:	cmp	r1, #10
   2abc8:	bcc	2abb8 <__assert_fail@plt+0x194b8>
   2abcc:	cmp	lr, r4
   2abd0:	bne	2ac0c <__assert_fail@plt+0x1950c>
   2abd4:	cmp	lr, #0
   2abd8:	subne	lr, r3, ip
   2abdc:	mov	r0, lr
   2abe0:	pop	{r4, sl, fp, pc}
   2abe4:	sub	r0, r3, #48	; 0x30
   2abe8:	mvn	lr, #0
   2abec:	cmp	r0, #10
   2abf0:	bcs	2ac1c <__assert_fail@plt+0x1951c>
   2abf4:	mov	r0, lr
   2abf8:	pop	{r4, sl, fp, pc}
   2abfc:	mvn	lr, #0
   2ac00:	movwcc	lr, #1
   2ac04:	mov	r0, lr
   2ac08:	pop	{r4, sl, fp, pc}
   2ac0c:	mov	lr, #1
   2ac10:	mvncc	lr, #0
   2ac14:	mov	r0, lr
   2ac18:	pop	{r4, sl, fp, pc}
   2ac1c:	cmp	ip, #48	; 0x30
   2ac20:	bne	2ac34 <__assert_fail@plt+0x19534>
   2ac24:	add	r0, r1, #1
   2ac28:	ldrb	ip, [r0], #1
   2ac2c:	cmp	ip, #48	; 0x30
   2ac30:	beq	2ac28 <__assert_fail@plt+0x19528>
   2ac34:	sub	r0, ip, #48	; 0x30
   2ac38:	mov	lr, #0
   2ac3c:	cmp	r0, #10
   2ac40:	mvncc	lr, #0
   2ac44:	mov	r0, lr
   2ac48:	pop	{r4, sl, fp, pc}
   2ac4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ac50:	add	fp, sp, #24
   2ac54:	sub	sp, sp, #32
   2ac58:	ldr	r6, [fp, #12]
   2ac5c:	ldr	r7, [fp, #8]
   2ac60:	mov	r4, r2
   2ac64:	mov	r8, r0
   2ac68:	cmp	r1, #0
   2ac6c:	beq	2ac94 <__assert_fail@plt+0x19594>
   2ac70:	movw	r2, #52841	; 0xce69
   2ac74:	mov	r5, r1
   2ac78:	str	r3, [sp, #4]
   2ac7c:	str	r4, [sp]
   2ac80:	mov	r0, r8
   2ac84:	mov	r1, #1
   2ac88:	movt	r2, #2
   2ac8c:	mov	r3, r5
   2ac90:	b	2acac <__assert_fail@plt+0x195ac>
   2ac94:	movw	r2, #52853	; 0xce75
   2ac98:	str	r3, [sp]
   2ac9c:	mov	r0, r8
   2aca0:	mov	r1, #1
   2aca4:	mov	r3, r4
   2aca8:	movt	r2, #2
   2acac:	bl	11640 <__fprintf_chk@plt>
   2acb0:	movw	r1, #52860	; 0xce7c
   2acb4:	mov	r0, #0
   2acb8:	mov	r2, #5
   2acbc:	movt	r1, #2
   2acc0:	bl	11484 <dcgettext@plt>
   2acc4:	movw	r2, #53578	; 0xd14a
   2acc8:	mov	r3, r0
   2accc:	movw	r0, #2022	; 0x7e6
   2acd0:	mov	r1, #1
   2acd4:	movt	r2, #2
   2acd8:	str	r0, [sp]
   2acdc:	mov	r0, r8
   2ace0:	bl	11640 <__fprintf_chk@plt>
   2ace4:	movw	r4, #51466	; 0xc90a
   2ace8:	mov	r1, r8
   2acec:	movt	r4, #2
   2acf0:	mov	r0, r4
   2acf4:	bl	113a0 <fputs_unlocked@plt>
   2acf8:	movw	r1, #52864	; 0xce80
   2acfc:	mov	r0, #0
   2ad00:	mov	r2, #5
   2ad04:	movt	r1, #2
   2ad08:	bl	11484 <dcgettext@plt>
   2ad0c:	movw	r3, #53035	; 0xcf2b
   2ad10:	mov	r2, r0
   2ad14:	mov	r0, r8
   2ad18:	mov	r1, #1
   2ad1c:	movt	r3, #2
   2ad20:	bl	11640 <__fprintf_chk@plt>
   2ad24:	mov	r0, r4
   2ad28:	mov	r1, r8
   2ad2c:	bl	113a0 <fputs_unlocked@plt>
   2ad30:	cmp	r6, #9
   2ad34:	bhi	2ad70 <__assert_fail@plt+0x19670>
   2ad38:	add	r0, pc, #0
   2ad3c:	ldr	pc, [r0, r6, lsl #2]
   2ad40:	andeq	sl, r2, r8, ror #26
   2ad44:	andeq	sl, r2, ip, ror sp
   2ad48:	andeq	sl, r2, ip, lsr #27
   2ad4c:	ldrdeq	sl, [r2], -r4
   2ad50:	strdeq	sl, [r2], -ip
   2ad54:	andeq	sl, r2, r4, lsr #28
   2ad58:	andeq	sl, r2, ip, asr #28
   2ad5c:	andeq	sl, r2, r4, lsl #29
   2ad60:	andeq	sl, r2, ip, lsr #30
   2ad64:	ldrdeq	sl, [r2], -r4
   2ad68:	sub	sp, fp, #24
   2ad6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ad70:	movw	r1, #53388	; 0xd08c
   2ad74:	movt	r1, #2
   2ad78:	b	2aedc <__assert_fail@plt+0x197dc>
   2ad7c:	movw	r1, #53069	; 0xcf4d
   2ad80:	mov	r0, #0
   2ad84:	mov	r2, #5
   2ad88:	movt	r1, #2
   2ad8c:	bl	11484 <dcgettext@plt>
   2ad90:	ldr	r3, [r7]
   2ad94:	mov	r2, r0
   2ad98:	mov	r0, r8
   2ad9c:	mov	r1, #1
   2ada0:	sub	sp, fp, #24
   2ada4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ada8:	b	11640 <__fprintf_chk@plt>
   2adac:	movw	r1, #53085	; 0xcf5d
   2adb0:	mov	r0, #0
   2adb4:	mov	r2, #5
   2adb8:	movt	r1, #2
   2adbc:	bl	11484 <dcgettext@plt>
   2adc0:	mov	r2, r0
   2adc4:	ldr	r3, [r7]
   2adc8:	ldr	r0, [r7, #4]
   2adcc:	str	r0, [sp]
   2add0:	b	2aec0 <__assert_fail@plt+0x197c0>
   2add4:	movw	r1, #53108	; 0xcf74
   2add8:	mov	r0, #0
   2addc:	mov	r2, #5
   2ade0:	movt	r1, #2
   2ade4:	bl	11484 <dcgettext@plt>
   2ade8:	mov	r2, r0
   2adec:	ldr	r3, [r7]
   2adf0:	ldmib	r7, {r0, r1}
   2adf4:	stm	sp, {r0, r1}
   2adf8:	b	2aec0 <__assert_fail@plt+0x197c0>
   2adfc:	movw	r1, #53136	; 0xcf90
   2ae00:	mov	r0, #0
   2ae04:	mov	r2, #5
   2ae08:	movt	r1, #2
   2ae0c:	bl	11484 <dcgettext@plt>
   2ae10:	ldr	r3, [r7]
   2ae14:	mov	r2, r0
   2ae18:	ldmib	r7, {r0, r1, r7}
   2ae1c:	stm	sp, {r0, r1, r7}
   2ae20:	b	2aec0 <__assert_fail@plt+0x197c0>
   2ae24:	movw	r1, #53168	; 0xcfb0
   2ae28:	mov	r0, #0
   2ae2c:	mov	r2, #5
   2ae30:	movt	r1, #2
   2ae34:	bl	11484 <dcgettext@plt>
   2ae38:	ldr	r3, [r7]
   2ae3c:	mov	r2, r0
   2ae40:	ldmib	r7, {r0, r1, r6, r7}
   2ae44:	stm	sp, {r0, r1, r6, r7}
   2ae48:	b	2aec0 <__assert_fail@plt+0x197c0>
   2ae4c:	movw	r1, #53204	; 0xcfd4
   2ae50:	mov	r0, #0
   2ae54:	mov	r2, #5
   2ae58:	movt	r1, #2
   2ae5c:	bl	11484 <dcgettext@plt>
   2ae60:	mov	r2, r0
   2ae64:	ldr	r3, [r7]
   2ae68:	ldmib	r7, {r0, r1, r6}
   2ae6c:	ldr	r5, [r7, #16]
   2ae70:	ldr	r7, [r7, #20]
   2ae74:	stm	sp, {r0, r1, r6}
   2ae78:	str	r5, [sp, #12]
   2ae7c:	str	r7, [sp, #16]
   2ae80:	b	2aec0 <__assert_fail@plt+0x197c0>
   2ae84:	movw	r1, #53244	; 0xcffc
   2ae88:	mov	r0, #0
   2ae8c:	mov	r2, #5
   2ae90:	movt	r1, #2
   2ae94:	bl	11484 <dcgettext@plt>
   2ae98:	mov	r2, r0
   2ae9c:	ldr	r3, [r7]
   2aea0:	ldmib	r7, {r0, r1, r6}
   2aea4:	ldr	r5, [r7, #16]
   2aea8:	ldr	r4, [r7, #20]
   2aeac:	ldr	r7, [r7, #24]
   2aeb0:	stm	sp, {r0, r1, r6}
   2aeb4:	str	r5, [sp, #12]
   2aeb8:	str	r4, [sp, #16]
   2aebc:	str	r7, [sp, #20]
   2aec0:	mov	r0, r8
   2aec4:	mov	r1, #1
   2aec8:	bl	11640 <__fprintf_chk@plt>
   2aecc:	sub	sp, fp, #24
   2aed0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2aed4:	movw	r1, #53336	; 0xd058
   2aed8:	movt	r1, #2
   2aedc:	mov	r0, #0
   2aee0:	mov	r2, #5
   2aee4:	bl	11484 <dcgettext@plt>
   2aee8:	mov	ip, r0
   2aeec:	ldr	r3, [r7]
   2aef0:	ldr	r0, [r7, #4]
   2aef4:	ldr	r1, [r7, #8]
   2aef8:	ldr	r6, [r7, #12]
   2aefc:	ldr	r5, [r7, #16]
   2af00:	ldr	r4, [r7, #20]
   2af04:	ldr	r2, [r7, #24]
   2af08:	ldr	lr, [r7, #28]
   2af0c:	ldr	r7, [r7, #32]
   2af10:	stm	sp, {r0, r1, r6}
   2af14:	str	r5, [sp, #12]
   2af18:	str	r4, [sp, #16]
   2af1c:	str	r2, [sp, #20]
   2af20:	str	lr, [sp, #24]
   2af24:	str	r7, [sp, #28]
   2af28:	b	2af70 <__assert_fail@plt+0x19870>
   2af2c:	movw	r1, #53288	; 0xd028
   2af30:	mov	r0, #0
   2af34:	mov	r2, #5
   2af38:	movt	r1, #2
   2af3c:	bl	11484 <dcgettext@plt>
   2af40:	mov	ip, r0
   2af44:	ldr	r3, [r7]
   2af48:	ldmib	r7, {r0, r1, r6}
   2af4c:	ldr	r5, [r7, #16]
   2af50:	ldr	r4, [r7, #20]
   2af54:	ldr	r2, [r7, #24]
   2af58:	ldr	r7, [r7, #28]
   2af5c:	stm	sp, {r0, r1, r6}
   2af60:	str	r5, [sp, #12]
   2af64:	str	r4, [sp, #16]
   2af68:	str	r2, [sp, #20]
   2af6c:	str	r7, [sp, #24]
   2af70:	mov	r0, r8
   2af74:	mov	r1, #1
   2af78:	mov	r2, ip
   2af7c:	bl	11640 <__fprintf_chk@plt>
   2af80:	sub	sp, fp, #24
   2af84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2af88:	push	{r4, sl, fp, lr}
   2af8c:	add	fp, sp, #8
   2af90:	sub	sp, sp, #8
   2af94:	ldr	ip, [fp, #8]
   2af98:	mov	lr, #0
   2af9c:	ldr	r4, [ip, lr, lsl #2]
   2afa0:	add	lr, lr, #1
   2afa4:	cmp	r4, #0
   2afa8:	bne	2af9c <__assert_fail@plt+0x1989c>
   2afac:	sub	r4, lr, #1
   2afb0:	str	ip, [sp]
   2afb4:	str	r4, [sp, #4]
   2afb8:	bl	2ac4c <__assert_fail@plt+0x1954c>
   2afbc:	sub	sp, fp, #8
   2afc0:	pop	{r4, sl, fp, pc}
   2afc4:	push	{fp, lr}
   2afc8:	mov	fp, sp
   2afcc:	sub	sp, sp, #48	; 0x30
   2afd0:	ldr	ip, [fp, #8]
   2afd4:	ldr	lr, [ip]
   2afd8:	cmp	lr, #0
   2afdc:	str	lr, [sp, #8]
   2afe0:	beq	2b07c <__assert_fail@plt+0x1997c>
   2afe4:	ldr	lr, [ip, #4]
   2afe8:	cmp	lr, #0
   2afec:	str	lr, [sp, #12]
   2aff0:	beq	2b084 <__assert_fail@plt+0x19984>
   2aff4:	ldr	lr, [ip, #8]
   2aff8:	cmp	lr, #0
   2affc:	str	lr, [sp, #16]
   2b000:	beq	2b08c <__assert_fail@plt+0x1998c>
   2b004:	ldr	lr, [ip, #12]
   2b008:	cmp	lr, #0
   2b00c:	str	lr, [sp, #20]
   2b010:	beq	2b094 <__assert_fail@plt+0x19994>
   2b014:	ldr	lr, [ip, #16]
   2b018:	cmp	lr, #0
   2b01c:	str	lr, [sp, #24]
   2b020:	beq	2b09c <__assert_fail@plt+0x1999c>
   2b024:	ldr	lr, [ip, #20]
   2b028:	cmp	lr, #0
   2b02c:	str	lr, [sp, #28]
   2b030:	beq	2b0a4 <__assert_fail@plt+0x199a4>
   2b034:	ldr	lr, [ip, #24]
   2b038:	cmp	lr, #0
   2b03c:	str	lr, [sp, #32]
   2b040:	beq	2b0ac <__assert_fail@plt+0x199ac>
   2b044:	ldr	lr, [ip, #28]
   2b048:	cmp	lr, #0
   2b04c:	str	lr, [sp, #36]	; 0x24
   2b050:	beq	2b0b4 <__assert_fail@plt+0x199b4>
   2b054:	ldr	lr, [ip, #32]
   2b058:	cmp	lr, #0
   2b05c:	str	lr, [sp, #40]	; 0x28
   2b060:	beq	2b0bc <__assert_fail@plt+0x199bc>
   2b064:	ldr	lr, [ip, #36]	; 0x24
   2b068:	mov	ip, #10
   2b06c:	cmp	lr, #0
   2b070:	str	lr, [sp, #44]	; 0x2c
   2b074:	movweq	ip, #9
   2b078:	b	2b0c0 <__assert_fail@plt+0x199c0>
   2b07c:	mov	ip, #0
   2b080:	b	2b0c0 <__assert_fail@plt+0x199c0>
   2b084:	mov	ip, #1
   2b088:	b	2b0c0 <__assert_fail@plt+0x199c0>
   2b08c:	mov	ip, #2
   2b090:	b	2b0c0 <__assert_fail@plt+0x199c0>
   2b094:	mov	ip, #3
   2b098:	b	2b0c0 <__assert_fail@plt+0x199c0>
   2b09c:	mov	ip, #4
   2b0a0:	b	2b0c0 <__assert_fail@plt+0x199c0>
   2b0a4:	mov	ip, #5
   2b0a8:	b	2b0c0 <__assert_fail@plt+0x199c0>
   2b0ac:	mov	ip, #6
   2b0b0:	b	2b0c0 <__assert_fail@plt+0x199c0>
   2b0b4:	mov	ip, #7
   2b0b8:	b	2b0c0 <__assert_fail@plt+0x199c0>
   2b0bc:	mov	ip, #8
   2b0c0:	add	lr, sp, #8
   2b0c4:	str	ip, [sp, #4]
   2b0c8:	str	lr, [sp]
   2b0cc:	bl	2ac4c <__assert_fail@plt+0x1954c>
   2b0d0:	mov	sp, fp
   2b0d4:	pop	{fp, pc}
   2b0d8:	push	{fp, lr}
   2b0dc:	mov	fp, sp
   2b0e0:	sub	sp, sp, #56	; 0x38
   2b0e4:	add	ip, fp, #8
   2b0e8:	str	ip, [sp, #12]
   2b0ec:	ldr	lr, [fp, #8]
   2b0f0:	cmp	lr, #0
   2b0f4:	str	lr, [sp, #16]
   2b0f8:	beq	2b194 <__assert_fail@plt+0x19a94>
   2b0fc:	ldr	lr, [ip, #4]
   2b100:	cmp	lr, #0
   2b104:	str	lr, [sp, #20]
   2b108:	beq	2b19c <__assert_fail@plt+0x19a9c>
   2b10c:	ldr	lr, [ip, #8]
   2b110:	cmp	lr, #0
   2b114:	str	lr, [sp, #24]
   2b118:	beq	2b1a4 <__assert_fail@plt+0x19aa4>
   2b11c:	ldr	lr, [ip, #12]
   2b120:	cmp	lr, #0
   2b124:	str	lr, [sp, #28]
   2b128:	beq	2b1ac <__assert_fail@plt+0x19aac>
   2b12c:	ldr	lr, [ip, #16]
   2b130:	cmp	lr, #0
   2b134:	str	lr, [sp, #32]
   2b138:	beq	2b1b4 <__assert_fail@plt+0x19ab4>
   2b13c:	ldr	lr, [ip, #20]
   2b140:	cmp	lr, #0
   2b144:	str	lr, [sp, #36]	; 0x24
   2b148:	beq	2b1bc <__assert_fail@plt+0x19abc>
   2b14c:	ldr	lr, [ip, #24]
   2b150:	cmp	lr, #0
   2b154:	str	lr, [sp, #40]	; 0x28
   2b158:	beq	2b1c4 <__assert_fail@plt+0x19ac4>
   2b15c:	ldr	lr, [ip, #28]
   2b160:	cmp	lr, #0
   2b164:	str	lr, [sp, #44]	; 0x2c
   2b168:	beq	2b1cc <__assert_fail@plt+0x19acc>
   2b16c:	ldr	lr, [ip, #32]
   2b170:	cmp	lr, #0
   2b174:	str	lr, [sp, #48]	; 0x30
   2b178:	beq	2b1d4 <__assert_fail@plt+0x19ad4>
   2b17c:	ldr	lr, [ip, #36]	; 0x24
   2b180:	mov	ip, #10
   2b184:	cmp	lr, #0
   2b188:	str	lr, [sp, #52]	; 0x34
   2b18c:	movweq	ip, #9
   2b190:	b	2b1d8 <__assert_fail@plt+0x19ad8>
   2b194:	mov	ip, #0
   2b198:	b	2b1d8 <__assert_fail@plt+0x19ad8>
   2b19c:	mov	ip, #1
   2b1a0:	b	2b1d8 <__assert_fail@plt+0x19ad8>
   2b1a4:	mov	ip, #2
   2b1a8:	b	2b1d8 <__assert_fail@plt+0x19ad8>
   2b1ac:	mov	ip, #3
   2b1b0:	b	2b1d8 <__assert_fail@plt+0x19ad8>
   2b1b4:	mov	ip, #4
   2b1b8:	b	2b1d8 <__assert_fail@plt+0x19ad8>
   2b1bc:	mov	ip, #5
   2b1c0:	b	2b1d8 <__assert_fail@plt+0x19ad8>
   2b1c4:	mov	ip, #6
   2b1c8:	b	2b1d8 <__assert_fail@plt+0x19ad8>
   2b1cc:	mov	ip, #7
   2b1d0:	b	2b1d8 <__assert_fail@plt+0x19ad8>
   2b1d4:	mov	ip, #8
   2b1d8:	add	lr, sp, #16
   2b1dc:	str	ip, [sp, #4]
   2b1e0:	str	lr, [sp]
   2b1e4:	bl	2ac4c <__assert_fail@plt+0x1954c>
   2b1e8:	mov	sp, fp
   2b1ec:	pop	{fp, pc}
   2b1f0:	push	{fp, lr}
   2b1f4:	mov	fp, sp
   2b1f8:	movw	r0, #57764	; 0xe1a4
   2b1fc:	movt	r0, #3
   2b200:	ldr	r1, [r0]
   2b204:	movw	r0, #51466	; 0xc90a
   2b208:	movt	r0, #2
   2b20c:	bl	113a0 <fputs_unlocked@plt>
   2b210:	movw	r1, #53448	; 0xd0c8
   2b214:	mov	r0, #0
   2b218:	mov	r2, #5
   2b21c:	movt	r1, #2
   2b220:	bl	11484 <dcgettext@plt>
   2b224:	movw	r2, #53468	; 0xd0dc
   2b228:	mov	r1, r0
   2b22c:	mov	r0, #1
   2b230:	movt	r2, #2
   2b234:	bl	11628 <__printf_chk@plt>
   2b238:	movw	r1, #53490	; 0xd0f2
   2b23c:	mov	r0, #0
   2b240:	mov	r2, #5
   2b244:	movt	r1, #2
   2b248:	bl	11484 <dcgettext@plt>
   2b24c:	movw	r2, #51033	; 0xc759
   2b250:	movw	r3, #51275	; 0xc84b
   2b254:	mov	r1, r0
   2b258:	mov	r0, #1
   2b25c:	movt	r2, #2
   2b260:	movt	r3, #2
   2b264:	bl	11628 <__printf_chk@plt>
   2b268:	movw	r1, #53510	; 0xd106
   2b26c:	mov	r0, #0
   2b270:	mov	r2, #5
   2b274:	movt	r1, #2
   2b278:	bl	11484 <dcgettext@plt>
   2b27c:	movw	r2, #53549	; 0xd12d
   2b280:	mov	r1, r0
   2b284:	mov	r0, #1
   2b288:	movt	r2, #2
   2b28c:	pop	{fp, lr}
   2b290:	b	11628 <__printf_chk@plt>
   2b294:	push	{r4, r5, r6, sl, fp, lr}
   2b298:	add	fp, sp, #16
   2b29c:	mov	r4, r2
   2b2a0:	mov	r5, r1
   2b2a4:	mov	r6, r0
   2b2a8:	bl	2bd98 <__assert_fail@plt+0x1a698>
   2b2ac:	cmp	r0, #0
   2b2b0:	popne	{r4, r5, r6, sl, fp, pc}
   2b2b4:	cmp	r6, #0
   2b2b8:	beq	2b2cc <__assert_fail@plt+0x19bcc>
   2b2bc:	cmp	r5, #0
   2b2c0:	cmpne	r4, #0
   2b2c4:	bne	2b2cc <__assert_fail@plt+0x19bcc>
   2b2c8:	pop	{r4, r5, r6, sl, fp, pc}
   2b2cc:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b2d0:	push	{r4, r5, r6, sl, fp, lr}
   2b2d4:	add	fp, sp, #16
   2b2d8:	mov	r4, r2
   2b2dc:	mov	r5, r1
   2b2e0:	mov	r6, r0
   2b2e4:	bl	2bd98 <__assert_fail@plt+0x1a698>
   2b2e8:	cmp	r0, #0
   2b2ec:	popne	{r4, r5, r6, sl, fp, pc}
   2b2f0:	cmp	r6, #0
   2b2f4:	beq	2b308 <__assert_fail@plt+0x19c08>
   2b2f8:	cmp	r5, #0
   2b2fc:	cmpne	r4, #0
   2b300:	bne	2b308 <__assert_fail@plt+0x19c08>
   2b304:	pop	{r4, r5, r6, sl, fp, pc}
   2b308:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b30c:	push	{fp, lr}
   2b310:	mov	fp, sp
   2b314:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   2b318:	cmp	r0, #0
   2b31c:	popne	{fp, pc}
   2b320:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b324:	push	{fp, lr}
   2b328:	mov	fp, sp
   2b32c:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   2b330:	cmp	r0, #0
   2b334:	popne	{fp, pc}
   2b338:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b33c:	push	{fp, lr}
   2b340:	mov	fp, sp
   2b344:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   2b348:	cmp	r0, #0
   2b34c:	popne	{fp, pc}
   2b350:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b354:	push	{r4, r5, fp, lr}
   2b358:	add	fp, sp, #8
   2b35c:	mov	r4, r1
   2b360:	mov	r5, r0
   2b364:	bl	2b910 <__assert_fail@plt+0x1a210>
   2b368:	cmp	r0, #0
   2b36c:	popne	{r4, r5, fp, pc}
   2b370:	cmp	r5, #0
   2b374:	beq	2b384 <__assert_fail@plt+0x19c84>
   2b378:	cmp	r4, #0
   2b37c:	bne	2b384 <__assert_fail@plt+0x19c84>
   2b380:	pop	{r4, r5, fp, pc}
   2b384:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b388:	push	{fp, lr}
   2b38c:	mov	fp, sp
   2b390:	cmp	r1, #0
   2b394:	orreq	r1, r1, #1
   2b398:	bl	2b910 <__assert_fail@plt+0x1a210>
   2b39c:	cmp	r0, #0
   2b3a0:	popne	{fp, pc}
   2b3a4:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b3a8:	push	{fp, lr}
   2b3ac:	mov	fp, sp
   2b3b0:	clz	r3, r2
   2b3b4:	lsr	ip, r3, #5
   2b3b8:	clz	r3, r1
   2b3bc:	lsr	r3, r3, #5
   2b3c0:	orrs	r3, r3, ip
   2b3c4:	movwne	r1, #1
   2b3c8:	movwne	r2, #1
   2b3cc:	bl	2bd98 <__assert_fail@plt+0x1a698>
   2b3d0:	cmp	r0, #0
   2b3d4:	popne	{fp, pc}
   2b3d8:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b3dc:	push	{fp, lr}
   2b3e0:	mov	fp, sp
   2b3e4:	mov	r2, r1
   2b3e8:	mov	r1, r0
   2b3ec:	mov	r0, #0
   2b3f0:	bl	2bd98 <__assert_fail@plt+0x1a698>
   2b3f4:	cmp	r0, #0
   2b3f8:	popne	{fp, pc}
   2b3fc:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b400:	push	{fp, lr}
   2b404:	mov	fp, sp
   2b408:	mov	r2, r1
   2b40c:	mov	r1, r0
   2b410:	clz	r0, r2
   2b414:	clz	r3, r1
   2b418:	lsr	r0, r0, #5
   2b41c:	lsr	r3, r3, #5
   2b420:	orrs	r0, r3, r0
   2b424:	mov	r0, #0
   2b428:	movwne	r1, #1
   2b42c:	movwne	r2, #1
   2b430:	bl	2bd98 <__assert_fail@plt+0x1a698>
   2b434:	cmp	r0, #0
   2b438:	popne	{fp, pc}
   2b43c:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b440:	push	{r4, r5, r6, sl, fp, lr}
   2b444:	add	fp, sp, #16
   2b448:	ldr	r5, [r1]
   2b44c:	mov	r4, r1
   2b450:	mov	r6, r0
   2b454:	cmp	r0, #0
   2b458:	beq	2b470 <__assert_fail@plt+0x19d70>
   2b45c:	mov	r0, #1
   2b460:	add	r0, r0, r5, lsr #1
   2b464:	adds	r5, r5, r0
   2b468:	bcc	2b478 <__assert_fail@plt+0x19d78>
   2b46c:	b	2b4b4 <__assert_fail@plt+0x19db4>
   2b470:	cmp	r5, #0
   2b474:	movweq	r5, #64	; 0x40
   2b478:	mov	r0, r6
   2b47c:	mov	r1, r5
   2b480:	mov	r2, #1
   2b484:	bl	2bd98 <__assert_fail@plt+0x1a698>
   2b488:	cmp	r5, #0
   2b48c:	mov	r1, r5
   2b490:	movwne	r1, #1
   2b494:	cmp	r0, #0
   2b498:	bne	2b4ac <__assert_fail@plt+0x19dac>
   2b49c:	clz	r2, r6
   2b4a0:	lsr	r2, r2, #5
   2b4a4:	orrs	r1, r2, r1
   2b4a8:	bne	2b4b4 <__assert_fail@plt+0x19db4>
   2b4ac:	str	r5, [r4]
   2b4b0:	pop	{r4, r5, r6, sl, fp, pc}
   2b4b4:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b4b8:	push	{r4, r5, r6, r7, fp, lr}
   2b4bc:	add	fp, sp, #16
   2b4c0:	ldr	r5, [r1]
   2b4c4:	mov	r6, r2
   2b4c8:	mov	r4, r1
   2b4cc:	mov	r7, r0
   2b4d0:	cmp	r0, #0
   2b4d4:	beq	2b4ec <__assert_fail@plt+0x19dec>
   2b4d8:	mov	r0, #1
   2b4dc:	add	r0, r0, r5, lsr #1
   2b4e0:	adds	r5, r5, r0
   2b4e4:	bcc	2b504 <__assert_fail@plt+0x19e04>
   2b4e8:	b	2b538 <__assert_fail@plt+0x19e38>
   2b4ec:	cmp	r5, #0
   2b4f0:	bne	2b504 <__assert_fail@plt+0x19e04>
   2b4f4:	mov	r0, #64	; 0x40
   2b4f8:	cmp	r6, #64	; 0x40
   2b4fc:	udiv	r5, r0, r6
   2b500:	addhi	r5, r5, #1
   2b504:	mov	r0, r7
   2b508:	mov	r1, r5
   2b50c:	mov	r2, r6
   2b510:	bl	2bd98 <__assert_fail@plt+0x1a698>
   2b514:	cmp	r0, #0
   2b518:	bne	2b530 <__assert_fail@plt+0x19e30>
   2b51c:	cmp	r7, #0
   2b520:	beq	2b538 <__assert_fail@plt+0x19e38>
   2b524:	cmp	r6, #0
   2b528:	cmpne	r5, #0
   2b52c:	bne	2b538 <__assert_fail@plt+0x19e38>
   2b530:	str	r5, [r4]
   2b534:	pop	{r4, r5, r6, r7, fp, pc}
   2b538:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b53c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b540:	add	fp, sp, #24
   2b544:	mov	r8, r1
   2b548:	ldr	r1, [r1]
   2b54c:	mov	r5, r0
   2b550:	add	r0, r1, r1, asr #1
   2b554:	cmp	r0, r1
   2b558:	mvnvs	r0, #-2147483648	; 0x80000000
   2b55c:	cmp	r0, r3
   2b560:	mov	r7, r0
   2b564:	movgt	r7, r3
   2b568:	cmn	r3, #1
   2b56c:	movle	r7, r0
   2b570:	ldr	r0, [fp, #8]
   2b574:	cmn	r0, #1
   2b578:	ble	2b5a0 <__assert_fail@plt+0x19ea0>
   2b57c:	cmp	r0, #0
   2b580:	beq	2b5f4 <__assert_fail@plt+0x19ef4>
   2b584:	cmn	r7, #1
   2b588:	ble	2b5c8 <__assert_fail@plt+0x19ec8>
   2b58c:	mvn	r4, #-2147483648	; 0x80000000
   2b590:	udiv	r6, r4, r0
   2b594:	cmp	r6, r7
   2b598:	bge	2b5f4 <__assert_fail@plt+0x19ef4>
   2b59c:	b	2b604 <__assert_fail@plt+0x19f04>
   2b5a0:	cmn	r7, #1
   2b5a4:	ble	2b5e4 <__assert_fail@plt+0x19ee4>
   2b5a8:	cmn	r0, #1
   2b5ac:	beq	2b5f4 <__assert_fail@plt+0x19ef4>
   2b5b0:	mov	r6, #-2147483648	; 0x80000000
   2b5b4:	mvn	r4, #-2147483648	; 0x80000000
   2b5b8:	sdiv	r6, r6, r0
   2b5bc:	cmp	r6, r7
   2b5c0:	bge	2b5f4 <__assert_fail@plt+0x19ef4>
   2b5c4:	b	2b604 <__assert_fail@plt+0x19f04>
   2b5c8:	beq	2b5f4 <__assert_fail@plt+0x19ef4>
   2b5cc:	mov	r6, #-2147483648	; 0x80000000
   2b5d0:	mvn	r4, #-2147483648	; 0x80000000
   2b5d4:	sdiv	r6, r6, r7
   2b5d8:	cmp	r6, r0
   2b5dc:	bge	2b5f4 <__assert_fail@plt+0x19ef4>
   2b5e0:	b	2b604 <__assert_fail@plt+0x19f04>
   2b5e4:	mvn	r4, #-2147483648	; 0x80000000
   2b5e8:	sdiv	r6, r4, r0
   2b5ec:	cmp	r7, r6
   2b5f0:	blt	2b604 <__assert_fail@plt+0x19f04>
   2b5f4:	mul	r6, r7, r0
   2b5f8:	mov	r4, #64	; 0x40
   2b5fc:	cmp	r6, #63	; 0x3f
   2b600:	bgt	2b60c <__assert_fail@plt+0x19f0c>
   2b604:	sdiv	r7, r4, r0
   2b608:	mul	r6, r7, r0
   2b60c:	cmp	r5, #0
   2b610:	moveq	r4, #0
   2b614:	streq	r4, [r8]
   2b618:	sub	r4, r7, r1
   2b61c:	cmp	r4, r2
   2b620:	bge	2b6cc <__assert_fail@plt+0x19fcc>
   2b624:	add	r7, r1, r2
   2b628:	mov	r6, #0
   2b62c:	mov	r2, #0
   2b630:	cmp	r7, r3
   2b634:	movwgt	r6, #1
   2b638:	cmn	r3, #1
   2b63c:	movwgt	r2, #1
   2b640:	cmp	r7, r1
   2b644:	bvs	2b700 <__assert_fail@plt+0x1a000>
   2b648:	ands	r1, r2, r6
   2b64c:	bne	2b700 <__assert_fail@plt+0x1a000>
   2b650:	cmn	r0, #1
   2b654:	ble	2b67c <__assert_fail@plt+0x19f7c>
   2b658:	cmp	r0, #0
   2b65c:	beq	2b6c8 <__assert_fail@plt+0x19fc8>
   2b660:	cmn	r7, #1
   2b664:	ble	2b6a0 <__assert_fail@plt+0x19fa0>
   2b668:	mvn	r1, #-2147483648	; 0x80000000
   2b66c:	udiv	r1, r1, r0
   2b670:	cmp	r1, r7
   2b674:	bge	2b6c8 <__assert_fail@plt+0x19fc8>
   2b678:	b	2b700 <__assert_fail@plt+0x1a000>
   2b67c:	cmn	r7, #1
   2b680:	ble	2b6b8 <__assert_fail@plt+0x19fb8>
   2b684:	cmn	r0, #1
   2b688:	beq	2b6c8 <__assert_fail@plt+0x19fc8>
   2b68c:	mov	r1, #-2147483648	; 0x80000000
   2b690:	sdiv	r1, r1, r0
   2b694:	cmp	r1, r7
   2b698:	bge	2b6c8 <__assert_fail@plt+0x19fc8>
   2b69c:	b	2b700 <__assert_fail@plt+0x1a000>
   2b6a0:	beq	2b6c8 <__assert_fail@plt+0x19fc8>
   2b6a4:	mov	r1, #-2147483648	; 0x80000000
   2b6a8:	sdiv	r1, r1, r7
   2b6ac:	cmp	r1, r0
   2b6b0:	bge	2b6c8 <__assert_fail@plt+0x19fc8>
   2b6b4:	b	2b700 <__assert_fail@plt+0x1a000>
   2b6b8:	mvn	r1, #-2147483648	; 0x80000000
   2b6bc:	sdiv	r1, r1, r0
   2b6c0:	cmp	r7, r1
   2b6c4:	blt	2b700 <__assert_fail@plt+0x1a000>
   2b6c8:	mul	r6, r7, r0
   2b6cc:	mov	r0, r5
   2b6d0:	mov	r1, r6
   2b6d4:	bl	2b910 <__assert_fail@plt+0x1a210>
   2b6d8:	cmp	r6, #0
   2b6dc:	movwne	r6, #1
   2b6e0:	cmp	r0, #0
   2b6e4:	bne	2b6f8 <__assert_fail@plt+0x19ff8>
   2b6e8:	clz	r1, r5
   2b6ec:	lsr	r1, r1, #5
   2b6f0:	orrs	r1, r1, r6
   2b6f4:	bne	2b700 <__assert_fail@plt+0x1a000>
   2b6f8:	str	r7, [r8]
   2b6fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b700:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b704:	push	{fp, lr}
   2b708:	mov	fp, sp
   2b70c:	mov	r1, #1
   2b710:	bl	2b88c <__assert_fail@plt+0x1a18c>
   2b714:	cmp	r0, #0
   2b718:	popne	{fp, pc}
   2b71c:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b720:	push	{fp, lr}
   2b724:	mov	fp, sp
   2b728:	bl	2b88c <__assert_fail@plt+0x1a18c>
   2b72c:	cmp	r0, #0
   2b730:	popne	{fp, pc}
   2b734:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b738:	push	{fp, lr}
   2b73c:	mov	fp, sp
   2b740:	mov	r1, #1
   2b744:	bl	2b88c <__assert_fail@plt+0x1a18c>
   2b748:	cmp	r0, #0
   2b74c:	popne	{fp, pc}
   2b750:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b754:	push	{fp, lr}
   2b758:	mov	fp, sp
   2b75c:	bl	2b88c <__assert_fail@plt+0x1a18c>
   2b760:	cmp	r0, #0
   2b764:	popne	{fp, pc}
   2b768:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b76c:	push	{r4, r5, fp, lr}
   2b770:	add	fp, sp, #8
   2b774:	mov	r5, r0
   2b778:	mov	r0, r1
   2b77c:	mov	r4, r1
   2b780:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   2b784:	cmp	r0, #0
   2b788:	beq	2b79c <__assert_fail@plt+0x1a09c>
   2b78c:	mov	r1, r5
   2b790:	mov	r2, r4
   2b794:	pop	{r4, r5, fp, lr}
   2b798:	b	11448 <memcpy@plt>
   2b79c:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b7a0:	push	{r4, r5, fp, lr}
   2b7a4:	add	fp, sp, #8
   2b7a8:	mov	r5, r0
   2b7ac:	mov	r0, r1
   2b7b0:	mov	r4, r1
   2b7b4:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   2b7b8:	cmp	r0, #0
   2b7bc:	beq	2b7d0 <__assert_fail@plt+0x1a0d0>
   2b7c0:	mov	r1, r5
   2b7c4:	mov	r2, r4
   2b7c8:	pop	{r4, r5, fp, lr}
   2b7cc:	b	11448 <memcpy@plt>
   2b7d0:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b7d4:	push	{r4, r5, fp, lr}
   2b7d8:	add	fp, sp, #8
   2b7dc:	mov	r5, r0
   2b7e0:	add	r0, r1, #1
   2b7e4:	mov	r4, r1
   2b7e8:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   2b7ec:	cmp	r0, #0
   2b7f0:	beq	2b80c <__assert_fail@plt+0x1a10c>
   2b7f4:	mov	r1, #0
   2b7f8:	mov	r2, r4
   2b7fc:	strb	r1, [r0, r4]
   2b800:	mov	r1, r5
   2b804:	pop	{r4, r5, fp, lr}
   2b808:	b	11448 <memcpy@plt>
   2b80c:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b810:	push	{r4, r5, fp, lr}
   2b814:	add	fp, sp, #8
   2b818:	mov	r4, r0
   2b81c:	bl	115bc <strlen@plt>
   2b820:	add	r5, r0, #1
   2b824:	mov	r0, r5
   2b828:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   2b82c:	cmp	r0, #0
   2b830:	beq	2b844 <__assert_fail@plt+0x1a144>
   2b834:	mov	r1, r4
   2b838:	mov	r2, r5
   2b83c:	pop	{r4, r5, fp, lr}
   2b840:	b	11448 <memcpy@plt>
   2b844:	bl	2b848 <__assert_fail@plt+0x1a148>
   2b848:	push	{fp, lr}
   2b84c:	mov	fp, sp
   2b850:	movw	r0, #57672	; 0xe148
   2b854:	movw	r1, #53625	; 0xd179
   2b858:	mov	r2, #5
   2b85c:	movt	r0, #3
   2b860:	movt	r1, #2
   2b864:	ldr	r4, [r0]
   2b868:	mov	r0, #0
   2b86c:	bl	11484 <dcgettext@plt>
   2b870:	movw	r2, #51824	; 0xca70
   2b874:	mov	r3, r0
   2b878:	mov	r0, r4
   2b87c:	mov	r1, #0
   2b880:	movt	r2, #2
   2b884:	bl	11520 <error@plt>
   2b888:	bl	116e8 <abort@plt>
   2b88c:	clz	r2, r1
   2b890:	clz	r3, r0
   2b894:	lsr	r2, r2, #5
   2b898:	lsr	r3, r3, #5
   2b89c:	orrs	r2, r3, r2
   2b8a0:	movwne	r1, #1
   2b8a4:	movwne	r0, #1
   2b8a8:	cmp	r1, #0
   2b8ac:	beq	2b8dc <__assert_fail@plt+0x1a1dc>
   2b8b0:	mvn	r2, #-2147483648	; 0x80000000
   2b8b4:	udiv	r2, r2, r1
   2b8b8:	cmp	r2, r0
   2b8bc:	bcs	2b8dc <__assert_fail@plt+0x1a1dc>
   2b8c0:	push	{fp, lr}
   2b8c4:	mov	fp, sp
   2b8c8:	bl	115ec <__errno_location@plt>
   2b8cc:	mov	r1, #12
   2b8d0:	str	r1, [r0]
   2b8d4:	mov	r0, #0
   2b8d8:	pop	{fp, pc}
   2b8dc:	b	11394 <calloc@plt>
   2b8e0:	cmp	r0, #0
   2b8e4:	movweq	r0, #1
   2b8e8:	cmn	r0, #1
   2b8ec:	ble	2b8f4 <__assert_fail@plt+0x1a1f4>
   2b8f0:	b	11544 <malloc@plt>
   2b8f4:	push	{fp, lr}
   2b8f8:	mov	fp, sp
   2b8fc:	bl	115ec <__errno_location@plt>
   2b900:	mov	r1, #12
   2b904:	str	r1, [r0]
   2b908:	mov	r0, #0
   2b90c:	pop	{fp, pc}
   2b910:	push	{fp, lr}
   2b914:	mov	fp, sp
   2b918:	cmp	r0, #0
   2b91c:	beq	2b938 <__assert_fail@plt+0x1a238>
   2b920:	cmp	r1, #0
   2b924:	beq	2b944 <__assert_fail@plt+0x1a244>
   2b928:	cmn	r1, #1
   2b92c:	ble	2b950 <__assert_fail@plt+0x1a250>
   2b930:	pop	{fp, lr}
   2b934:	b	1149c <realloc@plt>
   2b938:	mov	r0, r1
   2b93c:	pop	{fp, lr}
   2b940:	b	2b8e0 <__assert_fail@plt+0x1a1e0>
   2b944:	bl	13ddc <__assert_fail@plt+0x26dc>
   2b948:	mov	r0, #0
   2b94c:	pop	{fp, pc}
   2b950:	bl	115ec <__errno_location@plt>
   2b954:	mov	r1, #12
   2b958:	str	r1, [r0]
   2b95c:	mov	r0, #0
   2b960:	pop	{fp, pc}
   2b964:	push	{r4, r5, r6, sl, fp, lr}
   2b968:	add	fp, sp, #16
   2b96c:	mov	r4, r0
   2b970:	bl	11508 <__fpending@plt>
   2b974:	ldr	r6, [r4]
   2b978:	mov	r5, r0
   2b97c:	mov	r0, r4
   2b980:	bl	2baac <__assert_fail@plt+0x1a3ac>
   2b984:	tst	r6, #32
   2b988:	bne	2b9c0 <__assert_fail@plt+0x1a2c0>
   2b98c:	cmp	r0, #0
   2b990:	mov	r4, r0
   2b994:	mvnne	r4, #0
   2b998:	cmp	r5, #0
   2b99c:	bne	2b9cc <__assert_fail@plt+0x1a2cc>
   2b9a0:	cmp	r0, #0
   2b9a4:	beq	2b9cc <__assert_fail@plt+0x1a2cc>
   2b9a8:	bl	115ec <__errno_location@plt>
   2b9ac:	ldr	r0, [r0]
   2b9b0:	subs	r4, r0, #9
   2b9b4:	mvnne	r4, #0
   2b9b8:	mov	r0, r4
   2b9bc:	pop	{r4, r5, r6, sl, fp, pc}
   2b9c0:	mvn	r4, #0
   2b9c4:	cmp	r0, #0
   2b9c8:	beq	2b9d4 <__assert_fail@plt+0x1a2d4>
   2b9cc:	mov	r0, r4
   2b9d0:	pop	{r4, r5, r6, sl, fp, pc}
   2b9d4:	bl	115ec <__errno_location@plt>
   2b9d8:	mov	r1, #0
   2b9dc:	str	r1, [r0]
   2b9e0:	mov	r0, r4
   2b9e4:	pop	{r4, r5, r6, sl, fp, pc}
   2b9e8:	push	{r4, r5, r6, r7, fp, lr}
   2b9ec:	add	fp, sp, #16
   2b9f0:	mov	r4, r0
   2b9f4:	ldr	r0, [r0, #4]
   2b9f8:	mov	r5, r1
   2b9fc:	cmp	r0, r1
   2ba00:	bcs	2ba34 <__assert_fail@plt+0x1a334>
   2ba04:	mov	r6, r3
   2ba08:	cmp	r3, #0
   2ba0c:	beq	2ba40 <__assert_fail@plt+0x1a340>
   2ba10:	mvn	r0, #0
   2ba14:	udiv	r0, r0, r6
   2ba18:	cmp	r0, r5
   2ba1c:	bcs	2ba40 <__assert_fail@plt+0x1a340>
   2ba20:	bl	115ec <__errno_location@plt>
   2ba24:	mov	r1, #12
   2ba28:	str	r1, [r0]
   2ba2c:	mov	r0, #0
   2ba30:	pop	{r4, r5, r6, r7, fp, pc}
   2ba34:	mov	r0, #1
   2ba38:	str	r5, [r4]
   2ba3c:	pop	{r4, r5, r6, r7, fp, pc}
   2ba40:	ldr	r0, [r4, #8]
   2ba44:	mul	r1, r6, r5
   2ba48:	cmp	r0, r2
   2ba4c:	beq	2ba64 <__assert_fail@plt+0x1a364>
   2ba50:	bl	2b910 <__assert_fail@plt+0x1a210>
   2ba54:	mov	r7, r0
   2ba58:	cmp	r0, #0
   2ba5c:	bne	2ba94 <__assert_fail@plt+0x1a394>
   2ba60:	b	2baa4 <__assert_fail@plt+0x1a3a4>
   2ba64:	mov	r0, r1
   2ba68:	bl	2b8e0 <__assert_fail@plt+0x1a1e0>
   2ba6c:	cmp	r0, #0
   2ba70:	beq	2baa4 <__assert_fail@plt+0x1a3a4>
   2ba74:	ldr	r1, [r4, #8]
   2ba78:	mov	r7, r0
   2ba7c:	cmp	r1, #0
   2ba80:	beq	2ba94 <__assert_fail@plt+0x1a394>
   2ba84:	ldr	r0, [r4]
   2ba88:	mul	r2, r0, r6
   2ba8c:	mov	r0, r7
   2ba90:	bl	11448 <memcpy@plt>
   2ba94:	mov	r0, #1
   2ba98:	str	r5, [r4]
   2ba9c:	stmib	r4, {r5, r7}
   2baa0:	pop	{r4, r5, r6, r7, fp, pc}
   2baa4:	mov	r0, #0
   2baa8:	pop	{r4, r5, r6, r7, fp, pc}
   2baac:	push	{r4, r5, r6, sl, fp, lr}
   2bab0:	add	fp, sp, #16
   2bab4:	sub	sp, sp, #8
   2bab8:	mov	r4, r0
   2babc:	bl	11634 <fileno@plt>
   2bac0:	cmn	r0, #1
   2bac4:	ble	2bb38 <__assert_fail@plt+0x1a438>
   2bac8:	mov	r0, r4
   2bacc:	bl	1155c <__freading@plt>
   2bad0:	cmp	r0, #0
   2bad4:	beq	2bb00 <__assert_fail@plt+0x1a400>
   2bad8:	mov	r0, r4
   2badc:	bl	11634 <fileno@plt>
   2bae0:	mov	r1, #1
   2bae4:	mov	r2, #0
   2bae8:	mov	r3, #0
   2baec:	str	r1, [sp]
   2baf0:	bl	114f0 <lseek64@plt>
   2baf4:	and	r0, r0, r1
   2baf8:	cmn	r0, #1
   2bafc:	beq	2bb38 <__assert_fail@plt+0x1a438>
   2bb00:	mov	r0, r4
   2bb04:	bl	2bb48 <__assert_fail@plt+0x1a448>
   2bb08:	cmp	r0, #0
   2bb0c:	beq	2bb38 <__assert_fail@plt+0x1a438>
   2bb10:	bl	115ec <__errno_location@plt>
   2bb14:	ldr	r6, [r0]
   2bb18:	mov	r5, r0
   2bb1c:	mov	r0, r4
   2bb20:	bl	11658 <fclose@plt>
   2bb24:	cmp	r6, #0
   2bb28:	strne	r6, [r5]
   2bb2c:	mvnne	r0, #0
   2bb30:	sub	sp, fp, #16
   2bb34:	pop	{r4, r5, r6, sl, fp, pc}
   2bb38:	mov	r0, r4
   2bb3c:	sub	sp, fp, #16
   2bb40:	pop	{r4, r5, r6, sl, fp, lr}
   2bb44:	b	11658 <fclose@plt>
   2bb48:	push	{r4, sl, fp, lr}
   2bb4c:	add	fp, sp, #8
   2bb50:	sub	sp, sp, #8
   2bb54:	mov	r4, r0
   2bb58:	cmp	r0, #0
   2bb5c:	beq	2bb94 <__assert_fail@plt+0x1a494>
   2bb60:	mov	r0, r4
   2bb64:	bl	1155c <__freading@plt>
   2bb68:	cmp	r0, #0
   2bb6c:	beq	2bb94 <__assert_fail@plt+0x1a494>
   2bb70:	ldrb	r0, [r4, #1]
   2bb74:	tst	r0, #1
   2bb78:	beq	2bb94 <__assert_fail@plt+0x1a494>
   2bb7c:	mov	r0, #1
   2bb80:	mov	r2, #0
   2bb84:	mov	r3, #0
   2bb88:	str	r0, [sp]
   2bb8c:	mov	r0, r4
   2bb90:	bl	2bba4 <__assert_fail@plt+0x1a4a4>
   2bb94:	mov	r0, r4
   2bb98:	sub	sp, fp, #8
   2bb9c:	pop	{r4, sl, fp, lr}
   2bba0:	b	11400 <fflush@plt>
   2bba4:	push	{r4, r5, r6, r7, fp, lr}
   2bba8:	add	fp, sp, #16
   2bbac:	sub	sp, sp, #8
   2bbb0:	mov	r4, r0
   2bbb4:	ldr	r0, [r0, #4]
   2bbb8:	mov	r5, r3
   2bbbc:	mov	r6, r2
   2bbc0:	ldr	r1, [r4, #8]
   2bbc4:	cmp	r1, r0
   2bbc8:	bne	2bbe4 <__assert_fail@plt+0x1a4e4>
   2bbcc:	ldrd	r0, [r4, #16]
   2bbd0:	cmp	r1, r0
   2bbd4:	bne	2bbe4 <__assert_fail@plt+0x1a4e4>
   2bbd8:	ldr	r0, [r4, #36]	; 0x24
   2bbdc:	cmp	r0, #0
   2bbe0:	beq	2bbfc <__assert_fail@plt+0x1a4fc>
   2bbe4:	mov	r0, r4
   2bbe8:	mov	r2, r6
   2bbec:	mov	r3, r5
   2bbf0:	sub	sp, fp, #16
   2bbf4:	pop	{r4, r5, r6, r7, fp, lr}
   2bbf8:	b	11664 <fseeko64@plt>
   2bbfc:	ldr	r7, [fp, #8]
   2bc00:	mov	r0, r4
   2bc04:	bl	11634 <fileno@plt>
   2bc08:	mov	r2, r6
   2bc0c:	mov	r3, r5
   2bc10:	str	r7, [sp]
   2bc14:	bl	114f0 <lseek64@plt>
   2bc18:	and	r2, r0, r1
   2bc1c:	cmn	r2, #1
   2bc20:	beq	2bc40 <__assert_fail@plt+0x1a540>
   2bc24:	strd	r0, [r4, #80]	; 0x50
   2bc28:	ldr	r0, [r4]
   2bc2c:	bic	r0, r0, #16
   2bc30:	str	r0, [r4]
   2bc34:	mov	r0, #0
   2bc38:	sub	sp, fp, #16
   2bc3c:	pop	{r4, r5, r6, r7, fp, pc}
   2bc40:	mvn	r0, #0
   2bc44:	sub	sp, fp, #16
   2bc48:	pop	{r4, r5, r6, r7, fp, pc}
   2bc4c:	push	{fp, lr}
   2bc50:	mov	fp, sp
   2bc54:	mov	r0, #14
   2bc58:	bl	116a0 <nl_langinfo@plt>
   2bc5c:	movw	r1, #51467	; 0xc90b
   2bc60:	cmp	r0, #0
   2bc64:	movt	r1, #2
   2bc68:	movne	r1, r0
   2bc6c:	movw	r0, #53642	; 0xd18a
   2bc70:	ldrb	r2, [r1]
   2bc74:	movt	r0, #2
   2bc78:	cmp	r2, #0
   2bc7c:	movne	r0, r1
   2bc80:	pop	{fp, pc}
   2bc84:	push	{r4, sl, fp, lr}
   2bc88:	add	fp, sp, #8
   2bc8c:	mov	r4, r0
   2bc90:	bl	1140c <wcwidth@plt>
   2bc94:	cmn	r0, #1
   2bc98:	popgt	{r4, sl, fp, pc}
   2bc9c:	mov	r0, r4
   2bca0:	bl	114c0 <iswcntrl@plt>
   2bca4:	clz	r0, r0
   2bca8:	lsr	r0, r0, #5
   2bcac:	pop	{r4, sl, fp, pc}
   2bcb0:	push	{r4, r5, r6, sl, fp, lr}
   2bcb4:	add	fp, sp, #16
   2bcb8:	mov	r4, r0
   2bcbc:	mov	r0, r1
   2bcc0:	mov	r5, r1
   2bcc4:	ldr	r1, [r0], #16
   2bcc8:	cmp	r1, r0
   2bccc:	beq	2bcd8 <__assert_fail@plt+0x1a5d8>
   2bcd0:	mov	r6, r1
   2bcd4:	b	2bce8 <__assert_fail@plt+0x1a5e8>
   2bcd8:	ldr	r2, [r5, #4]
   2bcdc:	add	r6, r4, #16
   2bce0:	mov	r0, r6
   2bce4:	bl	11448 <memcpy@plt>
   2bce8:	str	r6, [r4]
   2bcec:	ldr	r0, [r5, #4]
   2bcf0:	str	r0, [r4, #4]
   2bcf4:	ldrb	r0, [r5, #8]
   2bcf8:	strb	r0, [r4, #8]
   2bcfc:	cmp	r0, #0
   2bd00:	ldrne	r0, [r5, #12]
   2bd04:	strne	r0, [r4, #12]
   2bd08:	pop	{r4, r5, r6, sl, fp, pc}
   2bd0c:	movw	r2, #53648	; 0xd190
   2bd10:	ubfx	r1, r0, #5, #3
   2bd14:	and	r0, r0, #31
   2bd18:	movt	r2, #2
   2bd1c:	ldr	r1, [r2, r1, lsl #2]
   2bd20:	mov	r2, #1
   2bd24:	and	r0, r1, r2, lsl r0
   2bd28:	cmp	r0, #0
   2bd2c:	movwne	r0, #1
   2bd30:	bx	lr
   2bd34:	push	{r4, r5, r6, r7, fp, lr}
   2bd38:	add	fp, sp, #16
   2bd3c:	sub	sp, sp, #8
   2bd40:	cmp	r0, #0
   2bd44:	add	r5, sp, #4
   2bd48:	mov	r7, r2
   2bd4c:	mov	r4, r1
   2bd50:	movne	r5, r0
   2bd54:	mov	r0, r5
   2bd58:	bl	11514 <mbrtowc@plt>
   2bd5c:	mov	r6, r0
   2bd60:	cmp	r7, #0
   2bd64:	beq	2bd8c <__assert_fail@plt+0x1a68c>
   2bd68:	cmn	r6, #2
   2bd6c:	bcc	2bd8c <__assert_fail@plt+0x1a68c>
   2bd70:	mov	r0, #0
   2bd74:	bl	2bdd4 <__assert_fail@plt+0x1a6d4>
   2bd78:	cmp	r0, #0
   2bd7c:	bne	2bd8c <__assert_fail@plt+0x1a68c>
   2bd80:	ldrb	r0, [r4]
   2bd84:	mov	r6, #1
   2bd88:	str	r0, [r5]
   2bd8c:	mov	r0, r6
   2bd90:	sub	sp, fp, #16
   2bd94:	pop	{r4, r5, r6, r7, fp, pc}
   2bd98:	cmp	r2, #0
   2bd9c:	beq	2bdcc <__assert_fail@plt+0x1a6cc>
   2bda0:	mvn	r3, #0
   2bda4:	udiv	r3, r3, r2
   2bda8:	cmp	r3, r1
   2bdac:	bcs	2bdcc <__assert_fail@plt+0x1a6cc>
   2bdb0:	push	{fp, lr}
   2bdb4:	mov	fp, sp
   2bdb8:	bl	115ec <__errno_location@plt>
   2bdbc:	mov	r1, #12
   2bdc0:	str	r1, [r0]
   2bdc4:	mov	r0, #0
   2bdc8:	pop	{fp, pc}
   2bdcc:	mul	r1, r2, r1
   2bdd0:	b	2b910 <__assert_fail@plt+0x1a210>
   2bdd4:	push	{r4, sl, fp, lr}
   2bdd8:	add	fp, sp, #8
   2bddc:	sub	sp, sp, #264	; 0x108
   2bde0:	add	r1, sp, #7
   2bde4:	movw	r2, #257	; 0x101
   2bde8:	bl	2be40 <__assert_fail@plt+0x1a740>
   2bdec:	mov	r4, #0
   2bdf0:	cmp	r0, #0
   2bdf4:	bne	2be34 <__assert_fail@plt+0x1a734>
   2bdf8:	movw	r1, #53680	; 0xd1b0
   2bdfc:	add	r0, sp, #7
   2be00:	mov	r2, #2
   2be04:	movt	r1, #2
   2be08:	bl	115b0 <bcmp@plt>
   2be0c:	cmp	r0, #0
   2be10:	beq	2be34 <__assert_fail@plt+0x1a734>
   2be14:	movw	r1, #53682	; 0xd1b2
   2be18:	add	r0, sp, #7
   2be1c:	mov	r2, #6
   2be20:	movt	r1, #2
   2be24:	bl	115b0 <bcmp@plt>
   2be28:	cmp	r0, #0
   2be2c:	mov	r4, r0
   2be30:	movwne	r4, #1
   2be34:	mov	r0, r4
   2be38:	sub	sp, fp, #8
   2be3c:	pop	{r4, sl, fp, pc}
   2be40:	push	{r4, r5, r6, r7, fp, lr}
   2be44:	add	fp, sp, #16
   2be48:	mov	r4, r1
   2be4c:	mov	r1, #0
   2be50:	mov	r6, r2
   2be54:	bl	11688 <setlocale@plt>
   2be58:	cmp	r0, #0
   2be5c:	beq	2be8c <__assert_fail@plt+0x1a78c>
   2be60:	mov	r7, r0
   2be64:	bl	115bc <strlen@plt>
   2be68:	cmp	r0, r6
   2be6c:	bcs	2bea8 <__assert_fail@plt+0x1a7a8>
   2be70:	add	r2, r0, #1
   2be74:	mov	r0, r4
   2be78:	mov	r1, r7
   2be7c:	bl	11448 <memcpy@plt>
   2be80:	mov	r5, #0
   2be84:	mov	r0, r5
   2be88:	pop	{r4, r5, r6, r7, fp, pc}
   2be8c:	mov	r5, #22
   2be90:	cmp	r6, #0
   2be94:	beq	2bed0 <__assert_fail@plt+0x1a7d0>
   2be98:	mov	r0, #0
   2be9c:	strb	r0, [r4]
   2bea0:	mov	r0, r5
   2bea4:	pop	{r4, r5, r6, r7, fp, pc}
   2bea8:	mov	r5, #34	; 0x22
   2beac:	cmp	r6, #0
   2beb0:	beq	2bed0 <__assert_fail@plt+0x1a7d0>
   2beb4:	sub	r6, r6, #1
   2beb8:	mov	r0, r4
   2bebc:	mov	r1, r7
   2bec0:	mov	r2, r6
   2bec4:	bl	11448 <memcpy@plt>
   2bec8:	mov	r0, #0
   2becc:	strb	r0, [r4, r6]
   2bed0:	mov	r0, r5
   2bed4:	pop	{r4, r5, r6, r7, fp, pc}
   2bed8:	mov	r1, #0
   2bedc:	b	11688 <setlocale@plt>
   2bee0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bee4:	mov	r7, r0
   2bee8:	ldr	r6, [pc, #72]	; 2bf38 <__assert_fail@plt+0x1a838>
   2beec:	ldr	r5, [pc, #72]	; 2bf3c <__assert_fail@plt+0x1a83c>
   2bef0:	add	r6, pc, r6
   2bef4:	add	r5, pc, r5
   2bef8:	sub	r6, r6, r5
   2befc:	mov	r8, r1
   2bf00:	mov	r9, r2
   2bf04:	bl	11368 <pthread_mutex_unlock@plt-0x20>
   2bf08:	asrs	r6, r6, #2
   2bf0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bf10:	mov	r4, #0
   2bf14:	add	r4, r4, #1
   2bf18:	ldr	r3, [r5], #4
   2bf1c:	mov	r2, r9
   2bf20:	mov	r1, r8
   2bf24:	mov	r0, r7
   2bf28:	blx	r3
   2bf2c:	cmp	r6, r4
   2bf30:	bne	2bf14 <__assert_fail@plt+0x1a814>
   2bf34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bf38:	andeq	r2, r1, ip
   2bf3c:	andeq	r2, r1, r4
   2bf40:	bx	lr
   2bf44:	ldr	r3, [pc, #12]	; 2bf58 <__assert_fail@plt+0x1a858>
   2bf48:	mov	r1, #0
   2bf4c:	add	r3, pc, r3
   2bf50:	ldr	r2, [r3]
   2bf54:	b	11604 <__cxa_atexit@plt>
   2bf58:	strdeq	r2, [r1], -r0

Disassembly of section .fini:

0002bf5c <.fini>:
   2bf5c:	push	{r3, lr}
   2bf60:	pop	{r3, pc}
