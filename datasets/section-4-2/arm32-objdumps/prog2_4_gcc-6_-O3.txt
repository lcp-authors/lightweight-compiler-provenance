
../repos/prog2/4:     file format elf32-littlearm


Disassembly of section .init:

00010984 <.init>:
   10984:	push	{r3, lr}
   10988:	bl	10b1c <_start@@Base+0x3c>
   1098c:	pop	{r3, pc}

Disassembly of section .plt:

00010990 <strcmp@plt-0x14>:
   10990:	push	{lr}		; (str lr, [sp, #-4]!)
   10994:	ldr	lr, [pc, #4]	; 109a0 <strcmp@plt-0x4>
   10998:	add	lr, pc, lr
   1099c:	ldr	pc, [lr, #8]!
   109a0:	andeq	r2, r1, r0, ror #12

000109a4 <strcmp@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #73728	; 0x12000
   109ac:	ldr	pc, [ip, #1632]!	; 0x660

000109b0 <printf@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #73728	; 0x12000
   109b8:	ldr	pc, [ip, #1624]!	; 0x658

000109bc <free@plt>:
   109bc:	add	ip, pc, #0, 12
   109c0:	add	ip, ip, #73728	; 0x12000
   109c4:	ldr	pc, [ip, #1616]!	; 0x650

000109c8 <memcpy@plt>:
   109c8:	add	ip, pc, #0, 12
   109cc:	add	ip, ip, #73728	; 0x12000
   109d0:	ldr	pc, [ip, #1608]!	; 0x648

000109d4 <strdup@plt>:
   109d4:	add	ip, pc, #0, 12
   109d8:	add	ip, ip, #73728	; 0x12000
   109dc:	ldr	pc, [ip, #1600]!	; 0x640

000109e0 <strcpy@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #73728	; 0x12000
   109e8:	ldr	pc, [ip, #1592]!	; 0x638

000109ec <puts@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #73728	; 0x12000
   109f4:	ldr	pc, [ip, #1584]!	; 0x630

000109f8 <malloc@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #73728	; 0x12000
   10a00:	ldr	pc, [ip, #1576]!	; 0x628

00010a04 <__libc_start_main@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #73728	; 0x12000
   10a0c:	ldr	pc, [ip, #1568]!	; 0x620

00010a10 <__gmon_start__@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #73728	; 0x12000
   10a18:	ldr	pc, [ip, #1560]!	; 0x618

00010a1c <strlen@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #73728	; 0x12000
   10a24:	ldr	pc, [ip, #1552]!	; 0x610

00010a28 <setvbuf@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #73728	; 0x12000
   10a30:	ldr	pc, [ip, #1544]!	; 0x608

00010a34 <putchar@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #73728	; 0x12000
   10a3c:	ldr	pc, [ip, #1536]!	; 0x600

00010a40 <abort@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #73728	; 0x12000
   10a48:	ldr	pc, [ip, #1528]!	; 0x5f8

Disassembly of section .text:

00010a4c <main@@Base>:
   10a4c:	ldr	r2, [pc, #124]	; 10ad0 <main@@Base+0x84>
   10a50:	mov	r3, #0
   10a54:	push	{r4, lr}
   10a58:	mov	r1, r3
   10a5c:	ldr	r0, [r2]
   10a60:	mov	r2, #2
   10a64:	bl	10a28 <setvbuf@plt>
   10a68:	ldr	r2, [pc, #100]	; 10ad4 <main@@Base+0x88>
   10a6c:	mov	r3, #0
   10a70:	mov	r1, r3
   10a74:	ldr	r0, [r2]
   10a78:	mov	r2, #2
   10a7c:	bl	10a28 <setvbuf@plt>
   10a80:	bl	10ff8 <teste_lista_nova@@Base>
   10a84:	mov	r4, r0
   10a88:	bl	1107c <teste_lista_insere@@Base>
   10a8c:	add	r4, r4, r0
   10a90:	bl	11388 <teste_lista_remove@@Base>
   10a94:	add	r4, r4, r0
   10a98:	bl	1152c <teste_lista_pesquisa@@Base>
   10a9c:	add	r4, r4, r0
   10aa0:	bl	116b8 <teste_lista_ordena@@Base>
   10aa4:	add	r4, r4, r0
   10aa8:	bl	11894 <teste_lista_inverte@@Base>
   10aac:	adds	r1, r4, r0
   10ab0:	beq	10ac4 <main@@Base+0x78>
   10ab4:	ldr	r0, [pc, #28]	; 10ad8 <main@@Base+0x8c>
   10ab8:	bl	109b0 <printf@plt>
   10abc:	mov	r0, #0
   10ac0:	pop	{r4, pc}
   10ac4:	ldr	r0, [pc, #16]	; 10adc <main@@Base+0x90>
   10ac8:	bl	109ec <puts@plt>
   10acc:	b	10abc <main@@Base+0x70>
   10ad0:	andeq	r3, r2, r4, asr r0
   10ad4:	andeq	r3, r2, r0, asr r0
   10ad8:	muleq	r1, r8, r3
   10adc:	andeq	r2, r1, r0, lsl #7

00010ae0 <_start@@Base>:
   10ae0:	mov	fp, #0
   10ae4:	mov	lr, #0
   10ae8:	pop	{r1}		; (ldr r1, [sp], #4)
   10aec:	mov	r2, sp
   10af0:	push	{r2}		; (str r2, [sp, #-4]!)
   10af4:	push	{r0}		; (str r0, [sp, #-4]!)
   10af8:	ldr	ip, [pc, #16]	; 10b10 <_start@@Base+0x30>
   10afc:	push	{ip}		; (str ip, [sp, #-4]!)
   10b00:	ldr	r0, [pc, #12]	; 10b14 <_start@@Base+0x34>
   10b04:	ldr	r3, [pc, #12]	; 10b18 <_start@@Base+0x38>
   10b08:	bl	10a04 <__libc_start_main@plt>
   10b0c:	bl	10a40 <abort@plt>
   10b10:	andeq	r1, r1, r0, ror lr
   10b14:	andeq	r0, r1, ip, asr #20
   10b18:	andeq	r1, r1, r0, lsl lr
   10b1c:	ldr	r3, [pc, #20]	; 10b38 <_start@@Base+0x58>
   10b20:	ldr	r2, [pc, #20]	; 10b3c <_start@@Base+0x5c>
   10b24:	add	r3, pc, r3
   10b28:	ldr	r2, [r3, r2]
   10b2c:	cmp	r2, #0
   10b30:	bxeq	lr
   10b34:	b	10a10 <__gmon_start__@plt>
   10b38:	ldrdeq	r2, [r1], -r4
   10b3c:	andeq	r0, r0, r4, asr #32
   10b40:	ldr	r3, [pc, #28]	; 10b64 <_start@@Base+0x84>
   10b44:	ldr	r0, [pc, #28]	; 10b68 <_start@@Base+0x88>
   10b48:	sub	r3, r3, r0
   10b4c:	cmp	r3, #6
   10b50:	bxls	lr
   10b54:	ldr	r3, [pc, #16]	; 10b6c <_start@@Base+0x8c>
   10b58:	cmp	r3, #0
   10b5c:	bxeq	lr
   10b60:	bx	r3
   10b64:	andeq	r3, r2, r3, asr r0
   10b68:	andeq	r3, r2, r0, asr r0
   10b6c:	andeq	r0, r0, r0
   10b70:	ldr	r1, [pc, #36]	; 10b9c <_start@@Base+0xbc>
   10b74:	ldr	r0, [pc, #36]	; 10ba0 <_start@@Base+0xc0>
   10b78:	sub	r1, r1, r0
   10b7c:	asr	r1, r1, #2
   10b80:	add	r1, r1, r1, lsr #31
   10b84:	asrs	r1, r1, #1
   10b88:	bxeq	lr
   10b8c:	ldr	r3, [pc, #16]	; 10ba4 <_start@@Base+0xc4>
   10b90:	cmp	r3, #0
   10b94:	bxeq	lr
   10b98:	bx	r3
   10b9c:	andeq	r3, r2, r0, asr r0
   10ba0:	andeq	r3, r2, r0, asr r0
   10ba4:	andeq	r0, r0, r0
   10ba8:	push	{r4, lr}
   10bac:	ldr	r4, [pc, #24]	; 10bcc <_start@@Base+0xec>
   10bb0:	ldrb	r3, [r4]
   10bb4:	cmp	r3, #0
   10bb8:	popne	{r4, pc}
   10bbc:	bl	10b40 <_start@@Base+0x60>
   10bc0:	mov	r3, #1
   10bc4:	strb	r3, [r4]
   10bc8:	pop	{r4, pc}
   10bcc:	andeq	r3, r2, r8, asr r0
   10bd0:	ldr	r0, [pc, #40]	; 10c00 <_start@@Base+0x120>
   10bd4:	ldr	r3, [r0]
   10bd8:	cmp	r3, #0
   10bdc:	bne	10be4 <_start@@Base+0x104>
   10be0:	b	10b70 <_start@@Base+0x90>
   10be4:	ldr	r3, [pc, #24]	; 10c04 <_start@@Base+0x124>
   10be8:	cmp	r3, #0
   10bec:	beq	10be0 <_start@@Base+0x100>
   10bf0:	push	{r4, lr}
   10bf4:	blx	r3
   10bf8:	pop	{r4, lr}
   10bfc:	b	10b70 <_start@@Base+0x90>
   10c00:	andeq	r2, r2, r4, lsl pc
   10c04:	andeq	r0, r0, r0
   10c08:	push	{r0, r1, r2, r3}
   10c0c:	mov	r0, #12
   10c10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10c14:	sub	sp, sp, #8
   10c18:	bl	109f8 <malloc@plt>
   10c1c:	mov	sl, #0
   10c20:	mov	r2, #2
   10c24:	add	r3, sp, #44	; 0x2c
   10c28:	str	r3, [sp, #4]
   10c2c:	mov	r5, #1
   10c30:	mov	r8, #12
   10c34:	mov	r9, r0
   10c38:	str	r2, [r0, #8]
   10c3c:	str	sl, [r0]
   10c40:	str	sl, [r0, #4]
   10c44:	b	10c4c <_start@@Base+0x16c>
   10c48:	add	r5, r5, #1
   10c4c:	ldr	r3, [sp, #4]
   10c50:	cmp	r5, #1
   10c54:	add	r2, r3, #4
   10c58:	mov	r0, r8
   10c5c:	str	r2, [sp, #4]
   10c60:	ldr	r6, [r3]
   10c64:	beq	10cc0 <_start@@Base+0x1e0>
   10c68:	bl	109f8 <malloc@plt>
   10c6c:	mov	r4, r0
   10c70:	str	r0, [r7, #4]
   10c74:	str	r7, [r4, #8]
   10c78:	mov	r0, r6
   10c7c:	bl	10a1c <strlen@plt>
   10c80:	mov	r7, r4
   10c84:	add	r0, r0, #1
   10c88:	bl	109f8 <malloc@plt>
   10c8c:	mov	r1, r6
   10c90:	str	r0, [r4]
   10c94:	bl	109e0 <strcpy@plt>
   10c98:	cmp	r5, #2
   10c9c:	bne	10c48 <_start@@Base+0x168>
   10ca0:	mov	r3, #0
   10ca4:	mov	r0, r9
   10ca8:	str	r4, [r9, #4]
   10cac:	str	r3, [r4, #4]
   10cb0:	add	sp, sp, #8
   10cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10cb8:	add	sp, sp, #16
   10cbc:	bx	lr
   10cc0:	bl	109f8 <malloc@plt>
   10cc4:	mov	r4, r0
   10cc8:	mov	r0, r6
   10ccc:	str	sl, [r4, #8]
   10cd0:	str	r4, [r9]
   10cd4:	bl	10a1c <strlen@plt>
   10cd8:	mov	r7, r4
   10cdc:	add	r0, r0, #1
   10ce0:	bl	109f8 <malloc@plt>
   10ce4:	mov	r1, r6
   10ce8:	str	r0, [r4]
   10cec:	bl	109e0 <strcpy@plt>
   10cf0:	b	10c48 <_start@@Base+0x168>
   10cf4:	push	{r0, r1, r2, r3}
   10cf8:	mov	r0, #12
   10cfc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d00:	sub	sp, sp, #8
   10d04:	bl	109f8 <malloc@plt>
   10d08:	mov	sl, #0
   10d0c:	mov	r2, #7
   10d10:	add	r3, sp, #44	; 0x2c
   10d14:	str	r3, [sp, #4]
   10d18:	mov	r5, #1
   10d1c:	mov	r8, #12
   10d20:	mov	r9, r0
   10d24:	str	r2, [r0, #8]
   10d28:	str	sl, [r0]
   10d2c:	str	sl, [r0, #4]
   10d30:	b	10d38 <_start@@Base+0x258>
   10d34:	add	r5, r5, #1
   10d38:	ldr	r3, [sp, #4]
   10d3c:	cmp	r5, #1
   10d40:	add	r2, r3, #4
   10d44:	mov	r0, r8
   10d48:	str	r2, [sp, #4]
   10d4c:	ldr	r6, [r3]
   10d50:	beq	10dac <_start@@Base+0x2cc>
   10d54:	bl	109f8 <malloc@plt>
   10d58:	mov	r4, r0
   10d5c:	str	r0, [r7, #4]
   10d60:	str	r7, [r4, #8]
   10d64:	mov	r0, r6
   10d68:	bl	10a1c <strlen@plt>
   10d6c:	mov	r7, r4
   10d70:	add	r0, r0, #1
   10d74:	bl	109f8 <malloc@plt>
   10d78:	mov	r1, r6
   10d7c:	str	r0, [r4]
   10d80:	bl	109e0 <strcpy@plt>
   10d84:	cmp	r5, #7
   10d88:	bne	10d34 <_start@@Base+0x254>
   10d8c:	mov	r3, #0
   10d90:	mov	r0, r9
   10d94:	str	r4, [r9, #4]
   10d98:	str	r3, [r4, #4]
   10d9c:	add	sp, sp, #8
   10da0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10da4:	add	sp, sp, #16
   10da8:	bx	lr
   10dac:	bl	109f8 <malloc@plt>
   10db0:	mov	r4, r0
   10db4:	mov	r0, r6
   10db8:	str	sl, [r4, #8]
   10dbc:	str	r4, [r9]
   10dc0:	bl	10a1c <strlen@plt>
   10dc4:	mov	r7, r4
   10dc8:	add	r0, r0, #1
   10dcc:	bl	109f8 <malloc@plt>
   10dd0:	mov	r1, r6
   10dd4:	str	r0, [r4]
   10dd8:	bl	109e0 <strcpy@plt>
   10ddc:	b	10d34 <_start@@Base+0x254>
   10de0:	push	{r0, r1, r2, r3}
   10de4:	mov	r0, #12
   10de8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10dec:	sub	sp, sp, #8
   10df0:	bl	109f8 <malloc@plt>
   10df4:	mov	sl, #0
   10df8:	mov	r2, #5
   10dfc:	add	r3, sp, #44	; 0x2c
   10e00:	str	r3, [sp, #4]
   10e04:	mov	r5, #1
   10e08:	mov	r8, #12
   10e0c:	mov	r9, r0
   10e10:	str	r2, [r0, #8]
   10e14:	str	sl, [r0]
   10e18:	str	sl, [r0, #4]
   10e1c:	b	10e24 <_start@@Base+0x344>
   10e20:	add	r5, r5, #1
   10e24:	ldr	r3, [sp, #4]
   10e28:	cmp	r5, #1
   10e2c:	add	r2, r3, #4
   10e30:	mov	r0, r8
   10e34:	str	r2, [sp, #4]
   10e38:	ldr	r6, [r3]
   10e3c:	beq	10e98 <_start@@Base+0x3b8>
   10e40:	bl	109f8 <malloc@plt>
   10e44:	mov	r4, r0
   10e48:	str	r0, [r7, #4]
   10e4c:	str	r7, [r4, #8]
   10e50:	mov	r0, r6
   10e54:	bl	10a1c <strlen@plt>
   10e58:	mov	r7, r4
   10e5c:	add	r0, r0, #1
   10e60:	bl	109f8 <malloc@plt>
   10e64:	mov	r1, r6
   10e68:	str	r0, [r4]
   10e6c:	bl	109e0 <strcpy@plt>
   10e70:	cmp	r5, #5
   10e74:	bne	10e20 <_start@@Base+0x340>
   10e78:	mov	r3, #0
   10e7c:	mov	r0, r9
   10e80:	str	r4, [r9, #4]
   10e84:	str	r3, [r4, #4]
   10e88:	add	sp, sp, #8
   10e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e90:	add	sp, sp, #16
   10e94:	bx	lr
   10e98:	bl	109f8 <malloc@plt>
   10e9c:	mov	r4, r0
   10ea0:	mov	r0, r6
   10ea4:	str	sl, [r4, #8]
   10ea8:	str	r4, [r9]
   10eac:	bl	10a1c <strlen@plt>
   10eb0:	mov	r7, r4
   10eb4:	add	r0, r0, #1
   10eb8:	bl	109f8 <malloc@plt>
   10ebc:	mov	r1, r6
   10ec0:	str	r0, [r4]
   10ec4:	bl	109e0 <strcpy@plt>
   10ec8:	b	10e20 <_start@@Base+0x340>

00010ecc <_l@@Base>:
   10ecc:	push	{r0, r1, r2, r3}
   10ed0:	mov	r0, #12
   10ed4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10ed8:	sub	sp, sp, #8
   10edc:	mov	r5, #0
   10ee0:	ldr	r8, [sp, #40]	; 0x28
   10ee4:	bl	109f8 <malloc@plt>
   10ee8:	add	r3, sp, #44	; 0x2c
   10eec:	cmp	r8, #0
   10ef0:	str	r3, [sp, #4]
   10ef4:	mov	r9, r0
   10ef8:	str	r8, [r0, #8]
   10efc:	str	r5, [r0]
   10f00:	str	r5, [r0, #4]
   10f04:	ble	10f64 <_l@@Base+0x98>
   10f08:	mov	sl, #12
   10f0c:	ldr	r3, [sp, #4]
   10f10:	cmp	r5, #0
   10f14:	add	r2, r3, #4
   10f18:	mov	r0, sl
   10f1c:	str	r2, [sp, #4]
   10f20:	ldr	r7, [r3]
   10f24:	beq	10f84 <_l@@Base+0xb8>
   10f28:	bl	109f8 <malloc@plt>
   10f2c:	add	r5, r5, #1
   10f30:	mov	r4, r0
   10f34:	str	r0, [r6, #4]
   10f38:	str	r6, [r4, #8]
   10f3c:	mov	r0, r7
   10f40:	bl	10a1c <strlen@plt>
   10f44:	mov	r6, r4
   10f48:	add	r0, r0, #1
   10f4c:	bl	109f8 <malloc@plt>
   10f50:	mov	r1, r7
   10f54:	str	r0, [r4]
   10f58:	bl	109e0 <strcpy@plt>
   10f5c:	cmp	r8, r5
   10f60:	bne	10f0c <_l@@Base+0x40>
   10f64:	mov	r3, #0
   10f68:	mov	r0, r9
   10f6c:	str	r6, [r9, #4]
   10f70:	str	r3, [r6, #4]
   10f74:	add	sp, sp, #8
   10f78:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f7c:	add	sp, sp, #16
   10f80:	bx	lr
   10f84:	bl	109f8 <malloc@plt>
   10f88:	mov	r4, r0
   10f8c:	mov	r0, r7
   10f90:	str	r5, [r4, #8]
   10f94:	str	r4, [r9]
   10f98:	bl	10a1c <strlen@plt>
   10f9c:	mov	r5, #1
   10fa0:	mov	r6, r4
   10fa4:	add	r0, r0, r5
   10fa8:	b	10f4c <_l@@Base+0x80>

00010fac <_f@@Base>:
   10fac:	cmp	r0, #0
   10fb0:	bxeq	lr
   10fb4:	ldr	r3, [r0]
   10fb8:	cmp	r3, #0
   10fbc:	cmpne	r1, #0
   10fc0:	movgt	r2, #1
   10fc4:	movle	r2, #0
   10fc8:	ble	10fe4 <_f@@Base+0x38>
   10fcc:	mov	r2, #0
   10fd0:	ldr	r3, [r3, #4]
   10fd4:	add	r2, r2, #1
   10fd8:	cmp	r3, #0
   10fdc:	cmpne	r1, r2
   10fe0:	bgt	10fd0 <_f@@Base+0x24>
   10fe4:	cmp	r1, r2
   10fe8:	ldreq	r0, [r3]
   10fec:	ldrne	r0, [pc]	; 10ff4 <_f@@Base+0x48>
   10ff0:	bx	lr
   10ff4:	andeq	r2, r1, ip, asr #4

00010ff8 <teste_lista_nova@@Base>:
   10ff8:	push	{r4, r5, r6, lr}
   10ffc:	ldr	r0, [pc, #104]	; 1106c <teste_lista_nova@@Base+0x74>
   11000:	bl	109b0 <printf@plt>
   11004:	bl	11a8c <lista_nova@@Base>
   11008:	subs	r5, r0, #0
   1100c:	beq	11054 <teste_lista_nova@@Base+0x5c>
   11010:	ldr	r4, [r5, #8]
   11014:	cmp	r4, #0
   11018:	bne	11030 <teste_lista_nova@@Base+0x38>
   1101c:	bl	11aa8 <lista_apaga@@Base>
   11020:	ldr	r0, [pc, #72]	; 11070 <teste_lista_nova@@Base+0x78>
   11024:	bl	109ec <puts@plt>
   11028:	mov	r0, r4
   1102c:	pop	{r4, r5, r6, pc}
   11030:	ldr	r0, [pc, #60]	; 11074 <teste_lista_nova@@Base+0x7c>
   11034:	bl	109b0 <printf@plt>
   11038:	mov	r0, r5
   1103c:	bl	11aa8 <lista_apaga@@Base>
   11040:	mov	r4, #1
   11044:	mov	r0, #10
   11048:	bl	10a34 <putchar@plt>
   1104c:	mov	r0, r4
   11050:	pop	{r4, r5, r6, pc}
   11054:	ldr	r0, [pc, #28]	; 11078 <teste_lista_nova@@Base+0x80>
   11058:	bl	109b0 <printf@plt>
   1105c:	mov	r0, #10
   11060:	bl	10a34 <putchar@plt>
   11064:	mov	r4, #1
   11068:	b	11028 <teste_lista_nova@@Base+0x30>
   1106c:	andeq	r1, r1, r0, lsl #29
   11070:	andeq	r1, r1, ip, asr #29
   11074:	andeq	r1, r1, r8, lsr #29
   11078:	muleq	r1, r0, lr

0001107c <teste_lista_insere@@Base>:
   1107c:	ldr	r2, [pc, #728]	; 1135c <teste_lista_insere@@Base+0x2e0>
   11080:	push	{r4, r5, r6, r7, r8, lr}
   11084:	mov	r1, r2
   11088:	mov	r0, #2
   1108c:	bl	10c08 <_start@@Base+0x128>
   11090:	mov	r4, r0
   11094:	ldr	r0, [pc, #708]	; 11360 <teste_lista_insere@@Base+0x2e4>
   11098:	bl	109b0 <printf@plt>
   1109c:	ldr	r3, [r4]
   110a0:	mov	r0, r4
   110a4:	ldr	r1, [pc, #696]	; 11364 <teste_lista_insere@@Base+0x2e8>
   110a8:	ldr	r2, [r3, #4]
   110ac:	bl	11b30 <lista_insere@@Base>
   110b0:	cmp	r0, #0
   110b4:	movne	r5, #1
   110b8:	movne	r6, #0
   110bc:	beq	1129c <teste_lista_insere@@Base+0x220>
   110c0:	ldr	r3, [r4, #8]
   110c4:	cmp	r3, #3
   110c8:	beq	110f4 <teste_lista_insere@@Base+0x78>
   110cc:	ldr	r0, [pc, #660]	; 11368 <teste_lista_insere@@Base+0x2ec>
   110d0:	bl	109b0 <printf@plt>
   110d4:	ldr	r3, [r4, #8]
   110d8:	cmp	r3, #3
   110dc:	beq	110f0 <teste_lista_insere@@Base+0x74>
   110e0:	mov	r0, #10
   110e4:	bl	10a34 <putchar@plt>
   110e8:	mov	r0, r5
   110ec:	pop	{r4, r5, r6, r7, r8, pc}
   110f0:	mov	r6, r5
   110f4:	ldr	r5, [r4]
   110f8:	ldr	r1, [pc, #604]	; 1135c <teste_lista_insere@@Base+0x2e0>
   110fc:	ldr	r0, [r5]
   11100:	bl	109a4 <strcmp@plt>
   11104:	cmp	r0, #0
   11108:	bne	1113c <teste_lista_insere@@Base+0xc0>
   1110c:	ldr	r7, [r5, #4]
   11110:	ldr	r1, [pc, #588]	; 11364 <teste_lista_insere@@Base+0x2e8>
   11114:	ldr	r0, [r7]
   11118:	bl	109a4 <strcmp@plt>
   1111c:	cmp	r0, #0
   11120:	bne	1113c <teste_lista_insere@@Base+0xc0>
   11124:	ldr	r3, [r7, #4]
   11128:	ldr	r1, [pc, #556]	; 1135c <teste_lista_insere@@Base+0x2e0>
   1112c:	ldr	r0, [r3]
   11130:	bl	109a4 <strcmp@plt>
   11134:	cmp	r0, #0
   11138:	beq	1114c <teste_lista_insere@@Base+0xd0>
   1113c:	ldr	r0, [pc, #552]	; 1136c <teste_lista_insere@@Base+0x2f0>
   11140:	bl	109b0 <printf@plt>
   11144:	ldr	r5, [r4]
   11148:	add	r6, r6, #1
   1114c:	mov	r2, r5
   11150:	ldr	r1, [pc, #524]	; 11364 <teste_lista_insere@@Base+0x2e8>
   11154:	mov	r0, r4
   11158:	bl	11b30 <lista_insere@@Base>
   1115c:	ldr	r3, [r4]
   11160:	cmp	r3, r0
   11164:	beq	11174 <teste_lista_insere@@Base+0xf8>
   11168:	ldr	r0, [pc, #512]	; 11370 <teste_lista_insere@@Base+0x2f4>
   1116c:	bl	109b0 <printf@plt>
   11170:	add	r6, r6, #1
   11174:	ldr	r3, [r4, #8]
   11178:	cmp	r3, #4
   1117c:	beq	1119c <teste_lista_insere@@Base+0x120>
   11180:	ldr	r0, [pc, #492]	; 11374 <teste_lista_insere@@Base+0x2f8>
   11184:	bl	109b0 <printf@plt>
   11188:	ldr	r3, [r4, #8]
   1118c:	add	r5, r6, #1
   11190:	cmp	r3, #4
   11194:	bne	110e0 <teste_lista_insere@@Base+0x64>
   11198:	mov	r6, r5
   1119c:	ldr	r5, [r4]
   111a0:	ldr	r1, [pc, #444]	; 11364 <teste_lista_insere@@Base+0x2e8>
   111a4:	ldr	r0, [r5]
   111a8:	bl	109a4 <strcmp@plt>
   111ac:	cmp	r0, #0
   111b0:	bne	111cc <teste_lista_insere@@Base+0x150>
   111b4:	ldr	r5, [r5, #4]
   111b8:	ldr	r1, [pc, #412]	; 1135c <teste_lista_insere@@Base+0x2e0>
   111bc:	ldr	r0, [r5]
   111c0:	bl	109a4 <strcmp@plt>
   111c4:	cmp	r0, #0
   111c8:	beq	112b0 <teste_lista_insere@@Base+0x234>
   111cc:	ldr	r0, [pc, #408]	; 1136c <teste_lista_insere@@Base+0x2f0>
   111d0:	add	r5, r6, #1
   111d4:	bl	109b0 <printf@plt>
   111d8:	mov	r2, #0
   111dc:	ldr	r1, [pc, #384]	; 11364 <teste_lista_insere@@Base+0x2e8>
   111e0:	mov	r0, r4
   111e4:	bl	11b30 <lista_insere@@Base>
   111e8:	ldr	r3, [r4, #8]
   111ec:	cmp	r3, #5
   111f0:	beq	1120c <teste_lista_insere@@Base+0x190>
   111f4:	ldr	r0, [pc, #380]	; 11378 <teste_lista_insere@@Base+0x2fc>
   111f8:	bl	109b0 <printf@plt>
   111fc:	ldr	r3, [r4, #8]
   11200:	add	r5, r5, #1
   11204:	cmp	r3, #5
   11208:	bne	110e0 <teste_lista_insere@@Base+0x64>
   1120c:	ldr	r3, [r4]
   11210:	ldr	r1, [pc, #332]	; 11364 <teste_lista_insere@@Base+0x2e8>
   11214:	ldr	r3, [r3, #4]
   11218:	ldr	r3, [r3, #4]
   1121c:	ldr	r3, [r3, #4]
   11220:	ldr	r3, [r3, #4]
   11224:	ldr	r0, [r3]
   11228:	bl	109a4 <strcmp@plt>
   1122c:	cmp	r0, #0
   11230:	bne	11310 <teste_lista_insere@@Base+0x294>
   11234:	mov	r0, r4
   11238:	bl	11aa8 <lista_apaga@@Base>
   1123c:	bl	11a8c <lista_nova@@Base>
   11240:	mov	r2, #0
   11244:	ldr	r1, [pc, #280]	; 11364 <teste_lista_insere@@Base+0x2e8>
   11248:	mov	r4, r0
   1124c:	bl	11b30 <lista_insere@@Base>
   11250:	ldr	r3, [r4, #8]
   11254:	cmp	r3, #1
   11258:	beq	112e8 <teste_lista_insere@@Base+0x26c>
   1125c:	ldr	r0, [pc, #280]	; 1137c <teste_lista_insere@@Base+0x300>
   11260:	bl	109b0 <printf@plt>
   11264:	mov	r0, r4
   11268:	bl	11b08 <lista_tamanho@@Base>
   1126c:	add	r5, r5, #1
   11270:	cmp	r0, #1
   11274:	bne	110e0 <teste_lista_insere@@Base+0x64>
   11278:	ldr	r3, [r4]
   1127c:	ldr	r1, [pc, #224]	; 11364 <teste_lista_insere@@Base+0x2e8>
   11280:	ldr	r0, [r3]
   11284:	bl	109a4 <strcmp@plt>
   11288:	cmp	r0, #0
   1128c:	bne	11344 <teste_lista_insere@@Base+0x2c8>
   11290:	mov	r0, r4
   11294:	bl	11aa8 <lista_apaga@@Base>
   11298:	b	110e0 <teste_lista_insere@@Base+0x64>
   1129c:	ldr	r0, [pc, #220]	; 11380 <teste_lista_insere@@Base+0x304>
   112a0:	bl	109b0 <printf@plt>
   112a4:	mov	r5, #2
   112a8:	mov	r6, #1
   112ac:	b	110c0 <teste_lista_insere@@Base+0x44>
   112b0:	ldr	r5, [r5, #4]
   112b4:	ldr	r1, [pc, #168]	; 11364 <teste_lista_insere@@Base+0x2e8>
   112b8:	ldr	r0, [r5]
   112bc:	bl	109a4 <strcmp@plt>
   112c0:	cmp	r0, #0
   112c4:	bne	111cc <teste_lista_insere@@Base+0x150>
   112c8:	ldr	r3, [r5, #4]
   112cc:	ldr	r1, [pc, #136]	; 1135c <teste_lista_insere@@Base+0x2e0>
   112d0:	ldr	r0, [r3]
   112d4:	bl	109a4 <strcmp@plt>
   112d8:	cmp	r0, #0
   112dc:	moveq	r5, r6
   112e0:	beq	111d8 <teste_lista_insere@@Base+0x15c>
   112e4:	b	111cc <teste_lista_insere@@Base+0x150>
   112e8:	mov	r0, r4
   112ec:	bl	11b08 <lista_tamanho@@Base>
   112f0:	cmp	r0, #1
   112f4:	beq	11320 <teste_lista_insere@@Base+0x2a4>
   112f8:	cmp	r5, #0
   112fc:	bne	110e0 <teste_lista_insere@@Base+0x64>
   11300:	ldr	r0, [pc, #124]	; 11384 <teste_lista_insere@@Base+0x308>
   11304:	bl	109ec <puts@plt>
   11308:	mov	r5, #0
   1130c:	b	110e8 <teste_lista_insere@@Base+0x6c>
   11310:	ldr	r0, [pc, #84]	; 1136c <teste_lista_insere@@Base+0x2f0>
   11314:	bl	109b0 <printf@plt>
   11318:	add	r5, r5, #1
   1131c:	b	11234 <teste_lista_insere@@Base+0x1b8>
   11320:	ldr	r3, [r4]
   11324:	ldr	r1, [pc, #56]	; 11364 <teste_lista_insere@@Base+0x2e8>
   11328:	ldr	r0, [r3]
   1132c:	bl	109a4 <strcmp@plt>
   11330:	cmp	r0, #0
   11334:	bne	11344 <teste_lista_insere@@Base+0x2c8>
   11338:	mov	r0, r4
   1133c:	bl	11aa8 <lista_apaga@@Base>
   11340:	b	112f8 <teste_lista_insere@@Base+0x27c>
   11344:	ldr	r0, [pc, #32]	; 1136c <teste_lista_insere@@Base+0x2f0>
   11348:	bl	109b0 <printf@plt>
   1134c:	mov	r0, r4
   11350:	add	r5, r5, #1
   11354:	bl	11aa8 <lista_apaga@@Base>
   11358:	b	110e0 <teste_lista_insere@@Base+0x64>
   1135c:	ldrdeq	r1, [r1], -r0
   11360:	ldrdeq	r1, [r1], -r4
   11364:	andeq	r1, r1, r8, ror #29
   11368:	andeq	r1, r1, ip, lsl pc
   1136c:	andeq	r1, r1, r8, asr pc
   11370:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11374:	andeq	r1, r1, r0, asr #31
   11378:	strdeq	r1, [r1], -ip
   1137c:	andeq	r2, r1, r8, lsr r0
   11380:	strdeq	r1, [r1], -r0
   11384:	andeq	r1, r1, ip, asr #29

00011388 <teste_lista_remove@@Base>:
   11388:	push	{r4, r5, r6, lr}
   1138c:	sub	sp, sp, #8
   11390:	ldr	r2, [pc, #360]	; 11500 <teste_lista_remove@@Base+0x178>
   11394:	ldr	r3, [pc, #360]	; 11504 <teste_lista_remove@@Base+0x17c>
   11398:	ldr	r1, [pc, #360]	; 11508 <teste_lista_remove@@Base+0x180>
   1139c:	str	r2, [sp, #4]
   113a0:	str	r3, [sp]
   113a4:	ldr	r2, [pc, #352]	; 1150c <teste_lista_remove@@Base+0x184>
   113a8:	ldr	r3, [pc, #352]	; 11510 <teste_lista_remove@@Base+0x188>
   113ac:	mov	r0, #5
   113b0:	bl	10de0 <_start@@Base+0x300>
   113b4:	mov	r4, r0
   113b8:	ldr	r0, [pc, #340]	; 11514 <teste_lista_remove@@Base+0x18c>
   113bc:	bl	109b0 <printf@plt>
   113c0:	ldr	r3, [r4]
   113c4:	mov	r0, r4
   113c8:	ldr	r3, [r3, #4]
   113cc:	ldr	r3, [r3, #4]
   113d0:	ldr	r1, [r3, #4]
   113d4:	bl	11bf4 <lista_remove@@Base>
   113d8:	ldr	r3, [r4, #4]
   113dc:	cmp	r3, r0
   113e0:	beq	114e8 <teste_lista_remove@@Base+0x160>
   113e4:	ldr	r0, [pc, #300]	; 11518 <teste_lista_remove@@Base+0x190>
   113e8:	bl	109b0 <printf@plt>
   113ec:	mov	r6, #2
   113f0:	mov	r5, #1
   113f4:	ldr	r3, [r4, #8]
   113f8:	cmp	r3, #4
   113fc:	beq	1140c <teste_lista_remove@@Base+0x84>
   11400:	ldr	r0, [pc, #276]	; 1151c <teste_lista_remove@@Base+0x194>
   11404:	bl	109b0 <printf@plt>
   11408:	mov	r5, r6
   1140c:	ldr	r6, [r4]
   11410:	ldr	r1, [pc, #240]	; 11508 <teste_lista_remove@@Base+0x180>
   11414:	ldr	r0, [r6]
   11418:	bl	109a4 <strcmp@plt>
   1141c:	cmp	r0, #0
   11420:	bne	1143c <teste_lista_remove@@Base+0xb4>
   11424:	ldr	r6, [r6, #4]
   11428:	ldr	r1, [pc, #220]	; 1150c <teste_lista_remove@@Base+0x184>
   1142c:	ldr	r0, [r6]
   11430:	bl	109a4 <strcmp@plt>
   11434:	cmp	r0, #0
   11438:	beq	11484 <teste_lista_remove@@Base+0xfc>
   1143c:	ldr	r0, [pc, #220]	; 11520 <teste_lista_remove@@Base+0x198>
   11440:	bl	109b0 <printf@plt>
   11444:	mov	r1, #0
   11448:	mov	r0, r4
   1144c:	bl	11bf4 <lista_remove@@Base>
   11450:	add	r5, r5, #1
   11454:	cmp	r0, #0
   11458:	beq	114f4 <teste_lista_remove@@Base+0x16c>
   1145c:	ldr	r0, [pc, #192]	; 11524 <teste_lista_remove@@Base+0x19c>
   11460:	bl	109b0 <printf@plt>
   11464:	mov	r0, r4
   11468:	add	r5, r5, #1
   1146c:	bl	11aa8 <lista_apaga@@Base>
   11470:	mov	r0, #10
   11474:	bl	10a34 <putchar@plt>
   11478:	mov	r0, r5
   1147c:	add	sp, sp, #8
   11480:	pop	{r4, r5, r6, pc}
   11484:	ldr	r6, [r6, #4]
   11488:	ldr	r1, [pc, #128]	; 11510 <teste_lista_remove@@Base+0x188>
   1148c:	ldr	r0, [r6]
   11490:	bl	109a4 <strcmp@plt>
   11494:	cmp	r0, #0
   11498:	bne	1143c <teste_lista_remove@@Base+0xb4>
   1149c:	ldr	r3, [r6, #4]
   114a0:	ldr	r1, [pc, #88]	; 11500 <teste_lista_remove@@Base+0x178>
   114a4:	ldr	r0, [r3]
   114a8:	bl	109a4 <strcmp@plt>
   114ac:	subs	r1, r0, #0
   114b0:	bne	1143c <teste_lista_remove@@Base+0xb4>
   114b4:	mov	r0, r4
   114b8:	bl	11bf4 <lista_remove@@Base>
   114bc:	cmp	r0, #0
   114c0:	bne	1145c <teste_lista_remove@@Base+0xd4>
   114c4:	mov	r0, r4
   114c8:	bl	11aa8 <lista_apaga@@Base>
   114cc:	cmp	r5, #0
   114d0:	bne	11470 <teste_lista_remove@@Base+0xe8>
   114d4:	ldr	r0, [pc, #76]	; 11528 <teste_lista_remove@@Base+0x1a0>
   114d8:	bl	109ec <puts@plt>
   114dc:	mov	r0, r5
   114e0:	add	sp, sp, #8
   114e4:	pop	{r4, r5, r6, pc}
   114e8:	mov	r6, #1
   114ec:	mov	r5, #0
   114f0:	b	113f4 <teste_lista_remove@@Base+0x6c>
   114f4:	mov	r0, r4
   114f8:	bl	11aa8 <lista_apaga@@Base>
   114fc:	b	11470 <teste_lista_remove@@Base+0xe8>
   11500:	andeq	r2, r1, r0, lsl #1
   11504:	andeq	r2, r1, r4, lsl #1
   11508:	andeq	r2, r1, ip, ror r0
   1150c:	andeq	r2, r1, r8, ror r0
   11510:	andeq	r2, r1, r4, ror r0
   11514:	andeq	r2, r1, r8, lsl #1
   11518:	muleq	r1, ip, r0
   1151c:	ldrdeq	r2, [r1], -r8
   11520:	andeq	r2, r1, r4, lsl r1
   11524:	andeq	r2, r1, ip, asr #2
   11528:	andeq	r1, r1, ip, asr #29

0001152c <teste_lista_pesquisa@@Base>:
   1152c:	push	{r4, r5, r6, lr}
   11530:	sub	sp, sp, #16
   11534:	ldr	r3, [pc, #352]	; 1169c <teste_lista_pesquisa@@Base+0x170>
   11538:	ldr	r5, [pc, #352]	; 116a0 <teste_lista_pesquisa@@Base+0x174>
   1153c:	mov	r2, r3
   11540:	mov	r1, r3
   11544:	str	r3, [sp, #12]
   11548:	str	r3, [sp, #8]
   1154c:	str	r3, [sp]
   11550:	str	r5, [sp, #4]
   11554:	mov	r0, #7
   11558:	bl	10cf4 <_start@@Base+0x214>
   1155c:	mov	r4, r0
   11560:	ldr	r0, [pc, #316]	; 116a4 <teste_lista_pesquisa@@Base+0x178>
   11564:	bl	109b0 <printf@plt>
   11568:	mov	r1, r5
   1156c:	mov	r0, r4
   11570:	mov	r2, #0
   11574:	bl	11c70 <lista_pesquisa@@Base>
   11578:	ldr	r3, [r4]
   1157c:	ldr	r3, [r3, #4]
   11580:	ldr	r3, [r3, #4]
   11584:	ldr	r3, [r3, #4]
   11588:	ldr	r3, [r3, #4]
   1158c:	cmp	r3, r0
   11590:	beq	11690 <teste_lista_pesquisa@@Base+0x164>
   11594:	ldr	r0, [pc, #268]	; 116a8 <teste_lista_pesquisa@@Base+0x17c>
   11598:	bl	109b0 <printf@plt>
   1159c:	mov	r5, #2
   115a0:	mov	r6, #1
   115a4:	mov	r2, #0
   115a8:	ldr	r1, [pc, #252]	; 116ac <teste_lista_pesquisa@@Base+0x180>
   115ac:	mov	r0, r4
   115b0:	bl	11c70 <lista_pesquisa@@Base>
   115b4:	cmp	r0, #0
   115b8:	moveq	r5, r6
   115bc:	beq	115c8 <teste_lista_pesquisa@@Base+0x9c>
   115c0:	ldr	r0, [pc, #232]	; 116b0 <teste_lista_pesquisa@@Base+0x184>
   115c4:	bl	109b0 <printf@plt>
   115c8:	mov	r2, #1
   115cc:	ldr	r1, [pc, #200]	; 1169c <teste_lista_pesquisa@@Base+0x170>
   115d0:	mov	r0, r4
   115d4:	bl	11c70 <lista_pesquisa@@Base>
   115d8:	ldr	r3, [r4]
   115dc:	ldr	r3, [r3, #4]
   115e0:	ldr	r3, [r3, #4]
   115e4:	ldr	r3, [r3, #4]
   115e8:	ldr	r3, [r3, #4]
   115ec:	ldr	r3, [r3, #4]
   115f0:	ldr	r3, [r3, #4]
   115f4:	cmp	r3, r0
   115f8:	beq	11654 <teste_lista_pesquisa@@Base+0x128>
   115fc:	ldr	r0, [pc, #164]	; 116a8 <teste_lista_pesquisa@@Base+0x17c>
   11600:	bl	109b0 <printf@plt>
   11604:	mov	r2, #1
   11608:	ldr	r1, [pc, #156]	; 116ac <teste_lista_pesquisa@@Base+0x180>
   1160c:	mov	r0, r4
   11610:	bl	11c70 <lista_pesquisa@@Base>
   11614:	add	r5, r5, #1
   11618:	cmp	r0, #0
   1161c:	beq	11648 <teste_lista_pesquisa@@Base+0x11c>
   11620:	ldr	r0, [pc, #136]	; 116b0 <teste_lista_pesquisa@@Base+0x184>
   11624:	bl	109b0 <printf@plt>
   11628:	mov	r0, r4
   1162c:	add	r5, r5, #1
   11630:	bl	11aa8 <lista_apaga@@Base>
   11634:	mov	r0, #10
   11638:	bl	10a34 <putchar@plt>
   1163c:	mov	r0, r5
   11640:	add	sp, sp, #16
   11644:	pop	{r4, r5, r6, pc}
   11648:	mov	r0, r4
   1164c:	bl	11aa8 <lista_apaga@@Base>
   11650:	b	11634 <teste_lista_pesquisa@@Base+0x108>
   11654:	mov	r2, #1
   11658:	ldr	r1, [pc, #76]	; 116ac <teste_lista_pesquisa@@Base+0x180>
   1165c:	mov	r0, r4
   11660:	bl	11c70 <lista_pesquisa@@Base>
   11664:	cmp	r0, #0
   11668:	bne	11620 <teste_lista_pesquisa@@Base+0xf4>
   1166c:	mov	r0, r4
   11670:	bl	11aa8 <lista_apaga@@Base>
   11674:	cmp	r5, #0
   11678:	bne	11634 <teste_lista_pesquisa@@Base+0x108>
   1167c:	ldr	r0, [pc, #48]	; 116b4 <teste_lista_pesquisa@@Base+0x188>
   11680:	bl	109ec <puts@plt>
   11684:	mov	r0, r5
   11688:	add	sp, sp, #16
   1168c:	pop	{r4, r5, r6, pc}
   11690:	mov	r5, #1
   11694:	mov	r6, #0
   11698:	b	115a4 <teste_lista_pesquisa@@Base+0x78>
   1169c:	ldrdeq	r1, [r1], -r0
   116a0:	andeq	r2, r1, r0, lsl #3
   116a4:	andeq	r2, r1, r4, lsl #3
   116a8:	muleq	r1, r8, r1
   116ac:	andeq	r2, r1, r0, ror #3
   116b0:	andeq	r2, r1, r8, ror #3
   116b4:	andeq	r1, r1, ip, asr #29

000116b8 <teste_lista_ordena@@Base>:
   116b8:	push	{r4, r5, r6, r7, lr}
   116bc:	sub	sp, sp, #12
   116c0:	ldr	r2, [pc, #420]	; 1186c <teste_lista_ordena@@Base+0x1b4>
   116c4:	ldr	r3, [pc, #420]	; 11870 <teste_lista_ordena@@Base+0x1b8>
   116c8:	ldr	r1, [pc, #420]	; 11874 <teste_lista_ordena@@Base+0x1bc>
   116cc:	str	r2, [sp, #4]
   116d0:	str	r3, [sp]
   116d4:	ldr	r2, [pc, #412]	; 11878 <teste_lista_ordena@@Base+0x1c0>
   116d8:	ldr	r3, [pc, #412]	; 1187c <teste_lista_ordena@@Base+0x1c4>
   116dc:	mov	r0, #5
   116e0:	bl	10de0 <_start@@Base+0x300>
   116e4:	mov	r4, r0
   116e8:	ldr	r0, [pc, #400]	; 11880 <teste_lista_ordena@@Base+0x1c8>
   116ec:	bl	109b0 <printf@plt>
   116f0:	mov	r0, #0
   116f4:	bl	11d0c <lista_ordena@@Base>
   116f8:	cmn	r0, #1
   116fc:	moveq	r5, #1
   11700:	moveq	r7, #0
   11704:	beq	11718 <teste_lista_ordena@@Base+0x60>
   11708:	ldr	r0, [pc, #372]	; 11884 <teste_lista_ordena@@Base+0x1cc>
   1170c:	bl	109b0 <printf@plt>
   11710:	mov	r5, #2
   11714:	mov	r7, #1
   11718:	mov	r0, r4
   1171c:	bl	11d0c <lista_ordena@@Base>
   11720:	ldr	r6, [r4]
   11724:	ldr	r1, [pc, #328]	; 11874 <teste_lista_ordena@@Base+0x1bc>
   11728:	ldr	r0, [r6]
   1172c:	bl	109a4 <strcmp@plt>
   11730:	cmp	r0, #0
   11734:	bne	11750 <teste_lista_ordena@@Base+0x98>
   11738:	ldr	r6, [r6, #4]
   1173c:	ldr	r1, [pc, #308]	; 11878 <teste_lista_ordena@@Base+0x1c0>
   11740:	ldr	r0, [r6]
   11744:	bl	109a4 <strcmp@plt>
   11748:	cmp	r0, #0
   1174c:	beq	1181c <teste_lista_ordena@@Base+0x164>
   11750:	ldr	r0, [pc, #304]	; 11888 <teste_lista_ordena@@Base+0x1d0>
   11754:	bl	109b0 <printf@plt>
   11758:	ldr	r6, [r4, #4]
   1175c:	ldr	r1, [pc, #280]	; 1187c <teste_lista_ordena@@Base+0x1c4>
   11760:	ldr	r0, [r6]
   11764:	bl	109a4 <strcmp@plt>
   11768:	cmp	r0, #0
   1176c:	bne	11788 <teste_lista_ordena@@Base+0xd0>
   11770:	ldr	r6, [r6, #8]
   11774:	ldr	r1, [pc, #240]	; 1186c <teste_lista_ordena@@Base+0x1b4>
   11778:	ldr	r0, [r6]
   1177c:	bl	109a4 <strcmp@plt>
   11780:	cmp	r0, #0
   11784:	beq	117b0 <teste_lista_ordena@@Base+0xf8>
   11788:	ldr	r0, [pc, #252]	; 1188c <teste_lista_ordena@@Base+0x1d4>
   1178c:	bl	109b0 <printf@plt>
   11790:	mov	r0, r4
   11794:	add	r5, r5, #1
   11798:	bl	11aa8 <lista_apaga@@Base>
   1179c:	mov	r0, #10
   117a0:	bl	10a34 <putchar@plt>
   117a4:	mov	r0, r5
   117a8:	add	sp, sp, #12
   117ac:	pop	{r4, r5, r6, r7, pc}
   117b0:	ldr	r6, [r6, #8]
   117b4:	ldr	r1, [pc, #180]	; 11870 <teste_lista_ordena@@Base+0x1b8>
   117b8:	ldr	r0, [r6]
   117bc:	bl	109a4 <strcmp@plt>
   117c0:	cmp	r0, #0
   117c4:	bne	11788 <teste_lista_ordena@@Base+0xd0>
   117c8:	ldr	r6, [r6, #8]
   117cc:	ldr	r1, [pc, #164]	; 11878 <teste_lista_ordena@@Base+0x1c0>
   117d0:	ldr	r0, [r6]
   117d4:	bl	109a4 <strcmp@plt>
   117d8:	cmp	r0, #0
   117dc:	bne	11788 <teste_lista_ordena@@Base+0xd0>
   117e0:	ldr	r3, [r6, #8]
   117e4:	ldr	r1, [pc, #136]	; 11874 <teste_lista_ordena@@Base+0x1bc>
   117e8:	ldr	r0, [r3]
   117ec:	bl	109a4 <strcmp@plt>
   117f0:	cmp	r0, #0
   117f4:	bne	11788 <teste_lista_ordena@@Base+0xd0>
   117f8:	mov	r0, r4
   117fc:	bl	11aa8 <lista_apaga@@Base>
   11800:	cmp	r5, #0
   11804:	bne	1179c <teste_lista_ordena@@Base+0xe4>
   11808:	ldr	r0, [pc, #128]	; 11890 <teste_lista_ordena@@Base+0x1d8>
   1180c:	bl	109ec <puts@plt>
   11810:	mov	r0, r5
   11814:	add	sp, sp, #12
   11818:	pop	{r4, r5, r6, r7, pc}
   1181c:	ldr	r6, [r6, #4]
   11820:	ldr	r1, [pc, #72]	; 11870 <teste_lista_ordena@@Base+0x1b8>
   11824:	ldr	r0, [r6]
   11828:	bl	109a4 <strcmp@plt>
   1182c:	cmp	r0, #0
   11830:	bne	11750 <teste_lista_ordena@@Base+0x98>
   11834:	ldr	r6, [r6, #4]
   11838:	ldr	r1, [pc, #44]	; 1186c <teste_lista_ordena@@Base+0x1b4>
   1183c:	ldr	r0, [r6]
   11840:	bl	109a4 <strcmp@plt>
   11844:	cmp	r0, #0
   11848:	bne	11750 <teste_lista_ordena@@Base+0x98>
   1184c:	ldr	r3, [r6, #4]
   11850:	ldr	r1, [pc, #36]	; 1187c <teste_lista_ordena@@Base+0x1c4>
   11854:	ldr	r0, [r3]
   11858:	bl	109a4 <strcmp@plt>
   1185c:	cmp	r0, #0
   11860:	moveq	r5, r7
   11864:	beq	11758 <teste_lista_ordena@@Base+0xa0>
   11868:	b	11750 <teste_lista_ordena@@Base+0x98>
   1186c:	andeq	r2, r1, r4, lsr r2
   11870:	andeq	r2, r1, r8, lsr r2
   11874:	andeq	r2, r1, r0, lsr r2
   11878:	andeq	r2, r1, ip, lsr #4
   1187c:	andeq	r2, r1, r8, lsr #4
   11880:	andeq	r2, r1, ip, lsr r2
   11884:	andeq	r2, r1, r0, asr r2
   11888:	andeq	r2, r1, r0, lsl #5
   1188c:	andeq	r2, r1, r0, asr #5
   11890:	andeq	r1, r1, ip, asr #29

00011894 <teste_lista_inverte@@Base>:
   11894:	push	{r4, r5, r6, lr}
   11898:	sub	sp, sp, #8
   1189c:	ldr	r2, [pc, #444]	; 11a60 <teste_lista_inverte@@Base+0x1cc>
   118a0:	ldr	r3, [pc, #444]	; 11a64 <teste_lista_inverte@@Base+0x1d0>
   118a4:	ldr	r1, [pc, #444]	; 11a68 <teste_lista_inverte@@Base+0x1d4>
   118a8:	str	r2, [sp, #4]
   118ac:	str	r3, [sp]
   118b0:	ldr	r2, [pc, #436]	; 11a6c <teste_lista_inverte@@Base+0x1d8>
   118b4:	ldr	r3, [pc, #436]	; 11a70 <teste_lista_inverte@@Base+0x1dc>
   118b8:	mov	r0, #5
   118bc:	bl	10de0 <_start@@Base+0x300>
   118c0:	mov	r5, r0
   118c4:	ldr	r0, [pc, #424]	; 11a74 <teste_lista_inverte@@Base+0x1e0>
   118c8:	bl	109b0 <printf@plt>
   118cc:	mov	r0, #0
   118d0:	bl	11d94 <lista_inverte@@Base>
   118d4:	cmn	r0, #1
   118d8:	moveq	r6, #1
   118dc:	moveq	r4, #0
   118e0:	beq	118f4 <teste_lista_inverte@@Base+0x60>
   118e4:	ldr	r0, [pc, #396]	; 11a78 <teste_lista_inverte@@Base+0x1e4>
   118e8:	bl	109b0 <printf@plt>
   118ec:	mov	r6, #2
   118f0:	mov	r4, #1
   118f4:	mov	r0, r5
   118f8:	bl	11d94 <lista_inverte@@Base>
   118fc:	ldr	r3, [r5, #8]
   11900:	cmp	r3, #5
   11904:	beq	11914 <teste_lista_inverte@@Base+0x80>
   11908:	ldr	r0, [pc, #364]	; 11a7c <teste_lista_inverte@@Base+0x1e8>
   1190c:	bl	109b0 <printf@plt>
   11910:	mov	r4, r6
   11914:	ldr	r6, [r5]
   11918:	ldr	r1, [pc, #320]	; 11a60 <teste_lista_inverte@@Base+0x1cc>
   1191c:	ldr	r0, [r6]
   11920:	bl	109a4 <strcmp@plt>
   11924:	cmp	r0, #0
   11928:	bne	11944 <teste_lista_inverte@@Base+0xb0>
   1192c:	ldr	r6, [r6, #4]
   11930:	ldr	r1, [pc, #300]	; 11a64 <teste_lista_inverte@@Base+0x1d0>
   11934:	ldr	r0, [r6]
   11938:	bl	109a4 <strcmp@plt>
   1193c:	cmp	r0, #0
   11940:	beq	11a14 <teste_lista_inverte@@Base+0x180>
   11944:	ldr	r0, [pc, #308]	; 11a80 <teste_lista_inverte@@Base+0x1ec>
   11948:	bl	109b0 <printf@plt>
   1194c:	add	r4, r4, #1
   11950:	ldr	r6, [r5, #4]
   11954:	ldr	r1, [pc, #268]	; 11a68 <teste_lista_inverte@@Base+0x1d4>
   11958:	ldr	r0, [r6]
   1195c:	bl	109a4 <strcmp@plt>
   11960:	cmp	r0, #0
   11964:	bne	11980 <teste_lista_inverte@@Base+0xec>
   11968:	ldr	r6, [r6, #8]
   1196c:	ldr	r1, [pc, #248]	; 11a6c <teste_lista_inverte@@Base+0x1d8>
   11970:	ldr	r0, [r6]
   11974:	bl	109a4 <strcmp@plt>
   11978:	cmp	r0, #0
   1197c:	beq	119a8 <teste_lista_inverte@@Base+0x114>
   11980:	ldr	r0, [pc, #252]	; 11a84 <teste_lista_inverte@@Base+0x1f0>
   11984:	bl	109b0 <printf@plt>
   11988:	mov	r0, r5
   1198c:	add	r4, r4, #1
   11990:	bl	11aa8 <lista_apaga@@Base>
   11994:	mov	r0, #10
   11998:	bl	10a34 <putchar@plt>
   1199c:	mov	r0, r4
   119a0:	add	sp, sp, #8
   119a4:	pop	{r4, r5, r6, pc}
   119a8:	ldr	r6, [r6, #8]
   119ac:	ldr	r1, [pc, #188]	; 11a70 <teste_lista_inverte@@Base+0x1dc>
   119b0:	ldr	r0, [r6]
   119b4:	bl	109a4 <strcmp@plt>
   119b8:	cmp	r0, #0
   119bc:	bne	11980 <teste_lista_inverte@@Base+0xec>
   119c0:	ldr	r6, [r6, #8]
   119c4:	ldr	r1, [pc, #152]	; 11a64 <teste_lista_inverte@@Base+0x1d0>
   119c8:	ldr	r0, [r6]
   119cc:	bl	109a4 <strcmp@plt>
   119d0:	cmp	r0, #0
   119d4:	bne	11980 <teste_lista_inverte@@Base+0xec>
   119d8:	ldr	r3, [r6, #8]
   119dc:	ldr	r1, [pc, #124]	; 11a60 <teste_lista_inverte@@Base+0x1cc>
   119e0:	ldr	r0, [r3]
   119e4:	bl	109a4 <strcmp@plt>
   119e8:	cmp	r0, #0
   119ec:	bne	11980 <teste_lista_inverte@@Base+0xec>
   119f0:	mov	r0, r5
   119f4:	bl	11aa8 <lista_apaga@@Base>
   119f8:	cmp	r4, #0
   119fc:	bne	11994 <teste_lista_inverte@@Base+0x100>
   11a00:	ldr	r0, [pc, #128]	; 11a88 <teste_lista_inverte@@Base+0x1f4>
   11a04:	bl	109ec <puts@plt>
   11a08:	mov	r0, r4
   11a0c:	add	sp, sp, #8
   11a10:	pop	{r4, r5, r6, pc}
   11a14:	ldr	r6, [r6, #4]
   11a18:	ldr	r1, [pc, #80]	; 11a70 <teste_lista_inverte@@Base+0x1dc>
   11a1c:	ldr	r0, [r6]
   11a20:	bl	109a4 <strcmp@plt>
   11a24:	cmp	r0, #0
   11a28:	bne	11944 <teste_lista_inverte@@Base+0xb0>
   11a2c:	ldr	r6, [r6, #4]
   11a30:	ldr	r1, [pc, #52]	; 11a6c <teste_lista_inverte@@Base+0x1d8>
   11a34:	ldr	r0, [r6]
   11a38:	bl	109a4 <strcmp@plt>
   11a3c:	cmp	r0, #0
   11a40:	bne	11944 <teste_lista_inverte@@Base+0xb0>
   11a44:	ldr	r3, [r6, #4]
   11a48:	ldr	r1, [pc, #24]	; 11a68 <teste_lista_inverte@@Base+0x1d4>
   11a4c:	ldr	r0, [r3]
   11a50:	bl	109a4 <strcmp@plt>
   11a54:	cmp	r0, #0
   11a58:	beq	11950 <teste_lista_inverte@@Base+0xbc>
   11a5c:	b	11944 <teste_lista_inverte@@Base+0xb0>
   11a60:	andeq	r2, r1, r4, lsr r2
   11a64:	andeq	r2, r1, r8, lsr r2
   11a68:	andeq	r2, r1, r0, lsr r2
   11a6c:	andeq	r2, r1, ip, lsr #4
   11a70:	andeq	r2, r1, r8, lsr #4
   11a74:	andeq	r2, r1, r0, lsl #6
   11a78:	andeq	r2, r1, r0, asr r2
   11a7c:	andeq	r2, r1, r4, lsl r3
   11a80:	andeq	r2, r1, r0, asr #6
   11a84:	andeq	r2, r1, r0, asr #5
   11a88:	andeq	r1, r1, ip, asr #29

00011a8c <lista_nova@@Base>:
   11a8c:	push	{r4, lr}
   11a90:	mov	r0, #12
   11a94:	bl	109f8 <malloc@plt>
   11a98:	cmp	r0, #0
   11a9c:	movne	r3, #0
   11aa0:	strne	r3, [r0, #8]
   11aa4:	pop	{r4, pc}

00011aa8 <lista_apaga@@Base>:
   11aa8:	push	{r4, r5, r6, lr}
   11aac:	subs	r6, r0, #0
   11ab0:	popeq	{r4, r5, r6, pc}
   11ab4:	ldr	r3, [r6, #8]
   11ab8:	cmp	r3, #0
   11abc:	beq	11afc <lista_apaga@@Base+0x54>
   11ac0:	ldr	r5, [r6]
   11ac4:	cmp	r5, #0
   11ac8:	beq	11afc <lista_apaga@@Base+0x54>
   11acc:	ldr	r4, [r5, #4]
   11ad0:	cmp	r4, #0
   11ad4:	bne	11ae4 <lista_apaga@@Base+0x3c>
   11ad8:	b	11afc <lista_apaga@@Base+0x54>
   11adc:	mov	r5, r4
   11ae0:	ldr	r4, [r4, #4]
   11ae4:	ldr	r0, [r5]
   11ae8:	bl	109bc <free@plt>
   11aec:	mov	r0, r5
   11af0:	bl	109bc <free@plt>
   11af4:	cmp	r4, #0
   11af8:	bne	11adc <lista_apaga@@Base+0x34>
   11afc:	mov	r0, r6
   11b00:	pop	{r4, r5, r6, lr}
   11b04:	b	109bc <free@plt>

00011b08 <lista_tamanho@@Base>:
   11b08:	cmp	r0, #0
   11b0c:	ldrne	r0, [r0, #8]
   11b10:	mvneq	r0, #0
   11b14:	bx	lr

00011b18 <lista_inicio@@Base>:
   11b18:	cmp	r0, #0
   11b1c:	ldrne	r0, [r0]
   11b20:	bx	lr

00011b24 <lista_fim@@Base>:
   11b24:	cmp	r0, #0
   11b28:	ldrne	r0, [r0, #4]
   11b2c:	bx	lr

00011b30 <lista_insere@@Base>:
   11b30:	push	{r4, r5, r6, r7, r8, lr}
   11b34:	subs	r5, r0, #0
   11b38:	beq	11bec <lista_insere@@Base+0xbc>
   11b3c:	mov	r0, #12
   11b40:	mov	r7, r1
   11b44:	mov	r6, r2
   11b48:	bl	109f8 <malloc@plt>
   11b4c:	mov	r4, r0
   11b50:	mov	r0, r7
   11b54:	bl	10a1c <strlen@plt>
   11b58:	add	r8, r0, #1
   11b5c:	mov	r0, r8
   11b60:	bl	109f8 <malloc@plt>
   11b64:	mov	r2, r8
   11b68:	mov	r1, r7
   11b6c:	str	r0, [r4]
   11b70:	bl	109c8 <memcpy@plt>
   11b74:	ldr	r3, [r5, #8]
   11b78:	cmp	r3, #0
   11b7c:	beq	11bc0 <lista_insere@@Base+0x90>
   11b80:	cmp	r6, #0
   11b84:	beq	11bd4 <lista_insere@@Base+0xa4>
   11b88:	ldr	r2, [r5]
   11b8c:	cmp	r6, r2
   11b90:	streq	r6, [r4, #4]
   11b94:	ldrne	r2, [r6, #8]
   11b98:	streq	r4, [r5]
   11b9c:	streq	r4, [r4, #8]
   11ba0:	strne	r4, [r2, #4]
   11ba4:	strne	r2, [r4, #8]
   11ba8:	strne	r6, [r4, #4]
   11bac:	strne	r4, [r6, #8]
   11bb0:	add	r3, r3, #1
   11bb4:	str	r3, [r5, #8]
   11bb8:	mov	r0, r4
   11bbc:	pop	{r4, r5, r6, r7, r8, pc}
   11bc0:	str	r3, [r4, #8]
   11bc4:	str	r3, [r4, #4]
   11bc8:	str	r4, [r5]
   11bcc:	str	r4, [r5, #4]
   11bd0:	b	11bb0 <lista_insere@@Base+0x80>
   11bd4:	ldr	r2, [r5, #4]
   11bd8:	str	r6, [r4, #4]
   11bdc:	str	r2, [r4, #8]
   11be0:	str	r4, [r2, #4]
   11be4:	str	r4, [r5, #4]
   11be8:	b	11bb0 <lista_insere@@Base+0x80>
   11bec:	mov	r4, r5
   11bf0:	b	11bb8 <lista_insere@@Base+0x88>

00011bf4 <lista_remove@@Base>:
   11bf4:	push	{r4, r5, r6, lr}
   11bf8:	subs	r4, r1, #0
   11bfc:	beq	11c68 <lista_remove@@Base+0x74>
   11c00:	ldr	r3, [r0]
   11c04:	ldr	r6, [r4, #4]
   11c08:	cmp	r4, r3
   11c0c:	moveq	r3, #0
   11c10:	streq	r3, [r6, #8]
   11c14:	streq	r6, [r0]
   11c18:	beq	11c40 <lista_remove@@Base+0x4c>
   11c1c:	ldr	r3, [r0, #4]
   11c20:	cmp	r4, r3
   11c24:	ldr	r3, [r4, #8]
   11c28:	moveq	r2, #0
   11c2c:	strne	r6, [r3, #4]
   11c30:	ldrne	r2, [r4, #4]
   11c34:	streq	r2, [r3, #4]
   11c38:	streq	r3, [r0, #4]
   11c3c:	strne	r3, [r2, #8]
   11c40:	mov	r5, r0
   11c44:	ldr	r0, [r4]
   11c48:	bl	109bc <free@plt>
   11c4c:	mov	r0, r4
   11c50:	bl	109bc <free@plt>
   11c54:	ldr	r3, [r5, #8]
   11c58:	sub	r3, r3, #1
   11c5c:	str	r3, [r5, #8]
   11c60:	mov	r0, r6
   11c64:	pop	{r4, r5, r6, pc}
   11c68:	mov	r6, r4
   11c6c:	b	11c60 <lista_remove@@Base+0x6c>

00011c70 <lista_pesquisa@@Base>:
   11c70:	cmp	r0, #0
   11c74:	push	{r4, r5, r6, r7, r8, lr}
   11c78:	beq	11cc8 <lista_pesquisa@@Base+0x58>
   11c7c:	cmp	r2, #0
   11c80:	mov	r6, r1
   11c84:	mov	r5, r2
   11c88:	beq	11cd4 <lista_pesquisa@@Base+0x64>
   11c8c:	cmp	r2, #1
   11c90:	bne	11cc8 <lista_pesquisa@@Base+0x58>
   11c94:	ldmib	r0, {r4, r7}
   11c98:	cmp	r7, #0
   11c9c:	ble	11cc8 <lista_pesquisa@@Base+0x58>
   11ca0:	mov	r5, #0
   11ca4:	mov	r1, r6
   11ca8:	ldr	r0, [r4]
   11cac:	bl	109a4 <strcmp@plt>
   11cb0:	add	r5, r5, #1
   11cb4:	cmp	r0, #0
   11cb8:	beq	11ccc <lista_pesquisa@@Base+0x5c>
   11cbc:	cmp	r5, r7
   11cc0:	ldr	r4, [r4, #8]
   11cc4:	bne	11ca4 <lista_pesquisa@@Base+0x34>
   11cc8:	mov	r4, #0
   11ccc:	mov	r0, r4
   11cd0:	pop	{r4, r5, r6, r7, r8, pc}
   11cd4:	ldr	r7, [r0, #8]
   11cd8:	ldr	r4, [r0]
   11cdc:	cmp	r7, #0
   11ce0:	ble	11cc8 <lista_pesquisa@@Base+0x58>
   11ce4:	mov	r1, r6
   11ce8:	ldr	r0, [r4]
   11cec:	bl	109a4 <strcmp@plt>
   11cf0:	add	r5, r5, #1
   11cf4:	cmp	r0, #0
   11cf8:	beq	11ccc <lista_pesquisa@@Base+0x5c>
   11cfc:	cmp	r5, r7
   11d00:	ldr	r4, [r4, #4]
   11d04:	bne	11ce4 <lista_pesquisa@@Base+0x74>
   11d08:	b	11cc8 <lista_pesquisa@@Base+0x58>

00011d0c <lista_ordena@@Base>:
   11d0c:	cmp	r0, #0
   11d10:	beq	11d8c <lista_ordena@@Base+0x80>
   11d14:	ldr	r3, [r0, #8]
   11d18:	cmp	r3, #0
   11d1c:	beq	11d84 <lista_ordena@@Base+0x78>
   11d20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d24:	ldm	r0, {r8, sl}
   11d28:	cmp	r8, sl
   11d2c:	movne	r9, r8
   11d30:	beq	11d7c <lista_ordena@@Base+0x70>
   11d34:	mov	r4, r9
   11d38:	ldr	r7, [r9, #4]
   11d3c:	b	11d54 <lista_ordena@@Base+0x48>
   11d40:	cmp	r4, r8
   11d44:	str	r5, [r4]
   11d48:	ldrne	r4, [r4, #8]
   11d4c:	str	r6, [r7]
   11d50:	ldrne	r7, [r4, #4]
   11d54:	ldr	r6, [r4]
   11d58:	ldr	r5, [r7]
   11d5c:	mov	r0, r6
   11d60:	mov	r1, r5
   11d64:	bl	109a4 <strcmp@plt>
   11d68:	cmp	r0, #0
   11d6c:	bgt	11d40 <lista_ordena@@Base+0x34>
   11d70:	ldr	r9, [r9, #4]
   11d74:	cmp	r9, sl
   11d78:	bne	11d34 <lista_ordena@@Base+0x28>
   11d7c:	mov	r0, #0
   11d80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d84:	mov	r0, #0
   11d88:	bx	lr
   11d8c:	mvn	r0, #0
   11d90:	bx	lr

00011d94 <lista_inverte@@Base>:
   11d94:	cmp	r0, #0
   11d98:	beq	11e08 <lista_inverte@@Base+0x74>
   11d9c:	push	{r4, r5, r6, r7, r8, lr}
   11da0:	ldr	r8, [r0, #8]
   11da4:	cmp	r8, #0
   11da8:	beq	11e00 <lista_inverte@@Base+0x6c>
   11dac:	add	r8, r8, r8, lsr #31
   11db0:	ldr	r5, [r0]
   11db4:	asr	r8, r8, #1
   11db8:	cmp	r8, #0
   11dbc:	ldr	r4, [r0, #4]
   11dc0:	ble	11e00 <lista_inverte@@Base+0x6c>
   11dc4:	mov	r6, #0
   11dc8:	ldr	r0, [r5]
   11dcc:	bl	109d4 <strdup@plt>
   11dd0:	add	r6, r6, #1
   11dd4:	mov	r7, r0
   11dd8:	ldr	r0, [r4]
   11ddc:	bl	109d4 <strdup@plt>
   11de0:	str	r0, [r5]
   11de4:	mov	r0, r7
   11de8:	bl	109d4 <strdup@plt>
   11dec:	cmp	r6, r8
   11df0:	ldr	r5, [r5, #4]
   11df4:	str	r0, [r4]
   11df8:	ldr	r4, [r4, #8]
   11dfc:	bne	11dc8 <lista_inverte@@Base+0x34>
   11e00:	mov	r0, #0
   11e04:	pop	{r4, r5, r6, r7, r8, pc}
   11e08:	mvn	r0, #0
   11e0c:	bx	lr

00011e10 <__libc_csu_init@@Base>:
   11e10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e14:	mov	r7, r0
   11e18:	ldr	r6, [pc, #72]	; 11e68 <__libc_csu_init@@Base+0x58>
   11e1c:	ldr	r5, [pc, #72]	; 11e6c <__libc_csu_init@@Base+0x5c>
   11e20:	add	r6, pc, r6
   11e24:	add	r5, pc, r5
   11e28:	sub	r6, r6, r5
   11e2c:	mov	r8, r1
   11e30:	mov	r9, r2
   11e34:	bl	10984 <strcmp@plt-0x20>
   11e38:	asrs	r6, r6, #2
   11e3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e40:	mov	r4, #0
   11e44:	add	r4, r4, #1
   11e48:	ldr	r3, [r5], #4
   11e4c:	mov	r2, r9
   11e50:	mov	r1, r8
   11e54:	mov	r0, r7
   11e58:	blx	r3
   11e5c:	cmp	r6, r4
   11e60:	bne	11e44 <__libc_csu_init@@Base+0x34>
   11e64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e68:	andeq	r1, r1, r8, ror #1
   11e6c:	andeq	r1, r1, r0, ror #1

00011e70 <__libc_csu_fini@@Base>:
   11e70:	bx	lr

Disassembly of section .fini:

00011e74 <.fini>:
   11e74:	push	{r3, lr}
   11e78:	pop	{r3, pc}
