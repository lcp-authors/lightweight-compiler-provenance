
../repos/greatscottgadgets-libbtbb-9d66440/lib/src/libbtbb.so.1.0:     file format elf32-littlearm


Disassembly of section .init:

000045a4 <.init>:
    45a4:	push	{r3, lr}
    45a8:	bl	4a14 <__assert_fail@plt+0xc>
    45ac:	pop	{r3, pc}

Disassembly of section .plt:

000045b0 <calloc@plt-0x14>:
    45b0:	push	{lr}		; (str lr, [sp, #-4]!)
    45b4:	ldr	lr, [pc, #4]	; 45c0 <calloc@plt-0x4>
    45b8:	add	lr, pc, lr
    45bc:	ldr	pc, [lr, #8]!
    45c0:	andeq	r1, r2, r0, asr #20

000045c4 <calloc@plt>:
    45c4:	add	ip, pc, #0, 12
    45c8:	add	ip, ip, #135168	; 0x21000
    45cc:	ldr	pc, [ip, #2624]!	; 0xa40

000045d0 <raise@plt>:
    45d0:	add	ip, pc, #0, 12
    45d4:	add	ip, ip, #135168	; 0x21000
    45d8:	ldr	pc, [ip, #2616]!	; 0xa38

000045dc <btbb_piconet_new@plt>:
    45dc:	add	ip, pc, #0, 12
    45e0:	add	ip, ip, #135168	; 0x21000
    45e4:	ldr	pc, [ip, #2608]!	; 0xa30

000045e8 <gen_hop_pattern@plt>:
    45e8:	add	ip, pc, #0, 12
    45ec:	add	ip, ip, #135168	; 0x21000
    45f0:	ldr	pc, [ip, #2600]!	; 0xa28

000045f4 <count_bits@plt>:
    45f4:	add	ip, pc, #0, 12
    45f8:	add	ip, ip, #135168	; 0x21000
    45fc:	ldr	pc, [ip, #2592]!	; 0xa20

00004600 <__cxa_finalize@plt>:
    4600:	add	ip, pc, #0, 12
    4604:	add	ip, ip, #135168	; 0x21000
    4608:	ldr	pc, [ip, #2584]!	; 0xa18

0000460c <btbb_get_payload_packed@plt>:
    460c:	add	ip, pc, #0, 12
    4610:	add	ip, ip, #135168	; 0x21000
    4614:	ldr	pc, [ip, #2576]!	; 0xa10

00004618 <printf@plt>:
    4618:	add	ip, pc, #0, 12
    461c:	add	ip, ip, #135168	; 0x21000
    4620:	ldr	pc, [ip, #2568]!	; 0xa08

00004624 <fopen@plt>:
    4624:	add	ip, pc, #0, 12
    4628:	add	ip, ip, #135168	; 0x21000
    462c:	ldr	pc, [ip, #2560]!	; 0xa00

00004630 <lell_packet_is_data@plt>:
    4630:	add	ip, pc, #0, 12
    4634:	add	ip, ip, #135168	; 0x21000
    4638:	ldr	pc, [ip, #2552]!	; 0x9f8

0000463c <fflush@plt>:
    463c:	add	ip, pc, #0, 12
    4640:	add	ip, ip, #135168	; 0x21000
    4644:	ldr	pc, [ip, #2544]!	; 0x9f0

00004648 <btbb_packet_set_flag@plt>:
    4648:	add	ip, pc, #0, 12
    464c:	add	ip, ip, #135168	; 0x21000
    4650:	ldr	pc, [ip, #2536]!	; 0x9e8

00004654 <pcapng_append_interface_option@plt>:
    4654:	add	ip, pc, #0, 12
    4658:	add	ip, ip, #135168	; 0x21000
    465c:	ldr	pc, [ip, #2528]!	; 0x9e0

00004660 <free@plt>:
    4660:	add	ip, pc, #0, 12
    4664:	add	ip, ip, #135168	; 0x21000
    4668:	ldr	pc, [ip, #2520]!	; 0x9d8

0000466c <btbb_packet_get_modulation@plt>:
    466c:	add	ip, pc, #0, 12
    4670:	add	ip, ip, #135168	; 0x21000
    4674:	ldr	pc, [ip, #2512]!	; 0x9d0

00004678 <btbb_packet_get_ac_errors@plt>:
    4678:	add	ip, pc, #0, 12
    467c:	add	ip, ip, #135168	; 0x21000
    4680:	ldr	pc, [ip, #2504]!	; 0x9c8

00004684 <memcpy@plt>:
    4684:	add	ip, pc, #0, 12
    4688:	add	ip, ip, #135168	; 0x21000
    468c:	ldr	pc, [ip, #2496]!	; 0x9c0

00004690 <btbb_uap_from_header@plt>:
    4690:	add	ip, pc, #0, 12
    4694:	add	ip, ip, #135168	; 0x21000
    4698:	ldr	pc, [ip, #2488]!	; 0x9b8

0000469c <btbb_packet_get_flag@plt>:
    469c:	add	ip, pc, #0, 12
    46a0:	add	ip, ip, #135168	; 0x21000
    46a4:	ldr	pc, [ip, #2480]!	; 0x9b0

000046a8 <fhs@plt>:
    46a8:	add	ip, pc, #0, 12
    46ac:	add	ip, ip, #135168	; 0x21000
    46b0:	ldr	pc, [ip, #2472]!	; 0x9a8

000046b4 <EV4@plt>:
    46b4:	add	ip, pc, #0, 12
    46b8:	add	ip, ip, #135168	; 0x21000
    46bc:	ldr	pc, [ip, #2464]!	; 0x9a0

000046c0 <btbb_piconet_get_uap@plt>:
    46c0:	add	ip, pc, #0, 12
    46c4:	add	ip, ip, #135168	; 0x21000
    46c8:	ldr	pc, [ip, #2456]!	; 0x998

000046cc <lell_pcap_close@plt>:
    46cc:	add	ip, pc, #0, 12
    46d0:	add	ip, ip, #135168	; 0x21000
    46d4:	ldr	pc, [ip, #2448]!	; 0x990

000046d8 <btbb_piconet_get_channel_seen@plt>:
    46d8:	add	ip, pc, #0, 12
    46dc:	add	ip, ip, #135168	; 0x21000
    46e0:	ldr	pc, [ip, #2440]!	; 0x988

000046e4 <btbb_pcap_open@plt>:
    46e4:	add	ip, pc, #0, 12
    46e8:	add	ip, ip, #135168	; 0x21000
    46ec:	ldr	pc, [ip, #2432]!	; 0x980

000046f0 <btbb_header_present@plt>:
    46f0:	add	ip, pc, #0, 12
    46f4:	add	ip, ip, #135168	; 0x21000
    46f8:	ldr	pc, [ip, #2424]!	; 0x978

000046fc <btbb_piconet_get_flag@plt>:
    46fc:	add	ip, pc, #0, 12
    4700:	add	ip, ip, #135168	; 0x21000
    4704:	ldr	pc, [ip, #2416]!	; 0x970

00004708 <pcapng_create@plt>:
    4708:	add	ip, pc, #0, 12
    470c:	add	ip, ip, #135168	; 0x21000
    4710:	ldr	pc, [ip, #2408]!	; 0x968

00004714 <DM@plt>:
    4714:	add	ip, pc, #0, 12
    4718:	add	ip, ip, #135168	; 0x21000
    471c:	ldr	pc, [ip, #2400]!	; 0x960

00004720 <btbb_piconet_set_flag@plt>:
    4720:	add	ip, pc, #0, 12
    4724:	add	ip, ip, #135168	; 0x21000
    4728:	ldr	pc, [ip, #2392]!	; 0x958

0000472c <HV@plt>:
    472c:	add	ip, pc, #0, 12
    4730:	add	ip, ip, #135168	; 0x21000
    4734:	ldr	pc, [ip, #2384]!	; 0x950

00004738 <perror@plt>:
    4738:	add	ip, pc, #0, 12
    473c:	add	ip, ip, #135168	; 0x21000
    4740:	ldr	pc, [ip, #2376]!	; 0x948

00004744 <btbb_piconet_set_channel_seen@plt>:
    4744:	add	ip, pc, #0, 12
    4748:	add	ip, ip, #135168	; 0x21000
    474c:	ldr	pc, [ip, #2368]!	; 0x940

00004750 <perm_table_init@plt>:
    4750:	add	ip, pc, #0, 12
    4754:	add	ip, ip, #135168	; 0x21000
    4758:	ldr	pc, [ip, #2360]!	; 0x938

0000475c <btbb_packet_set_uap@plt>:
    475c:	add	ip, pc, #0, 12
    4760:	add	ip, ip, #135168	; 0x21000
    4764:	ldr	pc, [ip, #2352]!	; 0x930

00004768 <fwrite@plt>:
    4768:	add	ip, pc, #0, 12
    476c:	add	ip, ip, #135168	; 0x21000
    4770:	ldr	pc, [ip, #2344]!	; 0x928

00004774 <btbb_gen_syncword@plt>:
    4774:	add	ip, pc, #0, 12
    4778:	add	ip, ip, #135168	; 0x21000
    477c:	ldr	pc, [ip, #2336]!	; 0x920

00004780 <btbb_pcap_close@plt>:
    4780:	add	ip, pc, #0, 12
    4784:	add	ip, ip, #135168	; 0x21000
    4788:	ldr	pc, [ip, #2328]!	; 0x918

0000478c <crc_check@plt>:
    478c:	add	ip, pc, #0, 12
    4790:	add	ip, ip, #135168	; 0x21000
    4794:	ldr	pc, [ip, #2320]!	; 0x910

00004798 <btbb_decode@plt>:
    4798:	add	ip, pc, #0, 12
    479c:	add	ip, ip, #135168	; 0x21000
    47a0:	ldr	pc, [ip, #2312]!	; 0x908

000047a4 <btbb_winnow@plt>:
    47a4:	add	ip, pc, #0, 12
    47a8:	add	ip, ip, #135168	; 0x21000
    47ac:	ldr	pc, [ip, #2304]!	; 0x900

000047b0 <lell_get_adv_type_str@plt>:
    47b0:	add	ip, pc, #0, 12
    47b4:	add	ip, ip, #135168	; 0x21000
    47b8:	ldr	pc, [ip, #2296]!	; 0x8f8

000047bc <get_hop_pattern@plt>:
    47bc:	add	ip, pc, #0, 12
    47c0:	add	ip, ip, #135168	; 0x21000
    47c4:	ldr	pc, [ip, #2288]!	; 0x8f0

000047c8 <puts@plt>:
    47c8:	add	ip, pc, #0, 12
    47cc:	add	ip, ip, #135168	; 0x21000
    47d0:	ldr	pc, [ip, #2280]!	; 0x8e8

000047d4 <malloc@plt>:
    47d4:	add	ip, pc, #0, 12
    47d8:	add	ip, ip, #135168	; 0x21000
    47dc:	ldr	pc, [ip, #2272]!	; 0x8e0

000047e0 <try_hop@plt>:
    47e0:	add	ip, pc, #0, 12
    47e4:	add	ip, ip, #135168	; 0x21000
    47e8:	ldr	pc, [ip, #2264]!	; 0x8d8

000047ec <btbb_packet_new@plt>:
    47ec:	add	ip, pc, #0, 12
    47f0:	add	ip, ip, #135168	; 0x21000
    47f4:	ldr	pc, [ip, #2256]!	; 0x8d0

000047f8 <btbb_pcap_dump@plt>:
    47f8:	add	ip, pc, #0, 12
    47fc:	add	ip, ip, #135168	; 0x21000
    4800:	ldr	pc, [ip, #2248]!	; 0x8c8

00004804 <__gmon_start__@plt>:
    4804:	add	ip, pc, #0, 12
    4808:	add	ip, ip, #135168	; 0x21000
    480c:	ldr	pc, [ip, #2240]!	; 0x8c0

00004810 <open@plt>:
    4810:	add	ip, pc, #0, 12
    4814:	add	ip, ip, #135168	; 0x21000
    4818:	ldr	pc, [ip, #2232]!	; 0x8b8

0000481c <__ctype_b_loc@plt>:
    481c:	add	ip, pc, #0, 12
    4820:	add	ip, ip, #135168	; 0x21000
    4824:	ldr	pc, [ip, #2224]!	; 0x8b0

00004828 <exit@plt>:
    4828:	add	ip, pc, #0, 12
    482c:	add	ip, ip, #135168	; 0x21000
    4830:	ldr	pc, [ip, #2216]!	; 0x8a8

00004834 <btbb_packet_get_payload_length@plt>:
    4834:	add	ip, pc, #0, 12
    4838:	add	ip, ip, #135168	; 0x21000
    483c:	ldr	pc, [ip, #2208]!	; 0x8a0

00004840 <bcmp@plt>:
    4840:	add	ip, pc, #0, 12
    4844:	add	ip, ip, #135168	; 0x21000
    4848:	ldr	pc, [ip, #2200]!	; 0x898

0000484c <strlen@plt>:
    484c:	add	ip, pc, #0, 12
    4850:	add	ip, ip, #135168	; 0x21000
    4854:	ldr	pc, [ip, #2192]!	; 0x890

00004858 <btbb_decode_header@plt>:
    4858:	add	ip, pc, #0, 12
    485c:	add	ip, ip, #135168	; 0x21000
    4860:	ldr	pc, [ip, #2184]!	; 0x888

00004864 <mmap@plt>:
    4864:	add	ip, pc, #0, 12
    4868:	add	ip, ip, #135168	; 0x21000
    486c:	ldr	pc, [ip, #2176]!	; 0x880

00004870 <btbb_packet_get_header_packed@plt>:
    4870:	add	ip, pc, #0, 12
    4874:	add	ip, ip, #135168	; 0x21000
    4878:	ldr	pc, [ip, #2168]!	; 0x878

0000487c <lell_pcapng_record_connect_req@plt>:
    487c:	add	ip, pc, #0, 12
    4880:	add	ip, ip, #135168	; 0x21000
    4884:	ldr	pc, [ip, #2160]!	; 0x870

00004888 <lell_get_channel_k@plt>:
    4888:	add	ip, pc, #0, 12
    488c:	add	ip, ip, #135168	; 0x21000
    4890:	ldr	pc, [ip, #2152]!	; 0x868

00004894 <fprintf@plt>:
    4894:	add	ip, pc, #0, 12
    4898:	add	ip, ip, #135168	; 0x21000
    489c:	ldr	pc, [ip, #2144]!	; 0x860

000048a0 <getpagesize@plt>:
    48a0:	add	ip, pc, #0, 12
    48a4:	add	ip, ip, #135168	; 0x21000
    48a8:	ldr	pc, [ip, #2136]!	; 0x858

000048ac <pcapng_append_packet@plt>:
    48ac:	add	ip, pc, #0, 12
    48b0:	add	ip, ip, #135168	; 0x21000
    48b4:	ldr	pc, [ip, #2128]!	; 0x850

000048b8 <btbb_packet_get_transport@plt>:
    48b8:	add	ip, pc, #0, 12
    48bc:	add	ip, ip, #135168	; 0x21000
    48c0:	ldr	pc, [ip, #2120]!	; 0x848

000048c4 <find_known_lap@plt>:
    48c4:	add	ip, pc, #0, 12
    48c8:	add	ip, ip, #135168	; 0x21000
    48cc:	ldr	pc, [ip, #2112]!	; 0x840

000048d0 <address_precalc@plt>:
    48d0:	add	ip, pc, #0, 12
    48d4:	add	ip, ip, #135168	; 0x21000
    48d8:	ldr	pc, [ip, #2104]!	; 0x838

000048dc <memset@plt>:
    48dc:	add	ip, pc, #0, 12
    48e0:	add	ip, ip, #135168	; 0x21000
    48e4:	ldr	pc, [ip, #2096]!	; 0x830

000048e8 <putchar@plt>:
    48e8:	add	ip, pc, #0, 12
    48ec:	add	ip, ip, #135168	; 0x21000
    48f0:	ldr	pc, [ip, #2088]!	; 0x828

000048f4 <strncpy@plt>:
    48f4:	add	ip, pc, #0, 12
    48f8:	add	ip, ip, #135168	; 0x21000
    48fc:	ldr	pc, [ip, #2080]!	; 0x820

00004900 <EV3@plt>:
    4900:	add	ip, pc, #0, 12
    4904:	add	ip, ip, #135168	; 0x21000
    4908:	ldr	pc, [ip, #2072]!	; 0x818

0000490c <btbb_packet_get_lap@plt>:
    490c:	add	ip, pc, #0, 12
    4910:	add	ip, ip, #135168	; 0x21000
    4914:	ldr	pc, [ip, #2064]!	; 0x810

00004918 <lell_packet_new@plt>:
    4918:	add	ip, pc, #0, 12
    491c:	add	ip, ip, #135168	; 0x21000
    4920:	ldr	pc, [ip, #2056]!	; 0x808

00004924 <bt_compidtostr@plt>:
    4924:	add	ip, pc, #0, 12
    4928:	add	ip, ip, #135168	; 0x21000
    492c:	ldr	pc, [ip, #2048]!	; 0x800

00004930 <write@plt>:
    4930:	add	ip, pc, #0, 12
    4934:	add	ip, ip, #135168	; 0x21000
    4938:	ldr	pc, [ip, #2040]!	; 0x7f8

0000493c <get_piconet@plt>:
    493c:	add	ip, pc, #0, 12
    4940:	add	ip, ip, #135168	; 0x21000
    4944:	ldr	pc, [ip, #2032]!	; 0x7f0

00004948 <perm5@plt>:
    4948:	add	ip, pc, #0, 12
    494c:	add	ip, ip, #135168	; 0x21000
    4950:	ldr	pc, [ip, #2024]!	; 0x7e8

00004954 <fclose@plt>:
    4954:	add	ip, pc, #0, 12
    4958:	add	ip, ip, #135168	; 0x21000
    495c:	ldr	pc, [ip, #2016]!	; 0x7e0

00004960 <EV5@plt>:
    4960:	add	ip, pc, #0, 12
    4964:	add	ip, ip, #135168	; 0x21000
    4968:	ldr	pc, [ip, #2008]!	; 0x7d8

0000496c <munmap@plt>:
    496c:	add	ip, pc, #0, 12
    4970:	add	ip, ip, #135168	; 0x21000
    4974:	ldr	pc, [ip, #2000]!	; 0x7d0

00004978 <DH@plt>:
    4978:	add	ip, pc, #0, 12
    497c:	add	ip, ip, #135168	; 0x21000
    4980:	ldr	pc, [ip, #1992]!	; 0x7c8

00004984 <btbb_packet_get_channel@plt>:
    4984:	add	ip, pc, #0, 12
    4988:	add	ip, ip, #135168	; 0x21000
    498c:	ldr	pc, [ip, #1984]!	; 0x7c0

00004990 <precalc@plt>:
    4990:	add	ip, pc, #0, 12
    4994:	add	ip, ip, #135168	; 0x21000
    4998:	ldr	pc, [ip, #1976]!	; 0x7b8

0000499c <btbb_decode_payload@plt>:
    499c:	add	ip, pc, #0, 12
    49a0:	add	ip, ip, #135168	; 0x21000
    49a4:	ldr	pc, [ip, #1968]!	; 0x7b0

000049a8 <promiscuous_packet_search@plt>:
    49a8:	add	ip, pc, #0, 12
    49ac:	add	ip, ip, #135168	; 0x21000
    49b0:	ldr	pc, [ip, #1960]!	; 0x7a8

000049b4 <pcapng_close@plt>:
    49b4:	add	ip, pc, #0, 12
    49b8:	add	ip, ip, #135168	; 0x21000
    49bc:	ldr	pc, [ip, #1952]!	; 0x7a0

000049c0 <btbb_print_packet@plt>:
    49c0:	add	ip, pc, #0, 12
    49c4:	add	ip, ip, #135168	; 0x21000
    49c8:	ldr	pc, [ip, #1944]!	; 0x798

000049cc <fast_perm@plt>:
    49cc:	add	ip, pc, #0, 12
    49d0:	add	ip, ip, #135168	; 0x21000
    49d4:	ldr	pc, [ip, #1936]!	; 0x790

000049d8 <try_clock@plt>:
    49d8:	add	ip, pc, #0, 12
    49dc:	add	ip, ip, #135168	; 0x21000
    49e0:	ldr	pc, [ip, #1928]!	; 0x788

000049e4 <btbb_init_hop_reversal@plt>:
    49e4:	add	ip, pc, #0, 12
    49e8:	add	ip, ip, #135168	; 0x21000
    49ec:	ldr	pc, [ip, #1920]!	; 0x780

000049f0 <btbb_init_piconet@plt>:
    49f0:	add	ip, pc, #0, 12
    49f4:	add	ip, ip, #135168	; 0x21000
    49f8:	ldr	pc, [ip, #1912]!	; 0x778

000049fc <close@plt>:
    49fc:	add	ip, pc, #0, 12
    4a00:	add	ip, ip, #135168	; 0x21000
    4a04:	ldr	pc, [ip, #1904]!	; 0x770

00004a08 <__assert_fail@plt>:
    4a08:	add	ip, pc, #0, 12
    4a0c:	add	ip, ip, #135168	; 0x21000
    4a10:	ldr	pc, [ip, #1896]!	; 0x768

Disassembly of section .text:

00004a14 <btbb_gen_syncword@@Base-0x124>:
    4a14:	ldr	r3, [pc, #20]	; 4a30 <__assert_fail@plt+0x28>
    4a18:	ldr	r2, [pc, #20]	; 4a34 <__assert_fail@plt+0x2c>
    4a1c:	add	r3, pc, r3
    4a20:	ldr	r2, [r3, r2]
    4a24:	cmp	r2, #0
    4a28:	bxeq	lr
    4a2c:	b	4804 <__gmon_start__@plt>
    4a30:	ldrdeq	r1, [r2], -ip
    4a34:	muleq	r0, r0, r1
    4a38:	ldr	r0, [pc, #44]	; 4a6c <__assert_fail@plt+0x64>
    4a3c:	ldr	r3, [pc, #44]	; 4a70 <__assert_fail@plt+0x68>
    4a40:	add	r0, pc, r0
    4a44:	add	r3, pc, r3
    4a48:	cmp	r3, r0
    4a4c:	ldr	r3, [pc, #32]	; 4a74 <__assert_fail@plt+0x6c>
    4a50:	add	r3, pc, r3
    4a54:	bxeq	lr
    4a58:	ldr	r2, [pc, #24]	; 4a78 <__assert_fail@plt+0x70>
    4a5c:	ldr	r3, [r3, r2]
    4a60:	cmp	r3, #0
    4a64:	bxeq	lr
    4a68:	bx	r3
    4a6c:	andeq	r1, r2, ip, asr r7
    4a70:	andeq	r1, r2, r8, asr r7
    4a74:	andeq	r1, r2, r8, lsr #11
    4a78:	andeq	r0, r0, r0, lsl #3
    4a7c:	ldr	r0, [pc, #56]	; 4abc <__assert_fail@plt+0xb4>
    4a80:	ldr	r3, [pc, #56]	; 4ac0 <__assert_fail@plt+0xb8>
    4a84:	add	r0, pc, r0
    4a88:	add	r3, pc, r3
    4a8c:	sub	r1, r3, r0
    4a90:	ldr	r3, [pc, #44]	; 4ac4 <__assert_fail@plt+0xbc>
    4a94:	asr	r1, r1, #2
    4a98:	add	r3, pc, r3
    4a9c:	add	r1, r1, r1, lsr #31
    4aa0:	asrs	r1, r1, #1
    4aa4:	bxeq	lr
    4aa8:	ldr	r2, [pc, #24]	; 4ac8 <__assert_fail@plt+0xc0>
    4aac:	ldr	r3, [r3, r2]
    4ab0:	cmp	r3, #0
    4ab4:	bxeq	lr
    4ab8:	bx	r3
    4abc:	andeq	r1, r2, r8, lsl r7
    4ac0:	andeq	r1, r2, r4, lsl r7
    4ac4:	andeq	r1, r2, r0, ror #10
    4ac8:	muleq	r0, r8, r1
    4acc:	ldr	r3, [pc, #76]	; 4b20 <__assert_fail@plt+0x118>
    4ad0:	ldr	r2, [pc, #76]	; 4b24 <__assert_fail@plt+0x11c>
    4ad4:	add	r3, pc, r3
    4ad8:	add	r2, pc, r2
    4adc:	ldrb	r3, [r3]
    4ae0:	cmp	r3, #0
    4ae4:	bxne	lr
    4ae8:	ldr	r3, [pc, #56]	; 4b28 <__assert_fail@plt+0x120>
    4aec:	push	{r4, lr}
    4af0:	ldr	r3, [r2, r3]
    4af4:	cmp	r3, #0
    4af8:	beq	4b08 <__assert_fail@plt+0x100>
    4afc:	ldr	r3, [pc, #40]	; 4b2c <__assert_fail@plt+0x124>
    4b00:	ldr	r0, [pc, r3]
    4b04:	bl	4600 <__cxa_finalize@plt>
    4b08:	bl	4a38 <__assert_fail@plt+0x30>
    4b0c:	ldr	r3, [pc, #28]	; 4b30 <__assert_fail@plt+0x128>
    4b10:	mov	r2, #1
    4b14:	add	r3, pc, r3
    4b18:	strb	r2, [r3]
    4b1c:	pop	{r4, pc}
    4b20:	andeq	r1, r2, r8, asr #13
    4b24:	andeq	r1, r2, r0, lsr #10
    4b28:	andeq	r0, r0, ip, ror r1
    4b2c:	muleq	r2, r4, r6
    4b30:	andeq	r1, r2, r8, lsl #13
    4b34:	b	4a7c <__assert_fail@plt+0x74>

00004b38 <btbb_gen_syncword@@Base>:
    4b38:	push	{r4, r5, fp, lr}
    4b3c:	add	fp, sp, #8
    4b40:	mov	r1, #-1342177278	; 0xb0000002
    4b44:	movw	ip, #3710	; 0xe7e
    4b48:	movt	ip, #51074	; 0xc782
    4b4c:	mov	r3, #0
    4b50:	ldr	r2, [pc, #44]	; 4b84 <btbb_gen_syncword@@Base+0x4c>
    4b54:	add	r2, pc, r2
    4b58:	mov	lr, #8388608	; 0x800000
    4b5c:	tst	r0, lr, lsr r3
    4b60:	ldrdne	r4, [r2]
    4b64:	eorne	r1, r5, r1
    4b68:	eorne	ip, r4, ip
    4b6c:	add	r2, r2, #8
    4b70:	add	r3, r3, #1
    4b74:	cmp	r3, #24
    4b78:	bne	4b5c <btbb_gen_syncword@@Base+0x24>
    4b7c:	mov	r0, ip
    4b80:	pop	{r4, r5, fp, pc}
    4b84:	andeq	r7, r0, ip, lsl #2

00004b88 <btbb_get_release@@Base>:
    4b88:	ldr	r0, [pc, #4]	; 4b94 <btbb_get_release@@Base+0xc>
    4b8c:	add	r0, pc, r0
    4b90:	bx	lr
    4b94:	ldrdeq	r9, [r0], -ip

00004b98 <btbb_get_version@@Base>:
    4b98:	ldr	r0, [pc, #4]	; 4ba4 <btbb_get_version@@Base+0xc>
    4b9c:	add	r0, pc, r0
    4ba0:	bx	lr
    4ba4:	ldrdeq	r9, [r0], -r7

00004ba8 <btbb_init@@Base>:
    4ba8:	push	{r4, sl, fp, lr}
    4bac:	add	fp, sp, #8
    4bb0:	cmp	r0, #6
    4bb4:	bcs	4bdc <btbb_init@@Base+0x34>
    4bb8:	mov	r4, #0
    4bbc:	cmp	r0, #0
    4bc0:	beq	4bd4 <btbb_init@@Base+0x2c>
    4bc4:	ldr	r1, [pc, #72]	; 4c14 <btbb_init@@Base+0x6c>
    4bc8:	ldr	r1, [pc, r1]
    4bcc:	cmp	r1, #0
    4bd0:	bleq	4c18 <btbb_init@@Base+0x70>
    4bd4:	mov	r0, r4
    4bd8:	pop	{r4, sl, fp, pc}
    4bdc:	ldr	r0, [pc, #36]	; 4c08 <btbb_init@@Base+0x60>
    4be0:	ldr	r0, [pc, r0]
    4be4:	ldr	r0, [r0]
    4be8:	ldr	r1, [pc, #28]	; 4c0c <btbb_init@@Base+0x64>
    4bec:	add	r1, pc, r1
    4bf0:	ldr	r2, [pc, #24]	; 4c10 <btbb_init@@Base+0x68>
    4bf4:	add	r2, pc, r2
    4bf8:	bl	4894 <fprintf@plt>
    4bfc:	mvn	r4, #0
    4c00:	mov	r0, r4
    4c04:	pop	{r4, sl, fp, pc}
    4c08:	muleq	r2, ip, r5
    4c0c:	andeq	r9, r0, fp, lsl #13
    4c10:	andeq	r9, r0, r3, lsr #13
    4c14:	ldrdeq	r1, [r2], -r8
    4c18:	push	{r4, r5, fp, lr}
    4c1c:	add	fp, sp, #8
    4c20:	cmp	r0, #1
    4c24:	poplt	{r4, r5, fp, pc}
    4c28:	mov	r4, r0
    4c2c:	mov	r5, #0
    4c30:	add	r5, r5, #1
    4c34:	mov	r0, #0
    4c38:	mov	r1, #0
    4c3c:	mov	r2, #0
    4c40:	mov	r3, r5
    4c44:	bl	6710 <clock_from_fhs@@Base+0xc>
    4c48:	cmp	r4, r5
    4c4c:	bne	4c30 <btbb_init@@Base+0x88>
    4c50:	pop	{r4, r5, fp, pc}

00004c54 <btbb_packet_new@@Base>:
    4c54:	push	{r4, r5, fp, lr}
    4c58:	add	fp, sp, #8
    4c5c:	mov	r5, #1
    4c60:	mov	r0, #1
    4c64:	mov	r1, #5952	; 0x1740
    4c68:	bl	45c4 <calloc@plt>
    4c6c:	mov	r4, r0
    4c70:	cmp	r0, #0
    4c74:	strne	r5, [r4]
    4c78:	movne	r0, r4
    4c7c:	popne	{r4, r5, fp, pc}
    4c80:	ldr	r0, [pc, #32]	; 4ca8 <btbb_packet_new@@Base+0x54>
    4c84:	ldr	r0, [pc, r0]
    4c88:	ldr	r3, [r0]
    4c8c:	ldr	r0, [pc, #24]	; 4cac <btbb_packet_new@@Base+0x58>
    4c90:	add	r0, pc, r0
    4c94:	mov	r1, #25
    4c98:	mov	r2, #1
    4c9c:	bl	4768 <fwrite@plt>
    4ca0:	mov	r0, r4
    4ca4:	pop	{r4, r5, fp, pc}
    4ca8:	strdeq	r1, [r2], -r8
    4cac:	andeq	r9, r0, r1, lsl r6

00004cb0 <btbb_packet_ref@@Base>:
    4cb0:	ldr	r1, [r0]
    4cb4:	add	r1, r1, #1
    4cb8:	str	r1, [r0]
    4cbc:	bx	lr

00004cc0 <btbb_packet_unref@@Base>:
    4cc0:	ldr	r1, [r0]
    4cc4:	subs	r1, r1, #1
    4cc8:	str	r1, [r0]
    4ccc:	bxne	lr
    4cd0:	b	4660 <free@plt>

00004cd4 <btbb_packet_get_lap@@Base>:
    4cd4:	ldr	r0, [r0, #12]
    4cd8:	bx	lr

00004cdc <btbb_packet_set_uap@@Base>:
    4cdc:	strb	r1, [r0, #9]
    4ce0:	mov	r1, #2
    4ce4:	mov	r2, #1
    4ce8:	b	4cec <btbb_packet_set_flag@@Base>

00004cec <btbb_packet_set_flag@@Base>:
    4cec:	push	{fp, lr}
    4cf0:	mov	fp, sp
    4cf4:	ldr	lr, [r0, #4]
    4cf8:	mov	ip, #1
    4cfc:	orr	r3, lr, ip, lsl r1
    4d00:	cmp	r2, #0
    4d04:	biceq	r3, lr, ip, lsl r1
    4d08:	str	r3, [r0, #4]
    4d0c:	pop	{fp, pc}

00004d10 <btbb_packet_get_uap@@Base>:
    4d10:	ldrb	r0, [r0, #9]
    4d14:	bx	lr

00004d18 <btbb_packet_get_nap@@Base>:
    4d18:	ldrh	r0, [r0, #10]
    4d1c:	bx	lr

00004d20 <btbb_packet_get_clkn@@Base>:
    4d20:	ldr	r0, [r0, #2816]	; 0xb00
    4d24:	bx	lr

00004d28 <btbb_packet_get_channel@@Base>:
    4d28:	ldrb	r0, [r0, #8]
    4d2c:	bx	lr

00004d30 <btbb_packet_set_modulation@@Base>:
    4d30:	strb	r1, [r0, #16]
    4d34:	bx	lr

00004d38 <btbb_packet_get_modulation@@Base>:
    4d38:	ldrb	r0, [r0, #16]
    4d3c:	bx	lr

00004d40 <btbb_packet_set_transport@@Base>:
    4d40:	strb	r1, [r0, #17]
    4d44:	bx	lr

00004d48 <btbb_packet_get_transport@@Base>:
    4d48:	ldrb	r0, [r0, #17]
    4d4c:	bx	lr

00004d50 <btbb_packet_get_ac_errors@@Base>:
    4d50:	ldrb	r0, [r0, #2820]	; 0xb04
    4d54:	bx	lr

00004d58 <promiscuous_packet_search@@Base>:
    4d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d5c:	add	fp, sp, #28
    4d60:	sub	sp, sp, #4
    4d64:	cmp	r1, #1
    4d68:	blt	4e90 <promiscuous_packet_search@@Base+0x138>
    4d6c:	mov	r5, r3
    4d70:	mov	r6, r1
    4d74:	mov	r7, r0
    4d78:	str	r2, [sp]
    4d7c:	add	r0, r0, #57	; 0x39
    4d80:	mov	r1, #6
    4d84:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    4d88:	lsl	r8, r0, #1
    4d8c:	ldr	r3, [pc, #284]	; 4eb0 <promiscuous_packet_search@@Base+0x158>
    4d90:	add	r3, pc, r3
    4d94:	mov	r4, #0
    4d98:	b	4dc8 <promiscuous_packet_search@@Base+0x70>
    4d9c:	ldr	r3, [fp, #8]
    4da0:	mov	r0, #255	; 0xff
    4da4:	strb	r0, [r3]
    4da8:	ldrb	r0, [r3]
    4dac:	cmp	r0, r5
    4db0:	ldr	r3, [pc, #256]	; 4eb8 <promiscuous_packet_search@@Base+0x160>
    4db4:	add	r3, pc, r3
    4db8:	ble	4e98 <promiscuous_packet_search@@Base+0x140>
    4dbc:	add	r4, r4, #1
    4dc0:	cmp	r6, r4
    4dc4:	beq	4e90 <promiscuous_packet_search@@Base+0x138>
    4dc8:	add	r0, r7, r4
    4dcc:	ldrb	r1, [r0, #63]	; 0x3f
    4dd0:	lsl	r1, r1, #6
    4dd4:	uxtb	r2, r8
    4dd8:	orr	r8, r1, r2, lsr #1
    4ddc:	uxtb	r1, r8
    4de0:	ldrb	r1, [r3, r1]
    4de4:	cmp	r1, #1
    4de8:	bhi	4dbc <promiscuous_packet_search@@Base+0x64>
    4dec:	bl	4ee8 <promiscuous_packet_search@@Base+0x190>
    4df0:	mvn	r2, #7
    4df4:	and	r2, r2, r1, lsr #22
    4df8:	ldr	r3, [pc, #180]	; 4eb4 <promiscuous_packet_search@@Base+0x15c>
    4dfc:	add	r3, pc, r3
    4e00:	ldr	r2, [r3, r2]!
    4e04:	orr	r0, r0, r2
    4e08:	movw	r2, #21756	; 0x54fc
    4e0c:	movt	r2, #48076	; 0xbbcc
    4e10:	eor	r0, r0, r2
    4e14:	ldr	r2, [r3, #4]
    4e18:	bic	r1, r1, #-33554432	; 0xfe000000
    4e1c:	orr	r9, r1, r2
    4e20:	movw	r1, #36246	; 0x8d96
    4e24:	movt	r1, #33668	; 0x8384
    4e28:	eor	r1, r9, r1
    4e2c:	bl	4f34 <promiscuous_packet_search@@Base+0x1dc>
    4e30:	ldr	r3, [fp, #8]
    4e34:	mov	r2, #0
    4e38:	strb	r2, [r3]
    4e3c:	orrs	r2, r0, r1
    4e40:	lsr	sl, r9, #2
    4e44:	beq	4da8 <promiscuous_packet_search@@Base+0x50>
    4e48:	bl	4fc0 <promiscuous_packet_search@@Base+0x268>
    4e4c:	cmp	r0, #0
    4e50:	beq	4d9c <promiscuous_packet_search@@Base+0x44>
    4e54:	mov	sl, r6
    4e58:	mov	r6, r7
    4e5c:	mov	r7, r5
    4e60:	ldr	r5, [r0, #12]
    4e64:	ldr	r0, [r0, #8]
    4e68:	mov	r1, r5
    4e6c:	bl	5110 <promiscuous_packet_search@@Base+0x3b8>
    4e70:	ldr	r3, [fp, #8]
    4e74:	strb	r0, [r3]
    4e78:	eor	r0, r5, r9
    4e7c:	mov	r5, r7
    4e80:	mov	r7, r6
    4e84:	mov	r6, sl
    4e88:	lsr	sl, r0, #2
    4e8c:	b	4da8 <promiscuous_packet_search@@Base+0x50>
    4e90:	mvn	r4, #0
    4e94:	b	4ea4 <promiscuous_packet_search@@Base+0x14c>
    4e98:	bic	r0, sl, #-16777216	; 0xff000000
    4e9c:	ldr	r1, [sp]
    4ea0:	str	r0, [r1]
    4ea4:	mov	r0, r4
    4ea8:	sub	sp, fp, #28
    4eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4eb0:	muleq	r0, r0, pc	; <UNPREDICTABLE>
    4eb4:	andeq	r6, r0, r4, lsr #31
    4eb8:	andeq	r6, r0, ip, ror #30
    4ebc:	mov	ip, #0
    4ec0:	cmp	r1, #1
    4ec4:	blt	4ee0 <promiscuous_packet_search@@Base+0x188>
    4ec8:	mov	r3, #0
    4ecc:	ldrb	r2, [r0, r3]
    4ed0:	orr	ip, ip, r2, lsl r3
    4ed4:	add	r3, r3, #1
    4ed8:	cmp	r1, r3
    4edc:	bne	4ecc <promiscuous_packet_search@@Base+0x174>
    4ee0:	uxtb	r0, ip
    4ee4:	bx	lr
    4ee8:	push	{r4, sl, fp, lr}
    4eec:	add	fp, sp, #8
    4ef0:	mov	ip, r0
    4ef4:	mov	r0, #0
    4ef8:	mov	r1, #0
    4efc:	mov	r3, #0
    4f00:	ldrb	lr, [ip, r3]
    4f04:	rsb	r2, r3, #32
    4f08:	lsr	r2, lr, r2
    4f0c:	subs	r4, r3, #32
    4f10:	lslpl	r2, lr, r4
    4f14:	orr	r1, r2, r1
    4f18:	lsl	r2, lr, r3
    4f1c:	movwpl	r2, #0
    4f20:	orr	r0, r2, r0
    4f24:	add	r3, r3, #1
    4f28:	cmp	r3, #64	; 0x40
    4f2c:	bne	4f00 <promiscuous_packet_search@@Base+0x1a8>
    4f30:	pop	{r4, sl, fp, pc}
    4f34:	push	{r4, sl, fp, lr}
    4f38:	add	fp, sp, #8
    4f3c:	ubfx	r2, r1, #8, #8
    4f40:	ldr	r4, [pc, #104]	; 4fb0 <promiscuous_packet_search@@Base+0x258>
    4f44:	add	r4, pc, r4
    4f48:	ldr	ip, [r4, r2, lsl #3]!
    4f4c:	uxtb	lr, r1
    4f50:	ldr	r2, [pc, #92]	; 4fb4 <promiscuous_packet_search@@Base+0x25c>
    4f54:	add	r2, pc, r2
    4f58:	ldr	r3, [r2, lr, lsl #3]!
    4f5c:	eor	r0, r3, r0
    4f60:	eor	ip, r0, ip
    4f64:	ubfx	r0, r1, #16, #8
    4f68:	ldr	r3, [pc, #72]	; 4fb8 <promiscuous_packet_search@@Base+0x260>
    4f6c:	add	r3, pc, r3
    4f70:	ldr	r0, [r3, r0, lsl #3]!
    4f74:	eor	ip, ip, r0
    4f78:	mvn	r0, #7
    4f7c:	and	r0, r0, r1, lsr #21
    4f80:	ldr	r1, [pc, #52]	; 4fbc <promiscuous_packet_search@@Base+0x264>
    4f84:	add	r1, pc, r1
    4f88:	ldr	r0, [r1, r0]!
    4f8c:	eor	r0, ip, r0
    4f90:	ldr	r4, [r4, #4]
    4f94:	ldr	r2, [r2, #4]
    4f98:	eor	r2, r2, r4
    4f9c:	ldr	r3, [r3, #4]
    4fa0:	eor	r2, r2, r3
    4fa4:	ldr	r1, [r1, #4]
    4fa8:	eor	r1, r2, r1
    4fac:	pop	{r4, sl, fp, pc}
    4fb0:	andeq	r7, r0, ip, asr sl
    4fb4:	andeq	r7, r0, ip, asr #4
    4fb8:	andeq	r8, r0, r4, lsr r2
    4fbc:	andeq	r8, r0, ip, lsl sl
    4fc0:	push	{r4, r5, r6, sl, fp, lr}
    4fc4:	add	fp, sp, #16
    4fc8:	push	{r0, r1}
    4fcc:	ldr	r0, [pc, #312]	; 510c <promiscuous_packet_search@@Base+0x3b4>
    4fd0:	ldr	r0, [pc, r0]
    4fd4:	cmp	r0, #0
    4fd8:	beq	50fc <promiscuous_packet_search@@Base+0x3a4>
    4fdc:	ldr	r1, [sp, #4]
    4fe0:	movw	r2, #31161	; 0x79b9
    4fe4:	movt	r2, #40503	; 0x9e37
    4fe8:	add	r1, r1, r2
    4fec:	ldrb	r2, [sp]
    4ff0:	ldrb	r3, [sp, #1]
    4ff4:	ldrb	r6, [sp, #2]
    4ff8:	ldrb	r5, [sp, #3]
    4ffc:	rsb	r5, r1, r5, lsl #24
    5000:	add	r6, r5, r6, lsl #16
    5004:	add	r3, r6, r3, lsl #8
    5008:	add	r2, r3, r2
    500c:	movw	r3, #47810	; 0xbac2
    5010:	movt	r3, #40777	; 0x9f49
    5014:	add	r2, r2, r3
    5018:	movw	r3, #63341	; 0xf76d
    501c:	movt	r3, #7
    5020:	eor	r2, r2, r3
    5024:	sub	r1, r1, r2
    5028:	movw	r3, #16649	; 0x4109
    502c:	movt	r3, #274	; 0x112
    5030:	add	r1, r1, r3
    5034:	eor	r1, r1, r2, lsl #8
    5038:	add	r3, r2, r1
    503c:	movw	r6, #48887	; 0xbef7
    5040:	movt	r6, #65261	; 0xfeed
    5044:	sub	r3, r6, r3
    5048:	eor	r3, r3, r1, lsr #13
    504c:	sub	r2, r2, r1
    5050:	sub	r2, r2, r3
    5054:	eor	r2, r2, r3, lsr #12
    5058:	sub	r1, r1, r3
    505c:	sub	r1, r1, r2
    5060:	eor	r1, r1, r2, lsl #16
    5064:	sub	r3, r3, r2
    5068:	sub	r3, r3, r1
    506c:	eor	r3, r3, r1, lsr #5
    5070:	sub	r2, r2, r1
    5074:	sub	r2, r2, r3
    5078:	eor	r2, r2, r3, lsr #3
    507c:	sub	r1, r1, r3
    5080:	sub	r1, r1, r2
    5084:	eor	r1, r1, r2, lsl #10
    5088:	sub	r2, r3, r2
    508c:	sub	r2, r2, r1
    5090:	eor	r1, r2, r1, lsr #15
    5094:	ldr	r6, [r0, #16]
    5098:	ldm	r6, {r0, r2}
    509c:	sub	r2, r2, #1
    50a0:	and	r1, r1, r2
    50a4:	add	r1, r1, r1, lsl #1
    50a8:	ldr	r0, [r0, r1, lsl #2]
    50ac:	cmp	r0, #0
    50b0:	beq	50fc <promiscuous_packet_search@@Base+0x3a4>
    50b4:	ldr	r1, [r6, #20]
    50b8:	sub	r4, r0, r1
    50bc:	mov	r5, sp
    50c0:	ldr	r0, [r4, #40]	; 0x28
    50c4:	cmp	r0, #8
    50c8:	bne	50e4 <promiscuous_packet_search@@Base+0x38c>
    50cc:	ldr	r0, [r4, #36]	; 0x24
    50d0:	mov	r1, r5
    50d4:	mov	r2, #8
    50d8:	bl	4840 <bcmp@plt>
    50dc:	cmp	r0, #0
    50e0:	beq	5100 <promiscuous_packet_search@@Base+0x3a8>
    50e4:	ldr	r0, [r4, #32]
    50e8:	cmp	r0, #0
    50ec:	beq	50fc <promiscuous_packet_search@@Base+0x3a4>
    50f0:	ldr	r1, [r6, #20]
    50f4:	sub	r4, r0, r1
    50f8:	b	50c0 <promiscuous_packet_search@@Base+0x368>
    50fc:	mov	r4, #0
    5100:	mov	r0, r4
    5104:	sub	sp, fp, #16
    5108:	pop	{r4, r5, r6, sl, fp, pc}
    510c:	ldrdeq	r1, [r2], -r0
    5110:	push	{r4, sl, fp, lr}
    5114:	add	fp, sp, #8
    5118:	movw	ip, #21845	; 0x5555
    511c:	movt	ip, #21845	; 0x5555
    5120:	and	r3, ip, r1, lsr #1
    5124:	sub	r1, r1, r3
    5128:	movw	r3, #13107	; 0x3333
    512c:	movt	r3, #13107	; 0x3333
    5130:	and	r2, r3, r1, lsr #2
    5134:	and	r1, r1, r3
    5138:	add	r1, r1, r2
    513c:	add	r1, r1, r1, lsr #4
    5140:	movw	lr, #3855	; 0xf0f
    5144:	movt	lr, #3855	; 0xf0f
    5148:	and	r1, r1, lr
    514c:	movw	r4, #257	; 0x101
    5150:	movt	r4, #257	; 0x101
    5154:	mul	r1, r1, r4
    5158:	and	r2, ip, r0, lsr #1
    515c:	sub	r0, r0, r2
    5160:	and	r2, r3, r0, lsr #2
    5164:	and	r0, r0, r3
    5168:	add	r0, r0, r2
    516c:	add	r0, r0, r0, lsr #4
    5170:	and	r0, r0, lr
    5174:	mul	r0, r0, r4
    5178:	lsr	r0, r0, #24
    517c:	add	r0, r0, r1, lsr #24
    5180:	pop	{r4, sl, fp, pc}

00005184 <find_known_lap@@Base>:
    5184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5188:	add	fp, sp, #28
    518c:	sub	sp, sp, #4
    5190:	mov	r9, r3
    5194:	mov	r6, r1
    5198:	mov	sl, r0
    519c:	mov	r0, r2
    51a0:	bl	4774 <btbb_gen_syncword@plt>
    51a4:	mov	r5, r0
    51a8:	mvn	r0, #0
    51ac:	cmp	r6, #1
    51b0:	blt	51f0 <find_known_lap@@Base+0x6c>
    51b4:	mov	r4, r1
    51b8:	ldr	r8, [fp, #8]
    51bc:	mov	r7, #0
    51c0:	add	r0, sl, r7
    51c4:	bl	4ee8 <promiscuous_packet_search@@Base+0x190>
    51c8:	eor	r0, r0, r5
    51cc:	eor	r1, r1, r4
    51d0:	bl	5110 <promiscuous_packet_search@@Base+0x3b8>
    51d4:	strb	r0, [r8]
    51d8:	cmp	r0, r9
    51dc:	ble	51f8 <find_known_lap@@Base+0x74>
    51e0:	add	r7, r7, #1
    51e4:	cmp	r6, r7
    51e8:	bne	51c0 <find_known_lap@@Base+0x3c>
    51ec:	mvn	r0, #0
    51f0:	sub	sp, fp, #28
    51f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51f8:	mov	r0, r7
    51fc:	sub	sp, fp, #28
    5200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005204 <btbb_find_ac@@Base>:
    5204:	push	{r4, r5, fp, lr}
    5208:	add	fp, sp, #8
    520c:	sub	sp, sp, #16
    5210:	str	r2, [sp, #12]
    5214:	cmn	r2, #1
    5218:	beq	522c <btbb_find_ac@@Base+0x28>
    521c:	add	r5, sp, #11
    5220:	str	r5, [sp]
    5224:	bl	48c4 <find_known_lap@plt>
    5228:	b	523c <btbb_find_ac@@Base+0x38>
    522c:	add	r2, sp, #11
    5230:	str	r2, [sp]
    5234:	add	r2, sp, #12
    5238:	bl	49a8 <promiscuous_packet_search@plt>
    523c:	mov	r4, r0
    5240:	cmp	r0, #0
    5244:	bmi	5270 <btbb_find_ac@@Base+0x6c>
    5248:	ldr	r5, [fp, #8]
    524c:	ldr	r0, [r5]
    5250:	cmp	r0, #0
    5254:	bne	5260 <btbb_find_ac@@Base+0x5c>
    5258:	bl	47ec <btbb_packet_new@plt>
    525c:	str	r0, [r5]
    5260:	ldr	r0, [r5]
    5264:	ldrb	r2, [sp, #11]
    5268:	ldr	r1, [sp, #12]
    526c:	bl	527c <btbb_find_ac@@Base+0x78>
    5270:	mov	r0, r4
    5274:	sub	sp, fp, #8
    5278:	pop	{r4, r5, fp, pc}
    527c:	strb	r2, [r0, #2820]	; 0xb04
    5280:	str	r1, [r0, #12]
    5284:	mov	r1, #0
    5288:	str	r1, [r0, #4]
    528c:	mov	r1, #0
    5290:	mov	r2, #1
    5294:	b	4cec <btbb_packet_set_flag@@Base>

00005298 <btbb_packet_set_data@@Base>:
    5298:	push	{r4, r5, fp, lr}
    529c:	add	fp, sp, #8
    52a0:	movw	ip, #3125	; 0xc35
    52a4:	cmp	r2, ip
    52a8:	movlt	ip, r2
    52ac:	ldr	lr, [fp, #8]
    52b0:	cmp	r2, #1
    52b4:	blt	52d8 <btbb_packet_set_data@@Base+0x40>
    52b8:	movw	r2, #2824	; 0xb08
    52bc:	add	r2, r0, r2
    52c0:	mov	r4, #0
    52c4:	ldrb	r5, [r1, r4]
    52c8:	strb	r5, [r2, r4]
    52cc:	add	r4, r4, #1
    52d0:	cmp	r4, ip
    52d4:	blt	52c4 <btbb_packet_set_data@@Base+0x2c>
    52d8:	movw	r1, #2822	; 0xb06
    52dc:	strh	ip, [r0, r1]
    52e0:	strb	r3, [r0, #8]
    52e4:	lsr	r1, lr, #1
    52e8:	str	r1, [r0, #2816]	; 0xb00
    52ec:	pop	{r4, r5, fp, pc}

000052f0 <btbb_packet_get_flag@@Base>:
    52f0:	ldr	r0, [r0, #4]
    52f4:	mov	r2, #1
    52f8:	and	r0, r0, r2, lsl r1
    52fc:	cmp	r0, #0
    5300:	movwne	r0, #1
    5304:	bx	lr

00005308 <btbb_get_symbols@@Base>:
    5308:	movw	r1, #2824	; 0xb08
    530c:	add	r0, r0, r1
    5310:	bx	lr

00005314 <btbb_packet_get_payload_length@@Base>:
    5314:	ldr	r0, [r0, #64]	; 0x40
    5318:	bx	lr

0000531c <btbb_get_payload@@Base>:
    531c:	add	r0, r0, #68	; 0x44
    5320:	bx	lr

00005324 <btbb_get_payload_packed@@Base>:
    5324:	push	{r4, r5, r6, r7, fp, lr}
    5328:	add	fp, sp, #16
    532c:	mov	r5, r0
    5330:	ldr	r0, [r0, #64]	; 0x40
    5334:	cmp	r0, #1
    5338:	blt	536c <btbb_get_payload_packed@@Base+0x48>
    533c:	mov	r4, r1
    5340:	add	r6, r5, #68	; 0x44
    5344:	mov	r7, #0
    5348:	mov	r0, r6
    534c:	mov	r1, #8
    5350:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    5354:	strb	r0, [r4, r7]
    5358:	add	r6, r6, #8
    535c:	add	r7, r7, #1
    5360:	ldr	r0, [r5, #64]	; 0x40
    5364:	cmp	r7, r0
    5368:	blt	5348 <btbb_get_payload_packed@@Base+0x24>
    536c:	pop	{r4, r5, r6, r7, fp, pc}

00005370 <btbb_packet_get_type@@Base>:
    5370:	ldrb	r0, [r0, #18]
    5374:	bx	lr

00005378 <btbb_packet_get_lt_addr@@Base>:
    5378:	ldrb	r0, [r0, #19]
    537c:	bx	lr

00005380 <btbb_packet_get_header_flags@@Base>:
    5380:	ldrb	r0, [r0, #20]
    5384:	bx	lr

00005388 <btbb_packet_get_hec@@Base>:
    5388:	ldrb	r0, [r0, #21]
    538c:	bx	lr

00005390 <btbb_packet_get_header_packed@@Base>:
    5390:	add	r0, r0, #22
    5394:	mov	r1, #18
    5398:	b	539c <btbb_packet_get_header_packed@@Base+0xc>
    539c:	cmp	r1, #1
    53a0:	movlt	r0, #0
    53a4:	bxlt	lr
    53a8:	mov	ip, r0
    53ac:	mov	r0, #0
    53b0:	mov	r3, #0
    53b4:	ldrb	r2, [ip, r3]
    53b8:	orr	r0, r0, r2, lsl r3
    53bc:	add	r3, r3, #1
    53c0:	cmp	r1, r3
    53c4:	bne	53b4 <btbb_packet_get_header_packed@@Base+0x24>
    53c8:	bx	lr

000053cc <crc_check@@Base>:
    53cc:	push	{r4, sl, fp, lr}
    53d0:	add	fp, sp, #8
    53d4:	mov	r4, r1
    53d8:	mov	r1, r0
    53dc:	ldrb	r0, [r4, #18]
    53e0:	sub	r2, r0, #2
    53e4:	mov	r0, #1
    53e8:	cmp	r2, #13
    53ec:	bhi	5464 <crc_check@@Base+0x98>
    53f0:	add	r3, pc, #4
    53f4:	ldr	r2, [r3, r2, lsl #2]
    53f8:	add	pc, r3, r2
    53fc:	strheq	r0, [r0], -r4
    5400:	andeq	r0, r0, r8, lsr r0
    5404:	andeq	r0, r0, r4, ror r0
    5408:	andeq	r0, r0, ip, asr #1
    540c:	andeq	r0, r0, r8, rrx
    5410:	andeq	r0, r0, r4, ror #1
    5414:	andeq	r0, r0, r8, lsr r0
    5418:	andeq	r0, r0, r8, rrx
    541c:	andeq	r0, r0, r8, lsr r0
    5420:	andeq	r0, r0, r4, ror r0
    5424:	strdeq	r0, [r0], -ip
    5428:	andeq	r0, r0, r4, lsl r1
    542c:	andeq	r0, r0, r8, lsr r0
    5430:	andeq	r0, r0, r4, ror r0
    5434:	mov	r0, r1
    5438:	mov	r1, r4
    543c:	bl	4714 <DM@plt>
    5440:	cmp	r0, #0
    5444:	beq	5484 <crc_check@@Base+0xb8>
    5448:	cmp	r0, #2
    544c:	blt	5464 <crc_check@@Base+0x98>
    5450:	ldrb	r2, [r4, #18]
    5454:	mov	r1, #1
    5458:	cmp	r2, #7
    545c:	cmpne	r2, #13
    5460:	beq	54a8 <crc_check@@Base+0xdc>
    5464:	mov	r1, r0
    5468:	mov	r0, r1
    546c:	pop	{r4, sl, fp, pc}
    5470:	mov	r0, r1
    5474:	mov	r1, r4
    5478:	bl	4978 <DH@plt>
    547c:	cmp	r0, #0
    5480:	bne	5448 <crc_check@@Base+0x7c>
    5484:	ldrb	r2, [r4, #18]
    5488:	mov	r1, #1
    548c:	cmp	r2, #5
    5490:	bhi	54a8 <crc_check@@Base+0xdc>
    5494:	mov	r0, #0
    5498:	mov	r3, #1
    549c:	mov	r4, #44	; 0x2c
    54a0:	tst	r4, r3, lsl r2
    54a4:	movne	r1, r0
    54a8:	mov	r0, r1
    54ac:	pop	{r4, sl, fp, pc}
    54b0:	mov	r0, r1
    54b4:	mov	r1, r4
    54b8:	bl	46a8 <fhs@plt>
    54bc:	cmp	r0, #0
    54c0:	bne	5448 <crc_check@@Base+0x7c>
    54c4:	b	5484 <crc_check@@Base+0xb8>
    54c8:	mov	r0, r1
    54cc:	mov	r1, r4
    54d0:	bl	472c <HV@plt>
    54d4:	cmp	r0, #0
    54d8:	bne	5448 <crc_check@@Base+0x7c>
    54dc:	b	5484 <crc_check@@Base+0xb8>
    54e0:	mov	r0, r1
    54e4:	mov	r1, r4
    54e8:	bl	4900 <EV3@plt>
    54ec:	cmp	r0, #0
    54f0:	bne	5448 <crc_check@@Base+0x7c>
    54f4:	b	5484 <crc_check@@Base+0xb8>
    54f8:	mov	r0, r1
    54fc:	mov	r1, r4
    5500:	bl	46b4 <EV4@plt>
    5504:	cmp	r0, #0
    5508:	bne	5448 <crc_check@@Base+0x7c>
    550c:	b	5484 <crc_check@@Base+0xb8>
    5510:	mov	r0, r1
    5514:	mov	r1, r4
    5518:	bl	4960 <EV5@plt>
    551c:	cmp	r0, #0
    5520:	bne	5448 <crc_check@@Base+0x7c>
    5524:	b	5484 <crc_check@@Base+0xb8>

00005528 <fhs@@Base>:
    5528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    552c:	add	fp, sp, #28
    5530:	sub	sp, sp, #12
    5534:	mov	r8, r0
    5538:	mov	r0, #20
    553c:	str	r0, [r1, #64]	; 0x40
    5540:	movw	r0, #2822	; 0xb06
    5544:	ldrh	r0, [r1, r0]
    5548:	lsr	r0, r0, #1
    554c:	mov	r9, #1
    5550:	cmp	r0, #181	; 0xb5
    5554:	bcc	560c <fhs@@Base+0xe4>
    5558:	mov	r4, r1
    555c:	movw	r0, #2946	; 0xb82
    5560:	add	r0, r1, r0
    5564:	mov	r1, #160	; 0xa0
    5568:	bl	5c5c <HV@@Base+0x158>
    556c:	mov	r9, #0
    5570:	cmp	r0, #0
    5574:	beq	560c <fhs@@Base+0xe4>
    5578:	mov	r6, r0
    557c:	ldr	r0, [r4, #64]	; 0x40
    5580:	mov	sl, #18
    5584:	str	sl, [sp]
    5588:	str	r4, [sp, #4]
    558c:	add	r7, r4, #68	; 0x44
    5590:	lsl	r3, r0, #3
    5594:	mov	r0, r6
    5598:	mov	r1, r7
    559c:	mov	r2, r8
    55a0:	bl	5e00 <HV@@Base+0x2fc>
    55a4:	mov	r0, r4
    55a8:	bl	5ea0 <HV@@Base+0x39c>
    55ac:	cmp	r0, #0
    55b0:	bne	5600 <fhs@@Base+0xd8>
    55b4:	mov	r5, #32
    55b8:	ldr	r0, [r4, #64]	; 0x40
    55bc:	str	sl, [sp]
    55c0:	str	r4, [sp, #4]
    55c4:	lsl	r3, r0, #3
    55c8:	mov	r0, r6
    55cc:	mov	r1, r7
    55d0:	mov	r2, r5
    55d4:	bl	5e00 <HV@@Base+0x2fc>
    55d8:	mov	r0, r4
    55dc:	bl	5ea0 <HV@@Base+0x39c>
    55e0:	cmp	r0, #0
    55e4:	bne	5600 <fhs@@Base+0xd8>
    55e8:	add	r5, r5, #1
    55ec:	cmp	r5, #64	; 0x40
    55f0:	bne	55b8 <fhs@@Base+0x90>
    55f4:	mov	r0, r6
    55f8:	bl	4660 <free@plt>
    55fc:	b	560c <fhs@@Base+0xe4>
    5600:	mov	r0, r6
    5604:	bl	4660 <free@plt>
    5608:	mov	r9, #1000	; 0x3e8
    560c:	mov	r0, r9
    5610:	sub	sp, fp, #28
    5614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005618 <DM@@Base>:
    5618:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    561c:	add	fp, sp, #24
    5620:	sub	sp, sp, #8
    5624:	mov	r4, r1
    5628:	mov	r8, r0
    562c:	ldrb	r0, [r1, #18]
    5630:	sub	r1, r0, #3
    5634:	cmp	r1, #11
    5638:	bhi	5750 <DM@@Base+0x138>
    563c:	movw	r0, #2946	; 0xb82
    5640:	add	r9, r4, r0
    5644:	movw	r0, #2822	; 0xb06
    5648:	ldrh	r0, [r4, r0]
    564c:	sub	r7, r0, #122	; 0x7a
    5650:	mov	r6, #20
    5654:	mov	r2, #1
    5658:	add	r3, pc, #8
    565c:	ldr	r1, [r3, r1, lsl #2]
    5660:	mov	r5, #0
    5664:	add	pc, r3, r1
    5668:	andeq	r0, r0, r4, asr r0
    566c:	andeq	r0, r0, ip, ror #1
    5670:	andeq	r0, r0, ip, ror #1
    5674:	andeq	r0, r0, ip, ror #1
    5678:	andeq	r0, r0, ip, ror #1
    567c:	andeq	r0, r0, r0, lsr r0
    5680:	andeq	r0, r0, ip, ror #1
    5684:	andeq	r0, r0, r4, asr #32
    5688:	andeq	r0, r0, ip, ror #1
    568c:	andeq	r0, r0, ip, ror #1
    5690:	andeq	r0, r0, ip, ror #1
    5694:	andeq	r0, r0, ip, asr #32
    5698:	movw	r1, #3026	; 0xbd2
    569c:	add	r9, r4, r1
    56a0:	sub	r7, r0, #202	; 0xca
    56a4:	mov	r6, #12
    56a8:	b	56bc <DM@@Base+0xa4>
    56ac:	mov	r6, #125	; 0x7d
    56b0:	b	56b8 <DM@@Base+0xa0>
    56b4:	mov	r6, #228	; 0xe4
    56b8:	mov	r2, #2
    56bc:	mov	r5, #1
    56c0:	str	r5, [sp]
    56c4:	str	r4, [sp, #4]
    56c8:	mov	r0, r9
    56cc:	mov	r1, r8
    56d0:	mov	r3, r7
    56d4:	bl	5ee8 <HV@@Base+0x3e4>
    56d8:	cmp	r0, #0
    56dc:	beq	5750 <DM@@Base+0x138>
    56e0:	ldr	r0, [r4, #64]	; 0x40
    56e4:	cmp	r0, r6
    56e8:	bgt	5754 <DM@@Base+0x13c>
    56ec:	cmp	r7, r0, lsl #3
    56f0:	blt	5754 <DM@@Base+0x13c>
    56f4:	lsl	r7, r0, #3
    56f8:	mov	r0, r9
    56fc:	mov	r1, r7
    5700:	bl	5c5c <HV@@Base+0x158>
    5704:	cmp	r0, #0
    5708:	mov	r5, #0
    570c:	beq	5754 <DM@@Base+0x13c>
    5710:	mov	r6, r0
    5714:	mov	r0, #18
    5718:	stm	sp, {r0, r4}
    571c:	add	r1, r4, #68	; 0x44
    5720:	mov	r0, r6
    5724:	mov	r2, r8
    5728:	mov	r3, r7
    572c:	bl	5e00 <HV@@Base+0x2fc>
    5730:	mov	r0, r6
    5734:	bl	4660 <free@plt>
    5738:	mov	r0, r4
    573c:	bl	5ea0 <HV@@Base+0x39c>
    5740:	mov	r5, #10
    5744:	cmp	r0, #0
    5748:	movweq	r5, #2
    574c:	b	5754 <DM@@Base+0x13c>
    5750:	mov	r5, #0
    5754:	mov	r0, r5
    5758:	sub	sp, fp, #24
    575c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00005760 <DH@@Base>:
    5760:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    5764:	add	fp, sp, #24
    5768:	sub	sp, sp, #8
    576c:	mov	r4, r1
    5770:	mov	r8, r0
    5774:	ldrb	r0, [r1, #18]
    5778:	sub	r1, r0, #4
    577c:	mov	r6, #0
    5780:	cmp	r1, #11
    5784:	bhi	5870 <DH@@Base+0x110>
    5788:	movw	r0, #2822	; 0xb06
    578c:	ldrh	r0, [r4, r0]
    5790:	mov	r2, #1
    5794:	mov	r9, #30
    5798:	add	r3, pc, #4
    579c:	ldr	r1, [r3, r1, lsl #2]
    57a0:	add	pc, r3, r1
    57a4:	andeq	r0, r0, r4, asr #32
    57a8:	andeq	r0, r0, ip, asr #1
    57ac:	andeq	r0, r0, ip, asr #1
    57b0:	andeq	r0, r0, ip, asr #1
    57b4:	andeq	r0, r0, ip, asr #1
    57b8:	andeq	r0, r0, r4, asr #32
    57bc:	andeq	r0, r0, ip, asr #1
    57c0:	andeq	r0, r0, r0, lsr r0
    57c4:	andeq	r0, r0, ip, asr #1
    57c8:	andeq	r0, r0, ip, asr #1
    57cc:	andeq	r0, r0, ip, asr #1
    57d0:	andeq	r0, r0, ip, lsr r0
    57d4:	mov	r2, #2
    57d8:	mov	r9, #187	; 0xbb
    57dc:	b	57e8 <DH@@Base+0x88>
    57e0:	mov	r2, #2
    57e4:	movw	r9, #343	; 0x157
    57e8:	movw	r1, #2946	; 0xb82
    57ec:	add	r7, r4, r1
    57f0:	sub	r5, r0, #122	; 0x7a
    57f4:	mov	r6, #0
    57f8:	str	r6, [sp]
    57fc:	str	r4, [sp, #4]
    5800:	mov	r0, r7
    5804:	mov	r1, r8
    5808:	mov	r3, r5
    580c:	bl	5ee8 <HV@@Base+0x3e4>
    5810:	cmp	r0, #0
    5814:	beq	5870 <DH@@Base+0x110>
    5818:	ldr	r0, [r4, #64]	; 0x40
    581c:	mov	r6, #1
    5820:	cmp	r0, r9
    5824:	bgt	5870 <DH@@Base+0x110>
    5828:	cmp	r5, r0, lsl #3
    582c:	blt	5870 <DH@@Base+0x110>
    5830:	lsl	r3, r0, #3
    5834:	mov	r0, #18
    5838:	stm	sp, {r0, r4}
    583c:	add	r1, r4, #68	; 0x44
    5840:	mov	r0, r7
    5844:	mov	r2, r8
    5848:	bl	5e00 <HV@@Base+0x2fc>
    584c:	ldrb	r0, [r4, #18]
    5850:	mov	r6, #2
    5854:	cmp	r0, #9
    5858:	beq	5870 <DH@@Base+0x110>
    585c:	mov	r0, r4
    5860:	bl	5ea0 <HV@@Base+0x39c>
    5864:	mov	r6, #10
    5868:	cmp	r0, #0
    586c:	movweq	r6, #2
    5870:	mov	r0, r6
    5874:	sub	sp, fp, #24
    5878:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000587c <EV3@@Base>:
    587c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5880:	add	fp, sp, #24
    5884:	sub	sp, sp, #8
    5888:	mov	r4, r1
    588c:	mov	r8, r0
    5890:	mov	r0, #0
    5894:	str	r0, [r1, #64]	; 0x40
    5898:	movw	r1, #2946	; 0xb82
    589c:	add	r6, r4, r1
    58a0:	movw	r1, #2822	; 0xb06
    58a4:	ldrh	r1, [r4, r1]
    58a8:	sub	r7, r1, #122	; 0x7a
    58ac:	b	58c0 <EV3@@Base+0x44>
    58b0:	add	r0, r5, #1
    58b4:	str	r0, [r4, #64]	; 0x40
    58b8:	cmp	r0, #32
    58bc:	bge	5928 <EV3@@Base+0xac>
    58c0:	add	r1, r0, #1
    58c4:	lsl	r1, r1, #3
    58c8:	cmp	r1, r7
    58cc:	bgt	591c <EV3@@Base+0xa0>
    58d0:	lsl	r0, r0, #3
    58d4:	add	r1, r0, #18
    58d8:	stm	sp, {r1, r4}
    58dc:	add	r0, r4, r0
    58e0:	add	r1, r0, #68	; 0x44
    58e4:	mov	r0, r6
    58e8:	mov	r2, r8
    58ec:	mov	r3, #8
    58f0:	bl	5e00 <HV@@Base+0x2fc>
    58f4:	ldr	r5, [r4, #64]	; 0x40
    58f8:	cmp	r5, #3
    58fc:	blt	58b0 <EV3@@Base+0x34>
    5900:	mov	r0, r4
    5904:	bl	5ea0 <HV@@Base+0x39c>
    5908:	cmp	r0, #0
    590c:	beq	58b0 <EV3@@Base+0x34>
    5910:	mov	r0, #10
    5914:	sub	sp, fp, #24
    5918:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    591c:	mov	r0, #1
    5920:	sub	sp, fp, #24
    5924:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5928:	mov	r0, #2
    592c:	sub	sp, fp, #24
    5930:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00005934 <EV4@@Base>:
    5934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5938:	add	fp, sp, #28
    593c:	sub	sp, sp, #20
    5940:	mov	r5, r1
    5944:	str	r0, [sp, #12]
    5948:	mov	r0, #1
    594c:	str	r0, [r1, #64]	; 0x40
    5950:	movw	r0, #2946	; 0xb82
    5954:	add	r0, r1, r0
    5958:	str	r0, [sp, #16]
    595c:	movw	r0, #2822	; 0xb06
    5960:	ldrh	r0, [r1, r0]
    5964:	sub	sl, r0, #122	; 0x7a
    5968:	mov	r4, #0
    596c:	mov	r8, #0
    5970:	b	5988 <EV4@@Base+0x54>
    5974:	add	r4, r4, #10
    5978:	movw	r0, #1470	; 0x5be
    597c:	cmp	r9, r0
    5980:	mov	r8, r9
    5984:	bcs	5a40 <EV4@@Base+0x10c>
    5988:	add	r9, r8, #15
    598c:	cmp	r9, sl
    5990:	bgt	5a20 <EV4@@Base+0xec>
    5994:	ldr	r0, [sp, #16]
    5998:	add	r0, r0, r8
    599c:	mov	r1, #10
    59a0:	bl	5c5c <HV@@Base+0x158>
    59a4:	cmp	r0, #0
    59a8:	beq	5a2c <EV4@@Base+0xf8>
    59ac:	mov	r7, r0
    59b0:	add	r0, r4, #18
    59b4:	stm	sp, {r0, r5}
    59b8:	add	r0, r5, r4
    59bc:	add	r1, r0, #68	; 0x44
    59c0:	mov	r0, r7
    59c4:	ldr	r2, [sp, #12]
    59c8:	mov	r3, #10
    59cc:	bl	5e00 <HV@@Base+0x2fc>
    59d0:	mov	r0, r7
    59d4:	bl	4660 <free@plt>
    59d8:	ldr	r0, [r5, #64]	; 0x40
    59dc:	cmp	r4, r0, lsl #3
    59e0:	blt	5974 <EV4@@Base+0x40>
    59e4:	add	r7, r0, #1
    59e8:	lsl	r6, r0, #3
    59ec:	mov	r0, r5
    59f0:	bl	5ea0 <HV@@Base+0x39c>
    59f4:	cmp	r0, #0
    59f8:	bne	5a14 <EV4@@Base+0xe0>
    59fc:	str	r7, [r5, #64]	; 0x40
    5a00:	add	r7, r7, #1
    5a04:	add	r6, r6, #8
    5a08:	cmp	r6, r4
    5a0c:	ble	59ec <EV4@@Base+0xb8>
    5a10:	b	5974 <EV4@@Base+0x40>
    5a14:	mov	r0, #10
    5a18:	sub	sp, fp, #28
    5a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a20:	mov	r0, #1
    5a24:	sub	sp, fp, #28
    5a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a2c:	mov	r0, #0
    5a30:	cmp	r8, #44	; 0x2c
    5a34:	movwhi	r0, #1
    5a38:	sub	sp, fp, #28
    5a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a40:	mov	r0, #2
    5a44:	sub	sp, fp, #28
    5a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005a4c <EV5@@Base>:
    5a4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5a50:	add	fp, sp, #24
    5a54:	sub	sp, sp, #8
    5a58:	mov	r4, r1
    5a5c:	mov	r8, r0
    5a60:	mov	r0, #0
    5a64:	str	r0, [r1, #64]	; 0x40
    5a68:	movw	r1, #2946	; 0xb82
    5a6c:	add	r6, r4, r1
    5a70:	movw	r1, #2822	; 0xb06
    5a74:	ldrh	r1, [r4, r1]
    5a78:	sub	r7, r1, #122	; 0x7a
    5a7c:	b	5a90 <EV5@@Base+0x44>
    5a80:	add	r0, r5, #1
    5a84:	str	r0, [r4, #64]	; 0x40
    5a88:	cmp	r0, #182	; 0xb6
    5a8c:	bge	5af8 <EV5@@Base+0xac>
    5a90:	add	r1, r0, #1
    5a94:	lsl	r1, r1, #3
    5a98:	cmp	r1, r7
    5a9c:	bgt	5aec <EV5@@Base+0xa0>
    5aa0:	lsl	r0, r0, #3
    5aa4:	add	r1, r0, #18
    5aa8:	stm	sp, {r1, r4}
    5aac:	add	r0, r4, r0
    5ab0:	add	r1, r0, #68	; 0x44
    5ab4:	mov	r0, r6
    5ab8:	mov	r2, r8
    5abc:	mov	r3, #8
    5ac0:	bl	5e00 <HV@@Base+0x2fc>
    5ac4:	ldr	r5, [r4, #64]	; 0x40
    5ac8:	cmp	r5, #3
    5acc:	blt	5a80 <EV5@@Base+0x34>
    5ad0:	mov	r0, r4
    5ad4:	bl	5ea0 <HV@@Base+0x39c>
    5ad8:	cmp	r0, #0
    5adc:	beq	5a80 <EV5@@Base+0x34>
    5ae0:	mov	r0, #10
    5ae4:	sub	sp, fp, #24
    5ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5aec:	mov	r0, #1
    5af0:	sub	sp, fp, #24
    5af4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5af8:	mov	r0, #2
    5afc:	sub	sp, fp, #24
    5b00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00005b04 <HV@@Base>:
    5b04:	push	{r4, r5, r6, r7, fp, lr}
    5b08:	add	fp, sp, #16
    5b0c:	sub	sp, sp, #88	; 0x58
    5b10:	mov	r6, r1
    5b14:	mov	r5, r0
    5b18:	mov	r0, #0
    5b1c:	str	r0, [r1, #40]	; 0x28
    5b20:	movw	r1, #2822	; 0xb06
    5b24:	ldrh	r1, [r6, r1]
    5b28:	lsr	r1, r1, #1
    5b2c:	cmp	r1, #180	; 0xb4
    5b30:	bhi	5b40 <HV@@Base+0x3c>
    5b34:	str	r0, [r6, #64]	; 0x40
    5b38:	mov	r4, #1
    5b3c:	b	5c50 <HV@@Base+0x14c>
    5b40:	movw	r0, #2946	; 0xb82
    5b44:	add	r7, r6, r0
    5b48:	ldrb	r0, [r6, #18]
    5b4c:	mov	r4, #2
    5b50:	cmp	r0, #7
    5b54:	beq	5bb4 <HV@@Base+0xb0>
    5b58:	cmp	r0, #6
    5b5c:	beq	5bf0 <HV@@Base+0xec>
    5b60:	cmp	r0, #5
    5b64:	bne	5c50 <HV@@Base+0x14c>
    5b68:	add	r1, sp, #8
    5b6c:	mov	r0, r7
    5b70:	mov	r2, #80	; 0x50
    5b74:	bl	6080 <HV@@Base+0x57c>
    5b78:	cmp	r0, #0
    5b7c:	beq	5c4c <HV@@Base+0x148>
    5b80:	mov	r0, #10
    5b84:	str	r0, [r6, #64]	; 0x40
    5b88:	mov	r0, r6
    5b8c:	mov	r1, #7
    5b90:	mov	r2, #1
    5b94:	bl	4648 <btbb_packet_set_flag@plt>
    5b98:	ldr	r0, [r6, #64]	; 0x40
    5b9c:	mov	r1, #18
    5ba0:	stm	sp, {r1, r6}
    5ba4:	add	r1, r6, #68	; 0x44
    5ba8:	lsl	r3, r0, #3
    5bac:	add	r0, sp, #8
    5bb0:	b	5be4 <HV@@Base+0xe0>
    5bb4:	mov	r0, #30
    5bb8:	str	r0, [r6, #64]	; 0x40
    5bbc:	mov	r0, r6
    5bc0:	mov	r1, #7
    5bc4:	mov	r2, #1
    5bc8:	bl	4648 <btbb_packet_set_flag@plt>
    5bcc:	ldr	r0, [r6, #64]	; 0x40
    5bd0:	mov	r1, #18
    5bd4:	stm	sp, {r1, r6}
    5bd8:	add	r1, r6, #68	; 0x44
    5bdc:	lsl	r3, r0, #3
    5be0:	mov	r0, r7
    5be4:	mov	r2, r5
    5be8:	bl	5e00 <HV@@Base+0x2fc>
    5bec:	b	5c50 <HV@@Base+0x14c>
    5bf0:	mov	r0, r7
    5bf4:	mov	r1, #160	; 0xa0
    5bf8:	bl	5c5c <HV@@Base+0x158>
    5bfc:	cmp	r0, #0
    5c00:	beq	5c4c <HV@@Base+0x148>
    5c04:	mov	r7, r0
    5c08:	mov	r0, #20
    5c0c:	str	r0, [r6, #64]	; 0x40
    5c10:	mov	r0, r6
    5c14:	mov	r1, #7
    5c18:	mov	r2, #1
    5c1c:	bl	4648 <btbb_packet_set_flag@plt>
    5c20:	ldr	r0, [r6, #64]	; 0x40
    5c24:	mov	r1, #18
    5c28:	stm	sp, {r1, r6}
    5c2c:	add	r1, r6, #68	; 0x44
    5c30:	lsl	r3, r0, #3
    5c34:	mov	r0, r7
    5c38:	mov	r2, r5
    5c3c:	bl	5e00 <HV@@Base+0x2fc>
    5c40:	mov	r0, r7
    5c44:	bl	4660 <free@plt>
    5c48:	b	5c50 <HV@@Base+0x14c>
    5c4c:	mov	r4, #0
    5c50:	mov	r0, r4
    5c54:	sub	sp, fp, #16
    5c58:	pop	{r4, r5, r6, r7, fp, pc}
    5c5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    5c60:	add	fp, sp, #24
    5c64:	mov	r8, r1
    5c68:	mov	r5, r0
    5c6c:	movw	r0, #26215	; 0x6667
    5c70:	movt	r0, #26214	; 0x6666
    5c74:	smmul	r0, r1, r0
    5c78:	lsr	r1, r0, #2
    5c7c:	add	r0, r1, r0, lsr #31
    5c80:	add	r0, r0, r0, lsl #2
    5c84:	sub	r0, r8, r0, lsl #1
    5c88:	uxtb	r0, r0
    5c8c:	sub	r1, r8, r0
    5c90:	cmp	r0, #0
    5c94:	addne	r8, r1, #10
    5c98:	mov	r0, r8
    5c9c:	bl	47d4 <malloc@plt>
    5ca0:	mov	r9, r0
    5ca4:	cmp	r8, #1
    5ca8:	blt	5de4 <HV@@Base+0x2e0>
    5cac:	mov	r6, #0
    5cb0:	b	5cd4 <HV@@Base+0x1d0>
    5cb4:	mov	r0, r6
    5cb8:	ldrb	r1, [r9, r0]
    5cbc:	eor	r1, r1, #1
    5cc0:	strb	r1, [r9, r0]
    5cc4:	add	r5, r5, #15
    5cc8:	add	r6, r6, #10
    5ccc:	cmp	r6, r8
    5cd0:	bge	5de4 <HV@@Base+0x2e0>
    5cd4:	vld1.8	{d16}, [r5]
    5cd8:	add	r0, r9, r6
    5cdc:	ldrh	r1, [r5, #8]
    5ce0:	strh	r1, [r0, #8]
    5ce4:	vst1.8	{d16}, [r0]
    5ce8:	mov	r0, r5
    5cec:	mov	r1, #10
    5cf0:	bl	61b0 <try_clock@@Base+0xa4>
    5cf4:	mov	r7, r0
    5cf8:	add	r0, r5, #10
    5cfc:	mov	r1, #5
    5d00:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    5d04:	mov	r4, r0
    5d08:	mov	r0, r7
    5d0c:	bl	6bc0 <clock_from_fhs@@Base+0x4bc>
    5d10:	eor	r0, r4, r0, lsr #10
    5d14:	sub	r1, r0, #1
    5d18:	tst	r0, r1
    5d1c:	beq	5cc4 <HV@@Base+0x1c0>
    5d20:	sub	r0, r0, #7
    5d24:	cmp	r0, #24
    5d28:	bhi	5dec <HV@@Base+0x2e8>
    5d2c:	add	r1, pc, #4
    5d30:	ldr	r0, [r1, r0, lsl #2]
    5d34:	add	pc, r1, r0
    5d38:	andeq	r0, r0, r4, rrx
    5d3c:	strheq	r0, [r0], -r4
    5d40:	strheq	r0, [r0], -r4
    5d44:	strheq	r0, [r0], -r4
    5d48:			; <UNDEFINED> instruction: 0xffffff7c
    5d4c:	strheq	r0, [r0], -r4
    5d50:	andeq	r0, r0, ip, rrx
    5d54:	andeq	r0, r0, r4, ror r0
    5d58:	strheq	r0, [r0], -r4
    5d5c:	strheq	r0, [r0], -r4
    5d60:	strheq	r0, [r0], -r4
    5d64:	strheq	r0, [r0], -r4
    5d68:	andeq	r0, r0, ip, ror r0
    5d6c:	strheq	r0, [r0], -r4
    5d70:	andeq	r0, r0, r4, lsl #1
    5d74:	andeq	r0, r0, ip, lsl #1
    5d78:	strheq	r0, [r0], -r4
    5d7c:	strheq	r0, [r0], -r4
    5d80:	strheq	r0, [r0], -r4
    5d84:	muleq	r0, r4, r0
    5d88:	strheq	r0, [r0], -r4
    5d8c:	muleq	r0, ip, r0
    5d90:	strheq	r0, [r0], -r4
    5d94:	strheq	r0, [r0], -r4
    5d98:	andeq	r0, r0, r4, lsr #1
    5d9c:	add	r0, r6, #2
    5da0:	b	5cb8 <HV@@Base+0x1b4>
    5da4:	add	r0, r6, #6
    5da8:	b	5cb8 <HV@@Base+0x1b4>
    5dac:	add	r0, r6, #3
    5db0:	b	5cb8 <HV@@Base+0x1b4>
    5db4:	add	r0, r6, #5
    5db8:	b	5cb8 <HV@@Base+0x1b4>
    5dbc:	add	r0, r6, #9
    5dc0:	b	5cb8 <HV@@Base+0x1b4>
    5dc4:	orr	r0, r6, #1
    5dc8:	b	5cb8 <HV@@Base+0x1b4>
    5dcc:	add	r0, r6, #7
    5dd0:	b	5cb8 <HV@@Base+0x1b4>
    5dd4:	add	r0, r6, #4
    5dd8:	b	5cb8 <HV@@Base+0x1b4>
    5ddc:	add	r0, r6, #8
    5de0:	b	5cb8 <HV@@Base+0x1b4>
    5de4:	mov	r0, r9
    5de8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    5dec:	mov	r0, r9
    5df0:	bl	4660 <free@plt>
    5df4:	mov	r9, #0
    5df8:	mov	r0, r9
    5dfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    5e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e04:	add	fp, sp, #28
    5e08:	sub	sp, sp, #4
    5e0c:	cmp	r3, #1
    5e10:	blt	5e90 <HV@@Base+0x38c>
    5e14:	mov	r4, r3
    5e18:	mov	r5, r1
    5e1c:	mov	r6, r0
    5e20:	ldr	r8, [fp, #12]
    5e24:	ldr	r0, [fp, #8]
    5e28:	and	r1, r2, #63	; 0x3f
    5e2c:	ldr	r2, [pc, #100]	; 5e98 <HV@@Base+0x394>
    5e30:	add	r2, pc, r2
    5e34:	ldrb	r1, [r2, r1]
    5e38:	add	r0, r1, r0
    5e3c:	movw	sl, #1033	; 0x409
    5e40:	movt	sl, #33026	; 0x8102
    5e44:	ldr	r9, [pc, #80]	; 5e9c <HV@@Base+0x398>
    5e48:	add	r9, pc, r9
    5e4c:	smmla	r1, r0, sl, r0
    5e50:	asr	r2, r1, #6
    5e54:	add	r1, r2, r1, lsr #31
    5e58:	rsb	r1, r1, r1, lsl #7
    5e5c:	sub	r7, r0, r1
    5e60:	mov	r0, r8
    5e64:	mov	r1, #0
    5e68:	bl	469c <btbb_packet_get_flag@plt>
    5e6c:	ldrb	r1, [r6]
    5e70:	cmp	r0, #0
    5e74:	ldrbne	r0, [r9, r7]
    5e78:	eorne	r1, r0, r1
    5e7c:	strb	r1, [r5], #1
    5e80:	add	r6, r6, #1
    5e84:	subs	r4, r4, #1
    5e88:	add	r0, r7, #1
    5e8c:	bne	5e4c <HV@@Base+0x348>
    5e90:	sub	sp, fp, #28
    5e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e98:	strdeq	r8, [r0], -lr
    5e9c:	andeq	r8, r0, ip, ror #6
    5ea0:	push	{r4, r5, r6, sl, fp, lr}
    5ea4:	add	fp, sp, #16
    5ea8:	ldr	r1, [r0, #64]	; 0x40
    5eac:	mvn	r2, #15
    5eb0:	add	r4, r2, r1, lsl #3
    5eb4:	ldrb	r2, [r0, #9]
    5eb8:	add	r5, r0, #68	; 0x44
    5ebc:	mov	r0, r5
    5ec0:	mov	r1, r4
    5ec4:	bl	6c04 <clock_from_fhs@@Base+0x500>
    5ec8:	mov	r6, r0
    5ecc:	add	r0, r5, r4
    5ed0:	mov	r1, #16
    5ed4:	bl	61b0 <try_clock@@Base+0xa4>
    5ed8:	sub	r0, r6, r0
    5edc:	clz	r0, r0
    5ee0:	lsr	r0, r0, #5
    5ee4:	pop	{r4, r5, r6, sl, fp, pc}
    5ee8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5eec:	add	fp, sp, #24
    5ef0:	sub	sp, sp, #8
    5ef4:	mov	r4, r2
    5ef8:	mov	r5, r1
    5efc:	ldr	r7, [fp, #12]
    5f00:	ldr	r1, [fp, #8]
    5f04:	mov	r6, #0
    5f08:	cmp	r2, #2
    5f0c:	bne	5f64 <HV@@Base+0x460>
    5f10:	cmp	r3, #16
    5f14:	blt	6070 <HV@@Base+0x56c>
    5f18:	cmp	r1, #0
    5f1c:	beq	5fb8 <HV@@Base+0x4b4>
    5f20:	cmp	r3, #30
    5f24:	blt	6070 <HV@@Base+0x56c>
    5f28:	mov	r1, #16
    5f2c:	bl	5c5c <HV@@Base+0x158>
    5f30:	cmp	r0, #0
    5f34:	beq	6070 <HV@@Base+0x56c>
    5f38:	mov	r8, r0
    5f3c:	mov	r0, #18
    5f40:	stm	sp, {r0, r7}
    5f44:	add	r1, r7, #44	; 0x2c
    5f48:	mov	r0, r8
    5f4c:	mov	r2, r5
    5f50:	mov	r3, #16
    5f54:	bl	5e00 <HV@@Base+0x2fc>
    5f58:	mov	r0, r8
    5f5c:	bl	4660 <free@plt>
    5f60:	b	5fd0 <HV@@Base+0x4cc>
    5f64:	cmp	r3, #8
    5f68:	blt	6070 <HV@@Base+0x56c>
    5f6c:	cmp	r1, #0
    5f70:	beq	5fe4 <HV@@Base+0x4e0>
    5f74:	cmp	r3, #15
    5f78:	blt	6070 <HV@@Base+0x56c>
    5f7c:	mov	r1, #8
    5f80:	bl	5c5c <HV@@Base+0x158>
    5f84:	cmp	r0, #0
    5f88:	beq	6070 <HV@@Base+0x56c>
    5f8c:	mov	r8, r0
    5f90:	mov	r0, #18
    5f94:	stm	sp, {r0, r7}
    5f98:	add	r1, r7, #44	; 0x2c
    5f9c:	mov	r0, r8
    5fa0:	mov	r2, r5
    5fa4:	mov	r3, #8
    5fa8:	bl	5e00 <HV@@Base+0x2fc>
    5fac:	mov	r0, r8
    5fb0:	bl	4660 <free@plt>
    5fb4:	b	5ffc <HV@@Base+0x4f8>
    5fb8:	mov	r1, #18
    5fbc:	stm	sp, {r1, r7}
    5fc0:	add	r1, r7, #44	; 0x2c
    5fc4:	mov	r2, r5
    5fc8:	mov	r3, #16
    5fcc:	bl	5e00 <HV@@Base+0x2fc>
    5fd0:	add	r0, r7, #47	; 0x2f
    5fd4:	mov	r1, #10
    5fd8:	bl	61b0 <try_clock@@Base+0xa4>
    5fdc:	add	r0, r0, #4
    5fe0:	b	600c <HV@@Base+0x508>
    5fe4:	mov	r1, #18
    5fe8:	stm	sp, {r1, r7}
    5fec:	add	r1, r7, #44	; 0x2c
    5ff0:	mov	r2, r5
    5ff4:	mov	r3, #8
    5ff8:	bl	5e00 <HV@@Base+0x2fc>
    5ffc:	add	r0, r7, #47	; 0x2f
    6000:	mov	r1, #5
    6004:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    6008:	add	r0, r0, #3
    600c:	str	r0, [r7, #64]	; 0x40
    6010:	ldrb	r0, [r7, #18]
    6014:	sub	r1, r0, #3
    6018:	uxtb	r2, r1
    601c:	mov	r0, #0
    6020:	cmp	r2, #12
    6024:	bhi	6038 <HV@@Base+0x534>
    6028:	sxtb	r0, r1
    602c:	ldr	r1, [pc, #72]	; 607c <HV@@Base+0x578>
    6030:	add	r1, pc, r1
    6034:	ldr	r0, [r1, r0, lsl #2]
    6038:	ldr	r1, [r7, #64]	; 0x40
    603c:	cmp	r1, r0
    6040:	movlt	r0, r1
    6044:	str	r0, [r7, #64]	; 0x40
    6048:	add	r0, r7, #44	; 0x2c
    604c:	mov	r1, #2
    6050:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    6054:	strb	r0, [r7, #60]	; 0x3c
    6058:	add	r0, r7, #46	; 0x2e
    605c:	mov	r6, #1
    6060:	mov	r1, #1
    6064:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    6068:	strb	r0, [r7, #61]	; 0x3d
    606c:	str	r4, [r7, #40]	; 0x28
    6070:	mov	r0, r6
    6074:	sub	sp, fp, #24
    6078:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    607c:	andeq	r8, r0, r4, lsl #4
    6080:	push	{r4, r5, r6, r7, fp, lr}
    6084:	add	fp, sp, #16
    6088:	mov	ip, r0
    608c:	mov	r0, #0
    6090:	cmp	r2, #1
    6094:	mov	lr, #0
    6098:	blt	60f8 <HV@@Base+0x5f4>
    609c:	add	r3, ip, #1
    60a0:	mov	lr, #0
    60a4:	mov	ip, r2
    60a8:	ldrb	r4, [r3, #-1]
    60ac:	ldrb	r5, [r3]
    60b0:	ldrb	r6, [r3, #1]
    60b4:	orr	r7, r6, r4
    60b8:	and	r5, r7, r5
    60bc:	and	r4, r6, r4
    60c0:	orr	r4, r5, r4
    60c4:	strb	r4, [r1], #1
    60c8:	ldrb	r4, [r3, #-1]
    60cc:	ldrb	r5, [r3]
    60d0:	ldrb	r6, [r3, #1]
    60d4:	eor	r7, r5, r4
    60d8:	eor	r5, r6, r5
    60dc:	orr	r5, r5, r7
    60e0:	eor	r4, r6, r4
    60e4:	orr	r4, r5, r4
    60e8:	uxtab	lr, lr, r4
    60ec:	add	r3, r3, #3
    60f0:	subs	ip, ip, #1
    60f4:	bne	60a8 <HV@@Base+0x5a4>
    60f8:	asr	r1, r2, #31
    60fc:	add	r1, r2, r1, lsr #30
    6100:	cmp	lr, r1, asr #2
    6104:	movwlt	r0, #1
    6108:	pop	{r4, r5, r6, r7, fp, pc}

0000610c <try_clock@@Base>:
    610c:	push	{r4, r5, r6, sl, fp, lr}
    6110:	add	fp, sp, #16
    6114:	sub	sp, sp, #48	; 0x30
    6118:	mov	r4, r1
    611c:	mov	r5, r0
    6120:	movw	r0, #2892	; 0xb4c
    6124:	add	r0, r1, r0
    6128:	add	r1, sp, #30
    612c:	mov	r2, #18
    6130:	bl	6080 <HV@@Base+0x57c>
    6134:	cmp	r0, #0
    6138:	beq	61a0 <try_clock@@Base+0x94>
    613c:	mov	r0, #0
    6140:	stm	sp, {r0, r4}
    6144:	add	r0, sp, #30
    6148:	add	r6, sp, #12
    614c:	mov	r1, r6
    6150:	mov	r2, r5
    6154:	mov	r3, #18
    6158:	bl	5e00 <HV@@Base+0x2fc>
    615c:	mov	r0, r6
    6160:	mov	r1, #10
    6164:	bl	61b0 <try_clock@@Base+0xa4>
    6168:	mov	r5, r0
    616c:	add	r0, r6, #10
    6170:	mov	r1, #8
    6174:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    6178:	mov	r1, r0
    617c:	mov	r0, r5
    6180:	bl	61dc <try_clock@@Base+0xd0>
    6184:	mov	r5, r0
    6188:	strb	r0, [r4, #9]
    618c:	add	r0, r6, #3
    6190:	mov	r1, #4
    6194:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    6198:	strb	r0, [r4, #18]
    619c:	b	61a4 <try_clock@@Base+0x98>
    61a0:	mov	r5, #0
    61a4:	mov	r0, r5
    61a8:	sub	sp, fp, #16
    61ac:	pop	{r4, r5, r6, sl, fp, pc}
    61b0:	mov	ip, #0
    61b4:	cmp	r1, #1
    61b8:	blt	61d4 <try_clock@@Base+0xc8>
    61bc:	mov	r3, #0
    61c0:	ldrb	r2, [r0, r3]
    61c4:	orr	ip, ip, r2, lsl r3
    61c8:	add	r3, r3, #1
    61cc:	cmp	r1, r3
    61d0:	bne	61c0 <try_clock@@Base+0xb4>
    61d4:	uxth	r0, ip
    61d8:	bx	lr
    61dc:	push	{fp, lr}
    61e0:	mov	fp, sp
    61e4:	mov	r2, #9
    61e8:	mov	ip, #1
    61ec:	and	lr, ip, r0, lsr r2
    61f0:	sxtb	r3, r1
    61f4:	cmn	r3, #1
    61f8:	eorle	r1, r1, #101	; 0x65
    61fc:	uxtb	r1, r1
    6200:	eor	r3, lr, r1, lsr #7
    6204:	orr	r1, r3, r1, lsl #1
    6208:	sub	r2, r2, #1
    620c:	cmn	r2, #1
    6210:	bne	61ec <try_clock@@Base+0xe0>
    6214:	uxtb	r0, r1
    6218:	pop	{fp, lr}
    621c:	b	6c68 <clock_from_fhs@@Base+0x564>

00006220 <btbb_decode_header@@Base>:
    6220:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6224:	add	fp, sp, #24
    6228:	sub	sp, sp, #32
    622c:	mov	r4, r0
    6230:	mov	r1, #4
    6234:	bl	469c <btbb_packet_get_flag@plt>
    6238:	mov	r5, #0
    623c:	cmp	r0, #0
    6240:	beq	62f4 <btbb_decode_header@@Base+0xd4>
    6244:	movw	r0, #2892	; 0xb4c
    6248:	add	r0, r4, r0
    624c:	add	r1, sp, #14
    6250:	mov	r2, #18
    6254:	bl	6080 <HV@@Base+0x57c>
    6258:	cmp	r0, #0
    625c:	beq	62f4 <btbb_decode_header@@Base+0xd4>
    6260:	ldr	r2, [r4, #2816]	; 0xb00
    6264:	mov	r5, #0
    6268:	str	r5, [sp]
    626c:	str	r4, [sp, #4]
    6270:	add	r6, r4, #22
    6274:	add	r0, sp, #14
    6278:	mov	r1, r6
    627c:	mov	r3, #18
    6280:	bl	5e00 <HV@@Base+0x2fc>
    6284:	mov	r0, r6
    6288:	mov	r1, #10
    628c:	bl	61b0 <try_clock@@Base+0xa4>
    6290:	mov	r7, r0
    6294:	add	r0, r4, #32
    6298:	mov	r1, #8
    629c:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    62a0:	mov	r8, r0
    62a4:	mov	r0, r7
    62a8:	mov	r1, r8
    62ac:	bl	61dc <try_clock@@Base+0xd0>
    62b0:	ldrb	r1, [r4, #9]
    62b4:	cmp	r0, r1
    62b8:	bne	62f4 <btbb_decode_header@@Base+0xd4>
    62bc:	mov	r0, r6
    62c0:	mov	r1, #3
    62c4:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    62c8:	strb	r0, [r4, #19]
    62cc:	add	r0, r4, #25
    62d0:	mov	r1, #4
    62d4:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    62d8:	strb	r0, [r4, #18]
    62dc:	add	r0, r4, #29
    62e0:	mov	r1, #3
    62e4:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    62e8:	strb	r8, [r4, #21]
    62ec:	strb	r0, [r4, #20]
    62f0:	mov	r5, #1
    62f4:	mov	r0, r5
    62f8:	sub	sp, fp, #24
    62fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00006300 <btbb_decode_payload@@Base>:
    6300:	push	{r4, r5, fp, lr}
    6304:	add	fp, sp, #8
    6308:	mov	r4, r0
    630c:	mov	r5, #0
    6310:	str	r5, [r0, #40]	; 0x28
    6314:	ldrb	r0, [r0, #18]
    6318:	cmp	r0, #15
    631c:	bhi	63f4 <btbb_decode_payload@@Base+0xf4>
    6320:	add	r1, pc, #4
    6324:	ldr	r0, [r1, r0, lsl #2]
    6328:	add	pc, r1, r0
    632c:	andeq	r0, r0, r0, rrx
    6330:	andeq	r0, r0, r0, rrx
    6334:	andeq	r0, r0, r0, ror r0
    6338:	andeq	r0, r0, r0, asr #32
    633c:	andeq	r0, r0, r0, asr r0
    6340:	muleq	r0, r8, r0
    6344:	muleq	r0, r8, r0
    6348:	andeq	r0, r0, r0, lsl #1
    634c:	andeq	r0, r0, r0, asr #32
    6350:	andeq	r0, r0, r0, asr r0
    6354:	andeq	r0, r0, r0, asr #32
    6358:	andeq	r0, r0, r0, asr r0
    635c:	strheq	r0, [r0], -r8
    6360:	andeq	r0, r0, r8, lsr #1
    6364:	andeq	r0, r0, r0, asr #32
    6368:	andeq	r0, r0, r0, asr r0
    636c:	ldr	r0, [r4, #2816]	; 0xb00
    6370:	mov	r1, r4
    6374:	bl	4714 <DM@plt>
    6378:	b	63f0 <btbb_decode_payload@@Base+0xf0>
    637c:	ldr	r0, [r4, #2816]	; 0xb00
    6380:	mov	r1, r4
    6384:	bl	4978 <DH@plt>
    6388:	b	63f0 <btbb_decode_payload@@Base+0xf0>
    638c:	mov	r0, #0
    6390:	str	r0, [r4, #64]	; 0x40
    6394:	mov	r5, #1
    6398:	b	63f4 <btbb_decode_payload@@Base+0xf4>
    639c:	ldr	r0, [r4, #2816]	; 0xb00
    63a0:	mov	r1, r4
    63a4:	bl	46a8 <fhs@plt>
    63a8:	b	63f0 <btbb_decode_payload@@Base+0xf0>
    63ac:	ldr	r0, [r4, #2816]	; 0xb00
    63b0:	mov	r1, r4
    63b4:	bl	4900 <EV3@plt>
    63b8:	mov	r5, r0
    63bc:	cmp	r0, #1
    63c0:	bgt	63f4 <btbb_decode_payload@@Base+0xf4>
    63c4:	ldr	r0, [r4, #2816]	; 0xb00
    63c8:	mov	r1, r4
    63cc:	bl	472c <HV@plt>
    63d0:	b	63f0 <btbb_decode_payload@@Base+0xf0>
    63d4:	ldr	r0, [r4, #2816]	; 0xb00
    63d8:	mov	r1, r4
    63dc:	bl	4960 <EV5@plt>
    63e0:	b	63f0 <btbb_decode_payload@@Base+0xf0>
    63e4:	ldr	r0, [r4, #2816]	; 0xb00
    63e8:	mov	r1, r4
    63ec:	bl	46b4 <EV4@plt>
    63f0:	mov	r5, r0
    63f4:	mov	r0, r4
    63f8:	mov	r1, #7
    63fc:	mov	r2, #1
    6400:	bl	4648 <btbb_packet_set_flag@plt>
    6404:	mov	r0, r5
    6408:	pop	{r4, r5, fp, pc}

0000640c <btbb_decode@@Base>:
    640c:	push	{r4, r5, fp, lr}
    6410:	add	fp, sp, #8
    6414:	mov	r5, r0
    6418:	mov	r4, #0
    641c:	mov	r1, #7
    6420:	mov	r2, #0
    6424:	bl	4648 <btbb_packet_set_flag@plt>
    6428:	mov	r0, r5
    642c:	bl	4858 <btbb_decode_header@plt>
    6430:	cmp	r0, #0
    6434:	beq	646c <btbb_decode@@Base+0x60>
    6438:	mov	r0, r5
    643c:	bl	499c <btbb_decode_payload@plt>
    6440:	mov	r4, r0
    6444:	cmp	r0, #1
    6448:	blt	646c <btbb_decode@@Base+0x60>
    644c:	ldr	r0, [r5, #2816]	; 0xb00
    6450:	and	r1, r0, #63	; 0x3f
    6454:	ldr	r0, [pc, #24]	; 6474 <btbb_decode@@Base+0x68>
    6458:	add	r0, pc, r0
    645c:	mov	r2, r4
    6460:	bl	4618 <printf@plt>
    6464:	mov	r0, r5
    6468:	bl	49c0 <btbb_print_packet@plt>
    646c:	mov	r0, r4
    6470:	pop	{r4, r5, fp, pc}
    6474:	andeq	r7, r0, r3, ror #28

00006478 <btbb_print_packet@@Base>:
    6478:	push	{r4, r5, r6, r7, fp, lr}
    647c:	add	fp, sp, #16
    6480:	mov	r4, r0
    6484:	mov	r1, #7
    6488:	bl	469c <btbb_packet_get_flag@plt>
    648c:	cmp	r0, #0
    6490:	beq	6568 <btbb_print_packet@@Base+0xf0>
    6494:	ldrb	r0, [r4, #18]
    6498:	ldr	r1, [pc, #204]	; 656c <btbb_print_packet@@Base+0xf4>
    649c:	add	r1, pc, r1
    64a0:	ldr	r1, [r1, r0, lsl #2]
    64a4:	ldr	r0, [pc, #196]	; 6570 <btbb_print_packet@@Base+0xf8>
    64a8:	add	r0, pc, r0
    64ac:	bl	4618 <printf@plt>
    64b0:	ldr	r0, [r4, #40]	; 0x28
    64b4:	cmp	r0, #1
    64b8:	blt	64fc <btbb_print_packet@@Base+0x84>
    64bc:	ldrb	r1, [r4, #19]
    64c0:	ldr	r0, [pc, #172]	; 6574 <btbb_print_packet@@Base+0xfc>
    64c4:	add	r0, pc, r0
    64c8:	bl	4618 <printf@plt>
    64cc:	ldrb	r1, [r4, #60]	; 0x3c
    64d0:	ldr	r0, [pc, #160]	; 6578 <btbb_print_packet@@Base+0x100>
    64d4:	add	r0, pc, r0
    64d8:	bl	4618 <printf@plt>
    64dc:	ldrb	r1, [r4, #61]	; 0x3d
    64e0:	ldr	r0, [pc, #148]	; 657c <btbb_print_packet@@Base+0x104>
    64e4:	add	r0, pc, r0
    64e8:	bl	4618 <printf@plt>
    64ec:	ldr	r1, [r4, #64]	; 0x40
    64f0:	ldr	r0, [pc, #136]	; 6580 <btbb_print_packet@@Base+0x108>
    64f4:	add	r0, pc, r0
    64f8:	bl	4618 <printf@plt>
    64fc:	ldr	r0, [r4, #64]	; 0x40
    6500:	cmp	r0, #0
    6504:	beq	6568 <btbb_print_packet@@Base+0xf0>
    6508:	ldr	r0, [pc, #116]	; 6584 <btbb_print_packet@@Base+0x10c>
    650c:	add	r0, pc, r0
    6510:	bl	4618 <printf@plt>
    6514:	ldr	r0, [r4, #64]	; 0x40
    6518:	cmp	r0, #1
    651c:	blt	655c <btbb_print_packet@@Base+0xe4>
    6520:	add	r5, r4, #68	; 0x44
    6524:	mov	r7, #0
    6528:	ldr	r6, [pc, #88]	; 6588 <btbb_print_packet@@Base+0x110>
    652c:	add	r6, pc, r6
    6530:	mov	r0, r5
    6534:	mov	r1, #8
    6538:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    653c:	mov	r1, r0
    6540:	mov	r0, r6
    6544:	bl	4618 <printf@plt>
    6548:	add	r5, r5, #8
    654c:	add	r7, r7, #1
    6550:	ldr	r0, [r4, #64]	; 0x40
    6554:	cmp	r7, r0
    6558:	blt	6530 <btbb_print_packet@@Base+0xb8>
    655c:	mov	r0, #10
    6560:	pop	{r4, r5, r6, r7, fp, lr}
    6564:	b	48e8 <putchar@plt>
    6568:	pop	{r4, r5, r6, r7, fp, pc}
    656c:	andeq	lr, r1, r0, lsr r9
    6570:	andeq	r7, r0, sp, lsr lr
    6574:	andeq	r7, r0, sp, lsr #28
    6578:	andeq	r7, r0, ip, lsr #28
    657c:	andeq	r7, r0, r8, lsr #28
    6580:	andeq	r7, r0, r4, lsr #28
    6584:	andeq	r8, r0, lr, asr r4
    6588:	andeq	r8, r0, r7, asr #13

0000658c <tun_format@@Base>:
    658c:	push	{r4, r5, r6, r7, fp, lr}
    6590:	add	fp, sp, #16
    6594:	mov	r5, r0
    6598:	ldr	r7, [r0, #64]	; 0x40
    659c:	add	r0, r7, #9
    65a0:	bl	47d4 <malloc@plt>
    65a4:	mov	r4, r0
    65a8:	ldr	r0, [r5, #2816]	; 0xb00
    65ac:	str	r0, [r4]
    65b0:	ldrb	r0, [r5, #8]
    65b4:	strb	r0, [r4, #4]
    65b8:	mov	r0, r5
    65bc:	mov	r1, #5
    65c0:	bl	469c <btbb_packet_get_flag@plt>
    65c4:	mov	r6, r0
    65c8:	mov	r0, r5
    65cc:	mov	r1, #1
    65d0:	bl	469c <btbb_packet_get_flag@plt>
    65d4:	orr	r0, r6, r0, lsl #1
    65d8:	strb	r0, [r4, #5]
    65dc:	add	r0, r5, #22
    65e0:	mov	r1, #7
    65e4:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    65e8:	strb	r0, [r4, #6]
    65ec:	add	r0, r5, #29
    65f0:	mov	r1, #3
    65f4:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    65f8:	strb	r0, [r4, #7]
    65fc:	add	r0, r5, #32
    6600:	mov	r1, #8
    6604:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    6608:	strb	r0, [r4, #8]
    660c:	cmp	r7, #1
    6610:	blt	6638 <tun_format@@Base+0xac>
    6614:	add	r5, r5, #68	; 0x44
    6618:	add	r6, r4, #9
    661c:	mov	r0, r5
    6620:	mov	r1, #8
    6624:	bl	4ebc <promiscuous_packet_search@@Base+0x164>
    6628:	strb	r0, [r6], #1
    662c:	add	r5, r5, #8
    6630:	subs	r7, r7, #1
    6634:	bne	661c <tun_format@@Base+0x90>
    6638:	mov	r0, r4
    663c:	pop	{r4, r5, r6, r7, fp, pc}

00006640 <btbb_header_present@@Base>:
    6640:	push	{r4, sl, fp, lr}
    6644:	add	fp, sp, #8
    6648:	movw	r1, #2822	; 0xb06
    664c:	ldrh	r2, [r0, r1]
    6650:	mov	r1, #0
    6654:	cmp	r2, #122	; 0x7a
    6658:	bcc	66d8 <btbb_header_present@@Base+0x98>
    665c:	ldrb	r1, [r0, #2887]	; 0xb47
    6660:	ldrb	ip, [r0, #2888]	; 0xb48
    6664:	ldrb	lr, [r0, #2889]	; 0xb49
    6668:	ldrb	r2, [r0, #2890]	; 0xb4a
    666c:	clz	r3, r1
    6670:	lsr	r3, r3, #5
    6674:	eor	r4, r2, r3
    6678:	eor	r3, ip, r3
    667c:	eor	r2, lr, r1
    6680:	uxtab	r2, r3, r2
    6684:	add	r2, r2, r4
    6688:	ldrb	r3, [r0, #2891]	; 0xb4b
    668c:	eor	r1, r3, r1
    6690:	uxtab	r2, r2, r1
    6694:	mov	r1, #0
    6698:	add	r3, r0, r1
    669c:	ldrb	ip, [r3, #2892]	; 0xb4c
    66a0:	ldrb	r4, [r3, #2893]	; 0xb4d
    66a4:	ldrb	r3, [r3, #2894]	; 0xb4e
    66a8:	eor	lr, r4, ip
    66ac:	eor	r4, r3, r4
    66b0:	orr	r4, r4, lr
    66b4:	eor	r3, r3, ip
    66b8:	orr	r3, r4, r3
    66bc:	uxtab	r2, r2, r3
    66c0:	add	r1, r1, #3
    66c4:	cmp	r1, #54	; 0x36
    66c8:	bcc	6698 <btbb_header_present@@Base+0x58>
    66cc:	mov	r1, #0
    66d0:	cmp	r2, #5
    66d4:	movwlt	r1, #1
    66d8:	mov	r0, r1
    66dc:	pop	{r4, sl, fp, pc}

000066e0 <lap_from_fhs@@Base>:
    66e0:	add	r0, r0, #102	; 0x66
    66e4:	mov	r1, #24
    66e8:	b	539c <btbb_packet_get_header_packed@@Base+0xc>

000066ec <uap_from_fhs@@Base>:
    66ec:	add	r0, r0, #132	; 0x84
    66f0:	mov	r1, #8
    66f4:	b	4ebc <promiscuous_packet_search@@Base+0x164>

000066f8 <nap_from_fhs@@Base>:
    66f8:	add	r0, r0, #140	; 0x8c
    66fc:	mov	r1, #16
    6700:	b	61b0 <try_clock@@Base+0xa4>

00006704 <clock_from_fhs@@Base>:
    6704:	add	r0, r0, #183	; 0xb7
    6708:	mov	r1, #26
    670c:	b	539c <btbb_packet_get_header_packed@@Base+0xc>
    6710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6714:	add	fp, sp, #28
    6718:	sub	sp, sp, #4
    671c:	cmp	r2, #57	; 0x39
    6720:	bgt	67b0 <clock_from_fhs@@Base+0xac>
    6724:	mov	r4, r2
    6728:	mov	r8, r1
    672c:	mov	r9, r0
    6730:	sub	r7, r3, #1
    6734:	mov	sl, #1
    6738:	b	6770 <clock_from_fhs@@Base+0x6c>
    673c:	movw	r0, #19995	; 0x4e1b
    6740:	movt	r0, #65377	; 0xff61
    6744:	eor	r0, r5, r0
    6748:	movw	r1, #29288	; 0x7268
    674c:	movt	r1, #52347	; 0xcc7b
    6750:	eor	r1, r6, r1
    6754:	bl	4f34 <promiscuous_packet_search@@Base+0x1dc>
    6758:	mov	r2, r5
    675c:	mov	r3, r6
    6760:	bl	67b8 <clock_from_fhs@@Base+0xb4>
    6764:	add	r4, r4, #1
    6768:	cmp	r4, #58	; 0x3a
    676c:	beq	67b0 <clock_from_fhs@@Base+0xac>
    6770:	lsl	r0, sl, r4
    6774:	subs	r1, r4, #32
    6778:	movwpl	r0, #0
    677c:	orr	r5, r0, r9
    6780:	rsb	r0, r4, #32
    6784:	lsr	r0, sl, r0
    6788:	lslpl	r0, sl, r1
    678c:	orr	r6, r0, r8
    6790:	cmp	r7, #0
    6794:	beq	673c <clock_from_fhs@@Base+0x38>
    6798:	add	r2, r4, #1
    679c:	mov	r0, r5
    67a0:	mov	r1, r6
    67a4:	mov	r3, r7
    67a8:	bl	6710 <clock_from_fhs@@Base+0xc>
    67ac:	b	6764 <clock_from_fhs@@Base+0x60>
    67b0:	sub	sp, fp, #28
    67b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67bc:	add	fp, sp, #28
    67c0:	sub	sp, sp, #4
    67c4:	mov	r8, r3
    67c8:	mov	r6, r2
    67cc:	mov	r7, r1
    67d0:	mov	r5, r0
    67d4:	mov	r0, #48	; 0x30
    67d8:	bl	47d4 <malloc@plt>
    67dc:	mov	r4, r0
    67e0:	mov	r1, #8
    67e4:	mov	r0, #0
    67e8:	str	r0, [r4, #24]
    67ec:	stm	r4, {r5, r7}
    67f0:	str	r6, [r4, #8]
    67f4:	str	r8, [r4, #12]
    67f8:	str	r4, [r4, #36]	; 0x24
    67fc:	str	r1, [r4, #40]	; 0x28
    6800:	add	r8, r4, #16
    6804:	ldr	r1, [pc, #932]	; 6bb0 <clock_from_fhs@@Base+0x4ac>
    6808:	ldr	r1, [pc, r1]
    680c:	cmp	r1, #0
    6810:	beq	6838 <clock_from_fhs@@Base+0x134>
    6814:	ldr	r0, [r1, #16]
    6818:	ldr	r1, [r0, #16]
    681c:	str	r4, [r1, #8]
    6820:	ldr	r1, [r0, #16]
    6824:	ldr	r2, [r0, #20]
    6828:	sub	r1, r1, r2
    682c:	str	r1, [r4, #20]
    6830:	str	r8, [r0, #16]
    6834:	b	68e4 <clock_from_fhs@@Base+0x1e0>
    6838:	ldr	r1, [pc, #884]	; 6bb4 <clock_from_fhs@@Base+0x4b0>
    683c:	add	r1, pc, r1
    6840:	str	r4, [r1]
    6844:	str	r0, [r4, #20]
    6848:	mov	r0, #44	; 0x2c
    684c:	bl	47d4 <malloc@plt>
    6850:	str	r0, [r4, #16]
    6854:	ldr	r5, [pc, #860]	; 6bb8 <clock_from_fhs@@Base+0x4b4>
    6858:	ldr	r5, [pc, r5]
    685c:	ldr	r0, [r5, #16]
    6860:	cmp	r0, #0
    6864:	beq	6ba8 <clock_from_fhs@@Base+0x4a4>
    6868:	vmov.i32	q8, #0	; 0x00000000
    686c:	mov	r1, #28
    6870:	add	r2, r0, #16
    6874:	vst1.32	{d16-d17}, [r0], r1
    6878:	vst1.32	{d16-d17}, [r0]
    687c:	vst1.32	{d16-d17}, [r2]
    6880:	mov	r6, r5
    6884:	ldr	r0, [r6, #16]!
    6888:	str	r6, [r0, #16]
    688c:	ldr	r0, [r6]
    6890:	mov	r1, #16
    6894:	str	r1, [r0, #20]
    6898:	mov	r1, #5
    689c:	mov	r2, #32
    68a0:	str	r2, [r0, #4]
    68a4:	str	r1, [r0, #8]
    68a8:	mov	r0, #384	; 0x180
    68ac:	bl	47d4 <malloc@plt>
    68b0:	ldr	r1, [r6]
    68b4:	str	r0, [r1]
    68b8:	ldr	r0, [r6]
    68bc:	ldr	r0, [r0]
    68c0:	cmp	r0, #0
    68c4:	beq	6ba8 <clock_from_fhs@@Base+0x4a4>
    68c8:	mov	r1, #0
    68cc:	mov	r2, #384	; 0x180
    68d0:	bl	48dc <memset@plt>
    68d4:	ldr	r0, [r5, #16]
    68d8:	movw	r1, #8161	; 0x1fe1
    68dc:	movt	r1, #40977	; 0xa011
    68e0:	str	r1, [r0, #40]	; 0x28
    68e4:	ldr	r0, [pc, #720]	; 6bbc <clock_from_fhs@@Base+0x4b8>
    68e8:	ldr	r0, [pc, r0]
    68ec:	ldr	r1, [r0, #16]
    68f0:	ldr	r2, [r1, #12]
    68f4:	add	r2, r2, #1
    68f8:	str	r2, [r1, #12]
    68fc:	ldr	r1, [r0, #16]
    6900:	str	r1, [r4, #16]
    6904:	ldr	r1, [r4, #4]
    6908:	movw	r2, #31161	; 0x79b9
    690c:	movt	r2, #40503	; 0x9e37
    6910:	add	r1, r1, r2
    6914:	ldrb	r2, [r4]
    6918:	ldrb	r3, [r4, #1]
    691c:	ldrb	r7, [r4, #2]
    6920:	ldrb	r6, [r4, #3]
    6924:	rsb	r6, r1, r6, lsl #24
    6928:	add	r7, r6, r7, lsl #16
    692c:	add	r3, r7, r3, lsl #8
    6930:	add	r2, r3, r2
    6934:	movw	r3, #47810	; 0xbac2
    6938:	movt	r3, #40777	; 0x9f49
    693c:	add	r2, r2, r3
    6940:	movw	r3, #63341	; 0xf76d
    6944:	movt	r3, #7
    6948:	eor	r2, r2, r3
    694c:	sub	r1, r1, r2
    6950:	movw	r3, #16649	; 0x4109
    6954:	movt	r3, #274	; 0x112
    6958:	add	r1, r1, r3
    695c:	eor	r1, r1, r2, lsl #8
    6960:	add	r3, r2, r1
    6964:	movw	r7, #48887	; 0xbef7
    6968:	movt	r7, #65261	; 0xfeed
    696c:	sub	r3, r7, r3
    6970:	eor	r3, r3, r1, lsr #13
    6974:	sub	r2, r2, r1
    6978:	sub	r2, r2, r3
    697c:	eor	r2, r2, r3, lsr #12
    6980:	sub	r1, r1, r3
    6984:	sub	r1, r1, r2
    6988:	eor	r1, r1, r2, lsl #16
    698c:	sub	r3, r3, r2
    6990:	sub	r3, r3, r1
    6994:	eor	r3, r3, r1, lsr #5
    6998:	sub	r2, r2, r1
    699c:	sub	r2, r2, r3
    69a0:	eor	r2, r2, r3, lsr #3
    69a4:	sub	r1, r1, r3
    69a8:	sub	r1, r1, r2
    69ac:	eor	r1, r1, r2, lsl #10
    69b0:	sub	r2, r3, r2
    69b4:	sub	r2, r2, r1
    69b8:	eor	r1, r2, r1, lsr #15
    69bc:	str	r1, [r4, #44]	; 0x2c
    69c0:	ldr	r2, [r0, #16]
    69c4:	ldm	r2, {r0, r2}
    69c8:	sub	r2, r2, #1
    69cc:	and	r1, r1, r2
    69d0:	add	r2, r1, r1, lsl #1
    69d4:	mov	r3, r0
    69d8:	ldr	r7, [r3, r2, lsl #2]!
    69dc:	ldr	r1, [r3, #4]
    69e0:	add	r1, r1, #1
    69e4:	str	r1, [r3, #4]
    69e8:	mov	r6, #0
    69ec:	str	r6, [r4, #28]
    69f0:	str	r7, [r4, #32]
    69f4:	ldr	r7, [r3]
    69f8:	cmp	r7, #0
    69fc:	strne	r8, [r7, #12]
    6a00:	str	r8, [r3]
    6a04:	add	r0, r0, r2, lsl #2
    6a08:	ldr	r0, [r0, #8]
    6a0c:	add	r0, r0, r0, lsl #2
    6a10:	mov	r2, #10
    6a14:	add	r0, r2, r0, lsl #1
    6a18:	cmp	r1, r0
    6a1c:	bcc	6b90 <clock_from_fhs@@Base+0x48c>
    6a20:	ldr	r6, [r8]
    6a24:	ldr	r0, [r6, #36]	; 0x24
    6a28:	cmp	r0, #1
    6a2c:	beq	6b90 <clock_from_fhs@@Base+0x48c>
    6a30:	ldr	r0, [r6, #4]
    6a34:	add	r0, r0, r0, lsl #1
    6a38:	lsl	r0, r0, #3
    6a3c:	bl	47d4 <malloc@plt>
    6a40:	cmp	r0, #0
    6a44:	beq	6ba8 <clock_from_fhs@@Base+0x4a4>
    6a48:	mov	r9, r0
    6a4c:	ldr	r0, [r6, #4]
    6a50:	add	r0, r0, r0, lsl #1
    6a54:	lsl	r2, r0, #3
    6a58:	mov	r4, #0
    6a5c:	mov	r0, r9
    6a60:	mov	r1, #0
    6a64:	bl	48dc <memset@plt>
    6a68:	str	r4, [r6, #28]
    6a6c:	ldm	r6, {r0, ip}
    6a70:	ldr	r1, [r6, #8]
    6a74:	ldr	r7, [r6, #12]
    6a78:	add	r1, r1, #1
    6a7c:	mov	r5, #1
    6a80:	mvn	r2, #0
    6a84:	add	r2, r2, ip, lsl #1
    6a88:	lsr	r3, r7, r1
    6a8c:	tst	r2, r7
    6a90:	addne	r3, r5, r7, lsr r1
    6a94:	str	r3, [r6, #24]
    6a98:	cmp	ip, #0
    6a9c:	beq	6b48 <clock_from_fhs@@Base+0x444>
    6aa0:	str	r8, [sp]
    6aa4:	ldr	lr, [r6]
    6aa8:	mov	sl, #0
    6aac:	b	6ac0 <clock_from_fhs@@Base+0x3bc>
    6ab0:	add	sl, sl, #1
    6ab4:	cmp	sl, ip
    6ab8:	mov	r0, lr
    6abc:	beq	6b40 <clock_from_fhs@@Base+0x43c>
    6ac0:	add	r1, sl, sl, lsl #1
    6ac4:	ldr	r0, [r0, r1, lsl #2]
    6ac8:	cmp	r0, #0
    6acc:	bne	6afc <clock_from_fhs@@Base+0x3f8>
    6ad0:	b	6ab0 <clock_from_fhs@@Base+0x3ac>
    6ad4:	str	r4, [r0, #12]
    6ad8:	ldr	r1, [r7]
    6adc:	str	r1, [r0, #16]
    6ae0:	ldr	r1, [r7]
    6ae4:	cmp	r1, #0
    6ae8:	strne	r0, [r1, #12]
    6aec:	str	r0, [r7]
    6af0:	cmp	r5, #0
    6af4:	mov	r0, r5
    6af8:	beq	6ab0 <clock_from_fhs@@Base+0x3ac>
    6afc:	ldr	r5, [r0, #16]
    6b00:	ldr	r1, [r0, #28]
    6b04:	and	r1, r1, r2
    6b08:	add	r1, r1, r1, lsl #1
    6b0c:	add	r7, r9, r1, lsl #2
    6b10:	ldr	r1, [r7, #4]
    6b14:	add	r1, r1, #1
    6b18:	str	r1, [r7, #4]
    6b1c:	cmp	r1, r3
    6b20:	bls	6ad4 <clock_from_fhs@@Base+0x3d0>
    6b24:	ldr	r8, [r6, #28]
    6b28:	add	r4, r8, #1
    6b2c:	str	r4, [r6, #28]
    6b30:	mov	r4, #0
    6b34:	udiv	r1, r1, r3
    6b38:	str	r1, [r7, #8]
    6b3c:	b	6ad4 <clock_from_fhs@@Base+0x3d0>
    6b40:	mov	r0, lr
    6b44:	ldr	r8, [sp]
    6b48:	bl	4660 <free@plt>
    6b4c:	ldr	r0, [r8]
    6b50:	ldmib	r0, {r1, r2}
    6b54:	lsl	r1, r1, #1
    6b58:	add	r2, r2, #1
    6b5c:	stmib	r0, {r1, r2}
    6b60:	ldr	r1, [r8]
    6b64:	str	r9, [r1]
    6b68:	ldr	r1, [r0, #12]
    6b6c:	ldr	r2, [r0, #28]
    6b70:	cmp	r2, r1, lsr #1
    6b74:	bls	6b98 <clock_from_fhs@@Base+0x494>
    6b78:	ldr	r1, [r0, #32]
    6b7c:	add	r1, r1, #1
    6b80:	str	r1, [r0, #32]
    6b84:	cmp	r1, #2
    6b88:	movcs	r1, #1
    6b8c:	strcs	r1, [r0, #36]	; 0x24
    6b90:	sub	sp, fp, #28
    6b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b98:	mov	r1, #0
    6b9c:	str	r1, [r0, #32]
    6ba0:	sub	sp, fp, #28
    6ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ba8:	mvn	r0, #0
    6bac:	bl	4828 <exit@plt>
    6bb0:	muleq	r1, r8, r9
    6bb4:	andeq	pc, r1, r4, ror #18
    6bb8:	andeq	pc, r1, r8, asr #18
    6bbc:			; <UNDEFINED> instruction: 0x0001f8b8
    6bc0:	push	{fp, lr}
    6bc4:	mov	fp, sp
    6bc8:	mov	lr, #0
    6bcc:	ldr	r2, [pc, #44]	; 6c00 <clock_from_fhs@@Base+0x4fc>
    6bd0:	add	r2, pc, r2
    6bd4:	mov	ip, #1
    6bd8:	mov	r3, #0
    6bdc:	tst	r0, ip, lsl r3
    6be0:	ldrhne	r1, [r2]
    6be4:	eorne	lr, r1, lr
    6be8:	add	r2, r2, #2
    6bec:	add	r3, r3, #1
    6bf0:	cmp	r3, #10
    6bf4:	bne	6bdc <clock_from_fhs@@Base+0x4d8>
    6bf8:	uxth	r0, lr
    6bfc:	pop	{fp, pc}
    6c00:	ldrdeq	r7, [r0], -r0
    6c04:	push	{r4, r5, fp, lr}
    6c08:	add	fp, sp, #8
    6c0c:	mov	r4, r1
    6c10:	mov	r5, r0
    6c14:	uxtb	r0, r2
    6c18:	bl	6c68 <clock_from_fhs@@Base+0x564>
    6c1c:	lsl	r0, r0, #8
    6c20:	cmp	r4, #1
    6c24:	blt	6c60 <clock_from_fhs@@Base+0x55c>
    6c28:	mov	r2, #0
    6c2c:	mov	r1, #0
    6c30:	ldrb	r2, [r5, r2]
    6c34:	eor	r2, r0, r2
    6c38:	lsl	r3, r2, #15
    6c3c:	uxth	r0, r0
    6c40:	orr	r0, r3, r0, lsr #1
    6c44:	and	r2, r2, #1
    6c48:	eor	r0, r0, r2, lsl #10
    6c4c:	eor	r0, r0, r2, lsl #3
    6c50:	add	r1, r1, #1
    6c54:	uxth	r2, r1
    6c58:	cmp	r2, r4
    6c5c:	blt	6c30 <clock_from_fhs@@Base+0x52c>
    6c60:	uxth	r0, r0
    6c64:	pop	{r4, r5, fp, pc}
    6c68:	mov	r1, #2
    6c6c:	and	r1, r1, r0, lsr #5
    6c70:	lsl	r2, r0, #7
    6c74:	orr	r2, r2, r0, lsr #7
    6c78:	orr	r1, r2, r1
    6c7c:	mov	r2, #4
    6c80:	and	r2, r2, r0, lsr #3
    6c84:	orr	r1, r1, r2
    6c88:	mov	r2, #8
    6c8c:	and	r2, r2, r0, lsr #1
    6c90:	orr	r1, r1, r2
    6c94:	and	r2, r0, #8
    6c98:	orr	r1, r1, r2, lsl #1
    6c9c:	and	r2, r0, #4
    6ca0:	orr	r1, r1, r2, lsl #3
    6ca4:	and	r0, r0, #2
    6ca8:	orr	r0, r1, r0, lsl #5
    6cac:	uxtb	r0, r0
    6cb0:	bx	lr

00006cb4 <count_bits@@Base>:
    6cb4:	mov	r1, #0
    6cb8:	cmp	r0, #0
    6cbc:	beq	6cd4 <count_bits@@Base+0x20>
    6cc0:	sub	r2, r0, #1
    6cc4:	and	r0, r2, r0
    6cc8:	add	r1, r1, #1
    6ccc:	tst	r0, #255	; 0xff
    6cd0:	bne	6cc0 <count_bits@@Base+0xc>
    6cd4:	mov	r0, r1
    6cd8:	bx	lr

00006cdc <btbb_piconet_new@@Base>:
    6cdc:	push	{r4, sl, fp, lr}
    6ce0:	add	fp, sp, #8
    6ce4:	mov	r4, #1
    6ce8:	mov	r0, #1
    6cec:	movw	r1, #5660	; 0x161c
    6cf0:	bl	45c4 <calloc@plt>
    6cf4:	str	r4, [r0]
    6cf8:	pop	{r4, sl, fp, pc}

00006cfc <btbb_piconet_ref@@Base>:
    6cfc:	ldr	r1, [r0]
    6d00:	add	r1, r1, #1
    6d04:	str	r1, [r0]
    6d08:	bx	lr

00006d0c <btbb_piconet_unref@@Base>:
    6d0c:	ldr	r1, [r0]
    6d10:	subs	r1, r1, #1
    6d14:	str	r1, [r0]
    6d18:	bxne	lr
    6d1c:	b	4660 <free@plt>

00006d20 <btbb_init_survey@@Base>:
    6d20:	ldr	r0, [pc, #16]	; 6d38 <btbb_init_survey@@Base+0x18>
    6d24:	add	r0, pc, r0
    6d28:	mov	r1, #1
    6d2c:	strb	r1, [r0]
    6d30:	mov	r0, #0
    6d34:	bx	lr
    6d38:	andeq	pc, r1, r4, lsl #9

00006d3c <btbb_init_piconet@@Base>:
    6d3c:	str	r1, [r0, #24]
    6d40:	mov	r1, #3
    6d44:	mov	r2, #1
    6d48:	b	6d4c <btbb_piconet_set_flag@@Base>

00006d4c <btbb_piconet_set_flag@@Base>:
    6d4c:	push	{fp, lr}
    6d50:	mov	fp, sp
    6d54:	ldr	lr, [r0, #4]
    6d58:	mov	ip, #1
    6d5c:	orr	r3, lr, ip, lsl r1
    6d60:	cmp	r2, #0
    6d64:	biceq	r3, lr, ip, lsl r1
    6d68:	str	r3, [r0, #4]
    6d6c:	pop	{fp, pc}

00006d70 <btbb_piconet_get_flag@@Base>:
    6d70:	ldr	r0, [r0, #4]
    6d74:	mov	r2, #1
    6d78:	and	r0, r0, r2, lsl r1
    6d7c:	cmp	r0, #0
    6d80:	movwne	r0, #1
    6d84:	bx	lr

00006d88 <btbb_piconet_set_uap@@Base>:
    6d88:	strb	r1, [r0, #28]
    6d8c:	mov	r1, #2
    6d90:	mov	r2, #1
    6d94:	b	6d4c <btbb_piconet_set_flag@@Base>

00006d98 <btbb_piconet_get_uap@@Base>:
    6d98:	ldrb	r0, [r0, #28]
    6d9c:	bx	lr

00006da0 <btbb_piconet_get_lap@@Base>:
    6da0:	ldr	r0, [r0, #24]
    6da4:	bx	lr

00006da8 <btbb_piconet_get_nap@@Base>:
    6da8:	ldrh	r0, [r0, #30]
    6dac:	bx	lr

00006db0 <btbb_piconet_get_bdaddr@@Base>:
    6db0:	ldrb	r1, [r0, #28]
    6db4:	ldr	r2, [r0, #24]
    6db8:	orr	r2, r2, r1, lsl #24
    6dbc:	ldrh	r1, [r0, #30]
    6dc0:	mov	r0, r2
    6dc4:	bx	lr

00006dc8 <btbb_piconet_get_clk_offset@@Base>:
    6dc8:	movw	r1, #5648	; 0x1610
    6dcc:	ldr	r0, [r0, r1]
    6dd0:	bx	lr

00006dd4 <btbb_piconet_set_clk_offset@@Base>:
    6dd4:	movw	r2, #5648	; 0x1610
    6dd8:	str	r1, [r0, r2]
    6ddc:	bx	lr

00006de0 <btbb_piconet_set_afh_map@@Base>:
    6de0:	push	{r4, r5, r6, sl, fp, lr}
    6de4:	add	fp, sp, #16
    6de8:	mov	r5, r1
    6dec:	mov	r4, r0
    6df0:	mov	r6, #0
    6df4:	strb	r6, [r0, #22]
    6df8:	ldrb	r0, [r5, -r6]
    6dfc:	sub	r1, r4, r6
    6e00:	strb	r0, [r1, #12]
    6e04:	bl	45f4 <count_bits@plt>
    6e08:	ldrb	r1, [r4, #22]
    6e0c:	add	r0, r1, r0
    6e10:	strb	r0, [r4, #22]
    6e14:	sub	r6, r6, #1
    6e18:	cmn	r6, #10
    6e1c:	bne	6df8 <btbb_piconet_set_afh_map@@Base+0x18>
    6e20:	mov	r0, r4
    6e24:	mov	r1, #2
    6e28:	bl	46fc <btbb_piconet_get_flag@plt>
    6e2c:	cmp	r0, #0
    6e30:	beq	6e40 <btbb_piconet_set_afh_map@@Base+0x60>
    6e34:	mov	r0, r4
    6e38:	pop	{r4, r5, r6, sl, fp, lr}
    6e3c:	b	6e44 <get_hop_pattern@@Base>
    6e40:	pop	{r4, r5, r6, sl, fp, pc}

00006e44 <get_hop_pattern@@Base>:
    6e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e48:	add	fp, sp, #28
    6e4c:	sub	sp, sp, #20
    6e50:	mov	r5, r0
    6e54:	mov	r1, #11
    6e58:	bl	46fc <btbb_piconet_get_flag@plt>
    6e5c:	ldrb	r1, [r5, #22]
    6e60:	orr	r6, r1, r0, lsl #7
    6e64:	ldr	r0, [r5, #24]
    6e68:	ldrb	r1, [r5, #28]
    6e6c:	str	r6, [sp, #12]
    6e70:	orr	r8, r0, r1, lsl #24
    6e74:	str	r8, [sp, #8]
    6e78:	movw	r7, #16653	; 0x410d
    6e7c:	movt	r7, #274	; 0x112
    6e80:	ldr	r0, [pc, #1264]	; 7378 <get_hop_pattern@@Base+0x534>
    6e84:	ldr	r0, [pc, r0]
    6e88:	cmp	r0, #0
    6e8c:	beq	6f90 <get_hop_pattern@@Base+0x14c>
    6e90:	ldrb	r1, [sp, #8]
    6e94:	ldrb	r2, [sp, #9]
    6e98:	ldrb	r3, [sp, #10]
    6e9c:	ldrb	r4, [sp, #11]
    6ea0:	add	r4, r7, r4, lsl #24
    6ea4:	add	r3, r4, r3, lsl #16
    6ea8:	add	r2, r3, r2, lsl #8
    6eac:	add	r1, r2, r1
    6eb0:	movw	r2, #63341	; 0xf76d
    6eb4:	movt	r2, #7
    6eb8:	eor	r1, r1, r2
    6ebc:	movw	r2, #47814	; 0xbac6
    6ec0:	movt	r2, #40777	; 0x9f49
    6ec4:	sub	r2, r2, r1
    6ec8:	eor	r2, r2, r1, lsl #8
    6ecc:	movw	r3, #48883	; 0xbef3
    6ed0:	movt	r3, #65261	; 0xfeed
    6ed4:	sub	r3, r3, r1
    6ed8:	sub	r3, r3, r2
    6edc:	eor	r3, r3, r2, lsr #13
    6ee0:	sub	r1, r1, r2
    6ee4:	sub	r1, r1, r3
    6ee8:	eor	r1, r1, r3, lsr #12
    6eec:	sub	r2, r2, r3
    6ef0:	sub	r2, r2, r1
    6ef4:	eor	r2, r2, r1, lsl #16
    6ef8:	sub	r3, r3, r1
    6efc:	sub	r3, r3, r2
    6f00:	eor	r3, r3, r2, lsr #5
    6f04:	sub	r1, r1, r2
    6f08:	sub	r1, r1, r3
    6f0c:	eor	r1, r1, r3, lsr #3
    6f10:	sub	r2, r2, r3
    6f14:	sub	r2, r2, r1
    6f18:	eor	r2, r2, r1, lsl #10
    6f1c:	sub	r1, r3, r1
    6f20:	sub	r1, r1, r2
    6f24:	eor	r1, r1, r2, lsr #15
    6f28:	ldr	r9, [r0, #12]
    6f2c:	ldm	r9, {r0, r2}
    6f30:	sub	r2, r2, #1
    6f34:	and	r1, r1, r2
    6f38:	add	r1, r1, r1, lsl #1
    6f3c:	ldr	r0, [r0, r1, lsl #2]
    6f40:	cmp	r0, #0
    6f44:	beq	6f90 <get_hop_pattern@@Base+0x14c>
    6f48:	ldr	r1, [r9, #20]
    6f4c:	sub	sl, r0, r1
    6f50:	add	r4, sp, #8
    6f54:	ldr	r0, [sl, #36]	; 0x24
    6f58:	cmp	r0, #4
    6f5c:	bne	6f78 <get_hop_pattern@@Base+0x134>
    6f60:	ldr	r0, [sl, #32]
    6f64:	mov	r1, r4
    6f68:	mov	r2, #4
    6f6c:	bl	4840 <bcmp@plt>
    6f70:	cmp	r0, #0
    6f74:	beq	7344 <get_hop_pattern@@Base+0x500>
    6f78:	ldr	r0, [sl, #28]
    6f7c:	cmp	r0, #0
    6f80:	beq	6f90 <get_hop_pattern@@Base+0x14c>
    6f84:	ldr	r1, [r9, #20]
    6f88:	sub	sl, r0, r1
    6f8c:	b	6f54 <get_hop_pattern@@Base+0x110>
    6f90:	mov	r0, r5
    6f94:	bl	45e8 <gen_hop_pattern@plt>
    6f98:	mov	r0, #48	; 0x30
    6f9c:	bl	47d4 <malloc@plt>
    6fa0:	mov	r4, r0
    6fa4:	ldr	r1, [r5, #372]	; 0x174
    6fa8:	mov	r0, #0
    6fac:	str	r0, [r4, #20]
    6fb0:	mov	r2, #4
    6fb4:	str	r8, [r4]
    6fb8:	str	r6, [r4, #4]
    6fbc:	str	r1, [r4, #8]
    6fc0:	str	r4, [r4, #32]
    6fc4:	str	r2, [r4, #36]	; 0x24
    6fc8:	add	r8, r4, #12
    6fcc:	ldr	r1, [pc, #936]	; 737c <get_hop_pattern@@Base+0x538>
    6fd0:	ldr	r1, [pc, r1]
    6fd4:	cmp	r1, #0
    6fd8:	beq	7000 <get_hop_pattern@@Base+0x1bc>
    6fdc:	ldr	r0, [r1, #12]
    6fe0:	ldr	r1, [r0, #16]
    6fe4:	str	r4, [r1, #8]
    6fe8:	ldr	r1, [r0, #16]
    6fec:	ldr	r2, [r0, #20]
    6ff0:	sub	r1, r1, r2
    6ff4:	str	r1, [r4, #16]
    6ff8:	str	r8, [r0, #16]
    6ffc:	b	70ac <get_hop_pattern@@Base+0x268>
    7000:	ldr	r1, [pc, #888]	; 7380 <get_hop_pattern@@Base+0x53c>
    7004:	add	r1, pc, r1
    7008:	str	r4, [r1]
    700c:	str	r0, [r4, #16]
    7010:	mov	r0, #44	; 0x2c
    7014:	bl	47d4 <malloc@plt>
    7018:	str	r0, [r4, #12]
    701c:	ldr	r5, [pc, #864]	; 7384 <get_hop_pattern@@Base+0x540>
    7020:	ldr	r5, [pc, r5]
    7024:	ldr	r0, [r5, #12]
    7028:	cmp	r0, #0
    702c:	beq	7370 <get_hop_pattern@@Base+0x52c>
    7030:	vmov.i32	q8, #0	; 0x00000000
    7034:	mov	r1, #28
    7038:	add	r2, r0, #16
    703c:	vst1.32	{d16-d17}, [r0], r1
    7040:	vst1.32	{d16-d17}, [r0]
    7044:	vst1.32	{d16-d17}, [r2]
    7048:	mov	r6, r5
    704c:	ldr	r0, [r6, #12]!
    7050:	str	r6, [r0, #16]
    7054:	ldr	r0, [r6]
    7058:	mov	r1, #12
    705c:	str	r1, [r0, #20]
    7060:	mov	r1, #5
    7064:	mov	r2, #32
    7068:	str	r2, [r0, #4]
    706c:	str	r1, [r0, #8]
    7070:	mov	r0, #384	; 0x180
    7074:	bl	47d4 <malloc@plt>
    7078:	ldr	r1, [r6]
    707c:	str	r0, [r1]
    7080:	ldr	r0, [r6]
    7084:	ldr	r0, [r0]
    7088:	cmp	r0, #0
    708c:	beq	7370 <get_hop_pattern@@Base+0x52c>
    7090:	mov	r1, #0
    7094:	mov	r2, #384	; 0x180
    7098:	bl	48dc <memset@plt>
    709c:	ldr	r0, [r5, #12]
    70a0:	movw	r1, #8161	; 0x1fe1
    70a4:	movt	r1, #40977	; 0xa011
    70a8:	str	r1, [r0, #40]	; 0x28
    70ac:	ldr	r0, [pc, #724]	; 7388 <get_hop_pattern@@Base+0x544>
    70b0:	ldr	r0, [pc, r0]
    70b4:	ldr	r1, [r0, #12]
    70b8:	ldr	r2, [r1, #12]
    70bc:	add	r2, r2, #1
    70c0:	str	r2, [r1, #12]
    70c4:	ldr	r1, [r0, #12]
    70c8:	str	r1, [r4, #12]
    70cc:	ldrb	r1, [r4]
    70d0:	ldrb	r2, [r4, #1]
    70d4:	ldrb	r3, [r4, #2]
    70d8:	ldrb	r6, [r4, #3]
    70dc:	add	r7, r7, r6, lsl #24
    70e0:	add	r3, r7, r3, lsl #16
    70e4:	add	r2, r3, r2, lsl #8
    70e8:	add	r1, r2, r1
    70ec:	movw	r2, #63341	; 0xf76d
    70f0:	movt	r2, #7
    70f4:	eor	r1, r1, r2
    70f8:	movw	r2, #47814	; 0xbac6
    70fc:	movt	r2, #40777	; 0x9f49
    7100:	sub	r2, r2, r1
    7104:	eor	r2, r2, r1, lsl #8
    7108:	movw	r3, #48883	; 0xbef3
    710c:	movt	r3, #65261	; 0xfeed
    7110:	sub	r3, r3, r1
    7114:	sub	r3, r3, r2
    7118:	eor	r3, r3, r2, lsr #13
    711c:	sub	r1, r1, r2
    7120:	sub	r1, r1, r3
    7124:	eor	r1, r1, r3, lsr #12
    7128:	sub	r2, r2, r3
    712c:	sub	r2, r2, r1
    7130:	eor	r2, r2, r1, lsl #16
    7134:	sub	r3, r3, r1
    7138:	sub	r3, r3, r2
    713c:	eor	r3, r3, r2, lsr #5
    7140:	sub	r1, r1, r2
    7144:	sub	r1, r1, r3
    7148:	eor	r1, r1, r3, lsr #3
    714c:	sub	r2, r2, r3
    7150:	sub	r2, r2, r1
    7154:	eor	r2, r2, r1, lsl #10
    7158:	sub	r1, r3, r1
    715c:	sub	r1, r1, r2
    7160:	eor	r1, r1, r2, lsr #15
    7164:	str	r1, [r4, #40]	; 0x28
    7168:	ldr	r2, [r0, #12]
    716c:	ldm	r2, {r0, r2}
    7170:	sub	r2, r2, #1
    7174:	and	r1, r1, r2
    7178:	add	r2, r1, r1, lsl #1
    717c:	mov	r3, r0
    7180:	ldr	r7, [r3, r2, lsl #2]!
    7184:	ldr	r1, [r3, #4]
    7188:	add	r1, r1, #1
    718c:	str	r1, [r3, #4]
    7190:	mov	r6, #0
    7194:	str	r6, [r4, #24]
    7198:	str	r7, [r4, #28]
    719c:	ldr	r7, [r3]
    71a0:	cmp	r7, #0
    71a4:	strne	r8, [r7, #12]
    71a8:	str	r8, [r3]
    71ac:	add	r0, r0, r2, lsl #2
    71b0:	ldr	r0, [r0, #8]
    71b4:	add	r0, r0, r0, lsl #2
    71b8:	mov	r2, #10
    71bc:	add	r0, r2, r0, lsl #1
    71c0:	cmp	r1, r0
    71c4:	bcc	7358 <get_hop_pattern@@Base+0x514>
    71c8:	ldr	r6, [r8]
    71cc:	ldr	r0, [r6, #36]	; 0x24
    71d0:	cmp	r0, #1
    71d4:	beq	7358 <get_hop_pattern@@Base+0x514>
    71d8:	ldr	r0, [r6, #4]
    71dc:	add	r0, r0, r0, lsl #1
    71e0:	lsl	r0, r0, #3
    71e4:	bl	47d4 <malloc@plt>
    71e8:	cmp	r0, #0
    71ec:	beq	7370 <get_hop_pattern@@Base+0x52c>
    71f0:	mov	r9, r0
    71f4:	ldr	r0, [r6, #4]
    71f8:	add	r0, r0, r0, lsl #1
    71fc:	lsl	r2, r0, #3
    7200:	mov	r4, #0
    7204:	mov	r0, r9
    7208:	mov	r1, #0
    720c:	bl	48dc <memset@plt>
    7210:	str	r4, [r6, #28]
    7214:	ldm	r6, {r0, ip}
    7218:	ldr	r1, [r6, #8]
    721c:	ldr	r7, [r6, #12]
    7220:	add	r1, r1, #1
    7224:	mov	r5, #1
    7228:	mvn	r2, #0
    722c:	add	r2, r2, ip, lsl #1
    7230:	lsr	r3, r7, r1
    7234:	tst	r2, r7
    7238:	addne	r3, r5, r7, lsr r1
    723c:	str	r3, [r6, #24]
    7240:	cmp	ip, #0
    7244:	beq	72f0 <get_hop_pattern@@Base+0x4ac>
    7248:	str	r8, [sp, #4]
    724c:	ldr	lr, [r6]
    7250:	mov	sl, #0
    7254:	b	7268 <get_hop_pattern@@Base+0x424>
    7258:	add	sl, sl, #1
    725c:	cmp	sl, ip
    7260:	mov	r0, lr
    7264:	beq	72e8 <get_hop_pattern@@Base+0x4a4>
    7268:	add	r1, sl, sl, lsl #1
    726c:	ldr	r0, [r0, r1, lsl #2]
    7270:	cmp	r0, #0
    7274:	bne	72a4 <get_hop_pattern@@Base+0x460>
    7278:	b	7258 <get_hop_pattern@@Base+0x414>
    727c:	str	r4, [r0, #12]
    7280:	ldr	r1, [r7]
    7284:	str	r1, [r0, #16]
    7288:	ldr	r1, [r7]
    728c:	cmp	r1, #0
    7290:	strne	r0, [r1, #12]
    7294:	str	r0, [r7]
    7298:	cmp	r5, #0
    729c:	mov	r0, r5
    72a0:	beq	7258 <get_hop_pattern@@Base+0x414>
    72a4:	ldr	r5, [r0, #16]
    72a8:	ldr	r1, [r0, #28]
    72ac:	and	r1, r1, r2
    72b0:	add	r1, r1, r1, lsl #1
    72b4:	add	r7, r9, r1, lsl #2
    72b8:	ldr	r1, [r7, #4]
    72bc:	add	r1, r1, #1
    72c0:	str	r1, [r7, #4]
    72c4:	cmp	r1, r3
    72c8:	bls	727c <get_hop_pattern@@Base+0x438>
    72cc:	ldr	r8, [r6, #28]
    72d0:	add	r4, r8, #1
    72d4:	str	r4, [r6, #28]
    72d8:	mov	r4, #0
    72dc:	udiv	r1, r1, r3
    72e0:	str	r1, [r7, #8]
    72e4:	b	727c <get_hop_pattern@@Base+0x438>
    72e8:	mov	r0, lr
    72ec:	ldr	r8, [sp, #4]
    72f0:	bl	4660 <free@plt>
    72f4:	ldr	r0, [r8]
    72f8:	ldmib	r0, {r1, r2}
    72fc:	lsl	r1, r1, #1
    7300:	add	r2, r2, #1
    7304:	stmib	r0, {r1, r2}
    7308:	ldr	r1, [r8]
    730c:	str	r9, [r1]
    7310:	ldr	r1, [r0, #12]
    7314:	ldr	r2, [r0, #28]
    7318:	cmp	r2, r1, lsr #1
    731c:	bls	7360 <get_hop_pattern@@Base+0x51c>
    7320:	ldr	r1, [r0, #32]
    7324:	add	r1, r1, #1
    7328:	str	r1, [r0, #32]
    732c:	cmp	r1, #2
    7330:	bcc	7358 <get_hop_pattern@@Base+0x514>
    7334:	mov	r1, #1
    7338:	str	r1, [r0, #36]	; 0x24
    733c:	sub	sp, fp, #28
    7340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7344:	ldr	r0, [pc, #64]	; 738c <get_hop_pattern@@Base+0x548>
    7348:	add	r0, pc, r0
    734c:	bl	47c8 <puts@plt>
    7350:	ldr	r0, [sl, #8]
    7354:	str	r0, [r5, #372]	; 0x174
    7358:	sub	sp, fp, #28
    735c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7360:	mov	r1, #0
    7364:	str	r1, [r0, #32]
    7368:	sub	sp, fp, #28
    736c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7370:	mvn	r0, #0
    7374:	bl	4828 <exit@plt>
    7378:	andeq	pc, r1, r8, lsr #6
    737c:	ldrdeq	pc, [r1], -ip
    7380:	andeq	pc, r1, r8, lsr #3
    7384:	andeq	pc, r1, ip, lsl #3
    7388:	strdeq	pc, [r1], -ip
    738c:	andeq	r7, r0, fp, lsl #4

00007390 <btbb_piconet_get_afh_map@@Base>:
    7390:	add	r0, r0, #12
    7394:	bx	lr

00007398 <btbb_piconet_set_channel_seen@@Base>:
    7398:	push	{fp, lr}
    739c:	mov	fp, sp
    73a0:	and	lr, r1, #7
    73a4:	mov	ip, #1
    73a8:	add	r2, r0, r1, lsr #3
    73ac:	ldrb	r3, [r2, #12]!
    73b0:	mov	r1, #0
    73b4:	tst	r3, ip, lsl lr
    73b8:	beq	73c4 <btbb_piconet_set_channel_seen@@Base+0x2c>
    73bc:	mov	r0, r1
    73c0:	pop	{fp, pc}
    73c4:	lsl	r1, ip, lr
    73c8:	orr	r1, r3, r1
    73cc:	strb	r1, [r2]
    73d0:	ldrb	r1, [r0, #22]
    73d4:	add	r1, r1, #1
    73d8:	strb	r1, [r0, #22]
    73dc:	mov	r1, #1
    73e0:	mov	r0, r1
    73e4:	pop	{fp, pc}

000073e8 <btbb_piconet_clear_channel_seen@@Base>:
    73e8:	push	{fp, lr}
    73ec:	mov	fp, sp
    73f0:	mov	lr, r0
    73f4:	and	ip, r1, #7
    73f8:	mov	r0, #1
    73fc:	add	r1, lr, r1, lsr #3
    7400:	ldrb	r3, [r1, #12]!
    7404:	tst	r3, r0, lsl ip
    7408:	beq	7428 <btbb_piconet_clear_channel_seen@@Base+0x40>
    740c:	lsl	r2, r0, ip
    7410:	bic	r2, r3, r2
    7414:	strb	r2, [r1]
    7418:	ldrb	r1, [lr, #22]
    741c:	sub	r1, r1, #1
    7420:	strb	r1, [lr, #22]
    7424:	pop	{fp, pc}
    7428:	mov	r0, #0
    742c:	pop	{fp, pc}

00007430 <btbb_piconet_get_channel_seen@@Base>:
    7430:	mov	r2, r0
    7434:	mov	r0, #1
    7438:	cmp	r1, #78	; 0x4e
    743c:	bxhi	lr
    7440:	add	r0, r2, r1, lsr #3
    7444:	ldrb	r0, [r0, #12]
    7448:	and	r1, r1, #7
    744c:	mov	r2, #1
    7450:	and	r0, r0, r2, lsl r1
    7454:	cmp	r0, #0
    7458:	movwne	r0, #1
    745c:	bx	lr

00007460 <precalc@@Base>:
    7460:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    7464:	add	fp, sp, #24
    7468:	mov	r4, r0
    746c:	mov	r5, #0
    7470:	movw	r8, #29865	; 0x74a9
    7474:	movt	r8, #53092	; 0xcf64
    7478:	mov	r9, #79	; 0x4f
    747c:	mov	r6, #0
    7480:	b	749c <precalc@@Base+0x3c>
    7484:	mov	r0, r5
    7488:	add	r0, r4, r0, lsl #2
    748c:	str	r7, [r0, #56]	; 0x38
    7490:	add	r5, r5, #1
    7494:	cmp	r5, #79	; 0x4f
    7498:	beq	74e8 <precalc@@Base+0x88>
    749c:	mov	r0, r4
    74a0:	mov	r1, #11
    74a4:	bl	46fc <btbb_piconet_get_flag@plt>
    74a8:	lsl	r1, r5, #1
    74ac:	uxtb	r1, r1
    74b0:	umull	r2, r3, r1, r8
    74b4:	lsr	r2, r3, #6
    74b8:	mls	r7, r2, r9, r1
    74bc:	cmp	r0, #0
    74c0:	beq	7484 <precalc@@Base+0x24>
    74c4:	uxtb	r1, r7
    74c8:	mov	r0, r4
    74cc:	bl	46d8 <btbb_piconet_get_channel_seen@plt>
    74d0:	cmp	r0, #0
    74d4:	beq	7490 <precalc@@Base+0x30>
    74d8:	add	r1, r6, #1
    74dc:	mov	r0, r6
    74e0:	mov	r6, r1
    74e4:	b	7488 <precalc@@Base+0x28>
    74e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000074ec <address_precalc@@Base>:
    74ec:	push	{r4, r5, fp, lr}
    74f0:	add	fp, sp, #8
    74f4:	ubfx	r2, r0, #10, #9
    74f8:	str	r2, [r1, #52]	; 0x34
    74fc:	ubfx	r2, r0, #19, #4
    7500:	str	r2, [r1, #36]	; 0x24
    7504:	ubfx	r2, r0, #23, #5
    7508:	str	r2, [r1, #44]	; 0x2c
    750c:	mov	lr, #16
    7510:	and	r3, lr, r0, asr #4
    7514:	mov	ip, #8
    7518:	and	r2, ip, r0, asr #3
    751c:	and	r4, r0, #1
    7520:	orr	r2, r2, r4
    7524:	orr	r2, r2, r3
    7528:	mov	r3, #4
    752c:	and	r4, r3, r0, asr #2
    7530:	orr	r2, r2, r4
    7534:	mov	r4, #2
    7538:	and	r5, r4, r0, asr #1
    753c:	orr	r2, r2, r5
    7540:	str	r2, [r1, #48]	; 0x30
    7544:	mov	r2, #32
    7548:	and	r2, r2, r0, lsr #6
    754c:	mov	r5, #64	; 0x40
    7550:	and	r5, r5, r0, lsr #7
    7554:	orr	r2, r5, r2
    7558:	and	r5, lr, r0, lsr #5
    755c:	orr	r2, r2, r5
    7560:	and	r5, ip, r0, asr #4
    7564:	orr	r2, r2, r5
    7568:	and	r3, r3, r0, asr #3
    756c:	orr	r2, r2, r3
    7570:	and	r3, r4, r0, asr #2
    7574:	orr	r2, r2, r3
    7578:	mov	r3, #1
    757c:	and	r0, r3, r0, asr #1
    7580:	orr	r0, r2, r0
    7584:	str	r0, [r1, #40]	; 0x28
    7588:	pop	{r4, r5, fp, pc}

0000758c <perm5@@Base>:
    758c:	push	{r4, r5, r6, sl, fp, lr}
    7590:	add	fp, sp, #16
    7594:	sub	sp, sp, #76	; 0x4c
    7598:	mov	r3, #0
    759c:	mov	ip, #1
    75a0:	mov	lr, sp
    75a4:	and	r4, ip, r2, lsr r3
    75a8:	str	r4, [lr, r3, lsl #2]
    75ac:	add	r3, r3, #1
    75b0:	cmp	r3, #9
    75b4:	bne	75a4 <perm5@@Base+0x18>
    75b8:	add	r2, lr, #36	; 0x24
    75bc:	mov	r3, #0
    75c0:	mov	ip, #1
    75c4:	and	r4, ip, r1, lsr r3
    75c8:	str	r4, [r2, r3, lsl #2]
    75cc:	add	r3, r3, #1
    75d0:	cmp	r3, #5
    75d4:	bne	75c4 <perm5@@Base+0x38>
    75d8:	mov	r2, #0
    75dc:	mov	r3, #1
    75e0:	sub	r1, fp, #36	; 0x24
    75e4:	and	r4, r3, r0, lsr r2
    75e8:	str	r4, [r1, r2, lsl #2]
    75ec:	add	r2, r2, #1
    75f0:	cmp	r2, #5
    75f4:	bne	75e4 <perm5@@Base+0x58>
    75f8:	mov	r0, #13
    75fc:	ldr	ip, [pc, #100]	; 7668 <perm5@@Base+0xdc>
    7600:	add	ip, pc, ip
    7604:	ldr	r2, [pc, #96]	; 766c <perm5@@Base+0xe0>
    7608:	add	r2, pc, r2
    760c:	b	761c <perm5@@Base+0x90>
    7610:	sub	r0, r0, #1
    7614:	cmn	r0, #1
    7618:	beq	7644 <perm5@@Base+0xb8>
    761c:	ldr	r3, [lr, r0, lsl #2]
    7620:	cmp	r3, #0
    7624:	beq	7610 <perm5@@Base+0x84>
    7628:	ldr	r3, [ip, r0, lsl #2]
    762c:	ldr	r4, [r1, r3, lsl #2]
    7630:	ldr	r5, [r2, r0, lsl #2]
    7634:	ldr	r6, [r1, r5, lsl #2]
    7638:	str	r6, [r1, r3, lsl #2]
    763c:	str	r4, [r1, r5, lsl #2]
    7640:	b	7610 <perm5@@Base+0x84>
    7644:	mov	r0, #0
    7648:	mov	r2, #0
    764c:	ldr	r3, [r1, r2, lsl #2]
    7650:	add	r0, r0, r3, lsl r2
    7654:	add	r2, r2, #1
    7658:	cmp	r2, #5
    765c:	bne	764c <perm5@@Base+0xc0>
    7660:	sub	sp, fp, #16
    7664:	pop	{r4, r5, r6, sl, fp, pc}
    7668:	strdeq	r6, [r0], -r0
    766c:	andeq	r6, r0, r0, lsr #28

00007670 <perm_table_init@@Base>:
    7670:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7674:	add	fp, sp, #24
    7678:	mov	r4, #0
    767c:	ldr	r8, [pc, #80]	; 76d4 <perm_table_init@@Base+0x64>
    7680:	ldr	r8, [pc, r8]
    7684:	mov	r7, r8
    7688:	mov	r5, #0
    768c:	mov	r6, #0
    7690:	mov	r0, r4
    7694:	mov	r1, r5
    7698:	mov	r2, r6
    769c:	bl	4948 <perm5@plt>
    76a0:	strb	r0, [r7, r6]
    76a4:	add	r6, r6, #1
    76a8:	cmp	r6, #512	; 0x200
    76ac:	bne	7690 <perm_table_init@@Base+0x20>
    76b0:	add	r7, r7, #512	; 0x200
    76b4:	add	r5, r5, #1
    76b8:	cmp	r5, #32
    76bc:	bne	768c <perm_table_init@@Base+0x1c>
    76c0:	add	r8, r8, #16384	; 0x4000
    76c4:	add	r4, r4, #1
    76c8:	cmp	r4, #32
    76cc:	bne	7684 <perm_table_init@@Base+0x14>
    76d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    76d4:	andeq	lr, r1, r0, lsl #22

000076d8 <fast_perm@@Base>:
    76d8:	push	{r4, r5, r6, r7, fp, lr}
    76dc:	add	fp, sp, #16
    76e0:	mov	r4, r2
    76e4:	mov	r5, r1
    76e8:	mov	r6, r0
    76ec:	ldr	r7, [pc, #48]	; 7724 <fast_perm@@Base+0x4c>
    76f0:	ldr	r7, [pc, r7]
    76f4:	ldr	r0, [r7]
    76f8:	cmp	r0, #0
    76fc:	bne	770c <fast_perm@@Base+0x34>
    7700:	bl	4750 <perm_table_init@plt>
    7704:	mov	r0, #1
    7708:	str	r0, [r7]
    770c:	ldr	r0, [pc, #20]	; 7728 <fast_perm@@Base+0x50>
    7710:	ldr	r0, [pc, r0]
    7714:	add	r0, r0, r6, lsl #14
    7718:	add	r0, r0, r5, lsl #9
    771c:	ldrb	r0, [r0, r4]
    7720:	pop	{r4, r5, r6, r7, fp, pc}
    7724:	muleq	r1, r4, sl
    7728:	andeq	lr, r1, r0, ror sl

0000772c <gen_hop_pattern@@Base>:
    772c:	push	{r4, sl, fp, lr}
    7730:	add	fp, sp, #8
    7734:	mov	r4, r0
    7738:	ldr	r0, [pc, #72]	; 7788 <gen_hop_pattern@@Base+0x5c>
    773c:	add	r0, pc, r0
    7740:	bl	47c8 <puts@plt>
    7744:	mov	r0, #134217728	; 0x8000000
    7748:	bl	47d4 <malloc@plt>
    774c:	str	r0, [r4, #372]	; 0x174
    7750:	mov	r0, r4
    7754:	bl	4990 <precalc@plt>
    7758:	ldrb	r0, [r4, #28]
    775c:	ldr	r1, [r4, #24]
    7760:	orr	r0, r1, r0, lsl #24
    7764:	bic	r0, r0, #-268435456	; 0xf0000000
    7768:	mov	r1, r4
    776c:	bl	48d0 <address_precalc@plt>
    7770:	mov	r0, r4
    7774:	bl	7790 <gen_hop_pattern@@Base+0x64>
    7778:	ldr	r0, [pc, #12]	; 778c <gen_hop_pattern@@Base+0x60>
    777c:	add	r0, pc, r0
    7780:	pop	{r4, sl, fp, lr}
    7784:	b	47c8 <puts@plt>
    7788:	andeq	r6, r0, r9, lsr lr
    778c:	andeq	r6, r0, r1, lsr #28
    7790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7794:	add	fp, sp, #28
    7798:	sub	sp, sp, #36	; 0x24
    779c:	mov	r4, r0
    77a0:	mov	r7, #0
    77a4:	mov	r3, #0
    77a8:	mov	r0, #0
    77ac:	mov	r1, #0
    77b0:	str	r1, [sp, #32]
    77b4:	mov	r1, #0
    77b8:	str	r1, [sp, #20]
    77bc:	b	77d0 <gen_hop_pattern@@Base+0xa4>
    77c0:	ldr	r0, [sp]
    77c4:	add	r0, r0, #1
    77c8:	cmp	r0, #4
    77cc:	beq	79b8 <gen_hop_pattern@@Base+0x28c>
    77d0:	str	r0, [sp]
    77d4:	mov	r1, #0
    77d8:	b	77ec <gen_hop_pattern@@Base+0xc0>
    77dc:	ldr	r1, [sp, #4]
    77e0:	add	r1, r1, #1
    77e4:	cmp	r1, #32
    77e8:	beq	77c0 <gen_hop_pattern@@Base+0x94>
    77ec:	ldr	r0, [r4, #44]	; 0x2c
    77f0:	str	r1, [sp, #4]
    77f4:	eor	r0, r0, r1
    77f8:	str	r0, [sp, #24]
    77fc:	mov	r1, #0
    7800:	b	7814 <gen_hop_pattern@@Base+0xe8>
    7804:	ldr	r1, [sp, #8]
    7808:	add	r1, r1, #1
    780c:	cmp	r1, #32
    7810:	beq	77dc <gen_hop_pattern@@Base+0xb0>
    7814:	ldr	r0, [r4, #48]	; 0x30
    7818:	str	r1, [sp, #8]
    781c:	eor	r0, r0, r1
    7820:	str	r0, [sp, #28]
    7824:	eor	r9, r0, #31
    7828:	mov	r1, #0
    782c:	b	7878 <gen_hop_pattern@@Base+0x14c>
    7830:	ldr	r3, [sp, #16]
    7834:	add	r3, r3, #16
    7838:	movw	r0, #29865	; 0x74a9
    783c:	movt	r0, #53092	; 0xcf64
    7840:	umull	r0, r1, r3, r0
    7844:	lsr	r0, r1, #6
    7848:	mov	r1, #79	; 0x4f
    784c:	mls	r0, r0, r1, r3
    7850:	str	r0, [sp, #20]
    7854:	uxtb	r0, r0
    7858:	ldrb	r1, [r4, #22]
    785c:	udiv	r2, r0, r1
    7860:	mls	r0, r2, r1, r0
    7864:	str	r0, [sp, #32]
    7868:	ldr	r1, [sp, #12]
    786c:	add	r1, r1, #1
    7870:	cmp	r1, #512	; 0x200
    7874:	beq	7804 <gen_hop_pattern@@Base+0xd8>
    7878:	str	r3, [sp, #16]
    787c:	ldr	r0, [r4, #52]	; 0x34
    7880:	str	r1, [sp, #12]
    7884:	eor	sl, r0, r1
    7888:	mov	r8, #0
    788c:	b	78d4 <gen_hop_pattern@@Base+0x1a8>
    7890:	ldr	r0, [sp, #20]
    7894:	add	r0, r1, r0
    7898:	movw	r1, #29865	; 0x74a9
    789c:	movt	r1, #53092	; 0xcf64
    78a0:	umull	r1, r2, r0, r1
    78a4:	lsr	r1, r2, #6
    78a8:	mov	r2, #79	; 0x4f
    78ac:	mls	r0, r1, r2, r0
    78b0:	ldr	r1, [r4, #372]	; 0x174
    78b4:	add	r1, r1, r7
    78b8:	add	r0, r4, r0, lsl #2
    78bc:	ldr	r0, [r0, #56]	; 0x38
    78c0:	strb	r0, [r1, #1]
    78c4:	add	r8, r8, #1
    78c8:	add	r7, r7, #2
    78cc:	cmp	r8, #32
    78d0:	beq	7830 <gen_hop_pattern@@Base+0x104>
    78d4:	ldr	r0, [sp, #24]
    78d8:	add	r0, r0, r8
    78dc:	asr	r1, r0, #31
    78e0:	add	r1, r0, r1, lsr #27
    78e4:	bic	r1, r1, #31
    78e8:	sub	r0, r0, r1
    78ec:	ldr	r1, [r4, #36]	; 0x24
    78f0:	eor	r5, r1, r0
    78f4:	mov	r0, r5
    78f8:	ldr	r1, [sp, #28]
    78fc:	mov	r2, sl
    7900:	bl	49cc <fast_perm@plt>
    7904:	mov	r6, r0
    7908:	mov	r0, r4
    790c:	mov	r1, #11
    7910:	bl	46fc <btbb_piconet_get_flag@plt>
    7914:	ldr	r1, [r4, #40]	; 0x28
    7918:	add	r1, r1, r6
    791c:	cmp	r0, #0
    7920:	beq	793c <gen_hop_pattern@@Base+0x210>
    7924:	ldr	r0, [sp, #32]
    7928:	add	r0, r1, r0
    792c:	ldrb	r1, [r4, #22]
    7930:	udiv	r2, r0, r1
    7934:	mls	r0, r2, r1, r0
    7938:	b	795c <gen_hop_pattern@@Base+0x230>
    793c:	ldr	r0, [sp, #20]
    7940:	add	r0, r1, r0
    7944:	movw	r1, #29865	; 0x74a9
    7948:	movt	r1, #53092	; 0xcf64
    794c:	umull	r1, r2, r0, r1
    7950:	lsr	r1, r2, #6
    7954:	mov	r2, #79	; 0x4f
    7958:	mls	r0, r1, r2, r0
    795c:	add	r0, r4, r0, lsl #2
    7960:	ldr	r0, [r0, #56]	; 0x38
    7964:	ldr	r1, [r4, #372]	; 0x174
    7968:	strb	r0, [r1, r7]
    796c:	mov	r0, r5
    7970:	mov	r1, r9
    7974:	mov	r2, sl
    7978:	bl	49cc <fast_perm@plt>
    797c:	mov	r5, r0
    7980:	mov	r0, r4
    7984:	mov	r1, #11
    7988:	bl	46fc <btbb_piconet_get_flag@plt>
    798c:	ldr	r1, [r4, #40]	; 0x28
    7990:	add	r1, r1, r5
    7994:	add	r1, r1, #32
    7998:	cmp	r0, #0
    799c:	beq	7890 <gen_hop_pattern@@Base+0x164>
    79a0:	ldr	r0, [sp, #32]
    79a4:	add	r0, r1, r0
    79a8:	ldrb	r1, [r4, #22]
    79ac:	udiv	r2, r0, r1
    79b0:	mls	r0, r2, r1, r0
    79b4:	b	78b0 <gen_hop_pattern@@Base+0x184>
    79b8:	sub	sp, fp, #28
    79bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000079c0 <single_hop@@Base>:
    79c0:	push	{r4, r5, r6, r7, fp, lr}
    79c4:	add	fp, sp, #16
    79c8:	mov	r4, r1
    79cc:	mov	r6, r0
    79d0:	ldr	r0, [r1, #36]	; 0x24
    79d4:	ldr	r2, [r1, #44]	; 0x2c
    79d8:	ldr	r1, [r1, #48]	; 0x30
    79dc:	ldr	r3, [r4, #52]	; 0x34
    79e0:	eor	r1, r1, r6, lsr #16
    79e4:	and	r1, r1, #31
    79e8:	ubfx	r7, r6, #1, #1
    79ec:	rsb	r5, r7, r7, lsl #5
    79f0:	eor	r1, r1, r5
    79f4:	eor	r2, r2, r6, lsr #21
    79f8:	add	r2, r2, r6, lsr #2
    79fc:	and	r2, r2, #31
    7a00:	eor	r0, r2, r0
    7a04:	eor	r2, r3, r6, lsr #7
    7a08:	bfc	r2, #9, #23
    7a0c:	bl	49cc <fast_perm@plt>
    7a10:	mov	r5, r0
    7a14:	movw	r0, #65520	; 0xfff0
    7a18:	movt	r0, #511	; 0x1ff
    7a1c:	and	r6, r0, r6, lsr #3
    7a20:	mov	r0, r4
    7a24:	mov	r1, #11
    7a28:	bl	46fc <btbb_piconet_get_flag@plt>
    7a2c:	lsl	r1, r7, #5
    7a30:	cmp	r0, #0
    7a34:	beq	7a40 <single_hop@@Base+0x80>
    7a38:	ldrb	r0, [r4, #22]
    7a3c:	b	7a44 <single_hop@@Base+0x84>
    7a40:	mov	r0, #79	; 0x4f
    7a44:	udiv	r2, r6, r0
    7a48:	mls	r2, r2, r0, r6
    7a4c:	add	r1, r5, r1
    7a50:	add	r1, r1, r2
    7a54:	ldr	r2, [r4, #40]	; 0x28
    7a58:	add	r1, r1, r2
    7a5c:	udiv	r2, r1, r0
    7a60:	mls	r0, r2, r0, r1
    7a64:	add	r0, r4, r0, lsl #2
    7a68:	ldrb	r0, [r0, #56]	; 0x38
    7a6c:	pop	{r4, r5, r6, r7, fp, pc}

00007a70 <hop@@Base>:
    7a70:	ldr	r1, [r1, #372]	; 0x174
    7a74:	ldrb	r0, [r1, r0]
    7a78:	bx	lr

00007a7c <btbb_init_hop_reversal@@Base>:
    7a7c:	push	{r4, r5, fp, lr}
    7a80:	add	fp, sp, #8
    7a84:	mov	r4, r1
    7a88:	mov	r5, r0
    7a8c:	mov	r0, r1
    7a90:	bl	47bc <get_hop_pattern@plt>
    7a94:	movw	r0, #15728	; 0x3d70
    7a98:	movt	r0, #10
    7a9c:	cmp	r5, #0
    7aa0:	movweq	r0, #15760	; 0x3d90
    7aa4:	movteq	r0, #3
    7aa8:	bl	47d4 <malloc@plt>
    7aac:	str	r0, [r4, #32]
    7ab0:	movw	r0, #4648	; 0x1228
    7ab4:	mov	r1, r4
    7ab8:	ldrb	r0, [r1, r0]!
    7abc:	ldr	r2, [r1, #1000]	; 0x3e8
    7ac0:	ldr	r1, [r1, #1004]	; 0x3ec
    7ac4:	add	r1, r1, r2
    7ac8:	and	r1, r1, #63	; 0x3f
    7acc:	mov	r2, r4
    7ad0:	bl	7b2c <btbb_init_hop_reversal@@Base+0xb0>
    7ad4:	mov	r1, #0
    7ad8:	str	r1, [r4, #388]	; 0x184
    7adc:	str	r0, [r4, #376]	; 0x178
    7ae0:	mov	r0, r4
    7ae4:	mov	r1, #9
    7ae8:	mov	r2, #1
    7aec:	bl	4720 <btbb_piconet_set_flag@plt>
    7af0:	mov	r0, r4
    7af4:	mov	r1, #5
    7af8:	mov	r2, #0
    7afc:	bl	4720 <btbb_piconet_set_flag@plt>
    7b00:	mov	r0, r4
    7b04:	mov	r1, #13
    7b08:	mov	r2, r5
    7b0c:	bl	4720 <btbb_piconet_set_flag@plt>
    7b10:	ldr	r1, [r4, #376]	; 0x178
    7b14:	ldr	r0, [pc, #12]	; 7b28 <btbb_init_hop_reversal@@Base+0xac>
    7b18:	add	r0, pc, r0
    7b1c:	bl	4618 <printf@plt>
    7b20:	ldr	r0, [r4, #376]	; 0x178
    7b24:	pop	{r4, r5, fp, pc}
    7b28:	andeq	r6, r0, r8, asr #18
    7b2c:	push	{r4, r5, r6, r7, fp, lr}
    7b30:	add	fp, sp, #16
    7b34:	mov	r7, #0
    7b38:	cmn	r1, #-134217727	; 0xf8000001
    7b3c:	bgt	7b8c <btbb_init_hop_reversal@@Base+0x110>
    7b40:	mov	r4, r2
    7b44:	mov	r5, r1
    7b48:	mov	r6, r0
    7b4c:	mov	r7, #0
    7b50:	b	7b60 <btbb_init_hop_reversal@@Base+0xe4>
    7b54:	add	r5, r5, #64	; 0x40
    7b58:	cmp	r5, #134217728	; 0x8000000
    7b5c:	bge	7b8c <btbb_init_hop_reversal@@Base+0x110>
    7b60:	ldr	r1, [r4, #8]
    7b64:	ldr	r0, [r4, #372]	; 0x174
    7b68:	ldrb	r0, [r0, r5]
    7b6c:	cmp	r1, #0
    7b70:	blne	89c8 <btbb_process_packet@@Base+0x194>
    7b74:	cmp	r0, r6
    7b78:	bne	7b54 <btbb_init_hop_reversal@@Base+0xd8>
    7b7c:	ldr	r0, [r4, #32]
    7b80:	str	r5, [r0, r7, lsl #2]
    7b84:	add	r7, r7, #1
    7b88:	b	7b54 <btbb_init_hop_reversal@@Base+0xd8>
    7b8c:	mov	r0, r7
    7b90:	pop	{r4, r5, r6, r7, fp, pc}

00007b94 <try_hop@@Base>:
    7b94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7b98:	add	fp, sp, #24
    7b9c:	mov	r4, r1
    7ba0:	mov	r5, r0
    7ba4:	ldrb	r8, [r1, #28]
    7ba8:	bl	4798 <btbb_decode@plt>
    7bac:	movw	r0, #5648	; 0x1610
    7bb0:	add	r7, r4, r0
    7bb4:	mov	r0, r4
    7bb8:	mov	r1, #9
    7bbc:	bl	46fc <btbb_piconet_get_flag@plt>
    7bc0:	cmp	r0, #0
    7bc4:	beq	7c34 <try_hop@@Base+0xa0>
    7bc8:	ldr	r0, [r4, #380]	; 0x17c
    7bcc:	add	r0, r4, r0, lsl #2
    7bd0:	ldr	r1, [r7, #4]
    7bd4:	ldr	r2, [r5, #2816]	; 0xb00
    7bd8:	sub	r1, r2, r1
    7bdc:	str	r1, [r0, #648]	; 0x288
    7be0:	ldr	r0, [r4, #380]	; 0x17c
    7be4:	add	r0, r4, r0
    7be8:	ldrb	r1, [r5, #8]
    7bec:	movw	r2, #4648	; 0x1228
    7bf0:	strb	r1, [r0, r2]
    7bf4:	ldr	r0, [r4, #380]	; 0x17c
    7bf8:	ldr	r1, [r4, #384]	; 0x180
    7bfc:	add	r0, r0, #1
    7c00:	add	r1, r1, #1
    7c04:	str	r0, [r4, #380]	; 0x17c
    7c08:	str	r1, [r4, #384]	; 0x180
    7c0c:	mov	r0, r4
    7c10:	bl	47a4 <btbb_winnow@plt>
    7c14:	mov	r0, r4
    7c18:	mov	r1, #5
    7c1c:	bl	46fc <btbb_piconet_get_flag@plt>
    7c20:	cmp	r0, #0
    7c24:	beq	7c88 <try_hop@@Base+0xf4>
    7c28:	ldr	r0, [pc, #192]	; 7cf0 <try_hop@@Base+0x15c>
    7c2c:	add	r0, pc, r0
    7c30:	b	7c74 <try_hop@@Base+0xe0>
    7c34:	mov	r0, r4
    7c38:	mov	r1, #4
    7c3c:	bl	46fc <btbb_piconet_get_flag@plt>
    7c40:	mov	r6, r0
    7c44:	mov	r0, r5
    7c48:	mov	r1, r4
    7c4c:	bl	4690 <btbb_uap_from_header@plt>
    7c50:	cmp	r6, #0
    7c54:	beq	7cb4 <try_hop@@Base+0x120>
    7c58:	mov	r0, r4
    7c5c:	mov	r1, #5
    7c60:	bl	46fc <btbb_piconet_get_flag@plt>
    7c64:	cmp	r0, #0
    7c68:	beq	7c88 <try_hop@@Base+0xf4>
    7c6c:	ldr	r0, [pc, #132]	; 7cf8 <try_hop@@Base+0x164>
    7c70:	add	r0, pc, r0
    7c74:	bl	47c8 <puts@plt>
    7c78:	ldr	r1, [r7]
    7c7c:	ldr	r0, [pc, #112]	; 7cf4 <try_hop@@Base+0x160>
    7c80:	add	r0, pc, r0
    7c84:	bl	4618 <printf@plt>
    7c88:	mov	r0, r4
    7c8c:	mov	r1, #2
    7c90:	bl	46fc <btbb_piconet_get_flag@plt>
    7c94:	cmp	r0, #0
    7c98:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    7c9c:	mov	r0, r4
    7ca0:	mov	r1, #2
    7ca4:	mov	r2, #1
    7ca8:	bl	4720 <btbb_piconet_set_flag@plt>
    7cac:	strb	r8, [r4, #28]
    7cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7cb4:	cmp	r0, #0
    7cb8:	beq	7c88 <try_hop@@Base+0xf4>
    7cbc:	ldrb	r0, [r4, #28]
    7cc0:	cmp	r8, r0
    7cc4:	bne	7ce0 <try_hop@@Base+0x14c>
    7cc8:	mov	r0, #0
    7ccc:	mov	r1, r4
    7cd0:	bl	49e4 <btbb_init_hop_reversal@plt>
    7cd4:	mov	r0, r4
    7cd8:	bl	47a4 <btbb_winnow@plt>
    7cdc:	b	7c88 <try_hop@@Base+0xf4>
    7ce0:	ldr	r0, [pc, #20]	; 7cfc <try_hop@@Base+0x168>
    7ce4:	add	r0, pc, r0
    7ce8:	bl	47c8 <puts@plt>
    7cec:	b	7c88 <try_hop@@Base+0xf4>
    7cf0:	andeq	r6, r0, r4, lsr #19
    7cf4:	strdeq	r6, [r0], -pc	; <UNPREDICTABLE>
    7cf8:	andeq	r6, r0, r0, ror #18
    7cfc:	ldrdeq	r6, [r0], -r6	; <UNPREDICTABLE>

00007d00 <btbb_winnow@@Base>:
    7d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d04:	add	fp, sp, #28
    7d08:	sub	sp, sp, #4
    7d0c:	mov	r4, r0
    7d10:	ldr	r1, [r0, #380]	; 0x17c
    7d14:	ldr	r0, [r0, #388]	; 0x184
    7d18:	cmp	r0, r1
    7d1c:	bge	7dd4 <btbb_winnow@@Base+0xd4>
    7d20:	movw	r9, #4648	; 0x1228
    7d24:	b	7d40 <btbb_winnow@@Base+0x40>
    7d28:	ldr	r1, [r4, #380]	; 0x17c
    7d2c:	ldr	r0, [r4, #388]	; 0x184
    7d30:	add	r0, r0, #1
    7d34:	str	r0, [r4, #388]	; 0x184
    7d38:	cmp	r0, r1
    7d3c:	bge	7dd8 <btbb_winnow@@Base+0xd8>
    7d40:	add	r1, r4, r0
    7d44:	ldrb	r5, [r1, r9]
    7d48:	add	r0, r4, r0, lsl #2
    7d4c:	ldr	r7, [r0, #648]	; 0x288
    7d50:	mov	r0, r7
    7d54:	mov	r1, r5
    7d58:	mov	r2, r4
    7d5c:	bl	80e4 <btbb_uap_from_header@@Base+0x2fc>
    7d60:	mov	r6, r0
    7d64:	cmp	r0, #2
    7d68:	blt	7dd8 <btbb_winnow@@Base+0xd8>
    7d6c:	ldr	r0, [r4, #380]	; 0x17c
    7d70:	cmp	r0, #1
    7d74:	blt	7d28 <btbb_winnow@@Base+0x28>
    7d78:	ldr	r0, [r4, #388]	; 0x184
    7d7c:	sub	r0, r0, #1
    7d80:	add	r1, r4, r0
    7d84:	ldrb	r8, [r1, r9]
    7d88:	add	r0, r4, r0, lsl #2
    7d8c:	ldr	sl, [r0, #648]	; 0x288
    7d90:	mov	r0, r4
    7d94:	mov	r1, #12
    7d98:	bl	46fc <btbb_piconet_get_flag@plt>
    7d9c:	cmp	r5, r8
    7da0:	bne	7d28 <btbb_winnow@@Base+0x28>
    7da4:	add	r1, sl, #1
    7da8:	cmp	r7, r1
    7dac:	cmpeq	r0, #0
    7db0:	bne	7d28 <btbb_winnow@@Base+0x28>
    7db4:	mov	r0, r4
    7db8:	mov	r1, #12
    7dbc:	mov	r2, #1
    7dc0:	bl	4720 <btbb_piconet_set_flag@plt>
    7dc4:	ldr	r0, [pc, #24]	; 7de4 <btbb_winnow@@Base+0xe4>
    7dc8:	add	r0, pc, r0
    7dcc:	bl	47c8 <puts@plt>
    7dd0:	b	7d28 <btbb_winnow@@Base+0x28>
    7dd4:	ldr	r6, [r4, #376]	; 0x178
    7dd8:	mov	r0, r6
    7ddc:	sub	sp, fp, #28
    7de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7de4:	andeq	r6, r0, r4, lsl r8

00007de8 <btbb_uap_from_header@@Base>:
    7de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dec:	add	fp, sp, #28
    7df0:	sub	sp, sp, #20
    7df4:	mov	r4, r1
    7df8:	mov	r8, r0
    7dfc:	movw	r0, #5648	; 0x1610
    7e00:	add	r0, r1, r0
    7e04:	str	r0, [sp, #16]
    7e08:	ldr	r0, [r8, #2816]	; 0xb00
    7e0c:	str	r0, [sp, #12]
    7e10:	mov	r0, r1
    7e14:	mov	r1, #10
    7e18:	bl	46fc <btbb_piconet_get_flag@plt>
    7e1c:	cmp	r0, #0
    7e20:	bne	7e30 <btbb_uap_from_header@@Base+0x48>
    7e24:	ldr	r0, [sp, #16]
    7e28:	ldr	r1, [sp, #12]
    7e2c:	str	r1, [r0, #4]
    7e30:	ldrb	r1, [r8, #8]
    7e34:	mov	r0, r4
    7e38:	bl	4744 <btbb_piconet_set_channel_seen@plt>
    7e3c:	ldr	r0, [r4, #380]	; 0x17c
    7e40:	cmp	r0, #1000	; 0x3e8
    7e44:	bge	7f8c <btbb_uap_from_header@@Base+0x1a4>
    7e48:	add	r0, r4, r0, lsl #2
    7e4c:	ldr	r1, [sp, #16]
    7e50:	ldr	r1, [r1, #4]
    7e54:	ldr	r2, [sp, #12]
    7e58:	sub	r1, r2, r1
    7e5c:	str	r1, [r0, #648]	; 0x288
    7e60:	ldr	r0, [r4, #380]	; 0x17c
    7e64:	add	r0, r4, r0
    7e68:	ldrb	r1, [r8, #8]
    7e6c:	movw	r2, #4648	; 0x1228
    7e70:	strb	r1, [r0, r2]
    7e74:	ldr	r0, [r4, #380]	; 0x17c
    7e78:	ldr	r1, [r4, #384]	; 0x180
    7e7c:	add	r0, r0, #1
    7e80:	add	r1, r1, #1
    7e84:	str	r0, [r4, #380]	; 0x17c
    7e88:	str	r1, [r4, #384]	; 0x180
    7e8c:	mov	r9, #0
    7e90:	mov	r0, #0
    7e94:	str	r0, [sp, #8]
    7e98:	mov	r0, #0
    7e9c:	str	r0, [sp, #4]
    7ea0:	b	7ec4 <btbb_uap_from_header@@Base+0xdc>
    7ea4:	str	r6, [sl, #392]	; 0x188
    7ea8:	ldr	r0, [sp, #8]
    7eac:	add	r0, r0, #1
    7eb0:	str	r0, [sp, #8]
    7eb4:	str	r9, [sp, #4]
    7eb8:	add	r9, r9, #1
    7ebc:	cmp	r9, #64	; 0x40
    7ec0:	beq	7fa8 <btbb_uap_from_header@@Base+0x1c0>
    7ec4:	add	sl, r4, r9, lsl #2
    7ec8:	ldr	r0, [sl, #392]	; 0x188
    7ecc:	cmn	r0, #1
    7ed0:	ble	7f74 <btbb_uap_from_header@@Base+0x18c>
    7ed4:	ldr	r0, [sp, #12]
    7ed8:	add	r0, r0, r9
    7edc:	ldr	r1, [sp, #16]
    7ee0:	ldr	r1, [r1, #4]
    7ee4:	sub	r0, r0, r1
    7ee8:	and	r5, r0, #63	; 0x3f
    7eec:	mov	r0, r5
    7ef0:	mov	r1, r8
    7ef4:	bl	49d8 <try_clock@plt>
    7ef8:	mov	r6, r0
    7efc:	mov	r0, r4
    7f00:	mov	r1, #10
    7f04:	bl	46fc <btbb_piconet_get_flag@plt>
    7f08:	cmp	r0, #0
    7f0c:	beq	7f20 <btbb_uap_from_header@@Base+0x138>
    7f10:	ldr	r0, [sl, #392]	; 0x188
    7f14:	mvn	r7, #0
    7f18:	cmp	r0, r6
    7f1c:	bne	7f30 <btbb_uap_from_header@@Base+0x148>
    7f20:	mov	r0, r5
    7f24:	mov	r1, r8
    7f28:	bl	478c <crc_check@plt>
    7f2c:	mov	r7, r0
    7f30:	mov	r0, r4
    7f34:	mov	r1, #2
    7f38:	bl	46fc <btbb_piconet_get_flag@plt>
    7f3c:	cmp	r0, #0
    7f40:	beq	7f50 <btbb_uap_from_header@@Base+0x168>
    7f44:	ldrb	r0, [r4, #28]
    7f48:	cmp	r6, r0
    7f4c:	bne	7f68 <btbb_uap_from_header@@Base+0x180>
    7f50:	sub	r0, r7, #1
    7f54:	cmp	r0, #2
    7f58:	bcc	7ea4 <btbb_uap_from_header@@Base+0xbc>
    7f5c:	add	r0, r7, #1
    7f60:	cmp	r0, #1
    7f64:	bhi	8010 <btbb_uap_from_header@@Base+0x228>
    7f68:	mvn	r0, #0
    7f6c:	str	r0, [sl, #392]	; 0x188
    7f70:	b	7eb8 <btbb_uap_from_header@@Base+0xd0>
    7f74:	mov	r0, r4
    7f78:	mov	r1, #10
    7f7c:	bl	46fc <btbb_piconet_get_flag@plt>
    7f80:	cmp	r0, #0
    7f84:	bne	7eb8 <btbb_uap_from_header@@Base+0xd0>
    7f88:	b	7ed4 <btbb_uap_from_header@@Base+0xec>
    7f8c:	ldr	r0, [pc, #332]	; 80e0 <btbb_uap_from_header@@Base+0x2f8>
    7f90:	add	r0, pc, r0
    7f94:	bl	47c8 <puts@plt>
    7f98:	mov	r0, r4
    7f9c:	bl	81d8 <btbb_uap_from_header@@Base+0x3f0>
    7fa0:	mov	r5, #0
    7fa4:	b	80c4 <btbb_uap_from_header@@Base+0x2dc>
    7fa8:	mov	r0, r4
    7fac:	mov	r1, #10
    7fb0:	mov	r2, #1
    7fb4:	bl	4720 <btbb_piconet_set_flag@plt>
    7fb8:	mov	r5, #0
    7fbc:	ldr	r0, [sp, #8]
    7fc0:	cmp	r0, #0
    7fc4:	beq	804c <btbb_uap_from_header@@Base+0x264>
    7fc8:	cmp	r0, #1
    7fcc:	bne	80c4 <btbb_uap_from_header@@Base+0x2dc>
    7fd0:	ldr	r1, [sp, #16]
    7fd4:	ldr	r0, [r1, #4]
    7fd8:	ldr	r6, [sp, #4]
    7fdc:	sub	r0, r6, r0
    7fe0:	and	r5, r0, #63	; 0x3f
    7fe4:	str	r5, [r1]
    7fe8:	mov	r0, r4
    7fec:	mov	r1, #2
    7ff0:	bl	46fc <btbb_piconet_get_flag@plt>
    7ff4:	cmp	r0, #0
    7ff8:	beq	8074 <btbb_uap_from_header@@Base+0x28c>
    7ffc:	ldr	r2, [r4, #384]	; 0x180
    8000:	ldr	r0, [pc, #212]	; 80dc <btbb_uap_from_header@@Base+0x2f4>
    8004:	add	r0, pc, r0
    8008:	mov	r1, r5
    800c:	b	8088 <btbb_uap_from_header@@Base+0x2a0>
    8010:	ldr	r1, [sp, #16]
    8014:	ldr	r0, [r1, #4]
    8018:	sub	r0, r9, r0
    801c:	and	r5, r0, #63	; 0x3f
    8020:	str	r5, [r1]
    8024:	mov	r0, r4
    8028:	mov	r1, #2
    802c:	bl	46fc <btbb_piconet_get_flag@plt>
    8030:	cmp	r0, #0
    8034:	beq	8058 <btbb_uap_from_header@@Base+0x270>
    8038:	ldr	r2, [r4, #384]	; 0x180
    803c:	ldr	r0, [pc, #144]	; 80d4 <btbb_uap_from_header@@Base+0x2ec>
    8040:	add	r0, pc, r0
    8044:	mov	r1, r5
    8048:	b	8068 <btbb_uap_from_header@@Base+0x280>
    804c:	mov	r0, r4
    8050:	bl	81d8 <btbb_uap_from_header@@Base+0x3f0>
    8054:	b	80c4 <btbb_uap_from_header@@Base+0x2dc>
    8058:	ldr	r2, [r4, #384]	; 0x180
    805c:	ldr	r0, [pc, #108]	; 80d0 <btbb_uap_from_header@@Base+0x2e8>
    8060:	add	r0, pc, r0
    8064:	mov	r1, r6
    8068:	bl	4618 <printf@plt>
    806c:	strb	r6, [r4, #28]
    8070:	b	8098 <btbb_uap_from_header@@Base+0x2b0>
    8074:	add	r0, r4, r6, lsl #2
    8078:	ldr	r1, [r0, #392]	; 0x188
    807c:	ldr	r2, [r4, #384]	; 0x180
    8080:	ldr	r0, [pc, #80]	; 80d8 <btbb_uap_from_header@@Base+0x2f0>
    8084:	add	r0, pc, r0
    8088:	bl	4618 <printf@plt>
    808c:	add	r0, r4, r6, lsl #2
    8090:	ldr	r0, [r0, #392]	; 0x188
    8094:	strb	r0, [r4, #28]
    8098:	mov	r5, #1
    809c:	mov	r0, r4
    80a0:	mov	r1, #4
    80a4:	mov	r2, #1
    80a8:	bl	4720 <btbb_piconet_set_flag@plt>
    80ac:	mov	r0, r4
    80b0:	mov	r1, #2
    80b4:	mov	r2, #1
    80b8:	bl	4720 <btbb_piconet_set_flag@plt>
    80bc:	mov	r0, #0
    80c0:	str	r0, [r4, #384]	; 0x180
    80c4:	mov	r0, r5
    80c8:	sub	sp, fp, #28
    80cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80d0:	andeq	r6, r0, r3, lsr r4
    80d4:	andeq	r6, r0, sl, lsl #9
    80d8:	andeq	r6, r0, ip, lsl r4
    80dc:	ldrdeq	r6, [r0], -r3
    80e0:	andeq	r6, r0, lr, ror #12
    80e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80e8:	add	fp, sp, #28
    80ec:	sub	sp, sp, #4
    80f0:	mov	r4, r2
    80f4:	mov	sl, r0
    80f8:	ldr	r0, [r2, #376]	; 0x178
    80fc:	cmp	r0, #0
    8100:	ble	81b4 <btbb_uap_from_header@@Base+0x3cc>
    8104:	mov	r9, r1
    8108:	movw	r0, #5648	; 0x1610
    810c:	add	r0, r4, r0
    8110:	str	r0, [sp]
    8114:	mov	r5, #0
    8118:	mov	r6, #0
    811c:	ldr	r1, [r4, #8]
    8120:	ldr	r7, [r4, #32]
    8124:	ldr	r0, [r4, #372]	; 0x174
    8128:	ldr	r8, [r7, r6, lsl #2]
    812c:	add	r2, r8, sl
    8130:	bic	r2, r2, #-134217728	; 0xf8000000
    8134:	ldrb	r0, [r0, r2]
    8138:	cmp	r1, #0
    813c:	blne	89c8 <btbb_process_packet@@Base+0x194>
    8140:	cmp	r0, r9
    8144:	streq	r8, [r7, r5, lsl #2]
    8148:	addeq	r5, r5, #1
    814c:	ldr	r0, [r4, #376]	; 0x178
    8150:	add	r6, r6, #1
    8154:	cmp	r6, r0
    8158:	blt	811c <btbb_uap_from_header@@Base+0x334>
    815c:	str	r5, [r4, #376]	; 0x178
    8160:	cmp	r5, #0
    8164:	beq	81bc <btbb_uap_from_header@@Base+0x3d4>
    8168:	cmp	r5, #1
    816c:	bne	81c8 <btbb_uap_from_header@@Base+0x3e0>
    8170:	ldr	r3, [sp]
    8174:	ldr	r0, [r3, #4]
    8178:	ldr	r1, [r4, #32]
    817c:	ldr	r2, [r1]
    8180:	sub	r0, r2, r0
    8184:	lsl	r0, r0, #1
    8188:	str	r0, [r3]
    818c:	ldr	r1, [r1]
    8190:	ldr	r0, [pc, #60]	; 81d4 <btbb_uap_from_header@@Base+0x3ec>
    8194:	add	r0, pc, r0
    8198:	bl	4618 <printf@plt>
    819c:	mov	r5, #1
    81a0:	mov	r0, r4
    81a4:	mov	r1, #5
    81a8:	mov	r2, #1
    81ac:	bl	4720 <btbb_piconet_set_flag@plt>
    81b0:	b	81c8 <btbb_uap_from_header@@Base+0x3e0>
    81b4:	mov	r0, #0
    81b8:	str	r0, [r4, #376]	; 0x178
    81bc:	mov	r0, r4
    81c0:	bl	81d8 <btbb_uap_from_header@@Base+0x3f0>
    81c4:	mov	r5, #0
    81c8:	mov	r0, r5
    81cc:	sub	sp, fp, #28
    81d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81d4:	andeq	r6, r0, r3, lsr #7
    81d8:	push	{r4, r5, fp, lr}
    81dc:	add	fp, sp, #8
    81e0:	mov	r4, r0
    81e4:	mov	r1, #9
    81e8:	bl	46fc <btbb_piconet_get_flag@plt>
    81ec:	cmp	r0, #0
    81f0:	beq	8204 <btbb_uap_from_header@@Base+0x41c>
    81f4:	ldr	r0, [r4, #32]
    81f8:	bl	4660 <free@plt>
    81fc:	mov	r0, #0
    8200:	str	r0, [r4, #372]	; 0x174
    8204:	mov	r5, #0
    8208:	mov	r0, r4
    820c:	mov	r1, #10
    8210:	mov	r2, #0
    8214:	bl	4720 <btbb_piconet_set_flag@plt>
    8218:	mov	r0, r4
    821c:	mov	r1, #9
    8220:	mov	r2, #0
    8224:	bl	4720 <btbb_piconet_set_flag@plt>
    8228:	mov	r0, r4
    822c:	mov	r1, #2
    8230:	mov	r2, #0
    8234:	bl	4720 <btbb_piconet_set_flag@plt>
    8238:	mov	r0, r4
    823c:	mov	r1, #4
    8240:	mov	r2, #0
    8244:	bl	4720 <btbb_piconet_set_flag@plt>
    8248:	mov	r0, r4
    824c:	mov	r1, #5
    8250:	mov	r2, #0
    8254:	bl	4720 <btbb_piconet_set_flag@plt>
    8258:	str	r5, [r4, #380]	; 0x17c
    825c:	mov	r0, r4
    8260:	mov	r1, #12
    8264:	bl	46fc <btbb_piconet_get_flag@plt>
    8268:	mov	r2, r0
    826c:	mov	r0, r4
    8270:	mov	r1, #11
    8274:	pop	{r4, r5, fp, lr}
    8278:	b	6d4c <btbb_piconet_set_flag@@Base>

0000827c <btbb_print_afh_map@@Base>:
    827c:	push	{r4, r5, r6, r7, fp, lr}
    8280:	add	fp, sp, #16
    8284:	sub	sp, sp, #32
    8288:	ldrb	r1, [r0, #12]
    828c:	ldrb	r2, [r0, #13]
    8290:	ldrb	r3, [r0, #14]
    8294:	ldrb	ip, [r0, #15]
    8298:	ldrb	lr, [r0, #16]
    829c:	ldrb	r4, [r0, #17]
    82a0:	ldrb	r5, [r0, #18]
    82a4:	ldrb	r6, [r0, #19]
    82a8:	ldrb	r7, [r0, #20]
    82ac:	ldrb	r0, [r0, #21]
    82b0:	stm	sp, {ip, lr}
    82b4:	add	ip, sp, #8
    82b8:	stm	ip, {r4, r5, r6, r7}
    82bc:	str	r0, [sp, #24]
    82c0:	ldr	r0, [pc, #12]	; 82d4 <btbb_print_afh_map@@Base+0x58>
    82c4:	add	r0, pc, r0
    82c8:	bl	4618 <printf@plt>
    82cc:	sub	sp, fp, #16
    82d0:	pop	{r4, r5, r6, r7, fp, pc}
    82d4:	andeq	r6, r0, lr, lsr r2

000082d8 <get_piconet@@Base>:
    82d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82dc:	add	fp, sp, #28
    82e0:	sub	sp, sp, #12
    82e4:	mov	r6, r0
    82e8:	str	r0, [sp, #8]
    82ec:	movw	ip, #63341	; 0xf76d
    82f0:	movt	ip, #7
    82f4:	movw	r5, #16653	; 0x410d
    82f8:	movt	r5, #274	; 0x112
    82fc:	movw	r4, #47814	; 0xbac6
    8300:	movt	r4, #40777	; 0x9f49
    8304:	movw	sl, #48883	; 0xbef3
    8308:	movt	sl, #65261	; 0xfeed
    830c:	ldr	r0, [pc, #1216]	; 87d4 <get_piconet@@Base+0x4fc>
    8310:	ldr	r0, [pc, r0]
    8314:	cmp	r0, #0
    8318:	beq	8404 <get_piconet@@Base+0x12c>
    831c:	ldrb	r1, [sp, #8]
    8320:	ldrb	r2, [sp, #9]
    8324:	ldrb	r3, [sp, #10]
    8328:	ldrb	r7, [sp, #11]
    832c:	add	r7, r5, r7, lsl #24
    8330:	add	r3, r7, r3, lsl #16
    8334:	add	r2, r3, r2, lsl #8
    8338:	add	r1, r2, r1
    833c:	eor	r1, r1, ip
    8340:	sub	r2, r4, r1
    8344:	eor	r2, r2, r1, lsl #8
    8348:	sub	r3, sl, r1
    834c:	sub	r3, r3, r2
    8350:	eor	r3, r3, r2, lsr #13
    8354:	sub	r1, r1, r2
    8358:	sub	r1, r1, r3
    835c:	eor	r1, r1, r3, lsr #12
    8360:	sub	r2, r2, r3
    8364:	sub	r2, r2, r1
    8368:	eor	r2, r2, r1, lsl #16
    836c:	sub	r3, r3, r1
    8370:	sub	r3, r3, r2
    8374:	eor	r3, r3, r2, lsr #5
    8378:	sub	r1, r1, r2
    837c:	sub	r1, r1, r3
    8380:	eor	r1, r1, r3, lsr #3
    8384:	sub	r2, r2, r3
    8388:	sub	r2, r2, r1
    838c:	eor	r2, r2, r1, lsl #10
    8390:	sub	r1, r3, r1
    8394:	sub	r1, r1, r2
    8398:	eor	r1, r1, r2, lsr #15
    839c:	ldr	r5, [r0, #8]
    83a0:	ldm	r5, {r0, r2}
    83a4:	sub	r2, r2, #1
    83a8:	and	r1, r1, r2
    83ac:	add	r1, r1, r1, lsl #1
    83b0:	ldr	r0, [r0, r1, lsl #2]
    83b4:	cmp	r0, #0
    83b8:	beq	8404 <get_piconet@@Base+0x12c>
    83bc:	ldr	r1, [r5, #20]
    83c0:	sub	r7, r0, r1
    83c4:	add	r4, sp, #8
    83c8:	ldr	r0, [r7, #32]
    83cc:	cmp	r0, #4
    83d0:	bne	83ec <get_piconet@@Base+0x114>
    83d4:	ldr	r0, [r7, #28]
    83d8:	mov	r1, r4
    83dc:	mov	r2, #4
    83e0:	bl	4840 <bcmp@plt>
    83e4:	cmp	r0, #0
    83e8:	beq	87b0 <get_piconet@@Base+0x4d8>
    83ec:	ldr	r0, [r7, #24]
    83f0:	cmp	r0, #0
    83f4:	beq	8404 <get_piconet@@Base+0x12c>
    83f8:	ldr	r1, [r5, #20]
    83fc:	sub	r7, r0, r1
    8400:	b	83c8 <get_piconet@@Base+0xf0>
    8404:	bl	45dc <btbb_piconet_new@plt>
    8408:	mov	r8, r0
    840c:	mov	r1, r6
    8410:	bl	49f0 <btbb_init_piconet@plt>
    8414:	mov	r0, #40	; 0x28
    8418:	bl	47d4 <malloc@plt>
    841c:	mov	r5, r0
    8420:	mov	r1, #4
    8424:	mov	r0, #0
    8428:	str	r0, [r5, #16]
    842c:	stm	r5, {r6, r8}
    8430:	str	r5, [r5, #28]
    8434:	str	r1, [r5, #32]
    8438:	add	r9, r5, #8
    843c:	ldr	r1, [pc, #916]	; 87d8 <get_piconet@@Base+0x500>
    8440:	ldr	r1, [pc, r1]
    8444:	cmp	r1, #0
    8448:	beq	8470 <get_piconet@@Base+0x198>
    844c:	ldr	r0, [r1, #8]
    8450:	ldr	r1, [r0, #16]
    8454:	str	r5, [r1, #8]
    8458:	ldr	r1, [r0, #16]
    845c:	ldr	r2, [r0, #20]
    8460:	sub	r1, r1, r2
    8464:	str	r1, [r5, #12]
    8468:	str	r9, [r0, #16]
    846c:	b	851c <get_piconet@@Base+0x244>
    8470:	ldr	r1, [pc, #868]	; 87dc <get_piconet@@Base+0x504>
    8474:	add	r1, pc, r1
    8478:	str	r5, [r1]
    847c:	str	r0, [r5, #12]
    8480:	mov	r0, #44	; 0x2c
    8484:	bl	47d4 <malloc@plt>
    8488:	str	r0, [r5, #8]
    848c:	ldr	r4, [pc, #844]	; 87e0 <get_piconet@@Base+0x508>
    8490:	ldr	r4, [pc, r4]
    8494:	ldr	r0, [r4, #8]
    8498:	cmp	r0, #0
    849c:	beq	87cc <get_piconet@@Base+0x4f4>
    84a0:	vmov.i32	q8, #0	; 0x00000000
    84a4:	mov	r1, #28
    84a8:	add	r2, r0, #16
    84ac:	vst1.32	{d16-d17}, [r0], r1
    84b0:	vst1.32	{d16-d17}, [r0]
    84b4:	vst1.32	{d16-d17}, [r2]
    84b8:	mov	r6, r4
    84bc:	ldr	r0, [r6, #8]!
    84c0:	str	r6, [r0, #16]
    84c4:	ldr	r0, [r6]
    84c8:	mov	r1, #8
    84cc:	str	r1, [r0, #20]
    84d0:	mov	r1, #5
    84d4:	mov	r2, #32
    84d8:	str	r2, [r0, #4]
    84dc:	str	r1, [r0, #8]
    84e0:	mov	r0, #384	; 0x180
    84e4:	bl	47d4 <malloc@plt>
    84e8:	ldr	r1, [r6]
    84ec:	str	r0, [r1]
    84f0:	ldr	r0, [r6]
    84f4:	ldr	r0, [r0]
    84f8:	cmp	r0, #0
    84fc:	beq	87cc <get_piconet@@Base+0x4f4>
    8500:	mov	r1, #0
    8504:	mov	r2, #384	; 0x180
    8508:	bl	48dc <memset@plt>
    850c:	ldr	r0, [r4, #8]
    8510:	movw	r1, #8161	; 0x1fe1
    8514:	movt	r1, #40977	; 0xa011
    8518:	str	r1, [r0, #40]	; 0x28
    851c:	ldr	r0, [pc, #704]	; 87e4 <get_piconet@@Base+0x50c>
    8520:	ldr	r0, [pc, r0]
    8524:	ldr	r1, [r0, #8]
    8528:	ldr	r2, [r1, #12]
    852c:	add	r2, r2, #1
    8530:	str	r2, [r1, #12]
    8534:	ldr	r1, [r0, #8]
    8538:	str	r1, [r5, #8]
    853c:	ldrb	r1, [r5]
    8540:	ldrb	r2, [r5, #1]
    8544:	ldrb	r3, [r5, #2]
    8548:	ldrb	r7, [r5, #3]
    854c:	movw	r6, #16653	; 0x410d
    8550:	movt	r6, #274	; 0x112
    8554:	add	r7, r6, r7, lsl #24
    8558:	add	r3, r7, r3, lsl #16
    855c:	add	r2, r3, r2, lsl #8
    8560:	add	r1, r2, r1
    8564:	movw	r2, #63341	; 0xf76d
    8568:	movt	r2, #7
    856c:	eor	r1, r1, r2
    8570:	movw	r2, #47814	; 0xbac6
    8574:	movt	r2, #40777	; 0x9f49
    8578:	sub	r2, r2, r1
    857c:	eor	r2, r2, r1, lsl #8
    8580:	sub	r3, sl, r1
    8584:	sub	r3, r3, r2
    8588:	eor	r3, r3, r2, lsr #13
    858c:	sub	r1, r1, r2
    8590:	sub	r1, r1, r3
    8594:	eor	r1, r1, r3, lsr #12
    8598:	sub	r2, r2, r3
    859c:	sub	r2, r2, r1
    85a0:	eor	r2, r2, r1, lsl #16
    85a4:	sub	r3, r3, r1
    85a8:	sub	r3, r3, r2
    85ac:	eor	r3, r3, r2, lsr #5
    85b0:	sub	r1, r1, r2
    85b4:	sub	r1, r1, r3
    85b8:	eor	r1, r1, r3, lsr #3
    85bc:	sub	r2, r2, r3
    85c0:	sub	r2, r2, r1
    85c4:	eor	r2, r2, r1, lsl #10
    85c8:	sub	r1, r3, r1
    85cc:	sub	r1, r1, r2
    85d0:	eor	r1, r1, r2, lsr #15
    85d4:	str	r1, [r5, #36]	; 0x24
    85d8:	ldr	r2, [r0, #8]
    85dc:	ldm	r2, {r0, r2}
    85e0:	sub	r2, r2, #1
    85e4:	and	r1, r1, r2
    85e8:	add	r2, r1, r1, lsl #1
    85ec:	mov	r3, r0
    85f0:	ldr	r7, [r3, r2, lsl #2]!
    85f4:	ldr	r1, [r3, #4]
    85f8:	add	r1, r1, #1
    85fc:	str	r1, [r3, #4]
    8600:	mov	r6, #0
    8604:	str	r6, [r5, #20]
    8608:	str	r7, [r5, #24]
    860c:	ldr	r7, [r3]
    8610:	cmp	r7, #0
    8614:	strne	r9, [r7, #12]
    8618:	str	r9, [r3]
    861c:	add	r0, r0, r2, lsl #2
    8620:	ldr	r0, [r0, #8]
    8624:	add	r0, r0, r0, lsl #2
    8628:	mov	r2, #10
    862c:	add	r0, r2, r0, lsl #1
    8630:	cmp	r1, r0
    8634:	bcc	87c0 <get_piconet@@Base+0x4e8>
    8638:	ldr	r7, [r9]
    863c:	ldr	r0, [r7, #36]	; 0x24
    8640:	cmp	r0, #1
    8644:	beq	87c0 <get_piconet@@Base+0x4e8>
    8648:	ldr	r0, [r7, #4]
    864c:	add	r0, r0, r0, lsl #1
    8650:	lsl	r0, r0, #3
    8654:	bl	47d4 <malloc@plt>
    8658:	cmp	r0, #0
    865c:	beq	87cc <get_piconet@@Base+0x4f4>
    8660:	mov	r5, r0
    8664:	ldr	r0, [r7, #4]
    8668:	add	r0, r0, r0, lsl #1
    866c:	lsl	r2, r0, #3
    8670:	mov	sl, #0
    8674:	mov	r0, r5
    8678:	mov	r1, #0
    867c:	bl	48dc <memset@plt>
    8680:	str	sl, [r7, #28]
    8684:	ldm	r7, {r0, ip}
    8688:	ldr	r1, [r7, #8]
    868c:	ldr	r6, [r7, #12]
    8690:	add	r1, r1, #1
    8694:	mov	r4, #1
    8698:	mvn	r2, #0
    869c:	add	r2, r2, ip, lsl #1
    86a0:	lsr	r3, r6, r1
    86a4:	tst	r2, r6
    86a8:	addne	r3, r4, r6, lsr r1
    86ac:	str	r3, [r7, #24]
    86b0:	cmp	ip, #0
    86b4:	beq	8764 <get_piconet@@Base+0x48c>
    86b8:	str	r9, [sp]
    86bc:	str	r8, [sp, #4]
    86c0:	ldr	lr, [r7]
    86c4:	mov	r9, #0
    86c8:	b	86dc <get_piconet@@Base+0x404>
    86cc:	add	r9, r9, #1
    86d0:	cmp	r9, ip
    86d4:	mov	r0, lr
    86d8:	beq	8758 <get_piconet@@Base+0x480>
    86dc:	add	r1, r9, r9, lsl #1
    86e0:	ldr	r0, [r0, r1, lsl #2]
    86e4:	cmp	r0, #0
    86e8:	bne	8718 <get_piconet@@Base+0x440>
    86ec:	b	86cc <get_piconet@@Base+0x3f4>
    86f0:	str	sl, [r0, #12]
    86f4:	ldr	r1, [r4]
    86f8:	str	r1, [r0, #16]
    86fc:	ldr	r1, [r4]
    8700:	cmp	r1, #0
    8704:	strne	r0, [r1, #12]
    8708:	str	r0, [r4]
    870c:	cmp	r6, #0
    8710:	mov	r0, r6
    8714:	beq	86cc <get_piconet@@Base+0x3f4>
    8718:	ldr	r6, [r0, #16]
    871c:	ldr	r1, [r0, #28]
    8720:	and	r1, r1, r2
    8724:	add	r1, r1, r1, lsl #1
    8728:	add	r4, r5, r1, lsl #2
    872c:	ldr	r1, [r4, #4]
    8730:	add	r8, r1, #1
    8734:	str	r8, [r4, #4]
    8738:	cmp	r8, r3
    873c:	bls	86f0 <get_piconet@@Base+0x418>
    8740:	ldr	r1, [r7, #28]
    8744:	add	r1, r1, #1
    8748:	str	r1, [r7, #28]
    874c:	udiv	r1, r8, r3
    8750:	str	r1, [r4, #8]
    8754:	b	86f0 <get_piconet@@Base+0x418>
    8758:	mov	r0, lr
    875c:	ldr	r8, [sp, #4]
    8760:	ldr	r9, [sp]
    8764:	bl	4660 <free@plt>
    8768:	ldr	r0, [r9]
    876c:	ldmib	r0, {r1, r2}
    8770:	lsl	r1, r1, #1
    8774:	add	r2, r2, #1
    8778:	stmib	r0, {r1, r2}
    877c:	ldr	r1, [r9]
    8780:	str	r5, [r1]
    8784:	ldr	r1, [r0, #12]
    8788:	ldr	r2, [r0, #28]
    878c:	cmp	r2, r1, lsr #1
    8790:	bls	87b8 <get_piconet@@Base+0x4e0>
    8794:	ldr	r1, [r0, #32]
    8798:	add	r1, r1, #1
    879c:	str	r1, [r0, #32]
    87a0:	cmp	r1, #2
    87a4:	movcs	r1, #1
    87a8:	strcs	r1, [r0, #36]	; 0x24
    87ac:	b	87c0 <get_piconet@@Base+0x4e8>
    87b0:	ldr	r8, [r7, #4]
    87b4:	b	87c0 <get_piconet@@Base+0x4e8>
    87b8:	mov	r1, #0
    87bc:	str	r1, [r0, #32]
    87c0:	mov	r0, r8
    87c4:	sub	sp, fp, #28
    87c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87cc:	mvn	r0, #0
    87d0:	bl	4828 <exit@plt>
    87d4:	andeq	sp, r1, r0, lsr #29
    87d8:	andeq	sp, r1, r0, ror sp
    87dc:	andeq	sp, r1, ip, lsr sp
    87e0:	andeq	sp, r1, r0, lsr #26
    87e4:	muleq	r1, r0, ip

000087e8 <btbb_next_survey_result@@Base>:
    87e8:	push	{r4, sl, fp, lr}
    87ec:	add	fp, sp, #8
    87f0:	ldr	r0, [pc, #52]	; 882c <btbb_next_survey_result@@Base+0x44>
    87f4:	ldr	r0, [pc, r0]
    87f8:	cmp	r0, #0
    87fc:	beq	8820 <btbb_next_survey_result@@Base+0x38>
    8800:	ldr	r4, [r0, #4]
    8804:	ldr	r1, [r0, #16]
    8808:	ldr	r2, [pc, #32]	; 8830 <btbb_next_survey_result@@Base+0x48>
    880c:	add	r2, pc, r2
    8810:	str	r1, [r2]
    8814:	bl	4660 <free@plt>
    8818:	mov	r0, r4
    881c:	pop	{r4, sl, fp, pc}
    8820:	mov	r4, #0
    8824:	mov	r0, r4
    8828:	pop	{r4, sl, fp, pc}
    882c:			; <UNDEFINED> instruction: 0x0001d9bc
    8830:	andeq	sp, r1, r4, lsr #19

00008834 <btbb_process_packet@@Base>:
    8834:	push	{r4, r5, r6, r7, fp, lr}
    8838:	add	fp, sp, #16
    883c:	mov	r5, r0
    8840:	ldr	r0, [pc, #376]	; 89c0 <btbb_process_packet@@Base+0x18c>
    8844:	add	r0, pc, r0
    8848:	ldrb	r0, [r0]
    884c:	cmp	r0, #1
    8850:	bne	88a8 <btbb_process_packet@@Base+0x74>
    8854:	mov	r0, r5
    8858:	bl	490c <btbb_packet_get_lap@plt>
    885c:	bl	493c <get_piconet@plt>
    8860:	mov	r6, r0
    8864:	ldrb	r1, [r5, #8]
    8868:	bl	4744 <btbb_piconet_set_channel_seen@plt>
    886c:	mov	r0, r5
    8870:	bl	46f0 <btbb_header_present@plt>
    8874:	mov	r4, #0
    8878:	cmp	r0, #0
    887c:	beq	89a4 <btbb_process_packet@@Base+0x170>
    8880:	mov	r0, r6
    8884:	mov	r1, #2
    8888:	bl	46fc <btbb_piconet_get_flag@plt>
    888c:	cmp	r0, #0
    8890:	bne	89a4 <btbb_process_packet@@Base+0x170>
    8894:	mov	r0, r5
    8898:	mov	r1, r6
    889c:	bl	4690 <btbb_uap_from_header@plt>
    88a0:	mov	r0, r4
    88a4:	pop	{r4, r5, r6, r7, fp, pc}
    88a8:	mov	r6, r1
    88ac:	mov	r4, #0
    88b0:	cmp	r1, #0
    88b4:	beq	89a4 <btbb_process_packet@@Base+0x170>
    88b8:	ldrb	r1, [r5, #8]
    88bc:	mov	r0, r6
    88c0:	bl	4744 <btbb_piconet_set_channel_seen@plt>
    88c4:	mov	r0, r6
    88c8:	mov	r1, #3
    88cc:	bl	46fc <btbb_piconet_get_flag@plt>
    88d0:	cmp	r0, #0
    88d4:	beq	89a4 <btbb_process_packet@@Base+0x170>
    88d8:	mov	r0, r5
    88dc:	bl	46f0 <btbb_header_present@plt>
    88e0:	cmp	r0, #0
    88e4:	beq	89a4 <btbb_process_packet@@Base+0x170>
    88e8:	mov	r0, r6
    88ec:	mov	r1, #14
    88f0:	bl	46fc <btbb_piconet_get_flag@plt>
    88f4:	mov	r7, r0
    88f8:	mov	r0, r6
    88fc:	bl	46c0 <btbb_piconet_get_uap@plt>
    8900:	mov	r1, r0
    8904:	cmp	r7, #0
    8908:	beq	8954 <btbb_process_packet@@Base+0x120>
    890c:	mov	r0, r5
    8910:	bl	475c <btbb_packet_set_uap@plt>
    8914:	mov	r0, r5
    8918:	mov	r1, #4
    891c:	mov	r2, #1
    8920:	bl	4648 <btbb_packet_set_flag@plt>
    8924:	mov	r0, r5
    8928:	mov	r1, #5
    892c:	mov	r2, #1
    8930:	bl	4648 <btbb_packet_set_flag@plt>
    8934:	mov	r0, r5
    8938:	bl	4798 <btbb_decode@plt>
    893c:	cmp	r0, #0
    8940:	beq	89ac <btbb_process_packet@@Base+0x178>
    8944:	mov	r0, r5
    8948:	bl	49c0 <btbb_print_packet@plt>
    894c:	mov	r0, r4
    8950:	pop	{r4, r5, r6, r7, fp, pc}
    8954:	cmp	r1, #0
    8958:	beq	8894 <btbb_process_packet@@Base+0x60>
    895c:	mov	r0, r5
    8960:	mov	r1, r6
    8964:	bl	47e0 <try_hop@plt>
    8968:	mov	r0, r6
    896c:	mov	r1, #4
    8970:	bl	46fc <btbb_piconet_get_flag@plt>
    8974:	cmp	r0, #0
    8978:	beq	89a4 <btbb_process_packet@@Base+0x170>
    897c:	mov	r0, r6
    8980:	mov	r1, #5
    8984:	bl	46fc <btbb_piconet_get_flag@plt>
    8988:	cmp	r0, #0
    898c:	beq	89a4 <btbb_process_packet@@Base+0x170>
    8990:	mov	r0, r6
    8994:	mov	r1, #14
    8998:	mov	r2, #1
    899c:	bl	4720 <btbb_piconet_set_flag@plt>
    89a0:	mvn	r4, #0
    89a4:	mov	r0, r4
    89a8:	pop	{r4, r5, r6, r7, fp, pc}
    89ac:	ldr	r0, [pc, #16]	; 89c4 <btbb_process_packet@@Base+0x190>
    89b0:	add	r0, pc, r0
    89b4:	bl	47c8 <puts@plt>
    89b8:	mov	r0, r4
    89bc:	pop	{r4, r5, r6, r7, fp, pc}
    89c0:	andeq	sp, r1, r4, ror #18
    89c4:	andeq	r5, r0, r4, ror ip
    89c8:	add	r0, r0, #24
    89cc:	movw	r1, #34079	; 0x851f
    89d0:	movt	r1, #20971	; 0x51eb
    89d4:	umull	r1, r2, r0, r1
    89d8:	lsr	r1, r2, #3
    89dc:	mov	r2, #25
    89e0:	mls	r0, r1, r2, r0
    89e4:	add	r0, r0, #26
    89e8:	bx	lr

000089ec <lell_packet_new@@Base>:
    89ec:	push	{r4, sl, fp, lr}
    89f0:	add	fp, sp, #8
    89f4:	mov	r4, #1
    89f8:	mov	r0, #1
    89fc:	mov	r1, #104	; 0x68
    8a00:	bl	45c4 <calloc@plt>
    8a04:	str	r4, [r0, #96]	; 0x60
    8a08:	pop	{r4, sl, fp, pc}

00008a0c <lell_packet_ref@@Base>:
    8a0c:	ldr	r1, [r0, #96]	; 0x60
    8a10:	add	r1, r1, #1
    8a14:	str	r1, [r0, #96]	; 0x60
    8a18:	bx	lr

00008a1c <lell_packet_unref@@Base>:
    8a1c:	ldr	r1, [r0, #96]	; 0x60
    8a20:	subs	r1, r1, #1
    8a24:	str	r1, [r0, #96]	; 0x60
    8a28:	bxne	lr
    8a2c:	b	4660 <free@plt>

00008a30 <lell_allocate_and_decode@@Base>:
    8a30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    8a34:	add	fp, sp, #24
    8a38:	mov	r8, r3
    8a3c:	mov	r6, r2
    8a40:	mov	r7, r1
    8a44:	mov	r5, r0
    8a48:	bl	4918 <lell_packet_new@plt>
    8a4c:	mov	r4, r0
    8a50:	str	r0, [r8]
    8a54:	add	r0, r5, #16
    8a58:	mov	r1, #48	; 0x30
    8a5c:	add	r2, r5, #32
    8a60:	vld1.8	{d16-d17}, [r5], r1
    8a64:	vld1.8	{d18-d19}, [r0]
    8a68:	add	r0, r4, #16
    8a6c:	vld1.8	{d20-d21}, [r2]
    8a70:	vld1.8	{d22-d23}, [r5]
    8a74:	vst1.8	{d18-d19}, [r0]
    8a78:	add	r0, r4, #32
    8a7c:	vst1.8	{d20-d21}, [r0]
    8a80:	add	r0, r4, #48	; 0x30
    8a84:	vst1.8	{d22-d23}, [r0]
    8a88:	mov	r0, #5
    8a8c:	mov	r5, r4
    8a90:	vst1.8	{d16-d17}, [r5], r0
    8a94:	mov	r0, r7
    8a98:	bl	8b7c <lell_allocate_and_decode@@Base+0x14c>
    8a9c:	str	r6, [r4, #76]	; 0x4c
    8aa0:	movw	r1, #2402	; 0x962
    8aa4:	sub	r1, r7, r1
    8aa8:	add	r1, r1, r1, lsr #31
    8aac:	lsr	r1, r1, #1
    8ab0:	strb	r1, [r4, #69]	; 0x45
    8ab4:	strb	r0, [r4, #68]	; 0x44
    8ab8:	ldr	r6, [r4]
    8abc:	str	r6, [r4, #64]	; 0x40
    8ac0:	mov	r0, r4
    8ac4:	bl	4630 <lell_packet_is_data@plt>
    8ac8:	ldrb	r1, [r5]
    8acc:	cmp	r0, #0
    8ad0:	beq	8b04 <lell_allocate_and_decode@@Base+0xd4>
    8ad4:	and	r0, r1, #31
    8ad8:	str	r0, [r4, #72]	; 0x48
    8adc:	mov	r0, r6
    8ae0:	bl	8c00 <lell_packet_is_data@@Base+0x14>
    8ae4:	str	r0, [r4, #92]	; 0x5c
    8ae8:	clz	r0, r0
    8aec:	lsr	r0, r0, #5
    8af0:	ldrb	r1, [r4, #100]	; 0x64
    8af4:	and	r1, r1, #254	; 0xfe
    8af8:	orr	r0, r1, r0
    8afc:	strb	r0, [r4, #100]	; 0x64
    8b00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    8b04:	and	r0, r1, #63	; 0x3f
    8b08:	str	r0, [r4, #72]	; 0x48
    8b0c:	ldrb	r0, [r4, #4]
    8b10:	ldrb	r1, [r4, #100]	; 0x64
    8b14:	lsr	r2, r0, #7
    8b18:	str	r2, [r4, #88]	; 0x58
    8b1c:	ubfx	r2, r0, #6, #1
    8b20:	str	r2, [r4, #84]	; 0x54
    8b24:	and	r0, r0, #15
    8b28:	strb	r0, [r4, #80]	; 0x50
    8b2c:	movw	r0, #16682	; 0x412a
    8b30:	movt	r0, #29046	; 0x7176
    8b34:	add	r0, r6, r0
    8b38:	clz	r0, r0
    8b3c:	lsr	r0, r0, #5
    8b40:	and	r1, r1, #254	; 0xfe
    8b44:	orr	r0, r1, r0
    8b48:	strb	r0, [r4, #100]	; 0x64
    8b4c:	ldr	r4, [r8]
    8b50:	ldrb	r0, [r4, #100]	; 0x64
    8b54:	mov	r1, #0
    8b58:	tst	r0, #1
    8b5c:	bne	8b74 <lell_allocate_and_decode@@Base+0x144>
    8b60:	ldr	r0, [r4, #64]	; 0x40
    8b64:	bl	9540 <lell_packet_is_data@@Base+0x954>
    8b68:	mov	r1, #1
    8b6c:	cmp	r0, #0
    8b70:	movweq	r1, #32
    8b74:	str	r1, [r4, #92]	; 0x5c
    8b78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    8b7c:	mov	r1, #37	; 0x25
    8b80:	movw	r2, #2402	; 0x962
    8b84:	cmp	r0, r2
    8b88:	beq	8be4 <lell_allocate_and_decode@@Base+0x1b4>
    8b8c:	movw	r1, #2425	; 0x979
    8b90:	cmp	r0, r1
    8b94:	bhi	8bb0 <lell_allocate_and_decode@@Base+0x180>
    8b98:	movw	r1, #2404	; 0x964
    8b9c:	sub	r0, r0, r1
    8ba0:	add	r0, r0, r0, lsr #31
    8ba4:	asr	r1, r0, #1
    8ba8:	uxtb	r0, r1
    8bac:	bx	lr
    8bb0:	mov	r1, #38	; 0x26
    8bb4:	movw	r2, #2426	; 0x97a
    8bb8:	cmp	r0, r2
    8bbc:	beq	8be4 <lell_allocate_and_decode@@Base+0x1b4>
    8bc0:	lsr	r2, r0, #4
    8bc4:	mov	r1, #39	; 0x27
    8bc8:	cmp	r2, #154	; 0x9a
    8bcc:	bhi	8be4 <lell_allocate_and_decode@@Base+0x1b4>
    8bd0:	movw	r1, #2428	; 0x97c
    8bd4:	sub	r0, r0, r1
    8bd8:	add	r0, r0, r0, lsr #31
    8bdc:	mov	r1, #11
    8be0:	add	r1, r1, r0, lsr #1
    8be4:	uxtb	r0, r1
    8be8:	bx	lr

00008bec <lell_packet_is_data@@Base>:
    8bec:	ldrb	r1, [r0, #68]	; 0x44
    8bf0:	mov	r0, #0
    8bf4:	cmp	r1, #37	; 0x25
    8bf8:	movwcc	r0, #1
    8bfc:	bx	lr
    8c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c04:	add	fp, sp, #28
    8c08:	sub	sp, sp, #4
    8c0c:	mov	r4, r0
    8c10:	ldr	r0, [pc, #2332]	; 9534 <lell_packet_is_data@@Base+0x948>
    8c14:	add	r0, pc, r0
    8c18:	ldr	r1, [pc, #2328]	; 9538 <lell_packet_is_data@@Base+0x94c>
    8c1c:	add	r1, pc, r1
    8c20:	tst	r4, #1
    8c24:	mov	r2, r1
    8c28:	moveq	r2, r0
    8c2c:	uxtb	r3, r4
    8c30:	ldrb	r2, [r2, r3]
    8c34:	tst	r4, #128	; 0x80
    8c38:	mov	r7, r1
    8c3c:	moveq	r7, r0
    8c40:	ubfx	r6, r4, #8, #8
    8c44:	ldrb	r7, [r7, r6]
    8c48:	add	r2, r7, r2
    8c4c:	tst	r4, #32768	; 0x8000
    8c50:	mov	r7, r1
    8c54:	moveq	r7, r0
    8c58:	ubfx	r5, r4, #16, #8
    8c5c:	ldrb	r7, [r7, r5]
    8c60:	add	r2, r2, r7
    8c64:	tst	r4, #8388608	; 0x800000
    8c68:	moveq	r1, r0
    8c6c:	ldrb	r0, [r1, r4, lsr #24]
    8c70:	add	r7, r2, r0
    8c74:	movw	r0, #48854	; 0xbed6
    8c78:	movt	r0, #36489	; 0x8e89
    8c7c:	cmp	r4, r0
    8c80:	mov	r0, #1
    8c84:	movweq	r0, #2
    8c88:	eor	r1, r3, r5
    8c8c:	eor	r2, r3, r6
    8c90:	orr	r1, r2, r1
    8c94:	eor	r2, r3, r4, lsr #24
    8c98:	orr	r1, r2, r1
    8c9c:	clz	r1, r1
    8ca0:	lsr	r1, r1, #5
    8ca4:	add	r0, r0, r1
    8ca8:	ldr	r1, [pc, #2188]	; 953c <lell_packet_is_data@@Base+0x950>
    8cac:	add	r1, pc, r1
    8cb0:	ldrb	r1, [r1, r4, lsr #26]
    8cb4:	sub	r5, r0, r1
    8cb8:	mov	r0, r4
    8cbc:	bl	9540 <lell_packet_is_data@@Base+0x954>
    8cc0:	add	r0, r5, r0
    8cc4:	add	r1, r7, r0
    8cc8:	cmp	r7, #24
    8ccc:	subhi	r0, r1, #24
    8cd0:	mov	r1, #0
    8cd4:	movw	r2, #4095	; 0xfff
    8cd8:	movw	r3, #2035	; 0x7f3
    8cdc:	movw	lr, #765	; 0x2fd
    8ce0:	movw	ip, #3063	; 0xbf7
    8ce4:	movw	r8, #3325	; 0xcfd
    8ce8:	movw	r7, #1
    8cec:	movt	r7, #65535	; 0xffff
    8cf0:	b	8d14 <lell_packet_is_data@@Base+0x128>
    8cf4:	movw	r5, #3064	; 0xbf8
    8cf8:	sub	r5, sl, r5
    8cfc:	cmp	r5, #16
    8d00:	bcs	9520 <lell_packet_is_data@@Base+0x934>
    8d04:	add	r0, r0, #1
    8d08:	add	r1, r1, #4
    8d0c:	cmp	r1, #21
    8d10:	bcs	952c <lell_packet_is_data@@Base+0x940>
    8d14:	and	sl, r2, r4, lsr r1
    8d18:	cmp	sl, r3
    8d1c:	ble	8d64 <lell_packet_is_data@@Base+0x178>
    8d20:	cmp	sl, ip
    8d24:	ble	9384 <lell_packet_is_data@@Base+0x798>
    8d28:	cmp	sl, #3712	; 0xe80
    8d2c:	bge	93f0 <lell_packet_is_data@@Base+0x804>
    8d30:	cmp	sl, r8
    8d34:	ble	8cf4 <lell_packet_is_data@@Base+0x108>
    8d38:	movw	r5, #3580	; 0xdfc
    8d3c:	sub	r5, sl, r5
    8d40:	cmp	r5, #8
    8d44:	bcc	8d04 <lell_packet_is_data@@Base+0x118>
    8d48:	movw	r5, #3326	; 0xcfe
    8d4c:	sub	r5, sl, r5
    8d50:	cmp	r5, #4
    8d54:	bcc	8d04 <lell_packet_is_data@@Base+0x118>
    8d58:	cmp	sl, #3456	; 0xd80
    8d5c:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    8d60:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    8d64:	cmp	sl, lr
    8d68:	bgt	93b8 <lell_packet_is_data@@Base+0x7cc>
    8d6c:	cmp	sl, #384	; 0x180
    8d70:	bhi	9494 <lell_packet_is_data@@Base+0x8a8>
    8d74:	add	r6, pc, #4
    8d78:	ldr	r5, [r6, sl, lsl #2]
    8d7c:	add	pc, r6, r5
    8d80:			; <UNDEFINED> instruction: 0xffffff84
    8d84:			; <UNDEFINED> instruction: 0xffffff84
    8d88:			; <UNDEFINED> instruction: 0xffffff84
    8d8c:			; <UNDEFINED> instruction: 0xffffff84
    8d90:			; <UNDEFINED> instruction: 0xffffff84
    8d94:			; <UNDEFINED> instruction: 0xffffff84
    8d98:			; <UNDEFINED> instruction: 0xffffff84
    8d9c:			; <UNDEFINED> instruction: 0xffffff84
    8da0:			; <UNDEFINED> instruction: 0xffffff84
    8da4:			; <UNDEFINED> instruction: 0xffffff84
    8da8:			; <UNDEFINED> instruction: 0xffffff84
    8dac:			; <UNDEFINED> instruction: 0xffffff84
    8db0:			; <UNDEFINED> instruction: 0xffffff84
    8db4:			; <UNDEFINED> instruction: 0xffffff84
    8db8:			; <UNDEFINED> instruction: 0xffffff84
    8dbc:			; <UNDEFINED> instruction: 0xffffff84
    8dc0:			; <UNDEFINED> instruction: 0xffffff84
    8dc4:			; <UNDEFINED> instruction: 0xffffff84
    8dc8:			; <UNDEFINED> instruction: 0xffffff84
    8dcc:			; <UNDEFINED> instruction: 0xffffff84
    8dd0:			; <UNDEFINED> instruction: 0xffffff84
    8dd4:			; <UNDEFINED> instruction: 0xffffff84
    8dd8:			; <UNDEFINED> instruction: 0xffffff84
    8ddc:			; <UNDEFINED> instruction: 0xffffff84
    8de0:			; <UNDEFINED> instruction: 0xffffff84
    8de4:			; <UNDEFINED> instruction: 0xffffff84
    8de8:			; <UNDEFINED> instruction: 0xffffff84
    8dec:			; <UNDEFINED> instruction: 0xffffff84
    8df0:			; <UNDEFINED> instruction: 0xffffff84
    8df4:			; <UNDEFINED> instruction: 0xffffff84
    8df8:			; <UNDEFINED> instruction: 0xffffff84
    8dfc:			; <UNDEFINED> instruction: 0xffffff84
    8e00:			; <UNDEFINED> instruction: 0xffffff88
    8e04:			; <UNDEFINED> instruction: 0xffffff88
    8e08:			; <UNDEFINED> instruction: 0xffffff88
    8e0c:			; <UNDEFINED> instruction: 0xffffff88
    8e10:			; <UNDEFINED> instruction: 0xffffff88
    8e14:			; <UNDEFINED> instruction: 0xffffff88
    8e18:			; <UNDEFINED> instruction: 0xffffff88
    8e1c:			; <UNDEFINED> instruction: 0xffffff88
    8e20:			; <UNDEFINED> instruction: 0xffffff88
    8e24:			; <UNDEFINED> instruction: 0xffffff88
    8e28:			; <UNDEFINED> instruction: 0xffffff88
    8e2c:			; <UNDEFINED> instruction: 0xffffff88
    8e30:			; <UNDEFINED> instruction: 0xffffff88
    8e34:			; <UNDEFINED> instruction: 0xffffff88
    8e38:			; <UNDEFINED> instruction: 0xffffff88
    8e3c:			; <UNDEFINED> instruction: 0xffffff88
    8e40:			; <UNDEFINED> instruction: 0xffffff88
    8e44:			; <UNDEFINED> instruction: 0xffffff88
    8e48:			; <UNDEFINED> instruction: 0xffffff88
    8e4c:			; <UNDEFINED> instruction: 0xffffff88
    8e50:			; <UNDEFINED> instruction: 0xffffff88
    8e54:			; <UNDEFINED> instruction: 0xffffff88
    8e58:			; <UNDEFINED> instruction: 0xffffff88
    8e5c:			; <UNDEFINED> instruction: 0xffffff88
    8e60:			; <UNDEFINED> instruction: 0xffffff88
    8e64:			; <UNDEFINED> instruction: 0xffffff88
    8e68:			; <UNDEFINED> instruction: 0xffffff88
    8e6c:			; <UNDEFINED> instruction: 0xffffff88
    8e70:			; <UNDEFINED> instruction: 0xffffff88
    8e74:			; <UNDEFINED> instruction: 0xffffff88
    8e78:			; <UNDEFINED> instruction: 0xffffff88
    8e7c:			; <UNDEFINED> instruction: 0xffffff88
    8e80:			; <UNDEFINED> instruction: 0xffffff88
    8e84:			; <UNDEFINED> instruction: 0xffffff88
    8e88:			; <UNDEFINED> instruction: 0xffffff88
    8e8c:			; <UNDEFINED> instruction: 0xffffff88
    8e90:			; <UNDEFINED> instruction: 0xffffff88
    8e94:			; <UNDEFINED> instruction: 0xffffff88
    8e98:			; <UNDEFINED> instruction: 0xffffff88
    8e9c:			; <UNDEFINED> instruction: 0xffffff88
    8ea0:			; <UNDEFINED> instruction: 0xffffff88
    8ea4:			; <UNDEFINED> instruction: 0xffffff88
    8ea8:			; <UNDEFINED> instruction: 0xffffff88
    8eac:			; <UNDEFINED> instruction: 0xffffff88
    8eb0:			; <UNDEFINED> instruction: 0xffffff88
    8eb4:			; <UNDEFINED> instruction: 0xffffff88
    8eb8:			; <UNDEFINED> instruction: 0xffffff88
    8ebc:			; <UNDEFINED> instruction: 0xffffff88
    8ec0:			; <UNDEFINED> instruction: 0xffffff88
    8ec4:			; <UNDEFINED> instruction: 0xffffff88
    8ec8:			; <UNDEFINED> instruction: 0xffffff88
    8ecc:			; <UNDEFINED> instruction: 0xffffff88
    8ed0:			; <UNDEFINED> instruction: 0xffffff88
    8ed4:			; <UNDEFINED> instruction: 0xffffff88
    8ed8:			; <UNDEFINED> instruction: 0xffffff88
    8edc:			; <UNDEFINED> instruction: 0xffffff88
    8ee0:			; <UNDEFINED> instruction: 0xffffff88
    8ee4:			; <UNDEFINED> instruction: 0xffffff88
    8ee8:			; <UNDEFINED> instruction: 0xffffff88
    8eec:			; <UNDEFINED> instruction: 0xffffff88
    8ef0:			; <UNDEFINED> instruction: 0xffffff88
    8ef4:			; <UNDEFINED> instruction: 0xffffff88
    8ef8:			; <UNDEFINED> instruction: 0xffffff88
    8efc:			; <UNDEFINED> instruction: 0xffffff88
    8f00:			; <UNDEFINED> instruction: 0xffffff88
    8f04:			; <UNDEFINED> instruction: 0xffffff88
    8f08:			; <UNDEFINED> instruction: 0xffffff88
    8f0c:			; <UNDEFINED> instruction: 0xffffff88
    8f10:			; <UNDEFINED> instruction: 0xffffff88
    8f14:			; <UNDEFINED> instruction: 0xffffff88
    8f18:			; <UNDEFINED> instruction: 0xffffff88
    8f1c:			; <UNDEFINED> instruction: 0xffffff88
    8f20:			; <UNDEFINED> instruction: 0xffffff88
    8f24:			; <UNDEFINED> instruction: 0xffffff88
    8f28:			; <UNDEFINED> instruction: 0xffffff88
    8f2c:			; <UNDEFINED> instruction: 0xffffff88
    8f30:			; <UNDEFINED> instruction: 0xffffff88
    8f34:			; <UNDEFINED> instruction: 0xffffff88
    8f38:			; <UNDEFINED> instruction: 0xffffff88
    8f3c:			; <UNDEFINED> instruction: 0xffffff88
    8f40:			; <UNDEFINED> instruction: 0xffffff88
    8f44:			; <UNDEFINED> instruction: 0xffffff88
    8f48:			; <UNDEFINED> instruction: 0xffffff88
    8f4c:			; <UNDEFINED> instruction: 0xffffff88
    8f50:			; <UNDEFINED> instruction: 0xffffff88
    8f54:			; <UNDEFINED> instruction: 0xffffff88
    8f58:			; <UNDEFINED> instruction: 0xffffff88
    8f5c:			; <UNDEFINED> instruction: 0xffffff88
    8f60:			; <UNDEFINED> instruction: 0xffffff88
    8f64:			; <UNDEFINED> instruction: 0xffffff88
    8f68:			; <UNDEFINED> instruction: 0xffffff88
    8f6c:			; <UNDEFINED> instruction: 0xffffff88
    8f70:			; <UNDEFINED> instruction: 0xffffff88
    8f74:			; <UNDEFINED> instruction: 0xffffff88
    8f78:			; <UNDEFINED> instruction: 0xffffff88
    8f7c:			; <UNDEFINED> instruction: 0xffffff84
    8f80:			; <UNDEFINED> instruction: 0xffffff84
    8f84:			; <UNDEFINED> instruction: 0xffffff88
    8f88:			; <UNDEFINED> instruction: 0xffffff88
    8f8c:			; <UNDEFINED> instruction: 0xffffff88
    8f90:			; <UNDEFINED> instruction: 0xffffff88
    8f94:			; <UNDEFINED> instruction: 0xffffff88
    8f98:			; <UNDEFINED> instruction: 0xffffff88
    8f9c:			; <UNDEFINED> instruction: 0xffffff88
    8fa0:			; <UNDEFINED> instruction: 0xffffff88
    8fa4:			; <UNDEFINED> instruction: 0xffffff88
    8fa8:			; <UNDEFINED> instruction: 0xffffff88
    8fac:			; <UNDEFINED> instruction: 0xffffff88
    8fb0:			; <UNDEFINED> instruction: 0xffffff88
    8fb4:			; <UNDEFINED> instruction: 0xffffff88
    8fb8:			; <UNDEFINED> instruction: 0xffffff88
    8fbc:			; <UNDEFINED> instruction: 0xffffff88
    8fc0:			; <UNDEFINED> instruction: 0xffffff88
    8fc4:			; <UNDEFINED> instruction: 0xffffff88
    8fc8:			; <UNDEFINED> instruction: 0xffffff88
    8fcc:			; <UNDEFINED> instruction: 0xffffff88
    8fd0:			; <UNDEFINED> instruction: 0xffffff88
    8fd4:			; <UNDEFINED> instruction: 0xffffff88
    8fd8:			; <UNDEFINED> instruction: 0xffffff88
    8fdc:			; <UNDEFINED> instruction: 0xffffff88
    8fe0:			; <UNDEFINED> instruction: 0xffffff88
    8fe4:			; <UNDEFINED> instruction: 0xffffff88
    8fe8:			; <UNDEFINED> instruction: 0xffffff88
    8fec:			; <UNDEFINED> instruction: 0xffffff88
    8ff0:			; <UNDEFINED> instruction: 0xffffff88
    8ff4:			; <UNDEFINED> instruction: 0xffffff88
    8ff8:			; <UNDEFINED> instruction: 0xffffff88
    8ffc:			; <UNDEFINED> instruction: 0xffffff88
    9000:			; <UNDEFINED> instruction: 0xffffff88
    9004:			; <UNDEFINED> instruction: 0xffffff88
    9008:			; <UNDEFINED> instruction: 0xffffff88
    900c:			; <UNDEFINED> instruction: 0xffffff88
    9010:			; <UNDEFINED> instruction: 0xffffff88
    9014:			; <UNDEFINED> instruction: 0xffffff88
    9018:			; <UNDEFINED> instruction: 0xffffff88
    901c:			; <UNDEFINED> instruction: 0xffffff88
    9020:			; <UNDEFINED> instruction: 0xffffff88
    9024:			; <UNDEFINED> instruction: 0xffffff88
    9028:			; <UNDEFINED> instruction: 0xffffff88
    902c:			; <UNDEFINED> instruction: 0xffffff88
    9030:			; <UNDEFINED> instruction: 0xffffff88
    9034:			; <UNDEFINED> instruction: 0xffffff88
    9038:			; <UNDEFINED> instruction: 0xffffff88
    903c:			; <UNDEFINED> instruction: 0xffffff88
    9040:			; <UNDEFINED> instruction: 0xffffff88
    9044:			; <UNDEFINED> instruction: 0xffffff88
    9048:			; <UNDEFINED> instruction: 0xffffff88
    904c:			; <UNDEFINED> instruction: 0xffffff88
    9050:			; <UNDEFINED> instruction: 0xffffff88
    9054:			; <UNDEFINED> instruction: 0xffffff88
    9058:			; <UNDEFINED> instruction: 0xffffff88
    905c:			; <UNDEFINED> instruction: 0xffffff88
    9060:			; <UNDEFINED> instruction: 0xffffff88
    9064:			; <UNDEFINED> instruction: 0xffffff88
    9068:			; <UNDEFINED> instruction: 0xffffff88
    906c:			; <UNDEFINED> instruction: 0xffffff88
    9070:			; <UNDEFINED> instruction: 0xffffff88
    9074:			; <UNDEFINED> instruction: 0xffffff88
    9078:			; <UNDEFINED> instruction: 0xffffff88
    907c:			; <UNDEFINED> instruction: 0xffffff88
    9080:			; <UNDEFINED> instruction: 0xffffff88
    9084:			; <UNDEFINED> instruction: 0xffffff88
    9088:			; <UNDEFINED> instruction: 0xffffff88
    908c:			; <UNDEFINED> instruction: 0xffffff88
    9090:			; <UNDEFINED> instruction: 0xffffff88
    9094:			; <UNDEFINED> instruction: 0xffffff88
    9098:			; <UNDEFINED> instruction: 0xffffff88
    909c:			; <UNDEFINED> instruction: 0xffffff88
    90a0:			; <UNDEFINED> instruction: 0xffffff88
    90a4:			; <UNDEFINED> instruction: 0xffffff88
    90a8:			; <UNDEFINED> instruction: 0xffffff88
    90ac:			; <UNDEFINED> instruction: 0xffffff88
    90b0:			; <UNDEFINED> instruction: 0xffffff88
    90b4:			; <UNDEFINED> instruction: 0xffffff88
    90b8:			; <UNDEFINED> instruction: 0xffffff88
    90bc:			; <UNDEFINED> instruction: 0xffffff88
    90c0:			; <UNDEFINED> instruction: 0xffffff88
    90c4:			; <UNDEFINED> instruction: 0xffffff88
    90c8:			; <UNDEFINED> instruction: 0xffffff88
    90cc:			; <UNDEFINED> instruction: 0xffffff88
    90d0:			; <UNDEFINED> instruction: 0xffffff88
    90d4:			; <UNDEFINED> instruction: 0xffffff88
    90d8:			; <UNDEFINED> instruction: 0xffffff88
    90dc:			; <UNDEFINED> instruction: 0xffffff88
    90e0:			; <UNDEFINED> instruction: 0xffffff88
    90e4:			; <UNDEFINED> instruction: 0xffffff88
    90e8:			; <UNDEFINED> instruction: 0xffffff88
    90ec:			; <UNDEFINED> instruction: 0xffffff88
    90f0:			; <UNDEFINED> instruction: 0xffffff88
    90f4:			; <UNDEFINED> instruction: 0xffffff88
    90f8:			; <UNDEFINED> instruction: 0xffffff88
    90fc:			; <UNDEFINED> instruction: 0xffffff88
    9100:			; <UNDEFINED> instruction: 0xffffff88
    9104:			; <UNDEFINED> instruction: 0xffffff88
    9108:			; <UNDEFINED> instruction: 0xffffff88
    910c:			; <UNDEFINED> instruction: 0xffffff88
    9110:			; <UNDEFINED> instruction: 0xffffff88
    9114:			; <UNDEFINED> instruction: 0xffffff88
    9118:			; <UNDEFINED> instruction: 0xffffff88
    911c:			; <UNDEFINED> instruction: 0xffffff88
    9120:			; <UNDEFINED> instruction: 0xffffff88
    9124:			; <UNDEFINED> instruction: 0xffffff88
    9128:			; <UNDEFINED> instruction: 0xffffff88
    912c:			; <UNDEFINED> instruction: 0xffffff88
    9130:			; <UNDEFINED> instruction: 0xffffff88
    9134:			; <UNDEFINED> instruction: 0xffffff88
    9138:			; <UNDEFINED> instruction: 0xffffff88
    913c:			; <UNDEFINED> instruction: 0xffffff88
    9140:			; <UNDEFINED> instruction: 0xffffff88
    9144:			; <UNDEFINED> instruction: 0xffffff88
    9148:			; <UNDEFINED> instruction: 0xffffff88
    914c:			; <UNDEFINED> instruction: 0xffffff88
    9150:			; <UNDEFINED> instruction: 0xffffff88
    9154:			; <UNDEFINED> instruction: 0xffffff88
    9158:			; <UNDEFINED> instruction: 0xffffff88
    915c:			; <UNDEFINED> instruction: 0xffffff88
    9160:			; <UNDEFINED> instruction: 0xffffff88
    9164:			; <UNDEFINED> instruction: 0xffffff88
    9168:			; <UNDEFINED> instruction: 0xffffff88
    916c:			; <UNDEFINED> instruction: 0xffffff88
    9170:			; <UNDEFINED> instruction: 0xffffff88
    9174:			; <UNDEFINED> instruction: 0xffffff88
    9178:			; <UNDEFINED> instruction: 0xffffff84
    917c:			; <UNDEFINED> instruction: 0xffffff84
    9180:			; <UNDEFINED> instruction: 0xffffff84
    9184:			; <UNDEFINED> instruction: 0xffffff84
    9188:			; <UNDEFINED> instruction: 0xffffff88
    918c:			; <UNDEFINED> instruction: 0xffffff88
    9190:			; <UNDEFINED> instruction: 0xffffff88
    9194:			; <UNDEFINED> instruction: 0xffffff88
    9198:			; <UNDEFINED> instruction: 0xffffff88
    919c:			; <UNDEFINED> instruction: 0xffffff88
    91a0:			; <UNDEFINED> instruction: 0xffffff88
    91a4:			; <UNDEFINED> instruction: 0xffffff88
    91a8:			; <UNDEFINED> instruction: 0xffffff88
    91ac:			; <UNDEFINED> instruction: 0xffffff88
    91b0:			; <UNDEFINED> instruction: 0xffffff88
    91b4:			; <UNDEFINED> instruction: 0xffffff88
    91b8:			; <UNDEFINED> instruction: 0xffffff88
    91bc:			; <UNDEFINED> instruction: 0xffffff88
    91c0:			; <UNDEFINED> instruction: 0xffffff88
    91c4:			; <UNDEFINED> instruction: 0xffffff88
    91c8:			; <UNDEFINED> instruction: 0xffffff88
    91cc:			; <UNDEFINED> instruction: 0xffffff88
    91d0:			; <UNDEFINED> instruction: 0xffffff88
    91d4:			; <UNDEFINED> instruction: 0xffffff88
    91d8:			; <UNDEFINED> instruction: 0xffffff88
    91dc:			; <UNDEFINED> instruction: 0xffffff88
    91e0:			; <UNDEFINED> instruction: 0xffffff88
    91e4:			; <UNDEFINED> instruction: 0xffffff88
    91e8:			; <UNDEFINED> instruction: 0xffffff88
    91ec:			; <UNDEFINED> instruction: 0xffffff88
    91f0:			; <UNDEFINED> instruction: 0xffffff88
    91f4:			; <UNDEFINED> instruction: 0xffffff88
    91f8:			; <UNDEFINED> instruction: 0xffffff88
    91fc:			; <UNDEFINED> instruction: 0xffffff88
    9200:			; <UNDEFINED> instruction: 0xffffff88
    9204:			; <UNDEFINED> instruction: 0xffffff88
    9208:			; <UNDEFINED> instruction: 0xffffff88
    920c:			; <UNDEFINED> instruction: 0xffffff88
    9210:			; <UNDEFINED> instruction: 0xffffff88
    9214:			; <UNDEFINED> instruction: 0xffffff88
    9218:			; <UNDEFINED> instruction: 0xffffff88
    921c:			; <UNDEFINED> instruction: 0xffffff88
    9220:			; <UNDEFINED> instruction: 0xffffff88
    9224:			; <UNDEFINED> instruction: 0xffffff88
    9228:			; <UNDEFINED> instruction: 0xffffff88
    922c:			; <UNDEFINED> instruction: 0xffffff88
    9230:			; <UNDEFINED> instruction: 0xffffff88
    9234:			; <UNDEFINED> instruction: 0xffffff88
    9238:			; <UNDEFINED> instruction: 0xffffff88
    923c:			; <UNDEFINED> instruction: 0xffffff88
    9240:			; <UNDEFINED> instruction: 0xffffff88
    9244:			; <UNDEFINED> instruction: 0xffffff88
    9248:			; <UNDEFINED> instruction: 0xffffff88
    924c:			; <UNDEFINED> instruction: 0xffffff88
    9250:			; <UNDEFINED> instruction: 0xffffff88
    9254:			; <UNDEFINED> instruction: 0xffffff88
    9258:			; <UNDEFINED> instruction: 0xffffff88
    925c:			; <UNDEFINED> instruction: 0xffffff88
    9260:			; <UNDEFINED> instruction: 0xffffff88
    9264:			; <UNDEFINED> instruction: 0xffffff88
    9268:			; <UNDEFINED> instruction: 0xffffff88
    926c:			; <UNDEFINED> instruction: 0xffffff88
    9270:			; <UNDEFINED> instruction: 0xffffff88
    9274:			; <UNDEFINED> instruction: 0xffffff88
    9278:			; <UNDEFINED> instruction: 0xffffff88
    927c:			; <UNDEFINED> instruction: 0xffffff88
    9280:			; <UNDEFINED> instruction: 0xffffff88
    9284:			; <UNDEFINED> instruction: 0xffffff88
    9288:			; <UNDEFINED> instruction: 0xffffff88
    928c:			; <UNDEFINED> instruction: 0xffffff88
    9290:			; <UNDEFINED> instruction: 0xffffff88
    9294:			; <UNDEFINED> instruction: 0xffffff88
    9298:			; <UNDEFINED> instruction: 0xffffff88
    929c:			; <UNDEFINED> instruction: 0xffffff88
    92a0:			; <UNDEFINED> instruction: 0xffffff88
    92a4:			; <UNDEFINED> instruction: 0xffffff88
    92a8:			; <UNDEFINED> instruction: 0xffffff88
    92ac:			; <UNDEFINED> instruction: 0xffffff88
    92b0:			; <UNDEFINED> instruction: 0xffffff88
    92b4:			; <UNDEFINED> instruction: 0xffffff88
    92b8:			; <UNDEFINED> instruction: 0xffffff88
    92bc:			; <UNDEFINED> instruction: 0xffffff88
    92c0:			; <UNDEFINED> instruction: 0xffffff88
    92c4:			; <UNDEFINED> instruction: 0xffffff88
    92c8:			; <UNDEFINED> instruction: 0xffffff88
    92cc:			; <UNDEFINED> instruction: 0xffffff88
    92d0:			; <UNDEFINED> instruction: 0xffffff88
    92d4:			; <UNDEFINED> instruction: 0xffffff88
    92d8:			; <UNDEFINED> instruction: 0xffffff88
    92dc:			; <UNDEFINED> instruction: 0xffffff88
    92e0:			; <UNDEFINED> instruction: 0xffffff88
    92e4:			; <UNDEFINED> instruction: 0xffffff88
    92e8:			; <UNDEFINED> instruction: 0xffffff88
    92ec:			; <UNDEFINED> instruction: 0xffffff88
    92f0:			; <UNDEFINED> instruction: 0xffffff88
    92f4:			; <UNDEFINED> instruction: 0xffffff88
    92f8:			; <UNDEFINED> instruction: 0xffffff88
    92fc:			; <UNDEFINED> instruction: 0xffffff88
    9300:			; <UNDEFINED> instruction: 0xffffff88
    9304:			; <UNDEFINED> instruction: 0xffffff88
    9308:			; <UNDEFINED> instruction: 0xffffff88
    930c:			; <UNDEFINED> instruction: 0xffffff88
    9310:			; <UNDEFINED> instruction: 0xffffff88
    9314:			; <UNDEFINED> instruction: 0xffffff88
    9318:			; <UNDEFINED> instruction: 0xffffff88
    931c:			; <UNDEFINED> instruction: 0xffffff88
    9320:			; <UNDEFINED> instruction: 0xffffff88
    9324:			; <UNDEFINED> instruction: 0xffffff88
    9328:			; <UNDEFINED> instruction: 0xffffff88
    932c:			; <UNDEFINED> instruction: 0xffffff88
    9330:			; <UNDEFINED> instruction: 0xffffff88
    9334:			; <UNDEFINED> instruction: 0xffffff88
    9338:			; <UNDEFINED> instruction: 0xffffff88
    933c:			; <UNDEFINED> instruction: 0xffffff88
    9340:			; <UNDEFINED> instruction: 0xffffff88
    9344:			; <UNDEFINED> instruction: 0xffffff88
    9348:			; <UNDEFINED> instruction: 0xffffff88
    934c:			; <UNDEFINED> instruction: 0xffffff88
    9350:			; <UNDEFINED> instruction: 0xffffff88
    9354:			; <UNDEFINED> instruction: 0xffffff88
    9358:			; <UNDEFINED> instruction: 0xffffff88
    935c:			; <UNDEFINED> instruction: 0xffffff88
    9360:			; <UNDEFINED> instruction: 0xffffff88
    9364:			; <UNDEFINED> instruction: 0xffffff88
    9368:			; <UNDEFINED> instruction: 0xffffff88
    936c:			; <UNDEFINED> instruction: 0xffffff88
    9370:			; <UNDEFINED> instruction: 0xffffff88
    9374:			; <UNDEFINED> instruction: 0xffffff88
    9378:			; <UNDEFINED> instruction: 0xffffff88
    937c:			; <UNDEFINED> instruction: 0xffffff88
    9380:			; <UNDEFINED> instruction: 0xffffff84
    9384:	cmp	sl, #2432	; 0x980
    9388:	bge	9444 <lell_packet_is_data@@Base+0x858>
    938c:	movw	r5, #2036	; 0x7f4
    9390:	sub	r5, sl, r5
    9394:	cmp	r5, #28
    9398:	bcc	8d04 <lell_packet_is_data@@Base+0x118>
    939c:	movw	r5, #2302	; 0x8fe
    93a0:	sub	r5, sl, r5
    93a4:	cmp	r5, #4
    93a8:	bcc	8d04 <lell_packet_is_data@@Base+0x118>
    93ac:	cmp	sl, #2176	; 0x880
    93b0:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    93b4:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    93b8:	cmp	sl, #1152	; 0x480
    93bc:	bge	9414 <lell_packet_is_data@@Base+0x828>
    93c0:	sub	r6, sl, #1016	; 0x3f8
    93c4:	cmp	r6, #15
    93c8:	bhi	93d4 <lell_packet_is_data@@Base+0x7e8>
    93cc:	cmp	r6, #9
    93d0:	bne	8d04 <lell_packet_is_data@@Base+0x118>
    93d4:	movw	r5, #766	; 0x2fe
    93d8:	sub	r5, sl, r5
    93dc:	cmp	r5, #4
    93e0:	bcc	8d04 <lell_packet_is_data@@Base+0x118>
    93e4:	cmp	sl, #896	; 0x380
    93e8:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    93ec:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    93f0:	cmp	sl, #4064	; 0xfe0
    93f4:	blt	94fc <lell_packet_is_data@@Base+0x910>
    93f8:	sub	r6, sl, #4064	; 0xfe0
    93fc:	cmp	r6, #31
    9400:	bhi	8d08 <lell_packet_is_data@@Base+0x11c>
    9404:	mov	r5, #1
    9408:	tst	r7, r5, lsl r6
    940c:	addne	r0, r0, #1
    9410:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    9414:	movw	r5, #1531	; 0x5fb
    9418:	cmp	sl, r5
    941c:	ble	94b4 <lell_packet_is_data@@Base+0x8c8>
    9420:	cmp	sl, #1664	; 0x680
    9424:	bge	94d8 <lell_packet_is_data@@Base+0x8ec>
    9428:	movw	r5, #1532	; 0x5fc
    942c:	sub	r6, sl, r5
    9430:	cmp	r6, #7
    9434:	bhi	8d08 <lell_packet_is_data@@Base+0x11c>
    9438:	cmp	r6, #4
    943c:	bne	8d04 <lell_packet_is_data@@Base+0x118>
    9440:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    9444:	cmp	sl, #2688	; 0xa80
    9448:	bge	9470 <lell_packet_is_data@@Base+0x884>
    944c:	movw	r5, #2556	; 0x9fc
    9450:	sub	r6, sl, r5
    9454:	cmp	r6, #7
    9458:	bhi	9464 <lell_packet_is_data@@Base+0x878>
    945c:	cmp	r6, #4
    9460:	bne	8d04 <lell_packet_is_data@@Base+0x118>
    9464:	cmp	sl, #2432	; 0x980
    9468:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    946c:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    9470:	movw	r5, #2814	; 0xafe
    9474:	sub	r5, sl, r5
    9478:	cmp	r5, #4
    947c:	bcc	8d04 <lell_packet_is_data@@Base+0x118>
    9480:	cmp	sl, #2688	; 0xa80
    9484:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    9488:	cmp	sl, #2944	; 0xb80
    948c:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    9490:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    9494:	sub	r9, sl, #508	; 0x1fc
    9498:	cmp	r9, #7
    949c:	bhi	94a8 <lell_packet_is_data@@Base+0x8bc>
    94a0:	cmp	r9, #4
    94a4:	bne	8d04 <lell_packet_is_data@@Base+0x118>
    94a8:	cmp	sl, #640	; 0x280
    94ac:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    94b0:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    94b4:	movw	r5, #1278	; 0x4fe
    94b8:	sub	r5, sl, r5
    94bc:	cmp	r5, #4
    94c0:	bcc	8d04 <lell_packet_is_data@@Base+0x118>
    94c4:	cmp	sl, #1152	; 0x480
    94c8:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    94cc:	cmp	sl, #1408	; 0x580
    94d0:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    94d4:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    94d8:	movw	r5, #1790	; 0x6fe
    94dc:	sub	r5, sl, r5
    94e0:	cmp	r5, #4
    94e4:	bcc	8d04 <lell_packet_is_data@@Base+0x118>
    94e8:	cmp	sl, #1664	; 0x680
    94ec:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    94f0:	cmp	sl, #1920	; 0x780
    94f4:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    94f8:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    94fc:	movw	r5, #3838	; 0xefe
    9500:	sub	r5, sl, r5
    9504:	cmp	r5, #4
    9508:	bcc	8d04 <lell_packet_is_data@@Base+0x118>
    950c:	cmp	sl, #3712	; 0xe80
    9510:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    9514:	cmp	sl, #3968	; 0xf80
    9518:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    951c:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    9520:	cmp	sl, #3200	; 0xc80
    9524:	beq	8d04 <lell_packet_is_data@@Base+0x118>
    9528:	b	8d08 <lell_packet_is_data@@Base+0x11c>
    952c:	sub	sp, fp, #28
    9530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9534:	ldrdeq	r6, [r0], -r5
    9538:	andeq	r5, r0, r2, ror #26
    953c:	andeq	r6, r0, sp, lsr r3
    9540:	push	{fp, lr}
    9544:	mov	fp, sp
    9548:	movw	r1, #48854	; 0xbed6
    954c:	movt	r1, #36489	; 0x8e89
    9550:	eor	r0, r0, r1
    9554:	bl	a23c <lell_print@@Base+0xc64>
    9558:	sub	r0, r0, #1
    955c:	clz	r0, r0
    9560:	lsr	r0, r0, #5
    9564:	pop	{fp, pc}

00009568 <lell_get_access_address@@Base>:
    9568:	ldr	r0, [r0, #64]	; 0x40
    956c:	bx	lr

00009570 <lell_get_access_address_offenses@@Base>:
    9570:	ldr	r0, [r0, #92]	; 0x5c
    9574:	bx	lr

00009578 <lell_get_channel_index@@Base>:
    9578:	ldrb	r0, [r0, #68]	; 0x44
    957c:	bx	lr

00009580 <lell_get_channel_k@@Base>:
    9580:	ldrb	r0, [r0, #69]	; 0x45
    9584:	bx	lr

00009588 <lell_get_adv_type_str@@Base>:
    9588:	push	{r4, sl, fp, lr}
    958c:	add	fp, sp, #8
    9590:	mov	r4, r0
    9594:	bl	4630 <lell_packet_is_data@plt>
    9598:	mov	r1, r0
    959c:	mov	r0, #0
    95a0:	cmp	r1, #0
    95a4:	popne	{r4, sl, fp, pc}
    95a8:	ldrb	r0, [r4, #80]	; 0x50
    95ac:	cmp	r0, #6
    95b0:	bhi	95c4 <lell_get_adv_type_str@@Base+0x3c>
    95b4:	ldr	r1, [pc, #24]	; 95d4 <lell_get_adv_type_str@@Base+0x4c>
    95b8:	add	r1, pc, r1
    95bc:	ldr	r0, [r1, r0, lsl #2]
    95c0:	pop	{r4, sl, fp, pc}
    95c4:	ldr	r0, [pc, #4]	; 95d0 <lell_get_adv_type_str@@Base+0x48>
    95c8:	add	r0, pc, r0
    95cc:	pop	{r4, sl, fp, pc}
    95d0:	andeq	r5, r0, r4, ror r0
    95d4:	andeq	fp, r1, r4, asr r8

000095d8 <lell_print@@Base>:
    95d8:	push	{r4, r5, r6, r7, fp, lr}
    95dc:	add	fp, sp, #16
    95e0:	mov	r4, r0
    95e4:	bl	4630 <lell_packet_is_data@plt>
    95e8:	cmp	r0, #0
    95ec:	beq	96a4 <lell_print@@Base+0xcc>
    95f0:	ldrb	r0, [r4, #100]	; 0x64
    95f4:	ldr	r1, [pc, #1056]	; 9a1c <lell_print@@Base+0x444>
    95f8:	add	r1, pc, r1
    95fc:	ldr	r2, [pc, #1052]	; 9a20 <lell_print@@Base+0x448>
    9600:	add	r2, pc, r2
    9604:	tst	r0, #1
    9608:	moveq	r2, r1
    960c:	ldrb	r5, [r4, #4]
    9610:	ldr	r3, [r4, #72]	; 0x48
    9614:	ldr	r1, [r4, #64]	; 0x40
    9618:	ldr	r0, [pc, #1028]	; 9a24 <lell_print@@Base+0x44c>
    961c:	add	r0, pc, r0
    9620:	bl	4618 <printf@plt>
    9624:	ldrb	r1, [r4, #68]	; 0x44
    9628:	ldr	r0, [pc, #1016]	; 9a28 <lell_print@@Base+0x450>
    962c:	add	r0, pc, r0
    9630:	bl	4618 <printf@plt>
    9634:	and	r5, r5, #3
    9638:	ldr	r0, [pc, #1004]	; 9a2c <lell_print@@Base+0x454>
    963c:	add	r0, pc, r0
    9640:	ldr	r2, [r0, r5, lsl #2]
    9644:	ldr	r0, [pc, #996]	; 9a30 <lell_print@@Base+0x458>
    9648:	add	r0, pc, r0
    964c:	mov	r1, r5
    9650:	bl	4618 <printf@plt>
    9654:	ldrb	r0, [r4, #4]
    9658:	ubfx	r1, r0, #2, #1
    965c:	ubfx	r2, r0, #3, #1
    9660:	ubfx	r3, r0, #4, #1
    9664:	ldr	r0, [pc, #968]	; 9a34 <lell_print@@Base+0x45c>
    9668:	add	r0, pc, r0
    966c:	bl	4618 <printf@plt>
    9670:	cmp	r5, #3
    9674:	bne	9874 <lell_print@@Base+0x29c>
    9678:	ldrb	r1, [r4, #6]
    967c:	cmp	r1, #20
    9680:	mov	r0, r1
    9684:	movcs	r0, #20
    9688:	ldr	r2, [pc, #936]	; 9a38 <lell_print@@Base+0x460>
    968c:	add	r2, pc, r2
    9690:	ldr	r2, [r2, r0, lsl #2]
    9694:	ldr	r0, [pc, #928]	; 9a3c <lell_print@@Base+0x464>
    9698:	add	r0, pc, r0
    969c:	bl	4618 <printf@plt>
    96a0:	b	9874 <lell_print@@Base+0x29c>
    96a4:	ldrb	r0, [r4, #100]	; 0x64
    96a8:	ldr	r1, [pc, #912]	; 9a40 <lell_print@@Base+0x468>
    96ac:	add	r1, pc, r1
    96b0:	ldr	r2, [pc, #908]	; 9a44 <lell_print@@Base+0x46c>
    96b4:	add	r2, pc, r2
    96b8:	tst	r0, #1
    96bc:	moveq	r2, r1
    96c0:	ldr	r1, [r4, #64]	; 0x40
    96c4:	ldr	r3, [r4, #72]	; 0x48
    96c8:	ldr	r0, [pc, #888]	; 9a48 <lell_print@@Base+0x470>
    96cc:	add	r0, pc, r0
    96d0:	bl	4618 <printf@plt>
    96d4:	ldrb	r1, [r4, #68]	; 0x44
    96d8:	ldr	r0, [pc, #876]	; 9a4c <lell_print@@Base+0x474>
    96dc:	add	r0, pc, r0
    96e0:	bl	4618 <printf@plt>
    96e4:	mov	r0, r4
    96e8:	bl	47b0 <lell_get_adv_type_str@plt>
    96ec:	mov	r1, r0
    96f0:	ldr	r0, [pc, #856]	; 9a50 <lell_print@@Base+0x478>
    96f4:	add	r0, pc, r0
    96f8:	bl	4618 <printf@plt>
    96fc:	ldrb	r0, [r4, #80]	; 0x50
    9700:	cmp	r0, #6
    9704:	bhi	9874 <lell_print@@Base+0x29c>
    9708:	add	r1, pc, #4
    970c:	ldr	r0, [r1, r0, lsl #2]
    9710:	add	pc, r1, r0
    9714:	andeq	r0, r0, ip, lsl r0
    9718:	andeq	r0, r0, ip, lsl #1
    971c:	andeq	r0, r0, ip, lsl r0
    9720:	andeq	r0, r0, r0, lsr r1
    9724:	strheq	r0, [r0], -r4
    9728:	andeq	r0, r0, r0, lsl #4
    972c:	andeq	r0, r0, ip, lsl r0
    9730:	ldr	r3, [r4, #84]	; 0x54
    9734:	ldr	r0, [pc, #792]	; 9a54 <lell_print@@Base+0x47c>
    9738:	add	r0, pc, r0
    973c:	mov	r1, r4
    9740:	mov	r2, #6
    9744:	bl	9ab8 <lell_print@@Base+0x4e0>
    9748:	ldr	r0, [r4, #72]	; 0x48
    974c:	cmp	r0, #7
    9750:	blt	9874 <lell_print@@Base+0x29c>
    9754:	ldr	r0, [pc, #764]	; 9a58 <lell_print@@Base+0x480>
    9758:	add	r0, pc, r0
    975c:	bl	4618 <printf@plt>
    9760:	ldr	r0, [r4, #72]	; 0x48
    9764:	cmp	r0, #7
    9768:	blt	9828 <lell_print@@Base+0x250>
    976c:	add	r6, r4, #12
    9770:	mov	r7, #0
    9774:	ldr	r5, [pc, #736]	; 9a5c <lell_print@@Base+0x484>
    9778:	add	r5, pc, r5
    977c:	ldrb	r1, [r6, r7]
    9780:	mov	r0, r5
    9784:	bl	4618 <printf@plt>
    9788:	add	r7, r7, #1
    978c:	ldr	r0, [r4, #72]	; 0x48
    9790:	sub	r0, r0, #6
    9794:	cmp	r7, r0
    9798:	blt	977c <lell_print@@Base+0x1a4>
    979c:	b	9828 <lell_print@@Base+0x250>
    97a0:	ldr	r3, [r4, #84]	; 0x54
    97a4:	ldr	r0, [pc, #692]	; 9a60 <lell_print@@Base+0x488>
    97a8:	add	r0, pc, r0
    97ac:	mov	r1, r4
    97b0:	mov	r2, #6
    97b4:	bl	9ab8 <lell_print@@Base+0x4e0>
    97b8:	ldr	r3, [r4, #88]	; 0x58
    97bc:	ldr	r0, [pc, #672]	; 9a64 <lell_print@@Base+0x48c>
    97c0:	add	r0, pc, r0
    97c4:	b	9868 <lell_print@@Base+0x290>
    97c8:	ldr	r3, [r4, #84]	; 0x54
    97cc:	ldr	r0, [pc, #668]	; 9a70 <lell_print@@Base+0x498>
    97d0:	add	r0, pc, r0
    97d4:	mov	r1, r4
    97d8:	mov	r2, #6
    97dc:	bl	9ab8 <lell_print@@Base+0x4e0>
    97e0:	ldr	r0, [pc, #652]	; 9a74 <lell_print@@Base+0x49c>
    97e4:	add	r0, pc, r0
    97e8:	bl	4618 <printf@plt>
    97ec:	ldr	r0, [r4, #72]	; 0x48
    97f0:	cmp	r0, #7
    97f4:	blt	9828 <lell_print@@Base+0x250>
    97f8:	add	r6, r4, #12
    97fc:	mov	r7, #0
    9800:	ldr	r5, [pc, #624]	; 9a78 <lell_print@@Base+0x4a0>
    9804:	add	r5, pc, r5
    9808:	ldrb	r1, [r6, r7]
    980c:	mov	r0, r5
    9810:	bl	4618 <printf@plt>
    9814:	add	r7, r7, #1
    9818:	ldr	r0, [r4, #72]	; 0x48
    981c:	sub	r0, r0, #6
    9820:	cmp	r7, r0
    9824:	blt	9808 <lell_print@@Base+0x230>
    9828:	mov	r0, #10
    982c:	bl	48e8 <putchar@plt>
    9830:	ldr	r1, [r4, #72]	; 0x48
    9834:	add	r0, r4, #12
    9838:	sub	r1, r1, #6
    983c:	bl	9b40 <lell_print@@Base+0x568>
    9840:	b	9874 <lell_print@@Base+0x29c>
    9844:	ldr	r3, [r4, #84]	; 0x54
    9848:	ldr	r0, [pc, #536]	; 9a68 <lell_print@@Base+0x490>
    984c:	add	r0, pc, r0
    9850:	mov	r1, r4
    9854:	mov	r2, #6
    9858:	bl	9ab8 <lell_print@@Base+0x4e0>
    985c:	ldr	r3, [r4, #88]	; 0x58
    9860:	ldr	r0, [pc, #516]	; 9a6c <lell_print@@Base+0x494>
    9864:	add	r0, pc, r0
    9868:	mov	r1, r4
    986c:	mov	r2, #12
    9870:	bl	9ab8 <lell_print@@Base+0x4e0>
    9874:	mov	r0, #10
    9878:	bl	48e8 <putchar@plt>
    987c:	ldr	r0, [pc, #548]	; 9aa8 <lell_print@@Base+0x4d0>
    9880:	add	r0, pc, r0
    9884:	bl	4618 <printf@plt>
    9888:	ldr	r0, [r4, #72]	; 0x48
    988c:	cmp	r0, #1
    9890:	blt	98c4 <lell_print@@Base+0x2ec>
    9894:	mov	r6, #6
    9898:	ldr	r5, [pc, #524]	; 9aac <lell_print@@Base+0x4d4>
    989c:	add	r5, pc, r5
    98a0:	ldrb	r1, [r4, r6]
    98a4:	mov	r0, r5
    98a8:	bl	4618 <printf@plt>
    98ac:	add	r0, r6, #1
    98b0:	ldr	r1, [r4, #72]	; 0x48
    98b4:	add	r1, r1, #5
    98b8:	cmp	r6, r1
    98bc:	mov	r6, r0
    98c0:	blt	98a0 <lell_print@@Base+0x2c8>
    98c4:	mov	r0, #10
    98c8:	bl	48e8 <putchar@plt>
    98cc:	ldr	r0, [pc, #476]	; 9ab0 <lell_print@@Base+0x4d8>
    98d0:	add	r0, pc, r0
    98d4:	bl	4618 <printf@plt>
    98d8:	add	r6, r4, #6
    98dc:	mov	r7, #0
    98e0:	ldr	r5, [pc, #460]	; 9ab4 <lell_print@@Base+0x4dc>
    98e4:	add	r5, pc, r5
    98e8:	ldr	r0, [r4, #72]	; 0x48
    98ec:	add	r0, r6, r0
    98f0:	ldrb	r1, [r0, -r7]
    98f4:	mov	r0, r5
    98f8:	bl	4618 <printf@plt>
    98fc:	sub	r7, r7, #1
    9900:	cmn	r7, #3
    9904:	bne	98e8 <lell_print@@Base+0x310>
    9908:	mov	r0, #10
    990c:	pop	{r4, r5, r6, r7, fp, lr}
    9910:	b	48e8 <putchar@plt>
    9914:	ldr	r3, [r4, #84]	; 0x54
    9918:	ldr	r0, [pc, #348]	; 9a7c <lell_print@@Base+0x4a4>
    991c:	add	r0, pc, r0
    9920:	mov	r1, r4
    9924:	mov	r2, #6
    9928:	bl	9ab8 <lell_print@@Base+0x4e0>
    992c:	ldr	r3, [r4, #88]	; 0x58
    9930:	ldr	r0, [pc, #328]	; 9a80 <lell_print@@Base+0x4a8>
    9934:	add	r0, pc, r0
    9938:	mov	r1, r4
    993c:	mov	r2, #12
    9940:	bl	9ab8 <lell_print@@Base+0x4e0>
    9944:	mov	r0, r4
    9948:	bl	a19c <lell_print@@Base+0xbc4>
    994c:	mov	r0, r4
    9950:	bl	a1bc <lell_print@@Base+0xbe4>
    9954:	mov	r0, r4
    9958:	bl	a1f0 <lell_print@@Base+0xc18>
    995c:	ldr	r0, [pc, #288]	; 9a84 <lell_print@@Base+0x4ac>
    9960:	add	r0, pc, r0
    9964:	mov	r1, r4
    9968:	mov	r2, #26
    996c:	bl	a214 <lell_print@@Base+0xc3c>
    9970:	ldr	r0, [pc, #272]	; 9a88 <lell_print@@Base+0x4b0>
    9974:	add	r0, pc, r0
    9978:	mov	r1, r4
    997c:	mov	r2, #28
    9980:	bl	a214 <lell_print@@Base+0xc3c>
    9984:	ldr	r0, [pc, #256]	; 9a8c <lell_print@@Base+0x4b4>
    9988:	add	r0, pc, r0
    998c:	mov	r1, r4
    9990:	mov	r2, #30
    9994:	bl	a214 <lell_print@@Base+0xc3c>
    9998:	ldr	r0, [pc, #240]	; 9a90 <lell_print@@Base+0x4b8>
    999c:	add	r0, pc, r0
    99a0:	mov	r1, r4
    99a4:	mov	r2, #32
    99a8:	bl	a214 <lell_print@@Base+0xc3c>
    99ac:	ldr	r0, [pc, #224]	; 9a94 <lell_print@@Base+0x4bc>
    99b0:	add	r0, pc, r0
    99b4:	bl	4618 <printf@plt>
    99b8:	add	r6, r4, #34	; 0x22
    99bc:	mov	r7, #0
    99c0:	ldr	r5, [pc, #208]	; 9a98 <lell_print@@Base+0x4c0>
    99c4:	add	r5, pc, r5
    99c8:	ldrb	r1, [r6, -r7]
    99cc:	mov	r0, r5
    99d0:	bl	4618 <printf@plt>
    99d4:	sub	r7, r7, #1
    99d8:	cmn	r7, #5
    99dc:	bne	99c8 <lell_print@@Base+0x3f0>
    99e0:	mov	r0, #10
    99e4:	bl	48e8 <putchar@plt>
    99e8:	ldrb	r0, [r4, #39]	; 0x27
    99ec:	and	r1, r0, #31
    99f0:	ldr	r0, [pc, #164]	; 9a9c <lell_print@@Base+0x4c4>
    99f4:	add	r0, pc, r0
    99f8:	bl	4618 <printf@plt>
    99fc:	ldrb	r0, [r4, #39]	; 0x27
    9a00:	lsr	r1, r0, #5
    9a04:	ldr	r0, [pc, #148]	; 9aa0 <lell_print@@Base+0x4c8>
    9a08:	add	r0, pc, r0
    9a0c:	ldr	r2, [r0, r1, lsl #2]
    9a10:	ldr	r0, [pc, #140]	; 9aa4 <lell_print@@Base+0x4cc>
    9a14:	add	r0, pc, r0
    9a18:	b	969c <lell_print@@Base+0xc4>
    9a1c:	andeq	r5, r0, r9, asr #1
    9a20:	andeq	r5, r0, r3, asr #1
    9a24:	andeq	r5, r0, r4, lsl #1
    9a28:	muleq	r0, sp, r0
    9a2c:	andeq	fp, r1, ip, ror #15
    9a30:	muleq	r0, r8, r0
    9a34:	andeq	r5, r0, fp, lsl #1
    9a38:	andeq	fp, r1, ip, lsr #15
    9a3c:	andeq	r5, r0, r1, ror #3
    9a40:	andeq	r5, r0, r5, lsl r0
    9a44:	andeq	r5, r0, pc
    9a48:	andeq	r5, r0, r2, asr #3
    9a4c:	andeq	r4, r0, sp, ror #31
    9a50:	andeq	r5, r0, r1, asr #3
    9a54:	andeq	r5, r0, ip, lsl #3
    9a58:	andeq	r5, r0, r4, ror r1
    9a5c:	andeq	r5, r0, fp, ror r4
    9a60:	andeq	r5, r0, ip, lsl r1
    9a64:	andeq	r5, r0, r9, lsl r1
    9a68:	muleq	r0, r5, r0
    9a6c:	andeq	r5, r0, r0, rrx
    9a70:	strdeq	r5, [r0], -r4
    9a74:	andeq	r5, r0, r5, lsl #2
    9a78:	andeq	r5, r0, pc, ror #7
    9a7c:			; <UNDEFINED> instruction: 0x00004fbd
    9a80:	muleq	r0, r0, pc	; <UNPREDICTABLE>
    9a84:			; <UNDEFINED> instruction: 0x00004fb6
    9a88:	andeq	r4, r0, lr, lsr #31
    9a8c:	andeq	r4, r0, r5, lsr #31
    9a90:	muleq	r0, fp, pc	; <UNPREDICTABLE>
    9a94:	muleq	r0, r1, pc	; <UNPREDICTABLE>
    9a98:	andeq	r5, r0, pc, lsr #4
    9a9c:	andeq	r4, r0, r6, asr pc
    9aa0:	andeq	fp, r1, r4, lsl #9
    9aa4:	andeq	r4, r0, r3, asr #30
    9aa8:	andeq	r5, r0, r8, ror #1
    9aac:	andeq	r5, r0, r7, asr r3
    9ab0:	andeq	r5, r0, r3, lsr #1
    9ab4:	andeq	r5, r0, pc, lsl #6
    9ab8:	push	{r4, r5, r6, r7, fp, lr}
    9abc:	add	fp, sp, #16
    9ac0:	mov	r4, r3
    9ac4:	mov	r3, r0
    9ac8:	add	r6, r1, r2
    9acc:	ldrb	r2, [r6, #5]
    9ad0:	ldr	r0, [pc, #84]	; 9b2c <lell_print@@Base+0x554>
    9ad4:	add	r0, pc, r0
    9ad8:	mov	r1, r3
    9adc:	bl	4618 <printf@plt>
    9ae0:	mov	r7, #4
    9ae4:	ldr	r5, [pc, #68]	; 9b30 <lell_print@@Base+0x558>
    9ae8:	add	r5, pc, r5
    9aec:	ldrb	r1, [r6, r7]
    9af0:	mov	r0, r5
    9af4:	bl	4618 <printf@plt>
    9af8:	sub	r7, r7, #1
    9afc:	cmn	r7, #1
    9b00:	bne	9aec <lell_print@@Base+0x514>
    9b04:	ldr	r0, [pc, #40]	; 9b34 <lell_print@@Base+0x55c>
    9b08:	add	r0, pc, r0
    9b0c:	ldr	r1, [pc, #36]	; 9b38 <lell_print@@Base+0x560>
    9b10:	add	r1, pc, r1
    9b14:	cmp	r4, #0
    9b18:	moveq	r1, r0
    9b1c:	ldr	r0, [pc, #24]	; 9b3c <lell_print@@Base+0x564>
    9b20:	add	r0, pc, r0
    9b24:	pop	{r4, r5, r6, r7, fp, lr}
    9b28:	b	4618 <printf@plt>
    9b2c:	strdeq	r4, [r0], -ip
    9b30:	strdeq	r4, [r0], -r3
    9b34:	andeq	r4, r0, r7, ror #31
    9b38:	ldrdeq	r4, [r0], -r8
    9b3c:	andeq	r4, r0, r1, asr #31
    9b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b44:	add	fp, sp, #28
    9b48:	sub	sp, sp, #4
    9b4c:	vpush	{d8}
    9b50:	sub	sp, sp, #40	; 0x28
    9b54:	cmp	r1, #1
    9b58:	blt	a0b0 <lell_print@@Base+0xad8>
    9b5c:	mov	r3, r1
    9b60:	mov	sl, r0
    9b64:	add	r0, r0, #2
    9b68:	str	r0, [sp, #8]
    9b6c:	add	r0, sl, #4
    9b70:	str	r0, [sp, #4]
    9b74:	mov	r9, #0
    9b78:	vmov.f64	d8, #116	; 0x3fa00000  1.250
    9b7c:	str	r1, [sp, #12]
    9b80:	str	sl, [sp, #20]
    9b84:	b	9ba4 <lell_print@@Base+0x5cc>
    9b88:	mov	r0, #10
    9b8c:	bl	48e8 <putchar@plt>
    9b90:	ldr	sl, [sp, #20]
    9b94:	ldr	r3, [sp, #12]
    9b98:	ldr	r9, [sp, #16]
    9b9c:	cmp	r9, r3
    9ba0:	bge	a0b0 <lell_print@@Base+0xad8>
    9ba4:	ldrb	r8, [sl, r9]
    9ba8:	add	r1, r9, #1
    9bac:	add	r4, r1, r8
    9bb0:	cmp	r4, r3
    9bb4:	bgt	a0c0 <lell_print@@Base+0xae8>
    9bb8:	cmp	r8, #0
    9bbc:	beq	a0e0 <lell_print@@Base+0xb08>
    9bc0:	ldr	r0, [sp, #20]
    9bc4:	ldrb	r7, [r0, r1]
    9bc8:	ldr	r0, [pc, #1324]	; a0fc <lell_print@@Base+0xb24>
    9bcc:	add	r0, pc, r0
    9bd0:	mov	r1, r7
    9bd4:	bl	4618 <printf@plt>
    9bd8:	sub	r0, r7, #1
    9bdc:	cmp	r0, #21
    9be0:	str	r4, [sp, #16]
    9be4:	bhi	9cfc <lell_print@@Base+0x724>
    9be8:	add	r2, pc, #20
    9bec:	ldr	r3, [r2, r0, lsl #2]
    9bf0:	ldr	r0, [pc, #1296]	; a108 <lell_print@@Base+0xb30>
    9bf4:	add	r0, pc, r0
    9bf8:	ldr	r1, [pc, #1292]	; a10c <lell_print@@Base+0xb34>
    9bfc:	add	r1, pc, r1
    9c00:	add	pc, r2, r3
    9c04:	andeq	r0, r0, r8, asr r0
    9c08:	andeq	r0, r0, r0, ror #3
    9c0c:	ldrdeq	r0, [r0], -r8
    9c10:	muleq	r0, r0, r1
    9c14:	muleq	r0, r0, r1
    9c18:	andeq	r0, r0, r8, lsr r2
    9c1c:	andeq	r0, r0, r0, lsr r2
    9c20:	muleq	r0, r0, r1
    9c24:	andeq	r0, r0, r8, asr r2
    9c28:			; <UNDEFINED> instruction: 0x000002b4
    9c2c:	muleq	r0, r0, r1
    9c30:	muleq	r0, r0, r1
    9c34:	muleq	r0, r0, r1
    9c38:	muleq	r0, r0, r1
    9c3c:	muleq	r0, r0, r1
    9c40:	muleq	r0, r0, r1
    9c44:	muleq	r0, r0, r1
    9c48:	strdeq	r0, [r0], -r4
    9c4c:	muleq	r0, r0, r1
    9c50:	muleq	r0, r0, r1
    9c54:	muleq	r0, r0, r1
    9c58:	andeq	r0, r0, r4, ror r3
    9c5c:	ldr	r0, [pc, #1196]	; a110 <lell_print@@Base+0xb38>
    9c60:	add	r0, pc, r0
    9c64:	bl	47c8 <puts@plt>
    9c68:	ldr	r0, [pc, #1188]	; a114 <lell_print@@Base+0xb3c>
    9c6c:	add	r0, pc, r0
    9c70:	bl	4618 <printf@plt>
    9c74:	add	r7, r9, #2
    9c78:	mov	r4, #7
    9c7c:	mov	r6, #1
    9c80:	ldr	r8, [pc, #1168]	; a118 <lell_print@@Base+0xb40>
    9c84:	add	r8, pc, r8
    9c88:	ldr	sl, [sp, #20]
    9c8c:	ldrb	r0, [sl, r7]
    9c90:	and	r1, r0, r6, lsl r4
    9c94:	cmp	r1, #0
    9c98:	movwne	r1, #1
    9c9c:	mov	r0, r8
    9ca0:	bl	4618 <printf@plt>
    9ca4:	sub	r4, r4, #1
    9ca8:	cmn	r4, #1
    9cac:	bne	9c8c <lell_print@@Base+0x6b4>
    9cb0:	mov	r0, #10
    9cb4:	bl	48e8 <putchar@plt>
    9cb8:	mov	r4, #0
    9cbc:	ldr	r8, [pc, #1112]	; a11c <lell_print@@Base+0xb44>
    9cc0:	add	r8, pc, r8
    9cc4:	ldr	r9, [pc, #1108]	; a120 <lell_print@@Base+0xb48>
    9cc8:	add	r9, pc, r9
    9ccc:	b	9cdc <lell_print@@Base+0x704>
    9cd0:	add	r4, r4, #1
    9cd4:	cmp	r4, #8
    9cd8:	beq	a004 <lell_print@@Base+0xa2c>
    9cdc:	ldrb	r0, [sl, r7]
    9ce0:	tst	r0, r6, lsl r4
    9ce4:	beq	9cd0 <lell_print@@Base+0x6f8>
    9ce8:	mov	r0, r8
    9cec:	bl	4618 <printf@plt>
    9cf0:	ldr	r0, [r9, r4, lsl #2]
    9cf4:	bl	47c8 <puts@plt>
    9cf8:	b	9cd0 <lell_print@@Base+0x6f8>
    9cfc:	cmp	r7, #255	; 0xff
    9d00:	bne	9d94 <lell_print@@Base+0x7bc>
    9d04:	ldr	r0, [pc, #1136]	; a17c <lell_print@@Base+0xba4>
    9d08:	add	r0, pc, r0
    9d0c:	bl	47c8 <puts@plt>
    9d10:	ldr	r4, [pc, #1128]	; a180 <lell_print@@Base+0xba8>
    9d14:	add	r4, pc, r4
    9d18:	mov	r0, r4
    9d1c:	bl	4618 <printf@plt>
    9d20:	sub	r1, r8, #1
    9d24:	cmp	r1, #2
    9d28:	blt	a0a4 <lell_print@@Base+0xacc>
    9d2c:	ldr	r0, [sp, #20]
    9d30:	add	r0, r9, r0
    9d34:	ldrh	r0, [r0, #2]
    9d38:	bl	4924 <bt_compidtostr@plt>
    9d3c:	mov	r1, r0
    9d40:	ldr	r0, [pc, #1084]	; a184 <lell_print@@Base+0xbac>
    9d44:	add	r0, pc, r0
    9d48:	bl	4618 <printf@plt>
    9d4c:	mov	r0, r4
    9d50:	bl	4618 <printf@plt>
    9d54:	ldr	r0, [pc, #1068]	; a188 <lell_print@@Base+0xbb0>
    9d58:	add	r0, pc, r0
    9d5c:	bl	4618 <printf@plt>
    9d60:	cmp	r8, #4
    9d64:	ldr	r7, [pc, #1056]	; a18c <lell_print@@Base+0xbb4>
    9d68:	add	r7, pc, r7
    9d6c:	bcc	9b88 <lell_print@@Base+0x5b0>
    9d70:	ldr	r0, [sp, #4]
    9d74:	add	r4, r0, r9
    9d78:	sub	r6, r8, #3
    9d7c:	ldrb	r1, [r4], #1
    9d80:	mov	r0, r7
    9d84:	bl	4618 <printf@plt>
    9d88:	subs	r6, r6, #1
    9d8c:	bne	9d7c <lell_print@@Base+0x7a4>
    9d90:	b	9b88 <lell_print@@Base+0x5b0>
    9d94:	mov	r0, #10
    9d98:	bl	48e8 <putchar@plt>
    9d9c:	ldr	r0, [pc, #860]	; a100 <lell_print@@Base+0xb28>
    9da0:	add	r0, pc, r0
    9da4:	bl	4618 <printf@plt>
    9da8:	cmp	r8, #2
    9dac:	ldr	r7, [pc, #848]	; a104 <lell_print@@Base+0xb2c>
    9db0:	add	r7, pc, r7
    9db4:	bcc	9b88 <lell_print@@Base+0x5b0>
    9db8:	ldr	r0, [sp, #8]
    9dbc:	add	r4, r0, r9
    9dc0:	sub	r6, r8, #1
    9dc4:	ldrb	r1, [r4], #1
    9dc8:	mov	r0, r7
    9dcc:	bl	4618 <printf@plt>
    9dd0:	subs	r6, r6, #1
    9dd4:	bne	9dc4 <lell_print@@Base+0x7ec>
    9dd8:	b	9b88 <lell_print@@Base+0x5b0>
    9ddc:	ldr	r0, [pc, #832]	; a124 <lell_print@@Base+0xb4c>
    9de0:	add	r0, pc, r0
    9de4:	bl	47c8 <puts@plt>
    9de8:	sub	r4, r8, #1
    9dec:	tst	r4, #1
    9df0:	ldr	sl, [sp, #20]
    9df4:	ldr	r5, [pc, #812]	; a128 <lell_print@@Base+0xb50>
    9df8:	add	r5, pc, r5
    9dfc:	bne	9b94 <lell_print@@Base+0x5bc>
    9e00:	cmp	r4, #1
    9e04:	blt	9b94 <lell_print@@Base+0x5bc>
    9e08:	ldr	r0, [sp, #8]
    9e0c:	add	r6, r0, r9
    9e10:	mov	r7, #0
    9e14:	add	r0, r6, r7
    9e18:	ldrh	r1, [r0]
    9e1c:	mov	r0, r5
    9e20:	bl	4618 <printf@plt>
    9e24:	add	r7, r7, #2
    9e28:	cmp	r7, r4
    9e2c:	blt	9e14 <lell_print@@Base+0x83c>
    9e30:	b	9b94 <lell_print@@Base+0x5bc>
    9e34:	ldr	r1, [pc, #752]	; a12c <lell_print@@Base+0xb54>
    9e38:	add	r1, pc, r1
    9e3c:	mov	r0, r1
    9e40:	bl	47c8 <puts@plt>
    9e44:	sub	r7, r8, #1
    9e48:	tst	r7, #15
    9e4c:	beq	a010 <lell_print@@Base+0xa38>
    9e50:	ldr	r0, [pc, #732]	; a134 <lell_print@@Base+0xb5c>
    9e54:	add	r0, pc, r0
    9e58:	b	a098 <lell_print@@Base+0xac0>
    9e5c:	ldr	r0, [pc, #724]	; a138 <lell_print@@Base+0xb60>
    9e60:	add	r0, pc, r0
    9e64:	bl	47c8 <puts@plt>
    9e68:	ldr	r0, [pc, #716]	; a13c <lell_print@@Base+0xb64>
    9e6c:	add	r0, pc, r0
    9e70:	bl	4618 <printf@plt>
    9e74:	cmp	r8, #2
    9e78:	bcc	9b88 <lell_print@@Base+0x5b0>
    9e7c:	ldr	r0, [sp, #8]
    9e80:	add	r4, r0, r9
    9e84:	sub	r6, r8, #1
    9e88:	bl	481c <__ctype_b_loc@plt>
    9e8c:	mov	r7, r0
    9e90:	ldrb	r0, [r4], #1
    9e94:	ldr	r1, [r7]
    9e98:	add	r1, r1, r0, lsl #1
    9e9c:	ldrh	r1, [r1]
    9ea0:	tst	r1, #16384	; 0x4000
    9ea4:	movweq	r0, #46	; 0x2e
    9ea8:	bl	48e8 <putchar@plt>
    9eac:	subs	r6, r6, #1
    9eb0:	bne	9e90 <lell_print@@Base+0x8b8>
    9eb4:	b	9b88 <lell_print@@Base+0x5b0>
    9eb8:	ldr	r0, [pc, #640]	; a140 <lell_print@@Base+0xb68>
    9ebc:	add	r0, pc, r0
    9ec0:	bl	47c8 <puts@plt>
    9ec4:	ldr	r0, [pc, #632]	; a144 <lell_print@@Base+0xb6c>
    9ec8:	add	r0, pc, r0
    9ecc:	bl	4618 <printf@plt>
    9ed0:	sub	r1, r8, #1
    9ed4:	cmp	r1, #1
    9ed8:	bne	a078 <lell_print@@Base+0xaa0>
    9edc:	ldr	sl, [sp, #20]
    9ee0:	add	r0, r9, sl
    9ee4:	ldrb	r1, [r0, #2]
    9ee8:	ldr	r0, [pc, #600]	; a148 <lell_print@@Base+0xb70>
    9eec:	add	r0, pc, r0
    9ef0:	bl	4618 <printf@plt>
    9ef4:	b	9b94 <lell_print@@Base+0x5bc>
    9ef8:	ldr	r0, [pc, #592]	; a150 <lell_print@@Base+0xb78>
    9efc:	add	r0, pc, r0
    9f00:	bl	47c8 <puts@plt>
    9f04:	ldr	r0, [pc, #584]	; a154 <lell_print@@Base+0xb7c>
    9f08:	add	r0, pc, r0
    9f0c:	bl	4618 <printf@plt>
    9f10:	sub	r1, r8, #1
    9f14:	cmp	r1, #4
    9f18:	bne	a084 <lell_print@@Base+0xaac>
    9f1c:	ldr	sl, [sp, #20]
    9f20:	add	r4, r9, sl
    9f24:	ldrb	r0, [r4, #2]
    9f28:	ldrb	r1, [r4, #3]
    9f2c:	orr	r0, r0, r1, lsl #8
    9f30:	vmov	s0, r0
    9f34:	vcvt.f64.s32	d16, s0
    9f38:	vmul.f64	d16, d16, d8
    9f3c:	vmov	r2, r3, d16
    9f40:	ldr	r0, [pc, #528]	; a158 <lell_print@@Base+0xb80>
    9f44:	add	r0, pc, r0
    9f48:	bl	4618 <printf@plt>
    9f4c:	ldrb	r0, [r4, #4]
    9f50:	ldrb	r1, [r4, #5]
    9f54:	orr	r0, r0, r1, lsl #8
    9f58:	vmov	s0, r0
    9f5c:	vcvt.f64.s32	d16, s0
    9f60:	vmul.f64	d16, d16, d8
    9f64:	vmov	r2, r3, d16
    9f68:	ldr	r0, [pc, #492]	; a15c <lell_print@@Base+0xb84>
    9f6c:	add	r0, pc, r0
    9f70:	bl	4618 <printf@plt>
    9f74:	b	9b94 <lell_print@@Base+0x5bc>
    9f78:	ldr	r0, [pc, #484]	; a164 <lell_print@@Base+0xb8c>
    9f7c:	add	r0, pc, r0
    9f80:	bl	47c8 <puts@plt>
    9f84:	ldr	r0, [pc, #476]	; a168 <lell_print@@Base+0xb90>
    9f88:	add	r0, pc, r0
    9f8c:	bl	4618 <printf@plt>
    9f90:	sub	r7, r8, #1
    9f94:	cmp	r7, #2
    9f98:	blt	a090 <lell_print@@Base+0xab8>
    9f9c:	ldr	r0, [sp, #20]
    9fa0:	add	r0, r9, r0
    9fa4:	ldrb	r1, [r0, #2]
    9fa8:	ldrb	r0, [r0, #3]
    9fac:	orr	r1, r1, r0, lsl #8
    9fb0:	ldr	r0, [pc, #436]	; a16c <lell_print@@Base+0xb94>
    9fb4:	add	r0, pc, r0
    9fb8:	bl	4618 <printf@plt>
    9fbc:	cmp	r7, #2
    9fc0:	ldr	r7, [pc, #424]	; a170 <lell_print@@Base+0xb98>
    9fc4:	add	r7, pc, r7
    9fc8:	beq	9b88 <lell_print@@Base+0x5b0>
    9fcc:	ldr	r0, [pc, #416]	; a174 <lell_print@@Base+0xb9c>
    9fd0:	add	r0, pc, r0
    9fd4:	bl	4618 <printf@plt>
    9fd8:	cmp	r8, #4
    9fdc:	bcc	9b88 <lell_print@@Base+0x5b0>
    9fe0:	ldr	r0, [sp, #4]
    9fe4:	add	r4, r0, r9
    9fe8:	sub	r6, r8, #3
    9fec:	ldrb	r1, [r4], #1
    9ff0:	mov	r0, r7
    9ff4:	bl	4618 <printf@plt>
    9ff8:	subs	r6, r6, #1
    9ffc:	bne	9fec <lell_print@@Base+0xa14>
    a000:	b	9b88 <lell_print@@Base+0x5b0>
    a004:	mov	r0, #10
    a008:	bl	48e8 <putchar@plt>
    a00c:	b	9b94 <lell_print@@Base+0x5bc>
    a010:	cmp	r7, #1
    a014:	ldr	r8, [pc, #276]	; a130 <lell_print@@Base+0xb58>
    a018:	add	r8, pc, r8
    a01c:	ldr	sl, [sp, #20]
    a020:	add	r5, sp, #24
    a024:	blt	9b94 <lell_print@@Base+0x5bc>
    a028:	ldr	r0, [sp, #8]
    a02c:	add	r4, r0, r9
    a030:	mov	r6, #0
    a034:	b	a044 <lell_print@@Base+0xa6c>
    a038:	add	r6, r6, #1
    a03c:	cmp	r7, r6
    a040:	beq	9b94 <lell_print@@Base+0x5bc>
    a044:	ldrb	r0, [r4, r6]
    a048:	and	r1, r6, #15
    a04c:	eor	r2, r1, #15
    a050:	strb	r0, [r5, r2]
    a054:	cmp	r1, #15
    a058:	bne	a038 <lell_print@@Base+0xa60>
    a05c:	mov	r0, r8
    a060:	bl	4618 <printf@plt>
    a064:	mov	r0, r5
    a068:	bl	a260 <lell_print@@Base+0xc88>
    a06c:	mov	r0, #10
    a070:	bl	48e8 <putchar@plt>
    a074:	b	a038 <lell_print@@Base+0xa60>
    a078:	ldr	r0, [pc, #204]	; a14c <lell_print@@Base+0xb74>
    a07c:	add	r0, pc, r0
    a080:	b	a09c <lell_print@@Base+0xac4>
    a084:	ldr	r0, [pc, #212]	; a160 <lell_print@@Base+0xb88>
    a088:	add	r0, pc, r0
    a08c:	b	a09c <lell_print@@Base+0xac4>
    a090:	ldr	r0, [pc, #224]	; a178 <lell_print@@Base+0xba0>
    a094:	add	r0, pc, r0
    a098:	mov	r1, r7
    a09c:	bl	4618 <printf@plt>
    a0a0:	b	9b90 <lell_print@@Base+0x5b8>
    a0a4:	ldr	r0, [pc, #228]	; a190 <lell_print@@Base+0xbb8>
    a0a8:	add	r0, pc, r0
    a0ac:	b	a09c <lell_print@@Base+0xac4>
    a0b0:	sub	sp, fp, #40	; 0x28
    a0b4:	vpop	{d8}
    a0b8:	add	sp, sp, #4
    a0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0c0:	ldr	r0, [pc, #204]	; a194 <lell_print@@Base+0xbbc>
    a0c4:	add	r0, pc, r0
    a0c8:	mov	r2, r8
    a0cc:	sub	sp, fp, #40	; 0x28
    a0d0:	vpop	{d8}
    a0d4:	add	sp, sp, #4
    a0d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0dc:	b	4618 <printf@plt>
    a0e0:	ldr	r0, [pc, #176]	; a198 <lell_print@@Base+0xbc0>
    a0e4:	add	r0, pc, r0
    a0e8:	sub	sp, fp, #40	; 0x28
    a0ec:	vpop	{d8}
    a0f0:	add	sp, sp, #4
    a0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0f8:	b	47c8 <puts@plt>
    a0fc:	andeq	r4, r0, r4, ror #30
    a100:	andeq	r4, r0, r9, lsr #27
    a104:	andeq	r4, r0, r3, asr #28
    a108:	andeq	r5, r0, r7, lsr #5
    a10c:	andeq	r5, r0, sp, asr r2
    a110:	andeq	r5, r0, r3, ror #4
    a114:	ldrdeq	r4, [r0], -sp
    a118:			; <UNDEFINED> instruction: 0x00004ebe
    a11c:	andeq	r4, r0, r5, lsl #29
    a120:	andeq	fp, r1, r4, ror #3
    a124:	andeq	r5, r0, r2, lsr #1
    a128:	andeq	r4, r0, sp, asr sp
    a12c:	andeq	r5, r0, r8
    a130:	andeq	r4, r0, r1, lsr fp
    a134:	andeq	r4, r0, r2, lsl sp
    a138:	andeq	r4, r0, r9, asr #31
    a13c:	ldrdeq	r4, [r0], -sp
    a140:	andeq	r4, r0, fp, asr pc
    a144:	andeq	r4, r0, r1, lsl #25
    a148:	andeq	r4, r0, r6, lsr #25
    a14c:	andeq	r4, r0, lr, lsl fp
    a150:	strdeq	r4, [r0], -r8
    a154:	andeq	r4, r0, r1, asr #24
    a158:	andeq	r4, r0, r6, ror ip
    a15c:	andeq	r4, r0, r7, asr ip
    a160:	andeq	r4, r0, r6, asr #22
    a164:	andeq	r4, r0, r8, ror #28
    a168:	andeq	r4, r0, r1, asr #23
    a16c:	andeq	r4, r0, sl, lsr ip
    a170:	andeq	r4, r0, pc, lsr #24
    a174:	andeq	r4, r0, r9, lsr #24
    a178:	andeq	r4, r0, r3, ror fp
    a17c:	strheq	r5, [r0], -lr
    a180:	andeq	r4, r0, r5, lsr lr
    a184:	andeq	r4, r0, r6, ror #29
    a188:	muleq	r0, ip, fp
    a18c:	andeq	r4, r0, fp, lsl #29
    a190:	andeq	r4, r0, pc, asr fp
    a194:	andeq	r4, r0, r2, lsr sl
    a198:	andeq	r4, r0, r8, ror #27
    a19c:	ldr	r2, [r0, #18]
    a1a0:	ldr	r0, [pc, #12]	; a1b4 <lell_print@@Base+0xbdc>
    a1a4:	add	r0, pc, r0
    a1a8:	ldr	r1, [pc, #8]	; a1b8 <lell_print@@Base+0xbe0>
    a1ac:	add	r1, pc, r1
    a1b0:	b	4618 <printf@plt>
    a1b4:	andeq	r4, r0, sl, asr fp
    a1b8:	andeq	r4, r0, lr, asr #14
    a1bc:	ldrb	r1, [r0, #22]
    a1c0:	ldrb	r2, [r0, #23]
    a1c4:	ldrb	r0, [r0, #24]
    a1c8:	lsl	r2, r2, #8
    a1cc:	orr	r0, r2, r0, lsl #16
    a1d0:	orr	r2, r0, r1
    a1d4:	ldr	r0, [pc, #12]	; a1e8 <lell_print@@Base+0xc10>
    a1d8:	add	r0, pc, r0
    a1dc:	ldr	r1, [pc, #8]	; a1ec <lell_print@@Base+0xc14>
    a1e0:	add	r1, pc, r1
    a1e4:	b	4618 <printf@plt>
    a1e8:	andeq	r4, r0, r2, lsr fp
    a1ec:	andeq	r4, r0, r2, lsr #14
    a1f0:	ldrb	r2, [r0, #25]
    a1f4:	ldr	r0, [pc, #16]	; a20c <lell_print@@Base+0xc34>
    a1f8:	add	r0, pc, r0
    a1fc:	ldr	r1, [pc, #12]	; a210 <lell_print@@Base+0xc38>
    a200:	add	r1, pc, r1
    a204:	mov	r3, r2
    a208:	b	4618 <printf@plt>
    a20c:	andeq	r4, r0, lr, lsl fp
    a210:	andeq	r4, r0, ip, lsl #14
    a214:	mov	r3, r0
    a218:	ldrb	r0, [r1, r2]!
    a21c:	ldrb	r1, [r1, #1]
    a220:	orr	r2, r0, r1, lsl #8
    a224:	ldr	r0, [pc, #12]	; a238 <lell_print@@Base+0xc60>
    a228:	add	r0, pc, r0
    a22c:	mov	r1, r3
    a230:	mov	r3, r2
    a234:	b	4618 <printf@plt>
    a238:	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    a23c:	mov	r1, #0
    a240:	cmp	r0, #0
    a244:	beq	a258 <lell_print@@Base+0xc80>
    a248:	sub	r2, r0, #1
    a24c:	ands	r0, r2, r0
    a250:	add	r1, r1, #1
    a254:	bne	a248 <lell_print@@Base+0xc70>
    a258:	uxtb	r0, r1
    a25c:	bx	lr
    a260:	push	{r4, r5, r6, r7, fp, lr}
    a264:	add	fp, sp, #16
    a268:	mov	r4, r0
    a26c:	mov	r6, #0
    a270:	ldr	r5, [pc, #220]	; a354 <lell_print@@Base+0xd7c>
    a274:	add	r5, pc, r5
    a278:	ldrb	r1, [r4, r6]
    a27c:	mov	r0, r5
    a280:	bl	4618 <printf@plt>
    a284:	add	r6, r6, #1
    a288:	cmp	r6, #4
    a28c:	bne	a278 <lell_print@@Base+0xca0>
    a290:	mov	r0, #45	; 0x2d
    a294:	bl	48e8 <putchar@plt>
    a298:	add	r6, r4, #4
    a29c:	mov	r7, #0
    a2a0:	ldr	r5, [pc, #176]	; a358 <lell_print@@Base+0xd80>
    a2a4:	add	r5, pc, r5
    a2a8:	ldrb	r1, [r6, r7]
    a2ac:	mov	r0, r5
    a2b0:	bl	4618 <printf@plt>
    a2b4:	add	r7, r7, #1
    a2b8:	cmp	r7, #2
    a2bc:	bne	a2a8 <lell_print@@Base+0xcd0>
    a2c0:	mov	r0, #45	; 0x2d
    a2c4:	bl	48e8 <putchar@plt>
    a2c8:	add	r6, r4, #6
    a2cc:	mov	r7, #0
    a2d0:	ldr	r5, [pc, #132]	; a35c <lell_print@@Base+0xd84>
    a2d4:	add	r5, pc, r5
    a2d8:	ldrb	r1, [r6, r7]
    a2dc:	mov	r0, r5
    a2e0:	bl	4618 <printf@plt>
    a2e4:	add	r7, r7, #1
    a2e8:	cmp	r7, #2
    a2ec:	bne	a2d8 <lell_print@@Base+0xd00>
    a2f0:	mov	r0, #45	; 0x2d
    a2f4:	bl	48e8 <putchar@plt>
    a2f8:	add	r6, r4, #8
    a2fc:	mov	r7, #0
    a300:	ldr	r5, [pc, #88]	; a360 <lell_print@@Base+0xd88>
    a304:	add	r5, pc, r5
    a308:	ldrb	r1, [r6, r7]
    a30c:	mov	r0, r5
    a310:	bl	4618 <printf@plt>
    a314:	add	r7, r7, #1
    a318:	cmp	r7, #2
    a31c:	bne	a308 <lell_print@@Base+0xd30>
    a320:	mov	r0, #45	; 0x2d
    a324:	bl	48e8 <putchar@plt>
    a328:	add	r5, r4, #10
    a32c:	mov	r6, #0
    a330:	ldr	r4, [pc, #44]	; a364 <lell_print@@Base+0xd8c>
    a334:	add	r4, pc, r4
    a338:	ldrb	r1, [r5, -r6]
    a33c:	mov	r0, r4
    a340:	bl	4618 <printf@plt>
    a344:	sub	r6, r6, #1
    a348:	cmn	r6, #6
    a34c:	bne	a338 <lell_print@@Base+0xd60>
    a350:	pop	{r4, r5, r6, r7, fp, pc}
    a354:	andeq	r4, r0, r0, lsl #19
    a358:	andeq	r4, r0, r0, asr r9
    a35c:	andeq	r4, r0, r0, lsr #18
    a360:	strdeq	r4, [r0], -r0
    a364:	andeq	r4, r0, r0, asr #17

0000a368 <bt_compidtostr@@Base>:
    a368:	add	r0, r0, #1
    a36c:	uxth	r1, r0
    a370:	movw	r2, #1038	; 0x40e
    a374:	cmp	r1, r2
    a378:	bhi	a390 <bt_compidtostr@@Base+0x28>
    a37c:	sxth	r0, r0
    a380:	ldr	r1, [pc, #20]	; a39c <bt_compidtostr@@Base+0x34>
    a384:	add	r1, pc, r1
    a388:	ldr	r0, [r1, r0, lsl #2]
    a38c:	bx	lr
    a390:	ldr	r0, [pc, #8]	; a3a0 <bt_compidtostr@@Base+0x38>
    a394:	add	r0, pc, r0
    a398:	bx	lr
    a39c:	andeq	sl, r1, r8, asr #22
    a3a0:	andeq	r9, r0, r0, asr #21

0000a3a4 <btbb_pcap_open@@Base>:
    a3a4:	push	{r4, sl, fp, lr}
    a3a8:	add	fp, sp, #8
    a3ac:	sub	sp, sp, #24
    a3b0:	str	r1, [sp, #20]
    a3b4:	str	r2, [sp, #16]
    a3b8:	mov	r1, #0
    a3bc:	str	r1, [sp, #12]
    a3c0:	str	r1, [sp, #8]
    a3c4:	movw	r1, #2
    a3c8:	movt	r1, #4
    a3cc:	str	r1, [sp, #4]
    a3d0:	movw	r1, #15437	; 0x3c4d
    a3d4:	movt	r1, #41394	; 0xa1b2
    a3d8:	str	r1, [sp]
    a3dc:	ldr	r1, [pc, #48]	; a414 <btbb_pcap_open@@Base+0x70>
    a3e0:	add	r1, pc, r1
    a3e4:	bl	4624 <fopen@plt>
    a3e8:	mov	r4, r0
    a3ec:	cmp	r0, #0
    a3f0:	beq	a408 <btbb_pcap_open@@Base+0x64>
    a3f4:	mov	r0, sp
    a3f8:	mov	r1, #24
    a3fc:	mov	r2, #1
    a400:	mov	r3, r4
    a404:	bl	4768 <fwrite@plt>
    a408:	mov	r0, r4
    a40c:	sub	sp, fp, #8
    a410:	pop	{r4, sl, fp, pc}
    a414:	andeq	r9, r0, r1, lsl #21

0000a418 <btbb_pcap_create_file@@Base>:
    a418:	push	{r4, r5, r6, r7, fp, lr}
    a41c:	add	fp, sp, #16
    a420:	mov	r6, r1
    a424:	mov	r7, r0
    a428:	mov	r0, #4
    a42c:	bl	47d4 <malloc@plt>
    a430:	mov	r4, r0
    a434:	cmp	r0, #0
    a438:	beq	a47c <btbb_pcap_create_file@@Base+0x64>
    a43c:	mov	r5, #0
    a440:	str	r5, [r4]
    a444:	mov	r0, r7
    a448:	mov	r1, #255	; 0xff
    a44c:	mov	r2, #400	; 0x190
    a450:	bl	46e4 <btbb_pcap_open@plt>
    a454:	str	r0, [r4]
    a458:	cmp	r0, #0
    a45c:	strne	r4, [r6]
    a460:	movne	r0, r5
    a464:	popne	{r4, r5, r6, r7, fp, pc}
    a468:	ldr	r0, [pc, #32]	; a490 <btbb_pcap_create_file@@Base+0x78>
    a46c:	add	r0, pc, r0
    a470:	bl	4738 <perror@plt>
    a474:	mvn	r5, #1
    a478:	b	a480 <btbb_pcap_create_file@@Base+0x68>
    a47c:	mvn	r5, #2
    a480:	mov	r0, r4
    a484:	bl	4780 <btbb_pcap_close@plt>
    a488:	mov	r0, r5
    a48c:	pop	{r4, r5, r6, r7, fp, pc}
    a490:	strdeq	r9, [r0], -r7

0000a494 <btbb_pcap_close@@Base>:
    a494:	cmp	r0, #0
    a498:	mvneq	r0, #0
    a49c:	bxeq	lr
    a4a0:	push	{r4, sl, fp, lr}
    a4a4:	add	fp, sp, #8
    a4a8:	mov	r4, r0
    a4ac:	ldr	r0, [r0]
    a4b0:	cmp	r0, #0
    a4b4:	beq	a4bc <btbb_pcap_close@@Base+0x28>
    a4b8:	bl	4954 <fclose@plt>
    a4bc:	mov	r0, r4
    a4c0:	bl	4660 <free@plt>
    a4c4:	mov	r0, #0
    a4c8:	pop	{r4, sl, fp, pc}

0000a4cc <btbb_pcap_dump@@Base>:
    a4cc:	push	{r4, r5, r6, sl, fp, lr}
    a4d0:	add	fp, sp, #16
    a4d4:	mov	r4, r2
    a4d8:	mov	r5, r1
    a4dc:	mov	r6, r0
    a4e0:	mov	r0, r1
    a4e4:	mov	r1, #16
    a4e8:	mov	r2, #1
    a4ec:	mov	r3, r6
    a4f0:	bl	4768 <fwrite@plt>
    a4f4:	ldr	r1, [r5, #8]
    a4f8:	mov	r0, r4
    a4fc:	mov	r2, #1
    a500:	mov	r3, r6
    a504:	bl	4768 <fwrite@plt>
    a508:	mov	r0, r6
    a50c:	pop	{r4, r5, r6, sl, fp, lr}
    a510:	b	463c <fflush@plt>

0000a514 <btbb_pcap_append_packet@@Base>:
    a514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a518:	add	fp, sp, #28
    a51c:	sub	sp, sp, #468	; 0x1d4
    a520:	mov	r4, r0
    a524:	mvn	r0, #0
    a528:	cmp	r4, #0
    a52c:	beq	a664 <btbb_pcap_append_packet@@Base+0x150>
    a530:	ldr	r1, [r4]
    a534:	cmp	r1, #0
    a538:	beq	a664 <btbb_pcap_append_packet@@Base+0x150>
    a53c:	ldr	r5, [fp, #24]
    a540:	ldr	r6, [fp, #16]
    a544:	mov	r0, r5
    a548:	str	r3, [fp, #-480]	; 0xfffffe20
    a54c:	str	r2, [fp, #-484]	; 0xfffffe1c
    a550:	bl	4834 <btbb_packet_get_payload_length@plt>
    a554:	mov	r7, r0
    a558:	str	sp, [fp, #-476]	; 0xfffffe24
    a55c:	add	r0, r0, #7
    a560:	bic	r0, r0, #7
    a564:	sub	sl, sp, r0
    a568:	mov	sp, sl
    a56c:	mov	r0, r5
    a570:	mov	r1, sl
    a574:	bl	460c <btbb_get_payload_packed@plt>
    a578:	mov	r0, r5
    a57c:	bl	4984 <btbb_packet_get_channel@plt>
    a580:	str	r0, [fp, #-488]	; 0xfffffe18
    a584:	mov	r0, r5
    a588:	bl	4678 <btbb_packet_get_ac_errors@plt>
    a58c:	str	r0, [fp, #-492]	; 0xfffffe14
    a590:	mov	r0, r5
    a594:	bl	48b8 <btbb_packet_get_transport@plt>
    a598:	str	r0, [fp, #-496]	; 0xfffffe10
    a59c:	mov	r0, r5
    a5a0:	bl	466c <btbb_packet_get_modulation@plt>
    a5a4:	mov	r9, r0
    a5a8:	mov	r0, r5
    a5ac:	bl	490c <btbb_packet_get_lap@plt>
    a5b0:	mov	r8, r0
    a5b4:	mov	r0, r5
    a5b8:	bl	4870 <btbb_packet_get_header_packed@plt>
    a5bc:	sub	sp, sp, #56	; 0x38
    a5c0:	str	sl, [sp, #48]	; 0x30
    a5c4:	mov	r1, #3
    a5c8:	ldr	ip, [fp, #12]
    a5cc:	ldr	r5, [fp, #8]
    a5d0:	cmp	ip, r5
    a5d4:	movwlt	r1, #7
    a5d8:	mvn	r2, #0
    a5dc:	subs	r2, r6, r2
    a5e0:	movwne	r2, #1
    a5e4:	orr	r1, r1, r2, lsl #4
    a5e8:	ldr	r3, [fp, #20]
    a5ec:	subs	r2, r3, #255	; 0xff
    a5f0:	movwne	r2, #1
    a5f4:	orr	r1, r1, r2, lsl #7
    a5f8:	str	r1, [sp, #44]	; 0x2c
    a5fc:	str	r0, [sp, #40]	; 0x28
    a600:	str	r3, [sp, #36]	; 0x24
    a604:	str	r6, [sp, #32]
    a608:	cmp	r7, #400	; 0x190
    a60c:	movcs	r7, #400	; 0x190
    a610:	str	r7, [sp]
    a614:	ldr	r0, [fp, #-488]	; 0xfffffe18
    a618:	stmib	sp, {r0, r5, ip}
    a61c:	ldr	r0, [fp, #-492]	; 0xfffffe14
    a620:	str	r0, [sp, #16]
    a624:	ldr	r0, [fp, #-496]	; 0xfffffe10
    a628:	str	r0, [sp, #20]
    a62c:	str	r9, [sp, #24]
    a630:	str	r8, [sp, #28]
    a634:	sub	r5, fp, #472	; 0x1d8
    a638:	mov	r0, r5
    a63c:	ldr	r2, [fp, #-484]	; 0xfffffe1c
    a640:	ldr	r3, [fp, #-480]	; 0xfffffe20
    a644:	bl	a66c <btbb_pcap_append_packet@@Base+0x158>
    a648:	add	sp, sp, #56	; 0x38
    a64c:	ldr	r0, [r4]
    a650:	add	r2, r5, #16
    a654:	mov	r1, r5
    a658:	bl	47f8 <btbb_pcap_dump@plt>
    a65c:	mov	r0, #0
    a660:	ldr	sp, [fp, #-476]	; 0xfffffe24
    a664:	sub	sp, fp, #28
    a668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a66c:	push	{r4, r5, r6, sl, fp, lr}
    a670:	add	fp, sp, #16
    a674:	mov	r1, r3
    a678:	mov	r5, r2
    a67c:	mov	r4, r0
    a680:	mov	r0, #0
    a684:	strh	r0, [r4, #22]
    a688:	strb	r0, [r4, #21]
    a68c:	movw	r6, #51712	; 0xca00
    a690:	movt	r6, #15258	; 0x3b9a
    a694:	mov	r0, r2
    a698:	mov	r2, r6
    a69c:	mov	r3, #0
    a6a0:	bl	bae8 <lell_pcapng_close@@Base+0xb8>
    a6a4:	str	r0, [r4]
    a6a8:	ldr	r1, [fp, #24]
    a6ac:	strb	r1, [r4, #19]
    a6b0:	ldr	r1, [fp, #20]
    a6b4:	strb	r1, [r4, #18]
    a6b8:	ldr	r1, [fp, #16]
    a6bc:	strb	r1, [r4, #17]
    a6c0:	ldr	r1, [fp, #12]
    a6c4:	strb	r1, [r4, #16]
    a6c8:	mls	r0, r0, r6, r5
    a6cc:	str	r0, [r4, #4]
    a6d0:	ldr	r0, [fp, #28]
    a6d4:	ldr	r1, [fp, #32]
    a6d8:	orr	r0, r1, r0, lsl #4
    a6dc:	strb	r0, [r4, #20]
    a6e0:	ldr	r5, [fp, #8]
    a6e4:	add	r0, r5, #22
    a6e8:	str	r0, [r4, #12]
    a6ec:	str	r0, [r4, #8]
    a6f0:	ldr	r0, [fp, #36]	; 0x24
    a6f4:	bl	aae4 <lell_pcap_append_ppi_packet@@Base+0x134>
    a6f8:	str	r0, [r4, #24]
    a6fc:	ldr	r0, [fp, #40]	; 0x28
    a700:	bic	r0, r0, #-16777216	; 0xff000000
    a704:	ldr	r1, [fp, #44]	; 0x2c
    a708:	orr	r0, r0, r1, lsl #24
    a70c:	bl	aae4 <lell_pcap_append_ppi_packet@@Base+0x134>
    a710:	str	r0, [r4, #28]
    a714:	ldr	r0, [fp, #48]	; 0x30
    a718:	bl	aae4 <lell_pcap_append_ppi_packet@@Base+0x134>
    a71c:	str	r0, [r4, #32]
    a720:	ldr	r6, [fp, #52]	; 0x34
    a724:	mov	r0, r6
    a728:	bl	aae0 <lell_pcap_append_ppi_packet@@Base+0x130>
    a72c:	strh	r6, [r4, #36]	; 0x24
    a730:	cmp	r5, #0
    a734:	beq	a75c <btbb_pcap_append_packet@@Base+0x248>
    a738:	cmp	r5, #400	; 0x190
    a73c:	bhi	a768 <btbb_pcap_append_packet@@Base+0x254>
    a740:	ldr	r1, [fp, #56]	; 0x38
    a744:	add	r0, r4, #38	; 0x26
    a748:	mov	r2, r5
    a74c:	bl	4684 <memcpy@plt>
    a750:	orr	r0, r6, #32
    a754:	strh	r0, [r4, #36]	; 0x24
    a758:	pop	{r4, r5, r6, sl, fp, pc}
    a75c:	bic	r0, r6, #32
    a760:	strh	r0, [r4, #36]	; 0x24
    a764:	pop	{r4, r5, r6, sl, fp, pc}
    a768:	ldr	r0, [pc, #24]	; a788 <btbb_pcap_append_packet@@Base+0x274>
    a76c:	add	r0, pc, r0
    a770:	ldr	r1, [pc, #20]	; a78c <btbb_pcap_append_packet@@Base+0x278>
    a774:	add	r1, pc, r1
    a778:	ldr	r3, [pc, #16]	; a790 <btbb_pcap_append_packet@@Base+0x27c>
    a77c:	add	r3, pc, r3
    a780:	mov	r2, #162	; 0xa2
    a784:	bl	4a08 <__assert_fail@plt>
    a788:	andeq	r9, r0, r3, lsl #14
    a78c:	andeq	r9, r0, r0, lsr r7
    a790:	andeq	r9, r0, r0, ror r7

0000a794 <lell_pcap_create_file@@Base>:
    a794:	mov	r2, r1
    a798:	mov	r1, #256	; 0x100
    a79c:	b	a7a0 <lell_pcap_create_file@@Base+0xc>
    a7a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a7a4:	add	fp, sp, #24
    a7a8:	mov	r8, r2
    a7ac:	mov	r7, r1
    a7b0:	mov	r6, r0
    a7b4:	mov	r0, #12
    a7b8:	bl	47d4 <malloc@plt>
    a7bc:	mov	r5, r0
    a7c0:	cmp	r0, #0
    a7c4:	beq	a804 <lell_pcap_create_file@@Base+0x70>
    a7c8:	mov	r4, #0
    a7cc:	str	r4, [r5]
    a7d0:	str	r4, [r5, #4]
    a7d4:	str	r4, [r5, #8]
    a7d8:	mov	r0, r6
    a7dc:	mov	r1, r7
    a7e0:	mov	r2, #400	; 0x190
    a7e4:	bl	46e4 <btbb_pcap_open@plt>
    a7e8:	str	r0, [r5]
    a7ec:	cmp	r0, #0
    a7f0:	beq	a80c <lell_pcap_create_file@@Base+0x78>
    a7f4:	str	r7, [r5, #4]
    a7f8:	str	r5, [r8]
    a7fc:	mov	r0, r4
    a800:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a804:	mvn	r4, #2
    a808:	b	a810 <lell_pcap_create_file@@Base+0x7c>
    a80c:	mvn	r4, #1
    a810:	mov	r0, r5
    a814:	bl	46cc <lell_pcap_close@plt>
    a818:	mov	r0, r4
    a81c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000a820 <lell_pcap_ppi_create_file@@Base>:
    a820:	push	{r4, r5, fp, lr}
    a824:	add	fp, sp, #8
    a828:	mov	r5, r2
    a82c:	mov	r4, r1
    a830:	mov	r1, #192	; 0xc0
    a834:	bl	a7a0 <lell_pcap_create_file@@Base+0xc>
    a838:	cmp	r0, #0
    a83c:	popne	{r4, r5, fp, pc}
    a840:	ldr	r1, [r5]
    a844:	strb	r4, [r1, #8]
    a848:	pop	{r4, r5, fp, pc}

0000a84c <lell_pcap_append_packet@@Base>:
    a84c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a850:	add	fp, sp, #28
    a854:	sub	sp, sp, #324	; 0x144
    a858:	mov	r4, r0
    a85c:	mvn	r0, #0
    a860:	cmp	r4, #0
    a864:	beq	a908 <lell_pcap_append_packet@@Base+0xbc>
    a868:	ldr	r1, [r4]
    a86c:	cmp	r1, #0
    a870:	beq	a908 <lell_pcap_append_packet@@Base+0xbc>
    a874:	ldr	r1, [r4, #4]
    a878:	cmp	r1, #256	; 0x100
    a87c:	bne	a908 <lell_pcap_append_packet@@Base+0xbc>
    a880:	mov	r5, r3
    a884:	mov	r6, r2
    a888:	ldr	r7, [fp, #20]
    a88c:	ldr	r8, [fp, #16]
    a890:	ldr	r9, [fp, #12]
    a894:	ldr	sl, [fp, #8]
    a898:	mov	r0, r7
    a89c:	bl	4630 <lell_packet_is_data@plt>
    a8a0:	ldr	r1, [r7, #72]	; 0x48
    a8a4:	ldrb	r2, [r7, #69]	; 0x45
    a8a8:	ldrb	ip, [r7, #92]	; 0x5c
    a8ac:	mov	r3, #35	; 0x23
    a8b0:	cmp	r9, sl
    a8b4:	movwlt	r3, #39	; 0x27
    a8b8:	clz	r0, r0
    a8bc:	lsr	r0, r0, #5
    a8c0:	orr	r0, r3, r0, lsl #4
    a8c4:	add	r1, r1, #9
    a8c8:	stm	sp, {r1, r2, sl}
    a8cc:	str	r9, [sp, #12]
    a8d0:	str	ip, [sp, #16]
    a8d4:	str	r8, [sp, #20]
    a8d8:	str	r0, [sp, #24]
    a8dc:	str	r7, [sp, #28]
    a8e0:	add	r7, sp, #36	; 0x24
    a8e4:	mov	r0, r7
    a8e8:	mov	r2, r6
    a8ec:	mov	r3, r5
    a8f0:	bl	a910 <lell_pcap_append_packet@@Base+0xc4>
    a8f4:	ldr	r0, [r4]
    a8f8:	add	r2, r7, #16
    a8fc:	mov	r1, r7
    a900:	bl	47f8 <btbb_pcap_dump@plt>
    a904:	mov	r0, #0
    a908:	sub	sp, fp, #28
    a90c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a910:	push	{r4, r5, r6, sl, fp, lr}
    a914:	add	fp, sp, #16
    a918:	mov	r1, r3
    a91c:	mov	r5, r2
    a920:	mov	r4, r0
    a924:	movw	r6, #51712	; 0xca00
    a928:	movt	r6, #15258	; 0x3b9a
    a92c:	mov	r0, r2
    a930:	mov	r2, r6
    a934:	mov	r3, #0
    a938:	bl	bae8 <lell_pcapng_close@@Base+0xb8>
    a93c:	str	r0, [r4]
    a940:	ldr	r1, [fp, #24]
    a944:	strb	r1, [r4, #19]
    a948:	ldr	r1, [fp, #20]
    a94c:	strb	r1, [r4, #18]
    a950:	ldr	r1, [fp, #16]
    a954:	strb	r1, [r4, #17]
    a958:	ldr	r1, [fp, #12]
    a95c:	strb	r1, [r4, #16]
    a960:	mls	r0, r0, r6, r5
    a964:	str	r0, [r4, #4]
    a968:	ldr	r5, [fp, #8]
    a96c:	add	r0, r5, #10
    a970:	str	r0, [r4, #8]
    a974:	cmp	r5, #255	; 0xff
    a978:	movcs	r5, #255	; 0xff
    a97c:	add	r0, r5, #10
    a980:	str	r0, [r4, #12]
    a984:	ldr	r0, [fp, #28]
    a988:	bl	aae4 <lell_pcap_append_ppi_packet@@Base+0x134>
    a98c:	str	r0, [r4, #20]
    a990:	ldr	r0, [fp, #32]
    a994:	bl	aae0 <lell_pcap_append_ppi_packet@@Base+0x130>
    a998:	strh	r0, [r4, #24]
    a99c:	add	r0, r4, #26
    a9a0:	ldr	r1, [fp, #36]	; 0x24
    a9a4:	mov	r2, r5
    a9a8:	pop	{r4, r5, r6, sl, fp, lr}
    a9ac:	b	4684 <memcpy@plt>

0000a9b0 <lell_pcap_append_ppi_packet@@Base>:
    a9b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9b4:	add	fp, sp, #28
    a9b8:	sub	sp, sp, #300	; 0x12c
    a9bc:	mvn	r4, #0
    a9c0:	cmp	r0, #0
    a9c4:	beq	aad4 <lell_pcap_append_ppi_packet@@Base+0x124>
    a9c8:	mov	r5, r0
    a9cc:	ldr	r0, [r0]
    a9d0:	cmp	r0, #0
    a9d4:	beq	aad4 <lell_pcap_append_ppi_packet@@Base+0x124>
    a9d8:	ldr	r0, [r5, #4]
    a9dc:	cmp	r0, #192	; 0xc0
    a9e0:	bne	aad4 <lell_pcap_append_ppi_packet@@Base+0x124>
    a9e4:	mov	r7, r2
    a9e8:	ldr	r8, [fp, #28]
    a9ec:	ldr	sl, [fp, #8]
    a9f0:	movw	r9, #51712	; 0xca00
    a9f4:	movt	r9, #15258	; 0x3b9a
    a9f8:	mov	r4, #0
    a9fc:	mov	r0, r2
    aa00:	mov	r1, r3
    aa04:	mov	r2, r9
    aa08:	mov	r3, #0
    aa0c:	bl	bae8 <lell_pcapng_close@@Base+0xb8>
    aa10:	mov	r6, r0
    aa14:	mov	r0, r8
    aa18:	bl	4888 <lell_get_channel_k@plt>
    aa1c:	ldr	r1, [r8, #72]	; 0x48
    aa20:	str	r6, [sp]
    aa24:	mls	r2, r6, r9, r7
    aa28:	str	r2, [sp, #4]
    aa2c:	mov	r2, #147	; 0x93
    aa30:	str	r2, [sp, #20]
    aa34:	movw	r2, #30006	; 0x7536
    aa38:	movt	r2, #12
    aa3c:	str	r2, [sp, #24]
    aa40:	mov	r2, #1572864	; 0x180000
    aa44:	str	r2, [sp, #16]
    aa48:	add	r2, r1, #33	; 0x21
    aa4c:	str	r2, [sp, #12]
    aa50:	add	r6, r1, #9
    aa54:	cmp	r6, #255	; 0xff
    aa58:	movcs	r6, #255	; 0xff
    aa5c:	add	r1, r6, #24
    aa60:	str	r1, [sp, #8]
    aa64:	ldrb	r1, [r5, #8]
    aa68:	strb	r1, [sp, #28]
    aa6c:	movw	r1, #2402	; 0x962
    aa70:	add	r0, r1, r0, lsl #1
    aa74:	uxth	r0, r0
    aa78:	bl	aae0 <lell_pcap_append_ppi_packet@@Base+0x130>
    aa7c:	strb	sl, [sp, #31]
    aa80:	strh	r0, [sp, #29]
    aa84:	ldr	r0, [r8, #76]	; 0x4c
    aa88:	bl	aae4 <lell_pcap_append_ppi_packet@@Base+0x134>
    aa8c:	ldr	r1, [fp, #24]
    aa90:	strb	r1, [sp, #39]	; 0x27
    aa94:	ldr	r1, [fp, #20]
    aa98:	strb	r1, [sp, #38]	; 0x26
    aa9c:	ldr	r1, [fp, #12]
    aaa0:	strb	r1, [sp, #37]	; 0x25
    aaa4:	ldr	r1, [fp, #16]
    aaa8:	strb	r1, [sp, #36]	; 0x24
    aaac:	str	r0, [sp, #32]
    aab0:	mov	r7, sp
    aab4:	add	r0, r7, #40	; 0x28
    aab8:	mov	r1, r8
    aabc:	mov	r2, r6
    aac0:	bl	4684 <memcpy@plt>
    aac4:	ldr	r0, [r5]
    aac8:	add	r2, r7, #16
    aacc:	mov	r1, r7
    aad0:	bl	47f8 <btbb_pcap_dump@plt>
    aad4:	mov	r0, r4
    aad8:	sub	sp, fp, #28
    aadc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aae0:	bx	lr
    aae4:	bx	lr

0000aae8 <lell_pcap_close@@Base>:
    aae8:	cmp	r0, #0
    aaec:	mvneq	r0, #0
    aaf0:	bxeq	lr
    aaf4:	push	{r4, sl, fp, lr}
    aaf8:	add	fp, sp, #8
    aafc:	mov	r4, r0
    ab00:	ldr	r0, [r0]
    ab04:	cmp	r0, #0
    ab08:	beq	ab10 <lell_pcap_close@@Base+0x28>
    ab0c:	bl	4954 <fclose@plt>
    ab10:	mov	r0, r4
    ab14:	bl	4660 <free@plt>
    ab18:	mov	r0, #0
    ab1c:	pop	{r4, sl, fp, pc}

0000ab20 <pcapng_create@@Base>:
    ab20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab24:	add	fp, sp, #28
    ab28:	sub	sp, sp, #4
    ab2c:	vpush	{d8-d9}
    ab30:	sub	sp, sp, #48	; 0x30
    ab34:	mov	r7, r3
    ab38:	mov	r9, r2
    ab3c:	mov	r6, r1
    ab40:	mov	r4, r0
    ab44:	vmov.i32	q4, #0	; 0x00000000
    ab48:	add	r5, r0, #4
    ab4c:	bl	48a0 <getpagesize@plt>
    ab50:	mov	sl, r0
    ab54:	vst1.32	{d8-d9}, [r5]
    ab58:	mov	r0, #0
    ab5c:	str	r0, [r4, #20]
    ab60:	str	r0, [r4, #24]
    ab64:	mov	r0, r6
    ab68:	mov	r1, #194	; 0xc2
    ab6c:	mov	r2, #432	; 0x1b0
    ab70:	bl	4810 <open@plt>
    ab74:	str	r0, [r4]
    ab78:	mov	r8, #6
    ab7c:	cmn	r0, #1
    ab80:	beq	af80 <pcapng_create@@Base+0x460>
    ab84:	ldr	r1, [pc, #1040]	; af9c <pcapng_create@@Base+0x47c>
    ab88:	add	r1, pc, r1
    ab8c:	vld1.64	{d16-d17}, [r1]!
    ab90:	vldr	d18, [r1]
    ab94:	add	r1, sp, #24
    ab98:	mov	r2, r1
    ab9c:	vst1.64	{d16-d17}, [r2]!
    aba0:	vstr	d18, [r2]
    aba4:	mov	r2, #24
    aba8:	str	r2, [r4, #8]
    abac:	mov	r2, #24
    abb0:	bl	4930 <write@plt>
    abb4:	mov	r6, r0
    abb8:	cmn	r0, #1
    abbc:	str	r5, [sp, #20]
    abc0:	cmpne	r9, #0
    abc4:	bne	abdc <pcapng_create@@Base+0xbc>
    abc8:	ldr	r0, [r4, #8]
    abcc:	str	r0, [r4, #12]
    abd0:	cmn	r6, #1
    abd4:	bne	ac9c <pcapng_create@@Base+0x17c>
    abd8:	b	af80 <pcapng_create@@Base+0x460>
    abdc:	str	r7, [sp, #12]
    abe0:	str	sl, [sp, #16]
    abe4:	ldrh	r0, [r9]
    abe8:	cmp	r0, #0
    abec:	beq	ac88 <pcapng_create@@Base+0x168>
    abf0:	ldr	r7, [pc, #936]	; afa0 <pcapng_create@@Base+0x480>
    abf4:	add	r7, pc, r7
    abf8:	ldrh	r8, [r9, #2]
    abfc:	cmp	r8, #0
    ac00:	beq	ac88 <pcapng_create@@Base+0x168>
    ac04:	ldr	r0, [r4]
    ac08:	add	r2, r8, #4
    ac0c:	mov	r1, r9
    ac10:	bl	4930 <write@plt>
    ac14:	mov	r6, r0
    ac18:	add	r0, r8, #3
    ac1c:	movw	r1, #65532	; 0xfffc
    ac20:	movt	r1, #1
    ac24:	and	sl, r0, r1
    ac28:	subs	r0, sl, r8
    ac2c:	cmnne	r6, #1
    ac30:	beq	ac60 <pcapng_create@@Base+0x140>
    ac34:	sub	r0, r8, sl
    ac38:	add	r5, r0, #1
    ac3c:	ldr	r0, [r4]
    ac40:	mov	r1, r7
    ac44:	mov	r2, #1
    ac48:	bl	4930 <write@plt>
    ac4c:	mov	r6, r0
    ac50:	cmp	r5, #0
    ac54:	addne	r5, r5, #1
    ac58:	cmnne	r6, #1
    ac5c:	bne	ac3c <pcapng_create@@Base+0x11c>
    ac60:	ldr	r1, [r4, #8]
    ac64:	add	r0, sl, #4
    ac68:	add	r1, r1, r0
    ac6c:	str	r1, [r4, #8]
    ac70:	cmn	r6, #1
    ac74:	beq	af68 <pcapng_create@@Base+0x448>
    ac78:	add	r9, r9, r0
    ac7c:	ldrh	r0, [r9]
    ac80:	cmp	r0, #0
    ac84:	bne	abf8 <pcapng_create@@Base+0xd8>
    ac88:	ldr	r0, [r4, #8]
    ac8c:	str	r0, [r4, #12]
    ac90:	mov	r8, #6
    ac94:	ldr	sl, [sp, #16]
    ac98:	ldr	r7, [sp, #12]
    ac9c:	add	r0, r7, sl
    aca0:	ldr	r1, [r4, #8]
    aca4:	add	r0, r0, r1
    aca8:	add	r0, r0, #3
    acac:	udiv	r0, r0, sl
    acb0:	mul	r0, r0, sl
    acb4:	str	r0, [r4, #8]
    acb8:	subs	r7, r0, r1
    acbc:	cmnne	r6, #1
    acc0:	beq	acec <pcapng_create@@Base+0x1cc>
    acc4:	ldr	r5, [pc, #728]	; afa4 <pcapng_create@@Base+0x484>
    acc8:	add	r5, pc, r5
    accc:	ldr	r0, [r4]
    acd0:	mov	r1, r5
    acd4:	mov	r2, #1
    acd8:	bl	4930 <write@plt>
    acdc:	mov	r6, r0
    ace0:	subs	r7, r7, #1
    ace4:	cmnne	r6, #1
    ace8:	bne	accc <pcapng_create@@Base+0x1ac>
    acec:	ldr	r0, [r4]
    acf0:	ldr	r1, [r4, #8]
    acf4:	mov	r2, #0
    acf8:	stm	sp, {r0, r2}
    acfc:	mov	r0, #0
    ad00:	mov	r2, #3
    ad04:	mov	r3, #1
    ad08:	bl	4864 <mmap@plt>
    ad0c:	str	r0, [r4, #4]
    ad10:	cmn	r6, #1
    ad14:	beq	af80 <pcapng_create@@Base+0x460>
    ad18:	ldr	r0, [sp, #20]
    ad1c:	ldr	r0, [r0]
    ad20:	cmn	r0, #1
    ad24:	beq	ad8c <pcapng_create@@Base+0x26c>
    ad28:	ldr	r0, [fp, #12]
    ad2c:	ldr	r1, [fp, #8]
    ad30:	str	r0, [sp, #36]	; 0x24
    ad34:	mov	r0, #0
    ad38:	strh	r0, [sp, #34]	; 0x22
    ad3c:	strh	r1, [sp, #32]
    ad40:	str	r0, [sp, #28]
    ad44:	mov	r0, #1
    ad48:	str	r0, [sp, #24]
    ad4c:	mov	r0, #16
    ad50:	str	r0, [r4, #20]
    ad54:	ldr	r0, [r4]
    ad58:	add	r1, sp, #24
    ad5c:	mov	r2, #16
    ad60:	bl	4930 <write@plt>
    ad64:	mov	r5, r0
    ad68:	cmn	r0, #1
    ad6c:	ldrne	r6, [fp, #16]
    ad70:	cmpne	r6, #0
    ad74:	bne	ad94 <pcapng_create@@Base+0x274>
    ad78:	ldr	r0, [r4, #20]
    ad7c:	str	r0, [r4, #24]
    ad80:	cmn	r5, #1
    ad84:	bne	ae4c <pcapng_create@@Base+0x32c>
    ad88:	b	af80 <pcapng_create@@Base+0x460>
    ad8c:	mov	r8, #7
    ad90:	b	af80 <pcapng_create@@Base+0x460>
    ad94:	str	sl, [sp, #16]
    ad98:	ldrh	r0, [r6]
    ad9c:	cmp	r0, #0
    ada0:	beq	ae3c <pcapng_create@@Base+0x31c>
    ada4:	movw	r8, #65532	; 0xfffc
    ada8:	movt	r8, #1
    adac:	ldr	sl, [pc, #500]	; afa8 <pcapng_create@@Base+0x488>
    adb0:	add	sl, pc, sl
    adb4:	ldrh	r7, [r6, #2]
    adb8:	cmp	r7, #0
    adbc:	beq	ae3c <pcapng_create@@Base+0x31c>
    adc0:	ldr	r0, [r4]
    adc4:	add	r2, r7, #4
    adc8:	mov	r1, r6
    adcc:	bl	4930 <write@plt>
    add0:	mov	r5, r0
    add4:	add	r0, r7, #3
    add8:	and	r9, r0, r8
    addc:	subs	r0, r9, r7
    ade0:	cmnne	r5, #1
    ade4:	beq	ae14 <pcapng_create@@Base+0x2f4>
    ade8:	sub	r0, r7, r9
    adec:	add	r7, r0, #1
    adf0:	ldr	r0, [r4]
    adf4:	mov	r1, sl
    adf8:	mov	r2, #1
    adfc:	bl	4930 <write@plt>
    ae00:	mov	r5, r0
    ae04:	cmp	r7, #0
    ae08:	addne	r7, r7, #1
    ae0c:	cmnne	r5, #1
    ae10:	bne	adf0 <pcapng_create@@Base+0x2d0>
    ae14:	ldr	r1, [r4, #20]
    ae18:	add	r0, r9, #4
    ae1c:	add	r1, r1, r0
    ae20:	str	r1, [r4, #20]
    ae24:	cmn	r5, #1
    ae28:	beq	af74 <pcapng_create@@Base+0x454>
    ae2c:	add	r6, r6, r0
    ae30:	ldrh	r0, [r6]
    ae34:	cmp	r0, #0
    ae38:	bne	adb4 <pcapng_create@@Base+0x294>
    ae3c:	ldr	r0, [r4, #20]
    ae40:	str	r0, [r4, #24]
    ae44:	mov	r8, #6
    ae48:	ldr	sl, [sp, #16]
    ae4c:	ldr	r0, [fp, #20]
    ae50:	add	r0, r0, sl
    ae54:	ldr	r1, [r4, #20]
    ae58:	add	r0, r0, r1
    ae5c:	add	r0, r0, #3
    ae60:	udiv	r0, r0, sl
    ae64:	mul	r0, r0, sl
    ae68:	str	r0, [r4, #20]
    ae6c:	subs	r7, r0, r1
    ae70:	beq	ae9c <pcapng_create@@Base+0x37c>
    ae74:	ldr	r6, [pc, #304]	; afac <pcapng_create@@Base+0x48c>
    ae78:	add	r6, pc, r6
    ae7c:	ldr	r0, [r4]
    ae80:	mov	r1, r6
    ae84:	mov	r2, #1
    ae88:	bl	4930 <write@plt>
    ae8c:	mov	r5, r0
    ae90:	subs	r7, r7, #1
    ae94:	cmnne	r5, #1
    ae98:	bne	ae7c <pcapng_create@@Base+0x35c>
    ae9c:	ldr	r0, [r4]
    aea0:	ldr	r2, [r4, #8]
    aea4:	ldr	r1, [r4, #20]
    aea8:	stm	sp, {r0, r2}
    aeac:	mov	r0, #0
    aeb0:	mov	r2, #3
    aeb4:	mov	r3, #1
    aeb8:	bl	4864 <mmap@plt>
    aebc:	str	r0, [r4, #16]
    aec0:	cmn	r5, #1
    aec4:	beq	af80 <pcapng_create@@Base+0x460>
    aec8:	ldr	r0, [r4, #16]
    aecc:	cmn	r0, #1
    aed0:	mov	r8, #7
    aed4:	beq	af80 <pcapng_create@@Base+0x460>
    aed8:	ldmib	r4, {r0, r1, r2}
    aedc:	sub	r1, r1, r2
    aee0:	sub	r1, r1, #12
    aee4:	ldr	r3, [pc, #196]	; afb0 <pcapng_create@@Base+0x490>
    aee8:	add	r3, pc, r3
    aeec:	strh	r1, [r3, #2]
    aef0:	ldr	r1, [pc, #188]	; afb4 <pcapng_create@@Base+0x494>
    aef4:	ldr	r1, [pc, r1]
    aef8:	str	r1, [r0, r2]
    aefc:	ldmib	r4, {r0, r1}
    af00:	str	r1, [r0, #4]
    af04:	ldr	r0, [r4, #4]
    af08:	bic	r2, r1, #3
    af0c:	add	r0, r2, r0
    af10:	str	r1, [r0, #-4]
    af14:	add	r2, r4, #16
    af18:	ldm	r2, {r0, r1, r2}
    af1c:	sub	r1, r1, r2
    af20:	sub	r1, r1, #12
    af24:	strh	r1, [r3, #2]
    af28:	ldr	r1, [pc, #136]	; afb8 <pcapng_create@@Base+0x498>
    af2c:	ldr	r1, [pc, r1]
    af30:	str	r1, [r0, r2]
    af34:	ldr	r0, [r4, #16]
    af38:	ldr	r1, [r4, #20]
    af3c:	str	r1, [r0, #4]
    af40:	ldr	r0, [r4, #16]
    af44:	bic	r2, r1, #3
    af48:	add	r0, r2, r0
    af4c:	str	r1, [r0, #-4]
    af50:	ldr	r0, [r4, #4]
    af54:	ldr	r1, [r4, #20]
    af58:	mov	r8, #0
    af5c:	str	r8, [r0, #20]
    af60:	str	r1, [r0, #16]
    af64:	b	af88 <pcapng_create@@Base+0x468>
    af68:	ldr	r0, [r4, #8]
    af6c:	str	r0, [r4, #12]
    af70:	b	af7c <pcapng_create@@Base+0x45c>
    af74:	ldr	r0, [r4, #20]
    af78:	str	r0, [r4, #24]
    af7c:	mov	r8, #6
    af80:	mov	r0, r4
    af84:	bl	49b4 <pcapng_close@plt>
    af88:	mov	r0, r8
    af8c:	sub	sp, fp, #48	; 0x30
    af90:	vpop	{d8-d9}
    af94:	add	sp, sp, #4
    af98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af9c:	andeq	r9, r0, r8, lsr #9
    afa0:	andeq	r9, r0, r4, asr r4
    afa4:	andeq	r9, r0, r0, lsl #7
    afa8:	muleq	r0, r8, r2
    afac:	ldrdeq	r9, [r0], -r0
    afb0:			; <UNDEFINED> instruction: 0x0001b2b0
    afb4:	andeq	fp, r1, r4, lsr #5
    afb8:	andeq	fp, r1, ip, ror #4

0000afbc <pcapng_close@@Base>:
    afbc:	push	{r4, sl, fp, lr}
    afc0:	add	fp, sp, #8
    afc4:	mov	r4, r0
    afc8:	ldr	r0, [r0, #16]
    afcc:	add	r1, r0, #1
    afd0:	cmp	r1, #2
    afd4:	bcc	afe0 <pcapng_close@@Base+0x24>
    afd8:	ldr	r1, [r4, #20]
    afdc:	bl	496c <munmap@plt>
    afe0:	ldr	r0, [r4, #4]
    afe4:	add	r1, r0, #1
    afe8:	cmp	r1, #2
    afec:	bcc	aff8 <pcapng_close@@Base+0x3c>
    aff0:	ldr	r1, [r4, #8]
    aff4:	bl	496c <munmap@plt>
    aff8:	ldr	r0, [r4]
    affc:	cmn	r0, #1
    b000:	beq	b008 <pcapng_close@@Base+0x4c>
    b004:	bl	49fc <close@plt>
    b008:	mov	r0, #0
    b00c:	pop	{r4, sl, fp, pc}

0000b010 <pcapng_append_section_option@@Base>:
    b010:	push	{r4, r5, fp, lr}
    b014:	add	fp, sp, #8
    b018:	mov	r4, r0
    b01c:	mov	r0, #1
    b020:	cmp	r4, #0
    b024:	beq	b058 <pcapng_append_section_option@@Base+0x48>
    b028:	ldr	r2, [r4]
    b02c:	cmn	r2, #1
    b030:	beq	b058 <pcapng_append_section_option@@Base+0x48>
    b034:	ldr	r2, [r4, #4]
    b038:	add	r3, r2, #1
    b03c:	mov	r0, #5
    b040:	cmp	r3, #2
    b044:	popcc	{r4, r5, fp, pc}
    b048:	cmp	r1, #0
    b04c:	ldrne	r3, [r4, #12]
    b050:	cmpne	r3, #0
    b054:	bne	b05c <pcapng_append_section_option@@Base+0x4c>
    b058:	pop	{r4, r5, fp, pc}
    b05c:	add	r0, r2, r3
    b060:	ldrh	r5, [r1, #2]
    b064:	add	r2, r5, #4
    b068:	bl	4684 <memcpy@plt>
    b06c:	ldmib	r4, {r0, r1, r2}
    b070:	add	r3, r5, #7
    b074:	bic	r3, r3, #3
    b078:	add	r2, r3, r2
    b07c:	str	r2, [r4, #12]
    b080:	sub	r1, r1, r2
    b084:	sub	r1, r1, #12
    b088:	ldr	r3, [pc, #24]	; b0a8 <pcapng_append_section_option@@Base+0x98>
    b08c:	add	r3, pc, r3
    b090:	strh	r1, [r3, #2]
    b094:	ldr	r1, [pc, #16]	; b0ac <pcapng_append_section_option@@Base+0x9c>
    b098:	ldr	r1, [pc, r1]
    b09c:	str	r1, [r0, r2]
    b0a0:	mov	r0, #0
    b0a4:	pop	{r4, r5, fp, pc}
    b0a8:	andeq	fp, r1, ip, lsl #2
    b0ac:	andeq	fp, r1, r0, lsl #2

0000b0b0 <pcapng_append_interface_option@@Base>:
    b0b0:	push	{r4, r5, fp, lr}
    b0b4:	add	fp, sp, #8
    b0b8:	mov	r4, r0
    b0bc:	mov	r0, #1
    b0c0:	cmp	r4, #0
    b0c4:	beq	b0f8 <pcapng_append_interface_option@@Base+0x48>
    b0c8:	ldr	r2, [r4]
    b0cc:	cmn	r2, #1
    b0d0:	beq	b0f8 <pcapng_append_interface_option@@Base+0x48>
    b0d4:	ldr	r2, [r4, #16]
    b0d8:	add	r3, r2, #1
    b0dc:	mov	r0, #5
    b0e0:	cmp	r3, #2
    b0e4:	popcc	{r4, r5, fp, pc}
    b0e8:	cmp	r1, #0
    b0ec:	ldrne	r3, [r4, #24]
    b0f0:	cmpne	r3, #0
    b0f4:	bne	b0fc <pcapng_append_interface_option@@Base+0x4c>
    b0f8:	pop	{r4, r5, fp, pc}
    b0fc:	add	r0, r2, r3
    b100:	ldrh	r5, [r1, #2]
    b104:	add	r2, r5, #4
    b108:	bl	4684 <memcpy@plt>
    b10c:	add	r2, r4, #16
    b110:	ldm	r2, {r0, r1, r2}
    b114:	add	r3, r5, #7
    b118:	bic	r3, r3, #3
    b11c:	add	r2, r3, r2
    b120:	str	r2, [r4, #24]
    b124:	sub	r1, r1, r2
    b128:	sub	r1, r1, #12
    b12c:	ldr	r3, [pc, #24]	; b14c <pcapng_append_interface_option@@Base+0x9c>
    b130:	add	r3, pc, r3
    b134:	strh	r1, [r3, #2]
    b138:	ldr	r1, [pc, #16]	; b150 <pcapng_append_interface_option@@Base+0xa0>
    b13c:	ldr	r1, [pc, r1]
    b140:	str	r1, [r0, r2]
    b144:	mov	r0, #0
    b148:	pop	{r4, r5, fp, pc}
    b14c:	andeq	fp, r1, r8, rrx
    b150:	andeq	fp, r1, ip, asr r0

0000b154 <pcapng_append_packet@@Base>:
    b154:	push	{r4, r5, fp, lr}
    b158:	add	fp, sp, #8
    b15c:	mov	r4, r0
    b160:	mov	r0, #1
    b164:	cmp	r4, #0
    b168:	beq	b1b4 <pcapng_append_packet@@Base+0x60>
    b16c:	ldr	r2, [r4]
    b170:	cmn	r2, #1
    b174:	beq	b1b4 <pcapng_append_packet@@Base+0x60>
    b178:	ldr	r5, [r1, #4]
    b17c:	mov	r0, r2
    b180:	mov	r2, r5
    b184:	bl	4930 <write@plt>
    b188:	mov	r1, r0
    b18c:	mov	r0, #0
    b190:	cmn	r1, #1
    b194:	beq	b1b4 <pcapng_append_packet@@Base+0x60>
    b198:	ldr	r1, [r4, #4]
    b19c:	ldr	r2, [r1, #16]
    b1a0:	ldr	r3, [r1, #20]
    b1a4:	adds	r2, r2, r5
    b1a8:	str	r2, [r1, #16]
    b1ac:	adc	r2, r3, #0
    b1b0:	str	r2, [r1, #20]
    b1b4:	pop	{r4, r5, fp, pc}

0000b1b8 <btbb_pcapng_create_file@@Base>:
    b1b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b1bc:	add	fp, sp, #24
    b1c0:	sub	sp, sp, #264	; 0x108
    b1c4:	mov	r8, r2
    b1c8:	mov	r7, r1
    b1cc:	mov	r6, r0
    b1d0:	mov	r0, #28
    b1d4:	bl	47d4 <malloc@plt>
    b1d8:	cmp	r0, #0
    b1dc:	beq	b258 <btbb_pcapng_create_file@@Base+0xa0>
    b1e0:	mov	r5, r0
    b1e4:	mov	r9, sp
    b1e8:	orr	r0, r9, #2
    b1ec:	mov	r4, #0
    b1f0:	mov	r1, #0
    b1f4:	movw	r2, #258	; 0x102
    b1f8:	bl	48dc <memset@plt>
    b1fc:	mov	r0, #3
    b200:	strh	r0, [sp]
    b204:	cmp	r7, #0
    b208:	beq	b230 <btbb_pcapng_create_file@@Base+0x78>
    b20c:	add	r0, r9, #4
    b210:	mov	r1, r7
    b214:	mov	r2, #256	; 0x100
    b218:	bl	48f4 <strncpy@plt>
    b21c:	mov	r1, #0
    b220:	strb	r1, [sp, #259]	; 0x103
    b224:	bl	484c <strlen@plt>
    b228:	strh	r0, [sp, #2]
    b22c:	mov	r4, r9
    b230:	mov	r0, r5
    b234:	mov	r1, r6
    b238:	mov	r2, r4
    b23c:	bl	b274 <btbb_pcapng_create_file@@Base+0xbc>
    b240:	mov	r4, r0
    b244:	cmp	r0, #0
    b248:	beq	b264 <btbb_pcapng_create_file@@Base+0xac>
    b24c:	mov	r0, r5
    b250:	bl	4660 <free@plt>
    b254:	b	b268 <btbb_pcapng_create_file@@Base+0xb0>
    b258:	mvn	r0, #4
    b25c:	sub	sp, fp, #24
    b260:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b264:	str	r5, [r8]
    b268:	rsb	r0, r4, #0
    b26c:	sub	sp, fp, #24
    b270:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b274:	push	{r4, r5, r6, sl, fp, lr}
    b278:	add	fp, sp, #16
    b27c:	sub	sp, sp, #16
    b280:	mov	r5, r2
    b284:	mov	r6, r1
    b288:	mov	r4, r0
    b28c:	bl	48a0 <getpagesize@plt>
    b290:	mov	r3, r0
    b294:	mov	r0, #400	; 0x190
    b298:	mov	r1, #255	; 0xff
    b29c:	str	r1, [sp]
    b2a0:	stmib	sp, {r0, r5}
    b2a4:	str	r3, [sp, #12]
    b2a8:	ldr	r2, [pc, #76]	; b2fc <btbb_pcapng_create_file@@Base+0x144>
    b2ac:	ldr	r2, [pc, r2]
    b2b0:	mov	r0, r4
    b2b4:	mov	r1, r6
    b2b8:	bl	4708 <pcapng_create@plt>
    b2bc:	mov	r6, r0
    b2c0:	cmp	r0, #0
    b2c4:	bne	b2f0 <btbb_pcapng_create_file@@Base+0x138>
    b2c8:	mov	r0, r4
    b2cc:	mov	r1, r5
    b2d0:	bl	ba58 <lell_pcapng_close@@Base+0x28>
    b2d4:	cmp	r0, #0
    b2d8:	beq	b2ec <btbb_pcapng_create_file@@Base+0x134>
    b2dc:	mov	r6, r0
    b2e0:	mov	r0, r4
    b2e4:	bl	49b4 <pcapng_close@plt>
    b2e8:	b	b2f0 <btbb_pcapng_create_file@@Base+0x138>
    b2ec:	mov	r6, #0
    b2f0:	mov	r0, r6
    b2f4:	sub	sp, fp, #16
    b2f8:	pop	{r4, r5, r6, sl, fp, pc}
    b2fc:	andeq	sl, r1, r0, ror #29

0000b300 <btbb_pcapng_append_packet@@Base>:
    b300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b304:	add	fp, sp, #28
    b308:	sub	sp, sp, #484	; 0x1e4
    b30c:	str	r3, [fp, #-492]	; 0xfffffe14
    b310:	str	r2, [fp, #-496]	; 0xfffffe10
    b314:	str	r0, [fp, #-488]	; 0xfffffe18
    b318:	ldr	r9, [fp, #24]
    b31c:	mov	r0, r9
    b320:	bl	4834 <btbb_packet_get_payload_length@plt>
    b324:	mov	r7, r0
    b328:	add	r0, r0, #7
    b32c:	bic	r0, r0, #7
    b330:	sub	sl, sp, r0
    b334:	mov	sp, sl
    b338:	mov	r0, r9
    b33c:	mov	r1, sl
    b340:	bl	460c <btbb_get_payload_packed@plt>
    b344:	mov	r0, r9
    b348:	bl	4984 <btbb_packet_get_channel@plt>
    b34c:	str	r0, [fp, #-500]	; 0xfffffe0c
    b350:	mov	r0, r9
    b354:	bl	4678 <btbb_packet_get_ac_errors@plt>
    b358:	str	r0, [fp, #-504]	; 0xfffffe08
    b35c:	mov	r0, r9
    b360:	bl	48b8 <btbb_packet_get_transport@plt>
    b364:	str	r0, [fp, #-508]	; 0xfffffe04
    b368:	mov	r0, r9
    b36c:	bl	466c <btbb_packet_get_modulation@plt>
    b370:	mov	r8, r0
    b374:	mov	r0, r9
    b378:	bl	490c <btbb_packet_get_lap@plt>
    b37c:	mov	r4, r0
    b380:	mov	r0, r9
    b384:	bl	4870 <btbb_packet_get_header_packed@plt>
    b388:	sub	sp, sp, #56	; 0x38
    b38c:	str	sl, [sp, #48]	; 0x30
    b390:	ldr	ip, [fp, #8]
    b394:	ldr	r2, [fp, #12]
    b398:	mov	r3, #3
    b39c:	cmp	r2, ip
    b3a0:	movwlt	r3, #7
    b3a4:	ldr	r5, [fp, #16]
    b3a8:	mvn	r6, #0
    b3ac:	subs	r6, r5, r6
    b3b0:	movwne	r6, #1
    b3b4:	orr	r3, r3, r6, lsl #4
    b3b8:	ldr	r6, [fp, #20]
    b3bc:	subs	r1, r6, #255	; 0xff
    b3c0:	movwne	r1, #1
    b3c4:	orr	r1, r3, r1, lsl #7
    b3c8:	str	r1, [sp, #44]	; 0x2c
    b3cc:	str	r0, [sp, #40]	; 0x28
    b3d0:	str	r6, [sp, #36]	; 0x24
    b3d4:	str	r5, [sp, #32]
    b3d8:	cmp	r7, #400	; 0x190
    b3dc:	movge	r7, #400	; 0x190
    b3e0:	str	r7, [sp]
    b3e4:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    b3e8:	stmib	sp, {r0, ip}
    b3ec:	str	r2, [sp, #12]
    b3f0:	ldr	r0, [fp, #-504]	; 0xfffffe08
    b3f4:	str	r0, [sp, #16]
    b3f8:	ldr	r0, [fp, #-508]	; 0xfffffe04
    b3fc:	str	r0, [sp, #20]
    b400:	str	r8, [sp, #24]
    b404:	str	r4, [sp, #28]
    b408:	sub	r4, fp, #484	; 0x1e4
    b40c:	mov	r0, r4
    b410:	ldr	r2, [fp, #-496]	; 0xfffffe10
    b414:	ldr	r3, [fp, #-492]	; 0xfffffe14
    b418:	bl	b438 <btbb_pcapng_append_packet@@Base+0x138>
    b41c:	add	sp, sp, #56	; 0x38
    b420:	ldr	r0, [fp, #-488]	; 0xfffffe18
    b424:	mov	r1, r4
    b428:	bl	b560 <btbb_pcapng_append_packet@@Base+0x260>
    b42c:	rsb	r0, r0, #0
    b430:	sub	sp, fp, #28
    b434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b438:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    b43c:	add	fp, sp, #24
    b440:	mov	r4, r0
    b444:	mov	r0, #0
    b448:	strh	r0, [r4, #34]	; 0x22
    b44c:	strb	r0, [r4, #33]	; 0x21
    b450:	str	r2, [r4, #16]
    b454:	str	r3, [r4, #12]
    b458:	str	r0, [r4, #8]
    b45c:	mov	r0, #6
    b460:	str	r0, [r4]
    b464:	ldr	r0, [fp, #24]
    b468:	strb	r0, [r4, #31]
    b46c:	ldr	r0, [fp, #20]
    b470:	strb	r0, [r4, #30]
    b474:	ldr	r0, [fp, #16]
    b478:	strb	r0, [r4, #29]
    b47c:	ldr	r0, [fp, #12]
    b480:	strb	r0, [r4, #28]
    b484:	ldr	r0, [fp, #28]
    b488:	ldr	r1, [fp, #32]
    b48c:	orr	r0, r1, r0, lsl #4
    b490:	strb	r0, [r4, #32]
    b494:	ldr	r5, [fp, #8]
    b498:	add	r0, r5, #22
    b49c:	str	r0, [r4, #24]
    b4a0:	str	r0, [r4, #20]
    b4a4:	add	r7, r5, #61	; 0x3d
    b4a8:	bic	r8, r7, #3
    b4ac:	str	r8, [r4, #4]
    b4b0:	ldr	r0, [fp, #36]	; 0x24
    b4b4:	bl	bae4 <lell_pcapng_close@@Base+0xb4>
    b4b8:	str	r0, [r4, #36]	; 0x24
    b4bc:	ldr	r0, [fp, #40]	; 0x28
    b4c0:	bic	r0, r0, #-16777216	; 0xff000000
    b4c4:	ldr	r1, [fp, #44]	; 0x2c
    b4c8:	orr	r0, r0, r1, lsl #24
    b4cc:	bl	bae4 <lell_pcapng_close@@Base+0xb4>
    b4d0:	str	r0, [r4, #40]	; 0x28
    b4d4:	ldr	r0, [fp, #48]	; 0x30
    b4d8:	bl	bae4 <lell_pcapng_close@@Base+0xb4>
    b4dc:	str	r0, [r4, #44]	; 0x2c
    b4e0:	ldr	r6, [fp, #52]	; 0x34
    b4e4:	mov	r0, r6
    b4e8:	bl	bae0 <lell_pcapng_close@@Base+0xb0>
    b4ec:	strh	r6, [r4, #48]	; 0x30
    b4f0:	cmp	r5, #0
    b4f4:	beq	b518 <btbb_pcapng_append_packet@@Base+0x218>
    b4f8:	cmp	r5, #400	; 0x190
    b4fc:	bhi	b534 <btbb_pcapng_append_packet@@Base+0x234>
    b500:	ldr	r1, [fp, #56]	; 0x38
    b504:	add	r0, r4, #50	; 0x32
    b508:	mov	r2, r5
    b50c:	bl	4684 <memcpy@plt>
    b510:	orr	r0, r6, #32
    b514:	b	b51c <btbb_pcapng_append_packet@@Base+0x21c>
    b518:	bic	r0, r6, #32
    b51c:	lsr	r1, r7, #2
    b520:	strh	r0, [r4, #48]	; 0x30
    b524:	add	r0, r4, r1, lsl #2
    b528:	mov	r1, #0
    b52c:	stmdb	r0, {r1, r8}
    b530:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    b534:	ldr	r0, [pc, #24]	; b554 <btbb_pcapng_append_packet@@Base+0x254>
    b538:	add	r0, pc, r0
    b53c:	ldr	r1, [pc, #20]	; b558 <btbb_pcapng_append_packet@@Base+0x258>
    b540:	add	r1, pc, r1
    b544:	ldr	r3, [pc, #16]	; b55c <btbb_pcapng_append_packet@@Base+0x25c>
    b548:	add	r3, pc, r3
    b54c:	mov	r2, #221	; 0xdd
    b550:	bl	4a08 <__assert_fail@plt>
    b554:	andeq	r8, r0, r7, lsr r9
    b558:	andeq	r8, r0, r1, lsr #22
    b55c:	andeq	r8, r0, r6, ror #22
    b560:	b	48ac <pcapng_append_packet@plt>

0000b564 <btbb_pcapng_record_bdaddr@@Base>:
    b564:	push	{fp, lr}
    b568:	mov	fp, sp
    b56c:	sub	sp, sp, #8
    b570:	ldr	r1, [fp, #12]
    b574:	str	r1, [sp, #4]
    b578:	ldr	r1, [fp, #8]
    b57c:	str	r1, [sp]
    b580:	bl	b590 <btbb_pcapng_record_bdaddr@@Base+0x2c>
    b584:	rsb	r0, r0, #0
    b588:	mov	sp, fp
    b58c:	pop	{fp, pc}
    b590:	push	{fp, lr}
    b594:	mov	fp, sp
    b598:	sub	sp, sp, #16
    b59c:	strb	r3, [sp, #12]
    b5a0:	strb	r2, [sp, #8]
    b5a4:	movw	r1, #54080	; 0xd340
    b5a8:	movt	r1, #12
    b5ac:	str	r1, [sp, #4]
    b5b0:	lsr	r1, r3, #8
    b5b4:	strb	r1, [sp, #13]
    b5b8:	lsr	r1, r2, #24
    b5bc:	strb	r1, [sp, #11]
    b5c0:	lsr	r1, r2, #16
    b5c4:	strb	r1, [sp, #10]
    b5c8:	lsr	r1, r2, #8
    b5cc:	strb	r1, [sp, #9]
    b5d0:	ldr	r1, [fp, #12]
    b5d4:	strb	r1, [sp, #15]
    b5d8:	ldr	r1, [fp, #8]
    b5dc:	strb	r1, [sp, #14]
    b5e0:	add	r1, sp, #4
    b5e4:	bl	4654 <pcapng_append_interface_option@plt>
    b5e8:	mov	sp, fp
    b5ec:	pop	{fp, pc}

0000b5f0 <btbb_pcapng_record_btclock@@Base>:
    b5f0:	push	{fp, lr}
    b5f4:	mov	fp, sp
    b5f8:	sub	sp, sp, #16
    b5fc:	ldr	r1, [fp, #20]
    b600:	str	r1, [sp, #12]
    b604:	ldr	r1, [fp, #16]
    b608:	str	r1, [sp, #8]
    b60c:	ldr	r1, [fp, #12]
    b610:	str	r1, [sp, #4]
    b614:	ldr	r1, [fp, #8]
    b618:	str	r1, [sp]
    b61c:	bl	b62c <btbb_pcapng_record_btclock@@Base+0x3c>
    b620:	rsb	r0, r0, #0
    b624:	mov	sp, fp
    b628:	pop	{fp, pc}
    b62c:	push	{r4, r5, fp, lr}
    b630:	add	fp, sp, #8
    b634:	sub	sp, sp, #24
    b638:	mov	r4, r2
    b63c:	mov	r5, r0
    b640:	movw	r0, #54081	; 0xd341
    b644:	movt	r0, #24
    b648:	str	r0, [sp]
    b64c:	ldr	r0, [fp, #12]
    b650:	str	r0, [sp, #8]
    b654:	ldr	r0, [fp, #8]
    b658:	str	r0, [sp, #4]
    b65c:	mov	r0, r2
    b660:	bl	bae4 <lell_pcapng_close@@Base+0xb4>
    b664:	ldr	r0, [fp, #20]
    b668:	str	r0, [sp, #20]
    b66c:	ldr	r0, [fp, #16]
    b670:	str	r0, [sp, #16]
    b674:	str	r4, [sp, #12]
    b678:	mov	r1, sp
    b67c:	mov	r0, r5
    b680:	bl	4654 <pcapng_append_interface_option@plt>
    b684:	sub	sp, fp, #8
    b688:	pop	{r4, r5, fp, pc}

0000b68c <btbb_pcapng_close@@Base>:
    b68c:	push	{r4, sl, fp, lr}
    b690:	add	fp, sp, #8
    b694:	mov	r4, r0
    b698:	bl	49b4 <pcapng_close@plt>
    b69c:	cmp	r4, #0
    b6a0:	beq	b6ac <btbb_pcapng_close@@Base+0x20>
    b6a4:	mov	r0, r4
    b6a8:	bl	4660 <free@plt>
    b6ac:	mvn	r0, #0
    b6b0:	pop	{r4, sl, fp, pc}

0000b6b4 <lell_pcapng_create_file@@Base>:
    b6b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b6b8:	add	fp, sp, #24
    b6bc:	sub	sp, sp, #264	; 0x108
    b6c0:	mov	r8, r2
    b6c4:	mov	r7, r1
    b6c8:	mov	r6, r0
    b6cc:	mov	r0, #28
    b6d0:	bl	47d4 <malloc@plt>
    b6d4:	cmp	r0, #0
    b6d8:	beq	b754 <lell_pcapng_create_file@@Base+0xa0>
    b6dc:	mov	r5, r0
    b6e0:	mov	r9, sp
    b6e4:	orr	r0, r9, #2
    b6e8:	mov	r4, #0
    b6ec:	mov	r1, #0
    b6f0:	movw	r2, #258	; 0x102
    b6f4:	bl	48dc <memset@plt>
    b6f8:	mov	r0, #3
    b6fc:	strh	r0, [sp]
    b700:	cmp	r7, #0
    b704:	beq	b72c <lell_pcapng_create_file@@Base+0x78>
    b708:	add	r0, r9, #4
    b70c:	mov	r1, r7
    b710:	mov	r2, #256	; 0x100
    b714:	bl	48f4 <strncpy@plt>
    b718:	mov	r1, #0
    b71c:	strb	r1, [sp, #259]	; 0x103
    b720:	bl	484c <strlen@plt>
    b724:	strh	r0, [sp, #2]
    b728:	mov	r4, r9
    b72c:	mov	r0, r5
    b730:	mov	r1, r6
    b734:	mov	r2, r4
    b738:	bl	b770 <lell_pcapng_create_file@@Base+0xbc>
    b73c:	mov	r4, r0
    b740:	cmp	r0, #0
    b744:	beq	b760 <lell_pcapng_create_file@@Base+0xac>
    b748:	mov	r0, r5
    b74c:	bl	4660 <free@plt>
    b750:	b	b764 <lell_pcapng_create_file@@Base+0xb0>
    b754:	mvn	r0, #4
    b758:	sub	sp, fp, #24
    b75c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b760:	str	r5, [r8]
    b764:	rsb	r0, r4, #0
    b768:	sub	sp, fp, #24
    b76c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b770:	push	{r4, r5, r6, sl, fp, lr}
    b774:	add	fp, sp, #16
    b778:	sub	sp, sp, #16
    b77c:	mov	r5, r2
    b780:	mov	r6, r1
    b784:	mov	r4, r0
    b788:	bl	48a0 <getpagesize@plt>
    b78c:	mov	r3, r0
    b790:	mov	r0, #64	; 0x40
    b794:	mov	r1, #256	; 0x100
    b798:	str	r1, [sp]
    b79c:	stmib	sp, {r0, r5}
    b7a0:	str	r3, [sp, #12]
    b7a4:	ldr	r2, [pc, #76]	; b7f8 <lell_pcapng_create_file@@Base+0x144>
    b7a8:	ldr	r2, [pc, r2]
    b7ac:	mov	r0, r4
    b7b0:	mov	r1, r6
    b7b4:	bl	4708 <pcapng_create@plt>
    b7b8:	mov	r6, r0
    b7bc:	cmp	r0, #0
    b7c0:	bne	b7ec <lell_pcapng_create_file@@Base+0x138>
    b7c4:	mov	r0, r4
    b7c8:	mov	r1, r5
    b7cc:	bl	ba58 <lell_pcapng_close@@Base+0x28>
    b7d0:	cmp	r0, #0
    b7d4:	beq	b7e8 <lell_pcapng_create_file@@Base+0x134>
    b7d8:	mov	r6, r0
    b7dc:	mov	r0, r4
    b7e0:	bl	49b4 <pcapng_close@plt>
    b7e4:	b	b7ec <lell_pcapng_create_file@@Base+0x138>
    b7e8:	mov	r6, #0
    b7ec:	mov	r0, r6
    b7f0:	sub	sp, fp, #16
    b7f4:	pop	{r4, r5, r6, sl, fp, pc}
    b7f8:	andeq	sl, r1, r4, ror #19

0000b7fc <lell_pcapng_append_packet@@Base>:
    b7fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b800:	add	fp, sp, #28
    b804:	sub	sp, sp, #340	; 0x154
    b808:	mov	r8, r3
    b80c:	mov	r9, r2
    b810:	mov	sl, r0
    b814:	ldr	r4, [fp, #8]
    b818:	ldr	r5, [fp, #12]
    b81c:	mov	r6, #35	; 0x23
    b820:	cmp	r5, r4
    b824:	movwlt	r6, #39	; 0x27
    b828:	ldr	r7, [fp, #20]
    b82c:	mov	r0, r7
    b830:	bl	4630 <lell_packet_is_data@plt>
    b834:	clz	r0, r0
    b838:	lsr	r0, r0, #5
    b83c:	orr	r0, r6, r0, lsl #4
    b840:	ldr	r1, [r7, #72]	; 0x48
    b844:	ldrb	r2, [r7, #69]	; 0x45
    b848:	ldrb	r3, [r7, #92]	; 0x5c
    b84c:	str	r7, [sp, #28]
    b850:	str	r0, [sp, #24]
    b854:	ldr	r0, [fp, #16]
    b858:	str	r0, [sp, #20]
    b85c:	str	r3, [sp, #16]
    b860:	stmib	sp, {r2, r4, r5}
    b864:	add	r0, r1, #9
    b868:	str	r0, [sp]
    b86c:	add	r4, sp, #32
    b870:	mov	r0, r4
    b874:	mov	r2, r9
    b878:	mov	r3, r8
    b87c:	bl	b8d4 <lell_pcapng_append_packet@@Base+0xd8>
    b880:	mov	r0, sl
    b884:	mov	r1, r4
    b888:	bl	b9b0 <lell_pcapng_append_packet@@Base+0x1b4>
    b88c:	rsb	r4, r0, #0
    b890:	cmp	r0, #0
    b894:	bne	b8c8 <lell_pcapng_append_packet@@Base+0xcc>
    b898:	mov	r0, r7
    b89c:	bl	4630 <lell_packet_is_data@plt>
    b8a0:	cmp	r0, #0
    b8a4:	bne	b8c8 <lell_pcapng_append_packet@@Base+0xcc>
    b8a8:	ldrb	r0, [r7, #80]	; 0x50
    b8ac:	cmp	r0, #5
    b8b0:	bne	b8c8 <lell_pcapng_append_packet@@Base+0xcc>
    b8b4:	str	r7, [sp]
    b8b8:	mov	r0, sl
    b8bc:	mov	r2, r9
    b8c0:	mov	r3, r8
    b8c4:	bl	487c <lell_pcapng_record_connect_req@plt>
    b8c8:	mov	r0, r4
    b8cc:	sub	sp, fp, #28
    b8d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8d8:	add	fp, sp, #28
    b8dc:	sub	sp, sp, #4
    b8e0:	ldr	r5, [fp, #8]
    b8e4:	cmp	r5, #256	; 0x100
    b8e8:	bcs	b984 <lell_pcapng_append_packet@@Base+0x188>
    b8ec:	mov	r4, r0
    b8f0:	add	r1, r5, #10
    b8f4:	add	r0, r5, #49	; 0x31
    b8f8:	bic	r6, r0, #3
    b8fc:	lsr	sl, r0, #2
    b900:	add	r9, fp, #24
    b904:	ldm	r9, {r7, r8, r9}
    b908:	ldr	ip, [fp, #20]
    b90c:	ldr	lr, [fp, #16]
    b910:	ldr	r0, [fp, #12]
    b914:	strb	r7, [r4, #31]
    b918:	strb	ip, [r4, #30]
    b91c:	strb	lr, [r4, #29]
    b920:	strb	r0, [r4, #28]
    b924:	str	r1, [r4, #24]
    b928:	str	r1, [r4, #20]
    b92c:	str	r2, [r4, #16]
    b930:	mov	r7, #0
    b934:	str	r7, [r4, #8]
    b938:	str	r6, [r4, #4]
    b93c:	mov	r0, #6
    b940:	str	r0, [r4]
    b944:	str	r3, [r4, #12]
    b948:	mov	r0, r8
    b94c:	bl	bae4 <lell_pcapng_close@@Base+0xb4>
    b950:	str	r8, [r4, #32]
    b954:	mov	r0, r9
    b958:	bl	bae0 <lell_pcapng_close@@Base+0xb0>
    b95c:	strh	r9, [r4, #36]	; 0x24
    b960:	add	r0, r4, #38	; 0x26
    b964:	ldr	r1, [fp, #36]	; 0x24
    b968:	mov	r2, r5
    b96c:	bl	4684 <memcpy@plt>
    b970:	add	r0, r4, sl, lsl #2
    b974:	str	r7, [r0, #-8]
    b978:	str	r6, [r0, #-4]
    b97c:	sub	sp, fp, #28
    b980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b984:	ldr	r0, [pc, #24]	; b9a4 <lell_pcapng_append_packet@@Base+0x1a8>
    b988:	add	r0, pc, r0
    b98c:	ldr	r1, [pc, #20]	; b9a8 <lell_pcapng_append_packet@@Base+0x1ac>
    b990:	add	r1, pc, r1
    b994:	ldr	r3, [pc, #16]	; b9ac <lell_pcapng_append_packet@@Base+0x1b0>
    b998:	add	r3, pc, r3
    b99c:	movw	r2, #441	; 0x1b9
    b9a0:	bl	4a08 <__assert_fail@plt>
    b9a4:	andeq	r8, r0, r2, ror #16
    b9a8:	ldrdeq	r8, [r0], -r1
    b9ac:	andeq	r8, r0, fp, ror #16
    b9b0:	b	48ac <pcapng_append_packet@plt>

0000b9b4 <lell_pcapng_record_connect_req@@Base>:
    b9b4:	push	{fp, lr}
    b9b8:	mov	fp, sp
    b9bc:	sub	sp, sp, #8
    b9c0:	ldr	r1, [fp, #8]
    b9c4:	str	r1, [sp]
    b9c8:	bl	b9d8 <lell_pcapng_record_connect_req@@Base+0x24>
    b9cc:	rsb	r0, r0, #0
    b9d0:	mov	sp, fp
    b9d4:	pop	{fp, pc}
    b9d8:	push	{fp, lr}
    b9dc:	mov	fp, sp
    b9e0:	sub	sp, sp, #48	; 0x30
    b9e4:	stmib	sp, {r2, r3}
    b9e8:	movw	r1, #54144	; 0xd380
    b9ec:	movt	r1, #46	; 0x2e
    b9f0:	str	r1, [sp]
    b9f4:	mov	r1, sp
    b9f8:	ldr	r2, [fp, #8]
    b9fc:	mov	ip, #32
    ba00:	add	lr, r2, #16
    ba04:	vld1.8	{d16-d17}, [r2], ip
    ba08:	add	r3, r1, #12
    ba0c:	vld1.8	{d18-d19}, [lr]
    ba10:	vst1.32	{d16-d17}, [r3]
    ba14:	add	r3, r1, #28
    ba18:	vst1.32	{d18-d19}, [r3]
    ba1c:	ldrh	r2, [r2]
    ba20:	strh	r2, [sp, #44]	; 0x2c
    ba24:	bl	4654 <pcapng_append_interface_option@plt>
    ba28:	mov	sp, fp
    ba2c:	pop	{fp, pc}

0000ba30 <lell_pcapng_close@@Base>:
    ba30:	push	{r4, sl, fp, lr}
    ba34:	add	fp, sp, #8
    ba38:	mov	r4, r0
    ba3c:	bl	49b4 <pcapng_close@plt>
    ba40:	cmp	r4, #0
    ba44:	beq	ba50 <lell_pcapng_close@@Base+0x20>
    ba48:	mov	r0, r4
    ba4c:	bl	4660 <free@plt>
    ba50:	mvn	r0, #0
    ba54:	pop	{r4, sl, fp, pc}
    ba58:	push	{fp, lr}
    ba5c:	mov	fp, sp
    ba60:	sub	sp, sp, #8
    ba64:	cmp	r1, #0
    ba68:	beq	baa0 <lell_pcapng_close@@Base+0x70>
    ba6c:	ldrh	r2, [r1]
    ba70:	b	ba90 <lell_pcapng_close@@Base+0x60>
    ba74:	uxth	r2, r2
    ba78:	cmp	r2, #9
    ba7c:	beq	bacc <lell_pcapng_close@@Base+0x9c>
    ba80:	add	r2, r3, #3
    ba84:	bic	r2, r2, #3
    ba88:	add	r1, r2, r1
    ba8c:	ldrh	r2, [r1, #4]!
    ba90:	cmp	r2, #0
    ba94:	ldrhne	r3, [r1, #2]
    ba98:	cmpne	r3, #0
    ba9c:	bne	ba74 <lell_pcapng_close@@Base+0x44>
    baa0:	ldr	r1, [pc, #48]	; bad8 <lell_pcapng_close@@Base+0xa8>
    baa4:	ldr	r1, [pc, r1]
    baa8:	str	r1, [sp]
    baac:	ldr	r1, [pc, #40]	; badc <lell_pcapng_close@@Base+0xac>
    bab0:	add	r1, pc, r1
    bab4:	ldrb	r1, [r1, #4]
    bab8:	strb	r1, [sp, #4]
    babc:	mov	r1, sp
    bac0:	bl	4654 <pcapng_append_interface_option@plt>
    bac4:	mov	sp, fp
    bac8:	pop	{fp, pc}
    bacc:	mov	r0, #0
    bad0:	mov	sp, fp
    bad4:	pop	{fp, pc}
    bad8:			; <UNDEFINED> instruction: 0x000085b8
    badc:	andeq	r8, r0, ip, lsr #11
    bae0:	bx	lr
    bae4:	bx	lr
    bae8:	cmp	r3, #0
    baec:	cmpeq	r2, #0
    baf0:	bne	bb08 <lell_pcapng_close@@Base+0xd8>
    baf4:	cmp	r1, #0
    baf8:	cmpeq	r0, #0
    bafc:	mvnne	r1, #0
    bb00:	mvnne	r0, #0
    bb04:	b	bb24 <lell_pcapng_close@@Base+0xf4>
    bb08:	sub	sp, sp, #8
    bb0c:	push	{sp, lr}
    bb10:	bl	bb34 <lell_pcapng_close@@Base+0x104>
    bb14:	ldr	lr, [sp, #4]
    bb18:	add	sp, sp, #8
    bb1c:	pop	{r2, r3}
    bb20:	bx	lr
    bb24:	push	{r1, lr}
    bb28:	mov	r0, #8
    bb2c:	bl	45d0 <raise@plt>
    bb30:	pop	{r1, pc}
    bb34:	cmp	r1, r3
    bb38:	cmpeq	r0, r2
    bb3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb40:	mov	r4, r0
    bb44:	movcc	r0, #0
    bb48:	mov	r5, r1
    bb4c:	ldr	lr, [sp, #36]	; 0x24
    bb50:	movcc	r1, r0
    bb54:	bcc	bc50 <lell_pcapng_close@@Base+0x220>
    bb58:	cmp	r3, #0
    bb5c:	clzeq	ip, r2
    bb60:	clzne	ip, r3
    bb64:	addeq	ip, ip, #32
    bb68:	cmp	r5, #0
    bb6c:	clzeq	r1, r4
    bb70:	addeq	r1, r1, #32
    bb74:	clzne	r1, r5
    bb78:	sub	ip, ip, r1
    bb7c:	sub	sl, ip, #32
    bb80:	lsl	r9, r3, ip
    bb84:	rsb	fp, ip, #32
    bb88:	orr	r9, r9, r2, lsl sl
    bb8c:	orr	r9, r9, r2, lsr fp
    bb90:	lsl	r8, r2, ip
    bb94:	cmp	r5, r9
    bb98:	cmpeq	r4, r8
    bb9c:	movcc	r0, #0
    bba0:	movcc	r1, r0
    bba4:	bcc	bbc0 <lell_pcapng_close@@Base+0x190>
    bba8:	mov	r0, #1
    bbac:	subs	r4, r4, r8
    bbb0:	lsl	r1, r0, sl
    bbb4:	orr	r1, r1, r0, lsr fp
    bbb8:	lsl	r0, r0, ip
    bbbc:	sbc	r5, r5, r9
    bbc0:	cmp	ip, #0
    bbc4:	beq	bc50 <lell_pcapng_close@@Base+0x220>
    bbc8:	lsr	r6, r8, #1
    bbcc:	orr	r6, r6, r9, lsl #31
    bbd0:	lsr	r7, r9, #1
    bbd4:	mov	r2, ip
    bbd8:	b	bbfc <lell_pcapng_close@@Base+0x1cc>
    bbdc:	subs	r3, r4, r6
    bbe0:	sbc	r8, r5, r7
    bbe4:	adds	r3, r3, r3
    bbe8:	adc	r8, r8, r8
    bbec:	adds	r4, r3, #1
    bbf0:	adc	r5, r8, #0
    bbf4:	subs	r2, r2, #1
    bbf8:	beq	bc18 <lell_pcapng_close@@Base+0x1e8>
    bbfc:	cmp	r5, r7
    bc00:	cmpeq	r4, r6
    bc04:	bcs	bbdc <lell_pcapng_close@@Base+0x1ac>
    bc08:	adds	r4, r4, r4
    bc0c:	adc	r5, r5, r5
    bc10:	subs	r2, r2, #1
    bc14:	bne	bbfc <lell_pcapng_close@@Base+0x1cc>
    bc18:	lsr	r3, r4, ip
    bc1c:	orr	r3, r3, r5, lsl fp
    bc20:	lsr	r2, r5, ip
    bc24:	orr	r3, r3, r5, lsr sl
    bc28:	adds	r0, r0, r4
    bc2c:	mov	r4, r3
    bc30:	lsl	r3, r2, ip
    bc34:	orr	r3, r3, r4, lsl sl
    bc38:	lsl	ip, r4, ip
    bc3c:	orr	r3, r3, r4, lsr fp
    bc40:	adc	r1, r1, r5
    bc44:	subs	r0, r0, ip
    bc48:	mov	r5, r2
    bc4c:	sbc	r1, r1, r3
    bc50:	cmp	lr, #0
    bc54:	strdne	r4, [lr]
    bc58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .fini:

0000bc5c <.fini>:
    bc5c:	push	{r3, lr}
    bc60:	pop	{r3, pc}
