
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010e8c <.init>:
   10e8c:	push	{r3, lr}
   10e90:	bl	11140 <close@plt+0x48>
   10e94:	pop	{r3, pc}

Disassembly of section .plt:

00010e98 <calloc@plt-0x14>:
   10e98:	push	{lr}		; (str lr, [sp, #-4]!)
   10e9c:	ldr	lr, [pc, #4]	; 10ea8 <calloc@plt-0x4>
   10ea0:	add	lr, pc, lr
   10ea4:	ldr	pc, [lr, #8]!
   10ea8:	andeq	r7, r1, r8, asr r1

00010eac <calloc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #344]!	; 0x158

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #336]!	; 0x150

00010ec4 <__getdelim@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #328]!	; 0x148

00010ed0 <strcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #320]!	; 0x140

00010edc <fflush@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #312]!	; 0x138

00010ee8 <free@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #304]!	; 0x130

00010ef4 <_exit@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #296]!	; 0x128

00010f00 <memcpy@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #288]!	; 0x120

00010f0c <mbsinit@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #280]!	; 0x118

00010f18 <fwrite_unlocked@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #272]!	; 0x110

00010f24 <dcgettext@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #264]!	; 0x108

00010f30 <dup2@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #256]!	; 0x100

00010f3c <realloc@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #248]!	; 0xf8

00010f48 <textdomain@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #240]!	; 0xf0

00010f54 <iswprint@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #232]!	; 0xe8

00010f60 <fwrite@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #224]!	; 0xe0

00010f6c <lseek64@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #216]!	; 0xd8

00010f78 <__ctype_get_mb_cur_max@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #208]!	; 0xd0

00010f84 <__fpending@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #200]!	; 0xc8

00010f90 <mbrtowc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #192]!	; 0xc0

00010f9c <error@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #184]!	; 0xb8

00010fa8 <fnmatch@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #176]!	; 0xb0

00010fb4 <open64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #168]!	; 0xa8

00010fc0 <getenv@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #160]!	; 0xa0

00010fcc <puts@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #152]!	; 0x98

00010fd8 <malloc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #144]!	; 0x90

00010fe4 <__libc_start_main@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #136]!	; 0x88

00010ff0 <__freading@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #128]!	; 0x80

00010ffc <__gmon_start__@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #120]!	; 0x78

00011008 <freopen64@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #112]!	; 0x70

00011014 <getopt_long@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #104]!	; 0x68

00011020 <__ctype_b_loc@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #96]!	; 0x60

0001102c <exit@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #88]!	; 0x58

00011038 <bcmp@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #80]!	; 0x50

00011044 <strlen@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #72]!	; 0x48

00011050 <__errno_location@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #64]!	; 0x40

0001105c <__cxa_atexit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #56]!	; 0x38

00011068 <memset@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #48]!	; 0x30

00011074 <__printf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #40]!	; 0x28

00011080 <fileno@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #32]!

0001108c <__fprintf_chk@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #24]!

00011098 <fclose@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #16]!

000110a4 <fseeko64@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #8]!

000110b0 <setlocale@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #0]!

000110bc <strrchr@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4088]!	; 0xff8

000110c8 <nl_langinfo@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4080]!	; 0xff0

000110d4 <bindtextdomain@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4072]!	; 0xfe8

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f8 <close@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4048]!	; 0xfd0

Disassembly of section .text:

00011104 <_obstack_begin@@Base-0x14cc>:
   11104:	mov	fp, #0
   11108:	mov	lr, #0
   1110c:	pop	{r1}		; (ldr r1, [sp], #4)
   11110:	mov	r2, sp
   11114:	push	{r2}		; (str r2, [sp, #-4]!)
   11118:	push	{r0}		; (str r0, [sp, #-4]!)
   1111c:	ldr	ip, [pc, #16]	; 11134 <close@plt+0x3c>
   11120:	push	{ip}		; (str ip, [sp, #-4]!)
   11124:	ldr	r0, [pc, #12]	; 11138 <close@plt+0x40>
   11128:	ldr	r3, [pc, #12]	; 1113c <close@plt+0x44>
   1112c:	bl	10fe4 <__libc_start_main@plt>
   11130:	bl	110ec <abort@plt>
   11134:	andeq	r5, r1, r4, asr #14
   11138:	andeq	r1, r1, r4, asr r4
   1113c:	andeq	r5, r1, r4, ror #13
   11140:	ldr	r3, [pc, #20]	; 1115c <close@plt+0x64>
   11144:	ldr	r2, [pc, #20]	; 11160 <close@plt+0x68>
   11148:	add	r3, pc, r3
   1114c:	ldr	r2, [r3, r2]
   11150:	cmp	r2, #0
   11154:	bxeq	lr
   11158:	b	10ffc <__gmon_start__@plt>
   1115c:			; <UNDEFINED> instruction: 0x00016eb0
   11160:	ldrdeq	r0, [r0], -r4
   11164:	ldr	r0, [pc, #24]	; 11184 <close@plt+0x8c>
   11168:	ldr	r3, [pc, #24]	; 11188 <close@plt+0x90>
   1116c:	cmp	r3, r0
   11170:	bxeq	lr
   11174:	ldr	r3, [pc, #16]	; 1118c <close@plt+0x94>
   11178:	cmp	r3, #0
   1117c:	bxeq	lr
   11180:	bx	r3
   11184:	andeq	r8, r2, r0, lsr r1
   11188:	andeq	r8, r2, r0, lsr r1
   1118c:	andeq	r0, r0, r0
   11190:	ldr	r0, [pc, #36]	; 111bc <close@plt+0xc4>
   11194:	ldr	r1, [pc, #36]	; 111c0 <close@plt+0xc8>
   11198:	sub	r1, r1, r0
   1119c:	asr	r1, r1, #2
   111a0:	add	r1, r1, r1, lsr #31
   111a4:	asrs	r1, r1, #1
   111a8:	bxeq	lr
   111ac:	ldr	r3, [pc, #16]	; 111c4 <close@plt+0xcc>
   111b0:	cmp	r3, #0
   111b4:	bxeq	lr
   111b8:	bx	r3
   111bc:	andeq	r8, r2, r0, lsr r1
   111c0:	andeq	r8, r2, r0, lsr r1
   111c4:	andeq	r0, r0, r0
   111c8:	push	{r4, lr}
   111cc:	ldr	r4, [pc, #24]	; 111ec <close@plt+0xf4>
   111d0:	ldrb	r3, [r4]
   111d4:	cmp	r3, #0
   111d8:	popne	{r4, pc}
   111dc:	bl	11164 <close@plt+0x6c>
   111e0:	mov	r3, #1
   111e4:	strb	r3, [r4]
   111e8:	pop	{r4, pc}
   111ec:	andeq	r8, r2, r0, asr r1
   111f0:	b	11190 <close@plt+0x98>
   111f4:	push	{fp, lr}
   111f8:	mov	fp, sp
   111fc:	sub	sp, sp, #56	; 0x38
   11200:	mov	r4, r0
   11204:	cmp	r0, #0
   11208:	bne	11410 <close@plt+0x318>
   1120c:	movw	r1, #22419	; 0x5793
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	movt	r1, #1
   1121c:	bl	10f24 <dcgettext@plt>
   11220:	mov	r1, r0
   11224:	movw	r0, #33160	; 0x8188
   11228:	movt	r0, #2
   1122c:	ldr	r2, [r0]
   11230:	mov	r0, #1
   11234:	bl	11074 <__printf_chk@plt>
   11238:	movw	r1, #22449	; 0x57b1
   1123c:	mov	r0, #0
   11240:	mov	r2, #5
   11244:	movt	r1, #1
   11248:	bl	10f24 <dcgettext@plt>
   1124c:	movw	r7, #33100	; 0x814c
   11250:	movt	r7, #2
   11254:	ldr	r1, [r7]
   11258:	bl	10eb8 <fputs_unlocked@plt>
   1125c:	movw	r1, #22723	; 0x58c3
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10f24 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10eb8 <fputs_unlocked@plt>
   11278:	movw	r1, #22768	; 0x58f0
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10f24 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10eb8 <fputs_unlocked@plt>
   11294:	movw	r1, #22822	; 0x5926
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10f24 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10eb8 <fputs_unlocked@plt>
   112b0:	movw	r0, #28640	; 0x6fe0
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movw	r5, #23044	; 0x5a04
   112c0:	movt	r0, #1
   112c4:	movt	r5, #1
   112c8:	add	r1, r0, #32
   112cc:	add	r3, r0, #16
   112d0:	vld1.64	{d18-d19}, [r0], r2
   112d4:	vld1.64	{d16-d17}, [r1]
   112d8:	vld1.64	{d20-d21}, [r3]
   112dc:	vldr	d22, [r0]
   112e0:	add	r1, r6, #32
   112e4:	add	r0, r6, #16
   112e8:	vst1.64	{d16-d17}, [r1]
   112ec:	movw	r1, #23405	; 0x5b6d
   112f0:	vst1.64	{d20-d21}, [r0]
   112f4:	mov	r0, r6
   112f8:	movt	r1, #1
   112fc:	vst1.64	{d18-d19}, [r0], r2
   11300:	vstr	d22, [r0]
   11304:	mov	r0, r5
   11308:	bl	10ed0 <strcmp@plt>
   1130c:	cmp	r0, #0
   11310:	ldrne	r1, [r6, #8]!
   11314:	cmpne	r1, #0
   11318:	bne	11304 <close@plt+0x20c>
   1131c:	movw	r1, #23500	; 0x5bcc
   11320:	ldr	r6, [r6, #4]
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10f24 <dcgettext@plt>
   11334:	movw	r2, #23082	; 0x5a2a
   11338:	movw	r3, #23523	; 0x5be3
   1133c:	mov	r1, r0
   11340:	mov	r0, #1
   11344:	movt	r2, #1
   11348:	movt	r3, #1
   1134c:	bl	11074 <__printf_chk@plt>
   11350:	cmp	r6, #0
   11354:	mov	r0, #5
   11358:	mov	r1, #0
   1135c:	moveq	r6, r5
   11360:	bl	110b0 <setlocale@plt>
   11364:	cmp	r0, #0
   11368:	beq	113a0 <close@plt+0x2a8>
   1136c:	movw	r1, #23563	; 0x5c0b
   11370:	mov	r2, #3
   11374:	movt	r1, #1
   11378:	bl	110e0 <strncmp@plt>
   1137c:	cmp	r0, #0
   11380:	beq	113a0 <close@plt+0x2a8>
   11384:	movw	r1, #23567	; 0x5c0f
   11388:	mov	r0, #0
   1138c:	mov	r2, #5
   11390:	movt	r1, #1
   11394:	bl	10f24 <dcgettext@plt>
   11398:	ldr	r1, [r7]
   1139c:	bl	10eb8 <fputs_unlocked@plt>
   113a0:	movw	r1, #23638	; 0x5c56
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	movt	r1, #1
   113b0:	bl	10f24 <dcgettext@plt>
   113b4:	movw	r2, #23523	; 0x5be3
   113b8:	mov	r1, r0
   113bc:	mov	r0, #1
   113c0:	mov	r3, r5
   113c4:	movt	r2, #1
   113c8:	bl	11074 <__printf_chk@plt>
   113cc:	movw	r1, #23665	; 0x5c71
   113d0:	mov	r0, #0
   113d4:	mov	r2, #5
   113d8:	movt	r1, #1
   113dc:	bl	10f24 <dcgettext@plt>
   113e0:	mov	r1, r0
   113e4:	movw	r0, #23433	; 0x5b89
   113e8:	movw	r3, #23715	; 0x5ca3
   113ec:	cmp	r6, r5
   113f0:	mov	r2, r6
   113f4:	movt	r0, #1
   113f8:	movt	r3, #1
   113fc:	moveq	r3, r0
   11400:	mov	r0, #1
   11404:	bl	11074 <__printf_chk@plt>
   11408:	mov	r0, r4
   1140c:	bl	1102c <exit@plt>
   11410:	movw	r0, #33088	; 0x8140
   11414:	movw	r1, #22380	; 0x576c
   11418:	mov	r2, #5
   1141c:	movt	r0, #2
   11420:	movt	r1, #1
   11424:	ldr	r5, [r0]
   11428:	mov	r0, #0
   1142c:	bl	10f24 <dcgettext@plt>
   11430:	mov	r2, r0
   11434:	movw	r0, #33160	; 0x8188
   11438:	mov	r1, #1
   1143c:	movt	r0, #2
   11440:	ldr	r3, [r0]
   11444:	mov	r0, r5
   11448:	bl	1108c <__fprintf_chk@plt>
   1144c:	mov	r0, r4
   11450:	bl	1102c <exit@plt>
   11454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11458:	add	fp, sp, #28
   1145c:	sub	sp, sp, #12
   11460:	mov	sl, r0
   11464:	ldr	r0, [r1]
   11468:	mov	r5, r1
   1146c:	bl	129cc <_obstack_memory_used@@Base+0x78>
   11470:	movw	r1, #23715	; 0x5ca3
   11474:	mov	r0, #6
   11478:	movt	r1, #1
   1147c:	bl	110b0 <setlocale@plt>
   11480:	movw	r6, #23086	; 0x5a2e
   11484:	movw	r1, #23054	; 0x5a0e
   11488:	movt	r6, #1
   1148c:	movt	r1, #1
   11490:	mov	r0, r6
   11494:	bl	110d4 <bindtextdomain@plt>
   11498:	mov	r0, r6
   1149c:	bl	10f48 <textdomain@plt>
   114a0:	movw	r0, #8408	; 0x20d8
   114a4:	movt	r0, #1
   114a8:	bl	15748 <_obstack_memory_used@@Base+0x2df4>
   114ac:	movw	r8, #23078	; 0x5a26
   114b0:	movw	r9, #24200	; 0x5e88
   114b4:	mov	r6, #2
   114b8:	mov	r7, #0
   114bc:	movt	r8, #1
   114c0:	movt	r9, #1
   114c4:	mov	r4, r6
   114c8:	mov	r6, #0
   114cc:	mov	r0, sl
   114d0:	mov	r1, r5
   114d4:	mov	r2, r8
   114d8:	mov	r3, r9
   114dc:	str	r6, [sp]
   114e0:	bl	11014 <getopt_long@plt>
   114e4:	cmp	r0, #97	; 0x61
   114e8:	ble	11518 <close@plt+0x420>
   114ec:	cmp	r0, #98	; 0x62
   114f0:	beq	114c4 <close@plt+0x3cc>
   114f4:	cmp	r0, #112	; 0x70
   114f8:	bne	11508 <close@plt+0x410>
   114fc:	mov	r7, #1
   11500:	mov	r6, r4
   11504:	b	114c4 <close@plt+0x3cc>
   11508:	cmp	r0, #99	; 0x63
   1150c:	bne	118d0 <close@plt+0x7d8>
   11510:	mov	r6, #1
   11514:	b	114c4 <close@plt+0x3cc>
   11518:	cmn	r0, #1
   1151c:	bne	117d0 <close@plt+0x6d8>
   11520:	sub	r1, r4, #2
   11524:	mvn	r0, r7
   11528:	clz	r1, r1
   1152c:	lsr	r1, r1, #5
   11530:	orr	r0, r0, r1
   11534:	tst	r0, #1
   11538:	beq	11830 <close@plt+0x738>
   1153c:	movw	r0, #33080	; 0x8138
   11540:	movt	r0, #2
   11544:	ldr	r0, [r0]
   11548:	add	r8, r5, r0, lsl #2
   1154c:	sub	r5, sl, r0
   11550:	mov	r0, #1
   11554:	bic	r6, r0, r7
   11558:	cmp	r5, r6
   1155c:	bgt	1185c <close@plt+0x764>
   11560:	tst	r7, #1
   11564:	beq	115a8 <close@plt+0x4b0>
   11568:	movw	r5, #24328	; 0x5f08
   1156c:	movw	r6, #4310	; 0x10d6
   11570:	movt	r5, #1
   11574:	mov	r4, r5
   11578:	mov	r0, r4
   1157c:	bl	10fcc <puts@plt>
   11580:	mov	r0, r4
   11584:	bl	11044 <strlen@plt>
   11588:	add	r0, r0, r4
   1158c:	add	r4, r0, #1
   11590:	sub	r0, r4, r5
   11594:	cmp	r0, r6
   11598:	bcc	11578 <close@plt+0x480>
   1159c:	mov	r0, #0
   115a0:	sub	sp, fp, #28
   115a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115a8:	cmp	r4, #2
   115ac:	bne	1162c <close@plt+0x534>
   115b0:	movw	r0, #23765	; 0x5cd5
   115b4:	movt	r0, #1
   115b8:	bl	10fc0 <getenv@plt>
   115bc:	cmp	r0, #0
   115c0:	ldrbne	r1, [r0]
   115c4:	cmpne	r1, #0
   115c8:	bne	115f0 <close@plt+0x4f8>
   115cc:	movw	r1, #23291	; 0x5afb
   115d0:	mov	r0, #0
   115d4:	mov	r2, #5
   115d8:	movt	r1, #1
   115dc:	bl	10f24 <dcgettext@plt>
   115e0:	mov	r2, r0
   115e4:	mov	r0, #1
   115e8:	mov	r1, #0
   115ec:	bl	10f9c <error@plt>
   115f0:	bl	11fe0 <close@plt+0xee8>
   115f4:	movw	r1, #23772	; 0x5cdc
   115f8:	mov	r4, r0
   115fc:	movt	r1, #1
   11600:	bl	10ed0 <strcmp@plt>
   11604:	cmp	r0, #0
   11608:	beq	11628 <close@plt+0x530>
   1160c:	movw	r1, #23771	; 0x5cdb
   11610:	mov	r0, r4
   11614:	movt	r1, #1
   11618:	bl	10ed0 <strcmp@plt>
   1161c:	clz	r0, r0
   11620:	lsr	r4, r0, #5
   11624:	b	1162c <close@plt+0x534>
   11628:	mov	r4, #1
   1162c:	movw	r0, #8888	; 0x22b8
   11630:	movw	r9, #33108	; 0x8154
   11634:	movw	r3, #21496	; 0x53f8
   11638:	mov	r1, #0
   1163c:	mov	r2, #0
   11640:	movt	r0, #1
   11644:	movt	r9, #2
   11648:	movt	r3, #1
   1164c:	str	r0, [sp]
   11650:	mov	r0, r9
   11654:	bl	125d0 <_obstack_begin@@Base>
   11658:	cmp	r5, #0
   1165c:	beq	116fc <close@plt+0x604>
   11660:	ldr	r5, [r8]
   11664:	movw	r1, #29127	; 0x71c7
   11668:	movt	r1, #1
   1166c:	mov	r0, r5
   11670:	bl	10ed0 <strcmp@plt>
   11674:	movw	r6, #33096	; 0x8148
   11678:	cmp	r0, #0
   1167c:	movt	r6, #2
   11680:	beq	116a0 <close@plt+0x5a8>
   11684:	ldr	r2, [r6]
   11688:	movw	r1, #29025	; 0x7161
   1168c:	mov	r0, r5
   11690:	movt	r1, #1
   11694:	bl	122e0 <close@plt+0x11e8>
   11698:	cmp	r0, #0
   1169c:	beq	116c0 <close@plt+0x5c8>
   116a0:	ldr	r0, [r6]
   116a4:	mov	r1, r5
   116a8:	bl	118d8 <close@plt+0x7e0>
   116ac:	mov	r7, r0
   116b0:	ldr	r0, [r6]
   116b4:	bl	121c0 <close@plt+0x10c8>
   116b8:	cmp	r0, #0
   116bc:	beq	1171c <close@plt+0x624>
   116c0:	bl	11050 <__errno_location@plt>
   116c4:	ldr	r4, [r0]
   116c8:	mov	r0, #0
   116cc:	mov	r1, #3
   116d0:	mov	r2, r5
   116d4:	bl	14374 <_obstack_memory_used@@Base+0x1a20>
   116d8:	movw	r2, #29031	; 0x7167
   116dc:	mov	r3, r0
   116e0:	mov	r0, #0
   116e4:	mov	r1, r4
   116e8:	movt	r2, #1
   116ec:	bl	10f9c <error@plt>
   116f0:	mov	r0, #1
   116f4:	sub	sp, fp, #28
   116f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116fc:	mov	r0, #0
   11700:	mov	r1, #0
   11704:	bl	118d8 <close@plt+0x7e0>
   11708:	mov	r1, r0
   1170c:	mov	r0, #1
   11710:	cmp	r1, #0
   11714:	beq	115a0 <close@plt+0x4a8>
   11718:	b	11728 <close@plt+0x630>
   1171c:	mov	r0, #1
   11720:	cmp	r7, #0
   11724:	beq	115a0 <close@plt+0x4a8>
   11728:	ldr	r5, [r9, #8]
   1172c:	ldr	r0, [r9, #12]
   11730:	subs	r7, r0, r5
   11734:	bne	11744 <close@plt+0x64c>
   11738:	ldrb	r1, [r9, #40]	; 0x28
   1173c:	orr	r1, r1, #2
   11740:	strb	r1, [r9, #40]	; 0x28
   11744:	ldr	r3, [r9, #24]
   11748:	ldr	r1, [r9, #4]
   1174c:	ldr	r2, [r9, #16]
   11750:	movw	r6, #33100	; 0x814c
   11754:	movt	r6, #2
   11758:	add	r0, r3, r0
   1175c:	bic	r0, r0, r3
   11760:	sub	r3, r0, r1
   11764:	sub	r1, r2, r1
   11768:	cmp	r3, r1
   1176c:	movw	r1, #23353	; 0x5b39
   11770:	movhi	r0, r2
   11774:	movt	r1, #1
   11778:	cmp	r4, #0
   1177c:	str	r0, [r9, #8]
   11780:	str	r0, [r9, #12]
   11784:	movw	r0, #23386	; 0x5b5a
   11788:	movt	r0, #1
   1178c:	moveq	r0, r1
   11790:	ldr	r1, [r6]
   11794:	bl	10eb8 <fputs_unlocked@plt>
   11798:	ldr	r3, [r6]
   1179c:	mov	r0, r5
   117a0:	mov	r1, #1
   117a4:	mov	r2, r7
   117a8:	bl	10f18 <fwrite_unlocked@plt>
   117ac:	movw	r1, #23365	; 0x5b45
   117b0:	movw	r0, #23713	; 0x5ca1
   117b4:	cmp	r4, #0
   117b8:	movt	r1, #1
   117bc:	movt	r0, #1
   117c0:	moveq	r0, r1
   117c4:	ldr	r1, [r6]
   117c8:	bl	10eb8 <fputs_unlocked@plt>
   117cc:	b	1159c <close@plt+0x4a4>
   117d0:	cmn	r0, #3
   117d4:	bne	11820 <close@plt+0x728>
   117d8:	movw	r0, #32992	; 0x80e0
   117dc:	movw	r2, #23096	; 0x5a38
   117e0:	mov	r1, #0
   117e4:	movt	r0, #2
   117e8:	movt	r2, #1
   117ec:	str	r1, [sp, #4]
   117f0:	movw	r1, #23044	; 0x5a04
   117f4:	movt	r1, #1
   117f8:	ldr	r3, [r0]
   117fc:	movw	r0, #33100	; 0x814c
   11800:	str	r2, [sp]
   11804:	movw	r2, #23082	; 0x5a2a
   11808:	movt	r0, #2
   1180c:	movt	r2, #1
   11810:	ldr	r0, [r0]
   11814:	bl	14bf0 <_obstack_memory_used@@Base+0x229c>
   11818:	mov	r0, #0
   1181c:	bl	1102c <exit@plt>
   11820:	cmn	r0, #2
   11824:	bne	118d0 <close@plt+0x7d8>
   11828:	mov	r0, #0
   1182c:	bl	111f4 <close@plt+0xfc>
   11830:	movw	r1, #23111	; 0x5a47
   11834:	mov	r0, #0
   11838:	mov	r2, #5
   1183c:	movt	r1, #1
   11840:	bl	10f24 <dcgettext@plt>
   11844:	mov	r2, r0
   11848:	mov	r0, #0
   1184c:	mov	r1, #0
   11850:	bl	10f9c <error@plt>
   11854:	mov	r0, #1
   11858:	bl	111f4 <close@plt+0xfc>
   1185c:	movw	r1, #23214	; 0x5aae
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	movt	r1, #1
   1186c:	bl	10f24 <dcgettext@plt>
   11870:	mov	r4, r0
   11874:	ldr	r0, [r8, r6, lsl #2]
   11878:	bl	14620 <_obstack_memory_used@@Base+0x1ccc>
   1187c:	mov	r3, r0
   11880:	mov	r0, #0
   11884:	mov	r1, #0
   11888:	mov	r2, r4
   1188c:	bl	10f9c <error@plt>
   11890:	tst	r7, #1
   11894:	beq	118d0 <close@plt+0x7d8>
   11898:	movw	r0, #33088	; 0x8140
   1189c:	movw	r1, #23231	; 0x5abf
   118a0:	mov	r2, #5
   118a4:	movt	r0, #2
   118a8:	movt	r1, #1
   118ac:	ldr	r4, [r0]
   118b0:	mov	r0, #0
   118b4:	bl	10f24 <dcgettext@plt>
   118b8:	movw	r2, #29312	; 0x7280
   118bc:	mov	r3, r0
   118c0:	mov	r0, r4
   118c4:	mov	r1, #1
   118c8:	movt	r2, #1
   118cc:	bl	1108c <__fprintf_chk@plt>
   118d0:	mov	r0, #1
   118d4:	bl	111f4 <close@plt+0xfc>
   118d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118dc:	add	fp, sp, #28
   118e0:	sub	sp, sp, #44	; 0x2c
   118e4:	mov	r5, r0
   118e8:	mov	r0, #0
   118ec:	mov	sl, r1
   118f0:	str	r0, [fp, #-32]	; 0xffffffe0
   118f4:	str	r0, [sp, #36]	; 0x24
   118f8:	movw	r0, #23776	; 0x5ce0
   118fc:	movt	r0, #1
   11900:	bl	10fc0 <getenv@plt>
   11904:	cmp	r0, #0
   11908:	beq	11918 <close@plt+0x820>
   1190c:	ldrb	r1, [r0]
   11910:	cmp	r1, #0
   11914:	bne	11920 <close@plt+0x828>
   11918:	movw	r0, #23781	; 0x5ce5
   1191c:	movt	r0, #1
   11920:	movw	r7, #24328	; 0x5f08
   11924:	str	r0, [sp, #12]
   11928:	mov	r0, #1
   1192c:	mov	r9, #0
   11930:	movt	r7, #1
   11934:	str	r0, [sp, #28]
   11938:	mov	r0, #3
   1193c:	str	r0, [sp, #16]
   11940:	movw	r0, #4310	; 0x10d6
   11944:	add	r0, r7, r0
   11948:	str	r0, [sp, #32]
   1194c:	cmp	r5, #0
   11950:	beq	1197c <close@plt+0x884>
   11954:	sub	r0, fp, #32
   11958:	add	r1, sp, #36	; 0x24
   1195c:	mov	r2, #10
   11960:	mov	r3, r5
   11964:	bl	10ec4 <__getdelim@plt>
   11968:	mov	r1, r0
   1196c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11970:	cmp	r1, #0
   11974:	bgt	119a0 <close@plt+0x8a8>
   11978:	b	11dd8 <close@plt+0xce0>
   1197c:	ldr	r0, [sp, #32]
   11980:	cmp	r7, r0
   11984:	beq	11ddc <close@plt+0xce4>
   11988:	mov	r0, r7
   1198c:	bl	11044 <strlen@plt>
   11990:	add	r0, r0, r7
   11994:	add	r1, r0, #1
   11998:	mov	r0, r7
   1199c:	mov	r7, r1
   119a0:	add	r9, r9, #1
   119a4:	add	r6, r0, #3
   119a8:	sub	r4, r0, #1
   119ac:	bl	11020 <__ctype_b_loc@plt>
   119b0:	mov	r8, r0
   119b4:	ldr	r0, [r0]
   119b8:	ldrb	r2, [r4, #1]!
   119bc:	mov	r1, r6
   119c0:	add	r6, r6, #1
   119c4:	add	r3, r0, r2, lsl #1
   119c8:	ldrb	r3, [r3, #1]
   119cc:	tst	r3, #32
   119d0:	bne	119b8 <close@plt+0x8c0>
   119d4:	cmp	r2, #0
   119d8:	cmpne	r2, #35	; 0x23
   119dc:	beq	1194c <close@plt+0x854>
   119e0:	mov	r6, r4
   119e4:	str	sl, [sp, #24]
   119e8:	mov	sl, r1
   119ec:	ldrb	r1, [r6, #1]!
   119f0:	cmp	r1, #0
   119f4:	beq	11a0c <close@plt+0x914>
   119f8:	add	r1, r0, r1, lsl #1
   119fc:	ldrh	r1, [r1]
   11a00:	ands	r1, r1, #8192	; 0x2000
   11a04:	add	r1, sl, #1
   11a08:	beq	119e8 <close@plt+0x8f0>
   11a0c:	sub	r1, r6, r4
   11a10:	mov	r0, r4
   11a14:	bl	152ec <_obstack_memory_used@@Base+0x2998>
   11a18:	str	r0, [sp, #20]
   11a1c:	ldrb	r0, [r6]
   11a20:	cmp	r0, #0
   11a24:	beq	11a54 <close@plt+0x95c>
   11a28:	ldr	r0, [r8]
   11a2c:	ldrb	r2, [r6, #1]!
   11a30:	mov	r1, sl
   11a34:	add	sl, sl, #1
   11a38:	add	r3, r0, r2, lsl #1
   11a3c:	ldrb	r3, [r3, #1]
   11a40:	tst	r3, #32
   11a44:	bne	11a2c <close@plt+0x934>
   11a48:	cmp	r2, #0
   11a4c:	cmpne	r2, #35	; 0x23
   11a50:	bne	11ab4 <close@plt+0x9bc>
   11a54:	movw	r1, #23786	; 0x5cea
   11a58:	mov	r0, #0
   11a5c:	mov	r2, #5
   11a60:	movt	r1, #1
   11a64:	str	r0, [sp, #28]
   11a68:	mov	r0, #0
   11a6c:	bl	10f24 <dcgettext@plt>
   11a70:	ldr	sl, [sp, #24]
   11a74:	mov	r4, r0
   11a78:	mov	r0, #0
   11a7c:	mov	r1, #3
   11a80:	mov	r2, sl
   11a84:	bl	14374 <_obstack_memory_used@@Base+0x1a20>
   11a88:	mov	r3, r0
   11a8c:	mov	r0, #0
   11a90:	mov	r1, #0
   11a94:	mov	r2, r4
   11a98:	str	r9, [sp]
   11a9c:	bl	10f9c <error@plt>
   11aa0:	ldr	r0, [sp, #20]
   11aa4:	bl	122b8 <close@plt+0x11c0>
   11aa8:	cmp	r5, #0
   11aac:	bne	11954 <close@plt+0x85c>
   11ab0:	b	1197c <close@plt+0x884>
   11ab4:	ldr	r8, [sp, #20]
   11ab8:	mov	r3, r6
   11abc:	uxtb	r2, r2
   11ac0:	cmp	r2, #35	; 0x23
   11ac4:	cmpne	r2, #0
   11ac8:	beq	11ad8 <close@plt+0x9e0>
   11acc:	ldrb	r2, [r3, #1]!
   11ad0:	add	r1, r1, #1
   11ad4:	b	11abc <close@plt+0x9c4>
   11ad8:	movw	r4, #33108	; 0x8154
   11adc:	movt	r4, #2
   11ae0:	ldrb	r2, [r1, #-2]
   11ae4:	sub	r1, r1, #1
   11ae8:	add	r2, r0, r2, lsl #1
   11aec:	ldrb	r2, [r2, #1]
   11af0:	tst	r2, #32
   11af4:	bne	11ae0 <close@plt+0x9e8>
   11af8:	sub	r1, r1, r6
   11afc:	mov	r0, r6
   11b00:	bl	152ec <_obstack_memory_used@@Base+0x2998>
   11b04:	movw	r1, #23776	; 0x5ce0
   11b08:	mov	r6, r0
   11b0c:	mov	r0, r8
   11b10:	movt	r1, #1
   11b14:	bl	12064 <close@plt+0xf6c>
   11b18:	ldr	sl, [sp, #24]
   11b1c:	cmp	r0, #0
   11b20:	beq	11bf4 <close@plt+0xafc>
   11b24:	ldr	r0, [sp, #16]
   11b28:	cmp	r0, #2
   11b2c:	movweq	r0, #1
   11b30:	cmp	r0, #0
   11b34:	beq	11c28 <close@plt+0xb30>
   11b38:	str	r0, [sp, #16]
   11b3c:	ldrb	r0, [r8]
   11b40:	cmp	r0, #42	; 0x2a
   11b44:	beq	11b80 <close@plt+0xa88>
   11b48:	cmp	r0, #46	; 0x2e
   11b4c:	bne	11c40 <close@plt+0xb48>
   11b50:	ldr	r0, [r4, #12]
   11b54:	ldr	r1, [r4, #16]
   11b58:	cmp	r1, r0
   11b5c:	bne	11b70 <close@plt+0xa78>
   11b60:	mov	r0, r4
   11b64:	mov	r1, #1
   11b68:	bl	12724 <_obstack_newchunk@@Base>
   11b6c:	ldr	r0, [r4, #12]
   11b70:	add	r1, r0, #1
   11b74:	str	r1, [r4, #12]
   11b78:	mov	r1, #42	; 0x2a
   11b7c:	strb	r1, [r0]
   11b80:	mov	r0, r8
   11b84:	bl	11dec <close@plt+0xcf4>
   11b88:	ldr	r0, [r4, #12]
   11b8c:	ldr	r1, [r4, #16]
   11b90:	cmp	r1, r0
   11b94:	bne	11ba8 <close@plt+0xab0>
   11b98:	mov	r0, r4
   11b9c:	mov	r1, #1
   11ba0:	bl	12724 <_obstack_newchunk@@Base>
   11ba4:	ldr	r0, [r4, #12]
   11ba8:	add	r1, r0, #1
   11bac:	str	r1, [r4, #12]
   11bb0:	mov	r1, #61	; 0x3d
   11bb4:	strb	r1, [r0]
   11bb8:	mov	r0, r6
   11bbc:	bl	11dec <close@plt+0xcf4>
   11bc0:	ldr	r0, [r4, #12]
   11bc4:	ldr	r1, [r4, #16]
   11bc8:	cmp	r1, r0
   11bcc:	bne	11be0 <close@plt+0xae8>
   11bd0:	mov	r0, r4
   11bd4:	mov	r1, #1
   11bd8:	bl	12724 <_obstack_newchunk@@Base>
   11bdc:	ldr	r0, [r4, #12]
   11be0:	add	r1, r0, #1
   11be4:	str	r1, [r4, #12]
   11be8:	mov	r1, #58	; 0x3a
   11bec:	strb	r1, [r0]
   11bf0:	b	11dc8 <close@plt+0xcd0>
   11bf4:	ldr	r1, [sp, #12]
   11bf8:	mov	r0, r6
   11bfc:	mov	r2, #0
   11c00:	bl	10fa8 <fnmatch@plt>
   11c04:	cmp	r0, #0
   11c08:	beq	11c34 <close@plt+0xb3c>
   11c0c:	ldr	r0, [sp, #16]
   11c10:	sub	r0, r0, #2
   11c14:	clz	r0, r0
   11c18:	lsr	r0, r0, #5
   11c1c:	lsl	r0, r0, #1
   11c20:	str	r0, [sp, #16]
   11c24:	b	11dc8 <close@plt+0xcd0>
   11c28:	mov	r0, #0
   11c2c:	str	r0, [sp, #16]
   11c30:	b	11dc8 <close@plt+0xcd0>
   11c34:	mov	r0, #2
   11c38:	str	r0, [sp, #16]
   11c3c:	b	11dc8 <close@plt+0xcd0>
   11c40:	movw	r1, #23830	; 0x5d16
   11c44:	mov	r0, r8
   11c48:	movt	r1, #1
   11c4c:	bl	12064 <close@plt+0xf6c>
   11c50:	cmp	r0, #0
   11c54:	beq	11dc8 <close@plt+0xcd0>
   11c58:	movw	r1, #23838	; 0x5d1e
   11c5c:	mov	r0, r8
   11c60:	movt	r1, #1
   11c64:	bl	12064 <close@plt+0xf6c>
   11c68:	cmp	r0, #0
   11c6c:	beq	11dc8 <close@plt+0xcd0>
   11c70:	movw	r1, #23844	; 0x5d24
   11c74:	mov	r0, r8
   11c78:	movt	r1, #1
   11c7c:	bl	12064 <close@plt+0xf6c>
   11c80:	cmp	r0, #0
   11c84:	beq	11dc8 <close@plt+0xcd0>
   11c88:	str	r6, [sp, #8]
   11c8c:	mov	r6, #0
   11c90:	movw	r0, #28696	; 0x7018
   11c94:	movt	r0, #1
   11c98:	ldr	r1, [r0, r6, lsl #2]
   11c9c:	mov	r0, r8
   11ca0:	bl	12064 <close@plt+0xf6c>
   11ca4:	cmp	r0, #0
   11ca8:	beq	11cfc <close@plt+0xc04>
   11cac:	add	r6, r6, #1
   11cb0:	cmp	r6, #37	; 0x25
   11cb4:	bne	11c90 <close@plt+0xb98>
   11cb8:	ldr	r0, [sp, #16]
   11cbc:	sub	r0, r0, #1
   11cc0:	cmp	r0, #1
   11cc4:	bhi	11dc4 <close@plt+0xccc>
   11cc8:	movw	r1, #23853	; 0x5d2d
   11ccc:	mov	r0, #0
   11cd0:	mov	r2, #5
   11cd4:	movt	r1, #1
   11cd8:	bl	10f24 <dcgettext@plt>
   11cdc:	mov	r6, r0
   11ce0:	mov	r0, #0
   11ce4:	cmp	sl, #0
   11ce8:	beq	11d90 <close@plt+0xc98>
   11cec:	mov	r1, #3
   11cf0:	mov	r2, sl
   11cf4:	bl	14374 <_obstack_memory_used@@Base+0x1a20>
   11cf8:	b	11da0 <close@plt+0xca8>
   11cfc:	ldr	r0, [r4, #12]
   11d00:	ldr	r1, [r4, #16]
   11d04:	cmp	r1, r0
   11d08:	bne	11d1c <close@plt+0xc24>
   11d0c:	mov	r0, r4
   11d10:	mov	r1, #1
   11d14:	bl	12724 <_obstack_newchunk@@Base>
   11d18:	ldr	r0, [r4, #12]
   11d1c:	movw	r1, #28848	; 0x70b0
   11d20:	add	r2, r0, #1
   11d24:	movt	r1, #1
   11d28:	ldr	r6, [r1, r6, lsl #2]
   11d2c:	ldrb	r1, [r6]
   11d30:	str	r2, [r4, #12]
   11d34:	strb	r1, [r0]
   11d38:	ldr	r0, [r4, #12]
   11d3c:	ldr	r1, [r4, #16]
   11d40:	cmp	r1, r0
   11d44:	bne	11d58 <close@plt+0xc60>
   11d48:	mov	r0, r4
   11d4c:	mov	r1, #1
   11d50:	bl	12724 <_obstack_newchunk@@Base>
   11d54:	ldr	r0, [r4, #12]
   11d58:	ldrb	r1, [r6, #1]
   11d5c:	add	r2, r0, #1
   11d60:	str	r2, [r4, #12]
   11d64:	strb	r1, [r0]
   11d68:	ldr	r0, [r4, #12]
   11d6c:	ldr	r1, [r4, #16]
   11d70:	cmp	r1, r0
   11d74:	bne	11d88 <close@plt+0xc90>
   11d78:	mov	r0, r4
   11d7c:	mov	r1, #1
   11d80:	bl	12724 <_obstack_newchunk@@Base>
   11d84:	ldr	r0, [r4, #12]
   11d88:	ldr	r6, [sp, #8]
   11d8c:	b	11ba8 <close@plt+0xab0>
   11d90:	movw	r1, #23885	; 0x5d4d
   11d94:	mov	r2, #5
   11d98:	movt	r1, #1
   11d9c:	bl	10f24 <dcgettext@plt>
   11da0:	mov	r3, r0
   11da4:	mov	r0, #0
   11da8:	mov	r1, #0
   11dac:	mov	r2, r6
   11db0:	str	r9, [sp]
   11db4:	str	r8, [sp, #4]
   11db8:	str	r0, [sp, #28]
   11dbc:	mov	r0, #0
   11dc0:	bl	10f9c <error@plt>
   11dc4:	ldr	r6, [sp, #8]
   11dc8:	mov	r0, r8
   11dcc:	bl	122b8 <close@plt+0x11c0>
   11dd0:	mov	r0, r6
   11dd4:	b	11aa4 <close@plt+0x9ac>
   11dd8:	bl	122b8 <close@plt+0x11c0>
   11ddc:	ldr	r0, [sp, #28]
   11de0:	and	r0, r0, #1
   11de4:	sub	sp, fp, #28
   11de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11df0:	add	fp, sp, #24
   11df4:	movw	r5, #33108	; 0x8154
   11df8:	mov	r4, r0
   11dfc:	mov	r0, #1
   11e00:	mov	r8, #39	; 0x27
   11e04:	mov	r7, #92	; 0x5c
   11e08:	movt	r5, #2
   11e0c:	b	11e24 <close@plt+0xd2c>
   11e10:	ldrb	r1, [r4], #1
   11e14:	add	r2, r0, #1
   11e18:	str	r2, [r5, #12]
   11e1c:	strb	r1, [r0]
   11e20:	mov	r0, r6
   11e24:	ldrb	r1, [r4]
   11e28:	sub	r2, r1, #58	; 0x3a
   11e2c:	cmp	r2, #36	; 0x24
   11e30:	bhi	11f18 <close@plt+0xe20>
   11e34:	add	r1, pc, #4
   11e38:	mov	r6, #1
   11e3c:	ldr	pc, [r1, r2, lsl #2]
   11e40:	ldrdeq	r1, [r1], -r4
   11e44:			; <UNDEFINED> instruction: 0x00011fb8
   11e48:			; <UNDEFINED> instruction: 0x00011fb8
   11e4c:	ldrdeq	r1, [r1], -r4
   11e50:			; <UNDEFINED> instruction: 0x00011fb8
   11e54:			; <UNDEFINED> instruction: 0x00011fb8
   11e58:			; <UNDEFINED> instruction: 0x00011fb8
   11e5c:			; <UNDEFINED> instruction: 0x00011fb8
   11e60:			; <UNDEFINED> instruction: 0x00011fb8
   11e64:			; <UNDEFINED> instruction: 0x00011fb8
   11e68:			; <UNDEFINED> instruction: 0x00011fb8
   11e6c:			; <UNDEFINED> instruction: 0x00011fb8
   11e70:			; <UNDEFINED> instruction: 0x00011fb8
   11e74:			; <UNDEFINED> instruction: 0x00011fb8
   11e78:			; <UNDEFINED> instruction: 0x00011fb8
   11e7c:			; <UNDEFINED> instruction: 0x00011fb8
   11e80:			; <UNDEFINED> instruction: 0x00011fb8
   11e84:			; <UNDEFINED> instruction: 0x00011fb8
   11e88:			; <UNDEFINED> instruction: 0x00011fb8
   11e8c:			; <UNDEFINED> instruction: 0x00011fb8
   11e90:			; <UNDEFINED> instruction: 0x00011fb8
   11e94:			; <UNDEFINED> instruction: 0x00011fb8
   11e98:			; <UNDEFINED> instruction: 0x00011fb8
   11e9c:			; <UNDEFINED> instruction: 0x00011fb8
   11ea0:			; <UNDEFINED> instruction: 0x00011fb8
   11ea4:			; <UNDEFINED> instruction: 0x00011fb8
   11ea8:			; <UNDEFINED> instruction: 0x00011fb8
   11eac:			; <UNDEFINED> instruction: 0x00011fb8
   11eb0:			; <UNDEFINED> instruction: 0x00011fb8
   11eb4:			; <UNDEFINED> instruction: 0x00011fb8
   11eb8:			; <UNDEFINED> instruction: 0x00011fb8
   11ebc:			; <UNDEFINED> instruction: 0x00011fb8
   11ec0:			; <UNDEFINED> instruction: 0x00011fb8
   11ec4:			; <UNDEFINED> instruction: 0x00011fb8
   11ec8:	andeq	r1, r1, r0, lsl pc
   11ecc:			; <UNDEFINED> instruction: 0x00011fb8
   11ed0:	andeq	r1, r1, r0, lsl pc
   11ed4:	tst	r0, #1
   11ed8:	mov	r6, #1
   11edc:	beq	11fb8 <close@plt+0xec0>
   11ee0:	ldr	r0, [r5, #12]
   11ee4:	ldr	r1, [r5, #16]
   11ee8:	cmp	r1, r0
   11eec:	bne	11f00 <close@plt+0xe08>
   11ef0:	mov	r0, r5
   11ef4:	mov	r1, #1
   11ef8:	bl	12724 <_obstack_newchunk@@Base>
   11efc:	ldr	r0, [r5, #12]
   11f00:	add	r1, r0, #1
   11f04:	str	r1, [r5, #12]
   11f08:	strb	r7, [r0]
   11f0c:	b	11fb4 <close@plt+0xebc>
   11f10:	eor	r6, r0, #1
   11f14:	b	11fb8 <close@plt+0xec0>
   11f18:	cmp	r1, #39	; 0x27
   11f1c:	beq	11f30 <close@plt+0xe38>
   11f20:	cmp	r1, #0
   11f24:	mov	r6, #1
   11f28:	bne	11fb8 <close@plt+0xec0>
   11f2c:	b	11fdc <close@plt+0xee4>
   11f30:	ldr	r0, [r5, #12]
   11f34:	ldr	r1, [r5, #16]
   11f38:	cmp	r1, r0
   11f3c:	bne	11f50 <close@plt+0xe58>
   11f40:	mov	r0, r5
   11f44:	mov	r1, #1
   11f48:	bl	12724 <_obstack_newchunk@@Base>
   11f4c:	ldr	r0, [r5, #12]
   11f50:	add	r1, r0, #1
   11f54:	str	r1, [r5, #12]
   11f58:	strb	r8, [r0]
   11f5c:	ldr	r0, [r5, #12]
   11f60:	ldr	r1, [r5, #16]
   11f64:	cmp	r1, r0
   11f68:	bne	11f7c <close@plt+0xe84>
   11f6c:	mov	r0, r5
   11f70:	mov	r1, #1
   11f74:	bl	12724 <_obstack_newchunk@@Base>
   11f78:	ldr	r0, [r5, #12]
   11f7c:	add	r1, r0, #1
   11f80:	str	r1, [r5, #12]
   11f84:	strb	r7, [r0]
   11f88:	ldr	r0, [r5, #12]
   11f8c:	ldr	r1, [r5, #16]
   11f90:	cmp	r1, r0
   11f94:	bne	11fa8 <close@plt+0xeb0>
   11f98:	mov	r0, r5
   11f9c:	mov	r1, #1
   11fa0:	bl	12724 <_obstack_newchunk@@Base>
   11fa4:	ldr	r0, [r5, #12]
   11fa8:	add	r1, r0, #1
   11fac:	str	r1, [r5, #12]
   11fb0:	strb	r8, [r0]
   11fb4:	mov	r6, #1
   11fb8:	ldr	r0, [r5, #12]
   11fbc:	ldr	r1, [r5, #16]
   11fc0:	cmp	r1, r0
   11fc4:	bne	11e10 <close@plt+0xd18>
   11fc8:	mov	r0, r5
   11fcc:	mov	r1, #1
   11fd0:	bl	12724 <_obstack_newchunk@@Base>
   11fd4:	ldr	r0, [r5, #12]
   11fd8:	b	11e10 <close@plt+0xd18>
   11fdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11fe0:	sub	r0, r0, #1
   11fe4:	ldrb	r3, [r0, #1]!
   11fe8:	cmp	r3, #47	; 0x2f
   11fec:	beq	11fe4 <close@plt+0xeec>
   11ff0:	mov	r2, #0
   11ff4:	mov	r1, r0
   11ff8:	b	12004 <close@plt+0xf0c>
   11ffc:	ldrb	r3, [r1, #1]!
   12000:	mov	r2, #1
   12004:	uxtb	r3, r3
   12008:	cmp	r3, #47	; 0x2f
   1200c:	beq	11ffc <close@plt+0xf04>
   12010:	cmp	r3, #0
   12014:	bxeq	lr
   12018:	tst	r2, #1
   1201c:	mov	r2, #0
   12020:	movne	r0, r1
   12024:	ldrb	r3, [r1, #1]!
   12028:	b	12004 <close@plt+0xf0c>
   1202c:	push	{r4, sl, fp, lr}
   12030:	add	fp, sp, #8
   12034:	mov	r4, r0
   12038:	bl	11044 <strlen@plt>
   1203c:	mov	r1, r0
   12040:	sub	r2, r4, #1
   12044:	mov	r0, r1
   12048:	cmp	r1, #2
   1204c:	bcc	12060 <close@plt+0xf68>
   12050:	ldrb	r3, [r2, r0]
   12054:	sub	r1, r0, #1
   12058:	cmp	r3, #47	; 0x2f
   1205c:	beq	12044 <close@plt+0xf4c>
   12060:	pop	{r4, sl, fp, pc}
   12064:	cmp	r0, r1
   12068:	moveq	r0, #0
   1206c:	bxeq	lr
   12070:	ldrb	r3, [r1]
   12074:	ldrb	ip, [r0]
   12078:	sub	r2, r3, #65	; 0x41
   1207c:	cmp	r2, #26
   12080:	sub	r2, ip, #65	; 0x41
   12084:	addcc	r3, r3, #32
   12088:	cmp	r2, #26
   1208c:	addcc	ip, ip, #32
   12090:	uxtb	r3, r3
   12094:	uxtb	r2, ip
   12098:	cmp	r2, #0
   1209c:	beq	120b0 <close@plt+0xfb8>
   120a0:	add	r1, r1, #1
   120a4:	add	r0, r0, #1
   120a8:	cmp	r2, r3
   120ac:	beq	12070 <close@plt+0xf78>
   120b0:	sub	r0, r2, r3
   120b4:	bx	lr
   120b8:	movw	r1, #33152	; 0x8180
   120bc:	movt	r1, #2
   120c0:	str	r0, [r1]
   120c4:	bx	lr
   120c8:	movw	r1, #33156	; 0x8184
   120cc:	movt	r1, #2
   120d0:	strb	r0, [r1]
   120d4:	bx	lr
   120d8:	push	{r4, r5, r6, sl, fp, lr}
   120dc:	add	fp, sp, #16
   120e0:	sub	sp, sp, #8
   120e4:	movw	r0, #33100	; 0x814c
   120e8:	movt	r0, #2
   120ec:	ldr	r0, [r0]
   120f0:	bl	1547c <_obstack_memory_used@@Base+0x2b28>
   120f4:	cmp	r0, #0
   120f8:	beq	12120 <close@plt+0x1028>
   120fc:	movw	r0, #33156	; 0x8184
   12100:	movt	r0, #2
   12104:	ldrb	r0, [r0]
   12108:	cmp	r0, #0
   1210c:	beq	12140 <close@plt+0x1048>
   12110:	bl	11050 <__errno_location@plt>
   12114:	ldr	r0, [r0]
   12118:	cmp	r0, #32
   1211c:	bne	12140 <close@plt+0x1048>
   12120:	movw	r0, #33088	; 0x8140
   12124:	movt	r0, #2
   12128:	ldr	r0, [r0]
   1212c:	bl	1547c <_obstack_memory_used@@Base+0x2b28>
   12130:	cmp	r0, #0
   12134:	subeq	sp, fp, #16
   12138:	popeq	{r4, r5, r6, sl, fp, pc}
   1213c:	b	121b0 <close@plt+0x10b8>
   12140:	movw	r1, #29015	; 0x7157
   12144:	mov	r0, #0
   12148:	mov	r2, #5
   1214c:	movt	r1, #1
   12150:	bl	10f24 <dcgettext@plt>
   12154:	mov	r4, r0
   12158:	movw	r0, #33152	; 0x8180
   1215c:	movt	r0, #2
   12160:	ldr	r6, [r0]
   12164:	bl	11050 <__errno_location@plt>
   12168:	ldr	r5, [r0]
   1216c:	cmp	r6, #0
   12170:	bne	1218c <close@plt+0x1094>
   12174:	movw	r2, #29031	; 0x7167
   12178:	mov	r0, #0
   1217c:	mov	r1, r5
   12180:	mov	r3, r4
   12184:	movt	r2, #1
   12188:	b	121ac <close@plt+0x10b4>
   1218c:	mov	r0, r6
   12190:	bl	14298 <_obstack_memory_used@@Base+0x1944>
   12194:	movw	r2, #29027	; 0x7163
   12198:	mov	r3, r0
   1219c:	str	r4, [sp]
   121a0:	mov	r0, #0
   121a4:	mov	r1, r5
   121a8:	movt	r2, #1
   121ac:	bl	10f9c <error@plt>
   121b0:	movw	r0, #32996	; 0x80e4
   121b4:	movt	r0, #2
   121b8:	ldr	r0, [r0]
   121bc:	bl	10ef4 <_exit@plt>
   121c0:	push	{r4, r5, r6, sl, fp, lr}
   121c4:	add	fp, sp, #16
   121c8:	sub	sp, sp, #8
   121cc:	mov	r4, r0
   121d0:	bl	11080 <fileno@plt>
   121d4:	cmn	r0, #1
   121d8:	ble	1224c <close@plt+0x1154>
   121dc:	mov	r0, r4
   121e0:	bl	10ff0 <__freading@plt>
   121e4:	cmp	r0, #0
   121e8:	beq	12214 <close@plt+0x111c>
   121ec:	mov	r0, r4
   121f0:	bl	11080 <fileno@plt>
   121f4:	mov	r1, #1
   121f8:	mov	r2, #0
   121fc:	mov	r3, #0
   12200:	str	r1, [sp]
   12204:	bl	10f6c <lseek64@plt>
   12208:	and	r0, r0, r1
   1220c:	cmn	r0, #1
   12210:	beq	1224c <close@plt+0x1154>
   12214:	mov	r0, r4
   12218:	bl	1225c <close@plt+0x1164>
   1221c:	cmp	r0, #0
   12220:	beq	1224c <close@plt+0x1154>
   12224:	bl	11050 <__errno_location@plt>
   12228:	ldr	r6, [r0]
   1222c:	mov	r5, r0
   12230:	mov	r0, r4
   12234:	bl	11098 <fclose@plt>
   12238:	cmp	r6, #0
   1223c:	strne	r6, [r5]
   12240:	mvnne	r0, #0
   12244:	sub	sp, fp, #16
   12248:	pop	{r4, r5, r6, sl, fp, pc}
   1224c:	mov	r0, r4
   12250:	sub	sp, fp, #16
   12254:	pop	{r4, r5, r6, sl, fp, lr}
   12258:	b	11098 <fclose@plt>
   1225c:	push	{r4, sl, fp, lr}
   12260:	add	fp, sp, #8
   12264:	sub	sp, sp, #8
   12268:	mov	r4, r0
   1226c:	cmp	r0, #0
   12270:	beq	122a8 <close@plt+0x11b0>
   12274:	mov	r0, r4
   12278:	bl	10ff0 <__freading@plt>
   1227c:	cmp	r0, #0
   12280:	beq	122a8 <close@plt+0x11b0>
   12284:	ldrb	r0, [r4, #1]
   12288:	tst	r0, #1
   1228c:	beq	122a8 <close@plt+0x11b0>
   12290:	mov	r0, #1
   12294:	mov	r2, #0
   12298:	mov	r3, #0
   1229c:	str	r0, [sp]
   122a0:	mov	r0, r4
   122a4:	bl	12528 <close@plt+0x1430>
   122a8:	mov	r0, r4
   122ac:	sub	sp, fp, #8
   122b0:	pop	{r4, sl, fp, lr}
   122b4:	b	10edc <fflush@plt>
   122b8:	push	{r4, r5, r6, sl, fp, lr}
   122bc:	add	fp, sp, #16
   122c0:	mov	r4, r0
   122c4:	bl	11050 <__errno_location@plt>
   122c8:	ldr	r6, [r0]
   122cc:	mov	r5, r0
   122d0:	mov	r0, r4
   122d4:	bl	10ee8 <free@plt>
   122d8:	str	r6, [r5]
   122dc:	pop	{r4, r5, r6, sl, fp, pc}
   122e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122e4:	add	fp, sp, #28
   122e8:	sub	sp, sp, #4
   122ec:	mov	r5, r0
   122f0:	mov	r0, r2
   122f4:	mov	r4, r2
   122f8:	mov	r9, r1
   122fc:	bl	11080 <fileno@plt>
   12300:	mov	r7, #0
   12304:	cmp	r0, #0
   12308:	beq	12348 <close@plt+0x1250>
   1230c:	cmp	r0, #1
   12310:	beq	12354 <close@plt+0x125c>
   12314:	cmp	r0, #2
   12318:	beq	12330 <close@plt+0x1238>
   1231c:	mov	r0, #2
   12320:	mov	r1, #2
   12324:	bl	10f30 <dup2@plt>
   12328:	subs	r7, r0, #2
   1232c:	movwne	r7, #1
   12330:	mov	r0, #1
   12334:	mov	r1, #1
   12338:	bl	10f30 <dup2@plt>
   1233c:	subs	r6, r0, #1
   12340:	movwne	r6, #1
   12344:	b	12358 <close@plt+0x1260>
   12348:	mov	r6, #0
   1234c:	mov	r8, #0
   12350:	b	12420 <close@plt+0x1328>
   12354:	mov	r6, #0
   12358:	mov	r0, #0
   1235c:	mov	r1, #0
   12360:	mov	sl, #0
   12364:	bl	10f30 <dup2@plt>
   12368:	cmp	r0, #0
   1236c:	mov	r8, #0
   12370:	beq	123b0 <close@plt+0x12b8>
   12374:	movw	r0, #29034	; 0x716a
   12378:	mov	r1, #0
   1237c:	movt	r0, #1
   12380:	bl	10fb4 <open64@plt>
   12384:	cmp	r0, #0
   12388:	beq	123ac <close@plt+0x12b4>
   1238c:	cmn	r0, #1
   12390:	ble	124ac <close@plt+0x13b4>
   12394:	bl	110f8 <close@plt>
   12398:	bl	11050 <__errno_location@plt>
   1239c:	mov	r4, r0
   123a0:	mov	r0, #9
   123a4:	str	r0, [r4]
   123a8:	b	124b4 <close@plt+0x13bc>
   123ac:	mov	r8, #1
   123b0:	cmp	r6, #0
   123b4:	beq	123d4 <close@plt+0x12dc>
   123b8:	movw	r0, #29034	; 0x716a
   123bc:	mov	r1, #0
   123c0:	movt	r0, #1
   123c4:	bl	10fb4 <open64@plt>
   123c8:	mov	sl, #1
   123cc:	cmp	r0, #1
   123d0:	bne	1248c <close@plt+0x1394>
   123d4:	cmp	r7, #0
   123d8:	beq	12418 <close@plt+0x1320>
   123dc:	movw	r0, #29034	; 0x716a
   123e0:	mov	r1, #0
   123e4:	movt	r0, #1
   123e8:	bl	10fb4 <open64@plt>
   123ec:	mov	r7, #1
   123f0:	cmp	r0, #2
   123f4:	beq	1241c <close@plt+0x1324>
   123f8:	cmn	r0, #1
   123fc:	ble	12504 <close@plt+0x140c>
   12400:	bl	110f8 <close@plt>
   12404:	bl	11050 <__errno_location@plt>
   12408:	mov	r4, r0
   1240c:	mov	r0, #9
   12410:	str	r0, [r4]
   12414:	b	1250c <close@plt+0x1414>
   12418:	mov	r7, #0
   1241c:	mov	r6, sl
   12420:	mov	r0, r5
   12424:	mov	r1, r9
   12428:	mov	r2, r4
   1242c:	bl	11008 <freopen64@plt>
   12430:	mov	r5, r0
   12434:	bl	11050 <__errno_location@plt>
   12438:	ldr	r9, [r0]
   1243c:	mov	r4, r0
   12440:	cmp	r7, #0
   12444:	beq	12450 <close@plt+0x1358>
   12448:	mov	r0, #2
   1244c:	bl	110f8 <close@plt>
   12450:	cmp	r6, #0
   12454:	beq	12460 <close@plt+0x1368>
   12458:	mov	r0, #1
   1245c:	bl	110f8 <close@plt>
   12460:	cmp	r8, #0
   12464:	beq	12470 <close@plt+0x1378>
   12468:	mov	r0, #0
   1246c:	bl	110f8 <close@plt>
   12470:	cmp	r5, #0
   12474:	bne	12480 <close@plt+0x1388>
   12478:	mov	r5, #0
   1247c:	str	r9, [r4]
   12480:	mov	r0, r5
   12484:	sub	sp, fp, #28
   12488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1248c:	cmn	r0, #1
   12490:	ble	124cc <close@plt+0x13d4>
   12494:	bl	110f8 <close@plt>
   12498:	bl	11050 <__errno_location@plt>
   1249c:	mov	r4, r0
   124a0:	mov	r0, #9
   124a4:	str	r0, [r4]
   124a8:	b	124d4 <close@plt+0x13dc>
   124ac:	bl	11050 <__errno_location@plt>
   124b0:	mov	r4, r0
   124b4:	ldr	r9, [r4]
   124b8:	mov	r8, #1
   124bc:	mov	r5, #0
   124c0:	cmp	r7, #0
   124c4:	bne	12448 <close@plt+0x1350>
   124c8:	b	12450 <close@plt+0x1358>
   124cc:	bl	11050 <__errno_location@plt>
   124d0:	mov	r4, r0
   124d4:	ldr	r9, [r4]
   124d8:	mov	r5, #0
   124dc:	cmp	r7, #0
   124e0:	beq	12458 <close@plt+0x1360>
   124e4:	mov	r0, #2
   124e8:	bl	110f8 <close@plt>
   124ec:	mov	r0, #1
   124f0:	bl	110f8 <close@plt>
   124f4:	mov	r5, #0
   124f8:	cmp	r8, #0
   124fc:	bne	12468 <close@plt+0x1370>
   12500:	b	12478 <close@plt+0x1380>
   12504:	bl	11050 <__errno_location@plt>
   12508:	mov	r4, r0
   1250c:	ldr	r9, [r4]
   12510:	mov	r0, #2
   12514:	bl	110f8 <close@plt>
   12518:	mov	r5, #0
   1251c:	cmp	sl, #0
   12520:	bne	12458 <close@plt+0x1360>
   12524:	b	12460 <close@plt+0x1368>
   12528:	push	{r4, r5, r6, r7, fp, lr}
   1252c:	add	fp, sp, #16
   12530:	sub	sp, sp, #8
   12534:	mov	r4, r0
   12538:	ldr	r0, [r0, #4]
   1253c:	mov	r5, r3
   12540:	mov	r6, r2
   12544:	ldr	r1, [r4, #8]
   12548:	cmp	r1, r0
   1254c:	bne	12568 <close@plt+0x1470>
   12550:	ldrd	r0, [r4, #16]
   12554:	cmp	r1, r0
   12558:	bne	12568 <close@plt+0x1470>
   1255c:	ldr	r0, [r4, #36]	; 0x24
   12560:	cmp	r0, #0
   12564:	beq	12580 <close@plt+0x1488>
   12568:	mov	r0, r4
   1256c:	mov	r2, r6
   12570:	mov	r3, r5
   12574:	sub	sp, fp, #16
   12578:	pop	{r4, r5, r6, r7, fp, lr}
   1257c:	b	110a4 <fseeko64@plt>
   12580:	ldr	r7, [fp, #8]
   12584:	mov	r0, r4
   12588:	bl	11080 <fileno@plt>
   1258c:	mov	r2, r6
   12590:	mov	r3, r5
   12594:	str	r7, [sp]
   12598:	bl	10f6c <lseek64@plt>
   1259c:	and	r2, r0, r1
   125a0:	cmn	r2, #1
   125a4:	beq	125c4 <close@plt+0x14cc>
   125a8:	strd	r0, [r4, #80]	; 0x50
   125ac:	ldr	r0, [r4]
   125b0:	bic	r0, r0, #16
   125b4:	str	r0, [r4]
   125b8:	mov	r0, #0
   125bc:	sub	sp, fp, #16
   125c0:	pop	{r4, r5, r6, r7, fp, pc}
   125c4:	mvn	r0, #0
   125c8:	sub	sp, fp, #16
   125cc:	pop	{r4, r5, r6, r7, fp, pc}

000125d0 <_obstack_begin@@Base>:
   125d0:	push	{r4, r5, r6, sl, fp, lr}
   125d4:	add	fp, sp, #16
   125d8:	cmp	r1, #0
   125dc:	mov	r4, r0
   125e0:	str	r3, [r0, #28]
   125e4:	mov	r5, r2
   125e8:	movweq	r1, #4072	; 0xfe8
   125ec:	cmp	r2, #0
   125f0:	str	r1, [r0]
   125f4:	ldr	r0, [fp, #8]
   125f8:	movweq	r5, #8
   125fc:	sub	r6, r5, #1
   12600:	str	r0, [r4, #32]
   12604:	str	r6, [r4, #24]
   12608:	ldrb	r0, [r4, #40]	; 0x28
   1260c:	and	r0, r0, #254	; 0xfe
   12610:	strb	r0, [r4, #40]	; 0x28
   12614:	mov	r0, r1
   12618:	blx	r3
   1261c:	cmp	r0, #0
   12620:	str	r0, [r4, #4]
   12624:	addne	r1, r0, r6
   12628:	rsbne	r2, r5, #0
   1262c:	addne	r1, r1, #8
   12630:	andne	r1, r1, r2
   12634:	strne	r1, [r4, #12]
   12638:	strne	r1, [r4, #8]
   1263c:	ldrne	r1, [r4]
   12640:	addne	r1, r0, r1
   12644:	strne	r1, [r0]
   12648:	strne	r1, [r4, #16]
   1264c:	movne	r1, #0
   12650:	strne	r1, [r0, #4]
   12654:	ldrbne	r0, [r4, #40]	; 0x28
   12658:	andne	r0, r0, #249	; 0xf9
   1265c:	strbne	r0, [r4, #40]	; 0x28
   12660:	movne	r0, #1
   12664:	popne	{r4, r5, r6, sl, fp, pc}
   12668:	movw	r0, #33000	; 0x80e8
   1266c:	movt	r0, #2
   12670:	ldr	r0, [r0]
   12674:	blx	r0

00012678 <_obstack_begin_1@@Base>:
   12678:	push	{r4, r5, r6, sl, fp, lr}
   1267c:	add	fp, sp, #16
   12680:	cmp	r1, #0
   12684:	mov	r5, r2
   12688:	mov	r4, r0
   1268c:	str	r3, [r0, #28]
   12690:	ldr	r2, [fp, #8]
   12694:	movweq	r1, #4072	; 0xfe8
   12698:	cmp	r5, #0
   1269c:	str	r1, [r0]
   126a0:	ldr	r0, [fp, #12]
   126a4:	movweq	r5, #8
   126a8:	sub	r6, r5, #1
   126ac:	str	r0, [r4, #36]	; 0x24
   126b0:	str	r2, [r4, #32]
   126b4:	str	r6, [r4, #24]
   126b8:	ldrb	r2, [r4, #40]	; 0x28
   126bc:	orr	r2, r2, #1
   126c0:	strb	r2, [r4, #40]	; 0x28
   126c4:	blx	r3
   126c8:	cmp	r0, #0
   126cc:	str	r0, [r4, #4]
   126d0:	addne	r1, r0, r6
   126d4:	rsbne	r2, r5, #0
   126d8:	addne	r1, r1, #8
   126dc:	andne	r1, r1, r2
   126e0:	strne	r1, [r4, #12]
   126e4:	strne	r1, [r4, #8]
   126e8:	ldrne	r1, [r4]
   126ec:	addne	r1, r0, r1
   126f0:	strne	r1, [r0]
   126f4:	strne	r1, [r4, #16]
   126f8:	movne	r1, #0
   126fc:	strne	r1, [r0, #4]
   12700:	ldrbne	r0, [r4, #40]	; 0x28
   12704:	andne	r0, r0, #249	; 0xf9
   12708:	strbne	r0, [r4, #40]	; 0x28
   1270c:	movne	r0, #1
   12710:	popne	{r4, r5, r6, sl, fp, pc}
   12714:	movw	r0, #33000	; 0x80e8
   12718:	movt	r0, #2
   1271c:	ldr	r0, [r0]
   12720:	blx	r0

00012724 <_obstack_newchunk@@Base>:
   12724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12728:	add	fp, sp, #28
   1272c:	sub	sp, sp, #4
   12730:	mov	r4, r0
   12734:	ldr	r2, [r0]
   12738:	ldr	r0, [r0, #8]
   1273c:	ldr	r3, [r4, #12]
   12740:	sub	r9, r3, r0
   12744:	ldr	r0, [r4, #24]
   12748:	mov	r3, #0
   1274c:	add	r1, r9, r1
   12750:	adds	r6, r1, r0
   12754:	adc	r0, r3, #0
   12758:	mov	r3, #100	; 0x64
   1275c:	add	r3, r3, r9, lsr #3
   12760:	adds	r7, r3, r6
   12764:	movcs	r7, r6
   12768:	cmp	r7, r2
   1276c:	movcc	r7, r2
   12770:	cmp	r1, r9
   12774:	bcc	1286c <_obstack_newchunk@@Base+0x148>
   12778:	cmp	r0, #0
   1277c:	bne	1286c <_obstack_newchunk@@Base+0x148>
   12780:	ldrb	r0, [r4, #40]	; 0x28
   12784:	ldr	r8, [r4, #4]
   12788:	tst	r0, #1
   1278c:	bne	127a0 <_obstack_newchunk@@Base+0x7c>
   12790:	ldr	r1, [r4, #28]
   12794:	mov	r0, r7
   12798:	blx	r1
   1279c:	b	127b0 <_obstack_newchunk@@Base+0x8c>
   127a0:	ldr	r2, [r4, #28]
   127a4:	ldr	r0, [r4, #36]	; 0x24
   127a8:	mov	r1, r7
   127ac:	blx	r2
   127b0:	mov	r6, r0
   127b4:	cmp	r0, #0
   127b8:	beq	1286c <_obstack_newchunk@@Base+0x148>
   127bc:	add	r0, r6, r7
   127c0:	str	r6, [r4, #4]
   127c4:	str	r8, [r6, #4]
   127c8:	mov	r2, r9
   127cc:	str	r0, [r4, #16]
   127d0:	str	r0, [r6]
   127d4:	ldr	r5, [r4, #24]
   127d8:	ldr	sl, [r4, #8]
   127dc:	add	r0, r6, r5
   127e0:	mov	r1, sl
   127e4:	add	r0, r0, #8
   127e8:	bic	r7, r0, r5
   127ec:	mov	r0, r7
   127f0:	bl	10f00 <memcpy@plt>
   127f4:	ldrb	r0, [r4, #40]	; 0x28
   127f8:	tst	r0, #2
   127fc:	bne	1284c <_obstack_newchunk@@Base+0x128>
   12800:	add	r1, r8, r5
   12804:	mvn	r0, r5
   12808:	add	r1, r1, #8
   1280c:	and	r0, r1, r0
   12810:	cmp	sl, r0
   12814:	bne	1284c <_obstack_newchunk@@Base+0x128>
   12818:	ldr	r0, [r8, #4]
   1281c:	str	r0, [r6, #4]
   12820:	ldrb	r0, [r4, #40]	; 0x28
   12824:	tst	r0, #1
   12828:	bne	1283c <_obstack_newchunk@@Base+0x118>
   1282c:	ldr	r1, [r4, #32]
   12830:	mov	r0, r8
   12834:	blx	r1
   12838:	b	1284c <_obstack_newchunk@@Base+0x128>
   1283c:	ldr	r2, [r4, #32]
   12840:	ldr	r0, [r4, #36]	; 0x24
   12844:	mov	r1, r8
   12848:	blx	r2
   1284c:	add	r0, r7, r9
   12850:	str	r7, [r4, #8]
   12854:	str	r0, [r4, #12]
   12858:	ldrb	r0, [r4, #40]	; 0x28
   1285c:	and	r0, r0, #253	; 0xfd
   12860:	strb	r0, [r4, #40]	; 0x28
   12864:	sub	sp, fp, #28
   12868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1286c:	movw	r0, #33000	; 0x80e8
   12870:	movt	r0, #2
   12874:	ldr	r0, [r0]
   12878:	blx	r0

0001287c <_obstack_allocated_p@@Base>:
   1287c:	ldr	r2, [r0, #4]
   12880:	mov	r0, #0
   12884:	b	1288c <_obstack_allocated_p@@Base+0x10>
   12888:	ldr	r2, [r2, #4]
   1288c:	cmp	r2, #0
   12890:	bxeq	lr
   12894:	cmp	r2, r1
   12898:	bcs	12888 <_obstack_allocated_p@@Base+0xc>
   1289c:	ldr	r3, [r2]
   128a0:	cmp	r3, r1
   128a4:	bcc	12888 <_obstack_allocated_p@@Base+0xc>
   128a8:	mov	r0, #1
   128ac:	bx	lr

000128b0 <_obstack_free@@Base>:
   128b0:	push	{r4, r5, r6, sl, fp, lr}
   128b4:	add	fp, sp, #16
   128b8:	mov	r5, r1
   128bc:	ldr	r1, [r0, #4]
   128c0:	cmp	r1, #0
   128c4:	beq	12930 <_obstack_free@@Base+0x80>
   128c8:	mov	r4, r0
   128cc:	cmp	r1, r5
   128d0:	bcs	12910 <_obstack_free@@Base+0x60>
   128d4:	b	12904 <_obstack_free@@Base+0x54>
   128d8:	ldr	r2, [r4, #32]
   128dc:	mov	r0, r1
   128e0:	blx	r2
   128e4:	ldrb	r0, [r4, #40]	; 0x28
   128e8:	cmp	r6, #0
   128ec:	mov	r1, r6
   128f0:	orr	r0, r0, #2
   128f4:	strb	r0, [r4, #40]	; 0x28
   128f8:	beq	12930 <_obstack_free@@Base+0x80>
   128fc:	cmp	r1, r5
   12900:	bcs	12910 <_obstack_free@@Base+0x60>
   12904:	ldr	r0, [r1]
   12908:	cmp	r0, r5
   1290c:	bcs	1293c <_obstack_free@@Base+0x8c>
   12910:	ldrb	r0, [r4, #40]	; 0x28
   12914:	ldr	r6, [r1, #4]
   12918:	tst	r0, #1
   1291c:	beq	128d8 <_obstack_free@@Base+0x28>
   12920:	ldr	r2, [r4, #32]
   12924:	ldr	r0, [r4, #36]	; 0x24
   12928:	blx	r2
   1292c:	b	128e4 <_obstack_free@@Base+0x34>
   12930:	cmp	r5, #0
   12934:	popeq	{r4, r5, r6, sl, fp, pc}
   12938:	bl	110ec <abort@plt>
   1293c:	str	r5, [r4, #8]
   12940:	str	r5, [r4, #12]
   12944:	ldr	r0, [r1]
   12948:	str	r1, [r4, #4]
   1294c:	str	r0, [r4, #16]
   12950:	pop	{r4, r5, r6, sl, fp, pc}

00012954 <_obstack_memory_used@@Base>:
   12954:	ldr	r1, [r0, #4]
   12958:	mov	r0, #0
   1295c:	b	12970 <_obstack_memory_used@@Base+0x1c>
   12960:	ldr	r2, [r1]
   12964:	sub	r0, r0, r1
   12968:	ldr	r1, [r1, #4]
   1296c:	add	r0, r0, r2
   12970:	cmp	r1, #0
   12974:	bxeq	lr
   12978:	b	12960 <_obstack_memory_used@@Base+0xc>
   1297c:	push	{fp, lr}
   12980:	mov	fp, sp
   12984:	movw	r0, #33088	; 0x8140
   12988:	movw	r1, #29044	; 0x7174
   1298c:	mov	r2, #5
   12990:	movt	r0, #2
   12994:	movt	r1, #1
   12998:	ldr	r4, [r0]
   1299c:	mov	r0, #0
   129a0:	bl	10f24 <dcgettext@plt>
   129a4:	movw	r2, #29312	; 0x7280
   129a8:	mov	r3, r0
   129ac:	mov	r0, r4
   129b0:	mov	r1, #1
   129b4:	movt	r2, #1
   129b8:	bl	1108c <__fprintf_chk@plt>
   129bc:	movw	r0, #32996	; 0x80e4
   129c0:	movt	r0, #2
   129c4:	ldr	r0, [r0]
   129c8:	bl	1102c <exit@plt>
   129cc:	push	{r4, r5, fp, lr}
   129d0:	add	fp, sp, #8
   129d4:	cmp	r0, #0
   129d8:	beq	12a6c <_obstack_memory_used@@Base+0x118>
   129dc:	mov	r1, #47	; 0x2f
   129e0:	mov	r4, r0
   129e4:	bl	110bc <strrchr@plt>
   129e8:	cmp	r0, #0
   129ec:	mov	r5, r4
   129f0:	addne	r5, r0, #1
   129f4:	sub	r0, r5, r4
   129f8:	cmp	r0, #7
   129fc:	blt	12a50 <_obstack_memory_used@@Base+0xfc>
   12a00:	movw	r1, #29117	; 0x71bd
   12a04:	sub	r0, r5, #7
   12a08:	mov	r2, #7
   12a0c:	movt	r1, #1
   12a10:	bl	110e0 <strncmp@plt>
   12a14:	cmp	r0, #0
   12a18:	bne	12a50 <_obstack_memory_used@@Base+0xfc>
   12a1c:	movw	r1, #29125	; 0x71c5
   12a20:	mov	r0, r5
   12a24:	mov	r2, #3
   12a28:	movt	r1, #1
   12a2c:	bl	110e0 <strncmp@plt>
   12a30:	cmp	r0, #0
   12a34:	beq	12a40 <_obstack_memory_used@@Base+0xec>
   12a38:	mov	r4, r5
   12a3c:	b	12a50 <_obstack_memory_used@@Base+0xfc>
   12a40:	movw	r0, #33072	; 0x8130
   12a44:	add	r4, r5, #3
   12a48:	movt	r0, #2
   12a4c:	str	r4, [r0]
   12a50:	movw	r0, #33076	; 0x8134
   12a54:	movt	r0, #2
   12a58:	str	r4, [r0]
   12a5c:	movw	r0, #33160	; 0x8188
   12a60:	movt	r0, #2
   12a64:	str	r4, [r0]
   12a68:	pop	{r4, r5, fp, pc}
   12a6c:	movw	r0, #33088	; 0x8140
   12a70:	mov	r1, #55	; 0x37
   12a74:	mov	r2, #1
   12a78:	movt	r0, #2
   12a7c:	ldr	r3, [r0]
   12a80:	movw	r0, #29061	; 0x7185
   12a84:	movt	r0, #1
   12a88:	bl	10f60 <fwrite@plt>
   12a8c:	bl	110ec <abort@plt>
   12a90:	push	{r4, r5, r6, sl, fp, lr}
   12a94:	add	fp, sp, #16
   12a98:	mov	r4, r0
   12a9c:	movw	r0, #33168	; 0x8190
   12aa0:	movt	r0, #2
   12aa4:	cmp	r4, #0
   12aa8:	moveq	r4, r0
   12aac:	bl	11050 <__errno_location@plt>
   12ab0:	ldr	r6, [r0]
   12ab4:	mov	r5, r0
   12ab8:	mov	r0, r4
   12abc:	mov	r1, #48	; 0x30
   12ac0:	bl	15284 <_obstack_memory_used@@Base+0x2930>
   12ac4:	str	r6, [r5]
   12ac8:	pop	{r4, r5, r6, sl, fp, pc}
   12acc:	movw	r1, #33168	; 0x8190
   12ad0:	cmp	r0, #0
   12ad4:	movt	r1, #2
   12ad8:	movne	r1, r0
   12adc:	ldr	r0, [r1]
   12ae0:	bx	lr
   12ae4:	movw	r2, #33168	; 0x8190
   12ae8:	cmp	r0, #0
   12aec:	movt	r2, #2
   12af0:	movne	r2, r0
   12af4:	str	r1, [r2]
   12af8:	bx	lr
   12afc:	movw	r3, #33168	; 0x8190
   12b00:	cmp	r0, #0
   12b04:	and	r2, r2, #1
   12b08:	movt	r3, #2
   12b0c:	movne	r3, r0
   12b10:	ubfx	r0, r1, #5, #3
   12b14:	and	r1, r1, #31
   12b18:	add	ip, r3, r0, lsl #2
   12b1c:	mov	r0, #1
   12b20:	ldr	r3, [ip, #8]
   12b24:	and	r0, r0, r3, lsr r1
   12b28:	eor	r2, r0, r2
   12b2c:	eor	r1, r3, r2, lsl r1
   12b30:	str	r1, [ip, #8]
   12b34:	bx	lr
   12b38:	movw	r2, #33168	; 0x8190
   12b3c:	cmp	r0, #0
   12b40:	movt	r2, #2
   12b44:	movne	r2, r0
   12b48:	ldr	r0, [r2, #4]
   12b4c:	str	r1, [r2, #4]
   12b50:	bx	lr
   12b54:	push	{fp, lr}
   12b58:	mov	fp, sp
   12b5c:	movw	r3, #33168	; 0x8190
   12b60:	cmp	r0, #0
   12b64:	movt	r3, #2
   12b68:	movne	r3, r0
   12b6c:	cmp	r1, #0
   12b70:	mov	r0, #10
   12b74:	cmpne	r2, #0
   12b78:	str	r0, [r3]
   12b7c:	bne	12b84 <_obstack_memory_used@@Base+0x230>
   12b80:	bl	110ec <abort@plt>
   12b84:	str	r1, [r3, #40]	; 0x28
   12b88:	str	r2, [r3, #44]	; 0x2c
   12b8c:	pop	{fp, pc}
   12b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b94:	add	fp, sp, #28
   12b98:	sub	sp, sp, #20
   12b9c:	mov	r7, r0
   12ba0:	ldr	r0, [fp, #8]
   12ba4:	movw	r5, #33168	; 0x8190
   12ba8:	mov	r8, r3
   12bac:	mov	r9, r2
   12bb0:	mov	sl, r1
   12bb4:	movt	r5, #2
   12bb8:	cmp	r0, #0
   12bbc:	movne	r5, r0
   12bc0:	bl	11050 <__errno_location@plt>
   12bc4:	ldr	r2, [r5, #40]	; 0x28
   12bc8:	ldr	r3, [r5, #44]	; 0x2c
   12bcc:	mov	r4, r0
   12bd0:	ldm	r5, {r0, r1}
   12bd4:	add	r5, r5, #8
   12bd8:	ldr	r6, [r4]
   12bdc:	stm	sp, {r0, r1, r5}
   12be0:	mov	r0, r7
   12be4:	mov	r1, sl
   12be8:	str	r2, [sp, #12]
   12bec:	str	r3, [sp, #16]
   12bf0:	mov	r2, r9
   12bf4:	mov	r3, r8
   12bf8:	bl	12c08 <_obstack_memory_used@@Base+0x2b4>
   12bfc:	str	r6, [r4]
   12c00:	sub	sp, fp, #28
   12c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c0c:	add	fp, sp, #28
   12c10:	sub	sp, sp, #156	; 0x9c
   12c14:	mov	r5, r0
   12c18:	add	r0, r2, #1
   12c1c:	mov	r6, r1
   12c20:	mov	sl, r3
   12c24:	str	r2, [fp, #-80]	; 0xffffffb0
   12c28:	str	r0, [sp, #72]	; 0x48
   12c2c:	ldr	r0, [fp, #12]
   12c30:	and	r1, r0, #1
   12c34:	str	r1, [sp, #36]	; 0x24
   12c38:	and	r1, r0, #4
   12c3c:	str	r1, [sp, #32]
   12c40:	ubfx	r9, r0, #1, #1
   12c44:	bl	10f78 <__ctype_get_mb_cur_max@plt>
   12c48:	str	r0, [sp, #40]	; 0x28
   12c4c:	ldr	r0, [fp, #24]
   12c50:	ldr	r7, [fp, #8]
   12c54:	mov	r1, #0
   12c58:	str	r5, [fp, #-84]	; 0xffffffac
   12c5c:	str	r1, [fp, #-56]	; 0xffffffc8
   12c60:	mov	r1, #0
   12c64:	str	r1, [sp, #60]	; 0x3c
   12c68:	mov	r1, #1
   12c6c:	str	r1, [fp, #-48]	; 0xffffffd0
   12c70:	str	r0, [sp, #80]	; 0x50
   12c74:	ldr	r0, [fp, #20]
   12c78:	str	r0, [sp, #76]	; 0x4c
   12c7c:	mov	r0, #0
   12c80:	str	r0, [sp, #56]	; 0x38
   12c84:	mov	r0, #0
   12c88:	str	r0, [fp, #-88]	; 0xffffffa8
   12c8c:	mov	r0, #0
   12c90:	str	r0, [fp, #-72]	; 0xffffffb8
   12c94:	mov	r0, #0
   12c98:	cmp	r7, #10
   12c9c:	bhi	13c30 <_obstack_memory_used@@Base+0x12dc>
   12ca0:	add	r1, pc, #24
   12ca4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12ca8:	mov	r4, r6
   12cac:	mov	r8, #0
   12cb0:	mov	r2, #1
   12cb4:	mov	r3, #0
   12cb8:	mov	lr, sl
   12cbc:	ldr	pc, [r1, r7, lsl #2]
   12cc0:	andeq	r2, r1, r4, lsl #27
   12cc4:	ldrdeq	r2, [r1], -r8
   12cc8:	muleq	r1, r8, sp
   12ccc:	andeq	r2, r1, ip, ror sp
   12cd0:	andeq	r2, r1, ip, asr #27
   12cd4:	andeq	r2, r1, r0, lsl #28
   12cd8:	andeq	r2, r1, r8, lsr #27
   12cdc:	andeq	r2, r1, r4, lsl #29
   12ce0:	andeq	r2, r1, ip, ror #25
   12ce4:	andeq	r2, r1, ip, ror #25
   12ce8:	andeq	r2, r1, r4, lsl sp
   12cec:	movw	r0, #29201	; 0x7211
   12cf0:	mov	r1, r7
   12cf4:	movt	r0, #1
   12cf8:	bl	14638 <_obstack_memory_used@@Base+0x1ce4>
   12cfc:	str	r0, [sp, #76]	; 0x4c
   12d00:	movw	r0, #23403	; 0x5b6b
   12d04:	mov	r1, r7
   12d08:	movt	r0, #1
   12d0c:	bl	14638 <_obstack_memory_used@@Base+0x1ce4>
   12d10:	str	r0, [sp, #80]	; 0x50
   12d14:	mov	r8, #0
   12d18:	tst	r9, #1
   12d1c:	bne	12d54 <_obstack_memory_used@@Base+0x400>
   12d20:	ldr	r0, [sp, #76]	; 0x4c
   12d24:	ldrb	r0, [r0]
   12d28:	cmp	r0, #0
   12d2c:	beq	12d54 <_obstack_memory_used@@Base+0x400>
   12d30:	ldr	r1, [sp, #76]	; 0x4c
   12d34:	mov	r8, #0
   12d38:	add	r1, r1, #1
   12d3c:	cmp	r8, r4
   12d40:	strbcc	r0, [r5, r8]
   12d44:	ldrb	r0, [r1, r8]
   12d48:	add	r8, r8, #1
   12d4c:	cmp	r0, #0
   12d50:	bne	12d3c <_obstack_memory_used@@Base+0x3e8>
   12d54:	ldr	r6, [sp, #80]	; 0x50
   12d58:	mov	r0, r6
   12d5c:	bl	11044 <strlen@plt>
   12d60:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d64:	str	r0, [fp, #-72]	; 0xffffffb8
   12d68:	str	r6, [fp, #-88]	; 0xffffffa8
   12d6c:	mov	r2, #1
   12d70:	mov	r3, r9
   12d74:	mov	lr, sl
   12d78:	b	12e84 <_obstack_memory_used@@Base+0x530>
   12d7c:	mov	r0, #1
   12d80:	b	12dd8 <_obstack_memory_used@@Base+0x484>
   12d84:	mov	r7, #0
   12d88:	mov	r8, #0
   12d8c:	mov	r2, r0
   12d90:	mov	r3, #0
   12d94:	b	12e84 <_obstack_memory_used@@Base+0x530>
   12d98:	tst	r9, #1
   12d9c:	bne	12dd8 <_obstack_memory_used@@Base+0x484>
   12da0:	mov	r2, r0
   12da4:	b	12e30 <_obstack_memory_used@@Base+0x4dc>
   12da8:	mov	r0, #1
   12dac:	mov	r8, #0
   12db0:	mov	r7, #5
   12db4:	mov	r2, #1
   12db8:	str	r0, [fp, #-72]	; 0xffffffb8
   12dbc:	movw	r0, #29199	; 0x720f
   12dc0:	movt	r0, #1
   12dc4:	str	r0, [fp, #-88]	; 0xffffffa8
   12dc8:	b	12df8 <_obstack_memory_used@@Base+0x4a4>
   12dcc:	mov	r2, #1
   12dd0:	tst	r9, #1
   12dd4:	beq	12e30 <_obstack_memory_used@@Base+0x4dc>
   12dd8:	mov	r1, #1
   12ddc:	mov	r8, #0
   12de0:	mov	r7, #2
   12de4:	mov	r2, r0
   12de8:	str	r1, [fp, #-72]	; 0xffffffb8
   12dec:	movw	r1, #23403	; 0x5b6b
   12df0:	movt	r1, #1
   12df4:	str	r1, [fp, #-88]	; 0xffffffa8
   12df8:	mov	r3, #1
   12dfc:	b	12e84 <_obstack_memory_used@@Base+0x530>
   12e00:	tst	r9, #1
   12e04:	beq	12e54 <_obstack_memory_used@@Base+0x500>
   12e08:	mov	r0, #1
   12e0c:	mov	r8, #0
   12e10:	mov	r2, #1
   12e14:	mov	r3, #1
   12e18:	mov	r7, #5
   12e1c:	str	r0, [fp, #-72]	; 0xffffffb8
   12e20:	movw	r0, #29199	; 0x720f
   12e24:	movt	r0, #1
   12e28:	str	r0, [fp, #-88]	; 0xffffffa8
   12e2c:	b	12e84 <_obstack_memory_used@@Base+0x530>
   12e30:	cmp	r4, #0
   12e34:	mov	r8, #1
   12e38:	mov	r3, #0
   12e3c:	mov	r7, #2
   12e40:	movne	r0, #39	; 0x27
   12e44:	strbne	r0, [r5]
   12e48:	movw	r0, #23403	; 0x5b6b
   12e4c:	movt	r0, #1
   12e50:	b	12e78 <_obstack_memory_used@@Base+0x524>
   12e54:	cmp	r4, #0
   12e58:	mov	r8, #1
   12e5c:	mov	r2, #1
   12e60:	mov	r7, #5
   12e64:	mov	r3, #0
   12e68:	movne	r0, #34	; 0x22
   12e6c:	strbne	r0, [r5]
   12e70:	movw	r0, #29199	; 0x720f
   12e74:	movt	r0, #1
   12e78:	str	r0, [fp, #-88]	; 0xffffffa8
   12e7c:	mov	r0, #1
   12e80:	str	r0, [fp, #-72]	; 0xffffffb8
   12e84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e88:	eor	r6, r3, #1
   12e8c:	str	r7, [fp, #-68]	; 0xffffffbc
   12e90:	str	r3, [fp, #-76]	; 0xffffffb4
   12e94:	str	r2, [sp, #84]	; 0x54
   12e98:	str	r6, [sp, #92]	; 0x5c
   12e9c:	cmp	r0, #0
   12ea0:	movwne	r0, #1
   12ea4:	and	r1, r0, r3
   12ea8:	and	r1, r2, r1
   12eac:	str	r1, [sp, #48]	; 0x30
   12eb0:	sub	r1, r7, #2
   12eb4:	clz	r1, r1
   12eb8:	lsr	r1, r1, #5
   12ebc:	and	r1, r1, r3
   12ec0:	str	r1, [sp, #64]	; 0x40
   12ec4:	subs	r1, r7, #2
   12ec8:	mov	r7, #0
   12ecc:	movwne	r1, #1
   12ed0:	orr	r6, r1, r6
   12ed4:	and	r1, r1, r2
   12ed8:	and	r0, r0, r1
   12edc:	str	r6, [sp, #68]	; 0x44
   12ee0:	str	r0, [fp, #-60]	; 0xffffffc4
   12ee4:	orr	r0, r1, r3
   12ee8:	ldr	r1, [fp, #16]
   12eec:	eor	r0, r0, #1
   12ef0:	clz	r1, r1
   12ef4:	lsr	r1, r1, #5
   12ef8:	orr	r0, r1, r0
   12efc:	str	r0, [fp, #-64]	; 0xffffffc0
   12f00:	eor	r0, r2, #1
   12f04:	str	r0, [sp, #52]	; 0x34
   12f08:	cmn	lr, #1
   12f0c:	beq	12f1c <_obstack_memory_used@@Base+0x5c8>
   12f10:	cmp	r7, lr
   12f14:	bne	12f28 <_obstack_memory_used@@Base+0x5d4>
   12f18:	b	13a70 <_obstack_memory_used@@Base+0x111c>
   12f1c:	ldrb	r0, [ip, r7]
   12f20:	cmp	r0, #0
   12f24:	beq	13a78 <_obstack_memory_used@@Base+0x1124>
   12f28:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12f2c:	mov	sl, #0
   12f30:	cmp	r0, #0
   12f34:	beq	12f6c <_obstack_memory_used@@Base+0x618>
   12f38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f3c:	add	r5, r7, r0
   12f40:	cmp	r0, #2
   12f44:	bcc	12f60 <_obstack_memory_used@@Base+0x60c>
   12f48:	cmn	lr, #1
   12f4c:	bne	12f60 <_obstack_memory_used@@Base+0x60c>
   12f50:	mov	r0, ip
   12f54:	bl	11044 <strlen@plt>
   12f58:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f5c:	mov	lr, r0
   12f60:	cmp	r5, lr
   12f64:	bls	12f74 <_obstack_memory_used@@Base+0x620>
   12f68:	ldr	r5, [fp, #-84]	; 0xffffffac
   12f6c:	mov	r0, #0
   12f70:	b	12fc0 <_obstack_memory_used@@Base+0x66c>
   12f74:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12f78:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12f7c:	add	r0, ip, r7
   12f80:	mov	r6, r4
   12f84:	mov	r4, lr
   12f88:	bl	11038 <bcmp@plt>
   12f8c:	ldr	r2, [sp, #92]	; 0x5c
   12f90:	cmp	r0, #0
   12f94:	ldr	r5, [fp, #-84]	; 0xffffffac
   12f98:	mov	r1, r0
   12f9c:	movwne	r1, #1
   12fa0:	orr	r1, r1, r2
   12fa4:	tst	r1, #1
   12fa8:	beq	13b00 <_obstack_memory_used@@Base+0x11ac>
   12fac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12fb0:	clz	r0, r0
   12fb4:	mov	lr, r4
   12fb8:	mov	r4, r6
   12fbc:	lsr	r0, r0, #5
   12fc0:	str	r0, [fp, #-52]	; 0xffffffcc
   12fc4:	ldrb	r6, [ip, r7]
   12fc8:	cmp	r6, #126	; 0x7e
   12fcc:	bhi	134fc <_obstack_memory_used@@Base+0xba8>
   12fd0:	add	r3, pc, #16
   12fd4:	mov	r9, #1
   12fd8:	mov	r2, #110	; 0x6e
   12fdc:	mov	r0, #97	; 0x61
   12fe0:	mov	r1, #0
   12fe4:	ldr	pc, [r3, r6, lsl #2]
   12fe8:	andeq	r3, r1, ip, asr r3
   12fec:	strdeq	r3, [r1], -ip
   12ff0:	strdeq	r3, [r1], -ip
   12ff4:	strdeq	r3, [r1], -ip
   12ff8:	strdeq	r3, [r1], -ip
   12ffc:	strdeq	r3, [r1], -ip
   13000:	strdeq	r3, [r1], -ip
   13004:	ldrdeq	r3, [r1], -r8
   13008:	andeq	r3, r1, ip, lsr r3
   1300c:	andeq	r3, r1, r4, lsr r3
   13010:	andeq	r3, r1, r8, asr #6
   13014:	andeq	r3, r1, r4, ror #8
   13018:	andeq	r3, r1, ip, lsr #6
   1301c:	andeq	r3, r1, r4, asr #6
   13020:	strdeq	r3, [r1], -ip
   13024:	strdeq	r3, [r1], -ip
   13028:	strdeq	r3, [r1], -ip
   1302c:	strdeq	r3, [r1], -ip
   13030:	strdeq	r3, [r1], -ip
   13034:	strdeq	r3, [r1], -ip
   13038:	strdeq	r3, [r1], -ip
   1303c:	strdeq	r3, [r1], -ip
   13040:	strdeq	r3, [r1], -ip
   13044:	strdeq	r3, [r1], -ip
   13048:	strdeq	r3, [r1], -ip
   1304c:	strdeq	r3, [r1], -ip
   13050:	strdeq	r3, [r1], -ip
   13054:	strdeq	r3, [r1], -ip
   13058:	strdeq	r3, [r1], -ip
   1305c:	strdeq	r3, [r1], -ip
   13060:	strdeq	r3, [r1], -ip
   13064:	strdeq	r3, [r1], -ip
   13068:	andeq	r3, r1, r0, ror #5
   1306c:	andeq	r3, r1, r4, ror #5
   13070:	andeq	r3, r1, r4, ror #5
   13074:	andeq	r3, r1, ip, asr #5
   13078:	andeq	r3, r1, r4, ror #5
   1307c:	andeq	r3, r1, r4, ror #3
   13080:	andeq	r3, r1, r4, ror #5
   13084:	andeq	r3, r1, ip, ror #8
   13088:	andeq	r3, r1, r4, ror #5
   1308c:	andeq	r3, r1, r4, ror #5
   13090:	andeq	r3, r1, r4, ror #5
   13094:	andeq	r3, r1, r4, ror #3
   13098:	andeq	r3, r1, r4, ror #3
   1309c:	andeq	r3, r1, r4, ror #3
   130a0:	andeq	r3, r1, r4, ror #3
   130a4:	andeq	r3, r1, r4, ror #3
   130a8:	andeq	r3, r1, r4, ror #3
   130ac:	andeq	r3, r1, r4, ror #3
   130b0:	andeq	r3, r1, r4, ror #3
   130b4:	andeq	r3, r1, r4, ror #3
   130b8:	andeq	r3, r1, r4, ror #3
   130bc:	andeq	r3, r1, r4, ror #3
   130c0:	andeq	r3, r1, r4, ror #3
   130c4:	andeq	r3, r1, r4, ror #3
   130c8:	andeq	r3, r1, r4, ror #3
   130cc:	andeq	r3, r1, r4, ror #3
   130d0:	andeq	r3, r1, r4, ror #3
   130d4:	andeq	r3, r1, r4, ror #5
   130d8:	andeq	r3, r1, r4, ror #5
   130dc:	andeq	r3, r1, r4, ror #5
   130e0:	andeq	r3, r1, r4, ror #5
   130e4:	andeq	r3, r1, r4, lsr r4
   130e8:	strdeq	r3, [r1], -ip
   130ec:	andeq	r3, r1, r4, ror #3
   130f0:	andeq	r3, r1, r4, ror #3
   130f4:	andeq	r3, r1, r4, ror #3
   130f8:	andeq	r3, r1, r4, ror #3
   130fc:	andeq	r3, r1, r4, ror #3
   13100:	andeq	r3, r1, r4, ror #3
   13104:	andeq	r3, r1, r4, ror #3
   13108:	andeq	r3, r1, r4, ror #3
   1310c:	andeq	r3, r1, r4, ror #3
   13110:	andeq	r3, r1, r4, ror #3
   13114:	andeq	r3, r1, r4, ror #3
   13118:	andeq	r3, r1, r4, ror #3
   1311c:	andeq	r3, r1, r4, ror #3
   13120:	andeq	r3, r1, r4, ror #3
   13124:	andeq	r3, r1, r4, ror #3
   13128:	andeq	r3, r1, r4, ror #3
   1312c:	andeq	r3, r1, r4, ror #3
   13130:	andeq	r3, r1, r4, ror #3
   13134:	andeq	r3, r1, r4, ror #3
   13138:	andeq	r3, r1, r4, ror #3
   1313c:	andeq	r3, r1, r4, ror #3
   13140:	andeq	r3, r1, r4, ror #3
   13144:	andeq	r3, r1, r4, ror #3
   13148:	andeq	r3, r1, r4, ror #3
   1314c:	andeq	r3, r1, r4, ror #3
   13150:	andeq	r3, r1, r4, ror #3
   13154:	andeq	r3, r1, r4, ror #5
   13158:	andeq	r3, r1, ip, lsl #6
   1315c:	andeq	r3, r1, r4, ror #3
   13160:	andeq	r3, r1, r4, ror #5
   13164:	andeq	r3, r1, r4, ror #3
   13168:	andeq	r3, r1, r4, ror #5
   1316c:	andeq	r3, r1, r4, ror #3
   13170:	andeq	r3, r1, r4, ror #3
   13174:	andeq	r3, r1, r4, ror #3
   13178:	andeq	r3, r1, r4, ror #3
   1317c:	andeq	r3, r1, r4, ror #3
   13180:	andeq	r3, r1, r4, ror #3
   13184:	andeq	r3, r1, r4, ror #3
   13188:	andeq	r3, r1, r4, ror #3
   1318c:	andeq	r3, r1, r4, ror #3
   13190:	andeq	r3, r1, r4, ror #3
   13194:	andeq	r3, r1, r4, ror #3
   13198:	andeq	r3, r1, r4, ror #3
   1319c:	andeq	r3, r1, r4, ror #3
   131a0:	andeq	r3, r1, r4, ror #3
   131a4:	andeq	r3, r1, r4, ror #3
   131a8:	andeq	r3, r1, r4, ror #3
   131ac:	andeq	r3, r1, r4, ror #3
   131b0:	andeq	r3, r1, r4, ror #3
   131b4:	andeq	r3, r1, r4, ror #3
   131b8:	andeq	r3, r1, r4, ror #3
   131bc:	andeq	r3, r1, r4, ror #3
   131c0:	andeq	r3, r1, r4, ror #3
   131c4:	andeq	r3, r1, r4, ror #3
   131c8:	andeq	r3, r1, r4, ror #3
   131cc:	andeq	r3, r1, r4, ror #3
   131d0:	andeq	r3, r1, r4, ror #3
   131d4:	andeq	r3, r1, r0, lsr #5
   131d8:	andeq	r3, r1, r4, ror #5
   131dc:	andeq	r3, r1, r0, lsr #5
   131e0:	andeq	r3, r1, ip, asr #5
   131e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131e8:	tst	r0, #1
   131ec:	bne	13218 <_obstack_memory_used@@Base+0x8c4>
   131f0:	ldr	r1, [fp, #16]
   131f4:	ubfx	r0, r6, #5, #3
   131f8:	mov	r2, #1
   131fc:	ldr	r0, [r1, r0, lsl #2]
   13200:	and	r1, r6, #31
   13204:	tst	r0, r2, lsl r1
   13208:	beq	13218 <_obstack_memory_used@@Base+0x8c4>
   1320c:	mov	r0, r6
   13210:	mov	r1, r9
   13214:	b	1322c <_obstack_memory_used@@Base+0x8d8>
   13218:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1321c:	mov	r1, r9
   13220:	cmp	r0, #0
   13224:	mov	r0, r6
   13228:	beq	1356c <_obstack_memory_used@@Base+0xc18>
   1322c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13230:	tst	r2, #1
   13234:	bne	13b3c <_obstack_memory_used@@Base+0x11e8>
   13238:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1323c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13240:	subs	r2, r2, #2
   13244:	movwne	r2, #1
   13248:	orr	r2, r2, r3
   1324c:	tst	r2, #1
   13250:	bne	1328c <_obstack_memory_used@@Base+0x938>
   13254:	cmp	r8, r4
   13258:	movcc	r2, #39	; 0x27
   1325c:	strbcc	r2, [r5, r8]
   13260:	add	r2, r8, #1
   13264:	cmp	r2, r4
   13268:	movcc	r3, #36	; 0x24
   1326c:	strbcc	r3, [r5, r2]
   13270:	add	r2, r8, #2
   13274:	add	r8, r8, #3
   13278:	cmp	r2, r4
   1327c:	movcc	r3, #39	; 0x27
   13280:	strbcc	r3, [r5, r2]
   13284:	mov	r2, #1
   13288:	str	r2, [fp, #-56]	; 0xffffffc8
   1328c:	cmp	r8, r4
   13290:	movcc	r2, #92	; 0x5c
   13294:	strbcc	r2, [r5, r8]
   13298:	add	r8, r8, #1
   1329c:	b	135b0 <_obstack_memory_used@@Base+0xc5c>
   132a0:	cmp	lr, #1
   132a4:	beq	132cc <_obstack_memory_used@@Base+0x978>
   132a8:	mov	r9, #0
   132ac:	cmn	lr, #1
   132b0:	bne	132d8 <_obstack_memory_used@@Base+0x984>
   132b4:	ldrb	r0, [ip, #1]
   132b8:	cmp	r0, #0
   132bc:	beq	132cc <_obstack_memory_used@@Base+0x978>
   132c0:	mvn	lr, #0
   132c4:	mov	sl, #0
   132c8:	b	131e4 <_obstack_memory_used@@Base+0x890>
   132cc:	mov	r9, #0
   132d0:	cmp	r7, #0
   132d4:	beq	132e0 <_obstack_memory_used@@Base+0x98c>
   132d8:	mov	sl, #0
   132dc:	b	131e4 <_obstack_memory_used@@Base+0x890>
   132e0:	mov	r1, #1
   132e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   132e8:	cmp	r0, #2
   132ec:	bne	13304 <_obstack_memory_used@@Base+0x9b0>
   132f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132f4:	mov	r9, r1
   132f8:	tst	r0, #1
   132fc:	beq	131e4 <_obstack_memory_used@@Base+0x890>
   13300:	b	13b3c <_obstack_memory_used@@Base+0x11e8>
   13304:	mov	r9, r1
   13308:	b	131e4 <_obstack_memory_used@@Base+0x890>
   1330c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13310:	cmp	r0, #2
   13314:	bne	13550 <_obstack_memory_used@@Base+0xbfc>
   13318:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1331c:	tst	r0, #1
   13320:	bne	13b3c <_obstack_memory_used@@Base+0x11e8>
   13324:	mov	sl, #0
   13328:	b	13564 <_obstack_memory_used@@Base+0xc10>
   1332c:	mov	r0, #102	; 0x66
   13330:	b	135d8 <_obstack_memory_used@@Base+0xc84>
   13334:	mov	r2, #116	; 0x74
   13338:	b	13348 <_obstack_memory_used@@Base+0x9f4>
   1333c:	mov	r0, #98	; 0x62
   13340:	b	135d8 <_obstack_memory_used@@Base+0xc84>
   13344:	mov	r2, #114	; 0x72
   13348:	ldr	r0, [sp, #68]	; 0x44
   1334c:	tst	r0, #1
   13350:	mov	r0, r2
   13354:	bne	135d8 <_obstack_memory_used@@Base+0xc84>
   13358:	b	13b3c <_obstack_memory_used@@Base+0x11e8>
   1335c:	ldr	r0, [sp, #84]	; 0x54
   13360:	tst	r0, #1
   13364:	beq	135f4 <_obstack_memory_used@@Base+0xca0>
   13368:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1336c:	tst	r0, #1
   13370:	bne	13c28 <_obstack_memory_used@@Base+0x12d4>
   13374:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13378:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1337c:	subs	r0, r0, #2
   13380:	movwne	r0, #1
   13384:	orr	r0, r0, r1
   13388:	tst	r0, #1
   1338c:	bne	133c8 <_obstack_memory_used@@Base+0xa74>
   13390:	cmp	r8, r4
   13394:	movcc	r0, #39	; 0x27
   13398:	strbcc	r0, [r5, r8]
   1339c:	add	r0, r8, #1
   133a0:	cmp	r0, r4
   133a4:	movcc	r1, #36	; 0x24
   133a8:	strbcc	r1, [r5, r0]
   133ac:	add	r0, r8, #2
   133b0:	add	r8, r8, #3
   133b4:	cmp	r0, r4
   133b8:	movcc	r1, #39	; 0x27
   133bc:	strbcc	r1, [r5, r0]
   133c0:	mov	r0, #1
   133c4:	str	r0, [fp, #-56]	; 0xffffffc8
   133c8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   133cc:	cmp	r8, r4
   133d0:	mov	r9, #0
   133d4:	mov	sl, #1
   133d8:	mov	r6, #48	; 0x30
   133dc:	movcc	r0, #92	; 0x5c
   133e0:	strbcc	r0, [r5, r8]
   133e4:	add	r0, r8, #1
   133e8:	cmp	r1, #2
   133ec:	beq	137bc <_obstack_memory_used@@Base+0xe68>
   133f0:	add	r1, r7, #1
   133f4:	cmp	r1, lr
   133f8:	bcs	137bc <_obstack_memory_used@@Base+0xe68>
   133fc:	ldrb	r1, [ip, r1]
   13400:	sub	r1, r1, #48	; 0x30
   13404:	uxtb	r1, r1
   13408:	cmp	r1, #9
   1340c:	bhi	137bc <_obstack_memory_used@@Base+0xe68>
   13410:	cmp	r0, r4
   13414:	movcc	r1, #48	; 0x30
   13418:	strbcc	r1, [r5, r0]
   1341c:	add	r0, r8, #2
   13420:	add	r8, r8, #3
   13424:	cmp	r0, r4
   13428:	movcc	r1, #48	; 0x30
   1342c:	strbcc	r1, [r5, r0]
   13430:	b	131e4 <_obstack_memory_used@@Base+0x890>
   13434:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13438:	mov	sl, #0
   1343c:	mov	r6, #63	; 0x3f
   13440:	cmp	r0, #5
   13444:	beq	137c4 <_obstack_memory_used@@Base+0xe70>
   13448:	cmp	r0, #2
   1344c:	bne	1386c <_obstack_memory_used@@Base+0xf18>
   13450:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13454:	mov	r9, #0
   13458:	tst	r0, #1
   1345c:	beq	131e4 <_obstack_memory_used@@Base+0x890>
   13460:	b	13b3c <_obstack_memory_used@@Base+0x11e8>
   13464:	mov	r0, #118	; 0x76
   13468:	b	135d8 <_obstack_memory_used@@Base+0xc84>
   1346c:	mov	r0, #1
   13470:	mov	r6, #39	; 0x27
   13474:	str	r0, [sp, #60]	; 0x3c
   13478:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1347c:	cmp	r0, #2
   13480:	bne	13610 <_obstack_memory_used@@Base+0xcbc>
   13484:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13488:	tst	r0, #1
   1348c:	bne	13b3c <_obstack_memory_used@@Base+0x11e8>
   13490:	ldr	r2, [sp, #56]	; 0x38
   13494:	clz	r1, r4
   13498:	mov	sl, #0
   1349c:	mov	r9, #1
   134a0:	lsr	r1, r1, #5
   134a4:	cmp	r2, #0
   134a8:	mov	r0, r2
   134ac:	movwne	r0, #1
   134b0:	orrs	r0, r0, r1
   134b4:	moveq	r2, r4
   134b8:	moveq	r4, r0
   134bc:	cmp	r8, r4
   134c0:	str	r2, [sp, #56]	; 0x38
   134c4:	movcc	r0, #39	; 0x27
   134c8:	strbcc	r0, [r5, r8]
   134cc:	add	r0, r8, #1
   134d0:	cmp	r0, r4
   134d4:	movcc	r1, #92	; 0x5c
   134d8:	strbcc	r1, [r5, r0]
   134dc:	add	r0, r8, #2
   134e0:	add	r8, r8, #3
   134e4:	cmp	r0, r4
   134e8:	movcc	r1, #39	; 0x27
   134ec:	strbcc	r1, [r5, r0]
   134f0:	mov	r0, #0
   134f4:	str	r0, [fp, #-56]	; 0xffffffc8
   134f8:	b	131e4 <_obstack_memory_used@@Base+0x890>
   134fc:	ldr	r0, [sp, #40]	; 0x28
   13500:	str	r4, [sp, #88]	; 0x58
   13504:	cmp	r0, #1
   13508:	bne	13618 <_obstack_memory_used@@Base+0xcc4>
   1350c:	str	lr, [sp, #28]
   13510:	bl	11020 <__ctype_b_loc@plt>
   13514:	ldr	r0, [r0]
   13518:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1351c:	mov	r2, #1
   13520:	add	r0, r0, r6, lsl #1
   13524:	ldrb	r0, [r0, #1]
   13528:	ubfx	r9, r0, #6, #1
   1352c:	ldr	r0, [sp, #52]	; 0x34
   13530:	cmp	r2, #1
   13534:	orr	r0, r9, r0
   13538:	bhi	13874 <_obstack_memory_used@@Base+0xf20>
   1353c:	tst	r0, #1
   13540:	beq	13874 <_obstack_memory_used@@Base+0xf20>
   13544:	ldr	lr, [sp, #28]
   13548:	ldr	r4, [sp, #88]	; 0x58
   1354c:	b	131e4 <_obstack_memory_used@@Base+0x890>
   13550:	ldr	r1, [sp, #48]	; 0x30
   13554:	mov	sl, #0
   13558:	mov	r0, #92	; 0x5c
   1355c:	cmp	r1, #0
   13560:	beq	135d8 <_obstack_memory_used@@Base+0xc84>
   13564:	mov	r6, #92	; 0x5c
   13568:	mov	r9, #0
   1356c:	cmp	sl, #0
   13570:	bne	135a8 <_obstack_memory_used@@Base+0xc54>
   13574:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13578:	tst	r0, #1
   1357c:	beq	135a8 <_obstack_memory_used@@Base+0xc54>
   13580:	cmp	r8, r4
   13584:	movcc	r0, #39	; 0x27
   13588:	strbcc	r0, [r5, r8]
   1358c:	add	r0, r8, #1
   13590:	add	r8, r8, #2
   13594:	cmp	r0, r4
   13598:	movcc	r1, #39	; 0x27
   1359c:	strbcc	r1, [r5, r0]
   135a0:	mov	r0, #0
   135a4:	str	r0, [fp, #-56]	; 0xffffffc8
   135a8:	mov	r1, r9
   135ac:	mov	r0, r6
   135b0:	cmp	r8, r4
   135b4:	strbcc	r0, [r5, r8]
   135b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   135bc:	add	r8, r8, #1
   135c0:	and	r0, r0, r1
   135c4:	str	r0, [fp, #-48]	; 0xffffffd0
   135c8:	add	r7, r7, #1
   135cc:	cmn	lr, #1
   135d0:	bne	12f10 <_obstack_memory_used@@Base+0x5bc>
   135d4:	b	12f1c <_obstack_memory_used@@Base+0x5c8>
   135d8:	ldr	r1, [sp, #84]	; 0x54
   135dc:	mov	sl, #0
   135e0:	mov	r9, #0
   135e4:	tst	r1, #1
   135e8:	mov	r1, #0
   135ec:	beq	131e4 <_obstack_memory_used@@Base+0x890>
   135f0:	b	1322c <_obstack_memory_used@@Base+0x8d8>
   135f4:	ldr	r0, [sp, #36]	; 0x24
   135f8:	mov	r6, #0
   135fc:	mov	sl, #0
   13600:	mov	r9, #0
   13604:	cmp	r0, #0
   13608:	beq	131e4 <_obstack_memory_used@@Base+0x890>
   1360c:	b	135c8 <_obstack_memory_used@@Base+0xc74>
   13610:	mov	r9, #1
   13614:	b	131e4 <_obstack_memory_used@@Base+0x890>
   13618:	mov	r0, #0
   1361c:	cmn	lr, #1
   13620:	sub	r4, fp, #40	; 0x28
   13624:	str	r0, [fp, #-36]	; 0xffffffdc
   13628:	str	r0, [fp, #-40]	; 0xffffffd8
   1362c:	bne	13640 <_obstack_memory_used@@Base+0xcec>
   13630:	mov	r0, ip
   13634:	bl	11044 <strlen@plt>
   13638:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1363c:	mov	lr, r0
   13640:	ldr	r0, [sp, #72]	; 0x48
   13644:	mov	r9, #1
   13648:	mov	r2, #0
   1364c:	str	lr, [sp, #28]
   13650:	add	r0, r0, r7
   13654:	str	r0, [sp, #20]
   13658:	b	1369c <_obstack_memory_used@@Base+0xd48>
   1365c:	ldr	r5, [sp, #44]	; 0x2c
   13660:	add	r5, r0, r5
   13664:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13668:	bl	10f54 <iswprint@plt>
   1366c:	cmp	r0, #0
   13670:	sub	r4, fp, #40	; 0x28
   13674:	movwne	r0, #1
   13678:	and	r9, r9, r0
   1367c:	mov	r0, r4
   13680:	bl	10f0c <mbsinit@plt>
   13684:	mov	r2, r5
   13688:	ldr	lr, [sp, #28]
   1368c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13690:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13694:	cmp	r0, #0
   13698:	bne	1352c <_obstack_memory_used@@Base+0xbd8>
   1369c:	add	r0, r2, r7
   136a0:	str	r2, [sp, #44]	; 0x2c
   136a4:	mov	r3, r4
   136a8:	add	r1, ip, r0
   136ac:	str	r0, [sp, #24]
   136b0:	sub	r2, lr, r0
   136b4:	sub	r0, fp, #44	; 0x2c
   136b8:	bl	15538 <_obstack_memory_used@@Base+0x2be4>
   136bc:	cmp	r0, #0
   136c0:	beq	13a64 <_obstack_memory_used@@Base+0x1110>
   136c4:	cmn	r0, #1
   136c8:	beq	13a20 <_obstack_memory_used@@Base+0x10cc>
   136cc:	ldr	lr, [sp, #28]
   136d0:	cmn	r0, #2
   136d4:	beq	13a28 <_obstack_memory_used@@Base+0x10d4>
   136d8:	ldr	r2, [sp, #64]	; 0x40
   136dc:	ldr	r4, [sp, #88]	; 0x58
   136e0:	ldr	ip, [sp, #84]	; 0x54
   136e4:	cmp	r0, #2
   136e8:	mov	r1, #0
   136ec:	movwcc	r1, #1
   136f0:	eor	r2, r2, #1
   136f4:	orrs	r1, r2, r1
   136f8:	bne	1365c <_obstack_memory_used@@Base+0xd08>
   136fc:	ldr	r1, [sp, #44]	; 0x2c
   13700:	ldr	r2, [sp, #20]
   13704:	add	r1, r2, r1
   13708:	sub	r2, r0, #1
   1370c:	b	1371c <_obstack_memory_used@@Base+0xdc8>
   13710:	add	r1, r1, #1
   13714:	subs	r2, r2, #1
   13718:	beq	1365c <_obstack_memory_used@@Base+0xd08>
   1371c:	ldrb	r3, [r1]
   13720:	sub	r3, r3, #91	; 0x5b
   13724:	cmp	r3, #33	; 0x21
   13728:	bhi	13710 <_obstack_memory_used@@Base+0xdbc>
   1372c:	add	r5, pc, #0
   13730:	ldr	pc, [r5, r3, lsl #2]
   13734:	andeq	r3, r1, r8, lsl fp
   13738:	andeq	r3, r1, r8, lsl fp
   1373c:	andeq	r3, r1, r0, lsl r7
   13740:	andeq	r3, r1, r8, lsl fp
   13744:	andeq	r3, r1, r0, lsl r7
   13748:	andeq	r3, r1, r8, lsl fp
   1374c:	andeq	r3, r1, r0, lsl r7
   13750:	andeq	r3, r1, r0, lsl r7
   13754:	andeq	r3, r1, r0, lsl r7
   13758:	andeq	r3, r1, r0, lsl r7
   1375c:	andeq	r3, r1, r0, lsl r7
   13760:	andeq	r3, r1, r0, lsl r7
   13764:	andeq	r3, r1, r0, lsl r7
   13768:	andeq	r3, r1, r0, lsl r7
   1376c:	andeq	r3, r1, r0, lsl r7
   13770:	andeq	r3, r1, r0, lsl r7
   13774:	andeq	r3, r1, r0, lsl r7
   13778:	andeq	r3, r1, r0, lsl r7
   1377c:	andeq	r3, r1, r0, lsl r7
   13780:	andeq	r3, r1, r0, lsl r7
   13784:	andeq	r3, r1, r0, lsl r7
   13788:	andeq	r3, r1, r0, lsl r7
   1378c:	andeq	r3, r1, r0, lsl r7
   13790:	andeq	r3, r1, r0, lsl r7
   13794:	andeq	r3, r1, r0, lsl r7
   13798:	andeq	r3, r1, r0, lsl r7
   1379c:	andeq	r3, r1, r0, lsl r7
   137a0:	andeq	r3, r1, r0, lsl r7
   137a4:	andeq	r3, r1, r0, lsl r7
   137a8:	andeq	r3, r1, r0, lsl r7
   137ac:	andeq	r3, r1, r0, lsl r7
   137b0:	andeq	r3, r1, r0, lsl r7
   137b4:	andeq	r3, r1, r0, lsl r7
   137b8:	andeq	r3, r1, r8, lsl fp
   137bc:	mov	r8, r0
   137c0:	b	131e4 <_obstack_memory_used@@Base+0x890>
   137c4:	ldr	r0, [sp, #32]
   137c8:	cmp	r0, #0
   137cc:	beq	1386c <_obstack_memory_used@@Base+0xf18>
   137d0:	add	r0, r7, #2
   137d4:	cmp	r0, lr
   137d8:	bcs	1386c <_obstack_memory_used@@Base+0xf18>
   137dc:	add	r1, r7, ip
   137e0:	ldrb	r1, [r1, #1]
   137e4:	cmp	r1, #63	; 0x3f
   137e8:	bne	1386c <_obstack_memory_used@@Base+0xf18>
   137ec:	ldrb	r9, [ip, r0]
   137f0:	sub	r2, r9, #33	; 0x21
   137f4:	cmp	r2, #29
   137f8:	bhi	1386c <_obstack_memory_used@@Base+0xf18>
   137fc:	movw	r1, #20929	; 0x51c1
   13800:	mov	r3, #1
   13804:	movt	r1, #14336	; 0x3800
   13808:	tst	r1, r3, lsl r2
   1380c:	beq	1386c <_obstack_memory_used@@Base+0xf18>
   13810:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13814:	tst	r1, #1
   13818:	bne	13b3c <_obstack_memory_used@@Base+0x11e8>
   1381c:	cmp	r8, r4
   13820:	add	r2, r8, #1
   13824:	mov	r6, r9
   13828:	mov	r7, r0
   1382c:	mov	r9, #0
   13830:	movcc	r1, #63	; 0x3f
   13834:	strbcc	r1, [r5, r8]
   13838:	cmp	r2, r4
   1383c:	movcc	r1, #34	; 0x22
   13840:	strbcc	r1, [r5, r2]
   13844:	add	r2, r8, #2
   13848:	cmp	r2, r4
   1384c:	movcc	r1, #34	; 0x22
   13850:	strbcc	r1, [r5, r2]
   13854:	add	r2, r8, #3
   13858:	add	r8, r8, #4
   1385c:	cmp	r2, r4
   13860:	movcc	r1, #63	; 0x3f
   13864:	strbcc	r1, [r5, r2]
   13868:	b	131e4 <_obstack_memory_used@@Base+0x890>
   1386c:	mov	r9, #0
   13870:	b	131e4 <_obstack_memory_used@@Base+0x890>
   13874:	ldr	lr, [sp, #28]
   13878:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1387c:	add	r1, r2, r7
   13880:	mov	r2, #0
   13884:	str	r1, [sp, #44]	; 0x2c
   13888:	tst	r0, #1
   1388c:	bne	139a8 <_obstack_memory_used@@Base+0x1054>
   13890:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13894:	tst	r1, #1
   13898:	bne	13b38 <_obstack_memory_used@@Base+0x11e4>
   1389c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   138a0:	subs	r2, r1, #2
   138a4:	movwne	r2, #1
   138a8:	orr	r2, r2, r4
   138ac:	tst	r2, #1
   138b0:	bne	138f4 <_obstack_memory_used@@Base+0xfa0>
   138b4:	ldr	r1, [sp, #88]	; 0x58
   138b8:	add	r2, r8, #1
   138bc:	mov	r4, #1
   138c0:	cmp	r8, r1
   138c4:	movcc	r1, #39	; 0x27
   138c8:	strbcc	r1, [r5, r8]
   138cc:	ldr	r1, [sp, #88]	; 0x58
   138d0:	cmp	r2, r1
   138d4:	movcc	r1, #36	; 0x24
   138d8:	strbcc	r1, [r5, r2]
   138dc:	ldr	r1, [sp, #88]	; 0x58
   138e0:	add	r2, r8, #2
   138e4:	add	r8, r8, #3
   138e8:	cmp	r2, r1
   138ec:	movcc	r1, #39	; 0x27
   138f0:	strbcc	r1, [r5, r2]
   138f4:	ldr	r1, [sp, #88]	; 0x58
   138f8:	add	r2, r8, #1
   138fc:	cmp	r8, r1
   13900:	movcc	r1, #92	; 0x5c
   13904:	strbcc	r1, [r5, r8]
   13908:	ldr	r1, [sp, #88]	; 0x58
   1390c:	cmp	r2, r1
   13910:	bcs	13924 <_obstack_memory_used@@Base+0xfd0>
   13914:	uxtb	r3, r6
   13918:	mov	r1, #48	; 0x30
   1391c:	orr	r3, r1, r3, lsr #6
   13920:	strb	r3, [r5, r2]
   13924:	ldr	r1, [sp, #88]	; 0x58
   13928:	add	r2, r8, #2
   1392c:	add	r8, r8, #3
   13930:	cmp	r2, r1
   13934:	lsrcc	r3, r6, #3
   13938:	movcc	r1, #6
   1393c:	bficc	r3, r1, #3, #29
   13940:	mov	r1, #6
   13944:	bfi	r6, r1, #3, #29
   13948:	strbcc	r3, [r5, r2]
   1394c:	mov	r2, #1
   13950:	b	139d0 <_obstack_memory_used@@Base+0x107c>
   13954:	ldr	r1, [sp, #88]	; 0x58
   13958:	ldr	r5, [fp, #-84]	; 0xffffffac
   1395c:	ldr	r4, [sp, #88]	; 0x58
   13960:	cmp	r8, r1
   13964:	movcc	r1, #39	; 0x27
   13968:	strbcc	r1, [r5, r8]
   1396c:	add	r1, r8, #1
   13970:	add	r8, r8, #2
   13974:	cmp	r1, r4
   13978:	movcc	r4, #39	; 0x27
   1397c:	strbcc	r4, [r5, r1]
   13980:	mov	r4, #0
   13984:	ldr	r1, [sp, #88]	; 0x58
   13988:	cmp	r8, r1
   1398c:	ldr	r1, [sp, #72]	; 0x48
   13990:	strbcc	r6, [r5, r8]
   13994:	add	r8, r8, #1
   13998:	ldrb	r6, [r1, r7]
   1399c:	mov	r7, r3
   139a0:	tst	r0, #1
   139a4:	beq	13890 <_obstack_memory_used@@Base+0xf3c>
   139a8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   139ac:	tst	r1, #1
   139b0:	beq	139c8 <_obstack_memory_used@@Base+0x1074>
   139b4:	ldr	r1, [sp, #88]	; 0x58
   139b8:	cmp	r8, r1
   139bc:	movcc	r1, #92	; 0x5c
   139c0:	strbcc	r1, [r5, r8]
   139c4:	add	r8, r8, #1
   139c8:	mov	r1, #0
   139cc:	str	r1, [fp, #-52]	; 0xffffffcc
   139d0:	ldr	r1, [sp, #44]	; 0x2c
   139d4:	add	r3, r7, #1
   139d8:	and	sl, r2, #1
   139dc:	cmp	r1, r3
   139e0:	bls	13a04 <_obstack_memory_used@@Base+0x10b0>
   139e4:	cmp	sl, #0
   139e8:	mvn	r5, r4
   139ec:	movwne	sl, #1
   139f0:	orr	r5, r5, sl
   139f4:	tst	r5, #1
   139f8:	beq	13954 <_obstack_memory_used@@Base+0x1000>
   139fc:	ldr	r5, [fp, #-84]	; 0xffffffac
   13a00:	b	13984 <_obstack_memory_used@@Base+0x1030>
   13a04:	str	r4, [fp, #-56]	; 0xffffffc8
   13a08:	ldr	r4, [sp, #88]	; 0x58
   13a0c:	cmp	sl, #0
   13a10:	movwne	sl, #1
   13a14:	cmp	sl, #0
   13a18:	beq	13574 <_obstack_memory_used@@Base+0xc20>
   13a1c:	b	135a8 <_obstack_memory_used@@Base+0xc54>
   13a20:	mov	r9, #0
   13a24:	b	13a64 <_obstack_memory_used@@Base+0x1110>
   13a28:	ldr	r0, [sp, #24]
   13a2c:	mov	r9, #0
   13a30:	cmp	lr, r0
   13a34:	bls	13a64 <_obstack_memory_used@@Base+0x1110>
   13a38:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a3c:	ldr	r2, [sp, #44]	; 0x2c
   13a40:	add	r0, ip, r7
   13a44:	ldrb	r1, [r0, r2]
   13a48:	cmp	r1, #0
   13a4c:	beq	1352c <_obstack_memory_used@@Base+0xbd8>
   13a50:	add	r2, r2, #1
   13a54:	add	r1, r7, r2
   13a58:	cmp	r1, lr
   13a5c:	bcc	13a44 <_obstack_memory_used@@Base+0x10f0>
   13a60:	b	1352c <_obstack_memory_used@@Base+0xbd8>
   13a64:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a68:	ldr	r2, [sp, #44]	; 0x2c
   13a6c:	b	1352c <_obstack_memory_used@@Base+0xbd8>
   13a70:	mov	lr, r7
   13a74:	b	13a7c <_obstack_memory_used@@Base+0x1128>
   13a78:	mvn	lr, #0
   13a7c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13a80:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13a84:	eor	r0, r1, #2
   13a88:	orr	r0, r0, r8
   13a8c:	clz	r0, r0
   13a90:	lsr	r0, r0, #5
   13a94:	tst	r2, r0
   13a98:	bne	13b3c <_obstack_memory_used@@Base+0x11e8>
   13a9c:	subs	r0, r1, #2
   13aa0:	movwne	r0, #1
   13aa4:	orr	r0, r2, r0
   13aa8:	tst	r0, #1
   13aac:	ldreq	r0, [sp, #60]	; 0x3c
   13ab0:	eoreq	r0, r0, #1
   13ab4:	tsteq	r0, #1
   13ab8:	bne	13bd0 <_obstack_memory_used@@Base+0x127c>
   13abc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ac0:	mov	sl, lr
   13ac4:	tst	r0, #1
   13ac8:	bne	13b9c <_obstack_memory_used@@Base+0x1248>
   13acc:	ldr	r6, [sp, #56]	; 0x38
   13ad0:	mov	r9, #0
   13ad4:	cmp	r6, #0
   13ad8:	beq	13bc8 <_obstack_memory_used@@Base+0x1274>
   13adc:	ldr	r0, [sp, #84]	; 0x54
   13ae0:	mov	r1, #0
   13ae4:	mov	r7, #2
   13ae8:	cmp	r4, #0
   13aec:	str	r1, [fp, #-48]	; 0xffffffd0
   13af0:	mov	r1, #0
   13af4:	str	r1, [fp, #-76]	; 0xffffffb4
   13af8:	beq	12c98 <_obstack_memory_used@@Base+0x344>
   13afc:	b	13bd0 <_obstack_memory_used@@Base+0x127c>
   13b00:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13b04:	ldr	r1, [fp, #12]
   13b08:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13b0c:	mov	lr, r4
   13b10:	mov	r4, r6
   13b14:	b	13b5c <_obstack_memory_used@@Base+0x1208>
   13b18:	tst	ip, #1
   13b1c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13b20:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13b24:	ldr	r1, [fp, #12]
   13b28:	mov	r0, #2
   13b2c:	movwne	r0, #4
   13b30:	mov	r2, r0
   13b34:	b	13b5c <_obstack_memory_used@@Base+0x1208>
   13b38:	ldr	r4, [sp, #88]	; 0x58
   13b3c:	ldr	r1, [sp, #84]	; 0x54
   13b40:	mov	r0, #2
   13b44:	tst	r1, #1
   13b48:	movwne	r0, #4
   13b4c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13b50:	ldr	r1, [fp, #12]
   13b54:	cmp	r2, #2
   13b58:	moveq	r2, r0
   13b5c:	mov	r0, #0
   13b60:	bic	r1, r1, #2
   13b64:	str	r2, [sp]
   13b68:	mov	r2, ip
   13b6c:	mov	r3, lr
   13b70:	str	r0, [sp, #8]
   13b74:	ldr	r0, [sp, #76]	; 0x4c
   13b78:	str	r1, [sp, #4]
   13b7c:	mov	r1, r4
   13b80:	str	r0, [sp, #12]
   13b84:	ldr	r0, [sp, #80]	; 0x50
   13b88:	str	r0, [sp, #16]
   13b8c:	mov	r0, r5
   13b90:	bl	12c08 <_obstack_memory_used@@Base+0x2b4>
   13b94:	mov	r8, r0
   13b98:	b	13c1c <_obstack_memory_used@@Base+0x12c8>
   13b9c:	mov	r0, #5
   13ba0:	ldr	r1, [sp, #56]	; 0x38
   13ba4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13ba8:	mov	r3, sl
   13bac:	str	r0, [sp]
   13bb0:	ldr	r0, [fp, #12]
   13bb4:	str	r0, [sp, #4]
   13bb8:	ldr	r0, [fp, #16]
   13bbc:	str	r0, [sp, #8]
   13bc0:	ldr	r0, [sp, #76]	; 0x4c
   13bc4:	b	13b80 <_obstack_memory_used@@Base+0x122c>
   13bc8:	mov	r0, #0
   13bcc:	str	r0, [fp, #-76]	; 0xffffffb4
   13bd0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13bd4:	cmp	r1, #0
   13bd8:	beq	13c10 <_obstack_memory_used@@Base+0x12bc>
   13bdc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13be0:	tst	r0, #1
   13be4:	bne	13c10 <_obstack_memory_used@@Base+0x12bc>
   13be8:	ldrb	r0, [r1]
   13bec:	cmp	r0, #0
   13bf0:	beq	13c10 <_obstack_memory_used@@Base+0x12bc>
   13bf4:	add	r1, r1, #1
   13bf8:	cmp	r8, r4
   13bfc:	strbcc	r0, [r5, r8]
   13c00:	add	r8, r8, #1
   13c04:	ldrb	r0, [r1], #1
   13c08:	cmp	r0, #0
   13c0c:	bne	13bf8 <_obstack_memory_used@@Base+0x12a4>
   13c10:	cmp	r8, r4
   13c14:	movcc	r0, #0
   13c18:	strbcc	r0, [r5, r8]
   13c1c:	mov	r0, r8
   13c20:	sub	sp, fp, #28
   13c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c28:	mov	r0, #4
   13c2c:	b	13b4c <_obstack_memory_used@@Base+0x11f8>
   13c30:	bl	110ec <abort@plt>
   13c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c38:	add	fp, sp, #28
   13c3c:	sub	sp, sp, #28
   13c40:	movw	r5, #33168	; 0x8190
   13c44:	cmp	r2, #0
   13c48:	mov	r4, r1
   13c4c:	mov	r7, r0
   13c50:	str	r0, [sp, #20]
   13c54:	movt	r5, #2
   13c58:	movne	r5, r2
   13c5c:	bl	11050 <__errno_location@plt>
   13c60:	mov	sl, r0
   13c64:	ldr	r2, [r5, #40]	; 0x28
   13c68:	ldr	r3, [r5, #44]	; 0x2c
   13c6c:	ldm	r5, {r0, r1}
   13c70:	orr	r8, r1, #1
   13c74:	add	r9, r5, #8
   13c78:	mov	r1, #0
   13c7c:	ldr	r6, [sl]
   13c80:	stm	sp, {r0, r8, r9}
   13c84:	mov	r0, #0
   13c88:	str	r2, [sp, #12]
   13c8c:	str	r3, [sp, #16]
   13c90:	mov	r2, r7
   13c94:	mov	r3, r4
   13c98:	str	r6, [sp, #24]
   13c9c:	mov	r6, r4
   13ca0:	bl	12c08 <_obstack_memory_used@@Base+0x2b4>
   13ca4:	add	r7, r0, #1
   13ca8:	mov	r0, r7
   13cac:	bl	14e54 <_obstack_memory_used@@Base+0x2500>
   13cb0:	mov	r4, r0
   13cb4:	ldr	r0, [r5]
   13cb8:	ldr	r2, [r5, #44]	; 0x2c
   13cbc:	ldr	r1, [r5, #40]	; 0x28
   13cc0:	mov	r3, r6
   13cc4:	stm	sp, {r0, r8, r9}
   13cc8:	str	r2, [sp, #16]
   13ccc:	ldr	r2, [sp, #20]
   13cd0:	str	r1, [sp, #12]
   13cd4:	mov	r0, r4
   13cd8:	mov	r1, r7
   13cdc:	bl	12c08 <_obstack_memory_used@@Base+0x2b4>
   13ce0:	ldr	r0, [sp, #24]
   13ce4:	str	r0, [sl]
   13ce8:	mov	r0, r4
   13cec:	sub	sp, fp, #28
   13cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cf8:	add	fp, sp, #28
   13cfc:	sub	sp, sp, #36	; 0x24
   13d00:	movw	r8, #33168	; 0x8190
   13d04:	cmp	r3, #0
   13d08:	mov	r4, r2
   13d0c:	str	r2, [sp, #24]
   13d10:	mov	r5, r1
   13d14:	mov	r6, r0
   13d18:	str	r0, [sp, #20]
   13d1c:	movt	r8, #2
   13d20:	movne	r8, r3
   13d24:	bl	11050 <__errno_location@plt>
   13d28:	str	r0, [sp, #28]
   13d2c:	ldr	r1, [r8, #40]	; 0x28
   13d30:	ldr	r2, [r8, #44]	; 0x2c
   13d34:	ldr	r7, [r0]
   13d38:	cmp	r4, #0
   13d3c:	add	sl, r8, #8
   13d40:	mov	r0, #0
   13d44:	ldm	r8, {r3, r9}
   13d48:	orreq	r9, r9, #1
   13d4c:	stm	sp, {r3, r9, sl}
   13d50:	str	r1, [sp, #12]
   13d54:	str	r2, [sp, #16]
   13d58:	mov	r1, #0
   13d5c:	mov	r2, r6
   13d60:	mov	r3, r5
   13d64:	str	r7, [sp, #32]
   13d68:	mov	r7, r5
   13d6c:	bl	12c08 <_obstack_memory_used@@Base+0x2b4>
   13d70:	add	r4, r0, #1
   13d74:	mov	r5, r0
   13d78:	mov	r0, r4
   13d7c:	bl	14e54 <_obstack_memory_used@@Base+0x2500>
   13d80:	mov	r6, r0
   13d84:	ldr	r0, [r8]
   13d88:	ldr	r2, [r8, #44]	; 0x2c
   13d8c:	ldr	r1, [r8, #40]	; 0x28
   13d90:	mov	r3, r7
   13d94:	stm	sp, {r0, r9, sl}
   13d98:	str	r2, [sp, #16]
   13d9c:	ldr	r2, [sp, #20]
   13da0:	str	r1, [sp, #12]
   13da4:	mov	r0, r6
   13da8:	mov	r1, r4
   13dac:	bl	12c08 <_obstack_memory_used@@Base+0x2b4>
   13db0:	ldr	r0, [sp, #24]
   13db4:	ldr	r1, [sp, #32]
   13db8:	ldr	r2, [sp, #28]
   13dbc:	cmp	r0, #0
   13dc0:	str	r1, [r2]
   13dc4:	strne	r5, [r0]
   13dc8:	mov	r0, r6
   13dcc:	sub	sp, fp, #28
   13dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dd4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13dd8:	add	fp, sp, #24
   13ddc:	movw	r5, #33012	; 0x80f4
   13de0:	movw	r8, #33008	; 0x80f0
   13de4:	movt	r5, #2
   13de8:	movt	r8, #2
   13dec:	ldr	r0, [r5]
   13df0:	ldr	r4, [r8]
   13df4:	cmp	r0, #2
   13df8:	blt	13e24 <_obstack_memory_used@@Base+0x14d0>
   13dfc:	add	r7, r4, #12
   13e00:	mov	r6, #0
   13e04:	ldr	r0, [r7, r6, lsl #3]
   13e08:	bl	122b8 <close@plt+0x11c0>
   13e0c:	ldr	r1, [r5]
   13e10:	add	r2, r6, #2
   13e14:	add	r0, r6, #1
   13e18:	mov	r6, r0
   13e1c:	cmp	r2, r1
   13e20:	blt	13e04 <_obstack_memory_used@@Base+0x14b0>
   13e24:	ldr	r0, [r4, #4]
   13e28:	movw	r9, #33216	; 0x81c0
   13e2c:	movw	r7, #33016	; 0x80f8
   13e30:	movt	r9, #2
   13e34:	movt	r7, #2
   13e38:	cmp	r0, r9
   13e3c:	beq	13e4c <_obstack_memory_used@@Base+0x14f8>
   13e40:	bl	122b8 <close@plt+0x11c0>
   13e44:	mov	r0, #256	; 0x100
   13e48:	stm	r7, {r0, r9}
   13e4c:	cmp	r4, r7
   13e50:	beq	13e60 <_obstack_memory_used@@Base+0x150c>
   13e54:	mov	r0, r4
   13e58:	bl	122b8 <close@plt+0x11c0>
   13e5c:	str	r7, [r8]
   13e60:	mov	r0, #1
   13e64:	str	r0, [r5]
   13e68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e6c:	movw	r3, #33168	; 0x8190
   13e70:	mvn	r2, #0
   13e74:	movt	r3, #2
   13e78:	b	13e7c <_obstack_memory_used@@Base+0x1528>
   13e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	add	fp, sp, #28
   13e84:	sub	sp, sp, #44	; 0x2c
   13e88:	mov	r7, r3
   13e8c:	str	r2, [sp, #36]	; 0x24
   13e90:	str	r1, [sp, #32]
   13e94:	mov	r5, r0
   13e98:	bl	11050 <__errno_location@plt>
   13e9c:	cmp	r5, #0
   13ea0:	bmi	14010 <_obstack_memory_used@@Base+0x16bc>
   13ea4:	cmn	r5, #-2147483647	; 0x80000001
   13ea8:	beq	14010 <_obstack_memory_used@@Base+0x16bc>
   13eac:	movw	r8, #33012	; 0x80f4
   13eb0:	movw	r4, #33008	; 0x80f0
   13eb4:	str	r0, [sp, #28]
   13eb8:	ldr	r0, [r0]
   13ebc:	movt	r8, #2
   13ec0:	movt	r4, #2
   13ec4:	ldr	r1, [r8]
   13ec8:	ldr	r6, [r4]
   13ecc:	str	r0, [sp, #24]
   13ed0:	cmp	r1, r5
   13ed4:	ble	13ee0 <_obstack_memory_used@@Base+0x158c>
   13ed8:	mov	sl, r6
   13edc:	b	13f4c <_obstack_memory_used@@Base+0x15f8>
   13ee0:	movw	r9, #33016	; 0x80f8
   13ee4:	mov	r0, #8
   13ee8:	str	r1, [fp, #-32]	; 0xffffffe0
   13eec:	sub	r1, r5, r1
   13ef0:	mvn	r3, #-2147483648	; 0x80000000
   13ef4:	movt	r9, #2
   13ef8:	str	r0, [sp]
   13efc:	add	r2, r1, #1
   13f00:	sub	r1, fp, #32
   13f04:	subs	r0, r6, r9
   13f08:	movne	r0, r6
   13f0c:	bl	15054 <_obstack_memory_used@@Base+0x2700>
   13f10:	mov	sl, r0
   13f14:	cmp	r6, r9
   13f18:	str	r0, [r4]
   13f1c:	bne	13f28 <_obstack_memory_used@@Base+0x15d4>
   13f20:	ldrd	r0, [r9]
   13f24:	stm	sl, {r0, r1}
   13f28:	ldr	r1, [r8]
   13f2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f30:	add	r0, sl, r1, lsl #3
   13f34:	sub	r1, r2, r1
   13f38:	lsl	r2, r1, #3
   13f3c:	mov	r1, #0
   13f40:	bl	11068 <memset@plt>
   13f44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13f48:	str	r0, [r8]
   13f4c:	mov	r9, sl
   13f50:	ldm	r7, {r0, r1}
   13f54:	orr	r8, r1, #1
   13f58:	add	r1, r7, #8
   13f5c:	ldr	r2, [r7, #40]	; 0x28
   13f60:	ldr	r3, [r7, #44]	; 0x2c
   13f64:	ldr	r6, [r9, r5, lsl #3]!
   13f68:	str	r1, [sp, #20]
   13f6c:	ldr	r4, [r9, #4]!
   13f70:	stm	sp, {r0, r8}
   13f74:	add	r0, sp, #8
   13f78:	stm	r0, {r1, r2, r3}
   13f7c:	ldr	r2, [sp, #32]
   13f80:	ldr	r3, [sp, #36]	; 0x24
   13f84:	mov	r1, r6
   13f88:	mov	r0, r4
   13f8c:	bl	12c08 <_obstack_memory_used@@Base+0x2b4>
   13f90:	cmp	r6, r0
   13f94:	bhi	13ff8 <_obstack_memory_used@@Base+0x16a4>
   13f98:	add	r6, r0, #1
   13f9c:	movw	r0, #33216	; 0x81c0
   13fa0:	movt	r0, #2
   13fa4:	str	r6, [sl, r5, lsl #3]
   13fa8:	cmp	r4, r0
   13fac:	beq	13fb8 <_obstack_memory_used@@Base+0x1664>
   13fb0:	mov	r0, r4
   13fb4:	bl	122b8 <close@plt+0x11c0>
   13fb8:	mov	r0, r6
   13fbc:	bl	14e54 <_obstack_memory_used@@Base+0x2500>
   13fc0:	str	r0, [r9]
   13fc4:	mov	r4, r0
   13fc8:	add	r3, sp, #8
   13fcc:	ldr	r0, [r7]
   13fd0:	ldr	r1, [r7, #40]	; 0x28
   13fd4:	ldr	r2, [r7, #44]	; 0x2c
   13fd8:	stm	sp, {r0, r8}
   13fdc:	ldr	r0, [sp, #20]
   13fe0:	stm	r3, {r0, r1, r2}
   13fe4:	ldr	r2, [sp, #32]
   13fe8:	ldr	r3, [sp, #36]	; 0x24
   13fec:	mov	r0, r4
   13ff0:	mov	r1, r6
   13ff4:	bl	12c08 <_obstack_memory_used@@Base+0x2b4>
   13ff8:	ldr	r0, [sp, #28]
   13ffc:	ldr	r1, [sp, #24]
   14000:	str	r1, [r0]
   14004:	mov	r0, r4
   14008:	sub	sp, fp, #28
   1400c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14010:	bl	110ec <abort@plt>
   14014:	movw	r3, #33168	; 0x8190
   14018:	movt	r3, #2
   1401c:	b	13e7c <_obstack_memory_used@@Base+0x1528>
   14020:	movw	r3, #33168	; 0x8190
   14024:	mov	r1, r0
   14028:	mov	r0, #0
   1402c:	mvn	r2, #0
   14030:	movt	r3, #2
   14034:	b	13e7c <_obstack_memory_used@@Base+0x1528>
   14038:	movw	r3, #33168	; 0x8190
   1403c:	mov	r2, r1
   14040:	mov	r1, r0
   14044:	mov	r0, #0
   14048:	movt	r3, #2
   1404c:	b	13e7c <_obstack_memory_used@@Base+0x1528>
   14050:	push	{fp, lr}
   14054:	mov	fp, sp
   14058:	sub	sp, sp, #48	; 0x30
   1405c:	vmov.i32	q8, #0	; 0x00000000
   14060:	mov	ip, #32
   14064:	mov	r3, sp
   14068:	mov	lr, r2
   1406c:	cmp	r1, #10
   14070:	add	r2, r3, #16
   14074:	vst1.64	{d16-d17}, [r3], ip
   14078:	vst1.64	{d16-d17}, [r2]
   1407c:	vst1.64	{d16-d17}, [r3]
   14080:	beq	140a0 <_obstack_memory_used@@Base+0x174c>
   14084:	str	r1, [sp]
   14088:	mov	r3, sp
   1408c:	mov	r1, lr
   14090:	mvn	r2, #0
   14094:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   14098:	mov	sp, fp
   1409c:	pop	{fp, pc}
   140a0:	bl	110ec <abort@plt>
   140a4:	push	{r4, sl, fp, lr}
   140a8:	add	fp, sp, #8
   140ac:	sub	sp, sp, #48	; 0x30
   140b0:	vmov.i32	q8, #0	; 0x00000000
   140b4:	mov	ip, r3
   140b8:	mov	r3, sp
   140bc:	mov	lr, #32
   140c0:	cmp	r1, #10
   140c4:	add	r4, r3, #16
   140c8:	vst1.64	{d16-d17}, [r3], lr
   140cc:	vst1.64	{d16-d17}, [r4]
   140d0:	vst1.64	{d16-d17}, [r3]
   140d4:	beq	140f4 <_obstack_memory_used@@Base+0x17a0>
   140d8:	str	r1, [sp]
   140dc:	mov	r1, r2
   140e0:	mov	r3, sp
   140e4:	mov	r2, ip
   140e8:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   140ec:	sub	sp, fp, #8
   140f0:	pop	{r4, sl, fp, pc}
   140f4:	bl	110ec <abort@plt>
   140f8:	push	{fp, lr}
   140fc:	mov	fp, sp
   14100:	sub	sp, sp, #48	; 0x30
   14104:	vmov.i32	q8, #0	; 0x00000000
   14108:	mov	r3, sp
   1410c:	mov	ip, #32
   14110:	cmp	r0, #10
   14114:	add	r2, r3, #16
   14118:	vst1.64	{d16-d17}, [r3], ip
   1411c:	vst1.64	{d16-d17}, [r2]
   14120:	vst1.64	{d16-d17}, [r3]
   14124:	beq	14144 <_obstack_memory_used@@Base+0x17f0>
   14128:	str	r0, [sp]
   1412c:	mov	r3, sp
   14130:	mov	r0, #0
   14134:	mvn	r2, #0
   14138:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   1413c:	mov	sp, fp
   14140:	pop	{fp, pc}
   14144:	bl	110ec <abort@plt>
   14148:	push	{fp, lr}
   1414c:	mov	fp, sp
   14150:	sub	sp, sp, #48	; 0x30
   14154:	vmov.i32	q8, #0	; 0x00000000
   14158:	mov	r3, sp
   1415c:	mov	ip, #32
   14160:	cmp	r0, #10
   14164:	add	lr, r3, #16
   14168:	vst1.64	{d16-d17}, [r3], ip
   1416c:	vst1.64	{d16-d17}, [lr]
   14170:	vst1.64	{d16-d17}, [r3]
   14174:	beq	14190 <_obstack_memory_used@@Base+0x183c>
   14178:	str	r0, [sp]
   1417c:	mov	r3, sp
   14180:	mov	r0, #0
   14184:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   14188:	mov	sp, fp
   1418c:	pop	{fp, pc}
   14190:	bl	110ec <abort@plt>
   14194:	push	{r4, sl, fp, lr}
   14198:	add	fp, sp, #8
   1419c:	sub	sp, sp, #48	; 0x30
   141a0:	mov	lr, r0
   141a4:	movw	r0, #33168	; 0x8190
   141a8:	mov	ip, r1
   141ac:	mov	r1, #32
   141b0:	mov	r4, #1
   141b4:	movt	r0, #2
   141b8:	add	r3, r0, #16
   141bc:	vld1.64	{d16-d17}, [r0], r1
   141c0:	vld1.64	{d20-d21}, [r0]
   141c4:	vld1.64	{d18-d19}, [r3]
   141c8:	mov	r3, sp
   141cc:	add	r0, r3, #32
   141d0:	add	r1, r3, #16
   141d4:	vst1.64	{d20-d21}, [r0]
   141d8:	mov	r0, #28
   141dc:	vst1.64	{d18-d19}, [r1]
   141e0:	mov	r1, r3
   141e4:	and	r0, r0, r2, lsr #3
   141e8:	and	r2, r2, #31
   141ec:	vst1.64	{d16-d17}, [r1], r0
   141f0:	ldr	r0, [r1, #8]
   141f4:	bic	r4, r4, r0, lsr r2
   141f8:	eor	r0, r0, r4, lsl r2
   141fc:	mov	r2, ip
   14200:	str	r0, [r1, #8]
   14204:	mov	r0, #0
   14208:	mov	r1, lr
   1420c:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   14210:	sub	sp, fp, #8
   14214:	pop	{r4, sl, fp, pc}
   14218:	push	{fp, lr}
   1421c:	mov	fp, sp
   14220:	sub	sp, sp, #48	; 0x30
   14224:	mov	ip, r0
   14228:	movw	r0, #33168	; 0x8190
   1422c:	mov	r2, #32
   14230:	movt	r0, #2
   14234:	add	r3, r0, #16
   14238:	vld1.64	{d16-d17}, [r0], r2
   1423c:	vld1.64	{d20-d21}, [r0]
   14240:	vld1.64	{d18-d19}, [r3]
   14244:	mov	r3, sp
   14248:	add	r0, r3, #32
   1424c:	add	r2, r3, #16
   14250:	vst1.64	{d20-d21}, [r0]
   14254:	mov	r0, #28
   14258:	vst1.64	{d18-d19}, [r2]
   1425c:	mov	r2, r3
   14260:	and	r0, r0, r1, lsr #3
   14264:	and	r1, r1, #31
   14268:	vst1.64	{d16-d17}, [r2], r0
   1426c:	mov	r0, #1
   14270:	ldr	lr, [r2, #8]
   14274:	bic	r0, r0, lr, lsr r1
   14278:	eor	r0, lr, r0, lsl r1
   1427c:	mov	r1, ip
   14280:	str	r0, [r2, #8]
   14284:	mov	r0, #0
   14288:	mvn	r2, #0
   1428c:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   14290:	mov	sp, fp
   14294:	pop	{fp, pc}
   14298:	push	{fp, lr}
   1429c:	mov	fp, sp
   142a0:	sub	sp, sp, #48	; 0x30
   142a4:	mov	r1, r0
   142a8:	movw	r0, #33168	; 0x8190
   142ac:	mov	r3, #32
   142b0:	movt	r0, #2
   142b4:	add	r2, r0, #16
   142b8:	vld1.64	{d16-d17}, [r0], r3
   142bc:	mov	r3, sp
   142c0:	vld1.64	{d18-d19}, [r2]
   142c4:	vld1.64	{d20-d21}, [r0]
   142c8:	add	r2, r3, #16
   142cc:	add	r0, r3, #32
   142d0:	vst1.64	{d18-d19}, [r2]
   142d4:	vst1.64	{d20-d21}, [r0]
   142d8:	mov	r0, #12
   142dc:	mov	r2, r3
   142e0:	vst1.64	{d16-d17}, [r2], r0
   142e4:	ldr	r0, [r2]
   142e8:	orr	r0, r0, #67108864	; 0x4000000
   142ec:	str	r0, [r2]
   142f0:	mov	r0, #0
   142f4:	mvn	r2, #0
   142f8:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   142fc:	mov	sp, fp
   14300:	pop	{fp, pc}
   14304:	push	{fp, lr}
   14308:	mov	fp, sp
   1430c:	sub	sp, sp, #48	; 0x30
   14310:	mov	ip, r1
   14314:	mov	r1, r0
   14318:	movw	r0, #33168	; 0x8190
   1431c:	mov	r2, #32
   14320:	movt	r0, #2
   14324:	add	r3, r0, #16
   14328:	vld1.64	{d16-d17}, [r0], r2
   1432c:	vld1.64	{d18-d19}, [r3]
   14330:	vld1.64	{d20-d21}, [r0]
   14334:	mov	r3, sp
   14338:	add	r2, r3, #16
   1433c:	add	r0, r3, #32
   14340:	vst1.64	{d18-d19}, [r2]
   14344:	vst1.64	{d20-d21}, [r0]
   14348:	mov	r0, #12
   1434c:	mov	r2, r3
   14350:	vst1.64	{d16-d17}, [r2], r0
   14354:	ldr	r0, [r2]
   14358:	orr	r0, r0, #67108864	; 0x4000000
   1435c:	str	r0, [r2]
   14360:	mov	r0, #0
   14364:	mov	r2, ip
   14368:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   1436c:	mov	sp, fp
   14370:	pop	{fp, pc}
   14374:	push	{r4, sl, fp, lr}
   14378:	add	fp, sp, #8
   1437c:	sub	sp, sp, #96	; 0x60
   14380:	vmov.i32	q8, #0	; 0x00000000
   14384:	mov	ip, r2
   14388:	mov	r2, sp
   1438c:	mov	r4, #28
   14390:	cmp	r1, #10
   14394:	mov	r3, r2
   14398:	add	lr, r2, #16
   1439c:	vst1.64	{d16-d17}, [r3], r4
   143a0:	vst1.64	{d16-d17}, [lr]
   143a4:	vst1.32	{d16-d17}, [r3]
   143a8:	beq	143f8 <_obstack_memory_used@@Base+0x1aa4>
   143ac:	vld1.64	{d16-d17}, [r2], r4
   143b0:	vld1.64	{d18-d19}, [lr]
   143b4:	add	r3, sp, #48	; 0x30
   143b8:	vld1.32	{d20-d21}, [r2]
   143bc:	add	r2, r3, #20
   143c0:	add	r4, r3, #4
   143c4:	vst1.32	{d18-d19}, [r2]
   143c8:	add	r2, r3, #32
   143cc:	vst1.32	{d16-d17}, [r4]
   143d0:	vst1.32	{d20-d21}, [r2]
   143d4:	str	r1, [sp, #48]	; 0x30
   143d8:	mvn	r2, #0
   143dc:	ldr	r1, [sp, #60]	; 0x3c
   143e0:	orr	r1, r1, #67108864	; 0x4000000
   143e4:	str	r1, [sp, #60]	; 0x3c
   143e8:	mov	r1, ip
   143ec:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   143f0:	sub	sp, fp, #8
   143f4:	pop	{r4, sl, fp, pc}
   143f8:	bl	110ec <abort@plt>
   143fc:	push	{r4, r5, r6, sl, fp, lr}
   14400:	add	fp, sp, #16
   14404:	sub	sp, sp, #48	; 0x30
   14408:	mov	ip, r3
   1440c:	movw	r3, #33168	; 0x8190
   14410:	mov	r6, #32
   14414:	cmp	r1, #0
   14418:	mov	r4, sp
   1441c:	movt	r3, #2
   14420:	cmpne	r2, #0
   14424:	add	r5, r4, #16
   14428:	add	lr, r3, #16
   1442c:	vld1.64	{d16-d17}, [r3], r6
   14430:	vld1.64	{d18-d19}, [lr]
   14434:	vld1.64	{d20-d21}, [r3]
   14438:	mov	r3, #10
   1443c:	vst1.64	{d16-d17}, [r4], r6
   14440:	vst1.64	{d18-d19}, [r5]
   14444:	vst1.64	{d20-d21}, [r4]
   14448:	str	r3, [sp]
   1444c:	bne	14454 <_obstack_memory_used@@Base+0x1b00>
   14450:	bl	110ec <abort@plt>
   14454:	str	r2, [sp, #44]	; 0x2c
   14458:	str	r1, [sp, #40]	; 0x28
   1445c:	mov	r3, sp
   14460:	mov	r1, ip
   14464:	mvn	r2, #0
   14468:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   1446c:	sub	sp, fp, #16
   14470:	pop	{r4, r5, r6, sl, fp, pc}
   14474:	push	{r4, r5, r6, sl, fp, lr}
   14478:	add	fp, sp, #16
   1447c:	sub	sp, sp, #48	; 0x30
   14480:	mov	lr, r3
   14484:	movw	r3, #33168	; 0x8190
   14488:	mov	r6, #32
   1448c:	cmp	r1, #0
   14490:	mov	r4, sp
   14494:	movt	r3, #2
   14498:	cmpne	r2, #0
   1449c:	add	r5, r4, #16
   144a0:	add	ip, r3, #16
   144a4:	vld1.64	{d16-d17}, [r3], r6
   144a8:	vld1.64	{d18-d19}, [ip]
   144ac:	vld1.64	{d20-d21}, [r3]
   144b0:	mov	r3, #10
   144b4:	vst1.64	{d16-d17}, [r4], r6
   144b8:	vst1.64	{d18-d19}, [r5]
   144bc:	vst1.64	{d20-d21}, [r4]
   144c0:	str	r3, [sp]
   144c4:	bne	144cc <_obstack_memory_used@@Base+0x1b78>
   144c8:	bl	110ec <abort@plt>
   144cc:	ldr	ip, [fp, #8]
   144d0:	str	r2, [sp, #44]	; 0x2c
   144d4:	str	r1, [sp, #40]	; 0x28
   144d8:	mov	r3, sp
   144dc:	mov	r1, lr
   144e0:	mov	r2, ip
   144e4:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   144e8:	sub	sp, fp, #16
   144ec:	pop	{r4, r5, r6, sl, fp, pc}
   144f0:	push	{r4, sl, fp, lr}
   144f4:	add	fp, sp, #8
   144f8:	sub	sp, sp, #48	; 0x30
   144fc:	movw	r3, #33168	; 0x8190
   14500:	mov	lr, #32
   14504:	mov	ip, r2
   14508:	cmp	r0, #0
   1450c:	movt	r3, #2
   14510:	cmpne	r1, #0
   14514:	add	r2, r3, #16
   14518:	vld1.64	{d16-d17}, [r3], lr
   1451c:	vld1.64	{d20-d21}, [r3]
   14520:	vld1.64	{d18-d19}, [r2]
   14524:	mov	r2, sp
   14528:	add	r4, r2, #16
   1452c:	vst1.64	{d16-d17}, [r2], lr
   14530:	vst1.64	{d20-d21}, [r2]
   14534:	mov	r2, #10
   14538:	vst1.64	{d18-d19}, [r4]
   1453c:	str	r2, [sp]
   14540:	bne	14548 <_obstack_memory_used@@Base+0x1bf4>
   14544:	bl	110ec <abort@plt>
   14548:	str	r1, [sp, #44]	; 0x2c
   1454c:	str	r0, [sp, #40]	; 0x28
   14550:	mov	r3, sp
   14554:	mov	r0, #0
   14558:	mov	r1, ip
   1455c:	mvn	r2, #0
   14560:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   14564:	sub	sp, fp, #8
   14568:	pop	{r4, sl, fp, pc}
   1456c:	push	{r4, r5, fp, lr}
   14570:	add	fp, sp, #8
   14574:	sub	sp, sp, #48	; 0x30
   14578:	mov	ip, r3
   1457c:	movw	r3, #33168	; 0x8190
   14580:	mov	r4, #32
   14584:	mov	lr, r2
   14588:	cmp	r0, #0
   1458c:	movt	r3, #2
   14590:	cmpne	r1, #0
   14594:	add	r2, r3, #16
   14598:	vld1.64	{d16-d17}, [r3], r4
   1459c:	vld1.64	{d20-d21}, [r3]
   145a0:	vld1.64	{d18-d19}, [r2]
   145a4:	mov	r2, sp
   145a8:	add	r5, r2, #16
   145ac:	vst1.64	{d16-d17}, [r2], r4
   145b0:	vst1.64	{d20-d21}, [r2]
   145b4:	mov	r2, #10
   145b8:	vst1.64	{d18-d19}, [r5]
   145bc:	str	r2, [sp]
   145c0:	bne	145c8 <_obstack_memory_used@@Base+0x1c74>
   145c4:	bl	110ec <abort@plt>
   145c8:	str	r1, [sp, #44]	; 0x2c
   145cc:	str	r0, [sp, #40]	; 0x28
   145d0:	mov	r3, sp
   145d4:	mov	r0, #0
   145d8:	mov	r1, lr
   145dc:	mov	r2, ip
   145e0:	bl	13e7c <_obstack_memory_used@@Base+0x1528>
   145e4:	sub	sp, fp, #8
   145e8:	pop	{r4, r5, fp, pc}
   145ec:	movw	r3, #33024	; 0x8100
   145f0:	movt	r3, #2
   145f4:	b	13e7c <_obstack_memory_used@@Base+0x1528>
   145f8:	movw	r3, #33024	; 0x8100
   145fc:	mov	r2, r1
   14600:	mov	r1, r0
   14604:	mov	r0, #0
   14608:	movt	r3, #2
   1460c:	b	13e7c <_obstack_memory_used@@Base+0x1528>
   14610:	movw	r3, #33024	; 0x8100
   14614:	mvn	r2, #0
   14618:	movt	r3, #2
   1461c:	b	13e7c <_obstack_memory_used@@Base+0x1528>
   14620:	movw	r3, #33024	; 0x8100
   14624:	mov	r1, r0
   14628:	mov	r0, #0
   1462c:	mvn	r2, #0
   14630:	movt	r3, #2
   14634:	b	13e7c <_obstack_memory_used@@Base+0x1528>
   14638:	push	{r4, r5, fp, lr}
   1463c:	add	fp, sp, #8
   14640:	mov	r5, r0
   14644:	mov	r4, r1
   14648:	mov	r0, #0
   1464c:	mov	r2, #5
   14650:	mov	r1, r5
   14654:	bl	10f24 <dcgettext@plt>
   14658:	cmp	r0, r5
   1465c:	popne	{r4, r5, fp, pc}
   14660:	bl	15500 <_obstack_memory_used@@Base+0x2bac>
   14664:	ldrb	r1, [r0]
   14668:	and	r1, r1, #223	; 0xdf
   1466c:	cmp	r1, #71	; 0x47
   14670:	beq	146d8 <_obstack_memory_used@@Base+0x1d84>
   14674:	cmp	r1, #85	; 0x55
   14678:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   1467c:	ldrb	r1, [r0, #1]
   14680:	and	r1, r1, #223	; 0xdf
   14684:	cmp	r1, #84	; 0x54
   14688:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   1468c:	ldrb	r1, [r0, #2]
   14690:	and	r1, r1, #223	; 0xdf
   14694:	cmp	r1, #70	; 0x46
   14698:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   1469c:	ldrb	r1, [r0, #3]
   146a0:	cmp	r1, #45	; 0x2d
   146a4:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   146a8:	ldrb	r1, [r0, #4]
   146ac:	cmp	r1, #56	; 0x38
   146b0:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   146b4:	ldrb	r0, [r0, #5]
   146b8:	cmp	r0, #0
   146bc:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   146c0:	ldrb	r1, [r5]
   146c4:	movw	r2, #29203	; 0x7213
   146c8:	movw	r0, #29207	; 0x7217
   146cc:	movt	r2, #1
   146d0:	movt	r0, #1
   146d4:	b	14760 <_obstack_memory_used@@Base+0x1e0c>
   146d8:	ldrb	r1, [r0, #1]
   146dc:	and	r1, r1, #223	; 0xdf
   146e0:	cmp	r1, #66	; 0x42
   146e4:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   146e8:	ldrb	r1, [r0, #2]
   146ec:	cmp	r1, #49	; 0x31
   146f0:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   146f4:	ldrb	r1, [r0, #3]
   146f8:	cmp	r1, #56	; 0x38
   146fc:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   14700:	ldrb	r1, [r0, #4]
   14704:	cmp	r1, #48	; 0x30
   14708:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   1470c:	ldrb	r1, [r0, #5]
   14710:	cmp	r1, #51	; 0x33
   14714:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   14718:	ldrb	r1, [r0, #6]
   1471c:	cmp	r1, #48	; 0x30
   14720:	bne	14730 <_obstack_memory_used@@Base+0x1ddc>
   14724:	ldrb	r0, [r0, #7]
   14728:	cmp	r0, #0
   1472c:	beq	1474c <_obstack_memory_used@@Base+0x1df8>
   14730:	movw	r1, #29199	; 0x720f
   14734:	movw	r0, #23403	; 0x5b6b
   14738:	cmp	r4, #9
   1473c:	movt	r1, #1
   14740:	movt	r0, #1
   14744:	moveq	r0, r1
   14748:	pop	{r4, r5, fp, pc}
   1474c:	ldrb	r1, [r5]
   14750:	movw	r2, #29211	; 0x721b
   14754:	movw	r0, #29215	; 0x721f
   14758:	movt	r2, #1
   1475c:	movt	r0, #1
   14760:	cmp	r1, #96	; 0x60
   14764:	moveq	r0, r2
   14768:	pop	{r4, r5, fp, pc}
   1476c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14770:	add	fp, sp, #24
   14774:	sub	sp, sp, #32
   14778:	ldr	r6, [fp, #12]
   1477c:	ldr	r7, [fp, #8]
   14780:	mov	r4, r2
   14784:	mov	r8, r0
   14788:	cmp	r1, #0
   1478c:	beq	147b4 <_obstack_memory_used@@Base+0x1e60>
   14790:	movw	r2, #29304	; 0x7278
   14794:	mov	r5, r1
   14798:	str	r3, [sp, #4]
   1479c:	str	r4, [sp]
   147a0:	mov	r0, r8
   147a4:	mov	r1, #1
   147a8:	movt	r2, #1
   147ac:	mov	r3, r5
   147b0:	b	147cc <_obstack_memory_used@@Base+0x1e78>
   147b4:	movw	r2, #29316	; 0x7284
   147b8:	str	r3, [sp]
   147bc:	mov	r0, r8
   147c0:	mov	r1, #1
   147c4:	mov	r3, r4
   147c8:	movt	r2, #1
   147cc:	bl	1108c <__fprintf_chk@plt>
   147d0:	movw	r1, #29323	; 0x728b
   147d4:	mov	r0, #0
   147d8:	mov	r2, #5
   147dc:	movt	r1, #1
   147e0:	bl	10f24 <dcgettext@plt>
   147e4:	movw	r2, #30041	; 0x7559
   147e8:	mov	r3, r0
   147ec:	movw	r0, #2022	; 0x7e6
   147f0:	mov	r1, #1
   147f4:	movt	r2, #1
   147f8:	str	r0, [sp]
   147fc:	mov	r0, r8
   14800:	bl	1108c <__fprintf_chk@plt>
   14804:	movw	r4, #23714	; 0x5ca2
   14808:	mov	r1, r8
   1480c:	movt	r4, #1
   14810:	mov	r0, r4
   14814:	bl	10eb8 <fputs_unlocked@plt>
   14818:	movw	r1, #29327	; 0x728f
   1481c:	mov	r0, #0
   14820:	mov	r2, #5
   14824:	movt	r1, #1
   14828:	bl	10f24 <dcgettext@plt>
   1482c:	movw	r3, #29498	; 0x733a
   14830:	mov	r2, r0
   14834:	mov	r0, r8
   14838:	mov	r1, #1
   1483c:	movt	r3, #1
   14840:	bl	1108c <__fprintf_chk@plt>
   14844:	mov	r0, r4
   14848:	mov	r1, r8
   1484c:	bl	10eb8 <fputs_unlocked@plt>
   14850:	cmp	r6, #9
   14854:	bhi	14890 <_obstack_memory_used@@Base+0x1f3c>
   14858:	add	r0, pc, #0
   1485c:	ldr	pc, [r0, r6, lsl #2]
   14860:	andeq	r4, r1, r8, lsl #17
   14864:	muleq	r1, ip, r8
   14868:	andeq	r4, r1, ip, asr #17
   1486c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14870:	andeq	r4, r1, ip, lsl r9
   14874:	andeq	r4, r1, r4, asr #18
   14878:	andeq	r4, r1, ip, ror #18
   1487c:	andeq	r4, r1, r4, lsr #19
   14880:	andeq	r4, r1, r4, asr #20
   14884:	andeq	r4, r1, ip, ror #19
   14888:	sub	sp, fp, #24
   1488c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14890:	movw	r1, #29851	; 0x749b
   14894:	movt	r1, #1
   14898:	b	149f4 <_obstack_memory_used@@Base+0x20a0>
   1489c:	movw	r1, #29532	; 0x735c
   148a0:	mov	r0, #0
   148a4:	mov	r2, #5
   148a8:	movt	r1, #1
   148ac:	bl	10f24 <dcgettext@plt>
   148b0:	ldr	r3, [r7]
   148b4:	mov	r2, r0
   148b8:	mov	r0, r8
   148bc:	mov	r1, #1
   148c0:	sub	sp, fp, #24
   148c4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   148c8:	b	1108c <__fprintf_chk@plt>
   148cc:	movw	r1, #29548	; 0x736c
   148d0:	mov	r0, #0
   148d4:	mov	r2, #5
   148d8:	movt	r1, #1
   148dc:	bl	10f24 <dcgettext@plt>
   148e0:	mov	r2, r0
   148e4:	ldr	r3, [r7]
   148e8:	ldr	r0, [r7, #4]
   148ec:	str	r0, [sp]
   148f0:	b	149e0 <_obstack_memory_used@@Base+0x208c>
   148f4:	movw	r1, #29571	; 0x7383
   148f8:	mov	r0, #0
   148fc:	mov	r2, #5
   14900:	movt	r1, #1
   14904:	bl	10f24 <dcgettext@plt>
   14908:	mov	r2, r0
   1490c:	ldr	r3, [r7]
   14910:	ldmib	r7, {r0, r1}
   14914:	stm	sp, {r0, r1}
   14918:	b	149e0 <_obstack_memory_used@@Base+0x208c>
   1491c:	movw	r1, #29599	; 0x739f
   14920:	mov	r0, #0
   14924:	mov	r2, #5
   14928:	movt	r1, #1
   1492c:	bl	10f24 <dcgettext@plt>
   14930:	ldr	r3, [r7]
   14934:	mov	r2, r0
   14938:	ldmib	r7, {r0, r1, r7}
   1493c:	stm	sp, {r0, r1, r7}
   14940:	b	149e0 <_obstack_memory_used@@Base+0x208c>
   14944:	movw	r1, #29631	; 0x73bf
   14948:	mov	r0, #0
   1494c:	mov	r2, #5
   14950:	movt	r1, #1
   14954:	bl	10f24 <dcgettext@plt>
   14958:	ldr	r3, [r7]
   1495c:	mov	r2, r0
   14960:	ldmib	r7, {r0, r1, r6, r7}
   14964:	stm	sp, {r0, r1, r6, r7}
   14968:	b	149e0 <_obstack_memory_used@@Base+0x208c>
   1496c:	movw	r1, #29667	; 0x73e3
   14970:	mov	r0, #0
   14974:	mov	r2, #5
   14978:	movt	r1, #1
   1497c:	bl	10f24 <dcgettext@plt>
   14980:	mov	r2, r0
   14984:	ldr	r3, [r7]
   14988:	ldmib	r7, {r0, r1, r6}
   1498c:	ldr	r5, [r7, #16]
   14990:	ldr	r7, [r7, #20]
   14994:	stm	sp, {r0, r1, r6}
   14998:	str	r5, [sp, #12]
   1499c:	str	r7, [sp, #16]
   149a0:	b	149e0 <_obstack_memory_used@@Base+0x208c>
   149a4:	movw	r1, #29707	; 0x740b
   149a8:	mov	r0, #0
   149ac:	mov	r2, #5
   149b0:	movt	r1, #1
   149b4:	bl	10f24 <dcgettext@plt>
   149b8:	mov	r2, r0
   149bc:	ldr	r3, [r7]
   149c0:	ldmib	r7, {r0, r1, r6}
   149c4:	ldr	r5, [r7, #16]
   149c8:	ldr	r4, [r7, #20]
   149cc:	ldr	r7, [r7, #24]
   149d0:	stm	sp, {r0, r1, r6}
   149d4:	str	r5, [sp, #12]
   149d8:	str	r4, [sp, #16]
   149dc:	str	r7, [sp, #20]
   149e0:	mov	r0, r8
   149e4:	mov	r1, #1
   149e8:	b	14a94 <_obstack_memory_used@@Base+0x2140>
   149ec:	movw	r1, #29799	; 0x7467
   149f0:	movt	r1, #1
   149f4:	mov	r0, #0
   149f8:	mov	r2, #5
   149fc:	bl	10f24 <dcgettext@plt>
   14a00:	mov	ip, r0
   14a04:	ldr	r3, [r7]
   14a08:	ldr	r0, [r7, #4]
   14a0c:	ldr	r1, [r7, #8]
   14a10:	ldr	r6, [r7, #12]
   14a14:	ldr	r5, [r7, #16]
   14a18:	ldr	r4, [r7, #20]
   14a1c:	ldr	r2, [r7, #24]
   14a20:	ldr	lr, [r7, #28]
   14a24:	ldr	r7, [r7, #32]
   14a28:	stm	sp, {r0, r1, r6}
   14a2c:	str	r5, [sp, #12]
   14a30:	str	r4, [sp, #16]
   14a34:	str	r2, [sp, #20]
   14a38:	str	lr, [sp, #24]
   14a3c:	str	r7, [sp, #28]
   14a40:	b	14a88 <_obstack_memory_used@@Base+0x2134>
   14a44:	movw	r1, #29751	; 0x7437
   14a48:	mov	r0, #0
   14a4c:	mov	r2, #5
   14a50:	movt	r1, #1
   14a54:	bl	10f24 <dcgettext@plt>
   14a58:	mov	ip, r0
   14a5c:	ldr	r3, [r7]
   14a60:	ldmib	r7, {r0, r1, r6}
   14a64:	ldr	r5, [r7, #16]
   14a68:	ldr	r4, [r7, #20]
   14a6c:	ldr	r2, [r7, #24]
   14a70:	ldr	r7, [r7, #28]
   14a74:	stm	sp, {r0, r1, r6}
   14a78:	str	r5, [sp, #12]
   14a7c:	str	r4, [sp, #16]
   14a80:	str	r2, [sp, #20]
   14a84:	str	r7, [sp, #24]
   14a88:	mov	r0, r8
   14a8c:	mov	r1, #1
   14a90:	mov	r2, ip
   14a94:	bl	1108c <__fprintf_chk@plt>
   14a98:	sub	sp, fp, #24
   14a9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14aa0:	push	{r4, sl, fp, lr}
   14aa4:	add	fp, sp, #8
   14aa8:	sub	sp, sp, #8
   14aac:	ldr	ip, [fp, #8]
   14ab0:	mov	lr, #0
   14ab4:	ldr	r4, [ip, lr, lsl #2]
   14ab8:	add	lr, lr, #1
   14abc:	cmp	r4, #0
   14ac0:	bne	14ab4 <_obstack_memory_used@@Base+0x2160>
   14ac4:	sub	r4, lr, #1
   14ac8:	str	ip, [sp]
   14acc:	str	r4, [sp, #4]
   14ad0:	bl	1476c <_obstack_memory_used@@Base+0x1e18>
   14ad4:	sub	sp, fp, #8
   14ad8:	pop	{r4, sl, fp, pc}
   14adc:	push	{fp, lr}
   14ae0:	mov	fp, sp
   14ae4:	sub	sp, sp, #48	; 0x30
   14ae8:	ldr	ip, [fp, #8]
   14aec:	ldr	lr, [ip]
   14af0:	cmp	lr, #0
   14af4:	str	lr, [sp, #8]
   14af8:	beq	14b94 <_obstack_memory_used@@Base+0x2240>
   14afc:	ldr	lr, [ip, #4]
   14b00:	cmp	lr, #0
   14b04:	str	lr, [sp, #12]
   14b08:	beq	14b9c <_obstack_memory_used@@Base+0x2248>
   14b0c:	ldr	lr, [ip, #8]
   14b10:	cmp	lr, #0
   14b14:	str	lr, [sp, #16]
   14b18:	beq	14ba4 <_obstack_memory_used@@Base+0x2250>
   14b1c:	ldr	lr, [ip, #12]
   14b20:	cmp	lr, #0
   14b24:	str	lr, [sp, #20]
   14b28:	beq	14bac <_obstack_memory_used@@Base+0x2258>
   14b2c:	ldr	lr, [ip, #16]
   14b30:	cmp	lr, #0
   14b34:	str	lr, [sp, #24]
   14b38:	beq	14bb4 <_obstack_memory_used@@Base+0x2260>
   14b3c:	ldr	lr, [ip, #20]
   14b40:	cmp	lr, #0
   14b44:	str	lr, [sp, #28]
   14b48:	beq	14bbc <_obstack_memory_used@@Base+0x2268>
   14b4c:	ldr	lr, [ip, #24]
   14b50:	cmp	lr, #0
   14b54:	str	lr, [sp, #32]
   14b58:	beq	14bc4 <_obstack_memory_used@@Base+0x2270>
   14b5c:	ldr	lr, [ip, #28]
   14b60:	cmp	lr, #0
   14b64:	str	lr, [sp, #36]	; 0x24
   14b68:	beq	14bcc <_obstack_memory_used@@Base+0x2278>
   14b6c:	ldr	lr, [ip, #32]
   14b70:	cmp	lr, #0
   14b74:	str	lr, [sp, #40]	; 0x28
   14b78:	beq	14bd4 <_obstack_memory_used@@Base+0x2280>
   14b7c:	ldr	lr, [ip, #36]	; 0x24
   14b80:	mov	ip, #10
   14b84:	cmp	lr, #0
   14b88:	str	lr, [sp, #44]	; 0x2c
   14b8c:	movweq	ip, #9
   14b90:	b	14bd8 <_obstack_memory_used@@Base+0x2284>
   14b94:	mov	ip, #0
   14b98:	b	14bd8 <_obstack_memory_used@@Base+0x2284>
   14b9c:	mov	ip, #1
   14ba0:	b	14bd8 <_obstack_memory_used@@Base+0x2284>
   14ba4:	mov	ip, #2
   14ba8:	b	14bd8 <_obstack_memory_used@@Base+0x2284>
   14bac:	mov	ip, #3
   14bb0:	b	14bd8 <_obstack_memory_used@@Base+0x2284>
   14bb4:	mov	ip, #4
   14bb8:	b	14bd8 <_obstack_memory_used@@Base+0x2284>
   14bbc:	mov	ip, #5
   14bc0:	b	14bd8 <_obstack_memory_used@@Base+0x2284>
   14bc4:	mov	ip, #6
   14bc8:	b	14bd8 <_obstack_memory_used@@Base+0x2284>
   14bcc:	mov	ip, #7
   14bd0:	b	14bd8 <_obstack_memory_used@@Base+0x2284>
   14bd4:	mov	ip, #8
   14bd8:	add	lr, sp, #8
   14bdc:	str	ip, [sp, #4]
   14be0:	str	lr, [sp]
   14be4:	bl	1476c <_obstack_memory_used@@Base+0x1e18>
   14be8:	mov	sp, fp
   14bec:	pop	{fp, pc}
   14bf0:	push	{fp, lr}
   14bf4:	mov	fp, sp
   14bf8:	sub	sp, sp, #56	; 0x38
   14bfc:	add	ip, fp, #8
   14c00:	str	ip, [sp, #12]
   14c04:	ldr	lr, [fp, #8]
   14c08:	cmp	lr, #0
   14c0c:	str	lr, [sp, #16]
   14c10:	beq	14cac <_obstack_memory_used@@Base+0x2358>
   14c14:	ldr	lr, [ip, #4]
   14c18:	cmp	lr, #0
   14c1c:	str	lr, [sp, #20]
   14c20:	beq	14cb4 <_obstack_memory_used@@Base+0x2360>
   14c24:	ldr	lr, [ip, #8]
   14c28:	cmp	lr, #0
   14c2c:	str	lr, [sp, #24]
   14c30:	beq	14cbc <_obstack_memory_used@@Base+0x2368>
   14c34:	ldr	lr, [ip, #12]
   14c38:	cmp	lr, #0
   14c3c:	str	lr, [sp, #28]
   14c40:	beq	14cc4 <_obstack_memory_used@@Base+0x2370>
   14c44:	ldr	lr, [ip, #16]
   14c48:	cmp	lr, #0
   14c4c:	str	lr, [sp, #32]
   14c50:	beq	14ccc <_obstack_memory_used@@Base+0x2378>
   14c54:	ldr	lr, [ip, #20]
   14c58:	cmp	lr, #0
   14c5c:	str	lr, [sp, #36]	; 0x24
   14c60:	beq	14cd4 <_obstack_memory_used@@Base+0x2380>
   14c64:	ldr	lr, [ip, #24]
   14c68:	cmp	lr, #0
   14c6c:	str	lr, [sp, #40]	; 0x28
   14c70:	beq	14cdc <_obstack_memory_used@@Base+0x2388>
   14c74:	ldr	lr, [ip, #28]
   14c78:	cmp	lr, #0
   14c7c:	str	lr, [sp, #44]	; 0x2c
   14c80:	beq	14ce4 <_obstack_memory_used@@Base+0x2390>
   14c84:	ldr	lr, [ip, #32]
   14c88:	cmp	lr, #0
   14c8c:	str	lr, [sp, #48]	; 0x30
   14c90:	beq	14cec <_obstack_memory_used@@Base+0x2398>
   14c94:	ldr	lr, [ip, #36]	; 0x24
   14c98:	mov	ip, #10
   14c9c:	cmp	lr, #0
   14ca0:	str	lr, [sp, #52]	; 0x34
   14ca4:	movweq	ip, #9
   14ca8:	b	14cf0 <_obstack_memory_used@@Base+0x239c>
   14cac:	mov	ip, #0
   14cb0:	b	14cf0 <_obstack_memory_used@@Base+0x239c>
   14cb4:	mov	ip, #1
   14cb8:	b	14cf0 <_obstack_memory_used@@Base+0x239c>
   14cbc:	mov	ip, #2
   14cc0:	b	14cf0 <_obstack_memory_used@@Base+0x239c>
   14cc4:	mov	ip, #3
   14cc8:	b	14cf0 <_obstack_memory_used@@Base+0x239c>
   14ccc:	mov	ip, #4
   14cd0:	b	14cf0 <_obstack_memory_used@@Base+0x239c>
   14cd4:	mov	ip, #5
   14cd8:	b	14cf0 <_obstack_memory_used@@Base+0x239c>
   14cdc:	mov	ip, #6
   14ce0:	b	14cf0 <_obstack_memory_used@@Base+0x239c>
   14ce4:	mov	ip, #7
   14ce8:	b	14cf0 <_obstack_memory_used@@Base+0x239c>
   14cec:	mov	ip, #8
   14cf0:	add	lr, sp, #16
   14cf4:	str	ip, [sp, #4]
   14cf8:	str	lr, [sp]
   14cfc:	bl	1476c <_obstack_memory_used@@Base+0x1e18>
   14d00:	mov	sp, fp
   14d04:	pop	{fp, pc}
   14d08:	push	{fp, lr}
   14d0c:	mov	fp, sp
   14d10:	movw	r0, #33100	; 0x814c
   14d14:	movt	r0, #2
   14d18:	ldr	r1, [r0]
   14d1c:	movw	r0, #23714	; 0x5ca2
   14d20:	movt	r0, #1
   14d24:	bl	10eb8 <fputs_unlocked@plt>
   14d28:	movw	r1, #29911	; 0x74d7
   14d2c:	mov	r0, #0
   14d30:	mov	r2, #5
   14d34:	movt	r1, #1
   14d38:	bl	10f24 <dcgettext@plt>
   14d3c:	movw	r2, #29931	; 0x74eb
   14d40:	mov	r1, r0
   14d44:	mov	r0, #1
   14d48:	movt	r2, #1
   14d4c:	bl	11074 <__printf_chk@plt>
   14d50:	movw	r1, #29953	; 0x7501
   14d54:	mov	r0, #0
   14d58:	mov	r2, #5
   14d5c:	movt	r1, #1
   14d60:	bl	10f24 <dcgettext@plt>
   14d64:	movw	r2, #23082	; 0x5a2a
   14d68:	movw	r3, #23523	; 0x5be3
   14d6c:	mov	r1, r0
   14d70:	mov	r0, #1
   14d74:	movt	r2, #1
   14d78:	movt	r3, #1
   14d7c:	bl	11074 <__printf_chk@plt>
   14d80:	movw	r1, #29973	; 0x7515
   14d84:	mov	r0, #0
   14d88:	mov	r2, #5
   14d8c:	movt	r1, #1
   14d90:	bl	10f24 <dcgettext@plt>
   14d94:	movw	r2, #30012	; 0x753c
   14d98:	mov	r1, r0
   14d9c:	mov	r0, #1
   14da0:	movt	r2, #1
   14da4:	pop	{fp, lr}
   14da8:	b	11074 <__printf_chk@plt>
   14dac:	push	{r4, r5, r6, sl, fp, lr}
   14db0:	add	fp, sp, #16
   14db4:	mov	r4, r2
   14db8:	mov	r5, r1
   14dbc:	mov	r6, r0
   14dc0:	bl	1559c <_obstack_memory_used@@Base+0x2c48>
   14dc4:	cmp	r0, #0
   14dc8:	popne	{r4, r5, r6, sl, fp, pc}
   14dcc:	cmp	r6, #0
   14dd0:	beq	14de4 <_obstack_memory_used@@Base+0x2490>
   14dd4:	cmp	r5, #0
   14dd8:	cmpne	r4, #0
   14ddc:	bne	14de4 <_obstack_memory_used@@Base+0x2490>
   14de0:	pop	{r4, r5, r6, sl, fp, pc}
   14de4:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14de8:	push	{r4, r5, r6, sl, fp, lr}
   14dec:	add	fp, sp, #16
   14df0:	mov	r4, r2
   14df4:	mov	r5, r1
   14df8:	mov	r6, r0
   14dfc:	bl	1559c <_obstack_memory_used@@Base+0x2c48>
   14e00:	cmp	r0, #0
   14e04:	popne	{r4, r5, r6, sl, fp, pc}
   14e08:	cmp	r6, #0
   14e0c:	beq	14e20 <_obstack_memory_used@@Base+0x24cc>
   14e10:	cmp	r5, #0
   14e14:	cmpne	r4, #0
   14e18:	bne	14e20 <_obstack_memory_used@@Base+0x24cc>
   14e1c:	pop	{r4, r5, r6, sl, fp, pc}
   14e20:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14e24:	push	{fp, lr}
   14e28:	mov	fp, sp
   14e2c:	bl	153f8 <_obstack_memory_used@@Base+0x2aa4>
   14e30:	cmp	r0, #0
   14e34:	popne	{fp, pc}
   14e38:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14e3c:	push	{fp, lr}
   14e40:	mov	fp, sp
   14e44:	bl	153f8 <_obstack_memory_used@@Base+0x2aa4>
   14e48:	cmp	r0, #0
   14e4c:	popne	{fp, pc}
   14e50:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14e54:	push	{fp, lr}
   14e58:	mov	fp, sp
   14e5c:	bl	153f8 <_obstack_memory_used@@Base+0x2aa4>
   14e60:	cmp	r0, #0
   14e64:	popne	{fp, pc}
   14e68:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14e6c:	push	{r4, r5, fp, lr}
   14e70:	add	fp, sp, #8
   14e74:	mov	r4, r1
   14e78:	mov	r5, r0
   14e7c:	bl	15428 <_obstack_memory_used@@Base+0x2ad4>
   14e80:	cmp	r0, #0
   14e84:	popne	{r4, r5, fp, pc}
   14e88:	cmp	r5, #0
   14e8c:	beq	14e9c <_obstack_memory_used@@Base+0x2548>
   14e90:	cmp	r4, #0
   14e94:	bne	14e9c <_obstack_memory_used@@Base+0x2548>
   14e98:	pop	{r4, r5, fp, pc}
   14e9c:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14ea0:	push	{fp, lr}
   14ea4:	mov	fp, sp
   14ea8:	cmp	r1, #0
   14eac:	orreq	r1, r1, #1
   14eb0:	bl	15428 <_obstack_memory_used@@Base+0x2ad4>
   14eb4:	cmp	r0, #0
   14eb8:	popne	{fp, pc}
   14ebc:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14ec0:	push	{fp, lr}
   14ec4:	mov	fp, sp
   14ec8:	clz	r3, r2
   14ecc:	lsr	ip, r3, #5
   14ed0:	clz	r3, r1
   14ed4:	lsr	r3, r3, #5
   14ed8:	orrs	r3, r3, ip
   14edc:	movwne	r1, #1
   14ee0:	movwne	r2, #1
   14ee4:	bl	1559c <_obstack_memory_used@@Base+0x2c48>
   14ee8:	cmp	r0, #0
   14eec:	popne	{fp, pc}
   14ef0:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14ef4:	push	{fp, lr}
   14ef8:	mov	fp, sp
   14efc:	mov	r2, r1
   14f00:	mov	r1, r0
   14f04:	mov	r0, #0
   14f08:	bl	1559c <_obstack_memory_used@@Base+0x2c48>
   14f0c:	cmp	r0, #0
   14f10:	popne	{fp, pc}
   14f14:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14f18:	push	{fp, lr}
   14f1c:	mov	fp, sp
   14f20:	mov	r2, r1
   14f24:	mov	r1, r0
   14f28:	clz	r0, r2
   14f2c:	clz	r3, r1
   14f30:	lsr	r0, r0, #5
   14f34:	lsr	r3, r3, #5
   14f38:	orrs	r0, r3, r0
   14f3c:	mov	r0, #0
   14f40:	movwne	r1, #1
   14f44:	movwne	r2, #1
   14f48:	bl	1559c <_obstack_memory_used@@Base+0x2c48>
   14f4c:	cmp	r0, #0
   14f50:	popne	{fp, pc}
   14f54:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14f58:	push	{r4, r5, r6, sl, fp, lr}
   14f5c:	add	fp, sp, #16
   14f60:	ldr	r5, [r1]
   14f64:	mov	r4, r1
   14f68:	mov	r6, r0
   14f6c:	cmp	r0, #0
   14f70:	beq	14f88 <_obstack_memory_used@@Base+0x2634>
   14f74:	mov	r0, #1
   14f78:	add	r0, r0, r5, lsr #1
   14f7c:	adds	r5, r5, r0
   14f80:	bcc	14f90 <_obstack_memory_used@@Base+0x263c>
   14f84:	b	14fcc <_obstack_memory_used@@Base+0x2678>
   14f88:	cmp	r5, #0
   14f8c:	movweq	r5, #64	; 0x40
   14f90:	mov	r0, r6
   14f94:	mov	r1, r5
   14f98:	mov	r2, #1
   14f9c:	bl	1559c <_obstack_memory_used@@Base+0x2c48>
   14fa0:	cmp	r5, #0
   14fa4:	mov	r1, r5
   14fa8:	movwne	r1, #1
   14fac:	cmp	r0, #0
   14fb0:	bne	14fc4 <_obstack_memory_used@@Base+0x2670>
   14fb4:	clz	r2, r6
   14fb8:	lsr	r2, r2, #5
   14fbc:	orrs	r1, r2, r1
   14fc0:	bne	14fcc <_obstack_memory_used@@Base+0x2678>
   14fc4:	str	r5, [r4]
   14fc8:	pop	{r4, r5, r6, sl, fp, pc}
   14fcc:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   14fd0:	push	{r4, r5, r6, r7, fp, lr}
   14fd4:	add	fp, sp, #16
   14fd8:	ldr	r5, [r1]
   14fdc:	mov	r6, r2
   14fe0:	mov	r4, r1
   14fe4:	mov	r7, r0
   14fe8:	cmp	r0, #0
   14fec:	beq	15004 <_obstack_memory_used@@Base+0x26b0>
   14ff0:	mov	r0, #1
   14ff4:	add	r0, r0, r5, lsr #1
   14ff8:	adds	r5, r5, r0
   14ffc:	bcc	1501c <_obstack_memory_used@@Base+0x26c8>
   15000:	b	15050 <_obstack_memory_used@@Base+0x26fc>
   15004:	cmp	r5, #0
   15008:	bne	1501c <_obstack_memory_used@@Base+0x26c8>
   1500c:	mov	r0, #64	; 0x40
   15010:	cmp	r6, #64	; 0x40
   15014:	udiv	r5, r0, r6
   15018:	addhi	r5, r5, #1
   1501c:	mov	r0, r7
   15020:	mov	r1, r5
   15024:	mov	r2, r6
   15028:	bl	1559c <_obstack_memory_used@@Base+0x2c48>
   1502c:	cmp	r0, #0
   15030:	bne	15048 <_obstack_memory_used@@Base+0x26f4>
   15034:	cmp	r7, #0
   15038:	beq	15050 <_obstack_memory_used@@Base+0x26fc>
   1503c:	cmp	r6, #0
   15040:	cmpne	r5, #0
   15044:	bne	15050 <_obstack_memory_used@@Base+0x26fc>
   15048:	str	r5, [r4]
   1504c:	pop	{r4, r5, r6, r7, fp, pc}
   15050:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   15054:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15058:	add	fp, sp, #24
   1505c:	mov	r8, r1
   15060:	ldr	r1, [r1]
   15064:	mov	r5, r0
   15068:	add	r0, r1, r1, asr #1
   1506c:	cmp	r0, r1
   15070:	mvnvs	r0, #-2147483648	; 0x80000000
   15074:	cmp	r0, r3
   15078:	mov	r7, r0
   1507c:	movgt	r7, r3
   15080:	cmn	r3, #1
   15084:	movle	r7, r0
   15088:	ldr	r0, [fp, #8]
   1508c:	cmn	r0, #1
   15090:	ble	150b8 <_obstack_memory_used@@Base+0x2764>
   15094:	cmp	r0, #0
   15098:	beq	1510c <_obstack_memory_used@@Base+0x27b8>
   1509c:	cmn	r7, #1
   150a0:	ble	150e0 <_obstack_memory_used@@Base+0x278c>
   150a4:	mvn	r4, #-2147483648	; 0x80000000
   150a8:	udiv	r6, r4, r0
   150ac:	cmp	r6, r7
   150b0:	bge	1510c <_obstack_memory_used@@Base+0x27b8>
   150b4:	b	1511c <_obstack_memory_used@@Base+0x27c8>
   150b8:	cmn	r7, #1
   150bc:	ble	150fc <_obstack_memory_used@@Base+0x27a8>
   150c0:	cmn	r0, #1
   150c4:	beq	1510c <_obstack_memory_used@@Base+0x27b8>
   150c8:	mov	r6, #-2147483648	; 0x80000000
   150cc:	mvn	r4, #-2147483648	; 0x80000000
   150d0:	sdiv	r6, r6, r0
   150d4:	cmp	r6, r7
   150d8:	bge	1510c <_obstack_memory_used@@Base+0x27b8>
   150dc:	b	1511c <_obstack_memory_used@@Base+0x27c8>
   150e0:	beq	1510c <_obstack_memory_used@@Base+0x27b8>
   150e4:	mov	r6, #-2147483648	; 0x80000000
   150e8:	mvn	r4, #-2147483648	; 0x80000000
   150ec:	sdiv	r6, r6, r7
   150f0:	cmp	r6, r0
   150f4:	bge	1510c <_obstack_memory_used@@Base+0x27b8>
   150f8:	b	1511c <_obstack_memory_used@@Base+0x27c8>
   150fc:	mvn	r4, #-2147483648	; 0x80000000
   15100:	sdiv	r6, r4, r0
   15104:	cmp	r7, r6
   15108:	blt	1511c <_obstack_memory_used@@Base+0x27c8>
   1510c:	mul	r6, r7, r0
   15110:	mov	r4, #64	; 0x40
   15114:	cmp	r6, #63	; 0x3f
   15118:	bgt	15124 <_obstack_memory_used@@Base+0x27d0>
   1511c:	sdiv	r7, r4, r0
   15120:	mul	r6, r7, r0
   15124:	cmp	r5, #0
   15128:	moveq	r4, #0
   1512c:	streq	r4, [r8]
   15130:	sub	r4, r7, r1
   15134:	cmp	r4, r2
   15138:	bge	151e4 <_obstack_memory_used@@Base+0x2890>
   1513c:	add	r7, r1, r2
   15140:	mov	r6, #0
   15144:	mov	r2, #0
   15148:	cmp	r7, r3
   1514c:	movwgt	r6, #1
   15150:	cmn	r3, #1
   15154:	movwgt	r2, #1
   15158:	cmp	r7, r1
   1515c:	bvs	15218 <_obstack_memory_used@@Base+0x28c4>
   15160:	ands	r1, r2, r6
   15164:	bne	15218 <_obstack_memory_used@@Base+0x28c4>
   15168:	cmn	r0, #1
   1516c:	ble	15194 <_obstack_memory_used@@Base+0x2840>
   15170:	cmp	r0, #0
   15174:	beq	151e0 <_obstack_memory_used@@Base+0x288c>
   15178:	cmn	r7, #1
   1517c:	ble	151b8 <_obstack_memory_used@@Base+0x2864>
   15180:	mvn	r1, #-2147483648	; 0x80000000
   15184:	udiv	r1, r1, r0
   15188:	cmp	r1, r7
   1518c:	bge	151e0 <_obstack_memory_used@@Base+0x288c>
   15190:	b	15218 <_obstack_memory_used@@Base+0x28c4>
   15194:	cmn	r7, #1
   15198:	ble	151d0 <_obstack_memory_used@@Base+0x287c>
   1519c:	cmn	r0, #1
   151a0:	beq	151e0 <_obstack_memory_used@@Base+0x288c>
   151a4:	mov	r1, #-2147483648	; 0x80000000
   151a8:	sdiv	r1, r1, r0
   151ac:	cmp	r1, r7
   151b0:	bge	151e0 <_obstack_memory_used@@Base+0x288c>
   151b4:	b	15218 <_obstack_memory_used@@Base+0x28c4>
   151b8:	beq	151e0 <_obstack_memory_used@@Base+0x288c>
   151bc:	mov	r1, #-2147483648	; 0x80000000
   151c0:	sdiv	r1, r1, r7
   151c4:	cmp	r1, r0
   151c8:	bge	151e0 <_obstack_memory_used@@Base+0x288c>
   151cc:	b	15218 <_obstack_memory_used@@Base+0x28c4>
   151d0:	mvn	r1, #-2147483648	; 0x80000000
   151d4:	sdiv	r1, r1, r0
   151d8:	cmp	r7, r1
   151dc:	blt	15218 <_obstack_memory_used@@Base+0x28c4>
   151e0:	mul	r6, r7, r0
   151e4:	mov	r0, r5
   151e8:	mov	r1, r6
   151ec:	bl	15428 <_obstack_memory_used@@Base+0x2ad4>
   151f0:	cmp	r6, #0
   151f4:	movwne	r6, #1
   151f8:	cmp	r0, #0
   151fc:	bne	15210 <_obstack_memory_used@@Base+0x28bc>
   15200:	clz	r1, r5
   15204:	lsr	r1, r1, #5
   15208:	orrs	r1, r1, r6
   1520c:	bne	15218 <_obstack_memory_used@@Base+0x28c4>
   15210:	str	r7, [r8]
   15214:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15218:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   1521c:	push	{fp, lr}
   15220:	mov	fp, sp
   15224:	mov	r1, #1
   15228:	bl	153a4 <_obstack_memory_used@@Base+0x2a50>
   1522c:	cmp	r0, #0
   15230:	popne	{fp, pc}
   15234:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   15238:	push	{fp, lr}
   1523c:	mov	fp, sp
   15240:	bl	153a4 <_obstack_memory_used@@Base+0x2a50>
   15244:	cmp	r0, #0
   15248:	popne	{fp, pc}
   1524c:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   15250:	push	{fp, lr}
   15254:	mov	fp, sp
   15258:	mov	r1, #1
   1525c:	bl	153a4 <_obstack_memory_used@@Base+0x2a50>
   15260:	cmp	r0, #0
   15264:	popne	{fp, pc}
   15268:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   1526c:	push	{fp, lr}
   15270:	mov	fp, sp
   15274:	bl	153a4 <_obstack_memory_used@@Base+0x2a50>
   15278:	cmp	r0, #0
   1527c:	popne	{fp, pc}
   15280:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   15284:	push	{r4, r5, fp, lr}
   15288:	add	fp, sp, #8
   1528c:	mov	r5, r0
   15290:	mov	r0, r1
   15294:	mov	r4, r1
   15298:	bl	153f8 <_obstack_memory_used@@Base+0x2aa4>
   1529c:	cmp	r0, #0
   152a0:	beq	152b4 <_obstack_memory_used@@Base+0x2960>
   152a4:	mov	r1, r5
   152a8:	mov	r2, r4
   152ac:	pop	{r4, r5, fp, lr}
   152b0:	b	10f00 <memcpy@plt>
   152b4:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   152b8:	push	{r4, r5, fp, lr}
   152bc:	add	fp, sp, #8
   152c0:	mov	r5, r0
   152c4:	mov	r0, r1
   152c8:	mov	r4, r1
   152cc:	bl	153f8 <_obstack_memory_used@@Base+0x2aa4>
   152d0:	cmp	r0, #0
   152d4:	beq	152e8 <_obstack_memory_used@@Base+0x2994>
   152d8:	mov	r1, r5
   152dc:	mov	r2, r4
   152e0:	pop	{r4, r5, fp, lr}
   152e4:	b	10f00 <memcpy@plt>
   152e8:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   152ec:	push	{r4, r5, fp, lr}
   152f0:	add	fp, sp, #8
   152f4:	mov	r5, r0
   152f8:	add	r0, r1, #1
   152fc:	mov	r4, r1
   15300:	bl	153f8 <_obstack_memory_used@@Base+0x2aa4>
   15304:	cmp	r0, #0
   15308:	beq	15324 <_obstack_memory_used@@Base+0x29d0>
   1530c:	mov	r1, #0
   15310:	mov	r2, r4
   15314:	strb	r1, [r0, r4]
   15318:	mov	r1, r5
   1531c:	pop	{r4, r5, fp, lr}
   15320:	b	10f00 <memcpy@plt>
   15324:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   15328:	push	{r4, r5, fp, lr}
   1532c:	add	fp, sp, #8
   15330:	mov	r4, r0
   15334:	bl	11044 <strlen@plt>
   15338:	add	r5, r0, #1
   1533c:	mov	r0, r5
   15340:	bl	153f8 <_obstack_memory_used@@Base+0x2aa4>
   15344:	cmp	r0, #0
   15348:	beq	1535c <_obstack_memory_used@@Base+0x2a08>
   1534c:	mov	r1, r4
   15350:	mov	r2, r5
   15354:	pop	{r4, r5, fp, lr}
   15358:	b	10f00 <memcpy@plt>
   1535c:	bl	15360 <_obstack_memory_used@@Base+0x2a0c>
   15360:	push	{fp, lr}
   15364:	mov	fp, sp
   15368:	movw	r0, #32996	; 0x80e4
   1536c:	movw	r1, #29044	; 0x7174
   15370:	mov	r2, #5
   15374:	movt	r0, #2
   15378:	movt	r1, #1
   1537c:	ldr	r4, [r0]
   15380:	mov	r0, #0
   15384:	bl	10f24 <dcgettext@plt>
   15388:	movw	r2, #29031	; 0x7167
   1538c:	mov	r3, r0
   15390:	mov	r0, r4
   15394:	mov	r1, #0
   15398:	movt	r2, #1
   1539c:	bl	10f9c <error@plt>
   153a0:	bl	110ec <abort@plt>
   153a4:	clz	r2, r1
   153a8:	clz	r3, r0
   153ac:	lsr	r2, r2, #5
   153b0:	lsr	r3, r3, #5
   153b4:	orrs	r2, r3, r2
   153b8:	movwne	r1, #1
   153bc:	movwne	r0, #1
   153c0:	cmp	r1, #0
   153c4:	beq	153f4 <_obstack_memory_used@@Base+0x2aa0>
   153c8:	mvn	r2, #-2147483648	; 0x80000000
   153cc:	udiv	r2, r2, r1
   153d0:	cmp	r2, r0
   153d4:	bcs	153f4 <_obstack_memory_used@@Base+0x2aa0>
   153d8:	push	{fp, lr}
   153dc:	mov	fp, sp
   153e0:	bl	11050 <__errno_location@plt>
   153e4:	mov	r1, #12
   153e8:	str	r1, [r0]
   153ec:	mov	r0, #0
   153f0:	pop	{fp, pc}
   153f4:	b	10eac <calloc@plt>
   153f8:	cmp	r0, #0
   153fc:	movweq	r0, #1
   15400:	cmn	r0, #1
   15404:	ble	1540c <_obstack_memory_used@@Base+0x2ab8>
   15408:	b	10fd8 <malloc@plt>
   1540c:	push	{fp, lr}
   15410:	mov	fp, sp
   15414:	bl	11050 <__errno_location@plt>
   15418:	mov	r1, #12
   1541c:	str	r1, [r0]
   15420:	mov	r0, #0
   15424:	pop	{fp, pc}
   15428:	push	{fp, lr}
   1542c:	mov	fp, sp
   15430:	cmp	r0, #0
   15434:	beq	15450 <_obstack_memory_used@@Base+0x2afc>
   15438:	cmp	r1, #0
   1543c:	beq	1545c <_obstack_memory_used@@Base+0x2b08>
   15440:	cmn	r1, #1
   15444:	ble	15468 <_obstack_memory_used@@Base+0x2b14>
   15448:	pop	{fp, lr}
   1544c:	b	10f3c <realloc@plt>
   15450:	mov	r0, r1
   15454:	pop	{fp, lr}
   15458:	b	153f8 <_obstack_memory_used@@Base+0x2aa4>
   1545c:	bl	122b8 <close@plt+0x11c0>
   15460:	mov	r0, #0
   15464:	pop	{fp, pc}
   15468:	bl	11050 <__errno_location@plt>
   1546c:	mov	r1, #12
   15470:	str	r1, [r0]
   15474:	mov	r0, #0
   15478:	pop	{fp, pc}
   1547c:	push	{r4, r5, r6, sl, fp, lr}
   15480:	add	fp, sp, #16
   15484:	mov	r4, r0
   15488:	bl	10f84 <__fpending@plt>
   1548c:	ldr	r6, [r4]
   15490:	mov	r5, r0
   15494:	mov	r0, r4
   15498:	bl	121c0 <close@plt+0x10c8>
   1549c:	tst	r6, #32
   154a0:	bne	154d8 <_obstack_memory_used@@Base+0x2b84>
   154a4:	cmp	r0, #0
   154a8:	mov	r4, r0
   154ac:	mvnne	r4, #0
   154b0:	cmp	r5, #0
   154b4:	bne	154e4 <_obstack_memory_used@@Base+0x2b90>
   154b8:	cmp	r0, #0
   154bc:	beq	154e4 <_obstack_memory_used@@Base+0x2b90>
   154c0:	bl	11050 <__errno_location@plt>
   154c4:	ldr	r0, [r0]
   154c8:	subs	r4, r0, #9
   154cc:	mvnne	r4, #0
   154d0:	mov	r0, r4
   154d4:	pop	{r4, r5, r6, sl, fp, pc}
   154d8:	mvn	r4, #0
   154dc:	cmp	r0, #0
   154e0:	beq	154ec <_obstack_memory_used@@Base+0x2b98>
   154e4:	mov	r0, r4
   154e8:	pop	{r4, r5, r6, sl, fp, pc}
   154ec:	bl	11050 <__errno_location@plt>
   154f0:	mov	r1, #0
   154f4:	str	r1, [r0]
   154f8:	mov	r0, r4
   154fc:	pop	{r4, r5, r6, sl, fp, pc}
   15500:	push	{fp, lr}
   15504:	mov	fp, sp
   15508:	mov	r0, #14
   1550c:	bl	110c8 <nl_langinfo@plt>
   15510:	movw	r1, #23715	; 0x5ca3
   15514:	cmp	r0, #0
   15518:	movt	r1, #1
   1551c:	movne	r1, r0
   15520:	movw	r0, #30088	; 0x7588
   15524:	ldrb	r2, [r1]
   15528:	movt	r0, #1
   1552c:	cmp	r2, #0
   15530:	movne	r0, r1
   15534:	pop	{fp, pc}
   15538:	push	{r4, r5, r6, r7, fp, lr}
   1553c:	add	fp, sp, #16
   15540:	sub	sp, sp, #8
   15544:	cmp	r0, #0
   15548:	add	r5, sp, #4
   1554c:	mov	r7, r2
   15550:	mov	r4, r1
   15554:	movne	r5, r0
   15558:	mov	r0, r5
   1555c:	bl	10f90 <mbrtowc@plt>
   15560:	mov	r6, r0
   15564:	cmp	r7, #0
   15568:	beq	15590 <_obstack_memory_used@@Base+0x2c3c>
   1556c:	cmn	r6, #2
   15570:	bcc	15590 <_obstack_memory_used@@Base+0x2c3c>
   15574:	mov	r0, #0
   15578:	bl	155d8 <_obstack_memory_used@@Base+0x2c84>
   1557c:	cmp	r0, #0
   15580:	bne	15590 <_obstack_memory_used@@Base+0x2c3c>
   15584:	ldrb	r0, [r4]
   15588:	mov	r6, #1
   1558c:	str	r0, [r5]
   15590:	mov	r0, r6
   15594:	sub	sp, fp, #16
   15598:	pop	{r4, r5, r6, r7, fp, pc}
   1559c:	cmp	r2, #0
   155a0:	beq	155d0 <_obstack_memory_used@@Base+0x2c7c>
   155a4:	mvn	r3, #0
   155a8:	udiv	r3, r3, r2
   155ac:	cmp	r3, r1
   155b0:	bcs	155d0 <_obstack_memory_used@@Base+0x2c7c>
   155b4:	push	{fp, lr}
   155b8:	mov	fp, sp
   155bc:	bl	11050 <__errno_location@plt>
   155c0:	mov	r1, #12
   155c4:	str	r1, [r0]
   155c8:	mov	r0, #0
   155cc:	pop	{fp, pc}
   155d0:	mul	r1, r2, r1
   155d4:	b	15428 <_obstack_memory_used@@Base+0x2ad4>
   155d8:	push	{r4, sl, fp, lr}
   155dc:	add	fp, sp, #8
   155e0:	sub	sp, sp, #264	; 0x108
   155e4:	add	r1, sp, #7
   155e8:	movw	r2, #257	; 0x101
   155ec:	bl	15644 <_obstack_memory_used@@Base+0x2cf0>
   155f0:	mov	r4, #0
   155f4:	cmp	r0, #0
   155f8:	bne	15638 <_obstack_memory_used@@Base+0x2ce4>
   155fc:	movw	r1, #23992	; 0x5db8
   15600:	add	r0, sp, #7
   15604:	mov	r2, #2
   15608:	movt	r1, #1
   1560c:	bl	11038 <bcmp@plt>
   15610:	cmp	r0, #0
   15614:	beq	15638 <_obstack_memory_used@@Base+0x2ce4>
   15618:	movw	r1, #30094	; 0x758e
   1561c:	add	r0, sp, #7
   15620:	mov	r2, #6
   15624:	movt	r1, #1
   15628:	bl	11038 <bcmp@plt>
   1562c:	cmp	r0, #0
   15630:	mov	r4, r0
   15634:	movwne	r4, #1
   15638:	mov	r0, r4
   1563c:	sub	sp, fp, #8
   15640:	pop	{r4, sl, fp, pc}
   15644:	push	{r4, r5, r6, r7, fp, lr}
   15648:	add	fp, sp, #16
   1564c:	mov	r4, r1
   15650:	mov	r1, #0
   15654:	mov	r6, r2
   15658:	bl	110b0 <setlocale@plt>
   1565c:	cmp	r0, #0
   15660:	beq	15690 <_obstack_memory_used@@Base+0x2d3c>
   15664:	mov	r7, r0
   15668:	bl	11044 <strlen@plt>
   1566c:	cmp	r0, r6
   15670:	bcs	156ac <_obstack_memory_used@@Base+0x2d58>
   15674:	add	r2, r0, #1
   15678:	mov	r0, r4
   1567c:	mov	r1, r7
   15680:	bl	10f00 <memcpy@plt>
   15684:	mov	r5, #0
   15688:	mov	r0, r5
   1568c:	pop	{r4, r5, r6, r7, fp, pc}
   15690:	mov	r5, #22
   15694:	cmp	r6, #0
   15698:	beq	156d4 <_obstack_memory_used@@Base+0x2d80>
   1569c:	mov	r0, #0
   156a0:	strb	r0, [r4]
   156a4:	mov	r0, r5
   156a8:	pop	{r4, r5, r6, r7, fp, pc}
   156ac:	mov	r5, #34	; 0x22
   156b0:	cmp	r6, #0
   156b4:	beq	156d4 <_obstack_memory_used@@Base+0x2d80>
   156b8:	sub	r6, r6, #1
   156bc:	mov	r0, r4
   156c0:	mov	r1, r7
   156c4:	mov	r2, r6
   156c8:	bl	10f00 <memcpy@plt>
   156cc:	mov	r0, #0
   156d0:	strb	r0, [r4, r6]
   156d4:	mov	r0, r5
   156d8:	pop	{r4, r5, r6, r7, fp, pc}
   156dc:	mov	r1, #0
   156e0:	b	110b0 <setlocale@plt>
   156e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156e8:	mov	r7, r0
   156ec:	ldr	r6, [pc, #72]	; 1573c <_obstack_memory_used@@Base+0x2de8>
   156f0:	ldr	r5, [pc, #72]	; 15740 <_obstack_memory_used@@Base+0x2dec>
   156f4:	add	r6, pc, r6
   156f8:	add	r5, pc, r5
   156fc:	sub	r6, r6, r5
   15700:	mov	r8, r1
   15704:	mov	r9, r2
   15708:	bl	10e8c <calloc@plt-0x20>
   1570c:	asrs	r6, r6, #2
   15710:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15714:	mov	r4, #0
   15718:	add	r4, r4, #1
   1571c:	ldr	r3, [r5], #4
   15720:	mov	r2, r9
   15724:	mov	r1, r8
   15728:	mov	r0, r7
   1572c:	blx	r3
   15730:	cmp	r6, r4
   15734:	bne	15718 <_obstack_memory_used@@Base+0x2dc4>
   15738:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1573c:	andeq	r2, r1, r0, lsl r8
   15740:	andeq	r2, r1, r8, lsl #16
   15744:	bx	lr
   15748:	ldr	r3, [pc, #12]	; 1575c <_obstack_memory_used@@Base+0x2e08>
   1574c:	mov	r1, #0
   15750:	add	r3, pc, r3
   15754:	ldr	r2, [r3]
   15758:	b	1105c <__cxa_atexit@plt>
   1575c:	andeq	r2, r1, r4, lsl #19

Disassembly of section .fini:

00015760 <.fini>:
   15760:	push	{r3, lr}
   15764:	pop	{r3, pc}
