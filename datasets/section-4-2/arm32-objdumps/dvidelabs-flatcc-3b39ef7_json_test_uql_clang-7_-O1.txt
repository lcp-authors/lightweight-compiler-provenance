
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf32-littlearm


Disassembly of section .init:

00014e10 <.init>:
   14e10:	push	{r3, lr}
   14e14:	bl	14f8c <_start@@Base+0x3c>
   14e18:	pop	{r3, pc}

Disassembly of section .plt:

00014e1c <raise@plt-0x14>:
   14e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   14e20:	ldr	lr, [pc, #4]	; 14e2c <raise@plt-0x4>
   14e24:	add	lr, pc, lr
   14e28:	ldr	pc, [lr, #8]!
   14e2c:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>

00014e30 <raise@plt>:
   14e30:	add	ip, pc, #0, 12
   14e34:	add	ip, ip, #52, 20	; 0x34000
   14e38:	ldr	pc, [ip, #468]!	; 0x1d4

00014e3c <strcmp@plt>:
   14e3c:	add	ip, pc, #0, 12
   14e40:	add	ip, ip, #52, 20	; 0x34000
   14e44:	ldr	pc, [ip, #460]!	; 0x1cc

00014e48 <memmove@plt>:
   14e48:	add	ip, pc, #0, 12
   14e4c:	add	ip, ip, #52, 20	; 0x34000
   14e50:	ldr	pc, [ip, #452]!	; 0x1c4

00014e54 <free@plt>:
   14e54:	add	ip, pc, #0, 12
   14e58:	add	ip, ip, #52, 20	; 0x34000
   14e5c:	ldr	pc, [ip, #444]!	; 0x1bc

00014e60 <memcpy@plt>:
   14e60:	add	ip, pc, #0, 12
   14e64:	add	ip, ip, #52, 20	; 0x34000
   14e68:	ldr	pc, [ip, #436]!	; 0x1b4

00014e6c <memcmp@plt>:
   14e6c:	add	ip, pc, #0, 12
   14e70:	add	ip, ip, #52, 20	; 0x34000
   14e74:	ldr	pc, [ip, #428]!	; 0x1ac

00014e78 <__isinff@plt>:
   14e78:	add	ip, pc, #0, 12
   14e7c:	add	ip, ip, #52, 20	; 0x34000
   14e80:	ldr	pc, [ip, #420]!	; 0x1a4

00014e84 <__isinf@plt>:
   14e84:	add	ip, pc, #0, 12
   14e88:	add	ip, ip, #52, 20	; 0x34000
   14e8c:	ldr	pc, [ip, #412]!	; 0x19c

00014e90 <realloc@plt>:
   14e90:	add	ip, pc, #0, 12
   14e94:	add	ip, ip, #52, 20	; 0x34000
   14e98:	ldr	pc, [ip, #404]!	; 0x194

00014e9c <fwrite@plt>:
   14e9c:	add	ip, pc, #0, 12
   14ea0:	add	ip, ip, #52, 20	; 0x34000
   14ea4:	ldr	pc, [ip, #396]!	; 0x18c

00014ea8 <malloc@plt>:
   14ea8:	add	ip, pc, #0, 12
   14eac:	add	ip, ip, #52, 20	; 0x34000
   14eb0:	ldr	pc, [ip, #388]!	; 0x184

00014eb4 <__libc_start_main@plt>:
   14eb4:	add	ip, pc, #0, 12
   14eb8:	add	ip, ip, #52, 20	; 0x34000
   14ebc:	ldr	pc, [ip, #380]!	; 0x17c

00014ec0 <__gmon_start__@plt>:
   14ec0:	add	ip, pc, #0, 12
   14ec4:	add	ip, ip, #52, 20	; 0x34000
   14ec8:	ldr	pc, [ip, #372]!	; 0x174

00014ecc <strlen@plt>:
   14ecc:	add	ip, pc, #0, 12
   14ed0:	add	ip, ip, #52, 20	; 0x34000
   14ed4:	ldr	pc, [ip, #364]!	; 0x16c

00014ed8 <fprintf@plt>:
   14ed8:	add	ip, pc, #0, 12
   14edc:	add	ip, ip, #52, 20	; 0x34000
   14ee0:	ldr	pc, [ip, #356]!	; 0x164

00014ee4 <posix_memalign@plt>:
   14ee4:	add	ip, pc, #0, 12
   14ee8:	add	ip, ip, #52, 20	; 0x34000
   14eec:	ldr	pc, [ip, #348]!	; 0x15c

00014ef0 <memset@plt>:
   14ef0:	add	ip, pc, #0, 12
   14ef4:	add	ip, ip, #52, 20	; 0x34000
   14ef8:	ldr	pc, [ip, #340]!	; 0x154

00014efc <strncpy@plt>:
   14efc:	add	ip, pc, #0, 12
   14f00:	add	ip, ip, #52, 20	; 0x34000
   14f04:	ldr	pc, [ip, #332]!	; 0x14c

00014f08 <strtod@plt>:
   14f08:	add	ip, pc, #0, 12
   14f0c:	add	ip, ip, #52, 20	; 0x34000
   14f10:	ldr	pc, [ip, #324]!	; 0x144

00014f14 <memchr@plt>:
   14f14:	add	ip, pc, #0, 12
   14f18:	add	ip, ip, #52, 20	; 0x34000
   14f1c:	ldr	pc, [ip, #316]!	; 0x13c

00014f20 <fputc@plt>:
   14f20:	add	ip, pc, #0, 12
   14f24:	add	ip, ip, #52, 20	; 0x34000
   14f28:	ldr	pc, [ip, #308]!	; 0x134

00014f2c <sprintf@plt>:
   14f2c:	add	ip, pc, #0, 12
   14f30:	add	ip, ip, #52, 20	; 0x34000
   14f34:	ldr	pc, [ip, #300]!	; 0x12c

00014f38 <abort@plt>:
   14f38:	add	ip, pc, #0, 12
   14f3c:	add	ip, ip, #52, 20	; 0x34000
   14f40:	ldr	pc, [ip, #292]!	; 0x124

00014f44 <__assert_fail@plt>:
   14f44:	add	ip, pc, #0, 12
   14f48:	add	ip, ip, #52, 20	; 0x34000
   14f4c:	ldr	pc, [ip, #284]!	; 0x11c

Disassembly of section .text:

00014f50 <_start@@Base>:
   14f50:	mov	fp, #0
   14f54:	mov	lr, #0
   14f58:	pop	{r1}		; (ldr r1, [sp], #4)
   14f5c:	mov	r2, sp
   14f60:	push	{r2}		; (str r2, [sp, #-4]!)
   14f64:	push	{r0}		; (str r0, [sp, #-4]!)
   14f68:	ldr	ip, [pc, #16]	; 14f80 <_start@@Base+0x30>
   14f6c:	push	{ip}		; (str ip, [sp, #-4]!)
   14f70:	ldr	r0, [pc, #12]	; 14f84 <_start@@Base+0x34>
   14f74:	ldr	r3, [pc, #12]	; 14f88 <_start@@Base+0x38>
   14f78:	bl	14eb4 <__libc_start_main@plt>
   14f7c:	bl	14f38 <abort@plt>
   14f80:	andeq	r1, r3, ip, lsr sp
   14f84:	ldrdeq	r6, [r1], -ip
   14f88:	ldrdeq	r1, [r3], -ip
   14f8c:	ldr	r3, [pc, #20]	; 14fa8 <_start@@Base+0x58>
   14f90:	ldr	r2, [pc, #20]	; 14fac <_start@@Base+0x5c>
   14f94:	add	r3, pc, r3
   14f98:	ldr	r2, [r3, r2]
   14f9c:	cmp	r2, #0
   14fa0:	bxeq	lr
   14fa4:	b	14ec0 <__gmon_start__@plt>
   14fa8:	andeq	r4, r3, r4, rrx
   14fac:	andeq	r0, r0, ip, rrx
   14fb0:	ldr	r0, [pc, #24]	; 14fd0 <_start@@Base+0x80>
   14fb4:	ldr	r3, [pc, #24]	; 14fd4 <_start@@Base+0x84>
   14fb8:	cmp	r3, r0
   14fbc:	bxeq	lr
   14fc0:	ldr	r3, [pc, #16]	; 14fd8 <_start@@Base+0x88>
   14fc4:	cmp	r3, #0
   14fc8:	bxeq	lr
   14fcc:	bx	r3
   14fd0:	andeq	r9, r4, r4, asr #6
   14fd4:	andeq	r9, r4, r4, asr #6
   14fd8:	andeq	r0, r0, r0
   14fdc:	ldr	r0, [pc, #36]	; 15008 <_start@@Base+0xb8>
   14fe0:	ldr	r1, [pc, #36]	; 1500c <_start@@Base+0xbc>
   14fe4:	sub	r1, r1, r0
   14fe8:	asr	r1, r1, #2
   14fec:	add	r1, r1, r1, lsr #31
   14ff0:	asrs	r1, r1, #1
   14ff4:	bxeq	lr
   14ff8:	ldr	r3, [pc, #16]	; 15010 <_start@@Base+0xc0>
   14ffc:	cmp	r3, #0
   15000:	bxeq	lr
   15004:	bx	r3
   15008:	andeq	r9, r4, r4, asr #6
   1500c:	andeq	r9, r4, r4, asr #6
   15010:	andeq	r0, r0, r0
   15014:	push	{r4, lr}
   15018:	ldr	r4, [pc, #24]	; 15038 <_start@@Base+0xe8>
   1501c:	ldrb	r3, [r4]
   15020:	cmp	r3, #0
   15024:	popne	{r4, pc}
   15028:	bl	14fb0 <_start@@Base+0x60>
   1502c:	mov	r3, #1
   15030:	strb	r3, [r4]
   15034:	pop	{r4, pc}
   15038:	andeq	r9, r4, r0, asr r3
   1503c:	b	14fdc <_start@@Base+0x8c>

00015040 <test_json@@Base>:
   15040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15044:	add	fp, sp, #28
   15048:	sub	sp, sp, #348	; 0x15c
   1504c:	mov	r7, r3
   15050:	mov	r9, r2
   15054:	mov	r8, r1
   15058:	mov	r6, r0
   1505c:	add	r4, sp, #104	; 0x68
   15060:	mov	r0, r4
   15064:	bl	21acc <flatcc_builder_init@@Base>
   15068:	add	r5, sp, #12
   1506c:	mov	sl, #0
   15070:	mov	r0, r5
   15074:	mov	r1, #0
   15078:	bl	304dc <flatcc_json_printer_init_dynamic_buffer@@Base>
   1507c:	ldr	r1, [fp, #12]
   15080:	mov	r0, r5
   15084:	bl	15324 <test_json@@Base+0x2e4>
   15088:	mov	r0, r8
   1508c:	bl	14ecc <strlen@plt>
   15090:	mov	r3, r0
   15094:	ldm	r6, {r0, r1}
   15098:	stmib	sp, {r0, r1}
   1509c:	ldr	r0, [fp, #8]
   150a0:	str	r0, [sp]
   150a4:	add	r1, sp, #60	; 0x3c
   150a8:	mov	r0, r4
   150ac:	mov	r2, r8
   150b0:	bl	28d58 <flatcc_json_parser_table_as_root@@Base>
   150b4:	ldr	r4, [fp, #16]
   150b8:	cmp	r0, r7
   150bc:	bne	15168 <test_json@@Base+0x128>
   150c0:	cmp	r7, #0
   150c4:	beq	150d0 <test_json@@Base+0x90>
   150c8:	mov	r5, #0
   150cc:	b	15144 <test_json@@Base+0x104>
   150d0:	add	r0, sp, #104	; 0x68
   150d4:	sub	r1, fp, #36	; 0x24
   150d8:	bl	24a80 <flatcc_builder_finalize_aligned_buffer@@Base>
   150dc:	mov	r5, r0
   150e0:	ldr	r2, [r6]
   150e4:	ldr	r3, [r6, #12]
   150e8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   150ec:	bl	25c84 <flatcc_verify_table_as_root@@Base>
   150f0:	cmp	r0, #0
   150f4:	bne	15220 <test_json@@Base+0x1e0>
   150f8:	ldr	r3, [r6]
   150fc:	ldr	r0, [r6, #8]
   15100:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15104:	str	r0, [sp]
   15108:	add	r6, sp, #12
   1510c:	mov	r0, r6
   15110:	mov	r1, r5
   15114:	bl	3006c <flatcc_json_printer_table_as_root@@Base>
   15118:	sub	r1, fp, #40	; 0x28
   1511c:	mov	r0, r6
   15120:	bl	30608 <flatcc_json_printer_get_buffer@@Base>
   15124:	mov	r6, r0
   15128:	cmp	r0, #0
   1512c:	beq	1519c <test_json@@Base+0x15c>
   15130:	mov	r0, r9
   15134:	mov	r1, r6
   15138:	bl	14e3c <strcmp@plt>
   1513c:	cmp	r0, #0
   15140:	bne	1519c <test_json@@Base+0x15c>
   15144:	mov	r0, r5
   15148:	bl	24b60 <flatcc_builder_aligned_free@@Base>
   1514c:	add	r0, sp, #104	; 0x68
   15150:	bl	21c44 <flatcc_builder_clear@@Base>
   15154:	add	r0, sp, #12
   15158:	bl	3066c <flatcc_json_printer_clear@@Base>
   1515c:	mov	r0, sl
   15160:	sub	sp, fp, #28
   15164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15168:	movw	r6, #37704	; 0x9348
   1516c:	movt	r6, #4
   15170:	cmp	r7, #0
   15174:	beq	151fc <test_json@@Base+0x1bc>
   15178:	ldr	r5, [r6]
   1517c:	cmp	r0, #0
   15180:	bne	15278 <test_json@@Base+0x238>
   15184:	mov	r0, r7
   15188:	bl	26938 <flatcc_json_parser_error_string@@Base>
   1518c:	mov	r3, r0
   15190:	movw	r1, #7546	; 0x1d7a
   15194:	movt	r1, #3
   15198:	b	15210 <test_json@@Base+0x1d0>
   1519c:	movw	r7, #37704	; 0x9348
   151a0:	movt	r7, #4
   151a4:	ldr	r0, [r7]
   151a8:	movw	r1, #7760	; 0x1e50
   151ac:	movt	r1, #3
   151b0:	mov	r2, r4
   151b4:	bl	14ed8 <fprintf@plt>
   151b8:	ldr	r0, [r7]
   151bc:	movw	r4, #21815	; 0x5537
   151c0:	movt	r4, #3
   151c4:	mov	r1, r4
   151c8:	mov	r2, r6
   151cc:	bl	14ed8 <fprintf@plt>
   151d0:	ldr	r3, [r7]
   151d4:	movw	r0, #7813	; 0x1e85
   151d8:	movt	r0, #3
   151dc:	mov	r1, #10
   151e0:	mov	r2, #1
   151e4:	bl	14e9c <fwrite@plt>
   151e8:	ldr	r0, [r7]
   151ec:	mov	r1, r4
   151f0:	mov	r2, r9
   151f4:	bl	14ed8 <fprintf@plt>
   151f8:	b	15250 <test_json@@Base+0x210>
   151fc:	ldr	r5, [r6]
   15200:	bl	26938 <flatcc_json_parser_error_string@@Base>
   15204:	mov	r3, r0
   15208:	movw	r1, #7610	; 0x1dba
   1520c:	movt	r1, #3
   15210:	mov	r0, r5
   15214:	mov	r2, r4
   15218:	bl	14ed8 <fprintf@plt>
   1521c:	b	152b4 <test_json@@Base+0x274>
   15220:	movw	r1, #37704	; 0x9348
   15224:	movt	r1, #4
   15228:	ldr	r6, [r1]
   1522c:	bl	25338 <flatcc_verify_error_string@@Base>
   15230:	str	r0, [sp]
   15234:	movw	r1, #7646	; 0x1dde
   15238:	movt	r1, #3
   1523c:	movw	r2, #7685	; 0x1e05
   15240:	movt	r2, #3
   15244:	mov	r0, r6
   15248:	mov	r3, r4
   1524c:	bl	14ed8 <fprintf@plt>
   15250:	mvn	sl, #0
   15254:	cmp	r5, #0
   15258:	beq	150c8 <test_json@@Base+0x88>
   1525c:	movw	r0, #37704	; 0x9348
   15260:	movt	r0, #4
   15264:	ldr	r2, [r0]
   15268:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1526c:	mov	r0, r5
   15270:	bl	15378 <test_json@@Base+0x338>
   15274:	b	15144 <test_json@@Base+0x104>
   15278:	bl	26938 <flatcc_json_parser_error_string@@Base>
   1527c:	mov	r3, r0
   15280:	movw	r1, #7508	; 0x1d54
   15284:	movt	r1, #3
   15288:	mov	r0, r5
   1528c:	mov	r2, r4
   15290:	bl	14ed8 <fprintf@plt>
   15294:	ldr	r4, [r6]
   15298:	mov	r0, r7
   1529c:	bl	26938 <flatcc_json_parser_error_string@@Base>
   152a0:	mov	r2, r0
   152a4:	movw	r1, #7579	; 0x1d9b
   152a8:	movt	r1, #3
   152ac:	mov	r0, r4
   152b0:	bl	14ed8 <fprintf@plt>
   152b4:	ldr	r0, [r6]
   152b8:	movw	r1, #21815	; 0x5537
   152bc:	movt	r1, #3
   152c0:	mov	r2, r8
   152c4:	bl	14ed8 <fprintf@plt>
   152c8:	movw	r4, #37704	; 0x9348
   152cc:	movt	r4, #4
   152d0:	ldr	r3, [r4]
   152d4:	ldr	r0, [sp, #80]	; 0x50
   152d8:	cmp	r0, #2
   152dc:	blt	15308 <test_json@@Base+0x2c8>
   152e0:	mov	r5, #0
   152e4:	mov	r0, #32
   152e8:	mov	r1, r3
   152ec:	bl	14f20 <fputc@plt>
   152f0:	add	r5, r5, #1
   152f4:	ldr	r3, [r4]
   152f8:	ldr	r0, [sp, #80]	; 0x50
   152fc:	sub	r0, r0, #1
   15300:	cmp	r5, r0
   15304:	blt	152e4 <test_json@@Base+0x2a4>
   15308:	movw	r0, #7643	; 0x1ddb
   1530c:	movt	r0, #3
   15310:	mov	r1, #2
   15314:	mov	r2, #1
   15318:	bl	14e9c <fwrite@plt>
   1531c:	mvn	sl, #0
   15320:	b	150c8 <test_json@@Base+0x88>
   15324:	push	{r4, r5, fp, lr}
   15328:	add	fp, sp, #8
   1532c:	mov	r5, r1
   15330:	mov	r4, r0
   15334:	and	r0, r1, #1
   15338:	strb	r0, [r4, #26]
   1533c:	uxtb	r0, r1
   15340:	ubfx	r1, r0, #1, #1
   15344:	strb	r1, [r4, #27]
   15348:	ubfx	r1, r0, #2, #1
   1534c:	strb	r1, [r4, #28]
   15350:	ubfx	r0, r0, #3, #1
   15354:	strb	r0, [r4, #29]
   15358:	tst	r5, #16
   1535c:	movne	r0, r4
   15360:	blne	16fd0 <main@@Base+0xef4>
   15364:	tst	r5, #32
   15368:	popeq	{r4, r5, fp, pc}
   1536c:	mov	r0, r4
   15370:	pop	{r4, r5, fp, lr}
   15374:	b	16fdc <main@@Base+0xf00>
   15378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1537c:	add	fp, sp, #28
   15380:	sub	sp, sp, #20
   15384:	mov	r4, r2
   15388:	mov	r5, r1
   1538c:	mov	r6, r0
   15390:	movw	r1, #21808	; 0x5530
   15394:	movt	r1, #3
   15398:	movw	r2, #7824	; 0x1e90
   1539c:	movt	r2, #3
   153a0:	mov	r0, r4
   153a4:	bl	14ed8 <fprintf@plt>
   153a8:	cmp	r5, #0
   153ac:	beq	15488 <test_json@@Base+0x448>
   153b0:	add	r7, sp, #3
   153b4:	movw	sl, #21827	; 0x5543
   153b8:	movt	sl, #3
   153bc:	mov	r8, #0
   153c0:	ands	r9, r8, #15
   153c4:	beq	153e0 <test_json@@Base+0x3a0>
   153c8:	tst	r8, #7
   153cc:	bne	15410 <test_json@@Base+0x3d0>
   153d0:	mov	r0, #32
   153d4:	mov	r1, r4
   153d8:	bl	14f20 <fputc@plt>
   153dc:	b	15410 <test_json@@Base+0x3d0>
   153e0:	cmp	r8, #0
   153e4:	beq	153fc <test_json@@Base+0x3bc>
   153e8:	mov	r0, r4
   153ec:	movw	r1, #21813	; 0x5535
   153f0:	movt	r1, #3
   153f4:	mov	r2, r7
   153f8:	bl	14ed8 <fprintf@plt>
   153fc:	mov	r0, r4
   15400:	movw	r1, #21819	; 0x553b
   15404:	movt	r1, #3
   15408:	mov	r2, r8
   1540c:	bl	14ed8 <fprintf@plt>
   15410:	ldrb	r2, [r6, r8]
   15414:	mov	r0, r4
   15418:	mov	r1, sl
   1541c:	bl	14ed8 <fprintf@plt>
   15420:	ldrb	r0, [r6, r8]
   15424:	sub	r1, r0, #32
   15428:	uxtb	r1, r1
   1542c:	cmp	r1, #94	; 0x5e
   15430:	movwhi	r0, #46	; 0x2e
   15434:	strb	r0, [r7, r9]
   15438:	add	r0, r7, r9
   1543c:	mov	r1, #0
   15440:	strb	r1, [r0, #1]
   15444:	add	r8, r8, #1
   15448:	cmp	r5, r8
   1544c:	bne	153c0 <test_json@@Base+0x380>
   15450:	tst	r5, #15
   15454:	beq	15488 <test_json@@Base+0x448>
   15458:	add	r6, r5, #1
   1545c:	movw	r5, #21833	; 0x5549
   15460:	movt	r5, #3
   15464:	mov	r0, r5
   15468:	mov	r1, #3
   1546c:	mov	r2, #1
   15470:	mov	r3, r4
   15474:	bl	14e9c <fwrite@plt>
   15478:	add	r0, r6, #1
   1547c:	tst	r6, #15
   15480:	mov	r6, r0
   15484:	bne	15464 <test_json@@Base+0x424>
   15488:	movw	r1, #21813	; 0x5535
   1548c:	movt	r1, #3
   15490:	add	r2, sp, #3
   15494:	mov	r0, r4
   15498:	bl	14ed8 <fprintf@plt>
   1549c:	sub	sp, fp, #28
   154a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000154a4 <edge_case_tests@@Base>:
   154a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a8:	add	fp, sp, #28
   154ac:	sub	sp, sp, #60	; 0x3c
   154b0:	mov	r0, #155	; 0x9b
   154b4:	mov	sl, #0
   154b8:	str	sl, [sp]
   154bc:	str	sl, [sp, #4]
   154c0:	str	r0, [sp, #8]
   154c4:	movw	r4, #22768	; 0x58f0
   154c8:	movt	r4, #3
   154cc:	movw	r1, #7838	; 0x1e9e
   154d0:	movt	r1, #3
   154d4:	movw	r2, #7887	; 0x1ecf
   154d8:	movt	r2, #3
   154dc:	mov	r0, r4
   154e0:	mov	r3, #0
   154e4:	bl	15040 <test_json@@Base>
   154e8:	str	r0, [fp, #-32]	; 0xffffffe0
   154ec:	mov	r0, #168	; 0xa8
   154f0:	mov	r9, #2
   154f4:	stm	sp, {r9, sl}
   154f8:	str	r0, [sp, #8]
   154fc:	movw	r5, #7917	; 0x1eed
   15500:	movt	r5, #3
   15504:	movw	r8, #7950	; 0x1f0e
   15508:	movt	r8, #3
   1550c:	mov	r0, r4
   15510:	mov	r1, r5
   15514:	mov	r2, r8
   15518:	mov	r3, #0
   1551c:	bl	15040 <test_json@@Base>
   15520:	str	r0, [fp, #-36]	; 0xffffffdc
   15524:	mov	r0, #172	; 0xac
   15528:	str	sl, [sp]
   1552c:	str	r9, [sp, #4]
   15530:	str	r0, [sp, #8]
   15534:	movw	r1, #7984	; 0x1f30
   15538:	movt	r1, #3
   1553c:	movw	r2, #8023	; 0x1f57
   15540:	movt	r2, #3
   15544:	mov	r0, r4
   15548:	mov	r3, #0
   1554c:	bl	15040 <test_json@@Base>
   15550:	str	r0, [fp, #-40]	; 0xffffffd8
   15554:	mov	r0, #176	; 0xb0
   15558:	mov	r1, #4
   1555c:	str	r9, [sp]
   15560:	str	r1, [sp, #4]
   15564:	str	r0, [sp, #8]
   15568:	movw	r2, #8052	; 0x1f74
   1556c:	movt	r2, #3
   15570:	mov	r0, r4
   15574:	mov	r1, r5
   15578:	mov	r3, #0
   1557c:	bl	15040 <test_json@@Base>
   15580:	str	r0, [sp, #44]	; 0x2c
   15584:	mov	r0, #180	; 0xb4
   15588:	mov	r1, #8
   1558c:	str	sl, [sp]
   15590:	str	r1, [sp, #4]
   15594:	str	r0, [sp, #8]
   15598:	movw	r1, #8071	; 0x1f87
   1559c:	movt	r1, #3
   155a0:	movw	r2, #8105	; 0x1fa9
   155a4:	movt	r2, #3
   155a8:	mov	r0, r4
   155ac:	mov	r3, #0
   155b0:	bl	15040 <test_json@@Base>
   155b4:	str	r0, [sp, #40]	; 0x28
   155b8:	mov	r0, #195	; 0xc3
   155bc:	stm	sp, {r9, sl}
   155c0:	str	r0, [sp, #8]
   155c4:	movw	r1, #8379	; 0x20bb
   155c8:	movt	r1, #3
   155cc:	mov	r0, r4
   155d0:	mov	r2, r8
   155d4:	mov	r3, #0
   155d8:	bl	15040 <test_json@@Base>
   155dc:	str	r0, [sp, #36]	; 0x24
   155e0:	mov	r0, #199	; 0xc7
   155e4:	mov	r6, #1
   155e8:	stm	sp, {r6, sl}
   155ec:	str	r0, [sp, #8]
   155f0:	movw	r5, #8417	; 0x20e1
   155f4:	movt	r5, #3
   155f8:	movw	r7, #8467	; 0x2113
   155fc:	movt	r7, #3
   15600:	mov	r0, r4
   15604:	mov	r1, r5
   15608:	mov	r2, r7
   1560c:	mov	r3, #0
   15610:	bl	15040 <test_json@@Base>
   15614:	str	r0, [sp, #32]
   15618:	mov	r0, #203	; 0xcb
   1561c:	str	r6, [sp]
   15620:	str	r6, [sp, #4]
   15624:	str	r0, [sp, #8]
   15628:	movw	r2, #8494	; 0x212e
   1562c:	movt	r2, #3
   15630:	mov	r0, r4
   15634:	mov	r1, r5
   15638:	mov	r3, #0
   1563c:	bl	15040 <test_json@@Base>
   15640:	str	r0, [sp, #28]
   15644:	mov	r0, #209	; 0xd1
   15648:	stm	sp, {r6, sl}
   1564c:	str	r0, [sp, #8]
   15650:	movw	r1, #8517	; 0x2145
   15654:	movt	r1, #3
   15658:	mov	r0, r4
   1565c:	mov	r2, r7
   15660:	mov	r3, #0
   15664:	bl	15040 <test_json@@Base>
   15668:	str	r0, [sp, #24]
   1566c:	mov	r0, #217	; 0xd9
   15670:	stm	sp, {r9, sl}
   15674:	str	r0, [sp, #8]
   15678:	movw	r5, #8630	; 0x21b6
   1567c:	movt	r5, #3
   15680:	mov	r0, r4
   15684:	mov	r1, r5
   15688:	mov	r2, r8
   1568c:	mov	r3, #0
   15690:	bl	15040 <test_json@@Base>
   15694:	str	r0, [sp, #20]
   15698:	mov	r0, #221	; 0xdd
   1569c:	str	sl, [sp]
   156a0:	str	r9, [sp, #4]
   156a4:	str	r0, [sp, #8]
   156a8:	movw	r1, #8659	; 0x21d3
   156ac:	movt	r1, #3
   156b0:	mov	r0, r4
   156b4:	movw	r2, #8023	; 0x1f57
   156b8:	movt	r2, #3
   156bc:	mov	r3, #0
   156c0:	bl	15040 <test_json@@Base>
   156c4:	str	r0, [sp, #16]
   156c8:	mov	r0, #225	; 0xe1
   156cc:	str	r9, [sp]
   156d0:	mov	r1, #4
   156d4:	str	r1, [sp, #4]
   156d8:	str	r0, [sp, #8]
   156dc:	mov	r0, r4
   156e0:	mov	r1, r5
   156e4:	movw	r2, #8052	; 0x1f74
   156e8:	movt	r2, #3
   156ec:	mov	r3, #0
   156f0:	bl	15040 <test_json@@Base>
   156f4:	str	r0, [sp, #12]
   156f8:	mov	r0, #229	; 0xe5
   156fc:	str	sl, [sp]
   15700:	mov	r1, #8
   15704:	str	r1, [sp, #4]
   15708:	str	r0, [sp, #8]
   1570c:	movw	r1, #8692	; 0x21f4
   15710:	movt	r1, #3
   15714:	movw	r2, #8711	; 0x2207
   15718:	movt	r2, #3
   1571c:	mov	r0, r4
   15720:	mov	r3, #0
   15724:	bl	15040 <test_json@@Base>
   15728:	mov	r5, r0
   1572c:	mov	r0, #233	; 0xe9
   15730:	stm	sp, {r9, sl}
   15734:	str	r0, [sp, #8]
   15738:	movw	r1, #8990	; 0x231e
   1573c:	movt	r1, #3
   15740:	mov	r0, r4
   15744:	mov	r2, r8
   15748:	mov	r3, #0
   1574c:	bl	15040 <test_json@@Base>
   15750:	mov	r8, r0
   15754:	mov	r0, #237	; 0xed
   15758:	stm	sp, {r6, sl}
   1575c:	str	r0, [sp, #8]
   15760:	movw	r9, #9022	; 0x233e
   15764:	movt	r9, #3
   15768:	mov	r0, r4
   1576c:	mov	r1, r9
   15770:	movw	r2, #8467	; 0x2113
   15774:	movt	r2, #3
   15778:	mov	r3, #0
   1577c:	bl	15040 <test_json@@Base>
   15780:	mov	r7, r0
   15784:	mov	r0, #241	; 0xf1
   15788:	str	r6, [sp]
   1578c:	str	r6, [sp, #4]
   15790:	str	r0, [sp, #8]
   15794:	mov	r0, r4
   15798:	mov	r1, r9
   1579c:	movw	r2, #8494	; 0x212e
   157a0:	movt	r2, #3
   157a4:	mov	r3, #0
   157a8:	bl	15040 <test_json@@Base>
   157ac:	mov	r1, #247	; 0xf7
   157b0:	stm	sp, {r6, sl}
   157b4:	str	r1, [sp, #8]
   157b8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   157bc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   157c0:	orr	r1, r2, r1
   157c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   157c8:	orr	r1, r1, r2
   157cc:	ldr	r2, [sp, #44]	; 0x2c
   157d0:	orr	r1, r1, r2
   157d4:	ldr	r2, [sp, #40]	; 0x28
   157d8:	orr	r1, r1, r2
   157dc:	ldr	r2, [sp, #36]	; 0x24
   157e0:	orr	r1, r1, r2
   157e4:	ldr	r2, [sp, #32]
   157e8:	orr	r1, r1, r2
   157ec:	ldr	r2, [sp, #28]
   157f0:	orr	r1, r1, r2
   157f4:	ldr	r2, [sp, #24]
   157f8:	orr	r1, r1, r2
   157fc:	ldr	r2, [sp, #20]
   15800:	orr	r1, r1, r2
   15804:	ldr	r2, [sp, #16]
   15808:	orr	r1, r1, r2
   1580c:	ldr	r2, [sp, #12]
   15810:	orr	r1, r1, r2
   15814:	orr	r1, r1, r5
   15818:	orr	r1, r1, r8
   1581c:	orr	r1, r1, r7
   15820:	orr	r5, r1, r0
   15824:	movw	r1, #9064	; 0x2368
   15828:	movt	r1, #3
   1582c:	mov	r0, r4
   15830:	movw	r2, #8467	; 0x2113
   15834:	movt	r2, #3
   15838:	mov	r3, #0
   1583c:	bl	15040 <test_json@@Base>
   15840:	orr	r0, r5, r0
   15844:	sub	sp, fp, #28
   15848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001584c <error_case_tests@@Base>:
   1584c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15850:	add	fp, sp, #28
   15854:	sub	sp, sp, #60	; 0x3c
   15858:	movw	r0, #285	; 0x11d
   1585c:	mov	r6, #0
   15860:	str	r6, [sp]
   15864:	str	r6, [sp, #4]
   15868:	str	r0, [sp, #8]
   1586c:	movw	r4, #22768	; 0x58f0
   15870:	movt	r4, #3
   15874:	movw	r1, #9159	; 0x23c7
   15878:	movt	r1, #3
   1587c:	mov	r0, r4
   15880:	mov	r2, #0
   15884:	mov	r3, #13
   15888:	bl	15040 <test_json@@Base>
   1588c:	str	r0, [fp, #-32]	; 0xffffffe0
   15890:	movw	r0, #287	; 0x11f
   15894:	str	r6, [sp]
   15898:	str	r6, [sp, #4]
   1589c:	str	r0, [sp, #8]
   158a0:	movw	r1, #9185	; 0x23e1
   158a4:	movt	r1, #3
   158a8:	mov	r0, r4
   158ac:	mov	r2, #0
   158b0:	mov	r3, #13
   158b4:	bl	15040 <test_json@@Base>
   158b8:	str	r0, [fp, #-36]	; 0xffffffdc
   158bc:	movw	r0, #289	; 0x121
   158c0:	str	r6, [sp]
   158c4:	str	r6, [sp, #4]
   158c8:	str	r0, [sp, #8]
   158cc:	movw	r1, #9282	; 0x2442
   158d0:	movt	r1, #3
   158d4:	mov	r0, r4
   158d8:	mov	r2, #0
   158dc:	mov	r3, #13
   158e0:	bl	15040 <test_json@@Base>
   158e4:	str	r0, [fp, #-40]	; 0xffffffd8
   158e8:	movw	r0, #291	; 0x123
   158ec:	str	r6, [sp]
   158f0:	str	r6, [sp, #4]
   158f4:	str	r0, [sp, #8]
   158f8:	movw	r1, #9376	; 0x24a0
   158fc:	movt	r1, #3
   15900:	mov	r0, r4
   15904:	mov	r2, #0
   15908:	mov	r3, #13
   1590c:	bl	15040 <test_json@@Base>
   15910:	str	r0, [sp, #44]	; 0x2c
   15914:	movw	r0, #293	; 0x125
   15918:	str	r6, [sp]
   1591c:	str	r6, [sp, #4]
   15920:	str	r0, [sp, #8]
   15924:	movw	r1, #9464	; 0x24f8
   15928:	movt	r1, #3
   1592c:	mov	r0, r4
   15930:	mov	r2, #0
   15934:	mov	r3, #13
   15938:	bl	15040 <test_json@@Base>
   1593c:	str	r0, [sp, #40]	; 0x28
   15940:	mov	r0, #296	; 0x128
   15944:	str	r6, [sp]
   15948:	str	r6, [sp, #4]
   1594c:	str	r0, [sp, #8]
   15950:	movw	r1, #9549	; 0x254d
   15954:	movt	r1, #3
   15958:	mov	r0, r4
   1595c:	mov	r2, #0
   15960:	mov	r3, #13
   15964:	bl	15040 <test_json@@Base>
   15968:	str	r0, [sp, #36]	; 0x24
   1596c:	movw	r0, #299	; 0x12b
   15970:	str	r6, [sp]
   15974:	str	r6, [sp, #4]
   15978:	str	r0, [sp, #8]
   1597c:	movw	r1, #9707	; 0x25eb
   15980:	movt	r1, #3
   15984:	mov	r0, r4
   15988:	mov	r2, #0
   1598c:	mov	r3, #13
   15990:	bl	15040 <test_json@@Base>
   15994:	str	r0, [sp, #32]
   15998:	movw	r0, #303	; 0x12f
   1599c:	str	r6, [sp]
   159a0:	str	r6, [sp, #4]
   159a4:	str	r0, [sp, #8]
   159a8:	movw	r1, #9862	; 0x2686
   159ac:	movt	r1, #3
   159b0:	mov	r0, r4
   159b4:	mov	r2, #0
   159b8:	mov	r3, #13
   159bc:	bl	15040 <test_json@@Base>
   159c0:	str	r0, [sp, #28]
   159c4:	movw	r0, #307	; 0x133
   159c8:	str	r6, [sp]
   159cc:	str	r6, [sp, #4]
   159d0:	str	r0, [sp, #8]
   159d4:	movw	r1, #10061	; 0x274d
   159d8:	movt	r1, #3
   159dc:	mov	r0, r4
   159e0:	mov	r2, #0
   159e4:	mov	r3, #13
   159e8:	bl	15040 <test_json@@Base>
   159ec:	str	r0, [sp, #24]
   159f0:	movw	r0, #322	; 0x142
   159f4:	str	r6, [sp]
   159f8:	str	r6, [sp, #4]
   159fc:	str	r0, [sp, #8]
   15a00:	movw	r1, #10260	; 0x2814
   15a04:	movt	r1, #3
   15a08:	mov	r0, r4
   15a0c:	mov	r2, #0
   15a10:	mov	r3, #13
   15a14:	bl	15040 <test_json@@Base>
   15a18:	str	r0, [sp, #20]
   15a1c:	mov	r0, #324	; 0x144
   15a20:	str	r6, [sp]
   15a24:	str	r6, [sp, #4]
   15a28:	str	r0, [sp, #8]
   15a2c:	movw	r1, #10284	; 0x282c
   15a30:	movt	r1, #3
   15a34:	mov	r0, r4
   15a38:	mov	r2, #0
   15a3c:	mov	r3, #13
   15a40:	bl	15040 <test_json@@Base>
   15a44:	str	r0, [sp, #16]
   15a48:	movw	r0, #326	; 0x146
   15a4c:	str	r6, [sp]
   15a50:	str	r6, [sp, #4]
   15a54:	str	r0, [sp, #8]
   15a58:	movw	r1, #10369	; 0x2881
   15a5c:	movt	r1, #3
   15a60:	mov	r0, r4
   15a64:	mov	r2, #0
   15a68:	mov	r3, #13
   15a6c:	bl	15040 <test_json@@Base>
   15a70:	mov	r7, r0
   15a74:	mov	r0, #328	; 0x148
   15a78:	str	r6, [sp]
   15a7c:	str	r6, [sp, #4]
   15a80:	str	r0, [sp, #8]
   15a84:	movw	r1, #10451	; 0x28d3
   15a88:	movt	r1, #3
   15a8c:	mov	r0, r4
   15a90:	mov	r2, #0
   15a94:	mov	r3, #13
   15a98:	bl	15040 <test_json@@Base>
   15a9c:	mov	r8, r0
   15aa0:	movw	r0, #330	; 0x14a
   15aa4:	str	r6, [sp]
   15aa8:	str	r6, [sp, #4]
   15aac:	str	r0, [sp, #8]
   15ab0:	movw	r1, #10531	; 0x2923
   15ab4:	movt	r1, #3
   15ab8:	mov	r0, r4
   15abc:	mov	r2, #0
   15ac0:	mov	r3, #13
   15ac4:	bl	15040 <test_json@@Base>
   15ac8:	mov	r9, r0
   15acc:	movw	r0, #333	; 0x14d
   15ad0:	str	r6, [sp]
   15ad4:	str	r6, [sp, #4]
   15ad8:	str	r0, [sp, #8]
   15adc:	movw	r1, #10608	; 0x2970
   15ae0:	movt	r1, #3
   15ae4:	mov	r0, r4
   15ae8:	mov	r2, #0
   15aec:	mov	r3, #13
   15af0:	bl	15040 <test_json@@Base>
   15af4:	mov	sl, r0
   15af8:	mov	r0, #336	; 0x150
   15afc:	str	r6, [sp]
   15b00:	str	r6, [sp, #4]
   15b04:	str	r0, [sp, #8]
   15b08:	movw	r1, #10748	; 0x29fc
   15b0c:	movt	r1, #3
   15b10:	mov	r0, r4
   15b14:	mov	r2, #0
   15b18:	mov	r3, #13
   15b1c:	bl	15040 <test_json@@Base>
   15b20:	mov	r5, r0
   15b24:	mov	r0, #340	; 0x154
   15b28:	str	r6, [sp]
   15b2c:	str	r6, [sp, #4]
   15b30:	str	r0, [sp, #8]
   15b34:	movw	r1, #10885	; 0x2a85
   15b38:	movt	r1, #3
   15b3c:	mov	r0, r4
   15b40:	mov	r2, #0
   15b44:	mov	r3, #13
   15b48:	bl	15040 <test_json@@Base>
   15b4c:	mov	r1, #344	; 0x158
   15b50:	str	r6, [sp]
   15b54:	str	r6, [sp, #4]
   15b58:	str	r1, [sp, #8]
   15b5c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15b60:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15b64:	orr	r1, r2, r1
   15b68:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15b6c:	orr	r1, r1, r2
   15b70:	ldr	r2, [sp, #44]	; 0x2c
   15b74:	orr	r1, r1, r2
   15b78:	ldr	r2, [sp, #40]	; 0x28
   15b7c:	orr	r1, r1, r2
   15b80:	ldr	r2, [sp, #36]	; 0x24
   15b84:	orr	r1, r1, r2
   15b88:	ldr	r2, [sp, #32]
   15b8c:	orr	r1, r1, r2
   15b90:	ldr	r2, [sp, #28]
   15b94:	orr	r1, r1, r2
   15b98:	ldr	r2, [sp, #24]
   15b9c:	orr	r1, r1, r2
   15ba0:	ldr	r2, [sp, #20]
   15ba4:	orr	r1, r1, r2
   15ba8:	ldr	r2, [sp, #16]
   15bac:	orr	r1, r1, r2
   15bb0:	orr	r1, r1, r7
   15bb4:	orr	r1, r1, r8
   15bb8:	orr	r1, r1, r9
   15bbc:	orr	r1, r1, sl
   15bc0:	orr	r1, r1, r5
   15bc4:	orr	r5, r1, r0
   15bc8:	movw	r1, #11060	; 0x2b34
   15bcc:	movt	r1, #3
   15bd0:	mov	r0, r4
   15bd4:	mov	r2, #0
   15bd8:	mov	r3, #13
   15bdc:	bl	15040 <test_json@@Base>
   15be0:	orr	r0, r5, r0
   15be4:	sub	sp, fp, #28
   15be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015bec <base64_tests@@Base>:
   15bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bf0:	add	fp, sp, #28
   15bf4:	sub	sp, sp, #28
   15bf8:	movw	r0, #369	; 0x171
   15bfc:	mov	r5, #0
   15c00:	str	r5, [sp]
   15c04:	str	r5, [sp, #4]
   15c08:	str	r0, [sp, #8]
   15c0c:	movw	r4, #22768	; 0x58f0
   15c10:	movt	r4, #3
   15c14:	movw	r1, #11235	; 0x2be3
   15c18:	movt	r1, #3
   15c1c:	movw	r2, #8052	; 0x1f74
   15c20:	movt	r2, #3
   15c24:	mov	r0, r4
   15c28:	mov	r3, #0
   15c2c:	bl	15040 <test_json@@Base>
   15c30:	str	r0, [sp, #24]
   15c34:	mov	r0, #372	; 0x174
   15c38:	str	r5, [sp]
   15c3c:	str	r5, [sp, #4]
   15c40:	str	r0, [sp, #8]
   15c44:	movw	r1, #11257	; 0x2bf9
   15c48:	movt	r1, #3
   15c4c:	movw	r2, #11296	; 0x2c20
   15c50:	movt	r2, #3
   15c54:	mov	r0, r4
   15c58:	mov	r3, #0
   15c5c:	bl	15040 <test_json@@Base>
   15c60:	str	r0, [sp, #20]
   15c64:	mov	r0, #376	; 0x178
   15c68:	str	r5, [sp]
   15c6c:	str	r5, [sp, #4]
   15c70:	str	r0, [sp, #8]
   15c74:	movw	r1, #11331	; 0x2c43
   15c78:	movt	r1, #3
   15c7c:	movw	r6, #11516	; 0x2cfc
   15c80:	movt	r6, #3
   15c84:	mov	r0, r4
   15c88:	mov	r2, r6
   15c8c:	mov	r3, #0
   15c90:	bl	15040 <test_json@@Base>
   15c94:	str	r0, [sp, #16]
   15c98:	movw	r0, #379	; 0x17b
   15c9c:	str	r5, [sp]
   15ca0:	str	r5, [sp, #4]
   15ca4:	str	r0, [sp, #8]
   15ca8:	movw	r1, #11696	; 0x2db0
   15cac:	movt	r1, #3
   15cb0:	movw	r7, #11884	; 0x2e6c
   15cb4:	movt	r7, #3
   15cb8:	mov	r0, r4
   15cbc:	mov	r2, r7
   15cc0:	mov	r3, #0
   15cc4:	bl	15040 <test_json@@Base>
   15cc8:	str	r0, [sp, #12]
   15ccc:	movw	r0, #382	; 0x17e
   15cd0:	str	r5, [sp]
   15cd4:	str	r5, [sp, #4]
   15cd8:	str	r0, [sp, #8]
   15cdc:	movw	r1, #12067	; 0x2f23
   15ce0:	movt	r1, #3
   15ce4:	mov	r0, r4
   15ce8:	mov	r2, r6
   15cec:	mov	r3, #0
   15cf0:	bl	15040 <test_json@@Base>
   15cf4:	mov	r6, r0
   15cf8:	movw	r0, #385	; 0x181
   15cfc:	str	r5, [sp]
   15d00:	str	r5, [sp, #4]
   15d04:	str	r0, [sp, #8]
   15d08:	movw	r1, #12250	; 0x2fda
   15d0c:	movt	r1, #3
   15d10:	mov	r0, r4
   15d14:	mov	r2, r7
   15d18:	mov	r3, #0
   15d1c:	bl	15040 <test_json@@Base>
   15d20:	mov	r7, r0
   15d24:	mov	r0, #388	; 0x184
   15d28:	str	r5, [sp]
   15d2c:	str	r5, [sp, #4]
   15d30:	str	r0, [sp, #8]
   15d34:	movw	r1, #12436	; 0x3094
   15d38:	movt	r1, #3
   15d3c:	mov	r0, r4
   15d40:	mov	r2, #0
   15d44:	mov	r3, #31
   15d48:	bl	15040 <test_json@@Base>
   15d4c:	mov	r8, r0
   15d50:	movw	r0, #391	; 0x187
   15d54:	str	r5, [sp]
   15d58:	str	r5, [sp, #4]
   15d5c:	str	r0, [sp, #8]
   15d60:	movw	r1, #12621	; 0x314d
   15d64:	movt	r1, #3
   15d68:	mov	r0, r4
   15d6c:	mov	r2, #0
   15d70:	mov	r3, #32
   15d74:	bl	15040 <test_json@@Base>
   15d78:	mov	r9, r0
   15d7c:	movw	r0, #406	; 0x196
   15d80:	str	r5, [sp]
   15d84:	str	r5, [sp, #4]
   15d88:	str	r0, [sp, #8]
   15d8c:	movw	r1, #12809	; 0x3209
   15d90:	movt	r1, #3
   15d94:	movw	sl, #13017	; 0x32d9
   15d98:	movt	sl, #3
   15d9c:	mov	r0, r4
   15da0:	mov	r2, sl
   15da4:	mov	r3, #0
   15da8:	bl	15040 <test_json@@Base>
   15dac:	movw	r1, #419	; 0x1a3
   15db0:	str	r5, [sp]
   15db4:	str	r5, [sp, #4]
   15db8:	str	r1, [sp, #8]
   15dbc:	ldr	r1, [sp, #24]
   15dc0:	ldr	r2, [sp, #20]
   15dc4:	orr	r1, r2, r1
   15dc8:	ldr	r2, [sp, #16]
   15dcc:	orr	r1, r1, r2
   15dd0:	ldr	r2, [sp, #12]
   15dd4:	orr	r1, r1, r2
   15dd8:	orr	r1, r1, r6
   15ddc:	orr	r1, r1, r7
   15de0:	orr	r1, r1, r8
   15de4:	orr	r1, r1, r9
   15de8:	orr	r5, r1, r0
   15dec:	movw	r1, #13230	; 0x33ae
   15df0:	movt	r1, #3
   15df4:	mov	r0, r4
   15df8:	mov	r2, sl
   15dfc:	mov	r3, #0
   15e00:	bl	15040 <test_json@@Base>
   15e04:	orr	r0, r5, r0
   15e08:	sub	sp, fp, #28
   15e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015e10 <mixed_type_union_tests@@Base>:
   15e10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e14:	add	fp, sp, #28
   15e18:	sub	sp, sp, #20
   15e1c:	mov	r0, #432	; 0x1b0
   15e20:	mov	r8, #0
   15e24:	str	r8, [sp]
   15e28:	str	r8, [sp, #4]
   15e2c:	str	r0, [sp, #8]
   15e30:	movw	r4, #22784	; 0x5900
   15e34:	movt	r4, #3
   15e38:	movw	r1, #13434	; 0x347a
   15e3c:	movt	r1, #3
   15e40:	movw	r2, #13513	; 0x34c9
   15e44:	movt	r2, #3
   15e48:	mov	r0, r4
   15e4c:	mov	r3, #0
   15e50:	bl	15040 <test_json@@Base>
   15e54:	str	r0, [sp, #16]
   15e58:	movw	r0, #437	; 0x1b5
   15e5c:	str	r8, [sp]
   15e60:	str	r8, [sp, #4]
   15e64:	str	r0, [sp, #8]
   15e68:	movw	r1, #13584	; 0x3510
   15e6c:	movt	r1, #3
   15e70:	movw	r9, #13715	; 0x3593
   15e74:	movt	r9, #3
   15e78:	mov	r0, r4
   15e7c:	mov	r2, r9
   15e80:	mov	r3, #0
   15e84:	bl	15040 <test_json@@Base>
   15e88:	mov	sl, r0
   15e8c:	movw	r0, #442	; 0x1ba
   15e90:	str	r8, [sp]
   15e94:	str	r8, [sp, #4]
   15e98:	str	r0, [sp, #8]
   15e9c:	movw	r1, #13834	; 0x360a
   15ea0:	movt	r1, #3
   15ea4:	mov	r0, r4
   15ea8:	mov	r2, r9
   15eac:	mov	r3, #0
   15eb0:	bl	15040 <test_json@@Base>
   15eb4:	mov	r5, r0
   15eb8:	movw	r0, #449	; 0x1c1
   15ebc:	str	r8, [sp]
   15ec0:	str	r8, [sp, #4]
   15ec4:	str	r0, [sp, #8]
   15ec8:	movw	r1, #13984	; 0x36a0
   15ecc:	movt	r1, #3
   15ed0:	movw	r2, #14205	; 0x377d
   15ed4:	movt	r2, #3
   15ed8:	mov	r0, r4
   15edc:	mov	r3, #0
   15ee0:	bl	15040 <test_json@@Base>
   15ee4:	mov	r6, r0
   15ee8:	movw	r0, #458	; 0x1ca
   15eec:	str	r8, [sp]
   15ef0:	str	r8, [sp, #4]
   15ef4:	str	r0, [sp, #8]
   15ef8:	movw	r1, #14390	; 0x3836
   15efc:	movt	r1, #3
   15f00:	movw	r2, #14652	; 0x393c
   15f04:	movt	r2, #3
   15f08:	mov	r0, r4
   15f0c:	mov	r3, #0
   15f10:	bl	15040 <test_json@@Base>
   15f14:	mov	r7, r0
   15f18:	movw	r0, #469	; 0x1d5
   15f1c:	str	r8, [sp]
   15f20:	str	r8, [sp, #4]
   15f24:	str	r0, [sp, #8]
   15f28:	movw	r1, #14874	; 0x3a1a
   15f2c:	movt	r1, #3
   15f30:	movw	r2, #15259	; 0x3b9b
   15f34:	movt	r2, #3
   15f38:	mov	r0, r4
   15f3c:	mov	r3, #0
   15f40:	bl	15040 <test_json@@Base>
   15f44:	movw	r1, #474	; 0x1da
   15f48:	str	r8, [sp]
   15f4c:	str	r8, [sp, #4]
   15f50:	str	r1, [sp, #8]
   15f54:	ldr	r1, [sp, #16]
   15f58:	orr	r1, sl, r1
   15f5c:	orr	r1, r1, r5
   15f60:	orr	r1, r1, r6
   15f64:	orr	r1, r1, r7
   15f68:	orr	r5, r1, r0
   15f6c:	movw	r1, #15585	; 0x3ce1
   15f70:	movt	r1, #3
   15f74:	mov	r0, r4
   15f78:	mov	r2, r9
   15f7c:	mov	r3, #0
   15f80:	bl	15040 <test_json@@Base>
   15f84:	orr	r0, r5, r0
   15f88:	sub	sp, fp, #28
   15f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015f90 <union_vector_tests@@Base>:
   15f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f94:	add	fp, sp, #28
   15f98:	sub	sp, sp, #12
   15f9c:	movw	r0, #485	; 0x1e5
   15fa0:	mov	r7, #0
   15fa4:	str	r7, [sp]
   15fa8:	str	r7, [sp, #4]
   15fac:	str	r0, [sp, #8]
   15fb0:	movw	r4, #22800	; 0x5910
   15fb4:	movt	r4, #3
   15fb8:	movw	r1, #15726	; 0x3d6e
   15fbc:	movt	r1, #3
   15fc0:	movw	r8, #15790	; 0x3dae
   15fc4:	movt	r8, #3
   15fc8:	mov	r0, r4
   15fcc:	mov	r2, r8
   15fd0:	mov	r3, #0
   15fd4:	bl	15040 <test_json@@Base>
   15fd8:	mov	r9, r0
   15fdc:	mov	r0, #488	; 0x1e8
   15fe0:	str	r7, [sp]
   15fe4:	str	r7, [sp, #4]
   15fe8:	str	r0, [sp, #8]
   15fec:	movw	r1, #15846	; 0x3de6
   15ff0:	movt	r1, #3
   15ff4:	movw	r2, #15897	; 0x3e19
   15ff8:	movt	r2, #3
   15ffc:	mov	r0, r4
   16000:	mov	r3, #0
   16004:	bl	15040 <test_json@@Base>
   16008:	mov	sl, r0
   1600c:	movw	r0, #491	; 0x1eb
   16010:	str	r7, [sp]
   16014:	str	r7, [sp, #4]
   16018:	str	r0, [sp, #8]
   1601c:	movw	r1, #15940	; 0x3e44
   16020:	movt	r1, #3
   16024:	movw	r2, #16017	; 0x3e91
   16028:	movt	r2, #3
   1602c:	mov	r0, r4
   16030:	mov	r3, #0
   16034:	bl	15040 <test_json@@Base>
   16038:	mov	r6, r0
   1603c:	movw	r0, #494	; 0x1ee
   16040:	str	r7, [sp]
   16044:	str	r7, [sp, #4]
   16048:	str	r0, [sp, #8]
   1604c:	movw	r1, #16085	; 0x3ed5
   16050:	movt	r1, #3
   16054:	movw	r2, #16210	; 0x3f52
   16058:	movt	r2, #3
   1605c:	mov	r0, r4
   16060:	mov	r3, #0
   16064:	bl	15040 <test_json@@Base>
   16068:	mov	r5, r0
   1606c:	movw	r0, #497	; 0x1f1
   16070:	str	r7, [sp]
   16074:	str	r7, [sp, #4]
   16078:	str	r0, [sp, #8]
   1607c:	movw	r1, #16318	; 0x3fbe
   16080:	movt	r1, #3
   16084:	mov	r0, r4
   16088:	mov	r2, r8
   1608c:	mov	r3, #0
   16090:	bl	15040 <test_json@@Base>
   16094:	mov	r1, #500	; 0x1f4
   16098:	str	r7, [sp]
   1609c:	str	r7, [sp, #4]
   160a0:	str	r1, [sp, #8]
   160a4:	orr	r1, sl, r9
   160a8:	orr	r1, r1, r6
   160ac:	orr	r1, r1, r5
   160b0:	orr	r5, r1, r0
   160b4:	movw	r1, #16381	; 0x3ffd
   160b8:	movt	r1, #3
   160bc:	movw	r2, #16483	; 0x4063
   160c0:	movt	r2, #3
   160c4:	mov	r0, r4
   160c8:	mov	r3, #0
   160cc:	bl	15040 <test_json@@Base>
   160d0:	orr	r0, r5, r0
   160d4:	sub	sp, fp, #28
   160d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000160dc <main@@Base>:
   160dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e0:	add	fp, sp, #28
   160e4:	sub	sp, sp, #284	; 0x11c
   160e8:	bl	154a4 <edge_case_tests@@Base>
   160ec:	str	r0, [fp, #-32]	; 0xffffffe0
   160f0:	bl	1584c <error_case_tests@@Base>
   160f4:	str	r0, [fp, #-36]	; 0xffffffdc
   160f8:	bl	15f90 <union_vector_tests@@Base>
   160fc:	str	r0, [fp, #-40]	; 0xffffffd8
   16100:	bl	15bec <base64_tests@@Base>
   16104:	str	r0, [fp, #-44]	; 0xffffffd4
   16108:	bl	15e10 <mixed_type_union_tests@@Base>
   1610c:	str	r0, [fp, #-48]	; 0xffffffd0
   16110:	movw	r0, #525	; 0x20d
   16114:	mov	r8, #0
   16118:	str	r8, [sp]
   1611c:	str	r8, [sp, #4]
   16120:	str	r0, [sp, #8]
   16124:	movw	r4, #22768	; 0x58f0
   16128:	movt	r4, #3
   1612c:	movw	r1, #16575	; 0x40bf
   16130:	movt	r1, #3
   16134:	movw	sl, #8052	; 0x1f74
   16138:	movt	sl, #3
   1613c:	mov	r0, r4
   16140:	mov	r2, sl
   16144:	mov	r3, #0
   16148:	bl	15040 <test_json@@Base>
   1614c:	str	r0, [fp, #-52]	; 0xffffffcc
   16150:	mov	r0, #528	; 0x210
   16154:	str	r8, [sp]
   16158:	str	r8, [sp, #4]
   1615c:	str	r0, [sp, #8]
   16160:	movw	r1, #16598	; 0x40d6
   16164:	movt	r1, #3
   16168:	movw	r7, #16637	; 0x40fd
   1616c:	movt	r7, #3
   16170:	mov	r0, r4
   16174:	mov	r2, r7
   16178:	mov	r3, #0
   1617c:	bl	15040 <test_json@@Base>
   16180:	str	r0, [fp, #-56]	; 0xffffffc8
   16184:	movw	r0, #531	; 0x213
   16188:	str	r8, [sp]
   1618c:	str	r8, [sp, #4]
   16190:	str	r0, [sp, #8]
   16194:	movw	r1, #16670	; 0x411e
   16198:	movt	r1, #3
   1619c:	movw	r6, #16710	; 0x4146
   161a0:	movt	r6, #3
   161a4:	mov	r0, r4
   161a8:	mov	r2, r6
   161ac:	mov	r3, #0
   161b0:	bl	15040 <test_json@@Base>
   161b4:	str	r0, [fp, #-60]	; 0xffffffc4
   161b8:	movw	r0, #534	; 0x216
   161bc:	str	r8, [sp]
   161c0:	str	r8, [sp, #4]
   161c4:	str	r0, [sp, #8]
   161c8:	movw	r1, #16745	; 0x4169
   161cc:	movt	r1, #3
   161d0:	movw	r9, #16794	; 0x419a
   161d4:	movt	r9, #3
   161d8:	mov	r0, r4
   161dc:	mov	r2, r9
   161e0:	mov	r3, #0
   161e4:	bl	15040 <test_json@@Base>
   161e8:	str	r0, [fp, #-64]	; 0xffffffc0
   161ec:	movw	r0, #537	; 0x219
   161f0:	str	r8, [sp]
   161f4:	str	r8, [sp, #4]
   161f8:	str	r0, [sp, #8]
   161fc:	movw	r1, #16838	; 0x41c6
   16200:	movt	r1, #3
   16204:	mov	r0, r4
   16208:	mov	r2, r9
   1620c:	mov	r3, #0
   16210:	bl	15040 <test_json@@Base>
   16214:	str	r0, [fp, #-68]	; 0xffffffbc
   16218:	mov	r0, #540	; 0x21c
   1621c:	str	r8, [sp]
   16220:	str	r8, [sp, #4]
   16224:	str	r0, [sp, #8]
   16228:	movw	r1, #16896	; 0x4200
   1622c:	movt	r1, #3
   16230:	mov	r0, r4
   16234:	mov	r2, r7
   16238:	mov	r3, #0
   1623c:	bl	15040 <test_json@@Base>
   16240:	str	r0, [fp, #-72]	; 0xffffffb8
   16244:	movw	r0, #543	; 0x21f
   16248:	str	r8, [sp]
   1624c:	str	r8, [sp, #4]
   16250:	str	r0, [sp, #8]
   16254:	movw	r1, #16934	; 0x4226
   16258:	movt	r1, #3
   1625c:	mov	r0, r4
   16260:	mov	r2, r6
   16264:	mov	r3, #0
   16268:	bl	15040 <test_json@@Base>
   1626c:	str	r0, [fp, #-76]	; 0xffffffb4
   16270:	movw	r0, #547	; 0x223
   16274:	str	r8, [sp]
   16278:	str	r8, [sp, #4]
   1627c:	str	r0, [sp, #8]
   16280:	movw	r1, #16975	; 0x424f
   16284:	movt	r1, #3
   16288:	mov	r0, r4
   1628c:	mov	r2, sl
   16290:	mov	r3, #0
   16294:	bl	15040 <test_json@@Base>
   16298:	str	r0, [fp, #-80]	; 0xffffffb0
   1629c:	movw	r0, #551	; 0x227
   162a0:	str	r8, [sp]
   162a4:	str	r8, [sp, #4]
   162a8:	str	r0, [sp, #8]
   162ac:	movw	r1, #7917	; 0x1eed
   162b0:	movt	r1, #3
   162b4:	mov	r0, r4
   162b8:	mov	r2, sl
   162bc:	mov	r3, #0
   162c0:	bl	15040 <test_json@@Base>
   162c4:	str	r0, [fp, #-84]	; 0xffffffac
   162c8:	movw	r0, #555	; 0x22b
   162cc:	str	r8, [sp]
   162d0:	str	r8, [sp, #4]
   162d4:	str	r0, [sp, #8]
   162d8:	movw	r1, #17014	; 0x4276
   162dc:	movt	r1, #3
   162e0:	mov	r0, r4
   162e4:	mov	r2, sl
   162e8:	mov	r3, #0
   162ec:	bl	15040 <test_json@@Base>
   162f0:	str	r0, [fp, #-88]	; 0xffffffa8
   162f4:	movw	r0, #558	; 0x22e
   162f8:	str	r8, [sp]
   162fc:	str	r8, [sp, #4]
   16300:	str	r0, [sp, #8]
   16304:	movw	r1, #17035	; 0x428b
   16308:	movt	r1, #3
   1630c:	mov	r0, r4
   16310:	mov	r2, r7
   16314:	mov	r3, #0
   16318:	bl	15040 <test_json@@Base>
   1631c:	str	r0, [fp, #-92]	; 0xffffffa4
   16320:	movw	r0, #561	; 0x231
   16324:	str	r8, [sp]
   16328:	str	r8, [sp, #4]
   1632c:	str	r0, [sp, #8]
   16330:	movw	r1, #17070	; 0x42ae
   16334:	movt	r1, #3
   16338:	mov	r0, r4
   1633c:	mov	r2, r6
   16340:	mov	r3, #0
   16344:	bl	15040 <test_json@@Base>
   16348:	str	r0, [fp, #-96]	; 0xffffffa0
   1634c:	mov	r0, #564	; 0x234
   16350:	str	r8, [sp]
   16354:	str	r8, [sp, #4]
   16358:	str	r0, [sp, #8]
   1635c:	movw	r1, #17106	; 0x42d2
   16360:	movt	r1, #3
   16364:	mov	r0, r4
   16368:	mov	r2, r9
   1636c:	mov	r3, #0
   16370:	bl	15040 <test_json@@Base>
   16374:	str	r0, [fp, #-100]	; 0xffffff9c
   16378:	movw	r0, #567	; 0x237
   1637c:	str	r8, [sp]
   16380:	str	r8, [sp, #4]
   16384:	str	r0, [sp, #8]
   16388:	movw	r1, #17151	; 0x42ff
   1638c:	movt	r1, #3
   16390:	mov	r0, r4
   16394:	mov	r2, r9
   16398:	mov	r3, #0
   1639c:	bl	15040 <test_json@@Base>
   163a0:	str	r0, [fp, #-104]	; 0xffffff98
   163a4:	movw	r0, #570	; 0x23a
   163a8:	str	r8, [sp]
   163ac:	str	r8, [sp, #4]
   163b0:	str	r0, [sp, #8]
   163b4:	movw	r1, #17205	; 0x4335
   163b8:	movt	r1, #3
   163bc:	mov	r0, r4
   163c0:	mov	r2, r7
   163c4:	mov	r3, #0
   163c8:	bl	15040 <test_json@@Base>
   163cc:	str	r0, [fp, #-108]	; 0xffffff94
   163d0:	movw	r0, #573	; 0x23d
   163d4:	str	r8, [sp]
   163d8:	str	r8, [sp, #4]
   163dc:	str	r0, [sp, #8]
   163e0:	movw	r1, #17237	; 0x4355
   163e4:	movt	r1, #3
   163e8:	mov	r0, r4
   163ec:	mov	r2, r6
   163f0:	mov	r3, #0
   163f4:	bl	15040 <test_json@@Base>
   163f8:	str	r0, [fp, #-112]	; 0xffffff90
   163fc:	movw	r0, #577	; 0x241
   16400:	str	r8, [sp]
   16404:	str	r8, [sp, #4]
   16408:	str	r0, [sp, #8]
   1640c:	movw	r1, #17271	; 0x4377
   16410:	movt	r1, #3
   16414:	mov	r0, r4
   16418:	mov	r2, sl
   1641c:	mov	r3, #0
   16420:	bl	15040 <test_json@@Base>
   16424:	str	r0, [fp, #-116]	; 0xffffff8c
   16428:	movw	r0, #581	; 0x245
   1642c:	str	r8, [sp]
   16430:	str	r8, [sp, #4]
   16434:	str	r0, [sp, #8]
   16438:	movw	r1, #8630	; 0x21b6
   1643c:	movt	r1, #3
   16440:	mov	r0, r4
   16444:	mov	r2, sl
   16448:	mov	r3, #0
   1644c:	bl	15040 <test_json@@Base>
   16450:	str	r0, [fp, #-120]	; 0xffffff88
   16454:	movw	r0, #585	; 0x249
   16458:	str	r8, [sp]
   1645c:	str	r8, [sp, #4]
   16460:	str	r0, [sp, #8]
   16464:	movw	r1, #17304	; 0x4398
   16468:	movt	r1, #3
   1646c:	movw	r5, #17342	; 0x43be
   16470:	movt	r5, #3
   16474:	mov	r0, r4
   16478:	mov	r2, r5
   1647c:	mov	r3, #0
   16480:	bl	15040 <test_json@@Base>
   16484:	str	r0, [fp, #-124]	; 0xffffff84
   16488:	movw	r0, #591	; 0x24f
   1648c:	str	r8, [sp]
   16490:	str	r8, [sp, #4]
   16494:	str	r0, [sp, #8]
   16498:	movw	r1, #17381	; 0x43e5
   1649c:	movt	r1, #3
   164a0:	mov	r0, r4
   164a4:	mov	r2, r5
   164a8:	mov	r3, #0
   164ac:	bl	15040 <test_json@@Base>
   164b0:	str	r0, [fp, #-128]	; 0xffffff80
   164b4:	movw	r0, #594	; 0x252
   164b8:	str	r8, [sp]
   164bc:	str	r8, [sp, #4]
   164c0:	str	r0, [sp, #8]
   164c4:	movw	r1, #17418	; 0x440a
   164c8:	movt	r1, #3
   164cc:	mov	r0, r4
   164d0:	mov	r2, r5
   164d4:	mov	r3, #0
   164d8:	bl	15040 <test_json@@Base>
   164dc:	str	r0, [fp, #-132]	; 0xffffff7c
   164e0:	movw	r0, #597	; 0x255
   164e4:	str	r8, [sp]
   164e8:	str	r8, [sp, #4]
   164ec:	str	r0, [sp, #8]
   164f0:	movw	r1, #17455	; 0x442f
   164f4:	movt	r1, #3
   164f8:	mov	r0, r4
   164fc:	mov	r2, r9
   16500:	mov	r3, #0
   16504:	bl	15040 <test_json@@Base>
   16508:	str	r0, [fp, #-136]	; 0xffffff78
   1650c:	movw	r0, #601	; 0x259
   16510:	str	r8, [sp]
   16514:	str	r8, [sp, #4]
   16518:	str	r0, [sp, #8]
   1651c:	movw	r1, #17501	; 0x445d
   16520:	movt	r1, #3
   16524:	mov	r0, r4
   16528:	mov	r2, r7
   1652c:	mov	r3, #0
   16530:	bl	15040 <test_json@@Base>
   16534:	str	r0, [fp, #-140]	; 0xffffff74
   16538:	mov	r0, #604	; 0x25c
   1653c:	str	r8, [sp]
   16540:	str	r8, [sp, #4]
   16544:	str	r0, [sp, #8]
   16548:	movw	r1, #17534	; 0x447e
   1654c:	movt	r1, #3
   16550:	mov	r0, r4
   16554:	mov	r2, r6
   16558:	mov	r3, #0
   1655c:	bl	15040 <test_json@@Base>
   16560:	str	r0, [fp, #-144]	; 0xffffff70
   16564:	movw	r0, #607	; 0x25f
   16568:	str	r8, [sp]
   1656c:	str	r8, [sp, #4]
   16570:	str	r0, [sp, #8]
   16574:	movw	r1, #17567	; 0x449f
   16578:	movt	r1, #3
   1657c:	movw	r2, #17600	; 0x44c0
   16580:	movt	r2, #3
   16584:	mov	r0, r4
   16588:	mov	r3, #0
   1658c:	bl	15040 <test_json@@Base>
   16590:	str	r0, [fp, #-148]	; 0xffffff6c
   16594:	movw	r0, #610	; 0x262
   16598:	str	r8, [sp]
   1659c:	str	r8, [sp, #4]
   165a0:	str	r0, [sp, #8]
   165a4:	movw	r1, #17638	; 0x44e6
   165a8:	movt	r1, #3
   165ac:	mov	r0, r4
   165b0:	mov	r2, r9
   165b4:	mov	r3, #0
   165b8:	bl	15040 <test_json@@Base>
   165bc:	str	r0, [fp, #-152]	; 0xffffff68
   165c0:	movw	r0, #613	; 0x265
   165c4:	str	r8, [sp]
   165c8:	str	r8, [sp, #4]
   165cc:	str	r0, [sp, #8]
   165d0:	movw	r1, #17672	; 0x4508
   165d4:	movt	r1, #3
   165d8:	movw	r2, #17706	; 0x452a
   165dc:	movt	r2, #3
   165e0:	mov	r0, r4
   165e4:	mov	r3, #0
   165e8:	bl	15040 <test_json@@Base>
   165ec:	str	r0, [sp, #156]	; 0x9c
   165f0:	mov	r0, #616	; 0x268
   165f4:	str	r8, [sp]
   165f8:	str	r8, [sp, #4]
   165fc:	str	r0, [sp, #8]
   16600:	movw	r1, #17736	; 0x4548
   16604:	movt	r1, #3
   16608:	movw	r2, #17770	; 0x456a
   1660c:	movt	r2, #3
   16610:	mov	r0, r4
   16614:	mov	r3, #0
   16618:	bl	15040 <test_json@@Base>
   1661c:	str	r0, [sp, #152]	; 0x98
   16620:	movw	r0, #619	; 0x26b
   16624:	str	r8, [sp]
   16628:	str	r8, [sp, #4]
   1662c:	str	r0, [sp, #8]
   16630:	movw	r1, #17800	; 0x4588
   16634:	movt	r1, #3
   16638:	movw	r2, #17833	; 0x45a9
   1663c:	movt	r2, #3
   16640:	mov	r0, r4
   16644:	mov	r3, #0
   16648:	bl	15040 <test_json@@Base>
   1664c:	str	r0, [sp, #148]	; 0x94
   16650:	movw	r0, #622	; 0x26e
   16654:	str	r8, [sp]
   16658:	str	r8, [sp, #4]
   1665c:	str	r0, [sp, #8]
   16660:	movw	r1, #17862	; 0x45c6
   16664:	movt	r1, #3
   16668:	mov	r0, r4
   1666c:	mov	r2, r7
   16670:	mov	r3, #0
   16674:	bl	15040 <test_json@@Base>
   16678:	str	r0, [sp, #144]	; 0x90
   1667c:	movw	r0, #625	; 0x271
   16680:	str	r8, [sp]
   16684:	str	r8, [sp, #4]
   16688:	str	r0, [sp, #8]
   1668c:	movw	r1, #17905	; 0x45f1
   16690:	movt	r1, #3
   16694:	mov	r0, r4
   16698:	mov	r2, r7
   1669c:	mov	r3, #0
   166a0:	bl	15040 <test_json@@Base>
   166a4:	str	r0, [sp, #140]	; 0x8c
   166a8:	mov	r0, #628	; 0x274
   166ac:	str	r8, [sp]
   166b0:	str	r8, [sp, #4]
   166b4:	str	r0, [sp, #8]
   166b8:	movw	r6, #17963	; 0x462b
   166bc:	movt	r6, #3
   166c0:	movw	r5, #18005	; 0x4655
   166c4:	movt	r5, #3
   166c8:	mov	r0, r4
   166cc:	mov	r1, r6
   166d0:	mov	r2, r5
   166d4:	mov	r3, #0
   166d8:	bl	15040 <test_json@@Base>
   166dc:	str	r0, [sp, #136]	; 0x88
   166e0:	movw	r0, #631	; 0x277
   166e4:	str	r8, [sp]
   166e8:	str	r8, [sp, #4]
   166ec:	str	r0, [sp, #8]
   166f0:	mov	r0, r4
   166f4:	mov	r1, r6
   166f8:	mov	r2, r5
   166fc:	mov	r3, #0
   16700:	bl	15040 <test_json@@Base>
   16704:	str	r0, [sp, #132]	; 0x84
   16708:	movw	r0, #634	; 0x27a
   1670c:	str	r8, [sp]
   16710:	str	r8, [sp, #4]
   16714:	str	r0, [sp, #8]
   16718:	movw	r1, #18031	; 0x466f
   1671c:	movt	r1, #3
   16720:	movw	r2, #18112	; 0x46c0
   16724:	movt	r2, #3
   16728:	mov	r0, r4
   1672c:	mov	r3, #0
   16730:	bl	15040 <test_json@@Base>
   16734:	str	r0, [sp, #128]	; 0x80
   16738:	movw	r0, #638	; 0x27e
   1673c:	str	r8, [sp]
   16740:	str	r8, [sp, #4]
   16744:	str	r0, [sp, #8]
   16748:	movw	r1, #18183	; 0x4707
   1674c:	movt	r1, #3
   16750:	movw	r2, #18268	; 0x475c
   16754:	movt	r2, #3
   16758:	mov	r0, r4
   1675c:	mov	r3, #0
   16760:	bl	15040 <test_json@@Base>
   16764:	str	r0, [sp, #124]	; 0x7c
   16768:	movw	r0, #642	; 0x282
   1676c:	str	r8, [sp]
   16770:	str	r8, [sp, #4]
   16774:	str	r0, [sp, #8]
   16778:	movw	r1, #18342	; 0x47a6
   1677c:	movt	r1, #3
   16780:	movw	r2, #18453	; 0x4815
   16784:	movt	r2, #3
   16788:	mov	r0, r4
   1678c:	mov	r3, #0
   16790:	bl	15040 <test_json@@Base>
   16794:	str	r0, [sp, #120]	; 0x78
   16798:	movw	r0, #646	; 0x286
   1679c:	str	r8, [sp]
   167a0:	str	r8, [sp, #4]
   167a4:	str	r0, [sp, #8]
   167a8:	movw	r1, #18551	; 0x4877
   167ac:	movt	r1, #3
   167b0:	mov	r0, r4
   167b4:	mov	r2, sl
   167b8:	mov	r3, #0
   167bc:	bl	15040 <test_json@@Base>
   167c0:	str	r0, [sp, #116]	; 0x74
   167c4:	movw	r0, #649	; 0x289
   167c8:	str	r8, [sp]
   167cc:	str	r8, [sp, #4]
   167d0:	str	r0, [sp, #8]
   167d4:	movw	r1, #18594	; 0x48a2
   167d8:	movt	r1, #3
   167dc:	mov	r0, r4
   167e0:	mov	r2, sl
   167e4:	mov	r3, #0
   167e8:	bl	15040 <test_json@@Base>
   167ec:	str	r0, [sp, #112]	; 0x70
   167f0:	movw	r0, #653	; 0x28d
   167f4:	str	r8, [sp]
   167f8:	str	r8, [sp, #4]
   167fc:	str	r0, [sp, #8]
   16800:	movw	r1, #18632	; 0x48c8
   16804:	movt	r1, #3
   16808:	mov	r0, r4
   1680c:	mov	r2, r7
   16810:	mov	r3, #0
   16814:	bl	15040 <test_json@@Base>
   16818:	str	r0, [sp, #108]	; 0x6c
   1681c:	mov	r0, #656	; 0x290
   16820:	str	r8, [sp]
   16824:	str	r8, [sp, #4]
   16828:	str	r0, [sp, #8]
   1682c:	movw	r1, #18661	; 0x48e5
   16830:	movt	r1, #3
   16834:	mov	r0, r4
   16838:	movw	r2, #16710	; 0x4146
   1683c:	movt	r2, #3
   16840:	mov	r3, #0
   16844:	bl	15040 <test_json@@Base>
   16848:	str	r0, [sp, #104]	; 0x68
   1684c:	movw	r0, #659	; 0x293
   16850:	str	r8, [sp]
   16854:	str	r8, [sp, #4]
   16858:	str	r0, [sp, #8]
   1685c:	movw	r1, #18690	; 0x4902
   16860:	movt	r1, #3
   16864:	mov	r0, r4
   16868:	movw	r2, #17600	; 0x44c0
   1686c:	movt	r2, #3
   16870:	mov	r3, #0
   16874:	bl	15040 <test_json@@Base>
   16878:	str	r0, [sp, #100]	; 0x64
   1687c:	movw	r0, #662	; 0x296
   16880:	str	r8, [sp]
   16884:	str	r8, [sp, #4]
   16888:	str	r0, [sp, #8]
   1688c:	movw	r1, #18719	; 0x491f
   16890:	movt	r1, #3
   16894:	mov	r0, r4
   16898:	mov	r2, r9
   1689c:	mov	r3, #0
   168a0:	bl	15040 <test_json@@Base>
   168a4:	str	r0, [sp, #96]	; 0x60
   168a8:	movw	r0, #665	; 0x299
   168ac:	str	r8, [sp]
   168b0:	str	r8, [sp, #4]
   168b4:	str	r0, [sp, #8]
   168b8:	movw	r1, #18749	; 0x493d
   168bc:	movt	r1, #3
   168c0:	mov	r0, r4
   168c4:	movw	r2, #17706	; 0x452a
   168c8:	movt	r2, #3
   168cc:	mov	r3, #0
   168d0:	bl	15040 <test_json@@Base>
   168d4:	str	r0, [sp, #92]	; 0x5c
   168d8:	mov	r0, #668	; 0x29c
   168dc:	str	r8, [sp]
   168e0:	str	r8, [sp, #4]
   168e4:	str	r0, [sp, #8]
   168e8:	movw	r1, #18779	; 0x495b
   168ec:	movt	r1, #3
   168f0:	mov	r0, r4
   168f4:	movw	r2, #17770	; 0x456a
   168f8:	movt	r2, #3
   168fc:	mov	r3, #0
   16900:	bl	15040 <test_json@@Base>
   16904:	str	r0, [sp, #88]	; 0x58
   16908:	movw	r0, #671	; 0x29f
   1690c:	str	r8, [sp]
   16910:	str	r8, [sp, #4]
   16914:	str	r0, [sp, #8]
   16918:	movw	r1, #18809	; 0x4979
   1691c:	movt	r1, #3
   16920:	mov	r0, r4
   16924:	movw	r2, #17833	; 0x45a9
   16928:	movt	r2, #3
   1692c:	mov	r3, #0
   16930:	bl	15040 <test_json@@Base>
   16934:	str	r0, [sp, #84]	; 0x54
   16938:	movw	r0, #674	; 0x2a2
   1693c:	str	r8, [sp]
   16940:	str	r8, [sp, #4]
   16944:	str	r0, [sp, #8]
   16948:	movw	r1, #18838	; 0x4996
   1694c:	movt	r1, #3
   16950:	mov	r0, r4
   16954:	mov	r2, r7
   16958:	mov	r3, #0
   1695c:	bl	15040 <test_json@@Base>
   16960:	str	r0, [sp, #80]	; 0x50
   16964:	movw	r0, #677	; 0x2a5
   16968:	str	r8, [sp]
   1696c:	str	r8, [sp, #4]
   16970:	str	r0, [sp, #8]
   16974:	movw	r1, #18875	; 0x49bb
   16978:	movt	r1, #3
   1697c:	mov	r0, r4
   16980:	mov	r2, r7
   16984:	mov	r3, #0
   16988:	bl	15040 <test_json@@Base>
   1698c:	str	r0, [sp, #76]	; 0x4c
   16990:	mov	r0, #680	; 0x2a8
   16994:	str	r8, [sp]
   16998:	str	r8, [sp, #4]
   1699c:	str	r0, [sp, #8]
   169a0:	movw	r6, #18927	; 0x49ef
   169a4:	movt	r6, #3
   169a8:	mov	r0, r4
   169ac:	mov	r1, r6
   169b0:	mov	r2, r5
   169b4:	mov	r3, #0
   169b8:	bl	15040 <test_json@@Base>
   169bc:	str	r0, [sp, #72]	; 0x48
   169c0:	movw	r0, #683	; 0x2ab
   169c4:	str	r8, [sp]
   169c8:	str	r8, [sp, #4]
   169cc:	str	r0, [sp, #8]
   169d0:	mov	r0, r4
   169d4:	mov	r1, r6
   169d8:	mov	r2, r5
   169dc:	mov	r3, #0
   169e0:	bl	15040 <test_json@@Base>
   169e4:	str	r0, [sp, #68]	; 0x44
   169e8:	movw	r0, #686	; 0x2ae
   169ec:	str	r8, [sp]
   169f0:	str	r8, [sp, #4]
   169f4:	str	r0, [sp, #8]
   169f8:	movw	r1, #18963	; 0x4a13
   169fc:	movt	r1, #3
   16a00:	mov	r0, r4
   16a04:	movw	r2, #18112	; 0x46c0
   16a08:	movt	r2, #3
   16a0c:	mov	r3, #0
   16a10:	bl	15040 <test_json@@Base>
   16a14:	str	r0, [sp, #64]	; 0x40
   16a18:	movw	r0, #690	; 0x2b2
   16a1c:	str	r8, [sp]
   16a20:	str	r8, [sp, #4]
   16a24:	str	r0, [sp, #8]
   16a28:	movw	r1, #19034	; 0x4a5a
   16a2c:	movt	r1, #3
   16a30:	mov	r0, r4
   16a34:	movw	r2, #18268	; 0x475c
   16a38:	movt	r2, #3
   16a3c:	mov	r3, #0
   16a40:	bl	15040 <test_json@@Base>
   16a44:	str	r0, [sp, #60]	; 0x3c
   16a48:	movw	r0, #694	; 0x2b6
   16a4c:	str	r8, [sp]
   16a50:	str	r8, [sp, #4]
   16a54:	str	r0, [sp, #8]
   16a58:	movw	r1, #19109	; 0x4aa5
   16a5c:	movt	r1, #3
   16a60:	mov	r0, r4
   16a64:	movw	r2, #18453	; 0x4815
   16a68:	movt	r2, #3
   16a6c:	mov	r3, #0
   16a70:	bl	15040 <test_json@@Base>
   16a74:	str	r0, [sp, #56]	; 0x38
   16a78:	movw	r0, #698	; 0x2ba
   16a7c:	str	r8, [sp]
   16a80:	str	r8, [sp, #4]
   16a84:	str	r0, [sp, #8]
   16a88:	movw	r1, #19204	; 0x4b04
   16a8c:	movt	r1, #3
   16a90:	mov	r0, r4
   16a94:	mov	r2, sl
   16a98:	mov	r3, #0
   16a9c:	bl	15040 <test_json@@Base>
   16aa0:	str	r0, [sp, #52]	; 0x34
   16aa4:	movw	r0, #701	; 0x2bd
   16aa8:	str	r8, [sp]
   16aac:	str	r8, [sp, #4]
   16ab0:	str	r0, [sp, #8]
   16ab4:	movw	r1, #19241	; 0x4b29
   16ab8:	movt	r1, #3
   16abc:	mov	r0, r4
   16ac0:	mov	r2, sl
   16ac4:	mov	r3, #0
   16ac8:	bl	15040 <test_json@@Base>
   16acc:	str	r0, [sp, #48]	; 0x30
   16ad0:	movw	r0, #711	; 0x2c7
   16ad4:	str	r8, [sp]
   16ad8:	str	r8, [sp, #4]
   16adc:	str	r0, [sp, #8]
   16ae0:	movw	r1, #19275	; 0x4b4b
   16ae4:	movt	r1, #3
   16ae8:	movw	r5, #19368	; 0x4ba8
   16aec:	movt	r5, #3
   16af0:	mov	r0, r4
   16af4:	mov	r2, r5
   16af8:	mov	r3, #0
   16afc:	bl	15040 <test_json@@Base>
   16b00:	str	r0, [sp, #44]	; 0x2c
   16b04:	mov	r0, #716	; 0x2cc
   16b08:	str	r8, [sp]
   16b0c:	str	r8, [sp, #4]
   16b10:	str	r0, [sp, #8]
   16b14:	movw	r1, #19462	; 0x4c06
   16b18:	movt	r1, #3
   16b1c:	mov	r0, r4
   16b20:	mov	r2, r5
   16b24:	mov	r3, #0
   16b28:	bl	15040 <test_json@@Base>
   16b2c:	str	r0, [sp, #40]	; 0x28
   16b30:	movw	r0, #731	; 0x2db
   16b34:	str	r8, [sp]
   16b38:	str	r8, [sp, #4]
   16b3c:	str	r0, [sp, #8]
   16b40:	movw	r1, #19571	; 0x4c73
   16b44:	movt	r1, #3
   16b48:	movw	r2, #19632	; 0x4cb0
   16b4c:	movt	r2, #3
   16b50:	mov	r0, r4
   16b54:	mov	r3, #0
   16b58:	bl	15040 <test_json@@Base>
   16b5c:	str	r0, [sp, #36]	; 0x24
   16b60:	movw	r0, #734	; 0x2de
   16b64:	str	r8, [sp]
   16b68:	str	r8, [sp, #4]
   16b6c:	str	r0, [sp, #8]
   16b70:	movw	r1, #19680	; 0x4ce0
   16b74:	movt	r1, #3
   16b78:	movw	r2, #19706	; 0x4cfa
   16b7c:	movt	r2, #3
   16b80:	mov	r0, r4
   16b84:	mov	r3, #0
   16b88:	bl	15040 <test_json@@Base>
   16b8c:	str	r0, [sp, #32]
   16b90:	movw	r0, #738	; 0x2e2
   16b94:	str	r8, [sp]
   16b98:	str	r8, [sp, #4]
   16b9c:	str	r0, [sp, #8]
   16ba0:	movw	r1, #19724	; 0x4d0c
   16ba4:	movt	r1, #3
   16ba8:	movw	r5, #19796	; 0x4d54
   16bac:	movt	r5, #3
   16bb0:	mov	r0, r4
   16bb4:	mov	r2, r5
   16bb8:	mov	r3, #0
   16bbc:	bl	15040 <test_json@@Base>
   16bc0:	str	r0, [sp, #28]
   16bc4:	movw	r0, #750	; 0x2ee
   16bc8:	str	r8, [sp]
   16bcc:	str	r8, [sp, #4]
   16bd0:	str	r0, [sp, #8]
   16bd4:	movw	r1, #19861	; 0x4d95
   16bd8:	movt	r1, #3
   16bdc:	mov	r0, r4
   16be0:	mov	r2, r5
   16be4:	mov	r3, #0
   16be8:	bl	15040 <test_json@@Base>
   16bec:	str	r0, [sp, #24]
   16bf0:	movw	r0, #766	; 0x2fe
   16bf4:	str	r8, [sp]
   16bf8:	str	r8, [sp, #4]
   16bfc:	str	r0, [sp, #8]
   16c00:	movw	r1, #20018	; 0x4e32
   16c04:	movt	r1, #3
   16c08:	movw	r2, #20057	; 0x4e59
   16c0c:	movt	r2, #3
   16c10:	mov	r0, r4
   16c14:	mov	r3, #0
   16c18:	bl	15040 <test_json@@Base>
   16c1c:	str	r0, [sp, #20]
   16c20:	movw	r0, #770	; 0x302
   16c24:	str	r8, [sp]
   16c28:	str	r8, [sp, #4]
   16c2c:	str	r0, [sp, #8]
   16c30:	movw	r1, #20091	; 0x4e7b
   16c34:	movt	r1, #3
   16c38:	movw	r2, #20138	; 0x4eaa
   16c3c:	movt	r2, #3
   16c40:	mov	r0, r4
   16c44:	mov	r3, #0
   16c48:	bl	15040 <test_json@@Base>
   16c4c:	str	r0, [sp, #16]
   16c50:	mov	r0, #776	; 0x308
   16c54:	str	r8, [sp]
   16c58:	str	r8, [sp, #4]
   16c5c:	str	r0, [sp, #8]
   16c60:	movw	r1, #20180	; 0x4ed4
   16c64:	movt	r1, #3
   16c68:	movw	r2, #20303	; 0x4f4f
   16c6c:	movt	r2, #3
   16c70:	mov	r0, r4
   16c74:	mov	r3, #0
   16c78:	bl	15040 <test_json@@Base>
   16c7c:	mov	r7, r0
   16c80:	movw	r0, #781	; 0x30d
   16c84:	str	r8, [sp]
   16c88:	str	r8, [sp, #4]
   16c8c:	str	r0, [sp, #8]
   16c90:	movw	r1, #20415	; 0x4fbf
   16c94:	movt	r1, #3
   16c98:	mov	r0, r4
   16c9c:	mov	r2, sl
   16ca0:	mov	r3, #0
   16ca4:	bl	15040 <test_json@@Base>
   16ca8:	mov	r5, r0
   16cac:	movw	r0, #786	; 0x312
   16cb0:	str	r8, [sp]
   16cb4:	str	r8, [sp, #4]
   16cb8:	str	r0, [sp, #8]
   16cbc:	movw	r1, #20535	; 0x5037
   16cc0:	movt	r1, #3
   16cc4:	movw	r2, #20657	; 0x50b1
   16cc8:	movt	r2, #3
   16ccc:	mov	r0, r4
   16cd0:	mov	r3, #0
   16cd4:	bl	15040 <test_json@@Base>
   16cd8:	mov	r6, r0
   16cdc:	movw	r0, #791	; 0x317
   16ce0:	str	r8, [sp]
   16ce4:	str	r8, [sp, #4]
   16ce8:	str	r0, [sp, #8]
   16cec:	movw	r1, #20768	; 0x5120
   16cf0:	movt	r1, #3
   16cf4:	movw	r2, #20907	; 0x51ab
   16cf8:	movt	r2, #3
   16cfc:	mov	r0, r4
   16d00:	mov	r3, #0
   16d04:	bl	15040 <test_json@@Base>
   16d08:	mov	sl, r0
   16d0c:	mov	r0, #796	; 0x31c
   16d10:	str	r8, [sp]
   16d14:	str	r8, [sp, #4]
   16d18:	str	r0, [sp, #8]
   16d1c:	movw	r1, #21033	; 0x5229
   16d20:	movt	r1, #3
   16d24:	movw	r2, #21156	; 0x52a4
   16d28:	movt	r2, #3
   16d2c:	mov	r0, r4
   16d30:	mov	r3, #0
   16d34:	bl	15040 <test_json@@Base>
   16d38:	mov	r9, r0
   16d3c:	movw	r0, #801	; 0x321
   16d40:	str	r8, [sp]
   16d44:	str	r8, [sp, #4]
   16d48:	str	r0, [sp, #8]
   16d4c:	movw	r1, #21268	; 0x5314
   16d50:	movt	r1, #3
   16d54:	movw	r2, #21406	; 0x539e
   16d58:	movt	r2, #3
   16d5c:	mov	r0, r4
   16d60:	mov	r3, #0
   16d64:	bl	15040 <test_json@@Base>
   16d68:	movw	r1, #806	; 0x326
   16d6c:	str	r8, [sp]
   16d70:	str	r8, [sp, #4]
   16d74:	str	r1, [sp, #8]
   16d78:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16d7c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16d80:	orr	r1, r2, r1
   16d84:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16d88:	orr	r1, r1, r2
   16d8c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16d90:	orr	r1, r1, r2
   16d94:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16d98:	orr	r1, r1, r2
   16d9c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16da0:	orr	r1, r1, r2
   16da4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16da8:	orr	r1, r1, r2
   16dac:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16db0:	orr	r1, r1, r2
   16db4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16db8:	orr	r1, r1, r2
   16dbc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16dc0:	orr	r1, r1, r2
   16dc4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16dc8:	orr	r1, r1, r2
   16dcc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16dd0:	orr	r1, r1, r2
   16dd4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16dd8:	orr	r1, r1, r2
   16ddc:	ldr	r2, [fp, #-84]	; 0xffffffac
   16de0:	orr	r1, r1, r2
   16de4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16de8:	orr	r1, r1, r2
   16dec:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16df0:	orr	r1, r1, r2
   16df4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16df8:	orr	r1, r1, r2
   16dfc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   16e00:	orr	r1, r1, r2
   16e04:	ldr	r2, [fp, #-104]	; 0xffffff98
   16e08:	orr	r1, r1, r2
   16e0c:	ldr	r2, [fp, #-108]	; 0xffffff94
   16e10:	orr	r1, r1, r2
   16e14:	ldr	r2, [fp, #-112]	; 0xffffff90
   16e18:	orr	r1, r1, r2
   16e1c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16e20:	orr	r1, r1, r2
   16e24:	ldr	r2, [fp, #-120]	; 0xffffff88
   16e28:	orr	r1, r1, r2
   16e2c:	ldr	r2, [fp, #-124]	; 0xffffff84
   16e30:	orr	r1, r1, r2
   16e34:	ldr	r2, [fp, #-128]	; 0xffffff80
   16e38:	orr	r1, r1, r2
   16e3c:	ldr	r2, [fp, #-132]	; 0xffffff7c
   16e40:	orr	r1, r1, r2
   16e44:	ldr	r2, [fp, #-136]	; 0xffffff78
   16e48:	orr	r1, r1, r2
   16e4c:	ldr	r2, [fp, #-140]	; 0xffffff74
   16e50:	orr	r1, r1, r2
   16e54:	ldr	r2, [fp, #-144]	; 0xffffff70
   16e58:	orr	r1, r1, r2
   16e5c:	ldr	r2, [fp, #-148]	; 0xffffff6c
   16e60:	orr	r1, r1, r2
   16e64:	ldr	r2, [fp, #-152]	; 0xffffff68
   16e68:	orr	r1, r1, r2
   16e6c:	ldr	r2, [sp, #156]	; 0x9c
   16e70:	orr	r1, r1, r2
   16e74:	ldr	r2, [sp, #152]	; 0x98
   16e78:	orr	r1, r1, r2
   16e7c:	ldr	r2, [sp, #148]	; 0x94
   16e80:	orr	r1, r1, r2
   16e84:	ldr	r2, [sp, #144]	; 0x90
   16e88:	orr	r1, r1, r2
   16e8c:	ldr	r2, [sp, #140]	; 0x8c
   16e90:	orr	r1, r1, r2
   16e94:	ldr	r2, [sp, #136]	; 0x88
   16e98:	orr	r1, r1, r2
   16e9c:	ldr	r2, [sp, #132]	; 0x84
   16ea0:	orr	r1, r1, r2
   16ea4:	ldr	r2, [sp, #128]	; 0x80
   16ea8:	orr	r1, r1, r2
   16eac:	ldr	r2, [sp, #124]	; 0x7c
   16eb0:	orr	r1, r1, r2
   16eb4:	ldr	r2, [sp, #120]	; 0x78
   16eb8:	orr	r1, r1, r2
   16ebc:	ldr	r2, [sp, #116]	; 0x74
   16ec0:	orr	r1, r1, r2
   16ec4:	ldr	r2, [sp, #112]	; 0x70
   16ec8:	orr	r1, r1, r2
   16ecc:	ldr	r2, [sp, #108]	; 0x6c
   16ed0:	orr	r1, r1, r2
   16ed4:	ldr	r2, [sp, #104]	; 0x68
   16ed8:	orr	r1, r1, r2
   16edc:	ldr	r2, [sp, #100]	; 0x64
   16ee0:	orr	r1, r1, r2
   16ee4:	ldr	r2, [sp, #96]	; 0x60
   16ee8:	orr	r1, r1, r2
   16eec:	ldr	r2, [sp, #92]	; 0x5c
   16ef0:	orr	r1, r1, r2
   16ef4:	ldr	r2, [sp, #88]	; 0x58
   16ef8:	orr	r1, r1, r2
   16efc:	ldr	r2, [sp, #84]	; 0x54
   16f00:	orr	r1, r1, r2
   16f04:	ldr	r2, [sp, #80]	; 0x50
   16f08:	orr	r1, r1, r2
   16f0c:	ldr	r2, [sp, #76]	; 0x4c
   16f10:	orr	r1, r1, r2
   16f14:	ldr	r2, [sp, #72]	; 0x48
   16f18:	orr	r1, r1, r2
   16f1c:	ldr	r2, [sp, #68]	; 0x44
   16f20:	orr	r1, r1, r2
   16f24:	ldr	r2, [sp, #64]	; 0x40
   16f28:	orr	r1, r1, r2
   16f2c:	ldr	r2, [sp, #60]	; 0x3c
   16f30:	orr	r1, r1, r2
   16f34:	ldr	r2, [sp, #56]	; 0x38
   16f38:	orr	r1, r1, r2
   16f3c:	ldr	r2, [sp, #52]	; 0x34
   16f40:	orr	r1, r1, r2
   16f44:	ldr	r2, [sp, #48]	; 0x30
   16f48:	orr	r1, r1, r2
   16f4c:	ldr	r2, [sp, #44]	; 0x2c
   16f50:	orr	r1, r1, r2
   16f54:	ldr	r2, [sp, #40]	; 0x28
   16f58:	orr	r1, r1, r2
   16f5c:	ldr	r2, [sp, #36]	; 0x24
   16f60:	orr	r1, r1, r2
   16f64:	ldr	r2, [sp, #32]
   16f68:	orr	r1, r1, r2
   16f6c:	ldr	r2, [sp, #28]
   16f70:	orr	r1, r1, r2
   16f74:	ldr	r2, [sp, #24]
   16f78:	orr	r1, r1, r2
   16f7c:	ldr	r2, [sp, #20]
   16f80:	orr	r1, r1, r2
   16f84:	ldr	r2, [sp, #16]
   16f88:	orr	r1, r1, r2
   16f8c:	orr	r1, r1, r7
   16f90:	orr	r1, r1, r5
   16f94:	orr	r1, r1, r6
   16f98:	orr	r1, r1, sl
   16f9c:	orr	r1, r1, r9
   16fa0:	orr	r5, r1, r0
   16fa4:	movw	r1, #21533	; 0x541d
   16fa8:	movt	r1, #3
   16fac:	movw	r2, #21676	; 0x54ac
   16fb0:	movt	r2, #3
   16fb4:	mov	r0, r4
   16fb8:	mov	r3, #0
   16fbc:	bl	15040 <test_json@@Base>
   16fc0:	orrs	r0, r5, r0
   16fc4:	mvnne	r0, #0
   16fc8:	sub	sp, fp, #28
   16fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fd0:	mov	r1, #2
   16fd4:	strb	r1, [r0, #25]
   16fd8:	bx	lr
   16fdc:	push	{r4, sl, fp, lr}
   16fe0:	add	fp, sp, #8
   16fe4:	mov	r4, r0
   16fe8:	bl	16fd0 <main@@Base+0xef4>
   16fec:	mov	r0, r4
   16ff0:	bl	17000 <main@@Base+0xf24>
   16ff4:	mov	r0, r4
   16ff8:	pop	{r4, sl, fp, lr}
   16ffc:	b	1700c <main@@Base+0xf30>
   17000:	mov	r1, #1
   17004:	strb	r1, [r0, #26]
   17008:	bx	lr
   1700c:	mov	r1, #0
   17010:	strb	r1, [r0, #27]
   17014:	bx	lr
   17018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1701c:	add	fp, sp, #28
   17020:	sub	sp, sp, #4
   17024:	vpush	{d8-d9}
   17028:	sub	sp, sp, #56	; 0x38
   1702c:	mov	r6, r3
   17030:	mov	r4, r2
   17034:	mov	r9, r1
   17038:	mov	r1, #0
   1703c:	str	r1, [r3]
   17040:	str	r0, [sp, #28]
   17044:	ldr	r0, [r0]
   17048:	mov	r1, #36	; 0x24
   1704c:	bl	230c4 <flatcc_builder_start_table@@Base>
   17050:	cmp	r0, #0
   17054:	beq	17084 <main@@Base+0xfa8>
   17058:	ldr	r0, [sp, #28]
   1705c:	mov	r1, r9
   17060:	mov	r2, r4
   17064:	mov	r3, #33	; 0x21
   17068:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1706c:	mov	r9, r0
   17070:	mov	r0, r9
   17074:	sub	sp, fp, #48	; 0x30
   17078:	vpop	{d8-d9}
   1707c:	add	sp, sp, #4
   17080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17084:	add	r0, sp, #44	; 0x2c
   17088:	str	r0, [sp]
   1708c:	ldr	r0, [sp, #28]
   17090:	mov	r1, r9
   17094:	mov	r2, r4
   17098:	mov	r3, #1
   1709c:	bl	28240 <flatcc_json_parser_prepare_unions@@Base>
   170a0:	cmp	r0, r4
   170a4:	beq	17058 <main@@Base+0xf7c>
   170a8:	add	r3, sp, #52	; 0x34
   170ac:	ldr	r0, [sp, #28]
   170b0:	mov	r1, r9
   170b4:	mov	r2, r4
   170b8:	bl	19f88 <main@@Base+0x3eac>
   170bc:	mov	r9, r0
   170c0:	ldr	r0, [sp, #52]	; 0x34
   170c4:	cmp	r0, #0
   170c8:	beq	195a8 <main@@Base+0x34cc>
   170cc:	vmov.f32	s16, #8	; 0x40400000  3.0
   170d0:	vldr	s18, [pc, #1016]	; 174d0 <main@@Base+0x13f4>
   170d4:	movw	r0, #13407	; 0x345f
   170d8:	movt	r0, #29494	; 0x7336
   170dc:	sub	r0, r0, #512	; 0x200
   170e0:	sub	r0, r0, #196608	; 0x30000
   170e4:	add	r1, sp, #16
   170e8:	stm	r1, {r0, r4, r6}
   170ec:	b	17e70 <main@@Base+0x1d94>
   170f0:	ldr	r0, [sp, #28]
   170f4:	mov	r1, r8
   170f8:	b	19570 <main@@Base+0x3494>
   170fc:	ldr	r0, [sp, #28]
   17100:	b	17988 <main@@Base+0x18ac>
   17104:	and	r0, r1, #-16777216	; 0xff000000
   17108:	teq	r0, #1728053248	; 0x67000000
   1710c:	add	r8, sp, #52	; 0x34
   17110:	bne	173e4 <main@@Base+0x1308>
   17114:	ldr	r0, [sp, #28]
   17118:	mov	r1, r7
   1711c:	mov	r2, r4
   17120:	mov	r3, #1
   17124:	bl	1a064 <main@@Base+0x3f88>
   17128:	mov	r9, r0
   1712c:	cmp	r7, r0
   17130:	beq	173fc <main@@Base+0x1320>
   17134:	ldr	r0, [sp, #28]
   17138:	ldr	r0, [r0]
   1713c:	bl	22e80 <flatcc_builder_start_offset_vector@@Base>
   17140:	cmp	r0, #0
   17144:	bne	17058 <main@@Base+0xf7c>
   17148:	ldr	r0, [sp, #28]
   1714c:	mov	r1, r9
   17150:	mov	r2, r4
   17154:	mov	r3, r8
   17158:	bl	1ac18 <main@@Base+0x4b3c>
   1715c:	b	1717c <main@@Base+0x10a0>
   17160:	ldr	r1, [sp, #48]	; 0x30
   17164:	str	r1, [r0]
   17168:	ldr	r0, [sp, #28]
   1716c:	mov	r1, r9
   17170:	mov	r2, r4
   17174:	mov	r3, r8
   17178:	bl	1ae70 <main@@Base+0x4d94>
   1717c:	mov	r9, r0
   17180:	ldr	r0, [sp, #52]	; 0x34
   17184:	cmp	r0, #0
   17188:	beq	17b24 <main@@Base+0x1a48>
   1718c:	ldr	r0, [sp, #28]
   17190:	mov	r1, r9
   17194:	mov	r2, r4
   17198:	add	r3, sp, #48	; 0x30
   1719c:	bl	280f4 <flatcc_json_parser_build_string@@Base>
   171a0:	mov	r9, r0
   171a4:	ldr	r0, [sp, #48]	; 0x30
   171a8:	cmp	r0, #0
   171ac:	beq	17058 <main@@Base+0xf7c>
   171b0:	ldr	r0, [sp, #28]
   171b4:	ldr	r0, [r0]
   171b8:	mov	r1, #1
   171bc:	bl	229cc <flatcc_builder_extend_offset_vector@@Base>
   171c0:	cmp	r0, #0
   171c4:	bne	17160 <main@@Base+0x1084>
   171c8:	b	17058 <main@@Base+0xf7c>
   171cc:	str	r8, [sp]
   171d0:	ldr	r0, [sp, #28]
   171d4:	mov	r1, r7
   171d8:	mov	r2, r4
   171dc:	movw	r3, #36984	; 0x9078
   171e0:	movt	r3, #4
   171e4:	bl	1aae0 <main@@Base+0x4a04>
   171e8:	mov	r9, r0
   171ec:	cmp	r0, r7
   171f0:	ldr	r6, [sp, #24]
   171f4:	cmpne	r9, r4
   171f8:	beq	17058 <main@@Base+0xf7c>
   171fc:	ldrb	r4, [sp, #32]
   17200:	cmp	r4, #8
   17204:	add	r8, sp, #52	; 0x34
   17208:	bne	1721c <main@@Base+0x1140>
   1720c:	ldr	r0, [sp, #28]
   17210:	ldrb	r0, [r0, #8]
   17214:	tst	r0, #2
   17218:	beq	17a94 <main@@Base+0x19b8>
   1721c:	ldr	r0, [sp, #28]
   17220:	ldr	r0, [r0]
   17224:	mov	r1, #6
   17228:	mov	r2, #1
   1722c:	mov	r3, #1
   17230:	bl	23ed8 <flatcc_builder_table_add@@Base>
   17234:	cmp	r0, #0
   17238:	beq	19620 <main@@Base+0x3544>
   1723c:	sxtb	r1, r4
   17240:	bl	1abf8 <main@@Base+0x4b1c>
   17244:	b	17a94 <main@@Base+0x19b8>
   17248:	ldr	r0, [sp, #28]
   1724c:	mov	r1, r9
   17250:	b	17988 <main@@Base+0x18ac>
   17254:	mov	r7, r9
   17258:	b	173e4 <main@@Base+0x1308>
   1725c:	ldr	r0, [sp, #28]
   17260:	mov	r1, r7
   17264:	b	19570 <main@@Base+0x3494>
   17268:	movw	r2, #24428	; 0x5f6c
   1726c:	movt	r2, #102	; 0x66
   17270:	eor	r2, r2, r1, lsr #8
   17274:	lsr	r0, r0, #8
   17278:	orr	r0, r0, r1, lsl #24
   1727c:	movw	r1, #26483	; 0x6773
   17280:	movt	r1, #28526	; 0x6f6e
   17284:	eor	r0, r0, r1
   17288:	orrs	r0, r0, r2
   1728c:	add	r8, sp, #52	; 0x34
   17290:	bne	173e4 <main@@Base+0x1308>
   17294:	ldr	r0, [sp, #28]
   17298:	mov	r1, r7
   1729c:	mov	r2, r4
   172a0:	mov	r3, #7
   172a4:	bl	1a064 <main@@Base+0x3f88>
   172a8:	mov	r9, r0
   172ac:	cmp	r7, r0
   172b0:	beq	173fc <main@@Base+0x1320>
   172b4:	ldr	r0, [sp, #28]
   172b8:	ldr	r0, [r0]
   172bc:	mov	r1, #8
   172c0:	mov	r2, #8
   172c4:	mvn	r3, #-536870912	; 0xe0000000
   172c8:	bl	22df0 <flatcc_builder_start_vector@@Base>
   172cc:	cmp	r0, #0
   172d0:	bne	17058 <main@@Base+0xf7c>
   172d4:	ldr	r0, [sp, #28]
   172d8:	mov	r1, r9
   172dc:	mov	r2, r4
   172e0:	mov	r3, r8
   172e4:	bl	1ac18 <main@@Base+0x4b3c>
   172e8:	mov	r9, r0
   172ec:	ldr	r0, [sp, #52]	; 0x34
   172f0:	cmp	r0, #0
   172f4:	beq	173bc <main@@Base+0x12e0>
   172f8:	mov	r0, #0
   172fc:	str	r0, [sp, #36]	; 0x24
   17300:	str	r0, [sp, #32]
   17304:	ldr	r0, [sp, #28]
   17308:	ldr	r0, [r0]
   1730c:	mov	r1, #1
   17310:	bl	22808 <flatcc_builder_extend_vector@@Base>
   17314:	cmp	r0, #0
   17318:	beq	17058 <main@@Base+0xf7c>
   1731c:	mov	r7, r0
   17320:	ldr	r0, [sp, #28]
   17324:	mov	r1, r9
   17328:	mov	r2, r4
   1732c:	mov	r5, r4
   17330:	add	r4, sp, #32
   17334:	mov	r3, r4
   17338:	bl	1c8ac <main@@Base+0x67d0>
   1733c:	mov	r6, r0
   17340:	cmp	r9, r0
   17344:	beq	17354 <main@@Base+0x1278>
   17348:	mov	r9, r6
   1734c:	mov	r4, r5
   17350:	b	17384 <main@@Base+0x12a8>
   17354:	str	r4, [sp]
   17358:	ldr	r0, [sp, #28]
   1735c:	mov	r1, r6
   17360:	mov	r2, r5
   17364:	movw	r3, #37244	; 0x917c
   17368:	movt	r3, #4
   1736c:	bl	1c940 <main@@Base+0x6864>
   17370:	mov	r9, r0
   17374:	cmp	r0, r6
   17378:	mov	r4, r5
   1737c:	cmpne	r9, r4
   17380:	beq	17058 <main@@Base+0xf7c>
   17384:	ldr	r2, [sp, #32]
   17388:	ldr	r3, [sp, #36]	; 0x24
   1738c:	mov	r0, r7
   17390:	bl	1ca68 <main@@Base+0x698c>
   17394:	ldr	r0, [sp, #28]
   17398:	mov	r1, r9
   1739c:	mov	r2, r4
   173a0:	mov	r3, r8
   173a4:	bl	1ae70 <main@@Base+0x4d94>
   173a8:	mov	r9, r0
   173ac:	ldr	r0, [sp, #52]	; 0x34
   173b0:	cmp	r0, #0
   173b4:	ldr	r6, [sp, #24]
   173b8:	bne	172f8 <main@@Base+0x121c>
   173bc:	ldr	r0, [sp, #28]
   173c0:	ldr	r0, [r0]
   173c4:	bl	23a40 <flatcc_builder_end_vector@@Base>
   173c8:	str	r0, [sp, #48]	; 0x30
   173cc:	cmp	r0, #0
   173d0:	beq	17058 <main@@Base+0xf7c>
   173d4:	ldr	r0, [sp, #28]
   173d8:	ldr	r0, [r0]
   173dc:	mov	r1, #32
   173e0:	b	17d1c <main@@Base+0x1c40>
   173e4:	ldr	r0, [sp, #28]
   173e8:	mov	r1, r7
   173ec:	mov	r2, r4
   173f0:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   173f4:	mov	r9, r0
   173f8:	b	19584 <main@@Base+0x34a8>
   173fc:	ldr	r0, [sp, #28]
   17400:	mov	r1, r9
   17404:	b	173ec <main@@Base+0x1310>
   17408:	ldrb	r1, [sp, #32]
   1740c:	mov	r0, r7
   17410:	bl	1ae50 <main@@Base+0x4d74>
   17414:	ldr	r0, [sp, #28]
   17418:	mov	r1, r9
   1741c:	mov	r2, r4
   17420:	mov	r3, r8
   17424:	bl	1ae70 <main@@Base+0x4d94>
   17428:	mov	r9, r0
   1742c:	ldr	r0, [sp, #52]	; 0x34
   17430:	cmp	r0, #0
   17434:	beq	17cf8 <main@@Base+0x1c1c>
   17438:	mov	r0, #0
   1743c:	strb	r0, [sp, #32]
   17440:	ldr	r0, [sp, #28]
   17444:	ldr	r0, [r0]
   17448:	mov	r1, #1
   1744c:	bl	22808 <flatcc_builder_extend_vector@@Base>
   17450:	cmp	r0, #0
   17454:	beq	17058 <main@@Base+0xf7c>
   17458:	mov	r7, r0
   1745c:	ldr	r0, [sp, #28]
   17460:	mov	r1, r9
   17464:	mov	r2, r4
   17468:	mov	r5, r4
   1746c:	add	r4, sp, #32
   17470:	mov	r3, r4
   17474:	bl	1aca8 <main@@Base+0x4bcc>
   17478:	mov	r6, r0
   1747c:	cmp	r9, r0
   17480:	beq	17494 <main@@Base+0x13b8>
   17484:	mov	r9, r6
   17488:	ldr	r6, [sp, #24]
   1748c:	mov	r4, r5
   17490:	b	17408 <main@@Base+0x132c>
   17494:	str	r4, [sp]
   17498:	ldr	r0, [sp, #28]
   1749c:	mov	r1, r6
   174a0:	mov	r2, r5
   174a4:	movw	r3, #37220	; 0x9164
   174a8:	movt	r3, #4
   174ac:	bl	1ad38 <main@@Base+0x4c5c>
   174b0:	mov	r9, r0
   174b4:	cmp	r0, r6
   174b8:	mov	r4, r5
   174bc:	beq	17058 <main@@Base+0xf7c>
   174c0:	cmp	r9, r4
   174c4:	ldr	r6, [sp, #24]
   174c8:	bne	17408 <main@@Base+0x132c>
   174cc:	b	17058 <main@@Base+0xf7c>
   174d0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   174d4:	add	r6, r6, #8
   174d8:	mov	r0, r6
   174dc:	mov	r1, r4
   174e0:	bl	1a060 <main@@Base+0x3f84>
   174e4:	and	r0, r1, #-16777216	; 0xff000000
   174e8:	teq	r0, #1627389952	; 0x61000000
   174ec:	bne	17974 <main@@Base+0x1898>
   174f0:	ldr	r0, [sp, #28]
   174f4:	mov	r1, r6
   174f8:	mov	r2, r4
   174fc:	mov	r3, #1
   17500:	bl	1a064 <main@@Base+0x3f88>
   17504:	mov	r7, r0
   17508:	cmp	r6, r0
   1750c:	beq	17980 <main@@Base+0x18a4>
   17510:	mov	r0, #0
   17514:	str	r0, [sp, #32]
   17518:	ldr	r0, [sp, #28]
   1751c:	mov	r1, r7
   17520:	mov	r2, r4
   17524:	mov	r5, r4
   17528:	add	r4, sp, #32
   1752c:	mov	r3, r4
   17530:	bl	1c6e4 <main@@Base+0x6608>
   17534:	mov	r6, r0
   17538:	cmp	r7, r0
   1753c:	beq	17c9c <main@@Base+0x1bc0>
   17540:	mov	r9, r6
   17544:	mov	r4, r5
   17548:	b	17ccc <main@@Base+0x1bf0>
   1754c:	ldr	r0, [sp, #28]
   17550:	mov	r1, r7
   17554:	mov	r2, r4
   17558:	mov	r3, #8
   1755c:	bl	1a064 <main@@Base+0x3f88>
   17560:	mov	r6, r0
   17564:	cmp	r7, r0
   17568:	beq	178f8 <main@@Base+0x181c>
   1756c:	mov	r0, #0
   17570:	str	r0, [sp, #36]	; 0x24
   17574:	str	r0, [sp, #32]
   17578:	ldr	r0, [sp, #28]
   1757c:	mov	r1, r6
   17580:	mov	r2, r4
   17584:	mov	r5, r4
   17588:	add	r4, sp, #32
   1758c:	mov	r3, r4
   17590:	bl	1cc58 <main@@Base+0x6b7c>
   17594:	mov	r7, r0
   17598:	cmp	r6, r0
   1759c:	beq	17c18 <main@@Base+0x1b3c>
   175a0:	mov	r9, r7
   175a4:	mov	r4, r5
   175a8:	b	17c48 <main@@Base+0x1b6c>
   175ac:	str	r4, [sp]
   175b0:	ldr	r0, [sp, #28]
   175b4:	mov	r1, r7
   175b8:	mov	r2, r5
   175bc:	movw	r3, #37076	; 0x90d4
   175c0:	movt	r3, #4
   175c4:	bl	1bc84 <main@@Base+0x5ba8>
   175c8:	mov	r9, r0
   175cc:	cmp	r0, r7
   175d0:	mov	r4, r5
   175d4:	cmpne	r9, r4
   175d8:	beq	17058 <main@@Base+0xf7c>
   175dc:	ldrb	r6, [sp, #32]
   175e0:	cmp	r6, #1
   175e4:	bne	175f8 <main@@Base+0x151c>
   175e8:	ldr	r0, [sp, #28]
   175ec:	ldrb	r0, [r0, #8]
   175f0:	tst	r0, #2
   175f4:	beq	17c94 <main@@Base+0x1bb8>
   175f8:	ldr	r0, [sp, #28]
   175fc:	ldr	r0, [r0]
   17600:	mov	r1, #15
   17604:	mov	r2, #1
   17608:	mov	r3, #1
   1760c:	bl	23ed8 <flatcc_builder_table_add@@Base>
   17610:	cmp	r0, #0
   17614:	beq	17058 <main@@Base+0xf7c>
   17618:	mov	r1, r6
   1761c:	bl	1bd9c <main@@Base+0x5cc0>
   17620:	b	17c94 <main@@Base+0x1bb8>
   17624:	ldr	r6, [sp, #24]
   17628:	bl	23a40 <flatcc_builder_end_vector@@Base>
   1762c:	str	r0, [sp, #48]	; 0x30
   17630:	cmp	r0, #0
   17634:	beq	17058 <main@@Base+0xf7c>
   17638:	ldr	r0, [sp, #28]
   1763c:	ldr	r0, [r0]
   17640:	mov	r1, #31
   17644:	b	17d1c <main@@Base+0x1c40>
   17648:	bl	23a40 <flatcc_builder_end_vector@@Base>
   1764c:	str	r0, [sp, #48]	; 0x30
   17650:	cmp	r0, #0
   17654:	beq	17058 <main@@Base+0xf7c>
   17658:	ldr	r0, [sp, #28]
   1765c:	ldr	r0, [r0]
   17660:	mov	r1, #29
   17664:	b	17d1c <main@@Base+0x1c40>
   17668:	str	r4, [sp]
   1766c:	ldr	r0, [sp, #28]
   17670:	mov	r1, r7
   17674:	mov	r2, r5
   17678:	movw	r3, #37124	; 0x9104
   1767c:	movt	r3, #4
   17680:	bl	1c774 <main@@Base+0x6698>
   17684:	mov	r9, r0
   17688:	cmp	r0, r7
   1768c:	mov	r4, r5
   17690:	cmpne	r9, r4
   17694:	beq	17058 <main@@Base+0xf7c>
   17698:	ldr	r6, [sp, #32]
   1769c:	cmp	r6, #0
   176a0:	bne	176b4 <main@@Base+0x15d8>
   176a4:	ldr	r0, [sp, #28]
   176a8:	ldrb	r0, [r0, #8]
   176ac:	tst	r0, #2
   176b0:	beq	17c94 <main@@Base+0x1bb8>
   176b4:	ldr	r0, [sp, #28]
   176b8:	ldr	r0, [r0]
   176bc:	mov	r1, #16
   176c0:	mov	r2, #4
   176c4:	mov	r3, #4
   176c8:	bl	23ed8 <flatcc_builder_table_add@@Base>
   176cc:	cmp	r0, #0
   176d0:	beq	17058 <main@@Base+0xf7c>
   176d4:	mov	r1, r6
   176d8:	bl	1c88c <main@@Base+0x67b0>
   176dc:	b	17c94 <main@@Base+0x1bb8>
   176e0:	str	r4, [sp]
   176e4:	ldr	r0, [sp, #28]
   176e8:	mov	r1, r7
   176ec:	mov	r2, r5
   176f0:	movw	r3, #37012	; 0x9094
   176f4:	movt	r3, #4
   176f8:	bl	1afc0 <main@@Base+0x4ee4>
   176fc:	mov	r9, r0
   17700:	cmp	r0, r7
   17704:	ldr	r6, [sp, #24]
   17708:	mov	r4, r5
   1770c:	cmpne	r9, r4
   17710:	beq	17058 <main@@Base+0xf7c>
   17714:	ldrh	r4, [sp, #32]
   17718:	cmp	r4, #100	; 0x64
   1771c:	bne	17730 <main@@Base+0x1654>
   17720:	ldr	r0, [sp, #28]
   17724:	ldrb	r0, [r0, #8]
   17728:	tst	r0, #2
   1772c:	beq	17a94 <main@@Base+0x19b8>
   17730:	ldr	r0, [sp, #28]
   17734:	ldr	r0, [r0]
   17738:	mov	r1, #2
   1773c:	b	17a78 <main@@Base+0x199c>
   17740:	str	r4, [sp]
   17744:	ldr	r0, [sp, #28]
   17748:	mov	r1, r7
   1774c:	mov	r2, r8
   17750:	movw	r3, #37088	; 0x90e0
   17754:	movt	r3, #4
   17758:	bl	1c5c4 <main@@Base+0x64e8>
   1775c:	mov	r9, r0
   17760:	cmp	r0, r7
   17764:	ldr	r6, [sp, #24]
   17768:	mov	r4, r8
   1776c:	beq	17058 <main@@Base+0xf7c>
   17770:	cmp	r9, r4
   17774:	add	r8, sp, #52	; 0x34
   17778:	beq	17058 <main@@Base+0xf7c>
   1777c:	vldr	s0, [sp, #32]
   17780:	vcmp.f32	s0, s16
   17784:	vmrs	APSR_nzcv, fpscr
   17788:	bne	1779c <main@@Base+0x16c0>
   1778c:	ldr	r0, [sp, #28]
   17790:	ldrb	r0, [r0, #8]
   17794:	tst	r0, #2
   17798:	beq	19584 <main@@Base+0x34a8>
   1779c:	ldr	r0, [sp, #28]
   177a0:	ldr	r0, [r0]
   177a4:	mov	r1, #26
   177a8:	b	17b04 <main@@Base+0x1a28>
   177ac:	ldr	r0, [sp, #28]
   177b0:	ldr	r0, [r0]
   177b4:	bl	22f34 <flatcc_builder_end_offset_vector@@Base>
   177b8:	str	r0, [sp, #48]	; 0x30
   177bc:	cmp	r0, #0
   177c0:	beq	17058 <main@@Base+0xf7c>
   177c4:	ldr	r0, [sp, #28]
   177c8:	ldr	r0, [r0]
   177cc:	mov	r1, #28
   177d0:	b	17d1c <main@@Base+0x1c40>
   177d4:	ldr	r0, [sp, #28]
   177d8:	ldr	r0, [r0]
   177dc:	bl	22f34 <flatcc_builder_end_offset_vector@@Base>
   177e0:	str	r0, [sp, #48]	; 0x30
   177e4:	cmp	r0, #0
   177e8:	beq	17058 <main@@Base+0xf7c>
   177ec:	ldr	r0, [sp, #28]
   177f0:	ldr	r0, [r0]
   177f4:	mov	r1, #11
   177f8:	b	17d1c <main@@Base+0x1c40>
   177fc:	ldr	r0, [sp, #28]
   17800:	b	173ec <main@@Base+0x1310>
   17804:	add	r6, r6, #8
   17808:	mov	r0, r6
   1780c:	mov	r1, r4
   17810:	bl	1a060 <main@@Base+0x3f84>
   17814:	and	r0, r1, #-16777216	; 0xff000000
   17818:	teq	r0, #1627389952	; 0x61000000
   1781c:	bne	17974 <main@@Base+0x1898>
   17820:	ldr	r0, [sp, #28]
   17824:	mov	r1, r6
   17828:	mov	r2, r4
   1782c:	mov	r3, #1
   17830:	bl	1a064 <main@@Base+0x3f88>
   17834:	mov	r7, r0
   17838:	cmp	r6, r0
   1783c:	beq	17980 <main@@Base+0x18a4>
   17840:	mov	r0, #0
   17844:	str	r0, [sp, #36]	; 0x24
   17848:	str	r0, [sp, #32]
   1784c:	ldr	r0, [sp, #28]
   17850:	mov	r1, r7
   17854:	mov	r2, r4
   17858:	mov	r5, r4
   1785c:	add	r4, sp, #32
   17860:	mov	r3, r4
   17864:	bl	1c8ac <main@@Base+0x67d0>
   17868:	mov	r6, r0
   1786c:	cmp	r7, r0
   17870:	beq	17d34 <main@@Base+0x1c58>
   17874:	mov	r9, r6
   17878:	mov	r4, r5
   1787c:	b	17d64 <main@@Base+0x1c88>
   17880:	add	r6, r6, #8
   17884:	mov	r0, r6
   17888:	mov	r1, r4
   1788c:	bl	1a060 <main@@Base+0x3f84>
   17890:	and	r0, r1, #-16777216	; 0xff000000
   17894:	teq	r0, #1627389952	; 0x61000000
   17898:	bne	17974 <main@@Base+0x1898>
   1789c:	ldr	r0, [sp, #28]
   178a0:	mov	r1, r6
   178a4:	mov	r2, r4
   178a8:	mov	r3, #1
   178ac:	bl	1a064 <main@@Base+0x3f88>
   178b0:	mov	r7, r0
   178b4:	cmp	r6, r0
   178b8:	beq	17980 <main@@Base+0x18a4>
   178bc:	mov	r0, #0
   178c0:	str	r0, [sp, #32]
   178c4:	ldr	r0, [sp, #28]
   178c8:	mov	r1, r7
   178cc:	mov	r2, r4
   178d0:	mov	r5, r4
   178d4:	add	r4, sp, #32
   178d8:	mov	r3, r4
   178dc:	bl	1ca90 <main@@Base+0x69b4>
   178e0:	mov	r6, r0
   178e4:	cmp	r7, r0
   178e8:	beq	17db4 <main@@Base+0x1cd8>
   178ec:	mov	r9, r6
   178f0:	mov	r4, r5
   178f4:	b	17de4 <main@@Base+0x1d08>
   178f8:	add	r6, r6, #8
   178fc:	mov	r0, r6
   17900:	mov	r1, r4
   17904:	bl	1a060 <main@@Base+0x3f84>
   17908:	and	r0, r1, #-16777216	; 0xff000000
   1790c:	teq	r0, #1627389952	; 0x61000000
   17910:	bne	17974 <main@@Base+0x1898>
   17914:	ldr	r0, [sp, #28]
   17918:	mov	r1, r6
   1791c:	mov	r2, r4
   17920:	mov	r3, #1
   17924:	bl	1a064 <main@@Base+0x3f88>
   17928:	mov	r7, r0
   1792c:	cmp	r6, r0
   17930:	beq	17980 <main@@Base+0x18a4>
   17934:	mov	r0, #0
   17938:	str	r0, [sp, #36]	; 0x24
   1793c:	str	r0, [sp, #32]
   17940:	ldr	r0, [sp, #28]
   17944:	mov	r1, r7
   17948:	mov	r2, r4
   1794c:	mov	r5, r4
   17950:	add	r4, sp, #32
   17954:	mov	r3, r4
   17958:	bl	1cc58 <main@@Base+0x6b7c>
   1795c:	mov	r6, r0
   17960:	cmp	r7, r0
   17964:	beq	17e10 <main@@Base+0x1d34>
   17968:	mov	r9, r6
   1796c:	mov	r4, r5
   17970:	b	17e40 <main@@Base+0x1d64>
   17974:	ldr	r0, [sp, #28]
   17978:	mov	r1, r6
   1797c:	b	17988 <main@@Base+0x18ac>
   17980:	ldr	r0, [sp, #28]
   17984:	mov	r1, r7
   17988:	mov	r2, r4
   1798c:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   17990:	mov	r9, r0
   17994:	ldr	r6, [sp, #24]
   17998:	b	19584 <main@@Base+0x34a8>
   1799c:	str	r4, [sp]
   179a0:	ldr	r0, [sp, #28]
   179a4:	mov	r1, r7
   179a8:	mov	r2, r5
   179ac:	movw	r3, #37148	; 0x911c
   179b0:	movt	r3, #4
   179b4:	bl	1c940 <main@@Base+0x6864>
   179b8:	mov	r9, r0
   179bc:	cmp	r0, r7
   179c0:	mov	r4, r5
   179c4:	cmpne	r9, r4
   179c8:	beq	17058 <main@@Base+0xf7c>
   179cc:	ldr	r7, [sp, #32]
   179d0:	ldr	r6, [sp, #36]	; 0x24
   179d4:	orrs	r0, r7, r6
   179d8:	bne	179ec <main@@Base+0x1910>
   179dc:	ldr	r0, [sp, #28]
   179e0:	ldrb	r0, [r0, #8]
   179e4:	tst	r0, #2
   179e8:	beq	17c94 <main@@Base+0x1bb8>
   179ec:	ldr	r0, [sp, #28]
   179f0:	ldr	r0, [r0]
   179f4:	mov	r1, #18
   179f8:	mov	r2, #8
   179fc:	mov	r3, #8
   17a00:	bl	23ed8 <flatcc_builder_table_add@@Base>
   17a04:	cmp	r0, #0
   17a08:	beq	17058 <main@@Base+0xf7c>
   17a0c:	mov	r2, r7
   17a10:	mov	r3, r6
   17a14:	bl	1ca68 <main@@Base+0x698c>
   17a18:	b	17c94 <main@@Base+0x1bb8>
   17a1c:	str	r4, [sp]
   17a20:	ldr	r0, [sp, #28]
   17a24:	mov	r1, r7
   17a28:	mov	r2, r5
   17a2c:	movw	r3, #37036	; 0x90ac
   17a30:	movt	r3, #4
   17a34:	bl	1afc0 <main@@Base+0x4ee4>
   17a38:	mov	r9, r0
   17a3c:	cmp	r0, r7
   17a40:	ldr	r6, [sp, #24]
   17a44:	mov	r4, r5
   17a48:	cmpne	r9, r4
   17a4c:	beq	17058 <main@@Base+0xf7c>
   17a50:	ldrh	r4, [sp, #32]
   17a54:	cmp	r4, #150	; 0x96
   17a58:	bne	17a6c <main@@Base+0x1990>
   17a5c:	ldr	r0, [sp, #28]
   17a60:	ldrb	r0, [r0, #8]
   17a64:	tst	r0, #2
   17a68:	beq	17a94 <main@@Base+0x19b8>
   17a6c:	ldr	r0, [sp, #28]
   17a70:	ldr	r0, [r0]
   17a74:	mov	r1, #1
   17a78:	mov	r2, #2
   17a7c:	mov	r3, #2
   17a80:	bl	23ed8 <flatcc_builder_table_add@@Base>
   17a84:	cmp	r0, #0
   17a88:	beq	19620 <main@@Base+0x3544>
   17a8c:	sxth	r1, r4
   17a90:	bl	1b0d8 <main@@Base+0x4ffc>
   17a94:	ldr	r4, [sp, #20]
   17a98:	b	19584 <main@@Base+0x34a8>
   17a9c:	str	r4, [sp]
   17aa0:	ldr	r0, [sp, #28]
   17aa4:	mov	r1, r7
   17aa8:	mov	r2, r8
   17aac:	movw	r3, #37100	; 0x90ec
   17ab0:	movt	r3, #4
   17ab4:	bl	1c5c4 <main@@Base+0x64e8>
   17ab8:	mov	r9, r0
   17abc:	cmp	r0, r7
   17ac0:	ldr	r6, [sp, #24]
   17ac4:	mov	r4, r8
   17ac8:	beq	17058 <main@@Base+0xf7c>
   17acc:	cmp	r9, r4
   17ad0:	add	r8, sp, #52	; 0x34
   17ad4:	beq	17058 <main@@Base+0xf7c>
   17ad8:	vldr	s0, [sp, #32]
   17adc:	vcmp.f32	s0, s18
   17ae0:	vmrs	APSR_nzcv, fpscr
   17ae4:	bne	17af8 <main@@Base+0x1a1c>
   17ae8:	ldr	r0, [sp, #28]
   17aec:	ldrb	r0, [r0, #8]
   17af0:	tst	r0, #2
   17af4:	beq	19584 <main@@Base+0x34a8>
   17af8:	ldr	r0, [sp, #28]
   17afc:	ldr	r0, [r0]
   17b00:	mov	r1, #25
   17b04:	mov	r2, #4
   17b08:	mov	r3, #4
   17b0c:	bl	23ed8 <flatcc_builder_table_add@@Base>
   17b10:	cmp	r0, #0
   17b14:	beq	17058 <main@@Base+0xf7c>
   17b18:	vldr	s0, [sp, #32]
   17b1c:	bl	1c6cc <main@@Base+0x65f0>
   17b20:	b	19584 <main@@Base+0x34a8>
   17b24:	ldr	r0, [sp, #28]
   17b28:	ldr	r0, [r0]
   17b2c:	bl	22f34 <flatcc_builder_end_offset_vector@@Base>
   17b30:	str	r0, [sp, #48]	; 0x30
   17b34:	cmp	r0, #0
   17b38:	beq	17058 <main@@Base+0xf7c>
   17b3c:	ldr	r0, [sp, #28]
   17b40:	ldr	r0, [r0]
   17b44:	mov	r1, #10
   17b48:	b	17d1c <main@@Base+0x1c40>
   17b4c:	ldr	r0, [sp, #28]
   17b50:	ldr	r0, [r0]
   17b54:	mov	r1, #0
   17b58:	mov	r2, #0
   17b5c:	mov	r3, #0
   17b60:	bl	223dc <flatcc_builder_start_buffer@@Base>
   17b64:	cmp	r0, #0
   17b68:	bne	17058 <main@@Base+0xf7c>
   17b6c:	ldr	r0, [sp, #28]
   17b70:	mov	r1, r9
   17b74:	mov	r2, r4
   17b78:	add	r3, sp, #48	; 0x30
   17b7c:	bl	17018 <main@@Base+0xf3c>
   17b80:	mov	r9, r0
   17b84:	ldr	r1, [sp, #48]	; 0x30
   17b88:	cmp	r1, #0
   17b8c:	beq	17058 <main@@Base+0xf7c>
   17b90:	ldr	r0, [sp, #28]
   17b94:	ldr	r0, [r0]
   17b98:	bl	22590 <flatcc_builder_end_buffer@@Base>
   17b9c:	b	17d04 <main@@Base+0x1c28>
   17ba0:	str	r4, [sp]
   17ba4:	ldr	r0, [sp, #28]
   17ba8:	mov	r1, r7
   17bac:	mov	r2, r5
   17bb0:	movw	r3, #37172	; 0x9134
   17bb4:	movt	r3, #4
   17bb8:	bl	1cb20 <main@@Base+0x6a44>
   17bbc:	mov	r9, r0
   17bc0:	cmp	r0, r7
   17bc4:	mov	r4, r5
   17bc8:	cmpne	r9, r4
   17bcc:	beq	17058 <main@@Base+0xf7c>
   17bd0:	ldr	r6, [sp, #32]
   17bd4:	cmp	r6, #0
   17bd8:	bne	17bec <main@@Base+0x1b10>
   17bdc:	ldr	r0, [sp, #28]
   17be0:	ldrb	r0, [r0, #8]
   17be4:	tst	r0, #2
   17be8:	beq	17c94 <main@@Base+0x1bb8>
   17bec:	ldr	r0, [sp, #28]
   17bf0:	ldr	r0, [r0]
   17bf4:	mov	r1, #17
   17bf8:	mov	r2, #4
   17bfc:	mov	r3, #4
   17c00:	bl	23ed8 <flatcc_builder_table_add@@Base>
   17c04:	cmp	r0, #0
   17c08:	beq	17058 <main@@Base+0xf7c>
   17c0c:	mov	r1, r6
   17c10:	bl	1cc38 <main@@Base+0x6b5c>
   17c14:	b	17c94 <main@@Base+0x1bb8>
   17c18:	str	r4, [sp]
   17c1c:	ldr	r0, [sp, #28]
   17c20:	mov	r1, r7
   17c24:	mov	r2, r5
   17c28:	movw	r3, #37196	; 0x914c
   17c2c:	movt	r3, #4
   17c30:	bl	1ccec <main@@Base+0x6c10>
   17c34:	mov	r9, r0
   17c38:	cmp	r0, r7
   17c3c:	mov	r4, r5
   17c40:	cmpne	r9, r4
   17c44:	beq	17058 <main@@Base+0xf7c>
   17c48:	ldr	r6, [sp, #32]
   17c4c:	ldr	r7, [sp, #36]	; 0x24
   17c50:	orrs	r0, r6, r7
   17c54:	bne	17c68 <main@@Base+0x1b8c>
   17c58:	ldr	r0, [sp, #28]
   17c5c:	ldrb	r0, [r0, #8]
   17c60:	tst	r0, #2
   17c64:	beq	17c94 <main@@Base+0x1bb8>
   17c68:	ldr	r0, [sp, #28]
   17c6c:	ldr	r0, [r0]
   17c70:	mov	r1, #19
   17c74:	mov	r2, #8
   17c78:	mov	r3, #8
   17c7c:	bl	23ed8 <flatcc_builder_table_add@@Base>
   17c80:	cmp	r0, #0
   17c84:	beq	17058 <main@@Base+0xf7c>
   17c88:	mov	r2, r6
   17c8c:	mov	r3, r7
   17c90:	bl	1ce14 <main@@Base+0x6d38>
   17c94:	ldr	r6, [sp, #24]
   17c98:	b	19584 <main@@Base+0x34a8>
   17c9c:	str	r4, [sp]
   17ca0:	ldr	r0, [sp, #28]
   17ca4:	mov	r1, r6
   17ca8:	mov	r2, r5
   17cac:	movw	r3, #37136	; 0x9110
   17cb0:	movt	r3, #4
   17cb4:	bl	1c774 <main@@Base+0x6698>
   17cb8:	mov	r9, r0
   17cbc:	cmp	r0, r6
   17cc0:	mov	r4, r5
   17cc4:	cmpne	r9, r4
   17cc8:	beq	17058 <main@@Base+0xf7c>
   17ccc:	ldr	r6, [sp, #32]
   17cd0:	cmp	r6, #0
   17cd4:	bne	17ce8 <main@@Base+0x1c0c>
   17cd8:	ldr	r0, [sp, #28]
   17cdc:	ldrb	r0, [r0, #8]
   17ce0:	tst	r0, #2
   17ce4:	beq	17c94 <main@@Base+0x1bb8>
   17ce8:	ldr	r0, [sp, #28]
   17cec:	ldr	r0, [r0]
   17cf0:	mov	r1, #20
   17cf4:	b	176c0 <main@@Base+0x15e4>
   17cf8:	ldr	r0, [sp, #28]
   17cfc:	ldr	r0, [r0]
   17d00:	bl	23a40 <flatcc_builder_end_vector@@Base>
   17d04:	str	r0, [sp, #48]	; 0x30
   17d08:	cmp	r0, #0
   17d0c:	beq	17058 <main@@Base+0xf7c>
   17d10:	ldr	r0, [sp, #28]
   17d14:	ldr	r0, [r0]
   17d18:	mov	r1, #13
   17d1c:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   17d20:	cmp	r0, #0
   17d24:	beq	17058 <main@@Base+0xf7c>
   17d28:	ldr	r1, [sp, #48]	; 0x30
   17d2c:	str	r1, [r0]
   17d30:	b	19584 <main@@Base+0x34a8>
   17d34:	str	r4, [sp]
   17d38:	ldr	r0, [sp, #28]
   17d3c:	mov	r1, r6
   17d40:	mov	r2, r5
   17d44:	movw	r3, #37160	; 0x9128
   17d48:	movt	r3, #4
   17d4c:	bl	1c940 <main@@Base+0x6864>
   17d50:	mov	r9, r0
   17d54:	cmp	r0, r6
   17d58:	mov	r4, r5
   17d5c:	cmpne	r9, r4
   17d60:	beq	17058 <main@@Base+0xf7c>
   17d64:	ldr	r6, [sp, #32]
   17d68:	ldr	r7, [sp, #36]	; 0x24
   17d6c:	orrs	r0, r6, r7
   17d70:	bne	17d84 <main@@Base+0x1ca8>
   17d74:	ldr	r0, [sp, #28]
   17d78:	ldrb	r0, [r0, #8]
   17d7c:	tst	r0, #2
   17d80:	beq	17c94 <main@@Base+0x1bb8>
   17d84:	ldr	r0, [sp, #28]
   17d88:	ldr	r0, [r0]
   17d8c:	mov	r1, #22
   17d90:	mov	r2, #8
   17d94:	mov	r3, #8
   17d98:	bl	23ed8 <flatcc_builder_table_add@@Base>
   17d9c:	cmp	r0, #0
   17da0:	beq	17058 <main@@Base+0xf7c>
   17da4:	mov	r2, r6
   17da8:	mov	r3, r7
   17dac:	bl	1ca68 <main@@Base+0x698c>
   17db0:	b	17c94 <main@@Base+0x1bb8>
   17db4:	str	r4, [sp]
   17db8:	ldr	r0, [sp, #28]
   17dbc:	mov	r1, r6
   17dc0:	mov	r2, r5
   17dc4:	movw	r3, #37184	; 0x9140
   17dc8:	movt	r3, #4
   17dcc:	bl	1cb20 <main@@Base+0x6a44>
   17dd0:	mov	r9, r0
   17dd4:	cmp	r0, r6
   17dd8:	mov	r4, r5
   17ddc:	cmpne	r9, r4
   17de0:	beq	17058 <main@@Base+0xf7c>
   17de4:	ldr	r6, [sp, #32]
   17de8:	cmp	r6, #0
   17dec:	bne	17e00 <main@@Base+0x1d24>
   17df0:	ldr	r0, [sp, #28]
   17df4:	ldrb	r0, [r0, #8]
   17df8:	tst	r0, #2
   17dfc:	beq	17c94 <main@@Base+0x1bb8>
   17e00:	ldr	r0, [sp, #28]
   17e04:	ldr	r0, [r0]
   17e08:	mov	r1, #21
   17e0c:	b	17bf8 <main@@Base+0x1b1c>
   17e10:	str	r4, [sp]
   17e14:	ldr	r0, [sp, #28]
   17e18:	mov	r1, r6
   17e1c:	mov	r2, r5
   17e20:	movw	r3, #37208	; 0x9158
   17e24:	movt	r3, #4
   17e28:	bl	1ccec <main@@Base+0x6c10>
   17e2c:	mov	r9, r0
   17e30:	cmp	r0, r6
   17e34:	mov	r4, r5
   17e38:	cmpne	r9, r4
   17e3c:	beq	17058 <main@@Base+0xf7c>
   17e40:	ldr	r6, [sp, #32]
   17e44:	ldr	r7, [sp, #36]	; 0x24
   17e48:	orrs	r0, r6, r7
   17e4c:	bne	17e60 <main@@Base+0x1d84>
   17e50:	ldr	r0, [sp, #28]
   17e54:	ldrb	r0, [r0, #8]
   17e58:	tst	r0, #2
   17e5c:	beq	17c94 <main@@Base+0x1bb8>
   17e60:	ldr	r0, [sp, #28]
   17e64:	ldr	r0, [r0]
   17e68:	mov	r1, #23
   17e6c:	b	17c74 <main@@Base+0x1b98>
   17e70:	ldr	r0, [sp, #28]
   17e74:	mov	r1, r9
   17e78:	mov	r2, r4
   17e7c:	bl	1a018 <main@@Base+0x3f3c>
   17e80:	mov	r8, r0
   17e84:	mov	r1, r4
   17e88:	bl	1a060 <main@@Base+0x3f84>
   17e8c:	mov	sl, r0
   17e90:	mov	r7, r1
   17e94:	movw	r0, #29281	; 0x7261
   17e98:	movt	r0, #24946	; 0x6172
   17e9c:	subs	r0, sl, r0
   17ea0:	movw	r3, #29556	; 0x7374
   17ea4:	movt	r3, #29797	; 0x7465
   17ea8:	sbcs	r0, r1, r3
   17eac:	bcs	17f58 <main@@Base+0x1e7c>
   17eb0:	movw	r0, #28004	; 0x6d64
   17eb4:	movt	r0, #28257	; 0x6e61
   17eb8:	cmp	r7, r0
   17ebc:	bhi	18134 <main@@Base+0x2058>
   17ec0:	movw	r0, #25975	; 0x6577
   17ec4:	movt	r0, #26220	; 0x666c
   17ec8:	cmp	r7, r0
   17ecc:	bhi	18258 <main@@Base+0x217c>
   17ed0:	movw	r0, #27759	; 0x6c6f
   17ed4:	movt	r0, #25455	; 0x636f
   17ed8:	eor	r1, r7, r0
   17edc:	and	r0, sl, #-16777216	; 0xff000000
   17ee0:	eor	r2, r0, #1912602624	; 0x72000000
   17ee4:	orrs	r1, r2, r1
   17ee8:	beq	18a04 <main@@Base+0x2928>
   17eec:	movw	r1, #25965	; 0x656d
   17ef0:	movt	r1, #25966	; 0x656e
   17ef4:	eor	r1, r7, r1
   17ef8:	eor	r0, r0, #2030043136	; 0x79000000
   17efc:	orrs	r0, r0, r1
   17f00:	bne	19344 <main@@Base+0x3268>
   17f04:	ldr	r0, [sp, #28]
   17f08:	mov	r1, r8
   17f0c:	mov	r2, r4
   17f10:	mov	r3, #5
   17f14:	bl	1a064 <main@@Base+0x3f88>
   17f18:	mov	r1, r0
   17f1c:	cmp	r8, r0
   17f20:	beq	18f8c <main@@Base+0x2eb0>
   17f24:	ldr	r0, [sp, #28]
   17f28:	mov	r2, r4
   17f2c:	add	r3, sp, #48	; 0x30
   17f30:	bl	17018 <main@@Base+0xf3c>
   17f34:	mov	r9, r0
   17f38:	ldr	r0, [sp, #48]	; 0x30
   17f3c:	cmp	r0, #0
   17f40:	add	r8, sp, #52	; 0x34
   17f44:	beq	17058 <main@@Base+0xf7c>
   17f48:	ldr	r0, [sp, #28]
   17f4c:	ldr	r0, [r0]
   17f50:	mov	r1, #12
   17f54:	b	17d1c <main@@Base+0x1c40>
   17f58:	movw	r0, #0
   17f5c:	movt	r0, #26163	; 0x6633
   17f60:	subs	r0, sl, r0
   17f64:	sbcs	r0, r7, r3
   17f68:	bcs	181c4 <main@@Base+0x20e8>
   17f6c:	movw	r0, #29281	; 0x7261
   17f70:	movt	r0, #24946	; 0x6172
   17f74:	eor	r1, sl, r0
   17f78:	eor	r0, r7, r3
   17f7c:	orrs	r1, r1, r0
   17f80:	bne	183c4 <main@@Base+0x22e8>
   17f84:	add	r7, r8, #8
   17f88:	mov	r0, r7
   17f8c:	mov	r1, r4
   17f90:	bl	1a060 <main@@Base+0x3f84>
   17f94:	movw	r2, #26989	; 0x696d
   17f98:	movt	r2, #29810	; 0x7472
   17f9c:	subs	r2, r2, r0
   17fa0:	movw	r5, #26227	; 0x6673
   17fa4:	movt	r5, #31087	; 0x796f
   17fa8:	sbcs	r2, r5, r1
   17fac:	bcc	1860c <main@@Base+0x2530>
   17fb0:	movw	r2, #29797	; 0x7465
   17fb4:	movt	r2, #28530	; 0x6f72
   17fb8:	eor	r2, r0, r2
   17fbc:	eor	r3, r1, r5
   17fc0:	orrs	r2, r2, r3
   17fc4:	beq	18f94 <main@@Base+0x2eb8>
   17fc8:	movw	r2, #27763	; 0x6c73
   17fcc:	movt	r2, #28527	; 0x6f6f
   17fd0:	eor	r0, r0, r2
   17fd4:	movw	r2, #26210	; 0x6662
   17fd8:	movt	r2, #31087	; 0x796f
   17fdc:	eor	r1, r1, r2
   17fe0:	orrs	r0, r0, r1
   17fe4:	bne	1908c <main@@Base+0x2fb0>
   17fe8:	ldr	r0, [sp, #28]
   17fec:	mov	r1, r7
   17ff0:	mov	r2, r4
   17ff4:	mov	r3, #8
   17ff8:	bl	1a064 <main@@Base+0x3f88>
   17ffc:	mov	r9, r0
   18000:	cmp	r7, r0
   18004:	add	r8, sp, #52	; 0x34
   18008:	beq	17254 <main@@Base+0x1178>
   1800c:	ldr	r0, [sp, #28]
   18010:	ldr	r0, [r0]
   18014:	mov	r1, #1
   18018:	mov	r2, #1
   1801c:	mvn	r3, #0
   18020:	bl	22df0 <flatcc_builder_start_vector@@Base>
   18024:	cmp	r0, #0
   18028:	bne	17058 <main@@Base+0xf7c>
   1802c:	ldr	r0, [sp, #28]
   18030:	mov	r1, r9
   18034:	mov	r2, r4
   18038:	mov	r3, r8
   1803c:	bl	1ac18 <main@@Base+0x4b3c>
   18040:	mov	r9, r0
   18044:	ldr	r0, [sp, #52]	; 0x34
   18048:	cmp	r0, #0
   1804c:	beq	1810c <main@@Base+0x2030>
   18050:	mov	r0, #0
   18054:	strb	r0, [sp, #32]
   18058:	ldr	r0, [sp, #28]
   1805c:	ldr	r0, [r0]
   18060:	mov	r1, #1
   18064:	bl	22808 <flatcc_builder_extend_vector@@Base>
   18068:	cmp	r0, #0
   1806c:	beq	17058 <main@@Base+0xf7c>
   18070:	mov	r7, r0
   18074:	ldr	r0, [sp, #28]
   18078:	mov	r1, r9
   1807c:	mov	r2, r4
   18080:	mov	r5, r4
   18084:	add	r4, sp, #32
   18088:	mov	r3, r4
   1808c:	bl	1bbd0 <main@@Base+0x5af4>
   18090:	mov	r6, r0
   18094:	cmp	r9, r0
   18098:	beq	180a8 <main@@Base+0x1fcc>
   1809c:	mov	r9, r6
   180a0:	mov	r4, r5
   180a4:	b	180d8 <main@@Base+0x1ffc>
   180a8:	str	r4, [sp]
   180ac:	ldr	r0, [sp, #28]
   180b0:	mov	r1, r6
   180b4:	mov	r2, r5
   180b8:	movw	r3, #37064	; 0x90c8
   180bc:	movt	r3, #4
   180c0:	bl	1bc84 <main@@Base+0x5ba8>
   180c4:	mov	r9, r0
   180c8:	cmp	r0, r6
   180cc:	mov	r4, r5
   180d0:	cmpne	r9, r4
   180d4:	beq	17058 <main@@Base+0xf7c>
   180d8:	ldrb	r1, [sp, #32]
   180dc:	mov	r0, r7
   180e0:	bl	1bd9c <main@@Base+0x5cc0>
   180e4:	ldr	r0, [sp, #28]
   180e8:	mov	r1, r9
   180ec:	mov	r2, r4
   180f0:	mov	r3, r8
   180f4:	bl	1ae70 <main@@Base+0x4d94>
   180f8:	mov	r9, r0
   180fc:	ldr	r0, [sp, #52]	; 0x34
   18100:	cmp	r0, #0
   18104:	ldr	r6, [sp, #24]
   18108:	bne	18050 <main@@Base+0x1f74>
   1810c:	ldr	r0, [sp, #28]
   18110:	ldr	r0, [r0]
   18114:	bl	23a40 <flatcc_builder_end_vector@@Base>
   18118:	str	r0, [sp, #48]	; 0x30
   1811c:	cmp	r0, #0
   18120:	beq	17058 <main@@Base+0xf7c>
   18124:	ldr	r0, [sp, #28]
   18128:	ldr	r0, [r0]
   1812c:	mov	r1, #24
   18130:	b	17d1c <main@@Base+0x1c40>
   18134:	movw	r0, #29555	; 0x7373
   18138:	movt	r0, #29797	; 0x7465
   1813c:	cmp	r7, r0
   18140:	movw	r1, #29285	; 0x7265
   18144:	movt	r1, #28769	; 0x7061
   18148:	movw	r2, #24430	; 0x5f6e
   1814c:	movt	r2, #28276	; 0x6e74
   18150:	bhi	1847c <main@@Base+0x23a0>
   18154:	subs	r0, sl, r2
   18158:	sbcs	r0, r7, r1
   1815c:	bcs	186bc <main@@Base+0x25e0>
   18160:	movw	r0, #28005	; 0x6d65
   18164:	movt	r0, #28257	; 0x6e61
   18168:	teq	r7, r0
   1816c:	bne	19344 <main@@Base+0x3268>
   18170:	ldr	r0, [sp, #28]
   18174:	mov	r1, r8
   18178:	mov	r2, r4
   1817c:	mov	r3, #4
   18180:	bl	1a064 <main@@Base+0x3f88>
   18184:	mov	r1, r0
   18188:	cmp	r8, r0
   1818c:	beq	18f8c <main@@Base+0x2eb0>
   18190:	ldr	r0, [sp, #28]
   18194:	mov	r2, r4
   18198:	add	r3, sp, #48	; 0x30
   1819c:	bl	280f4 <flatcc_json_parser_build_string@@Base>
   181a0:	mov	r9, r0
   181a4:	ldr	r0, [sp, #48]	; 0x30
   181a8:	cmp	r0, #0
   181ac:	add	r8, sp, #52	; 0x34
   181b0:	beq	17058 <main@@Base+0xf7c>
   181b4:	ldr	r0, [sp, #28]
   181b8:	ldr	r0, [r0]
   181bc:	mov	r1, #3
   181c0:	b	17d1c <main@@Base+0x1c40>
   181c4:	movw	r1, #29544	; 0x7368
   181c8:	movt	r1, #26721	; 0x6861
   181cc:	subs	r0, sl, r1
   181d0:	sbcs	r0, r7, r3
   181d4:	bcs	1855c <main@@Base+0x2480>
   181d8:	eor	r0, r7, r3
   181dc:	bfc	sl, #0, #16
   181e0:	movw	r1, #0
   181e4:	movt	r1, #26163	; 0x6633
   181e8:	eor	r1, sl, r1
   181ec:	orrs	r0, r1, r0
   181f0:	bne	19344 <main@@Base+0x3268>
   181f4:	ldr	r0, [sp, #28]
   181f8:	mov	r1, r8
   181fc:	mov	r2, r4
   18200:	mov	r3, #6
   18204:	bl	1a064 <main@@Base+0x3f88>
   18208:	mov	r6, r0
   1820c:	cmp	r8, r0
   18210:	beq	19568 <main@@Base+0x348c>
   18214:	mov	r0, #0
   18218:	str	r0, [sp, #32]
   1821c:	ldr	r0, [sp, #28]
   18220:	mov	r1, r6
   18224:	mov	r2, r4
   18228:	mov	r5, r4
   1822c:	add	r4, sp, #32
   18230:	mov	r3, r4
   18234:	bl	27668 <flatcc_json_parser_float@@Base>
   18238:	mov	r7, r0
   1823c:	cmp	r6, r0
   18240:	add	r8, sp, #52	; 0x34
   18244:	beq	1935c <main@@Base+0x3280>
   18248:	mov	r9, r7
   1824c:	ldr	r6, [sp, #24]
   18250:	mov	r4, r5
   18254:	b	19390 <main@@Base+0x32b4>
   18258:	movw	r0, #65535	; 0xffff
   1825c:	movt	r0, #26735	; 0x686f
   18260:	cmp	r7, r0
   18264:	bhi	18780 <main@@Base+0x26a4>
   18268:	movw	r0, #25976	; 0x6578
   1826c:	movt	r0, #26220	; 0x666c
   18270:	teq	r7, r0
   18274:	bne	19344 <main@@Base+0x3268>
   18278:	ldr	r0, [sp, #28]
   1827c:	mov	r1, r8
   18280:	mov	r2, r4
   18284:	mov	r3, #4
   18288:	bl	1a064 <main@@Base+0x3f88>
   1828c:	mov	r9, r0
   18290:	cmp	r8, r0
   18294:	beq	191d0 <main@@Base+0x30f4>
   18298:	ldr	r0, [sp, #28]
   1829c:	ldr	r0, [r0]
   182a0:	mov	r1, #1
   182a4:	mov	r2, #1
   182a8:	mvn	r3, #0
   182ac:	bl	22df0 <flatcc_builder_start_vector@@Base>
   182b0:	cmp	r0, #0
   182b4:	add	r8, sp, #52	; 0x34
   182b8:	bne	17058 <main@@Base+0xf7c>
   182bc:	ldr	r0, [sp, #28]
   182c0:	mov	r1, r9
   182c4:	mov	r2, r4
   182c8:	mov	r3, r8
   182cc:	bl	1ac18 <main@@Base+0x4b3c>
   182d0:	mov	r9, r0
   182d4:	ldr	r0, [sp, #52]	; 0x34
   182d8:	cmp	r0, #0
   182dc:	beq	1839c <main@@Base+0x22c0>
   182e0:	mov	r0, #0
   182e4:	strb	r0, [sp, #32]
   182e8:	ldr	r0, [sp, #28]
   182ec:	ldr	r0, [r0]
   182f0:	mov	r1, #1
   182f4:	bl	22808 <flatcc_builder_extend_vector@@Base>
   182f8:	cmp	r0, #0
   182fc:	beq	17058 <main@@Base+0xf7c>
   18300:	mov	r7, r0
   18304:	ldr	r0, [sp, #28]
   18308:	mov	r1, r9
   1830c:	mov	r2, r4
   18310:	mov	r5, r4
   18314:	add	r4, sp, #32
   18318:	mov	r3, r4
   1831c:	bl	1aca8 <main@@Base+0x4bcc>
   18320:	mov	r6, r0
   18324:	cmp	r9, r0
   18328:	beq	18338 <main@@Base+0x225c>
   1832c:	mov	r9, r6
   18330:	mov	r4, r5
   18334:	b	18368 <main@@Base+0x228c>
   18338:	str	r4, [sp]
   1833c:	ldr	r0, [sp, #28]
   18340:	mov	r1, r6
   18344:	mov	r2, r5
   18348:	movw	r3, #37000	; 0x9088
   1834c:	movt	r3, #4
   18350:	bl	1ad38 <main@@Base+0x4c5c>
   18354:	mov	r9, r0
   18358:	cmp	r0, r6
   1835c:	mov	r4, r5
   18360:	cmpne	r9, r4
   18364:	beq	17058 <main@@Base+0xf7c>
   18368:	ldrb	r1, [sp, #32]
   1836c:	mov	r0, r7
   18370:	bl	1ae50 <main@@Base+0x4d74>
   18374:	ldr	r0, [sp, #28]
   18378:	mov	r1, r9
   1837c:	mov	r2, r4
   18380:	mov	r3, r8
   18384:	bl	1ae70 <main@@Base+0x4d94>
   18388:	mov	r9, r0
   1838c:	ldr	r0, [sp, #52]	; 0x34
   18390:	cmp	r0, #0
   18394:	ldr	r6, [sp, #24]
   18398:	bne	182e0 <main@@Base+0x2204>
   1839c:	ldr	r0, [sp, #28]
   183a0:	ldr	r0, [r0]
   183a4:	bl	23a40 <flatcc_builder_end_vector@@Base>
   183a8:	str	r0, [sp, #48]	; 0x30
   183ac:	cmp	r0, #0
   183b0:	beq	17058 <main@@Base+0xf7c>
   183b4:	ldr	r0, [sp, #28]
   183b8:	ldr	r0, [r0]
   183bc:	mov	r1, #30
   183c0:	b	17d1c <main@@Base+0x1c40>
   183c4:	movw	r1, #28788	; 0x7074
   183c8:	movt	r1, #25965	; 0x656d
   183cc:	subs	r1, sl, r1
   183d0:	sbcs	r1, r7, r3
   183d4:	bcs	18810 <main@@Base+0x2734>
   183d8:	movw	r1, #28524	; 0x6f6c
   183dc:	movt	r1, #25199	; 0x626f
   183e0:	eor	r1, sl, r1
   183e4:	orrs	r1, r1, r0
   183e8:	beq	19094 <main@@Base+0x2fb8>
   183ec:	movw	r1, #29541	; 0x7365
   183f0:	movt	r1, #25185	; 0x6261
   183f4:	eor	r1, sl, r1
   183f8:	orrs	r0, r1, r0
   183fc:	bne	19344 <main@@Base+0x3268>
   18400:	add	r6, r8, #8
   18404:	mov	r0, r6
   18408:	mov	r1, r4
   1840c:	bl	1a060 <main@@Base+0x3f84>
   18410:	bfc	r1, #0, #16
   18414:	movw	r0, #0
   18418:	movt	r0, #13876	; 0x3634
   1841c:	teq	r1, r0
   18420:	bne	19568 <main@@Base+0x348c>
   18424:	ldr	r0, [sp, #28]
   18428:	mov	r1, r6
   1842c:	mov	r2, r4
   18430:	mov	r3, #2
   18434:	bl	1a064 <main@@Base+0x3f88>
   18438:	mov	r1, r0
   1843c:	cmp	r6, r0
   18440:	add	r8, sp, #52	; 0x34
   18444:	beq	170fc <main@@Base+0x1020>
   18448:	ldr	r0, [sp, #28]
   1844c:	mov	r2, r4
   18450:	add	r3, sp, #48	; 0x30
   18454:	bl	1bfe8 <main@@Base+0x5f0c>
   18458:	mov	r9, r0
   1845c:	ldr	r0, [sp, #48]	; 0x30
   18460:	cmp	r0, #0
   18464:	ldr	r6, [sp, #24]
   18468:	beq	17058 <main@@Base+0xf7c>
   1846c:	ldr	r0, [sp, #28]
   18470:	ldr	r0, [r0]
   18474:	mov	r1, #35	; 0x23
   18478:	b	17d1c <main@@Base+0x1c40>
   1847c:	eor	r6, r7, r3
   18480:	and	r4, sl, #-16777216	; 0xff000000
   18484:	eor	r0, r4, #872415232	; 0x34000000
   18488:	orrs	r0, r0, r6
   1848c:	bne	188a8 <main@@Base+0x27cc>
   18490:	ldr	r0, [sp, #28]
   18494:	mov	r1, r8
   18498:	ldr	r4, [sp, #20]
   1849c:	mov	r2, r4
   184a0:	mov	r3, #5
   184a4:	bl	1a064 <main@@Base+0x3f88>
   184a8:	mov	r9, r0
   184ac:	cmp	r8, r0
   184b0:	beq	194cc <main@@Base+0x33f0>
   184b4:	ldr	r0, [sp, #28]
   184b8:	ldr	r0, [r0]
   184bc:	mov	r1, #4
   184c0:	mov	r2, #2
   184c4:	mvn	r3, #-1073741824	; 0xc0000000
   184c8:	bl	22df0 <flatcc_builder_start_vector@@Base>
   184cc:	cmp	r0, #0
   184d0:	bne	17058 <main@@Base+0xf7c>
   184d4:	ldr	r5, [sp, #28]
   184d8:	mov	r0, r5
   184dc:	mov	r1, r9
   184e0:	mov	r2, r4
   184e4:	add	r8, sp, #52	; 0x34
   184e8:	mov	r3, r8
   184ec:	bl	1ac18 <main@@Base+0x4b3c>
   184f0:	mov	r9, r0
   184f4:	ldr	r0, [r5]
   184f8:	ldr	r1, [sp, #52]	; 0x34
   184fc:	cmp	r1, #0
   18500:	beq	193c0 <main@@Base+0x32e4>
   18504:	ldr	r6, [sp, #24]
   18508:	mov	r1, #1
   1850c:	bl	22808 <flatcc_builder_extend_vector@@Base>
   18510:	cmp	r0, #0
   18514:	beq	17058 <main@@Base+0xf7c>
   18518:	mov	r3, r0
   1851c:	ldr	r5, [sp, #28]
   18520:	mov	r0, r5
   18524:	mov	r1, r9
   18528:	mov	r2, r4
   1852c:	bl	1b66c <main@@Base+0x5590>
   18530:	mov	r1, r0
   18534:	mov	r0, r5
   18538:	mov	r2, r4
   1853c:	mov	r3, r8
   18540:	bl	1ae70 <main@@Base+0x4d94>
   18544:	mov	r9, r0
   18548:	ldr	r0, [r5]
   1854c:	ldr	r1, [sp, #52]	; 0x34
   18550:	cmp	r1, #0
   18554:	bne	18508 <main@@Base+0x242c>
   18558:	b	193c4 <main@@Base+0x32e8>
   1855c:	eor	r1, sl, r1
   18560:	eor	r0, r7, r3
   18564:	orrs	r1, r1, r0
   18568:	bne	18910 <main@@Base+0x2834>
   1856c:	add	r7, r8, #8
   18570:	mov	r0, r7
   18574:	mov	r1, r4
   18578:	bl	1a060 <main@@Base+0x3f84>
   1857c:	movw	r3, #30257	; 0x7631
   18580:	movt	r3, #26222	; 0x666e
   18584:	subs	r2, r0, r3
   18588:	movw	r2, #13407	; 0x345f
   1858c:	movt	r2, #29494	; 0x7336
   18590:	sbcs	r2, r1, r2
   18594:	bcs	18ac8 <main@@Base+0x29ec>
   18598:	eor	r0, r0, r3
   1859c:	ldr	r2, [sp, #16]
   185a0:	eor	r1, r1, r2
   185a4:	orrs	r0, r0, r1
   185a8:	add	r8, sp, #52	; 0x34
   185ac:	bne	173e4 <main@@Base+0x1308>
   185b0:	ldr	r0, [sp, #28]
   185b4:	mov	r1, r7
   185b8:	mov	r2, r4
   185bc:	mov	r3, #8
   185c0:	bl	1a064 <main@@Base+0x3f88>
   185c4:	mov	r6, r0
   185c8:	cmp	r7, r0
   185cc:	beq	174d4 <main@@Base+0x13f8>
   185d0:	mov	r0, #0
   185d4:	str	r0, [sp, #32]
   185d8:	ldr	r0, [sp, #28]
   185dc:	mov	r1, r6
   185e0:	mov	r2, r4
   185e4:	mov	r5, r4
   185e8:	add	r4, sp, #32
   185ec:	mov	r3, r4
   185f0:	bl	1c6e4 <main@@Base+0x6608>
   185f4:	mov	r7, r0
   185f8:	cmp	r6, r0
   185fc:	beq	17668 <main@@Base+0x158c>
   18600:	mov	r9, r7
   18604:	mov	r4, r5
   18608:	b	17698 <main@@Base+0x15bc>
   1860c:	movw	r2, #27749	; 0x6c65
   18610:	movt	r2, #24930	; 0x6162
   18614:	eor	r2, r0, r2
   18618:	movw	r3, #26228	; 0x6674
   1861c:	movt	r3, #31087	; 0x796f
   18620:	eor	r3, r1, r3
   18624:	orrs	r2, r2, r3
   18628:	beq	190f4 <main@@Base+0x3018>
   1862c:	movw	r2, #26990	; 0x696e
   18630:	movt	r2, #29810	; 0x7472
   18634:	eor	r0, r0, r2
   18638:	eor	r1, r1, r5
   1863c:	orrs	r0, r0, r1
   18640:	bne	19080 <main@@Base+0x2fa4>
   18644:	add	r7, r8, #16
   18648:	mov	r0, r7
   1864c:	mov	r1, r4
   18650:	bl	1a060 <main@@Base+0x3f84>
   18654:	mov	r0, r1
   18658:	bfc	r0, #0, #16
   1865c:	movw	r2, #0
   18660:	movt	r2, #26418	; 0x6732
   18664:	teq	r0, r2
   18668:	bne	17104 <main@@Base+0x1028>
   1866c:	ldr	r0, [sp, #28]
   18670:	mov	r1, r7
   18674:	mov	r2, r4
   18678:	mov	r3, #2
   1867c:	bl	1a064 <main@@Base+0x3f88>
   18680:	mov	r9, r0
   18684:	cmp	r7, r0
   18688:	add	r8, sp, #52	; 0x34
   1868c:	beq	173fc <main@@Base+0x1320>
   18690:	ldr	r0, [sp, #28]
   18694:	ldr	r0, [r0]
   18698:	bl	22e80 <flatcc_builder_start_offset_vector@@Base>
   1869c:	cmp	r0, #0
   186a0:	bne	17058 <main@@Base+0xf7c>
   186a4:	ldr	r0, [sp, #28]
   186a8:	mov	r1, r9
   186ac:	mov	r2, r4
   186b0:	mov	r3, r8
   186b4:	bl	1ac18 <main@@Base+0x4b3c>
   186b8:	b	18a78 <main@@Base+0x299c>
   186bc:	eor	r0, sl, r2
   186c0:	eor	r1, r7, r1
   186c4:	orrs	r0, r0, r1
   186c8:	bne	18b60 <main@@Base+0x2a84>
   186cc:	add	r6, r8, #8
   186d0:	mov	r0, r6
   186d4:	mov	r1, r4
   186d8:	bl	1a060 <main@@Base+0x3f84>
   186dc:	movw	r2, #25971	; 0x6573
   186e0:	movt	r2, #24941	; 0x616d
   186e4:	eor	r1, r1, r2
   186e8:	movw	r2, #25445	; 0x6365
   186ec:	movt	r2, #28769	; 0x7061
   186f0:	eor	r0, r0, r2
   186f4:	orrs	r0, r0, r1
   186f8:	bne	19568 <main@@Base+0x348c>
   186fc:	add	r7, r8, #16
   18700:	mov	r0, r7
   18704:	mov	r1, r4
   18708:	bl	1a060 <main@@Base+0x3f84>
   1870c:	movw	r2, #25971	; 0x6573
   18710:	movt	r2, #24436	; 0x5f74
   18714:	eor	r1, r1, r2
   18718:	and	r0, r0, #-16777216	; 0xff000000
   1871c:	eor	r0, r0, #1946157056	; 0x74000000
   18720:	orrs	r0, r0, r1
   18724:	bne	1725c <main@@Base+0x1180>
   18728:	ldr	r0, [sp, #28]
   1872c:	mov	r1, r7
   18730:	mov	r2, r4
   18734:	mov	r3, #5
   18738:	bl	1a064 <main@@Base+0x3f88>
   1873c:	mov	r1, r0
   18740:	cmp	r7, r0
   18744:	ldr	r6, [sp, #24]
   18748:	add	r8, sp, #52	; 0x34
   1874c:	beq	177fc <main@@Base+0x1720>
   18750:	ldr	r0, [sp, #28]
   18754:	mov	r2, r4
   18758:	add	r3, sp, #48	; 0x30
   1875c:	bl	1b0f8 <main@@Base+0x501c>
   18760:	mov	r9, r0
   18764:	ldr	r0, [sp, #48]	; 0x30
   18768:	cmp	r0, #0
   1876c:	beq	17058 <main@@Base+0xf7c>
   18770:	ldr	r0, [sp, #28]
   18774:	ldr	r0, [r0]
   18778:	mov	r1, #34	; 0x22
   1877c:	b	17d1c <main@@Base+0x1c40>
   18780:	movw	r2, #28530	; 0x6f72
   18784:	movt	r2, #28276	; 0x6e74
   18788:	subs	r0, sl, r2
   1878c:	movw	r1, #30309	; 0x7665
   18790:	movt	r1, #26990	; 0x696e
   18794:	sbcs	r0, r7, r1
   18798:	bcs	18bd4 <main@@Base+0x2af8>
   1879c:	bfc	r7, #0, #16
   187a0:	movw	r0, #0
   187a4:	movt	r0, #26736	; 0x6870
   187a8:	teq	r7, r0
   187ac:	bne	19344 <main@@Base+0x3268>
   187b0:	ldr	r0, [sp, #28]
   187b4:	mov	r1, r8
   187b8:	mov	r2, r4
   187bc:	mov	r3, #2
   187c0:	bl	1a064 <main@@Base+0x3f88>
   187c4:	mov	r6, r0
   187c8:	cmp	r8, r0
   187cc:	beq	19568 <main@@Base+0x348c>
   187d0:	mov	r0, #0
   187d4:	strh	r0, [sp, #32]
   187d8:	ldr	r0, [sp, #28]
   187dc:	mov	r1, r6
   187e0:	mov	r2, r4
   187e4:	mov	r5, r4
   187e8:	add	r4, sp, #32
   187ec:	mov	r3, r4
   187f0:	bl	1af30 <main@@Base+0x4e54>
   187f4:	mov	r7, r0
   187f8:	cmp	r6, r0
   187fc:	add	r8, sp, #52	; 0x34
   18800:	beq	176e0 <main@@Base+0x1604>
   18804:	mov	r9, r7
   18808:	ldr	r6, [sp, #24]
   1880c:	b	17714 <main@@Base+0x1638>
   18810:	mvn	r1, #-1711276032	; 0x9a000000
   18814:	subs	r1, r1, sl
   18818:	sbcs	r1, r3, r7
   1881c:	bcc	18d50 <main@@Base+0x2c74>
   18820:	movw	r1, #28788	; 0x7074
   18824:	movt	r1, #25965	; 0x656d
   18828:	eor	r1, sl, r1
   1882c:	orrs	r0, r1, r0
   18830:	bne	19344 <main@@Base+0x3268>
   18834:	add	r6, r8, #8
   18838:	mov	r0, r6
   1883c:	mov	r1, r4
   18840:	bl	1a060 <main@@Base+0x3f84>
   18844:	and	r0, r1, #-16777216	; 0xff000000
   18848:	teq	r0, #2030043136	; 0x79000000
   1884c:	bne	19568 <main@@Base+0x348c>
   18850:	ldr	r0, [sp, #28]
   18854:	mov	r1, r6
   18858:	mov	r2, r4
   1885c:	mov	r3, #1
   18860:	bl	1a064 <main@@Base+0x3f88>
   18864:	mov	r1, r0
   18868:	cmp	r6, r0
   1886c:	add	r8, sp, #52	; 0x34
   18870:	beq	170fc <main@@Base+0x1020>
   18874:	ldr	r0, [sp, #28]
   18878:	mov	r2, r4
   1887c:	add	r3, sp, #48	; 0x30
   18880:	bl	1c264 <main@@Base+0x6188>
   18884:	mov	r9, r0
   18888:	ldr	r0, [sp, #48]	; 0x30
   1888c:	cmp	r0, #0
   18890:	ldr	r6, [sp, #24]
   18894:	beq	17058 <main@@Base+0xf7c>
   18898:	ldr	r0, [sp, #28]
   1889c:	ldr	r0, [r0]
   188a0:	mov	r1, #14
   188a4:	b	17d1c <main@@Base+0x1c40>
   188a8:	teq	r7, r3
   188ac:	bne	193f0 <main@@Base+0x3314>
   188b0:	ldr	r9, [sp, #28]
   188b4:	mov	r0, r9
   188b8:	mov	r1, r8
   188bc:	ldr	r5, [sp, #20]
   188c0:	mov	r2, r5
   188c4:	mov	r3, #4
   188c8:	bl	1a064 <main@@Base+0x3f88>
   188cc:	mov	r1, r0
   188d0:	cmp	r8, r0
   188d4:	beq	193e4 <main@@Base+0x3308>
   188d8:	ldr	r0, [sp, #44]	; 0x2c
   188dc:	mov	r2, #8
   188e0:	str	r2, [sp]
   188e4:	str	r0, [sp, #4]
   188e8:	movw	r0, #47228	; 0xb87c
   188ec:	movt	r0, #1
   188f0:	str	r0, [sp, #8]
   188f4:	mov	r0, r9
   188f8:	mov	r2, r5
   188fc:	mov	r3, #0
   18900:	bl	28308 <flatcc_json_parser_union@@Base>
   18904:	mov	r9, r0
   18908:	mov	r4, r5
   1890c:	b	1957c <main@@Base+0x34a0>
   18910:	movw	r3, #24431	; 0x5f6f
   18914:	movt	r3, #28530	; 0x6f72
   18918:	subs	r1, sl, r3
   1891c:	movw	r2, #25460	; 0x6374
   18920:	movt	r2, #30309	; 0x7665
   18924:	sbcs	r1, r7, r2
   18928:	bcs	18ddc <main@@Base+0x2d00>
   1892c:	movw	r1, #29556	; 0x7374
   18930:	movt	r1, #28261	; 0x6e65
   18934:	eor	r1, sl, r1
   18938:	orrs	r0, r1, r0
   1893c:	bne	19344 <main@@Base+0x3268>
   18940:	add	r6, r8, #8
   18944:	mov	r0, r6
   18948:	mov	r1, r4
   1894c:	bl	1a060 <main@@Base+0x3f84>
   18950:	movw	r2, #26220	; 0x666c
   18954:	movt	r2, #25956	; 0x6564
   18958:	eor	r1, r1, r2
   1895c:	movw	r2, #25205	; 0x6275
   18960:	movt	r2, #24948	; 0x6174
   18964:	eor	r0, r0, r2
   18968:	orrs	r0, r0, r1
   1896c:	bne	19568 <main@@Base+0x348c>
   18970:	add	r6, r8, #16
   18974:	mov	r0, r6
   18978:	mov	r1, r4
   1897c:	bl	1a060 <main@@Base+0x3f84>
   18980:	movw	r0, #25970	; 0x6572
   18984:	movt	r0, #26214	; 0x6666
   18988:	teq	r1, r0
   1898c:	bne	19568 <main@@Base+0x348c>
   18990:	ldr	r0, [sp, #28]
   18994:	mov	r1, r6
   18998:	mov	r2, r4
   1899c:	mov	r3, #4
   189a0:	bl	1a064 <main@@Base+0x3f88>
   189a4:	mov	r9, r0
   189a8:	cmp	r6, r0
   189ac:	add	r8, sp, #52	; 0x34
   189b0:	beq	17248 <main@@Base+0x116c>
   189b4:	cmp	r9, r4
   189b8:	ldr	r6, [sp, #24]
   189bc:	beq	17b4c <main@@Base+0x1a70>
   189c0:	ldrb	r0, [r9]
   189c4:	cmp	r0, #91	; 0x5b
   189c8:	bne	17b4c <main@@Base+0x1a70>
   189cc:	ldr	r0, [sp, #28]
   189d0:	ldr	r0, [r0]
   189d4:	mov	r1, #1
   189d8:	mov	r2, #1
   189dc:	mvn	r3, #0
   189e0:	bl	22df0 <flatcc_builder_start_vector@@Base>
   189e4:	cmp	r0, #0
   189e8:	bne	17058 <main@@Base+0xf7c>
   189ec:	ldr	r0, [sp, #28]
   189f0:	mov	r1, r9
   189f4:	mov	r2, r4
   189f8:	mov	r3, r8
   189fc:	bl	1ac18 <main@@Base+0x4b3c>
   18a00:	b	17428 <main@@Base+0x134c>
   18a04:	ldr	r0, [sp, #28]
   18a08:	mov	r1, r8
   18a0c:	mov	r2, r4
   18a10:	mov	r3, #5
   18a14:	bl	1a064 <main@@Base+0x3f88>
   18a18:	mov	r6, r0
   18a1c:	cmp	r8, r0
   18a20:	beq	19568 <main@@Base+0x348c>
   18a24:	mov	r0, #0
   18a28:	strb	r0, [sp, #32]
   18a2c:	ldr	r0, [sp, #28]
   18a30:	mov	r1, r6
   18a34:	mov	r2, r4
   18a38:	add	r8, sp, #32
   18a3c:	mov	r3, r8
   18a40:	bl	1aa50 <main@@Base+0x4974>
   18a44:	mov	r7, r0
   18a48:	cmp	r6, r0
   18a4c:	beq	171cc <main@@Base+0x10f0>
   18a50:	mov	r9, r7
   18a54:	ldr	r6, [sp, #24]
   18a58:	b	171fc <main@@Base+0x1120>
   18a5c:	ldr	r1, [sp, #48]	; 0x30
   18a60:	str	r1, [r0]
   18a64:	ldr	r0, [sp, #28]
   18a68:	mov	r1, r9
   18a6c:	mov	r2, r4
   18a70:	mov	r3, r8
   18a74:	bl	1ae70 <main@@Base+0x4d94>
   18a78:	mov	r9, r0
   18a7c:	ldr	r0, [sp, #52]	; 0x34
   18a80:	cmp	r0, #0
   18a84:	beq	177ac <main@@Base+0x16d0>
   18a88:	ldr	r0, [sp, #28]
   18a8c:	mov	r1, r9
   18a90:	mov	r2, r4
   18a94:	add	r3, sp, #48	; 0x30
   18a98:	bl	280f4 <flatcc_json_parser_build_string@@Base>
   18a9c:	mov	r9, r0
   18aa0:	ldr	r0, [sp, #48]	; 0x30
   18aa4:	cmp	r0, #0
   18aa8:	beq	17058 <main@@Base+0xf7c>
   18aac:	ldr	r0, [sp, #28]
   18ab0:	ldr	r0, [r0]
   18ab4:	mov	r1, #1
   18ab8:	bl	229cc <flatcc_builder_extend_offset_vector@@Base>
   18abc:	cmp	r0, #0
   18ac0:	bne	18a5c <main@@Base+0x2980>
   18ac4:	b	17058 <main@@Base+0xf7c>
   18ac8:	movw	r2, #30256	; 0x7630
   18acc:	movt	r2, #26222	; 0x666e
   18ad0:	subs	r2, r2, r0
   18ad4:	movw	r2, #12895	; 0x325f
   18ad8:	movt	r2, #30003	; 0x7533
   18adc:	sbcs	r2, r2, r1
   18ae0:	add	r8, sp, #52	; 0x34
   18ae4:	eor	r0, r0, r3
   18ae8:	bcc	191dc <main@@Base+0x3100>
   18aec:	movw	r2, #13407	; 0x345f
   18af0:	movt	r2, #29494	; 0x7336
   18af4:	eor	r1, r1, r2
   18af8:	orrs	r0, r0, r1
   18afc:	bne	173e4 <main@@Base+0x1308>
   18b00:	ldr	r0, [sp, #28]
   18b04:	mov	r1, r7
   18b08:	mov	r2, r4
   18b0c:	mov	r3, #8
   18b10:	bl	1a064 <main@@Base+0x3f88>
   18b14:	mov	r6, r0
   18b18:	cmp	r7, r0
   18b1c:	beq	17804 <main@@Base+0x1728>
   18b20:	mov	r0, #0
   18b24:	str	r0, [sp, #36]	; 0x24
   18b28:	str	r0, [sp, #32]
   18b2c:	ldr	r0, [sp, #28]
   18b30:	mov	r1, r6
   18b34:	mov	r2, r4
   18b38:	mov	r5, r4
   18b3c:	add	r4, sp, #32
   18b40:	mov	r3, r4
   18b44:	bl	1c8ac <main@@Base+0x67d0>
   18b48:	mov	r7, r0
   18b4c:	cmp	r6, r0
   18b50:	beq	1799c <main@@Base+0x18c0>
   18b54:	mov	r9, r7
   18b58:	mov	r4, r5
   18b5c:	b	179cc <main@@Base+0x18f0>
   18b60:	bic	r0, r7, #255	; 0xff
   18b64:	movw	r1, #29440	; 0x7300
   18b68:	movt	r1, #28783	; 0x706f
   18b6c:	teq	r0, r1
   18b70:	bne	19344 <main@@Base+0x3268>
   18b74:	ldr	r0, [sp, #28]
   18b78:	mov	r1, r8
   18b7c:	mov	r2, r4
   18b80:	mov	r3, #3
   18b84:	bl	1a064 <main@@Base+0x3f88>
   18b88:	mov	r9, r0
   18b8c:	cmp	r8, r0
   18b90:	beq	191d0 <main@@Base+0x30f4>
   18b94:	ldr	r0, [sp, #28]
   18b98:	ldr	r0, [r0]
   18b9c:	mov	r1, #0
   18ba0:	mov	r2, #32
   18ba4:	mov	r3, #16
   18ba8:	bl	23ed8 <flatcc_builder_table_add@@Base>
   18bac:	cmp	r0, #0
   18bb0:	add	r8, sp, #52	; 0x34
   18bb4:	beq	17058 <main@@Base+0xf7c>
   18bb8:	mov	r3, r0
   18bbc:	ldr	r0, [sp, #28]
   18bc0:	mov	r1, r9
   18bc4:	mov	r2, r4
   18bc8:	bl	1b1e0 <main@@Base+0x5104>
   18bcc:	mov	r9, r0
   18bd0:	b	19584 <main@@Base+0x34a8>
   18bd4:	eor	r0, sl, r2
   18bd8:	eor	r1, r7, r1
   18bdc:	orrs	r0, r0, r1
   18be0:	bne	19260 <main@@Base+0x3184>
   18be4:	add	r6, r8, #8
   18be8:	mov	r0, r6
   18bec:	mov	r1, r4
   18bf0:	bl	1a060 <main@@Base+0x3f84>
   18bf4:	and	r0, r1, #-16777216	; 0xff000000
   18bf8:	teq	r0, #2030043136	; 0x79000000
   18bfc:	bne	19568 <main@@Base+0x348c>
   18c00:	ldr	r0, [sp, #28]
   18c04:	mov	r1, r6
   18c08:	mov	r2, r4
   18c0c:	mov	r3, #1
   18c10:	bl	1a064 <main@@Base+0x3f88>
   18c14:	mov	r9, r0
   18c18:	cmp	r6, r0
   18c1c:	add	r8, sp, #52	; 0x34
   18c20:	beq	17248 <main@@Base+0x116c>
   18c24:	ldr	r0, [sp, #28]
   18c28:	ldr	r0, [r0]
   18c2c:	mov	r1, #1
   18c30:	mov	r2, #1
   18c34:	mvn	r3, #0
   18c38:	bl	22df0 <flatcc_builder_start_vector@@Base>
   18c3c:	cmp	r0, #0
   18c40:	ldr	r6, [sp, #24]
   18c44:	bne	17058 <main@@Base+0xf7c>
   18c48:	ldr	r0, [sp, #28]
   18c4c:	mov	r1, r9
   18c50:	mov	r2, r4
   18c54:	mov	r3, r8
   18c58:	bl	1ac18 <main@@Base+0x4b3c>
   18c5c:	mov	r9, r0
   18c60:	ldr	r0, [sp, #52]	; 0x34
   18c64:	cmp	r0, #0
   18c68:	beq	18d28 <main@@Base+0x2c4c>
   18c6c:	mov	r0, #0
   18c70:	strb	r0, [sp, #32]
   18c74:	ldr	r0, [sp, #28]
   18c78:	ldr	r0, [r0]
   18c7c:	mov	r1, #1
   18c80:	bl	22808 <flatcc_builder_extend_vector@@Base>
   18c84:	cmp	r0, #0
   18c88:	beq	17058 <main@@Base+0xf7c>
   18c8c:	mov	r7, r0
   18c90:	ldr	r0, [sp, #28]
   18c94:	mov	r1, r9
   18c98:	mov	r2, r4
   18c9c:	mov	r5, r4
   18ca0:	add	r4, sp, #32
   18ca4:	mov	r3, r4
   18ca8:	bl	1aca8 <main@@Base+0x4bcc>
   18cac:	mov	r6, r0
   18cb0:	cmp	r9, r0
   18cb4:	beq	18cc4 <main@@Base+0x2be8>
   18cb8:	mov	r9, r6
   18cbc:	mov	r4, r5
   18cc0:	b	18cf4 <main@@Base+0x2c18>
   18cc4:	str	r4, [sp]
   18cc8:	ldr	r0, [sp, #28]
   18ccc:	mov	r1, r6
   18cd0:	mov	r2, r5
   18cd4:	movw	r3, #37024	; 0x90a0
   18cd8:	movt	r3, #4
   18cdc:	bl	1ad38 <main@@Base+0x4c5c>
   18ce0:	mov	r9, r0
   18ce4:	cmp	r0, r6
   18ce8:	mov	r4, r5
   18cec:	cmpne	r9, r4
   18cf0:	beq	17058 <main@@Base+0xf7c>
   18cf4:	ldrb	r1, [sp, #32]
   18cf8:	mov	r0, r7
   18cfc:	bl	1ae50 <main@@Base+0x4d74>
   18d00:	ldr	r0, [sp, #28]
   18d04:	mov	r1, r9
   18d08:	mov	r2, r4
   18d0c:	mov	r3, r8
   18d10:	bl	1ae70 <main@@Base+0x4d94>
   18d14:	mov	r9, r0
   18d18:	ldr	r0, [sp, #52]	; 0x34
   18d1c:	cmp	r0, #0
   18d20:	ldr	r6, [sp, #24]
   18d24:	bne	18c6c <main@@Base+0x2b90>
   18d28:	ldr	r0, [sp, #28]
   18d2c:	ldr	r0, [r0]
   18d30:	bl	23a40 <flatcc_builder_end_vector@@Base>
   18d34:	str	r0, [sp, #48]	; 0x30
   18d38:	cmp	r0, #0
   18d3c:	beq	17058 <main@@Base+0xf7c>
   18d40:	ldr	r0, [sp, #28]
   18d44:	ldr	r0, [r0]
   18d48:	mov	r1, #5
   18d4c:	b	17d1c <main@@Base+0x1c40>
   18d50:	mov	r1, sl
   18d54:	bfc	r1, #0, #16
   18d58:	movw	r2, #0
   18d5c:	movt	r2, #26163	; 0x6633
   18d60:	subs	r2, r2, #65536	; 0x10000
   18d64:	eor	r1, r1, r2
   18d68:	sbc	r2, r3, #0
   18d6c:	eor	r2, r7, r2
   18d70:	orrs	r1, r1, r2
   18d74:	bne	192d0 <main@@Base+0x31f4>
   18d78:	ldr	r0, [sp, #28]
   18d7c:	mov	r1, r8
   18d80:	mov	r2, r4
   18d84:	mov	r3, #6
   18d88:	bl	1a064 <main@@Base+0x3f88>
   18d8c:	mov	r6, r0
   18d90:	cmp	r8, r0
   18d94:	beq	19568 <main@@Base+0x348c>
   18d98:	mov	r0, #0
   18d9c:	str	r0, [sp, #32]
   18da0:	ldr	r0, [sp, #28]
   18da4:	mov	r1, r6
   18da8:	mov	r2, r4
   18dac:	mov	r8, r4
   18db0:	add	r4, sp, #32
   18db4:	mov	r3, r4
   18db8:	bl	27668 <flatcc_json_parser_float@@Base>
   18dbc:	mov	r7, r0
   18dc0:	cmp	r6, r0
   18dc4:	beq	17740 <main@@Base+0x1664>
   18dc8:	mov	r9, r7
   18dcc:	ldr	r6, [sp, #24]
   18dd0:	mov	r4, r8
   18dd4:	add	r8, sp, #52	; 0x34
   18dd8:	b	1777c <main@@Base+0x16a0>
   18ddc:	eor	r0, sl, r3
   18de0:	eor	r1, r7, r2
   18de4:	orrs	r0, r0, r1
   18de8:	bne	19344 <main@@Base+0x3268>
   18dec:	add	r7, r8, #8
   18df0:	mov	r0, r7
   18df4:	mov	r1, r4
   18df8:	bl	1a060 <main@@Base+0x3f84>
   18dfc:	movw	r2, #25711	; 0x646f
   18e00:	movt	r2, #26207	; 0x665f
   18e04:	eor	r2, r1, r2
   18e08:	movw	r3, #27749	; 0x6c65
   18e0c:	movt	r3, #30050	; 0x7562
   18e10:	eor	r3, r0, r3
   18e14:	orrs	r2, r3, r2
   18e18:	bne	17268 <main@@Base+0x118c>
   18e1c:	add	r6, r8, #16
   18e20:	mov	r0, r6
   18e24:	mov	r1, r4
   18e28:	bl	1a060 <main@@Base+0x3f84>
   18e2c:	and	r0, r1, #-16777216	; 0xff000000
   18e30:	teq	r0, #1929379840	; 0x73000000
   18e34:	bne	19568 <main@@Base+0x348c>
   18e38:	ldr	r0, [sp, #28]
   18e3c:	mov	r1, r6
   18e40:	mov	r2, r4
   18e44:	mov	r3, #1
   18e48:	bl	1a064 <main@@Base+0x3f88>
   18e4c:	mov	r9, r0
   18e50:	cmp	r6, r0
   18e54:	add	r8, sp, #52	; 0x34
   18e58:	beq	17248 <main@@Base+0x116c>
   18e5c:	ldr	r0, [sp, #28]
   18e60:	ldr	r0, [r0]
   18e64:	mov	r1, #8
   18e68:	mov	r2, #8
   18e6c:	mvn	r3, #-536870912	; 0xe0000000
   18e70:	bl	22df0 <flatcc_builder_start_vector@@Base>
   18e74:	cmp	r0, #0
   18e78:	ldr	r6, [sp, #24]
   18e7c:	bne	17058 <main@@Base+0xf7c>
   18e80:	ldr	r0, [sp, #28]
   18e84:	mov	r1, r9
   18e88:	mov	r2, r4
   18e8c:	mov	r3, r8
   18e90:	bl	1ac18 <main@@Base+0x4b3c>
   18e94:	mov	r9, r0
   18e98:	ldr	r0, [sp, #52]	; 0x34
   18e9c:	cmp	r0, #0
   18ea0:	beq	18f64 <main@@Base+0x2e88>
   18ea4:	mov	r0, #0
   18ea8:	str	r0, [sp, #36]	; 0x24
   18eac:	str	r0, [sp, #32]
   18eb0:	ldr	r0, [sp, #28]
   18eb4:	ldr	r0, [r0]
   18eb8:	mov	r1, #1
   18ebc:	bl	22808 <flatcc_builder_extend_vector@@Base>
   18ec0:	cmp	r0, #0
   18ec4:	beq	17058 <main@@Base+0xf7c>
   18ec8:	mov	r7, r0
   18ecc:	ldr	r0, [sp, #28]
   18ed0:	mov	r1, r9
   18ed4:	mov	r2, r4
   18ed8:	mov	r5, r4
   18edc:	add	r4, sp, #32
   18ee0:	mov	r3, r4
   18ee4:	bl	27590 <flatcc_json_parser_double@@Base>
   18ee8:	mov	r6, r0
   18eec:	cmp	r9, r0
   18ef0:	beq	18f00 <main@@Base+0x2e24>
   18ef4:	mov	r9, r6
   18ef8:	mov	r4, r5
   18efc:	b	18f30 <main@@Base+0x2e54>
   18f00:	str	r4, [sp]
   18f04:	ldr	r0, [sp, #28]
   18f08:	mov	r1, r6
   18f0c:	mov	r2, r5
   18f10:	movw	r3, #37232	; 0x9170
   18f14:	movt	r3, #4
   18f18:	bl	1ce3c <main@@Base+0x6d60>
   18f1c:	mov	r9, r0
   18f20:	cmp	r0, r6
   18f24:	mov	r4, r5
   18f28:	cmpne	r9, r4
   18f2c:	beq	17058 <main@@Base+0xf7c>
   18f30:	vldr	d0, [sp, #32]
   18f34:	mov	r0, r7
   18f38:	bl	1cf4c <main@@Base+0x6e70>
   18f3c:	ldr	r0, [sp, #28]
   18f40:	mov	r1, r9
   18f44:	mov	r2, r4
   18f48:	mov	r3, r8
   18f4c:	bl	1ae70 <main@@Base+0x4d94>
   18f50:	mov	r9, r0
   18f54:	ldr	r0, [sp, #52]	; 0x34
   18f58:	cmp	r0, #0
   18f5c:	ldr	r6, [sp, #24]
   18f60:	bne	18ea4 <main@@Base+0x2dc8>
   18f64:	ldr	r0, [sp, #28]
   18f68:	ldr	r0, [r0]
   18f6c:	bl	23a40 <flatcc_builder_end_vector@@Base>
   18f70:	str	r0, [sp, #48]	; 0x30
   18f74:	cmp	r0, #0
   18f78:	beq	17058 <main@@Base+0xf7c>
   18f7c:	ldr	r0, [sp, #28]
   18f80:	ldr	r0, [r0]
   18f84:	mov	r1, #33	; 0x21
   18f88:	b	17d1c <main@@Base+0x1c40>
   18f8c:	ldr	r0, [sp, #28]
   18f90:	b	1934c <main@@Base+0x3270>
   18f94:	add	r7, r8, #16
   18f98:	mov	r0, r7
   18f9c:	mov	r1, r4
   18fa0:	bl	1a060 <main@@Base+0x3f84>
   18fa4:	lsr	r0, r0, #8
   18fa8:	orr	r0, r0, r1, lsl #24
   18fac:	movw	r2, #25460	; 0x6374
   18fb0:	movt	r2, #29301	; 0x7275
   18fb4:	eor	r0, r0, r2
   18fb8:	movw	r2, #29556	; 0x7374
   18fbc:	movt	r2, #100	; 0x64
   18fc0:	eor	r1, r2, r1, lsr #8
   18fc4:	orrs	r0, r0, r1
   18fc8:	bne	19080 <main@@Base+0x2fa4>
   18fcc:	ldr	r0, [sp, #28]
   18fd0:	mov	r1, r7
   18fd4:	mov	r2, r4
   18fd8:	mov	r3, #7
   18fdc:	bl	1a064 <main@@Base+0x3f88>
   18fe0:	mov	r9, r0
   18fe4:	cmp	r7, r0
   18fe8:	add	r8, sp, #52	; 0x34
   18fec:	beq	173fc <main@@Base+0x1320>
   18ff0:	ldr	r0, [sp, #28]
   18ff4:	ldr	r0, [r0]
   18ff8:	mov	r1, #8
   18ffc:	mov	r2, #4
   19000:	mvn	r3, #-536870912	; 0xe0000000
   19004:	bl	22df0 <flatcc_builder_start_vector@@Base>
   19008:	cmp	r0, #0
   1900c:	bne	17058 <main@@Base+0xf7c>
   19010:	ldr	r5, [sp, #28]
   19014:	mov	r0, r5
   19018:	mov	r1, r9
   1901c:	mov	r2, r4
   19020:	mov	r3, r8
   19024:	bl	1ac18 <main@@Base+0x4b3c>
   19028:	b	19058 <main@@Base+0x2f7c>
   1902c:	mov	r3, r0
   19030:	ldr	r5, [sp, #28]
   19034:	mov	r0, r5
   19038:	mov	r1, r9
   1903c:	mov	r2, r4
   19040:	bl	1bdbc <main@@Base+0x5ce0>
   19044:	mov	r1, r0
   19048:	mov	r0, r5
   1904c:	mov	r2, r4
   19050:	mov	r3, r8
   19054:	bl	1ae70 <main@@Base+0x4d94>
   19058:	mov	r9, r0
   1905c:	ldr	r0, [r5]
   19060:	ldr	r1, [sp, #52]	; 0x34
   19064:	cmp	r1, #0
   19068:	beq	17648 <main@@Base+0x156c>
   1906c:	mov	r1, #1
   19070:	bl	22808 <flatcc_builder_extend_vector@@Base>
   19074:	cmp	r0, #0
   19078:	bne	1902c <main@@Base+0x2f50>
   1907c:	b	17058 <main@@Base+0xf7c>
   19080:	ldr	r0, [sp, #28]
   19084:	mov	r1, r7
   19088:	b	1934c <main@@Base+0x3270>
   1908c:	add	r8, sp, #52	; 0x34
   19090:	b	173e4 <main@@Base+0x1308>
   19094:	ldr	r0, [sp, #28]
   19098:	mov	r1, r8
   1909c:	mov	r2, r4
   190a0:	mov	r3, #8
   190a4:	bl	1a064 <main@@Base+0x3f88>
   190a8:	mov	r6, r0
   190ac:	cmp	r8, r0
   190b0:	beq	19568 <main@@Base+0x348c>
   190b4:	mov	r0, #0
   190b8:	strb	r0, [sp, #32]
   190bc:	ldr	r0, [sp, #28]
   190c0:	mov	r1, r6
   190c4:	mov	r2, r4
   190c8:	mov	r5, r4
   190cc:	add	r4, sp, #32
   190d0:	mov	r3, r4
   190d4:	bl	1bbd0 <main@@Base+0x5af4>
   190d8:	mov	r7, r0
   190dc:	cmp	r6, r0
   190e0:	add	r8, sp, #52	; 0x34
   190e4:	beq	175ac <main@@Base+0x14d0>
   190e8:	mov	r9, r7
   190ec:	mov	r4, r5
   190f0:	b	175dc <main@@Base+0x1500>
   190f4:	add	r6, r8, #16
   190f8:	mov	r0, r6
   190fc:	mov	r1, r4
   19100:	bl	1a060 <main@@Base+0x3f84>
   19104:	and	r0, r1, #-16777216	; 0xff000000
   19108:	teq	r0, #1929379840	; 0x73000000
   1910c:	bne	19568 <main@@Base+0x348c>
   19110:	ldr	r0, [sp, #28]
   19114:	mov	r1, r6
   19118:	mov	r2, r4
   1911c:	mov	r3, #1
   19120:	bl	1a064 <main@@Base+0x3f88>
   19124:	mov	r9, r0
   19128:	cmp	r6, r0
   1912c:	add	r8, sp, #52	; 0x34
   19130:	beq	17248 <main@@Base+0x116c>
   19134:	ldr	r0, [sp, #28]
   19138:	ldr	r0, [r0]
   1913c:	bl	22e80 <flatcc_builder_start_offset_vector@@Base>
   19140:	cmp	r0, #0
   19144:	ldr	r6, [sp, #24]
   19148:	bne	17058 <main@@Base+0xf7c>
   1914c:	ldr	r0, [sp, #28]
   19150:	mov	r1, r9
   19154:	mov	r2, r4
   19158:	mov	r3, r8
   1915c:	bl	1ac18 <main@@Base+0x4b3c>
   19160:	b	19180 <main@@Base+0x30a4>
   19164:	ldr	r1, [sp, #48]	; 0x30
   19168:	str	r1, [r0]
   1916c:	ldr	r0, [sp, #28]
   19170:	mov	r1, r9
   19174:	mov	r2, r4
   19178:	mov	r3, r8
   1917c:	bl	1ae70 <main@@Base+0x4d94>
   19180:	mov	r9, r0
   19184:	ldr	r0, [sp, #52]	; 0x34
   19188:	cmp	r0, #0
   1918c:	beq	177d4 <main@@Base+0x16f8>
   19190:	ldr	r0, [sp, #28]
   19194:	mov	r1, r9
   19198:	mov	r2, r4
   1919c:	add	r3, sp, #48	; 0x30
   191a0:	bl	17018 <main@@Base+0xf3c>
   191a4:	mov	r9, r0
   191a8:	ldr	r0, [sp, #48]	; 0x30
   191ac:	cmp	r0, #0
   191b0:	beq	17058 <main@@Base+0xf7c>
   191b4:	ldr	r0, [sp, #28]
   191b8:	ldr	r0, [r0]
   191bc:	mov	r1, #1
   191c0:	bl	229cc <flatcc_builder_extend_offset_vector@@Base>
   191c4:	cmp	r0, #0
   191c8:	bne	19164 <main@@Base+0x3088>
   191cc:	b	17058 <main@@Base+0xf7c>
   191d0:	ldr	r0, [sp, #28]
   191d4:	mov	r1, r9
   191d8:	b	1934c <main@@Base+0x3270>
   191dc:	movw	r2, #13407	; 0x345f
   191e0:	movt	r2, #30006	; 0x7536
   191e4:	eor	r2, r1, r2
   191e8:	orrs	r2, r0, r2
   191ec:	beq	1754c <main@@Base+0x1470>
   191f0:	movw	r2, #12895	; 0x325f
   191f4:	movt	r2, #30003	; 0x7533
   191f8:	eor	r1, r1, r2
   191fc:	orrs	r0, r0, r1
   19200:	bne	173e4 <main@@Base+0x1308>
   19204:	ldr	r0, [sp, #28]
   19208:	mov	r1, r7
   1920c:	mov	r2, r4
   19210:	mov	r3, #8
   19214:	bl	1a064 <main@@Base+0x3f88>
   19218:	mov	r6, r0
   1921c:	cmp	r7, r0
   19220:	beq	17880 <main@@Base+0x17a4>
   19224:	mov	r0, #0
   19228:	str	r0, [sp, #32]
   1922c:	ldr	r0, [sp, #28]
   19230:	mov	r1, r6
   19234:	mov	r2, r4
   19238:	mov	r5, r4
   1923c:	add	r4, sp, #32
   19240:	mov	r3, r4
   19244:	bl	1ca90 <main@@Base+0x69b4>
   19248:	mov	r7, r0
   1924c:	cmp	r6, r0
   19250:	beq	17ba0 <main@@Base+0x1ac4>
   19254:	mov	r9, r7
   19258:	mov	r4, r5
   1925c:	b	17bd0 <main@@Base+0x1af4>
   19260:	movw	r0, #28257	; 0x6e61
   19264:	movt	r0, #28001	; 0x6d61
   19268:	teq	r7, r0
   1926c:	bne	19344 <main@@Base+0x3268>
   19270:	ldr	r0, [sp, #28]
   19274:	mov	r1, r8
   19278:	mov	r2, r4
   1927c:	mov	r3, #4
   19280:	bl	1a064 <main@@Base+0x3f88>
   19284:	mov	r6, r0
   19288:	cmp	r8, r0
   1928c:	beq	19568 <main@@Base+0x348c>
   19290:	mov	r0, #0
   19294:	strh	r0, [sp, #32]
   19298:	ldr	r0, [sp, #28]
   1929c:	mov	r1, r6
   192a0:	mov	r2, r4
   192a4:	mov	r5, r4
   192a8:	add	r4, sp, #32
   192ac:	mov	r3, r4
   192b0:	bl	1af30 <main@@Base+0x4e54>
   192b4:	mov	r7, r0
   192b8:	cmp	r6, r0
   192bc:	add	r8, sp, #52	; 0x34
   192c0:	beq	17a1c <main@@Base+0x1940>
   192c4:	mov	r9, r7
   192c8:	ldr	r6, [sp, #24]
   192cc:	b	17a50 <main@@Base+0x1974>
   192d0:	and	r1, sl, #-16777216	; 0xff000000
   192d4:	eor	r1, r1, #1711276032	; 0x66000000
   192d8:	orrs	r0, r1, r0
   192dc:	bne	19344 <main@@Base+0x3268>
   192e0:	ldr	r0, [sp, #28]
   192e4:	mov	r1, r8
   192e8:	mov	r2, r4
   192ec:	mov	r3, #5
   192f0:	bl	1a064 <main@@Base+0x3f88>
   192f4:	mov	r6, r0
   192f8:	cmp	r8, r0
   192fc:	beq	19568 <main@@Base+0x348c>
   19300:	mov	r0, #0
   19304:	str	r0, [sp, #32]
   19308:	ldr	r0, [sp, #28]
   1930c:	mov	r1, r6
   19310:	mov	r2, r4
   19314:	mov	r8, r4
   19318:	add	r4, sp, #32
   1931c:	mov	r3, r4
   19320:	bl	27668 <flatcc_json_parser_float@@Base>
   19324:	mov	r7, r0
   19328:	cmp	r6, r0
   1932c:	beq	17a9c <main@@Base+0x19c0>
   19330:	mov	r9, r7
   19334:	ldr	r6, [sp, #24]
   19338:	mov	r4, r8
   1933c:	add	r8, sp, #52	; 0x34
   19340:	b	17ad8 <main@@Base+0x19fc>
   19344:	ldr	r0, [sp, #28]
   19348:	mov	r1, r8
   1934c:	mov	r2, r4
   19350:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   19354:	mov	r9, r0
   19358:	b	19580 <main@@Base+0x34a4>
   1935c:	str	r4, [sp]
   19360:	ldr	r0, [sp, #28]
   19364:	mov	r1, r7
   19368:	mov	r2, r5
   1936c:	movw	r3, #37112	; 0x90f8
   19370:	movt	r3, #4
   19374:	bl	1c5c4 <main@@Base+0x64e8>
   19378:	mov	r9, r0
   1937c:	cmp	r0, r7
   19380:	ldr	r6, [sp, #24]
   19384:	mov	r4, r5
   19388:	cmpne	r9, r4
   1938c:	beq	17058 <main@@Base+0xf7c>
   19390:	vldr	s0, [sp, #32]
   19394:	vcmp.f32	s0, #0.0
   19398:	vmrs	APSR_nzcv, fpscr
   1939c:	bne	193b0 <main@@Base+0x32d4>
   193a0:	ldr	r0, [sp, #28]
   193a4:	ldrb	r0, [r0, #8]
   193a8:	tst	r0, #2
   193ac:	beq	19584 <main@@Base+0x34a8>
   193b0:	ldr	r0, [sp, #28]
   193b4:	ldr	r0, [r0]
   193b8:	mov	r1, #27
   193bc:	b	17b04 <main@@Base+0x1a28>
   193c0:	ldr	r6, [sp, #24]
   193c4:	bl	23a40 <flatcc_builder_end_vector@@Base>
   193c8:	str	r0, [sp, #48]	; 0x30
   193cc:	cmp	r0, #0
   193d0:	beq	17058 <main@@Base+0xf7c>
   193d4:	ldr	r0, [sp, #28]
   193d8:	ldr	r0, [r0]
   193dc:	mov	r1, #9
   193e0:	b	17d1c <main@@Base+0x1c40>
   193e4:	mov	r8, r1
   193e8:	movw	r3, #29556	; 0x7374
   193ec:	movt	r3, #29797	; 0x7465
   193f0:	eor	r0, r7, r3
   193f4:	eor	r1, r4, #889192448	; 0x35000000
   193f8:	orrs	r0, r1, r0
   193fc:	bne	194d4 <main@@Base+0x33f8>
   19400:	ldr	r0, [sp, #28]
   19404:	mov	r1, r8
   19408:	ldr	r4, [sp, #20]
   1940c:	mov	r2, r4
   19410:	mov	r3, #5
   19414:	bl	1a064 <main@@Base+0x3f88>
   19418:	mov	r9, r0
   1941c:	cmp	r8, r0
   19420:	beq	194cc <main@@Base+0x33f0>
   19424:	ldr	r0, [sp, #28]
   19428:	ldr	r0, [r0]
   1942c:	mov	r1, #4
   19430:	mov	r2, #2
   19434:	mvn	r3, #-1073741824	; 0xc0000000
   19438:	bl	22df0 <flatcc_builder_start_vector@@Base>
   1943c:	cmp	r0, #0
   19440:	bne	17058 <main@@Base+0xf7c>
   19444:	ldr	r5, [sp, #28]
   19448:	mov	r0, r5
   1944c:	mov	r1, r9
   19450:	mov	r2, r4
   19454:	add	r8, sp, #52	; 0x34
   19458:	mov	r3, r8
   1945c:	bl	1ac18 <main@@Base+0x4b3c>
   19460:	mov	r9, r0
   19464:	ldr	r0, [r5]
   19468:	ldr	r1, [sp, #52]	; 0x34
   1946c:	cmp	r1, #0
   19470:	beq	17624 <main@@Base+0x1548>
   19474:	ldr	r6, [sp, #24]
   19478:	mov	r1, #1
   1947c:	bl	22808 <flatcc_builder_extend_vector@@Base>
   19480:	cmp	r0, #0
   19484:	beq	17058 <main@@Base+0xf7c>
   19488:	mov	r3, r0
   1948c:	ldr	r5, [sp, #28]
   19490:	mov	r0, r5
   19494:	mov	r1, r9
   19498:	mov	r2, r4
   1949c:	bl	1b66c <main@@Base+0x5590>
   194a0:	mov	r1, r0
   194a4:	mov	r0, r5
   194a8:	mov	r2, r4
   194ac:	mov	r3, r8
   194b0:	bl	1ae70 <main@@Base+0x4d94>
   194b4:	mov	r9, r0
   194b8:	ldr	r0, [r5]
   194bc:	ldr	r1, [sp, #52]	; 0x34
   194c0:	cmp	r1, #0
   194c4:	bne	19478 <main@@Base+0x339c>
   194c8:	b	17628 <main@@Base+0x154c>
   194cc:	mov	r8, r9
   194d0:	b	194d8 <main@@Base+0x33fc>
   194d4:	ldr	r4, [sp, #20]
   194d8:	movw	r0, #31088	; 0x7970
   194dc:	movt	r0, #24436	; 0x5f74
   194e0:	eor	r0, sl, r0
   194e4:	orrs	r0, r0, r6
   194e8:	bne	170f0 <main@@Base+0x1014>
   194ec:	add	r6, r8, #8
   194f0:	mov	r0, r6
   194f4:	mov	r1, r4
   194f8:	bl	1a060 <main@@Base+0x3f84>
   194fc:	and	r0, r1, #-16777216	; 0xff000000
   19500:	teq	r0, #1694498816	; 0x65000000
   19504:	bne	19568 <main@@Base+0x348c>
   19508:	ldr	r0, [sp, #28]
   1950c:	mov	r1, r6
   19510:	mov	r2, r4
   19514:	mov	r3, #1
   19518:	bl	1a064 <main@@Base+0x3f88>
   1951c:	mov	r1, r0
   19520:	cmp	r6, r0
   19524:	add	r8, sp, #52	; 0x34
   19528:	beq	170fc <main@@Base+0x1020>
   1952c:	ldr	r0, [sp, #44]	; 0x2c
   19530:	mov	r2, #8
   19534:	str	r2, [sp]
   19538:	str	r0, [sp, #4]
   1953c:	movw	r0, #37048	; 0x90b8
   19540:	movt	r0, #4
   19544:	str	r0, [sp, #8]
   19548:	movw	r0, #47228	; 0xb87c
   1954c:	movt	r0, #1
   19550:	str	r0, [sp, #12]
   19554:	ldr	r0, [sp, #28]
   19558:	mov	r2, r4
   1955c:	mov	r3, #0
   19560:	bl	2842c <flatcc_json_parser_union_type@@Base>
   19564:	b	17990 <main@@Base+0x18b4>
   19568:	ldr	r0, [sp, #28]
   1956c:	mov	r1, r6
   19570:	mov	r2, r4
   19574:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   19578:	mov	r9, r0
   1957c:	ldr	r6, [sp, #24]
   19580:	add	r8, sp, #52	; 0x34
   19584:	ldr	r0, [sp, #28]
   19588:	mov	r1, r9
   1958c:	mov	r2, r4
   19590:	mov	r3, r8
   19594:	bl	1cf64 <main@@Base+0x6e88>
   19598:	mov	r9, r0
   1959c:	ldr	r0, [sp, #52]	; 0x34
   195a0:	cmp	r0, #0
   195a4:	bne	17e70 <main@@Base+0x1d94>
   195a8:	ldr	r0, [sp, #28]
   195ac:	ldr	r0, [r0, #24]
   195b0:	cmp	r0, #0
   195b4:	bne	17058 <main@@Base+0xf7c>
   195b8:	ldr	r0, [sp, #28]
   195bc:	ldr	r0, [r0]
   195c0:	mov	r1, #3
   195c4:	bl	23658 <flatcc_builder_check_required_field@@Base>
   195c8:	cmp	r0, #0
   195cc:	beq	19604 <main@@Base+0x3528>
   195d0:	ldr	r3, [sp, #44]	; 0x2c
   195d4:	ldr	r5, [sp, #28]
   195d8:	mov	r0, r5
   195dc:	mov	r1, r9
   195e0:	mov	r2, r4
   195e4:	bl	282ac <flatcc_json_parser_finalize_unions@@Base>
   195e8:	mov	r9, r0
   195ec:	ldr	r0, [r5]
   195f0:	bl	237e4 <flatcc_builder_end_table@@Base>
   195f4:	str	r0, [r6]
   195f8:	cmp	r0, #0
   195fc:	bne	17070 <main@@Base+0xf94>
   19600:	b	17058 <main@@Base+0xf7c>
   19604:	ldr	r0, [sp, #28]
   19608:	mov	r1, r9
   1960c:	mov	r2, r4
   19610:	mov	r3, #29
   19614:	bl	26958 <flatcc_json_parser_set_error@@Base>
   19618:	mov	r9, r0
   1961c:	b	17058 <main@@Base+0xf7c>
   19620:	ldr	r4, [sp, #20]
   19624:	b	17058 <main@@Base+0xf7c>
   19628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1962c:	add	fp, sp, #28
   19630:	sub	sp, sp, #20
   19634:	mov	r4, r1
   19638:	mov	r5, r0
   1963c:	movw	r0, #2272	; 0x8e0
   19640:	movt	r0, #2
   19644:	mov	r1, #3
   19648:	str	r1, [sp]
   1964c:	str	r0, [sp, #4]
   19650:	mov	r8, #0
   19654:	movw	r3, #21853	; 0x555d
   19658:	movt	r3, #3
   1965c:	mov	r0, r5
   19660:	mov	r1, r4
   19664:	mov	r2, #0
   19668:	bl	2fdc4 <flatcc_json_printer_struct_field@@Base>
   1966c:	mov	r0, #150	; 0x96
   19670:	mov	r1, #4
   19674:	str	r1, [sp]
   19678:	mov	r6, #4
   1967c:	str	r0, [sp, #4]
   19680:	movw	r3, #21857	; 0x5561
   19684:	movt	r3, #3
   19688:	mov	r0, r5
   1968c:	mov	r1, r4
   19690:	mov	r2, #1
   19694:	bl	2b3b0 <flatcc_json_printer_int16_field@@Base>
   19698:	mov	r0, #100	; 0x64
   1969c:	mov	r1, #2
   196a0:	str	r1, [sp]
   196a4:	str	r0, [sp, #4]
   196a8:	movw	r3, #21862	; 0x5566
   196ac:	movt	r3, #3
   196b0:	mov	r0, r5
   196b4:	mov	r1, r4
   196b8:	mov	r2, #2
   196bc:	bl	2b3b0 <flatcc_json_printer_int16_field@@Base>
   196c0:	str	r6, [sp]
   196c4:	movw	r3, #21865	; 0x5569
   196c8:	movt	r3, #3
   196cc:	mov	r0, r5
   196d0:	mov	r1, r4
   196d4:	mov	r2, #3
   196d8:	bl	2ac9c <flatcc_json_printer_string_field@@Base>
   196dc:	mov	r0, #9
   196e0:	str	r0, [sp]
   196e4:	mov	r7, #5
   196e8:	movw	r3, #21870	; 0x556e
   196ec:	movt	r3, #3
   196f0:	mov	r0, r5
   196f4:	mov	r1, r4
   196f8:	mov	r2, #5
   196fc:	bl	2cb44 <flatcc_json_printer_uint8_vector_field@@Base>
   19700:	movw	r0, #2524	; 0x9dc
   19704:	movt	r0, #2
   19708:	mov	r1, #8
   1970c:	str	r7, [sp]
   19710:	mov	r7, #5
   19714:	str	r1, [sp, #4]
   19718:	str	r0, [sp, #8]
   1971c:	movw	r3, #21880	; 0x5578
   19720:	movt	r3, #3
   19724:	mov	r0, r5
   19728:	mov	r1, r4
   1972c:	mov	r2, #6
   19730:	bl	2bc10 <flatcc_json_printer_int8_enum_field@@Base>
   19734:	movw	r0, #2856	; 0xb28
   19738:	movt	r0, #2
   1973c:	movw	r1, #2740	; 0xab4
   19740:	movt	r1, #2
   19744:	str	r6, [sp]
   19748:	str	r1, [sp, #4]
   1974c:	str	r0, [sp, #8]
   19750:	movw	r3, #22256	; 0x56f0
   19754:	movt	r3, #3
   19758:	mov	r0, r5
   1975c:	mov	r1, r4
   19760:	mov	r2, #8
   19764:	bl	2fa20 <flatcc_json_printer_union_field@@Base>
   19768:	movw	r0, #2944	; 0xb80
   1976c:	movt	r0, #2
   19770:	str	r7, [sp]
   19774:	mov	sl, #5
   19778:	str	r6, [sp, #4]
   1977c:	str	r0, [sp, #8]
   19780:	movw	r3, #21886	; 0x557e
   19784:	movt	r3, #3
   19788:	mov	r0, r5
   1978c:	mov	r1, r4
   19790:	mov	r2, #9
   19794:	bl	2f03c <flatcc_json_printer_struct_vector_field@@Base>
   19798:	mov	r7, #17
   1979c:	str	r7, [sp]
   197a0:	movw	r3, #21892	; 0x5584
   197a4:	movt	r3, #3
   197a8:	mov	r0, r5
   197ac:	mov	r1, r4
   197b0:	mov	r2, #10
   197b4:	bl	2f2b8 <flatcc_json_printer_string_vector_field@@Base>
   197b8:	movw	r9, #38440	; 0x9628
   197bc:	movt	r9, #1
   197c0:	stm	sp, {r7, r9}
   197c4:	movw	r3, #21910	; 0x5596
   197c8:	movt	r3, #3
   197cc:	mov	r0, r5
   197d0:	mov	r1, r4
   197d4:	mov	r2, #11
   197d8:	bl	2f460 <flatcc_json_printer_table_vector_field@@Base>
   197dc:	str	sl, [sp]
   197e0:	mov	sl, #5
   197e4:	str	r9, [sp, #4]
   197e8:	movw	r3, #21928	; 0x55a8
   197ec:	movt	r3, #3
   197f0:	mov	r0, r5
   197f4:	mov	r1, r4
   197f8:	mov	r2, #12
   197fc:	bl	2f99c <flatcc_json_printer_table_field@@Base>
   19800:	mov	r0, #20
   19804:	stm	sp, {r0, r8, r9}
   19808:	movw	r3, #21934	; 0x55ae
   1980c:	movt	r3, #3
   19810:	mov	r0, r5
   19814:	mov	r1, r4
   19818:	mov	r2, #13
   1981c:	bl	3021c <flatcc_json_printer_table_as_nested_root@@Base>
   19820:	movw	r0, #3040	; 0xbe0
   19824:	movt	r0, #2
   19828:	mov	r1, #9
   1982c:	str	r1, [sp]
   19830:	str	r0, [sp, #4]
   19834:	movw	r3, #21955	; 0x55c3
   19838:	movt	r3, #3
   1983c:	mov	r0, r5
   19840:	mov	r1, r4
   19844:	mov	r2, #14
   19848:	bl	2f99c <flatcc_json_printer_table_field@@Base>
   1984c:	mov	r9, #8
   19850:	str	r9, [sp]
   19854:	mov	r0, #1
   19858:	str	r0, [sp, #4]
   1985c:	movw	r3, #21965	; 0x55cd
   19860:	movt	r3, #3
   19864:	mov	r0, r5
   19868:	mov	r1, r4
   1986c:	mov	r2, #15
   19870:	bl	2b5ec <flatcc_json_printer_bool_field@@Base>
   19874:	mov	r6, #16
   19878:	stm	sp, {r6, r8}
   1987c:	movw	r3, #21974	; 0x55d6
   19880:	movt	r3, #3
   19884:	mov	r0, r5
   19888:	mov	r1, r4
   1988c:	mov	r2, #16
   19890:	bl	2b464 <flatcc_json_printer_int32_field@@Base>
   19894:	stm	sp, {r6, r8}
   19898:	movw	r3, #21991	; 0x55e7
   1989c:	movt	r3, #3
   198a0:	mov	r0, r5
   198a4:	mov	r1, r4
   198a8:	mov	r2, #17
   198ac:	bl	2b174 <flatcc_json_printer_uint32_field@@Base>
   198b0:	str	r8, [sp, #8]
   198b4:	str	r8, [sp, #12]
   198b8:	str	r6, [sp]
   198bc:	movw	r3, #22008	; 0x55f8
   198c0:	movt	r3, #3
   198c4:	mov	r0, r5
   198c8:	mov	r1, r4
   198cc:	mov	r2, #18
   198d0:	bl	2b518 <flatcc_json_printer_int64_field@@Base>
   198d4:	str	r8, [sp, #8]
   198d8:	str	r8, [sp, #12]
   198dc:	str	r6, [sp]
   198e0:	movw	r3, #22025	; 0x5609
   198e4:	movt	r3, #3
   198e8:	mov	r0, r5
   198ec:	mov	r1, r4
   198f0:	mov	r2, #19
   198f4:	bl	2b228 <flatcc_json_printer_uint64_field@@Base>
   198f8:	stm	sp, {r7, r8}
   198fc:	movw	r3, #22042	; 0x561a
   19900:	movt	r3, #3
   19904:	mov	r0, r5
   19908:	mov	r1, r4
   1990c:	mov	r2, #20
   19910:	bl	2b464 <flatcc_json_printer_int32_field@@Base>
   19914:	stm	sp, {r7, r8}
   19918:	movw	r3, #22060	; 0x562c
   1991c:	movt	r3, #3
   19920:	mov	r0, r5
   19924:	mov	r1, r4
   19928:	mov	r2, #21
   1992c:	bl	2b174 <flatcc_json_printer_uint32_field@@Base>
   19930:	str	r8, [sp, #8]
   19934:	str	r8, [sp, #12]
   19938:	str	r7, [sp]
   1993c:	movw	r3, #22078	; 0x563e
   19940:	movt	r3, #3
   19944:	mov	r0, r5
   19948:	mov	r1, r4
   1994c:	mov	r2, #22
   19950:	bl	2b518 <flatcc_json_printer_int64_field@@Base>
   19954:	str	r8, [sp, #8]
   19958:	str	r8, [sp, #12]
   1995c:	str	r7, [sp]
   19960:	mov	r8, #23
   19964:	movw	r3, #22096	; 0x5650
   19968:	movt	r3, #3
   1996c:	mov	r0, r5
   19970:	mov	r1, r4
   19974:	mov	r2, #23
   19978:	bl	2b228 <flatcc_json_printer_uint64_field@@Base>
   1997c:	str	r6, [sp]
   19980:	movw	r3, #22114	; 0x5662
   19984:	movt	r3, #3
   19988:	mov	r0, r5
   1998c:	mov	r1, r4
   19990:	mov	r2, #24
   19994:	bl	2d904 <flatcc_json_printer_bool_vector_field@@Base>
   19998:	str	sl, [sp]
   1999c:	vldr	s0, [pc, #392]	; 19b2c <main@@Base+0x3a50>
   199a0:	movw	r3, #22131	; 0x5673
   199a4:	movt	r3, #3
   199a8:	mov	r0, r5
   199ac:	mov	r1, r4
   199b0:	mov	r2, #25
   199b4:	bl	2b6e0 <flatcc_json_printer_float_field@@Base>
   199b8:	mov	r6, #6
   199bc:	str	r6, [sp]
   199c0:	movw	r3, #22137	; 0x5679
   199c4:	movt	r3, #3
   199c8:	vmov.f32	s0, #8	; 0x40400000  3.0
   199cc:	mov	r0, r5
   199d0:	mov	r1, r4
   199d4:	mov	r2, #26
   199d8:	bl	2b6e0 <flatcc_json_printer_float_field@@Base>
   199dc:	str	r6, [sp]
   199e0:	vldr	s0, [pc, #328]	; 19b30 <main@@Base+0x3a54>
   199e4:	movw	r3, #22144	; 0x5680
   199e8:	movt	r3, #3
   199ec:	mov	r0, r5
   199f0:	mov	r1, r4
   199f4:	mov	r2, #27
   199f8:	bl	2b6e0 <flatcc_json_printer_float_field@@Base>
   199fc:	mov	r0, #18
   19a00:	str	r0, [sp]
   19a04:	movw	r3, #22151	; 0x5687
   19a08:	movt	r3, #3
   19a0c:	mov	r0, r5
   19a10:	mov	r1, r4
   19a14:	mov	r2, #28
   19a18:	bl	2f2b8 <flatcc_json_printer_string_vector_field@@Base>
   19a1c:	movw	r0, #3172	; 0xc64
   19a20:	movt	r0, #2
   19a24:	stm	sp, {r8, r9}
   19a28:	str	r0, [sp, #8]
   19a2c:	movw	r3, #22170	; 0x569a
   19a30:	movt	r3, #3
   19a34:	mov	r0, r5
   19a38:	mov	r1, r4
   19a3c:	mov	r2, #29
   19a40:	bl	2f03c <flatcc_json_printer_struct_vector_field@@Base>
   19a44:	mov	r6, #4
   19a48:	str	r6, [sp]
   19a4c:	movw	r3, #22194	; 0x56b2
   19a50:	movt	r3, #3
   19a54:	mov	r0, r5
   19a58:	mov	r1, r4
   19a5c:	mov	r2, #30
   19a60:	bl	2cb44 <flatcc_json_printer_uint8_vector_field@@Base>
   19a64:	str	sl, [sp]
   19a68:	str	r6, [sp, #4]
   19a6c:	movw	r0, #2944	; 0xb80
   19a70:	movt	r0, #2
   19a74:	str	r0, [sp, #8]
   19a78:	movw	r3, #22199	; 0x56b7
   19a7c:	movt	r3, #3
   19a80:	mov	r0, r5
   19a84:	mov	r1, r4
   19a88:	mov	r2, #31
   19a8c:	bl	2f03c <flatcc_json_printer_struct_vector_field@@Base>
   19a90:	mov	r0, #15
   19a94:	str	r0, [sp]
   19a98:	movw	r3, #22205	; 0x56bd
   19a9c:	movt	r3, #3
   19aa0:	mov	r0, r5
   19aa4:	mov	r1, r4
   19aa8:	mov	r2, #32
   19aac:	bl	2d74c <flatcc_json_printer_int64_vector_field@@Base>
   19ab0:	str	r7, [sp]
   19ab4:	movw	r3, #22221	; 0x56cd
   19ab8:	movt	r3, #3
   19abc:	mov	r0, r5
   19ac0:	mov	r1, r4
   19ac4:	mov	r2, #33	; 0x21
   19ac8:	bl	2dc7c <flatcc_json_printer_double_vector_field@@Base>
   19acc:	movw	r0, #3280	; 0xcd0
   19ad0:	movt	r0, #2
   19ad4:	mov	r1, #21
   19ad8:	str	r1, [sp]
   19adc:	str	r0, [sp, #4]
   19ae0:	movw	r3, #22239	; 0x56df
   19ae4:	movt	r3, #3
   19ae8:	mov	r0, r5
   19aec:	mov	r1, r4
   19af0:	mov	r2, #34	; 0x22
   19af4:	bl	2f99c <flatcc_json_printer_table_field@@Base>
   19af8:	movw	r0, #3284	; 0xcd4
   19afc:	movt	r0, #2
   19b00:	mov	r1, #10
   19b04:	str	r1, [sp]
   19b08:	str	r0, [sp, #4]
   19b0c:	movw	r3, #22261	; 0x56f5
   19b10:	movt	r3, #3
   19b14:	mov	r0, r5
   19b18:	mov	r1, r4
   19b1c:	mov	r2, #35	; 0x23
   19b20:	bl	2f99c <flatcc_json_printer_table_field@@Base>
   19b24:	sub	sp, fp, #28
   19b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b2c:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   19b30:	andeq	r0, r0, r0
   19b34:	push	{r4, r5, r6, r7, fp, lr}
   19b38:	add	fp, sp, #16
   19b3c:	sub	sp, sp, #8
   19b40:	mov	r4, r0
   19b44:	mov	r1, #0
   19b48:	mov	r2, #32
   19b4c:	mov	r3, #16
   19b50:	bl	25358 <flatcc_verify_field@@Base>
   19b54:	cmp	r0, #0
   19b58:	bne	19f60 <main@@Base+0x3e84>
   19b5c:	mov	r0, r4
   19b60:	mov	r1, #2
   19b64:	mov	r2, #2
   19b68:	mov	r3, #2
   19b6c:	bl	25358 <flatcc_verify_field@@Base>
   19b70:	cmp	r0, #0
   19b74:	bne	19f60 <main@@Base+0x3e84>
   19b78:	mov	r0, r4
   19b7c:	mov	r1, #1
   19b80:	mov	r2, #2
   19b84:	mov	r3, #2
   19b88:	bl	25358 <flatcc_verify_field@@Base>
   19b8c:	cmp	r0, #0
   19b90:	bne	19f60 <main@@Base+0x3e84>
   19b94:	mov	r0, r4
   19b98:	mov	r1, #3
   19b9c:	mov	r2, #1
   19ba0:	bl	253c4 <flatcc_verify_string_field@@Base>
   19ba4:	cmp	r0, #0
   19ba8:	bne	19f60 <main@@Base+0x3e84>
   19bac:	mov	r5, #1
   19bb0:	mov	r0, r4
   19bb4:	mov	r1, #6
   19bb8:	mov	r2, #1
   19bbc:	mov	r3, #1
   19bc0:	bl	25358 <flatcc_verify_field@@Base>
   19bc4:	cmp	r0, #0
   19bc8:	bne	19f60 <main@@Base+0x3e84>
   19bcc:	mvn	r0, #0
   19bd0:	str	r5, [sp]
   19bd4:	str	r0, [sp, #4]
   19bd8:	mov	r0, r4
   19bdc:	mov	r1, #5
   19be0:	mov	r2, #0
   19be4:	mov	r3, #1
   19be8:	bl	25518 <flatcc_verify_vector_field@@Base>
   19bec:	cmp	r0, #0
   19bf0:	bne	19f60 <main@@Base+0x3e84>
   19bf4:	movw	r3, #39732	; 0x9b34
   19bf8:	movt	r3, #1
   19bfc:	mov	r0, r4
   19c00:	mov	r1, #11
   19c04:	mov	r2, #0
   19c08:	bl	25880 <flatcc_verify_table_vector_field@@Base>
   19c0c:	cmp	r0, #0
   19c10:	bne	19f60 <main@@Base+0x3e84>
   19c14:	mov	r0, r4
   19c18:	mov	r1, #10
   19c1c:	mov	r2, #0
   19c20:	bl	25604 <flatcc_verify_string_vector_field@@Base>
   19c24:	cmp	r0, #0
   19c28:	bne	19f60 <main@@Base+0x3e84>
   19c2c:	mov	r0, r4
   19c30:	mov	r1, #28
   19c34:	mov	r2, #0
   19c38:	bl	25604 <flatcc_verify_string_vector_field@@Base>
   19c3c:	cmp	r0, #0
   19c40:	bne	19f60 <main@@Base+0x3e84>
   19c44:	mvn	r0, #0
   19c48:	mov	r1, #1
   19c4c:	str	r1, [sp]
   19c50:	str	r0, [sp, #4]
   19c54:	mov	r0, r4
   19c58:	mov	r1, #24
   19c5c:	mov	r2, #0
   19c60:	mov	r3, #1
   19c64:	bl	25518 <flatcc_verify_vector_field@@Base>
   19c68:	cmp	r0, #0
   19c6c:	bne	19f60 <main@@Base+0x3e84>
   19c70:	mvn	r0, #-536870912	; 0xe0000000
   19c74:	mov	r1, #4
   19c78:	str	r1, [sp]
   19c7c:	str	r0, [sp, #4]
   19c80:	mov	r0, r4
   19c84:	mov	r1, #29
   19c88:	mov	r2, #0
   19c8c:	mov	r3, #8
   19c90:	bl	25518 <flatcc_verify_vector_field@@Base>
   19c94:	cmp	r0, #0
   19c98:	bne	19f60 <main@@Base+0x3e84>
   19c9c:	movw	r5, #39732	; 0x9b34
   19ca0:	movt	r5, #1
   19ca4:	mov	r0, r4
   19ca8:	mov	r1, #12
   19cac:	mov	r2, #0
   19cb0:	mov	r3, r5
   19cb4:	bl	25714 <flatcc_verify_table_field@@Base>
   19cb8:	cmp	r0, #0
   19cbc:	bne	19f60 <main@@Base+0x3e84>
   19cc0:	movw	r3, #5124	; 0x1404
   19cc4:	movt	r3, #2
   19cc8:	mov	r0, r4
   19ccc:	mov	r1, #8
   19cd0:	mov	r2, #0
   19cd4:	bl	25f44 <flatcc_verify_union_field@@Base>
   19cd8:	cmp	r0, #0
   19cdc:	bne	19f60 <main@@Base+0x3e84>
   19ce0:	mvn	r6, #-1073741824	; 0xc0000000
   19ce4:	mov	r7, #2
   19ce8:	str	r7, [sp]
   19cec:	str	r6, [sp, #4]
   19cf0:	mov	r0, r4
   19cf4:	mov	r1, #9
   19cf8:	mov	r2, #0
   19cfc:	mov	r3, #4
   19d00:	bl	25518 <flatcc_verify_vector_field@@Base>
   19d04:	cmp	r0, #0
   19d08:	bne	19f60 <main@@Base+0x3e84>
   19d0c:	str	r7, [sp]
   19d10:	str	r6, [sp, #4]
   19d14:	mov	r0, r4
   19d18:	mov	r1, #31
   19d1c:	mov	r2, #0
   19d20:	mov	r3, #4
   19d24:	bl	25518 <flatcc_verify_vector_field@@Base>
   19d28:	cmp	r0, #0
   19d2c:	bne	19f60 <main@@Base+0x3e84>
   19d30:	mov	r0, #1
   19d34:	stm	sp, {r0, r5}
   19d38:	mov	r0, r4
   19d3c:	mov	r1, #13
   19d40:	mov	r2, #0
   19d44:	mov	r3, #0
   19d48:	bl	25e3c <flatcc_verify_table_as_nested_root@@Base>
   19d4c:	cmp	r0, #0
   19d50:	bne	19f60 <main@@Base+0x3e84>
   19d54:	movw	r3, #5168	; 0x1430
   19d58:	movt	r3, #2
   19d5c:	mov	r0, r4
   19d60:	mov	r1, #14
   19d64:	mov	r2, #0
   19d68:	bl	25714 <flatcc_verify_table_field@@Base>
   19d6c:	cmp	r0, #0
   19d70:	bne	19f60 <main@@Base+0x3e84>
   19d74:	mov	r0, r4
   19d78:	mov	r1, #15
   19d7c:	mov	r2, #1
   19d80:	mov	r3, #1
   19d84:	bl	25358 <flatcc_verify_field@@Base>
   19d88:	cmp	r0, #0
   19d8c:	bne	19f60 <main@@Base+0x3e84>
   19d90:	mov	r0, r4
   19d94:	mov	r1, #16
   19d98:	mov	r2, #4
   19d9c:	mov	r3, #4
   19da0:	bl	25358 <flatcc_verify_field@@Base>
   19da4:	cmp	r0, #0
   19da8:	bne	19f60 <main@@Base+0x3e84>
   19dac:	mov	r0, r4
   19db0:	mov	r1, #17
   19db4:	mov	r2, #4
   19db8:	mov	r3, #4
   19dbc:	bl	25358 <flatcc_verify_field@@Base>
   19dc0:	cmp	r0, #0
   19dc4:	bne	19f60 <main@@Base+0x3e84>
   19dc8:	mov	r0, r4
   19dcc:	mov	r1, #18
   19dd0:	mov	r2, #8
   19dd4:	mov	r3, #8
   19dd8:	bl	25358 <flatcc_verify_field@@Base>
   19ddc:	cmp	r0, #0
   19de0:	bne	19f60 <main@@Base+0x3e84>
   19de4:	mov	r0, r4
   19de8:	mov	r1, #19
   19dec:	mov	r2, #8
   19df0:	mov	r3, #8
   19df4:	bl	25358 <flatcc_verify_field@@Base>
   19df8:	cmp	r0, #0
   19dfc:	bne	19f60 <main@@Base+0x3e84>
   19e00:	mov	r0, r4
   19e04:	mov	r1, #20
   19e08:	mov	r2, #4
   19e0c:	mov	r3, #4
   19e10:	bl	25358 <flatcc_verify_field@@Base>
   19e14:	cmp	r0, #0
   19e18:	bne	19f60 <main@@Base+0x3e84>
   19e1c:	mov	r0, r4
   19e20:	mov	r1, #21
   19e24:	mov	r2, #4
   19e28:	mov	r3, #4
   19e2c:	bl	25358 <flatcc_verify_field@@Base>
   19e30:	cmp	r0, #0
   19e34:	bne	19f60 <main@@Base+0x3e84>
   19e38:	mov	r0, r4
   19e3c:	mov	r1, #22
   19e40:	mov	r2, #8
   19e44:	mov	r3, #8
   19e48:	bl	25358 <flatcc_verify_field@@Base>
   19e4c:	cmp	r0, #0
   19e50:	bne	19f60 <main@@Base+0x3e84>
   19e54:	mov	r0, r4
   19e58:	mov	r1, #23
   19e5c:	mov	r2, #8
   19e60:	mov	r3, #8
   19e64:	bl	25358 <flatcc_verify_field@@Base>
   19e68:	cmp	r0, #0
   19e6c:	bne	19f60 <main@@Base+0x3e84>
   19e70:	mov	r0, r4
   19e74:	mov	r1, #25
   19e78:	mov	r2, #4
   19e7c:	mov	r3, #4
   19e80:	bl	25358 <flatcc_verify_field@@Base>
   19e84:	cmp	r0, #0
   19e88:	bne	19f60 <main@@Base+0x3e84>
   19e8c:	mov	r0, r4
   19e90:	mov	r1, #26
   19e94:	mov	r2, #4
   19e98:	mov	r3, #4
   19e9c:	bl	25358 <flatcc_verify_field@@Base>
   19ea0:	cmp	r0, #0
   19ea4:	bne	19f60 <main@@Base+0x3e84>
   19ea8:	mov	r0, r4
   19eac:	mov	r1, #27
   19eb0:	mov	r2, #4
   19eb4:	mov	r3, #4
   19eb8:	bl	25358 <flatcc_verify_field@@Base>
   19ebc:	cmp	r0, #0
   19ec0:	bne	19f60 <main@@Base+0x3e84>
   19ec4:	mvn	r0, #0
   19ec8:	mov	r1, #1
   19ecc:	str	r1, [sp]
   19ed0:	str	r0, [sp, #4]
   19ed4:	mov	r0, r4
   19ed8:	mov	r1, #30
   19edc:	mov	r2, #0
   19ee0:	mov	r3, #1
   19ee4:	bl	25518 <flatcc_verify_vector_field@@Base>
   19ee8:	cmp	r0, #0
   19eec:	bne	19f60 <main@@Base+0x3e84>
   19ef0:	mvn	r5, #-536870912	; 0xe0000000
   19ef4:	mov	r6, #8
   19ef8:	str	r6, [sp]
   19efc:	str	r5, [sp, #4]
   19f00:	mov	r0, r4
   19f04:	mov	r1, #32
   19f08:	mov	r2, #0
   19f0c:	mov	r3, #8
   19f10:	bl	25518 <flatcc_verify_vector_field@@Base>
   19f14:	cmp	r0, #0
   19f18:	bne	19f60 <main@@Base+0x3e84>
   19f1c:	str	r6, [sp]
   19f20:	str	r5, [sp, #4]
   19f24:	mov	r0, r4
   19f28:	mov	r1, #33	; 0x21
   19f2c:	mov	r2, #0
   19f30:	mov	r3, #8
   19f34:	bl	25518 <flatcc_verify_vector_field@@Base>
   19f38:	cmp	r0, #0
   19f3c:	bne	19f60 <main@@Base+0x3e84>
   19f40:	movw	r3, #5256	; 0x1488
   19f44:	movt	r3, #2
   19f48:	mov	r0, r4
   19f4c:	mov	r1, #34	; 0x22
   19f50:	mov	r2, #0
   19f54:	bl	25714 <flatcc_verify_table_field@@Base>
   19f58:	cmp	r0, #0
   19f5c:	beq	19f68 <main@@Base+0x3e8c>
   19f60:	sub	sp, fp, #16
   19f64:	pop	{r4, r5, r6, r7, fp, pc}
   19f68:	movw	r3, #5264	; 0x1490
   19f6c:	movt	r3, #2
   19f70:	mov	r0, r4
   19f74:	mov	r1, #35	; 0x23
   19f78:	mov	r2, #0
   19f7c:	sub	sp, fp, #16
   19f80:	pop	{r4, r5, r6, r7, fp, lr}
   19f84:	b	25714 <flatcc_verify_table_field@@Base>
   19f88:	push	{r4, r5, r6, sl, fp, lr}
   19f8c:	add	fp, sp, #16
   19f90:	mov	r5, r3
   19f94:	mov	r4, r2
   19f98:	mov	r6, r0
   19f9c:	cmp	r1, r2
   19fa0:	beq	19ff0 <main@@Base+0x3f14>
   19fa4:	ldrb	r0, [r1]
   19fa8:	cmp	r0, #123	; 0x7b
   19fac:	bne	19ff0 <main@@Base+0x3f14>
   19fb0:	add	r1, r1, #1
   19fb4:	mov	r0, r6
   19fb8:	mov	r2, r4
   19fbc:	bl	1d024 <main@@Base+0x6f48>
   19fc0:	cmp	r0, r4
   19fc4:	beq	1a00c <main@@Base+0x3f30>
   19fc8:	ldrb	r1, [r0]
   19fcc:	cmp	r1, #125	; 0x7d
   19fd0:	bne	1a00c <main@@Base+0x3f30>
   19fd4:	mov	r1, #0
   19fd8:	str	r1, [r5]
   19fdc:	add	r1, r0, #1
   19fe0:	mov	r0, r6
   19fe4:	mov	r2, r4
   19fe8:	pop	{r4, r5, r6, sl, fp, lr}
   19fec:	b	1d024 <main@@Base+0x6f48>
   19ff0:	mov	r0, #0
   19ff4:	str	r0, [r5]
   19ff8:	mov	r0, r6
   19ffc:	mov	r2, r4
   1a000:	mov	r3, #21
   1a004:	pop	{r4, r5, r6, sl, fp, lr}
   1a008:	b	26958 <flatcc_json_parser_set_error@@Base>
   1a00c:	mov	r1, #1
   1a010:	str	r1, [r5]
   1a014:	pop	{r4, r5, r6, sl, fp, pc}
   1a018:	cmp	r1, r2
   1a01c:	beq	1a058 <main@@Base+0x3f7c>
   1a020:	ldrb	r3, [r1]
   1a024:	cmp	r3, #46	; 0x2e
   1a028:	beq	1a048 <main@@Base+0x3f6c>
   1a02c:	cmp	r3, #34	; 0x22
   1a030:	bne	1a050 <main@@Base+0x3f74>
   1a034:	mov	r2, #0
   1a038:	str	r2, [r0, #12]
   1a03c:	add	r1, r1, #1
   1a040:	mov	r0, r1
   1a044:	bx	lr
   1a048:	mov	r3, #5
   1a04c:	b	26958 <flatcc_json_parser_set_error@@Base>
   1a050:	mov	r2, #1
   1a054:	str	r2, [r0, #12]
   1a058:	mov	r0, r1
   1a05c:	bx	lr
   1a060:	b	1d05c <main@@Base+0x6f80>
   1a064:	push	{r4, r5, r6, sl, fp, lr}
   1a068:	add	fp, sp, #16
   1a06c:	mov	r6, r0
   1a070:	sub	r0, r2, r1
   1a074:	cmp	r0, r3
   1a078:	ble	1a0fc <main@@Base+0x4020>
   1a07c:	mov	r4, r2
   1a080:	mov	r2, r1
   1a084:	ldrb	r0, [r2, r3]!
   1a088:	ldr	r5, [r6, #12]
   1a08c:	cmp	r5, #0
   1a090:	beq	1a0b0 <main@@Base+0x3fd4>
   1a094:	cmp	r0, #33	; 0x21
   1a098:	bcc	1a0a4 <main@@Base+0x3fc8>
   1a09c:	cmp	r0, #58	; 0x3a
   1a0a0:	bne	1a0fc <main@@Base+0x4020>
   1a0a4:	mov	r0, #0
   1a0a8:	str	r0, [r6, #12]
   1a0ac:	b	1a0c0 <main@@Base+0x3fe4>
   1a0b0:	cmp	r0, #34	; 0x22
   1a0b4:	bne	1a0fc <main@@Base+0x4020>
   1a0b8:	add	r0, r1, r3
   1a0bc:	add	r2, r0, #1
   1a0c0:	mov	r0, r6
   1a0c4:	mov	r1, r2
   1a0c8:	mov	r2, r4
   1a0cc:	bl	1d024 <main@@Base+0x6f48>
   1a0d0:	mov	r1, r0
   1a0d4:	cmp	r0, r4
   1a0d8:	beq	1a104 <main@@Base+0x4028>
   1a0dc:	ldrb	r0, [r1]
   1a0e0:	cmp	r0, #58	; 0x3a
   1a0e4:	bne	1a104 <main@@Base+0x4028>
   1a0e8:	add	r1, r1, #1
   1a0ec:	mov	r0, r6
   1a0f0:	mov	r2, r4
   1a0f4:	pop	{r4, r5, r6, sl, fp, lr}
   1a0f8:	b	1d024 <main@@Base+0x6f48>
   1a0fc:	mov	r0, r1
   1a100:	pop	{r4, r5, r6, sl, fp, pc}
   1a104:	mov	r0, r6
   1a108:	mov	r2, r4
   1a10c:	mov	r3, #4
   1a110:	pop	{r4, r5, r6, sl, fp, lr}
   1a114:	b	26958 <flatcc_json_parser_set_error@@Base>
   1a118:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a11c:	add	fp, sp, #24
   1a120:	sub	sp, sp, #8
   1a124:	mov	r9, r3
   1a128:	mov	r6, r2
   1a12c:	mov	r5, r1
   1a130:	mov	r7, r0
   1a134:	mov	r0, r1
   1a138:	mov	r1, r2
   1a13c:	bl	1a060 <main@@Base+0x3f84>
   1a140:	ldr	ip, [fp, #12]
   1a144:	ldr	r8, [fp, #8]
   1a148:	movw	r3, #25957	; 0x6565
   1a14c:	movt	r3, #18290	; 0x4772
   1a150:	mvn	r4, #-1845493760	; 0x92000000
   1a154:	subs	r4, r4, r0
   1a158:	sbcs	r4, r3, r1
   1a15c:	bcc	1a19c <main@@Base+0x40c0>
   1a160:	movw	r0, #30053	; 0x7565
   1a164:	movt	r0, #17004	; 0x426c
   1a168:	teq	r1, r0
   1a16c:	bne	1a228 <main@@Base+0x414c>
   1a170:	str	ip, [sp]
   1a174:	mov	r0, r7
   1a178:	mov	r1, r5
   1a17c:	mov	r2, r6
   1a180:	mov	r3, #4
   1a184:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1a188:	cmp	r0, r5
   1a18c:	beq	1a228 <main@@Base+0x414c>
   1a190:	mov	r1, #0
   1a194:	mov	r2, #8
   1a198:	b	1a218 <main@@Base+0x413c>
   1a19c:	bic	r4, r1, #255	; 0xff
   1a1a0:	movw	r2, #25600	; 0x6400
   1a1a4:	movt	r2, #21093	; 0x5265
   1a1a8:	teq	r4, r2
   1a1ac:	bne	1a1dc <main@@Base+0x4100>
   1a1b0:	str	ip, [sp]
   1a1b4:	mov	r0, r7
   1a1b8:	mov	r1, r5
   1a1bc:	mov	r2, r6
   1a1c0:	mov	r3, #3
   1a1c4:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1a1c8:	cmp	r0, r5
   1a1cc:	beq	1a228 <main@@Base+0x414c>
   1a1d0:	mov	r1, #0
   1a1d4:	mov	r2, #1
   1a1d8:	b	1a218 <main@@Base+0x413c>
   1a1dc:	eor	r1, r1, r3
   1a1e0:	and	r0, r0, #-16777216	; 0xff000000
   1a1e4:	eor	r0, r0, #1845493760	; 0x6e000000
   1a1e8:	orrs	r0, r0, r1
   1a1ec:	bne	1a228 <main@@Base+0x414c>
   1a1f0:	str	ip, [sp]
   1a1f4:	mov	r0, r7
   1a1f8:	mov	r1, r5
   1a1fc:	mov	r2, r6
   1a200:	mov	r3, #5
   1a204:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1a208:	cmp	r0, r5
   1a20c:	beq	1a228 <main@@Base+0x414c>
   1a210:	mov	r1, #0
   1a214:	mov	r2, #2
   1a218:	str	r2, [r8]
   1a21c:	str	r1, [r8, #4]
   1a220:	str	r1, [r9]
   1a224:	mov	r5, r0
   1a228:	mov	r0, r5
   1a22c:	sub	sp, fp, #24
   1a230:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a238:	add	fp, sp, #28
   1a23c:	sub	sp, sp, #4
   1a240:	mov	r9, r3
   1a244:	mov	r5, r2
   1a248:	mov	r7, r1
   1a24c:	mov	sl, r0
   1a250:	mov	r0, r1
   1a254:	mov	r1, r2
   1a258:	bl	1a060 <main@@Base+0x3f84>
   1a25c:	movw	r2, #30815	; 0x785f
   1a260:	movt	r2, #26725	; 0x6865
   1a264:	movw	r4, #30061	; 0x756d
   1a268:	movt	r4, #25966	; 0x656e
   1a26c:	subs	r3, r0, r4
   1a270:	sbcs	r3, r1, r2
   1a274:	bcs	1a2d8 <main@@Base+0x41fc>
   1a278:	bic	r3, r1, #255	; 0xff
   1a27c:	movw	r2, #27759	; 0x6c6f
   1a280:	movt	r2, #17263	; 0x436f
   1a284:	mvn	r4, #-1912602624	; 0x8e000000
   1a288:	subs	r4, r4, r0
   1a28c:	sbcs	r4, r2, r1
   1a290:	bcc	1a330 <main@@Base+0x4254>
   1a294:	movw	r0, #30976	; 0x7900
   1a298:	movt	r0, #16750	; 0x416e
   1a29c:	teq	r3, r0
   1a2a0:	bne	1a4cc <main@@Base+0x43f0>
   1a2a4:	mov	r0, r7
   1a2a8:	mov	r1, r5
   1a2ac:	mov	r2, #3
   1a2b0:	bl	1d0ec <main@@Base+0x7010>
   1a2b4:	cmp	r0, r7
   1a2b8:	beq	1a4cc <main@@Base+0x43f0>
   1a2bc:	mov	r1, r0
   1a2c0:	mov	r0, sl
   1a2c4:	mov	r2, r5
   1a2c8:	mov	r3, r9
   1a2cc:	sub	sp, fp, #28
   1a2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2d4:	b	1b980 <main@@Base+0x58a4>
   1a2d8:	add	r3, r2, #64512	; 0xfc00
   1a2dc:	add	r3, r3, #17301504	; 0x1080000
   1a2e0:	subs	r6, r0, r4
   1a2e4:	sbcs	r6, r1, r3
   1a2e8:	bcs	1a374 <main@@Base+0x4298>
   1a2ec:	eor	r0, r0, r4
   1a2f0:	eor	r1, r1, r2
   1a2f4:	orrs	r0, r0, r1
   1a2f8:	bne	1a4cc <main@@Base+0x43f0>
   1a2fc:	mov	r0, r7
   1a300:	mov	r1, r5
   1a304:	mov	r2, #8
   1a308:	bl	1d0ec <main@@Base+0x7010>
   1a30c:	cmp	r0, r7
   1a310:	beq	1a4cc <main@@Base+0x43f0>
   1a314:	mov	r1, r0
   1a318:	mov	r0, sl
   1a31c:	mov	r2, r5
   1a320:	mov	r3, r9
   1a324:	sub	sp, fp, #28
   1a328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a32c:	b	1d224 <main@@Base+0x7148>
   1a330:	movw	r4, #28416	; 0x6f00
   1a334:	movt	r4, #18031	; 0x466f
   1a338:	teq	r3, r4
   1a33c:	bne	1a3cc <main@@Base+0x42f0>
   1a340:	mov	r0, r7
   1a344:	mov	r1, r5
   1a348:	mov	r2, #3
   1a34c:	bl	1d0ec <main@@Base+0x7010>
   1a350:	cmp	r0, r7
   1a354:	beq	1a4cc <main@@Base+0x43f0>
   1a358:	mov	r1, r0
   1a35c:	mov	r0, sl
   1a360:	mov	r2, r5
   1a364:	mov	r3, r9
   1a368:	sub	sp, fp, #28
   1a36c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a370:	b	1d10c <main@@Base+0x7030>
   1a374:	sub	r2, r2, #4352	; 0x1100
   1a378:	sub	r2, r2, #-100663296	; 0xfa000000
   1a37c:	subs	r6, r0, r4
   1a380:	sbcs	r2, r1, r2
   1a384:	bcs	1a414 <main@@Base+0x4338>
   1a388:	eor	r0, r0, r4
   1a38c:	eor	r1, r1, r3
   1a390:	orrs	r0, r0, r1
   1a394:	bne	1a4cc <main@@Base+0x43f0>
   1a398:	mov	r0, r7
   1a39c:	mov	r1, r5
   1a3a0:	mov	r2, #8
   1a3a4:	bl	1d0ec <main@@Base+0x7010>
   1a3a8:	cmp	r0, r7
   1a3ac:	beq	1a4cc <main@@Base+0x43f0>
   1a3b0:	mov	r1, r0
   1a3b4:	mov	r0, sl
   1a3b8:	mov	r2, r5
   1a3bc:	mov	r3, r9
   1a3c0:	sub	sp, fp, #28
   1a3c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3c8:	b	1d34c <main@@Base+0x7270>
   1a3cc:	eor	r1, r1, r2
   1a3d0:	and	r0, r0, #-16777216	; 0xff000000
   1a3d4:	eor	r0, r0, #1912602624	; 0x72000000
   1a3d8:	orrs	r0, r0, r1
   1a3dc:	bne	1a4cc <main@@Base+0x43f0>
   1a3e0:	mov	r0, r7
   1a3e4:	mov	r1, r5
   1a3e8:	mov	r2, #5
   1a3ec:	bl	1d0ec <main@@Base+0x7010>
   1a3f0:	cmp	r0, r7
   1a3f4:	beq	1a4cc <main@@Base+0x43f0>
   1a3f8:	mov	r1, r0
   1a3fc:	mov	r0, sl
   1a400:	mov	r2, r5
   1a404:	mov	r3, r9
   1a408:	sub	sp, fp, #28
   1a40c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a410:	b	1a118 <main@@Base+0x403c>
   1a414:	movw	r2, #29817	; 0x7479
   1a418:	movt	r2, #28016	; 0x6d70
   1a41c:	eor	r2, r0, r2
   1a420:	movw	r3, #29797	; 0x7465
   1a424:	movt	r3, #28271	; 0x6e6f
   1a428:	eor	r3, r1, r3
   1a42c:	orrs	r2, r2, r3
   1a430:	beq	1a480 <main@@Base+0x43a4>
   1a434:	eor	r0, r0, r4
   1a438:	movw	r2, #26463	; 0x675f
   1a43c:	movt	r2, #28261	; 0x6e65
   1a440:	eor	r1, r1, r2
   1a444:	orrs	r0, r0, r1
   1a448:	bne	1a4cc <main@@Base+0x43f0>
   1a44c:	mov	r0, r7
   1a450:	mov	r1, r5
   1a454:	mov	r2, #8
   1a458:	bl	1d0ec <main@@Base+0x7010>
   1a45c:	cmp	r0, r7
   1a460:	beq	1a4cc <main@@Base+0x43f0>
   1a464:	mov	r1, r0
   1a468:	mov	r0, sl
   1a46c:	mov	r2, r5
   1a470:	mov	r3, r9
   1a474:	sub	sp, fp, #28
   1a478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a47c:	b	1d4c0 <main@@Base+0x73e4>
   1a480:	add	r8, r7, #8
   1a484:	mov	r0, r8
   1a488:	mov	r1, r5
   1a48c:	bl	1a060 <main@@Base+0x3f84>
   1a490:	teq	r1, r4
   1a494:	bne	1a4cc <main@@Base+0x43f0>
   1a498:	mov	r0, r8
   1a49c:	mov	r1, r5
   1a4a0:	mov	r2, #4
   1a4a4:	bl	1d0ec <main@@Base+0x7010>
   1a4a8:	cmp	r0, r8
   1a4ac:	beq	1a4cc <main@@Base+0x43f0>
   1a4b0:	mov	r1, r0
   1a4b4:	mov	r0, sl
   1a4b8:	mov	r2, r5
   1a4bc:	mov	r3, r9
   1a4c0:	sub	sp, fp, #28
   1a4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4c8:	b	1d5d0 <main@@Base+0x74f4>
   1a4cc:	mov	r0, r7
   1a4d0:	sub	sp, fp, #28
   1a4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4dc:	add	fp, sp, #28
   1a4e0:	sub	sp, sp, #4
   1a4e4:	mov	sl, r3
   1a4e8:	mov	r5, r2
   1a4ec:	mov	r7, r1
   1a4f0:	mov	r8, r0
   1a4f4:	mov	r0, r1
   1a4f8:	mov	r1, r2
   1a4fc:	bl	1a060 <main@@Base+0x3f84>
   1a500:	movw	r2, #18273	; 0x4761
   1a504:	movt	r2, #19833	; 0x4d79
   1a508:	movw	r3, #11844	; 0x2e44
   1a50c:	movt	r3, #28005	; 0x6d65
   1a510:	subs	r3, r3, r0
   1a514:	sbcs	r3, r2, r1
   1a518:	bcc	1a5b8 <main@@Base+0x44dc>
   1a51c:	movw	r2, #31022	; 0x792e
   1a520:	movt	r2, #24947	; 0x6173
   1a524:	eor	r0, r0, r2
   1a528:	movw	r2, #28276	; 0x6e74
   1a52c:	movt	r2, #18017	; 0x4661
   1a530:	eor	r1, r1, r2
   1a534:	orrs	r0, r0, r1
   1a538:	bne	1aa44 <main@@Base+0x4968>
   1a53c:	add	r0, r7, #8
   1a540:	mov	r1, r5
   1a544:	bl	1a060 <main@@Base+0x3f84>
   1a548:	movw	r2, #24946	; 0x6172
   1a54c:	movt	r2, #17256	; 0x4368
   1a550:	eor	r1, r1, r2
   1a554:	movw	r2, #29797	; 0x7465
   1a558:	movt	r2, #24931	; 0x6163
   1a55c:	eor	r0, r0, r2
   1a560:	orrs	r0, r0, r1
   1a564:	bne	1aa44 <main@@Base+0x4968>
   1a568:	add	r4, r7, #16
   1a56c:	mov	r0, r4
   1a570:	mov	r1, r5
   1a574:	bl	1a060 <main@@Base+0x3f84>
   1a578:	and	r0, r1, #-16777216	; 0xff000000
   1a57c:	teq	r0, #1912602624	; 0x72000000
   1a580:	bne	1aa44 <main@@Base+0x4968>
   1a584:	mov	r0, r4
   1a588:	mov	r1, r5
   1a58c:	mov	r2, #1
   1a590:	bl	1d0ec <main@@Base+0x7010>
   1a594:	cmp	r0, r4
   1a598:	beq	1aa44 <main@@Base+0x4968>
   1a59c:	mov	r1, r0
   1a5a0:	mov	r0, r8
   1a5a4:	mov	r2, r5
   1a5a8:	mov	r3, sl
   1a5ac:	sub	sp, fp, #28
   1a5b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5b4:	b	1d64c <main@@Base+0x7570>
   1a5b8:	movw	r3, #11855	; 0x2e4f
   1a5bc:	movt	r3, #28005	; 0x6d65
   1a5c0:	eor	r3, r0, r3
   1a5c4:	eor	r1, r1, r2
   1a5c8:	orrs	r2, r3, r1
   1a5cc:	beq	1a690 <main@@Base+0x45b4>
   1a5d0:	movw	r2, #11845	; 0x2e45
   1a5d4:	movt	r2, #28005	; 0x6d65
   1a5d8:	eor	r0, r0, r2
   1a5dc:	orrs	r0, r0, r1
   1a5e0:	bne	1aa44 <main@@Base+0x4968>
   1a5e4:	add	r0, r7, #8
   1a5e8:	mov	r1, r5
   1a5ec:	bl	1a060 <main@@Base+0x3f84>
   1a5f0:	movw	r2, #28016	; 0x6d70
   1a5f4:	movt	r2, #30817	; 0x7861
   1a5f8:	movw	r3, #11880	; 0x2e68
   1a5fc:	movt	r3, #27749	; 0x6c65
   1a600:	subs	r6, r0, r3
   1a604:	sbcs	r6, r1, r2
   1a608:	bcs	1a764 <main@@Base+0x4688>
   1a60c:	subs	r6, r3, #37	; 0x25
   1a610:	sbc	r4, r2, #0
   1a614:	subs	r6, r0, r6
   1a618:	sbcs	r6, r1, r4
   1a61c:	bcs	1a7e0 <main@@Base+0x4704>
   1a620:	subs	r3, r3, #39	; 0x27
   1a624:	eor	r0, r0, r3
   1a628:	sbc	r2, r2, #0
   1a62c:	eor	r1, r1, r2
   1a630:	orrs	r0, r0, r1
   1a634:	bne	1aa44 <main@@Base+0x4968>
   1a638:	add	r4, r7, #16
   1a63c:	mov	r0, r4
   1a640:	mov	r1, r5
   1a644:	bl	1a060 <main@@Base+0x3f84>
   1a648:	bfc	r1, #0, #16
   1a64c:	movw	r0, #0
   1a650:	movt	r0, #28281	; 0x6e79
   1a654:	teq	r1, r0
   1a658:	bne	1aa44 <main@@Base+0x4968>
   1a65c:	mov	r0, r4
   1a660:	mov	r1, r5
   1a664:	mov	r2, #2
   1a668:	bl	1d0ec <main@@Base+0x7010>
   1a66c:	cmp	r0, r4
   1a670:	beq	1aa44 <main@@Base+0x4968>
   1a674:	mov	r1, r0
   1a678:	mov	r0, r8
   1a67c:	mov	r2, r5
   1a680:	mov	r3, sl
   1a684:	sub	sp, fp, #28
   1a688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a68c:	b	1b980 <main@@Base+0x58a4>
   1a690:	add	r0, r7, #8
   1a694:	mov	r1, r5
   1a698:	bl	1a060 <main@@Base+0x3f84>
   1a69c:	movw	r2, #25970	; 0x6572
   1a6a0:	movt	r2, #29800	; 0x7468
   1a6a4:	eor	r1, r1, r2
   1a6a8:	movw	r2, #28005	; 0x6d65
   1a6ac:	movt	r2, #20065	; 0x4e61
   1a6b0:	eor	r0, r0, r2
   1a6b4:	orrs	r0, r0, r1
   1a6b8:	bne	1aa44 <main@@Base+0x4968>
   1a6bc:	add	r0, r7, #16
   1a6c0:	mov	r1, r5
   1a6c4:	bl	1a060 <main@@Base+0x3f84>
   1a6c8:	movw	r2, #24931	; 0x6163
   1a6cc:	movt	r2, #21360	; 0x5370
   1a6d0:	eor	r1, r1, r2
   1a6d4:	movw	r2, #18034	; 0x4672
   1a6d8:	movt	r2, #25902	; 0x652e
   1a6dc:	eor	r0, r0, r2
   1a6e0:	orrs	r0, r0, r1
   1a6e4:	bne	1aa44 <main@@Base+0x4968>
   1a6e8:	add	r0, r7, #24
   1a6ec:	mov	r1, r5
   1a6f0:	bl	1a060 <main@@Base+0x3f84>
   1a6f4:	movw	r2, #18798	; 0x496e
   1a6f8:	movt	r2, #28525	; 0x6f6d
   1a6fc:	eor	r1, r1, r2
   1a700:	movw	r2, #30052	; 0x7564
   1a704:	movt	r2, #25452	; 0x636c
   1a708:	eor	r0, r0, r2
   1a70c:	orrs	r0, r0, r1
   1a710:	bne	1aa44 <main@@Base+0x4968>
   1a714:	add	r4, r7, #32
   1a718:	mov	r0, r4
   1a71c:	mov	r1, r5
   1a720:	bl	1a060 <main@@Base+0x3f84>
   1a724:	and	r0, r1, #-16777216	; 0xff000000
   1a728:	teq	r0, #1694498816	; 0x65000000
   1a72c:	bne	1aa44 <main@@Base+0x4968>
   1a730:	mov	r0, r4
   1a734:	mov	r1, r5
   1a738:	mov	r2, #1
   1a73c:	bl	1d0ec <main@@Base+0x7010>
   1a740:	cmp	r0, r4
   1a744:	beq	1aa44 <main@@Base+0x4968>
   1a748:	mov	r1, r0
   1a74c:	mov	r0, r8
   1a750:	mov	r2, r5
   1a754:	mov	r3, sl
   1a758:	sub	sp, fp, #28
   1a75c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a760:	b	1d8d0 <main@@Base+0x77f4>
   1a764:	eor	r6, r0, r3
   1a768:	eor	r4, r1, r2
   1a76c:	orrs	r6, r6, r4
   1a770:	bne	1a860 <main@@Base+0x4784>
   1a774:	add	r4, r7, #16
   1a778:	mov	r0, r4
   1a77c:	mov	r1, r5
   1a780:	bl	1a060 <main@@Base+0x3f84>
   1a784:	movw	r2, #24421	; 0x5f65
   1a788:	movt	r2, #25959	; 0x6567
   1a78c:	add	r2, r2, #1114112	; 0x110000
   1a790:	eor	r1, r1, r2
   1a794:	bic	r0, r0, #255	; 0xff
   1a798:	movw	r2, #27904	; 0x6d00
   1a79c:	movt	r2, #28277	; 0x6e75
   1a7a0:	eor	r0, r0, r2
   1a7a4:	orrs	r0, r0, r1
   1a7a8:	bne	1aa44 <main@@Base+0x4968>
   1a7ac:	mov	r0, r4
   1a7b0:	mov	r1, r5
   1a7b4:	mov	r2, #7
   1a7b8:	bl	1d0ec <main@@Base+0x7010>
   1a7bc:	cmp	r0, r4
   1a7c0:	beq	1aa44 <main@@Base+0x4968>
   1a7c4:	mov	r1, r0
   1a7c8:	mov	r0, r8
   1a7cc:	mov	r2, r5
   1a7d0:	mov	r3, sl
   1a7d4:	sub	sp, fp, #28
   1a7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7dc:	b	1d224 <main@@Base+0x7148>
   1a7e0:	movw	r3, #11846	; 0x2e46
   1a7e4:	movt	r3, #27749	; 0x6c65
   1a7e8:	eor	r3, r0, r3
   1a7ec:	eor	r1, r1, r2
   1a7f0:	orrs	r2, r3, r1
   1a7f4:	beq	1a970 <main@@Base+0x4894>
   1a7f8:	movw	r2, #11843	; 0x2e43
   1a7fc:	movt	r2, #27749	; 0x6c65
   1a800:	eor	r0, r0, r2
   1a804:	orrs	r0, r0, r1
   1a808:	bne	1aa44 <main@@Base+0x4968>
   1a80c:	add	r4, r7, #16
   1a810:	mov	r0, r4
   1a814:	mov	r1, r5
   1a818:	bl	1a060 <main@@Base+0x3f84>
   1a81c:	movw	r0, #28530	; 0x6f72
   1a820:	movt	r0, #28524	; 0x6f6c
   1a824:	teq	r1, r0
   1a828:	bne	1aa44 <main@@Base+0x4968>
   1a82c:	mov	r0, r4
   1a830:	mov	r1, r5
   1a834:	mov	r2, #4
   1a838:	bl	1d0ec <main@@Base+0x7010>
   1a83c:	cmp	r0, r4
   1a840:	beq	1aa44 <main@@Base+0x4968>
   1a844:	mov	r1, r0
   1a848:	mov	r0, r8
   1a84c:	mov	r2, r5
   1a850:	mov	r3, sl
   1a854:	sub	sp, fp, #28
   1a858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a85c:	b	1a118 <main@@Base+0x403c>
   1a860:	add	ip, r3, #6
   1a864:	subs	r6, r0, ip
   1a868:	sbcs	r1, r1, r2
   1a86c:	bcs	1a8f0 <main@@Base+0x4814>
   1a870:	add	r1, r3, #1
   1a874:	eor	r0, r0, r1
   1a878:	orrs	r0, r0, r4
   1a87c:	bne	1aa44 <main@@Base+0x4968>
   1a880:	add	r4, r7, #16
   1a884:	mov	r0, r4
   1a888:	mov	r1, r5
   1a88c:	bl	1a060 <main@@Base+0x3f84>
   1a890:	movw	r2, #24421	; 0x5f65
   1a894:	movt	r2, #25959	; 0x6567
   1a898:	add	r2, r2, #851968	; 0xd0000
   1a89c:	add	r2, r2, #150994944	; 0x9000000
   1a8a0:	eor	r1, r1, r2
   1a8a4:	bic	r0, r0, #255	; 0xff
   1a8a8:	movw	r2, #27904	; 0x6d00
   1a8ac:	movt	r2, #28277	; 0x6e75
   1a8b0:	eor	r0, r0, r2
   1a8b4:	orrs	r0, r0, r1
   1a8b8:	bne	1aa44 <main@@Base+0x4968>
   1a8bc:	mov	r0, r4
   1a8c0:	mov	r1, r5
   1a8c4:	mov	r2, #7
   1a8c8:	bl	1d0ec <main@@Base+0x7010>
   1a8cc:	cmp	r0, r4
   1a8d0:	beq	1aa44 <main@@Base+0x4968>
   1a8d4:	mov	r1, r0
   1a8d8:	mov	r0, r8
   1a8dc:	mov	r2, r5
   1a8e0:	mov	r3, sl
   1a8e4:	sub	sp, fp, #28
   1a8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8ec:	b	1d34c <main@@Base+0x7270>
   1a8f0:	eor	r0, r0, ip
   1a8f4:	orrs	r0, r0, r4
   1a8f8:	bne	1aa44 <main@@Base+0x4968>
   1a8fc:	add	r6, r7, #16
   1a900:	mov	r0, r6
   1a904:	mov	r1, r5
   1a908:	bl	1a060 <main@@Base+0x3f84>
   1a90c:	mov	r4, r0
   1a910:	mov	r9, r1
   1a914:	lsr	r0, r0, #8
   1a918:	orr	r0, r0, r1, lsl #24
   1a91c:	movw	r1, #30061	; 0x756d
   1a920:	movt	r1, #25966	; 0x656e
   1a924:	eor	r0, r0, r1
   1a928:	movw	r1, #26463	; 0x675f
   1a92c:	movt	r1, #101	; 0x65
   1a930:	eor	r1, r1, r9, lsr #8
   1a934:	orrs	r0, r0, r1
   1a938:	bne	1a9cc <main@@Base+0x48f0>
   1a93c:	mov	r0, r6
   1a940:	mov	r1, r5
   1a944:	mov	r2, #7
   1a948:	bl	1d0ec <main@@Base+0x7010>
   1a94c:	mov	r1, r0
   1a950:	cmp	r0, r6
   1a954:	beq	1a9c8 <main@@Base+0x48ec>
   1a958:	mov	r0, r8
   1a95c:	mov	r2, r5
   1a960:	mov	r3, sl
   1a964:	sub	sp, fp, #28
   1a968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a96c:	b	1d4c0 <main@@Base+0x73e4>
   1a970:	add	r4, r7, #16
   1a974:	mov	r0, r4
   1a978:	mov	r1, r5
   1a97c:	bl	1a060 <main@@Base+0x3f84>
   1a980:	bfc	r1, #0, #16
   1a984:	movw	r0, #0
   1a988:	movt	r0, #28527	; 0x6f6f
   1a98c:	teq	r1, r0
   1a990:	bne	1aa44 <main@@Base+0x4968>
   1a994:	mov	r0, r4
   1a998:	mov	r1, r5
   1a99c:	mov	r2, #2
   1a9a0:	bl	1d0ec <main@@Base+0x7010>
   1a9a4:	cmp	r0, r4
   1a9a8:	beq	1aa44 <main@@Base+0x4968>
   1a9ac:	mov	r1, r0
   1a9b0:	mov	r0, r8
   1a9b4:	mov	r2, r5
   1a9b8:	mov	r3, sl
   1a9bc:	sub	sp, fp, #28
   1a9c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9c4:	b	1d10c <main@@Base+0x7030>
   1a9c8:	mov	r6, r1
   1a9cc:	movw	r0, #31077	; 0x7965
   1a9d0:	movt	r0, #28788	; 0x7074
   1a9d4:	eor	r0, r4, r0
   1a9d8:	movw	r1, #25965	; 0x656d
   1a9dc:	movt	r1, #28532	; 0x6f74
   1a9e0:	eor	r1, r9, r1
   1a9e4:	orrs	r0, r0, r1
   1a9e8:	bne	1aa44 <main@@Base+0x4968>
   1a9ec:	add	r4, r6, #8
   1a9f0:	mov	r0, r4
   1a9f4:	mov	r1, r5
   1a9f8:	bl	1a060 <main@@Base+0x3f84>
   1a9fc:	bic	r0, r1, #255	; 0xff
   1aa00:	movw	r1, #27904	; 0x6d00
   1aa04:	movt	r1, #28277	; 0x6e75
   1aa08:	teq	r0, r1
   1aa0c:	bne	1aa44 <main@@Base+0x4968>
   1aa10:	mov	r0, r4
   1aa14:	mov	r1, r5
   1aa18:	mov	r2, #3
   1aa1c:	bl	1d0ec <main@@Base+0x7010>
   1aa20:	cmp	r0, r4
   1aa24:	beq	1aa44 <main@@Base+0x4968>
   1aa28:	mov	r1, r0
   1aa2c:	mov	r0, r8
   1aa30:	mov	r2, r5
   1aa34:	mov	r3, sl
   1aa38:	sub	sp, fp, #28
   1aa3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa40:	b	1d5d0 <main@@Base+0x74f4>
   1aa44:	mov	r0, r7
   1aa48:	sub	sp, fp, #28
   1aa4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa50:	push	{r4, r5, r6, r7, fp, lr}
   1aa54:	add	fp, sp, #16
   1aa58:	sub	sp, sp, #24
   1aa5c:	mov	r7, r1
   1aa60:	mov	r6, r0
   1aa64:	mov	r0, #0
   1aa68:	str	r0, [sp, #20]
   1aa6c:	str	r0, [sp, #16]
   1aa70:	str	r0, [sp, #12]
   1aa74:	strb	r0, [r3]
   1aa78:	cmp	r1, r2
   1aa7c:	beq	1aad4 <main@@Base+0x49f8>
   1aa80:	mov	r5, r3
   1aa84:	mov	r4, r2
   1aa88:	add	r0, sp, #16
   1aa8c:	str	r0, [sp]
   1aa90:	add	r3, sp, #12
   1aa94:	mov	r0, r6
   1aa98:	mov	r1, r7
   1aa9c:	bl	27c14 <flatcc_json_parser_integer@@Base>
   1aaa0:	mov	r1, r0
   1aaa4:	cmp	r0, r7
   1aaa8:	beq	1aad0 <main@@Base+0x49f4>
   1aaac:	ldr	r3, [sp, #12]
   1aab0:	ldr	r0, [sp, #16]
   1aab4:	ldr	r2, [sp, #20]
   1aab8:	stm	sp, {r0, r2, r5}
   1aabc:	mov	r0, r6
   1aac0:	mov	r2, r4
   1aac4:	bl	1d9d4 <main@@Base+0x78f8>
   1aac8:	mov	r7, r0
   1aacc:	b	1aad4 <main@@Base+0x49f8>
   1aad0:	mov	r7, r1
   1aad4:	mov	r0, r7
   1aad8:	sub	sp, fp, #16
   1aadc:	pop	{r4, r5, r6, r7, fp, pc}
   1aae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aae4:	add	fp, sp, #28
   1aae8:	sub	sp, sp, #36	; 0x24
   1aaec:	mov	r8, r3
   1aaf0:	mov	r6, r2
   1aaf4:	mov	r5, r0
   1aaf8:	mov	r0, #0
   1aafc:	strb	r0, [fp, #-29]	; 0xffffffe3
   1ab00:	ldr	sl, [fp, #8]
   1ab04:	strb	r0, [sl]
   1ab08:	mov	r0, r5
   1ab0c:	bl	1da30 <main@@Base+0x7954>
   1ab10:	mov	r4, r0
   1ab14:	cmp	r0, r6
   1ab18:	beq	1abe0 <main@@Base+0x4b04>
   1ab1c:	mov	r9, r8
   1ab20:	ldr	r7, [r9]
   1ab24:	add	r0, sp, #24
   1ab28:	str	r0, [sp]
   1ab2c:	add	r0, sp, #16
   1ab30:	str	r0, [sp, #4]
   1ab34:	mov	r0, r5
   1ab38:	mov	r1, r4
   1ab3c:	mov	r2, r6
   1ab40:	add	r3, sp, #20
   1ab44:	blx	r7
   1ab48:	mov	r7, r0
   1ab4c:	cmp	r0, r6
   1ab50:	beq	1abec <main@@Base+0x4b10>
   1ab54:	cmp	r7, r4
   1ab58:	beq	1abb4 <main@@Base+0x4ad8>
   1ab5c:	ldr	r3, [sp, #20]
   1ab60:	ldr	r0, [sp, #24]
   1ab64:	ldr	r1, [sp, #28]
   1ab68:	stm	sp, {r0, r1}
   1ab6c:	sub	r0, fp, #29
   1ab70:	str	r0, [sp, #8]
   1ab74:	mov	r0, r5
   1ab78:	mov	r1, r7
   1ab7c:	mov	r2, r6
   1ab80:	bl	1d9d4 <main@@Base+0x78f8>
   1ab84:	cmp	r0, r6
   1ab88:	beq	1abe8 <main@@Base+0x4b0c>
   1ab8c:	ldrb	r0, [sl]
   1ab90:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1ab94:	add	r0, r0, r1
   1ab98:	strb	r0, [sl]
   1ab9c:	ldr	r0, [sp, #16]
   1aba0:	cmp	r0, #0
   1aba4:	mov	r4, r7
   1aba8:	mov	r9, r8
   1abac:	bne	1ab20 <main@@Base+0x4a44>
   1abb0:	b	1abec <main@@Base+0x4b10>
   1abb4:	ldr	r0, [r9, #4]!
   1abb8:	cmp	r0, #0
   1abbc:	mov	r4, r7
   1abc0:	bne	1ab20 <main@@Base+0x4a44>
   1abc4:	mov	r0, r5
   1abc8:	mov	r1, r7
   1abcc:	mov	r2, r6
   1abd0:	mov	r3, #23
   1abd4:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1abd8:	mov	r7, r0
   1abdc:	b	1abec <main@@Base+0x4b10>
   1abe0:	mov	r7, r4
   1abe4:	b	1abec <main@@Base+0x4b10>
   1abe8:	mov	r7, r6
   1abec:	mov	r0, r7
   1abf0:	sub	sp, fp, #28
   1abf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abf8:	push	{r4, r5, fp, lr}
   1abfc:	add	fp, sp, #8
   1ac00:	mov	r4, r1
   1ac04:	mov	r5, r0
   1ac08:	mov	r0, r1
   1ac0c:	bl	1da68 <main@@Base+0x798c>
   1ac10:	strb	r4, [r5]
   1ac14:	pop	{r4, r5, fp, pc}
   1ac18:	push	{r4, r5, r6, sl, fp, lr}
   1ac1c:	add	fp, sp, #16
   1ac20:	mov	r5, r3
   1ac24:	mov	r4, r2
   1ac28:	mov	r6, r0
   1ac2c:	cmp	r1, r2
   1ac30:	beq	1ac80 <main@@Base+0x4ba4>
   1ac34:	ldrb	r0, [r1]
   1ac38:	cmp	r0, #91	; 0x5b
   1ac3c:	bne	1ac80 <main@@Base+0x4ba4>
   1ac40:	add	r1, r1, #1
   1ac44:	mov	r0, r6
   1ac48:	mov	r2, r4
   1ac4c:	bl	1d024 <main@@Base+0x6f48>
   1ac50:	cmp	r0, r4
   1ac54:	beq	1ac9c <main@@Base+0x4bc0>
   1ac58:	ldrb	r1, [r0]
   1ac5c:	cmp	r1, #93	; 0x5d
   1ac60:	bne	1ac9c <main@@Base+0x4bc0>
   1ac64:	mov	r1, #0
   1ac68:	str	r1, [r5]
   1ac6c:	add	r1, r0, #1
   1ac70:	mov	r0, r6
   1ac74:	mov	r2, r4
   1ac78:	pop	{r4, r5, r6, sl, fp, lr}
   1ac7c:	b	1d024 <main@@Base+0x6f48>
   1ac80:	mov	r0, #0
   1ac84:	str	r0, [r5]
   1ac88:	mov	r0, r6
   1ac8c:	mov	r2, r4
   1ac90:	mov	r3, #22
   1ac94:	pop	{r4, r5, r6, sl, fp, lr}
   1ac98:	b	26958 <flatcc_json_parser_set_error@@Base>
   1ac9c:	mov	r1, #1
   1aca0:	str	r1, [r5]
   1aca4:	pop	{r4, r5, r6, sl, fp, pc}
   1aca8:	push	{r4, r5, r6, r7, fp, lr}
   1acac:	add	fp, sp, #16
   1acb0:	sub	sp, sp, #24
   1acb4:	mov	r7, r1
   1acb8:	mov	r6, r0
   1acbc:	mov	r0, #0
   1acc0:	str	r0, [sp, #20]
   1acc4:	str	r0, [sp, #16]
   1acc8:	str	r0, [sp, #12]
   1accc:	strb	r0, [r3]
   1acd0:	cmp	r1, r2
   1acd4:	beq	1ad2c <main@@Base+0x4c50>
   1acd8:	mov	r5, r3
   1acdc:	mov	r4, r2
   1ace0:	add	r0, sp, #16
   1ace4:	str	r0, [sp]
   1ace8:	add	r3, sp, #12
   1acec:	mov	r0, r6
   1acf0:	mov	r1, r7
   1acf4:	bl	27c14 <flatcc_json_parser_integer@@Base>
   1acf8:	mov	r1, r0
   1acfc:	cmp	r0, r7
   1ad00:	beq	1ad28 <main@@Base+0x4c4c>
   1ad04:	ldr	r3, [sp, #12]
   1ad08:	ldr	r0, [sp, #16]
   1ad0c:	ldr	r2, [sp, #20]
   1ad10:	stm	sp, {r0, r2, r5}
   1ad14:	mov	r0, r6
   1ad18:	mov	r2, r4
   1ad1c:	bl	1da6c <main@@Base+0x7990>
   1ad20:	mov	r7, r0
   1ad24:	b	1ad2c <main@@Base+0x4c50>
   1ad28:	mov	r7, r1
   1ad2c:	mov	r0, r7
   1ad30:	sub	sp, fp, #16
   1ad34:	pop	{r4, r5, r6, r7, fp, pc}
   1ad38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad3c:	add	fp, sp, #28
   1ad40:	sub	sp, sp, #36	; 0x24
   1ad44:	mov	r8, r3
   1ad48:	mov	r6, r2
   1ad4c:	mov	r5, r0
   1ad50:	mov	r0, #0
   1ad54:	strb	r0, [fp, #-29]	; 0xffffffe3
   1ad58:	ldr	sl, [fp, #8]
   1ad5c:	strb	r0, [sl]
   1ad60:	mov	r0, r5
   1ad64:	bl	1da30 <main@@Base+0x7954>
   1ad68:	mov	r4, r0
   1ad6c:	cmp	r0, r6
   1ad70:	beq	1ae38 <main@@Base+0x4d5c>
   1ad74:	mov	r9, r8
   1ad78:	ldr	r7, [r9]
   1ad7c:	add	r0, sp, #24
   1ad80:	str	r0, [sp]
   1ad84:	add	r0, sp, #16
   1ad88:	str	r0, [sp, #4]
   1ad8c:	mov	r0, r5
   1ad90:	mov	r1, r4
   1ad94:	mov	r2, r6
   1ad98:	add	r3, sp, #20
   1ad9c:	blx	r7
   1ada0:	mov	r7, r0
   1ada4:	cmp	r0, r6
   1ada8:	beq	1ae44 <main@@Base+0x4d68>
   1adac:	cmp	r7, r4
   1adb0:	beq	1ae0c <main@@Base+0x4d30>
   1adb4:	ldr	r3, [sp, #20]
   1adb8:	ldr	r0, [sp, #24]
   1adbc:	ldr	r1, [sp, #28]
   1adc0:	stm	sp, {r0, r1}
   1adc4:	sub	r0, fp, #29
   1adc8:	str	r0, [sp, #8]
   1adcc:	mov	r0, r5
   1add0:	mov	r1, r7
   1add4:	mov	r2, r6
   1add8:	bl	1da6c <main@@Base+0x7990>
   1addc:	cmp	r0, r6
   1ade0:	beq	1ae40 <main@@Base+0x4d64>
   1ade4:	ldrb	r0, [sl]
   1ade8:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1adec:	add	r0, r0, r1
   1adf0:	strb	r0, [sl]
   1adf4:	ldr	r0, [sp, #16]
   1adf8:	cmp	r0, #0
   1adfc:	mov	r4, r7
   1ae00:	mov	r9, r8
   1ae04:	bne	1ad78 <main@@Base+0x4c9c>
   1ae08:	b	1ae44 <main@@Base+0x4d68>
   1ae0c:	ldr	r0, [r9, #4]!
   1ae10:	cmp	r0, #0
   1ae14:	mov	r4, r7
   1ae18:	bne	1ad78 <main@@Base+0x4c9c>
   1ae1c:	mov	r0, r5
   1ae20:	mov	r1, r7
   1ae24:	mov	r2, r6
   1ae28:	mov	r3, #23
   1ae2c:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1ae30:	mov	r7, r0
   1ae34:	b	1ae44 <main@@Base+0x4d68>
   1ae38:	mov	r7, r4
   1ae3c:	b	1ae44 <main@@Base+0x4d68>
   1ae40:	mov	r7, r6
   1ae44:	mov	r0, r7
   1ae48:	sub	sp, fp, #28
   1ae4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae50:	push	{r4, r5, fp, lr}
   1ae54:	add	fp, sp, #8
   1ae58:	mov	r4, r1
   1ae5c:	mov	r5, r0
   1ae60:	mov	r0, r1
   1ae64:	bl	1dab4 <main@@Base+0x79d8>
   1ae68:	strb	r4, [r5]
   1ae6c:	pop	{r4, r5, fp, pc}
   1ae70:	push	{r4, r5, r6, sl, fp, lr}
   1ae74:	add	fp, sp, #16
   1ae78:	mov	r6, r3
   1ae7c:	mov	r4, r2
   1ae80:	mov	r5, r0
   1ae84:	bl	1d024 <main@@Base+0x6f48>
   1ae88:	mov	r1, r0
   1ae8c:	cmp	r0, r4
   1ae90:	beq	1aed4 <main@@Base+0x4df8>
   1ae94:	ldrb	r0, [r1]
   1ae98:	cmp	r0, #44	; 0x2c
   1ae9c:	bne	1aedc <main@@Base+0x4e00>
   1aea0:	add	r1, r1, #1
   1aea4:	mov	r0, r5
   1aea8:	mov	r2, r4
   1aeac:	bl	1d024 <main@@Base+0x6f48>
   1aeb0:	mov	r1, r0
   1aeb4:	cmp	r0, r4
   1aeb8:	beq	1af04 <main@@Base+0x4e28>
   1aebc:	ldrb	r0, [r1]
   1aec0:	cmp	r0, #93	; 0x5d
   1aec4:	bne	1af20 <main@@Base+0x4e44>
   1aec8:	mov	r0, #0
   1aecc:	str	r0, [r6]
   1aed0:	b	1aef0 <main@@Base+0x4e14>
   1aed4:	mov	r0, #0
   1aed8:	b	1af24 <main@@Base+0x4e48>
   1aedc:	mov	r0, #0
   1aee0:	str	r0, [r6]
   1aee4:	ldrb	r0, [r1]
   1aee8:	cmp	r0, #93	; 0x5d
   1aeec:	bne	1af0c <main@@Base+0x4e30>
   1aef0:	add	r1, r1, #1
   1aef4:	mov	r0, r5
   1aef8:	mov	r2, r4
   1aefc:	pop	{r4, r5, r6, sl, fp, lr}
   1af00:	b	1d024 <main@@Base+0x6f48>
   1af04:	mov	r0, #0
   1af08:	str	r0, [r6]
   1af0c:	mov	r0, r5
   1af10:	mov	r2, r4
   1af14:	mov	r3, #9
   1af18:	pop	{r4, r5, r6, sl, fp, lr}
   1af1c:	b	26958 <flatcc_json_parser_set_error@@Base>
   1af20:	mov	r0, #1
   1af24:	str	r0, [r6]
   1af28:	mov	r0, r1
   1af2c:	pop	{r4, r5, r6, sl, fp, pc}
   1af30:	push	{r4, r5, r6, r7, fp, lr}
   1af34:	add	fp, sp, #16
   1af38:	sub	sp, sp, #24
   1af3c:	mov	r7, r1
   1af40:	mov	r6, r0
   1af44:	mov	r0, #0
   1af48:	str	r0, [sp, #20]
   1af4c:	str	r0, [sp, #16]
   1af50:	str	r0, [sp, #12]
   1af54:	strh	r0, [r3]
   1af58:	cmp	r1, r2
   1af5c:	beq	1afb4 <main@@Base+0x4ed8>
   1af60:	mov	r5, r3
   1af64:	mov	r4, r2
   1af68:	add	r0, sp, #16
   1af6c:	str	r0, [sp]
   1af70:	add	r3, sp, #12
   1af74:	mov	r0, r6
   1af78:	mov	r1, r7
   1af7c:	bl	27c14 <flatcc_json_parser_integer@@Base>
   1af80:	mov	r1, r0
   1af84:	cmp	r0, r7
   1af88:	beq	1afb0 <main@@Base+0x4ed4>
   1af8c:	ldr	r3, [sp, #12]
   1af90:	ldr	r0, [sp, #16]
   1af94:	ldr	r2, [sp, #20]
   1af98:	stm	sp, {r0, r2, r5}
   1af9c:	mov	r0, r6
   1afa0:	mov	r2, r4
   1afa4:	bl	1dab8 <main@@Base+0x79dc>
   1afa8:	mov	r7, r0
   1afac:	b	1afb4 <main@@Base+0x4ed8>
   1afb0:	mov	r7, r1
   1afb4:	mov	r0, r7
   1afb8:	sub	sp, fp, #16
   1afbc:	pop	{r4, r5, r6, r7, fp, pc}
   1afc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afc4:	add	fp, sp, #28
   1afc8:	sub	sp, sp, #36	; 0x24
   1afcc:	mov	r8, r3
   1afd0:	mov	r6, r2
   1afd4:	mov	r5, r0
   1afd8:	mov	r0, #0
   1afdc:	strh	r0, [fp, #-30]	; 0xffffffe2
   1afe0:	ldr	sl, [fp, #8]
   1afe4:	strh	r0, [sl]
   1afe8:	mov	r0, r5
   1afec:	bl	1da30 <main@@Base+0x7954>
   1aff0:	mov	r4, r0
   1aff4:	cmp	r0, r6
   1aff8:	beq	1b0c0 <main@@Base+0x4fe4>
   1affc:	mov	r9, r8
   1b000:	ldr	r7, [r9]
   1b004:	add	r0, sp, #24
   1b008:	str	r0, [sp]
   1b00c:	add	r0, sp, #16
   1b010:	str	r0, [sp, #4]
   1b014:	mov	r0, r5
   1b018:	mov	r1, r4
   1b01c:	mov	r2, r6
   1b020:	add	r3, sp, #20
   1b024:	blx	r7
   1b028:	mov	r7, r0
   1b02c:	cmp	r0, r6
   1b030:	beq	1b0cc <main@@Base+0x4ff0>
   1b034:	cmp	r7, r4
   1b038:	beq	1b094 <main@@Base+0x4fb8>
   1b03c:	ldr	r3, [sp, #20]
   1b040:	ldr	r0, [sp, #24]
   1b044:	ldr	r1, [sp, #28]
   1b048:	stm	sp, {r0, r1}
   1b04c:	sub	r0, fp, #30
   1b050:	str	r0, [sp, #8]
   1b054:	mov	r0, r5
   1b058:	mov	r1, r7
   1b05c:	mov	r2, r6
   1b060:	bl	1dab8 <main@@Base+0x79dc>
   1b064:	cmp	r0, r6
   1b068:	beq	1b0c8 <main@@Base+0x4fec>
   1b06c:	ldrh	r0, [sl]
   1b070:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1b074:	add	r0, r0, r1
   1b078:	strh	r0, [sl]
   1b07c:	ldr	r0, [sp, #16]
   1b080:	cmp	r0, #0
   1b084:	mov	r4, r7
   1b088:	mov	r9, r8
   1b08c:	bne	1b000 <main@@Base+0x4f24>
   1b090:	b	1b0cc <main@@Base+0x4ff0>
   1b094:	ldr	r0, [r9, #4]!
   1b098:	cmp	r0, #0
   1b09c:	mov	r4, r7
   1b0a0:	bne	1b000 <main@@Base+0x4f24>
   1b0a4:	mov	r0, r5
   1b0a8:	mov	r1, r7
   1b0ac:	mov	r2, r6
   1b0b0:	mov	r3, #23
   1b0b4:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1b0b8:	mov	r7, r0
   1b0bc:	b	1b0cc <main@@Base+0x4ff0>
   1b0c0:	mov	r7, r4
   1b0c4:	b	1b0cc <main@@Base+0x4ff0>
   1b0c8:	mov	r7, r6
   1b0cc:	mov	r0, r7
   1b0d0:	sub	sp, fp, #28
   1b0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0d8:	push	{r4, r5, fp, lr}
   1b0dc:	add	fp, sp, #8
   1b0e0:	mov	r4, r1
   1b0e4:	mov	r5, r0
   1b0e8:	mov	r0, r1
   1b0ec:	bl	1db18 <main@@Base+0x7a3c>
   1b0f0:	strh	r4, [r5]
   1b0f4:	pop	{r4, r5, fp, pc}
   1b0f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b0fc:	add	fp, sp, #24
   1b100:	sub	sp, sp, #8
   1b104:	mov	r8, r3
   1b108:	mov	r4, r2
   1b10c:	mov	r7, r1
   1b110:	mov	r5, r0
   1b114:	mov	r0, #0
   1b118:	str	r0, [r3]
   1b11c:	ldr	r0, [r5]
   1b120:	mov	r1, #0
   1b124:	bl	230c4 <flatcc_builder_start_table@@Base>
   1b128:	cmp	r0, #0
   1b12c:	bne	1b1bc <main@@Base+0x50e0>
   1b130:	add	r3, sp, #4
   1b134:	mov	r0, r5
   1b138:	mov	r1, r7
   1b13c:	mov	r2, r4
   1b140:	bl	19f88 <main@@Base+0x3eac>
   1b144:	mov	r7, r0
   1b148:	ldr	r0, [sp, #4]
   1b14c:	cmp	r0, #0
   1b150:	beq	1b19c <main@@Base+0x50c0>
   1b154:	add	r6, sp, #4
   1b158:	mov	r0, r5
   1b15c:	mov	r1, r7
   1b160:	mov	r2, r4
   1b164:	bl	1a018 <main@@Base+0x3f3c>
   1b168:	mov	r1, r0
   1b16c:	mov	r0, r5
   1b170:	mov	r2, r4
   1b174:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1b178:	mov	r1, r0
   1b17c:	mov	r0, r5
   1b180:	mov	r2, r4
   1b184:	mov	r3, r6
   1b188:	bl	1cf64 <main@@Base+0x6e88>
   1b18c:	mov	r7, r0
   1b190:	ldr	r0, [sp, #4]
   1b194:	cmp	r0, #0
   1b198:	bne	1b158 <main@@Base+0x507c>
   1b19c:	ldr	r0, [r5, #24]
   1b1a0:	cmp	r0, #0
   1b1a4:	bne	1b1bc <main@@Base+0x50e0>
   1b1a8:	ldr	r0, [r5]
   1b1ac:	bl	237e4 <flatcc_builder_end_table@@Base>
   1b1b0:	str	r0, [r8]
   1b1b4:	cmp	r0, #0
   1b1b8:	bne	1b1d4 <main@@Base+0x50f8>
   1b1bc:	mov	r0, r5
   1b1c0:	mov	r1, r7
   1b1c4:	mov	r2, r4
   1b1c8:	mov	r3, #33	; 0x21
   1b1cc:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1b1d0:	mov	r7, r0
   1b1d4:	mov	r0, r7
   1b1d8:	sub	sp, fp, #24
   1b1dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b1e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1e4:	add	fp, sp, #28
   1b1e8:	sub	sp, sp, #44	; 0x2c
   1b1ec:	mov	r6, r3
   1b1f0:	mov	r4, r2
   1b1f4:	mov	r5, r0
   1b1f8:	sub	r3, fp, #32
   1b1fc:	bl	19f88 <main@@Base+0x3eac>
   1b200:	mov	r1, r0
   1b204:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b208:	cmp	r0, #0
   1b20c:	beq	1b660 <main@@Base+0x5584>
   1b210:	add	r0, r6, #4
   1b214:	str	r0, [sp, #12]
   1b218:	add	r0, r6, #8
   1b21c:	str	r0, [sp, #8]
   1b220:	add	r0, r6, #26
   1b224:	str	r0, [sp, #20]
   1b228:	add	r0, r6, #16
   1b22c:	str	r0, [sp, #28]
   1b230:	str	r6, [sp, #16]
   1b234:	add	r0, r6, #24
   1b238:	str	r0, [sp, #24]
   1b23c:	movw	r9, #29556	; 0x7374
   1b240:	movt	r9, #29797	; 0x7465
   1b244:	mvn	r8, #-855638016	; 0xcd000000
   1b248:	sub	sl, fp, #32
   1b24c:	mov	r0, r5
   1b250:	mov	r2, r4
   1b254:	bl	1a018 <main@@Base+0x3f3c>
   1b258:	mov	r7, r0
   1b25c:	mov	r1, r4
   1b260:	bl	1a060 <main@@Base+0x3f84>
   1b264:	subs	r2, r8, r0
   1b268:	sbcs	r2, r9, r1
   1b26c:	bcc	1b324 <main@@Base+0x5248>
   1b270:	eor	r2, r1, r9
   1b274:	and	r0, r0, #-16777216	; 0xff000000
   1b278:	eor	r3, r0, #822083584	; 0x31000000
   1b27c:	orrs	r2, r3, r2
   1b280:	beq	1b41c <main@@Base+0x5340>
   1b284:	eor	r1, r1, r9
   1b288:	eor	r0, r0, #838860800	; 0x32000000
   1b28c:	orrs	r0, r0, r1
   1b290:	bne	1b550 <main@@Base+0x5474>
   1b294:	mov	r0, r5
   1b298:	mov	r1, r7
   1b29c:	mov	r2, r4
   1b2a0:	mov	r3, #5
   1b2a4:	bl	1a064 <main@@Base+0x3f88>
   1b2a8:	mov	r6, r0
   1b2ac:	cmp	r7, r0
   1b2b0:	beq	1b610 <main@@Base+0x5534>
   1b2b4:	mov	r0, #0
   1b2b8:	strb	r0, [sp, #32]
   1b2bc:	mov	r0, r5
   1b2c0:	mov	r1, r6
   1b2c4:	mov	r2, r4
   1b2c8:	add	sl, sp, #32
   1b2cc:	mov	r3, sl
   1b2d0:	bl	1aa50 <main@@Base+0x4974>
   1b2d4:	mov	r7, r0
   1b2d8:	cmp	r6, r0
   1b2dc:	bne	1b310 <main@@Base+0x5234>
   1b2e0:	str	sl, [sp]
   1b2e4:	mov	r0, r5
   1b2e8:	mov	r1, r7
   1b2ec:	mov	r2, r4
   1b2f0:	movw	r3, #37256	; 0x9188
   1b2f4:	movt	r3, #4
   1b2f8:	bl	1aae0 <main@@Base+0x4a04>
   1b2fc:	mov	r1, r0
   1b300:	cmp	r0, r7
   1b304:	cmpne	r1, r4
   1b308:	beq	1b64c <main@@Base+0x5570>
   1b30c:	mov	r7, r1
   1b310:	sub	sl, fp, #32
   1b314:	ldrsb	r1, [sp, #32]
   1b318:	ldr	r0, [sp, #24]
   1b31c:	bl	1abf8 <main@@Base+0x4b1c>
   1b320:	b	1b624 <main@@Base+0x5548>
   1b324:	cmn	r1, #-2013265919	; 0x88000001
   1b328:	bhi	1b374 <main@@Base+0x5298>
   1b32c:	eor	r1, r1, r9
   1b330:	and	r0, r0, #-16777216	; 0xff000000
   1b334:	eor	r0, r0, #855638016	; 0x33000000
   1b338:	orrs	r0, r0, r1
   1b33c:	bne	1b550 <main@@Base+0x5474>
   1b340:	mov	r0, r5
   1b344:	mov	r1, r7
   1b348:	mov	r2, r4
   1b34c:	mov	r3, #5
   1b350:	bl	1a064 <main@@Base+0x3f88>
   1b354:	mov	r1, r0
   1b358:	cmp	r7, r0
   1b35c:	beq	1b578 <main@@Base+0x549c>
   1b360:	mov	r0, r5
   1b364:	mov	r2, r4
   1b368:	ldr	r3, [sp, #20]
   1b36c:	bl	1b66c <main@@Base+0x5590>
   1b370:	b	1b620 <main@@Base+0x5544>
   1b374:	and	r0, r1, #-16777216	; 0xff000000
   1b378:	lsr	r1, r1, #24
   1b37c:	cmp	r1, #120	; 0x78
   1b380:	bhi	1b4b0 <main@@Base+0x53d4>
   1b384:	teq	r0, #2013265920	; 0x78000000
   1b388:	bne	1b550 <main@@Base+0x5474>
   1b38c:	mov	r0, r5
   1b390:	mov	r1, r7
   1b394:	mov	r2, r4
   1b398:	mov	r3, #1
   1b39c:	bl	1a064 <main@@Base+0x3f88>
   1b3a0:	mov	r6, r0
   1b3a4:	cmp	r7, r0
   1b3a8:	beq	1b610 <main@@Base+0x5534>
   1b3ac:	mov	r0, #0
   1b3b0:	str	r0, [sp, #32]
   1b3b4:	mov	r0, r5
   1b3b8:	mov	r1, r6
   1b3bc:	mov	r2, r4
   1b3c0:	add	sl, sp, #32
   1b3c4:	mov	r3, sl
   1b3c8:	bl	27668 <flatcc_json_parser_float@@Base>
   1b3cc:	mov	r7, r0
   1b3d0:	cmp	r6, r0
   1b3d4:	bne	1b408 <main@@Base+0x532c>
   1b3d8:	str	sl, [sp]
   1b3dc:	mov	r0, r5
   1b3e0:	mov	r1, r7
   1b3e4:	mov	r2, r4
   1b3e8:	movw	r3, #37284	; 0x91a4
   1b3ec:	movt	r3, #4
   1b3f0:	bl	1c5c4 <main@@Base+0x64e8>
   1b3f4:	mov	r1, r0
   1b3f8:	cmp	r0, r7
   1b3fc:	cmpne	r1, r4
   1b400:	beq	1b64c <main@@Base+0x5570>
   1b404:	mov	r7, r1
   1b408:	sub	sl, fp, #32
   1b40c:	vldr	s0, [sp, #32]
   1b410:	ldr	r0, [sp, #16]
   1b414:	bl	1c6cc <main@@Base+0x65f0>
   1b418:	b	1b624 <main@@Base+0x5548>
   1b41c:	mov	r0, r5
   1b420:	mov	r1, r7
   1b424:	mov	r2, r4
   1b428:	mov	r3, #5
   1b42c:	bl	1a064 <main@@Base+0x3f88>
   1b430:	mov	r8, r0
   1b434:	cmp	r7, r0
   1b438:	beq	1b55c <main@@Base+0x5480>
   1b43c:	mov	r0, #0
   1b440:	str	r0, [sp, #36]	; 0x24
   1b444:	str	r0, [sp, #32]
   1b448:	mov	r0, r5
   1b44c:	mov	r1, r8
   1b450:	mov	r2, r4
   1b454:	add	r6, sp, #32
   1b458:	mov	r3, r6
   1b45c:	bl	27590 <flatcc_json_parser_double@@Base>
   1b460:	mov	r7, r0
   1b464:	cmp	r8, r0
   1b468:	bne	1b49c <main@@Base+0x53c0>
   1b46c:	str	r6, [sp]
   1b470:	mov	r0, r5
   1b474:	mov	r1, r7
   1b478:	mov	r2, r4
   1b47c:	movw	r3, #37272	; 0x9198
   1b480:	movt	r3, #4
   1b484:	bl	1ce3c <main@@Base+0x6d60>
   1b488:	mov	r1, r0
   1b48c:	cmp	r0, r7
   1b490:	cmpne	r1, r4
   1b494:	beq	1b64c <main@@Base+0x5570>
   1b498:	mov	r7, r1
   1b49c:	mvn	r8, #-855638016	; 0xcd000000
   1b4a0:	vldr	d0, [sp, #32]
   1b4a4:	ldr	r0, [sp, #28]
   1b4a8:	bl	1cf4c <main@@Base+0x6e70>
   1b4ac:	b	1b624 <main@@Base+0x5548>
   1b4b0:	teq	r0, #2030043136	; 0x79000000
   1b4b4:	beq	1b580 <main@@Base+0x54a4>
   1b4b8:	teq	r0, #2046820352	; 0x7a000000
   1b4bc:	bne	1b550 <main@@Base+0x5474>
   1b4c0:	mov	r0, r5
   1b4c4:	mov	r1, r7
   1b4c8:	mov	r2, r4
   1b4cc:	mov	r3, #1
   1b4d0:	bl	1a064 <main@@Base+0x3f88>
   1b4d4:	mov	r6, r0
   1b4d8:	cmp	r7, r0
   1b4dc:	beq	1b610 <main@@Base+0x5534>
   1b4e0:	mov	r0, #0
   1b4e4:	str	r0, [sp, #32]
   1b4e8:	mov	r0, r5
   1b4ec:	mov	r1, r6
   1b4f0:	mov	r2, r4
   1b4f4:	add	sl, sp, #32
   1b4f8:	mov	r3, sl
   1b4fc:	bl	27668 <flatcc_json_parser_float@@Base>
   1b500:	mov	r7, r0
   1b504:	cmp	r6, r0
   1b508:	bne	1b53c <main@@Base+0x5460>
   1b50c:	str	sl, [sp]
   1b510:	mov	r0, r5
   1b514:	mov	r1, r7
   1b518:	mov	r2, r4
   1b51c:	movw	r3, #37296	; 0x91b0
   1b520:	movt	r3, #4
   1b524:	bl	1c5c4 <main@@Base+0x64e8>
   1b528:	mov	r1, r0
   1b52c:	cmp	r0, r7
   1b530:	cmpne	r1, r4
   1b534:	beq	1b64c <main@@Base+0x5570>
   1b538:	mov	r7, r1
   1b53c:	sub	sl, fp, #32
   1b540:	vldr	s0, [sp, #32]
   1b544:	ldr	r0, [sp, #8]
   1b548:	bl	1c6cc <main@@Base+0x65f0>
   1b54c:	b	1b624 <main@@Base+0x5548>
   1b550:	mov	r0, r5
   1b554:	mov	r1, r7
   1b558:	b	1b618 <main@@Base+0x553c>
   1b55c:	mov	r0, r5
   1b560:	mov	r1, r8
   1b564:	mov	r2, r4
   1b568:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1b56c:	mov	r7, r0
   1b570:	mvn	r8, #-855638016	; 0xcd000000
   1b574:	b	1b624 <main@@Base+0x5548>
   1b578:	mov	r0, r5
   1b57c:	b	1b618 <main@@Base+0x553c>
   1b580:	mov	r0, r5
   1b584:	mov	r1, r7
   1b588:	mov	r2, r4
   1b58c:	mov	r3, #1
   1b590:	bl	1a064 <main@@Base+0x3f88>
   1b594:	mov	r6, r0
   1b598:	cmp	r7, r0
   1b59c:	beq	1b610 <main@@Base+0x5534>
   1b5a0:	mov	r0, #0
   1b5a4:	str	r0, [sp, #32]
   1b5a8:	mov	r0, r5
   1b5ac:	mov	r1, r6
   1b5b0:	mov	r2, r4
   1b5b4:	add	sl, sp, #32
   1b5b8:	mov	r3, sl
   1b5bc:	bl	27668 <flatcc_json_parser_float@@Base>
   1b5c0:	mov	r7, r0
   1b5c4:	cmp	r6, r0
   1b5c8:	bne	1b5fc <main@@Base+0x5520>
   1b5cc:	str	sl, [sp]
   1b5d0:	mov	r0, r5
   1b5d4:	mov	r1, r7
   1b5d8:	mov	r2, r4
   1b5dc:	movw	r3, #37308	; 0x91bc
   1b5e0:	movt	r3, #4
   1b5e4:	bl	1c5c4 <main@@Base+0x64e8>
   1b5e8:	mov	r1, r0
   1b5ec:	cmp	r0, r7
   1b5f0:	cmpne	r1, r4
   1b5f4:	beq	1b64c <main@@Base+0x5570>
   1b5f8:	mov	r7, r1
   1b5fc:	sub	sl, fp, #32
   1b600:	vldr	s0, [sp, #32]
   1b604:	ldr	r0, [sp, #12]
   1b608:	bl	1c6cc <main@@Base+0x65f0>
   1b60c:	b	1b624 <main@@Base+0x5548>
   1b610:	mov	r0, r5
   1b614:	mov	r1, r6
   1b618:	mov	r2, r4
   1b61c:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1b620:	mov	r7, r0
   1b624:	mov	r0, r5
   1b628:	mov	r1, r7
   1b62c:	mov	r2, r4
   1b630:	mov	r3, sl
   1b634:	bl	1cf64 <main@@Base+0x6e88>
   1b638:	mov	r1, r0
   1b63c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b640:	cmp	r0, #0
   1b644:	bne	1b24c <main@@Base+0x5170>
   1b648:	b	1b660 <main@@Base+0x5584>
   1b64c:	mov	r0, r5
   1b650:	mov	r2, r4
   1b654:	mov	r3, #33	; 0x21
   1b658:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1b65c:	mov	r1, r0
   1b660:	mov	r0, r1
   1b664:	sub	sp, fp, #28
   1b668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b66c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b670:	add	fp, sp, #28
   1b674:	sub	sp, sp, #20
   1b678:	mov	r6, r3
   1b67c:	mov	r4, r2
   1b680:	mov	r5, r0
   1b684:	add	r3, sp, #16
   1b688:	bl	19f88 <main@@Base+0x3eac>
   1b68c:	mov	r1, r0
   1b690:	ldr	r0, [sp, #16]
   1b694:	cmp	r0, #0
   1b698:	beq	1b870 <main@@Base+0x5794>
   1b69c:	str	r6, [sp, #8]
   1b6a0:	add	r0, r6, #2
   1b6a4:	str	r0, [sp, #4]
   1b6a8:	add	sl, sp, #12
   1b6ac:	add	r9, sp, #16
   1b6b0:	mov	r0, r5
   1b6b4:	mov	r2, r4
   1b6b8:	bl	1a018 <main@@Base+0x3f3c>
   1b6bc:	mov	r6, r0
   1b6c0:	mov	r1, r4
   1b6c4:	bl	1a060 <main@@Base+0x3f84>
   1b6c8:	and	r0, r1, #-16777216	; 0xff000000
   1b6cc:	teq	r0, #1627389952	; 0x61000000
   1b6d0:	beq	1b770 <main@@Base+0x5694>
   1b6d4:	teq	r0, #1644167168	; 0x62000000
   1b6d8:	bne	1b7f8 <main@@Base+0x571c>
   1b6dc:	mov	r7, sl
   1b6e0:	mov	r0, r5
   1b6e4:	mov	r1, r6
   1b6e8:	mov	r2, r4
   1b6ec:	mov	r3, #1
   1b6f0:	bl	1a064 <main@@Base+0x3f88>
   1b6f4:	mov	sl, r0
   1b6f8:	cmp	r6, r0
   1b6fc:	beq	1b804 <main@@Base+0x5728>
   1b700:	mov	r0, #0
   1b704:	strb	r0, [sp, #15]
   1b708:	mov	r0, r5
   1b70c:	mov	r1, sl
   1b710:	mov	r2, r4
   1b714:	add	r6, sp, #15
   1b718:	mov	r3, r6
   1b71c:	bl	1aa50 <main@@Base+0x4974>
   1b720:	mov	r8, r0
   1b724:	cmp	sl, r0
   1b728:	bne	1b75c <main@@Base+0x5680>
   1b72c:	str	r6, [sp]
   1b730:	mov	r0, r5
   1b734:	mov	r1, r8
   1b738:	mov	r2, r4
   1b73c:	movw	r3, #37320	; 0x91c8
   1b740:	movt	r3, #4
   1b744:	bl	1aae0 <main@@Base+0x4a04>
   1b748:	mov	r1, r0
   1b74c:	cmp	r0, r8
   1b750:	cmpne	r1, r4
   1b754:	beq	1b85c <main@@Base+0x5780>
   1b758:	mov	r8, r1
   1b75c:	mov	sl, r7
   1b760:	ldrsb	r1, [sp, #15]
   1b764:	ldr	r0, [sp, #4]
   1b768:	bl	1abf8 <main@@Base+0x4b1c>
   1b76c:	b	1b834 <main@@Base+0x5758>
   1b770:	mov	r0, r5
   1b774:	mov	r1, r6
   1b778:	mov	r2, r4
   1b77c:	mov	r3, #1
   1b780:	bl	1a064 <main@@Base+0x3f88>
   1b784:	mov	r7, r0
   1b788:	cmp	r6, r0
   1b78c:	beq	1b820 <main@@Base+0x5744>
   1b790:	mov	r0, #0
   1b794:	strh	r0, [sp, #12]
   1b798:	mov	r0, r5
   1b79c:	mov	r1, r7
   1b7a0:	mov	r2, r4
   1b7a4:	mov	r3, sl
   1b7a8:	bl	1af30 <main@@Base+0x4e54>
   1b7ac:	mov	r8, r0
   1b7b0:	cmp	r7, r0
   1b7b4:	bne	1b7e8 <main@@Base+0x570c>
   1b7b8:	str	sl, [sp]
   1b7bc:	mov	r0, r5
   1b7c0:	mov	r1, r8
   1b7c4:	mov	r2, r4
   1b7c8:	movw	r3, #37332	; 0x91d4
   1b7cc:	movt	r3, #4
   1b7d0:	bl	1afc0 <main@@Base+0x4ee4>
   1b7d4:	mov	r1, r0
   1b7d8:	cmp	r0, r8
   1b7dc:	cmpne	r1, r4
   1b7e0:	beq	1b85c <main@@Base+0x5780>
   1b7e4:	mov	r8, r1
   1b7e8:	ldrsh	r1, [sp, #12]
   1b7ec:	ldr	r0, [sp, #8]
   1b7f0:	bl	1b0d8 <main@@Base+0x4ffc>
   1b7f4:	b	1b834 <main@@Base+0x5758>
   1b7f8:	mov	r0, r5
   1b7fc:	mov	r1, r6
   1b800:	b	1b828 <main@@Base+0x574c>
   1b804:	mov	r0, r5
   1b808:	mov	r1, sl
   1b80c:	mov	r2, r4
   1b810:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1b814:	mov	r8, r0
   1b818:	mov	sl, r7
   1b81c:	b	1b834 <main@@Base+0x5758>
   1b820:	mov	r0, r5
   1b824:	mov	r1, r7
   1b828:	mov	r2, r4
   1b82c:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1b830:	mov	r8, r0
   1b834:	mov	r0, r5
   1b838:	mov	r1, r8
   1b83c:	mov	r2, r4
   1b840:	mov	r3, r9
   1b844:	bl	1cf64 <main@@Base+0x6e88>
   1b848:	mov	r1, r0
   1b84c:	ldr	r0, [sp, #16]
   1b850:	cmp	r0, #0
   1b854:	bne	1b6b0 <main@@Base+0x55d4>
   1b858:	b	1b870 <main@@Base+0x5794>
   1b85c:	mov	r0, r5
   1b860:	mov	r2, r4
   1b864:	mov	r3, #33	; 0x21
   1b868:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1b86c:	mov	r1, r0
   1b870:	mov	r0, r1
   1b874:	sub	sp, fp, #28
   1b878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b87c:	push	{r4, r5, r6, sl, fp, lr}
   1b880:	add	fp, sp, #16
   1b884:	mov	r4, r2
   1b888:	mov	r5, r0
   1b88c:	ldr	r6, [fp, #8]
   1b890:	mov	r0, #0
   1b894:	str	r0, [r6]
   1b898:	cmp	r3, #4
   1b89c:	bhi	1b93c <main@@Base+0x5860>
   1b8a0:	add	r0, pc, #0
   1b8a4:	ldr	pc, [r0, r3, lsl #2]
   1b8a8:			; <UNDEFINED> instruction: 0x0001b8bc
   1b8ac:	andeq	fp, r1, ip, asr #17
   1b8b0:	andeq	fp, r1, r0, ror #17
   1b8b4:	strdeq	fp, [r1], -r4
   1b8b8:	andeq	fp, r1, r8, lsl #18
   1b8bc:	mov	r0, r5
   1b8c0:	mov	r2, r4
   1b8c4:	pop	{r4, r5, r6, sl, fp, lr}
   1b8c8:	b	1db1c <main@@Base+0x7a40>
   1b8cc:	mov	r0, r5
   1b8d0:	mov	r2, r4
   1b8d4:	mov	r3, r6
   1b8d8:	bl	17018 <main@@Base+0xf3c>
   1b8dc:	b	1b918 <main@@Base+0x583c>
   1b8e0:	mov	r0, r5
   1b8e4:	mov	r2, r4
   1b8e8:	mov	r3, r6
   1b8ec:	bl	1db48 <main@@Base+0x7a6c>
   1b8f0:	b	1b918 <main@@Base+0x583c>
   1b8f4:	mov	r0, r5
   1b8f8:	mov	r2, r4
   1b8fc:	mov	r3, r6
   1b900:	bl	1df94 <main@@Base+0x7eb8>
   1b904:	b	1b918 <main@@Base+0x583c>
   1b908:	mov	r0, r5
   1b90c:	mov	r2, r4
   1b910:	mov	r3, r6
   1b914:	bl	1e07c <main@@Base+0x7fa0>
   1b918:	mov	r1, r0
   1b91c:	ldr	r0, [r5, #24]
   1b920:	cmp	r0, #0
   1b924:	bne	1b934 <main@@Base+0x5858>
   1b928:	ldr	r0, [r6]
   1b92c:	cmp	r0, #0
   1b930:	beq	1b95c <main@@Base+0x5880>
   1b934:	mov	r0, r1
   1b938:	pop	{r4, r5, r6, sl, fp, pc}
   1b93c:	ldrb	r0, [r5, #8]
   1b940:	tst	r0, #1
   1b944:	bne	1b970 <main@@Base+0x5894>
   1b948:	mov	r0, r5
   1b94c:	mov	r2, r4
   1b950:	mov	r3, #15
   1b954:	pop	{r4, r5, r6, sl, fp, lr}
   1b958:	b	26958 <flatcc_json_parser_set_error@@Base>
   1b95c:	mov	r0, r5
   1b960:	mov	r2, r4
   1b964:	mov	r3, #33	; 0x21
   1b968:	pop	{r4, r5, r6, sl, fp, lr}
   1b96c:	b	26958 <flatcc_json_parser_set_error@@Base>
   1b970:	mov	r0, r5
   1b974:	mov	r2, r4
   1b978:	pop	{r4, r5, r6, sl, fp, lr}
   1b97c:	b	2727c <flatcc_json_parser_generic_json@@Base>
   1b980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b984:	add	fp, sp, #28
   1b988:	sub	sp, sp, #4
   1b98c:	mov	r8, r3
   1b990:	mov	r6, r2
   1b994:	mov	r5, r1
   1b998:	mov	r9, r0
   1b99c:	mov	r0, r1
   1b9a0:	mov	r1, r2
   1b9a4:	bl	1a060 <main@@Base+0x3f84>
   1b9a8:	mov	r7, r0
   1b9ac:	mov	r4, r1
   1b9b0:	movw	r1, #28275	; 0x6e73
   1b9b4:	movt	r1, #19823	; 0x4d6f
   1b9b8:	movw	r0, #29184	; 0x7200
   1b9bc:	movt	r0, #29797	; 0x7465
   1b9c0:	ldr	r3, [fp, #12]
   1b9c4:	ldr	sl, [fp, #8]
   1b9c8:	subs	r2, r7, r0
   1b9cc:	sbcs	r2, r4, r1
   1b9d0:	bcs	1ba14 <main@@Base+0x5938>
   1b9d4:	bic	r0, r4, #255	; 0xff
   1b9d8:	movw	r1, #29696	; 0x7400
   1b9dc:	movt	r1, #16748	; 0x416c
   1b9e0:	teq	r0, r1
   1b9e4:	bne	1ba60 <main@@Base+0x5984>
   1b9e8:	str	r3, [sp]
   1b9ec:	mov	r0, r9
   1b9f0:	mov	r1, r5
   1b9f4:	mov	r2, r6
   1b9f8:	mov	r3, #3
   1b9fc:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1ba00:	cmp	r0, r5
   1ba04:	beq	1ba60 <main@@Base+0x5984>
   1ba08:	mov	r1, #0
   1ba0c:	mov	r2, #4
   1ba10:	b	1ba50 <main@@Base+0x5974>
   1ba14:	eor	r1, r4, r1
   1ba18:	add	r2, r0, #50	; 0x32
   1ba1c:	eor	r2, r7, r2
   1ba20:	orrs	r2, r2, r1
   1ba24:	bne	1ba6c <main@@Base+0x5990>
   1ba28:	str	r3, [sp]
   1ba2c:	mov	r0, r9
   1ba30:	mov	r1, r5
   1ba34:	mov	r2, r6
   1ba38:	mov	r3, #8
   1ba3c:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1ba40:	cmp	r0, r5
   1ba44:	beq	1ba60 <main@@Base+0x5984>
   1ba48:	mov	r1, #0
   1ba4c:	mov	r2, #3
   1ba50:	str	r2, [sl]
   1ba54:	str	r1, [sl, #4]
   1ba58:	str	r1, [r8]
   1ba5c:	mov	r5, r0
   1ba60:	mov	r0, r5
   1ba64:	sub	sp, fp, #28
   1ba68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba6c:	bic	r2, r7, #255	; 0xff
   1ba70:	eor	r0, r2, r0
   1ba74:	orrs	r0, r0, r1
   1ba78:	mov	sl, r5
   1ba7c:	bne	1bac4 <main@@Base+0x59e8>
   1ba80:	str	r3, [sp]
   1ba84:	mov	r0, r9
   1ba88:	mov	r1, r5
   1ba8c:	mov	r2, r6
   1ba90:	mov	r3, #7
   1ba94:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1ba98:	mov	sl, r0
   1ba9c:	cmp	r0, r5
   1baa0:	beq	1bac0 <main@@Base+0x59e4>
   1baa4:	mov	r1, #0
   1baa8:	mov	r0, #1
   1baac:	ldr	r2, [fp, #8]
   1bab0:	strd	r0, [r2]
   1bab4:	str	r1, [r8]
   1bab8:	mov	r5, sl
   1babc:	b	1ba60 <main@@Base+0x5984>
   1bac0:	ldr	r3, [fp, #12]
   1bac4:	movw	r0, #20037	; 0x4e45
   1bac8:	movt	r0, #20047	; 0x4e4f
   1bacc:	teq	r4, r0
   1bad0:	bne	1bb10 <main@@Base+0x5a34>
   1bad4:	str	r3, [sp]
   1bad8:	mov	r0, r9
   1badc:	mov	r1, sl
   1bae0:	mov	r2, r6
   1bae4:	mov	r3, #4
   1bae8:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1baec:	cmp	r0, sl
   1baf0:	beq	1bb08 <main@@Base+0x5a2c>
   1baf4:	mov	r1, #0
   1baf8:	ldr	r2, [fp, #8]
   1bafc:	str	r1, [r2]
   1bb00:	str	r1, [r2, #4]
   1bb04:	b	1ba58 <main@@Base+0x597c>
   1bb08:	mov	sl, r0
   1bb0c:	ldr	r3, [fp, #12]
   1bb10:	movw	r0, #28016	; 0x6d70
   1bb14:	movt	r0, #21353	; 0x5369
   1bb18:	eor	r0, r7, r0
   1bb1c:	movw	r1, #29556	; 0x7374
   1bb20:	movt	r1, #21605	; 0x5465
   1bb24:	eor	r1, r4, r1
   1bb28:	orrs	r0, r0, r1
   1bb2c:	bne	1ba60 <main@@Base+0x5984>
   1bb30:	mov	r7, r3
   1bb34:	add	r0, sl, #8
   1bb38:	mov	r1, r6
   1bb3c:	bl	1a060 <main@@Base+0x3f84>
   1bb40:	movw	r2, #21601	; 0x5461
   1bb44:	movt	r2, #27749	; 0x6c65
   1bb48:	eor	r1, r1, r2
   1bb4c:	movw	r2, #25943	; 0x6557
   1bb50:	movt	r2, #25196	; 0x626c
   1bb54:	eor	r0, r0, r2
   1bb58:	orrs	r0, r0, r1
   1bb5c:	bne	1ba60 <main@@Base+0x5984>
   1bb60:	add	r4, sl, #16
   1bb64:	mov	r0, r4
   1bb68:	mov	r1, r6
   1bb6c:	bl	1a060 <main@@Base+0x3f84>
   1bb70:	lsr	r0, r0, #8
   1bb74:	orr	r0, r0, r1, lsl #24
   1bb78:	movw	r2, #30061	; 0x756d
   1bb7c:	movt	r2, #17774	; 0x456e
   1bb80:	eor	r0, r0, r2
   1bb84:	movw	r2, #29800	; 0x7468
   1bb88:	movt	r2, #105	; 0x69
   1bb8c:	eor	r1, r2, r1, lsr #8
   1bb90:	orrs	r0, r0, r1
   1bb94:	bne	1ba60 <main@@Base+0x5984>
   1bb98:	str	r7, [sp]
   1bb9c:	mov	r0, r9
   1bba0:	mov	r1, r4
   1bba4:	mov	r2, r6
   1bba8:	mov	r3, #7
   1bbac:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1bbb0:	cmp	r0, r4
   1bbb4:	ldr	r3, [fp, #8]
   1bbb8:	beq	1ba60 <main@@Base+0x5984>
   1bbbc:	mov	r1, #0
   1bbc0:	mov	r2, #2
   1bbc4:	str	r2, [r3]
   1bbc8:	str	r1, [r3, #4]
   1bbcc:	b	1ba58 <main@@Base+0x597c>
   1bbd0:	push	{r4, r5, r6, r7, fp, lr}
   1bbd4:	add	fp, sp, #16
   1bbd8:	sub	sp, sp, #8
   1bbdc:	mov	r4, r3
   1bbe0:	mov	r6, r2
   1bbe4:	mov	r5, r1
   1bbe8:	mov	r7, r0
   1bbec:	sub	r0, r2, r1
   1bbf0:	cmp	r0, #4
   1bbf4:	blt	1bc30 <main@@Base+0x5b54>
   1bbf8:	ldr	r1, [r5]
   1bbfc:	movw	r2, #29300	; 0x7274
   1bc00:	movt	r2, #25973	; 0x6575
   1bc04:	cmp	r1, r2
   1bc08:	beq	1bc5c <main@@Base+0x5b80>
   1bc0c:	cmp	r0, #5
   1bc10:	blt	1bc30 <main@@Base+0x5b54>
   1bc14:	movw	r1, #21847	; 0x5557
   1bc18:	movt	r1, #3
   1bc1c:	mov	r0, r5
   1bc20:	mov	r2, #5
   1bc24:	bl	14e6c <memcmp@plt>
   1bc28:	cmp	r0, #0
   1bc2c:	beq	1bc70 <main@@Base+0x5b94>
   1bc30:	add	r3, sp, #7
   1bc34:	mov	r0, r7
   1bc38:	mov	r1, r5
   1bc3c:	mov	r2, r6
   1bc40:	bl	1aca8 <main@@Base+0x4bcc>
   1bc44:	ldrb	r1, [sp, #7]
   1bc48:	cmp	r1, #0
   1bc4c:	movwne	r1, #1
   1bc50:	strb	r1, [r4]
   1bc54:	sub	sp, fp, #16
   1bc58:	pop	{r4, r5, r6, r7, fp, pc}
   1bc5c:	mov	r0, #1
   1bc60:	strb	r0, [r4]
   1bc64:	add	r0, r5, #4
   1bc68:	sub	sp, fp, #16
   1bc6c:	pop	{r4, r5, r6, r7, fp, pc}
   1bc70:	mov	r0, #0
   1bc74:	strb	r0, [r4]
   1bc78:	add	r0, r5, #5
   1bc7c:	sub	sp, fp, #16
   1bc80:	pop	{r4, r5, r6, r7, fp, pc}
   1bc84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc88:	add	fp, sp, #28
   1bc8c:	sub	sp, sp, #36	; 0x24
   1bc90:	mov	r8, r3
   1bc94:	mov	r6, r2
   1bc98:	mov	r5, r0
   1bc9c:	mov	r0, #0
   1bca0:	strb	r0, [fp, #-29]	; 0xffffffe3
   1bca4:	ldr	sl, [fp, #8]
   1bca8:	strb	r0, [sl]
   1bcac:	mov	r0, r5
   1bcb0:	bl	1da30 <main@@Base+0x7954>
   1bcb4:	mov	r4, r0
   1bcb8:	cmp	r0, r6
   1bcbc:	beq	1bd84 <main@@Base+0x5ca8>
   1bcc0:	mov	r9, r8
   1bcc4:	ldr	r7, [r9]
   1bcc8:	add	r0, sp, #24
   1bccc:	str	r0, [sp]
   1bcd0:	add	r0, sp, #16
   1bcd4:	str	r0, [sp, #4]
   1bcd8:	mov	r0, r5
   1bcdc:	mov	r1, r4
   1bce0:	mov	r2, r6
   1bce4:	add	r3, sp, #20
   1bce8:	blx	r7
   1bcec:	mov	r7, r0
   1bcf0:	cmp	r0, r6
   1bcf4:	beq	1bd90 <main@@Base+0x5cb4>
   1bcf8:	cmp	r7, r4
   1bcfc:	beq	1bd58 <main@@Base+0x5c7c>
   1bd00:	ldr	r3, [sp, #20]
   1bd04:	ldr	r0, [sp, #24]
   1bd08:	ldr	r1, [sp, #28]
   1bd0c:	stm	sp, {r0, r1}
   1bd10:	sub	r0, fp, #29
   1bd14:	str	r0, [sp, #8]
   1bd18:	mov	r0, r5
   1bd1c:	mov	r1, r7
   1bd20:	mov	r2, r6
   1bd24:	bl	2070c <main@@Base+0xa630>
   1bd28:	cmp	r0, r6
   1bd2c:	beq	1bd8c <main@@Base+0x5cb0>
   1bd30:	ldrb	r0, [sl]
   1bd34:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1bd38:	add	r0, r0, r1
   1bd3c:	strb	r0, [sl]
   1bd40:	ldr	r0, [sp, #16]
   1bd44:	cmp	r0, #0
   1bd48:	mov	r4, r7
   1bd4c:	mov	r9, r8
   1bd50:	bne	1bcc4 <main@@Base+0x5be8>
   1bd54:	b	1bd90 <main@@Base+0x5cb4>
   1bd58:	ldr	r0, [r9, #4]!
   1bd5c:	cmp	r0, #0
   1bd60:	mov	r4, r7
   1bd64:	bne	1bcc4 <main@@Base+0x5be8>
   1bd68:	mov	r0, r5
   1bd6c:	mov	r1, r7
   1bd70:	mov	r2, r6
   1bd74:	mov	r3, #23
   1bd78:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1bd7c:	mov	r7, r0
   1bd80:	b	1bd90 <main@@Base+0x5cb4>
   1bd84:	mov	r7, r4
   1bd88:	b	1bd90 <main@@Base+0x5cb4>
   1bd8c:	mov	r7, r6
   1bd90:	mov	r0, r7
   1bd94:	sub	sp, fp, #28
   1bd98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd9c:	push	{r4, r5, fp, lr}
   1bda0:	add	fp, sp, #8
   1bda4:	mov	r4, r1
   1bda8:	mov	r5, r0
   1bdac:	mov	r0, r1
   1bdb0:	bl	20738 <main@@Base+0xa65c>
   1bdb4:	strb	r4, [r5]
   1bdb8:	pop	{r4, r5, fp, pc}
   1bdbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdc0:	add	fp, sp, #28
   1bdc4:	sub	sp, sp, #20
   1bdc8:	mov	r7, r3
   1bdcc:	mov	r4, r2
   1bdd0:	mov	r5, r0
   1bdd4:	add	r3, sp, #16
   1bdd8:	bl	19f88 <main@@Base+0x3eac>
   1bddc:	mov	r1, r0
   1bde0:	ldr	r0, [sp, #16]
   1bde4:	cmp	r0, #0
   1bde8:	beq	1bfdc <main@@Base+0x5f00>
   1bdec:	add	r0, r7, #4
   1bdf0:	str	r0, [sp, #4]
   1bdf4:	add	r8, sp, #12
   1bdf8:	mov	r0, r5
   1bdfc:	mov	r2, r4
   1be00:	bl	1a018 <main@@Base+0x3f3c>
   1be04:	mov	r6, r0
   1be08:	mov	r1, r4
   1be0c:	bl	1a060 <main@@Base+0x3f84>
   1be10:	mov	r2, r1
   1be14:	bfc	r2, #0, #16
   1be18:	movw	r3, #0
   1be1c:	movt	r3, #26980	; 0x6964
   1be20:	teq	r2, r3
   1be24:	bne	1beac <main@@Base+0x5dd0>
   1be28:	mov	r0, r5
   1be2c:	mov	r1, r6
   1be30:	mov	r2, r4
   1be34:	mov	r3, #2
   1be38:	bl	1a064 <main@@Base+0x3f88>
   1be3c:	mov	sl, r0
   1be40:	cmp	r6, r0
   1be44:	beq	1bf30 <main@@Base+0x5e54>
   1be48:	mov	r0, #0
   1be4c:	str	r0, [sp, #12]
   1be50:	mov	r0, r5
   1be54:	mov	r1, sl
   1be58:	mov	r2, r4
   1be5c:	mov	r3, r8
   1be60:	bl	1ca90 <main@@Base+0x69b4>
   1be64:	mov	r9, r0
   1be68:	cmp	sl, r0
   1be6c:	bne	1bea0 <main@@Base+0x5dc4>
   1be70:	str	r8, [sp]
   1be74:	mov	r0, r5
   1be78:	mov	r1, r9
   1be7c:	mov	r2, r4
   1be80:	movw	r3, #37652	; 0x9314
   1be84:	movt	r3, #4
   1be88:	bl	1cb20 <main@@Base+0x6a44>
   1be8c:	mov	r1, r0
   1be90:	cmp	r0, r9
   1be94:	cmpne	r1, r4
   1be98:	beq	1bfc8 <main@@Base+0x5eec>
   1be9c:	mov	r9, r1
   1bea0:	ldr	r1, [sp, #12]
   1bea4:	mov	r0, r7
   1bea8:	b	1bf9c <main@@Base+0x5ec0>
   1beac:	movw	r2, #25445	; 0x6365
   1beb0:	movt	r2, #24942	; 0x616e
   1beb4:	eor	r0, r0, r2
   1beb8:	movw	r2, #29556	; 0x7374
   1bebc:	movt	r2, #25705	; 0x6469
   1bec0:	eor	r1, r1, r2
   1bec4:	orrs	r0, r0, r1
   1bec8:	bne	1bf24 <main@@Base+0x5e48>
   1becc:	mov	sl, r7
   1bed0:	mov	r0, r5
   1bed4:	mov	r1, r6
   1bed8:	mov	r2, r4
   1bedc:	mov	r3, #8
   1bee0:	bl	1a064 <main@@Base+0x3f88>
   1bee4:	mov	r7, r0
   1bee8:	cmp	r6, r0
   1beec:	beq	1bf48 <main@@Base+0x5e6c>
   1bef0:	mov	r0, #0
   1bef4:	str	r0, [sp, #8]
   1bef8:	mov	r0, r5
   1befc:	mov	r1, r7
   1bf00:	mov	r2, r4
   1bf04:	add	r6, sp, #8
   1bf08:	mov	r3, r6
   1bf0c:	bl	1ca90 <main@@Base+0x69b4>
   1bf10:	mov	r9, r0
   1bf14:	cmp	r7, r0
   1bf18:	beq	1bf64 <main@@Base+0x5e88>
   1bf1c:	mov	r7, sl
   1bf20:	b	1bf98 <main@@Base+0x5ebc>
   1bf24:	mov	r0, r5
   1bf28:	mov	r1, r6
   1bf2c:	b	1bf38 <main@@Base+0x5e5c>
   1bf30:	mov	r0, r5
   1bf34:	mov	r1, sl
   1bf38:	mov	r2, r4
   1bf3c:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1bf40:	mov	r9, r0
   1bf44:	b	1bfa0 <main@@Base+0x5ec4>
   1bf48:	mov	r0, r5
   1bf4c:	mov	r1, r7
   1bf50:	mov	r2, r4
   1bf54:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1bf58:	mov	r9, r0
   1bf5c:	mov	r7, sl
   1bf60:	b	1bfa0 <main@@Base+0x5ec4>
   1bf64:	str	r6, [sp]
   1bf68:	mov	r0, r5
   1bf6c:	mov	r1, r9
   1bf70:	mov	r2, r4
   1bf74:	movw	r3, #37664	; 0x9320
   1bf78:	movt	r3, #4
   1bf7c:	bl	1cb20 <main@@Base+0x6a44>
   1bf80:	mov	r1, r0
   1bf84:	cmp	r0, r9
   1bf88:	cmpne	r1, r4
   1bf8c:	beq	1bfc8 <main@@Base+0x5eec>
   1bf90:	mov	r7, sl
   1bf94:	mov	r9, r1
   1bf98:	ldmib	sp, {r0, r1}
   1bf9c:	bl	1cc38 <main@@Base+0x6b5c>
   1bfa0:	mov	r0, r5
   1bfa4:	mov	r1, r9
   1bfa8:	mov	r2, r4
   1bfac:	add	r3, sp, #16
   1bfb0:	bl	1cf64 <main@@Base+0x6e88>
   1bfb4:	mov	r1, r0
   1bfb8:	ldr	r0, [sp, #16]
   1bfbc:	cmp	r0, #0
   1bfc0:	bne	1bdf8 <main@@Base+0x5d1c>
   1bfc4:	b	1bfdc <main@@Base+0x5f00>
   1bfc8:	mov	r0, r5
   1bfcc:	mov	r2, r4
   1bfd0:	mov	r3, #33	; 0x21
   1bfd4:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1bfd8:	mov	r1, r0
   1bfdc:	mov	r0, r1
   1bfe0:	sub	sp, fp, #28
   1bfe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfec:	add	fp, sp, #28
   1bff0:	sub	sp, sp, #20
   1bff4:	mov	r7, r3
   1bff8:	mov	r4, r2
   1bffc:	mov	r6, r1
   1c000:	mov	r5, r0
   1c004:	mov	r0, #0
   1c008:	str	r0, [r3]
   1c00c:	ldr	r0, [r5]
   1c010:	mov	r1, #3
   1c014:	bl	230c4 <flatcc_builder_start_table@@Base>
   1c018:	cmp	r0, #0
   1c01c:	bne	1c224 <main@@Base+0x6148>
   1c020:	add	r3, sp, #16
   1c024:	mov	r0, r5
   1c028:	mov	r1, r6
   1c02c:	mov	r2, r4
   1c030:	bl	19f88 <main@@Base+0x3eac>
   1c034:	mov	r6, r0
   1c038:	ldr	r0, [sp, #16]
   1c03c:	cmp	r0, #0
   1c040:	str	r7, [sp, #8]
   1c044:	beq	1c218 <main@@Base+0x613c>
   1c048:	movw	r7, #29556	; 0x7374
   1c04c:	movt	r7, #28261	; 0x6e65
   1c050:	movw	r8, #0
   1c054:	movt	r8, #25956	; 0x6564
   1c058:	movw	r9, #29793	; 0x7461
   1c05c:	movt	r9, #25697	; 0x6461
   1c060:	add	sl, sp, #16
   1c064:	mov	r0, r5
   1c068:	mov	r1, r6
   1c06c:	mov	r2, r4
   1c070:	bl	1a018 <main@@Base+0x3f3c>
   1c074:	mov	r6, r0
   1c078:	mov	r1, r4
   1c07c:	bl	1a060 <main@@Base+0x3f84>
   1c080:	subs	r2, r0, r8
   1c084:	sbcs	r2, r1, r7
   1c088:	bcs	1c0e8 <main@@Base+0x600c>
   1c08c:	teq	r1, r9
   1c090:	bne	1c1d8 <main@@Base+0x60fc>
   1c094:	mov	r0, r5
   1c098:	mov	r1, r6
   1c09c:	mov	r2, r4
   1c0a0:	mov	r3, #4
   1c0a4:	bl	1a064 <main@@Base+0x3f88>
   1c0a8:	mov	r1, r0
   1c0ac:	cmp	r6, r0
   1c0b0:	beq	1c1e4 <main@@Base+0x6108>
   1c0b4:	mov	r0, #0
   1c0b8:	str	r0, [sp]
   1c0bc:	mov	r0, r5
   1c0c0:	mov	r2, r4
   1c0c4:	add	r3, sp, #12
   1c0c8:	bl	27d34 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1c0cc:	mov	r6, r0
   1c0d0:	ldr	r0, [sp, #12]
   1c0d4:	cmp	r0, #0
   1c0d8:	beq	1c224 <main@@Base+0x6148>
   1c0dc:	ldr	r0, [r5]
   1c0e0:	mov	r1, #0
   1c0e4:	b	1c1c0 <main@@Base+0x60e4>
   1c0e8:	movw	r2, #29292	; 0x726c
   1c0ec:	movt	r2, #117	; 0x75
   1c0f0:	eor	r2, r2, r1, lsr #8
   1c0f4:	lsr	r3, r0, #8
   1c0f8:	orr	r3, r3, r1, lsl #24
   1c0fc:	eor	r3, r3, r9
   1c100:	orrs	r2, r3, r2
   1c104:	bne	1c15c <main@@Base+0x6080>
   1c108:	mov	r0, r5
   1c10c:	mov	r1, r6
   1c110:	mov	r2, r4
   1c114:	mov	r3, #7
   1c118:	bl	1a064 <main@@Base+0x3f88>
   1c11c:	mov	r1, r0
   1c120:	cmp	r6, r0
   1c124:	beq	1c1e4 <main@@Base+0x6108>
   1c128:	mov	r0, #1
   1c12c:	str	r0, [sp]
   1c130:	mov	r0, r5
   1c134:	mov	r2, r4
   1c138:	add	r3, sp, #12
   1c13c:	bl	27d34 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1c140:	mov	r6, r0
   1c144:	ldr	r0, [sp, #12]
   1c148:	cmp	r0, #0
   1c14c:	beq	1c224 <main@@Base+0x6148>
   1c150:	ldr	r0, [r5]
   1c154:	mov	r1, #1
   1c158:	b	1c1c0 <main@@Base+0x60e4>
   1c15c:	eor	r1, r1, r7
   1c160:	bfc	r0, #0, #16
   1c164:	eor	r0, r0, r8
   1c168:	orrs	r0, r0, r1
   1c16c:	bne	1c1d8 <main@@Base+0x60fc>
   1c170:	mov	r0, r5
   1c174:	mov	r1, r6
   1c178:	mov	r2, r4
   1c17c:	mov	r3, #6
   1c180:	bl	1a064 <main@@Base+0x3f88>
   1c184:	mov	r1, r0
   1c188:	cmp	r6, r0
   1c18c:	beq	1c1e4 <main@@Base+0x6108>
   1c190:	mov	r0, #0
   1c194:	str	r0, [sp]
   1c198:	mov	r0, r5
   1c19c:	mov	r2, r4
   1c1a0:	add	r3, sp, #12
   1c1a4:	bl	27d34 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1c1a8:	mov	r6, r0
   1c1ac:	ldr	r0, [sp, #12]
   1c1b0:	cmp	r0, #0
   1c1b4:	beq	1c224 <main@@Base+0x6148>
   1c1b8:	ldr	r0, [r5]
   1c1bc:	mov	r1, #2
   1c1c0:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   1c1c4:	cmp	r0, #0
   1c1c8:	beq	1c224 <main@@Base+0x6148>
   1c1cc:	ldr	r1, [sp, #12]
   1c1d0:	str	r1, [r0]
   1c1d4:	b	1c1f4 <main@@Base+0x6118>
   1c1d8:	mov	r0, r5
   1c1dc:	mov	r1, r6
   1c1e0:	b	1c1e8 <main@@Base+0x610c>
   1c1e4:	mov	r0, r5
   1c1e8:	mov	r2, r4
   1c1ec:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1c1f0:	mov	r6, r0
   1c1f4:	mov	r0, r5
   1c1f8:	mov	r1, r6
   1c1fc:	mov	r2, r4
   1c200:	mov	r3, sl
   1c204:	bl	1cf64 <main@@Base+0x6e88>
   1c208:	mov	r6, r0
   1c20c:	ldr	r0, [sp, #16]
   1c210:	cmp	r0, #0
   1c214:	bne	1c064 <main@@Base+0x5f88>
   1c218:	ldr	r0, [r5, #24]
   1c21c:	cmp	r0, #0
   1c220:	beq	1c248 <main@@Base+0x616c>
   1c224:	mov	r0, r5
   1c228:	mov	r1, r6
   1c22c:	mov	r2, r4
   1c230:	mov	r3, #33	; 0x21
   1c234:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1c238:	mov	r6, r0
   1c23c:	mov	r0, r6
   1c240:	sub	sp, fp, #28
   1c244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c248:	ldr	r0, [r5]
   1c24c:	bl	237e4 <flatcc_builder_end_table@@Base>
   1c250:	ldr	r1, [sp, #8]
   1c254:	str	r0, [r1]
   1c258:	cmp	r0, #0
   1c25c:	bne	1c23c <main@@Base+0x6160>
   1c260:	b	1c224 <main@@Base+0x6148>
   1c264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c268:	add	fp, sp, #28
   1c26c:	sub	sp, sp, #28
   1c270:	mov	r6, r3
   1c274:	mov	r4, r2
   1c278:	mov	sl, r1
   1c27c:	mov	r5, r0
   1c280:	mov	r0, #0
   1c284:	str	r0, [r3]
   1c288:	ldr	r0, [r5]
   1c28c:	mov	r1, #3
   1c290:	bl	230c4 <flatcc_builder_start_table@@Base>
   1c294:	cmp	r0, #0
   1c298:	beq	1c2c0 <main@@Base+0x61e4>
   1c29c:	mov	r0, r5
   1c2a0:	mov	r1, sl
   1c2a4:	mov	r2, r4
   1c2a8:	mov	r3, #33	; 0x21
   1c2ac:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1c2b0:	mov	sl, r0
   1c2b4:	mov	r0, sl
   1c2b8:	sub	sp, fp, #28
   1c2bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2c0:	str	r6, [sp, #4]
   1c2c4:	add	r3, sp, #24
   1c2c8:	mov	r0, r5
   1c2cc:	mov	r1, sl
   1c2d0:	mov	r2, r4
   1c2d4:	bl	19f88 <main@@Base+0x3eac>
   1c2d8:	mov	sl, r0
   1c2dc:	ldr	r0, [sp, #24]
   1c2e0:	cmp	r0, #0
   1c2e4:	beq	1c59c <main@@Base+0x64c0>
   1c2e8:	movw	r9, #65535	; 0xffff
   1c2ec:	movt	r9, #26979	; 0x6963
   1c2f0:	add	r8, sp, #24
   1c2f4:	mov	r0, r5
   1c2f8:	mov	r1, sl
   1c2fc:	mov	r2, r4
   1c300:	bl	1a018 <main@@Base+0x3f3c>
   1c304:	mov	r6, r0
   1c308:	mov	r1, r4
   1c30c:	bl	1a060 <main@@Base+0x3f84>
   1c310:	cmp	r1, r9
   1c314:	bhi	1c388 <main@@Base+0x62ac>
   1c318:	movw	r2, #30062	; 0x756e
   1c31c:	movt	r2, #25455	; 0x636f
   1c320:	eor	r1, r1, r2
   1c324:	and	r0, r0, #-16777216	; 0xff000000
   1c328:	eor	r0, r0, #1946157056	; 0x74000000
   1c32c:	orrs	r0, r0, r1
   1c330:	bne	1c468 <main@@Base+0x638c>
   1c334:	mov	r0, r5
   1c338:	mov	r1, r6
   1c33c:	mov	r2, r4
   1c340:	mov	r3, #5
   1c344:	bl	1a064 <main@@Base+0x3f88>
   1c348:	mov	r7, r0
   1c34c:	cmp	r6, r0
   1c350:	add	sl, sp, #8
   1c354:	beq	1c474 <main@@Base+0x6398>
   1c358:	mov	r0, #0
   1c35c:	strh	r0, [sp, #8]
   1c360:	mov	r0, r5
   1c364:	mov	r1, r7
   1c368:	mov	r2, r4
   1c36c:	mov	r3, sl
   1c370:	bl	20344 <main@@Base+0xa268>
   1c374:	mov	r6, r0
   1c378:	cmp	r7, r0
   1c37c:	beq	1c480 <main@@Base+0x63a4>
   1c380:	mov	sl, r6
   1c384:	b	1c4ac <main@@Base+0x63d0>
   1c388:	bic	r0, r1, #255	; 0xff
   1c38c:	movw	r2, #27648	; 0x6c00
   1c390:	movt	r2, #30305	; 0x7661
   1c394:	teq	r0, r2
   1c398:	add	sl, sp, #8
   1c39c:	bne	1c3f4 <main@@Base+0x6318>
   1c3a0:	mov	r0, r5
   1c3a4:	mov	r1, r6
   1c3a8:	mov	r2, r4
   1c3ac:	mov	r3, #3
   1c3b0:	bl	1a064 <main@@Base+0x3f88>
   1c3b4:	mov	r7, r0
   1c3b8:	cmp	r6, r0
   1c3bc:	beq	1c474 <main@@Base+0x6398>
   1c3c0:	mov	r0, #0
   1c3c4:	str	r0, [sp, #12]
   1c3c8:	str	r0, [sp, #8]
   1c3cc:	mov	r0, r5
   1c3d0:	mov	r1, r7
   1c3d4:	mov	r2, r4
   1c3d8:	mov	r3, sl
   1c3dc:	bl	1c8ac <main@@Base+0x67d0>
   1c3e0:	mov	r6, r0
   1c3e4:	cmp	r7, r0
   1c3e8:	beq	1c4ec <main@@Base+0x6410>
   1c3ec:	mov	sl, r6
   1c3f0:	b	1c518 <main@@Base+0x643c>
   1c3f4:	bfc	r1, #0, #16
   1c3f8:	movw	r0, #0
   1c3fc:	movt	r0, #26980	; 0x6964
   1c400:	teq	r1, r0
   1c404:	bne	1c468 <main@@Base+0x638c>
   1c408:	mov	r0, r5
   1c40c:	mov	r1, r6
   1c410:	mov	r2, r4
   1c414:	mov	r3, #2
   1c418:	bl	1a064 <main@@Base+0x3f88>
   1c41c:	mov	r1, r0
   1c420:	cmp	r6, r0
   1c424:	beq	1c568 <main@@Base+0x648c>
   1c428:	mov	r0, r5
   1c42c:	mov	r2, r4
   1c430:	add	r3, sp, #20
   1c434:	bl	280f4 <flatcc_json_parser_build_string@@Base>
   1c438:	mov	sl, r0
   1c43c:	ldr	r0, [sp, #20]
   1c440:	cmp	r0, #0
   1c444:	beq	1c29c <main@@Base+0x61c0>
   1c448:	ldr	r0, [r5]
   1c44c:	mov	r1, #0
   1c450:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   1c454:	cmp	r0, #0
   1c458:	beq	1c29c <main@@Base+0x61c0>
   1c45c:	ldr	r1, [sp, #20]
   1c460:	str	r1, [r0]
   1c464:	b	1c578 <main@@Base+0x649c>
   1c468:	mov	r0, r5
   1c46c:	mov	r1, r6
   1c470:	b	1c56c <main@@Base+0x6490>
   1c474:	mov	r0, r5
   1c478:	mov	r1, r7
   1c47c:	b	1c56c <main@@Base+0x6490>
   1c480:	str	sl, [sp]
   1c484:	mov	r0, r5
   1c488:	mov	r1, r6
   1c48c:	mov	r2, r4
   1c490:	movw	r3, #37676	; 0x932c
   1c494:	movt	r3, #4
   1c498:	bl	203d4 <main@@Base+0xa2f8>
   1c49c:	mov	sl, r0
   1c4a0:	cmp	r0, r6
   1c4a4:	cmpne	sl, r4
   1c4a8:	beq	1c29c <main@@Base+0x61c0>
   1c4ac:	ldrh	r6, [sp, #8]
   1c4b0:	cmp	r6, #0
   1c4b4:	bne	1c4c4 <main@@Base+0x63e8>
   1c4b8:	ldrb	r0, [r5, #8]
   1c4bc:	tst	r0, #2
   1c4c0:	beq	1c578 <main@@Base+0x649c>
   1c4c4:	ldr	r0, [r5]
   1c4c8:	mov	r1, #2
   1c4cc:	mov	r2, #2
   1c4d0:	mov	r3, #2
   1c4d4:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1c4d8:	cmp	r0, #0
   1c4dc:	beq	1c29c <main@@Base+0x61c0>
   1c4e0:	mov	r1, r6
   1c4e4:	bl	204ec <main@@Base+0xa410>
   1c4e8:	b	1c578 <main@@Base+0x649c>
   1c4ec:	str	sl, [sp]
   1c4f0:	mov	r0, r5
   1c4f4:	mov	r1, r6
   1c4f8:	mov	r2, r4
   1c4fc:	movw	r3, #37688	; 0x9338
   1c500:	movt	r3, #4
   1c504:	bl	1c940 <main@@Base+0x6864>
   1c508:	mov	sl, r0
   1c50c:	cmp	r0, r6
   1c510:	cmpne	sl, r4
   1c514:	beq	1c29c <main@@Base+0x61c0>
   1c518:	mov	r7, r9
   1c51c:	ldr	r6, [sp, #8]
   1c520:	ldr	r9, [sp, #12]
   1c524:	orrs	r0, r6, r9
   1c528:	bne	1c538 <main@@Base+0x645c>
   1c52c:	ldrb	r0, [r5, #8]
   1c530:	tst	r0, #2
   1c534:	beq	1c560 <main@@Base+0x6484>
   1c538:	ldr	r0, [r5]
   1c53c:	mov	r1, #1
   1c540:	mov	r2, #8
   1c544:	mov	r3, #8
   1c548:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1c54c:	cmp	r0, #0
   1c550:	beq	1c29c <main@@Base+0x61c0>
   1c554:	mov	r2, r6
   1c558:	mov	r3, r9
   1c55c:	bl	1ca68 <main@@Base+0x698c>
   1c560:	mov	r9, r7
   1c564:	b	1c578 <main@@Base+0x649c>
   1c568:	mov	r0, r5
   1c56c:	mov	r2, r4
   1c570:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1c574:	mov	sl, r0
   1c578:	mov	r0, r5
   1c57c:	mov	r1, sl
   1c580:	mov	r2, r4
   1c584:	mov	r3, r8
   1c588:	bl	1cf64 <main@@Base+0x6e88>
   1c58c:	mov	sl, r0
   1c590:	ldr	r0, [sp, #24]
   1c594:	cmp	r0, #0
   1c598:	bne	1c2f4 <main@@Base+0x6218>
   1c59c:	ldr	r0, [r5, #24]
   1c5a0:	cmp	r0, #0
   1c5a4:	bne	1c29c <main@@Base+0x61c0>
   1c5a8:	ldr	r0, [r5]
   1c5ac:	bl	237e4 <flatcc_builder_end_table@@Base>
   1c5b0:	ldr	r1, [sp, #4]
   1c5b4:	str	r0, [r1]
   1c5b8:	cmp	r0, #0
   1c5bc:	bne	1c2b4 <main@@Base+0x61d8>
   1c5c0:	b	1c29c <main@@Base+0x61c0>
   1c5c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5c8:	add	fp, sp, #28
   1c5cc:	sub	sp, sp, #28
   1c5d0:	mov	r8, r3
   1c5d4:	mov	r7, r2
   1c5d8:	mov	r5, r0
   1c5dc:	mov	r0, #0
   1c5e0:	str	r0, [sp, #24]
   1c5e4:	ldr	sl, [fp, #8]
   1c5e8:	str	r0, [sl]
   1c5ec:	mov	r0, r5
   1c5f0:	bl	1da30 <main@@Base+0x7954>
   1c5f4:	mov	r6, r0
   1c5f8:	cmp	r0, r7
   1c5fc:	beq	1c6b4 <main@@Base+0x65d8>
   1c600:	mov	r9, r8
   1c604:	ldr	r4, [r9]
   1c608:	add	r0, sp, #16
   1c60c:	str	r0, [sp]
   1c610:	add	r0, sp, #8
   1c614:	str	r0, [sp, #4]
   1c618:	mov	r0, r5
   1c61c:	mov	r1, r6
   1c620:	mov	r2, r7
   1c624:	add	r3, sp, #12
   1c628:	blx	r4
   1c62c:	mov	r4, r0
   1c630:	cmp	r0, r7
   1c634:	beq	1c6c0 <main@@Base+0x65e4>
   1c638:	cmp	r4, r6
   1c63c:	beq	1c688 <main@@Base+0x65ac>
   1c640:	add	r3, sp, #12
   1c644:	ldm	r3, {r1, r2, r3}
   1c648:	add	r0, sp, #24
   1c64c:	str	r0, [sp]
   1c650:	mov	r0, r4
   1c654:	bl	2073c <main@@Base+0xa660>
   1c658:	cmp	r4, r7
   1c65c:	beq	1c6bc <main@@Base+0x65e0>
   1c660:	vldr	s0, [sp, #24]
   1c664:	vldr	s2, [sl]
   1c668:	vadd.f32	s0, s0, s2
   1c66c:	vstr	s0, [sl]
   1c670:	ldr	r0, [sp, #8]
   1c674:	cmp	r0, #0
   1c678:	mov	r6, r4
   1c67c:	mov	r9, r8
   1c680:	bne	1c604 <main@@Base+0x6528>
   1c684:	b	1c6c0 <main@@Base+0x65e4>
   1c688:	ldr	r0, [r9, #4]!
   1c68c:	cmp	r0, #0
   1c690:	mov	r6, r4
   1c694:	bne	1c604 <main@@Base+0x6528>
   1c698:	mov	r0, r5
   1c69c:	mov	r1, r4
   1c6a0:	mov	r2, r7
   1c6a4:	mov	r3, #23
   1c6a8:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1c6ac:	mov	r4, r0
   1c6b0:	b	1c6c0 <main@@Base+0x65e4>
   1c6b4:	mov	r4, r6
   1c6b8:	b	1c6c0 <main@@Base+0x65e4>
   1c6bc:	mov	r4, r7
   1c6c0:	mov	r0, r4
   1c6c4:	sub	sp, fp, #28
   1c6c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6cc:	push	{r4, sl, fp, lr}
   1c6d0:	add	fp, sp, #8
   1c6d4:	mov	r4, r0
   1c6d8:	bl	20778 <main@@Base+0xa69c>
   1c6dc:	vstr	s0, [r4]
   1c6e0:	pop	{r4, sl, fp, pc}
   1c6e4:	push	{r4, r5, r6, r7, fp, lr}
   1c6e8:	add	fp, sp, #16
   1c6ec:	sub	sp, sp, #24
   1c6f0:	mov	r7, r1
   1c6f4:	mov	r6, r0
   1c6f8:	mov	r0, #0
   1c6fc:	str	r0, [sp, #20]
   1c700:	str	r0, [sp, #16]
   1c704:	str	r0, [sp, #12]
   1c708:	str	r0, [r3]
   1c70c:	cmp	r1, r2
   1c710:	beq	1c768 <main@@Base+0x668c>
   1c714:	mov	r5, r3
   1c718:	mov	r4, r2
   1c71c:	add	r0, sp, #16
   1c720:	str	r0, [sp]
   1c724:	add	r3, sp, #12
   1c728:	mov	r0, r6
   1c72c:	mov	r1, r7
   1c730:	bl	27c14 <flatcc_json_parser_integer@@Base>
   1c734:	mov	r1, r0
   1c738:	cmp	r0, r7
   1c73c:	beq	1c764 <main@@Base+0x6688>
   1c740:	ldr	r3, [sp, #12]
   1c744:	ldr	r0, [sp, #16]
   1c748:	ldr	r2, [sp, #20]
   1c74c:	stm	sp, {r0, r2, r5}
   1c750:	mov	r0, r6
   1c754:	mov	r2, r4
   1c758:	bl	2077c <main@@Base+0xa6a0>
   1c75c:	mov	r7, r0
   1c760:	b	1c768 <main@@Base+0x668c>
   1c764:	mov	r7, r1
   1c768:	mov	r0, r7
   1c76c:	sub	sp, fp, #16
   1c770:	pop	{r4, r5, r6, r7, fp, pc}
   1c774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c778:	add	fp, sp, #28
   1c77c:	sub	sp, sp, #36	; 0x24
   1c780:	mov	r8, r3
   1c784:	mov	r6, r2
   1c788:	mov	r5, r0
   1c78c:	mov	r0, #0
   1c790:	str	r0, [sp, #32]
   1c794:	ldr	sl, [fp, #8]
   1c798:	str	r0, [sl]
   1c79c:	mov	r0, r5
   1c7a0:	bl	1da30 <main@@Base+0x7954>
   1c7a4:	mov	r4, r0
   1c7a8:	cmp	r0, r6
   1c7ac:	beq	1c874 <main@@Base+0x6798>
   1c7b0:	mov	r9, r8
   1c7b4:	ldr	r7, [r9]
   1c7b8:	add	r0, sp, #24
   1c7bc:	str	r0, [sp]
   1c7c0:	add	r0, sp, #16
   1c7c4:	str	r0, [sp, #4]
   1c7c8:	mov	r0, r5
   1c7cc:	mov	r1, r4
   1c7d0:	mov	r2, r6
   1c7d4:	add	r3, sp, #20
   1c7d8:	blx	r7
   1c7dc:	mov	r7, r0
   1c7e0:	cmp	r0, r6
   1c7e4:	beq	1c880 <main@@Base+0x67a4>
   1c7e8:	cmp	r7, r4
   1c7ec:	beq	1c848 <main@@Base+0x676c>
   1c7f0:	ldr	r3, [sp, #20]
   1c7f4:	ldr	r0, [sp, #24]
   1c7f8:	ldr	r1, [sp, #28]
   1c7fc:	stm	sp, {r0, r1}
   1c800:	add	r0, sp, #32
   1c804:	str	r0, [sp, #8]
   1c808:	mov	r0, r5
   1c80c:	mov	r1, r7
   1c810:	mov	r2, r6
   1c814:	bl	2077c <main@@Base+0xa6a0>
   1c818:	cmp	r0, r6
   1c81c:	beq	1c87c <main@@Base+0x67a0>
   1c820:	ldr	r0, [sl]
   1c824:	ldr	r1, [sp, #32]
   1c828:	add	r0, r0, r1
   1c82c:	str	r0, [sl]
   1c830:	ldr	r0, [sp, #16]
   1c834:	cmp	r0, #0
   1c838:	mov	r4, r7
   1c83c:	mov	r9, r8
   1c840:	bne	1c7b4 <main@@Base+0x66d8>
   1c844:	b	1c880 <main@@Base+0x67a4>
   1c848:	ldr	r0, [r9, #4]!
   1c84c:	cmp	r0, #0
   1c850:	mov	r4, r7
   1c854:	bne	1c7b4 <main@@Base+0x66d8>
   1c858:	mov	r0, r5
   1c85c:	mov	r1, r7
   1c860:	mov	r2, r6
   1c864:	mov	r3, #23
   1c868:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1c86c:	mov	r7, r0
   1c870:	b	1c880 <main@@Base+0x67a4>
   1c874:	mov	r7, r4
   1c878:	b	1c880 <main@@Base+0x67a4>
   1c87c:	mov	r7, r6
   1c880:	mov	r0, r7
   1c884:	sub	sp, fp, #28
   1c888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c88c:	push	{r4, r5, fp, lr}
   1c890:	add	fp, sp, #8
   1c894:	mov	r4, r1
   1c898:	mov	r5, r0
   1c89c:	mov	r0, r1
   1c8a0:	bl	207d8 <main@@Base+0xa6fc>
   1c8a4:	str	r4, [r5]
   1c8a8:	pop	{r4, r5, fp, pc}
   1c8ac:	push	{r4, r5, r6, r7, fp, lr}
   1c8b0:	add	fp, sp, #16
   1c8b4:	sub	sp, sp, #24
   1c8b8:	mov	r7, r1
   1c8bc:	mov	r6, r0
   1c8c0:	mov	r0, #0
   1c8c4:	str	r0, [sp, #20]
   1c8c8:	str	r0, [sp, #16]
   1c8cc:	str	r0, [sp, #12]
   1c8d0:	str	r0, [r3]
   1c8d4:	str	r0, [r3, #4]
   1c8d8:	cmp	r1, r2
   1c8dc:	beq	1c934 <main@@Base+0x6858>
   1c8e0:	mov	r5, r3
   1c8e4:	mov	r4, r2
   1c8e8:	add	r0, sp, #16
   1c8ec:	str	r0, [sp]
   1c8f0:	add	r3, sp, #12
   1c8f4:	mov	r0, r6
   1c8f8:	mov	r1, r7
   1c8fc:	bl	27c14 <flatcc_json_parser_integer@@Base>
   1c900:	mov	r1, r0
   1c904:	cmp	r0, r7
   1c908:	beq	1c930 <main@@Base+0x6854>
   1c90c:	ldr	r3, [sp, #12]
   1c910:	ldr	r0, [sp, #16]
   1c914:	ldr	r2, [sp, #20]
   1c918:	stm	sp, {r0, r2, r5}
   1c91c:	mov	r0, r6
   1c920:	mov	r2, r4
   1c924:	bl	207dc <main@@Base+0xa700>
   1c928:	mov	r7, r0
   1c92c:	b	1c934 <main@@Base+0x6858>
   1c930:	mov	r7, r1
   1c934:	mov	r0, r7
   1c938:	sub	sp, fp, #16
   1c93c:	pop	{r4, r5, r6, r7, fp, pc}
   1c940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c944:	add	fp, sp, #28
   1c948:	sub	sp, sp, #44	; 0x2c
   1c94c:	mov	r8, r3
   1c950:	mov	r6, r2
   1c954:	mov	r5, r0
   1c958:	mov	r0, #0
   1c95c:	str	r0, [sp, #36]	; 0x24
   1c960:	str	r0, [sp, #32]
   1c964:	ldr	sl, [fp, #8]
   1c968:	str	r0, [sl]
   1c96c:	str	r0, [sl, #4]
   1c970:	mov	r0, r5
   1c974:	bl	1da30 <main@@Base+0x7954>
   1c978:	mov	r4, r0
   1c97c:	cmp	r0, r6
   1c980:	beq	1ca50 <main@@Base+0x6974>
   1c984:	mov	r9, r8
   1c988:	ldr	r7, [r9]
   1c98c:	add	r0, sp, #24
   1c990:	str	r0, [sp]
   1c994:	add	r0, sp, #16
   1c998:	str	r0, [sp, #4]
   1c99c:	mov	r0, r5
   1c9a0:	mov	r1, r4
   1c9a4:	mov	r2, r6
   1c9a8:	add	r3, sp, #20
   1c9ac:	blx	r7
   1c9b0:	mov	r7, r0
   1c9b4:	cmp	r0, r6
   1c9b8:	beq	1ca5c <main@@Base+0x6980>
   1c9bc:	cmp	r7, r4
   1c9c0:	beq	1ca24 <main@@Base+0x6948>
   1c9c4:	ldr	r3, [sp, #20]
   1c9c8:	ldr	r0, [sp, #24]
   1c9cc:	ldr	r1, [sp, #28]
   1c9d0:	stm	sp, {r0, r1}
   1c9d4:	add	r0, sp, #32
   1c9d8:	str	r0, [sp, #8]
   1c9dc:	mov	r0, r5
   1c9e0:	mov	r1, r7
   1c9e4:	mov	r2, r6
   1c9e8:	bl	207dc <main@@Base+0xa700>
   1c9ec:	cmp	r0, r6
   1c9f0:	beq	1ca58 <main@@Base+0x697c>
   1c9f4:	ldrd	r0, [sl]
   1c9f8:	ldr	r2, [sp, #32]
   1c9fc:	ldr	r3, [sp, #36]	; 0x24
   1ca00:	adds	r0, r0, r2
   1ca04:	adc	r1, r1, r3
   1ca08:	strd	r0, [sl]
   1ca0c:	ldr	r0, [sp, #16]
   1ca10:	cmp	r0, #0
   1ca14:	mov	r4, r7
   1ca18:	mov	r9, r8
   1ca1c:	bne	1c988 <main@@Base+0x68ac>
   1ca20:	b	1ca5c <main@@Base+0x6980>
   1ca24:	ldr	r0, [r9, #4]!
   1ca28:	cmp	r0, #0
   1ca2c:	mov	r4, r7
   1ca30:	bne	1c988 <main@@Base+0x68ac>
   1ca34:	mov	r0, r5
   1ca38:	mov	r1, r7
   1ca3c:	mov	r2, r6
   1ca40:	mov	r3, #23
   1ca44:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1ca48:	mov	r7, r0
   1ca4c:	b	1ca5c <main@@Base+0x6980>
   1ca50:	mov	r7, r4
   1ca54:	b	1ca5c <main@@Base+0x6980>
   1ca58:	mov	r7, r6
   1ca5c:	mov	r0, r7
   1ca60:	sub	sp, fp, #28
   1ca64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca68:	push	{r4, r6, r7, sl, fp, lr}
   1ca6c:	add	fp, sp, #16
   1ca70:	mov	r1, r3
   1ca74:	mov	r6, r2
   1ca78:	mov	r4, r0
   1ca7c:	mov	r0, r2
   1ca80:	bl	20834 <main@@Base+0xa758>
   1ca84:	mov	r7, r1
   1ca88:	strd	r6, [r4]
   1ca8c:	pop	{r4, r6, r7, sl, fp, pc}
   1ca90:	push	{r4, r5, r6, r7, fp, lr}
   1ca94:	add	fp, sp, #16
   1ca98:	sub	sp, sp, #24
   1ca9c:	mov	r7, r1
   1caa0:	mov	r6, r0
   1caa4:	mov	r0, #0
   1caa8:	str	r0, [sp, #20]
   1caac:	str	r0, [sp, #16]
   1cab0:	str	r0, [sp, #12]
   1cab4:	str	r0, [r3]
   1cab8:	cmp	r1, r2
   1cabc:	beq	1cb14 <main@@Base+0x6a38>
   1cac0:	mov	r5, r3
   1cac4:	mov	r4, r2
   1cac8:	add	r0, sp, #16
   1cacc:	str	r0, [sp]
   1cad0:	add	r3, sp, #12
   1cad4:	mov	r0, r6
   1cad8:	mov	r1, r7
   1cadc:	bl	27c14 <flatcc_json_parser_integer@@Base>
   1cae0:	mov	r1, r0
   1cae4:	cmp	r0, r7
   1cae8:	beq	1cb10 <main@@Base+0x6a34>
   1caec:	ldr	r3, [sp, #12]
   1caf0:	ldr	r0, [sp, #16]
   1caf4:	ldr	r2, [sp, #20]
   1caf8:	stm	sp, {r0, r2, r5}
   1cafc:	mov	r0, r6
   1cb00:	mov	r2, r4
   1cb04:	bl	20838 <main@@Base+0xa75c>
   1cb08:	mov	r7, r0
   1cb0c:	b	1cb14 <main@@Base+0x6a38>
   1cb10:	mov	r7, r1
   1cb14:	mov	r0, r7
   1cb18:	sub	sp, fp, #16
   1cb1c:	pop	{r4, r5, r6, r7, fp, pc}
   1cb20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb24:	add	fp, sp, #28
   1cb28:	sub	sp, sp, #36	; 0x24
   1cb2c:	mov	r8, r3
   1cb30:	mov	r6, r2
   1cb34:	mov	r5, r0
   1cb38:	mov	r0, #0
   1cb3c:	str	r0, [sp, #32]
   1cb40:	ldr	sl, [fp, #8]
   1cb44:	str	r0, [sl]
   1cb48:	mov	r0, r5
   1cb4c:	bl	1da30 <main@@Base+0x7954>
   1cb50:	mov	r4, r0
   1cb54:	cmp	r0, r6
   1cb58:	beq	1cc20 <main@@Base+0x6b44>
   1cb5c:	mov	r9, r8
   1cb60:	ldr	r7, [r9]
   1cb64:	add	r0, sp, #24
   1cb68:	str	r0, [sp]
   1cb6c:	add	r0, sp, #16
   1cb70:	str	r0, [sp, #4]
   1cb74:	mov	r0, r5
   1cb78:	mov	r1, r4
   1cb7c:	mov	r2, r6
   1cb80:	add	r3, sp, #20
   1cb84:	blx	r7
   1cb88:	mov	r7, r0
   1cb8c:	cmp	r0, r6
   1cb90:	beq	1cc2c <main@@Base+0x6b50>
   1cb94:	cmp	r7, r4
   1cb98:	beq	1cbf4 <main@@Base+0x6b18>
   1cb9c:	ldr	r3, [sp, #20]
   1cba0:	ldr	r0, [sp, #24]
   1cba4:	ldr	r1, [sp, #28]
   1cba8:	stm	sp, {r0, r1}
   1cbac:	add	r0, sp, #32
   1cbb0:	str	r0, [sp, #8]
   1cbb4:	mov	r0, r5
   1cbb8:	mov	r1, r7
   1cbbc:	mov	r2, r6
   1cbc0:	bl	20838 <main@@Base+0xa75c>
   1cbc4:	cmp	r0, r6
   1cbc8:	beq	1cc28 <main@@Base+0x6b4c>
   1cbcc:	ldr	r0, [sl]
   1cbd0:	ldr	r1, [sp, #32]
   1cbd4:	add	r0, r0, r1
   1cbd8:	str	r0, [sl]
   1cbdc:	ldr	r0, [sp, #16]
   1cbe0:	cmp	r0, #0
   1cbe4:	mov	r4, r7
   1cbe8:	mov	r9, r8
   1cbec:	bne	1cb60 <main@@Base+0x6a84>
   1cbf0:	b	1cc2c <main@@Base+0x6b50>
   1cbf4:	ldr	r0, [r9, #4]!
   1cbf8:	cmp	r0, #0
   1cbfc:	mov	r4, r7
   1cc00:	bne	1cb60 <main@@Base+0x6a84>
   1cc04:	mov	r0, r5
   1cc08:	mov	r1, r7
   1cc0c:	mov	r2, r6
   1cc10:	mov	r3, #23
   1cc14:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1cc18:	mov	r7, r0
   1cc1c:	b	1cc2c <main@@Base+0x6b50>
   1cc20:	mov	r7, r4
   1cc24:	b	1cc2c <main@@Base+0x6b50>
   1cc28:	mov	r7, r6
   1cc2c:	mov	r0, r7
   1cc30:	sub	sp, fp, #28
   1cc34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc38:	push	{r4, r5, fp, lr}
   1cc3c:	add	fp, sp, #8
   1cc40:	mov	r4, r1
   1cc44:	mov	r5, r0
   1cc48:	mov	r0, r1
   1cc4c:	bl	20870 <main@@Base+0xa794>
   1cc50:	str	r4, [r5]
   1cc54:	pop	{r4, r5, fp, pc}
   1cc58:	push	{r4, r5, r6, r7, fp, lr}
   1cc5c:	add	fp, sp, #16
   1cc60:	sub	sp, sp, #24
   1cc64:	mov	r7, r1
   1cc68:	mov	r6, r0
   1cc6c:	mov	r0, #0
   1cc70:	str	r0, [sp, #20]
   1cc74:	str	r0, [sp, #16]
   1cc78:	str	r0, [sp, #12]
   1cc7c:	str	r0, [r3]
   1cc80:	str	r0, [r3, #4]
   1cc84:	cmp	r1, r2
   1cc88:	beq	1cce0 <main@@Base+0x6c04>
   1cc8c:	mov	r5, r3
   1cc90:	mov	r4, r2
   1cc94:	add	r0, sp, #16
   1cc98:	str	r0, [sp]
   1cc9c:	add	r3, sp, #12
   1cca0:	mov	r0, r6
   1cca4:	mov	r1, r7
   1cca8:	bl	27c14 <flatcc_json_parser_integer@@Base>
   1ccac:	mov	r1, r0
   1ccb0:	cmp	r0, r7
   1ccb4:	beq	1ccdc <main@@Base+0x6c00>
   1ccb8:	ldr	r3, [sp, #12]
   1ccbc:	ldr	r0, [sp, #16]
   1ccc0:	ldr	r2, [sp, #20]
   1ccc4:	stm	sp, {r0, r2, r5}
   1ccc8:	mov	r0, r6
   1cccc:	mov	r2, r4
   1ccd0:	bl	20874 <main@@Base+0xa798>
   1ccd4:	mov	r7, r0
   1ccd8:	b	1cce0 <main@@Base+0x6c04>
   1ccdc:	mov	r7, r1
   1cce0:	mov	r0, r7
   1cce4:	sub	sp, fp, #16
   1cce8:	pop	{r4, r5, r6, r7, fp, pc}
   1ccec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccf0:	add	fp, sp, #28
   1ccf4:	sub	sp, sp, #44	; 0x2c
   1ccf8:	mov	r8, r3
   1ccfc:	mov	r6, r2
   1cd00:	mov	r5, r0
   1cd04:	mov	r0, #0
   1cd08:	str	r0, [sp, #36]	; 0x24
   1cd0c:	str	r0, [sp, #32]
   1cd10:	ldr	sl, [fp, #8]
   1cd14:	str	r0, [sl]
   1cd18:	str	r0, [sl, #4]
   1cd1c:	mov	r0, r5
   1cd20:	bl	1da30 <main@@Base+0x7954>
   1cd24:	mov	r4, r0
   1cd28:	cmp	r0, r6
   1cd2c:	beq	1cdfc <main@@Base+0x6d20>
   1cd30:	mov	r9, r8
   1cd34:	ldr	r7, [r9]
   1cd38:	add	r0, sp, #24
   1cd3c:	str	r0, [sp]
   1cd40:	add	r0, sp, #16
   1cd44:	str	r0, [sp, #4]
   1cd48:	mov	r0, r5
   1cd4c:	mov	r1, r4
   1cd50:	mov	r2, r6
   1cd54:	add	r3, sp, #20
   1cd58:	blx	r7
   1cd5c:	mov	r7, r0
   1cd60:	cmp	r0, r6
   1cd64:	beq	1ce08 <main@@Base+0x6d2c>
   1cd68:	cmp	r7, r4
   1cd6c:	beq	1cdd0 <main@@Base+0x6cf4>
   1cd70:	ldr	r3, [sp, #20]
   1cd74:	ldr	r0, [sp, #24]
   1cd78:	ldr	r1, [sp, #28]
   1cd7c:	stm	sp, {r0, r1}
   1cd80:	add	r0, sp, #32
   1cd84:	str	r0, [sp, #8]
   1cd88:	mov	r0, r5
   1cd8c:	mov	r1, r7
   1cd90:	mov	r2, r6
   1cd94:	bl	20874 <main@@Base+0xa798>
   1cd98:	cmp	r0, r6
   1cd9c:	beq	1ce04 <main@@Base+0x6d28>
   1cda0:	ldrd	r0, [sl]
   1cda4:	ldr	r2, [sp, #32]
   1cda8:	ldr	r3, [sp, #36]	; 0x24
   1cdac:	adds	r0, r0, r2
   1cdb0:	adc	r1, r1, r3
   1cdb4:	strd	r0, [sl]
   1cdb8:	ldr	r0, [sp, #16]
   1cdbc:	cmp	r0, #0
   1cdc0:	mov	r4, r7
   1cdc4:	mov	r9, r8
   1cdc8:	bne	1cd34 <main@@Base+0x6c58>
   1cdcc:	b	1ce08 <main@@Base+0x6d2c>
   1cdd0:	ldr	r0, [r9, #4]!
   1cdd4:	cmp	r0, #0
   1cdd8:	mov	r4, r7
   1cddc:	bne	1cd34 <main@@Base+0x6c58>
   1cde0:	mov	r0, r5
   1cde4:	mov	r1, r7
   1cde8:	mov	r2, r6
   1cdec:	mov	r3, #23
   1cdf0:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1cdf4:	mov	r7, r0
   1cdf8:	b	1ce08 <main@@Base+0x6d2c>
   1cdfc:	mov	r7, r4
   1ce00:	b	1ce08 <main@@Base+0x6d2c>
   1ce04:	mov	r7, r6
   1ce08:	mov	r0, r7
   1ce0c:	sub	sp, fp, #28
   1ce10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce14:	push	{r4, r6, r7, sl, fp, lr}
   1ce18:	add	fp, sp, #16
   1ce1c:	mov	r1, r3
   1ce20:	mov	r6, r2
   1ce24:	mov	r4, r0
   1ce28:	mov	r0, r2
   1ce2c:	bl	20898 <main@@Base+0xa7bc>
   1ce30:	mov	r7, r1
   1ce34:	strd	r6, [r4]
   1ce38:	pop	{r4, r6, r7, sl, fp, pc}
   1ce3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce40:	add	fp, sp, #28
   1ce44:	sub	sp, sp, #36	; 0x24
   1ce48:	mov	r8, r3
   1ce4c:	mov	r7, r2
   1ce50:	mov	r5, r0
   1ce54:	mov	r0, #0
   1ce58:	str	r0, [sp, #28]
   1ce5c:	str	r0, [sp, #24]
   1ce60:	ldr	sl, [fp, #8]
   1ce64:	str	r0, [sl]
   1ce68:	str	r0, [sl, #4]
   1ce6c:	mov	r0, r5
   1ce70:	bl	1da30 <main@@Base+0x7954>
   1ce74:	mov	r6, r0
   1ce78:	cmp	r0, r7
   1ce7c:	beq	1cf34 <main@@Base+0x6e58>
   1ce80:	mov	r9, r8
   1ce84:	ldr	r4, [r9]
   1ce88:	add	r0, sp, #16
   1ce8c:	str	r0, [sp]
   1ce90:	add	r0, sp, #8
   1ce94:	str	r0, [sp, #4]
   1ce98:	mov	r0, r5
   1ce9c:	mov	r1, r6
   1cea0:	mov	r2, r7
   1cea4:	add	r3, sp, #12
   1cea8:	blx	r4
   1ceac:	mov	r4, r0
   1ceb0:	cmp	r0, r7
   1ceb4:	beq	1cf40 <main@@Base+0x6e64>
   1ceb8:	cmp	r4, r6
   1cebc:	beq	1cf08 <main@@Base+0x6e2c>
   1cec0:	add	r3, sp, #12
   1cec4:	ldm	r3, {r1, r2, r3}
   1cec8:	add	r0, sp, #24
   1cecc:	str	r0, [sp]
   1ced0:	mov	r0, r4
   1ced4:	bl	2089c <main@@Base+0xa7c0>
   1ced8:	cmp	r4, r7
   1cedc:	beq	1cf3c <main@@Base+0x6e60>
   1cee0:	vldr	d16, [sp, #24]
   1cee4:	vldr	d17, [sl]
   1cee8:	vadd.f64	d16, d16, d17
   1ceec:	vstr	d16, [sl]
   1cef0:	ldr	r0, [sp, #8]
   1cef4:	cmp	r0, #0
   1cef8:	mov	r6, r4
   1cefc:	mov	r9, r8
   1cf00:	bne	1ce84 <main@@Base+0x6da8>
   1cf04:	b	1cf40 <main@@Base+0x6e64>
   1cf08:	ldr	r0, [r9, #4]!
   1cf0c:	cmp	r0, #0
   1cf10:	mov	r6, r4
   1cf14:	bne	1ce84 <main@@Base+0x6da8>
   1cf18:	mov	r0, r5
   1cf1c:	mov	r1, r4
   1cf20:	mov	r2, r7
   1cf24:	mov	r3, #23
   1cf28:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1cf2c:	mov	r4, r0
   1cf30:	b	1cf40 <main@@Base+0x6e64>
   1cf34:	mov	r4, r6
   1cf38:	b	1cf40 <main@@Base+0x6e64>
   1cf3c:	mov	r4, r7
   1cf40:	mov	r0, r4
   1cf44:	sub	sp, fp, #28
   1cf48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf4c:	push	{r4, sl, fp, lr}
   1cf50:	add	fp, sp, #8
   1cf54:	mov	r4, r0
   1cf58:	bl	208dc <main@@Base+0xa800>
   1cf5c:	vstr	d0, [r4]
   1cf60:	pop	{r4, sl, fp, pc}
   1cf64:	push	{r4, r5, r6, sl, fp, lr}
   1cf68:	add	fp, sp, #16
   1cf6c:	mov	r6, r3
   1cf70:	mov	r4, r2
   1cf74:	mov	r5, r0
   1cf78:	bl	1d024 <main@@Base+0x6f48>
   1cf7c:	mov	r1, r0
   1cf80:	cmp	r0, r4
   1cf84:	beq	1cfc8 <main@@Base+0x6eec>
   1cf88:	ldrb	r0, [r1]
   1cf8c:	cmp	r0, #44	; 0x2c
   1cf90:	bne	1cfd0 <main@@Base+0x6ef4>
   1cf94:	add	r1, r1, #1
   1cf98:	mov	r0, r5
   1cf9c:	mov	r2, r4
   1cfa0:	bl	1d024 <main@@Base+0x6f48>
   1cfa4:	mov	r1, r0
   1cfa8:	cmp	r0, r4
   1cfac:	beq	1cff8 <main@@Base+0x6f1c>
   1cfb0:	ldrb	r0, [r1]
   1cfb4:	cmp	r0, #125	; 0x7d
   1cfb8:	bne	1d014 <main@@Base+0x6f38>
   1cfbc:	mov	r0, #0
   1cfc0:	str	r0, [r6]
   1cfc4:	b	1cfe4 <main@@Base+0x6f08>
   1cfc8:	mov	r0, #0
   1cfcc:	b	1d018 <main@@Base+0x6f3c>
   1cfd0:	mov	r0, #0
   1cfd4:	str	r0, [r6]
   1cfd8:	ldrb	r0, [r1]
   1cfdc:	cmp	r0, #125	; 0x7d
   1cfe0:	bne	1d000 <main@@Base+0x6f24>
   1cfe4:	add	r1, r1, #1
   1cfe8:	mov	r0, r5
   1cfec:	mov	r2, r4
   1cff0:	pop	{r4, r5, r6, sl, fp, lr}
   1cff4:	b	1d024 <main@@Base+0x6f48>
   1cff8:	mov	r0, #0
   1cffc:	str	r0, [r6]
   1d000:	mov	r0, r5
   1d004:	mov	r2, r4
   1d008:	mov	r3, #10
   1d00c:	pop	{r4, r5, r6, sl, fp, lr}
   1d010:	b	26958 <flatcc_json_parser_set_error@@Base>
   1d014:	mov	r0, #1
   1d018:	str	r0, [r6]
   1d01c:	mov	r0, r1
   1d020:	pop	{r4, r5, r6, sl, fp, pc}
   1d024:	sub	r3, r2, r1
   1d028:	cmp	r3, #2
   1d02c:	blt	1d058 <main@@Base+0x6f7c>
   1d030:	ldrb	r3, [r1]
   1d034:	cmp	r3, #32
   1d038:	movhi	r0, r1
   1d03c:	bxhi	lr
   1d040:	bne	1d058 <main@@Base+0x6f7c>
   1d044:	mov	ip, r1
   1d048:	ldrb	r3, [ip, #1]!
   1d04c:	cmp	r3, #32
   1d050:	movhi	r0, ip
   1d054:	bxhi	lr
   1d058:	b	269d4 <flatcc_json_parser_space_ext@@Base>
   1d05c:	mov	ip, r0
   1d060:	sub	r0, r1, r0
   1d064:	cmp	r0, #8
   1d068:	movcs	r0, #8
   1d06c:	and	r0, r0, #15
   1d070:	sub	r3, r0, #1
   1d074:	mov	r1, #0
   1d078:	mov	r0, #0
   1d07c:	cmp	r3, #7
   1d080:	bxhi	lr
   1d084:	add	r2, pc, #0
   1d088:	ldr	pc, [r2, r3, lsl #2]
   1d08c:	andeq	sp, r1, r0, ror #1
   1d090:	ldrdeq	sp, [r1], -r8
   1d094:	ldrdeq	sp, [r1], -r0
   1d098:	andeq	sp, r1, r8, asr #1
   1d09c:	andeq	sp, r1, r0, asr #1
   1d0a0:	strheq	sp, [r1], -r8
   1d0a4:	strheq	sp, [r1], -r0
   1d0a8:	andeq	sp, r1, ip, lsr #1
   1d0ac:	ldrb	r0, [ip, #7]
   1d0b0:	ldrb	r2, [ip, #6]
   1d0b4:	orr	r0, r0, r2, lsl #8
   1d0b8:	ldrb	r2, [ip, #5]
   1d0bc:	orr	r0, r0, r2, lsl #16
   1d0c0:	ldrb	r2, [ip, #4]
   1d0c4:	orr	r0, r0, r2, lsl #24
   1d0c8:	ldrb	r2, [ip, #3]
   1d0cc:	orr	r1, r2, r1
   1d0d0:	ldrb	r2, [ip, #2]
   1d0d4:	orr	r1, r1, r2, lsl #8
   1d0d8:	ldrb	r2, [ip, #1]
   1d0dc:	orr	r1, r1, r2, lsl #16
   1d0e0:	ldrb	r2, [ip]
   1d0e4:	orr	r1, r1, r2, lsl #24
   1d0e8:	bx	lr
   1d0ec:	sub	r1, r1, r0
   1d0f0:	cmp	r1, r2
   1d0f4:	bxle	lr
   1d0f8:	mov	r1, r0
   1d0fc:	ldrb	r2, [r1, r2]!
   1d100:	cmp	r2, #46	; 0x2e
   1d104:	addeq	r0, r1, #1
   1d108:	bx	lr
   1d10c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d110:	add	fp, sp, #24
   1d114:	sub	sp, sp, #8
   1d118:	mov	r8, r3
   1d11c:	mov	r6, r2
   1d120:	mov	r5, r1
   1d124:	mov	r7, r0
   1d128:	mov	r0, r1
   1d12c:	mov	r1, r2
   1d130:	bl	1a060 <main@@Base+0x3f84>
   1d134:	movw	r2, #20577	; 0x5061
   1d138:	movt	r2, #18798	; 0x496e
   1d13c:	eor	r2, r1, r2
   1d140:	movw	r3, #28276	; 0x6e74
   1d144:	movt	r3, #29285	; 0x7265
   1d148:	eor	r0, r0, r3
   1d14c:	orrs	r0, r0, r2
   1d150:	ldr	r9, [fp, #12]
   1d154:	bne	1d1c8 <main@@Base+0x70ec>
   1d158:	add	r0, r5, #8
   1d15c:	mov	r1, r6
   1d160:	bl	1a060 <main@@Base+0x3f84>
   1d164:	movw	r2, #28005	; 0x6d65
   1d168:	movt	r2, #20065	; 0x4e61
   1d16c:	eor	r1, r1, r2
   1d170:	movw	r2, #24931	; 0x6163
   1d174:	movt	r2, #29552	; 0x7370
   1d178:	eor	r0, r0, r2
   1d17c:	orrs	r0, r0, r1
   1d180:	bne	1d218 <main@@Base+0x713c>
   1d184:	add	r4, r5, #16
   1d188:	mov	r0, r4
   1d18c:	mov	r1, r6
   1d190:	bl	1a060 <main@@Base+0x3f84>
   1d194:	and	r0, r1, #-16777216	; 0xff000000
   1d198:	teq	r0, #1694498816	; 0x65000000
   1d19c:	bne	1d218 <main@@Base+0x713c>
   1d1a0:	str	r9, [sp]
   1d1a4:	mov	r9, #1
   1d1a8:	mov	r0, r7
   1d1ac:	mov	r1, r4
   1d1b0:	mov	r2, r6
   1d1b4:	mov	r3, #1
   1d1b8:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d1bc:	cmp	r0, r4
   1d1c0:	bne	1d1fc <main@@Base+0x7120>
   1d1c4:	b	1d218 <main@@Base+0x713c>
   1d1c8:	movw	r0, #20037	; 0x4e45
   1d1cc:	movt	r0, #20047	; 0x4e4f
   1d1d0:	teq	r1, r0
   1d1d4:	bne	1d218 <main@@Base+0x713c>
   1d1d8:	str	r9, [sp]
   1d1dc:	mov	r0, r7
   1d1e0:	mov	r1, r5
   1d1e4:	mov	r2, r6
   1d1e8:	mov	r3, #4
   1d1ec:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d1f0:	cmp	r0, r5
   1d1f4:	beq	1d218 <main@@Base+0x713c>
   1d1f8:	mov	r9, #0
   1d1fc:	mov	r1, #0
   1d200:	mov	r5, r0
   1d204:	ldr	r0, [fp, #8]
   1d208:	str	r9, [r0]
   1d20c:	str	r1, [r0, #4]
   1d210:	mov	r0, #0
   1d214:	str	r0, [r8]
   1d218:	mov	r0, r5
   1d21c:	sub	sp, fp, #24
   1d220:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d224:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d228:	add	fp, sp, #24
   1d22c:	sub	sp, sp, #8
   1d230:	mov	r9, r3
   1d234:	mov	r6, r2
   1d238:	mov	r5, r1
   1d23c:	mov	r7, r0
   1d240:	mov	r0, r1
   1d244:	mov	r1, r2
   1d248:	bl	1a060 <main@@Base+0x3f84>
   1d24c:	ldr	r2, [fp, #12]
   1d250:	ldr	r8, [fp, #8]
   1d254:	movw	r3, #30769	; 0x7831
   1d258:	movt	r3, #26725	; 0x6865
   1d25c:	cmp	r1, r3
   1d260:	bhi	1d298 <main@@Base+0x71bc>
   1d264:	teq	r1, r3
   1d268:	bne	1d340 <main@@Base+0x7264>
   1d26c:	str	r2, [sp]
   1d270:	mov	r0, r7
   1d274:	mov	r1, r5
   1d278:	mov	r2, r6
   1d27c:	mov	r3, #4
   1d280:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d284:	cmp	r0, r5
   1d288:	beq	1d340 <main@@Base+0x7264>
   1d28c:	mov	r1, #0
   1d290:	mov	r2, #3
   1d294:	b	1d330 <main@@Base+0x7254>
   1d298:	movw	r3, #26725	; 0x6865
   1d29c:	eor	r3, r3, r1, lsr #16
   1d2a0:	lsr	r0, r0, #16
   1d2a4:	orr	r0, r0, r1, lsl #16
   1d2a8:	movw	r4, #25959	; 0x6567
   1d2ac:	movt	r4, #30830	; 0x786e
   1d2b0:	eor	r0, r0, r4
   1d2b4:	orrs	r0, r0, r3
   1d2b8:	bne	1d2f4 <main@@Base+0x7218>
   1d2bc:	str	r2, [sp]
   1d2c0:	mov	r0, r7
   1d2c4:	mov	r1, r5
   1d2c8:	mov	r2, r6
   1d2cc:	mov	r3, #6
   1d2d0:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d2d4:	cmp	r0, r5
   1d2d8:	beq	1d340 <main@@Base+0x7264>
   1d2dc:	mvn	r1, #0
   1d2e0:	mvn	r2, #1
   1d2e4:	str	r2, [r8]
   1d2e8:	str	r1, [r8, #4]
   1d2ec:	mov	r1, #1
   1d2f0:	b	1d338 <main@@Base+0x725c>
   1d2f4:	movw	r0, #30770	; 0x7832
   1d2f8:	movt	r0, #26725	; 0x6865
   1d2fc:	teq	r1, r0
   1d300:	bne	1d340 <main@@Base+0x7264>
   1d304:	str	r2, [sp]
   1d308:	mov	r0, r7
   1d30c:	mov	r1, r5
   1d310:	mov	r2, r6
   1d314:	mov	r3, #4
   1d318:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d31c:	cmp	r0, r5
   1d320:	beq	1d340 <main@@Base+0x7264>
   1d324:	mov	r1, #0
   1d328:	movw	r2, #48815	; 0xbeaf
   1d32c:	movt	r2, #32431	; 0x7eaf
   1d330:	str	r2, [r8]
   1d334:	str	r1, [r8, #4]
   1d338:	str	r1, [r9]
   1d33c:	mov	r5, r0
   1d340:	mov	r0, r5
   1d344:	sub	sp, fp, #24
   1d348:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d34c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d350:	add	fp, sp, #24
   1d354:	sub	sp, sp, #8
   1d358:	mov	r9, r3
   1d35c:	mov	r6, r2
   1d360:	mov	r5, r1
   1d364:	mov	r7, r0
   1d368:	mov	r0, r1
   1d36c:	mov	r1, r2
   1d370:	bl	1a060 <main@@Base+0x3f84>
   1d374:	ldr	ip, [fp, #12]
   1d378:	ldr	r8, [fp, #8]
   1d37c:	movw	r3, #29745	; 0x7431
   1d380:	movt	r3, #26990	; 0x696e
   1d384:	cmp	r1, r3
   1d388:	bhi	1d3c0 <main@@Base+0x72e4>
   1d38c:	teq	r1, r3
   1d390:	bne	1d4b4 <main@@Base+0x73d8>
   1d394:	str	ip, [sp]
   1d398:	mov	r0, r7
   1d39c:	mov	r1, r5
   1d3a0:	mov	r2, r6
   1d3a4:	mov	r3, #4
   1d3a8:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d3ac:	cmp	r0, r5
   1d3b0:	beq	1d4b4 <main@@Base+0x73d8>
   1d3b4:	mov	r1, #0
   1d3b8:	mov	r2, #2
   1d3bc:	b	1d414 <main@@Base+0x7338>
   1d3c0:	movw	r4, #29806	; 0x746e
   1d3c4:	movt	r4, #26990	; 0x696e
   1d3c8:	movw	r3, #0
   1d3cc:	movt	r3, #25959	; 0x6567
   1d3d0:	subs	r2, r0, r3
   1d3d4:	sbcs	r2, r1, r4
   1d3d8:	bcs	1d420 <main@@Base+0x7344>
   1d3dc:	movw	r0, #29746	; 0x7432
   1d3e0:	movt	r0, #26990	; 0x696e
   1d3e4:	teq	r1, r0
   1d3e8:	bne	1d4b4 <main@@Base+0x73d8>
   1d3ec:	str	ip, [sp]
   1d3f0:	mov	r0, r7
   1d3f4:	mov	r1, r5
   1d3f8:	mov	r2, r6
   1d3fc:	mov	r3, #4
   1d400:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d404:	cmp	r0, r5
   1d408:	beq	1d4b4 <main@@Base+0x73d8>
   1d40c:	mov	r1, #0
   1d410:	mov	r2, #42	; 0x2a
   1d414:	str	r2, [r8]
   1d418:	str	r1, [r8, #4]
   1d41c:	b	1d4ac <main@@Base+0x73d0>
   1d420:	eor	r1, r1, r4
   1d424:	add	r2, r3, #12800	; 0x3200
   1d428:	bic	r4, r0, #255	; 0xff
   1d42c:	eor	r2, r4, r2
   1d430:	orrs	r2, r2, r1
   1d434:	bne	1d468 <main@@Base+0x738c>
   1d438:	str	ip, [sp]
   1d43c:	mov	r0, r7
   1d440:	mov	r1, r5
   1d444:	mov	r2, r6
   1d448:	mov	r3, #7
   1d44c:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d450:	cmp	r0, r5
   1d454:	beq	1d4b4 <main@@Base+0x73d8>
   1d458:	mvn	r1, #0
   1d45c:	mvn	r2, #1
   1d460:	add	r2, r2, #1
   1d464:	b	1d4a0 <main@@Base+0x73c4>
   1d468:	bfc	r0, #0, #16
   1d46c:	eor	r0, r0, r3
   1d470:	orrs	r0, r0, r1
   1d474:	bne	1d4b4 <main@@Base+0x73d8>
   1d478:	str	ip, [sp]
   1d47c:	mov	r0, r7
   1d480:	mov	r1, r5
   1d484:	mov	r2, r6
   1d488:	mov	r3, #6
   1d48c:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d490:	cmp	r0, r5
   1d494:	beq	1d4b4 <main@@Base+0x73d8>
   1d498:	mvn	r1, #0
   1d49c:	mvn	r2, #1
   1d4a0:	str	r2, [r8]
   1d4a4:	str	r1, [r8, #4]
   1d4a8:	mov	r1, #1
   1d4ac:	str	r1, [r9]
   1d4b0:	mov	r5, r0
   1d4b4:	mov	r0, r5
   1d4b8:	sub	sp, fp, #24
   1d4bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d4c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d4c4:	add	fp, sp, #24
   1d4c8:	sub	sp, sp, #8
   1d4cc:	mov	r4, r3
   1d4d0:	mov	r6, r2
   1d4d4:	mov	r5, r1
   1d4d8:	mov	r7, r0
   1d4dc:	mov	r0, r1
   1d4e0:	mov	r1, r2
   1d4e4:	bl	1a060 <main@@Base+0x3f84>
   1d4e8:	ldr	r0, [fp, #12]
   1d4ec:	ldr	r8, [fp, #8]
   1d4f0:	movw	r2, #26417	; 0x6731
   1d4f4:	movt	r2, #28261	; 0x6e65
   1d4f8:	cmp	r1, r2
   1d4fc:	bhi	1d534 <main@@Base+0x7458>
   1d500:	teq	r1, r2
   1d504:	bne	1d5c4 <main@@Base+0x74e8>
   1d508:	str	r0, [sp]
   1d50c:	mov	r0, r7
   1d510:	mov	r1, r5
   1d514:	mov	r2, r6
   1d518:	mov	r3, #4
   1d51c:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d520:	cmp	r0, r5
   1d524:	beq	1d5c4 <main@@Base+0x74e8>
   1d528:	mvn	r1, #0
   1d52c:	mvn	r2, #11
   1d530:	b	1d5b0 <main@@Base+0x74d4>
   1d534:	movw	r2, #26418	; 0x6732
   1d538:	movt	r2, #28261	; 0x6e65
   1d53c:	teq	r1, r2
   1d540:	beq	1d584 <main@@Base+0x74a8>
   1d544:	movw	r2, #26419	; 0x6733
   1d548:	movt	r2, #28261	; 0x6e65
   1d54c:	teq	r1, r2
   1d550:	bne	1d5c4 <main@@Base+0x74e8>
   1d554:	str	r0, [sp]
   1d558:	mov	r0, r7
   1d55c:	mov	r1, r5
   1d560:	mov	r2, r6
   1d564:	mov	r3, #4
   1d568:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d56c:	cmp	r0, r5
   1d570:	beq	1d5c4 <main@@Base+0x74e8>
   1d574:	mvn	r1, #0
   1d578:	mvn	r2, #11
   1d57c:	add	r2, r2, #2
   1d580:	b	1d5b0 <main@@Base+0x74d4>
   1d584:	str	r0, [sp]
   1d588:	mov	r0, r7
   1d58c:	mov	r1, r5
   1d590:	mov	r2, r6
   1d594:	mov	r3, #4
   1d598:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d59c:	cmp	r0, r5
   1d5a0:	beq	1d5c4 <main@@Base+0x74e8>
   1d5a4:	mvn	r1, #0
   1d5a8:	mvn	r2, #11
   1d5ac:	add	r2, r2, #1
   1d5b0:	str	r2, [r8]
   1d5b4:	str	r1, [r8, #4]
   1d5b8:	mov	r1, #1
   1d5bc:	str	r1, [r4]
   1d5c0:	mov	r5, r0
   1d5c4:	mov	r0, r5
   1d5c8:	sub	sp, fp, #24
   1d5cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d5d0:	push	{r4, r5, r6, r7, fp, lr}
   1d5d4:	add	fp, sp, #16
   1d5d8:	sub	sp, sp, #8
   1d5dc:	mov	r4, r3
   1d5e0:	mov	r6, r2
   1d5e4:	mov	r5, r1
   1d5e8:	mov	r7, r0
   1d5ec:	mov	r0, r1
   1d5f0:	mov	r1, r2
   1d5f4:	bl	1a060 <main@@Base+0x3f84>
   1d5f8:	and	r0, r1, #-16777216	; 0xff000000
   1d5fc:	teq	r0, #2013265920	; 0x78000000
   1d600:	bne	1d640 <main@@Base+0x7564>
   1d604:	ldr	r0, [fp, #12]
   1d608:	str	r0, [sp]
   1d60c:	mov	r0, r7
   1d610:	mov	r1, r5
   1d614:	mov	r2, r6
   1d618:	mov	r3, #1
   1d61c:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d620:	cmp	r0, r5
   1d624:	beq	1d640 <main@@Base+0x7564>
   1d628:	ldr	r1, [fp, #8]
   1d62c:	mov	r2, #0
   1d630:	str	r2, [r1]
   1d634:	str	r2, [r1, #4]
   1d638:	str	r2, [r4]
   1d63c:	mov	r5, r0
   1d640:	mov	r0, r5
   1d644:	sub	sp, fp, #16
   1d648:	pop	{r4, r5, r6, r7, fp, pc}
   1d64c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d650:	add	fp, sp, #28
   1d654:	sub	sp, sp, #4
   1d658:	mov	r9, r3
   1d65c:	mov	r6, r2
   1d660:	mov	r5, r1
   1d664:	mov	sl, r0
   1d668:	mov	r0, r1
   1d66c:	mov	r1, r2
   1d670:	bl	1a060 <main@@Base+0x3f84>
   1d674:	ldr	lr, [fp, #12]
   1d678:	ldr	r8, [fp, #8]
   1d67c:	movw	r2, #20036	; 0x4e44
   1d680:	movt	r2, #20047	; 0x4e4f
   1d684:	cmp	r1, r2
   1d688:	bhi	1d6f0 <main@@Base+0x7614>
   1d68c:	and	r2, r0, #-16777216	; 0xff000000
   1d690:	movw	r4, #28523	; 0x6f6b
   1d694:	movt	r4, #17007	; 0x426f
   1d698:	movw	r3, #28160	; 0x6e00
   1d69c:	movt	r3, #18017	; 0x4661
   1d6a0:	subs	r7, r0, r3
   1d6a4:	sbcs	r7, r1, r4
   1d6a8:	bcs	1d744 <main@@Base+0x7668>
   1d6ac:	movw	r0, #27756	; 0x6c6c
   1d6b0:	movt	r0, #16997	; 0x4265
   1d6b4:	eor	r0, r1, r0
   1d6b8:	eor	r1, r2, #1694498816	; 0x65000000
   1d6bc:	orrs	r0, r1, r0
   1d6c0:	bne	1d880 <main@@Base+0x77a4>
   1d6c4:	str	lr, [sp]
   1d6c8:	mov	r0, sl
   1d6cc:	mov	r1, r5
   1d6d0:	mov	r2, r6
   1d6d4:	mov	r3, #5
   1d6d8:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d6dc:	cmp	r0, r5
   1d6e0:	beq	1d880 <main@@Base+0x77a4>
   1d6e4:	mov	r1, #0
   1d6e8:	mov	r2, #9
   1d6ec:	b	1d870 <main@@Base+0x7794>
   1d6f0:	movw	r3, #26725	; 0x6865
   1d6f4:	movt	r3, #20340	; 0x4f74
   1d6f8:	mvn	r2, #-1912602624	; 0x8e000000
   1d6fc:	subs	r2, r2, r0
   1d700:	sbcs	r2, r3, r1
   1d704:	bcc	1d788 <main@@Base+0x76ac>
   1d708:	movw	r0, #20037	; 0x4e45
   1d70c:	movt	r0, #20047	; 0x4e4f
   1d710:	teq	r1, r0
   1d714:	bne	1d880 <main@@Base+0x77a4>
   1d718:	str	lr, [sp]
   1d71c:	mov	r0, sl
   1d720:	mov	r1, r5
   1d724:	mov	r2, r6
   1d728:	mov	r3, #4
   1d72c:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d730:	cmp	r0, r5
   1d734:	beq	1d880 <main@@Base+0x77a4>
   1d738:	mov	r1, #0
   1d73c:	str	r1, [r8]
   1d740:	b	1d874 <main@@Base+0x7798>
   1d744:	movw	r7, #19553	; 0x4c61
   1d748:	movt	r7, #19829	; 0x4d75
   1d74c:	eor	r7, r1, r7
   1d750:	eor	r2, r2, #1845493760	; 0x6e000000
   1d754:	orrs	r2, r2, r7
   1d758:	bne	1d7e4 <main@@Base+0x7708>
   1d75c:	str	lr, [sp]
   1d760:	mov	r0, sl
   1d764:	mov	r1, r5
   1d768:	mov	r2, r6
   1d76c:	mov	r3, #5
   1d770:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d774:	cmp	r0, r5
   1d778:	beq	1d880 <main@@Base+0x77a4>
   1d77c:	mov	r1, #0
   1d780:	mov	r2, #2
   1d784:	b	1d870 <main@@Base+0x7794>
   1d788:	movw	ip, #28789	; 0x7075
   1d78c:	movt	ip, #21089	; 0x5261
   1d790:	movw	r4, #25964	; 0x656c
   1d794:	movt	r4, #28282	; 0x6e7a
   1d798:	subs	r2, r0, r4
   1d79c:	sbcs	r2, r1, ip
   1d7a0:	bcs	1d824 <main@@Base+0x7748>
   1d7a4:	eor	r1, r1, r3
   1d7a8:	and	r0, r0, #-16777216	; 0xff000000
   1d7ac:	eor	r0, r0, #1912602624	; 0x72000000
   1d7b0:	orrs	r0, r0, r1
   1d7b4:	bne	1d880 <main@@Base+0x77a4>
   1d7b8:	str	lr, [sp]
   1d7bc:	mov	r0, sl
   1d7c0:	mov	r1, r5
   1d7c4:	mov	r2, r6
   1d7c8:	mov	r3, #5
   1d7cc:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d7d0:	cmp	r0, r5
   1d7d4:	beq	1d880 <main@@Base+0x77a4>
   1d7d8:	mov	r1, #0
   1d7dc:	mov	r2, #11
   1d7e0:	b	1d870 <main@@Base+0x7794>
   1d7e4:	eor	r1, r1, r4
   1d7e8:	bic	r0, r0, #255	; 0xff
   1d7ec:	eor	r0, r0, r3
   1d7f0:	orrs	r0, r0, r1
   1d7f4:	bne	1d880 <main@@Base+0x77a4>
   1d7f8:	str	lr, [sp]
   1d7fc:	mov	r0, sl
   1d800:	mov	r1, r5
   1d804:	mov	r2, r6
   1d808:	mov	r3, #7
   1d80c:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d810:	cmp	r0, r5
   1d814:	beq	1d880 <main@@Base+0x77a4>
   1d818:	mov	r1, #0
   1d81c:	mov	r2, #10
   1d820:	b	1d870 <main@@Base+0x7794>
   1d824:	movw	r2, #21870	; 0x556e
   1d828:	eor	r2, r2, r1, lsr #16
   1d82c:	lsr	r3, r0, #16
   1d830:	orr	r3, r3, r1, lsl #16
   1d834:	movw	r7, #25956	; 0x6564
   1d838:	movt	r7, #30067	; 0x7573
   1d83c:	eor	r3, r3, r7
   1d840:	orrs	r2, r3, r2
   1d844:	bne	1d88c <main@@Base+0x77b0>
   1d848:	str	lr, [sp]
   1d84c:	mov	r0, sl
   1d850:	mov	r1, r5
   1d854:	mov	r2, r6
   1d858:	mov	r3, #6
   1d85c:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d860:	cmp	r0, r5
   1d864:	beq	1d880 <main@@Base+0x77a4>
   1d868:	mov	r1, #0
   1d86c:	mov	r2, #255	; 0xff
   1d870:	str	r2, [r8]
   1d874:	str	r1, [r8, #4]
   1d878:	str	r1, [r9]
   1d87c:	mov	r5, r0
   1d880:	mov	r0, r5
   1d884:	sub	sp, fp, #28
   1d888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d88c:	eor	r0, r0, r4
   1d890:	eor	r1, r1, ip
   1d894:	orrs	r0, r0, r1
   1d898:	bne	1d880 <main@@Base+0x77a4>
   1d89c:	str	lr, [sp]
   1d8a0:	mov	r4, #8
   1d8a4:	mov	r0, sl
   1d8a8:	mov	r1, r5
   1d8ac:	mov	r2, r6
   1d8b0:	mov	r3, #8
   1d8b4:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d8b8:	cmp	r0, r5
   1d8bc:	beq	1d880 <main@@Base+0x77a4>
   1d8c0:	mov	r5, #0
   1d8c4:	strd	r4, [r8]
   1d8c8:	str	r5, [r9]
   1d8cc:	b	1d87c <main@@Base+0x77a0>
   1d8d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8d4:	add	fp, sp, #28
   1d8d8:	sub	sp, sp, #4
   1d8dc:	mov	r8, r3
   1d8e0:	mov	r6, r2
   1d8e4:	mov	r5, r1
   1d8e8:	mov	r9, r0
   1d8ec:	mov	r0, r1
   1d8f0:	mov	r1, r2
   1d8f4:	bl	1a060 <main@@Base+0x3f84>
   1d8f8:	mov	r7, r0
   1d8fc:	mov	r4, r1
   1d900:	bic	r0, r1, #255	; 0xff
   1d904:	ldr	sl, [fp, #12]
   1d908:	movw	r1, #28416	; 0x6f00
   1d90c:	movt	r1, #18031	; 0x466f
   1d910:	teq	r0, r1
   1d914:	mov	r0, r5
   1d918:	bne	1d948 <main@@Base+0x786c>
   1d91c:	str	sl, [sp]
   1d920:	mov	r0, r9
   1d924:	mov	r1, r5
   1d928:	mov	r2, r6
   1d92c:	mov	r3, #3
   1d930:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d934:	cmp	r0, r5
   1d938:	beq	1d948 <main@@Base+0x786c>
   1d93c:	mov	r3, #0
   1d940:	mov	r2, #17
   1d944:	b	1d9b4 <main@@Base+0x78d8>
   1d948:	movw	r1, #25942	; 0x6556
   1d94c:	movt	r1, #30052	; 0x7564
   1d950:	eor	r1, r7, r1
   1d954:	movw	r2, #25452	; 0x636c
   1d958:	movt	r2, #18798	; 0x496e
   1d95c:	eor	r2, r4, r2
   1d960:	orrs	r1, r1, r2
   1d964:	bne	1d9c8 <main@@Base+0x78ec>
   1d968:	add	r4, r0, #8
   1d96c:	mov	r0, r4
   1d970:	mov	r1, r6
   1d974:	bl	1a060 <main@@Base+0x3f84>
   1d978:	bfc	r1, #0, #16
   1d97c:	movw	r0, #0
   1d980:	movt	r0, #24940	; 0x616c
   1d984:	teq	r1, r0
   1d988:	bne	1d9c8 <main@@Base+0x78ec>
   1d98c:	str	sl, [sp]
   1d990:	mov	r0, r9
   1d994:	mov	r1, r4
   1d998:	mov	r2, r6
   1d99c:	mov	r3, #2
   1d9a0:	bl	26f84 <flatcc_json_parser_match_constant@@Base>
   1d9a4:	cmp	r0, r4
   1d9a8:	beq	1d9c8 <main@@Base+0x78ec>
   1d9ac:	mov	r2, #0
   1d9b0:	mov	r3, #0
   1d9b4:	mov	r5, r0
   1d9b8:	ldr	r0, [fp, #8]
   1d9bc:	strd	r2, [r0]
   1d9c0:	mov	r0, #0
   1d9c4:	str	r0, [r8]
   1d9c8:	mov	r0, r5
   1d9cc:	sub	sp, fp, #28
   1d9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9d4:	push	{r4, sl, fp, lr}
   1d9d8:	add	fp, sp, #8
   1d9dc:	ldr	r4, [fp, #12]
   1d9e0:	ldr	ip, [fp, #8]
   1d9e4:	ldr	lr, [fp, #16]
   1d9e8:	cmp	r3, #0
   1d9ec:	beq	1da08 <main@@Base+0x792c>
   1d9f0:	subs	r3, ip, #129	; 0x81
   1d9f4:	sbcs	r3, r4, #0
   1d9f8:	bcc	1da20 <main@@Base+0x7944>
   1d9fc:	mov	r3, #8
   1da00:	pop	{r4, sl, fp, lr}
   1da04:	b	26958 <flatcc_json_parser_set_error@@Base>
   1da08:	subs	r3, ip, #128	; 0x80
   1da0c:	sbcs	r3, r4, #0
   1da10:	bcc	1da24 <main@@Base+0x7948>
   1da14:	mov	r3, #7
   1da18:	pop	{r4, sl, fp, lr}
   1da1c:	b	26958 <flatcc_json_parser_set_error@@Base>
   1da20:	rsb	ip, ip, #0
   1da24:	strb	ip, [lr]
   1da28:	mov	r0, r1
   1da2c:	pop	{r4, sl, fp, pc}
   1da30:	push	{r4, r5, fp, lr}
   1da34:	add	fp, sp, #8
   1da38:	mov	r4, r2
   1da3c:	mov	r5, r0
   1da40:	bl	1a018 <main@@Base+0x3f3c>
   1da44:	mov	r1, r0
   1da48:	ldr	r0, [r5, #12]
   1da4c:	cmp	r0, #0
   1da50:	movne	r0, r1
   1da54:	popne	{r4, r5, fp, pc}
   1da58:	mov	r0, r5
   1da5c:	mov	r2, r4
   1da60:	pop	{r4, r5, fp, lr}
   1da64:	b	1d024 <main@@Base+0x6f48>
   1da68:	bx	lr
   1da6c:	push	{fp, lr}
   1da70:	mov	fp, sp
   1da74:	cmp	r3, #0
   1da78:	beq	1da88 <main@@Base+0x79ac>
   1da7c:	mov	r3, #8
   1da80:	pop	{fp, lr}
   1da84:	b	26958 <flatcc_json_parser_set_error@@Base>
   1da88:	ldr	ip, [fp, #12]
   1da8c:	ldr	lr, [fp, #8]
   1da90:	subs	r3, lr, #256	; 0x100
   1da94:	sbcs	r3, ip, #0
   1da98:	ldrcc	r0, [fp, #16]
   1da9c:	strbcc	lr, [r0]
   1daa0:	movcc	r0, r1
   1daa4:	popcc	{fp, pc}
   1daa8:	mov	r3, #7
   1daac:	pop	{fp, lr}
   1dab0:	b	26958 <flatcc_json_parser_set_error@@Base>
   1dab4:	bx	lr
   1dab8:	push	{r4, sl, fp, lr}
   1dabc:	add	fp, sp, #8
   1dac0:	ldr	r4, [fp, #12]
   1dac4:	ldr	ip, [fp, #8]
   1dac8:	ldr	lr, [fp, #16]
   1dacc:	cmp	r3, #0
   1dad0:	beq	1daf0 <main@@Base+0x7a14>
   1dad4:	movw	r3, #32769	; 0x8001
   1dad8:	subs	r3, ip, r3
   1dadc:	sbcs	r3, r4, #0
   1dae0:	bcc	1db08 <main@@Base+0x7a2c>
   1dae4:	mov	r3, #8
   1dae8:	pop	{r4, sl, fp, lr}
   1daec:	b	26958 <flatcc_json_parser_set_error@@Base>
   1daf0:	subs	r3, ip, #32768	; 0x8000
   1daf4:	sbcs	r3, r4, #0
   1daf8:	bcc	1db0c <main@@Base+0x7a30>
   1dafc:	mov	r3, #7
   1db00:	pop	{r4, sl, fp, lr}
   1db04:	b	26958 <flatcc_json_parser_set_error@@Base>
   1db08:	rsb	ip, ip, #0
   1db0c:	strh	ip, [lr]
   1db10:	mov	r0, r1
   1db14:	pop	{r4, sl, fp, pc}
   1db18:	bx	lr
   1db1c:	sub	r3, r2, r1
   1db20:	cmp	r3, #4
   1db24:	blt	1db40 <main@@Base+0x7a64>
   1db28:	ldr	ip, [r1]
   1db2c:	movw	r3, #30062	; 0x756e
   1db30:	movt	r3, #27756	; 0x6c6c
   1db34:	cmp	ip, r3
   1db38:	addeq	r0, r1, #4
   1db3c:	bxeq	lr
   1db40:	mov	r3, #26
   1db44:	b	26958 <flatcc_json_parser_set_error@@Base>
   1db48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db4c:	add	fp, sp, #28
   1db50:	sub	sp, sp, #20
   1db54:	mov	r5, r3
   1db58:	mov	r4, r2
   1db5c:	mov	r8, r1
   1db60:	mov	r9, r0
   1db64:	mov	r0, #0
   1db68:	str	r0, [r3]
   1db6c:	ldr	r0, [r9]
   1db70:	mov	r1, #4
   1db74:	bl	230c4 <flatcc_builder_start_table@@Base>
   1db78:	cmp	r0, #0
   1db7c:	beq	1dba4 <main@@Base+0x7ac8>
   1db80:	mov	r0, r9
   1db84:	mov	r1, r8
   1db88:	mov	r2, r4
   1db8c:	mov	r3, #33	; 0x21
   1db90:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1db94:	mov	r8, r0
   1db98:	mov	r0, r8
   1db9c:	sub	sp, fp, #28
   1dba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dba4:	add	r3, sp, #16
   1dba8:	mov	r0, r9
   1dbac:	mov	r1, r8
   1dbb0:	mov	r2, r4
   1dbb4:	bl	19f88 <main@@Base+0x3eac>
   1dbb8:	mov	r8, r0
   1dbbc:	ldr	r0, [sp, #16]
   1dbc0:	cmp	r0, #0
   1dbc4:	str	r5, [sp, #8]
   1dbc8:	beq	1df6c <main@@Base+0x7e90>
   1dbcc:	add	sl, sp, #13
   1dbd0:	add	r7, sp, #12
   1dbd4:	mov	r0, r9
   1dbd8:	mov	r1, r8
   1dbdc:	mov	r2, r4
   1dbe0:	bl	1a018 <main@@Base+0x3f3c>
   1dbe4:	mov	r5, r0
   1dbe8:	mov	r1, r4
   1dbec:	bl	1a060 <main@@Base+0x3f84>
   1dbf0:	mov	r6, r1
   1dbf4:	lsr	r1, r0, #16
   1dbf8:	orr	r1, r1, r6, lsl #16
   1dbfc:	movw	r2, #29234	; 0x7232
   1dc00:	movt	r2, #27759	; 0x6c6f
   1dc04:	eor	r1, r1, r2
   1dc08:	movw	r2, #25455	; 0x636f
   1dc0c:	eor	r2, r2, r6, lsr #16
   1dc10:	orrs	r1, r1, r2
   1dc14:	bne	1dc6c <main@@Base+0x7b90>
   1dc18:	mov	r0, r9
   1dc1c:	mov	r1, r5
   1dc20:	mov	r2, r4
   1dc24:	mov	r3, #6
   1dc28:	bl	1a064 <main@@Base+0x3f88>
   1dc2c:	mov	r7, r0
   1dc30:	cmp	r5, r0
   1dc34:	add	r5, sp, #15
   1dc38:	beq	1dcdc <main@@Base+0x7c00>
   1dc3c:	mov	r0, #0
   1dc40:	strb	r0, [sp, #15]
   1dc44:	mov	r0, r9
   1dc48:	mov	r1, r7
   1dc4c:	mov	r2, r4
   1dc50:	mov	r3, r5
   1dc54:	bl	1aa50 <main@@Base+0x4974>
   1dc58:	mov	r6, r0
   1dc5c:	cmp	r7, r0
   1dc60:	beq	1ddd4 <main@@Base+0x7cf8>
   1dc64:	mov	r8, r6
   1dc68:	b	1de00 <main@@Base+0x7d24>
   1dc6c:	movw	r1, #27759	; 0x6c6f
   1dc70:	movt	r1, #25455	; 0x636f
   1dc74:	eor	r1, r6, r1
   1dc78:	and	r0, r0, #-16777216	; 0xff000000
   1dc7c:	eor	r0, r0, #1912602624	; 0x72000000
   1dc80:	orrs	r0, r0, r1
   1dc84:	bne	1dce4 <main@@Base+0x7c08>
   1dc88:	mov	r0, r9
   1dc8c:	mov	r1, r5
   1dc90:	mov	r2, r4
   1dc94:	mov	r3, #5
   1dc98:	bl	1a064 <main@@Base+0x3f88>
   1dc9c:	mov	r7, r0
   1dca0:	cmp	r5, r0
   1dca4:	beq	1dcdc <main@@Base+0x7c00>
   1dca8:	mov	r0, #0
   1dcac:	strb	r0, [sp, #14]
   1dcb0:	mov	r0, r9
   1dcb4:	mov	r1, r7
   1dcb8:	mov	r2, r4
   1dcbc:	add	r5, sp, #14
   1dcc0:	mov	r3, r5
   1dcc4:	bl	1aa50 <main@@Base+0x4974>
   1dcc8:	mov	r6, r0
   1dccc:	cmp	r7, r0
   1dcd0:	beq	1de24 <main@@Base+0x7d48>
   1dcd4:	mov	r8, r6
   1dcd8:	b	1de50 <main@@Base+0x7d74>
   1dcdc:	mov	r5, r7
   1dce0:	add	r7, sp, #12
   1dce4:	bic	r0, r6, #255	; 0xff
   1dce8:	movw	r1, #12800	; 0x3200
   1dcec:	movt	r1, #30051	; 0x7563
   1dcf0:	teq	r0, r1
   1dcf4:	bne	1dd48 <main@@Base+0x7c6c>
   1dcf8:	mov	r0, r9
   1dcfc:	mov	r1, r5
   1dd00:	mov	r2, r4
   1dd04:	mov	r3, #3
   1dd08:	bl	1a064 <main@@Base+0x3f88>
   1dd0c:	mov	r6, r0
   1dd10:	cmp	r5, r0
   1dd14:	beq	1ddb0 <main@@Base+0x7cd4>
   1dd18:	mov	r0, #0
   1dd1c:	strb	r0, [sp, #13]
   1dd20:	mov	r0, r9
   1dd24:	mov	r1, r6
   1dd28:	mov	r2, r4
   1dd2c:	mov	r3, sl
   1dd30:	bl	1aca8 <main@@Base+0x4bcc>
   1dd34:	mov	r7, r0
   1dd38:	cmp	r6, r0
   1dd3c:	beq	1de90 <main@@Base+0x7db4>
   1dd40:	mov	r8, r7
   1dd44:	b	1debc <main@@Base+0x7de0>
   1dd48:	bfc	r6, #0, #16
   1dd4c:	movw	r0, #0
   1dd50:	movt	r0, #30051	; 0x7563
   1dd54:	teq	r6, r0
   1dd58:	bne	1ddbc <main@@Base+0x7ce0>
   1dd5c:	mov	r0, r9
   1dd60:	mov	r1, r5
   1dd64:	mov	r2, r4
   1dd68:	mov	r3, #2
   1dd6c:	bl	1a064 <main@@Base+0x3f88>
   1dd70:	mov	r6, r0
   1dd74:	cmp	r5, r0
   1dd78:	beq	1ddb0 <main@@Base+0x7cd4>
   1dd7c:	mov	r0, #0
   1dd80:	strb	r0, [sp, #12]
   1dd84:	mov	r0, r9
   1dd88:	mov	r1, r6
   1dd8c:	mov	r2, r4
   1dd90:	mov	r3, r7
   1dd94:	bl	1aca8 <main@@Base+0x4bcc>
   1dd98:	mov	r1, r7
   1dd9c:	mov	r7, r0
   1dda0:	cmp	r6, r0
   1dda4:	beq	1dee0 <main@@Base+0x7e04>
   1dda8:	mov	r8, r7
   1ddac:	b	1df0c <main@@Base+0x7e30>
   1ddb0:	mov	r0, r9
   1ddb4:	mov	r1, r6
   1ddb8:	b	1ddc4 <main@@Base+0x7ce8>
   1ddbc:	mov	r0, r9
   1ddc0:	mov	r1, r5
   1ddc4:	mov	r2, r4
   1ddc8:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1ddcc:	mov	r8, r0
   1ddd0:	b	1df48 <main@@Base+0x7e6c>
   1ddd4:	str	r5, [sp]
   1ddd8:	mov	r0, r9
   1dddc:	mov	r1, r6
   1dde0:	mov	r2, r4
   1dde4:	movw	r3, #37344	; 0x91e0
   1dde8:	movt	r3, #4
   1ddec:	bl	1aae0 <main@@Base+0x4a04>
   1ddf0:	mov	r8, r0
   1ddf4:	cmp	r0, r6
   1ddf8:	cmpne	r8, r4
   1ddfc:	beq	1db80 <main@@Base+0x7aa4>
   1de00:	ldrb	r5, [sp, #15]
   1de04:	cmp	r5, #2
   1de08:	add	r7, sp, #12
   1de0c:	ldrbeq	r0, [r9, #8]
   1de10:	tsteq	r0, #2
   1de14:	beq	1df48 <main@@Base+0x7e6c>
   1de18:	ldr	r0, [r9]
   1de1c:	mov	r1, #1
   1de20:	b	1de70 <main@@Base+0x7d94>
   1de24:	str	r5, [sp]
   1de28:	mov	r0, r9
   1de2c:	mov	r1, r6
   1de30:	mov	r2, r4
   1de34:	movw	r3, #37360	; 0x91f0
   1de38:	movt	r3, #4
   1de3c:	bl	1aae0 <main@@Base+0x4a04>
   1de40:	mov	r8, r0
   1de44:	cmp	r0, r6
   1de48:	cmpne	r8, r4
   1de4c:	beq	1db80 <main@@Base+0x7aa4>
   1de50:	ldrb	r5, [sp, #14]
   1de54:	cmp	r5, #2
   1de58:	add	r7, sp, #12
   1de5c:	ldrbeq	r0, [r9, #8]
   1de60:	tsteq	r0, #2
   1de64:	beq	1df48 <main@@Base+0x7e6c>
   1de68:	ldr	r0, [r9]
   1de6c:	mov	r1, #0
   1de70:	mov	r2, #1
   1de74:	mov	r3, #1
   1de78:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1de7c:	cmp	r0, #0
   1de80:	beq	1db80 <main@@Base+0x7aa4>
   1de84:	sxtb	r1, r5
   1de88:	bl	1abf8 <main@@Base+0x4b1c>
   1de8c:	b	1df48 <main@@Base+0x7e6c>
   1de90:	str	sl, [sp]
   1de94:	mov	r0, r9
   1de98:	mov	r1, r7
   1de9c:	mov	r2, r4
   1dea0:	movw	r3, #37376	; 0x9200
   1dea4:	movt	r3, #4
   1dea8:	bl	1ad38 <main@@Base+0x4c5c>
   1deac:	mov	r8, r0
   1deb0:	cmp	r0, r7
   1deb4:	cmpne	r8, r4
   1deb8:	beq	1db80 <main@@Base+0x7aa4>
   1debc:	ldrb	r6, [sp, #13]
   1dec0:	cmp	r6, #2
   1dec4:	add	r7, sp, #12
   1dec8:	ldrbeq	r0, [r9, #8]
   1decc:	tsteq	r0, #2
   1ded0:	beq	1df48 <main@@Base+0x7e6c>
   1ded4:	ldr	r0, [r9]
   1ded8:	mov	r1, #3
   1dedc:	b	1df2c <main@@Base+0x7e50>
   1dee0:	str	r1, [sp]
   1dee4:	mov	r0, r9
   1dee8:	mov	r1, r7
   1deec:	mov	r2, r4
   1def0:	movw	r3, #37388	; 0x920c
   1def4:	movt	r3, #4
   1def8:	bl	1ad38 <main@@Base+0x4c5c>
   1defc:	mov	r8, r0
   1df00:	cmp	r0, r7
   1df04:	cmpne	r8, r4
   1df08:	beq	1db80 <main@@Base+0x7aa4>
   1df0c:	ldrb	r6, [sp, #12]
   1df10:	cmp	r6, #2
   1df14:	add	r7, sp, #12
   1df18:	ldrbeq	r0, [r9, #8]
   1df1c:	tsteq	r0, #2
   1df20:	beq	1df48 <main@@Base+0x7e6c>
   1df24:	ldr	r0, [r9]
   1df28:	mov	r1, #2
   1df2c:	mov	r2, #1
   1df30:	mov	r3, #1
   1df34:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1df38:	cmp	r0, #0
   1df3c:	beq	1db80 <main@@Base+0x7aa4>
   1df40:	mov	r1, r6
   1df44:	bl	1ae50 <main@@Base+0x4d74>
   1df48:	mov	r0, r9
   1df4c:	mov	r1, r8
   1df50:	mov	r2, r4
   1df54:	add	r3, sp, #16
   1df58:	bl	1cf64 <main@@Base+0x6e88>
   1df5c:	mov	r8, r0
   1df60:	ldr	r0, [sp, #16]
   1df64:	cmp	r0, #0
   1df68:	bne	1dbd4 <main@@Base+0x7af8>
   1df6c:	ldr	r0, [r9, #24]
   1df70:	cmp	r0, #0
   1df74:	bne	1db80 <main@@Base+0x7aa4>
   1df78:	ldr	r0, [r9]
   1df7c:	bl	237e4 <flatcc_builder_end_table@@Base>
   1df80:	ldr	r1, [sp, #8]
   1df84:	str	r0, [r1]
   1df88:	cmp	r0, #0
   1df8c:	bne	1db98 <main@@Base+0x7abc>
   1df90:	b	1db80 <main@@Base+0x7aa4>
   1df94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1df98:	add	fp, sp, #24
   1df9c:	sub	sp, sp, #8
   1dfa0:	mov	r8, r3
   1dfa4:	mov	r4, r2
   1dfa8:	mov	r7, r1
   1dfac:	mov	r5, r0
   1dfb0:	mov	r0, #0
   1dfb4:	str	r0, [r3]
   1dfb8:	ldr	r0, [r5]
   1dfbc:	mov	r1, #0
   1dfc0:	bl	230c4 <flatcc_builder_start_table@@Base>
   1dfc4:	cmp	r0, #0
   1dfc8:	bne	1e058 <main@@Base+0x7f7c>
   1dfcc:	add	r3, sp, #4
   1dfd0:	mov	r0, r5
   1dfd4:	mov	r1, r7
   1dfd8:	mov	r2, r4
   1dfdc:	bl	19f88 <main@@Base+0x3eac>
   1dfe0:	mov	r7, r0
   1dfe4:	ldr	r0, [sp, #4]
   1dfe8:	cmp	r0, #0
   1dfec:	beq	1e038 <main@@Base+0x7f5c>
   1dff0:	add	r6, sp, #4
   1dff4:	mov	r0, r5
   1dff8:	mov	r1, r7
   1dffc:	mov	r2, r4
   1e000:	bl	1a018 <main@@Base+0x3f3c>
   1e004:	mov	r1, r0
   1e008:	mov	r0, r5
   1e00c:	mov	r2, r4
   1e010:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1e014:	mov	r1, r0
   1e018:	mov	r0, r5
   1e01c:	mov	r2, r4
   1e020:	mov	r3, r6
   1e024:	bl	1cf64 <main@@Base+0x6e88>
   1e028:	mov	r7, r0
   1e02c:	ldr	r0, [sp, #4]
   1e030:	cmp	r0, #0
   1e034:	bne	1dff4 <main@@Base+0x7f18>
   1e038:	ldr	r0, [r5, #24]
   1e03c:	cmp	r0, #0
   1e040:	bne	1e058 <main@@Base+0x7f7c>
   1e044:	ldr	r0, [r5]
   1e048:	bl	237e4 <flatcc_builder_end_table@@Base>
   1e04c:	str	r0, [r8]
   1e050:	cmp	r0, #0
   1e054:	bne	1e070 <main@@Base+0x7f94>
   1e058:	mov	r0, r5
   1e05c:	mov	r1, r7
   1e060:	mov	r2, r4
   1e064:	mov	r3, #33	; 0x21
   1e068:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1e06c:	mov	r7, r0
   1e070:	mov	r0, r7
   1e074:	sub	sp, fp, #24
   1e078:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e07c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e080:	add	fp, sp, #28
   1e084:	sub	sp, sp, #36	; 0x24
   1e088:	mov	r7, r3
   1e08c:	mov	r4, r2
   1e090:	mov	r6, r1
   1e094:	mov	r5, r0
   1e098:	mov	r0, #0
   1e09c:	str	r0, [r3]
   1e0a0:	ldr	r0, [r5]
   1e0a4:	mov	r1, #4
   1e0a8:	bl	230c4 <flatcc_builder_start_table@@Base>
   1e0ac:	cmp	r0, #0
   1e0b0:	beq	1e0d8 <main@@Base+0x7ffc>
   1e0b4:	mov	r0, r5
   1e0b8:	mov	r1, r6
   1e0bc:	mov	r2, r4
   1e0c0:	mov	r3, #33	; 0x21
   1e0c4:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1e0c8:	mov	r6, r0
   1e0cc:	mov	r0, r6
   1e0d0:	sub	sp, fp, #28
   1e0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0d8:	add	r0, sp, #24
   1e0dc:	str	r0, [sp]
   1e0e0:	mov	r0, r5
   1e0e4:	mov	r1, r6
   1e0e8:	mov	r2, r4
   1e0ec:	mov	r3, #1
   1e0f0:	bl	28240 <flatcc_json_parser_prepare_unions@@Base>
   1e0f4:	cmp	r0, r4
   1e0f8:	beq	1e0b4 <main@@Base+0x7fd8>
   1e0fc:	str	r7, [sp, #20]
   1e100:	add	r3, sp, #32
   1e104:	mov	r0, r5
   1e108:	mov	r1, r6
   1e10c:	mov	r2, r4
   1e110:	bl	19f88 <main@@Base+0x3eac>
   1e114:	mov	r6, r0
   1e118:	ldr	r0, [sp, #32]
   1e11c:	cmp	r0, #0
   1e120:	beq	1e38c <main@@Base+0x82b0>
   1e124:	movw	r0, #30976	; 0x7900
   1e128:	movt	r0, #24942	; 0x616e
   1e12c:	add	r9, r0, #95	; 0x5f
   1e130:	add	sl, sp, #32
   1e134:	mov	r0, r5
   1e138:	mov	r1, r6
   1e13c:	mov	r2, r4
   1e140:	bl	1a018 <main@@Base+0x3f3c>
   1e144:	mov	r6, r0
   1e148:	mov	r1, r4
   1e14c:	bl	1a060 <main@@Base+0x3f84>
   1e150:	mov	r7, r0
   1e154:	mov	r8, r1
   1e158:	movw	r0, #28281	; 0x6e79
   1e15c:	movt	r0, #28001	; 0x6d61
   1e160:	eor	r0, r1, r0
   1e164:	eor	r1, r7, r9
   1e168:	orrs	r1, r1, r0
   1e16c:	bne	1e1f8 <main@@Base+0x811c>
   1e170:	add	r6, r6, #8
   1e174:	mov	r0, r6
   1e178:	mov	r1, r4
   1e17c:	bl	1a060 <main@@Base+0x3f84>
   1e180:	movw	r0, #28773	; 0x7065
   1e184:	movt	r0, #29817	; 0x7479
   1e188:	teq	r1, r0
   1e18c:	bne	1e34c <main@@Base+0x8270>
   1e190:	mov	r0, r5
   1e194:	mov	r1, r6
   1e198:	mov	r2, r4
   1e19c:	mov	r3, #4
   1e1a0:	bl	1a064 <main@@Base+0x3f88>
   1e1a4:	mov	r1, r0
   1e1a8:	cmp	r6, r0
   1e1ac:	beq	1e358 <main@@Base+0x827c>
   1e1b0:	ldr	r0, [sp, #24]
   1e1b4:	mov	r2, #3
   1e1b8:	str	r2, [sp]
   1e1bc:	str	r0, [sp, #4]
   1e1c0:	movw	r0, #37400	; 0x9218
   1e1c4:	movt	r0, #4
   1e1c8:	str	r0, [sp, #8]
   1e1cc:	movw	r0, #47228	; 0xb87c
   1e1d0:	movt	r0, #1
   1e1d4:	str	r0, [sp, #12]
   1e1d8:	movw	r0, #58316	; 0xe3cc
   1e1dc:	movt	r0, #1
   1e1e0:	str	r0, [sp, #16]
   1e1e4:	mov	r0, r5
   1e1e8:	mov	r2, r4
   1e1ec:	mov	r3, #0
   1e1f0:	bl	289d8 <flatcc_json_parser_union_type_vector@@Base>
   1e1f4:	b	1e364 <main@@Base+0x8288>
   1e1f8:	bic	r1, r7, #255	; 0xff
   1e1fc:	movw	r2, #30976	; 0x7900
   1e200:	movt	r2, #24942	; 0x616e
   1e204:	eor	r1, r1, r2
   1e208:	orrs	r0, r1, r0
   1e20c:	bne	1e264 <main@@Base+0x8188>
   1e210:	mov	r0, r5
   1e214:	mov	r1, r6
   1e218:	mov	r2, r4
   1e21c:	mov	r3, #7
   1e220:	bl	1a064 <main@@Base+0x3f88>
   1e224:	mov	r1, r0
   1e228:	cmp	r6, r0
   1e22c:	beq	1e260 <main@@Base+0x8184>
   1e230:	ldr	r0, [sp, #24]
   1e234:	mov	r2, #3
   1e238:	str	r2, [sp]
   1e23c:	str	r0, [sp, #4]
   1e240:	movw	r0, #47228	; 0xb87c
   1e244:	movt	r0, #1
   1e248:	str	r0, [sp, #8]
   1e24c:	mov	r0, r5
   1e250:	mov	r2, r4
   1e254:	mov	r3, #0
   1e258:	bl	2877c <flatcc_json_parser_union_vector@@Base>
   1e25c:	b	1e364 <main@@Base+0x8288>
   1e260:	mov	r6, r1
   1e264:	movw	r0, #28786	; 0x7072
   1e268:	eor	r0, r0, r8, lsr #16
   1e26c:	lsr	r1, r7, #16
   1e270:	orr	r1, r1, r8, lsl #16
   1e274:	movw	r2, #27000	; 0x6978
   1e278:	movt	r2, #25958	; 0x6566
   1e27c:	eor	r1, r1, r2
   1e280:	orrs	r0, r1, r0
   1e284:	bne	1e2d4 <main@@Base+0x81f8>
   1e288:	mov	r0, r5
   1e28c:	mov	r1, r6
   1e290:	mov	r2, r4
   1e294:	mov	r3, #6
   1e298:	bl	1a064 <main@@Base+0x3f88>
   1e29c:	mov	r1, r0
   1e2a0:	cmp	r6, r0
   1e2a4:	beq	1e358 <main@@Base+0x827c>
   1e2a8:	mov	r0, r5
   1e2ac:	mov	r2, r4
   1e2b0:	add	r3, sp, #28
   1e2b4:	bl	1e3e0 <main@@Base+0x8304>
   1e2b8:	mov	r6, r0
   1e2bc:	ldr	r7, [sp, #28]
   1e2c0:	cmp	r7, #0
   1e2c4:	beq	1e0b4 <main@@Base+0x7fd8>
   1e2c8:	ldr	r0, [r5]
   1e2cc:	mov	r1, #0
   1e2d0:	b	1e338 <main@@Base+0x825c>
   1e2d4:	movw	r0, #30313	; 0x7669
   1e2d8:	movt	r0, #28015	; 0x6d6f
   1e2dc:	eor	r0, r8, r0
   1e2e0:	and	r1, r7, #-16777216	; 0xff000000
   1e2e4:	eor	r1, r1, #1694498816	; 0x65000000
   1e2e8:	orrs	r0, r1, r0
   1e2ec:	bne	1e34c <main@@Base+0x8270>
   1e2f0:	mov	r0, r5
   1e2f4:	mov	r1, r6
   1e2f8:	mov	r2, r4
   1e2fc:	mov	r3, #5
   1e300:	bl	1a064 <main@@Base+0x3f88>
   1e304:	mov	r1, r0
   1e308:	cmp	r6, r0
   1e30c:	beq	1e358 <main@@Base+0x827c>
   1e310:	mov	r0, r5
   1e314:	mov	r2, r4
   1e318:	add	r3, sp, #28
   1e31c:	bl	1e6f4 <main@@Base+0x8618>
   1e320:	mov	r6, r0
   1e324:	ldr	r7, [sp, #28]
   1e328:	cmp	r7, #0
   1e32c:	beq	1e0b4 <main@@Base+0x7fd8>
   1e330:	ldr	r0, [r5]
   1e334:	mov	r1, #1
   1e338:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   1e33c:	cmp	r0, #0
   1e340:	beq	1e0b4 <main@@Base+0x7fd8>
   1e344:	str	r7, [r0]
   1e348:	b	1e368 <main@@Base+0x828c>
   1e34c:	mov	r0, r5
   1e350:	mov	r1, r6
   1e354:	b	1e35c <main@@Base+0x8280>
   1e358:	mov	r0, r5
   1e35c:	mov	r2, r4
   1e360:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1e364:	mov	r6, r0
   1e368:	mov	r0, r5
   1e36c:	mov	r1, r6
   1e370:	mov	r2, r4
   1e374:	mov	r3, sl
   1e378:	bl	1cf64 <main@@Base+0x6e88>
   1e37c:	mov	r6, r0
   1e380:	ldr	r0, [sp, #32]
   1e384:	cmp	r0, #0
   1e388:	bne	1e134 <main@@Base+0x8058>
   1e38c:	ldr	r0, [r5, #24]
   1e390:	cmp	r0, #0
   1e394:	bne	1e0b4 <main@@Base+0x7fd8>
   1e398:	ldr	r3, [sp, #24]
   1e39c:	mov	r0, r5
   1e3a0:	mov	r1, r6
   1e3a4:	mov	r2, r4
   1e3a8:	bl	282ac <flatcc_json_parser_finalize_unions@@Base>
   1e3ac:	mov	r6, r0
   1e3b0:	ldr	r0, [r5]
   1e3b4:	bl	237e4 <flatcc_builder_end_table@@Base>
   1e3b8:	ldr	r1, [sp, #20]
   1e3bc:	str	r0, [r1]
   1e3c0:	cmp	r0, #0
   1e3c4:	bne	1e0cc <main@@Base+0x7ff0>
   1e3c8:	b	1e0b4 <main@@Base+0x7fd8>
   1e3cc:	mov	r1, #0
   1e3d0:	cmp	r0, #5
   1e3d4:	movwcc	r1, #1
   1e3d8:	mov	r0, r1
   1e3dc:	bx	lr
   1e3e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3e4:	add	fp, sp, #28
   1e3e8:	sub	sp, sp, #12
   1e3ec:	mov	r7, r3
   1e3f0:	mov	r4, r2
   1e3f4:	mov	r6, r1
   1e3f8:	mov	r5, r0
   1e3fc:	mov	r0, #0
   1e400:	str	r0, [r3]
   1e404:	ldr	r0, [r5]
   1e408:	mov	r1, #3
   1e40c:	bl	230c4 <flatcc_builder_start_table@@Base>
   1e410:	cmp	r0, #0
   1e414:	bne	1e6b4 <main@@Base+0x85d8>
   1e418:	add	r3, sp, #8
   1e41c:	mov	r0, r5
   1e420:	mov	r1, r6
   1e424:	mov	r2, r4
   1e428:	bl	19f88 <main@@Base+0x3eac>
   1e42c:	mov	r6, r0
   1e430:	ldr	r0, [sp, #8]
   1e434:	cmp	r0, #0
   1e438:	str	r7, [sp]
   1e43c:	beq	1e6a8 <main@@Base+0x85cc>
   1e440:	movw	r9, #29556	; 0x7374
   1e444:	movt	r9, #29797	; 0x7465
   1e448:	movw	sl, #28526	; 0x6f6e
   1e44c:	movt	sl, #27251	; 0x6a73
   1e450:	movw	r8, #25958	; 0x6566
   1e454:	movt	r8, #28786	; 0x7072
   1e458:	add	r7, sp, #8
   1e45c:	b	1e474 <main@@Base+0x8398>
   1e460:	mov	r0, r5
   1e464:	mov	r2, r4
   1e468:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1e46c:	mov	r6, r0
   1e470:	b	1e5cc <main@@Base+0x84f0>
   1e474:	mov	r0, r5
   1e478:	mov	r1, r6
   1e47c:	mov	r2, r4
   1e480:	bl	1a018 <main@@Base+0x3f3c>
   1e484:	mov	r6, r0
   1e488:	mov	r1, r4
   1e48c:	bl	1a060 <main@@Base+0x3f84>
   1e490:	eor	r1, r1, r9
   1e494:	eor	r0, r0, sl
   1e498:	orrs	r0, r0, r1
   1e49c:	bne	1e670 <main@@Base+0x8594>
   1e4a0:	add	r7, r6, #8
   1e4a4:	mov	r0, r7
   1e4a8:	mov	r1, r4
   1e4ac:	bl	1a060 <main@@Base+0x3f84>
   1e4b0:	eor	r1, r1, r8
   1e4b4:	movw	r2, #28769	; 0x7061
   1e4b8:	movt	r2, #27000	; 0x6978
   1e4bc:	eor	r0, r0, r2
   1e4c0:	orrs	r0, r0, r1
   1e4c4:	bne	1e54c <main@@Base+0x8470>
   1e4c8:	add	r6, r6, #16
   1e4cc:	mov	r0, r6
   1e4d0:	mov	r1, r4
   1e4d4:	bl	1a060 <main@@Base+0x3f84>
   1e4d8:	movw	r2, #26990	; 0x696e
   1e4dc:	movt	r2, #29299	; 0x7273
   1e4e0:	eor	r7, r1, r2
   1e4e4:	mov	r8, r0
   1e4e8:	bfc	r8, #0, #16
   1e4ec:	movw	r1, #0
   1e4f0:	movt	r1, #26418	; 0x6732
   1e4f4:	eor	r1, r8, r1
   1e4f8:	orrs	r1, r1, r7
   1e4fc:	bne	1e564 <main@@Base+0x8488>
   1e500:	mov	r0, r5
   1e504:	mov	r1, r6
   1e508:	mov	r2, r4
   1e50c:	mov	r3, #6
   1e510:	bl	1a064 <main@@Base+0x3f88>
   1e514:	mov	r1, r0
   1e518:	cmp	r6, r0
   1e51c:	beq	1e5dc <main@@Base+0x8500>
   1e520:	mov	r0, r5
   1e524:	mov	r2, r4
   1e528:	add	r3, sp, #4
   1e52c:	bl	1ee58 <main@@Base+0x8d7c>
   1e530:	mov	r6, r0
   1e534:	ldr	r7, [sp, #4]
   1e538:	cmp	r7, #0
   1e53c:	beq	1e6b4 <main@@Base+0x85d8>
   1e540:	ldr	r0, [r5]
   1e544:	mov	r1, #1
   1e548:	b	1e5bc <main@@Base+0x84e0>
   1e54c:	mov	r0, r5
   1e550:	mov	r1, r7
   1e554:	mov	r2, r4
   1e558:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1e55c:	mov	r6, r0
   1e560:	b	1e5d4 <main@@Base+0x84f8>
   1e564:	and	r0, r0, #-16777216	; 0xff000000
   1e568:	eor	r0, r0, #1728053248	; 0x67000000
   1e56c:	orrs	r0, r0, r7
   1e570:	bne	1e5e8 <main@@Base+0x850c>
   1e574:	mov	r0, r5
   1e578:	mov	r1, r6
   1e57c:	mov	r2, r4
   1e580:	mov	r3, #5
   1e584:	bl	1a064 <main@@Base+0x3f88>
   1e588:	mov	r1, r0
   1e58c:	cmp	r6, r0
   1e590:	beq	1e5e4 <main@@Base+0x8508>
   1e594:	mov	r0, r5
   1e598:	mov	r2, r4
   1e59c:	add	r3, sp, #4
   1e5a0:	bl	1f19c <main@@Base+0x90c0>
   1e5a4:	mov	r6, r0
   1e5a8:	ldr	r7, [sp, #4]
   1e5ac:	cmp	r7, #0
   1e5b0:	beq	1e6b4 <main@@Base+0x85d8>
   1e5b4:	ldr	r0, [r5]
   1e5b8:	mov	r1, #0
   1e5bc:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   1e5c0:	cmp	r0, #0
   1e5c4:	beq	1e6b4 <main@@Base+0x85d8>
   1e5c8:	str	r7, [r0]
   1e5cc:	movw	r8, #25958	; 0x6566
   1e5d0:	movt	r8, #28786	; 0x7072
   1e5d4:	add	r7, sp, #8
   1e5d8:	b	1e684 <main@@Base+0x85a8>
   1e5dc:	mov	r6, r1
   1e5e0:	b	1e664 <main@@Base+0x8588>
   1e5e4:	mov	r6, r1
   1e5e8:	movw	r0, #0
   1e5ec:	movt	r0, #26418	; 0x6732
   1e5f0:	add	r0, r0, #65536	; 0x10000
   1e5f4:	eor	r0, r8, r0
   1e5f8:	orrs	r0, r0, r7
   1e5fc:	bne	1e664 <main@@Base+0x8588>
   1e600:	mov	r0, r5
   1e604:	mov	r1, r6
   1e608:	mov	r2, r4
   1e60c:	mov	r3, #6
   1e610:	bl	1a064 <main@@Base+0x3f88>
   1e614:	mov	r1, r0
   1e618:	cmp	r6, r0
   1e61c:	beq	1e460 <main@@Base+0x8384>
   1e620:	mov	r0, r5
   1e624:	mov	r2, r4
   1e628:	add	r3, sp, #4
   1e62c:	bl	1f8ec <main@@Base+0x9810>
   1e630:	mov	r6, r0
   1e634:	ldr	r7, [sp, #4]
   1e638:	cmp	r7, #0
   1e63c:	movw	r8, #25958	; 0x6566
   1e640:	movt	r8, #28786	; 0x7072
   1e644:	beq	1e6b4 <main@@Base+0x85d8>
   1e648:	ldr	r0, [r5]
   1e64c:	mov	r1, #2
   1e650:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   1e654:	cmp	r0, #0
   1e658:	beq	1e6b4 <main@@Base+0x85d8>
   1e65c:	str	r7, [r0]
   1e660:	b	1e5d4 <main@@Base+0x84f8>
   1e664:	movw	r8, #25958	; 0x6566
   1e668:	movt	r8, #28786	; 0x7072
   1e66c:	add	r7, sp, #8
   1e670:	mov	r0, r5
   1e674:	mov	r1, r6
   1e678:	mov	r2, r4
   1e67c:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1e680:	mov	r6, r0
   1e684:	mov	r0, r5
   1e688:	mov	r1, r6
   1e68c:	mov	r2, r4
   1e690:	mov	r3, r7
   1e694:	bl	1cf64 <main@@Base+0x6e88>
   1e698:	mov	r6, r0
   1e69c:	ldr	r0, [sp, #8]
   1e6a0:	cmp	r0, #0
   1e6a4:	bne	1e474 <main@@Base+0x8398>
   1e6a8:	ldr	r0, [r5, #24]
   1e6ac:	cmp	r0, #0
   1e6b0:	beq	1e6d8 <main@@Base+0x85fc>
   1e6b4:	mov	r0, r5
   1e6b8:	mov	r1, r6
   1e6bc:	mov	r2, r4
   1e6c0:	mov	r3, #33	; 0x21
   1e6c4:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1e6c8:	mov	r6, r0
   1e6cc:	mov	r0, r6
   1e6d0:	sub	sp, fp, #28
   1e6d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6d8:	ldr	r0, [r5]
   1e6dc:	bl	237e4 <flatcc_builder_end_table@@Base>
   1e6e0:	ldr	r1, [sp]
   1e6e4:	str	r0, [r1]
   1e6e8:	cmp	r0, #0
   1e6ec:	bne	1e6cc <main@@Base+0x85f0>
   1e6f0:	b	1e6b4 <main@@Base+0x85d8>
   1e6f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6f8:	add	fp, sp, #28
   1e6fc:	sub	sp, sp, #36	; 0x24
   1e700:	mov	r7, r3
   1e704:	mov	r4, r2
   1e708:	mov	r6, r1
   1e70c:	mov	r5, r0
   1e710:	mov	r0, #0
   1e714:	str	r0, [r3]
   1e718:	ldr	r0, [r5]
   1e71c:	mov	r1, #10
   1e720:	bl	230c4 <flatcc_builder_start_table@@Base>
   1e724:	cmp	r0, #0
   1e728:	beq	1e750 <main@@Base+0x8674>
   1e72c:	mov	r0, r5
   1e730:	mov	r1, r6
   1e734:	mov	r2, r4
   1e738:	mov	r3, #33	; 0x21
   1e73c:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1e740:	mov	r6, r0
   1e744:	mov	r0, r6
   1e748:	sub	sp, fp, #28
   1e74c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e750:	add	r0, sp, #28
   1e754:	str	r0, [sp]
   1e758:	mov	r0, r5
   1e75c:	mov	r1, r6
   1e760:	mov	r2, r4
   1e764:	mov	r3, #5
   1e768:	bl	28240 <flatcc_json_parser_prepare_unions@@Base>
   1e76c:	cmp	r0, r4
   1e770:	beq	1e72c <main@@Base+0x8650>
   1e774:	add	r3, sp, #32
   1e778:	mov	r0, r5
   1e77c:	mov	r1, r6
   1e780:	mov	r2, r4
   1e784:	bl	19f88 <main@@Base+0x3eac>
   1e788:	mov	r6, r0
   1e78c:	ldr	r0, [sp, #32]
   1e790:	cmp	r0, #0
   1e794:	str	r7, [sp, #20]
   1e798:	beq	1ee18 <main@@Base+0x8d3c>
   1e79c:	movw	r8, #24946	; 0x6172
   1e7a0:	movt	r8, #25448	; 0x6368
   1e7a4:	movw	r9, #29797	; 0x7465
   1e7a8:	movt	r9, #24931	; 0x6163
   1e7ac:	movw	r0, #24436	; 0x5f74
   1e7b0:	movt	r0, #29299	; 0x7273
   1e7b4:	movw	sl, #29817	; 0x7479
   1e7b8:	movt	sl, #28511	; 0x6f5f
   1e7bc:	add	r0, r0, #65536	; 0x10000
   1e7c0:	add	r0, r0, #16777216	; 0x1000000
   1e7c4:	str	r0, [sp, #24]
   1e7c8:	add	r7, sp, #32
   1e7cc:	b	1e808 <main@@Base+0x872c>
   1e7d0:	mov	r0, r5
   1e7d4:	mov	r1, r6
   1e7d8:	b	1e7ec <main@@Base+0x8710>
   1e7dc:	mov	r0, r5
   1e7e0:	mov	r1, r7
   1e7e4:	b	1e7ec <main@@Base+0x8710>
   1e7e8:	mov	r0, r5
   1e7ec:	mov	r2, r4
   1e7f0:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7f4:	mov	r1, r0
   1e7f8:	movw	r9, #29797	; 0x7465
   1e7fc:	movt	r9, #24931	; 0x6163
   1e800:	add	r7, sp, #32
   1e804:	b	1edf8 <main@@Base+0x8d1c>
   1e808:	mov	r0, r5
   1e80c:	mov	r1, r6
   1e810:	mov	r2, r4
   1e814:	bl	1a018 <main@@Base+0x3f3c>
   1e818:	mov	r6, r0
   1e81c:	mov	r1, r4
   1e820:	bl	1a060 <main@@Base+0x3f84>
   1e824:	subs	r2, r0, r9
   1e828:	sbcs	r2, r1, r8
   1e82c:	bcs	1e8f8 <main@@Base+0x881c>
   1e830:	eor	r3, r0, sl
   1e834:	movw	r2, #28005	; 0x6d65
   1e838:	movt	r2, #25441	; 0x6361
   1e83c:	eor	r2, r1, r2
   1e840:	orrs	r3, r3, r2
   1e844:	beq	1eab0 <main@@Base+0x89d4>
   1e848:	movw	r3, #28265	; 0x6e69
   1e84c:	movt	r3, #26479	; 0x676f
   1e850:	eor	r3, r0, r3
   1e854:	movw	r7, #29793	; 0x7461
   1e858:	movt	r7, #24942	; 0x616e
   1e85c:	eor	r1, r1, r7
   1e860:	orrs	r1, r3, r1
   1e864:	bne	1eb30 <main@@Base+0x8a54>
   1e868:	add	r6, r6, #8
   1e86c:	mov	r0, r6
   1e870:	mov	r1, r4
   1e874:	bl	1a060 <main@@Base+0x3f84>
   1e878:	ldr	r2, [sp, #24]
   1e87c:	eor	r2, r1, r2
   1e880:	bic	r0, r0, #255	; 0xff
   1e884:	movw	r3, #25856	; 0x6500
   1e888:	movt	r3, #31088	; 0x7970
   1e88c:	eor	r0, r0, r3
   1e890:	orrs	r0, r0, r2
   1e894:	bne	1eb94 <main@@Base+0x8ab8>
   1e898:	mov	r0, r5
   1e89c:	mov	r1, r6
   1e8a0:	mov	r2, r4
   1e8a4:	mov	r3, #7
   1e8a8:	bl	1a064 <main@@Base+0x3f88>
   1e8ac:	mov	r1, r0
   1e8b0:	cmp	r6, r0
   1e8b4:	add	r7, sp, #32
   1e8b8:	beq	1ede8 <main@@Base+0x8d0c>
   1e8bc:	ldr	r0, [sp, #28]
   1e8c0:	mov	r2, #3
   1e8c4:	str	r2, [sp]
   1e8c8:	str	r0, [sp, #4]
   1e8cc:	movw	r0, #37536	; 0x92a0
   1e8d0:	movt	r0, #4
   1e8d4:	str	r0, [sp, #8]
   1e8d8:	movw	r0, #64740	; 0xfce4
   1e8dc:	movt	r0, #1
   1e8e0:	str	r0, [sp, #12]
   1e8e4:	mov	r0, r5
   1e8e8:	mov	r2, r4
   1e8ec:	mov	r3, #1
   1e8f0:	bl	2842c <flatcc_json_parser_union_type@@Base>
   1e8f4:	b	1edf4 <main@@Base+0x8d18>
   1e8f8:	movw	r2, #26720	; 0x6860
   1e8fc:	movt	r2, #24419	; 0x5f63
   1e900:	subs	r2, r2, r0
   1e904:	movw	r2, #26990	; 0x696e
   1e908:	movt	r2, #28001	; 0x6d61
   1e90c:	sbcs	r2, r2, r1
   1e910:	bcc	1e9c0 <main@@Base+0x88e4>
   1e914:	eor	r0, r0, r9
   1e918:	eor	r1, r1, r8
   1e91c:	orrs	r0, r0, r1
   1e920:	bne	1eddc <main@@Base+0x8d00>
   1e924:	add	r6, r6, #8
   1e928:	mov	r0, r6
   1e92c:	mov	r1, r4
   1e930:	bl	1a060 <main@@Base+0x3f84>
   1e934:	movw	r2, #24436	; 0x5f74
   1e938:	movt	r2, #29299	; 0x7273
   1e93c:	eor	r2, r1, r2
   1e940:	bic	r0, r0, #255	; 0xff
   1e944:	movw	r3, #25856	; 0x6500
   1e948:	movt	r3, #31088	; 0x7970
   1e94c:	eor	r0, r0, r3
   1e950:	orrs	r0, r0, r2
   1e954:	bne	1eca8 <main@@Base+0x8bcc>
   1e958:	mov	r0, r5
   1e95c:	mov	r1, r6
   1e960:	mov	r2, r4
   1e964:	mov	r3, #7
   1e968:	bl	1a064 <main@@Base+0x3f88>
   1e96c:	mov	r1, r0
   1e970:	cmp	r6, r0
   1e974:	beq	1ede8 <main@@Base+0x8d0c>
   1e978:	ldr	r0, [sp, #28]
   1e97c:	mov	r2, #9
   1e980:	str	r2, [sp]
   1e984:	str	r0, [sp, #4]
   1e988:	movw	r0, #37568	; 0x92c0
   1e98c:	movt	r0, #4
   1e990:	str	r0, [sp, #8]
   1e994:	movw	r0, #64740	; 0xfce4
   1e998:	movt	r0, #1
   1e99c:	str	r0, [sp, #12]
   1e9a0:	movw	r0, #65036	; 0xfe0c
   1e9a4:	movt	r0, #1
   1e9a8:	str	r0, [sp, #16]
   1e9ac:	mov	r0, r5
   1e9b0:	mov	r2, r4
   1e9b4:	mov	r3, #4
   1e9b8:	bl	289d8 <flatcc_json_parser_union_type_vector@@Base>
   1e9bc:	b	1edf4 <main@@Base+0x8d18>
   1e9c0:	movw	r2, #26979	; 0x6963
   1e9c4:	movt	r2, #24427	; 0x5f6b
   1e9c8:	eor	r2, r0, r2
   1e9cc:	movw	r3, #25701	; 0x6465
   1e9d0:	movt	r3, #29545	; 0x7369
   1e9d4:	eor	r3, r1, r3
   1e9d8:	orrs	r2, r2, r3
   1e9dc:	beq	1ebfc <main@@Base+0x8b20>
   1e9e0:	movw	r2, #26721	; 0x6861
   1e9e4:	movt	r2, #24419	; 0x5f63
   1e9e8:	eor	r0, r0, r2
   1e9ec:	movw	r2, #26990	; 0x696e
   1e9f0:	movt	r2, #28001	; 0x6d61
   1e9f4:	eor	r1, r1, r2
   1e9f8:	orrs	r0, r0, r1
   1e9fc:	bne	1eddc <main@@Base+0x8d00>
   1ea00:	movw	r9, #25856	; 0x6500
   1ea04:	movt	r9, #31088	; 0x7970
   1ea08:	add	r7, r6, #8
   1ea0c:	mov	r0, r7
   1ea10:	mov	r1, r4
   1ea14:	bl	1a060 <main@@Base+0x3f84>
   1ea18:	movw	r2, #25460	; 0x6374
   1ea1c:	movt	r2, #29281	; 0x7261
   1ea20:	eor	r2, r1, r2
   1ea24:	movw	r3, #24436	; 0x5f74
   1ea28:	movt	r3, #25970	; 0x6572
   1ea2c:	eor	r3, r0, r3
   1ea30:	orrs	r2, r3, r2
   1ea34:	bne	1ed0c <main@@Base+0x8c30>
   1ea38:	add	r6, r6, #16
   1ea3c:	mov	r0, r6
   1ea40:	mov	r1, r4
   1ea44:	bl	1a060 <main@@Base+0x3f84>
   1ea48:	bic	r0, r1, #255	; 0xff
   1ea4c:	teq	r0, r9
   1ea50:	bne	1e7d0 <main@@Base+0x86f4>
   1ea54:	mov	r0, r5
   1ea58:	mov	r1, r6
   1ea5c:	mov	r2, r4
   1ea60:	mov	r3, #3
   1ea64:	bl	1a064 <main@@Base+0x3f88>
   1ea68:	mov	r1, r0
   1ea6c:	cmp	r6, r0
   1ea70:	beq	1e7e8 <main@@Base+0x870c>
   1ea74:	ldr	r0, [sp, #28]
   1ea78:	mov	r2, #1
   1ea7c:	str	r2, [sp]
   1ea80:	str	r0, [sp, #4]
   1ea84:	movw	r0, #37584	; 0x92d0
   1ea88:	movt	r0, #4
   1ea8c:	str	r0, [sp, #8]
   1ea90:	movw	r0, #64740	; 0xfce4
   1ea94:	movt	r0, #1
   1ea98:	str	r0, [sp, #12]
   1ea9c:	mov	r0, r5
   1eaa0:	mov	r2, r4
   1eaa4:	mov	r3, #0
   1eaa8:	bl	2842c <flatcc_json_parser_union_type@@Base>
   1eaac:	b	1e7f4 <main@@Base+0x8718>
   1eab0:	add	r6, r6, #8
   1eab4:	mov	r0, r6
   1eab8:	mov	r1, r4
   1eabc:	bl	1a060 <main@@Base+0x3f84>
   1eac0:	bfc	r1, #0, #16
   1eac4:	movw	r0, #0
   1eac8:	movt	r0, #28773	; 0x7065
   1eacc:	teq	r1, r0
   1ead0:	bne	1eddc <main@@Base+0x8d00>
   1ead4:	mov	r0, r5
   1ead8:	mov	r1, r6
   1eadc:	mov	r2, r4
   1eae0:	mov	r3, #2
   1eae4:	bl	1a064 <main@@Base+0x3f88>
   1eae8:	mov	r1, r0
   1eaec:	cmp	r6, r0
   1eaf0:	beq	1ede8 <main@@Base+0x8d0c>
   1eaf4:	ldr	r0, [sp, #28]
   1eaf8:	mov	r2, #7
   1eafc:	str	r2, [sp]
   1eb00:	str	r0, [sp, #4]
   1eb04:	movw	r0, #37552	; 0x92b0
   1eb08:	movt	r0, #4
   1eb0c:	str	r0, [sp, #8]
   1eb10:	movw	r0, #64740	; 0xfce4
   1eb14:	movt	r0, #1
   1eb18:	str	r0, [sp, #12]
   1eb1c:	mov	r0, r5
   1eb20:	mov	r2, r4
   1eb24:	mov	r3, #3
   1eb28:	bl	2842c <flatcc_json_parser_union_type@@Base>
   1eb2c:	b	1edf4 <main@@Base+0x8d18>
   1eb30:	and	r0, r0, #-16777216	; 0xff000000
   1eb34:	eor	r0, r0, #1862270976	; 0x6f000000
   1eb38:	orrs	r0, r0, r2
   1eb3c:	bne	1ec8c <main@@Base+0x8bb0>
   1eb40:	mov	r0, r5
   1eb44:	mov	r1, r6
   1eb48:	mov	r2, r4
   1eb4c:	mov	r3, #5
   1eb50:	bl	1a064 <main@@Base+0x3f88>
   1eb54:	mov	r1, r0
   1eb58:	cmp	r6, r0
   1eb5c:	add	r7, sp, #32
   1eb60:	beq	1ede8 <main@@Base+0x8d0c>
   1eb64:	ldr	r0, [sp, #28]
   1eb68:	mov	r2, #7
   1eb6c:	str	r2, [sp]
   1eb70:	str	r0, [sp, #4]
   1eb74:	movw	r0, #64740	; 0xfce4
   1eb78:	movt	r0, #1
   1eb7c:	str	r0, [sp, #8]
   1eb80:	mov	r0, r5
   1eb84:	mov	r2, r4
   1eb88:	mov	r3, #3
   1eb8c:	bl	28308 <flatcc_json_parser_union@@Base>
   1eb90:	b	1edf4 <main@@Base+0x8d18>
   1eb94:	bfc	r1, #0, #16
   1eb98:	movw	r0, #0
   1eb9c:	movt	r0, #29556	; 0x7374
   1eba0:	teq	r1, r0
   1eba4:	add	r7, sp, #32
   1eba8:	bne	1eddc <main@@Base+0x8d00>
   1ebac:	mov	r0, r5
   1ebb0:	mov	r1, r6
   1ebb4:	mov	r2, r4
   1ebb8:	mov	r3, #2
   1ebbc:	bl	1a064 <main@@Base+0x3f88>
   1ebc0:	mov	r1, r0
   1ebc4:	cmp	r6, r0
   1ebc8:	beq	1ede8 <main@@Base+0x8d0c>
   1ebcc:	ldr	r0, [sp, #28]
   1ebd0:	mov	r2, #3
   1ebd4:	str	r2, [sp]
   1ebd8:	str	r0, [sp, #4]
   1ebdc:	movw	r0, #64740	; 0xfce4
   1ebe0:	movt	r0, #1
   1ebe4:	str	r0, [sp, #8]
   1ebe8:	mov	r0, r5
   1ebec:	mov	r2, r4
   1ebf0:	mov	r3, #1
   1ebf4:	bl	28308 <flatcc_json_parser_union@@Base>
   1ebf8:	b	1edf4 <main@@Base+0x8d18>
   1ebfc:	add	r6, r6, #8
   1ec00:	mov	r0, r6
   1ec04:	mov	r1, r4
   1ec08:	bl	1a060 <main@@Base+0x3f84>
   1ec0c:	lsr	r0, r0, #16
   1ec10:	orr	r0, r0, r1, lsl #16
   1ec14:	movw	r2, #28773	; 0x7065
   1ec18:	movt	r2, #29817	; 0x7479
   1ec1c:	eor	r0, r0, r2
   1ec20:	movw	r2, #27487	; 0x6b5f
   1ec24:	eor	r2, r2, r1, lsr #16
   1ec28:	orrs	r0, r0, r2
   1ec2c:	bne	1ed80 <main@@Base+0x8ca4>
   1ec30:	mov	r0, r5
   1ec34:	mov	r1, r6
   1ec38:	mov	r2, r4
   1ec3c:	mov	r3, #6
   1ec40:	bl	1a064 <main@@Base+0x3f88>
   1ec44:	mov	r1, r0
   1ec48:	cmp	r6, r0
   1ec4c:	beq	1ede8 <main@@Base+0x8d0c>
   1ec50:	ldr	r0, [sp, #28]
   1ec54:	mov	r2, #5
   1ec58:	str	r2, [sp]
   1ec5c:	str	r0, [sp, #4]
   1ec60:	movw	r0, #37600	; 0x92e0
   1ec64:	movt	r0, #4
   1ec68:	str	r0, [sp, #8]
   1ec6c:	movw	r0, #64740	; 0xfce4
   1ec70:	movt	r0, #1
   1ec74:	str	r0, [sp, #12]
   1ec78:	mov	r0, r5
   1ec7c:	mov	r2, r4
   1ec80:	mov	r3, #2
   1ec84:	bl	2842c <flatcc_json_parser_union_type@@Base>
   1ec88:	b	1edf4 <main@@Base+0x8d18>
   1ec8c:	mov	r0, r5
   1ec90:	mov	r1, r6
   1ec94:	mov	r2, r4
   1ec98:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1ec9c:	mov	r1, r0
   1eca0:	add	r7, sp, #32
   1eca4:	b	1edf8 <main@@Base+0x8d1c>
   1eca8:	bfc	r1, #0, #16
   1ecac:	movw	r0, #0
   1ecb0:	movt	r0, #29299	; 0x7273
   1ecb4:	teq	r1, r0
   1ecb8:	bne	1eddc <main@@Base+0x8d00>
   1ecbc:	mov	r0, r5
   1ecc0:	mov	r1, r6
   1ecc4:	mov	r2, r4
   1ecc8:	mov	r3, #2
   1eccc:	bl	1a064 <main@@Base+0x3f88>
   1ecd0:	mov	r1, r0
   1ecd4:	cmp	r6, r0
   1ecd8:	beq	1ede8 <main@@Base+0x8d0c>
   1ecdc:	ldr	r0, [sp, #28]
   1ece0:	mov	r2, #9
   1ece4:	str	r2, [sp]
   1ece8:	str	r0, [sp, #4]
   1ecec:	movw	r0, #64740	; 0xfce4
   1ecf0:	movt	r0, #1
   1ecf4:	str	r0, [sp, #8]
   1ecf8:	mov	r0, r5
   1ecfc:	mov	r2, r4
   1ed00:	mov	r3, #4
   1ed04:	bl	2877c <flatcc_json_parser_union_vector@@Base>
   1ed08:	b	1edf4 <main@@Base+0x8d18>
   1ed0c:	movw	r2, #29281	; 0x7261
   1ed10:	eor	r2, r2, r1, lsr #16
   1ed14:	lsr	r0, r0, #16
   1ed18:	orr	r0, r0, r1, lsl #16
   1ed1c:	movw	r1, #25970	; 0x6572
   1ed20:	movt	r1, #25460	; 0x6374
   1ed24:	eor	r0, r0, r1
   1ed28:	orrs	r0, r0, r2
   1ed2c:	bne	1e7dc <main@@Base+0x8700>
   1ed30:	mov	r0, r5
   1ed34:	mov	r1, r7
   1ed38:	mov	r2, r4
   1ed3c:	mov	r3, #6
   1ed40:	bl	1a064 <main@@Base+0x3f88>
   1ed44:	mov	r1, r0
   1ed48:	cmp	r7, r0
   1ed4c:	beq	1e7e8 <main@@Base+0x870c>
   1ed50:	ldr	r0, [sp, #28]
   1ed54:	mov	r2, #1
   1ed58:	str	r2, [sp]
   1ed5c:	str	r0, [sp, #4]
   1ed60:	movw	r0, #64740	; 0xfce4
   1ed64:	movt	r0, #1
   1ed68:	str	r0, [sp, #8]
   1ed6c:	mov	r0, r5
   1ed70:	mov	r2, r4
   1ed74:	mov	r3, #0
   1ed78:	bl	28308 <flatcc_json_parser_union@@Base>
   1ed7c:	b	1e7f4 <main@@Base+0x8718>
   1ed80:	and	r0, r1, #-16777216	; 0xff000000
   1ed84:	teq	r0, #1795162112	; 0x6b000000
   1ed88:	bne	1eddc <main@@Base+0x8d00>
   1ed8c:	mov	r0, r5
   1ed90:	mov	r1, r6
   1ed94:	mov	r2, r4
   1ed98:	mov	r3, #1
   1ed9c:	bl	1a064 <main@@Base+0x3f88>
   1eda0:	mov	r1, r0
   1eda4:	cmp	r6, r0
   1eda8:	beq	1ede8 <main@@Base+0x8d0c>
   1edac:	ldr	r0, [sp, #28]
   1edb0:	mov	r2, #5
   1edb4:	str	r2, [sp]
   1edb8:	str	r0, [sp, #4]
   1edbc:	movw	r0, #64740	; 0xfce4
   1edc0:	movt	r0, #1
   1edc4:	str	r0, [sp, #8]
   1edc8:	mov	r0, r5
   1edcc:	mov	r2, r4
   1edd0:	mov	r3, #2
   1edd4:	bl	28308 <flatcc_json_parser_union@@Base>
   1edd8:	b	1edf4 <main@@Base+0x8d18>
   1eddc:	mov	r0, r5
   1ede0:	mov	r1, r6
   1ede4:	b	1edec <main@@Base+0x8d10>
   1ede8:	mov	r0, r5
   1edec:	mov	r2, r4
   1edf0:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1edf4:	mov	r1, r0
   1edf8:	mov	r0, r5
   1edfc:	mov	r2, r4
   1ee00:	mov	r3, r7
   1ee04:	bl	1cf64 <main@@Base+0x6e88>
   1ee08:	mov	r6, r0
   1ee0c:	ldr	r0, [sp, #32]
   1ee10:	cmp	r0, #0
   1ee14:	bne	1e808 <main@@Base+0x872c>
   1ee18:	ldr	r0, [r5, #24]
   1ee1c:	cmp	r0, #0
   1ee20:	bne	1e72c <main@@Base+0x8650>
   1ee24:	ldr	r3, [sp, #28]
   1ee28:	mov	r0, r5
   1ee2c:	mov	r1, r6
   1ee30:	mov	r2, r4
   1ee34:	bl	282ac <flatcc_json_parser_finalize_unions@@Base>
   1ee38:	mov	r6, r0
   1ee3c:	ldr	r0, [r5]
   1ee40:	bl	237e4 <flatcc_builder_end_table@@Base>
   1ee44:	ldr	r1, [sp, #20]
   1ee48:	str	r0, [r1]
   1ee4c:	cmp	r0, #0
   1ee50:	bne	1e744 <main@@Base+0x8668>
   1ee54:	b	1e72c <main@@Base+0x8650>
   1ee58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee5c:	add	fp, sp, #28
   1ee60:	sub	sp, sp, #20
   1ee64:	mov	r6, r3
   1ee68:	mov	r4, r2
   1ee6c:	mov	r9, r1
   1ee70:	mov	r5, r0
   1ee74:	mov	r0, #0
   1ee78:	str	r0, [r3]
   1ee7c:	ldr	r0, [r5]
   1ee80:	mov	r1, #2
   1ee84:	bl	230c4 <flatcc_builder_start_table@@Base>
   1ee88:	cmp	r0, #0
   1ee8c:	bne	1f15c <main@@Base+0x9080>
   1ee90:	str	r6, [sp, #4]
   1ee94:	add	r3, sp, #16
   1ee98:	mov	r0, r5
   1ee9c:	mov	r1, r9
   1eea0:	mov	r2, r4
   1eea4:	bl	19f88 <main@@Base+0x3eac>
   1eea8:	mov	r9, r0
   1eeac:	ldr	r0, [sp, #16]
   1eeb0:	cmp	r0, #0
   1eeb4:	beq	1f150 <main@@Base+0x9074>
   1eeb8:	movw	sl, #24929	; 0x6161
   1eebc:	movt	sl, #24929	; 0x6161
   1eec0:	movw	r7, #25186	; 0x6262
   1eec4:	movt	r7, #24418	; 0x5f62
   1eec8:	add	r8, sp, #16
   1eecc:	mov	r0, r5
   1eed0:	mov	r1, r9
   1eed4:	mov	r2, r4
   1eed8:	bl	1a018 <main@@Base+0x3f3c>
   1eedc:	mov	r6, r0
   1eee0:	mov	r1, r4
   1eee4:	bl	1a060 <main@@Base+0x3f84>
   1eee8:	eor	r1, r1, sl
   1eeec:	eor	r0, r0, r7
   1eef0:	orrs	r0, r0, r1
   1eef4:	bne	1f004 <main@@Base+0x8f28>
   1eef8:	add	r6, r6, #8
   1eefc:	mov	r0, r6
   1ef00:	mov	r1, r4
   1ef04:	bl	1a060 <main@@Base+0x3f84>
   1ef08:	lsr	r2, r0, #8
   1ef0c:	orr	r2, r2, r1, lsl #24
   1ef10:	movw	r3, #28787	; 0x7073
   1ef14:	movt	r3, #29797	; 0x7465
   1ef18:	eor	r2, r2, r3
   1ef1c:	movw	r3, #24435	; 0x5f73
   1ef20:	movt	r3, #98	; 0x62
   1ef24:	eor	r3, r3, r1, lsr #8
   1ef28:	orrs	r2, r2, r3
   1ef2c:	bne	1ef88 <main@@Base+0x8eac>
   1ef30:	mov	r0, r5
   1ef34:	mov	r1, r6
   1ef38:	mov	r2, r4
   1ef3c:	mov	r3, #7
   1ef40:	bl	1a064 <main@@Base+0x3f88>
   1ef44:	mov	r7, r0
   1ef48:	cmp	r6, r0
   1ef4c:	beq	1f01c <main@@Base+0x8f40>
   1ef50:	mov	r0, #0
   1ef54:	str	r0, [sp, #12]
   1ef58:	str	r0, [sp, #8]
   1ef5c:	mov	r0, r5
   1ef60:	mov	r1, r7
   1ef64:	mov	r2, r4
   1ef68:	add	r9, sp, #8
   1ef6c:	mov	r3, r9
   1ef70:	bl	1c8ac <main@@Base+0x67d0>
   1ef74:	mov	r6, r0
   1ef78:	cmp	r7, r0
   1ef7c:	beq	1f034 <main@@Base+0x8f58>
   1ef80:	mov	r9, r6
   1ef84:	b	1f060 <main@@Base+0x8f84>
   1ef88:	movw	r2, #29791	; 0x745f
   1ef8c:	movt	r2, #24946	; 0x6172
   1ef90:	eor	r0, r0, r2
   1ef94:	movw	r2, #29556	; 0x7374
   1ef98:	movt	r2, #25183	; 0x625f
   1ef9c:	eor	r1, r1, r2
   1efa0:	orrs	r0, r0, r1
   1efa4:	bne	1f004 <main@@Base+0x8f28>
   1efa8:	mov	r0, r5
   1efac:	mov	r1, r6
   1efb0:	mov	r2, r4
   1efb4:	mov	r3, #8
   1efb8:	bl	1a064 <main@@Base+0x3f88>
   1efbc:	mov	r7, r0
   1efc0:	cmp	r6, r0
   1efc4:	beq	1f01c <main@@Base+0x8f40>
   1efc8:	mov	r0, #0
   1efcc:	str	r0, [sp, #8]
   1efd0:	mov	r0, r5
   1efd4:	mov	r1, r7
   1efd8:	mov	r2, r4
   1efdc:	add	r9, sp, #8
   1efe0:	mov	r3, r9
   1efe4:	bl	1ca90 <main@@Base+0x69b4>
   1efe8:	mov	r6, r0
   1efec:	cmp	r7, r0
   1eff0:	beq	1f0dc <main@@Base+0x9000>
   1eff4:	mov	r9, r6
   1eff8:	movw	r7, #25186	; 0x6262
   1effc:	movt	r7, #24418	; 0x5f62
   1f000:	b	1f110 <main@@Base+0x9034>
   1f004:	mov	r0, r5
   1f008:	mov	r1, r6
   1f00c:	mov	r2, r4
   1f010:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1f014:	mov	r9, r0
   1f018:	b	1f0b4 <main@@Base+0x8fd8>
   1f01c:	mov	r0, r5
   1f020:	mov	r1, r7
   1f024:	mov	r2, r4
   1f028:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1f02c:	mov	r9, r0
   1f030:	b	1f0ac <main@@Base+0x8fd0>
   1f034:	str	r9, [sp]
   1f038:	mov	r0, r5
   1f03c:	mov	r1, r6
   1f040:	mov	r2, r4
   1f044:	movw	r3, #37416	; 0x9228
   1f048:	movt	r3, #4
   1f04c:	bl	1c940 <main@@Base+0x6864>
   1f050:	mov	r9, r0
   1f054:	cmp	r0, r6
   1f058:	cmpne	r9, r4
   1f05c:	beq	1f15c <main@@Base+0x9080>
   1f060:	mov	r7, sl
   1f064:	ldr	r6, [sp, #8]
   1f068:	ldr	sl, [sp, #12]
   1f06c:	orrs	r0, r6, sl
   1f070:	bne	1f080 <main@@Base+0x8fa4>
   1f074:	ldrb	r0, [r5, #8]
   1f078:	tst	r0, #2
   1f07c:	beq	1f0a8 <main@@Base+0x8fcc>
   1f080:	ldr	r0, [r5]
   1f084:	mov	r1, #0
   1f088:	mov	r2, #8
   1f08c:	mov	r3, #8
   1f090:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1f094:	cmp	r0, #0
   1f098:	beq	1f15c <main@@Base+0x9080>
   1f09c:	mov	r2, r6
   1f0a0:	mov	r3, sl
   1f0a4:	bl	1ca68 <main@@Base+0x698c>
   1f0a8:	mov	sl, r7
   1f0ac:	movw	r7, #25186	; 0x6262
   1f0b0:	movt	r7, #24418	; 0x5f62
   1f0b4:	mov	r0, r5
   1f0b8:	mov	r1, r9
   1f0bc:	mov	r2, r4
   1f0c0:	mov	r3, r8
   1f0c4:	bl	1cf64 <main@@Base+0x6e88>
   1f0c8:	mov	r9, r0
   1f0cc:	ldr	r0, [sp, #16]
   1f0d0:	cmp	r0, #0
   1f0d4:	bne	1eecc <main@@Base+0x8df0>
   1f0d8:	b	1f150 <main@@Base+0x9074>
   1f0dc:	str	r9, [sp]
   1f0e0:	mov	r0, r5
   1f0e4:	mov	r1, r6
   1f0e8:	mov	r2, r4
   1f0ec:	movw	r3, #37428	; 0x9234
   1f0f0:	movt	r3, #4
   1f0f4:	bl	1cb20 <main@@Base+0x6a44>
   1f0f8:	mov	r9, r0
   1f0fc:	cmp	r0, r6
   1f100:	movw	r7, #25186	; 0x6262
   1f104:	movt	r7, #24418	; 0x5f62
   1f108:	cmpne	r9, r4
   1f10c:	beq	1f15c <main@@Base+0x9080>
   1f110:	ldr	r6, [sp, #8]
   1f114:	cmp	r6, #0
   1f118:	bne	1f128 <main@@Base+0x904c>
   1f11c:	ldrb	r0, [r5, #8]
   1f120:	tst	r0, #2
   1f124:	beq	1f0b4 <main@@Base+0x8fd8>
   1f128:	ldr	r0, [r5]
   1f12c:	mov	r1, #1
   1f130:	mov	r2, #4
   1f134:	mov	r3, #4
   1f138:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1f13c:	cmp	r0, #0
   1f140:	beq	1f15c <main@@Base+0x9080>
   1f144:	mov	r1, r6
   1f148:	bl	1cc38 <main@@Base+0x6b5c>
   1f14c:	b	1f0b4 <main@@Base+0x8fd8>
   1f150:	ldr	r0, [r5, #24]
   1f154:	cmp	r0, #0
   1f158:	beq	1f180 <main@@Base+0x90a4>
   1f15c:	mov	r0, r5
   1f160:	mov	r1, r9
   1f164:	mov	r2, r4
   1f168:	mov	r3, #33	; 0x21
   1f16c:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1f170:	mov	r9, r0
   1f174:	mov	r0, r9
   1f178:	sub	sp, fp, #28
   1f17c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f180:	ldr	r0, [r5]
   1f184:	bl	237e4 <flatcc_builder_end_table@@Base>
   1f188:	ldr	r1, [sp, #4]
   1f18c:	str	r0, [r1]
   1f190:	cmp	r0, #0
   1f194:	bne	1f174 <main@@Base+0x9098>
   1f198:	b	1f15c <main@@Base+0x9080>
   1f19c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1a0:	add	fp, sp, #28
   1f1a4:	sub	sp, sp, #44	; 0x2c
   1f1a8:	mov	r5, r3
   1f1ac:	mov	r4, r2
   1f1b0:	mov	r8, r1
   1f1b4:	mov	sl, r0
   1f1b8:	mov	r0, #0
   1f1bc:	str	r0, [r3]
   1f1c0:	ldr	r0, [sl]
   1f1c4:	mov	r1, #9
   1f1c8:	bl	230c4 <flatcc_builder_start_table@@Base>
   1f1cc:	cmp	r0, #0
   1f1d0:	beq	1f1f8 <main@@Base+0x911c>
   1f1d4:	mov	r0, sl
   1f1d8:	mov	r1, r8
   1f1dc:	mov	r2, r4
   1f1e0:	mov	r3, #33	; 0x21
   1f1e4:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1f1e8:	mov	r8, r0
   1f1ec:	mov	r0, r8
   1f1f0:	sub	sp, fp, #28
   1f1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1f8:	str	r5, [sp, #8]
   1f1fc:	sub	r3, fp, #32
   1f200:	mov	r0, sl
   1f204:	mov	r1, r8
   1f208:	mov	r2, r4
   1f20c:	bl	19f88 <main@@Base+0x3eac>
   1f210:	mov	r8, r0
   1f214:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f218:	cmp	r0, #0
   1f21c:	beq	1f8c4 <main@@Base+0x97e8>
   1f220:	movw	r1, #24929	; 0x6161
   1f224:	movt	r1, #24929	; 0x6161
   1f228:	add	r9, sp, #24
   1f22c:	movw	r0, #257	; 0x101
   1f230:	movt	r0, #257	; 0x101
   1f234:	add	r0, r1, r0
   1f238:	str	r0, [sp, #16]
   1f23c:	movw	r0, #514	; 0x202
   1f240:	movt	r0, #514	; 0x202
   1f244:	add	r0, r1, r0
   1f248:	str	r0, [sp, #20]
   1f24c:	movw	r0, #771	; 0x303
   1f250:	movt	r0, #771	; 0x303
   1f254:	add	r0, r1, r0
   1f258:	str	r0, [sp, #12]
   1f25c:	mov	r0, sl
   1f260:	mov	r1, r8
   1f264:	mov	r2, r4
   1f268:	bl	1a018 <main@@Base+0x3f3c>
   1f26c:	mov	r7, r0
   1f270:	mov	r1, r4
   1f274:	bl	1a060 <main@@Base+0x3f84>
   1f278:	mov	r6, r1
   1f27c:	movw	r1, #25442	; 0x6362
   1f280:	movt	r1, #25443	; 0x6363
   1f284:	cmp	r6, r1
   1f288:	bhi	1f318 <main@@Base+0x923c>
   1f28c:	movw	r1, #13108	; 0x3334
   1f290:	movt	r1, #12594	; 0x3132
   1f294:	eor	r5, r0, r1
   1f298:	movw	r1, #24929	; 0x6161
   1f29c:	movt	r1, #24929	; 0x6161
   1f2a0:	eor	r0, r6, r1
   1f2a4:	orrs	r0, r5, r0
   1f2a8:	bne	1f388 <main@@Base+0x92ac>
   1f2ac:	add	r6, r7, #8
   1f2b0:	mov	r0, r6
   1f2b4:	mov	r1, r4
   1f2b8:	bl	1a060 <main@@Base+0x3f84>
   1f2bc:	and	r0, r1, #-16777216	; 0xff000000
   1f2c0:	teq	r0, #889192448	; 0x35000000
   1f2c4:	bne	1f6a4 <main@@Base+0x95c8>
   1f2c8:	mov	r0, sl
   1f2cc:	mov	r1, r6
   1f2d0:	mov	r2, r4
   1f2d4:	mov	r3, #1
   1f2d8:	bl	1a064 <main@@Base+0x3f88>
   1f2dc:	mov	r7, r0
   1f2e0:	cmp	r6, r0
   1f2e4:	beq	1f6b0 <main@@Base+0x95d4>
   1f2e8:	mov	r0, #0
   1f2ec:	str	r0, [sp, #24]
   1f2f0:	mov	r0, sl
   1f2f4:	mov	r1, r7
   1f2f8:	mov	r2, r4
   1f2fc:	mov	r3, r9
   1f300:	bl	1ca90 <main@@Base+0x69b4>
   1f304:	mov	r6, r0
   1f308:	cmp	r7, r0
   1f30c:	beq	1f6c8 <main@@Base+0x95ec>
   1f310:	mov	r8, r6
   1f314:	b	1f6f4 <main@@Base+0x9618>
   1f318:	movw	r1, #13108	; 0x3334
   1f31c:	movt	r1, #12594	; 0x3132
   1f320:	eor	r5, r0, r1
   1f324:	ldr	r0, [sp, #20]
   1f328:	eor	r0, r6, r0
   1f32c:	orrs	r0, r5, r0
   1f330:	bne	1f3dc <main@@Base+0x9300>
   1f334:	mov	r0, sl
   1f338:	mov	r1, r7
   1f33c:	mov	r2, r4
   1f340:	mov	r3, #8
   1f344:	bl	1a064 <main@@Base+0x3f88>
   1f348:	mov	r6, r0
   1f34c:	cmp	r7, r0
   1f350:	beq	1f438 <main@@Base+0x935c>
   1f354:	mov	r0, #0
   1f358:	str	r0, [sp, #28]
   1f35c:	str	r0, [sp, #24]
   1f360:	mov	r0, sl
   1f364:	mov	r1, r6
   1f368:	mov	r2, r4
   1f36c:	mov	r3, r9
   1f370:	bl	1c8ac <main@@Base+0x67d0>
   1f374:	mov	r7, r0
   1f378:	cmp	r6, r0
   1f37c:	beq	1f4a4 <main@@Base+0x93c8>
   1f380:	mov	r8, r7
   1f384:	b	1f4d0 <main@@Base+0x93f4>
   1f388:	teq	r6, r1
   1f38c:	bne	1f4fc <main@@Base+0x9420>
   1f390:	mov	r0, sl
   1f394:	mov	r1, r7
   1f398:	mov	r2, r4
   1f39c:	mov	r3, #4
   1f3a0:	bl	1a064 <main@@Base+0x3f88>
   1f3a4:	mov	r1, r0
   1f3a8:	cmp	r7, r0
   1f3ac:	beq	1f4f8 <main@@Base+0x941c>
   1f3b0:	mov	r0, sl
   1f3b4:	mov	r2, r4
   1f3b8:	add	r3, sp, #36	; 0x24
   1f3bc:	bl	280f4 <flatcc_json_parser_build_string@@Base>
   1f3c0:	mov	r8, r0
   1f3c4:	ldr	r0, [sp, #36]	; 0x24
   1f3c8:	cmp	r0, #0
   1f3cc:	beq	1f1d4 <main@@Base+0x90f8>
   1f3d0:	ldr	r0, [sl]
   1f3d4:	mov	r1, #0
   1f3d8:	b	1f5b8 <main@@Base+0x94dc>
   1f3dc:	movw	r0, #25443	; 0x6363
   1f3e0:	movt	r0, #25443	; 0x6363
   1f3e4:	teq	r6, r0
   1f3e8:	bne	1f5d4 <main@@Base+0x94f8>
   1f3ec:	mov	r0, sl
   1f3f0:	mov	r1, r7
   1f3f4:	mov	r2, r4
   1f3f8:	mov	r3, #4
   1f3fc:	bl	1a064 <main@@Base+0x3f88>
   1f400:	mov	r1, r0
   1f404:	cmp	r7, r0
   1f408:	beq	1f5d0 <main@@Base+0x94f4>
   1f40c:	mov	r0, sl
   1f410:	mov	r2, r4
   1f414:	add	r3, sp, #36	; 0x24
   1f418:	bl	280f4 <flatcc_json_parser_build_string@@Base>
   1f41c:	mov	r8, r0
   1f420:	ldr	r0, [sp, #36]	; 0x24
   1f424:	cmp	r0, #0
   1f428:	beq	1f1d4 <main@@Base+0x90f8>
   1f42c:	ldr	r0, [sl]
   1f430:	mov	r1, #4
   1f434:	b	1f5b8 <main@@Base+0x94dc>
   1f438:	add	r6, r6, #8
   1f43c:	mov	r0, r6
   1f440:	mov	r1, r4
   1f444:	bl	1a060 <main@@Base+0x3f84>
   1f448:	and	r0, r1, #-16777216	; 0xff000000
   1f44c:	teq	r0, #889192448	; 0x35000000
   1f450:	bne	1f6a4 <main@@Base+0x95c8>
   1f454:	mov	r0, sl
   1f458:	mov	r1, r6
   1f45c:	mov	r2, r4
   1f460:	mov	r3, #1
   1f464:	bl	1a064 <main@@Base+0x3f88>
   1f468:	mov	r7, r0
   1f46c:	cmp	r6, r0
   1f470:	beq	1f6b0 <main@@Base+0x95d4>
   1f474:	mov	r0, #0
   1f478:	str	r0, [sp, #24]
   1f47c:	mov	r0, sl
   1f480:	mov	r1, r7
   1f484:	mov	r2, r4
   1f488:	mov	r3, r9
   1f48c:	bl	1ca90 <main@@Base+0x69b4>
   1f490:	mov	r6, r0
   1f494:	cmp	r7, r0
   1f498:	beq	1f7e8 <main@@Base+0x970c>
   1f49c:	mov	r8, r6
   1f4a0:	b	1f814 <main@@Base+0x9738>
   1f4a4:	str	r9, [sp]
   1f4a8:	mov	r0, sl
   1f4ac:	mov	r1, r7
   1f4b0:	mov	r2, r4
   1f4b4:	movw	r3, #37464	; 0x9258
   1f4b8:	movt	r3, #4
   1f4bc:	bl	1c940 <main@@Base+0x6864>
   1f4c0:	mov	r8, r0
   1f4c4:	cmp	r0, r7
   1f4c8:	cmpne	r8, r4
   1f4cc:	beq	1f1d4 <main@@Base+0x90f8>
   1f4d0:	ldr	r6, [sp, #24]
   1f4d4:	ldr	r7, [sp, #28]
   1f4d8:	orrs	r0, r6, r7
   1f4dc:	bne	1f4ec <main@@Base+0x9410>
   1f4e0:	ldrb	r0, [sl, #8]
   1f4e4:	tst	r0, #2
   1f4e8:	beq	1f8a0 <main@@Base+0x97c4>
   1f4ec:	ldr	r0, [sl]
   1f4f0:	mov	r1, #5
   1f4f4:	b	1f7bc <main@@Base+0x96e0>
   1f4f8:	mov	r7, r1
   1f4fc:	ldr	r0, [sp, #16]
   1f500:	eor	r0, r6, r0
   1f504:	orrs	r0, r5, r0
   1f508:	bne	1f560 <main@@Base+0x9484>
   1f50c:	mov	r0, sl
   1f510:	mov	r1, r7
   1f514:	mov	r2, r4
   1f518:	mov	r3, #8
   1f51c:	bl	1a064 <main@@Base+0x3f88>
   1f520:	mov	r6, r0
   1f524:	cmp	r7, r0
   1f528:	beq	1f6a4 <main@@Base+0x95c8>
   1f52c:	mov	r0, #0
   1f530:	str	r0, [sp, #28]
   1f534:	str	r0, [sp, #24]
   1f538:	mov	r0, sl
   1f53c:	mov	r1, r6
   1f540:	mov	r2, r4
   1f544:	mov	r3, r9
   1f548:	bl	1c8ac <main@@Base+0x67d0>
   1f54c:	mov	r7, r0
   1f550:	cmp	r6, r0
   1f554:	beq	1f718 <main@@Base+0x963c>
   1f558:	mov	r8, r7
   1f55c:	b	1f744 <main@@Base+0x9668>
   1f560:	movw	r0, #25186	; 0x6262
   1f564:	movt	r0, #25186	; 0x6262
   1f568:	teq	r6, r0
   1f56c:	bne	1f6b0 <main@@Base+0x95d4>
   1f570:	mov	r0, sl
   1f574:	mov	r1, r7
   1f578:	mov	r2, r4
   1f57c:	mov	r3, #4
   1f580:	bl	1a064 <main@@Base+0x3f88>
   1f584:	mov	r1, r0
   1f588:	cmp	r7, r0
   1f58c:	beq	1f7e0 <main@@Base+0x9704>
   1f590:	mov	r0, sl
   1f594:	mov	r2, r4
   1f598:	add	r3, sp, #36	; 0x24
   1f59c:	bl	280f4 <flatcc_json_parser_build_string@@Base>
   1f5a0:	mov	r8, r0
   1f5a4:	ldr	r0, [sp, #36]	; 0x24
   1f5a8:	cmp	r0, #0
   1f5ac:	beq	1f1d4 <main@@Base+0x90f8>
   1f5b0:	ldr	r0, [sl]
   1f5b4:	mov	r1, #2
   1f5b8:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   1f5bc:	cmp	r0, #0
   1f5c0:	beq	1f1d4 <main@@Base+0x90f8>
   1f5c4:	ldr	r1, [sp, #36]	; 0x24
   1f5c8:	str	r1, [r0]
   1f5cc:	b	1f8a0 <main@@Base+0x97c4>
   1f5d0:	mov	r7, r1
   1f5d4:	ldr	r0, [sp, #12]
   1f5d8:	eor	r0, r6, r0
   1f5dc:	orrs	r0, r5, r0
   1f5e0:	bne	1f6b0 <main@@Base+0x95d4>
   1f5e4:	mov	r0, sl
   1f5e8:	mov	r1, r7
   1f5ec:	mov	r2, r4
   1f5f0:	mov	r3, #8
   1f5f4:	bl	1a064 <main@@Base+0x3f88>
   1f5f8:	mov	r6, r0
   1f5fc:	cmp	r7, r0
   1f600:	beq	1f638 <main@@Base+0x955c>
   1f604:	mov	r0, #0
   1f608:	str	r0, [sp, #28]
   1f60c:	str	r0, [sp, #24]
   1f610:	mov	r0, sl
   1f614:	mov	r1, r6
   1f618:	mov	r2, r4
   1f61c:	mov	r3, r9
   1f620:	bl	1c8ac <main@@Base+0x67d0>
   1f624:	mov	r7, r0
   1f628:	cmp	r6, r0
   1f62c:	beq	1f76c <main@@Base+0x9690>
   1f630:	mov	r8, r7
   1f634:	b	1f798 <main@@Base+0x96bc>
   1f638:	add	r6, r6, #8
   1f63c:	mov	r0, r6
   1f640:	mov	r1, r4
   1f644:	bl	1a060 <main@@Base+0x3f84>
   1f648:	and	r0, r1, #-16777216	; 0xff000000
   1f64c:	teq	r0, #889192448	; 0x35000000
   1f650:	bne	1f6a4 <main@@Base+0x95c8>
   1f654:	mov	r0, sl
   1f658:	mov	r1, r6
   1f65c:	mov	r2, r4
   1f660:	mov	r3, #1
   1f664:	bl	1a064 <main@@Base+0x3f88>
   1f668:	mov	r7, r0
   1f66c:	cmp	r6, r0
   1f670:	beq	1f6b0 <main@@Base+0x95d4>
   1f674:	mov	r0, #0
   1f678:	str	r0, [sp, #24]
   1f67c:	mov	r0, sl
   1f680:	mov	r1, r7
   1f684:	mov	r2, r4
   1f688:	mov	r3, r9
   1f68c:	bl	1ca90 <main@@Base+0x69b4>
   1f690:	mov	r6, r0
   1f694:	cmp	r7, r0
   1f698:	beq	1f838 <main@@Base+0x975c>
   1f69c:	mov	r8, r6
   1f6a0:	b	1f864 <main@@Base+0x9788>
   1f6a4:	mov	r0, sl
   1f6a8:	mov	r1, r6
   1f6ac:	b	1f6b8 <main@@Base+0x95dc>
   1f6b0:	mov	r0, sl
   1f6b4:	mov	r1, r7
   1f6b8:	mov	r2, r4
   1f6bc:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1f6c0:	mov	r8, r0
   1f6c4:	b	1f8a0 <main@@Base+0x97c4>
   1f6c8:	str	r9, [sp]
   1f6cc:	mov	r0, sl
   1f6d0:	mov	r1, r6
   1f6d4:	mov	r2, r4
   1f6d8:	movw	r3, #37440	; 0x9240
   1f6dc:	movt	r3, #4
   1f6e0:	bl	1cb20 <main@@Base+0x6a44>
   1f6e4:	mov	r8, r0
   1f6e8:	cmp	r0, r6
   1f6ec:	cmpne	r8, r4
   1f6f0:	beq	1f1d4 <main@@Base+0x90f8>
   1f6f4:	ldr	r6, [sp, #24]
   1f6f8:	cmp	r6, #0
   1f6fc:	bne	1f70c <main@@Base+0x9630>
   1f700:	ldrb	r0, [sl, #8]
   1f704:	tst	r0, #2
   1f708:	beq	1f8a0 <main@@Base+0x97c4>
   1f70c:	ldr	r0, [sl]
   1f710:	mov	r1, #1
   1f714:	b	1f884 <main@@Base+0x97a8>
   1f718:	str	r9, [sp]
   1f71c:	mov	r0, sl
   1f720:	mov	r1, r7
   1f724:	mov	r2, r4
   1f728:	movw	r3, #37452	; 0x924c
   1f72c:	movt	r3, #4
   1f730:	bl	1c940 <main@@Base+0x6864>
   1f734:	mov	r8, r0
   1f738:	cmp	r0, r7
   1f73c:	cmpne	r8, r4
   1f740:	beq	1f1d4 <main@@Base+0x90f8>
   1f744:	ldr	r6, [sp, #24]
   1f748:	ldr	r7, [sp, #28]
   1f74c:	orrs	r0, r6, r7
   1f750:	bne	1f760 <main@@Base+0x9684>
   1f754:	ldrb	r0, [sl, #8]
   1f758:	tst	r0, #2
   1f75c:	beq	1f8a0 <main@@Base+0x97c4>
   1f760:	ldr	r0, [sl]
   1f764:	mov	r1, #3
   1f768:	b	1f7bc <main@@Base+0x96e0>
   1f76c:	str	r9, [sp]
   1f770:	mov	r0, sl
   1f774:	mov	r1, r7
   1f778:	mov	r2, r4
   1f77c:	movw	r3, #37488	; 0x9270
   1f780:	movt	r3, #4
   1f784:	bl	1c940 <main@@Base+0x6864>
   1f788:	mov	r8, r0
   1f78c:	cmp	r0, r7
   1f790:	cmpne	r8, r4
   1f794:	beq	1f1d4 <main@@Base+0x90f8>
   1f798:	ldr	r6, [sp, #24]
   1f79c:	ldr	r7, [sp, #28]
   1f7a0:	orrs	r0, r6, r7
   1f7a4:	bne	1f7b4 <main@@Base+0x96d8>
   1f7a8:	ldrb	r0, [sl, #8]
   1f7ac:	tst	r0, #2
   1f7b0:	beq	1f8a0 <main@@Base+0x97c4>
   1f7b4:	ldr	r0, [sl]
   1f7b8:	mov	r1, #7
   1f7bc:	mov	r2, #8
   1f7c0:	mov	r3, #8
   1f7c4:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1f7c8:	cmp	r0, #0
   1f7cc:	beq	1f1d4 <main@@Base+0x90f8>
   1f7d0:	mov	r2, r6
   1f7d4:	mov	r3, r7
   1f7d8:	bl	1ca68 <main@@Base+0x698c>
   1f7dc:	b	1f8a0 <main@@Base+0x97c4>
   1f7e0:	mov	r0, sl
   1f7e4:	b	1f6b8 <main@@Base+0x95dc>
   1f7e8:	str	r9, [sp]
   1f7ec:	mov	r0, sl
   1f7f0:	mov	r1, r6
   1f7f4:	mov	r2, r4
   1f7f8:	movw	r3, #37476	; 0x9264
   1f7fc:	movt	r3, #4
   1f800:	bl	1cb20 <main@@Base+0x6a44>
   1f804:	mov	r8, r0
   1f808:	cmp	r0, r6
   1f80c:	cmpne	r8, r4
   1f810:	beq	1f1d4 <main@@Base+0x90f8>
   1f814:	ldr	r6, [sp, #24]
   1f818:	cmp	r6, #0
   1f81c:	bne	1f82c <main@@Base+0x9750>
   1f820:	ldrb	r0, [sl, #8]
   1f824:	tst	r0, #2
   1f828:	beq	1f8a0 <main@@Base+0x97c4>
   1f82c:	ldr	r0, [sl]
   1f830:	mov	r1, #6
   1f834:	b	1f884 <main@@Base+0x97a8>
   1f838:	str	r9, [sp]
   1f83c:	mov	r0, sl
   1f840:	mov	r1, r6
   1f844:	mov	r2, r4
   1f848:	movw	r3, #37500	; 0x927c
   1f84c:	movt	r3, #4
   1f850:	bl	1cb20 <main@@Base+0x6a44>
   1f854:	mov	r8, r0
   1f858:	cmp	r0, r6
   1f85c:	cmpne	r8, r4
   1f860:	beq	1f1d4 <main@@Base+0x90f8>
   1f864:	ldr	r6, [sp, #24]
   1f868:	cmp	r6, #0
   1f86c:	bne	1f87c <main@@Base+0x97a0>
   1f870:	ldrb	r0, [sl, #8]
   1f874:	tst	r0, #2
   1f878:	beq	1f8a0 <main@@Base+0x97c4>
   1f87c:	ldr	r0, [sl]
   1f880:	mov	r1, #8
   1f884:	mov	r2, #4
   1f888:	mov	r3, #4
   1f88c:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1f890:	cmp	r0, #0
   1f894:	beq	1f1d4 <main@@Base+0x90f8>
   1f898:	mov	r1, r6
   1f89c:	bl	1cc38 <main@@Base+0x6b5c>
   1f8a0:	mov	r0, sl
   1f8a4:	mov	r1, r8
   1f8a8:	mov	r2, r4
   1f8ac:	sub	r3, fp, #32
   1f8b0:	bl	1cf64 <main@@Base+0x6e88>
   1f8b4:	mov	r8, r0
   1f8b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f8bc:	cmp	r0, #0
   1f8c0:	bne	1f25c <main@@Base+0x9180>
   1f8c4:	ldr	r0, [sl, #24]
   1f8c8:	cmp	r0, #0
   1f8cc:	bne	1f1d4 <main@@Base+0x90f8>
   1f8d0:	ldr	r0, [sl]
   1f8d4:	bl	237e4 <flatcc_builder_end_table@@Base>
   1f8d8:	ldr	r1, [sp, #8]
   1f8dc:	str	r0, [r1]
   1f8e0:	cmp	r0, #0
   1f8e4:	bne	1f1ec <main@@Base+0x9110>
   1f8e8:	b	1f1d4 <main@@Base+0x90f8>
   1f8ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8f0:	add	fp, sp, #28
   1f8f4:	sub	sp, sp, #20
   1f8f8:	mov	r6, r3
   1f8fc:	mov	r4, r2
   1f900:	mov	r8, r1
   1f904:	mov	r5, r0
   1f908:	mov	r0, #0
   1f90c:	str	r0, [r3]
   1f910:	ldr	r0, [r5]
   1f914:	mov	r1, #2
   1f918:	bl	230c4 <flatcc_builder_start_table@@Base>
   1f91c:	cmp	r0, #0
   1f920:	beq	1f948 <main@@Base+0x986c>
   1f924:	mov	r0, r5
   1f928:	mov	r1, r8
   1f92c:	mov	r2, r4
   1f930:	mov	r3, #33	; 0x21
   1f934:	bl	26958 <flatcc_json_parser_set_error@@Base>
   1f938:	mov	r8, r0
   1f93c:	mov	r0, r8
   1f940:	sub	sp, fp, #28
   1f944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f948:	str	r6, [sp, #4]
   1f94c:	add	r3, sp, #16
   1f950:	mov	r0, r5
   1f954:	mov	r1, r8
   1f958:	mov	r2, r4
   1f95c:	bl	19f88 <main@@Base+0x3eac>
   1f960:	mov	r8, r0
   1f964:	ldr	r0, [sp, #16]
   1f968:	cmp	r0, #0
   1f96c:	beq	1fc24 <main@@Base+0x9b48>
   1f970:	movw	r9, #24929	; 0x6161
   1f974:	movt	r9, #24929	; 0x6161
   1f978:	movw	sl, #25186	; 0x6262
   1f97c:	movt	sl, #24418	; 0x5f62
   1f980:	add	r6, sp, #16
   1f984:	b	1fa68 <main@@Base+0x998c>
   1f988:	str	r8, [sp]
   1f98c:	mov	r0, r5
   1f990:	mov	r1, r6
   1f994:	mov	r2, r4
   1f998:	movw	r3, #37512	; 0x9288
   1f99c:	movt	r3, #4
   1f9a0:	bl	1cb20 <main@@Base+0x6a44>
   1f9a4:	mov	r8, r0
   1f9a8:	cmp	r0, r6
   1f9ac:	cmpne	r8, r4
   1f9b0:	beq	1f924 <main@@Base+0x9848>
   1f9b4:	ldr	r6, [sp, #8]
   1f9b8:	cmp	r6, #0
   1f9bc:	bne	1f9cc <main@@Base+0x98f0>
   1f9c0:	ldrb	r0, [r5, #8]
   1f9c4:	tst	r0, #2
   1f9c8:	beq	1fbfc <main@@Base+0x9b20>
   1f9cc:	ldr	r0, [r5]
   1f9d0:	mov	r1, #1
   1f9d4:	mov	r2, #4
   1f9d8:	mov	r3, #4
   1f9dc:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1f9e0:	cmp	r0, #0
   1f9e4:	beq	1f924 <main@@Base+0x9848>
   1f9e8:	mov	r1, r6
   1f9ec:	bl	1cc38 <main@@Base+0x6b5c>
   1f9f0:	b	1fbfc <main@@Base+0x9b20>
   1f9f4:	str	r8, [sp]
   1f9f8:	mov	r0, r5
   1f9fc:	mov	r1, r6
   1fa00:	mov	r2, r4
   1fa04:	movw	r3, #37524	; 0x9294
   1fa08:	movt	r3, #4
   1fa0c:	bl	1c940 <main@@Base+0x6864>
   1fa10:	mov	r8, r0
   1fa14:	cmp	r0, r6
   1fa18:	cmpne	r8, r4
   1fa1c:	beq	1f924 <main@@Base+0x9848>
   1fa20:	ldr	r6, [sp, #8]
   1fa24:	ldr	r7, [sp, #12]
   1fa28:	orrs	r0, r6, r7
   1fa2c:	bne	1fa3c <main@@Base+0x9960>
   1fa30:	ldrb	r0, [r5, #8]
   1fa34:	tst	r0, #2
   1fa38:	beq	1fbfc <main@@Base+0x9b20>
   1fa3c:	ldr	r0, [r5]
   1fa40:	mov	r1, #0
   1fa44:	mov	r2, #8
   1fa48:	mov	r3, #8
   1fa4c:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1fa50:	cmp	r0, #0
   1fa54:	beq	1f924 <main@@Base+0x9848>
   1fa58:	mov	r2, r6
   1fa5c:	mov	r3, r7
   1fa60:	bl	1ca68 <main@@Base+0x698c>
   1fa64:	b	1fbfc <main@@Base+0x9b20>
   1fa68:	mov	r0, r5
   1fa6c:	mov	r1, r8
   1fa70:	mov	r2, r4
   1fa74:	bl	1a018 <main@@Base+0x3f3c>
   1fa78:	mov	r7, r0
   1fa7c:	mov	r1, r4
   1fa80:	bl	1a060 <main@@Base+0x3f84>
   1fa84:	eor	r1, r1, r9
   1fa88:	eor	r0, r0, sl
   1fa8c:	orrs	r0, r0, r1
   1fa90:	bne	1fb44 <main@@Base+0x9a68>
   1fa94:	add	r6, r7, #8
   1fa98:	mov	r0, r6
   1fa9c:	mov	r1, r4
   1faa0:	bl	1a060 <main@@Base+0x3f84>
   1faa4:	movw	r2, #29556	; 0x7374
   1faa8:	movt	r2, #25183	; 0x625f
   1faac:	eor	r2, r1, r2
   1fab0:	movw	r3, #29791	; 0x745f
   1fab4:	movt	r3, #24946	; 0x6172
   1fab8:	eor	r3, r0, r3
   1fabc:	orrs	r2, r3, r2
   1fac0:	bne	1fb5c <main@@Base+0x9a80>
   1fac4:	add	r6, r7, #16
   1fac8:	mov	r0, r6
   1facc:	mov	r1, r4
   1fad0:	bl	1a060 <main@@Base+0x3f84>
   1fad4:	movw	r2, #25968	; 0x6570
   1fad8:	movt	r2, #29556	; 0x7374
   1fadc:	eor	r1, r1, r2
   1fae0:	and	r0, r0, #-16777216	; 0xff000000
   1fae4:	eor	r0, r0, #1929379840	; 0x73000000
   1fae8:	orrs	r0, r0, r1
   1faec:	bne	1fbdc <main@@Base+0x9b00>
   1faf0:	mov	r0, r5
   1faf4:	mov	r1, r6
   1faf8:	mov	r2, r4
   1fafc:	mov	r3, #5
   1fb00:	bl	1a064 <main@@Base+0x3f88>
   1fb04:	mov	r7, r0
   1fb08:	cmp	r6, r0
   1fb0c:	add	r8, sp, #8
   1fb10:	beq	1fbe8 <main@@Base+0x9b0c>
   1fb14:	mov	r0, #0
   1fb18:	str	r0, [sp, #8]
   1fb1c:	mov	r0, r5
   1fb20:	mov	r1, r7
   1fb24:	mov	r2, r4
   1fb28:	mov	r3, r8
   1fb2c:	bl	1ca90 <main@@Base+0x69b4>
   1fb30:	mov	r6, r0
   1fb34:	cmp	r7, r0
   1fb38:	beq	1f988 <main@@Base+0x98ac>
   1fb3c:	mov	r8, r6
   1fb40:	b	1f9b4 <main@@Base+0x98d8>
   1fb44:	mov	r0, r5
   1fb48:	mov	r1, r7
   1fb4c:	mov	r2, r4
   1fb50:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1fb54:	mov	r8, r0
   1fb58:	b	1fc00 <main@@Base+0x9b24>
   1fb5c:	movw	r2, #24435	; 0x5f73
   1fb60:	movt	r2, #98	; 0x62
   1fb64:	eor	r2, r2, r1, lsr #8
   1fb68:	lsr	r0, r0, #8
   1fb6c:	orr	r0, r0, r1, lsl #24
   1fb70:	movw	r1, #28787	; 0x7073
   1fb74:	movt	r1, #29797	; 0x7465
   1fb78:	eor	r0, r0, r1
   1fb7c:	orrs	r0, r0, r2
   1fb80:	bne	1fbdc <main@@Base+0x9b00>
   1fb84:	mov	r0, r5
   1fb88:	mov	r1, r6
   1fb8c:	mov	r2, r4
   1fb90:	mov	r3, #7
   1fb94:	bl	1a064 <main@@Base+0x3f88>
   1fb98:	mov	r7, r0
   1fb9c:	cmp	r6, r0
   1fba0:	add	r8, sp, #8
   1fba4:	beq	1fbe8 <main@@Base+0x9b0c>
   1fba8:	mov	r0, #0
   1fbac:	str	r0, [sp, #12]
   1fbb0:	str	r0, [sp, #8]
   1fbb4:	mov	r0, r5
   1fbb8:	mov	r1, r7
   1fbbc:	mov	r2, r4
   1fbc0:	mov	r3, r8
   1fbc4:	bl	1c8ac <main@@Base+0x67d0>
   1fbc8:	mov	r6, r0
   1fbcc:	cmp	r7, r0
   1fbd0:	beq	1f9f4 <main@@Base+0x9918>
   1fbd4:	mov	r8, r6
   1fbd8:	b	1fa20 <main@@Base+0x9944>
   1fbdc:	mov	r0, r5
   1fbe0:	mov	r1, r6
   1fbe4:	b	1fbf0 <main@@Base+0x9b14>
   1fbe8:	mov	r0, r5
   1fbec:	mov	r1, r7
   1fbf0:	mov	r2, r4
   1fbf4:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   1fbf8:	mov	r8, r0
   1fbfc:	add	r6, sp, #16
   1fc00:	mov	r0, r5
   1fc04:	mov	r1, r8
   1fc08:	mov	r2, r4
   1fc0c:	mov	r3, r6
   1fc10:	bl	1cf64 <main@@Base+0x6e88>
   1fc14:	mov	r8, r0
   1fc18:	ldr	r0, [sp, #16]
   1fc1c:	cmp	r0, #0
   1fc20:	bne	1fa68 <main@@Base+0x998c>
   1fc24:	ldr	r0, [r5, #24]
   1fc28:	cmp	r0, #0
   1fc2c:	bne	1f924 <main@@Base+0x9848>
   1fc30:	ldr	r0, [r5]
   1fc34:	bl	237e4 <flatcc_builder_end_table@@Base>
   1fc38:	ldr	r1, [sp, #4]
   1fc3c:	str	r0, [r1]
   1fc40:	cmp	r0, #0
   1fc44:	bne	1f93c <main@@Base+0x9860>
   1fc48:	b	1f924 <main@@Base+0x9848>
   1fc4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fc50:	add	fp, sp, #24
   1fc54:	mov	r8, r3
   1fc58:	mov	r5, r2
   1fc5c:	mov	r7, r1
   1fc60:	mov	r6, r0
   1fc64:	mov	r0, r1
   1fc68:	mov	r1, r2
   1fc6c:	bl	1a060 <main@@Base+0x3f84>
   1fc70:	movw	r2, #24946	; 0x6172
   1fc74:	movt	r2, #17256	; 0x4368
   1fc78:	eor	r1, r1, r2
   1fc7c:	movw	r2, #29797	; 0x7465
   1fc80:	movt	r2, #24931	; 0x6163
   1fc84:	eor	r0, r0, r2
   1fc88:	orrs	r0, r0, r1
   1fc8c:	bne	1fcdc <main@@Base+0x9c00>
   1fc90:	add	r4, r7, #8
   1fc94:	mov	r0, r4
   1fc98:	mov	r1, r5
   1fc9c:	bl	1a060 <main@@Base+0x3f84>
   1fca0:	and	r0, r1, #-16777216	; 0xff000000
   1fca4:	teq	r0, #1912602624	; 0x72000000
   1fca8:	bne	1fcdc <main@@Base+0x9c00>
   1fcac:	mov	r0, r4
   1fcb0:	mov	r1, r5
   1fcb4:	mov	r2, #1
   1fcb8:	bl	1d0ec <main@@Base+0x7010>
   1fcbc:	cmp	r0, r4
   1fcc0:	beq	1fcdc <main@@Base+0x9c00>
   1fcc4:	mov	r1, r0
   1fcc8:	mov	r0, r6
   1fccc:	mov	r2, r5
   1fcd0:	mov	r3, r8
   1fcd4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fcd8:	b	1d64c <main@@Base+0x7570>
   1fcdc:	mov	r0, r7
   1fce0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fce4:	push	{r4, r5, r6, sl, fp, lr}
   1fce8:	add	fp, sp, #16
   1fcec:	mov	r4, r2
   1fcf0:	mov	r5, r0
   1fcf4:	ldr	r6, [fp, #8]
   1fcf8:	mov	r0, #0
   1fcfc:	str	r0, [r6]
   1fd00:	cmp	r3, #11
   1fd04:	bhi	1fd54 <main@@Base+0x9c78>
   1fd08:	add	r0, pc, #0
   1fd0c:	ldr	pc, [r0, r3, lsl #2]
   1fd10:	muleq	r1, r0, sp
   1fd14:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   1fd18:	andeq	pc, r1, r0, lsr #27
   1fd1c:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   1fd20:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   1fd24:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   1fd28:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   1fd2c:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   1fd30:			; <UNDEFINED> instruction: 0x0001fdb4
   1fd34:	andeq	pc, r1, r0, asr #26
   1fd38:	andeq	pc, r1, r0, asr #26
   1fd3c:	andeq	pc, r1, ip, asr sp	; <UNPREDICTABLE>
   1fd40:	mov	r0, r5
   1fd44:	mov	r2, r4
   1fd48:	mov	r3, r6
   1fd4c:	bl	20108 <main@@Base+0xa02c>
   1fd50:	b	1fdc4 <main@@Base+0x9ce8>
   1fd54:	cmp	r3, #255	; 0xff
   1fd58:	bne	1fd70 <main@@Base+0x9c94>
   1fd5c:	mov	r0, r5
   1fd60:	mov	r2, r4
   1fd64:	mov	r3, r6
   1fd68:	bl	280f4 <flatcc_json_parser_build_string@@Base>
   1fd6c:	b	1fdc4 <main@@Base+0x9ce8>
   1fd70:	ldrb	r0, [r5, #8]
   1fd74:	tst	r0, #1
   1fd78:	bne	1fdfc <main@@Base+0x9d20>
   1fd7c:	mov	r0, r5
   1fd80:	mov	r2, r4
   1fd84:	mov	r3, #15
   1fd88:	pop	{r4, r5, r6, sl, fp, lr}
   1fd8c:	b	26958 <flatcc_json_parser_set_error@@Base>
   1fd90:	mov	r0, r5
   1fd94:	mov	r2, r4
   1fd98:	pop	{r4, r5, r6, sl, fp, lr}
   1fd9c:	b	1db1c <main@@Base+0x7a40>
   1fda0:	mov	r0, r5
   1fda4:	mov	r2, r4
   1fda8:	mov	r3, r6
   1fdac:	bl	1fe34 <main@@Base+0x9d58>
   1fdb0:	b	1fdc4 <main@@Base+0x9ce8>
   1fdb4:	mov	r0, r5
   1fdb8:	mov	r2, r4
   1fdbc:	mov	r3, r6
   1fdc0:	bl	20080 <main@@Base+0x9fa4>
   1fdc4:	mov	r1, r0
   1fdc8:	ldr	r0, [r5, #24]
   1fdcc:	cmp	r0, #0
   1fdd0:	bne	1fde0 <main@@Base+0x9d04>
   1fdd4:	ldr	r0, [r6]
   1fdd8:	cmp	r0, #0
   1fddc:	beq	1fde8 <main@@Base+0x9d0c>
   1fde0:	mov	r0, r1
   1fde4:	pop	{r4, r5, r6, sl, fp, pc}
   1fde8:	mov	r0, r5
   1fdec:	mov	r2, r4
   1fdf0:	mov	r3, #33	; 0x21
   1fdf4:	pop	{r4, r5, r6, sl, fp, lr}
   1fdf8:	b	26958 <flatcc_json_parser_set_error@@Base>
   1fdfc:	mov	r0, r5
   1fe00:	mov	r2, r4
   1fe04:	pop	{r4, r5, r6, sl, fp, lr}
   1fe08:	b	2727c <flatcc_json_parser_generic_json@@Base>
   1fe0c:	add	r0, r0, #1
   1fe10:	uxtb	r1, r0
   1fe14:	cmp	r1, #12
   1fe18:	movhi	r0, #0
   1fe1c:	bxhi	lr
   1fe20:	sxtb	r0, r0
   1fe24:	movw	r1, #22816	; 0x5920
   1fe28:	movt	r1, #3
   1fe2c:	ldr	r0, [r1, r0, lsl #2]
   1fe30:	bx	lr
   1fe34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe38:	add	fp, sp, #28
   1fe3c:	sub	sp, sp, #20
   1fe40:	mov	r7, r3
   1fe44:	mov	r4, r2
   1fe48:	mov	r6, r1
   1fe4c:	mov	r5, r0
   1fe50:	mov	r0, #0
   1fe54:	str	r0, [r3]
   1fe58:	ldr	r0, [r5]
   1fe5c:	mov	r1, #1
   1fe60:	bl	230c4 <flatcc_builder_start_table@@Base>
   1fe64:	cmp	r0, #0
   1fe68:	bne	2005c <main@@Base+0x9f80>
   1fe6c:	add	r3, sp, #16
   1fe70:	mov	r0, r5
   1fe74:	mov	r1, r6
   1fe78:	mov	r2, r4
   1fe7c:	bl	19f88 <main@@Base+0x3eac>
   1fe80:	mov	r6, r0
   1fe84:	ldr	r0, [sp, #16]
   1fe88:	cmp	r0, #0
   1fe8c:	str	r7, [sp, #8]
   1fe90:	beq	20038 <main@@Base+0x9f5c>
   1fe94:	movw	r8, #28530	; 0x6f72
   1fe98:	movt	r8, #29559	; 0x7377
   1fe9c:	movw	sl, #24948	; 0x6174
   1fea0:	movt	sl, #25695	; 0x645f
   1fea4:	add	r9, sp, #16
   1fea8:	b	1ff20 <main@@Base+0x9e44>
   1feac:	str	r6, [sp]
   1feb0:	mov	r0, r5
   1feb4:	mov	r1, r8
   1feb8:	mov	r2, r4
   1febc:	movw	r3, #37616	; 0x92f0
   1fec0:	movt	r3, #4
   1fec4:	bl	1c774 <main@@Base+0x6698>
   1fec8:	mov	r6, r0
   1fecc:	cmp	r0, r8
   1fed0:	cmpne	r6, r4
   1fed4:	beq	2005c <main@@Base+0x9f80>
   1fed8:	ldr	r8, [sp, #12]
   1fedc:	cmp	r8, #0
   1fee0:	bne	1fef0 <main@@Base+0x9e14>
   1fee4:	ldrb	r0, [r5, #8]
   1fee8:	tst	r0, #2
   1feec:	beq	1ff14 <main@@Base+0x9e38>
   1fef0:	ldr	r0, [r5]
   1fef4:	mov	r1, #0
   1fef8:	mov	r2, #4
   1fefc:	mov	r3, #4
   1ff00:	bl	23ed8 <flatcc_builder_table_add@@Base>
   1ff04:	cmp	r0, #0
   1ff08:	beq	2005c <main@@Base+0x9f80>
   1ff0c:	mov	r1, r8
   1ff10:	bl	1c88c <main@@Base+0x67b0>
   1ff14:	movw	r8, #28530	; 0x6f72
   1ff18:	movt	r8, #29559	; 0x7377
   1ff1c:	b	20014 <main@@Base+0x9f38>
   1ff20:	mov	r0, r5
   1ff24:	mov	r1, r6
   1ff28:	mov	r2, r4
   1ff2c:	bl	1a018 <main@@Base+0x3f3c>
   1ff30:	mov	r6, r0
   1ff34:	mov	r1, r4
   1ff38:	bl	1a060 <main@@Base+0x3f84>
   1ff3c:	eor	r1, r1, r8
   1ff40:	eor	r0, r0, sl
   1ff44:	orrs	r0, r0, r1
   1ff48:	bne	1fff4 <main@@Base+0x9f18>
   1ff4c:	add	r7, r6, #8
   1ff50:	mov	r0, r7
   1ff54:	mov	r1, r4
   1ff58:	bl	1a060 <main@@Base+0x3f84>
   1ff5c:	movw	r2, #25451	; 0x636b
   1ff60:	movt	r2, #29793	; 0x7461
   1ff64:	eor	r1, r1, r2
   1ff68:	movw	r2, #24941	; 0x616d
   1ff6c:	movt	r2, #24420	; 0x5f64
   1ff70:	eor	r0, r0, r2
   1ff74:	orrs	r0, r0, r1
   1ff78:	bne	20000 <main@@Base+0x9f24>
   1ff7c:	add	r6, r6, #16
   1ff80:	mov	r0, r6
   1ff84:	mov	r1, r4
   1ff88:	bl	1a060 <main@@Base+0x3f84>
   1ff8c:	bic	r0, r1, #255	; 0xff
   1ff90:	movw	r1, #25856	; 0x6500
   1ff94:	movt	r1, #24935	; 0x6167
   1ff98:	teq	r0, r1
   1ff9c:	bne	1fff4 <main@@Base+0x9f18>
   1ffa0:	mov	r0, r5
   1ffa4:	mov	r1, r6
   1ffa8:	mov	r2, r4
   1ffac:	mov	r3, #3
   1ffb0:	bl	1a064 <main@@Base+0x3f88>
   1ffb4:	mov	r7, r0
   1ffb8:	cmp	r6, r0
   1ffbc:	beq	20000 <main@@Base+0x9f24>
   1ffc0:	mov	r0, #0
   1ffc4:	str	r0, [sp, #12]
   1ffc8:	mov	r0, r5
   1ffcc:	mov	r1, r7
   1ffd0:	mov	r2, r4
   1ffd4:	add	r6, sp, #12
   1ffd8:	mov	r3, r6
   1ffdc:	bl	1c6e4 <main@@Base+0x6608>
   1ffe0:	mov	r8, r0
   1ffe4:	cmp	r7, r0
   1ffe8:	beq	1feac <main@@Base+0x9dd0>
   1ffec:	mov	r6, r8
   1fff0:	b	1fed8 <main@@Base+0x9dfc>
   1fff4:	mov	r0, r5
   1fff8:	mov	r1, r6
   1fffc:	b	20008 <main@@Base+0x9f2c>
   20000:	mov	r0, r5
   20004:	mov	r1, r7
   20008:	mov	r2, r4
   2000c:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   20010:	mov	r6, r0
   20014:	mov	r0, r5
   20018:	mov	r1, r6
   2001c:	mov	r2, r4
   20020:	mov	r3, r9
   20024:	bl	1cf64 <main@@Base+0x6e88>
   20028:	mov	r6, r0
   2002c:	ldr	r0, [sp, #16]
   20030:	cmp	r0, #0
   20034:	bne	1ff20 <main@@Base+0x9e44>
   20038:	ldr	r0, [r5, #24]
   2003c:	cmp	r0, #0
   20040:	bne	2005c <main@@Base+0x9f80>
   20044:	ldr	r0, [r5]
   20048:	bl	237e4 <flatcc_builder_end_table@@Base>
   2004c:	ldr	r1, [sp, #8]
   20050:	str	r0, [r1]
   20054:	cmp	r0, #0
   20058:	bne	20074 <main@@Base+0x9f98>
   2005c:	mov	r0, r5
   20060:	mov	r1, r6
   20064:	mov	r2, r4
   20068:	mov	r3, #33	; 0x21
   2006c:	bl	26958 <flatcc_json_parser_set_error@@Base>
   20070:	mov	r6, r0
   20074:	mov	r0, r6
   20078:	sub	sp, fp, #28
   2007c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20080:	push	{r4, r5, r6, r7, fp, lr}
   20084:	add	fp, sp, #16
   20088:	mov	r7, r3
   2008c:	mov	r4, r2
   20090:	mov	r6, r1
   20094:	mov	r5, r0
   20098:	mov	r0, #0
   2009c:	str	r0, [r3]
   200a0:	ldr	r0, [r5]
   200a4:	mov	r1, #2
   200a8:	mov	r2, #2
   200ac:	bl	226c4 <flatcc_builder_start_struct@@Base>
   200b0:	cmp	r0, #0
   200b4:	beq	200f0 <main@@Base+0xa014>
   200b8:	mov	r3, r0
   200bc:	mov	r0, r5
   200c0:	mov	r1, r6
   200c4:	mov	r2, r4
   200c8:	bl	20190 <main@@Base+0xa0b4>
   200cc:	mov	r6, r0
   200d0:	cmp	r0, r4
   200d4:	beq	200f0 <main@@Base+0xa014>
   200d8:	ldr	r0, [r5]
   200dc:	bl	227a0 <flatcc_builder_end_struct@@Base>
   200e0:	str	r0, [r7]
   200e4:	cmp	r0, #0
   200e8:	movne	r0, r6
   200ec:	popne	{r4, r5, r6, r7, fp, pc}
   200f0:	mov	r0, r5
   200f4:	mov	r1, r6
   200f8:	mov	r2, r4
   200fc:	mov	r3, #33	; 0x21
   20100:	pop	{r4, r5, r6, r7, fp, lr}
   20104:	b	26958 <flatcc_json_parser_set_error@@Base>
   20108:	push	{r4, r5, r6, r7, fp, lr}
   2010c:	add	fp, sp, #16
   20110:	mov	r7, r3
   20114:	mov	r4, r2
   20118:	mov	r6, r1
   2011c:	mov	r5, r0
   20120:	mov	r0, #0
   20124:	str	r0, [r3]
   20128:	ldr	r0, [r5]
   2012c:	mov	r1, #4
   20130:	mov	r2, #4
   20134:	bl	226c4 <flatcc_builder_start_struct@@Base>
   20138:	cmp	r0, #0
   2013c:	beq	20178 <main@@Base+0xa09c>
   20140:	mov	r3, r0
   20144:	mov	r0, r5
   20148:	mov	r1, r6
   2014c:	mov	r2, r4
   20150:	bl	20558 <main@@Base+0xa47c>
   20154:	mov	r6, r0
   20158:	cmp	r0, r4
   2015c:	beq	20178 <main@@Base+0xa09c>
   20160:	ldr	r0, [r5]
   20164:	bl	227a0 <flatcc_builder_end_struct@@Base>
   20168:	str	r0, [r7]
   2016c:	cmp	r0, #0
   20170:	movne	r0, r6
   20174:	popne	{r4, r5, r6, r7, fp, pc}
   20178:	mov	r0, r5
   2017c:	mov	r1, r6
   20180:	mov	r2, r4
   20184:	mov	r3, #33	; 0x21
   20188:	pop	{r4, r5, r6, r7, fp, lr}
   2018c:	b	26958 <flatcc_json_parser_set_error@@Base>
   20190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20194:	add	fp, sp, #28
   20198:	sub	sp, sp, #20
   2019c:	str	r3, [sp, #8]
   201a0:	mov	r4, r2
   201a4:	mov	r5, r0
   201a8:	add	r3, sp, #16
   201ac:	bl	19f88 <main@@Base+0x3eac>
   201b0:	mov	r1, r0
   201b4:	ldr	r0, [sp, #16]
   201b8:	cmp	r0, #0
   201bc:	beq	20338 <main@@Base+0xa25c>
   201c0:	movw	r8, #26994	; 0x6972
   201c4:	movt	r8, #26721	; 0x6861
   201c8:	movw	r9, #25966	; 0x656e
   201cc:	movt	r9, #24428	; 0x5f6c
   201d0:	movw	r7, #26624	; 0x6800
   201d4:	movt	r7, #26484	; 0x6774
   201d8:	add	sl, sp, #14
   201dc:	mov	r0, r5
   201e0:	mov	r2, r4
   201e4:	bl	1a018 <main@@Base+0x3f3c>
   201e8:	mov	r6, r0
   201ec:	mov	r1, r4
   201f0:	bl	1a060 <main@@Base+0x3f84>
   201f4:	eor	r1, r1, r8
   201f8:	eor	r0, r0, r9
   201fc:	orrs	r0, r0, r1
   20200:	bne	20278 <main@@Base+0xa19c>
   20204:	add	r6, r6, #8
   20208:	mov	r0, r6
   2020c:	mov	r1, r4
   20210:	bl	1a060 <main@@Base+0x3f84>
   20214:	bic	r0, r1, #255	; 0xff
   20218:	teq	r0, r7
   2021c:	bne	20278 <main@@Base+0xa19c>
   20220:	mov	r0, r5
   20224:	mov	r1, r6
   20228:	mov	r2, r4
   2022c:	mov	r3, #3
   20230:	bl	1a064 <main@@Base+0x3f88>
   20234:	mov	r8, r0
   20238:	cmp	r6, r0
   2023c:	beq	20290 <main@@Base+0xa1b4>
   20240:	mov	r0, #0
   20244:	strh	r0, [sp, #14]
   20248:	mov	r0, r5
   2024c:	mov	r1, r8
   20250:	mov	r2, r4
   20254:	mov	r9, sl
   20258:	mov	r3, sl
   2025c:	bl	20344 <main@@Base+0xa268>
   20260:	mov	r6, r0
   20264:	cmp	r8, r0
   20268:	beq	202b0 <main@@Base+0xa1d4>
   2026c:	movw	r8, #26994	; 0x6972
   20270:	movt	r8, #26721	; 0x6861
   20274:	b	202e8 <main@@Base+0xa20c>
   20278:	mov	r0, r5
   2027c:	mov	r1, r6
   20280:	mov	r2, r4
   20284:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   20288:	mov	r6, r0
   2028c:	b	202fc <main@@Base+0xa220>
   20290:	mov	r0, r5
   20294:	mov	r1, r8
   20298:	mov	r2, r4
   2029c:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   202a0:	mov	r6, r0
   202a4:	movw	r8, #26994	; 0x6972
   202a8:	movt	r8, #26721	; 0x6861
   202ac:	b	202f4 <main@@Base+0xa218>
   202b0:	str	r9, [sp]
   202b4:	mov	r0, r5
   202b8:	mov	r1, r6
   202bc:	mov	r2, r4
   202c0:	movw	r3, #37628	; 0x92fc
   202c4:	movt	r3, #4
   202c8:	bl	203d4 <main@@Base+0xa2f8>
   202cc:	mov	r1, r0
   202d0:	cmp	r0, r6
   202d4:	movw	r8, #26994	; 0x6972
   202d8:	movt	r8, #26721	; 0x6861
   202dc:	cmpne	r1, r4
   202e0:	beq	20324 <main@@Base+0xa248>
   202e4:	mov	r6, r1
   202e8:	ldrh	r1, [sp, #14]
   202ec:	ldr	r0, [sp, #8]
   202f0:	bl	204ec <main@@Base+0xa410>
   202f4:	movw	r9, #25966	; 0x656e
   202f8:	movt	r9, #24428	; 0x5f6c
   202fc:	mov	r0, r5
   20300:	mov	r1, r6
   20304:	mov	r2, r4
   20308:	add	r3, sp, #16
   2030c:	bl	1cf64 <main@@Base+0x6e88>
   20310:	mov	r1, r0
   20314:	ldr	r0, [sp, #16]
   20318:	cmp	r0, #0
   2031c:	bne	201dc <main@@Base+0xa100>
   20320:	b	20338 <main@@Base+0xa25c>
   20324:	mov	r0, r5
   20328:	mov	r2, r4
   2032c:	mov	r3, #33	; 0x21
   20330:	bl	26958 <flatcc_json_parser_set_error@@Base>
   20334:	mov	r1, r0
   20338:	mov	r0, r1
   2033c:	sub	sp, fp, #28
   20340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20344:	push	{r4, r5, r6, r7, fp, lr}
   20348:	add	fp, sp, #16
   2034c:	sub	sp, sp, #24
   20350:	mov	r7, r1
   20354:	mov	r6, r0
   20358:	mov	r0, #0
   2035c:	str	r0, [sp, #20]
   20360:	str	r0, [sp, #16]
   20364:	str	r0, [sp, #12]
   20368:	strh	r0, [r3]
   2036c:	cmp	r1, r2
   20370:	beq	203c8 <main@@Base+0xa2ec>
   20374:	mov	r5, r3
   20378:	mov	r4, r2
   2037c:	add	r0, sp, #16
   20380:	str	r0, [sp]
   20384:	add	r3, sp, #12
   20388:	mov	r0, r6
   2038c:	mov	r1, r7
   20390:	bl	27c14 <flatcc_json_parser_integer@@Base>
   20394:	mov	r1, r0
   20398:	cmp	r0, r7
   2039c:	beq	203c4 <main@@Base+0xa2e8>
   203a0:	ldr	r3, [sp, #12]
   203a4:	ldr	r0, [sp, #16]
   203a8:	ldr	r2, [sp, #20]
   203ac:	stm	sp, {r0, r2, r5}
   203b0:	mov	r0, r6
   203b4:	mov	r2, r4
   203b8:	bl	2050c <main@@Base+0xa430>
   203bc:	mov	r7, r0
   203c0:	b	203c8 <main@@Base+0xa2ec>
   203c4:	mov	r7, r1
   203c8:	mov	r0, r7
   203cc:	sub	sp, fp, #16
   203d0:	pop	{r4, r5, r6, r7, fp, pc}
   203d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203d8:	add	fp, sp, #28
   203dc:	sub	sp, sp, #36	; 0x24
   203e0:	mov	r8, r3
   203e4:	mov	r6, r2
   203e8:	mov	r5, r0
   203ec:	mov	r0, #0
   203f0:	strh	r0, [fp, #-30]	; 0xffffffe2
   203f4:	ldr	sl, [fp, #8]
   203f8:	strh	r0, [sl]
   203fc:	mov	r0, r5
   20400:	bl	1da30 <main@@Base+0x7954>
   20404:	mov	r4, r0
   20408:	cmp	r0, r6
   2040c:	beq	204d4 <main@@Base+0xa3f8>
   20410:	mov	r9, r8
   20414:	ldr	r7, [r9]
   20418:	add	r0, sp, #24
   2041c:	str	r0, [sp]
   20420:	add	r0, sp, #16
   20424:	str	r0, [sp, #4]
   20428:	mov	r0, r5
   2042c:	mov	r1, r4
   20430:	mov	r2, r6
   20434:	add	r3, sp, #20
   20438:	blx	r7
   2043c:	mov	r7, r0
   20440:	cmp	r0, r6
   20444:	beq	204e0 <main@@Base+0xa404>
   20448:	cmp	r7, r4
   2044c:	beq	204a8 <main@@Base+0xa3cc>
   20450:	ldr	r3, [sp, #20]
   20454:	ldr	r0, [sp, #24]
   20458:	ldr	r1, [sp, #28]
   2045c:	stm	sp, {r0, r1}
   20460:	sub	r0, fp, #30
   20464:	str	r0, [sp, #8]
   20468:	mov	r0, r5
   2046c:	mov	r1, r7
   20470:	mov	r2, r6
   20474:	bl	2050c <main@@Base+0xa430>
   20478:	cmp	r0, r6
   2047c:	beq	204dc <main@@Base+0xa400>
   20480:	ldrh	r0, [sl]
   20484:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   20488:	add	r0, r0, r1
   2048c:	strh	r0, [sl]
   20490:	ldr	r0, [sp, #16]
   20494:	cmp	r0, #0
   20498:	mov	r4, r7
   2049c:	mov	r9, r8
   204a0:	bne	20414 <main@@Base+0xa338>
   204a4:	b	204e0 <main@@Base+0xa404>
   204a8:	ldr	r0, [r9, #4]!
   204ac:	cmp	r0, #0
   204b0:	mov	r4, r7
   204b4:	bne	20414 <main@@Base+0xa338>
   204b8:	mov	r0, r5
   204bc:	mov	r1, r7
   204c0:	mov	r2, r6
   204c4:	mov	r3, #23
   204c8:	bl	26958 <flatcc_json_parser_set_error@@Base>
   204cc:	mov	r7, r0
   204d0:	b	204e0 <main@@Base+0xa404>
   204d4:	mov	r7, r4
   204d8:	b	204e0 <main@@Base+0xa404>
   204dc:	mov	r7, r6
   204e0:	mov	r0, r7
   204e4:	sub	sp, fp, #28
   204e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204ec:	push	{r4, r5, fp, lr}
   204f0:	add	fp, sp, #8
   204f4:	mov	r4, r1
   204f8:	mov	r5, r0
   204fc:	mov	r0, r1
   20500:	bl	20554 <main@@Base+0xa478>
   20504:	strh	r4, [r5]
   20508:	pop	{r4, r5, fp, pc}
   2050c:	push	{fp, lr}
   20510:	mov	fp, sp
   20514:	cmp	r3, #0
   20518:	beq	20528 <main@@Base+0xa44c>
   2051c:	mov	r3, #8
   20520:	pop	{fp, lr}
   20524:	b	26958 <flatcc_json_parser_set_error@@Base>
   20528:	ldr	ip, [fp, #12]
   2052c:	ldr	lr, [fp, #8]
   20530:	subs	r3, lr, #65536	; 0x10000
   20534:	sbcs	r3, ip, #0
   20538:	ldrcc	r0, [fp, #16]
   2053c:	strhcc	lr, [r0]
   20540:	movcc	r0, r1
   20544:	popcc	{fp, pc}
   20548:	mov	r3, #7
   2054c:	pop	{fp, lr}
   20550:	b	26958 <flatcc_json_parser_set_error@@Base>
   20554:	bx	lr
   20558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2055c:	add	fp, sp, #28
   20560:	sub	sp, sp, #20
   20564:	str	r3, [sp, #8]
   20568:	mov	r4, r2
   2056c:	mov	r5, r0
   20570:	add	r3, sp, #16
   20574:	bl	19f88 <main@@Base+0x3eac>
   20578:	mov	r1, r0
   2057c:	ldr	r0, [sp, #16]
   20580:	cmp	r0, #0
   20584:	beq	20700 <main@@Base+0xa624>
   20588:	movw	r8, #28523	; 0x6f6b
   2058c:	movt	r8, #25199	; 0x626f
   20590:	movw	r9, #29285	; 0x7265
   20594:	movt	r9, #29535	; 0x735f
   20598:	movw	r7, #0
   2059c:	movt	r7, #24932	; 0x6164
   205a0:	add	sl, sp, #12
   205a4:	mov	r0, r5
   205a8:	mov	r2, r4
   205ac:	bl	1a018 <main@@Base+0x3f3c>
   205b0:	mov	r6, r0
   205b4:	mov	r1, r4
   205b8:	bl	1a060 <main@@Base+0x3f84>
   205bc:	eor	r1, r1, r8
   205c0:	eor	r0, r0, r9
   205c4:	orrs	r0, r0, r1
   205c8:	bne	20640 <main@@Base+0xa564>
   205cc:	add	r6, r6, #8
   205d0:	mov	r0, r6
   205d4:	mov	r1, r4
   205d8:	bl	1a060 <main@@Base+0x3f84>
   205dc:	bfc	r1, #0, #16
   205e0:	teq	r1, r7
   205e4:	bne	20640 <main@@Base+0xa564>
   205e8:	mov	r0, r5
   205ec:	mov	r1, r6
   205f0:	mov	r2, r4
   205f4:	mov	r3, #2
   205f8:	bl	1a064 <main@@Base+0x3f88>
   205fc:	mov	r8, r0
   20600:	cmp	r6, r0
   20604:	beq	20658 <main@@Base+0xa57c>
   20608:	mov	r0, #0
   2060c:	str	r0, [sp, #12]
   20610:	mov	r0, r5
   20614:	mov	r1, r8
   20618:	mov	r2, r4
   2061c:	mov	r9, sl
   20620:	mov	r3, sl
   20624:	bl	1c6e4 <main@@Base+0x6608>
   20628:	mov	r6, r0
   2062c:	cmp	r8, r0
   20630:	beq	20678 <main@@Base+0xa59c>
   20634:	movw	r8, #28523	; 0x6f6b
   20638:	movt	r8, #25199	; 0x626f
   2063c:	b	206b0 <main@@Base+0xa5d4>
   20640:	mov	r0, r5
   20644:	mov	r1, r6
   20648:	mov	r2, r4
   2064c:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   20650:	mov	r6, r0
   20654:	b	206c4 <main@@Base+0xa5e8>
   20658:	mov	r0, r5
   2065c:	mov	r1, r8
   20660:	mov	r2, r4
   20664:	bl	270d8 <flatcc_json_parser_unmatched_symbol@@Base>
   20668:	mov	r6, r0
   2066c:	movw	r8, #28523	; 0x6f6b
   20670:	movt	r8, #25199	; 0x626f
   20674:	b	206bc <main@@Base+0xa5e0>
   20678:	str	r9, [sp]
   2067c:	mov	r0, r5
   20680:	mov	r1, r6
   20684:	mov	r2, r4
   20688:	movw	r3, #37640	; 0x9308
   2068c:	movt	r3, #4
   20690:	bl	1c774 <main@@Base+0x6698>
   20694:	mov	r1, r0
   20698:	cmp	r0, r6
   2069c:	movw	r8, #28523	; 0x6f6b
   206a0:	movt	r8, #25199	; 0x626f
   206a4:	cmpne	r1, r4
   206a8:	beq	206ec <main@@Base+0xa610>
   206ac:	mov	r6, r1
   206b0:	ldr	r1, [sp, #12]
   206b4:	ldr	r0, [sp, #8]
   206b8:	bl	1c88c <main@@Base+0x67b0>
   206bc:	movw	r9, #29285	; 0x7265
   206c0:	movt	r9, #29535	; 0x735f
   206c4:	mov	r0, r5
   206c8:	mov	r1, r6
   206cc:	mov	r2, r4
   206d0:	add	r3, sp, #16
   206d4:	bl	1cf64 <main@@Base+0x6e88>
   206d8:	mov	r1, r0
   206dc:	ldr	r0, [sp, #16]
   206e0:	cmp	r0, #0
   206e4:	bne	205a4 <main@@Base+0xa4c8>
   206e8:	b	20700 <main@@Base+0xa624>
   206ec:	mov	r0, r5
   206f0:	mov	r2, r4
   206f4:	mov	r3, #33	; 0x21
   206f8:	bl	26958 <flatcc_json_parser_set_error@@Base>
   206fc:	mov	r1, r0
   20700:	mov	r0, r1
   20704:	sub	sp, fp, #28
   20708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2070c:	cmp	r3, #0
   20710:	beq	2071c <main@@Base+0xa640>
   20714:	mov	r3, #8
   20718:	b	26958 <flatcc_json_parser_set_error@@Base>
   2071c:	ldr	r2, [sp]
   20720:	ldmib	sp, {r0, r3}
   20724:	orrs	r0, r2, r0
   20728:	movwne	r0, #1
   2072c:	strb	r0, [r3]
   20730:	mov	r0, r1
   20734:	bx	lr
   20738:	bx	lr
   2073c:	push	{r4, r5, fp, lr}
   20740:	add	fp, sp, #8
   20744:	mov	r4, r1
   20748:	mov	r5, r0
   2074c:	mov	r0, r2
   20750:	mov	r1, r3
   20754:	bl	31adc <flatcc_json_printer_clear@@Base+0x1470>
   20758:	ldr	r1, [fp, #8]
   2075c:	vmov	s0, r0
   20760:	vneg.f32	s2, s0
   20764:	cmp	r4, #0
   20768:	vseleq.f32	s0, s0, s2
   2076c:	vstr	s0, [r1]
   20770:	mov	r0, r5
   20774:	pop	{r4, r5, fp, pc}
   20778:	bx	lr
   2077c:	push	{r4, sl, fp, lr}
   20780:	add	fp, sp, #8
   20784:	ldr	r4, [fp, #12]
   20788:	ldr	ip, [fp, #8]
   2078c:	ldr	lr, [fp, #16]
   20790:	cmp	r3, #0
   20794:	beq	207b0 <main@@Base+0xa6d4>
   20798:	subs	r3, ip, #-2147483647	; 0x80000001
   2079c:	sbcs	r3, r4, #0
   207a0:	bcc	207c8 <main@@Base+0xa6ec>
   207a4:	mov	r3, #8
   207a8:	pop	{r4, sl, fp, lr}
   207ac:	b	26958 <flatcc_json_parser_set_error@@Base>
   207b0:	subs	r3, ip, #-2147483648	; 0x80000000
   207b4:	sbcs	r3, r4, #0
   207b8:	bcc	207cc <main@@Base+0xa6f0>
   207bc:	mov	r3, #7
   207c0:	pop	{r4, sl, fp, lr}
   207c4:	b	26958 <flatcc_json_parser_set_error@@Base>
   207c8:	rsb	ip, ip, #0
   207cc:	str	ip, [lr]
   207d0:	mov	r0, r1
   207d4:	pop	{r4, sl, fp, pc}
   207d8:	bx	lr
   207dc:	push	{r4, r5, fp, lr}
   207e0:	add	fp, sp, #8
   207e4:	add	ip, fp, #8
   207e8:	ldm	ip, {r4, r5, ip}
   207ec:	cmp	r3, #0
   207f0:	beq	2080c <main@@Base+0xa730>
   207f4:	subs	r3, r4, #1
   207f8:	sbcs	r3, r5, #-2147483648	; 0x80000000
   207fc:	bcc	20820 <main@@Base+0xa744>
   20800:	mov	r3, #8
   20804:	pop	{r4, r5, fp, lr}
   20808:	b	26958 <flatcc_json_parser_set_error@@Base>
   2080c:	cmn	r5, #1
   20810:	bgt	20828 <main@@Base+0xa74c>
   20814:	mov	r3, #7
   20818:	pop	{r4, r5, fp, lr}
   2081c:	b	26958 <flatcc_json_parser_set_error@@Base>
   20820:	rsbs	r4, r4, #0
   20824:	rsc	r5, r5, #0
   20828:	strd	r4, [ip]
   2082c:	mov	r0, r1
   20830:	pop	{r4, r5, fp, pc}
   20834:	bx	lr
   20838:	cmp	r3, #0
   2083c:	beq	20848 <main@@Base+0xa76c>
   20840:	mov	r3, #8
   20844:	b	26958 <flatcc_json_parser_set_error@@Base>
   20848:	ldr	r3, [sp, #4]
   2084c:	cmp	r3, #0
   20850:	beq	2085c <main@@Base+0xa780>
   20854:	mov	r3, #7
   20858:	b	26958 <flatcc_json_parser_set_error@@Base>
   2085c:	ldr	r0, [sp]
   20860:	ldr	r2, [sp, #8]
   20864:	str	r0, [r2]
   20868:	mov	r0, r1
   2086c:	bx	lr
   20870:	bx	lr
   20874:	cmp	r3, #0
   20878:	beq	20884 <main@@Base+0xa7a8>
   2087c:	mov	r3, #8
   20880:	b	26958 <flatcc_json_parser_set_error@@Base>
   20884:	ldm	sp, {r2, r3}
   20888:	ldr	r0, [sp, #8]
   2088c:	strd	r2, [r0]
   20890:	mov	r0, r1
   20894:	bx	lr
   20898:	bx	lr
   2089c:	push	{r4, r5, fp, lr}
   208a0:	add	fp, sp, #8
   208a4:	mov	r4, r1
   208a8:	mov	r5, r0
   208ac:	mov	r0, r2
   208b0:	mov	r1, r3
   208b4:	bl	318a4 <flatcc_json_printer_clear@@Base+0x1238>
   208b8:	eor	r2, r1, #-2147483648	; 0x80000000
   208bc:	ldr	r3, [fp, #8]
   208c0:	vmov	d16, r0, r1
   208c4:	vmov	d17, r0, r2
   208c8:	cmp	r4, #0
   208cc:	vseleq.f64	d16, d16, d17
   208d0:	vstr	d16, [r3]
   208d4:	mov	r0, r5
   208d8:	pop	{r4, r5, fp, pc}
   208dc:	bx	lr
   208e0:	push	{r4, r5, r6, sl, fp, lr}
   208e4:	add	fp, sp, #16
   208e8:	sub	sp, sp, #16
   208ec:	mov	r4, r1
   208f0:	mov	r5, r0
   208f4:	mov	r6, #1
   208f8:	movw	r0, #21831	; 0x5547
   208fc:	movt	r0, #3
   20900:	stm	sp, {r0, r6}
   20904:	mov	r0, r5
   20908:	mov	r1, #0
   2090c:	mov	r2, r4
   20910:	mov	r3, #0
   20914:	bl	2c414 <flatcc_json_printer_float_struct_field@@Base>
   20918:	movw	r0, #32287	; 0x7e1f
   2091c:	movt	r0, #3
   20920:	stm	sp, {r0, r6}
   20924:	mov	r0, r5
   20928:	mov	r1, #1
   2092c:	mov	r2, r4
   20930:	mov	r3, #4
   20934:	bl	2c414 <flatcc_json_printer_float_struct_field@@Base>
   20938:	movw	r0, #22272	; 0x5700
   2093c:	movt	r0, #3
   20940:	stm	sp, {r0, r6}
   20944:	mov	r0, r5
   20948:	mov	r1, #2
   2094c:	mov	r2, r4
   20950:	mov	r3, #8
   20954:	bl	2c414 <flatcc_json_printer_float_struct_field@@Base>
   20958:	mov	r6, #5
   2095c:	movw	r0, #22274	; 0x5702
   20960:	movt	r0, #3
   20964:	stm	sp, {r0, r6}
   20968:	mov	r0, r5
   2096c:	mov	r1, #3
   20970:	mov	r2, r4
   20974:	mov	r3, #16
   20978:	bl	2c47c <flatcc_json_printer_double_struct_field@@Base>
   2097c:	movw	r0, #2524	; 0x9dc
   20980:	movt	r0, #2
   20984:	movw	r1, #22280	; 0x5708
   20988:	movt	r1, #3
   2098c:	stm	sp, {r1, r6}
   20990:	str	r0, [sp, #8]
   20994:	mov	r0, r5
   20998:	mov	r1, #4
   2099c:	mov	r2, r4
   209a0:	mov	r3, #24
   209a4:	bl	2c6f0 <flatcc_json_printer_int8_enum_struct_field@@Base>
   209a8:	movw	r0, #2944	; 0xb80
   209ac:	movt	r0, #2
   209b0:	movw	r1, #22286	; 0x570e
   209b4:	movt	r1, #3
   209b8:	stm	sp, {r1, r6}
   209bc:	str	r0, [sp, #8]
   209c0:	mov	r0, r5
   209c4:	mov	r1, #5
   209c8:	mov	r2, r4
   209cc:	mov	r3, #26
   209d0:	bl	2fd0c <flatcc_json_printer_embedded_struct_field@@Base>
   209d4:	sub	sp, fp, #16
   209d8:	pop	{r4, r5, r6, sl, fp, pc}
   209dc:	push	{r4, r5, r6, r7, fp, lr}
   209e0:	add	fp, sp, #16
   209e4:	mov	r4, r0
   209e8:	mvn	r0, #0
   209ec:	uxtab	r0, r0, r1
   209f0:	uxtb	r7, r1
   209f4:	ands	r5, r0, r7
   209f8:	movwne	r5, #1
   209fc:	cmp	r1, #0
   20a00:	beq	20a5c <main@@Base+0xa980>
   20a04:	ands	r0, r1, #244	; 0xf4
   20a08:	bne	20a5c <main@@Base+0xa980>
   20a0c:	mov	r0, r4
   20a10:	mov	r1, r5
   20a14:	bl	2ac2c <flatcc_json_printer_delimit_enum_flags@@Base>
   20a18:	mov	r6, #0
   20a1c:	tst	r7, #1
   20a20:	bne	20a68 <main@@Base+0xa98c>
   20a24:	tst	r7, #2
   20a28:	bne	20a8c <main@@Base+0xa9b0>
   20a2c:	tst	r7, #8
   20a30:	beq	20a4c <main@@Base+0xa970>
   20a34:	movw	r2, #22302	; 0x571e
   20a38:	movt	r2, #3
   20a3c:	mov	r0, r4
   20a40:	mov	r1, r6
   20a44:	mov	r3, #4
   20a48:	bl	2ac60 <flatcc_json_printer_enum_flag@@Base>
   20a4c:	mov	r0, r4
   20a50:	mov	r1, r5
   20a54:	pop	{r4, r5, r6, r7, fp, lr}
   20a58:	b	2ac2c <flatcc_json_printer_delimit_enum_flags@@Base>
   20a5c:	mov	r0, r4
   20a60:	pop	{r4, r5, r6, r7, fp, lr}
   20a64:	b	2a9f0 <flatcc_json_printer_int8@@Base>
   20a68:	movw	r2, #22292	; 0x5714
   20a6c:	movt	r2, #3
   20a70:	mov	r0, r4
   20a74:	mov	r1, #0
   20a78:	mov	r3, #3
   20a7c:	bl	2ac60 <flatcc_json_printer_enum_flag@@Base>
   20a80:	mov	r6, #1
   20a84:	tst	r7, #2
   20a88:	beq	20a2c <main@@Base+0xa950>
   20a8c:	movw	r2, #22296	; 0x5718
   20a90:	movt	r2, #3
   20a94:	mov	r0, r4
   20a98:	mov	r1, r6
   20a9c:	mov	r3, #5
   20aa0:	bl	2ac60 <flatcc_json_printer_enum_flag@@Base>
   20aa4:	add	r6, r6, #1
   20aa8:	tst	r7, #8
   20aac:	bne	20a34 <main@@Base+0xa958>
   20ab0:	b	20a4c <main@@Base+0xa970>
   20ab4:	sub	r1, r1, #1
   20ab8:	cmp	r1, #3
   20abc:	bhi	20ae8 <main@@Base+0xaa0c>
   20ac0:	add	r2, pc, #0
   20ac4:	ldr	pc, [r2, r1, lsl #2]
   20ac8:	ldrdeq	r0, [r2], -r8
   20acc:	strdeq	r0, [r2], -r8
   20ad0:	andeq	r0, r2, r8, lsl #22
   20ad4:	andeq	r0, r2, r8, lsl fp
   20ad8:	movw	r1, #22307	; 0x5723
   20adc:	movt	r1, #3
   20ae0:	mov	r2, #7
   20ae4:	b	2aba0 <flatcc_json_printer_enum@@Base>
   20ae8:	movw	r1, #28756	; 0x7054
   20aec:	movt	r1, #3
   20af0:	mov	r2, #4
   20af4:	b	2aba0 <flatcc_json_printer_enum@@Base>
   20af8:	movw	r1, #22315	; 0x572b
   20afc:	movt	r1, #3
   20b00:	mov	r2, #23
   20b04:	b	2aba0 <flatcc_json_printer_enum@@Base>
   20b08:	movw	r1, #22339	; 0x5743
   20b0c:	movt	r1, #3
   20b10:	mov	r2, #8
   20b14:	b	2aba0 <flatcc_json_printer_enum@@Base>
   20b18:	movw	r1, #22348	; 0x574c
   20b1c:	movt	r1, #3
   20b20:	mov	r2, #3
   20b24:	b	2aba0 <flatcc_json_printer_enum@@Base>
   20b28:	ldrb	r2, [r1, #8]
   20b2c:	sub	r2, r2, #1
   20b30:	cmp	r2, #3
   20b34:	bxhi	lr
   20b38:	add	r3, pc, #0
   20b3c:	ldr	pc, [r3, r2, lsl #2]
   20b40:	andeq	r0, r2, r0, asr fp
   20b44:	andeq	r0, r2, r4, ror fp
   20b48:	andeq	r0, r2, ip, asr fp
   20b4c:	andeq	r0, r2, r8, ror #22
   20b50:	movw	r2, #38440	; 0x9628
   20b54:	movt	r2, #1
   20b58:	b	2fc24 <flatcc_json_printer_union_table@@Base>
   20b5c:	movw	r2, #3580	; 0xdfc
   20b60:	movt	r2, #2
   20b64:	b	2fc24 <flatcc_json_printer_union_table@@Base>
   20b68:	movw	r2, #3584	; 0xe00
   20b6c:	movt	r2, #2
   20b70:	b	2fc24 <flatcc_json_printer_union_table@@Base>
   20b74:	movw	r2, #3416	; 0xd58
   20b78:	movt	r2, #2
   20b7c:	b	2fc24 <flatcc_json_printer_union_table@@Base>
   20b80:	push	{r4, r5, r6, sl, fp, lr}
   20b84:	add	fp, sp, #16
   20b88:	sub	sp, sp, #8
   20b8c:	mov	r4, r1
   20b90:	mov	r5, r0
   20b94:	mov	r6, #1
   20b98:	movw	r0, #22058	; 0x562a
   20b9c:	movt	r0, #3
   20ba0:	stm	sp, {r0, r6}
   20ba4:	mov	r0, r5
   20ba8:	mov	r1, #0
   20bac:	mov	r2, r4
   20bb0:	mov	r3, #0
   20bb4:	bl	2c28c <flatcc_json_printer_int16_struct_field@@Base>
   20bb8:	movw	r0, #22473	; 0x57c9
   20bbc:	movt	r0, #3
   20bc0:	stm	sp, {r0, r6}
   20bc4:	mov	r0, r5
   20bc8:	mov	r1, #1
   20bcc:	mov	r2, r4
   20bd0:	mov	r3, #2
   20bd4:	bl	2c22c <flatcc_json_printer_int8_struct_field@@Base>
   20bd8:	sub	sp, fp, #16
   20bdc:	pop	{r4, r5, r6, sl, fp, pc}
   20be0:	push	{r4, r5, r6, sl, fp, lr}
   20be4:	add	fp, sp, #16
   20be8:	sub	sp, sp, #16
   20bec:	mov	r4, r1
   20bf0:	mov	r5, r0
   20bf4:	mov	r0, #2
   20bf8:	str	r0, [sp]
   20bfc:	mov	r6, #0
   20c00:	movw	r3, #22720	; 0x58c0
   20c04:	movt	r3, #3
   20c08:	mov	r0, r5
   20c0c:	mov	r2, #0
   20c10:	bl	2ac9c <flatcc_json_printer_string_field@@Base>
   20c14:	str	r6, [sp, #8]
   20c18:	str	r6, [sp, #12]
   20c1c:	mov	r0, #3
   20c20:	str	r0, [sp]
   20c24:	movw	r3, #22723	; 0x58c3
   20c28:	movt	r3, #3
   20c2c:	mov	r0, r5
   20c30:	mov	r1, r4
   20c34:	mov	r2, #1
   20c38:	bl	2b518 <flatcc_json_printer_int64_field@@Base>
   20c3c:	mov	r0, #5
   20c40:	stm	sp, {r0, r6}
   20c44:	movw	r3, #25008	; 0x61b0
   20c48:	movt	r3, #3
   20c4c:	mov	r0, r5
   20c50:	mov	r1, r4
   20c54:	mov	r2, #2
   20c58:	bl	2b0c0 <flatcc_json_printer_uint16_field@@Base>
   20c5c:	sub	sp, fp, #16
   20c60:	pop	{r4, r5, r6, sl, fp, pc}
   20c64:	push	{r4, r5, fp, lr}
   20c68:	add	fp, sp, #8
   20c6c:	sub	sp, sp, #8
   20c70:	mov	r4, r1
   20c74:	mov	r5, r0
   20c78:	mov	r0, #2
   20c7c:	movw	r1, #22720	; 0x58c0
   20c80:	movt	r1, #3
   20c84:	str	r1, [sp]
   20c88:	str	r0, [sp, #4]
   20c8c:	mov	r0, r5
   20c90:	mov	r1, #0
   20c94:	mov	r2, r4
   20c98:	mov	r3, #0
   20c9c:	bl	2c164 <flatcc_json_printer_uint32_struct_field@@Base>
   20ca0:	mov	r0, #8
   20ca4:	movw	r1, #22727	; 0x58c7
   20ca8:	movt	r1, #3
   20cac:	str	r1, [sp]
   20cb0:	str	r0, [sp, #4]
   20cb4:	mov	r0, r5
   20cb8:	mov	r1, #1
   20cbc:	mov	r2, r4
   20cc0:	mov	r3, #4
   20cc4:	bl	2c164 <flatcc_json_printer_uint32_struct_field@@Base>
   20cc8:	sub	sp, fp, #8
   20ccc:	pop	{r4, r5, fp, pc}
   20cd0:	bx	lr
   20cd4:	push	{r4, r5, r6, sl, fp, lr}
   20cd8:	add	fp, sp, #16
   20cdc:	sub	sp, sp, #8
   20ce0:	mov	r4, r1
   20ce4:	mov	r5, r0
   20ce8:	mov	r6, #0
   20cec:	mov	r0, #4
   20cf0:	stm	sp, {r0, r6}
   20cf4:	movw	r3, #22739	; 0x58d3
   20cf8:	movt	r3, #3
   20cfc:	mov	r0, r5
   20d00:	mov	r2, #0
   20d04:	bl	2ae28 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20d08:	mov	r0, #1
   20d0c:	mov	r1, #7
   20d10:	str	r1, [sp]
   20d14:	str	r0, [sp, #4]
   20d18:	movw	r3, #22736	; 0x58d0
   20d1c:	movt	r3, #3
   20d20:	mov	r0, r5
   20d24:	mov	r1, r4
   20d28:	mov	r2, #1
   20d2c:	bl	2ae28 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20d30:	mov	r0, #6
   20d34:	stm	sp, {r0, r6}
   20d38:	movw	r3, #22744	; 0x58d8
   20d3c:	movt	r3, #3
   20d40:	mov	r0, r5
   20d44:	mov	r1, r4
   20d48:	mov	r2, #2
   20d4c:	bl	2ae28 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20d50:	sub	sp, fp, #16
   20d54:	pop	{r4, r5, r6, sl, fp, pc}
   20d58:	push	{r4, r5, r6, r7, fp, lr}
   20d5c:	add	fp, sp, #16
   20d60:	sub	sp, sp, #16
   20d64:	mov	r4, r1
   20d68:	mov	r5, r0
   20d6c:	movw	r7, #2524	; 0x9dc
   20d70:	movt	r7, #2
   20d74:	mov	r6, #2
   20d78:	mov	r0, #5
   20d7c:	stm	sp, {r0, r6, r7}
   20d80:	movw	r3, #21880	; 0x5578
   20d84:	movt	r3, #3
   20d88:	mov	r0, r5
   20d8c:	mov	r2, #0
   20d90:	bl	2bc10 <flatcc_json_printer_int8_enum_field@@Base>
   20d94:	mov	r0, #6
   20d98:	stm	sp, {r0, r6, r7}
   20d9c:	movw	r3, #22352	; 0x5750
   20da0:	movt	r3, #3
   20da4:	mov	r0, r5
   20da8:	mov	r1, r4
   20dac:	mov	r2, #1
   20db0:	bl	2bc10 <flatcc_json_printer_int8_enum_field@@Base>
   20db4:	str	r6, [sp]
   20db8:	str	r6, [sp, #4]
   20dbc:	movw	r3, #22359	; 0x5757
   20dc0:	movt	r3, #3
   20dc4:	mov	r0, r5
   20dc8:	mov	r1, r4
   20dcc:	mov	r2, #2
   20dd0:	bl	2b00c <flatcc_json_printer_uint8_field@@Base>
   20dd4:	mov	r0, #3
   20dd8:	stm	sp, {r0, r6}
   20ddc:	movw	r3, #22362	; 0x575a
   20de0:	movt	r3, #3
   20de4:	mov	r0, r5
   20de8:	mov	r1, r4
   20dec:	mov	r2, #3
   20df0:	bl	2b00c <flatcc_json_printer_uint8_field@@Base>
   20df4:	sub	sp, fp, #16
   20df8:	pop	{r4, r5, r6, r7, fp, pc}
   20dfc:	bx	lr
   20e00:	push	{r4, r5, fp, lr}
   20e04:	add	fp, sp, #8
   20e08:	sub	sp, sp, #16
   20e0c:	mov	r4, r1
   20e10:	mov	r5, r0
   20e14:	movw	r0, #3756	; 0xeac
   20e18:	movt	r0, #2
   20e1c:	mov	r1, #6
   20e20:	str	r1, [sp]
   20e24:	str	r0, [sp, #4]
   20e28:	movw	r3, #22366	; 0x575e
   20e2c:	movt	r3, #3
   20e30:	mov	r0, r5
   20e34:	mov	r1, r4
   20e38:	mov	r2, #0
   20e3c:	bl	2f99c <flatcc_json_printer_table_field@@Base>
   20e40:	movw	r0, #3912	; 0xf48
   20e44:	movt	r0, #2
   20e48:	mov	r1, #5
   20e4c:	str	r1, [sp]
   20e50:	str	r0, [sp, #4]
   20e54:	movw	r3, #22373	; 0x5765
   20e58:	movt	r3, #3
   20e5c:	mov	r0, r5
   20e60:	mov	r1, r4
   20e64:	mov	r2, #1
   20e68:	bl	2f99c <flatcc_json_printer_table_field@@Base>
   20e6c:	movw	r0, #2856	; 0xb28
   20e70:	movt	r0, #2
   20e74:	movw	r1, #2740	; 0xab4
   20e78:	movt	r1, #2
   20e7c:	mov	r2, #7
   20e80:	str	r2, [sp]
   20e84:	str	r1, [sp, #4]
   20e88:	str	r0, [sp, #8]
   20e8c:	movw	r3, #22379	; 0x576b
   20e90:	movt	r3, #3
   20e94:	mov	r0, r5
   20e98:	mov	r1, r4
   20e9c:	mov	r2, #3
   20ea0:	bl	2f690 <flatcc_json_printer_union_vector_field@@Base>
   20ea4:	sub	sp, fp, #8
   20ea8:	pop	{r4, r5, fp, pc}
   20eac:	push	{r4, r5, r6, sl, fp, lr}
   20eb0:	add	fp, sp, #16
   20eb4:	sub	sp, sp, #8
   20eb8:	mov	r4, r1
   20ebc:	mov	r5, r0
   20ec0:	movw	r0, #4140	; 0x102c
   20ec4:	movt	r0, #2
   20ec8:	mov	r1, #21
   20ecc:	str	r1, [sp]
   20ed0:	str	r0, [sp, #4]
   20ed4:	movw	r3, #22387	; 0x5773
   20ed8:	movt	r3, #3
   20edc:	mov	r0, r5
   20ee0:	mov	r1, r4
   20ee4:	mov	r2, #0
   20ee8:	bl	2f99c <flatcc_json_printer_table_field@@Base>
   20eec:	movw	r0, #4464	; 0x1170
   20ef0:	movt	r0, #2
   20ef4:	mov	r6, #22
   20ef8:	str	r6, [sp]
   20efc:	str	r0, [sp, #4]
   20f00:	movw	r3, #22409	; 0x5789
   20f04:	movt	r3, #3
   20f08:	mov	r0, r5
   20f0c:	mov	r1, r4
   20f10:	mov	r2, #1
   20f14:	bl	2f99c <flatcc_json_printer_table_field@@Base>
   20f18:	movw	r0, #4564	; 0x11d4
   20f1c:	movt	r0, #2
   20f20:	str	r6, [sp]
   20f24:	str	r0, [sp, #4]
   20f28:	movw	r3, #22432	; 0x57a0
   20f2c:	movt	r3, #3
   20f30:	mov	r0, r5
   20f34:	mov	r1, r4
   20f38:	mov	r2, #2
   20f3c:	bl	2f99c <flatcc_json_printer_table_field@@Base>
   20f40:	sub	sp, fp, #16
   20f44:	pop	{r4, r5, r6, sl, fp, pc}
   20f48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20f4c:	add	fp, sp, #24
   20f50:	sub	sp, sp, #16
   20f54:	mov	r4, r1
   20f58:	mov	r5, r0
   20f5c:	movw	r6, #4844	; 0x12ec
   20f60:	movt	r6, #2
   20f64:	movw	r7, #4664	; 0x1238
   20f68:	movt	r7, #2
   20f6c:	mov	r0, #14
   20f70:	stm	sp, {r0, r7}
   20f74:	str	r6, [sp, #8]
   20f78:	movw	r3, #22582	; 0x5836
   20f7c:	movt	r3, #3
   20f80:	mov	r0, r5
   20f84:	mov	r2, #1
   20f88:	bl	2fa20 <flatcc_json_printer_union_field@@Base>
   20f8c:	mov	r8, #10
   20f90:	str	r8, [sp]
   20f94:	str	r7, [sp, #4]
   20f98:	str	r6, [sp, #8]
   20f9c:	movw	r3, #22597	; 0x5845
   20fa0:	movt	r3, #3
   20fa4:	mov	r0, r5
   20fa8:	mov	r1, r4
   20fac:	mov	r2, #3
   20fb0:	bl	2fa20 <flatcc_json_printer_union_field@@Base>
   20fb4:	mov	r0, #9
   20fb8:	stm	sp, {r0, r7}
   20fbc:	str	r6, [sp, #8]
   20fc0:	mov	r9, #5
   20fc4:	movw	r3, #22608	; 0x5850
   20fc8:	movt	r3, #3
   20fcc:	mov	r0, r5
   20fd0:	mov	r1, r4
   20fd4:	mov	r2, #5
   20fd8:	bl	2fa20 <flatcc_json_printer_union_field@@Base>
   20fdc:	str	r9, [sp]
   20fe0:	str	r7, [sp, #4]
   20fe4:	str	r6, [sp, #8]
   20fe8:	movw	r3, #22618	; 0x585a
   20fec:	movt	r3, #3
   20ff0:	mov	r0, r5
   20ff4:	mov	r1, r4
   20ff8:	mov	r2, #7
   20ffc:	bl	2fa20 <flatcc_json_printer_union_field@@Base>
   21000:	str	r8, [sp]
   21004:	str	r7, [sp, #4]
   21008:	str	r6, [sp, #8]
   2100c:	movw	r3, #22624	; 0x5860
   21010:	movt	r3, #3
   21014:	mov	r0, r5
   21018:	mov	r1, r4
   2101c:	mov	r2, #9
   21020:	bl	2f690 <flatcc_json_printer_union_vector_field@@Base>
   21024:	sub	sp, fp, #24
   21028:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2102c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21030:	add	fp, sp, #24
   21034:	sub	sp, sp, #16
   21038:	mov	r4, r1
   2103c:	mov	r5, r0
   21040:	mov	r9, #4
   21044:	str	r9, [sp]
   21048:	mov	r6, #0
   2104c:	movw	r3, #22455	; 0x57b7
   21050:	movt	r3, #3
   21054:	mov	r2, #0
   21058:	bl	2ac9c <flatcc_json_printer_string_field@@Base>
   2105c:	mov	r8, #9
   21060:	str	r8, [sp]
   21064:	str	r6, [sp, #4]
   21068:	movw	r3, #22460	; 0x57bc
   2106c:	movt	r3, #3
   21070:	mov	r0, r5
   21074:	mov	r1, r4
   21078:	mov	r2, #1
   2107c:	bl	2b174 <flatcc_json_printer_uint32_field@@Base>
   21080:	str	r9, [sp]
   21084:	movw	r3, #22470	; 0x57c6
   21088:	movt	r3, #3
   2108c:	mov	r0, r5
   21090:	mov	r1, r4
   21094:	mov	r2, #2
   21098:	bl	2ac9c <flatcc_json_printer_string_field@@Base>
   2109c:	str	r6, [sp, #8]
   210a0:	str	r6, [sp, #12]
   210a4:	mov	r7, #8
   210a8:	str	r7, [sp]
   210ac:	movw	r3, #22475	; 0x57cb
   210b0:	movt	r3, #3
   210b4:	mov	r0, r5
   210b8:	mov	r1, r4
   210bc:	mov	r2, #3
   210c0:	bl	2b518 <flatcc_json_printer_int64_field@@Base>
   210c4:	str	r9, [sp]
   210c8:	movw	r3, #22484	; 0x57d4
   210cc:	movt	r3, #3
   210d0:	mov	r0, r5
   210d4:	mov	r1, r4
   210d8:	mov	r2, #4
   210dc:	bl	2ac9c <flatcc_json_printer_string_field@@Base>
   210e0:	str	r6, [sp, #8]
   210e4:	str	r6, [sp, #12]
   210e8:	str	r7, [sp]
   210ec:	movw	r3, #22489	; 0x57d9
   210f0:	movt	r3, #3
   210f4:	mov	r0, r5
   210f8:	mov	r1, r4
   210fc:	mov	r2, #5
   21100:	bl	2b518 <flatcc_json_printer_int64_field@@Base>
   21104:	str	r8, [sp]
   21108:	str	r6, [sp, #4]
   2110c:	movw	r3, #22498	; 0x57e2
   21110:	movt	r3, #3
   21114:	mov	r0, r5
   21118:	mov	r1, r4
   2111c:	mov	r2, #6
   21120:	bl	2b174 <flatcc_json_printer_uint32_field@@Base>
   21124:	str	r6, [sp, #8]
   21128:	str	r6, [sp, #12]
   2112c:	str	r7, [sp]
   21130:	movw	r3, #22508	; 0x57ec
   21134:	movt	r3, #3
   21138:	mov	r0, r5
   2113c:	mov	r1, r4
   21140:	mov	r2, #7
   21144:	bl	2b518 <flatcc_json_printer_int64_field@@Base>
   21148:	str	r8, [sp]
   2114c:	str	r6, [sp, #4]
   21150:	movw	r3, #22517	; 0x57f5
   21154:	movt	r3, #3
   21158:	mov	r0, r5
   2115c:	mov	r1, r4
   21160:	mov	r2, #8
   21164:	bl	2b174 <flatcc_json_printer_uint32_field@@Base>
   21168:	sub	sp, fp, #24
   2116c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21170:	push	{r4, r5, r6, sl, fp, lr}
   21174:	add	fp, sp, #16
   21178:	sub	sp, sp, #16
   2117c:	mov	r4, r1
   21180:	mov	r5, r0
   21184:	mov	r6, #0
   21188:	str	r6, [sp, #8]
   2118c:	str	r6, [sp, #12]
   21190:	mov	r0, #15
   21194:	str	r0, [sp]
   21198:	movw	r3, #22527	; 0x57ff
   2119c:	movt	r3, #3
   211a0:	mov	r0, r5
   211a4:	mov	r2, #0
   211a8:	bl	2b518 <flatcc_json_printer_int64_field@@Base>
   211ac:	mov	r0, #16
   211b0:	stm	sp, {r0, r6}
   211b4:	movw	r3, #22543	; 0x580f
   211b8:	movt	r3, #3
   211bc:	mov	r0, r5
   211c0:	mov	r1, r4
   211c4:	mov	r2, #1
   211c8:	bl	2b174 <flatcc_json_printer_uint32_field@@Base>
   211cc:	sub	sp, fp, #16
   211d0:	pop	{r4, r5, r6, sl, fp, pc}
   211d4:	push	{r4, r5, r6, sl, fp, lr}
   211d8:	add	fp, sp, #16
   211dc:	sub	sp, sp, #16
   211e0:	mov	r4, r1
   211e4:	mov	r5, r0
   211e8:	mov	r6, #0
   211ec:	str	r6, [sp, #8]
   211f0:	str	r6, [sp, #12]
   211f4:	mov	r0, #15
   211f8:	str	r0, [sp]
   211fc:	movw	r3, #22527	; 0x57ff
   21200:	movt	r3, #3
   21204:	mov	r0, r5
   21208:	mov	r2, #0
   2120c:	bl	2b518 <flatcc_json_printer_int64_field@@Base>
   21210:	mov	r0, #21
   21214:	stm	sp, {r0, r6}
   21218:	movw	r3, #22560	; 0x5820
   2121c:	movt	r3, #3
   21220:	mov	r0, r5
   21224:	mov	r1, r4
   21228:	mov	r2, #1
   2122c:	bl	2b174 <flatcc_json_printer_uint32_field@@Base>
   21230:	sub	sp, fp, #16
   21234:	pop	{r4, r5, r6, sl, fp, pc}
   21238:	sub	r2, r1, #2
   2123c:	cmp	r2, #9
   21240:	bhi	21284 <main@@Base+0xb1a8>
   21244:	add	r1, pc, #0
   21248:	ldr	pc, [r1, r2, lsl #2]
   2124c:	andeq	r1, r2, r4, ror r2
   21250:	muleq	r2, ip, r2
   21254:	muleq	r2, ip, r2
   21258:	muleq	r2, ip, r2
   2125c:	muleq	r2, ip, r2
   21260:	muleq	r2, ip, r2
   21264:	andeq	r1, r2, ip, lsr #5
   21268:			; <UNDEFINED> instruction: 0x000212bc
   2126c:	andeq	r1, r2, ip, asr #5
   21270:	ldrdeq	r1, [r2], -ip
   21274:	movw	r1, #22635	; 0x586b
   21278:	movt	r1, #3
   2127c:	mov	r2, #5
   21280:	b	2aba0 <flatcc_json_printer_enum@@Base>
   21284:	cmp	r1, #255	; 0xff
   21288:	bne	2129c <main@@Base+0xb1c0>
   2128c:	movw	r1, #22670	; 0x588e
   21290:	movt	r1, #3
   21294:	mov	r2, #6
   21298:	b	2aba0 <flatcc_json_printer_enum@@Base>
   2129c:	movw	r1, #28756	; 0x7054
   212a0:	movt	r1, #3
   212a4:	mov	r2, #4
   212a8:	b	2aba0 <flatcc_json_printer_enum@@Base>
   212ac:	movw	r1, #22641	; 0x5871
   212b0:	movt	r1, #3
   212b4:	mov	r2, #8
   212b8:	b	2aba0 <flatcc_json_printer_enum@@Base>
   212bc:	movw	r1, #22650	; 0x587a
   212c0:	movt	r1, #3
   212c4:	mov	r2, #5
   212c8:	b	2aba0 <flatcc_json_printer_enum@@Base>
   212cc:	movw	r1, #22656	; 0x5880
   212d0:	movt	r1, #3
   212d4:	mov	r2, #7
   212d8:	b	2aba0 <flatcc_json_printer_enum@@Base>
   212dc:	movw	r1, #22664	; 0x5888
   212e0:	movt	r1, #3
   212e4:	mov	r2, #5
   212e8:	b	2aba0 <flatcc_json_printer_enum@@Base>
   212ec:	ldrb	r3, [r1, #8]
   212f0:	sub	r2, r3, #2
   212f4:	cmp	r2, #9
   212f8:	bhi	21338 <main@@Base+0xb25c>
   212fc:	add	r3, pc, #0
   21300:	ldr	pc, [r3, r2, lsl #2]
   21304:	andeq	r1, r2, r4, asr #6
   21308:	andeq	r1, r2, ip, asr r3
   2130c:	andeq	r1, r2, ip, asr r3
   21310:	andeq	r1, r2, ip, asr r3
   21314:	andeq	r1, r2, ip, asr r3
   21318:	andeq	r1, r2, ip, asr r3
   2131c:	andeq	r1, r2, r0, asr r3
   21320:	andeq	r1, r2, ip, lsr #6
   21324:	andeq	r1, r2, ip, lsr #6
   21328:	andeq	r1, r2, r0, asr #6
   2132c:	movw	r2, #5068	; 0x13cc
   21330:	movt	r2, #2
   21334:	b	2fc58 <flatcc_json_printer_union_struct@@Base>
   21338:	cmp	r3, #255	; 0xff
   2133c:	bxne	lr
   21340:	b	2fce8 <flatcc_json_printer_union_string@@Base>
   21344:	movw	r2, #4960	; 0x1360
   21348:	movt	r2, #2
   2134c:	b	2fc24 <flatcc_json_printer_union_table@@Base>
   21350:	movw	r2, #5012	; 0x1394
   21354:	movt	r2, #2
   21358:	b	2fc58 <flatcc_json_printer_union_struct@@Base>
   2135c:	bx	lr
   21360:	push	{fp, lr}
   21364:	mov	fp, sp
   21368:	sub	sp, sp, #8
   2136c:	mov	r2, #0
   21370:	mov	r3, #19
   21374:	str	r3, [sp]
   21378:	str	r2, [sp, #4]
   2137c:	movw	r3, #22677	; 0x5895
   21380:	movt	r3, #3
   21384:	mov	r2, #0
   21388:	bl	2b464 <flatcc_json_printer_int32_field@@Base>
   2138c:	mov	sp, fp
   21390:	pop	{fp, pc}
   21394:	push	{fp, lr}
   21398:	mov	fp, sp
   2139c:	sub	sp, sp, #8
   213a0:	mov	r2, r1
   213a4:	mov	r1, #11
   213a8:	movw	r3, #22697	; 0x58a9
   213ac:	movt	r3, #3
   213b0:	str	r3, [sp]
   213b4:	str	r1, [sp, #4]
   213b8:	mov	r1, #0
   213bc:	mov	r3, #0
   213c0:	bl	2c104 <flatcc_json_printer_uint16_struct_field@@Base>
   213c4:	mov	sp, fp
   213c8:	pop	{fp, pc}
   213cc:	push	{fp, lr}
   213d0:	mov	fp, sp
   213d4:	sub	sp, sp, #8
   213d8:	mov	r2, r1
   213dc:	mov	r1, #10
   213e0:	movw	r3, #22709	; 0x58b5
   213e4:	movt	r3, #3
   213e8:	str	r3, [sp]
   213ec:	str	r1, [sp, #4]
   213f0:	mov	r1, #0
   213f4:	mov	r3, #0
   213f8:	bl	2c2ec <flatcc_json_printer_int32_struct_field@@Base>
   213fc:	mov	sp, fp
   21400:	pop	{fp, pc}
   21404:	ldrb	r1, [r0, #12]
   21408:	sub	r1, r1, #1
   2140c:	uxtb	r2, r1
   21410:	cmp	r2, #3
   21414:	movhi	r0, #0
   21418:	bxhi	lr
   2141c:	sxtb	r1, r1
   21420:	movw	r2, #22868	; 0x5954
   21424:	movt	r2, #3
   21428:	ldr	r1, [r2, r1, lsl #2]
   2142c:	b	259e8 <flatcc_verify_union_table@@Base>
   21430:	push	{r4, sl, fp, lr}
   21434:	add	fp, sp, #8
   21438:	mov	r4, r0
   2143c:	mov	r1, #0
   21440:	mov	r2, #0
   21444:	bl	253c4 <flatcc_verify_string_field@@Base>
   21448:	cmp	r0, #0
   2144c:	popne	{r4, sl, fp, pc}
   21450:	mov	r0, r4
   21454:	mov	r1, #1
   21458:	mov	r2, #8
   2145c:	mov	r3, #8
   21460:	bl	25358 <flatcc_verify_field@@Base>
   21464:	cmp	r0, #0
   21468:	beq	21470 <main@@Base+0xb394>
   2146c:	pop	{r4, sl, fp, pc}
   21470:	mov	r0, r4
   21474:	mov	r1, #2
   21478:	mov	r2, #2
   2147c:	mov	r3, #2
   21480:	pop	{r4, sl, fp, lr}
   21484:	b	25358 <flatcc_verify_field@@Base>
   21488:	mov	r0, #0
   2148c:	bx	lr
   21490:	push	{r4, r5, r6, sl, fp, lr}
   21494:	add	fp, sp, #16
   21498:	sub	sp, sp, #8
   2149c:	mov	r4, r0
   214a0:	mvn	r5, #0
   214a4:	mov	r6, #1
   214a8:	str	r6, [sp]
   214ac:	str	r5, [sp, #4]
   214b0:	mov	r1, #0
   214b4:	mov	r2, #0
   214b8:	mov	r3, #1
   214bc:	bl	25518 <flatcc_verify_vector_field@@Base>
   214c0:	cmp	r0, #0
   214c4:	bne	214ec <main@@Base+0xb410>
   214c8:	str	r6, [sp]
   214cc:	str	r5, [sp, #4]
   214d0:	mov	r0, r4
   214d4:	mov	r1, #1
   214d8:	mov	r2, #0
   214dc:	mov	r3, #1
   214e0:	bl	25518 <flatcc_verify_vector_field@@Base>
   214e4:	cmp	r0, #0
   214e8:	beq	214f4 <main@@Base+0xb418>
   214ec:	sub	sp, fp, #16
   214f0:	pop	{r4, r5, r6, sl, fp, pc}
   214f4:	movw	r0, #39732	; 0x9b34
   214f8:	movt	r0, #1
   214fc:	mov	r1, #1
   21500:	str	r1, [sp]
   21504:	str	r0, [sp, #4]
   21508:	mov	r0, r4
   2150c:	mov	r1, #2
   21510:	mov	r2, #0
   21514:	mov	r3, #0
   21518:	bl	25e3c <flatcc_verify_table_as_nested_root@@Base>
   2151c:	sub	sp, fp, #16
   21520:	pop	{r4, r5, r6, sl, fp, pc}
   21524:	push	{r4, sl, fp, lr}
   21528:	add	fp, sp, #8
   2152c:	mov	r4, r0
   21530:	mov	r1, #0
   21534:	mov	r2, #1
   21538:	mov	r3, #1
   2153c:	bl	25358 <flatcc_verify_field@@Base>
   21540:	cmp	r0, #0
   21544:	bne	21580 <main@@Base+0xb4a4>
   21548:	mov	r0, r4
   2154c:	mov	r1, #1
   21550:	mov	r2, #1
   21554:	mov	r3, #1
   21558:	bl	25358 <flatcc_verify_field@@Base>
   2155c:	cmp	r0, #0
   21560:	popne	{r4, sl, fp, pc}
   21564:	mov	r0, r4
   21568:	mov	r1, #2
   2156c:	mov	r2, #1
   21570:	mov	r3, #1
   21574:	bl	25358 <flatcc_verify_field@@Base>
   21578:	cmp	r0, #0
   2157c:	beq	21584 <main@@Base+0xb4a8>
   21580:	pop	{r4, sl, fp, pc}
   21584:	mov	r0, r4
   21588:	mov	r1, #3
   2158c:	mov	r2, #1
   21590:	mov	r3, #1
   21594:	pop	{r4, sl, fp, lr}
   21598:	b	25358 <flatcc_verify_field@@Base>
   2159c:	mov	r0, #0
   215a0:	bx	lr
   215a4:	push	{r4, sl, fp, lr}
   215a8:	add	fp, sp, #8
   215ac:	mov	r4, r0
   215b0:	movw	r3, #5644	; 0x160c
   215b4:	movt	r3, #2
   215b8:	mov	r1, #0
   215bc:	mov	r2, #0
   215c0:	bl	25714 <flatcc_verify_table_field@@Base>
   215c4:	cmp	r0, #0
   215c8:	popne	{r4, sl, fp, pc}
   215cc:	movw	r3, #5748	; 0x1674
   215d0:	movt	r3, #2
   215d4:	mov	r0, r4
   215d8:	mov	r1, #1
   215dc:	mov	r2, #0
   215e0:	bl	25714 <flatcc_verify_table_field@@Base>
   215e4:	cmp	r0, #0
   215e8:	beq	215f0 <main@@Base+0xb514>
   215ec:	pop	{r4, sl, fp, pc}
   215f0:	movw	r3, #5124	; 0x1404
   215f4:	movt	r3, #2
   215f8:	mov	r0, r4
   215fc:	mov	r1, #3
   21600:	mov	r2, #0
   21604:	pop	{r4, sl, fp, lr}
   21608:	b	260b0 <flatcc_verify_union_vector_field@@Base>
   2160c:	push	{r4, sl, fp, lr}
   21610:	add	fp, sp, #8
   21614:	mov	r4, r0
   21618:	movw	r3, #5916	; 0x171c
   2161c:	movt	r3, #2
   21620:	mov	r1, #0
   21624:	mov	r2, #0
   21628:	bl	25714 <flatcc_verify_table_field@@Base>
   2162c:	cmp	r0, #0
   21630:	popne	{r4, sl, fp, pc}
   21634:	movw	r3, #6164	; 0x1814
   21638:	movt	r3, #2
   2163c:	mov	r0, r4
   21640:	mov	r1, #1
   21644:	mov	r2, #0
   21648:	bl	25714 <flatcc_verify_table_field@@Base>
   2164c:	cmp	r0, #0
   21650:	beq	21658 <main@@Base+0xb57c>
   21654:	pop	{r4, sl, fp, pc}
   21658:	movw	r3, #6224	; 0x1850
   2165c:	movt	r3, #2
   21660:	mov	r0, r4
   21664:	mov	r1, #2
   21668:	mov	r2, #0
   2166c:	pop	{r4, sl, fp, lr}
   21670:	b	25714 <flatcc_verify_table_field@@Base>
   21674:	push	{r4, sl, fp, lr}
   21678:	add	fp, sp, #8
   2167c:	mov	r4, r0
   21680:	movw	r3, #6284	; 0x188c
   21684:	movt	r3, #2
   21688:	mov	r1, #1
   2168c:	mov	r2, #0
   21690:	bl	25f44 <flatcc_verify_union_field@@Base>
   21694:	cmp	r0, #0
   21698:	bne	216fc <main@@Base+0xb620>
   2169c:	movw	r3, #6284	; 0x188c
   216a0:	movt	r3, #2
   216a4:	mov	r0, r4
   216a8:	mov	r1, #3
   216ac:	mov	r2, #0
   216b0:	bl	25f44 <flatcc_verify_union_field@@Base>
   216b4:	cmp	r0, #0
   216b8:	bne	216fc <main@@Base+0xb620>
   216bc:	movw	r3, #6284	; 0x188c
   216c0:	movt	r3, #2
   216c4:	mov	r0, r4
   216c8:	mov	r1, #5
   216cc:	mov	r2, #0
   216d0:	bl	25f44 <flatcc_verify_union_field@@Base>
   216d4:	cmp	r0, #0
   216d8:	popne	{r4, sl, fp, pc}
   216dc:	movw	r3, #6284	; 0x188c
   216e0:	movt	r3, #2
   216e4:	mov	r0, r4
   216e8:	mov	r1, #7
   216ec:	mov	r2, #0
   216f0:	bl	25f44 <flatcc_verify_union_field@@Base>
   216f4:	cmp	r0, #0
   216f8:	beq	21700 <main@@Base+0xb624>
   216fc:	pop	{r4, sl, fp, pc}
   21700:	movw	r3, #6284	; 0x188c
   21704:	movt	r3, #2
   21708:	mov	r0, r4
   2170c:	mov	r1, #9
   21710:	mov	r2, #0
   21714:	pop	{r4, sl, fp, lr}
   21718:	b	260b0 <flatcc_verify_union_vector_field@@Base>
   2171c:	push	{r4, sl, fp, lr}
   21720:	add	fp, sp, #8
   21724:	mov	r4, r0
   21728:	mov	r1, #0
   2172c:	mov	r2, #0
   21730:	bl	253c4 <flatcc_verify_string_field@@Base>
   21734:	cmp	r0, #0
   21738:	bne	217f8 <main@@Base+0xb71c>
   2173c:	mov	r0, r4
   21740:	mov	r1, #1
   21744:	mov	r2, #4
   21748:	mov	r3, #4
   2174c:	bl	25358 <flatcc_verify_field@@Base>
   21750:	cmp	r0, #0
   21754:	bne	217f8 <main@@Base+0xb71c>
   21758:	mov	r0, r4
   2175c:	mov	r1, #2
   21760:	mov	r2, #0
   21764:	bl	253c4 <flatcc_verify_string_field@@Base>
   21768:	cmp	r0, #0
   2176c:	bne	217f8 <main@@Base+0xb71c>
   21770:	mov	r0, r4
   21774:	mov	r1, #3
   21778:	mov	r2, #8
   2177c:	mov	r3, #8
   21780:	bl	25358 <flatcc_verify_field@@Base>
   21784:	cmp	r0, #0
   21788:	bne	217f8 <main@@Base+0xb71c>
   2178c:	mov	r0, r4
   21790:	mov	r1, #4
   21794:	mov	r2, #0
   21798:	bl	253c4 <flatcc_verify_string_field@@Base>
   2179c:	cmp	r0, #0
   217a0:	bne	217f8 <main@@Base+0xb71c>
   217a4:	mov	r0, r4
   217a8:	mov	r1, #5
   217ac:	mov	r2, #8
   217b0:	mov	r3, #8
   217b4:	bl	25358 <flatcc_verify_field@@Base>
   217b8:	cmp	r0, #0
   217bc:	bne	217f8 <main@@Base+0xb71c>
   217c0:	mov	r0, r4
   217c4:	mov	r1, #6
   217c8:	mov	r2, #4
   217cc:	mov	r3, #4
   217d0:	bl	25358 <flatcc_verify_field@@Base>
   217d4:	cmp	r0, #0
   217d8:	popne	{r4, sl, fp, pc}
   217dc:	mov	r0, r4
   217e0:	mov	r1, #7
   217e4:	mov	r2, #8
   217e8:	mov	r3, #8
   217ec:	bl	25358 <flatcc_verify_field@@Base>
   217f0:	cmp	r0, #0
   217f4:	beq	217fc <main@@Base+0xb720>
   217f8:	pop	{r4, sl, fp, pc}
   217fc:	mov	r0, r4
   21800:	mov	r1, #8
   21804:	mov	r2, #4
   21808:	mov	r3, #4
   2180c:	pop	{r4, sl, fp, lr}
   21810:	b	25358 <flatcc_verify_field@@Base>
   21814:	push	{r4, sl, fp, lr}
   21818:	add	fp, sp, #8
   2181c:	mov	r4, r0
   21820:	mov	r1, #0
   21824:	mov	r2, #8
   21828:	mov	r3, #8
   2182c:	bl	25358 <flatcc_verify_field@@Base>
   21830:	cmp	r0, #0
   21834:	popne	{r4, sl, fp, pc}
   21838:	mov	r0, r4
   2183c:	mov	r1, #1
   21840:	mov	r2, #4
   21844:	mov	r3, #4
   21848:	pop	{r4, sl, fp, lr}
   2184c:	b	25358 <flatcc_verify_field@@Base>
   21850:	push	{r4, sl, fp, lr}
   21854:	add	fp, sp, #8
   21858:	mov	r4, r0
   2185c:	mov	r1, #0
   21860:	mov	r2, #8
   21864:	mov	r3, #8
   21868:	bl	25358 <flatcc_verify_field@@Base>
   2186c:	cmp	r0, #0
   21870:	popne	{r4, sl, fp, pc}
   21874:	mov	r0, r4
   21878:	mov	r1, #1
   2187c:	mov	r2, #4
   21880:	mov	r3, #4
   21884:	pop	{r4, sl, fp, lr}
   21888:	b	25358 <flatcc_verify_field@@Base>
   2188c:	ldrb	r2, [r0, #12]
   21890:	sub	r1, r2, #2
   21894:	cmp	r1, #9
   21898:	bhi	218d8 <main@@Base+0xb7fc>
   2189c:	add	r2, pc, #0
   218a0:	ldr	pc, [r2, r1, lsl #2]
   218a4:	andeq	r1, r2, ip, ror #17
   218a8:	andeq	r1, r2, r4, ror #17
   218ac:	andeq	r1, r2, r4, ror #17
   218b0:	andeq	r1, r2, r4, ror #17
   218b4:	andeq	r1, r2, r4, ror #17
   218b8:	andeq	r1, r2, r4, ror #17
   218bc:	strdeq	r1, [r2], -r8
   218c0:	andeq	r1, r2, ip, asr #17
   218c4:	andeq	r1, r2, ip, asr #17
   218c8:	andeq	r1, r2, r0, ror #17
   218cc:	mov	r1, #4
   218d0:	mov	r2, #4
   218d4:	b	25a1c <flatcc_verify_union_struct@@Base>
   218d8:	cmp	r2, #255	; 0xff
   218dc:	bne	218e4 <main@@Base+0xb808>
   218e0:	b	25a9c <flatcc_verify_union_string@@Base>
   218e4:	mov	r0, #0
   218e8:	bx	lr
   218ec:	movw	r1, #6404	; 0x1904
   218f0:	movt	r1, #2
   218f4:	b	259e8 <flatcc_verify_union_table@@Base>
   218f8:	mov	r1, #2
   218fc:	mov	r2, #2
   21900:	b	25a1c <flatcc_verify_union_struct@@Base>
   21904:	mov	r1, #0
   21908:	mov	r2, #4
   2190c:	mov	r3, #4
   21910:	b	25358 <flatcc_verify_field@@Base>

00021914 <flatcc_builder_default_alloc@@Base>:
   21914:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21918:	add	fp, sp, #24
   2191c:	mov	r4, r1
   21920:	cmp	r2, #0
   21924:	beq	2196c <flatcc_builder_default_alloc@@Base+0x58>
   21928:	mov	r8, r3
   2192c:	ldr	r0, [fp, #8]
   21930:	sub	r1, r0, #1
   21934:	cmp	r1, #6
   21938:	bhi	21998 <flatcc_builder_default_alloc@@Base+0x84>
   2193c:	mov	r0, #256	; 0x100
   21940:	add	r3, pc, #0
   21944:	ldr	pc, [r3, r1, lsl #2]
   21948:	andeq	r1, r2, ip, lsr #19
   2194c:	muleq	r2, r8, r9
   21950:	muleq	r2, r8, r9
   21954:	andeq	r1, r2, r4, ror #18
   21958:	andeq	r1, r2, r0, lsr #19
   2195c:	muleq	r2, r8, r9
   21960:	andeq	r1, r2, r8, lsr #19
   21964:	mov	r0, #288	; 0x120
   21968:	b	219ac <flatcc_builder_default_alloc@@Base+0x98>
   2196c:	ldr	r0, [r4]
   21970:	cmp	r0, #0
   21974:	moveq	r6, #0
   21978:	moveq	r0, r6
   2197c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   21980:	bl	14e54 <free@plt>
   21984:	mov	r6, #0
   21988:	str	r6, [r4]
   2198c:	str	r6, [r4, #4]
   21990:	mov	r0, r6
   21994:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21998:	mov	r0, #32
   2199c:	b	219ac <flatcc_builder_default_alloc@@Base+0x98>
   219a0:	mov	r0, r2
   219a4:	b	219ac <flatcc_builder_default_alloc@@Base+0x98>
   219a8:	mov	r0, #64	; 0x40
   219ac:	mov	r7, r0
   219b0:	lsl	r0, r0, #1
   219b4:	cmp	r7, r2
   219b8:	bcc	219ac <flatcc_builder_default_alloc@@Base+0x98>
   219bc:	ldr	r0, [r4, #4]
   219c0:	mov	r6, #0
   219c4:	cmp	r0, r2
   219c8:	lsrcs	r0, r0, #1
   219cc:	cmpcs	r0, r7
   219d0:	bcs	21a08 <flatcc_builder_default_alloc@@Base+0xf4>
   219d4:	ldr	r0, [r4]
   219d8:	mov	r1, r7
   219dc:	bl	14e90 <realloc@plt>
   219e0:	cmp	r0, #0
   219e4:	mvneq	r6, #0
   219e8:	moveq	r0, r6
   219ec:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   219f0:	mov	r5, r0
   219f4:	cmp	r8, #0
   219f8:	ldrne	r1, [r4, #4]
   219fc:	cmpne	r7, r1
   21a00:	bhi	21a10 <flatcc_builder_default_alloc@@Base+0xfc>
   21a04:	stm	r4, {r5, r7}
   21a08:	mov	r0, r6
   21a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21a10:	add	r0, r5, r1
   21a14:	sub	r2, r7, r1
   21a18:	mov	r1, #0
   21a1c:	bl	14ef0 <memset@plt>
   21a20:	b	21a04 <flatcc_builder_default_alloc@@Base+0xf0>

00021a24 <flatcc_builder_flush_vtable_cache@@Base>:
   21a24:	push	{r4, r5, fp, lr}
   21a28:	add	fp, sp, #8
   21a2c:	mov	r4, r0
   21a30:	ldr	r0, [r0, #116]	; 0x74
   21a34:	cmp	r0, #0
   21a38:	popeq	{r4, r5, fp, pc}
   21a3c:	ldr	r0, [r4, #92]	; 0x5c
   21a40:	ldr	r2, [r4, #96]	; 0x60
   21a44:	mov	r5, #0
   21a48:	mov	r1, #0
   21a4c:	bl	14ef0 <memset@plt>
   21a50:	mov	r0, #16
   21a54:	str	r5, [r4, #120]	; 0x78
   21a58:	str	r0, [r4, #124]	; 0x7c
   21a5c:	pop	{r4, r5, fp, pc}

00021a60 <flatcc_builder_custom_init@@Base>:
   21a60:	push	{r4, r5, r6, r7, fp, lr}
   21a64:	add	fp, sp, #16
   21a68:	mov	r5, r3
   21a6c:	mov	r6, r2
   21a70:	mov	r7, r1
   21a74:	mov	r4, r0
   21a78:	mov	r1, #0
   21a7c:	mov	r2, #232	; 0xe8
   21a80:	bl	14ef0 <memset@plt>
   21a84:	ldr	r0, [fp, #8]
   21a88:	cmp	r7, #0
   21a8c:	bne	21aa4 <flatcc_builder_custom_init@@Base+0x44>
   21a90:	mov	r1, #1
   21a94:	str	r1, [r4, #184]	; 0xb8
   21a98:	add	r6, r4, #188	; 0xbc
   21a9c:	movw	r7, #20024	; 0x4e38
   21aa0:	movt	r7, #2
   21aa4:	movw	r1, #6420	; 0x1914
   21aa8:	movt	r1, #2
   21aac:	cmp	r5, #0
   21ab0:	movne	r1, r5
   21ab4:	str	r6, [r4, #36]	; 0x24
   21ab8:	str	r0, [r4, #40]	; 0x28
   21abc:	str	r7, [r4, #44]	; 0x2c
   21ac0:	str	r1, [r4, #48]	; 0x30
   21ac4:	mov	r0, #0
   21ac8:	pop	{r4, r5, r6, r7, fp, pc}

00021acc <flatcc_builder_init@@Base>:
   21acc:	push	{fp, lr}
   21ad0:	mov	fp, sp
   21ad4:	sub	sp, sp, #8
   21ad8:	mov	r1, #0
   21adc:	str	r1, [sp]
   21ae0:	mov	r1, #0
   21ae4:	mov	r2, #0
   21ae8:	mov	r3, #0
   21aec:	bl	21a60 <flatcc_builder_custom_init@@Base>
   21af0:	mov	r0, #0
   21af4:	mov	sp, fp
   21af8:	pop	{fp, pc}

00021afc <flatcc_builder_custom_reset@@Base>:
   21afc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21b00:	add	fp, sp, #24
   21b04:	sub	sp, sp, #8
   21b08:	mov	r9, r2
   21b0c:	mov	r8, r1
   21b10:	mov	r4, r0
   21b14:	add	r7, r0, #52	; 0x34
   21b18:	mov	r5, #0
   21b1c:	ldr	r0, [r7]
   21b20:	cmp	r0, #0
   21b24:	beq	21b68 <flatcc_builder_custom_reset@@Base+0x6c>
   21b28:	cmp	r9, #0
   21b2c:	cmpne	r5, #5
   21b30:	beq	21b58 <flatcc_builder_custom_reset@@Base+0x5c>
   21b34:	ldr	r0, [r4, #40]	; 0x28
   21b38:	ldr	r6, [r4, #48]	; 0x30
   21b3c:	str	r5, [sp]
   21b40:	mov	r1, r7
   21b44:	mov	r2, #1
   21b48:	mov	r3, #1
   21b4c:	blx	r6
   21b50:	cmp	r0, #0
   21b54:	bne	21c08 <flatcc_builder_custom_reset@@Base+0x10c>
   21b58:	ldm	r7, {r0, r2}
   21b5c:	mov	r1, #0
   21b60:	bl	14ef0 <memset@plt>
   21b64:	b	21b74 <flatcc_builder_custom_reset@@Base+0x78>
   21b68:	ldr	r0, [r7, #4]
   21b6c:	cmp	r0, #0
   21b70:	bne	21c18 <flatcc_builder_custom_reset@@Base+0x11c>
   21b74:	add	r7, r7, #8
   21b78:	add	r5, r5, #1
   21b7c:	cmp	r5, #8
   21b80:	bcc	21b1c <flatcc_builder_custom_reset@@Base+0x20>
   21b84:	mov	r0, #0
   21b88:	str	r0, [r4, #120]	; 0x78
   21b8c:	ldr	r1, [r4, #124]	; 0x7c
   21b90:	cmp	r1, #0
   21b94:	movne	r1, #16
   21b98:	strne	r1, [r4, #124]	; 0x7c
   21b9c:	vmov.i32	q8, #0	; 0x00000000
   21ba0:	strh	r0, [r4, #128]	; 0x80
   21ba4:	str	r0, [r4, #136]	; 0x88
   21ba8:	str	r0, [r4, #140]	; 0x8c
   21bac:	str	r0, [r4, #32]
   21bb0:	add	r1, r4, #148	; 0x94
   21bb4:	vst1.32	{d16-d17}, [r1]
   21bb8:	ldr	r1, [r4, #52]	; 0x34
   21bbc:	ldr	r2, [r4, #60]	; 0x3c
   21bc0:	ldr	r3, [r4, #76]	; 0x4c
   21bc4:	str	r2, [r4, #16]
   21bc8:	str	r0, [r4, #20]
   21bcc:	str	r0, [r4, #24]
   21bd0:	str	r3, [r4]
   21bd4:	str	r1, [r4, #4]
   21bd8:	cmp	r8, #0
   21bdc:	movne	r0, #0
   21be0:	strne	r0, [r4, #172]	; 0xac
   21be4:	strne	r0, [r4, #176]	; 0xb0
   21be8:	strne	r0, [r4, #180]	; 0xb4
   21bec:	ldr	r0, [r4, #184]	; 0xb8
   21bf0:	mov	r5, #0
   21bf4:	cmp	r0, #0
   21bf8:	beq	21c0c <flatcc_builder_custom_reset@@Base+0x110>
   21bfc:	add	r0, r4, #188	; 0xbc
   21c00:	bl	24d18 <flatcc_emitter_reset@@Base>
   21c04:	b	21c0c <flatcc_builder_custom_reset@@Base+0x110>
   21c08:	mvn	r5, #0
   21c0c:	mov	r0, r5
   21c10:	sub	sp, fp, #24
   21c14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21c18:	movw	r0, #23396	; 0x5b64
   21c1c:	movt	r0, #3
   21c20:	movw	r1, #23414	; 0x5b76
   21c24:	movt	r1, #3
   21c28:	movw	r3, #23484	; 0x5bbc
   21c2c:	movt	r3, #3
   21c30:	movw	r2, #434	; 0x1b2
   21c34:	bl	14f44 <__assert_fail@plt>

00021c38 <flatcc_builder_reset@@Base>:
   21c38:	mov	r1, #0
   21c3c:	mov	r2, #0
   21c40:	b	21afc <flatcc_builder_custom_reset@@Base>

00021c44 <flatcc_builder_clear@@Base>:
   21c44:	push	{r4, r5, r6, r7, fp, lr}
   21c48:	add	fp, sp, #16
   21c4c:	sub	sp, sp, #8
   21c50:	mov	r7, r0
   21c54:	add	r5, r0, #52	; 0x34
   21c58:	mov	r6, #0
   21c5c:	ldr	r0, [r7, #40]	; 0x28
   21c60:	ldr	r4, [r7, #48]	; 0x30
   21c64:	str	r6, [sp]
   21c68:	mov	r1, r5
   21c6c:	mov	r2, #0
   21c70:	mov	r3, #0
   21c74:	blx	r4
   21c78:	add	r5, r5, #8
   21c7c:	add	r6, r6, #1
   21c80:	cmp	r6, #8
   21c84:	bne	21c5c <flatcc_builder_clear@@Base+0x18>
   21c88:	ldr	r0, [r7, #184]	; 0xb8
   21c8c:	cmp	r0, #0
   21c90:	beq	21c9c <flatcc_builder_clear@@Base+0x58>
   21c94:	add	r0, r7, #188	; 0xbc
   21c98:	bl	24dd4 <flatcc_emitter_clear@@Base>
   21c9c:	mov	r0, r7
   21ca0:	mov	r1, #0
   21ca4:	mov	r2, #232	; 0xe8
   21ca8:	sub	sp, fp, #16
   21cac:	pop	{r4, r5, r6, r7, fp, lr}
   21cb0:	b	14ef0 <memset@plt>

00021cb4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   21cb4:	push	{r4, r5, r6, r7, fp, lr}
   21cb8:	add	fp, sp, #16
   21cbc:	sub	sp, sp, #8
   21cc0:	mov	r4, r0
   21cc4:	ldr	r2, [r0, #228]	; 0xe4
   21cc8:	mov	r7, #0
   21ccc:	str	r7, [sp]
   21cd0:	add	r0, r1, #7
   21cd4:	bic	r5, r0, #3
   21cd8:	mov	r0, r4
   21cdc:	mov	r1, #7
   21ce0:	mov	r3, r5
   21ce4:	bl	21d2c <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   21ce8:	cmp	r0, #0
   21cec:	beq	21d20 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   21cf0:	mov	r6, r0
   21cf4:	mov	r1, #0
   21cf8:	mov	r2, r5
   21cfc:	bl	14ef0 <memset@plt>
   21d00:	ldr	r0, [r4, #224]	; 0xe0
   21d04:	str	r0, [r6], #4
   21d08:	ldr	r0, [r4, #228]	; 0xe4
   21d0c:	add	r1, r0, #4
   21d10:	add	r0, r0, r5
   21d14:	str	r1, [r4, #224]	; 0xe0
   21d18:	str	r0, [r4, #228]	; 0xe4
   21d1c:	mov	r7, r6
   21d20:	mov	r0, r7
   21d24:	sub	sp, fp, #16
   21d28:	pop	{r4, r5, r6, r7, fp, pc}
   21d2c:	push	{r4, r5, fp, lr}
   21d30:	add	fp, sp, #8
   21d34:	sub	sp, sp, #8
   21d38:	mov	r4, r2
   21d3c:	add	r2, r3, r2
   21d40:	add	r3, r0, r1, lsl #3
   21d44:	add	r5, r3, #52	; 0x34
   21d48:	ldr	r3, [r3, #56]	; 0x38
   21d4c:	cmp	r2, r3
   21d50:	bls	21d78 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   21d54:	ldr	r3, [fp, #8]
   21d58:	ldr	ip, [r0, #40]	; 0x28
   21d5c:	ldr	lr, [r0, #48]	; 0x30
   21d60:	str	r1, [sp]
   21d64:	mov	r0, ip
   21d68:	mov	r1, r5
   21d6c:	blx	lr
   21d70:	cmp	r0, #0
   21d74:	bne	21d88 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   21d78:	ldr	r0, [r5]
   21d7c:	add	r0, r0, r4
   21d80:	sub	sp, fp, #8
   21d84:	pop	{r4, r5, fp, pc}
   21d88:	movw	r0, #27932	; 0x6d1c
   21d8c:	movt	r0, #3
   21d90:	movw	r1, #23414	; 0x5b76
   21d94:	movt	r1, #3
   21d98:	movw	r3, #27478	; 0x6b56
   21d9c:	movt	r3, #3
   21da0:	mov	r2, #308	; 0x134
   21da4:	bl	14f44 <__assert_fail@plt>

00021da8 <flatcc_builder_enter_user_frame@@Base>:
   21da8:	push	{r4, r5, r6, r7, fp, lr}
   21dac:	add	fp, sp, #16
   21db0:	sub	sp, sp, #8
   21db4:	mov	r4, r0
   21db8:	ldr	r2, [r0, #228]	; 0xe4
   21dbc:	mov	r6, #0
   21dc0:	str	r6, [sp]
   21dc4:	add	r0, r1, #7
   21dc8:	bic	r5, r0, #3
   21dcc:	mov	r0, r4
   21dd0:	mov	r1, #7
   21dd4:	mov	r3, r5
   21dd8:	bl	21d2c <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   21ddc:	cmp	r0, #0
   21de0:	beq	21e10 <flatcc_builder_enter_user_frame@@Base+0x68>
   21de4:	mov	r7, r0
   21de8:	mov	r1, #0
   21dec:	mov	r2, r5
   21df0:	bl	14ef0 <memset@plt>
   21df4:	ldr	r0, [r4, #224]	; 0xe0
   21df8:	str	r0, [r7]
   21dfc:	ldr	r0, [r4, #228]	; 0xe4
   21e00:	add	r6, r0, #4
   21e04:	add	r0, r0, r5
   21e08:	str	r6, [r4, #224]	; 0xe0
   21e0c:	str	r0, [r4, #228]	; 0xe4
   21e10:	mov	r0, r6
   21e14:	sub	sp, fp, #16
   21e18:	pop	{r4, r5, r6, r7, fp, pc}

00021e1c <flatcc_builder_exit_user_frame@@Base>:
   21e1c:	ldr	r1, [r0, #224]	; 0xe0
   21e20:	cmp	r1, #0
   21e24:	subne	r2, r1, #4
   21e28:	strne	r2, [r0, #228]	; 0xe4
   21e2c:	ldrne	r2, [r0, #108]	; 0x6c
   21e30:	addne	r1, r2, r1
   21e34:	ldrne	r1, [r1, #-4]
   21e38:	strne	r1, [r0, #224]	; 0xe0
   21e3c:	movne	r0, r1
   21e40:	bxne	lr
   21e44:	push	{fp, lr}
   21e48:	mov	fp, sp
   21e4c:	movw	r0, #23546	; 0x5bfa
   21e50:	movt	r0, #3
   21e54:	movw	r1, #23414	; 0x5b76
   21e58:	movt	r1, #3
   21e5c:	movw	r3, #23571	; 0x5c13
   21e60:	movt	r3, #3
   21e64:	movw	r2, #542	; 0x21e
   21e68:	bl	14f44 <__assert_fail@plt>

00021e6c <flatcc_builder_exit_user_frame_at@@Base>:
   21e6c:	ldr	r2, [r0, #224]	; 0xe0
   21e70:	cmp	r2, r1
   21e74:	bcc	21e80 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   21e78:	str	r1, [r0, #224]	; 0xe0
   21e7c:	b	21e1c <flatcc_builder_exit_user_frame@@Base>
   21e80:	push	{fp, lr}
   21e84:	mov	fp, sp
   21e88:	movw	r0, #23629	; 0x5c4d
   21e8c:	movt	r0, #3
   21e90:	movw	r1, #23414	; 0x5b76
   21e94:	movt	r1, #3
   21e98:	movw	r3, #23660	; 0x5c6c
   21e9c:	movt	r3, #3
   21ea0:	movw	r2, #551	; 0x227
   21ea4:	bl	14f44 <__assert_fail@plt>

00021ea8 <flatcc_builder_get_current_user_frame@@Base>:
   21ea8:	ldr	r0, [r0, #224]	; 0xe0
   21eac:	bx	lr

00021eb0 <flatcc_builder_get_user_frame_ptr@@Base>:
   21eb0:	ldr	r0, [r0, #108]	; 0x6c
   21eb4:	add	r0, r0, r1
   21eb8:	bx	lr

00021ebc <flatcc_builder_embed_buffer@@Base>:
   21ebc:	push	{r4, r5, r6, r7, fp, lr}
   21ec0:	add	fp, sp, #16
   21ec4:	sub	sp, sp, #80	; 0x50
   21ec8:	mov	r5, r3
   21ecc:	mov	r6, r2
   21ed0:	mov	r2, r1
   21ed4:	mov	r4, r0
   21ed8:	ldr	r0, [fp, #8]
   21edc:	strh	r0, [fp, #-18]	; 0xffffffee
   21ee0:	ldr	r3, [r4, #152]	; 0x98
   21ee4:	cmp	r3, #0
   21ee8:	movwne	r3, #1
   21eec:	sub	r1, fp, #18
   21ef0:	mov	r0, r4
   21ef4:	bl	21fc8 <flatcc_builder_embed_buffer@@Base+0x10c>
   21ef8:	ldr	r0, [fp, #12]
   21efc:	and	r0, r0, #2
   21f00:	add	r1, r5, r0, lsl #1
   21f04:	ldrh	r2, [fp, #-18]	; 0xffffffee
   21f08:	mov	r0, r4
   21f0c:	bl	22084 <flatcc_builder_embed_buffer@@Base+0x1c8>
   21f10:	mov	r7, r0
   21f14:	add	r0, r0, r5
   21f18:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   21f1c:	mov	r1, #0
   21f20:	str	r1, [sp]
   21f24:	str	r0, [fp, #-24]	; 0xffffffe8
   21f28:	str	r1, [sp, #4]
   21f2c:	ldr	r0, [r4, #152]	; 0x98
   21f30:	cmp	r0, #0
   21f34:	beq	21f54 <flatcc_builder_embed_buffer@@Base+0x98>
   21f38:	sub	r0, fp, #24
   21f3c:	str	r0, [sp, #8]
   21f40:	mov	r0, #4
   21f44:	str	r0, [sp]
   21f48:	str	r0, [sp, #12]
   21f4c:	mov	r0, #1
   21f50:	str	r0, [sp, #4]
   21f54:	cmp	r5, #0
   21f58:	beq	21f80 <flatcc_builder_embed_buffer@@Base+0xc4>
   21f5c:	ldm	sp, {r0, r1}
   21f60:	add	r0, r0, r5
   21f64:	str	r0, [sp]
   21f68:	mov	r0, sp
   21f6c:	add	r0, r0, r1, lsl #3
   21f70:	str	r6, [r0, #8]
   21f74:	str	r5, [r0, #12]
   21f78:	add	r0, r1, #1
   21f7c:	str	r0, [sp, #4]
   21f80:	cmp	r7, #0
   21f84:	beq	21fb4 <flatcc_builder_embed_buffer@@Base+0xf8>
   21f88:	ldm	sp, {r0, r1}
   21f8c:	add	r0, r0, r7
   21f90:	str	r0, [sp]
   21f94:	mov	r0, sp
   21f98:	add	r0, r0, r1, lsl #3
   21f9c:	movw	r2, #22884	; 0x5964
   21fa0:	movt	r2, #3
   21fa4:	str	r2, [r0, #8]
   21fa8:	str	r7, [r0, #12]
   21fac:	add	r0, r1, #1
   21fb0:	str	r0, [sp, #4]
   21fb4:	mov	r1, sp
   21fb8:	mov	r0, r4
   21fbc:	bl	2209c <flatcc_builder_embed_buffer@@Base+0x1e0>
   21fc0:	sub	sp, fp, #16
   21fc4:	pop	{r4, r5, r6, r7, fp, pc}
   21fc8:	push	{r4, r5, r6, r7, fp, lr}
   21fcc:	add	fp, sp, #16
   21fd0:	sub	sp, sp, #72	; 0x48
   21fd4:	mov	r6, r3
   21fd8:	mov	r5, r2
   21fdc:	mov	r7, r1
   21fe0:	mov	r4, r0
   21fe4:	cmp	r2, #0
   21fe8:	bne	21ff8 <flatcc_builder_embed_buffer@@Base+0x13c>
   21fec:	ldrh	r5, [r4, #132]	; 0x84
   21ff0:	cmp	r5, #0
   21ff4:	movweq	r5, #1
   21ff8:	mov	r0, r7
   21ffc:	mov	r1, #4
   22000:	bl	22e70 <flatcc_builder_start_vector@@Base+0x80>
   22004:	mov	r0, r7
   22008:	mov	r1, r5
   2200c:	bl	22e70 <flatcc_builder_start_vector@@Base+0x80>
   22010:	cmp	r6, #0
   22014:	bne	2205c <flatcc_builder_embed_buffer@@Base+0x1a0>
   22018:	mov	r0, r4
   2201c:	mov	r1, r5
   22020:	bl	24b6c <flatcc_builder_get_emit_context@@Base+0x8>
   22024:	cmp	r0, #0
   22028:	beq	2205c <flatcc_builder_embed_buffer@@Base+0x1a0>
   2202c:	movw	r1, #22884	; 0x5964
   22030:	movt	r1, #3
   22034:	str	r1, [sp, #8]
   22038:	str	r0, [sp]
   2203c:	str	r0, [sp, #12]
   22040:	mov	r0, #1
   22044:	str	r0, [sp, #4]
   22048:	mov	r1, sp
   2204c:	mov	r0, r4
   22050:	bl	231fc <flatcc_builder_create_vtable@@Base+0x80>
   22054:	cmp	r0, #0
   22058:	beq	22064 <flatcc_builder_embed_buffer@@Base+0x1a8>
   2205c:	sub	sp, fp, #16
   22060:	pop	{r4, r5, r6, r7, fp, pc}
   22064:	movw	r0, #27932	; 0x6d1c
   22068:	movt	r0, #3
   2206c:	movw	r1, #23414	; 0x5b76
   22070:	movt	r1, #3
   22074:	movw	r3, #27545	; 0x6b99
   22078:	movt	r3, #3
   2207c:	movw	r2, #702	; 0x2be
   22080:	bl	14f44 <__assert_fail@plt>
   22084:	ldr	r0, [r0, #136]	; 0x88
   22088:	sub	r0, r0, r1
   2208c:	sub	r1, r2, #1
   22090:	and	r0, r0, r1
   22094:	bx	lr
   22098:	bx	lr
   2209c:	push	{r4, r5, fp, lr}
   220a0:	add	fp, sp, #8
   220a4:	sub	sp, sp, #8
   220a8:	ldr	r3, [r1]
   220ac:	cmp	r3, #0
   220b0:	ble	22110 <flatcc_builder_embed_buffer@@Base+0x254>
   220b4:	mov	r4, r0
   220b8:	ldr	r0, [r0, #136]	; 0x88
   220bc:	sub	r5, r0, r3
   220c0:	ldr	r2, [r1, #4]
   220c4:	ldr	r0, [r4, #36]	; 0x24
   220c8:	ldr	ip, [r4, #44]	; 0x2c
   220cc:	str	r3, [sp]
   220d0:	add	r1, r1, #8
   220d4:	mov	r3, r5
   220d8:	blx	ip
   220dc:	cmp	r0, #0
   220e0:	streq	r5, [r4, #136]	; 0x88
   220e4:	moveq	r0, r5
   220e8:	subeq	sp, fp, #8
   220ec:	popeq	{r4, r5, fp, pc}
   220f0:	movw	r0, #27932	; 0x6d1c
   220f4:	movt	r0, #3
   220f8:	movw	r1, #23414	; 0x5b76
   220fc:	movt	r1, #3
   22100:	movw	r3, #27611	; 0x6bdb
   22104:	movt	r3, #3
   22108:	movw	r2, #651	; 0x28b
   2210c:	bl	14f44 <__assert_fail@plt>
   22110:	movw	r0, #27932	; 0x6d1c
   22114:	movt	r0, #3
   22118:	movw	r1, #23414	; 0x5b76
   2211c:	movt	r1, #3
   22120:	movw	r3, #27611	; 0x6bdb
   22124:	movt	r3, #3
   22128:	movw	r2, #647	; 0x287
   2212c:	bl	14f44 <__assert_fail@plt>

00022130 <flatcc_builder_create_buffer@@Base>:
   22130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22134:	add	fp, sp, #28
   22138:	sub	sp, sp, #92	; 0x5c
   2213c:	mov	r6, r3
   22140:	mov	r7, r1
   22144:	mov	r4, r0
   22148:	ldr	r0, [fp, #8]
   2214c:	strh	r0, [fp, #-30]	; 0xffffffe2
   22150:	mov	r0, #0
   22154:	str	r0, [sp, #4]
   22158:	ldr	sl, [fp, #12]
   2215c:	and	r9, sl, #1
   22160:	sub	r1, fp, #30
   22164:	mov	r0, r4
   22168:	mov	r3, r9
   2216c:	bl	21fc8 <flatcc_builder_embed_buffer@@Base+0x10c>
   22170:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   22174:	mov	r0, r4
   22178:	mov	r1, r5
   2217c:	bl	22300 <flatcc_builder_create_buffer@@Base+0x1d0>
   22180:	cmp	r7, #0
   22184:	str	r6, [sp]
   22188:	beq	221a4 <flatcc_builder_create_buffer@@Base+0x74>
   2218c:	ldr	r7, [r7]
   22190:	mov	r0, r7
   22194:	bl	22310 <flatcc_builder_create_buffer@@Base+0x1e0>
   22198:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   2219c:	str	r7, [sp, #4]
   221a0:	b	221a8 <flatcc_builder_create_buffer@@Base+0x78>
   221a4:	ldr	r7, [sp, #4]
   221a8:	mov	r8, #4
   221ac:	and	r0, r8, sl, lsl #1
   221b0:	cmp	r7, #0
   221b4:	mov	r6, r7
   221b8:	movwne	r6, #1
   221bc:	add	r0, r0, r6, lsl #2
   221c0:	add	r1, r0, #4
   221c4:	mov	r0, r4
   221c8:	mov	r2, r5
   221cc:	bl	22084 <flatcc_builder_embed_buffer@@Base+0x1c8>
   221d0:	mov	r1, #0
   221d4:	str	r1, [sp, #8]
   221d8:	str	r1, [sp, #12]
   221dc:	ands	ip, sl, #3
   221e0:	beq	221fc <flatcc_builder_create_buffer@@Base+0xcc>
   221e4:	sub	r1, fp, #40	; 0x28
   221e8:	str	r1, [sp, #16]
   221ec:	str	r8, [sp, #8]
   221f0:	str	r8, [sp, #20]
   221f4:	mov	r1, #1
   221f8:	str	r1, [sp, #12]
   221fc:	ldr	r1, [sp, #8]
   22200:	ldr	r3, [sp, #12]
   22204:	add	r5, r1, #4
   22208:	str	r5, [sp, #8]
   2220c:	add	lr, sp, #8
   22210:	add	r1, lr, r3, lsl #3
   22214:	sub	r2, fp, #36	; 0x24
   22218:	str	r2, [r1, #8]
   2221c:	str	r8, [r1, #12]
   22220:	add	r1, r3, #1
   22224:	str	r1, [sp, #12]
   22228:	cmp	r7, #0
   2222c:	beq	22254 <flatcc_builder_create_buffer@@Base+0x124>
   22230:	lsl	r2, r6, #2
   22234:	add	r5, r5, r2
   22238:	str	r5, [sp, #8]
   2223c:	add	r1, lr, r1, lsl #3
   22240:	add	r5, sp, #4
   22244:	str	r5, [r1, #8]
   22248:	str	r2, [r1, #12]
   2224c:	add	r1, r3, #2
   22250:	str	r1, [sp, #12]
   22254:	cmp	r0, #0
   22258:	beq	22288 <flatcc_builder_create_buffer@@Base+0x158>
   2225c:	ldr	r1, [sp, #8]
   22260:	ldr	r2, [sp, #12]
   22264:	add	r1, r1, r0
   22268:	str	r1, [sp, #8]
   2226c:	add	r1, lr, r2, lsl #3
   22270:	movw	r3, #22884	; 0x5964
   22274:	movt	r3, #3
   22278:	str	r3, [r1, #8]
   2227c:	str	r0, [r1, #12]
   22280:	add	r0, r2, #1
   22284:	str	r0, [sp, #12]
   22288:	ldr	r0, [r4, #136]	; 0x88
   2228c:	ldr	r1, [sp, #8]
   22290:	sub	r5, r0, r1
   22294:	cmp	ip, #0
   22298:	addne	r5, r5, #4
   2229c:	mov	r0, #144	; 0x90
   222a0:	cmp	r9, #0
   222a4:	movweq	r0, #140	; 0x8c
   222a8:	ldr	r0, [r4, r0]
   222ac:	sub	r0, r0, r5
   222b0:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   222b4:	str	r0, [fp, #-40]	; 0xffffffd8
   222b8:	ldr	r0, [sp]
   222bc:	sub	r0, r0, r5
   222c0:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   222c4:	str	r0, [fp, #-36]	; 0xffffffdc
   222c8:	add	r1, sp, #8
   222cc:	mov	r0, r4
   222d0:	bl	2209c <flatcc_builder_embed_buffer@@Base+0x1e0>
   222d4:	cmp	r0, #0
   222d8:	subne	sp, fp, #28
   222dc:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222e0:	movw	r0, #27932	; 0x6d1c
   222e4:	movt	r0, #3
   222e8:	movw	r1, #23414	; 0x5b76
   222ec:	movt	r1, #3
   222f0:	movw	r3, #23729	; 0x5cb1
   222f4:	movt	r3, #3
   222f8:	mov	r2, #772	; 0x304
   222fc:	bl	14f44 <__assert_fail@plt>
   22300:	ldrh	r2, [r0, #128]	; 0x80
   22304:	cmp	r2, r1
   22308:	strhcc	r1, [r0, #128]	; 0x80
   2230c:	bx	lr
   22310:	bx	lr

00022314 <flatcc_builder_create_struct@@Base>:
   22314:	push	{r4, r5, r6, r7, fp, lr}
   22318:	add	fp, sp, #16
   2231c:	sub	sp, sp, #72	; 0x48
   22320:	cmp	r3, #0
   22324:	beq	223bc <flatcc_builder_create_struct@@Base+0xa8>
   22328:	mov	r7, r3
   2232c:	mov	r5, r2
   22330:	mov	r6, r1
   22334:	mov	r4, r0
   22338:	mov	r1, r3
   2233c:	bl	22300 <flatcc_builder_create_buffer@@Base+0x1d0>
   22340:	mov	r0, r4
   22344:	mov	r1, r5
   22348:	mov	r2, r7
   2234c:	bl	22084 <flatcc_builder_embed_buffer@@Base+0x1c8>
   22350:	mov	r1, #0
   22354:	str	r1, [sp]
   22358:	str	r1, [sp, #4]
   2235c:	cmp	r5, #0
   22360:	strne	r6, [sp, #8]
   22364:	strne	r5, [sp]
   22368:	strne	r5, [sp, #12]
   2236c:	movne	r1, #1
   22370:	strne	r1, [sp, #4]
   22374:	cmp	r0, #0
   22378:	beq	223a8 <flatcc_builder_create_struct@@Base+0x94>
   2237c:	ldm	sp, {r1, r2}
   22380:	add	r1, r1, r0
   22384:	str	r1, [sp]
   22388:	mov	r1, sp
   2238c:	add	r1, r1, r2, lsl #3
   22390:	movw	r3, #22884	; 0x5964
   22394:	movt	r3, #3
   22398:	str	r3, [r1, #8]
   2239c:	str	r0, [r1, #12]
   223a0:	add	r0, r2, #1
   223a4:	str	r0, [sp, #4]
   223a8:	mov	r1, sp
   223ac:	mov	r0, r4
   223b0:	bl	2209c <flatcc_builder_embed_buffer@@Base+0x1e0>
   223b4:	sub	sp, fp, #16
   223b8:	pop	{r4, r5, r6, r7, fp, pc}
   223bc:	movw	r0, #23860	; 0x5d34
   223c0:	movt	r0, #3
   223c4:	movw	r1, #23414	; 0x5b76
   223c8:	movt	r1, #3
   223cc:	movw	r3, #23871	; 0x5d3f
   223d0:	movt	r3, #3
   223d4:	movw	r2, #783	; 0x30f
   223d8:	bl	14f44 <__assert_fail@plt>

000223dc <flatcc_builder_start_buffer@@Base>:
   223dc:	push	{r4, r5, r6, r7, fp, lr}
   223e0:	add	fp, sp, #16
   223e4:	mov	r6, r3
   223e8:	mov	r7, r2
   223ec:	mov	r5, r1
   223f0:	mov	r4, r0
   223f4:	ldrh	r1, [r0, #128]	; 0x80
   223f8:	bl	22498 <flatcc_builder_start_buffer@@Base+0xbc>
   223fc:	mov	r1, r0
   22400:	mvn	r0, #0
   22404:	cmp	r1, #0
   22408:	popne	{r4, r5, r6, r7, fp, pc}
   2240c:	mov	r0, #1
   22410:	strh	r0, [r4, #128]	; 0x80
   22414:	ldrh	r1, [r4, #132]	; 0x84
   22418:	ldr	r2, [r4, #32]
   2241c:	strh	r1, [r2, #34]	; 0x22
   22420:	strh	r7, [r4, #132]	; 0x84
   22424:	ldrh	r1, [r4, #164]	; 0xa4
   22428:	ldr	r2, [r4, #32]
   2242c:	strh	r1, [r2, #32]
   22430:	strh	r6, [r4, #164]	; 0xa4
   22434:	ldr	r1, [r4, #32]
   22438:	ldr	r2, [r4, #144]	; 0x90
   2243c:	str	r2, [r1, #20]
   22440:	ldr	r1, [r4, #32]
   22444:	ldr	r2, [r4, #152]	; 0x98
   22448:	str	r2, [r1, #28]
   2244c:	ldr	r1, [r4, #32]
   22450:	ldr	r2, [r4, #136]	; 0x88
   22454:	ldr	r3, [r4, #148]	; 0x94
   22458:	ldr	r7, [r4, #168]	; 0xa8
   2245c:	add	r6, r3, #1
   22460:	str	r2, [r4, #144]	; 0x90
   22464:	str	r6, [r4, #148]	; 0x94
   22468:	str	r3, [r4, #152]	; 0x98
   2246c:	str	r7, [r1, #16]
   22470:	movw	r1, #22884	; 0x5964
   22474:	movt	r1, #3
   22478:	cmp	r5, #0
   2247c:	movne	r1, r5
   22480:	ldr	r1, [r1]
   22484:	str	r1, [r4, #168]	; 0xa8
   22488:	ldr	r1, [r4, #32]
   2248c:	strh	r0, [r1, #14]
   22490:	mov	r0, #0
   22494:	pop	{r4, r5, r6, r7, fp, pc}
   22498:	push	{r4, r5, r6, sl, fp, lr}
   2249c:	add	fp, sp, #16
   224a0:	sub	sp, sp, #8
   224a4:	mov	r5, r1
   224a8:	mov	r4, r0
   224ac:	ldr	r1, [r0, #156]	; 0x9c
   224b0:	ldr	r2, [r0, #160]	; 0xa0
   224b4:	add	r0, r1, #1
   224b8:	str	r0, [r4, #156]	; 0x9c
   224bc:	cmp	r1, r2
   224c0:	bge	224d4 <flatcc_builder_start_buffer@@Base+0xf8>
   224c4:	ldr	r0, [r4, #32]
   224c8:	add	r0, r0, #36	; 0x24
   224cc:	str	r0, [r4, #32]
   224d0:	b	22548 <flatcc_builder_start_buffer@@Base+0x16c>
   224d4:	ldr	r2, [r4, #176]	; 0xb0
   224d8:	mvn	r6, #0
   224dc:	cmp	r2, #1
   224e0:	cmpge	r1, r2
   224e4:	bge	22584 <flatcc_builder_start_buffer@@Base+0x1a8>
   224e8:	mov	r1, #0
   224ec:	str	r1, [sp]
   224f0:	add	r0, r0, r0, lsl #3
   224f4:	mvn	r1, #35	; 0x23
   224f8:	add	r2, r1, r0, lsl #2
   224fc:	mov	r0, r4
   22500:	mov	r1, #4
   22504:	mov	r3, #36	; 0x24
   22508:	bl	21d2c <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   2250c:	str	r0, [r4, #32]
   22510:	cmp	r0, #0
   22514:	beq	22584 <flatcc_builder_start_buffer@@Base+0x1a8>
   22518:	ldr	r0, [r4, #88]	; 0x58
   2251c:	ldr	r1, [r4, #176]	; 0xb0
   22520:	movw	r2, #36409	; 0x8e39
   22524:	movt	r2, #14563	; 0x38e3
   22528:	umull	r0, r2, r0, r2
   2252c:	lsr	r0, r2, #3
   22530:	cmp	r1, r2, lsr #3
   22534:	mov	r2, r0
   22538:	movlt	r2, r1
   2253c:	cmp	r1, #0
   22540:	movle	r2, r0
   22544:	str	r2, [r4, #160]	; 0xa0
   22548:	ldr	r0, [r4, #20]
   2254c:	ldr	r1, [r4, #32]
   22550:	str	r0, [r1, #8]
   22554:	ldrh	r2, [r4, #130]	; 0x82
   22558:	strh	r2, [r1, #12]
   2255c:	strh	r5, [r4, #130]	; 0x82
   22560:	ldr	r2, [r4, #28]
   22564:	mvn	r3, #3
   22568:	stm	r1, {r2, r3}
   2256c:	mov	r6, #0
   22570:	str	r6, [r4, #20]
   22574:	add	r0, r0, r2
   22578:	add	r0, r0, #7
   2257c:	bic	r0, r0, #7
   22580:	str	r0, [r4, #28]
   22584:	mov	r0, r6
   22588:	sub	sp, fp, #16
   2258c:	pop	{r4, r5, r6, sl, fp, pc}

00022590 <flatcc_builder_end_buffer@@Base>:
   22590:	push	{r4, r5, r6, r7, fp, lr}
   22594:	add	fp, sp, #16
   22598:	sub	sp, sp, #8
   2259c:	mov	r4, r0
   225a0:	ldr	r0, [r0, #32]
   225a4:	ldrh	r0, [r0, #14]
   225a8:	cmp	r0, #1
   225ac:	bne	22638 <flatcc_builder_end_buffer@@Base+0xa8>
   225b0:	mov	r5, r1
   225b4:	ldr	r6, [r4, #152]	; 0x98
   225b8:	ldrh	r7, [r4, #164]	; 0xa4
   225bc:	ldrh	r1, [r4, #132]	; 0x84
   225c0:	mov	r0, r4
   225c4:	bl	22300 <flatcc_builder_create_buffer@@Base+0x1d0>
   225c8:	and	r0, r7, #2
   225cc:	cmp	r6, #0
   225d0:	orrne	r0, r0, #1
   225d4:	ldrh	r2, [r4, #132]	; 0x84
   225d8:	ldrh	r1, [r4, #128]	; 0x80
   225dc:	str	r1, [sp]
   225e0:	str	r0, [sp, #4]
   225e4:	add	r1, r4, #168	; 0xa8
   225e8:	mov	r0, r4
   225ec:	mov	r3, r5
   225f0:	bl	22130 <flatcc_builder_create_buffer@@Base>
   225f4:	mov	r5, r0
   225f8:	cmp	r0, #0
   225fc:	beq	2262c <flatcc_builder_end_buffer@@Base+0x9c>
   22600:	ldr	r0, [r4, #32]
   22604:	ldr	r1, [r0, #20]
   22608:	str	r1, [r4, #144]	; 0x90
   2260c:	ldr	r1, [r0, #28]
   22610:	str	r1, [r4, #152]	; 0x98
   22614:	ldr	r1, [r0, #16]
   22618:	str	r1, [r4, #168]	; 0xa8
   2261c:	ldrh	r0, [r0, #32]
   22620:	strh	r0, [r4, #164]	; 0xa4
   22624:	mov	r0, r4
   22628:	bl	22658 <flatcc_builder_end_buffer@@Base+0xc8>
   2262c:	mov	r0, r5
   22630:	sub	sp, fp, #16
   22634:	pop	{r4, r5, r6, r7, fp, pc}
   22638:	movw	r0, #23973	; 0x5da5
   2263c:	movt	r0, #3
   22640:	movw	r1, #23414	; 0x5b76
   22644:	movt	r1, #3
   22648:	movw	r3, #24017	; 0x5dd1
   2264c:	movt	r3, #3
   22650:	movw	r2, #838	; 0x346
   22654:	bl	14f44 <__assert_fail@plt>
   22658:	push	{r4, sl, fp, lr}
   2265c:	add	fp, sp, #8
   22660:	mov	r4, r0
   22664:	ldr	r0, [r0, #16]
   22668:	ldr	r2, [r4, #20]
   2266c:	mov	r1, #0
   22670:	bl	14ef0 <memset@plt>
   22674:	ldr	r0, [r4, #32]
   22678:	ldr	r1, [r0, #8]
   2267c:	str	r1, [r4, #20]
   22680:	ldr	r1, [r0]
   22684:	str	r1, [r4, #28]
   22688:	ldr	r1, [r0, #4]
   2268c:	mov	r0, r4
   22690:	bl	22710 <flatcc_builder_start_struct@@Base+0x4c>
   22694:	ldrh	r1, [r4, #130]	; 0x82
   22698:	mov	r0, r4
   2269c:	bl	22300 <flatcc_builder_create_buffer@@Base+0x1d0>
   226a0:	ldr	r0, [r4, #32]
   226a4:	ldr	r1, [r4, #156]	; 0x9c
   226a8:	ldrh	r2, [r0, #12]
   226ac:	sub	r0, r0, #36	; 0x24
   226b0:	str	r0, [r4, #32]
   226b4:	sub	r0, r1, #1
   226b8:	str	r0, [r4, #156]	; 0x9c
   226bc:	strh	r2, [r4, #130]	; 0x82
   226c0:	pop	{r4, sl, fp, pc}

000226c4 <flatcc_builder_start_struct@@Base>:
   226c4:	push	{r4, r5, fp, lr}
   226c8:	add	fp, sp, #8
   226cc:	mov	r4, r1
   226d0:	mov	r5, r0
   226d4:	mov	r1, r2
   226d8:	bl	22498 <flatcc_builder_start_buffer@@Base+0xbc>
   226dc:	cmp	r0, #0
   226e0:	movne	r0, #0
   226e4:	popne	{r4, r5, fp, pc}
   226e8:	ldr	r0, [r5, #32]
   226ec:	mov	r1, #2
   226f0:	strh	r1, [r0, #14]
   226f4:	mov	r0, r5
   226f8:	mvn	r1, #3
   226fc:	bl	22710 <flatcc_builder_start_struct@@Base+0x4c>
   22700:	mov	r0, r5
   22704:	mov	r1, r4
   22708:	pop	{r4, r5, fp, lr}
   2270c:	b	22748 <flatcc_builder_start_struct@@Base+0x84>
   22710:	push	{fp, lr}
   22714:	mov	fp, sp
   22718:	ldr	r2, [r0, #28]
   2271c:	ldr	ip, [r0, #32]
   22720:	ldr	r3, [r0, #60]	; 0x3c
   22724:	ldr	lr, [r0, #64]	; 0x40
   22728:	add	r3, r3, r2
   2272c:	str	r3, [r0, #16]
   22730:	sub	r2, lr, r2
   22734:	cmp	r2, r1
   22738:	movhi	r2, r1
   2273c:	str	r2, [r0, #24]
   22740:	str	r1, [ip, #4]
   22744:	pop	{fp, pc}
   22748:	push	{r4, r5, fp, lr}
   2274c:	add	fp, sp, #8
   22750:	mov	r4, r0
   22754:	ldr	r5, [r0, #20]
   22758:	ldr	r2, [r0, #24]
   2275c:	add	r0, r5, r1
   22760:	str	r0, [r4, #20]
   22764:	cmp	r0, r2
   22768:	bcc	2278c <flatcc_builder_start_struct@@Base+0xc8>
   2276c:	add	r1, r0, #1
   22770:	mov	r0, r4
   22774:	mvn	r2, #3
   22778:	bl	24b7c <flatcc_builder_get_emit_context@@Base+0x18>
   2277c:	mov	r1, r0
   22780:	mov	r0, #0
   22784:	cmp	r1, #0
   22788:	popne	{r4, r5, fp, pc}
   2278c:	ldr	r0, [r4, #16]
   22790:	add	r0, r0, r5
   22794:	pop	{r4, r5, fp, pc}

00022798 <flatcc_builder_struct_edit@@Base>:
   22798:	ldr	r0, [r0, #16]
   2279c:	bx	lr

000227a0 <flatcc_builder_end_struct@@Base>:
   227a0:	push	{r4, r5, fp, lr}
   227a4:	add	fp, sp, #8
   227a8:	mov	r4, r0
   227ac:	ldr	r0, [r0, #32]
   227b0:	ldrh	r0, [r0, #14]
   227b4:	cmp	r0, #2
   227b8:	bne	227e8 <flatcc_builder_end_struct@@Base+0x48>
   227bc:	ldrh	r3, [r4, #130]	; 0x82
   227c0:	ldr	r1, [r4, #16]
   227c4:	ldr	r2, [r4, #20]
   227c8:	mov	r0, r4
   227cc:	bl	22314 <flatcc_builder_create_struct@@Base>
   227d0:	mov	r5, r0
   227d4:	cmp	r0, #0
   227d8:	movne	r0, r4
   227dc:	blne	22658 <flatcc_builder_end_buffer@@Base+0xc8>
   227e0:	mov	r0, r5
   227e4:	pop	{r4, r5, fp, pc}
   227e8:	movw	r0, #24106	; 0x5e2a
   227ec:	movt	r0, #3
   227f0:	movw	r1, #23414	; 0x5b76
   227f4:	movt	r1, #3
   227f8:	movw	r3, #24150	; 0x5e56
   227fc:	movt	r3, #3
   22800:	mov	r2, #872	; 0x368
   22804:	bl	14f44 <__assert_fail@plt>

00022808 <flatcc_builder_extend_vector@@Base>:
   22808:	push	{r4, r5, fp, lr}
   2280c:	add	fp, sp, #8
   22810:	mov	r5, r1
   22814:	mov	r4, r0
   22818:	ldr	r0, [r0, #32]
   2281c:	ldr	r2, [r0, #24]
   22820:	mov	r0, r4
   22824:	bl	2284c <flatcc_builder_extend_vector@@Base+0x44>
   22828:	cmp	r0, #0
   2282c:	movne	r0, #0
   22830:	popne	{r4, r5, fp, pc}
   22834:	ldr	r0, [r4, #32]
   22838:	ldr	r0, [r0, #16]
   2283c:	mul	r1, r0, r5
   22840:	mov	r0, r4
   22844:	pop	{r4, r5, fp, lr}
   22848:	b	22748 <flatcc_builder_start_struct@@Base+0x84>
   2284c:	ldr	r0, [r0, #32]
   22850:	ldr	r3, [r0, #20]
   22854:	adds	r1, r3, r1
   22858:	bcs	2286c <flatcc_builder_extend_vector@@Base+0x64>
   2285c:	cmp	r1, r2
   22860:	strls	r1, [r0, #20]
   22864:	movls	r0, #0
   22868:	bxls	lr
   2286c:	push	{fp, lr}
   22870:	mov	fp, sp
   22874:	movw	r0, #27685	; 0x6c25
   22878:	movt	r0, #3
   2287c:	movw	r1, #23414	; 0x5b76
   22880:	movt	r1, #3
   22884:	movw	r3, #27712	; 0x6c40
   22888:	movt	r3, #3
   2288c:	mov	r2, #892	; 0x37c
   22890:	bl	14f44 <__assert_fail@plt>

00022894 <flatcc_builder_vector_push@@Base>:
   22894:	push	{fp, lr}
   22898:	mov	fp, sp
   2289c:	ldr	r2, [r0, #32]
   228a0:	ldrh	r3, [r2, #14]
   228a4:	cmp	r3, #4
   228a8:	bne	228d4 <flatcc_builder_vector_push@@Base+0x40>
   228ac:	ldr	ip, [r2, #20]
   228b0:	ldr	r3, [r2, #24]
   228b4:	cmp	ip, r3
   228b8:	bhi	228f4 <flatcc_builder_vector_push@@Base+0x60>
   228bc:	add	r3, ip, #1
   228c0:	str	r3, [r2, #20]
   228c4:	ldr	r2, [r0, #32]
   228c8:	ldr	r2, [r2, #16]
   228cc:	pop	{fp, lr}
   228d0:	b	22914 <flatcc_builder_vector_push@@Base+0x80>
   228d4:	movw	r0, #24217	; 0x5e99
   228d8:	movt	r0, #3
   228dc:	movw	r1, #23414	; 0x5b76
   228e0:	movt	r1, #3
   228e4:	movw	r3, #24261	; 0x5ec5
   228e8:	movt	r3, #3
   228ec:	movw	r2, #907	; 0x38b
   228f0:	bl	14f44 <__assert_fail@plt>
   228f4:	movw	r0, #24328	; 0x5f08
   228f8:	movt	r0, #3
   228fc:	movw	r1, #23414	; 0x5b76
   22900:	movt	r1, #3
   22904:	movw	r3, #24261	; 0x5ec5
   22908:	movt	r3, #3
   2290c:	mov	r2, #908	; 0x38c
   22910:	bl	14f44 <__assert_fail@plt>
   22914:	push	{r4, r5, r6, sl, fp, lr}
   22918:	add	fp, sp, #16
   2291c:	mov	r4, r2
   22920:	mov	r5, r1
   22924:	mov	r1, r2
   22928:	bl	22748 <flatcc_builder_start_struct@@Base+0x84>
   2292c:	mov	r6, r0
   22930:	cmp	r0, #0
   22934:	beq	22948 <flatcc_builder_vector_push@@Base+0xb4>
   22938:	mov	r0, r6
   2293c:	mov	r1, r5
   22940:	mov	r2, r4
   22944:	bl	14e60 <memcpy@plt>
   22948:	mov	r0, r6
   2294c:	pop	{r4, r5, r6, sl, fp, pc}

00022950 <flatcc_builder_append_vector@@Base>:
   22950:	push	{r4, r5, r6, sl, fp, lr}
   22954:	add	fp, sp, #16
   22958:	mov	r4, r1
   2295c:	mov	r6, r0
   22960:	ldr	r0, [r0, #32]
   22964:	ldrh	r1, [r0, #14]
   22968:	cmp	r1, #4
   2296c:	bne	229ac <flatcc_builder_append_vector@@Base+0x5c>
   22970:	mov	r5, r2
   22974:	ldr	r2, [r0, #24]
   22978:	mov	r0, r6
   2297c:	mov	r1, r5
   22980:	bl	2284c <flatcc_builder_extend_vector@@Base+0x44>
   22984:	cmp	r0, #0
   22988:	movne	r0, #0
   2298c:	popne	{r4, r5, r6, sl, fp, pc}
   22990:	ldr	r0, [r6, #32]
   22994:	ldr	r0, [r0, #16]
   22998:	mul	r2, r0, r5
   2299c:	mov	r0, r6
   229a0:	mov	r1, r4
   229a4:	pop	{r4, r5, r6, sl, fp, lr}
   229a8:	b	22914 <flatcc_builder_vector_push@@Base+0x80>
   229ac:	movw	r0, #24217	; 0x5e99
   229b0:	movt	r0, #3
   229b4:	movw	r1, #23414	; 0x5b76
   229b8:	movt	r1, #3
   229bc:	movw	r3, #24389	; 0x5f45
   229c0:	movt	r3, #3
   229c4:	movw	r2, #915	; 0x393
   229c8:	bl	14f44 <__assert_fail@plt>

000229cc <flatcc_builder_extend_offset_vector@@Base>:
   229cc:	push	{r4, r5, fp, lr}
   229d0:	add	fp, sp, #8
   229d4:	mov	r5, r1
   229d8:	mov	r4, r0
   229dc:	mvn	r2, #-1073741824	; 0xc0000000
   229e0:	bl	2284c <flatcc_builder_extend_vector@@Base+0x44>
   229e4:	mov	r1, r0
   229e8:	mov	r0, #0
   229ec:	cmp	r1, #0
   229f0:	popne	{r4, r5, fp, pc}
   229f4:	lsl	r1, r5, #2
   229f8:	mov	r0, r4
   229fc:	bl	22748 <flatcc_builder_start_struct@@Base+0x84>
   22a00:	pop	{r4, r5, fp, pc}

00022a04 <flatcc_builder_offset_vector_push@@Base>:
   22a04:	push	{r4, r5, fp, lr}
   22a08:	add	fp, sp, #8
   22a0c:	mov	r4, r1
   22a10:	ldr	r1, [r0, #32]
   22a14:	ldrh	r2, [r1, #14]
   22a18:	cmp	r2, #5
   22a1c:	bne	22a54 <flatcc_builder_offset_vector_push@@Base+0x50>
   22a20:	ldr	r2, [r1, #20]
   22a24:	mov	r5, #0
   22a28:	cmn	r2, #-1073741823	; 0xc0000001
   22a2c:	beq	22a4c <flatcc_builder_offset_vector_push@@Base+0x48>
   22a30:	add	r2, r2, #1
   22a34:	str	r2, [r1, #20]
   22a38:	mov	r1, #4
   22a3c:	bl	22748 <flatcc_builder_start_struct@@Base+0x84>
   22a40:	cmp	r0, #0
   22a44:	strne	r4, [r0]
   22a48:	movne	r5, r0
   22a4c:	mov	r0, r5
   22a50:	pop	{r4, r5, fp, pc}
   22a54:	movw	r0, #24466	; 0x5f92
   22a58:	movt	r0, #3
   22a5c:	movw	r1, #23414	; 0x5b76
   22a60:	movt	r1, #3
   22a64:	movw	r3, #24517	; 0x5fc5
   22a68:	movt	r3, #3
   22a6c:	movw	r2, #934	; 0x3a6
   22a70:	bl	14f44 <__assert_fail@plt>

00022a74 <flatcc_builder_append_offset_vector@@Base>:
   22a74:	push	{r4, r5, r6, sl, fp, lr}
   22a78:	add	fp, sp, #16
   22a7c:	mov	r6, r0
   22a80:	ldr	r0, [r0, #32]
   22a84:	ldrh	r0, [r0, #14]
   22a88:	cmp	r0, #5
   22a8c:	bne	22acc <flatcc_builder_append_offset_vector@@Base+0x58>
   22a90:	mov	r5, r2
   22a94:	mov	r4, r1
   22a98:	mov	r0, r6
   22a9c:	mov	r1, r2
   22aa0:	mvn	r2, #-1073741824	; 0xc0000000
   22aa4:	bl	2284c <flatcc_builder_extend_vector@@Base+0x44>
   22aa8:	mov	r1, r0
   22aac:	mov	r0, #0
   22ab0:	cmp	r1, #0
   22ab4:	popne	{r4, r5, r6, sl, fp, pc}
   22ab8:	lsl	r2, r5, #2
   22abc:	mov	r0, r6
   22ac0:	mov	r1, r4
   22ac4:	bl	22914 <flatcc_builder_vector_push@@Base+0x80>
   22ac8:	pop	{r4, r5, r6, sl, fp, pc}
   22acc:	movw	r0, #24466	; 0x5f92
   22ad0:	movt	r0, #3
   22ad4:	movw	r1, #23414	; 0x5b76
   22ad8:	movt	r1, #3
   22adc:	movw	r3, #24615	; 0x6027
   22ae0:	movt	r3, #3
   22ae4:	mov	r2, #948	; 0x3b4
   22ae8:	bl	14f44 <__assert_fail@plt>

00022aec <flatcc_builder_extend_string@@Base>:
   22aec:	push	{r4, r5, fp, lr}
   22af0:	add	fp, sp, #8
   22af4:	mov	r5, r0
   22af8:	ldr	r0, [r0, #32]
   22afc:	ldrh	r0, [r0, #14]
   22b00:	cmp	r0, #6
   22b04:	bne	22b34 <flatcc_builder_extend_string@@Base+0x48>
   22b08:	mov	r4, r1
   22b0c:	mov	r0, r5
   22b10:	mvn	r2, #0
   22b14:	bl	2284c <flatcc_builder_extend_vector@@Base+0x44>
   22b18:	cmp	r0, #0
   22b1c:	movne	r0, #0
   22b20:	popne	{r4, r5, fp, pc}
   22b24:	mov	r0, r5
   22b28:	mov	r1, r4
   22b2c:	pop	{r4, r5, fp, lr}
   22b30:	b	22748 <flatcc_builder_start_struct@@Base+0x84>
   22b34:	movw	r0, #24731	; 0x609b
   22b38:	movt	r0, #3
   22b3c:	movw	r1, #23414	; 0x5b76
   22b40:	movt	r1, #3
   22b44:	movw	r3, #24775	; 0x60c7
   22b48:	movt	r3, #3
   22b4c:	movw	r2, #957	; 0x3bd
   22b50:	bl	14f44 <__assert_fail@plt>

00022b54 <flatcc_builder_append_string@@Base>:
   22b54:	push	{r4, r5, r6, sl, fp, lr}
   22b58:	add	fp, sp, #16
   22b5c:	mov	r6, r0
   22b60:	ldr	r0, [r0, #32]
   22b64:	ldrh	r0, [r0, #14]
   22b68:	cmp	r0, #6
   22b6c:	bne	22ba8 <flatcc_builder_append_string@@Base+0x54>
   22b70:	mov	r4, r2
   22b74:	mov	r5, r1
   22b78:	mov	r0, r6
   22b7c:	mov	r1, r2
   22b80:	mvn	r2, #0
   22b84:	bl	2284c <flatcc_builder_extend_vector@@Base+0x44>
   22b88:	cmp	r0, #0
   22b8c:	movne	r0, #0
   22b90:	popne	{r4, r5, r6, sl, fp, pc}
   22b94:	mov	r0, r6
   22b98:	mov	r1, r5
   22b9c:	mov	r2, r4
   22ba0:	pop	{r4, r5, r6, sl, fp, lr}
   22ba4:	b	22914 <flatcc_builder_vector_push@@Base+0x80>
   22ba8:	movw	r0, #24731	; 0x609b
   22bac:	movt	r0, #3
   22bb0:	movw	r1, #23414	; 0x5b76
   22bb4:	movt	r1, #3
   22bb8:	movw	r3, #24838	; 0x6106
   22bbc:	movt	r3, #3
   22bc0:	movw	r2, #966	; 0x3c6
   22bc4:	bl	14f44 <__assert_fail@plt>

00022bc8 <flatcc_builder_append_string_str@@Base>:
   22bc8:	push	{r4, r5, fp, lr}
   22bcc:	add	fp, sp, #8
   22bd0:	mov	r4, r1
   22bd4:	mov	r5, r0
   22bd8:	mov	r0, r1
   22bdc:	bl	14ecc <strlen@plt>
   22be0:	mov	r2, r0
   22be4:	mov	r0, r5
   22be8:	mov	r1, r4
   22bec:	pop	{r4, r5, fp, lr}
   22bf0:	b	22b54 <flatcc_builder_append_string@@Base>

00022bf4 <flatcc_builder_append_string_strn@@Base>:
   22bf4:	push	{r4, r5, fp, lr}
   22bf8:	add	fp, sp, #8
   22bfc:	mov	r4, r1
   22c00:	mov	r5, r0
   22c04:	mov	r0, r1
   22c08:	mov	r1, r2
   22c0c:	bl	22c24 <flatcc_builder_append_string_strn@@Base+0x30>
   22c10:	mov	r2, r0
   22c14:	mov	r0, r5
   22c18:	mov	r1, r4
   22c1c:	pop	{r4, r5, fp, lr}
   22c20:	b	22b54 <flatcc_builder_append_string@@Base>
   22c24:	push	{r4, r5, fp, lr}
   22c28:	add	fp, sp, #8
   22c2c:	mov	r4, r1
   22c30:	mov	r5, r0
   22c34:	mov	r1, #0
   22c38:	mov	r2, r4
   22c3c:	bl	14f14 <memchr@plt>
   22c40:	cmp	r0, #0
   22c44:	subne	r4, r0, r5
   22c48:	mov	r0, r4
   22c4c:	pop	{r4, r5, fp, pc}

00022c50 <flatcc_builder_truncate_vector@@Base>:
   22c50:	push	{fp, lr}
   22c54:	mov	fp, sp
   22c58:	ldr	r2, [r0, #32]
   22c5c:	ldrh	r3, [r2, #14]
   22c60:	cmp	r3, #4
   22c64:	bne	22c94 <flatcc_builder_truncate_vector@@Base+0x44>
   22c68:	ldr	r3, [r2, #20]
   22c6c:	cmp	r3, r1
   22c70:	bcc	22cb4 <flatcc_builder_truncate_vector@@Base+0x64>
   22c74:	sub	r3, r3, r1
   22c78:	str	r3, [r2, #20]
   22c7c:	ldr	r2, [r0, #32]
   22c80:	ldr	r2, [r2, #16]
   22c84:	mul	r1, r2, r1
   22c88:	bl	22cd4 <flatcc_builder_truncate_vector@@Base+0x84>
   22c8c:	mov	r0, #0
   22c90:	pop	{fp, pc}
   22c94:	movw	r0, #24217	; 0x5e99
   22c98:	movt	r0, #3
   22c9c:	movw	r1, #23414	; 0x5b76
   22ca0:	movt	r1, #3
   22ca4:	movw	r3, #24915	; 0x6153
   22ca8:	movt	r3, #3
   22cac:	movw	r2, #985	; 0x3d9
   22cb0:	bl	14f44 <__assert_fail@plt>
   22cb4:	movw	r0, #24978	; 0x6192
   22cb8:	movt	r0, #3
   22cbc:	movw	r1, #23414	; 0x5b76
   22cc0:	movt	r1, #3
   22cc4:	movw	r3, #24915	; 0x6153
   22cc8:	movt	r3, #3
   22ccc:	movw	r2, #986	; 0x3da
   22cd0:	bl	14f44 <__assert_fail@plt>
   22cd4:	mov	r2, r1
   22cd8:	ldr	r1, [r0, #16]
   22cdc:	ldr	r3, [r0, #20]
   22ce0:	sub	r3, r3, r2
   22ce4:	str	r3, [r0, #20]
   22ce8:	add	r0, r1, r3
   22cec:	mov	r1, #0
   22cf0:	b	14ef0 <memset@plt>

00022cf4 <flatcc_builder_truncate_offset_vector@@Base>:
   22cf4:	push	{fp, lr}
   22cf8:	mov	fp, sp
   22cfc:	ldr	r2, [r0, #32]
   22d00:	ldrh	r3, [r2, #14]
   22d04:	cmp	r3, #5
   22d08:	bne	22d38 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   22d0c:	ldr	r3, [r2, #20]
   22d10:	cmp	r3, r1
   22d14:	bcc	22d58 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   22d18:	sub	r3, r3, r1
   22d1c:	str	r3, [r2, #20]
   22d20:	ldr	r2, [r0, #32]
   22d24:	ldr	r2, [r2, #16]
   22d28:	mul	r1, r2, r1
   22d2c:	bl	22cd4 <flatcc_builder_truncate_vector@@Base+0x84>
   22d30:	mov	r0, #0
   22d34:	pop	{fp, pc}
   22d38:	movw	r0, #24466	; 0x5f92
   22d3c:	movt	r0, #3
   22d40:	movw	r1, #23414	; 0x5b76
   22d44:	movt	r1, #3
   22d48:	movw	r3, #25014	; 0x61b6
   22d4c:	movt	r3, #3
   22d50:	movw	r2, #994	; 0x3e2
   22d54:	bl	14f44 <__assert_fail@plt>
   22d58:	movw	r0, #25084	; 0x61fc
   22d5c:	movt	r0, #3
   22d60:	movw	r1, #23414	; 0x5b76
   22d64:	movt	r1, #3
   22d68:	movw	r3, #25014	; 0x61b6
   22d6c:	movt	r3, #3
   22d70:	movw	r2, #995	; 0x3e3
   22d74:	bl	14f44 <__assert_fail@plt>

00022d78 <flatcc_builder_truncate_string@@Base>:
   22d78:	push	{fp, lr}
   22d7c:	mov	fp, sp
   22d80:	ldr	r2, [r0, #32]
   22d84:	ldrh	r3, [r2, #14]
   22d88:	cmp	r3, #6
   22d8c:	bne	22db0 <flatcc_builder_truncate_string@@Base+0x38>
   22d90:	ldr	r3, [r2, #20]
   22d94:	cmp	r3, r1
   22d98:	bcc	22dd0 <flatcc_builder_truncate_string@@Base+0x58>
   22d9c:	sub	r3, r3, r1
   22da0:	str	r3, [r2, #20]
   22da4:	bl	22cd4 <flatcc_builder_truncate_vector@@Base+0x84>
   22da8:	mov	r0, #0
   22dac:	pop	{fp, pc}
   22db0:	movw	r0, #24731	; 0x609b
   22db4:	movt	r0, #3
   22db8:	movw	r1, #23414	; 0x5b76
   22dbc:	movt	r1, #3
   22dc0:	movw	r3, #25143	; 0x6237
   22dc4:	movt	r3, #3
   22dc8:	movw	r2, #1003	; 0x3eb
   22dcc:	bl	14f44 <__assert_fail@plt>
   22dd0:	movw	r0, #25206	; 0x6276
   22dd4:	movt	r0, #3
   22dd8:	movw	r1, #23414	; 0x5b76
   22ddc:	movt	r1, #3
   22de0:	movw	r3, #25143	; 0x6237
   22de4:	movt	r3, #3
   22de8:	mov	r2, #1004	; 0x3ec
   22dec:	bl	14f44 <__assert_fail@plt>

00022df0 <flatcc_builder_start_vector@@Base>:
   22df0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22df4:	add	fp, sp, #24
   22df8:	sub	sp, sp, #8
   22dfc:	mov	r5, r3
   22e00:	mov	r6, r1
   22e04:	mov	r4, r0
   22e08:	strh	r2, [sp, #6]
   22e0c:	add	r0, sp, #6
   22e10:	mov	r8, #4
   22e14:	mov	r1, #4
   22e18:	bl	22e70 <flatcc_builder_start_vector@@Base+0x80>
   22e1c:	ldrh	r1, [sp, #6]
   22e20:	mov	r0, r4
   22e24:	bl	22498 <flatcc_builder_start_buffer@@Base+0xbc>
   22e28:	mvn	r7, #0
   22e2c:	cmp	r0, #0
   22e30:	bne	22e64 <flatcc_builder_start_vector@@Base+0x74>
   22e34:	ldr	r0, [r4, #32]
   22e38:	str	r6, [r0, #16]
   22e3c:	ldr	r0, [r4, #32]
   22e40:	mov	r7, #0
   22e44:	str	r7, [r0, #20]
   22e48:	ldr	r0, [r4, #32]
   22e4c:	str	r5, [r0, #24]
   22e50:	ldr	r0, [r4, #32]
   22e54:	strh	r8, [r0, #14]
   22e58:	mov	r0, r4
   22e5c:	mvn	r1, #3
   22e60:	bl	22710 <flatcc_builder_start_struct@@Base+0x4c>
   22e64:	mov	r0, r7
   22e68:	sub	sp, fp, #24
   22e6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22e70:	ldrh	r2, [r0]
   22e74:	cmp	r2, r1
   22e78:	strhcc	r1, [r0]
   22e7c:	bx	lr

00022e80 <flatcc_builder_start_offset_vector@@Base>:
   22e80:	push	{r4, r5, r6, sl, fp, lr}
   22e84:	add	fp, sp, #16
   22e88:	mov	r4, r0
   22e8c:	mov	r6, #4
   22e90:	mov	r1, #4
   22e94:	bl	22498 <flatcc_builder_start_buffer@@Base+0xbc>
   22e98:	mvn	r5, #0
   22e9c:	cmp	r0, #0
   22ea0:	beq	22eac <flatcc_builder_start_offset_vector@@Base+0x2c>
   22ea4:	mov	r0, r5
   22ea8:	pop	{r4, r5, r6, sl, fp, pc}
   22eac:	ldr	r0, [r4, #32]
   22eb0:	str	r6, [r0, #16]
   22eb4:	ldr	r0, [r4, #32]
   22eb8:	mov	r5, #0
   22ebc:	str	r5, [r0, #20]
   22ec0:	ldr	r0, [r4, #32]
   22ec4:	mov	r1, #5
   22ec8:	strh	r1, [r0, #14]
   22ecc:	mov	r0, r4
   22ed0:	mvn	r1, #3
   22ed4:	bl	22710 <flatcc_builder_start_struct@@Base+0x4c>
   22ed8:	mov	r0, r5
   22edc:	pop	{r4, r5, r6, sl, fp, pc}

00022ee0 <flatcc_builder_create_offset_vector@@Base>:
   22ee0:	push	{r4, r5, r6, sl, fp, lr}
   22ee4:	add	fp, sp, #16
   22ee8:	mov	r6, r2
   22eec:	mov	r5, r1
   22ef0:	mov	r4, r0
   22ef4:	bl	22e80 <flatcc_builder_start_offset_vector@@Base>
   22ef8:	cmp	r0, #0
   22efc:	beq	22f08 <flatcc_builder_create_offset_vector@@Base+0x28>
   22f00:	mov	r0, #0
   22f04:	pop	{r4, r5, r6, sl, fp, pc}
   22f08:	mov	r0, r4
   22f0c:	mov	r1, r6
   22f10:	bl	229cc <flatcc_builder_extend_offset_vector@@Base>
   22f14:	cmp	r0, #0
   22f18:	beq	22f00 <flatcc_builder_create_offset_vector@@Base+0x20>
   22f1c:	lsl	r2, r6, #2
   22f20:	mov	r1, r5
   22f24:	bl	14e60 <memcpy@plt>
   22f28:	mov	r0, r4
   22f2c:	pop	{r4, r5, r6, sl, fp, lr}
   22f30:	b	22f34 <flatcc_builder_end_offset_vector@@Base>

00022f34 <flatcc_builder_end_offset_vector@@Base>:
   22f34:	push	{r4, r5, fp, lr}
   22f38:	add	fp, sp, #8
   22f3c:	mov	r4, r0
   22f40:	ldr	r0, [r0, #32]
   22f44:	ldrh	r1, [r0, #14]
   22f48:	cmp	r1, #5
   22f4c:	bne	22f78 <flatcc_builder_end_offset_vector@@Base+0x44>
   22f50:	ldr	r2, [r0, #20]
   22f54:	ldr	r1, [r4, #16]
   22f58:	mov	r0, r4
   22f5c:	bl	23ad4 <flatcc_builder_create_offset_vector_direct@@Base>
   22f60:	mov	r5, r0
   22f64:	cmp	r0, #0
   22f68:	movne	r0, r4
   22f6c:	blne	22658 <flatcc_builder_end_buffer@@Base+0xc8>
   22f70:	mov	r0, r5
   22f74:	pop	{r4, r5, fp, pc}
   22f78:	movw	r0, #24466	; 0x5f92
   22f7c:	movt	r0, #3
   22f80:	movw	r1, #23414	; 0x5b76
   22f84:	movt	r1, #3
   22f88:	movw	r3, #26049	; 0x65c1
   22f8c:	movt	r3, #3
   22f90:	movw	r2, #1480	; 0x5c8
   22f94:	bl	14f44 <__assert_fail@plt>

00022f98 <flatcc_builder_start_string@@Base>:
   22f98:	push	{r4, r5, r6, sl, fp, lr}
   22f9c:	add	fp, sp, #16
   22fa0:	mov	r4, r0
   22fa4:	mov	r6, #1
   22fa8:	mov	r1, #1
   22fac:	bl	22498 <flatcc_builder_start_buffer@@Base+0xbc>
   22fb0:	mvn	r5, #0
   22fb4:	cmp	r0, #0
   22fb8:	beq	22fc4 <flatcc_builder_start_string@@Base+0x2c>
   22fbc:	mov	r0, r5
   22fc0:	pop	{r4, r5, r6, sl, fp, pc}
   22fc4:	ldr	r0, [r4, #32]
   22fc8:	str	r6, [r0, #16]
   22fcc:	ldr	r0, [r4, #32]
   22fd0:	mov	r5, #0
   22fd4:	str	r5, [r0, #20]
   22fd8:	ldr	r0, [r4, #32]
   22fdc:	mov	r1, #6
   22fe0:	strh	r1, [r0, #14]
   22fe4:	mov	r0, r4
   22fe8:	mvn	r1, #3
   22fec:	bl	22710 <flatcc_builder_start_struct@@Base+0x4c>
   22ff0:	mov	r0, r5
   22ff4:	pop	{r4, r5, r6, sl, fp, pc}

00022ff8 <flatcc_builder_reserve_table@@Base>:
   22ff8:	cmn	r1, #1
   22ffc:	ble	23004 <flatcc_builder_reserve_table@@Base+0xc>
   23000:	b	2302c <flatcc_builder_reserve_table@@Base+0x34>
   23004:	push	{fp, lr}
   23008:	mov	fp, sp
   2300c:	movw	r0, #25305	; 0x62d9
   23010:	movt	r0, #3
   23014:	movw	r1, #23414	; 0x5b76
   23018:	movt	r1, #3
   2301c:	movw	r3, #25240	; 0x6298
   23020:	movt	r3, #3
   23024:	movw	r2, #1065	; 0x429
   23028:	bl	14f44 <__assert_fail@plt>
   2302c:	push	{r4, r5, r6, sl, fp, lr}
   23030:	add	fp, sp, #16
   23034:	sub	sp, sp, #8
   23038:	mov	r6, r1
   2303c:	mov	r4, r0
   23040:	ldr	r0, [r0, #32]
   23044:	ldrh	r1, [r0, #28]
   23048:	ldr	r0, [r0, #16]
   2304c:	mov	r2, #1
   23050:	str	r2, [sp]
   23054:	mov	r2, #4
   23058:	add	r3, r2, r6, lsl #1
   2305c:	add	r2, r0, r1, lsl #1
   23060:	mov	r5, #0
   23064:	mov	r0, r4
   23068:	mov	r1, #0
   2306c:	bl	21d2c <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   23070:	str	r0, [r4, #4]
   23074:	cmp	r0, #0
   23078:	beq	230b4 <flatcc_builder_reserve_table@@Base+0xbc>
   2307c:	lsl	r1, r6, #1
   23080:	add	r0, r0, #4
   23084:	str	r0, [r4, #4]
   23088:	ldr	r0, [r4, #32]
   2308c:	ldr	r2, [r0, #20]
   23090:	str	r5, [sp]
   23094:	orr	r3, r1, #1
   23098:	mov	r0, r4
   2309c:	mov	r1, #3
   230a0:	bl	21d2c <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   230a4:	str	r0, [r4]
   230a8:	cmp	r0, #0
   230ac:	mvneq	r5, #0
   230b0:	b	230b8 <flatcc_builder_reserve_table@@Base+0xc0>
   230b4:	mvn	r5, #0
   230b8:	mov	r0, r5
   230bc:	sub	sp, fp, #16
   230c0:	pop	{r4, r5, r6, sl, fp, pc}

000230c4 <flatcc_builder_start_table@@Base>:
   230c4:	push	{r4, r5, r6, sl, fp, lr}
   230c8:	add	fp, sp, #16
   230cc:	mov	r6, r1
   230d0:	mov	r4, r0
   230d4:	mov	r1, #4
   230d8:	bl	22498 <flatcc_builder_start_buffer@@Base+0xbc>
   230dc:	mvn	r5, #0
   230e0:	cmp	r0, #0
   230e4:	bne	2315c <flatcc_builder_start_table@@Base+0x98>
   230e8:	ldr	r0, [r4, #4]
   230ec:	ldr	r1, [r4, #32]
   230f0:	ldr	r2, [r4, #52]	; 0x34
   230f4:	sub	r0, r0, r2
   230f8:	str	r0, [r1, #16]
   230fc:	ldr	r0, [r4]
   23100:	ldr	r1, [r4, #32]
   23104:	ldr	r2, [r4, #76]	; 0x4c
   23108:	sub	r0, r0, r2
   2310c:	str	r0, [r1, #20]
   23110:	ldr	r0, [r4, #12]
   23114:	ldr	r1, [r4, #32]
   23118:	str	r0, [r1, #24]
   2311c:	ldr	r0, [r4, #32]
   23120:	ldrh	r1, [r4, #8]
   23124:	strh	r1, [r0, #28]
   23128:	mov	r0, #0
   2312c:	strh	r0, [r4, #8]
   23130:	movw	r0, #15186	; 0x3b52
   23134:	movt	r0, #12137	; 0x2f69
   23138:	str	r0, [r4, #12]
   2313c:	ldr	r0, [r4, #32]
   23140:	mov	r1, #3
   23144:	strh	r1, [r0, #14]
   23148:	mov	r0, r4
   2314c:	mov	r1, r6
   23150:	bl	2302c <flatcc_builder_reserve_table@@Base+0x34>
   23154:	cmp	r0, #0
   23158:	beq	23164 <flatcc_builder_start_table@@Base+0xa0>
   2315c:	mov	r0, r5
   23160:	pop	{r4, r5, r6, sl, fp, pc}
   23164:	mov	r0, r4
   23168:	movw	r1, #65532	; 0xfffc
   2316c:	bl	22710 <flatcc_builder_start_struct@@Base+0x4c>
   23170:	mov	r5, #0
   23174:	mov	r0, r5
   23178:	pop	{r4, r5, r6, sl, fp, pc}

0002317c <flatcc_builder_create_vtable@@Base>:
   2317c:	push	{fp, lr}
   23180:	mov	fp, sp
   23184:	sub	sp, sp, #72	; 0x48
   23188:	mov	r3, #0
   2318c:	str	r3, [sp, #4]
   23190:	str	r3, [sp]
   23194:	cmp	r2, #0
   23198:	strne	r1, [sp, #8]
   2319c:	strne	r2, [sp]
   231a0:	strne	r2, [sp, #12]
   231a4:	movne	r1, #1
   231a8:	strne	r1, [sp, #4]
   231ac:	ldr	r1, [r0, #152]	; 0x98
   231b0:	cmp	r1, #0
   231b4:	bne	231c4 <flatcc_builder_create_vtable@@Base+0x48>
   231b8:	ldr	r1, [r0, #180]	; 0xb4
   231bc:	cmp	r1, #0
   231c0:	beq	231e0 <flatcc_builder_create_vtable@@Base+0x64>
   231c4:	mov	r1, sp
   231c8:	bl	2209c <flatcc_builder_embed_buffer@@Base+0x1e0>
   231cc:	cmp	r0, #0
   231d0:	beq	231f0 <flatcc_builder_create_vtable@@Base+0x74>
   231d4:	add	r0, r0, #1
   231d8:	mov	sp, fp
   231dc:	pop	{fp, pc}
   231e0:	mov	r1, sp
   231e4:	bl	231fc <flatcc_builder_create_vtable@@Base+0x80>
   231e8:	cmp	r0, #0
   231ec:	bne	231d8 <flatcc_builder_create_vtable@@Base+0x5c>
   231f0:	mov	r0, #0
   231f4:	mov	sp, fp
   231f8:	pop	{fp, pc}
   231fc:	push	{r4, sl, fp, lr}
   23200:	add	fp, sp, #8
   23204:	sub	sp, sp, #8
   23208:	ldr	r4, [r0, #140]	; 0x8c
   2320c:	ldr	r3, [r1]
   23210:	add	r2, r3, r4
   23214:	str	r2, [r0, #140]	; 0x8c
   23218:	cmn	r3, #1
   2321c:	ble	23270 <flatcc_builder_create_vtable@@Base+0xf4>
   23220:	ldr	r2, [r1, #4]
   23224:	ldr	ip, [r0, #36]	; 0x24
   23228:	ldr	lr, [r0, #44]	; 0x2c
   2322c:	str	r3, [sp]
   23230:	add	r1, r1, #8
   23234:	mov	r0, ip
   23238:	mov	r3, r4
   2323c:	blx	lr
   23240:	cmp	r0, #0
   23244:	addeq	r0, r4, #1
   23248:	subeq	sp, fp, #8
   2324c:	popeq	{r4, sl, fp, pc}
   23250:	movw	r0, #27932	; 0x6d1c
   23254:	movt	r0, #3
   23258:	movw	r1, #23414	; 0x5b76
   2325c:	movt	r1, #3
   23260:	movw	r3, #27799	; 0x6c97
   23264:	movt	r3, #3
   23268:	movw	r2, #677	; 0x2a5
   2326c:	bl	14f44 <__assert_fail@plt>
   23270:	movw	r0, #27932	; 0x6d1c
   23274:	movt	r0, #3
   23278:	movw	r1, #23414	; 0x5b76
   2327c:	movt	r1, #3
   23280:	movw	r3, #27799	; 0x6c97
   23284:	movt	r3, #3
   23288:	movw	r2, #673	; 0x2a1
   2328c:	bl	14f44 <__assert_fail@plt>

00023290 <flatcc_builder_create_cached_vtable@@Base>:
   23290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23294:	add	fp, sp, #28
   23298:	sub	sp, sp, #20
   2329c:	mov	r4, r2
   232a0:	mov	r9, r1
   232a4:	mov	sl, r0
   232a8:	mov	r1, r3
   232ac:	bl	23484 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   232b0:	cmp	r0, #0
   232b4:	beq	233d8 <flatcc_builder_create_cached_vtable@@Base+0x148>
   232b8:	mov	r7, r0
   232bc:	ldr	r6, [r0]
   232c0:	mov	r5, #0
   232c4:	cmp	r6, #0
   232c8:	mov	r8, #0
   232cc:	beq	23364 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   232d0:	ldr	r5, [sl, #68]	; 0x44
   232d4:	str	sl, [sp, #16]
   232d8:	ldr	sl, [sl, #100]	; 0x64
   232dc:	mov	r0, #0
   232e0:	str	r7, [sp, #8]
   232e4:	str	r0, [sp, #12]
   232e8:	add	r8, sl, r6
   232ec:	ldr	r0, [r8, #8]
   232f0:	mov	r1, r5
   232f4:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   232f8:	cmp	r0, r4
   232fc:	bne	23314 <flatcc_builder_create_cached_vtable@@Base+0x84>
   23300:	mov	r0, r9
   23304:	mov	r2, r4
   23308:	bl	14e6c <memcmp@plt>
   2330c:	cmp	r0, #0
   23310:	beq	23328 <flatcc_builder_create_cached_vtable@@Base+0x98>
   23314:	ldr	r6, [r8, #12]!
   23318:	cmp	r6, #0
   2331c:	mov	r7, r8
   23320:	bne	232e8 <flatcc_builder_create_cached_vtable@@Base+0x58>
   23324:	b	23354 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   23328:	ldr	r0, [sp, #16]
   2332c:	ldr	r0, [r0, #152]	; 0x98
   23330:	ldr	r1, [r8, #4]
   23334:	cmp	r1, r0
   23338:	beq	23460 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   2333c:	mov	r7, r8
   23340:	ldr	r6, [r7, #12]!
   23344:	cmp	r6, #0
   23348:	mov	r0, r8
   2334c:	bne	232e4 <flatcc_builder_create_cached_vtable@@Base+0x54>
   23350:	b	23358 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   23354:	ldr	r8, [sp, #12]
   23358:	ldr	sl, [sp, #16]
   2335c:	mov	r5, #0
   23360:	ldr	r7, [sp, #8]
   23364:	ldr	r2, [sl, #124]	; 0x7c
   23368:	str	r5, [sp]
   2336c:	mov	r0, sl
   23370:	mov	r1, #6
   23374:	mov	r3, #16
   23378:	bl	21d2c <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   2337c:	cmp	r0, #0
   23380:	beq	2344c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   23384:	mov	r6, r0
   23388:	ldr	r0, [sl, #124]	; 0x7c
   2338c:	ldr	r1, [sl, #152]	; 0x98
   23390:	add	r2, r0, #16
   23394:	str	r2, [sl, #124]	; 0x7c
   23398:	str	r1, [r6, #4]
   2339c:	ldr	r1, [r7]
   233a0:	str	r1, [r6, #12]
   233a4:	str	r0, [r7]
   233a8:	mov	r0, sl
   233ac:	mov	r1, r9
   233b0:	mov	r2, r4
   233b4:	bl	2317c <flatcc_builder_create_vtable@@Base>
   233b8:	str	r0, [r6]
   233bc:	cmp	r0, #0
   233c0:	beq	2344c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   233c4:	cmp	r8, #0
   233c8:	beq	233e0 <flatcc_builder_create_cached_vtable@@Base+0x150>
   233cc:	ldr	r0, [r8, #8]
   233d0:	str	r0, [r6, #8]
   233d4:	b	23448 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   233d8:	mov	r5, #0
   233dc:	b	2344c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   233e0:	ldr	r0, [sl, #172]	; 0xac
   233e4:	cmp	r0, #0
   233e8:	beq	23408 <flatcc_builder_create_cached_vtable@@Base+0x178>
   233ec:	ldr	r1, [sl, #120]	; 0x78
   233f0:	add	r1, r1, r4
   233f4:	cmp	r0, r1
   233f8:	bcs	23408 <flatcc_builder_create_cached_vtable@@Base+0x178>
   233fc:	mov	r0, sl
   23400:	bl	21a24 <flatcc_builder_flush_vtable_cache@@Base>
   23404:	b	23448 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   23408:	ldr	r2, [sl, #120]	; 0x78
   2340c:	mov	r0, #0
   23410:	str	r0, [sp]
   23414:	mov	r0, sl
   23418:	mov	r1, #2
   2341c:	mov	r3, r4
   23420:	bl	21d2c <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   23424:	cmp	r0, #0
   23428:	beq	23458 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   2342c:	ldr	r1, [sl, #120]	; 0x78
   23430:	str	r1, [r6, #8]
   23434:	add	r1, r1, r4
   23438:	str	r1, [sl, #120]	; 0x78
   2343c:	mov	r1, r9
   23440:	mov	r2, r4
   23444:	bl	14e60 <memcpy@plt>
   23448:	ldr	r5, [r6]
   2344c:	mov	r0, r5
   23450:	sub	sp, fp, #28
   23454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23458:	mvn	r5, #0
   2345c:	b	2344c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   23460:	ldr	r1, [sp, #8]
   23464:	cmp	r7, r1
   23468:	ldrne	r0, [r8, #12]
   2346c:	strne	r0, [r7]
   23470:	ldrne	r0, [r1]
   23474:	strne	r0, [r8, #12]
   23478:	strne	r6, [r1]
   2347c:	ldr	r5, [r8]
   23480:	b	2344c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   23484:	push	{r4, r5, fp, lr}
   23488:	add	fp, sp, #8
   2348c:	mov	r4, r1
   23490:	mov	r5, r0
   23494:	ldr	r0, [r0, #116]	; 0x74
   23498:	cmp	r0, #0
   2349c:	bne	234b8 <flatcc_builder_create_cached_vtable@@Base+0x228>
   234a0:	mov	r0, r5
   234a4:	bl	24be4 <flatcc_builder_get_emit_context@@Base+0x80>
   234a8:	mov	r1, r0
   234ac:	mov	r0, #0
   234b0:	cmp	r1, #0
   234b4:	popne	{r4, r5, fp, pc}
   234b8:	ldr	r0, [r5, #92]	; 0x5c
   234bc:	ldr	r1, [r5, #116]	; 0x74
   234c0:	rsb	r1, r1, #32
   234c4:	lsr	r1, r4, r1
   234c8:	add	r0, r0, r1, lsl #2
   234cc:	pop	{r4, r5, fp, pc}

000234d0 <flatcc_builder_create_table@@Base>:
   234d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234d4:	add	fp, sp, #28
   234d8:	sub	sp, sp, #84	; 0x54
   234dc:	strh	r3, [fp, #-30]	; 0xffffffe2
   234e0:	ldr	r4, [fp, #12]
   234e4:	cmn	r4, #1
   234e8:	ble	23618 <flatcc_builder_create_table@@Base+0x148>
   234ec:	ldr	r8, [fp, #16]
   234f0:	tst	r8, #1
   234f4:	beq	23638 <flatcc_builder_create_table@@Base+0x168>
   234f8:	mov	sl, r2
   234fc:	mov	r6, r1
   23500:	mov	r5, r0
   23504:	sub	r0, fp, #30
   23508:	mov	r1, #4
   2350c:	bl	22e70 <flatcc_builder_start_vector@@Base+0x80>
   23510:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   23514:	mov	r0, r5
   23518:	mov	r1, r7
   2351c:	bl	22300 <flatcc_builder_create_buffer@@Base+0x1d0>
   23520:	mov	r0, r5
   23524:	mov	r1, sl
   23528:	mov	r2, r7
   2352c:	bl	22084 <flatcc_builder_embed_buffer@@Base+0x1c8>
   23530:	mov	r9, r0
   23534:	mvn	r0, #3
   23538:	sub	r0, r0, sl
   2353c:	sub	r0, r0, r9
   23540:	str	r5, [sp]
   23544:	ldr	r1, [r5, #136]	; 0x88
   23548:	add	r5, r0, r1
   2354c:	rsb	r0, r8, #1
   23550:	add	r0, r0, r5
   23554:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23558:	str	r0, [fp, #-36]	; 0xffffffdc
   2355c:	cmp	r4, #1
   23560:	blt	23590 <flatcc_builder_create_table@@Base+0xc0>
   23564:	mvn	r0, #3
   23568:	ldr	r7, [fp, #8]
   2356c:	sub	r5, r0, r5
   23570:	ldrh	r8, [r7], #2
   23574:	ldr	r0, [r8, r6]
   23578:	add	r0, r5, r0
   2357c:	sub	r0, r0, r8
   23580:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23584:	str	r0, [r8, r6]
   23588:	subs	r4, r4, #1
   2358c:	bne	23570 <flatcc_builder_create_table@@Base+0xa0>
   23590:	sub	r0, fp, #36	; 0x24
   23594:	str	r0, [sp, #12]
   23598:	mov	r0, #4
   2359c:	str	r0, [sp, #4]
   235a0:	str	r0, [sp, #16]
   235a4:	mov	r0, #1
   235a8:	str	r0, [sp, #8]
   235ac:	cmp	sl, #0
   235b0:	beq	235cc <flatcc_builder_create_table@@Base+0xfc>
   235b4:	str	r6, [sp, #20]
   235b8:	str	sl, [sp, #24]
   235bc:	mov	r0, #2
   235c0:	str	r0, [sp, #8]
   235c4:	add	r0, sl, #4
   235c8:	str	r0, [sp, #4]
   235cc:	cmp	r9, #0
   235d0:	ldr	r0, [sp]
   235d4:	beq	23608 <flatcc_builder_create_table@@Base+0x138>
   235d8:	ldr	r2, [sp, #4]
   235dc:	ldr	r1, [sp, #8]
   235e0:	add	r2, r2, r9
   235e4:	str	r2, [sp, #4]
   235e8:	add	r2, sp, #4
   235ec:	add	r3, r2, r1, lsl #3
   235f0:	movw	r2, #22884	; 0x5964
   235f4:	movt	r2, #3
   235f8:	str	r2, [r3, #8]
   235fc:	str	r9, [r3, #12]
   23600:	add	r1, r1, #1
   23604:	str	r1, [sp, #8]
   23608:	add	r1, sp, #4
   2360c:	bl	2209c <flatcc_builder_embed_buffer@@Base+0x1e0>
   23610:	sub	sp, fp, #28
   23614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23618:	movw	r0, #25298	; 0x62d2
   2361c:	movt	r0, #3
   23620:	movw	r1, #23414	; 0x5b76
   23624:	movt	r1, #3
   23628:	movw	r3, #25316	; 0x62e4
   2362c:	movt	r3, #3
   23630:	movw	r2, #1237	; 0x4d5
   23634:	bl	14f44 <__assert_fail@plt>
   23638:	movw	r0, #25472	; 0x6380
   2363c:	movt	r0, #3
   23640:	movw	r1, #23414	; 0x5b76
   23644:	movt	r1, #3
   23648:	movw	r3, #25316	; 0x62e4
   2364c:	movt	r3, #3
   23650:	movw	r2, #1243	; 0x4db
   23654:	bl	14f44 <__assert_fail@plt>

00023658 <flatcc_builder_check_required_field@@Base>:
   23658:	ldr	r2, [r0, #32]
   2365c:	ldrh	r2, [r2, #14]
   23660:	cmp	r2, #3
   23664:	bne	23694 <flatcc_builder_check_required_field@@Base+0x3c>
   23668:	ldrh	r3, [r0, #8]
   2366c:	mov	r2, #0
   23670:	cmp	r3, r1
   23674:	bls	2368c <flatcc_builder_check_required_field@@Base+0x34>
   23678:	ldr	r0, [r0, #4]
   2367c:	add	r0, r0, r1, lsl #1
   23680:	ldrh	r2, [r0]
   23684:	cmp	r2, #0
   23688:	movwne	r2, #1
   2368c:	mov	r0, r2
   23690:	bx	lr
   23694:	push	{fp, lr}
   23698:	mov	fp, sp
   2369c:	movw	r0, #25483	; 0x638b
   236a0:	movt	r0, #3
   236a4:	movw	r1, #23414	; 0x5b76
   236a8:	movt	r1, #3
   236ac:	movw	r3, #25526	; 0x63b6
   236b0:	movt	r3, #3
   236b4:	movw	r2, #1272	; 0x4f8
   236b8:	bl	14f44 <__assert_fail@plt>

000236bc <flatcc_builder_check_union_field@@Base>:
   236bc:	mov	r2, r0
   236c0:	ldr	r0, [r0, #32]
   236c4:	ldrh	r0, [r0, #14]
   236c8:	cmp	r0, #3
   236cc:	bne	2372c <flatcc_builder_check_union_field@@Base+0x70>
   236d0:	mov	r0, #0
   236d4:	cmp	r1, #0
   236d8:	ldrhne	r3, [r2, #8]
   236dc:	cmpne	r3, r1
   236e0:	bhi	236e8 <flatcc_builder_check_union_field@@Base+0x2c>
   236e4:	bx	lr
   236e8:	ldr	r0, [r2, #4]
   236ec:	add	r0, r0, r1, lsl #1
   236f0:	ldrh	r1, [r0, #-2]
   236f4:	cmp	r1, #0
   236f8:	beq	2371c <flatcc_builder_check_union_field@@Base+0x60>
   236fc:	ldr	r2, [r2, #16]
   23700:	ldrb	r1, [r2, r1]
   23704:	ldrh	r0, [r0]
   23708:	cmp	r1, #0
   2370c:	beq	23720 <flatcc_builder_check_union_field@@Base+0x64>
   23710:	cmp	r0, #0
   23714:	movwne	r0, #1
   23718:	bx	lr
   2371c:	ldrh	r0, [r0]
   23720:	clz	r0, r0
   23724:	lsr	r0, r0, #5
   23728:	bx	lr
   2372c:	push	{fp, lr}
   23730:	mov	fp, sp
   23734:	movw	r0, #25483	; 0x638b
   23738:	movt	r0, #3
   2373c:	movw	r1, #23414	; 0x5b76
   23740:	movt	r1, #3
   23744:	movw	r3, #25609	; 0x6409
   23748:	movt	r3, #3
   2374c:	movw	r2, #1279	; 0x4ff
   23750:	bl	14f44 <__assert_fail@plt>

00023754 <flatcc_builder_check_required@@Base>:
   23754:	push	{fp, lr}
   23758:	mov	fp, sp
   2375c:	mov	r3, r0
   23760:	ldr	r0, [r0, #32]
   23764:	ldrh	r0, [r0, #14]
   23768:	cmp	r0, #3
   2376c:	bne	237c4 <flatcc_builder_check_required@@Base+0x70>
   23770:	ldrh	ip, [r3, #8]
   23774:	mov	r0, #0
   23778:	cmp	ip, r2
   2377c:	movge	r0, #1
   23780:	cmpge	r2, #1
   23784:	bge	2378c <flatcc_builder_check_required@@Base+0x38>
   23788:	pop	{fp, pc}
   2378c:	ldr	ip, [r3, #4]
   23790:	mov	lr, #0
   23794:	b	237a8 <flatcc_builder_check_required@@Base+0x54>
   23798:	add	lr, lr, #1
   2379c:	add	r1, r1, #2
   237a0:	cmp	lr, r2
   237a4:	popge	{fp, pc}
   237a8:	ldrh	r3, [r1]
   237ac:	add	r3, ip, r3, lsl #1
   237b0:	ldrh	r3, [r3]
   237b4:	cmp	r3, #0
   237b8:	bne	23798 <flatcc_builder_check_required@@Base+0x44>
   237bc:	mov	r0, #0
   237c0:	pop	{fp, pc}
   237c4:	movw	r0, #25483	; 0x638b
   237c8:	movt	r0, #3
   237cc:	movw	r1, #23414	; 0x5b76
   237d0:	movt	r1, #3
   237d4:	movw	r3, #25689	; 0x6459
   237d8:	movt	r3, #3
   237dc:	movw	r2, #1297	; 0x511
   237e0:	bl	14f44 <__assert_fail@plt>

000237e4 <flatcc_builder_end_table@@Base>:
   237e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   237e8:	add	fp, sp, #24
   237ec:	sub	sp, sp, #16
   237f0:	mov	r4, r0
   237f4:	ldr	r0, [r0, #32]
   237f8:	ldrh	r0, [r0, #14]
   237fc:	cmp	r0, #3
   23800:	bne	23910 <flatcc_builder_end_table@@Base+0x12c>
   23804:	ldrh	r0, [r4, #8]
   23808:	mov	r1, #4
   2380c:	add	r0, r1, r0, lsl #1
   23810:	ldr	r6, [r4, #4]
   23814:	strh	r0, [r6, #-4]!
   23818:	ldrh	r1, [r4, #20]
   2381c:	add	r1, r1, #4
   23820:	strh	r1, [r6, #2]
   23824:	uxth	r5, r0
   23828:	ldr	r0, [r4, #12]
   2382c:	eor	r0, r0, r5
   23830:	movw	r2, #31153	; 0x79b1
   23834:	movt	r2, #40503	; 0x9e37
   23838:	mul	r0, r0, r2
   2383c:	uxth	r1, r1
   23840:	eor	r0, r0, r1
   23844:	mul	r3, r0, r2
   23848:	str	r3, [r4, #12]
   2384c:	mov	r0, r4
   23850:	mov	r1, r6
   23854:	mov	r2, r5
   23858:	bl	23290 <flatcc_builder_create_cached_vtable@@Base>
   2385c:	cmp	r0, #0
   23860:	beq	23900 <flatcc_builder_end_table@@Base+0x11c>
   23864:	mov	r7, r0
   23868:	mov	r8, #0
   2386c:	mov	r0, r6
   23870:	mov	r1, #0
   23874:	mov	r2, r5
   23878:	bl	14ef0 <memset@plt>
   2387c:	ldrh	r3, [r4, #130]	; 0x82
   23880:	ldr	r0, [r4, #76]	; 0x4c
   23884:	ldr	r6, [r4]
   23888:	ldr	r1, [r4, #16]
   2388c:	ldr	r2, [r4, #20]
   23890:	ldr	r5, [r4, #32]
   23894:	ldr	r5, [r5, #20]
   23898:	add	r0, r0, r5
   2389c:	sub	r6, r6, r0
   238a0:	asr	r6, r6, #1
   238a4:	stm	sp, {r0, r6, r7}
   238a8:	mov	r0, r4
   238ac:	bl	234d0 <flatcc_builder_create_table@@Base>
   238b0:	cmp	r0, #0
   238b4:	beq	23904 <flatcc_builder_end_table@@Base+0x120>
   238b8:	mov	r5, r0
   238bc:	ldr	r0, [r4, #32]
   238c0:	ldr	r1, [r4, #52]	; 0x34
   238c4:	ldr	r2, [r4, #76]	; 0x4c
   238c8:	ldr	r3, [r0, #24]
   238cc:	str	r3, [r4, #12]
   238d0:	ldrh	r3, [r0, #28]
   238d4:	strh	r3, [r4, #8]
   238d8:	ldr	r3, [r0, #16]
   238dc:	add	r1, r1, r3
   238e0:	str	r1, [r4, #4]
   238e4:	ldr	r0, [r0, #20]
   238e8:	add	r0, r2, r0
   238ec:	str	r0, [r4]
   238f0:	mov	r0, r4
   238f4:	bl	22658 <flatcc_builder_end_buffer@@Base+0xc8>
   238f8:	mov	r8, r5
   238fc:	b	23904 <flatcc_builder_end_table@@Base+0x120>
   23900:	mov	r8, #0
   23904:	mov	r0, r8
   23908:	sub	sp, fp, #24
   2390c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23910:	movw	r0, #25483	; 0x638b
   23914:	movt	r0, #3
   23918:	movw	r1, #23414	; 0x5b76
   2391c:	movt	r1, #3
   23920:	movw	r3, #25779	; 0x64b3
   23924:	movt	r3, #3
   23928:	movw	r2, #1317	; 0x525
   2392c:	bl	14f44 <__assert_fail@plt>

00023930 <flatcc_builder_create_vector@@Base>:
   23930:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23934:	add	fp, sp, #24
   23938:	sub	sp, sp, #80	; 0x50
   2393c:	mov	r4, r0
   23940:	ldr	r0, [fp, #8]
   23944:	strh	r0, [fp, #-26]	; 0xffffffe6
   23948:	ldr	r0, [fp, #12]
   2394c:	cmp	r2, r0
   23950:	bhi	23a20 <flatcc_builder_create_vector@@Base+0xf0>
   23954:	mov	r6, r3
   23958:	mov	r7, r2
   2395c:	mov	r8, r1
   23960:	sub	r0, fp, #26
   23964:	mov	r9, #4
   23968:	mov	r1, #4
   2396c:	bl	22e70 <flatcc_builder_start_vector@@Base+0x80>
   23970:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   23974:	mov	r0, r4
   23978:	mov	r1, r5
   2397c:	bl	22300 <flatcc_builder_create_buffer@@Base+0x1d0>
   23980:	mov	r0, r7
   23984:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23988:	str	r7, [fp, #-32]	; 0xffffffe0
   2398c:	mul	r6, r6, r7
   23990:	mov	r0, r4
   23994:	mov	r1, r6
   23998:	mov	r2, r5
   2399c:	bl	22084 <flatcc_builder_embed_buffer@@Base+0x1c8>
   239a0:	str	r9, [sp]
   239a4:	sub	r1, fp, #32
   239a8:	str	r1, [sp, #8]
   239ac:	str	r9, [sp, #12]
   239b0:	mov	r1, #1
   239b4:	str	r1, [sp, #4]
   239b8:	cmp	r6, #0
   239bc:	beq	239d8 <flatcc_builder_create_vector@@Base+0xa8>
   239c0:	str	r8, [sp, #16]
   239c4:	str	r6, [sp, #20]
   239c8:	mov	r1, #2
   239cc:	str	r1, [sp, #4]
   239d0:	add	r1, r6, #4
   239d4:	str	r1, [sp]
   239d8:	cmp	r0, #0
   239dc:	beq	23a0c <flatcc_builder_create_vector@@Base+0xdc>
   239e0:	ldm	sp, {r1, r2}
   239e4:	add	r1, r1, r0
   239e8:	str	r1, [sp]
   239ec:	mov	r1, sp
   239f0:	add	r1, r1, r2, lsl #3
   239f4:	movw	r3, #22884	; 0x5964
   239f8:	movt	r3, #3
   239fc:	str	r3, [r1, #8]
   23a00:	str	r0, [r1, #12]
   23a04:	add	r0, r2, #1
   23a08:	str	r0, [sp, #4]
   23a0c:	mov	r1, sp
   23a10:	mov	r0, r4
   23a14:	bl	2209c <flatcc_builder_embed_buffer@@Base+0x1e0>
   23a18:	sub	sp, fp, #24
   23a1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23a20:	movw	r0, #25845	; 0x64f5
   23a24:	movt	r0, #3
   23a28:	movw	r1, #23414	; 0x5b76
   23a2c:	movt	r1, #3
   23a30:	movw	r3, #25864	; 0x6508
   23a34:	movt	r3, #3
   23a38:	movw	r2, #1365	; 0x555
   23a3c:	bl	14f44 <__assert_fail@plt>

00023a40 <flatcc_builder_end_vector@@Base>:
   23a40:	push	{r4, r5, fp, lr}
   23a44:	add	fp, sp, #8
   23a48:	sub	sp, sp, #8
   23a4c:	mov	r4, r0
   23a50:	ldr	r0, [r0, #32]
   23a54:	ldrh	r1, [r0, #14]
   23a58:	cmp	r1, #4
   23a5c:	bne	23aa0 <flatcc_builder_end_vector@@Base+0x60>
   23a60:	ldr	r1, [r4, #16]
   23a64:	ldrh	r5, [r4, #130]	; 0x82
   23a68:	ldr	r3, [r0, #16]
   23a6c:	ldr	r2, [r0, #20]
   23a70:	ldr	r0, [r0, #24]
   23a74:	str	r5, [sp]
   23a78:	str	r0, [sp, #4]
   23a7c:	mov	r0, r4
   23a80:	bl	23930 <flatcc_builder_create_vector@@Base>
   23a84:	mov	r5, r0
   23a88:	cmp	r0, #0
   23a8c:	movne	r0, r4
   23a90:	blne	22658 <flatcc_builder_end_buffer@@Base+0xc8>
   23a94:	mov	r0, r5
   23a98:	sub	sp, fp, #8
   23a9c:	pop	{r4, r5, fp, pc}
   23aa0:	movw	r0, #24217	; 0x5e99
   23aa4:	movt	r0, #3
   23aa8:	movw	r1, #23414	; 0x5b76
   23aac:	movt	r1, #3
   23ab0:	movw	r3, #25982	; 0x657e
   23ab4:	movt	r3, #3
   23ab8:	movw	r2, #1400	; 0x578
   23abc:	bl	14f44 <__assert_fail@plt>

00023ac0 <flatcc_builder_vector_count@@Base>:
   23ac0:	ldr	r0, [r0, #32]
   23ac4:	ldr	r0, [r0, #20]
   23ac8:	bx	lr

00023acc <flatcc_builder_vector_edit@@Base>:
   23acc:	ldr	r0, [r0, #16]
   23ad0:	bx	lr

00023ad4 <flatcc_builder_create_offset_vector_direct@@Base>:
   23ad4:	mov	r3, #0
   23ad8:	b	23adc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   23adc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23ae0:	add	fp, sp, #24
   23ae4:	sub	sp, sp, #80	; 0x50
   23ae8:	mov	r8, r0
   23aec:	mov	r0, #0
   23af0:	cmn	r2, #-1073741823	; 0xc0000001
   23af4:	bhi	23c24 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   23af8:	mov	r5, r3
   23afc:	mov	r9, r2
   23b00:	mov	r7, r1
   23b04:	mov	r6, #4
   23b08:	mov	r0, r8
   23b0c:	mov	r1, #4
   23b10:	bl	22300 <flatcc_builder_create_buffer@@Base+0x1d0>
   23b14:	mov	r0, r9
   23b18:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23b1c:	str	r9, [fp, #-28]	; 0xffffffe4
   23b20:	lsl	r4, r9, #2
   23b24:	mov	r0, r8
   23b28:	mov	r1, r4
   23b2c:	mov	r2, #4
   23b30:	bl	22084 <flatcc_builder_embed_buffer@@Base+0x1c8>
   23b34:	str	r6, [sp, #4]
   23b38:	sub	r1, fp, #28
   23b3c:	str	r1, [sp, #12]
   23b40:	str	r6, [sp, #16]
   23b44:	mov	r1, #1
   23b48:	str	r1, [sp, #8]
   23b4c:	mov	r1, #0
   23b50:	cmp	r1, r9, lsl #2
   23b54:	beq	23b70 <flatcc_builder_create_offset_vector_direct@@Base+0x9c>
   23b58:	str	r7, [sp, #20]
   23b5c:	str	r4, [sp, #24]
   23b60:	mov	r1, #2
   23b64:	str	r1, [sp, #8]
   23b68:	add	r1, r4, #4
   23b6c:	str	r1, [sp, #4]
   23b70:	cmp	r0, #0
   23b74:	beq	23ba4 <flatcc_builder_create_offset_vector_direct@@Base+0xd0>
   23b78:	ldmib	sp, {r1, r2}
   23b7c:	add	r1, r1, r0
   23b80:	str	r1, [sp, #4]
   23b84:	add	r1, sp, #4
   23b88:	add	r1, r1, r2, lsl #3
   23b8c:	movw	r3, #22884	; 0x5964
   23b90:	movt	r3, #3
   23b94:	str	r3, [r1, #8]
   23b98:	str	r0, [r1, #12]
   23b9c:	add	r0, r2, #1
   23ba0:	str	r0, [sp, #8]
   23ba4:	cmp	r9, #0
   23ba8:	beq	23c18 <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   23bac:	ldr	r0, [r8, #136]	; 0x88
   23bb0:	mvn	r1, #3
   23bb4:	sub	r0, r1, r0
   23bb8:	ldr	r1, [sp, #4]
   23bbc:	add	r4, r0, r1
   23bc0:	mov	r6, #0
   23bc4:	ldr	r0, [r7, r6, lsl #2]
   23bc8:	cmp	r0, #0
   23bcc:	beq	23bf4 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   23bd0:	add	r0, r4, r0
   23bd4:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23bd8:	str	r0, [r7, r6, lsl #2]
   23bdc:	cmp	r5, #0
   23be0:	beq	23c08 <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   23be4:	ldrb	r0, [r5, r6]
   23be8:	cmp	r0, #0
   23bec:	bne	23c08 <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   23bf0:	b	23c2c <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   23bf4:	cmp	r5, #0
   23bf8:	beq	23c4c <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   23bfc:	ldrb	r0, [r5, r6]
   23c00:	cmp	r0, #0
   23c04:	bne	23c6c <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   23c08:	sub	r4, r4, #4
   23c0c:	add	r6, r6, #1
   23c10:	cmp	r6, r9
   23c14:	bcc	23bc4 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   23c18:	add	r1, sp, #4
   23c1c:	mov	r0, r8
   23c20:	bl	2209c <flatcc_builder_embed_buffer@@Base+0x1e0>
   23c24:	sub	sp, fp, #24
   23c28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23c2c:	movw	r0, #27920	; 0x6d10
   23c30:	movt	r0, #3
   23c34:	movw	r1, #23414	; 0x5b76
   23c38:	movt	r1, #3
   23c3c:	movw	r3, #27934	; 0x6d1e
   23c40:	movt	r3, #3
   23c44:	movw	r2, #1457	; 0x5b1
   23c48:	bl	14f44 <__assert_fail@plt>
   23c4c:	movw	r0, #27932	; 0x6d1c
   23c50:	movt	r0, #3
   23c54:	movw	r1, #23414	; 0x5b76
   23c58:	movt	r1, #3
   23c5c:	movw	r3, #27934	; 0x6d1e
   23c60:	movt	r3, #3
   23c64:	movw	r2, #1463	; 0x5b7
   23c68:	bl	14f44 <__assert_fail@plt>
   23c6c:	movw	r0, #28065	; 0x6da1
   23c70:	movt	r0, #3
   23c74:	movw	r1, #23414	; 0x5b76
   23c78:	movt	r1, #3
   23c7c:	movw	r3, #27934	; 0x6d1e
   23c80:	movt	r3, #3
   23c84:	movw	r2, #1461	; 0x5b5
   23c88:	bl	14f44 <__assert_fail@plt>

00023c8c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   23c8c:	push	{r4, r5, fp, lr}
   23c90:	add	fp, sp, #8
   23c94:	mov	r3, r1
   23c98:	mov	r4, r0
   23c9c:	ldr	r0, [r0, #32]
   23ca0:	ldrh	r1, [r0, #14]
   23ca4:	cmp	r1, #5
   23ca8:	bne	23cd4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   23cac:	ldr	r2, [r0, #20]
   23cb0:	ldr	r1, [r4, #16]
   23cb4:	mov	r0, r4
   23cb8:	bl	23adc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   23cbc:	mov	r5, r0
   23cc0:	cmp	r0, #0
   23cc4:	movne	r0, r4
   23cc8:	blne	22658 <flatcc_builder_end_buffer@@Base+0xc8>
   23ccc:	mov	r0, r5
   23cd0:	pop	{r4, r5, fp, pc}
   23cd4:	movw	r0, #24466	; 0x5f92
   23cd8:	movt	r0, #3
   23cdc:	movw	r1, #23414	; 0x5b76
   23ce0:	movt	r1, #3
   23ce4:	movw	r3, #26123	; 0x660b
   23ce8:	movt	r3, #3
   23cec:	movw	r2, #1493	; 0x5d5
   23cf0:	bl	14f44 <__assert_fail@plt>

00023cf4 <flatcc_builder_offset_vector_edit@@Base>:
   23cf4:	ldr	r0, [r0, #16]
   23cf8:	bx	lr

00023cfc <flatcc_builder_offset_vector_count@@Base>:
   23cfc:	ldr	r0, [r0, #32]
   23d00:	ldr	r0, [r0, #20]
   23d04:	bx	lr

00023d08 <flatcc_builder_table_add_union@@Base>:
   23d08:	push	{r4, r5, r6, r7, fp, lr}
   23d0c:	add	fp, sp, #16
   23d10:	mov	r5, r0
   23d14:	ldr	r0, [r0, #32]
   23d18:	ldrh	r0, [r0, #14]
   23d1c:	cmp	r0, #3
   23d20:	bne	23d94 <flatcc_builder_table_add_union@@Base+0x8c>
   23d24:	mov	r7, r3
   23d28:	mov	r6, r1
   23d2c:	uxtb	r4, r2
   23d30:	cmp	r3, #0
   23d34:	beq	23d40 <flatcc_builder_table_add_union@@Base+0x38>
   23d38:	cmp	r4, #0
   23d3c:	beq	23db4 <flatcc_builder_table_add_union@@Base+0xac>
   23d40:	cmp	r7, #0
   23d44:	beq	23d60 <flatcc_builder_table_add_union@@Base+0x58>
   23d48:	mov	r0, r5
   23d4c:	mov	r1, r6
   23d50:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   23d54:	cmp	r0, #0
   23d58:	beq	23df4 <flatcc_builder_table_add_union@@Base+0xec>
   23d5c:	str	r7, [r0]
   23d60:	sub	r1, r6, #1
   23d64:	mov	r0, r5
   23d68:	mov	r2, #1
   23d6c:	mov	r3, #1
   23d70:	bl	23ed8 <flatcc_builder_table_add@@Base>
   23d74:	cmp	r0, #0
   23d78:	beq	23dd4 <flatcc_builder_table_add_union@@Base+0xcc>
   23d7c:	mov	r5, r0
   23d80:	mov	r0, r4
   23d84:	bl	23fb8 <flatcc_builder_table_add@@Base+0xe0>
   23d88:	strb	r4, [r5]
   23d8c:	mov	r0, #0
   23d90:	pop	{r4, r5, r6, r7, fp, pc}
   23d94:	movw	r0, #25483	; 0x638b
   23d98:	movt	r0, #3
   23d9c:	movw	r1, #23414	; 0x5b76
   23da0:	movt	r1, #3
   23da4:	movw	r3, #26237	; 0x667d
   23da8:	movt	r3, #3
   23dac:	movw	r2, #1518	; 0x5ee
   23db0:	bl	14f44 <__assert_fail@plt>
   23db4:	movw	r0, #26325	; 0x66d5
   23db8:	movt	r0, #3
   23dbc:	movw	r1, #23414	; 0x5b76
   23dc0:	movt	r1, #3
   23dc4:	movw	r3, #26237	; 0x667d
   23dc8:	movt	r3, #3
   23dcc:	movw	r2, #1519	; 0x5ef
   23dd0:	bl	14f44 <__assert_fail@plt>
   23dd4:	movw	r0, #26369	; 0x6701
   23dd8:	movt	r0, #3
   23ddc:	movw	r1, #23414	; 0x5b76
   23de0:	movt	r1, #3
   23de4:	movw	r3, #26237	; 0x667d
   23de8:	movt	r3, #3
   23dec:	movw	r2, #1526	; 0x5f6
   23df0:	bl	14f44 <__assert_fail@plt>
   23df4:	movw	r0, #26359	; 0x66f7
   23df8:	movt	r0, #3
   23dfc:	movw	r1, #23414	; 0x5b76
   23e00:	movt	r1, #3
   23e04:	movw	r3, #26237	; 0x667d
   23e08:	movt	r3, #3
   23e0c:	movw	r2, #1522	; 0x5f2
   23e10:	bl	14f44 <__assert_fail@plt>

00023e14 <flatcc_builder_table_add_offset@@Base>:
   23e14:	push	{fp, lr}
   23e18:	mov	fp, sp
   23e1c:	ldr	r2, [r0, #32]
   23e20:	ldrh	r2, [r2, #14]
   23e24:	cmp	r2, #3
   23e28:	bne	23e78 <flatcc_builder_table_add_offset@@Base+0x64>
   23e2c:	movw	r2, #32765	; 0x7ffd
   23e30:	cmp	r1, r2
   23e34:	bcs	23e98 <flatcc_builder_table_add_offset@@Base+0x84>
   23e38:	ldr	r2, [r0, #4]
   23e3c:	add	r2, r2, r1, lsl #1
   23e40:	ldrh	r2, [r2]
   23e44:	cmp	r2, #0
   23e48:	bne	23eb8 <flatcc_builder_table_add_offset@@Base+0xa4>
   23e4c:	ldr	r2, [r0, #12]
   23e50:	eor	r2, r2, r1
   23e54:	movw	r3, #31153	; 0x79b1
   23e58:	movt	r3, #40503	; 0x9e37
   23e5c:	mul	r2, r2, r3
   23e60:	eor	r2, r2, #4
   23e64:	mul	r2, r2, r3
   23e68:	str	r2, [r0, #12]
   23e6c:	uxth	r1, r1
   23e70:	pop	{fp, lr}
   23e74:	b	247e4 <flatcc_builder_table_add_copy@@Base+0x40>
   23e78:	movw	r0, #25483	; 0x638b
   23e7c:	movt	r0, #3
   23e80:	movw	r1, #23414	; 0x5b76
   23e84:	movt	r1, #3
   23e88:	movw	r3, #27263	; 0x6a7f
   23e8c:	movt	r3, #3
   23e90:	movw	r2, #1811	; 0x713
   23e94:	bl	14f44 <__assert_fail@plt>
   23e98:	movw	r0, #27135	; 0x69ff
   23e9c:	movt	r0, #3
   23ea0:	movw	r1, #23414	; 0x5b76
   23ea4:	movt	r1, #3
   23ea8:	movw	r3, #27263	; 0x6a7f
   23eac:	movt	r3, #3
   23eb0:	movw	r2, #1812	; 0x714
   23eb4:	bl	14f44 <__assert_fail@plt>
   23eb8:	movw	r0, #27932	; 0x6d1c
   23ebc:	movt	r0, #3
   23ec0:	movw	r1, #23414	; 0x5b76
   23ec4:	movt	r1, #3
   23ec8:	movw	r3, #27263	; 0x6a7f
   23ecc:	movt	r3, #3
   23ed0:	movw	r2, #1819	; 0x71b
   23ed4:	bl	14f44 <__assert_fail@plt>

00023ed8 <flatcc_builder_table_add@@Base>:
   23ed8:	push	{fp, lr}
   23edc:	mov	fp, sp
   23ee0:	mov	ip, r3
   23ee4:	ldr	r3, [r0, #32]
   23ee8:	ldrh	r3, [r3, #14]
   23eec:	cmp	r3, #3
   23ef0:	bne	23f58 <flatcc_builder_table_add@@Base+0x80>
   23ef4:	movw	r3, #32765	; 0x7ffd
   23ef8:	cmp	r1, r3
   23efc:	bcs	23f78 <flatcc_builder_table_add@@Base+0xa0>
   23f00:	mov	lr, r2
   23f04:	ldrh	r3, [r0, #130]	; 0x82
   23f08:	cmp	r3, ip
   23f0c:	strhcc	ip, [r0, #130]	; 0x82
   23f10:	ldr	r3, [r0, #4]
   23f14:	add	r3, r3, r1, lsl #1
   23f18:	ldrh	r3, [r3]
   23f1c:	cmp	r3, #0
   23f20:	bne	23f98 <flatcc_builder_table_add@@Base+0xc0>
   23f24:	ldr	r3, [r0, #12]
   23f28:	eor	r3, r3, r1
   23f2c:	movw	r2, #31153	; 0x79b1
   23f30:	movt	r2, #40503	; 0x9e37
   23f34:	mul	r3, r3, r2
   23f38:	eor	r3, r3, lr
   23f3c:	mul	r2, r3, r2
   23f40:	str	r2, [r0, #12]
   23f44:	uxth	r3, r1
   23f48:	mov	r1, lr
   23f4c:	mov	r2, ip
   23f50:	pop	{fp, lr}
   23f54:	b	246d8 <flatcc_builder_string_len@@Base+0xc>
   23f58:	movw	r0, #25483	; 0x638b
   23f5c:	movt	r0, #3
   23f60:	movw	r1, #23414	; 0x5b76
   23f64:	movt	r1, #3
   23f68:	movw	r3, #27061	; 0x69b5
   23f6c:	movt	r3, #3
   23f70:	movw	r2, #1773	; 0x6ed
   23f74:	bl	14f44 <__assert_fail@plt>
   23f78:	movw	r0, #27135	; 0x69ff
   23f7c:	movt	r0, #3
   23f80:	movw	r1, #23414	; 0x5b76
   23f84:	movt	r1, #3
   23f88:	movw	r3, #27061	; 0x69b5
   23f8c:	movt	r3, #3
   23f90:	movw	r2, #1774	; 0x6ee
   23f94:	bl	14f44 <__assert_fail@plt>
   23f98:	movw	r0, #27932	; 0x6d1c
   23f9c:	movt	r0, #3
   23fa0:	movw	r1, #23414	; 0x5b76
   23fa4:	movt	r1, #3
   23fa8:	movw	r3, #27061	; 0x69b5
   23fac:	movt	r3, #3
   23fb0:	movw	r2, #1784	; 0x6f8
   23fb4:	bl	14f44 <__assert_fail@plt>
   23fb8:	bx	lr

00023fbc <flatcc_builder_table_add_union_vector@@Base>:
   23fbc:	push	{r4, r5, r6, r7, fp, lr}
   23fc0:	add	fp, sp, #16
   23fc4:	mov	r6, r0
   23fc8:	ldr	r0, [r0, #32]
   23fcc:	ldrh	r0, [r0, #14]
   23fd0:	cmp	r0, #3
   23fd4:	bne	2403c <flatcc_builder_table_add_union_vector@@Base+0x80>
   23fd8:	mov	r4, r3
   23fdc:	mov	r7, r2
   23fe0:	mov	r5, r1
   23fe4:	clz	r0, r3
   23fe8:	lsr	r0, r0, #5
   23fec:	clz	r1, r2
   23ff0:	lsr	r1, r1, #5
   23ff4:	cmp	r1, r0
   23ff8:	bne	2405c <flatcc_builder_table_add_union_vector@@Base+0xa0>
   23ffc:	cmp	r7, #0
   24000:	beq	24034 <flatcc_builder_table_add_union_vector@@Base+0x78>
   24004:	sub	r1, r5, #1
   24008:	mov	r0, r6
   2400c:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   24010:	cmp	r0, #0
   24014:	beq	2407c <flatcc_builder_table_add_union_vector@@Base+0xc0>
   24018:	str	r7, [r0]
   2401c:	mov	r0, r6
   24020:	mov	r1, r5
   24024:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   24028:	cmp	r0, #0
   2402c:	beq	2409c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   24030:	str	r4, [r0]
   24034:	mov	r0, #0
   24038:	pop	{r4, r5, r6, r7, fp, pc}
   2403c:	movw	r0, #25483	; 0x638b
   24040:	movt	r0, #3
   24044:	movw	r1, #23414	; 0x5b76
   24048:	movt	r1, #3
   2404c:	movw	r3, #26381	; 0x670d
   24050:	movt	r3, #3
   24054:	mov	r2, #1536	; 0x600
   24058:	bl	14f44 <__assert_fail@plt>
   2405c:	movw	r0, #26480	; 0x6770
   24060:	movt	r0, #3
   24064:	movw	r1, #23414	; 0x5b76
   24068:	movt	r1, #3
   2406c:	movw	r3, #26381	; 0x670d
   24070:	movt	r3, #3
   24074:	movw	r2, #1537	; 0x601
   24078:	bl	14f44 <__assert_fail@plt>
   2407c:	movw	r0, #26359	; 0x66f7
   24080:	movt	r0, #3
   24084:	movw	r1, #23414	; 0x5b76
   24088:	movt	r1, #3
   2408c:	movw	r3, #26381	; 0x670d
   24090:	movt	r3, #3
   24094:	movw	r2, #1540	; 0x604
   24098:	bl	14f44 <__assert_fail@plt>
   2409c:	movw	r0, #26359	; 0x66f7
   240a0:	movt	r0, #3
   240a4:	movw	r1, #23414	; 0x5b76
   240a8:	movt	r1, #3
   240ac:	movw	r3, #26381	; 0x670d
   240b0:	movt	r3, #3
   240b4:	movw	r2, #1544	; 0x608
   240b8:	bl	14f44 <__assert_fail@plt>

000240bc <flatcc_builder_create_union_vector@@Base>:
   240bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   240c0:	add	fp, sp, #24
   240c4:	sub	sp, sp, #16
   240c8:	mov	r6, r3
   240cc:	mov	r7, r2
   240d0:	mov	r4, r1
   240d4:	mov	r5, r0
   240d8:	mov	r0, #0
   240dc:	str	r0, [r5]
   240e0:	str	r0, [r5, #4]
   240e4:	mov	r0, r1
   240e8:	bl	22e80 <flatcc_builder_start_offset_vector@@Base>
   240ec:	cmp	r0, #0
   240f0:	beq	240fc <flatcc_builder_create_union_vector@@Base+0x40>
   240f4:	sub	sp, fp, #24
   240f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   240fc:	mov	r0, r4
   24100:	mov	r1, r6
   24104:	bl	229cc <flatcc_builder_extend_offset_vector@@Base>
   24108:	cmp	r0, #0
   2410c:	beq	240f4 <flatcc_builder_create_union_vector@@Base+0x38>
   24110:	mov	r0, r4
   24114:	mov	r1, r6
   24118:	bl	22748 <flatcc_builder_start_struct@@Base+0x84>
   2411c:	cmp	r0, #0
   24120:	beq	240f4 <flatcc_builder_create_union_vector@@Base+0x38>
   24124:	mov	r8, r0
   24128:	mov	r0, r4
   2412c:	bl	23cf4 <flatcc_builder_offset_vector_edit@@Base>
   24130:	mov	ip, r0
   24134:	cmp	r6, #0
   24138:	beq	24168 <flatcc_builder_create_union_vector@@Base+0xac>
   2413c:	add	r0, r7, #4
   24140:	mov	r1, r6
   24144:	mov	r2, ip
   24148:	mov	r7, r8
   2414c:	ldrb	r3, [r0, #-4]
   24150:	strb	r3, [r7], #1
   24154:	ldr	r3, [r0]
   24158:	str	r3, [r2], #4
   2415c:	add	r0, r0, #8
   24160:	subs	r1, r1, #1
   24164:	bne	2414c <flatcc_builder_create_union_vector@@Base+0x90>
   24168:	str	r6, [sp]
   2416c:	add	r0, sp, #8
   24170:	mov	r1, r4
   24174:	mov	r2, r8
   24178:	mov	r3, ip
   2417c:	bl	2419c <flatcc_builder_create_union_vector_direct@@Base>
   24180:	ldr	r0, [sp, #8]
   24184:	ldr	r1, [sp, #12]
   24188:	stm	r5, {r0, r1}
   2418c:	mov	r0, r4
   24190:	bl	22658 <flatcc_builder_end_buffer@@Base+0xc8>
   24194:	sub	sp, fp, #24
   24198:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002419c <flatcc_builder_create_union_vector_direct@@Base>:
   2419c:	push	{r4, r5, r6, r7, fp, lr}
   241a0:	add	fp, sp, #16
   241a4:	sub	sp, sp, #8
   241a8:	mov	r5, r2
   241ac:	mov	r6, r1
   241b0:	mov	r4, r0
   241b4:	mov	r0, #0
   241b8:	str	r0, [r4]
   241bc:	str	r0, [r4, #4]
   241c0:	ldr	r7, [fp, #8]
   241c4:	mov	r0, r1
   241c8:	mov	r1, r3
   241cc:	mov	r2, r7
   241d0:	mov	r3, r5
   241d4:	bl	23adc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   241d8:	str	r0, [r4, #4]
   241dc:	cmp	r0, #0
   241e0:	beq	2420c <flatcc_builder_create_union_vector_direct@@Base+0x70>
   241e4:	mvn	r0, #0
   241e8:	mov	r1, #1
   241ec:	str	r1, [sp]
   241f0:	str	r0, [sp, #4]
   241f4:	mov	r0, r6
   241f8:	mov	r1, r5
   241fc:	mov	r2, r7
   24200:	mov	r3, #1
   24204:	bl	23930 <flatcc_builder_create_vector@@Base>
   24208:	str	r0, [r4]
   2420c:	sub	sp, fp, #16
   24210:	pop	{r4, r5, r6, r7, fp, pc}

00024214 <flatcc_builder_start_union_vector@@Base>:
   24214:	push	{r4, r5, fp, lr}
   24218:	add	fp, sp, #8
   2421c:	mov	r4, r0
   24220:	mov	r1, #4
   24224:	bl	22498 <flatcc_builder_start_buffer@@Base+0xbc>
   24228:	mvn	r5, #0
   2422c:	cmp	r0, #0
   24230:	beq	2423c <flatcc_builder_start_union_vector@@Base+0x28>
   24234:	mov	r0, r5
   24238:	pop	{r4, r5, fp, pc}
   2423c:	ldr	r0, [r4, #32]
   24240:	mov	r1, #8
   24244:	str	r1, [r0, #16]
   24248:	ldr	r0, [r4, #32]
   2424c:	mov	r5, #0
   24250:	str	r5, [r0, #20]
   24254:	ldr	r0, [r4, #32]
   24258:	mov	r1, #7
   2425c:	strh	r1, [r0, #14]
   24260:	mov	r0, r4
   24264:	mvn	r1, #3
   24268:	bl	22710 <flatcc_builder_start_struct@@Base+0x4c>
   2426c:	mov	r0, r5
   24270:	pop	{r4, r5, fp, pc}

00024274 <flatcc_builder_end_union_vector@@Base>:
   24274:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24278:	add	fp, sp, #24
   2427c:	sub	sp, sp, #16
   24280:	mov	r9, r0
   24284:	mov	r0, #0
   24288:	str	r0, [r9]
   2428c:	str	r0, [r9, #4]
   24290:	ldr	r0, [r1, #32]
   24294:	ldrh	r0, [r0, #14]
   24298:	cmp	r0, #7
   2429c:	bne	2433c <flatcc_builder_end_union_vector@@Base+0xc8>
   242a0:	mov	r4, r1
   242a4:	mov	r0, r1
   242a8:	bl	2435c <flatcc_builder_union_vector_count@@Base>
   242ac:	mov	r6, r0
   242b0:	add	r1, r0, r0, lsl #2
   242b4:	mov	r0, r4
   242b8:	bl	22748 <flatcc_builder_start_struct@@Base+0x84>
   242bc:	cmp	r0, #0
   242c0:	beq	24334 <flatcc_builder_end_union_vector@@Base+0xc0>
   242c4:	mov	r7, r0
   242c8:	add	r8, r0, r6, lsl #2
   242cc:	mov	r0, r4
   242d0:	bl	24368 <flatcc_builder_union_vector_edit@@Base>
   242d4:	cmp	r6, #0
   242d8:	beq	24308 <flatcc_builder_end_union_vector@@Base+0x94>
   242dc:	add	r0, r0, #4
   242e0:	mov	r1, r6
   242e4:	mov	r2, r7
   242e8:	mov	r3, r8
   242ec:	ldrb	r5, [r0, #-4]
   242f0:	strb	r5, [r3], #1
   242f4:	ldr	r5, [r0]
   242f8:	str	r5, [r2], #4
   242fc:	add	r0, r0, #8
   24300:	subs	r1, r1, #1
   24304:	bne	242ec <flatcc_builder_end_union_vector@@Base+0x78>
   24308:	str	r6, [sp]
   2430c:	add	r0, sp, #8
   24310:	mov	r1, r4
   24314:	mov	r2, r8
   24318:	mov	r3, r7
   2431c:	bl	2419c <flatcc_builder_create_union_vector_direct@@Base>
   24320:	ldr	r0, [sp, #8]
   24324:	ldr	r1, [sp, #12]
   24328:	stm	r9, {r0, r1}
   2432c:	mov	r0, r4
   24330:	bl	22658 <flatcc_builder_end_buffer@@Base+0xc8>
   24334:	sub	sp, fp, #24
   24338:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2433c:	movw	r0, #26520	; 0x6798
   24340:	movt	r0, #3
   24344:	movw	r1, #23414	; 0x5b76
   24348:	movt	r1, #3
   2434c:	movw	r3, #26570	; 0x67ca
   24350:	movt	r3, #3
   24354:	movw	r2, #1617	; 0x651
   24358:	bl	14f44 <__assert_fail@plt>

0002435c <flatcc_builder_union_vector_count@@Base>:
   2435c:	ldr	r0, [r0, #32]
   24360:	ldr	r0, [r0, #20]
   24364:	bx	lr

00024368 <flatcc_builder_union_vector_edit@@Base>:
   24368:	ldr	r0, [r0, #16]
   2436c:	bx	lr

00024370 <flatcc_builder_extend_union_vector@@Base>:
   24370:	push	{r4, r5, fp, lr}
   24374:	add	fp, sp, #8
   24378:	mov	r5, r1
   2437c:	mov	r4, r0
   24380:	mvn	r2, #-536870912	; 0xe0000000
   24384:	bl	2284c <flatcc_builder_extend_vector@@Base+0x44>
   24388:	mov	r1, r0
   2438c:	mov	r0, #0
   24390:	cmp	r1, #0
   24394:	popne	{r4, r5, fp, pc}
   24398:	lsl	r1, r5, #3
   2439c:	mov	r0, r4
   243a0:	bl	22748 <flatcc_builder_start_struct@@Base+0x84>
   243a4:	pop	{r4, r5, fp, pc}

000243a8 <flatcc_builder_truncate_union_vector@@Base>:
   243a8:	push	{fp, lr}
   243ac:	mov	fp, sp
   243b0:	ldr	r2, [r0, #32]
   243b4:	ldrh	r3, [r2, #14]
   243b8:	cmp	r3, #7
   243bc:	bne	243ec <flatcc_builder_truncate_union_vector@@Base+0x44>
   243c0:	ldr	r3, [r2, #20]
   243c4:	cmp	r3, r1
   243c8:	bcc	2440c <flatcc_builder_truncate_union_vector@@Base+0x64>
   243cc:	sub	r3, r3, r1
   243d0:	str	r3, [r2, #20]
   243d4:	ldr	r2, [r0, #32]
   243d8:	ldr	r2, [r2, #16]
   243dc:	mul	r1, r2, r1
   243e0:	bl	22cd4 <flatcc_builder_truncate_vector@@Base+0x84>
   243e4:	mov	r0, #0
   243e8:	pop	{fp, pc}
   243ec:	movw	r0, #26520	; 0x6798
   243f0:	movt	r0, #3
   243f4:	movw	r1, #23414	; 0x5b76
   243f8:	movt	r1, #3
   243fc:	movw	r3, #26653	; 0x681d
   24400:	movt	r3, #3
   24404:	movw	r2, #1665	; 0x681
   24408:	bl	14f44 <__assert_fail@plt>
   2440c:	movw	r0, #25084	; 0x61fc
   24410:	movt	r0, #3
   24414:	movw	r1, #23414	; 0x5b76
   24418:	movt	r1, #3
   2441c:	movw	r3, #26653	; 0x681d
   24420:	movt	r3, #3
   24424:	movw	r2, #1666	; 0x682
   24428:	bl	14f44 <__assert_fail@plt>

0002442c <flatcc_builder_union_vector_push@@Base>:
   2442c:	push	{r4, r5, r6, sl, fp, lr}
   24430:	add	fp, sp, #16
   24434:	mov	r4, r2
   24438:	mov	r5, r1
   2443c:	ldr	r1, [r0, #32]
   24440:	ldrh	r2, [r1, #14]
   24444:	cmp	r2, #7
   24448:	bne	24484 <flatcc_builder_union_vector_push@@Base+0x58>
   2444c:	ldr	r2, [r1, #20]
   24450:	mov	r6, #0
   24454:	cmn	r2, #-536870911	; 0xe0000001
   24458:	beq	2447c <flatcc_builder_union_vector_push@@Base+0x50>
   2445c:	add	r2, r2, #1
   24460:	str	r2, [r1, #20]
   24464:	mov	r1, #8
   24468:	bl	22748 <flatcc_builder_start_struct@@Base+0x84>
   2446c:	cmp	r0, #0
   24470:	strne	r5, [r0]
   24474:	strne	r4, [r0, #4]
   24478:	movne	r6, r0
   2447c:	mov	r0, r6
   24480:	pop	{r4, r5, r6, sl, fp, pc}
   24484:	movw	r0, #26520	; 0x6798
   24488:	movt	r0, #3
   2448c:	movw	r1, #23414	; 0x5b76
   24490:	movt	r1, #3
   24494:	movw	r3, #26722	; 0x6862
   24498:	movt	r3, #3
   2449c:	movw	r2, #1677	; 0x68d
   244a0:	bl	14f44 <__assert_fail@plt>

000244a4 <flatcc_builder_append_union_vector@@Base>:
   244a4:	push	{r4, r5, r6, sl, fp, lr}
   244a8:	add	fp, sp, #16
   244ac:	mov	r6, r0
   244b0:	ldr	r0, [r0, #32]
   244b4:	ldrh	r0, [r0, #14]
   244b8:	cmp	r0, #7
   244bc:	bne	244fc <flatcc_builder_append_union_vector@@Base+0x58>
   244c0:	mov	r5, r2
   244c4:	mov	r4, r1
   244c8:	mov	r0, r6
   244cc:	mov	r1, r2
   244d0:	mvn	r2, #-536870912	; 0xe0000000
   244d4:	bl	2284c <flatcc_builder_extend_vector@@Base+0x44>
   244d8:	mov	r1, r0
   244dc:	mov	r0, #0
   244e0:	cmp	r1, #0
   244e4:	popne	{r4, r5, r6, sl, fp, pc}
   244e8:	lsl	r2, r5, #3
   244ec:	mov	r0, r6
   244f0:	mov	r1, r4
   244f4:	bl	22914 <flatcc_builder_vector_push@@Base+0x80>
   244f8:	pop	{r4, r5, r6, sl, fp, pc}
   244fc:	movw	r0, #26520	; 0x6798
   24500:	movt	r0, #3
   24504:	movw	r1, #23414	; 0x5b76
   24508:	movt	r1, #3
   2450c:	movw	r3, #26831	; 0x68cf
   24510:	movt	r3, #3
   24514:	movw	r2, #1692	; 0x69c
   24518:	bl	14f44 <__assert_fail@plt>

0002451c <flatcc_builder_create_string@@Base>:
   2451c:	push	{r4, r5, r6, r7, fp, lr}
   24520:	add	fp, sp, #16
   24524:	sub	sp, sp, #80	; 0x50
   24528:	mov	r5, r2
   2452c:	mov	r6, r1
   24530:	mov	r4, r0
   24534:	mov	r0, r2
   24538:	bl	22098 <flatcc_builder_embed_buffer@@Base+0x1dc>
   2453c:	str	r5, [fp, #-20]	; 0xffffffec
   24540:	add	r1, r5, #1
   24544:	mov	r7, #4
   24548:	mov	r0, r4
   2454c:	mov	r2, #4
   24550:	bl	22084 <flatcc_builder_embed_buffer@@Base+0x1c8>
   24554:	str	r7, [sp, #4]
   24558:	sub	r1, fp, #20
   2455c:	str	r1, [sp, #12]
   24560:	str	r7, [sp, #16]
   24564:	mov	r1, #1
   24568:	str	r1, [sp, #8]
   2456c:	add	r0, r0, #1
   24570:	cmp	r5, #0
   24574:	beq	24590 <flatcc_builder_create_string@@Base+0x74>
   24578:	str	r6, [sp, #20]
   2457c:	str	r5, [sp, #24]
   24580:	mov	r1, #2
   24584:	str	r1, [sp, #8]
   24588:	add	r1, r5, #4
   2458c:	str	r1, [sp, #4]
   24590:	cmp	r0, #0
   24594:	beq	245c4 <flatcc_builder_create_string@@Base+0xa8>
   24598:	ldmib	sp, {r1, r2}
   2459c:	add	r1, r1, r0
   245a0:	str	r1, [sp, #4]
   245a4:	add	r1, sp, #4
   245a8:	add	r1, r1, r2, lsl #3
   245ac:	movw	r3, #22884	; 0x5964
   245b0:	movt	r3, #3
   245b4:	str	r3, [r1, #8]
   245b8:	str	r0, [r1, #12]
   245bc:	add	r0, r2, #1
   245c0:	str	r0, [sp, #8]
   245c4:	add	r1, sp, #4
   245c8:	mov	r0, r4
   245cc:	bl	2209c <flatcc_builder_embed_buffer@@Base+0x1e0>
   245d0:	sub	sp, fp, #16
   245d4:	pop	{r4, r5, r6, r7, fp, pc}

000245d8 <flatcc_builder_create_string_str@@Base>:
   245d8:	push	{r4, r5, fp, lr}
   245dc:	add	fp, sp, #8
   245e0:	mov	r4, r1
   245e4:	mov	r5, r0
   245e8:	mov	r0, r1
   245ec:	bl	14ecc <strlen@plt>
   245f0:	mov	r2, r0
   245f4:	mov	r0, r5
   245f8:	mov	r1, r4
   245fc:	pop	{r4, r5, fp, lr}
   24600:	b	2451c <flatcc_builder_create_string@@Base>

00024604 <flatcc_builder_create_string_strn@@Base>:
   24604:	push	{r4, r5, fp, lr}
   24608:	add	fp, sp, #8
   2460c:	mov	r4, r1
   24610:	mov	r5, r0
   24614:	mov	r0, r1
   24618:	mov	r1, r2
   2461c:	bl	22c24 <flatcc_builder_append_string_strn@@Base+0x30>
   24620:	mov	r2, r0
   24624:	mov	r0, r5
   24628:	mov	r1, r4
   2462c:	pop	{r4, r5, fp, lr}
   24630:	b	2451c <flatcc_builder_create_string@@Base>

00024634 <flatcc_builder_end_string@@Base>:
   24634:	push	{r4, r5, fp, lr}
   24638:	add	fp, sp, #8
   2463c:	mov	r4, r0
   24640:	ldr	r0, [r0, #32]
   24644:	ldrh	r1, [r0, #14]
   24648:	cmp	r1, #6
   2464c:	bne	24684 <flatcc_builder_end_string@@Base+0x50>
   24650:	ldr	r2, [r4, #20]
   24654:	ldr	r0, [r0, #20]
   24658:	cmp	r0, r2
   2465c:	bne	246a4 <flatcc_builder_end_string@@Base+0x70>
   24660:	ldr	r1, [r4, #16]
   24664:	mov	r0, r4
   24668:	bl	2451c <flatcc_builder_create_string@@Base>
   2466c:	mov	r5, r0
   24670:	cmp	r0, #0
   24674:	movne	r0, r4
   24678:	blne	22658 <flatcc_builder_end_buffer@@Base+0xc8>
   2467c:	mov	r0, r5
   24680:	pop	{r4, r5, fp, pc}
   24684:	movw	r0, #24731	; 0x609b
   24688:	movt	r0, #3
   2468c:	movw	r1, #23414	; 0x5b76
   24690:	movt	r1, #3
   24694:	movw	r3, #26958	; 0x694e
   24698:	movt	r3, #3
   2469c:	movw	r2, #1732	; 0x6c4
   246a0:	bl	14f44 <__assert_fail@plt>
   246a4:	movw	r0, #27025	; 0x6991
   246a8:	movt	r0, #3
   246ac:	movw	r1, #23414	; 0x5b76
   246b0:	movt	r1, #3
   246b4:	movw	r3, #26958	; 0x694e
   246b8:	movt	r3, #3
   246bc:	movw	r2, #1733	; 0x6c5
   246c0:	bl	14f44 <__assert_fail@plt>

000246c4 <flatcc_builder_string_edit@@Base>:
   246c4:	ldr	r0, [r0, #16]
   246c8:	bx	lr

000246cc <flatcc_builder_string_len@@Base>:
   246cc:	ldr	r0, [r0, #32]
   246d0:	ldr	r0, [r0, #20]
   246d4:	bx	lr
   246d8:	push	{r4, r5, r6, sl, fp, lr}
   246dc:	add	fp, sp, #16
   246e0:	mov	r5, r3
   246e4:	mov	r4, r0
   246e8:	ldr	r0, [r0, #20]
   246ec:	ldr	r3, [r4, #24]
   246f0:	add	r0, r2, r0
   246f4:	sub	r0, r0, #1
   246f8:	rsb	r2, r2, #0
   246fc:	and	r6, r0, r2
   24700:	add	r0, r6, r1
   24704:	str	r0, [r4, #20]
   24708:	cmp	r0, r3
   2470c:	bcc	24730 <flatcc_builder_string_len@@Base+0x64>
   24710:	add	r1, r0, #1
   24714:	mov	r0, r4
   24718:	movw	r2, #65532	; 0xfffc
   2471c:	bl	24b7c <flatcc_builder_get_emit_context@@Base+0x18>
   24720:	mov	r1, r0
   24724:	mov	r0, #0
   24728:	cmp	r1, #0
   2472c:	popne	{r4, r5, r6, sl, fp, pc}
   24730:	ldr	r0, [r4, #4]
   24734:	add	r0, r0, r5, lsl #1
   24738:	add	r1, r6, #4
   2473c:	strh	r1, [r0]
   24740:	ldrh	r0, [r4, #8]
   24744:	cmp	r0, r5
   24748:	addls	r0, r5, #1
   2474c:	strhls	r0, [r4, #8]
   24750:	ldr	r0, [r4, #16]
   24754:	add	r0, r0, r6
   24758:	pop	{r4, r5, r6, sl, fp, pc}

0002475c <flatcc_builder_table_edit@@Base>:
   2475c:	ldr	r2, [r0, #32]
   24760:	ldrh	r2, [r2, #14]
   24764:	cmp	r2, #3
   24768:	ldreq	r2, [r0, #16]
   2476c:	ldreq	r0, [r0, #20]
   24770:	addeq	r0, r2, r0
   24774:	subeq	r0, r0, r1
   24778:	bxeq	lr
   2477c:	push	{fp, lr}
   24780:	mov	fp, sp
   24784:	movw	r0, #25483	; 0x638b
   24788:	movt	r0, #3
   2478c:	movw	r1, #23414	; 0x5b76
   24790:	movt	r1, #3
   24794:	movw	r3, #27203	; 0x6a43
   24798:	movt	r3, #3
   2479c:	movw	r2, #1794	; 0x702
   247a0:	bl	14f44 <__assert_fail@plt>

000247a4 <flatcc_builder_table_add_copy@@Base>:
   247a4:	push	{r4, r5, r6, sl, fp, lr}
   247a8:	add	fp, sp, #16
   247ac:	mov	r4, r3
   247b0:	mov	r5, r2
   247b4:	ldr	r3, [fp, #8]
   247b8:	mov	r2, r4
   247bc:	bl	23ed8 <flatcc_builder_table_add@@Base>
   247c0:	mov	r6, r0
   247c4:	cmp	r0, #0
   247c8:	beq	247dc <flatcc_builder_table_add_copy@@Base+0x38>
   247cc:	mov	r0, r6
   247d0:	mov	r1, r5
   247d4:	mov	r2, r4
   247d8:	bl	14e60 <memcpy@plt>
   247dc:	mov	r0, r6
   247e0:	pop	{r4, r5, r6, sl, fp, pc}
   247e4:	push	{r4, r5, r6, r7, fp, lr}
   247e8:	add	fp, sp, #16
   247ec:	mov	r5, r1
   247f0:	mov	r4, r0
   247f4:	ldr	r0, [r0, #20]
   247f8:	ldr	r1, [r4, #24]
   247fc:	add	r0, r0, #3
   24800:	bic	r7, r0, #3
   24804:	add	r6, r7, #4
   24808:	str	r6, [r4, #20]
   2480c:	cmp	r6, r1
   24810:	bls	24834 <flatcc_builder_table_add_copy@@Base+0x90>
   24814:	mov	r0, r4
   24818:	mov	r1, r6
   2481c:	movw	r2, #65532	; 0xfffc
   24820:	bl	24b7c <flatcc_builder_get_emit_context@@Base+0x18>
   24824:	mov	r1, r0
   24828:	mov	r0, #0
   2482c:	cmp	r1, #0
   24830:	popne	{r4, r5, r6, r7, fp, pc}
   24834:	ldr	r0, [r4, #4]
   24838:	add	r0, r0, r5, lsl #1
   2483c:	strh	r6, [r0]
   24840:	ldrh	r0, [r4, #8]
   24844:	cmp	r0, r5
   24848:	addls	r0, r5, #1
   2484c:	strhls	r0, [r4, #8]
   24850:	ldr	r0, [r4]
   24854:	add	r1, r0, #2
   24858:	str	r1, [r4]
   2485c:	strh	r7, [r0]
   24860:	ldr	r0, [r4, #16]
   24864:	add	r0, r0, r7
   24868:	pop	{r4, r5, r6, r7, fp, pc}

0002486c <flatcc_builder_push_buffer_alignment@@Base>:
   2486c:	ldrh	r1, [r0, #128]	; 0x80
   24870:	mov	r2, #4
   24874:	strh	r2, [r0, #128]	; 0x80
   24878:	mov	r0, r1
   2487c:	bx	lr

00024880 <flatcc_builder_pop_buffer_alignment@@Base>:
   24880:	b	22300 <flatcc_builder_create_buffer@@Base+0x1d0>

00024884 <flatcc_builder_get_buffer_alignment@@Base>:
   24884:	ldrh	r0, [r0, #128]	; 0x80
   24888:	bx	lr

0002488c <flatcc_builder_set_vtable_clustering@@Base>:
   2488c:	clz	r1, r1
   24890:	lsr	r1, r1, #5
   24894:	str	r1, [r0, #180]	; 0xb4
   24898:	bx	lr

0002489c <flatcc_builder_set_block_align@@Base>:
   2489c:	strh	r1, [r0, #132]	; 0x84
   248a0:	bx	lr

000248a4 <flatcc_builder_get_level@@Base>:
   248a4:	ldr	r0, [r0, #156]	; 0x9c
   248a8:	bx	lr

000248ac <flatcc_builder_set_max_level@@Base>:
   248ac:	str	r1, [r0, #176]	; 0xb0
   248b0:	ldr	r2, [r0, #160]	; 0xa0
   248b4:	cmp	r2, r1
   248b8:	strlt	r1, [r0, #160]	; 0xa0
   248bc:	bx	lr

000248c0 <flatcc_builder_get_buffer_size@@Base>:
   248c0:	ldr	r1, [r0, #136]	; 0x88
   248c4:	ldr	r0, [r0, #140]	; 0x8c
   248c8:	sub	r0, r0, r1
   248cc:	bx	lr

000248d0 <flatcc_builder_get_buffer_start@@Base>:
   248d0:	ldr	r0, [r0, #136]	; 0x88
   248d4:	bx	lr

000248d8 <flatcc_builder_get_buffer_end@@Base>:
   248d8:	ldr	r0, [r0, #140]	; 0x8c
   248dc:	bx	lr

000248e0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   248e0:	str	r1, [r0, #172]	; 0xac
   248e4:	bx	lr

000248e8 <flatcc_builder_set_identifier@@Base>:
   248e8:	movw	r2, #22884	; 0x5964
   248ec:	movt	r2, #3
   248f0:	cmp	r1, #0
   248f4:	movne	r2, r1
   248f8:	ldr	r1, [r2]
   248fc:	str	r1, [r0, #168]	; 0xa8
   24900:	bx	lr

00024904 <flatcc_builder_get_type@@Base>:
   24904:	ldr	r0, [r0, #32]
   24908:	cmp	r0, #0
   2490c:	ldrhne	r0, [r0, #14]
   24910:	moveq	r0, #0
   24914:	bx	lr

00024918 <flatcc_builder_get_type_at@@Base>:
   24918:	mov	r2, r0
   2491c:	mov	r0, #0
   24920:	cmp	r1, #1
   24924:	ldrge	r3, [r2, #156]	; 0x9c
   24928:	cmpge	r3, r1
   2492c:	bge	24934 <flatcc_builder_get_type_at@@Base+0x1c>
   24930:	bx	lr
   24934:	sub	r0, r1, r3
   24938:	add	r0, r0, r0, lsl #3
   2493c:	ldr	r1, [r2, #32]
   24940:	add	r0, r1, r0, lsl #2
   24944:	ldrh	r0, [r0, #14]
   24948:	bx	lr

0002494c <flatcc_builder_get_direct_buffer@@Base>:
   2494c:	ldr	r2, [r0, #184]	; 0xb8
   24950:	cmp	r2, #0
   24954:	beq	24960 <flatcc_builder_get_direct_buffer@@Base+0x14>
   24958:	add	r0, r0, #188	; 0xbc
   2495c:	b	24974 <flatcc_builder_get_direct_buffer@@Base+0x28>
   24960:	cmp	r1, #0
   24964:	movne	r0, #0
   24968:	strne	r0, [r1]
   2496c:	mov	r0, #0
   24970:	bx	lr
   24974:	ldm	r0, {r2, r3}
   24978:	cmp	r2, r3
   2497c:	beq	24990 <flatcc_builder_get_direct_buffer@@Base+0x44>
   24980:	mov	r0, #0
   24984:	cmp	r1, #0
   24988:	strne	r0, [r1]
   2498c:	bx	lr
   24990:	cmp	r1, #0
   24994:	ldrne	r2, [r0, #24]
   24998:	strne	r2, [r1]
   2499c:	ldr	r0, [r0, #8]
   249a0:	bx	lr

000249a4 <flatcc_builder_copy_buffer@@Base>:
   249a4:	push	{fp, lr}
   249a8:	mov	fp, sp
   249ac:	ldr	r3, [r0, #184]	; 0xb8
   249b0:	cmp	r3, #0
   249b4:	beq	249e8 <flatcc_builder_copy_buffer@@Base+0x44>
   249b8:	add	r0, r0, #188	; 0xbc
   249bc:	bl	250c0 <flatcc_emitter_copy_buffer@@Base>
   249c0:	cmp	r0, #0
   249c4:	popne	{fp, pc}
   249c8:	movw	r0, #7831	; 0x1e97
   249cc:	movt	r0, #3
   249d0:	movw	r1, #23414	; 0x5b76
   249d4:	movt	r1, #3
   249d8:	movw	r3, #27342	; 0x6ace
   249dc:	movt	r3, #3
   249e0:	movw	r2, #1926	; 0x786
   249e4:	bl	14f44 <__assert_fail@plt>
   249e8:	mov	r0, #0
   249ec:	pop	{fp, pc}

000249f0 <flatcc_builder_finalize_buffer@@Base>:
   249f0:	push	{r4, r5, r6, sl, fp, lr}
   249f4:	add	fp, sp, #16
   249f8:	mov	r6, r1
   249fc:	mov	r4, r0
   24a00:	bl	248c0 <flatcc_builder_get_buffer_size@@Base>
   24a04:	mov	r5, r0
   24a08:	cmp	r6, #0
   24a0c:	strne	r5, [r6]
   24a10:	mov	r0, r5
   24a14:	bl	14ea8 <malloc@plt>
   24a18:	cmp	r0, #0
   24a1c:	beq	24a60 <flatcc_builder_finalize_buffer@@Base+0x70>
   24a20:	mov	r6, r0
   24a24:	mov	r0, r4
   24a28:	mov	r1, r6
   24a2c:	mov	r2, r5
   24a30:	bl	249a4 <flatcc_builder_copy_buffer@@Base>
   24a34:	cmp	r0, #0
   24a38:	movne	r0, r6
   24a3c:	popne	{r4, r5, r6, sl, fp, pc}
   24a40:	movw	r0, #27932	; 0x6d1c
   24a44:	movt	r0, #3
   24a48:	movw	r1, #23414	; 0x5b76
   24a4c:	movt	r1, #3
   24a50:	movw	r3, #27411	; 0x6b13
   24a54:	movt	r3, #3
   24a58:	movw	r2, #1948	; 0x79c
   24a5c:	bl	14f44 <__assert_fail@plt>
   24a60:	movw	r0, #27932	; 0x6d1c
   24a64:	movt	r0, #3
   24a68:	movw	r1, #23414	; 0x5b76
   24a6c:	movt	r1, #3
   24a70:	movw	r3, #27411	; 0x6b13
   24a74:	movt	r3, #3
   24a78:	movw	r2, #1944	; 0x798
   24a7c:	bl	14f44 <__assert_fail@plt>

00024a80 <flatcc_builder_finalize_aligned_buffer@@Base>:
   24a80:	push	{r4, r5, r6, r7, fp, lr}
   24a84:	add	fp, sp, #16
   24a88:	mov	r4, r1
   24a8c:	mov	r5, r0
   24a90:	bl	248c0 <flatcc_builder_get_buffer_size@@Base>
   24a94:	mov	r6, r0
   24a98:	cmp	r4, #0
   24a9c:	strne	r6, [r4]
   24aa0:	mov	r0, r5
   24aa4:	bl	24884 <flatcc_builder_get_buffer_alignment@@Base>
   24aa8:	add	r1, r6, r0
   24aac:	sub	r1, r1, #1
   24ab0:	rsb	r2, r0, #0
   24ab4:	and	r7, r1, r2
   24ab8:	mov	r1, r7
   24abc:	bl	24b08 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   24ac0:	cmp	r0, #0
   24ac4:	beq	24af4 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   24ac8:	mov	r6, r0
   24acc:	mov	r0, r5
   24ad0:	mov	r1, r6
   24ad4:	mov	r2, r7
   24ad8:	bl	249a4 <flatcc_builder_copy_buffer@@Base>
   24adc:	cmp	r0, #0
   24ae0:	beq	24aec <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   24ae4:	mov	r0, r6
   24ae8:	pop	{r4, r5, r6, r7, fp, pc}
   24aec:	mov	r0, r6
   24af0:	bl	14e54 <free@plt>
   24af4:	mov	r6, #0
   24af8:	cmp	r4, #0
   24afc:	strne	r6, [r4]
   24b00:	mov	r0, r6
   24b04:	pop	{r4, r5, r6, r7, fp, pc}
   24b08:	push	{fp, lr}
   24b0c:	mov	fp, sp
   24b10:	sub	sp, sp, #8
   24b14:	mov	r2, r1
   24b18:	mov	r1, r0
   24b1c:	mov	r0, #0
   24b20:	str	r0, [sp, #4]
   24b24:	cmp	r1, #4
   24b28:	movls	r1, #4
   24b2c:	add	r0, sp, #4
   24b30:	bl	14ee4 <posix_memalign@plt>
   24b34:	cmp	r0, #0
   24b38:	ldrne	r0, [sp, #4]
   24b3c:	cmpne	r0, #0
   24b40:	beq	24b50 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   24b44:	bl	14e54 <free@plt>
   24b48:	mov	r0, #0
   24b4c:	str	r0, [sp, #4]
   24b50:	ldr	r0, [sp, #4]
   24b54:	mov	sp, fp
   24b58:	pop	{fp, pc}

00024b5c <flatcc_builder_aligned_alloc@@Base>:
   24b5c:	b	24b08 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00024b60 <flatcc_builder_aligned_free@@Base>:
   24b60:	b	14e54 <free@plt>

00024b64 <flatcc_builder_get_emit_context@@Base>:
   24b64:	ldr	r0, [r0, #36]	; 0x24
   24b68:	bx	lr
   24b6c:	ldr	r0, [r0, #140]	; 0x8c
   24b70:	sub	r1, r1, #1
   24b74:	and	r0, r0, r1
   24b78:	bx	lr
   24b7c:	push	{r4, r5, r6, sl, fp, lr}
   24b80:	add	fp, sp, #16
   24b84:	sub	sp, sp, #8
   24b88:	mov	r6, r2
   24b8c:	mov	r5, r0
   24b90:	ldr	r2, [r0, #28]
   24b94:	ldr	r0, [r0, #40]	; 0x28
   24b98:	ldr	r4, [r5, #48]	; 0x30
   24b9c:	mov	r3, #1
   24ba0:	str	r3, [sp]
   24ba4:	add	r2, r2, r1
   24ba8:	add	r1, r5, #60	; 0x3c
   24bac:	mov	r3, #1
   24bb0:	blx	r4
   24bb4:	mov	r1, r0
   24bb8:	mvn	r0, #0
   24bbc:	cmp	r1, #0
   24bc0:	beq	24bcc <flatcc_builder_get_emit_context@@Base+0x68>
   24bc4:	sub	sp, fp, #16
   24bc8:	pop	{r4, r5, r6, sl, fp, pc}
   24bcc:	mov	r0, r5
   24bd0:	mov	r1, r6
   24bd4:	bl	22710 <flatcc_builder_start_struct@@Base+0x4c>
   24bd8:	mov	r0, #0
   24bdc:	sub	sp, fp, #16
   24be0:	pop	{r4, r5, r6, sl, fp, pc}
   24be4:	push	{r4, r5, r6, sl, fp, lr}
   24be8:	add	fp, sp, #16
   24bec:	sub	sp, sp, #8
   24bf0:	ldr	r2, [r0, #124]	; 0x7c
   24bf4:	cmp	r2, #0
   24bf8:	bne	24c98 <flatcc_builder_get_emit_context@@Base+0x134>
   24bfc:	mov	r4, r0
   24c00:	mov	r0, #0
   24c04:	str	r0, [sp]
   24c08:	mov	r6, #16
   24c0c:	mov	r0, r4
   24c10:	mov	r1, #6
   24c14:	mov	r3, #16
   24c18:	bl	21d2c <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   24c1c:	mvn	r5, #0
   24c20:	cmp	r0, #0
   24c24:	beq	24c8c <flatcc_builder_get_emit_context@@Base+0x128>
   24c28:	add	r1, r4, #92	; 0x5c
   24c2c:	str	r6, [r4, #124]	; 0x7c
   24c30:	ldr	r0, [r4, #40]	; 0x28
   24c34:	ldr	ip, [r4, #48]	; 0x30
   24c38:	mov	r2, #5
   24c3c:	str	r2, [sp]
   24c40:	mov	r6, #256	; 0x100
   24c44:	mov	r2, #256	; 0x100
   24c48:	mov	r3, #1
   24c4c:	blx	ip
   24c50:	cmp	r0, #0
   24c54:	bne	24c8c <flatcc_builder_get_emit_context@@Base+0x128>
   24c58:	ldr	r0, [r4, #96]	; 0x60
   24c5c:	mov	r1, r6
   24c60:	lsl	r6, r6, #1
   24c64:	cmp	r0, r1, lsl #1
   24c68:	bcs	24c5c <flatcc_builder_get_emit_context@@Base+0xf8>
   24c6c:	lsr	r1, r1, #2
   24c70:	mvn	r0, #0
   24c74:	mov	r2, #1
   24c78:	add	r0, r0, #1
   24c7c:	cmp	r1, r2, lsl r0
   24c80:	bhi	24c78 <flatcc_builder_get_emit_context@@Base+0x114>
   24c84:	str	r0, [r4, #116]	; 0x74
   24c88:	mov	r5, #0
   24c8c:	mov	r0, r5
   24c90:	sub	sp, fp, #16
   24c94:	pop	{r4, r5, r6, sl, fp, pc}
   24c98:	movw	r0, #27872	; 0x6ce0
   24c9c:	movt	r0, #3
   24ca0:	movw	r1, #23414	; 0x5b76
   24ca4:	movt	r1, #3
   24ca8:	movw	r3, #27887	; 0x6cef
   24cac:	movt	r3, #3
   24cb0:	movw	r2, #342	; 0x156
   24cb4:	bl	14f44 <__assert_fail@plt>

00024cb8 <flatcc_emitter_recycle_page@@Base>:
   24cb8:	ldr	ip, [r0]
   24cbc:	mvn	r2, #0
   24cc0:	cmp	ip, r1
   24cc4:	ldrne	r3, [r0, #4]
   24cc8:	cmpne	r3, r1
   24ccc:	bne	24cd8 <flatcc_emitter_recycle_page@@Base+0x20>
   24cd0:	mov	r0, r2
   24cd4:	bx	lr
   24cd8:	ldr	r2, [r1, #2944]	; 0xb80
   24cdc:	ldr	r3, [r1, #2948]	; 0xb84
   24ce0:	str	r3, [r2, #2948]	; 0xb84
   24ce4:	ldr	r2, [r1, #2944]	; 0xb80
   24ce8:	ldr	r3, [r1, #2948]	; 0xb84
   24cec:	str	r2, [r3, #2944]	; 0xb80
   24cf0:	ldr	r2, [ip, #2948]	; 0xb84
   24cf4:	str	r2, [r1, #2948]	; 0xb84
   24cf8:	ldr	r0, [r0]
   24cfc:	str	r0, [r1, #2944]	; 0xb80
   24d00:	str	r1, [r2, #2944]	; 0xb80
   24d04:	ldr	r0, [r1, #2944]	; 0xb80
   24d08:	str	r1, [r0, #2948]	; 0xb84
   24d0c:	mov	r2, #0
   24d10:	mov	r0, r2
   24d14:	bx	lr

00024d18 <flatcc_emitter_reset@@Base>:
   24d18:	push	{r4, sl, fp, lr}
   24d1c:	add	fp, sp, #8
   24d20:	mov	r4, r0
   24d24:	ldr	r0, [r0]
   24d28:	cmp	r0, #0
   24d2c:	beq	24dd0 <flatcc_emitter_reset@@Base+0xb8>
   24d30:	mov	r1, #1472	; 0x5c0
   24d34:	add	r2, r0, #1472	; 0x5c0
   24d38:	stmib	r4, {r0, r2}
   24d3c:	str	r1, [r4, #12]
   24d40:	str	r2, [r4, #16]
   24d44:	str	r1, [r4, #20]
   24d48:	movw	r1, #64064	; 0xfa40
   24d4c:	movt	r1, #65535	; 0xffff
   24d50:	str	r1, [r0, #2952]	; 0xb88
   24d54:	ldr	r0, [r4, #32]
   24d58:	cmp	r0, #0
   24d5c:	ldreq	r0, [r4, #24]
   24d60:	streq	r0, [r4, #32]
   24d64:	add	r2, r4, #24
   24d68:	ldm	r2, {r0, r1, r2}
   24d6c:	mov	r3, #0
   24d70:	str	r3, [r4, #24]
   24d74:	add	r2, r2, r2, lsl #1
   24d78:	lsr	r2, r2, #2
   24d7c:	add	r0, r2, r0, lsr #2
   24d80:	str	r0, [r4, #32]
   24d84:	cmp	r1, r0, lsl #1
   24d88:	bls	24dd0 <flatcc_emitter_reset@@Base+0xb8>
   24d8c:	ldr	r2, [r4]
   24d90:	ldr	r1, [r4, #4]
   24d94:	ldr	r0, [r1, #2944]	; 0xb80
   24d98:	cmp	r0, r2
   24d9c:	popeq	{r4, sl, fp, pc}
   24da0:	ldr	r2, [r0, #2944]	; 0xb80
   24da4:	str	r2, [r1, #2944]	; 0xb80
   24da8:	ldr	r1, [r0, #2944]	; 0xb80
   24dac:	ldr	r2, [r4, #4]
   24db0:	str	r2, [r1, #2948]	; 0xb84
   24db4:	bl	14e54 <free@plt>
   24db8:	ldr	r0, [r4, #28]
   24dbc:	ldr	r1, [r4, #32]
   24dc0:	sub	r0, r0, #2944	; 0xb80
   24dc4:	str	r0, [r4, #28]
   24dc8:	cmp	r0, r1, lsl #1
   24dcc:	bhi	24d8c <flatcc_emitter_reset@@Base+0x74>
   24dd0:	pop	{r4, sl, fp, pc}

00024dd4 <flatcc_emitter_clear@@Base>:
   24dd4:	push	{r4, r5, r6, sl, fp, lr}
   24dd8:	add	fp, sp, #16
   24ddc:	ldr	r5, [r0]
   24de0:	cmp	r5, #0
   24de4:	popeq	{r4, r5, r6, sl, fp, pc}
   24de8:	mov	r4, r0
   24dec:	ldr	r0, [r5, #2948]	; 0xb84
   24df0:	mov	r6, #0
   24df4:	str	r6, [r0, #2944]	; 0xb80
   24df8:	b	24e08 <flatcc_emitter_clear@@Base+0x34>
   24dfc:	mov	r5, r0
   24e00:	ldr	r0, [r0, #2948]	; 0xb84
   24e04:	bl	14e54 <free@plt>
   24e08:	ldr	r0, [r5, #2944]	; 0xb80
   24e0c:	cmp	r0, #0
   24e10:	bne	24dfc <flatcc_emitter_clear@@Base+0x28>
   24e14:	mov	r0, r5
   24e18:	bl	14e54 <free@plt>
   24e1c:	vmov.i32	q8, #0	; 0x00000000
   24e20:	add	r0, r4, #16
   24e24:	vst1.32	{d16-d17}, [r0]
   24e28:	mov	r0, #32
   24e2c:	vst1.32	{d16-d17}, [r4], r0
   24e30:	str	r6, [r4]
   24e34:	pop	{r4, r5, r6, sl, fp, pc}

00024e38 <flatcc_emitter@@Base>:
   24e38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24e3c:	add	fp, sp, #24
   24e40:	mov	r4, r2
   24e44:	mov	r5, r1
   24e48:	mov	r6, r0
   24e4c:	ldr	r1, [r0, #24]
   24e50:	ldr	r0, [fp, #8]
   24e54:	add	r1, r1, r0
   24e58:	str	r1, [r6, #24]
   24e5c:	mov	r1, r6
   24e60:	cmn	r3, #1
   24e64:	ble	24ea4 <flatcc_emitter@@Base+0x6c>
   24e68:	ldr	r2, [r1, #20]!
   24e6c:	cmp	r2, r0
   24e70:	bcs	24eec <flatcc_emitter@@Base+0xb4>
   24e74:	mov	r8, #0
   24e78:	cmp	r4, #0
   24e7c:	beq	24f3c <flatcc_emitter@@Base+0x104>
   24e80:	ldm	r5, {r1, r2}
   24e84:	mov	r0, r6
   24e88:	bl	25008 <flatcc_emitter@@Base+0x1d0>
   24e8c:	cmp	r0, #0
   24e90:	bne	24ee0 <flatcc_emitter@@Base+0xa8>
   24e94:	subs	r4, r4, #1
   24e98:	add	r5, r5, #8
   24e9c:	bne	24e80 <flatcc_emitter@@Base+0x48>
   24ea0:	b	24f3c <flatcc_emitter@@Base+0x104>
   24ea4:	ldr	r2, [r1, #12]!
   24ea8:	cmp	r2, r0
   24eac:	bcs	24efc <flatcc_emitter@@Base+0xc4>
   24eb0:	add	r0, r5, r4, lsl #3
   24eb4:	sub	r5, r0, #4
   24eb8:	rsb	r4, r4, #1
   24ebc:	cmp	r4, #1
   24ec0:	beq	24f44 <flatcc_emitter@@Base+0x10c>
   24ec4:	ldmda	r5, {r1, r2}
   24ec8:	mov	r0, r6
   24ecc:	bl	24f50 <flatcc_emitter@@Base+0x118>
   24ed0:	sub	r5, r5, #8
   24ed4:	add	r4, r4, #1
   24ed8:	cmp	r0, #0
   24edc:	beq	24ebc <flatcc_emitter@@Base+0x84>
   24ee0:	mvn	r8, #0
   24ee4:	mov	r0, r8
   24ee8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24eec:	ldr	r7, [r6, #16]
   24ef0:	add	r3, r7, r0
   24ef4:	str	r3, [r6, #16]
   24ef8:	b	24f08 <flatcc_emitter@@Base+0xd0>
   24efc:	ldr	r3, [r6, #8]
   24f00:	sub	r7, r3, r0
   24f04:	str	r7, [r6, #8]
   24f08:	sub	r0, r2, r0
   24f0c:	str	r0, [r1]
   24f10:	mov	r8, #0
   24f14:	cmp	r4, #0
   24f18:	beq	24f3c <flatcc_emitter@@Base+0x104>
   24f1c:	ldm	r5, {r1, r2}
   24f20:	mov	r0, r7
   24f24:	bl	14e60 <memcpy@plt>
   24f28:	ldr	r0, [r5, #4]
   24f2c:	add	r7, r7, r0
   24f30:	add	r5, r5, #8
   24f34:	subs	r4, r4, #1
   24f38:	bne	24f1c <flatcc_emitter@@Base+0xe4>
   24f3c:	mov	r0, r8
   24f40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24f44:	mov	r8, #0
   24f48:	mov	r0, r8
   24f4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24f50:	push	{r4, r5, r6, r7, fp, lr}
   24f54:	add	fp, sp, #16
   24f58:	cmp	r2, #0
   24f5c:	moveq	r0, #0
   24f60:	popeq	{r4, r5, r6, r7, fp, pc}
   24f64:	mov	r4, r2
   24f68:	mov	r5, r0
   24f6c:	clz	r0, r2
   24f70:	lsr	r7, r0, #5
   24f74:	add	r6, r1, r2
   24f78:	b	24fb4 <flatcc_emitter@@Base+0x17c>
   24f7c:	sub	r0, r0, r7
   24f80:	str	r0, [r5, #12]
   24f84:	ldr	r0, [r5, #8]
   24f88:	sub	r0, r0, r7
   24f8c:	str	r0, [r5, #8]
   24f90:	sub	r6, r6, r7
   24f94:	mov	r1, r6
   24f98:	mov	r2, r7
   24f9c:	bl	14e60 <memcpy@plt>
   24fa0:	subs	r4, r4, r7
   24fa4:	clz	r0, r4
   24fa8:	lsr	r7, r0, #5
   24fac:	moveq	r0, #0
   24fb0:	popeq	{r4, r5, r6, r7, fp, pc}
   24fb4:	ldr	r0, [r5, #12]
   24fb8:	cmp	r4, r0
   24fbc:	bls	24fec <flatcc_emitter@@Base+0x1b4>
   24fc0:	cmp	r0, #0
   24fc4:	bne	24ff4 <flatcc_emitter@@Base+0x1bc>
   24fc8:	mov	r0, r5
   24fcc:	bl	2517c <flatcc_emitter_copy_buffer@@Base+0xbc>
   24fd0:	cmp	r0, #0
   24fd4:	mov	r1, r0
   24fd8:	movwne	r1, #1
   24fdc:	orr	r1, r1, r7
   24fe0:	tst	r1, #1
   24fe4:	beq	24fb4 <flatcc_emitter@@Base+0x17c>
   24fe8:	b	24ffc <flatcc_emitter@@Base+0x1c4>
   24fec:	mov	r7, r4
   24ff0:	b	24f7c <flatcc_emitter@@Base+0x144>
   24ff4:	mov	r7, r0
   24ff8:	b	24f7c <flatcc_emitter@@Base+0x144>
   24ffc:	cmp	r0, #0
   25000:	mvnne	r0, #0
   25004:	pop	{r4, r5, r6, r7, fp, pc}
   25008:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2500c:	add	fp, sp, #24
   25010:	cmp	r2, #0
   25014:	moveq	r0, #0
   25018:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2501c:	mov	r4, r2
   25020:	mov	r8, r1
   25024:	mov	r6, r0
   25028:	clz	r0, r2
   2502c:	lsr	r5, r0, #5
   25030:	b	25074 <flatcc_emitter@@Base+0x23c>
   25034:	ldr	r0, [r6, #16]
   25038:	mov	r1, r8
   2503c:	mov	r2, r7
   25040:	bl	14e60 <memcpy@plt>
   25044:	ldr	r0, [r6, #16]
   25048:	ldr	r1, [r6, #20]
   2504c:	add	r0, r0, r7
   25050:	sub	r1, r1, r7
   25054:	str	r0, [r6, #16]
   25058:	str	r1, [r6, #20]
   2505c:	add	r8, r8, r7
   25060:	subs	r4, r4, r7
   25064:	clz	r0, r4
   25068:	lsr	r5, r0, #5
   2506c:	moveq	r0, #0
   25070:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   25074:	ldr	r7, [r6, #20]
   25078:	cmp	r4, r7
   2507c:	bls	250ac <flatcc_emitter@@Base+0x274>
   25080:	cmp	r7, #0
   25084:	bne	25034 <flatcc_emitter@@Base+0x1fc>
   25088:	mov	r0, r6
   2508c:	bl	25268 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   25090:	cmp	r0, #0
   25094:	mov	r1, r0
   25098:	movwne	r1, #1
   2509c:	orr	r1, r1, r5
   250a0:	tst	r1, #1
   250a4:	beq	25074 <flatcc_emitter@@Base+0x23c>
   250a8:	b	250b4 <flatcc_emitter@@Base+0x27c>
   250ac:	mov	r7, r4
   250b0:	b	25034 <flatcc_emitter@@Base+0x1fc>
   250b4:	cmp	r0, #0
   250b8:	mvnne	r0, #0
   250bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000250c0 <flatcc_emitter_copy_buffer@@Base>:
   250c0:	push	{r4, r5, r6, sl, fp, lr}
   250c4:	add	fp, sp, #16
   250c8:	mov	r3, r2
   250cc:	ldr	r2, [r0, #24]
   250d0:	mov	r5, #0
   250d4:	cmp	r2, r3
   250d8:	bhi	25160 <flatcc_emitter_copy_buffer@@Base+0xa0>
   250dc:	mov	r4, r0
   250e0:	ldr	r0, [r0]
   250e4:	cmp	r0, #0
   250e8:	beq	25160 <flatcc_emitter_copy_buffer@@Base+0xa0>
   250ec:	mov	r6, r1
   250f0:	ldr	r1, [r4, #4]
   250f4:	cmp	r0, r1
   250f8:	beq	25168 <flatcc_emitter_copy_buffer@@Base+0xa8>
   250fc:	ldr	r1, [r4, #8]
   25100:	ldr	r0, [r4, #12]
   25104:	rsb	r5, r0, #2944	; 0xb80
   25108:	mov	r0, r6
   2510c:	mov	r2, r5
   25110:	bl	14e60 <memcpy@plt>
   25114:	add	r5, r6, r5
   25118:	ldm	r4, {r0, r1}
   2511c:	ldr	r6, [r0, #2944]	; 0xb80
   25120:	cmp	r6, r1
   25124:	beq	2514c <flatcc_emitter_copy_buffer@@Base+0x8c>
   25128:	mov	r0, r5
   2512c:	mov	r1, r6
   25130:	mov	r2, #2944	; 0xb80
   25134:	bl	14e60 <memcpy@plt>
   25138:	add	r5, r5, #2944	; 0xb80
   2513c:	ldr	r6, [r6, #2944]	; 0xb80
   25140:	ldr	r0, [r4, #4]
   25144:	cmp	r6, r0
   25148:	bne	25128 <flatcc_emitter_copy_buffer@@Base+0x68>
   2514c:	ldr	r0, [r4, #20]
   25150:	rsb	r2, r0, #2944	; 0xb80
   25154:	mov	r0, r5
   25158:	mov	r1, r6
   2515c:	bl	14e60 <memcpy@plt>
   25160:	mov	r0, r5
   25164:	pop	{r4, r5, r6, sl, fp, pc}
   25168:	ldr	r1, [r4, #8]
   2516c:	mov	r0, r6
   25170:	bl	14e60 <memcpy@plt>
   25174:	mov	r0, r6
   25178:	pop	{r4, r5, r6, sl, fp, pc}
   2517c:	push	{r4, r5, fp, lr}
   25180:	add	fp, sp, #8
   25184:	mov	r4, r0
   25188:	ldr	r5, [r0]
   2518c:	cmp	r5, #0
   25190:	beq	251b8 <flatcc_emitter_copy_buffer@@Base+0xf8>
   25194:	ldr	r0, [r5, #2948]	; 0xb84
   25198:	ldr	r1, [r4, #4]
   2519c:	cmp	r0, r1
   251a0:	beq	251b8 <flatcc_emitter_copy_buffer@@Base+0xf8>
   251a4:	ldr	r1, [r5, #2952]	; 0xb88
   251a8:	sub	r1, r1, #2944	; 0xb80
   251ac:	str	r1, [r0, #2952]	; 0xb88
   251b0:	ldr	r0, [r5, #2948]	; 0xb84
   251b4:	b	251f8 <flatcc_emitter_copy_buffer@@Base+0x138>
   251b8:	movw	r0, #2956	; 0xb8c
   251bc:	bl	14ea8 <malloc@plt>
   251c0:	cmp	r0, #0
   251c4:	mvneq	r0, #0
   251c8:	popeq	{r4, r5, fp, pc}
   251cc:	ldr	r1, [r4, #28]
   251d0:	add	r1, r1, #2944	; 0xb80
   251d4:	str	r1, [r4, #28]
   251d8:	cmp	r5, #0
   251dc:	beq	25228 <flatcc_emitter_copy_buffer@@Base+0x168>
   251e0:	ldm	r4, {r1, r2}
   251e4:	str	r1, [r0, #2944]	; 0xb80
   251e8:	str	r2, [r0, #2948]	; 0xb84
   251ec:	str	r0, [r1, #2948]	; 0xb84
   251f0:	ldr	r1, [r4, #4]
   251f4:	str	r0, [r1, #2944]	; 0xb80
   251f8:	str	r0, [r4]
   251fc:	mov	r0, #2944	; 0xb80
   25200:	ldr	r1, [r4]
   25204:	add	r2, r1, #2944	; 0xb80
   25208:	str	r2, [r4, #8]
   2520c:	str	r0, [r4, #12]
   25210:	ldr	r0, [r1, #2944]	; 0xb80
   25214:	ldr	r0, [r0, #2952]	; 0xb88
   25218:	sub	r0, r0, #2944	; 0xb80
   2521c:	str	r0, [r1, #2952]	; 0xb88
   25220:	mov	r0, #0
   25224:	pop	{r4, r5, fp, pc}
   25228:	str	r0, [r4, #4]
   2522c:	str	r0, [r4]
   25230:	mov	r1, #1472	; 0x5c0
   25234:	str	r1, [r4, #12]
   25238:	str	r1, [r4, #20]
   2523c:	ldr	r1, [r4]
   25240:	add	r1, r1, #1472	; 0x5c0
   25244:	str	r1, [r4, #8]
   25248:	str	r1, [r4, #16]
   2524c:	movw	r1, #64064	; 0xfa40
   25250:	movt	r1, #65535	; 0xffff
   25254:	str	r0, [r0, #2944]	; 0xb80
   25258:	str	r0, [r0, #2948]	; 0xb84
   2525c:	str	r1, [r0, #2952]	; 0xb88
   25260:	mov	r0, #0
   25264:	pop	{r4, r5, fp, pc}
   25268:	push	{r4, r5, fp, lr}
   2526c:	add	fp, sp, #8
   25270:	mov	r4, r0
   25274:	ldr	r5, [r0, #4]
   25278:	cmp	r5, #0
   2527c:	beq	25290 <flatcc_emitter_copy_buffer@@Base+0x1d0>
   25280:	ldr	r0, [r5, #2944]	; 0xb80
   25284:	ldr	r1, [r4]
   25288:	cmp	r0, r1
   2528c:	bne	252cc <flatcc_emitter_copy_buffer@@Base+0x20c>
   25290:	movw	r0, #2956	; 0xb8c
   25294:	bl	14ea8 <malloc@plt>
   25298:	cmp	r0, #0
   2529c:	mvneq	r0, #0
   252a0:	popeq	{r4, r5, fp, pc}
   252a4:	ldr	r1, [r4, #28]
   252a8:	add	r1, r1, #2944	; 0xb80
   252ac:	str	r1, [r4, #28]
   252b0:	cmp	r5, #0
   252b4:	beq	252f8 <flatcc_emitter_copy_buffer@@Base+0x238>
   252b8:	ldr	r1, [r4]
   252bc:	str	r1, [r0, #2944]	; 0xb80
   252c0:	str	r5, [r0, #2948]	; 0xb84
   252c4:	str	r0, [r1, #2948]	; 0xb84
   252c8:	str	r0, [r5, #2944]	; 0xb80
   252cc:	str	r0, [r4, #4]
   252d0:	mov	r0, #2944	; 0xb80
   252d4:	ldr	r1, [r4, #4]
   252d8:	str	r1, [r4, #16]
   252dc:	str	r0, [r4, #20]
   252e0:	ldr	r0, [r1, #2948]	; 0xb84
   252e4:	ldr	r0, [r0, #2952]	; 0xb88
   252e8:	add	r0, r0, #2944	; 0xb80
   252ec:	str	r0, [r1, #2952]	; 0xb88
   252f0:	mov	r0, #0
   252f4:	pop	{r4, r5, fp, pc}
   252f8:	str	r0, [r4, #4]
   252fc:	str	r0, [r4]
   25300:	mov	r1, #1472	; 0x5c0
   25304:	str	r1, [r4, #12]
   25308:	str	r1, [r4, #20]
   2530c:	ldr	r1, [r4]
   25310:	add	r1, r1, #1472	; 0x5c0
   25314:	str	r1, [r4, #8]
   25318:	str	r1, [r4, #16]
   2531c:	movw	r1, #64064	; 0xfa40
   25320:	movt	r1, #65535	; 0xffff
   25324:	str	r0, [r0, #2944]	; 0xb80
   25328:	str	r0, [r0, #2948]	; 0xb84
   2532c:	str	r1, [r0, #2952]	; 0xb88
   25330:	mov	r0, #0
   25334:	pop	{r4, r5, fp, pc}

00025338 <flatcc_verify_error_string@@Base>:
   25338:	cmp	r0, #36	; 0x24
   2533c:	movwhi	r0, #29146	; 0x71da
   25340:	movthi	r0, #3
   25344:	bxhi	lr
   25348:	movw	r1, #29168	; 0x71f0
   2534c:	movt	r1, #3
   25350:	ldr	r0, [r1, r0, lsl #2]
   25354:	bx	lr

00025358 <flatcc_verify_field@@Base>:
   25358:	b	2535c <flatcc_verify_field@@Base+0x4>
   2535c:	push	{r4, r5, r6, r7, fp, lr}
   25360:	add	fp, sp, #16
   25364:	mov	r4, r3
   25368:	mov	r6, r2
   2536c:	mov	r5, r0
   25370:	ldr	r7, [r0]
   25374:	bl	26074 <flatcc_verify_union_field@@Base+0x130>
   25378:	movw	r1, #65535	; 0xffff
   2537c:	tst	r0, r1
   25380:	beq	253b8 <flatcc_verify_field@@Base+0x60>
   25384:	uxtah	r2, r6, r0
   25388:	ldrh	r3, [r5, #20]
   2538c:	mov	r1, #13
   25390:	cmp	r2, r3
   25394:	bhi	253bc <flatcc_verify_field@@Base+0x64>
   25398:	uxth	r0, r0
   2539c:	add	r0, r0, r7
   253a0:	ldr	r1, [r5, #16]
   253a4:	add	r0, r0, r1
   253a8:	sub	r1, r4, #1
   253ac:	ands	r0, r0, r1
   253b0:	movwne	r0, #12
   253b4:	pop	{r4, r5, r6, r7, fp, pc}
   253b8:	mov	r1, #0
   253bc:	mov	r0, r1
   253c0:	pop	{r4, r5, r6, r7, fp, pc}

000253c4 <flatcc_verify_string_field@@Base>:
   253c4:	push	{r4, r5, r6, sl, fp, lr}
   253c8:	add	fp, sp, #16
   253cc:	sub	sp, sp, #8
   253d0:	mov	r4, r0
   253d4:	add	r3, sp, #4
   253d8:	bl	25420 <flatcc_verify_string_field@@Base+0x5c>
   253dc:	cmp	r0, #0
   253e0:	bne	25418 <flatcc_verify_string_field@@Base+0x54>
   253e4:	ldr	r5, [sp, #4]
   253e8:	cmp	r5, #0
   253ec:	beq	25418 <flatcc_verify_string_field@@Base+0x54>
   253f0:	ldr	r6, [r4]
   253f4:	ldr	r4, [r4, #4]
   253f8:	mov	r0, r6
   253fc:	mov	r1, r5
   25400:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25404:	mov	r3, r0
   25408:	mov	r0, r6
   2540c:	mov	r1, r4
   25410:	mov	r2, r5
   25414:	bl	25498 <flatcc_verify_string_field@@Base+0xd4>
   25418:	sub	sp, fp, #16
   2541c:	pop	{r4, r5, r6, sl, fp, pc}
   25420:	push	{r4, r5, r6, sl, fp, lr}
   25424:	add	fp, sp, #16
   25428:	mov	r4, r3
   2542c:	mov	r5, r2
   25430:	mov	r6, r0
   25434:	bl	26074 <flatcc_verify_union_field@@Base+0x130>
   25438:	movw	r1, #65535	; 0xffff
   2543c:	tst	r0, r1
   25440:	beq	25480 <flatcc_verify_string_field@@Base+0xbc>
   25444:	mov	r1, #4
   25448:	uxtah	r1, r1, r0
   2544c:	ldrh	r2, [r6, #20]
   25450:	mov	r5, #13
   25454:	cmp	r1, r2
   25458:	bhi	25478 <flatcc_verify_string_field@@Base+0xb4>
   2545c:	uxth	r0, r0
   25460:	ldr	r1, [r6, #16]
   25464:	add	r0, r1, r0
   25468:	mov	r5, #12
   2546c:	tst	r0, #3
   25470:	streq	r0, [r4]
   25474:	moveq	r5, #0
   25478:	mov	r0, r5
   2547c:	pop	{r4, r5, r6, sl, fp, pc}
   25480:	mov	r0, #0
   25484:	str	r0, [r4]
   25488:	cmp	r5, #0
   2548c:	movwne	r5, #4
   25490:	mov	r0, r5
   25494:	pop	{r4, r5, r6, sl, fp, pc}
   25498:	push	{r4, r5, r6, r7, fp, lr}
   2549c:	add	fp, sp, #16
   254a0:	mov	r6, r3
   254a4:	mov	r7, r2
   254a8:	mov	r5, r1
   254ac:	mov	r4, r0
   254b0:	mov	r0, r1
   254b4:	mov	r1, r2
   254b8:	mov	r2, r3
   254bc:	bl	26340 <flatcc_verify_union_vector_field@@Base+0x290>
   254c0:	cmp	r0, #0
   254c4:	beq	25504 <flatcc_verify_string_field@@Base+0x140>
   254c8:	add	r6, r6, r7
   254cc:	mov	r0, r4
   254d0:	mov	r1, r6
   254d4:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   254d8:	add	r2, r6, #4
   254dc:	sub	r3, r5, r2
   254e0:	add	r7, r0, #1
   254e4:	mov	r1, #8
   254e8:	cmp	r3, r7
   254ec:	bcc	25508 <flatcc_verify_string_field@@Base+0x144>
   254f0:	add	r1, r4, r2
   254f4:	ldrb	r0, [r1, r0]
   254f8:	cmp	r0, #0
   254fc:	movwne	r0, #7
   25500:	pop	{r4, r5, r6, r7, fp, pc}
   25504:	mov	r1, #17
   25508:	mov	r0, r1
   2550c:	pop	{r4, r5, r6, r7, fp, pc}
   25510:	add	r0, r0, r1
   25514:	b	26378 <flatcc_verify_union_vector_field@@Base+0x2c8>

00025518 <flatcc_verify_vector_field@@Base>:
   25518:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2551c:	add	fp, sp, #24
   25520:	sub	sp, sp, #16
   25524:	mov	r4, r3
   25528:	mov	r6, r0
   2552c:	add	r3, sp, #12
   25530:	bl	25420 <flatcc_verify_string_field@@Base+0x5c>
   25534:	cmp	r0, #0
   25538:	bne	25580 <flatcc_verify_vector_field@@Base+0x68>
   2553c:	ldr	r5, [sp, #12]
   25540:	cmp	r5, #0
   25544:	beq	25580 <flatcc_verify_vector_field@@Base+0x68>
   25548:	ldr	r8, [fp, #12]
   2554c:	ldr	r9, [fp, #8]
   25550:	ldr	r7, [r6]
   25554:	ldr	r6, [r6, #4]
   25558:	mov	r0, r7
   2555c:	mov	r1, r5
   25560:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25564:	mov	r3, r0
   25568:	stm	sp, {r4, r9}
   2556c:	str	r8, [sp, #8]
   25570:	mov	r0, r7
   25574:	mov	r1, r6
   25578:	mov	r2, r5
   2557c:	bl	25588 <flatcc_verify_vector_field@@Base+0x70>
   25580:	sub	sp, fp, #24
   25584:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25588:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2558c:	add	fp, sp, #24
   25590:	mov	r5, r3
   25594:	mov	r7, r2
   25598:	mov	r4, r1
   2559c:	mov	r6, r0
   255a0:	ldr	r3, [fp, #12]
   255a4:	mov	r0, r1
   255a8:	mov	r1, r2
   255ac:	mov	r2, r5
   255b0:	bl	26384 <flatcc_verify_union_vector_field@@Base+0x2d4>
   255b4:	cmp	r0, #0
   255b8:	moveq	r0, #16
   255bc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   255c0:	ldr	r8, [fp, #16]
   255c4:	add	r5, r5, r7
   255c8:	mov	r0, r6
   255cc:	mov	r1, r5
   255d0:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   255d4:	mov	r1, r0
   255d8:	mov	r0, #25
   255dc:	cmp	r1, r8
   255e0:	pophi	{r4, r5, r6, r7, r8, sl, fp, pc}
   255e4:	ldr	r0, [fp, #8]
   255e8:	mul	r1, r1, r0
   255ec:	sub	r0, r4, #4
   255f0:	sub	r2, r0, r5
   255f4:	mov	r0, #0
   255f8:	cmp	r2, r1
   255fc:	movwcc	r0, #26
   25600:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00025604 <flatcc_verify_string_vector_field@@Base>:
   25604:	push	{r4, r5, r6, sl, fp, lr}
   25608:	add	fp, sp, #16
   2560c:	sub	sp, sp, #8
   25610:	mov	r4, r0
   25614:	add	r3, sp, #4
   25618:	bl	25420 <flatcc_verify_string_field@@Base+0x5c>
   2561c:	cmp	r0, #0
   25620:	bne	25658 <flatcc_verify_string_vector_field@@Base+0x54>
   25624:	ldr	r5, [sp, #4]
   25628:	cmp	r5, #0
   2562c:	beq	25658 <flatcc_verify_string_vector_field@@Base+0x54>
   25630:	ldr	r6, [r4]
   25634:	ldr	r4, [r4, #4]
   25638:	mov	r0, r6
   2563c:	mov	r1, r5
   25640:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25644:	mov	r3, r0
   25648:	mov	r0, r6
   2564c:	mov	r1, r4
   25650:	mov	r2, r5
   25654:	bl	25660 <flatcc_verify_string_vector_field@@Base+0x5c>
   25658:	sub	sp, fp, #16
   2565c:	pop	{r4, r5, r6, sl, fp, pc}
   25660:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   25664:	add	fp, sp, #24
   25668:	sub	sp, sp, #16
   2566c:	mov	r6, r3
   25670:	mov	r7, r2
   25674:	mov	r8, r1
   25678:	mov	r5, r0
   2567c:	mvn	r0, #-1073741824	; 0xc0000000
   25680:	mov	r1, #4
   25684:	str	r1, [sp]
   25688:	str	r1, [sp, #4]
   2568c:	str	r0, [sp, #8]
   25690:	mov	r0, r5
   25694:	mov	r1, r8
   25698:	bl	25588 <flatcc_verify_vector_field@@Base+0x70>
   2569c:	cmp	r0, #0
   256a0:	beq	256ac <flatcc_verify_string_vector_field@@Base+0xa8>
   256a4:	sub	sp, fp, #24
   256a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   256ac:	add	r7, r6, r7
   256b0:	mov	r0, r5
   256b4:	mov	r1, r7
   256b8:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   256bc:	cmp	r0, #0
   256c0:	beq	25708 <flatcc_verify_string_vector_field@@Base+0x104>
   256c4:	mov	r6, r0
   256c8:	add	r7, r7, #4
   256cc:	mov	r4, #0
   256d0:	mov	r0, r5
   256d4:	mov	r1, r7
   256d8:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   256dc:	mov	r3, r0
   256e0:	mov	r0, r5
   256e4:	mov	r1, r8
   256e8:	mov	r2, r7
   256ec:	bl	25498 <flatcc_verify_string_field@@Base+0xd4>
   256f0:	cmp	r0, #0
   256f4:	bne	256a4 <flatcc_verify_string_vector_field@@Base+0xa0>
   256f8:	add	r4, r4, #1
   256fc:	add	r7, r7, #4
   25700:	cmp	r4, r6
   25704:	bcc	256d0 <flatcc_verify_string_vector_field@@Base+0xcc>
   25708:	mov	r0, #0
   2570c:	sub	sp, fp, #24
   25710:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00025714 <flatcc_verify_table_field@@Base>:
   25714:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   25718:	add	fp, sp, #24
   2571c:	sub	sp, sp, #16
   25720:	mov	r8, r3
   25724:	mov	r5, r0
   25728:	add	r3, sp, #12
   2572c:	bl	25420 <flatcc_verify_string_field@@Base+0x5c>
   25730:	cmp	r0, #0
   25734:	bne	25774 <flatcc_verify_table_field@@Base+0x60>
   25738:	ldr	r6, [sp, #12]
   2573c:	cmp	r6, #0
   25740:	beq	25774 <flatcc_verify_table_field@@Base+0x60>
   25744:	ldr	r7, [r5]
   25748:	ldr	r4, [r5, #4]
   2574c:	mov	r0, r7
   25750:	mov	r1, r6
   25754:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25758:	mov	r3, r0
   2575c:	ldr	r0, [r5, #8]
   25760:	stm	sp, {r0, r8}
   25764:	mov	r0, r7
   25768:	mov	r1, r4
   2576c:	mov	r2, r6
   25770:	bl	2577c <flatcc_verify_table_field@@Base+0x68>
   25774:	sub	sp, fp, #24
   25778:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2577c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   25780:	add	fp, sp, #24
   25784:	sub	sp, sp, #24
   25788:	mov	r4, r0
   2578c:	ldr	r0, [fp, #8]
   25790:	subs	r0, r0, #1
   25794:	str	r0, [sp, #8]
   25798:	moveq	r0, #3
   2579c:	subeq	sp, fp, #24
   257a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   257a4:	mov	r6, r3
   257a8:	mov	r7, r2
   257ac:	mov	r5, r1
   257b0:	mov	r0, r1
   257b4:	mov	r1, r2
   257b8:	mov	r2, r3
   257bc:	bl	26340 <flatcc_verify_union_vector_field@@Base+0x290>
   257c0:	cmp	r0, #0
   257c4:	moveq	r0, #15
   257c8:	subeq	sp, fp, #24
   257cc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   257d0:	add	r7, r6, r7
   257d4:	str	r7, [sp, #16]
   257d8:	mov	r0, r4
   257dc:	mov	r1, r7
   257e0:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   257e4:	sub	r6, r7, r0
   257e8:	mov	r0, #29
   257ec:	tst	r6, #-2147483647	; 0x80000001
   257f0:	bne	25878 <flatcc_verify_table_field@@Base+0x164>
   257f4:	add	r8, r6, #2
   257f8:	mov	r0, #27
   257fc:	cmp	r8, r5
   25800:	bhi	25878 <flatcc_verify_table_field@@Base+0x164>
   25804:	mov	r0, r4
   25808:	mov	r1, r6
   2580c:	bl	263c4 <flatcc_verify_union_vector_field@@Base+0x314>
   25810:	mov	r1, r0
   25814:	strh	r0, [sp, #22]
   25818:	mov	r0, #30
   2581c:	tst	r1, #1
   25820:	bne	25878 <flatcc_verify_table_field@@Base+0x164>
   25824:	add	r2, r6, r1
   25828:	cmp	r2, r5
   2582c:	bhi	25878 <flatcc_verify_table_field@@Base+0x164>
   25830:	mov	r0, #28
   25834:	cmp	r1, #4
   25838:	bcc	25878 <flatcc_verify_table_field@@Base+0x164>
   2583c:	mov	r0, r4
   25840:	mov	r1, r8
   25844:	bl	263c4 <flatcc_verify_union_vector_field@@Base+0x314>
   25848:	mov	r1, r0
   2584c:	strh	r0, [sp, #20]
   25850:	sub	r2, r5, r7
   25854:	mov	r0, #20
   25858:	cmp	r2, r1
   2585c:	bcc	25878 <flatcc_verify_table_field@@Base+0x164>
   25860:	ldr	r1, [fp, #12]
   25864:	stm	sp, {r4, r5}
   25868:	add	r0, r4, r6
   2586c:	str	r0, [sp, #12]
   25870:	mov	r0, sp
   25874:	blx	r1
   25878:	sub	sp, fp, #24
   2587c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00025880 <flatcc_verify_table_vector_field@@Base>:
   25880:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   25884:	add	fp, sp, #24
   25888:	sub	sp, sp, #16
   2588c:	mov	r8, r3
   25890:	mov	r5, r0
   25894:	add	r3, sp, #12
   25898:	bl	25420 <flatcc_verify_string_field@@Base+0x5c>
   2589c:	cmp	r0, #0
   258a0:	bne	258e0 <flatcc_verify_table_vector_field@@Base+0x60>
   258a4:	ldr	r6, [sp, #12]
   258a8:	cmp	r6, #0
   258ac:	beq	258e0 <flatcc_verify_table_vector_field@@Base+0x60>
   258b0:	ldr	r7, [r5]
   258b4:	ldr	r4, [r5, #4]
   258b8:	mov	r0, r7
   258bc:	mov	r1, r6
   258c0:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   258c4:	mov	r3, r0
   258c8:	ldr	r0, [r5, #8]
   258cc:	stm	sp, {r0, r8}
   258d0:	mov	r0, r7
   258d4:	mov	r1, r4
   258d8:	mov	r2, r6
   258dc:	bl	258e8 <flatcc_verify_table_vector_field@@Base+0x68>
   258e0:	sub	sp, fp, #24
   258e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   258e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   258ec:	add	fp, sp, #28
   258f0:	sub	sp, sp, #12
   258f4:	ldr	r8, [fp, #8]
   258f8:	cmp	r8, #1
   258fc:	movlt	r0, #3
   25900:	sublt	sp, fp, #28
   25904:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25908:	mov	r6, r3
   2590c:	mov	r7, r2
   25910:	mov	sl, r1
   25914:	mov	r5, r0
   25918:	mvn	r0, #-1073741824	; 0xc0000000
   2591c:	mov	r1, #4
   25920:	str	r1, [sp]
   25924:	str	r1, [sp, #4]
   25928:	str	r0, [sp, #8]
   2592c:	mov	r0, r5
   25930:	mov	r1, sl
   25934:	bl	25588 <flatcc_verify_vector_field@@Base+0x70>
   25938:	cmp	r0, #0
   2593c:	beq	25948 <flatcc_verify_table_vector_field@@Base+0xc8>
   25940:	sub	sp, fp, #28
   25944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25948:	add	r6, r6, r7
   2594c:	mov	r0, r5
   25950:	mov	r1, r6
   25954:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25958:	cmp	r0, #0
   2595c:	beq	259b0 <flatcc_verify_table_vector_field@@Base+0x130>
   25960:	mov	r7, r0
   25964:	sub	r8, r8, #1
   25968:	ldr	r9, [fp, #12]
   2596c:	add	r6, r6, #4
   25970:	mov	r4, #0
   25974:	mov	r0, r5
   25978:	mov	r1, r6
   2597c:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25980:	mov	r3, r0
   25984:	stm	sp, {r8, r9}
   25988:	mov	r0, r5
   2598c:	mov	r1, sl
   25990:	mov	r2, r6
   25994:	bl	2577c <flatcc_verify_table_field@@Base+0x68>
   25998:	cmp	r0, #0
   2599c:	bne	259bc <flatcc_verify_table_vector_field@@Base+0x13c>
   259a0:	add	r4, r4, #1
   259a4:	add	r6, r6, #4
   259a8:	cmp	r4, r7
   259ac:	bcc	25974 <flatcc_verify_table_vector_field@@Base+0xf4>
   259b0:	mov	r0, #0
   259b4:	sub	sp, fp, #28
   259b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259bc:	mov	r0, r5
   259c0:	mov	r1, r6
   259c4:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   259c8:	mov	r3, r0
   259cc:	stm	sp, {r8, r9}
   259d0:	mov	r0, r5
   259d4:	mov	r1, sl
   259d8:	mov	r2, r6
   259dc:	bl	2577c <flatcc_verify_table_field@@Base+0x68>
   259e0:	sub	sp, fp, #28
   259e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000259e8 <flatcc_verify_union_table@@Base>:
   259e8:	push	{fp, lr}
   259ec:	mov	fp, sp
   259f0:	sub	sp, sp, #8
   259f4:	ldr	r2, [r0, #16]
   259f8:	ldr	r3, [r0, #20]
   259fc:	ldm	r0, {ip, lr}
   25a00:	ldr	r0, [r0, #8]
   25a04:	stm	sp, {r0, r1}
   25a08:	mov	r0, ip
   25a0c:	mov	r1, lr
   25a10:	bl	2577c <flatcc_verify_table_field@@Base+0x68>
   25a14:	mov	sp, fp
   25a18:	pop	{fp, pc}

00025a1c <flatcc_verify_union_struct@@Base>:
   25a1c:	push	{fp, lr}
   25a20:	mov	fp, sp
   25a24:	sub	sp, sp, #8
   25a28:	mov	ip, r1
   25a2c:	ldr	r3, [r0, #4]
   25a30:	ldr	r1, [r0, #16]
   25a34:	ldr	lr, [r0, #20]
   25a38:	str	r2, [sp]
   25a3c:	mov	r0, r3
   25a40:	mov	r2, lr
   25a44:	mov	r3, ip
   25a48:	bl	25a54 <flatcc_verify_union_struct@@Base+0x38>
   25a4c:	mov	sp, fp
   25a50:	pop	{fp, pc}
   25a54:	mov	ip, r0
   25a58:	mov	r0, #18
   25a5c:	cmp	r2, #0
   25a60:	beq	25a98 <flatcc_verify_union_struct@@Base+0x7c>
   25a64:	add	r1, r2, r1
   25a68:	cmp	r1, ip
   25a6c:	bhi	25a98 <flatcc_verify_union_struct@@Base+0x7c>
   25a70:	adds	r2, r1, r3
   25a74:	mov	r0, #10
   25a78:	bcs	25a98 <flatcc_verify_union_struct@@Base+0x7c>
   25a7c:	mov	r0, #9
   25a80:	cmp	r2, ip
   25a84:	bxhi	lr
   25a88:	ldr	r0, [sp]
   25a8c:	sub	r0, r0, #1
   25a90:	ands	r0, r0, r1
   25a94:	movwne	r0, #11
   25a98:	bx	lr

00025a9c <flatcc_verify_union_string@@Base>:
   25a9c:	ldr	ip, [r0]
   25aa0:	ldr	r1, [r0, #4]
   25aa4:	ldr	r2, [r0, #16]
   25aa8:	ldr	r3, [r0, #20]
   25aac:	mov	r0, ip
   25ab0:	b	25498 <flatcc_verify_string_field@@Base+0xd4>

00025ab4 <flatcc_verify_buffer_header@@Base>:
   25ab4:	push	{r4, r5, fp, lr}
   25ab8:	add	fp, sp, #8
   25abc:	mov	r4, r0
   25ac0:	mov	r0, #5
   25ac4:	tst	r4, #3
   25ac8:	bne	25b14 <flatcc_verify_buffer_header@@Base+0x60>
   25acc:	mov	r0, #6
   25ad0:	cmn	r1, #9
   25ad4:	bhi	25b14 <flatcc_verify_buffer_header@@Base+0x60>
   25ad8:	mov	r0, #1
   25adc:	cmp	r1, #8
   25ae0:	popcc	{r4, r5, fp, pc}
   25ae4:	cmp	r2, #0
   25ae8:	beq	25b18 <flatcc_verify_buffer_header@@Base+0x64>
   25aec:	mov	r0, r2
   25af0:	bl	25b20 <flatcc_verify_buffer_header@@Base+0x6c>
   25af4:	mov	r5, r0
   25af8:	mov	r0, r4
   25afc:	bl	25b54 <flatcc_verify_buffer_header@@Base+0xa0>
   25b00:	cmp	r5, #0
   25b04:	movne	r1, r0
   25b08:	movne	r0, #2
   25b0c:	cmpne	r1, r5
   25b10:	moveq	r0, #0
   25b14:	pop	{r4, r5, fp, pc}
   25b18:	mov	r0, #0
   25b1c:	pop	{r4, r5, fp, pc}
   25b20:	push	{fp, lr}
   25b24:	mov	fp, sp
   25b28:	sub	sp, sp, #8
   25b2c:	mov	r1, r0
   25b30:	mov	r0, #0
   25b34:	str	r0, [sp, #4]
   25b38:	add	r0, sp, #4
   25b3c:	mov	r2, #4
   25b40:	bl	14efc <strncpy@plt>
   25b44:	ldr	r0, [sp, #4]
   25b48:	bl	263d8 <flatcc_verify_union_vector_field@@Base+0x328>
   25b4c:	mov	sp, fp
   25b50:	pop	{fp, pc}
   25b54:	add	r0, r0, #4
   25b58:	b	263dc <flatcc_verify_union_vector_field@@Base+0x32c>

00025b5c <flatcc_verify_typed_buffer_header@@Base>:
   25b5c:	push	{r4, sl, fp, lr}
   25b60:	add	fp, sp, #8
   25b64:	mov	r4, r2
   25b68:	mov	r2, #5
   25b6c:	tst	r0, #3
   25b70:	bne	25ba4 <flatcc_verify_typed_buffer_header@@Base+0x48>
   25b74:	mov	r2, #6
   25b78:	cmn	r1, #9
   25b7c:	bhi	25ba4 <flatcc_verify_typed_buffer_header@@Base+0x48>
   25b80:	mov	r2, #1
   25b84:	cmp	r1, #8
   25b88:	bcc	25ba4 <flatcc_verify_typed_buffer_header@@Base+0x48>
   25b8c:	cmp	r4, #0
   25b90:	beq	25bac <flatcc_verify_typed_buffer_header@@Base+0x50>
   25b94:	bl	25b54 <flatcc_verify_buffer_header@@Base+0xa0>
   25b98:	mov	r2, #2
   25b9c:	cmp	r0, r4
   25ba0:	moveq	r2, #0
   25ba4:	mov	r0, r2
   25ba8:	pop	{r4, sl, fp, pc}
   25bac:	mov	r2, #0
   25bb0:	mov	r0, r2
   25bb4:	pop	{r4, sl, fp, pc}

00025bb8 <flatcc_verify_struct_as_root@@Base>:
   25bb8:	push	{r4, r5, r6, r7, fp, lr}
   25bbc:	add	fp, sp, #16
   25bc0:	sub	sp, sp, #8
   25bc4:	mov	r4, r3
   25bc8:	mov	r7, r2
   25bcc:	mov	r5, r1
   25bd0:	mov	r6, r0
   25bd4:	bl	25ab4 <flatcc_verify_buffer_header@@Base>
   25bd8:	cmp	r0, #0
   25bdc:	beq	25bf8 <flatcc_verify_struct_as_root@@Base+0x40>
   25be0:	mov	r0, r6
   25be4:	mov	r1, r5
   25be8:	mov	r2, r7
   25bec:	sub	sp, fp, #16
   25bf0:	pop	{r4, r5, r6, r7, fp, lr}
   25bf4:	b	25ab4 <flatcc_verify_buffer_header@@Base>
   25bf8:	ldr	r7, [fp, #8]
   25bfc:	mov	r0, r6
   25c00:	mov	r1, #0
   25c04:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25c08:	mov	r2, r0
   25c0c:	str	r7, [sp]
   25c10:	mov	r0, r5
   25c14:	mov	r1, #0
   25c18:	mov	r3, r4
   25c1c:	bl	25a54 <flatcc_verify_union_struct@@Base+0x38>
   25c20:	sub	sp, fp, #16
   25c24:	pop	{r4, r5, r6, r7, fp, pc}

00025c28 <flatcc_verify_struct_as_typed_root@@Base>:
   25c28:	push	{r4, r5, r6, r7, fp, lr}
   25c2c:	add	fp, sp, #16
   25c30:	sub	sp, sp, #8
   25c34:	mov	r4, r3
   25c38:	mov	r5, r1
   25c3c:	mov	r6, r0
   25c40:	bl	25b5c <flatcc_verify_typed_buffer_header@@Base>
   25c44:	cmp	r0, #0
   25c48:	beq	25c54 <flatcc_verify_struct_as_typed_root@@Base+0x2c>
   25c4c:	sub	sp, fp, #16
   25c50:	pop	{r4, r5, r6, r7, fp, pc}
   25c54:	ldr	r7, [fp, #8]
   25c58:	mov	r0, r6
   25c5c:	mov	r1, #0
   25c60:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25c64:	mov	r2, r0
   25c68:	str	r7, [sp]
   25c6c:	mov	r0, r5
   25c70:	mov	r1, #0
   25c74:	mov	r3, r4
   25c78:	bl	25a54 <flatcc_verify_union_struct@@Base+0x38>
   25c7c:	sub	sp, fp, #16
   25c80:	pop	{r4, r5, r6, r7, fp, pc}

00025c84 <flatcc_verify_table_as_root@@Base>:
   25c84:	push	{r4, r5, r6, r7, fp, lr}
   25c88:	add	fp, sp, #16
   25c8c:	sub	sp, sp, #8
   25c90:	mov	r5, r3
   25c94:	mov	r7, r2
   25c98:	mov	r4, r1
   25c9c:	mov	r6, r0
   25ca0:	bl	25ab4 <flatcc_verify_buffer_header@@Base>
   25ca4:	cmp	r0, #0
   25ca8:	beq	25cc4 <flatcc_verify_table_as_root@@Base+0x40>
   25cac:	mov	r0, r6
   25cb0:	mov	r1, r4
   25cb4:	mov	r2, r7
   25cb8:	sub	sp, fp, #16
   25cbc:	pop	{r4, r5, r6, r7, fp, lr}
   25cc0:	b	25ab4 <flatcc_verify_buffer_header@@Base>
   25cc4:	mov	r0, r6
   25cc8:	mov	r1, #0
   25ccc:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25cd0:	mov	r3, r0
   25cd4:	mov	r0, #100	; 0x64
   25cd8:	stm	sp, {r0, r5}
   25cdc:	mov	r0, r6
   25ce0:	mov	r1, r4
   25ce4:	mov	r2, #0
   25ce8:	bl	2577c <flatcc_verify_table_field@@Base+0x68>
   25cec:	sub	sp, fp, #16
   25cf0:	pop	{r4, r5, r6, r7, fp, pc}

00025cf4 <flatcc_verify_table_as_typed_root@@Base>:
   25cf4:	push	{r4, r5, r6, sl, fp, lr}
   25cf8:	add	fp, sp, #16
   25cfc:	sub	sp, sp, #8
   25d00:	mov	r5, r3
   25d04:	mov	r4, r1
   25d08:	mov	r6, r0
   25d0c:	bl	25b5c <flatcc_verify_typed_buffer_header@@Base>
   25d10:	cmp	r0, #0
   25d14:	beq	25d20 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   25d18:	sub	sp, fp, #16
   25d1c:	pop	{r4, r5, r6, sl, fp, pc}
   25d20:	mov	r0, r6
   25d24:	mov	r1, #0
   25d28:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25d2c:	mov	r3, r0
   25d30:	mov	r0, #100	; 0x64
   25d34:	stm	sp, {r0, r5}
   25d38:	mov	r0, r6
   25d3c:	mov	r1, r4
   25d40:	mov	r2, #0
   25d44:	bl	2577c <flatcc_verify_table_field@@Base+0x68>
   25d48:	sub	sp, fp, #16
   25d4c:	pop	{r4, r5, r6, sl, fp, pc}

00025d50 <flatcc_verify_struct_as_nested_root@@Base>:
   25d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d54:	add	fp, sp, #28
   25d58:	sub	sp, sp, #12
   25d5c:	mov	r8, r3
   25d60:	mov	r7, r2
   25d64:	mov	r6, r1
   25d68:	mov	r4, r0
   25d6c:	mvn	sl, #0
   25d70:	mov	r5, #1
   25d74:	stm	sp, {r5, sl}
   25d78:	ldr	r9, [fp, #12]
   25d7c:	mov	r3, r9
   25d80:	bl	25518 <flatcc_verify_vector_field@@Base>
   25d84:	cmp	r0, #0
   25d88:	beq	25dac <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   25d8c:	stm	sp, {r5, sl}
   25d90:	mov	r0, r4
   25d94:	mov	r1, r6
   25d98:	mov	r2, r7
   25d9c:	mov	r3, r9
   25da0:	bl	25518 <flatcc_verify_vector_field@@Base>
   25da4:	sub	sp, fp, #28
   25da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25dac:	mov	r0, r4
   25db0:	mov	r1, r6
   25db4:	bl	25e08 <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   25db8:	cmp	r0, #0
   25dbc:	moveq	r0, #0
   25dc0:	subeq	sp, fp, #28
   25dc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25dc8:	mov	r4, r0
   25dcc:	ldr	r6, [fp, #8]
   25dd0:	mov	r1, #0
   25dd4:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25dd8:	add	r4, r0, r4
   25ddc:	mov	r0, r4
   25de0:	mov	r1, #0
   25de4:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25de8:	mov	r1, r0
   25dec:	str	r9, [sp]
   25df0:	add	r0, r4, #4
   25df4:	mov	r2, r8
   25df8:	mov	r3, r6
   25dfc:	bl	25bb8 <flatcc_verify_struct_as_root@@Base>
   25e00:	sub	sp, fp, #28
   25e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e08:	push	{r4, sl, fp, lr}
   25e0c:	add	fp, sp, #8
   25e10:	mov	r4, r0
   25e14:	bl	26074 <flatcc_verify_union_field@@Base+0x130>
   25e18:	uxth	r0, r0
   25e1c:	cmp	r0, #0
   25e20:	ldrne	r1, [r4]
   25e24:	ldrne	r2, [r4, #16]
   25e28:	addne	r1, r1, r2
   25e2c:	addne	r0, r1, r0
   25e30:	popne	{r4, sl, fp, pc}
   25e34:	mov	r0, #0
   25e38:	pop	{r4, sl, fp, pc}

00025e3c <flatcc_verify_table_as_nested_root@@Base>:
   25e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e40:	add	fp, sp, #28
   25e44:	sub	sp, sp, #12
   25e48:	mov	r8, r3
   25e4c:	mov	r7, r2
   25e50:	mov	r6, r1
   25e54:	mov	r4, r0
   25e58:	mvn	r9, #0
   25e5c:	mov	sl, #1
   25e60:	str	sl, [sp]
   25e64:	str	r9, [sp, #4]
   25e68:	ldr	r5, [fp, #8]
   25e6c:	mov	r3, r5
   25e70:	bl	25518 <flatcc_verify_vector_field@@Base>
   25e74:	cmp	r0, #0
   25e78:	beq	25ea0 <flatcc_verify_table_as_nested_root@@Base+0x64>
   25e7c:	str	sl, [sp]
   25e80:	str	r9, [sp, #4]
   25e84:	mov	r0, r4
   25e88:	mov	r1, r6
   25e8c:	mov	r2, r7
   25e90:	mov	r3, r5
   25e94:	bl	25518 <flatcc_verify_vector_field@@Base>
   25e98:	sub	sp, fp, #28
   25e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ea0:	ldr	r9, [fp, #12]
   25ea4:	mov	r0, r4
   25ea8:	mov	r1, r6
   25eac:	bl	25e08 <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   25eb0:	cmp	r0, #0
   25eb4:	moveq	r0, #0
   25eb8:	subeq	sp, fp, #28
   25ebc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ec0:	mov	r5, r0
   25ec4:	mov	r1, #0
   25ec8:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25ecc:	add	r5, r0, r5
   25ed0:	mov	r0, r5
   25ed4:	mov	r1, #0
   25ed8:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25edc:	mov	r6, r0
   25ee0:	add	r7, r5, #4
   25ee4:	mov	r0, r7
   25ee8:	mov	r1, r6
   25eec:	mov	r2, r8
   25ef0:	bl	25ab4 <flatcc_verify_buffer_header@@Base>
   25ef4:	cmp	r0, #0
   25ef8:	beq	25f14 <flatcc_verify_table_as_nested_root@@Base+0xd8>
   25efc:	mov	r0, r7
   25f00:	mov	r1, r6
   25f04:	mov	r2, r8
   25f08:	sub	sp, fp, #28
   25f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f10:	b	25ab4 <flatcc_verify_buffer_header@@Base>
   25f14:	mov	r0, r7
   25f18:	mov	r1, #0
   25f1c:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   25f20:	mov	r3, r0
   25f24:	ldr	r0, [r4, #8]
   25f28:	stm	sp, {r0, r9}
   25f2c:	mov	r0, r7
   25f30:	mov	r1, r6
   25f34:	mov	r2, #0
   25f38:	bl	2577c <flatcc_verify_table_field@@Base+0x68>
   25f3c:	sub	sp, fp, #28
   25f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025f44 <flatcc_verify_union_field@@Base>:
   25f44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25f48:	add	fp, sp, #24
   25f4c:	sub	sp, sp, #32
   25f50:	mov	r8, r3
   25f54:	mov	r9, r2
   25f58:	mov	r7, r1
   25f5c:	mov	r5, r0
   25f60:	sub	r0, r1, #1
   25f64:	uxth	r4, r0
   25f68:	mov	r0, r5
   25f6c:	mov	r1, r4
   25f70:	bl	26074 <flatcc_verify_union_field@@Base+0x130>
   25f74:	uxth	r6, r0
   25f78:	cmp	r6, #0
   25f7c:	beq	26038 <flatcc_verify_union_field@@Base+0xf4>
   25f80:	mov	r0, r5
   25f84:	mov	r1, r4
   25f88:	mov	r2, #1
   25f8c:	mov	r3, #1
   25f90:	bl	2535c <flatcc_verify_field@@Base+0x4>
   25f94:	cmp	r0, #0
   25f98:	bne	26058 <flatcc_verify_union_field@@Base+0x114>
   25f9c:	mov	r0, r5
   25fa0:	mov	r1, r7
   25fa4:	bl	26074 <flatcc_verify_union_field@@Base+0x130>
   25fa8:	ldr	r1, [r5]
   25fac:	ldr	r2, [r5, #16]
   25fb0:	add	r4, r1, r2
   25fb4:	ldrb	r1, [r4, r6]
   25fb8:	movw	r2, #65535	; 0xffff
   25fbc:	tst	r0, r2
   25fc0:	beq	25fd0 <flatcc_verify_union_field@@Base+0x8c>
   25fc4:	mov	r0, #24
   25fc8:	cmp	r1, #0
   25fcc:	beq	26058 <flatcc_verify_union_field@@Base+0x114>
   25fd0:	cmp	r1, #0
   25fd4:	moveq	r0, #0
   25fd8:	subeq	sp, fp, #24
   25fdc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25fe0:	add	r3, sp, #28
   25fe4:	mov	r0, r5
   25fe8:	mov	r1, r7
   25fec:	mov	r2, r9
   25ff0:	bl	25420 <flatcc_verify_string_field@@Base+0x5c>
   25ff4:	cmp	r0, #0
   25ff8:	bne	26058 <flatcc_verify_union_field@@Base+0x114>
   25ffc:	ldr	r1, [sp, #28]
   26000:	cmp	r1, #0
   26004:	beq	26058 <flatcc_verify_union_field@@Base+0x114>
   26008:	ldm	r5, {r0, r2, r3}
   2600c:	str	r1, [sp, #20]
   26010:	stmib	sp, {r0, r2, r3}
   26014:	ldr	r0, [r5]
   26018:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   2601c:	str	r0, [sp, #24]
   26020:	ldrb	r0, [r4, r6]
   26024:	strb	r0, [sp, #16]
   26028:	add	r0, sp, #4
   2602c:	blx	r8
   26030:	sub	sp, fp, #24
   26034:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26038:	mov	r0, r5
   2603c:	mov	r1, r7
   26040:	bl	26074 <flatcc_verify_union_field@@Base+0x130>
   26044:	mov	r1, r0
   26048:	mov	r0, #23
   2604c:	movw	r2, #65535	; 0xffff
   26050:	tst	r1, r2
   26054:	beq	26060 <flatcc_verify_union_field@@Base+0x11c>
   26058:	sub	sp, fp, #24
   2605c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26060:	cmp	r9, #0
   26064:	movwne	r9, #21
   26068:	mov	r0, r9
   2606c:	sub	sp, fp, #24
   26070:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26074:	mov	r2, #4
   26078:	add	r1, r2, r1, lsl #1
   2607c:	uxth	r1, r1
   26080:	ldrh	r3, [r0, #22]
   26084:	mov	r2, #0
   26088:	cmp	r1, r3
   2608c:	bcs	260a8 <flatcc_verify_union_field@@Base+0x164>
   26090:	push	{fp, lr}
   26094:	mov	fp, sp
   26098:	ldr	r0, [r0, #12]
   2609c:	bl	263c4 <flatcc_verify_union_vector_field@@Base+0x314>
   260a0:	mov	r2, r0
   260a4:	pop	{fp, lr}
   260a8:	mov	r0, r2
   260ac:	bx	lr

000260b0 <flatcc_verify_union_vector_field@@Base>:
   260b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260b4:	add	fp, sp, #28
   260b8:	sub	sp, sp, #20
   260bc:	mov	r8, r3
   260c0:	mov	r6, r2
   260c4:	mov	sl, r1
   260c8:	mov	r5, r0
   260cc:	sub	r0, r1, #1
   260d0:	uxth	r4, r0
   260d4:	mov	r0, r5
   260d8:	mov	r1, r4
   260dc:	bl	26074 <flatcc_verify_union_field@@Base+0x130>
   260e0:	movw	r1, #65535	; 0xffff
   260e4:	tst	r0, r1
   260e8:	beq	26134 <flatcc_verify_union_vector_field@@Base+0x84>
   260ec:	mvn	r9, #0
   260f0:	mov	r7, #1
   260f4:	stm	sp, {r7, r9}
   260f8:	mov	r0, r5
   260fc:	mov	r1, r4
   26100:	mov	r2, r6
   26104:	mov	r3, #1
   26108:	bl	25518 <flatcc_verify_vector_field@@Base>
   2610c:	cmp	r0, #0
   26110:	beq	2615c <flatcc_verify_union_vector_field@@Base+0xac>
   26114:	stm	sp, {r7, r9}
   26118:	mov	r0, r5
   2611c:	mov	r1, r4
   26120:	mov	r2, r6
   26124:	mov	r3, #1
   26128:	bl	25518 <flatcc_verify_vector_field@@Base>
   2612c:	sub	sp, fp, #28
   26130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26134:	mov	r0, r5
   26138:	mov	r1, sl
   2613c:	bl	26074 <flatcc_verify_union_field@@Base+0x130>
   26140:	cmp	r6, #0
   26144:	beq	260ec <flatcc_verify_union_vector_field@@Base+0x3c>
   26148:	uxth	r1, r0
   2614c:	mov	r0, #22
   26150:	cmp	r1, #0
   26154:	beq	261fc <flatcc_verify_union_vector_field@@Base+0x14c>
   26158:	b	260ec <flatcc_verify_union_vector_field@@Base+0x3c>
   2615c:	mov	r0, r5
   26160:	mov	r1, r4
   26164:	bl	25e08 <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   26168:	cmp	r0, #0
   2616c:	moveq	r0, #0
   26170:	subeq	sp, fp, #28
   26174:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26178:	mov	r4, r0
   2617c:	mov	r1, #0
   26180:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   26184:	add	r4, r0, r4
   26188:	mov	r0, r4
   2618c:	mov	r1, #0
   26190:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   26194:	mov	r9, r0
   26198:	add	r3, sp, #16
   2619c:	mov	r0, r5
   261a0:	mov	r1, sl
   261a4:	mov	r2, r6
   261a8:	bl	25420 <flatcc_verify_string_field@@Base+0x5c>
   261ac:	cmp	r0, #0
   261b0:	bne	261fc <flatcc_verify_union_vector_field@@Base+0x14c>
   261b4:	ldr	r6, [sp, #16]
   261b8:	cmp	r6, #0
   261bc:	beq	261fc <flatcc_verify_union_vector_field@@Base+0x14c>
   261c0:	ldm	r5, {r7, sl}
   261c4:	mov	r0, r7
   261c8:	mov	r1, r6
   261cc:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   261d0:	mov	r3, r0
   261d4:	ldr	r0, [r5, #8]
   261d8:	add	r1, r4, #4
   261dc:	str	r9, [sp]
   261e0:	str	r1, [sp, #4]
   261e4:	str	r0, [sp, #8]
   261e8:	str	r8, [sp, #12]
   261ec:	mov	r0, r7
   261f0:	mov	r1, sl
   261f4:	mov	r2, r6
   261f8:	bl	26204 <flatcc_verify_union_vector_field@@Base+0x154>
   261fc:	sub	sp, fp, #28
   26200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26208:	add	fp, sp, #28
   2620c:	sub	sp, sp, #36	; 0x24
   26210:	ldr	r8, [fp, #16]
   26214:	cmp	r8, #1
   26218:	movlt	r0, #3
   2621c:	sublt	sp, fp, #28
   26220:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26224:	mov	r5, r3
   26228:	mov	r7, r2
   2622c:	mov	r6, r1
   26230:	mov	r4, r0
   26234:	mvn	r0, #-1073741824	; 0xc0000000
   26238:	mov	r1, #4
   2623c:	str	r1, [sp]
   26240:	str	r1, [sp, #4]
   26244:	str	r0, [sp, #8]
   26248:	mov	r0, r4
   2624c:	mov	r1, r6
   26250:	bl	25588 <flatcc_verify_vector_field@@Base+0x70>
   26254:	cmp	r0, #0
   26258:	bne	26310 <flatcc_verify_union_vector_field@@Base+0x260>
   2625c:	ldr	r9, [fp, #8]
   26260:	add	r7, r5, r7
   26264:	mov	r0, r4
   26268:	mov	r1, r7
   2626c:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   26270:	mov	r5, r0
   26274:	mov	r0, #34	; 0x22
   26278:	cmp	r5, r9
   2627c:	bne	26310 <flatcc_verify_union_vector_field@@Base+0x260>
   26280:	sub	r0, r8, #1
   26284:	str	r6, [sp, #16]
   26288:	str	r4, [sp, #12]
   2628c:	str	r0, [sp, #20]
   26290:	cmp	r5, #0
   26294:	moveq	r0, #0
   26298:	subeq	sp, fp, #28
   2629c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262a0:	ldr	r8, [fp, #20]
   262a4:	ldr	r9, [fp, #12]
   262a8:	add	r6, r7, #4
   262ac:	mov	r7, #0
   262b0:	add	sl, sp, #12
   262b4:	mov	r0, r4
   262b8:	mov	r1, r6
   262bc:	bl	25510 <flatcc_verify_string_field@@Base+0x14c>
   262c0:	ldrb	r1, [r9, r7]
   262c4:	cmp	r0, #0
   262c8:	beq	262f4 <flatcc_verify_union_vector_field@@Base+0x244>
   262cc:	cmp	r1, #0
   262d0:	beq	26318 <flatcc_verify_union_vector_field@@Base+0x268>
   262d4:	str	r6, [sp, #28]
   262d8:	strb	r1, [sp, #24]
   262dc:	str	r0, [sp, #32]
   262e0:	mov	r0, sl
   262e4:	blx	r8
   262e8:	cmp	r0, #0
   262ec:	beq	262fc <flatcc_verify_union_vector_field@@Base+0x24c>
   262f0:	b	26324 <flatcc_verify_union_vector_field@@Base+0x274>
   262f4:	cmp	r1, #0
   262f8:	bne	26334 <flatcc_verify_union_vector_field@@Base+0x284>
   262fc:	add	r6, r6, #4
   26300:	add	r7, r7, #1
   26304:	mov	r0, #0
   26308:	cmp	r7, r5
   2630c:	bcc	262b4 <flatcc_verify_union_vector_field@@Base+0x204>
   26310:	sub	sp, fp, #28
   26314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26318:	mov	r0, #33	; 0x21
   2631c:	sub	sp, fp, #28
   26320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26324:	add	r0, sp, #12
   26328:	blx	r8
   2632c:	sub	sp, fp, #28
   26330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26334:	mov	r0, #32
   26338:	sub	sp, fp, #28
   2633c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26340:	add	ip, r2, r1
   26344:	mov	r3, #0
   26348:	cmp	ip, r1
   2634c:	mov	r1, #0
   26350:	movwhi	r1, #1
   26354:	add	r2, ip, #4
   26358:	cmp	r2, r0
   2635c:	movwls	r3, #1
   26360:	and	r0, r1, r3
   26364:	and	r1, ip, #3
   26368:	clz	r1, r1
   2636c:	lsr	r1, r1, #5
   26370:	and	r0, r1, r0
   26374:	bx	lr
   26378:	ldr	r0, [r0]
   2637c:	b	26380 <flatcc_verify_union_vector_field@@Base+0x2d0>
   26380:	bx	lr
   26384:	mov	ip, r0
   26388:	cmp	r3, #4
   2638c:	movls	r3, #4
   26390:	add	r2, r2, r1
   26394:	mov	r0, #0
   26398:	cmp	r2, r1
   2639c:	bls	263c0 <flatcc_verify_union_vector_field@@Base+0x310>
   263a0:	add	r1, r2, #4
   263a4:	cmp	r1, ip
   263a8:	bxhi	lr
   263ac:	sub	r0, r3, #1
   263b0:	orr	r0, r0, #3
   263b4:	and	r0, r0, r1
   263b8:	clz	r0, r0
   263bc:	lsr	r0, r0, #5
   263c0:	bx	lr
   263c4:	add	r0, r0, r1
   263c8:	b	263cc <flatcc_verify_union_vector_field@@Base+0x31c>
   263cc:	ldrh	r0, [r0]
   263d0:	b	263d4 <flatcc_verify_union_vector_field@@Base+0x324>
   263d4:	bx	lr
   263d8:	bx	lr
   263dc:	ldr	r0, [r0]
   263e0:	b	263e4 <flatcc_verify_union_vector_field@@Base+0x334>
   263e4:	bx	lr

000263e8 <grisu3_diy_fp_encode_double@@Base>:
   263e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263ec:	add	fp, sp, #28
   263f0:	sub	sp, sp, #68	; 0x44
   263f4:	mov	r9, r3
   263f8:	mov	r7, r2
   263fc:	mov	r2, r0
   26400:	mov	r6, #0
   26404:	str	r6, [sp]
   26408:	str	r6, [sp, #4]
   2640c:	add	r0, sp, #48	; 0x30
   26410:	mov	r3, r1
   26414:	bl	26664 <grisu3_diy_fp_encode_double@@Base+0x27c>
   26418:	ldr	r0, [fp, #8]
   2641c:	cmp	r0, #0
   26420:	movwne	r0, #4
   26424:	ldr	r1, [sp, #48]	; 0x30
   26428:	str	r1, [sp, #28]
   2642c:	ldr	sl, [sp, #52]	; 0x34
   26430:	ldr	r5, [sp, #56]	; 0x38
   26434:	ldr	r8, [sp, #60]	; 0x3c
   26438:	rsb	r1, r5, #0
   2643c:	lsl	r4, r0, r1
   26440:	str	r9, [sp, #24]
   26444:	sub	r7, r7, r9
   26448:	add	r1, sp, #48	; 0x30
   2644c:	mov	r0, r7
   26450:	bl	26708 <grisu3_diy_fp_encode_double@@Base+0x320>
   26454:	cmp	r7, r0
   26458:	bne	26464 <grisu3_diy_fp_encode_double@@Base+0x7c>
   2645c:	ldr	r2, [sp, #28]
   26460:	b	264d0 <grisu3_diy_fp_encode_double@@Base+0xe8>
   26464:	mvn	r0, r0
   26468:	add	r7, r7, r0
   2646c:	cmp	r7, #7
   26470:	bcs	26644 <grisu3_diy_fp_encode_double@@Base+0x25c>
   26474:	stm	sp, {r5, r8}
   26478:	movw	r0, #29328	; 0x7290
   2647c:	movt	r0, #3
   26480:	ldr	r1, [r0, r7, lsl #4]!
   26484:	str	r1, [sp, #8]
   26488:	ldmib	r0, {r1, r2}
   2648c:	ldr	r0, [r0, #12]
   26490:	str	r0, [sp, #20]
   26494:	str	r2, [sp, #16]
   26498:	str	r1, [sp, #12]
   2649c:	add	r0, sp, #32
   264a0:	ldr	r2, [sp, #28]
   264a4:	mov	r3, sl
   264a8:	bl	267f0 <grisu3_diy_fp_encode_double@@Base+0x408>
   264ac:	ldr	r0, [sp, #24]
   264b0:	add	r0, r0, r7
   264b4:	add	r0, r0, #1
   264b8:	cmp	r0, #19
   264bc:	addgt	r4, r4, #4
   264c0:	ldr	r2, [sp, #32]
   264c4:	ldr	sl, [sp, #36]	; 0x24
   264c8:	ldr	r5, [sp, #40]	; 0x28
   264cc:	ldr	r8, [sp, #44]	; 0x2c
   264d0:	add	r7, sp, #48	; 0x30
   264d4:	ldm	r7, {r0, r1, r7}
   264d8:	ldr	r3, [sp, #60]	; 0x3c
   264dc:	stm	sp, {r5, r8}
   264e0:	add	ip, sp, #8
   264e4:	stm	ip, {r0, r1, r7}
   264e8:	str	r3, [sp, #20]
   264ec:	add	r0, sp, #32
   264f0:	mov	r3, sl
   264f4:	bl	267f0 <grisu3_diy_fp_encode_double@@Base+0x408>
   264f8:	add	r5, sp, #32
   264fc:	ldm	r5, {r2, r3, r5}
   26500:	ldr	r0, [sp, #44]	; 0x2c
   26504:	str	r5, [sp]
   26508:	str	r0, [sp, #4]
   2650c:	add	r0, sp, #32
   26510:	bl	26664 <grisu3_diy_fp_encode_double@@Base+0x27c>
   26514:	mov	r0, #9
   26518:	cmp	r4, #0
   2651c:	movweq	r0, #8
   26520:	add	r0, r0, r4
   26524:	ldr	r3, [sp, #32]
   26528:	ldr	r1, [sp, #36]	; 0x24
   2652c:	ldr	r2, [sp, #40]	; 0x28
   26530:	sub	r7, r5, r2
   26534:	lsl	r9, r0, r7
   26538:	movw	r0, #64461	; 0xfbcd
   2653c:	movt	r0, #65535	; 0xffff
   26540:	cmp	r2, r0
   26544:	bgt	2659c <grisu3_diy_fp_encode_double@@Base+0x1b4>
   26548:	mov	r6, #64	; 0x40
   2654c:	mvn	r7, #1136	; 0x470
   26550:	cmp	r2, r7
   26554:	blt	26568 <grisu3_diy_fp_encode_double@@Base+0x180>
   26558:	add	r0, r0, #1
   2655c:	sub	r6, r0, r2
   26560:	cmp	r6, #61	; 0x3d
   26564:	blt	2659c <grisu3_diy_fp_encode_double@@Base+0x1b4>
   26568:	sub	r0, r6, #62	; 0x3e
   2656c:	mov	r7, #9
   26570:	add	r9, r7, r9, asr r0
   26574:	lsr	r3, r3, r0
   26578:	rsb	r7, r6, #94	; 0x5e
   2657c:	orr	r3, r3, r1, lsl r7
   26580:	sub	r7, r6, #94	; 0x5e
   26584:	cmp	r7, #0
   26588:	lsrge	r3, r1, r7
   2658c:	add	r2, r0, r2
   26590:	lsr	r1, r1, r0
   26594:	movwge	r1, #0
   26598:	mov	r6, #62	; 0x3e
   2659c:	ldr	r8, [fp, #12]
   265a0:	lsr	r0, r3, r6
   265a4:	rsb	r7, r6, #32
   265a8:	orr	r0, r0, r1, lsl r7
   265ac:	sub	r7, r6, #32
   265b0:	cmp	r7, #0
   265b4:	lsrge	r0, r1, r7
   265b8:	add	r2, r2, r6
   265bc:	lsr	r1, r1, r6
   265c0:	movwge	r1, #0
   265c4:	sub	r7, r6, #1
   265c8:	mov	r5, #1
   265cc:	lsl	r5, r5, r7
   265d0:	sub	r7, r6, #33	; 0x21
   265d4:	cmp	r7, #0
   265d8:	movwge	r5, #0
   265dc:	add	r7, r9, r5, lsl #3
   265e0:	lsl	sl, r5, #3
   265e4:	and	r3, r5, r3
   265e8:	lsl	r5, r3, #3
   265ec:	mov	r4, #0
   265f0:	cmp	r6, r7
   265f4:	blt	26614 <grisu3_diy_fp_encode_double@@Base+0x22c>
   265f8:	adds	r0, r0, #1
   265fc:	adc	r1, r1, #0
   26600:	tst	r1, #2097152	; 0x200000
   26604:	beq	26614 <grisu3_diy_fp_encode_double@@Base+0x22c>
   26608:	lsrs	r1, r1, #1
   2660c:	rrx	r0, r0
   26610:	add	r2, r2, #1
   26614:	mov	r3, r4
   26618:	bl	26854 <grisu3_diy_fp_encode_double@@Base+0x46c>
   2661c:	vstr	d0, [r8]
   26620:	cmp	r5, r7
   26624:	mov	r0, #0
   26628:	movwge	r0, #1
   2662c:	sub	r1, sl, r9
   26630:	cmp	r1, r5
   26634:	movwge	r4, #1
   26638:	orr	r0, r0, r4
   2663c:	sub	sp, fp, #28
   26640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26644:	movw	r0, #31996	; 0x7cfc
   26648:	movt	r0, #3
   2664c:	movw	r1, #32024	; 0x7d18
   26650:	movt	r1, #3
   26654:	movw	r3, #32111	; 0x7d6f
   26658:	movt	r3, #3
   2665c:	mov	r2, #185	; 0xb9
   26660:	bl	14f44 <__assert_fail@plt>
   26664:	push	{r4, sl, fp, lr}
   26668:	add	fp, sp, #8
   2666c:	orrs	r1, r2, r3
   26670:	beq	266e8 <grisu3_diy_fp_encode_double@@Base+0x300>
   26674:	ldr	ip, [fp, #12]
   26678:	ldr	r1, [fp, #8]
   2667c:	mov	r4, #0
   26680:	cmp	r4, r3, lsr #22
   26684:	bne	266a0 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   26688:	lsl	r3, r3, #10
   2668c:	orr	r3, r3, r2, lsr #22
   26690:	sub	r1, r1, #10
   26694:	lsl	r2, r2, #10
   26698:	cmp	r3, #4194304	; 0x400000
   2669c:	bcc	26688 <grisu3_diy_fp_encode_double@@Base+0x2a0>
   266a0:	cmp	r3, #0
   266a4:	blt	266d0 <grisu3_diy_fp_encode_double@@Base+0x2e8>
   266a8:	mvn	lr, #0
   266ac:	lsl	r3, r3, #1
   266b0:	orr	r3, r3, r2, lsr #31
   266b4:	sub	r1, r1, #1
   266b8:	lsl	r4, r2, #1
   266bc:	subs	r2, lr, r2, lsl #1
   266c0:	sbcs	r2, lr, r3
   266c4:	mov	r2, r4
   266c8:	blt	266ac <grisu3_diy_fp_encode_double@@Base+0x2c4>
   266cc:	b	266d4 <grisu3_diy_fp_encode_double@@Base+0x2ec>
   266d0:	mov	r4, r2
   266d4:	str	r4, [r0]
   266d8:	str	r3, [r0, #4]
   266dc:	str	r1, [r0, #8]
   266e0:	str	ip, [r0, #12]
   266e4:	pop	{r4, sl, fp, pc}
   266e8:	movw	r0, #33314	; 0x8222
   266ec:	movt	r0, #3
   266f0:	movw	r1, #33323	; 0x822b
   266f4:	movt	r1, #3
   266f8:	movw	r3, #33409	; 0x8281
   266fc:	movt	r3, #3
   26700:	mov	r2, #260	; 0x104
   26704:	bl	14f44 <__assert_fail@plt>
   26708:	push	{fp, lr}
   2670c:	mov	fp, sp
   26710:	cmn	r0, #348	; 0x15c
   26714:	blt	26790 <grisu3_diy_fp_encode_double@@Base+0x3a8>
   26718:	cmp	r0, #348	; 0x15c
   2671c:	bge	267b0 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   26720:	add	r2, r0, #348	; 0x15c
   26724:	asr	r3, r2, #31
   26728:	add	r2, r2, r3, lsr #29
   2672c:	mvn	r3, #15
   26730:	and	r2, r3, r2, lsl #1
   26734:	movw	r3, #29440	; 0x7300
   26738:	movt	r3, #3
   2673c:	ldr	r2, [r3, r2]!
   26740:	str	r2, [r1]
   26744:	ldr	r2, [r3, #4]
   26748:	str	r2, [r1, #4]
   2674c:	ldrsh	r2, [r3, #8]
   26750:	str	r2, [r1, #8]
   26754:	ldrsh	r1, [r3, #10]
   26758:	cmp	r1, r0
   2675c:	bgt	267d0 <grisu3_diy_fp_encode_double@@Base+0x3e8>
   26760:	add	r2, r1, #8
   26764:	cmp	r2, r0
   26768:	movgt	r0, r1
   2676c:	popgt	{fp, pc}
   26770:	movw	r0, #33612	; 0x834c
   26774:	movt	r0, #3
   26778:	movw	r1, #32024	; 0x7d18
   2677c:	movt	r1, #3
   26780:	movw	r3, #33497	; 0x82d9
   26784:	movt	r3, #3
   26788:	mov	r2, #89	; 0x59
   2678c:	bl	14f44 <__assert_fail@plt>
   26790:	movw	r0, #33466	; 0x82ba
   26794:	movt	r0, #3
   26798:	movw	r1, #32024	; 0x7d18
   2679c:	movt	r1, #3
   267a0:	movw	r3, #33497	; 0x82d9
   267a4:	movt	r3, #3
   267a8:	mov	r2, #80	; 0x50
   267ac:	bl	14f44 <__assert_fail@plt>
   267b0:	movw	r0, #33554	; 0x8312
   267b4:	movt	r0, #3
   267b8:	movw	r1, #32024	; 0x7d18
   267bc:	movt	r1, #3
   267c0:	movw	r3, #33497	; 0x82d9
   267c4:	movt	r3, #3
   267c8:	mov	r2, #81	; 0x51
   267cc:	bl	14f44 <__assert_fail@plt>
   267d0:	movw	r0, #33597	; 0x833d
   267d4:	movt	r0, #3
   267d8:	movw	r1, #32024	; 0x7d18
   267dc:	movt	r1, #3
   267e0:	movw	r3, #33497	; 0x82d9
   267e4:	movt	r3, #3
   267e8:	mov	r2, #88	; 0x58
   267ec:	bl	14f44 <__assert_fail@plt>
   267f0:	push	{r4, r5, fp, lr}
   267f4:	add	fp, sp, #8
   267f8:	ldr	ip, [fp, #24]
   267fc:	ldr	r1, [fp, #8]
   26800:	add	r1, r1, ip
   26804:	add	r1, r1, #64	; 0x40
   26808:	str	r1, [r0, #8]
   2680c:	ldr	ip, [fp, #16]
   26810:	umull	r1, lr, ip, r2
   26814:	umull	ip, r1, ip, r3
   26818:	mov	r5, #0
   2681c:	adds	lr, ip, lr
   26820:	adc	r5, r5, #0
   26824:	ldr	ip, [fp, #20]
   26828:	umull	r2, r4, ip, r2
   2682c:	adds	r2, lr, r2
   26830:	adc	r5, r5, #0
   26834:	adds	r2, r2, #-2147483648	; 0x80000000
   26838:	adc	r2, r5, #0
   2683c:	umaal	r1, r4, ip, r3
   26840:	adds	r1, r1, r2
   26844:	str	r1, [r0]
   26848:	adc	r1, r4, #0
   2684c:	str	r1, [r0, #4]
   26850:	pop	{r4, r5, fp, pc}
   26854:	push	{r4, r5, fp, lr}
   26858:	add	fp, sp, #8
   2685c:	cmp	r1, #2097152	; 0x200000
   26860:	bcc	26884 <grisu3_diy_fp_encode_double@@Base+0x49c>
   26864:	mov	r5, #0
   26868:	lsrs	r3, r1, #1
   2686c:	rrx	r0, r0
   26870:	add	r2, r2, #1
   26874:	cmp	r5, r1, lsr #22
   26878:	mov	r1, r3
   2687c:	bne	26868 <grisu3_diy_fp_encode_double@@Base+0x480>
   26880:	b	26888 <grisu3_diy_fp_encode_double@@Base+0x4a0>
   26884:	mov	r3, r1
   26888:	movw	ip, #64462	; 0xfbce
   2688c:	movt	ip, #65535	; 0xffff
   26890:	cmp	r2, ip
   26894:	bge	268a0 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   26898:	vmov.i32	d0, #0	; 0x00000000
   2689c:	pop	{r4, r5, fp, pc}
   268a0:	and	r1, r3, #1048576	; 0x100000
   268a4:	mov	r5, #1
   268a8:	eor	lr, r5, r1, lsr #20
   268ac:	cmp	r2, ip
   268b0:	beq	268f4 <grisu3_diy_fp_encode_double@@Base+0x50c>
   268b4:	cmp	r1, #0
   268b8:	bne	268f4 <grisu3_diy_fp_encode_double@@Base+0x50c>
   268bc:	mov	r5, #1
   268c0:	lsl	r1, r3, #1
   268c4:	orr	r1, r1, r0, lsr #31
   268c8:	and	r3, r3, #524288	; 0x80000
   268cc:	eor	lr, r5, r3, lsr #19
   268d0:	lsl	r0, r0, #1
   268d4:	sub	r4, r2, #1
   268d8:	cmn	r2, #1072	; 0x430
   268dc:	blt	268fc <grisu3_diy_fp_encode_double@@Base+0x514>
   268e0:	cmp	r3, #0
   268e4:	mov	r3, r1
   268e8:	mov	r2, r4
   268ec:	beq	268c0 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   268f0:	b	268fc <grisu3_diy_fp_encode_double@@Base+0x514>
   268f4:	mov	r4, r2
   268f8:	mov	r1, r3
   268fc:	cmp	r4, ip
   26900:	bne	26914 <grisu3_diy_fp_encode_double@@Base+0x52c>
   26904:	mov	r2, #0
   26908:	cmp	lr, #0
   2690c:	mov	r3, #0
   26910:	bne	26924 <grisu3_diy_fp_encode_double@@Base+0x53c>
   26914:	movw	r2, #0
   26918:	movt	r2, #17200	; 0x4330
   2691c:	add	r3, r2, r4, lsl #20
   26920:	mov	r2, #0
   26924:	orr	r0, r2, r0
   26928:	bfc	r1, #20, #12
   2692c:	orr	r1, r3, r1
   26930:	pop	{r4, r5, fp, lr}
   26934:	b	28ef8 <flatcc_json_parser_struct_as_root@@Base+0xb4>

00026938 <flatcc_json_parser_error_string@@Base>:
   26938:	cmp	r0, #34	; 0x22
   2693c:	movwhi	r0, #29146	; 0x71da
   26940:	movthi	r0, #3
   26944:	bxhi	lr
   26948:	movw	r1, #31856	; 0x7c70
   2694c:	movt	r1, #3
   26950:	ldr	r0, [r1, r0, lsl #2]
   26954:	bx	lr

00026958 <flatcc_json_parser_set_error@@Base>:
   26958:	mov	ip, r2
   2695c:	ldr	r2, [r0, #24]
   26960:	cmp	r2, #0
   26964:	beq	26970 <flatcc_json_parser_set_error@@Base+0x18>
   26968:	mov	r0, ip
   2696c:	bx	lr
   26970:	str	r1, [r0, #36]	; 0x24
   26974:	ldr	r2, [r0, #4]
   26978:	add	r1, r1, #1
   2697c:	sub	r1, r1, r2
   26980:	str	r1, [r0, #20]
   26984:	str	r3, [r0, #24]
   26988:	mov	r0, ip
   2698c:	bx	lr

00026990 <flatcc_json_parser_string_part@@Base>:
   26990:	cmp	r1, r2
   26994:	beq	269bc <flatcc_json_parser_string_part@@Base+0x2c>
   26998:	ldrb	r3, [r1]
   2699c:	cmp	r3, #32
   269a0:	bcc	269cc <flatcc_json_parser_string_part@@Base+0x3c>
   269a4:	cmp	r3, #34	; 0x22
   269a8:	cmpne	r3, #92	; 0x5c
   269ac:	beq	269c4 <flatcc_json_parser_string_part@@Base+0x34>
   269b0:	add	r1, r1, #1
   269b4:	cmp	r2, r1
   269b8:	bne	26998 <flatcc_json_parser_string_part@@Base+0x8>
   269bc:	mov	r3, #20
   269c0:	b	26958 <flatcc_json_parser_set_error@@Base>
   269c4:	mov	r0, r1
   269c8:	bx	lr
   269cc:	mov	r3, #17
   269d0:	b	26958 <flatcc_json_parser_set_error@@Base>

000269d4 <flatcc_json_parser_space_ext@@Base>:
   269d4:	cmp	r1, r2
   269d8:	beq	26a0c <flatcc_json_parser_space_ext@@Base+0x38>
   269dc:	ldrb	r3, [r1]
   269e0:	cmp	r3, #32
   269e4:	bne	26a0c <flatcc_json_parser_space_ext@@Base+0x38>
   269e8:	add	r1, r1, #1
   269ec:	cmp	r2, r1
   269f0:	bne	269dc <flatcc_json_parser_space_ext@@Base+0x8>
   269f4:	b	26a0c <flatcc_json_parser_space_ext@@Base+0x38>
   269f8:	add	r1, r1, #1
   269fc:	str	r1, [r0, #4]
   26a00:	ldr	r3, [r0, #16]
   26a04:	add	r3, r3, #1
   26a08:	str	r3, [r0, #16]
   26a0c:	cmp	r1, r2
   26a10:	beq	26ac8 <flatcc_json_parser_space_ext@@Base+0xf4>
   26a14:	ldrb	r3, [r1]
   26a18:	cmp	r3, #32
   26a1c:	bhi	26ac8 <flatcc_json_parser_space_ext@@Base+0xf4>
   26a20:	sub	ip, r3, #9
   26a24:	cmp	ip, #23
   26a28:	bhi	26ad0 <flatcc_json_parser_space_ext@@Base+0xfc>
   26a2c:	add	r3, pc, #0
   26a30:	ldr	pc, [r3, ip, lsl #2]
   26a34:	muleq	r2, r4, sl
   26a38:	strdeq	r6, [r2], -r8
   26a3c:	ldrdeq	r6, [r2], -r0
   26a40:	ldrdeq	r6, [r2], -r0
   26a44:	andeq	r6, r2, r4, lsr #21
   26a48:	ldrdeq	r6, [r2], -r0
   26a4c:	ldrdeq	r6, [r2], -r0
   26a50:	ldrdeq	r6, [r2], -r0
   26a54:	ldrdeq	r6, [r2], -r0
   26a58:	ldrdeq	r6, [r2], -r0
   26a5c:	ldrdeq	r6, [r2], -r0
   26a60:	ldrdeq	r6, [r2], -r0
   26a64:	ldrdeq	r6, [r2], -r0
   26a68:	ldrdeq	r6, [r2], -r0
   26a6c:	ldrdeq	r6, [r2], -r0
   26a70:	ldrdeq	r6, [r2], -r0
   26a74:	ldrdeq	r6, [r2], -r0
   26a78:	ldrdeq	r6, [r2], -r0
   26a7c:	ldrdeq	r6, [r2], -r0
   26a80:	ldrdeq	r6, [r2], -r0
   26a84:	ldrdeq	r6, [r2], -r0
   26a88:	ldrdeq	r6, [r2], -r0
   26a8c:	ldrdeq	r6, [r2], -r0
   26a90:	ldrdeq	r6, [r2], -r4
   26a94:	add	r1, r1, #1
   26a98:	cmp	r1, r2
   26a9c:	bne	26a14 <flatcc_json_parser_space_ext@@Base+0x40>
   26aa0:	b	26ac8 <flatcc_json_parser_space_ext@@Base+0xf4>
   26aa4:	sub	r3, r2, r1
   26aa8:	mov	ip, #0
   26aac:	cmp	r3, #2
   26ab0:	ldrbge	r3, [r1, #1]
   26ab4:	subge	r3, r3, #10
   26ab8:	clzge	r3, r3
   26abc:	lsrge	ip, r3, #5
   26ac0:	add	r1, r1, ip
   26ac4:	b	269f8 <flatcc_json_parser_space_ext@@Base+0x24>
   26ac8:	mov	r0, r1
   26acc:	bx	lr
   26ad0:	mov	r3, #5
   26ad4:	b	26958 <flatcc_json_parser_set_error@@Base>

00026ad8 <flatcc_json_parser_string_escape@@Base>:
   26ad8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26adc:	add	fp, sp, #24
   26ae0:	sub	r7, r2, r1
   26ae4:	cmp	r7, #2
   26ae8:	blt	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26aec:	ldrb	r6, [r1]
   26af0:	cmp	r6, #92	; 0x5c
   26af4:	bne	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26af8:	ldrb	r6, [r1, #1]
   26afc:	sub	r6, r6, #34	; 0x22
   26b00:	cmp	r6, #86	; 0x56
   26b04:	bhi	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26b08:	add	r5, pc, #0
   26b0c:	ldr	pc, [r5, r6, lsl #2]
   26b10:	andeq	r6, r2, ip, ror #24
   26b14:	andeq	r6, r2, r8, ror #25
   26b18:	andeq	r6, r2, r8, ror #25
   26b1c:	andeq	r6, r2, r8, ror #25
   26b20:	andeq	r6, r2, r8, ror #25
   26b24:	andeq	r6, r2, r8, ror #25
   26b28:	andeq	r6, r2, r8, ror #25
   26b2c:	andeq	r6, r2, r8, ror #25
   26b30:	andeq	r6, r2, r8, ror #25
   26b34:	andeq	r6, r2, r8, ror #25
   26b38:	andeq	r6, r2, r8, ror #25
   26b3c:	andeq	r6, r2, r8, ror #25
   26b40:	andeq	r6, r2, r8, ror #25
   26b44:	andeq	r6, r2, r4, ror ip
   26b48:	andeq	r6, r2, r8, ror #25
   26b4c:	andeq	r6, r2, r8, ror #25
   26b50:	andeq	r6, r2, r8, ror #25
   26b54:	andeq	r6, r2, r8, ror #25
   26b58:	andeq	r6, r2, r8, ror #25
   26b5c:	andeq	r6, r2, r8, ror #25
   26b60:	andeq	r6, r2, r8, ror #25
   26b64:	andeq	r6, r2, r8, ror #25
   26b68:	andeq	r6, r2, r8, ror #25
   26b6c:	andeq	r6, r2, r8, ror #25
   26b70:	andeq	r6, r2, r8, ror #25
   26b74:	andeq	r6, r2, r8, ror #25
   26b78:	andeq	r6, r2, r8, ror #25
   26b7c:	andeq	r6, r2, r8, ror #25
   26b80:	andeq	r6, r2, r8, ror #25
   26b84:	andeq	r6, r2, r8, ror #25
   26b88:	andeq	r6, r2, r8, ror #25
   26b8c:	andeq	r6, r2, r8, ror #25
   26b90:	andeq	r6, r2, r8, ror #25
   26b94:	andeq	r6, r2, r8, ror #25
   26b98:	andeq	r6, r2, r8, ror #25
   26b9c:	andeq	r6, r2, r8, ror #25
   26ba0:	andeq	r6, r2, r8, ror #25
   26ba4:	andeq	r6, r2, r8, ror #25
   26ba8:	andeq	r6, r2, r8, ror #25
   26bac:	andeq	r6, r2, r8, ror #25
   26bb0:	andeq	r6, r2, r8, ror #25
   26bb4:	andeq	r6, r2, r8, ror #25
   26bb8:	andeq	r6, r2, r8, ror #25
   26bbc:	andeq	r6, r2, r8, ror #25
   26bc0:	andeq	r6, r2, r8, ror #25
   26bc4:	andeq	r6, r2, r8, ror #25
   26bc8:	andeq	r6, r2, r8, ror #25
   26bcc:	andeq	r6, r2, r8, ror #25
   26bd0:	andeq	r6, r2, r8, ror #25
   26bd4:	andeq	r6, r2, r8, ror #25
   26bd8:	andeq	r6, r2, r8, ror #25
   26bdc:	andeq	r6, r2, r8, ror #25
   26be0:	andeq	r6, r2, r8, ror #25
   26be4:	andeq	r6, r2, r8, ror #25
   26be8:	andeq	r6, r2, r8, ror #25
   26bec:	andeq	r6, r2, r8, ror #25
   26bf0:	andeq	r6, r2, r8, ror #25
   26bf4:	andeq	r6, r2, r8, ror #25
   26bf8:	andeq	r6, r2, ip, ror ip
   26bfc:	andeq	r6, r2, r8, ror #25
   26c00:	andeq	r6, r2, r8, ror #25
   26c04:	andeq	r6, r2, r8, ror #25
   26c08:	andeq	r6, r2, r8, ror #25
   26c0c:	andeq	r6, r2, r8, ror #25
   26c10:	andeq	r6, r2, r4, lsl #25
   26c14:	andeq	r6, r2, r8, ror #25
   26c18:	andeq	r6, r2, r8, ror #25
   26c1c:	andeq	r6, r2, r8, ror #25
   26c20:	andeq	r6, r2, ip, lsl #25
   26c24:	andeq	r6, r2, r8, ror #25
   26c28:	andeq	r6, r2, r8, ror #25
   26c2c:	andeq	r6, r2, r8, ror #25
   26c30:	andeq	r6, r2, r8, ror #25
   26c34:	andeq	r6, r2, r8, ror #25
   26c38:	andeq	r6, r2, r8, ror #25
   26c3c:	andeq	r6, r2, r8, ror #25
   26c40:	muleq	r2, r4, ip
   26c44:	andeq	r6, r2, r8, ror #25
   26c48:	andeq	r6, r2, r8, ror #25
   26c4c:	andeq	r6, r2, r8, ror #25
   26c50:	muleq	r2, ip, ip
   26c54:	andeq	r6, r2, r8, ror #25
   26c58:	andeq	r6, r2, r4, lsr #25
   26c5c:			; <UNDEFINED> instruction: 0x00026cb4
   26c60:	andeq	r6, r2, r8, ror #25
   26c64:	andeq	r6, r2, r8, ror #25
   26c68:	ldrdeq	r6, [r2], -r8
   26c6c:	movw	r0, #8705	; 0x2201
   26c70:	b	26ca8 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26c74:	movw	r0, #12033	; 0x2f01
   26c78:	b	26ca8 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26c7c:	movw	r0, #23553	; 0x5c01
   26c80:	b	26ca8 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26c84:	movw	r0, #2049	; 0x801
   26c88:	b	26ca8 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26c8c:	movw	r0, #3073	; 0xc01
   26c90:	b	26ca8 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26c94:	movw	r0, #2561	; 0xa01
   26c98:	b	26ca8 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26c9c:	movw	r0, #3329	; 0xd01
   26ca0:	b	26ca8 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26ca4:	movw	r0, #2305	; 0x901
   26ca8:	strh	r0, [r3]
   26cac:	add	r0, r1, #2
   26cb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26cb4:	cmp	r7, #5
   26cb8:	ble	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26cbc:	ldrb	r7, [r1, #2]
   26cc0:	sub	r6, r7, #48	; 0x30
   26cc4:	uxtb	r6, r6
   26cc8:	cmp	r6, #9
   26ccc:	bhi	26d18 <flatcc_json_parser_string_escape@@Base+0x240>
   26cd0:	lsl	ip, r7, #12
   26cd4:	b	26d38 <flatcc_json_parser_string_escape@@Base+0x260>
   26cd8:	mov	r6, #1
   26cdc:	strb	r6, [r3]
   26ce0:	cmp	r7, #3
   26ce4:	bgt	26cfc <flatcc_json_parser_string_escape@@Base+0x224>
   26ce8:	mov	r7, #0
   26cec:	strb	r7, [r3]
   26cf0:	mov	r3, #18
   26cf4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   26cf8:	b	26958 <flatcc_json_parser_set_error@@Base>
   26cfc:	ldrb	r7, [r1, #2]
   26d00:	sub	r6, r7, #48	; 0x30
   26d04:	uxtb	r6, r6
   26d08:	cmp	r6, #9
   26d0c:	bhi	26d54 <flatcc_json_parser_string_escape@@Base+0x27c>
   26d10:	lsl	r6, r7, #4
   26d14:	b	26d70 <flatcc_json_parser_string_escape@@Base+0x298>
   26d18:	orr	r6, r7, #32
   26d1c:	sub	r6, r6, #97	; 0x61
   26d20:	uxtb	r6, r6
   26d24:	cmp	r6, #5
   26d28:	bhi	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26d2c:	movw	r6, #36864	; 0x9000
   26d30:	movt	r6, #65535	; 0xffff
   26d34:	add	ip, r6, r7, lsl #12
   26d38:	ldrb	lr, [r1, #3]
   26d3c:	sub	r4, lr, #48	; 0x30
   26d40:	uxtb	r4, r4
   26d44:	cmp	r4, #10
   26d48:	bcs	26dac <flatcc_json_parser_string_escape@@Base+0x2d4>
   26d4c:	mov	r8, #53248	; 0xd000
   26d50:	b	26dc4 <flatcc_json_parser_string_escape@@Base+0x2ec>
   26d54:	orr	r6, r7, #32
   26d58:	sub	r6, r6, #97	; 0x61
   26d5c:	uxtb	r6, r6
   26d60:	cmp	r6, #5
   26d64:	bhi	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26d68:	mvn	r6, #111	; 0x6f
   26d6c:	add	r6, r6, r7, lsl #4
   26d70:	ldrb	r5, [r1, #3]
   26d74:	sub	r7, r5, #48	; 0x30
   26d78:	uxtb	r4, r7
   26d7c:	cmp	r4, #9
   26d80:	bls	26d9c <flatcc_json_parser_string_escape@@Base+0x2c4>
   26d84:	orr	r7, r5, #32
   26d88:	sub	r5, r7, #97	; 0x61
   26d8c:	uxtb	r5, r5
   26d90:	cmp	r5, #5
   26d94:	bhi	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26d98:	sub	r7, r7, #87	; 0x57
   26d9c:	orr	r0, r7, r6
   26da0:	strb	r0, [r3, #1]
   26da4:	add	r0, r1, #4
   26da8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26dac:	orr	lr, lr, #32
   26db0:	sub	r4, lr, #97	; 0x61
   26db4:	uxtb	r4, r4
   26db8:	mov	r8, #43264	; 0xa900
   26dbc:	cmp	r4, #6
   26dc0:	bcs	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26dc4:	ldrb	r5, [r1, #4]
   26dc8:	sub	r4, r5, #48	; 0x30
   26dcc:	uxtb	r4, r4
   26dd0:	cmp	r4, #10
   26dd4:	bcs	26de0 <flatcc_json_parser_string_escape@@Base+0x308>
   26dd8:	mov	r9, #64768	; 0xfd00
   26ddc:	b	26df8 <flatcc_json_parser_string_escape@@Base+0x320>
   26de0:	orr	r5, r5, #32
   26de4:	sub	r4, r5, #97	; 0x61
   26de8:	uxtb	r4, r4
   26dec:	movw	r9, #64144	; 0xfa90
   26df0:	cmp	r4, #6
   26df4:	bcs	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26df8:	ldrb	r7, [r1, #5]
   26dfc:	sub	r4, r7, #48	; 0x30
   26e00:	uxtb	r4, r4
   26e04:	cmp	r4, #10
   26e08:	bcs	26e18 <flatcc_json_parser_string_escape@@Base+0x340>
   26e0c:	mvn	r0, #86	; 0x56
   26e10:	add	r4, r0, #39	; 0x27
   26e14:	b	26e30 <flatcc_json_parser_string_escape@@Base+0x358>
   26e18:	movw	r4, #65449	; 0xffa9
   26e1c:	orr	r7, r7, #32
   26e20:	sub	r6, r7, #97	; 0x61
   26e24:	uxtb	r6, r6
   26e28:	cmp	r6, #6
   26e2c:	bcs	26ce8 <flatcc_json_parser_string_escape@@Base+0x210>
   26e30:	add	r0, r8, lr, lsl #8
   26e34:	orr	r0, r0, ip
   26e38:	add	r2, r9, r5, lsl #4
   26e3c:	orr	r0, r0, r2
   26e40:	add	r2, r4, r7
   26e44:	orr	r0, r0, r2
   26e48:	uxth	r7, r0
   26e4c:	cmp	r7, #127	; 0x7f
   26e50:	bhi	26e60 <flatcc_json_parser_string_escape@@Base+0x388>
   26e54:	mov	r2, #1
   26e58:	strb	r2, [r3]
   26e5c:	b	26eb4 <flatcc_json_parser_string_escape@@Base+0x3dc>
   26e60:	and	r2, r0, #63488	; 0xf800
   26e64:	mov	r6, #0
   26e68:	cmp	r6, r2, lsr #11
   26e6c:	bne	26e88 <flatcc_json_parser_string_escape@@Base+0x3b0>
   26e70:	mov	r2, #2
   26e74:	strb	r2, [r3]
   26e78:	mov	r7, #192	; 0xc0
   26e7c:	orr	r7, r7, r0, lsr #6
   26e80:	strb	r7, [r3, #1]
   26e84:	b	26eac <flatcc_json_parser_string_escape@@Base+0x3d4>
   26e88:	mov	r2, #3
   26e8c:	strb	r2, [r3]
   26e90:	mov	r6, #224	; 0xe0
   26e94:	orr	r6, r6, r7, lsr #12
   26e98:	strb	r6, [r3, #1]
   26e9c:	lsr	r7, r7, #6
   26ea0:	mov	r6, #2
   26ea4:	bfi	r7, r6, #6, #26
   26ea8:	strb	r7, [r3, #2]
   26eac:	mvn	r7, #-67108863	; 0xfc000001
   26eb0:	bfi	r0, r7, #6, #26
   26eb4:	strb	r0, [r3, r2]
   26eb8:	add	r0, r1, #6
   26ebc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00026ec0 <flatcc_json_parser_skip_constant@@Base>:
   26ec0:	push	{r4, r5, r6, sl, fp, lr}
   26ec4:	add	fp, sp, #16
   26ec8:	mov	r4, r1
   26ecc:	cmp	r1, r2
   26ed0:	beq	26f44 <flatcc_json_parser_skip_constant@@Base+0x84>
   26ed4:	mov	r5, r2
   26ed8:	mov	r6, r0
   26edc:	ldrsb	r0, [r4]
   26ee0:	cmp	r0, #0
   26ee4:	blt	26ef4 <flatcc_json_parser_skip_constant@@Base+0x34>
   26ee8:	cmp	r0, #95	; 0x5f
   26eec:	cmpne	r0, #46	; 0x2e
   26ef0:	bne	26f04 <flatcc_json_parser_skip_constant@@Base+0x44>
   26ef4:	add	r4, r4, #1
   26ef8:	cmp	r4, r5
   26efc:	bne	26edc <flatcc_json_parser_skip_constant@@Base+0x1c>
   26f00:	b	26f44 <flatcc_json_parser_skip_constant@@Base+0x84>
   26f04:	sub	r1, r0, #48	; 0x30
   26f08:	uxtb	r1, r1
   26f0c:	cmp	r1, #9
   26f10:	bls	26ef4 <flatcc_json_parser_skip_constant@@Base+0x34>
   26f14:	orr	r0, r0, #32
   26f18:	sub	r0, r0, #97	; 0x61
   26f1c:	uxtb	r0, r0
   26f20:	cmp	r0, #25
   26f24:	bls	26ef4 <flatcc_json_parser_skip_constant@@Base+0x34>
   26f28:	mov	r0, r6
   26f2c:	mov	r1, r4
   26f30:	mov	r2, r5
   26f34:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   26f38:	cmp	r0, r4
   26f3c:	mov	r4, r0
   26f40:	bne	26ef8 <flatcc_json_parser_skip_constant@@Base+0x38>
   26f44:	mov	r0, r4
   26f48:	pop	{r4, r5, r6, sl, fp, pc}
   26f4c:	sub	r3, r2, r1
   26f50:	cmp	r3, #2
   26f54:	blt	26f80 <flatcc_json_parser_skip_constant@@Base+0xc0>
   26f58:	ldrb	r3, [r1]
   26f5c:	cmp	r3, #32
   26f60:	movhi	r0, r1
   26f64:	bxhi	lr
   26f68:	bne	26f80 <flatcc_json_parser_skip_constant@@Base+0xc0>
   26f6c:	mov	ip, r1
   26f70:	ldrb	r3, [ip, #1]!
   26f74:	cmp	r3, #32
   26f78:	movhi	r0, ip
   26f7c:	bxhi	lr
   26f80:	b	269d4 <flatcc_json_parser_space_ext@@Base>

00026f84 <flatcc_json_parser_match_constant@@Base>:
   26f84:	push	{r4, r5, r6, r7, fp, lr}
   26f88:	add	fp, sp, #16
   26f8c:	mov	r5, r2
   26f90:	mov	r4, r1
   26f94:	mov	r2, r0
   26f98:	sub	r0, r5, r1
   26f9c:	ldr	r7, [fp, #8]
   26fa0:	cmp	r0, r3
   26fa4:	ble	27084 <flatcc_json_parser_match_constant@@Base+0x100>
   26fa8:	add	r6, r4, r3
   26fac:	ldr	r0, [r2, #12]
   26fb0:	cmp	r0, #0
   26fb4:	beq	2701c <flatcc_json_parser_match_constant@@Base+0x98>
   26fb8:	mov	r0, r2
   26fbc:	mov	r1, r6
   26fc0:	mov	r2, r5
   26fc4:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   26fc8:	cmp	r0, r5
   26fcc:	beq	27094 <flatcc_json_parser_match_constant@@Base+0x110>
   26fd0:	cmp	r0, r6
   26fd4:	beq	27000 <flatcc_json_parser_match_constant@@Base+0x7c>
   26fd8:	ldrsb	r1, [r0]
   26fdc:	cmp	r1, #95	; 0x5f
   26fe0:	beq	270a0 <flatcc_json_parser_match_constant@@Base+0x11c>
   26fe4:	cmn	r1, #1
   26fe8:	ble	270a0 <flatcc_json_parser_match_constant@@Base+0x11c>
   26fec:	orr	r1, r1, #32
   26ff0:	sub	r1, r1, #97	; 0x61
   26ff4:	uxtb	r1, r1
   26ff8:	cmp	r1, #25
   26ffc:	bls	270a0 <flatcc_json_parser_match_constant@@Base+0x11c>
   27000:	mov	r1, #0
   27004:	str	r1, [r7]
   27008:	ldrb	r1, [r0]
   2700c:	cmp	r1, #44	; 0x2c
   27010:	cmpne	r1, #93	; 0x5d
   27014:	bne	270cc <flatcc_json_parser_match_constant@@Base+0x148>
   27018:	pop	{r4, r5, r6, r7, fp, pc}
   2701c:	ldrb	r0, [r6]
   27020:	cmp	r0, #92	; 0x5c
   27024:	beq	270ac <flatcc_json_parser_match_constant@@Base+0x128>
   27028:	cmp	r0, #34	; 0x22
   2702c:	beq	27068 <flatcc_json_parser_match_constant@@Base+0xe4>
   27030:	cmp	r0, #32
   27034:	bne	27084 <flatcc_json_parser_match_constant@@Base+0x100>
   27038:	add	r0, r4, r3
   2703c:	add	r6, r0, #1
   27040:	mov	r0, r6
   27044:	cmp	r5, r6
   27048:	beq	27094 <flatcc_json_parser_match_constant@@Base+0x110>
   2704c:	mov	r6, r0
   27050:	ldrb	r1, [r6], #1
   27054:	cmp	r1, #32
   27058:	beq	27040 <flatcc_json_parser_match_constant@@Base+0xbc>
   2705c:	ldrb	r1, [r6, #-1]!
   27060:	cmp	r1, #34	; 0x22
   27064:	bne	270a0 <flatcc_json_parser_match_constant@@Base+0x11c>
   27068:	add	r1, r6, #1
   2706c:	mov	r4, #0
   27070:	mov	r0, r2
   27074:	mov	r2, #0
   27078:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   2707c:	str	r4, [r7]
   27080:	pop	{r4, r5, r6, r7, fp, pc}
   27084:	mov	r0, #0
   27088:	str	r0, [r7]
   2708c:	mov	r0, r4
   27090:	pop	{r4, r5, r6, r7, fp, pc}
   27094:	mov	r1, #0
   27098:	str	r1, [r7]
   2709c:	pop	{r4, r5, r6, r7, fp, pc}
   270a0:	mov	r1, #1
   270a4:	str	r1, [r7]
   270a8:	pop	{r4, r5, r6, r7, fp, pc}
   270ac:	mov	r0, #0
   270b0:	str	r0, [r7]
   270b4:	mov	r0, r2
   270b8:	mov	r1, r6
   270bc:	mov	r2, r5
   270c0:	mov	r3, #18
   270c4:	pop	{r4, r5, r6, r7, fp, lr}
   270c8:	b	26958 <flatcc_json_parser_set_error@@Base>
   270cc:	cmp	r1, #125	; 0x7d
   270d0:	movne	r0, r4
   270d4:	pop	{r4, r5, r6, r7, fp, pc}

000270d8 <flatcc_json_parser_unmatched_symbol@@Base>:
   270d8:	push	{r4, r5, fp, lr}
   270dc:	add	fp, sp, #8
   270e0:	mov	r4, r2
   270e4:	mov	r5, r0
   270e8:	ldrb	r0, [r0, #8]
   270ec:	tst	r0, #1
   270f0:	bne	27108 <flatcc_json_parser_unmatched_symbol@@Base+0x30>
   270f4:	mov	r0, r5
   270f8:	mov	r2, r4
   270fc:	mov	r3, #13
   27100:	pop	{r4, r5, fp, lr}
   27104:	b	26958 <flatcc_json_parser_set_error@@Base>
   27108:	mov	r0, r5
   2710c:	mov	r2, r4
   27110:	bl	27174 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   27114:	mov	r1, r0
   27118:	mov	r0, r5
   2711c:	mov	r2, r4
   27120:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   27124:	mov	r1, r0
   27128:	cmp	r0, r4
   2712c:	beq	27160 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   27130:	ldrb	r0, [r1]
   27134:	cmp	r0, #58	; 0x3a
   27138:	bne	27160 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   2713c:	add	r1, r1, #1
   27140:	mov	r0, r5
   27144:	mov	r2, r4
   27148:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   2714c:	mov	r1, r0
   27150:	mov	r0, r5
   27154:	mov	r2, r4
   27158:	pop	{r4, r5, fp, lr}
   2715c:	b	2727c <flatcc_json_parser_generic_json@@Base>
   27160:	mov	r0, r5
   27164:	mov	r2, r4
   27168:	mov	r3, #4
   2716c:	pop	{r4, r5, fp, lr}
   27170:	b	26958 <flatcc_json_parser_set_error@@Base>
   27174:	ldr	r3, [r0, #12]
   27178:	cmp	r3, #0
   2717c:	beq	27228 <flatcc_json_parser_unmatched_symbol@@Base+0x150>
   27180:	cmp	r1, r2
   27184:	beq	2726c <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   27188:	push	{fp, lr}
   2718c:	mov	fp, sp
   27190:	ldrb	lr, [r1]
   27194:	mov	ip, #0
   27198:	cmp	lr, #33	; 0x21
   2719c:	bcc	2720c <flatcc_json_parser_unmatched_symbol@@Base+0x134>
   271a0:	add	r3, r1, #1
   271a4:	mov	ip, lr
   271a8:	mov	r1, r3
   271ac:	uxtb	r3, lr
   271b0:	cmp	r3, #46	; 0x2e
   271b4:	cmpne	r3, #95	; 0x5f
   271b8:	bne	271d8 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   271bc:	cmp	r2, r1
   271c0:	beq	2720c <flatcc_json_parser_unmatched_symbol@@Base+0x134>
   271c4:	mov	r3, r1
   271c8:	ldrb	lr, [r3], #1
   271cc:	cmp	lr, #33	; 0x21
   271d0:	bcs	271a4 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   271d4:	b	2720c <flatcc_json_parser_unmatched_symbol@@Base+0x134>
   271d8:	sxtb	r3, ip
   271dc:	cmp	r3, #0
   271e0:	blt	271bc <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   271e4:	sub	r3, ip, #48	; 0x30
   271e8:	uxtb	r3, r3
   271ec:	cmp	r3, #9
   271f0:	bls	271bc <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   271f4:	orr	r3, ip, #32
   271f8:	sub	r3, r3, #97	; 0x61
   271fc:	uxtb	r3, r3
   27200:	cmp	r3, #26
   27204:	bcc	271bc <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   27208:	sub	r1, r1, #1
   2720c:	uxtb	r3, ip
   27210:	cmp	r3, #46	; 0x2e
   27214:	pop	{fp, lr}
   27218:	bne	2726c <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   2721c:	mov	r3, #5
   27220:	b	26958 <flatcc_json_parser_set_error@@Base>
   27224:	add	r1, r1, #1
   27228:	cmp	r1, r2
   2722c:	beq	27274 <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   27230:	ldrb	r3, [r1]
   27234:	cmp	r3, #92	; 0x5c
   27238:	beq	27248 <flatcc_json_parser_unmatched_symbol@@Base+0x170>
   2723c:	cmp	r3, #34	; 0x22
   27240:	bne	27224 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   27244:	b	27268 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   27248:	sub	r3, r2, r1
   2724c:	cmp	r3, #2
   27250:	blt	2725c <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   27254:	add	r1, r1, #1
   27258:	b	27224 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   2725c:	ldrb	r3, [r1]
   27260:	cmp	r3, #34	; 0x22
   27264:	bne	27274 <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   27268:	add	r1, r1, #1
   2726c:	mov	r0, r1
   27270:	bx	lr
   27274:	mov	r3, #20
   27278:	b	26958 <flatcc_json_parser_set_error@@Base>

0002727c <flatcc_json_parser_generic_json@@Base>:
   2727c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27280:	add	fp, sp, #28
   27284:	sub	sp, sp, #524	; 0x20c
   27288:	mov	r7, r1
   2728c:	mov	r6, #0
   27290:	str	r6, [sp]
   27294:	cmp	r1, r2
   27298:	beq	27540 <flatcc_json_parser_generic_json@@Base+0x2c4>
   2729c:	mov	r4, r2
   272a0:	mov	r5, r0
   272a4:	add	sl, sp, #8
   272a8:	sub	r8, sl, #1
   272ac:	mov	r9, sp
   272b0:	mov	r0, sl
   272b4:	cmp	r6, #0
   272b8:	beq	27324 <flatcc_json_parser_generic_json@@Base+0xa8>
   272bc:	ldrb	r0, [r0, #-1]
   272c0:	cmp	r0, #125	; 0x7d
   272c4:	bne	27324 <flatcc_json_parser_generic_json@@Base+0xa8>
   272c8:	mov	r0, r5
   272cc:	mov	r1, r7
   272d0:	mov	r2, r4
   272d4:	bl	277a8 <flatcc_json_parser_float@@Base+0x140>
   272d8:	mov	r1, r0
   272dc:	mov	r0, r5
   272e0:	mov	r2, r4
   272e4:	bl	27174 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   272e8:	mov	r1, r0
   272ec:	mov	r0, r5
   272f0:	mov	r2, r4
   272f4:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   272f8:	mov	r1, r0
   272fc:	cmp	r0, r4
   27300:	beq	2754c <flatcc_json_parser_generic_json@@Base+0x2d0>
   27304:	ldrb	r0, [r1]
   27308:	cmp	r0, #58	; 0x3a
   2730c:	bne	2755c <flatcc_json_parser_generic_json@@Base+0x2e0>
   27310:	add	r1, r1, #1
   27314:	mov	r0, r5
   27318:	mov	r2, r4
   2731c:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   27320:	mov	r7, r0
   27324:	ldrb	r0, [r7]
   27328:	sub	r1, r0, #48	; 0x30
   2732c:	cmp	r1, #10
   27330:	bcs	273a8 <flatcc_json_parser_generic_json@@Base+0x12c>
   27334:	mov	r0, r5
   27338:	mov	r1, r7
   2733c:	mov	r2, r4
   27340:	bl	27830 <flatcc_json_parser_float@@Base+0x1c8>
   27344:	mov	r7, r0
   27348:	cmp	r6, #0
   2734c:	cmpne	r7, r4
   27350:	beq	27504 <flatcc_json_parser_generic_json@@Base+0x288>
   27354:	ldrb	r0, [r8, r6]
   27358:	cmp	r0, #93	; 0x5d
   2735c:	bne	27378 <flatcc_json_parser_generic_json@@Base+0xfc>
   27360:	mov	r0, r5
   27364:	mov	r1, r7
   27368:	mov	r2, r4
   2736c:	mov	r3, r9
   27370:	bl	27a94 <flatcc_json_parser_float@@Base+0x42c>
   27374:	b	2738c <flatcc_json_parser_generic_json@@Base+0x110>
   27378:	mov	r0, r5
   2737c:	mov	r1, r7
   27380:	mov	r2, r4
   27384:	mov	r3, r9
   27388:	bl	27b54 <flatcc_json_parser_float@@Base+0x4ec>
   2738c:	mov	r7, r0
   27390:	sub	r6, r6, #1
   27394:	ldr	r0, [sp]
   27398:	cmp	r0, #0
   2739c:	beq	27348 <flatcc_json_parser_generic_json@@Base+0xcc>
   273a0:	add	r6, r6, #1
   273a4:	b	274d0 <flatcc_json_parser_generic_json@@Base+0x254>
   273a8:	cmp	r0, #90	; 0x5a
   273ac:	bgt	273c4 <flatcc_json_parser_generic_json@@Base+0x148>
   273b0:	cmp	r0, #34	; 0x22
   273b4:	beq	27414 <flatcc_json_parser_generic_json@@Base+0x198>
   273b8:	cmp	r0, #45	; 0x2d
   273bc:	beq	27334 <flatcc_json_parser_generic_json@@Base+0xb8>
   273c0:	b	274e0 <flatcc_json_parser_generic_json@@Base+0x264>
   273c4:	cmp	r0, #91	; 0x5b
   273c8:	beq	27494 <flatcc_json_parser_generic_json@@Base+0x218>
   273cc:	cmp	r0, #123	; 0x7b
   273d0:	bne	274e0 <flatcc_json_parser_generic_json@@Base+0x264>
   273d4:	cmp	r6, #512	; 0x200
   273d8:	beq	2756c <flatcc_json_parser_generic_json@@Base+0x2f0>
   273dc:	mov	r0, #125	; 0x7d
   273e0:	strb	r0, [sl, r6]
   273e4:	add	r1, r7, #1
   273e8:	mov	r0, r5
   273ec:	mov	r2, r4
   273f0:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   273f4:	mov	r7, r0
   273f8:	add	r6, r6, #1
   273fc:	cmp	r0, r4
   27400:	beq	274d0 <flatcc_json_parser_generic_json@@Base+0x254>
   27404:	ldrb	r0, [r7]
   27408:	cmp	r0, #125	; 0x7d
   2740c:	beq	27348 <flatcc_json_parser_generic_json@@Base+0xcc>
   27410:	b	274d0 <flatcc_json_parser_generic_json@@Base+0x254>
   27414:	mov	r0, r5
   27418:	mov	r1, r7
   2741c:	mov	r2, r4
   27420:	bl	277f0 <flatcc_json_parser_float@@Base+0x188>
   27424:	mov	r1, r0
   27428:	cmp	r0, r4
   2742c:	beq	27480 <flatcc_json_parser_generic_json@@Base+0x204>
   27430:	add	r7, sp, #4
   27434:	ldrb	r0, [r1]
   27438:	cmp	r0, #34	; 0x22
   2743c:	beq	27480 <flatcc_json_parser_generic_json@@Base+0x204>
   27440:	mov	r0, r5
   27444:	mov	r2, r4
   27448:	bl	26990 <flatcc_json_parser_string_part@@Base>
   2744c:	mov	r1, r0
   27450:	cmp	r0, r4
   27454:	beq	27464 <flatcc_json_parser_generic_json@@Base+0x1e8>
   27458:	ldrb	r0, [r1]
   2745c:	cmp	r0, #34	; 0x22
   27460:	beq	27480 <flatcc_json_parser_generic_json@@Base+0x204>
   27464:	mov	r0, r5
   27468:	mov	r2, r4
   2746c:	mov	r3, r7
   27470:	bl	26ad8 <flatcc_json_parser_string_escape@@Base>
   27474:	mov	r1, r0
   27478:	cmp	r0, r4
   2747c:	bne	27434 <flatcc_json_parser_generic_json@@Base+0x1b8>
   27480:	mov	r0, r5
   27484:	mov	r2, r4
   27488:	bl	27810 <flatcc_json_parser_float@@Base+0x1a8>
   2748c:	mov	r7, r0
   27490:	b	27348 <flatcc_json_parser_generic_json@@Base+0xcc>
   27494:	cmp	r6, #512	; 0x200
   27498:	beq	2756c <flatcc_json_parser_generic_json@@Base+0x2f0>
   2749c:	mov	r0, #93	; 0x5d
   274a0:	strb	r0, [sl, r6]
   274a4:	add	r1, r7, #1
   274a8:	mov	r0, r5
   274ac:	mov	r2, r4
   274b0:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   274b4:	mov	r7, r0
   274b8:	add	r6, r6, #1
   274bc:	cmp	r0, r4
   274c0:	beq	274d0 <flatcc_json_parser_generic_json@@Base+0x254>
   274c4:	ldrb	r0, [r7]
   274c8:	cmp	r0, #93	; 0x5d
   274cc:	beq	27348 <flatcc_json_parser_generic_json@@Base+0xcc>
   274d0:	add	r0, sl, r6
   274d4:	cmp	r7, r4
   274d8:	bne	272b4 <flatcc_json_parser_generic_json@@Base+0x38>
   274dc:	b	27540 <flatcc_json_parser_generic_json@@Base+0x2c4>
   274e0:	mov	r0, r5
   274e4:	mov	r1, r7
   274e8:	mov	r2, r4
   274ec:	bl	26ec0 <flatcc_json_parser_skip_constant@@Base>
   274f0:	mov	r1, r0
   274f4:	cmp	r7, r0
   274f8:	beq	27580 <flatcc_json_parser_generic_json@@Base+0x304>
   274fc:	mov	r7, r1
   27500:	b	27348 <flatcc_json_parser_generic_json@@Base+0xcc>
   27504:	cmp	r7, r4
   27508:	bne	27540 <flatcc_json_parser_generic_json@@Base+0x2c4>
   2750c:	cmp	r6, #0
   27510:	beq	27540 <flatcc_json_parser_generic_json@@Base+0x2c4>
   27514:	add	r0, sp, #8
   27518:	add	r0, r0, r6
   2751c:	ldrb	r0, [r0, #-1]
   27520:	mov	r3, #10
   27524:	cmp	r0, #93	; 0x5d
   27528:	movweq	r3, #9
   2752c:	mov	r0, r5
   27530:	mov	r1, r7
   27534:	mov	r2, r4
   27538:	bl	26958 <flatcc_json_parser_set_error@@Base>
   2753c:	mov	r7, r0
   27540:	mov	r0, r7
   27544:	sub	sp, fp, #28
   27548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2754c:	mov	r0, r5
   27550:	mov	r2, r4
   27554:	mov	r3, #10
   27558:	b	27538 <flatcc_json_parser_generic_json@@Base+0x2bc>
   2755c:	mov	r0, r5
   27560:	mov	r2, r4
   27564:	mov	r3, #4
   27568:	b	27538 <flatcc_json_parser_generic_json@@Base+0x2bc>
   2756c:	mov	r0, r5
   27570:	mov	r1, r7
   27574:	mov	r2, r4
   27578:	mov	r3, #2
   2757c:	b	27538 <flatcc_json_parser_generic_json@@Base+0x2bc>
   27580:	mov	r0, r5
   27584:	mov	r2, r4
   27588:	mov	r3, #5
   2758c:	b	27538 <flatcc_json_parser_generic_json@@Base+0x2bc>

00027590 <flatcc_json_parser_double@@Base>:
   27590:	push	{r4, r5, r6, r7, fp, lr}
   27594:	add	fp, sp, #16
   27598:	mov	r5, r1
   2759c:	mov	r6, r0
   275a0:	mov	r0, #0
   275a4:	str	r0, [r3]
   275a8:	str	r0, [r3, #4]
   275ac:	cmp	r1, r2
   275b0:	beq	27644 <flatcc_json_parser_double@@Base+0xb4>
   275b4:	mov	r7, r3
   275b8:	mov	r4, r2
   275bc:	mov	r0, r5
   275c0:	ldrb	r1, [r0], #1
   275c4:	cmp	r1, #45	; 0x2d
   275c8:	movne	r0, r5
   275cc:	sub	r2, r2, r0
   275d0:	cmp	r2, #2
   275d4:	blt	27600 <flatcc_json_parser_double@@Base+0x70>
   275d8:	sub	r1, r1, #45	; 0x2d
   275dc:	clz	r1, r1
   275e0:	lsr	r1, r1, #5
   275e4:	ldrb	r1, [r5, r1]
   275e8:	cmp	r1, #46	; 0x2e
   275ec:	beq	2764c <flatcc_json_parser_double@@Base+0xbc>
   275f0:	cmp	r1, #48	; 0x30
   275f4:	ldrbeq	r0, [r0, #1]
   275f8:	cmpeq	r0, #48	; 0x30
   275fc:	beq	2764c <flatcc_json_parser_double@@Base+0xbc>
   27600:	sub	r1, r4, r5
   27604:	mov	r0, r5
   27608:	mov	r2, r7
   2760c:	bl	27664 <flatcc_json_parser_double@@Base+0xd4>
   27610:	cmp	r0, #0
   27614:	cmpne	r0, r5
   27618:	popne	{r4, r5, r6, r7, fp, pc}
   2761c:	vldr	d0, [r7]
   27620:	bl	14e84 <__isinf@plt>
   27624:	cmp	r0, #0
   27628:	beq	2764c <flatcc_json_parser_double@@Base+0xbc>
   2762c:	mov	r0, r6
   27630:	mov	r1, r5
   27634:	mov	r2, r4
   27638:	mov	r3, #7
   2763c:	pop	{r4, r5, r6, r7, fp, lr}
   27640:	b	26958 <flatcc_json_parser_set_error@@Base>
   27644:	mov	r0, r5
   27648:	pop	{r4, r5, r6, r7, fp, pc}
   2764c:	mov	r0, r6
   27650:	mov	r1, r5
   27654:	mov	r2, r4
   27658:	mov	r3, #6
   2765c:	pop	{r4, r5, r6, r7, fp, lr}
   27660:	b	26958 <flatcc_json_parser_set_error@@Base>
   27664:	b	28f00 <flatcc_json_parser_struct_as_root@@Base+0xbc>

00027668 <flatcc_json_parser_float@@Base>:
   27668:	push	{r4, r5, r6, r7, fp, lr}
   2766c:	add	fp, sp, #16
   27670:	mov	r5, r1
   27674:	mov	r6, r0
   27678:	mov	r0, #0
   2767c:	str	r0, [r3]
   27680:	cmp	r1, r2
   27684:	beq	27718 <flatcc_json_parser_float@@Base+0xb0>
   27688:	mov	r7, r3
   2768c:	mov	r4, r2
   27690:	mov	r0, r5
   27694:	ldrb	r1, [r0], #1
   27698:	cmp	r1, #45	; 0x2d
   2769c:	movne	r0, r5
   276a0:	sub	r2, r2, r0
   276a4:	cmp	r2, #2
   276a8:	blt	276d4 <flatcc_json_parser_float@@Base+0x6c>
   276ac:	sub	r1, r1, #45	; 0x2d
   276b0:	clz	r1, r1
   276b4:	lsr	r1, r1, #5
   276b8:	ldrb	r1, [r5, r1]
   276bc:	cmp	r1, #46	; 0x2e
   276c0:	beq	27720 <flatcc_json_parser_float@@Base+0xb8>
   276c4:	cmp	r1, #48	; 0x30
   276c8:	ldrbeq	r0, [r0, #1]
   276cc:	cmpeq	r0, #48	; 0x30
   276d0:	beq	27720 <flatcc_json_parser_float@@Base+0xb8>
   276d4:	sub	r1, r4, r5
   276d8:	mov	r0, r5
   276dc:	mov	r2, r7
   276e0:	bl	27738 <flatcc_json_parser_float@@Base+0xd0>
   276e4:	cmp	r0, #0
   276e8:	cmpne	r0, r5
   276ec:	popne	{r4, r5, r6, r7, fp, pc}
   276f0:	vldr	s0, [r7]
   276f4:	bl	14e78 <__isinff@plt>
   276f8:	cmp	r0, #0
   276fc:	beq	27720 <flatcc_json_parser_float@@Base+0xb8>
   27700:	mov	r0, r6
   27704:	mov	r1, r5
   27708:	mov	r2, r4
   2770c:	mov	r3, #7
   27710:	pop	{r4, r5, r6, r7, fp, lr}
   27714:	b	26958 <flatcc_json_parser_set_error@@Base>
   27718:	mov	r0, r5
   2771c:	pop	{r4, r5, r6, r7, fp, pc}
   27720:	mov	r0, r6
   27724:	mov	r1, r5
   27728:	mov	r2, r4
   2772c:	mov	r3, #6
   27730:	pop	{r4, r5, r6, r7, fp, lr}
   27734:	b	26958 <flatcc_json_parser_set_error@@Base>
   27738:	push	{r4, r5, r6, sl, fp, lr}
   2773c:	add	fp, sp, #16
   27740:	vpush	{d8-d9}
   27744:	sub	sp, sp, #8
   27748:	mov	r4, r2
   2774c:	mov	r5, r0
   27750:	mov	r2, sp
   27754:	bl	27664 <flatcc_json_parser_double@@Base+0xd4>
   27758:	mov	r6, r0
   2775c:	vldr	d16, [sp]
   27760:	add	r0, pc, #56	; 0x38
   27764:	vcmpe.f64	d16, #0.0
   27768:	vmrs	APSR_nzcv, fpscr
   2776c:	addmi	r0, r0, #4
   27770:	vcvt.f32.f64	s16, d16
   27774:	vldr	s18, [r0]
   27778:	vmov.f32	s0, s16
   2777c:	bl	14e78 <__isinff@plt>
   27780:	cmp	r0, #0
   27784:	vseleq.f32	s0, s16, s18
   27788:	vstr	s0, [r4]
   2778c:	movne	r6, r5
   27790:	mov	r0, r6
   27794:	sub	sp, fp, #32
   27798:	vpop	{d8-d9}
   2779c:	pop	{r4, r5, r6, sl, fp, pc}
   277a0:	svcvc	0x00800000
   277a4:			; <UNDEFINED> instruction: 0xff800000
   277a8:	cmp	r1, r2
   277ac:	beq	277e8 <flatcc_json_parser_float@@Base+0x180>
   277b0:	ldrb	r3, [r1]
   277b4:	cmp	r3, #46	; 0x2e
   277b8:	beq	277d8 <flatcc_json_parser_float@@Base+0x170>
   277bc:	cmp	r3, #34	; 0x22
   277c0:	bne	277e0 <flatcc_json_parser_float@@Base+0x178>
   277c4:	mov	r2, #0
   277c8:	str	r2, [r0, #12]
   277cc:	add	r1, r1, #1
   277d0:	mov	r0, r1
   277d4:	bx	lr
   277d8:	mov	r3, #5
   277dc:	b	26958 <flatcc_json_parser_set_error@@Base>
   277e0:	mov	r2, #1
   277e4:	str	r2, [r0, #12]
   277e8:	mov	r0, r1
   277ec:	bx	lr
   277f0:	cmp	r1, r2
   277f4:	beq	27808 <flatcc_json_parser_float@@Base+0x1a0>
   277f8:	ldrb	r3, [r1]
   277fc:	cmp	r3, #34	; 0x22
   27800:	addeq	r0, r1, #1
   27804:	bxeq	lr
   27808:	mov	r3, #16
   2780c:	b	26958 <flatcc_json_parser_set_error@@Base>
   27810:	cmp	r1, r2
   27814:	beq	27828 <flatcc_json_parser_float@@Base+0x1c0>
   27818:	ldrb	r3, [r1]
   2781c:	cmp	r3, #34	; 0x22
   27820:	addeq	r0, r1, #1
   27824:	bxeq	lr
   27828:	mov	r3, #20
   2782c:	b	26958 <flatcc_json_parser_set_error@@Base>
   27830:	push	{fp, lr}
   27834:	mov	fp, sp
   27838:	cmp	r1, r2
   2783c:	beq	27a74 <flatcc_json_parser_float@@Base+0x40c>
   27840:	ldrb	r3, [r1]
   27844:	cmp	r3, #45	; 0x2d
   27848:	bne	2785c <flatcc_json_parser_float@@Base+0x1f4>
   2784c:	add	r1, r1, #1
   27850:	cmp	r1, r2
   27854:	beq	27a88 <flatcc_json_parser_float@@Base+0x420>
   27858:	ldrb	r3, [r1]
   2785c:	cmp	r3, #48	; 0x30
   27860:	bne	27874 <flatcc_json_parser_float@@Base+0x20c>
   27864:	add	r1, r1, #1
   27868:	cmp	r1, r2
   2786c:	bne	278b4 <flatcc_json_parser_float@@Base+0x24c>
   27870:	b	2790c <flatcc_json_parser_float@@Base+0x2a4>
   27874:	sub	r3, r3, #49	; 0x31
   27878:	uxtb	r3, r3
   2787c:	cmp	r3, #8
   27880:	bhi	27a88 <flatcc_json_parser_float@@Base+0x420>
   27884:	add	ip, r1, #1
   27888:	mov	r1, ip
   2788c:	cmp	r2, ip
   27890:	beq	278ac <flatcc_json_parser_float@@Base+0x244>
   27894:	mov	ip, r1
   27898:	ldrb	r3, [ip], #1
   2789c:	sub	r3, r3, #48	; 0x30
   278a0:	uxtb	r3, r3
   278a4:	cmp	r3, #10
   278a8:	bcc	27888 <flatcc_json_parser_float@@Base+0x220>
   278ac:	cmp	r1, r2
   278b0:	beq	2790c <flatcc_json_parser_float@@Base+0x2a4>
   278b4:	ldrb	r3, [r1]
   278b8:	cmp	r3, #46	; 0x2e
   278bc:	bne	2790c <flatcc_json_parser_float@@Base+0x2a4>
   278c0:	mov	ip, r1
   278c4:	ldrb	r3, [ip, #1]!
   278c8:	sub	r3, r3, #48	; 0x30
   278cc:	uxtb	r3, r3
   278d0:	cmp	r3, #10
   278d4:	bcc	278e0 <flatcc_json_parser_float@@Base+0x278>
   278d8:	mov	r1, ip
   278dc:	b	27a88 <flatcc_json_parser_float@@Base+0x420>
   278e0:	add	r1, r1, #2
   278e4:	cmp	r1, r2
   278e8:	beq	2790c <flatcc_json_parser_float@@Base+0x2a4>
   278ec:	ldrb	r3, [r1]
   278f0:	sub	r3, r3, #48	; 0x30
   278f4:	uxtb	r3, r3
   278f8:	cmp	r3, #9
   278fc:	bhi	2790c <flatcc_json_parser_float@@Base+0x2a4>
   27900:	add	r1, r1, #1
   27904:	cmp	r2, r1
   27908:	bne	278ec <flatcc_json_parser_float@@Base+0x284>
   2790c:	cmp	r1, r2
   27910:	beq	2798c <flatcc_json_parser_float@@Base+0x324>
   27914:	ldrb	r3, [r1]
   27918:	orr	r3, r3, #32
   2791c:	cmp	r3, #101	; 0x65
   27920:	bne	2798c <flatcc_json_parser_float@@Base+0x324>
   27924:	add	r3, r1, #1
   27928:	cmp	r3, r2
   2792c:	beq	2795c <flatcc_json_parser_float@@Base+0x2f4>
   27930:	ldrb	ip, [r3]
   27934:	cmp	ip, #45	; 0x2d
   27938:	cmpne	ip, #43	; 0x2b
   2793c:	addeq	r3, r1, #2
   27940:	cmp	r3, r2
   27944:	beq	2795c <flatcc_json_parser_float@@Base+0x2f4>
   27948:	ldrb	r1, [r3]
   2794c:	sub	r1, r1, #48	; 0x30
   27950:	uxtb	r1, r1
   27954:	cmp	r1, #9
   27958:	bls	27964 <flatcc_json_parser_float@@Base+0x2fc>
   2795c:	mov	r1, r3
   27960:	b	27a88 <flatcc_json_parser_float@@Base+0x420>
   27964:	add	ip, r3, #1
   27968:	mov	r1, ip
   2796c:	cmp	r2, ip
   27970:	beq	2798c <flatcc_json_parser_float@@Base+0x324>
   27974:	mov	ip, r1
   27978:	ldrb	r3, [ip], #1
   2797c:	sub	r3, r3, #48	; 0x30
   27980:	uxtb	r3, r3
   27984:	cmp	r3, #10
   27988:	bcc	27968 <flatcc_json_parser_float@@Base+0x300>
   2798c:	cmp	r1, r2
   27990:	beq	27a88 <flatcc_json_parser_float@@Base+0x420>
   27994:	ldrb	ip, [r1]
   27998:	sub	lr, ip, #9
   2799c:	cmp	lr, #49	; 0x31
   279a0:	bhi	27a7c <flatcc_json_parser_float@@Base+0x414>
   279a4:	add	r3, pc, #0
   279a8:	ldr	pc, [r3, lr, lsl #2]
   279ac:	andeq	r7, r2, r4, ror sl
   279b0:	andeq	r7, r2, r4, ror sl
   279b4:	andeq	r7, r2, r4, ror sl
   279b8:	andeq	r7, r2, r8, lsl #21
   279bc:	andeq	r7, r2, r4, ror sl
   279c0:	andeq	r7, r2, r8, lsl #21
   279c4:	andeq	r7, r2, r8, lsl #21
   279c8:	andeq	r7, r2, r8, lsl #21
   279cc:	andeq	r7, r2, r8, lsl #21
   279d0:	andeq	r7, r2, r8, lsl #21
   279d4:	andeq	r7, r2, r8, lsl #21
   279d8:	andeq	r7, r2, r8, lsl #21
   279dc:	andeq	r7, r2, r8, lsl #21
   279e0:	andeq	r7, r2, r8, lsl #21
   279e4:	andeq	r7, r2, r8, lsl #21
   279e8:	andeq	r7, r2, r8, lsl #21
   279ec:	andeq	r7, r2, r8, lsl #21
   279f0:	andeq	r7, r2, r8, lsl #21
   279f4:	andeq	r7, r2, r8, lsl #21
   279f8:	andeq	r7, r2, r8, lsl #21
   279fc:	andeq	r7, r2, r8, lsl #21
   27a00:	andeq	r7, r2, r8, lsl #21
   27a04:	andeq	r7, r2, r8, lsl #21
   27a08:	andeq	r7, r2, r4, ror sl
   27a0c:	andeq	r7, r2, r8, lsl #21
   27a10:	andeq	r7, r2, r8, lsl #21
   27a14:	andeq	r7, r2, r8, lsl #21
   27a18:	andeq	r7, r2, r8, lsl #21
   27a1c:	andeq	r7, r2, r8, lsl #21
   27a20:	andeq	r7, r2, r8, lsl #21
   27a24:	andeq	r7, r2, r8, lsl #21
   27a28:	andeq	r7, r2, r8, lsl #21
   27a2c:	andeq	r7, r2, r8, lsl #21
   27a30:	andeq	r7, r2, r8, lsl #21
   27a34:	andeq	r7, r2, r8, lsl #21
   27a38:	andeq	r7, r2, r4, ror sl
   27a3c:	andeq	r7, r2, r8, lsl #21
   27a40:	andeq	r7, r2, r8, lsl #21
   27a44:	andeq	r7, r2, r8, lsl #21
   27a48:	andeq	r7, r2, r8, lsl #21
   27a4c:	andeq	r7, r2, r8, lsl #21
   27a50:	andeq	r7, r2, r8, lsl #21
   27a54:	andeq	r7, r2, r8, lsl #21
   27a58:	andeq	r7, r2, r8, lsl #21
   27a5c:	andeq	r7, r2, r8, lsl #21
   27a60:	andeq	r7, r2, r8, lsl #21
   27a64:	andeq	r7, r2, r8, lsl #21
   27a68:	andeq	r7, r2, r8, lsl #21
   27a6c:	andeq	r7, r2, r8, lsl #21
   27a70:	andeq	r7, r2, r4, ror sl
   27a74:	mov	r0, r1
   27a78:	pop	{fp, pc}
   27a7c:	cmp	ip, #93	; 0x5d
   27a80:	cmpne	ip, #125	; 0x7d
   27a84:	beq	27a74 <flatcc_json_parser_float@@Base+0x40c>
   27a88:	mov	r3, #6
   27a8c:	pop	{fp, lr}
   27a90:	b	26958 <flatcc_json_parser_set_error@@Base>
   27a94:	push	{r4, r5, r6, sl, fp, lr}
   27a98:	add	fp, sp, #16
   27a9c:	mov	r6, r3
   27aa0:	mov	r4, r2
   27aa4:	mov	r5, r0
   27aa8:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   27aac:	mov	r1, r0
   27ab0:	cmp	r0, r4
   27ab4:	beq	27af8 <flatcc_json_parser_float@@Base+0x490>
   27ab8:	ldrb	r0, [r1]
   27abc:	cmp	r0, #44	; 0x2c
   27ac0:	bne	27b00 <flatcc_json_parser_float@@Base+0x498>
   27ac4:	add	r1, r1, #1
   27ac8:	mov	r0, r5
   27acc:	mov	r2, r4
   27ad0:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   27ad4:	mov	r1, r0
   27ad8:	cmp	r0, r4
   27adc:	beq	27b28 <flatcc_json_parser_float@@Base+0x4c0>
   27ae0:	ldrb	r0, [r1]
   27ae4:	cmp	r0, #93	; 0x5d
   27ae8:	bne	27b44 <flatcc_json_parser_float@@Base+0x4dc>
   27aec:	mov	r0, #0
   27af0:	str	r0, [r6]
   27af4:	b	27b14 <flatcc_json_parser_float@@Base+0x4ac>
   27af8:	mov	r0, #0
   27afc:	b	27b48 <flatcc_json_parser_float@@Base+0x4e0>
   27b00:	mov	r0, #0
   27b04:	str	r0, [r6]
   27b08:	ldrb	r0, [r1]
   27b0c:	cmp	r0, #93	; 0x5d
   27b10:	bne	27b30 <flatcc_json_parser_float@@Base+0x4c8>
   27b14:	add	r1, r1, #1
   27b18:	mov	r0, r5
   27b1c:	mov	r2, r4
   27b20:	pop	{r4, r5, r6, sl, fp, lr}
   27b24:	b	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   27b28:	mov	r0, #0
   27b2c:	str	r0, [r6]
   27b30:	mov	r0, r5
   27b34:	mov	r2, r4
   27b38:	mov	r3, #9
   27b3c:	pop	{r4, r5, r6, sl, fp, lr}
   27b40:	b	26958 <flatcc_json_parser_set_error@@Base>
   27b44:	mov	r0, #1
   27b48:	str	r0, [r6]
   27b4c:	mov	r0, r1
   27b50:	pop	{r4, r5, r6, sl, fp, pc}
   27b54:	push	{r4, r5, r6, sl, fp, lr}
   27b58:	add	fp, sp, #16
   27b5c:	mov	r6, r3
   27b60:	mov	r4, r2
   27b64:	mov	r5, r0
   27b68:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   27b6c:	mov	r1, r0
   27b70:	cmp	r0, r4
   27b74:	beq	27bb8 <flatcc_json_parser_float@@Base+0x550>
   27b78:	ldrb	r0, [r1]
   27b7c:	cmp	r0, #44	; 0x2c
   27b80:	bne	27bc0 <flatcc_json_parser_float@@Base+0x558>
   27b84:	add	r1, r1, #1
   27b88:	mov	r0, r5
   27b8c:	mov	r2, r4
   27b90:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   27b94:	mov	r1, r0
   27b98:	cmp	r0, r4
   27b9c:	beq	27be8 <flatcc_json_parser_float@@Base+0x580>
   27ba0:	ldrb	r0, [r1]
   27ba4:	cmp	r0, #125	; 0x7d
   27ba8:	bne	27c04 <flatcc_json_parser_float@@Base+0x59c>
   27bac:	mov	r0, #0
   27bb0:	str	r0, [r6]
   27bb4:	b	27bd4 <flatcc_json_parser_float@@Base+0x56c>
   27bb8:	mov	r0, #0
   27bbc:	b	27c08 <flatcc_json_parser_float@@Base+0x5a0>
   27bc0:	mov	r0, #0
   27bc4:	str	r0, [r6]
   27bc8:	ldrb	r0, [r1]
   27bcc:	cmp	r0, #125	; 0x7d
   27bd0:	bne	27bf0 <flatcc_json_parser_float@@Base+0x588>
   27bd4:	add	r1, r1, #1
   27bd8:	mov	r0, r5
   27bdc:	mov	r2, r4
   27be0:	pop	{r4, r5, r6, sl, fp, lr}
   27be4:	b	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   27be8:	mov	r0, #0
   27bec:	str	r0, [r6]
   27bf0:	mov	r0, r5
   27bf4:	mov	r2, r4
   27bf8:	mov	r3, #10
   27bfc:	pop	{r4, r5, r6, sl, fp, lr}
   27c00:	b	26958 <flatcc_json_parser_set_error@@Base>
   27c04:	mov	r0, #1
   27c08:	str	r0, [r6]
   27c0c:	mov	r0, r1
   27c10:	pop	{r4, r5, r6, sl, fp, pc}

00027c14 <flatcc_json_parser_integer@@Base>:
   27c14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   27c18:	add	fp, sp, #24
   27c1c:	cmp	r1, r2
   27c20:	moveq	r0, r1
   27c24:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   27c28:	ldr	lr, [fp, #8]
   27c2c:	ldrb	r7, [r1]
   27c30:	sub	r7, r7, #45	; 0x2d
   27c34:	clz	r7, r7
   27c38:	lsr	r7, r7, #5
   27c3c:	str	r7, [r3]
   27c40:	add	ip, r1, r7
   27c44:	mov	r4, #0
   27c48:	cmp	ip, r2
   27c4c:	beq	27ce4 <flatcc_json_parser_integer@@Base+0xd0>
   27c50:	mov	r8, #10
   27c54:	mov	r9, #0
   27c58:	ldrb	r5, [ip]
   27c5c:	sub	r7, r5, #48	; 0x30
   27c60:	uxtb	r7, r7
   27c64:	cmp	r7, #9
   27c68:	bhi	27d08 <flatcc_json_parser_integer@@Base+0xf4>
   27c6c:	add	r7, r9, r9, lsl #2
   27c70:	lsl	r6, r7, #1
   27c74:	umlal	r5, r6, r4, r8
   27c78:	subs	r7, r5, #48	; 0x30
   27c7c:	sbc	r5, r6, #0
   27c80:	subs	r4, r7, r4
   27c84:	sbcs	r4, r5, r9
   27c88:	bcc	27d18 <flatcc_json_parser_integer@@Base+0x104>
   27c8c:	add	ip, ip, #1
   27c90:	cmp	r2, ip
   27c94:	mov	r4, r7
   27c98:	mov	r9, r5
   27c9c:	bne	27c58 <flatcc_json_parser_integer@@Base+0x44>
   27ca0:	mov	r3, #0
   27ca4:	mov	r4, r7
   27ca8:	mov	r9, r5
   27cac:	cmp	ip, r1
   27cb0:	beq	27cf4 <flatcc_json_parser_integer@@Base+0xe0>
   27cb4:	cmp	r3, #0
   27cb8:	beq	27cfc <flatcc_json_parser_integer@@Base+0xe8>
   27cbc:	ldrb	r1, [ip]
   27cc0:	cmp	r1, #46	; 0x2e
   27cc4:	beq	27cd4 <flatcc_json_parser_integer@@Base+0xc0>
   27cc8:	cmp	r1, #101	; 0x65
   27ccc:	cmpne	r1, #69	; 0x45
   27cd0:	bne	27cfc <flatcc_json_parser_integer@@Base+0xe8>
   27cd4:	mov	r1, ip
   27cd8:	mov	r3, #12
   27cdc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   27ce0:	b	26958 <flatcc_json_parser_set_error@@Base>
   27ce4:	mov	r9, #0
   27ce8:	mov	r3, #0
   27cec:	cmp	ip, r1
   27cf0:	bne	27cb4 <flatcc_json_parser_integer@@Base+0xa0>
   27cf4:	mov	r0, ip
   27cf8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27cfc:	stm	lr, {r4, r9}
   27d00:	mov	r0, ip
   27d04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27d08:	mov	r3, #1
   27d0c:	cmp	ip, r1
   27d10:	bne	27cb4 <flatcc_json_parser_integer@@Base+0xa0>
   27d14:	b	27cf4 <flatcc_json_parser_integer@@Base+0xe0>
   27d18:	mov	lr, #8
   27d1c:	cmp	r3, #0
   27d20:	movweq	lr, #7
   27d24:	mov	r1, ip
   27d28:	mov	r3, lr
   27d2c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   27d30:	b	26958 <flatcc_json_parser_set_error@@Base>

00027d34 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   27d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d38:	add	fp, sp, #28
   27d3c:	sub	sp, sp, #20
   27d40:	mov	r8, r3
   27d44:	mov	r4, r2
   27d48:	mov	r5, r0
   27d4c:	bl	277f0 <flatcc_json_parser_float@@Base+0x188>
   27d50:	mov	r6, r0
   27d54:	mov	r0, r5
   27d58:	mov	r1, r6
   27d5c:	mov	r2, r4
   27d60:	bl	26990 <flatcc_json_parser_string_part@@Base>
   27d64:	mov	r7, r0
   27d68:	ldr	sl, [fp, #8]
   27d6c:	cmp	sl, #0
   27d70:	mov	r9, sl
   27d74:	movwne	r9, #1
   27d78:	cmp	r0, r4
   27d7c:	beq	27e74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   27d80:	ldrb	r0, [r7]
   27d84:	cmp	r0, #34	; 0x22
   27d88:	bne	27e74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   27d8c:	sub	r0, r7, r6
   27d90:	str	r0, [sp, #4]
   27d94:	bl	27ea0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   27d98:	str	r0, [sp, #8]
   27d9c:	ldr	r0, [r5]
   27da0:	mov	r1, #1
   27da4:	mov	r2, #1
   27da8:	mvn	r3, #0
   27dac:	bl	22df0 <flatcc_builder_start_vector@@Base>
   27db0:	cmp	r0, #0
   27db4:	beq	27dd4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   27db8:	mov	r0, #0
   27dbc:	str	r0, [r8]
   27dc0:	mov	r0, r5
   27dc4:	mov	r1, r7
   27dc8:	mov	r2, r4
   27dcc:	mov	r3, #33	; 0x21
   27dd0:	b	27e94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   27dd4:	ldr	r0, [r5]
   27dd8:	ldr	r1, [sp, #8]
   27ddc:	bl	22808 <flatcc_builder_extend_vector@@Base>
   27de0:	cmp	r0, #0
   27de4:	beq	27db8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   27de8:	ldr	r1, [sp, #8]
   27dec:	str	r1, [sp, #16]
   27df0:	ldr	r1, [sp, #4]
   27df4:	str	r1, [sp, #12]
   27df8:	str	r9, [sp]
   27dfc:	add	r2, sp, #16
   27e00:	add	r3, sp, #12
   27e04:	mov	r1, r6
   27e08:	bl	27ecc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   27e0c:	ldr	r1, [sp, #12]
   27e10:	cmp	r0, #0
   27e14:	bne	27e70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   27e18:	ldmib	sp, {r0, r2}
   27e1c:	cmp	r1, r0
   27e20:	bne	27e70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   27e24:	ldr	r0, [sp, #16]
   27e28:	cmp	r2, r0
   27e2c:	bls	27e44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x110>
   27e30:	sub	r1, r2, r0
   27e34:	ldr	r0, [r5]
   27e38:	bl	22c50 <flatcc_builder_truncate_vector@@Base>
   27e3c:	cmp	r0, #0
   27e40:	bne	27db8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   27e44:	ldr	r0, [r5]
   27e48:	bl	23a40 <flatcc_builder_end_vector@@Base>
   27e4c:	str	r0, [r8]
   27e50:	cmp	r0, #0
   27e54:	beq	27db8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   27e58:	mov	r0, r5
   27e5c:	mov	r1, r7
   27e60:	mov	r2, r4
   27e64:	bl	27810 <flatcc_json_parser_float@@Base+0x1a8>
   27e68:	sub	sp, fp, #28
   27e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e70:	add	r7, r6, r1
   27e74:	mov	r0, #0
   27e78:	str	r0, [r8]
   27e7c:	mov	r3, #31
   27e80:	cmp	sl, #0
   27e84:	movwne	r3, #32
   27e88:	mov	r0, r5
   27e8c:	mov	r1, r7
   27e90:	mov	r2, r4
   27e94:	bl	26958 <flatcc_json_parser_set_error@@Base>
   27e98:	sub	sp, fp, #28
   27e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ea0:	and	r1, r0, #3
   27ea4:	lsr	r0, r0, #2
   27ea8:	add	r0, r0, r0, lsl #1
   27eac:	cmp	r1, #2
   27eb0:	beq	27ec4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   27eb4:	cmp	r1, #3
   27eb8:	addeq	r0, r0, #2
   27ebc:	bxeq	lr
   27ec0:	bx	lr
   27ec4:	add	r0, r0, #1
   27ec8:	bx	lr
   27ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ed0:	add	fp, sp, #28
   27ed4:	sub	sp, sp, #4
   27ed8:	ldr	r7, [fp, #8]
   27edc:	cmp	r3, #0
   27ee0:	ldrne	lr, [r3]
   27ee4:	mvneq	lr, #0
   27ee8:	and	r5, r7, #32
   27eec:	bic	r4, r7, #224	; 0xe0
   27ef0:	cmp	r4, #1
   27ef4:	beq	27f18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   27ef8:	mov	ip, #3
   27efc:	cmp	r4, #0
   27f00:	bne	27f48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   27f04:	movw	r4, #30832	; 0x7870
   27f08:	movt	r4, #3
   27f0c:	movw	ip, #31344	; 0x7a70
   27f10:	movt	ip, #3
   27f14:	b	27f28 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   27f18:	movw	r4, #31088	; 0x7970
   27f1c:	movt	r4, #3
   27f20:	movw	ip, #31600	; 0x7b70
   27f24:	movt	ip, #3
   27f28:	cmp	r5, #0
   27f2c:	moveq	ip, r4
   27f30:	cmp	r2, #0
   27f34:	beq	27f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   27f38:	ldr	r9, [r2]
   27f3c:	cmp	r9, #0
   27f40:	mvneq	r9, #0
   27f44:	b	27f54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x220>
   27f48:	mov	r8, r0
   27f4c:	b	280c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   27f50:	mvn	r9, #0
   27f54:	mov	r6, sp
   27f58:	mov	r8, r0
   27f5c:	mov	r7, #0
   27f60:	mov	r5, lr
   27f64:	cmp	r5, r7
   27f68:	beq	27ff4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   27f6c:	ldrb	r4, [r1, r7]
   27f70:	ldrb	r4, [ip, r4]
   27f74:	strb	r4, [r6, r7]
   27f78:	cmp	r4, #64	; 0x40
   27f7c:	bcc	27f94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
   27f80:	cmp	r4, #65	; 0x41
   27f84:	bne	2803c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x308>
   27f88:	sub	r7, r7, #1
   27f8c:	sub	r5, r5, #1
   27f90:	add	r1, r1, #1
   27f94:	add	r7, r7, #1
   27f98:	cmp	r7, #4
   27f9c:	bcc	27f64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   27fa0:	cmp	r9, #3
   27fa4:	bcc	280ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   27fa8:	ldrb	lr, [sp]
   27fac:	ldrb	r4, [sp, #1]
   27fb0:	lsr	r7, r4, #4
   27fb4:	orr	r7, r7, lr, lsl #2
   27fb8:	strb	r7, [r8]
   27fbc:	ldrb	r7, [sp, #2]
   27fc0:	lsr	r7, r7, #2
   27fc4:	orr	r7, r7, r4, lsl #4
   27fc8:	strb	r7, [r8, #1]
   27fcc:	ldrb	r7, [sp, #2]
   27fd0:	ldrb	r4, [sp, #3]
   27fd4:	orr	r7, r4, r7, lsl #6
   27fd8:	strb	r7, [r8, #2]
   27fdc:	sub	lr, r5, #4
   27fe0:	subs	r9, r9, #3
   27fe4:	add	r1, r1, #4
   27fe8:	add	r8, r8, #3
   27fec:	bne	27f5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   27ff0:	b	280c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   27ff4:	mov	r4, r7
   27ff8:	cmp	r7, #0
   27ffc:	beq	280bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x388>
   28000:	cmp	r7, #3
   28004:	beq	2807c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   28008:	mov	ip, #4
   2800c:	cmp	r7, #2
   28010:	bne	280c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   28014:	ldrb	r1, [sp, #1]
   28018:	ands	r7, r1, #15
   2801c:	mov	ip, #1
   28020:	movwne	ip, #5
   28024:	bne	280c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   28028:	ldrb	r7, [sp]
   2802c:	lsl	r7, r7, #2
   28030:	orr	r1, r7, r1, lsr #4
   28034:	strb	r1, [r8], #1
   28038:	b	280bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x388>
   2803c:	cmp	r4, #66	; 0x42
   28040:	mov	r4, r7
   28044:	bne	27ff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   28048:	add	r6, r7, #1
   2804c:	mov	r4, r6
   28050:	cmp	r6, r5
   28054:	bcs	27ff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   28058:	cmp	r4, #7
   2805c:	ldrbls	r6, [r1, r4]
   28060:	ldrbls	r6, [ip, r6]
   28064:	subls	r6, r6, #65	; 0x41
   28068:	uxtbls	sl, r6
   2806c:	addls	r6, r4, #1
   28070:	cmpls	sl, #2
   28074:	bcc	2804c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x318>
   28078:	b	27ff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   2807c:	mov	ip, #5
   28080:	ldrb	r1, [sp, #2]
   28084:	tst	r1, #3
   28088:	bne	280c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   2808c:	mov	ip, #1
   28090:	cmp	r9, #2
   28094:	bcc	280c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   28098:	ldrb	ip, [sp]
   2809c:	ldrb	r6, [sp, #1]
   280a0:	lsl	r7, r6, #4
   280a4:	orr	r1, r7, r1, lsr #2
   280a8:	strb	r1, [r8, #1]
   280ac:	lsr	r1, r6, #4
   280b0:	orr	r1, r1, ip, lsl #2
   280b4:	strb	r1, [r8]
   280b8:	add	r8, r8, #2
   280bc:	sub	lr, r5, r4
   280c0:	mov	ip, #0
   280c4:	cmp	r2, #0
   280c8:	subne	r0, r8, r0
   280cc:	strne	r0, [r2]
   280d0:	cmp	r3, #0
   280d4:	ldrne	r0, [r3]
   280d8:	subne	r0, r0, lr
   280dc:	strne	r0, [r3]
   280e0:	mov	r0, ip
   280e4:	sub	sp, fp, #28
   280e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280ec:	mov	ip, #1
   280f0:	b	280c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>

000280f4 <flatcc_json_parser_build_string@@Base>:
   280f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   280f8:	add	fp, sp, #28
   280fc:	sub	sp, sp, #4
   28100:	mov	r9, r3
   28104:	mov	sl, r2
   28108:	mov	r6, r0
   2810c:	bl	277f0 <flatcc_json_parser_float@@Base+0x188>
   28110:	mov	r4, r0
   28114:	mov	r0, r6
   28118:	mov	r1, r4
   2811c:	mov	r2, sl
   28120:	bl	26990 <flatcc_json_parser_string_part@@Base>
   28124:	mov	r5, r0
   28128:	cmp	r0, sl
   2812c:	beq	28150 <flatcc_json_parser_build_string@@Base+0x5c>
   28130:	ldrb	r0, [r5]
   28134:	cmp	r0, #34	; 0x22
   28138:	bne	28150 <flatcc_json_parser_build_string@@Base+0x5c>
   2813c:	sub	r2, r5, r4
   28140:	ldr	r0, [r6]
   28144:	mov	r1, r4
   28148:	bl	2451c <flatcc_builder_create_string@@Base>
   2814c:	b	28214 <flatcc_json_parser_build_string@@Base+0x120>
   28150:	ldr	r0, [r6]
   28154:	bl	22f98 <flatcc_builder_start_string@@Base>
   28158:	cmp	r0, #0
   2815c:	beq	2816c <flatcc_json_parser_build_string@@Base+0x78>
   28160:	mov	r0, #0
   28164:	str	r0, [r9]
   28168:	b	2822c <flatcc_json_parser_build_string@@Base+0x138>
   2816c:	sub	r2, r5, r4
   28170:	ldr	r0, [r6]
   28174:	mov	r1, r4
   28178:	bl	22b54 <flatcc_builder_append_string@@Base>
   2817c:	cmp	r0, #0
   28180:	beq	28160 <flatcc_json_parser_build_string@@Base+0x6c>
   28184:	cmp	r5, sl
   28188:	beq	2820c <flatcc_json_parser_build_string@@Base+0x118>
   2818c:	mov	r8, sp
   28190:	add	r4, r8, #1
   28194:	ldrb	r0, [r5]
   28198:	cmp	r0, #34	; 0x22
   2819c:	beq	2820c <flatcc_json_parser_build_string@@Base+0x118>
   281a0:	mov	r0, r6
   281a4:	mov	r1, r5
   281a8:	mov	r2, sl
   281ac:	mov	r3, r8
   281b0:	bl	26ad8 <flatcc_json_parser_string_escape@@Base>
   281b4:	mov	r7, r0
   281b8:	ldr	r0, [r6]
   281bc:	ldrb	r2, [sp]
   281c0:	mov	r1, r4
   281c4:	bl	22b54 <flatcc_builder_append_string@@Base>
   281c8:	cmp	r0, #0
   281cc:	beq	28238 <flatcc_json_parser_build_string@@Base+0x144>
   281d0:	mov	r0, r6
   281d4:	mov	r1, r7
   281d8:	mov	r2, sl
   281dc:	bl	26990 <flatcc_json_parser_string_part@@Base>
   281e0:	mov	r5, r0
   281e4:	cmp	r0, sl
   281e8:	beq	28204 <flatcc_json_parser_build_string@@Base+0x110>
   281ec:	sub	r2, r5, r7
   281f0:	ldr	r0, [r6]
   281f4:	mov	r1, r7
   281f8:	bl	22b54 <flatcc_builder_append_string@@Base>
   281fc:	cmp	r0, #0
   28200:	beq	28160 <flatcc_json_parser_build_string@@Base+0x6c>
   28204:	cmp	r5, sl
   28208:	bne	28194 <flatcc_json_parser_build_string@@Base+0xa0>
   2820c:	ldr	r0, [r6]
   28210:	bl	24634 <flatcc_builder_end_string@@Base>
   28214:	str	r0, [r9]
   28218:	mov	r0, r6
   2821c:	mov	r1, r5
   28220:	mov	r2, sl
   28224:	bl	27810 <flatcc_json_parser_float@@Base+0x1a8>
   28228:	mov	r5, r0
   2822c:	mov	r0, r5
   28230:	sub	sp, fp, #28
   28234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28238:	mov	r5, r7
   2823c:	b	28160 <flatcc_json_parser_build_string@@Base+0x6c>

00028240 <flatcc_json_parser_prepare_unions@@Base>:
   28240:	push	{r4, r5, r6, r7, fp, lr}
   28244:	add	fp, sp, #16
   28248:	mov	r5, r3
   2824c:	mov	r6, r2
   28250:	mov	r4, r1
   28254:	mov	r7, r0
   28258:	add	r0, r3, r3, lsl #1
   2825c:	mov	r1, #8
   28260:	add	r1, r1, r0, lsl #3
   28264:	ldr	r0, [r7]
   28268:	bl	21da8 <flatcc_builder_enter_user_frame@@Base>
   2826c:	mov	r1, r0
   28270:	ldr	r0, [fp, #8]
   28274:	str	r1, [r0]
   28278:	cmp	r1, #0
   2827c:	beq	28294 <flatcc_json_parser_prepare_unions@@Base+0x54>
   28280:	ldr	r0, [r7]
   28284:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   28288:	str	r5, [r0]
   2828c:	mov	r0, r4
   28290:	pop	{r4, r5, r6, r7, fp, pc}
   28294:	mov	r0, r7
   28298:	mov	r1, r4
   2829c:	mov	r2, r6
   282a0:	mov	r3, #33	; 0x21
   282a4:	pop	{r4, r5, r6, r7, fp, lr}
   282a8:	b	26958 <flatcc_json_parser_set_error@@Base>

000282ac <flatcc_json_parser_finalize_unions@@Base>:
   282ac:	push	{r4, r5, r6, r7, fp, lr}
   282b0:	add	fp, sp, #16
   282b4:	mov	r4, r3
   282b8:	mov	r7, r2
   282bc:	mov	r5, r1
   282c0:	mov	r6, r0
   282c4:	ldr	r0, [r0]
   282c8:	mov	r1, r3
   282cc:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   282d0:	ldr	r0, [r0, #4]
   282d4:	cmp	r0, #0
   282d8:	beq	282f4 <flatcc_json_parser_finalize_unions@@Base+0x48>
   282dc:	mov	r0, r6
   282e0:	mov	r1, r5
   282e4:	mov	r2, r7
   282e8:	mov	r3, #27
   282ec:	bl	26958 <flatcc_json_parser_set_error@@Base>
   282f0:	mov	r5, r0
   282f4:	ldr	r0, [r6]
   282f8:	mov	r1, r4
   282fc:	bl	21e6c <flatcc_builder_exit_user_frame_at@@Base>
   28300:	mov	r0, r5
   28304:	pop	{r4, r5, r6, r7, fp, pc}

00028308 <flatcc_json_parser_union@@Base>:
   28308:	push	{r4, r5, r6, r7, fp, lr}
   2830c:	add	fp, sp, #16
   28310:	sub	sp, sp, #16
   28314:	mov	r7, r3
   28318:	mov	r4, r2
   2831c:	mov	r6, r1
   28320:	mov	r5, r0
   28324:	ldr	r0, [r0]
   28328:	ldr	r1, [fp, #12]
   2832c:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   28330:	add	r2, r0, #8
   28334:	add	r3, r7, r7, lsl #1
   28338:	mov	r1, r2
   2833c:	ldr	r7, [r1, r3, lsl #3]!
   28340:	cmp	r7, #0
   28344:	beq	2836c <flatcc_json_parser_union@@Base+0x64>
   28348:	mov	r0, r5
   2834c:	mov	r1, r6
   28350:	mov	r2, r4
   28354:	mov	r3, #28
   28358:	bl	26958 <flatcc_json_parser_set_error@@Base>
   2835c:	mov	r6, r0
   28360:	mov	r0, r6
   28364:	sub	sp, fp, #16
   28368:	pop	{r4, r5, r6, r7, fp, pc}
   2836c:	add	r2, r2, r3, lsl #3
   28370:	ldrb	r3, [r2, #12]
   28374:	cmp	r3, #0
   28378:	beq	283e4 <flatcc_json_parser_union@@Base+0xdc>
   2837c:	ldrb	r3, [r2, #13]
   28380:	strb	r3, [sp, #8]
   28384:	cmp	r3, #0
   28388:	beq	28418 <flatcc_json_parser_union@@Base+0x110>
   2838c:	ldr	r7, [fp, #16]
   28390:	ldr	r1, [r0, #4]
   28394:	sub	r1, r1, #1
   28398:	str	r1, [r0, #4]
   2839c:	add	r0, sp, #8
   283a0:	add	r0, r0, #4
   283a4:	str	r0, [sp]
   283a8:	mov	r0, r5
   283ac:	mov	r1, r6
   283b0:	mov	r2, r4
   283b4:	blx	r7
   283b8:	mov	r6, r0
   283bc:	cmp	r0, r4
   283c0:	beq	28360 <flatcc_json_parser_union@@Base+0x58>
   283c4:	ldr	r1, [fp, #8]
   283c8:	ldr	r0, [r5]
   283cc:	ldr	r2, [sp, #8]
   283d0:	ldr	r3, [sp, #12]
   283d4:	bl	23d08 <flatcc_builder_table_add_union@@Base>
   283d8:	cmp	r0, #0
   283dc:	bne	28348 <flatcc_json_parser_union@@Base+0x40>
   283e0:	b	28360 <flatcc_json_parser_union@@Base+0x58>
   283e4:	ldr	r3, [r0, #4]
   283e8:	add	r3, r3, #1
   283ec:	str	r3, [r0, #4]
   283f0:	ldr	r0, [r5, #16]
   283f4:	str	r0, [r2, #8]
   283f8:	ldr	r0, [r5, #4]
   283fc:	str	r0, [r2, #4]
   28400:	str	r6, [r1]
   28404:	mov	r0, r5
   28408:	mov	r1, r6
   2840c:	mov	r2, r4
   28410:	bl	2727c <flatcc_json_parser_generic_json@@Base>
   28414:	b	2835c <flatcc_json_parser_union@@Base+0x54>
   28418:	mov	r0, r5
   2841c:	mov	r1, r6
   28420:	mov	r2, r4
   28424:	mov	r3, #25
   28428:	b	28358 <flatcc_json_parser_union@@Base+0x50>

0002842c <flatcc_json_parser_union_type@@Base>:
   2842c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28430:	add	fp, sp, #28
   28434:	sub	sp, sp, #20
   28438:	mov	r6, r3
   2843c:	mov	r7, r2
   28440:	mov	r4, r1
   28444:	mov	r5, r0
   28448:	ldr	r0, [r0]
   2844c:	ldr	r1, [fp, #12]
   28450:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   28454:	mov	sl, r0
   28458:	add	r8, r0, #8
   2845c:	add	r9, r6, r6, lsl #1
   28460:	add	r6, r8, r9, lsl #3
   28464:	mov	r0, r6
   28468:	ldrb	r1, [r0, #12]!
   2846c:	cmp	r1, #0
   28470:	beq	28498 <flatcc_json_parser_union_type@@Base+0x6c>
   28474:	mov	r0, r5
   28478:	mov	r1, r4
   2847c:	mov	r2, r7
   28480:	mov	r3, #28
   28484:	bl	26958 <flatcc_json_parser_set_error@@Base>
   28488:	mov	r7, r0
   2848c:	mov	r0, r7
   28490:	sub	sp, fp, #28
   28494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28498:	mov	r1, #1
   2849c:	strb	r1, [r0]
   284a0:	add	r3, r6, #13
   284a4:	mov	r0, r5
   284a8:	mov	r1, r4
   284ac:	mov	r2, r7
   284b0:	str	r3, [sp, #8]
   284b4:	bl	285d4 <flatcc_json_parser_union_type@@Base+0x1a8>
   284b8:	mov	r2, r7
   284bc:	mov	r7, r0
   284c0:	cmp	r0, r4
   284c4:	str	r2, [sp, #4]
   284c8:	beq	284d4 <flatcc_json_parser_union_type@@Base+0xa8>
   284cc:	ldr	r4, [sp, #8]
   284d0:	b	284f4 <flatcc_json_parser_union_type@@Base+0xc8>
   284d4:	ldr	r3, [fp, #16]
   284d8:	ldr	r0, [sp, #8]
   284dc:	mov	r4, r0
   284e0:	str	r0, [sp]
   284e4:	mov	r0, r5
   284e8:	mov	r1, r7
   284ec:	bl	28664 <flatcc_json_parser_union_type@@Base+0x238>
   284f0:	mov	r7, r0
   284f4:	ldr	r1, [r8, r9, lsl #3]
   284f8:	cmp	r1, #0
   284fc:	beq	28588 <flatcc_json_parser_union_type@@Base+0x15c>
   28500:	ldr	r0, [sl, #4]
   28504:	cmp	r0, #0
   28508:	beq	285b4 <flatcc_json_parser_union_type@@Base+0x188>
   2850c:	ldr	ip, [fp, #20]
   28510:	sub	r0, r0, #1
   28514:	str	r0, [sl, #4]
   28518:	ldr	r0, [r6, #8]
   2851c:	ldr	r9, [r5, #4]
   28520:	ldr	r8, [r5, #16]
   28524:	str	r0, [r5, #16]
   28528:	ldr	r0, [r6, #4]
   2852c:	str	r0, [r5, #4]
   28530:	ldrb	r3, [r4]
   28534:	strb	r3, [sp, #12]
   28538:	add	r0, sp, #12
   2853c:	add	r0, r0, #4
   28540:	str	r0, [sp]
   28544:	mov	r0, r5
   28548:	ldr	r6, [sp, #4]
   2854c:	mov	r2, r6
   28550:	blx	ip
   28554:	cmp	r0, r6
   28558:	beq	285a0 <flatcc_json_parser_union_type@@Base+0x174>
   2855c:	ldr	r1, [fp, #8]
   28560:	ldr	r0, [r5]
   28564:	ldr	r2, [sp, #12]
   28568:	ldr	r3, [sp, #16]
   2856c:	bl	23d08 <flatcc_builder_table_add_union@@Base>
   28570:	cmp	r0, #0
   28574:	beq	285a8 <flatcc_json_parser_union_type@@Base+0x17c>
   28578:	mov	r0, r5
   2857c:	mov	r1, r7
   28580:	ldr	r2, [sp, #4]
   28584:	b	28480 <flatcc_json_parser_union_type@@Base+0x54>
   28588:	ldrb	r0, [r4]
   2858c:	ldr	r1, [sl, #4]
   28590:	cmp	r0, #0
   28594:	addne	r1, r1, #1
   28598:	str	r1, [sl, #4]
   2859c:	b	2848c <flatcc_json_parser_union_type@@Base+0x60>
   285a0:	mov	r7, r6
   285a4:	b	2848c <flatcc_json_parser_union_type@@Base+0x60>
   285a8:	str	r9, [r5, #4]
   285ac:	str	r8, [r5, #16]
   285b0:	b	2848c <flatcc_json_parser_union_type@@Base+0x60>
   285b4:	movw	r0, #32772	; 0x8004
   285b8:	movt	r0, #3
   285bc:	movw	r1, #32787	; 0x8013
   285c0:	movt	r1, #3
   285c4:	movw	r3, #32861	; 0x805d
   285c8:	movt	r3, #3
   285cc:	movw	r2, #965	; 0x3c5
   285d0:	bl	14f44 <__assert_fail@plt>
   285d4:	push	{r4, r5, r6, r7, fp, lr}
   285d8:	add	fp, sp, #16
   285dc:	sub	sp, sp, #24
   285e0:	mov	r7, r1
   285e4:	mov	r6, r0
   285e8:	mov	r0, #0
   285ec:	str	r0, [sp, #20]
   285f0:	str	r0, [sp, #16]
   285f4:	str	r0, [sp, #12]
   285f8:	strb	r0, [r3]
   285fc:	cmp	r1, r2
   28600:	beq	28658 <flatcc_json_parser_union_type@@Base+0x22c>
   28604:	mov	r5, r3
   28608:	mov	r4, r2
   2860c:	add	r0, sp, #16
   28610:	str	r0, [sp]
   28614:	add	r3, sp, #12
   28618:	mov	r0, r6
   2861c:	mov	r1, r7
   28620:	bl	27c14 <flatcc_json_parser_integer@@Base>
   28624:	mov	r1, r0
   28628:	cmp	r0, r7
   2862c:	beq	28654 <flatcc_json_parser_union_type@@Base+0x228>
   28630:	ldr	r3, [sp, #12]
   28634:	ldr	r0, [sp, #16]
   28638:	ldr	r2, [sp, #20]
   2863c:	stm	sp, {r0, r2, r5}
   28640:	mov	r0, r6
   28644:	mov	r2, r4
   28648:	bl	29818 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   2864c:	mov	r7, r0
   28650:	b	28658 <flatcc_json_parser_union_type@@Base+0x22c>
   28654:	mov	r7, r1
   28658:	mov	r0, r7
   2865c:	sub	sp, fp, #16
   28660:	pop	{r4, r5, r6, r7, fp, pc}
   28664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28668:	add	fp, sp, #28
   2866c:	sub	sp, sp, #36	; 0x24
   28670:	mov	r8, r3
   28674:	mov	r6, r2
   28678:	mov	r5, r0
   2867c:	mov	r0, #0
   28680:	strb	r0, [fp, #-29]	; 0xffffffe3
   28684:	ldr	sl, [fp, #8]
   28688:	strb	r0, [sl]
   2868c:	mov	r0, r5
   28690:	bl	29860 <flatcc_json_parser_struct_as_root@@Base+0xa1c>
   28694:	mov	r4, r0
   28698:	cmp	r0, r6
   2869c:	beq	28764 <flatcc_json_parser_union_type@@Base+0x338>
   286a0:	mov	r9, r8
   286a4:	ldr	r7, [r9]
   286a8:	add	r0, sp, #24
   286ac:	str	r0, [sp]
   286b0:	add	r0, sp, #16
   286b4:	str	r0, [sp, #4]
   286b8:	mov	r0, r5
   286bc:	mov	r1, r4
   286c0:	mov	r2, r6
   286c4:	add	r3, sp, #20
   286c8:	blx	r7
   286cc:	mov	r7, r0
   286d0:	cmp	r0, r6
   286d4:	beq	28770 <flatcc_json_parser_union_type@@Base+0x344>
   286d8:	cmp	r7, r4
   286dc:	beq	28738 <flatcc_json_parser_union_type@@Base+0x30c>
   286e0:	ldr	r3, [sp, #20]
   286e4:	ldr	r0, [sp, #24]
   286e8:	ldr	r1, [sp, #28]
   286ec:	stm	sp, {r0, r1}
   286f0:	sub	r0, fp, #29
   286f4:	str	r0, [sp, #8]
   286f8:	mov	r0, r5
   286fc:	mov	r1, r7
   28700:	mov	r2, r6
   28704:	bl	29818 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   28708:	cmp	r0, r6
   2870c:	beq	2876c <flatcc_json_parser_union_type@@Base+0x340>
   28710:	ldrb	r0, [sl]
   28714:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   28718:	add	r0, r0, r1
   2871c:	strb	r0, [sl]
   28720:	ldr	r0, [sp, #16]
   28724:	cmp	r0, #0
   28728:	mov	r4, r7
   2872c:	mov	r9, r8
   28730:	bne	286a4 <flatcc_json_parser_union_type@@Base+0x278>
   28734:	b	28770 <flatcc_json_parser_union_type@@Base+0x344>
   28738:	ldr	r0, [r9, #4]!
   2873c:	cmp	r0, #0
   28740:	mov	r4, r7
   28744:	bne	286a4 <flatcc_json_parser_union_type@@Base+0x278>
   28748:	mov	r0, r5
   2874c:	mov	r1, r7
   28750:	mov	r2, r6
   28754:	mov	r3, #23
   28758:	bl	26958 <flatcc_json_parser_set_error@@Base>
   2875c:	mov	r7, r0
   28760:	b	28770 <flatcc_json_parser_union_type@@Base+0x344>
   28764:	mov	r7, r4
   28768:	b	28770 <flatcc_json_parser_union_type@@Base+0x344>
   2876c:	mov	r7, r6
   28770:	mov	r0, r7
   28774:	sub	sp, fp, #28
   28778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002877c <flatcc_json_parser_union_vector@@Base>:
   2877c:	push	{r4, r5, r6, r7, fp, lr}
   28780:	add	fp, sp, #16
   28784:	sub	sp, sp, #16
   28788:	mov	r7, r3
   2878c:	mov	r4, r2
   28790:	mov	r5, r1
   28794:	mov	r6, r0
   28798:	ldr	r0, [r0]
   2879c:	ldr	r1, [fp, #12]
   287a0:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   287a4:	add	r2, r0, #8
   287a8:	add	r3, r7, r7, lsl #1
   287ac:	mov	r1, r2
   287b0:	ldr	r7, [r1, r3, lsl #3]!
   287b4:	cmp	r7, #0
   287b8:	beq	287d8 <flatcc_json_parser_union_vector@@Base+0x5c>
   287bc:	mov	r0, r6
   287c0:	mov	r1, r5
   287c4:	mov	r2, r4
   287c8:	mov	r3, #28
   287cc:	sub	sp, fp, #16
   287d0:	pop	{r4, r5, r6, r7, fp, lr}
   287d4:	b	26958 <flatcc_json_parser_set_error@@Base>
   287d8:	add	r2, r2, r3, lsl #3
   287dc:	ldrb	r7, [r2, #12]
   287e0:	ldr	r3, [r0, #4]
   287e4:	cmp	r7, #0
   287e8:	beq	28824 <flatcc_json_parser_union_vector@@Base+0xa8>
   287ec:	ldr	r1, [fp, #16]
   287f0:	ldr	r7, [fp, #8]
   287f4:	sub	r3, r3, #1
   287f8:	str	r3, [r0, #4]
   287fc:	ldr	r0, [r2, #16]
   28800:	ldr	r3, [r2, #20]
   28804:	stm	sp, {r0, r7}
   28808:	str	r1, [sp, #8]
   2880c:	mov	r0, r6
   28810:	mov	r1, r5
   28814:	mov	r2, r4
   28818:	bl	28858 <flatcc_json_parser_union_vector@@Base+0xdc>
   2881c:	sub	sp, fp, #16
   28820:	pop	{r4, r5, r6, r7, fp, pc}
   28824:	add	r3, r3, #1
   28828:	str	r3, [r0, #4]
   2882c:	ldr	r0, [r6, #16]
   28830:	str	r0, [r2, #8]
   28834:	ldr	r0, [r6, #4]
   28838:	str	r0, [r2, #4]
   2883c:	str	r5, [r1]
   28840:	mov	r0, r6
   28844:	mov	r1, r5
   28848:	mov	r2, r4
   2884c:	sub	sp, fp, #16
   28850:	pop	{r4, r5, r6, r7, fp, lr}
   28854:	b	2727c <flatcc_json_parser_generic_json@@Base>
   28858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2885c:	add	fp, sp, #28
   28860:	sub	sp, sp, #12
   28864:	mov	r7, r3
   28868:	mov	r5, r2
   2886c:	mov	r4, r1
   28870:	mov	r6, r0
   28874:	mov	r0, #0
   28878:	str	r0, [sp, #8]
   2887c:	ldr	r0, [r6]
   28880:	bl	22e80 <flatcc_builder_start_offset_vector@@Base>
   28884:	cmp	r0, #0
   28888:	beq	288b0 <flatcc_json_parser_union_vector@@Base+0x134>
   2888c:	mov	r0, r6
   28890:	mov	r1, r4
   28894:	mov	r2, r5
   28898:	mov	r3, #33	; 0x21
   2889c:	bl	26958 <flatcc_json_parser_set_error@@Base>
   288a0:	mov	r4, r0
   288a4:	mov	r0, r4
   288a8:	sub	sp, fp, #28
   288ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288b0:	ldr	r8, [fp, #8]
   288b4:	add	r3, sp, #4
   288b8:	mov	r0, r6
   288bc:	mov	r1, r4
   288c0:	mov	r2, r5
   288c4:	bl	28ca8 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   288c8:	mov	r4, r0
   288cc:	clz	r0, r8
   288d0:	lsr	r0, r0, #5
   288d4:	ldr	r1, [sp, #4]
   288d8:	cmp	r1, #0
   288dc:	beq	28978 <flatcc_json_parser_union_vector@@Base+0x1fc>
   288e0:	sub	sl, r8, #1
   288e4:	mov	r9, #0
   288e8:	add	r8, sp, #8
   288ec:	tst	r0, #1
   288f0:	bne	289c4 <flatcc_json_parser_union_vector@@Base+0x248>
   288f4:	ldr	r0, [r6]
   288f8:	mov	r1, r7
   288fc:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   28900:	ldrb	r3, [r0, r9]
   28904:	str	r8, [sp]
   28908:	mov	r0, r6
   2890c:	mov	r1, r4
   28910:	mov	r2, r5
   28914:	ldr	r4, [fp, #16]
   28918:	blx	r4
   2891c:	mov	r4, r0
   28920:	cmp	r0, r5
   28924:	beq	288a4 <flatcc_json_parser_union_vector@@Base+0x128>
   28928:	ldr	r0, [r6]
   2892c:	mov	r1, #1
   28930:	bl	229cc <flatcc_builder_extend_offset_vector@@Base>
   28934:	cmp	r0, #0
   28938:	beq	2888c <flatcc_json_parser_union_vector@@Base+0x110>
   2893c:	ldr	r1, [sp, #8]
   28940:	str	r1, [r0]
   28944:	mov	r0, r6
   28948:	mov	r1, r4
   2894c:	mov	r2, r5
   28950:	add	r3, sp, #4
   28954:	bl	27a94 <flatcc_json_parser_float@@Base+0x42c>
   28958:	mov	r4, r0
   2895c:	sub	r0, sl, r9
   28960:	clz	r0, r0
   28964:	lsr	r0, r0, #5
   28968:	add	r9, r9, #1
   2896c:	ldr	r1, [sp, #4]
   28970:	cmp	r1, #0
   28974:	bne	288ec <flatcc_json_parser_union_vector@@Base+0x170>
   28978:	cmp	r0, #0
   2897c:	beq	289c4 <flatcc_json_parser_union_vector@@Base+0x248>
   28980:	ldr	r0, [r6]
   28984:	mov	r1, r7
   28988:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   2898c:	mov	r1, r0
   28990:	ldr	r0, [r6]
   28994:	bl	23c8c <flatcc_builder_end_offset_vector_for_unions@@Base>
   28998:	str	r0, [sp, #8]
   2899c:	cmp	r0, #0
   289a0:	beq	2888c <flatcc_json_parser_union_vector@@Base+0x110>
   289a4:	ldr	r1, [fp, #12]
   289a8:	ldr	r0, [r6]
   289ac:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   289b0:	cmp	r0, #0
   289b4:	beq	2888c <flatcc_json_parser_union_vector@@Base+0x110>
   289b8:	ldr	r1, [sp, #8]
   289bc:	str	r1, [r0]
   289c0:	b	288a4 <flatcc_json_parser_union_vector@@Base+0x128>
   289c4:	mov	r0, r6
   289c8:	mov	r1, r4
   289cc:	mov	r2, r5
   289d0:	mov	r3, #30
   289d4:	b	2889c <flatcc_json_parser_union_vector@@Base+0x120>

000289d8 <flatcc_json_parser_union_type_vector@@Base>:
   289d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289dc:	add	fp, sp, #28
   289e0:	sub	sp, sp, #28
   289e4:	mov	r6, r3
   289e8:	mov	r9, r2
   289ec:	mov	r4, r1
   289f0:	mov	r5, r0
   289f4:	ldr	r0, [r0]
   289f8:	ldr	r1, [fp, #12]
   289fc:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   28a00:	add	r0, r0, #8
   28a04:	add	sl, r6, r6, lsl #1
   28a08:	add	r7, r0, sl, lsl #3
   28a0c:	mov	r0, r7
   28a10:	ldrb	r1, [r0, #12]!
   28a14:	cmp	r1, #0
   28a18:	beq	28a30 <flatcc_json_parser_union_type_vector@@Base+0x58>
   28a1c:	mov	r0, r5
   28a20:	mov	r1, r4
   28a24:	mov	r2, r9
   28a28:	mov	r3, #28
   28a2c:	b	28c50 <flatcc_json_parser_union_type_vector@@Base+0x278>
   28a30:	mov	r1, #1
   28a34:	strb	r1, [r0]
   28a38:	ldr	r0, [r5]
   28a3c:	mov	r1, #1
   28a40:	mov	r2, #1
   28a44:	mvn	r3, #0
   28a48:	bl	22df0 <flatcc_builder_start_vector@@Base>
   28a4c:	cmp	r0, #0
   28a50:	bne	28c40 <flatcc_json_parser_union_type_vector@@Base+0x268>
   28a54:	add	r3, sp, #24
   28a58:	mov	r0, r5
   28a5c:	mov	r1, r4
   28a60:	mov	r2, r9
   28a64:	bl	28ca8 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   28a68:	mov	r4, r0
   28a6c:	ldr	r0, [r5]
   28a70:	ldr	r1, [sp, #24]
   28a74:	cmp	r1, #0
   28a78:	beq	28b48 <flatcc_json_parser_union_type_vector@@Base+0x170>
   28a7c:	add	r6, sp, #23
   28a80:	mov	r1, #1
   28a84:	bl	22808 <flatcc_builder_extend_vector@@Base>
   28a88:	cmp	r0, #0
   28a8c:	beq	28c40 <flatcc_json_parser_union_type_vector@@Base+0x268>
   28a90:	mov	r8, r0
   28a94:	mov	r0, r5
   28a98:	mov	r1, r4
   28a9c:	mov	r2, r9
   28aa0:	mov	r3, r6
   28aa4:	bl	285d4 <flatcc_json_parser_union_type@@Base+0x1a8>
   28aa8:	mov	r1, r6
   28aac:	mov	r6, r0
   28ab0:	cmp	r4, r0
   28ab4:	beq	28ac0 <flatcc_json_parser_union_type_vector@@Base+0xe8>
   28ab8:	mov	r4, r6
   28abc:	b	28ae8 <flatcc_json_parser_union_type_vector@@Base+0x110>
   28ac0:	str	r1, [sp]
   28ac4:	mov	r0, r5
   28ac8:	mov	r1, r6
   28acc:	mov	r2, r9
   28ad0:	ldr	r3, [fp, #16]
   28ad4:	bl	28664 <flatcc_json_parser_union_type@@Base+0x238>
   28ad8:	mov	r4, r0
   28adc:	cmp	r0, r6
   28ae0:	cmpne	r4, r9
   28ae4:	beq	28c40 <flatcc_json_parser_union_type_vector@@Base+0x268>
   28ae8:	ldrb	r0, [sp, #23]
   28aec:	ldr	r1, [fp, #24]
   28af0:	blx	r1
   28af4:	cmp	r0, #0
   28af8:	add	r6, sp, #23
   28afc:	bne	28b14 <flatcc_json_parser_union_type_vector@@Base+0x13c>
   28b00:	ldrb	r0, [r5, #8]
   28b04:	tst	r0, #1
   28b08:	beq	28c74 <flatcc_json_parser_union_type_vector@@Base+0x29c>
   28b0c:	mov	r0, #0
   28b10:	strb	r0, [sp, #23]
   28b14:	ldrb	r1, [sp, #23]
   28b18:	mov	r0, r8
   28b1c:	bl	28d38 <flatcc_json_parser_union_type_vector@@Base+0x360>
   28b20:	mov	r0, r5
   28b24:	mov	r1, r4
   28b28:	mov	r2, r9
   28b2c:	add	r3, sp, #24
   28b30:	bl	27a94 <flatcc_json_parser_float@@Base+0x42c>
   28b34:	mov	r4, r0
   28b38:	ldr	r0, [r5]
   28b3c:	ldr	r1, [sp, #24]
   28b40:	cmp	r1, #0
   28b44:	bne	28a80 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   28b48:	bl	23ac0 <flatcc_builder_vector_count@@Base>
   28b4c:	mov	r8, r0
   28b50:	str	r0, [r7, #16]
   28b54:	ldr	r0, [r5]
   28b58:	mov	r1, r8
   28b5c:	bl	21da8 <flatcc_builder_enter_user_frame@@Base>
   28b60:	mov	r1, r0
   28b64:	ldr	r0, [r5]
   28b68:	str	r1, [sp, #16]
   28b6c:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   28b70:	mov	r6, r0
   28b74:	ldr	r0, [r5]
   28b78:	bl	23acc <flatcc_builder_vector_edit@@Base>
   28b7c:	mov	r1, r0
   28b80:	mov	r0, r6
   28b84:	mov	r2, r8
   28b88:	bl	14e60 <memcpy@plt>
   28b8c:	ldr	r0, [r5]
   28b90:	bl	23a40 <flatcc_builder_end_vector@@Base>
   28b94:	cmp	r0, #0
   28b98:	beq	28c40 <flatcc_json_parser_union_type_vector@@Base+0x268>
   28b9c:	mov	r7, r0
   28ba0:	ldr	r6, [fp, #8]
   28ba4:	ldr	r0, [r5]
   28ba8:	sub	r1, r6, #1
   28bac:	bl	23e14 <flatcc_builder_table_add_offset@@Base>
   28bb0:	cmp	r0, #0
   28bb4:	beq	28c40 <flatcc_json_parser_union_type_vector@@Base+0x268>
   28bb8:	str	r7, [r0]
   28bbc:	ldr	r0, [r5]
   28bc0:	ldr	r1, [fp, #12]
   28bc4:	bl	21eb0 <flatcc_builder_get_user_frame_ptr@@Base>
   28bc8:	add	r7, r0, #8
   28bcc:	mov	r2, r7
   28bd0:	ldr	r1, [r2, sl, lsl #3]!
   28bd4:	ldr	r3, [sp, #16]
   28bd8:	str	r3, [r2, #20]
   28bdc:	ldr	r2, [r0, #4]
   28be0:	cmp	r1, #0
   28be4:	beq	28c64 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   28be8:	cmp	r2, #0
   28bec:	beq	28c88 <flatcc_json_parser_union_type_vector@@Base+0x2b0>
   28bf0:	ldr	ip, [fp, #20]
   28bf4:	sub	r2, r2, #1
   28bf8:	str	r2, [r0, #4]
   28bfc:	add	r0, r7, sl, lsl #3
   28c00:	ldr	r2, [r0, #8]
   28c04:	ldr	sl, [r5, #4]
   28c08:	ldr	r7, [r5, #16]
   28c0c:	str	r2, [r5, #16]
   28c10:	ldr	r0, [r0, #4]
   28c14:	str	r0, [r5, #4]
   28c18:	str	r8, [sp]
   28c1c:	stmib	sp, {r6, ip}
   28c20:	mov	r0, r5
   28c24:	mov	r2, r9
   28c28:	bl	28858 <flatcc_json_parser_union_vector@@Base+0xdc>
   28c2c:	cmp	r0, r9
   28c30:	strne	sl, [r5, #4]
   28c34:	strne	r7, [r5, #16]
   28c38:	movne	r9, r4
   28c3c:	b	28c58 <flatcc_json_parser_union_type_vector@@Base+0x280>
   28c40:	mov	r0, r5
   28c44:	mov	r1, r4
   28c48:	mov	r2, r9
   28c4c:	mov	r3, #33	; 0x21
   28c50:	bl	26958 <flatcc_json_parser_set_error@@Base>
   28c54:	mov	r9, r0
   28c58:	mov	r0, r9
   28c5c:	sub	sp, fp, #28
   28c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c64:	add	r1, r2, #1
   28c68:	str	r1, [r0, #4]
   28c6c:	mov	r9, r4
   28c70:	b	28c58 <flatcc_json_parser_union_type_vector@@Base+0x280>
   28c74:	mov	r0, r5
   28c78:	mov	r1, r4
   28c7c:	mov	r2, r9
   28c80:	mov	r3, #15
   28c84:	b	28c50 <flatcc_json_parser_union_type_vector@@Base+0x278>
   28c88:	movw	r0, #32772	; 0x8004
   28c8c:	movt	r0, #3
   28c90:	movw	r1, #32787	; 0x8013
   28c94:	movt	r1, #3
   28c98:	movw	r3, #33065	; 0x8129
   28c9c:	movt	r3, #3
   28ca0:	movw	r2, #1122	; 0x462
   28ca4:	bl	14f44 <__assert_fail@plt>
   28ca8:	push	{r4, r5, r6, sl, fp, lr}
   28cac:	add	fp, sp, #16
   28cb0:	mov	r5, r3
   28cb4:	mov	r4, r2
   28cb8:	mov	r6, r0
   28cbc:	cmp	r1, r2
   28cc0:	beq	28d10 <flatcc_json_parser_union_type_vector@@Base+0x338>
   28cc4:	ldrb	r0, [r1]
   28cc8:	cmp	r0, #91	; 0x5b
   28ccc:	bne	28d10 <flatcc_json_parser_union_type_vector@@Base+0x338>
   28cd0:	add	r1, r1, #1
   28cd4:	mov	r0, r6
   28cd8:	mov	r2, r4
   28cdc:	bl	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   28ce0:	cmp	r0, r4
   28ce4:	beq	28d2c <flatcc_json_parser_union_type_vector@@Base+0x354>
   28ce8:	ldrb	r1, [r0]
   28cec:	cmp	r1, #93	; 0x5d
   28cf0:	bne	28d2c <flatcc_json_parser_union_type_vector@@Base+0x354>
   28cf4:	mov	r1, #0
   28cf8:	str	r1, [r5]
   28cfc:	add	r1, r0, #1
   28d00:	mov	r0, r6
   28d04:	mov	r2, r4
   28d08:	pop	{r4, r5, r6, sl, fp, lr}
   28d0c:	b	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   28d10:	mov	r0, #0
   28d14:	str	r0, [r5]
   28d18:	mov	r0, r6
   28d1c:	mov	r2, r4
   28d20:	mov	r3, #22
   28d24:	pop	{r4, r5, r6, sl, fp, lr}
   28d28:	b	26958 <flatcc_json_parser_set_error@@Base>
   28d2c:	mov	r1, #1
   28d30:	str	r1, [r5]
   28d34:	pop	{r4, r5, r6, sl, fp, pc}
   28d38:	push	{r4, r5, fp, lr}
   28d3c:	add	fp, sp, #8
   28d40:	mov	r4, r1
   28d44:	mov	r5, r0
   28d48:	mov	r0, r1
   28d4c:	bl	29898 <flatcc_json_parser_struct_as_root@@Base+0xa54>
   28d50:	strb	r4, [r5]
   28d54:	pop	{r4, r5, fp, pc}

00028d58 <flatcc_json_parser_table_as_root@@Base>:
   28d58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28d5c:	add	fp, sp, #24
   28d60:	sub	sp, sp, #56	; 0x38
   28d64:	mov	r4, r2
   28d68:	mov	r6, r0
   28d6c:	ldr	r8, [fp, #8]
   28d70:	str	r8, [sp]
   28d74:	add	r5, sp, #12
   28d78:	cmp	r1, #0
   28d7c:	movne	r5, r1
   28d80:	add	r7, r2, r3
   28d84:	mov	r0, r5
   28d88:	mov	r1, r6
   28d8c:	mov	r3, r7
   28d90:	bl	28e0c <flatcc_json_parser_table_as_root@@Base+0xb4>
   28d94:	mov	r0, #2
   28d98:	and	r3, r0, r8, lsr #1
   28d9c:	ldr	r1, [fp, #12]
   28da0:	mov	r0, r6
   28da4:	mov	r2, #0
   28da8:	bl	223dc <flatcc_builder_start_buffer@@Base>
   28dac:	mov	r1, r0
   28db0:	mvn	r0, #0
   28db4:	cmp	r1, #0
   28db8:	bne	28de0 <flatcc_json_parser_table_as_root@@Base+0x88>
   28dbc:	ldr	ip, [fp, #16]
   28dc0:	add	r3, sp, #8
   28dc4:	mov	r0, r5
   28dc8:	mov	r1, r4
   28dcc:	mov	r2, r7
   28dd0:	blx	ip
   28dd4:	ldr	r0, [r5, #24]
   28dd8:	cmp	r0, #0
   28ddc:	beq	28de8 <flatcc_json_parser_table_as_root@@Base+0x90>
   28de0:	sub	sp, fp, #24
   28de4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28de8:	ldr	r1, [sp, #8]
   28dec:	mov	r0, r6
   28df0:	bl	22590 <flatcc_builder_end_buffer@@Base>
   28df4:	cmp	r0, #0
   28df8:	mvn	r0, #0
   28dfc:	strne	r4, [r5, #40]	; 0x28
   28e00:	movne	r0, #0
   28e04:	sub	sp, fp, #24
   28e08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28e0c:	vmov.i32	q8, #0	; 0x00000000
   28e10:	add	ip, r0, #12
   28e14:	vst1.32	{d16-d17}, [ip]
   28e18:	add	ip, r0, #28
   28e1c:	vst1.32	{d16-d17}, [ip]
   28e20:	stm	r0, {r1, r2}
   28e24:	mov	r1, #1
   28e28:	str	r1, [r0, #16]
   28e2c:	ldr	r1, [sp]
   28e30:	str	r1, [r0, #8]
   28e34:	str	r2, [r0, #28]
   28e38:	str	r3, [r0, #32]
   28e3c:	str	r2, [r0, #36]	; 0x24
   28e40:	bx	lr

00028e44 <flatcc_json_parser_struct_as_root@@Base>:
   28e44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28e48:	add	fp, sp, #24
   28e4c:	sub	sp, sp, #56	; 0x38
   28e50:	mov	r4, r2
   28e54:	mov	r6, r0
   28e58:	ldr	r8, [fp, #8]
   28e5c:	str	r8, [sp]
   28e60:	add	r5, sp, #12
   28e64:	cmp	r1, #0
   28e68:	movne	r5, r1
   28e6c:	add	r7, r2, r3
   28e70:	mov	r0, r5
   28e74:	mov	r1, r6
   28e78:	mov	r3, r7
   28e7c:	bl	28e0c <flatcc_json_parser_table_as_root@@Base+0xb4>
   28e80:	mov	r0, #2
   28e84:	and	r3, r0, r8, lsr #1
   28e88:	ldr	r1, [fp, #12]
   28e8c:	mov	r0, r6
   28e90:	mov	r2, #0
   28e94:	bl	223dc <flatcc_builder_start_buffer@@Base>
   28e98:	mov	r1, r0
   28e9c:	mvn	r0, #0
   28ea0:	cmp	r1, #0
   28ea4:	bne	28ecc <flatcc_json_parser_struct_as_root@@Base+0x88>
   28ea8:	ldr	ip, [fp, #16]
   28eac:	add	r3, sp, #8
   28eb0:	mov	r0, r5
   28eb4:	mov	r1, r4
   28eb8:	mov	r2, r7
   28ebc:	blx	ip
   28ec0:	ldr	r0, [r5, #24]
   28ec4:	cmp	r0, #0
   28ec8:	beq	28ed4 <flatcc_json_parser_struct_as_root@@Base+0x90>
   28ecc:	sub	sp, fp, #24
   28ed0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28ed4:	ldr	r1, [sp, #8]
   28ed8:	mov	r0, r6
   28edc:	bl	22590 <flatcc_builder_end_buffer@@Base>
   28ee0:	cmp	r0, #0
   28ee4:	mvn	r0, #0
   28ee8:	strne	r4, [r5, #40]	; 0x28
   28eec:	movne	r0, #0
   28ef0:	sub	sp, fp, #24
   28ef4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28ef8:	vmov	d0, r0, r1
   28efc:	bx	lr
   28f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f04:	add	fp, sp, #28
   28f08:	sub	sp, sp, #44	; 0x2c
   28f0c:	mov	lr, r2
   28f10:	mov	r9, r0
   28f14:	mov	r2, #0
   28f18:	str	r2, [lr]
   28f1c:	str	r2, [lr, #4]
   28f20:	cmp	r1, #1000	; 0x3e8
   28f24:	mov	r0, r1
   28f28:	movge	r0, #1000	; 0x3e8
   28f2c:	add	r3, r9, r0
   28f30:	add	ip, r3, #1
   28f34:	cmp	ip, r9
   28f38:	beq	28fb0 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   28f3c:	str	r3, [fp, #-32]	; 0xffffffe0
   28f40:	ldrb	r3, [r9]
   28f44:	cmp	r3, #45	; 0x2d
   28f48:	mov	r4, r9
   28f4c:	bne	28f64 <flatcc_json_parser_struct_as_root@@Base+0x120>
   28f50:	cmp	r0, #0
   28f54:	beq	293d4 <flatcc_json_parser_struct_as_root@@Base+0x590>
   28f58:	add	r4, r9, #1
   28f5c:	ldrb	r3, [r4]
   28f60:	mov	r2, #1
   28f64:	cmp	r3, #48	; 0x30
   28f68:	bne	28f98 <flatcc_json_parser_struct_as_root@@Base+0x154>
   28f6c:	add	r0, r4, #1
   28f70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   28f74:	cmp	r4, r3
   28f78:	beq	28fbc <flatcc_json_parser_struct_as_root@@Base+0x178>
   28f7c:	ldrb	r3, [r0]
   28f80:	orr	r3, r3, #32
   28f84:	cmp	r3, #120	; 0x78
   28f88:	bne	28fbc <flatcc_json_parser_struct_as_root@@Base+0x178>
   28f8c:	mov	r1, lr
   28f90:	bl	29400 <flatcc_json_parser_struct_as_root@@Base+0x5bc>
   28f94:	b	28fb0 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   28f98:	sub	r0, r3, #49	; 0x31
   28f9c:	uxtb	r0, r0
   28fa0:	cmp	r0, #9
   28fa4:	bcc	28ff0 <flatcc_json_parser_struct_as_root@@Base+0x1ac>
   28fa8:	cmp	r2, #0
   28fac:	movne	r9, #0
   28fb0:	mov	r0, r9
   28fb4:	sub	sp, fp, #28
   28fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   28fc0:	cmp	r4, r3
   28fc4:	str	r2, [sp, #32]
   28fc8:	beq	28fe4 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   28fcc:	ldrb	r3, [r0]
   28fd0:	cmp	r3, #48	; 0x30
   28fd4:	bne	28fe4 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   28fd8:	add	r0, r0, #1
   28fdc:	cmp	ip, r0
   28fe0:	bne	28fcc <flatcc_json_parser_struct_as_root@@Base+0x188>
   28fe4:	mov	r6, #0
   28fe8:	mov	r4, #0
   28fec:	b	29000 <flatcc_json_parser_struct_as_root@@Base+0x1bc>
   28ff0:	str	r2, [sp, #32]
   28ff4:	add	r0, r4, #1
   28ff8:	sub	r6, r3, #48	; 0x30
   28ffc:	asr	r4, r6, #31
   29000:	mov	r5, #0
   29004:	cmp	r0, ip
   29008:	beq	2907c <flatcc_json_parser_struct_as_root@@Base+0x238>
   2900c:	str	lr, [sp, #24]
   29010:	str	r9, [sp, #28]
   29014:	movw	r8, #39321	; 0x9999
   29018:	movt	r8, #6553	; 0x1999
   2901c:	movw	r3, #39320	; 0x9998
   29020:	movt	r3, #39321	; 0x9999
   29024:	mov	sl, #10
   29028:	mov	r7, r0
   2902c:	ldrb	r9, [r7]
   29030:	sub	lr, r9, #48	; 0x30
   29034:	uxtb	r2, lr
   29038:	cmp	r2, #9
   2903c:	bhi	2906c <flatcc_json_parser_struct_as_root@@Base+0x228>
   29040:	subs	r2, r3, r6
   29044:	sbcs	r2, r8, r4
   29048:	bcc	29094 <flatcc_json_parser_struct_as_root@@Base+0x250>
   2904c:	add	r2, r4, r4, lsl #2
   29050:	lsl	r2, r2, #1
   29054:	umlal	r9, r2, r6, sl
   29058:	subs	r6, r9, #48	; 0x30
   2905c:	sbc	r4, r2, #0
   29060:	add	r7, r7, #1
   29064:	cmp	ip, r7
   29068:	bne	2902c <flatcc_json_parser_struct_as_root@@Base+0x1e8>
   2906c:	mov	r8, r6
   29070:	mov	sl, r4
   29074:	mov	r2, #0
   29078:	b	290ac <flatcc_json_parser_struct_as_root@@Base+0x268>
   2907c:	mov	r7, r0
   29080:	mov	r8, r6
   29084:	mov	sl, r4
   29088:	mov	r2, #0
   2908c:	str	r2, [sp, #36]	; 0x24
   29090:	b	290b8 <flatcc_json_parser_struct_as_root@@Base+0x274>
   29094:	adds	r8, r6, #1
   29098:	adc	sl, r4, #0
   2909c:	cmp	r9, #52	; 0x34
   290a0:	movls	r8, r6
   290a4:	movls	sl, r4
   290a8:	mov	r2, #1
   290ac:	str	r2, [sp, #36]	; 0x24
   290b0:	ldr	r9, [sp, #28]
   290b4:	ldr	lr, [sp, #24]
   290b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   290bc:	cmp	r7, ip
   290c0:	beq	29110 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   290c4:	mvn	r1, r1
   290c8:	cmn	r1, #1000	; 0x3e8
   290cc:	mvnlt	r1, #1000	; 0x3e8
   290d0:	mvn	r1, r1
   290d4:	sub	r1, r1, r7
   290d8:	add	r6, r9, r1
   290dc:	mov	r5, #0
   290e0:	mov	r1, r7
   290e4:	ldrb	r3, [r1]
   290e8:	cmp	r3, #48	; 0x30
   290ec:	bne	29118 <flatcc_json_parser_struct_as_root@@Base+0x2d4>
   290f0:	sub	r6, r6, #1
   290f4:	add	r3, r1, #1
   290f8:	add	r5, r5, #1
   290fc:	cmp	r1, r2
   29100:	mov	r1, r3
   29104:	bne	290e4 <flatcc_json_parser_struct_as_root@@Base+0x2a0>
   29108:	mov	r1, r3
   2910c:	b	29164 <flatcc_json_parser_struct_as_root@@Base+0x320>
   29110:	mov	r1, r7
   29114:	b	29164 <flatcc_json_parser_struct_as_root@@Base+0x320>
   29118:	sub	r2, r3, #49	; 0x31
   2911c:	uxtb	r2, r2
   29120:	cmp	r2, #8
   29124:	bhi	29164 <flatcc_json_parser_struct_as_root@@Base+0x320>
   29128:	mvn	r4, #0
   2912c:	mov	r3, r4
   29130:	cmp	r6, #0
   29134:	beq	29154 <flatcc_json_parser_struct_as_root@@Base+0x310>
   29138:	ldrb	r2, [r1, -r3]
   2913c:	sub	r2, r2, #48	; 0x30
   29140:	uxtb	r2, r2
   29144:	sub	r4, r3, #1
   29148:	sub	r6, r6, #1
   2914c:	cmp	r2, #10
   29150:	bcc	2912c <flatcc_json_parser_struct_as_root@@Base+0x2e8>
   29154:	sub	r5, r5, r3
   29158:	sub	r1, r1, r3
   2915c:	mov	r2, #1
   29160:	str	r2, [sp, #36]	; 0x24
   29164:	sub	r3, r7, r0
   29168:	cmp	r1, ip
   2916c:	beq	292bc <flatcc_json_parser_struct_as_root@@Base+0x478>
   29170:	ldrb	r0, [r1]
   29174:	cmp	r0, #46	; 0x2e
   29178:	bne	292bc <flatcc_json_parser_struct_as_root@@Base+0x478>
   2917c:	mov	r7, r1
   29180:	ldrb	r0, [r7, #1]!
   29184:	sub	r0, r0, #48	; 0x30
   29188:	uxtb	r2, r0
   2918c:	mov	r0, #0
   29190:	cmp	r2, #9
   29194:	bhi	293d8 <flatcc_json_parser_struct_as_root@@Base+0x594>
   29198:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2919c:	cmp	r1, r0
   291a0:	beq	29208 <flatcc_json_parser_struct_as_root@@Base+0x3c4>
   291a4:	str	r3, [sp, #28]
   291a8:	movw	r0, #39321	; 0x9999
   291ac:	movt	r0, #6553	; 0x1999
   291b0:	movw	r4, #39320	; 0x9998
   291b4:	movt	r4, #39321	; 0x9999
   291b8:	mov	r6, #10
   291bc:	mov	r1, r7
   291c0:	ldrb	r3, [r1]
   291c4:	sub	r2, r3, #48	; 0x30
   291c8:	uxtb	r2, r2
   291cc:	cmp	r2, #9
   291d0:	bhi	29224 <flatcc_json_parser_struct_as_root@@Base+0x3e0>
   291d4:	subs	r2, r4, r8
   291d8:	sbcs	r2, r0, sl
   291dc:	bcc	29218 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   291e0:	add	r2, sl, sl, lsl #2
   291e4:	lsl	r2, r2, #1
   291e8:	umlal	r3, r2, r8, r6
   291ec:	subs	r8, r3, #48	; 0x30
   291f0:	sbc	sl, r2, #0
   291f4:	sub	r5, r5, #1
   291f8:	add	r1, r1, #1
   291fc:	cmp	ip, r1
   29200:	bne	291c0 <flatcc_json_parser_struct_as_root@@Base+0x37c>
   29204:	b	29224 <flatcc_json_parser_struct_as_root@@Base+0x3e0>
   29208:	mov	r1, r7
   2920c:	mov	r0, r8
   29210:	mov	r6, sl
   29214:	b	29230 <flatcc_json_parser_struct_as_root@@Base+0x3ec>
   29218:	ldr	r0, [sp, #36]	; 0x24
   2921c:	cmp	r0, #0
   29220:	beq	293e0 <flatcc_json_parser_struct_as_root@@Base+0x59c>
   29224:	mov	r0, r8
   29228:	mov	r6, sl
   2922c:	ldr	r3, [sp, #28]
   29230:	sub	r2, r1, r7
   29234:	add	r3, r2, r3
   29238:	cmp	r1, ip
   2923c:	beq	29264 <flatcc_json_parser_struct_as_root@@Base+0x420>
   29240:	mov	r4, r3
   29244:	ldrb	r3, [r1]
   29248:	cmp	r3, #48	; 0x30
   2924c:	bne	29270 <flatcc_json_parser_struct_as_root@@Base+0x42c>
   29250:	add	r1, r1, #1
   29254:	add	r5, r5, #1
   29258:	cmp	ip, r1
   2925c:	bne	29244 <flatcc_json_parser_struct_as_root@@Base+0x400>
   29260:	b	292b0 <flatcc_json_parser_struct_as_root@@Base+0x46c>
   29264:	mov	r8, r0
   29268:	mov	sl, r6
   2926c:	b	292bc <flatcc_json_parser_struct_as_root@@Base+0x478>
   29270:	sub	r2, r3, #49	; 0x31
   29274:	uxtb	r2, r2
   29278:	cmp	r2, #8
   2927c:	bhi	292b0 <flatcc_json_parser_struct_as_root@@Base+0x46c>
   29280:	add	r3, r1, #1
   29284:	mov	r1, r3
   29288:	cmp	ip, r3
   2928c:	beq	292a8 <flatcc_json_parser_struct_as_root@@Base+0x464>
   29290:	mov	r3, r1
   29294:	ldrb	r2, [r3], #1
   29298:	sub	r2, r2, #48	; 0x30
   2929c:	uxtb	r2, r2
   292a0:	cmp	r2, #10
   292a4:	bcc	29284 <flatcc_json_parser_struct_as_root@@Base+0x440>
   292a8:	mov	r2, #1
   292ac:	str	r2, [sp, #36]	; 0x24
   292b0:	mov	r8, r0
   292b4:	mov	sl, r6
   292b8:	mov	r3, r4
   292bc:	mov	r7, #0
   292c0:	cmp	r1, ip
   292c4:	beq	2931c <flatcc_json_parser_struct_as_root@@Base+0x4d8>
   292c8:	ldrb	r0, [r1]
   292cc:	orr	r0, r0, #32
   292d0:	cmp	r0, #101	; 0x65
   292d4:	bne	2931c <flatcc_json_parser_struct_as_root@@Base+0x4d8>
   292d8:	sub	r2, ip, r1
   292dc:	mov	r0, #0
   292e0:	cmp	r2, #2
   292e4:	blt	293d8 <flatcc_json_parser_struct_as_root@@Base+0x594>
   292e8:	mov	r4, r1
   292ec:	ldrb	r0, [r4, #1]!
   292f0:	cmp	r0, #45	; 0x2d
   292f4:	beq	29368 <flatcc_json_parser_struct_as_root@@Base+0x524>
   292f8:	mov	r7, #0
   292fc:	cmp	r0, #43	; 0x2b
   29300:	bne	29378 <flatcc_json_parser_struct_as_root@@Base+0x534>
   29304:	add	r4, r1, #2
   29308:	mov	r0, #0
   2930c:	cmp	r4, ip
   29310:	beq	293d8 <flatcc_json_parser_struct_as_root@@Base+0x594>
   29314:	mov	r7, #0
   29318:	b	29378 <flatcc_json_parser_struct_as_root@@Base+0x534>
   2931c:	mov	r6, #0
   29320:	cmp	r1, ip
   29324:	mov	r0, #0
   29328:	beq	293d8 <flatcc_json_parser_struct_as_root@@Base+0x594>
   2932c:	add	r0, r3, r5
   29330:	cmp	r7, #0
   29334:	rsbne	r6, r6, #0
   29338:	add	r0, r0, r6
   2933c:	stm	sp, {r8, sl}
   29340:	str	r0, [sp, #8]
   29344:	str	r3, [sp, #12]
   29348:	ldr	r0, [sp, #36]	; 0x24
   2934c:	str	r0, [sp, #16]
   29350:	str	lr, [sp, #20]
   29354:	mov	r0, r9
   29358:	ldr	r2, [sp, #32]
   2935c:	bl	29410 <flatcc_json_parser_struct_as_root@@Base+0x5cc>
   29360:	sub	sp, fp, #28
   29364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29368:	add	r4, r1, #2
   2936c:	mov	r7, #1
   29370:	cmp	r4, ip
   29374:	beq	293d4 <flatcc_json_parser_struct_as_root@@Base+0x590>
   29378:	ldrb	r0, [r4]
   2937c:	sub	r6, r0, #48	; 0x30
   29380:	uxtb	r1, r6
   29384:	mov	r0, #0
   29388:	cmp	r1, #9
   2938c:	bhi	293d8 <flatcc_json_parser_struct_as_root@@Base+0x594>
   29390:	add	r1, r4, #1
   29394:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29398:	cmp	r4, r0
   2939c:	beq	29320 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   293a0:	ldrb	r0, [r1]
   293a4:	sub	r2, r0, #48	; 0x30
   293a8:	uxtb	r2, r2
   293ac:	cmp	r2, #9
   293b0:	bhi	29320 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   293b4:	cmp	r6, #32768	; 0x8000
   293b8:	addlt	r2, r6, r6, lsl #2
   293bc:	addlt	r0, r0, r2, lsl #1
   293c0:	sublt	r6, r0, #48	; 0x30
   293c4:	add	r1, r1, #1
   293c8:	cmp	ip, r1
   293cc:	bne	293a0 <flatcc_json_parser_struct_as_root@@Base+0x55c>
   293d0:	b	29320 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   293d4:	mov	r0, #0
   293d8:	sub	sp, fp, #28
   293dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293e0:	adds	r0, r8, #1
   293e4:	adc	r6, sl, #0
   293e8:	cmp	r3, #52	; 0x34
   293ec:	movls	r0, r8
   293f0:	movls	r6, sl
   293f4:	mov	r2, #1
   293f8:	str	r2, [sp, #36]	; 0x24
   293fc:	b	2922c <flatcc_json_parser_struct_as_root@@Base+0x3e8>
   29400:	mov	r2, #0
   29404:	str	r2, [r1]
   29408:	str	r2, [r1, #4]
   2940c:	bx	lr
   29410:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29414:	add	fp, sp, #24
   29418:	sub	sp, sp, #16
   2941c:	mov	r5, r2
   29420:	mov	r4, r1
   29424:	mov	r6, r0
   29428:	ldr	r1, [fp, #12]
   2942c:	ldr	r0, [fp, #8]
   29430:	vmov.i32	d0, #0	; 0x00000000
   29434:	orrs	r2, r0, r1
   29438:	ldr	r9, [fp, #28]
   2943c:	beq	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29440:	ldr	r7, [fp, #16]
   29444:	cmn	r7, #324	; 0x144
   29448:	blt	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2944c:	movw	r2, #311	; 0x137
   29450:	cmp	r7, r2
   29454:	blt	29488 <flatcc_json_parser_struct_as_root@@Base+0x644>
   29458:	movw	r1, #0
   2945c:	movt	r1, #32752	; 0x7ff0
   29460:	mov	r0, #0
   29464:	bl	28ef8 <flatcc_json_parser_struct_as_root@@Base+0xb4>
   29468:	vstr	d0, [r9]
   2946c:	cmp	r5, #0
   29470:	vldrne	d16, [r9]
   29474:	vnegne.f64	d16, d16
   29478:	vstrne	d16, [r9]
   2947c:	mov	r0, r4
   29480:	sub	sp, fp, #24
   29484:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29488:	ldr	r8, [fp, #20]
   2948c:	mov	r2, #0
   29490:	cmp	r2, r1, lsr #21
   29494:	bne	2957c <flatcc_json_parser_struct_as_root@@Base+0x738>
   29498:	cmp	r7, #22
   2949c:	bhi	2957c <flatcc_json_parser_struct_as_root@@Base+0x738>
   294a0:	bl	318a4 <flatcc_json_printer_clear@@Base+0x1238>
   294a4:	sub	r2, r7, r8
   294a8:	vmov	d0, r0, r1
   294ac:	add	r0, r2, #22
   294b0:	cmp	r0, #44	; 0x2c
   294b4:	bhi	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   294b8:	add	r1, pc, #0
   294bc:	ldr	pc, [r1, r0, lsl #2]
   294c0:	andeq	r9, r2, r4, ror r5
   294c4:			; <UNDEFINED> instruction: 0x000295b8
   294c8:	andeq	r9, r2, r0, asr #11
   294cc:	andeq	r9, r2, r8, asr #11
   294d0:	ldrdeq	r9, [r2], -r0
   294d4:	ldrdeq	r9, [r2], -r8
   294d8:	andeq	r9, r2, r0, ror #11
   294dc:	andeq	r9, r2, r8, ror #11
   294e0:	strdeq	r9, [r2], -r0
   294e4:	strdeq	r9, [r2], -r8
   294e8:	andeq	r9, r2, r0, lsl #12
   294ec:	andeq	r9, r2, r8, lsl #12
   294f0:	andeq	r9, r2, r0, lsl r6
   294f4:	andeq	r9, r2, r8, lsl r6
   294f8:	andeq	r9, r2, r0, lsr #12
   294fc:	andeq	r9, r2, r8, lsr #12
   29500:	andeq	r9, r2, r0, lsr r6
   29504:	andeq	r9, r2, r8, lsr r6
   29508:	andeq	r9, r2, r0, asr #12
   2950c:	andeq	r9, r2, r8, asr #12
   29510:	andeq	r9, r2, r0, asr r6
   29514:	andeq	r9, r2, r8, asr r6
   29518:	andeq	r9, r2, r8, ror #8
   2951c:	andeq	r9, r2, r4, ror #12
   29520:	andeq	r9, r2, r0, ror r6
   29524:	andeq	r9, r2, ip, ror r6
   29528:	andeq	r9, r2, r8, lsl #13
   2952c:	muleq	r2, r4, r6
   29530:	andeq	r9, r2, r0, lsr #13
   29534:	andeq	r9, r2, ip, lsr #13
   29538:			; <UNDEFINED> instruction: 0x000296b8
   2953c:	andeq	r9, r2, r4, asr #13
   29540:	ldrdeq	r9, [r2], -r0
   29544:	ldrdeq	r9, [r2], -ip
   29548:	andeq	r9, r2, r8, ror #13
   2954c:	strdeq	r9, [r2], -r4
   29550:	andeq	r9, r2, r0, lsl #14
   29554:	andeq	r9, r2, ip, lsl #14
   29558:	andeq	r9, r2, r8, lsl r7
   2955c:	andeq	r9, r2, r4, lsr #14
   29560:	andeq	r9, r2, r0, lsr r7
   29564:	andeq	r9, r2, ip, lsr r7
   29568:	andeq	r9, r2, r8, asr #14
   2956c:	andeq	r9, r2, r4, asr r7
   29570:	andeq	r9, r2, r0, ror #14
   29574:	vldr	d16, [pc, #660]	; 29810 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   29578:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   2957c:	ldr	r2, [fp, #24]
   29580:	stm	sp, {r2, r9}
   29584:	mov	r2, r7
   29588:	mov	r3, r8
   2958c:	bl	263e8 <grisu3_diy_fp_encode_double@@Base>
   29590:	cmp	r0, #0
   29594:	bne	2946c <flatcc_json_parser_struct_as_root@@Base+0x628>
   29598:	add	r1, sp, #12
   2959c:	mov	r0, r6
   295a0:	bl	14f08 <strtod@plt>
   295a4:	vstr	d0, [r9]
   295a8:	ldr	r0, [sp, #12]
   295ac:	cmp	r0, r4
   295b0:	movcc	r4, r0
   295b4:	b	2947c <flatcc_json_parser_struct_as_root@@Base+0x638>
   295b8:	vldr	d16, [pc, #432]	; 29770 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   295bc:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   295c0:	vldr	d16, [pc, #432]	; 29778 <flatcc_json_parser_struct_as_root@@Base+0x934>
   295c4:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   295c8:	vldr	d16, [pc, #432]	; 29780 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   295cc:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   295d0:	vldr	d16, [pc, #432]	; 29788 <flatcc_json_parser_struct_as_root@@Base+0x944>
   295d4:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   295d8:	vldr	d16, [pc, #432]	; 29790 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   295dc:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   295e0:	vldr	d16, [pc, #432]	; 29798 <flatcc_json_parser_struct_as_root@@Base+0x954>
   295e4:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   295e8:	vldr	d16, [pc, #432]	; 297a0 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   295ec:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   295f0:	vldr	d16, [pc, #432]	; 297a8 <flatcc_json_parser_struct_as_root@@Base+0x964>
   295f4:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   295f8:	vldr	d16, [pc, #432]	; 297b0 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   295fc:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29600:	vldr	d16, [pc, #432]	; 297b8 <flatcc_json_parser_struct_as_root@@Base+0x974>
   29604:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29608:	vldr	d16, [pc, #432]	; 297c0 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   2960c:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29610:	vldr	d16, [pc, #432]	; 297c8 <flatcc_json_parser_struct_as_root@@Base+0x984>
   29614:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29618:	vldr	d16, [pc, #432]	; 297d0 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   2961c:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29620:	vldr	d16, [pc, #432]	; 297d8 <flatcc_json_parser_struct_as_root@@Base+0x994>
   29624:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29628:	vldr	d16, [pc, #432]	; 297e0 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   2962c:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29630:	vldr	d16, [pc, #432]	; 297e8 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   29634:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29638:	vldr	d16, [pc, #432]	; 297f0 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   2963c:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29640:	vldr	d16, [pc, #432]	; 297f8 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   29644:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29648:	vldr	d16, [pc, #432]	; 29800 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   2964c:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29650:	vldr	d16, [pc, #432]	; 29808 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   29654:	b	2965c <flatcc_json_parser_struct_as_root@@Base+0x818>
   29658:	vmov.f64	d16, #36	; 0x41200000  10.0
   2965c:	vdiv.f64	d0, d0, d16
   29660:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29664:	vmov.f64	d16, #36	; 0x41200000  10.0
   29668:	vmul.f64	d0, d0, d16
   2966c:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29670:	vldr	d16, [pc, #400]	; 29808 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   29674:	vmul.f64	d0, d0, d16
   29678:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2967c:	vldr	d16, [pc, #380]	; 29800 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   29680:	vmul.f64	d0, d0, d16
   29684:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29688:	vldr	d16, [pc, #360]	; 297f8 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   2968c:	vmul.f64	d0, d0, d16
   29690:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29694:	vldr	d16, [pc, #340]	; 297f0 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   29698:	vmul.f64	d0, d0, d16
   2969c:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   296a0:	vldr	d16, [pc, #320]	; 297e8 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   296a4:	vmul.f64	d0, d0, d16
   296a8:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   296ac:	vldr	d16, [pc, #300]	; 297e0 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   296b0:	vmul.f64	d0, d0, d16
   296b4:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   296b8:	vldr	d16, [pc, #280]	; 297d8 <flatcc_json_parser_struct_as_root@@Base+0x994>
   296bc:	vmul.f64	d0, d0, d16
   296c0:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   296c4:	vldr	d16, [pc, #260]	; 297d0 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   296c8:	vmul.f64	d0, d0, d16
   296cc:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   296d0:	vldr	d16, [pc, #240]	; 297c8 <flatcc_json_parser_struct_as_root@@Base+0x984>
   296d4:	vmul.f64	d0, d0, d16
   296d8:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   296dc:	vldr	d16, [pc, #220]	; 297c0 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   296e0:	vmul.f64	d0, d0, d16
   296e4:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   296e8:	vldr	d16, [pc, #200]	; 297b8 <flatcc_json_parser_struct_as_root@@Base+0x974>
   296ec:	vmul.f64	d0, d0, d16
   296f0:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   296f4:	vldr	d16, [pc, #180]	; 297b0 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   296f8:	vmul.f64	d0, d0, d16
   296fc:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29700:	vldr	d16, [pc, #160]	; 297a8 <flatcc_json_parser_struct_as_root@@Base+0x964>
   29704:	vmul.f64	d0, d0, d16
   29708:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2970c:	vldr	d16, [pc, #140]	; 297a0 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   29710:	vmul.f64	d0, d0, d16
   29714:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29718:	vldr	d16, [pc, #120]	; 29798 <flatcc_json_parser_struct_as_root@@Base+0x954>
   2971c:	vmul.f64	d0, d0, d16
   29720:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29724:	vldr	d16, [pc, #100]	; 29790 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   29728:	vmul.f64	d0, d0, d16
   2972c:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29730:	vldr	d16, [pc, #80]	; 29788 <flatcc_json_parser_struct_as_root@@Base+0x944>
   29734:	vmul.f64	d0, d0, d16
   29738:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2973c:	vldr	d16, [pc, #60]	; 29780 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   29740:	vmul.f64	d0, d0, d16
   29744:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29748:	vldr	d16, [pc, #40]	; 29778 <flatcc_json_parser_struct_as_root@@Base+0x934>
   2974c:	vmul.f64	d0, d0, d16
   29750:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29754:	vldr	d16, [pc, #20]	; 29770 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   29758:	vmul.f64	d0, d0, d16
   2975c:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29760:	vldr	d16, [pc, #168]	; 29810 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   29764:	vmul.f64	d0, d0, d16
   29768:	b	29468 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2976c:	nop	{0}
   29770:	usatle	lr, #2, r0, asr #30
   29774:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   29778:	ldmvc	r5!, {r6, sl, fp, pc}
   2977c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   29780:	addsvs	r3, r1, r0, lsl #26
   29784:	mvnmi	r5, #228, 16	; 0xe40000
   29788:	strbvs	ip, [lr, -r0, lsl #16]
   2978c:			; <UNDEFINED> instruction: 0x43abc16d
   29790:	ldrbhi	sl, [r8]
   29794:	cmnmi	r6, #1459617792	; 0x57000000
   29798:	strbcc	r8, [r0, r0]!
   2979c:	movtmi	ip, #4985	; 0x1379
   297a0:	ldrtcs	r0, [r4], -r0
   297a4:	movwmi	r6, #52213	; 0xcbf5
   297a8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   297ac:	sbcsmi	fp, r6, #196, 24	; 0xc400
   297b0:	strb	r0, [r0, #-0]
   297b4:	adcmi	r3, r2, #156	; 0x9c
   297b8:	andge	r0, r0, #0
   297bc:	rsbmi	r1, sp, #148, 20	; 0x94000
   297c0:	stmda	r0, {}	; <UNPREDICTABLE>
   297c4:	eorsmi	r4, r7, #7733248	; 0x760000
   297c8:	andcs	r0, r0, r0
   297cc:	andmi	sl, r2, #95	; 0x5f
   297d0:	andeq	r0, r0, r0
   297d4:	bicmi	ip, sp, r5, ror #26
   297d8:	andeq	r0, r0, r0
   297dc:	orrsmi	sp, r7, r4, lsl #15
   297e0:	andeq	r0, r0, r0
   297e4:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   297e8:	andeq	r0, r0, r0
   297ec:	smlawbmi	lr, r0, r4, r8
   297f0:	andeq	r0, r0, r0
   297f4:	rscsmi	r6, r8, r0, lsl #20
   297f8:	andeq	r0, r0, r0
   297fc:	sbcmi	r8, r3, r0, lsl #16
   29800:	andeq	r0, r0, r0
   29804:	addmi	r4, pc, r0
   29808:	andeq	r0, r0, r0
   2980c:	subsmi	r0, r9, r0
   29810:			; <UNDEFINED> instruction: 0x064dd592
   29814:	strmi	pc, [r0], #207	; 0xcf
   29818:	push	{fp, lr}
   2981c:	mov	fp, sp
   29820:	cmp	r3, #0
   29824:	beq	29834 <flatcc_json_parser_struct_as_root@@Base+0x9f0>
   29828:	mov	r3, #8
   2982c:	pop	{fp, lr}
   29830:	b	26958 <flatcc_json_parser_set_error@@Base>
   29834:	ldr	ip, [fp, #12]
   29838:	ldr	lr, [fp, #8]
   2983c:	subs	r3, lr, #256	; 0x100
   29840:	sbcs	r3, ip, #0
   29844:	ldrcc	r0, [fp, #16]
   29848:	strbcc	lr, [r0]
   2984c:	movcc	r0, r1
   29850:	popcc	{fp, pc}
   29854:	mov	r3, #7
   29858:	pop	{fp, lr}
   2985c:	b	26958 <flatcc_json_parser_set_error@@Base>
   29860:	push	{r4, r5, fp, lr}
   29864:	add	fp, sp, #8
   29868:	mov	r4, r2
   2986c:	mov	r5, r0
   29870:	bl	277a8 <flatcc_json_parser_float@@Base+0x140>
   29874:	mov	r1, r0
   29878:	ldr	r0, [r5, #12]
   2987c:	cmp	r0, #0
   29880:	movne	r0, r1
   29884:	popne	{r4, r5, fp, pc}
   29888:	mov	r0, r5
   2988c:	mov	r2, r4
   29890:	pop	{r4, r5, fp, lr}
   29894:	b	26f4c <flatcc_json_parser_skip_constant@@Base+0x8c>
   29898:	bx	lr
   2989c:	andeq	r0, r0, r0

000298a0 <flatcc_json_printer_error_string@@Base>:
   298a0:	cmp	r0, #3
   298a4:	movwhi	r0, #29146	; 0x71da
   298a8:	movthi	r0, #3
   298ac:	bxhi	lr
   298b0:	movw	r1, #36428	; 0x8e4c
   298b4:	movt	r1, #3
   298b8:	ldr	r0, [r1, r0, lsl #2]
   298bc:	bx	lr

000298c0 <flatcc_json_printer_fmt_float@@Base>:
   298c0:	vcvt.f64.f32	d0, s0
   298c4:	b	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   298c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   298cc:	add	fp, sp, #24
   298d0:	vpush	{d8}
   298d4:	sub	sp, sp, #8
   298d8:	mov	r4, r0
   298dc:	vmov.f64	d8, d0
   298e0:	bl	306ac <flatcc_json_printer_clear@@Base+0x40>
   298e4:	cmp	r4, #0
   298e8:	beq	29b68 <flatcc_json_printer_fmt_float@@Base+0x2a8>
   298ec:	mov	r3, r0
   298f0:	mov	r2, r1
   298f4:	mov	r0, #-2147483648	; 0x80000000
   298f8:	add	r1, r0, #266338304	; 0xfe00000
   298fc:	add	r1, r1, #1879048192	; 0x70000000
   29900:	lsl	r7, r2, #1
   29904:	orr	r7, r7, r3, lsr #31
   29908:	mov	r6, #0
   2990c:	subs	r6, r6, r3, lsl #1
   29910:	sbcs	r1, r1, r7
   29914:	bcs	2992c <flatcc_json_printer_fmt_float@@Base+0x6c>
   29918:	movw	r1, #34223	; 0x85af
   2991c:	movt	r1, #3
   29920:	mov	r0, r4
   29924:	bl	14f2c <sprintf@plt>
   29928:	b	29b5c <flatcc_json_printer_fmt_float@@Base+0x29c>
   2992c:	cmn	r2, #1
   29930:	ble	2993c <flatcc_json_printer_fmt_float@@Base+0x7c>
   29934:	mov	r5, r4
   29938:	b	29950 <flatcc_json_printer_fmt_float@@Base+0x90>
   2993c:	mov	r1, #45	; 0x2d
   29940:	vneg.f64	d8, d8
   29944:	mov	r5, r4
   29948:	strb	r1, [r5], #1
   2994c:	eor	r2, r2, r0
   29950:	eor	r0, r2, #267386880	; 0xff00000
   29954:	eor	r0, r0, #1879048192	; 0x70000000
   29958:	orrs	r0, r3, r0
   2995c:	beq	29974 <flatcc_json_printer_fmt_float@@Base+0xb4>
   29960:	orrs	r0, r3, r2
   29964:	bne	29984 <flatcc_json_printer_fmt_float@@Base+0xc4>
   29968:	mov	r0, #48	; 0x30
   2996c:	strh	r0, [r5], #1
   29970:	b	29b58 <flatcc_json_printer_fmt_float@@Base+0x298>
   29974:	movw	r0, #28265	; 0x6e69
   29978:	movt	r0, #102	; 0x66
   2997c:	str	r0, [r5], #3
   29980:	b	29b58 <flatcc_json_printer_fmt_float@@Base+0x298>
   29984:	mov	r1, sp
   29988:	add	r2, sp, #4
   2998c:	vmov.f64	d0, d8
   29990:	mov	r0, r5
   29994:	bl	306b8 <flatcc_json_printer_clear@@Base+0x4c>
   29998:	cmp	r0, #0
   2999c:	beq	299f4 <flatcc_json_printer_fmt_float@@Base+0x134>
   299a0:	ldr	r8, [sp]
   299a4:	sub	r0, r8, #1
   299a8:	cmp	r8, #3
   299ac:	movwlt	r0, #1
   299b0:	ldr	r7, [sp, #4]
   299b4:	rsb	r6, r7, #0
   299b8:	cmp	r0, r6
   299bc:	movge	r0, r6
   299c0:	cmn	r7, #1
   299c4:	ble	29a14 <flatcc_json_printer_fmt_float@@Base+0x154>
   299c8:	cmp	r7, #3
   299cc:	bcc	29a80 <flatcc_json_printer_fmt_float@@Base+0x1c0>
   299d0:	mov	r0, #101	; 0x65
   299d4:	strb	r0, [r5, r8]
   299d8:	add	r6, r8, #1
   299dc:	add	r1, r5, r6
   299e0:	mov	r0, r7
   299e4:	bl	30928 <flatcc_json_printer_clear@@Base+0x2bc>
   299e8:	add	r0, r0, r6
   299ec:	str	r0, [sp]
   299f0:	b	29b4c <flatcc_json_printer_fmt_float@@Base+0x28c>
   299f4:	vmov	r2, r3, d8
   299f8:	movw	r1, #34237	; 0x85bd
   299fc:	movt	r1, #3
   29a00:	mov	r0, r5
   29a04:	bl	14f2c <sprintf@plt>
   29a08:	sub	r1, r5, r4
   29a0c:	add	r0, r1, r0
   29a10:	b	29b5c <flatcc_json_printer_fmt_float@@Base+0x29c>
   29a14:	cmp	r8, r6
   29a18:	bgt	29adc <flatcc_json_printer_fmt_float@@Base+0x21c>
   29a1c:	add	r1, r8, r7
   29a20:	cmn	r1, #2
   29a24:	blt	29adc <flatcc_json_printer_fmt_float@@Base+0x21c>
   29a28:	rsb	r0, r8, #0
   29a2c:	add	r1, r5, r6
   29a30:	add	r0, r1, r0
   29a34:	add	r0, r0, #2
   29a38:	mov	r1, r5
   29a3c:	mov	r2, r8
   29a40:	bl	14e48 <memmove@plt>
   29a44:	movw	r0, #11824	; 0x2e30
   29a48:	strh	r0, [r5]
   29a4c:	rsb	r0, r7, #2
   29a50:	sub	r7, r0, r8
   29a54:	mov	r0, #2
   29a58:	cmp	r7, #3
   29a5c:	blt	29a74 <flatcc_json_printer_fmt_float@@Base+0x1b4>
   29a60:	sub	r2, r6, r8
   29a64:	add	r0, r5, #2
   29a68:	mov	r1, #48	; 0x30
   29a6c:	bl	14ef0 <memset@plt>
   29a70:	mov	r0, r7
   29a74:	add	r0, r0, r8
   29a78:	str	r0, [sp]
   29a7c:	b	29b4c <flatcc_json_printer_fmt_float@@Base+0x28c>
   29a80:	cmp	r7, #0
   29a84:	beq	29b4c <flatcc_json_printer_fmt_float@@Base+0x28c>
   29a88:	ldr	r0, [sp, #4]
   29a8c:	subs	r0, r0, #1
   29a90:	str	r0, [sp, #4]
   29a94:	blt	29b4c <flatcc_json_printer_fmt_float@@Base+0x28c>
   29a98:	ldr	r6, [sp]
   29a9c:	add	r0, r5, r6
   29aa0:	ldr	r7, [sp, #4]
   29aa4:	mvn	r1, r7
   29aa8:	orr	r1, r1, r1, asr #31
   29aac:	add	r1, r7, r1
   29ab0:	add	r2, r1, #2
   29ab4:	mov	r1, #48	; 0x30
   29ab8:	bl	14ef0 <memset@plt>
   29abc:	sub	r0, r7, #1
   29ac0:	add	r6, r6, #1
   29ac4:	cmp	r7, #0
   29ac8:	mov	r7, r0
   29acc:	bgt	29abc <flatcc_json_printer_fmt_float@@Base+0x1fc>
   29ad0:	str	r0, [sp, #4]
   29ad4:	str	r6, [sp]
   29ad8:	b	29b4c <flatcc_json_printer_fmt_float@@Base+0x28c>
   29adc:	cmn	r7, #1
   29ae0:	bgt	299d0 <flatcc_json_printer_fmt_float@@Base+0x110>
   29ae4:	cmp	r8, #2
   29ae8:	blt	299d0 <flatcc_json_printer_fmt_float@@Base+0x110>
   29aec:	cmp	r0, #1
   29af0:	blt	29b18 <flatcc_json_printer_fmt_float@@Base+0x258>
   29af4:	add	r2, r5, r8
   29af8:	mov	r1, #0
   29afc:	mov	r3, r2
   29b00:	ldrb	r6, [r3, #-1]!
   29b04:	strb	r6, [r2]
   29b08:	add	r1, r1, #1
   29b0c:	cmp	r1, r0
   29b10:	mov	r2, r3
   29b14:	blt	29b00 <flatcc_json_printer_fmt_float@@Base+0x240>
   29b18:	add	r1, r8, #1
   29b1c:	str	r1, [sp]
   29b20:	sub	r2, r8, r0
   29b24:	mov	r3, #46	; 0x2e
   29b28:	strb	r3, [r5, r2]
   29b2c:	adds	r0, r0, r7
   29b30:	str	r0, [sp, #4]
   29b34:	beq	29b4c <flatcc_json_printer_fmt_float@@Base+0x28c>
   29b38:	mov	r2, #101	; 0x65
   29b3c:	strb	r2, [r5, r1]
   29b40:	add	r6, r8, #2
   29b44:	add	r1, r5, r6
   29b48:	b	299e4 <flatcc_json_printer_fmt_float@@Base+0x124>
   29b4c:	ldr	r0, [sp]
   29b50:	mov	r1, #0
   29b54:	strb	r1, [r5, r0]!
   29b58:	sub	r0, r5, r4
   29b5c:	sub	sp, fp, #32
   29b60:	vpop	{d8}
   29b64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29b68:	movw	r0, #34092	; 0x852c
   29b6c:	movt	r0, #3
   29b70:	movw	r1, #34096	; 0x8530
   29b74:	movt	r1, #3
   29b78:	movw	r3, #34183	; 0x8587
   29b7c:	movt	r3, #3
   29b80:	mov	r2, #189	; 0xbd
   29b84:	bl	14f44 <__assert_fail@plt>

00029b88 <flatcc_json_printer_fmt_double@@Base>:
   29b88:	b	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>

00029b8c <flatcc_json_printer_fmt_bool@@Base>:
   29b8c:	cmp	r1, #0
   29b90:	movwne	r1, #29300	; 0x7274
   29b94:	movtne	r1, #25973	; 0x6575
   29b98:	strne	r1, [r0]
   29b9c:	movne	r0, #4
   29ba0:	bxne	lr
   29ba4:	mov	r1, #101	; 0x65
   29ba8:	strb	r1, [r0, #4]
   29bac:	movw	r1, #24934	; 0x6166
   29bb0:	movt	r1, #29548	; 0x736c
   29bb4:	str	r1, [r0]
   29bb8:	mov	r0, #5
   29bbc:	bx	lr

00029bc0 <flatcc_json_printer_string@@Base>:
   29bc0:	b	29bc4 <flatcc_json_printer_string@@Base+0x4>
   29bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bc8:	add	fp, sp, #28
   29bcc:	sub	sp, sp, #4
   29bd0:	mov	r5, r2
   29bd4:	mov	r4, r0
   29bd8:	mov	r7, r0
   29bdc:	ldr	r0, [r7, #20]!
   29be0:	add	r2, r0, #1
   29be4:	str	r2, [r7]
   29be8:	mov	r2, #34	; 0x22
   29bec:	strb	r2, [r0]
   29bf0:	mov	r9, #92	; 0x5c
   29bf4:	b	29c00 <flatcc_json_printer_string@@Base+0x40>
   29bf8:	sub	r5, r0, #1
   29bfc:	add	r1, r8, #1
   29c00:	ldrb	sl, [r1]
   29c04:	mov	r8, r1
   29c08:	cmp	sl, #32
   29c0c:	bcc	29c2c <flatcc_json_printer_string@@Base+0x6c>
   29c10:	uxtb	r0, sl
   29c14:	cmp	r0, #34	; 0x22
   29c18:	cmpne	r0, #92	; 0x5c
   29c1c:	beq	29c2c <flatcc_json_printer_string@@Base+0x6c>
   29c20:	ldrb	sl, [r8, #1]!
   29c24:	cmp	sl, #31
   29c28:	bhi	29c10 <flatcc_json_printer_string@@Base+0x50>
   29c2c:	sub	r6, r8, r1
   29c30:	mov	r0, r4
   29c34:	mov	r2, r6
   29c38:	bl	29dfc <flatcc_json_printer_write@@Base+0x4>
   29c3c:	ldr	r1, [r4, #20]
   29c40:	add	r0, r1, #1
   29c44:	str	r0, [r4, #20]
   29c48:	subs	r0, r5, r6
   29c4c:	beq	29de8 <flatcc_json_printer_string@@Base+0x228>
   29c50:	strb	r9, [r1]
   29c54:	mvn	r1, #7
   29c58:	uxtab	r1, r1, sl
   29c5c:	cmp	r1, #26
   29c60:	bhi	29cec <flatcc_json_printer_string@@Base+0x12c>
   29c64:	add	r2, pc, #0
   29c68:	ldr	pc, [r2, r1, lsl #2]
   29c6c:	ldrdeq	r9, [r2], -r8
   29c70:	andeq	r9, r2, r0, lsl #27
   29c74:	muleq	r2, r4, sp
   29c78:	andeq	r9, r2, ip, lsl #26
   29c7c:	andeq	r9, r2, r8, lsr #27
   29c80:			; <UNDEFINED> instruction: 0x00029dbc
   29c84:	andeq	r9, r2, ip, lsl #26
   29c88:	andeq	r9, r2, ip, lsl #26
   29c8c:	andeq	r9, r2, ip, lsl #26
   29c90:	andeq	r9, r2, ip, lsl #26
   29c94:	andeq	r9, r2, ip, lsl #26
   29c98:	andeq	r9, r2, ip, lsl #26
   29c9c:	andeq	r9, r2, ip, lsl #26
   29ca0:	andeq	r9, r2, ip, lsl #26
   29ca4:	andeq	r9, r2, ip, lsl #26
   29ca8:	andeq	r9, r2, ip, lsl #26
   29cac:	andeq	r9, r2, ip, lsl #26
   29cb0:	andeq	r9, r2, ip, lsl #26
   29cb4:	andeq	r9, r2, ip, lsl #26
   29cb8:	andeq	r9, r2, ip, lsl #26
   29cbc:	andeq	r9, r2, ip, lsl #26
   29cc0:	andeq	r9, r2, ip, lsl #26
   29cc4:	andeq	r9, r2, ip, lsl #26
   29cc8:	andeq	r9, r2, ip, lsl #26
   29ccc:	andeq	r9, r2, ip, lsl #26
   29cd0:	andeq	r9, r2, ip, lsl #26
   29cd4:	ldrdeq	r9, [r2], -r0
   29cd8:	ldr	r1, [r7]
   29cdc:	add	r2, r1, #1
   29ce0:	str	r2, [r7]
   29ce4:	mov	r2, #98	; 0x62
   29ce8:	b	29de0 <flatcc_json_printer_string@@Base+0x220>
   29cec:	uxtb	r1, sl
   29cf0:	cmp	r1, #92	; 0x5c
   29cf4:	bne	29d0c <flatcc_json_printer_string@@Base+0x14c>
   29cf8:	ldr	r1, [r7]
   29cfc:	add	r2, r1, #1
   29d00:	str	r2, [r7]
   29d04:	strb	r9, [r1]
   29d08:	b	29bf8 <flatcc_json_printer_string@@Base+0x38>
   29d0c:	ldr	r1, [r7]
   29d10:	add	r2, r1, #1
   29d14:	str	r2, [r7]
   29d18:	mov	r2, #117	; 0x75
   29d1c:	strb	r2, [r1]
   29d20:	ldr	r1, [r7]
   29d24:	add	r2, r1, #1
   29d28:	str	r2, [r7]
   29d2c:	mov	r3, #48	; 0x30
   29d30:	strb	r3, [r1]
   29d34:	ldr	r1, [r7]
   29d38:	add	r2, r1, #1
   29d3c:	str	r2, [r7]
   29d40:	strb	r3, [r1]
   29d44:	ldr	r1, [r7]
   29d48:	add	r2, r1, #1
   29d4c:	str	r2, [r7]
   29d50:	and	r2, sl, #240	; 0xf0
   29d54:	orr	r2, r3, r2, lsr #4
   29d58:	strb	r2, [r1]
   29d5c:	ldr	r1, [r7]
   29d60:	add	r2, r1, #1
   29d64:	str	r2, [r7]
   29d68:	and	r2, sl, #15
   29d6c:	cmp	r2, #10
   29d70:	mov	r3, #87	; 0x57
   29d74:	movwcc	r3, #48	; 0x30
   29d78:	add	r2, r3, r2
   29d7c:	b	29de0 <flatcc_json_printer_string@@Base+0x220>
   29d80:	ldr	r1, [r7]
   29d84:	add	r2, r1, #1
   29d88:	str	r2, [r7]
   29d8c:	mov	r2, #116	; 0x74
   29d90:	b	29de0 <flatcc_json_printer_string@@Base+0x220>
   29d94:	ldr	r1, [r7]
   29d98:	add	r2, r1, #1
   29d9c:	str	r2, [r7]
   29da0:	mov	r2, #110	; 0x6e
   29da4:	b	29de0 <flatcc_json_printer_string@@Base+0x220>
   29da8:	ldr	r1, [r7]
   29dac:	add	r2, r1, #1
   29db0:	str	r2, [r7]
   29db4:	mov	r2, #102	; 0x66
   29db8:	b	29de0 <flatcc_json_printer_string@@Base+0x220>
   29dbc:	ldr	r1, [r7]
   29dc0:	add	r2, r1, #1
   29dc4:	str	r2, [r7]
   29dc8:	mov	r2, #114	; 0x72
   29dcc:	b	29de0 <flatcc_json_printer_string@@Base+0x220>
   29dd0:	ldr	r1, [r7]
   29dd4:	add	r2, r1, #1
   29dd8:	str	r2, [r7]
   29ddc:	mov	r2, #34	; 0x22
   29de0:	strb	r2, [r1]
   29de4:	b	29bf8 <flatcc_json_printer_string@@Base+0x38>
   29de8:	mov	r0, #34	; 0x22
   29dec:	strb	r0, [r1]
   29df0:	sub	sp, fp, #28
   29df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029df8 <flatcc_json_printer_write@@Base>:
   29df8:	b	29dfc <flatcc_json_printer_write@@Base+0x4>
   29dfc:	push	{r4, r5, fp, lr}
   29e00:	add	fp, sp, #8
   29e04:	mov	r4, r2
   29e08:	mov	r5, r0
   29e0c:	ldr	r2, [r0, #16]
   29e10:	ldr	r0, [r0, #20]
   29e14:	add	r3, r0, r4
   29e18:	cmp	r3, r2
   29e1c:	bcs	29e38 <flatcc_json_printer_write@@Base+0x40>
   29e20:	mov	r2, r4
   29e24:	bl	14e60 <memcpy@plt>
   29e28:	ldr	r0, [r5, #20]
   29e2c:	add	r0, r0, r4
   29e30:	str	r0, [r5, #20]
   29e34:	pop	{r4, r5, fp, pc}
   29e38:	mov	r0, r5
   29e3c:	mov	r2, r4
   29e40:	pop	{r4, r5, fp, lr}
   29e44:	b	31208 <flatcc_json_printer_clear@@Base+0xb9c>

00029e48 <flatcc_json_printer_nl@@Base>:
   29e48:	ldr	r1, [r0, #20]
   29e4c:	add	r2, r1, #1
   29e50:	str	r2, [r0, #20]
   29e54:	mov	r2, #10
   29e58:	strb	r2, [r1]
   29e5c:	b	29e60 <flatcc_json_printer_nl@@Base+0x18>
   29e60:	ldr	r1, [r0, #16]
   29e64:	ldr	r2, [r0, #20]
   29e68:	cmp	r2, r1
   29e6c:	bxcc	lr
   29e70:	ldr	r2, [r0, #44]	; 0x2c
   29e74:	mov	r1, #0
   29e78:	bx	r2

00029e7c <flatcc_json_printer_char@@Base>:
   29e7c:	ldr	r2, [r0, #20]
   29e80:	add	r3, r2, #1
   29e84:	str	r3, [r0, #20]
   29e88:	strb	r1, [r2]
   29e8c:	bx	lr

00029e90 <flatcc_json_printer_indent@@Base>:
   29e90:	b	29e94 <flatcc_json_printer_indent@@Base+0x4>
   29e94:	push	{r4, r5, r6, sl, fp, lr}
   29e98:	add	fp, sp, #16
   29e9c:	mov	r4, r0
   29ea0:	ldr	r1, [r0, #16]
   29ea4:	ldr	r0, [r0, #20]
   29ea8:	ldrb	r2, [r4, #25]
   29eac:	ldr	r3, [r4, #32]
   29eb0:	mla	r5, r3, r2, r0
   29eb4:	mul	r6, r3, r2
   29eb8:	cmp	r5, r1
   29ebc:	bls	29ed0 <flatcc_json_printer_indent@@Base+0x40>
   29ec0:	mov	r0, r4
   29ec4:	mov	r1, r6
   29ec8:	pop	{r4, r5, r6, sl, fp, lr}
   29ecc:	b	312b0 <flatcc_json_printer_clear@@Base+0xc44>
   29ed0:	mov	r1, #32
   29ed4:	mov	r2, r6
   29ed8:	bl	14ef0 <memset@plt>
   29edc:	ldr	r0, [r4, #20]
   29ee0:	add	r0, r0, r6
   29ee4:	str	r0, [r4, #20]
   29ee8:	pop	{r4, r5, r6, sl, fp, pc}

00029eec <flatcc_json_printer_add_level@@Base>:
   29eec:	ldr	r2, [r0, #32]
   29ef0:	add	r1, r2, r1
   29ef4:	str	r1, [r0, #32]
   29ef8:	bx	lr

00029efc <flatcc_json_printer_get_level@@Base>:
   29efc:	ldr	r0, [r0, #32]
   29f00:	bx	lr

00029f04 <flatcc_json_printer_uint8@@Base>:
   29f04:	push	{r4, sl, fp, lr}
   29f08:	add	fp, sp, #8
   29f0c:	mov	r2, r1
   29f10:	mov	r4, r0
   29f14:	ldr	r1, [r0, #20]
   29f18:	mov	r0, r2
   29f1c:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   29f20:	ldr	r1, [r4, #20]
   29f24:	add	r0, r1, r0
   29f28:	str	r0, [r4, #20]
   29f2c:	pop	{r4, sl, fp, pc}
   29f30:	mov	r2, #0
   29f34:	cmp	r0, #100	; 0x64
   29f38:	bcc	29f80 <flatcc_json_printer_uint8@@Base+0x7c>
   29f3c:	strb	r2, [r1, #3]
   29f40:	movw	r2, #34079	; 0x851f
   29f44:	movt	r2, #20971	; 0x51eb
   29f48:	umull	r2, r3, r0, r2
   29f4c:	mov	r2, #48	; 0x30
   29f50:	orr	r2, r2, r3, lsr #5
   29f54:	strb	r2, [r1]
   29f58:	lsr	r2, r3, #5
   29f5c:	mov	r3, #100	; 0x64
   29f60:	mls	r0, r2, r3, r0
   29f64:	movw	r2, #34416	; 0x8670
   29f68:	movt	r2, #3
   29f6c:	add	r0, r2, r0, lsl #1
   29f70:	ldrh	r0, [r0]
   29f74:	strh	r0, [r1, #1]
   29f78:	mov	r0, #3
   29f7c:	bx	lr
   29f80:	cmp	r0, #10
   29f84:	bcc	29fc0 <flatcc_json_printer_uint8@@Base+0xbc>
   29f88:	strb	r2, [r1, #2]
   29f8c:	movw	r2, #34079	; 0x851f
   29f90:	movt	r2, #20971	; 0x51eb
   29f94:	umull	r2, r3, r0, r2
   29f98:	lsr	r2, r3, #5
   29f9c:	mov	r3, #100	; 0x64
   29fa0:	mls	r0, r2, r3, r0
   29fa4:	movw	r2, #34416	; 0x8670
   29fa8:	movt	r2, #3
   29fac:	add	r0, r2, r0, lsl #1
   29fb0:	ldrh	r0, [r0]
   29fb4:	strh	r0, [r1]
   29fb8:	mov	r0, #2
   29fbc:	bx	lr
   29fc0:	strb	r2, [r1, #1]
   29fc4:	add	r0, r0, #48	; 0x30
   29fc8:	strb	r0, [r1]
   29fcc:	mov	r0, #1
   29fd0:	bx	lr

00029fd4 <flatcc_json_printer_uint16@@Base>:
   29fd4:	push	{r4, sl, fp, lr}
   29fd8:	add	fp, sp, #8
   29fdc:	mov	r2, r1
   29fe0:	mov	r4, r0
   29fe4:	ldr	r1, [r0, #20]
   29fe8:	mov	r0, r2
   29fec:	bl	2a000 <flatcc_json_printer_uint16@@Base+0x2c>
   29ff0:	ldr	r1, [r4, #20]
   29ff4:	add	r0, r1, r0
   29ff8:	str	r0, [r4, #20]
   29ffc:	pop	{r4, sl, fp, pc}
   2a000:	mov	ip, r0
   2a004:	cmp	r0, #1000	; 0x3e8
   2a008:	bcc	2a020 <flatcc_json_printer_uint16@@Base+0x4c>
   2a00c:	movw	r3, #9999	; 0x270f
   2a010:	mov	r0, #4
   2a014:	cmp	ip, r3
   2a018:	movwhi	r0, #5
   2a01c:	b	2a044 <flatcc_json_printer_uint16@@Base+0x70>
   2a020:	cmp	ip, #100	; 0x64
   2a024:	bcc	2a038 <flatcc_json_printer_uint16@@Base+0x64>
   2a028:	mov	r0, #0
   2a02c:	strb	r0, [r1, #3]!
   2a030:	mov	r0, #3
   2a034:	b	2a0e0 <flatcc_json_printer_uint16@@Base+0x10c>
   2a038:	mov	r0, #1
   2a03c:	cmp	ip, #9
   2a040:	movwhi	r0, #2
   2a044:	mov	r3, #0
   2a048:	strb	r3, [r1, r0]!
   2a04c:	tst	r0, #1
   2a050:	bne	2a098 <flatcc_json_printer_uint16@@Base+0xc4>
   2a054:	cmp	r0, #2
   2a058:	beq	2a120 <flatcc_json_printer_uint16@@Base+0x14c>
   2a05c:	cmp	r0, #4
   2a060:	bxne	lr
   2a064:	movw	r2, #34079	; 0x851f
   2a068:	movt	r2, #20971	; 0x51eb
   2a06c:	umull	r2, r3, ip, r2
   2a070:	lsr	r3, r3, #5
   2a074:	mov	r2, #100	; 0x64
   2a078:	mls	r2, r3, r2, ip
   2a07c:	uxth	ip, r2
   2a080:	movw	r2, #34416	; 0x8670
   2a084:	movt	r2, #3
   2a088:	add	r2, r2, ip, lsl #1
   2a08c:	ldrh	r2, [r2]
   2a090:	strh	r2, [r1, #-2]!
   2a094:	b	2a124 <flatcc_json_printer_uint16@@Base+0x150>
   2a098:	cmp	r0, #1
   2a09c:	beq	2a158 <flatcc_json_printer_uint16@@Base+0x184>
   2a0a0:	cmp	r0, #3
   2a0a4:	beq	2a0e0 <flatcc_json_printer_uint16@@Base+0x10c>
   2a0a8:	cmp	r0, #5
   2a0ac:	bne	2a154 <flatcc_json_printer_uint16@@Base+0x180>
   2a0b0:	movw	r3, #34079	; 0x851f
   2a0b4:	movt	r3, #20971	; 0x51eb
   2a0b8:	umull	r3, r2, ip, r3
   2a0bc:	lsr	r2, r2, #5
   2a0c0:	mov	r3, #100	; 0x64
   2a0c4:	mls	ip, r2, r3, ip
   2a0c8:	movw	r3, #34416	; 0x8670
   2a0cc:	movt	r3, #3
   2a0d0:	add	r3, r3, ip, lsl #1
   2a0d4:	ldrh	r3, [r3]
   2a0d8:	strh	r3, [r1, #-2]!
   2a0dc:	mov	ip, r2
   2a0e0:	uxth	r2, ip
   2a0e4:	movw	r3, #34079	; 0x851f
   2a0e8:	movt	r3, #20971	; 0x51eb
   2a0ec:	umull	r2, r3, r2, r3
   2a0f0:	lsr	r3, r3, #5
   2a0f4:	mov	r2, #100	; 0x64
   2a0f8:	mls	r2, r3, r2, ip
   2a0fc:	uxth	ip, r2
   2a100:	movw	r2, #34416	; 0x8670
   2a104:	movt	r2, #3
   2a108:	add	r2, r2, ip, lsl #1
   2a10c:	ldrh	r2, [r2]
   2a110:	strh	r2, [r1, #-2]!
   2a114:	add	r2, r3, #48	; 0x30
   2a118:	strb	r2, [r1, #-1]
   2a11c:	bx	lr
   2a120:	mov	r3, ip
   2a124:	uxth	ip, r3
   2a128:	movw	r3, #34079	; 0x851f
   2a12c:	movt	r3, #20971	; 0x51eb
   2a130:	umull	r3, r2, ip, r3
   2a134:	lsr	r2, r2, #5
   2a138:	mov	r3, #100	; 0x64
   2a13c:	mls	r2, r2, r3, ip
   2a140:	movw	r3, #34416	; 0x8670
   2a144:	movt	r3, #3
   2a148:	add	r2, r3, r2, lsl #1
   2a14c:	ldrh	r2, [r2]
   2a150:	strh	r2, [r1, #-2]
   2a154:	bx	lr
   2a158:	mov	r3, ip
   2a15c:	b	2a114 <flatcc_json_printer_uint16@@Base+0x140>

0002a160 <flatcc_json_printer_uint32@@Base>:
   2a160:	push	{r4, sl, fp, lr}
   2a164:	add	fp, sp, #8
   2a168:	mov	r2, r1
   2a16c:	mov	r4, r0
   2a170:	ldr	r1, [r0, #20]
   2a174:	mov	r0, r2
   2a178:	bl	2a18c <flatcc_json_printer_uint32@@Base+0x2c>
   2a17c:	ldr	r1, [r4, #20]
   2a180:	add	r0, r1, r0
   2a184:	str	r0, [r4, #20]
   2a188:	pop	{r4, sl, fp, pc}
   2a18c:	mov	ip, r0
   2a190:	movw	r0, #10000	; 0x2710
   2a194:	cmp	ip, r0
   2a198:	bcc	2a1cc <flatcc_json_printer_uint32@@Base+0x6c>
   2a19c:	movw	r0, #38528	; 0x9680
   2a1a0:	movt	r0, #152	; 0x98
   2a1a4:	cmp	ip, r0
   2a1a8:	bcc	2a1e8 <flatcc_json_printer_uint32@@Base+0x88>
   2a1ac:	movw	r0, #51712	; 0xca00
   2a1b0:	movt	r0, #15258	; 0x3b9a
   2a1b4:	cmp	ip, r0
   2a1b8:	bcc	2a218 <flatcc_json_printer_uint32@@Base+0xb8>
   2a1bc:	mov	r0, #0
   2a1c0:	strb	r0, [r1, #10]!
   2a1c4:	mov	r0, #10
   2a1c8:	b	2a254 <flatcc_json_printer_uint32@@Base+0xf4>
   2a1cc:	cmp	ip, #100	; 0x64
   2a1d0:	bcc	2a208 <flatcc_json_printer_uint32@@Base+0xa8>
   2a1d4:	lsr	r3, ip, #3
   2a1d8:	mov	r0, #3
   2a1dc:	cmp	r3, #124	; 0x7c
   2a1e0:	movwhi	r0, #4
   2a1e4:	b	2a244 <flatcc_json_printer_uint32@@Base+0xe4>
   2a1e8:	movw	r0, #16960	; 0x4240
   2a1ec:	movt	r0, #15
   2a1f0:	cmp	ip, r0
   2a1f4:	bcc	2a230 <flatcc_json_printer_uint32@@Base+0xd0>
   2a1f8:	mov	r0, #0
   2a1fc:	strb	r0, [r1, #7]!
   2a200:	mov	r0, #7
   2a204:	b	2a388 <flatcc_json_printer_uint32@@Base+0x228>
   2a208:	mov	r0, #1
   2a20c:	cmp	ip, #9
   2a210:	movwhi	r0, #2
   2a214:	b	2a244 <flatcc_json_printer_uint32@@Base+0xe4>
   2a218:	movw	r3, #57599	; 0xe0ff
   2a21c:	movt	r3, #1525	; 0x5f5
   2a220:	mov	r0, #8
   2a224:	cmp	ip, r3
   2a228:	movwhi	r0, #9
   2a22c:	b	2a244 <flatcc_json_printer_uint32@@Base+0xe4>
   2a230:	movw	r3, #34463	; 0x869f
   2a234:	movt	r3, #1
   2a238:	mov	r0, #5
   2a23c:	cmp	ip, r3
   2a240:	movwhi	r0, #6
   2a244:	mov	r3, #0
   2a248:	strb	r3, [r1, r0]!
   2a24c:	tst	r0, #1
   2a250:	bne	2a388 <flatcc_json_printer_uint32@@Base+0x228>
   2a254:	lsr	r2, r0, #1
   2a258:	orr	r2, r2, r0, lsl #3
   2a25c:	eor	r3, r2, #4
   2a260:	sbfx	r2, r3, #0, #4
   2a264:	cmp	r2, #0
   2a268:	blt	2a384 <flatcc_json_printer_uint32@@Base+0x224>
   2a26c:	and	r2, r3, #15
   2a270:	add	r3, pc, #0
   2a274:	ldr	pc, [r3, r2, lsl #2]
   2a278:	andeq	sl, r2, r8, asr #5
   2a27c:	muleq	r2, r8, r2
   2a280:	andeq	sl, r2, r4, lsl #7
   2a284:	andeq	sl, r2, r4, lsl #7
   2a288:	andeq	sl, r2, r4, lsl #7
   2a28c:	andeq	sl, r2, r8, asr r3
   2a290:	andeq	sl, r2, r8, lsr #6
   2a294:	strdeq	sl, [r2], -r8
   2a298:	movw	r2, #34079	; 0x851f
   2a29c:	movt	r2, #20971	; 0x51eb
   2a2a0:	umull	r2, r3, ip, r2
   2a2a4:	lsr	r2, r3, #5
   2a2a8:	mov	r3, #100	; 0x64
   2a2ac:	mls	ip, r2, r3, ip
   2a2b0:	movw	r3, #34416	; 0x8670
   2a2b4:	movt	r3, #3
   2a2b8:	add	r3, r3, ip, lsl #1
   2a2bc:	ldrh	r3, [r3]
   2a2c0:	strh	r3, [r1, #-2]!
   2a2c4:	mov	ip, r2
   2a2c8:	movw	r2, #34079	; 0x851f
   2a2cc:	movt	r2, #20971	; 0x51eb
   2a2d0:	umull	r2, r3, ip, r2
   2a2d4:	lsr	r2, r3, #5
   2a2d8:	mov	r3, #100	; 0x64
   2a2dc:	mls	ip, r2, r3, ip
   2a2e0:	movw	r3, #34416	; 0x8670
   2a2e4:	movt	r3, #3
   2a2e8:	add	r3, r3, ip, lsl #1
   2a2ec:	ldrh	r3, [r3]
   2a2f0:	strh	r3, [r1, #-2]!
   2a2f4:	mov	ip, r2
   2a2f8:	movw	r2, #34079	; 0x851f
   2a2fc:	movt	r2, #20971	; 0x51eb
   2a300:	umull	r2, r3, ip, r2
   2a304:	lsr	r2, r3, #5
   2a308:	mov	r3, #100	; 0x64
   2a30c:	mls	ip, r2, r3, ip
   2a310:	movw	r3, #34416	; 0x8670
   2a314:	movt	r3, #3
   2a318:	add	r3, r3, ip, lsl #1
   2a31c:	ldrh	r3, [r3]
   2a320:	strh	r3, [r1, #-2]!
   2a324:	mov	ip, r2
   2a328:	movw	r2, #34079	; 0x851f
   2a32c:	movt	r2, #20971	; 0x51eb
   2a330:	umull	r2, r3, ip, r2
   2a334:	lsr	r2, r3, #5
   2a338:	mov	r3, #100	; 0x64
   2a33c:	mls	ip, r2, r3, ip
   2a340:	movw	r3, #34416	; 0x8670
   2a344:	movt	r3, #3
   2a348:	add	r3, r3, ip, lsl #1
   2a34c:	ldrh	r3, [r3]
   2a350:	strh	r3, [r1, #-2]!
   2a354:	mov	ip, r2
   2a358:	movw	r2, #34079	; 0x851f
   2a35c:	movt	r2, #20971	; 0x51eb
   2a360:	umull	r2, r3, ip, r2
   2a364:	lsr	r2, r3, #5
   2a368:	mov	r3, #100	; 0x64
   2a36c:	mls	r2, r2, r3, ip
   2a370:	movw	r3, #34416	; 0x8670
   2a374:	movt	r3, #3
   2a378:	add	r2, r3, r2, lsl #1
   2a37c:	ldrh	r2, [r2]
   2a380:	strh	r2, [r1, #-2]
   2a384:	bx	lr
   2a388:	add	r3, r0, #7
   2a38c:	ubfx	r2, r3, #1, #3
   2a390:	orr	r3, r2, r3, lsl #3
   2a394:	sbfx	r2, r3, #0, #4
   2a398:	cmp	r2, #0
   2a39c:	bxlt	lr
   2a3a0:	and	r2, r3, #15
   2a3a4:	add	r3, pc, #0
   2a3a8:	ldr	pc, [r3, r2, lsl #2]
   2a3ac:	andeq	sl, r2, ip, asr #7
   2a3b0:	andeq	sl, r2, r4, lsl #7
   2a3b4:	andeq	sl, r2, r4, lsl #7
   2a3b8:	andeq	sl, r2, r4, lsl #7
   2a3bc:	andeq	sl, r2, ip, lsl #9
   2a3c0:	andeq	sl, r2, ip, asr r4
   2a3c4:	andeq	sl, r2, ip, lsr #8
   2a3c8:	strdeq	sl, [r2], -ip
   2a3cc:	movw	r2, #34079	; 0x851f
   2a3d0:	movt	r2, #20971	; 0x51eb
   2a3d4:	umull	r2, r3, ip, r2
   2a3d8:	lsr	r2, r3, #5
   2a3dc:	mov	r3, #100	; 0x64
   2a3e0:	mls	ip, r2, r3, ip
   2a3e4:	movw	r3, #34416	; 0x8670
   2a3e8:	movt	r3, #3
   2a3ec:	add	r3, r3, ip, lsl #1
   2a3f0:	ldrh	r3, [r3]
   2a3f4:	strh	r3, [r1, #-2]!
   2a3f8:	mov	ip, r2
   2a3fc:	movw	r2, #34079	; 0x851f
   2a400:	movt	r2, #20971	; 0x51eb
   2a404:	umull	r2, r3, ip, r2
   2a408:	lsr	r2, r3, #5
   2a40c:	mov	r3, #100	; 0x64
   2a410:	mls	ip, r2, r3, ip
   2a414:	movw	r3, #34416	; 0x8670
   2a418:	movt	r3, #3
   2a41c:	add	r3, r3, ip, lsl #1
   2a420:	ldrh	r3, [r3]
   2a424:	strh	r3, [r1, #-2]!
   2a428:	mov	ip, r2
   2a42c:	movw	r2, #34079	; 0x851f
   2a430:	movt	r2, #20971	; 0x51eb
   2a434:	umull	r2, r3, ip, r2
   2a438:	lsr	r2, r3, #5
   2a43c:	mov	r3, #100	; 0x64
   2a440:	mls	ip, r2, r3, ip
   2a444:	movw	r3, #34416	; 0x8670
   2a448:	movt	r3, #3
   2a44c:	add	r3, r3, ip, lsl #1
   2a450:	ldrh	r3, [r3]
   2a454:	strh	r3, [r1, #-2]!
   2a458:	mov	ip, r2
   2a45c:	movw	r2, #34079	; 0x851f
   2a460:	movt	r2, #20971	; 0x51eb
   2a464:	umull	r2, r3, ip, r2
   2a468:	lsr	r2, r3, #5
   2a46c:	mov	r3, #100	; 0x64
   2a470:	mls	ip, r2, r3, ip
   2a474:	movw	r3, #34416	; 0x8670
   2a478:	movt	r3, #3
   2a47c:	add	r3, r3, ip, lsl #1
   2a480:	ldrh	r3, [r3]
   2a484:	strh	r3, [r1, #-2]!
   2a488:	mov	ip, r2
   2a48c:	add	r2, ip, #48	; 0x30
   2a490:	strb	r2, [r1, #-1]
   2a494:	bx	lr

0002a498 <flatcc_json_printer_uint64@@Base>:
   2a498:	push	{r4, sl, fp, lr}
   2a49c:	add	fp, sp, #8
   2a4a0:	mov	r1, r3
   2a4a4:	mov	r3, r2
   2a4a8:	mov	r4, r0
   2a4ac:	ldr	r2, [r0, #20]
   2a4b0:	mov	r0, r3
   2a4b4:	bl	2a4c8 <flatcc_json_printer_uint64@@Base+0x30>
   2a4b8:	ldr	r1, [r4, #20]
   2a4bc:	add	r0, r1, r0
   2a4c0:	str	r0, [r4, #20]
   2a4c4:	pop	{r4, sl, fp, pc}
   2a4c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2a4cc:	add	fp, sp, #24
   2a4d0:	mov	r4, r2
   2a4d4:	mov	r7, r0
   2a4d8:	movw	r0, #51711	; 0xc9ff
   2a4dc:	movt	r0, #15258	; 0x3b9a
   2a4e0:	subs	r0, r0, r7
   2a4e4:	rscs	r0, r1, #0
   2a4e8:	bcc	2a4fc <flatcc_json_printer_uint64@@Base+0x64>
   2a4ec:	mov	r0, r7
   2a4f0:	mov	r1, r4
   2a4f4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2a4f8:	b	2a18c <flatcc_json_printer_uint32@@Base+0x2c>
   2a4fc:	mov	r6, r1
   2a500:	movw	r0, #2328	; 0x918
   2a504:	movw	r1, #40960	; 0xa000
   2a508:	movt	r1, #20082	; 0x4e72
   2a50c:	subs	r1, r7, r1
   2a510:	sbcs	r0, r6, r0
   2a514:	bcc	2a574 <flatcc_json_printer_uint64@@Base+0xdc>
   2a518:	movw	r0, #34546	; 0x86f2
   2a51c:	movt	r0, #35	; 0x23
   2a520:	movw	r1, #0
   2a524:	movt	r1, #28609	; 0x6fc1
   2a528:	subs	r1, r7, r1
   2a52c:	sbcs	r0, r6, r0
   2a530:	bcc	2a5a4 <flatcc_json_printer_uint64@@Base+0x10c>
   2a534:	movw	r0, #46771	; 0xb6b3
   2a538:	movt	r0, #3552	; 0xde0
   2a53c:	movw	r1, #0
   2a540:	movt	r1, #42852	; 0xa764
   2a544:	subs	r1, r7, r1
   2a548:	sbcs	r0, r6, r0
   2a54c:	bcc	2a5ec <flatcc_json_printer_uint64@@Base+0x154>
   2a550:	mov	r8, #19
   2a554:	movw	r0, #8964	; 0x2304
   2a558:	movt	r0, #35527	; 0x8ac7
   2a55c:	movw	r1, #65535	; 0xffff
   2a560:	movt	r1, #35303	; 0x89e7
   2a564:	subs	r1, r1, r7
   2a568:	sbcs	r0, r0, r6
   2a56c:	movwcc	r8, #20
   2a570:	b	2a62c <flatcc_json_printer_uint64@@Base+0x194>
   2a574:	movw	r0, #59392	; 0xe800
   2a578:	movt	r0, #18550	; 0x4876
   2a57c:	subs	r0, r7, r0
   2a580:	sbcs	r0, r6, #23
   2a584:	bcc	2a5d0 <flatcc_json_printer_uint64@@Base+0x138>
   2a588:	mov	r8, #12
   2a58c:	movw	r0, #4095	; 0xfff
   2a590:	movt	r0, #54437	; 0xd4a5
   2a594:	subs	r0, r0, r7
   2a598:	rscs	r0, r6, #232	; 0xe8
   2a59c:	movwcc	r8, #13
   2a5a0:	b	2a62c <flatcc_json_printer_uint64@@Base+0x194>
   2a5a4:	movw	r0, #36222	; 0x8d7e
   2a5a8:	movt	r0, #3
   2a5ac:	movw	r1, #32768	; 0x8000
   2a5b0:	movt	r1, #42182	; 0xa4c6
   2a5b4:	subs	r1, r7, r1
   2a5b8:	sbcs	r0, r6, r0
   2a5bc:	bcc	2a610 <flatcc_json_printer_uint64@@Base+0x178>
   2a5c0:	mov	r0, #0
   2a5c4:	strb	r0, [r4, #16]!
   2a5c8:	mov	r8, #16
   2a5cc:	b	2a6ec <flatcc_json_printer_uint64@@Base+0x254>
   2a5d0:	mov	r8, #10
   2a5d4:	movw	r0, #58367	; 0xe3ff
   2a5d8:	movt	r0, #21515	; 0x540b
   2a5dc:	subs	r0, r0, r7
   2a5e0:	rscs	r0, r6, #2
   2a5e4:	movwcc	r8, #11
   2a5e8:	b	2a62c <flatcc_json_printer_uint64@@Base+0x194>
   2a5ec:	mov	r8, #17
   2a5f0:	movw	r0, #17784	; 0x4578
   2a5f4:	movt	r0, #355	; 0x163
   2a5f8:	movw	r1, #65535	; 0xffff
   2a5fc:	movt	r1, #23945	; 0x5d89
   2a600:	subs	r1, r1, r7
   2a604:	sbcs	r0, r0, r6
   2a608:	movwcc	r8, #18
   2a60c:	b	2a62c <flatcc_json_printer_uint64@@Base+0x194>
   2a610:	mov	r8, #14
   2a614:	movw	r0, #23283	; 0x5af3
   2a618:	movw	r1, #16383	; 0x3fff
   2a61c:	movt	r1, #4218	; 0x107a
   2a620:	subs	r1, r1, r7
   2a624:	sbcs	r0, r0, r6
   2a628:	movwcc	r8, #15
   2a62c:	mov	r0, #0
   2a630:	strb	r0, [r4, r8]!
   2a634:	tst	r8, #1
   2a638:	bne	2a7d0 <flatcc_json_printer_uint64@@Base+0x338>
   2a63c:	sub	r0, r8, #10
   2a640:	cmp	r0, #10
   2a644:	bhi	2a944 <flatcc_json_printer_uint64@@Base+0x4ac>
   2a648:	add	r1, pc, #0
   2a64c:	ldr	pc, [r1, r0, lsl #2]
   2a650:	muleq	r2, r4, r7
   2a654:	andeq	sl, r2, r4, asr #18
   2a658:	andeq	sl, r2, ip, asr r7
   2a65c:	andeq	sl, r2, r4, asr #18
   2a660:	andeq	sl, r2, r4, lsr #14
   2a664:	andeq	sl, r2, r4, asr #18
   2a668:	andeq	sl, r2, ip, ror #13
   2a66c:	andeq	sl, r2, r4, asr #18
   2a670:			; <UNDEFINED> instruction: 0x0002a6b4
   2a674:	andeq	sl, r2, r4, asr #18
   2a678:	andeq	sl, r2, ip, ror r6
   2a67c:	mov	r5, #100	; 0x64
   2a680:	mov	r0, r7
   2a684:	mov	r1, r6
   2a688:	mov	r2, #100	; 0x64
   2a68c:	mov	r3, #0
   2a690:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a694:	mov	r6, r1
   2a698:	mls	r1, r0, r5, r7
   2a69c:	movw	r2, #34416	; 0x8670
   2a6a0:	movt	r2, #3
   2a6a4:	add	r1, r2, r1, lsl #1
   2a6a8:	ldrh	r1, [r1]
   2a6ac:	strh	r1, [r4, #-2]!
   2a6b0:	mov	r7, r0
   2a6b4:	mov	r5, #100	; 0x64
   2a6b8:	mov	r0, r7
   2a6bc:	mov	r1, r6
   2a6c0:	mov	r2, #100	; 0x64
   2a6c4:	mov	r3, #0
   2a6c8:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a6cc:	mov	r6, r1
   2a6d0:	mls	r1, r0, r5, r7
   2a6d4:	movw	r2, #34416	; 0x8670
   2a6d8:	movt	r2, #3
   2a6dc:	add	r1, r2, r1, lsl #1
   2a6e0:	ldrh	r1, [r1]
   2a6e4:	strh	r1, [r4, #-2]!
   2a6e8:	mov	r7, r0
   2a6ec:	mov	r5, #100	; 0x64
   2a6f0:	mov	r0, r7
   2a6f4:	mov	r1, r6
   2a6f8:	mov	r2, #100	; 0x64
   2a6fc:	mov	r3, #0
   2a700:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a704:	mov	r6, r1
   2a708:	mls	r1, r0, r5, r7
   2a70c:	movw	r2, #34416	; 0x8670
   2a710:	movt	r2, #3
   2a714:	add	r1, r2, r1, lsl #1
   2a718:	ldrh	r1, [r1]
   2a71c:	strh	r1, [r4, #-2]!
   2a720:	mov	r7, r0
   2a724:	mov	r5, #100	; 0x64
   2a728:	mov	r0, r7
   2a72c:	mov	r1, r6
   2a730:	mov	r2, #100	; 0x64
   2a734:	mov	r3, #0
   2a738:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a73c:	mov	r6, r1
   2a740:	mls	r1, r0, r5, r7
   2a744:	movw	r2, #34416	; 0x8670
   2a748:	movt	r2, #3
   2a74c:	add	r1, r2, r1, lsl #1
   2a750:	ldrh	r1, [r1]
   2a754:	strh	r1, [r4, #-2]!
   2a758:	mov	r7, r0
   2a75c:	mov	r5, #100	; 0x64
   2a760:	mov	r0, r7
   2a764:	mov	r1, r6
   2a768:	mov	r2, #100	; 0x64
   2a76c:	mov	r3, #0
   2a770:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a774:	mov	r6, r1
   2a778:	mls	r1, r0, r5, r7
   2a77c:	movw	r2, #34416	; 0x8670
   2a780:	movt	r2, #3
   2a784:	add	r1, r2, r1, lsl #1
   2a788:	ldrh	r1, [r1]
   2a78c:	strh	r1, [r4, #-2]!
   2a790:	mov	r7, r0
   2a794:	mov	r5, #100	; 0x64
   2a798:	mov	r0, r7
   2a79c:	mov	r1, r6
   2a7a0:	mov	r2, #100	; 0x64
   2a7a4:	mov	r3, #0
   2a7a8:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a7ac:	mov	r6, r1
   2a7b0:	mls	r1, r0, r5, r7
   2a7b4:	movw	r2, #34416	; 0x8670
   2a7b8:	movt	r2, #3
   2a7bc:	add	r1, r2, r1, lsl #1
   2a7c0:	ldrh	r1, [r1]
   2a7c4:	strh	r1, [r4, #-2]!
   2a7c8:	mov	r7, r0
   2a7cc:	b	2a944 <flatcc_json_printer_uint64@@Base+0x4ac>
   2a7d0:	sub	r0, r8, #11
   2a7d4:	cmp	r0, #8
   2a7d8:	bhi	2a944 <flatcc_json_printer_uint64@@Base+0x4ac>
   2a7dc:	add	r1, pc, #0
   2a7e0:	ldr	pc, [r1, r0, lsl #2]
   2a7e4:	andeq	sl, r2, r0, ror #17
   2a7e8:	andeq	sl, r2, r4, asr #18
   2a7ec:	andeq	sl, r2, r8, lsr #17
   2a7f0:	andeq	sl, r2, r4, asr #18
   2a7f4:	andeq	sl, r2, r0, ror r8
   2a7f8:	andeq	sl, r2, r4, asr #18
   2a7fc:	andeq	sl, r2, r8, lsr r8
   2a800:	andeq	sl, r2, r4, asr #18
   2a804:	andeq	sl, r2, r8, lsl #16
   2a808:	mov	r0, r7
   2a80c:	mov	r1, r6
   2a810:	mov	r2, #100	; 0x64
   2a814:	mov	r3, #0
   2a818:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a81c:	mov	r7, r0
   2a820:	mov	r6, r1
   2a824:	movw	r0, #34416	; 0x8670
   2a828:	movt	r0, #3
   2a82c:	add	r0, r0, r2, lsl #1
   2a830:	ldrh	r0, [r0]
   2a834:	strh	r0, [r4, #-2]!
   2a838:	mov	r5, #100	; 0x64
   2a83c:	mov	r0, r7
   2a840:	mov	r1, r6
   2a844:	mov	r2, #100	; 0x64
   2a848:	mov	r3, #0
   2a84c:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a850:	mov	r6, r1
   2a854:	mls	r1, r0, r5, r7
   2a858:	movw	r2, #34416	; 0x8670
   2a85c:	movt	r2, #3
   2a860:	add	r1, r2, r1, lsl #1
   2a864:	ldrh	r1, [r1]
   2a868:	strh	r1, [r4, #-2]!
   2a86c:	mov	r7, r0
   2a870:	mov	r5, #100	; 0x64
   2a874:	mov	r0, r7
   2a878:	mov	r1, r6
   2a87c:	mov	r2, #100	; 0x64
   2a880:	mov	r3, #0
   2a884:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a888:	mov	r6, r1
   2a88c:	mls	r1, r0, r5, r7
   2a890:	movw	r2, #34416	; 0x8670
   2a894:	movt	r2, #3
   2a898:	add	r1, r2, r1, lsl #1
   2a89c:	ldrh	r1, [r1]
   2a8a0:	strh	r1, [r4, #-2]!
   2a8a4:	mov	r7, r0
   2a8a8:	mov	r5, #100	; 0x64
   2a8ac:	mov	r0, r7
   2a8b0:	mov	r1, r6
   2a8b4:	mov	r2, #100	; 0x64
   2a8b8:	mov	r3, #0
   2a8bc:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a8c0:	mov	r6, r1
   2a8c4:	mls	r1, r0, r5, r7
   2a8c8:	movw	r2, #34416	; 0x8670
   2a8cc:	movt	r2, #3
   2a8d0:	add	r1, r2, r1, lsl #1
   2a8d4:	ldrh	r1, [r1]
   2a8d8:	strh	r1, [r4, #-2]!
   2a8dc:	mov	r7, r0
   2a8e0:	mov	r9, #100	; 0x64
   2a8e4:	mov	r0, r7
   2a8e8:	mov	r1, r6
   2a8ec:	mov	r2, #100	; 0x64
   2a8f0:	mov	r3, #0
   2a8f4:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a8f8:	mov	r5, r0
   2a8fc:	mov	r2, #10
   2a900:	mov	r3, #0
   2a904:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a908:	orr	r0, r2, #48	; 0x30
   2a90c:	strb	r0, [r4, #-3]!
   2a910:	mls	r0, r5, r9, r7
   2a914:	movw	r1, #34416	; 0x8670
   2a918:	movt	r1, #3
   2a91c:	add	r0, r1, r0, lsl #1
   2a920:	ldrh	r0, [r0]
   2a924:	strh	r0, [r4, #1]
   2a928:	mov	r0, r7
   2a92c:	mov	r1, r6
   2a930:	mov	r2, #1000	; 0x3e8
   2a934:	mov	r3, #0
   2a938:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a93c:	mov	r7, r0
   2a940:	mov	r6, r1
   2a944:	mov	r5, #100	; 0x64
   2a948:	mov	r0, r7
   2a94c:	mov	r1, r6
   2a950:	mov	r2, #100	; 0x64
   2a954:	mov	r3, #0
   2a958:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a95c:	mls	r2, r0, r5, r7
   2a960:	movw	r5, #34416	; 0x8670
   2a964:	movt	r5, #3
   2a968:	add	r2, r5, r2, lsl #1
   2a96c:	ldrh	r2, [r2]
   2a970:	strh	r2, [r4, #-2]
   2a974:	mov	r2, #100	; 0x64
   2a978:	mov	r3, #0
   2a97c:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a980:	add	r0, r5, r2, lsl #1
   2a984:	ldrh	r0, [r0]
   2a988:	strh	r0, [r4, #-4]
   2a98c:	mov	r0, r7
   2a990:	mov	r1, r6
   2a994:	movw	r2, #10000	; 0x2710
   2a998:	mov	r3, #0
   2a99c:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a9a0:	mov	r2, #100	; 0x64
   2a9a4:	mov	r3, #0
   2a9a8:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a9ac:	add	r0, r5, r2, lsl #1
   2a9b0:	ldrh	r0, [r0]
   2a9b4:	strh	r0, [r4, #-6]
   2a9b8:	movw	r2, #16960	; 0x4240
   2a9bc:	movt	r2, #15
   2a9c0:	mov	r0, r7
   2a9c4:	mov	r1, r6
   2a9c8:	mov	r3, #0
   2a9cc:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a9d0:	mov	r2, #100	; 0x64
   2a9d4:	mov	r3, #0
   2a9d8:	bl	31b68 <flatcc_json_printer_clear@@Base+0x14fc>
   2a9dc:	add	r0, r5, r2, lsl #1
   2a9e0:	ldrh	r0, [r0]
   2a9e4:	strh	r0, [r4, #-8]
   2a9e8:	mov	r0, r8
   2a9ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002a9f0 <flatcc_json_printer_int8@@Base>:
   2a9f0:	push	{r4, sl, fp, lr}
   2a9f4:	add	fp, sp, #8
   2a9f8:	mov	r2, r1
   2a9fc:	mov	r4, r0
   2aa00:	ldr	r1, [r0, #20]
   2aa04:	mov	r0, r2
   2aa08:	bl	2aa1c <flatcc_json_printer_int8@@Base+0x2c>
   2aa0c:	ldr	r1, [r4, #20]
   2aa10:	add	r0, r1, r0
   2aa14:	str	r0, [r4, #20]
   2aa18:	pop	{r4, sl, fp, pc}
   2aa1c:	push	{r4, sl, fp, lr}
   2aa20:	add	fp, sp, #8
   2aa24:	ubfx	r4, r0, #7, #1
   2aa28:	cmn	r0, #1
   2aa2c:	movle	r2, #45	; 0x2d
   2aa30:	strble	r2, [r1], #1
   2aa34:	rsble	r0, r0, #0
   2aa38:	uxtb	r0, r0
   2aa3c:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2aa40:	add	r0, r0, r4
   2aa44:	pop	{r4, sl, fp, pc}

0002aa48 <flatcc_json_printer_int16@@Base>:
   2aa48:	push	{r4, sl, fp, lr}
   2aa4c:	add	fp, sp, #8
   2aa50:	mov	r2, r1
   2aa54:	mov	r4, r0
   2aa58:	ldr	r1, [r0, #20]
   2aa5c:	mov	r0, r2
   2aa60:	bl	2aa74 <flatcc_json_printer_int16@@Base+0x2c>
   2aa64:	ldr	r1, [r4, #20]
   2aa68:	add	r0, r1, r0
   2aa6c:	str	r0, [r4, #20]
   2aa70:	pop	{r4, sl, fp, pc}
   2aa74:	push	{r4, sl, fp, lr}
   2aa78:	add	fp, sp, #8
   2aa7c:	ubfx	r4, r0, #15, #1
   2aa80:	cmn	r0, #1
   2aa84:	movle	r2, #45	; 0x2d
   2aa88:	strble	r2, [r1], #1
   2aa8c:	rsble	r0, r0, #0
   2aa90:	uxth	r0, r0
   2aa94:	bl	2a000 <flatcc_json_printer_uint16@@Base+0x2c>
   2aa98:	add	r0, r0, r4
   2aa9c:	pop	{r4, sl, fp, pc}

0002aaa0 <flatcc_json_printer_int32@@Base>:
   2aaa0:	push	{r4, sl, fp, lr}
   2aaa4:	add	fp, sp, #8
   2aaa8:	mov	r2, r1
   2aaac:	mov	r4, r0
   2aab0:	ldr	r1, [r0, #20]
   2aab4:	mov	r0, r2
   2aab8:	bl	2aacc <flatcc_json_printer_int32@@Base+0x2c>
   2aabc:	ldr	r1, [r4, #20]
   2aac0:	add	r0, r1, r0
   2aac4:	str	r0, [r4, #20]
   2aac8:	pop	{r4, sl, fp, pc}
   2aacc:	push	{r4, sl, fp, lr}
   2aad0:	add	fp, sp, #8
   2aad4:	lsr	r4, r0, #31
   2aad8:	cmn	r0, #1
   2aadc:	movle	r2, #45	; 0x2d
   2aae0:	strble	r2, [r1], #1
   2aae4:	rsble	r0, r0, #0
   2aae8:	bl	2a18c <flatcc_json_printer_uint32@@Base+0x2c>
   2aaec:	add	r0, r0, r4
   2aaf0:	pop	{r4, sl, fp, pc}

0002aaf4 <flatcc_json_printer_int64@@Base>:
   2aaf4:	push	{r4, sl, fp, lr}
   2aaf8:	add	fp, sp, #8
   2aafc:	mov	r1, r3
   2ab00:	mov	r3, r2
   2ab04:	mov	r4, r0
   2ab08:	ldr	r2, [r0, #20]
   2ab0c:	mov	r0, r3
   2ab10:	bl	2ab24 <flatcc_json_printer_int64@@Base+0x30>
   2ab14:	ldr	r1, [r4, #20]
   2ab18:	add	r0, r1, r0
   2ab1c:	str	r0, [r4, #20]
   2ab20:	pop	{r4, sl, fp, pc}
   2ab24:	push	{r4, sl, fp, lr}
   2ab28:	add	fp, sp, #8
   2ab2c:	lsr	r4, r1, #31
   2ab30:	cmn	r1, #1
   2ab34:	bgt	2ab48 <flatcc_json_printer_int64@@Base+0x54>
   2ab38:	mov	r3, #45	; 0x2d
   2ab3c:	strb	r3, [r2], #1
   2ab40:	rsbs	r0, r0, #0
   2ab44:	rsc	r1, r1, #0
   2ab48:	bl	2a4c8 <flatcc_json_printer_uint64@@Base+0x30>
   2ab4c:	add	r0, r0, r4
   2ab50:	pop	{r4, sl, fp, pc}

0002ab54 <flatcc_json_printer_float@@Base>:
   2ab54:	push	{r4, sl, fp, lr}
   2ab58:	add	fp, sp, #8
   2ab5c:	mov	r4, r0
   2ab60:	ldr	r0, [r0, #20]
   2ab64:	vcvt.f64.f32	d0, s0
   2ab68:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2ab6c:	ldr	r1, [r4, #20]
   2ab70:	add	r0, r1, r0
   2ab74:	str	r0, [r4, #20]
   2ab78:	pop	{r4, sl, fp, pc}

0002ab7c <flatcc_json_printer_double@@Base>:
   2ab7c:	push	{r4, sl, fp, lr}
   2ab80:	add	fp, sp, #8
   2ab84:	mov	r4, r0
   2ab88:	ldr	r0, [r0, #20]
   2ab8c:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2ab90:	ldr	r1, [r4, #20]
   2ab94:	add	r0, r1, r0
   2ab98:	str	r0, [r4, #20]
   2ab9c:	pop	{r4, sl, fp, pc}

0002aba0 <flatcc_json_printer_enum@@Base>:
   2aba0:	b	2aba4 <flatcc_json_printer_enum@@Base+0x4>
   2aba4:	push	{r4, r5, fp, lr}
   2aba8:	add	fp, sp, #8
   2abac:	mov	r5, r2
   2abb0:	mov	r4, r0
   2abb4:	ldr	r0, [r0, #20]
   2abb8:	mov	r2, #34	; 0x22
   2abbc:	strb	r2, [r0]
   2abc0:	ldrb	r2, [r4, #26]
   2abc4:	ldr	r3, [r4, #16]
   2abc8:	ldr	r0, [r4, #20]
   2abcc:	cmp	r2, #0
   2abd0:	addeq	r0, r0, #1
   2abd4:	str	r0, [r4, #20]
   2abd8:	add	r2, r0, r5
   2abdc:	cmp	r2, r3
   2abe0:	bcs	2abfc <flatcc_json_printer_enum@@Base+0x5c>
   2abe4:	mov	r2, r5
   2abe8:	bl	14e60 <memcpy@plt>
   2abec:	ldr	r0, [r4, #20]
   2abf0:	add	r0, r0, r5
   2abf4:	str	r0, [r4, #20]
   2abf8:	b	2ac08 <flatcc_json_printer_enum@@Base+0x68>
   2abfc:	mov	r0, r4
   2ac00:	mov	r2, r5
   2ac04:	bl	29dfc <flatcc_json_printer_write@@Base+0x4>
   2ac08:	ldr	r0, [r4, #20]
   2ac0c:	mov	r1, #34	; 0x22
   2ac10:	strb	r1, [r0]
   2ac14:	ldrb	r0, [r4, #26]
   2ac18:	ldr	r1, [r4, #20]
   2ac1c:	cmp	r0, #0
   2ac20:	addeq	r1, r1, #1
   2ac24:	str	r1, [r4, #20]
   2ac28:	pop	{r4, r5, fp, pc}

0002ac2c <flatcc_json_printer_delimit_enum_flags@@Base>:
   2ac2c:	ldrb	ip, [r0, #26]
   2ac30:	ldr	r3, [r0, #20]
   2ac34:	mov	r2, #34	; 0x22
   2ac38:	strb	r2, [r3]
   2ac3c:	cmp	r1, #0
   2ac40:	movwne	r1, #1
   2ac44:	clz	r2, ip
   2ac48:	lsr	r2, r2, #5
   2ac4c:	orr	r1, r1, r2
   2ac50:	ldr	r2, [r0, #20]
   2ac54:	add	r1, r2, r1
   2ac58:	str	r1, [r0, #20]
   2ac5c:	bx	lr

0002ac60 <flatcc_json_printer_enum_flag@@Base>:
   2ac60:	push	{fp, lr}
   2ac64:	mov	fp, sp
   2ac68:	mov	ip, r3
   2ac6c:	mov	lr, r2
   2ac70:	ldr	r3, [r0, #20]
   2ac74:	mov	r2, #32
   2ac78:	strb	r2, [r3]
   2ac7c:	ldr	r2, [r0, #20]
   2ac80:	cmp	r1, #0
   2ac84:	addgt	r2, r2, #1
   2ac88:	str	r2, [r0, #20]
   2ac8c:	mov	r1, lr
   2ac90:	mov	r2, ip
   2ac94:	pop	{fp, lr}
   2ac98:	b	29dfc <flatcc_json_printer_write@@Base+0x4>

0002ac9c <flatcc_json_printer_string_field@@Base>:
   2ac9c:	push	{r4, r5, r6, r7, fp, lr}
   2aca0:	add	fp, sp, #16
   2aca4:	mov	r5, r3
   2aca8:	mov	r7, r1
   2acac:	mov	r4, r0
   2acb0:	mov	r0, r1
   2acb4:	mov	r1, r2
   2acb8:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2acbc:	cmp	r0, #0
   2acc0:	popeq	{r4, r5, r6, r7, fp, pc}
   2acc4:	mov	r6, r0
   2acc8:	ldr	r2, [fp, #8]
   2accc:	ldr	r0, [r7, #16]
   2acd0:	add	r1, r0, #1
   2acd4:	str	r1, [r7, #16]
   2acd8:	cmp	r0, #0
   2acdc:	ldrne	r0, [r4, #20]
   2ace0:	addne	r1, r0, #1
   2ace4:	strne	r1, [r4, #20]
   2ace8:	movne	r1, #44	; 0x2c
   2acec:	strbne	r1, [r0]
   2acf0:	mov	r0, r4
   2acf4:	mov	r1, r5
   2acf8:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2acfc:	mov	r0, r6
   2ad00:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2ad04:	mov	r1, r0
   2ad08:	mov	r0, r4
   2ad0c:	pop	{r4, r5, r6, r7, fp, lr}
   2ad10:	b	2ade4 <flatcc_json_printer_string_field@@Base+0x148>
   2ad14:	push	{r4, r5, fp, lr}
   2ad18:	add	fp, sp, #8
   2ad1c:	mov	r5, r0
   2ad20:	mov	r0, #4
   2ad24:	add	r1, r0, r1, lsl #1
   2ad28:	ldr	r0, [r5, #8]
   2ad2c:	mov	r4, #0
   2ad30:	cmp	r1, r0
   2ad34:	bge	2ad4c <flatcc_json_printer_string_field@@Base+0xb0>
   2ad38:	ldr	r0, [r5, #4]
   2ad3c:	bl	31350 <flatcc_json_printer_clear@@Base+0xce4>
   2ad40:	cmp	r0, #0
   2ad44:	ldrne	r1, [r5]
   2ad48:	addne	r4, r1, r0
   2ad4c:	mov	r0, r4
   2ad50:	pop	{r4, r5, fp, pc}
   2ad54:	push	{r4, r5, r6, sl, fp, lr}
   2ad58:	add	fp, sp, #16
   2ad5c:	mov	r5, r2
   2ad60:	mov	r6, r1
   2ad64:	mov	r4, r0
   2ad68:	ldrb	r0, [r0, #25]
   2ad6c:	cmp	r0, #0
   2ad70:	beq	2ad94 <flatcc_json_printer_string_field@@Base+0xf8>
   2ad74:	ldr	r0, [r4, #20]
   2ad78:	add	r1, r0, #1
   2ad7c:	str	r1, [r4, #20]
   2ad80:	mov	r1, #10
   2ad84:	strb	r1, [r0]
   2ad88:	mov	r0, r4
   2ad8c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ad90:	b	2ad9c <flatcc_json_printer_string_field@@Base+0x100>
   2ad94:	mov	r0, r4
   2ad98:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ad9c:	mov	r0, r4
   2ada0:	mov	r1, r6
   2ada4:	mov	r2, r5
   2ada8:	bl	2aba4 <flatcc_json_printer_enum@@Base+0x4>
   2adac:	ldr	r0, [r4, #20]
   2adb0:	add	r1, r0, #1
   2adb4:	str	r1, [r4, #20]
   2adb8:	mov	r1, #58	; 0x3a
   2adbc:	strb	r1, [r0]
   2adc0:	ldr	r0, [r4, #20]
   2adc4:	mov	r1, #32
   2adc8:	strb	r1, [r0]
   2adcc:	ldrb	r0, [r4, #25]
   2add0:	ldr	r1, [r4, #20]
   2add4:	cmp	r0, #0
   2add8:	addne	r1, r1, #1
   2addc:	str	r1, [r4, #20]
   2ade0:	pop	{r4, r5, r6, sl, fp, pc}
   2ade4:	push	{r4, r5, fp, lr}
   2ade8:	add	fp, sp, #8
   2adec:	mov	r4, r1
   2adf0:	mov	r5, r0
   2adf4:	mov	r0, r1
   2adf8:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2adfc:	mov	r2, r0
   2ae00:	add	r1, r4, #4
   2ae04:	mov	r0, r5
   2ae08:	pop	{r4, r5, fp, lr}
   2ae0c:	b	29bc4 <flatcc_json_printer_string@@Base+0x4>
   2ae10:	push	{r4, sl, fp, lr}
   2ae14:	add	fp, sp, #8
   2ae18:	mov	r4, r0
   2ae1c:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2ae20:	add	r0, r4, r0
   2ae24:	pop	{r4, sl, fp, pc}

0002ae28 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   2ae28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ae2c:	add	fp, sp, #24
   2ae30:	mov	r8, r3
   2ae34:	mov	r6, r1
   2ae38:	mov	r4, r0
   2ae3c:	mov	r0, r1
   2ae40:	mov	r1, r2
   2ae44:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2ae48:	mov	r7, r0
   2ae4c:	ldr	r0, [fp, #12]
   2ae50:	mov	r5, #128	; 0x80
   2ae54:	cmp	r0, #0
   2ae58:	movwne	r5, #129	; 0x81
   2ae5c:	cmp	r7, #0
   2ae60:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ae64:	ldr	r2, [fp, #8]
   2ae68:	ldr	r0, [r6, #16]
   2ae6c:	add	r1, r0, #1
   2ae70:	str	r1, [r6, #16]
   2ae74:	cmp	r0, #0
   2ae78:	ldrne	r0, [r4, #20]
   2ae7c:	addne	r1, r0, #1
   2ae80:	strne	r1, [r4, #20]
   2ae84:	movne	r1, #44	; 0x2c
   2ae88:	strbne	r1, [r0]
   2ae8c:	mov	r0, r4
   2ae90:	mov	r1, r8
   2ae94:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2ae98:	mov	r0, r7
   2ae9c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2aea0:	mov	r1, r0
   2aea4:	mov	r0, r4
   2aea8:	mov	r2, r5
   2aeac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2aeb0:	b	2aeb4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x8c>
   2aeb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aeb8:	add	fp, sp, #28
   2aebc:	sub	sp, sp, #12
   2aec0:	mov	r8, r2
   2aec4:	mov	r5, r1
   2aec8:	mov	r4, r0
   2aecc:	mov	r0, r1
   2aed0:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2aed4:	str	r0, [sp, #8]
   2aed8:	ldr	r0, [r4, #20]
   2aedc:	add	r1, r0, #1
   2aee0:	str	r1, [r4, #20]
   2aee4:	mov	r1, #34	; 0x22
   2aee8:	strb	r1, [r0]
   2aeec:	ldr	r0, [sp, #8]
   2aef0:	mov	r1, r8
   2aef4:	bl	31364 <flatcc_json_printer_clear@@Base+0xcf8>
   2aef8:	mov	r7, r0
   2aefc:	ldr	r0, [r4, #16]
   2af00:	ldr	r1, [r4, #20]
   2af04:	add	r1, r1, r7
   2af08:	cmp	r1, r0
   2af0c:	bcc	2af20 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xf8>
   2af10:	ldr	r2, [r4, #44]	; 0x2c
   2af14:	mov	r0, r4
   2af18:	mov	r1, #0
   2af1c:	blx	r2
   2af20:	add	r6, r5, #4
   2af24:	ldr	r1, [r4, #16]
   2af28:	ldr	r0, [r4, #20]
   2af2c:	add	r2, r0, r7
   2af30:	cmp	r2, r1
   2af34:	bls	2afbc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x194>
   2af38:	bic	sl, r8, #128	; 0x80
   2af3c:	add	r9, sp, #4
   2af40:	sub	r1, r1, r0
   2af44:	bic	r7, r1, #3
   2af48:	add	r1, r7, r7, lsl #1
   2af4c:	cmp	r1, #0
   2af50:	beq	2afec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1c4>
   2af54:	lsr	r5, r1, #2
   2af58:	str	r5, [sp, #4]
   2af5c:	mov	r1, r6
   2af60:	mov	r2, r9
   2af64:	mov	r3, sl
   2af68:	bl	313c0 <flatcc_json_printer_clear@@Base+0xd54>
   2af6c:	ldr	r0, [r4, #20]
   2af70:	add	r0, r0, r7
   2af74:	str	r0, [r4, #20]
   2af78:	ldr	r0, [sp, #8]
   2af7c:	sub	r0, r0, r5
   2af80:	str	r0, [sp, #8]
   2af84:	ldr	r2, [r4, #44]	; 0x2c
   2af88:	mov	r0, r4
   2af8c:	mov	r1, #0
   2af90:	blx	r2
   2af94:	add	r6, r6, r5
   2af98:	ldr	r0, [sp, #8]
   2af9c:	mov	r1, r8
   2afa0:	bl	31364 <flatcc_json_printer_clear@@Base+0xcf8>
   2afa4:	mov	r7, r0
   2afa8:	ldr	r1, [r4, #16]
   2afac:	ldr	r0, [r4, #20]
   2afb0:	add	r2, r0, r7
   2afb4:	cmp	r2, r1
   2afb8:	bhi	2af40 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x118>
   2afbc:	add	r2, sp, #8
   2afc0:	mov	r1, r6
   2afc4:	mov	r3, r8
   2afc8:	bl	313c0 <flatcc_json_printer_clear@@Base+0xd54>
   2afcc:	ldr	r0, [r4, #20]
   2afd0:	add	r1, r0, r7
   2afd4:	add	r1, r1, #1
   2afd8:	str	r1, [r4, #20]
   2afdc:	mov	r1, #34	; 0x22
   2afe0:	strb	r1, [r0, r7]
   2afe4:	sub	sp, fp, #28
   2afe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afec:	movw	r0, #34617	; 0x8739
   2aff0:	movt	r0, #3
   2aff4:	movw	r1, #33691	; 0x839b
   2aff8:	movt	r1, #3
   2affc:	movw	r3, #34623	; 0x873f
   2b000:	movt	r3, #3
   2b004:	movw	r2, #277	; 0x115
   2b008:	bl	14f44 <__assert_fail@plt>

0002b00c <flatcc_json_printer_uint8_field@@Base>:
   2b00c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b010:	add	fp, sp, #24
   2b014:	mov	r8, r3
   2b018:	mov	r6, r1
   2b01c:	mov	r4, r0
   2b020:	mov	r0, r1
   2b024:	mov	r1, r2
   2b028:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b02c:	ldr	r5, [fp, #12]
   2b030:	cmp	r0, #0
   2b034:	beq	2b058 <flatcc_json_printer_uint8_field@@Base+0x4c>
   2b038:	bl	2b0b8 <flatcc_json_printer_uint8_field@@Base+0xac>
   2b03c:	mov	r7, r0
   2b040:	cmp	r0, r5
   2b044:	bne	2b068 <flatcc_json_printer_uint8_field@@Base+0x5c>
   2b048:	ldrb	r0, [r4, #28]
   2b04c:	cmp	r0, #0
   2b050:	beq	2b068 <flatcc_json_printer_uint8_field@@Base+0x5c>
   2b054:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b058:	ldrb	r0, [r4, #29]
   2b05c:	cmp	r0, #0
   2b060:	mov	r7, r5
   2b064:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b068:	ldr	r2, [fp, #8]
   2b06c:	ldr	r0, [r6, #16]
   2b070:	add	r1, r0, #1
   2b074:	str	r1, [r6, #16]
   2b078:	cmp	r0, #0
   2b07c:	ldrne	r0, [r4, #20]
   2b080:	addne	r1, r0, #1
   2b084:	strne	r1, [r4, #20]
   2b088:	movne	r1, #44	; 0x2c
   2b08c:	strbne	r1, [r0]
   2b090:	mov	r0, r4
   2b094:	mov	r1, r8
   2b098:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b09c:	ldr	r1, [r4, #20]
   2b0a0:	mov	r0, r7
   2b0a4:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2b0a8:	ldr	r1, [r4, #20]
   2b0ac:	add	r0, r1, r0
   2b0b0:	str	r0, [r4, #20]
   2b0b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b0b8:	ldrb	r0, [r0]
   2b0bc:	b	31508 <flatcc_json_printer_clear@@Base+0xe9c>

0002b0c0 <flatcc_json_printer_uint16_field@@Base>:
   2b0c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b0c4:	add	fp, sp, #24
   2b0c8:	mov	r8, r3
   2b0cc:	mov	r6, r1
   2b0d0:	mov	r4, r0
   2b0d4:	mov	r0, r1
   2b0d8:	mov	r1, r2
   2b0dc:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b0e0:	ldr	r5, [fp, #12]
   2b0e4:	cmp	r0, #0
   2b0e8:	beq	2b10c <flatcc_json_printer_uint16_field@@Base+0x4c>
   2b0ec:	bl	2b16c <flatcc_json_printer_uint16_field@@Base+0xac>
   2b0f0:	mov	r7, r0
   2b0f4:	cmp	r0, r5
   2b0f8:	bne	2b11c <flatcc_json_printer_uint16_field@@Base+0x5c>
   2b0fc:	ldrb	r0, [r4, #28]
   2b100:	cmp	r0, #0
   2b104:	beq	2b11c <flatcc_json_printer_uint16_field@@Base+0x5c>
   2b108:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b10c:	ldrb	r0, [r4, #29]
   2b110:	cmp	r0, #0
   2b114:	mov	r7, r5
   2b118:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b11c:	ldr	r2, [fp, #8]
   2b120:	ldr	r0, [r6, #16]
   2b124:	add	r1, r0, #1
   2b128:	str	r1, [r6, #16]
   2b12c:	cmp	r0, #0
   2b130:	ldrne	r0, [r4, #20]
   2b134:	addne	r1, r0, #1
   2b138:	strne	r1, [r4, #20]
   2b13c:	movne	r1, #44	; 0x2c
   2b140:	strbne	r1, [r0]
   2b144:	mov	r0, r4
   2b148:	mov	r1, r8
   2b14c:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b150:	ldr	r1, [r4, #20]
   2b154:	mov	r0, r7
   2b158:	bl	2a000 <flatcc_json_printer_uint16@@Base+0x2c>
   2b15c:	ldr	r1, [r4, #20]
   2b160:	add	r0, r1, r0
   2b164:	str	r0, [r4, #20]
   2b168:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b16c:	ldrh	r0, [r0]
   2b170:	b	3150c <flatcc_json_printer_clear@@Base+0xea0>

0002b174 <flatcc_json_printer_uint32_field@@Base>:
   2b174:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b178:	add	fp, sp, #24
   2b17c:	mov	r8, r3
   2b180:	mov	r6, r1
   2b184:	mov	r4, r0
   2b188:	mov	r0, r1
   2b18c:	mov	r1, r2
   2b190:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b194:	ldr	r5, [fp, #12]
   2b198:	cmp	r0, #0
   2b19c:	beq	2b1c0 <flatcc_json_printer_uint32_field@@Base+0x4c>
   2b1a0:	bl	2b220 <flatcc_json_printer_uint32_field@@Base+0xac>
   2b1a4:	mov	r7, r0
   2b1a8:	cmp	r0, r5
   2b1ac:	bne	2b1d0 <flatcc_json_printer_uint32_field@@Base+0x5c>
   2b1b0:	ldrb	r0, [r4, #28]
   2b1b4:	cmp	r0, #0
   2b1b8:	beq	2b1d0 <flatcc_json_printer_uint32_field@@Base+0x5c>
   2b1bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b1c0:	ldrb	r0, [r4, #29]
   2b1c4:	cmp	r0, #0
   2b1c8:	mov	r7, r5
   2b1cc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b1d0:	ldr	r2, [fp, #8]
   2b1d4:	ldr	r0, [r6, #16]
   2b1d8:	add	r1, r0, #1
   2b1dc:	str	r1, [r6, #16]
   2b1e0:	cmp	r0, #0
   2b1e4:	ldrne	r0, [r4, #20]
   2b1e8:	addne	r1, r0, #1
   2b1ec:	strne	r1, [r4, #20]
   2b1f0:	movne	r1, #44	; 0x2c
   2b1f4:	strbne	r1, [r0]
   2b1f8:	mov	r0, r4
   2b1fc:	mov	r1, r8
   2b200:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b204:	ldr	r1, [r4, #20]
   2b208:	mov	r0, r7
   2b20c:	bl	2a18c <flatcc_json_printer_uint32@@Base+0x2c>
   2b210:	ldr	r1, [r4, #20]
   2b214:	add	r0, r1, r0
   2b218:	str	r0, [r4, #20]
   2b21c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b220:	ldr	r0, [r0]
   2b224:	b	31510 <flatcc_json_printer_clear@@Base+0xea4>

0002b228 <flatcc_json_printer_uint64_field@@Base>:
   2b228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b22c:	add	fp, sp, #28
   2b230:	sub	sp, sp, #4
   2b234:	mov	r8, r3
   2b238:	mov	r6, r1
   2b23c:	mov	r4, r0
   2b240:	mov	r0, r1
   2b244:	mov	r1, r2
   2b248:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b24c:	ldr	r9, [fp, #20]
   2b250:	ldr	sl, [fp, #16]
   2b254:	cmp	r0, #0
   2b258:	beq	2b288 <flatcc_json_printer_uint64_field@@Base+0x60>
   2b25c:	bl	2b2f4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2b260:	mov	r7, r0
   2b264:	mov	r5, r1
   2b268:	eor	r0, r1, r9
   2b26c:	eor	r1, r7, sl
   2b270:	orrs	r0, r1, r0
   2b274:	bne	2b29c <flatcc_json_printer_uint64_field@@Base+0x74>
   2b278:	ldrb	r0, [r4, #28]
   2b27c:	cmp	r0, #0
   2b280:	bne	2b2ec <flatcc_json_printer_uint64_field@@Base+0xc4>
   2b284:	b	2b29c <flatcc_json_printer_uint64_field@@Base+0x74>
   2b288:	ldrb	r0, [r4, #29]
   2b28c:	cmp	r0, #0
   2b290:	mov	r7, sl
   2b294:	mov	r5, r9
   2b298:	beq	2b2ec <flatcc_json_printer_uint64_field@@Base+0xc4>
   2b29c:	ldr	r2, [fp, #8]
   2b2a0:	ldr	r0, [r6, #16]
   2b2a4:	add	r1, r0, #1
   2b2a8:	str	r1, [r6, #16]
   2b2ac:	cmp	r0, #0
   2b2b0:	ldrne	r0, [r4, #20]
   2b2b4:	addne	r1, r0, #1
   2b2b8:	strne	r1, [r4, #20]
   2b2bc:	movne	r1, #44	; 0x2c
   2b2c0:	strbne	r1, [r0]
   2b2c4:	mov	r0, r4
   2b2c8:	mov	r1, r8
   2b2cc:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b2d0:	ldr	r2, [r4, #20]
   2b2d4:	mov	r0, r7
   2b2d8:	mov	r1, r5
   2b2dc:	bl	2a4c8 <flatcc_json_printer_uint64@@Base+0x30>
   2b2e0:	ldr	r1, [r4, #20]
   2b2e4:	add	r0, r1, r0
   2b2e8:	str	r0, [r4, #20]
   2b2ec:	sub	sp, fp, #28
   2b2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2f4:	ldrd	r0, [r0]
   2b2f8:	b	31514 <flatcc_json_printer_clear@@Base+0xea8>

0002b2fc <flatcc_json_printer_int8_field@@Base>:
   2b2fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b300:	add	fp, sp, #24
   2b304:	mov	r8, r3
   2b308:	mov	r6, r1
   2b30c:	mov	r4, r0
   2b310:	mov	r0, r1
   2b314:	mov	r1, r2
   2b318:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b31c:	ldr	r5, [fp, #12]
   2b320:	cmp	r0, #0
   2b324:	beq	2b348 <flatcc_json_printer_int8_field@@Base+0x4c>
   2b328:	bl	2b3a8 <flatcc_json_printer_int8_field@@Base+0xac>
   2b32c:	mov	r7, r0
   2b330:	cmp	r0, r5
   2b334:	bne	2b358 <flatcc_json_printer_int8_field@@Base+0x5c>
   2b338:	ldrb	r0, [r4, #28]
   2b33c:	cmp	r0, #0
   2b340:	beq	2b358 <flatcc_json_printer_int8_field@@Base+0x5c>
   2b344:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b348:	ldrb	r0, [r4, #29]
   2b34c:	cmp	r0, #0
   2b350:	mov	r7, r5
   2b354:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b358:	ldr	r2, [fp, #8]
   2b35c:	ldr	r0, [r6, #16]
   2b360:	add	r1, r0, #1
   2b364:	str	r1, [r6, #16]
   2b368:	cmp	r0, #0
   2b36c:	ldrne	r0, [r4, #20]
   2b370:	addne	r1, r0, #1
   2b374:	strne	r1, [r4, #20]
   2b378:	movne	r1, #44	; 0x2c
   2b37c:	strbne	r1, [r0]
   2b380:	mov	r0, r4
   2b384:	mov	r1, r8
   2b388:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b38c:	ldr	r1, [r4, #20]
   2b390:	mov	r0, r7
   2b394:	bl	2aa1c <flatcc_json_printer_int8@@Base+0x2c>
   2b398:	ldr	r1, [r4, #20]
   2b39c:	add	r0, r1, r0
   2b3a0:	str	r0, [r4, #20]
   2b3a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b3a8:	ldrsb	r0, [r0]
   2b3ac:	b	31518 <flatcc_json_printer_clear@@Base+0xeac>

0002b3b0 <flatcc_json_printer_int16_field@@Base>:
   2b3b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b3b4:	add	fp, sp, #24
   2b3b8:	mov	r8, r3
   2b3bc:	mov	r6, r1
   2b3c0:	mov	r4, r0
   2b3c4:	mov	r0, r1
   2b3c8:	mov	r1, r2
   2b3cc:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b3d0:	ldr	r5, [fp, #12]
   2b3d4:	cmp	r0, #0
   2b3d8:	beq	2b3fc <flatcc_json_printer_int16_field@@Base+0x4c>
   2b3dc:	bl	2b45c <flatcc_json_printer_int16_field@@Base+0xac>
   2b3e0:	mov	r7, r0
   2b3e4:	cmp	r0, r5
   2b3e8:	bne	2b40c <flatcc_json_printer_int16_field@@Base+0x5c>
   2b3ec:	ldrb	r0, [r4, #28]
   2b3f0:	cmp	r0, #0
   2b3f4:	beq	2b40c <flatcc_json_printer_int16_field@@Base+0x5c>
   2b3f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b3fc:	ldrb	r0, [r4, #29]
   2b400:	cmp	r0, #0
   2b404:	mov	r7, r5
   2b408:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b40c:	ldr	r2, [fp, #8]
   2b410:	ldr	r0, [r6, #16]
   2b414:	add	r1, r0, #1
   2b418:	str	r1, [r6, #16]
   2b41c:	cmp	r0, #0
   2b420:	ldrne	r0, [r4, #20]
   2b424:	addne	r1, r0, #1
   2b428:	strne	r1, [r4, #20]
   2b42c:	movne	r1, #44	; 0x2c
   2b430:	strbne	r1, [r0]
   2b434:	mov	r0, r4
   2b438:	mov	r1, r8
   2b43c:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b440:	ldr	r1, [r4, #20]
   2b444:	mov	r0, r7
   2b448:	bl	2aa74 <flatcc_json_printer_int16@@Base+0x2c>
   2b44c:	ldr	r1, [r4, #20]
   2b450:	add	r0, r1, r0
   2b454:	str	r0, [r4, #20]
   2b458:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b45c:	ldrsh	r0, [r0]
   2b460:	b	3151c <flatcc_json_printer_clear@@Base+0xeb0>

0002b464 <flatcc_json_printer_int32_field@@Base>:
   2b464:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b468:	add	fp, sp, #24
   2b46c:	mov	r8, r3
   2b470:	mov	r6, r1
   2b474:	mov	r4, r0
   2b478:	mov	r0, r1
   2b47c:	mov	r1, r2
   2b480:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b484:	ldr	r5, [fp, #12]
   2b488:	cmp	r0, #0
   2b48c:	beq	2b4b0 <flatcc_json_printer_int32_field@@Base+0x4c>
   2b490:	bl	2b510 <flatcc_json_printer_int32_field@@Base+0xac>
   2b494:	mov	r7, r0
   2b498:	cmp	r0, r5
   2b49c:	bne	2b4c0 <flatcc_json_printer_int32_field@@Base+0x5c>
   2b4a0:	ldrb	r0, [r4, #28]
   2b4a4:	cmp	r0, #0
   2b4a8:	beq	2b4c0 <flatcc_json_printer_int32_field@@Base+0x5c>
   2b4ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b4b0:	ldrb	r0, [r4, #29]
   2b4b4:	cmp	r0, #0
   2b4b8:	mov	r7, r5
   2b4bc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b4c0:	ldr	r2, [fp, #8]
   2b4c4:	ldr	r0, [r6, #16]
   2b4c8:	add	r1, r0, #1
   2b4cc:	str	r1, [r6, #16]
   2b4d0:	cmp	r0, #0
   2b4d4:	ldrne	r0, [r4, #20]
   2b4d8:	addne	r1, r0, #1
   2b4dc:	strne	r1, [r4, #20]
   2b4e0:	movne	r1, #44	; 0x2c
   2b4e4:	strbne	r1, [r0]
   2b4e8:	mov	r0, r4
   2b4ec:	mov	r1, r8
   2b4f0:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b4f4:	ldr	r1, [r4, #20]
   2b4f8:	mov	r0, r7
   2b4fc:	bl	2aacc <flatcc_json_printer_int32@@Base+0x2c>
   2b500:	ldr	r1, [r4, #20]
   2b504:	add	r0, r1, r0
   2b508:	str	r0, [r4, #20]
   2b50c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b510:	ldr	r0, [r0]
   2b514:	b	31520 <flatcc_json_printer_clear@@Base+0xeb4>

0002b518 <flatcc_json_printer_int64_field@@Base>:
   2b518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b51c:	add	fp, sp, #28
   2b520:	sub	sp, sp, #4
   2b524:	mov	r8, r3
   2b528:	mov	r6, r1
   2b52c:	mov	r4, r0
   2b530:	mov	r0, r1
   2b534:	mov	r1, r2
   2b538:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b53c:	ldr	r9, [fp, #20]
   2b540:	ldr	sl, [fp, #16]
   2b544:	cmp	r0, #0
   2b548:	beq	2b578 <flatcc_json_printer_int64_field@@Base+0x60>
   2b54c:	bl	2b5e4 <flatcc_json_printer_int64_field@@Base+0xcc>
   2b550:	mov	r7, r0
   2b554:	mov	r5, r1
   2b558:	eor	r0, r1, r9
   2b55c:	eor	r1, r7, sl
   2b560:	orrs	r0, r1, r0
   2b564:	bne	2b58c <flatcc_json_printer_int64_field@@Base+0x74>
   2b568:	ldrb	r0, [r4, #28]
   2b56c:	cmp	r0, #0
   2b570:	bne	2b5dc <flatcc_json_printer_int64_field@@Base+0xc4>
   2b574:	b	2b58c <flatcc_json_printer_int64_field@@Base+0x74>
   2b578:	ldrb	r0, [r4, #29]
   2b57c:	cmp	r0, #0
   2b580:	mov	r7, sl
   2b584:	mov	r5, r9
   2b588:	beq	2b5dc <flatcc_json_printer_int64_field@@Base+0xc4>
   2b58c:	ldr	r2, [fp, #8]
   2b590:	ldr	r0, [r6, #16]
   2b594:	add	r1, r0, #1
   2b598:	str	r1, [r6, #16]
   2b59c:	cmp	r0, #0
   2b5a0:	ldrne	r0, [r4, #20]
   2b5a4:	addne	r1, r0, #1
   2b5a8:	strne	r1, [r4, #20]
   2b5ac:	movne	r1, #44	; 0x2c
   2b5b0:	strbne	r1, [r0]
   2b5b4:	mov	r0, r4
   2b5b8:	mov	r1, r8
   2b5bc:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b5c0:	ldr	r2, [r4, #20]
   2b5c4:	mov	r0, r7
   2b5c8:	mov	r1, r5
   2b5cc:	bl	2ab24 <flatcc_json_printer_int64@@Base+0x30>
   2b5d0:	ldr	r1, [r4, #20]
   2b5d4:	add	r0, r1, r0
   2b5d8:	str	r0, [r4, #20]
   2b5dc:	sub	sp, fp, #28
   2b5e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b5e4:	ldrd	r0, [r0]
   2b5e8:	b	31524 <flatcc_json_printer_clear@@Base+0xeb8>

0002b5ec <flatcc_json_printer_bool_field@@Base>:
   2b5ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b5f0:	add	fp, sp, #24
   2b5f4:	mov	r8, r3
   2b5f8:	mov	r6, r1
   2b5fc:	mov	r4, r0
   2b600:	mov	r0, r1
   2b604:	mov	r1, r2
   2b608:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b60c:	ldr	r5, [fp, #12]
   2b610:	cmp	r0, #0
   2b614:	beq	2b638 <flatcc_json_printer_bool_field@@Base+0x4c>
   2b618:	bl	2b698 <flatcc_json_printer_bool_field@@Base+0xac>
   2b61c:	mov	r7, r0
   2b620:	cmp	r0, r5
   2b624:	bne	2b648 <flatcc_json_printer_bool_field@@Base+0x5c>
   2b628:	ldrb	r0, [r4, #28]
   2b62c:	cmp	r0, #0
   2b630:	beq	2b648 <flatcc_json_printer_bool_field@@Base+0x5c>
   2b634:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b638:	ldrb	r0, [r4, #29]
   2b63c:	cmp	r0, #0
   2b640:	mov	r7, r5
   2b644:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b648:	ldr	r2, [fp, #8]
   2b64c:	ldr	r0, [r6, #16]
   2b650:	add	r1, r0, #1
   2b654:	str	r1, [r6, #16]
   2b658:	cmp	r0, #0
   2b65c:	ldrne	r0, [r4, #20]
   2b660:	addne	r1, r0, #1
   2b664:	strne	r1, [r4, #20]
   2b668:	movne	r1, #44	; 0x2c
   2b66c:	strbne	r1, [r0]
   2b670:	mov	r0, r4
   2b674:	mov	r1, r8
   2b678:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b67c:	ldr	r1, [r4, #20]
   2b680:	mov	r0, r7
   2b684:	bl	2b6a0 <flatcc_json_printer_bool_field@@Base+0xb4>
   2b688:	ldr	r1, [r4, #20]
   2b68c:	add	r0, r1, r0
   2b690:	str	r0, [r4, #20]
   2b694:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b698:	ldrb	r0, [r0]
   2b69c:	b	31528 <flatcc_json_printer_clear@@Base+0xebc>
   2b6a0:	cmp	r0, #0
   2b6a4:	beq	2b6c4 <flatcc_json_printer_bool_field@@Base+0xd8>
   2b6a8:	mov	r0, #0
   2b6ac:	strb	r0, [r1, #4]
   2b6b0:	movw	r0, #29300	; 0x7274
   2b6b4:	movt	r0, #25973	; 0x6575
   2b6b8:	str	r0, [r1]
   2b6bc:	mov	r0, #4
   2b6c0:	bx	lr
   2b6c4:	mov	r0, #101	; 0x65
   2b6c8:	strh	r0, [r1, #4]
   2b6cc:	movw	r0, #24934	; 0x6166
   2b6d0:	movt	r0, #29548	; 0x736c
   2b6d4:	str	r0, [r1]
   2b6d8:	mov	r0, #5
   2b6dc:	bx	lr

0002b6e0 <flatcc_json_printer_float_field@@Base>:
   2b6e0:	push	{r4, r5, r6, sl, fp, lr}
   2b6e4:	add	fp, sp, #16
   2b6e8:	vpush	{d8-d9}
   2b6ec:	vmov.f32	s18, s0
   2b6f0:	mov	r5, r3
   2b6f4:	mov	r6, r1
   2b6f8:	mov	r4, r0
   2b6fc:	mov	r0, r1
   2b700:	mov	r1, r2
   2b704:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b708:	cmp	r0, #0
   2b70c:	beq	2b734 <flatcc_json_printer_float_field@@Base+0x54>
   2b710:	bl	2b798 <flatcc_json_printer_float_field@@Base+0xb8>
   2b714:	vmov.f32	s16, s0
   2b718:	vcmp.f32	s0, s18
   2b71c:	vmrs	APSR_nzcv, fpscr
   2b720:	bne	2b744 <flatcc_json_printer_float_field@@Base+0x64>
   2b724:	ldrb	r0, [r4, #28]
   2b728:	cmp	r0, #0
   2b72c:	bne	2b790 <flatcc_json_printer_float_field@@Base+0xb0>
   2b730:	b	2b744 <flatcc_json_printer_float_field@@Base+0x64>
   2b734:	ldrb	r0, [r4, #29]
   2b738:	cmp	r0, #0
   2b73c:	vmov.f32	s16, s18
   2b740:	beq	2b790 <flatcc_json_printer_float_field@@Base+0xb0>
   2b744:	ldr	r2, [fp, #8]
   2b748:	ldr	r0, [r6, #16]
   2b74c:	add	r1, r0, #1
   2b750:	str	r1, [r6, #16]
   2b754:	cmp	r0, #0
   2b758:	ldrne	r0, [r4, #20]
   2b75c:	addne	r1, r0, #1
   2b760:	strne	r1, [r4, #20]
   2b764:	movne	r1, #44	; 0x2c
   2b768:	strbne	r1, [r0]
   2b76c:	mov	r0, r4
   2b770:	mov	r1, r5
   2b774:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b778:	ldr	r0, [r4, #20]
   2b77c:	vcvt.f64.f32	d0, s16
   2b780:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2b784:	ldr	r1, [r4, #20]
   2b788:	add	r0, r1, r0
   2b78c:	str	r0, [r4, #20]
   2b790:	vpop	{d8-d9}
   2b794:	pop	{r4, r5, r6, sl, fp, pc}
   2b798:	vldr	s0, [r0]
   2b79c:	b	3152c <flatcc_json_printer_clear@@Base+0xec0>

0002b7a0 <flatcc_json_printer_double_field@@Base>:
   2b7a0:	push	{r4, r5, r6, sl, fp, lr}
   2b7a4:	add	fp, sp, #16
   2b7a8:	vpush	{d8-d9}
   2b7ac:	vmov.f64	d9, d0
   2b7b0:	mov	r5, r3
   2b7b4:	mov	r6, r1
   2b7b8:	mov	r4, r0
   2b7bc:	mov	r0, r1
   2b7c0:	mov	r1, r2
   2b7c4:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b7c8:	cmp	r0, #0
   2b7cc:	beq	2b7f4 <flatcc_json_printer_double_field@@Base+0x54>
   2b7d0:	bl	2b858 <flatcc_json_printer_double_field@@Base+0xb8>
   2b7d4:	vmov.f64	d8, d0
   2b7d8:	vcmp.f64	d0, d9
   2b7dc:	vmrs	APSR_nzcv, fpscr
   2b7e0:	bne	2b804 <flatcc_json_printer_double_field@@Base+0x64>
   2b7e4:	ldrb	r0, [r4, #28]
   2b7e8:	cmp	r0, #0
   2b7ec:	bne	2b850 <flatcc_json_printer_double_field@@Base+0xb0>
   2b7f0:	b	2b804 <flatcc_json_printer_double_field@@Base+0x64>
   2b7f4:	ldrb	r0, [r4, #29]
   2b7f8:	cmp	r0, #0
   2b7fc:	vmov.f64	d8, d9
   2b800:	beq	2b850 <flatcc_json_printer_double_field@@Base+0xb0>
   2b804:	ldr	r2, [fp, #8]
   2b808:	ldr	r0, [r6, #16]
   2b80c:	add	r1, r0, #1
   2b810:	str	r1, [r6, #16]
   2b814:	cmp	r0, #0
   2b818:	ldrne	r0, [r4, #20]
   2b81c:	addne	r1, r0, #1
   2b820:	strne	r1, [r4, #20]
   2b824:	movne	r1, #44	; 0x2c
   2b828:	strbne	r1, [r0]
   2b82c:	mov	r0, r4
   2b830:	mov	r1, r5
   2b834:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b838:	ldr	r0, [r4, #20]
   2b83c:	vmov.f64	d0, d8
   2b840:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2b844:	ldr	r1, [r4, #20]
   2b848:	add	r0, r1, r0
   2b84c:	str	r0, [r4, #20]
   2b850:	vpop	{d8-d9}
   2b854:	pop	{r4, r5, r6, sl, fp, pc}
   2b858:	vldr	d0, [r0]
   2b85c:	b	31530 <flatcc_json_printer_clear@@Base+0xec4>

0002b860 <flatcc_json_printer_uint8_enum_field@@Base>:
   2b860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b864:	add	fp, sp, #28
   2b868:	sub	sp, sp, #4
   2b86c:	mov	r8, r3
   2b870:	mov	r5, r1
   2b874:	mov	r4, r0
   2b878:	mov	r0, r1
   2b87c:	mov	r1, r2
   2b880:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b884:	ldr	sl, [fp, #16]
   2b888:	ldr	r7, [fp, #12]
   2b88c:	ldr	r9, [fp, #8]
   2b890:	cmp	r0, #0
   2b894:	beq	2b8bc <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   2b898:	bl	2b0b8 <flatcc_json_printer_uint8_field@@Base+0xac>
   2b89c:	mov	r6, r0
   2b8a0:	cmp	r0, r7
   2b8a4:	bne	2b8cc <flatcc_json_printer_uint8_enum_field@@Base+0x6c>
   2b8a8:	ldrb	r0, [r4, #28]
   2b8ac:	cmp	r0, #0
   2b8b0:	beq	2b8cc <flatcc_json_printer_uint8_enum_field@@Base+0x6c>
   2b8b4:	sub	sp, fp, #28
   2b8b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8bc:	ldrb	r0, [r4, #29]
   2b8c0:	cmp	r0, #0
   2b8c4:	mov	r6, r7
   2b8c8:	beq	2b8b4 <flatcc_json_printer_uint8_enum_field@@Base+0x54>
   2b8cc:	ldr	r0, [r5, #16]
   2b8d0:	add	r1, r0, #1
   2b8d4:	str	r1, [r5, #16]
   2b8d8:	cmp	r0, #0
   2b8dc:	ldrne	r0, [r4, #20]
   2b8e0:	addne	r1, r0, #1
   2b8e4:	strne	r1, [r4, #20]
   2b8e8:	movne	r1, #44	; 0x2c
   2b8ec:	strbne	r1, [r0]
   2b8f0:	mov	r0, r4
   2b8f4:	mov	r1, r8
   2b8f8:	mov	r2, r9
   2b8fc:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b900:	ldrb	r0, [r4, #27]
   2b904:	cmp	r0, #0
   2b908:	beq	2b92c <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   2b90c:	ldr	r1, [r4, #20]
   2b910:	mov	r0, r6
   2b914:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2b918:	ldr	r1, [r4, #20]
   2b91c:	add	r0, r1, r0
   2b920:	str	r0, [r4, #20]
   2b924:	sub	sp, fp, #28
   2b928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b92c:	mov	r0, r4
   2b930:	mov	r1, r6
   2b934:	mov	r2, sl
   2b938:	sub	sp, fp, #28
   2b93c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b940:	bx	r2

0002b944 <flatcc_json_printer_uint16_enum_field@@Base>:
   2b944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b948:	add	fp, sp, #28
   2b94c:	sub	sp, sp, #4
   2b950:	mov	r8, r3
   2b954:	mov	r5, r1
   2b958:	mov	r4, r0
   2b95c:	mov	r0, r1
   2b960:	mov	r1, r2
   2b964:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2b968:	ldr	sl, [fp, #16]
   2b96c:	ldr	r7, [fp, #12]
   2b970:	ldr	r9, [fp, #8]
   2b974:	cmp	r0, #0
   2b978:	beq	2b9a0 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   2b97c:	bl	2b16c <flatcc_json_printer_uint16_field@@Base+0xac>
   2b980:	mov	r6, r0
   2b984:	cmp	r0, r7
   2b988:	bne	2b9b0 <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
   2b98c:	ldrb	r0, [r4, #28]
   2b990:	cmp	r0, #0
   2b994:	beq	2b9b0 <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
   2b998:	sub	sp, fp, #28
   2b99c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9a0:	ldrb	r0, [r4, #29]
   2b9a4:	cmp	r0, #0
   2b9a8:	mov	r6, r7
   2b9ac:	beq	2b998 <flatcc_json_printer_uint16_enum_field@@Base+0x54>
   2b9b0:	ldr	r0, [r5, #16]
   2b9b4:	add	r1, r0, #1
   2b9b8:	str	r1, [r5, #16]
   2b9bc:	cmp	r0, #0
   2b9c0:	ldrne	r0, [r4, #20]
   2b9c4:	addne	r1, r0, #1
   2b9c8:	strne	r1, [r4, #20]
   2b9cc:	movne	r1, #44	; 0x2c
   2b9d0:	strbne	r1, [r0]
   2b9d4:	mov	r0, r4
   2b9d8:	mov	r1, r8
   2b9dc:	mov	r2, r9
   2b9e0:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2b9e4:	ldrb	r0, [r4, #27]
   2b9e8:	cmp	r0, #0
   2b9ec:	beq	2ba10 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   2b9f0:	ldr	r1, [r4, #20]
   2b9f4:	mov	r0, r6
   2b9f8:	bl	2a000 <flatcc_json_printer_uint16@@Base+0x2c>
   2b9fc:	ldr	r1, [r4, #20]
   2ba00:	add	r0, r1, r0
   2ba04:	str	r0, [r4, #20]
   2ba08:	sub	sp, fp, #28
   2ba0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba10:	mov	r0, r4
   2ba14:	mov	r1, r6
   2ba18:	mov	r2, sl
   2ba1c:	sub	sp, fp, #28
   2ba20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba24:	bx	r2

0002ba28 <flatcc_json_printer_uint32_enum_field@@Base>:
   2ba28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba2c:	add	fp, sp, #28
   2ba30:	sub	sp, sp, #4
   2ba34:	mov	r8, r3
   2ba38:	mov	r5, r1
   2ba3c:	mov	r4, r0
   2ba40:	mov	r0, r1
   2ba44:	mov	r1, r2
   2ba48:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2ba4c:	ldr	sl, [fp, #16]
   2ba50:	ldr	r7, [fp, #12]
   2ba54:	ldr	r9, [fp, #8]
   2ba58:	cmp	r0, #0
   2ba5c:	beq	2ba84 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   2ba60:	bl	2b220 <flatcc_json_printer_uint32_field@@Base+0xac>
   2ba64:	mov	r6, r0
   2ba68:	cmp	r0, r7
   2ba6c:	bne	2ba94 <flatcc_json_printer_uint32_enum_field@@Base+0x6c>
   2ba70:	ldrb	r0, [r4, #28]
   2ba74:	cmp	r0, #0
   2ba78:	beq	2ba94 <flatcc_json_printer_uint32_enum_field@@Base+0x6c>
   2ba7c:	sub	sp, fp, #28
   2ba80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba84:	ldrb	r0, [r4, #29]
   2ba88:	cmp	r0, #0
   2ba8c:	mov	r6, r7
   2ba90:	beq	2ba7c <flatcc_json_printer_uint32_enum_field@@Base+0x54>
   2ba94:	ldr	r0, [r5, #16]
   2ba98:	add	r1, r0, #1
   2ba9c:	str	r1, [r5, #16]
   2baa0:	cmp	r0, #0
   2baa4:	ldrne	r0, [r4, #20]
   2baa8:	addne	r1, r0, #1
   2baac:	strne	r1, [r4, #20]
   2bab0:	movne	r1, #44	; 0x2c
   2bab4:	strbne	r1, [r0]
   2bab8:	mov	r0, r4
   2babc:	mov	r1, r8
   2bac0:	mov	r2, r9
   2bac4:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2bac8:	ldrb	r0, [r4, #27]
   2bacc:	cmp	r0, #0
   2bad0:	beq	2baf4 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   2bad4:	ldr	r1, [r4, #20]
   2bad8:	mov	r0, r6
   2badc:	bl	2a18c <flatcc_json_printer_uint32@@Base+0x2c>
   2bae0:	ldr	r1, [r4, #20]
   2bae4:	add	r0, r1, r0
   2bae8:	str	r0, [r4, #20]
   2baec:	sub	sp, fp, #28
   2baf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2baf4:	mov	r0, r4
   2baf8:	mov	r1, r6
   2bafc:	mov	r2, sl
   2bb00:	sub	sp, fp, #28
   2bb04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb08:	bx	r2

0002bb0c <flatcc_json_printer_uint64_enum_field@@Base>:
   2bb0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb10:	add	fp, sp, #28
   2bb14:	sub	sp, sp, #12
   2bb18:	str	r3, [sp, #8]
   2bb1c:	mov	r6, r1
   2bb20:	mov	r4, r0
   2bb24:	mov	r0, r1
   2bb28:	mov	r1, r2
   2bb2c:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2bb30:	ldr	r5, [fp, #20]
   2bb34:	ldr	r7, [fp, #16]
   2bb38:	ldr	r1, [fp, #24]
   2bb3c:	str	r1, [sp, #4]
   2bb40:	ldr	r9, [fp, #8]
   2bb44:	cmp	r0, #0
   2bb48:	beq	2bb7c <flatcc_json_printer_uint64_enum_field@@Base+0x70>
   2bb4c:	bl	2b2f4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2bb50:	mov	r8, r0
   2bb54:	mov	sl, r1
   2bb58:	eor	r0, r1, r5
   2bb5c:	eor	r1, r8, r7
   2bb60:	orrs	r0, r1, r0
   2bb64:	bne	2bb90 <flatcc_json_printer_uint64_enum_field@@Base+0x84>
   2bb68:	ldrb	r0, [r4, #28]
   2bb6c:	cmp	r0, #0
   2bb70:	beq	2bb90 <flatcc_json_printer_uint64_enum_field@@Base+0x84>
   2bb74:	sub	sp, fp, #28
   2bb78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb7c:	ldrb	r0, [r4, #29]
   2bb80:	cmp	r0, #0
   2bb84:	mov	r8, r7
   2bb88:	mov	sl, r5
   2bb8c:	beq	2bb74 <flatcc_json_printer_uint64_enum_field@@Base+0x68>
   2bb90:	ldr	r0, [r6, #16]
   2bb94:	add	r1, r0, #1
   2bb98:	str	r1, [r6, #16]
   2bb9c:	cmp	r0, #0
   2bba0:	ldrne	r0, [r4, #20]
   2bba4:	addne	r1, r0, #1
   2bba8:	strne	r1, [r4, #20]
   2bbac:	movne	r1, #44	; 0x2c
   2bbb0:	strbne	r1, [r0]
   2bbb4:	mov	r0, r4
   2bbb8:	ldr	r1, [sp, #8]
   2bbbc:	mov	r2, r9
   2bbc0:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2bbc4:	ldrb	r0, [r4, #27]
   2bbc8:	cmp	r0, #0
   2bbcc:	beq	2bbf4 <flatcc_json_printer_uint64_enum_field@@Base+0xe8>
   2bbd0:	ldr	r2, [r4, #20]
   2bbd4:	mov	r0, r8
   2bbd8:	mov	r1, sl
   2bbdc:	bl	2a4c8 <flatcc_json_printer_uint64@@Base+0x30>
   2bbe0:	ldr	r1, [r4, #20]
   2bbe4:	add	r0, r1, r0
   2bbe8:	str	r0, [r4, #20]
   2bbec:	sub	sp, fp, #28
   2bbf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbf4:	mov	r0, r4
   2bbf8:	mov	r2, r8
   2bbfc:	mov	r3, sl
   2bc00:	ldr	r1, [sp, #4]
   2bc04:	sub	sp, fp, #28
   2bc08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc0c:	bx	r1

0002bc10 <flatcc_json_printer_int8_enum_field@@Base>:
   2bc10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc14:	add	fp, sp, #28
   2bc18:	sub	sp, sp, #4
   2bc1c:	mov	r8, r3
   2bc20:	mov	r5, r1
   2bc24:	mov	r4, r0
   2bc28:	mov	r0, r1
   2bc2c:	mov	r1, r2
   2bc30:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2bc34:	ldr	sl, [fp, #16]
   2bc38:	ldr	r7, [fp, #12]
   2bc3c:	ldr	r9, [fp, #8]
   2bc40:	cmp	r0, #0
   2bc44:	beq	2bc6c <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   2bc48:	bl	2b3a8 <flatcc_json_printer_int8_field@@Base+0xac>
   2bc4c:	mov	r6, r0
   2bc50:	cmp	r0, r7
   2bc54:	bne	2bc7c <flatcc_json_printer_int8_enum_field@@Base+0x6c>
   2bc58:	ldrb	r0, [r4, #28]
   2bc5c:	cmp	r0, #0
   2bc60:	beq	2bc7c <flatcc_json_printer_int8_enum_field@@Base+0x6c>
   2bc64:	sub	sp, fp, #28
   2bc68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc6c:	ldrb	r0, [r4, #29]
   2bc70:	cmp	r0, #0
   2bc74:	mov	r6, r7
   2bc78:	beq	2bc64 <flatcc_json_printer_int8_enum_field@@Base+0x54>
   2bc7c:	ldr	r0, [r5, #16]
   2bc80:	add	r1, r0, #1
   2bc84:	str	r1, [r5, #16]
   2bc88:	cmp	r0, #0
   2bc8c:	ldrne	r0, [r4, #20]
   2bc90:	addne	r1, r0, #1
   2bc94:	strne	r1, [r4, #20]
   2bc98:	movne	r1, #44	; 0x2c
   2bc9c:	strbne	r1, [r0]
   2bca0:	mov	r0, r4
   2bca4:	mov	r1, r8
   2bca8:	mov	r2, r9
   2bcac:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2bcb0:	ldrb	r0, [r4, #27]
   2bcb4:	cmp	r0, #0
   2bcb8:	beq	2bcdc <flatcc_json_printer_int8_enum_field@@Base+0xcc>
   2bcbc:	ldr	r1, [r4, #20]
   2bcc0:	mov	r0, r6
   2bcc4:	bl	2aa1c <flatcc_json_printer_int8@@Base+0x2c>
   2bcc8:	ldr	r1, [r4, #20]
   2bccc:	add	r0, r1, r0
   2bcd0:	str	r0, [r4, #20]
   2bcd4:	sub	sp, fp, #28
   2bcd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bcdc:	mov	r0, r4
   2bce0:	mov	r1, r6
   2bce4:	mov	r2, sl
   2bce8:	sub	sp, fp, #28
   2bcec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bcf0:	bx	r2

0002bcf4 <flatcc_json_printer_int16_enum_field@@Base>:
   2bcf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bcf8:	add	fp, sp, #28
   2bcfc:	sub	sp, sp, #4
   2bd00:	mov	r8, r3
   2bd04:	mov	r5, r1
   2bd08:	mov	r4, r0
   2bd0c:	mov	r0, r1
   2bd10:	mov	r1, r2
   2bd14:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2bd18:	ldr	sl, [fp, #16]
   2bd1c:	ldr	r7, [fp, #12]
   2bd20:	ldr	r9, [fp, #8]
   2bd24:	cmp	r0, #0
   2bd28:	beq	2bd50 <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   2bd2c:	bl	2b45c <flatcc_json_printer_int16_field@@Base+0xac>
   2bd30:	mov	r6, r0
   2bd34:	cmp	r0, r7
   2bd38:	bne	2bd60 <flatcc_json_printer_int16_enum_field@@Base+0x6c>
   2bd3c:	ldrb	r0, [r4, #28]
   2bd40:	cmp	r0, #0
   2bd44:	beq	2bd60 <flatcc_json_printer_int16_enum_field@@Base+0x6c>
   2bd48:	sub	sp, fp, #28
   2bd4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd50:	ldrb	r0, [r4, #29]
   2bd54:	cmp	r0, #0
   2bd58:	mov	r6, r7
   2bd5c:	beq	2bd48 <flatcc_json_printer_int16_enum_field@@Base+0x54>
   2bd60:	ldr	r0, [r5, #16]
   2bd64:	add	r1, r0, #1
   2bd68:	str	r1, [r5, #16]
   2bd6c:	cmp	r0, #0
   2bd70:	ldrne	r0, [r4, #20]
   2bd74:	addne	r1, r0, #1
   2bd78:	strne	r1, [r4, #20]
   2bd7c:	movne	r1, #44	; 0x2c
   2bd80:	strbne	r1, [r0]
   2bd84:	mov	r0, r4
   2bd88:	mov	r1, r8
   2bd8c:	mov	r2, r9
   2bd90:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2bd94:	ldrb	r0, [r4, #27]
   2bd98:	cmp	r0, #0
   2bd9c:	beq	2bdc0 <flatcc_json_printer_int16_enum_field@@Base+0xcc>
   2bda0:	ldr	r1, [r4, #20]
   2bda4:	mov	r0, r6
   2bda8:	bl	2aa74 <flatcc_json_printer_int16@@Base+0x2c>
   2bdac:	ldr	r1, [r4, #20]
   2bdb0:	add	r0, r1, r0
   2bdb4:	str	r0, [r4, #20]
   2bdb8:	sub	sp, fp, #28
   2bdbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bdc0:	mov	r0, r4
   2bdc4:	mov	r1, r6
   2bdc8:	mov	r2, sl
   2bdcc:	sub	sp, fp, #28
   2bdd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bdd4:	bx	r2

0002bdd8 <flatcc_json_printer_int32_enum_field@@Base>:
   2bdd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bddc:	add	fp, sp, #28
   2bde0:	sub	sp, sp, #4
   2bde4:	mov	r8, r3
   2bde8:	mov	r5, r1
   2bdec:	mov	r4, r0
   2bdf0:	mov	r0, r1
   2bdf4:	mov	r1, r2
   2bdf8:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2bdfc:	ldr	sl, [fp, #16]
   2be00:	ldr	r7, [fp, #12]
   2be04:	ldr	r9, [fp, #8]
   2be08:	cmp	r0, #0
   2be0c:	beq	2be34 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   2be10:	bl	2b510 <flatcc_json_printer_int32_field@@Base+0xac>
   2be14:	mov	r6, r0
   2be18:	cmp	r0, r7
   2be1c:	bne	2be44 <flatcc_json_printer_int32_enum_field@@Base+0x6c>
   2be20:	ldrb	r0, [r4, #28]
   2be24:	cmp	r0, #0
   2be28:	beq	2be44 <flatcc_json_printer_int32_enum_field@@Base+0x6c>
   2be2c:	sub	sp, fp, #28
   2be30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be34:	ldrb	r0, [r4, #29]
   2be38:	cmp	r0, #0
   2be3c:	mov	r6, r7
   2be40:	beq	2be2c <flatcc_json_printer_int32_enum_field@@Base+0x54>
   2be44:	ldr	r0, [r5, #16]
   2be48:	add	r1, r0, #1
   2be4c:	str	r1, [r5, #16]
   2be50:	cmp	r0, #0
   2be54:	ldrne	r0, [r4, #20]
   2be58:	addne	r1, r0, #1
   2be5c:	strne	r1, [r4, #20]
   2be60:	movne	r1, #44	; 0x2c
   2be64:	strbne	r1, [r0]
   2be68:	mov	r0, r4
   2be6c:	mov	r1, r8
   2be70:	mov	r2, r9
   2be74:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2be78:	ldrb	r0, [r4, #27]
   2be7c:	cmp	r0, #0
   2be80:	beq	2bea4 <flatcc_json_printer_int32_enum_field@@Base+0xcc>
   2be84:	ldr	r1, [r4, #20]
   2be88:	mov	r0, r6
   2be8c:	bl	2aacc <flatcc_json_printer_int32@@Base+0x2c>
   2be90:	ldr	r1, [r4, #20]
   2be94:	add	r0, r1, r0
   2be98:	str	r0, [r4, #20]
   2be9c:	sub	sp, fp, #28
   2bea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bea4:	mov	r0, r4
   2bea8:	mov	r1, r6
   2beac:	mov	r2, sl
   2beb0:	sub	sp, fp, #28
   2beb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2beb8:	bx	r2

0002bebc <flatcc_json_printer_int64_enum_field@@Base>:
   2bebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bec0:	add	fp, sp, #28
   2bec4:	sub	sp, sp, #12
   2bec8:	str	r3, [sp, #8]
   2becc:	mov	r6, r1
   2bed0:	mov	r4, r0
   2bed4:	mov	r0, r1
   2bed8:	mov	r1, r2
   2bedc:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2bee0:	ldr	r5, [fp, #20]
   2bee4:	ldr	r7, [fp, #16]
   2bee8:	ldr	r1, [fp, #24]
   2beec:	str	r1, [sp, #4]
   2bef0:	ldr	r9, [fp, #8]
   2bef4:	cmp	r0, #0
   2bef8:	beq	2bf2c <flatcc_json_printer_int64_enum_field@@Base+0x70>
   2befc:	bl	2b5e4 <flatcc_json_printer_int64_field@@Base+0xcc>
   2bf00:	mov	r8, r0
   2bf04:	mov	sl, r1
   2bf08:	eor	r0, r1, r5
   2bf0c:	eor	r1, r8, r7
   2bf10:	orrs	r0, r1, r0
   2bf14:	bne	2bf40 <flatcc_json_printer_int64_enum_field@@Base+0x84>
   2bf18:	ldrb	r0, [r4, #28]
   2bf1c:	cmp	r0, #0
   2bf20:	beq	2bf40 <flatcc_json_printer_int64_enum_field@@Base+0x84>
   2bf24:	sub	sp, fp, #28
   2bf28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bf2c:	ldrb	r0, [r4, #29]
   2bf30:	cmp	r0, #0
   2bf34:	mov	r8, r7
   2bf38:	mov	sl, r5
   2bf3c:	beq	2bf24 <flatcc_json_printer_int64_enum_field@@Base+0x68>
   2bf40:	ldr	r0, [r6, #16]
   2bf44:	add	r1, r0, #1
   2bf48:	str	r1, [r6, #16]
   2bf4c:	cmp	r0, #0
   2bf50:	ldrne	r0, [r4, #20]
   2bf54:	addne	r1, r0, #1
   2bf58:	strne	r1, [r4, #20]
   2bf5c:	movne	r1, #44	; 0x2c
   2bf60:	strbne	r1, [r0]
   2bf64:	mov	r0, r4
   2bf68:	ldr	r1, [sp, #8]
   2bf6c:	mov	r2, r9
   2bf70:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2bf74:	ldrb	r0, [r4, #27]
   2bf78:	cmp	r0, #0
   2bf7c:	beq	2bfa4 <flatcc_json_printer_int64_enum_field@@Base+0xe8>
   2bf80:	ldr	r2, [r4, #20]
   2bf84:	mov	r0, r8
   2bf88:	mov	r1, sl
   2bf8c:	bl	2ab24 <flatcc_json_printer_int64@@Base+0x30>
   2bf90:	ldr	r1, [r4, #20]
   2bf94:	add	r0, r1, r0
   2bf98:	str	r0, [r4, #20]
   2bf9c:	sub	sp, fp, #28
   2bfa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bfa4:	mov	r0, r4
   2bfa8:	mov	r2, r8
   2bfac:	mov	r3, sl
   2bfb0:	ldr	r1, [sp, #4]
   2bfb4:	sub	sp, fp, #28
   2bfb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bfbc:	bx	r1

0002bfc0 <flatcc_json_printer_bool_enum_field@@Base>:
   2bfc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bfc4:	add	fp, sp, #28
   2bfc8:	sub	sp, sp, #4
   2bfcc:	mov	r8, r3
   2bfd0:	mov	r5, r1
   2bfd4:	mov	r4, r0
   2bfd8:	mov	r0, r1
   2bfdc:	mov	r1, r2
   2bfe0:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2bfe4:	ldr	sl, [fp, #16]
   2bfe8:	ldr	r7, [fp, #12]
   2bfec:	ldr	r9, [fp, #8]
   2bff0:	cmp	r0, #0
   2bff4:	beq	2c01c <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   2bff8:	bl	2b698 <flatcc_json_printer_bool_field@@Base+0xac>
   2bffc:	mov	r6, r0
   2c000:	cmp	r0, r7
   2c004:	bne	2c02c <flatcc_json_printer_bool_enum_field@@Base+0x6c>
   2c008:	ldrb	r0, [r4, #28]
   2c00c:	cmp	r0, #0
   2c010:	beq	2c02c <flatcc_json_printer_bool_enum_field@@Base+0x6c>
   2c014:	sub	sp, fp, #28
   2c018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c01c:	ldrb	r0, [r4, #29]
   2c020:	cmp	r0, #0
   2c024:	mov	r6, r7
   2c028:	beq	2c014 <flatcc_json_printer_bool_enum_field@@Base+0x54>
   2c02c:	ldr	r0, [r5, #16]
   2c030:	add	r1, r0, #1
   2c034:	str	r1, [r5, #16]
   2c038:	cmp	r0, #0
   2c03c:	ldrne	r0, [r4, #20]
   2c040:	addne	r1, r0, #1
   2c044:	strne	r1, [r4, #20]
   2c048:	movne	r1, #44	; 0x2c
   2c04c:	strbne	r1, [r0]
   2c050:	mov	r0, r4
   2c054:	mov	r1, r8
   2c058:	mov	r2, r9
   2c05c:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c060:	ldrb	r0, [r4, #27]
   2c064:	cmp	r0, #0
   2c068:	beq	2c08c <flatcc_json_printer_bool_enum_field@@Base+0xcc>
   2c06c:	ldr	r1, [r4, #20]
   2c070:	mov	r0, r6
   2c074:	bl	2b6a0 <flatcc_json_printer_bool_field@@Base+0xb4>
   2c078:	ldr	r1, [r4, #20]
   2c07c:	add	r0, r1, r0
   2c080:	str	r0, [r4, #20]
   2c084:	sub	sp, fp, #28
   2c088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c08c:	mov	r0, r4
   2c090:	mov	r1, r6
   2c094:	mov	r2, sl
   2c098:	sub	sp, fp, #28
   2c09c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c0a0:	bx	r2

0002c0a4 <flatcc_json_printer_uint8_struct_field@@Base>:
   2c0a4:	push	{r4, r5, r6, sl, fp, lr}
   2c0a8:	add	fp, sp, #16
   2c0ac:	mov	r6, r1
   2c0b0:	mov	r4, r0
   2c0b4:	add	r0, r2, r3
   2c0b8:	bl	2b0b8 <flatcc_json_printer_uint8_field@@Base+0xac>
   2c0bc:	mov	r5, r0
   2c0c0:	ldr	r2, [fp, #12]
   2c0c4:	ldr	r1, [fp, #8]
   2c0c8:	cmp	r6, #0
   2c0cc:	ldrne	r0, [r4, #20]
   2c0d0:	addne	r3, r0, #1
   2c0d4:	strne	r3, [r4, #20]
   2c0d8:	movne	r3, #44	; 0x2c
   2c0dc:	strbne	r3, [r0]
   2c0e0:	mov	r0, r4
   2c0e4:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c0e8:	ldr	r1, [r4, #20]
   2c0ec:	mov	r0, r5
   2c0f0:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2c0f4:	ldr	r1, [r4, #20]
   2c0f8:	add	r0, r1, r0
   2c0fc:	str	r0, [r4, #20]
   2c100:	pop	{r4, r5, r6, sl, fp, pc}

0002c104 <flatcc_json_printer_uint16_struct_field@@Base>:
   2c104:	push	{r4, r5, r6, sl, fp, lr}
   2c108:	add	fp, sp, #16
   2c10c:	mov	r6, r1
   2c110:	mov	r4, r0
   2c114:	add	r0, r2, r3
   2c118:	bl	2b16c <flatcc_json_printer_uint16_field@@Base+0xac>
   2c11c:	mov	r5, r0
   2c120:	ldr	r2, [fp, #12]
   2c124:	ldr	r1, [fp, #8]
   2c128:	cmp	r6, #0
   2c12c:	ldrne	r0, [r4, #20]
   2c130:	addne	r3, r0, #1
   2c134:	strne	r3, [r4, #20]
   2c138:	movne	r3, #44	; 0x2c
   2c13c:	strbne	r3, [r0]
   2c140:	mov	r0, r4
   2c144:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c148:	ldr	r1, [r4, #20]
   2c14c:	mov	r0, r5
   2c150:	bl	2a000 <flatcc_json_printer_uint16@@Base+0x2c>
   2c154:	ldr	r1, [r4, #20]
   2c158:	add	r0, r1, r0
   2c15c:	str	r0, [r4, #20]
   2c160:	pop	{r4, r5, r6, sl, fp, pc}

0002c164 <flatcc_json_printer_uint32_struct_field@@Base>:
   2c164:	push	{r4, r5, r6, sl, fp, lr}
   2c168:	add	fp, sp, #16
   2c16c:	mov	r6, r1
   2c170:	mov	r4, r0
   2c174:	add	r0, r2, r3
   2c178:	bl	2b220 <flatcc_json_printer_uint32_field@@Base+0xac>
   2c17c:	mov	r5, r0
   2c180:	ldr	r2, [fp, #12]
   2c184:	ldr	r1, [fp, #8]
   2c188:	cmp	r6, #0
   2c18c:	ldrne	r0, [r4, #20]
   2c190:	addne	r3, r0, #1
   2c194:	strne	r3, [r4, #20]
   2c198:	movne	r3, #44	; 0x2c
   2c19c:	strbne	r3, [r0]
   2c1a0:	mov	r0, r4
   2c1a4:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c1a8:	ldr	r1, [r4, #20]
   2c1ac:	mov	r0, r5
   2c1b0:	bl	2a18c <flatcc_json_printer_uint32@@Base+0x2c>
   2c1b4:	ldr	r1, [r4, #20]
   2c1b8:	add	r0, r1, r0
   2c1bc:	str	r0, [r4, #20]
   2c1c0:	pop	{r4, r5, r6, sl, fp, pc}

0002c1c4 <flatcc_json_printer_uint64_struct_field@@Base>:
   2c1c4:	push	{r4, r5, r6, r7, fp, lr}
   2c1c8:	add	fp, sp, #16
   2c1cc:	mov	r7, r1
   2c1d0:	mov	r4, r0
   2c1d4:	add	r0, r2, r3
   2c1d8:	bl	2b2f4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2c1dc:	mov	r5, r0
   2c1e0:	mov	r6, r1
   2c1e4:	ldr	r2, [fp, #12]
   2c1e8:	ldr	r1, [fp, #8]
   2c1ec:	cmp	r7, #0
   2c1f0:	ldrne	r0, [r4, #20]
   2c1f4:	addne	r3, r0, #1
   2c1f8:	strne	r3, [r4, #20]
   2c1fc:	movne	r3, #44	; 0x2c
   2c200:	strbne	r3, [r0]
   2c204:	mov	r0, r4
   2c208:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c20c:	ldr	r2, [r4, #20]
   2c210:	mov	r0, r5
   2c214:	mov	r1, r6
   2c218:	bl	2a4c8 <flatcc_json_printer_uint64@@Base+0x30>
   2c21c:	ldr	r1, [r4, #20]
   2c220:	add	r0, r1, r0
   2c224:	str	r0, [r4, #20]
   2c228:	pop	{r4, r5, r6, r7, fp, pc}

0002c22c <flatcc_json_printer_int8_struct_field@@Base>:
   2c22c:	push	{r4, r5, r6, sl, fp, lr}
   2c230:	add	fp, sp, #16
   2c234:	mov	r6, r1
   2c238:	mov	r4, r0
   2c23c:	add	r0, r2, r3
   2c240:	bl	2b3a8 <flatcc_json_printer_int8_field@@Base+0xac>
   2c244:	mov	r5, r0
   2c248:	ldr	r2, [fp, #12]
   2c24c:	ldr	r1, [fp, #8]
   2c250:	cmp	r6, #0
   2c254:	ldrne	r0, [r4, #20]
   2c258:	addne	r3, r0, #1
   2c25c:	strne	r3, [r4, #20]
   2c260:	movne	r3, #44	; 0x2c
   2c264:	strbne	r3, [r0]
   2c268:	mov	r0, r4
   2c26c:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c270:	ldr	r1, [r4, #20]
   2c274:	mov	r0, r5
   2c278:	bl	2aa1c <flatcc_json_printer_int8@@Base+0x2c>
   2c27c:	ldr	r1, [r4, #20]
   2c280:	add	r0, r1, r0
   2c284:	str	r0, [r4, #20]
   2c288:	pop	{r4, r5, r6, sl, fp, pc}

0002c28c <flatcc_json_printer_int16_struct_field@@Base>:
   2c28c:	push	{r4, r5, r6, sl, fp, lr}
   2c290:	add	fp, sp, #16
   2c294:	mov	r6, r1
   2c298:	mov	r4, r0
   2c29c:	add	r0, r2, r3
   2c2a0:	bl	2b45c <flatcc_json_printer_int16_field@@Base+0xac>
   2c2a4:	mov	r5, r0
   2c2a8:	ldr	r2, [fp, #12]
   2c2ac:	ldr	r1, [fp, #8]
   2c2b0:	cmp	r6, #0
   2c2b4:	ldrne	r0, [r4, #20]
   2c2b8:	addne	r3, r0, #1
   2c2bc:	strne	r3, [r4, #20]
   2c2c0:	movne	r3, #44	; 0x2c
   2c2c4:	strbne	r3, [r0]
   2c2c8:	mov	r0, r4
   2c2cc:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c2d0:	ldr	r1, [r4, #20]
   2c2d4:	mov	r0, r5
   2c2d8:	bl	2aa74 <flatcc_json_printer_int16@@Base+0x2c>
   2c2dc:	ldr	r1, [r4, #20]
   2c2e0:	add	r0, r1, r0
   2c2e4:	str	r0, [r4, #20]
   2c2e8:	pop	{r4, r5, r6, sl, fp, pc}

0002c2ec <flatcc_json_printer_int32_struct_field@@Base>:
   2c2ec:	push	{r4, r5, r6, sl, fp, lr}
   2c2f0:	add	fp, sp, #16
   2c2f4:	mov	r6, r1
   2c2f8:	mov	r4, r0
   2c2fc:	add	r0, r2, r3
   2c300:	bl	2b510 <flatcc_json_printer_int32_field@@Base+0xac>
   2c304:	mov	r5, r0
   2c308:	ldr	r2, [fp, #12]
   2c30c:	ldr	r1, [fp, #8]
   2c310:	cmp	r6, #0
   2c314:	ldrne	r0, [r4, #20]
   2c318:	addne	r3, r0, #1
   2c31c:	strne	r3, [r4, #20]
   2c320:	movne	r3, #44	; 0x2c
   2c324:	strbne	r3, [r0]
   2c328:	mov	r0, r4
   2c32c:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c330:	ldr	r1, [r4, #20]
   2c334:	mov	r0, r5
   2c338:	bl	2aacc <flatcc_json_printer_int32@@Base+0x2c>
   2c33c:	ldr	r1, [r4, #20]
   2c340:	add	r0, r1, r0
   2c344:	str	r0, [r4, #20]
   2c348:	pop	{r4, r5, r6, sl, fp, pc}

0002c34c <flatcc_json_printer_int64_struct_field@@Base>:
   2c34c:	push	{r4, r5, r6, r7, fp, lr}
   2c350:	add	fp, sp, #16
   2c354:	mov	r7, r1
   2c358:	mov	r4, r0
   2c35c:	add	r0, r2, r3
   2c360:	bl	2b5e4 <flatcc_json_printer_int64_field@@Base+0xcc>
   2c364:	mov	r5, r0
   2c368:	mov	r6, r1
   2c36c:	ldr	r2, [fp, #12]
   2c370:	ldr	r1, [fp, #8]
   2c374:	cmp	r7, #0
   2c378:	ldrne	r0, [r4, #20]
   2c37c:	addne	r3, r0, #1
   2c380:	strne	r3, [r4, #20]
   2c384:	movne	r3, #44	; 0x2c
   2c388:	strbne	r3, [r0]
   2c38c:	mov	r0, r4
   2c390:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c394:	ldr	r2, [r4, #20]
   2c398:	mov	r0, r5
   2c39c:	mov	r1, r6
   2c3a0:	bl	2ab24 <flatcc_json_printer_int64@@Base+0x30>
   2c3a4:	ldr	r1, [r4, #20]
   2c3a8:	add	r0, r1, r0
   2c3ac:	str	r0, [r4, #20]
   2c3b0:	pop	{r4, r5, r6, r7, fp, pc}

0002c3b4 <flatcc_json_printer_bool_struct_field@@Base>:
   2c3b4:	push	{r4, r5, r6, sl, fp, lr}
   2c3b8:	add	fp, sp, #16
   2c3bc:	mov	r6, r1
   2c3c0:	mov	r4, r0
   2c3c4:	add	r0, r2, r3
   2c3c8:	bl	2b698 <flatcc_json_printer_bool_field@@Base+0xac>
   2c3cc:	mov	r5, r0
   2c3d0:	ldr	r2, [fp, #12]
   2c3d4:	ldr	r1, [fp, #8]
   2c3d8:	cmp	r6, #0
   2c3dc:	ldrne	r0, [r4, #20]
   2c3e0:	addne	r3, r0, #1
   2c3e4:	strne	r3, [r4, #20]
   2c3e8:	movne	r3, #44	; 0x2c
   2c3ec:	strbne	r3, [r0]
   2c3f0:	mov	r0, r4
   2c3f4:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c3f8:	ldr	r1, [r4, #20]
   2c3fc:	mov	r0, r5
   2c400:	bl	2b6a0 <flatcc_json_printer_bool_field@@Base+0xb4>
   2c404:	ldr	r1, [r4, #20]
   2c408:	add	r0, r1, r0
   2c40c:	str	r0, [r4, #20]
   2c410:	pop	{r4, r5, r6, sl, fp, pc}

0002c414 <flatcc_json_printer_float_struct_field@@Base>:
   2c414:	push	{r4, r5, fp, lr}
   2c418:	add	fp, sp, #8
   2c41c:	vpush	{d8}
   2c420:	mov	r5, r1
   2c424:	mov	r4, r0
   2c428:	add	r0, r2, r3
   2c42c:	bl	2b798 <flatcc_json_printer_float_field@@Base+0xb8>
   2c430:	vmov.f32	s16, s0
   2c434:	ldr	r2, [fp, #12]
   2c438:	ldr	r1, [fp, #8]
   2c43c:	cmp	r5, #0
   2c440:	ldrne	r0, [r4, #20]
   2c444:	addne	r3, r0, #1
   2c448:	strne	r3, [r4, #20]
   2c44c:	movne	r3, #44	; 0x2c
   2c450:	strbne	r3, [r0]
   2c454:	mov	r0, r4
   2c458:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c45c:	ldr	r0, [r4, #20]
   2c460:	vcvt.f64.f32	d0, s16
   2c464:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2c468:	ldr	r1, [r4, #20]
   2c46c:	add	r0, r1, r0
   2c470:	str	r0, [r4, #20]
   2c474:	vpop	{d8}
   2c478:	pop	{r4, r5, fp, pc}

0002c47c <flatcc_json_printer_double_struct_field@@Base>:
   2c47c:	push	{r4, r5, fp, lr}
   2c480:	add	fp, sp, #8
   2c484:	vpush	{d8}
   2c488:	mov	r5, r1
   2c48c:	mov	r4, r0
   2c490:	add	r0, r2, r3
   2c494:	bl	2b858 <flatcc_json_printer_double_field@@Base+0xb8>
   2c498:	vmov.f64	d8, d0
   2c49c:	ldr	r2, [fp, #12]
   2c4a0:	ldr	r1, [fp, #8]
   2c4a4:	cmp	r5, #0
   2c4a8:	ldrne	r0, [r4, #20]
   2c4ac:	addne	r3, r0, #1
   2c4b0:	strne	r3, [r4, #20]
   2c4b4:	movne	r3, #44	; 0x2c
   2c4b8:	strbne	r3, [r0]
   2c4bc:	mov	r0, r4
   2c4c0:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c4c4:	ldr	r0, [r4, #20]
   2c4c8:	vmov.f64	d0, d8
   2c4cc:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2c4d0:	ldr	r1, [r4, #20]
   2c4d4:	add	r0, r1, r0
   2c4d8:	str	r0, [r4, #20]
   2c4dc:	vpop	{d8}
   2c4e0:	pop	{r4, r5, fp, pc}

0002c4e4 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   2c4e4:	push	{r4, r5, r6, r7, fp, lr}
   2c4e8:	add	fp, sp, #16
   2c4ec:	mov	r6, r1
   2c4f0:	mov	r4, r0
   2c4f4:	add	r0, r2, r3
   2c4f8:	bl	2b0b8 <flatcc_json_printer_uint8_field@@Base+0xac>
   2c4fc:	mov	r5, r0
   2c500:	add	r7, fp, #8
   2c504:	ldm	r7, {r1, r2, r7}
   2c508:	cmp	r6, #0
   2c50c:	ldrne	r0, [r4, #20]
   2c510:	addne	r3, r0, #1
   2c514:	strne	r3, [r4, #20]
   2c518:	movne	r3, #44	; 0x2c
   2c51c:	strbne	r3, [r0]
   2c520:	mov	r0, r4
   2c524:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c528:	ldrb	r0, [r4, #27]
   2c52c:	cmp	r0, #0
   2c530:	beq	2c550 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x6c>
   2c534:	ldr	r1, [r4, #20]
   2c538:	mov	r0, r5
   2c53c:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2c540:	ldr	r1, [r4, #20]
   2c544:	add	r0, r1, r0
   2c548:	str	r0, [r4, #20]
   2c54c:	pop	{r4, r5, r6, r7, fp, pc}
   2c550:	mov	r0, r4
   2c554:	mov	r1, r5
   2c558:	mov	r2, r7
   2c55c:	pop	{r4, r5, r6, r7, fp, lr}
   2c560:	bx	r2

0002c564 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   2c564:	push	{r4, r5, r6, r7, fp, lr}
   2c568:	add	fp, sp, #16
   2c56c:	mov	r6, r1
   2c570:	mov	r4, r0
   2c574:	add	r0, r2, r3
   2c578:	bl	2b16c <flatcc_json_printer_uint16_field@@Base+0xac>
   2c57c:	mov	r5, r0
   2c580:	add	r7, fp, #8
   2c584:	ldm	r7, {r1, r2, r7}
   2c588:	cmp	r6, #0
   2c58c:	ldrne	r0, [r4, #20]
   2c590:	addne	r3, r0, #1
   2c594:	strne	r3, [r4, #20]
   2c598:	movne	r3, #44	; 0x2c
   2c59c:	strbne	r3, [r0]
   2c5a0:	mov	r0, r4
   2c5a4:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c5a8:	ldrb	r0, [r4, #27]
   2c5ac:	cmp	r0, #0
   2c5b0:	beq	2c5d0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x6c>
   2c5b4:	ldr	r1, [r4, #20]
   2c5b8:	mov	r0, r5
   2c5bc:	bl	2a000 <flatcc_json_printer_uint16@@Base+0x2c>
   2c5c0:	ldr	r1, [r4, #20]
   2c5c4:	add	r0, r1, r0
   2c5c8:	str	r0, [r4, #20]
   2c5cc:	pop	{r4, r5, r6, r7, fp, pc}
   2c5d0:	mov	r0, r4
   2c5d4:	mov	r1, r5
   2c5d8:	mov	r2, r7
   2c5dc:	pop	{r4, r5, r6, r7, fp, lr}
   2c5e0:	bx	r2

0002c5e4 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   2c5e4:	push	{r4, r5, r6, r7, fp, lr}
   2c5e8:	add	fp, sp, #16
   2c5ec:	mov	r6, r1
   2c5f0:	mov	r4, r0
   2c5f4:	add	r0, r2, r3
   2c5f8:	bl	2b220 <flatcc_json_printer_uint32_field@@Base+0xac>
   2c5fc:	mov	r5, r0
   2c600:	add	r7, fp, #8
   2c604:	ldm	r7, {r1, r2, r7}
   2c608:	cmp	r6, #0
   2c60c:	ldrne	r0, [r4, #20]
   2c610:	addne	r3, r0, #1
   2c614:	strne	r3, [r4, #20]
   2c618:	movne	r3, #44	; 0x2c
   2c61c:	strbne	r3, [r0]
   2c620:	mov	r0, r4
   2c624:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c628:	ldrb	r0, [r4, #27]
   2c62c:	cmp	r0, #0
   2c630:	beq	2c650 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x6c>
   2c634:	ldr	r1, [r4, #20]
   2c638:	mov	r0, r5
   2c63c:	bl	2a18c <flatcc_json_printer_uint32@@Base+0x2c>
   2c640:	ldr	r1, [r4, #20]
   2c644:	add	r0, r1, r0
   2c648:	str	r0, [r4, #20]
   2c64c:	pop	{r4, r5, r6, r7, fp, pc}
   2c650:	mov	r0, r4
   2c654:	mov	r1, r5
   2c658:	mov	r2, r7
   2c65c:	pop	{r4, r5, r6, r7, fp, lr}
   2c660:	bx	r2

0002c664 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   2c664:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c668:	add	fp, sp, #24
   2c66c:	mov	r7, r1
   2c670:	mov	r4, r0
   2c674:	add	r0, r2, r3
   2c678:	bl	2b2f4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2c67c:	mov	r6, r0
   2c680:	mov	r5, r1
   2c684:	add	r8, fp, #8
   2c688:	ldm	r8, {r1, r2, r8}
   2c68c:	cmp	r7, #0
   2c690:	ldrne	r0, [r4, #20]
   2c694:	addne	r3, r0, #1
   2c698:	strne	r3, [r4, #20]
   2c69c:	movne	r3, #44	; 0x2c
   2c6a0:	strbne	r3, [r0]
   2c6a4:	mov	r0, r4
   2c6a8:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c6ac:	ldrb	r0, [r4, #27]
   2c6b0:	cmp	r0, #0
   2c6b4:	beq	2c6d8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x74>
   2c6b8:	ldr	r2, [r4, #20]
   2c6bc:	mov	r0, r6
   2c6c0:	mov	r1, r5
   2c6c4:	bl	2a4c8 <flatcc_json_printer_uint64@@Base+0x30>
   2c6c8:	ldr	r1, [r4, #20]
   2c6cc:	add	r0, r1, r0
   2c6d0:	str	r0, [r4, #20]
   2c6d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c6d8:	mov	r0, r4
   2c6dc:	mov	r2, r6
   2c6e0:	mov	r3, r5
   2c6e4:	mov	r1, r8
   2c6e8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c6ec:	bx	r1

0002c6f0 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   2c6f0:	push	{r4, r5, r6, r7, fp, lr}
   2c6f4:	add	fp, sp, #16
   2c6f8:	mov	r6, r1
   2c6fc:	mov	r4, r0
   2c700:	add	r0, r2, r3
   2c704:	bl	2b3a8 <flatcc_json_printer_int8_field@@Base+0xac>
   2c708:	mov	r5, r0
   2c70c:	add	r7, fp, #8
   2c710:	ldm	r7, {r1, r2, r7}
   2c714:	cmp	r6, #0
   2c718:	ldrne	r0, [r4, #20]
   2c71c:	addne	r3, r0, #1
   2c720:	strne	r3, [r4, #20]
   2c724:	movne	r3, #44	; 0x2c
   2c728:	strbne	r3, [r0]
   2c72c:	mov	r0, r4
   2c730:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c734:	ldrb	r0, [r4, #27]
   2c738:	cmp	r0, #0
   2c73c:	beq	2c75c <flatcc_json_printer_int8_enum_struct_field@@Base+0x6c>
   2c740:	ldr	r1, [r4, #20]
   2c744:	mov	r0, r5
   2c748:	bl	2aa1c <flatcc_json_printer_int8@@Base+0x2c>
   2c74c:	ldr	r1, [r4, #20]
   2c750:	add	r0, r1, r0
   2c754:	str	r0, [r4, #20]
   2c758:	pop	{r4, r5, r6, r7, fp, pc}
   2c75c:	mov	r0, r4
   2c760:	mov	r1, r5
   2c764:	mov	r2, r7
   2c768:	pop	{r4, r5, r6, r7, fp, lr}
   2c76c:	bx	r2

0002c770 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   2c770:	push	{r4, r5, r6, r7, fp, lr}
   2c774:	add	fp, sp, #16
   2c778:	mov	r6, r1
   2c77c:	mov	r4, r0
   2c780:	add	r0, r2, r3
   2c784:	bl	2b45c <flatcc_json_printer_int16_field@@Base+0xac>
   2c788:	mov	r5, r0
   2c78c:	add	r7, fp, #8
   2c790:	ldm	r7, {r1, r2, r7}
   2c794:	cmp	r6, #0
   2c798:	ldrne	r0, [r4, #20]
   2c79c:	addne	r3, r0, #1
   2c7a0:	strne	r3, [r4, #20]
   2c7a4:	movne	r3, #44	; 0x2c
   2c7a8:	strbne	r3, [r0]
   2c7ac:	mov	r0, r4
   2c7b0:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c7b4:	ldrb	r0, [r4, #27]
   2c7b8:	cmp	r0, #0
   2c7bc:	beq	2c7dc <flatcc_json_printer_int16_enum_struct_field@@Base+0x6c>
   2c7c0:	ldr	r1, [r4, #20]
   2c7c4:	mov	r0, r5
   2c7c8:	bl	2aa74 <flatcc_json_printer_int16@@Base+0x2c>
   2c7cc:	ldr	r1, [r4, #20]
   2c7d0:	add	r0, r1, r0
   2c7d4:	str	r0, [r4, #20]
   2c7d8:	pop	{r4, r5, r6, r7, fp, pc}
   2c7dc:	mov	r0, r4
   2c7e0:	mov	r1, r5
   2c7e4:	mov	r2, r7
   2c7e8:	pop	{r4, r5, r6, r7, fp, lr}
   2c7ec:	bx	r2

0002c7f0 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   2c7f0:	push	{r4, r5, r6, r7, fp, lr}
   2c7f4:	add	fp, sp, #16
   2c7f8:	mov	r6, r1
   2c7fc:	mov	r4, r0
   2c800:	add	r0, r2, r3
   2c804:	bl	2b510 <flatcc_json_printer_int32_field@@Base+0xac>
   2c808:	mov	r5, r0
   2c80c:	add	r7, fp, #8
   2c810:	ldm	r7, {r1, r2, r7}
   2c814:	cmp	r6, #0
   2c818:	ldrne	r0, [r4, #20]
   2c81c:	addne	r3, r0, #1
   2c820:	strne	r3, [r4, #20]
   2c824:	movne	r3, #44	; 0x2c
   2c828:	strbne	r3, [r0]
   2c82c:	mov	r0, r4
   2c830:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c834:	ldrb	r0, [r4, #27]
   2c838:	cmp	r0, #0
   2c83c:	beq	2c85c <flatcc_json_printer_int32_enum_struct_field@@Base+0x6c>
   2c840:	ldr	r1, [r4, #20]
   2c844:	mov	r0, r5
   2c848:	bl	2aacc <flatcc_json_printer_int32@@Base+0x2c>
   2c84c:	ldr	r1, [r4, #20]
   2c850:	add	r0, r1, r0
   2c854:	str	r0, [r4, #20]
   2c858:	pop	{r4, r5, r6, r7, fp, pc}
   2c85c:	mov	r0, r4
   2c860:	mov	r1, r5
   2c864:	mov	r2, r7
   2c868:	pop	{r4, r5, r6, r7, fp, lr}
   2c86c:	bx	r2

0002c870 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   2c870:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c874:	add	fp, sp, #24
   2c878:	mov	r7, r1
   2c87c:	mov	r4, r0
   2c880:	add	r0, r2, r3
   2c884:	bl	2b5e4 <flatcc_json_printer_int64_field@@Base+0xcc>
   2c888:	mov	r6, r0
   2c88c:	mov	r5, r1
   2c890:	add	r8, fp, #8
   2c894:	ldm	r8, {r1, r2, r8}
   2c898:	cmp	r7, #0
   2c89c:	ldrne	r0, [r4, #20]
   2c8a0:	addne	r3, r0, #1
   2c8a4:	strne	r3, [r4, #20]
   2c8a8:	movne	r3, #44	; 0x2c
   2c8ac:	strbne	r3, [r0]
   2c8b0:	mov	r0, r4
   2c8b4:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c8b8:	ldrb	r0, [r4, #27]
   2c8bc:	cmp	r0, #0
   2c8c0:	beq	2c8e4 <flatcc_json_printer_int64_enum_struct_field@@Base+0x74>
   2c8c4:	ldr	r2, [r4, #20]
   2c8c8:	mov	r0, r6
   2c8cc:	mov	r1, r5
   2c8d0:	bl	2ab24 <flatcc_json_printer_int64@@Base+0x30>
   2c8d4:	ldr	r1, [r4, #20]
   2c8d8:	add	r0, r1, r0
   2c8dc:	str	r0, [r4, #20]
   2c8e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c8e4:	mov	r0, r4
   2c8e8:	mov	r2, r6
   2c8ec:	mov	r3, r5
   2c8f0:	mov	r1, r8
   2c8f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c8f8:	bx	r1

0002c8fc <flatcc_json_printer_bool_enum_struct_field@@Base>:
   2c8fc:	push	{r4, r5, r6, r7, fp, lr}
   2c900:	add	fp, sp, #16
   2c904:	mov	r6, r1
   2c908:	mov	r4, r0
   2c90c:	add	r0, r2, r3
   2c910:	bl	2b698 <flatcc_json_printer_bool_field@@Base+0xac>
   2c914:	mov	r5, r0
   2c918:	add	r7, fp, #8
   2c91c:	ldm	r7, {r1, r2, r7}
   2c920:	cmp	r6, #0
   2c924:	ldrne	r0, [r4, #20]
   2c928:	addne	r3, r0, #1
   2c92c:	strne	r3, [r4, #20]
   2c930:	movne	r3, #44	; 0x2c
   2c934:	strbne	r3, [r0]
   2c938:	mov	r0, r4
   2c93c:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c940:	ldrb	r0, [r4, #27]
   2c944:	cmp	r0, #0
   2c948:	beq	2c968 <flatcc_json_printer_bool_enum_struct_field@@Base+0x6c>
   2c94c:	ldr	r1, [r4, #20]
   2c950:	mov	r0, r5
   2c954:	bl	2b6a0 <flatcc_json_printer_bool_field@@Base+0xb4>
   2c958:	ldr	r1, [r4, #20]
   2c95c:	add	r0, r1, r0
   2c960:	str	r0, [r4, #20]
   2c964:	pop	{r4, r5, r6, r7, fp, pc}
   2c968:	mov	r0, r4
   2c96c:	mov	r1, r5
   2c970:	mov	r2, r7
   2c974:	pop	{r4, r5, r6, r7, fp, lr}
   2c978:	bx	r2

0002c97c <flatcc_json_printer_utype_vector_field@@Base>:
   2c97c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c980:	add	fp, sp, #24
   2c984:	mov	r7, r3
   2c988:	mov	r5, r1
   2c98c:	mov	r4, r0
   2c990:	mov	r0, r1
   2c994:	mov	r1, r2
   2c998:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2c99c:	cmp	r0, #0
   2c9a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c9a4:	ldr	r8, [fp, #8]
   2c9a8:	ldr	r1, [r5, #16]
   2c9ac:	add	r2, r1, #1
   2c9b0:	str	r2, [r5, #16]
   2c9b4:	cmp	r1, #0
   2c9b8:	ldrne	r1, [r4, #20]
   2c9bc:	addne	r2, r1, #1
   2c9c0:	strne	r2, [r4, #20]
   2c9c4:	movne	r2, #44	; 0x2c
   2c9c8:	strbne	r2, [r1]
   2c9cc:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2c9d0:	mov	r5, r0
   2c9d4:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2c9d8:	mov	r6, r0
   2c9dc:	mov	r0, r4
   2c9e0:	mov	r1, r7
   2c9e4:	mov	r2, r8
   2c9e8:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2c9ec:	ldr	r0, [r4, #20]
   2c9f0:	ldr	r1, [r4, #32]
   2c9f4:	add	r1, r1, #1
   2c9f8:	str	r1, [r4, #32]
   2c9fc:	add	r1, r0, #1
   2ca00:	str	r1, [r4, #20]
   2ca04:	mov	r1, #91	; 0x5b
   2ca08:	strb	r1, [r0]
   2ca0c:	cmp	r6, #0
   2ca10:	beq	2cae8 <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   2ca14:	add	r7, r5, #4
   2ca18:	ldrb	r0, [r4, #25]
   2ca1c:	cmp	r0, #0
   2ca20:	beq	2ca44 <flatcc_json_printer_utype_vector_field@@Base+0xc8>
   2ca24:	ldr	r0, [r4, #20]
   2ca28:	add	r1, r0, #1
   2ca2c:	str	r1, [r4, #20]
   2ca30:	mov	r1, #10
   2ca34:	strb	r1, [r0]
   2ca38:	mov	r0, r4
   2ca3c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ca40:	b	2ca4c <flatcc_json_printer_utype_vector_field@@Base+0xd0>
   2ca44:	mov	r0, r4
   2ca48:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ca4c:	mov	r0, r7
   2ca50:	bl	2cb3c <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2ca54:	ldr	r1, [r4, #20]
   2ca58:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2ca5c:	ldr	r1, [r4, #20]
   2ca60:	add	r0, r1, r0
   2ca64:	str	r0, [r4, #20]
   2ca68:	cmp	r6, #1
   2ca6c:	beq	2cae8 <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   2ca70:	rsb	r6, r6, #1
   2ca74:	add	r5, r5, #5
   2ca78:	mov	r7, #44	; 0x2c
   2ca7c:	mov	r8, #10
   2ca80:	ldr	r0, [r4, #20]
   2ca84:	add	r1, r0, #1
   2ca88:	str	r1, [r4, #20]
   2ca8c:	strb	r7, [r0]
   2ca90:	ldrb	r0, [r4, #25]
   2ca94:	cmp	r0, #0
   2ca98:	beq	2cab8 <flatcc_json_printer_utype_vector_field@@Base+0x13c>
   2ca9c:	ldr	r0, [r4, #20]
   2caa0:	add	r1, r0, #1
   2caa4:	str	r1, [r4, #20]
   2caa8:	strb	r8, [r0]
   2caac:	mov	r0, r4
   2cab0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2cab4:	b	2cac0 <flatcc_json_printer_utype_vector_field@@Base+0x144>
   2cab8:	mov	r0, r4
   2cabc:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2cac0:	mov	r0, r5
   2cac4:	bl	2cb3c <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2cac8:	ldr	r1, [r4, #20]
   2cacc:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2cad0:	ldr	r1, [r4, #20]
   2cad4:	add	r0, r1, r0
   2cad8:	str	r0, [r4, #20]
   2cadc:	adds	r6, r6, #1
   2cae0:	add	r5, r5, #1
   2cae4:	bne	2ca80 <flatcc_json_printer_utype_vector_field@@Base+0x104>
   2cae8:	ldrb	r0, [r4, #25]
   2caec:	cmp	r0, #0
   2caf0:	beq	2cb1c <flatcc_json_printer_utype_vector_field@@Base+0x1a0>
   2caf4:	ldr	r0, [r4, #20]
   2caf8:	add	r1, r0, #1
   2cafc:	str	r1, [r4, #20]
   2cb00:	mov	r1, #10
   2cb04:	strb	r1, [r0]
   2cb08:	ldr	r0, [r4, #32]
   2cb0c:	sub	r0, r0, #1
   2cb10:	str	r0, [r4, #32]
   2cb14:	mov	r0, r4
   2cb18:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2cb1c:	ldr	r0, [r4, #20]
   2cb20:	add	r1, r0, #1
   2cb24:	str	r1, [r4, #20]
   2cb28:	mov	r1, #93	; 0x5d
   2cb2c:	strb	r1, [r0]
   2cb30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cb34:	ldr	r0, [r0]
   2cb38:	b	31534 <flatcc_json_printer_clear@@Base+0xec8>
   2cb3c:	ldrb	r0, [r0]
   2cb40:	b	31538 <flatcc_json_printer_clear@@Base+0xecc>

0002cb44 <flatcc_json_printer_uint8_vector_field@@Base>:
   2cb44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cb48:	add	fp, sp, #24
   2cb4c:	mov	r7, r3
   2cb50:	mov	r5, r1
   2cb54:	mov	r4, r0
   2cb58:	mov	r0, r1
   2cb5c:	mov	r1, r2
   2cb60:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2cb64:	cmp	r0, #0
   2cb68:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cb6c:	ldr	r8, [fp, #8]
   2cb70:	ldr	r1, [r5, #16]
   2cb74:	add	r2, r1, #1
   2cb78:	str	r2, [r5, #16]
   2cb7c:	cmp	r1, #0
   2cb80:	ldrne	r1, [r4, #20]
   2cb84:	addne	r2, r1, #1
   2cb88:	strne	r2, [r4, #20]
   2cb8c:	movne	r2, #44	; 0x2c
   2cb90:	strbne	r2, [r1]
   2cb94:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2cb98:	mov	r5, r0
   2cb9c:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2cba0:	mov	r6, r0
   2cba4:	mov	r0, r4
   2cba8:	mov	r1, r7
   2cbac:	mov	r2, r8
   2cbb0:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2cbb4:	ldr	r0, [r4, #20]
   2cbb8:	ldr	r1, [r4, #32]
   2cbbc:	add	r1, r1, #1
   2cbc0:	str	r1, [r4, #32]
   2cbc4:	add	r1, r0, #1
   2cbc8:	str	r1, [r4, #20]
   2cbcc:	mov	r1, #91	; 0x5b
   2cbd0:	strb	r1, [r0]
   2cbd4:	cmp	r6, #0
   2cbd8:	beq	2ccb0 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   2cbdc:	add	r7, r5, #4
   2cbe0:	ldrb	r0, [r4, #25]
   2cbe4:	cmp	r0, #0
   2cbe8:	beq	2cc0c <flatcc_json_printer_uint8_vector_field@@Base+0xc8>
   2cbec:	ldr	r0, [r4, #20]
   2cbf0:	add	r1, r0, #1
   2cbf4:	str	r1, [r4, #20]
   2cbf8:	mov	r1, #10
   2cbfc:	strb	r1, [r0]
   2cc00:	mov	r0, r4
   2cc04:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2cc08:	b	2cc14 <flatcc_json_printer_uint8_vector_field@@Base+0xd0>
   2cc0c:	mov	r0, r4
   2cc10:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2cc14:	mov	r0, r7
   2cc18:	bl	2b0b8 <flatcc_json_printer_uint8_field@@Base+0xac>
   2cc1c:	ldr	r1, [r4, #20]
   2cc20:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2cc24:	ldr	r1, [r4, #20]
   2cc28:	add	r0, r1, r0
   2cc2c:	str	r0, [r4, #20]
   2cc30:	cmp	r6, #1
   2cc34:	beq	2ccb0 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   2cc38:	rsb	r6, r6, #1
   2cc3c:	add	r5, r5, #5
   2cc40:	mov	r7, #44	; 0x2c
   2cc44:	mov	r8, #10
   2cc48:	ldr	r0, [r4, #20]
   2cc4c:	add	r1, r0, #1
   2cc50:	str	r1, [r4, #20]
   2cc54:	strb	r7, [r0]
   2cc58:	ldrb	r0, [r4, #25]
   2cc5c:	cmp	r0, #0
   2cc60:	beq	2cc80 <flatcc_json_printer_uint8_vector_field@@Base+0x13c>
   2cc64:	ldr	r0, [r4, #20]
   2cc68:	add	r1, r0, #1
   2cc6c:	str	r1, [r4, #20]
   2cc70:	strb	r8, [r0]
   2cc74:	mov	r0, r4
   2cc78:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2cc7c:	b	2cc88 <flatcc_json_printer_uint8_vector_field@@Base+0x144>
   2cc80:	mov	r0, r4
   2cc84:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2cc88:	mov	r0, r5
   2cc8c:	bl	2b0b8 <flatcc_json_printer_uint8_field@@Base+0xac>
   2cc90:	ldr	r1, [r4, #20]
   2cc94:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2cc98:	ldr	r1, [r4, #20]
   2cc9c:	add	r0, r1, r0
   2cca0:	str	r0, [r4, #20]
   2cca4:	adds	r6, r6, #1
   2cca8:	add	r5, r5, #1
   2ccac:	bne	2cc48 <flatcc_json_printer_uint8_vector_field@@Base+0x104>
   2ccb0:	ldrb	r0, [r4, #25]
   2ccb4:	cmp	r0, #0
   2ccb8:	beq	2cce4 <flatcc_json_printer_uint8_vector_field@@Base+0x1a0>
   2ccbc:	ldr	r0, [r4, #20]
   2ccc0:	add	r1, r0, #1
   2ccc4:	str	r1, [r4, #20]
   2ccc8:	mov	r1, #10
   2cccc:	strb	r1, [r0]
   2ccd0:	ldr	r0, [r4, #32]
   2ccd4:	sub	r0, r0, #1
   2ccd8:	str	r0, [r4, #32]
   2ccdc:	mov	r0, r4
   2cce0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2cce4:	ldr	r0, [r4, #20]
   2cce8:	add	r1, r0, #1
   2ccec:	str	r1, [r4, #20]
   2ccf0:	mov	r1, #93	; 0x5d
   2ccf4:	strb	r1, [r0]
   2ccf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002ccfc <flatcc_json_printer_uint16_vector_field@@Base>:
   2ccfc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cd00:	add	fp, sp, #24
   2cd04:	mov	r7, r3
   2cd08:	mov	r5, r1
   2cd0c:	mov	r4, r0
   2cd10:	mov	r0, r1
   2cd14:	mov	r1, r2
   2cd18:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2cd1c:	cmp	r0, #0
   2cd20:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cd24:	ldr	r8, [fp, #8]
   2cd28:	ldr	r1, [r5, #16]
   2cd2c:	add	r2, r1, #1
   2cd30:	str	r2, [r5, #16]
   2cd34:	cmp	r1, #0
   2cd38:	ldrne	r1, [r4, #20]
   2cd3c:	addne	r2, r1, #1
   2cd40:	strne	r2, [r4, #20]
   2cd44:	movne	r2, #44	; 0x2c
   2cd48:	strbne	r2, [r1]
   2cd4c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2cd50:	mov	r5, r0
   2cd54:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2cd58:	mov	r6, r0
   2cd5c:	mov	r0, r4
   2cd60:	mov	r1, r7
   2cd64:	mov	r2, r8
   2cd68:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2cd6c:	ldr	r0, [r4, #20]
   2cd70:	ldr	r1, [r4, #32]
   2cd74:	add	r1, r1, #1
   2cd78:	str	r1, [r4, #32]
   2cd7c:	add	r1, r0, #1
   2cd80:	str	r1, [r4, #20]
   2cd84:	mov	r1, #91	; 0x5b
   2cd88:	strb	r1, [r0]
   2cd8c:	cmp	r6, #0
   2cd90:	beq	2ce68 <flatcc_json_printer_uint16_vector_field@@Base+0x16c>
   2cd94:	add	r7, r5, #4
   2cd98:	ldrb	r0, [r4, #25]
   2cd9c:	cmp	r0, #0
   2cda0:	beq	2cdc4 <flatcc_json_printer_uint16_vector_field@@Base+0xc8>
   2cda4:	ldr	r0, [r4, #20]
   2cda8:	add	r1, r0, #1
   2cdac:	str	r1, [r4, #20]
   2cdb0:	mov	r1, #10
   2cdb4:	strb	r1, [r0]
   2cdb8:	mov	r0, r4
   2cdbc:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2cdc0:	b	2cdcc <flatcc_json_printer_uint16_vector_field@@Base+0xd0>
   2cdc4:	mov	r0, r4
   2cdc8:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2cdcc:	mov	r0, r7
   2cdd0:	bl	2b16c <flatcc_json_printer_uint16_field@@Base+0xac>
   2cdd4:	ldr	r1, [r4, #20]
   2cdd8:	bl	2a000 <flatcc_json_printer_uint16@@Base+0x2c>
   2cddc:	ldr	r1, [r4, #20]
   2cde0:	add	r0, r1, r0
   2cde4:	str	r0, [r4, #20]
   2cde8:	cmp	r6, #1
   2cdec:	beq	2ce68 <flatcc_json_printer_uint16_vector_field@@Base+0x16c>
   2cdf0:	rsb	r6, r6, #1
   2cdf4:	add	r5, r5, #6
   2cdf8:	mov	r7, #44	; 0x2c
   2cdfc:	mov	r8, #10
   2ce00:	ldr	r0, [r4, #20]
   2ce04:	add	r1, r0, #1
   2ce08:	str	r1, [r4, #20]
   2ce0c:	strb	r7, [r0]
   2ce10:	ldrb	r0, [r4, #25]
   2ce14:	cmp	r0, #0
   2ce18:	beq	2ce38 <flatcc_json_printer_uint16_vector_field@@Base+0x13c>
   2ce1c:	ldr	r0, [r4, #20]
   2ce20:	add	r1, r0, #1
   2ce24:	str	r1, [r4, #20]
   2ce28:	strb	r8, [r0]
   2ce2c:	mov	r0, r4
   2ce30:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ce34:	b	2ce40 <flatcc_json_printer_uint16_vector_field@@Base+0x144>
   2ce38:	mov	r0, r4
   2ce3c:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ce40:	mov	r0, r5
   2ce44:	bl	2b16c <flatcc_json_printer_uint16_field@@Base+0xac>
   2ce48:	ldr	r1, [r4, #20]
   2ce4c:	bl	2a000 <flatcc_json_printer_uint16@@Base+0x2c>
   2ce50:	ldr	r1, [r4, #20]
   2ce54:	add	r0, r1, r0
   2ce58:	str	r0, [r4, #20]
   2ce5c:	adds	r6, r6, #1
   2ce60:	add	r5, r5, #2
   2ce64:	bne	2ce00 <flatcc_json_printer_uint16_vector_field@@Base+0x104>
   2ce68:	ldrb	r0, [r4, #25]
   2ce6c:	cmp	r0, #0
   2ce70:	beq	2ce9c <flatcc_json_printer_uint16_vector_field@@Base+0x1a0>
   2ce74:	ldr	r0, [r4, #20]
   2ce78:	add	r1, r0, #1
   2ce7c:	str	r1, [r4, #20]
   2ce80:	mov	r1, #10
   2ce84:	strb	r1, [r0]
   2ce88:	ldr	r0, [r4, #32]
   2ce8c:	sub	r0, r0, #1
   2ce90:	str	r0, [r4, #32]
   2ce94:	mov	r0, r4
   2ce98:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ce9c:	ldr	r0, [r4, #20]
   2cea0:	add	r1, r0, #1
   2cea4:	str	r1, [r4, #20]
   2cea8:	mov	r1, #93	; 0x5d
   2ceac:	strb	r1, [r0]
   2ceb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002ceb4 <flatcc_json_printer_uint32_vector_field@@Base>:
   2ceb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ceb8:	add	fp, sp, #24
   2cebc:	mov	r7, r3
   2cec0:	mov	r5, r1
   2cec4:	mov	r4, r0
   2cec8:	mov	r0, r1
   2cecc:	mov	r1, r2
   2ced0:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2ced4:	cmp	r0, #0
   2ced8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cedc:	ldr	r8, [fp, #8]
   2cee0:	ldr	r1, [r5, #16]
   2cee4:	add	r2, r1, #1
   2cee8:	str	r2, [r5, #16]
   2ceec:	cmp	r1, #0
   2cef0:	ldrne	r1, [r4, #20]
   2cef4:	addne	r2, r1, #1
   2cef8:	strne	r2, [r4, #20]
   2cefc:	movne	r2, #44	; 0x2c
   2cf00:	strbne	r2, [r1]
   2cf04:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2cf08:	mov	r5, r0
   2cf0c:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2cf10:	mov	r6, r0
   2cf14:	mov	r0, r4
   2cf18:	mov	r1, r7
   2cf1c:	mov	r2, r8
   2cf20:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2cf24:	ldr	r0, [r4, #20]
   2cf28:	ldr	r1, [r4, #32]
   2cf2c:	add	r1, r1, #1
   2cf30:	str	r1, [r4, #32]
   2cf34:	add	r1, r0, #1
   2cf38:	str	r1, [r4, #20]
   2cf3c:	mov	r1, #91	; 0x5b
   2cf40:	strb	r1, [r0]
   2cf44:	cmp	r6, #0
   2cf48:	beq	2d020 <flatcc_json_printer_uint32_vector_field@@Base+0x16c>
   2cf4c:	add	r7, r5, #4
   2cf50:	ldrb	r0, [r4, #25]
   2cf54:	cmp	r0, #0
   2cf58:	beq	2cf7c <flatcc_json_printer_uint32_vector_field@@Base+0xc8>
   2cf5c:	ldr	r0, [r4, #20]
   2cf60:	add	r1, r0, #1
   2cf64:	str	r1, [r4, #20]
   2cf68:	mov	r1, #10
   2cf6c:	strb	r1, [r0]
   2cf70:	mov	r0, r4
   2cf74:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2cf78:	b	2cf84 <flatcc_json_printer_uint32_vector_field@@Base+0xd0>
   2cf7c:	mov	r0, r4
   2cf80:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2cf84:	mov	r0, r7
   2cf88:	bl	2b220 <flatcc_json_printer_uint32_field@@Base+0xac>
   2cf8c:	ldr	r1, [r4, #20]
   2cf90:	bl	2a18c <flatcc_json_printer_uint32@@Base+0x2c>
   2cf94:	ldr	r1, [r4, #20]
   2cf98:	add	r0, r1, r0
   2cf9c:	str	r0, [r4, #20]
   2cfa0:	cmp	r6, #1
   2cfa4:	beq	2d020 <flatcc_json_printer_uint32_vector_field@@Base+0x16c>
   2cfa8:	rsb	r6, r6, #1
   2cfac:	add	r5, r5, #8
   2cfb0:	mov	r7, #44	; 0x2c
   2cfb4:	mov	r8, #10
   2cfb8:	ldr	r0, [r4, #20]
   2cfbc:	add	r1, r0, #1
   2cfc0:	str	r1, [r4, #20]
   2cfc4:	strb	r7, [r0]
   2cfc8:	ldrb	r0, [r4, #25]
   2cfcc:	cmp	r0, #0
   2cfd0:	beq	2cff0 <flatcc_json_printer_uint32_vector_field@@Base+0x13c>
   2cfd4:	ldr	r0, [r4, #20]
   2cfd8:	add	r1, r0, #1
   2cfdc:	str	r1, [r4, #20]
   2cfe0:	strb	r8, [r0]
   2cfe4:	mov	r0, r4
   2cfe8:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2cfec:	b	2cff8 <flatcc_json_printer_uint32_vector_field@@Base+0x144>
   2cff0:	mov	r0, r4
   2cff4:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2cff8:	mov	r0, r5
   2cffc:	bl	2b220 <flatcc_json_printer_uint32_field@@Base+0xac>
   2d000:	ldr	r1, [r4, #20]
   2d004:	bl	2a18c <flatcc_json_printer_uint32@@Base+0x2c>
   2d008:	ldr	r1, [r4, #20]
   2d00c:	add	r0, r1, r0
   2d010:	str	r0, [r4, #20]
   2d014:	adds	r6, r6, #1
   2d018:	add	r5, r5, #4
   2d01c:	bne	2cfb8 <flatcc_json_printer_uint32_vector_field@@Base+0x104>
   2d020:	ldrb	r0, [r4, #25]
   2d024:	cmp	r0, #0
   2d028:	beq	2d054 <flatcc_json_printer_uint32_vector_field@@Base+0x1a0>
   2d02c:	ldr	r0, [r4, #20]
   2d030:	add	r1, r0, #1
   2d034:	str	r1, [r4, #20]
   2d038:	mov	r1, #10
   2d03c:	strb	r1, [r0]
   2d040:	ldr	r0, [r4, #32]
   2d044:	sub	r0, r0, #1
   2d048:	str	r0, [r4, #32]
   2d04c:	mov	r0, r4
   2d050:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d054:	ldr	r0, [r4, #20]
   2d058:	add	r1, r0, #1
   2d05c:	str	r1, [r4, #20]
   2d060:	mov	r1, #93	; 0x5d
   2d064:	strb	r1, [r0]
   2d068:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d06c <flatcc_json_printer_uint64_vector_field@@Base>:
   2d06c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d070:	add	fp, sp, #24
   2d074:	mov	r7, r3
   2d078:	mov	r5, r1
   2d07c:	mov	r4, r0
   2d080:	mov	r0, r1
   2d084:	mov	r1, r2
   2d088:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2d08c:	cmp	r0, #0
   2d090:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d094:	ldr	r8, [fp, #8]
   2d098:	ldr	r1, [r5, #16]
   2d09c:	add	r2, r1, #1
   2d0a0:	str	r2, [r5, #16]
   2d0a4:	cmp	r1, #0
   2d0a8:	ldrne	r1, [r4, #20]
   2d0ac:	addne	r2, r1, #1
   2d0b0:	strne	r2, [r4, #20]
   2d0b4:	movne	r2, #44	; 0x2c
   2d0b8:	strbne	r2, [r1]
   2d0bc:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2d0c0:	mov	r5, r0
   2d0c4:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d0c8:	mov	r6, r0
   2d0cc:	mov	r0, r4
   2d0d0:	mov	r1, r7
   2d0d4:	mov	r2, r8
   2d0d8:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2d0dc:	ldr	r0, [r4, #20]
   2d0e0:	ldr	r1, [r4, #32]
   2d0e4:	add	r1, r1, #1
   2d0e8:	str	r1, [r4, #32]
   2d0ec:	add	r1, r0, #1
   2d0f0:	str	r1, [r4, #20]
   2d0f4:	mov	r1, #91	; 0x5b
   2d0f8:	strb	r1, [r0]
   2d0fc:	cmp	r6, #0
   2d100:	beq	2d1d8 <flatcc_json_printer_uint64_vector_field@@Base+0x16c>
   2d104:	add	r7, r5, #4
   2d108:	ldrb	r0, [r4, #25]
   2d10c:	cmp	r0, #0
   2d110:	beq	2d134 <flatcc_json_printer_uint64_vector_field@@Base+0xc8>
   2d114:	ldr	r0, [r4, #20]
   2d118:	add	r1, r0, #1
   2d11c:	str	r1, [r4, #20]
   2d120:	mov	r1, #10
   2d124:	strb	r1, [r0]
   2d128:	mov	r0, r4
   2d12c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d130:	b	2d13c <flatcc_json_printer_uint64_vector_field@@Base+0xd0>
   2d134:	mov	r0, r4
   2d138:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d13c:	mov	r0, r7
   2d140:	bl	2b2f4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2d144:	ldr	r2, [r4, #20]
   2d148:	bl	2a4c8 <flatcc_json_printer_uint64@@Base+0x30>
   2d14c:	ldr	r1, [r4, #20]
   2d150:	add	r0, r1, r0
   2d154:	str	r0, [r4, #20]
   2d158:	cmp	r6, #1
   2d15c:	beq	2d1d8 <flatcc_json_printer_uint64_vector_field@@Base+0x16c>
   2d160:	rsb	r6, r6, #1
   2d164:	add	r5, r5, #12
   2d168:	mov	r7, #44	; 0x2c
   2d16c:	mov	r8, #10
   2d170:	ldr	r0, [r4, #20]
   2d174:	add	r1, r0, #1
   2d178:	str	r1, [r4, #20]
   2d17c:	strb	r7, [r0]
   2d180:	ldrb	r0, [r4, #25]
   2d184:	cmp	r0, #0
   2d188:	beq	2d1a8 <flatcc_json_printer_uint64_vector_field@@Base+0x13c>
   2d18c:	ldr	r0, [r4, #20]
   2d190:	add	r1, r0, #1
   2d194:	str	r1, [r4, #20]
   2d198:	strb	r8, [r0]
   2d19c:	mov	r0, r4
   2d1a0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d1a4:	b	2d1b0 <flatcc_json_printer_uint64_vector_field@@Base+0x144>
   2d1a8:	mov	r0, r4
   2d1ac:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d1b0:	mov	r0, r5
   2d1b4:	bl	2b2f4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2d1b8:	ldr	r2, [r4, #20]
   2d1bc:	bl	2a4c8 <flatcc_json_printer_uint64@@Base+0x30>
   2d1c0:	ldr	r1, [r4, #20]
   2d1c4:	add	r0, r1, r0
   2d1c8:	str	r0, [r4, #20]
   2d1cc:	adds	r6, r6, #1
   2d1d0:	add	r5, r5, #8
   2d1d4:	bne	2d170 <flatcc_json_printer_uint64_vector_field@@Base+0x104>
   2d1d8:	ldrb	r0, [r4, #25]
   2d1dc:	cmp	r0, #0
   2d1e0:	beq	2d20c <flatcc_json_printer_uint64_vector_field@@Base+0x1a0>
   2d1e4:	ldr	r0, [r4, #20]
   2d1e8:	add	r1, r0, #1
   2d1ec:	str	r1, [r4, #20]
   2d1f0:	mov	r1, #10
   2d1f4:	strb	r1, [r0]
   2d1f8:	ldr	r0, [r4, #32]
   2d1fc:	sub	r0, r0, #1
   2d200:	str	r0, [r4, #32]
   2d204:	mov	r0, r4
   2d208:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d20c:	ldr	r0, [r4, #20]
   2d210:	add	r1, r0, #1
   2d214:	str	r1, [r4, #20]
   2d218:	mov	r1, #93	; 0x5d
   2d21c:	strb	r1, [r0]
   2d220:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d224 <flatcc_json_printer_int8_vector_field@@Base>:
   2d224:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d228:	add	fp, sp, #24
   2d22c:	mov	r7, r3
   2d230:	mov	r5, r1
   2d234:	mov	r4, r0
   2d238:	mov	r0, r1
   2d23c:	mov	r1, r2
   2d240:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2d244:	cmp	r0, #0
   2d248:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d24c:	ldr	r8, [fp, #8]
   2d250:	ldr	r1, [r5, #16]
   2d254:	add	r2, r1, #1
   2d258:	str	r2, [r5, #16]
   2d25c:	cmp	r1, #0
   2d260:	ldrne	r1, [r4, #20]
   2d264:	addne	r2, r1, #1
   2d268:	strne	r2, [r4, #20]
   2d26c:	movne	r2, #44	; 0x2c
   2d270:	strbne	r2, [r1]
   2d274:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2d278:	mov	r5, r0
   2d27c:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d280:	mov	r6, r0
   2d284:	mov	r0, r4
   2d288:	mov	r1, r7
   2d28c:	mov	r2, r8
   2d290:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2d294:	ldr	r0, [r4, #20]
   2d298:	ldr	r1, [r4, #32]
   2d29c:	add	r1, r1, #1
   2d2a0:	str	r1, [r4, #32]
   2d2a4:	add	r1, r0, #1
   2d2a8:	str	r1, [r4, #20]
   2d2ac:	mov	r1, #91	; 0x5b
   2d2b0:	strb	r1, [r0]
   2d2b4:	cmp	r6, #0
   2d2b8:	beq	2d390 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   2d2bc:	add	r7, r5, #4
   2d2c0:	ldrb	r0, [r4, #25]
   2d2c4:	cmp	r0, #0
   2d2c8:	beq	2d2ec <flatcc_json_printer_int8_vector_field@@Base+0xc8>
   2d2cc:	ldr	r0, [r4, #20]
   2d2d0:	add	r1, r0, #1
   2d2d4:	str	r1, [r4, #20]
   2d2d8:	mov	r1, #10
   2d2dc:	strb	r1, [r0]
   2d2e0:	mov	r0, r4
   2d2e4:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d2e8:	b	2d2f4 <flatcc_json_printer_int8_vector_field@@Base+0xd0>
   2d2ec:	mov	r0, r4
   2d2f0:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d2f4:	mov	r0, r7
   2d2f8:	bl	2b3a8 <flatcc_json_printer_int8_field@@Base+0xac>
   2d2fc:	ldr	r1, [r4, #20]
   2d300:	bl	2aa1c <flatcc_json_printer_int8@@Base+0x2c>
   2d304:	ldr	r1, [r4, #20]
   2d308:	add	r0, r1, r0
   2d30c:	str	r0, [r4, #20]
   2d310:	cmp	r6, #1
   2d314:	beq	2d390 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   2d318:	rsb	r6, r6, #1
   2d31c:	add	r5, r5, #5
   2d320:	mov	r7, #44	; 0x2c
   2d324:	mov	r8, #10
   2d328:	ldr	r0, [r4, #20]
   2d32c:	add	r1, r0, #1
   2d330:	str	r1, [r4, #20]
   2d334:	strb	r7, [r0]
   2d338:	ldrb	r0, [r4, #25]
   2d33c:	cmp	r0, #0
   2d340:	beq	2d360 <flatcc_json_printer_int8_vector_field@@Base+0x13c>
   2d344:	ldr	r0, [r4, #20]
   2d348:	add	r1, r0, #1
   2d34c:	str	r1, [r4, #20]
   2d350:	strb	r8, [r0]
   2d354:	mov	r0, r4
   2d358:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d35c:	b	2d368 <flatcc_json_printer_int8_vector_field@@Base+0x144>
   2d360:	mov	r0, r4
   2d364:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d368:	mov	r0, r5
   2d36c:	bl	2b3a8 <flatcc_json_printer_int8_field@@Base+0xac>
   2d370:	ldr	r1, [r4, #20]
   2d374:	bl	2aa1c <flatcc_json_printer_int8@@Base+0x2c>
   2d378:	ldr	r1, [r4, #20]
   2d37c:	add	r0, r1, r0
   2d380:	str	r0, [r4, #20]
   2d384:	adds	r6, r6, #1
   2d388:	add	r5, r5, #1
   2d38c:	bne	2d328 <flatcc_json_printer_int8_vector_field@@Base+0x104>
   2d390:	ldrb	r0, [r4, #25]
   2d394:	cmp	r0, #0
   2d398:	beq	2d3c4 <flatcc_json_printer_int8_vector_field@@Base+0x1a0>
   2d39c:	ldr	r0, [r4, #20]
   2d3a0:	add	r1, r0, #1
   2d3a4:	str	r1, [r4, #20]
   2d3a8:	mov	r1, #10
   2d3ac:	strb	r1, [r0]
   2d3b0:	ldr	r0, [r4, #32]
   2d3b4:	sub	r0, r0, #1
   2d3b8:	str	r0, [r4, #32]
   2d3bc:	mov	r0, r4
   2d3c0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d3c4:	ldr	r0, [r4, #20]
   2d3c8:	add	r1, r0, #1
   2d3cc:	str	r1, [r4, #20]
   2d3d0:	mov	r1, #93	; 0x5d
   2d3d4:	strb	r1, [r0]
   2d3d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d3dc <flatcc_json_printer_int16_vector_field@@Base>:
   2d3dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d3e0:	add	fp, sp, #24
   2d3e4:	mov	r7, r3
   2d3e8:	mov	r5, r1
   2d3ec:	mov	r4, r0
   2d3f0:	mov	r0, r1
   2d3f4:	mov	r1, r2
   2d3f8:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2d3fc:	cmp	r0, #0
   2d400:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d404:	ldr	r8, [fp, #8]
   2d408:	ldr	r1, [r5, #16]
   2d40c:	add	r2, r1, #1
   2d410:	str	r2, [r5, #16]
   2d414:	cmp	r1, #0
   2d418:	ldrne	r1, [r4, #20]
   2d41c:	addne	r2, r1, #1
   2d420:	strne	r2, [r4, #20]
   2d424:	movne	r2, #44	; 0x2c
   2d428:	strbne	r2, [r1]
   2d42c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2d430:	mov	r5, r0
   2d434:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d438:	mov	r6, r0
   2d43c:	mov	r0, r4
   2d440:	mov	r1, r7
   2d444:	mov	r2, r8
   2d448:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2d44c:	ldr	r0, [r4, #20]
   2d450:	ldr	r1, [r4, #32]
   2d454:	add	r1, r1, #1
   2d458:	str	r1, [r4, #32]
   2d45c:	add	r1, r0, #1
   2d460:	str	r1, [r4, #20]
   2d464:	mov	r1, #91	; 0x5b
   2d468:	strb	r1, [r0]
   2d46c:	cmp	r6, #0
   2d470:	beq	2d548 <flatcc_json_printer_int16_vector_field@@Base+0x16c>
   2d474:	add	r7, r5, #4
   2d478:	ldrb	r0, [r4, #25]
   2d47c:	cmp	r0, #0
   2d480:	beq	2d4a4 <flatcc_json_printer_int16_vector_field@@Base+0xc8>
   2d484:	ldr	r0, [r4, #20]
   2d488:	add	r1, r0, #1
   2d48c:	str	r1, [r4, #20]
   2d490:	mov	r1, #10
   2d494:	strb	r1, [r0]
   2d498:	mov	r0, r4
   2d49c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d4a0:	b	2d4ac <flatcc_json_printer_int16_vector_field@@Base+0xd0>
   2d4a4:	mov	r0, r4
   2d4a8:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d4ac:	mov	r0, r7
   2d4b0:	bl	2b45c <flatcc_json_printer_int16_field@@Base+0xac>
   2d4b4:	ldr	r1, [r4, #20]
   2d4b8:	bl	2aa74 <flatcc_json_printer_int16@@Base+0x2c>
   2d4bc:	ldr	r1, [r4, #20]
   2d4c0:	add	r0, r1, r0
   2d4c4:	str	r0, [r4, #20]
   2d4c8:	cmp	r6, #1
   2d4cc:	beq	2d548 <flatcc_json_printer_int16_vector_field@@Base+0x16c>
   2d4d0:	rsb	r6, r6, #1
   2d4d4:	add	r5, r5, #6
   2d4d8:	mov	r7, #44	; 0x2c
   2d4dc:	mov	r8, #10
   2d4e0:	ldr	r0, [r4, #20]
   2d4e4:	add	r1, r0, #1
   2d4e8:	str	r1, [r4, #20]
   2d4ec:	strb	r7, [r0]
   2d4f0:	ldrb	r0, [r4, #25]
   2d4f4:	cmp	r0, #0
   2d4f8:	beq	2d518 <flatcc_json_printer_int16_vector_field@@Base+0x13c>
   2d4fc:	ldr	r0, [r4, #20]
   2d500:	add	r1, r0, #1
   2d504:	str	r1, [r4, #20]
   2d508:	strb	r8, [r0]
   2d50c:	mov	r0, r4
   2d510:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d514:	b	2d520 <flatcc_json_printer_int16_vector_field@@Base+0x144>
   2d518:	mov	r0, r4
   2d51c:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d520:	mov	r0, r5
   2d524:	bl	2b45c <flatcc_json_printer_int16_field@@Base+0xac>
   2d528:	ldr	r1, [r4, #20]
   2d52c:	bl	2aa74 <flatcc_json_printer_int16@@Base+0x2c>
   2d530:	ldr	r1, [r4, #20]
   2d534:	add	r0, r1, r0
   2d538:	str	r0, [r4, #20]
   2d53c:	adds	r6, r6, #1
   2d540:	add	r5, r5, #2
   2d544:	bne	2d4e0 <flatcc_json_printer_int16_vector_field@@Base+0x104>
   2d548:	ldrb	r0, [r4, #25]
   2d54c:	cmp	r0, #0
   2d550:	beq	2d57c <flatcc_json_printer_int16_vector_field@@Base+0x1a0>
   2d554:	ldr	r0, [r4, #20]
   2d558:	add	r1, r0, #1
   2d55c:	str	r1, [r4, #20]
   2d560:	mov	r1, #10
   2d564:	strb	r1, [r0]
   2d568:	ldr	r0, [r4, #32]
   2d56c:	sub	r0, r0, #1
   2d570:	str	r0, [r4, #32]
   2d574:	mov	r0, r4
   2d578:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d57c:	ldr	r0, [r4, #20]
   2d580:	add	r1, r0, #1
   2d584:	str	r1, [r4, #20]
   2d588:	mov	r1, #93	; 0x5d
   2d58c:	strb	r1, [r0]
   2d590:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d594 <flatcc_json_printer_int32_vector_field@@Base>:
   2d594:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d598:	add	fp, sp, #24
   2d59c:	mov	r7, r3
   2d5a0:	mov	r5, r1
   2d5a4:	mov	r4, r0
   2d5a8:	mov	r0, r1
   2d5ac:	mov	r1, r2
   2d5b0:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2d5b4:	cmp	r0, #0
   2d5b8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d5bc:	ldr	r8, [fp, #8]
   2d5c0:	ldr	r1, [r5, #16]
   2d5c4:	add	r2, r1, #1
   2d5c8:	str	r2, [r5, #16]
   2d5cc:	cmp	r1, #0
   2d5d0:	ldrne	r1, [r4, #20]
   2d5d4:	addne	r2, r1, #1
   2d5d8:	strne	r2, [r4, #20]
   2d5dc:	movne	r2, #44	; 0x2c
   2d5e0:	strbne	r2, [r1]
   2d5e4:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2d5e8:	mov	r5, r0
   2d5ec:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d5f0:	mov	r6, r0
   2d5f4:	mov	r0, r4
   2d5f8:	mov	r1, r7
   2d5fc:	mov	r2, r8
   2d600:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2d604:	ldr	r0, [r4, #20]
   2d608:	ldr	r1, [r4, #32]
   2d60c:	add	r1, r1, #1
   2d610:	str	r1, [r4, #32]
   2d614:	add	r1, r0, #1
   2d618:	str	r1, [r4, #20]
   2d61c:	mov	r1, #91	; 0x5b
   2d620:	strb	r1, [r0]
   2d624:	cmp	r6, #0
   2d628:	beq	2d700 <flatcc_json_printer_int32_vector_field@@Base+0x16c>
   2d62c:	add	r7, r5, #4
   2d630:	ldrb	r0, [r4, #25]
   2d634:	cmp	r0, #0
   2d638:	beq	2d65c <flatcc_json_printer_int32_vector_field@@Base+0xc8>
   2d63c:	ldr	r0, [r4, #20]
   2d640:	add	r1, r0, #1
   2d644:	str	r1, [r4, #20]
   2d648:	mov	r1, #10
   2d64c:	strb	r1, [r0]
   2d650:	mov	r0, r4
   2d654:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d658:	b	2d664 <flatcc_json_printer_int32_vector_field@@Base+0xd0>
   2d65c:	mov	r0, r4
   2d660:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d664:	mov	r0, r7
   2d668:	bl	2b510 <flatcc_json_printer_int32_field@@Base+0xac>
   2d66c:	ldr	r1, [r4, #20]
   2d670:	bl	2aacc <flatcc_json_printer_int32@@Base+0x2c>
   2d674:	ldr	r1, [r4, #20]
   2d678:	add	r0, r1, r0
   2d67c:	str	r0, [r4, #20]
   2d680:	cmp	r6, #1
   2d684:	beq	2d700 <flatcc_json_printer_int32_vector_field@@Base+0x16c>
   2d688:	rsb	r6, r6, #1
   2d68c:	add	r5, r5, #8
   2d690:	mov	r7, #44	; 0x2c
   2d694:	mov	r8, #10
   2d698:	ldr	r0, [r4, #20]
   2d69c:	add	r1, r0, #1
   2d6a0:	str	r1, [r4, #20]
   2d6a4:	strb	r7, [r0]
   2d6a8:	ldrb	r0, [r4, #25]
   2d6ac:	cmp	r0, #0
   2d6b0:	beq	2d6d0 <flatcc_json_printer_int32_vector_field@@Base+0x13c>
   2d6b4:	ldr	r0, [r4, #20]
   2d6b8:	add	r1, r0, #1
   2d6bc:	str	r1, [r4, #20]
   2d6c0:	strb	r8, [r0]
   2d6c4:	mov	r0, r4
   2d6c8:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d6cc:	b	2d6d8 <flatcc_json_printer_int32_vector_field@@Base+0x144>
   2d6d0:	mov	r0, r4
   2d6d4:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d6d8:	mov	r0, r5
   2d6dc:	bl	2b510 <flatcc_json_printer_int32_field@@Base+0xac>
   2d6e0:	ldr	r1, [r4, #20]
   2d6e4:	bl	2aacc <flatcc_json_printer_int32@@Base+0x2c>
   2d6e8:	ldr	r1, [r4, #20]
   2d6ec:	add	r0, r1, r0
   2d6f0:	str	r0, [r4, #20]
   2d6f4:	adds	r6, r6, #1
   2d6f8:	add	r5, r5, #4
   2d6fc:	bne	2d698 <flatcc_json_printer_int32_vector_field@@Base+0x104>
   2d700:	ldrb	r0, [r4, #25]
   2d704:	cmp	r0, #0
   2d708:	beq	2d734 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
   2d70c:	ldr	r0, [r4, #20]
   2d710:	add	r1, r0, #1
   2d714:	str	r1, [r4, #20]
   2d718:	mov	r1, #10
   2d71c:	strb	r1, [r0]
   2d720:	ldr	r0, [r4, #32]
   2d724:	sub	r0, r0, #1
   2d728:	str	r0, [r4, #32]
   2d72c:	mov	r0, r4
   2d730:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d734:	ldr	r0, [r4, #20]
   2d738:	add	r1, r0, #1
   2d73c:	str	r1, [r4, #20]
   2d740:	mov	r1, #93	; 0x5d
   2d744:	strb	r1, [r0]
   2d748:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d74c <flatcc_json_printer_int64_vector_field@@Base>:
   2d74c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d750:	add	fp, sp, #24
   2d754:	mov	r7, r3
   2d758:	mov	r5, r1
   2d75c:	mov	r4, r0
   2d760:	mov	r0, r1
   2d764:	mov	r1, r2
   2d768:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2d76c:	cmp	r0, #0
   2d770:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d774:	ldr	r8, [fp, #8]
   2d778:	ldr	r1, [r5, #16]
   2d77c:	add	r2, r1, #1
   2d780:	str	r2, [r5, #16]
   2d784:	cmp	r1, #0
   2d788:	ldrne	r1, [r4, #20]
   2d78c:	addne	r2, r1, #1
   2d790:	strne	r2, [r4, #20]
   2d794:	movne	r2, #44	; 0x2c
   2d798:	strbne	r2, [r1]
   2d79c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2d7a0:	mov	r5, r0
   2d7a4:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d7a8:	mov	r6, r0
   2d7ac:	mov	r0, r4
   2d7b0:	mov	r1, r7
   2d7b4:	mov	r2, r8
   2d7b8:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2d7bc:	ldr	r0, [r4, #20]
   2d7c0:	ldr	r1, [r4, #32]
   2d7c4:	add	r1, r1, #1
   2d7c8:	str	r1, [r4, #32]
   2d7cc:	add	r1, r0, #1
   2d7d0:	str	r1, [r4, #20]
   2d7d4:	mov	r1, #91	; 0x5b
   2d7d8:	strb	r1, [r0]
   2d7dc:	cmp	r6, #0
   2d7e0:	beq	2d8b8 <flatcc_json_printer_int64_vector_field@@Base+0x16c>
   2d7e4:	add	r7, r5, #4
   2d7e8:	ldrb	r0, [r4, #25]
   2d7ec:	cmp	r0, #0
   2d7f0:	beq	2d814 <flatcc_json_printer_int64_vector_field@@Base+0xc8>
   2d7f4:	ldr	r0, [r4, #20]
   2d7f8:	add	r1, r0, #1
   2d7fc:	str	r1, [r4, #20]
   2d800:	mov	r1, #10
   2d804:	strb	r1, [r0]
   2d808:	mov	r0, r4
   2d80c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d810:	b	2d81c <flatcc_json_printer_int64_vector_field@@Base+0xd0>
   2d814:	mov	r0, r4
   2d818:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d81c:	mov	r0, r7
   2d820:	bl	2b5e4 <flatcc_json_printer_int64_field@@Base+0xcc>
   2d824:	ldr	r2, [r4, #20]
   2d828:	bl	2ab24 <flatcc_json_printer_int64@@Base+0x30>
   2d82c:	ldr	r1, [r4, #20]
   2d830:	add	r0, r1, r0
   2d834:	str	r0, [r4, #20]
   2d838:	cmp	r6, #1
   2d83c:	beq	2d8b8 <flatcc_json_printer_int64_vector_field@@Base+0x16c>
   2d840:	rsb	r6, r6, #1
   2d844:	add	r5, r5, #12
   2d848:	mov	r7, #44	; 0x2c
   2d84c:	mov	r8, #10
   2d850:	ldr	r0, [r4, #20]
   2d854:	add	r1, r0, #1
   2d858:	str	r1, [r4, #20]
   2d85c:	strb	r7, [r0]
   2d860:	ldrb	r0, [r4, #25]
   2d864:	cmp	r0, #0
   2d868:	beq	2d888 <flatcc_json_printer_int64_vector_field@@Base+0x13c>
   2d86c:	ldr	r0, [r4, #20]
   2d870:	add	r1, r0, #1
   2d874:	str	r1, [r4, #20]
   2d878:	strb	r8, [r0]
   2d87c:	mov	r0, r4
   2d880:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d884:	b	2d890 <flatcc_json_printer_int64_vector_field@@Base+0x144>
   2d888:	mov	r0, r4
   2d88c:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d890:	mov	r0, r5
   2d894:	bl	2b5e4 <flatcc_json_printer_int64_field@@Base+0xcc>
   2d898:	ldr	r2, [r4, #20]
   2d89c:	bl	2ab24 <flatcc_json_printer_int64@@Base+0x30>
   2d8a0:	ldr	r1, [r4, #20]
   2d8a4:	add	r0, r1, r0
   2d8a8:	str	r0, [r4, #20]
   2d8ac:	adds	r6, r6, #1
   2d8b0:	add	r5, r5, #8
   2d8b4:	bne	2d850 <flatcc_json_printer_int64_vector_field@@Base+0x104>
   2d8b8:	ldrb	r0, [r4, #25]
   2d8bc:	cmp	r0, #0
   2d8c0:	beq	2d8ec <flatcc_json_printer_int64_vector_field@@Base+0x1a0>
   2d8c4:	ldr	r0, [r4, #20]
   2d8c8:	add	r1, r0, #1
   2d8cc:	str	r1, [r4, #20]
   2d8d0:	mov	r1, #10
   2d8d4:	strb	r1, [r0]
   2d8d8:	ldr	r0, [r4, #32]
   2d8dc:	sub	r0, r0, #1
   2d8e0:	str	r0, [r4, #32]
   2d8e4:	mov	r0, r4
   2d8e8:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d8ec:	ldr	r0, [r4, #20]
   2d8f0:	add	r1, r0, #1
   2d8f4:	str	r1, [r4, #20]
   2d8f8:	mov	r1, #93	; 0x5d
   2d8fc:	strb	r1, [r0]
   2d900:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d904 <flatcc_json_printer_bool_vector_field@@Base>:
   2d904:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d908:	add	fp, sp, #24
   2d90c:	mov	r7, r3
   2d910:	mov	r5, r1
   2d914:	mov	r4, r0
   2d918:	mov	r0, r1
   2d91c:	mov	r1, r2
   2d920:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2d924:	cmp	r0, #0
   2d928:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d92c:	ldr	r8, [fp, #8]
   2d930:	ldr	r1, [r5, #16]
   2d934:	add	r2, r1, #1
   2d938:	str	r2, [r5, #16]
   2d93c:	cmp	r1, #0
   2d940:	ldrne	r1, [r4, #20]
   2d944:	addne	r2, r1, #1
   2d948:	strne	r2, [r4, #20]
   2d94c:	movne	r2, #44	; 0x2c
   2d950:	strbne	r2, [r1]
   2d954:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2d958:	mov	r5, r0
   2d95c:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d960:	mov	r6, r0
   2d964:	mov	r0, r4
   2d968:	mov	r1, r7
   2d96c:	mov	r2, r8
   2d970:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2d974:	ldr	r0, [r4, #20]
   2d978:	ldr	r1, [r4, #32]
   2d97c:	add	r1, r1, #1
   2d980:	str	r1, [r4, #32]
   2d984:	add	r1, r0, #1
   2d988:	str	r1, [r4, #20]
   2d98c:	mov	r1, #91	; 0x5b
   2d990:	strb	r1, [r0]
   2d994:	cmp	r6, #0
   2d998:	beq	2da70 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   2d99c:	add	r7, r5, #4
   2d9a0:	ldrb	r0, [r4, #25]
   2d9a4:	cmp	r0, #0
   2d9a8:	beq	2d9cc <flatcc_json_printer_bool_vector_field@@Base+0xc8>
   2d9ac:	ldr	r0, [r4, #20]
   2d9b0:	add	r1, r0, #1
   2d9b4:	str	r1, [r4, #20]
   2d9b8:	mov	r1, #10
   2d9bc:	strb	r1, [r0]
   2d9c0:	mov	r0, r4
   2d9c4:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2d9c8:	b	2d9d4 <flatcc_json_printer_bool_vector_field@@Base+0xd0>
   2d9cc:	mov	r0, r4
   2d9d0:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2d9d4:	mov	r0, r7
   2d9d8:	bl	2b698 <flatcc_json_printer_bool_field@@Base+0xac>
   2d9dc:	ldr	r1, [r4, #20]
   2d9e0:	bl	2b6a0 <flatcc_json_printer_bool_field@@Base+0xb4>
   2d9e4:	ldr	r1, [r4, #20]
   2d9e8:	add	r0, r1, r0
   2d9ec:	str	r0, [r4, #20]
   2d9f0:	cmp	r6, #1
   2d9f4:	beq	2da70 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   2d9f8:	rsb	r6, r6, #1
   2d9fc:	add	r5, r5, #5
   2da00:	mov	r7, #44	; 0x2c
   2da04:	mov	r8, #10
   2da08:	ldr	r0, [r4, #20]
   2da0c:	add	r1, r0, #1
   2da10:	str	r1, [r4, #20]
   2da14:	strb	r7, [r0]
   2da18:	ldrb	r0, [r4, #25]
   2da1c:	cmp	r0, #0
   2da20:	beq	2da40 <flatcc_json_printer_bool_vector_field@@Base+0x13c>
   2da24:	ldr	r0, [r4, #20]
   2da28:	add	r1, r0, #1
   2da2c:	str	r1, [r4, #20]
   2da30:	strb	r8, [r0]
   2da34:	mov	r0, r4
   2da38:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2da3c:	b	2da48 <flatcc_json_printer_bool_vector_field@@Base+0x144>
   2da40:	mov	r0, r4
   2da44:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2da48:	mov	r0, r5
   2da4c:	bl	2b698 <flatcc_json_printer_bool_field@@Base+0xac>
   2da50:	ldr	r1, [r4, #20]
   2da54:	bl	2b6a0 <flatcc_json_printer_bool_field@@Base+0xb4>
   2da58:	ldr	r1, [r4, #20]
   2da5c:	add	r0, r1, r0
   2da60:	str	r0, [r4, #20]
   2da64:	adds	r6, r6, #1
   2da68:	add	r5, r5, #1
   2da6c:	bne	2da08 <flatcc_json_printer_bool_vector_field@@Base+0x104>
   2da70:	ldrb	r0, [r4, #25]
   2da74:	cmp	r0, #0
   2da78:	beq	2daa4 <flatcc_json_printer_bool_vector_field@@Base+0x1a0>
   2da7c:	ldr	r0, [r4, #20]
   2da80:	add	r1, r0, #1
   2da84:	str	r1, [r4, #20]
   2da88:	mov	r1, #10
   2da8c:	strb	r1, [r0]
   2da90:	ldr	r0, [r4, #32]
   2da94:	sub	r0, r0, #1
   2da98:	str	r0, [r4, #32]
   2da9c:	mov	r0, r4
   2daa0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2daa4:	ldr	r0, [r4, #20]
   2daa8:	add	r1, r0, #1
   2daac:	str	r1, [r4, #20]
   2dab0:	mov	r1, #93	; 0x5d
   2dab4:	strb	r1, [r0]
   2dab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002dabc <flatcc_json_printer_float_vector_field@@Base>:
   2dabc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2dac0:	add	fp, sp, #24
   2dac4:	mov	r7, r3
   2dac8:	mov	r5, r1
   2dacc:	mov	r4, r0
   2dad0:	mov	r0, r1
   2dad4:	mov	r1, r2
   2dad8:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2dadc:	cmp	r0, #0
   2dae0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2dae4:	ldr	r8, [fp, #8]
   2dae8:	ldr	r1, [r5, #16]
   2daec:	add	r2, r1, #1
   2daf0:	str	r2, [r5, #16]
   2daf4:	cmp	r1, #0
   2daf8:	ldrne	r1, [r4, #20]
   2dafc:	addne	r2, r1, #1
   2db00:	strne	r2, [r4, #20]
   2db04:	movne	r2, #44	; 0x2c
   2db08:	strbne	r2, [r1]
   2db0c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2db10:	mov	r5, r0
   2db14:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2db18:	mov	r6, r0
   2db1c:	mov	r0, r4
   2db20:	mov	r1, r7
   2db24:	mov	r2, r8
   2db28:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2db2c:	ldr	r0, [r4, #20]
   2db30:	ldr	r1, [r4, #32]
   2db34:	add	r1, r1, #1
   2db38:	str	r1, [r4, #32]
   2db3c:	add	r1, r0, #1
   2db40:	str	r1, [r4, #20]
   2db44:	mov	r1, #91	; 0x5b
   2db48:	strb	r1, [r0]
   2db4c:	cmp	r6, #0
   2db50:	beq	2dc30 <flatcc_json_printer_float_vector_field@@Base+0x174>
   2db54:	add	r7, r5, #4
   2db58:	ldrb	r0, [r4, #25]
   2db5c:	cmp	r0, #0
   2db60:	beq	2db84 <flatcc_json_printer_float_vector_field@@Base+0xc8>
   2db64:	ldr	r0, [r4, #20]
   2db68:	add	r1, r0, #1
   2db6c:	str	r1, [r4, #20]
   2db70:	mov	r1, #10
   2db74:	strb	r1, [r0]
   2db78:	mov	r0, r4
   2db7c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2db80:	b	2db8c <flatcc_json_printer_float_vector_field@@Base+0xd0>
   2db84:	mov	r0, r4
   2db88:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2db8c:	mov	r0, r7
   2db90:	bl	2b798 <flatcc_json_printer_float_field@@Base+0xb8>
   2db94:	ldr	r0, [r4, #20]
   2db98:	vcvt.f64.f32	d0, s0
   2db9c:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2dba0:	ldr	r1, [r4, #20]
   2dba4:	add	r0, r1, r0
   2dba8:	str	r0, [r4, #20]
   2dbac:	cmp	r6, #1
   2dbb0:	beq	2dc30 <flatcc_json_printer_float_vector_field@@Base+0x174>
   2dbb4:	rsb	r6, r6, #1
   2dbb8:	add	r5, r5, #8
   2dbbc:	mov	r7, #44	; 0x2c
   2dbc0:	mov	r8, #10
   2dbc4:	ldr	r0, [r4, #20]
   2dbc8:	add	r1, r0, #1
   2dbcc:	str	r1, [r4, #20]
   2dbd0:	strb	r7, [r0]
   2dbd4:	ldrb	r0, [r4, #25]
   2dbd8:	cmp	r0, #0
   2dbdc:	beq	2dbfc <flatcc_json_printer_float_vector_field@@Base+0x140>
   2dbe0:	ldr	r0, [r4, #20]
   2dbe4:	add	r1, r0, #1
   2dbe8:	str	r1, [r4, #20]
   2dbec:	strb	r8, [r0]
   2dbf0:	mov	r0, r4
   2dbf4:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2dbf8:	b	2dc04 <flatcc_json_printer_float_vector_field@@Base+0x148>
   2dbfc:	mov	r0, r4
   2dc00:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2dc04:	mov	r0, r5
   2dc08:	bl	2b798 <flatcc_json_printer_float_field@@Base+0xb8>
   2dc0c:	ldr	r0, [r4, #20]
   2dc10:	vcvt.f64.f32	d0, s0
   2dc14:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2dc18:	ldr	r1, [r4, #20]
   2dc1c:	add	r0, r1, r0
   2dc20:	str	r0, [r4, #20]
   2dc24:	adds	r6, r6, #1
   2dc28:	add	r5, r5, #4
   2dc2c:	bne	2dbc4 <flatcc_json_printer_float_vector_field@@Base+0x108>
   2dc30:	ldrb	r0, [r4, #25]
   2dc34:	cmp	r0, #0
   2dc38:	beq	2dc64 <flatcc_json_printer_float_vector_field@@Base+0x1a8>
   2dc3c:	ldr	r0, [r4, #20]
   2dc40:	add	r1, r0, #1
   2dc44:	str	r1, [r4, #20]
   2dc48:	mov	r1, #10
   2dc4c:	strb	r1, [r0]
   2dc50:	ldr	r0, [r4, #32]
   2dc54:	sub	r0, r0, #1
   2dc58:	str	r0, [r4, #32]
   2dc5c:	mov	r0, r4
   2dc60:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2dc64:	ldr	r0, [r4, #20]
   2dc68:	add	r1, r0, #1
   2dc6c:	str	r1, [r4, #20]
   2dc70:	mov	r1, #93	; 0x5d
   2dc74:	strb	r1, [r0]
   2dc78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002dc7c <flatcc_json_printer_double_vector_field@@Base>:
   2dc7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2dc80:	add	fp, sp, #24
   2dc84:	mov	r7, r3
   2dc88:	mov	r5, r1
   2dc8c:	mov	r4, r0
   2dc90:	mov	r0, r1
   2dc94:	mov	r1, r2
   2dc98:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2dc9c:	cmp	r0, #0
   2dca0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2dca4:	ldr	r8, [fp, #8]
   2dca8:	ldr	r1, [r5, #16]
   2dcac:	add	r2, r1, #1
   2dcb0:	str	r2, [r5, #16]
   2dcb4:	cmp	r1, #0
   2dcb8:	ldrne	r1, [r4, #20]
   2dcbc:	addne	r2, r1, #1
   2dcc0:	strne	r2, [r4, #20]
   2dcc4:	movne	r2, #44	; 0x2c
   2dcc8:	strbne	r2, [r1]
   2dccc:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2dcd0:	mov	r5, r0
   2dcd4:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2dcd8:	mov	r6, r0
   2dcdc:	mov	r0, r4
   2dce0:	mov	r1, r7
   2dce4:	mov	r2, r8
   2dce8:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2dcec:	ldr	r0, [r4, #20]
   2dcf0:	ldr	r1, [r4, #32]
   2dcf4:	add	r1, r1, #1
   2dcf8:	str	r1, [r4, #32]
   2dcfc:	add	r1, r0, #1
   2dd00:	str	r1, [r4, #20]
   2dd04:	mov	r1, #91	; 0x5b
   2dd08:	strb	r1, [r0]
   2dd0c:	cmp	r6, #0
   2dd10:	beq	2dde8 <flatcc_json_printer_double_vector_field@@Base+0x16c>
   2dd14:	add	r7, r5, #4
   2dd18:	ldrb	r0, [r4, #25]
   2dd1c:	cmp	r0, #0
   2dd20:	beq	2dd44 <flatcc_json_printer_double_vector_field@@Base+0xc8>
   2dd24:	ldr	r0, [r4, #20]
   2dd28:	add	r1, r0, #1
   2dd2c:	str	r1, [r4, #20]
   2dd30:	mov	r1, #10
   2dd34:	strb	r1, [r0]
   2dd38:	mov	r0, r4
   2dd3c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2dd40:	b	2dd4c <flatcc_json_printer_double_vector_field@@Base+0xd0>
   2dd44:	mov	r0, r4
   2dd48:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2dd4c:	mov	r0, r7
   2dd50:	bl	2b858 <flatcc_json_printer_double_field@@Base+0xb8>
   2dd54:	ldr	r0, [r4, #20]
   2dd58:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2dd5c:	ldr	r1, [r4, #20]
   2dd60:	add	r0, r1, r0
   2dd64:	str	r0, [r4, #20]
   2dd68:	cmp	r6, #1
   2dd6c:	beq	2dde8 <flatcc_json_printer_double_vector_field@@Base+0x16c>
   2dd70:	rsb	r6, r6, #1
   2dd74:	add	r5, r5, #12
   2dd78:	mov	r7, #44	; 0x2c
   2dd7c:	mov	r8, #10
   2dd80:	ldr	r0, [r4, #20]
   2dd84:	add	r1, r0, #1
   2dd88:	str	r1, [r4, #20]
   2dd8c:	strb	r7, [r0]
   2dd90:	ldrb	r0, [r4, #25]
   2dd94:	cmp	r0, #0
   2dd98:	beq	2ddb8 <flatcc_json_printer_double_vector_field@@Base+0x13c>
   2dd9c:	ldr	r0, [r4, #20]
   2dda0:	add	r1, r0, #1
   2dda4:	str	r1, [r4, #20]
   2dda8:	strb	r8, [r0]
   2ddac:	mov	r0, r4
   2ddb0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ddb4:	b	2ddc0 <flatcc_json_printer_double_vector_field@@Base+0x144>
   2ddb8:	mov	r0, r4
   2ddbc:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ddc0:	mov	r0, r5
   2ddc4:	bl	2b858 <flatcc_json_printer_double_field@@Base+0xb8>
   2ddc8:	ldr	r0, [r4, #20]
   2ddcc:	bl	298c8 <flatcc_json_printer_fmt_float@@Base+0x8>
   2ddd0:	ldr	r1, [r4, #20]
   2ddd4:	add	r0, r1, r0
   2ddd8:	str	r0, [r4, #20]
   2dddc:	adds	r6, r6, #1
   2dde0:	add	r5, r5, #8
   2dde4:	bne	2dd80 <flatcc_json_printer_double_vector_field@@Base+0x104>
   2dde8:	ldrb	r0, [r4, #25]
   2ddec:	cmp	r0, #0
   2ddf0:	beq	2de1c <flatcc_json_printer_double_vector_field@@Base+0x1a0>
   2ddf4:	ldr	r0, [r4, #20]
   2ddf8:	add	r1, r0, #1
   2ddfc:	str	r1, [r4, #20]
   2de00:	mov	r1, #10
   2de04:	strb	r1, [r0]
   2de08:	ldr	r0, [r4, #32]
   2de0c:	sub	r0, r0, #1
   2de10:	str	r0, [r4, #32]
   2de14:	mov	r0, r4
   2de18:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2de1c:	ldr	r0, [r4, #20]
   2de20:	add	r1, r0, #1
   2de24:	str	r1, [r4, #20]
   2de28:	mov	r1, #93	; 0x5d
   2de2c:	strb	r1, [r0]
   2de30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002de34 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   2de34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2de38:	add	fp, sp, #24
   2de3c:	mov	r7, r3
   2de40:	mov	r6, r1
   2de44:	mov	r4, r0
   2de48:	ldrb	r0, [r0, #27]
   2de4c:	cmp	r0, #0
   2de50:	beq	2de68 <flatcc_json_printer_utype_enum_vector_field@@Base+0x34>
   2de54:	mov	r0, r4
   2de58:	mov	r1, r6
   2de5c:	mov	r3, r7
   2de60:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2de64:	b	2c97c <flatcc_json_printer_utype_vector_field@@Base>
   2de68:	ldr	r9, [fp, #12]
   2de6c:	ldr	r5, [fp, #8]
   2de70:	mov	r0, r6
   2de74:	mov	r1, r2
   2de78:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2de7c:	cmp	r0, #0
   2de80:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2de84:	ldr	r1, [r6, #16]
   2de88:	add	r2, r1, #1
   2de8c:	str	r2, [r6, #16]
   2de90:	cmp	r1, #0
   2de94:	ldrne	r1, [r4, #20]
   2de98:	addne	r2, r1, #1
   2de9c:	strne	r2, [r4, #20]
   2dea0:	movne	r2, #44	; 0x2c
   2dea4:	strbne	r2, [r1]
   2dea8:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2deac:	mov	r8, r0
   2deb0:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2deb4:	mov	r6, r0
   2deb8:	mov	r0, r4
   2debc:	mov	r1, r7
   2dec0:	mov	r2, r5
   2dec4:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2dec8:	ldr	r0, [r4, #20]
   2decc:	ldr	r1, [r4, #32]
   2ded0:	add	r1, r1, #1
   2ded4:	str	r1, [r4, #32]
   2ded8:	add	r1, r0, #1
   2dedc:	str	r1, [r4, #20]
   2dee0:	mov	r1, #91	; 0x5b
   2dee4:	strb	r1, [r0]
   2dee8:	cmp	r6, #0
   2deec:	beq	2dfb4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x180>
   2def0:	add	r5, r8, #4
   2def4:	ldrb	r0, [r4, #25]
   2def8:	cmp	r0, #0
   2defc:	beq	2df20 <flatcc_json_printer_utype_enum_vector_field@@Base+0xec>
   2df00:	ldr	r0, [r4, #20]
   2df04:	add	r1, r0, #1
   2df08:	str	r1, [r4, #20]
   2df0c:	mov	r1, #10
   2df10:	strb	r1, [r0]
   2df14:	mov	r0, r4
   2df18:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2df1c:	b	2df28 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf4>
   2df20:	mov	r0, r4
   2df24:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2df28:	mov	r0, r5
   2df2c:	bl	2cb3c <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2df30:	mov	r1, r0
   2df34:	mov	r0, r4
   2df38:	blx	r9
   2df3c:	cmp	r6, #1
   2df40:	beq	2dfb4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x180>
   2df44:	rsb	r6, r6, #1
   2df48:	add	r5, r8, #5
   2df4c:	mov	r7, #44	; 0x2c
   2df50:	mov	r8, #10
   2df54:	ldr	r0, [r4, #20]
   2df58:	add	r1, r0, #1
   2df5c:	str	r1, [r4, #20]
   2df60:	strb	r7, [r0]
   2df64:	ldrb	r0, [r4, #25]
   2df68:	cmp	r0, #0
   2df6c:	beq	2df8c <flatcc_json_printer_utype_enum_vector_field@@Base+0x158>
   2df70:	ldr	r0, [r4, #20]
   2df74:	add	r1, r0, #1
   2df78:	str	r1, [r4, #20]
   2df7c:	strb	r8, [r0]
   2df80:	mov	r0, r4
   2df84:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2df88:	b	2df94 <flatcc_json_printer_utype_enum_vector_field@@Base+0x160>
   2df8c:	mov	r0, r4
   2df90:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2df94:	mov	r0, r5
   2df98:	bl	2cb3c <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2df9c:	mov	r1, r0
   2dfa0:	mov	r0, r4
   2dfa4:	blx	r9
   2dfa8:	adds	r6, r6, #1
   2dfac:	add	r5, r5, #1
   2dfb0:	bne	2df54 <flatcc_json_printer_utype_enum_vector_field@@Base+0x120>
   2dfb4:	ldrb	r0, [r4, #25]
   2dfb8:	cmp	r0, #0
   2dfbc:	beq	2dfe8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1b4>
   2dfc0:	ldr	r0, [r4, #20]
   2dfc4:	add	r1, r0, #1
   2dfc8:	str	r1, [r4, #20]
   2dfcc:	mov	r1, #10
   2dfd0:	strb	r1, [r0]
   2dfd4:	ldr	r0, [r4, #32]
   2dfd8:	sub	r0, r0, #1
   2dfdc:	str	r0, [r4, #32]
   2dfe0:	mov	r0, r4
   2dfe4:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2dfe8:	ldr	r0, [r4, #20]
   2dfec:	add	r1, r0, #1
   2dff0:	str	r1, [r4, #20]
   2dff4:	mov	r1, #93	; 0x5d
   2dff8:	strb	r1, [r0]
   2dffc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e000 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   2e000:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e004:	add	fp, sp, #24
   2e008:	mov	r7, r3
   2e00c:	mov	r6, r1
   2e010:	mov	r4, r0
   2e014:	ldrb	r0, [r0, #27]
   2e018:	cmp	r0, #0
   2e01c:	beq	2e034 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x34>
   2e020:	mov	r0, r4
   2e024:	mov	r1, r6
   2e028:	mov	r3, r7
   2e02c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e030:	b	2cb44 <flatcc_json_printer_uint8_vector_field@@Base>
   2e034:	ldr	r9, [fp, #12]
   2e038:	ldr	r5, [fp, #8]
   2e03c:	mov	r0, r6
   2e040:	mov	r1, r2
   2e044:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2e048:	cmp	r0, #0
   2e04c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e050:	ldr	r1, [r6, #16]
   2e054:	add	r2, r1, #1
   2e058:	str	r2, [r6, #16]
   2e05c:	cmp	r1, #0
   2e060:	ldrne	r1, [r4, #20]
   2e064:	addne	r2, r1, #1
   2e068:	strne	r2, [r4, #20]
   2e06c:	movne	r2, #44	; 0x2c
   2e070:	strbne	r2, [r1]
   2e074:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2e078:	mov	r8, r0
   2e07c:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e080:	mov	r6, r0
   2e084:	mov	r0, r4
   2e088:	mov	r1, r7
   2e08c:	mov	r2, r5
   2e090:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2e094:	ldr	r0, [r4, #20]
   2e098:	ldr	r1, [r4, #32]
   2e09c:	add	r1, r1, #1
   2e0a0:	str	r1, [r4, #32]
   2e0a4:	add	r1, r0, #1
   2e0a8:	str	r1, [r4, #20]
   2e0ac:	mov	r1, #91	; 0x5b
   2e0b0:	strb	r1, [r0]
   2e0b4:	cmp	r6, #0
   2e0b8:	beq	2e180 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x180>
   2e0bc:	add	r5, r8, #4
   2e0c0:	ldrb	r0, [r4, #25]
   2e0c4:	cmp	r0, #0
   2e0c8:	beq	2e0ec <flatcc_json_printer_uint8_enum_vector_field@@Base+0xec>
   2e0cc:	ldr	r0, [r4, #20]
   2e0d0:	add	r1, r0, #1
   2e0d4:	str	r1, [r4, #20]
   2e0d8:	mov	r1, #10
   2e0dc:	strb	r1, [r0]
   2e0e0:	mov	r0, r4
   2e0e4:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e0e8:	b	2e0f4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
   2e0ec:	mov	r0, r4
   2e0f0:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e0f4:	mov	r0, r5
   2e0f8:	bl	2b0b8 <flatcc_json_printer_uint8_field@@Base+0xac>
   2e0fc:	mov	r1, r0
   2e100:	mov	r0, r4
   2e104:	blx	r9
   2e108:	cmp	r6, #1
   2e10c:	beq	2e180 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x180>
   2e110:	rsb	r6, r6, #1
   2e114:	add	r5, r8, #5
   2e118:	mov	r7, #44	; 0x2c
   2e11c:	mov	r8, #10
   2e120:	ldr	r0, [r4, #20]
   2e124:	add	r1, r0, #1
   2e128:	str	r1, [r4, #20]
   2e12c:	strb	r7, [r0]
   2e130:	ldrb	r0, [r4, #25]
   2e134:	cmp	r0, #0
   2e138:	beq	2e158 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x158>
   2e13c:	ldr	r0, [r4, #20]
   2e140:	add	r1, r0, #1
   2e144:	str	r1, [r4, #20]
   2e148:	strb	r8, [r0]
   2e14c:	mov	r0, r4
   2e150:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e154:	b	2e160 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x160>
   2e158:	mov	r0, r4
   2e15c:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e160:	mov	r0, r5
   2e164:	bl	2b0b8 <flatcc_json_printer_uint8_field@@Base+0xac>
   2e168:	mov	r1, r0
   2e16c:	mov	r0, r4
   2e170:	blx	r9
   2e174:	adds	r6, r6, #1
   2e178:	add	r5, r5, #1
   2e17c:	bne	2e120 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x120>
   2e180:	ldrb	r0, [r4, #25]
   2e184:	cmp	r0, #0
   2e188:	beq	2e1b4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b4>
   2e18c:	ldr	r0, [r4, #20]
   2e190:	add	r1, r0, #1
   2e194:	str	r1, [r4, #20]
   2e198:	mov	r1, #10
   2e19c:	strb	r1, [r0]
   2e1a0:	ldr	r0, [r4, #32]
   2e1a4:	sub	r0, r0, #1
   2e1a8:	str	r0, [r4, #32]
   2e1ac:	mov	r0, r4
   2e1b0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e1b4:	ldr	r0, [r4, #20]
   2e1b8:	add	r1, r0, #1
   2e1bc:	str	r1, [r4, #20]
   2e1c0:	mov	r1, #93	; 0x5d
   2e1c4:	strb	r1, [r0]
   2e1c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e1cc <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   2e1cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e1d0:	add	fp, sp, #24
   2e1d4:	mov	r7, r3
   2e1d8:	mov	r6, r1
   2e1dc:	mov	r4, r0
   2e1e0:	ldrb	r0, [r0, #27]
   2e1e4:	cmp	r0, #0
   2e1e8:	beq	2e200 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x34>
   2e1ec:	mov	r0, r4
   2e1f0:	mov	r1, r6
   2e1f4:	mov	r3, r7
   2e1f8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e1fc:	b	2ccfc <flatcc_json_printer_uint16_vector_field@@Base>
   2e200:	ldr	r9, [fp, #12]
   2e204:	ldr	r5, [fp, #8]
   2e208:	mov	r0, r6
   2e20c:	mov	r1, r2
   2e210:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2e214:	cmp	r0, #0
   2e218:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e21c:	ldr	r1, [r6, #16]
   2e220:	add	r2, r1, #1
   2e224:	str	r2, [r6, #16]
   2e228:	cmp	r1, #0
   2e22c:	ldrne	r1, [r4, #20]
   2e230:	addne	r2, r1, #1
   2e234:	strne	r2, [r4, #20]
   2e238:	movne	r2, #44	; 0x2c
   2e23c:	strbne	r2, [r1]
   2e240:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2e244:	mov	r8, r0
   2e248:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e24c:	mov	r6, r0
   2e250:	mov	r0, r4
   2e254:	mov	r1, r7
   2e258:	mov	r2, r5
   2e25c:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2e260:	ldr	r0, [r4, #20]
   2e264:	ldr	r1, [r4, #32]
   2e268:	add	r1, r1, #1
   2e26c:	str	r1, [r4, #32]
   2e270:	add	r1, r0, #1
   2e274:	str	r1, [r4, #20]
   2e278:	mov	r1, #91	; 0x5b
   2e27c:	strb	r1, [r0]
   2e280:	cmp	r6, #0
   2e284:	beq	2e34c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x180>
   2e288:	add	r5, r8, #4
   2e28c:	ldrb	r0, [r4, #25]
   2e290:	cmp	r0, #0
   2e294:	beq	2e2b8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xec>
   2e298:	ldr	r0, [r4, #20]
   2e29c:	add	r1, r0, #1
   2e2a0:	str	r1, [r4, #20]
   2e2a4:	mov	r1, #10
   2e2a8:	strb	r1, [r0]
   2e2ac:	mov	r0, r4
   2e2b0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e2b4:	b	2e2c0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   2e2b8:	mov	r0, r4
   2e2bc:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e2c0:	mov	r0, r5
   2e2c4:	bl	2b16c <flatcc_json_printer_uint16_field@@Base+0xac>
   2e2c8:	mov	r1, r0
   2e2cc:	mov	r0, r4
   2e2d0:	blx	r9
   2e2d4:	cmp	r6, #1
   2e2d8:	beq	2e34c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x180>
   2e2dc:	rsb	r6, r6, #1
   2e2e0:	add	r5, r8, #6
   2e2e4:	mov	r7, #44	; 0x2c
   2e2e8:	mov	r8, #10
   2e2ec:	ldr	r0, [r4, #20]
   2e2f0:	add	r1, r0, #1
   2e2f4:	str	r1, [r4, #20]
   2e2f8:	strb	r7, [r0]
   2e2fc:	ldrb	r0, [r4, #25]
   2e300:	cmp	r0, #0
   2e304:	beq	2e324 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x158>
   2e308:	ldr	r0, [r4, #20]
   2e30c:	add	r1, r0, #1
   2e310:	str	r1, [r4, #20]
   2e314:	strb	r8, [r0]
   2e318:	mov	r0, r4
   2e31c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e320:	b	2e32c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x160>
   2e324:	mov	r0, r4
   2e328:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e32c:	mov	r0, r5
   2e330:	bl	2b16c <flatcc_json_printer_uint16_field@@Base+0xac>
   2e334:	mov	r1, r0
   2e338:	mov	r0, r4
   2e33c:	blx	r9
   2e340:	adds	r6, r6, #1
   2e344:	add	r5, r5, #2
   2e348:	bne	2e2ec <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   2e34c:	ldrb	r0, [r4, #25]
   2e350:	cmp	r0, #0
   2e354:	beq	2e380 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   2e358:	ldr	r0, [r4, #20]
   2e35c:	add	r1, r0, #1
   2e360:	str	r1, [r4, #20]
   2e364:	mov	r1, #10
   2e368:	strb	r1, [r0]
   2e36c:	ldr	r0, [r4, #32]
   2e370:	sub	r0, r0, #1
   2e374:	str	r0, [r4, #32]
   2e378:	mov	r0, r4
   2e37c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e380:	ldr	r0, [r4, #20]
   2e384:	add	r1, r0, #1
   2e388:	str	r1, [r4, #20]
   2e38c:	mov	r1, #93	; 0x5d
   2e390:	strb	r1, [r0]
   2e394:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e398 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   2e398:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e39c:	add	fp, sp, #24
   2e3a0:	mov	r7, r3
   2e3a4:	mov	r6, r1
   2e3a8:	mov	r4, r0
   2e3ac:	ldrb	r0, [r0, #27]
   2e3b0:	cmp	r0, #0
   2e3b4:	beq	2e3cc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x34>
   2e3b8:	mov	r0, r4
   2e3bc:	mov	r1, r6
   2e3c0:	mov	r3, r7
   2e3c4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e3c8:	b	2ceb4 <flatcc_json_printer_uint32_vector_field@@Base>
   2e3cc:	ldr	r9, [fp, #12]
   2e3d0:	ldr	r5, [fp, #8]
   2e3d4:	mov	r0, r6
   2e3d8:	mov	r1, r2
   2e3dc:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2e3e0:	cmp	r0, #0
   2e3e4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e3e8:	ldr	r1, [r6, #16]
   2e3ec:	add	r2, r1, #1
   2e3f0:	str	r2, [r6, #16]
   2e3f4:	cmp	r1, #0
   2e3f8:	ldrne	r1, [r4, #20]
   2e3fc:	addne	r2, r1, #1
   2e400:	strne	r2, [r4, #20]
   2e404:	movne	r2, #44	; 0x2c
   2e408:	strbne	r2, [r1]
   2e40c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2e410:	mov	r8, r0
   2e414:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e418:	mov	r6, r0
   2e41c:	mov	r0, r4
   2e420:	mov	r1, r7
   2e424:	mov	r2, r5
   2e428:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2e42c:	ldr	r0, [r4, #20]
   2e430:	ldr	r1, [r4, #32]
   2e434:	add	r1, r1, #1
   2e438:	str	r1, [r4, #32]
   2e43c:	add	r1, r0, #1
   2e440:	str	r1, [r4, #20]
   2e444:	mov	r1, #91	; 0x5b
   2e448:	strb	r1, [r0]
   2e44c:	cmp	r6, #0
   2e450:	beq	2e518 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x180>
   2e454:	add	r5, r8, #4
   2e458:	ldrb	r0, [r4, #25]
   2e45c:	cmp	r0, #0
   2e460:	beq	2e484 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xec>
   2e464:	ldr	r0, [r4, #20]
   2e468:	add	r1, r0, #1
   2e46c:	str	r1, [r4, #20]
   2e470:	mov	r1, #10
   2e474:	strb	r1, [r0]
   2e478:	mov	r0, r4
   2e47c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e480:	b	2e48c <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   2e484:	mov	r0, r4
   2e488:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e48c:	mov	r0, r5
   2e490:	bl	2b220 <flatcc_json_printer_uint32_field@@Base+0xac>
   2e494:	mov	r1, r0
   2e498:	mov	r0, r4
   2e49c:	blx	r9
   2e4a0:	cmp	r6, #1
   2e4a4:	beq	2e518 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x180>
   2e4a8:	rsb	r6, r6, #1
   2e4ac:	add	r5, r8, #8
   2e4b0:	mov	r7, #44	; 0x2c
   2e4b4:	mov	r8, #10
   2e4b8:	ldr	r0, [r4, #20]
   2e4bc:	add	r1, r0, #1
   2e4c0:	str	r1, [r4, #20]
   2e4c4:	strb	r7, [r0]
   2e4c8:	ldrb	r0, [r4, #25]
   2e4cc:	cmp	r0, #0
   2e4d0:	beq	2e4f0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x158>
   2e4d4:	ldr	r0, [r4, #20]
   2e4d8:	add	r1, r0, #1
   2e4dc:	str	r1, [r4, #20]
   2e4e0:	strb	r8, [r0]
   2e4e4:	mov	r0, r4
   2e4e8:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e4ec:	b	2e4f8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x160>
   2e4f0:	mov	r0, r4
   2e4f4:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e4f8:	mov	r0, r5
   2e4fc:	bl	2b220 <flatcc_json_printer_uint32_field@@Base+0xac>
   2e500:	mov	r1, r0
   2e504:	mov	r0, r4
   2e508:	blx	r9
   2e50c:	adds	r6, r6, #1
   2e510:	add	r5, r5, #4
   2e514:	bne	2e4b8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   2e518:	ldrb	r0, [r4, #25]
   2e51c:	cmp	r0, #0
   2e520:	beq	2e54c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   2e524:	ldr	r0, [r4, #20]
   2e528:	add	r1, r0, #1
   2e52c:	str	r1, [r4, #20]
   2e530:	mov	r1, #10
   2e534:	strb	r1, [r0]
   2e538:	ldr	r0, [r4, #32]
   2e53c:	sub	r0, r0, #1
   2e540:	str	r0, [r4, #32]
   2e544:	mov	r0, r4
   2e548:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e54c:	ldr	r0, [r4, #20]
   2e550:	add	r1, r0, #1
   2e554:	str	r1, [r4, #20]
   2e558:	mov	r1, #93	; 0x5d
   2e55c:	strb	r1, [r0]
   2e560:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e564 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   2e564:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e568:	add	fp, sp, #24
   2e56c:	mov	r7, r3
   2e570:	mov	r6, r1
   2e574:	mov	r4, r0
   2e578:	ldrb	r0, [r0, #27]
   2e57c:	cmp	r0, #0
   2e580:	beq	2e598 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x34>
   2e584:	mov	r0, r4
   2e588:	mov	r1, r6
   2e58c:	mov	r3, r7
   2e590:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e594:	b	2d06c <flatcc_json_printer_uint64_vector_field@@Base>
   2e598:	ldr	r9, [fp, #12]
   2e59c:	ldr	r5, [fp, #8]
   2e5a0:	mov	r0, r6
   2e5a4:	mov	r1, r2
   2e5a8:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2e5ac:	cmp	r0, #0
   2e5b0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e5b4:	ldr	r1, [r6, #16]
   2e5b8:	add	r2, r1, #1
   2e5bc:	str	r2, [r6, #16]
   2e5c0:	cmp	r1, #0
   2e5c4:	ldrne	r1, [r4, #20]
   2e5c8:	addne	r2, r1, #1
   2e5cc:	strne	r2, [r4, #20]
   2e5d0:	movne	r2, #44	; 0x2c
   2e5d4:	strbne	r2, [r1]
   2e5d8:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2e5dc:	mov	r8, r0
   2e5e0:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e5e4:	mov	r6, r0
   2e5e8:	mov	r0, r4
   2e5ec:	mov	r1, r7
   2e5f0:	mov	r2, r5
   2e5f4:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2e5f8:	ldr	r0, [r4, #20]
   2e5fc:	ldr	r1, [r4, #32]
   2e600:	add	r1, r1, #1
   2e604:	str	r1, [r4, #32]
   2e608:	add	r1, r0, #1
   2e60c:	str	r1, [r4, #20]
   2e610:	mov	r1, #91	; 0x5b
   2e614:	strb	r1, [r0]
   2e618:	cmp	r6, #0
   2e61c:	beq	2e6ec <flatcc_json_printer_uint64_enum_vector_field@@Base+0x188>
   2e620:	add	r5, r8, #4
   2e624:	ldrb	r0, [r4, #25]
   2e628:	cmp	r0, #0
   2e62c:	beq	2e650 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xec>
   2e630:	ldr	r0, [r4, #20]
   2e634:	add	r1, r0, #1
   2e638:	str	r1, [r4, #20]
   2e63c:	mov	r1, #10
   2e640:	strb	r1, [r0]
   2e644:	mov	r0, r4
   2e648:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e64c:	b	2e658 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   2e650:	mov	r0, r4
   2e654:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e658:	mov	r0, r5
   2e65c:	bl	2b2f4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2e660:	mov	r2, r0
   2e664:	mov	r0, r4
   2e668:	mov	r3, r1
   2e66c:	blx	r9
   2e670:	cmp	r6, #1
   2e674:	beq	2e6ec <flatcc_json_printer_uint64_enum_vector_field@@Base+0x188>
   2e678:	rsb	r6, r6, #1
   2e67c:	add	r5, r8, #12
   2e680:	mov	r7, #44	; 0x2c
   2e684:	mov	r8, #10
   2e688:	ldr	r0, [r4, #20]
   2e68c:	add	r1, r0, #1
   2e690:	str	r1, [r4, #20]
   2e694:	strb	r7, [r0]
   2e698:	ldrb	r0, [r4, #25]
   2e69c:	cmp	r0, #0
   2e6a0:	beq	2e6c0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x15c>
   2e6a4:	ldr	r0, [r4, #20]
   2e6a8:	add	r1, r0, #1
   2e6ac:	str	r1, [r4, #20]
   2e6b0:	strb	r8, [r0]
   2e6b4:	mov	r0, r4
   2e6b8:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e6bc:	b	2e6c8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x164>
   2e6c0:	mov	r0, r4
   2e6c4:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e6c8:	mov	r0, r5
   2e6cc:	bl	2b2f4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2e6d0:	mov	r2, r0
   2e6d4:	mov	r0, r4
   2e6d8:	mov	r3, r1
   2e6dc:	blx	r9
   2e6e0:	adds	r6, r6, #1
   2e6e4:	add	r5, r5, #8
   2e6e8:	bne	2e688 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x124>
   2e6ec:	ldrb	r0, [r4, #25]
   2e6f0:	cmp	r0, #0
   2e6f4:	beq	2e720 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1bc>
   2e6f8:	ldr	r0, [r4, #20]
   2e6fc:	add	r1, r0, #1
   2e700:	str	r1, [r4, #20]
   2e704:	mov	r1, #10
   2e708:	strb	r1, [r0]
   2e70c:	ldr	r0, [r4, #32]
   2e710:	sub	r0, r0, #1
   2e714:	str	r0, [r4, #32]
   2e718:	mov	r0, r4
   2e71c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e720:	ldr	r0, [r4, #20]
   2e724:	add	r1, r0, #1
   2e728:	str	r1, [r4, #20]
   2e72c:	mov	r1, #93	; 0x5d
   2e730:	strb	r1, [r0]
   2e734:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e738 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   2e738:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e73c:	add	fp, sp, #24
   2e740:	mov	r7, r3
   2e744:	mov	r6, r1
   2e748:	mov	r4, r0
   2e74c:	ldrb	r0, [r0, #27]
   2e750:	cmp	r0, #0
   2e754:	beq	2e76c <flatcc_json_printer_int8_enum_vector_field@@Base+0x34>
   2e758:	mov	r0, r4
   2e75c:	mov	r1, r6
   2e760:	mov	r3, r7
   2e764:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e768:	b	2d224 <flatcc_json_printer_int8_vector_field@@Base>
   2e76c:	ldr	r9, [fp, #12]
   2e770:	ldr	r5, [fp, #8]
   2e774:	mov	r0, r6
   2e778:	mov	r1, r2
   2e77c:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2e780:	cmp	r0, #0
   2e784:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e788:	ldr	r1, [r6, #16]
   2e78c:	add	r2, r1, #1
   2e790:	str	r2, [r6, #16]
   2e794:	cmp	r1, #0
   2e798:	ldrne	r1, [r4, #20]
   2e79c:	addne	r2, r1, #1
   2e7a0:	strne	r2, [r4, #20]
   2e7a4:	movne	r2, #44	; 0x2c
   2e7a8:	strbne	r2, [r1]
   2e7ac:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2e7b0:	mov	r8, r0
   2e7b4:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e7b8:	mov	r6, r0
   2e7bc:	mov	r0, r4
   2e7c0:	mov	r1, r7
   2e7c4:	mov	r2, r5
   2e7c8:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2e7cc:	ldr	r0, [r4, #20]
   2e7d0:	ldr	r1, [r4, #32]
   2e7d4:	add	r1, r1, #1
   2e7d8:	str	r1, [r4, #32]
   2e7dc:	add	r1, r0, #1
   2e7e0:	str	r1, [r4, #20]
   2e7e4:	mov	r1, #91	; 0x5b
   2e7e8:	strb	r1, [r0]
   2e7ec:	cmp	r6, #0
   2e7f0:	beq	2e8b8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x180>
   2e7f4:	add	r5, r8, #4
   2e7f8:	ldrb	r0, [r4, #25]
   2e7fc:	cmp	r0, #0
   2e800:	beq	2e824 <flatcc_json_printer_int8_enum_vector_field@@Base+0xec>
   2e804:	ldr	r0, [r4, #20]
   2e808:	add	r1, r0, #1
   2e80c:	str	r1, [r4, #20]
   2e810:	mov	r1, #10
   2e814:	strb	r1, [r0]
   2e818:	mov	r0, r4
   2e81c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e820:	b	2e82c <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
   2e824:	mov	r0, r4
   2e828:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e82c:	mov	r0, r5
   2e830:	bl	2b3a8 <flatcc_json_printer_int8_field@@Base+0xac>
   2e834:	mov	r1, r0
   2e838:	mov	r0, r4
   2e83c:	blx	r9
   2e840:	cmp	r6, #1
   2e844:	beq	2e8b8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x180>
   2e848:	rsb	r6, r6, #1
   2e84c:	add	r5, r8, #5
   2e850:	mov	r7, #44	; 0x2c
   2e854:	mov	r8, #10
   2e858:	ldr	r0, [r4, #20]
   2e85c:	add	r1, r0, #1
   2e860:	str	r1, [r4, #20]
   2e864:	strb	r7, [r0]
   2e868:	ldrb	r0, [r4, #25]
   2e86c:	cmp	r0, #0
   2e870:	beq	2e890 <flatcc_json_printer_int8_enum_vector_field@@Base+0x158>
   2e874:	ldr	r0, [r4, #20]
   2e878:	add	r1, r0, #1
   2e87c:	str	r1, [r4, #20]
   2e880:	strb	r8, [r0]
   2e884:	mov	r0, r4
   2e888:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e88c:	b	2e898 <flatcc_json_printer_int8_enum_vector_field@@Base+0x160>
   2e890:	mov	r0, r4
   2e894:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e898:	mov	r0, r5
   2e89c:	bl	2b3a8 <flatcc_json_printer_int8_field@@Base+0xac>
   2e8a0:	mov	r1, r0
   2e8a4:	mov	r0, r4
   2e8a8:	blx	r9
   2e8ac:	adds	r6, r6, #1
   2e8b0:	add	r5, r5, #1
   2e8b4:	bne	2e858 <flatcc_json_printer_int8_enum_vector_field@@Base+0x120>
   2e8b8:	ldrb	r0, [r4, #25]
   2e8bc:	cmp	r0, #0
   2e8c0:	beq	2e8ec <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b4>
   2e8c4:	ldr	r0, [r4, #20]
   2e8c8:	add	r1, r0, #1
   2e8cc:	str	r1, [r4, #20]
   2e8d0:	mov	r1, #10
   2e8d4:	strb	r1, [r0]
   2e8d8:	ldr	r0, [r4, #32]
   2e8dc:	sub	r0, r0, #1
   2e8e0:	str	r0, [r4, #32]
   2e8e4:	mov	r0, r4
   2e8e8:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e8ec:	ldr	r0, [r4, #20]
   2e8f0:	add	r1, r0, #1
   2e8f4:	str	r1, [r4, #20]
   2e8f8:	mov	r1, #93	; 0x5d
   2e8fc:	strb	r1, [r0]
   2e900:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e904 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   2e904:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e908:	add	fp, sp, #24
   2e90c:	mov	r7, r3
   2e910:	mov	r6, r1
   2e914:	mov	r4, r0
   2e918:	ldrb	r0, [r0, #27]
   2e91c:	cmp	r0, #0
   2e920:	beq	2e938 <flatcc_json_printer_int16_enum_vector_field@@Base+0x34>
   2e924:	mov	r0, r4
   2e928:	mov	r1, r6
   2e92c:	mov	r3, r7
   2e930:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e934:	b	2d3dc <flatcc_json_printer_int16_vector_field@@Base>
   2e938:	ldr	r9, [fp, #12]
   2e93c:	ldr	r5, [fp, #8]
   2e940:	mov	r0, r6
   2e944:	mov	r1, r2
   2e948:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2e94c:	cmp	r0, #0
   2e950:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e954:	ldr	r1, [r6, #16]
   2e958:	add	r2, r1, #1
   2e95c:	str	r2, [r6, #16]
   2e960:	cmp	r1, #0
   2e964:	ldrne	r1, [r4, #20]
   2e968:	addne	r2, r1, #1
   2e96c:	strne	r2, [r4, #20]
   2e970:	movne	r2, #44	; 0x2c
   2e974:	strbne	r2, [r1]
   2e978:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2e97c:	mov	r8, r0
   2e980:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e984:	mov	r6, r0
   2e988:	mov	r0, r4
   2e98c:	mov	r1, r7
   2e990:	mov	r2, r5
   2e994:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2e998:	ldr	r0, [r4, #20]
   2e99c:	ldr	r1, [r4, #32]
   2e9a0:	add	r1, r1, #1
   2e9a4:	str	r1, [r4, #32]
   2e9a8:	add	r1, r0, #1
   2e9ac:	str	r1, [r4, #20]
   2e9b0:	mov	r1, #91	; 0x5b
   2e9b4:	strb	r1, [r0]
   2e9b8:	cmp	r6, #0
   2e9bc:	beq	2ea84 <flatcc_json_printer_int16_enum_vector_field@@Base+0x180>
   2e9c0:	add	r5, r8, #4
   2e9c4:	ldrb	r0, [r4, #25]
   2e9c8:	cmp	r0, #0
   2e9cc:	beq	2e9f0 <flatcc_json_printer_int16_enum_vector_field@@Base+0xec>
   2e9d0:	ldr	r0, [r4, #20]
   2e9d4:	add	r1, r0, #1
   2e9d8:	str	r1, [r4, #20]
   2e9dc:	mov	r1, #10
   2e9e0:	strb	r1, [r0]
   2e9e4:	mov	r0, r4
   2e9e8:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2e9ec:	b	2e9f8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   2e9f0:	mov	r0, r4
   2e9f4:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2e9f8:	mov	r0, r5
   2e9fc:	bl	2b45c <flatcc_json_printer_int16_field@@Base+0xac>
   2ea00:	mov	r1, r0
   2ea04:	mov	r0, r4
   2ea08:	blx	r9
   2ea0c:	cmp	r6, #1
   2ea10:	beq	2ea84 <flatcc_json_printer_int16_enum_vector_field@@Base+0x180>
   2ea14:	rsb	r6, r6, #1
   2ea18:	add	r5, r8, #6
   2ea1c:	mov	r7, #44	; 0x2c
   2ea20:	mov	r8, #10
   2ea24:	ldr	r0, [r4, #20]
   2ea28:	add	r1, r0, #1
   2ea2c:	str	r1, [r4, #20]
   2ea30:	strb	r7, [r0]
   2ea34:	ldrb	r0, [r4, #25]
   2ea38:	cmp	r0, #0
   2ea3c:	beq	2ea5c <flatcc_json_printer_int16_enum_vector_field@@Base+0x158>
   2ea40:	ldr	r0, [r4, #20]
   2ea44:	add	r1, r0, #1
   2ea48:	str	r1, [r4, #20]
   2ea4c:	strb	r8, [r0]
   2ea50:	mov	r0, r4
   2ea54:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ea58:	b	2ea64 <flatcc_json_printer_int16_enum_vector_field@@Base+0x160>
   2ea5c:	mov	r0, r4
   2ea60:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ea64:	mov	r0, r5
   2ea68:	bl	2b45c <flatcc_json_printer_int16_field@@Base+0xac>
   2ea6c:	mov	r1, r0
   2ea70:	mov	r0, r4
   2ea74:	blx	r9
   2ea78:	adds	r6, r6, #1
   2ea7c:	add	r5, r5, #2
   2ea80:	bne	2ea24 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   2ea84:	ldrb	r0, [r4, #25]
   2ea88:	cmp	r0, #0
   2ea8c:	beq	2eab8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   2ea90:	ldr	r0, [r4, #20]
   2ea94:	add	r1, r0, #1
   2ea98:	str	r1, [r4, #20]
   2ea9c:	mov	r1, #10
   2eaa0:	strb	r1, [r0]
   2eaa4:	ldr	r0, [r4, #32]
   2eaa8:	sub	r0, r0, #1
   2eaac:	str	r0, [r4, #32]
   2eab0:	mov	r0, r4
   2eab4:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2eab8:	ldr	r0, [r4, #20]
   2eabc:	add	r1, r0, #1
   2eac0:	str	r1, [r4, #20]
   2eac4:	mov	r1, #93	; 0x5d
   2eac8:	strb	r1, [r0]
   2eacc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002ead0 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   2ead0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ead4:	add	fp, sp, #24
   2ead8:	mov	r7, r3
   2eadc:	mov	r6, r1
   2eae0:	mov	r4, r0
   2eae4:	ldrb	r0, [r0, #27]
   2eae8:	cmp	r0, #0
   2eaec:	beq	2eb04 <flatcc_json_printer_int32_enum_vector_field@@Base+0x34>
   2eaf0:	mov	r0, r4
   2eaf4:	mov	r1, r6
   2eaf8:	mov	r3, r7
   2eafc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eb00:	b	2d594 <flatcc_json_printer_int32_vector_field@@Base>
   2eb04:	ldr	r9, [fp, #12]
   2eb08:	ldr	r5, [fp, #8]
   2eb0c:	mov	r0, r6
   2eb10:	mov	r1, r2
   2eb14:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2eb18:	cmp	r0, #0
   2eb1c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2eb20:	ldr	r1, [r6, #16]
   2eb24:	add	r2, r1, #1
   2eb28:	str	r2, [r6, #16]
   2eb2c:	cmp	r1, #0
   2eb30:	ldrne	r1, [r4, #20]
   2eb34:	addne	r2, r1, #1
   2eb38:	strne	r2, [r4, #20]
   2eb3c:	movne	r2, #44	; 0x2c
   2eb40:	strbne	r2, [r1]
   2eb44:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2eb48:	mov	r8, r0
   2eb4c:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2eb50:	mov	r6, r0
   2eb54:	mov	r0, r4
   2eb58:	mov	r1, r7
   2eb5c:	mov	r2, r5
   2eb60:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2eb64:	ldr	r0, [r4, #20]
   2eb68:	ldr	r1, [r4, #32]
   2eb6c:	add	r1, r1, #1
   2eb70:	str	r1, [r4, #32]
   2eb74:	add	r1, r0, #1
   2eb78:	str	r1, [r4, #20]
   2eb7c:	mov	r1, #91	; 0x5b
   2eb80:	strb	r1, [r0]
   2eb84:	cmp	r6, #0
   2eb88:	beq	2ec50 <flatcc_json_printer_int32_enum_vector_field@@Base+0x180>
   2eb8c:	add	r5, r8, #4
   2eb90:	ldrb	r0, [r4, #25]
   2eb94:	cmp	r0, #0
   2eb98:	beq	2ebbc <flatcc_json_printer_int32_enum_vector_field@@Base+0xec>
   2eb9c:	ldr	r0, [r4, #20]
   2eba0:	add	r1, r0, #1
   2eba4:	str	r1, [r4, #20]
   2eba8:	mov	r1, #10
   2ebac:	strb	r1, [r0]
   2ebb0:	mov	r0, r4
   2ebb4:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ebb8:	b	2ebc4 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   2ebbc:	mov	r0, r4
   2ebc0:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ebc4:	mov	r0, r5
   2ebc8:	bl	2b510 <flatcc_json_printer_int32_field@@Base+0xac>
   2ebcc:	mov	r1, r0
   2ebd0:	mov	r0, r4
   2ebd4:	blx	r9
   2ebd8:	cmp	r6, #1
   2ebdc:	beq	2ec50 <flatcc_json_printer_int32_enum_vector_field@@Base+0x180>
   2ebe0:	rsb	r6, r6, #1
   2ebe4:	add	r5, r8, #8
   2ebe8:	mov	r7, #44	; 0x2c
   2ebec:	mov	r8, #10
   2ebf0:	ldr	r0, [r4, #20]
   2ebf4:	add	r1, r0, #1
   2ebf8:	str	r1, [r4, #20]
   2ebfc:	strb	r7, [r0]
   2ec00:	ldrb	r0, [r4, #25]
   2ec04:	cmp	r0, #0
   2ec08:	beq	2ec28 <flatcc_json_printer_int32_enum_vector_field@@Base+0x158>
   2ec0c:	ldr	r0, [r4, #20]
   2ec10:	add	r1, r0, #1
   2ec14:	str	r1, [r4, #20]
   2ec18:	strb	r8, [r0]
   2ec1c:	mov	r0, r4
   2ec20:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ec24:	b	2ec30 <flatcc_json_printer_int32_enum_vector_field@@Base+0x160>
   2ec28:	mov	r0, r4
   2ec2c:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ec30:	mov	r0, r5
   2ec34:	bl	2b510 <flatcc_json_printer_int32_field@@Base+0xac>
   2ec38:	mov	r1, r0
   2ec3c:	mov	r0, r4
   2ec40:	blx	r9
   2ec44:	adds	r6, r6, #1
   2ec48:	add	r5, r5, #4
   2ec4c:	bne	2ebf0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   2ec50:	ldrb	r0, [r4, #25]
   2ec54:	cmp	r0, #0
   2ec58:	beq	2ec84 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   2ec5c:	ldr	r0, [r4, #20]
   2ec60:	add	r1, r0, #1
   2ec64:	str	r1, [r4, #20]
   2ec68:	mov	r1, #10
   2ec6c:	strb	r1, [r0]
   2ec70:	ldr	r0, [r4, #32]
   2ec74:	sub	r0, r0, #1
   2ec78:	str	r0, [r4, #32]
   2ec7c:	mov	r0, r4
   2ec80:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ec84:	ldr	r0, [r4, #20]
   2ec88:	add	r1, r0, #1
   2ec8c:	str	r1, [r4, #20]
   2ec90:	mov	r1, #93	; 0x5d
   2ec94:	strb	r1, [r0]
   2ec98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002ec9c <flatcc_json_printer_int64_enum_vector_field@@Base>:
   2ec9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eca0:	add	fp, sp, #24
   2eca4:	mov	r7, r3
   2eca8:	mov	r6, r1
   2ecac:	mov	r4, r0
   2ecb0:	ldrb	r0, [r0, #27]
   2ecb4:	cmp	r0, #0
   2ecb8:	beq	2ecd0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x34>
   2ecbc:	mov	r0, r4
   2ecc0:	mov	r1, r6
   2ecc4:	mov	r3, r7
   2ecc8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eccc:	b	2d74c <flatcc_json_printer_int64_vector_field@@Base>
   2ecd0:	ldr	r9, [fp, #12]
   2ecd4:	ldr	r5, [fp, #8]
   2ecd8:	mov	r0, r6
   2ecdc:	mov	r1, r2
   2ece0:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2ece4:	cmp	r0, #0
   2ece8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ecec:	ldr	r1, [r6, #16]
   2ecf0:	add	r2, r1, #1
   2ecf4:	str	r2, [r6, #16]
   2ecf8:	cmp	r1, #0
   2ecfc:	ldrne	r1, [r4, #20]
   2ed00:	addne	r2, r1, #1
   2ed04:	strne	r2, [r4, #20]
   2ed08:	movne	r2, #44	; 0x2c
   2ed0c:	strbne	r2, [r1]
   2ed10:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2ed14:	mov	r8, r0
   2ed18:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2ed1c:	mov	r6, r0
   2ed20:	mov	r0, r4
   2ed24:	mov	r1, r7
   2ed28:	mov	r2, r5
   2ed2c:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2ed30:	ldr	r0, [r4, #20]
   2ed34:	ldr	r1, [r4, #32]
   2ed38:	add	r1, r1, #1
   2ed3c:	str	r1, [r4, #32]
   2ed40:	add	r1, r0, #1
   2ed44:	str	r1, [r4, #20]
   2ed48:	mov	r1, #91	; 0x5b
   2ed4c:	strb	r1, [r0]
   2ed50:	cmp	r6, #0
   2ed54:	beq	2ee24 <flatcc_json_printer_int64_enum_vector_field@@Base+0x188>
   2ed58:	add	r5, r8, #4
   2ed5c:	ldrb	r0, [r4, #25]
   2ed60:	cmp	r0, #0
   2ed64:	beq	2ed88 <flatcc_json_printer_int64_enum_vector_field@@Base+0xec>
   2ed68:	ldr	r0, [r4, #20]
   2ed6c:	add	r1, r0, #1
   2ed70:	str	r1, [r4, #20]
   2ed74:	mov	r1, #10
   2ed78:	strb	r1, [r0]
   2ed7c:	mov	r0, r4
   2ed80:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ed84:	b	2ed90 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   2ed88:	mov	r0, r4
   2ed8c:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ed90:	mov	r0, r5
   2ed94:	bl	2b5e4 <flatcc_json_printer_int64_field@@Base+0xcc>
   2ed98:	mov	r2, r0
   2ed9c:	mov	r0, r4
   2eda0:	mov	r3, r1
   2eda4:	blx	r9
   2eda8:	cmp	r6, #1
   2edac:	beq	2ee24 <flatcc_json_printer_int64_enum_vector_field@@Base+0x188>
   2edb0:	rsb	r6, r6, #1
   2edb4:	add	r5, r8, #12
   2edb8:	mov	r7, #44	; 0x2c
   2edbc:	mov	r8, #10
   2edc0:	ldr	r0, [r4, #20]
   2edc4:	add	r1, r0, #1
   2edc8:	str	r1, [r4, #20]
   2edcc:	strb	r7, [r0]
   2edd0:	ldrb	r0, [r4, #25]
   2edd4:	cmp	r0, #0
   2edd8:	beq	2edf8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x15c>
   2eddc:	ldr	r0, [r4, #20]
   2ede0:	add	r1, r0, #1
   2ede4:	str	r1, [r4, #20]
   2ede8:	strb	r8, [r0]
   2edec:	mov	r0, r4
   2edf0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2edf4:	b	2ee00 <flatcc_json_printer_int64_enum_vector_field@@Base+0x164>
   2edf8:	mov	r0, r4
   2edfc:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ee00:	mov	r0, r5
   2ee04:	bl	2b5e4 <flatcc_json_printer_int64_field@@Base+0xcc>
   2ee08:	mov	r2, r0
   2ee0c:	mov	r0, r4
   2ee10:	mov	r3, r1
   2ee14:	blx	r9
   2ee18:	adds	r6, r6, #1
   2ee1c:	add	r5, r5, #8
   2ee20:	bne	2edc0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x124>
   2ee24:	ldrb	r0, [r4, #25]
   2ee28:	cmp	r0, #0
   2ee2c:	beq	2ee58 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1bc>
   2ee30:	ldr	r0, [r4, #20]
   2ee34:	add	r1, r0, #1
   2ee38:	str	r1, [r4, #20]
   2ee3c:	mov	r1, #10
   2ee40:	strb	r1, [r0]
   2ee44:	ldr	r0, [r4, #32]
   2ee48:	sub	r0, r0, #1
   2ee4c:	str	r0, [r4, #32]
   2ee50:	mov	r0, r4
   2ee54:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ee58:	ldr	r0, [r4, #20]
   2ee5c:	add	r1, r0, #1
   2ee60:	str	r1, [r4, #20]
   2ee64:	mov	r1, #93	; 0x5d
   2ee68:	strb	r1, [r0]
   2ee6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002ee70 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   2ee70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ee74:	add	fp, sp, #24
   2ee78:	mov	r7, r3
   2ee7c:	mov	r6, r1
   2ee80:	mov	r4, r0
   2ee84:	ldrb	r0, [r0, #27]
   2ee88:	cmp	r0, #0
   2ee8c:	beq	2eea4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x34>
   2ee90:	mov	r0, r4
   2ee94:	mov	r1, r6
   2ee98:	mov	r3, r7
   2ee9c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eea0:	b	2d904 <flatcc_json_printer_bool_vector_field@@Base>
   2eea4:	ldr	r9, [fp, #12]
   2eea8:	ldr	r5, [fp, #8]
   2eeac:	mov	r0, r6
   2eeb0:	mov	r1, r2
   2eeb4:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2eeb8:	cmp	r0, #0
   2eebc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2eec0:	ldr	r1, [r6, #16]
   2eec4:	add	r2, r1, #1
   2eec8:	str	r2, [r6, #16]
   2eecc:	cmp	r1, #0
   2eed0:	ldrne	r1, [r4, #20]
   2eed4:	addne	r2, r1, #1
   2eed8:	strne	r2, [r4, #20]
   2eedc:	movne	r2, #44	; 0x2c
   2eee0:	strbne	r2, [r1]
   2eee4:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2eee8:	mov	r8, r0
   2eeec:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2eef0:	mov	r6, r0
   2eef4:	mov	r0, r4
   2eef8:	mov	r1, r7
   2eefc:	mov	r2, r5
   2ef00:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2ef04:	ldr	r0, [r4, #20]
   2ef08:	ldr	r1, [r4, #32]
   2ef0c:	add	r1, r1, #1
   2ef10:	str	r1, [r4, #32]
   2ef14:	add	r1, r0, #1
   2ef18:	str	r1, [r4, #20]
   2ef1c:	mov	r1, #91	; 0x5b
   2ef20:	strb	r1, [r0]
   2ef24:	cmp	r6, #0
   2ef28:	beq	2eff0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x180>
   2ef2c:	add	r5, r8, #4
   2ef30:	ldrb	r0, [r4, #25]
   2ef34:	cmp	r0, #0
   2ef38:	beq	2ef5c <flatcc_json_printer_bool_enum_vector_field@@Base+0xec>
   2ef3c:	ldr	r0, [r4, #20]
   2ef40:	add	r1, r0, #1
   2ef44:	str	r1, [r4, #20]
   2ef48:	mov	r1, #10
   2ef4c:	strb	r1, [r0]
   2ef50:	mov	r0, r4
   2ef54:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ef58:	b	2ef64 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
   2ef5c:	mov	r0, r4
   2ef60:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2ef64:	mov	r0, r5
   2ef68:	bl	2b698 <flatcc_json_printer_bool_field@@Base+0xac>
   2ef6c:	mov	r1, r0
   2ef70:	mov	r0, r4
   2ef74:	blx	r9
   2ef78:	cmp	r6, #1
   2ef7c:	beq	2eff0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x180>
   2ef80:	rsb	r6, r6, #1
   2ef84:	add	r5, r8, #5
   2ef88:	mov	r7, #44	; 0x2c
   2ef8c:	mov	r8, #10
   2ef90:	ldr	r0, [r4, #20]
   2ef94:	add	r1, r0, #1
   2ef98:	str	r1, [r4, #20]
   2ef9c:	strb	r7, [r0]
   2efa0:	ldrb	r0, [r4, #25]
   2efa4:	cmp	r0, #0
   2efa8:	beq	2efc8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x158>
   2efac:	ldr	r0, [r4, #20]
   2efb0:	add	r1, r0, #1
   2efb4:	str	r1, [r4, #20]
   2efb8:	strb	r8, [r0]
   2efbc:	mov	r0, r4
   2efc0:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2efc4:	b	2efd0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x160>
   2efc8:	mov	r0, r4
   2efcc:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2efd0:	mov	r0, r5
   2efd4:	bl	2b698 <flatcc_json_printer_bool_field@@Base+0xac>
   2efd8:	mov	r1, r0
   2efdc:	mov	r0, r4
   2efe0:	blx	r9
   2efe4:	adds	r6, r6, #1
   2efe8:	add	r5, r5, #1
   2efec:	bne	2ef90 <flatcc_json_printer_bool_enum_vector_field@@Base+0x120>
   2eff0:	ldrb	r0, [r4, #25]
   2eff4:	cmp	r0, #0
   2eff8:	beq	2f024 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b4>
   2effc:	ldr	r0, [r4, #20]
   2f000:	add	r1, r0, #1
   2f004:	str	r1, [r4, #20]
   2f008:	mov	r1, #10
   2f00c:	strb	r1, [r0]
   2f010:	ldr	r0, [r4, #32]
   2f014:	sub	r0, r0, #1
   2f018:	str	r0, [r4, #32]
   2f01c:	mov	r0, r4
   2f020:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f024:	ldr	r0, [r4, #20]
   2f028:	add	r1, r0, #1
   2f02c:	str	r1, [r4, #20]
   2f030:	mov	r1, #93	; 0x5d
   2f034:	strb	r1, [r0]
   2f038:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002f03c <flatcc_json_printer_struct_vector_field@@Base>:
   2f03c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f040:	add	fp, sp, #28
   2f044:	sub	sp, sp, #4
   2f048:	mov	r7, r3
   2f04c:	mov	r5, r1
   2f050:	mov	r4, r0
   2f054:	mov	r0, r1
   2f058:	mov	r1, r2
   2f05c:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2f060:	cmp	r0, #0
   2f064:	beq	2f2b0 <flatcc_json_printer_struct_vector_field@@Base+0x274>
   2f068:	ldr	r8, [fp, #8]
   2f06c:	ldr	r1, [r5, #16]
   2f070:	add	r2, r1, #1
   2f074:	str	r2, [r5, #16]
   2f078:	cmp	r1, #0
   2f07c:	ldrne	r1, [r4, #20]
   2f080:	addne	r2, r1, #1
   2f084:	strne	r2, [r4, #20]
   2f088:	movne	r2, #44	; 0x2c
   2f08c:	strbne	r2, [r1]
   2f090:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2f094:	mov	r5, r0
   2f098:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2f09c:	mov	r6, r0
   2f0a0:	mov	r0, r4
   2f0a4:	mov	r1, r7
   2f0a8:	mov	r2, r8
   2f0ac:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2f0b0:	ldr	r0, [r4, #20]
   2f0b4:	ldr	r1, [r4, #32]
   2f0b8:	add	r1, r1, #1
   2f0bc:	str	r1, [r4, #32]
   2f0c0:	add	r1, r0, #1
   2f0c4:	str	r1, [r4, #20]
   2f0c8:	mov	r1, #91	; 0x5b
   2f0cc:	strb	r1, [r0]
   2f0d0:	cmp	r6, #0
   2f0d4:	beq	2f268 <flatcc_json_printer_struct_vector_field@@Base+0x22c>
   2f0d8:	add	r8, r5, #4
   2f0dc:	ldrb	r0, [r4, #25]
   2f0e0:	cmp	r0, #0
   2f0e4:	beq	2f108 <flatcc_json_printer_struct_vector_field@@Base+0xcc>
   2f0e8:	ldr	r0, [r4, #20]
   2f0ec:	add	r1, r0, #1
   2f0f0:	str	r1, [r4, #20]
   2f0f4:	mov	r1, #10
   2f0f8:	strb	r1, [r0]
   2f0fc:	mov	r0, r4
   2f100:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f104:	b	2f110 <flatcc_json_printer_struct_vector_field@@Base+0xd4>
   2f108:	mov	r0, r4
   2f10c:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2f110:	ldr	r0, [r4, #20]
   2f114:	ldr	r1, [r4, #32]
   2f118:	add	r1, r1, #1
   2f11c:	str	r1, [r4, #32]
   2f120:	add	r1, r0, #1
   2f124:	str	r1, [r4, #20]
   2f128:	mov	r1, #123	; 0x7b
   2f12c:	strb	r1, [r0]
   2f130:	mov	r0, r4
   2f134:	mov	r1, r8
   2f138:	ldr	r2, [fp, #16]
   2f13c:	blx	r2
   2f140:	ldrb	r0, [r4, #25]
   2f144:	cmp	r0, #0
   2f148:	beq	2f174 <flatcc_json_printer_struct_vector_field@@Base+0x138>
   2f14c:	ldr	r0, [r4, #20]
   2f150:	add	r1, r0, #1
   2f154:	str	r1, [r4, #20]
   2f158:	mov	r1, #10
   2f15c:	strb	r1, [r0]
   2f160:	ldr	r0, [r4, #32]
   2f164:	sub	r0, r0, #1
   2f168:	str	r0, [r4, #32]
   2f16c:	mov	r0, r4
   2f170:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f174:	ldr	r0, [r4, #20]
   2f178:	add	r1, r0, #1
   2f17c:	str	r1, [r4, #20]
   2f180:	mov	r1, #125	; 0x7d
   2f184:	strb	r1, [r0]
   2f188:	cmp	r6, #1
   2f18c:	beq	2f268 <flatcc_json_printer_struct_vector_field@@Base+0x22c>
   2f190:	ldr	r9, [fp, #12]
   2f194:	add	r0, r5, r9
   2f198:	add	r5, r0, #4
   2f19c:	rsb	r6, r6, #1
   2f1a0:	mov	r7, #44	; 0x2c
   2f1a4:	mov	sl, #123	; 0x7b
   2f1a8:	mov	r8, #10
   2f1ac:	ldr	r0, [r4, #20]
   2f1b0:	add	r1, r0, #1
   2f1b4:	str	r1, [r4, #20]
   2f1b8:	strb	r7, [r0]
   2f1bc:	ldrb	r0, [r4, #25]
   2f1c0:	cmp	r0, #0
   2f1c4:	beq	2f1e4 <flatcc_json_printer_struct_vector_field@@Base+0x1a8>
   2f1c8:	ldr	r0, [r4, #20]
   2f1cc:	add	r1, r0, #1
   2f1d0:	str	r1, [r4, #20]
   2f1d4:	strb	r8, [r0]
   2f1d8:	mov	r0, r4
   2f1dc:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f1e0:	b	2f1ec <flatcc_json_printer_struct_vector_field@@Base+0x1b0>
   2f1e4:	mov	r0, r4
   2f1e8:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2f1ec:	ldr	r0, [r4, #20]
   2f1f0:	ldr	r1, [r4, #32]
   2f1f4:	add	r1, r1, #1
   2f1f8:	str	r1, [r4, #32]
   2f1fc:	add	r1, r0, #1
   2f200:	str	r1, [r4, #20]
   2f204:	strb	sl, [r0]
   2f208:	mov	r0, r4
   2f20c:	mov	r1, r5
   2f210:	ldr	r2, [fp, #16]
   2f214:	blx	r2
   2f218:	ldrb	r0, [r4, #25]
   2f21c:	cmp	r0, #0
   2f220:	beq	2f248 <flatcc_json_printer_struct_vector_field@@Base+0x20c>
   2f224:	ldr	r0, [r4, #20]
   2f228:	add	r1, r0, #1
   2f22c:	str	r1, [r4, #20]
   2f230:	strb	r8, [r0]
   2f234:	ldr	r0, [r4, #32]
   2f238:	sub	r0, r0, #1
   2f23c:	str	r0, [r4, #32]
   2f240:	mov	r0, r4
   2f244:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f248:	ldr	r0, [r4, #20]
   2f24c:	add	r1, r0, #1
   2f250:	str	r1, [r4, #20]
   2f254:	mov	r1, #125	; 0x7d
   2f258:	strb	r1, [r0]
   2f25c:	add	r5, r5, r9
   2f260:	adds	r6, r6, #1
   2f264:	bne	2f1ac <flatcc_json_printer_struct_vector_field@@Base+0x170>
   2f268:	ldrb	r0, [r4, #25]
   2f26c:	cmp	r0, #0
   2f270:	beq	2f29c <flatcc_json_printer_struct_vector_field@@Base+0x260>
   2f274:	ldr	r0, [r4, #20]
   2f278:	add	r1, r0, #1
   2f27c:	str	r1, [r4, #20]
   2f280:	mov	r1, #10
   2f284:	strb	r1, [r0]
   2f288:	ldr	r0, [r4, #32]
   2f28c:	sub	r0, r0, #1
   2f290:	str	r0, [r4, #32]
   2f294:	mov	r0, r4
   2f298:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f29c:	ldr	r0, [r4, #20]
   2f2a0:	add	r1, r0, #1
   2f2a4:	str	r1, [r4, #20]
   2f2a8:	mov	r1, #93	; 0x5d
   2f2ac:	strb	r1, [r0]
   2f2b0:	sub	sp, fp, #28
   2f2b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f2b8 <flatcc_json_printer_string_vector_field@@Base>:
   2f2b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f2bc:	add	fp, sp, #24
   2f2c0:	mov	r7, r3
   2f2c4:	mov	r5, r1
   2f2c8:	mov	r4, r0
   2f2cc:	mov	r0, r1
   2f2d0:	mov	r1, r2
   2f2d4:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2f2d8:	cmp	r0, #0
   2f2dc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2f2e0:	ldr	r8, [fp, #8]
   2f2e4:	ldr	r1, [r5, #16]
   2f2e8:	add	r2, r1, #1
   2f2ec:	str	r2, [r5, #16]
   2f2f0:	cmp	r1, #0
   2f2f4:	ldrne	r1, [r4, #20]
   2f2f8:	addne	r2, r1, #1
   2f2fc:	strne	r2, [r4, #20]
   2f300:	movne	r2, #44	; 0x2c
   2f304:	strbne	r2, [r1]
   2f308:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2f30c:	mov	r5, r0
   2f310:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2f314:	mov	r6, r0
   2f318:	mov	r0, r4
   2f31c:	mov	r1, r7
   2f320:	mov	r2, r8
   2f324:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2f328:	ldr	r0, [r4, #20]
   2f32c:	ldr	r1, [r4, #32]
   2f330:	add	r1, r1, #1
   2f334:	str	r1, [r4, #32]
   2f338:	add	r1, r0, #1
   2f33c:	str	r1, [r4, #20]
   2f340:	mov	r1, #91	; 0x5b
   2f344:	strb	r1, [r0]
   2f348:	cmp	r6, #0
   2f34c:	beq	2f414 <flatcc_json_printer_string_vector_field@@Base+0x15c>
   2f350:	add	r7, r5, #4
   2f354:	ldrb	r0, [r4, #25]
   2f358:	cmp	r0, #0
   2f35c:	beq	2f380 <flatcc_json_printer_string_vector_field@@Base+0xc8>
   2f360:	ldr	r0, [r4, #20]
   2f364:	add	r1, r0, #1
   2f368:	str	r1, [r4, #20]
   2f36c:	mov	r1, #10
   2f370:	strb	r1, [r0]
   2f374:	mov	r0, r4
   2f378:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f37c:	b	2f388 <flatcc_json_printer_string_vector_field@@Base+0xd0>
   2f380:	mov	r0, r4
   2f384:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2f388:	mov	r0, r7
   2f38c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2f390:	mov	r1, r0
   2f394:	mov	r0, r4
   2f398:	bl	2ade4 <flatcc_json_printer_string_field@@Base+0x148>
   2f39c:	cmp	r6, #1
   2f3a0:	beq	2f414 <flatcc_json_printer_string_vector_field@@Base+0x15c>
   2f3a4:	add	r5, r5, #8
   2f3a8:	rsb	r6, r6, #1
   2f3ac:	mov	r7, #44	; 0x2c
   2f3b0:	mov	r8, #10
   2f3b4:	ldr	r0, [r4, #20]
   2f3b8:	add	r1, r0, #1
   2f3bc:	str	r1, [r4, #20]
   2f3c0:	strb	r7, [r0]
   2f3c4:	ldrb	r0, [r4, #25]
   2f3c8:	cmp	r0, #0
   2f3cc:	beq	2f3ec <flatcc_json_printer_string_vector_field@@Base+0x134>
   2f3d0:	ldr	r0, [r4, #20]
   2f3d4:	add	r1, r0, #1
   2f3d8:	str	r1, [r4, #20]
   2f3dc:	strb	r8, [r0]
   2f3e0:	mov	r0, r4
   2f3e4:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f3e8:	b	2f3f4 <flatcc_json_printer_string_vector_field@@Base+0x13c>
   2f3ec:	mov	r0, r4
   2f3f0:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2f3f4:	mov	r0, r5
   2f3f8:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2f3fc:	mov	r1, r0
   2f400:	mov	r0, r4
   2f404:	bl	2ade4 <flatcc_json_printer_string_field@@Base+0x148>
   2f408:	add	r5, r5, #4
   2f40c:	adds	r6, r6, #1
   2f410:	bne	2f3b4 <flatcc_json_printer_string_vector_field@@Base+0xfc>
   2f414:	ldrb	r0, [r4, #25]
   2f418:	cmp	r0, #0
   2f41c:	beq	2f448 <flatcc_json_printer_string_vector_field@@Base+0x190>
   2f420:	ldr	r0, [r4, #20]
   2f424:	add	r1, r0, #1
   2f428:	str	r1, [r4, #20]
   2f42c:	mov	r1, #10
   2f430:	strb	r1, [r0]
   2f434:	ldr	r0, [r4, #32]
   2f438:	sub	r0, r0, #1
   2f43c:	str	r0, [r4, #32]
   2f440:	mov	r0, r4
   2f444:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f448:	ldr	r0, [r4, #20]
   2f44c:	add	r1, r0, #1
   2f450:	str	r1, [r4, #20]
   2f454:	mov	r1, #93	; 0x5d
   2f458:	strb	r1, [r0]
   2f45c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002f460 <flatcc_json_printer_table_vector_field@@Base>:
   2f460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f464:	add	fp, sp, #28
   2f468:	sub	sp, sp, #4
   2f46c:	mov	r6, r3
   2f470:	mov	r5, r1
   2f474:	mov	r4, r0
   2f478:	mov	r0, r1
   2f47c:	mov	r1, r2
   2f480:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2f484:	cmp	r0, #0
   2f488:	beq	2f5b0 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2f48c:	ldr	r7, [fp, #8]
   2f490:	ldr	r1, [r5, #16]
   2f494:	add	r2, r1, #1
   2f498:	str	r2, [r5, #16]
   2f49c:	cmp	r1, #0
   2f4a0:	ldrne	r1, [r4, #20]
   2f4a4:	addne	r2, r1, #1
   2f4a8:	strne	r2, [r4, #20]
   2f4ac:	movne	r2, #44	; 0x2c
   2f4b0:	strbne	r2, [r1]
   2f4b4:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2f4b8:	mov	r8, r0
   2f4bc:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2f4c0:	mov	r9, r0
   2f4c4:	mov	r0, r4
   2f4c8:	mov	r1, r6
   2f4cc:	mov	r2, r7
   2f4d0:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2f4d4:	ldr	r0, [r4, #20]
   2f4d8:	ldr	r1, [r4, #32]
   2f4dc:	add	r1, r1, #1
   2f4e0:	str	r1, [r4, #32]
   2f4e4:	add	r1, r0, #1
   2f4e8:	str	r1, [r4, #20]
   2f4ec:	mov	r1, #91	; 0x5b
   2f4f0:	strb	r1, [r0]
   2f4f4:	cmp	r9, #0
   2f4f8:	beq	2f568 <flatcc_json_printer_table_vector_field@@Base+0x108>
   2f4fc:	ldr	sl, [fp, #12]
   2f500:	add	r0, r8, #4
   2f504:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2f508:	mov	r1, r0
   2f50c:	ldr	r2, [r5, #12]
   2f510:	mov	r0, r4
   2f514:	mov	r3, sl
   2f518:	bl	2f5b8 <flatcc_json_printer_table_vector_field@@Base+0x158>
   2f51c:	cmp	r9, #1
   2f520:	beq	2f568 <flatcc_json_printer_table_vector_field@@Base+0x108>
   2f524:	add	r7, r8, #8
   2f528:	rsb	r6, r9, #1
   2f52c:	mov	r8, #44	; 0x2c
   2f530:	ldr	r0, [r4, #20]
   2f534:	add	r1, r0, #1
   2f538:	str	r1, [r4, #20]
   2f53c:	strb	r8, [r0]
   2f540:	mov	r0, r7
   2f544:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2f548:	mov	r1, r0
   2f54c:	ldr	r2, [r5, #12]
   2f550:	mov	r0, r4
   2f554:	mov	r3, sl
   2f558:	bl	2f5b8 <flatcc_json_printer_table_vector_field@@Base+0x158>
   2f55c:	add	r7, r7, #4
   2f560:	adds	r6, r6, #1
   2f564:	bne	2f530 <flatcc_json_printer_table_vector_field@@Base+0xd0>
   2f568:	ldrb	r0, [r4, #25]
   2f56c:	cmp	r0, #0
   2f570:	beq	2f59c <flatcc_json_printer_table_vector_field@@Base+0x13c>
   2f574:	ldr	r0, [r4, #20]
   2f578:	add	r1, r0, #1
   2f57c:	str	r1, [r4, #20]
   2f580:	mov	r1, #10
   2f584:	strb	r1, [r0]
   2f588:	ldr	r0, [r4, #32]
   2f58c:	sub	r0, r0, #1
   2f590:	str	r0, [r4, #32]
   2f594:	mov	r0, r4
   2f598:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f59c:	ldr	r0, [r4, #20]
   2f5a0:	add	r1, r0, #1
   2f5a4:	str	r1, [r4, #20]
   2f5a8:	mov	r1, #93	; 0x5d
   2f5ac:	strb	r1, [r0]
   2f5b0:	sub	sp, fp, #28
   2f5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5b8:	push	{r4, r5, r6, sl, fp, lr}
   2f5bc:	add	fp, sp, #16
   2f5c0:	sub	sp, sp, #24
   2f5c4:	mov	r4, r0
   2f5c8:	subs	r0, r2, #1
   2f5cc:	beq	2f67c <flatcc_json_printer_table_vector_field@@Base+0x21c>
   2f5d0:	mov	r5, r3
   2f5d4:	mov	r6, r1
   2f5d8:	ldr	r1, [r4, #20]
   2f5dc:	ldr	r2, [r4, #32]
   2f5e0:	add	r2, r2, #1
   2f5e4:	str	r2, [r4, #32]
   2f5e8:	add	r2, r1, #1
   2f5ec:	str	r2, [r4, #20]
   2f5f0:	mov	r2, #123	; 0x7b
   2f5f4:	strb	r2, [r1]
   2f5f8:	str	r0, [sp, #16]
   2f5fc:	mov	r0, #0
   2f600:	str	r0, [sp, #20]
   2f604:	str	r6, [sp, #4]
   2f608:	mov	r0, r6
   2f60c:	bl	3153c <flatcc_json_printer_clear@@Base+0xed0>
   2f610:	sub	r0, r6, r0
   2f614:	str	r0, [sp, #8]
   2f618:	bl	31358 <flatcc_json_printer_clear@@Base+0xcec>
   2f61c:	str	r0, [sp, #12]
   2f620:	add	r1, sp, #4
   2f624:	mov	r0, r4
   2f628:	blx	r5
   2f62c:	ldrb	r0, [r4, #25]
   2f630:	cmp	r0, #0
   2f634:	beq	2f660 <flatcc_json_printer_table_vector_field@@Base+0x200>
   2f638:	ldr	r0, [r4, #20]
   2f63c:	add	r1, r0, #1
   2f640:	str	r1, [r4, #20]
   2f644:	mov	r1, #10
   2f648:	strb	r1, [r0]
   2f64c:	ldr	r0, [r4, #32]
   2f650:	sub	r0, r0, #1
   2f654:	str	r0, [r4, #32]
   2f658:	mov	r0, r4
   2f65c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f660:	ldr	r0, [r4, #20]
   2f664:	add	r1, r0, #1
   2f668:	str	r1, [r4, #20]
   2f66c:	mov	r1, #125	; 0x7d
   2f670:	strb	r1, [r0]
   2f674:	sub	sp, fp, #16
   2f678:	pop	{r4, r5, r6, sl, fp, pc}
   2f67c:	mov	r0, r4
   2f680:	mov	r1, #2
   2f684:	bl	2f98c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2f688:	sub	sp, fp, #16
   2f68c:	pop	{r4, r5, r6, sl, fp, pc}

0002f690 <flatcc_json_printer_union_vector_field@@Base>:
   2f690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f694:	add	fp, sp, #28
   2f698:	sub	sp, sp, #132	; 0x84
   2f69c:	mov	r9, r3
   2f6a0:	mov	r7, r2
   2f6a4:	mov	r5, r1
   2f6a8:	mov	r8, r0
   2f6ac:	sub	r6, r2, #1
   2f6b0:	mov	r0, r1
   2f6b4:	mov	r1, r6
   2f6b8:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2f6bc:	mov	r4, r0
   2f6c0:	mov	r0, r5
   2f6c4:	mov	r1, r7
   2f6c8:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2f6cc:	mov	r7, r0
   2f6d0:	ldr	r0, [r5, #12]
   2f6d4:	str	r0, [sp, #16]
   2f6d8:	ldr	r0, [fp, #8]
   2f6dc:	cmp	r0, #101	; 0x65
   2f6e0:	bge	2f960 <flatcc_json_printer_union_vector_field@@Base+0x2d0>
   2f6e4:	add	sl, sp, #24
   2f6e8:	mov	r0, sl
   2f6ec:	str	r9, [sp, #8]
   2f6f0:	mov	r1, r9
   2f6f4:	ldr	r2, [fp, #8]
   2f6f8:	bl	14e60 <memcpy@plt>
   2f6fc:	ldr	r2, [fp, #8]
   2f700:	movw	r0, #29791	; 0x745f
   2f704:	movt	r0, #28793	; 0x7079
   2f708:	str	r0, [sl, r2]
   2f70c:	add	r0, sl, r2
   2f710:	mov	r1, #101	; 0x65
   2f714:	strb	r1, [r0, #4]
   2f718:	cmp	r4, #0
   2f71c:	cmpne	r7, #0
   2f720:	bne	2f72c <flatcc_json_printer_union_vector_field@@Base+0x9c>
   2f724:	sub	sp, fp, #28
   2f728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f72c:	mov	r9, r4
   2f730:	ldr	r0, [fp, #12]
   2f734:	add	r1, r2, #5
   2f738:	str	r1, [sp]
   2f73c:	str	r0, [sp, #4]
   2f740:	add	r3, sp, #24
   2f744:	mov	r0, r8
   2f748:	mov	r1, r5
   2f74c:	mov	r2, r6
   2f750:	bl	2de34 <flatcc_json_printer_utype_enum_vector_field@@Base>
   2f754:	ldr	r0, [r5, #16]
   2f758:	add	r1, r0, #1
   2f75c:	str	r1, [r5, #16]
   2f760:	cmp	r0, #0
   2f764:	ldrne	r0, [r8, #20]
   2f768:	addne	r1, r0, #1
   2f76c:	strne	r1, [r8, #20]
   2f770:	movne	r1, #44	; 0x2c
   2f774:	strbne	r1, [r0]
   2f778:	mov	r0, r7
   2f77c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2f780:	mov	r6, r0
   2f784:	mov	r0, r9
   2f788:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2f78c:	mov	r5, r0
   2f790:	mov	r0, r6
   2f794:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2f798:	mov	r4, r0
   2f79c:	mov	r0, r8
   2f7a0:	ldr	r1, [sp, #8]
   2f7a4:	ldr	r2, [fp, #8]
   2f7a8:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2f7ac:	mov	r7, r8
   2f7b0:	ldr	r0, [r7, #20]!
   2f7b4:	add	r1, r0, #1
   2f7b8:	str	r1, [r7]
   2f7bc:	ldr	r1, [r7, #12]
   2f7c0:	add	r1, r1, #1
   2f7c4:	str	r1, [r7, #12]
   2f7c8:	mov	r1, #91	; 0x5b
   2f7cc:	strb	r1, [r0]
   2f7d0:	cmp	r4, #0
   2f7d4:	beq	2f910 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2f7d8:	ldr	sl, [fp, #16]
   2f7dc:	add	r0, r5, #4
   2f7e0:	bl	2cb3c <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2f7e4:	cmp	r0, #0
   2f7e8:	beq	2f814 <flatcc_json_printer_union_vector_field@@Base+0x184>
   2f7ec:	add	r1, r6, #4
   2f7f0:	str	r1, [sp, #12]
   2f7f4:	strb	r0, [sp, #20]
   2f7f8:	add	r1, sp, #12
   2f7fc:	mov	r0, r8
   2f800:	mov	r9, sl
   2f804:	blx	sl
   2f808:	cmp	r4, #1
   2f80c:	bne	2f86c <flatcc_json_printer_union_vector_field@@Base+0x1dc>
   2f810:	b	2f910 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2f814:	mov	r9, sl
   2f818:	ldr	r0, [r7]
   2f81c:	add	r1, r0, #1
   2f820:	str	r1, [r7]
   2f824:	mov	r1, #110	; 0x6e
   2f828:	strb	r1, [r0]
   2f82c:	ldr	r0, [r7]
   2f830:	add	r1, r0, #1
   2f834:	str	r1, [r7]
   2f838:	mov	r1, #117	; 0x75
   2f83c:	strb	r1, [r0]
   2f840:	ldr	r0, [r7]
   2f844:	add	r1, r0, #1
   2f848:	str	r1, [r7]
   2f84c:	mov	r1, #108	; 0x6c
   2f850:	strb	r1, [r0]
   2f854:	ldr	r0, [r7]
   2f858:	add	r2, r0, #1
   2f85c:	str	r2, [r7]
   2f860:	strb	r1, [r0]
   2f864:	cmp	r4, #1
   2f868:	beq	2f910 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2f86c:	add	r6, r6, #8
   2f870:	add	r5, r5, #5
   2f874:	rsb	r4, r4, #1
   2f878:	mov	sl, #44	; 0x2c
   2f87c:	mov	r0, r5
   2f880:	bl	2cb3c <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2f884:	ldr	r1, [r7]
   2f888:	add	r2, r1, #1
   2f88c:	str	r2, [r7]
   2f890:	strb	sl, [r1]
   2f894:	cmp	r0, #0
   2f898:	beq	2f8b4 <flatcc_json_printer_union_vector_field@@Base+0x224>
   2f89c:	str	r6, [sp, #12]
   2f8a0:	strb	r0, [sp, #20]
   2f8a4:	mov	r0, r8
   2f8a8:	add	r1, sp, #12
   2f8ac:	blx	r9
   2f8b0:	b	2f900 <flatcc_json_printer_union_vector_field@@Base+0x270>
   2f8b4:	ldr	r0, [r7]
   2f8b8:	add	r1, r0, #1
   2f8bc:	str	r1, [r7]
   2f8c0:	mov	r1, #110	; 0x6e
   2f8c4:	strb	r1, [r0]
   2f8c8:	ldr	r0, [r7]
   2f8cc:	add	r1, r0, #1
   2f8d0:	str	r1, [r7]
   2f8d4:	mov	r1, #117	; 0x75
   2f8d8:	strb	r1, [r0]
   2f8dc:	ldr	r0, [r7]
   2f8e0:	add	r1, r0, #1
   2f8e4:	str	r1, [r7]
   2f8e8:	mov	r2, #108	; 0x6c
   2f8ec:	strb	r2, [r0]
   2f8f0:	ldr	r0, [r7]
   2f8f4:	add	r1, r0, #1
   2f8f8:	str	r1, [r7]
   2f8fc:	strb	r2, [r0]
   2f900:	add	r6, r6, #4
   2f904:	add	r5, r5, #1
   2f908:	adds	r4, r4, #1
   2f90c:	bne	2f87c <flatcc_json_printer_union_vector_field@@Base+0x1ec>
   2f910:	ldrb	r0, [r8, #25]
   2f914:	cmp	r0, #0
   2f918:	beq	2f944 <flatcc_json_printer_union_vector_field@@Base+0x2b4>
   2f91c:	ldr	r0, [r8, #20]
   2f920:	add	r1, r0, #1
   2f924:	str	r1, [r8, #20]
   2f928:	mov	r1, #10
   2f92c:	strb	r1, [r0]
   2f930:	ldr	r0, [r8, #32]
   2f934:	sub	r0, r0, #1
   2f938:	str	r0, [r8, #32]
   2f93c:	mov	r0, r8
   2f940:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2f944:	ldr	r0, [r7]
   2f948:	add	r1, r0, #1
   2f94c:	str	r1, [r7]
   2f950:	mov	r1, #93	; 0x5d
   2f954:	strb	r1, [r0]
   2f958:	sub	sp, fp, #28
   2f95c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f960:	mov	r0, r8
   2f964:	mov	r1, #1
   2f968:	bl	2f98c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2f96c:	movw	r0, #33664	; 0x8380
   2f970:	movt	r0, #3
   2f974:	movw	r1, #33691	; 0x839b
   2f978:	movt	r1, #3
   2f97c:	movw	r3, #33766	; 0x83e6
   2f980:	movt	r3, #3
   2f984:	movw	r2, #843	; 0x34b
   2f988:	bl	14f44 <__assert_fail@plt>
   2f98c:	ldr	r2, [r0, #36]	; 0x24
   2f990:	cmp	r2, #0
   2f994:	streq	r1, [r0, #36]	; 0x24
   2f998:	bx	lr

0002f99c <flatcc_json_printer_table_field@@Base>:
   2f99c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f9a0:	add	fp, sp, #24
   2f9a4:	mov	r6, r3
   2f9a8:	mov	r5, r1
   2f9ac:	mov	r4, r0
   2f9b0:	mov	r0, r1
   2f9b4:	mov	r1, r2
   2f9b8:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2f9bc:	cmp	r0, #0
   2f9c0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2f9c4:	mov	r7, r0
   2f9c8:	ldr	r8, [fp, #12]
   2f9cc:	ldr	r2, [fp, #8]
   2f9d0:	ldr	r0, [r5, #16]
   2f9d4:	add	r1, r0, #1
   2f9d8:	str	r1, [r5, #16]
   2f9dc:	cmp	r0, #0
   2f9e0:	ldrne	r0, [r4, #20]
   2f9e4:	addne	r1, r0, #1
   2f9e8:	strne	r1, [r4, #20]
   2f9ec:	movne	r1, #44	; 0x2c
   2f9f0:	strbne	r1, [r0]
   2f9f4:	mov	r0, r4
   2f9f8:	mov	r1, r6
   2f9fc:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2fa00:	mov	r0, r7
   2fa04:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2fa08:	mov	r1, r0
   2fa0c:	ldr	r2, [r5, #12]
   2fa10:	mov	r0, r4
   2fa14:	mov	r3, r8
   2fa18:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2fa1c:	b	2f5b8 <flatcc_json_printer_table_vector_field@@Base+0x158>

0002fa20 <flatcc_json_printer_union_field@@Base>:
   2fa20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fa24:	add	fp, sp, #28
   2fa28:	sub	sp, sp, #12
   2fa2c:	mov	r8, r3
   2fa30:	mov	r7, r2
   2fa34:	mov	r5, r1
   2fa38:	mov	r4, r0
   2fa3c:	sub	r1, r2, #1
   2fa40:	mov	r0, r5
   2fa44:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2fa48:	mov	r6, r0
   2fa4c:	mov	r0, r5
   2fa50:	mov	r1, r7
   2fa54:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2fa58:	cmp	r6, #0
   2fa5c:	movne	r7, r0
   2fa60:	cmpne	r0, #0
   2fa64:	bne	2fa70 <flatcc_json_printer_union_field@@Base+0x50>
   2fa68:	sub	sp, fp, #28
   2fa6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa70:	mov	r0, r6
   2fa74:	bl	2cb3c <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2fa78:	mov	r6, r0
   2fa7c:	ldr	r0, [r5, #16]
   2fa80:	add	r1, r0, #1
   2fa84:	str	r1, [r5, #16]
   2fa88:	cmp	r0, #0
   2fa8c:	ldrne	r0, [r4, #20]
   2fa90:	addne	r1, r0, #1
   2fa94:	strne	r1, [r4, #20]
   2fa98:	movne	r1, #44	; 0x2c
   2fa9c:	strbne	r1, [r0]
   2faa0:	ldr	r9, [fp, #8]
   2faa4:	ldrb	r0, [r4, #25]
   2faa8:	cmp	r0, #0
   2faac:	beq	2fad0 <flatcc_json_printer_union_field@@Base+0xb0>
   2fab0:	ldr	r0, [r4, #20]
   2fab4:	add	r1, r0, #1
   2fab8:	str	r1, [r4, #20]
   2fabc:	mov	r1, #10
   2fac0:	strb	r1, [r0]
   2fac4:	mov	r0, r4
   2fac8:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2facc:	b	2fad8 <flatcc_json_printer_union_field@@Base+0xb8>
   2fad0:	mov	r0, r4
   2fad4:	bl	29e60 <flatcc_json_printer_nl@@Base+0x18>
   2fad8:	ldr	r0, [r4, #20]
   2fadc:	mov	r1, #34	; 0x22
   2fae0:	strb	r1, [r0]
   2fae4:	ldrb	r1, [r4, #26]
   2fae8:	ldr	r2, [r4, #16]
   2faec:	ldr	r0, [r4, #20]
   2faf0:	cmp	r1, #0
   2faf4:	addeq	r0, r0, #1
   2faf8:	str	r0, [r4, #20]
   2fafc:	add	r1, r0, r9
   2fb00:	cmp	r1, r2
   2fb04:	bcs	2fb24 <flatcc_json_printer_union_field@@Base+0x104>
   2fb08:	mov	r1, r8
   2fb0c:	mov	r2, r9
   2fb10:	bl	14e60 <memcpy@plt>
   2fb14:	ldr	r0, [r4, #20]
   2fb18:	add	r0, r0, r9
   2fb1c:	str	r0, [r4, #20]
   2fb20:	b	2fb34 <flatcc_json_printer_union_field@@Base+0x114>
   2fb24:	mov	r0, r4
   2fb28:	mov	r1, r8
   2fb2c:	mov	r2, r9
   2fb30:	bl	29dfc <flatcc_json_printer_write@@Base+0x4>
   2fb34:	movw	r1, #33968	; 0x84b0
   2fb38:	movt	r1, #3
   2fb3c:	mov	r0, r4
   2fb40:	mov	r2, #5
   2fb44:	bl	29dfc <flatcc_json_printer_write@@Base+0x4>
   2fb48:	ldr	r0, [r4, #20]
   2fb4c:	mov	r1, #34	; 0x22
   2fb50:	strb	r1, [r0]
   2fb54:	ldrb	r0, [r4, #26]
   2fb58:	ldr	r1, [r4, #20]
   2fb5c:	cmp	r0, #0
   2fb60:	addeq	r1, r1, #1
   2fb64:	add	r0, r1, #1
   2fb68:	str	r0, [r4, #20]
   2fb6c:	mov	r0, #58	; 0x3a
   2fb70:	strb	r0, [r1]
   2fb74:	ldr	r0, [r4, #20]
   2fb78:	mov	r1, #32
   2fb7c:	strb	r1, [r0]
   2fb80:	ldrb	r0, [r4, #25]
   2fb84:	ldr	r1, [r4, #20]
   2fb88:	cmp	r0, #0
   2fb8c:	addne	r1, r1, #1
   2fb90:	str	r1, [r4, #20]
   2fb94:	ldrb	r0, [r4, #27]
   2fb98:	cmp	r0, #0
   2fb9c:	beq	2fbc0 <flatcc_json_printer_union_field@@Base+0x1a0>
   2fba0:	mov	r0, r6
   2fba4:	bl	29f30 <flatcc_json_printer_uint8@@Base+0x2c>
   2fba8:	ldr	r1, [r4, #20]
   2fbac:	add	r0, r1, r0
   2fbb0:	str	r0, [r4, #20]
   2fbb4:	cmp	r6, #0
   2fbb8:	bne	2fbd8 <flatcc_json_printer_union_field@@Base+0x1b8>
   2fbbc:	b	2fa68 <flatcc_json_printer_union_field@@Base+0x48>
   2fbc0:	ldr	r2, [fp, #12]
   2fbc4:	mov	r0, r4
   2fbc8:	mov	r1, r6
   2fbcc:	blx	r2
   2fbd0:	cmp	r6, #0
   2fbd4:	beq	2fa68 <flatcc_json_printer_union_field@@Base+0x48>
   2fbd8:	ldr	sl, [fp, #16]
   2fbdc:	ldr	r0, [r4, #20]
   2fbe0:	add	r1, r0, #1
   2fbe4:	str	r1, [r4, #20]
   2fbe8:	mov	r1, #44	; 0x2c
   2fbec:	strb	r1, [r0]
   2fbf0:	mov	r0, r4
   2fbf4:	mov	r1, r8
   2fbf8:	mov	r2, r9
   2fbfc:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2fc00:	ldr	r0, [r5, #12]
   2fc04:	strb	r6, [sp, #8]
   2fc08:	str	r7, [sp]
   2fc0c:	str	r0, [sp, #4]
   2fc10:	mov	r1, sp
   2fc14:	mov	r0, r4
   2fc18:	blx	sl
   2fc1c:	sub	sp, fp, #28
   2fc20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002fc24 <flatcc_json_printer_union_table@@Base>:
   2fc24:	push	{r4, r5, r6, sl, fp, lr}
   2fc28:	add	fp, sp, #16
   2fc2c:	mov	r4, r2
   2fc30:	mov	r5, r1
   2fc34:	mov	r6, r0
   2fc38:	ldr	r0, [r1]
   2fc3c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2fc40:	mov	r1, r0
   2fc44:	ldr	r2, [r5, #4]
   2fc48:	mov	r0, r6
   2fc4c:	mov	r3, r4
   2fc50:	pop	{r4, r5, r6, sl, fp, lr}
   2fc54:	b	2f5b8 <flatcc_json_printer_table_vector_field@@Base+0x158>

0002fc58 <flatcc_json_printer_union_struct@@Base>:
   2fc58:	push	{r4, r5, fp, lr}
   2fc5c:	add	fp, sp, #8
   2fc60:	mov	r5, r2
   2fc64:	mov	r4, r0
   2fc68:	ldr	r0, [r0, #20]
   2fc6c:	ldr	r2, [r4, #32]
   2fc70:	add	r2, r2, #1
   2fc74:	str	r2, [r4, #32]
   2fc78:	add	r2, r0, #1
   2fc7c:	str	r2, [r4, #20]
   2fc80:	mov	r2, #123	; 0x7b
   2fc84:	strb	r2, [r0]
   2fc88:	ldr	r0, [r1]
   2fc8c:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2fc90:	mov	r1, r0
   2fc94:	mov	r0, r4
   2fc98:	blx	r5
   2fc9c:	ldrb	r0, [r4, #25]
   2fca0:	cmp	r0, #0
   2fca4:	beq	2fcd0 <flatcc_json_printer_union_struct@@Base+0x78>
   2fca8:	ldr	r0, [r4, #20]
   2fcac:	add	r1, r0, #1
   2fcb0:	str	r1, [r4, #20]
   2fcb4:	mov	r1, #10
   2fcb8:	strb	r1, [r0]
   2fcbc:	ldr	r0, [r4, #32]
   2fcc0:	sub	r0, r0, #1
   2fcc4:	str	r0, [r4, #32]
   2fcc8:	mov	r0, r4
   2fccc:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2fcd0:	ldr	r0, [r4, #20]
   2fcd4:	add	r1, r0, #1
   2fcd8:	str	r1, [r4, #20]
   2fcdc:	mov	r1, #125	; 0x7d
   2fce0:	strb	r1, [r0]
   2fce4:	pop	{r4, r5, fp, pc}

0002fce8 <flatcc_json_printer_union_string@@Base>:
   2fce8:	push	{r4, sl, fp, lr}
   2fcec:	add	fp, sp, #8
   2fcf0:	mov	r4, r0
   2fcf4:	ldr	r0, [r1]
   2fcf8:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2fcfc:	mov	r1, r0
   2fd00:	mov	r0, r4
   2fd04:	pop	{r4, sl, fp, lr}
   2fd08:	b	2ade4 <flatcc_json_printer_string_field@@Base+0x148>

0002fd0c <flatcc_json_printer_embedded_struct_field@@Base>:
   2fd0c:	push	{r4, r5, r6, r7, fp, lr}
   2fd10:	add	fp, sp, #16
   2fd14:	mov	r5, r3
   2fd18:	mov	r6, r2
   2fd1c:	mov	r3, r1
   2fd20:	mov	r4, r0
   2fd24:	add	r7, fp, #8
   2fd28:	ldm	r7, {r1, r2, r7}
   2fd2c:	cmp	r3, #0
   2fd30:	ldrne	r0, [r4, #20]
   2fd34:	addne	r3, r0, #1
   2fd38:	strne	r3, [r4, #20]
   2fd3c:	movne	r3, #44	; 0x2c
   2fd40:	strbne	r3, [r0]
   2fd44:	mov	r0, r4
   2fd48:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2fd4c:	ldr	r0, [r4, #20]
   2fd50:	ldr	r1, [r4, #32]
   2fd54:	add	r1, r1, #1
   2fd58:	str	r1, [r4, #32]
   2fd5c:	add	r1, r0, #1
   2fd60:	str	r1, [r4, #20]
   2fd64:	mov	r1, #123	; 0x7b
   2fd68:	strb	r1, [r0]
   2fd6c:	add	r1, r6, r5
   2fd70:	mov	r0, r4
   2fd74:	blx	r7
   2fd78:	ldrb	r0, [r4, #25]
   2fd7c:	cmp	r0, #0
   2fd80:	beq	2fdac <flatcc_json_printer_embedded_struct_field@@Base+0xa0>
   2fd84:	ldr	r0, [r4, #20]
   2fd88:	add	r1, r0, #1
   2fd8c:	str	r1, [r4, #20]
   2fd90:	mov	r1, #10
   2fd94:	strb	r1, [r0]
   2fd98:	ldr	r0, [r4, #32]
   2fd9c:	sub	r0, r0, #1
   2fda0:	str	r0, [r4, #32]
   2fda4:	mov	r0, r4
   2fda8:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2fdac:	ldr	r0, [r4, #20]
   2fdb0:	add	r1, r0, #1
   2fdb4:	str	r1, [r4, #20]
   2fdb8:	mov	r1, #125	; 0x7d
   2fdbc:	strb	r1, [r0]
   2fdc0:	pop	{r4, r5, r6, r7, fp, pc}

0002fdc4 <flatcc_json_printer_struct_field@@Base>:
   2fdc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2fdc8:	add	fp, sp, #24
   2fdcc:	mov	r6, r3
   2fdd0:	mov	r7, r1
   2fdd4:	mov	r4, r0
   2fdd8:	mov	r0, r1
   2fddc:	mov	r1, r2
   2fde0:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   2fde4:	cmp	r0, #0
   2fde8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2fdec:	mov	r5, r0
   2fdf0:	ldr	r8, [fp, #12]
   2fdf4:	ldr	r2, [fp, #8]
   2fdf8:	ldr	r0, [r7, #16]
   2fdfc:	add	r1, r0, #1
   2fe00:	str	r1, [r7, #16]
   2fe04:	cmp	r0, #0
   2fe08:	ldrne	r0, [r4, #20]
   2fe0c:	addne	r1, r0, #1
   2fe10:	strne	r1, [r4, #20]
   2fe14:	movne	r1, #44	; 0x2c
   2fe18:	strbne	r1, [r0]
   2fe1c:	mov	r0, r4
   2fe20:	mov	r1, r6
   2fe24:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   2fe28:	ldr	r0, [r4, #20]
   2fe2c:	ldr	r1, [r4, #32]
   2fe30:	add	r1, r1, #1
   2fe34:	str	r1, [r4, #32]
   2fe38:	add	r1, r0, #1
   2fe3c:	str	r1, [r4, #20]
   2fe40:	mov	r1, #123	; 0x7b
   2fe44:	strb	r1, [r0]
   2fe48:	mov	r0, r4
   2fe4c:	mov	r1, r5
   2fe50:	blx	r8
   2fe54:	ldrb	r0, [r4, #25]
   2fe58:	cmp	r0, #0
   2fe5c:	beq	2fe88 <flatcc_json_printer_struct_field@@Base+0xc4>
   2fe60:	ldr	r0, [r4, #20]
   2fe64:	add	r1, r0, #1
   2fe68:	str	r1, [r4, #20]
   2fe6c:	mov	r1, #10
   2fe70:	strb	r1, [r0]
   2fe74:	ldr	r0, [r4, #32]
   2fe78:	sub	r0, r0, #1
   2fe7c:	str	r0, [r4, #32]
   2fe80:	mov	r0, r4
   2fe84:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2fe88:	ldr	r0, [r4, #20]
   2fe8c:	add	r1, r0, #1
   2fe90:	str	r1, [r4, #20]
   2fe94:	mov	r1, #125	; 0x7d
   2fe98:	strb	r1, [r0]
   2fe9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002fea0 <flatcc_json_printer_struct_as_root@@Base>:
   2fea0:	push	{r4, r5, fp, lr}
   2fea4:	add	fp, sp, #8
   2fea8:	mov	r5, r1
   2feac:	mov	r4, r0
   2feb0:	bl	2ffa0 <flatcc_json_printer_struct_as_root@@Base+0x100>
   2feb4:	ldr	r0, [r4, #20]
   2feb8:	ldr	r1, [r4, #32]
   2febc:	add	r1, r1, #1
   2fec0:	str	r1, [r4, #32]
   2fec4:	add	r1, r0, #1
   2fec8:	str	r1, [r4, #20]
   2fecc:	mov	r1, #123	; 0x7b
   2fed0:	strb	r1, [r0]
   2fed4:	mov	r0, r5
   2fed8:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   2fedc:	mov	r1, r0
   2fee0:	ldr	r2, [fp, #8]
   2fee4:	mov	r0, r4
   2fee8:	blx	r2
   2feec:	ldrb	r0, [r4, #25]
   2fef0:	cmp	r0, #0
   2fef4:	beq	2ff20 <flatcc_json_printer_struct_as_root@@Base+0x80>
   2fef8:	ldr	r0, [r4, #20]
   2fefc:	add	r1, r0, #1
   2ff00:	str	r1, [r4, #20]
   2ff04:	mov	r1, #10
   2ff08:	strb	r1, [r0]
   2ff0c:	ldr	r0, [r4, #32]
   2ff10:	sub	r0, r0, #1
   2ff14:	str	r0, [r4, #32]
   2ff18:	mov	r0, r4
   2ff1c:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   2ff20:	ldr	r0, [r4, #20]
   2ff24:	add	r1, r0, #1
   2ff28:	str	r1, [r4, #20]
   2ff2c:	mov	r1, #125	; 0x7d
   2ff30:	strb	r1, [r0]
   2ff34:	ldrb	r0, [r4, #25]
   2ff38:	cmp	r0, #0
   2ff3c:	beq	2ff60 <flatcc_json_printer_struct_as_root@@Base+0xc0>
   2ff40:	ldr	r0, [r4, #32]
   2ff44:	cmp	r0, #0
   2ff48:	bne	2ff60 <flatcc_json_printer_struct_as_root@@Base+0xc0>
   2ff4c:	ldr	r0, [r4, #20]
   2ff50:	add	r1, r0, #1
   2ff54:	str	r1, [r4, #20]
   2ff58:	mov	r1, #10
   2ff5c:	strb	r1, [r0]
   2ff60:	ldr	r2, [r4, #44]	; 0x2c
   2ff64:	mov	r0, r4
   2ff68:	mov	r1, #1
   2ff6c:	blx	r2
   2ff70:	mov	r0, r4
   2ff74:	bl	30064 <flatcc_json_printer_struct_as_root@@Base+0x1c4>
   2ff78:	mov	r1, r0
   2ff7c:	mvn	r0, #0
   2ff80:	cmp	r1, #0
   2ff84:	popne	{r4, r5, fp, pc}
   2ff88:	ldr	r0, [r4]
   2ff8c:	ldr	r1, [r4, #12]
   2ff90:	ldr	r2, [r4, #20]
   2ff94:	add	r1, r2, r1
   2ff98:	sub	r0, r1, r0
   2ff9c:	pop	{r4, r5, fp, pc}
   2ffa0:	push	{r4, r5, r6, sl, fp, lr}
   2ffa4:	add	fp, sp, #16
   2ffa8:	sub	sp, sp, #8
   2ffac:	mov	r4, r0
   2ffb0:	mov	r0, #0
   2ffb4:	str	r0, [sp, #4]
   2ffb8:	cmp	r1, #0
   2ffbc:	cmpne	r2, #7
   2ffc0:	bhi	2fff0 <flatcc_json_printer_struct_as_root@@Base+0x150>
   2ffc4:	mov	r0, r4
   2ffc8:	mov	r1, #1
   2ffcc:	bl	2f98c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2ffd0:	movw	r0, #34835	; 0x8813
   2ffd4:	movt	r0, #3
   2ffd8:	movw	r1, #33691	; 0x839b
   2ffdc:	movt	r1, #3
   2ffe0:	movw	r3, #34866	; 0x8832
   2ffe4:	movt	r3, #3
   2ffe8:	movw	r2, #1019	; 0x3fb
   2ffec:	bl	14f44 <__assert_fail@plt>
   2fff0:	cmp	r3, #0
   2fff4:	beq	30030 <flatcc_json_printer_struct_as_root@@Base+0x190>
   2fff8:	mov	r5, r1
   2fffc:	add	r0, sp, #4
   30000:	mov	r1, r3
   30004:	mov	r2, #4
   30008:	bl	14efc <strncpy@plt>
   3000c:	ldr	r6, [sp, #4]
   30010:	mov	r0, r6
   30014:	bl	31548 <flatcc_json_printer_clear@@Base+0xedc>
   30018:	str	r6, [sp, #4]
   3001c:	add	r0, r5, #4
   30020:	bl	3154c <flatcc_json_printer_clear@@Base+0xee0>
   30024:	cmp	r6, #0
   30028:	cmpne	r0, r6
   3002c:	bne	30038 <flatcc_json_printer_struct_as_root@@Base+0x198>
   30030:	sub	sp, fp, #16
   30034:	pop	{r4, r5, r6, sl, fp, pc}
   30038:	mov	r0, r4
   3003c:	mov	r1, #1
   30040:	bl	2f98c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   30044:	movw	r0, #34945	; 0x8881
   30048:	movt	r0, #3
   3004c:	movw	r1, #33691	; 0x839b
   30050:	movt	r1, #3
   30054:	movw	r3, #34866	; 0x8832
   30058:	movt	r3, #3
   3005c:	movw	r2, #1028	; 0x404
   30060:	bl	14f44 <__assert_fail@plt>
   30064:	ldr	r0, [r0, #36]	; 0x24
   30068:	bx	lr

0003006c <flatcc_json_printer_table_as_root@@Base>:
   3006c:	push	{r4, r5, fp, lr}
   30070:	add	fp, sp, #8
   30074:	mov	r5, r1
   30078:	mov	r4, r0
   3007c:	bl	2ffa0 <flatcc_json_printer_struct_as_root@@Base+0x100>
   30080:	mov	r0, r5
   30084:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   30088:	mov	r1, r0
   3008c:	ldr	r3, [fp, #8]
   30090:	mov	r0, r4
   30094:	mov	r2, #100	; 0x64
   30098:	bl	2f5b8 <flatcc_json_printer_table_vector_field@@Base+0x158>
   3009c:	ldrb	r0, [r4, #25]
   300a0:	cmp	r0, #0
   300a4:	beq	300c8 <flatcc_json_printer_table_as_root@@Base+0x5c>
   300a8:	ldr	r0, [r4, #32]
   300ac:	cmp	r0, #0
   300b0:	bne	300c8 <flatcc_json_printer_table_as_root@@Base+0x5c>
   300b4:	ldr	r0, [r4, #20]
   300b8:	add	r1, r0, #1
   300bc:	str	r1, [r4, #20]
   300c0:	mov	r1, #10
   300c4:	strb	r1, [r0]
   300c8:	ldr	r2, [r4, #44]	; 0x2c
   300cc:	mov	r0, r4
   300d0:	mov	r1, #1
   300d4:	blx	r2
   300d8:	mov	r0, r4
   300dc:	bl	30064 <flatcc_json_printer_struct_as_root@@Base+0x1c4>
   300e0:	mov	r1, r0
   300e4:	mvn	r0, #0
   300e8:	cmp	r1, #0
   300ec:	popne	{r4, r5, fp, pc}
   300f0:	ldr	r0, [r4]
   300f4:	ldr	r1, [r4, #12]
   300f8:	ldr	r2, [r4, #20]
   300fc:	add	r1, r2, r1
   30100:	sub	r0, r1, r0
   30104:	pop	{r4, r5, fp, pc}

00030108 <flatcc_json_printer_struct_as_nested_root@@Base>:
   30108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3010c:	add	fp, sp, #28
   30110:	sub	sp, sp, #4
   30114:	mov	r5, r3
   30118:	mov	r7, r1
   3011c:	mov	r4, r0
   30120:	mov	r0, r1
   30124:	mov	r1, r2
   30128:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   3012c:	cmp	r0, #0
   30130:	beq	30214 <flatcc_json_printer_struct_as_nested_root@@Base+0x10c>
   30134:	mov	r6, r0
   30138:	add	sl, fp, #8
   3013c:	ldm	sl, {r8, r9, sl}
   30140:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   30144:	add	r6, r0, r6
   30148:	mov	r0, r6
   3014c:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   30150:	mov	r2, r0
   30154:	mov	r0, r4
   30158:	mov	r1, r6
   3015c:	mov	r3, r9
   30160:	bl	2ffa0 <flatcc_json_printer_struct_as_root@@Base+0x100>
   30164:	ldr	r0, [r7, #16]
   30168:	add	r1, r0, #1
   3016c:	str	r1, [r7, #16]
   30170:	cmp	r0, #0
   30174:	ldrne	r0, [r4, #20]
   30178:	addne	r1, r0, #1
   3017c:	strne	r1, [r4, #20]
   30180:	movne	r1, #44	; 0x2c
   30184:	strbne	r1, [r0]
   30188:	mov	r0, r4
   3018c:	mov	r1, r5
   30190:	mov	r2, r8
   30194:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   30198:	ldr	r0, [r4, #20]
   3019c:	ldr	r1, [r4, #32]
   301a0:	add	r1, r1, #1
   301a4:	str	r1, [r4, #32]
   301a8:	add	r1, r0, #1
   301ac:	str	r1, [r4, #20]
   301b0:	mov	r1, #123	; 0x7b
   301b4:	strb	r1, [r0]
   301b8:	mov	r0, r6
   301bc:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   301c0:	mov	r1, r0
   301c4:	mov	r0, r4
   301c8:	blx	sl
   301cc:	ldrb	r0, [r4, #25]
   301d0:	cmp	r0, #0
   301d4:	beq	30200 <flatcc_json_printer_struct_as_nested_root@@Base+0xf8>
   301d8:	ldr	r0, [r4, #20]
   301dc:	add	r1, r0, #1
   301e0:	str	r1, [r4, #20]
   301e4:	mov	r1, #10
   301e8:	strb	r1, [r0]
   301ec:	ldr	r0, [r4, #32]
   301f0:	sub	r0, r0, #1
   301f4:	str	r0, [r4, #32]
   301f8:	mov	r0, r4
   301fc:	bl	29e94 <flatcc_json_printer_indent@@Base+0x4>
   30200:	ldr	r0, [r4, #20]
   30204:	add	r1, r0, #1
   30208:	str	r1, [r4, #20]
   3020c:	mov	r1, #125	; 0x7d
   30210:	strb	r1, [r0]
   30214:	sub	sp, fp, #28
   30218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003021c <flatcc_json_printer_table_as_nested_root@@Base>:
   3021c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30220:	add	fp, sp, #28
   30224:	sub	sp, sp, #4
   30228:	mov	sl, r3
   3022c:	mov	r5, r1
   30230:	mov	r4, r0
   30234:	mov	r0, r1
   30238:	mov	r1, r2
   3023c:	bl	2ad14 <flatcc_json_printer_string_field@@Base+0x78>
   30240:	cmp	r0, #0
   30244:	subeq	sp, fp, #28
   30248:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3024c:	mov	r7, r0
   30250:	ldr	r8, [fp, #16]
   30254:	ldr	r6, [fp, #12]
   30258:	ldr	r9, [fp, #8]
   3025c:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   30260:	add	r7, r0, r7
   30264:	mov	r0, r7
   30268:	bl	2cb34 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   3026c:	mov	r2, r0
   30270:	add	r7, r7, #4
   30274:	mov	r0, r4
   30278:	mov	r1, r7
   3027c:	mov	r3, r6
   30280:	bl	2ffa0 <flatcc_json_printer_struct_as_root@@Base+0x100>
   30284:	ldr	r0, [r5, #16]
   30288:	add	r1, r0, #1
   3028c:	str	r1, [r5, #16]
   30290:	cmp	r0, #0
   30294:	ldrne	r0, [r4, #20]
   30298:	addne	r1, r0, #1
   3029c:	strne	r1, [r4, #20]
   302a0:	movne	r1, #44	; 0x2c
   302a4:	strbne	r1, [r0]
   302a8:	mov	r0, r4
   302ac:	mov	r1, sl
   302b0:	mov	r2, r9
   302b4:	bl	2ad54 <flatcc_json_printer_string_field@@Base+0xb8>
   302b8:	mov	r0, r7
   302bc:	bl	2ae10 <flatcc_json_printer_string_field@@Base+0x174>
   302c0:	mov	r1, r0
   302c4:	ldr	r2, [r5, #12]
   302c8:	mov	r0, r4
   302cc:	mov	r3, r8
   302d0:	sub	sp, fp, #28
   302d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   302d8:	b	2f5b8 <flatcc_json_printer_table_vector_field@@Base+0x158>

000302dc <flatcc_json_printer_init@@Base>:
   302dc:	push	{r4, r5, r6, sl, fp, lr}
   302e0:	add	fp, sp, #16
   302e4:	mov	r5, r0
   302e8:	mov	r4, #0
   302ec:	vmov.i32	q8, #0	; 0x00000000
   302f0:	str	r4, [r0, #32]
   302f4:	mov	r0, #36	; 0x24
   302f8:	mov	r2, r5
   302fc:	vst1.32	{d16-d17}, [r2], r0
   30300:	str	r4, [r2]
   30304:	add	r0, r5, #16
   30308:	vst1.32	{d16-d17}, [r0]
   3030c:	movw	r0, #37708	; 0x934c
   30310:	movt	r0, #4
   30314:	ldr	r0, [r0]
   30318:	movw	r2, #892	; 0x37c
   3031c:	movt	r2, #3
   30320:	cmp	r1, #0
   30324:	movne	r0, r1
   30328:	str	r0, [r5, #40]	; 0x28
   3032c:	str	r2, [r5, #44]	; 0x2c
   30330:	movw	r6, #16448	; 0x4040
   30334:	movw	r0, #16448	; 0x4040
   30338:	bl	14ea8 <malloc@plt>
   3033c:	str	r0, [r5]
   30340:	cmp	r0, #0
   30344:	mvneq	r4, #0
   30348:	moveq	r0, r4
   3034c:	popeq	{r4, r5, r6, sl, fp, pc}
   30350:	mov	r0, #1
   30354:	strb	r0, [r5, #24]
   30358:	mov	r0, #16384	; 0x4000
   3035c:	str	r6, [r5, #4]
   30360:	str	r0, [r5, #8]
   30364:	ldr	r0, [r5]
   30368:	add	r1, r0, #16384	; 0x4000
   3036c:	str	r1, [r5, #16]
   30370:	str	r0, [r5, #20]
   30374:	mov	r0, r4
   30378:	pop	{r4, r5, r6, sl, fp, pc}
   3037c:	push	{r4, r5, r6, sl, fp, lr}
   30380:	add	fp, sp, #16
   30384:	mov	r4, r0
   30388:	cmp	r1, #0
   3038c:	bne	303a0 <flatcc_json_printer_init@@Base+0xc4>
   30390:	ldr	r5, [r4, #16]
   30394:	ldr	r6, [r4, #20]
   30398:	cmp	r6, r5
   3039c:	bcs	303c4 <flatcc_json_printer_init@@Base+0xe8>
   303a0:	ldr	r0, [r4]
   303a4:	ldr	r1, [r4, #20]
   303a8:	ldr	r3, [r4, #40]	; 0x28
   303ac:	sub	r5, r1, r0
   303b0:	mov	r1, r5
   303b4:	mov	r2, #1
   303b8:	bl	14e9c <fwrite@plt>
   303bc:	ldr	r0, [r4]
   303c0:	b	303fc <flatcc_json_printer_init@@Base+0x120>
   303c4:	ldr	r0, [r4]
   303c8:	ldr	r1, [r4, #8]
   303cc:	ldr	r3, [r4, #40]	; 0x28
   303d0:	mov	r2, #1
   303d4:	bl	14e9c <fwrite@plt>
   303d8:	sub	r6, r6, r5
   303dc:	ldr	r0, [r4]
   303e0:	ldr	r1, [r4, #8]
   303e4:	add	r1, r0, r1
   303e8:	mov	r2, r6
   303ec:	bl	14e60 <memcpy@plt>
   303f0:	ldr	r0, [r4]
   303f4:	ldr	r5, [r4, #8]
   303f8:	add	r0, r0, r6
   303fc:	str	r0, [r4, #20]
   30400:	ldr	r0, [r4, #12]
   30404:	ldr	r1, [r4, #20]
   30408:	add	r0, r0, r5
   3040c:	str	r0, [r4, #12]
   30410:	mov	r0, #0
   30414:	strb	r0, [r1]
   30418:	pop	{r4, r5, r6, sl, fp, pc}

0003041c <flatcc_json_printer_init_buffer@@Base>:
   3041c:	cmp	r2, #63	; 0x3f
   30420:	bls	30460 <flatcc_json_printer_init_buffer@@Base+0x44>
   30424:	vmov.i32	q8, #0	; 0x00000000
   30428:	add	r3, r0, #12
   3042c:	vst1.32	{d16-d17}, [r3]
   30430:	movw	r3, #1160	; 0x488
   30434:	movt	r3, #3
   30438:	str	r3, [r0, #44]	; 0x2c
   3043c:	add	r3, r0, #28
   30440:	vst1.32	{d16-d17}, [r3]
   30444:	sub	r3, r2, #64	; 0x40
   30448:	stm	r0, {r1, r2, r3}
   3044c:	add	r2, r1, r3
   30450:	str	r2, [r0, #16]
   30454:	str	r1, [r0, #20]
   30458:	mov	r0, #0
   3045c:	bx	lr
   30460:	push	{fp, lr}
   30464:	mov	fp, sp
   30468:	movw	r0, #33974	; 0x84b6
   3046c:	movt	r0, #3
   30470:	movw	r1, #33691	; 0x839b
   30474:	movt	r1, #3
   30478:	movw	r3, #34015	; 0x84df
   3047c:	movt	r3, #3
   30480:	movw	r2, #1165	; 0x48d
   30484:	bl	14f44 <__assert_fail@plt>
   30488:	push	{r4, sl, fp, lr}
   3048c:	add	fp, sp, #8
   30490:	mov	r4, r0
   30494:	ldr	r0, [r0, #16]
   30498:	ldr	r1, [r4, #20]
   3049c:	cmp	r1, r0
   304a0:	bcc	304cc <flatcc_json_printer_init_buffer@@Base+0xb0>
   304a4:	mov	r0, r4
   304a8:	mov	r1, #3
   304ac:	bl	2f98c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   304b0:	ldr	r0, [r4]
   304b4:	ldr	r1, [r4, #12]
   304b8:	ldr	r2, [r4, #20]
   304bc:	str	r0, [r4, #20]
   304c0:	sub	r0, r2, r0
   304c4:	add	r0, r0, r1
   304c8:	str	r0, [r4, #12]
   304cc:	ldr	r0, [r4, #20]
   304d0:	mov	r1, #0
   304d4:	strb	r1, [r0]
   304d8:	pop	{r4, sl, fp, pc}

000304dc <flatcc_json_printer_init_dynamic_buffer@@Base>:
   304dc:	push	{r4, r5, fp, lr}
   304e0:	add	fp, sp, #8
   304e4:	mov	r5, r1
   304e8:	mov	r4, r0
   304ec:	vmov.i32	q8, #0	; 0x00000000
   304f0:	add	r0, r0, #28
   304f4:	vst1.32	{d16-d17}, [r0]
   304f8:	add	r0, r4, #12
   304fc:	vst1.32	{d16-d17}, [r0]
   30500:	cmp	r1, #0
   30504:	movweq	r5, #4096	; 0x1000
   30508:	cmp	r5, #64	; 0x40
   3050c:	movls	r5, #64	; 0x40
   30510:	mov	r0, r5
   30514:	bl	14ea8 <malloc@plt>
   30518:	mov	r1, r0
   3051c:	mov	r0, #1
   30520:	strb	r0, [r4, #24]
   30524:	sub	r0, r5, #64	; 0x40
   30528:	stm	r4, {r1, r5}
   3052c:	str	r0, [r4, #8]
   30530:	movw	r2, #1384	; 0x568
   30534:	movt	r2, #3
   30538:	str	r2, [r4, #44]	; 0x2c
   3053c:	add	r0, r1, r0
   30540:	str	r0, [r4, #16]
   30544:	str	r1, [r4, #20]
   30548:	mov	r0, #0
   3054c:	cmp	r1, #0
   30550:	popne	{r4, r5, fp, pc}
   30554:	mov	r0, r4
   30558:	mov	r1, #3
   3055c:	bl	2f98c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   30560:	mvn	r0, #0
   30564:	pop	{r4, r5, fp, pc}
   30568:	push	{r4, r5, fp, lr}
   3056c:	add	fp, sp, #8
   30570:	mov	r4, r0
   30574:	ldr	r0, [r0]
   30578:	ldr	r5, [r4, #20]
   3057c:	mov	r1, #0
   30580:	strb	r1, [r5], -r0
   30584:	ldr	r0, [r4, #16]
   30588:	ldr	r1, [r4, #20]
   3058c:	cmp	r1, r0
   30590:	popcc	{r4, r5, fp, pc}
   30594:	ldm	r4, {r0, r1}
   30598:	lsl	r1, r1, #1
   3059c:	bl	14e90 <realloc@plt>
   305a0:	cmp	r0, #0
   305a4:	beq	305d8 <flatcc_json_printer_init_dynamic_buffer@@Base+0xfc>
   305a8:	str	r0, [r4]
   305ac:	add	r1, r0, r5
   305b0:	ldr	r2, [r4, #4]
   305b4:	mvn	r3, #63	; 0x3f
   305b8:	add	r3, r3, r2, lsl #1
   305bc:	str	r3, [r4, #8]
   305c0:	lsl	r2, r2, #1
   305c4:	str	r2, [r4, #4]
   305c8:	add	r0, r0, r3
   305cc:	str	r0, [r4, #16]
   305d0:	str	r1, [r4, #20]
   305d4:	b	305f8 <flatcc_json_printer_init_dynamic_buffer@@Base+0x11c>
   305d8:	mov	r0, r4
   305dc:	mov	r1, #3
   305e0:	bl	2f98c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   305e4:	ldr	r0, [r4]
   305e8:	ldr	r1, [r4, #12]
   305ec:	str	r0, [r4, #20]
   305f0:	add	r0, r1, r5
   305f4:	str	r0, [r4, #12]
   305f8:	ldr	r0, [r4, #20]
   305fc:	mov	r1, #0
   30600:	strb	r1, [r0]
   30604:	pop	{r4, r5, fp, pc}

00030608 <flatcc_json_printer_get_buffer@@Base>:
   30608:	push	{r4, r5, fp, lr}
   3060c:	add	fp, sp, #8
   30610:	mov	r5, r1
   30614:	mov	r4, r0
   30618:	ldr	r2, [r0, #44]	; 0x2c
   3061c:	mov	r1, #0
   30620:	blx	r2
   30624:	cmp	r5, #0
   30628:	ldrne	r0, [r4]
   3062c:	ldrne	r1, [r4, #20]
   30630:	subne	r0, r1, r0
   30634:	strne	r0, [r5]
   30638:	ldr	r0, [r4]
   3063c:	pop	{r4, r5, fp, pc}

00030640 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   30640:	push	{r4, sl, fp, lr}
   30644:	add	fp, sp, #8
   30648:	mov	r4, r0
   3064c:	bl	30608 <flatcc_json_printer_get_buffer@@Base>
   30650:	vmov.i32	q8, #0	; 0x00000000
   30654:	add	r1, r4, #16
   30658:	vst1.32	{d16-d17}, [r1]
   3065c:	mov	r1, #32
   30660:	vst1.32	{d16-d17}, [r4], r1
   30664:	vst1.32	{d16-d17}, [r4]
   30668:	pop	{r4, sl, fp, pc}

0003066c <flatcc_json_printer_clear@@Base>:
   3066c:	push	{r4, sl, fp, lr}
   30670:	add	fp, sp, #8
   30674:	mov	r4, r0
   30678:	ldrb	r0, [r0, #24]
   3067c:	cmp	r0, #0
   30680:	ldrne	r0, [r4]
   30684:	cmpne	r0, #0
   30688:	beq	30690 <flatcc_json_printer_clear@@Base+0x24>
   3068c:	bl	14e54 <free@plt>
   30690:	vmov.i32	q8, #0	; 0x00000000
   30694:	mov	r0, #32
   30698:	add	r1, r4, #16
   3069c:	vst1.32	{d16-d17}, [r4], r0
   306a0:	vst1.32	{d16-d17}, [r4]
   306a4:	vst1.32	{d16-d17}, [r1]
   306a8:	pop	{r4, sl, fp, pc}
   306ac:	vmov	r0, r1, d0
   306b0:	bx	lr
   306b4:	nop	{0}
   306b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   306bc:	add	fp, sp, #28
   306c0:	sub	sp, sp, #4
   306c4:	vpush	{d8}
   306c8:	sub	sp, sp, #160	; 0xa0
   306cc:	add	r3, sp, #68	; 0x44
   306d0:	stm	r3, {r0, r1, r2}
   306d4:	vmov.f64	d8, d0
   306d8:	sub	r0, fp, #56	; 0x38
   306dc:	bl	309c8 <flatcc_json_printer_clear@@Base+0x35c>
   306e0:	ldr	sl, [fp, #-56]	; 0xffffffc8
   306e4:	ldr	r5, [fp, #-52]	; 0xffffffcc
   306e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   306ec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   306f0:	stm	sp, {r0, r1}
   306f4:	sub	r0, fp, #72	; 0x48
   306f8:	mov	r2, sl
   306fc:	mov	r3, r5
   30700:	bl	30a1c <flatcc_json_printer_clear@@Base+0x3b0>
   30704:	ldr	r1, [fp, #-48]	; 0xffffffd0
   30708:	mov	r0, #0
   3070c:	str	r1, [sp, #56]	; 0x38
   30710:	sub	r1, r1, #1
   30714:	str	r1, [sp, #52]	; 0x34
   30718:	str	r1, [sp]
   3071c:	str	r0, [sp, #4]
   30720:	mov	r0, #1
   30724:	orr	r2, r0, sl, lsl #1
   30728:	str	r5, [sp, #60]	; 0x3c
   3072c:	lsl	r0, r5, #1
   30730:	orr	r8, r0, sl, lsr #31
   30734:	sub	r0, fp, #88	; 0x58
   30738:	mov	r3, r8
   3073c:	bl	30a1c <flatcc_json_printer_clear@@Base+0x3b0>
   30740:	vmov.f64	d0, d8
   30744:	bl	306ac <flatcc_json_printer_clear@@Base+0x40>
   30748:	str	r0, [sp, #48]	; 0x30
   3074c:	vcmpe.f64	d8, #0.0
   30750:	vmrs	APSR_nzcv, fpscr
   30754:	ble	308fc <flatcc_json_printer_clear@@Base+0x290>
   30758:	vldr	d16, [pc, #448]	; 30920 <flatcc_json_printer_clear@@Base+0x2b4>
   3075c:	vcmpe.f64	d8, d16
   30760:	vmrs	APSR_nzcv, fpscr
   30764:	bhi	308fc <flatcc_json_printer_clear@@Base+0x290>
   30768:	mov	r9, r1
   3076c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30770:	mvn	r1, #123	; 0x7b
   30774:	sub	r0, r1, r0
   30778:	ldr	r1, [fp, #-80]	; 0xffffffb0
   3077c:	str	r1, [sp, #44]	; 0x2c
   30780:	add	r1, sp, #96	; 0x60
   30784:	bl	30ac0 <flatcc_json_printer_clear@@Base+0x454>
   30788:	str	r0, [sp, #64]	; 0x40
   3078c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   30790:	ldr	r3, [fp, #-68]	; 0xffffffbc
   30794:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30798:	ldr	r1, [fp, #-60]	; 0xffffffc4
   3079c:	add	r7, sp, #96	; 0x60
   307a0:	ldm	r7, {r4, r6, r7}
   307a4:	ldr	r5, [sp, #108]	; 0x6c
   307a8:	stm	sp, {r0, r1, r4, r6, r7}
   307ac:	str	r5, [sp, #20]
   307b0:	sub	r0, fp, #72	; 0x48
   307b4:	bl	30b28 <flatcc_json_printer_clear@@Base+0x4bc>
   307b8:	mov	r0, #0
   307bc:	ldr	ip, [sp, #44]	; 0x2c
   307c0:	str	ip, [sp]
   307c4:	stmib	sp, {r0, r4, r6, r7}
   307c8:	str	r5, [sp, #20]
   307cc:	movw	r0, #0
   307d0:	movt	r0, #32752	; 0x7ff0
   307d4:	and	r0, r9, r0
   307d8:	clz	r0, r0
   307dc:	lsr	r0, r0, #5
   307e0:	bfc	r9, #20, #12
   307e4:	ldr	r1, [sp, #48]	; 0x30
   307e8:	orrs	r1, r1, r9
   307ec:	movwne	r1, #1
   307f0:	orrs	r0, r1, r0
   307f4:	ldr	r1, [sp, #60]	; 0x3c
   307f8:	lsl	r1, r1, #2
   307fc:	orreq	r8, r1, sl, lsr #30
   30800:	lsl	r1, sl, #2
   30804:	lslne	r1, sl, #1
   30808:	subs	r1, r1, #1
   3080c:	sbc	r2, r8, #0
   30810:	cmp	r0, #0
   30814:	ldr	r0, [sp, #56]	; 0x38
   30818:	ldr	r3, [sp, #52]	; 0x34
   3081c:	subeq	r3, r0, #2
   30820:	sub	r0, r3, ip
   30824:	rsb	r3, r0, #32
   30828:	lsr	r3, r1, r3
   3082c:	orr	r3, r3, r2, lsl r0
   30830:	sub	r2, r0, #32
   30834:	cmp	r2, #0
   30838:	lslge	r3, r1, r2
   3083c:	lsl	r2, r1, r0
   30840:	movwge	r2, #0
   30844:	add	r0, sp, #80	; 0x50
   30848:	bl	30b28 <flatcc_json_printer_clear@@Base+0x4bc>
   3084c:	ldr	r8, [sp, #80]	; 0x50
   30850:	ldr	r9, [sp, #84]	; 0x54
   30854:	ldr	r0, [sp, #88]	; 0x58
   30858:	str	r0, [sp, #60]	; 0x3c
   3085c:	ldr	sl, [sp, #92]	; 0x5c
   30860:	ldr	r2, [fp, #-88]	; 0xffffffa8
   30864:	ldr	r3, [fp, #-84]	; 0xffffffac
   30868:	ldr	r0, [fp, #-80]	; 0xffffffb0
   3086c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   30870:	stm	sp, {r0, r1, r4, r6, r7}
   30874:	str	r5, [sp, #20]
   30878:	sub	r0, fp, #88	; 0x58
   3087c:	bl	30b28 <flatcc_json_printer_clear@@Base+0x4bc>
   30880:	sub	r3, fp, #68	; 0x44
   30884:	ldm	r3, {r1, r2, r3}
   30888:	ldr	r7, [fp, #-88]	; 0xffffffa8
   3088c:	ldr	r5, [fp, #-84]	; 0xffffffac
   30890:	sub	ip, fp, #80	; 0x50
   30894:	ldm	ip, {r4, r6, ip}
   30898:	ldr	r0, [sp, #68]	; 0x44
   3089c:	str	r0, [sp, #32]
   308a0:	ldr	r0, [sp, #72]	; 0x48
   308a4:	str	r0, [sp, #36]	; 0x24
   308a8:	add	r0, sp, #80	; 0x50
   308ac:	str	r0, [sp, #40]	; 0x28
   308b0:	str	ip, [sp]
   308b4:	stmib	sp, {r1, r2, r3, r7}
   308b8:	str	r5, [sp, #20]
   308bc:	str	r4, [sp, #24]
   308c0:	str	r6, [sp, #28]
   308c4:	mov	r0, r8
   308c8:	mov	r1, r9
   308cc:	ldr	r2, [sp, #60]	; 0x3c
   308d0:	mov	r3, sl
   308d4:	bl	30b8c <flatcc_json_printer_clear@@Base+0x520>
   308d8:	ldr	r1, [sp, #80]	; 0x50
   308dc:	ldr	r2, [sp, #64]	; 0x40
   308e0:	sub	r1, r1, r2
   308e4:	ldr	r2, [sp, #76]	; 0x4c
   308e8:	str	r1, [r2]
   308ec:	sub	sp, fp, #40	; 0x28
   308f0:	vpop	{d8}
   308f4:	add	sp, sp, #4
   308f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   308fc:	movw	r0, #34243	; 0x85c3
   30900:	movt	r0, #3
   30904:	movw	r1, #34096	; 0x8530
   30908:	movt	r1, #3
   3090c:	movw	r3, #34280	; 0x85e8
   30910:	movt	r3, #3
   30914:	mov	r2, #138	; 0x8a
   30918:	bl	14f44 <__assert_fail@plt>
   3091c:	nop	{0}
   30920:			; <UNDEFINED> instruction: 0xffffffff
   30924:	svcvc	0x00efffff
   30928:	push	{r4, sl, fp, lr}
   3092c:	add	fp, sp, #8
   30930:	cmn	r0, #1
   30934:	ble	30940 <flatcc_json_printer_clear@@Base+0x2d4>
   30938:	mov	lr, r1
   3093c:	b	30950 <flatcc_json_printer_clear@@Base+0x2e4>
   30940:	mov	r2, #45	; 0x2d
   30944:	mov	lr, r1
   30948:	strb	r2, [lr], #1
   3094c:	rsb	r0, r0, #0
   30950:	movw	ip, #26215	; 0x6667
   30954:	movt	ip, #26214	; 0x6666
   30958:	mov	r3, lr
   3095c:	smmul	r2, r0, ip
   30960:	asr	r4, r2, #2
   30964:	add	r2, r4, r2, lsr #31
   30968:	add	r4, r2, r2, lsl #2
   3096c:	sub	r4, r0, r4, lsl #1
   30970:	add	r4, r4, #48	; 0x30
   30974:	strb	r4, [r3], #1
   30978:	add	r0, r0, #9
   3097c:	cmp	r0, #18
   30980:	mov	r0, r2
   30984:	bhi	3095c <flatcc_json_printer_clear@@Base+0x2f0>
   30988:	mov	r2, #0
   3098c:	mov	r0, r3
   30990:	strb	r2, [r0], -lr
   30994:	cmp	r0, #2
   30998:	blt	309c0 <flatcc_json_printer_clear@@Base+0x354>
   3099c:	add	r0, r0, r0, lsr #31
   309a0:	asr	r0, r0, #1
   309a4:	sub	r2, r3, #1
   309a8:	ldrb	ip, [lr]
   309ac:	ldrb	r4, [r2]
   309b0:	strb	r4, [lr], #1
   309b4:	strb	ip, [r2], #-1
   309b8:	subs	r0, r0, #1
   309bc:	bne	309a8 <flatcc_json_printer_clear@@Base+0x33c>
   309c0:	sub	r0, r3, r1
   309c4:	pop	{r4, sl, fp, pc}
   309c8:	push	{r4, sl, fp, lr}
   309cc:	add	fp, sp, #8
   309d0:	mov	r4, r0
   309d4:	bl	306ac <flatcc_json_printer_clear@@Base+0x40>
   309d8:	movw	r2, #0
   309dc:	movt	r2, #32752	; 0x7ff0
   309e0:	ands	r2, r1, r2
   309e4:	bfc	r1, #20, #12
   309e8:	beq	30a08 <flatcc_json_printer_clear@@Base+0x39c>
   309ec:	orr	r1, r1, #1048576	; 0x100000
   309f0:	strd	r0, [r4]
   309f4:	movw	r0, #64461	; 0xfbcd
   309f8:	movt	r0, #65535	; 0xffff
   309fc:	add	r0, r0, r2, lsr #20
   30a00:	str	r0, [r4, #8]
   30a04:	pop	{r4, sl, fp, pc}
   30a08:	strd	r0, [r4]
   30a0c:	movw	r0, #64462	; 0xfbce
   30a10:	movt	r0, #65535	; 0xffff
   30a14:	str	r0, [r4, #8]
   30a18:	pop	{r4, sl, fp, pc}
   30a1c:	push	{r4, sl, fp, lr}
   30a20:	add	fp, sp, #8
   30a24:	orrs	r1, r2, r3
   30a28:	beq	30aa0 <flatcc_json_printer_clear@@Base+0x434>
   30a2c:	ldr	ip, [fp, #12]
   30a30:	ldr	r1, [fp, #8]
   30a34:	mov	r4, #0
   30a38:	cmp	r4, r3, lsr #22
   30a3c:	bne	30a58 <flatcc_json_printer_clear@@Base+0x3ec>
   30a40:	lsl	r3, r3, #10
   30a44:	orr	r3, r3, r2, lsr #22
   30a48:	sub	r1, r1, #10
   30a4c:	lsl	r2, r2, #10
   30a50:	cmp	r3, #4194304	; 0x400000
   30a54:	bcc	30a40 <flatcc_json_printer_clear@@Base+0x3d4>
   30a58:	cmp	r3, #0
   30a5c:	blt	30a88 <flatcc_json_printer_clear@@Base+0x41c>
   30a60:	mvn	lr, #0
   30a64:	lsl	r3, r3, #1
   30a68:	orr	r3, r3, r2, lsr #31
   30a6c:	sub	r1, r1, #1
   30a70:	lsl	r4, r2, #1
   30a74:	subs	r2, lr, r2, lsl #1
   30a78:	sbcs	r2, lr, r3
   30a7c:	mov	r2, r4
   30a80:	blt	30a64 <flatcc_json_printer_clear@@Base+0x3f8>
   30a84:	b	30a8c <flatcc_json_printer_clear@@Base+0x420>
   30a88:	mov	r4, r2
   30a8c:	str	r4, [r0]
   30a90:	str	r3, [r0, #4]
   30a94:	str	r1, [r0, #8]
   30a98:	str	ip, [r0, #12]
   30a9c:	pop	{r4, sl, fp, pc}
   30aa0:	movw	r0, #33314	; 0x8222
   30aa4:	movt	r0, #3
   30aa8:	movw	r1, #33323	; 0x822b
   30aac:	movt	r1, #3
   30ab0:	movw	r3, #33409	; 0x8281
   30ab4:	movt	r3, #3
   30ab8:	mov	r2, #260	; 0x104
   30abc:	bl	14f44 <__assert_fail@plt>
   30ac0:	push	{r4, sl, fp, lr}
   30ac4:	add	fp, sp, #8
   30ac8:	mov	r4, r1
   30acc:	add	r0, r0, #63	; 0x3f
   30ad0:	vldr	d16, [pc, #72]	; 30b20 <flatcc_json_printer_clear@@Base+0x4b4>
   30ad4:	vmov	s0, r0
   30ad8:	vcvt.f64.s32	d17, s0
   30adc:	vmul.f64	d0, d17, d16
   30ae0:	bl	30f30 <flatcc_json_printer_clear@@Base+0x8c4>
   30ae4:	movw	r1, #347	; 0x15b
   30ae8:	add	r0, r0, r1
   30aec:	asr	r1, r0, #31
   30af0:	add	r0, r0, r1, lsr #29
   30af4:	mvn	r1, #15
   30af8:	and	r0, r1, r0, lsl #1
   30afc:	movw	r1, #34976	; 0x88a0
   30b00:	movt	r1, #3
   30b04:	add	r0, r1, r0
   30b08:	ldrd	r2, [r0, #16]
   30b0c:	stm	r4, {r2, r3}
   30b10:	ldrsh	r1, [r0, #24]
   30b14:	str	r1, [r4, #8]
   30b18:	ldrsh	r0, [r0, #26]
   30b1c:	pop	{r4, sl, fp, pc}
   30b20:			; <UNDEFINED> instruction: 0x509f79fe
   30b24:	svccc	0x00d34413
   30b28:	push	{r4, r5, fp, lr}
   30b2c:	add	fp, sp, #8
   30b30:	ldr	ip, [fp, #24]
   30b34:	ldr	r1, [fp, #8]
   30b38:	add	r1, r1, ip
   30b3c:	add	r1, r1, #64	; 0x40
   30b40:	str	r1, [r0, #8]
   30b44:	ldr	ip, [fp, #16]
   30b48:	umull	r1, lr, ip, r2
   30b4c:	umull	ip, r1, ip, r3
   30b50:	mov	r5, #0
   30b54:	adds	lr, ip, lr
   30b58:	adc	r5, r5, #0
   30b5c:	ldr	ip, [fp, #20]
   30b60:	umull	r2, r4, ip, r2
   30b64:	adds	r2, lr, r2
   30b68:	adc	r5, r5, #0
   30b6c:	adds	r2, r2, #-2147483648	; 0x80000000
   30b70:	adc	r2, r5, #0
   30b74:	umaal	r1, r4, ip, r3
   30b78:	adds	r1, r1, r2
   30b7c:	str	r1, [r0]
   30b80:	adc	r1, r4, #0
   30b84:	str	r1, [r0, #4]
   30b88:	pop	{r4, r5, fp, pc}
   30b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b90:	add	fp, sp, #28
   30b94:	sub	sp, sp, #124	; 0x7c
   30b98:	mov	r3, #0
   30b9c:	str	r3, [sp, #20]
   30ba0:	str	r2, [sp, #16]
   30ba4:	subs	r0, r0, #1
   30ba8:	sbc	r1, r1, #0
   30bac:	str	r1, [sp, #12]
   30bb0:	str	r0, [sp, #8]
   30bb4:	str	r3, [sp, #4]
   30bb8:	ldr	r0, [fp, #32]
   30bbc:	str	r0, [sp]
   30bc0:	ldr	r0, [fp, #28]
   30bc4:	ldr	r1, [fp, #24]
   30bc8:	adds	r9, r1, #1
   30bcc:	adc	r6, r0, #0
   30bd0:	sub	r0, fp, #48	; 0x30
   30bd4:	mov	r2, r9
   30bd8:	mov	r3, r6
   30bdc:	bl	30f5c <flatcc_json_printer_clear@@Base+0x8f0>
   30be0:	ldr	r1, [fp, #16]
   30be4:	rsb	r4, r1, #0
   30be8:	lsr	r0, r9, r4
   30bec:	add	r8, r1, #32
   30bf0:	orr	r7, r0, r6, lsl r8
   30bf4:	mvn	r0, #31
   30bf8:	sub	r5, r0, r1
   30bfc:	cmp	r5, #0
   30c00:	lsrge	r7, r6, r5
   30c04:	add	r1, r1, #64	; 0x40
   30c08:	sub	r2, fp, #52	; 0x34
   30c0c:	mov	r0, r7
   30c10:	bl	30fb4 <flatcc_json_printer_clear@@Base+0x948>
   30c14:	mov	lr, r4
   30c18:	mov	r2, #0
   30c1c:	ldr	r4, [fp, #48]	; 0x30
   30c20:	str	r0, [r4]
   30c24:	mov	r0, #1
   30c28:	lsr	r1, r0, r8
   30c2c:	cmp	r5, #0
   30c30:	lslge	r1, r0, r5
   30c34:	lsl	r0, r0, lr
   30c38:	movwge	r0, #0
   30c3c:	ldr	r3, [fp, #44]	; 0x2c
   30c40:	str	r2, [r3]
   30c44:	ldr	r2, [r4]
   30c48:	subs	r3, r0, #1
   30c4c:	str	r9, [sp, #40]	; 0x28
   30c50:	and	r9, r3, r9
   30c54:	sbc	r5, r1, #0
   30c58:	str	r5, [sp, #60]	; 0x3c
   30c5c:	and	r5, r5, r6
   30c60:	cmp	r2, #1
   30c64:	str	r6, [sp, #44]	; 0x2c
   30c68:	str	r1, [sp, #36]	; 0x24
   30c6c:	str	r0, [sp, #32]
   30c70:	blt	30d2c <flatcc_json_printer_clear@@Base+0x6c0>
   30c74:	str	r3, [sp, #48]	; 0x30
   30c78:	mov	sl, r5
   30c7c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   30c80:	str	r2, [sp, #56]	; 0x38
   30c84:	ldr	r2, [fp, #-44]	; 0xffffffd4
   30c88:	str	r2, [sp, #52]	; 0x34
   30c8c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   30c90:	movw	ip, #52429	; 0xcccd
   30c94:	movt	ip, #52428	; 0xcccc
   30c98:	udiv	r2, r7, r0
   30c9c:	add	r6, r2, #48	; 0x30
   30ca0:	ldr	r3, [fp, #44]	; 0x2c
   30ca4:	mov	r1, r3
   30ca8:	ldr	r5, [r3]
   30cac:	ldr	r3, [fp, #40]	; 0x28
   30cb0:	strb	r6, [r3, r5]
   30cb4:	ldr	r6, [r1]
   30cb8:	add	r6, r6, #1
   30cbc:	str	r6, [r1]
   30cc0:	ldr	r6, [r4]
   30cc4:	sub	r6, r6, #1
   30cc8:	str	r6, [r4]
   30ccc:	mov	r3, r0
   30cd0:	mls	r7, r2, r0, r7
   30cd4:	rsb	r0, lr, #32
   30cd8:	lsr	r2, r7, r0
   30cdc:	sub	r8, lr, #32
   30ce0:	cmp	r8, #0
   30ce4:	lslge	r2, r7, r8
   30ce8:	lsl	r6, r7, lr
   30cec:	movwge	r6, #0
   30cf0:	adds	r5, r6, r9
   30cf4:	adc	r6, r2, sl
   30cf8:	ldr	r2, [sp, #56]	; 0x38
   30cfc:	subs	r2, r5, r2
   30d00:	ldr	r2, [sp, #52]	; 0x34
   30d04:	sbcs	r2, r6, r2
   30d08:	bcc	30e7c <flatcc_json_printer_clear@@Base+0x810>
   30d0c:	umull	r2, r6, r3, ip
   30d10:	lsr	r0, r6, #3
   30d14:	ldr	r2, [r4]
   30d18:	cmp	r2, #0
   30d1c:	bgt	30c98 <flatcc_json_printer_clear@@Base+0x62c>
   30d20:	str	r0, [fp, #-52]	; 0xffffffcc
   30d24:	mov	r5, sl
   30d28:	ldr	r3, [sp, #48]	; 0x30
   30d2c:	ldr	r7, [fp, #-48]	; 0xffffffd0
   30d30:	ldr	r6, [fp, #-44]	; 0xffffffd4
   30d34:	mov	r8, #1
   30d38:	rsb	r0, lr, #32
   30d3c:	str	r0, [sp, #52]	; 0x34
   30d40:	str	lr, [sp, #56]	; 0x38
   30d44:	sub	r0, lr, #32
   30d48:	str	r0, [sp, #48]	; 0x30
   30d4c:	mov	sl, #0
   30d50:	mov	ip, r4
   30d54:	mov	lr, #10
   30d58:	mov	r2, r5
   30d5c:	umull	r4, r5, r9, lr
   30d60:	mov	r9, r3
   30d64:	ldr	r1, [sp, #56]	; 0x38
   30d68:	lsr	r3, r4, r1
   30d6c:	add	r2, r2, r2, lsl #2
   30d70:	add	r2, r5, r2, lsl #1
   30d74:	ldr	r1, [sp, #52]	; 0x34
   30d78:	orr	r3, r3, r2, lsl r1
   30d7c:	ldr	r1, [sp, #48]	; 0x30
   30d80:	cmp	r1, #0
   30d84:	lsrge	r3, r2, r1
   30d88:	add	r3, r3, #48	; 0x30
   30d8c:	ldr	r1, [fp, #44]	; 0x2c
   30d90:	mov	r0, r1
   30d94:	ldr	r5, [r1]
   30d98:	ldr	r1, [fp, #40]	; 0x28
   30d9c:	strb	r3, [r1, r5]
   30da0:	ldr	r3, [r0]
   30da4:	add	r3, r3, #1
   30da8:	str	r3, [r0]
   30dac:	ldr	r3, [ip]
   30db0:	sub	r3, r3, #1
   30db4:	str	r3, [ip]
   30db8:	umull	r8, r3, r8, lr
   30dbc:	add	r5, sl, sl, lsl #2
   30dc0:	add	sl, r3, r5, lsl #1
   30dc4:	umull	r7, r3, r7, lr
   30dc8:	add	r5, r6, r6, lsl #2
   30dcc:	add	r6, r3, r5, lsl #1
   30dd0:	mov	r3, r9
   30dd4:	ldr	r0, [sp, #60]	; 0x3c
   30dd8:	and	r5, r2, r0
   30ddc:	and	r9, r4, r9
   30de0:	subs	r2, r9, r7
   30de4:	sbcs	r2, r5, r6
   30de8:	bcs	30d58 <flatcc_json_printer_clear@@Base+0x6ec>
   30dec:	str	r7, [fp, #-48]	; 0xffffffd0
   30df0:	str	r6, [fp, #-44]	; 0xffffffd4
   30df4:	ldr	r0, [fp, #44]	; 0x2c
   30df8:	ldr	r4, [r0]
   30dfc:	mov	r0, #0
   30e00:	ldr	r1, [fp, #32]
   30e04:	str	r1, [sp]
   30e08:	str	r0, [sp, #4]
   30e0c:	ldr	r0, [fp, #8]
   30e10:	str	r0, [sp, #8]
   30e14:	ldr	r0, [fp, #12]
   30e18:	str	r0, [sp, #12]
   30e1c:	ldr	r0, [fp, #16]
   30e20:	str	r0, [sp, #16]
   30e24:	ldr	r0, [fp, #20]
   30e28:	str	r0, [sp, #20]
   30e2c:	add	r0, sp, #64	; 0x40
   30e30:	ldr	r2, [sp, #40]	; 0x28
   30e34:	ldr	r3, [sp, #44]	; 0x2c
   30e38:	bl	30f5c <flatcc_json_printer_clear@@Base+0x8f0>
   30e3c:	ldr	r0, [sp, #64]	; 0x40
   30e40:	ldr	r1, [sp, #68]	; 0x44
   30e44:	str	r7, [sp]
   30e48:	stmib	sp, {r6, r9}
   30e4c:	str	r5, [sp, #12]
   30e50:	ldr	r2, [sp, #32]
   30e54:	str	r2, [sp, #16]
   30e58:	ldr	r2, [sp, #36]	; 0x24
   30e5c:	add	r3, sp, #20
   30e60:	stm	r3, {r2, r8, sl}
   30e64:	umull	r2, r3, r0, r8
   30e68:	mla	r0, r0, sl, r3
   30e6c:	mla	r3, r1, r8, r0
   30e70:	ldr	r0, [fp, #40]	; 0x28
   30e74:	mov	r1, r4
   30e78:	b	30f24 <flatcc_json_printer_clear@@Base+0x8b8>
   30e7c:	mov	r4, r3
   30e80:	str	r3, [fp, #-52]	; 0xffffffcc
   30e84:	mov	sl, r0
   30e88:	ldr	r0, [fp, #44]	; 0x2c
   30e8c:	ldr	r9, [r0]
   30e90:	mov	r1, #0
   30e94:	ldr	r0, [fp, #32]
   30e98:	stm	sp, {r0, r1}
   30e9c:	ldr	r0, [fp, #8]
   30ea0:	str	r0, [sp, #8]
   30ea4:	ldr	r0, [fp, #12]
   30ea8:	str	r0, [sp, #12]
   30eac:	ldr	r0, [fp, #16]
   30eb0:	str	r0, [sp, #16]
   30eb4:	ldr	r0, [fp, #20]
   30eb8:	str	r0, [sp, #20]
   30ebc:	sub	r0, fp, #72	; 0x48
   30ec0:	ldr	r2, [sp, #40]	; 0x28
   30ec4:	ldr	r3, [sp, #44]	; 0x2c
   30ec8:	mov	r7, lr
   30ecc:	bl	30f5c <flatcc_json_printer_clear@@Base+0x8f0>
   30ed0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   30ed4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   30ed8:	mov	r0, #1
   30edc:	lsr	r1, r4, sl
   30ee0:	cmp	r8, #0
   30ee4:	lslge	r1, r4, r8
   30ee8:	lsl	r4, r4, r7
   30eec:	movwge	r4, #0
   30ef0:	ldr	r7, [sp, #56]	; 0x38
   30ef4:	str	r7, [sp]
   30ef8:	ldr	r7, [sp, #52]	; 0x34
   30efc:	str	r7, [sp, #4]
   30f00:	str	r5, [sp, #8]
   30f04:	str	r6, [sp, #12]
   30f08:	str	r4, [sp, #16]
   30f0c:	str	r1, [sp, #20]
   30f10:	str	r0, [sp, #24]
   30f14:	mov	r0, #0
   30f18:	str	r0, [sp, #28]
   30f1c:	ldr	r0, [fp, #40]	; 0x28
   30f20:	mov	r1, r9
   30f24:	bl	30ff0 <flatcc_json_printer_clear@@Base+0x984>
   30f28:	sub	sp, fp, #28
   30f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f30:	vcvt.s32.f64	s2, d0
   30f34:	vmov	r0, s2
   30f38:	vcmpe.f64	d0, #0.0
   30f3c:	vmrs	APSR_nzcv, fpscr
   30f40:	bxmi	lr
   30f44:	vcvt.f64.s32	d16, s2
   30f48:	vsub.f64	d16, d0, d16
   30f4c:	vcmp.f64	d16, #0.0
   30f50:	vmrs	APSR_nzcv, fpscr
   30f54:	addne	r0, r0, #1
   30f58:	bx	lr
   30f5c:	push	{fp, lr}
   30f60:	mov	fp, sp
   30f64:	ldr	ip, [fp, #8]
   30f68:	str	ip, [r0, #8]
   30f6c:	ldr	r1, [fp, #16]
   30f70:	subs	r1, r2, r1
   30f74:	str	r1, [r0]
   30f78:	ldr	r1, [fp, #20]
   30f7c:	sbcs	r1, r3, r1
   30f80:	str	r1, [r0, #4]
   30f84:	bcc	30f94 <flatcc_json_printer_clear@@Base+0x928>
   30f88:	ldr	r0, [fp, #24]
   30f8c:	cmp	ip, r0
   30f90:	popeq	{fp, pc}
   30f94:	movw	r0, #34321	; 0x8611
   30f98:	movt	r0, #3
   30f9c:	movw	r1, #33323	; 0x822b
   30fa0:	movt	r1, #3
   30fa4:	movw	r3, #34346	; 0x862a
   30fa8:	movt	r3, #3
   30fac:	mov	r2, #239	; 0xef
   30fb0:	bl	14f44 <__assert_fail@plt>
   30fb4:	push	{fp, lr}
   30fb8:	mov	fp, sp
   30fbc:	movw	r3, #1233	; 0x4d1
   30fc0:	mla	lr, r1, r3, r3
   30fc4:	mov	r1, #1
   30fc8:	add	r1, r1, lr, asr #12
   30fcc:	movw	ip, #36368	; 0x8e10
   30fd0:	movt	ip, #3
   30fd4:	ldr	r3, [ip, r1, lsl #2]
   30fd8:	cmp	r3, r0
   30fdc:	asrhi	r1, lr, #12
   30fe0:	ldr	r0, [ip, r1, lsl #2]
   30fe4:	str	r0, [r2]
   30fe8:	mov	r0, r1
   30fec:	pop	{fp, pc}
   30ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ff4:	add	fp, sp, #28
   30ff8:	sub	sp, sp, #20
   30ffc:	str	r1, [sp, #12]
   31000:	str	r0, [sp, #16]
   31004:	ldr	r5, [fp, #20]
   31008:	ldr	ip, [fp, #12]
   3100c:	ldr	r1, [fp, #16]
   31010:	ldr	lr, [fp, #8]
   31014:	subs	r8, lr, r1
   31018:	sbc	r7, ip, r5
   3101c:	mov	r9, #0
   31020:	ldr	r0, [fp, #28]
   31024:	ldr	r4, [fp, #24]
   31028:	subs	r4, r8, r4
   3102c:	sbcs	r4, r7, r0
   31030:	movwcc	r9, #1
   31034:	ldr	r4, [fp, #36]	; 0x24
   31038:	ldr	r0, [fp, #32]
   3103c:	adds	r6, r0, r2
   31040:	str	r6, [sp, #8]
   31044:	adc	r6, r4, r3
   31048:	subs	r0, r2, r0
   3104c:	sbc	sl, r3, r4
   31050:	subs	r4, r1, r0
   31054:	sbcs	r4, r5, sl
   31058:	str	r6, [sp, #4]
   3105c:	bcs	31120 <flatcc_json_printer_clear@@Base+0xab4>
   31060:	ldr	r3, [fp, #24]
   31064:	subs	r4, r8, r3
   31068:	ldr	r2, [fp, #28]
   3106c:	sbcs	r4, r7, r2
   31070:	bcc	31128 <flatcc_json_printer_clear@@Base+0xabc>
   31074:	ldr	r1, [sp, #12]
   31078:	sub	r1, r1, #1
   3107c:	str	r1, [sp, #12]
   31080:	ldr	r5, [fp, #20]
   31084:	ldr	r8, [fp, #16]
   31088:	adds	r7, r8, r3
   3108c:	adc	r6, r5, r2
   31090:	subs	r4, r7, r0
   31094:	sbcs	r4, r6, sl
   31098:	bcc	310d0 <flatcc_json_printer_clear@@Base+0xa64>
   3109c:	subs	r4, r7, r0
   310a0:	sbc	lr, r6, sl
   310a4:	mov	r1, ip
   310a8:	subs	ip, r0, r8
   310ac:	mov	r2, r8
   310b0:	sbc	r8, sl, r5
   310b4:	subs	r4, ip, r4
   310b8:	mov	ip, r1
   310bc:	sbcs	r4, r8, lr
   310c0:	mov	r8, r2
   310c4:	ldr	r2, [fp, #28]
   310c8:	ldr	lr, [fp, #8]
   310cc:	bcc	3113c <flatcc_json_printer_clear@@Base+0xad0>
   310d0:	ldr	r1, [sp, #16]
   310d4:	ldr	r4, [sp, #12]
   310d8:	ldrb	r5, [r1, r4]
   310dc:	sub	r5, r5, #1
   310e0:	strb	r5, [r1, r4]
   310e4:	subs	r5, lr, r7
   310e8:	sbc	r4, ip, r6
   310ec:	subs	r1, r5, r3
   310f0:	sbcs	r1, r4, r2
   310f4:	mov	r9, #0
   310f8:	movwcc	r9, #1
   310fc:	subs	r1, r7, r0
   31100:	sbcs	r1, r6, sl
   31104:	bcs	31134 <flatcc_json_printer_clear@@Base+0xac8>
   31108:	subs	r1, r5, r3
   3110c:	sbcs	r1, r4, r2
   31110:	mov	r8, r7
   31114:	mov	r5, r6
   31118:	bcs	31088 <flatcc_json_printer_clear@@Base+0xa1c>
   3111c:	b	3113c <flatcc_json_printer_clear@@Base+0xad0>
   31120:	ldr	r2, [fp, #28]
   31124:	ldr	r3, [fp, #24]
   31128:	ldr	r5, [fp, #20]
   3112c:	ldr	r8, [fp, #16]
   31130:	b	3113c <flatcc_json_printer_clear@@Base+0xad0>
   31134:	mov	r8, r7
   31138:	mov	r5, r6
   3113c:	ldr	r4, [sp, #8]
   31140:	subs	r0, r8, r4
   31144:	ldr	r6, [sp, #4]
   31148:	sbcs	r0, r5, r6
   3114c:	bcs	311c0 <flatcc_json_printer_clear@@Base+0xb54>
   31150:	tst	r9, #1
   31154:	bne	311c0 <flatcc_json_printer_clear@@Base+0xb54>
   31158:	adds	r1, r8, r3
   3115c:	adc	r2, r5, r2
   31160:	mov	r0, #0
   31164:	subs	r3, r1, r4
   31168:	sbcs	r3, r2, r6
   3116c:	bcc	31200 <flatcc_json_printer_clear@@Base+0xb94>
   31170:	subs	r1, r1, r4
   31174:	str	r1, [sp, #16]
   31178:	sbc	r9, r2, r6
   3117c:	subs	r1, r4, r8
   31180:	sbc	sl, r6, r5
   31184:	ldr	r7, [fp, #36]	; 0x24
   31188:	lsl	r6, r7, #1
   3118c:	ldr	r3, [fp, #32]
   31190:	orr	r6, r6, r3, lsr #31
   31194:	subs	r4, r8, r3, lsl #1
   31198:	sbcs	r6, r5, r6
   3119c:	bcc	31200 <flatcc_json_printer_clear@@Base+0xb94>
   311a0:	mov	r2, r8
   311a4:	mov	r4, r5
   311a8:	ldr	r5, [sp, #16]
   311ac:	subs	r1, r5, r1
   311b0:	sbcs	r1, r9, sl
   311b4:	mov	r5, r4
   311b8:	bcs	311e0 <flatcc_json_printer_clear@@Base+0xb74>
   311bc:	b	31200 <flatcc_json_printer_clear@@Base+0xb94>
   311c0:	ldr	r7, [fp, #36]	; 0x24
   311c4:	lsl	r0, r7, #1
   311c8:	ldr	r3, [fp, #32]
   311cc:	orr	r1, r0, r3, lsr #31
   311d0:	mov	r0, #0
   311d4:	subs	r2, r8, r3, lsl #1
   311d8:	sbcs	r1, r5, r1
   311dc:	bcc	31200 <flatcc_json_printer_clear@@Base+0xb94>
   311e0:	lsl	r0, r7, #2
   311e4:	orr	r0, r0, r3, lsr #30
   311e8:	subs	r1, lr, r3, lsl #2
   311ec:	sbc	r2, ip, r0
   311f0:	mov	r0, #0
   311f4:	subs	r1, r1, r8
   311f8:	sbcs	r1, r2, r5
   311fc:	movwcs	r0, #1
   31200:	sub	sp, fp, #28
   31204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31208:	push	{r4, r5, r6, r7, fp, lr}
   3120c:	add	fp, sp, #16
   31210:	mov	r4, r2
   31214:	mov	r6, r1
   31218:	mov	r5, r0
   3121c:	ldr	r0, [r0, #16]
   31220:	ldr	r1, [r5, #20]
   31224:	cmp	r1, r0
   31228:	bcc	3123c <flatcc_json_printer_clear@@Base+0xbd0>
   3122c:	ldr	r2, [r5, #44]	; 0x2c
   31230:	mov	r0, r5
   31234:	mov	r1, #0
   31238:	blx	r2
   3123c:	ldr	r1, [r5, #16]
   31240:	ldr	r0, [r5, #20]
   31244:	sub	r7, r1, r0
   31248:	cmp	r7, r4
   3124c:	bcs	31294 <flatcc_json_printer_clear@@Base+0xc28>
   31250:	mov	r1, r6
   31254:	mov	r2, r7
   31258:	bl	14e60 <memcpy@plt>
   3125c:	ldr	r0, [r5, #20]
   31260:	ldr	r2, [r5, #44]	; 0x2c
   31264:	add	r0, r0, r7
   31268:	str	r0, [r5, #20]
   3126c:	mov	r0, r5
   31270:	mov	r1, #0
   31274:	blx	r2
   31278:	sub	r4, r4, r7
   3127c:	add	r6, r6, r7
   31280:	ldr	r1, [r5, #16]
   31284:	ldr	r0, [r5, #20]
   31288:	sub	r7, r1, r0
   3128c:	cmp	r4, r7
   31290:	bhi	31250 <flatcc_json_printer_clear@@Base+0xbe4>
   31294:	mov	r1, r6
   31298:	mov	r2, r4
   3129c:	bl	14e60 <memcpy@plt>
   312a0:	ldr	r0, [r5, #20]
   312a4:	add	r0, r0, r4
   312a8:	str	r0, [r5, #20]
   312ac:	pop	{r4, r5, r6, r7, fp, pc}
   312b0:	push	{r4, r5, r6, sl, fp, lr}
   312b4:	add	fp, sp, #16
   312b8:	mov	r5, r1
   312bc:	mov	r4, r0
   312c0:	ldr	r0, [r0, #16]
   312c4:	ldr	r1, [r4, #20]
   312c8:	cmp	r1, r0
   312cc:	bcc	312e0 <flatcc_json_printer_clear@@Base+0xc74>
   312d0:	ldr	r2, [r4, #44]	; 0x2c
   312d4:	mov	r0, r4
   312d8:	mov	r1, #0
   312dc:	blx	r2
   312e0:	ldr	r1, [r4, #16]
   312e4:	ldr	r0, [r4, #20]
   312e8:	sub	r6, r1, r0
   312ec:	cmp	r6, r5
   312f0:	bcs	31334 <flatcc_json_printer_clear@@Base+0xcc8>
   312f4:	mov	r1, #32
   312f8:	mov	r2, r6
   312fc:	bl	14ef0 <memset@plt>
   31300:	ldr	r0, [r4, #20]
   31304:	ldr	r2, [r4, #44]	; 0x2c
   31308:	add	r0, r0, r6
   3130c:	str	r0, [r4, #20]
   31310:	mov	r0, r4
   31314:	mov	r1, #0
   31318:	blx	r2
   3131c:	sub	r5, r5, r6
   31320:	ldr	r1, [r4, #16]
   31324:	ldr	r0, [r4, #20]
   31328:	sub	r6, r1, r0
   3132c:	cmp	r5, r6
   31330:	bhi	312f4 <flatcc_json_printer_clear@@Base+0xc88>
   31334:	mov	r1, #32
   31338:	mov	r2, r5
   3133c:	bl	14ef0 <memset@plt>
   31340:	ldr	r0, [r4, #20]
   31344:	add	r0, r0, r5
   31348:	str	r0, [r4, #20]
   3134c:	pop	{r4, r5, r6, sl, fp, pc}
   31350:	add	r0, r0, r1
   31354:	b	31358 <flatcc_json_printer_clear@@Base+0xcec>
   31358:	ldrh	r0, [r0]
   3135c:	b	31360 <flatcc_json_printer_clear@@Base+0xcf4>
   31360:	bx	lr
   31364:	mov	r2, r0
   31368:	lsl	r0, r0, #2
   3136c:	movw	ip, #43691	; 0xaaab
   31370:	movt	ip, #43690	; 0xaaaa
   31374:	umull	r0, r3, r0, ip
   31378:	mov	r0, #3
   3137c:	add	r0, r0, r3, lsr #1
   31380:	bic	r0, r0, #3
   31384:	tst	r1, #128	; 0x80
   31388:	bxne	lr
   3138c:	umull	r1, r3, r2, ip
   31390:	lsr	r1, r3, #1
   31394:	add	r1, r1, r1, lsl #1
   31398:	sub	r1, r2, r1
   3139c:	and	r2, r1, #3
   313a0:	cmp	r2, #1
   313a4:	beq	313b8 <flatcc_json_printer_clear@@Base+0xd4c>
   313a8:	cmp	r1, #2
   313ac:	subeq	r0, r0, #1
   313b0:	bxeq	lr
   313b4:	bx	lr
   313b8:	sub	r0, r0, #2
   313bc:	bx	lr
   313c0:	push	{r4, r5, fp, lr}
   313c4:	add	fp, sp, #8
   313c8:	cmp	r2, #0
   313cc:	beq	31504 <flatcc_json_printer_clear@@Base+0xe98>
   313d0:	bic	ip, r3, #224	; 0xe0
   313d4:	ldr	lr, [r2]
   313d8:	cmp	ip, #0
   313dc:	beq	313fc <flatcc_json_printer_clear@@Base+0xd90>
   313e0:	cmp	ip, #1
   313e4:	bne	314f8 <flatcc_json_printer_clear@@Base+0xe8c>
   313e8:	movw	ip, #34770	; 0x87d2
   313ec:	movt	ip, #3
   313f0:	cmp	lr, #3
   313f4:	bcs	3140c <flatcc_json_printer_clear@@Base+0xda0>
   313f8:	b	3146c <flatcc_json_printer_clear@@Base+0xe00>
   313fc:	movw	ip, #34705	; 0x8791
   31400:	movt	ip, #3
   31404:	cmp	lr, #3
   31408:	bcc	3146c <flatcc_json_printer_clear@@Base+0xe00>
   3140c:	ldrb	r4, [r1]
   31410:	ldrb	r4, [ip, r4, lsr #2]
   31414:	strb	r4, [r0]
   31418:	ldrb	r4, [r1]
   3141c:	ldrb	r5, [r1, #1]
   31420:	lsr	r5, r5, #4
   31424:	bfi	r5, r4, #4, #2
   31428:	ldrb	r4, [ip, r5]
   3142c:	strb	r4, [r0, #1]
   31430:	ldrb	r4, [r1, #1]
   31434:	ldrb	r5, [r1, #2]
   31438:	lsr	r5, r5, #6
   3143c:	bfi	r5, r4, #2, #4
   31440:	ldrb	r4, [ip, r5]
   31444:	strb	r4, [r0, #2]
   31448:	ldrb	r4, [r1, #2]
   3144c:	and	r4, r4, #63	; 0x3f
   31450:	ldrb	r4, [ip, r4]
   31454:	strb	r4, [r0, #3]
   31458:	add	r0, r0, #4
   3145c:	add	r1, r1, #3
   31460:	sub	lr, lr, #3
   31464:	cmp	lr, #2
   31468:	bhi	3140c <flatcc_json_printer_clear@@Base+0xda0>
   3146c:	and	r3, r3, #128	; 0x80
   31470:	cmp	lr, #1
   31474:	beq	314c4 <flatcc_json_printer_clear@@Base+0xe58>
   31478:	cmp	lr, #2
   3147c:	bne	314ec <flatcc_json_printer_clear@@Base+0xe80>
   31480:	ldrb	r5, [r1]
   31484:	ldrb	r5, [ip, r5, lsr #2]
   31488:	strb	r5, [r0]
   3148c:	ldrb	r5, [r1]
   31490:	ldrb	r4, [r1, #1]
   31494:	lsr	r4, r4, #4
   31498:	bfi	r4, r5, #4, #2
   3149c:	ldrb	r5, [ip, r4]
   314a0:	strb	r5, [r0, #1]
   314a4:	ldrb	r1, [r1, #1]
   314a8:	and	r1, r1, #15
   314ac:	ldrb	r1, [ip, r1, lsl #2]
   314b0:	strb	r1, [r0, #2]
   314b4:	cmp	r3, #0
   314b8:	movne	r1, #61	; 0x3d
   314bc:	strbne	r1, [r0, #3]
   314c0:	b	314ec <flatcc_json_printer_clear@@Base+0xe80>
   314c4:	ldrb	r5, [r1]
   314c8:	ldrb	r5, [ip, r5, lsr #2]
   314cc:	strb	r5, [r0]
   314d0:	ldrb	r1, [r1]
   314d4:	and	r1, r1, #3
   314d8:	ldrb	r1, [ip, r1, lsl #4]
   314dc:	strb	r1, [r0, #1]
   314e0:	cmp	r3, #0
   314e4:	movwne	r1, #15677	; 0x3d3d
   314e8:	strhne	r1, [r0, #2]
   314ec:	mov	lr, #0
   314f0:	cmp	r2, #0
   314f4:	popeq	{r4, r5, fp, pc}
   314f8:	ldr	r0, [r2]
   314fc:	sub	r0, r0, lr
   31500:	str	r0, [r2]
   31504:	pop	{r4, r5, fp, pc}
   31508:	bx	lr
   3150c:	bx	lr
   31510:	bx	lr
   31514:	bx	lr
   31518:	bx	lr
   3151c:	bx	lr
   31520:	bx	lr
   31524:	bx	lr
   31528:	bx	lr
   3152c:	bx	lr
   31530:	bx	lr
   31534:	bx	lr
   31538:	bx	lr
   3153c:	ldr	r0, [r0]
   31540:	b	31544 <flatcc_json_printer_clear@@Base+0xed8>
   31544:	bx	lr
   31548:	bx	lr
   3154c:	ldr	r0, [r0]
   31550:	b	31554 <flatcc_json_printer_clear@@Base+0xee8>
   31554:	bx	lr
   31558:	eor	r1, r1, #-2147483648	; 0x80000000
   3155c:	b	31564 <flatcc_json_printer_clear@@Base+0xef8>
   31560:	eor	r3, r3, #-2147483648	; 0x80000000
   31564:	push	{r4, r5, lr}
   31568:	lsl	r4, r1, #1
   3156c:	lsl	r5, r3, #1
   31570:	teq	r4, r5
   31574:	teqeq	r0, r2
   31578:	orrsne	ip, r4, r0
   3157c:	orrsne	ip, r5, r2
   31580:	mvnsne	ip, r4, asr #21
   31584:	mvnsne	ip, r5, asr #21
   31588:	beq	31774 <flatcc_json_printer_clear@@Base+0x1108>
   3158c:	lsr	r4, r4, #21
   31590:	rsbs	r5, r4, r5, lsr #21
   31594:	rsblt	r5, r5, #0
   31598:	ble	315b8 <flatcc_json_printer_clear@@Base+0xf4c>
   3159c:	add	r4, r4, r5
   315a0:	eor	r2, r0, r2
   315a4:	eor	r3, r1, r3
   315a8:	eor	r0, r2, r0
   315ac:	eor	r1, r3, r1
   315b0:	eor	r2, r0, r2
   315b4:	eor	r3, r1, r3
   315b8:	cmp	r5, #54	; 0x36
   315bc:	pophi	{r4, r5, pc}
   315c0:	tst	r1, #-2147483648	; 0x80000000
   315c4:	lsl	r1, r1, #12
   315c8:	mov	ip, #1048576	; 0x100000
   315cc:	orr	r1, ip, r1, lsr #12
   315d0:	beq	315dc <flatcc_json_printer_clear@@Base+0xf70>
   315d4:	rsbs	r0, r0, #0
   315d8:	rsc	r1, r1, #0
   315dc:	tst	r3, #-2147483648	; 0x80000000
   315e0:	lsl	r3, r3, #12
   315e4:	orr	r3, ip, r3, lsr #12
   315e8:	beq	315f4 <flatcc_json_printer_clear@@Base+0xf88>
   315ec:	rsbs	r2, r2, #0
   315f0:	rsc	r3, r3, #0
   315f4:	teq	r4, r5
   315f8:	beq	3175c <flatcc_json_printer_clear@@Base+0x10f0>
   315fc:	sub	r4, r4, #1
   31600:	rsbs	lr, r5, #32
   31604:	blt	31620 <flatcc_json_printer_clear@@Base+0xfb4>
   31608:	lsl	ip, r2, lr
   3160c:	adds	r0, r0, r2, lsr r5
   31610:	adc	r1, r1, #0
   31614:	adds	r0, r0, r3, lsl lr
   31618:	adcs	r1, r1, r3, asr r5
   3161c:	b	3163c <flatcc_json_printer_clear@@Base+0xfd0>
   31620:	sub	r5, r5, #32
   31624:	add	lr, lr, #32
   31628:	cmp	r2, #1
   3162c:	lsl	ip, r3, lr
   31630:	orrcs	ip, ip, #2
   31634:	adds	r0, r0, r3, asr r5
   31638:	adcs	r1, r1, r3, asr #31
   3163c:	and	r5, r1, #-2147483648	; 0x80000000
   31640:	bpl	31650 <flatcc_json_printer_clear@@Base+0xfe4>
   31644:	rsbs	ip, ip, #0
   31648:	rscs	r0, r0, #0
   3164c:	rsc	r1, r1, #0
   31650:	cmp	r1, #1048576	; 0x100000
   31654:	bcc	31694 <flatcc_json_printer_clear@@Base+0x1028>
   31658:	cmp	r1, #2097152	; 0x200000
   3165c:	bcc	3167c <flatcc_json_printer_clear@@Base+0x1010>
   31660:	lsrs	r1, r1, #1
   31664:	rrxs	r0, r0
   31668:	rrx	ip, ip
   3166c:	add	r4, r4, #1
   31670:	lsl	r2, r4, #21
   31674:	cmn	r2, #4194304	; 0x400000
   31678:	bcs	317d4 <flatcc_json_printer_clear@@Base+0x1168>
   3167c:	cmp	ip, #-2147483648	; 0x80000000
   31680:	lsrseq	ip, r0, #1
   31684:	adcs	r0, r0, #0
   31688:	adc	r1, r1, r4, lsl #20
   3168c:	orr	r1, r1, r5
   31690:	pop	{r4, r5, pc}
   31694:	lsls	ip, ip, #1
   31698:	adcs	r0, r0, r0
   3169c:	adc	r1, r1, r1
   316a0:	tst	r1, #1048576	; 0x100000
   316a4:	sub	r4, r4, #1
   316a8:	bne	3167c <flatcc_json_printer_clear@@Base+0x1010>
   316ac:	teq	r1, #0
   316b0:	moveq	r1, r0
   316b4:	moveq	r0, #0
   316b8:	clz	r3, r1
   316bc:	addeq	r3, r3, #32
   316c0:	sub	r3, r3, #11
   316c4:	subs	r2, r3, #32
   316c8:	bge	316ec <flatcc_json_printer_clear@@Base+0x1080>
   316cc:	adds	r2, r2, #12
   316d0:	ble	316e8 <flatcc_json_printer_clear@@Base+0x107c>
   316d4:	add	ip, r2, #20
   316d8:	rsb	r2, r2, #12
   316dc:	lsl	r0, r1, ip
   316e0:	lsr	r1, r1, r2
   316e4:	b	316fc <flatcc_json_printer_clear@@Base+0x1090>
   316e8:	add	r2, r2, #20
   316ec:	rsble	ip, r2, #32
   316f0:	lsl	r1, r1, r2
   316f4:	orrle	r1, r1, r0, lsr ip
   316f8:	lslle	r0, r0, r2
   316fc:	subs	r4, r4, r3
   31700:	addge	r1, r1, r4, lsl #20
   31704:	orrge	r1, r1, r5
   31708:	popge	{r4, r5, pc}
   3170c:	mvn	r4, r4
   31710:	subs	r4, r4, #31
   31714:	bge	31750 <flatcc_json_printer_clear@@Base+0x10e4>
   31718:	adds	r4, r4, #12
   3171c:	bgt	31738 <flatcc_json_printer_clear@@Base+0x10cc>
   31720:	add	r4, r4, #20
   31724:	rsb	r2, r4, #32
   31728:	lsr	r0, r0, r4
   3172c:	orr	r0, r0, r1, lsl r2
   31730:	orr	r1, r5, r1, lsr r4
   31734:	pop	{r4, r5, pc}
   31738:	rsb	r4, r4, #12
   3173c:	rsb	r2, r4, #32
   31740:	lsr	r0, r0, r2
   31744:	orr	r0, r0, r1, lsl r4
   31748:	mov	r1, r5
   3174c:	pop	{r4, r5, pc}
   31750:	lsr	r0, r1, r4
   31754:	mov	r1, r5
   31758:	pop	{r4, r5, pc}
   3175c:	teq	r4, #0
   31760:	eor	r3, r3, #1048576	; 0x100000
   31764:	eoreq	r1, r1, #1048576	; 0x100000
   31768:	addeq	r4, r4, #1
   3176c:	subne	r5, r5, #1
   31770:	b	315fc <flatcc_json_printer_clear@@Base+0xf90>
   31774:	mvns	ip, r4, asr #21
   31778:	mvnsne	ip, r5, asr #21
   3177c:	beq	317e4 <flatcc_json_printer_clear@@Base+0x1178>
   31780:	teq	r4, r5
   31784:	teqeq	r0, r2
   31788:	beq	3179c <flatcc_json_printer_clear@@Base+0x1130>
   3178c:	orrs	ip, r4, r0
   31790:	moveq	r1, r3
   31794:	moveq	r0, r2
   31798:	pop	{r4, r5, pc}
   3179c:	teq	r1, r3
   317a0:	movne	r1, #0
   317a4:	movne	r0, #0
   317a8:	popne	{r4, r5, pc}
   317ac:	lsrs	ip, r4, #21
   317b0:	bne	317c4 <flatcc_json_printer_clear@@Base+0x1158>
   317b4:	lsls	r0, r0, #1
   317b8:	adcs	r1, r1, r1
   317bc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   317c0:	pop	{r4, r5, pc}
   317c4:	adds	r4, r4, #4194304	; 0x400000
   317c8:	addcc	r1, r1, #1048576	; 0x100000
   317cc:	popcc	{r4, r5, pc}
   317d0:	and	r5, r1, #-2147483648	; 0x80000000
   317d4:	orr	r1, r5, #2130706432	; 0x7f000000
   317d8:	orr	r1, r1, #15728640	; 0xf00000
   317dc:	mov	r0, #0
   317e0:	pop	{r4, r5, pc}
   317e4:	mvns	ip, r4, asr #21
   317e8:	movne	r1, r3
   317ec:	movne	r0, r2
   317f0:	mvnseq	ip, r5, asr #21
   317f4:	movne	r3, r1
   317f8:	movne	r2, r0
   317fc:	orrs	r4, r0, r1, lsl #12
   31800:	orrseq	r5, r2, r3, lsl #12
   31804:	teqeq	r1, r3
   31808:	orrne	r1, r1, #524288	; 0x80000
   3180c:	pop	{r4, r5, pc}
   31810:	teq	r0, #0
   31814:	moveq	r1, #0
   31818:	bxeq	lr
   3181c:	push	{r4, r5, lr}
   31820:	mov	r4, #1024	; 0x400
   31824:	add	r4, r4, #50	; 0x32
   31828:	mov	r5, #0
   3182c:	mov	r1, #0
   31830:	b	316ac <flatcc_json_printer_clear@@Base+0x1040>
   31834:	teq	r0, #0
   31838:	moveq	r1, #0
   3183c:	bxeq	lr
   31840:	push	{r4, r5, lr}
   31844:	mov	r4, #1024	; 0x400
   31848:	add	r4, r4, #50	; 0x32
   3184c:	ands	r5, r0, #-2147483648	; 0x80000000
   31850:	rsbmi	r0, r0, #0
   31854:	mov	r1, #0
   31858:	b	316ac <flatcc_json_printer_clear@@Base+0x1040>
   3185c:	lsls	r2, r0, #1
   31860:	asr	r1, r2, #3
   31864:	rrx	r1, r1
   31868:	lsl	r0, r2, #28
   3186c:	andsne	r3, r2, #-16777216	; 0xff000000
   31870:	teqne	r3, #-16777216	; 0xff000000
   31874:	eorne	r1, r1, #939524096	; 0x38000000
   31878:	bxne	lr
   3187c:	bics	r2, r2, #-16777216	; 0xff000000
   31880:	bxeq	lr
   31884:	teq	r3, #-16777216	; 0xff000000
   31888:	orreq	r1, r1, #524288	; 0x80000
   3188c:	bxeq	lr
   31890:	push	{r4, r5, lr}
   31894:	mov	r4, #896	; 0x380
   31898:	and	r5, r1, #-2147483648	; 0x80000000
   3189c:	bic	r1, r1, #-2147483648	; 0x80000000
   318a0:	b	316ac <flatcc_json_printer_clear@@Base+0x1040>
   318a4:	orrs	r2, r0, r1
   318a8:	bxeq	lr
   318ac:	push	{r4, r5, lr}
   318b0:	mov	r5, #0
   318b4:	b	318d4 <flatcc_json_printer_clear@@Base+0x1268>
   318b8:	orrs	r2, r0, r1
   318bc:	bxeq	lr
   318c0:	push	{r4, r5, lr}
   318c4:	ands	r5, r1, #-2147483648	; 0x80000000
   318c8:	bpl	318d4 <flatcc_json_printer_clear@@Base+0x1268>
   318cc:	rsbs	r0, r0, #0
   318d0:	rsc	r1, r1, #0
   318d4:	mov	r4, #1024	; 0x400
   318d8:	add	r4, r4, #50	; 0x32
   318dc:	lsrs	ip, r1, #22
   318e0:	beq	31650 <flatcc_json_printer_clear@@Base+0xfe4>
   318e4:	mov	r2, #3
   318e8:	lsrs	ip, ip, #3
   318ec:	addne	r2, r2, #3
   318f0:	lsrs	ip, ip, #3
   318f4:	addne	r2, r2, #3
   318f8:	add	r2, r2, ip, lsr #3
   318fc:	rsb	r3, r2, #32
   31900:	lsl	ip, r0, r3
   31904:	lsr	r0, r0, r2
   31908:	orr	r0, r0, r1, lsl r3
   3190c:	lsr	r1, r1, r2
   31910:	add	r4, r4, r2
   31914:	b	31650 <flatcc_json_printer_clear@@Base+0xfe4>
   31918:	eor	r0, r0, #-2147483648	; 0x80000000
   3191c:	b	31924 <flatcc_json_printer_clear@@Base+0x12b8>
   31920:	eor	r1, r1, #-2147483648	; 0x80000000
   31924:	lsls	r2, r0, #1
   31928:	lslsne	r3, r1, #1
   3192c:	teqne	r2, r3
   31930:	mvnsne	ip, r2, asr #24
   31934:	mvnsne	ip, r3, asr #24
   31938:	beq	31a30 <flatcc_json_printer_clear@@Base+0x13c4>
   3193c:	lsr	r2, r2, #24
   31940:	rsbs	r3, r2, r3, lsr #24
   31944:	addgt	r2, r2, r3
   31948:	eorgt	r1, r0, r1
   3194c:	eorgt	r0, r1, r0
   31950:	eorgt	r1, r0, r1
   31954:	rsblt	r3, r3, #0
   31958:	cmp	r3, #25
   3195c:	bxhi	lr
   31960:	tst	r0, #-2147483648	; 0x80000000
   31964:	orr	r0, r0, #8388608	; 0x800000
   31968:	bic	r0, r0, #-16777216	; 0xff000000
   3196c:	rsbne	r0, r0, #0
   31970:	tst	r1, #-2147483648	; 0x80000000
   31974:	orr	r1, r1, #8388608	; 0x800000
   31978:	bic	r1, r1, #-16777216	; 0xff000000
   3197c:	rsbne	r1, r1, #0
   31980:	teq	r2, r3
   31984:	beq	31a18 <flatcc_json_printer_clear@@Base+0x13ac>
   31988:	sub	r2, r2, #1
   3198c:	adds	r0, r0, r1, asr r3
   31990:	rsb	r3, r3, #32
   31994:	lsl	r1, r1, r3
   31998:	and	r3, r0, #-2147483648	; 0x80000000
   3199c:	bpl	319a8 <flatcc_json_printer_clear@@Base+0x133c>
   319a0:	rsbs	r1, r1, #0
   319a4:	rsc	r0, r0, #0
   319a8:	cmp	r0, #8388608	; 0x800000
   319ac:	bcc	319e0 <flatcc_json_printer_clear@@Base+0x1374>
   319b0:	cmp	r0, #16777216	; 0x1000000
   319b4:	bcc	319cc <flatcc_json_printer_clear@@Base+0x1360>
   319b8:	lsrs	r0, r0, #1
   319bc:	rrx	r1, r1
   319c0:	add	r2, r2, #1
   319c4:	cmp	r2, #254	; 0xfe
   319c8:	bcs	31a84 <flatcc_json_printer_clear@@Base+0x1418>
   319cc:	cmp	r1, #-2147483648	; 0x80000000
   319d0:	adc	r0, r0, r2, lsl #23
   319d4:	biceq	r0, r0, #1
   319d8:	orr	r0, r0, r3
   319dc:	bx	lr
   319e0:	lsls	r1, r1, #1
   319e4:	adc	r0, r0, r0
   319e8:	tst	r0, #8388608	; 0x800000
   319ec:	sub	r2, r2, #1
   319f0:	bne	319cc <flatcc_json_printer_clear@@Base+0x1360>
   319f4:	clz	ip, r0
   319f8:	sub	ip, ip, #8
   319fc:	subs	r2, r2, ip
   31a00:	lsl	r0, r0, ip
   31a04:	addge	r0, r0, r2, lsl #23
   31a08:	rsblt	r2, r2, #0
   31a0c:	orrge	r0, r0, r3
   31a10:	orrlt	r0, r3, r0, lsr r2
   31a14:	bx	lr
   31a18:	teq	r2, #0
   31a1c:	eor	r1, r1, #8388608	; 0x800000
   31a20:	eoreq	r0, r0, #8388608	; 0x800000
   31a24:	addeq	r2, r2, #1
   31a28:	subne	r3, r3, #1
   31a2c:	b	31988 <flatcc_json_printer_clear@@Base+0x131c>
   31a30:	lsl	r3, r1, #1
   31a34:	mvns	ip, r2, asr #24
   31a38:	mvnsne	ip, r3, asr #24
   31a3c:	beq	31a90 <flatcc_json_printer_clear@@Base+0x1424>
   31a40:	teq	r2, r3
   31a44:	beq	31a54 <flatcc_json_printer_clear@@Base+0x13e8>
   31a48:	teq	r2, #0
   31a4c:	moveq	r0, r1
   31a50:	bx	lr
   31a54:	teq	r0, r1
   31a58:	movne	r0, #0
   31a5c:	bxne	lr
   31a60:	tst	r2, #-16777216	; 0xff000000
   31a64:	bne	31a74 <flatcc_json_printer_clear@@Base+0x1408>
   31a68:	lsls	r0, r0, #1
   31a6c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   31a70:	bx	lr
   31a74:	adds	r2, r2, #33554432	; 0x2000000
   31a78:	addcc	r0, r0, #8388608	; 0x800000
   31a7c:	bxcc	lr
   31a80:	and	r3, r0, #-2147483648	; 0x80000000
   31a84:	orr	r0, r3, #2130706432	; 0x7f000000
   31a88:	orr	r0, r0, #8388608	; 0x800000
   31a8c:	bx	lr
   31a90:	mvns	r2, r2, asr #24
   31a94:	movne	r0, r1
   31a98:	mvnseq	r3, r3, asr #24
   31a9c:	movne	r1, r0
   31aa0:	lsls	r2, r0, #9
   31aa4:	lslseq	r3, r1, #9
   31aa8:	teqeq	r0, r1
   31aac:	orrne	r0, r0, #4194304	; 0x400000
   31ab0:	bx	lr
   31ab4:	mov	r3, #0
   31ab8:	b	31ac4 <flatcc_json_printer_clear@@Base+0x1458>
   31abc:	ands	r3, r0, #-2147483648	; 0x80000000
   31ac0:	rsbmi	r0, r0, #0
   31ac4:	movs	ip, r0
   31ac8:	bxeq	lr
   31acc:	orr	r3, r3, #1258291200	; 0x4b000000
   31ad0:	mov	r1, r0
   31ad4:	mov	r0, #0
   31ad8:	b	31b1c <flatcc_json_printer_clear@@Base+0x14b0>
   31adc:	orrs	r2, r0, r1
   31ae0:	bxeq	lr
   31ae4:	mov	r3, #0
   31ae8:	b	31b04 <flatcc_json_printer_clear@@Base+0x1498>
   31aec:	orrs	r2, r0, r1
   31af0:	bxeq	lr
   31af4:	ands	r3, r1, #-2147483648	; 0x80000000
   31af8:	bpl	31b04 <flatcc_json_printer_clear@@Base+0x1498>
   31afc:	rsbs	r0, r0, #0
   31b00:	rsc	r1, r1, #0
   31b04:	movs	ip, r1
   31b08:	moveq	ip, r0
   31b0c:	moveq	r1, r0
   31b10:	moveq	r0, #0
   31b14:	orr	r3, r3, #1526726656	; 0x5b000000
   31b18:	subeq	r3, r3, #268435456	; 0x10000000
   31b1c:	sub	r3, r3, #8388608	; 0x800000
   31b20:	clz	r2, ip
   31b24:	subs	r2, r2, #8
   31b28:	sub	r3, r3, r2, lsl #23
   31b2c:	blt	31b4c <flatcc_json_printer_clear@@Base+0x14e0>
   31b30:	add	r3, r3, r1, lsl r2
   31b34:	lsl	ip, r0, r2
   31b38:	rsb	r2, r2, #32
   31b3c:	cmp	ip, #-2147483648	; 0x80000000
   31b40:	adc	r0, r3, r0, lsr r2
   31b44:	biceq	r0, r0, #1
   31b48:	bx	lr
   31b4c:	add	r2, r2, #32
   31b50:	lsl	ip, r1, r2
   31b54:	rsb	r2, r2, #32
   31b58:	orrs	r0, r0, ip, lsl #1
   31b5c:	adc	r0, r3, r1, lsr r2
   31b60:	biceq	r0, r0, ip, lsr #31
   31b64:	bx	lr
   31b68:	cmp	r3, #0
   31b6c:	cmpeq	r2, #0
   31b70:	bne	31b88 <flatcc_json_printer_clear@@Base+0x151c>
   31b74:	cmp	r1, #0
   31b78:	cmpeq	r0, #0
   31b7c:	mvnne	r1, #0
   31b80:	mvnne	r0, #0
   31b84:	b	31ba4 <flatcc_json_printer_clear@@Base+0x1538>
   31b88:	sub	sp, sp, #8
   31b8c:	push	{sp, lr}
   31b90:	bl	31bb4 <flatcc_json_printer_clear@@Base+0x1548>
   31b94:	ldr	lr, [sp, #4]
   31b98:	add	sp, sp, #8
   31b9c:	pop	{r2, r3}
   31ba0:	bx	lr
   31ba4:	push	{r1, lr}
   31ba8:	mov	r0, #8
   31bac:	bl	14e30 <raise@plt>
   31bb0:	pop	{r1, pc}
   31bb4:	cmp	r1, r3
   31bb8:	cmpeq	r0, r2
   31bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31bc0:	mov	r4, r0
   31bc4:	movcc	r0, #0
   31bc8:	mov	r5, r1
   31bcc:	ldr	lr, [sp, #36]	; 0x24
   31bd0:	movcc	r1, r0
   31bd4:	bcc	31cd0 <flatcc_json_printer_clear@@Base+0x1664>
   31bd8:	cmp	r3, #0
   31bdc:	clzeq	ip, r2
   31be0:	clzne	ip, r3
   31be4:	addeq	ip, ip, #32
   31be8:	cmp	r5, #0
   31bec:	clzeq	r1, r4
   31bf0:	addeq	r1, r1, #32
   31bf4:	clzne	r1, r5
   31bf8:	sub	ip, ip, r1
   31bfc:	sub	sl, ip, #32
   31c00:	lsl	r9, r3, ip
   31c04:	rsb	fp, ip, #32
   31c08:	orr	r9, r9, r2, lsl sl
   31c0c:	orr	r9, r9, r2, lsr fp
   31c10:	lsl	r8, r2, ip
   31c14:	cmp	r5, r9
   31c18:	cmpeq	r4, r8
   31c1c:	movcc	r0, #0
   31c20:	movcc	r1, r0
   31c24:	bcc	31c40 <flatcc_json_printer_clear@@Base+0x15d4>
   31c28:	mov	r0, #1
   31c2c:	subs	r4, r4, r8
   31c30:	lsl	r1, r0, sl
   31c34:	orr	r1, r1, r0, lsr fp
   31c38:	lsl	r0, r0, ip
   31c3c:	sbc	r5, r5, r9
   31c40:	cmp	ip, #0
   31c44:	beq	31cd0 <flatcc_json_printer_clear@@Base+0x1664>
   31c48:	lsr	r6, r8, #1
   31c4c:	orr	r6, r6, r9, lsl #31
   31c50:	lsr	r7, r9, #1
   31c54:	mov	r2, ip
   31c58:	b	31c7c <flatcc_json_printer_clear@@Base+0x1610>
   31c5c:	subs	r3, r4, r6
   31c60:	sbc	r8, r5, r7
   31c64:	adds	r3, r3, r3
   31c68:	adc	r8, r8, r8
   31c6c:	adds	r4, r3, #1
   31c70:	adc	r5, r8, #0
   31c74:	subs	r2, r2, #1
   31c78:	beq	31c98 <flatcc_json_printer_clear@@Base+0x162c>
   31c7c:	cmp	r5, r7
   31c80:	cmpeq	r4, r6
   31c84:	bcs	31c5c <flatcc_json_printer_clear@@Base+0x15f0>
   31c88:	adds	r4, r4, r4
   31c8c:	adc	r5, r5, r5
   31c90:	subs	r2, r2, #1
   31c94:	bne	31c7c <flatcc_json_printer_clear@@Base+0x1610>
   31c98:	lsr	r3, r4, ip
   31c9c:	orr	r3, r3, r5, lsl fp
   31ca0:	lsr	r2, r5, ip
   31ca4:	orr	r3, r3, r5, lsr sl
   31ca8:	adds	r0, r0, r4
   31cac:	mov	r4, r3
   31cb0:	lsl	r3, r2, ip
   31cb4:	orr	r3, r3, r4, lsl sl
   31cb8:	lsl	ip, r4, ip
   31cbc:	orr	r3, r3, r4, lsr fp
   31cc0:	adc	r1, r1, r5
   31cc4:	subs	r0, r0, ip
   31cc8:	mov	r5, r2
   31ccc:	sbc	r1, r1, r3
   31cd0:	cmp	lr, #0
   31cd4:	strdne	r4, [lr]
   31cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00031cdc <__libc_csu_init@@Base>:
   31cdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31ce0:	mov	r7, r0
   31ce4:	ldr	r6, [pc, #72]	; 31d34 <__libc_csu_init@@Base+0x58>
   31ce8:	ldr	r5, [pc, #72]	; 31d38 <__libc_csu_init@@Base+0x5c>
   31cec:	add	r6, pc, r6
   31cf0:	add	r5, pc, r5
   31cf4:	sub	r6, r6, r5
   31cf8:	mov	r8, r1
   31cfc:	mov	r9, r2
   31d00:	bl	14e10 <raise@plt-0x20>
   31d04:	asrs	r6, r6, #2
   31d08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   31d0c:	mov	r4, #0
   31d10:	add	r4, r4, #1
   31d14:	ldr	r3, [r5], #4
   31d18:	mov	r2, r9
   31d1c:	mov	r1, r8
   31d20:	mov	r0, r7
   31d24:	blx	r3
   31d28:	cmp	r6, r4
   31d2c:	bne	31d10 <__libc_csu_init@@Base+0x34>
   31d30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31d34:	andeq	r7, r1, r8, lsl r2
   31d38:	andeq	r7, r1, r0, lsl r2

00031d3c <__libc_csu_fini@@Base>:
   31d3c:	bx	lr

Disassembly of section .fini:

00031d40 <.fini>:
   31d40:	push	{r3, lr}
   31d44:	pop	{r3, pc}
