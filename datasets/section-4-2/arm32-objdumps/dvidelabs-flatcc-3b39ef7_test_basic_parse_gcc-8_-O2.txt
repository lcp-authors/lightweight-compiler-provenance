
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000123dc <.init>:
   123dc:	push	{r3, lr}
   123e0:	bl	12564 <_start@@Base+0x3c>
   123e4:	pop	{r3, pc}

Disassembly of section .plt:

000123e8 <free@plt-0x14>:
   123e8:	push	{lr}		; (str lr, [sp, #-4]!)
   123ec:	ldr	lr, [pc, #4]	; 123f8 <free@plt-0x4>
   123f0:	add	lr, pc, lr
   123f4:	ldr	pc, [lr, #8]!
   123f8:	andeq	sp, r1, r8, lsl #24

000123fc <free@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #118784	; 0x1d000
   12404:	ldr	pc, [ip, #3080]!	; 0xc08

00012408 <memcpy@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #118784	; 0x1d000
   12410:	ldr	pc, [ip, #3072]!	; 0xc00

00012414 <memcmp@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #118784	; 0x1d000
   1241c:	ldr	pc, [ip, #3064]!	; 0xbf8

00012420 <realloc@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #118784	; 0x1d000
   12428:	ldr	pc, [ip, #3056]!	; 0xbf0

0001242c <fwrite@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #118784	; 0x1d000
   12434:	ldr	pc, [ip, #3048]!	; 0xbe8

00012438 <malloc@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #118784	; 0x1d000
   12440:	ldr	pc, [ip, #3040]!	; 0xbe0

00012444 <__libc_start_main@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #118784	; 0x1d000
   1244c:	ldr	pc, [ip, #3032]!	; 0xbd8

00012450 <__gmon_start__@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #118784	; 0x1d000
   12458:	ldr	pc, [ip, #3024]!	; 0xbd0

0001245c <strlen@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #118784	; 0x1d000
   12464:	ldr	pc, [ip, #3016]!	; 0xbc8

00012468 <fprintf@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #118784	; 0x1d000
   12470:	ldr	pc, [ip, #3008]!	; 0xbc0

00012474 <posix_memalign@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #118784	; 0x1d000
   1247c:	ldr	pc, [ip, #3000]!	; 0xbb8

00012480 <memset@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #118784	; 0x1d000
   12488:	ldr	pc, [ip, #2992]!	; 0xbb0

0001248c <strtod@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #118784	; 0x1d000
   12494:	ldr	pc, [ip, #2984]!	; 0xba8

00012498 <memchr@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #118784	; 0x1d000
   124a0:	ldr	pc, [ip, #2976]!	; 0xba0

000124a4 <abort@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #118784	; 0x1d000
   124ac:	ldr	pc, [ip, #2968]!	; 0xb98

000124b0 <__assert_fail@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #118784	; 0x1d000
   124b8:	ldr	pc, [ip, #2960]!	; 0xb90

Disassembly of section .text:

000124c0 <main@@Base>:
   124c0:	strd	r4, [sp, #-12]!
   124c4:	mvn	r3, #0
   124c8:	str	lr, [sp, #8]
   124cc:	sub	sp, sp, #244	; 0xf4
   124d0:	add	r4, sp, #8
   124d4:	ldr	r5, [pc, #68]	; 12520 <main@@Base+0x60>
   124d8:	mov	r0, r4
   124dc:	str	r3, [sp, #4]
   124e0:	bl	146e8 <flatcc_builder_init@@Base>
   124e4:	ldr	r2, [pc, #56]	; 12524 <main@@Base+0x64>
   124e8:	add	r3, sp, #4
   124ec:	mov	r0, r4
   124f0:	add	r5, pc, r5
   124f4:	ldr	r1, [r5, r2]
   124f8:	add	r2, r1, #644	; 0x284
   124fc:	add	r2, r2, #1
   12500:	bl	12618 <test@@Base>
   12504:	mov	r0, r4
   12508:	bl	14898 <flatcc_builder_clear@@Base>
   1250c:	ldr	r0, [sp, #4]
   12510:	add	sp, sp, #244	; 0xf4
   12514:	ldrd	r4, [sp]
   12518:	add	sp, sp, #8
   1251c:	pop	{pc}		; (ldr pc, [sp], #4)
   12520:	andeq	sp, r1, r8, lsl #22
   12524:	andeq	r0, r0, ip, asr #32

00012528 <_start@@Base>:
   12528:	mov	fp, #0
   1252c:	mov	lr, #0
   12530:	pop	{r1}		; (ldr r1, [sp], #4)
   12534:	mov	r2, sp
   12538:	push	{r2}		; (str r2, [sp, #-4]!)
   1253c:	push	{r0}		; (str r0, [sp, #-4]!)
   12540:	ldr	ip, [pc, #16]	; 12558 <_start@@Base+0x30>
   12544:	push	{ip}		; (str ip, [sp, #-4]!)
   12548:	ldr	r0, [pc, #12]	; 1255c <_start@@Base+0x34>
   1254c:	ldr	r3, [pc, #12]	; 12560 <_start@@Base+0x38>
   12550:	bl	12444 <__libc_start_main@plt>
   12554:	bl	124a4 <abort@plt>
   12558:	andeq	sp, r1, r0, lsl #9
   1255c:	andeq	r2, r1, r0, asr #9
   12560:	andeq	sp, r1, r0, lsr #8
   12564:	ldr	r3, [pc, #20]	; 12580 <_start@@Base+0x58>
   12568:	ldr	r2, [pc, #20]	; 12584 <_start@@Base+0x5c>
   1256c:	add	r3, pc, r3
   12570:	ldr	r2, [r3, r2]
   12574:	cmp	r2, #0
   12578:	bxeq	lr
   1257c:	b	12450 <__gmon_start__@plt>
   12580:	andeq	sp, r1, ip, lsl #21
   12584:	andeq	r0, r0, r8, asr r0
   12588:	ldr	r0, [pc, #24]	; 125a8 <_start@@Base+0x80>
   1258c:	ldr	r3, [pc, #24]	; 125ac <_start@@Base+0x84>
   12590:	cmp	r3, r0
   12594:	bxeq	lr
   12598:	ldr	r3, [pc, #16]	; 125b0 <_start@@Base+0x88>
   1259c:	cmp	r3, #0
   125a0:	bxeq	lr
   125a4:	bx	r3
   125a8:	andeq	r0, r3, r0, ror #1
   125ac:	andeq	r0, r3, r0, ror #1
   125b0:	andeq	r0, r0, r0
   125b4:	ldr	r0, [pc, #36]	; 125e0 <_start@@Base+0xb8>
   125b8:	ldr	r1, [pc, #36]	; 125e4 <_start@@Base+0xbc>
   125bc:	sub	r1, r1, r0
   125c0:	asr	r1, r1, #2
   125c4:	add	r1, r1, r1, lsr #31
   125c8:	asrs	r1, r1, #1
   125cc:	bxeq	lr
   125d0:	ldr	r3, [pc, #16]	; 125e8 <_start@@Base+0xc0>
   125d4:	cmp	r3, #0
   125d8:	bxeq	lr
   125dc:	bx	r3
   125e0:	andeq	r0, r3, r0, ror #1
   125e4:	andeq	r0, r3, r0, ror #1
   125e8:	andeq	r0, r0, r0
   125ec:	push	{r4, lr}
   125f0:	ldr	r4, [pc, #24]	; 12610 <_start@@Base+0xe8>
   125f4:	ldrb	r3, [r4]
   125f8:	cmp	r3, #0
   125fc:	popne	{r4, pc}
   12600:	bl	12588 <_start@@Base+0x60>
   12604:	mov	r3, #1
   12608:	strb	r3, [r4]
   1260c:	pop	{r4, pc}
   12610:	andeq	r0, r3, r0, ror #1
   12614:	b	125b4 <_start@@Base+0x8c>

00012618 <test@@Base>:
   12618:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1261c:	mov	ip, #0
   12620:	mov	r5, r2
   12624:	strd	r6, [sp, #8]
   12628:	mov	r7, r1
   1262c:	mov	r2, ip
   12630:	ldr	r1, [pc, #1352]	; 12b80 <test@@Base+0x568>
   12634:	strd	r8, [sp, #16]
   12638:	mov	r9, r0
   1263c:	strd	sl, [sp, #24]
   12640:	mov	fp, r3
   12644:	mov	r3, ip
   12648:	str	lr, [sp, #32]
   1264c:	sub	sp, sp, #132	; 0x84
   12650:	mov	lr, #1
   12654:	add	r6, sp, #84	; 0x54
   12658:	ldr	sl, [pc, #1316]	; 12b84 <test@@Base+0x56c>
   1265c:	add	r1, pc, r1
   12660:	str	ip, [sp, #84]	; 0x54
   12664:	str	ip, [r6, #20]
   12668:	str	ip, [r6, #24]
   1266c:	str	ip, [r6, #28]
   12670:	str	ip, [r6, #32]
   12674:	add	sl, pc, sl
   12678:	str	ip, [r6, #36]	; 0x24
   1267c:	str	ip, [r6, #40]	; 0x28
   12680:	str	r7, [sp, #88]	; 0x58
   12684:	str	lr, [sp, #100]	; 0x64
   12688:	str	ip, [r6, #8]
   1268c:	str	ip, [r6, #12]
   12690:	bl	15084 <flatcc_builder_start_buffer@@Base>
   12694:	sub	r3, r5, r7
   12698:	cmp	r3, #1
   1269c:	ble	126b0 <test@@Base+0x98>
   126a0:	ldrb	r3, [r7]
   126a4:	cmp	r3, #32
   126a8:	bhi	126c4 <test@@Base+0xac>
   126ac:	beq	12a50 <test@@Base+0x438>
   126b0:	mov	r1, r7
   126b4:	mov	r2, r5
   126b8:	mov	r0, r6
   126bc:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   126c0:	mov	r7, r0
   126c4:	cmp	r5, r7
   126c8:	beq	12e60 <test@@Base+0x848>
   126cc:	bls	126dc <test@@Base+0xc4>
   126d0:	ldrb	r3, [r7]
   126d4:	cmp	r3, #123	; 0x7b
   126d8:	beq	127a0 <test@@Base+0x188>
   126dc:	ldr	r1, [pc, #1188]	; 12b88 <test@@Base+0x570>
   126e0:	mov	r2, #123	; 0x7b
   126e4:	ldr	r3, [pc, #1184]	; 12b8c <test@@Base+0x574>
   126e8:	add	r1, pc, r1
   126ec:	ldr	r8, [sl, r3]
   126f0:	ldr	r0, [r8]
   126f4:	bl	12468 <fprintf@plt>
   126f8:	mov	r0, r6
   126fc:	mov	r2, r5
   12700:	mov	r1, r7
   12704:	mov	r3, #17
   12708:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1270c:	ldr	r6, [r8]
   12710:	mov	r4, r0
   12714:	ldr	r0, [sp, #108]	; 0x6c
   12718:	cmp	r0, #0
   1271c:	bne	12760 <test@@Base+0x148>
   12720:	ldr	r0, [pc, #1128]	; 12b90 <test@@Base+0x578>
   12724:	mov	r3, r6
   12728:	mov	r2, #15
   1272c:	mov	r1, #1
   12730:	add	r0, pc, r0
   12734:	bl	1242c <fwrite@plt>
   12738:	ldr	r3, [sp, #108]	; 0x6c
   1273c:	mov	r0, r4
   12740:	str	r3, [fp]
   12744:	add	sp, sp, #132	; 0x84
   12748:	ldrd	r4, [sp]
   1274c:	ldrd	r6, [sp, #8]
   12750:	ldrd	r8, [sp, #16]
   12754:	ldrd	sl, [sp, #24]
   12758:	add	sp, sp, #32
   1275c:	pop	{pc}		; (ldr pc, [sp], #4)
   12760:	ldr	r3, [sp, #88]	; 0x58
   12764:	ldr	r7, [sp, #100]	; 0x64
   12768:	ldr	r5, [sp, #120]	; 0x78
   1276c:	sub	r5, r5, r3
   12770:	bl	19c30 <flatcc_json_parser_error_string@@Base>
   12774:	ldr	r1, [pc, #1048]	; 12b94 <test@@Base+0x57c>
   12778:	add	r5, r5, #1
   1277c:	mov	r2, r7
   12780:	mov	r3, r5
   12784:	str	r0, [sp]
   12788:	mov	r0, r6
   1278c:	add	r1, pc, r1
   12790:	bl	12468 <fprintf@plt>
   12794:	mov	r0, r9
   12798:	bl	1488c <flatcc_builder_reset@@Base>
   1279c:	b	12738 <test@@Base+0x120>
   127a0:	add	r4, r7, #1
   127a4:	sub	r3, r5, r4
   127a8:	cmp	r3, #1
   127ac:	ble	127c0 <test@@Base+0x1a8>
   127b0:	ldrb	r3, [r7, #1]
   127b4:	cmp	r3, #32
   127b8:	bhi	127d4 <test@@Base+0x1bc>
   127bc:	beq	13758 <test@@Base+0x1140>
   127c0:	mov	r1, r4
   127c4:	mov	r2, r5
   127c8:	mov	r0, r6
   127cc:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   127d0:	mov	r4, r0
   127d4:	cmp	r5, r4
   127d8:	beq	13730 <test@@Base+0x1118>
   127dc:	mov	r1, #11
   127e0:	mov	r0, r9
   127e4:	bl	1605c <flatcc_builder_start_table@@Base>
   127e8:	str	r9, [sp, #20]
   127ec:	str	fp, [sp, #40]	; 0x28
   127f0:	str	sl, [sp, #44]	; 0x2c
   127f4:	ldrb	r3, [r4]
   127f8:	cmp	r3, #34	; 0x22
   127fc:	moveq	r3, #0
   12800:	addeq	r4, r4, #1
   12804:	streq	r3, [sp, #96]	; 0x60
   12808:	beq	1281c <test@@Base+0x204>
   1280c:	cmp	r3, #46	; 0x2e
   12810:	movne	r3, #1
   12814:	strne	r3, [sp, #96]	; 0x60
   12818:	beq	13708 <test@@Base+0x10f0>
   1281c:	sub	ip, r5, r4
   12820:	cmp	ip, #8
   12824:	bls	12cfc <test@@Base+0x6e4>
   12828:	ldrb	r2, [r4, #7]
   1282c:	mov	r3, #0
   12830:	mov	lr, r3
   12834:	ldrb	r0, [r4, #6]
   12838:	orr	r1, r2, r0, lsl #8
   1283c:	ldrb	r2, [r4, #5]
   12840:	mov	r0, lr
   12844:	orr	r1, r1, r2, lsl #16
   12848:	ldrb	r2, [r4, #4]
   1284c:	mov	lr, r0
   12850:	orr	r2, r1, r2, lsl #24
   12854:	ldrb	r0, [r4, #3]
   12858:	orr	r3, lr, r0
   1285c:	ldrb	r0, [r4, #2]
   12860:	orr	r3, r3, r0, lsl #8
   12864:	ldrb	r0, [r4, #1]
   12868:	mov	sl, r2
   1286c:	cmp	ip, #8
   12870:	addgt	ip, r4, #8
   12874:	movle	ip, r5
   12878:	ldrb	r2, [r4]
   1287c:	orr	r0, r3, r0, lsl #16
   12880:	orr	fp, r0, r2, lsl #24
   12884:	lsr	r3, sl, #16
   12888:	str	fp, [sp, #12]
   1288c:	add	r1, pc, #692	; 0x2b4
   12890:	ldrd	r0, [r1]
   12894:	lsl	r3, r3, #16
   12898:	str	r3, [sp, #8]
   1289c:	ldrd	r2, [sp, #8]
   128a0:	cmp	r3, r1
   128a4:	cmpeq	r2, r0
   128a8:	bhi	12a64 <test@@Base+0x44c>
   128ac:	and	r1, sl, #-16777216	; 0xff000000
   128b0:	add	r3, pc, #664	; 0x298
   128b4:	ldrd	r2, [r3]
   128b8:	str	r1, [sp, #32]
   128bc:	str	fp, [sp, #36]	; 0x24
   128c0:	ldrd	r0, [sp, #32]
   128c4:	cmp	r1, r3
   128c8:	cmpeq	r0, r2
   128cc:	bne	139e0 <test@@Base+0x13c8>
   128d0:	ldr	r3, [sp, #96]	; 0x60
   128d4:	add	r0, r4, #5
   128d8:	cmp	r3, #0
   128dc:	bne	12dd4 <test@@Base+0x7bc>
   128e0:	cmp	r0, r5
   128e4:	beq	13c10 <test@@Base+0x15f8>
   128e8:	ldrb	r2, [r4, #5]
   128ec:	cmp	r2, #34	; 0x22
   128f0:	ldrne	r9, [sp, #20]
   128f4:	bne	12914 <test@@Base+0x2fc>
   128f8:	b	13260 <test@@Base+0xc48>
   128fc:	add	r0, r3, #1
   12900:	cmp	r5, r0
   12904:	beq	13268 <test@@Base+0xc50>
   12908:	ldrb	r2, [r3, #1]
   1290c:	cmp	r2, #34	; 0x22
   12910:	beq	1325c <test@@Base+0xc44>
   12914:	cmp	r2, #92	; 0x5c
   12918:	mov	r3, r0
   1291c:	bne	128fc <test@@Base+0x2e4>
   12920:	sub	r2, r5, r0
   12924:	add	r3, r0, #1
   12928:	cmp	r2, #1
   1292c:	bgt	128fc <test@@Base+0x2e4>
   12930:	cmp	r5, r0
   12934:	str	r9, [sp, #20]
   12938:	beq	12948 <test@@Base+0x330>
   1293c:	ldrb	r3, [r0]
   12940:	cmp	r3, #34	; 0x22
   12944:	beq	13260 <test@@Base+0xc48>
   12948:	mov	r1, r0
   1294c:	mov	r3, #20
   12950:	mov	r2, r5
   12954:	mov	r0, r6
   12958:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1295c:	sub	r3, r5, r0
   12960:	cmp	r3, #1
   12964:	ble	12978 <test@@Base+0x360>
   12968:	ldrb	r3, [r0]
   1296c:	cmp	r3, #32
   12970:	bhi	12988 <test@@Base+0x370>
   12974:	beq	13314 <test@@Base+0xcfc>
   12978:	mov	r1, r0
   1297c:	mov	r2, r5
   12980:	mov	r0, r6
   12984:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   12988:	cmp	r5, r0
   1298c:	beq	13b50 <test@@Base+0x1538>
   12990:	bls	13a28 <test@@Base+0x1410>
   12994:	ldrb	r3, [r0]
   12998:	cmp	r3, #58	; 0x3a
   1299c:	bne	13a28 <test@@Base+0x1410>
   129a0:	add	r4, r0, #1
   129a4:	sub	r3, r5, r4
   129a8:	cmp	r3, #1
   129ac:	ble	129c0 <test@@Base+0x3a8>
   129b0:	ldrb	r3, [r0, #1]
   129b4:	cmp	r3, #32
   129b8:	bhi	129d4 <test@@Base+0x3bc>
   129bc:	beq	13328 <test@@Base+0xd10>
   129c0:	mov	r1, r4
   129c4:	mov	r2, r5
   129c8:	mov	r0, r6
   129cc:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   129d0:	mov	r4, r0
   129d4:	cmp	r5, r4
   129d8:	beq	13bd4 <test@@Base+0x15bc>
   129dc:	mov	r3, #1
   129e0:	mov	r1, #0
   129e4:	ldr	r0, [sp, #20]
   129e8:	mov	r2, r3
   129ec:	bl	17b90 <flatcc_builder_table_add@@Base>
   129f0:	subs	r7, r0, #0
   129f4:	beq	12a34 <test@@Base+0x41c>
   129f8:	mov	ip, #0
   129fc:	mov	r0, #0
   12a00:	mov	r1, #0
   12a04:	add	r3, sp, #68	; 0x44
   12a08:	str	ip, [sp, #68]	; 0x44
   12a0c:	mov	r2, r5
   12a10:	strd	r0, [sp, #72]	; 0x48
   12a14:	mov	r1, r4
   12a18:	mov	r0, r6
   12a1c:	strb	ip, [r7]
   12a20:	add	ip, sp, #72	; 0x48
   12a24:	str	ip, [sp]
   12a28:	bl	1bcf4 <flatcc_json_parser_integer@@Base>
   12a2c:	cmp	r4, r0
   12a30:	bne	13238 <test@@Base+0xc20>
   12a34:	ldr	r9, [sp, #20]
   12a38:	ldr	r3, [pc, #332]	; 12b8c <test@@Base+0x574>
   12a3c:	ldr	fp, [sp, #40]	; 0x28
   12a40:	ldr	sl, [sp, #44]	; 0x2c
   12a44:	ldr	r3, [sl, r3]
   12a48:	ldr	r6, [r3]
   12a4c:	b	12714 <test@@Base+0xfc>
   12a50:	ldrb	r3, [r7, #1]
   12a54:	cmp	r3, #32
   12a58:	addhi	r7, r7, #1
   12a5c:	bls	126b0 <test@@Base+0x98>
   12a60:	b	126c4 <test@@Base+0xac>
   12a64:	mov	r3, #0
   12a68:	add	r1, pc, #232	; 0xe8
   12a6c:	ldrd	r0, [r1]
   12a70:	str	r3, [sp, #24]
   12a74:	str	fp, [sp, #28]
   12a78:	ldrd	r2, [sp, #24]
   12a7c:	cmp	r3, r1
   12a80:	cmpeq	r2, r0
   12a84:	bhi	12d2c <test@@Base+0x714>
   12a88:	add	r3, pc, #208	; 0xd0
   12a8c:	ldrd	r2, [r3]
   12a90:	cmp	fp, r3
   12a94:	cmpeq	sl, r2
   12a98:	bls	12e8c <test@@Base+0x874>
   12a9c:	add	r3, pc, #196	; 0xc4
   12aa0:	ldrd	r2, [r3]
   12aa4:	cmp	fp, r3
   12aa8:	cmpeq	sl, r2
   12aac:	bne	139e0 <test@@Base+0x13c8>
   12ab0:	sub	r3, r5, ip
   12ab4:	cmp	r3, #8
   12ab8:	bls	13470 <test@@Base+0xe58>
   12abc:	mov	r3, #0
   12ac0:	mov	lr, r3
   12ac4:	ldrb	r2, [ip, #3]
   12ac8:	orr	lr, lr, r2
   12acc:	ldrb	r2, [ip, #2]
   12ad0:	orr	lr, lr, r2, lsl #8
   12ad4:	ldrb	r2, [ip, #1]
   12ad8:	orr	lr, lr, r2, lsl #16
   12adc:	ldrb	r0, [ip]
   12ae0:	mov	r1, #0
   12ae4:	str	r1, [sp, #48]	; 0x30
   12ae8:	add	r3, pc, #128	; 0x80
   12aec:	ldrd	r2, [r3]
   12af0:	orr	r1, lr, r0, lsl #24
   12af4:	str	r1, [sp, #52]	; 0x34
   12af8:	ldrd	r0, [sp, #48]	; 0x30
   12afc:	cmp	r1, r3
   12b00:	cmpeq	r0, r2
   12b04:	bhi	134a0 <test@@Base+0xe88>
   12b08:	add	r3, pc, #104	; 0x68
   12b0c:	ldrd	r2, [r3]
   12b10:	cmp	r1, r3
   12b14:	cmpeq	r0, r2
   12b18:	bne	13d44 <test@@Base+0x172c>
   12b1c:	ldr	r3, [sp, #96]	; 0x60
   12b20:	add	r0, ip, #4
   12b24:	cmp	r3, #0
   12b28:	bne	137d0 <test@@Base+0x11b8>
   12b2c:	cmp	r0, r5
   12b30:	beq	13eec <test@@Base+0x18d4>
   12b34:	ldrb	r2, [ip, #4]
   12b38:	cmp	r2, #34	; 0x22
   12b3c:	ldrne	r9, [sp, #20]
   12b40:	bne	12bb0 <test@@Base+0x598>
   12b44:	b	13af0 <test@@Base+0x14d8>
   12b48:	mcrvs	15, 3, pc, cr3, cr15, {7}	; <UNPREDICTABLE>
   12b4c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12b50:	strvc	r0, [r0], #-0
   12b54:			; <UNDEFINED> instruction: 0x66697273
   12b58:			; <UNDEFINED> instruction: 0xffffffff
   12b5c:	bvc	1d6dd34 <__bss_end__@@Base+0x1d3dc50>
   12b60:	mcrvs	3, 3, r7, cr4, cr15, {0}
   12b64:	cmnvc	r5, #-1140850687	; 0xbc000001
   12b68:	cdpvs	3, 6, cr7, cr4, cr0, {1}
   12b6c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12b70:			; <UNDEFINED> instruction: 0xffffffff
   12b74:	stclvs	6, cr6, [r5], #-460	; 0xfffffe34
   12b78:	andeq	r0, r0, r0
   12b7c:	stfvse	f6, [r5], #-400	; 0xfffffe70
   12b80:	strheq	fp, [r0], -r8
   12b84:	andeq	sp, r1, r4, lsl #19
   12b88:	andeq	fp, r0, r4, asr #32
   12b8c:	andeq	r0, r0, r4, asr r0
   12b90:	andeq	fp, r0, ip, lsr r0
   12b94:	ldrdeq	sl, [r0], -r4
   12b98:	add	r0, r3, #1
   12b9c:	cmp	r5, r0
   12ba0:	beq	13b00 <test@@Base+0x14e8>
   12ba4:	ldrb	r2, [r3, #1]
   12ba8:	cmp	r2, #34	; 0x22
   12bac:	beq	13aec <test@@Base+0x14d4>
   12bb0:	cmp	r2, #92	; 0x5c
   12bb4:	mov	r3, r0
   12bb8:	bne	12b98 <test@@Base+0x580>
   12bbc:	sub	r2, r5, r0
   12bc0:	add	r3, r0, #1
   12bc4:	cmp	r2, #1
   12bc8:	bgt	12b98 <test@@Base+0x580>
   12bcc:	cmp	r0, r5
   12bd0:	str	r9, [sp, #20]
   12bd4:	beq	12be4 <test@@Base+0x5cc>
   12bd8:	ldrb	r3, [r0]
   12bdc:	cmp	r3, #34	; 0x22
   12be0:	beq	13af0 <test@@Base+0x14d8>
   12be4:	mov	r1, r0
   12be8:	mov	r3, #20
   12bec:	mov	r2, r5
   12bf0:	mov	r0, r6
   12bf4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   12bf8:	sub	r3, r5, r0
   12bfc:	cmp	r3, #1
   12c00:	ble	12c14 <test@@Base+0x5fc>
   12c04:	ldrb	r3, [r0]
   12c08:	cmp	r3, #32
   12c0c:	bhi	12c24 <test@@Base+0x60c>
   12c10:	beq	13b28 <test@@Base+0x1510>
   12c14:	mov	r1, r0
   12c18:	mov	r2, r5
   12c1c:	mov	r0, r6
   12c20:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   12c24:	cmp	r5, r0
   12c28:	beq	13e70 <test@@Base+0x1858>
   12c2c:	bls	13dbc <test@@Base+0x17a4>
   12c30:	ldrb	r3, [r0]
   12c34:	cmp	r3, #58	; 0x3a
   12c38:	bne	13dbc <test@@Base+0x17a4>
   12c3c:	add	r4, r0, #1
   12c40:	sub	r3, r5, r4
   12c44:	cmp	r3, #1
   12c48:	ble	12c5c <test@@Base+0x644>
   12c4c:	ldrb	r3, [r0, #1]
   12c50:	cmp	r3, #32
   12c54:	bhi	12c70 <test@@Base+0x658>
   12c58:	beq	13bc0 <test@@Base+0x15a8>
   12c5c:	mov	r1, r4
   12c60:	mov	r2, r5
   12c64:	mov	r0, r6
   12c68:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   12c6c:	mov	r4, r0
   12c70:	cmp	r5, r4
   12c74:	beq	13dfc <test@@Base+0x17e4>
   12c78:	mov	r3, #8
   12c7c:	mov	r1, #3
   12c80:	ldr	r0, [sp, #20]
   12c84:	mov	r2, r3
   12c88:	bl	17b90 <flatcc_builder_table_add@@Base>
   12c8c:	subs	r7, r0, #0
   12c90:	beq	12a34 <test@@Base+0x41c>
   12c94:	mov	r2, #0
   12c98:	mov	r8, #0
   12c9c:	mov	r9, #0
   12ca0:	add	ip, sp, #72	; 0x48
   12ca4:	add	r3, sp, #68	; 0x44
   12ca8:	mov	r1, r4
   12cac:	str	r2, [sp, #68]	; 0x44
   12cb0:	mov	r0, r6
   12cb4:	mov	r2, r5
   12cb8:	strd	r8, [sp, #72]	; 0x48
   12cbc:	strd	r8, [r7]
   12cc0:	str	ip, [sp]
   12cc4:	bl	1bcf4 <flatcc_json_parser_integer@@Base>
   12cc8:	cmp	r4, r0
   12ccc:	beq	12a34 <test@@Base+0x41c>
   12cd0:	ldr	r1, [sp, #68]	; 0x44
   12cd4:	ldrd	r2, [sp, #72]	; 0x48
   12cd8:	cmp	r1, #0
   12cdc:	beq	13c18 <test@@Base+0x1600>
   12ce0:	cmp	r3, #-2147483648	; 0x80000000
   12ce4:	cmpeq	r2, #0
   12ce8:	bhi	13950 <test@@Base+0x1338>
   12cec:	rsbs	r2, r2, #0
   12cf0:	rsc	r3, r3, #0
   12cf4:	strd	r2, [r7]
   12cf8:	b	130c8 <test@@Base+0xab0>
   12cfc:	sub	r3, ip, #1
   12d00:	cmp	r3, #7
   12d04:	addls	pc, pc, r3, lsl #2
   12d08:	b	139e0 <test@@Base+0x13c8>
   12d0c:	b	13670 <test@@Base+0x1058>
   12d10:	b	13664 <test@@Base+0x104c>
   12d14:	b	136a8 <test@@Base+0x1090>
   12d18:	b	1369c <test@@Base+0x1084>
   12d1c:	b	13690 <test@@Base+0x1078>
   12d20:	b	13684 <test@@Base+0x106c>
   12d24:	b	136b4 <test@@Base+0x109c>
   12d28:	b	12828 <test@@Base+0x210>
   12d2c:	add	r1, pc, #484	; 0x1e4
   12d30:	ldrd	r0, [r1]
   12d34:	ldrd	r2, [sp, #24]
   12d38:	cmp	r3, r1
   12d3c:	cmpeq	r2, r0
   12d40:	bne	139e0 <test@@Base+0x13c8>
   12d44:	ldr	r3, [sp, #96]	; 0x60
   12d48:	add	r0, r4, #4
   12d4c:	cmp	r3, #0
   12d50:	bne	12f34 <test@@Base+0x91c>
   12d54:	cmp	r0, r5
   12d58:	beq	13d04 <test@@Base+0x16ec>
   12d5c:	ldrb	r2, [r4, #4]
   12d60:	cmp	r2, #34	; 0x22
   12d64:	ldrne	r9, [sp, #20]
   12d68:	bne	12d88 <test@@Base+0x770>
   12d6c:	b	13728 <test@@Base+0x1110>
   12d70:	add	r0, r3, #1
   12d74:	cmp	r5, r0
   12d78:	beq	1376c <test@@Base+0x1154>
   12d7c:	ldrb	r2, [r3, #1]
   12d80:	cmp	r2, #34	; 0x22
   12d84:	beq	13724 <test@@Base+0x110c>
   12d88:	cmp	r2, #92	; 0x5c
   12d8c:	mov	r3, r0
   12d90:	bne	12d70 <test@@Base+0x758>
   12d94:	sub	r2, r5, r0
   12d98:	add	r3, r0, #1
   12d9c:	cmp	r2, #1
   12da0:	bgt	12d70 <test@@Base+0x758>
   12da4:	cmp	r5, r0
   12da8:	str	r9, [sp, #20]
   12dac:	beq	12dbc <test@@Base+0x7a4>
   12db0:	ldrb	r3, [r0]
   12db4:	cmp	r3, #34	; 0x22
   12db8:	beq	13728 <test@@Base+0x1110>
   12dbc:	mov	r1, r0
   12dc0:	mov	r3, #20
   12dc4:	mov	r2, r5
   12dc8:	mov	r0, r6
   12dcc:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   12dd0:	b	12f94 <test@@Base+0x97c>
   12dd4:	cmp	r0, r5
   12dd8:	beq	13c08 <test@@Base+0x15f0>
   12ddc:	ldrb	r3, [r4, #5]
   12de0:	cmp	r3, #32
   12de4:	bls	1295c <test@@Base+0x344>
   12de8:	ldr	r9, [sp, #20]
   12dec:	mov	ip, r0
   12df0:	sub	r2, r3, #48	; 0x30
   12df4:	cmp	r3, #46	; 0x2e
   12df8:	cmpne	r3, #95	; 0x5f
   12dfc:	uxtb	r2, r2
   12e00:	add	r1, ip, #1
   12e04:	mov	r0, ip
   12e08:	beq	12e3c <test@@Base+0x824>
   12e0c:	orr	ip, r3, #32
   12e10:	tst	r3, #128	; 0x80
   12e14:	sub	ip, ip, #97	; 0x61
   12e18:	bne	12e3c <test@@Base+0x824>
   12e1c:	cmp	r2, #9
   12e20:	uxtb	ip, ip
   12e24:	bls	12e3c <test@@Base+0x824>
   12e28:	cmp	ip, #25
   12e2c:	bls	12e38 <test@@Base+0x820>
   12e30:	str	r9, [sp, #20]
   12e34:	b	1295c <test@@Base+0x344>
   12e38:	add	r1, r0, #1
   12e3c:	cmp	r5, r1
   12e40:	mov	r0, r1
   12e44:	mov	ip, r1
   12e48:	beq	13774 <test@@Base+0x115c>
   12e4c:	ldrb	r2, [r1]
   12e50:	cmp	r2, #32
   12e54:	bls	13774 <test@@Base+0x115c>
   12e58:	mov	r3, r2
   12e5c:	b	12df0 <test@@Base+0x7d8>
   12e60:	ldr	r3, [pc, #196]	; 12f2c <test@@Base+0x914>
   12e64:	mov	r4, r5
   12e68:	mov	r2, #13
   12e6c:	mov	r1, #1
   12e70:	ldr	r0, [pc, #176]	; 12f28 <test@@Base+0x910>
   12e74:	ldr	r5, [sl, r3]
   12e78:	add	r0, pc, r0
   12e7c:	ldr	r3, [r5]
   12e80:	bl	1242c <fwrite@plt>
   12e84:	ldr	r6, [r5]
   12e88:	b	12714 <test@@Base+0xfc>
   12e8c:	add	r1, pc, #140	; 0x8c
   12e90:	ldrd	r0, [r1]
   12e94:	ldrd	r2, [sp, #8]
   12e98:	cmp	r3, r1
   12e9c:	cmpeq	r2, r0
   12ea0:	bne	139e0 <test@@Base+0x13c8>
   12ea4:	ldr	r3, [sp, #96]	; 0x60
   12ea8:	add	r0, r4, #6
   12eac:	cmp	r3, #0
   12eb0:	beq	1333c <test@@Base+0xd24>
   12eb4:	cmp	r0, r5
   12eb8:	beq	13de0 <test@@Base+0x17c8>
   12ebc:	ldrb	r3, [r4, #6]
   12ec0:	cmp	r3, #32
   12ec4:	bls	133b8 <test@@Base+0xda0>
   12ec8:	ldr	r9, [sp, #20]
   12ecc:	mov	ip, r0
   12ed0:	sub	r2, r3, #48	; 0x30
   12ed4:	cmp	r3, #46	; 0x2e
   12ed8:	cmpne	r3, #95	; 0x5f
   12edc:	uxtb	r2, r2
   12ee0:	add	r1, ip, #1
   12ee4:	mov	r0, ip
   12ee8:	beq	136e4 <test@@Base+0x10cc>
   12eec:	orr	ip, r3, #32
   12ef0:	tst	r3, #128	; 0x80
   12ef4:	sub	ip, ip, #97	; 0x61
   12ef8:	bne	136e4 <test@@Base+0x10cc>
   12efc:	cmp	r2, #9
   12f00:	uxtb	ip, ip
   12f04:	bls	136e4 <test@@Base+0x10cc>
   12f08:	cmp	ip, #25
   12f0c:	bls	136e0 <test@@Base+0x10c8>
   12f10:	str	r9, [sp, #20]
   12f14:	b	133b8 <test@@Base+0xda0>
   12f18:	andeq	r0, r0, r0
   12f1c:	bvc	1d6e0f8 <__bss_end__@@Base+0x1d3e014>
   12f20:	cdpvs	0, 6, cr0, cr4, cr0, {0}
   12f24:	cmnvc	r5, #-1140850687	; 0xbc000001
   12f28:	andeq	sl, r0, r4, lsr #17
   12f2c:	andeq	r0, r0, r4, asr r0
   12f30:	andeq	sl, r0, ip, ror #10
   12f34:	cmp	r0, r5
   12f38:	beq	13cfc <test@@Base+0x16e4>
   12f3c:	ldrb	r3, [r4, #4]
   12f40:	cmp	r3, #32
   12f44:	bls	12f94 <test@@Base+0x97c>
   12f48:	ldr	r9, [sp, #20]
   12f4c:	mov	ip, r0
   12f50:	sub	r2, r3, #48	; 0x30
   12f54:	cmp	r3, #46	; 0x2e
   12f58:	cmpne	r3, #95	; 0x5f
   12f5c:	uxtb	r2, r2
   12f60:	add	r1, ip, #1
   12f64:	mov	r0, ip
   12f68:	beq	131ec <test@@Base+0xbd4>
   12f6c:	orr	ip, r3, #32
   12f70:	tst	r3, #128	; 0x80
   12f74:	sub	ip, ip, #97	; 0x61
   12f78:	bne	131ec <test@@Base+0xbd4>
   12f7c:	cmp	r2, #9
   12f80:	uxtb	ip, ip
   12f84:	bls	131ec <test@@Base+0xbd4>
   12f88:	cmp	ip, #25
   12f8c:	bls	131e8 <test@@Base+0xbd0>
   12f90:	str	r9, [sp, #20]
   12f94:	sub	r3, r5, r0
   12f98:	cmp	r3, #1
   12f9c:	ble	12fb0 <test@@Base+0x998>
   12fa0:	ldrb	r3, [r0]
   12fa4:	cmp	r3, #32
   12fa8:	bhi	12fc0 <test@@Base+0x9a8>
   12fac:	beq	137a8 <test@@Base+0x1190>
   12fb0:	mov	r1, r0
   12fb4:	mov	r2, r5
   12fb8:	mov	r0, r6
   12fbc:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   12fc0:	cmp	r5, r0
   12fc4:	beq	13c6c <test@@Base+0x1654>
   12fc8:	bls	13b9c <test@@Base+0x1584>
   12fcc:	ldrb	r3, [r0]
   12fd0:	cmp	r3, #58	; 0x3a
   12fd4:	bne	13b9c <test@@Base+0x1584>
   12fd8:	add	r4, r0, #1
   12fdc:	sub	r3, r5, r4
   12fe0:	cmp	r3, #1
   12fe4:	ble	12ff8 <test@@Base+0x9e0>
   12fe8:	ldrb	r3, [r0, #1]
   12fec:	cmp	r3, #32
   12ff0:	bhi	1300c <test@@Base+0x9f4>
   12ff4:	beq	137bc <test@@Base+0x11a4>
   12ff8:	mov	r1, r4
   12ffc:	mov	r2, r5
   13000:	mov	r0, r6
   13004:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   13008:	mov	r4, r0
   1300c:	cmp	r5, r4
   13010:	beq	13cc8 <test@@Base+0x16b0>
   13014:	ldrb	r3, [r4]
   13018:	cmp	r3, #34	; 0x22
   1301c:	addeq	r7, r4, #1
   13020:	beq	1303c <test@@Base+0xa24>
   13024:	mov	r1, r4
   13028:	mov	r3, #16
   1302c:	mov	r2, r5
   13030:	mov	r0, r6
   13034:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   13038:	mov	r7, r0
   1303c:	mov	r2, r5
   13040:	mov	r1, r7
   13044:	mov	r0, r6
   13048:	bl	19f34 <flatcc_json_parser_string_part@@Base>
   1304c:	cmp	r5, r0
   13050:	mov	r4, r0
   13054:	beq	12a34 <test@@Base+0x41c>
   13058:	ldrb	r3, [r0]
   1305c:	sub	r8, r0, r7
   13060:	cmp	r3, #34	; 0x22
   13064:	bne	13270 <test@@Base+0xc58>
   13068:	mov	r1, r7
   1306c:	mov	r2, r8
   13070:	ldr	r0, [sp, #20]
   13074:	bl	178ac <flatcc_builder_create_string@@Base>
   13078:	mov	r7, r0
   1307c:	cmp	r7, #0
   13080:	beq	12a34 <test@@Base+0x41c>
   13084:	mov	r1, #10
   13088:	ldr	r0, [sp, #20]
   1308c:	bl	17dd4 <flatcc_builder_table_add_offset@@Base>
   13090:	cmp	r0, #0
   13094:	beq	12a34 <test@@Base+0x41c>
   13098:	cmp	r4, r5
   1309c:	str	r7, [r0]
   130a0:	beq	130b4 <test@@Base+0xa9c>
   130a4:	ldrb	r3, [r4]
   130a8:	cmp	r3, #34	; 0x22
   130ac:	addeq	r0, r4, #1
   130b0:	beq	130c8 <test@@Base+0xab0>
   130b4:	mov	r1, r4
   130b8:	mov	r3, #20
   130bc:	mov	r2, r5
   130c0:	mov	r0, r6
   130c4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   130c8:	sub	r3, r5, r0
   130cc:	cmp	r3, #1
   130d0:	ble	130e4 <test@@Base+0xacc>
   130d4:	ldrb	r3, [r0]
   130d8:	cmp	r3, #32
   130dc:	bhi	130f4 <test@@Base+0xadc>
   130e0:	beq	13210 <test@@Base+0xbf8>
   130e4:	mov	r1, r0
   130e8:	mov	r2, r5
   130ec:	mov	r0, r6
   130f0:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   130f4:	cmp	r5, r0
   130f8:	beq	13a4c <test@@Base+0x1434>
   130fc:	ldrb	r3, [r0]
   13100:	cmp	r3, #44	; 0x2c
   13104:	bne	13a84 <test@@Base+0x146c>
   13108:	add	r4, r0, #1
   1310c:	sub	r3, r5, r4
   13110:	cmp	r3, #1
   13114:	ble	13128 <test@@Base+0xb10>
   13118:	ldrb	r3, [r0, #1]
   1311c:	cmp	r3, #32
   13120:	bhi	1313c <test@@Base+0xb24>
   13124:	beq	13224 <test@@Base+0xc0c>
   13128:	mov	r1, r4
   1312c:	mov	r2, r5
   13130:	mov	r0, r6
   13134:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   13138:	mov	r4, r0
   1313c:	cmp	r5, r4
   13140:	beq	13aac <test@@Base+0x1494>
   13144:	ldrb	r3, [r4]
   13148:	cmp	r3, #125	; 0x7d
   1314c:	bne	127f4 <test@@Base+0x1dc>
   13150:	cmp	r5, r4
   13154:	ldr	r9, [sp, #20]
   13158:	movls	r8, r4
   1315c:	ldr	fp, [sp, #40]	; 0x28
   13160:	ldr	sl, [sp, #44]	; 0x2c
   13164:	bls	13970 <test@@Base+0x1358>
   13168:	mov	r0, r9
   1316c:	add	r7, r4, #1
   13170:	bl	16a40 <flatcc_builder_end_table@@Base>
   13174:	mov	r1, r0
   13178:	mov	r0, r9
   1317c:	bl	15160 <flatcc_builder_end_buffer@@Base>
   13180:	sub	r3, r5, r7
   13184:	cmp	r3, #1
   13188:	ble	131a0 <test@@Base+0xb88>
   1318c:	ldrb	r3, [r4, #1]
   13190:	cmp	r3, #32
   13194:	movhi	r4, r7
   13198:	bhi	131b4 <test@@Base+0xb9c>
   1319c:	beq	13de8 <test@@Base+0x17d0>
   131a0:	mov	r1, r7
   131a4:	mov	r0, r6
   131a8:	mov	r2, r5
   131ac:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   131b0:	mov	r4, r0
   131b4:	ldr	r3, [pc, #-656]	; 12f2c <test@@Base+0x914>
   131b8:	cmp	r5, r4
   131bc:	ldr	r5, [sl, r3]
   131c0:	ldr	r6, [r5]
   131c4:	beq	12714 <test@@Base+0xfc>
   131c8:	mov	r3, r6
   131cc:	mov	r2, #26
   131d0:	ldr	r0, [pc, #-680]	; 12f30 <test@@Base+0x918>
   131d4:	mov	r1, #1
   131d8:	add	r0, pc, r0
   131dc:	bl	1242c <fwrite@plt>
   131e0:	ldr	r6, [r5]
   131e4:	b	12714 <test@@Base+0xfc>
   131e8:	add	r1, r0, #1
   131ec:	cmp	r5, r1
   131f0:	mov	r0, r1
   131f4:	mov	ip, r1
   131f8:	beq	139ac <test@@Base+0x1394>
   131fc:	ldrb	r2, [r1]
   13200:	cmp	r2, #32
   13204:	bls	139ac <test@@Base+0x1394>
   13208:	mov	r3, r2
   1320c:	b	12f50 <test@@Base+0x938>
   13210:	ldrb	r3, [r0, #1]
   13214:	cmp	r3, #32
   13218:	addhi	r0, r0, #1
   1321c:	bls	130e4 <test@@Base+0xacc>
   13220:	b	130f4 <test@@Base+0xadc>
   13224:	ldrb	r3, [r0, #2]
   13228:	cmp	r3, #32
   1322c:	addhi	r4, r0, #2
   13230:	bls	13128 <test@@Base+0xb10>
   13234:	b	1313c <test@@Base+0xb24>
   13238:	ldr	r3, [sp, #68]	; 0x44
   1323c:	cmp	r3, #0
   13240:	bne	13950 <test@@Base+0x1338>
   13244:	ldrd	r2, [sp, #72]	; 0x48
   13248:	cmp	r3, #0
   1324c:	cmpeq	r2, #255	; 0xff
   13250:	strbls	r2, [r7]
   13254:	bls	130c8 <test@@Base+0xab0>
   13258:	b	13644 <test@@Base+0x102c>
   1325c:	str	r9, [sp, #20]
   13260:	add	r0, r0, #1
   13264:	b	1295c <test@@Base+0x344>
   13268:	str	r9, [sp, #20]
   1326c:	b	12948 <test@@Base+0x330>
   13270:	ldr	r0, [sp, #20]
   13274:	bl	15eb8 <flatcc_builder_start_string@@Base>
   13278:	mov	r1, r8
   1327c:	ldr	r0, [sp, #20]
   13280:	bl	15944 <flatcc_builder_extend_string@@Base>
   13284:	cmp	r0, #0
   13288:	beq	12a34 <test@@Base+0x41c>
   1328c:	mov	r2, r8
   13290:	mov	r1, r7
   13294:	add	r7, sp, #65	; 0x41
   13298:	add	r8, sp, #64	; 0x40
   1329c:	bl	12408 <memcpy@plt>
   132a0:	strd	sl, [sp, #56]	; 0x38
   132a4:	mov	fp, r7
   132a8:	ldr	r9, [sp, #20]
   132ac:	b	132c0 <test@@Base+0xca8>
   132b0:	bl	159f4 <flatcc_builder_append_string@@Base>
   132b4:	ldrb	r3, [r4]
   132b8:	cmp	r3, #34	; 0x22
   132bc:	beq	13794 <test@@Base+0x117c>
   132c0:	mov	r1, r4
   132c4:	mov	r3, r8
   132c8:	mov	r2, r5
   132cc:	mov	r0, r6
   132d0:	bl	1a73c <flatcc_json_parser_string_escape@@Base>
   132d4:	mov	r7, r0
   132d8:	ldrb	r2, [sp, #64]	; 0x40
   132dc:	mov	r1, fp
   132e0:	mov	r0, r9
   132e4:	bl	159f4 <flatcc_builder_append_string@@Base>
   132e8:	mov	r2, r5
   132ec:	mov	r1, r7
   132f0:	mov	r0, r6
   132f4:	bl	19f34 <flatcc_json_parser_string_part@@Base>
   132f8:	mov	r4, r0
   132fc:	sub	r2, r0, r7
   13300:	cmp	r5, r4
   13304:	mov	r1, r7
   13308:	mov	r0, r9
   1330c:	bne	132b0 <test@@Base+0xc98>
   13310:	b	12a38 <test@@Base+0x420>
   13314:	ldrb	r3, [r0, #1]
   13318:	cmp	r3, #32
   1331c:	addhi	r0, r0, #1
   13320:	bls	12978 <test@@Base+0x360>
   13324:	b	12988 <test@@Base+0x370>
   13328:	ldrb	r3, [r0, #2]
   1332c:	cmp	r3, #32
   13330:	addhi	r4, r0, #2
   13334:	bls	129c0 <test@@Base+0x3a8>
   13338:	b	129d4 <test@@Base+0x3bc>
   1333c:	cmp	r0, r5
   13340:	beq	13d80 <test@@Base+0x1768>
   13344:	ldrb	r2, [r4, #6]
   13348:	cmp	r2, #34	; 0x22
   1334c:	ldrne	r9, [sp, #20]
   13350:	bne	13370 <test@@Base+0xd58>
   13354:	b	13948 <test@@Base+0x1330>
   13358:	add	r0, r3, #1
   1335c:	cmp	r5, r0
   13360:	beq	13968 <test@@Base+0x1350>
   13364:	ldrb	r2, [r3, #1]
   13368:	cmp	r2, #34	; 0x22
   1336c:	beq	13944 <test@@Base+0x132c>
   13370:	cmp	r2, #92	; 0x5c
   13374:	mov	r3, r0
   13378:	bne	13358 <test@@Base+0xd40>
   1337c:	sub	r2, r5, r0
   13380:	add	r3, r0, #1
   13384:	cmp	r2, #1
   13388:	bgt	13358 <test@@Base+0xd40>
   1338c:	cmp	r5, r0
   13390:	str	r9, [sp, #20]
   13394:	beq	133a4 <test@@Base+0xd8c>
   13398:	ldrb	r3, [r0]
   1339c:	cmp	r3, #34	; 0x22
   133a0:	beq	13948 <test@@Base+0x1330>
   133a4:	mov	r1, r0
   133a8:	mov	r3, #20
   133ac:	mov	r2, r5
   133b0:	mov	r0, r6
   133b4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   133b8:	sub	r3, r5, r0
   133bc:	cmp	r3, #1
   133c0:	ble	133d4 <test@@Base+0xdbc>
   133c4:	ldrb	r3, [r0]
   133c8:	cmp	r3, #32
   133cc:	bhi	133e4 <test@@Base+0xdcc>
   133d0:	beq	139cc <test@@Base+0x13b4>
   133d4:	mov	r1, r0
   133d8:	mov	r2, r5
   133dc:	mov	r0, r6
   133e0:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   133e4:	cmp	r5, r0
   133e8:	beq	13d0c <test@@Base+0x16f4>
   133ec:	bls	13ca4 <test@@Base+0x168c>
   133f0:	ldrb	r3, [r0]
   133f4:	cmp	r3, #58	; 0x3a
   133f8:	bne	13ca4 <test@@Base+0x168c>
   133fc:	add	r4, r0, #1
   13400:	sub	r3, r5, r4
   13404:	cmp	r3, #1
   13408:	ble	1341c <test@@Base+0xe04>
   1340c:	ldrb	r3, [r0, #1]
   13410:	cmp	r3, #32
   13414:	bhi	13430 <test@@Base+0xe18>
   13418:	beq	13a14 <test@@Base+0x13fc>
   1341c:	mov	r1, r4
   13420:	mov	r2, r5
   13424:	mov	r0, r6
   13428:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1342c:	mov	r4, r0
   13430:	cmp	r5, r4
   13434:	beq	13d88 <test@@Base+0x1770>
   13438:	mov	r3, #8
   1343c:	mov	r1, #1
   13440:	ldr	r0, [sp, #20]
   13444:	mov	r2, r3
   13448:	bl	17b90 <flatcc_builder_table_add@@Base>
   1344c:	subs	r3, r0, #0
   13450:	beq	12a34 <test@@Base+0x41c>
   13454:	mov	r2, r5
   13458:	mov	r1, r4
   1345c:	mov	r0, r6
   13460:	bl	1ae84 <flatcc_json_parser_double@@Base>
   13464:	cmp	r0, r4
   13468:	bne	130c8 <test@@Base+0xab0>
   1346c:	b	12a34 <test@@Base+0x41c>
   13470:	sub	r3, r3, #1
   13474:	cmp	r3, #7
   13478:	addls	pc, pc, r3, lsl #2
   1347c:	b	13d44 <test@@Base+0x172c>
   13480:	b	136d8 <test@@Base+0x10c0>
   13484:	b	136d0 <test@@Base+0x10b8>
   13488:	b	136c8 <test@@Base+0x10b0>
   1348c:	b	136c0 <test@@Base+0x10a8>
   13490:	b	136c0 <test@@Base+0x10a8>
   13494:	b	136c0 <test@@Base+0x10a8>
   13498:	b	12abc <test@@Base+0x4a4>
   1349c:	b	12abc <test@@Base+0x4a4>
   134a0:	add	r3, pc, #952	; 0x3b8
   134a4:	ldrd	r2, [r3]
   134a8:	ldrd	r0, [sp, #48]	; 0x30
   134ac:	cmp	r1, r3
   134b0:	cmpeq	r0, r2
   134b4:	bne	13d44 <test@@Base+0x172c>
   134b8:	ldr	r3, [sp, #96]	; 0x60
   134bc:	add	r0, ip, #4
   134c0:	cmp	r3, #0
   134c4:	bne	138b8 <test@@Base+0x12a0>
   134c8:	cmp	r0, r5
   134cc:	beq	13ee4 <test@@Base+0x18cc>
   134d0:	ldrb	r2, [ip, #4]
   134d4:	cmp	r2, #34	; 0x22
   134d8:	ldrne	r9, [sp, #20]
   134dc:	bne	134fc <test@@Base+0xee4>
   134e0:	b	13ae4 <test@@Base+0x14cc>
   134e4:	add	r0, r3, #1
   134e8:	cmp	r5, r0
   134ec:	beq	13af8 <test@@Base+0x14e0>
   134f0:	ldrb	r2, [r3, #1]
   134f4:	cmp	r2, #34	; 0x22
   134f8:	beq	13ae0 <test@@Base+0x14c8>
   134fc:	cmp	r2, #92	; 0x5c
   13500:	mov	r3, r0
   13504:	bne	134e4 <test@@Base+0xecc>
   13508:	sub	r2, r5, r0
   1350c:	add	r3, r0, #1
   13510:	cmp	r2, #1
   13514:	bgt	134e4 <test@@Base+0xecc>
   13518:	cmp	r5, r0
   1351c:	str	r9, [sp, #20]
   13520:	beq	13530 <test@@Base+0xf18>
   13524:	ldrb	r3, [r0]
   13528:	cmp	r3, #34	; 0x22
   1352c:	beq	13ae4 <test@@Base+0x14cc>
   13530:	mov	r1, r0
   13534:	mov	r3, #20
   13538:	mov	r2, r5
   1353c:	mov	r0, r6
   13540:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   13544:	sub	r3, r5, r0
   13548:	cmp	r3, #1
   1354c:	ble	13560 <test@@Base+0xf48>
   13550:	ldrb	r3, [r0]
   13554:	cmp	r3, #32
   13558:	bhi	13570 <test@@Base+0xf58>
   1355c:	beq	13b3c <test@@Base+0x1524>
   13560:	mov	r1, r0
   13564:	mov	r2, r5
   13568:	mov	r0, r6
   1356c:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   13570:	cmp	r5, r0
   13574:	beq	13e30 <test@@Base+0x1818>
   13578:	bls	13d5c <test@@Base+0x1744>
   1357c:	ldrb	r3, [r0]
   13580:	cmp	r3, #58	; 0x3a
   13584:	bne	13d5c <test@@Base+0x1744>
   13588:	add	r4, r0, #1
   1358c:	sub	r3, r5, r4
   13590:	cmp	r3, #1
   13594:	ble	135a8 <test@@Base+0xf90>
   13598:	ldrb	r3, [r0, #1]
   1359c:	cmp	r3, #32
   135a0:	bhi	135bc <test@@Base+0xfa4>
   135a4:	beq	13b88 <test@@Base+0x1570>
   135a8:	mov	r1, r4
   135ac:	mov	r2, r5
   135b0:	mov	r0, r6
   135b4:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   135b8:	mov	r4, r0
   135bc:	cmp	r5, r4
   135c0:	beq	13eb0 <test@@Base+0x1898>
   135c4:	mov	r3, #4
   135c8:	mov	r1, #2
   135cc:	ldr	r0, [sp, #20]
   135d0:	mov	r2, r3
   135d4:	bl	17b90 <flatcc_builder_table_add@@Base>
   135d8:	subs	r7, r0, #0
   135dc:	beq	12a34 <test@@Base+0x41c>
   135e0:	mov	r0, #0
   135e4:	add	ip, sp, #72	; 0x48
   135e8:	mov	r8, #0
   135ec:	mov	r9, #0
   135f0:	add	r3, sp, #68	; 0x44
   135f4:	mov	r2, r5
   135f8:	str	r0, [sp, #68]	; 0x44
   135fc:	mov	r1, r4
   13600:	strd	r8, [sp, #72]	; 0x48
   13604:	str	r0, [r7]
   13608:	mov	r0, r6
   1360c:	str	ip, [sp]
   13610:	bl	1bcf4 <flatcc_json_parser_integer@@Base>
   13614:	cmp	r4, r0
   13618:	beq	12a34 <test@@Base+0x41c>
   1361c:	ldr	r3, [sp, #68]	; 0x44
   13620:	cmp	r3, #0
   13624:	bne	13950 <test@@Base+0x1338>
   13628:	ldrd	r2, [sp, #72]	; 0x48
   1362c:	mov	r9, #0
   13630:	mvn	r8, #0
   13634:	cmp	r3, r9
   13638:	cmpeq	r2, r8
   1363c:	strls	r2, [r7]
   13640:	bls	130c8 <test@@Base+0xab0>
   13644:	mov	r1, r0
   13648:	mov	r3, #7
   1364c:	mov	r2, r5
   13650:	mov	r0, r6
   13654:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   13658:	cmp	r4, r0
   1365c:	bne	130c8 <test@@Base+0xab0>
   13660:	b	12a34 <test@@Base+0x41c>
   13664:	mov	r2, #0
   13668:	mov	r3, r2
   1366c:	b	12864 <test@@Base+0x24c>
   13670:	ldrb	r2, [r4]
   13674:	mov	sl, #0
   13678:	mov	ip, r5
   1367c:	lsl	fp, r2, #24
   13680:	b	12884 <test@@Base+0x26c>
   13684:	mov	r1, #0
   13688:	mov	lr, r1
   1368c:	b	1283c <test@@Base+0x224>
   13690:	mov	r1, #0
   13694:	mov	r0, r1
   13698:	b	12848 <test@@Base+0x230>
   1369c:	mov	r2, #0
   136a0:	mov	lr, r2
   136a4:	b	12854 <test@@Base+0x23c>
   136a8:	mov	r2, #0
   136ac:	mov	r3, r2
   136b0:	b	1285c <test@@Base+0x244>
   136b4:	mov	r2, #0
   136b8:	mov	r3, #0
   136bc:	b	12830 <test@@Base+0x218>
   136c0:	mov	lr, #0
   136c4:	b	12ac4 <test@@Base+0x4ac>
   136c8:	mov	lr, #0
   136cc:	b	12acc <test@@Base+0x4b4>
   136d0:	mov	lr, #0
   136d4:	b	12ad4 <test@@Base+0x4bc>
   136d8:	mov	lr, #0
   136dc:	b	12adc <test@@Base+0x4c4>
   136e0:	add	r1, r0, #1
   136e4:	cmp	r5, r1
   136e8:	mov	r0, r1
   136ec:	mov	ip, r1
   136f0:	beq	13b08 <test@@Base+0x14f0>
   136f4:	ldrb	r2, [r1]
   136f8:	cmp	r2, #32
   136fc:	bls	13b08 <test@@Base+0x14f0>
   13700:	mov	r3, r2
   13704:	b	12ed0 <test@@Base+0x8b8>
   13708:	mov	r1, r4
   1370c:	mov	r3, #5
   13710:	mov	r2, r5
   13714:	mov	r0, r6
   13718:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1371c:	mov	r4, r0
   13720:	b	1281c <test@@Base+0x204>
   13724:	str	r9, [sp, #20]
   13728:	add	r0, r0, #1
   1372c:	b	12f94 <test@@Base+0x97c>
   13730:	ldr	r3, [pc, #376]	; 138b0 <test@@Base+0x1298>
   13734:	mov	r2, #13
   13738:	mov	r1, #1
   1373c:	ldr	r0, [pc, #292]	; 13868 <test@@Base+0x1250>
   13740:	ldr	r5, [sl, r3]
   13744:	add	r0, pc, r0
   13748:	ldr	r3, [r5]
   1374c:	bl	1242c <fwrite@plt>
   13750:	ldr	r6, [r5]
   13754:	b	12714 <test@@Base+0xfc>
   13758:	ldrb	r3, [r7, #2]
   1375c:	cmp	r3, #32
   13760:	addhi	r4, r7, #2
   13764:	bls	127c0 <test@@Base+0x1a8>
   13768:	b	127d4 <test@@Base+0x1bc>
   1376c:	str	r9, [sp, #20]
   13770:	b	12dbc <test@@Base+0x7a4>
   13774:	cmp	r3, #46	; 0x2e
   13778:	str	r9, [sp, #20]
   1377c:	bne	1295c <test@@Base+0x344>
   13780:	mov	r3, #5
   13784:	mov	r2, r5
   13788:	mov	r0, r6
   1378c:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   13790:	b	1295c <test@@Base+0x344>
   13794:	mov	r0, r9
   13798:	str	r9, [sp, #20]
   1379c:	bl	17a4c <flatcc_builder_end_string@@Base>
   137a0:	mov	r7, r0
   137a4:	b	1307c <test@@Base+0xa64>
   137a8:	ldrb	r3, [r0, #1]
   137ac:	cmp	r3, #32
   137b0:	addhi	r0, r0, #1
   137b4:	bls	12fb0 <test@@Base+0x998>
   137b8:	b	12fc0 <test@@Base+0x9a8>
   137bc:	ldrb	r3, [r0, #2]
   137c0:	cmp	r3, #32
   137c4:	addhi	r4, r0, #2
   137c8:	bls	12ff8 <test@@Base+0x9e0>
   137cc:	b	1300c <test@@Base+0x9f4>
   137d0:	cmp	r0, r5
   137d4:	beq	13e68 <test@@Base+0x1850>
   137d8:	ldrb	r3, [ip, #4]
   137dc:	cmp	r3, #32
   137e0:	bls	12bf8 <test@@Base+0x5e0>
   137e4:	ldr	r9, [sp, #20]
   137e8:	mov	ip, r0
   137ec:	sub	r2, r3, #48	; 0x30
   137f0:	cmp	r3, #46	; 0x2e
   137f4:	cmpne	r3, #95	; 0x5f
   137f8:	uxtb	r2, r2
   137fc:	add	r1, ip, #1
   13800:	mov	r0, ip
   13804:	beq	13838 <test@@Base+0x1220>
   13808:	orr	ip, r3, #32
   1380c:	tst	r3, #128	; 0x80
   13810:	sub	ip, ip, #97	; 0x61
   13814:	bne	13838 <test@@Base+0x1220>
   13818:	cmp	r2, #9
   1381c:	uxtb	ip, ip
   13820:	bls	13838 <test@@Base+0x1220>
   13824:	cmp	ip, #25
   13828:	bls	13834 <test@@Base+0x121c>
   1382c:	str	r9, [sp, #20]
   13830:	b	12bf8 <test@@Base+0x5e0>
   13834:	add	r1, r0, #1
   13838:	cmp	r5, r1
   1383c:	mov	r0, r1
   13840:	mov	ip, r1
   13844:	beq	13c4c <test@@Base+0x1634>
   13848:	ldrb	r2, [r1]
   1384c:	cmp	r2, #32
   13850:	bls	13c4c <test@@Base+0x1634>
   13854:	mov	r3, r2
   13858:	b	137ec <test@@Base+0x11d4>
   1385c:	nop	{0}
   13860:	andeq	r0, r0, r0
   13864:	stclvs	6, cr6, [r5], #-464	; 0xfffffe30
   13868:	ldrdeq	r9, [r0], -r8
   1386c:	andeq	r9, r0, ip, lsr #27
   13870:	strdeq	r9, [r0], -r0
   13874:			; <UNDEFINED> instruction: 0x00009cb4
   13878:	andeq	r9, r0, r8, asr ip
   1387c:			; <UNDEFINED> instruction: 0x00009bb0
   13880:	andeq	r9, r0, ip, ror fp
   13884:	andeq	r9, r0, r0, lsr fp
   13888:	muleq	r0, r4, sl
   1388c:	andeq	r9, r0, r4, ror sl
   13890:	andeq	r9, r0, ip, lsr sl
   13894:	strdeq	r9, [r0], -r4
   13898:			; <UNDEFINED> instruction: 0x000099bc
   1389c:	andeq	r9, r0, ip, ror r9
   138a0:	andeq	r9, r0, ip, asr r9
   138a4:	andeq	r9, r0, r8, lsl #18
   138a8:	ldrdeq	r9, [r0], -r0
   138ac:	muleq	r0, r0, r8
   138b0:	andeq	r0, r0, r4, asr r0
   138b4:	andeq	r9, r0, r4, asr r8
   138b8:	cmp	r0, r5
   138bc:	beq	13ea8 <test@@Base+0x1890>
   138c0:	ldrb	r3, [ip, #4]
   138c4:	cmp	r3, #32
   138c8:	bls	13544 <test@@Base+0xf2c>
   138cc:	ldr	r9, [sp, #20]
   138d0:	mov	ip, r0
   138d4:	sub	r2, r3, #48	; 0x30
   138d8:	cmp	r3, #46	; 0x2e
   138dc:	cmpne	r3, #95	; 0x5f
   138e0:	uxtb	r2, r2
   138e4:	add	r1, ip, #1
   138e8:	mov	r0, ip
   138ec:	beq	13920 <test@@Base+0x1308>
   138f0:	orr	ip, r3, #32
   138f4:	tst	r3, #128	; 0x80
   138f8:	sub	ip, ip, #97	; 0x61
   138fc:	bne	13920 <test@@Base+0x1308>
   13900:	cmp	r2, #9
   13904:	uxtb	ip, ip
   13908:	bls	13920 <test@@Base+0x1308>
   1390c:	cmp	ip, #25
   13910:	bls	1391c <test@@Base+0x1304>
   13914:	str	r9, [sp, #20]
   13918:	b	13544 <test@@Base+0xf2c>
   1391c:	add	r1, r0, #1
   13920:	cmp	r5, r1
   13924:	mov	r0, r1
   13928:	mov	ip, r1
   1392c:	beq	13c2c <test@@Base+0x1614>
   13930:	ldrb	r2, [r1]
   13934:	cmp	r2, #32
   13938:	bls	13c2c <test@@Base+0x1614>
   1393c:	mov	r3, r2
   13940:	b	138d4 <test@@Base+0x12bc>
   13944:	str	r9, [sp, #20]
   13948:	add	r0, r0, #1
   1394c:	b	133b8 <test@@Base+0xda0>
   13950:	mov	r1, r0
   13954:	mov	r3, #8
   13958:	mov	r2, r5
   1395c:	mov	r0, r6
   13960:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   13964:	b	13658 <test@@Base+0x1040>
   13968:	str	r9, [sp, #20]
   1396c:	b	133a4 <test@@Base+0xd8c>
   13970:	ldr	r3, [pc, #-200]	; 138b0 <test@@Base+0x1298>
   13974:	mov	r2, #125	; 0x7d
   13978:	ldr	r1, [pc, #-276]	; 1386c <test@@Base+0x1254>
   1397c:	ldr	r7, [sl, r3]
   13980:	add	r1, pc, r1
   13984:	ldr	r0, [r7]
   13988:	bl	12468 <fprintf@plt>
   1398c:	mov	r0, r6
   13990:	mov	r2, r5
   13994:	mov	r1, r8
   13998:	mov	r3, #17
   1399c:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   139a0:	mov	r4, r0
   139a4:	ldr	r6, [r7]
   139a8:	b	12714 <test@@Base+0xfc>
   139ac:	cmp	r3, #46	; 0x2e
   139b0:	str	r9, [sp, #20]
   139b4:	bne	12f94 <test@@Base+0x97c>
   139b8:	mov	r3, #5
   139bc:	mov	r2, r5
   139c0:	mov	r0, r6
   139c4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   139c8:	b	12f94 <test@@Base+0x97c>
   139cc:	ldrb	r3, [r0, #1]
   139d0:	cmp	r3, #32
   139d4:	addhi	r0, r0, #1
   139d8:	bls	133d4 <test@@Base+0xdbc>
   139dc:	b	133e4 <test@@Base+0xdcc>
   139e0:	ldr	r9, [sp, #20]
   139e4:	mov	r2, r5
   139e8:	mov	r1, r4
   139ec:	ldr	fp, [sp, #40]	; 0x28
   139f0:	ldr	sl, [sp, #44]	; 0x2c
   139f4:	mov	r0, r6
   139f8:	mov	r3, #13
   139fc:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   13a00:	ldr	r3, [pc, #-344]	; 138b0 <test@@Base+0x1298>
   13a04:	mov	r4, r0
   13a08:	ldr	r3, [sl, r3]
   13a0c:	ldr	r6, [r3]
   13a10:	b	12714 <test@@Base+0xfc>
   13a14:	ldrb	r3, [r0, #2]
   13a18:	cmp	r3, #32
   13a1c:	addhi	r4, r0, #2
   13a20:	bls	1341c <test@@Base+0xe04>
   13a24:	b	13430 <test@@Base+0xe18>
   13a28:	ldr	r1, [pc, #-448]	; 13870 <test@@Base+0x1258>
   13a2c:	mov	r7, r0
   13a30:	mov	r2, #58	; 0x3a
   13a34:	ldr	r3, [pc, #-396]	; 138b0 <test@@Base+0x1298>
   13a38:	ldr	r9, [sp, #20]
   13a3c:	add	r1, pc, r1
   13a40:	ldr	fp, [sp, #40]	; 0x28
   13a44:	ldr	sl, [sp, #44]	; 0x2c
   13a48:	b	126ec <test@@Base+0xd4>
   13a4c:	ldr	r3, [pc, #-420]	; 138b0 <test@@Base+0x1298>
   13a50:	mov	r4, r5
   13a54:	mov	r2, #13
   13a58:	mov	r1, #1
   13a5c:	ldr	r0, [pc, #-496]	; 13874 <test@@Base+0x125c>
   13a60:	ldr	sl, [sp, #44]	; 0x2c
   13a64:	ldr	r9, [sp, #20]
   13a68:	add	r0, pc, r0
   13a6c:	ldr	fp, [sp, #40]	; 0x28
   13a70:	ldr	r5, [sl, r3]
   13a74:	ldr	r3, [r5]
   13a78:	bl	1242c <fwrite@plt>
   13a7c:	ldr	r6, [r5]
   13a80:	b	12714 <test@@Base+0xfc>
   13a84:	cmp	r5, r0
   13a88:	mov	r8, r0
   13a8c:	ldr	r9, [sp, #20]
   13a90:	ldr	fp, [sp, #40]	; 0x28
   13a94:	ldr	sl, [sp, #44]	; 0x2c
   13a98:	bls	13970 <test@@Base+0x1358>
   13a9c:	cmp	r3, #125	; 0x7d
   13aa0:	bne	13970 <test@@Base+0x1358>
   13aa4:	mov	r4, r0
   13aa8:	b	13168 <test@@Base+0xb50>
   13aac:	ldr	r3, [pc, #-516]	; 138b0 <test@@Base+0x1298>
   13ab0:	mov	r2, #13
   13ab4:	mov	r1, #1
   13ab8:	ldr	r0, [pc, #-584]	; 13878 <test@@Base+0x1260>
   13abc:	ldr	sl, [sp, #44]	; 0x2c
   13ac0:	ldr	r9, [sp, #20]
   13ac4:	add	r0, pc, r0
   13ac8:	ldr	fp, [sp, #40]	; 0x28
   13acc:	ldr	r5, [sl, r3]
   13ad0:	ldr	r3, [r5]
   13ad4:	bl	1242c <fwrite@plt>
   13ad8:	ldr	r6, [r5]
   13adc:	b	12714 <test@@Base+0xfc>
   13ae0:	str	r9, [sp, #20]
   13ae4:	add	r0, r0, #1
   13ae8:	b	13544 <test@@Base+0xf2c>
   13aec:	str	r9, [sp, #20]
   13af0:	add	r0, r0, #1
   13af4:	b	12bf8 <test@@Base+0x5e0>
   13af8:	str	r9, [sp, #20]
   13afc:	b	13530 <test@@Base+0xf18>
   13b00:	str	r9, [sp, #20]
   13b04:	b	12be4 <test@@Base+0x5cc>
   13b08:	cmp	r3, #46	; 0x2e
   13b0c:	str	r9, [sp, #20]
   13b10:	bne	133b8 <test@@Base+0xda0>
   13b14:	mov	r3, #5
   13b18:	mov	r2, r5
   13b1c:	mov	r0, r6
   13b20:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   13b24:	b	133b8 <test@@Base+0xda0>
   13b28:	ldrb	r3, [r0, #1]
   13b2c:	cmp	r3, #32
   13b30:	addhi	r0, r0, #1
   13b34:	bls	12c14 <test@@Base+0x5fc>
   13b38:	b	12c24 <test@@Base+0x60c>
   13b3c:	ldrb	r3, [r0, #1]
   13b40:	cmp	r3, #32
   13b44:	addhi	r0, r0, #1
   13b48:	bls	13560 <test@@Base+0xf48>
   13b4c:	b	13570 <test@@Base+0xf58>
   13b50:	ldr	r3, [pc, #-680]	; 138b0 <test@@Base+0x1298>
   13b54:	mov	r4, r5
   13b58:	mov	r2, #13
   13b5c:	mov	r1, #1
   13b60:	ldr	r0, [pc, #-748]	; 1387c <test@@Base+0x1264>
   13b64:	ldr	sl, [sp, #44]	; 0x2c
   13b68:	ldr	r9, [sp, #20]
   13b6c:	add	r0, pc, r0
   13b70:	ldr	fp, [sp, #40]	; 0x28
   13b74:	ldr	r5, [sl, r3]
   13b78:	ldr	r3, [r5]
   13b7c:	bl	1242c <fwrite@plt>
   13b80:	ldr	r6, [r5]
   13b84:	b	12714 <test@@Base+0xfc>
   13b88:	ldrb	r3, [r0, #2]
   13b8c:	cmp	r3, #32
   13b90:	addhi	r4, r0, #2
   13b94:	bls	135a8 <test@@Base+0xf90>
   13b98:	b	135bc <test@@Base+0xfa4>
   13b9c:	ldr	r1, [pc, #-804]	; 13880 <test@@Base+0x1268>
   13ba0:	mov	r7, r0
   13ba4:	mov	r2, #58	; 0x3a
   13ba8:	ldr	r3, [pc, #-768]	; 138b0 <test@@Base+0x1298>
   13bac:	ldr	r9, [sp, #20]
   13bb0:	add	r1, pc, r1
   13bb4:	ldr	fp, [sp, #40]	; 0x28
   13bb8:	ldr	sl, [sp, #44]	; 0x2c
   13bbc:	b	126ec <test@@Base+0xd4>
   13bc0:	ldrb	r3, [r0, #2]
   13bc4:	cmp	r3, #32
   13bc8:	addhi	r4, r0, #2
   13bcc:	bls	12c5c <test@@Base+0x644>
   13bd0:	b	12c70 <test@@Base+0x658>
   13bd4:	ldr	r3, [pc, #-812]	; 138b0 <test@@Base+0x1298>
   13bd8:	mov	r2, #13
   13bdc:	mov	r1, #1
   13be0:	ldr	r0, [pc, #-868]	; 13884 <test@@Base+0x126c>
   13be4:	ldr	sl, [sp, #44]	; 0x2c
   13be8:	ldr	r9, [sp, #20]
   13bec:	add	r0, pc, r0
   13bf0:	ldr	fp, [sp, #40]	; 0x28
   13bf4:	ldr	r5, [sl, r3]
   13bf8:	ldr	r3, [r5]
   13bfc:	bl	1242c <fwrite@plt>
   13c00:	ldr	r6, [r5]
   13c04:	b	12714 <test@@Base+0xfc>
   13c08:	mov	r0, r5
   13c0c:	b	12978 <test@@Base+0x360>
   13c10:	mov	r0, r5
   13c14:	b	12948 <test@@Base+0x330>
   13c18:	cmp	r2, #0
   13c1c:	sbcs	r1, r3, #0
   13c20:	strdge	r2, [r7]
   13c24:	bge	130c8 <test@@Base+0xab0>
   13c28:	b	13644 <test@@Base+0x102c>
   13c2c:	cmp	r3, #46	; 0x2e
   13c30:	str	r9, [sp, #20]
   13c34:	bne	13544 <test@@Base+0xf2c>
   13c38:	mov	r3, #5
   13c3c:	mov	r2, r5
   13c40:	mov	r0, r6
   13c44:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   13c48:	b	13544 <test@@Base+0xf2c>
   13c4c:	cmp	r3, #46	; 0x2e
   13c50:	str	r9, [sp, #20]
   13c54:	bne	12bf8 <test@@Base+0x5e0>
   13c58:	mov	r3, #5
   13c5c:	mov	r2, r5
   13c60:	mov	r0, r6
   13c64:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   13c68:	b	12bf8 <test@@Base+0x5e0>
   13c6c:	ldr	r3, [pc, #-964]	; 138b0 <test@@Base+0x1298>
   13c70:	mov	r4, r5
   13c74:	mov	r2, #13
   13c78:	mov	r1, #1
   13c7c:	ldr	r0, [pc, #-1020]	; 13888 <test@@Base+0x1270>
   13c80:	ldr	sl, [sp, #44]	; 0x2c
   13c84:	ldr	r9, [sp, #20]
   13c88:	add	r0, pc, r0
   13c8c:	ldr	fp, [sp, #40]	; 0x28
   13c90:	ldr	r5, [sl, r3]
   13c94:	ldr	r3, [r5]
   13c98:	bl	1242c <fwrite@plt>
   13c9c:	ldr	r6, [r5]
   13ca0:	b	12714 <test@@Base+0xfc>
   13ca4:	ldr	r1, [pc, #-1056]	; 1388c <test@@Base+0x1274>
   13ca8:	mov	r7, r0
   13cac:	mov	r2, #58	; 0x3a
   13cb0:	ldr	r3, [pc, #-1032]	; 138b0 <test@@Base+0x1298>
   13cb4:	ldr	r9, [sp, #20]
   13cb8:	add	r1, pc, r1
   13cbc:	ldr	fp, [sp, #40]	; 0x28
   13cc0:	ldr	sl, [sp, #44]	; 0x2c
   13cc4:	b	126ec <test@@Base+0xd4>
   13cc8:	ldr	r3, [pc, #-1056]	; 138b0 <test@@Base+0x1298>
   13ccc:	mov	r2, #13
   13cd0:	mov	r1, #1
   13cd4:	ldr	r0, [pc, #-1100]	; 13890 <test@@Base+0x1278>
   13cd8:	ldr	sl, [sp, #44]	; 0x2c
   13cdc:	ldr	r9, [sp, #20]
   13ce0:	add	r0, pc, r0
   13ce4:	ldr	fp, [sp, #40]	; 0x28
   13ce8:	ldr	r5, [sl, r3]
   13cec:	ldr	r3, [r5]
   13cf0:	bl	1242c <fwrite@plt>
   13cf4:	ldr	r6, [r5]
   13cf8:	b	12714 <test@@Base+0xfc>
   13cfc:	mov	r0, r5
   13d00:	b	12fb0 <test@@Base+0x998>
   13d04:	mov	r0, r5
   13d08:	b	12dbc <test@@Base+0x7a4>
   13d0c:	ldr	r3, [pc, #-1124]	; 138b0 <test@@Base+0x1298>
   13d10:	mov	r4, r5
   13d14:	mov	r2, #13
   13d18:	mov	r1, #1
   13d1c:	ldr	r0, [pc, #-1168]	; 13894 <test@@Base+0x127c>
   13d20:	ldr	sl, [sp, #44]	; 0x2c
   13d24:	ldr	r9, [sp, #20]
   13d28:	add	r0, pc, r0
   13d2c:	ldr	fp, [sp, #40]	; 0x28
   13d30:	ldr	r5, [sl, r3]
   13d34:	ldr	r3, [r5]
   13d38:	bl	1242c <fwrite@plt>
   13d3c:	ldr	r6, [r5]
   13d40:	b	12714 <test@@Base+0xfc>
   13d44:	mov	r2, r5
   13d48:	mov	r1, ip
   13d4c:	ldr	r9, [sp, #20]
   13d50:	ldr	fp, [sp, #40]	; 0x28
   13d54:	ldr	sl, [sp, #44]	; 0x2c
   13d58:	b	139f4 <test@@Base+0x13dc>
   13d5c:	ldr	r1, [pc, #-1228]	; 13898 <test@@Base+0x1280>
   13d60:	mov	r7, r0
   13d64:	mov	r2, #58	; 0x3a
   13d68:	ldr	r3, [pc, #-1216]	; 138b0 <test@@Base+0x1298>
   13d6c:	ldr	r9, [sp, #20]
   13d70:	add	r1, pc, r1
   13d74:	ldr	fp, [sp, #40]	; 0x28
   13d78:	ldr	sl, [sp, #44]	; 0x2c
   13d7c:	b	126ec <test@@Base+0xd4>
   13d80:	mov	r0, r5
   13d84:	b	133a4 <test@@Base+0xd8c>
   13d88:	ldr	r3, [pc, #-1248]	; 138b0 <test@@Base+0x1298>
   13d8c:	mov	r2, #13
   13d90:	mov	r1, #1
   13d94:	ldr	r0, [pc, #-1280]	; 1389c <test@@Base+0x1284>
   13d98:	ldr	sl, [sp, #44]	; 0x2c
   13d9c:	ldr	r9, [sp, #20]
   13da0:	add	r0, pc, r0
   13da4:	ldr	fp, [sp, #40]	; 0x28
   13da8:	ldr	r5, [sl, r3]
   13dac:	ldr	r3, [r5]
   13db0:	bl	1242c <fwrite@plt>
   13db4:	ldr	r6, [r5]
   13db8:	b	12714 <test@@Base+0xfc>
   13dbc:	ldr	r1, [pc, #-1316]	; 138a0 <test@@Base+0x1288>
   13dc0:	mov	r7, r0
   13dc4:	mov	r2, #58	; 0x3a
   13dc8:	ldr	r3, [pc, #-1312]	; 138b0 <test@@Base+0x1298>
   13dcc:	ldr	r9, [sp, #20]
   13dd0:	add	r1, pc, r1
   13dd4:	ldr	fp, [sp, #40]	; 0x28
   13dd8:	ldr	sl, [sp, #44]	; 0x2c
   13ddc:	b	126ec <test@@Base+0xd4>
   13de0:	mov	r0, r5
   13de4:	b	133d4 <test@@Base+0xdbc>
   13de8:	ldrb	r3, [r4, #2]
   13dec:	cmp	r3, #32
   13df0:	addhi	r4, r4, #2
   13df4:	bls	131a0 <test@@Base+0xb88>
   13df8:	b	131b4 <test@@Base+0xb9c>
   13dfc:	ldr	r3, [pc, #-1364]	; 138b0 <test@@Base+0x1298>
   13e00:	mov	r2, #13
   13e04:	mov	r1, #1
   13e08:	ldr	r0, [pc, #-1388]	; 138a4 <test@@Base+0x128c>
   13e0c:	ldr	sl, [sp, #44]	; 0x2c
   13e10:	ldr	r9, [sp, #20]
   13e14:	add	r0, pc, r0
   13e18:	ldr	fp, [sp, #40]	; 0x28
   13e1c:	ldr	r5, [sl, r3]
   13e20:	ldr	r3, [r5]
   13e24:	bl	1242c <fwrite@plt>
   13e28:	ldr	r6, [r5]
   13e2c:	b	12714 <test@@Base+0xfc>
   13e30:	ldr	r3, [pc, #-1416]	; 138b0 <test@@Base+0x1298>
   13e34:	mov	r4, r5
   13e38:	mov	r2, #13
   13e3c:	mov	r1, #1
   13e40:	ldr	r0, [pc, #-1440]	; 138a8 <test@@Base+0x1290>
   13e44:	ldr	sl, [sp, #44]	; 0x2c
   13e48:	ldr	r9, [sp, #20]
   13e4c:	add	r0, pc, r0
   13e50:	ldr	fp, [sp, #40]	; 0x28
   13e54:	ldr	r5, [sl, r3]
   13e58:	ldr	r3, [r5]
   13e5c:	bl	1242c <fwrite@plt>
   13e60:	ldr	r6, [r5]
   13e64:	b	12714 <test@@Base+0xfc>
   13e68:	mov	r0, r5
   13e6c:	b	12c14 <test@@Base+0x5fc>
   13e70:	ldr	r3, [pc, #-1480]	; 138b0 <test@@Base+0x1298>
   13e74:	mov	r4, r5
   13e78:	mov	r2, #13
   13e7c:	mov	r1, #1
   13e80:	ldr	r0, [pc, #-1500]	; 138ac <test@@Base+0x1294>
   13e84:	ldr	sl, [sp, #44]	; 0x2c
   13e88:	ldr	r9, [sp, #20]
   13e8c:	add	r0, pc, r0
   13e90:	ldr	fp, [sp, #40]	; 0x28
   13e94:	ldr	r5, [sl, r3]
   13e98:	ldr	r3, [r5]
   13e9c:	bl	1242c <fwrite@plt>
   13ea0:	ldr	r6, [r5]
   13ea4:	b	12714 <test@@Base+0xfc>
   13ea8:	mov	r0, r5
   13eac:	b	13560 <test@@Base+0xf48>
   13eb0:	ldr	r3, [pc, #-1544]	; 138b0 <test@@Base+0x1298>
   13eb4:	mov	r2, #13
   13eb8:	mov	r1, #1
   13ebc:	ldr	r0, [pc, #-1552]	; 138b4 <test@@Base+0x129c>
   13ec0:	ldr	sl, [sp, #44]	; 0x2c
   13ec4:	ldr	r9, [sp, #20]
   13ec8:	add	r0, pc, r0
   13ecc:	ldr	fp, [sp, #40]	; 0x28
   13ed0:	ldr	r5, [sl, r3]
   13ed4:	ldr	r3, [r5]
   13ed8:	bl	1242c <fwrite@plt>
   13edc:	ldr	r6, [r5]
   13ee0:	b	12714 <test@@Base+0xfc>
   13ee4:	mov	r0, r5
   13ee8:	b	13530 <test@@Base+0xf18>
   13eec:	mov	r0, r5
   13ef0:	b	12be4 <test@@Base+0x5cc>
   13ef4:	strd	r4, [sp, #-16]!
   13ef8:	mov	r4, r0
   13efc:	mov	r0, #1
   13f00:	ldr	ip, [r4, #28]
   13f04:	mov	r3, r0
   13f08:	mov	r5, r2
   13f0c:	str	r6, [sp, #8]
   13f10:	str	lr, [sp, #12]
   13f14:	sub	sp, sp, #8
   13f18:	str	r0, [sp]
   13f1c:	add	r2, r1, ip
   13f20:	add	r1, r4, #60	; 0x3c
   13f24:	ldr	r0, [r4, #40]	; 0x28
   13f28:	ldr	r6, [r4, #48]	; 0x30
   13f2c:	blx	r6
   13f30:	cmp	r0, #0
   13f34:	bne	13f74 <test@@Base+0x195c>
   13f38:	ldr	r1, [r4, #28]
   13f3c:	ldr	ip, [r4, #32]
   13f40:	ldrd	r2, [r4, #60]	; 0x3c
   13f44:	sub	r3, r3, r1
   13f48:	add	r2, r2, r1
   13f4c:	cmp	r3, r5
   13f50:	movcs	r3, r5
   13f54:	str	r2, [r4, #16]
   13f58:	str	r3, [r4, #24]
   13f5c:	str	r5, [ip, #4]
   13f60:	add	sp, sp, #8
   13f64:	ldrd	r4, [sp]
   13f68:	ldr	r6, [sp, #8]
   13f6c:	add	sp, sp, #12
   13f70:	pop	{pc}		; (ldr pc, [sp], #4)
   13f74:	mvn	r0, #0
   13f78:	b	13f60 <test@@Base+0x1948>

00013f7c <flatcc_builder_default_alloc@@Base>:
   13f7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13f80:	subs	r5, r2, #0
   13f84:	strd	r6, [sp, #8]
   13f88:	mov	r6, r1
   13f8c:	str	r8, [sp, #16]
   13f90:	str	lr, [sp, #20]
   13f94:	beq	13fcc <flatcc_builder_default_alloc@@Base+0x50>
   13f98:	mov	r7, r3
   13f9c:	ldr	r3, [sp, #24]
   13fa0:	sub	r2, r3, #1
   13fa4:	cmp	r2, #6
   13fa8:	addls	pc, pc, r2, lsl #2
   13fac:	b	1407c <flatcc_builder_default_alloc@@Base+0x100>
   13fb0:	b	13ffc <flatcc_builder_default_alloc@@Base+0x80>
   13fb4:	b	1407c <flatcc_builder_default_alloc@@Base+0x100>
   13fb8:	b	1407c <flatcc_builder_default_alloc@@Base+0x100>
   13fbc:	b	14074 <flatcc_builder_default_alloc@@Base+0xf8>
   13fc0:	b	14064 <flatcc_builder_default_alloc@@Base+0xe8>
   13fc4:	b	1407c <flatcc_builder_default_alloc@@Base+0x100>
   13fc8:	b	1406c <flatcc_builder_default_alloc@@Base+0xf0>
   13fcc:	ldr	r0, [r1]
   13fd0:	cmp	r0, #0
   13fd4:	beq	13fe8 <flatcc_builder_default_alloc@@Base+0x6c>
   13fd8:	bl	123fc <free@plt>
   13fdc:	mov	r0, r5
   13fe0:	str	r5, [r6]
   13fe4:	str	r5, [r6, #4]
   13fe8:	ldrd	r4, [sp]
   13fec:	ldrd	r6, [sp, #8]
   13ff0:	ldr	r8, [sp, #16]
   13ff4:	add	sp, sp, #20
   13ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ffc:	mov	r4, #256	; 0x100
   14000:	cmp	r4, r5
   14004:	bcs	14014 <flatcc_builder_default_alloc@@Base+0x98>
   14008:	lsl	r4, r4, #1
   1400c:	cmp	r5, r4
   14010:	bhi	14008 <flatcc_builder_default_alloc@@Base+0x8c>
   14014:	ldr	r2, [r6, #4]
   14018:	cmp	r5, r2
   1401c:	bhi	1402c <flatcc_builder_default_alloc@@Base+0xb0>
   14020:	cmp	r4, r2, lsr #1
   14024:	movls	r0, #0
   14028:	bls	13fe8 <flatcc_builder_default_alloc@@Base+0x6c>
   1402c:	mov	r1, r4
   14030:	ldr	r0, [r6]
   14034:	bl	12420 <realloc@plt>
   14038:	subs	r5, r0, #0
   1403c:	beq	14098 <flatcc_builder_default_alloc@@Base+0x11c>
   14040:	cmp	r7, #0
   14044:	beq	14054 <flatcc_builder_default_alloc@@Base+0xd8>
   14048:	ldr	r0, [r6, #4]
   1404c:	cmp	r0, r4
   14050:	bcc	14084 <flatcc_builder_default_alloc@@Base+0x108>
   14054:	mov	r0, #0
   14058:	str	r5, [r6]
   1405c:	str	r4, [r6, #4]
   14060:	b	13fe8 <flatcc_builder_default_alloc@@Base+0x6c>
   14064:	mov	r4, r5
   14068:	b	14014 <flatcc_builder_default_alloc@@Base+0x98>
   1406c:	mov	r4, #64	; 0x40
   14070:	b	14000 <flatcc_builder_default_alloc@@Base+0x84>
   14074:	mov	r4, #288	; 0x120
   14078:	b	14000 <flatcc_builder_default_alloc@@Base+0x84>
   1407c:	mov	r4, #32
   14080:	b	14000 <flatcc_builder_default_alloc@@Base+0x84>
   14084:	sub	r2, r4, r0
   14088:	mov	r1, #0
   1408c:	add	r0, r5, r0
   14090:	bl	12480 <memset@plt>
   14094:	b	14054 <flatcc_builder_default_alloc@@Base+0xd8>
   14098:	mvn	r0, #0
   1409c:	b	13fe8 <flatcc_builder_default_alloc@@Base+0x6c>
   140a0:	ldr	r3, [pc, #32]	; 140c8 <flatcc_builder_default_alloc@@Base+0x14c>
   140a4:	mov	r2, #308	; 0x134
   140a8:	str	r4, [sp, #-8]!
   140ac:	ldr	r1, [pc, #24]	; 140cc <flatcc_builder_default_alloc@@Base+0x150>
   140b0:	str	lr, [sp, #4]
   140b4:	ldr	r0, [pc, #20]	; 140d0 <flatcc_builder_default_alloc@@Base+0x154>
   140b8:	add	r3, pc, r3
   140bc:	add	r1, pc, r1
   140c0:	add	r0, pc, r0
   140c4:	bl	124b0 <__assert_fail@plt>
   140c8:	andeq	r9, r0, r4, asr #13
   140cc:	andeq	r9, r0, r0, lsl lr
   140d0:	muleq	r0, r4, lr
   140d4:	ldr	r3, [pc, #36]	; 14100 <flatcc_builder_default_alloc@@Base+0x184>
   140d8:	movw	r2, #677	; 0x2a5
   140dc:	str	r4, [sp, #-8]!
   140e0:	ldr	r1, [pc, #28]	; 14104 <flatcc_builder_default_alloc@@Base+0x188>
   140e4:	str	lr, [sp, #4]
   140e8:	ldr	r0, [pc, #24]	; 14108 <flatcc_builder_default_alloc@@Base+0x18c>
   140ec:	add	r3, pc, r3
   140f0:	add	r3, r3, #16
   140f4:	add	r1, pc, r1
   140f8:	add	r0, pc, r0
   140fc:	bl	124b0 <__assert_fail@plt>
   14100:	muleq	r0, r0, r6
   14104:	ldrdeq	r9, [r0], -r8
   14108:	andeq	r9, r0, ip, asr lr
   1410c:	strd	r4, [sp, #-12]!
   14110:	cmp	r2, #0
   14114:	mov	ip, r0
   14118:	str	lr, [sp, #8]
   1411c:	sub	sp, sp, #84	; 0x54
   14120:	ldr	lr, [pc, #248]	; 14220 <flatcc_builder_default_alloc@@Base+0x2a4>
   14124:	add	lr, pc, lr
   14128:	bne	14138 <flatcc_builder_default_alloc@@Base+0x1bc>
   1412c:	ldrh	r2, [r0, #132]	; 0x84
   14130:	cmp	r2, #0
   14134:	moveq	r2, #1
   14138:	ldrh	r0, [r1]
   1413c:	cmp	r0, #3
   14140:	bhi	14150 <flatcc_builder_default_alloc@@Base+0x1d4>
   14144:	mov	r4, #4
   14148:	mov	r0, r4
   1414c:	strh	r4, [r1]
   14150:	cmp	r2, r0
   14154:	strhhi	r2, [r1]
   14158:	cmp	r3, #0
   1415c:	bne	14170 <flatcc_builder_default_alloc@@Base+0x1f4>
   14160:	ldr	r4, [ip, #140]	; 0x8c
   14164:	sub	r2, r2, #1
   14168:	ands	r1, r2, r4
   1416c:	bne	14184 <flatcc_builder_default_alloc@@Base+0x208>
   14170:	mov	r0, #0
   14174:	add	sp, sp, #84	; 0x54
   14178:	ldrd	r4, [sp]
   1417c:	add	sp, sp, #8
   14180:	pop	{pc}		; (ldr pc, [sp], #4)
   14184:	ldr	r3, [pc, #152]	; 14224 <flatcc_builder_default_alloc@@Base+0x2a8>
   14188:	add	r0, r4, r1
   1418c:	mov	r2, #1
   14190:	str	r1, [sp, #8]
   14194:	cmp	r4, r0
   14198:	ldr	r3, [lr, r3]
   1419c:	str	r0, [ip, #140]	; 0x8c
   141a0:	strd	r2, [sp, #12]
   141a4:	str	r1, [sp, #20]
   141a8:	bgt	141fc <flatcc_builder_default_alloc@@Base+0x280>
   141ac:	mov	r3, r4
   141b0:	str	r1, [sp]
   141b4:	add	r1, sp, #16
   141b8:	ldr	r0, [ip, #36]	; 0x24
   141bc:	ldr	r5, [ip, #44]	; 0x2c
   141c0:	blx	r5
   141c4:	cmp	r0, #0
   141c8:	bne	141f8 <flatcc_builder_default_alloc@@Base+0x27c>
   141cc:	cmn	r4, #1
   141d0:	bne	14170 <flatcc_builder_default_alloc@@Base+0x1f4>
   141d4:	ldr	r3, [pc, #76]	; 14228 <flatcc_builder_default_alloc@@Base+0x2ac>
   141d8:	movw	r2, #702	; 0x2be
   141dc:	ldr	r1, [pc, #72]	; 1422c <flatcc_builder_default_alloc@@Base+0x2b0>
   141e0:	ldr	r0, [pc, #72]	; 14230 <flatcc_builder_default_alloc@@Base+0x2b4>
   141e4:	add	r3, pc, r3
   141e8:	add	r3, r3, #28
   141ec:	add	r1, pc, r1
   141f0:	add	r0, pc, r0
   141f4:	bl	124b0 <__assert_fail@plt>
   141f8:	bl	140d4 <flatcc_builder_default_alloc@@Base+0x158>
   141fc:	ldr	r3, [pc, #48]	; 14234 <flatcc_builder_default_alloc@@Base+0x2b8>
   14200:	movw	r2, #673	; 0x2a1
   14204:	ldr	r1, [pc, #44]	; 14238 <flatcc_builder_default_alloc@@Base+0x2bc>
   14208:	ldr	r0, [pc, #44]	; 1423c <flatcc_builder_default_alloc@@Base+0x2c0>
   1420c:	add	r3, pc, r3
   14210:	add	r3, r3, #16
   14214:	add	r1, pc, r1
   14218:	add	r0, pc, r0
   1421c:	bl	124b0 <__assert_fail@plt>
   14220:	ldrdeq	fp, [r1], -r4
   14224:	andeq	r0, r0, r0, asr r0
   14228:	muleq	r0, r8, r5
   1422c:	andeq	r9, r0, r0, ror #25
   14230:	andeq	r9, r0, r4, ror #26
   14234:	andeq	r9, r0, r0, ror r5
   14238:			; <UNDEFINED> instruction: 0x00009cb8
   1423c:	andeq	r9, r0, ip, lsr sp
   14240:	ldr	r3, [pc, #36]	; 1426c <flatcc_builder_default_alloc@@Base+0x2f0>
   14244:	movw	r2, #651	; 0x28b
   14248:	str	r4, [sp, #-8]!
   1424c:	ldr	r1, [pc, #28]	; 14270 <flatcc_builder_default_alloc@@Base+0x2f4>
   14250:	str	lr, [sp, #4]
   14254:	ldr	r0, [pc, #24]	; 14274 <flatcc_builder_default_alloc@@Base+0x2f8>
   14258:	add	r3, pc, r3
   1425c:	add	r3, r3, #44	; 0x2c
   14260:	add	r1, pc, r1
   14264:	add	r0, pc, r0
   14268:	bl	124b0 <__assert_fail@plt>
   1426c:	andeq	r9, r0, r4, lsr #10
   14270:	andeq	r9, r0, ip, ror #24
   14274:	strdeq	r9, [r0], -r0
   14278:	ldr	r3, [pc, #36]	; 142a4 <flatcc_builder_default_alloc@@Base+0x328>
   1427c:	mov	r2, #892	; 0x37c
   14280:	str	r4, [sp, #-8]!
   14284:	ldr	r1, [pc, #28]	; 142a8 <flatcc_builder_default_alloc@@Base+0x32c>
   14288:	str	lr, [sp, #4]
   1428c:	ldr	r0, [pc, #24]	; 142ac <flatcc_builder_default_alloc@@Base+0x330>
   14290:	add	r3, pc, r3
   14294:	add	r3, r3, #56	; 0x38
   14298:	add	r1, pc, r1
   1429c:	add	r0, pc, r0
   142a0:	bl	124b0 <__assert_fail@plt>
   142a4:	andeq	r9, r0, ip, ror #9
   142a8:	andeq	r9, r0, r4, lsr ip
   142ac:	muleq	r0, r0, ip
   142b0:	ldrd	r2, [r0, #156]	; 0x9c
   142b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   142b8:	mov	r5, r1
   142bc:	mov	r4, r0
   142c0:	strd	r6, [sp, #8]
   142c4:	str	lr, [sp, #16]
   142c8:	sub	sp, sp, #12
   142cc:	add	r1, r2, #1
   142d0:	cmp	r1, r3
   142d4:	str	r1, [r0, #156]	; 0x9c
   142d8:	ble	143b8 <flatcc_builder_default_alloc@@Base+0x43c>
   142dc:	ldr	r3, [r0, #176]	; 0xb0
   142e0:	cmp	r1, r3
   142e4:	cmpgt	r3, #0
   142e8:	movgt	r3, #1
   142ec:	movle	r3, #0
   142f0:	bgt	143c8 <flatcc_builder_default_alloc@@Base+0x44c>
   142f4:	add	r2, r2, r2, lsl #3
   142f8:	ldr	r1, [r0, #88]	; 0x58
   142fc:	lsl	r6, r2, #2
   14300:	add	r2, r6, #36	; 0x24
   14304:	cmp	r2, r1
   14308:	bls	1432c <flatcc_builder_default_alloc@@Base+0x3b0>
   1430c:	mov	ip, #4
   14310:	add	r1, r0, #84	; 0x54
   14314:	ldr	r0, [r0, #40]	; 0x28
   14318:	str	ip, [sp]
   1431c:	ldr	r7, [r4, #48]	; 0x30
   14320:	blx	r7
   14324:	cmp	r0, #0
   14328:	bne	143d0 <flatcc_builder_default_alloc@@Base+0x454>
   1432c:	ldr	r2, [r4, #84]	; 0x54
   14330:	add	r2, r2, r6
   14334:	cmp	r2, #0
   14338:	str	r2, [r4, #32]
   1433c:	beq	143c8 <flatcc_builder_default_alloc@@Base+0x44c>
   14340:	ldr	r3, [r4, #88]	; 0x58
   14344:	movw	r0, #36409	; 0x8e39
   14348:	movt	r0, #14563	; 0x38e3
   1434c:	ldr	r1, [r4, #176]	; 0xb0
   14350:	umull	r0, r3, r0, r3
   14354:	lsr	r3, r3, #3
   14358:	cmp	r3, r1
   1435c:	cmpgt	r1, #0
   14360:	movgt	r3, r1
   14364:	str	r3, [r4, #160]	; 0xa0
   14368:	ldr	r3, [r4, #20]
   1436c:	mov	r1, #0
   14370:	mvn	lr, #3
   14374:	mov	r0, r1
   14378:	ldr	ip, [r4, #28]
   1437c:	ldrh	r6, [r4, #130]	; 0x82
   14380:	str	r3, [r2, #8]
   14384:	add	r3, r3, ip
   14388:	add	r3, r3, #7
   1438c:	bic	r3, r3, #7
   14390:	strh	r6, [r2, #12]
   14394:	strh	r5, [r4, #130]	; 0x82
   14398:	stm	r2, {ip, lr}
   1439c:	str	r1, [r4, #20]
   143a0:	str	r3, [r4, #28]
   143a4:	add	sp, sp, #12
   143a8:	ldrd	r4, [sp]
   143ac:	ldrd	r6, [sp, #8]
   143b0:	add	sp, sp, #16
   143b4:	pop	{pc}		; (ldr pc, [sp], #4)
   143b8:	ldr	r2, [r0, #32]
   143bc:	add	r2, r2, #36	; 0x24
   143c0:	str	r2, [r0, #32]
   143c4:	b	14368 <flatcc_builder_default_alloc@@Base+0x3ec>
   143c8:	mvn	r0, #0
   143cc:	b	143a4 <flatcc_builder_default_alloc@@Base+0x428>
   143d0:	bl	140a0 <flatcc_builder_default_alloc@@Base+0x124>
   143d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   143d8:	mov	r4, r0
   143dc:	mov	r5, #4
   143e0:	ldrh	r0, [r0, #128]	; 0x80
   143e4:	strd	r6, [sp, #8]
   143e8:	str	lr, [sp, #16]
   143ec:	sub	sp, sp, #92	; 0x5c
   143f0:	ldr	lr, [pc, #464]	; 145c8 <flatcc_builder_default_alloc@@Base+0x64c>
   143f4:	str	r2, [sp, #12]
   143f8:	cmp	r0, #3
   143fc:	ldr	r6, [r4, #136]	; 0x88
   14400:	movls	r0, #4
   14404:	str	r5, [sp, #16]
   14408:	str	r5, [sp, #28]
   1440c:	strhls	r0, [r4, #128]	; 0x80
   14410:	mov	r0, #1
   14414:	lsls	ip, r2, #2
   14418:	add	lr, pc, lr
   1441c:	str	r0, [sp, #20]
   14420:	add	r0, sp, #12
   14424:	str	r0, [sp, #24]
   14428:	and	r0, r6, #3
   1442c:	beq	14448 <flatcc_builder_default_alloc@@Base+0x4cc>
   14430:	add	r5, ip, r5
   14434:	mov	r7, #2
   14438:	str	r5, [sp, #16]
   1443c:	str	r7, [sp, #20]
   14440:	str	r1, [sp, #32]
   14444:	str	ip, [sp, #36]	; 0x24
   14448:	cmp	r0, #0
   1444c:	beq	1447c <flatcc_builder_default_alloc@@Base+0x500>
   14450:	ldr	r7, [pc, #372]	; 145cc <flatcc_builder_default_alloc@@Base+0x650>
   14454:	add	r5, r5, r0
   14458:	ldr	ip, [sp, #20]
   1445c:	str	r5, [sp, #16]
   14460:	ldr	r7, [lr, r7]
   14464:	add	lr, sp, #88	; 0x58
   14468:	add	ip, ip, #1
   1446c:	add	lr, lr, ip, lsl #3
   14470:	str	ip, [sp, #20]
   14474:	str	r7, [lr, #-72]	; 0xffffffb8
   14478:	str	r0, [lr, #-68]	; 0xffffffbc
   1447c:	cmp	r2, #0
   14480:	beq	1450c <flatcc_builder_default_alloc@@Base+0x590>
   14484:	sub	r6, r1, r6
   14488:	add	lr, r2, r3
   1448c:	add	r6, r6, r5
   14490:	mov	r2, r3
   14494:	b	144c4 <flatcc_builder_default_alloc@@Base+0x548>
   14498:	sub	r0, r6, r1
   1449c:	cmp	r3, #0
   144a0:	add	r0, r0, ip
   144a4:	str	r0, [r1, #-4]
   144a8:	beq	144b8 <flatcc_builder_default_alloc@@Base+0x53c>
   144ac:	ldrb	r0, [r2]
   144b0:	cmp	r0, #0
   144b4:	beq	1457c <flatcc_builder_default_alloc@@Base+0x600>
   144b8:	add	r2, r2, #1
   144bc:	cmp	lr, r2
   144c0:	beq	14508 <flatcc_builder_default_alloc@@Base+0x58c>
   144c4:	ldr	ip, [r1], #4
   144c8:	cmp	ip, #0
   144cc:	bne	14498 <flatcc_builder_default_alloc@@Base+0x51c>
   144d0:	cmp	r3, #0
   144d4:	beq	14558 <flatcc_builder_default_alloc@@Base+0x5dc>
   144d8:	ldrb	r0, [r2]
   144dc:	cmp	r0, #0
   144e0:	beq	144b8 <flatcc_builder_default_alloc@@Base+0x53c>
   144e4:	ldr	r3, [pc, #228]	; 145d0 <flatcc_builder_default_alloc@@Base+0x654>
   144e8:	movw	r2, #1461	; 0x5b5
   144ec:	ldr	r1, [pc, #224]	; 145d4 <flatcc_builder_default_alloc@@Base+0x658>
   144f0:	ldr	r0, [pc, #224]	; 145d8 <flatcc_builder_default_alloc@@Base+0x65c>
   144f4:	add	r3, pc, r3
   144f8:	add	r3, r3, #76	; 0x4c
   144fc:	add	r1, pc, r1
   14500:	add	r0, pc, r0
   14504:	bl	124b0 <__assert_fail@plt>
   14508:	ldr	r6, [r4, #136]	; 0x88
   1450c:	sub	r7, r6, r5
   14510:	cmp	r7, r6
   14514:	bge	145a4 <flatcc_builder_default_alloc@@Base+0x628>
   14518:	mov	r3, r7
   1451c:	add	r1, sp, #24
   14520:	str	r5, [sp]
   14524:	ldr	r2, [sp, #20]
   14528:	ldr	r0, [r4, #36]	; 0x24
   1452c:	ldr	r5, [r4, #44]	; 0x2c
   14530:	blx	r5
   14534:	cmp	r0, #0
   14538:	bne	145a0 <flatcc_builder_default_alloc@@Base+0x624>
   1453c:	mov	r0, r7
   14540:	str	r7, [r4, #136]	; 0x88
   14544:	add	sp, sp, #92	; 0x5c
   14548:	ldrd	r4, [sp]
   1454c:	ldrd	r6, [sp, #8]
   14550:	add	sp, sp, #16
   14554:	pop	{pc}		; (ldr pc, [sp], #4)
   14558:	ldr	r3, [pc, #124]	; 145dc <flatcc_builder_default_alloc@@Base+0x660>
   1455c:	movw	r2, #1463	; 0x5b7
   14560:	ldr	r1, [pc, #120]	; 145e0 <flatcc_builder_default_alloc@@Base+0x664>
   14564:	ldr	r0, [pc, #120]	; 145e4 <flatcc_builder_default_alloc@@Base+0x668>
   14568:	add	r3, pc, r3
   1456c:	add	r3, r3, #76	; 0x4c
   14570:	add	r1, pc, r1
   14574:	add	r0, pc, r0
   14578:	bl	124b0 <__assert_fail@plt>
   1457c:	ldr	r3, [pc, #100]	; 145e8 <flatcc_builder_default_alloc@@Base+0x66c>
   14580:	movw	r2, #1457	; 0x5b1
   14584:	ldr	r1, [pc, #96]	; 145ec <flatcc_builder_default_alloc@@Base+0x670>
   14588:	ldr	r0, [pc, #96]	; 145f0 <flatcc_builder_default_alloc@@Base+0x674>
   1458c:	add	r3, pc, r3
   14590:	add	r3, r3, #76	; 0x4c
   14594:	add	r1, pc, r1
   14598:	add	r0, pc, r0
   1459c:	bl	124b0 <__assert_fail@plt>
   145a0:	bl	14240 <flatcc_builder_default_alloc@@Base+0x2c4>
   145a4:	ldr	r3, [pc, #72]	; 145f4 <flatcc_builder_default_alloc@@Base+0x678>
   145a8:	movw	r2, #647	; 0x287
   145ac:	ldr	r1, [pc, #68]	; 145f8 <flatcc_builder_default_alloc@@Base+0x67c>
   145b0:	ldr	r0, [pc, #68]	; 145fc <flatcc_builder_default_alloc@@Base+0x680>
   145b4:	add	r3, pc, r3
   145b8:	add	r3, r3, #44	; 0x2c
   145bc:	add	r1, pc, r1
   145c0:	add	r0, pc, r0
   145c4:	bl	124b0 <__assert_fail@plt>
   145c8:	andeq	fp, r1, r0, ror #23
   145cc:	andeq	r0, r0, r0, asr r0
   145d0:	andeq	r9, r0, r8, lsl #5
   145d4:	ldrdeq	r9, [r0], -r0
   145d8:	andeq	r9, r0, r8, asr sl
   145dc:	andeq	r9, r0, r4, lsl r2
   145e0:	andeq	r9, r0, ip, asr r9
   145e4:	andeq	r9, r0, r0, ror #19
   145e8:	strdeq	r9, [r0], -r0
   145ec:	andeq	r9, r0, r8, lsr r9
   145f0:			; <UNDEFINED> instruction: 0x000099b0
   145f4:	andeq	r9, r0, r8, asr #3
   145f8:	andeq	r9, r0, r0, lsl r9
   145fc:	muleq	r0, r4, r9

00014600 <flatcc_builder_flush_vtable_cache@@Base>:
   14600:	ldr	r3, [r0, #116]	; 0x74
   14604:	cmp	r3, #0
   14608:	bxeq	lr
   1460c:	str	r4, [sp, #-8]!
   14610:	mov	r4, r0
   14614:	mov	r1, #0
   14618:	ldr	r0, [r0, #92]	; 0x5c
   1461c:	ldr	r2, [r4, #96]	; 0x60
   14620:	str	lr, [sp, #4]
   14624:	bl	12480 <memset@plt>
   14628:	mov	r3, #16
   1462c:	mov	r2, #0
   14630:	strd	r2, [r4, #120]	; 0x78
   14634:	ldr	r4, [sp]
   14638:	add	sp, sp, #4
   1463c:	pop	{pc}		; (ldr pc, [sp], #4)

00014640 <flatcc_builder_custom_init@@Base>:
   14640:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14644:	mov	r5, r3
   14648:	mov	r4, r0
   1464c:	strd	r6, [sp, #8]
   14650:	mov	r6, r1
   14654:	mov	r1, #0
   14658:	ldr	r7, [pc, #124]	; 146dc <flatcc_builder_custom_init@@Base+0x9c>
   1465c:	strd	r8, [sp, #16]
   14660:	mov	r8, r2
   14664:	mov	r2, #232	; 0xe8
   14668:	str	sl, [sp, #24]
   1466c:	str	lr, [sp, #28]
   14670:	ldr	r9, [sp, #32]
   14674:	bl	12480 <memset@plt>
   14678:	cmp	r6, #0
   1467c:	add	r7, pc, r7
   14680:	beq	146b4 <flatcc_builder_custom_init@@Base+0x74>
   14684:	cmp	r5, #0
   14688:	beq	146d0 <flatcc_builder_custom_init@@Base+0x90>
   1468c:	ldr	sl, [sp, #24]
   14690:	mov	r0, #0
   14694:	strd	r8, [r4, #36]	; 0x24
   14698:	str	r6, [r4, #44]	; 0x2c
   1469c:	str	r5, [r4, #48]	; 0x30
   146a0:	ldrd	r4, [sp]
   146a4:	ldrd	r6, [sp, #8]
   146a8:	ldrd	r8, [sp, #16]
   146ac:	add	sp, sp, #28
   146b0:	pop	{pc}		; (ldr pc, [sp], #4)
   146b4:	ldr	r3, [pc, #36]	; 146e0 <flatcc_builder_custom_init@@Base+0xa0>
   146b8:	mov	r2, #1
   146bc:	cmp	r5, #0
   146c0:	add	r8, r4, #188	; 0xbc
   146c4:	str	r2, [r4, #184]	; 0xb8
   146c8:	ldr	r6, [r7, r3]
   146cc:	bne	1468c <flatcc_builder_custom_init@@Base+0x4c>
   146d0:	ldr	r3, [pc, #12]	; 146e4 <flatcc_builder_custom_init@@Base+0xa4>
   146d4:	ldr	r5, [r7, r3]
   146d8:	b	1468c <flatcc_builder_custom_init@@Base+0x4c>
   146dc:	andeq	fp, r1, ip, ror r9
   146e0:	andeq	r0, r0, r0, rrx
   146e4:	andeq	r0, r0, ip, asr r0

000146e8 <flatcc_builder_init@@Base>:
   146e8:	mov	ip, #0
   146ec:	push	{lr}		; (str lr, [sp, #-4]!)
   146f0:	sub	sp, sp, #12
   146f4:	mov	r3, ip
   146f8:	mov	r2, ip
   146fc:	mov	r1, ip
   14700:	str	ip, [sp]
   14704:	bl	14640 <flatcc_builder_custom_init@@Base>
   14708:	add	sp, sp, #12
   1470c:	pop	{pc}		; (ldr pc, [sp], #4)

00014710 <flatcc_builder_custom_reset@@Base>:
   14710:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14714:	mov	r5, #0
   14718:	mov	r4, r0
   1471c:	strd	r6, [sp, #8]
   14720:	mov	r6, r0
   14724:	strd	r8, [sp, #16]
   14728:	mov	r8, r1
   1472c:	mov	r9, r2
   14730:	str	lr, [sp, #24]
   14734:	sub	sp, sp, #12
   14738:	b	14788 <flatcc_builder_custom_reset@@Base+0x78>
   1473c:	cmp	r5, #5
   14740:	cmpne	r9, #0
   14744:	beq	1476c <flatcc_builder_custom_reset@@Base+0x5c>
   14748:	mov	r3, #1
   1474c:	str	r5, [sp]
   14750:	mov	r2, r3
   14754:	ldr	r0, [r6, #40]	; 0x28
   14758:	ldr	r7, [r6, #48]	; 0x30
   1475c:	blx	r7
   14760:	cmp	r0, #0
   14764:	bne	14878 <flatcc_builder_custom_reset@@Base+0x168>
   14768:	ldr	r0, [r4, #52]	; 0x34
   1476c:	mov	r1, #0
   14770:	ldr	r2, [r4, #56]	; 0x38
   14774:	bl	12480 <memset@plt>
   14778:	add	r5, r5, #1
   1477c:	add	r4, r4, #8
   14780:	cmp	r5, #8
   14784:	beq	147c8 <flatcc_builder_custom_reset@@Base+0xb8>
   14788:	ldr	r0, [r4, #52]	; 0x34
   1478c:	add	r1, r4, #52	; 0x34
   14790:	cmp	r0, #0
   14794:	bne	1473c <flatcc_builder_custom_reset@@Base+0x2c>
   14798:	ldr	r3, [r4, #56]	; 0x38
   1479c:	cmp	r3, #0
   147a0:	beq	14778 <flatcc_builder_custom_reset@@Base+0x68>
   147a4:	ldr	r3, [pc, #212]	; 14880 <flatcc_builder_custom_reset@@Base+0x170>
   147a8:	movw	r2, #434	; 0x1b2
   147ac:	ldr	r1, [pc, #208]	; 14884 <flatcc_builder_custom_reset@@Base+0x174>
   147b0:	ldr	r0, [pc, #208]	; 14888 <flatcc_builder_custom_reset@@Base+0x178>
   147b4:	add	r3, pc, r3
   147b8:	add	r3, r3, #108	; 0x6c
   147bc:	add	r1, pc, r1
   147c0:	add	r0, pc, r0
   147c4:	bl	124b0 <__assert_fail@plt>
   147c8:	mov	r2, #0
   147cc:	ldr	r0, [r6, #52]	; 0x34
   147d0:	ldr	r3, [r6, #124]	; 0x7c
   147d4:	ldr	r1, [r6, #60]	; 0x3c
   147d8:	str	r0, [r6, #4]
   147dc:	str	r2, [r6, #120]	; 0x78
   147e0:	cmp	r3, r2
   147e4:	ldr	r2, [r6, #76]	; 0x4c
   147e8:	movne	r3, #16
   147ec:	strne	r3, [r6, #124]	; 0x7c
   147f0:	mov	r3, #0
   147f4:	cmp	r8, r3
   147f8:	str	r2, [r6]
   147fc:	str	r1, [r6, #16]
   14800:	str	r3, [r6, #20]
   14804:	str	r3, [r6, #24]
   14808:	str	r3, [r6, #32]
   1480c:	strh	r3, [r6, #128]	; 0x80
   14810:	str	r3, [r6, #136]	; 0x88
   14814:	str	r3, [r6, #140]	; 0x8c
   14818:	str	r3, [r6, #148]	; 0x94
   1481c:	str	r3, [r6, #152]	; 0x98
   14820:	str	r3, [r6, #156]	; 0x9c
   14824:	str	r3, [r6, #160]	; 0xa0
   14828:	bne	14850 <flatcc_builder_custom_reset@@Base+0x140>
   1482c:	ldr	r0, [r6, #184]	; 0xb8
   14830:	cmp	r0, #0
   14834:	bne	14868 <flatcc_builder_custom_reset@@Base+0x158>
   14838:	add	sp, sp, #12
   1483c:	ldrd	r4, [sp]
   14840:	ldrd	r6, [sp, #8]
   14844:	ldrd	r8, [sp, #16]
   14848:	add	sp, sp, #24
   1484c:	pop	{pc}		; (ldr pc, [sp], #4)
   14850:	ldr	r0, [r6, #184]	; 0xb8
   14854:	str	r3, [r6, #172]	; 0xac
   14858:	str	r3, [r6, #176]	; 0xb0
   1485c:	str	r3, [r6, #180]	; 0xb4
   14860:	cmp	r0, #0
   14864:	beq	14838 <flatcc_builder_custom_reset@@Base+0x128>
   14868:	add	r0, r6, #188	; 0xbc
   1486c:	bl	18648 <flatcc_emitter_reset@@Base>
   14870:	mov	r0, #0
   14874:	b	14838 <flatcc_builder_custom_reset@@Base+0x128>
   14878:	mvn	r0, #0
   1487c:	b	14838 <flatcc_builder_custom_reset@@Base+0x128>
   14880:	andeq	r8, r0, r8, asr #31
   14884:	andeq	r9, r0, r0, lsl r7
   14888:	andeq	r9, r0, r8, lsr #15

0001488c <flatcc_builder_reset@@Base>:
   1488c:	mov	r2, #0
   14890:	mov	r1, r2
   14894:	b	14710 <flatcc_builder_custom_reset@@Base>

00014898 <flatcc_builder_clear@@Base>:
   14898:	strd	r4, [sp, #-20]!	; 0xffffffec
   1489c:	mov	r4, #0
   148a0:	add	r5, r0, #52	; 0x34
   148a4:	strd	r6, [sp, #8]
   148a8:	mov	r6, r0
   148ac:	str	lr, [sp, #16]
   148b0:	sub	sp, sp, #12
   148b4:	mov	r3, #0
   148b8:	mov	r1, r5
   148bc:	str	r4, [sp]
   148c0:	mov	r2, r3
   148c4:	add	r4, r4, #1
   148c8:	ldr	r0, [r6, #40]	; 0x28
   148cc:	add	r5, r5, #8
   148d0:	ldr	r7, [r6, #48]	; 0x30
   148d4:	blx	r7
   148d8:	cmp	r4, #8
   148dc:	bne	148b4 <flatcc_builder_clear@@Base+0x1c>
   148e0:	ldr	r3, [r6, #184]	; 0xb8
   148e4:	cmp	r3, #0
   148e8:	bne	14910 <flatcc_builder_clear@@Base+0x78>
   148ec:	mov	r0, r6
   148f0:	mov	r2, #232	; 0xe8
   148f4:	mov	r1, #0
   148f8:	add	sp, sp, #12
   148fc:	ldrd	r4, [sp]
   14900:	ldrd	r6, [sp, #8]
   14904:	ldr	lr, [sp, #16]
   14908:	add	sp, sp, #20
   1490c:	b	12480 <memset@plt>
   14910:	add	r0, r6, #188	; 0xbc
   14914:	bl	1871c <flatcc_emitter_clear@@Base>
   14918:	b	148ec <flatcc_builder_clear@@Base+0x54>

0001491c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1491c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14920:	add	r4, r1, #3
   14924:	mov	r5, r0
   14928:	ldr	r3, [r0, #112]	; 0x70
   1492c:	bic	r4, r4, #3
   14930:	strd	r6, [sp, #8]
   14934:	add	r4, r4, #4
   14938:	ldr	r6, [r0, #228]	; 0xe4
   1493c:	str	lr, [sp, #16]
   14940:	sub	sp, sp, #12
   14944:	add	r2, r6, r4
   14948:	cmp	r2, r3
   1494c:	bls	14974 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   14950:	mov	ip, #7
   14954:	add	r1, r0, #108	; 0x6c
   14958:	ldr	r0, [r0, #40]	; 0x28
   1495c:	mov	r3, #0
   14960:	str	ip, [sp]
   14964:	ldr	r7, [r5, #48]	; 0x30
   14968:	blx	r7
   1496c:	cmp	r0, #0
   14970:	bne	149c8 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   14974:	ldr	r7, [r5, #108]	; 0x6c
   14978:	adds	r3, r7, r6
   1497c:	moveq	r0, r3
   14980:	beq	149b4 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   14984:	mov	r2, r4
   14988:	mov	r0, r3
   1498c:	mov	r1, #0
   14990:	bl	12480 <memset@plt>
   14994:	ldr	r2, [r5, #224]	; 0xe0
   14998:	add	r0, r0, #4
   1499c:	str	r2, [r7, r6]
   149a0:	ldr	r3, [r5, #228]	; 0xe4
   149a4:	add	r4, r3, r4
   149a8:	add	r3, r3, #4
   149ac:	str	r3, [r5, #224]	; 0xe0
   149b0:	str	r4, [r5, #228]	; 0xe4
   149b4:	add	sp, sp, #12
   149b8:	ldrd	r4, [sp]
   149bc:	ldrd	r6, [sp, #8]
   149c0:	add	sp, sp, #16
   149c4:	pop	{pc}		; (ldr pc, [sp], #4)
   149c8:	bl	140a0 <flatcc_builder_default_alloc@@Base+0x124>

000149cc <flatcc_builder_enter_user_frame@@Base>:
   149cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   149d0:	add	r4, r1, #3
   149d4:	mov	r5, r0
   149d8:	ldr	r3, [r0, #112]	; 0x70
   149dc:	bic	r4, r4, #3
   149e0:	strd	r6, [sp, #8]
   149e4:	add	r4, r4, #4
   149e8:	ldr	r6, [r0, #228]	; 0xe4
   149ec:	str	lr, [sp, #16]
   149f0:	sub	sp, sp, #12
   149f4:	add	r2, r6, r4
   149f8:	cmp	r2, r3
   149fc:	bls	14a24 <flatcc_builder_enter_user_frame@@Base+0x58>
   14a00:	mov	ip, #7
   14a04:	add	r1, r0, #108	; 0x6c
   14a08:	ldr	r0, [r0, #40]	; 0x28
   14a0c:	mov	r3, #0
   14a10:	str	ip, [sp]
   14a14:	ldr	r7, [r5, #48]	; 0x30
   14a18:	blx	r7
   14a1c:	cmp	r0, #0
   14a20:	bne	14a6c <flatcc_builder_enter_user_frame@@Base+0xa0>
   14a24:	ldr	r7, [r5, #108]	; 0x6c
   14a28:	adds	r0, r7, r6
   14a2c:	beq	14a58 <flatcc_builder_enter_user_frame@@Base+0x8c>
   14a30:	mov	r2, r4
   14a34:	mov	r1, #0
   14a38:	bl	12480 <memset@plt>
   14a3c:	ldr	r3, [r5, #224]	; 0xe0
   14a40:	str	r3, [r7, r6]
   14a44:	ldr	r0, [r5, #228]	; 0xe4
   14a48:	add	r4, r0, r4
   14a4c:	add	r0, r0, #4
   14a50:	str	r0, [r5, #224]	; 0xe0
   14a54:	str	r4, [r5, #228]	; 0xe4
   14a58:	add	sp, sp, #12
   14a5c:	ldrd	r4, [sp]
   14a60:	ldrd	r6, [sp, #8]
   14a64:	add	sp, sp, #16
   14a68:	pop	{pc}		; (ldr pc, [sp], #4)
   14a6c:	bl	140a0 <flatcc_builder_default_alloc@@Base+0x124>

00014a70 <flatcc_builder_exit_user_frame@@Base>:
   14a70:	ldr	r2, [r0, #224]	; 0xe0
   14a74:	cmp	r2, #0
   14a78:	beq	14aa0 <flatcc_builder_exit_user_frame@@Base+0x30>
   14a7c:	mov	r3, r0
   14a80:	sub	r0, r2, #4
   14a84:	ldr	r1, [r3, #108]	; 0x6c
   14a88:	str	r0, [r3, #228]	; 0xe4
   14a8c:	add	r2, r1, r2
   14a90:	ldr	r2, [r2, #-4]
   14a94:	mov	r0, r2
   14a98:	str	r2, [r3, #224]	; 0xe0
   14a9c:	bx	lr
   14aa0:	ldr	r3, [pc, #36]	; 14acc <flatcc_builder_exit_user_frame@@Base+0x5c>
   14aa4:	movw	r2, #542	; 0x21e
   14aa8:	str	r4, [sp, #-8]!
   14aac:	ldr	r1, [pc, #28]	; 14ad0 <flatcc_builder_exit_user_frame@@Base+0x60>
   14ab0:	str	lr, [sp, #4]
   14ab4:	ldr	r0, [pc, #24]	; 14ad4 <flatcc_builder_exit_user_frame@@Base+0x64>
   14ab8:	add	r3, pc, r3
   14abc:	add	r3, r3, #136	; 0x88
   14ac0:	add	r1, pc, r1
   14ac4:	add	r0, pc, r0
   14ac8:	bl	124b0 <__assert_fail@plt>
   14acc:	andeq	r8, r0, r4, asr #25
   14ad0:	andeq	r9, r0, ip, lsl #8
   14ad4:			; <UNDEFINED> instruction: 0x000094b8

00014ad8 <flatcc_builder_exit_user_frame_at@@Base>:
   14ad8:	ldr	r2, [r0, #224]	; 0xe0
   14adc:	cmp	r2, r1
   14ae0:	bcc	14aec <flatcc_builder_exit_user_frame_at@@Base+0x14>
   14ae4:	str	r1, [r0, #224]	; 0xe0
   14ae8:	b	14a70 <flatcc_builder_exit_user_frame@@Base>
   14aec:	ldr	r3, [pc, #36]	; 14b18 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   14af0:	movw	r2, #551	; 0x227
   14af4:	str	r4, [sp, #-8]!
   14af8:	ldr	r1, [pc, #28]	; 14b1c <flatcc_builder_exit_user_frame_at@@Base+0x44>
   14afc:	str	lr, [sp, #4]
   14b00:	ldr	r0, [pc, #24]	; 14b20 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   14b04:	add	r3, pc, r3
   14b08:	add	r3, r3, #168	; 0xa8
   14b0c:	add	r1, pc, r1
   14b10:	add	r0, pc, r0
   14b14:	bl	124b0 <__assert_fail@plt>
   14b18:	andeq	r8, r0, r8, ror ip
   14b1c:	andeq	r9, r0, r0, asr #7
   14b20:	andeq	r9, r0, r8, lsl #9

00014b24 <flatcc_builder_get_current_user_frame@@Base>:
   14b24:	ldr	r0, [r0, #224]	; 0xe0
   14b28:	bx	lr

00014b2c <flatcc_builder_get_user_frame_ptr@@Base>:
   14b2c:	ldr	r0, [r0, #108]	; 0x6c
   14b30:	add	r0, r0, r1
   14b34:	bx	lr

00014b38 <flatcc_builder_embed_buffer@@Base>:
   14b38:	strd	r4, [sp, #-20]!	; 0xffffffec
   14b3c:	mov	r5, r3
   14b40:	mov	r4, r0
   14b44:	ldr	r3, [r0, #152]	; 0x98
   14b48:	strd	r6, [sp, #8]
   14b4c:	mov	r7, r2
   14b50:	mov	r2, r1
   14b54:	ldr	r6, [pc, #356]	; 14cc0 <flatcc_builder_embed_buffer@@Base+0x188>
   14b58:	str	lr, [sp, #16]
   14b5c:	sub	sp, sp, #92	; 0x5c
   14b60:	add	r1, sp, #112	; 0x70
   14b64:	adds	r3, r3, #0
   14b68:	movne	r3, #1
   14b6c:	bl	1410c <flatcc_builder_default_alloc@@Base+0x190>
   14b70:	cmp	r0, #0
   14b74:	add	r6, pc, r6
   14b78:	bne	14c90 <flatcc_builder_embed_buffer@@Base+0x158>
   14b7c:	ldr	r3, [sp, #116]	; 0x74
   14b80:	str	r0, [sp, #16]
   14b84:	ldr	r1, [r4, #136]	; 0x88
   14b88:	str	r0, [sp, #20]
   14b8c:	ldrh	r2, [sp, #112]	; 0x70
   14b90:	tst	r3, #2
   14b94:	ldr	r0, [r4, #152]	; 0x98
   14b98:	movne	ip, #4
   14b9c:	moveq	ip, #0
   14ba0:	sub	r3, r1, r5
   14ba4:	sub	r3, r3, ip
   14ba8:	sub	r2, r2, #1
   14bac:	and	r3, r3, r2
   14bb0:	add	r2, r5, r3
   14bb4:	cmp	r0, #0
   14bb8:	str	r2, [sp, #12]
   14bbc:	beq	14be0 <flatcc_builder_embed_buffer@@Base+0xa8>
   14bc0:	mov	ip, #1
   14bc4:	mov	r2, #4
   14bc8:	mov	r0, r2
   14bcc:	str	r2, [sp, #16]
   14bd0:	str	ip, [sp, #20]
   14bd4:	add	ip, sp, #12
   14bd8:	str	ip, [sp, #24]
   14bdc:	str	r2, [sp, #28]
   14be0:	cmp	r5, #0
   14be4:	beq	14c0c <flatcc_builder_embed_buffer@@Base+0xd4>
   14be8:	ldr	r2, [sp, #20]
   14bec:	add	ip, sp, #88	; 0x58
   14bf0:	add	r0, r0, r5
   14bf4:	str	r0, [sp, #16]
   14bf8:	add	r2, r2, #1
   14bfc:	add	ip, ip, r2, lsl #3
   14c00:	str	r2, [sp, #20]
   14c04:	str	r7, [ip, #-72]	; 0xffffffb8
   14c08:	str	r5, [ip, #-68]	; 0xffffffbc
   14c0c:	cmp	r3, #0
   14c10:	bne	14c60 <flatcc_builder_embed_buffer@@Base+0x128>
   14c14:	sub	r5, r1, r0
   14c18:	cmp	r1, r5
   14c1c:	ble	14c9c <flatcc_builder_embed_buffer@@Base+0x164>
   14c20:	mov	r3, r5
   14c24:	add	r1, sp, #24
   14c28:	str	r0, [sp]
   14c2c:	ldr	r2, [sp, #20]
   14c30:	ldr	r0, [r4, #36]	; 0x24
   14c34:	ldr	r6, [r4, #44]	; 0x2c
   14c38:	blx	r6
   14c3c:	cmp	r0, #0
   14c40:	streq	r5, [r4, #136]	; 0x88
   14c44:	bne	14c98 <flatcc_builder_embed_buffer@@Base+0x160>
   14c48:	mov	r0, r5
   14c4c:	add	sp, sp, #92	; 0x5c
   14c50:	ldrd	r4, [sp]
   14c54:	ldrd	r6, [sp, #8]
   14c58:	add	sp, sp, #16
   14c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c60:	ldr	ip, [pc, #92]	; 14cc4 <flatcc_builder_embed_buffer@@Base+0x18c>
   14c64:	add	r0, r0, r3
   14c68:	ldr	r2, [sp, #20]
   14c6c:	str	r0, [sp, #16]
   14c70:	ldr	lr, [r6, ip]
   14c74:	add	ip, sp, #88	; 0x58
   14c78:	add	r2, r2, #1
   14c7c:	add	ip, ip, r2, lsl #3
   14c80:	str	r2, [sp, #20]
   14c84:	str	lr, [ip, #-72]	; 0xffffffb8
   14c88:	str	r3, [ip, #-68]	; 0xffffffbc
   14c8c:	b	14c14 <flatcc_builder_embed_buffer@@Base+0xdc>
   14c90:	mov	r5, #0
   14c94:	b	14c48 <flatcc_builder_embed_buffer@@Base+0x110>
   14c98:	bl	14240 <flatcc_builder_default_alloc@@Base+0x2c4>
   14c9c:	ldr	r3, [pc, #36]	; 14cc8 <flatcc_builder_embed_buffer@@Base+0x190>
   14ca0:	movw	r2, #647	; 0x287
   14ca4:	ldr	r1, [pc, #32]	; 14ccc <flatcc_builder_embed_buffer@@Base+0x194>
   14ca8:	ldr	r0, [pc, #32]	; 14cd0 <flatcc_builder_embed_buffer@@Base+0x198>
   14cac:	add	r3, pc, r3
   14cb0:	add	r3, r3, #44	; 0x2c
   14cb4:	add	r1, pc, r1
   14cb8:	add	r0, pc, r0
   14cbc:	bl	124b0 <__assert_fail@plt>
   14cc0:	andeq	fp, r1, r4, lsl #9
   14cc4:	andeq	r0, r0, r0, asr r0
   14cc8:	ldrdeq	r8, [r0], -r0
   14ccc:	andeq	r9, r0, r8, lsl r2
   14cd0:	muleq	r0, ip, r2

00014cd4 <flatcc_builder_create_buffer@@Base>:
   14cd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14cd8:	mov	r4, r0
   14cdc:	strd	r6, [sp, #8]
   14ce0:	mov	r6, r3
   14ce4:	strd	r8, [sp, #16]
   14ce8:	mov	r8, #0
   14cec:	strd	sl, [sp, #24]
   14cf0:	mov	sl, r1
   14cf4:	str	lr, [sp, #32]
   14cf8:	sub	sp, sp, #100	; 0x64
   14cfc:	ldr	r9, [sp, #140]	; 0x8c
   14d00:	add	r1, sp, #136	; 0x88
   14d04:	str	r8, [sp, #20]
   14d08:	ldr	r5, [pc, #496]	; 14f00 <flatcc_builder_create_buffer@@Base+0x22c>
   14d0c:	and	r7, r9, #1
   14d10:	mov	r3, r7
   14d14:	bl	1410c <flatcc_builder_default_alloc@@Base+0x190>
   14d18:	cmp	r0, r8
   14d1c:	add	r5, pc, r5
   14d20:	bne	14e74 <flatcc_builder_create_buffer@@Base+0x1a0>
   14d24:	ldrh	r2, [r4, #128]	; 0x80
   14d28:	ldrh	r3, [sp, #136]	; 0x88
   14d2c:	ldr	ip, [r4, #136]	; 0x88
   14d30:	cmp	r2, r3
   14d34:	strhcc	r3, [r4, #128]	; 0x80
   14d38:	cmp	sl, #0
   14d3c:	ldrne	r2, [sl]
   14d40:	ldreq	lr, [sp, #20]
   14d44:	movne	lr, r2
   14d48:	strne	r2, [sp, #20]
   14d4c:	sub	r2, r3, #1
   14d50:	sub	r3, ip, #4
   14d54:	cmp	lr, #0
   14d58:	movne	lr, #4
   14d5c:	tst	r9, #2
   14d60:	movne	r0, #4
   14d64:	moveq	r0, #0
   14d68:	sub	r3, r3, lr
   14d6c:	ands	r1, r9, #3
   14d70:	sub	r3, r3, r0
   14d74:	and	r3, r3, r2
   14d78:	bne	14e94 <flatcc_builder_create_buffer@@Base+0x1c0>
   14d7c:	mov	r9, r1
   14d80:	mov	r8, #1
   14d84:	mov	r0, #4
   14d88:	add	sl, sp, #96	; 0x60
   14d8c:	add	r2, r9, #1
   14d90:	str	r0, [sp, #24]
   14d94:	add	r2, sl, r2, lsl #3
   14d98:	mov	fp, #4
   14d9c:	add	sl, sp, #12
   14da0:	cmp	lr, #0
   14da4:	str	r8, [sp, #28]
   14da8:	strd	sl, [r2, #-72]	; 0xffffffb8
   14dac:	beq	14dd8 <flatcc_builder_create_buffer@@Base+0x104>
   14db0:	add	r2, sp, #96	; 0x60
   14db4:	add	r8, r8, #1
   14db8:	add	r8, r2, r8, lsl #3
   14dbc:	add	r0, r0, lr
   14dc0:	add	r9, r9, #2
   14dc4:	add	r2, sp, #20
   14dc8:	str	r0, [sp, #24]
   14dcc:	str	r2, [r8, #-72]	; 0xffffffb8
   14dd0:	str	lr, [r8, #-68]	; 0xffffffbc
   14dd4:	str	r9, [sp, #28]
   14dd8:	cmp	r3, #0
   14ddc:	beq	14e0c <flatcc_builder_create_buffer@@Base+0x138>
   14de0:	ldr	lr, [pc, #284]	; 14f04 <flatcc_builder_create_buffer@@Base+0x230>
   14de4:	add	r0, r0, r3
   14de8:	ldr	r2, [sp, #28]
   14dec:	str	r0, [sp, #24]
   14df0:	ldr	r5, [r5, lr]
   14df4:	add	lr, sp, #96	; 0x60
   14df8:	add	r2, r2, #1
   14dfc:	add	lr, lr, r2, lsl #3
   14e00:	str	r2, [sp, #28]
   14e04:	str	r5, [lr, #-72]	; 0xffffffb8
   14e08:	str	r3, [lr, #-68]	; 0xffffffbc
   14e0c:	sub	r5, ip, r0
   14e10:	cmp	r1, #0
   14e14:	mov	r2, r5
   14e18:	addne	r2, r5, #4
   14e1c:	cmp	r7, #0
   14e20:	sub	r6, r6, r2
   14e24:	ldrne	r3, [r4, #144]	; 0x90
   14e28:	mov	r8, r5
   14e2c:	str	r6, [sp, #12]
   14e30:	ldreq	r3, [r4, #140]	; 0x8c
   14e34:	cmp	ip, r5
   14e38:	sub	r3, r3, r2
   14e3c:	str	r3, [sp, #16]
   14e40:	ble	14ed8 <flatcc_builder_create_buffer@@Base+0x204>
   14e44:	mov	r3, r5
   14e48:	add	r1, sp, #32
   14e4c:	str	r0, [sp]
   14e50:	ldr	r2, [sp, #28]
   14e54:	ldr	r0, [r4, #36]	; 0x24
   14e58:	ldr	r6, [r4, #44]	; 0x2c
   14e5c:	blx	r6
   14e60:	cmp	r0, #0
   14e64:	bne	14efc <flatcc_builder_create_buffer@@Base+0x228>
   14e68:	cmp	r5, #0
   14e6c:	str	r5, [r4, #136]	; 0x88
   14e70:	beq	14eb4 <flatcc_builder_create_buffer@@Base+0x1e0>
   14e74:	mov	r0, r8
   14e78:	add	sp, sp, #100	; 0x64
   14e7c:	ldrd	r4, [sp]
   14e80:	ldrd	r6, [sp, #8]
   14e84:	ldrd	r8, [sp, #16]
   14e88:	ldrd	sl, [sp, #24]
   14e8c:	add	sp, sp, #32
   14e90:	pop	{pc}		; (ldr pc, [sp], #4)
   14e94:	mov	sl, #4
   14e98:	add	r2, sp, #16
   14e9c:	mov	r8, #2
   14ea0:	mov	r9, #1
   14ea4:	mov	r0, #8
   14ea8:	str	r2, [sp, #32]
   14eac:	str	sl, [sp, #36]	; 0x24
   14eb0:	b	14d88 <flatcc_builder_create_buffer@@Base+0xb4>
   14eb4:	ldr	r3, [pc, #76]	; 14f08 <flatcc_builder_create_buffer@@Base+0x234>
   14eb8:	mov	r2, #772	; 0x304
   14ebc:	ldr	r1, [pc, #72]	; 14f0c <flatcc_builder_create_buffer@@Base+0x238>
   14ec0:	ldr	r0, [pc, #72]	; 14f10 <flatcc_builder_create_buffer@@Base+0x23c>
   14ec4:	add	r3, pc, r3
   14ec8:	add	r3, r3, #204	; 0xcc
   14ecc:	add	r1, pc, r1
   14ed0:	add	r0, pc, r0
   14ed4:	bl	124b0 <__assert_fail@plt>
   14ed8:	ldr	r3, [pc, #52]	; 14f14 <flatcc_builder_create_buffer@@Base+0x240>
   14edc:	movw	r2, #647	; 0x287
   14ee0:	ldr	r1, [pc, #48]	; 14f18 <flatcc_builder_create_buffer@@Base+0x244>
   14ee4:	ldr	r0, [pc, #48]	; 14f1c <flatcc_builder_create_buffer@@Base+0x248>
   14ee8:	add	r3, pc, r3
   14eec:	add	r3, r3, #44	; 0x2c
   14ef0:	add	r1, pc, r1
   14ef4:	add	r0, pc, r0
   14ef8:	bl	124b0 <__assert_fail@plt>
   14efc:	bl	14240 <flatcc_builder_default_alloc@@Base+0x2c4>
   14f00:	ldrdeq	fp, [r1], -ip
   14f04:	andeq	r0, r0, r0, asr r0
   14f08:			; <UNDEFINED> instruction: 0x000088b8
   14f0c:	andeq	r9, r0, r0
   14f10:	andeq	r9, r0, r4, lsl #1
   14f14:	muleq	r0, r4, r8
   14f18:	ldrdeq	r8, [r0], -ip
   14f1c:	andeq	r9, r0, r0, rrx

00014f20 <flatcc_builder_create_struct@@Base>:
   14f20:	ldr	ip, [pc, #316]	; 15064 <flatcc_builder_create_struct@@Base+0x144>
   14f24:	cmp	r3, #0
   14f28:	strd	r4, [sp, #-20]!	; 0xffffffec
   14f2c:	strd	r6, [sp, #8]
   14f30:	str	lr, [sp, #16]
   14f34:	sub	sp, sp, #84	; 0x54
   14f38:	add	ip, pc, ip
   14f3c:	beq	15040 <flatcc_builder_create_struct@@Base+0x120>
   14f40:	mov	r4, r0
   14f44:	ldrh	r0, [r0, #128]	; 0x80
   14f48:	ldr	lr, [r4, #136]	; 0x88
   14f4c:	cmp	r0, r3
   14f50:	mov	r0, #0
   14f54:	strhcc	r3, [r4, #128]	; 0x80
   14f58:	sub	r5, lr, r2
   14f5c:	sub	r3, r3, #1
   14f60:	cmp	r2, r0
   14f64:	and	r3, r3, r5
   14f68:	str	r0, [sp, #8]
   14f6c:	str	r0, [sp, #12]
   14f70:	bne	14ff4 <flatcc_builder_create_struct@@Base+0xd4>
   14f74:	cmp	r3, #0
   14f78:	movne	r2, r3
   14f7c:	movne	r6, #1
   14f80:	beq	15018 <flatcc_builder_create_struct@@Base+0xf8>
   14f84:	ldr	r1, [pc, #220]	; 15068 <flatcc_builder_create_struct@@Base+0x148>
   14f88:	add	r0, r0, #1
   14f8c:	add	r7, sp, #80	; 0x50
   14f90:	str	r2, [sp, #8]
   14f94:	add	r0, r7, r0, lsl #3
   14f98:	sub	r5, lr, r2
   14f9c:	ldr	r1, [ip, r1]
   14fa0:	str	r6, [sp, #12]
   14fa4:	str	r1, [r0, #-72]	; 0xffffffb8
   14fa8:	str	r3, [r0, #-68]	; 0xffffffbc
   14fac:	cmp	lr, r5
   14fb0:	ble	15018 <flatcc_builder_create_struct@@Base+0xf8>
   14fb4:	mov	r3, r5
   14fb8:	add	r1, sp, #16
   14fbc:	str	r2, [sp]
   14fc0:	ldr	r2, [sp, #12]
   14fc4:	ldr	r0, [r4, #36]	; 0x24
   14fc8:	ldr	r6, [r4, #44]	; 0x2c
   14fcc:	blx	r6
   14fd0:	cmp	r0, #0
   14fd4:	bne	1503c <flatcc_builder_create_struct@@Base+0x11c>
   14fd8:	mov	r0, r5
   14fdc:	str	r5, [r4, #136]	; 0x88
   14fe0:	add	sp, sp, #84	; 0x54
   14fe4:	ldrd	r4, [sp]
   14fe8:	ldrd	r6, [sp, #8]
   14fec:	add	sp, sp, #16
   14ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff4:	mov	r0, #1
   14ff8:	cmp	r3, #0
   14ffc:	str	r2, [sp, #8]
   15000:	movne	r6, #2
   15004:	strd	r0, [sp, #12]
   15008:	str	r2, [sp, #20]
   1500c:	addne	r2, r2, r3
   15010:	beq	14fac <flatcc_builder_create_struct@@Base+0x8c>
   15014:	b	14f84 <flatcc_builder_create_struct@@Base+0x64>
   15018:	ldr	r3, [pc, #76]	; 1506c <flatcc_builder_create_struct@@Base+0x14c>
   1501c:	movw	r2, #647	; 0x287
   15020:	ldr	r1, [pc, #72]	; 15070 <flatcc_builder_create_struct@@Base+0x150>
   15024:	ldr	r0, [pc, #72]	; 15074 <flatcc_builder_create_struct@@Base+0x154>
   15028:	add	r3, pc, r3
   1502c:	add	r3, r3, #44	; 0x2c
   15030:	add	r1, pc, r1
   15034:	add	r0, pc, r0
   15038:	bl	124b0 <__assert_fail@plt>
   1503c:	bl	14240 <flatcc_builder_default_alloc@@Base+0x2c4>
   15040:	ldr	r3, [pc, #48]	; 15078 <flatcc_builder_create_struct@@Base+0x158>
   15044:	movw	r2, #783	; 0x30f
   15048:	ldr	r1, [pc, #44]	; 1507c <flatcc_builder_create_struct@@Base+0x15c>
   1504c:	ldr	r0, [pc, #44]	; 15080 <flatcc_builder_create_struct@@Base+0x160>
   15050:	add	r3, pc, r3
   15054:	add	r3, r3, #236	; 0xec
   15058:	add	r1, pc, r1
   1505c:	add	r0, pc, r0
   15060:	bl	124b0 <__assert_fail@plt>
   15064:	andeq	fp, r1, r0, asr #1
   15068:	andeq	r0, r0, r0, asr r0
   1506c:	andeq	r8, r0, r4, asr r7
   15070:	muleq	r0, ip, lr
   15074:	andeq	r8, r0, r0, lsr #30
   15078:	andeq	r8, r0, ip, lsr #14
   1507c:	andeq	r8, r0, r4, ror lr
   15080:	andeq	r8, r0, ip, asr pc

00015084 <flatcc_builder_start_buffer@@Base>:
   15084:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15088:	mov	r5, r1
   1508c:	mov	r4, r0
   15090:	ldrh	r1, [r0, #128]	; 0x80
   15094:	strd	r6, [sp, #8]
   15098:	mov	r7, r3
   1509c:	ldr	r6, [pc, #180]	; 15158 <flatcc_builder_start_buffer@@Base+0xd4>
   150a0:	strd	r8, [sp, #16]
   150a4:	mov	r8, r2
   150a8:	str	sl, [sp, #24]
   150ac:	str	lr, [sp, #28]
   150b0:	bl	142b0 <flatcc_builder_default_alloc@@Base+0x334>
   150b4:	cmp	r0, #0
   150b8:	add	r6, pc, r6
   150bc:	bne	15150 <flatcc_builder_start_buffer@@Base+0xcc>
   150c0:	mov	r3, #1
   150c4:	ldrh	r9, [r4, #132]	; 0x84
   150c8:	cmp	r5, #0
   150cc:	ldr	ip, [r4, #148]	; 0x94
   150d0:	strh	r3, [r4, #128]	; 0x80
   150d4:	ldr	r1, [r4, #32]
   150d8:	ldr	lr, [r4, #136]	; 0x88
   150dc:	add	r2, ip, r3
   150e0:	ldrh	r3, [r4, #164]	; 0xa4
   150e4:	strh	r9, [r1, #34]	; 0x22
   150e8:	strh	r8, [r4, #132]	; 0x84
   150ec:	ldr	r9, [r4, #144]	; 0x90
   150f0:	ldr	r8, [r4, #152]	; 0x98
   150f4:	strh	r3, [r1, #32]
   150f8:	ldr	r3, [r4, #168]	; 0xa8
   150fc:	strh	r7, [r4, #164]	; 0xa4
   15100:	str	r9, [r1, #20]
   15104:	str	r8, [r1, #28]
   15108:	str	lr, [r4, #144]	; 0x90
   1510c:	str	r2, [r4, #148]	; 0x94
   15110:	str	ip, [r4, #152]	; 0x98
   15114:	str	r3, [r1, #16]
   15118:	beq	15144 <flatcc_builder_start_buffer@@Base+0xc0>
   1511c:	ldr	r2, [r5]
   15120:	mov	r3, #1
   15124:	str	r2, [r4, #168]	; 0xa8
   15128:	strh	r3, [r1, #14]
   1512c:	ldrd	r4, [sp]
   15130:	ldrd	r6, [sp, #8]
   15134:	ldrd	r8, [sp, #16]
   15138:	ldr	sl, [sp, #24]
   1513c:	add	sp, sp, #28
   15140:	pop	{pc}		; (ldr pc, [sp], #4)
   15144:	ldr	r3, [pc, #16]	; 1515c <flatcc_builder_start_buffer@@Base+0xd8>
   15148:	ldr	r5, [r6, r3]
   1514c:	b	1511c <flatcc_builder_start_buffer@@Base+0x98>
   15150:	mvn	r0, #0
   15154:	b	1512c <flatcc_builder_start_buffer@@Base+0xa8>
   15158:	andeq	sl, r1, r0, asr #30
   1515c:	andeq	r0, r0, r0, asr r0

00015160 <flatcc_builder_end_buffer@@Base>:
   15160:	ldr	ip, [r0, #32]
   15164:	strd	r4, [sp, #-16]!
   15168:	mov	r4, r0
   1516c:	ldrh	r2, [r0, #164]	; 0xa4
   15170:	ldr	r0, [r0, #152]	; 0x98
   15174:	ldrh	ip, [ip, #14]
   15178:	and	r2, r2, #2
   1517c:	str	r6, [sp, #8]
   15180:	str	lr, [sp, #12]
   15184:	sub	sp, sp, #8
   15188:	cmp	r0, #0
   1518c:	moveq	r0, r2
   15190:	orrne	r0, r2, #1
   15194:	cmp	ip, #1
   15198:	bne	15280 <flatcc_builder_end_buffer@@Base+0x120>
   1519c:	ldrh	r2, [r4, #132]	; 0x84
   151a0:	mov	r3, r1
   151a4:	add	r1, r4, #168	; 0xa8
   151a8:	ldrh	ip, [r4, #128]	; 0x80
   151ac:	cmp	r2, ip
   151b0:	movhi	ip, r2
   151b4:	strhhi	r2, [r4, #128]	; 0x80
   151b8:	str	ip, [sp]
   151bc:	str	r0, [sp, #4]
   151c0:	mov	r0, r4
   151c4:	bl	14cd4 <flatcc_builder_create_buffer@@Base>
   151c8:	subs	r5, r0, #0
   151cc:	beq	15268 <flatcc_builder_end_buffer@@Base+0x108>
   151d0:	mov	r1, #0
   151d4:	ldr	r0, [r4, #16]
   151d8:	ldr	r3, [r4, #32]
   151dc:	ldr	r2, [r4, #20]
   151e0:	ldrh	lr, [r3, #32]
   151e4:	ldr	ip, [r3, #16]
   151e8:	ldr	r6, [r3, #20]
   151ec:	ldr	r3, [r3, #28]
   151f0:	str	r6, [r4, #144]	; 0x90
   151f4:	strh	lr, [r4, #164]	; 0xa4
   151f8:	str	r3, [r4, #152]	; 0x98
   151fc:	str	ip, [r4, #168]	; 0xa8
   15200:	bl	12480 <memset@plt>
   15204:	ldr	r3, [r4, #32]
   15208:	ldr	r0, [r4, #60]	; 0x3c
   1520c:	ldr	r2, [r4, #64]	; 0x40
   15210:	ldr	ip, [r3]
   15214:	ldmib	r3, {r1, lr}
   15218:	add	r0, r0, ip
   1521c:	sub	r2, r2, ip
   15220:	str	r0, [r4, #16]
   15224:	cmp	r2, r1
   15228:	ldrh	r0, [r4, #128]	; 0x80
   1522c:	movcs	r2, r1
   15230:	str	lr, [r4, #20]
   15234:	str	ip, [r4, #28]
   15238:	ldrh	ip, [r4, #130]	; 0x82
   1523c:	str	r2, [r4, #24]
   15240:	ldr	r2, [r4, #156]	; 0x9c
   15244:	str	r1, [r3, #4]
   15248:	cmp	r0, ip
   1524c:	sub	r0, r3, #36	; 0x24
   15250:	strhcc	ip, [r4, #128]	; 0x80
   15254:	ldrh	r1, [r3, #12]
   15258:	sub	r3, r2, #1
   1525c:	str	r0, [r4, #32]
   15260:	strh	r1, [r4, #130]	; 0x82
   15264:	str	r3, [r4, #156]	; 0x9c
   15268:	mov	r0, r5
   1526c:	add	sp, sp, #8
   15270:	ldrd	r4, [sp]
   15274:	ldr	r6, [sp, #8]
   15278:	add	sp, sp, #12
   1527c:	pop	{pc}		; (ldr pc, [sp], #4)
   15280:	ldr	r3, [pc, #28]	; 152a4 <flatcc_builder_end_buffer@@Base+0x144>
   15284:	movw	r2, #838	; 0x346
   15288:	ldr	r1, [pc, #24]	; 152a8 <flatcc_builder_end_buffer@@Base+0x148>
   1528c:	ldr	r0, [pc, #24]	; 152ac <flatcc_builder_end_buffer@@Base+0x14c>
   15290:	add	r3, pc, r3
   15294:	add	r3, r3, #268	; 0x10c
   15298:	add	r1, pc, r1
   1529c:	add	r0, pc, r0
   152a0:	bl	124b0 <__assert_fail@plt>
   152a4:	andeq	r8, r0, ip, ror #9
   152a8:	andeq	r8, r0, r4, lsr ip
   152ac:	andeq	r8, r0, r8, lsr #26

000152b0 <flatcc_builder_start_struct@@Base>:
   152b0:	strd	r4, [sp, #-16]!
   152b4:	mov	r5, r1
   152b8:	mov	r1, r2
   152bc:	mov	r4, r0
   152c0:	str	r6, [sp, #8]
   152c4:	str	lr, [sp, #12]
   152c8:	bl	142b0 <flatcc_builder_default_alloc@@Base+0x334>
   152cc:	cmp	r0, #0
   152d0:	bne	15358 <flatcc_builder_start_struct@@Base+0xa8>
   152d4:	ldr	r6, [r4, #20]
   152d8:	mov	ip, #2
   152dc:	ldr	r2, [r4, #28]
   152e0:	ldr	r3, [r4, #64]	; 0x40
   152e4:	add	r5, r5, r6
   152e8:	ldr	r0, [r4, #60]	; 0x3c
   152ec:	ldr	r1, [r4, #32]
   152f0:	sub	r3, r3, r2
   152f4:	cmn	r3, #4
   152f8:	add	r0, r0, r2
   152fc:	mvnhi	r2, #3
   15300:	movhi	r3, r2
   15304:	strh	ip, [r1, #14]
   15308:	strhi	r2, [r4, #24]
   1530c:	mvn	r2, #3
   15310:	strls	r3, [r4, #24]
   15314:	cmp	r5, r3
   15318:	str	r0, [r4, #16]
   1531c:	str	r2, [r1, #4]
   15320:	str	r5, [r4, #20]
   15324:	bcs	1533c <flatcc_builder_start_struct@@Base+0x8c>
   15328:	add	r0, r0, r6
   1532c:	ldrd	r4, [sp]
   15330:	ldr	r6, [sp, #8]
   15334:	add	sp, sp, #12
   15338:	pop	{pc}		; (ldr pc, [sp], #4)
   1533c:	add	r1, r5, #1
   15340:	mov	r0, r4
   15344:	bl	13ef4 <test@@Base+0x18dc>
   15348:	cmp	r0, #0
   1534c:	bne	15358 <flatcc_builder_start_struct@@Base+0xa8>
   15350:	ldr	r0, [r4, #16]
   15354:	b	15328 <flatcc_builder_start_struct@@Base+0x78>
   15358:	ldrd	r4, [sp]
   1535c:	mov	r0, #0
   15360:	ldr	r6, [sp, #8]
   15364:	add	sp, sp, #12
   15368:	pop	{pc}		; (ldr pc, [sp], #4)

0001536c <flatcc_builder_struct_edit@@Base>:
   1536c:	ldr	r0, [r0, #16]
   15370:	bx	lr

00015374 <flatcc_builder_end_struct@@Base>:
   15374:	ldr	r3, [r0, #32]
   15378:	strd	r4, [sp, #-16]!
   1537c:	ldrh	r3, [r3, #14]
   15380:	str	r6, [sp, #8]
   15384:	str	lr, [sp, #12]
   15388:	cmp	r3, #2
   1538c:	bne	15434 <flatcc_builder_end_struct@@Base+0xc0>
   15390:	ldrh	r3, [r0, #130]	; 0x82
   15394:	mov	r4, r0
   15398:	ldr	r1, [r0, #16]
   1539c:	ldr	r2, [r0, #20]
   153a0:	bl	14f20 <flatcc_builder_create_struct@@Base>
   153a4:	subs	r5, r0, #0
   153a8:	beq	15420 <flatcc_builder_end_struct@@Base+0xac>
   153ac:	mov	r1, #0
   153b0:	ldr	r0, [r4, #16]
   153b4:	ldr	r2, [r4, #20]
   153b8:	bl	12480 <memset@plt>
   153bc:	ldr	r3, [r4, #32]
   153c0:	ldr	r0, [r4, #60]	; 0x3c
   153c4:	ldr	r2, [r4, #64]	; 0x40
   153c8:	ldr	ip, [r3]
   153cc:	ldmib	r3, {r1, lr}
   153d0:	add	r0, r0, ip
   153d4:	sub	r2, r2, ip
   153d8:	str	r0, [r4, #16]
   153dc:	cmp	r2, r1
   153e0:	ldrh	r0, [r4, #128]	; 0x80
   153e4:	movcs	r2, r1
   153e8:	str	lr, [r4, #20]
   153ec:	str	ip, [r4, #28]
   153f0:	ldrh	ip, [r4, #130]	; 0x82
   153f4:	str	r2, [r4, #24]
   153f8:	ldr	r2, [r4, #156]	; 0x9c
   153fc:	str	r1, [r3, #4]
   15400:	cmp	r0, ip
   15404:	sub	r0, r3, #36	; 0x24
   15408:	strhcc	ip, [r4, #128]	; 0x80
   1540c:	ldrh	r1, [r3, #12]
   15410:	sub	r3, r2, #1
   15414:	str	r0, [r4, #32]
   15418:	strh	r1, [r4, #130]	; 0x82
   1541c:	str	r3, [r4, #156]	; 0x9c
   15420:	mov	r0, r5
   15424:	ldrd	r4, [sp]
   15428:	ldr	r6, [sp, #8]
   1542c:	add	sp, sp, #12
   15430:	pop	{pc}		; (ldr pc, [sp], #4)
   15434:	ldr	r3, [pc, #28]	; 15458 <flatcc_builder_end_struct@@Base+0xe4>
   15438:	mov	r2, #872	; 0x368
   1543c:	ldr	r1, [pc, #24]	; 1545c <flatcc_builder_end_struct@@Base+0xe8>
   15440:	ldr	r0, [pc, #24]	; 15460 <flatcc_builder_end_struct@@Base+0xec>
   15444:	add	r3, pc, r3
   15448:	add	r3, r3, #296	; 0x128
   1544c:	add	r1, pc, r1
   15450:	add	r0, pc, r0
   15454:	bl	124b0 <__assert_fail@plt>
   15458:	andeq	r8, r0, r8, lsr r3
   1545c:	andeq	r8, r0, r0, lsl #21
   15460:	andeq	r8, r0, r0, lsr #23

00015464 <flatcc_builder_extend_vector@@Base>:
   15464:	ldr	r2, [r0, #32]
   15468:	strd	r4, [sp, #-16]!
   1546c:	ldr	r3, [r2, #20]
   15470:	ldr	ip, [r2, #24]
   15474:	str	r6, [sp, #8]
   15478:	str	lr, [sp, #12]
   1547c:	adds	r3, r1, r3
   15480:	movcs	r4, #1
   15484:	movcc	r4, #0
   15488:	cmp	ip, r3
   1548c:	orrcc	r4, r4, #1
   15490:	cmp	r4, #0
   15494:	bne	154f0 <flatcc_builder_extend_vector@@Base+0x8c>
   15498:	ldr	ip, [r2, #16]
   1549c:	mov	r5, r0
   154a0:	ldr	r6, [r0, #20]
   154a4:	str	r3, [r2, #20]
   154a8:	ldr	r3, [r0, #24]
   154ac:	mla	r1, ip, r1, r6
   154b0:	cmp	r1, r3
   154b4:	str	r1, [r0, #20]
   154b8:	bcs	154d4 <flatcc_builder_extend_vector@@Base+0x70>
   154bc:	ldr	r0, [r5, #16]
   154c0:	add	r0, r0, r6
   154c4:	ldrd	r4, [sp]
   154c8:	ldr	r6, [sp, #8]
   154cc:	add	sp, sp, #12
   154d0:	pop	{pc}		; (ldr pc, [sp], #4)
   154d4:	add	r1, r1, #1
   154d8:	mvn	r2, #3
   154dc:	bl	13ef4 <test@@Base+0x18dc>
   154e0:	cmp	r0, #0
   154e4:	beq	154bc <flatcc_builder_extend_vector@@Base+0x58>
   154e8:	mov	r0, r4
   154ec:	b	154c4 <flatcc_builder_extend_vector@@Base+0x60>
   154f0:	bl	14278 <flatcc_builder_default_alloc@@Base+0x2fc>

000154f4 <flatcc_builder_vector_push@@Base>:
   154f4:	ldr	r3, [r0, #32]
   154f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   154fc:	ldrh	r2, [r3, #14]
   15500:	strd	r6, [sp, #8]
   15504:	str	r8, [sp, #16]
   15508:	str	lr, [sp, #20]
   1550c:	cmp	r2, #4
   15510:	bne	155a4 <flatcc_builder_vector_push@@Base+0xb0>
   15514:	mov	r7, r1
   15518:	ldr	r2, [r3, #20]
   1551c:	ldr	r1, [r3, #24]
   15520:	cmp	r2, r1
   15524:	bhi	155c8 <flatcc_builder_vector_push@@Base+0xd4>
   15528:	add	r2, r2, #1
   1552c:	ldr	r6, [r3, #16]
   15530:	mov	r4, r0
   15534:	ldr	r5, [r0, #20]
   15538:	str	r2, [r3, #20]
   1553c:	ldr	r3, [r0, #24]
   15540:	add	r1, r6, r5
   15544:	cmp	r1, r3
   15548:	str	r1, [r0, #20]
   1554c:	bcs	15588 <flatcc_builder_vector_push@@Base+0x94>
   15550:	ldr	r3, [r4, #16]
   15554:	adds	r3, r3, r5
   15558:	beq	15570 <flatcc_builder_vector_push@@Base+0x7c>
   1555c:	mov	r0, r3
   15560:	mov	r2, r6
   15564:	mov	r1, r7
   15568:	bl	12408 <memcpy@plt>
   1556c:	mov	r3, r0
   15570:	ldrd	r4, [sp]
   15574:	mov	r0, r3
   15578:	ldrd	r6, [sp, #8]
   1557c:	ldr	r8, [sp, #16]
   15580:	add	sp, sp, #20
   15584:	pop	{pc}		; (ldr pc, [sp], #4)
   15588:	add	r1, r1, #1
   1558c:	mvn	r2, #3
   15590:	bl	13ef4 <test@@Base+0x18dc>
   15594:	cmp	r0, #0
   15598:	beq	15550 <flatcc_builder_vector_push@@Base+0x5c>
   1559c:	mov	r3, #0
   155a0:	b	15570 <flatcc_builder_vector_push@@Base+0x7c>
   155a4:	ldr	r3, [pc, #64]	; 155ec <flatcc_builder_vector_push@@Base+0xf8>
   155a8:	movw	r2, #907	; 0x38b
   155ac:	ldr	r1, [pc, #60]	; 155f0 <flatcc_builder_vector_push@@Base+0xfc>
   155b0:	ldr	r0, [pc, #60]	; 155f4 <flatcc_builder_vector_push@@Base+0x100>
   155b4:	add	r3, pc, r3
   155b8:	add	r3, r3, #324	; 0x144
   155bc:	add	r1, pc, r1
   155c0:	add	r0, pc, r0
   155c4:	bl	124b0 <__assert_fail@plt>
   155c8:	ldr	r3, [pc, #40]	; 155f8 <flatcc_builder_vector_push@@Base+0x104>
   155cc:	mov	r2, #908	; 0x38c
   155d0:	ldr	r1, [pc, #36]	; 155fc <flatcc_builder_vector_push@@Base+0x108>
   155d4:	ldr	r0, [pc, #36]	; 15600 <flatcc_builder_vector_push@@Base+0x10c>
   155d8:	add	r3, pc, r3
   155dc:	add	r3, r3, #324	; 0x144
   155e0:	add	r1, pc, r1
   155e4:	add	r0, pc, r0
   155e8:	bl	124b0 <__assert_fail@plt>
   155ec:	andeq	r8, r0, r8, asr #3
   155f0:	andeq	r8, r0, r0, lsl r9
   155f4:	andeq	r8, r0, ip, asr sl
   155f8:	andeq	r8, r0, r4, lsr #3
   155fc:	andeq	r8, r0, ip, ror #17
   15600:	andeq	r8, r0, r4, ror #20

00015604 <flatcc_builder_append_vector@@Base>:
   15604:	ldr	ip, [r0, #32]
   15608:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1560c:	ldrh	r3, [ip, #14]
   15610:	strd	r6, [sp, #8]
   15614:	str	r8, [sp, #16]
   15618:	str	lr, [sp, #20]
   1561c:	cmp	r3, #4
   15620:	bne	156cc <flatcc_builder_append_vector@@Base+0xc8>
   15624:	mov	r6, r1
   15628:	ldr	r1, [ip, #20]
   1562c:	ldr	r4, [ip, #24]
   15630:	adds	r1, r2, r1
   15634:	movcs	r3, #1
   15638:	movcc	r3, #0
   1563c:	cmp	r4, r1
   15640:	movcs	r4, r3
   15644:	orrcc	r4, r3, #1
   15648:	cmp	r4, #0
   1564c:	bne	156f0 <flatcc_builder_append_vector@@Base+0xec>
   15650:	ldr	r7, [ip, #16]
   15654:	mov	r5, r0
   15658:	ldr	r8, [r0, #20]
   1565c:	ldr	r3, [r0, #24]
   15660:	mul	r7, r7, r2
   15664:	str	r1, [ip, #20]
   15668:	add	r1, r7, r8
   1566c:	cmp	r1, r3
   15670:	str	r1, [r0, #20]
   15674:	bcs	156b0 <flatcc_builder_append_vector@@Base+0xac>
   15678:	ldr	r3, [r5, #16]
   1567c:	adds	r3, r3, r8
   15680:	beq	15698 <flatcc_builder_append_vector@@Base+0x94>
   15684:	mov	r0, r3
   15688:	mov	r2, r7
   1568c:	mov	r1, r6
   15690:	bl	12408 <memcpy@plt>
   15694:	mov	r3, r0
   15698:	ldrd	r4, [sp]
   1569c:	mov	r0, r3
   156a0:	ldrd	r6, [sp, #8]
   156a4:	ldr	r8, [sp, #16]
   156a8:	add	sp, sp, #20
   156ac:	pop	{pc}		; (ldr pc, [sp], #4)
   156b0:	add	r1, r1, #1
   156b4:	mvn	r2, #3
   156b8:	bl	13ef4 <test@@Base+0x18dc>
   156bc:	cmp	r0, #0
   156c0:	beq	15678 <flatcc_builder_append_vector@@Base+0x74>
   156c4:	mov	r3, r4
   156c8:	b	15698 <flatcc_builder_append_vector@@Base+0x94>
   156cc:	ldr	r3, [pc, #32]	; 156f4 <flatcc_builder_append_vector@@Base+0xf0>
   156d0:	movw	r2, #915	; 0x393
   156d4:	ldr	r1, [pc, #28]	; 156f8 <flatcc_builder_append_vector@@Base+0xf4>
   156d8:	ldr	r0, [pc, #28]	; 156fc <flatcc_builder_append_vector@@Base+0xf8>
   156dc:	add	r3, pc, r3
   156e0:	add	r3, r3, #352	; 0x160
   156e4:	add	r1, pc, r1
   156e8:	add	r0, pc, r0
   156ec:	bl	124b0 <__assert_fail@plt>
   156f0:	bl	14278 <flatcc_builder_default_alloc@@Base+0x2fc>
   156f4:	andeq	r8, r0, r0, lsr #1
   156f8:	andeq	r8, r0, r8, ror #15
   156fc:	andeq	r8, r0, r4, lsr r9

00015700 <flatcc_builder_extend_offset_vector@@Base>:
   15700:	ldr	ip, [r0, #32]
   15704:	strd	r4, [sp, #-16]!
   15708:	ldr	r3, [ip, #20]
   1570c:	str	r6, [sp, #8]
   15710:	str	lr, [sp, #12]
   15714:	adds	r2, r1, r3
   15718:	movcs	r3, #1
   1571c:	movcc	r3, #0
   15720:	cmn	r2, #-1073741823	; 0xc0000001
   15724:	movls	r4, #0
   15728:	movhi	r4, #1
   1572c:	orrs	r4, r3, r4
   15730:	bne	15788 <flatcc_builder_extend_offset_vector@@Base+0x88>
   15734:	ldr	r6, [r0, #20]
   15738:	mov	r5, r0
   1573c:	ldr	r3, [r0, #24]
   15740:	str	r2, [ip, #20]
   15744:	add	r1, r6, r1, lsl #2
   15748:	cmp	r1, r3
   1574c:	str	r1, [r0, #20]
   15750:	bcs	1576c <flatcc_builder_extend_offset_vector@@Base+0x6c>
   15754:	ldr	r0, [r5, #16]
   15758:	add	r0, r0, r6
   1575c:	ldrd	r4, [sp]
   15760:	ldr	r6, [sp, #8]
   15764:	add	sp, sp, #12
   15768:	pop	{pc}		; (ldr pc, [sp], #4)
   1576c:	add	r1, r1, #1
   15770:	mvn	r2, #3
   15774:	bl	13ef4 <test@@Base+0x18dc>
   15778:	cmp	r0, #0
   1577c:	beq	15754 <flatcc_builder_extend_offset_vector@@Base+0x54>
   15780:	mov	r0, r4
   15784:	b	1575c <flatcc_builder_extend_offset_vector@@Base+0x5c>
   15788:	bl	14278 <flatcc_builder_default_alloc@@Base+0x2fc>

0001578c <flatcc_builder_offset_vector_push@@Base>:
   1578c:	ldr	r2, [r0, #32]
   15790:	strd	r4, [sp, #-16]!
   15794:	ldrh	r3, [r2, #14]
   15798:	str	r6, [sp, #8]
   1579c:	str	lr, [sp, #12]
   157a0:	cmp	r3, #5
   157a4:	bne	15820 <flatcc_builder_offset_vector_push@@Base+0x94>
   157a8:	ldr	r3, [r2, #20]
   157ac:	cmn	r3, #-1073741823	; 0xc0000001
   157b0:	beq	1580c <flatcc_builder_offset_vector_push@@Base+0x80>
   157b4:	ldr	r5, [r0, #20]
   157b8:	mov	r6, r1
   157bc:	add	r3, r3, #1
   157c0:	mov	r4, r0
   157c4:	ldr	r1, [r0, #24]
   157c8:	str	r3, [r2, #20]
   157cc:	add	r3, r5, #4
   157d0:	cmp	r3, r1
   157d4:	str	r3, [r0, #20]
   157d8:	bcs	157f8 <flatcc_builder_offset_vector_push@@Base+0x6c>
   157dc:	ldr	r3, [r4, #16]
   157e0:	adds	r0, r3, r5
   157e4:	strne	r6, [r3, r5]
   157e8:	ldrd	r4, [sp]
   157ec:	ldr	r6, [sp, #8]
   157f0:	add	sp, sp, #12
   157f4:	pop	{pc}		; (ldr pc, [sp], #4)
   157f8:	mvn	r2, #3
   157fc:	add	r1, r5, #5
   15800:	bl	13ef4 <test@@Base+0x18dc>
   15804:	cmp	r0, #0
   15808:	beq	157dc <flatcc_builder_offset_vector_push@@Base+0x50>
   1580c:	ldrd	r4, [sp]
   15810:	mov	r0, #0
   15814:	ldr	r6, [sp, #8]
   15818:	add	sp, sp, #12
   1581c:	pop	{pc}		; (ldr pc, [sp], #4)
   15820:	ldr	r3, [pc, #28]	; 15844 <flatcc_builder_offset_vector_push@@Base+0xb8>
   15824:	movw	r2, #934	; 0x3a6
   15828:	ldr	r1, [pc, #24]	; 15848 <flatcc_builder_offset_vector_push@@Base+0xbc>
   1582c:	ldr	r0, [pc, #24]	; 1584c <flatcc_builder_offset_vector_push@@Base+0xc0>
   15830:	add	r3, pc, r3
   15834:	add	r3, r3, #384	; 0x180
   15838:	add	r1, pc, r1
   1583c:	add	r0, pc, r0
   15840:	bl	124b0 <__assert_fail@plt>
   15844:	andeq	r7, r0, ip, asr #30
   15848:	muleq	r0, r4, r6
   1584c:	andeq	r8, r0, ip, asr #16

00015850 <flatcc_builder_append_offset_vector@@Base>:
   15850:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15854:	mov	r4, r1
   15858:	ldr	r1, [r0, #32]
   1585c:	ldrh	r3, [r1, #14]
   15860:	strd	r6, [sp, #8]
   15864:	str	r8, [sp, #16]
   15868:	str	lr, [sp, #20]
   1586c:	cmp	r3, #5
   15870:	bne	15910 <flatcc_builder_append_offset_vector@@Base+0xc0>
   15874:	ldr	r3, [r1, #20]
   15878:	adds	r3, r2, r3
   1587c:	movcs	lr, #1
   15880:	movcc	lr, #0
   15884:	cmn	r3, #-1073741823	; 0xc0000001
   15888:	movls	ip, #0
   1588c:	movhi	ip, #1
   15890:	orrs	r8, lr, ip
   15894:	bne	15934 <flatcc_builder_append_offset_vector@@Base+0xe4>
   15898:	ldr	r7, [r0, #20]
   1589c:	lsl	r6, r2, #2
   158a0:	mov	r5, r0
   158a4:	str	r3, [r1, #20]
   158a8:	ldr	r3, [r0, #24]
   158ac:	add	r1, r6, r7
   158b0:	cmp	r1, r3
   158b4:	str	r1, [r0, #20]
   158b8:	bcs	158f4 <flatcc_builder_append_offset_vector@@Base+0xa4>
   158bc:	ldr	r3, [r5, #16]
   158c0:	adds	r3, r3, r7
   158c4:	beq	158dc <flatcc_builder_append_offset_vector@@Base+0x8c>
   158c8:	mov	r0, r3
   158cc:	mov	r2, r6
   158d0:	mov	r1, r4
   158d4:	bl	12408 <memcpy@plt>
   158d8:	mov	r3, r0
   158dc:	ldrd	r4, [sp]
   158e0:	mov	r0, r3
   158e4:	ldrd	r6, [sp, #8]
   158e8:	ldr	r8, [sp, #16]
   158ec:	add	sp, sp, #20
   158f0:	pop	{pc}		; (ldr pc, [sp], #4)
   158f4:	add	r1, r1, #1
   158f8:	mvn	r2, #3
   158fc:	bl	13ef4 <test@@Base+0x18dc>
   15900:	cmp	r0, #0
   15904:	beq	158bc <flatcc_builder_append_offset_vector@@Base+0x6c>
   15908:	mov	r3, r8
   1590c:	b	158dc <flatcc_builder_append_offset_vector@@Base+0x8c>
   15910:	ldr	r3, [pc, #32]	; 15938 <flatcc_builder_append_offset_vector@@Base+0xe8>
   15914:	mov	r2, #948	; 0x3b4
   15918:	ldr	r1, [pc, #28]	; 1593c <flatcc_builder_append_offset_vector@@Base+0xec>
   1591c:	ldr	r0, [pc, #28]	; 15940 <flatcc_builder_append_offset_vector@@Base+0xf0>
   15920:	add	r3, pc, r3
   15924:	add	r3, r3, #420	; 0x1a4
   15928:	add	r1, pc, r1
   1592c:	add	r0, pc, r0
   15930:	bl	124b0 <__assert_fail@plt>
   15934:	bl	14278 <flatcc_builder_default_alloc@@Base+0x2fc>
   15938:	andeq	r7, r0, ip, asr lr
   1593c:	andeq	r8, r0, r4, lsr #11
   15940:	andeq	r8, r0, ip, asr r7

00015944 <flatcc_builder_extend_string@@Base>:
   15944:	ldr	r2, [r0, #32]
   15948:	strd	r4, [sp, #-16]!
   1594c:	ldrh	r3, [r2, #14]
   15950:	str	r6, [sp, #8]
   15954:	str	lr, [sp, #12]
   15958:	cmp	r3, #6
   1595c:	bne	159c4 <flatcc_builder_extend_string@@Base+0x80>
   15960:	ldr	r3, [r2, #20]
   15964:	adds	r3, r1, r3
   15968:	bcs	159c0 <flatcc_builder_extend_string@@Base+0x7c>
   1596c:	ldr	r5, [r0, #20]
   15970:	mov	r4, r0
   15974:	str	r3, [r2, #20]
   15978:	ldr	r3, [r0, #24]
   1597c:	add	r1, r1, r5
   15980:	cmp	r1, r3
   15984:	str	r1, [r0, #20]
   15988:	bcs	159a4 <flatcc_builder_extend_string@@Base+0x60>
   1598c:	ldr	r0, [r4, #16]
   15990:	add	r0, r0, r5
   15994:	ldrd	r4, [sp]
   15998:	ldr	r6, [sp, #8]
   1599c:	add	sp, sp, #12
   159a0:	pop	{pc}		; (ldr pc, [sp], #4)
   159a4:	add	r1, r1, #1
   159a8:	mvn	r2, #3
   159ac:	bl	13ef4 <test@@Base+0x18dc>
   159b0:	cmp	r0, #0
   159b4:	beq	1598c <flatcc_builder_extend_string@@Base+0x48>
   159b8:	mov	r0, #0
   159bc:	b	15994 <flatcc_builder_extend_string@@Base+0x50>
   159c0:	bl	14278 <flatcc_builder_default_alloc@@Base+0x2fc>
   159c4:	ldr	r3, [pc, #28]	; 159e8 <flatcc_builder_extend_string@@Base+0xa4>
   159c8:	movw	r2, #957	; 0x3bd
   159cc:	ldr	r1, [pc, #24]	; 159ec <flatcc_builder_extend_string@@Base+0xa8>
   159d0:	ldr	r0, [pc, #24]	; 159f0 <flatcc_builder_extend_string@@Base+0xac>
   159d4:	add	r3, pc, r3
   159d8:	add	r3, r3, #456	; 0x1c8
   159dc:	add	r1, pc, r1
   159e0:	add	r0, pc, r0
   159e4:	bl	124b0 <__assert_fail@plt>
   159e8:	andeq	r7, r0, r8, lsr #27
   159ec:	strdeq	r8, [r0], -r0
   159f0:	ldrdeq	r8, [r0], -ip

000159f4 <flatcc_builder_append_string@@Base>:
   159f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159f8:	strd	r6, [sp, #8]
   159fc:	mov	r7, r1
   15a00:	ldr	r1, [r0, #32]
   15a04:	str	r8, [sp, #16]
   15a08:	str	lr, [sp, #20]
   15a0c:	ldrh	r3, [r1, #14]
   15a10:	cmp	r3, #6
   15a14:	bne	15aa0 <flatcc_builder_append_string@@Base+0xac>
   15a18:	ldr	r3, [r1, #20]
   15a1c:	mov	r5, r2
   15a20:	adds	r3, r2, r3
   15a24:	bcs	15a9c <flatcc_builder_append_string@@Base+0xa8>
   15a28:	ldr	r6, [r0, #20]
   15a2c:	mov	r4, r0
   15a30:	str	r3, [r1, #20]
   15a34:	ldr	r3, [r0, #24]
   15a38:	add	r1, r2, r6
   15a3c:	cmp	r1, r3
   15a40:	str	r1, [r0, #20]
   15a44:	bcs	15a80 <flatcc_builder_append_string@@Base+0x8c>
   15a48:	ldr	r3, [r4, #16]
   15a4c:	adds	r3, r3, r6
   15a50:	beq	15a68 <flatcc_builder_append_string@@Base+0x74>
   15a54:	mov	r0, r3
   15a58:	mov	r2, r5
   15a5c:	mov	r1, r7
   15a60:	bl	12408 <memcpy@plt>
   15a64:	mov	r3, r0
   15a68:	ldrd	r4, [sp]
   15a6c:	mov	r0, r3
   15a70:	ldrd	r6, [sp, #8]
   15a74:	ldr	r8, [sp, #16]
   15a78:	add	sp, sp, #20
   15a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a80:	add	r1, r1, #1
   15a84:	mvn	r2, #3
   15a88:	bl	13ef4 <test@@Base+0x18dc>
   15a8c:	cmp	r0, #0
   15a90:	beq	15a48 <flatcc_builder_append_string@@Base+0x54>
   15a94:	mov	r3, #0
   15a98:	b	15a68 <flatcc_builder_append_string@@Base+0x74>
   15a9c:	bl	14278 <flatcc_builder_default_alloc@@Base+0x2fc>
   15aa0:	ldr	r3, [pc, #28]	; 15ac4 <flatcc_builder_append_string@@Base+0xd0>
   15aa4:	movw	r2, #966	; 0x3c6
   15aa8:	ldr	r1, [pc, #24]	; 15ac8 <flatcc_builder_append_string@@Base+0xd4>
   15aac:	ldr	r0, [pc, #24]	; 15acc <flatcc_builder_append_string@@Base+0xd8>
   15ab0:	add	r3, pc, r3
   15ab4:	add	r3, r3, #488	; 0x1e8
   15ab8:	add	r1, pc, r1
   15abc:	add	r0, pc, r0
   15ac0:	bl	124b0 <__assert_fail@plt>
   15ac4:	andeq	r7, r0, ip, asr #25
   15ac8:	andeq	r8, r0, r4, lsl r4
   15acc:	andeq	r8, r0, r0, lsl #12

00015ad0 <flatcc_builder_append_string_str@@Base>:
   15ad0:	strd	r4, [sp, #-16]!
   15ad4:	mov	r5, r0
   15ad8:	mov	r0, r1
   15adc:	mov	r4, r1
   15ae0:	str	r6, [sp, #8]
   15ae4:	str	lr, [sp, #12]
   15ae8:	bl	1245c <strlen@plt>
   15aec:	mov	r2, r0
   15af0:	mov	r1, r4
   15af4:	ldr	r6, [sp, #8]
   15af8:	mov	r0, r5
   15afc:	ldrd	r4, [sp]
   15b00:	ldr	lr, [sp, #12]
   15b04:	add	sp, sp, #16
   15b08:	b	159f4 <flatcc_builder_append_string@@Base>

00015b0c <flatcc_builder_append_string_strn@@Base>:
   15b0c:	strd	r4, [sp, #-16]!
   15b10:	mov	r4, r1
   15b14:	mov	r1, #0
   15b18:	str	r6, [sp, #8]
   15b1c:	mov	r6, r0
   15b20:	mov	r0, r4
   15b24:	mov	r5, r2
   15b28:	str	lr, [sp, #12]
   15b2c:	bl	12498 <memchr@plt>
   15b30:	cmp	r0, #0
   15b34:	mov	r1, r4
   15b38:	ldr	lr, [sp, #12]
   15b3c:	subne	r5, r0, r4
   15b40:	mov	r0, r6
   15b44:	mov	r2, r5
   15b48:	ldrd	r4, [sp]
   15b4c:	ldr	r6, [sp, #8]
   15b50:	add	sp, sp, #16
   15b54:	b	159f4 <flatcc_builder_append_string@@Base>

00015b58 <flatcc_builder_truncate_vector@@Base>:
   15b58:	mov	r3, r0
   15b5c:	ldr	r0, [r0, #32]
   15b60:	str	r4, [sp, #-8]!
   15b64:	ldrh	r2, [r0, #14]
   15b68:	str	lr, [sp, #4]
   15b6c:	cmp	r2, #4
   15b70:	bne	15bc0 <flatcc_builder_truncate_vector@@Base+0x68>
   15b74:	mov	lr, r1
   15b78:	ldr	r1, [r0, #20]
   15b7c:	cmp	r1, lr
   15b80:	bcc	15be4 <flatcc_builder_truncate_vector@@Base+0x8c>
   15b84:	ldr	r2, [r0, #16]
   15b88:	sub	ip, r1, lr
   15b8c:	mov	r1, #0
   15b90:	str	ip, [r0, #20]
   15b94:	ldr	r0, [r3, #16]
   15b98:	ldr	ip, [r3, #20]
   15b9c:	mul	r2, r2, lr
   15ba0:	sub	ip, ip, r2
   15ba4:	add	r0, r0, ip
   15ba8:	str	ip, [r3, #20]
   15bac:	bl	12480 <memset@plt>
   15bb0:	ldr	r4, [sp]
   15bb4:	add	sp, sp, #4
   15bb8:	mov	r0, #0
   15bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc0:	ldr	r3, [pc, #64]	; 15c08 <flatcc_builder_truncate_vector@@Base+0xb0>
   15bc4:	movw	r2, #985	; 0x3d9
   15bc8:	ldr	r1, [pc, #60]	; 15c0c <flatcc_builder_truncate_vector@@Base+0xb4>
   15bcc:	ldr	r0, [pc, #60]	; 15c10 <flatcc_builder_truncate_vector@@Base+0xb8>
   15bd0:	add	r3, pc, r3
   15bd4:	add	r3, r3, #520	; 0x208
   15bd8:	add	r1, pc, r1
   15bdc:	add	r0, pc, r0
   15be0:	bl	124b0 <__assert_fail@plt>
   15be4:	ldr	r3, [pc, #40]	; 15c14 <flatcc_builder_truncate_vector@@Base+0xbc>
   15be8:	movw	r2, #986	; 0x3da
   15bec:	ldr	r1, [pc, #36]	; 15c18 <flatcc_builder_truncate_vector@@Base+0xc0>
   15bf0:	ldr	r0, [pc, #36]	; 15c1c <flatcc_builder_truncate_vector@@Base+0xc4>
   15bf4:	add	r3, pc, r3
   15bf8:	add	r3, r3, #520	; 0x208
   15bfc:	add	r1, pc, r1
   15c00:	add	r0, pc, r0
   15c04:	bl	124b0 <__assert_fail@plt>
   15c08:	andeq	r7, r0, ip, lsr #23
   15c0c:	strdeq	r8, [r0], -r4
   15c10:	andeq	r8, r0, r0, asr #8
   15c14:	andeq	r7, r0, r8, lsl #23
   15c18:	ldrdeq	r8, [r0], -r0
   15c1c:	andeq	r8, r0, r8, ror #9

00015c20 <flatcc_builder_truncate_offset_vector@@Base>:
   15c20:	mov	r3, r0
   15c24:	ldr	r0, [r0, #32]
   15c28:	str	r4, [sp, #-8]!
   15c2c:	ldrh	r2, [r0, #14]
   15c30:	str	lr, [sp, #4]
   15c34:	cmp	r2, #5
   15c38:	bne	15c88 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   15c3c:	mov	lr, r1
   15c40:	ldr	r1, [r0, #20]
   15c44:	cmp	r1, lr
   15c48:	bcc	15cac <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   15c4c:	ldr	r2, [r0, #16]
   15c50:	sub	ip, r1, lr
   15c54:	mov	r1, #0
   15c58:	str	ip, [r0, #20]
   15c5c:	ldr	r0, [r3, #16]
   15c60:	ldr	ip, [r3, #20]
   15c64:	mul	r2, r2, lr
   15c68:	sub	ip, ip, r2
   15c6c:	add	r0, r0, ip
   15c70:	str	ip, [r3, #20]
   15c74:	bl	12480 <memset@plt>
   15c78:	ldr	r4, [sp]
   15c7c:	add	sp, sp, #4
   15c80:	mov	r0, #0
   15c84:	pop	{pc}		; (ldr pc, [sp], #4)
   15c88:	ldr	r3, [pc, #64]	; 15cd0 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   15c8c:	movw	r2, #994	; 0x3e2
   15c90:	ldr	r1, [pc, #60]	; 15cd4 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   15c94:	ldr	r0, [pc, #60]	; 15cd8 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   15c98:	add	r3, pc, r3
   15c9c:	add	r3, r3, #552	; 0x228
   15ca0:	add	r1, pc, r1
   15ca4:	add	r0, pc, r0
   15ca8:	bl	124b0 <__assert_fail@plt>
   15cac:	ldr	r3, [pc, #40]	; 15cdc <flatcc_builder_truncate_offset_vector@@Base+0xbc>
   15cb0:	movw	r2, #995	; 0x3e3
   15cb4:	ldr	r1, [pc, #36]	; 15ce0 <flatcc_builder_truncate_offset_vector@@Base+0xc0>
   15cb8:	ldr	r0, [pc, #36]	; 15ce4 <flatcc_builder_truncate_offset_vector@@Base+0xc4>
   15cbc:	add	r3, pc, r3
   15cc0:	add	r3, r3, #552	; 0x228
   15cc4:	add	r1, pc, r1
   15cc8:	add	r0, pc, r0
   15ccc:	bl	124b0 <__assert_fail@plt>
   15cd0:	andeq	r7, r0, r4, ror #21
   15cd4:	andeq	r8, r0, ip, lsr #4
   15cd8:	andeq	r8, r0, r4, ror #7
   15cdc:	andeq	r7, r0, r0, asr #21
   15ce0:	andeq	r8, r0, r8, lsl #4
   15ce4:	andeq	r8, r0, r4, asr #8

00015ce8 <flatcc_builder_truncate_string@@Base>:
   15ce8:	str	r4, [sp, #-8]!
   15cec:	str	lr, [sp, #4]
   15cf0:	ldr	lr, [r0, #32]
   15cf4:	ldrh	r2, [lr, #14]
   15cf8:	cmp	r2, #6
   15cfc:	bne	15d4c <flatcc_builder_truncate_string@@Base+0x64>
   15d00:	ldr	r2, [lr, #20]
   15d04:	mov	ip, r1
   15d08:	cmp	r2, r1
   15d0c:	bcc	15d70 <flatcc_builder_truncate_string@@Base+0x88>
   15d10:	sub	r1, r2, r1
   15d14:	mov	r3, r0
   15d18:	ldr	r0, [r0, #16]
   15d1c:	mov	r2, ip
   15d20:	str	r1, [lr, #20]
   15d24:	mov	r1, #0
   15d28:	ldr	lr, [r3, #20]
   15d2c:	sub	ip, lr, ip
   15d30:	add	r0, r0, ip
   15d34:	str	ip, [r3, #20]
   15d38:	bl	12480 <memset@plt>
   15d3c:	ldr	r4, [sp]
   15d40:	add	sp, sp, #4
   15d44:	mov	r0, #0
   15d48:	pop	{pc}		; (ldr pc, [sp], #4)
   15d4c:	ldr	r3, [pc, #64]	; 15d94 <flatcc_builder_truncate_string@@Base+0xac>
   15d50:	movw	r2, #1003	; 0x3eb
   15d54:	ldr	r1, [pc, #60]	; 15d98 <flatcc_builder_truncate_string@@Base+0xb0>
   15d58:	ldr	r0, [pc, #60]	; 15d9c <flatcc_builder_truncate_string@@Base+0xb4>
   15d5c:	add	r3, pc, r3
   15d60:	add	r3, r3, #592	; 0x250
   15d64:	add	r1, pc, r1
   15d68:	add	r0, pc, r0
   15d6c:	bl	124b0 <__assert_fail@plt>
   15d70:	ldr	r3, [pc, #40]	; 15da0 <flatcc_builder_truncate_string@@Base+0xb8>
   15d74:	mov	r2, #1004	; 0x3ec
   15d78:	ldr	r1, [pc, #36]	; 15da4 <flatcc_builder_truncate_string@@Base+0xbc>
   15d7c:	ldr	r0, [pc, #36]	; 15da8 <flatcc_builder_truncate_string@@Base+0xc0>
   15d80:	add	r3, pc, r3
   15d84:	add	r3, r3, #592	; 0x250
   15d88:	add	r1, pc, r1
   15d8c:	add	r0, pc, r0
   15d90:	bl	124b0 <__assert_fail@plt>
   15d94:	andeq	r7, r0, r0, lsr #20
   15d98:	andeq	r8, r0, r8, ror #2
   15d9c:	andeq	r8, r0, r4, asr r3
   15da0:	strdeq	r7, [r0], -ip
   15da4:	andeq	r8, r0, r4, asr #2
   15da8:			; <UNDEFINED> instruction: 0x000083bc

00015dac <flatcc_builder_start_vector@@Base>:
   15dac:	cmp	r2, #4
   15db0:	strd	r4, [sp, #-16]!
   15db4:	mov	r5, r1
   15db8:	movcs	r1, r2
   15dbc:	movcc	r1, #4
   15dc0:	str	r6, [sp, #8]
   15dc4:	mov	r4, r0
   15dc8:	mov	r6, r3
   15dcc:	str	lr, [sp, #12]
   15dd0:	bl	142b0 <flatcc_builder_default_alloc@@Base+0x334>
   15dd4:	cmp	r0, #0
   15dd8:	bne	15e34 <flatcc_builder_start_vector@@Base+0x88>
   15ddc:	ldr	r3, [r4, #28]
   15de0:	mov	lr, #4
   15de4:	ldr	r2, [r4, #32]
   15de8:	ldr	r1, [r4, #64]	; 0x40
   15dec:	ldr	ip, [r4, #60]	; 0x3c
   15df0:	strh	lr, [r2, #14]
   15df4:	str	r5, [r2, #16]
   15df8:	sub	r1, r1, r3
   15dfc:	str	r0, [r2, #20]
   15e00:	cmn	r1, #4
   15e04:	str	r6, [r2, #24]
   15e08:	add	ip, ip, r3
   15e0c:	mvnhi	r3, #3
   15e10:	strls	r1, [r4, #24]
   15e14:	strhi	r3, [r4, #24]
   15e18:	mvn	r3, #3
   15e1c:	str	ip, [r4, #16]
   15e20:	str	r3, [r2, #4]
   15e24:	ldrd	r4, [sp]
   15e28:	ldr	r6, [sp, #8]
   15e2c:	add	sp, sp, #12
   15e30:	pop	{pc}		; (ldr pc, [sp], #4)
   15e34:	mvn	r0, #0
   15e38:	b	15e24 <flatcc_builder_start_vector@@Base+0x78>

00015e3c <flatcc_builder_start_offset_vector@@Base>:
   15e3c:	mov	r1, #4
   15e40:	strd	r4, [sp, #-16]!
   15e44:	mov	r4, r0
   15e48:	str	r6, [sp, #8]
   15e4c:	str	lr, [sp, #12]
   15e50:	bl	142b0 <flatcc_builder_default_alloc@@Base+0x334>
   15e54:	cmp	r0, #0
   15e58:	bne	15eb0 <flatcc_builder_start_offset_vector@@Base+0x74>
   15e5c:	ldr	ip, [r4, #28]
   15e60:	mov	lr, #4
   15e64:	mov	r5, #5
   15e68:	ldr	r3, [r4, #32]
   15e6c:	ldr	r2, [r4, #64]	; 0x40
   15e70:	ldr	r1, [r4, #60]	; 0x3c
   15e74:	strh	r5, [r3, #14]
   15e78:	str	lr, [r3, #16]
   15e7c:	sub	r2, r2, ip
   15e80:	str	r0, [r3, #20]
   15e84:	cmn	r2, #4
   15e88:	mvnhi	r2, #3
   15e8c:	add	r1, r1, ip
   15e90:	str	r1, [r4, #16]
   15e94:	str	r2, [r4, #24]
   15e98:	mvn	r2, #3
   15e9c:	str	r2, [r3, #4]
   15ea0:	ldrd	r4, [sp]
   15ea4:	ldr	r6, [sp, #8]
   15ea8:	add	sp, sp, #12
   15eac:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb0:	mvn	r0, #0
   15eb4:	b	15ea0 <flatcc_builder_start_offset_vector@@Base+0x64>

00015eb8 <flatcc_builder_start_string@@Base>:
   15eb8:	mov	r1, #1
   15ebc:	strd	r4, [sp, #-16]!
   15ec0:	mov	r4, r0
   15ec4:	str	r6, [sp, #8]
   15ec8:	str	lr, [sp, #12]
   15ecc:	bl	142b0 <flatcc_builder_default_alloc@@Base+0x334>
   15ed0:	cmp	r0, #0
   15ed4:	bne	15f2c <flatcc_builder_start_string@@Base+0x74>
   15ed8:	ldr	ip, [r4, #28]
   15edc:	mov	lr, #1
   15ee0:	mov	r5, #6
   15ee4:	ldr	r3, [r4, #32]
   15ee8:	ldr	r2, [r4, #64]	; 0x40
   15eec:	ldr	r1, [r4, #60]	; 0x3c
   15ef0:	strh	r5, [r3, #14]
   15ef4:	str	lr, [r3, #16]
   15ef8:	sub	r2, r2, ip
   15efc:	str	r0, [r3, #20]
   15f00:	cmn	r2, #4
   15f04:	mvnhi	r2, #3
   15f08:	add	r1, r1, ip
   15f0c:	str	r1, [r4, #16]
   15f10:	str	r2, [r4, #24]
   15f14:	mvn	r2, #3
   15f18:	str	r2, [r3, #4]
   15f1c:	ldrd	r4, [sp]
   15f20:	ldr	r6, [sp, #8]
   15f24:	add	sp, sp, #12
   15f28:	pop	{pc}		; (ldr pc, [sp], #4)
   15f2c:	mvn	r0, #0
   15f30:	b	15f1c <flatcc_builder_start_string@@Base+0x64>

00015f34 <flatcc_builder_reserve_table@@Base>:
   15f34:	cmp	r1, #0
   15f38:	strd	r4, [sp, #-20]!	; 0xffffffec
   15f3c:	strd	r6, [sp, #8]
   15f40:	str	lr, [sp, #16]
   15f44:	sub	sp, sp, #12
   15f48:	blt	1602c <flatcc_builder_reserve_table@@Base+0xf8>
   15f4c:	ldr	r2, [r0, #32]
   15f50:	add	r1, r1, #2
   15f54:	mov	r4, r0
   15f58:	lsl	r5, r1, #1
   15f5c:	ldr	r1, [r0, #56]	; 0x38
   15f60:	ldrh	r6, [r2, #28]
   15f64:	ldr	r3, [r2, #16]
   15f68:	add	r6, r3, r6, lsl #1
   15f6c:	add	r2, r6, r5
   15f70:	cmp	r2, r1
   15f74:	bhi	15fdc <flatcc_builder_reserve_table@@Base+0xa8>
   15f78:	ldr	r3, [r4, #52]	; 0x34
   15f7c:	adds	r3, r3, r6
   15f80:	mvneq	r0, #0
   15f84:	streq	r3, [r4, #4]
   15f88:	beq	15fc8 <flatcc_builder_reserve_table@@Base+0x94>
   15f8c:	ldr	r2, [r4, #32]
   15f90:	add	r3, r3, #4
   15f94:	ldr	r1, [r4, #80]	; 0x50
   15f98:	ldr	r6, [r2, #20]
   15f9c:	str	r3, [r4, #4]
   15fa0:	add	r2, r5, r6
   15fa4:	sub	r2, r2, #3
   15fa8:	cmp	r2, r1
   15fac:	bhi	16004 <flatcc_builder_reserve_table@@Base+0xd0>
   15fb0:	ldr	r3, [r4, #76]	; 0x4c
   15fb4:	add	r3, r3, r6
   15fb8:	clz	r0, r3
   15fbc:	lsr	r0, r0, #5
   15fc0:	str	r3, [r4]
   15fc4:	rsb	r0, r0, #0
   15fc8:	add	sp, sp, #12
   15fcc:	ldrd	r4, [sp]
   15fd0:	ldrd	r6, [sp, #8]
   15fd4:	add	sp, sp, #16
   15fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fdc:	mov	ip, #0
   15fe0:	add	r1, r0, #52	; 0x34
   15fe4:	ldr	r0, [r0, #40]	; 0x28
   15fe8:	mov	r3, #1
   15fec:	str	ip, [sp]
   15ff0:	ldr	r7, [r4, #48]	; 0x30
   15ff4:	blx	r7
   15ff8:	cmp	r0, #0
   15ffc:	beq	15f78 <flatcc_builder_reserve_table@@Base+0x44>
   16000:	bl	140a0 <flatcc_builder_default_alloc@@Base+0x124>
   16004:	mov	ip, #3
   16008:	mov	r3, #0
   1600c:	ldr	r0, [r4, #40]	; 0x28
   16010:	add	r1, r4, #76	; 0x4c
   16014:	str	ip, [sp]
   16018:	ldr	r5, [r4, #48]	; 0x30
   1601c:	blx	r5
   16020:	cmp	r0, #0
   16024:	beq	15fb0 <flatcc_builder_reserve_table@@Base+0x7c>
   16028:	b	16000 <flatcc_builder_reserve_table@@Base+0xcc>
   1602c:	ldr	r3, [pc, #28]	; 16050 <flatcc_builder_reserve_table@@Base+0x11c>
   16030:	movw	r2, #1065	; 0x429
   16034:	ldr	r1, [pc, #24]	; 16054 <flatcc_builder_reserve_table@@Base+0x120>
   16038:	ldr	r0, [pc, #24]	; 16058 <flatcc_builder_reserve_table@@Base+0x124>
   1603c:	add	r3, pc, r3
   16040:	add	r3, r3, #624	; 0x270
   16044:	add	r1, pc, r1
   16048:	add	r0, pc, r0
   1604c:	bl	124b0 <__assert_fail@plt>
   16050:	andeq	r7, r0, r0, asr #14
   16054:	andeq	r7, r0, r8, lsl #29
   16058:	andeq	r8, r0, r4, lsr #2

0001605c <flatcc_builder_start_table@@Base>:
   1605c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16060:	mov	r5, r1
   16064:	mov	r1, #4
   16068:	strd	r6, [sp, #8]
   1606c:	mov	r4, r0
   16070:	strd	r8, [sp, #16]
   16074:	str	sl, [sp, #24]
   16078:	str	lr, [sp, #28]
   1607c:	sub	sp, sp, #8
   16080:	bl	142b0 <flatcc_builder_default_alloc@@Base+0x334>
   16084:	subs	r7, r0, #0
   16088:	bne	161d0 <flatcc_builder_start_table@@Base+0x174>
   1608c:	ldm	r4, {r0, r2}
   16090:	add	r5, r5, #2
   16094:	movw	ip, #15186	; 0x3b52
   16098:	movt	ip, #12137	; 0x2f69
   1609c:	lsl	r5, r5, #1
   160a0:	mov	r8, #3
   160a4:	ldrh	lr, [r4, #8]
   160a8:	ldr	r1, [r4, #52]	; 0x34
   160ac:	ldr	sl, [r4, #76]	; 0x4c
   160b0:	ldr	r3, [r4, #32]
   160b4:	sub	r2, r2, r1
   160b8:	ldr	r9, [r4, #56]	; 0x38
   160bc:	add	r6, r2, lr, lsl #1
   160c0:	sub	r0, r0, sl
   160c4:	ldr	sl, [r4, #12]
   160c8:	str	r2, [r3, #16]
   160cc:	add	r2, r6, r5
   160d0:	str	r0, [r3, #20]
   160d4:	cmp	r2, r9
   160d8:	str	sl, [r3, #24]
   160dc:	strh	lr, [r3, #28]
   160e0:	strh	r7, [r4, #8]
   160e4:	str	ip, [r4, #12]
   160e8:	strh	r8, [r3, #14]
   160ec:	bls	16114 <flatcc_builder_start_table@@Base+0xb8>
   160f0:	mov	r3, #1
   160f4:	add	r1, r4, #52	; 0x34
   160f8:	str	r7, [sp]
   160fc:	ldr	r0, [r4, #40]	; 0x28
   16100:	ldr	r8, [r4, #48]	; 0x30
   16104:	blx	r8
   16108:	cmp	r0, #0
   1610c:	bne	161cc <flatcc_builder_start_table@@Base+0x170>
   16110:	ldr	r1, [r4, #52]	; 0x34
   16114:	adds	r6, r6, r1
   16118:	streq	r6, [r4, #4]
   1611c:	beq	161d0 <flatcc_builder_start_table@@Base+0x174>
   16120:	ldr	r1, [r4, #32]
   16124:	sub	r2, r5, #3
   16128:	add	r6, r6, #4
   1612c:	ldr	r3, [r4, #80]	; 0x50
   16130:	ldr	r5, [r1, #20]
   16134:	str	r6, [r4, #4]
   16138:	add	r2, r2, r5
   1613c:	cmp	r2, r3
   16140:	bhi	161a8 <flatcc_builder_start_table@@Base+0x14c>
   16144:	ldr	r3, [r4, #76]	; 0x4c
   16148:	add	r3, r3, r5
   1614c:	cmp	r3, #0
   16150:	str	r3, [r4]
   16154:	beq	161d0 <flatcc_builder_start_table@@Base+0x174>
   16158:	ldr	r0, [r4, #28]
   1615c:	movw	r2, #65532	; 0xfffc
   16160:	ldr	ip, [r4, #32]
   16164:	ldr	r3, [r4, #64]	; 0x40
   16168:	ldr	r1, [r4, #60]	; 0x3c
   1616c:	sub	r3, r3, r0
   16170:	cmp	r3, r2
   16174:	add	r1, r1, r0
   16178:	movcs	r3, r2
   1617c:	str	r1, [r4, #16]
   16180:	str	r3, [r4, #24]
   16184:	str	r2, [ip, #4]
   16188:	mov	r0, r7
   1618c:	add	sp, sp, #8
   16190:	ldrd	r4, [sp]
   16194:	ldrd	r6, [sp, #8]
   16198:	ldrd	r8, [sp, #16]
   1619c:	ldr	sl, [sp, #24]
   161a0:	add	sp, sp, #28
   161a4:	pop	{pc}		; (ldr pc, [sp], #4)
   161a8:	mov	ip, #3
   161ac:	mov	r3, #0
   161b0:	ldr	r0, [r4, #40]	; 0x28
   161b4:	add	r1, r4, #76	; 0x4c
   161b8:	str	ip, [sp]
   161bc:	ldr	r6, [r4, #48]	; 0x30
   161c0:	blx	r6
   161c4:	cmp	r0, #0
   161c8:	beq	16144 <flatcc_builder_start_table@@Base+0xe8>
   161cc:	bl	140a0 <flatcc_builder_default_alloc@@Base+0x124>
   161d0:	mvn	r7, #0
   161d4:	b	16188 <flatcc_builder_start_table@@Base+0x12c>

000161d8 <flatcc_builder_create_vtable@@Base>:
   161d8:	mov	r3, #0
   161dc:	strd	r4, [sp, #-16]!
   161e0:	mov	r5, r0
   161e4:	ldr	r0, [r0, #152]	; 0x98
   161e8:	cmp	r2, #0
   161ec:	str	r6, [sp, #8]
   161f0:	str	lr, [sp, #12]
   161f4:	sub	sp, sp, #80	; 0x50
   161f8:	str	r3, [sp, #8]
   161fc:	str	r3, [sp, #12]
   16200:	beq	16278 <flatcc_builder_create_vtable@@Base+0xa0>
   16204:	mov	r3, #1
   16208:	cmp	r0, #0
   1620c:	strd	r2, [sp, #8]
   16210:	str	r1, [sp, #16]
   16214:	str	r2, [sp, #20]
   16218:	beq	162b0 <flatcc_builder_create_vtable@@Base+0xd8>
   1621c:	ldr	r3, [r5, #136]	; 0x88
   16220:	sub	r4, r3, r2
   16224:	cmp	r3, r4
   16228:	ble	1628c <flatcc_builder_create_vtable@@Base+0xb4>
   1622c:	mov	r3, r4
   16230:	add	r1, sp, #16
   16234:	str	r2, [sp]
   16238:	ldr	r2, [sp, #12]
   1623c:	ldr	r0, [r5, #36]	; 0x24
   16240:	ldr	r6, [r5, #44]	; 0x2c
   16244:	blx	r6
   16248:	cmp	r0, #0
   1624c:	bne	162fc <flatcc_builder_create_vtable@@Base+0x124>
   16250:	cmp	r4, #0
   16254:	str	r4, [r5, #136]	; 0x88
   16258:	beq	16260 <flatcc_builder_create_vtable@@Base+0x88>
   1625c:	add	r4, r4, #1
   16260:	mov	r0, r4
   16264:	add	sp, sp, #80	; 0x50
   16268:	ldrd	r4, [sp]
   1626c:	ldr	r6, [sp, #8]
   16270:	add	sp, sp, #12
   16274:	pop	{pc}		; (ldr pc, [sp], #4)
   16278:	cmp	r0, #0
   1627c:	bne	1628c <flatcc_builder_create_vtable@@Base+0xb4>
   16280:	ldr	r3, [r5, #180]	; 0xb4
   16284:	cmp	r3, #0
   16288:	beq	162f4 <flatcc_builder_create_vtable@@Base+0x11c>
   1628c:	ldr	r3, [pc, #108]	; 16300 <flatcc_builder_create_vtable@@Base+0x128>
   16290:	movw	r2, #647	; 0x287
   16294:	ldr	r1, [pc, #104]	; 16304 <flatcc_builder_create_vtable@@Base+0x12c>
   16298:	ldr	r0, [pc, #104]	; 16308 <flatcc_builder_create_vtable@@Base+0x130>
   1629c:	add	r3, pc, r3
   162a0:	add	r3, r3, #44	; 0x2c
   162a4:	add	r1, pc, r1
   162a8:	add	r0, pc, r0
   162ac:	bl	124b0 <__assert_fail@plt>
   162b0:	ldr	r3, [r5, #180]	; 0xb4
   162b4:	cmp	r3, #0
   162b8:	bne	1621c <flatcc_builder_create_vtable@@Base+0x44>
   162bc:	ldr	r4, [r5, #140]	; 0x8c
   162c0:	mov	r0, r2
   162c4:	add	r2, r4, r2
   162c8:	str	r2, [r5, #140]	; 0x8c
   162cc:	mov	r3, r4
   162d0:	add	r1, sp, #16
   162d4:	str	r0, [sp]
   162d8:	ldr	r2, [sp, #12]
   162dc:	ldr	r0, [r5, #36]	; 0x24
   162e0:	ldr	r5, [r5, #44]	; 0x2c
   162e4:	blx	r5
   162e8:	cmp	r0, #0
   162ec:	beq	1625c <flatcc_builder_create_vtable@@Base+0x84>
   162f0:	bl	140d4 <flatcc_builder_default_alloc@@Base+0x158>
   162f4:	ldr	r4, [r5, #140]	; 0x8c
   162f8:	b	162cc <flatcc_builder_create_vtable@@Base+0xf4>
   162fc:	bl	14240 <flatcc_builder_default_alloc@@Base+0x2c4>
   16300:	andeq	r7, r0, r0, ror #9
   16304:	andeq	r7, r0, r8, lsr #24
   16308:	andeq	r7, r0, ip, lsr #25

0001630c <flatcc_builder_create_cached_vtable@@Base>:
   1630c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16310:	strd	r6, [sp, #8]
   16314:	mov	r6, r0
   16318:	strd	r8, [sp, #16]
   1631c:	mov	r9, r2
   16320:	mov	r8, r3
   16324:	strd	sl, [sp, #24]
   16328:	str	lr, [sp, #32]
   1632c:	sub	sp, sp, #28
   16330:	str	r1, [sp, #8]
   16334:	ldr	r1, [r0, #116]	; 0x74
   16338:	cmp	r1, #0
   1633c:	rsbne	r1, r1, #32
   16340:	beq	164c8 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   16344:	ldr	sl, [r6, #92]	; 0x5c
   16348:	lsr	r8, r8, r1
   1634c:	adds	fp, sl, r8, lsl #2
   16350:	str	fp, [sp, #12]
   16354:	beq	16564 <flatcc_builder_create_cached_vtable@@Base+0x258>
   16358:	ldr	r5, [sl, r8, lsl #2]
   1635c:	cmp	r5, #0
   16360:	beq	16598 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   16364:	mov	r3, #0
   16368:	str	r8, [sp, #16]
   1636c:	mov	r8, fp
   16370:	mov	fp, r6
   16374:	ldr	r7, [r6, #68]	; 0x44
   16378:	str	r3, [sp, #20]
   1637c:	ldr	r3, [r6, #100]	; 0x64
   16380:	mov	r6, r3
   16384:	add	r4, r6, r5
   16388:	ldr	r1, [r4, #8]
   1638c:	ldrh	r2, [r7, r1]
   16390:	add	r1, r7, r1
   16394:	cmp	r2, r9
   16398:	bne	16474 <flatcc_builder_create_cached_vtable@@Base+0x168>
   1639c:	mov	r2, r9
   163a0:	ldr	r0, [sp, #8]
   163a4:	bl	12414 <memcmp@plt>
   163a8:	cmp	r0, #0
   163ac:	bne	16474 <flatcc_builder_create_cached_vtable@@Base+0x168>
   163b0:	ldr	r1, [r4, #4]
   163b4:	ldr	r2, [fp, #152]	; 0x98
   163b8:	cmp	r1, r2
   163bc:	beq	16480 <flatcc_builder_create_cached_vtable@@Base+0x174>
   163c0:	ldr	r5, [r4, #12]
   163c4:	add	r8, r4, #12
   163c8:	str	r4, [sp, #20]
   163cc:	cmp	r5, #0
   163d0:	bne	16384 <flatcc_builder_create_cached_vtable@@Base+0x78>
   163d4:	ldr	r8, [sp, #16]
   163d8:	mov	r6, fp
   163dc:	ldr	r3, [r6, #104]	; 0x68
   163e0:	ldr	r4, [r6, #124]	; 0x7c
   163e4:	add	r2, r4, #16
   163e8:	cmp	r2, r3
   163ec:	bls	16414 <flatcc_builder_create_cached_vtable@@Base+0x108>
   163f0:	mov	ip, #6
   163f4:	mov	r3, #0
   163f8:	ldr	r0, [r6, #40]	; 0x28
   163fc:	add	r1, r6, #100	; 0x64
   16400:	str	ip, [sp]
   16404:	ldr	r5, [r6, #48]	; 0x30
   16408:	blx	r5
   1640c:	cmp	r0, #0
   16410:	bne	16594 <flatcc_builder_create_cached_vtable@@Base+0x288>
   16414:	ldr	r5, [r6, #100]	; 0x64
   16418:	adds	r7, r5, r4
   1641c:	beq	16564 <flatcc_builder_create_cached_vtable@@Base+0x258>
   16420:	ldr	r3, [r6, #124]	; 0x7c
   16424:	mov	r2, r9
   16428:	ldr	r0, [r6, #152]	; 0x98
   1642c:	ldr	r1, [sp, #8]
   16430:	add	ip, r3, #16
   16434:	str	ip, [r6, #124]	; 0x7c
   16438:	str	r0, [r7, #4]
   1643c:	mov	r0, r6
   16440:	ldr	ip, [sl, r8, lsl #2]
   16444:	str	ip, [r7, #12]
   16448:	str	r3, [sl, r8, lsl #2]
   1644c:	bl	161d8 <flatcc_builder_create_vtable@@Base>
   16450:	cmp	r0, #0
   16454:	str	r0, [r5, r4]
   16458:	beq	16564 <flatcc_builder_create_cached_vtable@@Base+0x258>
   1645c:	ldr	r3, [sp, #20]
   16460:	cmp	r3, #0
   16464:	beq	165a8 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   16468:	ldr	r3, [r3, #8]
   1646c:	str	r3, [r7, #8]
   16470:	b	164ac <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16474:	add	r8, r4, #12
   16478:	ldr	r5, [r4, #12]
   1647c:	b	163cc <flatcc_builder_create_cached_vtable@@Base+0xc0>
   16480:	ldr	r3, [sp, #12]
   16484:	mov	fp, r8
   16488:	ldr	r8, [sp, #16]
   1648c:	cmp	r3, fp
   16490:	beq	164a8 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   16494:	ldr	r3, [r4, #12]
   16498:	str	r3, [fp]
   1649c:	ldr	r3, [sl, r8, lsl #2]
   164a0:	str	r3, [r4, #12]
   164a4:	str	r5, [sl, r8, lsl #2]
   164a8:	ldr	r0, [r4]
   164ac:	add	sp, sp, #28
   164b0:	ldrd	r4, [sp]
   164b4:	ldrd	r6, [sp, #8]
   164b8:	ldrd	r8, [sp, #16]
   164bc:	ldrd	sl, [sp, #24]
   164c0:	add	sp, sp, #32
   164c4:	pop	{pc}		; (ldr pc, [sp], #4)
   164c8:	ldr	r4, [r0, #124]	; 0x7c
   164cc:	add	r5, r0, #92	; 0x5c
   164d0:	cmp	r4, #0
   164d4:	bne	1663c <flatcc_builder_create_cached_vtable@@Base+0x330>
   164d8:	ldr	r3, [r0, #104]	; 0x68
   164dc:	cmp	r3, #15
   164e0:	bls	1656c <flatcc_builder_create_cached_vtable@@Base+0x260>
   164e4:	ldr	r3, [r6, #100]	; 0x64
   164e8:	cmp	r3, #0
   164ec:	beq	16564 <flatcc_builder_create_cached_vtable@@Base+0x258>
   164f0:	mov	ip, #16
   164f4:	mov	r2, #5
   164f8:	ldr	r0, [r6, #40]	; 0x28
   164fc:	mov	r1, r5
   16500:	mov	r3, #1
   16504:	str	r2, [sp]
   16508:	mov	r2, #256	; 0x100
   1650c:	str	ip, [r6, #124]	; 0x7c
   16510:	ldr	r5, [r6, #48]	; 0x30
   16514:	blx	r5
   16518:	cmp	r0, #0
   1651c:	bne	16564 <flatcc_builder_create_cached_vtable@@Base+0x258>
   16520:	mov	r3, #256	; 0x100
   16524:	ldr	r1, [r6, #96]	; 0x60
   16528:	b	16530 <flatcc_builder_create_cached_vtable@@Base+0x224>
   1652c:	mov	r3, r2
   16530:	lsl	r2, r3, #1
   16534:	cmp	r2, r1
   16538:	bls	1652c <flatcc_builder_create_cached_vtable@@Base+0x220>
   1653c:	lsr	r3, r3, #2
   16540:	cmp	r3, #1
   16544:	bls	165a0 <flatcc_builder_create_cached_vtable@@Base+0x294>
   16548:	mov	r2, #1
   1654c:	add	r4, r4, #1
   16550:	cmp	r3, r2, lsl r4
   16554:	bhi	1654c <flatcc_builder_create_cached_vtable@@Base+0x240>
   16558:	rsb	r1, r4, #32
   1655c:	str	r4, [r6, #116]	; 0x74
   16560:	b	16344 <flatcc_builder_create_cached_vtable@@Base+0x38>
   16564:	mov	r0, #0
   16568:	b	164ac <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1656c:	mov	ip, #6
   16570:	add	r1, r0, #100	; 0x64
   16574:	ldr	r0, [r0, #40]	; 0x28
   16578:	mov	r3, r4
   1657c:	mov	r2, #16
   16580:	str	ip, [sp]
   16584:	ldr	r7, [r6, #48]	; 0x30
   16588:	blx	r7
   1658c:	cmp	r0, #0
   16590:	beq	164e4 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   16594:	bl	140a0 <flatcc_builder_default_alloc@@Base+0x124>
   16598:	str	r5, [sp, #20]
   1659c:	b	163dc <flatcc_builder_create_cached_vtable@@Base+0xd0>
   165a0:	mov	r1, #32
   165a4:	b	1655c <flatcc_builder_create_cached_vtable@@Base+0x250>
   165a8:	ldr	r8, [r6, #120]	; 0x78
   165ac:	ldr	r3, [r6, #172]	; 0xac
   165b0:	add	r2, r9, r8
   165b4:	cmp	r3, #0
   165b8:	beq	165c4 <flatcc_builder_create_cached_vtable@@Base+0x2b8>
   165bc:	cmp	r3, r2
   165c0:	bcc	16624 <flatcc_builder_create_cached_vtable@@Base+0x318>
   165c4:	ldr	r3, [r6, #72]	; 0x48
   165c8:	cmp	r3, r2
   165cc:	bcs	165f4 <flatcc_builder_create_cached_vtable@@Base+0x2e8>
   165d0:	mov	ip, #2
   165d4:	mov	r3, #0
   165d8:	ldr	r0, [r6, #40]	; 0x28
   165dc:	add	r1, r6, #68	; 0x44
   165e0:	str	ip, [sp]
   165e4:	ldr	sl, [r6, #48]	; 0x30
   165e8:	blx	sl
   165ec:	cmp	r0, #0
   165f0:	bne	16594 <flatcc_builder_create_cached_vtable@@Base+0x288>
   165f4:	ldr	r3, [r6, #68]	; 0x44
   165f8:	adds	r0, r3, r8
   165fc:	beq	16634 <flatcc_builder_create_cached_vtable@@Base+0x328>
   16600:	ldr	r3, [r6, #120]	; 0x78
   16604:	mov	r2, r9
   16608:	ldr	r1, [sp, #8]
   1660c:	add	r9, r3, r9
   16610:	str	r3, [r7, #8]
   16614:	str	r9, [r6, #120]	; 0x78
   16618:	bl	12408 <memcpy@plt>
   1661c:	ldr	r0, [r5, r4]
   16620:	b	164ac <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16624:	mov	r0, r6
   16628:	bl	14600 <flatcc_builder_flush_vtable_cache@@Base>
   1662c:	ldr	r0, [r5, r4]
   16630:	b	164ac <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16634:	mvn	r0, #0
   16638:	b	164ac <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1663c:	ldr	r3, [pc, #28]	; 16660 <flatcc_builder_create_cached_vtable@@Base+0x354>
   16640:	movw	r2, #342	; 0x156
   16644:	ldr	r1, [pc, #24]	; 16664 <flatcc_builder_create_cached_vtable@@Base+0x358>
   16648:	ldr	r0, [pc, #24]	; 16668 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   1664c:	add	r3, pc, r3
   16650:	add	r3, r3, #656	; 0x290
   16654:	add	r1, pc, r1
   16658:	add	r0, pc, r0
   1665c:	bl	124b0 <__assert_fail@plt>
   16660:	andeq	r7, r0, r0, lsr r1
   16664:	andeq	r7, r0, r8, ror r8
   16668:	andeq	r7, r0, r0, lsr #22

0001666c <flatcc_builder_create_table@@Base>:
   1666c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16670:	mov	r5, r0
   16674:	strd	r6, [sp, #8]
   16678:	str	r8, [sp, #16]
   1667c:	str	lr, [sp, #20]
   16680:	sub	sp, sp, #88	; 0x58
   16684:	ldr	r6, [sp, #116]	; 0x74
   16688:	ldr	r7, [pc, #444]	; 1684c <flatcc_builder_create_table@@Base+0x1e0>
   1668c:	ldr	r0, [sp, #120]	; 0x78
   16690:	cmp	r6, #0
   16694:	add	r7, pc, r7
   16698:	blt	16800 <flatcc_builder_create_table@@Base+0x194>
   1669c:	tst	r0, #1
   166a0:	beq	167dc <flatcc_builder_create_table@@Base+0x170>
   166a4:	ldrh	ip, [r5, #128]	; 0x80
   166a8:	cmp	r3, #4
   166ac:	sub	r0, r0, #1
   166b0:	movcc	r3, #4
   166b4:	cmp	ip, r3
   166b8:	ldr	ip, [r5, #136]	; 0x88
   166bc:	strhcc	r3, [r5, #128]	; 0x80
   166c0:	sub	r3, r3, #1
   166c4:	cmp	r6, #0
   166c8:	sub	r4, ip, r2
   166cc:	mov	r8, r4
   166d0:	sub	r4, r4, #4
   166d4:	and	r8, r8, r3
   166d8:	sub	r0, r4, r0
   166dc:	sub	r0, r0, r8
   166e0:	str	r0, [sp, #12]
   166e4:	beq	16718 <flatcc_builder_create_table@@Base+0xac>
   166e8:	ldr	ip, [sp, #112]	; 0x70
   166ec:	sub	r4, r8, r4
   166f0:	sub	r4, r4, #4
   166f4:	add	r6, ip, r6, lsl #1
   166f8:	ldrh	r3, [ip], #2
   166fc:	ldr	r0, [r1, r3]
   16700:	sub	lr, r4, r3
   16704:	cmp	r6, ip
   16708:	add	r0, r0, lr
   1670c:	str	r0, [r1, r3]
   16710:	bne	166f8 <flatcc_builder_create_table@@Base+0x8c>
   16714:	ldr	ip, [r5, #136]	; 0x88
   16718:	mov	r3, #1
   1671c:	mov	r0, #4
   16720:	cmp	r2, #0
   16724:	str	r0, [sp, #16]
   16728:	str	r3, [sp, #20]
   1672c:	add	r3, sp, #12
   16730:	str	r3, [sp, #24]
   16734:	str	r0, [sp, #28]
   16738:	beq	16754 <flatcc_builder_create_table@@Base+0xe8>
   1673c:	add	r0, r2, r0
   16740:	mov	r3, #2
   16744:	str	r0, [sp, #16]
   16748:	str	r3, [sp, #20]
   1674c:	str	r1, [sp, #32]
   16750:	str	r2, [sp, #36]	; 0x24
   16754:	cmp	r8, #0
   16758:	bne	167ac <flatcc_builder_create_table@@Base+0x140>
   1675c:	sub	r4, ip, r0
   16760:	cmp	r4, ip
   16764:	bge	16828 <flatcc_builder_create_table@@Base+0x1bc>
   16768:	mov	r3, r4
   1676c:	add	r1, sp, #24
   16770:	str	r0, [sp]
   16774:	ldr	r2, [sp, #20]
   16778:	ldr	r0, [r5, #36]	; 0x24
   1677c:	ldr	r6, [r5, #44]	; 0x2c
   16780:	blx	r6
   16784:	cmp	r0, #0
   16788:	bne	16824 <flatcc_builder_create_table@@Base+0x1b8>
   1678c:	mov	r0, r4
   16790:	str	r4, [r5, #136]	; 0x88
   16794:	add	sp, sp, #88	; 0x58
   16798:	ldrd	r4, [sp]
   1679c:	ldrd	r6, [sp, #8]
   167a0:	ldr	r8, [sp, #16]
   167a4:	add	sp, sp, #20
   167a8:	pop	{pc}		; (ldr pc, [sp], #4)
   167ac:	ldr	r2, [pc, #156]	; 16850 <flatcc_builder_create_table@@Base+0x1e4>
   167b0:	add	r0, r0, r8
   167b4:	ldr	r3, [sp, #20]
   167b8:	str	r0, [sp, #16]
   167bc:	ldr	r1, [r7, r2]
   167c0:	add	r2, sp, #88	; 0x58
   167c4:	add	r3, r3, #1
   167c8:	add	r2, r2, r3, lsl #3
   167cc:	str	r3, [sp, #20]
   167d0:	str	r1, [r2, #-72]	; 0xffffffb8
   167d4:	str	r8, [r2, #-68]	; 0xffffffbc
   167d8:	b	1675c <flatcc_builder_create_table@@Base+0xf0>
   167dc:	ldr	r3, [pc, #112]	; 16854 <flatcc_builder_create_table@@Base+0x1e8>
   167e0:	movw	r2, #1243	; 0x4db
   167e4:	ldr	r1, [pc, #108]	; 16858 <flatcc_builder_create_table@@Base+0x1ec>
   167e8:	ldr	r0, [pc, #108]	; 1685c <flatcc_builder_create_table@@Base+0x1f0>
   167ec:	add	r3, pc, r3
   167f0:	add	r3, r3, #668	; 0x29c
   167f4:	add	r1, pc, r1
   167f8:	add	r0, pc, r0
   167fc:	bl	124b0 <__assert_fail@plt>
   16800:	ldr	r3, [pc, #88]	; 16860 <flatcc_builder_create_table@@Base+0x1f4>
   16804:	movw	r2, #1237	; 0x4d5
   16808:	ldr	r1, [pc, #84]	; 16864 <flatcc_builder_create_table@@Base+0x1f8>
   1680c:	ldr	r0, [pc, #84]	; 16868 <flatcc_builder_create_table@@Base+0x1fc>
   16810:	add	r3, pc, r3
   16814:	add	r3, r3, #668	; 0x29c
   16818:	add	r1, pc, r1
   1681c:	add	r0, pc, r0
   16820:	bl	124b0 <__assert_fail@plt>
   16824:	bl	14240 <flatcc_builder_default_alloc@@Base+0x2c4>
   16828:	ldr	r3, [pc, #60]	; 1686c <flatcc_builder_create_table@@Base+0x200>
   1682c:	movw	r2, #647	; 0x287
   16830:	ldr	r1, [pc, #56]	; 16870 <flatcc_builder_create_table@@Base+0x204>
   16834:	ldr	r0, [pc, #56]	; 16874 <flatcc_builder_create_table@@Base+0x208>
   16838:	add	r3, pc, r3
   1683c:	add	r3, r3, #44	; 0x2c
   16840:	add	r1, pc, r1
   16844:	add	r0, pc, r0
   16848:	bl	124b0 <__assert_fail@plt>
   1684c:	andeq	r9, r1, r4, ror #18
   16850:	andeq	r0, r0, r0, asr r0
   16854:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   16858:	ldrdeq	r7, [r0], -r8
   1685c:	andeq	r7, r0, r4, lsr #19
   16860:	andeq	r6, r0, ip, ror #30
   16864:			; <UNDEFINED> instruction: 0x000076b4
   16868:	andeq	r7, r0, ip, ror #18
   1686c:	andeq	r6, r0, r4, asr #30
   16870:	andeq	r7, r0, ip, lsl #13
   16874:	andeq	r7, r0, r0, lsl r7

00016878 <flatcc_builder_check_required_field@@Base>:
   16878:	ldr	r3, [r0, #32]
   1687c:	ldrh	r3, [r3, #14]
   16880:	cmp	r3, #3
   16884:	bne	168b4 <flatcc_builder_check_required_field@@Base+0x3c>
   16888:	ldrh	r3, [r0, #8]
   1688c:	cmp	r3, r1
   16890:	bls	168ac <flatcc_builder_check_required_field@@Base+0x34>
   16894:	ldr	r3, [r0, #4]
   16898:	lsl	r1, r1, #1
   1689c:	ldrh	r0, [r3, r1]
   168a0:	adds	r0, r0, #0
   168a4:	movne	r0, #1
   168a8:	bx	lr
   168ac:	mov	r0, #0
   168b0:	bx	lr
   168b4:	ldr	r3, [pc, #36]	; 168e0 <flatcc_builder_check_required_field@@Base+0x68>
   168b8:	movw	r2, #1272	; 0x4f8
   168bc:	str	r4, [sp, #-8]!
   168c0:	ldr	r1, [pc, #28]	; 168e4 <flatcc_builder_check_required_field@@Base+0x6c>
   168c4:	str	lr, [sp, #4]
   168c8:	ldr	r0, [pc, #24]	; 168e8 <flatcc_builder_check_required_field@@Base+0x70>
   168cc:	add	r3, pc, r3
   168d0:	add	r3, r3, #696	; 0x2b8
   168d4:	add	r1, pc, r1
   168d8:	add	r0, pc, r0
   168dc:	bl	124b0 <__assert_fail@plt>
   168e0:			; <UNDEFINED> instruction: 0x00006eb0
   168e4:	strdeq	r7, [r0], -r8
   168e8:	ldrdeq	r7, [r0], -r0

000168ec <flatcc_builder_check_union_field@@Base>:
   168ec:	ldr	r3, [r0, #32]
   168f0:	ldrh	r3, [r3, #14]
   168f4:	cmp	r3, #3
   168f8:	bne	1695c <flatcc_builder_check_union_field@@Base+0x70>
   168fc:	cmp	r1, #0
   16900:	beq	16948 <flatcc_builder_check_union_field@@Base+0x5c>
   16904:	ldrh	r3, [r0, #8]
   16908:	cmp	r3, r1
   1690c:	bls	16948 <flatcc_builder_check_union_field@@Base+0x5c>
   16910:	ldr	r3, [r0, #4]
   16914:	sub	r1, r1, #-2147483647	; 0x80000001
   16918:	lsl	r1, r1, #1
   1691c:	ldrh	r2, [r3, r1]!
   16920:	cmp	r2, #0
   16924:	ldrh	r1, [r3, #2]
   16928:	beq	1693c <flatcc_builder_check_union_field@@Base+0x50>
   1692c:	ldr	r3, [r0, #16]
   16930:	ldrb	r3, [r3, r2]
   16934:	cmp	r3, #0
   16938:	bne	16950 <flatcc_builder_check_union_field@@Base+0x64>
   1693c:	clz	r0, r1
   16940:	lsr	r0, r0, #5
   16944:	bx	lr
   16948:	mov	r0, #0
   1694c:	bx	lr
   16950:	adds	r0, r1, #0
   16954:	movne	r0, #1
   16958:	bx	lr
   1695c:	ldr	r3, [pc, #36]	; 16988 <flatcc_builder_check_union_field@@Base+0x9c>
   16960:	movw	r2, #1279	; 0x4ff
   16964:	str	r4, [sp, #-8]!
   16968:	ldr	r1, [pc, #28]	; 1698c <flatcc_builder_check_union_field@@Base+0xa0>
   1696c:	str	lr, [sp, #4]
   16970:	ldr	r0, [pc, #24]	; 16990 <flatcc_builder_check_union_field@@Base+0xa4>
   16974:	add	r3, pc, r3
   16978:	add	r3, r3, #732	; 0x2dc
   1697c:	add	r1, pc, r1
   16980:	add	r0, pc, r0
   16984:	bl	124b0 <__assert_fail@plt>
   16988:	andeq	r6, r0, r8, lsl #28
   1698c:	andeq	r7, r0, r0, asr r5
   16990:	andeq	r7, r0, r8, lsr #16

00016994 <flatcc_builder_check_required@@Base>:
   16994:	ldr	r3, [r0, #32]
   16998:	ldrh	r3, [r3, #14]
   1699c:	cmp	r3, #3
   169a0:	bne	16a08 <flatcc_builder_check_required@@Base+0x74>
   169a4:	ldrh	r3, [r0, #8]
   169a8:	cmp	r3, r2
   169ac:	blt	16a00 <flatcc_builder_check_required@@Base+0x6c>
   169b0:	cmp	r2, #0
   169b4:	ble	169f8 <flatcc_builder_check_required@@Base+0x64>
   169b8:	ldrh	r3, [r1]
   169bc:	ldr	ip, [r0, #4]
   169c0:	lsl	r3, r3, #1
   169c4:	ldrh	r0, [ip, r3]
   169c8:	cmp	r0, #0
   169cc:	bxeq	lr
   169d0:	add	r2, r1, r2, lsl #1
   169d4:	add	r1, r1, #2
   169d8:	b	169f0 <flatcc_builder_check_required@@Base+0x5c>
   169dc:	ldrh	r3, [r1], #2
   169e0:	lsl	r3, r3, #1
   169e4:	ldrh	r0, [ip, r3]
   169e8:	cmp	r0, #0
   169ec:	bxeq	lr
   169f0:	cmp	r1, r2
   169f4:	bne	169dc <flatcc_builder_check_required@@Base+0x48>
   169f8:	mov	r0, #1
   169fc:	bx	lr
   16a00:	mov	r0, #0
   16a04:	bx	lr
   16a08:	ldr	r3, [pc, #36]	; 16a34 <flatcc_builder_check_required@@Base+0xa0>
   16a0c:	movw	r2, #1297	; 0x511
   16a10:	str	r4, [sp, #-8]!
   16a14:	ldr	r1, [pc, #28]	; 16a38 <flatcc_builder_check_required@@Base+0xa4>
   16a18:	str	lr, [sp, #4]
   16a1c:	ldr	r0, [pc, #24]	; 16a3c <flatcc_builder_check_required@@Base+0xa8>
   16a20:	add	r3, pc, r3
   16a24:	add	r3, r3, #768	; 0x300
   16a28:	add	r1, pc, r1
   16a2c:	add	r0, pc, r0
   16a30:	bl	124b0 <__assert_fail@plt>
   16a34:	andeq	r6, r0, ip, asr sp
   16a38:	andeq	r7, r0, r4, lsr #9
   16a3c:	andeq	r7, r0, ip, ror r7

00016a40 <flatcc_builder_end_table@@Base>:
   16a40:	ldr	r3, [r0, #32]
   16a44:	strd	r4, [sp, #-20]!	; 0xffffffec
   16a48:	ldrh	r3, [r3, #14]
   16a4c:	strd	r6, [sp, #8]
   16a50:	str	lr, [sp, #16]
   16a54:	sub	sp, sp, #20
   16a58:	cmp	r3, #3
   16a5c:	bne	16be0 <flatcc_builder_end_table@@Base+0x1a0>
   16a60:	ldrh	r5, [r0, #8]
   16a64:	movw	ip, #31153	; 0x79b1
   16a68:	movt	ip, #40503	; 0x9e37
   16a6c:	mov	r4, r0
   16a70:	ldr	r1, [r0, #4]
   16a74:	ldr	r3, [r0, #12]
   16a78:	add	r5, r5, #2
   16a7c:	lsl	r5, r5, #1
   16a80:	ldr	lr, [r0, #20]
   16a84:	sub	r6, r1, #4
   16a88:	uxth	r5, r5
   16a8c:	eor	r3, r3, r5
   16a90:	mov	r2, r5
   16a94:	strh	r5, [r1, #-4]
   16a98:	mul	r3, ip, r3
   16a9c:	add	lr, lr, #4
   16aa0:	uxth	lr, lr
   16aa4:	eor	r3, r3, lr
   16aa8:	strh	lr, [r1, #-2]
   16aac:	mov	r1, r6
   16ab0:	mul	r3, ip, r3
   16ab4:	str	r3, [r0, #12]
   16ab8:	bl	1630c <flatcc_builder_create_cached_vtable@@Base>
   16abc:	subs	r7, r0, #0
   16ac0:	bne	16ae0 <flatcc_builder_end_table@@Base+0xa0>
   16ac4:	mov	r5, #0
   16ac8:	mov	r0, r5
   16acc:	add	sp, sp, #20
   16ad0:	ldrd	r4, [sp]
   16ad4:	ldrd	r6, [sp, #8]
   16ad8:	add	sp, sp, #16
   16adc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ae0:	mov	r2, r5
   16ae4:	mov	r1, #0
   16ae8:	mov	r0, r6
   16aec:	bl	12480 <memset@plt>
   16af0:	ldr	ip, [r4]
   16af4:	mov	r0, r4
   16af8:	ldr	r3, [r4, #32]
   16afc:	ldr	r2, [r4, #76]	; 0x4c
   16b00:	ldr	r1, [r3, #20]
   16b04:	str	r7, [sp, #8]
   16b08:	ldrh	r3, [r4, #130]	; 0x82
   16b0c:	add	r2, r2, r1
   16b10:	ldr	r1, [r4, #16]
   16b14:	sub	ip, ip, r2
   16b18:	asr	ip, ip, #1
   16b1c:	str	r2, [sp]
   16b20:	ldr	r2, [r4, #20]
   16b24:	str	ip, [sp, #4]
   16b28:	bl	1666c <flatcc_builder_create_table@@Base>
   16b2c:	subs	r5, r0, #0
   16b30:	beq	16ac4 <flatcc_builder_end_table@@Base+0x84>
   16b34:	ldr	r3, [r4, #32]
   16b38:	mov	r1, #0
   16b3c:	ldr	r0, [r4, #52]	; 0x34
   16b40:	ldr	r2, [r4, #76]	; 0x4c
   16b44:	ldr	ip, [r3, #16]
   16b48:	ldr	r6, [r3, #20]
   16b4c:	ldrh	lr, [r3, #28]
   16b50:	add	r0, r0, ip
   16b54:	ldr	ip, [r3, #24]
   16b58:	add	r3, r2, r6
   16b5c:	ldr	r2, [r4, #20]
   16b60:	str	r3, [r4]
   16b64:	str	r0, [r4, #4]
   16b68:	strh	lr, [r4, #8]
   16b6c:	str	ip, [r4, #12]
   16b70:	ldr	r0, [r4, #16]
   16b74:	bl	12480 <memset@plt>
   16b78:	ldr	r3, [r4, #32]
   16b7c:	ldr	r0, [r4, #60]	; 0x3c
   16b80:	ldr	r2, [r4, #64]	; 0x40
   16b84:	ldr	ip, [r3]
   16b88:	ldmib	r3, {r1, lr}
   16b8c:	add	r0, r0, ip
   16b90:	sub	r2, r2, ip
   16b94:	str	r0, [r4, #16]
   16b98:	cmp	r2, r1
   16b9c:	ldrh	r0, [r4, #128]	; 0x80
   16ba0:	movcs	r2, r1
   16ba4:	str	lr, [r4, #20]
   16ba8:	str	ip, [r4, #28]
   16bac:	ldrh	ip, [r4, #130]	; 0x82
   16bb0:	str	r2, [r4, #24]
   16bb4:	ldr	r2, [r4, #156]	; 0x9c
   16bb8:	str	r1, [r3, #4]
   16bbc:	cmp	r0, ip
   16bc0:	sub	r0, r3, #36	; 0x24
   16bc4:	strhcc	ip, [r4, #128]	; 0x80
   16bc8:	ldrh	r1, [r3, #12]
   16bcc:	sub	r3, r2, #1
   16bd0:	str	r0, [r4, #32]
   16bd4:	strh	r1, [r4, #130]	; 0x82
   16bd8:	str	r3, [r4, #156]	; 0x9c
   16bdc:	b	16ac8 <flatcc_builder_end_table@@Base+0x88>
   16be0:	ldr	r3, [pc, #28]	; 16c04 <flatcc_builder_end_table@@Base+0x1c4>
   16be4:	movw	r2, #1317	; 0x525
   16be8:	ldr	r1, [pc, #24]	; 16c08 <flatcc_builder_end_table@@Base+0x1c8>
   16bec:	ldr	r0, [pc, #24]	; 16c0c <flatcc_builder_end_table@@Base+0x1cc>
   16bf0:	add	r3, pc, r3
   16bf4:	add	r3, r3, #800	; 0x320
   16bf8:	add	r1, pc, r1
   16bfc:	add	r0, pc, r0
   16c00:	bl	124b0 <__assert_fail@plt>
   16c04:	andeq	r6, r0, ip, lsl #23
   16c08:	ldrdeq	r7, [r0], -r4
   16c0c:	andeq	r7, r0, ip, lsr #11

00016c10 <flatcc_builder_create_vector@@Base>:
   16c10:	strd	r4, [sp, #-16]!
   16c14:	mov	r4, r0
   16c18:	str	r6, [sp, #8]
   16c1c:	str	lr, [sp, #12]
   16c20:	sub	sp, sp, #88	; 0x58
   16c24:	ldr	ip, [sp, #108]	; 0x6c
   16c28:	ldr	r5, [pc, #328]	; 16d78 <flatcc_builder_create_vector@@Base+0x168>
   16c2c:	ldrh	r0, [sp, #104]	; 0x68
   16c30:	cmp	r2, ip
   16c34:	add	r5, pc, r5
   16c38:	bhi	16d2c <flatcc_builder_create_vector@@Base+0x11c>
   16c3c:	ldrh	ip, [r4, #128]	; 0x80
   16c40:	cmp	r0, #4
   16c44:	mul	r3, r3, r2
   16c48:	movcc	r0, #4
   16c4c:	str	r2, [sp, #12]
   16c50:	mov	r2, #1
   16c54:	ldr	r6, [r4, #136]	; 0x88
   16c58:	mov	lr, #4
   16c5c:	str	r2, [sp, #20]
   16c60:	cmp	ip, r0
   16c64:	add	ip, sp, #12
   16c68:	str	lr, [sp, #16]
   16c6c:	strhcc	r0, [r4, #128]	; 0x80
   16c70:	sub	r2, r6, r3
   16c74:	sub	r0, r0, #1
   16c78:	cmp	r3, #0
   16c7c:	and	r0, r0, r2
   16c80:	str	ip, [sp, #24]
   16c84:	moveq	r2, lr
   16c88:	str	lr, [sp, #28]
   16c8c:	beq	16ca8 <flatcc_builder_create_vector@@Base+0x98>
   16c90:	add	r2, r3, lr
   16c94:	str	r1, [sp, #32]
   16c98:	mov	r1, #2
   16c9c:	str	r2, [sp, #16]
   16ca0:	str	r1, [sp, #20]
   16ca4:	str	r3, [sp, #36]	; 0x24
   16ca8:	cmp	r0, #0
   16cac:	bne	16cfc <flatcc_builder_create_vector@@Base+0xec>
   16cb0:	sub	r5, r6, r2
   16cb4:	cmp	r6, r5
   16cb8:	ble	16d54 <flatcc_builder_create_vector@@Base+0x144>
   16cbc:	mov	r3, r5
   16cc0:	add	r1, sp, #24
   16cc4:	str	r2, [sp]
   16cc8:	ldr	r2, [sp, #20]
   16ccc:	ldr	r0, [r4, #36]	; 0x24
   16cd0:	ldr	r6, [r4, #44]	; 0x2c
   16cd4:	blx	r6
   16cd8:	cmp	r0, #0
   16cdc:	bne	16d50 <flatcc_builder_create_vector@@Base+0x140>
   16ce0:	mov	r0, r5
   16ce4:	str	r5, [r4, #136]	; 0x88
   16ce8:	add	sp, sp, #88	; 0x58
   16cec:	ldrd	r4, [sp]
   16cf0:	ldr	r6, [sp, #8]
   16cf4:	add	sp, sp, #12
   16cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   16cfc:	ldr	r1, [pc, #120]	; 16d7c <flatcc_builder_create_vector@@Base+0x16c>
   16d00:	add	r2, r2, r0
   16d04:	ldr	r3, [sp, #20]
   16d08:	str	r2, [sp, #16]
   16d0c:	ldr	ip, [r5, r1]
   16d10:	add	r1, sp, #88	; 0x58
   16d14:	add	r3, r3, #1
   16d18:	add	r1, r1, r3, lsl #3
   16d1c:	str	r3, [sp, #20]
   16d20:	str	ip, [r1, #-72]	; 0xffffffb8
   16d24:	str	r0, [r1, #-68]	; 0xffffffbc
   16d28:	b	16cb0 <flatcc_builder_create_vector@@Base+0xa0>
   16d2c:	ldr	r3, [pc, #76]	; 16d80 <flatcc_builder_create_vector@@Base+0x170>
   16d30:	movw	r2, #1365	; 0x555
   16d34:	ldr	r1, [pc, #72]	; 16d84 <flatcc_builder_create_vector@@Base+0x174>
   16d38:	ldr	r0, [pc, #72]	; 16d88 <flatcc_builder_create_vector@@Base+0x178>
   16d3c:	add	r3, pc, r3
   16d40:	add	r3, r3, #828	; 0x33c
   16d44:	add	r1, pc, r1
   16d48:	add	r0, pc, r0
   16d4c:	bl	124b0 <__assert_fail@plt>
   16d50:	bl	14240 <flatcc_builder_default_alloc@@Base+0x2c4>
   16d54:	ldr	r3, [pc, #48]	; 16d8c <flatcc_builder_create_vector@@Base+0x17c>
   16d58:	movw	r2, #647	; 0x287
   16d5c:	ldr	r1, [pc, #44]	; 16d90 <flatcc_builder_create_vector@@Base+0x180>
   16d60:	ldr	r0, [pc, #44]	; 16d94 <flatcc_builder_create_vector@@Base+0x184>
   16d64:	add	r3, pc, r3
   16d68:	add	r3, r3, #44	; 0x2c
   16d6c:	add	r1, pc, r1
   16d70:	add	r0, pc, r0
   16d74:	bl	124b0 <__assert_fail@plt>
   16d78:	andeq	r9, r1, r4, asr #7
   16d7c:	andeq	r0, r0, r0, asr r0
   16d80:	andeq	r6, r0, r0, asr #20
   16d84:	andeq	r7, r0, r8, lsl #3
   16d88:	andeq	r7, r0, ip, lsl #9
   16d8c:	andeq	r6, r0, r8, lsl sl
   16d90:	andeq	r7, r0, r0, ror #2
   16d94:	andeq	r7, r0, r4, ror #3

00016d98 <flatcc_builder_end_vector@@Base>:
   16d98:	ldr	r1, [r0, #32]
   16d9c:	strd	r4, [sp, #-12]!
   16da0:	ldrh	r3, [r1, #14]
   16da4:	str	lr, [sp, #8]
   16da8:	sub	sp, sp, #12
   16dac:	cmp	r3, #4
   16db0:	bne	16e68 <flatcc_builder_end_vector@@Base+0xd0>
   16db4:	ldrh	ip, [r0, #130]	; 0x82
   16db8:	mov	r4, r0
   16dbc:	ldr	r3, [r1, #16]
   16dc0:	ldr	r2, [r1, #20]
   16dc4:	ldr	r1, [r1, #24]
   16dc8:	str	r1, [sp, #4]
   16dcc:	ldr	r1, [r0, #16]
   16dd0:	str	ip, [sp]
   16dd4:	bl	16c10 <flatcc_builder_create_vector@@Base>
   16dd8:	subs	r5, r0, #0
   16ddc:	beq	16e54 <flatcc_builder_end_vector@@Base+0xbc>
   16de0:	mov	r1, #0
   16de4:	ldr	r0, [r4, #16]
   16de8:	ldr	r2, [r4, #20]
   16dec:	bl	12480 <memset@plt>
   16df0:	ldr	r3, [r4, #32]
   16df4:	ldr	r0, [r4, #60]	; 0x3c
   16df8:	ldr	r2, [r4, #64]	; 0x40
   16dfc:	ldr	ip, [r3]
   16e00:	ldmib	r3, {r1, lr}
   16e04:	add	r0, r0, ip
   16e08:	sub	r2, r2, ip
   16e0c:	str	r0, [r4, #16]
   16e10:	cmp	r2, r1
   16e14:	ldrh	r0, [r4, #128]	; 0x80
   16e18:	movcs	r2, r1
   16e1c:	str	lr, [r4, #20]
   16e20:	str	ip, [r4, #28]
   16e24:	ldrh	ip, [r4, #130]	; 0x82
   16e28:	str	r2, [r4, #24]
   16e2c:	ldr	r2, [r4, #156]	; 0x9c
   16e30:	str	r1, [r3, #4]
   16e34:	cmp	r0, ip
   16e38:	sub	r0, r3, #36	; 0x24
   16e3c:	strhcc	ip, [r4, #128]	; 0x80
   16e40:	ldrh	r1, [r3, #12]
   16e44:	sub	r3, r2, #1
   16e48:	str	r0, [r4, #32]
   16e4c:	strh	r1, [r4, #130]	; 0x82
   16e50:	str	r3, [r4, #156]	; 0x9c
   16e54:	mov	r0, r5
   16e58:	add	sp, sp, #12
   16e5c:	ldrd	r4, [sp]
   16e60:	add	sp, sp, #8
   16e64:	pop	{pc}		; (ldr pc, [sp], #4)
   16e68:	ldr	r3, [pc, #28]	; 16e8c <flatcc_builder_end_vector@@Base+0xf4>
   16e6c:	movw	r2, #1400	; 0x578
   16e70:	ldr	r1, [pc, #24]	; 16e90 <flatcc_builder_end_vector@@Base+0xf8>
   16e74:	ldr	r0, [pc, #24]	; 16e94 <flatcc_builder_end_vector@@Base+0xfc>
   16e78:	add	r3, pc, r3
   16e7c:	add	r3, r3, #860	; 0x35c
   16e80:	add	r1, pc, r1
   16e84:	add	r0, pc, r0
   16e88:	bl	124b0 <__assert_fail@plt>
   16e8c:	andeq	r6, r0, r4, lsl #18
   16e90:	andeq	r7, r0, ip, asr #32
   16e94:	muleq	r0, r8, r1

00016e98 <flatcc_builder_vector_count@@Base>:
   16e98:	ldr	r3, [r0, #32]
   16e9c:	ldr	r0, [r3, #20]
   16ea0:	bx	lr

00016ea4 <flatcc_builder_vector_edit@@Base>:
   16ea4:	ldr	r0, [r0, #16]
   16ea8:	bx	lr

00016eac <flatcc_builder_create_offset_vector_direct@@Base>:
   16eac:	cmn	r2, #-1073741823	; 0xc0000001
   16eb0:	bhi	16ebc <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   16eb4:	mov	r3, #0
   16eb8:	b	143d4 <flatcc_builder_default_alloc@@Base+0x458>
   16ebc:	mov	r0, #0
   16ec0:	bx	lr

00016ec4 <flatcc_builder_end_offset_vector@@Base>:
   16ec4:	ldr	r3, [r0, #32]
   16ec8:	strd	r4, [sp, #-16]!
   16ecc:	ldrh	r2, [r3, #14]
   16ed0:	str	r6, [sp, #8]
   16ed4:	str	lr, [sp, #12]
   16ed8:	cmp	r2, #5
   16edc:	bne	16f80 <flatcc_builder_end_offset_vector@@Base+0xbc>
   16ee0:	ldr	r1, [r0, #16]
   16ee4:	mov	r4, r0
   16ee8:	ldr	r2, [r3, #20]
   16eec:	bl	16eac <flatcc_builder_create_offset_vector_direct@@Base>
   16ef0:	subs	r5, r0, #0
   16ef4:	beq	16f6c <flatcc_builder_end_offset_vector@@Base+0xa8>
   16ef8:	mov	r1, #0
   16efc:	ldr	r0, [r4, #16]
   16f00:	ldr	r2, [r4, #20]
   16f04:	bl	12480 <memset@plt>
   16f08:	ldr	r3, [r4, #32]
   16f0c:	ldr	r0, [r4, #60]	; 0x3c
   16f10:	ldr	r2, [r4, #64]	; 0x40
   16f14:	ldr	ip, [r3]
   16f18:	ldmib	r3, {r1, lr}
   16f1c:	add	r0, r0, ip
   16f20:	sub	r2, r2, ip
   16f24:	str	r0, [r4, #16]
   16f28:	cmp	r2, r1
   16f2c:	ldrh	r0, [r4, #128]	; 0x80
   16f30:	movcs	r2, r1
   16f34:	str	lr, [r4, #20]
   16f38:	str	ip, [r4, #28]
   16f3c:	ldrh	ip, [r4, #130]	; 0x82
   16f40:	str	r2, [r4, #24]
   16f44:	ldr	r2, [r4, #156]	; 0x9c
   16f48:	str	r1, [r3, #4]
   16f4c:	cmp	r0, ip
   16f50:	sub	r0, r3, #36	; 0x24
   16f54:	strhcc	ip, [r4, #128]	; 0x80
   16f58:	ldrh	r1, [r3, #12]
   16f5c:	sub	r3, r2, #1
   16f60:	str	r0, [r4, #32]
   16f64:	strh	r1, [r4, #130]	; 0x82
   16f68:	str	r3, [r4, #156]	; 0x9c
   16f6c:	mov	r0, r5
   16f70:	ldrd	r4, [sp]
   16f74:	ldr	r6, [sp, #8]
   16f78:	add	sp, sp, #12
   16f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f80:	ldr	r3, [pc, #28]	; 16fa4 <flatcc_builder_end_offset_vector@@Base+0xe0>
   16f84:	movw	r2, #1480	; 0x5c8
   16f88:	ldr	r1, [pc, #24]	; 16fa8 <flatcc_builder_end_offset_vector@@Base+0xe4>
   16f8c:	ldr	r0, [pc, #24]	; 16fac <flatcc_builder_end_offset_vector@@Base+0xe8>
   16f90:	add	r3, pc, r3
   16f94:	add	r3, r3, #888	; 0x378
   16f98:	add	r1, pc, r1
   16f9c:	add	r0, pc, r0
   16fa0:	bl	124b0 <__assert_fail@plt>
   16fa4:	andeq	r6, r0, ip, ror #15
   16fa8:	andeq	r6, r0, r4, lsr pc
   16fac:	andeq	r7, r0, ip, ror #1

00016fb0 <flatcc_builder_create_offset_vector@@Base>:
   16fb0:	strd	r4, [sp, #-16]!
   16fb4:	mov	r5, r2
   16fb8:	mov	r4, r0
   16fbc:	str	r6, [sp, #8]
   16fc0:	mov	r6, r1
   16fc4:	str	lr, [sp, #12]
   16fc8:	bl	15e3c <flatcc_builder_start_offset_vector@@Base>
   16fcc:	cmp	r0, #0
   16fd0:	beq	16fe8 <flatcc_builder_create_offset_vector@@Base+0x38>
   16fd4:	ldrd	r4, [sp]
   16fd8:	mov	r0, #0
   16fdc:	ldr	r6, [sp, #8]
   16fe0:	add	sp, sp, #12
   16fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   16fe8:	mov	r1, r5
   16fec:	mov	r0, r4
   16ff0:	bl	15700 <flatcc_builder_extend_offset_vector@@Base>
   16ff4:	cmp	r0, #0
   16ff8:	beq	16fd4 <flatcc_builder_create_offset_vector@@Base+0x24>
   16ffc:	lsl	r2, r5, #2
   17000:	mov	r1, r6
   17004:	bl	12408 <memcpy@plt>
   17008:	mov	r0, r4
   1700c:	ldrd	r4, [sp]
   17010:	ldr	r6, [sp, #8]
   17014:	ldr	lr, [sp, #12]
   17018:	add	sp, sp, #16
   1701c:	b	16ec4 <flatcc_builder_end_offset_vector@@Base>

00017020 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17020:	ldr	r2, [r0, #32]
   17024:	strd	r4, [sp, #-16]!
   17028:	ldrh	ip, [r2, #14]
   1702c:	str	r6, [sp, #8]
   17030:	str	lr, [sp, #12]
   17034:	cmp	ip, #5
   17038:	bne	170f0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   1703c:	ldr	r2, [r2, #20]
   17040:	cmn	r2, #-1073741823	; 0xc0000001
   17044:	bhi	17060 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   17048:	mov	r3, r1
   1704c:	ldr	r1, [r0, #16]
   17050:	mov	r4, r0
   17054:	bl	143d4 <flatcc_builder_default_alloc@@Base+0x458>
   17058:	subs	r5, r0, #0
   1705c:	bne	17078 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   17060:	mov	r5, #0
   17064:	mov	r0, r5
   17068:	ldrd	r4, [sp]
   1706c:	ldr	r6, [sp, #8]
   17070:	add	sp, sp, #12
   17074:	pop	{pc}		; (ldr pc, [sp], #4)
   17078:	mov	r1, #0
   1707c:	ldr	r0, [r4, #16]
   17080:	ldr	r2, [r4, #20]
   17084:	bl	12480 <memset@plt>
   17088:	ldr	r3, [r4, #32]
   1708c:	ldr	r0, [r4, #60]	; 0x3c
   17090:	ldr	r2, [r4, #64]	; 0x40
   17094:	ldr	ip, [r3]
   17098:	ldmib	r3, {r1, lr}
   1709c:	add	r0, r0, ip
   170a0:	sub	r2, r2, ip
   170a4:	str	r0, [r4, #16]
   170a8:	cmp	r2, r1
   170ac:	ldrh	r0, [r4, #128]	; 0x80
   170b0:	movcs	r2, r1
   170b4:	str	lr, [r4, #20]
   170b8:	str	ip, [r4, #28]
   170bc:	ldrh	ip, [r4, #130]	; 0x82
   170c0:	str	r2, [r4, #24]
   170c4:	ldr	r2, [r4, #156]	; 0x9c
   170c8:	str	r1, [r3, #4]
   170cc:	cmp	r0, ip
   170d0:	sub	r0, r3, #36	; 0x24
   170d4:	strhcc	ip, [r4, #128]	; 0x80
   170d8:	ldrh	r1, [r3, #12]
   170dc:	sub	r3, r2, #1
   170e0:	str	r0, [r4, #32]
   170e4:	strh	r1, [r4, #130]	; 0x82
   170e8:	str	r3, [r4, #156]	; 0x9c
   170ec:	b	17064 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   170f0:	ldr	r3, [pc, #28]	; 17114 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   170f4:	movw	r2, #1493	; 0x5d5
   170f8:	ldr	r1, [pc, #24]	; 17118 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf8>
   170fc:	ldr	r0, [pc, #24]	; 1711c <flatcc_builder_end_offset_vector_for_unions@@Base+0xfc>
   17100:	add	r3, pc, r3
   17104:	add	r3, r3, #924	; 0x39c
   17108:	add	r1, pc, r1
   1710c:	add	r0, pc, r0
   17110:	bl	124b0 <__assert_fail@plt>
   17114:	andeq	r6, r0, ip, ror r6
   17118:	andeq	r6, r0, r4, asr #27
   1711c:	andeq	r6, r0, ip, ror pc

00017120 <flatcc_builder_offset_vector_edit@@Base>:
   17120:	ldr	r0, [r0, #16]
   17124:	bx	lr

00017128 <flatcc_builder_offset_vector_count@@Base>:
   17128:	ldr	r3, [r0, #32]
   1712c:	ldr	r0, [r3, #20]
   17130:	bx	lr

00017134 <flatcc_builder_create_union_vector_direct@@Base>:
   17134:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17138:	mov	r4, r0
   1713c:	strd	r6, [sp, #8]
   17140:	str	r8, [sp, #16]
   17144:	str	lr, [sp, #20]
   17148:	sub	sp, sp, #8
   1714c:	ldr	r5, [sp, #32]
   17150:	cmn	r5, #-1073741823	; 0xc0000001
   17154:	bhi	171b8 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   17158:	mov	r6, r1
   1715c:	mov	r7, r2
   17160:	mov	r1, r3
   17164:	mov	r0, r6
   17168:	mov	r3, r2
   1716c:	mov	r2, r5
   17170:	bl	143d4 <flatcc_builder_default_alloc@@Base+0x458>
   17174:	subs	r8, r0, #0
   17178:	beq	171b8 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   1717c:	mvn	ip, #0
   17180:	mov	r3, #1
   17184:	mov	r2, r5
   17188:	mov	r1, r7
   1718c:	mov	r0, r6
   17190:	stm	sp, {r3, ip}
   17194:	bl	16c10 <flatcc_builder_create_vector@@Base>
   17198:	stm	r4, {r0, r8}
   1719c:	mov	r0, r4
   171a0:	add	sp, sp, #8
   171a4:	ldrd	r4, [sp]
   171a8:	ldrd	r6, [sp, #8]
   171ac:	ldr	r8, [sp, #16]
   171b0:	add	sp, sp, #20
   171b4:	pop	{pc}		; (ldr pc, [sp], #4)
   171b8:	mov	r3, #0
   171bc:	str	r3, [r4]
   171c0:	str	r3, [r4, #4]
   171c4:	b	1719c <flatcc_builder_create_union_vector_direct@@Base+0x68>

000171c8 <flatcc_builder_create_union_vector@@Base>:
   171c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   171cc:	mov	r5, r1
   171d0:	mov	r4, r2
   171d4:	strd	r6, [sp, #8]
   171d8:	mov	r6, r0
   171dc:	mov	r0, r1
   171e0:	str	r8, [sp, #16]
   171e4:	mov	r7, r3
   171e8:	str	lr, [sp, #20]
   171ec:	sub	sp, sp, #16
   171f0:	bl	15e3c <flatcc_builder_start_offset_vector@@Base>
   171f4:	cmp	r0, #0
   171f8:	beq	17224 <flatcc_builder_create_union_vector@@Base+0x5c>
   171fc:	mov	r3, #0
   17200:	str	r3, [r6]
   17204:	str	r3, [r6, #4]
   17208:	mov	r0, r6
   1720c:	add	sp, sp, #16
   17210:	ldrd	r4, [sp]
   17214:	ldrd	r6, [sp, #8]
   17218:	ldr	r8, [sp, #16]
   1721c:	add	sp, sp, #20
   17220:	pop	{pc}		; (ldr pc, [sp], #4)
   17224:	mov	r1, r7
   17228:	mov	r0, r5
   1722c:	bl	15700 <flatcc_builder_extend_offset_vector@@Base>
   17230:	cmp	r0, #0
   17234:	beq	171fc <flatcc_builder_create_union_vector@@Base+0x34>
   17238:	ldr	r8, [r5, #20]
   1723c:	ldr	r3, [r5, #24]
   17240:	add	r1, r7, r8
   17244:	cmp	r1, r3
   17248:	str	r1, [r5, #20]
   1724c:	bcs	17338 <flatcc_builder_create_union_vector@@Base+0x170>
   17250:	ldr	r2, [r5, #16]
   17254:	adds	r8, r2, r8
   17258:	beq	171fc <flatcc_builder_create_union_vector@@Base+0x34>
   1725c:	mov	r0, r5
   17260:	bl	17120 <flatcc_builder_offset_vector_edit@@Base>
   17264:	cmp	r7, #0
   17268:	mov	r3, r0
   1726c:	beq	1729c <flatcc_builder_create_union_vector@@Base+0xd4>
   17270:	add	r2, r4, r7, lsl #3
   17274:	mov	r1, r4
   17278:	sub	lr, r8, #1
   1727c:	sub	ip, r0, #4
   17280:	ldrb	r4, [r1]
   17284:	add	r1, r1, #8
   17288:	strb	r4, [lr, #1]!
   1728c:	ldr	r4, [r1, #-4]
   17290:	cmp	r1, r2
   17294:	str	r4, [ip, #4]!
   17298:	bne	17280 <flatcc_builder_create_union_vector@@Base+0xb8>
   1729c:	mov	r2, r8
   172a0:	mov	r1, r5
   172a4:	str	r7, [sp]
   172a8:	add	r0, sp, #8
   172ac:	bl	17134 <flatcc_builder_create_union_vector_direct@@Base>
   172b0:	mov	r1, #0
   172b4:	ldr	r0, [r5, #16]
   172b8:	ldr	r2, [r5, #20]
   172bc:	ldr	r7, [sp, #8]
   172c0:	ldr	r4, [sp, #12]
   172c4:	bl	12480 <memset@plt>
   172c8:	ldr	r3, [r5, #32]
   172cc:	str	r7, [r6]
   172d0:	ldr	r0, [r5, #60]	; 0x3c
   172d4:	str	r4, [r6, #4]
   172d8:	ldr	r2, [r5, #64]	; 0x40
   172dc:	ldr	ip, [r3]
   172e0:	ldmib	r3, {r1, lr}
   172e4:	add	r0, r0, ip
   172e8:	sub	r2, r2, ip
   172ec:	str	r0, [r5, #16]
   172f0:	cmp	r2, r1
   172f4:	ldrh	r0, [r5, #128]	; 0x80
   172f8:	movcs	r2, r1
   172fc:	str	lr, [r5, #20]
   17300:	str	ip, [r5, #28]
   17304:	ldrh	ip, [r5, #130]	; 0x82
   17308:	str	r2, [r5, #24]
   1730c:	ldr	r2, [r5, #156]	; 0x9c
   17310:	str	r1, [r3, #4]
   17314:	cmp	r0, ip
   17318:	sub	r0, r3, #36	; 0x24
   1731c:	strhcc	ip, [r5, #128]	; 0x80
   17320:	ldrh	r1, [r3, #12]
   17324:	sub	r3, r2, #1
   17328:	str	r0, [r5, #32]
   1732c:	strh	r1, [r5, #130]	; 0x82
   17330:	str	r3, [r5, #156]	; 0x9c
   17334:	b	17208 <flatcc_builder_create_union_vector@@Base+0x40>
   17338:	add	r1, r1, #1
   1733c:	mvn	r2, #3
   17340:	mov	r0, r5
   17344:	bl	13ef4 <test@@Base+0x18dc>
   17348:	cmp	r0, #0
   1734c:	beq	17250 <flatcc_builder_create_union_vector@@Base+0x88>
   17350:	b	171fc <flatcc_builder_create_union_vector@@Base+0x34>

00017354 <flatcc_builder_start_union_vector@@Base>:
   17354:	mov	r1, #4
   17358:	strd	r4, [sp, #-16]!
   1735c:	mov	r4, r0
   17360:	str	r6, [sp, #8]
   17364:	str	lr, [sp, #12]
   17368:	bl	142b0 <flatcc_builder_default_alloc@@Base+0x334>
   1736c:	cmp	r0, #0
   17370:	bne	173c8 <flatcc_builder_start_union_vector@@Base+0x74>
   17374:	ldr	ip, [r4, #28]
   17378:	mov	lr, #8
   1737c:	mov	r5, #7
   17380:	ldr	r3, [r4, #32]
   17384:	ldr	r2, [r4, #64]	; 0x40
   17388:	ldr	r1, [r4, #60]	; 0x3c
   1738c:	strh	r5, [r3, #14]
   17390:	str	lr, [r3, #16]
   17394:	sub	r2, r2, ip
   17398:	str	r0, [r3, #20]
   1739c:	cmn	r2, #4
   173a0:	mvnhi	r2, #3
   173a4:	add	r1, r1, ip
   173a8:	str	r1, [r4, #16]
   173ac:	str	r2, [r4, #24]
   173b0:	mvn	r2, #3
   173b4:	str	r2, [r3, #4]
   173b8:	ldrd	r4, [sp]
   173bc:	ldr	r6, [sp, #8]
   173c0:	add	sp, sp, #12
   173c4:	pop	{pc}		; (ldr pc, [sp], #4)
   173c8:	mvn	r0, #0
   173cc:	b	173b8 <flatcc_builder_start_union_vector@@Base+0x64>

000173d0 <flatcc_builder_union_vector_edit@@Base>:
   173d0:	ldr	r0, [r0, #16]
   173d4:	bx	lr

000173d8 <flatcc_builder_union_vector_count@@Base>:
   173d8:	ldr	r3, [r0, #32]
   173dc:	ldr	r0, [r3, #20]
   173e0:	bx	lr

000173e4 <flatcc_builder_end_union_vector@@Base>:
   173e4:	ldr	r3, [r1, #32]
   173e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   173ec:	ldrh	r3, [r3, #14]
   173f0:	strd	r6, [sp, #8]
   173f4:	str	r8, [sp, #16]
   173f8:	str	lr, [sp, #20]
   173fc:	sub	sp, sp, #16
   17400:	cmp	r3, #7
   17404:	bne	17564 <flatcc_builder_end_union_vector@@Base+0x180>
   17408:	mov	r4, r1
   1740c:	mov	r6, r0
   17410:	mov	r0, r1
   17414:	bl	173d8 <flatcc_builder_union_vector_count@@Base>
   17418:	ldr	r8, [r4, #20]
   1741c:	lsl	r7, r0, #2
   17420:	mov	r5, r0
   17424:	ldr	r3, [r4, #24]
   17428:	add	r1, r7, r0
   1742c:	add	r1, r1, r8
   17430:	cmp	r1, r3
   17434:	str	r1, [r4, #20]
   17438:	bcs	1753c <flatcc_builder_end_union_vector@@Base+0x158>
   1743c:	ldr	r3, [r4, #16]
   17440:	adds	r8, r3, r8
   17444:	beq	17554 <flatcc_builder_end_union_vector@@Base+0x170>
   17448:	mov	r0, r4
   1744c:	add	r7, r8, r7
   17450:	bl	173d0 <flatcc_builder_union_vector_edit@@Base>
   17454:	cmp	r5, #0
   17458:	beq	17484 <flatcc_builder_end_union_vector@@Base+0xa0>
   1745c:	add	r3, r0, r5, lsl #3
   17460:	sub	ip, r7, #1
   17464:	sub	r1, r8, #4
   17468:	ldrb	lr, [r0]
   1746c:	add	r0, r0, #8
   17470:	strb	lr, [ip, #1]!
   17474:	ldr	lr, [r0, #-4]
   17478:	cmp	r0, r3
   1747c:	str	lr, [r1, #4]!
   17480:	bne	17468 <flatcc_builder_end_union_vector@@Base+0x84>
   17484:	mov	r3, r8
   17488:	mov	r2, r7
   1748c:	str	r5, [sp]
   17490:	mov	r1, r4
   17494:	add	r0, sp, #8
   17498:	bl	17134 <flatcc_builder_create_union_vector_direct@@Base>
   1749c:	mov	r1, #0
   174a0:	ldr	r0, [r4, #16]
   174a4:	ldr	r2, [r4, #20]
   174a8:	ldr	r7, [sp, #8]
   174ac:	ldr	r5, [sp, #12]
   174b0:	bl	12480 <memset@plt>
   174b4:	ldr	r3, [r4, #32]
   174b8:	str	r7, [r6]
   174bc:	ldr	r0, [r4, #60]	; 0x3c
   174c0:	str	r5, [r6, #4]
   174c4:	ldr	r2, [r4, #64]	; 0x40
   174c8:	ldr	ip, [r3]
   174cc:	ldmib	r3, {r1, lr}
   174d0:	add	r0, r0, ip
   174d4:	sub	r2, r2, ip
   174d8:	str	r0, [r4, #16]
   174dc:	cmp	r2, r1
   174e0:	ldrh	r0, [r4, #128]	; 0x80
   174e4:	movcs	r2, r1
   174e8:	str	lr, [r4, #20]
   174ec:	str	ip, [r4, #28]
   174f0:	ldrh	ip, [r4, #130]	; 0x82
   174f4:	str	r2, [r4, #24]
   174f8:	ldr	r2, [r4, #156]	; 0x9c
   174fc:	str	r1, [r3, #4]
   17500:	cmp	r0, ip
   17504:	sub	r0, r3, #36	; 0x24
   17508:	strhcc	ip, [r4, #128]	; 0x80
   1750c:	ldrh	r1, [r3, #12]
   17510:	sub	r3, r2, #1
   17514:	str	r0, [r4, #32]
   17518:	strh	r1, [r4, #130]	; 0x82
   1751c:	str	r3, [r4, #156]	; 0x9c
   17520:	mov	r0, r6
   17524:	add	sp, sp, #16
   17528:	ldrd	r4, [sp]
   1752c:	ldrd	r6, [sp, #8]
   17530:	ldr	r8, [sp, #16]
   17534:	add	sp, sp, #20
   17538:	pop	{pc}		; (ldr pc, [sp], #4)
   1753c:	add	r1, r1, #1
   17540:	mvn	r2, #3
   17544:	mov	r0, r4
   17548:	bl	13ef4 <test@@Base+0x18dc>
   1754c:	cmp	r0, #0
   17550:	beq	1743c <flatcc_builder_end_union_vector@@Base+0x58>
   17554:	mov	r3, #0
   17558:	str	r3, [r6]
   1755c:	str	r3, [r6, #4]
   17560:	b	17520 <flatcc_builder_end_union_vector@@Base+0x13c>
   17564:	ldr	r3, [pc, #28]	; 17588 <flatcc_builder_end_union_vector@@Base+0x1a4>
   17568:	movw	r2, #1617	; 0x651
   1756c:	ldr	r1, [pc, #24]	; 1758c <flatcc_builder_end_union_vector@@Base+0x1a8>
   17570:	ldr	r0, [pc, #24]	; 17590 <flatcc_builder_end_union_vector@@Base+0x1ac>
   17574:	add	r3, pc, r3
   17578:	add	r3, r3, #968	; 0x3c8
   1757c:	add	r1, pc, r1
   17580:	add	r0, pc, r0
   17584:	bl	124b0 <__assert_fail@plt>
   17588:	andeq	r6, r0, r8, lsl #4
   1758c:	andeq	r6, r0, r0, asr r9
   17590:	andeq	r6, r0, r8, ror #24

00017594 <flatcc_builder_extend_union_vector@@Base>:
   17594:	ldr	ip, [r0, #32]
   17598:	strd	r4, [sp, #-16]!
   1759c:	ldr	r3, [ip, #20]
   175a0:	str	r6, [sp, #8]
   175a4:	str	lr, [sp, #12]
   175a8:	adds	r2, r1, r3
   175ac:	movcs	r3, #1
   175b0:	movcc	r3, #0
   175b4:	cmn	r2, #-536870911	; 0xe0000001
   175b8:	movls	r4, #0
   175bc:	movhi	r4, #1
   175c0:	orrs	r4, r3, r4
   175c4:	bne	1761c <flatcc_builder_extend_union_vector@@Base+0x88>
   175c8:	ldr	r6, [r0, #20]
   175cc:	mov	r5, r0
   175d0:	ldr	r3, [r0, #24]
   175d4:	str	r2, [ip, #20]
   175d8:	add	r1, r6, r1, lsl #3
   175dc:	cmp	r1, r3
   175e0:	str	r1, [r0, #20]
   175e4:	bcs	17600 <flatcc_builder_extend_union_vector@@Base+0x6c>
   175e8:	ldr	r0, [r5, #16]
   175ec:	add	r0, r0, r6
   175f0:	ldrd	r4, [sp]
   175f4:	ldr	r6, [sp, #8]
   175f8:	add	sp, sp, #12
   175fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17600:	add	r1, r1, #1
   17604:	mvn	r2, #3
   17608:	bl	13ef4 <test@@Base+0x18dc>
   1760c:	cmp	r0, #0
   17610:	beq	175e8 <flatcc_builder_extend_union_vector@@Base+0x54>
   17614:	mov	r0, r4
   17618:	b	175f0 <flatcc_builder_extend_union_vector@@Base+0x5c>
   1761c:	bl	14278 <flatcc_builder_default_alloc@@Base+0x2fc>

00017620 <flatcc_builder_truncate_union_vector@@Base>:
   17620:	mov	r3, r0
   17624:	ldr	r0, [r0, #32]
   17628:	str	r4, [sp, #-8]!
   1762c:	ldrh	r2, [r0, #14]
   17630:	str	lr, [sp, #4]
   17634:	cmp	r2, #7
   17638:	bne	17688 <flatcc_builder_truncate_union_vector@@Base+0x68>
   1763c:	mov	lr, r1
   17640:	ldr	r1, [r0, #20]
   17644:	cmp	r1, lr
   17648:	bcc	176ac <flatcc_builder_truncate_union_vector@@Base+0x8c>
   1764c:	ldr	r2, [r0, #16]
   17650:	sub	ip, r1, lr
   17654:	mov	r1, #0
   17658:	str	ip, [r0, #20]
   1765c:	ldr	r0, [r3, #16]
   17660:	ldr	ip, [r3, #20]
   17664:	mul	r2, r2, lr
   17668:	sub	ip, ip, r2
   1766c:	add	r0, r0, ip
   17670:	str	ip, [r3, #20]
   17674:	bl	12480 <memset@plt>
   17678:	ldr	r4, [sp]
   1767c:	add	sp, sp, #4
   17680:	mov	r0, #0
   17684:	pop	{pc}		; (ldr pc, [sp], #4)
   17688:	ldr	r3, [pc, #64]	; 176d0 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   1768c:	movw	r2, #1665	; 0x681
   17690:	ldr	r1, [pc, #60]	; 176d4 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   17694:	ldr	r0, [pc, #60]	; 176d8 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   17698:	add	r3, pc, r3
   1769c:	add	r3, r3, #1000	; 0x3e8
   176a0:	add	r1, pc, r1
   176a4:	add	r0, pc, r0
   176a8:	bl	124b0 <__assert_fail@plt>
   176ac:	ldr	r3, [pc, #40]	; 176dc <flatcc_builder_truncate_union_vector@@Base+0xbc>
   176b0:	movw	r2, #1666	; 0x682
   176b4:	ldr	r1, [pc, #36]	; 176e0 <flatcc_builder_truncate_union_vector@@Base+0xc0>
   176b8:	ldr	r0, [pc, #36]	; 176e4 <flatcc_builder_truncate_union_vector@@Base+0xc4>
   176bc:	add	r3, pc, r3
   176c0:	add	r3, r3, #1000	; 0x3e8
   176c4:	add	r1, pc, r1
   176c8:	add	r0, pc, r0
   176cc:	bl	124b0 <__assert_fail@plt>
   176d0:	andeq	r6, r0, r4, ror #1
   176d4:	andeq	r6, r0, ip, lsr #16
   176d8:	andeq	r6, r0, r4, asr #22
   176dc:	andeq	r6, r0, r0, asr #1
   176e0:	andeq	r6, r0, r8, lsl #16
   176e4:	andeq	r6, r0, r4, asr #20

000176e8 <flatcc_builder_union_vector_push@@Base>:
   176e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   176ec:	strd	r6, [sp, #8]
   176f0:	str	lr, [sp, #16]
   176f4:	sub	sp, sp, #12
   176f8:	add	r3, sp, #8
   176fc:	stmdb	r3, {r1, r2}
   17700:	ldr	r2, [r0, #32]
   17704:	ldrh	r3, [r2, #14]
   17708:	cmp	r3, #7
   1770c:	bne	17784 <flatcc_builder_union_vector_push@@Base+0x9c>
   17710:	ldr	r3, [r2, #20]
   17714:	cmn	r3, #-536870911	; 0xe0000001
   17718:	beq	1777c <flatcc_builder_union_vector_push@@Base+0x94>
   1771c:	ldr	r5, [r0, #20]
   17720:	add	r3, r3, #1
   17724:	mov	r4, r0
   17728:	ldr	r1, [r0, #24]
   1772c:	str	r3, [r2, #20]
   17730:	add	r3, r5, #8
   17734:	cmp	r3, r1
   17738:	str	r3, [r0, #20]
   1773c:	bcs	17768 <flatcc_builder_union_vector_push@@Base+0x80>
   17740:	ldr	r3, [r4, #16]
   17744:	adds	r0, r3, r5
   17748:	beq	17754 <flatcc_builder_union_vector_push@@Base+0x6c>
   1774c:	ldrd	r6, [sp]
   17750:	strd	r6, [r3, r5]
   17754:	add	sp, sp, #12
   17758:	ldrd	r4, [sp]
   1775c:	ldrd	r6, [sp, #8]
   17760:	add	sp, sp, #16
   17764:	pop	{pc}		; (ldr pc, [sp], #4)
   17768:	mvn	r2, #3
   1776c:	add	r1, r5, #9
   17770:	bl	13ef4 <test@@Base+0x18dc>
   17774:	cmp	r0, #0
   17778:	beq	17740 <flatcc_builder_union_vector_push@@Base+0x58>
   1777c:	mov	r0, #0
   17780:	b	17754 <flatcc_builder_union_vector_push@@Base+0x6c>
   17784:	ldr	r3, [pc, #28]	; 177a8 <flatcc_builder_union_vector_push@@Base+0xc0>
   17788:	movw	r2, #1677	; 0x68d
   1778c:	ldr	r1, [pc, #24]	; 177ac <flatcc_builder_union_vector_push@@Base+0xc4>
   17790:	ldr	r0, [pc, #24]	; 177b0 <flatcc_builder_union_vector_push@@Base+0xc8>
   17794:	add	r3, pc, r3
   17798:	add	r3, r3, #1040	; 0x410
   1779c:	add	r1, pc, r1
   177a0:	add	r0, pc, r0
   177a4:	bl	124b0 <__assert_fail@plt>
   177a8:	andeq	r5, r0, r8, ror #31
   177ac:	andeq	r6, r0, r0, lsr r7
   177b0:	andeq	r6, r0, r8, asr #20

000177b4 <flatcc_builder_append_union_vector@@Base>:
   177b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   177b8:	mov	r4, r1
   177bc:	ldr	r1, [r0, #32]
   177c0:	ldrh	r3, [r1, #14]
   177c4:	strd	r6, [sp, #8]
   177c8:	str	r8, [sp, #16]
   177cc:	str	lr, [sp, #20]
   177d0:	cmp	r3, #7
   177d4:	bne	17874 <flatcc_builder_append_union_vector@@Base+0xc0>
   177d8:	ldr	r3, [r1, #20]
   177dc:	adds	r3, r2, r3
   177e0:	movcs	lr, #1
   177e4:	movcc	lr, #0
   177e8:	cmn	r3, #-536870911	; 0xe0000001
   177ec:	movls	ip, #0
   177f0:	movhi	ip, #1
   177f4:	orrs	r8, lr, ip
   177f8:	bne	1789c <flatcc_builder_append_union_vector@@Base+0xe8>
   177fc:	ldr	r7, [r0, #20]
   17800:	lsl	r6, r2, #3
   17804:	mov	r5, r0
   17808:	str	r3, [r1, #20]
   1780c:	ldr	r3, [r0, #24]
   17810:	add	r1, r6, r7
   17814:	cmp	r1, r3
   17818:	str	r1, [r0, #20]
   1781c:	bcs	17858 <flatcc_builder_append_union_vector@@Base+0xa4>
   17820:	ldr	r3, [r5, #16]
   17824:	adds	r3, r3, r7
   17828:	beq	17840 <flatcc_builder_append_union_vector@@Base+0x8c>
   1782c:	mov	r0, r3
   17830:	mov	r2, r6
   17834:	mov	r1, r4
   17838:	bl	12408 <memcpy@plt>
   1783c:	mov	r3, r0
   17840:	ldrd	r4, [sp]
   17844:	mov	r0, r3
   17848:	ldrd	r6, [sp, #8]
   1784c:	ldr	r8, [sp, #16]
   17850:	add	sp, sp, #20
   17854:	pop	{pc}		; (ldr pc, [sp], #4)
   17858:	add	r1, r1, #1
   1785c:	mvn	r2, #3
   17860:	bl	13ef4 <test@@Base+0x18dc>
   17864:	cmp	r0, #0
   17868:	beq	17820 <flatcc_builder_append_union_vector@@Base+0x6c>
   1786c:	mov	r3, r8
   17870:	b	17840 <flatcc_builder_append_union_vector@@Base+0x8c>
   17874:	ldr	r3, [pc, #36]	; 178a0 <flatcc_builder_append_union_vector@@Base+0xec>
   17878:	movw	r2, #1692	; 0x69c
   1787c:	ldr	r1, [pc, #32]	; 178a4 <flatcc_builder_append_union_vector@@Base+0xf0>
   17880:	ldr	r0, [pc, #32]	; 178a8 <flatcc_builder_append_union_vector@@Base+0xf4>
   17884:	add	r3, pc, r3
   17888:	add	r3, r3, #1072	; 0x430
   1788c:	add	r1, pc, r1
   17890:	add	r3, r3, #4
   17894:	add	r0, pc, r0
   17898:	bl	124b0 <__assert_fail@plt>
   1789c:	bl	14278 <flatcc_builder_default_alloc@@Base+0x2fc>
   178a0:	strdeq	r5, [r0], -r8
   178a4:	andeq	r6, r0, r0, asr #12
   178a8:	andeq	r6, r0, r4, asr r9

000178ac <flatcc_builder_create_string@@Base>:
   178ac:	ldr	ip, [r0, #136]	; 0x88
   178b0:	cmp	r2, #0
   178b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   178b8:	mov	r5, #4
   178bc:	mov	r4, r0
   178c0:	strd	r6, [sp, #8]
   178c4:	mov	r0, #1
   178c8:	moveq	r7, #2
   178cc:	str	lr, [sp, #16]
   178d0:	sub	sp, sp, #92	; 0x5c
   178d4:	moveq	r1, r0
   178d8:	add	r3, sp, #12
   178dc:	ldr	lr, [pc, #204]	; 179b0 <flatcc_builder_create_string@@Base+0x104>
   178e0:	str	r2, [sp, #12]
   178e4:	str	r3, [sp, #24]
   178e8:	sub	r3, ip, r2
   178ec:	sub	r3, r3, #1
   178f0:	str	r5, [sp, #28]
   178f4:	and	r3, r3, #3
   178f8:	add	lr, pc, lr
   178fc:	add	r3, r3, r0
   17900:	beq	17918 <flatcc_builder_create_string@@Base+0x6c>
   17904:	add	r5, r2, r5
   17908:	mov	r7, #3
   1790c:	str	r1, [sp, #32]
   17910:	mov	r1, #2
   17914:	str	r2, [sp, #36]	; 0x24
   17918:	ldr	r6, [pc, #148]	; 179b4 <flatcc_builder_create_string@@Base+0x108>
   1791c:	add	r0, r3, r5
   17920:	add	r2, sp, #88	; 0x58
   17924:	add	r1, r1, #1
   17928:	sub	r5, ip, r0
   1792c:	add	r1, r2, r1, lsl #3
   17930:	str	r0, [sp, #16]
   17934:	cmp	ip, r5
   17938:	ldr	r2, [lr, r6]
   1793c:	str	r7, [sp, #20]
   17940:	strd	r2, [r1, #-72]	; 0xffffffb8
   17944:	ble	17988 <flatcc_builder_create_string@@Base+0xdc>
   17948:	mov	r2, r7
   1794c:	mov	r3, r5
   17950:	str	r0, [sp]
   17954:	add	r1, sp, #24
   17958:	ldr	r0, [r4, #36]	; 0x24
   1795c:	ldr	r6, [r4, #44]	; 0x2c
   17960:	blx	r6
   17964:	cmp	r0, #0
   17968:	bne	179ac <flatcc_builder_create_string@@Base+0x100>
   1796c:	mov	r0, r5
   17970:	str	r5, [r4, #136]	; 0x88
   17974:	add	sp, sp, #92	; 0x5c
   17978:	ldrd	r4, [sp]
   1797c:	ldrd	r6, [sp, #8]
   17980:	add	sp, sp, #16
   17984:	pop	{pc}		; (ldr pc, [sp], #4)
   17988:	ldr	r3, [pc, #40]	; 179b8 <flatcc_builder_create_string@@Base+0x10c>
   1798c:	movw	r2, #647	; 0x287
   17990:	ldr	r1, [pc, #36]	; 179bc <flatcc_builder_create_string@@Base+0x110>
   17994:	ldr	r0, [pc, #36]	; 179c0 <flatcc_builder_create_string@@Base+0x114>
   17998:	add	r3, pc, r3
   1799c:	add	r3, r3, #44	; 0x2c
   179a0:	add	r1, pc, r1
   179a4:	add	r0, pc, r0
   179a8:	bl	124b0 <__assert_fail@plt>
   179ac:	bl	14240 <flatcc_builder_default_alloc@@Base+0x2c4>
   179b0:	andeq	r8, r1, r0, lsl #14
   179b4:	andeq	r0, r0, r0, asr r0
   179b8:	andeq	r5, r0, r4, ror #27
   179bc:	andeq	r6, r0, ip, lsr #10
   179c0:			; <UNDEFINED> instruction: 0x000065b0

000179c4 <flatcc_builder_create_string_str@@Base>:
   179c4:	strd	r4, [sp, #-16]!
   179c8:	mov	r5, r0
   179cc:	mov	r0, r1
   179d0:	mov	r4, r1
   179d4:	str	r6, [sp, #8]
   179d8:	str	lr, [sp, #12]
   179dc:	bl	1245c <strlen@plt>
   179e0:	mov	r2, r0
   179e4:	mov	r1, r4
   179e8:	ldr	r6, [sp, #8]
   179ec:	mov	r0, r5
   179f0:	ldrd	r4, [sp]
   179f4:	ldr	lr, [sp, #12]
   179f8:	add	sp, sp, #16
   179fc:	b	178ac <flatcc_builder_create_string@@Base>

00017a00 <flatcc_builder_create_string_strn@@Base>:
   17a00:	strd	r4, [sp, #-16]!
   17a04:	mov	r4, r1
   17a08:	mov	r1, #0
   17a0c:	str	r6, [sp, #8]
   17a10:	mov	r6, r0
   17a14:	mov	r0, r4
   17a18:	mov	r5, r2
   17a1c:	str	lr, [sp, #12]
   17a20:	bl	12498 <memchr@plt>
   17a24:	cmp	r0, #0
   17a28:	mov	r1, r4
   17a2c:	ldr	lr, [sp, #12]
   17a30:	subne	r5, r0, r4
   17a34:	mov	r0, r6
   17a38:	mov	r2, r5
   17a3c:	ldrd	r4, [sp]
   17a40:	ldr	r6, [sp, #8]
   17a44:	add	sp, sp, #16
   17a48:	b	178ac <flatcc_builder_create_string@@Base>

00017a4c <flatcc_builder_end_string@@Base>:
   17a4c:	ldr	r3, [r0, #32]
   17a50:	strd	r4, [sp, #-16]!
   17a54:	ldrh	r2, [r3, #14]
   17a58:	str	r6, [sp, #8]
   17a5c:	str	lr, [sp, #12]
   17a60:	cmp	r2, #6
   17a64:	bne	17b3c <flatcc_builder_end_string@@Base+0xf0>
   17a68:	ldr	r2, [r3, #20]
   17a6c:	mov	r4, r0
   17a70:	ldr	r3, [r0, #20]
   17a74:	cmp	r2, r3
   17a78:	bne	17b14 <flatcc_builder_end_string@@Base+0xc8>
   17a7c:	ldr	r1, [r0, #16]
   17a80:	bl	178ac <flatcc_builder_create_string@@Base>
   17a84:	subs	r5, r0, #0
   17a88:	beq	17b00 <flatcc_builder_end_string@@Base+0xb4>
   17a8c:	mov	r1, #0
   17a90:	ldr	r0, [r4, #16]
   17a94:	ldr	r2, [r4, #20]
   17a98:	bl	12480 <memset@plt>
   17a9c:	ldr	r3, [r4, #32]
   17aa0:	ldr	r0, [r4, #60]	; 0x3c
   17aa4:	ldr	r2, [r4, #64]	; 0x40
   17aa8:	ldr	ip, [r3]
   17aac:	ldmib	r3, {r1, lr}
   17ab0:	add	r0, r0, ip
   17ab4:	sub	r2, r2, ip
   17ab8:	str	r0, [r4, #16]
   17abc:	cmp	r2, r1
   17ac0:	ldrh	r0, [r4, #128]	; 0x80
   17ac4:	movcs	r2, r1
   17ac8:	str	lr, [r4, #20]
   17acc:	str	ip, [r4, #28]
   17ad0:	ldrh	ip, [r4, #130]	; 0x82
   17ad4:	str	r2, [r4, #24]
   17ad8:	ldr	r2, [r4, #156]	; 0x9c
   17adc:	str	r1, [r3, #4]
   17ae0:	cmp	r0, ip
   17ae4:	sub	r0, r3, #36	; 0x24
   17ae8:	strhcc	ip, [r4, #128]	; 0x80
   17aec:	ldrh	r1, [r3, #12]
   17af0:	sub	r3, r2, #1
   17af4:	str	r0, [r4, #32]
   17af8:	strh	r1, [r4, #130]	; 0x82
   17afc:	str	r3, [r4, #156]	; 0x9c
   17b00:	mov	r0, r5
   17b04:	ldrd	r4, [sp]
   17b08:	ldr	r6, [sp, #8]
   17b0c:	add	sp, sp, #12
   17b10:	pop	{pc}		; (ldr pc, [sp], #4)
   17b14:	ldr	r3, [pc, #72]	; 17b64 <flatcc_builder_end_string@@Base+0x118>
   17b18:	movw	r2, #1733	; 0x6c5
   17b1c:	ldr	r1, [pc, #68]	; 17b68 <flatcc_builder_end_string@@Base+0x11c>
   17b20:	ldr	r0, [pc, #68]	; 17b6c <flatcc_builder_end_string@@Base+0x120>
   17b24:	add	r3, pc, r3
   17b28:	add	r3, r3, #1104	; 0x450
   17b2c:	add	r1, pc, r1
   17b30:	add	r3, r3, #8
   17b34:	add	r0, pc, r0
   17b38:	bl	124b0 <__assert_fail@plt>
   17b3c:	ldr	r3, [pc, #44]	; 17b70 <flatcc_builder_end_string@@Base+0x124>
   17b40:	movw	r2, #1732	; 0x6c4
   17b44:	ldr	r1, [pc, #40]	; 17b74 <flatcc_builder_end_string@@Base+0x128>
   17b48:	ldr	r0, [pc, #40]	; 17b78 <flatcc_builder_end_string@@Base+0x12c>
   17b4c:	add	r3, pc, r3
   17b50:	add	r3, r3, #1104	; 0x450
   17b54:	add	r1, pc, r1
   17b58:	add	r3, r3, #8
   17b5c:	add	r0, pc, r0
   17b60:	bl	124b0 <__assert_fail@plt>
   17b64:	andeq	r5, r0, r8, asr ip
   17b68:	andeq	r6, r0, r0, lsr #7
   17b6c:	andeq	r6, r0, r8, ror #13
   17b70:	andeq	r5, r0, r0, lsr ip
   17b74:	andeq	r6, r0, r8, ror r3
   17b78:	andeq	r6, r0, r0, ror #10

00017b7c <flatcc_builder_string_edit@@Base>:
   17b7c:	ldr	r0, [r0, #16]
   17b80:	bx	lr

00017b84 <flatcc_builder_string_len@@Base>:
   17b84:	ldr	r3, [r0, #32]
   17b88:	ldr	r0, [r3, #20]
   17b8c:	bx	lr

00017b90 <flatcc_builder_table_add@@Base>:
   17b90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17b94:	mov	r4, r0
   17b98:	ldr	r0, [r0, #32]
   17b9c:	ldrh	r0, [r0, #14]
   17ba0:	strd	r6, [sp, #8]
   17ba4:	strd	r8, [sp, #16]
   17ba8:	str	sl, [sp, #24]
   17bac:	str	lr, [sp, #28]
   17bb0:	cmp	r0, #3
   17bb4:	bne	17ce4 <flatcc_builder_table_add@@Base+0x154>
   17bb8:	movw	r0, #32764	; 0x7ffc
   17bbc:	cmp	r1, r0
   17bc0:	bhi	17cbc <flatcc_builder_table_add@@Base+0x12c>
   17bc4:	ldrh	r0, [r4, #130]	; 0x82
   17bc8:	lsl	r8, r1, #1
   17bcc:	ldr	lr, [r4, #4]
   17bd0:	cmp	r0, r3
   17bd4:	strhcc	r3, [r4, #130]	; 0x82
   17bd8:	ldrh	r6, [lr, r8]
   17bdc:	add	lr, lr, r8
   17be0:	cmp	r6, #0
   17be4:	bne	17c94 <flatcc_builder_table_add@@Base+0x104>
   17be8:	ldr	ip, [r4, #12]
   17bec:	movw	r9, #31153	; 0x79b1
   17bf0:	movt	r9, #40503	; 0x9e37
   17bf4:	uxth	r7, r1
   17bf8:	sub	r5, r3, #1
   17bfc:	ldr	r0, [r4, #20]
   17c00:	rsb	r3, r3, #0
   17c04:	eor	ip, ip, r1
   17c08:	ldr	r1, [r4, #24]
   17c0c:	mul	ip, r9, ip
   17c10:	add	r5, r5, r0
   17c14:	and	r5, r5, r3
   17c18:	eor	ip, ip, r2
   17c1c:	add	r2, r2, r5
   17c20:	cmp	r2, r1
   17c24:	mul	ip, r9, ip
   17c28:	str	ip, [r4, #12]
   17c2c:	str	r2, [r4, #20]
   17c30:	bcs	17c6c <flatcc_builder_table_add@@Base+0xdc>
   17c34:	add	r3, r5, #4
   17c38:	ldr	r0, [r4, #16]
   17c3c:	strh	r3, [lr]
   17c40:	ldrh	r3, [r4, #8]
   17c44:	add	r0, r0, r5
   17c48:	cmp	r3, r7
   17c4c:	addls	r7, r7, #1
   17c50:	strhls	r7, [r4, #8]
   17c54:	ldrd	r4, [sp]
   17c58:	ldrd	r6, [sp, #8]
   17c5c:	ldrd	r8, [sp, #16]
   17c60:	ldr	sl, [sp, #24]
   17c64:	add	sp, sp, #28
   17c68:	pop	{pc}		; (ldr pc, [sp], #4)
   17c6c:	add	r1, r2, #1
   17c70:	mov	r0, r4
   17c74:	movw	r2, #65532	; 0xfffc
   17c78:	bl	13ef4 <test@@Base+0x18dc>
   17c7c:	cmp	r0, #0
   17c80:	movne	r0, r6
   17c84:	bne	17c54 <flatcc_builder_table_add@@Base+0xc4>
   17c88:	ldr	lr, [r4, #4]
   17c8c:	add	lr, lr, r8
   17c90:	b	17c34 <flatcc_builder_table_add@@Base+0xa4>
   17c94:	ldr	r3, [pc, #112]	; 17d0c <flatcc_builder_table_add@@Base+0x17c>
   17c98:	movw	r2, #1784	; 0x6f8
   17c9c:	ldr	r1, [pc, #108]	; 17d10 <flatcc_builder_table_add@@Base+0x180>
   17ca0:	ldr	r0, [pc, #108]	; 17d14 <flatcc_builder_table_add@@Base+0x184>
   17ca4:	add	r3, pc, r3
   17ca8:	add	r3, r3, #1136	; 0x470
   17cac:	add	r1, pc, r1
   17cb0:	add	r3, r3, #4
   17cb4:	add	r0, pc, r0
   17cb8:	bl	124b0 <__assert_fail@plt>
   17cbc:	ldr	r3, [pc, #84]	; 17d18 <flatcc_builder_table_add@@Base+0x188>
   17cc0:	movw	r2, #1774	; 0x6ee
   17cc4:	ldr	r1, [pc, #80]	; 17d1c <flatcc_builder_table_add@@Base+0x18c>
   17cc8:	ldr	r0, [pc, #80]	; 17d20 <flatcc_builder_table_add@@Base+0x190>
   17ccc:	add	r3, pc, r3
   17cd0:	add	r3, r3, #1136	; 0x470
   17cd4:	add	r1, pc, r1
   17cd8:	add	r3, r3, #4
   17cdc:	add	r0, pc, r0
   17ce0:	bl	124b0 <__assert_fail@plt>
   17ce4:	ldr	r3, [pc, #56]	; 17d24 <flatcc_builder_table_add@@Base+0x194>
   17ce8:	movw	r2, #1773	; 0x6ed
   17cec:	ldr	r1, [pc, #52]	; 17d28 <flatcc_builder_table_add@@Base+0x198>
   17cf0:	ldr	r0, [pc, #52]	; 17d2c <flatcc_builder_table_add@@Base+0x19c>
   17cf4:	add	r3, pc, r3
   17cf8:	add	r3, r3, #1136	; 0x470
   17cfc:	add	r1, pc, r1
   17d00:	add	r3, r3, #4
   17d04:	add	r0, pc, r0
   17d08:	bl	124b0 <__assert_fail@plt>
   17d0c:	ldrdeq	r5, [r0], -r8
   17d10:	andeq	r6, r0, r0, lsr #4
   17d14:	andeq	r6, r0, r0, lsr #5
   17d18:			; <UNDEFINED> instruction: 0x00005ab0
   17d1c:	strdeq	r6, [r0], -r8
   17d20:	andeq	r6, r0, r4, ror #10
   17d24:	andeq	r5, r0, r8, lsl #21
   17d28:	ldrdeq	r6, [r0], -r0
   17d2c:	andeq	r6, r0, r4, lsr #9

00017d30 <flatcc_builder_table_edit@@Base>:
   17d30:	ldr	r2, [r0, #32]
   17d34:	ldrh	r2, [r2, #14]
   17d38:	cmp	r2, #3
   17d3c:	bne	17d54 <flatcc_builder_table_edit@@Base+0x24>
   17d40:	ldr	r3, [r0, #20]
   17d44:	ldr	r0, [r0, #16]
   17d48:	sub	r3, r3, r1
   17d4c:	add	r0, r0, r3
   17d50:	bx	lr
   17d54:	ldr	r3, [pc, #36]	; 17d80 <flatcc_builder_table_edit@@Base+0x50>
   17d58:	movw	r2, #1794	; 0x702
   17d5c:	str	r4, [sp, #-8]!
   17d60:	ldr	r1, [pc, #28]	; 17d84 <flatcc_builder_table_edit@@Base+0x54>
   17d64:	str	lr, [sp, #4]
   17d68:	ldr	r0, [pc, #24]	; 17d88 <flatcc_builder_table_edit@@Base+0x58>
   17d6c:	add	r3, pc, r3
   17d70:	add	r3, r3, #1168	; 0x490
   17d74:	add	r1, pc, r1
   17d78:	add	r0, pc, r0
   17d7c:	bl	124b0 <__assert_fail@plt>
   17d80:	andeq	r5, r0, r0, lsl sl
   17d84:	andeq	r6, r0, r8, asr r1
   17d88:	andeq	r6, r0, r0, lsr r4

00017d8c <flatcc_builder_table_add_copy@@Base>:
   17d8c:	strd	r4, [sp, #-16]!
   17d90:	mov	r4, r3
   17d94:	ldrh	r3, [sp, #16]
   17d98:	str	r6, [sp, #8]
   17d9c:	mov	r6, r2
   17da0:	mov	r2, r4
   17da4:	str	lr, [sp, #12]
   17da8:	bl	17b90 <flatcc_builder_table_add@@Base>
   17dac:	subs	r5, r0, #0
   17db0:	beq	17dc0 <flatcc_builder_table_add_copy@@Base+0x34>
   17db4:	mov	r2, r4
   17db8:	mov	r1, r6
   17dbc:	bl	12408 <memcpy@plt>
   17dc0:	mov	r0, r5
   17dc4:	ldrd	r4, [sp]
   17dc8:	ldr	r6, [sp, #8]
   17dcc:	add	sp, sp, #12
   17dd0:	pop	{pc}		; (ldr pc, [sp], #4)

00017dd4 <flatcc_builder_table_add_offset@@Base>:
   17dd4:	ldr	r3, [r0, #32]
   17dd8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17ddc:	ldrh	r3, [r3, #14]
   17de0:	strd	r6, [sp, #8]
   17de4:	str	r8, [sp, #16]
   17de8:	str	lr, [sp, #20]
   17dec:	cmp	r3, #3
   17df0:	bne	17f18 <flatcc_builder_table_add_offset@@Base+0x144>
   17df4:	movw	r3, #32764	; 0x7ffc
   17df8:	cmp	r1, r3
   17dfc:	bhi	17ef0 <flatcc_builder_table_add_offset@@Base+0x11c>
   17e00:	ldr	ip, [r0, #4]
   17e04:	lsl	r8, r1, #1
   17e08:	mov	r4, r0
   17e0c:	ldrh	r6, [ip, r8]
   17e10:	add	ip, ip, r8
   17e14:	cmp	r6, #0
   17e18:	bne	17ec8 <flatcc_builder_table_add_offset@@Base+0xf4>
   17e1c:	ldr	r3, [r0, #12]
   17e20:	movw	r2, #31153	; 0x79b1
   17e24:	movt	r2, #40503	; 0x9e37
   17e28:	uxth	r7, r1
   17e2c:	ldr	r5, [r0, #20]
   17e30:	ldr	lr, [r0, #24]
   17e34:	eor	r3, r3, r1
   17e38:	mul	r3, r2, r3
   17e3c:	add	r5, r5, #3
   17e40:	bic	r5, r5, #3
   17e44:	add	r1, r5, #4
   17e48:	eor	r3, r3, #4
   17e4c:	cmp	r1, lr
   17e50:	str	r1, [r0, #20]
   17e54:	mul	r3, r2, r3
   17e58:	str	r3, [r0, #12]
   17e5c:	bhi	17ea8 <flatcc_builder_table_add_offset@@Base+0xd4>
   17e60:	uxth	r2, r5
   17e64:	ldr	r0, [r4, #16]
   17e68:	add	r3, r2, #4
   17e6c:	strh	r3, [ip]
   17e70:	ldrh	r3, [r4, #8]
   17e74:	add	r0, r0, r5
   17e78:	cmp	r3, r7
   17e7c:	ldr	r3, [r4]
   17e80:	addls	r7, r7, #1
   17e84:	strhls	r7, [r4, #8]
   17e88:	add	r1, r3, #2
   17e8c:	str	r1, [r4]
   17e90:	strh	r2, [r3]
   17e94:	ldrd	r4, [sp]
   17e98:	ldrd	r6, [sp, #8]
   17e9c:	ldr	r8, [sp, #16]
   17ea0:	add	sp, sp, #20
   17ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ea8:	movw	r2, #65532	; 0xfffc
   17eac:	bl	13ef4 <test@@Base+0x18dc>
   17eb0:	cmp	r0, #0
   17eb4:	movne	r0, r6
   17eb8:	bne	17e94 <flatcc_builder_table_add_offset@@Base+0xc0>
   17ebc:	ldr	ip, [r4, #4]
   17ec0:	add	ip, ip, r8
   17ec4:	b	17e60 <flatcc_builder_table_add_offset@@Base+0x8c>
   17ec8:	ldr	r3, [pc, #112]	; 17f40 <flatcc_builder_table_add_offset@@Base+0x16c>
   17ecc:	movw	r2, #1819	; 0x71b
   17ed0:	ldr	r1, [pc, #108]	; 17f44 <flatcc_builder_table_add_offset@@Base+0x170>
   17ed4:	ldr	r0, [pc, #108]	; 17f48 <flatcc_builder_table_add_offset@@Base+0x174>
   17ed8:	add	r3, pc, r3
   17edc:	add	r3, r3, #1184	; 0x4a0
   17ee0:	add	r1, pc, r1
   17ee4:	add	r3, r3, #12
   17ee8:	add	r0, pc, r0
   17eec:	bl	124b0 <__assert_fail@plt>
   17ef0:	ldr	r3, [pc, #84]	; 17f4c <flatcc_builder_table_add_offset@@Base+0x178>
   17ef4:	movw	r2, #1812	; 0x714
   17ef8:	ldr	r1, [pc, #80]	; 17f50 <flatcc_builder_table_add_offset@@Base+0x17c>
   17efc:	ldr	r0, [pc, #80]	; 17f54 <flatcc_builder_table_add_offset@@Base+0x180>
   17f00:	add	r3, pc, r3
   17f04:	add	r3, r3, #1184	; 0x4a0
   17f08:	add	r1, pc, r1
   17f0c:	add	r3, r3, #12
   17f10:	add	r0, pc, r0
   17f14:	bl	124b0 <__assert_fail@plt>
   17f18:	ldr	r3, [pc, #56]	; 17f58 <flatcc_builder_table_add_offset@@Base+0x184>
   17f1c:	movw	r2, #1811	; 0x713
   17f20:	ldr	r1, [pc, #52]	; 17f5c <flatcc_builder_table_add_offset@@Base+0x188>
   17f24:	ldr	r0, [pc, #52]	; 17f60 <flatcc_builder_table_add_offset@@Base+0x18c>
   17f28:	add	r3, pc, r3
   17f2c:	add	r3, r3, #1184	; 0x4a0
   17f30:	add	r1, pc, r1
   17f34:	add	r3, r3, #12
   17f38:	add	r0, pc, r0
   17f3c:	bl	124b0 <__assert_fail@plt>
   17f40:	andeq	r5, r0, r4, lsr #17
   17f44:	andeq	r5, r0, ip, ror #31
   17f48:	andeq	r6, r0, ip, rrx
   17f4c:	andeq	r5, r0, ip, ror r8
   17f50:	andeq	r5, r0, r4, asr #31
   17f54:	andeq	r6, r0, r0, lsr r3
   17f58:	andeq	r5, r0, r4, asr r8
   17f5c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   17f60:	andeq	r6, r0, r0, ror r2

00017f64 <flatcc_builder_table_add_union@@Base>:
   17f64:	strd	r4, [sp, #-20]!	; 0xffffffec
   17f68:	strd	r6, [sp, #8]
   17f6c:	str	lr, [sp, #16]
   17f70:	sub	sp, sp, #12
   17f74:	add	ip, sp, #8
   17f78:	stmdb	ip, {r2, r3}
   17f7c:	ldr	r3, [r0, #32]
   17f80:	ldrb	r5, [sp]
   17f84:	ldr	r6, [sp, #4]
   17f88:	ldrh	r3, [r3, #14]
   17f8c:	cmp	r3, #3
   17f90:	bne	18024 <flatcc_builder_table_add_union@@Base+0xc0>
   17f94:	cmp	r5, #0
   17f98:	mov	r4, r0
   17f9c:	mov	r7, r1
   17fa0:	beq	17ff4 <flatcc_builder_table_add_union@@Base+0x90>
   17fa4:	cmp	r6, #0
   17fa8:	beq	17fbc <flatcc_builder_table_add_union@@Base+0x58>
   17fac:	bl	17dd4 <flatcc_builder_table_add_offset@@Base>
   17fb0:	cmp	r0, #0
   17fb4:	strne	r6, [r0]
   17fb8:	beq	18074 <flatcc_builder_table_add_union@@Base+0x110>
   17fbc:	mov	r3, #1
   17fc0:	sub	r1, r7, #1
   17fc4:	mov	r2, r3
   17fc8:	mov	r0, r4
   17fcc:	bl	17b90 <flatcc_builder_table_add@@Base>
   17fd0:	subs	r3, r0, #0
   17fd4:	beq	1804c <flatcc_builder_table_add_union@@Base+0xe8>
   17fd8:	mov	r0, #0
   17fdc:	strb	r5, [r3]
   17fe0:	add	sp, sp, #12
   17fe4:	ldrd	r4, [sp]
   17fe8:	ldrd	r6, [sp, #8]
   17fec:	add	sp, sp, #16
   17ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff4:	cmp	r6, #0
   17ff8:	beq	17fbc <flatcc_builder_table_add_union@@Base+0x58>
   17ffc:	ldr	r3, [pc, #152]	; 1809c <flatcc_builder_table_add_union@@Base+0x138>
   18000:	movw	r2, #1519	; 0x5ef
   18004:	ldr	r1, [pc, #148]	; 180a0 <flatcc_builder_table_add_union@@Base+0x13c>
   18008:	ldr	r0, [pc, #148]	; 180a4 <flatcc_builder_table_add_union@@Base+0x140>
   1800c:	add	r3, pc, r3
   18010:	add	r3, r3, #1216	; 0x4c0
   18014:	add	r1, pc, r1
   18018:	add	r3, r3, #12
   1801c:	add	r0, pc, r0
   18020:	bl	124b0 <__assert_fail@plt>
   18024:	ldr	r3, [pc, #124]	; 180a8 <flatcc_builder_table_add_union@@Base+0x144>
   18028:	movw	r2, #1518	; 0x5ee
   1802c:	ldr	r1, [pc, #120]	; 180ac <flatcc_builder_table_add_union@@Base+0x148>
   18030:	ldr	r0, [pc, #120]	; 180b0 <flatcc_builder_table_add_union@@Base+0x14c>
   18034:	add	r3, pc, r3
   18038:	add	r3, r3, #1216	; 0x4c0
   1803c:	add	r1, pc, r1
   18040:	add	r3, r3, #12
   18044:	add	r0, pc, r0
   18048:	bl	124b0 <__assert_fail@plt>
   1804c:	ldr	r3, [pc, #96]	; 180b4 <flatcc_builder_table_add_union@@Base+0x150>
   18050:	movw	r2, #1526	; 0x5f6
   18054:	ldr	r1, [pc, #92]	; 180b8 <flatcc_builder_table_add_union@@Base+0x154>
   18058:	ldr	r0, [pc, #92]	; 180bc <flatcc_builder_table_add_union@@Base+0x158>
   1805c:	add	r3, pc, r3
   18060:	add	r3, r3, #1216	; 0x4c0
   18064:	add	r1, pc, r1
   18068:	add	r3, r3, #12
   1806c:	add	r0, pc, r0
   18070:	bl	124b0 <__assert_fail@plt>
   18074:	ldr	r3, [pc, #68]	; 180c0 <flatcc_builder_table_add_union@@Base+0x15c>
   18078:	movw	r2, #1522	; 0x5f2
   1807c:	ldr	r1, [pc, #64]	; 180c4 <flatcc_builder_table_add_union@@Base+0x160>
   18080:	ldr	r0, [pc, #64]	; 180c8 <flatcc_builder_table_add_union@@Base+0x164>
   18084:	add	r3, pc, r3
   18088:	add	r3, r3, #1216	; 0x4c0
   1808c:	add	r1, pc, r1
   18090:	add	r3, r3, #12
   18094:	add	r0, pc, r0
   18098:	bl	124b0 <__assert_fail@plt>
   1809c:	andeq	r5, r0, r0, ror r7
   180a0:			; <UNDEFINED> instruction: 0x00005eb8
   180a4:	andeq	r6, r0, r8, ror #4
   180a8:	andeq	r5, r0, r8, asr #14
   180ac:	muleq	r0, r0, lr
   180b0:	andeq	r6, r0, r4, ror #2
   180b4:	andeq	r5, r0, r0, lsr #14
   180b8:	andeq	r5, r0, r8, ror #28
   180bc:	andeq	r6, r0, r8, asr #4
   180c0:	strdeq	r5, [r0], -r8
   180c4:	andeq	r5, r0, r0, asr #28
   180c8:	andeq	r6, r0, r4, lsl r2

000180cc <flatcc_builder_table_add_union_vector@@Base>:
   180cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   180d0:	strd	r6, [sp, #8]
   180d4:	mov	r7, r1
   180d8:	str	lr, [sp, #16]
   180dc:	sub	sp, sp, #12
   180e0:	add	r1, sp, #8
   180e4:	stmdb	r1, {r2, r3}
   180e8:	ldr	r3, [r0, #32]
   180ec:	ldm	sp, {r4, r6}
   180f0:	ldrh	r3, [r3, #14]
   180f4:	cmp	r3, #3
   180f8:	bne	181a4 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   180fc:	clz	r3, r6
   18100:	clz	r2, r4
   18104:	lsr	r3, r3, #5
   18108:	lsr	r2, r2, #5
   1810c:	cmp	r2, r3
   18110:	beq	18140 <flatcc_builder_table_add_union_vector@@Base+0x74>
   18114:	adds	r4, r4, #0
   18118:	movne	r4, #1
   1811c:	cmp	r4, r3
   18120:	mvnne	r4, #0
   18124:	beq	181cc <flatcc_builder_table_add_union_vector@@Base+0x100>
   18128:	mov	r0, r4
   1812c:	add	sp, sp, #12
   18130:	ldrd	r4, [sp]
   18134:	ldrd	r6, [sp, #8]
   18138:	add	sp, sp, #16
   1813c:	pop	{pc}		; (ldr pc, [sp], #4)
   18140:	cmp	r4, #0
   18144:	beq	18128 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   18148:	sub	r1, r7, #1
   1814c:	mov	r5, r0
   18150:	bl	17dd4 <flatcc_builder_table_add_offset@@Base>
   18154:	subs	r3, r0, #0
   18158:	beq	181f4 <flatcc_builder_table_add_union_vector@@Base+0x128>
   1815c:	mov	r1, r7
   18160:	mov	r0, r5
   18164:	str	r4, [r3]
   18168:	bl	17dd4 <flatcc_builder_table_add_offset@@Base>
   1816c:	cmp	r0, #0
   18170:	movne	r4, #0
   18174:	strne	r6, [r0]
   18178:	bne	18128 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   1817c:	ldr	r3, [pc, #152]	; 1821c <flatcc_builder_table_add_union_vector@@Base+0x150>
   18180:	movw	r2, #1544	; 0x608
   18184:	ldr	r1, [pc, #148]	; 18220 <flatcc_builder_table_add_union_vector@@Base+0x154>
   18188:	ldr	r0, [pc, #148]	; 18224 <flatcc_builder_table_add_union_vector@@Base+0x158>
   1818c:	add	r3, pc, r3
   18190:	add	r3, r3, #1248	; 0x4e0
   18194:	add	r1, pc, r1
   18198:	add	r3, r3, #12
   1819c:	add	r0, pc, r0
   181a0:	bl	124b0 <__assert_fail@plt>
   181a4:	ldr	r3, [pc, #124]	; 18228 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   181a8:	mov	r2, #1536	; 0x600
   181ac:	ldr	r1, [pc, #120]	; 1822c <flatcc_builder_table_add_union_vector@@Base+0x160>
   181b0:	ldr	r0, [pc, #120]	; 18230 <flatcc_builder_table_add_union_vector@@Base+0x164>
   181b4:	add	r3, pc, r3
   181b8:	add	r3, r3, #1248	; 0x4e0
   181bc:	add	r1, pc, r1
   181c0:	add	r3, r3, #12
   181c4:	add	r0, pc, r0
   181c8:	bl	124b0 <__assert_fail@plt>
   181cc:	ldr	r3, [pc, #96]	; 18234 <flatcc_builder_table_add_union_vector@@Base+0x168>
   181d0:	movw	r2, #1537	; 0x601
   181d4:	ldr	r1, [pc, #92]	; 18238 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   181d8:	ldr	r0, [pc, #92]	; 1823c <flatcc_builder_table_add_union_vector@@Base+0x170>
   181dc:	add	r3, pc, r3
   181e0:	add	r3, r3, #1248	; 0x4e0
   181e4:	add	r1, pc, r1
   181e8:	add	r3, r3, #12
   181ec:	add	r0, pc, r0
   181f0:	bl	124b0 <__assert_fail@plt>
   181f4:	ldr	r3, [pc, #68]	; 18240 <flatcc_builder_table_add_union_vector@@Base+0x174>
   181f8:	movw	r2, #1540	; 0x604
   181fc:	ldr	r1, [pc, #64]	; 18244 <flatcc_builder_table_add_union_vector@@Base+0x178>
   18200:	ldr	r0, [pc, #64]	; 18248 <flatcc_builder_table_add_union_vector@@Base+0x17c>
   18204:	add	r3, pc, r3
   18208:	add	r3, r3, #1248	; 0x4e0
   1820c:	add	r1, pc, r1
   18210:	add	r3, r3, #12
   18214:	add	r0, pc, r0
   18218:	bl	124b0 <__assert_fail@plt>
   1821c:	strdeq	r5, [r0], -r0
   18220:	andeq	r5, r0, r8, lsr sp
   18224:	andeq	r6, r0, ip, lsl #2
   18228:	andeq	r5, r0, r8, asr #11
   1822c:	andeq	r5, r0, r0, lsl sp
   18230:	andeq	r5, r0, r4, ror #31
   18234:	andeq	r5, r0, r0, lsr #11
   18238:	andeq	r5, r0, r8, ror #25
   1823c:	ldrdeq	r6, [r0], -r4
   18240:	andeq	r5, r0, r8, ror r5
   18244:	andeq	r5, r0, r0, asr #25
   18248:	muleq	r0, r4, r0

0001824c <flatcc_builder_push_buffer_alignment@@Base>:
   1824c:	mov	r3, r0
   18250:	mov	r2, #4
   18254:	ldrh	r0, [r0, #128]	; 0x80
   18258:	strh	r2, [r3, #128]	; 0x80
   1825c:	bx	lr

00018260 <flatcc_builder_pop_buffer_alignment@@Base>:
   18260:	ldrh	r3, [r0, #128]	; 0x80
   18264:	cmp	r3, r1
   18268:	strhcc	r1, [r0, #128]	; 0x80
   1826c:	bx	lr

00018270 <flatcc_builder_get_buffer_alignment@@Base>:
   18270:	ldrh	r0, [r0, #128]	; 0x80
   18274:	bx	lr

00018278 <flatcc_builder_set_vtable_clustering@@Base>:
   18278:	clz	r1, r1
   1827c:	lsr	r1, r1, #5
   18280:	str	r1, [r0, #180]	; 0xb4
   18284:	bx	lr

00018288 <flatcc_builder_set_block_align@@Base>:
   18288:	strh	r1, [r0, #132]	; 0x84
   1828c:	bx	lr

00018290 <flatcc_builder_get_level@@Base>:
   18290:	ldr	r0, [r0, #156]	; 0x9c
   18294:	bx	lr

00018298 <flatcc_builder_set_max_level@@Base>:
   18298:	ldr	r3, [r0, #160]	; 0xa0
   1829c:	str	r1, [r0, #176]	; 0xb0
   182a0:	cmp	r3, r1
   182a4:	strlt	r1, [r0, #160]	; 0xa0
   182a8:	bx	lr

000182ac <flatcc_builder_get_buffer_size@@Base>:
   182ac:	ldr	r3, [r0, #136]	; 0x88
   182b0:	ldr	r0, [r0, #140]	; 0x8c
   182b4:	sub	r0, r0, r3
   182b8:	bx	lr

000182bc <flatcc_builder_get_buffer_start@@Base>:
   182bc:	ldr	r0, [r0, #136]	; 0x88
   182c0:	bx	lr

000182c4 <flatcc_builder_get_buffer_end@@Base>:
   182c4:	ldr	r0, [r0, #140]	; 0x8c
   182c8:	bx	lr

000182cc <flatcc_builder_set_vtable_cache_limit@@Base>:
   182cc:	str	r1, [r0, #172]	; 0xac
   182d0:	bx	lr

000182d4 <flatcc_builder_set_identifier@@Base>:
   182d4:	ldr	r3, [pc, #40]	; 18304 <flatcc_builder_set_identifier@@Base+0x30>
   182d8:	cmp	r1, #0
   182dc:	add	r3, pc, r3
   182e0:	beq	182f0 <flatcc_builder_set_identifier@@Base+0x1c>
   182e4:	ldr	r3, [r1]
   182e8:	str	r3, [r0, #168]	; 0xa8
   182ec:	bx	lr
   182f0:	ldr	r2, [pc, #16]	; 18308 <flatcc_builder_set_identifier@@Base+0x34>
   182f4:	ldr	r1, [r3, r2]
   182f8:	ldr	r3, [r1]
   182fc:	str	r3, [r0, #168]	; 0xa8
   18300:	bx	lr
   18304:	andeq	r7, r1, ip, lsl sp
   18308:	andeq	r0, r0, r0, asr r0

0001830c <flatcc_builder_get_type@@Base>:
   1830c:	ldr	r0, [r0, #32]
   18310:	cmp	r0, #0
   18314:	ldrhne	r0, [r0, #14]
   18318:	bx	lr

0001831c <flatcc_builder_get_type_at@@Base>:
   1831c:	cmp	r1, #0
   18320:	ble	18348 <flatcc_builder_get_type_at@@Base+0x2c>
   18324:	ldr	r3, [r0, #156]	; 0x9c
   18328:	cmp	r3, r1
   1832c:	blt	18348 <flatcc_builder_get_type_at@@Base+0x2c>
   18330:	ldr	r2, [r0, #32]
   18334:	sub	r1, r1, r3
   18338:	add	r1, r1, r1, lsl #3
   1833c:	add	r1, r2, r1, lsl #2
   18340:	ldrh	r0, [r1, #14]
   18344:	bx	lr
   18348:	mov	r0, #0
   1834c:	bx	lr

00018350 <flatcc_builder_get_direct_buffer@@Base>:
   18350:	ldr	r3, [r0, #184]	; 0xb8
   18354:	cmp	r3, #0
   18358:	bne	18374 <flatcc_builder_get_direct_buffer@@Base+0x24>
   1835c:	cmp	r1, #0
   18360:	movne	r3, #0
   18364:	movne	r0, r3
   18368:	moveq	r0, r1
   1836c:	strne	r3, [r1]
   18370:	bx	lr
   18374:	ldrd	r2, [r0, #188]	; 0xbc
   18378:	cmp	r2, r3
   1837c:	bne	1835c <flatcc_builder_get_direct_buffer@@Base+0xc>
   18380:	cmp	r1, #0
   18384:	ldrne	r3, [r0, #212]	; 0xd4
   18388:	ldr	r0, [r0, #196]	; 0xc4
   1838c:	strne	r3, [r1]
   18390:	bx	lr

00018394 <flatcc_builder_copy_buffer@@Base>:
   18394:	ldr	r3, [r0, #184]	; 0xb8
   18398:	cmp	r3, #0
   1839c:	beq	183c4 <flatcc_builder_copy_buffer@@Base+0x30>
   183a0:	add	r0, r0, #188	; 0xbc
   183a4:	str	r4, [sp, #-8]!
   183a8:	str	lr, [sp, #4]
   183ac:	bl	18b28 <flatcc_emitter_copy_buffer@@Base>
   183b0:	cmp	r0, #0
   183b4:	beq	183cc <flatcc_builder_copy_buffer@@Base+0x38>
   183b8:	ldr	r4, [sp]
   183bc:	add	sp, sp, #4
   183c0:	pop	{pc}		; (ldr pc, [sp], #4)
   183c4:	mov	r0, r3
   183c8:	bx	lr
   183cc:	ldr	r3, [pc, #32]	; 183f4 <flatcc_builder_copy_buffer@@Base+0x60>
   183d0:	movw	r2, #1926	; 0x786
   183d4:	ldr	r1, [pc, #28]	; 183f8 <flatcc_builder_copy_buffer@@Base+0x64>
   183d8:	ldr	r0, [pc, #28]	; 183fc <flatcc_builder_copy_buffer@@Base+0x68>
   183dc:	add	r3, pc, r3
   183e0:	add	r3, r3, #1296	; 0x510
   183e4:	add	r1, pc, r1
   183e8:	add	r3, r3, #4
   183ec:	add	r0, pc, r0
   183f0:	bl	124b0 <__assert_fail@plt>
   183f4:	andeq	r5, r0, r0, lsr #7
   183f8:	andeq	r5, r0, r8, ror #21
   183fc:	strdeq	r5, [r0], -ip

00018400 <flatcc_builder_finalize_buffer@@Base>:
   18400:	strd	r4, [sp, #-16]!
   18404:	mov	r5, r1
   18408:	str	r6, [sp, #8]
   1840c:	mov	r6, r0
   18410:	str	lr, [sp, #12]
   18414:	bl	182ac <flatcc_builder_get_buffer_size@@Base>
   18418:	cmp	r5, #0
   1841c:	mov	r4, r0
   18420:	strne	r0, [r5]
   18424:	bl	12438 <malloc@plt>
   18428:	subs	r5, r0, #0
   1842c:	beq	1845c <flatcc_builder_finalize_buffer@@Base+0x5c>
   18430:	mov	r2, r4
   18434:	mov	r0, r6
   18438:	mov	r1, r5
   1843c:	bl	18394 <flatcc_builder_copy_buffer@@Base>
   18440:	cmp	r0, #0
   18444:	beq	18480 <flatcc_builder_finalize_buffer@@Base+0x80>
   18448:	mov	r0, r5
   1844c:	ldrd	r4, [sp]
   18450:	ldr	r6, [sp, #8]
   18454:	add	sp, sp, #12
   18458:	pop	{pc}		; (ldr pc, [sp], #4)
   1845c:	ldr	r3, [pc, #64]	; 184a4 <flatcc_builder_finalize_buffer@@Base+0xa4>
   18460:	movw	r2, #1944	; 0x798
   18464:	ldr	r1, [pc, #60]	; 184a8 <flatcc_builder_finalize_buffer@@Base+0xa8>
   18468:	ldr	r0, [pc, #60]	; 184ac <flatcc_builder_finalize_buffer@@Base+0xac>
   1846c:	add	r3, pc, r3
   18470:	add	r3, r3, #1328	; 0x530
   18474:	add	r1, pc, r1
   18478:	add	r0, pc, r0
   1847c:	bl	124b0 <__assert_fail@plt>
   18480:	ldr	r3, [pc, #40]	; 184b0 <flatcc_builder_finalize_buffer@@Base+0xb0>
   18484:	movw	r2, #1948	; 0x79c
   18488:	ldr	r1, [pc, #36]	; 184b4 <flatcc_builder_finalize_buffer@@Base+0xb4>
   1848c:	ldr	r0, [pc, #36]	; 184b8 <flatcc_builder_finalize_buffer@@Base+0xb8>
   18490:	add	r3, pc, r3
   18494:	add	r3, r3, #1328	; 0x530
   18498:	add	r1, pc, r1
   1849c:	add	r0, pc, r0
   184a0:	bl	124b0 <__assert_fail@plt>
   184a4:	andeq	r5, r0, r0, lsl r3
   184a8:	andeq	r5, r0, r8, asr sl
   184ac:	ldrdeq	r5, [r0], -ip
   184b0:	andeq	r5, r0, ip, ror #5
   184b4:	andeq	r5, r0, r4, lsr sl
   184b8:			; <UNDEFINED> instruction: 0x00005ab8

000184bc <flatcc_builder_finalize_aligned_buffer@@Base>:
   184bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   184c0:	mov	r5, r1
   184c4:	strd	r6, [sp, #8]
   184c8:	mov	r6, r0
   184cc:	str	lr, [sp, #16]
   184d0:	sub	sp, sp, #12
   184d4:	bl	182ac <flatcc_builder_get_buffer_size@@Base>
   184d8:	cmp	r5, #0
   184dc:	mov	r4, r0
   184e0:	sub	r4, r4, #1
   184e4:	strne	r0, [r5]
   184e8:	mov	r0, r6
   184ec:	bl	18270 <flatcc_builder_get_buffer_alignment@@Base>
   184f0:	rsb	r3, r0, #0
   184f4:	add	r4, r4, r0
   184f8:	cmp	r0, #4
   184fc:	and	r4, r4, r3
   18500:	mov	r3, #0
   18504:	movcs	r1, r0
   18508:	movcc	r1, #4
   1850c:	mov	r2, r4
   18510:	add	r0, sp, #4
   18514:	str	r3, [sp, #4]
   18518:	bl	12474 <posix_memalign@plt>
   1851c:	cmp	r0, #0
   18520:	beq	1854c <flatcc_builder_finalize_aligned_buffer@@Base+0x90>
   18524:	ldr	r0, [sp, #4]
   18528:	cmp	r0, #0
   1852c:	beq	18534 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   18530:	bl	123fc <free@plt>
   18534:	cmp	r5, #0
   18538:	movne	r3, #0
   1853c:	moveq	r7, r5
   18540:	movne	r7, r3
   18544:	strne	r3, [r5]
   18548:	b	18570 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   1854c:	ldr	r7, [sp, #4]
   18550:	cmp	r7, #0
   18554:	beq	18534 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   18558:	mov	r2, r4
   1855c:	mov	r0, r6
   18560:	mov	r1, r7
   18564:	bl	18394 <flatcc_builder_copy_buffer@@Base>
   18568:	cmp	r0, #0
   1856c:	beq	18588 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   18570:	mov	r0, r7
   18574:	add	sp, sp, #12
   18578:	ldrd	r4, [sp]
   1857c:	ldrd	r6, [sp, #8]
   18580:	add	sp, sp, #16
   18584:	pop	{pc}		; (ldr pc, [sp], #4)
   18588:	mov	r0, r7
   1858c:	b	18530 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>

00018590 <flatcc_builder_aligned_alloc@@Base>:
   18590:	cmp	r0, #4
   18594:	str	r4, [sp, #-8]!
   18598:	mov	r4, #0
   1859c:	str	lr, [sp, #4]
   185a0:	sub	sp, sp, #8
   185a4:	mov	r2, r1
   185a8:	movcs	r1, r0
   185ac:	movcc	r1, #4
   185b0:	add	r0, sp, #4
   185b4:	str	r4, [sp, #4]
   185b8:	bl	12474 <posix_memalign@plt>
   185bc:	cmp	r0, r4
   185c0:	ldr	r0, [sp, #4]
   185c4:	beq	185d8 <flatcc_builder_aligned_alloc@@Base+0x48>
   185c8:	cmp	r0, #0
   185cc:	beq	185d8 <flatcc_builder_aligned_alloc@@Base+0x48>
   185d0:	bl	123fc <free@plt>
   185d4:	mov	r0, r4
   185d8:	add	sp, sp, #8
   185dc:	ldr	r4, [sp]
   185e0:	add	sp, sp, #4
   185e4:	pop	{pc}		; (ldr pc, [sp], #4)

000185e8 <flatcc_builder_aligned_free@@Base>:
   185e8:	b	123fc <free@plt>

000185ec <flatcc_builder_get_emit_context@@Base>:
   185ec:	ldr	r0, [r0, #36]	; 0x24
   185f0:	bx	lr

000185f4 <flatcc_emitter_recycle_page@@Base>:
   185f4:	ldr	r3, [r0]
   185f8:	cmp	r3, r1
   185fc:	beq	18640 <flatcc_emitter_recycle_page@@Base+0x4c>
   18600:	ldr	r2, [r0, #4]
   18604:	cmp	r2, r1
   18608:	beq	18640 <flatcc_emitter_recycle_page@@Base+0x4c>
   1860c:	push	{lr}		; (str lr, [sp, #-4]!)
   18610:	mov	r0, #0
   18614:	ldr	lr, [r1, #2944]	; 0xb80
   18618:	ldr	ip, [r1, #2948]	; 0xb84
   1861c:	str	ip, [lr, #2948]	; 0xb84
   18620:	ldr	r2, [r3, #2948]	; 0xb84
   18624:	str	lr, [ip, #2944]	; 0xb80
   18628:	str	r3, [r1, #2944]	; 0xb80
   1862c:	str	r2, [r1, #2948]	; 0xb84
   18630:	str	r1, [r2, #2944]	; 0xb80
   18634:	ldr	r3, [r1, #2944]	; 0xb80
   18638:	str	r1, [r3, #2948]	; 0xb84
   1863c:	pop	{pc}		; (ldr pc, [sp], #4)
   18640:	mvn	r0, #0
   18644:	bx	lr

00018648 <flatcc_emitter_reset@@Base>:
   18648:	ldr	r2, [r0]
   1864c:	cmp	r2, #0
   18650:	bxeq	lr
   18654:	strd	r4, [sp, #-16]!
   18658:	movw	ip, #64064	; 0xfa40
   1865c:	movt	ip, #65535	; 0xffff
   18660:	ldr	r1, [r0, #24]
   18664:	add	r4, r2, #1472	; 0x5c0
   18668:	ldr	r3, [r0, #32]
   1866c:	ldr	r5, [r0, #28]
   18670:	str	r6, [sp, #8]
   18674:	str	lr, [sp, #12]
   18678:	mov	lr, #1472	; 0x5c0
   1867c:	cmp	r3, #0
   18680:	stmib	r0, {r2, r4}
   18684:	moveq	r3, r1
   18688:	lsr	r1, r1, #2
   1868c:	str	lr, [r0, #12]
   18690:	add	r3, r3, r3, lsl #1
   18694:	str	r4, [r0, #16]
   18698:	str	lr, [r0, #20]
   1869c:	add	r3, r1, r3, lsr #2
   186a0:	str	ip, [r2, #2952]	; 0xb88
   186a4:	mov	ip, #0
   186a8:	cmp	r5, r3, lsl #1
   186ac:	str	ip, [r0, #24]
   186b0:	str	r3, [r0, #32]
   186b4:	bls	1870c <flatcc_emitter_reset@@Base+0xc4>
   186b8:	ldr	r3, [r2, #2944]	; 0xb80
   186bc:	mov	r4, r0
   186c0:	cmp	r2, r3
   186c4:	bne	186dc <flatcc_emitter_reset@@Base+0x94>
   186c8:	b	1870c <flatcc_emitter_reset@@Base+0xc4>
   186cc:	ldm	r4, {r1, r2}
   186d0:	ldr	r3, [r2, #2944]	; 0xb80
   186d4:	cmp	r3, r1
   186d8:	beq	1870c <flatcc_emitter_reset@@Base+0xc4>
   186dc:	ldr	r1, [r3, #2944]	; 0xb80
   186e0:	mov	r0, r3
   186e4:	str	r1, [r2, #2944]	; 0xb80
   186e8:	ldr	r3, [r3, #2944]	; 0xb80
   186ec:	str	r2, [r3, #2948]	; 0xb84
   186f0:	bl	123fc <free@plt>
   186f4:	ldr	r3, [r4, #28]
   186f8:	ldr	r2, [r4, #32]
   186fc:	sub	r3, r3, #2944	; 0xb80
   18700:	cmp	r3, r2, lsl #1
   18704:	str	r3, [r4, #28]
   18708:	bhi	186cc <flatcc_emitter_reset@@Base+0x84>
   1870c:	ldrd	r4, [sp]
   18710:	ldr	r6, [sp, #8]
   18714:	add	sp, sp, #12
   18718:	pop	{pc}		; (ldr pc, [sp], #4)

0001871c <flatcc_emitter_clear@@Base>:
   1871c:	ldr	r3, [r0]
   18720:	cmp	r3, #0
   18724:	bxeq	lr
   18728:	mov	r1, #0
   1872c:	strd	r4, [sp, #-16]!
   18730:	mov	r5, r0
   18734:	ldr	r2, [r3, #2948]	; 0xb84
   18738:	str	r6, [sp, #8]
   1873c:	str	lr, [sp, #12]
   18740:	str	r1, [r2, #2944]	; 0xb80
   18744:	ldr	r4, [r3, #2944]	; 0xb80
   18748:	cmp	r4, r1
   1874c:	bne	18758 <flatcc_emitter_clear@@Base+0x3c>
   18750:	b	18794 <flatcc_emitter_clear@@Base+0x78>
   18754:	mov	r4, r3
   18758:	ldr	r0, [r4, #2948]	; 0xb84
   1875c:	bl	123fc <free@plt>
   18760:	ldr	r3, [r4, #2944]	; 0xb80
   18764:	cmp	r3, #0
   18768:	bne	18754 <flatcc_emitter_clear@@Base+0x38>
   1876c:	mov	r0, r4
   18770:	bl	123fc <free@plt>
   18774:	mov	r0, r5
   18778:	mov	r2, #36	; 0x24
   1877c:	ldrd	r4, [sp]
   18780:	mov	r1, #0
   18784:	ldr	r6, [sp, #8]
   18788:	ldr	lr, [sp, #12]
   1878c:	add	sp, sp, #16
   18790:	b	12480 <memset@plt>
   18794:	mov	r4, r3
   18798:	b	1876c <flatcc_emitter_clear@@Base+0x50>

0001879c <flatcc_emitter@@Base>:
   1879c:	cmp	r3, #0
   187a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   187a4:	mov	r4, r0
   187a8:	ldr	r3, [r0, #24]
   187ac:	strd	r6, [sp, #8]
   187b0:	strd	r8, [sp, #16]
   187b4:	sub	r8, r2, #1
   187b8:	strd	sl, [sp, #24]
   187bc:	str	lr, [sp, #32]
   187c0:	sub	sp, sp, #12
   187c4:	ldr	r0, [sp, #48]	; 0x30
   187c8:	add	r3, r3, r0
   187cc:	str	r3, [r4, #24]
   187d0:	blt	189a0 <flatcc_emitter@@Base+0x204>
   187d4:	ldr	r3, [r4, #20]
   187d8:	cmp	r3, r0
   187dc:	bcs	1887c <flatcc_emitter@@Base+0xe0>
   187e0:	cmp	r2, #0
   187e4:	beq	1885c <flatcc_emitter@@Base+0xc0>
   187e8:	mov	r8, r2
   187ec:	add	r5, r1, #8
   187f0:	movw	r2, #64064	; 0xfa40
   187f4:	movt	r2, #65535	; 0xffff
   187f8:	str	r2, [sp, #4]
   187fc:	ldmdb	r5, {r7, fp}
   18800:	cmp	fp, #0
   18804:	beq	18850 <flatcc_emitter@@Base+0xb4>
   18808:	mov	r9, #1472	; 0x5c0
   1880c:	cmp	fp, r3
   18810:	mov	r6, r3
   18814:	bls	1890c <flatcc_emitter@@Base+0x170>
   18818:	cmp	r3, #0
   1881c:	subne	fp, fp, r3
   18820:	beq	188c4 <flatcc_emitter@@Base+0x128>
   18824:	mov	r2, r6
   18828:	mov	r1, r7
   1882c:	ldr	r0, [r4, #16]
   18830:	bl	12408 <memcpy@plt>
   18834:	ldrd	r2, [r4, #16]
   18838:	cmp	fp, #0
   1883c:	add	r7, r7, r6
   18840:	add	r2, r2, r6
   18844:	sub	r3, r3, r6
   18848:	strd	r2, [r4, #16]
   1884c:	bne	1880c <flatcc_emitter@@Base+0x70>
   18850:	subs	r8, r8, #1
   18854:	add	r5, r5, #8
   18858:	bne	187fc <flatcc_emitter@@Base+0x60>
   1885c:	mov	r0, #0
   18860:	add	sp, sp, #12
   18864:	ldrd	r4, [sp]
   18868:	ldrd	r6, [sp, #8]
   1886c:	ldrd	r8, [sp, #16]
   18870:	ldrd	sl, [sp, #24]
   18874:	add	sp, sp, #32
   18878:	pop	{pc}		; (ldr pc, [sp], #4)
   1887c:	ldr	r7, [r4, #16]
   18880:	sub	r3, r3, r0
   18884:	str	r3, [r4, #20]
   18888:	add	r0, r7, r0
   1888c:	str	r0, [r4, #16]
   18890:	cmp	r2, #0
   18894:	addne	r4, r1, #8
   18898:	beq	1885c <flatcc_emitter@@Base+0xc0>
   1889c:	mov	r0, r7
   188a0:	ldmdb	r4, {r1, r2}
   188a4:	sub	r8, r8, #1
   188a8:	bl	12408 <memcpy@plt>
   188ac:	ldr	r3, [r4, #-4]
   188b0:	cmn	r8, #1
   188b4:	add	r4, r4, #8
   188b8:	add	r7, r7, r3
   188bc:	bne	1889c <flatcc_emitter@@Base+0x100>
   188c0:	b	1885c <flatcc_emitter@@Base+0xc0>
   188c4:	ldr	r6, [r4, #4]
   188c8:	cmp	r6, #0
   188cc:	beq	1894c <flatcc_emitter@@Base+0x1b0>
   188d0:	ldr	sl, [r4]
   188d4:	ldr	r0, [r6, #2944]	; 0xb80
   188d8:	cmp	r0, sl
   188dc:	beq	18918 <flatcc_emitter@@Base+0x17c>
   188e0:	str	r0, [r4, #4]
   188e4:	ldr	r2, [r0, #2948]	; 0xb84
   188e8:	mov	r3, #2944	; 0xb80
   188ec:	cmp	fp, r3
   188f0:	mov	r6, r3
   188f4:	ldr	r2, [r2, #2952]	; 0xb88
   188f8:	str	r0, [r4, #16]
   188fc:	str	r3, [r4, #20]
   18900:	add	r2, r2, r3
   18904:	str	r2, [r0, #2952]	; 0xb88
   18908:	bhi	18818 <flatcc_emitter@@Base+0x7c>
   1890c:	mov	r6, fp
   18910:	mov	fp, #0
   18914:	b	18824 <flatcc_emitter@@Base+0x88>
   18918:	movw	r0, #2956	; 0xb8c
   1891c:	bl	12438 <malloc@plt>
   18920:	cmp	r0, #0
   18924:	beq	18998 <flatcc_emitter@@Base+0x1fc>
   18928:	ldr	r2, [r4, #28]
   1892c:	str	sl, [r0, #2944]	; 0xb80
   18930:	str	r6, [r0, #2948]	; 0xb84
   18934:	add	r2, r2, #2944	; 0xb80
   18938:	str	r2, [r4, #28]
   1893c:	str	r0, [sl, #2948]	; 0xb84
   18940:	str	r0, [r6, #2944]	; 0xb80
   18944:	str	r0, [r4, #4]
   18948:	b	188e4 <flatcc_emitter@@Base+0x148>
   1894c:	movw	r0, #2956	; 0xb8c
   18950:	bl	12438 <malloc@plt>
   18954:	cmp	r0, #0
   18958:	beq	18998 <flatcc_emitter@@Base+0x1fc>
   1895c:	ldr	r2, [r4, #28]
   18960:	add	r1, r0, #1472	; 0x5c0
   18964:	mov	r3, #1472	; 0x5c0
   18968:	str	r0, [r4]
   1896c:	strd	r0, [r4, #4]
   18970:	str	r9, [r4, #12]
   18974:	str	r1, [r4, #16]
   18978:	add	r2, r2, #2944	; 0xb80
   1897c:	str	r9, [r4, #20]
   18980:	str	r0, [r0, #2944]	; 0xb80
   18984:	str	r2, [r4, #28]
   18988:	ldr	r2, [sp, #4]
   1898c:	str	r0, [r0, #2948]	; 0xb84
   18990:	str	r2, [r0, #2952]	; 0xb88
   18994:	b	1880c <flatcc_emitter@@Base+0x70>
   18998:	mvn	r0, #0
   1899c:	b	18860 <flatcc_emitter@@Base+0xc4>
   189a0:	ldr	r3, [r4, #12]
   189a4:	cmp	r3, r0
   189a8:	bcs	18b10 <flatcc_emitter@@Base+0x374>
   189ac:	add	r5, r1, r2, lsl #3
   189b0:	movw	r3, #64064	; 0xfa40
   189b4:	movt	r3, #65535	; 0xffff
   189b8:	str	r3, [sp, #4]
   189bc:	cmn	r8, #1
   189c0:	beq	1885c <flatcc_emitter@@Base+0xc0>
   189c4:	ldr	r7, [r5, #-8]
   189c8:	ldr	r6, [r5, #-4]
   189cc:	cmp	r6, #0
   189d0:	add	r7, r7, r6
   189d4:	beq	18a24 <flatcc_emitter@@Base+0x288>
   189d8:	mov	r9, #1472	; 0x5c0
   189dc:	ldr	r2, [r4, #12]
   189e0:	cmp	r2, r6
   189e4:	bcs	18a88 <flatcc_emitter@@Base+0x2ec>
   189e8:	cmp	r2, #0
   189ec:	beq	18a30 <flatcc_emitter@@Base+0x294>
   189f0:	sub	r6, r6, r2
   189f4:	mov	r1, #0
   189f8:	ldr	r3, [r4, #8]
   189fc:	rsb	r0, r2, #0
   18a00:	add	r7, r7, r0
   18a04:	str	r1, [r4, #12]
   18a08:	mov	r1, r7
   18a0c:	add	r3, r3, r0
   18a10:	mov	r0, r3
   18a14:	str	r3, [r4, #8]
   18a18:	bl	12408 <memcpy@plt>
   18a1c:	cmp	r6, #0
   18a20:	bne	189dc <flatcc_emitter@@Base+0x240>
   18a24:	sub	r5, r5, #8
   18a28:	sub	r8, r8, #1
   18a2c:	b	189bc <flatcc_emitter@@Base+0x220>
   18a30:	ldr	fp, [r4]
   18a34:	cmp	fp, #0
   18a38:	beq	18acc <flatcc_emitter@@Base+0x330>
   18a3c:	ldr	sl, [r4, #4]
   18a40:	ldr	r0, [fp, #2948]	; 0xb84
   18a44:	cmp	r0, sl
   18a48:	beq	18a98 <flatcc_emitter@@Base+0x2fc>
   18a4c:	ldr	r3, [fp, #2952]	; 0xb88
   18a50:	sub	r3, r3, #2944	; 0xb80
   18a54:	str	r3, [r0, #2952]	; 0xb88
   18a58:	str	r0, [r4]
   18a5c:	ldr	r3, [r0, #2944]	; 0xb80
   18a60:	mov	r2, #2944	; 0xb80
   18a64:	add	r1, r0, #2944	; 0xb80
   18a68:	ldr	r3, [r3, #2952]	; 0xb88
   18a6c:	str	r1, [r4, #8]
   18a70:	str	r2, [r4, #12]
   18a74:	sub	r3, r3, #2944	; 0xb80
   18a78:	str	r3, [r0, #2952]	; 0xb88
   18a7c:	ldr	r2, [r4, #12]
   18a80:	cmp	r2, r6
   18a84:	bcc	189e8 <flatcc_emitter@@Base+0x24c>
   18a88:	sub	r1, r2, r6
   18a8c:	mov	r2, r6
   18a90:	mov	r6, #0
   18a94:	b	189f8 <flatcc_emitter@@Base+0x25c>
   18a98:	movw	r0, #2956	; 0xb8c
   18a9c:	bl	12438 <malloc@plt>
   18aa0:	cmp	r0, #0
   18aa4:	beq	18998 <flatcc_emitter@@Base+0x1fc>
   18aa8:	ldr	r2, [r4, #28]
   18aac:	str	fp, [r0, #2944]	; 0xb80
   18ab0:	str	sl, [r0, #2948]	; 0xb84
   18ab4:	add	r2, r2, #2944	; 0xb80
   18ab8:	str	r2, [r4, #28]
   18abc:	str	r0, [fp, #2948]	; 0xb84
   18ac0:	str	r0, [sl, #2944]	; 0xb80
   18ac4:	str	r0, [r4]
   18ac8:	b	18a5c <flatcc_emitter@@Base+0x2c0>
   18acc:	movw	r0, #2956	; 0xb8c
   18ad0:	bl	12438 <malloc@plt>
   18ad4:	cmp	r0, #0
   18ad8:	beq	18998 <flatcc_emitter@@Base+0x1fc>
   18adc:	ldr	r3, [r4, #28]
   18ae0:	add	r2, r0, #1472	; 0x5c0
   18ae4:	str	r0, [r4]
   18ae8:	stmib	r4, {r0, r2, r9}
   18aec:	add	r3, r3, #2944	; 0xb80
   18af0:	str	r2, [r4, #16]
   18af4:	str	r9, [r4, #20]
   18af8:	str	r3, [r4, #28]
   18afc:	ldr	r3, [sp, #4]
   18b00:	str	r0, [r0, #2944]	; 0xb80
   18b04:	str	r0, [r0, #2948]	; 0xb84
   18b08:	str	r3, [r0, #2952]	; 0xb88
   18b0c:	b	189dc <flatcc_emitter@@Base+0x240>
   18b10:	ldr	r7, [r4, #8]
   18b14:	sub	r3, r3, r0
   18b18:	str	r3, [r4, #12]
   18b1c:	sub	r7, r7, r0
   18b20:	str	r7, [r4, #8]
   18b24:	b	18890 <flatcc_emitter@@Base+0xf4>

00018b28 <flatcc_emitter_copy_buffer@@Base>:
   18b28:	ldr	r3, [r0, #24]
   18b2c:	strd	r4, [sp, #-16]!
   18b30:	str	r6, [sp, #8]
   18b34:	str	lr, [sp, #12]
   18b38:	cmp	r3, r2
   18b3c:	movhi	r5, #0
   18b40:	bhi	18bc0 <flatcc_emitter_copy_buffer@@Base+0x98>
   18b44:	ldr	r5, [r0]
   18b48:	mov	r6, r0
   18b4c:	cmp	r5, #0
   18b50:	beq	18bc0 <flatcc_emitter_copy_buffer@@Base+0x98>
   18b54:	ldr	r2, [r6, #4]
   18b58:	mov	r0, r1
   18b5c:	ldr	r1, [r6, #8]
   18b60:	cmp	r5, r2
   18b64:	beq	18bd4 <flatcc_emitter_copy_buffer@@Base+0xac>
   18b68:	ldr	r2, [r6, #12]
   18b6c:	rsb	r2, r2, #2944	; 0xb80
   18b70:	add	r5, r0, r2
   18b74:	bl	12408 <memcpy@plt>
   18b78:	ldrd	r2, [r6]
   18b7c:	ldr	r4, [r2, #2944]	; 0xb80
   18b80:	cmp	r4, r3
   18b84:	beq	18bac <flatcc_emitter_copy_buffer@@Base+0x84>
   18b88:	mov	r2, #2944	; 0xb80
   18b8c:	mov	r1, r4
   18b90:	mov	r0, r5
   18b94:	add	r5, r5, r2
   18b98:	bl	12408 <memcpy@plt>
   18b9c:	ldr	r3, [r6, #4]
   18ba0:	ldr	r4, [r4, #2944]	; 0xb80
   18ba4:	cmp	r3, r4
   18ba8:	bne	18b88 <flatcc_emitter_copy_buffer@@Base+0x60>
   18bac:	ldr	r2, [r6, #20]
   18bb0:	mov	r1, r4
   18bb4:	mov	r0, r5
   18bb8:	rsb	r2, r2, #2944	; 0xb80
   18bbc:	bl	12408 <memcpy@plt>
   18bc0:	mov	r0, r5
   18bc4:	ldrd	r4, [sp]
   18bc8:	ldr	r6, [sp, #8]
   18bcc:	add	sp, sp, #12
   18bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bd4:	mov	r2, r3
   18bd8:	mov	r5, r0
   18bdc:	bl	12408 <memcpy@plt>
   18be0:	b	18bc0 <flatcc_emitter_copy_buffer@@Base+0x98>
   18be4:	andeq	r0, r0, r0
   18be8:	ldr	r3, [pc, #32]	; 18c10 <flatcc_emitter_copy_buffer@@Base+0xe8>
   18bec:	mov	r2, #260	; 0x104
   18bf0:	str	r4, [sp, #-8]!
   18bf4:	ldr	r1, [pc, #24]	; 18c14 <flatcc_emitter_copy_buffer@@Base+0xec>
   18bf8:	str	lr, [sp, #4]
   18bfc:	ldr	r0, [pc, #20]	; 18c18 <flatcc_emitter_copy_buffer@@Base+0xf0>
   18c00:	add	r3, pc, r3
   18c04:	add	r1, pc, r1
   18c08:	add	r0, pc, r0
   18c0c:	bl	124b0 <__assert_fail@plt>
   18c10:	strdeq	r5, [r0], -r0
   18c14:	strdeq	r5, [r0], -r8
   18c18:	andeq	r5, r0, r4, ror #30

00018c1c <grisu3_diy_fp_encode_double@@Base>:
   18c1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18c20:	sub	r2, r2, r3
   18c24:	strd	r6, [sp, #8]
   18c28:	strd	r8, [sp, #16]
   18c2c:	strd	sl, [sp, #24]
   18c30:	str	lr, [sp, #32]
   18c34:	sub	sp, sp, #52	; 0x34
   18c38:	ldr	lr, [sp, #88]	; 0x58
   18c3c:	strd	r0, [sp]
   18c40:	cmp	lr, #0
   18c44:	movne	lr, #4
   18c48:	orrs	r1, r0, r1
   18c4c:	beq	190f4 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   18c50:	ldr	r1, [sp, #4]
   18c54:	mov	ip, #0
   18c58:	mov	r6, ip
   18c5c:	mov	r4, ip
   18c60:	movt	r6, #65472	; 0xffc0
   18c64:	and	r5, r1, r6
   18c68:	orrs	r1, r4, r5
   18c6c:	bne	18cb4 <grisu3_diy_fp_encode_double@@Base+0x98>
   18c70:	ldrd	r0, [sp]
   18c74:	mov	r5, ip
   18c78:	mvn	r7, #9
   18c7c:	str	r6, [sp, #8]
   18c80:	lsl	r4, r1, #10
   18c84:	mov	sl, r5
   18c88:	mov	ip, r7
   18c8c:	lsl	r6, r0, #10
   18c90:	sub	r7, r7, #10
   18c94:	orr	r4, r4, r0, lsr #22
   18c98:	mov	r0, r6
   18c9c:	mov	r1, r4
   18ca0:	ldr	r4, [sp, #8]
   18ca4:	and	fp, r1, r4
   18ca8:	orrs	r4, sl, fp
   18cac:	beq	18c80 <grisu3_diy_fp_encode_double@@Base+0x64>
   18cb0:	strd	r0, [sp]
   18cb4:	ldrd	r6, [sp]
   18cb8:	cmp	r6, #0
   18cbc:	sbcs	r1, r7, #0
   18cc0:	blt	18cf0 <grisu3_diy_fp_encode_double@@Base+0xd4>
   18cc4:	sub	r4, ip, #1
   18cc8:	mov	r0, r6
   18ccc:	mov	r1, r7
   18cd0:	adds	r0, r0, r0
   18cd4:	mov	ip, r4
   18cd8:	adc	r1, r1, r1
   18cdc:	cmp	r0, #0
   18ce0:	sbcs	r5, r1, #0
   18ce4:	sub	r4, r4, #1
   18ce8:	bge	18cd0 <grisu3_diy_fp_encode_double@@Base+0xb4>
   18cec:	strd	r0, [sp]
   18cf0:	rsb	r4, ip, #0
   18cf4:	cmn	r2, #348	; 0x15c
   18cf8:	lsl	fp, lr, r4
   18cfc:	blt	19154 <grisu3_diy_fp_encode_double@@Base+0x538>
   18d00:	cmp	r2, #348	; 0x15c
   18d04:	bge	19114 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   18d08:	ldr	r4, [pc, #1228]	; 191dc <grisu3_diy_fp_encode_double@@Base+0x5c0>
   18d0c:	add	lr, r2, #348	; 0x15c
   18d10:	asr	lr, lr, #3
   18d14:	add	r4, pc, r4
   18d18:	add	lr, r4, lr, lsl #4
   18d1c:	ldrsh	r1, [lr, #64]	; 0x40
   18d20:	ldrsh	r5, [lr, #66]	; 0x42
   18d24:	str	r1, [sp, #32]
   18d28:	ldr	r1, [lr, #56]	; 0x38
   18d2c:	cmp	r2, r5
   18d30:	str	r1, [sp, #8]
   18d34:	ldr	r1, [lr, #60]	; 0x3c
   18d38:	str	r1, [sp, #36]	; 0x24
   18d3c:	blt	19138 <grisu3_diy_fp_encode_double@@Base+0x51c>
   18d40:	add	lr, r5, #7
   18d44:	cmp	r2, lr
   18d48:	bgt	190f8 <grisu3_diy_fp_encode_double@@Base+0x4dc>
   18d4c:	cmp	r2, r5
   18d50:	beq	18df0 <grisu3_diy_fp_encode_double@@Base+0x1d4>
   18d54:	sub	r2, r2, r5
   18d58:	sub	r2, r2, #1
   18d5c:	cmp	r2, #6
   18d60:	bhi	19178 <grisu3_diy_fp_encode_double@@Base+0x55c>
   18d64:	ldr	r4, [pc, #1140]	; 191e0 <grisu3_diy_fp_encode_double@@Base+0x5c4>
   18d68:	add	r3, r3, #1
   18d6c:	mov	lr, #0
   18d70:	add	r0, r3, r2
   18d74:	add	r4, pc, r4
   18d78:	add	r3, r4, r2, lsl #4
   18d7c:	ldr	r2, [r4, r2, lsl #4]
   18d80:	ldrd	r4, [sp]
   18d84:	ldmib	r3, {r1, sl}
   18d88:	umull	r6, r7, r5, r2
   18d8c:	umull	r2, r3, r4, r2
   18d90:	ldr	r2, [sp]
   18d94:	add	ip, ip, sl
   18d98:	mov	r5, r7
   18d9c:	add	ip, ip, #64	; 0x40
   18da0:	adds	r4, r3, r6
   18da4:	adc	sl, lr, lr
   18da8:	adds	r4, r4, #-2147483648	; 0x80000000
   18dac:	umull	r6, r7, r2, r1
   18db0:	adc	sl, sl, lr
   18db4:	adds	r4, r4, r6
   18db8:	mov	r6, lr
   18dbc:	adc	sl, sl, lr
   18dc0:	adds	r3, r5, r7
   18dc4:	str	r3, [sp, #16]
   18dc8:	adc	r3, lr, lr
   18dcc:	ldr	lr, [sp, #4]
   18dd0:	str	r3, [sp, #20]
   18dd4:	ldrd	r2, [sp, #16]
   18dd8:	umlal	r2, r3, r1, lr
   18ddc:	adds	r1, sl, r2
   18de0:	adc	r3, r6, r3
   18de4:	cmp	r0, #19
   18de8:	addgt	fp, fp, #4
   18dec:	stm	sp, {r1, r3}
   18df0:	ldrd	r0, [sp]
   18df4:	mov	lr, #0
   18df8:	ldr	r2, [sp, #8]
   18dfc:	umull	r2, r3, r1, r2
   18e00:	mov	r1, r0
   18e04:	strd	r2, [sp, #16]
   18e08:	mov	r2, r0
   18e0c:	ldr	r0, [sp, #8]
   18e10:	ldr	r3, [sp, #32]
   18e14:	umull	r0, r1, r1, r0
   18e18:	add	ip, ip, r3
   18e1c:	mov	r3, r2
   18e20:	ldr	r2, [sp, #16]
   18e24:	strd	r0, [sp, #8]
   18e28:	add	r5, ip, #64	; 0x40
   18e2c:	ldr	r0, [sp, #12]
   18e30:	ldr	r1, [sp, #36]	; 0x24
   18e34:	adds	r2, r0, r2
   18e38:	adc	r4, lr, lr
   18e3c:	adds	r2, r2, #-2147483648	; 0x80000000
   18e40:	umull	r6, r7, r3, r1
   18e44:	ldr	r3, [sp, #20]
   18e48:	adc	r4, r4, lr
   18e4c:	adds	r2, r2, r6
   18e50:	ldr	r2, [sp, #4]
   18e54:	adc	r4, r4, lr
   18e58:	adds	r3, r3, r7
   18e5c:	str	r3, [sp, #24]
   18e60:	adc	r3, lr, lr
   18e64:	str	r3, [sp, #28]
   18e68:	ldrd	r6, [sp, #24]
   18e6c:	umlal	r6, r7, r1, r2
   18e70:	adds	r8, r4, r6
   18e74:	adc	r9, lr, r7
   18e78:	cmp	fp, lr
   18e7c:	movne	r2, #9
   18e80:	moveq	r2, #8
   18e84:	orrs	r3, r8, r9
   18e88:	add	r2, fp, r2
   18e8c:	beq	190f4 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   18e90:	mov	r3, lr
   18e94:	mov	r6, lr
   18e98:	movt	r3, #65472	; 0xffc0
   18e9c:	and	r7, r9, r3
   18ea0:	orrs	r1, r6, r7
   18ea4:	bne	190dc <grisu3_diy_fp_encode_double@@Base+0x4c0>
   18ea8:	add	ip, ip, #54	; 0x36
   18eac:	mov	r1, r3
   18eb0:	mov	r7, r5
   18eb4:	lsl	r0, r9, #10
   18eb8:	mov	r4, lr
   18ebc:	mov	r3, ip
   18ec0:	lsl	r6, r8, #10
   18ec4:	sub	ip, ip, #10
   18ec8:	orr	r0, r0, r8, lsr #22
   18ecc:	mov	r8, r6
   18ed0:	and	r5, r0, r1
   18ed4:	mov	r9, r0
   18ed8:	orrs	r0, r4, r5
   18edc:	beq	18eb4 <grisu3_diy_fp_encode_double@@Base+0x298>
   18ee0:	mov	r5, r7
   18ee4:	cmp	r8, #0
   18ee8:	sbcs	r1, r9, #0
   18eec:	blt	18f10 <grisu3_diy_fp_encode_double@@Base+0x2f4>
   18ef0:	sub	r1, r3, #1
   18ef4:	adds	r8, r8, r8
   18ef8:	mov	r3, r1
   18efc:	adc	r9, r9, r9
   18f00:	cmp	r8, #0
   18f04:	sbcs	r0, r9, #0
   18f08:	sub	r1, r1, #1
   18f0c:	bge	18ef4 <grisu3_diy_fp_encode_double@@Base+0x2d8>
   18f10:	movw	r1, #64526	; 0xfc0e
   18f14:	movt	r1, #65535	; 0xffff
   18f18:	add	r0, r3, #64	; 0x40
   18f1c:	sub	r5, r5, r3
   18f20:	cmp	r0, r1
   18f24:	lsl	r2, r2, r5
   18f28:	blt	19068 <grisu3_diy_fp_encode_double@@Base+0x44c>
   18f2c:	add	ip, r2, #4
   18f30:	mov	r1, #4
   18f34:	cmp	ip, #0
   18f38:	mov	r0, #0
   18f3c:	bgt	18f88 <grisu3_diy_fp_encode_double@@Base+0x36c>
   18f40:	adds	r8, r8, #1
   18f44:	mov	r4, #0
   18f48:	adc	r9, r9, #0
   18f4c:	and	r5, r9, #2097152	; 0x200000
   18f50:	orrs	lr, r4, r5
   18f54:	beq	18f70 <grisu3_diy_fp_encode_double@@Base+0x354>
   18f58:	lsr	lr, r8, #1
   18f5c:	add	r3, r3, #1
   18f60:	lsr	r4, r9, #1
   18f64:	orr	lr, lr, r9, lsl #31
   18f68:	mov	r9, r4
   18f6c:	mov	r8, lr
   18f70:	movw	r5, #65535	; 0xffff
   18f74:	movt	r5, #31
   18f78:	mvn	r4, #0
   18f7c:	cmp	r9, r5
   18f80:	cmpeq	r8, r4
   18f84:	bls	18fc0 <grisu3_diy_fp_encode_double@@Base+0x3a4>
   18f88:	movw	r5, #65535	; 0xffff
   18f8c:	movt	r5, #31
   18f90:	add	r6, r3, #1
   18f94:	mvn	r4, #0
   18f98:	lsr	lr, r8, #1
   18f9c:	mov	r3, r6
   18fa0:	add	r6, r6, #1
   18fa4:	lsr	r7, r9, #1
   18fa8:	orr	lr, lr, r9, lsl #31
   18fac:	cmp	r7, r5
   18fb0:	mov	r9, r7
   18fb4:	cmpeq	lr, r4
   18fb8:	mov	r8, lr
   18fbc:	bhi	18f98 <grisu3_diy_fp_encode_double@@Base+0x37c>
   18fc0:	movw	lr, #64462	; 0xfbce
   18fc4:	movt	lr, #65535	; 0xffff
   18fc8:	cmp	r3, lr
   18fcc:	mov	r6, #0
   18fd0:	movlt	r7, #0
   18fd4:	blt	19030 <grisu3_diy_fp_encode_double@@Base+0x414>
   18fd8:	mov	r4, r6
   18fdc:	and	r5, r9, #1048576	; 0x100000
   18fe0:	beq	19018 <grisu3_diy_fp_encode_double@@Base+0x3fc>
   18fe4:	orrs	r7, r4, r5
   18fe8:	beq	18ffc <grisu3_diy_fp_encode_double@@Base+0x3e0>
   18fec:	b	190e4 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   18ff0:	orrs	sl, r4, r5
   18ff4:	bne	190c4 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   18ff8:	mov	r3, r7
   18ffc:	adds	r8, r8, r8
   19000:	sub	r7, r3, #1
   19004:	adc	r9, r9, r9
   19008:	cmp	r7, lr
   1900c:	mov	r4, r6
   19010:	and	r5, r9, #1048576	; 0x100000
   19014:	bne	18ff0 <grisu3_diy_fp_encode_double@@Base+0x3d4>
   19018:	orrs	r3, r4, r5
   1901c:	movne	r4, #0
   19020:	movne	r5, #1048576	; 0x100000
   19024:	ubfx	r3, r9, #0, #20
   19028:	orr	r6, r8, r4
   1902c:	orr	r7, r3, r5
   19030:	ldr	r3, [sp, #92]	; 0x5c
   19034:	sub	r2, r1, r2
   19038:	cmp	r0, ip
   1903c:	cmplt	r2, r0
   19040:	movge	r0, #1
   19044:	movlt	r0, #0
   19048:	strd	r6, [r3]
   1904c:	add	sp, sp, #52	; 0x34
   19050:	ldrd	r4, [sp]
   19054:	ldrd	r6, [sp, #8]
   19058:	ldrd	r8, [sp, #16]
   1905c:	ldrd	sl, [sp, #24]
   19060:	add	sp, sp, #32
   19064:	pop	{pc}		; (ldr pc, [sp], #4)
   19068:	mvn	r1, #1072	; 0x430
   1906c:	cmp	r0, r1
   19070:	blt	190d4 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   19074:	add	r0, r3, #1136	; 0x470
   19078:	add	r0, r0, #2
   1907c:	rsb	lr, r0, #64	; 0x40
   19080:	cmp	lr, #60	; 0x3c
   19084:	rsbgt	r0, r0, #2
   19088:	ble	19198 <grisu3_diy_fp_encode_double@@Base+0x57c>
   1908c:	asr	r2, r2, r0
   19090:	add	r3, r3, r0
   19094:	mov	lr, #62	; 0x3e
   19098:	lsr	r1, r9, r0
   1909c:	mov	r9, #0
   190a0:	add	r3, r3, #62	; 0x3e
   190a4:	add	r2, r2, #9
   190a8:	mov	r0, r9
   190ac:	lsr	r8, r1, #30
   190b0:	mov	ip, r2
   190b4:	mov	r1, r9
   190b8:	cmp	lr, ip
   190bc:	blt	18f70 <grisu3_diy_fp_encode_double@@Base+0x354>
   190c0:	b	18f40 <grisu3_diy_fp_encode_double@@Base+0x324>
   190c4:	add	r3, r3, #1072	; 0x430
   190c8:	add	r3, r3, #2
   190cc:	lsl	r5, r3, #20
   190d0:	b	19024 <grisu3_diy_fp_encode_double@@Base+0x408>
   190d4:	mov	r0, #2
   190d8:	b	1908c <grisu3_diy_fp_encode_double@@Base+0x470>
   190dc:	mov	r3, r5
   190e0:	b	18ee4 <grisu3_diy_fp_encode_double@@Base+0x2c8>
   190e4:	add	r3, r3, #1072	; 0x430
   190e8:	add	r3, r3, #3
   190ec:	lsl	r5, r3, #20
   190f0:	b	19024 <grisu3_diy_fp_encode_double@@Base+0x408>
   190f4:	bl	18be8 <flatcc_emitter_copy_buffer@@Base+0xc0>
   190f8:	ldr	r1, [pc, #228]	; 191e4 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   190fc:	add	r3, r4, #24
   19100:	mov	r2, #89	; 0x59
   19104:	ldr	r0, [pc, #220]	; 191e8 <grisu3_diy_fp_encode_double@@Base+0x5cc>
   19108:	add	r1, pc, r1
   1910c:	add	r0, pc, r0
   19110:	bl	124b0 <__assert_fail@plt>
   19114:	ldr	r3, [pc, #208]	; 191ec <grisu3_diy_fp_encode_double@@Base+0x5d0>
   19118:	mov	r2, #81	; 0x51
   1911c:	ldr	r1, [pc, #204]	; 191f0 <grisu3_diy_fp_encode_double@@Base+0x5d4>
   19120:	ldr	r0, [pc, #204]	; 191f4 <grisu3_diy_fp_encode_double@@Base+0x5d8>
   19124:	add	r3, pc, r3
   19128:	add	r3, r3, #24
   1912c:	add	r1, pc, r1
   19130:	add	r0, pc, r0
   19134:	bl	124b0 <__assert_fail@plt>
   19138:	ldr	r1, [pc, #184]	; 191f8 <grisu3_diy_fp_encode_double@@Base+0x5dc>
   1913c:	add	r3, r4, #24
   19140:	mov	r2, #88	; 0x58
   19144:	ldr	r0, [pc, #176]	; 191fc <grisu3_diy_fp_encode_double@@Base+0x5e0>
   19148:	add	r1, pc, r1
   1914c:	add	r0, pc, r0
   19150:	bl	124b0 <__assert_fail@plt>
   19154:	ldr	r3, [pc, #164]	; 19200 <grisu3_diy_fp_encode_double@@Base+0x5e4>
   19158:	mov	r2, #80	; 0x50
   1915c:	ldr	r1, [pc, #160]	; 19204 <grisu3_diy_fp_encode_double@@Base+0x5e8>
   19160:	ldr	r0, [pc, #160]	; 19208 <grisu3_diy_fp_encode_double@@Base+0x5ec>
   19164:	add	r3, pc, r3
   19168:	add	r3, r3, #24
   1916c:	add	r1, pc, r1
   19170:	add	r0, pc, r0
   19174:	bl	124b0 <__assert_fail@plt>
   19178:	ldr	r1, [pc, #140]	; 1920c <grisu3_diy_fp_encode_double@@Base+0x5f0>
   1917c:	add	r3, r4, #1440	; 0x5a0
   19180:	mov	r2, #185	; 0xb9
   19184:	add	r3, r3, #8
   19188:	ldr	r0, [pc, #128]	; 19210 <grisu3_diy_fp_encode_double@@Base+0x5f4>
   1918c:	add	r1, pc, r1
   19190:	add	r0, pc, r0
   19194:	bl	124b0 <__assert_fail@plt>
   19198:	lsr	ip, r8, lr
   1919c:	rsb	r1, lr, #32
   191a0:	rsb	r0, r0, #63	; 0x3f
   191a4:	sub	r5, lr, #32
   191a8:	mov	r4, #1
   191ac:	orr	ip, ip, r9, lsl r1
   191b0:	mov	r1, #8
   191b4:	add	r3, r3, lr
   191b8:	and	r4, r8, r4, lsl r0
   191bc:	orr	ip, ip, r9, lsr r5
   191c0:	lsl	r1, r1, r0
   191c4:	lsr	r5, r9, lr
   191c8:	mov	r8, ip
   191cc:	lsl	r0, r4, #3
   191d0:	add	ip, r2, r1
   191d4:	mov	r9, r5
   191d8:	b	190b8 <grisu3_diy_fp_encode_double@@Base+0x49c>
   191dc:	ldrdeq	r5, [r0], -ip
   191e0:	strdeq	r7, [r1], -r4
   191e4:	andeq	r5, r0, r0, ror sl
   191e8:	andeq	r5, r0, r8, lsr fp
   191ec:	andeq	r5, r0, ip, asr #3
   191f0:	andeq	r5, r0, ip, asr #20
   191f4:	ldrdeq	r5, [r0], -r8
   191f8:	andeq	r5, r0, r0, lsr sl
   191fc:	andeq	r5, r0, r8, ror #21
   19200:	andeq	r5, r0, ip, lsl #3
   19204:	andeq	r5, r0, ip, lsl #20
   19208:	andeq	r5, r0, r8, ror sl
   1920c:	andeq	r5, r0, ip, ror #19
   19210:	ldrdeq	r5, [r0], -r0
   19214:	cmp	r1, #1000	; 0x3e8
   19218:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1921c:	mov	r4, #0
   19220:	addgt	ip, r0, #1000	; 0x3e8
   19224:	addle	r1, r1, #1
   19228:	strd	r6, [sp, #8]
   1922c:	addle	ip, r0, r1
   19230:	addgt	ip, ip, #1
   19234:	strd	r8, [sp, #16]
   19238:	mov	r5, #0
   1923c:	strd	sl, [sp, #24]
   19240:	cmp	ip, r0
   19244:	str	lr, [sp, #32]
   19248:	sub	sp, sp, #52	; 0x34
   1924c:	moveq	r6, ip
   19250:	strd	r4, [r2]
   19254:	str	r2, [sp, #16]
   19258:	beq	193f0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   1925c:	ldrb	r4, [r0]
   19260:	cmp	r4, #45	; 0x2d
   19264:	beq	194e8 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   19268:	cmp	r4, #48	; 0x30
   1926c:	beq	19410 <grisu3_diy_fp_encode_double@@Base+0x7f4>
   19270:	sub	r3, r4, #49	; 0x31
   19274:	cmp	r3, #8
   19278:	bhi	19598 <grisu3_diy_fp_encode_double@@Base+0x97c>
   1927c:	mov	r2, #0
   19280:	mov	r3, r0
   19284:	str	r2, [sp, #20]
   19288:	add	r7, r3, #1
   1928c:	sub	r4, r4, #48	; 0x30
   19290:	cmp	ip, r7
   19294:	asr	r5, r4, #31
   19298:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   1929c:	ldrb	r1, [r3, #1]
   192a0:	sub	r3, r1, #48	; 0x30
   192a4:	cmp	r3, #9
   192a8:	movhi	sl, #0
   192ac:	movhi	lr, sl
   192b0:	bhi	19be8 <grisu3_diy_fp_encode_double@@Base+0xfcc>
   192b4:	add	fp, pc, #996	; 0x3e4
   192b8:	ldrd	sl, [fp]
   192bc:	add	lr, r7, #1
   192c0:	b	192d0 <grisu3_diy_fp_encode_double@@Base+0x6b4>
   192c4:	cmp	r5, fp
   192c8:	cmpeq	r4, sl
   192cc:	bhi	19468 <grisu3_diy_fp_encode_double@@Base+0x84c>
   192d0:	lsl	r2, r5, #2
   192d4:	mov	r6, lr
   192d8:	lsl	r3, r4, #2
   192dc:	orr	r2, r2, r4, lsr #30
   192e0:	adds	r3, r3, r4
   192e4:	adc	r2, r2, r5
   192e8:	adds	r8, r3, r3
   192ec:	adc	r9, r2, r2
   192f0:	adds	r2, r8, r1
   192f4:	adc	r3, r9, #0
   192f8:	subs	r4, r2, #48	; 0x30
   192fc:	sbc	r5, r3, #0
   19300:	cmp	ip, lr
   19304:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19308:	ldrb	r1, [lr]
   1930c:	add	lr, lr, #1
   19310:	sub	r3, r1, #48	; 0x30
   19314:	cmp	r3, #9
   19318:	bls	192c4 <grisu3_diy_fp_encode_double@@Base+0x6a8>
   1931c:	mov	lr, #0
   19320:	sub	sl, r6, r7
   19324:	mov	r7, lr
   19328:	sub	r3, r1, #49	; 0x31
   1932c:	cmp	r3, #8
   19330:	bls	19528 <grisu3_diy_fp_encode_double@@Base+0x90c>
   19334:	cmp	r1, #46	; 0x2e
   19338:	beq	195a0 <grisu3_diy_fp_encode_double@@Base+0x984>
   1933c:	orr	r1, r1, #32
   19340:	add	r7, r7, sl
   19344:	cmp	r1, #101	; 0x65
   19348:	beq	19758 <grisu3_diy_fp_encode_double@@Base+0xb3c>
   1934c:	orrs	r3, r4, r5
   19350:	mov	r9, r0
   19354:	ldr	r8, [sp, #16]
   19358:	moveq	r2, #1
   1935c:	movne	r2, #0
   19360:	cmn	r7, #324	; 0x144
   19364:	movge	r3, #0
   19368:	movlt	r3, #1
   1936c:	orrs	r3, r2, r3
   19370:	bne	194cc <grisu3_diy_fp_encode_double@@Base+0x8b0>
   19374:	movw	r3, #310	; 0x136
   19378:	cmp	r7, r3
   1937c:	bgt	19578 <grisu3_diy_fp_encode_double@@Base+0x95c>
   19380:	movw	r3, #65535	; 0xffff
   19384:	movt	r3, #31
   19388:	cmp	r5, r3
   1938c:	mvn	r2, #0
   19390:	cmpeq	r4, r2
   19394:	movls	r3, #1
   19398:	movhi	r3, #0
   1939c:	cmp	r7, #22
   193a0:	movhi	r3, #0
   193a4:	andls	r3, r3, #1
   193a8:	cmp	r3, #0
   193ac:	bne	19874 <grisu3_diy_fp_encode_double@@Base+0xc58>
   193b0:	mov	r3, sl
   193b4:	mov	r2, r7
   193b8:	str	lr, [sp]
   193bc:	mov	r0, r4
   193c0:	mov	r1, r5
   193c4:	str	r8, [sp, #4]
   193c8:	bl	18c1c <grisu3_diy_fp_encode_double@@Base>
   193cc:	cmp	r0, #0
   193d0:	bne	194cc <grisu3_diy_fp_encode_double@@Base+0x8b0>
   193d4:	mov	r0, r9
   193d8:	add	r1, sp, #44	; 0x2c
   193dc:	bl	1248c <strtod@plt>
   193e0:	ldr	r3, [sp, #44]	; 0x2c
   193e4:	vstr	d0, [r8]
   193e8:	cmp	r6, r3
   193ec:	movcs	r6, r3
   193f0:	mov	r0, r6
   193f4:	add	sp, sp, #52	; 0x34
   193f8:	ldrd	r4, [sp]
   193fc:	ldrd	r6, [sp, #8]
   19400:	ldrd	r8, [sp, #16]
   19404:	ldrd	sl, [sp, #24]
   19408:	add	sp, sp, #32
   1940c:	pop	{pc}		; (ldr pc, [sp], #4)
   19410:	mov	r2, #0
   19414:	mov	r3, r0
   19418:	str	r2, [sp, #20]
   1941c:	add	r7, r3, #1
   19420:	cmp	ip, r7
   19424:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19428:	ldrb	r1, [r3, #1]
   1942c:	orr	r2, r1, #32
   19430:	cmp	r2, #120	; 0x78
   19434:	beq	19598 <grisu3_diy_fp_encode_double@@Base+0x97c>
   19438:	cmp	r1, #48	; 0x30
   1943c:	addeq	r3, r3, #2
   19440:	beq	19454 <grisu3_diy_fp_encode_double@@Base+0x838>
   19444:	b	197fc <grisu3_diy_fp_encode_double@@Base+0xbe0>
   19448:	ldrb	r1, [r3], #1
   1944c:	cmp	r1, #48	; 0x30
   19450:	bne	197fc <grisu3_diy_fp_encode_double@@Base+0xbe0>
   19454:	cmp	r3, ip
   19458:	mov	r7, r3
   1945c:	bne	19448 <grisu3_diy_fp_encode_double@@Base+0x82c>
   19460:	mov	r6, #0
   19464:	b	193f0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   19468:	cmp	r1, #52	; 0x34
   1946c:	sub	sl, r6, r7
   19470:	movls	r3, #0
   19474:	movhi	r3, #1
   19478:	adds	r4, r4, r3
   1947c:	adc	r5, r5, #0
   19480:	cmp	r1, #48	; 0x30
   19484:	movne	r7, r6
   19488:	movne	lr, #1
   1948c:	bne	19be8 <grisu3_diy_fp_encode_double@@Base+0xfcc>
   19490:	add	r3, r6, #1
   19494:	mov	r7, #0
   19498:	b	194ac <grisu3_diy_fp_encode_double@@Base+0x890>
   1949c:	ldrb	r1, [r3]
   194a0:	add	r3, r3, #1
   194a4:	cmp	r1, #48	; 0x30
   194a8:	bne	19518 <grisu3_diy_fp_encode_double@@Base+0x8fc>
   194ac:	cmp	ip, r3
   194b0:	mov	r6, r3
   194b4:	add	r7, r7, #1
   194b8:	bne	1949c <grisu3_diy_fp_encode_double@@Base+0x880>
   194bc:	b	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   194c0:	vldr	d6, [pc, #480]	; 196a8 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   194c4:	vmul.f64	d7, d7, d6
   194c8:	vstr	d7, [r8]
   194cc:	ldr	r3, [sp, #20]
   194d0:	cmp	r3, #0
   194d4:	beq	193f0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   194d8:	vldr	d7, [r8]
   194dc:	vneg.f64	d7, d7
   194e0:	vstr	d7, [r8]
   194e4:	b	193f0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   194e8:	add	r3, r0, #1
   194ec:	cmp	ip, r3
   194f0:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   194f4:	ldrb	r4, [r0, #1]
   194f8:	cmp	r4, #48	; 0x30
   194fc:	beq	1958c <grisu3_diy_fp_encode_double@@Base+0x970>
   19500:	sub	r2, r4, #49	; 0x31
   19504:	cmp	r2, #8
   19508:	bhi	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   1950c:	mov	r2, #1
   19510:	str	r2, [sp, #20]
   19514:	b	19288 <grisu3_diy_fp_encode_double@@Base+0x66c>
   19518:	sub	r3, r1, #49	; 0x31
   1951c:	mov	lr, #1
   19520:	cmp	r3, #8
   19524:	bhi	19334 <grisu3_diy_fp_encode_double@@Base+0x718>
   19528:	add	r3, r6, #1
   1952c:	add	lr, r7, #1
   19530:	cmp	ip, r3
   19534:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19538:	ldrb	r1, [r6, #1]
   1953c:	sub	r2, r1, #48	; 0x30
   19540:	cmp	r2, #9
   19544:	bhi	19bcc <grisu3_diy_fp_encode_double@@Base+0xfb0>
   19548:	sub	r8, r7, r6
   1954c:	add	r3, r6, #2
   19550:	cmp	ip, r3
   19554:	add	r7, r8, r3
   19558:	mov	r6, r3
   1955c:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19560:	ldrb	r1, [r3], #1
   19564:	sub	r2, r1, #48	; 0x30
   19568:	cmp	r2, #9
   1956c:	bls	19550 <grisu3_diy_fp_encode_double@@Base+0x934>
   19570:	mov	lr, #1
   19574:	b	19334 <grisu3_diy_fp_encode_double@@Base+0x718>
   19578:	mov	r2, #0
   1957c:	mov	r3, #0
   19580:	movt	r3, #32752	; 0x7ff0
   19584:	strd	r2, [r8]
   19588:	b	194cc <grisu3_diy_fp_encode_double@@Base+0x8b0>
   1958c:	mov	r2, #1
   19590:	str	r2, [sp, #20]
   19594:	b	1941c <grisu3_diy_fp_encode_double@@Base+0x800>
   19598:	mov	r6, r0
   1959c:	b	193f0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   195a0:	ldrb	r9, [r6, #1]
   195a4:	add	fp, r6, #1
   195a8:	sub	r3, r9, #48	; 0x30
   195ac:	cmp	r3, #9
   195b0:	bhi	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   195b4:	cmp	ip, fp
   195b8:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   195bc:	add	r3, pc, #220	; 0xdc
   195c0:	ldrd	r2, [r3]
   195c4:	cmp	r5, r3
   195c8:	cmpeq	r4, r2
   195cc:	bhi	19bd8 <grisu3_diy_fp_encode_double@@Base+0xfbc>
   195d0:	add	r7, r6, r7
   195d4:	add	r6, r6, #2
   195d8:	strd	r2, [sp, #8]
   195dc:	add	r1, r7, #1
   195e0:	str	fp, [sp, #24]
   195e4:	mov	fp, r6
   195e8:	str	r0, [sp, #28]
   195ec:	b	19600 <grisu3_diy_fp_encode_double@@Base+0x9e4>
   195f0:	ldrd	r2, [sp, #8]
   195f4:	cmp	r5, r3
   195f8:	cmpeq	r4, r2
   195fc:	bhi	19b8c <grisu3_diy_fp_encode_double@@Base+0xf70>
   19600:	lsl	r2, r5, #2
   19604:	mov	r8, fp
   19608:	sub	r0, r1, fp
   1960c:	lsl	r3, r4, #2
   19610:	orr	r2, r2, r4, lsr #30
   19614:	adds	r3, r3, r4
   19618:	adc	r2, r2, r5
   1961c:	adds	r6, r3, r3
   19620:	adc	r7, r2, r2
   19624:	adds	r2, r6, r9
   19628:	adc	r3, r7, #0
   1962c:	subs	r4, r2, #48	; 0x30
   19630:	sbc	r5, r3, #0
   19634:	cmp	ip, fp
   19638:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   1963c:	ldrb	r9, [fp]
   19640:	add	fp, fp, #1
   19644:	sub	r3, r9, #48	; 0x30
   19648:	cmp	r3, #9
   1964c:	bls	195f0 <grisu3_diy_fp_encode_double@@Base+0x9d4>
   19650:	ldr	fp, [sp, #24]
   19654:	mov	r7, r0
   19658:	ldr	r0, [sp, #28]
   1965c:	sub	fp, r8, fp
   19660:	add	sl, sl, fp
   19664:	ldrb	r1, [r8]
   19668:	cmp	r1, #48	; 0x30
   1966c:	bne	19808 <grisu3_diy_fp_encode_double@@Base+0xbec>
   19670:	sub	r3, r7, r8
   19674:	add	r8, r8, #1
   19678:	b	19688 <grisu3_diy_fp_encode_double@@Base+0xa6c>
   1967c:	ldrb	r1, [r8], #1
   19680:	cmp	r1, #48	; 0x30
   19684:	bne	1980c <grisu3_diy_fp_encode_double@@Base+0xbf0>
   19688:	cmp	ip, r8
   1968c:	add	r7, r3, r8
   19690:	mov	r6, r8
   19694:	bne	1967c <grisu3_diy_fp_encode_double@@Base+0xa60>
   19698:	b	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   1969c:	nop	{0}
   196a0:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   196a4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   196a8:	usatle	lr, #2, r0, asr #30
   196ac:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   196b0:	ldmvc	r5!, {r6, sl, fp, pc}
   196b4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   196b8:	addsvs	r3, r1, r0, lsl #26
   196bc:	mvnmi	r5, #228, 16	; 0xe40000
   196c0:	strbvs	ip, [lr, -r0, lsl #16]
   196c4:			; <UNDEFINED> instruction: 0x43abc16d
   196c8:	ldrbhi	sl, [r8]
   196cc:	cmnmi	r6, #1459617792	; 0x57000000
   196d0:	strbcc	r8, [r0, r0]!
   196d4:	movtmi	ip, #4985	; 0x1379
   196d8:	andeq	r0, r0, r0
   196dc:	sbcmi	r8, r3, r0, lsl #16
   196e0:	andeq	r0, r0, r0
   196e4:	addmi	r4, pc, r0
   196e8:	andeq	r0, r0, r0
   196ec:	smlawbmi	lr, r0, r4, r8
   196f0:	andeq	r0, r0, r0
   196f4:	orrsmi	sp, r7, r4, lsl #15
   196f8:	andcs	r0, r0, r0
   196fc:	andmi	sl, r2, #95	; 0x5f
   19700:	andge	r0, r0, #0
   19704:	rsbmi	r1, sp, #148, 20	; 0x94000
   19708:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1970c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   19710:	ldrtcs	r0, [r4], -r0
   19714:	movwmi	r6, #52213	; 0xcbf5
   19718:	strb	r0, [r0, #-0]
   1971c:	adcmi	r3, r2, #156	; 0x9c
   19720:	stmda	r0, {}	; <UNPREDICTABLE>
   19724:	eorsmi	r4, r7, #7733248	; 0x760000
   19728:	andeq	r0, r0, r0
   1972c:	bicmi	ip, sp, r5, ror #26
   19730:	andeq	r0, r0, r0
   19734:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   19738:	andeq	r0, r0, r0
   1973c:	rscsmi	r6, r8, r0, lsl #20
   19740:	andeq	r0, r0, r0
   19744:	subsmi	r0, r9, r0
   19748:			; <UNDEFINED> instruction: 0x064dd592
   1974c:	strmi	pc, [r0], #207	; 0xcf
   19750:	andeq	r0, r0, r0
   19754:	eormi	r0, r4, r0
   19758:	sub	r3, ip, r6
   1975c:	cmp	r3, #1
   19760:	ble	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19764:	ldrb	r8, [r6, #1]
   19768:	cmp	r8, #43	; 0x2b
   1976c:	beq	19b50 <grisu3_diy_fp_encode_double@@Base+0xf34>
   19770:	cmp	r8, #45	; 0x2d
   19774:	beq	19b74 <grisu3_diy_fp_encode_double@@Base+0xf58>
   19778:	add	r2, r6, #1
   1977c:	mov	fp, #0
   19780:	sub	r8, r8, #48	; 0x30
   19784:	uxtb	r3, r8
   19788:	cmp	r3, #9
   1978c:	bhi	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19790:	add	r6, r2, #1
   19794:	mov	r3, r8
   19798:	cmp	ip, r6
   1979c:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   197a0:	ldrb	r1, [r2, #1]
   197a4:	sub	r9, r1, #48	; 0x30
   197a8:	cmp	r9, #9
   197ac:	bhi	19860 <grisu3_diy_fp_encode_double@@Base+0xc44>
   197b0:	add	r2, r2, #2
   197b4:	add	r8, r3, r3, lsl #2
   197b8:	cmp	r3, #32768	; 0x8000
   197bc:	mov	r6, r2
   197c0:	addlt	r3, r1, r8, lsl #1
   197c4:	sublt	r3, r3, #48	; 0x30
   197c8:	cmp	ip, r2
   197cc:	beq	19b68 <grisu3_diy_fp_encode_double@@Base+0xf4c>
   197d0:	ldrb	r1, [r2]
   197d4:	add	r2, r2, #1
   197d8:	sub	r8, r1, #48	; 0x30
   197dc:	cmp	r8, #9
   197e0:	bls	197b4 <grisu3_diy_fp_encode_double@@Base+0xb98>
   197e4:	cmp	fp, #0
   197e8:	beq	1986c <grisu3_diy_fp_encode_double@@Base+0xc50>
   197ec:	cmp	ip, r6
   197f0:	sub	r7, r7, r3
   197f4:	bne	1934c <grisu3_diy_fp_encode_double@@Base+0x730>
   197f8:	b	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   197fc:	mov	r4, #0
   19800:	mov	r5, #0
   19804:	b	192a0 <grisu3_diy_fp_encode_double@@Base+0x684>
   19808:	mov	r6, r8
   1980c:	sub	r3, r1, #49	; 0x31
   19810:	cmp	r3, #8
   19814:	bhi	1933c <grisu3_diy_fp_encode_double@@Base+0x720>
   19818:	add	r3, r6, #1
   1981c:	cmp	ip, r3
   19820:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19824:	ldrb	r1, [r6, #1]
   19828:	sub	r2, r1, #48	; 0x30
   1982c:	cmp	r2, #9
   19830:	bhi	19be0 <grisu3_diy_fp_encode_double@@Base+0xfc4>
   19834:	add	r3, r6, #2
   19838:	cmp	r3, ip
   1983c:	mov	r6, r3
   19840:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19844:	ldrb	r1, [r3]
   19848:	add	r3, r3, #1
   1984c:	sub	r2, r1, #48	; 0x30
   19850:	cmp	r2, #9
   19854:	bls	19838 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   19858:	mov	lr, #1
   1985c:	b	1933c <grisu3_diy_fp_encode_double@@Base+0x720>
   19860:	cmp	fp, #0
   19864:	subne	r7, r7, r8
   19868:	bne	1934c <grisu3_diy_fp_encode_double@@Base+0x730>
   1986c:	add	r7, r7, r3
   19870:	b	1934c <grisu3_diy_fp_encode_double@@Base+0x730>
   19874:	mov	r0, r4
   19878:	mov	r1, r5
   1987c:	bl	1d3ac <flatcc_json_parser_struct_as_root@@Base+0x350>
   19880:	sub	r3, r7, sl
   19884:	vmov	d7, r0, r1
   19888:	add	r3, r3, #22
   1988c:	cmp	r3, #44	; 0x2c
   19890:	addls	pc, pc, r3, lsl #2
   19894:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19898:	b	19b2c <grisu3_diy_fp_encode_double@@Base+0xf10>
   1989c:	b	19b44 <grisu3_diy_fp_encode_double@@Base+0xf28>
   198a0:	b	19b38 <grisu3_diy_fp_encode_double@@Base+0xf1c>
   198a4:	b	19b20 <grisu3_diy_fp_encode_double@@Base+0xf04>
   198a8:	b	19b14 <grisu3_diy_fp_encode_double@@Base+0xef8>
   198ac:	b	19b08 <grisu3_diy_fp_encode_double@@Base+0xeec>
   198b0:	b	19afc <grisu3_diy_fp_encode_double@@Base+0xee0>
   198b4:	b	19af0 <grisu3_diy_fp_encode_double@@Base+0xed4>
   198b8:	b	19ae4 <grisu3_diy_fp_encode_double@@Base+0xec8>
   198bc:	b	19ad8 <grisu3_diy_fp_encode_double@@Base+0xebc>
   198c0:	b	19acc <grisu3_diy_fp_encode_double@@Base+0xeb0>
   198c4:	b	19ac0 <grisu3_diy_fp_encode_double@@Base+0xea4>
   198c8:	b	19ab4 <grisu3_diy_fp_encode_double@@Base+0xe98>
   198cc:	b	19aa8 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   198d0:	b	19a9c <grisu3_diy_fp_encode_double@@Base+0xe80>
   198d4:	b	19a90 <grisu3_diy_fp_encode_double@@Base+0xe74>
   198d8:	b	19a84 <grisu3_diy_fp_encode_double@@Base+0xe68>
   198dc:	b	19a78 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   198e0:	b	19a6c <grisu3_diy_fp_encode_double@@Base+0xe50>
   198e4:	b	19a60 <grisu3_diy_fp_encode_double@@Base+0xe44>
   198e8:	b	19a54 <grisu3_diy_fp_encode_double@@Base+0xe38>
   198ec:	b	19a48 <grisu3_diy_fp_encode_double@@Base+0xe2c>
   198f0:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   198f4:	b	19a30 <grisu3_diy_fp_encode_double@@Base+0xe14>
   198f8:	b	19a24 <grisu3_diy_fp_encode_double@@Base+0xe08>
   198fc:	b	19a18 <grisu3_diy_fp_encode_double@@Base+0xdfc>
   19900:	b	19a0c <grisu3_diy_fp_encode_double@@Base+0xdf0>
   19904:	b	19a00 <grisu3_diy_fp_encode_double@@Base+0xde4>
   19908:	b	199f4 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   1990c:	b	199e8 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   19910:	b	199dc <grisu3_diy_fp_encode_double@@Base+0xdc0>
   19914:	b	199d0 <grisu3_diy_fp_encode_double@@Base+0xdb4>
   19918:	b	199c4 <grisu3_diy_fp_encode_double@@Base+0xda8>
   1991c:	b	199b8 <grisu3_diy_fp_encode_double@@Base+0xd9c>
   19920:	b	199ac <grisu3_diy_fp_encode_double@@Base+0xd90>
   19924:	b	199a0 <grisu3_diy_fp_encode_double@@Base+0xd84>
   19928:	b	19994 <grisu3_diy_fp_encode_double@@Base+0xd78>
   1992c:	b	19988 <grisu3_diy_fp_encode_double@@Base+0xd6c>
   19930:	b	1997c <grisu3_diy_fp_encode_double@@Base+0xd60>
   19934:	b	19970 <grisu3_diy_fp_encode_double@@Base+0xd54>
   19938:	b	19964 <grisu3_diy_fp_encode_double@@Base+0xd48>
   1993c:	b	19958 <grisu3_diy_fp_encode_double@@Base+0xd3c>
   19940:	b	1994c <grisu3_diy_fp_encode_double@@Base+0xd30>
   19944:	b	194c0 <grisu3_diy_fp_encode_double@@Base+0x8a4>
   19948:	b	19a3c <grisu3_diy_fp_encode_double@@Base+0xe20>
   1994c:	vldr	d6, [pc, #-676]	; 196b0 <grisu3_diy_fp_encode_double@@Base+0xa94>
   19950:	vmul.f64	d7, d7, d6
   19954:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19958:	vldr	d6, [pc, #-680]	; 196b8 <grisu3_diy_fp_encode_double@@Base+0xa9c>
   1995c:	vmul.f64	d7, d7, d6
   19960:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19964:	vldr	d6, [pc, #-684]	; 196c0 <grisu3_diy_fp_encode_double@@Base+0xaa4>
   19968:	vmul.f64	d7, d7, d6
   1996c:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19970:	vldr	d6, [pc, #-688]	; 196c8 <grisu3_diy_fp_encode_double@@Base+0xaac>
   19974:	vmul.f64	d7, d7, d6
   19978:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   1997c:	vldr	d6, [pc, #-692]	; 196d0 <grisu3_diy_fp_encode_double@@Base+0xab4>
   19980:	vmul.f64	d7, d7, d6
   19984:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19988:	vldr	d6, [pc, #-640]	; 19710 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   1998c:	vmul.f64	d7, d7, d6
   19990:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19994:	vldr	d6, [pc, #-660]	; 19708 <grisu3_diy_fp_encode_double@@Base+0xaec>
   19998:	vmul.f64	d7, d7, d6
   1999c:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   199a0:	vldr	d6, [pc, #-656]	; 19718 <grisu3_diy_fp_encode_double@@Base+0xafc>
   199a4:	vmul.f64	d7, d7, d6
   199a8:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   199ac:	vldr	d6, [pc, #-692]	; 19700 <grisu3_diy_fp_encode_double@@Base+0xae4>
   199b0:	vmul.f64	d7, d7, d6
   199b4:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   199b8:	vldr	d6, [pc, #-672]	; 19720 <grisu3_diy_fp_encode_double@@Base+0xb04>
   199bc:	vmul.f64	d7, d7, d6
   199c0:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   199c4:	vldr	d6, [pc, #-724]	; 196f8 <grisu3_diy_fp_encode_double@@Base+0xadc>
   199c8:	vmul.f64	d7, d7, d6
   199cc:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   199d0:	vldr	d6, [pc, #-688]	; 19728 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   199d4:	vmul.f64	d7, d7, d6
   199d8:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   199dc:	vldr	d6, [pc, #-756]	; 196f0 <grisu3_diy_fp_encode_double@@Base+0xad4>
   199e0:	vmul.f64	d7, d7, d6
   199e4:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   199e8:	vldr	d6, [pc, #-704]	; 19730 <grisu3_diy_fp_encode_double@@Base+0xb14>
   199ec:	vmul.f64	d7, d7, d6
   199f0:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   199f4:	vldr	d6, [pc, #-788]	; 196e8 <grisu3_diy_fp_encode_double@@Base+0xacc>
   199f8:	vmul.f64	d7, d7, d6
   199fc:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a00:	vldr	d6, [pc, #-720]	; 19738 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   19a04:	vmul.f64	d7, d7, d6
   19a08:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a0c:	vldr	d6, [pc, #-828]	; 196d8 <grisu3_diy_fp_encode_double@@Base+0xabc>
   19a10:	vmul.f64	d7, d7, d6
   19a14:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a18:	vldr	d6, [pc, #-832]	; 196e0 <grisu3_diy_fp_encode_double@@Base+0xac4>
   19a1c:	vmul.f64	d7, d7, d6
   19a20:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a24:	vldr	d6, [pc, #-748]	; 19740 <grisu3_diy_fp_encode_double@@Base+0xb24>
   19a28:	vmul.f64	d7, d7, d6
   19a2c:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a30:	vldr	d6, [pc, #-744]	; 19750 <grisu3_diy_fp_encode_double@@Base+0xb34>
   19a34:	vmul.f64	d7, d7, d6
   19a38:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a3c:	vldr	d6, [pc, #-764]	; 19748 <grisu3_diy_fp_encode_double@@Base+0xb2c>
   19a40:	vmul.f64	d7, d7, d6
   19a44:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a48:	vldr	d6, [pc, #-768]	; 19750 <grisu3_diy_fp_encode_double@@Base+0xb34>
   19a4c:	vdiv.f64	d7, d7, d6
   19a50:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a54:	vldr	d6, [pc, #-796]	; 19740 <grisu3_diy_fp_encode_double@@Base+0xb24>
   19a58:	vdiv.f64	d7, d7, d6
   19a5c:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a60:	vldr	d6, [pc, #-904]	; 196e0 <grisu3_diy_fp_encode_double@@Base+0xac4>
   19a64:	vdiv.f64	d7, d7, d6
   19a68:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a6c:	vldr	d6, [pc, #-924]	; 196d8 <grisu3_diy_fp_encode_double@@Base+0xabc>
   19a70:	vdiv.f64	d7, d7, d6
   19a74:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a78:	vldr	d6, [pc, #-840]	; 19738 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   19a7c:	vdiv.f64	d7, d7, d6
   19a80:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a84:	vldr	d6, [pc, #-932]	; 196e8 <grisu3_diy_fp_encode_double@@Base+0xacc>
   19a88:	vdiv.f64	d7, d7, d6
   19a8c:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a90:	vldr	d6, [pc, #-872]	; 19730 <grisu3_diy_fp_encode_double@@Base+0xb14>
   19a94:	vdiv.f64	d7, d7, d6
   19a98:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19a9c:	vldr	d6, [pc, #-948]	; 196f0 <grisu3_diy_fp_encode_double@@Base+0xad4>
   19aa0:	vdiv.f64	d7, d7, d6
   19aa4:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19aa8:	vldr	d6, [pc, #-904]	; 19728 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   19aac:	vdiv.f64	d7, d7, d6
   19ab0:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19ab4:	vldr	d6, [pc, #-964]	; 196f8 <grisu3_diy_fp_encode_double@@Base+0xadc>
   19ab8:	vdiv.f64	d7, d7, d6
   19abc:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19ac0:	vldr	d6, [pc, #-936]	; 19720 <grisu3_diy_fp_encode_double@@Base+0xb04>
   19ac4:	vdiv.f64	d7, d7, d6
   19ac8:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19acc:	vldr	d6, [pc, #-980]	; 19700 <grisu3_diy_fp_encode_double@@Base+0xae4>
   19ad0:	vdiv.f64	d7, d7, d6
   19ad4:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19ad8:	vldr	d6, [pc, #-968]	; 19718 <grisu3_diy_fp_encode_double@@Base+0xafc>
   19adc:	vdiv.f64	d7, d7, d6
   19ae0:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19ae4:	vldr	d6, [pc, #-996]	; 19708 <grisu3_diy_fp_encode_double@@Base+0xaec>
   19ae8:	vdiv.f64	d7, d7, d6
   19aec:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19af0:	vldr	d6, [pc, #-1000]	; 19710 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   19af4:	vdiv.f64	d7, d7, d6
   19af8:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19afc:	vldr	d6, [pc, #244]	; 19bf8 <grisu3_diy_fp_encode_double@@Base+0xfdc>
   19b00:	vdiv.f64	d7, d7, d6
   19b04:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19b08:	vldr	d6, [pc, #240]	; 19c00 <grisu3_diy_fp_encode_double@@Base+0xfe4>
   19b0c:	vdiv.f64	d7, d7, d6
   19b10:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19b14:	vldr	d6, [pc, #236]	; 19c08 <grisu3_diy_fp_encode_double@@Base+0xfec>
   19b18:	vdiv.f64	d7, d7, d6
   19b1c:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19b20:	vldr	d6, [pc, #232]	; 19c10 <grisu3_diy_fp_encode_double@@Base+0xff4>
   19b24:	vdiv.f64	d7, d7, d6
   19b28:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19b2c:	vldr	d6, [pc, #228]	; 19c18 <grisu3_diy_fp_encode_double@@Base+0xffc>
   19b30:	vdiv.f64	d7, d7, d6
   19b34:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19b38:	vldr	d6, [pc, #224]	; 19c20 <grisu3_diy_fp_encode_double@@Base+0x1004>
   19b3c:	vdiv.f64	d7, d7, d6
   19b40:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19b44:	vldr	d6, [pc, #220]	; 19c28 <grisu3_diy_fp_encode_double@@Base+0x100c>
   19b48:	vdiv.f64	d7, d7, d6
   19b4c:	b	194c8 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   19b50:	add	r2, r6, #2
   19b54:	cmp	ip, r2
   19b58:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19b5c:	ldrb	r8, [r6, #2]
   19b60:	mov	fp, #0
   19b64:	b	19780 <grisu3_diy_fp_encode_double@@Base+0xb64>
   19b68:	cmp	fp, #0
   19b6c:	bne	197ec <grisu3_diy_fp_encode_double@@Base+0xbd0>
   19b70:	b	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19b74:	add	r2, r6, #2
   19b78:	cmp	ip, r2
   19b7c:	beq	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19b80:	ldrb	r8, [r6, #2]
   19b84:	mov	fp, #1
   19b88:	b	19780 <grisu3_diy_fp_encode_double@@Base+0xb64>
   19b8c:	ldr	fp, [sp, #24]
   19b90:	mov	r7, r0
   19b94:	ldr	r0, [sp, #28]
   19b98:	sub	fp, r8, fp
   19b9c:	add	sl, sl, fp
   19ba0:	cmp	lr, #0
   19ba4:	bne	19664 <grisu3_diy_fp_encode_double@@Base+0xa48>
   19ba8:	cmp	r9, #52	; 0x34
   19bac:	movls	r9, #0
   19bb0:	movhi	r9, #1
   19bb4:	adds	r4, r4, r9
   19bb8:	adc	r5, r5, #0
   19bbc:	cmp	ip, r8
   19bc0:	movne	lr, #1
   19bc4:	bne	19664 <grisu3_diy_fp_encode_double@@Base+0xa48>
   19bc8:	b	19460 <grisu3_diy_fp_encode_double@@Base+0x844>
   19bcc:	mov	r7, lr
   19bd0:	mov	r6, r3
   19bd4:	b	19570 <grisu3_diy_fp_encode_double@@Base+0x954>
   19bd8:	mov	r8, fp
   19bdc:	b	19ba0 <grisu3_diy_fp_encode_double@@Base+0xf84>
   19be0:	mov	r6, r3
   19be4:	b	19858 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   19be8:	mov	r6, r7
   19bec:	mov	r7, #0
   19bf0:	b	19328 <grisu3_diy_fp_encode_double@@Base+0x70c>
   19bf4:	nop	{0}
   19bf8:	strbcc	r8, [r0, r0]!
   19bfc:	movtmi	ip, #4985	; 0x1379
   19c00:	ldrbhi	sl, [r8]
   19c04:	cmnmi	r6, #1459617792	; 0x57000000
   19c08:	strbvs	ip, [lr, -r0, lsl #16]
   19c0c:			; <UNDEFINED> instruction: 0x43abc16d
   19c10:	addsvs	r3, r1, r0, lsl #26
   19c14:	mvnmi	r5, #228, 16	; 0xe40000
   19c18:			; <UNDEFINED> instruction: 0x064dd592
   19c1c:	strmi	pc, [r0], #207	; 0xcf
   19c20:	ldmvc	r5!, {r6, sl, fp, pc}
   19c24:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   19c28:	usatle	lr, #2, r0, asr #30
   19c2c:	strbmi	r1, [fp], #-2788	; 0xfffff51c

00019c30 <flatcc_json_parser_error_string@@Base>:
   19c30:	cmp	r0, #34	; 0x22
   19c34:	addls	pc, pc, r0, lsl #2
   19c38:	b	19e6c <flatcc_json_parser_error_string@@Base+0x23c>
   19c3c:	b	19cc8 <flatcc_json_parser_error_string@@Base+0x98>
   19c40:	b	19e60 <flatcc_json_parser_error_string@@Base+0x230>
   19c44:	b	19e54 <flatcc_json_parser_error_string@@Base+0x224>
   19c48:	b	19e48 <flatcc_json_parser_error_string@@Base+0x218>
   19c4c:	b	19e3c <flatcc_json_parser_error_string@@Base+0x20c>
   19c50:	b	19e30 <flatcc_json_parser_error_string@@Base+0x200>
   19c54:	b	19e24 <flatcc_json_parser_error_string@@Base+0x1f4>
   19c58:	b	19e18 <flatcc_json_parser_error_string@@Base+0x1e8>
   19c5c:	b	19e0c <flatcc_json_parser_error_string@@Base+0x1dc>
   19c60:	b	19e00 <flatcc_json_parser_error_string@@Base+0x1d0>
   19c64:	b	19df4 <flatcc_json_parser_error_string@@Base+0x1c4>
   19c68:	b	19de8 <flatcc_json_parser_error_string@@Base+0x1b8>
   19c6c:	b	19ddc <flatcc_json_parser_error_string@@Base+0x1ac>
   19c70:	b	19dd0 <flatcc_json_parser_error_string@@Base+0x1a0>
   19c74:	b	19dc4 <flatcc_json_parser_error_string@@Base+0x194>
   19c78:	b	19db8 <flatcc_json_parser_error_string@@Base+0x188>
   19c7c:	b	19dac <flatcc_json_parser_error_string@@Base+0x17c>
   19c80:	b	19da0 <flatcc_json_parser_error_string@@Base+0x170>
   19c84:	b	19d94 <flatcc_json_parser_error_string@@Base+0x164>
   19c88:	b	19d88 <flatcc_json_parser_error_string@@Base+0x158>
   19c8c:	b	19d7c <flatcc_json_parser_error_string@@Base+0x14c>
   19c90:	b	19d70 <flatcc_json_parser_error_string@@Base+0x140>
   19c94:	b	19d64 <flatcc_json_parser_error_string@@Base+0x134>
   19c98:	b	19d58 <flatcc_json_parser_error_string@@Base+0x128>
   19c9c:	b	19d4c <flatcc_json_parser_error_string@@Base+0x11c>
   19ca0:	b	19d40 <flatcc_json_parser_error_string@@Base+0x110>
   19ca4:	b	19d34 <flatcc_json_parser_error_string@@Base+0x104>
   19ca8:	b	19d28 <flatcc_json_parser_error_string@@Base+0xf8>
   19cac:	b	19d1c <flatcc_json_parser_error_string@@Base+0xec>
   19cb0:	b	19d10 <flatcc_json_parser_error_string@@Base+0xe0>
   19cb4:	b	19d04 <flatcc_json_parser_error_string@@Base+0xd4>
   19cb8:	b	19cf8 <flatcc_json_parser_error_string@@Base+0xc8>
   19cbc:	b	19cec <flatcc_json_parser_error_string@@Base+0xbc>
   19cc0:	b	19ce0 <flatcc_json_parser_error_string@@Base+0xb0>
   19cc4:	b	19cd4 <flatcc_json_parser_error_string@@Base+0xa4>
   19cc8:	ldr	r0, [pc, #424]	; 19e78 <flatcc_json_parser_error_string@@Base+0x248>
   19ccc:	add	r0, pc, r0
   19cd0:	bx	lr
   19cd4:	ldr	r0, [pc, #416]	; 19e7c <flatcc_json_parser_error_string@@Base+0x24c>
   19cd8:	add	r0, pc, r0
   19cdc:	bx	lr
   19ce0:	ldr	r0, [pc, #408]	; 19e80 <flatcc_json_parser_error_string@@Base+0x250>
   19ce4:	add	r0, pc, r0
   19ce8:	bx	lr
   19cec:	ldr	r0, [pc, #400]	; 19e84 <flatcc_json_parser_error_string@@Base+0x254>
   19cf0:	add	r0, pc, r0
   19cf4:	bx	lr
   19cf8:	ldr	r0, [pc, #392]	; 19e88 <flatcc_json_parser_error_string@@Base+0x258>
   19cfc:	add	r0, pc, r0
   19d00:	bx	lr
   19d04:	ldr	r0, [pc, #384]	; 19e8c <flatcc_json_parser_error_string@@Base+0x25c>
   19d08:	add	r0, pc, r0
   19d0c:	bx	lr
   19d10:	ldr	r0, [pc, #376]	; 19e90 <flatcc_json_parser_error_string@@Base+0x260>
   19d14:	add	r0, pc, r0
   19d18:	bx	lr
   19d1c:	ldr	r0, [pc, #368]	; 19e94 <flatcc_json_parser_error_string@@Base+0x264>
   19d20:	add	r0, pc, r0
   19d24:	bx	lr
   19d28:	ldr	r0, [pc, #360]	; 19e98 <flatcc_json_parser_error_string@@Base+0x268>
   19d2c:	add	r0, pc, r0
   19d30:	bx	lr
   19d34:	ldr	r0, [pc, #352]	; 19e9c <flatcc_json_parser_error_string@@Base+0x26c>
   19d38:	add	r0, pc, r0
   19d3c:	bx	lr
   19d40:	ldr	r0, [pc, #344]	; 19ea0 <flatcc_json_parser_error_string@@Base+0x270>
   19d44:	add	r0, pc, r0
   19d48:	bx	lr
   19d4c:	ldr	r0, [pc, #336]	; 19ea4 <flatcc_json_parser_error_string@@Base+0x274>
   19d50:	add	r0, pc, r0
   19d54:	bx	lr
   19d58:	ldr	r0, [pc, #328]	; 19ea8 <flatcc_json_parser_error_string@@Base+0x278>
   19d5c:	add	r0, pc, r0
   19d60:	bx	lr
   19d64:	ldr	r0, [pc, #320]	; 19eac <flatcc_json_parser_error_string@@Base+0x27c>
   19d68:	add	r0, pc, r0
   19d6c:	bx	lr
   19d70:	ldr	r0, [pc, #312]	; 19eb0 <flatcc_json_parser_error_string@@Base+0x280>
   19d74:	add	r0, pc, r0
   19d78:	bx	lr
   19d7c:	ldr	r0, [pc, #304]	; 19eb4 <flatcc_json_parser_error_string@@Base+0x284>
   19d80:	add	r0, pc, r0
   19d84:	bx	lr
   19d88:	ldr	r0, [pc, #296]	; 19eb8 <flatcc_json_parser_error_string@@Base+0x288>
   19d8c:	add	r0, pc, r0
   19d90:	bx	lr
   19d94:	ldr	r0, [pc, #288]	; 19ebc <flatcc_json_parser_error_string@@Base+0x28c>
   19d98:	add	r0, pc, r0
   19d9c:	bx	lr
   19da0:	ldr	r0, [pc, #280]	; 19ec0 <flatcc_json_parser_error_string@@Base+0x290>
   19da4:	add	r0, pc, r0
   19da8:	bx	lr
   19dac:	ldr	r0, [pc, #272]	; 19ec4 <flatcc_json_parser_error_string@@Base+0x294>
   19db0:	add	r0, pc, r0
   19db4:	bx	lr
   19db8:	ldr	r0, [pc, #264]	; 19ec8 <flatcc_json_parser_error_string@@Base+0x298>
   19dbc:	add	r0, pc, r0
   19dc0:	bx	lr
   19dc4:	ldr	r0, [pc, #256]	; 19ecc <flatcc_json_parser_error_string@@Base+0x29c>
   19dc8:	add	r0, pc, r0
   19dcc:	bx	lr
   19dd0:	ldr	r0, [pc, #248]	; 19ed0 <flatcc_json_parser_error_string@@Base+0x2a0>
   19dd4:	add	r0, pc, r0
   19dd8:	bx	lr
   19ddc:	ldr	r0, [pc, #240]	; 19ed4 <flatcc_json_parser_error_string@@Base+0x2a4>
   19de0:	add	r0, pc, r0
   19de4:	bx	lr
   19de8:	ldr	r0, [pc, #232]	; 19ed8 <flatcc_json_parser_error_string@@Base+0x2a8>
   19dec:	add	r0, pc, r0
   19df0:	bx	lr
   19df4:	ldr	r0, [pc, #224]	; 19edc <flatcc_json_parser_error_string@@Base+0x2ac>
   19df8:	add	r0, pc, r0
   19dfc:	bx	lr
   19e00:	ldr	r0, [pc, #216]	; 19ee0 <flatcc_json_parser_error_string@@Base+0x2b0>
   19e04:	add	r0, pc, r0
   19e08:	bx	lr
   19e0c:	ldr	r0, [pc, #208]	; 19ee4 <flatcc_json_parser_error_string@@Base+0x2b4>
   19e10:	add	r0, pc, r0
   19e14:	bx	lr
   19e18:	ldr	r0, [pc, #200]	; 19ee8 <flatcc_json_parser_error_string@@Base+0x2b8>
   19e1c:	add	r0, pc, r0
   19e20:	bx	lr
   19e24:	ldr	r0, [pc, #192]	; 19eec <flatcc_json_parser_error_string@@Base+0x2bc>
   19e28:	add	r0, pc, r0
   19e2c:	bx	lr
   19e30:	ldr	r0, [pc, #184]	; 19ef0 <flatcc_json_parser_error_string@@Base+0x2c0>
   19e34:	add	r0, pc, r0
   19e38:	bx	lr
   19e3c:	ldr	r0, [pc, #176]	; 19ef4 <flatcc_json_parser_error_string@@Base+0x2c4>
   19e40:	add	r0, pc, r0
   19e44:	bx	lr
   19e48:	ldr	r0, [pc, #168]	; 19ef8 <flatcc_json_parser_error_string@@Base+0x2c8>
   19e4c:	add	r0, pc, r0
   19e50:	bx	lr
   19e54:	ldr	r0, [pc, #160]	; 19efc <flatcc_json_parser_error_string@@Base+0x2cc>
   19e58:	add	r0, pc, r0
   19e5c:	bx	lr
   19e60:	ldr	r0, [pc, #152]	; 19f00 <flatcc_json_parser_error_string@@Base+0x2d0>
   19e64:	add	r0, pc, r0
   19e68:	bx	lr
   19e6c:	ldr	r0, [pc, #144]	; 19f04 <flatcc_json_parser_error_string@@Base+0x2d4>
   19e70:	add	r0, pc, r0
   19e74:	bx	lr
   19e78:			; <UNDEFINED> instruction: 0x00004fb8
   19e7c:	andeq	r5, r0, r0, asr r2
   19e80:	andeq	r5, r0, r4, lsr r2
   19e84:	andeq	r5, r0, ip, lsl #4
   19e88:	andeq	r5, r0, r8, ror #3
   19e8c:			; <UNDEFINED> instruction: 0x000051bc
   19e90:	muleq	r0, r8, r1
   19e94:	andeq	r5, r0, r0, ror r1
   19e98:	andeq	r5, r0, r8, asr #2
   19e9c:	andeq	r5, r0, ip, lsl r1
   19ea0:	strdeq	r5, [r0], -r0
   19ea4:	ldrdeq	r5, [r0], -r0
   19ea8:	andeq	r5, r0, r0, lsr #1
   19eac:	andeq	r5, r0, r4, lsl #1
   19eb0:	andeq	r5, r0, r8, rrx
   19eb4:	andeq	r5, r0, r8, asr #32
   19eb8:	andeq	r5, r0, ip, lsr #32
   19ebc:	andeq	r5, r0, r0, lsl r0
   19ec0:	strdeq	r4, [r0], -r0
   19ec4:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   19ec8:			; <UNDEFINED> instruction: 0x00004fb4
   19ecc:	andeq	r4, r0, ip, lsl #31
   19ed0:	andeq	r4, r0, r0, ror pc
   19ed4:	andeq	r4, r0, r0, asr pc
   19ed8:	andeq	r4, r0, r4, lsr pc
   19edc:	andeq	r4, r0, r4, lsl pc
   19ee0:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   19ee4:	ldrdeq	r4, [r0], -ip
   19ee8:	andeq	r4, r0, r4, asr #29
   19eec:	andeq	r4, r0, r8, lsr #29
   19ef0:	andeq	r4, r0, r4, lsl #29
   19ef4:	andeq	r4, r0, r8, ror #28
   19ef8:	andeq	r4, r0, ip, asr #28
   19efc:	andeq	r4, r0, r0, lsr lr
   19f00:	ldrdeq	r5, [r0], -r4
   19f04:	andeq	r4, r0, ip, lsl #28

00019f08 <flatcc_json_parser_set_error@@Base>:
   19f08:	ldr	ip, [r0, #24]
   19f0c:	cmp	ip, #0
   19f10:	bne	19f2c <flatcc_json_parser_set_error@@Base+0x24>
   19f14:	ldr	ip, [r0, #4]
   19f18:	str	r3, [r0, #24]
   19f1c:	str	r1, [r0, #36]	; 0x24
   19f20:	sub	r1, r1, ip
   19f24:	add	r1, r1, #1
   19f28:	str	r1, [r0, #20]
   19f2c:	mov	r0, r2
   19f30:	bx	lr

00019f34 <flatcc_json_parser_string_part@@Base>:
   19f34:	cmp	r1, r2
   19f38:	beq	19fd8 <flatcc_json_parser_string_part@@Base+0xa4>
   19f3c:	ldrb	ip, [r1]
   19f40:	cmp	ip, #34	; 0x22
   19f44:	cmpne	ip, #31
   19f48:	movhi	r3, #1
   19f4c:	movls	r3, #0
   19f50:	cmp	ip, #92	; 0x5c
   19f54:	moveq	r3, #0
   19f58:	andne	r3, r3, #1
   19f5c:	cmp	r3, #0
   19f60:	beq	19fe4 <flatcc_json_parser_string_part@@Base+0xb0>
   19f64:	add	r3, r1, #1
   19f68:	cmp	r3, r2
   19f6c:	mov	r1, r3
   19f70:	beq	19fdc <flatcc_json_parser_string_part@@Base+0xa8>
   19f74:	push	{lr}		; (str lr, [sp, #-4]!)
   19f78:	b	19f88 <flatcc_json_parser_string_part@@Base+0x54>
   19f7c:	cmp	r3, r2
   19f80:	mov	r1, r3
   19f84:	beq	19fcc <flatcc_json_parser_string_part@@Base+0x98>
   19f88:	ldrb	ip, [r3], #1
   19f8c:	cmp	ip, #34	; 0x22
   19f90:	cmpne	ip, #31
   19f94:	movhi	lr, #1
   19f98:	movls	lr, #0
   19f9c:	cmp	ip, #92	; 0x5c
   19fa0:	moveq	lr, #0
   19fa4:	andne	lr, lr, #1
   19fa8:	cmp	lr, #0
   19fac:	bne	19f7c <flatcc_json_parser_string_part@@Base+0x48>
   19fb0:	cmp	ip, #31
   19fb4:	bls	19fc0 <flatcc_json_parser_string_part@@Base+0x8c>
   19fb8:	mov	r0, r1
   19fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   19fc0:	mov	r3, #17
   19fc4:	pop	{lr}		; (ldr lr, [sp], #4)
   19fc8:	b	19f08 <flatcc_json_parser_set_error@@Base>
   19fcc:	mov	r3, #20
   19fd0:	pop	{lr}		; (ldr lr, [sp], #4)
   19fd4:	b	19f08 <flatcc_json_parser_set_error@@Base>
   19fd8:	mov	r1, r2
   19fdc:	mov	r3, #20
   19fe0:	b	19f08 <flatcc_json_parser_set_error@@Base>
   19fe4:	cmp	ip, #31
   19fe8:	bls	19ff4 <flatcc_json_parser_string_part@@Base+0xc0>
   19fec:	mov	r0, r1
   19ff0:	bx	lr
   19ff4:	mov	r3, #17
   19ff8:	b	19f08 <flatcc_json_parser_set_error@@Base>

00019ffc <flatcc_json_parser_space_ext@@Base>:
   19ffc:	cmp	r1, r2
   1a000:	beq	1a030 <flatcc_json_parser_space_ext@@Base+0x34>
   1a004:	ldrb	ip, [r1]
   1a008:	cmp	ip, #32
   1a00c:	bne	1a038 <flatcc_json_parser_space_ext@@Base+0x3c>
   1a010:	add	r3, r1, #1
   1a014:	b	1a024 <flatcc_json_parser_space_ext@@Base+0x28>
   1a018:	ldrb	ip, [r3], #1
   1a01c:	cmp	ip, #32
   1a020:	bne	1a038 <flatcc_json_parser_space_ext@@Base+0x3c>
   1a024:	cmp	r2, r3
   1a028:	mov	r1, r3
   1a02c:	bne	1a018 <flatcc_json_parser_space_ext@@Base+0x1c>
   1a030:	mov	r0, r1
   1a034:	bx	lr
   1a038:	cmp	ip, #32
   1a03c:	bhi	1a030 <flatcc_json_parser_space_ext@@Base+0x34>
   1a040:	sub	ip, ip, #9
   1a044:	cmp	ip, #23
   1a048:	addls	pc, pc, ip, lsl #2
   1a04c:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a050:	b	1a100 <flatcc_json_parser_space_ext@@Base+0x104>
   1a054:	b	1a0f8 <flatcc_json_parser_space_ext@@Base+0xfc>
   1a058:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a05c:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a060:	b	1a0b0 <flatcc_json_parser_space_ext@@Base+0xb4>
   1a064:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a068:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a06c:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a070:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a074:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a078:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a07c:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a080:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a084:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a088:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a08c:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a090:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a094:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a098:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a09c:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a0a0:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a0a4:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a0a8:	b	1a108 <flatcc_json_parser_space_ext@@Base+0x10c>
   1a0ac:	b	19ffc <flatcc_json_parser_space_ext@@Base>
   1a0b0:	sub	r3, r2, r1
   1a0b4:	add	ip, r1, #1
   1a0b8:	cmp	r3, #1
   1a0bc:	ble	1a0cc <flatcc_json_parser_space_ext@@Base+0xd0>
   1a0c0:	ldrb	r3, [r1, #1]
   1a0c4:	cmp	r3, #10
   1a0c8:	addeq	ip, r1, #2
   1a0cc:	mov	r1, ip
   1a0d0:	ldr	r3, [r0, #16]
   1a0d4:	str	r1, [r0, #4]
   1a0d8:	add	r3, r3, #1
   1a0dc:	str	r3, [r0, #16]
   1a0e0:	cmp	r2, r1
   1a0e4:	beq	1a030 <flatcc_json_parser_space_ext@@Base+0x34>
   1a0e8:	ldrb	ip, [r1]
   1a0ec:	cmp	ip, #32
   1a0f0:	bls	1a040 <flatcc_json_parser_space_ext@@Base+0x44>
   1a0f4:	b	1a030 <flatcc_json_parser_space_ext@@Base+0x34>
   1a0f8:	add	r1, r1, #1
   1a0fc:	b	1a0d0 <flatcc_json_parser_space_ext@@Base+0xd4>
   1a100:	add	r1, r1, #1
   1a104:	b	1a0e0 <flatcc_json_parser_space_ext@@Base+0xe4>
   1a108:	mov	r3, #5
   1a10c:	b	19f08 <flatcc_json_parser_set_error@@Base>
   1a110:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a114:	mov	ip, #0
   1a118:	cmp	r1, r2
   1a11c:	strd	r6, [sp, #8]
   1a120:	mov	r4, r1
   1a124:	mov	r6, r2
   1a128:	strd	r8, [sp, #16]
   1a12c:	mov	r9, r0
   1a130:	strd	sl, [sp, #24]
   1a134:	str	lr, [sp, #32]
   1a138:	sub	sp, sp, #44	; 0x2c
   1a13c:	str	r3, [sp, #12]
   1a140:	ldr	r3, [sp, #80]	; 0x50
   1a144:	strb	ip, [r3]
   1a148:	beq	1a2b0 <flatcc_json_parser_space_ext@@Base+0x2b4>
   1a14c:	ldrb	r3, [r1]
   1a150:	cmp	r3, #34	; 0x22
   1a154:	addeq	r4, r1, #1
   1a158:	streq	ip, [r0, #12]
   1a15c:	beq	1a2c0 <flatcc_json_parser_space_ext@@Base+0x2c4>
   1a160:	cmp	r3, #46	; 0x2e
   1a164:	movne	r3, #1
   1a168:	strne	r3, [r0, #12]
   1a16c:	beq	1a28c <flatcc_json_parser_space_ext@@Base+0x290>
   1a170:	mov	r3, #0
   1a174:	add	fp, sp, #24
   1a178:	add	sl, sp, #28
   1a17c:	str	r3, [sp, #8]
   1a180:	str	r3, [sp, #16]
   1a184:	add	r3, sp, #32
   1a188:	str	r3, [sp, #20]
   1a18c:	ldr	r8, [sp, #12]
   1a190:	mov	r7, r4
   1a194:	mov	r1, r4
   1a198:	ldr	r4, [sp, #20]
   1a19c:	ldr	r5, [r8]
   1a1a0:	b	1a1bc <flatcc_json_parser_space_ext@@Base+0x1c0>
   1a1a4:	cmp	r7, r0
   1a1a8:	mov	r7, r0
   1a1ac:	bne	1a200 <flatcc_json_parser_space_ext@@Base+0x204>
   1a1b0:	ldr	r5, [r8, #4]!
   1a1b4:	cmp	r5, #0
   1a1b8:	beq	1a274 <flatcc_json_parser_space_ext@@Base+0x278>
   1a1bc:	mov	r3, fp
   1a1c0:	mov	r2, r6
   1a1c4:	stm	sp, {r4, sl}
   1a1c8:	mov	r0, r9
   1a1cc:	blx	r5
   1a1d0:	cmp	r6, r0
   1a1d4:	mov	r1, r0
   1a1d8:	bne	1a1a4 <flatcc_json_parser_space_ext@@Base+0x1a8>
   1a1dc:	mov	r4, r0
   1a1e0:	mov	r0, r4
   1a1e4:	add	sp, sp, #44	; 0x2c
   1a1e8:	ldrd	r4, [sp]
   1a1ec:	ldrd	r6, [sp, #8]
   1a1f0:	ldrd	r8, [sp, #16]
   1a1f4:	ldrd	sl, [sp, #24]
   1a1f8:	add	sp, sp, #32
   1a1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a200:	ldr	r3, [sp, #8]
   1a204:	mov	r4, r0
   1a208:	cmp	r3, #0
   1a20c:	beq	1a21c <flatcc_json_parser_space_ext@@Base+0x220>
   1a210:	ldr	r3, [r9, #12]
   1a214:	cmp	r3, #0
   1a218:	bne	1a340 <flatcc_json_parser_space_ext@@Base+0x344>
   1a21c:	ldr	r3, [sp, #24]
   1a220:	cmp	r3, #0
   1a224:	bne	1a304 <flatcc_json_parser_space_ext@@Base+0x308>
   1a228:	ldrd	r2, [sp, #32]
   1a22c:	cmp	r3, #0
   1a230:	cmpeq	r2, #255	; 0xff
   1a234:	uxtbls	r3, r2
   1a238:	strls	r3, [sp, #16]
   1a23c:	bhi	1a328 <flatcc_json_parser_space_ext@@Base+0x32c>
   1a240:	ldr	r2, [sp, #8]
   1a244:	ldr	r1, [sp, #16]
   1a248:	ldr	r3, [sp, #80]	; 0x50
   1a24c:	add	r2, r2, #1
   1a250:	str	r2, [sp, #8]
   1a254:	ldr	r2, [sp, #28]
   1a258:	ldrb	r3, [r3]
   1a25c:	cmp	r2, #0
   1a260:	ldr	r2, [sp, #80]	; 0x50
   1a264:	add	r3, r1, r3
   1a268:	strb	r3, [r2]
   1a26c:	bne	1a18c <flatcc_json_parser_space_ext@@Base+0x190>
   1a270:	b	1a1e0 <flatcc_json_parser_space_ext@@Base+0x1e4>
   1a274:	mov	r2, r6
   1a278:	mov	r0, r9
   1a27c:	mov	r3, #23
   1a280:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a284:	mov	r4, r0
   1a288:	b	1a1e0 <flatcc_json_parser_space_ext@@Base+0x1e4>
   1a28c:	mov	r3, #5
   1a290:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a294:	ldr	r3, [r9, #12]
   1a298:	mov	r4, r0
   1a29c:	cmp	r3, #0
   1a2a0:	beq	1a2c0 <flatcc_json_parser_space_ext@@Base+0x2c4>
   1a2a4:	cmp	r6, r4
   1a2a8:	bne	1a170 <flatcc_json_parser_space_ext@@Base+0x174>
   1a2ac:	b	1a1e0 <flatcc_json_parser_space_ext@@Base+0x1e4>
   1a2b0:	ldr	r3, [r0, #12]
   1a2b4:	cmp	r3, #0
   1a2b8:	bne	1a1e0 <flatcc_json_parser_space_ext@@Base+0x1e4>
   1a2bc:	mov	r4, r6
   1a2c0:	sub	r3, r6, r4
   1a2c4:	cmp	r3, #1
   1a2c8:	ble	1a2ec <flatcc_json_parser_space_ext@@Base+0x2f0>
   1a2cc:	ldrb	r3, [r4]
   1a2d0:	cmp	r3, #32
   1a2d4:	bhi	1a2a4 <flatcc_json_parser_space_ext@@Base+0x2a8>
   1a2d8:	bne	1a2ec <flatcc_json_parser_space_ext@@Base+0x2f0>
   1a2dc:	ldrb	r3, [r4, #1]
   1a2e0:	cmp	r3, #32
   1a2e4:	addhi	r4, r4, #1
   1a2e8:	bhi	1a2a4 <flatcc_json_parser_space_ext@@Base+0x2a8>
   1a2ec:	mov	r1, r4
   1a2f0:	mov	r2, r6
   1a2f4:	mov	r0, r9
   1a2f8:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1a2fc:	mov	r4, r0
   1a300:	b	1a2a4 <flatcc_json_parser_space_ext@@Base+0x2a8>
   1a304:	mov	r3, #8
   1a308:	mov	r2, r6
   1a30c:	mov	r1, r4
   1a310:	mov	r0, r9
   1a314:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a318:	cmp	r6, r0
   1a31c:	bne	1a240 <flatcc_json_parser_space_ext@@Base+0x244>
   1a320:	mov	r4, r6
   1a324:	b	1a1e0 <flatcc_json_parser_space_ext@@Base+0x1e4>
   1a328:	mov	r3, #7
   1a32c:	mov	r2, r6
   1a330:	mov	r1, r4
   1a334:	mov	r0, r9
   1a338:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a33c:	b	1a318 <flatcc_json_parser_space_ext@@Base+0x31c>
   1a340:	mov	r1, r4
   1a344:	mov	r2, r6
   1a348:	mov	r0, r9
   1a34c:	mov	r3, #14
   1a350:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a354:	mov	r4, r0
   1a358:	b	1a1e0 <flatcc_json_parser_space_ext@@Base+0x1e4>
   1a35c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a360:	mov	ip, #0
   1a364:	mov	r4, r1
   1a368:	strd	r6, [sp, #8]
   1a36c:	mov	r6, r0
   1a370:	mov	r5, r2
   1a374:	strd	r8, [sp, #16]
   1a378:	mov	r9, r3
   1a37c:	strd	sl, [sp, #24]
   1a380:	str	lr, [sp, #32]
   1a384:	sub	sp, sp, #28
   1a388:	ldrh	r0, [sp, #68]	; 0x44
   1a38c:	ldr	r8, [sp, #64]	; 0x40
   1a390:	str	r0, [sp, #12]
   1a394:	ldr	r0, [r6]
   1a398:	str	ip, [sp, #20]
   1a39c:	bl	15e3c <flatcc_builder_start_offset_vector@@Base>
   1a3a0:	cmp	r0, #0
   1a3a4:	beq	1a3e0 <flatcc_json_parser_space_ext@@Base+0x3e4>
   1a3a8:	mov	r1, r4
   1a3ac:	mov	r2, r5
   1a3b0:	mov	r0, r6
   1a3b4:	mov	r3, #33	; 0x21
   1a3b8:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a3bc:	mov	r4, r0
   1a3c0:	mov	r0, r4
   1a3c4:	add	sp, sp, #28
   1a3c8:	ldrd	r4, [sp]
   1a3cc:	ldrd	r6, [sp, #8]
   1a3d0:	ldrd	r8, [sp, #16]
   1a3d4:	ldrd	sl, [sp, #24]
   1a3d8:	add	sp, sp, #32
   1a3dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3e0:	cmp	r4, r5
   1a3e4:	beq	1a3f4 <flatcc_json_parser_space_ext@@Base+0x3f8>
   1a3e8:	ldrb	r3, [r4]
   1a3ec:	cmp	r3, #91	; 0x5b
   1a3f0:	beq	1a478 <flatcc_json_parser_space_ext@@Base+0x47c>
   1a3f4:	mov	r1, r4
   1a3f8:	mov	r3, #22
   1a3fc:	mov	r2, r5
   1a400:	mov	r0, r6
   1a404:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a408:	mov	r4, r0
   1a40c:	mov	r7, #0
   1a410:	cmp	r8, r7
   1a414:	beq	1a434 <flatcc_json_parser_space_ext@@Base+0x438>
   1a418:	mov	r1, r4
   1a41c:	mov	r2, r5
   1a420:	mov	r0, r6
   1a424:	mov	r3, #30
   1a428:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a42c:	mov	r4, r0
   1a430:	b	1a3c0 <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a434:	mov	r1, r9
   1a438:	ldr	r0, [r6]
   1a43c:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1a440:	mov	r1, r0
   1a444:	ldr	r0, [r6]
   1a448:	bl	17020 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1a44c:	cmp	r0, #0
   1a450:	str	r0, [sp, #20]
   1a454:	beq	1a3a8 <flatcc_json_parser_space_ext@@Base+0x3ac>
   1a458:	ldr	r0, [r6]
   1a45c:	ldr	r1, [sp, #12]
   1a460:	bl	17dd4 <flatcc_builder_table_add_offset@@Base>
   1a464:	cmp	r0, #0
   1a468:	beq	1a3a8 <flatcc_json_parser_space_ext@@Base+0x3ac>
   1a46c:	ldr	r3, [sp, #20]
   1a470:	str	r3, [r0]
   1a474:	b	1a3c0 <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a478:	add	sl, r4, #1
   1a47c:	sub	r3, r5, sl
   1a480:	cmp	r3, #1
   1a484:	ble	1a498 <flatcc_json_parser_space_ext@@Base+0x49c>
   1a488:	ldrb	r3, [r4, #1]
   1a48c:	cmp	r3, #32
   1a490:	bhi	1a4ac <flatcc_json_parser_space_ext@@Base+0x4b0>
   1a494:	beq	1a6bc <flatcc_json_parser_space_ext@@Base+0x6c0>
   1a498:	mov	r1, sl
   1a49c:	mov	r2, r5
   1a4a0:	mov	r0, r6
   1a4a4:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1a4a8:	mov	sl, r0
   1a4ac:	cmp	r5, sl
   1a4b0:	beq	1a4c0 <flatcc_json_parser_space_ext@@Base+0x4c4>
   1a4b4:	ldrb	r3, [sl]
   1a4b8:	cmp	r3, #93	; 0x5d
   1a4bc:	beq	1a6e4 <flatcc_json_parser_space_ext@@Base+0x6e8>
   1a4c0:	cmp	r8, #0
   1a4c4:	beq	1a634 <flatcc_json_parser_space_ext@@Base+0x638>
   1a4c8:	mov	r7, #0
   1a4cc:	add	fp, sp, #20
   1a4d0:	mov	r1, r9
   1a4d4:	ldr	r0, [r6]
   1a4d8:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1a4dc:	ldrb	r3, [r0, r7]
   1a4e0:	mov	r1, sl
   1a4e4:	mov	r2, r5
   1a4e8:	mov	r0, r6
   1a4ec:	str	fp, [sp]
   1a4f0:	ldr	ip, [sp, #72]	; 0x48
   1a4f4:	blx	ip
   1a4f8:	cmp	r5, r0
   1a4fc:	mov	r4, r0
   1a500:	beq	1a3c0 <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a504:	mov	r1, #1
   1a508:	ldr	r0, [r6]
   1a50c:	bl	15700 <flatcc_builder_extend_offset_vector@@Base>
   1a510:	cmp	r0, #0
   1a514:	beq	1a3a8 <flatcc_json_parser_space_ext@@Base+0x3ac>
   1a518:	ldr	r3, [sp, #20]
   1a51c:	sub	r2, r5, r4
   1a520:	cmp	r2, #1
   1a524:	str	r3, [r0]
   1a528:	ble	1a53c <flatcc_json_parser_space_ext@@Base+0x540>
   1a52c:	ldrb	r3, [r4]
   1a530:	cmp	r3, #32
   1a534:	bhi	1a55c <flatcc_json_parser_space_ext@@Base+0x560>
   1a538:	beq	1a5cc <flatcc_json_parser_space_ext@@Base+0x5d0>
   1a53c:	mov	r1, r4
   1a540:	mov	r2, r5
   1a544:	mov	r0, r6
   1a548:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1a54c:	mov	r4, r0
   1a550:	cmp	r5, r4
   1a554:	beq	1a5c4 <flatcc_json_parser_space_ext@@Base+0x5c8>
   1a558:	ldrb	r3, [r4]
   1a55c:	cmp	r3, #44	; 0x2c
   1a560:	beq	1a5e0 <flatcc_json_parser_space_ext@@Base+0x5e4>
   1a564:	cmp	r3, #93	; 0x5d
   1a568:	add	r7, r7, #1
   1a56c:	beq	1a58c <flatcc_json_parser_space_ext@@Base+0x590>
   1a570:	mov	r1, r4
   1a574:	mov	r3, #9
   1a578:	mov	r2, r5
   1a57c:	mov	r0, r6
   1a580:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a584:	mov	r4, r0
   1a588:	b	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a58c:	add	r1, r4, #1
   1a590:	sub	r3, r5, r1
   1a594:	cmp	r3, #1
   1a598:	ble	1a5b0 <flatcc_json_parser_space_ext@@Base+0x5b4>
   1a59c:	ldrb	r3, [r4, #1]
   1a5a0:	cmp	r3, #32
   1a5a4:	movhi	r4, r1
   1a5a8:	bhi	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a5ac:	beq	1a650 <flatcc_json_parser_space_ext@@Base+0x654>
   1a5b0:	mov	r2, r5
   1a5b4:	mov	r0, r6
   1a5b8:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1a5bc:	mov	r4, r0
   1a5c0:	b	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a5c4:	add	r7, r7, #1
   1a5c8:	b	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a5cc:	ldrb	r3, [r4, #1]
   1a5d0:	cmp	r3, #32
   1a5d4:	addhi	r4, r4, #1
   1a5d8:	bls	1a53c <flatcc_json_parser_space_ext@@Base+0x540>
   1a5dc:	b	1a550 <flatcc_json_parser_space_ext@@Base+0x554>
   1a5e0:	add	sl, r4, #1
   1a5e4:	sub	r3, r5, sl
   1a5e8:	cmp	r3, #1
   1a5ec:	ble	1a600 <flatcc_json_parser_space_ext@@Base+0x604>
   1a5f0:	ldrb	r3, [r4, #1]
   1a5f4:	cmp	r3, #32
   1a5f8:	bhi	1a614 <flatcc_json_parser_space_ext@@Base+0x618>
   1a5fc:	beq	1a664 <flatcc_json_parser_space_ext@@Base+0x668>
   1a600:	mov	r1, sl
   1a604:	mov	r2, r5
   1a608:	mov	r0, r6
   1a60c:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1a610:	mov	sl, r0
   1a614:	cmp	r5, sl
   1a618:	add	r7, r7, #1
   1a61c:	beq	1a6a0 <flatcc_json_parser_space_ext@@Base+0x6a4>
   1a620:	ldrb	r3, [sl]
   1a624:	cmp	r3, #93	; 0x5d
   1a628:	beq	1a678 <flatcc_json_parser_space_ext@@Base+0x67c>
   1a62c:	cmp	r8, r7
   1a630:	bne	1a4d0 <flatcc_json_parser_space_ext@@Base+0x4d4>
   1a634:	mov	r2, r5
   1a638:	mov	r1, sl
   1a63c:	mov	r0, r6
   1a640:	mov	r3, #30
   1a644:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a648:	mov	r4, r0
   1a64c:	b	1a3c0 <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a650:	ldrb	r3, [r4, #2]
   1a654:	cmp	r3, #32
   1a658:	addhi	r4, r4, #2
   1a65c:	bls	1a5b0 <flatcc_json_parser_space_ext@@Base+0x5b4>
   1a660:	b	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a664:	ldrb	r3, [r4, #2]
   1a668:	cmp	r3, #32
   1a66c:	addhi	sl, r4, #2
   1a670:	bls	1a600 <flatcc_json_parser_space_ext@@Base+0x604>
   1a674:	b	1a614 <flatcc_json_parser_space_ext@@Base+0x618>
   1a678:	add	r4, sl, #1
   1a67c:	sub	r3, r5, r4
   1a680:	cmp	r3, #1
   1a684:	ble	1a698 <flatcc_json_parser_space_ext@@Base+0x69c>
   1a688:	ldrb	r3, [sl, #1]
   1a68c:	cmp	r3, #32
   1a690:	bhi	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a694:	beq	1a6d0 <flatcc_json_parser_space_ext@@Base+0x6d4>
   1a698:	mov	r1, r4
   1a69c:	b	1a5b0 <flatcc_json_parser_space_ext@@Base+0x5b4>
   1a6a0:	mov	r3, #9
   1a6a4:	mov	r2, r5
   1a6a8:	mov	r1, r5
   1a6ac:	mov	r0, r6
   1a6b0:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1a6b4:	mov	r4, r0
   1a6b8:	b	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a6bc:	ldrb	r3, [r4, #2]
   1a6c0:	cmp	r3, #32
   1a6c4:	addhi	sl, r4, #2
   1a6c8:	bls	1a498 <flatcc_json_parser_space_ext@@Base+0x49c>
   1a6cc:	b	1a4ac <flatcc_json_parser_space_ext@@Base+0x4b0>
   1a6d0:	ldrb	r3, [sl, #2]
   1a6d4:	cmp	r3, #32
   1a6d8:	addhi	r4, sl, #2
   1a6dc:	bls	1a698 <flatcc_json_parser_space_ext@@Base+0x69c>
   1a6e0:	b	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a6e4:	add	r4, sl, #1
   1a6e8:	sub	r3, r5, r4
   1a6ec:	cmp	r3, #1
   1a6f0:	ble	1a708 <flatcc_json_parser_space_ext@@Base+0x70c>
   1a6f4:	ldrb	r3, [sl, #1]
   1a6f8:	cmp	r3, #32
   1a6fc:	movhi	r7, #0
   1a700:	bhi	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a704:	beq	1a724 <flatcc_json_parser_space_ext@@Base+0x728>
   1a708:	mov	r1, r4
   1a70c:	mov	r2, r5
   1a710:	mov	r0, r6
   1a714:	mov	r7, #0
   1a718:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1a71c:	mov	r4, r0
   1a720:	b	1a410 <flatcc_json_parser_space_ext@@Base+0x414>
   1a724:	ldrb	r3, [sl, #2]
   1a728:	cmp	r3, #32
   1a72c:	addhi	r4, sl, #2
   1a730:	movhi	r7, #0
   1a734:	bls	1a708 <flatcc_json_parser_space_ext@@Base+0x70c>
   1a738:	b	1a410 <flatcc_json_parser_space_ext@@Base+0x414>

0001a73c <flatcc_json_parser_string_escape@@Base>:
   1a73c:	strd	r4, [sp, #-12]!
   1a740:	str	lr, [sp, #8]
   1a744:	sub	lr, r2, r1
   1a748:	cmp	lr, #1
   1a74c:	ble	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a750:	ldrb	ip, [r1]
   1a754:	cmp	ip, #92	; 0x5c
   1a758:	beq	1a778 <flatcc_json_parser_string_escape@@Base+0x3c>
   1a75c:	mov	ip, #0
   1a760:	strb	ip, [r3]
   1a764:	mov	r3, #18
   1a768:	ldrd	r4, [sp]
   1a76c:	ldr	lr, [sp, #8]
   1a770:	add	sp, sp, #12
   1a774:	b	19f08 <flatcc_json_parser_set_error@@Base>
   1a778:	ldrb	ip, [r1, #1]
   1a77c:	sub	ip, ip, #34	; 0x22
   1a780:	cmp	ip, #86	; 0x56
   1a784:	addls	pc, pc, ip, lsl #2
   1a788:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a78c:	b	1a978 <flatcc_json_parser_string_escape@@Base+0x23c>
   1a790:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a794:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a798:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a79c:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7a0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7a4:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7a8:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7ac:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7b0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7b4:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7b8:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7bc:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7c0:	b	1a990 <flatcc_json_parser_string_escape@@Base+0x254>
   1a7c4:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7c8:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7cc:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7d0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7d4:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7d8:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7dc:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7e0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7e4:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7e8:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7ec:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7f0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7f4:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7f8:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a7fc:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a800:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a804:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a808:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a80c:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a810:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a814:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a818:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a81c:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a820:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a824:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a828:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a82c:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a830:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a834:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a838:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a83c:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a840:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a844:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a848:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a84c:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a850:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a854:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a858:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a85c:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a860:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a864:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a868:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a86c:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a870:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a874:	b	1a9a8 <flatcc_json_parser_string_escape@@Base+0x26c>
   1a878:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a87c:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a880:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a884:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a888:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a88c:	b	1a9c0 <flatcc_json_parser_string_escape@@Base+0x284>
   1a890:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a894:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a898:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a89c:	b	1a9d8 <flatcc_json_parser_string_escape@@Base+0x29c>
   1a8a0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8a4:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8a8:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8ac:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8b0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8b4:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8b8:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8bc:	b	1a9f0 <flatcc_json_parser_string_escape@@Base+0x2b4>
   1a8c0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8c4:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8c8:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8cc:	b	1aa08 <flatcc_json_parser_string_escape@@Base+0x2cc>
   1a8d0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8d4:	b	1aa20 <flatcc_json_parser_string_escape@@Base+0x2e4>
   1a8d8:	b	1aa38 <flatcc_json_parser_string_escape@@Base+0x2fc>
   1a8dc:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8e0:	b	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8e4:	b	1a8e8 <flatcc_json_parser_string_escape@@Base+0x1ac>
   1a8e8:	mov	ip, #1
   1a8ec:	cmp	lr, #3
   1a8f0:	strb	ip, [r3]
   1a8f4:	ble	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a8f8:	ldrb	ip, [r1, #2]
   1a8fc:	sub	lr, ip, #48	; 0x30
   1a900:	uxtb	r4, lr
   1a904:	cmp	r4, #9
   1a908:	lslls	ip, lr, #4
   1a90c:	uxtbls	ip, ip
   1a910:	bls	1a930 <flatcc_json_parser_string_escape@@Base+0x1f4>
   1a914:	orr	ip, ip, #32
   1a918:	sub	lr, ip, #97	; 0x61
   1a91c:	cmp	lr, #5
   1a920:	bhi	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a924:	sub	ip, ip, #87	; 0x57
   1a928:	lsl	ip, ip, #4
   1a92c:	uxtb	ip, ip
   1a930:	ldrb	lr, [r1, #3]
   1a934:	sub	r4, lr, #48	; 0x30
   1a938:	uxtb	r4, r4
   1a93c:	cmp	r4, #9
   1a940:	orrls	ip, r4, ip
   1a944:	bls	1a964 <flatcc_json_parser_string_escape@@Base+0x228>
   1a948:	orr	lr, lr, #32
   1a94c:	sub	r4, lr, #97	; 0x61
   1a950:	cmp	r4, #5
   1a954:	bhi	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1a958:	sub	lr, lr, #87	; 0x57
   1a95c:	orr	ip, lr, ip
   1a960:	uxtb	ip, ip
   1a964:	add	r0, r1, #4
   1a968:	strb	ip, [r3, #1]
   1a96c:	ldrd	r4, [sp]
   1a970:	add	sp, sp, #8
   1a974:	pop	{pc}		; (ldr pc, [sp], #4)
   1a978:	mov	ip, #1
   1a97c:	mov	r2, #34	; 0x22
   1a980:	add	r0, r1, #2
   1a984:	strb	ip, [r3]
   1a988:	strb	r2, [r3, #1]
   1a98c:	b	1a96c <flatcc_json_parser_string_escape@@Base+0x230>
   1a990:	mov	ip, #1
   1a994:	mov	r2, #47	; 0x2f
   1a998:	add	r0, r1, #2
   1a99c:	strb	ip, [r3]
   1a9a0:	strb	r2, [r3, #1]
   1a9a4:	b	1a96c <flatcc_json_parser_string_escape@@Base+0x230>
   1a9a8:	mov	ip, #1
   1a9ac:	mov	r2, #92	; 0x5c
   1a9b0:	add	r0, r1, #2
   1a9b4:	strb	ip, [r3]
   1a9b8:	strb	r2, [r3, #1]
   1a9bc:	b	1a96c <flatcc_json_parser_string_escape@@Base+0x230>
   1a9c0:	mov	ip, #1
   1a9c4:	mov	r2, #8
   1a9c8:	add	r0, r1, #2
   1a9cc:	strb	ip, [r3]
   1a9d0:	strb	r2, [r3, #1]
   1a9d4:	b	1a96c <flatcc_json_parser_string_escape@@Base+0x230>
   1a9d8:	mov	ip, #1
   1a9dc:	mov	r2, #12
   1a9e0:	add	r0, r1, #2
   1a9e4:	strb	ip, [r3]
   1a9e8:	strb	r2, [r3, #1]
   1a9ec:	b	1a96c <flatcc_json_parser_string_escape@@Base+0x230>
   1a9f0:	mov	ip, #1
   1a9f4:	mov	r2, #10
   1a9f8:	add	r0, r1, #2
   1a9fc:	strb	ip, [r3]
   1aa00:	strb	r2, [r3, #1]
   1aa04:	b	1a96c <flatcc_json_parser_string_escape@@Base+0x230>
   1aa08:	mov	ip, #1
   1aa0c:	mov	r2, #13
   1aa10:	add	r0, r1, #2
   1aa14:	strb	ip, [r3]
   1aa18:	strb	r2, [r3, #1]
   1aa1c:	b	1a96c <flatcc_json_parser_string_escape@@Base+0x230>
   1aa20:	mov	ip, #1
   1aa24:	mov	r2, #9
   1aa28:	add	r0, r1, #2
   1aa2c:	strb	ip, [r3]
   1aa30:	strb	r2, [r3, #1]
   1aa34:	b	1a96c <flatcc_json_parser_string_escape@@Base+0x230>
   1aa38:	cmp	lr, #5
   1aa3c:	ble	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1aa40:	ldrb	ip, [r1, #2]
   1aa44:	sub	lr, ip, #48	; 0x30
   1aa48:	uxtb	r4, lr
   1aa4c:	cmp	r4, #9
   1aa50:	lslls	ip, lr, #12
   1aa54:	uxthls	ip, ip
   1aa58:	bls	1aa78 <flatcc_json_parser_string_escape@@Base+0x33c>
   1aa5c:	orr	ip, ip, #32
   1aa60:	sub	lr, ip, #97	; 0x61
   1aa64:	cmp	lr, #5
   1aa68:	bhi	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1aa6c:	sub	ip, ip, #87	; 0x57
   1aa70:	lsl	ip, ip, #12
   1aa74:	and	ip, ip, #61440	; 0xf000
   1aa78:	ldrb	lr, [r1, #3]
   1aa7c:	sub	r4, lr, #48	; 0x30
   1aa80:	uxtb	r5, r4
   1aa84:	cmp	r5, #9
   1aa88:	bhi	1ab0c <flatcc_json_parser_string_escape@@Base+0x3d0>
   1aa8c:	uxth	r4, r4
   1aa90:	orr	ip, ip, r4, lsl #8
   1aa94:	and	ip, ip, #65280	; 0xff00
   1aa98:	ldrb	lr, [r1, #4]
   1aa9c:	sub	r4, lr, #48	; 0x30
   1aaa0:	uxtb	r5, r4
   1aaa4:	cmp	r5, #9
   1aaa8:	bhi	1ab30 <flatcc_json_parser_string_escape@@Base+0x3f4>
   1aaac:	uxth	r4, r4
   1aab0:	orr	ip, ip, r4, lsl #4
   1aab4:	uxth	ip, ip
   1aab8:	ldrb	lr, [r1, #5]
   1aabc:	sub	r4, lr, #48	; 0x30
   1aac0:	uxtb	r5, r4
   1aac4:	cmp	r5, #9
   1aac8:	orrls	r2, ip, r4
   1aacc:	uxthls	r2, r2
   1aad0:	bls	1aaf0 <flatcc_json_parser_string_escape@@Base+0x3b4>
   1aad4:	orr	lr, lr, #32
   1aad8:	sub	r4, lr, #97	; 0x61
   1aadc:	cmp	r4, #5
   1aae0:	bhi	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1aae4:	sub	r2, lr, #87	; 0x57
   1aae8:	orr	r2, ip, r2
   1aaec:	uxth	r2, r2
   1aaf0:	cmp	r2, #127	; 0x7f
   1aaf4:	bhi	1ab54 <flatcc_json_parser_string_escape@@Base+0x418>
   1aaf8:	mov	r0, #1
   1aafc:	strb	r0, [r3]
   1ab00:	strb	r2, [r3, #1]
   1ab04:	add	r0, r1, #6
   1ab08:	b	1a96c <flatcc_json_parser_string_escape@@Base+0x230>
   1ab0c:	orr	lr, lr, #32
   1ab10:	sub	r4, lr, #97	; 0x61
   1ab14:	cmp	r4, #5
   1ab18:	bhi	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1ab1c:	sub	lr, lr, #87	; 0x57
   1ab20:	uxth	lr, lr
   1ab24:	orr	ip, ip, lr, lsl #8
   1ab28:	and	ip, ip, #65280	; 0xff00
   1ab2c:	b	1aa98 <flatcc_json_parser_string_escape@@Base+0x35c>
   1ab30:	orr	lr, lr, #32
   1ab34:	sub	r4, lr, #97	; 0x61
   1ab38:	cmp	r4, #5
   1ab3c:	bhi	1a75c <flatcc_json_parser_string_escape@@Base+0x20>
   1ab40:	sub	lr, lr, #87	; 0x57
   1ab44:	uxth	lr, lr
   1ab48:	orr	ip, ip, lr, lsl #4
   1ab4c:	uxth	ip, ip
   1ab50:	b	1aab8 <flatcc_json_parser_string_escape@@Base+0x37c>
   1ab54:	and	r0, r2, #63	; 0x3f
   1ab58:	cmp	r2, #2048	; 0x800
   1ab5c:	lsr	ip, r2, #6
   1ab60:	orr	r0, r0, #128	; 0x80
   1ab64:	mvn	lr, #127	; 0x7f
   1ab68:	bcs	1ab88 <flatcc_json_parser_string_escape@@Base+0x44c>
   1ab6c:	mvn	ip, ip, lsl #26
   1ab70:	mov	r2, #2
   1ab74:	mvn	ip, ip, lsr #26
   1ab78:	strb	r2, [r3]
   1ab7c:	strb	r0, [r3, #2]
   1ab80:	strb	ip, [r3, #1]
   1ab84:	b	1ab04 <flatcc_json_parser_string_escape@@Base+0x3c8>
   1ab88:	mvn	r4, #31
   1ab8c:	and	ip, ip, #63	; 0x3f
   1ab90:	strb	r0, [r3, #3]
   1ab94:	orr	r2, r4, r2, lsr #12
   1ab98:	orr	ip, lr, ip
   1ab9c:	mov	r0, #3
   1aba0:	strb	r0, [r3]
   1aba4:	strb	r2, [r3, #1]
   1aba8:	strb	ip, [r3, #2]
   1abac:	b	1ab04 <flatcc_json_parser_string_escape@@Base+0x3c8>

0001abb0 <flatcc_json_parser_skip_constant@@Base>:
   1abb0:	cmp	r1, r2
   1abb4:	strd	r4, [sp, #-16]!
   1abb8:	mov	r4, r1
   1abbc:	str	r6, [sp, #8]
   1abc0:	str	lr, [sp, #12]
   1abc4:	beq	1ac54 <flatcc_json_parser_skip_constant@@Base+0xa4>
   1abc8:	mov	r5, r2
   1abcc:	mov	r6, r0
   1abd0:	b	1ac30 <flatcc_json_parser_skip_constant@@Base+0x80>
   1abd4:	sub	r2, r3, #48	; 0x30
   1abd8:	cmp	r3, #46	; 0x2e
   1abdc:	cmpne	r2, #9
   1abe0:	bls	1ac48 <flatcc_json_parser_skip_constant@@Base+0x98>
   1abe4:	orr	r2, r3, #32
   1abe8:	sub	r2, r2, #97	; 0x61
   1abec:	cmp	r2, #25
   1abf0:	bls	1ac48 <flatcc_json_parser_skip_constant@@Base+0x98>
   1abf4:	sub	r2, r5, r4
   1abf8:	cmp	r2, #1
   1abfc:	ble	1ac0c <flatcc_json_parser_skip_constant@@Base+0x5c>
   1ac00:	cmp	r3, #32
   1ac04:	bhi	1ac54 <flatcc_json_parser_skip_constant@@Base+0xa4>
   1ac08:	beq	1ac68 <flatcc_json_parser_skip_constant@@Base+0xb8>
   1ac0c:	mov	r2, r5
   1ac10:	mov	r1, r4
   1ac14:	mov	r0, r6
   1ac18:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1ac1c:	cmp	r0, r4
   1ac20:	beq	1ac54 <flatcc_json_parser_skip_constant@@Base+0xa4>
   1ac24:	mov	r4, r0
   1ac28:	cmp	r5, r4
   1ac2c:	beq	1ac54 <flatcc_json_parser_skip_constant@@Base+0xa4>
   1ac30:	ldrb	r3, [r4]
   1ac34:	sub	r2, r3, #95	; 0x5f
   1ac38:	clz	r2, r2
   1ac3c:	lsr	r2, r2, #5
   1ac40:	orrs	r2, r2, r3, lsr #7
   1ac44:	beq	1abd4 <flatcc_json_parser_skip_constant@@Base+0x24>
   1ac48:	add	r4, r4, #1
   1ac4c:	cmp	r5, r4
   1ac50:	bne	1ac30 <flatcc_json_parser_skip_constant@@Base+0x80>
   1ac54:	mov	r0, r4
   1ac58:	ldrd	r4, [sp]
   1ac5c:	ldr	r6, [sp, #8]
   1ac60:	add	sp, sp, #12
   1ac64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac68:	ldrb	r3, [r4, #1]
   1ac6c:	cmp	r3, #32
   1ac70:	addhi	r0, r4, #1
   1ac74:	bls	1ac0c <flatcc_json_parser_skip_constant@@Base+0x5c>
   1ac78:	b	1ac1c <flatcc_json_parser_skip_constant@@Base+0x6c>

0001ac7c <flatcc_json_parser_match_constant@@Base>:
   1ac7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ac80:	ldr	r5, [sp, #24]
   1ac84:	strd	r6, [sp, #8]
   1ac88:	str	lr, [sp, #20]
   1ac8c:	sub	lr, r2, r1
   1ac90:	cmp	lr, r3
   1ac94:	str	r8, [sp, #16]
   1ac98:	movle	r3, #0
   1ac9c:	movle	r0, r1
   1aca0:	strle	r3, [r5]
   1aca4:	ble	1ace8 <flatcc_json_parser_match_constant@@Base+0x6c>
   1aca8:	ldr	ip, [r0, #12]
   1acac:	mov	r6, r2
   1acb0:	mov	lr, r0
   1acb4:	mov	r7, r1
   1acb8:	add	r4, r1, r3
   1acbc:	cmp	ip, #0
   1acc0:	bne	1acfc <flatcc_json_parser_match_constant@@Base+0x80>
   1acc4:	ldrb	r3, [r1, r3]
   1acc8:	cmp	r3, #32
   1accc:	beq	1adb8 <flatcc_json_parser_match_constant@@Base+0x13c>
   1acd0:	cmp	r3, #34	; 0x22
   1acd4:	beq	1ae10 <flatcc_json_parser_match_constant@@Base+0x194>
   1acd8:	cmp	r3, #92	; 0x5c
   1acdc:	beq	1ad80 <flatcc_json_parser_match_constant@@Base+0x104>
   1ace0:	mov	r0, r1
   1ace4:	str	ip, [r5]
   1ace8:	ldrd	r4, [sp]
   1acec:	ldrd	r6, [sp, #8]
   1acf0:	ldr	r8, [sp, #16]
   1acf4:	add	sp, sp, #20
   1acf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1acfc:	sub	r2, r2, r4
   1ad00:	cmp	r2, #1
   1ad04:	ble	1ad18 <flatcc_json_parser_match_constant@@Base+0x9c>
   1ad08:	ldrb	r3, [r1, r3]
   1ad0c:	cmp	r3, #32
   1ad10:	bhi	1ae4c <flatcc_json_parser_match_constant@@Base+0x1d0>
   1ad14:	beq	1ae70 <flatcc_json_parser_match_constant@@Base+0x1f4>
   1ad18:	mov	r0, lr
   1ad1c:	mov	r2, r6
   1ad20:	mov	r1, r4
   1ad24:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1ad28:	cmp	r6, r0
   1ad2c:	beq	1adac <flatcc_json_parser_match_constant@@Base+0x130>
   1ad30:	cmp	r4, r0
   1ad34:	beq	1ad60 <flatcc_json_parser_match_constant@@Base+0xe4>
   1ad38:	ldrb	r3, [r0]
   1ad3c:	sub	r2, r3, #95	; 0x5f
   1ad40:	clz	r2, r2
   1ad44:	lsr	r2, r2, #5
   1ad48:	orrs	r2, r2, r3, lsr #7
   1ad4c:	bne	1ae40 <flatcc_json_parser_match_constant@@Base+0x1c4>
   1ad50:	orr	r3, r3, #32
   1ad54:	sub	r3, r3, #97	; 0x61
   1ad58:	cmp	r3, #25
   1ad5c:	bls	1ae40 <flatcc_json_parser_match_constant@@Base+0x1c4>
   1ad60:	mov	r3, #0
   1ad64:	str	r3, [r5]
   1ad68:	ldrb	r3, [r0]
   1ad6c:	and	r2, r3, #223	; 0xdf
   1ad70:	cmp	r3, #44	; 0x2c
   1ad74:	cmpne	r2, #93	; 0x5d
   1ad78:	movne	r0, r7
   1ad7c:	b	1ace8 <flatcc_json_parser_match_constant@@Base+0x6c>
   1ad80:	mov	r1, r4
   1ad84:	mov	r3, #18
   1ad88:	ldrd	r6, [sp, #8]
   1ad8c:	ldr	r8, [sp, #16]
   1ad90:	ldr	lr, [sp, #20]
   1ad94:	str	ip, [r5]
   1ad98:	ldrd	r4, [sp]
   1ad9c:	add	sp, sp, #24
   1ada0:	b	19f08 <flatcc_json_parser_set_error@@Base>
   1ada4:	mov	r4, r2
   1ada8:	mov	r0, r4
   1adac:	mov	r3, #0
   1adb0:	str	r3, [r5]
   1adb4:	b	1ace8 <flatcc_json_parser_match_constant@@Base+0x6c>
   1adb8:	add	r3, r4, #1
   1adbc:	cmp	r2, r3
   1adc0:	beq	1ada4 <flatcc_json_parser_match_constant@@Base+0x128>
   1adc4:	ldrb	r1, [r4, #1]
   1adc8:	cmp	r1, #32
   1adcc:	bne	1adf4 <flatcc_json_parser_match_constant@@Base+0x178>
   1add0:	add	r3, r4, #2
   1add4:	b	1ade4 <flatcc_json_parser_match_constant@@Base+0x168>
   1add8:	ldrb	r1, [r3], #1
   1addc:	cmp	r1, #32
   1ade0:	bne	1adf8 <flatcc_json_parser_match_constant@@Base+0x17c>
   1ade4:	cmp	r3, r6
   1ade8:	mov	r4, r3
   1adec:	bne	1add8 <flatcc_json_parser_match_constant@@Base+0x15c>
   1adf0:	b	1ada8 <flatcc_json_parser_match_constant@@Base+0x12c>
   1adf4:	mov	r4, r3
   1adf8:	cmp	r1, #34	; 0x22
   1adfc:	beq	1ae10 <flatcc_json_parser_match_constant@@Base+0x194>
   1ae00:	mov	r3, #1
   1ae04:	mov	r0, r4
   1ae08:	str	r3, [r5]
   1ae0c:	b	1ace8 <flatcc_json_parser_match_constant@@Base+0x6c>
   1ae10:	add	r0, r4, #1
   1ae14:	cmn	r0, #1
   1ae18:	bge	1ae2c <flatcc_json_parser_match_constant@@Base+0x1b0>
   1ae1c:	ldrb	r3, [r4, #1]
   1ae20:	cmp	r3, #32
   1ae24:	bhi	1adac <flatcc_json_parser_match_constant@@Base+0x130>
   1ae28:	beq	1ae5c <flatcc_json_parser_match_constant@@Base+0x1e0>
   1ae2c:	mov	r1, r0
   1ae30:	mov	r2, #0
   1ae34:	mov	r0, lr
   1ae38:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1ae3c:	b	1adac <flatcc_json_parser_match_constant@@Base+0x130>
   1ae40:	mov	r3, #1
   1ae44:	str	r3, [r5]
   1ae48:	b	1ace8 <flatcc_json_parser_match_constant@@Base+0x6c>
   1ae4c:	cmp	r4, r6
   1ae50:	mov	r0, r4
   1ae54:	bne	1ad60 <flatcc_json_parser_match_constant@@Base+0xe4>
   1ae58:	b	1adac <flatcc_json_parser_match_constant@@Base+0x130>
   1ae5c:	ldrb	r3, [r4, #2]
   1ae60:	cmp	r3, #32
   1ae64:	addhi	r0, r4, #2
   1ae68:	bls	1ae2c <flatcc_json_parser_match_constant@@Base+0x1b0>
   1ae6c:	b	1adac <flatcc_json_parser_match_constant@@Base+0x130>
   1ae70:	ldrb	r3, [r4, #1]
   1ae74:	cmp	r3, #32
   1ae78:	addhi	r0, r4, #1
   1ae7c:	bls	1ad18 <flatcc_json_parser_match_constant@@Base+0x9c>
   1ae80:	b	1ad28 <flatcc_json_parser_match_constant@@Base+0xac>

0001ae84 <flatcc_json_parser_double@@Base>:
   1ae84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ae88:	mov	r4, #0
   1ae8c:	mov	r5, #0
   1ae90:	cmp	r1, r2
   1ae94:	strd	r6, [sp, #8]
   1ae98:	str	r8, [sp, #16]
   1ae9c:	str	lr, [sp, #20]
   1aea0:	strd	r4, [r3]
   1aea4:	beq	1af4c <flatcc_json_parser_double@@Base+0xc8>
   1aea8:	ldrb	ip, [r1]
   1aeac:	cmp	ip, #45	; 0x2d
   1aeb0:	addeq	ip, r1, #1
   1aeb4:	movne	ip, r1
   1aeb8:	sub	lr, r2, ip
   1aebc:	cmp	lr, #1
   1aec0:	ble	1aed8 <flatcc_json_parser_double@@Base+0x54>
   1aec4:	ldrb	lr, [ip]
   1aec8:	cmp	lr, #46	; 0x2e
   1aecc:	beq	1af30 <flatcc_json_parser_double@@Base+0xac>
   1aed0:	cmp	lr, #48	; 0x30
   1aed4:	beq	1af64 <flatcc_json_parser_double@@Base+0xe0>
   1aed8:	mov	r6, r1
   1aedc:	mov	r4, r2
   1aee0:	sub	r1, r4, r1
   1aee4:	mov	r7, r0
   1aee8:	mov	r2, r3
   1aeec:	mov	r0, r6
   1aef0:	mov	r5, r3
   1aef4:	bl	19214 <grisu3_diy_fp_encode_double@@Base+0x5f8>
   1aef8:	cmp	r6, r0
   1aefc:	cmpne	r0, #0
   1af00:	mov	r1, r0
   1af04:	bne	1af4c <flatcc_json_parser_double@@Base+0xc8>
   1af08:	vldr	d7, [r5]
   1af0c:	mov	r2, r4
   1af10:	mov	r1, r6
   1af14:	mov	r0, r7
   1af18:	vldr	d6, [pc, #88]	; 1af78 <flatcc_json_parser_double@@Base+0xf4>
   1af1c:	vabs.f64	d7, d7
   1af20:	vcmp.f64	d7, d6
   1af24:	vmrs	APSR_nzcv, fpscr
   1af28:	movgt	r3, #7
   1af2c:	bgt	1af34 <flatcc_json_parser_double@@Base+0xb0>
   1af30:	mov	r3, #6
   1af34:	ldrd	r4, [sp]
   1af38:	ldrd	r6, [sp, #8]
   1af3c:	ldr	r8, [sp, #16]
   1af40:	ldr	lr, [sp, #20]
   1af44:	add	sp, sp, #24
   1af48:	b	19f08 <flatcc_json_parser_set_error@@Base>
   1af4c:	ldrd	r4, [sp]
   1af50:	mov	r0, r1
   1af54:	ldrd	r6, [sp, #8]
   1af58:	ldr	r8, [sp, #16]
   1af5c:	add	sp, sp, #20
   1af60:	pop	{pc}		; (ldr pc, [sp], #4)
   1af64:	ldrb	ip, [ip, #1]
   1af68:	cmp	ip, #48	; 0x30
   1af6c:	bne	1aed8 <flatcc_json_parser_double@@Base+0x54>
   1af70:	b	1af30 <flatcc_json_parser_double@@Base+0xac>
   1af74:	nop	{0}
   1af78:			; <UNDEFINED> instruction: 0xffffffff
   1af7c:	svcvc	0x00efffff

0001af80 <flatcc_json_parser_float@@Base>:
   1af80:	mov	ip, #0
   1af84:	cmp	r1, r2
   1af88:	str	ip, [r3]
   1af8c:	beq	1b084 <flatcc_json_parser_float@@Base+0x104>
   1af90:	strd	r4, [sp, #-20]!	; 0xffffffec
   1af94:	mov	r5, r2
   1af98:	mov	r4, r1
   1af9c:	strd	r6, [sp, #8]
   1afa0:	mov	r6, r3
   1afa4:	mov	r7, r0
   1afa8:	str	lr, [sp, #16]
   1afac:	sub	sp, sp, #12
   1afb0:	ldrb	ip, [r1]
   1afb4:	cmp	ip, #45	; 0x2d
   1afb8:	addeq	ip, r1, #1
   1afbc:	movne	ip, r1
   1afc0:	sub	r3, r2, ip
   1afc4:	cmp	r3, #1
   1afc8:	ble	1afe0 <flatcc_json_parser_float@@Base+0x60>
   1afcc:	ldrb	r3, [ip]
   1afd0:	cmp	r3, #46	; 0x2e
   1afd4:	beq	1b06c <flatcc_json_parser_float@@Base+0xec>
   1afd8:	cmp	r3, #48	; 0x30
   1afdc:	beq	1b060 <flatcc_json_parser_float@@Base+0xe0>
   1afe0:	mov	r2, sp
   1afe4:	sub	r1, r5, r4
   1afe8:	mov	r0, r4
   1afec:	bl	19214 <grisu3_diy_fp_encode_double@@Base+0x5f8>
   1aff0:	vldr	d6, [sp]
   1aff4:	vldr	s14, [pc, #144]	; 1b08c <flatcc_json_parser_float@@Base+0x10c>
   1aff8:	vcvt.f32.f64	s15, d6
   1affc:	vabs.f32	s11, s15
   1b000:	vstr	s15, [r6]
   1b004:	vcmp.f32	s11, s14
   1b008:	vmrs	APSR_nzcv, fpscr
   1b00c:	bgt	1b030 <flatcc_json_parser_float@@Base+0xb0>
   1b010:	cmp	r4, r0
   1b014:	cmpne	r0, #0
   1b018:	beq	1b06c <flatcc_json_parser_float@@Base+0xec>
   1b01c:	add	sp, sp, #12
   1b020:	ldrd	r4, [sp]
   1b024:	ldrd	r6, [sp, #8]
   1b028:	add	sp, sp, #16
   1b02c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b030:	vcmpe.f64	d6, #0.0
   1b034:	vldr	s14, [pc, #84]	; 1b090 <flatcc_json_parser_float@@Base+0x110>
   1b038:	mov	r2, r5
   1b03c:	mov	r1, r4
   1b040:	mov	r0, r7
   1b044:	vldr	s15, [pc, #72]	; 1b094 <flatcc_json_parser_float@@Base+0x114>
   1b048:	mov	r3, #7
   1b04c:	vmrs	APSR_nzcv, fpscr
   1b050:	vmovpl.f32	s15, s14
   1b054:	vstr	s15, [r6]
   1b058:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b05c:	b	1b01c <flatcc_json_parser_float@@Base+0x9c>
   1b060:	ldrb	r3, [ip, #1]
   1b064:	cmp	r3, #48	; 0x30
   1b068:	bne	1afe0 <flatcc_json_parser_float@@Base+0x60>
   1b06c:	mov	r2, r5
   1b070:	mov	r1, r4
   1b074:	mov	r0, r7
   1b078:	mov	r3, #6
   1b07c:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b080:	b	1b01c <flatcc_json_parser_float@@Base+0x9c>
   1b084:	mov	r0, r1
   1b088:	bx	lr
   1b08c:	svcvc	0x007fffff
   1b090:	svcvc	0x00800000
   1b094:			; <UNDEFINED> instruction: 0xff800000

0001b098 <flatcc_json_parser_generic_json@@Base>:
   1b098:	cmp	r1, r2
   1b09c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b0a0:	strd	r6, [sp, #8]
   1b0a4:	strd	r8, [sp, #16]
   1b0a8:	strd	sl, [sp, #24]
   1b0ac:	mov	fp, r1
   1b0b0:	str	lr, [sp, #32]
   1b0b4:	sub	sp, sp, #524	; 0x20c
   1b0b8:	beq	1b980 <flatcc_json_parser_generic_json@@Base+0x8e8>
   1b0bc:	ldrb	r3, [r1]
   1b0c0:	add	r7, sp, #8
   1b0c4:	mov	r4, r2
   1b0c8:	mov	r6, r0
   1b0cc:	mov	r9, #125	; 0x7d
   1b0d0:	mov	r5, r7
   1b0d4:	add	r8, sp, #4
   1b0d8:	cmp	r5, r7
   1b0dc:	beq	1b194 <flatcc_json_parser_generic_json@@Base+0xfc>
   1b0e0:	ldrb	r2, [r5, #-1]
   1b0e4:	cmp	r2, #125	; 0x7d
   1b0e8:	beq	1b5f8 <flatcc_json_parser_generic_json@@Base+0x560>
   1b0ec:	cmp	r3, #57	; 0x39
   1b0f0:	bls	1b19c <flatcc_json_parser_generic_json@@Base+0x104>
   1b0f4:	cmp	r3, #91	; 0x5b
   1b0f8:	beq	1b5d4 <flatcc_json_parser_generic_json@@Base+0x53c>
   1b0fc:	cmp	r3, #123	; 0x7b
   1b100:	bne	1b304 <flatcc_json_parser_generic_json@@Base+0x26c>
   1b104:	add	r3, sp, #520	; 0x208
   1b108:	cmp	r5, r3
   1b10c:	beq	1b5e0 <flatcc_json_parser_generic_json@@Base+0x548>
   1b110:	add	r1, fp, #1
   1b114:	strb	r9, [r5], #1
   1b118:	sub	r3, r4, r1
   1b11c:	cmp	r3, #1
   1b120:	ble	1b148 <flatcc_json_parser_generic_json@@Base+0xb0>
   1b124:	ldrb	r3, [fp, #1]
   1b128:	cmp	r3, #32
   1b12c:	movhi	fp, r1
   1b130:	bhi	1b158 <flatcc_json_parser_generic_json@@Base+0xc0>
   1b134:	bne	1b148 <flatcc_json_parser_generic_json@@Base+0xb0>
   1b138:	ldrb	r3, [fp, #2]
   1b13c:	cmp	r3, #32
   1b140:	addhi	fp, fp, #2
   1b144:	bhi	1b158 <flatcc_json_parser_generic_json@@Base+0xc0>
   1b148:	mov	r2, r4
   1b14c:	mov	r0, r6
   1b150:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1b154:	mov	fp, r0
   1b158:	cmp	r4, fp
   1b15c:	beq	1b980 <flatcc_json_parser_generic_json@@Base+0x8e8>
   1b160:	ldrb	r3, [fp]
   1b164:	cmp	r3, #125	; 0x7d
   1b168:	bne	1b0d8 <flatcc_json_parser_generic_json@@Base+0x40>
   1b16c:	cmp	r5, r7
   1b170:	mov	r0, fp
   1b174:	bne	1b28c <flatcc_json_parser_generic_json@@Base+0x1f4>
   1b178:	add	sp, sp, #524	; 0x20c
   1b17c:	ldrd	r4, [sp]
   1b180:	ldrd	r6, [sp, #8]
   1b184:	ldrd	r8, [sp, #16]
   1b188:	ldrd	sl, [sp, #24]
   1b18c:	add	sp, sp, #32
   1b190:	pop	{pc}		; (ldr pc, [sp], #4)
   1b194:	cmp	r3, #57	; 0x39
   1b198:	bhi	1b47c <flatcc_json_parser_generic_json@@Base+0x3e4>
   1b19c:	cmp	r3, #48	; 0x30
   1b1a0:	bcs	1b510 <flatcc_json_parser_generic_json@@Base+0x478>
   1b1a4:	cmp	r3, #34	; 0x22
   1b1a8:	bne	1b2fc <flatcc_json_parser_generic_json@@Base+0x264>
   1b1ac:	add	fp, fp, #1
   1b1b0:	cmp	r4, fp
   1b1b4:	bne	1b204 <flatcc_json_parser_generic_json@@Base+0x16c>
   1b1b8:	b	1b728 <flatcc_json_parser_generic_json@@Base+0x690>
   1b1bc:	mov	r1, fp
   1b1c0:	mov	r2, r4
   1b1c4:	mov	r0, r6
   1b1c8:	bl	19f34 <flatcc_json_parser_string_part@@Base>
   1b1cc:	mov	fp, r0
   1b1d0:	mov	r1, r0
   1b1d4:	cmp	r4, fp
   1b1d8:	mov	r3, r8
   1b1dc:	mov	r2, r4
   1b1e0:	mov	r0, r6
   1b1e4:	beq	1b1f4 <flatcc_json_parser_generic_json@@Base+0x15c>
   1b1e8:	ldrb	lr, [fp]
   1b1ec:	cmp	lr, #34	; 0x22
   1b1f0:	beq	1b210 <flatcc_json_parser_generic_json@@Base+0x178>
   1b1f4:	bl	1a73c <flatcc_json_parser_string_escape@@Base>
   1b1f8:	cmp	r4, r0
   1b1fc:	mov	fp, r0
   1b200:	beq	1b728 <flatcc_json_parser_generic_json@@Base+0x690>
   1b204:	ldrb	r3, [fp]
   1b208:	cmp	r3, #34	; 0x22
   1b20c:	bne	1b1bc <flatcc_json_parser_generic_json@@Base+0x124>
   1b210:	add	r0, fp, #1
   1b214:	cmp	r4, r0
   1b218:	bne	1b284 <flatcc_json_parser_generic_json@@Base+0x1ec>
   1b21c:	b	1babc <flatcc_json_parser_generic_json@@Base+0xa24>
   1b220:	cmp	r2, #1
   1b224:	ble	1b238 <flatcc_json_parser_generic_json@@Base+0x1a0>
   1b228:	ldrb	r3, [r0]
   1b22c:	cmp	r3, #32
   1b230:	bhi	1b248 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1b234:	beq	1b368 <flatcc_json_parser_generic_json@@Base+0x2d0>
   1b238:	mov	r1, r0
   1b23c:	mov	r2, r4
   1b240:	mov	r0, r6
   1b244:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1b248:	cmp	r4, r0
   1b24c:	beq	1b380 <flatcc_json_parser_generic_json@@Base+0x2e8>
   1b250:	ldrb	r3, [r0]
   1b254:	cmp	r3, #44	; 0x2c
   1b258:	beq	1b3ac <flatcc_json_parser_generic_json@@Base+0x314>
   1b25c:	cmp	r3, #125	; 0x7d
   1b260:	beq	1b334 <flatcc_json_parser_generic_json@@Base+0x29c>
   1b264:	mov	r1, r0
   1b268:	mov	r3, #10
   1b26c:	mov	r2, r4
   1b270:	mov	r0, r6
   1b274:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b278:	cmp	r4, r0
   1b27c:	beq	1b380 <flatcc_json_parser_generic_json@@Base+0x2e8>
   1b280:	mov	r5, sl
   1b284:	cmp	r5, r7
   1b288:	beq	1b178 <flatcc_json_parser_generic_json@@Base+0xe0>
   1b28c:	ldrb	r3, [r5, #-1]
   1b290:	sub	sl, r5, #1
   1b294:	sub	r2, r4, r0
   1b298:	cmp	r3, #93	; 0x5d
   1b29c:	bne	1b220 <flatcc_json_parser_generic_json@@Base+0x188>
   1b2a0:	cmp	r2, #1
   1b2a4:	ble	1b2b8 <flatcc_json_parser_generic_json@@Base+0x220>
   1b2a8:	ldrb	r3, [r0]
   1b2ac:	cmp	r3, #32
   1b2b0:	bhi	1b2c8 <flatcc_json_parser_generic_json@@Base+0x230>
   1b2b4:	beq	1b41c <flatcc_json_parser_generic_json@@Base+0x384>
   1b2b8:	mov	r1, r0
   1b2bc:	mov	r2, r4
   1b2c0:	mov	r0, r6
   1b2c4:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1b2c8:	cmp	r4, r0
   1b2cc:	beq	1b380 <flatcc_json_parser_generic_json@@Base+0x2e8>
   1b2d0:	ldrb	r3, [r0]
   1b2d4:	cmp	r3, #44	; 0x2c
   1b2d8:	beq	1b430 <flatcc_json_parser_generic_json@@Base+0x398>
   1b2dc:	cmp	r3, #93	; 0x5d
   1b2e0:	beq	1b334 <flatcc_json_parser_generic_json@@Base+0x29c>
   1b2e4:	mov	r1, r0
   1b2e8:	mov	r3, #9
   1b2ec:	mov	r2, r4
   1b2f0:	mov	r0, r6
   1b2f4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b2f8:	b	1b278 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b2fc:	cmp	r3, #45	; 0x2d
   1b300:	beq	1b510 <flatcc_json_parser_generic_json@@Base+0x478>
   1b304:	mov	r2, r4
   1b308:	mov	r1, fp
   1b30c:	mov	r0, r6
   1b310:	bl	1abb0 <flatcc_json_parser_skip_constant@@Base>
   1b314:	cmp	r0, fp
   1b318:	bne	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b31c:	mov	r2, r4
   1b320:	mov	r1, fp
   1b324:	mov	r0, r6
   1b328:	mov	r3, #5
   1b32c:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b330:	b	1b178 <flatcc_json_parser_generic_json@@Base+0xe0>
   1b334:	add	r1, r0, #1
   1b338:	sub	r3, r4, r1
   1b33c:	cmp	r3, #1
   1b340:	ble	1b358 <flatcc_json_parser_generic_json@@Base+0x2c0>
   1b344:	ldrb	r3, [r0, #1]
   1b348:	cmp	r3, #32
   1b34c:	movhi	r0, r1
   1b350:	bhi	1b278 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b354:	beq	1b4fc <flatcc_json_parser_generic_json@@Base+0x464>
   1b358:	mov	r2, r4
   1b35c:	mov	r0, r6
   1b360:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1b364:	b	1b278 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b368:	ldrb	r3, [r0, #1]
   1b36c:	cmp	r3, #32
   1b370:	addhi	r0, r0, #1
   1b374:	bls	1b238 <flatcc_json_parser_generic_json@@Base+0x1a0>
   1b378:	cmp	r4, r0
   1b37c:	bne	1b250 <flatcc_json_parser_generic_json@@Base+0x1b8>
   1b380:	cmp	sl, r7
   1b384:	beq	1b178 <flatcc_json_parser_generic_json@@Base+0xe0>
   1b388:	ldrb	r3, [sl, #-1]
   1b38c:	mov	r1, r0
   1b390:	mov	r2, r4
   1b394:	mov	r0, r6
   1b398:	cmp	r3, #93	; 0x5d
   1b39c:	moveq	r3, #9
   1b3a0:	movne	r3, #10
   1b3a4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b3a8:	b	1b178 <flatcc_json_parser_generic_json@@Base+0xe0>
   1b3ac:	add	fp, r0, #1
   1b3b0:	sub	r3, r4, fp
   1b3b4:	cmp	r3, #1
   1b3b8:	ble	1b3cc <flatcc_json_parser_generic_json@@Base+0x334>
   1b3bc:	ldrb	r3, [r0, #1]
   1b3c0:	cmp	r3, #32
   1b3c4:	bhi	1b3e0 <flatcc_json_parser_generic_json@@Base+0x348>
   1b3c8:	beq	1b4e8 <flatcc_json_parser_generic_json@@Base+0x450>
   1b3cc:	mov	r1, fp
   1b3d0:	mov	r2, r4
   1b3d4:	mov	r0, r6
   1b3d8:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1b3dc:	mov	fp, r0
   1b3e0:	cmp	r4, fp
   1b3e4:	beq	1b8a8 <flatcc_json_parser_generic_json@@Base+0x810>
   1b3e8:	ldrb	r3, [fp]
   1b3ec:	cmp	r3, #125	; 0x7d
   1b3f0:	bne	1b0d8 <flatcc_json_parser_generic_json@@Base+0x40>
   1b3f4:	add	r0, fp, #1
   1b3f8:	sub	r3, r4, r0
   1b3fc:	cmp	r3, #1
   1b400:	ble	1b414 <flatcc_json_parser_generic_json@@Base+0x37c>
   1b404:	ldrb	r3, [fp, #1]
   1b408:	cmp	r3, #32
   1b40c:	bhi	1b278 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b410:	beq	1b9d8 <flatcc_json_parser_generic_json@@Base+0x940>
   1b414:	mov	r1, r0
   1b418:	b	1b358 <flatcc_json_parser_generic_json@@Base+0x2c0>
   1b41c:	ldrb	r3, [r0, #1]
   1b420:	cmp	r3, #32
   1b424:	addhi	r0, r0, #1
   1b428:	bls	1b2b8 <flatcc_json_parser_generic_json@@Base+0x220>
   1b42c:	b	1b2c8 <flatcc_json_parser_generic_json@@Base+0x230>
   1b430:	add	fp, r0, #1
   1b434:	sub	r3, r4, fp
   1b438:	cmp	r3, #1
   1b43c:	ble	1b450 <flatcc_json_parser_generic_json@@Base+0x3b8>
   1b440:	ldrb	r3, [r0, #1]
   1b444:	cmp	r3, #32
   1b448:	bhi	1b464 <flatcc_json_parser_generic_json@@Base+0x3cc>
   1b44c:	beq	1b8c0 <flatcc_json_parser_generic_json@@Base+0x828>
   1b450:	mov	r1, fp
   1b454:	mov	r2, r4
   1b458:	mov	r0, r6
   1b45c:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1b460:	mov	fp, r0
   1b464:	cmp	r4, fp
   1b468:	beq	1b918 <flatcc_json_parser_generic_json@@Base+0x880>
   1b46c:	ldrb	r3, [fp]
   1b470:	cmp	r3, #93	; 0x5d
   1b474:	bne	1b0d8 <flatcc_json_parser_generic_json@@Base+0x40>
   1b478:	b	1b3f4 <flatcc_json_parser_generic_json@@Base+0x35c>
   1b47c:	cmp	r3, #91	; 0x5b
   1b480:	bne	1b0fc <flatcc_json_parser_generic_json@@Base+0x64>
   1b484:	add	r1, fp, #1
   1b488:	mov	r3, #93	; 0x5d
   1b48c:	sub	r2, r4, r1
   1b490:	cmp	r2, #1
   1b494:	strb	r3, [r5], #1
   1b498:	ble	1b4c0 <flatcc_json_parser_generic_json@@Base+0x428>
   1b49c:	ldrb	r3, [fp, #1]
   1b4a0:	cmp	r3, #32
   1b4a4:	movhi	fp, r1
   1b4a8:	bhi	1b4d0 <flatcc_json_parser_generic_json@@Base+0x438>
   1b4ac:	bne	1b4c0 <flatcc_json_parser_generic_json@@Base+0x428>
   1b4b0:	ldrb	r3, [fp, #2]
   1b4b4:	cmp	r3, #32
   1b4b8:	addhi	fp, fp, #2
   1b4bc:	bhi	1b4d0 <flatcc_json_parser_generic_json@@Base+0x438>
   1b4c0:	mov	r2, r4
   1b4c4:	mov	r0, r6
   1b4c8:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1b4cc:	mov	fp, r0
   1b4d0:	cmp	r4, fp
   1b4d4:	beq	1b980 <flatcc_json_parser_generic_json@@Base+0x8e8>
   1b4d8:	ldrb	r3, [fp]
   1b4dc:	cmp	r3, #93	; 0x5d
   1b4e0:	bne	1b0d8 <flatcc_json_parser_generic_json@@Base+0x40>
   1b4e4:	b	1b16c <flatcc_json_parser_generic_json@@Base+0xd4>
   1b4e8:	ldrb	r3, [r0, #2]
   1b4ec:	cmp	r3, #32
   1b4f0:	addhi	fp, r0, #2
   1b4f4:	bls	1b3cc <flatcc_json_parser_generic_json@@Base+0x334>
   1b4f8:	b	1b3e0 <flatcc_json_parser_generic_json@@Base+0x348>
   1b4fc:	ldrb	r3, [r0, #2]
   1b500:	cmp	r3, #32
   1b504:	addhi	r0, r0, #2
   1b508:	bls	1b358 <flatcc_json_parser_generic_json@@Base+0x2c0>
   1b50c:	b	1b278 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b510:	cmp	r4, fp
   1b514:	beq	1b90c <flatcc_json_parser_generic_json@@Base+0x874>
   1b518:	cmp	r3, #45	; 0x2d
   1b51c:	beq	1b8d4 <flatcc_json_parser_generic_json@@Base+0x83c>
   1b520:	ldrb	r3, [fp]
   1b524:	cmp	r3, #48	; 0x30
   1b528:	beq	1b8f8 <flatcc_json_parser_generic_json@@Base+0x860>
   1b52c:	sub	r3, r3, #49	; 0x31
   1b530:	cmp	r3, #8
   1b534:	bhi	1b990 <flatcc_json_parser_generic_json@@Base+0x8f8>
   1b538:	add	r0, fp, #1
   1b53c:	cmp	r4, r0
   1b540:	beq	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b544:	ldrb	r3, [fp, #1]
   1b548:	sub	r2, r3, #48	; 0x30
   1b54c:	cmp	r2, #9
   1b550:	bhi	1b574 <flatcc_json_parser_generic_json@@Base+0x4dc>
   1b554:	add	ip, fp, #2
   1b558:	cmp	ip, r4
   1b55c:	mov	r0, ip
   1b560:	beq	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b564:	ldrb	r3, [ip], #1
   1b568:	sub	r2, r3, #48	; 0x30
   1b56c:	cmp	r2, #9
   1b570:	bls	1b558 <flatcc_json_parser_generic_json@@Base+0x4c0>
   1b574:	cmp	r3, #46	; 0x2e
   1b578:	beq	1b930 <flatcc_json_parser_generic_json@@Base+0x898>
   1b57c:	and	r2, r3, #223	; 0xdf
   1b580:	cmp	r2, #69	; 0x45
   1b584:	bne	1b840 <flatcc_json_parser_generic_json@@Base+0x7a8>
   1b588:	add	r1, r0, #1
   1b58c:	cmp	r4, r1
   1b590:	beq	1b8e0 <flatcc_json_parser_generic_json@@Base+0x848>
   1b594:	ldrb	r3, [r0, #1]
   1b598:	sub	r2, r3, #43	; 0x2b
   1b59c:	tst	r2, #253	; 0xfd
   1b5a0:	bne	1b5b4 <flatcc_json_parser_generic_json@@Base+0x51c>
   1b5a4:	add	r1, r0, #2
   1b5a8:	cmp	r4, r1
   1b5ac:	beq	1b5c0 <flatcc_json_parser_generic_json@@Base+0x528>
   1b5b0:	ldrb	r3, [r0, #2]
   1b5b4:	sub	r3, r3, #48	; 0x30
   1b5b8:	cmp	r3, #9
   1b5bc:	bls	1b804 <flatcc_json_parser_generic_json@@Base+0x76c>
   1b5c0:	mov	r3, #6
   1b5c4:	mov	r2, r4
   1b5c8:	mov	r0, r6
   1b5cc:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b5d0:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b5d4:	add	r3, sp, #520	; 0x208
   1b5d8:	cmp	r5, r3
   1b5dc:	bne	1b484 <flatcc_json_parser_generic_json@@Base+0x3ec>
   1b5e0:	mov	r2, r4
   1b5e4:	mov	r1, fp
   1b5e8:	mov	r0, r6
   1b5ec:	mov	r3, #2
   1b5f0:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b5f4:	b	1b178 <flatcc_json_parser_generic_json@@Base+0xe0>
   1b5f8:	cmp	r3, #34	; 0x22
   1b5fc:	moveq	r3, #0
   1b600:	addeq	fp, fp, #1
   1b604:	streq	r3, [r6, #12]
   1b608:	beq	1b764 <flatcc_json_parser_generic_json@@Base+0x6cc>
   1b60c:	cmp	r3, #46	; 0x2e
   1b610:	movne	r3, #1
   1b614:	strne	r3, [r6, #12]
   1b618:	beq	1b740 <flatcc_json_parser_generic_json@@Base+0x6a8>
   1b61c:	cmp	r4, fp
   1b620:	beq	1ba28 <flatcc_json_parser_generic_json@@Base+0x990>
   1b624:	ldrb	r3, [fp]
   1b628:	cmp	r3, #32
   1b62c:	bls	1ba20 <flatcc_json_parser_generic_json@@Base+0x988>
   1b630:	mov	ip, fp
   1b634:	sub	r2, r3, #48	; 0x30
   1b638:	cmp	r3, #46	; 0x2e
   1b63c:	cmpne	r3, #95	; 0x5f
   1b640:	uxtb	lr, r2
   1b644:	add	r1, ip, #1
   1b648:	mov	r0, ip
   1b64c:	beq	1b7e0 <flatcc_json_parser_generic_json@@Base+0x748>
   1b650:	orr	r2, r3, #32
   1b654:	tst	r3, #128	; 0x80
   1b658:	sub	r2, r2, #97	; 0x61
   1b65c:	bne	1b7e0 <flatcc_json_parser_generic_json@@Base+0x748>
   1b660:	cmp	lr, #9
   1b664:	uxtb	r2, r2
   1b668:	bls	1b7e0 <flatcc_json_parser_generic_json@@Base+0x748>
   1b66c:	cmp	r2, #25
   1b670:	bls	1b7dc <flatcc_json_parser_generic_json@@Base+0x744>
   1b674:	sub	r3, r4, r0
   1b678:	cmp	r3, #1
   1b67c:	ble	1b690 <flatcc_json_parser_generic_json@@Base+0x5f8>
   1b680:	ldrb	r3, [r0]
   1b684:	cmp	r3, #32
   1b688:	bhi	1b6a0 <flatcc_json_parser_generic_json@@Base+0x608>
   1b68c:	beq	1b9b0 <flatcc_json_parser_generic_json@@Base+0x918>
   1b690:	mov	r1, r0
   1b694:	mov	r2, r4
   1b698:	mov	r0, r6
   1b69c:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1b6a0:	cmp	r4, r0
   1b6a4:	beq	1ba48 <flatcc_json_parser_generic_json@@Base+0x9b0>
   1b6a8:	ldrb	r3, [r0]
   1b6ac:	cmp	r3, #58	; 0x3a
   1b6b0:	bne	1ba30 <flatcc_json_parser_generic_json@@Base+0x998>
   1b6b4:	add	fp, r0, #1
   1b6b8:	sub	r3, r4, fp
   1b6bc:	cmp	r3, #1
   1b6c0:	ble	1b6d4 <flatcc_json_parser_generic_json@@Base+0x63c>
   1b6c4:	ldrb	r3, [r0, #1]
   1b6c8:	cmp	r3, #32
   1b6cc:	bhi	1b6ec <flatcc_json_parser_generic_json@@Base+0x654>
   1b6d0:	beq	1b9c4 <flatcc_json_parser_generic_json@@Base+0x92c>
   1b6d4:	mov	r1, fp
   1b6d8:	mov	r2, r4
   1b6dc:	mov	r0, r6
   1b6e0:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1b6e4:	ldrb	r3, [r0]
   1b6e8:	mov	fp, r0
   1b6ec:	cmp	r3, #57	; 0x39
   1b6f0:	bhi	1b0f4 <flatcc_json_parser_generic_json@@Base+0x5c>
   1b6f4:	cmp	r3, #48	; 0x30
   1b6f8:	bcs	1b510 <flatcc_json_parser_generic_json@@Base+0x478>
   1b6fc:	cmp	r3, #34	; 0x22
   1b700:	bne	1b2fc <flatcc_json_parser_generic_json@@Base+0x264>
   1b704:	cmp	fp, r4
   1b708:	bne	1b1ac <flatcc_json_parser_generic_json@@Base+0x114>
   1b70c:	mov	r3, #16
   1b710:	mov	r2, r4
   1b714:	mov	r1, r4
   1b718:	mov	r0, r6
   1b71c:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b720:	mov	fp, r0
   1b724:	b	1b1b0 <flatcc_json_parser_generic_json@@Base+0x118>
   1b728:	mov	r1, fp
   1b72c:	mov	r3, #20
   1b730:	mov	r2, r4
   1b734:	mov	r0, r6
   1b738:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b73c:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b740:	mov	r1, fp
   1b744:	mov	r3, #5
   1b748:	mov	r2, r4
   1b74c:	mov	r0, r6
   1b750:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b754:	ldr	r3, [r6, #12]
   1b758:	mov	fp, r0
   1b75c:	cmp	r3, #0
   1b760:	bne	1b61c <flatcc_json_parser_generic_json@@Base+0x584>
   1b764:	cmp	r4, fp
   1b768:	beq	1b7c4 <flatcc_json_parser_generic_json@@Base+0x72c>
   1b76c:	ldrb	r2, [fp]
   1b770:	cmp	r2, #34	; 0x22
   1b774:	bne	1b794 <flatcc_json_parser_generic_json@@Base+0x6fc>
   1b778:	b	1b988 <flatcc_json_parser_generic_json@@Base+0x8f0>
   1b77c:	add	fp, r3, #1
   1b780:	cmp	r4, fp
   1b784:	beq	1b7c4 <flatcc_json_parser_generic_json@@Base+0x72c>
   1b788:	ldrb	r2, [r3, #1]
   1b78c:	cmp	r2, #34	; 0x22
   1b790:	beq	1b988 <flatcc_json_parser_generic_json@@Base+0x8f0>
   1b794:	cmp	r2, #92	; 0x5c
   1b798:	mov	r3, fp
   1b79c:	bne	1b77c <flatcc_json_parser_generic_json@@Base+0x6e4>
   1b7a0:	sub	r2, r4, fp
   1b7a4:	add	r3, fp, #1
   1b7a8:	cmp	r2, #1
   1b7ac:	bgt	1b77c <flatcc_json_parser_generic_json@@Base+0x6e4>
   1b7b0:	cmp	r4, fp
   1b7b4:	beq	1b7c4 <flatcc_json_parser_generic_json@@Base+0x72c>
   1b7b8:	ldrb	r3, [fp]
   1b7bc:	cmp	r3, #34	; 0x22
   1b7c0:	beq	1b988 <flatcc_json_parser_generic_json@@Base+0x8f0>
   1b7c4:	mov	r1, fp
   1b7c8:	mov	r3, #20
   1b7cc:	mov	r2, r4
   1b7d0:	mov	r0, r6
   1b7d4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b7d8:	b	1b674 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1b7dc:	add	r1, ip, #1
   1b7e0:	cmp	r4, r1
   1b7e4:	mov	r0, r1
   1b7e8:	mov	ip, r1
   1b7ec:	beq	1b9ec <flatcc_json_parser_generic_json@@Base+0x954>
   1b7f0:	ldrb	r2, [r1]
   1b7f4:	cmp	r2, #32
   1b7f8:	bls	1b9ec <flatcc_json_parser_generic_json@@Base+0x954>
   1b7fc:	mov	r3, r2
   1b800:	b	1b634 <flatcc_json_parser_generic_json@@Base+0x59c>
   1b804:	add	r0, r1, #1
   1b808:	cmp	r4, r0
   1b80c:	beq	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b810:	ldrb	r3, [r1, #1]
   1b814:	sub	r2, r3, #48	; 0x30
   1b818:	cmp	r2, #9
   1b81c:	bhi	1ba60 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1b820:	add	r2, r1, #2
   1b824:	cmp	r4, r2
   1b828:	mov	r0, r2
   1b82c:	beq	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b830:	ldrb	r3, [r2], #1
   1b834:	sub	r1, r3, #48	; 0x30
   1b838:	cmp	r1, #9
   1b83c:	bls	1b824 <flatcc_json_parser_generic_json@@Base+0x78c>
   1b840:	cmp	r3, #32
   1b844:	beq	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b848:	bls	1b88c <flatcc_json_parser_generic_json@@Base+0x7f4>
   1b84c:	cmp	r3, #58	; 0x3a
   1b850:	beq	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b854:	bls	1b880 <flatcc_json_parser_generic_json@@Base+0x7e8>
   1b858:	cmp	r3, #93	; 0x5d
   1b85c:	beq	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b860:	cmp	r3, #125	; 0x7d
   1b864:	beq	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b868:	mov	r1, r0
   1b86c:	mov	r3, #6
   1b870:	mov	r2, r4
   1b874:	mov	r0, r6
   1b878:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b87c:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b880:	cmp	r3, #44	; 0x2c
   1b884:	bne	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b888:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b88c:	cmp	r3, #9
   1b890:	bcc	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b894:	cmp	r3, #11
   1b898:	bls	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b89c:	cmp	r3, #13
   1b8a0:	bne	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b8a4:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b8a8:	mov	r3, #10
   1b8ac:	mov	r2, r4
   1b8b0:	mov	r1, r4
   1b8b4:	mov	r0, r6
   1b8b8:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b8bc:	b	1b278 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b8c0:	ldrb	r3, [r0, #2]
   1b8c4:	cmp	r3, #32
   1b8c8:	addhi	fp, r0, #2
   1b8cc:	bls	1b450 <flatcc_json_parser_generic_json@@Base+0x3b8>
   1b8d0:	b	1b464 <flatcc_json_parser_generic_json@@Base+0x3cc>
   1b8d4:	add	fp, fp, #1
   1b8d8:	cmp	r4, fp
   1b8dc:	bne	1b520 <flatcc_json_parser_generic_json@@Base+0x488>
   1b8e0:	mov	r3, #6
   1b8e4:	mov	r2, r4
   1b8e8:	mov	r1, r4
   1b8ec:	mov	r0, r6
   1b8f0:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b8f4:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b8f8:	add	r0, fp, #1
   1b8fc:	cmp	r4, r0
   1b900:	beq	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b904:	ldrb	r3, [fp, #1]
   1b908:	b	1b574 <flatcc_json_parser_generic_json@@Base+0x4dc>
   1b90c:	mov	sl, r5
   1b910:	mov	r0, r4
   1b914:	b	1b380 <flatcc_json_parser_generic_json@@Base+0x2e8>
   1b918:	mov	r3, #9
   1b91c:	mov	r2, r4
   1b920:	mov	r1, r4
   1b924:	mov	r0, r6
   1b928:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b92c:	b	1b278 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b930:	ldrb	r3, [r0, #1]
   1b934:	sub	r3, r3, #48	; 0x30
   1b938:	cmp	r3, #9
   1b93c:	bhi	1ba08 <flatcc_json_parser_generic_json@@Base+0x970>
   1b940:	add	r2, r0, #2
   1b944:	cmp	r4, r2
   1b948:	beq	1bab4 <flatcc_json_parser_generic_json@@Base+0xa1c>
   1b94c:	ldrb	r3, [r0, #2]
   1b950:	sub	r1, r3, #48	; 0x30
   1b954:	cmp	r1, #9
   1b958:	bhi	1b9a8 <flatcc_json_parser_generic_json@@Base+0x910>
   1b95c:	add	r2, r0, #3
   1b960:	cmp	r2, r4
   1b964:	mov	r0, r2
   1b968:	beq	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b96c:	ldrb	r3, [r2], #1
   1b970:	sub	r1, r3, #48	; 0x30
   1b974:	cmp	r1, #9
   1b978:	bls	1b960 <flatcc_json_parser_generic_json@@Base+0x8c8>
   1b97c:	b	1b57c <flatcc_json_parser_generic_json@@Base+0x4e4>
   1b980:	mov	r0, fp
   1b984:	b	1b178 <flatcc_json_parser_generic_json@@Base+0xe0>
   1b988:	add	r0, fp, #1
   1b98c:	b	1b674 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1b990:	mov	r1, fp
   1b994:	mov	r3, #6
   1b998:	mov	r2, r4
   1b99c:	mov	r0, r6
   1b9a0:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1b9a4:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1b9a8:	mov	r0, r2
   1b9ac:	b	1b57c <flatcc_json_parser_generic_json@@Base+0x4e4>
   1b9b0:	ldrb	r3, [r0, #1]
   1b9b4:	cmp	r3, #32
   1b9b8:	addhi	r0, r0, #1
   1b9bc:	bls	1b690 <flatcc_json_parser_generic_json@@Base+0x5f8>
   1b9c0:	b	1b6a0 <flatcc_json_parser_generic_json@@Base+0x608>
   1b9c4:	ldrb	r3, [r0, #2]
   1b9c8:	cmp	r3, #32
   1b9cc:	addhi	fp, r0, #2
   1b9d0:	bls	1b6d4 <flatcc_json_parser_generic_json@@Base+0x63c>
   1b9d4:	b	1b6ec <flatcc_json_parser_generic_json@@Base+0x654>
   1b9d8:	ldrb	r3, [fp, #2]
   1b9dc:	cmp	r3, #32
   1b9e0:	addhi	r0, fp, #2
   1b9e4:	bls	1b414 <flatcc_json_parser_generic_json@@Base+0x37c>
   1b9e8:	b	1b278 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b9ec:	cmp	r3, #46	; 0x2e
   1b9f0:	bne	1b674 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1b9f4:	mov	r3, #5
   1b9f8:	mov	r2, r4
   1b9fc:	mov	r0, r6
   1ba00:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1ba04:	b	1b674 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1ba08:	add	r1, r0, #1
   1ba0c:	mov	r3, #6
   1ba10:	mov	r2, r4
   1ba14:	mov	r0, r6
   1ba18:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1ba1c:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x17c>
   1ba20:	mov	r0, fp
   1ba24:	b	1b674 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1ba28:	mov	r0, r4
   1ba2c:	b	1b674 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1ba30:	mov	r1, r0
   1ba34:	mov	r2, r4
   1ba38:	mov	r0, r6
   1ba3c:	mov	r3, #4
   1ba40:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1ba44:	b	1b178 <flatcc_json_parser_generic_json@@Base+0xe0>
   1ba48:	mov	r0, r6
   1ba4c:	mov	r3, #10
   1ba50:	mov	r2, r4
   1ba54:	mov	r1, r4
   1ba58:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1ba5c:	b	1b178 <flatcc_json_parser_generic_json@@Base+0xe0>
   1ba60:	cmp	r3, #32
   1ba64:	beq	1b284 <flatcc_json_parser_generic_json@@Base+0x1ec>
   1ba68:	bls	1ba8c <flatcc_json_parser_generic_json@@Base+0x9f4>
   1ba6c:	cmp	r3, #58	; 0x3a
   1ba70:	beq	1b284 <flatcc_json_parser_generic_json@@Base+0x1ec>
   1ba74:	bls	1baa8 <flatcc_json_parser_generic_json@@Base+0xa10>
   1ba78:	cmp	r3, #93	; 0x5d
   1ba7c:	beq	1b284 <flatcc_json_parser_generic_json@@Base+0x1ec>
   1ba80:	cmp	r3, #125	; 0x7d
   1ba84:	bne	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1ba88:	b	1b284 <flatcc_json_parser_generic_json@@Base+0x1ec>
   1ba8c:	cmp	r3, #9
   1ba90:	bcc	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1ba94:	cmp	r3, #11
   1ba98:	bls	1b284 <flatcc_json_parser_generic_json@@Base+0x1ec>
   1ba9c:	cmp	r3, #13
   1baa0:	bne	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1baa4:	b	1b284 <flatcc_json_parser_generic_json@@Base+0x1ec>
   1baa8:	cmp	r3, #44	; 0x2c
   1baac:	bne	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1bab0:	b	1b284 <flatcc_json_parser_generic_json@@Base+0x1ec>
   1bab4:	mov	r0, r4
   1bab8:	b	1b868 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1babc:	mov	sl, r5
   1bac0:	b	1b380 <flatcc_json_parser_generic_json@@Base+0x2e8>

0001bac4 <flatcc_json_parser_unmatched_symbol@@Base>:
   1bac4:	ldr	ip, [r0, #8]
   1bac8:	tst	ip, #1
   1bacc:	beq	1bc50 <flatcc_json_parser_unmatched_symbol@@Base+0x18c>
   1bad0:	strd	r4, [sp, #-16]!
   1bad4:	mov	r4, r2
   1bad8:	mov	r5, r0
   1badc:	ldr	r2, [r0, #12]
   1bae0:	mov	r3, r1
   1bae4:	str	r6, [sp, #8]
   1bae8:	str	lr, [sp, #12]
   1baec:	cmp	r2, #0
   1baf0:	beq	1bbb4 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   1baf4:	cmp	r1, r4
   1baf8:	beq	1bb68 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   1bafc:	ldrb	r2, [r1]
   1bb00:	cmp	r2, #32
   1bb04:	bls	1bb4c <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   1bb08:	mov	ip, r1
   1bb0c:	sub	r3, r2, #48	; 0x30
   1bb10:	cmp	r2, #46	; 0x2e
   1bb14:	cmpne	r2, #95	; 0x5f
   1bb18:	uxtb	r0, r3
   1bb1c:	add	r1, ip, #1
   1bb20:	mov	r3, ip
   1bb24:	beq	1bc2c <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   1bb28:	orr	ip, r2, #32
   1bb2c:	tst	r2, #128	; 0x80
   1bb30:	sub	ip, ip, #97	; 0x61
   1bb34:	bne	1bc2c <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   1bb38:	cmp	r0, #9
   1bb3c:	uxtb	ip, ip
   1bb40:	bls	1bc2c <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   1bb44:	cmp	ip, #25
   1bb48:	bls	1bc28 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   1bb4c:	sub	r2, r4, r3
   1bb50:	cmp	r2, #1
   1bb54:	ble	1bb68 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   1bb58:	ldrb	r2, [r3]
   1bb5c:	cmp	r2, #32
   1bb60:	bhi	1bb7c <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   1bb64:	beq	1bcac <flatcc_json_parser_unmatched_symbol@@Base+0x1e8>
   1bb68:	mov	r1, r3
   1bb6c:	mov	r2, r4
   1bb70:	mov	r0, r5
   1bb74:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1bb78:	mov	r3, r0
   1bb7c:	cmp	r4, r3
   1bb80:	beq	1bb90 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1bb84:	ldrb	r2, [r3]
   1bb88:	cmp	r2, #58	; 0x3a
   1bb8c:	beq	1bc60 <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   1bb90:	mov	r2, r4
   1bb94:	mov	r1, r3
   1bb98:	ldr	r6, [sp, #8]
   1bb9c:	mov	r0, r5
   1bba0:	mov	r3, #4
   1bba4:	ldrd	r4, [sp]
   1bba8:	ldr	lr, [sp, #12]
   1bbac:	add	sp, sp, #16
   1bbb0:	b	19f08 <flatcc_json_parser_set_error@@Base>
   1bbb4:	cmp	r1, r4
   1bbb8:	beq	1bc0c <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   1bbbc:	ldrb	r1, [r1]
   1bbc0:	cmp	r1, #34	; 0x22
   1bbc4:	bne	1bbe4 <flatcc_json_parser_unmatched_symbol@@Base+0x120>
   1bbc8:	b	1bc58 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   1bbcc:	add	r3, r2, #1
   1bbd0:	cmp	r4, r3
   1bbd4:	beq	1bc0c <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   1bbd8:	ldrb	r1, [r2, #1]
   1bbdc:	cmp	r1, #34	; 0x22
   1bbe0:	beq	1bc58 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   1bbe4:	cmp	r1, #92	; 0x5c
   1bbe8:	mov	r2, r3
   1bbec:	bne	1bbcc <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   1bbf0:	sub	r1, r4, r3
   1bbf4:	add	r2, r3, #1
   1bbf8:	cmp	r1, #1
   1bbfc:	bgt	1bbcc <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   1bc00:	ldrb	r2, [r3]
   1bc04:	cmp	r2, #34	; 0x22
   1bc08:	beq	1bc58 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   1bc0c:	mov	r1, r3
   1bc10:	mov	r2, r4
   1bc14:	mov	r3, #20
   1bc18:	mov	r0, r5
   1bc1c:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1bc20:	mov	r3, r0
   1bc24:	b	1bb4c <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   1bc28:	add	r1, r3, #1
   1bc2c:	cmp	r4, r1
   1bc30:	mov	r3, r1
   1bc34:	mov	ip, r1
   1bc38:	beq	1bcc0 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   1bc3c:	ldrb	r0, [r1]
   1bc40:	cmp	r0, #32
   1bc44:	bls	1bcc0 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   1bc48:	mov	r2, r0
   1bc4c:	b	1bb0c <flatcc_json_parser_unmatched_symbol@@Base+0x48>
   1bc50:	mov	r3, #13
   1bc54:	b	19f08 <flatcc_json_parser_set_error@@Base>
   1bc58:	add	r3, r3, #1
   1bc5c:	b	1bb4c <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   1bc60:	add	r1, r3, #1
   1bc64:	sub	r2, r4, r1
   1bc68:	cmp	r2, #1
   1bc6c:	ble	1bc80 <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   1bc70:	ldrb	r2, [r3, #1]
   1bc74:	cmp	r2, #32
   1bc78:	bhi	1bc90 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>
   1bc7c:	beq	1bce0 <flatcc_json_parser_unmatched_symbol@@Base+0x21c>
   1bc80:	mov	r2, r4
   1bc84:	mov	r0, r5
   1bc88:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1bc8c:	mov	r1, r0
   1bc90:	mov	r2, r4
   1bc94:	mov	r0, r5
   1bc98:	ldrd	r4, [sp]
   1bc9c:	ldr	r6, [sp, #8]
   1bca0:	ldr	lr, [sp, #12]
   1bca4:	add	sp, sp, #16
   1bca8:	b	1b098 <flatcc_json_parser_generic_json@@Base>
   1bcac:	ldrb	r2, [r3, #1]
   1bcb0:	cmp	r2, #32
   1bcb4:	addhi	r3, r3, #1
   1bcb8:	bls	1bb68 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   1bcbc:	b	1bb7c <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   1bcc0:	cmp	r2, #46	; 0x2e
   1bcc4:	bne	1bb4c <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   1bcc8:	mov	r3, #5
   1bccc:	mov	r2, r4
   1bcd0:	mov	r0, r5
   1bcd4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1bcd8:	mov	r3, r0
   1bcdc:	b	1bb4c <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   1bce0:	ldrb	r2, [r3, #2]
   1bce4:	cmp	r2, #32
   1bce8:	addhi	r1, r3, #2
   1bcec:	bls	1bc80 <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   1bcf0:	b	1bc90 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>

0001bcf4 <flatcc_json_parser_integer@@Base>:
   1bcf4:	cmp	r1, r2
   1bcf8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bcfc:	strd	r6, [sp, #8]
   1bd00:	strd	r8, [sp, #16]
   1bd04:	strd	sl, [sp, #24]
   1bd08:	str	lr, [sp, #32]
   1bd0c:	ldr	ip, [sp, #36]	; 0x24
   1bd10:	beq	1be18 <flatcc_json_parser_integer@@Base+0x124>
   1bd14:	ldrb	r8, [r1]
   1bd18:	sub	r8, r8, #45	; 0x2d
   1bd1c:	clz	r8, r8
   1bd20:	lsr	r8, r8, #5
   1bd24:	add	lr, r1, r8
   1bd28:	cmp	r2, lr
   1bd2c:	str	r8, [r3]
   1bd30:	beq	1be38 <flatcc_json_parser_integer@@Base+0x144>
   1bd34:	ldrb	r8, [r1, r8]
   1bd38:	sub	r3, r8, #48	; 0x30
   1bd3c:	cmp	r3, #9
   1bd40:	bhi	1be2c <flatcc_json_parser_integer@@Base+0x138>
   1bd44:	uxtb	r8, r8
   1bd48:	mov	r9, #0
   1bd4c:	subs	r4, r8, #48	; 0x30
   1bd50:	add	r3, lr, #1
   1bd54:	sbc	r5, r9, #0
   1bd58:	b	1bd90 <flatcc_json_parser_integer@@Base+0x9c>
   1bd5c:	adds	r8, r8, r4
   1bd60:	adc	r9, r9, r5
   1bd64:	adds	r8, r8, r8
   1bd68:	adc	r9, r9, r9
   1bd6c:	subs	r6, r8, #48	; 0x30
   1bd70:	sbc	r7, r9, #0
   1bd74:	adds	r8, r6, sl
   1bd78:	adc	r9, r7, #0
   1bd7c:	cmp	r9, r5
   1bd80:	mov	r5, r9
   1bd84:	cmpeq	r8, r4
   1bd88:	mov	r4, r8
   1bd8c:	bcc	1bdf4 <flatcc_json_parser_integer@@Base+0x100>
   1bd90:	cmp	r3, r2
   1bd94:	lsl	r9, r5, #2
   1bd98:	mov	lr, r3
   1bd9c:	lsl	r8, r4, #2
   1bda0:	beq	1bdd4 <flatcc_json_parser_integer@@Base+0xe0>
   1bda4:	ldrb	sl, [r3], #1
   1bda8:	orr	r9, r9, r4, lsr #30
   1bdac:	sub	fp, sl, #48	; 0x30
   1bdb0:	cmp	fp, #9
   1bdb4:	bls	1bd5c <flatcc_json_parser_integer@@Base+0x68>
   1bdb8:	cmp	r1, lr
   1bdbc:	beq	1bdd8 <flatcc_json_parser_integer@@Base+0xe4>
   1bdc0:	ldrb	r3, [lr]
   1bdc4:	and	r1, r3, #223	; 0xdf
   1bdc8:	cmp	r3, #46	; 0x2e
   1bdcc:	cmpne	r1, #69	; 0x45
   1bdd0:	beq	1be20 <flatcc_json_parser_integer@@Base+0x12c>
   1bdd4:	strd	r4, [ip]
   1bdd8:	ldrd	r4, [sp]
   1bddc:	mov	r0, lr
   1bde0:	ldrd	r6, [sp, #8]
   1bde4:	ldrd	r8, [sp, #16]
   1bde8:	ldrd	sl, [sp, #24]
   1bdec:	add	sp, sp, #32
   1bdf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdf4:	mov	r1, lr
   1bdf8:	mov	r3, #8
   1bdfc:	ldrd	r4, [sp]
   1be00:	ldrd	r6, [sp, #8]
   1be04:	ldrd	r8, [sp, #16]
   1be08:	ldrd	sl, [sp, #24]
   1be0c:	ldr	lr, [sp, #32]
   1be10:	add	sp, sp, #36	; 0x24
   1be14:	b	19f08 <flatcc_json_parser_set_error@@Base>
   1be18:	mov	lr, r1
   1be1c:	b	1bdd8 <flatcc_json_parser_integer@@Base+0xe4>
   1be20:	mov	r1, lr
   1be24:	mov	r3, #12
   1be28:	b	1bdfc <flatcc_json_parser_integer@@Base+0x108>
   1be2c:	mov	r4, #0
   1be30:	mov	r5, #0
   1be34:	b	1bdb8 <flatcc_json_parser_integer@@Base+0xc4>
   1be38:	mov	r4, #0
   1be3c:	mov	r5, #0
   1be40:	b	1bdd4 <flatcc_json_parser_integer@@Base+0xe0>

0001be44 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1be44:	cmp	r1, r2
   1be48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be4c:	mov	r5, r2
   1be50:	strd	r6, [sp, #8]
   1be54:	mov	r7, r0
   1be58:	strd	r8, [sp, #16]
   1be5c:	mov	r9, r3
   1be60:	strd	sl, [sp, #24]
   1be64:	str	lr, [sp, #32]
   1be68:	sub	sp, sp, #36	; 0x24
   1be6c:	ldr	sl, [sp, #72]	; 0x48
   1be70:	beq	1bffc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1be74:	ldrb	r3, [r1]
   1be78:	cmp	r3, #34	; 0x22
   1be7c:	addeq	r4, r1, #1
   1be80:	bne	1bffc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1be84:	mov	r2, r5
   1be88:	mov	r1, r4
   1be8c:	mov	r0, r7
   1be90:	bl	19f34 <flatcc_json_parser_string_part@@Base>
   1be94:	cmp	r5, r0
   1be98:	mov	r6, r0
   1be9c:	beq	1bfbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   1bea0:	ldrb	r3, [r0]
   1bea4:	cmp	r3, #34	; 0x22
   1bea8:	bne	1bfbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   1beac:	sub	fp, r0, r4
   1beb0:	lsr	r8, fp, #2
   1beb4:	and	r3, fp, #3
   1beb8:	cmp	r3, #2
   1bebc:	add	r8, r8, r8, lsl #1
   1bec0:	addeq	r8, r8, #1
   1bec4:	beq	1bed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x8c>
   1bec8:	cmp	r3, #3
   1becc:	addeq	r8, r8, #2
   1bed0:	mov	r2, #1
   1bed4:	mvn	r3, #0
   1bed8:	ldr	r0, [r7]
   1bedc:	mov	r1, r2
   1bee0:	bl	15dac <flatcc_builder_start_vector@@Base>
   1bee4:	cmp	r0, #0
   1bee8:	bne	1c014 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   1beec:	mov	r1, r8
   1bef0:	ldr	r0, [r7]
   1bef4:	bl	15464 <flatcc_builder_extend_vector@@Base>
   1bef8:	subs	r3, r0, #0
   1befc:	str	r3, [sp]
   1bf00:	beq	1c014 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   1bf04:	cmp	sl, #0
   1bf08:	bne	1c030 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   1bf0c:	ldr	r3, [pc, #844]	; 1c260 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x41c>
   1bf10:	add	r3, pc, r3
   1bf14:	add	lr, r3, #1728	; 0x6c0
   1bf18:	add	lr, lr, #4
   1bf1c:	ldr	r2, [sp]
   1bf20:	cmp	r8, #0
   1bf24:	mov	ip, r4
   1bf28:	movne	r3, r8
   1bf2c:	mvneq	r3, #0
   1bf30:	str	fp, [sp, #4]
   1bf34:	add	r3, r2, r3
   1bf38:	strd	r2, [sp, #8]
   1bf3c:	ldr	r3, [sp, #4]
   1bf40:	ldr	r2, [sp, #8]
   1bf44:	cmp	r3, #0
   1bf48:	ldr	r3, [sp, #12]
   1bf4c:	sub	r3, r3, r2
   1bf50:	str	r3, [sp, #16]
   1bf54:	beq	1c1a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   1bf58:	ldr	r1, [sp, #4]
   1bf5c:	mov	r2, #0
   1bf60:	ldrb	r3, [ip, r2]
   1bf64:	ldrb	r0, [lr, r3]
   1bf68:	add	r3, sp, #32
   1bf6c:	add	r3, r3, r2
   1bf70:	cmp	r0, #63	; 0x3f
   1bf74:	strb	r0, [r3, #-4]
   1bf78:	bls	1c044 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
   1bf7c:	cmp	r0, #65	; 0x41
   1bf80:	beq	1c060 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   1bf84:	cmp	r0, #66	; 0x42
   1bf88:	movne	r3, r2
   1bf8c:	beq	1c06c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   1bf90:	sub	r3, r1, r3
   1bf94:	cmp	r2, #2
   1bf98:	beq	1c170 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x32c>
   1bf9c:	cmp	r2, #3
   1bfa0:	beq	1c0c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x27c>
   1bfa4:	cmp	r2, #0
   1bfa8:	subeq	r3, fp, r3
   1bfac:	beq	1c1a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x364>
   1bfb0:	ldr	r3, [sp, #4]
   1bfb4:	sub	r6, fp, r3
   1bfb8:	add	r6, r4, r6
   1bfbc:	mov	ip, #0
   1bfc0:	mov	r2, r5
   1bfc4:	cmp	sl, ip
   1bfc8:	mov	r1, r6
   1bfcc:	mov	r0, r7
   1bfd0:	movne	r3, #32
   1bfd4:	str	ip, [r9]
   1bfd8:	moveq	r3, #31
   1bfdc:	add	sp, sp, #36	; 0x24
   1bfe0:	ldrd	r4, [sp]
   1bfe4:	ldrd	r6, [sp, #8]
   1bfe8:	ldrd	r8, [sp, #16]
   1bfec:	ldrd	sl, [sp, #24]
   1bff0:	ldr	lr, [sp, #32]
   1bff4:	add	sp, sp, #36	; 0x24
   1bff8:	b	19f08 <flatcc_json_parser_set_error@@Base>
   1bffc:	mov	r3, #16
   1c000:	mov	r2, r5
   1c004:	mov	r0, r7
   1c008:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c00c:	mov	r4, r0
   1c010:	b	1be84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1c014:	mov	r3, #0
   1c018:	mov	r2, r5
   1c01c:	mov	r1, r6
   1c020:	mov	r0, r7
   1c024:	str	r3, [r9]
   1c028:	mov	r3, #33	; 0x21
   1c02c:	b	1bfdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   1c030:	ldr	r3, [pc, #556]	; 1c264 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x420>
   1c034:	add	r3, pc, r3
   1c038:	add	lr, r3, #1472	; 0x5c0
   1c03c:	add	lr, lr, #4
   1c040:	b	1bf1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd8>
   1c044:	add	r2, r2, #1
   1c048:	cmp	r2, #3
   1c04c:	bhi	1c1d8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   1c050:	cmp	r1, r2
   1c054:	bne	1bf60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   1c058:	mov	r3, #0
   1c05c:	b	1bf94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x150>
   1c060:	add	ip, ip, #1
   1c064:	sub	r1, r1, #1
   1c068:	b	1c048 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x204>
   1c06c:	add	r3, r2, #1
   1c070:	cmp	r3, #7
   1c074:	cmpls	r3, r1
   1c078:	bcs	1bf90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1c07c:	ldrb	r0, [ip, r3]
   1c080:	add	ip, ip, r3
   1c084:	ldrb	r0, [lr, r0]
   1c088:	sub	r0, r0, #65	; 0x41
   1c08c:	cmp	r0, #1
   1c090:	bls	1c0ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x268>
   1c094:	b	1bf90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1c098:	ldrb	r0, [ip, #1]!
   1c09c:	ldrb	r0, [lr, r0]
   1c0a0:	sub	r0, r0, #65	; 0x41
   1c0a4:	cmp	r0, #1
   1c0a8:	bhi	1bf90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1c0ac:	add	r3, r3, #1
   1c0b0:	cmp	r3, #7
   1c0b4:	cmpls	r3, r1
   1c0b8:	bcc	1c098 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   1c0bc:	b	1bf90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1c0c0:	ldrb	r2, [sp, #30]
   1c0c4:	lsl	r1, r2, #6
   1c0c8:	tst	r1, #192	; 0xc0
   1c0cc:	bne	1bfb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   1c0d0:	ldr	r1, [sp, #16]
   1c0d4:	cmp	r1, #1
   1c0d8:	beq	1bfb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   1c0dc:	ldrb	r0, [sp, #29]
   1c0e0:	lsr	r2, r2, #2
   1c0e4:	sub	r3, fp, r3
   1c0e8:	ldr	r1, [sp, #8]
   1c0ec:	ldr	ip, [sp]
   1c0f0:	orr	r2, r2, r0, lsl #4
   1c0f4:	ldrb	lr, [sp, #28]
   1c0f8:	add	r1, r1, #2
   1c0fc:	sub	r1, r1, ip
   1c100:	lsr	ip, r0, #4
   1c104:	ldr	r0, [sp, #8]
   1c108:	orr	ip, ip, lr, lsl #2
   1c10c:	strb	ip, [r0]
   1c110:	strb	r2, [r0, #1]
   1c114:	cmp	fp, r3
   1c118:	addne	r6, r4, r3
   1c11c:	bne	1bfbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   1c120:	cmp	r8, r1
   1c124:	ldr	r0, [r7]
   1c128:	bls	1c140 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   1c12c:	sub	r1, r8, r1
   1c130:	bl	15b58 <flatcc_builder_truncate_vector@@Base>
   1c134:	cmp	r0, #0
   1c138:	bne	1c014 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   1c13c:	ldr	r0, [r7]
   1c140:	bl	16d98 <flatcc_builder_end_vector@@Base>
   1c144:	cmp	r0, #0
   1c148:	str	r0, [r9]
   1c14c:	beq	1c014 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   1c150:	ldrb	r3, [r6]
   1c154:	cmp	r3, #34	; 0x22
   1c158:	beq	1c1b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x374>
   1c15c:	mov	r2, r5
   1c160:	mov	r1, r6
   1c164:	mov	r0, r7
   1c168:	mov	r3, #20
   1c16c:	b	1bfdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   1c170:	ldrb	r2, [sp, #29]
   1c174:	lsl	r1, r2, #4
   1c178:	tst	r1, #240	; 0xf0
   1c17c:	bne	1bfb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   1c180:	ldrb	r0, [sp, #28]
   1c184:	lsr	r2, r2, #4
   1c188:	sub	r3, fp, r3
   1c18c:	ldr	r1, [sp, #8]
   1c190:	orr	r2, r2, r0, lsl #2
   1c194:	strb	r2, [r1], #1
   1c198:	ldr	r2, [sp]
   1c19c:	sub	r1, r1, r2
   1c1a0:	b	1c114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   1c1a4:	mov	r3, fp
   1c1a8:	ldr	r1, [sp]
   1c1ac:	ldr	r2, [sp, #8]
   1c1b0:	sub	r1, r2, r1
   1c1b4:	b	1c114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   1c1b8:	add	r0, r6, #1
   1c1bc:	add	sp, sp, #36	; 0x24
   1c1c0:	ldrd	r4, [sp]
   1c1c4:	ldrd	r6, [sp, #8]
   1c1c8:	ldrd	r8, [sp, #16]
   1c1cc:	ldrd	sl, [sp, #24]
   1c1d0:	add	sp, sp, #32
   1c1d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1d8:	ldr	r3, [sp, #16]
   1c1dc:	cmp	r3, #2
   1c1e0:	bls	1bfb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   1c1e4:	ldrb	r2, [sp, #29]
   1c1e8:	sub	r3, r1, #4
   1c1ec:	add	ip, ip, #4
   1c1f0:	ldrb	r0, [sp, #28]
   1c1f4:	str	r3, [sp, #4]
   1c1f8:	ldrb	r3, [sp, #30]
   1c1fc:	lsr	r1, r2, #4
   1c200:	str	r2, [sp, #16]
   1c204:	ldrb	r2, [sp, #31]
   1c208:	orr	r1, r1, r0, lsl #2
   1c20c:	ldr	r0, [sp, #16]
   1c210:	str	r2, [sp, #20]
   1c214:	lsr	r2, r3, #2
   1c218:	orr	r2, r2, r0, lsl #4
   1c21c:	ldr	r0, [sp, #20]
   1c220:	orr	r3, r0, r3, lsl #6
   1c224:	ldr	r0, [sp, #8]
   1c228:	strb	r1, [r0]
   1c22c:	strb	r2, [r0, #1]
   1c230:	ldr	r2, [sp, #12]
   1c234:	strb	r3, [r0, #2]
   1c238:	add	r3, r0, #3
   1c23c:	str	r3, [sp, #8]
   1c240:	cmp	r3, r2
   1c244:	bne	1bf3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1c248:	ldr	r2, [sp]
   1c24c:	ldr	r3, [sp, #8]
   1c250:	sub	r1, r3, r2
   1c254:	ldr	r3, [sp, #4]
   1c258:	sub	r3, fp, r3
   1c25c:	b	1c114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   1c260:	andeq	r2, r0, r0, ror #7
   1c264:			; <UNDEFINED> instruction: 0x000022bc

0001c268 <flatcc_json_parser_build_string@@Base>:
   1c268:	cmp	r1, r2
   1c26c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c270:	mov	r5, r0
   1c274:	strd	r6, [sp, #8]
   1c278:	mov	r6, r2
   1c27c:	strd	r8, [sp, #16]
   1c280:	mov	r8, r3
   1c284:	str	sl, [sp, #24]
   1c288:	str	lr, [sp, #28]
   1c28c:	sub	sp, sp, #8
   1c290:	beq	1c304 <flatcc_json_parser_build_string@@Base+0x9c>
   1c294:	ldrb	r3, [r1]
   1c298:	cmp	r3, #34	; 0x22
   1c29c:	addeq	r7, r1, #1
   1c2a0:	bne	1c304 <flatcc_json_parser_build_string@@Base+0x9c>
   1c2a4:	mov	r2, r6
   1c2a8:	mov	r1, r7
   1c2ac:	mov	r0, r5
   1c2b0:	bl	19f34 <flatcc_json_parser_string_part@@Base>
   1c2b4:	cmp	r6, r0
   1c2b8:	mov	r4, r0
   1c2bc:	beq	1c3f0 <flatcc_json_parser_build_string@@Base+0x188>
   1c2c0:	ldrb	r3, [r0]
   1c2c4:	ldr	r0, [r5]
   1c2c8:	cmp	r3, #34	; 0x22
   1c2cc:	beq	1c3f8 <flatcc_json_parser_build_string@@Base+0x190>
   1c2d0:	bl	15eb8 <flatcc_builder_start_string@@Base>
   1c2d4:	cmp	r0, #0
   1c2d8:	beq	1c31c <flatcc_json_parser_build_string@@Base+0xb4>
   1c2dc:	mov	r3, #0
   1c2e0:	str	r3, [r8]
   1c2e4:	mov	r0, r4
   1c2e8:	add	sp, sp, #8
   1c2ec:	ldrd	r4, [sp]
   1c2f0:	ldrd	r6, [sp, #8]
   1c2f4:	ldrd	r8, [sp, #16]
   1c2f8:	ldr	sl, [sp, #24]
   1c2fc:	add	sp, sp, #28
   1c300:	pop	{pc}		; (ldr pc, [sp], #4)
   1c304:	mov	r3, #16
   1c308:	mov	r2, r6
   1c30c:	mov	r0, r5
   1c310:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c314:	mov	r7, r0
   1c318:	b	1c2a4 <flatcc_json_parser_build_string@@Base+0x3c>
   1c31c:	sub	r2, r4, r7
   1c320:	mov	r1, r7
   1c324:	ldr	r0, [r5]
   1c328:	bl	159f4 <flatcc_builder_append_string@@Base>
   1c32c:	cmp	r0, #0
   1c330:	beq	1c2dc <flatcc_json_parser_build_string@@Base+0x74>
   1c334:	cmp	r6, r4
   1c338:	beq	1c3c4 <flatcc_json_parser_build_string@@Base+0x15c>
   1c33c:	ldrb	r3, [r4]
   1c340:	cmp	r3, #34	; 0x22
   1c344:	beq	1c41c <flatcc_json_parser_build_string@@Base+0x1b4>
   1c348:	add	sl, sp, #4
   1c34c:	add	r9, sp, #5
   1c350:	b	1c370 <flatcc_json_parser_build_string@@Base+0x108>
   1c354:	ldr	r0, [r5]
   1c358:	bl	159f4 <flatcc_builder_append_string@@Base>
   1c35c:	cmp	r0, #0
   1c360:	beq	1c2dc <flatcc_json_parser_build_string@@Base+0x74>
   1c364:	ldrb	r3, [r4]
   1c368:	cmp	r3, #34	; 0x22
   1c36c:	beq	1c41c <flatcc_json_parser_build_string@@Base+0x1b4>
   1c370:	mov	r1, r4
   1c374:	mov	r3, sl
   1c378:	mov	r2, r6
   1c37c:	mov	r0, r5
   1c380:	bl	1a73c <flatcc_json_parser_string_escape@@Base>
   1c384:	mov	r7, r0
   1c388:	ldrb	r2, [sp, #4]
   1c38c:	mov	r1, r9
   1c390:	ldr	r0, [r5]
   1c394:	bl	159f4 <flatcc_builder_append_string@@Base>
   1c398:	cmp	r0, #0
   1c39c:	mov	r2, r6
   1c3a0:	mov	r1, r7
   1c3a4:	mov	r0, r5
   1c3a8:	beq	1c42c <flatcc_json_parser_build_string@@Base+0x1c4>
   1c3ac:	bl	19f34 <flatcc_json_parser_string_part@@Base>
   1c3b0:	cmp	r6, r0
   1c3b4:	mov	r4, r0
   1c3b8:	mov	r1, r7
   1c3bc:	sub	r2, r0, r7
   1c3c0:	bne	1c354 <flatcc_json_parser_build_string@@Base+0xec>
   1c3c4:	mov	r4, r6
   1c3c8:	ldr	r0, [r5]
   1c3cc:	bl	17a4c <flatcc_builder_end_string@@Base>
   1c3d0:	str	r0, [r8]
   1c3d4:	mov	r1, r4
   1c3d8:	mov	r2, r6
   1c3dc:	mov	r0, r5
   1c3e0:	mov	r3, #20
   1c3e4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c3e8:	mov	r4, r0
   1c3ec:	b	1c2e4 <flatcc_json_parser_build_string@@Base+0x7c>
   1c3f0:	ldr	r0, [r5]
   1c3f4:	b	1c2d0 <flatcc_json_parser_build_string@@Base+0x68>
   1c3f8:	sub	r2, r4, r7
   1c3fc:	mov	r1, r7
   1c400:	bl	178ac <flatcc_builder_create_string@@Base>
   1c404:	str	r0, [r8]
   1c408:	ldrb	r3, [r4]
   1c40c:	cmp	r3, #34	; 0x22
   1c410:	addeq	r4, r4, #1
   1c414:	beq	1c2e4 <flatcc_json_parser_build_string@@Base+0x7c>
   1c418:	b	1c3d4 <flatcc_json_parser_build_string@@Base+0x16c>
   1c41c:	ldr	r0, [r5]
   1c420:	bl	17a4c <flatcc_builder_end_string@@Base>
   1c424:	str	r0, [r8]
   1c428:	b	1c408 <flatcc_json_parser_build_string@@Base+0x1a0>
   1c42c:	mov	r4, r7
   1c430:	b	1c2dc <flatcc_json_parser_build_string@@Base+0x74>

0001c434 <flatcc_json_parser_prepare_unions@@Base>:
   1c434:	add	ip, r3, r3, lsl #1
   1c438:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c43c:	mov	r5, r0
   1c440:	ldr	r0, [r0]
   1c444:	mov	r4, r3
   1c448:	strd	r6, [sp, #8]
   1c44c:	mov	r6, r1
   1c450:	lsl	r1, ip, #3
   1c454:	ldr	r7, [sp, #24]
   1c458:	add	r1, r1, #8
   1c45c:	str	r8, [sp, #16]
   1c460:	mov	r8, r2
   1c464:	str	lr, [sp, #20]
   1c468:	bl	149cc <flatcc_builder_enter_user_frame@@Base>
   1c46c:	cmp	r0, #0
   1c470:	str	r0, [r7]
   1c474:	beq	1c4a0 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   1c478:	mov	r1, r0
   1c47c:	ldr	r0, [r5]
   1c480:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1c484:	ldr	r8, [sp, #16]
   1c488:	str	r4, [r0]
   1c48c:	mov	r0, r6
   1c490:	ldrd	r4, [sp]
   1c494:	ldrd	r6, [sp, #8]
   1c498:	add	sp, sp, #20
   1c49c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4a0:	mov	r2, r8
   1c4a4:	mov	r1, r6
   1c4a8:	ldrd	r6, [sp, #8]
   1c4ac:	mov	r0, r5
   1c4b0:	mov	r3, #33	; 0x21
   1c4b4:	ldrd	r4, [sp]
   1c4b8:	ldr	r8, [sp, #16]
   1c4bc:	ldr	lr, [sp, #20]
   1c4c0:	add	sp, sp, #24
   1c4c4:	b	19f08 <flatcc_json_parser_set_error@@Base>

0001c4c8 <flatcc_json_parser_finalize_unions@@Base>:
   1c4c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c4cc:	mov	r4, r0
   1c4d0:	mov	r5, r3
   1c4d4:	ldr	r0, [r0]
   1c4d8:	strd	r6, [sp, #8]
   1c4dc:	mov	r6, r1
   1c4e0:	mov	r1, r3
   1c4e4:	mov	r7, r2
   1c4e8:	str	r8, [sp, #16]
   1c4ec:	str	lr, [sp, #20]
   1c4f0:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1c4f4:	ldr	r3, [r0, #4]
   1c4f8:	cmp	r3, #0
   1c4fc:	bne	1c524 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   1c500:	mov	r1, r5
   1c504:	ldr	r0, [r4]
   1c508:	bl	14ad8 <flatcc_builder_exit_user_frame_at@@Base>
   1c50c:	mov	r0, r6
   1c510:	ldrd	r4, [sp]
   1c514:	ldrd	r6, [sp, #8]
   1c518:	ldr	r8, [sp, #16]
   1c51c:	add	sp, sp, #20
   1c520:	pop	{pc}		; (ldr pc, [sp], #4)
   1c524:	mov	r1, r6
   1c528:	mov	r2, r7
   1c52c:	mov	r3, #27
   1c530:	mov	r0, r4
   1c534:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c538:	mov	r6, r0
   1c53c:	b	1c500 <flatcc_json_parser_finalize_unions@@Base+0x38>

0001c540 <flatcc_json_parser_union@@Base>:
   1c540:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c544:	mov	r5, r0
   1c548:	mov	r4, r3
   1c54c:	ldr	r0, [r0]
   1c550:	strd	r6, [sp, #8]
   1c554:	mov	r6, r2
   1c558:	str	r8, [sp, #16]
   1c55c:	mov	r8, r1
   1c560:	str	lr, [sp, #20]
   1c564:	sub	sp, sp, #16
   1c568:	ldr	r1, [sp, #44]	; 0x2c
   1c56c:	ldrh	r7, [sp, #40]	; 0x28
   1c570:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1c574:	add	r3, r4, r4, lsl #1
   1c578:	add	r3, r0, r3, lsl #3
   1c57c:	ldr	r2, [r3, #8]
   1c580:	cmp	r2, #0
   1c584:	bne	1c664 <flatcc_json_parser_union@@Base+0x124>
   1c588:	ldrb	r2, [r3, #20]
   1c58c:	mov	ip, r0
   1c590:	cmp	r2, #0
   1c594:	beq	1c614 <flatcc_json_parser_union@@Base+0xd4>
   1c598:	ldrb	r3, [r3, #21]
   1c59c:	cmp	r3, #0
   1c5a0:	strb	r3, [sp, #8]
   1c5a4:	beq	1c680 <flatcc_json_parser_union@@Base+0x140>
   1c5a8:	ldr	lr, [ip, #4]
   1c5ac:	mov	r1, r8
   1c5b0:	mov	r2, r6
   1c5b4:	mov	r0, r5
   1c5b8:	add	r8, sp, #8
   1c5bc:	sub	lr, lr, #1
   1c5c0:	str	lr, [ip, #4]
   1c5c4:	add	ip, sp, #12
   1c5c8:	str	ip, [sp]
   1c5cc:	ldr	ip, [sp, #48]	; 0x30
   1c5d0:	blx	ip
   1c5d4:	cmp	r6, r0
   1c5d8:	mov	r4, r0
   1c5dc:	beq	1c648 <flatcc_json_parser_union@@Base+0x108>
   1c5e0:	mov	r1, r7
   1c5e4:	ldm	r8, {r2, r3}
   1c5e8:	ldr	r0, [r5]
   1c5ec:	bl	17f64 <flatcc_builder_table_add_union@@Base>
   1c5f0:	cmp	r0, #0
   1c5f4:	beq	1c648 <flatcc_json_parser_union@@Base+0x108>
   1c5f8:	mov	r1, r4
   1c5fc:	mov	r2, r6
   1c600:	mov	r0, r5
   1c604:	mov	r3, #28
   1c608:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c60c:	mov	r4, r0
   1c610:	b	1c648 <flatcc_json_parser_union@@Base+0x108>
   1c614:	ldr	lr, [ip, #4]
   1c618:	mov	r2, r6
   1c61c:	mov	r1, r8
   1c620:	mov	r0, r5
   1c624:	ldr	r6, [r5, #4]
   1c628:	ldr	r4, [r5, #16]
   1c62c:	add	lr, lr, #1
   1c630:	str	lr, [ip, #4]
   1c634:	str	r8, [r3, #8]
   1c638:	str	r6, [r3, #12]
   1c63c:	str	r4, [r3, #16]
   1c640:	bl	1b098 <flatcc_json_parser_generic_json@@Base>
   1c644:	mov	r4, r0
   1c648:	mov	r0, r4
   1c64c:	add	sp, sp, #16
   1c650:	ldrd	r4, [sp]
   1c654:	ldrd	r6, [sp, #8]
   1c658:	ldr	r8, [sp, #16]
   1c65c:	add	sp, sp, #20
   1c660:	pop	{pc}		; (ldr pc, [sp], #4)
   1c664:	mov	r2, r6
   1c668:	mov	r1, r8
   1c66c:	mov	r0, r5
   1c670:	mov	r3, #28
   1c674:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c678:	mov	r4, r0
   1c67c:	b	1c648 <flatcc_json_parser_union@@Base+0x108>
   1c680:	mov	r2, r6
   1c684:	mov	r1, r8
   1c688:	mov	r0, r5
   1c68c:	mov	r3, #25
   1c690:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c694:	mov	r4, r0
   1c698:	b	1c648 <flatcc_json_parser_union@@Base+0x108>

0001c69c <flatcc_json_parser_union_type@@Base>:
   1c69c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c6a0:	mov	r5, r0
   1c6a4:	add	r4, r3, r3, lsl #1
   1c6a8:	ldr	r0, [r0]
   1c6ac:	strd	r6, [sp, #8]
   1c6b0:	lsl	r4, r4, #3
   1c6b4:	mov	r7, r2
   1c6b8:	strd	r8, [sp, #16]
   1c6bc:	mov	r9, r1
   1c6c0:	strd	sl, [sp, #24]
   1c6c4:	str	lr, [sp, #32]
   1c6c8:	sub	sp, sp, #36	; 0x24
   1c6cc:	ldrh	r3, [sp, #72]	; 0x48
   1c6d0:	ldr	r1, [sp, #76]	; 0x4c
   1c6d4:	str	r3, [sp, #12]
   1c6d8:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1c6dc:	add	fp, r0, #8
   1c6e0:	add	r6, fp, r4
   1c6e4:	ldrb	r3, [r6, #12]
   1c6e8:	cmp	r3, #0
   1c6ec:	bne	1c808 <flatcc_json_parser_union_type@@Base+0x16c>
   1c6f0:	mov	sl, r0
   1c6f4:	mov	r1, #0
   1c6f8:	str	r3, [sp, #20]
   1c6fc:	mov	r0, #0
   1c700:	mov	r3, #1
   1c704:	cmp	r9, r7
   1c708:	strd	r0, [sp, #24]
   1c70c:	strh	r3, [r6, #12]
   1c710:	beq	1c800 <flatcc_json_parser_union_type@@Base+0x164>
   1c714:	add	r0, sp, #24
   1c718:	add	r3, sp, #20
   1c71c:	mov	r2, r7
   1c720:	mov	r1, r9
   1c724:	str	r0, [sp]
   1c728:	mov	r0, r5
   1c72c:	bl	1bcf4 <flatcc_json_parser_integer@@Base>
   1c730:	cmp	r9, r0
   1c734:	mov	r8, r0
   1c738:	bne	1c824 <flatcc_json_parser_union_type@@Base+0x188>
   1c73c:	add	r0, r6, #13
   1c740:	mov	r1, r8
   1c744:	ldr	r3, [sp, #80]	; 0x50
   1c748:	mov	r2, r7
   1c74c:	str	r0, [sp]
   1c750:	mov	r0, r5
   1c754:	bl	1a110 <flatcc_json_parser_space_ext@@Base+0x114>
   1c758:	mov	r8, r0
   1c75c:	ldr	r1, [fp, r4]
   1c760:	ldr	r3, [sl, #4]
   1c764:	cmp	r1, #0
   1c768:	beq	1c874 <flatcc_json_parser_union_type@@Base+0x1d8>
   1c76c:	cmp	r3, #0
   1c770:	beq	1c8c0 <flatcc_json_parser_union_type@@Base+0x224>
   1c774:	ldmib	r6, {ip, lr}
   1c778:	sub	r3, r3, #1
   1c77c:	mov	r2, r7
   1c780:	mov	r0, r5
   1c784:	add	r4, sp, #24
   1c788:	ldr	r9, [r5, #16]
   1c78c:	str	r3, [sl, #4]
   1c790:	ldr	sl, [r5, #4]
   1c794:	str	ip, [r5, #4]
   1c798:	add	ip, sp, #28
   1c79c:	str	lr, [r5, #16]
   1c7a0:	ldrb	r3, [r6, #13]
   1c7a4:	str	ip, [sp]
   1c7a8:	ldr	ip, [sp, #84]	; 0x54
   1c7ac:	strb	r3, [sp, #24]
   1c7b0:	blx	ip
   1c7b4:	cmp	r7, r0
   1c7b8:	moveq	r8, r7
   1c7bc:	beq	1c7e0 <flatcc_json_parser_union_type@@Base+0x144>
   1c7c0:	ldm	r4, {r2, r3}
   1c7c4:	ldr	r0, [r5]
   1c7c8:	ldr	r1, [sp, #12]
   1c7cc:	bl	17f64 <flatcc_builder_table_add_union@@Base>
   1c7d0:	cmp	r0, #0
   1c7d4:	streq	sl, [r5, #4]
   1c7d8:	streq	r9, [r5, #16]
   1c7dc:	bne	1c888 <flatcc_json_parser_union_type@@Base+0x1ec>
   1c7e0:	mov	r0, r8
   1c7e4:	add	sp, sp, #36	; 0x24
   1c7e8:	ldrd	r4, [sp]
   1c7ec:	ldrd	r6, [sp, #8]
   1c7f0:	ldrd	r8, [sp, #16]
   1c7f4:	ldrd	sl, [sp, #24]
   1c7f8:	add	sp, sp, #32
   1c7fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c800:	mov	r8, r7
   1c804:	b	1c73c <flatcc_json_parser_union_type@@Base+0xa0>
   1c808:	mov	r2, r7
   1c80c:	mov	r1, r9
   1c810:	mov	r0, r5
   1c814:	mov	r3, #28
   1c818:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c81c:	mov	r8, r0
   1c820:	b	1c7e0 <flatcc_json_parser_union_type@@Base+0x144>
   1c824:	ldr	r3, [sp, #20]
   1c828:	cmp	r3, #0
   1c82c:	bne	1c8a4 <flatcc_json_parser_union_type@@Base+0x208>
   1c830:	ldrd	r2, [sp, #24]
   1c834:	cmp	r3, #0
   1c838:	cmpeq	r2, #255	; 0xff
   1c83c:	strbls	r2, [r6, #13]
   1c840:	bls	1c75c <flatcc_json_parser_union_type@@Base+0xc0>
   1c844:	mov	r1, r0
   1c848:	mov	r3, #7
   1c84c:	mov	r2, r7
   1c850:	mov	r0, r5
   1c854:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c858:	mov	r8, r0
   1c85c:	cmp	r9, r8
   1c860:	beq	1c73c <flatcc_json_parser_union_type@@Base+0xa0>
   1c864:	ldr	r1, [fp, r4]
   1c868:	ldr	r3, [sl, #4]
   1c86c:	cmp	r1, #0
   1c870:	bne	1c76c <flatcc_json_parser_union_type@@Base+0xd0>
   1c874:	ldrb	r2, [r6, #13]
   1c878:	cmp	r2, #0
   1c87c:	addne	r3, r3, #1
   1c880:	str	r3, [sl, #4]
   1c884:	b	1c7e0 <flatcc_json_parser_union_type@@Base+0x144>
   1c888:	mov	r1, r8
   1c88c:	mov	r2, r7
   1c890:	mov	r0, r5
   1c894:	mov	r3, #28
   1c898:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c89c:	mov	r8, r0
   1c8a0:	b	1c7e0 <flatcc_json_parser_union_type@@Base+0x144>
   1c8a4:	mov	r1, r0
   1c8a8:	mov	r3, #8
   1c8ac:	mov	r2, r7
   1c8b0:	mov	r0, r5
   1c8b4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1c8b8:	mov	r8, r0
   1c8bc:	b	1c85c <flatcc_json_parser_union_type@@Base+0x1c0>
   1c8c0:	ldr	r3, [pc, #32]	; 1c8e8 <flatcc_json_parser_union_type@@Base+0x24c>
   1c8c4:	movw	r2, #965	; 0x3c5
   1c8c8:	ldr	r1, [pc, #28]	; 1c8ec <flatcc_json_parser_union_type@@Base+0x250>
   1c8cc:	ldr	r0, [pc, #28]	; 1c8f0 <flatcc_json_parser_union_type@@Base+0x254>
   1c8d0:	add	r3, pc, r3
   1c8d4:	add	r3, r3, #1984	; 0x7c0
   1c8d8:	add	r1, pc, r1
   1c8dc:	add	r3, r3, #4
   1c8e0:	add	r0, pc, r0
   1c8e4:	bl	124b0 <__assert_fail@plt>
   1c8e8:	andeq	r1, r0, r0, lsr #20
   1c8ec:	andeq	r2, r0, r4, ror #12
   1c8f0:	andeq	r2, r0, r0, asr #13

0001c8f4 <flatcc_json_parser_union_vector@@Base>:
   1c8f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c8f8:	mov	r4, r3
   1c8fc:	mov	r5, r0
   1c900:	ldr	r0, [r0]
   1c904:	strd	r6, [sp, #8]
   1c908:	mov	r6, r1
   1c90c:	ldr	r1, [sp, #36]	; 0x24
   1c910:	strd	r8, [sp, #16]
   1c914:	mov	r9, r2
   1c918:	ldrh	r8, [sp, #32]
   1c91c:	str	sl, [sp, #24]
   1c920:	str	lr, [sp, #28]
   1c924:	ldr	r7, [sp, #40]	; 0x28
   1c928:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1c92c:	add	r3, r4, r4, lsl #1
   1c930:	add	ip, r0, #8
   1c934:	lsl	r3, r3, #3
   1c938:	ldr	r2, [ip, r3]
   1c93c:	add	r4, ip, r3
   1c940:	cmp	r2, #0
   1c944:	bne	1c9e4 <flatcc_json_parser_union_vector@@Base+0xf0>
   1c948:	ldrb	r1, [r4, #12]
   1c94c:	mov	lr, r0
   1c950:	ldr	r2, [r0, #4]
   1c954:	cmp	r1, #0
   1c958:	bne	1c9a0 <flatcc_json_parser_union_vector@@Base+0xac>
   1c95c:	ldr	r8, [r5, #4]
   1c960:	add	r1, r2, #1
   1c964:	mov	r0, r5
   1c968:	mov	r2, r9
   1c96c:	ldr	r7, [r5, #16]
   1c970:	ldr	sl, [sp, #24]
   1c974:	str	r1, [lr, #4]
   1c978:	mov	r1, r6
   1c97c:	str	r8, [r4, #4]
   1c980:	str	r7, [r4, #8]
   1c984:	str	r6, [ip, r3]
   1c988:	ldrd	r4, [sp]
   1c98c:	ldrd	r6, [sp, #8]
   1c990:	ldrd	r8, [sp, #16]
   1c994:	ldr	lr, [sp, #28]
   1c998:	add	sp, sp, #32
   1c99c:	b	1b098 <flatcc_json_parser_generic_json@@Base>
   1c9a0:	sub	ip, r2, #1
   1c9a4:	ldr	r3, [r4, #20]
   1c9a8:	mov	r2, r9
   1c9ac:	mov	r1, r6
   1c9b0:	mov	r0, r5
   1c9b4:	ldr	sl, [sp, #24]
   1c9b8:	str	ip, [lr, #4]
   1c9bc:	str	r8, [sp, #36]	; 0x24
   1c9c0:	str	r7, [sp, #40]	; 0x28
   1c9c4:	ldr	ip, [r4, #16]
   1c9c8:	ldrd	r4, [sp]
   1c9cc:	ldrd	r6, [sp, #8]
   1c9d0:	str	ip, [sp, #32]
   1c9d4:	ldrd	r8, [sp, #16]
   1c9d8:	ldr	lr, [sp, #28]
   1c9dc:	add	sp, sp, #32
   1c9e0:	b	1a35c <flatcc_json_parser_space_ext@@Base+0x360>
   1c9e4:	mov	r2, r9
   1c9e8:	mov	r1, r6
   1c9ec:	ldrd	r6, [sp, #8]
   1c9f0:	mov	r0, r5
   1c9f4:	mov	r3, #28
   1c9f8:	ldrd	r4, [sp]
   1c9fc:	ldrd	r8, [sp, #16]
   1ca00:	ldr	sl, [sp, #24]
   1ca04:	ldr	lr, [sp, #28]
   1ca08:	add	sp, sp, #32
   1ca0c:	b	19f08 <flatcc_json_parser_set_error@@Base>

0001ca10 <flatcc_json_parser_union_type_vector@@Base>:
   1ca10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ca14:	add	r4, r3, r3, lsl #1
   1ca18:	mov	r5, r2
   1ca1c:	strd	r6, [sp, #8]
   1ca20:	mov	r6, r0
   1ca24:	mov	r7, r1
   1ca28:	strd	r8, [sp, #16]
   1ca2c:	strd	sl, [sp, #24]
   1ca30:	str	lr, [sp, #32]
   1ca34:	sub	sp, sp, #52	; 0x34
   1ca38:	ldrh	r3, [sp, #88]	; 0x58
   1ca3c:	ldr	r0, [r0]
   1ca40:	ldr	r1, [sp, #92]	; 0x5c
   1ca44:	str	r3, [sp, #24]
   1ca48:	ldr	fp, [sp, #104]	; 0x68
   1ca4c:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1ca50:	lsl	r3, r4, #3
   1ca54:	add	r0, r0, #8
   1ca58:	str	r3, [sp, #28]
   1ca5c:	add	r3, r0, r3
   1ca60:	str	r3, [sp, #20]
   1ca64:	ldrb	r3, [r3, #12]
   1ca68:	cmp	r3, #0
   1ca6c:	bne	1cb60 <flatcc_json_parser_union_type_vector@@Base+0x150>
   1ca70:	ldr	ip, [sp, #20]
   1ca74:	mov	r0, #1
   1ca78:	mvn	r3, #0
   1ca7c:	mov	r2, r0
   1ca80:	mov	r1, r0
   1ca84:	strb	r0, [ip, #12]
   1ca88:	ldr	r0, [r6]
   1ca8c:	bl	15dac <flatcc_builder_start_vector@@Base>
   1ca90:	cmp	r0, #0
   1ca94:	beq	1cad0 <flatcc_json_parser_union_type_vector@@Base+0xc0>
   1ca98:	mov	r2, r5
   1ca9c:	mov	r1, r7
   1caa0:	mov	r0, r6
   1caa4:	mov	r3, #33	; 0x21
   1caa8:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1caac:	mov	r4, r0
   1cab0:	mov	r0, r4
   1cab4:	add	sp, sp, #52	; 0x34
   1cab8:	ldrd	r4, [sp]
   1cabc:	ldrd	r6, [sp, #8]
   1cac0:	ldrd	r8, [sp, #16]
   1cac4:	ldrd	sl, [sp, #24]
   1cac8:	add	sp, sp, #32
   1cacc:	pop	{pc}		; (ldr pc, [sp], #4)
   1cad0:	cmp	r7, r5
   1cad4:	beq	1cae4 <flatcc_json_parser_union_type_vector@@Base+0xd4>
   1cad8:	ldrb	r3, [r7]
   1cadc:	cmp	r3, #91	; 0x5b
   1cae0:	beq	1cb7c <flatcc_json_parser_union_type_vector@@Base+0x16c>
   1cae4:	mov	r1, r7
   1cae8:	mov	r3, #22
   1caec:	mov	r2, r5
   1caf0:	mov	r0, r6
   1caf4:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1caf8:	mov	r4, r0
   1cafc:	ldr	r0, [r6]
   1cb00:	bl	16e98 <flatcc_builder_vector_count@@Base>
   1cb04:	ldr	r3, [sp, #20]
   1cb08:	mov	r7, r0
   1cb0c:	mov	r1, r0
   1cb10:	ldr	r0, [r6]
   1cb14:	str	r7, [r3, #16]
   1cb18:	bl	149cc <flatcc_builder_enter_user_frame@@Base>
   1cb1c:	mov	r1, r0
   1cb20:	mov	r8, r0
   1cb24:	ldr	r0, [r6]
   1cb28:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1cb2c:	mov	r9, r0
   1cb30:	ldr	r0, [r6]
   1cb34:	bl	16ea4 <flatcc_builder_vector_edit@@Base>
   1cb38:	mov	r1, r0
   1cb3c:	mov	r2, r7
   1cb40:	mov	r0, r9
   1cb44:	bl	12408 <memcpy@plt>
   1cb48:	ldr	r0, [r6]
   1cb4c:	bl	16d98 <flatcc_builder_end_vector@@Base>
   1cb50:	subs	r9, r0, #0
   1cb54:	bne	1ccec <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   1cb58:	mov	r7, r4
   1cb5c:	b	1ca98 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1cb60:	mov	r2, r5
   1cb64:	mov	r1, r7
   1cb68:	mov	r0, r6
   1cb6c:	mov	r3, #28
   1cb70:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1cb74:	mov	r4, r0
   1cb78:	b	1cab0 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1cb7c:	add	r1, r7, #1
   1cb80:	sub	r3, r5, r1
   1cb84:	cmp	r3, #1
   1cb88:	ble	1cbb0 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   1cb8c:	ldrb	r3, [r7, #1]
   1cb90:	cmp	r3, #32
   1cb94:	movhi	r7, r1
   1cb98:	bhi	1cbc0 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   1cb9c:	bne	1cbb0 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   1cba0:	ldrb	r3, [r7, #2]
   1cba4:	cmp	r3, #32
   1cba8:	addhi	r7, r7, #2
   1cbac:	bhi	1cbc0 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   1cbb0:	mov	r2, r5
   1cbb4:	mov	r0, r6
   1cbb8:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1cbbc:	mov	r7, r0
   1cbc0:	cmp	r5, r7
   1cbc4:	beq	1cbd4 <flatcc_json_parser_union_type_vector@@Base+0x1c4>
   1cbc8:	ldrb	r3, [r7]
   1cbcc:	cmp	r3, #93	; 0x5d
   1cbd0:	beq	1ce94 <flatcc_json_parser_union_type_vector@@Base+0x484>
   1cbd4:	mov	r9, #0
   1cbd8:	mov	r1, #1
   1cbdc:	ldr	r0, [r6]
   1cbe0:	bl	15464 <flatcc_builder_extend_vector@@Base>
   1cbe4:	subs	r8, r0, #0
   1cbe8:	beq	1ca98 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1cbec:	mov	r2, #0
   1cbf0:	mov	r3, #0
   1cbf4:	strb	r9, [sp, #35]	; 0x23
   1cbf8:	cmp	r5, r7
   1cbfc:	str	r9, [sp, #36]	; 0x24
   1cc00:	strd	r2, [sp, #40]	; 0x28
   1cc04:	beq	1cda8 <flatcc_json_parser_union_type_vector@@Base+0x398>
   1cc08:	add	r0, sp, #40	; 0x28
   1cc0c:	add	r3, sp, #36	; 0x24
   1cc10:	mov	r2, r5
   1cc14:	mov	r1, r7
   1cc18:	str	r0, [sp]
   1cc1c:	mov	r0, r6
   1cc20:	bl	1bcf4 <flatcc_json_parser_integer@@Base>
   1cc24:	cmp	r7, r0
   1cc28:	mov	sl, r0
   1cc2c:	bne	1cdb0 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   1cc30:	add	r0, sp, #35	; 0x23
   1cc34:	mov	r2, r5
   1cc38:	ldr	r3, [sp, #96]	; 0x60
   1cc3c:	mov	r1, sl
   1cc40:	str	r0, [sp]
   1cc44:	mov	r0, r6
   1cc48:	bl	1a110 <flatcc_json_parser_space_ext@@Base+0x114>
   1cc4c:	cmp	r5, r0
   1cc50:	cmpne	r0, sl
   1cc54:	mov	r4, r0
   1cc58:	beq	1cb58 <flatcc_json_parser_union_type_vector@@Base+0x148>
   1cc5c:	ldrb	r0, [sp, #35]	; 0x23
   1cc60:	blx	fp
   1cc64:	cmp	r0, #0
   1cc68:	bne	1cda0 <flatcc_json_parser_union_type_vector@@Base+0x390>
   1cc6c:	ldr	r3, [r6, #8]
   1cc70:	tst	r3, #1
   1cc74:	beq	1cf10 <flatcc_json_parser_union_type_vector@@Base+0x500>
   1cc78:	mov	r2, r0
   1cc7c:	strb	r0, [sp, #35]	; 0x23
   1cc80:	sub	r3, r5, r4
   1cc84:	strb	r2, [r8]
   1cc88:	cmp	r3, #1
   1cc8c:	ble	1cca0 <flatcc_json_parser_union_type_vector@@Base+0x290>
   1cc90:	ldrb	r3, [r4]
   1cc94:	cmp	r3, #32
   1cc98:	bhi	1ccb4 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   1cc9c:	beq	1ce38 <flatcc_json_parser_union_type_vector@@Base+0x428>
   1cca0:	mov	r1, r4
   1cca4:	mov	r2, r5
   1cca8:	mov	r0, r6
   1ccac:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1ccb0:	mov	r4, r0
   1ccb4:	cmp	r5, r4
   1ccb8:	beq	1cafc <flatcc_json_parser_union_type_vector@@Base+0xec>
   1ccbc:	ldrb	r3, [r4]
   1ccc0:	cmp	r3, #44	; 0x2c
   1ccc4:	beq	1ce4c <flatcc_json_parser_union_type_vector@@Base+0x43c>
   1ccc8:	cmp	r3, #93	; 0x5d
   1cccc:	beq	1ce00 <flatcc_json_parser_union_type_vector@@Base+0x3f0>
   1ccd0:	mov	r1, r4
   1ccd4:	mov	r3, #9
   1ccd8:	mov	r2, r5
   1ccdc:	mov	r0, r6
   1cce0:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1cce4:	mov	r4, r0
   1cce8:	b	1cafc <flatcc_json_parser_union_type_vector@@Base+0xec>
   1ccec:	ldr	r3, [sp, #24]
   1ccf0:	ldr	r0, [r6]
   1ccf4:	sub	r1, r3, #1
   1ccf8:	bl	17dd4 <flatcc_builder_table_add_offset@@Base>
   1ccfc:	cmp	r0, #0
   1cd00:	beq	1cb58 <flatcc_json_parser_union_type_vector@@Base+0x148>
   1cd04:	str	r9, [r0]
   1cd08:	ldr	r0, [r6]
   1cd0c:	ldr	r1, [sp, #92]	; 0x5c
   1cd10:	bl	14b2c <flatcc_builder_get_user_frame_ptr@@Base>
   1cd14:	ldr	r3, [sp, #28]
   1cd18:	add	r2, r0, #8
   1cd1c:	ldr	r1, [r2, r3]
   1cd20:	add	r2, r2, r3
   1cd24:	ldr	r3, [r0, #4]
   1cd28:	str	r8, [r2, #20]
   1cd2c:	cmp	r1, #0
   1cd30:	addeq	r3, r3, #1
   1cd34:	streq	r3, [r0, #4]
   1cd38:	beq	1cab0 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1cd3c:	cmp	r3, #0
   1cd40:	beq	1cf48 <flatcc_json_parser_union_type_vector@@Base+0x538>
   1cd44:	sub	lr, r3, #1
   1cd48:	mov	r3, r8
   1cd4c:	ldr	ip, [r2, #4]
   1cd50:	ldr	r8, [r2, #8]
   1cd54:	mov	r2, r5
   1cd58:	str	lr, [r0, #4]
   1cd5c:	mov	r0, r6
   1cd60:	ldr	lr, [sp, #24]
   1cd64:	str	r7, [sp]
   1cd68:	str	lr, [sp, #4]
   1cd6c:	ldr	lr, [sp, #100]	; 0x64
   1cd70:	str	lr, [sp, #8]
   1cd74:	ldr	r7, [r6, #16]
   1cd78:	str	r8, [r6, #16]
   1cd7c:	ldr	r8, [r6, #4]
   1cd80:	str	ip, [r6, #4]
   1cd84:	bl	1a35c <flatcc_json_parser_space_ext@@Base+0x360>
   1cd88:	cmp	r5, r0
   1cd8c:	moveq	r4, r5
   1cd90:	beq	1cab0 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1cd94:	str	r8, [r6, #4]
   1cd98:	str	r7, [r6, #16]
   1cd9c:	b	1cab0 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1cda0:	ldrb	r2, [sp, #35]	; 0x23
   1cda4:	b	1cc80 <flatcc_json_parser_union_type_vector@@Base+0x270>
   1cda8:	mov	sl, r5
   1cdac:	b	1cc30 <flatcc_json_parser_union_type_vector@@Base+0x220>
   1cdb0:	ldr	r3, [sp, #36]	; 0x24
   1cdb4:	cmp	r3, #0
   1cdb8:	bne	1cecc <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   1cdbc:	ldrd	r0, [sp, #40]	; 0x28
   1cdc0:	cmp	r1, #0
   1cdc4:	cmpeq	r0, #255	; 0xff
   1cdc8:	uxtbls	r0, r0
   1cdcc:	movls	r4, sl
   1cdd0:	strbls	r0, [sp, #35]	; 0x23
   1cdd4:	bls	1cc60 <flatcc_json_parser_union_type_vector@@Base+0x250>
   1cdd8:	mov	r1, sl
   1cddc:	mov	r3, #7
   1cde0:	mov	r2, r5
   1cde4:	mov	r0, r6
   1cde8:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1cdec:	mov	r4, r0
   1cdf0:	cmp	r7, r4
   1cdf4:	bne	1cc5c <flatcc_json_parser_union_type_vector@@Base+0x24c>
   1cdf8:	mov	sl, r7
   1cdfc:	b	1cc30 <flatcc_json_parser_union_type_vector@@Base+0x220>
   1ce00:	add	r1, r4, #1
   1ce04:	sub	r3, r5, r1
   1ce08:	cmp	r3, #1
   1ce0c:	ble	1ce24 <flatcc_json_parser_union_type_vector@@Base+0x414>
   1ce10:	ldrb	r3, [r4, #1]
   1ce14:	cmp	r3, #32
   1ce18:	movhi	r4, r1
   1ce1c:	bhi	1cafc <flatcc_json_parser_union_type_vector@@Base+0xec>
   1ce20:	beq	1cee8 <flatcc_json_parser_union_type_vector@@Base+0x4d8>
   1ce24:	mov	r2, r5
   1ce28:	mov	r0, r6
   1ce2c:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1ce30:	mov	r4, r0
   1ce34:	b	1cafc <flatcc_json_parser_union_type_vector@@Base+0xec>
   1ce38:	ldrb	r3, [r4, #1]
   1ce3c:	cmp	r3, #32
   1ce40:	addhi	r4, r4, #1
   1ce44:	bls	1cca0 <flatcc_json_parser_union_type_vector@@Base+0x290>
   1ce48:	b	1ccb4 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   1ce4c:	add	r7, r4, #1
   1ce50:	sub	r3, r5, r7
   1ce54:	cmp	r3, #1
   1ce58:	ble	1ce6c <flatcc_json_parser_union_type_vector@@Base+0x45c>
   1ce5c:	ldrb	r3, [r4, #1]
   1ce60:	cmp	r3, #32
   1ce64:	bhi	1ce80 <flatcc_json_parser_union_type_vector@@Base+0x470>
   1ce68:	beq	1cefc <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   1ce6c:	mov	r1, r7
   1ce70:	mov	r2, r5
   1ce74:	mov	r0, r6
   1ce78:	bl	19ffc <flatcc_json_parser_space_ext@@Base>
   1ce7c:	mov	r7, r0
   1ce80:	cmp	r5, r7
   1ce84:	beq	1cf2c <flatcc_json_parser_union_type_vector@@Base+0x51c>
   1ce88:	ldrb	r3, [r7]
   1ce8c:	cmp	r3, #93	; 0x5d
   1ce90:	bne	1cbd8 <flatcc_json_parser_union_type_vector@@Base+0x1c8>
   1ce94:	add	r4, r7, #1
   1ce98:	sub	r3, r5, r4
   1ce9c:	cmp	r3, #1
   1cea0:	ble	1cec4 <flatcc_json_parser_union_type_vector@@Base+0x4b4>
   1cea4:	ldrb	r3, [r7, #1]
   1cea8:	cmp	r3, #32
   1ceac:	bhi	1cafc <flatcc_json_parser_union_type_vector@@Base+0xec>
   1ceb0:	bne	1cec4 <flatcc_json_parser_union_type_vector@@Base+0x4b4>
   1ceb4:	ldrb	r3, [r7, #2]
   1ceb8:	cmp	r3, #32
   1cebc:	addhi	r4, r7, #2
   1cec0:	bhi	1cafc <flatcc_json_parser_union_type_vector@@Base+0xec>
   1cec4:	mov	r1, r4
   1cec8:	b	1ce24 <flatcc_json_parser_union_type_vector@@Base+0x414>
   1cecc:	mov	r1, r0
   1ced0:	mov	r3, #8
   1ced4:	mov	r2, r5
   1ced8:	mov	r0, r6
   1cedc:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1cee0:	mov	r4, r0
   1cee4:	b	1cdf0 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1cee8:	ldrb	r3, [r4, #2]
   1ceec:	cmp	r3, #32
   1cef0:	addhi	r4, r4, #2
   1cef4:	bls	1ce24 <flatcc_json_parser_union_type_vector@@Base+0x414>
   1cef8:	b	1cafc <flatcc_json_parser_union_type_vector@@Base+0xec>
   1cefc:	ldrb	r3, [r4, #2]
   1cf00:	cmp	r3, #32
   1cf04:	addhi	r7, r4, #2
   1cf08:	bls	1ce6c <flatcc_json_parser_union_type_vector@@Base+0x45c>
   1cf0c:	b	1ce80 <flatcc_json_parser_union_type_vector@@Base+0x470>
   1cf10:	mov	r1, r4
   1cf14:	mov	r2, r5
   1cf18:	mov	r0, r6
   1cf1c:	mov	r3, #15
   1cf20:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1cf24:	mov	r4, r0
   1cf28:	b	1cab0 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1cf2c:	mov	r3, #9
   1cf30:	mov	r2, r5
   1cf34:	mov	r1, r5
   1cf38:	mov	r0, r6
   1cf3c:	bl	19f08 <flatcc_json_parser_set_error@@Base>
   1cf40:	mov	r4, r0
   1cf44:	b	1cafc <flatcc_json_parser_union_type_vector@@Base+0xec>
   1cf48:	ldr	r3, [pc, #32]	; 1cf70 <flatcc_json_parser_union_type_vector@@Base+0x560>
   1cf4c:	movw	r2, #1122	; 0x462
   1cf50:	ldr	r1, [pc, #28]	; 1cf74 <flatcc_json_parser_union_type_vector@@Base+0x564>
   1cf54:	ldr	r0, [pc, #28]	; 1cf78 <flatcc_json_parser_union_type_vector@@Base+0x568>
   1cf58:	add	r3, pc, r3
   1cf5c:	add	r3, r3, #2016	; 0x7e0
   1cf60:	add	r1, pc, r1
   1cf64:	add	r3, r3, #4
   1cf68:	add	r0, pc, r0
   1cf6c:	bl	124b0 <__assert_fail@plt>
   1cf70:	muleq	r0, r8, r3
   1cf74:	ldrdeq	r1, [r0], -ip
   1cf78:	andeq	r2, r0, r8, lsr r0

0001cf7c <flatcc_json_parser_table_as_root@@Base>:
   1cf7c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1cf80:	subs	r4, r1, #0
   1cf84:	mov	r5, r2
   1cf88:	strd	r6, [sp, #8]
   1cf8c:	mov	r2, #32
   1cf90:	mov	r1, #0
   1cf94:	strd	r8, [sp, #16]
   1cf98:	mov	r8, r0
   1cf9c:	add	r6, r5, r3
   1cfa0:	str	lr, [sp, #24]
   1cfa4:	sub	sp, sp, #52	; 0x34
   1cfa8:	ldr	r9, [sp, #80]	; 0x50
   1cfac:	addeq	r4, sp, #4
   1cfb0:	add	r0, r4, #12
   1cfb4:	bl	12480 <memset@plt>
   1cfb8:	mov	ip, #1
   1cfbc:	mov	r2, #0
   1cfc0:	str	r8, [r4]
   1cfc4:	mov	r0, r8
   1cfc8:	ldr	r1, [sp, #84]	; 0x54
   1cfcc:	asr	r7, r9, #1
   1cfd0:	stmib	r4, {r5, r9}
   1cfd4:	str	ip, [r4, #16]
   1cfd8:	and	r7, r7, #2
   1cfdc:	str	r5, [r4, #28]
   1cfe0:	mov	r3, r7
   1cfe4:	str	r6, [r4, #32]
   1cfe8:	str	r5, [r4, #36]	; 0x24
   1cfec:	bl	15084 <flatcc_builder_start_buffer@@Base>
   1cff0:	cmp	r0, #0
   1cff4:	bne	1d054 <flatcc_json_parser_table_as_root@@Base+0xd8>
   1cff8:	mov	r2, r6
   1cffc:	mov	r3, sp
   1d000:	ldr	ip, [sp, #88]	; 0x58
   1d004:	mov	r1, r5
   1d008:	mov	r0, r4
   1d00c:	blx	ip
   1d010:	ldr	r6, [r4, #24]
   1d014:	cmp	r6, #0
   1d018:	beq	1d038 <flatcc_json_parser_table_as_root@@Base+0xbc>
   1d01c:	mov	r0, r6
   1d020:	add	sp, sp, #52	; 0x34
   1d024:	ldrd	r4, [sp]
   1d028:	ldrd	r6, [sp, #8]
   1d02c:	ldrd	r8, [sp, #16]
   1d030:	add	sp, sp, #24
   1d034:	pop	{pc}		; (ldr pc, [sp], #4)
   1d038:	mov	r0, r8
   1d03c:	ldr	r1, [sp]
   1d040:	bl	15160 <flatcc_builder_end_buffer@@Base>
   1d044:	cmp	r0, #0
   1d048:	beq	1d054 <flatcc_json_parser_table_as_root@@Base+0xd8>
   1d04c:	str	r5, [r4, #40]	; 0x28
   1d050:	b	1d01c <flatcc_json_parser_table_as_root@@Base+0xa0>
   1d054:	mvn	r6, #0
   1d058:	b	1d01c <flatcc_json_parser_table_as_root@@Base+0xa0>

0001d05c <flatcc_json_parser_struct_as_root@@Base>:
   1d05c:	b	1cf7c <flatcc_json_parser_table_as_root@@Base>
   1d060:	eor	r1, r1, #-2147483648	; 0x80000000
   1d064:	b	1d06c <flatcc_json_parser_struct_as_root@@Base+0x10>
   1d068:	eor	r3, r3, #-2147483648	; 0x80000000
   1d06c:	push	{r4, r5, lr}
   1d070:	lsl	r4, r1, #1
   1d074:	lsl	r5, r3, #1
   1d078:	teq	r4, r5
   1d07c:	teqeq	r0, r2
   1d080:	orrsne	ip, r4, r0
   1d084:	orrsne	ip, r5, r2
   1d088:	mvnsne	ip, r4, asr #21
   1d08c:	mvnsne	ip, r5, asr #21
   1d090:	beq	1d27c <flatcc_json_parser_struct_as_root@@Base+0x220>
   1d094:	lsr	r4, r4, #21
   1d098:	rsbs	r5, r4, r5, lsr #21
   1d09c:	rsblt	r5, r5, #0
   1d0a0:	ble	1d0c0 <flatcc_json_parser_struct_as_root@@Base+0x64>
   1d0a4:	add	r4, r4, r5
   1d0a8:	eor	r2, r0, r2
   1d0ac:	eor	r3, r1, r3
   1d0b0:	eor	r0, r2, r0
   1d0b4:	eor	r1, r3, r1
   1d0b8:	eor	r2, r0, r2
   1d0bc:	eor	r3, r1, r3
   1d0c0:	cmp	r5, #54	; 0x36
   1d0c4:	pophi	{r4, r5, pc}
   1d0c8:	tst	r1, #-2147483648	; 0x80000000
   1d0cc:	lsl	r1, r1, #12
   1d0d0:	mov	ip, #1048576	; 0x100000
   1d0d4:	orr	r1, ip, r1, lsr #12
   1d0d8:	beq	1d0e4 <flatcc_json_parser_struct_as_root@@Base+0x88>
   1d0dc:	rsbs	r0, r0, #0
   1d0e0:	rsc	r1, r1, #0
   1d0e4:	tst	r3, #-2147483648	; 0x80000000
   1d0e8:	lsl	r3, r3, #12
   1d0ec:	orr	r3, ip, r3, lsr #12
   1d0f0:	beq	1d0fc <flatcc_json_parser_struct_as_root@@Base+0xa0>
   1d0f4:	rsbs	r2, r2, #0
   1d0f8:	rsc	r3, r3, #0
   1d0fc:	teq	r4, r5
   1d100:	beq	1d264 <flatcc_json_parser_struct_as_root@@Base+0x208>
   1d104:	sub	r4, r4, #1
   1d108:	rsbs	lr, r5, #32
   1d10c:	blt	1d128 <flatcc_json_parser_struct_as_root@@Base+0xcc>
   1d110:	lsl	ip, r2, lr
   1d114:	adds	r0, r0, r2, lsr r5
   1d118:	adc	r1, r1, #0
   1d11c:	adds	r0, r0, r3, lsl lr
   1d120:	adcs	r1, r1, r3, asr r5
   1d124:	b	1d144 <flatcc_json_parser_struct_as_root@@Base+0xe8>
   1d128:	sub	r5, r5, #32
   1d12c:	add	lr, lr, #32
   1d130:	cmp	r2, #1
   1d134:	lsl	ip, r3, lr
   1d138:	orrcs	ip, ip, #2
   1d13c:	adds	r0, r0, r3, asr r5
   1d140:	adcs	r1, r1, r3, asr #31
   1d144:	and	r5, r1, #-2147483648	; 0x80000000
   1d148:	bpl	1d158 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   1d14c:	rsbs	ip, ip, #0
   1d150:	rscs	r0, r0, #0
   1d154:	rsc	r1, r1, #0
   1d158:	cmp	r1, #1048576	; 0x100000
   1d15c:	bcc	1d19c <flatcc_json_parser_struct_as_root@@Base+0x140>
   1d160:	cmp	r1, #2097152	; 0x200000
   1d164:	bcc	1d184 <flatcc_json_parser_struct_as_root@@Base+0x128>
   1d168:	lsrs	r1, r1, #1
   1d16c:	rrxs	r0, r0
   1d170:	rrx	ip, ip
   1d174:	add	r4, r4, #1
   1d178:	lsl	r2, r4, #21
   1d17c:	cmn	r2, #4194304	; 0x400000
   1d180:	bcs	1d2dc <flatcc_json_parser_struct_as_root@@Base+0x280>
   1d184:	cmp	ip, #-2147483648	; 0x80000000
   1d188:	lsrseq	ip, r0, #1
   1d18c:	adcs	r0, r0, #0
   1d190:	adc	r1, r1, r4, lsl #20
   1d194:	orr	r1, r1, r5
   1d198:	pop	{r4, r5, pc}
   1d19c:	lsls	ip, ip, #1
   1d1a0:	adcs	r0, r0, r0
   1d1a4:	adc	r1, r1, r1
   1d1a8:	tst	r1, #1048576	; 0x100000
   1d1ac:	sub	r4, r4, #1
   1d1b0:	bne	1d184 <flatcc_json_parser_struct_as_root@@Base+0x128>
   1d1b4:	teq	r1, #0
   1d1b8:	moveq	r1, r0
   1d1bc:	moveq	r0, #0
   1d1c0:	clz	r3, r1
   1d1c4:	addeq	r3, r3, #32
   1d1c8:	sub	r3, r3, #11
   1d1cc:	subs	r2, r3, #32
   1d1d0:	bge	1d1f4 <flatcc_json_parser_struct_as_root@@Base+0x198>
   1d1d4:	adds	r2, r2, #12
   1d1d8:	ble	1d1f0 <flatcc_json_parser_struct_as_root@@Base+0x194>
   1d1dc:	add	ip, r2, #20
   1d1e0:	rsb	r2, r2, #12
   1d1e4:	lsl	r0, r1, ip
   1d1e8:	lsr	r1, r1, r2
   1d1ec:	b	1d204 <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   1d1f0:	add	r2, r2, #20
   1d1f4:	rsble	ip, r2, #32
   1d1f8:	lsl	r1, r1, r2
   1d1fc:	orrle	r1, r1, r0, lsr ip
   1d200:	lslle	r0, r0, r2
   1d204:	subs	r4, r4, r3
   1d208:	addge	r1, r1, r4, lsl #20
   1d20c:	orrge	r1, r1, r5
   1d210:	popge	{r4, r5, pc}
   1d214:	mvn	r4, r4
   1d218:	subs	r4, r4, #31
   1d21c:	bge	1d258 <flatcc_json_parser_struct_as_root@@Base+0x1fc>
   1d220:	adds	r4, r4, #12
   1d224:	bgt	1d240 <flatcc_json_parser_struct_as_root@@Base+0x1e4>
   1d228:	add	r4, r4, #20
   1d22c:	rsb	r2, r4, #32
   1d230:	lsr	r0, r0, r4
   1d234:	orr	r0, r0, r1, lsl r2
   1d238:	orr	r1, r5, r1, lsr r4
   1d23c:	pop	{r4, r5, pc}
   1d240:	rsb	r4, r4, #12
   1d244:	rsb	r2, r4, #32
   1d248:	lsr	r0, r0, r2
   1d24c:	orr	r0, r0, r1, lsl r4
   1d250:	mov	r1, r5
   1d254:	pop	{r4, r5, pc}
   1d258:	lsr	r0, r1, r4
   1d25c:	mov	r1, r5
   1d260:	pop	{r4, r5, pc}
   1d264:	teq	r4, #0
   1d268:	eor	r3, r3, #1048576	; 0x100000
   1d26c:	eoreq	r1, r1, #1048576	; 0x100000
   1d270:	addeq	r4, r4, #1
   1d274:	subne	r5, r5, #1
   1d278:	b	1d104 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   1d27c:	mvns	ip, r4, asr #21
   1d280:	mvnsne	ip, r5, asr #21
   1d284:	beq	1d2ec <flatcc_json_parser_struct_as_root@@Base+0x290>
   1d288:	teq	r4, r5
   1d28c:	teqeq	r0, r2
   1d290:	beq	1d2a4 <flatcc_json_parser_struct_as_root@@Base+0x248>
   1d294:	orrs	ip, r4, r0
   1d298:	moveq	r1, r3
   1d29c:	moveq	r0, r2
   1d2a0:	pop	{r4, r5, pc}
   1d2a4:	teq	r1, r3
   1d2a8:	movne	r1, #0
   1d2ac:	movne	r0, #0
   1d2b0:	popne	{r4, r5, pc}
   1d2b4:	lsrs	ip, r4, #21
   1d2b8:	bne	1d2cc <flatcc_json_parser_struct_as_root@@Base+0x270>
   1d2bc:	lsls	r0, r0, #1
   1d2c0:	adcs	r1, r1, r1
   1d2c4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1d2c8:	pop	{r4, r5, pc}
   1d2cc:	adds	r4, r4, #4194304	; 0x400000
   1d2d0:	addcc	r1, r1, #1048576	; 0x100000
   1d2d4:	popcc	{r4, r5, pc}
   1d2d8:	and	r5, r1, #-2147483648	; 0x80000000
   1d2dc:	orr	r1, r5, #2130706432	; 0x7f000000
   1d2e0:	orr	r1, r1, #15728640	; 0xf00000
   1d2e4:	mov	r0, #0
   1d2e8:	pop	{r4, r5, pc}
   1d2ec:	mvns	ip, r4, asr #21
   1d2f0:	movne	r1, r3
   1d2f4:	movne	r0, r2
   1d2f8:	mvnseq	ip, r5, asr #21
   1d2fc:	movne	r3, r1
   1d300:	movne	r2, r0
   1d304:	orrs	r4, r0, r1, lsl #12
   1d308:	orrseq	r5, r2, r3, lsl #12
   1d30c:	teqeq	r1, r3
   1d310:	orrne	r1, r1, #524288	; 0x80000
   1d314:	pop	{r4, r5, pc}
   1d318:	teq	r0, #0
   1d31c:	moveq	r1, #0
   1d320:	bxeq	lr
   1d324:	push	{r4, r5, lr}
   1d328:	mov	r4, #1024	; 0x400
   1d32c:	add	r4, r4, #50	; 0x32
   1d330:	mov	r5, #0
   1d334:	mov	r1, #0
   1d338:	b	1d1b4 <flatcc_json_parser_struct_as_root@@Base+0x158>
   1d33c:	teq	r0, #0
   1d340:	moveq	r1, #0
   1d344:	bxeq	lr
   1d348:	push	{r4, r5, lr}
   1d34c:	mov	r4, #1024	; 0x400
   1d350:	add	r4, r4, #50	; 0x32
   1d354:	ands	r5, r0, #-2147483648	; 0x80000000
   1d358:	rsbmi	r0, r0, #0
   1d35c:	mov	r1, #0
   1d360:	b	1d1b4 <flatcc_json_parser_struct_as_root@@Base+0x158>
   1d364:	lsls	r2, r0, #1
   1d368:	asr	r1, r2, #3
   1d36c:	rrx	r1, r1
   1d370:	lsl	r0, r2, #28
   1d374:	andsne	r3, r2, #-16777216	; 0xff000000
   1d378:	teqne	r3, #-16777216	; 0xff000000
   1d37c:	eorne	r1, r1, #939524096	; 0x38000000
   1d380:	bxne	lr
   1d384:	bics	r2, r2, #-16777216	; 0xff000000
   1d388:	bxeq	lr
   1d38c:	teq	r3, #-16777216	; 0xff000000
   1d390:	orreq	r1, r1, #524288	; 0x80000
   1d394:	bxeq	lr
   1d398:	push	{r4, r5, lr}
   1d39c:	mov	r4, #896	; 0x380
   1d3a0:	and	r5, r1, #-2147483648	; 0x80000000
   1d3a4:	bic	r1, r1, #-2147483648	; 0x80000000
   1d3a8:	b	1d1b4 <flatcc_json_parser_struct_as_root@@Base+0x158>
   1d3ac:	orrs	r2, r0, r1
   1d3b0:	bxeq	lr
   1d3b4:	push	{r4, r5, lr}
   1d3b8:	mov	r5, #0
   1d3bc:	b	1d3dc <flatcc_json_parser_struct_as_root@@Base+0x380>
   1d3c0:	orrs	r2, r0, r1
   1d3c4:	bxeq	lr
   1d3c8:	push	{r4, r5, lr}
   1d3cc:	ands	r5, r1, #-2147483648	; 0x80000000
   1d3d0:	bpl	1d3dc <flatcc_json_parser_struct_as_root@@Base+0x380>
   1d3d4:	rsbs	r0, r0, #0
   1d3d8:	rsc	r1, r1, #0
   1d3dc:	mov	r4, #1024	; 0x400
   1d3e0:	add	r4, r4, #50	; 0x32
   1d3e4:	lsrs	ip, r1, #22
   1d3e8:	beq	1d158 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   1d3ec:	mov	r2, #3
   1d3f0:	lsrs	ip, ip, #3
   1d3f4:	addne	r2, r2, #3
   1d3f8:	lsrs	ip, ip, #3
   1d3fc:	addne	r2, r2, #3
   1d400:	add	r2, r2, ip, lsr #3
   1d404:	rsb	r3, r2, #32
   1d408:	lsl	ip, r0, r3
   1d40c:	lsr	r0, r0, r2
   1d410:	orr	r0, r0, r1, lsl r3
   1d414:	lsr	r1, r1, r2
   1d418:	add	r4, r4, r2
   1d41c:	b	1d158 <flatcc_json_parser_struct_as_root@@Base+0xfc>

0001d420 <__libc_csu_init@@Base>:
   1d420:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d424:	mov	r7, r0
   1d428:	ldr	r6, [pc, #72]	; 1d478 <__libc_csu_init@@Base+0x58>
   1d42c:	ldr	r5, [pc, #72]	; 1d47c <__libc_csu_init@@Base+0x5c>
   1d430:	add	r6, pc, r6
   1d434:	add	r5, pc, r5
   1d438:	sub	r6, r6, r5
   1d43c:	mov	r8, r1
   1d440:	mov	r9, r2
   1d444:	bl	123dc <free@plt-0x20>
   1d448:	asrs	r6, r6, #2
   1d44c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d450:	mov	r4, #0
   1d454:	add	r4, r4, #1
   1d458:	ldr	r3, [r5], #4
   1d45c:	mov	r2, r9
   1d460:	mov	r1, r8
   1d464:	mov	r0, r7
   1d468:	blx	r3
   1d46c:	cmp	r6, r4
   1d470:	bne	1d454 <__libc_csu_init@@Base+0x34>
   1d474:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d478:	ldrdeq	r2, [r1], -ip
   1d47c:	ldrdeq	r2, [r1], -r4

0001d480 <__libc_csu_fini@@Base>:
   1d480:	bx	lr

Disassembly of section .fini:

0001d484 <.fini>:
   1d484:	push	{r3, lr}
   1d488:	pop	{r3, pc}
