
../repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

000105bc <.init>:
   105bc:	push	{r3, lr}
   105c0:	bl	106dc <_start@@Base+0x3c>
   105c4:	pop	{r3, pc}

Disassembly of section .plt:

000105c8 <raise@plt-0x14>:
   105c8:	push	{lr}		; (str lr, [sp, #-4]!)
   105cc:	ldr	lr, [pc, #4]	; 105d8 <raise@plt-0x4>
   105d0:	add	lr, pc, lr
   105d4:	ldr	pc, [lr, #8]!
   105d8:	andeq	r0, r1, r8, lsr #20

000105dc <raise@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2600]!	; 0xa28

000105e8 <printf@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2592]!	; 0xa20

000105f4 <__libc_start_main@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2584]!	; 0xa18

00010600 <__gmon_start__@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2576]!	; 0xa10

0001060c <__isoc99_scanf@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2568]!	; 0xa08

00010618 <abort@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2560]!	; 0xa00

Disassembly of section .text:

00010624 <main@@Base>:
   10624:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10628:	add	r1, sp, #4
   1062c:	ldr	r0, [pc, #96]	; 10694 <main@@Base+0x70>
   10630:	bl	1060c <__isoc99_scanf@plt>
   10634:	ldr	r5, [pc, #92]	; 10698 <main@@Base+0x74>
   10638:	mov	r4, #0
   1063c:	ldr	r3, [sp, #4]
   10640:	cmp	r4, r3
   10644:	blt	10654 <main@@Base+0x30>
   10648:	mov	r0, #0
   1064c:	add	sp, sp, #16
   10650:	pop	{r4, r5, r6, pc}
   10654:	add	r2, sp, #12
   10658:	add	r1, sp, #8
   1065c:	mov	r0, r5
   10660:	bl	1060c <__isoc99_scanf@plt>
   10664:	ldr	r0, [sp, #8]
   10668:	bl	107c8 <invert@@Base>
   1066c:	add	r4, r4, #1
   10670:	mov	r6, r0
   10674:	ldr	r0, [sp, #12]
   10678:	bl	107c8 <invert@@Base>
   1067c:	add	r0, r6, r0
   10680:	bl	107c8 <invert@@Base>
   10684:	mov	r1, r0
   10688:	ldr	r0, [pc, #12]	; 1069c <main@@Base+0x78>
   1068c:	bl	105e8 <printf@plt>
   10690:	b	1063c <main@@Base+0x18>
   10694:	ldrdeq	r0, [r1], -r3
   10698:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1069c:	ldrdeq	r0, [r1], -r6

000106a0 <_start@@Base>:
   106a0:	mov	fp, #0
   106a4:	mov	lr, #0
   106a8:	pop	{r1}		; (ldr r1, [sp], #4)
   106ac:	mov	r2, sp
   106b0:	push	{r2}		; (str r2, [sp, #-4]!)
   106b4:	push	{r0}		; (str r0, [sp, #-4]!)
   106b8:	ldr	ip, [pc, #16]	; 106d0 <_start@@Base+0x30>
   106bc:	push	{ip}		; (str ip, [sp, #-4]!)
   106c0:	ldr	r0, [pc, #12]	; 106d4 <_start@@Base+0x34>
   106c4:	ldr	r3, [pc, #12]	; 106d8 <_start@@Base+0x38>
   106c8:	bl	105f4 <__libc_start_main@plt>
   106cc:	bl	10618 <abort@plt>
   106d0:	andeq	r0, r1, r0, asr #21
   106d4:	andeq	r0, r1, r4, lsr #12
   106d8:	andeq	r0, r1, r0, ror #20
   106dc:	ldr	r3, [pc, #20]	; 106f8 <_start@@Base+0x58>
   106e0:	ldr	r2, [pc, #20]	; 106fc <_start@@Base+0x5c>
   106e4:	add	r3, pc, r3
   106e8:	ldr	r2, [r3, r2]
   106ec:	cmp	r2, #0
   106f0:	bxeq	lr
   106f4:	b	10600 <__gmon_start__@plt>
   106f8:	andeq	r0, r1, r4, lsl r9
   106fc:	andeq	r0, r0, r4, lsr #32
   10700:	ldr	r3, [pc, #28]	; 10724 <_start@@Base+0x84>
   10704:	ldr	r0, [pc, #28]	; 10728 <_start@@Base+0x88>
   10708:	sub	r3, r3, r0
   1070c:	cmp	r3, #6
   10710:	bxls	lr
   10714:	ldr	r3, [pc, #16]	; 1072c <_start@@Base+0x8c>
   10718:	cmp	r3, #0
   1071c:	bxeq	lr
   10720:	bx	r3
   10724:	andeq	r1, r2, r3, lsr r0
   10728:	andeq	r1, r2, r0, lsr r0
   1072c:	andeq	r0, r0, r0
   10730:	ldr	r1, [pc, #36]	; 1075c <_start@@Base+0xbc>
   10734:	ldr	r0, [pc, #36]	; 10760 <_start@@Base+0xc0>
   10738:	sub	r1, r1, r0
   1073c:	asr	r1, r1, #2
   10740:	add	r1, r1, r1, lsr #31
   10744:	asrs	r1, r1, #1
   10748:	bxeq	lr
   1074c:	ldr	r3, [pc, #16]	; 10764 <_start@@Base+0xc4>
   10750:	cmp	r3, #0
   10754:	bxeq	lr
   10758:	bx	r3
   1075c:	andeq	r1, r2, r0, lsr r0
   10760:	andeq	r1, r2, r0, lsr r0
   10764:	andeq	r0, r0, r0
   10768:	push	{r4, lr}
   1076c:	ldr	r4, [pc, #24]	; 1078c <_start@@Base+0xec>
   10770:	ldrb	r3, [r4]
   10774:	cmp	r3, #0
   10778:	popne	{r4, pc}
   1077c:	bl	10700 <_start@@Base+0x60>
   10780:	mov	r3, #1
   10784:	strb	r3, [r4]
   10788:	pop	{r4, pc}
   1078c:	andeq	r1, r2, r0, lsr r0
   10790:	ldr	r0, [pc, #40]	; 107c0 <_start@@Base+0x120>
   10794:	ldr	r3, [r0]
   10798:	cmp	r3, #0
   1079c:	bne	107a4 <_start@@Base+0x104>
   107a0:	b	10730 <_start@@Base+0x90>
   107a4:	ldr	r3, [pc, #24]	; 107c4 <_start@@Base+0x124>
   107a8:	cmp	r3, #0
   107ac:	beq	107a0 <_start@@Base+0x100>
   107b0:	push	{r4, lr}
   107b4:	blx	r3
   107b8:	pop	{r4, lr}
   107bc:	b	10730 <_start@@Base+0x90>
   107c0:	andeq	r0, r2, r4, lsl pc
   107c4:	andeq	r0, r0, r0

000107c8 <invert@@Base>:
   107c8:	push	{r4, r5, r6, lr}
   107cc:	mov	r5, r0
   107d0:	mov	r4, #0
   107d4:	mov	r6, #10
   107d8:	cmp	r5, #0
   107dc:	bne	107e8 <invert@@Base+0x20>
   107e0:	mov	r0, r4
   107e4:	pop	{r4, r5, r6, pc}
   107e8:	mov	r0, r5
   107ec:	mov	r1, #10
   107f0:	bl	10a30 <invert@@Base+0x268>
   107f4:	mul	r4, r6, r4
   107f8:	mov	r0, r5
   107fc:	add	r4, r1, r4
   10800:	mov	r1, #10
   10804:	bl	10810 <invert@@Base+0x48>
   10808:	mov	r5, r0
   1080c:	b	107d8 <invert@@Base+0x10>
   10810:	cmp	r1, #0
   10814:	beq	10a20 <invert@@Base+0x258>
   10818:	eor	ip, r0, r1
   1081c:	rsbmi	r1, r1, #0
   10820:	subs	r2, r1, #1
   10824:	beq	109ec <invert@@Base+0x224>
   10828:	movs	r3, r0
   1082c:	rsbmi	r3, r0, #0
   10830:	cmp	r3, r1
   10834:	bls	109f8 <invert@@Base+0x230>
   10838:	tst	r1, r2
   1083c:	beq	10a08 <invert@@Base+0x240>
   10840:	clz	r2, r3
   10844:	clz	r0, r1
   10848:	sub	r2, r0, r2
   1084c:	rsbs	r2, r2, #31
   10850:	addne	r2, r2, r2, lsl #1
   10854:	mov	r0, #0
   10858:	addne	pc, pc, r2, lsl #2
   1085c:	nop			; (mov r0, r0)
   10860:	cmp	r3, r1, lsl #31
   10864:	adc	r0, r0, r0
   10868:	subcs	r3, r3, r1, lsl #31
   1086c:	cmp	r3, r1, lsl #30
   10870:	adc	r0, r0, r0
   10874:	subcs	r3, r3, r1, lsl #30
   10878:	cmp	r3, r1, lsl #29
   1087c:	adc	r0, r0, r0
   10880:	subcs	r3, r3, r1, lsl #29
   10884:	cmp	r3, r1, lsl #28
   10888:	adc	r0, r0, r0
   1088c:	subcs	r3, r3, r1, lsl #28
   10890:	cmp	r3, r1, lsl #27
   10894:	adc	r0, r0, r0
   10898:	subcs	r3, r3, r1, lsl #27
   1089c:	cmp	r3, r1, lsl #26
   108a0:	adc	r0, r0, r0
   108a4:	subcs	r3, r3, r1, lsl #26
   108a8:	cmp	r3, r1, lsl #25
   108ac:	adc	r0, r0, r0
   108b0:	subcs	r3, r3, r1, lsl #25
   108b4:	cmp	r3, r1, lsl #24
   108b8:	adc	r0, r0, r0
   108bc:	subcs	r3, r3, r1, lsl #24
   108c0:	cmp	r3, r1, lsl #23
   108c4:	adc	r0, r0, r0
   108c8:	subcs	r3, r3, r1, lsl #23
   108cc:	cmp	r3, r1, lsl #22
   108d0:	adc	r0, r0, r0
   108d4:	subcs	r3, r3, r1, lsl #22
   108d8:	cmp	r3, r1, lsl #21
   108dc:	adc	r0, r0, r0
   108e0:	subcs	r3, r3, r1, lsl #21
   108e4:	cmp	r3, r1, lsl #20
   108e8:	adc	r0, r0, r0
   108ec:	subcs	r3, r3, r1, lsl #20
   108f0:	cmp	r3, r1, lsl #19
   108f4:	adc	r0, r0, r0
   108f8:	subcs	r3, r3, r1, lsl #19
   108fc:	cmp	r3, r1, lsl #18
   10900:	adc	r0, r0, r0
   10904:	subcs	r3, r3, r1, lsl #18
   10908:	cmp	r3, r1, lsl #17
   1090c:	adc	r0, r0, r0
   10910:	subcs	r3, r3, r1, lsl #17
   10914:	cmp	r3, r1, lsl #16
   10918:	adc	r0, r0, r0
   1091c:	subcs	r3, r3, r1, lsl #16
   10920:	cmp	r3, r1, lsl #15
   10924:	adc	r0, r0, r0
   10928:	subcs	r3, r3, r1, lsl #15
   1092c:	cmp	r3, r1, lsl #14
   10930:	adc	r0, r0, r0
   10934:	subcs	r3, r3, r1, lsl #14
   10938:	cmp	r3, r1, lsl #13
   1093c:	adc	r0, r0, r0
   10940:	subcs	r3, r3, r1, lsl #13
   10944:	cmp	r3, r1, lsl #12
   10948:	adc	r0, r0, r0
   1094c:	subcs	r3, r3, r1, lsl #12
   10950:	cmp	r3, r1, lsl #11
   10954:	adc	r0, r0, r0
   10958:	subcs	r3, r3, r1, lsl #11
   1095c:	cmp	r3, r1, lsl #10
   10960:	adc	r0, r0, r0
   10964:	subcs	r3, r3, r1, lsl #10
   10968:	cmp	r3, r1, lsl #9
   1096c:	adc	r0, r0, r0
   10970:	subcs	r3, r3, r1, lsl #9
   10974:	cmp	r3, r1, lsl #8
   10978:	adc	r0, r0, r0
   1097c:	subcs	r3, r3, r1, lsl #8
   10980:	cmp	r3, r1, lsl #7
   10984:	adc	r0, r0, r0
   10988:	subcs	r3, r3, r1, lsl #7
   1098c:	cmp	r3, r1, lsl #6
   10990:	adc	r0, r0, r0
   10994:	subcs	r3, r3, r1, lsl #6
   10998:	cmp	r3, r1, lsl #5
   1099c:	adc	r0, r0, r0
   109a0:	subcs	r3, r3, r1, lsl #5
   109a4:	cmp	r3, r1, lsl #4
   109a8:	adc	r0, r0, r0
   109ac:	subcs	r3, r3, r1, lsl #4
   109b0:	cmp	r3, r1, lsl #3
   109b4:	adc	r0, r0, r0
   109b8:	subcs	r3, r3, r1, lsl #3
   109bc:	cmp	r3, r1, lsl #2
   109c0:	adc	r0, r0, r0
   109c4:	subcs	r3, r3, r1, lsl #2
   109c8:	cmp	r3, r1, lsl #1
   109cc:	adc	r0, r0, r0
   109d0:	subcs	r3, r3, r1, lsl #1
   109d4:	cmp	r3, r1
   109d8:	adc	r0, r0, r0
   109dc:	subcs	r3, r3, r1
   109e0:	cmp	ip, #0
   109e4:	rsbmi	r0, r0, #0
   109e8:	bx	lr
   109ec:	teq	ip, r0
   109f0:	rsbmi	r0, r0, #0
   109f4:	bx	lr
   109f8:	movcc	r0, #0
   109fc:	asreq	r0, ip, #31
   10a00:	orreq	r0, r0, #1
   10a04:	bx	lr
   10a08:	clz	r2, r1
   10a0c:	rsb	r2, r2, #31
   10a10:	cmp	ip, #0
   10a14:	lsr	r0, r3, r2
   10a18:	rsbmi	r0, r0, #0
   10a1c:	bx	lr
   10a20:	cmp	r0, #0
   10a24:	mvngt	r0, #-2147483648	; 0x80000000
   10a28:	movlt	r0, #-2147483648	; 0x80000000
   10a2c:	b	10a50 <invert@@Base+0x288>
   10a30:	cmp	r1, #0
   10a34:	beq	10a20 <invert@@Base+0x258>
   10a38:	push	{r0, r1, lr}
   10a3c:	bl	10818 <invert@@Base+0x50>
   10a40:	pop	{r1, r2, lr}
   10a44:	mul	r3, r2, r0
   10a48:	sub	r1, r1, r3
   10a4c:	bx	lr
   10a50:	push	{r1, lr}
   10a54:	mov	r0, #8
   10a58:	bl	105dc <raise@plt>
   10a5c:	pop	{r1, pc}

00010a60 <__libc_csu_init@@Base>:
   10a60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a64:	mov	r7, r0
   10a68:	ldr	r6, [pc, #72]	; 10ab8 <__libc_csu_init@@Base+0x58>
   10a6c:	ldr	r5, [pc, #72]	; 10abc <__libc_csu_init@@Base+0x5c>
   10a70:	add	r6, pc, r6
   10a74:	add	r5, pc, r5
   10a78:	sub	r6, r6, r5
   10a7c:	mov	r8, r1
   10a80:	mov	r9, r2
   10a84:	bl	105bc <raise@plt-0x20>
   10a88:	asrs	r6, r6, #2
   10a8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a90:	mov	r4, #0
   10a94:	add	r4, r4, #1
   10a98:	ldr	r3, [r5], #4
   10a9c:	mov	r2, r9
   10aa0:	mov	r1, r8
   10aa4:	mov	r0, r7
   10aa8:	blx	r3
   10aac:	cmp	r6, r4
   10ab0:	bne	10a94 <__libc_csu_init@@Base+0x34>
   10ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ab8:	muleq	r1, r8, r4
   10abc:	muleq	r1, r0, r4

00010ac0 <__libc_csu_fini@@Base>:
   10ac0:	bx	lr

Disassembly of section .fini:

00010ac4 <.fini>:
   10ac4:	push	{r3, lr}
   10ac8:	pop	{r3, pc}
