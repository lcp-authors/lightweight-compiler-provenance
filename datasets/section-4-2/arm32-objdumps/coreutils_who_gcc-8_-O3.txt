
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010e78 <.init>:
   10e78:	push	{r3, lr}
   10e7c:	bl	1157c <__assert_fail@plt+0x3f0>
   10e80:	pop	{r3, pc}

Disassembly of section .plt:

00010e84 <calloc@plt-0x14>:
   10e84:	push	{lr}		; (str lr, [sp, #-4]!)
   10e88:	ldr	lr, [pc, #4]	; 10e94 <calloc@plt-0x4>
   10e8c:	add	lr, pc, lr
   10e90:	ldr	pc, [lr, #8]!
   10e94:	andeq	r9, r1, ip, ror #2

00010e98 <calloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #102400	; 0x19000
   10ea0:	ldr	pc, [ip, #364]!	; 0x16c

00010ea4 <fputs_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #102400	; 0x19000
   10eac:	ldr	pc, [ip, #356]!	; 0x164

00010eb0 <raise@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #102400	; 0x19000
   10eb8:	ldr	pc, [ip, #348]!	; 0x15c

00010ebc <strcmp@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #102400	; 0x19000
   10ec4:	ldr	pc, [ip, #340]!	; 0x154

00010ec8 <fflush@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #102400	; 0x19000
   10ed0:	ldr	pc, [ip, #332]!	; 0x14c

00010ed4 <utmpxname@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #102400	; 0x19000
   10edc:	ldr	pc, [ip, #324]!	; 0x144

00010ee0 <free@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #102400	; 0x19000
   10ee8:	ldr	pc, [ip, #316]!	; 0x13c

00010eec <gai_strerror@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #102400	; 0x19000
   10ef4:	ldr	pc, [ip, #308]!	; 0x134

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #102400	; 0x19000
   10f00:	ldr	pc, [ip, #300]!	; 0x12c

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #102400	; 0x19000
   10f0c:	ldr	pc, [ip, #292]!	; 0x124

00010f10 <mbsinit@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #102400	; 0x19000
   10f18:	ldr	pc, [ip, #284]!	; 0x11c

00010f1c <time@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #102400	; 0x19000
   10f24:	ldr	pc, [ip, #276]!	; 0x114

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #102400	; 0x19000
   10f30:	ldr	pc, [ip, #268]!	; 0x10c

00010f34 <stpcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #102400	; 0x19000
   10f3c:	ldr	pc, [ip, #260]!	; 0x104

00010f40 <fputc_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #102400	; 0x19000
   10f48:	ldr	pc, [ip, #252]!	; 0xfc

00010f4c <dcgettext@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #102400	; 0x19000
   10f54:	ldr	pc, [ip, #244]!	; 0xf4

00010f58 <strdup@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #102400	; 0x19000
   10f60:	ldr	pc, [ip, #236]!	; 0xec

00010f64 <setutxent@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #102400	; 0x19000
   10f6c:	ldr	pc, [ip, #228]!	; 0xe4

00010f70 <realloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #102400	; 0x19000
   10f78:	ldr	pc, [ip, #220]!	; 0xdc

00010f7c <textdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #102400	; 0x19000
   10f84:	ldr	pc, [ip, #212]!	; 0xd4

00010f88 <iswprint@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #102400	; 0x19000
   10f90:	ldr	pc, [ip, #204]!	; 0xcc

00010f94 <fwrite@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #102400	; 0x19000
   10f9c:	ldr	pc, [ip, #196]!	; 0xc4

00010fa0 <lseek64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #102400	; 0x19000
   10fa8:	ldr	pc, [ip, #188]!	; 0xbc

00010fac <__ctype_get_mb_cur_max@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #102400	; 0x19000
   10fb4:	ldr	pc, [ip, #180]!	; 0xb4

00010fb8 <__fpending@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #102400	; 0x19000
   10fc0:	ldr	pc, [ip, #172]!	; 0xac

00010fc4 <mbrtowc@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #102400	; 0x19000
   10fcc:	ldr	pc, [ip, #164]!	; 0xa4

00010fd0 <error@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #102400	; 0x19000
   10fd8:	ldr	pc, [ip, #156]!	; 0x9c

00010fdc <__asprintf_chk@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #102400	; 0x19000
   10fe4:	ldr	pc, [ip, #148]!	; 0x94

00010fe8 <puts@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #102400	; 0x19000
   10ff0:	ldr	pc, [ip, #140]!	; 0x8c

00010ff4 <malloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #102400	; 0x19000
   10ffc:	ldr	pc, [ip, #132]!	; 0x84

00011000 <__libc_start_main@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #102400	; 0x19000
   11008:	ldr	pc, [ip, #124]!	; 0x7c

0001100c <strftime@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #102400	; 0x19000
   11014:	ldr	pc, [ip, #116]!	; 0x74

00011018 <__freading@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #102400	; 0x19000
   11020:	ldr	pc, [ip, #108]!	; 0x6c

00011024 <localtime@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #102400	; 0x19000
   1102c:	ldr	pc, [ip, #100]!	; 0x64

00011030 <__gmon_start__@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #102400	; 0x19000
   11038:	ldr	pc, [ip, #92]!	; 0x5c

0001103c <getopt_long@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #102400	; 0x19000
   11044:	ldr	pc, [ip, #84]!	; 0x54

00011048 <kill@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #102400	; 0x19000
   11050:	ldr	pc, [ip, #76]!	; 0x4c

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #102400	; 0x19000
   1105c:	ldr	pc, [ip, #68]!	; 0x44

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #102400	; 0x19000
   11068:	ldr	pc, [ip, #60]!	; 0x3c

0001106c <ttyname@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #102400	; 0x19000
   11074:	ldr	pc, [ip, #52]!	; 0x34

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #102400	; 0x19000
   11080:	ldr	pc, [ip, #44]!	; 0x2c

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #102400	; 0x19000
   1108c:	ldr	pc, [ip, #36]!	; 0x24

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #102400	; 0x19000
   11098:	ldr	pc, [ip, #28]!

0001109c <__sprintf_chk@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #102400	; 0x19000
   110a4:	ldr	pc, [ip, #20]!

000110a8 <__cxa_atexit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #102400	; 0x19000
   110b0:	ldr	pc, [ip, #12]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #102400	; 0x19000
   110bc:	ldr	pc, [ip, #4]!

000110c0 <strncpy@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #4092]!	; 0xffc

000110cc <__printf_chk@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #24, 20	; 0x18000
   110d4:	ldr	pc, [ip, #4084]!	; 0xff4

000110d8 <fileno@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #24, 20	; 0x18000
   110e0:	ldr	pc, [ip, #4076]!	; 0xfec

000110e4 <__fprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #24, 20	; 0x18000
   110ec:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f0 <fclose@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #24, 20	; 0x18000
   110f8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110fc <fseeko64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #24, 20	; 0x18000
   11104:	ldr	pc, [ip, #4052]!	; 0xfd4

00011108 <endutxent@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #24, 20	; 0x18000
   11110:	ldr	pc, [ip, #4044]!	; 0xfcc

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #24, 20	; 0x18000
   1111c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #24, 20	; 0x18000
   11128:	ldr	pc, [ip, #4028]!	; 0xfbc

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #24, 20	; 0x18000
   11134:	ldr	pc, [ip, #4020]!	; 0xfb4

00011138 <freeaddrinfo@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #24, 20	; 0x18000
   11140:	ldr	pc, [ip, #4012]!	; 0xfac

00011144 <getaddrinfo@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #24, 20	; 0x18000
   1114c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #24, 20	; 0x18000
   11158:	ldr	pc, [ip, #3996]!	; 0xf9c

0001115c <__xstat64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #24, 20	; 0x18000
   11164:	ldr	pc, [ip, #3988]!	; 0xf94

00011168 <strncmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #24, 20	; 0x18000
   11170:	ldr	pc, [ip, #3980]!	; 0xf8c

00011174 <abort@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #24, 20	; 0x18000
   1117c:	ldr	pc, [ip, #3972]!	; 0xf84

00011180 <getutxent@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #24, 20	; 0x18000
   11188:	ldr	pc, [ip, #3964]!	; 0xf7c

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #24, 20	; 0x18000
   11194:	ldr	pc, [ip, #3956]!	; 0xf74

Disassembly of section .text:

00011198 <.text>:
   11198:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1119c:	movw	r5, #41348	; 0xa184
   111a0:	movt	r5, #2
   111a4:	strd	r6, [sp, #8]
   111a8:	mov	r7, r0
   111ac:	movw	r6, #35496	; 0x8aa8
   111b0:	movt	r6, #1
   111b4:	strd	r8, [sp, #16]
   111b8:	mov	r8, r1
   111bc:	str	sl, [sp, #24]
   111c0:	mov	sl, #1
   111c4:	str	lr, [sp, #28]
   111c8:	sub	sp, sp, #16
   111cc:	ldr	r0, [r1]
   111d0:	bl	12f2c <__assert_fail@plt+0x1da0>
   111d4:	movw	r1, #35120	; 0x8930
   111d8:	movt	r1, #1
   111dc:	ldr	r9, [pc, #856]	; 1153c <__assert_fail@plt+0x3b0>
   111e0:	mov	r0, #6
   111e4:	bl	11114 <setlocale@plt>
   111e8:	movw	r1, #35420	; 0x8a5c
   111ec:	movt	r1, #1
   111f0:	movw	r0, #35224	; 0x8998
   111f4:	movt	r0, #1
   111f8:	bl	11150 <bindtextdomain@plt>
   111fc:	movw	r0, #35224	; 0x8998
   11200:	movt	r0, #1
   11204:	bl	10f7c <textdomain@plt>
   11208:	movw	r0, #11432	; 0x2ca8
   1120c:	movt	r0, #1
   11210:	bl	18194 <__assert_fail@plt+0x7008>
   11214:	mov	r4, #0
   11218:	mov	r3, r9
   1121c:	mov	r2, r6
   11220:	mov	r1, r8
   11224:	mov	r0, r7
   11228:	str	r4, [sp]
   1122c:	bl	1103c <getopt_long@plt>
   11230:	cmn	r0, #1
   11234:	beq	11424 <__assert_fail@plt+0x298>
   11238:	cmp	r0, #109	; 0x6d
   1123c:	beq	113e8 <__assert_fail@plt+0x25c>
   11240:	ble	11278 <__assert_fail@plt+0xec>
   11244:	cmp	r0, #115	; 0x73
   11248:	beq	113cc <__assert_fail@plt+0x240>
   1124c:	ble	112b0 <__assert_fail@plt+0x124>
   11250:	cmp	r0, #117	; 0x75
   11254:	beq	11410 <__assert_fail@plt+0x284>
   11258:	blt	11400 <__assert_fail@plt+0x274>
   1125c:	cmp	r0, #119	; 0x77
   11260:	beq	113f4 <__assert_fail@plt+0x268>
   11264:	cmp	r0, #256	; 0x100
   11268:	bne	11364 <__assert_fail@plt+0x1d8>
   1126c:	mov	r3, #1
   11270:	strb	r3, [r5, #49]	; 0x31
   11274:	b	11214 <__assert_fail@plt+0x88>
   11278:	cmp	r0, #84	; 0x54
   1127c:	beq	113f4 <__assert_fail@plt+0x268>
   11280:	ble	11328 <__assert_fail@plt+0x19c>
   11284:	cmp	r0, #98	; 0x62
   11288:	beq	113d8 <__assert_fail@plt+0x24c>
   1128c:	ble	112ec <__assert_fail@plt+0x160>
   11290:	cmp	r0, #100	; 0x64
   11294:	bne	112d0 <__assert_fail@plt+0x144>
   11298:	mov	r3, #1
   1129c:	mov	sl, r4
   112a0:	strb	r3, [r5, #1]
   112a4:	strb	r3, [r5, #2]
   112a8:	strb	r3, [r5, #84]	; 0x54
   112ac:	b	11214 <__assert_fail@plt+0x88>
   112b0:	cmp	r0, #113	; 0x71
   112b4:	beq	1136c <__assert_fail@plt+0x1e0>
   112b8:	ble	11344 <__assert_fail@plt+0x1b8>
   112bc:	mov	r3, #1
   112c0:	mov	sl, r4
   112c4:	strb	r3, [r5, #1]
   112c8:	strb	r3, [r5, #68]	; 0x44
   112cc:	b	11214 <__assert_fail@plt+0x88>
   112d0:	cmp	r0, #108	; 0x6c
   112d4:	bne	11364 <__assert_fail@plt+0x1d8>
   112d8:	mov	r3, #1
   112dc:	mov	sl, r4
   112e0:	strb	r3, [r5, #1]
   112e4:	strb	r3, [r5, #83]	; 0x53
   112e8:	b	11214 <__assert_fail@plt+0x88>
   112ec:	cmp	r0, #97	; 0x61
   112f0:	bne	11364 <__assert_fail@plt+0x1d8>
   112f4:	mov	r3, #1
   112f8:	mov	sl, r4
   112fc:	strb	r3, [r5, #1]
   11300:	strb	r3, [r5, #2]
   11304:	strb	r3, [r5, #3]
   11308:	strb	r3, [r5, #67]	; 0x43
   1130c:	strb	r3, [r5, #68]	; 0x44
   11310:	strb	r3, [r5, #80]	; 0x50
   11314:	strb	r3, [r5, #81]	; 0x51
   11318:	strb	r3, [r5, #82]	; 0x52
   1131c:	strb	r3, [r5, #83]	; 0x53
   11320:	strb	r3, [r5, #84]	; 0x54
   11324:	b	11214 <__assert_fail@plt+0x88>
   11328:	cmn	r0, #2
   1132c:	beq	114f4 <__assert_fail@plt+0x368>
   11330:	cmp	r0, #72	; 0x48
   11334:	bne	1135c <__assert_fail@plt+0x1d0>
   11338:	mov	r3, #1
   1133c:	strb	r3, [r5, #65]	; 0x41
   11340:	b	11214 <__assert_fail@plt+0x88>
   11344:	cmp	r0, #112	; 0x70
   11348:	bne	11364 <__assert_fail@plt+0x1d8>
   1134c:	mov	r3, #1
   11350:	mov	sl, r4
   11354:	strb	r3, [r5, #82]	; 0x52
   11358:	b	11214 <__assert_fail@plt+0x88>
   1135c:	cmn	r0, #3
   11360:	beq	11378 <__assert_fail@plt+0x1ec>
   11364:	mov	r0, #1
   11368:	bl	12770 <__assert_fail@plt+0x15e4>
   1136c:	mov	r3, #1
   11370:	strb	r3, [r5, #64]	; 0x40
   11374:	b	11214 <__assert_fail@plt+0x88>
   11378:	movw	r3, #35444	; 0x8a74
   1137c:	movt	r3, #1
   11380:	movw	r1, #35460	; 0x8a84
   11384:	movt	r1, #1
   11388:	movw	r2, #35476	; 0x8a94
   1138c:	movt	r2, #1
   11390:	movw	r0, #41340	; 0xa17c
   11394:	movt	r0, #2
   11398:	str	r2, [sp]
   1139c:	movw	r2, #35220	; 0x8994
   113a0:	movt	r2, #1
   113a4:	stmib	sp, {r1, r3, r4}
   113a8:	movw	r3, #41248	; 0xa120
   113ac:	movt	r3, #2
   113b0:	movw	r1, #33920	; 0x8480
   113b4:	movt	r1, #1
   113b8:	ldr	r0, [r0]
   113bc:	ldr	r3, [r3]
   113c0:	bl	17274 <__assert_fail@plt+0x60e8>
   113c4:	mov	r0, r4
   113c8:	bl	11060 <exit@plt>
   113cc:	mov	r3, #1
   113d0:	strb	r3, [r5]
   113d4:	b	11214 <__assert_fail@plt+0x88>
   113d8:	mov	r3, #1
   113dc:	mov	sl, r4
   113e0:	strb	r3, [r5, #80]	; 0x50
   113e4:	b	11214 <__assert_fail@plt+0x88>
   113e8:	mov	r3, #1
   113ec:	strb	r3, [r5, #66]	; 0x42
   113f0:	b	11214 <__assert_fail@plt+0x88>
   113f4:	mov	r3, #1
   113f8:	strb	r3, [r5, #3]
   113fc:	b	11214 <__assert_fail@plt+0x88>
   11400:	mov	r3, #1
   11404:	mov	sl, r4
   11408:	strb	r3, [r5, #81]	; 0x51
   1140c:	b	11214 <__assert_fail@plt+0x88>
   11410:	mov	r3, #1
   11414:	mov	sl, r4
   11418:	strb	r3, [r5, #1]
   1141c:	strb	r3, [r5, #67]	; 0x43
   11420:	b	11214 <__assert_fail@plt+0x88>
   11424:	cmp	sl, r4
   11428:	movw	r4, #41348	; 0xa184
   1142c:	movt	r4, #2
   11430:	movne	r3, #1
   11434:	mov	r0, #2
   11438:	movw	r5, #41328	; 0xa170
   1143c:	movt	r5, #2
   11440:	strbne	r3, [r4]
   11444:	strbne	r3, [r4, #67]	; 0x43
   11448:	ldrb	r3, [r4, #2]
   1144c:	cmp	r3, #0
   11450:	movne	r3, #0
   11454:	strbne	r3, [r4]
   11458:	bl	12df4 <__assert_fail@plt+0x1c68>
   1145c:	ldr	ip, [r5]
   11460:	cmp	r0, #0
   11464:	movw	r2, #35408	; 0x8a50
   11468:	movt	r2, #1
   1146c:	movw	r3, #35392	; 0x8a40
   11470:	movt	r3, #1
   11474:	movne	r2, #16
   11478:	moveq	r3, r2
   1147c:	moveq	r2, #12
   11480:	sub	r7, r7, ip
   11484:	str	r2, [r4, #4]
   11488:	add	r7, r7, #1
   1148c:	str	r3, [r4, #60]	; 0x3c
   11490:	cmp	r7, #3
   11494:	ldrls	pc, [pc, r7, lsl #2]
   11498:	b	114fc <__assert_fail@plt+0x370>
   1149c:			; <UNDEFINED> instruction: 0x000114b4
   114a0:			; <UNDEFINED> instruction: 0x000114b4
   114a4:	andeq	r1, r1, r4, ror #9
   114a8:	andeq	r1, r1, ip, lsr #9
   114ac:	mov	r3, #1
   114b0:	strb	r3, [r4, #66]	; 0x42
   114b4:	movw	r0, #35140	; 0x8944
   114b8:	movt	r0, #1
   114bc:	mov	r1, #1
   114c0:	bl	11d58 <__assert_fail@plt+0xbcc>
   114c4:	mov	r0, #0
   114c8:	add	sp, sp, #16
   114cc:	ldrd	r4, [sp]
   114d0:	ldrd	r6, [sp, #8]
   114d4:	ldrd	r8, [sp, #16]
   114d8:	ldr	sl, [sp, #24]
   114dc:	add	sp, sp, #28
   114e0:	pop	{pc}		; (ldr pc, [sp], #4)
   114e4:	mov	r1, #0
   114e8:	ldr	r0, [r8, ip, lsl #2]
   114ec:	bl	11d58 <__assert_fail@plt+0xbcc>
   114f0:	b	114c4 <__assert_fail@plt+0x338>
   114f4:	mov	r0, r4
   114f8:	bl	12770 <__assert_fail@plt+0x15e4>
   114fc:	mov	r2, #5
   11500:	movw	r1, #35512	; 0x8ab8
   11504:	movt	r1, #1
   11508:	mov	r0, #0
   1150c:	bl	10f4c <dcgettext@plt>
   11510:	ldr	r3, [r5]
   11514:	mov	r4, r0
   11518:	add	r3, r3, #2
   1151c:	ldr	r0, [r8, r3, lsl #2]
   11520:	bl	1689c <__assert_fail@plt+0x5710>
   11524:	mov	r1, #0
   11528:	mov	r3, r0
   1152c:	mov	r2, r4
   11530:	mov	r0, r1
   11534:	bl	10fd0 <error@plt>
   11538:	b	11364 <__assert_fail@plt+0x1d8>
   1153c:	strdeq	r8, [r1], -ip
   11540:	mov	fp, #0
   11544:	mov	lr, #0
   11548:	pop	{r1}		; (ldr r1, [sp], #4)
   1154c:	mov	r2, sp
   11550:	push	{r2}		; (str r2, [sp, #-4]!)
   11554:	push	{r0}		; (str r0, [sp, #-4]!)
   11558:	ldr	ip, [pc, #16]	; 11570 <__assert_fail@plt+0x3e4>
   1155c:	push	{ip}		; (str ip, [sp, #-4]!)
   11560:	ldr	r0, [pc, #12]	; 11574 <__assert_fail@plt+0x3e8>
   11564:	ldr	r3, [pc, #12]	; 11578 <__assert_fail@plt+0x3ec>
   11568:	bl	11000 <__libc_start_main@plt>
   1156c:	bl	11174 <abort@plt>
   11570:	muleq	r1, r0, r1
   11574:	muleq	r1, r8, r1
   11578:	andeq	r8, r1, r0, lsr r1
   1157c:	ldr	r3, [pc, #20]	; 11598 <__assert_fail@plt+0x40c>
   11580:	ldr	r2, [pc, #20]	; 1159c <__assert_fail@plt+0x410>
   11584:	add	r3, pc, r3
   11588:	ldr	r2, [r3, r2]
   1158c:	cmp	r2, #0
   11590:	bxeq	lr
   11594:	b	11030 <__gmon_start__@plt>
   11598:	andeq	r8, r1, r4, ror sl
   1159c:	andeq	r0, r0, ip, lsl #2
   115a0:	ldr	r0, [pc, #24]	; 115c0 <__assert_fail@plt+0x434>
   115a4:	ldr	r3, [pc, #24]	; 115c4 <__assert_fail@plt+0x438>
   115a8:	cmp	r3, r0
   115ac:	bxeq	lr
   115b0:	ldr	r3, [pc, #16]	; 115c8 <__assert_fail@plt+0x43c>
   115b4:	cmp	r3, #0
   115b8:	bxeq	lr
   115bc:	bx	r3
   115c0:	andeq	sl, r2, r8, ror #2
   115c4:	andeq	sl, r2, r8, ror #2
   115c8:	andeq	r0, r0, r0
   115cc:	ldr	r0, [pc, #36]	; 115f8 <__assert_fail@plt+0x46c>
   115d0:	ldr	r1, [pc, #36]	; 115fc <__assert_fail@plt+0x470>
   115d4:	sub	r1, r1, r0
   115d8:	asr	r1, r1, #2
   115dc:	add	r1, r1, r1, lsr #31
   115e0:	asrs	r1, r1, #1
   115e4:	bxeq	lr
   115e8:	ldr	r3, [pc, #16]	; 11600 <__assert_fail@plt+0x474>
   115ec:	cmp	r3, #0
   115f0:	bxeq	lr
   115f4:	bx	r3
   115f8:	andeq	sl, r2, r8, ror #2
   115fc:	andeq	sl, r2, r8, ror #2
   11600:	andeq	r0, r0, r0
   11604:	push	{r4, lr}
   11608:	ldr	r4, [pc, #24]	; 11628 <__assert_fail@plt+0x49c>
   1160c:	ldrb	r3, [r4]
   11610:	cmp	r3, #0
   11614:	popne	{r4, pc}
   11618:	bl	115a0 <__assert_fail@plt+0x414>
   1161c:	mov	r3, #1
   11620:	strb	r3, [r4]
   11624:	pop	{r4, pc}
   11628:	andeq	sl, r2, r0, lsl #3
   1162c:	b	115cc <__assert_fail@plt+0x440>
   11630:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11634:	movw	r4, #41348	; 0xa184
   11638:	movt	r4, #2
   1163c:	movw	ip, #41240	; 0xa118
   11640:	movt	ip, #2
   11644:	strd	r6, [sp, #8]
   11648:	str	lr, [sp, #32]
   1164c:	mov	r5, r1
   11650:	ldrb	lr, [r4, #1]
   11654:	strd	r8, [sp, #16]
   11658:	strd	sl, [sp, #24]
   1165c:	sub	sp, sp, #76	; 0x4c
   11660:	mov	fp, r0
   11664:	mov	sl, r3
   11668:	ldrb	r6, [r4]
   1166c:	strb	r2, [ip, #1]
   11670:	cmp	lr, #0
   11674:	ldr	r9, [sp, #112]	; 0x70
   11678:	beq	11684 <__assert_fail@plt+0x4f8>
   1167c:	cmp	r6, #0
   11680:	beq	117d4 <__assert_fail@plt+0x648>
   11684:	mov	r3, #0
   11688:	add	r8, sp, #48	; 0x30
   1168c:	strb	r3, [sp, #48]	; 0x30
   11690:	cmp	r6, #0
   11694:	bne	116a8 <__assert_fail@plt+0x51c>
   11698:	ldr	r0, [sp, #124]	; 0x7c
   1169c:	bl	11078 <strlen@plt>
   116a0:	cmp	r0, #11
   116a4:	bls	11830 <__assert_fail@plt+0x6a4>
   116a8:	mov	r3, #0
   116ac:	add	r7, sp, #56	; 0x38
   116b0:	strb	r3, [sp, #56]	; 0x38
   116b4:	ldrb	r3, [r4, #2]
   116b8:	cmp	r3, #0
   116bc:	moveq	r0, #1
   116c0:	beq	116d8 <__assert_fail@plt+0x54c>
   116c4:	ldr	r0, [sp, #132]	; 0x84
   116c8:	bl	11078 <strlen@plt>
   116cc:	cmp	r0, #11
   116d0:	addhi	r0, r0, #2
   116d4:	movls	r0, #14
   116d8:	bl	17484 <__assert_fail@plt+0x62f8>
   116dc:	ldrb	r3, [r4, #2]
   116e0:	mov	r6, r0
   116e4:	cmp	r3, #0
   116e8:	strbeq	r3, [r0]
   116ec:	bne	11810 <__assert_fail@plt+0x684>
   116f0:	ldrb	lr, [r4, #3]
   116f4:	cmp	r5, #0
   116f8:	movw	r1, #33564	; 0x831c
   116fc:	movt	r1, #1
   11700:	str	sl, [sp, #8]
   11704:	movw	r2, #41240	; 0xa118
   11708:	movt	r2, #2
   1170c:	ldr	ip, [r4, #4]
   11710:	moveq	r5, r1
   11714:	movw	r0, #35120	; 0x8930
   11718:	movt	r0, #1
   1171c:	mov	r3, fp
   11720:	mov	r1, #1
   11724:	str	r5, [sp]
   11728:	cmp	lr, #0
   1172c:	str	r9, [sp, #12]
   11730:	movne	r0, r2
   11734:	movw	r2, #33596	; 0x833c
   11738:	movt	r2, #1
   1173c:	str	ip, [sp, #16]
   11740:	ldr	ip, [sp, #116]	; 0x74
   11744:	str	r0, [sp, #4]
   11748:	add	r0, sp, #44	; 0x2c
   1174c:	str	r8, [sp, #24]
   11750:	str	r7, [sp, #28]
   11754:	str	r6, [sp, #36]	; 0x24
   11758:	str	ip, [sp, #20]
   1175c:	ldr	ip, [sp, #128]	; 0x80
   11760:	str	ip, [sp, #32]
   11764:	bl	10fdc <__asprintf_chk@plt>
   11768:	cmn	r0, #1
   1176c:	beq	11858 <__assert_fail@plt+0x6cc>
   11770:	ldr	r4, [sp, #44]	; 0x2c
   11774:	mov	r0, r4
   11778:	bl	11078 <strlen@plt>
   1177c:	add	r0, r4, r0
   11780:	b	11788 <__assert_fail@plt+0x5fc>
   11784:	mov	r0, r2
   11788:	ldrb	r3, [r0, #-1]
   1178c:	sub	r2, r0, #1
   11790:	cmp	r3, #32
   11794:	beq	11784 <__assert_fail@plt+0x5f8>
   11798:	mov	r3, #0
   1179c:	strb	r3, [r0]
   117a0:	ldr	r0, [sp, #44]	; 0x2c
   117a4:	bl	10fe8 <puts@plt>
   117a8:	ldr	r0, [sp, #44]	; 0x2c
   117ac:	bl	12d94 <__assert_fail@plt+0x1c08>
   117b0:	mov	r0, r6
   117b4:	bl	12d94 <__assert_fail@plt+0x1c08>
   117b8:	add	sp, sp, #76	; 0x4c
   117bc:	ldrd	r4, [sp]
   117c0:	ldrd	r6, [sp, #8]
   117c4:	ldrd	r8, [sp, #16]
   117c8:	ldrd	sl, [sp, #24]
   117cc:	add	sp, sp, #32
   117d0:	pop	{pc}		; (ldr pc, [sp], #4)
   117d4:	ldr	r0, [sp, #120]	; 0x78
   117d8:	bl	11078 <strlen@plt>
   117dc:	cmp	r0, #6
   117e0:	bhi	11684 <__assert_fail@plt+0x4f8>
   117e4:	ldr	r2, [sp, #120]	; 0x78
   117e8:	add	r8, sp, #48	; 0x30
   117ec:	movw	r3, #33572	; 0x8324
   117f0:	movt	r3, #1
   117f4:	mov	r0, r8
   117f8:	mov	r1, #1
   117fc:	str	r2, [sp]
   11800:	mov	r2, #8
   11804:	bl	1109c <__sprintf_chk@plt>
   11808:	ldrb	r6, [r4]
   1180c:	b	11690 <__assert_fail@plt+0x504>
   11810:	ldr	r2, [sp, #132]	; 0x84
   11814:	movw	r3, #33588	; 0x8334
   11818:	movt	r3, #1
   1181c:	mov	r1, #1
   11820:	str	r2, [sp]
   11824:	mvn	r2, #0
   11828:	bl	1109c <__sprintf_chk@plt>
   1182c:	b	116f0 <__assert_fail@plt+0x564>
   11830:	ldr	r2, [sp, #124]	; 0x7c
   11834:	add	r7, sp, #56	; 0x38
   11838:	movw	r3, #33580	; 0x832c
   1183c:	movt	r3, #1
   11840:	mov	r0, r7
   11844:	mov	r1, #1
   11848:	str	r2, [sp]
   1184c:	mov	r2, #13
   11850:	bl	1109c <__sprintf_chk@plt>
   11854:	b	116b4 <__assert_fail@plt+0x528>
   11858:	bl	17a3c <__assert_fail@plt+0x68b0>
   1185c:	ldr	ip, [r0, #4]
   11860:	movw	r3, #33640	; 0x8368
   11864:	movt	r3, #1
   11868:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1186c:	mov	r2, #12
   11870:	mov	r4, r0
   11874:	strd	r6, [sp, #8]
   11878:	mov	r5, r1
   1187c:	mov	r1, #1
   11880:	strd	r8, [sp, #16]
   11884:	strd	sl, [sp, #24]
   11888:	str	lr, [sp, #32]
   1188c:	sub	sp, sp, #476	; 0x1dc
   11890:	add	r7, sp, #52	; 0x34
   11894:	mov	r0, r7
   11898:	str	ip, [sp]
   1189c:	bl	1109c <__sprintf_chk@plt>
   118a0:	ldrb	r3, [r4, #8]
   118a4:	cmp	r3, #47	; 0x2f
   118a8:	bne	11b80 <__assert_fail@plt+0x9f4>
   118ac:	add	r1, sp, #64	; 0x40
   118b0:	add	sl, r4, #8
   118b4:	mov	ip, r1
   118b8:	add	r0, r4, #40	; 0x28
   118bc:	add	r2, r4, #9
   118c0:	b	118d0 <__assert_fail@plt+0x744>
   118c4:	ldrb	r3, [r2], #1
   118c8:	cmp	r3, #0
   118cc:	beq	118dc <__assert_fail@plt+0x750>
   118d0:	cmp	r0, r2
   118d4:	strb	r3, [ip], #1
   118d8:	bhi	118c4 <__assert_fail@plt+0x738>
   118dc:	mov	r3, #0
   118e0:	add	r2, sp, #104	; 0x68
   118e4:	mov	r0, #3
   118e8:	strb	r3, [ip]
   118ec:	bl	1115c <__xstat64@plt>
   118f0:	cmp	r0, #0
   118f4:	bne	11bb4 <__assert_fail@plt+0xa28>
   118f8:	ldr	r3, [sp, #120]	; 0x78
   118fc:	ldr	r6, [sp, #176]	; 0xb0
   11900:	tst	r3, #16
   11904:	movne	fp, #43	; 0x2b
   11908:	moveq	fp, #45	; 0x2d
   1190c:	cmp	r6, #0
   11910:	bne	11a68 <__assert_fail@plt+0x8dc>
   11914:	movw	r3, #8224	; 0x2020
   11918:	movt	r3, #63	; 0x3f
   1191c:	add	r8, sp, #44	; 0x2c
   11920:	str	r3, [sp, #44]	; 0x2c
   11924:	ldrb	r3, [r4, #76]	; 0x4c
   11928:	cmp	r3, #0
   1192c:	bne	119dc <__assert_fail@plt+0x850>
   11930:	movw	r5, #41348	; 0xa184
   11934:	movt	r5, #2
   11938:	ldr	r3, [r5, #52]	; 0x34
   1193c:	ldr	r0, [r5, #56]	; 0x38
   11940:	cmp	r3, #0
   11944:	beq	11bd0 <__assert_fail@plt+0xa44>
   11948:	mov	r3, #0
   1194c:	add	r6, sp, #212	; 0xd4
   11950:	strb	r3, [r0]
   11954:	ldr	r3, [r4, #340]	; 0x154
   11958:	mov	r0, r6
   1195c:	add	r4, r4, #44	; 0x2c
   11960:	str	r3, [sp, #212]	; 0xd4
   11964:	bl	11024 <localtime@plt>
   11968:	subs	r3, r0, #0
   1196c:	beq	11bbc <__assert_fail@plt+0xa30>
   11970:	mov	r1, #33	; 0x21
   11974:	ldr	r0, [pc, #980]	; 11d50 <__assert_fail@plt+0xbc4>
   11978:	ldr	r2, [r5, #60]	; 0x3c
   1197c:	bl	1100c <strftime@plt>
   11980:	ldr	r0, [pc, #968]	; 11d50 <__assert_fail@plt+0xbc4>
   11984:	movw	ip, #35120	; 0x8930
   11988:	movt	ip, #1
   1198c:	ldr	lr, [r5, #56]	; 0x38
   11990:	mov	r3, #32
   11994:	mov	r2, fp
   11998:	mov	r1, r4
   1199c:	str	sl, [sp]
   119a0:	stmib	sp, {r0, r8}
   119a4:	mov	r0, r3
   119a8:	str	r7, [sp, #12]
   119ac:	str	ip, [sp, #20]
   119b0:	cmp	lr, #0
   119b4:	moveq	lr, ip
   119b8:	str	lr, [sp, #16]
   119bc:	bl	11630 <__assert_fail@plt+0x4a4>
   119c0:	add	sp, sp, #476	; 0x1dc
   119c4:	ldrd	r4, [sp]
   119c8:	ldrd	r6, [sp, #8]
   119cc:	ldrd	r8, [sp, #16]
   119d0:	ldrd	sl, [sp, #24]
   119d4:	add	sp, sp, #32
   119d8:	pop	{pc}		; (ldr pc, [sp], #4)
   119dc:	add	r6, sp, #212	; 0xd4
   119e0:	add	r1, r4, #332	; 0x14c
   119e4:	mov	ip, r6
   119e8:	add	r2, r4, #77	; 0x4d
   119ec:	b	119fc <__assert_fail@plt+0x870>
   119f0:	ldrb	r3, [r2], #1
   119f4:	cmp	r3, #0
   119f8:	beq	11a08 <__assert_fail@plt+0x87c>
   119fc:	cmp	r1, r2
   11a00:	strb	r3, [ip], #1
   11a04:	bhi	119f0 <__assert_fail@plt+0x864>
   11a08:	mov	r5, #0
   11a0c:	mov	r1, #58	; 0x3a
   11a10:	mov	r0, r6
   11a14:	strb	r5, [ip]
   11a18:	bl	11084 <strchr@plt>
   11a1c:	subs	r1, r0, #0
   11a20:	beq	11bec <__assert_fail@plt+0xa60>
   11a24:	strb	r5, [r1], #1
   11a28:	ldrb	r3, [sp, #212]	; 0xd4
   11a2c:	cmp	r3, r5
   11a30:	movw	r5, #41348	; 0xa184
   11a34:	movt	r5, #2
   11a38:	beq	11af0 <__assert_fail@plt+0x964>
   11a3c:	ldrb	r3, [r5, #49]	; 0x31
   11a40:	cmp	r3, #0
   11a44:	beq	11af0 <__assert_fail@plt+0x964>
   11a48:	mov	r0, r6
   11a4c:	str	r1, [sp, #24]
   11a50:	bl	12b44 <__assert_fail@plt+0x19b8>
   11a54:	cmp	r0, #0
   11a58:	ldr	r1, [sp, #24]
   11a5c:	movne	r9, r0
   11a60:	moveq	r9, r6
   11a64:	b	11af4 <__assert_fail@plt+0x968>
   11a68:	movw	r8, #41240	; 0xa118
   11a6c:	movt	r8, #2
   11a70:	ldr	r3, [r8, #4]
   11a74:	cmp	r3, #-2147483648	; 0x80000000
   11a78:	beq	11c7c <__assert_fail@plt+0xaf0>
   11a7c:	cmp	r6, r5
   11a80:	ble	11ab0 <__assert_fail@plt+0x924>
   11a84:	ldr	r2, [r8, #4]
   11a88:	movw	r1, #44673	; 0xae81
   11a8c:	movt	r1, #65534	; 0xfffe
   11a90:	add	r1, r2, r1
   11a94:	cmp	r6, r1
   11a98:	movlt	r3, #0
   11a9c:	movge	r3, #1
   11aa0:	cmp	r6, r2
   11aa4:	movgt	r3, #0
   11aa8:	cmp	r3, #0
   11aac:	bne	11ca8 <__assert_fail@plt+0xb1c>
   11ab0:	movw	r1, #33708	; 0x83ac
   11ab4:	movt	r1, #1
   11ab8:	mov	r2, #5
   11abc:	mov	r0, #0
   11ac0:	bl	10f4c <dcgettext@plt>
   11ac4:	mov	r1, #6
   11ac8:	add	r8, sp, #44	; 0x2c
   11acc:	movw	r3, #33716	; 0x83b4
   11ad0:	movt	r3, #1
   11ad4:	mov	r2, #7
   11ad8:	str	r1, [sp]
   11adc:	mov	r1, #1
   11ae0:	str	r0, [sp, #4]
   11ae4:	mov	r0, r8
   11ae8:	bl	1109c <__sprintf_chk@plt>
   11aec:	b	11924 <__assert_fail@plt+0x798>
   11af0:	mov	r9, r6
   11af4:	mov	r0, r9
   11af8:	str	r1, [sp, #24]
   11afc:	bl	11078 <strlen@plt>
   11b00:	ldr	r1, [sp, #24]
   11b04:	str	r0, [sp, #36]	; 0x24
   11b08:	ldr	r2, [r5, #52]	; 0x34
   11b0c:	cmp	r1, #0
   11b10:	str	r2, [sp, #24]
   11b14:	ldr	r2, [r5, #56]	; 0x38
   11b18:	beq	11c24 <__assert_fail@plt+0xa98>
   11b1c:	mov	r0, r1
   11b20:	str	r1, [sp, #28]
   11b24:	str	r2, [sp, #32]
   11b28:	bl	11078 <strlen@plt>
   11b2c:	ldr	r2, [sp, #24]
   11b30:	ldr	r3, [sp, #36]	; 0x24
   11b34:	ldr	r1, [sp, #28]
   11b38:	add	r3, r3, #4
   11b3c:	add	r3, r3, r0
   11b40:	cmp	r3, r2
   11b44:	ldr	r2, [sp, #32]
   11b48:	bhi	11c54 <__assert_fail@plt+0xac8>
   11b4c:	mov	r0, r2
   11b50:	movw	r3, #33724	; 0x83bc
   11b54:	movt	r3, #1
   11b58:	mvn	r2, #0
   11b5c:	str	r9, [sp]
   11b60:	str	r1, [sp, #4]
   11b64:	mov	r1, #1
   11b68:	bl	1109c <__sprintf_chk@plt>
   11b6c:	cmp	r9, r6
   11b70:	beq	11954 <__assert_fail@plt+0x7c8>
   11b74:	mov	r0, r9
   11b78:	bl	12d94 <__assert_fail@plt+0x1c08>
   11b7c:	b	11954 <__assert_fail@plt+0x7c8>
   11b80:	movw	r2, #33644	; 0x836c
   11b84:	movt	r2, #1
   11b88:	ldrh	ip, [r2, #4]
   11b8c:	add	r1, sp, #64	; 0x40
   11b90:	cmp	r3, #0
   11b94:	add	sl, r4, #8
   11b98:	add	r0, r4, #40	; 0x28
   11b9c:	ldr	r2, [r2]
   11ba0:	str	r2, [sp, #64]	; 0x40
   11ba4:	strh	ip, [r1, #4]
   11ba8:	add	ip, r1, #5
   11bac:	bne	118bc <__assert_fail@plt+0x730>
   11bb0:	b	118dc <__assert_fail@plt+0x750>
   11bb4:	mov	fp, #63	; 0x3f
   11bb8:	b	11914 <__assert_fail@plt+0x788>
   11bbc:	ldr	r0, [sp, #212]	; 0xd4
   11bc0:	ldr	r2, [pc, #392]	; 11d50 <__assert_fail@plt+0xbc4>
   11bc4:	asr	r1, r0, #31
   11bc8:	bl	12e4c <__assert_fail@plt+0x1cc0>
   11bcc:	b	11984 <__assert_fail@plt+0x7f8>
   11bd0:	mov	r3, #1
   11bd4:	str	r3, [r5, #52]	; 0x34
   11bd8:	bl	12d94 <__assert_fail@plt+0x1c08>
   11bdc:	ldr	r0, [r5, #52]	; 0x34
   11be0:	bl	17484 <__assert_fail@plt+0x62f8>
   11be4:	str	r0, [r5, #56]	; 0x38
   11be8:	b	11948 <__assert_fail@plt+0x7bc>
   11bec:	ldrb	r3, [sp, #212]	; 0xd4
   11bf0:	movw	r5, #41348	; 0xa184
   11bf4:	movt	r5, #2
   11bf8:	cmp	r3, #0
   11bfc:	beq	11c0c <__assert_fail@plt+0xa80>
   11c00:	ldrb	r3, [r5, #49]	; 0x31
   11c04:	cmp	r3, #0
   11c08:	bne	11d10 <__assert_fail@plt+0xb84>
   11c0c:	mov	r0, r6
   11c10:	mov	r9, r6
   11c14:	bl	11078 <strlen@plt>
   11c18:	ldr	r3, [r5, #52]	; 0x34
   11c1c:	ldr	r2, [r5, #56]	; 0x38
   11c20:	str	r3, [sp, #24]
   11c24:	ldr	r1, [sp, #24]
   11c28:	add	r3, r0, #3
   11c2c:	cmp	r3, r1
   11c30:	bhi	11c88 <__assert_fail@plt+0xafc>
   11c34:	mov	r0, r2
   11c38:	movw	r3, #33732	; 0x83c4
   11c3c:	movt	r3, #1
   11c40:	mvn	r2, #0
   11c44:	str	r9, [sp]
   11c48:	mov	r1, #1
   11c4c:	bl	1109c <__sprintf_chk@plt>
   11c50:	b	11b6c <__assert_fail@plt+0x9e0>
   11c54:	mov	r0, r2
   11c58:	str	r1, [sp, #24]
   11c5c:	str	r3, [r5, #52]	; 0x34
   11c60:	bl	12d94 <__assert_fail@plt+0x1c08>
   11c64:	ldr	r0, [r5, #52]	; 0x34
   11c68:	bl	17484 <__assert_fail@plt+0x62f8>
   11c6c:	mov	r2, r0
   11c70:	str	r0, [r5, #56]	; 0x38
   11c74:	ldr	r1, [sp, #24]
   11c78:	b	11b4c <__assert_fail@plt+0x9c0>
   11c7c:	add	r0, r8, #4
   11c80:	bl	10f1c <time@plt>
   11c84:	b	11a7c <__assert_fail@plt+0x8f0>
   11c88:	mov	r0, r2
   11c8c:	str	r3, [r5, #52]	; 0x34
   11c90:	bl	12d94 <__assert_fail@plt+0x1c08>
   11c94:	ldr	r0, [r5, #52]	; 0x34
   11c98:	bl	17484 <__assert_fail@plt+0x62f8>
   11c9c:	mov	r2, r0
   11ca0:	str	r0, [r5, #56]	; 0x38
   11ca4:	b	11c34 <__assert_fail@plt+0xaa8>
   11ca8:	sub	r6, r2, r6
   11cac:	cmp	r6, #59	; 0x3b
   11cb0:	ble	11d24 <__assert_fail@plt+0xb98>
   11cb4:	movw	r3, #20863	; 0x517f
   11cb8:	movt	r3, #1
   11cbc:	cmp	r6, r3
   11cc0:	bgt	11d30 <__assert_fail@plt+0xba4>
   11cc4:	movw	r3, #46021	; 0xb3c5
   11cc8:	movt	r3, #37282	; 0x91a2
   11ccc:	ldr	r0, [pc, #128]	; 11d54 <__assert_fail@plt+0xbc8>
   11cd0:	mov	ip, #3600	; 0xe10
   11cd4:	movw	lr, #34953	; 0x8889
   11cd8:	movt	lr, #34952	; 0x8888
   11cdc:	umull	r3, r1, r3, r6
   11ce0:	mov	r2, #6
   11ce4:	movw	r3, #33696	; 0x83a0
   11ce8:	movt	r3, #1
   11cec:	lsr	r1, r1, #11
   11cf0:	mls	ip, ip, r1, r6
   11cf4:	umull	lr, ip, lr, ip
   11cf8:	lsr	ip, ip, #5
   11cfc:	stm	sp, {r1, ip}
   11d00:	mov	r1, #1
   11d04:	bl	1109c <__sprintf_chk@plt>
   11d08:	ldr	r0, [pc, #68]	; 11d54 <__assert_fail@plt+0xbc8>
   11d0c:	b	11ac4 <__assert_fail@plt+0x938>
   11d10:	mov	r0, r6
   11d14:	bl	12b44 <__assert_fail@plt+0x19b8>
   11d18:	subs	r9, r0, #0
   11d1c:	bne	11c14 <__assert_fail@plt+0xa88>
   11d20:	b	11c0c <__assert_fail@plt+0xa80>
   11d24:	movw	r0, #33632	; 0x8360
   11d28:	movt	r0, #1
   11d2c:	b	11ac4 <__assert_fail@plt+0x938>
   11d30:	movw	r3, #33208	; 0x81b8
   11d34:	movt	r3, #1
   11d38:	movw	r1, #33652	; 0x8374
   11d3c:	movt	r1, #1
   11d40:	movw	r0, #33664	; 0x8380
   11d44:	movt	r0, #1
   11d48:	mov	r2, #205	; 0xcd
   11d4c:	bl	1118c <__assert_fail@plt>
   11d50:	muleq	r2, r4, r1
   11d54:	andeq	sl, r2, ip, lsl #3
   11d58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11d5c:	mov	r3, r1
   11d60:	mov	r4, r0
   11d64:	strd	r6, [sp, #8]
   11d68:	strd	r8, [sp, #16]
   11d6c:	strd	sl, [sp, #24]
   11d70:	str	lr, [sp, #32]
   11d74:	sub	sp, sp, #76	; 0x4c
   11d78:	add	r2, sp, #52	; 0x34
   11d7c:	add	r1, sp, #48	; 0x30
   11d80:	bl	16ab4 <__assert_fail@plt+0x5928>
   11d84:	subs	r2, r0, #0
   11d88:	bne	1273c <__assert_fail@plt+0x15b0>
   11d8c:	movw	r9, #41348	; 0xa184
   11d90:	movt	r9, #2
   11d94:	ldr	r5, [sp, #48]	; 0x30
   11d98:	ldrb	r6, [r9, #64]	; 0x40
   11d9c:	ldr	r4, [sp, #52]	; 0x34
   11da0:	cmp	r6, #0
   11da4:	bne	11ee4 <__assert_fail@plt+0xd58>
   11da8:	ldrb	r2, [r9, #65]	; 0x41
   11dac:	cmp	r2, #0
   11db0:	bne	123d8 <__assert_fail@plt+0x124c>
   11db4:	ldrb	r3, [r9, #66]	; 0x42
   11db8:	cmp	r3, #0
   11dbc:	streq	r3, [sp, #28]
   11dc0:	bne	123a4 <__assert_fail@plt+0x1218>
   11dc4:	cmp	r5, #0
   11dc8:	sub	r5, r5, #1
   11dcc:	beq	11f58 <__assert_fail@plt+0xdcc>
   11dd0:	movw	r3, #33892	; 0x8464
   11dd4:	movt	r3, #1
   11dd8:	movw	fp, #33880	; 0x8458
   11ddc:	movt	fp, #1
   11de0:	movw	sl, #33640	; 0x8368
   11de4:	movt	sl, #1
   11de8:	str	r3, [sp, #36]	; 0x24
   11dec:	add	r4, r4, #8
   11df0:	mov	r3, #-2147483648	; 0x80000000
   11df4:	str	r3, [sp, #32]
   11df8:	ldrb	r3, [r9, #66]	; 0x42
   11dfc:	sub	r6, r4, #8
   11e00:	ldrsh	r8, [r4, #-8]
   11e04:	cmp	r3, #0
   11e08:	beq	11e24 <__assert_fail@plt+0xc98>
   11e0c:	mov	r2, #32
   11e10:	mov	r1, r4
   11e14:	ldr	r0, [sp, #28]
   11e18:	bl	11168 <strncmp@plt>
   11e1c:	cmp	r0, #0
   11e20:	bne	11ec4 <__assert_fail@plt+0xd38>
   11e24:	ldrb	r3, [r9, #67]	; 0x43
   11e28:	cmp	r3, #0
   11e2c:	beq	11e44 <__assert_fail@plt+0xcb8>
   11e30:	ldrb	r3, [r4, #36]	; 0x24
   11e34:	cmp	r3, #0
   11e38:	beq	11e44 <__assert_fail@plt+0xcb8>
   11e3c:	cmp	r8, #7
   11e40:	beq	12644 <__assert_fail@plt+0x14b8>
   11e44:	ldrb	r3, [r9, #68]	; 0x44
   11e48:	cmp	r3, #0
   11e4c:	beq	11e58 <__assert_fail@plt+0xccc>
   11e50:	cmp	r8, #1
   11e54:	beq	1202c <__assert_fail@plt+0xea0>
   11e58:	ldrb	r3, [r9, #80]	; 0x50
   11e5c:	cmp	r3, #0
   11e60:	beq	11e74 <__assert_fail@plt+0xce8>
   11e64:	cmp	r8, #2
   11e68:	movweq	r1, #33852	; 0x843c
   11e6c:	movteq	r1, #1
   11e70:	beq	11f84 <__assert_fail@plt+0xdf8>
   11e74:	ldrb	r3, [r9, #81]	; 0x51
   11e78:	cmp	r3, #0
   11e7c:	beq	11e88 <__assert_fail@plt+0xcfc>
   11e80:	cmp	r8, #3
   11e84:	beq	11f7c <__assert_fail@plt+0xdf0>
   11e88:	ldrb	r3, [r9, #82]	; 0x52
   11e8c:	cmp	r3, #0
   11e90:	beq	11e9c <__assert_fail@plt+0xd10>
   11e94:	cmp	r8, #5
   11e98:	beq	12170 <__assert_fail@plt+0xfe4>
   11e9c:	ldrb	r3, [r9, #83]	; 0x53
   11ea0:	cmp	r3, #0
   11ea4:	beq	11eb0 <__assert_fail@plt+0xd24>
   11ea8:	cmp	r8, #6
   11eac:	beq	12290 <__assert_fail@plt+0x1104>
   11eb0:	ldrb	r3, [r9, #84]	; 0x54
   11eb4:	cmp	r3, #0
   11eb8:	beq	11ec4 <__assert_fail@plt+0xd38>
   11ebc:	cmp	r8, #8
   11ec0:	beq	124ac <__assert_fail@plt+0x1320>
   11ec4:	cmp	r8, #2
   11ec8:	sub	r5, r5, #1
   11ecc:	ldreq	r3, [r4, #332]	; 0x14c
   11ed0:	add	r4, r4, #384	; 0x180
   11ed4:	streq	r3, [sp, #32]
   11ed8:	cmn	r5, #1
   11edc:	bne	11df8 <__assert_fail@plt+0xc6c>
   11ee0:	b	11f58 <__assert_fail@plt+0xdcc>
   11ee4:	cmp	r5, #0
   11ee8:	sub	r6, r5, #1
   11eec:	beq	11f34 <__assert_fail@plt+0xda8>
   11ef0:	movw	r7, #35120	; 0x8930
   11ef4:	movt	r7, #1
   11ef8:	movw	r9, #33740	; 0x83cc
   11efc:	movt	r9, #1
   11f00:	movw	r8, #33636	; 0x8364
   11f04:	movt	r8, #1
   11f08:	mov	r5, r2
   11f0c:	ldrb	r3, [r4, #44]	; 0x2c
   11f10:	cmp	r3, #0
   11f14:	beq	11f24 <__assert_fail@plt+0xd98>
   11f18:	ldrsh	r3, [r4]
   11f1c:	cmp	r3, #7
   11f20:	beq	11ff8 <__assert_fail@plt+0xe6c>
   11f24:	sub	r6, r6, #1
   11f28:	add	r4, r4, #384	; 0x180
   11f2c:	cmn	r6, #1
   11f30:	bne	11f0c <__assert_fail@plt+0xd80>
   11f34:	mov	r2, #5
   11f38:	movw	r1, #33748	; 0x83d4
   11f3c:	movt	r1, #1
   11f40:	mov	r0, #0
   11f44:	bl	10f4c <dcgettext@plt>
   11f48:	mov	r1, r0
   11f4c:	mov	r2, r5
   11f50:	mov	r0, #1
   11f54:	bl	110cc <__printf_chk@plt>
   11f58:	ldr	r0, [sp, #52]	; 0x34
   11f5c:	bl	12d94 <__assert_fail@plt+0x1c08>
   11f60:	add	sp, sp, #76	; 0x4c
   11f64:	ldrd	r4, [sp]
   11f68:	ldrd	r6, [sp, #8]
   11f6c:	ldrd	r8, [sp, #16]
   11f70:	ldrd	sl, [sp, #24]
   11f74:	add	sp, sp, #32
   11f78:	pop	{pc}		; (ldr pc, [sp], #4)
   11f7c:	movw	r1, #33864	; 0x8448
   11f80:	movt	r1, #1
   11f84:	mov	r2, #5
   11f88:	mov	r0, #0
   11f8c:	bl	10f4c <dcgettext@plt>
   11f90:	ldr	r3, [r4, #332]	; 0x14c
   11f94:	mov	r6, r0
   11f98:	add	r0, sp, #60	; 0x3c
   11f9c:	str	r3, [sp, #60]	; 0x3c
   11fa0:	bl	11024 <localtime@plt>
   11fa4:	subs	r3, r0, #0
   11fa8:	beq	12658 <__assert_fail@plt+0x14cc>
   11fac:	mov	r1, #33	; 0x21
   11fb0:	ldr	r0, [pc, #1972]	; 1276c <__assert_fail@plt+0x15e0>
   11fb4:	ldr	r2, [r9, #60]	; 0x3c
   11fb8:	bl	1100c <strftime@plt>
   11fbc:	ldr	r0, [pc, #1960]	; 1276c <__assert_fail@plt+0x15e0>
   11fc0:	movw	ip, #35120	; 0x8930
   11fc4:	movt	ip, #1
   11fc8:	str	r6, [sp]
   11fcc:	mvn	r3, #0
   11fd0:	mov	r1, ip
   11fd4:	mov	r2, #32
   11fd8:	stmib	sp, {r0, ip}
   11fdc:	mov	r0, r3
   11fe0:	str	ip, [sp, #12]
   11fe4:	str	ip, [sp, #16]
   11fe8:	str	ip, [sp, #20]
   11fec:	bl	11630 <__assert_fail@plt+0x4a4>
   11ff0:	ldrsh	r8, [r4, #-8]
   11ff4:	b	11ec4 <__assert_fail@plt+0xd38>
   11ff8:	mov	r0, r4
   11ffc:	add	r5, r5, #1
   12000:	bl	16a30 <__assert_fail@plt+0x58a4>
   12004:	mov	sl, r0
   12008:	mov	r3, r0
   1200c:	mov	r2, r7
   12010:	mov	r1, r9
   12014:	mov	r0, #1
   12018:	mov	r7, r8
   1201c:	bl	110cc <__printf_chk@plt>
   12020:	mov	r0, sl
   12024:	bl	12d94 <__assert_fail@plt+0x1c08>
   12028:	b	11f24 <__assert_fail@plt+0xd98>
   1202c:	ldr	r3, [r4, #-4]
   12030:	ldr	r0, [r9, #72]	; 0x48
   12034:	cmp	r3, #0
   12038:	add	r6, r3, #255	; 0xff
   1203c:	movge	r6, r3
   12040:	rsbs	r2, r3, #0
   12044:	uxtb	r2, r2
   12048:	uxtb	r8, r3
   1204c:	ubfx	r6, r6, #8, #8
   12050:	rsbpl	r8, r2, #0
   12054:	cmp	r0, #0
   12058:	beq	126cc <__assert_fail@plt+0x1540>
   1205c:	ldr	r7, [r9, #72]	; 0x48
   12060:	mov	r2, #5
   12064:	movw	r1, #33816	; 0x8418
   12068:	movt	r1, #1
   1206c:	mov	r0, #0
   12070:	uxtb	r8, r8
   12074:	bl	10f4c <dcgettext@plt>
   12078:	movw	r3, #33828	; 0x8424
   1207c:	movt	r3, #1
   12080:	stm	sp, {r0, r8}
   12084:	mvn	r2, #0
   12088:	mov	r1, #1
   1208c:	mov	r0, r7
   12090:	bl	1109c <__sprintf_chk@plt>
   12094:	ldr	r0, [r9, #76]	; 0x4c
   12098:	cmp	r0, #0
   1209c:	beq	126a8 <__assert_fail@plt+0x151c>
   120a0:	ldr	r7, [r9, #76]	; 0x4c
   120a4:	mov	r2, #5
   120a8:	movw	r1, #33836	; 0x842c
   120ac:	movt	r1, #1
   120b0:	mov	r0, #0
   120b4:	bl	10f4c <dcgettext@plt>
   120b8:	cmp	r6, #78	; 0x4e
   120bc:	mvn	r2, #0
   120c0:	movne	r1, r6
   120c4:	moveq	r1, #83	; 0x53
   120c8:	movw	r3, #33844	; 0x8434
   120cc:	movt	r3, #1
   120d0:	strd	r0, [sp]
   120d4:	mov	r0, r7
   120d8:	mov	r1, #1
   120dc:	bl	1109c <__sprintf_chk@plt>
   120e0:	ldr	r3, [r4, #332]	; 0x14c
   120e4:	add	r0, sp, #60	; 0x3c
   120e8:	ldr	r7, [r9, #72]	; 0x48
   120ec:	str	r3, [sp, #60]	; 0x3c
   120f0:	bl	11024 <localtime@plt>
   120f4:	subs	r3, r0, #0
   120f8:	beq	1215c <__assert_fail@plt+0xfd0>
   120fc:	mov	r1, #33	; 0x21
   12100:	ldr	r0, [pc, #1636]	; 1276c <__assert_fail@plt+0x15e0>
   12104:	ldr	r2, [r9, #60]	; 0x3c
   12108:	bl	1100c <strftime@plt>
   1210c:	ldr	r0, [pc, #1624]	; 1276c <__assert_fail@plt+0x15e0>
   12110:	sub	r6, r6, #32
   12114:	movw	ip, #35120	; 0x8930
   12118:	movt	ip, #1
   1211c:	cmp	r6, #94	; 0x5e
   12120:	ldrls	r2, [r9, #76]	; 0x4c
   12124:	movhi	r2, ip
   12128:	mvn	r3, #0
   1212c:	movw	r1, #35120	; 0x8930
   12130:	movt	r1, #1
   12134:	str	r7, [sp]
   12138:	stmib	sp, {r0, ip}
   1213c:	mov	r0, r3
   12140:	str	ip, [sp, #12]
   12144:	str	r2, [sp, #16]
   12148:	mov	r2, #32
   1214c:	str	ip, [sp, #20]
   12150:	bl	11630 <__assert_fail@plt+0x4a4>
   12154:	ldrsh	r8, [r4, #-8]
   12158:	b	11ec4 <__assert_fail@plt+0xd38>
   1215c:	ldr	r0, [sp, #60]	; 0x3c
   12160:	ldr	r2, [pc, #1540]	; 1276c <__assert_fail@plt+0x15e0>
   12164:	asr	r1, r0, #31
   12168:	bl	12e4c <__assert_fail@plt+0x1cc0>
   1216c:	b	12110 <__assert_fail@plt+0xf84>
   12170:	mov	r2, r8
   12174:	mov	r1, fp
   12178:	mov	r0, #0
   1217c:	bl	10f4c <dcgettext@plt>
   12180:	bl	11078 <strlen@plt>
   12184:	add	r0, r0, #5
   12188:	bl	17484 <__assert_fail@plt+0x62f8>
   1218c:	mov	r7, r0
   12190:	mov	r2, r8
   12194:	mov	r1, fp
   12198:	mov	r0, #0
   1219c:	bl	10f4c <dcgettext@plt>
   121a0:	mov	r1, r0
   121a4:	mov	r0, r7
   121a8:	bl	10f34 <stpcpy@plt>
   121ac:	ldrb	r3, [r4, #32]
   121b0:	mov	r2, r0
   121b4:	cmp	r3, #0
   121b8:	beq	121fc <__assert_fail@plt+0x1070>
   121bc:	strb	r3, [r0]
   121c0:	ldrb	r3, [r4, #33]	; 0x21
   121c4:	cmp	r3, #0
   121c8:	addeq	r2, r0, #1
   121cc:	beq	121fc <__assert_fail@plt+0x1070>
   121d0:	strb	r3, [r2, #1]
   121d4:	ldrb	r3, [r4, #34]	; 0x22
   121d8:	cmp	r3, #0
   121dc:	addeq	r2, r2, #2
   121e0:	beq	121fc <__assert_fail@plt+0x1070>
   121e4:	strb	r3, [r2, #2]
   121e8:	ldrb	r3, [r4, #35]	; 0x23
   121ec:	cmp	r3, #0
   121f0:	addeq	r2, r2, #3
   121f4:	strbne	r3, [r2, #3]
   121f8:	addne	r2, r2, #4
   121fc:	mov	r1, #0
   12200:	add	r6, sp, #60	; 0x3c
   12204:	mov	r3, sl
   12208:	mov	r0, r6
   1220c:	strb	r1, [r2]
   12210:	mov	r2, #12
   12214:	mov	r1, #1
   12218:	ldr	ip, [r4, #-4]
   1221c:	str	ip, [sp]
   12220:	bl	1109c <__sprintf_chk@plt>
   12224:	ldr	r3, [r4, #332]	; 0x14c
   12228:	add	r0, sp, #56	; 0x38
   1222c:	str	r3, [sp, #56]	; 0x38
   12230:	bl	11024 <localtime@plt>
   12234:	subs	r3, r0, #0
   12238:	beq	1266c <__assert_fail@plt+0x14e0>
   1223c:	mov	r1, #33	; 0x21
   12240:	ldr	r0, [pc, #1316]	; 1276c <__assert_fail@plt+0x15e0>
   12244:	ldr	r2, [r9, #60]	; 0x3c
   12248:	bl	1100c <strftime@plt>
   1224c:	ldr	r0, [pc, #1304]	; 1276c <__assert_fail@plt+0x15e0>
   12250:	movw	ip, #35120	; 0x8930
   12254:	movt	ip, #1
   12258:	str	r4, [sp]
   1225c:	mov	r3, #32
   12260:	mov	r1, ip
   12264:	str	r0, [sp, #4]
   12268:	mov	r2, r3
   1226c:	mvn	r0, #0
   12270:	str	ip, [sp, #8]
   12274:	strd	r6, [sp, #12]
   12278:	str	ip, [sp, #20]
   1227c:	bl	11630 <__assert_fail@plt+0x4a4>
   12280:	mov	r0, r7
   12284:	bl	12d94 <__assert_fail@plt+0x1c08>
   12288:	ldrsh	r8, [r4, #-8]
   1228c:	b	11ec4 <__assert_fail@plt+0xd38>
   12290:	mov	r2, #5
   12294:	mov	r1, fp
   12298:	mov	r0, #0
   1229c:	bl	10f4c <dcgettext@plt>
   122a0:	bl	11078 <strlen@plt>
   122a4:	add	r0, r0, #5
   122a8:	bl	17484 <__assert_fail@plt+0x62f8>
   122ac:	mov	r7, r0
   122b0:	mov	r2, #5
   122b4:	mov	r1, fp
   122b8:	mov	r0, #0
   122bc:	bl	10f4c <dcgettext@plt>
   122c0:	mov	r1, r0
   122c4:	mov	r0, r7
   122c8:	bl	10f34 <stpcpy@plt>
   122cc:	ldrb	r3, [r4, #32]
   122d0:	mov	r2, r0
   122d4:	cmp	r3, #0
   122d8:	beq	1231c <__assert_fail@plt+0x1190>
   122dc:	strb	r3, [r0]
   122e0:	ldrb	r3, [r4, #33]	; 0x21
   122e4:	cmp	r3, #0
   122e8:	addeq	r2, r0, #1
   122ec:	beq	1231c <__assert_fail@plt+0x1190>
   122f0:	strb	r3, [r2, #1]
   122f4:	ldrb	r3, [r4, #34]	; 0x22
   122f8:	cmp	r3, #0
   122fc:	addeq	r2, r2, #2
   12300:	beq	1231c <__assert_fail@plt+0x1190>
   12304:	strb	r3, [r2, #2]
   12308:	ldrb	r3, [r4, #35]	; 0x23
   1230c:	cmp	r3, #0
   12310:	addeq	r2, r2, #3
   12314:	strbne	r3, [r2, #3]
   12318:	addne	r2, r2, #4
   1231c:	mov	r8, #0
   12320:	add	r6, sp, #60	; 0x3c
   12324:	mov	r3, sl
   12328:	mov	r1, #1
   1232c:	strb	r8, [r2]
   12330:	mov	r0, r6
   12334:	mov	r2, #12
   12338:	ldr	ip, [r4, #-4]
   1233c:	str	ip, [sp]
   12340:	bl	1109c <__sprintf_chk@plt>
   12344:	mov	r0, r8
   12348:	mov	r2, #5
   1234c:	movw	r1, #33884	; 0x845c
   12350:	movt	r1, #1
   12354:	bl	10f4c <dcgettext@plt>
   12358:	ldr	r3, [r4, #332]	; 0x14c
   1235c:	mov	r8, r0
   12360:	add	r0, sp, #56	; 0x38
   12364:	str	r3, [sp, #56]	; 0x38
   12368:	bl	11024 <localtime@plt>
   1236c:	subs	r3, r0, #0
   12370:	beq	12680 <__assert_fail@plt+0x14f4>
   12374:	mov	r1, #33	; 0x21
   12378:	ldr	r0, [pc, #1004]	; 1276c <__assert_fail@plt+0x15e0>
   1237c:	ldr	r2, [r9, #60]	; 0x3c
   12380:	bl	1100c <strftime@plt>
   12384:	ldr	r0, [pc, #992]	; 1276c <__assert_fail@plt+0x15e0>
   12388:	movw	ip, #35120	; 0x8930
   1238c:	movt	ip, #1
   12390:	str	r4, [sp]
   12394:	mov	r3, #32
   12398:	mov	r1, r8
   1239c:	str	r0, [sp, #4]
   123a0:	b	12268 <__assert_fail@plt+0x10dc>
   123a4:	mov	r0, #0
   123a8:	bl	1106c <ttyname@plt>
   123ac:	subs	r6, r0, #0
   123b0:	str	r6, [sp, #28]
   123b4:	beq	11f58 <__assert_fail@plt+0xdcc>
   123b8:	movw	r1, #33644	; 0x836c
   123bc:	movt	r1, #1
   123c0:	mov	r2, #5
   123c4:	bl	11168 <strncmp@plt>
   123c8:	cmp	r0, #0
   123cc:	addeq	r3, r6, #5
   123d0:	streq	r3, [sp, #28]
   123d4:	b	11dc4 <__assert_fail@plt+0xc38>
   123d8:	mov	r2, #5
   123dc:	movw	r1, #33764	; 0x83e4
   123e0:	movt	r1, #1
   123e4:	bl	10f4c <dcgettext@plt>
   123e8:	mov	fp, r0
   123ec:	mov	r2, #5
   123f0:	mov	r0, r6
   123f4:	movw	r1, #33772	; 0x83ec
   123f8:	movt	r1, #1
   123fc:	bl	10f4c <dcgettext@plt>
   12400:	mov	sl, r0
   12404:	mov	r2, #5
   12408:	mov	r0, r6
   1240c:	movw	r1, #33780	; 0x83f4
   12410:	movt	r1, #1
   12414:	bl	10f4c <dcgettext@plt>
   12418:	mov	r2, #5
   1241c:	movw	r1, #33788	; 0x83fc
   12420:	movt	r1, #1
   12424:	str	r0, [sp, #28]
   12428:	mov	r0, r6
   1242c:	bl	10f4c <dcgettext@plt>
   12430:	mov	r8, r0
   12434:	mov	r2, #5
   12438:	mov	r0, r6
   1243c:	movw	r1, #33796	; 0x8404
   12440:	movt	r1, #1
   12444:	bl	10f4c <dcgettext@plt>
   12448:	mov	r7, r0
   1244c:	mov	r2, #5
   12450:	mov	r0, r6
   12454:	movw	r1, #33800	; 0x8408
   12458:	movt	r1, #1
   1245c:	bl	10f4c <dcgettext@plt>
   12460:	mov	r2, #5
   12464:	movw	r1, #33808	; 0x8410
   12468:	movt	r1, #1
   1246c:	str	r0, [sp, #32]
   12470:	mov	r0, r6
   12474:	bl	10f4c <dcgettext@plt>
   12478:	ldr	ip, [sp, #28]
   1247c:	mvn	r3, #0
   12480:	mov	r1, fp
   12484:	mov	r2, #32
   12488:	stm	sp, {sl, ip}
   1248c:	ldr	ip, [sp, #32]
   12490:	str	r8, [sp, #8]
   12494:	str	r7, [sp, #12]
   12498:	str	ip, [sp, #16]
   1249c:	str	r0, [sp, #20]
   124a0:	mov	r0, r3
   124a4:	bl	11630 <__assert_fail@plt+0x4a4>
   124a8:	b	11db4 <__assert_fail@plt+0xc28>
   124ac:	mov	r2, #5
   124b0:	mov	r1, fp
   124b4:	mov	r0, #0
   124b8:	bl	10f4c <dcgettext@plt>
   124bc:	bl	11078 <strlen@plt>
   124c0:	add	r0, r0, #5
   124c4:	bl	17484 <__assert_fail@plt+0x62f8>
   124c8:	mov	r7, r0
   124cc:	mov	r2, #5
   124d0:	mov	r1, fp
   124d4:	mov	r0, #0
   124d8:	bl	10f4c <dcgettext@plt>
   124dc:	mov	r1, r0
   124e0:	mov	r0, r7
   124e4:	bl	10f34 <stpcpy@plt>
   124e8:	ldrb	r3, [r4, #32]
   124ec:	mov	r2, r0
   124f0:	cmp	r3, #0
   124f4:	beq	12538 <__assert_fail@plt+0x13ac>
   124f8:	strb	r3, [r0]
   124fc:	ldrb	r3, [r4, #33]	; 0x21
   12500:	cmp	r3, #0
   12504:	addeq	r2, r0, #1
   12508:	beq	12538 <__assert_fail@plt+0x13ac>
   1250c:	strb	r3, [r2, #1]
   12510:	ldrb	r3, [r4, #34]	; 0x22
   12514:	cmp	r3, #0
   12518:	addeq	r2, r2, #2
   1251c:	beq	12538 <__assert_fail@plt+0x13ac>
   12520:	strb	r3, [r2, #2]
   12524:	ldrb	r3, [r4, #35]	; 0x23
   12528:	cmp	r3, #0
   1252c:	addeq	r2, r2, #3
   12530:	strbne	r3, [r2, #3]
   12534:	addne	r2, r2, #4
   12538:	mov	r1, #0
   1253c:	add	r6, sp, #60	; 0x3c
   12540:	mov	r0, r6
   12544:	mov	r3, sl
   12548:	strb	r1, [r2]
   1254c:	mov	r2, #12
   12550:	mov	r1, #1
   12554:	ldr	ip, [r4, #-4]
   12558:	str	ip, [sp]
   1255c:	bl	1109c <__sprintf_chk@plt>
   12560:	ldr	r8, [r9, #88]	; 0x58
   12564:	cmp	r8, #0
   12568:	beq	126f0 <__assert_fail@plt+0x1564>
   1256c:	ldr	r3, [r9, #88]	; 0x58
   12570:	mov	r2, #5
   12574:	mov	r0, #0
   12578:	ldr	r1, [sp, #36]	; 0x24
   1257c:	str	r3, [sp, #40]	; 0x28
   12580:	bl	10f4c <dcgettext@plt>
   12584:	add	r3, r4, #324	; 0x144
   12588:	mov	r8, r0
   1258c:	ldrsh	r2, [r3]
   12590:	movw	r1, #33900	; 0x846c
   12594:	movt	r1, #1
   12598:	mov	r0, #0
   1259c:	str	r2, [sp, #44]	; 0x2c
   125a0:	mov	r2, #5
   125a4:	bl	10f4c <dcgettext@plt>
   125a8:	movw	r2, #326	; 0x146
   125ac:	ldr	lr, [sp, #44]	; 0x2c
   125b0:	mov	r1, #1
   125b4:	movw	r3, #33908	; 0x8474
   125b8:	movt	r3, #1
   125bc:	ldrsh	ip, [r4, r2]
   125c0:	mvn	r2, #0
   125c4:	stm	sp, {r8, lr}
   125c8:	str	r0, [sp, #8]
   125cc:	str	ip, [sp, #12]
   125d0:	ldr	r0, [sp, #40]	; 0x28
   125d4:	bl	1109c <__sprintf_chk@plt>
   125d8:	ldr	r3, [r4, #332]	; 0x14c
   125dc:	add	r0, sp, #56	; 0x38
   125e0:	str	r3, [sp, #56]	; 0x38
   125e4:	bl	11024 <localtime@plt>
   125e8:	subs	r3, r0, #0
   125ec:	beq	12694 <__assert_fail@plt+0x1508>
   125f0:	mov	r1, #33	; 0x21
   125f4:	ldr	r0, [pc, #368]	; 1276c <__assert_fail@plt+0x15e0>
   125f8:	ldr	r2, [r9, #60]	; 0x3c
   125fc:	bl	1100c <strftime@plt>
   12600:	ldr	r0, [pc, #356]	; 1276c <__assert_fail@plt+0x15e0>
   12604:	movw	ip, #35120	; 0x8930
   12608:	movt	ip, #1
   1260c:	ldr	lr, [r9, #88]	; 0x58
   12610:	mov	r3, #32
   12614:	mov	r1, ip
   12618:	mov	r2, r3
   1261c:	str	r4, [sp]
   12620:	stmib	sp, {r0, ip}
   12624:	mvn	r0, #0
   12628:	strd	r6, [sp, #12]
   1262c:	str	lr, [sp, #20]
   12630:	bl	11630 <__assert_fail@plt+0x4a4>
   12634:	mov	r0, r7
   12638:	bl	12d94 <__assert_fail@plt+0x1c08>
   1263c:	ldrsh	r8, [r4, #-8]
   12640:	b	11ec4 <__assert_fail@plt+0xd38>
   12644:	mov	r0, r6
   12648:	ldr	r1, [sp, #32]
   1264c:	bl	1185c <__assert_fail@plt+0x6d0>
   12650:	ldrsh	r8, [r4, #-8]
   12654:	b	11ec4 <__assert_fail@plt+0xd38>
   12658:	ldr	r0, [sp, #60]	; 0x3c
   1265c:	ldr	r2, [pc, #264]	; 1276c <__assert_fail@plt+0x15e0>
   12660:	asr	r1, r0, #31
   12664:	bl	12e4c <__assert_fail@plt+0x1cc0>
   12668:	b	11fc0 <__assert_fail@plt+0xe34>
   1266c:	ldr	r0, [sp, #56]	; 0x38
   12670:	ldr	r2, [pc, #244]	; 1276c <__assert_fail@plt+0x15e0>
   12674:	asr	r1, r0, #31
   12678:	bl	12e4c <__assert_fail@plt+0x1cc0>
   1267c:	b	12250 <__assert_fail@plt+0x10c4>
   12680:	ldr	r0, [sp, #56]	; 0x38
   12684:	ldr	r2, [pc, #224]	; 1276c <__assert_fail@plt+0x15e0>
   12688:	asr	r1, r0, #31
   1268c:	bl	12e4c <__assert_fail@plt+0x1cc0>
   12690:	b	12388 <__assert_fail@plt+0x11fc>
   12694:	ldr	r0, [sp, #56]	; 0x38
   12698:	ldr	r2, [pc, #204]	; 1276c <__assert_fail@plt+0x15e0>
   1269c:	asr	r1, r0, #31
   126a0:	bl	12e4c <__assert_fail@plt+0x1cc0>
   126a4:	b	12604 <__assert_fail@plt+0x1478>
   126a8:	mov	r2, #5
   126ac:	movw	r1, #33836	; 0x842c
   126b0:	movt	r1, #1
   126b4:	bl	10f4c <dcgettext@plt>
   126b8:	bl	11078 <strlen@plt>
   126bc:	add	r0, r0, #2
   126c0:	bl	17484 <__assert_fail@plt+0x62f8>
   126c4:	str	r0, [r9, #76]	; 0x4c
   126c8:	b	120a0 <__assert_fail@plt+0xf14>
   126cc:	mov	r2, #5
   126d0:	movw	r1, #33816	; 0x8418
   126d4:	movt	r1, #1
   126d8:	bl	10f4c <dcgettext@plt>
   126dc:	bl	11078 <strlen@plt>
   126e0:	add	r0, r0, #3
   126e4:	bl	17484 <__assert_fail@plt+0x62f8>
   126e8:	str	r0, [r9, #72]	; 0x48
   126ec:	b	1205c <__assert_fail@plt+0xed0>
   126f0:	mov	r2, #5
   126f4:	mov	r0, r8
   126f8:	ldr	r1, [sp, #36]	; 0x24
   126fc:	bl	10f4c <dcgettext@plt>
   12700:	bl	11078 <strlen@plt>
   12704:	mov	r3, r0
   12708:	mov	r2, #5
   1270c:	movw	r1, #33900	; 0x846c
   12710:	movt	r1, #1
   12714:	mov	r0, r8
   12718:	str	r3, [sp, #40]	; 0x28
   1271c:	bl	10f4c <dcgettext@plt>
   12720:	bl	11078 <strlen@plt>
   12724:	ldr	r3, [sp, #40]	; 0x28
   12728:	add	r0, r3, r0
   1272c:	add	r0, r0, #14
   12730:	bl	17484 <__assert_fail@plt+0x62f8>
   12734:	str	r0, [r9, #88]	; 0x58
   12738:	b	1256c <__assert_fail@plt+0x13e0>
   1273c:	bl	11090 <__errno_location@plt>
   12740:	ldr	r5, [r0]
   12744:	mov	r2, r4
   12748:	mov	r1, #3
   1274c:	mov	r0, #0
   12750:	bl	160f0 <__assert_fail@plt+0x4f64>
   12754:	mov	r3, r0
   12758:	movw	r2, #35812	; 0x8be4
   1275c:	movt	r2, #1
   12760:	mov	r0, #1
   12764:	mov	r1, r5
   12768:	bl	10fd0 <error@plt>
   1276c:	muleq	r2, r4, r1
   12770:	subs	r4, r0, #0
   12774:	str	r7, [sp, #-8]!
   12778:	str	lr, [sp, #4]
   1277c:	sub	sp, sp, #56	; 0x38
   12780:	beq	127c8 <__assert_fail@plt+0x163c>
   12784:	movw	r3, #41336	; 0xa178
   12788:	movt	r3, #2
   1278c:	ldr	r5, [r3]
   12790:	mov	r2, #5
   12794:	movw	r1, #33924	; 0x8484
   12798:	movt	r1, #1
   1279c:	mov	r0, #0
   127a0:	bl	10f4c <dcgettext@plt>
   127a4:	movw	r3, #41484	; 0xa20c
   127a8:	movt	r3, #2
   127ac:	mov	r2, r0
   127b0:	mov	r1, #1
   127b4:	ldr	r3, [r3]
   127b8:	mov	r0, r5
   127bc:	bl	110e4 <__fprintf_chk@plt>
   127c0:	mov	r0, r4
   127c4:	bl	11060 <exit@plt>
   127c8:	mov	r2, #5
   127cc:	movw	r1, #33964	; 0x84ac
   127d0:	movt	r1, #1
   127d4:	movw	r5, #41340	; 0xa17c
   127d8:	movt	r5, #2
   127dc:	bl	10f4c <dcgettext@plt>
   127e0:	movw	r3, #41484	; 0xa20c
   127e4:	movt	r3, #2
   127e8:	mov	r1, r0
   127ec:	mov	r0, #1
   127f0:	ldr	r2, [r3]
   127f4:	bl	110cc <__printf_chk@plt>
   127f8:	mov	r2, #5
   127fc:	movw	r1, #34008	; 0x84d8
   12800:	movt	r1, #1
   12804:	mov	r0, r4
   12808:	bl	10f4c <dcgettext@plt>
   1280c:	ldr	r1, [r5]
   12810:	bl	10ea4 <fputs_unlocked@plt>
   12814:	mov	r2, #5
   12818:	movw	r1, #34068	; 0x8514
   1281c:	movt	r1, #1
   12820:	mov	r0, r4
   12824:	bl	10f4c <dcgettext@plt>
   12828:	ldr	r1, [r5]
   1282c:	bl	10ea4 <fputs_unlocked@plt>
   12830:	mov	r2, #5
   12834:	movw	r1, #34264	; 0x85d8
   12838:	movt	r1, #1
   1283c:	mov	r0, r4
   12840:	bl	10f4c <dcgettext@plt>
   12844:	ldr	r1, [r5]
   12848:	bl	10ea4 <fputs_unlocked@plt>
   1284c:	mov	r2, #5
   12850:	movw	r1, #34316	; 0x860c
   12854:	movt	r1, #1
   12858:	mov	r0, r4
   1285c:	bl	10f4c <dcgettext@plt>
   12860:	ldr	r1, [r5]
   12864:	bl	10ea4 <fputs_unlocked@plt>
   12868:	mov	r2, #5
   1286c:	movw	r1, #34504	; 0x86c8
   12870:	movt	r1, #1
   12874:	mov	r0, r4
   12878:	bl	10f4c <dcgettext@plt>
   1287c:	ldr	r1, [r5]
   12880:	bl	10ea4 <fputs_unlocked@plt>
   12884:	mov	r2, #5
   12888:	movw	r1, #34728	; 0x87a8
   1288c:	movt	r1, #1
   12890:	mov	r0, r4
   12894:	bl	10f4c <dcgettext@plt>
   12898:	ldr	r1, [r5]
   1289c:	bl	10ea4 <fputs_unlocked@plt>
   128a0:	mov	r2, #5
   128a4:	movw	r1, #34892	; 0x884c
   128a8:	movt	r1, #1
   128ac:	mov	r0, r4
   128b0:	bl	10f4c <dcgettext@plt>
   128b4:	ldr	r1, [r5]
   128b8:	bl	10ea4 <fputs_unlocked@plt>
   128bc:	mov	r2, #5
   128c0:	movw	r1, #34940	; 0x887c
   128c4:	movt	r1, #1
   128c8:	mov	r0, r4
   128cc:	bl	10f4c <dcgettext@plt>
   128d0:	ldr	r1, [r5]
   128d4:	bl	10ea4 <fputs_unlocked@plt>
   128d8:	mov	r2, #5
   128dc:	movw	r1, #34996	; 0x88b4
   128e0:	movt	r1, #1
   128e4:	mov	r0, r4
   128e8:	bl	10f4c <dcgettext@plt>
   128ec:	mov	r1, r0
   128f0:	movw	r3, #35124	; 0x8934
   128f4:	movt	r3, #1
   128f8:	movw	r2, #35140	; 0x8944
   128fc:	movt	r2, #1
   12900:	mov	r0, #1
   12904:	bl	110cc <__printf_chk@plt>
   12908:	movw	r0, #33208	; 0x81b8
   1290c:	movt	r0, #1
   12910:	ldr	ip, [r0, #12]
   12914:	ldrd	r2, [r0, #20]
   12918:	ldr	r6, [r0, #16]
   1291c:	subs	r1, ip, #0
   12920:	str	ip, [sp]
   12924:	ldrd	r8, [r0, #28]
   12928:	strd	r2, [sp, #8]
   1292c:	ldrd	r2, [r0, #36]	; 0x24
   12930:	str	r6, [sp, #4]
   12934:	ldrd	r6, [r0, #44]	; 0x2c
   12938:	strd	r8, [sp, #16]
   1293c:	ldrd	r8, [r0, #52]	; 0x34
   12940:	strd	r2, [sp, #24]
   12944:	ldrd	r2, [r0, #60]	; 0x3c
   12948:	strd	r6, [sp, #32]
   1294c:	movwne	r7, #33920	; 0x8480
   12950:	mov	r6, sp
   12954:	movtne	r7, #1
   12958:	strd	r8, [sp, #40]	; 0x28
   1295c:	strd	r2, [sp, #48]	; 0x30
   12960:	bne	12a58 <__assert_fail@plt+0x18cc>
   12964:	ldr	r6, [r6, #4]
   12968:	movw	r1, #35156	; 0x8954
   1296c:	movt	r1, #1
   12970:	mov	r2, #5
   12974:	cmp	r6, #0
   12978:	beq	12a6c <__assert_fail@plt+0x18e0>
   1297c:	mov	r0, #0
   12980:	bl	10f4c <dcgettext@plt>
   12984:	mov	r1, r0
   12988:	movw	r3, #35180	; 0x896c
   1298c:	movt	r3, #1
   12990:	movw	r2, #35220	; 0x8994
   12994:	movt	r2, #1
   12998:	mov	r0, #1
   1299c:	bl	110cc <__printf_chk@plt>
   129a0:	mov	r1, #0
   129a4:	mov	r0, #5
   129a8:	bl	11114 <setlocale@plt>
   129ac:	cmp	r0, #0
   129b0:	movweq	r7, #33920	; 0x8480
   129b4:	movteq	r7, #1
   129b8:	beq	129dc <__assert_fail@plt+0x1850>
   129bc:	movw	r1, #35236	; 0x89a4
   129c0:	movt	r1, #1
   129c4:	mov	r2, #3
   129c8:	movw	r7, #33920	; 0x8480
   129cc:	movt	r7, #1
   129d0:	bl	11168 <strncmp@plt>
   129d4:	cmp	r0, #0
   129d8:	bne	12b24 <__assert_fail@plt+0x1998>
   129dc:	mov	r2, #5
   129e0:	movw	r1, #35312	; 0x89f0
   129e4:	movt	r1, #1
   129e8:	mov	r0, #0
   129ec:	bl	10f4c <dcgettext@plt>
   129f0:	mov	r1, r0
   129f4:	movw	r3, #33920	; 0x8480
   129f8:	movt	r3, #1
   129fc:	movw	r2, #35180	; 0x896c
   12a00:	movt	r2, #1
   12a04:	mov	r0, #1
   12a08:	bl	110cc <__printf_chk@plt>
   12a0c:	mov	r2, #5
   12a10:	movw	r1, #35340	; 0x8a0c
   12a14:	movt	r1, #1
   12a18:	mov	r0, #0
   12a1c:	bl	10f4c <dcgettext@plt>
   12a20:	movw	r2, #35540	; 0x8ad4
   12a24:	movt	r2, #1
   12a28:	cmp	r6, r7
   12a2c:	movw	r3, #35120	; 0x8930
   12a30:	movt	r3, #1
   12a34:	mov	r1, r0
   12a38:	moveq	r3, r2
   12a3c:	mov	r2, r6
   12a40:	mov	r0, #1
   12a44:	bl	110cc <__printf_chk@plt>
   12a48:	b	127c0 <__assert_fail@plt+0x1634>
   12a4c:	ldr	r1, [r6, #8]!
   12a50:	cmp	r1, #0
   12a54:	beq	12964 <__assert_fail@plt+0x17d8>
   12a58:	mov	r0, r7
   12a5c:	bl	10ebc <strcmp@plt>
   12a60:	cmp	r0, #0
   12a64:	bne	12a4c <__assert_fail@plt+0x18c0>
   12a68:	b	12964 <__assert_fail@plt+0x17d8>
   12a6c:	mov	r0, r6
   12a70:	bl	10f4c <dcgettext@plt>
   12a74:	mov	r1, r0
   12a78:	movw	r3, #35180	; 0x896c
   12a7c:	movt	r3, #1
   12a80:	movw	r2, #35220	; 0x8994
   12a84:	movt	r2, #1
   12a88:	mov	r0, #1
   12a8c:	bl	110cc <__printf_chk@plt>
   12a90:	mov	r1, r6
   12a94:	mov	r0, #5
   12a98:	bl	11114 <setlocale@plt>
   12a9c:	cmp	r0, #0
   12aa0:	beq	12abc <__assert_fail@plt+0x1930>
   12aa4:	movw	r1, #35236	; 0x89a4
   12aa8:	movt	r1, #1
   12aac:	mov	r2, #3
   12ab0:	bl	11168 <strncmp@plt>
   12ab4:	cmp	r0, #0
   12ab8:	bne	12b18 <__assert_fail@plt+0x198c>
   12abc:	mov	r2, #5
   12ac0:	movw	r1, #35312	; 0x89f0
   12ac4:	movt	r1, #1
   12ac8:	mov	r0, #0
   12acc:	bl	10f4c <dcgettext@plt>
   12ad0:	mov	r1, r0
   12ad4:	movw	r3, #33920	; 0x8480
   12ad8:	movt	r3, #1
   12adc:	movw	r2, #35180	; 0x896c
   12ae0:	movt	r2, #1
   12ae4:	mov	r0, #1
   12ae8:	bl	110cc <__printf_chk@plt>
   12aec:	movw	r1, #35340	; 0x8a0c
   12af0:	movt	r1, #1
   12af4:	mov	r2, #5
   12af8:	mov	r0, #0
   12afc:	bl	10f4c <dcgettext@plt>
   12b00:	movw	r6, #33920	; 0x8480
   12b04:	movt	r6, #1
   12b08:	movw	r3, #35540	; 0x8ad4
   12b0c:	movt	r3, #1
   12b10:	mov	r1, r0
   12b14:	b	12a3c <__assert_fail@plt+0x18b0>
   12b18:	movw	r7, #33920	; 0x8480
   12b1c:	movt	r7, #1
   12b20:	mov	r6, r7
   12b24:	mov	r2, #5
   12b28:	movw	r1, #35240	; 0x89a8
   12b2c:	movt	r1, #1
   12b30:	mov	r0, #0
   12b34:	bl	10f4c <dcgettext@plt>
   12b38:	ldr	r1, [r5]
   12b3c:	bl	10ea4 <fputs_unlocked@plt>
   12b40:	b	129dc <__assert_fail@plt+0x1850>
   12b44:	mov	ip, #2
   12b48:	strd	r4, [sp, #-20]!	; 0xffffffec
   12b4c:	mov	r5, #0
   12b50:	movw	r4, #41440	; 0xa1e0
   12b54:	movt	r4, #2
   12b58:	strd	r6, [sp, #8]
   12b5c:	str	lr, [sp, #16]
   12b60:	sub	sp, sp, #12
   12b64:	mov	r2, r4
   12b68:	mov	r1, r5
   12b6c:	add	r3, sp, #4
   12b70:	str	ip, [r4]
   12b74:	mov	r7, r0
   12b78:	str	r5, [sp, #4]
   12b7c:	bl	11144 <getaddrinfo@plt>
   12b80:	cmp	r0, #0
   12b84:	strne	r0, [r4, #32]
   12b88:	bne	12bb4 <__assert_fail@plt+0x1a28>
   12b8c:	ldr	r6, [sp, #4]
   12b90:	ldr	r0, [r6, #24]
   12b94:	cmp	r0, r5
   12b98:	moveq	r0, r7
   12b9c:	bl	10f58 <strdup@plt>
   12ba0:	subs	r5, r0, #0
   12ba4:	mov	r0, r6
   12ba8:	mvneq	r3, #9
   12bac:	streq	r3, [r4, #32]
   12bb0:	bl	11138 <freeaddrinfo@plt>
   12bb4:	mov	r0, r5
   12bb8:	add	sp, sp, #12
   12bbc:	ldrd	r4, [sp]
   12bc0:	ldrd	r6, [sp, #8]
   12bc4:	add	sp, sp, #16
   12bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bcc:	movw	ip, #41440	; 0xa1e0
   12bd0:	movt	ip, #2
   12bd4:	strd	r4, [sp, #-20]!	; 0xffffffec
   12bd8:	mov	r4, #0
   12bdc:	strd	r6, [sp, #8]
   12be0:	mov	r5, r1
   12be4:	str	lr, [sp, #16]
   12be8:	sub	sp, sp, #12
   12bec:	mov	lr, #2
   12bf0:	mov	r2, ip
   12bf4:	mov	r1, r4
   12bf8:	add	r3, sp, #4
   12bfc:	mov	r7, r0
   12c00:	str	lr, [ip]
   12c04:	str	r4, [sp, #4]
   12c08:	bl	11144 <getaddrinfo@plt>
   12c0c:	cmp	r0, #0
   12c10:	bne	12c68 <__assert_fail@plt+0x1adc>
   12c14:	ldr	r6, [sp, #4]
   12c18:	ldr	r0, [r6, #24]
   12c1c:	cmp	r0, r4
   12c20:	moveq	r0, r7
   12c24:	bl	10f58 <strdup@plt>
   12c28:	adds	r3, r5, #0
   12c2c:	mov	r4, r0
   12c30:	movne	r3, #1
   12c34:	cmp	r0, #0
   12c38:	movne	r3, #0
   12c3c:	mov	r0, r6
   12c40:	cmp	r3, #0
   12c44:	mvnne	r3, #9
   12c48:	strne	r3, [r5]
   12c4c:	bl	11138 <freeaddrinfo@plt>
   12c50:	mov	r0, r4
   12c54:	add	sp, sp, #12
   12c58:	ldrd	r4, [sp]
   12c5c:	ldrd	r6, [sp, #8]
   12c60:	add	sp, sp, #16
   12c64:	pop	{pc}		; (ldr pc, [sp], #4)
   12c68:	cmp	r5, #0
   12c6c:	moveq	r4, r5
   12c70:	strne	r0, [r5]
   12c74:	b	12c50 <__assert_fail@plt+0x1ac4>
   12c78:	movw	r3, #41440	; 0xa1e0
   12c7c:	movt	r3, #2
   12c80:	ldr	r0, [r3, #32]
   12c84:	b	10eec <gai_strerror@plt>
   12c88:	movw	r3, #41476	; 0xa204
   12c8c:	movt	r3, #2
   12c90:	str	r0, [r3]
   12c94:	bx	lr
   12c98:	movw	r3, #41476	; 0xa204
   12c9c:	movt	r3, #2
   12ca0:	strb	r0, [r3, #4]
   12ca4:	bx	lr
   12ca8:	movw	r3, #41340	; 0xa17c
   12cac:	movt	r3, #2
   12cb0:	strd	r4, [sp, #-16]!
   12cb4:	ldr	r0, [r3]
   12cb8:	str	r6, [sp, #8]
   12cbc:	str	lr, [sp, #12]
   12cc0:	sub	sp, sp, #8
   12cc4:	bl	17b88 <__assert_fail@plt+0x69fc>
   12cc8:	cmp	r0, #0
   12ccc:	beq	12cf8 <__assert_fail@plt+0x1b6c>
   12cd0:	movw	r4, #41476	; 0xa204
   12cd4:	movt	r4, #2
   12cd8:	ldrb	r6, [r4, #4]
   12cdc:	bl	11090 <__errno_location@plt>
   12ce0:	mov	r5, r0
   12ce4:	cmp	r6, #0
   12ce8:	beq	12d24 <__assert_fail@plt+0x1b98>
   12cec:	ldr	r3, [r0]
   12cf0:	cmp	r3, #32
   12cf4:	bne	12d24 <__assert_fail@plt+0x1b98>
   12cf8:	movw	r3, #41336	; 0xa178
   12cfc:	movt	r3, #2
   12d00:	ldr	r0, [r3]
   12d04:	bl	17b88 <__assert_fail@plt+0x69fc>
   12d08:	cmp	r0, #0
   12d0c:	bne	12d6c <__assert_fail@plt+0x1be0>
   12d10:	add	sp, sp, #8
   12d14:	ldrd	r4, [sp]
   12d18:	ldr	r6, [sp, #8]
   12d1c:	add	sp, sp, #12
   12d20:	pop	{pc}		; (ldr pc, [sp], #4)
   12d24:	movw	r1, #35796	; 0x8bd4
   12d28:	movt	r1, #1
   12d2c:	mov	r2, #5
   12d30:	mov	r0, #0
   12d34:	bl	10f4c <dcgettext@plt>
   12d38:	mov	r6, r0
   12d3c:	ldr	r0, [r4]
   12d40:	cmp	r0, #0
   12d44:	beq	12d7c <__assert_fail@plt+0x1bf0>
   12d48:	ldr	r4, [r5]
   12d4c:	bl	15d20 <__assert_fail@plt+0x4b94>
   12d50:	mov	r3, r0
   12d54:	movw	r2, #35808	; 0x8be0
   12d58:	movt	r2, #1
   12d5c:	mov	r0, #0
   12d60:	str	r6, [sp]
   12d64:	mov	r1, r4
   12d68:	bl	10fd0 <error@plt>
   12d6c:	movw	r3, #41252	; 0xa124
   12d70:	movt	r3, #2
   12d74:	ldr	r0, [r3]
   12d78:	bl	10ef8 <_exit@plt>
   12d7c:	mov	r3, r6
   12d80:	movw	r2, #35812	; 0x8be4
   12d84:	movt	r2, #1
   12d88:	ldr	r1, [r5]
   12d8c:	bl	10fd0 <error@plt>
   12d90:	b	12d6c <__assert_fail@plt+0x1be0>
   12d94:	strd	r4, [sp, #-12]!
   12d98:	mov	r5, r0
   12d9c:	str	lr, [sp, #8]
   12da0:	sub	sp, sp, #12
   12da4:	bl	11090 <__errno_location@plt>
   12da8:	mov	r4, r0
   12dac:	mov	r2, #0
   12db0:	ldr	r3, [r4]
   12db4:	mov	r0, r5
   12db8:	str	r2, [r4]
   12dbc:	str	r3, [sp]
   12dc0:	str	r3, [sp, #4]
   12dc4:	bl	10ee0 <free@plt>
   12dc8:	ldr	r3, [r4]
   12dcc:	add	r2, sp, #8
   12dd0:	clz	r3, r3
   12dd4:	lsr	r3, r3, #5
   12dd8:	add	r3, r2, r3, lsl #2
   12ddc:	ldr	r3, [r3, #-8]
   12de0:	str	r3, [r4]
   12de4:	add	sp, sp, #12
   12de8:	ldrd	r4, [sp]
   12dec:	add	sp, sp, #8
   12df0:	pop	{pc}		; (ldr pc, [sp], #4)
   12df4:	push	{lr}		; (str lr, [sp, #-4]!)
   12df8:	sub	sp, sp, #268	; 0x10c
   12dfc:	movw	r2, #257	; 0x101
   12e00:	add	r1, sp, #4
   12e04:	bl	16c80 <__assert_fail@plt+0x5af4>
   12e08:	cmp	r0, #0
   12e0c:	movne	r0, #0
   12e10:	bne	12e44 <__assert_fail@plt+0x1cb8>
   12e14:	movw	r1, #35816	; 0x8be8
   12e18:	movt	r1, #1
   12e1c:	add	r0, sp, #4
   12e20:	bl	10ebc <strcmp@plt>
   12e24:	cmp	r0, #0
   12e28:	beq	12e44 <__assert_fail@plt+0x1cb8>
   12e2c:	add	r0, sp, #4
   12e30:	movw	r1, #35820	; 0x8bec
   12e34:	movt	r1, #1
   12e38:	bl	10ebc <strcmp@plt>
   12e3c:	adds	r0, r0, #0
   12e40:	movne	r0, #1
   12e44:	add	sp, sp, #268	; 0x10c
   12e48:	pop	{pc}		; (ldr pc, [sp], #4)
   12e4c:	mov	r3, #0
   12e50:	cmp	r0, #0
   12e54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12e58:	mov	r5, r1
   12e5c:	sbcs	r1, r1, #0
   12e60:	strd	r6, [sp, #8]
   12e64:	mov	r4, r0
   12e68:	add	r6, r2, #20
   12e6c:	str	r8, [sp, #16]
   12e70:	str	lr, [sp, #20]
   12e74:	strb	r3, [r2, #20]
   12e78:	blt	12ed8 <__assert_fail@plt+0x1d4c>
   12e7c:	mov	r0, r4
   12e80:	mov	r1, r5
   12e84:	mov	r2, #10
   12e88:	mov	r3, #0
   12e8c:	bl	17ee8 <__assert_fail@plt+0x6d5c>
   12e90:	add	ip, r2, #48	; 0x30
   12e94:	mov	r0, r4
   12e98:	mov	r1, r5
   12e9c:	mov	r3, #0
   12ea0:	mov	r2, #10
   12ea4:	strb	ip, [r6, #-1]!
   12ea8:	bl	17ee8 <__assert_fail@plt+0x6d5c>
   12eac:	mov	r4, r0
   12eb0:	mov	r5, r1
   12eb4:	orrs	r3, r4, r5
   12eb8:	bne	12e7c <__assert_fail@plt+0x1cf0>
   12ebc:	mov	r0, r6
   12ec0:	ldrd	r4, [sp]
   12ec4:	ldrd	r6, [sp, #8]
   12ec8:	ldr	r8, [sp, #16]
   12ecc:	add	sp, sp, #20
   12ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ed4:	mov	r6, r7
   12ed8:	mov	r0, r4
   12edc:	mov	r1, r5
   12ee0:	mov	r2, #10
   12ee4:	mov	r3, #0
   12ee8:	bl	17ee8 <__assert_fail@plt+0x6d5c>
   12eec:	rsb	ip, r2, #48	; 0x30
   12ef0:	mov	r0, r4
   12ef4:	mov	r1, r5
   12ef8:	mov	r3, #0
   12efc:	mov	r2, #10
   12f00:	strb	ip, [r6, #-1]
   12f04:	sub	r7, r6, #1
   12f08:	bl	17ee8 <__assert_fail@plt+0x6d5c>
   12f0c:	mov	r4, r0
   12f10:	mov	r5, r1
   12f14:	orrs	r3, r4, r5
   12f18:	bne	12ed4 <__assert_fail@plt+0x1d48>
   12f1c:	mov	r3, #45	; 0x2d
   12f20:	sub	r6, r6, #2
   12f24:	strb	r3, [r7, #-1]
   12f28:	b	12ebc <__assert_fail@plt+0x1d30>
   12f2c:	strd	r4, [sp, #-16]!
   12f30:	subs	r4, r0, #0
   12f34:	str	r6, [sp, #8]
   12f38:	str	lr, [sp, #12]
   12f3c:	beq	12fd4 <__assert_fail@plt+0x1e48>
   12f40:	mov	r1, #47	; 0x2f
   12f44:	bl	11120 <strrchr@plt>
   12f48:	subs	r5, r0, #0
   12f4c:	beq	12fac <__assert_fail@plt+0x1e20>
   12f50:	add	r6, r5, #1
   12f54:	sub	r3, r6, r4
   12f58:	cmp	r3, #6
   12f5c:	ble	12fac <__assert_fail@plt+0x1e20>
   12f60:	movw	r1, #35884	; 0x8c2c
   12f64:	movt	r1, #1
   12f68:	mov	r2, #7
   12f6c:	sub	r0, r5, #6
   12f70:	bl	11168 <strncmp@plt>
   12f74:	cmp	r0, #0
   12f78:	bne	12fac <__assert_fail@plt+0x1e20>
   12f7c:	movw	r1, #35892	; 0x8c34
   12f80:	movt	r1, #1
   12f84:	mov	r2, #3
   12f88:	mov	r0, r6
   12f8c:	bl	11168 <strncmp@plt>
   12f90:	cmp	r0, #0
   12f94:	movne	r4, r6
   12f98:	bne	12fac <__assert_fail@plt+0x1e20>
   12f9c:	add	r4, r5, #4
   12fa0:	movw	r3, #41320	; 0xa168
   12fa4:	movt	r3, #2
   12fa8:	str	r4, [r3]
   12fac:	movw	r2, #41484	; 0xa20c
   12fb0:	movt	r2, #2
   12fb4:	ldr	r6, [sp, #8]
   12fb8:	movw	r3, #41324	; 0xa16c
   12fbc:	movt	r3, #2
   12fc0:	str	r4, [r2]
   12fc4:	str	r4, [r3]
   12fc8:	ldrd	r4, [sp]
   12fcc:	add	sp, sp, #12
   12fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fd4:	movw	r3, #41336	; 0xa178
   12fd8:	movt	r3, #2
   12fdc:	movw	r0, #35828	; 0x8bf4
   12fe0:	movt	r0, #1
   12fe4:	ldr	r3, [r3]
   12fe8:	mov	r2, #55	; 0x37
   12fec:	mov	r1, #1
   12ff0:	bl	10f94 <fwrite@plt>
   12ff4:	bl	11174 <abort@plt>
   12ff8:	mov	r2, #5
   12ffc:	strd	r4, [sp, #-16]!
   13000:	mov	r5, r0
   13004:	str	r6, [sp, #8]
   13008:	mov	r6, r1
   1300c:	mov	r1, r0
   13010:	mov	r0, #0
   13014:	str	lr, [sp, #12]
   13018:	bl	10f4c <dcgettext@plt>
   1301c:	cmp	r5, r0
   13020:	mov	r4, r0
   13024:	beq	1303c <__assert_fail@plt+0x1eb0>
   13028:	mov	r0, r4
   1302c:	ldrd	r4, [sp]
   13030:	ldr	r6, [sp, #8]
   13034:	add	sp, sp, #12
   13038:	pop	{pc}		; (ldr pc, [sp], #4)
   1303c:	bl	17df4 <__assert_fail@plt+0x6c68>
   13040:	ldrb	r3, [r0]
   13044:	bic	r3, r3, #32
   13048:	cmp	r3, #85	; 0x55
   1304c:	bne	130b4 <__assert_fail@plt+0x1f28>
   13050:	ldrb	r3, [r0, #1]
   13054:	bic	r3, r3, #32
   13058:	cmp	r3, #84	; 0x54
   1305c:	bne	13134 <__assert_fail@plt+0x1fa8>
   13060:	ldrb	r3, [r0, #2]
   13064:	bic	r3, r3, #32
   13068:	cmp	r3, #70	; 0x46
   1306c:	bne	13134 <__assert_fail@plt+0x1fa8>
   13070:	ldrb	r3, [r0, #3]
   13074:	cmp	r3, #45	; 0x2d
   13078:	bne	13134 <__assert_fail@plt+0x1fa8>
   1307c:	ldrb	r3, [r0, #4]
   13080:	cmp	r3, #56	; 0x38
   13084:	bne	13134 <__assert_fail@plt+0x1fa8>
   13088:	ldrb	r3, [r0, #5]
   1308c:	cmp	r3, #0
   13090:	bne	13134 <__assert_fail@plt+0x1fa8>
   13094:	ldrb	r2, [r4]
   13098:	movw	r3, #35984	; 0x8c90
   1309c:	movt	r3, #1
   130a0:	movw	r4, #35996	; 0x8c9c
   130a4:	movt	r4, #1
   130a8:	cmp	r2, #96	; 0x60
   130ac:	movne	r4, r3
   130b0:	b	13028 <__assert_fail@plt+0x1e9c>
   130b4:	cmp	r3, #71	; 0x47
   130b8:	bne	13134 <__assert_fail@plt+0x1fa8>
   130bc:	ldrb	r3, [r0, #1]
   130c0:	bic	r3, r3, #32
   130c4:	cmp	r3, #66	; 0x42
   130c8:	bne	13134 <__assert_fail@plt+0x1fa8>
   130cc:	ldrb	r3, [r0, #2]
   130d0:	cmp	r3, #49	; 0x31
   130d4:	bne	13134 <__assert_fail@plt+0x1fa8>
   130d8:	ldrb	r3, [r0, #3]
   130dc:	cmp	r3, #56	; 0x38
   130e0:	bne	13134 <__assert_fail@plt+0x1fa8>
   130e4:	ldrb	r3, [r0, #4]
   130e8:	cmp	r3, #48	; 0x30
   130ec:	bne	13134 <__assert_fail@plt+0x1fa8>
   130f0:	ldrb	r3, [r0, #5]
   130f4:	cmp	r3, #51	; 0x33
   130f8:	bne	13134 <__assert_fail@plt+0x1fa8>
   130fc:	ldrb	r3, [r0, #6]
   13100:	cmp	r3, #48	; 0x30
   13104:	bne	13134 <__assert_fail@plt+0x1fa8>
   13108:	ldrb	r3, [r0, #7]
   1310c:	cmp	r3, #0
   13110:	bne	13134 <__assert_fail@plt+0x1fa8>
   13114:	ldrb	r2, [r4]
   13118:	movw	r3, #35988	; 0x8c94
   1311c:	movt	r3, #1
   13120:	movw	r4, #35992	; 0x8c98
   13124:	movt	r4, #1
   13128:	cmp	r2, #96	; 0x60
   1312c:	movne	r4, r3
   13130:	b	13028 <__assert_fail@plt+0x1e9c>
   13134:	movw	r3, #36000	; 0x8ca0
   13138:	movt	r3, #1
   1313c:	cmp	r6, #9
   13140:	movw	r4, #35980	; 0x8c8c
   13144:	movt	r4, #1
   13148:	movne	r4, r3
   1314c:	b	13028 <__assert_fail@plt+0x1e9c>
   13150:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13154:	strd	r6, [sp, #8]
   13158:	strd	r8, [sp, #16]
   1315c:	mov	r8, r3
   13160:	strd	sl, [sp, #24]
   13164:	mov	fp, r0
   13168:	mov	sl, r1
   1316c:	str	lr, [sp, #32]
   13170:	sub	sp, sp, #140	; 0x8c
   13174:	ldr	r3, [sp, #180]	; 0xb4
   13178:	str	r2, [sp, #28]
   1317c:	and	r4, r3, #2
   13180:	ubfx	r3, r3, #1, #1
   13184:	str	r3, [sp, #44]	; 0x2c
   13188:	bl	10fac <__ctype_get_mb_cur_max@plt>
   1318c:	ldr	r3, [sp, #176]	; 0xb0
   13190:	str	r0, [sp, #76]	; 0x4c
   13194:	cmp	r3, #10
   13198:	ldrls	pc, [pc, r3, lsl #2]
   1319c:	b	14b38 <__assert_fail@plt+0x39ac>
   131a0:	andeq	r3, r1, r0, lsr #12
   131a4:	andeq	r3, r1, ip, lsr r7
   131a8:			; <UNDEFINED> instruction: 0x00013cb8
   131ac:	andeq	r3, r1, r8, lsr #15
   131b0:	andeq	r3, r1, r8, lsr #10
   131b4:	andeq	r3, r1, r4, lsr #11
   131b8:	andeq	r3, r1, ip, ror r6
   131bc:	andeq	r3, r1, r4, ror #13
   131c0:	andeq	r3, r1, ip, asr #3
   131c4:	andeq	r3, r1, ip, asr #3
   131c8:	andeq	r3, r1, ip, asr #3
   131cc:	ldr	r3, [sp, #176]	; 0xb0
   131d0:	cmp	r3, #10
   131d4:	beq	13200 <__assert_fail@plt+0x2074>
   131d8:	mov	r1, r3
   131dc:	movw	r0, #36004	; 0x8ca4
   131e0:	movt	r0, #1
   131e4:	bl	12ff8 <__assert_fail@plt+0x1e6c>
   131e8:	str	r0, [sp, #188]	; 0xbc
   131ec:	movw	r0, #36000	; 0x8ca0
   131f0:	movt	r0, #1
   131f4:	ldr	r1, [sp, #176]	; 0xb0
   131f8:	bl	12ff8 <__assert_fail@plt+0x1e6c>
   131fc:	str	r0, [sp, #192]	; 0xc0
   13200:	cmp	r4, #0
   13204:	movne	r4, #0
   13208:	beq	148c4 <__assert_fail@plt+0x3738>
   1320c:	mov	r5, #0
   13210:	ldr	r0, [sp, #192]	; 0xc0
   13214:	mov	r9, r5
   13218:	str	r5, [sp, #64]	; 0x40
   1321c:	bl	11078 <strlen@plt>
   13220:	mov	r3, #1
   13224:	ldr	r2, [sp, #44]	; 0x2c
   13228:	cmp	r0, r5
   1322c:	moveq	r2, r5
   13230:	str	r3, [sp, #32]
   13234:	str	r3, [sp, #48]	; 0x30
   13238:	str	r5, [sp, #52]	; 0x34
   1323c:	str	r3, [sp, #60]	; 0x3c
   13240:	ldr	r3, [sp, #180]	; 0xb4
   13244:	str	r0, [sp, #56]	; 0x38
   13248:	str	r5, [sp, #68]	; 0x44
   1324c:	str	r5, [sp, #80]	; 0x50
   13250:	str	r5, [sp, #84]	; 0x54
   13254:	and	r3, r3, #1
   13258:	str	r2, [sp, #88]	; 0x58
   1325c:	str	r3, [sp, #92]	; 0x5c
   13260:	ldr	r3, [sp, #180]	; 0xb4
   13264:	and	r3, r3, #4
   13268:	str	r3, [sp, #96]	; 0x60
   1326c:	ldr	r3, [sp, #192]	; 0xc0
   13270:	str	r3, [sp, #72]	; 0x48
   13274:	mov	r3, fp
   13278:	mov	r7, #0
   1327c:	mov	fp, r9
   13280:	mov	r9, r3
   13284:	cmn	r8, #1
   13288:	beq	1388c <__assert_fail@plt+0x2700>
   1328c:	subs	r6, r8, r7
   13290:	movne	r6, #1
   13294:	cmp	r6, #0
   13298:	beq	138a4 <__assert_fail@plt+0x2718>
   1329c:	ldr	r0, [sp, #28]
   132a0:	ldr	r3, [sp, #48]	; 0x30
   132a4:	cmp	r3, #0
   132a8:	add	r3, r0, r7
   132ac:	str	r3, [sp, #36]	; 0x24
   132b0:	beq	13d30 <__assert_fail@plt+0x2ba4>
   132b4:	ldr	r2, [sp, #56]	; 0x38
   132b8:	cmp	r2, #0
   132bc:	beq	14230 <__assert_fail@plt+0x30a4>
   132c0:	cmp	r2, #1
   132c4:	mov	r3, r2
   132c8:	movls	r3, #0
   132cc:	movhi	r3, #1
   132d0:	cmn	r8, #1
   132d4:	add	r5, r7, r2
   132d8:	movne	r3, #0
   132dc:	cmp	r3, #0
   132e0:	beq	132ec <__assert_fail@plt+0x2160>
   132e4:	bl	11078 <strlen@plt>
   132e8:	mov	r8, r0
   132ec:	cmp	r5, r8
   132f0:	bhi	14230 <__assert_fail@plt+0x30a4>
   132f4:	ldr	r0, [sp, #36]	; 0x24
   132f8:	ldr	r2, [sp, #56]	; 0x38
   132fc:	ldr	r1, [sp, #72]	; 0x48
   13300:	bl	10f28 <memcmp@plt>
   13304:	cmp	r0, #0
   13308:	bne	14230 <__assert_fail@plt+0x30a4>
   1330c:	ldr	r3, [sp, #44]	; 0x2c
   13310:	cmp	r3, #0
   13314:	bne	149dc <__assert_fail@plt+0x3850>
   13318:	ldr	r3, [sp, #36]	; 0x24
   1331c:	ldrb	r5, [r3]
   13320:	cmp	r5, #126	; 0x7e
   13324:	ldrls	pc, [pc, r5, lsl #2]
   13328:	b	147c4 <__assert_fail@plt+0x3638>
   1332c:	andeq	r3, r1, r0, lsl #20
   13330:	andeq	r4, r1, r4, asr #15
   13334:	andeq	r4, r1, r4, asr #15
   13338:	andeq	r4, r1, r4, asr #15
   1333c:	andeq	r4, r1, r4, asr #15
   13340:	andeq	r4, r1, r4, asr #15
   13344:	andeq	r4, r1, r4, asr #15
   13348:	andeq	r3, r1, r8, asr r9
   1334c:	andeq	r3, r1, r0, asr r9
   13350:	andeq	r3, r1, r0, ror #18
   13354:	andeq	r3, r1, r4, ror #21
   13358:	ldrdeq	r3, [r1], -r4
   1335c:	strdeq	r3, [r1], -ip
   13360:			; <UNDEFINED> instruction: 0x00013ab0
   13364:	andeq	r4, r1, r4, asr #15
   13368:	andeq	r4, r1, r4, asr #15
   1336c:	andeq	r4, r1, r4, asr #15
   13370:	andeq	r4, r1, r4, asr #15
   13374:	andeq	r4, r1, r4, asr #15
   13378:	andeq	r4, r1, r4, asr #15
   1337c:	andeq	r4, r1, r4, asr #15
   13380:	andeq	r4, r1, r4, asr #15
   13384:	andeq	r4, r1, r4, asr #15
   13388:	andeq	r4, r1, r4, asr #15
   1338c:	andeq	r4, r1, r4, asr #15
   13390:	andeq	r4, r1, r4, asr #15
   13394:	andeq	r4, r1, r4, asr #15
   13398:	andeq	r4, r1, r4, asr #15
   1339c:	andeq	r4, r1, r4, asr #15
   133a0:	andeq	r4, r1, r4, asr #15
   133a4:	andeq	r4, r1, r4, asr #15
   133a8:	andeq	r4, r1, r4, asr #15
   133ac:	andeq	r3, r1, ip, asr fp
   133b0:	andeq	r3, r1, r0, asr fp
   133b4:	andeq	r3, r1, r0, asr fp
   133b8:	andeq	r3, r1, r4, asr #22
   133bc:	andeq	r3, r1, r0, asr fp
   133c0:	andeq	r3, r1, r8, lsr #24
   133c4:	andeq	r3, r1, r0, asr fp
   133c8:	muleq	r1, r8, ip
   133cc:	andeq	r3, r1, r0, asr fp
   133d0:	andeq	r3, r1, r0, asr fp
   133d4:	andeq	r3, r1, r0, asr fp
   133d8:	andeq	r3, r1, r8, lsr #24
   133dc:	andeq	r3, r1, r8, lsr #24
   133e0:	andeq	r3, r1, r8, lsr #24
   133e4:	andeq	r3, r1, r8, lsr #24
   133e8:	andeq	r3, r1, r8, lsr #24
   133ec:	andeq	r3, r1, r8, lsr #24
   133f0:	andeq	r3, r1, r8, lsr #24
   133f4:	andeq	r3, r1, r8, lsr #24
   133f8:	andeq	r3, r1, r8, lsr #24
   133fc:	andeq	r3, r1, r8, lsr #24
   13400:	andeq	r3, r1, r8, lsr #24
   13404:	andeq	r3, r1, r8, lsr #24
   13408:	andeq	r3, r1, r8, lsr #24
   1340c:	andeq	r3, r1, r8, lsr #24
   13410:	andeq	r3, r1, r8, lsr #24
   13414:	andeq	r3, r1, r8, lsr #24
   13418:	andeq	r3, r1, r0, asr fp
   1341c:	andeq	r3, r1, r0, asr fp
   13420:	andeq	r3, r1, r0, asr fp
   13424:	andeq	r3, r1, r0, asr fp
   13428:	andeq	r3, r1, r8, asr #24
   1342c:	andeq	r4, r1, r4, asr #15
   13430:	andeq	r3, r1, r8, lsr #24
   13434:	andeq	r3, r1, r8, lsr #24
   13438:	andeq	r3, r1, r8, lsr #24
   1343c:	andeq	r3, r1, r8, lsr #24
   13440:	andeq	r3, r1, r8, lsr #24
   13444:	andeq	r3, r1, r8, lsr #24
   13448:	andeq	r3, r1, r8, lsr #24
   1344c:	andeq	r3, r1, r8, lsr #24
   13450:	andeq	r3, r1, r8, lsr #24
   13454:	andeq	r3, r1, r8, lsr #24
   13458:	andeq	r3, r1, r8, lsr #24
   1345c:	andeq	r3, r1, r8, lsr #24
   13460:	andeq	r3, r1, r8, lsr #24
   13464:	andeq	r3, r1, r8, lsr #24
   13468:	andeq	r3, r1, r8, lsr #24
   1346c:	andeq	r3, r1, r8, lsr #24
   13470:	andeq	r3, r1, r8, lsr #24
   13474:	andeq	r3, r1, r8, lsr #24
   13478:	andeq	r3, r1, r8, lsr #24
   1347c:	andeq	r3, r1, r8, lsr #24
   13480:	andeq	r3, r1, r8, lsr #24
   13484:	andeq	r3, r1, r8, lsr #24
   13488:	andeq	r3, r1, r8, lsr #24
   1348c:	andeq	r3, r1, r8, lsr #24
   13490:	andeq	r3, r1, r8, lsr #24
   13494:	andeq	r3, r1, r8, lsr #24
   13498:	andeq	r3, r1, r0, asr fp
   1349c:	andeq	r3, r1, ip, ror #23
   134a0:	andeq	r3, r1, r8, lsr #24
   134a4:	andeq	r3, r1, r0, asr fp
   134a8:	andeq	r3, r1, r8, lsr #24
   134ac:	andeq	r3, r1, r0, asr fp
   134b0:	andeq	r3, r1, r8, lsr #24
   134b4:	andeq	r3, r1, r8, lsr #24
   134b8:	andeq	r3, r1, r8, lsr #24
   134bc:	andeq	r3, r1, r8, lsr #24
   134c0:	andeq	r3, r1, r8, lsr #24
   134c4:	andeq	r3, r1, r8, lsr #24
   134c8:	andeq	r3, r1, r8, lsr #24
   134cc:	andeq	r3, r1, r8, lsr #24
   134d0:	andeq	r3, r1, r8, lsr #24
   134d4:	andeq	r3, r1, r8, lsr #24
   134d8:	andeq	r3, r1, r8, lsr #24
   134dc:	andeq	r3, r1, r8, lsr #24
   134e0:	andeq	r3, r1, r8, lsr #24
   134e4:	andeq	r3, r1, r8, lsr #24
   134e8:	andeq	r3, r1, r8, lsr #24
   134ec:	andeq	r3, r1, r8, lsr #24
   134f0:	andeq	r3, r1, r8, lsr #24
   134f4:	andeq	r3, r1, r8, lsr #24
   134f8:	andeq	r3, r1, r8, lsr #24
   134fc:	andeq	r3, r1, r8, lsr #24
   13500:	andeq	r3, r1, r8, lsr #24
   13504:	andeq	r3, r1, r8, lsr #24
   13508:	andeq	r3, r1, r8, lsr #24
   1350c:	andeq	r3, r1, r8, lsr #24
   13510:	andeq	r3, r1, r8, lsr #24
   13514:	andeq	r3, r1, r8, lsr #24
   13518:	strdeq	r3, [r1], -r8
   1351c:	andeq	r3, r1, r0, asr fp
   13520:	strdeq	r3, [r1], -r8
   13524:	andeq	r3, r1, r4, asr #22
   13528:	ldr	r3, [sp, #180]	; 0xb4
   1352c:	cmp	r4, #0
   13530:	and	r3, r3, #1
   13534:	str	r3, [sp, #92]	; 0x5c
   13538:	ldr	r3, [sp, #180]	; 0xb4
   1353c:	and	r3, r3, #4
   13540:	str	r3, [sp, #96]	; 0x60
   13544:	moveq	r3, #1
   13548:	streq	r3, [sp, #60]	; 0x3c
   1354c:	beq	13cdc <__assert_fail@plt+0x2b50>
   13550:	mov	r3, #0
   13554:	mov	r2, #1
   13558:	mov	r4, r3
   1355c:	mov	r9, r3
   13560:	str	r2, [sp, #32]
   13564:	str	r2, [sp, #44]	; 0x2c
   13568:	str	r3, [sp, #48]	; 0x30
   1356c:	str	r2, [sp, #52]	; 0x34
   13570:	str	r2, [sp, #56]	; 0x38
   13574:	str	r3, [sp, #60]	; 0x3c
   13578:	str	r2, [sp, #64]	; 0x40
   1357c:	str	r2, [sp, #68]	; 0x44
   13580:	str	r3, [sp, #80]	; 0x50
   13584:	str	r3, [sp, #84]	; 0x54
   13588:	str	r3, [sp, #88]	; 0x58
   1358c:	movw	r3, #36000	; 0x8ca0
   13590:	movt	r3, #1
   13594:	str	r3, [sp, #72]	; 0x48
   13598:	mov	r3, #2
   1359c:	str	r3, [sp, #176]	; 0xb0
   135a0:	b	13274 <__assert_fail@plt+0x20e8>
   135a4:	ldr	r3, [sp, #180]	; 0xb4
   135a8:	cmp	r4, #0
   135ac:	and	r3, r3, #1
   135b0:	str	r3, [sp, #92]	; 0x5c
   135b4:	ldr	r3, [sp, #180]	; 0xb4
   135b8:	and	r3, r3, #4
   135bc:	str	r3, [sp, #96]	; 0x60
   135c0:	bne	14994 <__assert_fail@plt+0x3808>
   135c4:	cmp	sl, #0
   135c8:	beq	14740 <__assert_fail@plt+0x35b4>
   135cc:	mov	r3, #34	; 0x22
   135d0:	mov	r2, r4
   135d4:	mov	r1, #1
   135d8:	mov	r9, r2
   135dc:	strb	r3, [fp]
   135e0:	movw	r3, #35980	; 0x8c8c
   135e4:	movt	r3, #1
   135e8:	mov	r4, r1
   135ec:	str	r1, [sp, #32]
   135f0:	str	r2, [sp, #44]	; 0x2c
   135f4:	str	r1, [sp, #48]	; 0x30
   135f8:	str	r2, [sp, #52]	; 0x34
   135fc:	str	r1, [sp, #56]	; 0x38
   13600:	str	r1, [sp, #60]	; 0x3c
   13604:	str	r2, [sp, #64]	; 0x40
   13608:	str	r2, [sp, #68]	; 0x44
   1360c:	str	r3, [sp, #72]	; 0x48
   13610:	str	r2, [sp, #80]	; 0x50
   13614:	str	r2, [sp, #84]	; 0x54
   13618:	str	r2, [sp, #88]	; 0x58
   1361c:	b	13274 <__assert_fail@plt+0x20e8>
   13620:	mov	r3, #0
   13624:	mov	r2, #1
   13628:	mov	r9, r3
   1362c:	str	r2, [sp, #32]
   13630:	str	r3, [sp, #44]	; 0x2c
   13634:	str	r3, [sp, #48]	; 0x30
   13638:	str	r3, [sp, #52]	; 0x34
   1363c:	str	r3, [sp, #60]	; 0x3c
   13640:	strd	r2, [sp, #64]	; 0x40
   13644:	str	r3, [sp, #72]	; 0x48
   13648:	str	r3, [sp, #80]	; 0x50
   1364c:	str	r3, [sp, #88]	; 0x58
   13650:	ldr	r3, [sp, #180]	; 0xb4
   13654:	and	r3, r3, r2
   13658:	str	r3, [sp, #92]	; 0x5c
   1365c:	ldr	r3, [sp, #180]	; 0xb4
   13660:	and	r3, r3, #4
   13664:	str	r3, [sp, #96]	; 0x60
   13668:	ldr	r3, [sp, #176]	; 0xb0
   1366c:	mov	r4, r3
   13670:	str	r3, [sp, #56]	; 0x38
   13674:	str	r3, [sp, #84]	; 0x54
   13678:	b	13274 <__assert_fail@plt+0x20e8>
   1367c:	mov	r3, #1
   13680:	mov	r4, #0
   13684:	mov	r9, r4
   13688:	str	r3, [sp, #32]
   1368c:	str	r3, [sp, #44]	; 0x2c
   13690:	str	r3, [sp, #48]	; 0x30
   13694:	str	r4, [sp, #52]	; 0x34
   13698:	str	r3, [sp, #56]	; 0x38
   1369c:	str	r3, [sp, #60]	; 0x3c
   136a0:	str	r3, [sp, #88]	; 0x58
   136a4:	movw	r3, #35980	; 0x8c8c
   136a8:	movt	r3, #1
   136ac:	str	r4, [sp, #64]	; 0x40
   136b0:	str	r4, [sp, #68]	; 0x44
   136b4:	str	r3, [sp, #72]	; 0x48
   136b8:	ldr	r3, [sp, #180]	; 0xb4
   136bc:	str	r4, [sp, #80]	; 0x50
   136c0:	str	r4, [sp, #84]	; 0x54
   136c4:	and	r3, r3, #1
   136c8:	str	r3, [sp, #92]	; 0x5c
   136cc:	ldr	r3, [sp, #180]	; 0xb4
   136d0:	and	r3, r3, #4
   136d4:	str	r3, [sp, #96]	; 0x60
   136d8:	mov	r3, #5
   136dc:	str	r3, [sp, #176]	; 0xb0
   136e0:	b	13274 <__assert_fail@plt+0x20e8>
   136e4:	mov	r3, #1
   136e8:	mov	r4, #0
   136ec:	mov	r9, r4
   136f0:	str	r3, [sp, #32]
   136f4:	str	r4, [sp, #44]	; 0x2c
   136f8:	str	r3, [sp, #48]	; 0x30
   136fc:	str	r3, [sp, #60]	; 0x3c
   13700:	ldr	r3, [sp, #180]	; 0xb4
   13704:	str	r4, [sp, #52]	; 0x34
   13708:	str	r4, [sp, #56]	; 0x38
   1370c:	str	r4, [sp, #64]	; 0x40
   13710:	str	r4, [sp, #68]	; 0x44
   13714:	and	r3, r3, #1
   13718:	str	r4, [sp, #72]	; 0x48
   1371c:	str	r4, [sp, #80]	; 0x50
   13720:	str	r4, [sp, #84]	; 0x54
   13724:	str	r3, [sp, #92]	; 0x5c
   13728:	ldr	r3, [sp, #180]	; 0xb4
   1372c:	str	r4, [sp, #88]	; 0x58
   13730:	and	r3, r3, #4
   13734:	str	r3, [sp, #96]	; 0x60
   13738:	b	13274 <__assert_fail@plt+0x20e8>
   1373c:	mov	r3, #0
   13740:	mov	r2, #1
   13744:	ldr	r1, [sp, #176]	; 0xb0
   13748:	mov	r4, r3
   1374c:	mov	r9, r3
   13750:	movw	r3, #36000	; 0x8ca0
   13754:	movt	r3, #1
   13758:	str	r2, [sp, #32]
   1375c:	str	r2, [sp, #44]	; 0x2c
   13760:	str	r4, [sp, #48]	; 0x30
   13764:	strd	r2, [sp, #68]	; 0x44
   13768:	ldr	r3, [sp, #180]	; 0xb4
   1376c:	str	r2, [sp, #52]	; 0x34
   13770:	str	r1, [sp, #56]	; 0x38
   13774:	str	r4, [sp, #60]	; 0x3c
   13778:	str	r2, [sp, #64]	; 0x40
   1377c:	and	r3, r3, r2
   13780:	str	r4, [sp, #80]	; 0x50
   13784:	str	r4, [sp, #84]	; 0x54
   13788:	str	r4, [sp, #88]	; 0x58
   1378c:	str	r3, [sp, #92]	; 0x5c
   13790:	ldr	r3, [sp, #180]	; 0xb4
   13794:	and	r3, r3, #4
   13798:	str	r3, [sp, #96]	; 0x60
   1379c:	mov	r3, #2
   137a0:	str	r3, [sp, #176]	; 0xb0
   137a4:	b	13274 <__assert_fail@plt+0x20e8>
   137a8:	mov	r3, #1
   137ac:	mov	r2, #0
   137b0:	mov	r4, r2
   137b4:	mov	r9, r2
   137b8:	str	r3, [sp, #32]
   137bc:	str	r3, [sp, #44]	; 0x2c
   137c0:	str	r2, [sp, #48]	; 0x30
   137c4:	str	r3, [sp, #52]	; 0x34
   137c8:	str	r3, [sp, #56]	; 0x38
   137cc:	str	r3, [sp, #60]	; 0x3c
   137d0:	str	r3, [sp, #64]	; 0x40
   137d4:	str	r3, [sp, #68]	; 0x44
   137d8:	str	r3, [sp, #88]	; 0x58
   137dc:	movw	r3, #36000	; 0x8ca0
   137e0:	movt	r3, #1
   137e4:	str	r3, [sp, #72]	; 0x48
   137e8:	ldr	r3, [sp, #180]	; 0xb4
   137ec:	str	r2, [sp, #80]	; 0x50
   137f0:	str	r2, [sp, #84]	; 0x54
   137f4:	and	r3, r3, #1
   137f8:	b	1378c <__assert_fail@plt+0x2600>
   137fc:	mov	r5, #102	; 0x66
   13800:	mov	r6, #0
   13804:	ldr	r3, [sp, #44]	; 0x2c
   13808:	cmp	r3, #0
   1380c:	bne	146bc <__assert_fail@plt+0x3530>
   13810:	ldr	r2, [sp, #52]	; 0x34
   13814:	eor	r3, fp, #1
   13818:	ands	r3, r2, r3
   1381c:	beq	13854 <__assert_fail@plt+0x26c8>
   13820:	cmp	sl, r4
   13824:	mov	fp, r3
   13828:	movhi	r2, #39	; 0x27
   1382c:	strbhi	r2, [r9, r4]
   13830:	add	r2, r4, #1
   13834:	cmp	sl, r2
   13838:	movhi	r1, #36	; 0x24
   1383c:	strbhi	r1, [r9, r2]
   13840:	add	r2, r4, #2
   13844:	add	r4, r4, #3
   13848:	cmp	sl, r2
   1384c:	movhi	r1, #39	; 0x27
   13850:	strbhi	r1, [r9, r2]
   13854:	cmp	sl, r4
   13858:	add	r7, r7, #1
   1385c:	movhi	r3, #92	; 0x5c
   13860:	strbhi	r3, [r9, r4]
   13864:	add	r4, r4, #1
   13868:	cmp	r4, sl
   1386c:	ldr	r3, [sp, #32]
   13870:	strbcc	r5, [r9, r4]
   13874:	cmp	r6, #0
   13878:	add	r4, r4, #1
   1387c:	moveq	r3, #0
   13880:	cmn	r8, #1
   13884:	str	r3, [sp, #32]
   13888:	bne	1328c <__assert_fail@plt+0x2100>
   1388c:	ldr	r3, [sp, #28]
   13890:	ldrb	r6, [r3, r7]
   13894:	adds	r6, r6, #0
   13898:	movne	r6, #1
   1389c:	cmp	r6, #0
   138a0:	bne	1329c <__assert_fail@plt+0x2110>
   138a4:	mov	r3, r9
   138a8:	mov	r9, fp
   138ac:	mov	fp, r3
   138b0:	ldr	r3, [sp, #68]	; 0x44
   138b4:	cmp	r4, #0
   138b8:	movne	r3, #0
   138bc:	cmp	r3, #0
   138c0:	bne	14ab4 <__assert_fail@plt+0x3928>
   138c4:	ldr	r3, [sp, #44]	; 0x2c
   138c8:	ldr	r2, [sp, #52]	; 0x34
   138cc:	eor	r3, r3, #1
   138d0:	ands	r2, r3, r2
   138d4:	beq	149ec <__assert_fail@plt+0x3860>
   138d8:	ldr	r3, [sp, #80]	; 0x50
   138dc:	cmp	r3, #0
   138e0:	beq	149f0 <__assert_fail@plt+0x3864>
   138e4:	ldr	r3, [sp, #32]
   138e8:	cmp	r3, #0
   138ec:	bne	14a64 <__assert_fail@plt+0x38d8>
   138f0:	ldr	r3, [sp, #84]	; 0x54
   138f4:	adds	r3, r3, #0
   138f8:	movne	r3, #1
   138fc:	cmp	sl, #0
   13900:	movne	r3, #0
   13904:	cmp	r3, #0
   13908:	ldreq	r2, [sp, #80]	; 0x50
   1390c:	beq	149f0 <__assert_fail@plt+0x3864>
   13910:	ldr	r2, [sp, #84]	; 0x54
   13914:	mov	sl, r2
   13918:	mov	r0, #0
   1391c:	mov	r4, #1
   13920:	mov	r1, #39	; 0x27
   13924:	str	r0, [sp, #44]	; 0x2c
   13928:	strb	r1, [fp]
   1392c:	str	r0, [sp, #48]	; 0x30
   13930:	str	r4, [sp, #52]	; 0x34
   13934:	str	r4, [sp, #56]	; 0x38
   13938:	str	r4, [sp, #64]	; 0x40
   1393c:	str	r0, [sp, #68]	; 0x44
   13940:	str	r3, [sp, #80]	; 0x50
   13944:	str	r2, [sp, #84]	; 0x54
   13948:	str	r0, [sp, #88]	; 0x58
   1394c:	b	1358c <__assert_fail@plt+0x2400>
   13950:	mov	r5, #98	; 0x62
   13954:	b	13800 <__assert_fail@plt+0x2674>
   13958:	mov	r5, #97	; 0x61
   1395c:	b	13800 <__assert_fail@plt+0x2674>
   13960:	ldr	r3, [sp, #48]	; 0x30
   13964:	str	r3, [sp, #40]	; 0x28
   13968:	mov	r3, #116	; 0x74
   1396c:	ldr	r2, [sp, #68]	; 0x44
   13970:	cmp	r2, #0
   13974:	bne	13b70 <__assert_fail@plt+0x29e4>
   13978:	ldr	r2, [sp, #60]	; 0x3c
   1397c:	cmp	r2, #0
   13980:	bne	13acc <__assert_fail@plt+0x2940>
   13984:	ldr	r3, [sp, #44]	; 0x2c
   13988:	mov	r6, #0
   1398c:	cmp	r3, #0
   13990:	beq	13b3c <__assert_fail@plt+0x29b0>
   13994:	mov	r3, fp
   13998:	ldr	r2, [sp, #184]	; 0xb8
   1399c:	cmp	r2, #0
   139a0:	beq	139c0 <__assert_fail@plt+0x2834>
   139a4:	ubfx	r1, r5, #5, #8
   139a8:	mov	r0, r2
   139ac:	and	r2, r5, #31
   139b0:	ldr	r1, [r0, r1, lsl #2]
   139b4:	lsr	r2, r1, r2
   139b8:	tst	r2, #1
   139bc:	bne	13804 <__assert_fail@plt+0x2678>
   139c0:	ldr	r2, [sp, #40]	; 0x28
   139c4:	cmp	r2, #0
   139c8:	addeq	r7, r7, #1
   139cc:	bne	13804 <__assert_fail@plt+0x2678>
   139d0:	cmp	r3, #0
   139d4:	beq	13868 <__assert_fail@plt+0x26dc>
   139d8:	cmp	sl, r4
   139dc:	mov	fp, #0
   139e0:	movhi	r3, #39	; 0x27
   139e4:	strbhi	r3, [r9, r4]
   139e8:	add	r3, r4, #1
   139ec:	add	r4, r4, #2
   139f0:	cmp	sl, r3
   139f4:	movhi	r2, #39	; 0x27
   139f8:	strbhi	r2, [r9, r3]
   139fc:	b	13868 <__assert_fail@plt+0x26dc>
   13a00:	ldr	r3, [sp, #48]	; 0x30
   13a04:	str	r3, [sp, #40]	; 0x28
   13a08:	eor	r3, fp, #1
   13a0c:	ldr	r2, [sp, #52]	; 0x34
   13a10:	ands	r2, r2, r3
   13a14:	beq	146d4 <__assert_fail@plt+0x3548>
   13a18:	cmp	sl, r4
   13a1c:	movhi	r3, #39	; 0x27
   13a20:	strbhi	r3, [r9, r4]
   13a24:	add	r3, r4, #1
   13a28:	cmp	sl, r3
   13a2c:	movhi	r1, #36	; 0x24
   13a30:	strbhi	r1, [r9, r3]
   13a34:	add	r3, r4, #2
   13a38:	cmp	sl, r3
   13a3c:	movhi	r1, #39	; 0x27
   13a40:	strbhi	r1, [r9, r3]
   13a44:	add	r3, r4, #3
   13a48:	cmp	sl, r3
   13a4c:	bls	14720 <__assert_fail@plt+0x3594>
   13a50:	mov	r4, r3
   13a54:	mov	r3, #92	; 0x5c
   13a58:	mov	fp, r2
   13a5c:	mov	r2, r4
   13a60:	strb	r3, [r9, r4]
   13a64:	ldr	r3, [sp, #176]	; 0xb0
   13a68:	add	r4, r4, #1
   13a6c:	cmp	r3, #2
   13a70:	beq	14788 <__assert_fail@plt+0x35fc>
   13a74:	add	r3, r7, #1
   13a78:	cmp	r3, r8
   13a7c:	bcs	13a94 <__assert_fail@plt+0x2908>
   13a80:	ldr	r1, [sp, #28]
   13a84:	ldrb	r3, [r1, r3]
   13a88:	sub	r3, r3, #48	; 0x30
   13a8c:	cmp	r3, #9
   13a90:	bls	14798 <__assert_fail@plt+0x360c>
   13a94:	mov	r3, #0
   13a98:	mov	r5, #48	; 0x30
   13a9c:	ldr	r6, [sp, #64]	; 0x40
   13aa0:	cmp	r6, #0
   13aa4:	beq	13998 <__assert_fail@plt+0x280c>
   13aa8:	mov	r6, #0
   13aac:	b	139c0 <__assert_fail@plt+0x2834>
   13ab0:	ldr	r3, [sp, #48]	; 0x30
   13ab4:	str	r3, [sp, #40]	; 0x28
   13ab8:	ldr	r2, [sp, #60]	; 0x3c
   13abc:	mov	r5, #13
   13ac0:	mov	r3, #114	; 0x72
   13ac4:	cmp	r2, #0
   13ac8:	beq	13984 <__assert_fail@plt+0x27f8>
   13acc:	mov	r5, r3
   13ad0:	b	13800 <__assert_fail@plt+0x2674>
   13ad4:	ldr	r3, [sp, #48]	; 0x30
   13ad8:	str	r3, [sp, #40]	; 0x28
   13adc:	mov	r3, #118	; 0x76
   13ae0:	b	13978 <__assert_fail@plt+0x27ec>
   13ae4:	ldr	r3, [sp, #48]	; 0x30
   13ae8:	str	r3, [sp, #40]	; 0x28
   13aec:	mov	r5, #10
   13af0:	mov	r3, #110	; 0x6e
   13af4:	b	13978 <__assert_fail@plt+0x27ec>
   13af8:	ldr	r3, [sp, #48]	; 0x30
   13afc:	cmn	r8, #1
   13b00:	str	r3, [sp, #40]	; 0x28
   13b04:	beq	13f4c <__assert_fail@plt+0x2dc0>
   13b08:	subs	r3, r8, #1
   13b0c:	movne	r3, #1
   13b10:	cmp	r3, #0
   13b14:	bne	13b20 <__assert_fail@plt+0x2994>
   13b18:	cmp	r7, #0
   13b1c:	beq	13b64 <__assert_fail@plt+0x29d8>
   13b20:	mov	r6, #0
   13b24:	ldr	r3, [sp, #64]	; 0x40
   13b28:	cmp	r3, #0
   13b2c:	beq	13994 <__assert_fail@plt+0x2808>
   13b30:	ldr	r3, [sp, #44]	; 0x2c
   13b34:	cmp	r3, #0
   13b38:	bne	13994 <__assert_fail@plt+0x2808>
   13b3c:	mov	r3, fp
   13b40:	b	139c0 <__assert_fail@plt+0x2834>
   13b44:	ldr	r3, [sp, #48]	; 0x30
   13b48:	str	r3, [sp, #40]	; 0x28
   13b4c:	b	13b18 <__assert_fail@plt+0x298c>
   13b50:	ldr	r3, [sp, #48]	; 0x30
   13b54:	str	r3, [sp, #40]	; 0x28
   13b58:	b	13b20 <__assert_fail@plt+0x2994>
   13b5c:	ldr	r6, [sp, #48]	; 0x30
   13b60:	str	r6, [sp, #40]	; 0x28
   13b64:	ldr	r3, [sp, #68]	; 0x44
   13b68:	cmp	r3, #0
   13b6c:	beq	13b24 <__assert_fail@plt+0x2998>
   13b70:	mov	r3, #2
   13b74:	mov	fp, r9
   13b78:	str	r3, [sp, #176]	; 0xb0
   13b7c:	ldr	r3, [sp, #60]	; 0x3c
   13b80:	cmp	r3, #0
   13b84:	ldr	r3, [sp, #176]	; 0xb0
   13b88:	movne	r3, #4
   13b8c:	str	r3, [sp, #176]	; 0xb0
   13b90:	mov	lr, #0
   13b94:	mov	r0, fp
   13b98:	ldr	r2, [sp, #28]
   13b9c:	ldr	r3, [sp, #180]	; 0xb4
   13ba0:	ldr	r1, [sp, #188]	; 0xbc
   13ba4:	bic	ip, r3, #2
   13ba8:	ldr	r3, [sp, #176]	; 0xb0
   13bac:	stm	sp, {r3, ip, lr}
   13bb0:	mov	r3, r8
   13bb4:	ldr	ip, [sp, #192]	; 0xc0
   13bb8:	str	r1, [sp, #12]
   13bbc:	mov	r1, sl
   13bc0:	str	ip, [sp, #16]
   13bc4:	bl	13150 <__assert_fail@plt+0x1fc4>
   13bc8:	mov	r4, r0
   13bcc:	mov	r0, r4
   13bd0:	add	sp, sp, #140	; 0x8c
   13bd4:	ldrd	r4, [sp]
   13bd8:	ldrd	r6, [sp, #8]
   13bdc:	ldrd	r8, [sp, #16]
   13be0:	ldrd	sl, [sp, #24]
   13be4:	add	sp, sp, #32
   13be8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bec:	ldr	r3, [sp, #48]	; 0x30
   13bf0:	str	r3, [sp, #40]	; 0x28
   13bf4:	ldr	r3, [sp, #176]	; 0xb0
   13bf8:	cmp	r3, #2
   13bfc:	beq	13f74 <__assert_fail@plt+0x2de8>
   13c00:	ldr	r3, [sp, #88]	; 0x58
   13c04:	cmp	r3, #0
   13c08:	moveq	r5, #92	; 0x5c
   13c0c:	moveq	r3, r5
   13c10:	beq	13978 <__assert_fail@plt+0x27ec>
   13c14:	add	r7, r7, #1
   13c18:	mov	r3, fp
   13c1c:	mov	r6, #0
   13c20:	mov	r5, #92	; 0x5c
   13c24:	b	139d0 <__assert_fail@plt+0x2844>
   13c28:	ldr	r3, [sp, #64]	; 0x40
   13c2c:	cmp	r3, #0
   13c30:	bne	14aa8 <__assert_fail@plt+0x391c>
   13c34:	ldr	r2, [sp, #48]	; 0x30
   13c38:	mov	r3, fp
   13c3c:	mov	r6, r2
   13c40:	str	r2, [sp, #40]	; 0x28
   13c44:	b	13998 <__assert_fail@plt+0x280c>
   13c48:	ldr	r3, [sp, #176]	; 0xb0
   13c4c:	cmp	r3, #2
   13c50:	beq	149e4 <__assert_fail@plt+0x3858>
   13c54:	cmp	r3, #5
   13c58:	ldr	r3, [sp, #48]	; 0x30
   13c5c:	str	r3, [sp, #40]	; 0x28
   13c60:	bne	13c8c <__assert_fail@plt+0x2b00>
   13c64:	ldr	r3, [sp, #96]	; 0x60
   13c68:	cmp	r3, #0
   13c6c:	beq	146e8 <__assert_fail@plt+0x355c>
   13c70:	add	r3, r7, #2
   13c74:	cmp	r3, r8
   13c78:	bcs	13c8c <__assert_fail@plt+0x2b00>
   13c7c:	ldr	r2, [sp, #36]	; 0x24
   13c80:	ldrb	r5, [r2, #1]
   13c84:	cmp	r5, #63	; 0x3f
   13c88:	beq	147d0 <__assert_fail@plt+0x3644>
   13c8c:	mov	r6, #0
   13c90:	mov	r5, #63	; 0x3f
   13c94:	b	13b24 <__assert_fail@plt+0x2998>
   13c98:	ldr	r3, [sp, #176]	; 0xb0
   13c9c:	cmp	r3, #2
   13ca0:	ldr	r3, [sp, #48]	; 0x30
   13ca4:	beq	1448c <__assert_fail@plt+0x3300>
   13ca8:	mov	r5, #39	; 0x27
   13cac:	str	r3, [sp, #40]	; 0x28
   13cb0:	str	r6, [sp, #80]	; 0x50
   13cb4:	b	13b24 <__assert_fail@plt+0x2998>
   13cb8:	ldr	r3, [sp, #180]	; 0xb4
   13cbc:	cmp	r4, #0
   13cc0:	and	r3, r3, #1
   13cc4:	str	r3, [sp, #92]	; 0x5c
   13cc8:	ldr	r3, [sp, #180]	; 0xb4
   13ccc:	and	r3, r3, #4
   13cd0:	str	r3, [sp, #96]	; 0x60
   13cd4:	bne	14af4 <__assert_fail@plt+0x3968>
   13cd8:	str	r4, [sp, #60]	; 0x3c
   13cdc:	cmp	sl, #0
   13ce0:	bne	14ad8 <__assert_fail@plt+0x394c>
   13ce4:	mov	r3, #1
   13ce8:	movw	r2, #36000	; 0x8ca0
   13cec:	movt	r2, #1
   13cf0:	mov	r4, r3
   13cf4:	mov	r3, #2
   13cf8:	mov	r9, sl
   13cfc:	str	r4, [sp, #32]
   13d00:	str	sl, [sp, #44]	; 0x2c
   13d04:	str	sl, [sp, #48]	; 0x30
   13d08:	str	r4, [sp, #52]	; 0x34
   13d0c:	str	r4, [sp, #56]	; 0x38
   13d10:	str	r4, [sp, #64]	; 0x40
   13d14:	str	sl, [sp, #68]	; 0x44
   13d18:	str	r2, [sp, #72]	; 0x48
   13d1c:	str	sl, [sp, #80]	; 0x50
   13d20:	str	sl, [sp, #84]	; 0x54
   13d24:	str	sl, [sp, #88]	; 0x58
   13d28:	str	r3, [sp, #176]	; 0xb0
   13d2c:	b	13274 <__assert_fail@plt+0x20e8>
   13d30:	ldrb	r5, [r0, r7]
   13d34:	cmp	r5, #126	; 0x7e
   13d38:	ldrls	pc, [pc, r5, lsl #2]
   13d3c:	b	140a0 <__assert_fail@plt+0x2f14>
   13d40:	andeq	r4, r1, ip, rrx
   13d44:	andeq	r4, r1, r0, lsr #1
   13d48:	andeq	r4, r1, r0, lsr #1
   13d4c:	andeq	r4, r1, r0, lsr #1
   13d50:	andeq	r4, r1, r0, lsr #1
   13d54:	andeq	r4, r1, r0, lsr #1
   13d58:	andeq	r4, r1, r0, lsr #1
   13d5c:	andeq	r4, r1, ip, asr r0
   13d60:	andeq	r4, r1, ip, asr #32
   13d64:	ldrdeq	r3, [r1], -r0
   13d68:	andeq	r4, r1, ip, lsr r0
   13d6c:			; <UNDEFINED> instruction: 0x00013fb0
   13d70:	muleq	r1, r0, r0
   13d74:	andeq	r4, r1, ip, lsl r0
   13d78:	andeq	r4, r1, r0, lsr #1
   13d7c:	andeq	r4, r1, r0, lsr #1
   13d80:	andeq	r4, r1, r0, lsr #1
   13d84:	andeq	r4, r1, r0, lsr #1
   13d88:	andeq	r4, r1, r0, lsr #1
   13d8c:	andeq	r4, r1, r0, lsr #1
   13d90:	andeq	r4, r1, r0, lsr #1
   13d94:	andeq	r4, r1, r0, lsr #1
   13d98:	andeq	r4, r1, r0, lsr #1
   13d9c:	andeq	r4, r1, r0, lsr #1
   13da0:	andeq	r4, r1, r0, lsr #1
   13da4:	andeq	r4, r1, r0, lsr #1
   13da8:	andeq	r4, r1, r0, lsr #1
   13dac:	andeq	r4, r1, r0, lsr #1
   13db0:	andeq	r4, r1, r0, lsr #1
   13db4:	andeq	r4, r1, r0, lsr #1
   13db8:	andeq	r4, r1, r0, lsr #1
   13dbc:	andeq	r4, r1, r0, lsr #1
   13dc0:	andeq	r3, r1, r4, asr #31
   13dc4:	andeq	r4, r1, ip, lsr #32
   13dc8:	andeq	r4, r1, ip, lsr #32
   13dcc:	andeq	r3, r1, r4, lsr #31
   13dd0:	andeq	r4, r1, ip, lsr #32
   13dd4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13dd8:	andeq	r4, r1, ip, lsr #32
   13ddc:	andeq	r4, r1, r8
   13de0:	andeq	r4, r1, ip, lsr #32
   13de4:	andeq	r4, r1, ip, lsr #32
   13de8:	andeq	r4, r1, ip, lsr #32
   13dec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13df0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13df4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13df8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13dfc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e00:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e04:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e08:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e0c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e10:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e14:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e1c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e20:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e24:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e2c:	andeq	r4, r1, ip, lsr #32
   13e30:	andeq	r4, r1, ip, lsr #32
   13e34:	andeq	r4, r1, ip, lsr #32
   13e38:	andeq	r4, r1, ip, lsr #32
   13e3c:	andeq	r3, r1, r0, ror #31
   13e40:	andeq	r4, r1, r0, lsr #1
   13e44:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e64:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e6c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e8c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e90:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e94:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e98:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13e9c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ea0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ea4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ea8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13eac:	andeq	r4, r1, ip, lsr #32
   13eb0:	andeq	r3, r1, r0, ror #30
   13eb4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13eb8:	andeq	r4, r1, ip, lsr #32
   13ebc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ec0:	andeq	r4, r1, ip, lsr #32
   13ec4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ec8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ecc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ed0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ed4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ed8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13edc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ee0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ee4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ee8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13eec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ef0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ef4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ef8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13efc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f00:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f04:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f08:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f0c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f10:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f14:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f1c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f20:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f24:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f2c:	andeq	r3, r1, ip, lsr pc
   13f30:	andeq	r4, r1, ip, lsr #32
   13f34:	andeq	r3, r1, ip, lsr pc
   13f38:	andeq	r3, r1, r4, lsr #31
   13f3c:	mov	r3, #0
   13f40:	cmn	r8, #1
   13f44:	str	r3, [sp, #40]	; 0x28
   13f48:	bne	13b08 <__assert_fail@plt+0x297c>
   13f4c:	ldr	r3, [sp, #28]
   13f50:	ldrb	r3, [r3, #1]
   13f54:	adds	r3, r3, #0
   13f58:	movne	r3, #1
   13f5c:	b	13b10 <__assert_fail@plt+0x2984>
   13f60:	mov	r3, #0
   13f64:	str	r3, [sp, #40]	; 0x28
   13f68:	ldr	r3, [sp, #176]	; 0xb0
   13f6c:	cmp	r3, #2
   13f70:	bne	13c00 <__assert_fail@plt+0x2a74>
   13f74:	ldr	r3, [sp, #44]	; 0x2c
   13f78:	cmp	r3, #0
   13f7c:	bne	148bc <__assert_fail@plt+0x3730>
   13f80:	mov	r6, r3
   13f84:	add	r7, r7, #1
   13f88:	mov	r3, fp
   13f8c:	mov	r5, #92	; 0x5c
   13f90:	b	139d0 <__assert_fail@plt+0x2844>
   13f94:	ldr	r6, [sp, #48]	; 0x30
   13f98:	mov	r3, #0
   13f9c:	str	r3, [sp, #40]	; 0x28
   13fa0:	b	13b24 <__assert_fail@plt+0x2998>
   13fa4:	mov	r3, #0
   13fa8:	str	r3, [sp, #40]	; 0x28
   13fac:	b	13b18 <__assert_fail@plt+0x298c>
   13fb0:	mov	r3, #0
   13fb4:	str	r3, [sp, #40]	; 0x28
   13fb8:	mov	r3, #118	; 0x76
   13fbc:	b	13978 <__assert_fail@plt+0x27ec>
   13fc0:	ldr	r6, [sp, #48]	; 0x30
   13fc4:	mov	r3, #0
   13fc8:	str	r3, [sp, #40]	; 0x28
   13fcc:	b	13b64 <__assert_fail@plt+0x29d8>
   13fd0:	mov	r3, #0
   13fd4:	str	r3, [sp, #40]	; 0x28
   13fd8:	mov	r3, #116	; 0x74
   13fdc:	b	1396c <__assert_fail@plt+0x27e0>
   13fe0:	ldr	r3, [sp, #176]	; 0xb0
   13fe4:	cmp	r3, #2
   13fe8:	beq	144f8 <__assert_fail@plt+0x336c>
   13fec:	cmp	r3, #5
   13ff0:	mov	r3, #0
   13ff4:	str	r3, [sp, #40]	; 0x28
   13ff8:	beq	13c64 <__assert_fail@plt+0x2ad8>
   13ffc:	mov	r6, #0
   14000:	mov	r5, #63	; 0x3f
   14004:	b	13b24 <__assert_fail@plt+0x2998>
   14008:	ldr	r3, [sp, #176]	; 0xb0
   1400c:	cmp	r3, #2
   14010:	beq	14480 <__assert_fail@plt+0x32f4>
   14014:	mov	r3, #0
   14018:	b	13ca8 <__assert_fail@plt+0x2b1c>
   1401c:	mov	r3, #0
   14020:	str	r3, [sp, #40]	; 0x28
   14024:	mov	r3, #114	; 0x72
   14028:	b	1396c <__assert_fail@plt+0x27e0>
   1402c:	mov	r3, #0
   14030:	mov	r6, r3
   14034:	str	r3, [sp, #40]	; 0x28
   14038:	b	13b64 <__assert_fail@plt+0x29d8>
   1403c:	mov	r3, #0
   14040:	str	r3, [sp, #40]	; 0x28
   14044:	mov	r3, #110	; 0x6e
   14048:	b	1396c <__assert_fail@plt+0x27e0>
   1404c:	mov	r3, #0
   14050:	str	r3, [sp, #40]	; 0x28
   14054:	mov	r3, #98	; 0x62
   14058:	b	13978 <__assert_fail@plt+0x27ec>
   1405c:	mov	r3, #0
   14060:	str	r3, [sp, #40]	; 0x28
   14064:	mov	r3, #97	; 0x61
   14068:	b	13978 <__assert_fail@plt+0x27ec>
   1406c:	ldr	r3, [sp, #60]	; 0x3c
   14070:	cmp	r3, #0
   14074:	bne	14464 <__assert_fail@plt+0x32d8>
   14078:	ldr	r3, [sp, #92]	; 0x5c
   1407c:	cmp	r3, #0
   14080:	addne	r7, r7, #1
   14084:	bne	13284 <__assert_fail@plt+0x20f8>
   14088:	str	r3, [sp, #40]	; 0x28
   1408c:	b	13984 <__assert_fail@plt+0x27f8>
   14090:	mov	r3, #0
   14094:	str	r3, [sp, #40]	; 0x28
   14098:	mov	r3, #102	; 0x66
   1409c:	b	13978 <__assert_fail@plt+0x27ec>
   140a0:	mov	r3, #0
   140a4:	str	r3, [sp, #40]	; 0x28
   140a8:	ldr	r3, [sp, #76]	; 0x4c
   140ac:	cmp	r3, #1
   140b0:	bne	14518 <__assert_fail@plt+0x338c>
   140b4:	bl	11054 <__ctype_b_loc@plt>
   140b8:	ldr	r2, [r0]
   140bc:	sxth	r3, r5
   140c0:	lsl	r3, r3, #1
   140c4:	ldr	r1, [sp, #76]	; 0x4c
   140c8:	ldrh	r3, [r2, r3]
   140cc:	mov	r0, r1
   140d0:	and	r3, r3, #16384	; 0x4000
   140d4:	cmp	r3, #0
   140d8:	ldr	r3, [sp, #60]	; 0x3c
   140dc:	movne	r6, #1
   140e0:	moveq	r6, #0
   140e4:	movne	r2, #0
   140e8:	andeq	r2, r3, #1
   140ec:	cmp	r2, #0
   140f0:	beq	13b24 <__assert_fail@plt+0x2998>
   140f4:	ldr	r2, [sp, #60]	; 0x3c
   140f8:	mov	r6, #0
   140fc:	add	r1, r0, r7
   14100:	mov	ip, #39	; 0x27
   14104:	str	r6, [sp, #100]	; 0x64
   14108:	mov	r0, #0
   1410c:	ldr	lr, [sp, #36]	; 0x24
   14110:	str	r8, [sp, #36]	; 0x24
   14114:	ldr	r6, [sp, #40]	; 0x28
   14118:	ldr	r8, [sp, #44]	; 0x2c
   1411c:	b	141cc <__assert_fail@plt+0x3040>
   14120:	cmp	r8, #0
   14124:	bne	14700 <__assert_fail@plt+0x3574>
   14128:	ldr	r0, [sp, #52]	; 0x34
   1412c:	eor	r3, fp, #1
   14130:	ands	r3, r0, r3
   14134:	beq	14164 <__assert_fail@plt+0x2fd8>
   14138:	cmp	sl, r4
   1413c:	add	r0, r4, #1
   14140:	strbhi	ip, [r9, r4]
   14144:	cmp	sl, r0
   14148:	movhi	fp, #36	; 0x24
   1414c:	strbhi	fp, [r9, r0]
   14150:	add	r0, r4, #2
   14154:	mov	fp, r3
   14158:	cmp	sl, r0
   1415c:	add	r4, r4, #3
   14160:	strbhi	ip, [r9, r0]
   14164:	cmp	sl, r4
   14168:	movhi	r3, #92	; 0x5c
   1416c:	strbhi	r3, [r9, r4]
   14170:	add	r3, r4, #1
   14174:	cmp	sl, r3
   14178:	bls	14188 <__assert_fail@plt+0x2ffc>
   1417c:	lsr	r0, r5, #6
   14180:	add	r0, r0, #48	; 0x30
   14184:	strb	r0, [r9, r3]
   14188:	add	r3, r4, #2
   1418c:	cmp	sl, r3
   14190:	bls	141a0 <__assert_fail@plt+0x3014>
   14194:	ubfx	r0, r5, #3, #3
   14198:	add	r0, r0, #48	; 0x30
   1419c:	strb	r0, [r9, r3]
   141a0:	add	r7, r7, #1
   141a4:	and	r5, r5, #7
   141a8:	cmp	r1, r7
   141ac:	add	r5, r5, #48	; 0x30
   141b0:	add	r4, r4, #3
   141b4:	bls	14714 <__assert_fail@plt+0x3588>
   141b8:	mov	r0, r2
   141bc:	cmp	sl, r4
   141c0:	strbhi	r5, [r9, r4]
   141c4:	add	r4, r4, #1
   141c8:	ldrb	r5, [lr, #1]!
   141cc:	cmp	r2, #0
   141d0:	bne	14120 <__assert_fail@plt+0x2f94>
   141d4:	eor	r3, r0, #1
   141d8:	cmp	r6, #0
   141dc:	and	r3, r3, fp
   141e0:	uxtb	r3, r3
   141e4:	beq	141f8 <__assert_fail@plt+0x306c>
   141e8:	cmp	sl, r4
   141ec:	movhi	r6, #92	; 0x5c
   141f0:	strbhi	r6, [r9, r4]
   141f4:	add	r4, r4, #1
   141f8:	add	r7, r7, #1
   141fc:	cmp	r7, r1
   14200:	bcs	146f4 <__assert_fail@plt+0x3568>
   14204:	cmp	r3, #0
   14208:	beq	14738 <__assert_fail@plt+0x35ac>
   1420c:	cmp	sl, r4
   14210:	add	r3, r4, #1
   14214:	mov	r6, #0
   14218:	strbhi	ip, [r9, r4]
   1421c:	cmp	sl, r3
   14220:	add	r4, r4, #2
   14224:	mov	fp, r6
   14228:	strbhi	ip, [r9, r3]
   1422c:	b	141bc <__assert_fail@plt+0x3030>
   14230:	ldr	r3, [sp, #36]	; 0x24
   14234:	ldrb	r5, [r3]
   14238:	cmp	r5, #126	; 0x7e
   1423c:	ldrls	pc, [pc, r5, lsl #2]
   14240:	b	140a0 <__assert_fail@plt+0x2f14>
   14244:	andeq	r4, r1, r4, ror #8
   14248:	andeq	r4, r1, r0, lsr #1
   1424c:	andeq	r4, r1, r0, lsr #1
   14250:	andeq	r4, r1, r0, lsr #1
   14254:	andeq	r4, r1, r0, lsr #1
   14258:	andeq	r4, r1, r0, lsr #1
   1425c:	andeq	r4, r1, r0, lsr #1
   14260:	andeq	r3, r1, r8, asr r9
   14264:	andeq	r3, r1, r0, asr r9
   14268:	ldrdeq	r3, [r1], -r0
   1426c:	andeq	r4, r1, r8, asr r4
   14270:			; <UNDEFINED> instruction: 0x00013fb0
   14274:	strdeq	r3, [r1], -ip
   14278:	andeq	r4, r1, ip, asr #8
   1427c:	andeq	r4, r1, r0, lsr #1
   14280:	andeq	r4, r1, r0, lsr #1
   14284:	andeq	r4, r1, r0, lsr #1
   14288:	andeq	r4, r1, r0, lsr #1
   1428c:	andeq	r4, r1, r0, lsr #1
   14290:	andeq	r4, r1, r0, lsr #1
   14294:	andeq	r4, r1, r0, lsr #1
   14298:	andeq	r4, r1, r0, lsr #1
   1429c:	andeq	r4, r1, r0, lsr #1
   142a0:	andeq	r4, r1, r0, lsr #1
   142a4:	andeq	r4, r1, r0, lsr #1
   142a8:	andeq	r4, r1, r0, lsr #1
   142ac:	andeq	r4, r1, r0, lsr #1
   142b0:	andeq	r4, r1, r0, lsr #1
   142b4:	andeq	r4, r1, r0, lsr #1
   142b8:	andeq	r4, r1, r0, lsr #1
   142bc:	andeq	r4, r1, r0, lsr #1
   142c0:	andeq	r4, r1, r0, lsr #1
   142c4:	andeq	r3, r1, r0, asr #31
   142c8:	andeq	r4, r1, r0, asr #8
   142cc:	andeq	r4, r1, r0, asr #8
   142d0:	andeq	r3, r1, r4, lsr #31
   142d4:	andeq	r4, r1, r0, asr #8
   142d8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   142dc:	andeq	r4, r1, r0, asr #8
   142e0:	andeq	r4, r1, r8
   142e4:	andeq	r4, r1, r0, asr #8
   142e8:	andeq	r4, r1, r0, asr #8
   142ec:	andeq	r4, r1, r0, asr #8
   142f0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   142f4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   142f8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   142fc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14300:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14304:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14308:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1430c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14310:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14314:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14318:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1431c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14320:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14324:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14328:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1432c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14330:	andeq	r4, r1, r0, asr #8
   14334:	andeq	r4, r1, r0, asr #8
   14338:	andeq	r4, r1, r0, asr #8
   1433c:	andeq	r4, r1, r0, asr #8
   14340:	andeq	r3, r1, r0, ror #31
   14344:	andeq	r4, r1, r0, lsr #1
   14348:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1434c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14350:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14354:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14358:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1435c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14360:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14364:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14368:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1436c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14370:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14374:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14378:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1437c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14380:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14384:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14388:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1438c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14390:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14394:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14398:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1439c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143a0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143a4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143a8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143ac:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143b0:	andeq	r4, r1, r0, asr #8
   143b4:	andeq	r3, r1, r0, ror #30
   143b8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143bc:	andeq	r4, r1, r0, asr #8
   143c0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143c4:	andeq	r4, r1, r0, asr #8
   143c8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143cc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143d0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143d4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143d8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143dc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143e0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143e4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143e8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143ec:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143f0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143f4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143f8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143fc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14400:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14404:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14408:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1440c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14410:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14414:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14418:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1441c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14420:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14424:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14428:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1442c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14430:	andeq	r3, r1, ip, lsr pc
   14434:	andeq	r4, r1, r0, asr #8
   14438:	andeq	r3, r1, ip, lsr pc
   1443c:	andeq	r3, r1, r4, lsr #31
   14440:	mov	r3, #0
   14444:	str	r3, [sp, #40]	; 0x28
   14448:	b	13b20 <__assert_fail@plt+0x2994>
   1444c:	mov	r3, #0
   14450:	str	r3, [sp, #40]	; 0x28
   14454:	b	13ab8 <__assert_fail@plt+0x292c>
   14458:	mov	r3, #0
   1445c:	str	r3, [sp, #40]	; 0x28
   14460:	b	13aec <__assert_fail@plt+0x2960>
   14464:	ldr	r3, [sp, #44]	; 0x2c
   14468:	cmp	r3, #0
   1446c:	beq	13a04 <__assert_fail@plt+0x2878>
   14470:	ldr	r3, [sp, #52]	; 0x34
   14474:	mov	fp, r9
   14478:	str	r3, [sp, #60]	; 0x3c
   1447c:	b	13b7c <__assert_fail@plt+0x29f0>
   14480:	ldr	r3, [sp, #44]	; 0x2c
   14484:	cmp	r3, #0
   14488:	bne	148bc <__assert_fail@plt+0x3730>
   1448c:	str	r3, [sp, #40]	; 0x28
   14490:	cmp	sl, #0
   14494:	ldr	r3, [sp, #84]	; 0x54
   14498:	clz	r3, r3
   1449c:	lsr	r3, r3, #5
   144a0:	moveq	r3, #0
   144a4:	cmp	r3, #0
   144a8:	strne	sl, [sp, #84]	; 0x54
   144ac:	movne	sl, #0
   144b0:	bne	144e0 <__assert_fail@plt+0x3354>
   144b4:	cmp	sl, r4
   144b8:	movhi	r3, #39	; 0x27
   144bc:	strbhi	r3, [r9, r4]
   144c0:	add	r3, r4, #1
   144c4:	cmp	sl, r3
   144c8:	movhi	r2, #92	; 0x5c
   144cc:	strbhi	r2, [r9, r3]
   144d0:	add	r3, r4, #2
   144d4:	cmp	sl, r3
   144d8:	movhi	r2, #39	; 0x27
   144dc:	strbhi	r2, [r9, r3]
   144e0:	mov	r3, #0
   144e4:	add	r4, r4, #3
   144e8:	str	r6, [sp, #80]	; 0x50
   144ec:	mov	fp, r3
   144f0:	mov	r5, #39	; 0x27
   144f4:	b	139c0 <__assert_fail@plt+0x2834>
   144f8:	ldr	r3, [sp, #44]	; 0x2c
   144fc:	cmp	r3, #0
   14500:	bne	148bc <__assert_fail@plt+0x3730>
   14504:	mov	r6, #0
   14508:	mov	r5, #63	; 0x3f
   1450c:	str	r3, [sp, #40]	; 0x28
   14510:	mov	r3, fp
   14514:	b	139c0 <__assert_fail@plt+0x2834>
   14518:	mov	r2, #0
   1451c:	mov	r3, #0
   14520:	cmn	r8, #1
   14524:	strd	r2, [sp, #128]	; 0x80
   14528:	bne	14538 <__assert_fail@plt+0x33ac>
   1452c:	ldr	r0, [sp, #28]
   14530:	bl	11078 <strlen@plt>
   14534:	mov	r8, r0
   14538:	str	r9, [sp, #100]	; 0x64
   1453c:	mov	r3, #0
   14540:	strd	sl, [sp, #104]	; 0x68
   14544:	ldr	sl, [sp, #28]
   14548:	str	r5, [sp, #112]	; 0x70
   1454c:	mov	r5, r3
   14550:	ldr	r9, [sp, #68]	; 0x44
   14554:	str	r4, [sp, #116]	; 0x74
   14558:	add	r4, r7, r5
   1455c:	add	r3, sp, #128	; 0x80
   14560:	add	fp, sl, r4
   14564:	sub	r2, r8, r4
   14568:	mov	r1, fp
   1456c:	add	r0, sp, #124	; 0x7c
   14570:	bl	17e40 <__assert_fail@plt+0x6cb4>
   14574:	subs	r1, r0, #0
   14578:	beq	145b8 <__assert_fail@plt+0x342c>
   1457c:	cmn	r1, #1
   14580:	beq	14910 <__assert_fail@plt+0x3784>
   14584:	cmn	r1, #2
   14588:	beq	14930 <__assert_fail@plt+0x37a4>
   1458c:	cmp	r9, #0
   14590:	bne	145e8 <__assert_fail@plt+0x345c>
   14594:	ldr	r0, [sp, #124]	; 0x7c
   14598:	add	r5, r5, r1
   1459c:	bl	10f88 <iswprint@plt>
   145a0:	cmp	r0, #0
   145a4:	add	r0, sp, #128	; 0x80
   145a8:	moveq	r6, #0
   145ac:	bl	10f10 <mbsinit@plt>
   145b0:	cmp	r0, #0
   145b4:	beq	14558 <__assert_fail@plt+0x33cc>
   145b8:	ldr	r3, [sp, #60]	; 0x3c
   145bc:	add	r9, sp, #100	; 0x64
   145c0:	mov	r0, r5
   145c4:	ldm	r9, {r9, sl, fp}
   145c8:	eor	r2, r6, #1
   145cc:	ldr	r5, [sp, #112]	; 0x70
   145d0:	and	r2, r2, r3
   145d4:	uxtb	r2, r2
   145d8:	ldr	r4, [sp, #116]	; 0x74
   145dc:	cmp	r0, #1
   145e0:	bhi	140fc <__assert_fail@plt+0x2f70>
   145e4:	b	140ec <__assert_fail@plt+0x2f60>
   145e8:	cmp	r1, #1
   145ec:	beq	14594 <__assert_fail@plt+0x3408>
   145f0:	add	r2, r4, #1
   145f4:	add	r3, sl, r1
   145f8:	add	r2, sl, r2
   145fc:	add	r4, r3, r4
   14600:	ldrb	r3, [r2], #1
   14604:	sub	r3, r3, #91	; 0x5b
   14608:	cmp	r3, #33	; 0x21
   1460c:	ldrls	pc, [pc, r3, lsl #2]
   14610:	b	1469c <__assert_fail@plt+0x3510>
   14614:	andeq	r4, r1, r8, lsr #13
   14618:	andeq	r4, r1, r8, lsr #13
   1461c:	muleq	r1, ip, r6
   14620:	andeq	r4, r1, r8, lsr #13
   14624:	muleq	r1, ip, r6
   14628:	andeq	r4, r1, r8, lsr #13
   1462c:	muleq	r1, ip, r6
   14630:	muleq	r1, ip, r6
   14634:	muleq	r1, ip, r6
   14638:	muleq	r1, ip, r6
   1463c:	muleq	r1, ip, r6
   14640:	muleq	r1, ip, r6
   14644:	muleq	r1, ip, r6
   14648:	muleq	r1, ip, r6
   1464c:	muleq	r1, ip, r6
   14650:	muleq	r1, ip, r6
   14654:	muleq	r1, ip, r6
   14658:	muleq	r1, ip, r6
   1465c:	muleq	r1, ip, r6
   14660:	muleq	r1, ip, r6
   14664:	muleq	r1, ip, r6
   14668:	muleq	r1, ip, r6
   1466c:	muleq	r1, ip, r6
   14670:	muleq	r1, ip, r6
   14674:	muleq	r1, ip, r6
   14678:	muleq	r1, ip, r6
   1467c:	muleq	r1, ip, r6
   14680:	muleq	r1, ip, r6
   14684:	muleq	r1, ip, r6
   14688:	muleq	r1, ip, r6
   1468c:	muleq	r1, ip, r6
   14690:	muleq	r1, ip, r6
   14694:	muleq	r1, ip, r6
   14698:	andeq	r4, r1, r8, lsr #13
   1469c:	cmp	r4, r2
   146a0:	bne	14600 <__assert_fail@plt+0x3474>
   146a4:	b	14594 <__assert_fail@plt+0x3408>
   146a8:	mov	r3, #2
   146ac:	ldr	fp, [sp, #100]	; 0x64
   146b0:	str	r3, [sp, #176]	; 0xb0
   146b4:	ldr	sl, [sp, #104]	; 0x68
   146b8:	b	13b7c <__assert_fail@plt+0x29f0>
   146bc:	ldr	r2, [sp, #52]	; 0x34
   146c0:	mov	fp, r9
   146c4:	ldr	r3, [sp, #60]	; 0x3c
   146c8:	and	r3, r3, r2
   146cc:	str	r3, [sp, #60]	; 0x3c
   146d0:	b	13b7c <__assert_fail@plt+0x29f0>
   146d4:	cmp	sl, r4
   146d8:	movhi	r2, fp
   146dc:	bhi	13a54 <__assert_fail@plt+0x28c8>
   146e0:	mov	r2, r4
   146e4:	b	13a64 <__assert_fail@plt+0x28d8>
   146e8:	mov	r6, r3
   146ec:	mov	r5, #63	; 0x3f
   146f0:	b	13b24 <__assert_fail@plt+0x2998>
   146f4:	ldr	r8, [sp, #36]	; 0x24
   146f8:	ldr	r6, [sp, #100]	; 0x64
   146fc:	b	139d0 <__assert_fail@plt+0x2844>
   14700:	mov	fp, r9
   14704:	ldr	r8, [sp, #36]	; 0x24
   14708:	ldr	r3, [sp, #52]	; 0x34
   1470c:	str	r3, [sp, #60]	; 0x3c
   14710:	b	13b7c <__assert_fail@plt+0x29f0>
   14714:	ldr	r8, [sp, #36]	; 0x24
   14718:	ldr	r6, [sp, #100]	; 0x64
   1471c:	b	13868 <__assert_fail@plt+0x26dc>
   14720:	mov	r3, #0
   14724:	add	r4, r4, #4
   14728:	mov	fp, r2
   1472c:	mov	r6, r3
   14730:	mov	r5, #48	; 0x30
   14734:	b	139c0 <__assert_fail@plt+0x2834>
   14738:	mov	r6, r3
   1473c:	b	141bc <__assert_fail@plt+0x3030>
   14740:	mov	r3, #1
   14744:	movw	r2, #35980	; 0x8c8c
   14748:	movt	r2, #1
   1474c:	mov	r4, r3
   14750:	mov	r9, sl
   14754:	str	r3, [sp, #32]
   14758:	str	sl, [sp, #44]	; 0x2c
   1475c:	str	r3, [sp, #48]	; 0x30
   14760:	str	sl, [sp, #52]	; 0x34
   14764:	str	r3, [sp, #56]	; 0x38
   14768:	str	r3, [sp, #60]	; 0x3c
   1476c:	str	sl, [sp, #64]	; 0x40
   14770:	str	sl, [sp, #68]	; 0x44
   14774:	str	r2, [sp, #72]	; 0x48
   14778:	str	sl, [sp, #80]	; 0x50
   1477c:	str	sl, [sp, #84]	; 0x54
   14780:	str	sl, [sp, #88]	; 0x58
   14784:	b	13274 <__assert_fail@plt+0x20e8>
   14788:	mov	r3, #0
   1478c:	mov	r5, #48	; 0x30
   14790:	mov	r6, r3
   14794:	b	139c0 <__assert_fail@plt+0x2834>
   14798:	cmp	sl, r4
   1479c:	mov	r5, #48	; 0x30
   147a0:	movhi	r3, #48	; 0x30
   147a4:	strbhi	r3, [r9, r4]
   147a8:	add	r3, r2, #2
   147ac:	add	r4, r2, #3
   147b0:	cmp	sl, r3
   147b4:	movhi	r1, #48	; 0x30
   147b8:	strbhi	r1, [r9, r3]
   147bc:	mov	r3, #0
   147c0:	b	13a9c <__assert_fail@plt+0x2910>
   147c4:	ldr	r3, [sp, #48]	; 0x30
   147c8:	str	r3, [sp, #40]	; 0x28
   147cc:	b	140a8 <__assert_fail@plt+0x2f1c>
   147d0:	ldr	r2, [sp, #28]
   147d4:	ldrb	r2, [r2, r3]
   147d8:	sub	r1, r2, #33	; 0x21
   147dc:	cmp	r1, #29
   147e0:	ldrls	pc, [pc, r1, lsl #2]
   147e4:	b	13b20 <__assert_fail@plt+0x2994>
   147e8:	andeq	r4, r1, r0, ror #16
   147ec:	andeq	r3, r1, r0, lsr #22
   147f0:	andeq	r3, r1, r0, lsr #22
   147f4:	andeq	r3, r1, r0, lsr #22
   147f8:	andeq	r3, r1, r0, lsr #22
   147fc:	andeq	r3, r1, r0, lsr #22
   14800:	andeq	r4, r1, r0, ror #16
   14804:	andeq	r4, r1, r0, ror #16
   14808:	andeq	r4, r1, r0, ror #16
   1480c:	andeq	r3, r1, r0, lsr #22
   14810:	andeq	r3, r1, r0, lsr #22
   14814:	andeq	r3, r1, r0, lsr #22
   14818:	andeq	r4, r1, r0, ror #16
   1481c:	andeq	r3, r1, r0, lsr #22
   14820:	andeq	r4, r1, r0, ror #16
   14824:	andeq	r3, r1, r0, lsr #22
   14828:	andeq	r3, r1, r0, lsr #22
   1482c:	andeq	r3, r1, r0, lsr #22
   14830:	andeq	r3, r1, r0, lsr #22
   14834:	andeq	r3, r1, r0, lsr #22
   14838:	andeq	r3, r1, r0, lsr #22
   1483c:	andeq	r3, r1, r0, lsr #22
   14840:	andeq	r3, r1, r0, lsr #22
   14844:	andeq	r3, r1, r0, lsr #22
   14848:	andeq	r3, r1, r0, lsr #22
   1484c:	andeq	r3, r1, r0, lsr #22
   14850:	andeq	r3, r1, r0, lsr #22
   14854:	andeq	r4, r1, r0, ror #16
   14858:	andeq	r4, r1, r0, ror #16
   1485c:	andeq	r4, r1, r0, ror #16
   14860:	ldr	r1, [sp, #44]	; 0x2c
   14864:	cmp	r1, #0
   14868:	bne	14ac8 <__assert_fail@plt+0x393c>
   1486c:	cmp	sl, r4
   14870:	mov	r7, r3
   14874:	movhi	r1, #63	; 0x3f
   14878:	mov	r5, r2
   1487c:	mov	r3, fp
   14880:	strbhi	r1, [r9, r4]
   14884:	add	r1, r4, #1
   14888:	cmp	sl, r1
   1488c:	movhi	r0, #34	; 0x22
   14890:	strbhi	r0, [r9, r1]
   14894:	add	r1, r4, #2
   14898:	cmp	sl, r1
   1489c:	movhi	r0, #34	; 0x22
   148a0:	strbhi	r0, [r9, r1]
   148a4:	add	r1, r4, #3
   148a8:	add	r4, r4, #4
   148ac:	cmp	sl, r1
   148b0:	movhi	r0, #63	; 0x3f
   148b4:	strbhi	r0, [r9, r1]
   148b8:	b	13a9c <__assert_fail@plt+0x2910>
   148bc:	mov	fp, r9
   148c0:	b	13b7c <__assert_fail@plt+0x29f0>
   148c4:	ldr	r3, [sp, #188]	; 0xbc
   148c8:	ldrb	r3, [r3]
   148cc:	cmp	r3, #0
   148d0:	beq	1320c <__assert_fail@plt+0x2080>
   148d4:	ldr	r2, [sp, #188]	; 0xbc
   148d8:	cmp	sl, r4
   148dc:	bls	148fc <__assert_fail@plt+0x3770>
   148e0:	strb	r3, [fp, r4]
   148e4:	add	r4, r4, #1
   148e8:	ldrb	r3, [r2, #1]!
   148ec:	cmp	r3, #0
   148f0:	beq	1320c <__assert_fail@plt+0x2080>
   148f4:	cmp	sl, r4
   148f8:	bhi	148e0 <__assert_fail@plt+0x3754>
   148fc:	ldrb	r3, [r2, #1]!
   14900:	add	r4, r4, #1
   14904:	cmp	r3, #0
   14908:	bne	148d8 <__assert_fail@plt+0x374c>
   1490c:	b	1320c <__assert_fail@plt+0x2080>
   14910:	add	r9, sp, #100	; 0x64
   14914:	mov	r0, r5
   14918:	ldr	r2, [sp, #60]	; 0x3c
   1491c:	mov	r6, #0
   14920:	ldm	r9, {r9, sl, fp}
   14924:	ldr	r5, [sp, #112]	; 0x70
   14928:	ldr	r4, [sp, #116]	; 0x74
   1492c:	b	145dc <__assert_fail@plt+0x3450>
   14930:	cmp	r4, r8
   14934:	add	r9, sp, #100	; 0x64
   14938:	mov	r1, r4
   1493c:	mov	r2, fp
   14940:	ldm	r9, {r9, sl, fp}
   14944:	mov	r3, r5
   14948:	mov	r0, r5
   1494c:	ldr	r5, [sp, #112]	; 0x70
   14950:	ldr	r4, [sp, #116]	; 0x74
   14954:	bcs	14988 <__assert_fail@plt+0x37fc>
   14958:	ldrb	r6, [r2]
   1495c:	cmp	r6, #0
   14960:	bne	14974 <__assert_fail@plt+0x37e8>
   14964:	b	14ac0 <__assert_fail@plt+0x3934>
   14968:	ldrb	r6, [r2, #1]!
   1496c:	cmp	r6, #0
   14970:	beq	14a58 <__assert_fail@plt+0x38cc>
   14974:	add	r3, r3, #1
   14978:	add	r1, r7, r3
   1497c:	cmp	r8, r1
   14980:	bhi	14968 <__assert_fail@plt+0x37dc>
   14984:	mov	r0, r3
   14988:	mov	r6, #0
   1498c:	ldr	r2, [sp, #60]	; 0x3c
   14990:	b	145dc <__assert_fail@plt+0x3450>
   14994:	mov	r3, #1
   14998:	mov	r4, #0
   1499c:	mov	r9, r4
   149a0:	str	r3, [sp, #32]
   149a4:	str	r3, [sp, #44]	; 0x2c
   149a8:	str	r3, [sp, #48]	; 0x30
   149ac:	str	r4, [sp, #52]	; 0x34
   149b0:	str	r3, [sp, #56]	; 0x38
   149b4:	str	r3, [sp, #60]	; 0x3c
   149b8:	str	r3, [sp, #88]	; 0x58
   149bc:	movw	r3, #35980	; 0x8c8c
   149c0:	movt	r3, #1
   149c4:	str	r4, [sp, #64]	; 0x40
   149c8:	str	r4, [sp, #68]	; 0x44
   149cc:	str	r3, [sp, #72]	; 0x48
   149d0:	str	r4, [sp, #80]	; 0x50
   149d4:	str	r4, [sp, #84]	; 0x54
   149d8:	b	13274 <__assert_fail@plt+0x20e8>
   149dc:	mov	fp, r9
   149e0:	b	13b90 <__assert_fail@plt+0x2a04>
   149e4:	ldr	r3, [sp, #48]	; 0x30
   149e8:	b	14504 <__assert_fail@plt+0x3378>
   149ec:	mov	r2, r3
   149f0:	ldr	r3, [sp, #72]	; 0x48
   149f4:	cmp	r3, #0
   149f8:	moveq	r2, #0
   149fc:	andne	r2, r2, #1
   14a00:	cmp	r2, #0
   14a04:	beq	14a34 <__assert_fail@plt+0x38a8>
   14a08:	mov	r2, r3
   14a0c:	ldrb	r3, [r3]
   14a10:	cmp	r3, #0
   14a14:	beq	14a34 <__assert_fail@plt+0x38a8>
   14a18:	cmp	sl, r4
   14a1c:	bls	14a44 <__assert_fail@plt+0x38b8>
   14a20:	strb	r3, [fp, r4]
   14a24:	add	r4, r4, #1
   14a28:	ldrb	r3, [r2, #1]!
   14a2c:	cmp	r3, #0
   14a30:	bne	14a18 <__assert_fail@plt+0x388c>
   14a34:	cmp	sl, r4
   14a38:	movhi	r3, #0
   14a3c:	strbhi	r3, [fp, r4]
   14a40:	b	13bcc <__assert_fail@plt+0x2a40>
   14a44:	ldrb	r3, [r2, #1]!
   14a48:	add	r4, r4, #1
   14a4c:	cmp	r3, #0
   14a50:	bne	14a18 <__assert_fail@plt+0x388c>
   14a54:	b	14a34 <__assert_fail@plt+0x38a8>
   14a58:	mov	r0, r3
   14a5c:	ldr	r2, [sp, #60]	; 0x3c
   14a60:	b	145dc <__assert_fail@plt+0x3450>
   14a64:	mov	ip, #5
   14a68:	mov	r3, r8
   14a6c:	ldr	r1, [sp, #84]	; 0x54
   14a70:	str	ip, [sp]
   14a74:	ldr	r2, [sp, #180]	; 0xb4
   14a78:	ldr	ip, [sp, #188]	; 0xbc
   14a7c:	ldr	r0, [sp, #184]	; 0xb8
   14a80:	str	r2, [sp, #4]
   14a84:	ldr	r2, [sp, #28]
   14a88:	str	ip, [sp, #12]
   14a8c:	ldr	ip, [sp, #192]	; 0xc0
   14a90:	str	r0, [sp, #8]
   14a94:	mov	r0, fp
   14a98:	str	ip, [sp, #16]
   14a9c:	bl	13150 <__assert_fail@plt+0x1fc4>
   14aa0:	mov	r4, r0
   14aa4:	b	13bcc <__assert_fail@plt+0x2a40>
   14aa8:	mov	r6, r3
   14aac:	str	r3, [sp, #40]	; 0x28
   14ab0:	b	13b3c <__assert_fail@plt+0x29b0>
   14ab4:	mov	r3, #2
   14ab8:	str	r3, [sp, #176]	; 0xb0
   14abc:	b	13b7c <__assert_fail@plt+0x29f0>
   14ac0:	ldr	r2, [sp, #60]	; 0x3c
   14ac4:	b	145dc <__assert_fail@plt+0x3450>
   14ac8:	mov	r3, #5
   14acc:	mov	fp, r9
   14ad0:	str	r3, [sp, #176]	; 0xb0
   14ad4:	b	13b90 <__assert_fail@plt+0x2a04>
   14ad8:	mov	r1, #1
   14adc:	mov	r9, #0
   14ae0:	mov	r3, r9
   14ae4:	mov	r2, r9
   14ae8:	str	r1, [sp, #32]
   14aec:	str	sl, [sp, #84]	; 0x54
   14af0:	b	13918 <__assert_fail@plt+0x278c>
   14af4:	mov	r3, #0
   14af8:	mov	r2, #1
   14afc:	mov	r9, r3
   14b00:	mov	r4, r3
   14b04:	str	r2, [sp, #32]
   14b08:	strd	r2, [sp, #44]	; 0x2c
   14b0c:	strd	r2, [sp, #56]	; 0x38
   14b10:	str	r3, [sp, #80]	; 0x50
   14b14:	str	r3, [sp, #84]	; 0x54
   14b18:	str	r3, [sp, #88]	; 0x58
   14b1c:	movw	r3, #36000	; 0x8ca0
   14b20:	movt	r3, #1
   14b24:	str	r2, [sp, #52]	; 0x34
   14b28:	str	r2, [sp, #64]	; 0x40
   14b2c:	str	r2, [sp, #68]	; 0x44
   14b30:	str	r3, [sp, #72]	; 0x48
   14b34:	b	13274 <__assert_fail@plt+0x20e8>
   14b38:	bl	11174 <abort@plt>
   14b3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b40:	mov	r4, r0
   14b44:	mov	r5, r3
   14b48:	strd	r6, [sp, #8]
   14b4c:	movw	r7, #41256	; 0xa128
   14b50:	movt	r7, #2
   14b54:	strd	r8, [sp, #16]
   14b58:	strd	sl, [sp, #24]
   14b5c:	mov	sl, r1
   14b60:	mov	fp, r2
   14b64:	str	lr, [sp, #32]
   14b68:	sub	sp, sp, #60	; 0x3c
   14b6c:	bl	11090 <__errno_location@plt>
   14b70:	mov	r8, r0
   14b74:	cmn	r4, #-2147483647	; 0x80000001
   14b78:	ldr	r6, [r7]
   14b7c:	movne	r0, #0
   14b80:	moveq	r0, #1
   14b84:	ldr	r3, [r8]
   14b88:	orrs	r0, r0, r4, lsr #31
   14b8c:	str	r3, [sp, #28]
   14b90:	bne	14d20 <__assert_fail@plt+0x3b94>
   14b94:	ldr	r3, [r7, #4]
   14b98:	cmp	r3, r4
   14b9c:	bgt	14bfc <__assert_fail@plt+0x3a70>
   14ba0:	add	r1, r7, #8
   14ba4:	sub	r2, r4, r3
   14ba8:	str	r3, [sp, #52]	; 0x34
   14bac:	cmp	r6, r1
   14bb0:	add	r2, r2, #1
   14bb4:	beq	14cf8 <__assert_fail@plt+0x3b6c>
   14bb8:	mov	r1, #8
   14bbc:	mov	r0, r6
   14bc0:	mvn	r3, #-2147483648	; 0x80000000
   14bc4:	str	r1, [sp]
   14bc8:	add	r1, sp, #52	; 0x34
   14bcc:	bl	17770 <__assert_fail@plt+0x65e4>
   14bd0:	mov	r6, r0
   14bd4:	str	r0, [r7]
   14bd8:	ldr	r0, [r7, #4]
   14bdc:	mov	r1, #0
   14be0:	ldr	r2, [sp, #52]	; 0x34
   14be4:	sub	r2, r2, r0
   14be8:	add	r0, r6, r0, lsl #3
   14bec:	lsl	r2, r2, #3
   14bf0:	bl	110b4 <memset@plt>
   14bf4:	ldr	r3, [sp, #52]	; 0x34
   14bf8:	str	r3, [r7, #4]
   14bfc:	ldr	r1, [r5, #4]
   14c00:	add	r0, r6, r4, lsl #3
   14c04:	add	ip, r5, #8
   14c08:	mov	r3, fp
   14c0c:	mov	r2, sl
   14c10:	ldr	r7, [r0, #4]
   14c14:	str	r0, [sp, #36]	; 0x24
   14c18:	str	ip, [sp, #40]	; 0x28
   14c1c:	orr	r0, r1, #1
   14c20:	ldr	r9, [r6, r4, lsl #3]
   14c24:	str	ip, [sp, #8]
   14c28:	ldr	lr, [r5, #44]	; 0x2c
   14c2c:	str	r0, [sp, #4]
   14c30:	ldr	ip, [r5]
   14c34:	mov	r1, r9
   14c38:	str	ip, [sp, #32]
   14c3c:	ldr	ip, [r5, #40]	; 0x28
   14c40:	str	ip, [sp, #12]
   14c44:	ldr	ip, [sp, #32]
   14c48:	str	lr, [sp, #16]
   14c4c:	str	r0, [sp, #44]	; 0x2c
   14c50:	mov	r0, r7
   14c54:	str	ip, [sp]
   14c58:	bl	13150 <__assert_fail@plt+0x1fc4>
   14c5c:	cmp	r9, r0
   14c60:	bhi	14cd0 <__assert_fail@plt+0x3b44>
   14c64:	add	r9, r0, #1
   14c68:	movw	r3, #41488	; 0xa210
   14c6c:	movt	r3, #2
   14c70:	cmp	r7, r3
   14c74:	str	r9, [r6, r4, lsl #3]
   14c78:	beq	14c84 <__assert_fail@plt+0x3af8>
   14c7c:	mov	r0, r7
   14c80:	bl	12d94 <__assert_fail@plt+0x1c08>
   14c84:	mov	r0, r9
   14c88:	bl	174cc <__assert_fail@plt+0x6340>
   14c8c:	ldr	ip, [r5]
   14c90:	mov	r3, fp
   14c94:	mov	r2, sl
   14c98:	mov	r1, r9
   14c9c:	mov	r7, r0
   14ca0:	ldr	lr, [sp, #36]	; 0x24
   14ca4:	ldr	r4, [r5, #40]	; 0x28
   14ca8:	str	r0, [lr, #4]
   14cac:	ldr	lr, [r5, #44]	; 0x2c
   14cb0:	str	ip, [sp]
   14cb4:	ldr	ip, [sp, #44]	; 0x2c
   14cb8:	str	ip, [sp, #4]
   14cbc:	ldr	ip, [sp, #40]	; 0x28
   14cc0:	str	r4, [sp, #12]
   14cc4:	str	lr, [sp, #16]
   14cc8:	str	ip, [sp, #8]
   14ccc:	bl	13150 <__assert_fail@plt+0x1fc4>
   14cd0:	ldr	r3, [sp, #28]
   14cd4:	mov	r0, r7
   14cd8:	str	r3, [r8]
   14cdc:	add	sp, sp, #60	; 0x3c
   14ce0:	ldrd	r4, [sp]
   14ce4:	ldrd	r6, [sp, #8]
   14ce8:	ldrd	r8, [sp, #16]
   14cec:	ldrd	sl, [sp, #24]
   14cf0:	add	sp, sp, #32
   14cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf8:	mov	r1, #8
   14cfc:	mvn	r3, #-2147483648	; 0x80000000
   14d00:	str	r1, [sp]
   14d04:	add	r1, sp, #52	; 0x34
   14d08:	bl	17770 <__assert_fail@plt+0x65e4>
   14d0c:	ldrd	r2, [r7, #8]
   14d10:	mov	r6, r0
   14d14:	str	r0, [r7]
   14d18:	strd	r2, [r0]
   14d1c:	b	14bd8 <__assert_fail@plt+0x3a4c>
   14d20:	bl	11174 <abort@plt>
   14d24:	strd	r4, [sp, #-16]!
   14d28:	mov	r5, r0
   14d2c:	str	r6, [sp, #8]
   14d30:	str	lr, [sp, #12]
   14d34:	bl	11090 <__errno_location@plt>
   14d38:	mov	r4, r0
   14d3c:	cmp	r5, #0
   14d40:	ldr	r0, [pc, #32]	; 14d68 <__assert_fail@plt+0x3bdc>
   14d44:	mov	r1, #48	; 0x30
   14d48:	movne	r0, r5
   14d4c:	ldr	r6, [r4]
   14d50:	bl	17910 <__assert_fail@plt+0x6784>
   14d54:	str	r6, [r4]
   14d58:	ldrd	r4, [sp]
   14d5c:	ldr	r6, [sp, #8]
   14d60:	add	sp, sp, #12
   14d64:	pop	{pc}		; (ldr pc, [sp], #4)
   14d68:	andeq	sl, r2, r0, lsl r3
   14d6c:	ldr	r3, [pc, #12]	; 14d80 <__assert_fail@plt+0x3bf4>
   14d70:	cmp	r0, #0
   14d74:	moveq	r0, r3
   14d78:	ldr	r0, [r0]
   14d7c:	bx	lr
   14d80:	andeq	sl, r2, r0, lsl r3
   14d84:	ldr	r3, [pc, #12]	; 14d98 <__assert_fail@plt+0x3c0c>
   14d88:	cmp	r0, #0
   14d8c:	moveq	r0, r3
   14d90:	str	r1, [r0]
   14d94:	bx	lr
   14d98:	andeq	sl, r2, r0, lsl r3
   14d9c:	ldr	r3, [pc, #52]	; 14dd8 <__assert_fail@plt+0x3c4c>
   14da0:	cmp	r0, #0
   14da4:	push	{lr}		; (str lr, [sp, #-4]!)
   14da8:	lsr	lr, r1, #5
   14dac:	and	r1, r1, #31
   14db0:	moveq	r0, r3
   14db4:	add	r3, r0, #8
   14db8:	ldr	ip, [r3, lr, lsl #2]
   14dbc:	lsr	r0, ip, r1
   14dc0:	eor	r2, r2, r0
   14dc4:	and	r0, r0, #1
   14dc8:	and	r2, r2, #1
   14dcc:	eor	r1, ip, r2, lsl r1
   14dd0:	str	r1, [r3, lr, lsl #2]
   14dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14dd8:	andeq	sl, r2, r0, lsl r3
   14ddc:	ldr	r3, [pc, #16]	; 14df4 <__assert_fail@plt+0x3c68>
   14de0:	cmp	r0, #0
   14de4:	movne	r3, r0
   14de8:	ldr	r0, [r3, #4]
   14dec:	str	r1, [r3, #4]
   14df0:	bx	lr
   14df4:	andeq	sl, r2, r0, lsl r3
   14df8:	ldr	r3, [pc, #48]	; 14e30 <__assert_fail@plt+0x3ca4>
   14dfc:	cmp	r0, #0
   14e00:	mov	ip, #10
   14e04:	moveq	r0, r3
   14e08:	cmp	r2, #0
   14e0c:	cmpne	r1, #0
   14e10:	str	ip, [r0]
   14e14:	beq	14e24 <__assert_fail@plt+0x3c98>
   14e18:	str	r1, [r0, #40]	; 0x28
   14e1c:	str	r2, [r0, #44]	; 0x2c
   14e20:	bx	lr
   14e24:	str	r4, [sp, #-8]!
   14e28:	str	lr, [sp, #4]
   14e2c:	bl	11174 <abort@plt>
   14e30:	andeq	sl, r2, r0, lsl r3
   14e34:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14e38:	strd	r6, [sp, #8]
   14e3c:	mov	r7, r0
   14e40:	mov	r6, r1
   14e44:	strd	r8, [sp, #16]
   14e48:	mov	r8, r2
   14e4c:	mov	r9, r3
   14e50:	str	lr, [sp, #24]
   14e54:	sub	sp, sp, #28
   14e58:	ldr	r4, [sp, #56]	; 0x38
   14e5c:	ldr	ip, [pc, #104]	; 14ecc <__assert_fail@plt+0x3d40>
   14e60:	cmp	r4, #0
   14e64:	moveq	r4, ip
   14e68:	bl	11090 <__errno_location@plt>
   14e6c:	ldr	ip, [r4, #44]	; 0x2c
   14e70:	mov	r5, r0
   14e74:	mov	r1, r6
   14e78:	add	lr, r4, #8
   14e7c:	mov	r3, r9
   14e80:	ldr	r6, [r5]
   14e84:	mov	r2, r8
   14e88:	mov	r0, r7
   14e8c:	str	ip, [sp, #16]
   14e90:	ldr	ip, [r4, #40]	; 0x28
   14e94:	str	lr, [sp, #8]
   14e98:	str	ip, [sp, #12]
   14e9c:	ldr	ip, [r4, #4]
   14ea0:	str	ip, [sp, #4]
   14ea4:	ldr	ip, [r4]
   14ea8:	str	ip, [sp]
   14eac:	bl	13150 <__assert_fail@plt+0x1fc4>
   14eb0:	str	r6, [r5]
   14eb4:	add	sp, sp, #28
   14eb8:	ldrd	r4, [sp]
   14ebc:	ldrd	r6, [sp, #8]
   14ec0:	ldrd	r8, [sp, #16]
   14ec4:	add	sp, sp, #24
   14ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ecc:	andeq	sl, r2, r0, lsl r3
   14ed0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14ed4:	cmp	r2, #0
   14ed8:	ldr	r4, [pc, #192]	; 14fa0 <__assert_fail@plt+0x3e14>
   14edc:	movne	r4, r2
   14ee0:	strd	r6, [sp, #8]
   14ee4:	strd	r8, [sp, #16]
   14ee8:	mov	r9, r1
   14eec:	mov	r8, r0
   14ef0:	strd	sl, [sp, #24]
   14ef4:	str	lr, [sp, #32]
   14ef8:	sub	sp, sp, #36	; 0x24
   14efc:	bl	11090 <__errno_location@plt>
   14f00:	ldr	r5, [r4, #4]
   14f04:	mov	r6, r0
   14f08:	add	r7, r4, #8
   14f0c:	mov	r1, #0
   14f10:	mov	r3, r9
   14f14:	ldr	ip, [r4, #44]	; 0x2c
   14f18:	mov	r2, r8
   14f1c:	mov	r0, r1
   14f20:	ldr	sl, [r6]
   14f24:	orr	r5, r5, #1
   14f28:	str	ip, [sp, #16]
   14f2c:	ldr	ip, [r4, #40]	; 0x28
   14f30:	stmib	sp, {r5, r7, ip}
   14f34:	ldr	ip, [r4]
   14f38:	str	ip, [sp]
   14f3c:	bl	13150 <__assert_fail@plt+0x1fc4>
   14f40:	add	r1, r0, #1
   14f44:	mov	r0, r1
   14f48:	str	r1, [sp, #28]
   14f4c:	bl	174cc <__assert_fail@plt+0x6340>
   14f50:	ldr	ip, [r4, #44]	; 0x2c
   14f54:	mov	fp, r0
   14f58:	mov	r3, r9
   14f5c:	mov	r2, r8
   14f60:	ldr	r1, [sp, #28]
   14f64:	str	ip, [sp, #16]
   14f68:	ldr	ip, [r4, #40]	; 0x28
   14f6c:	stmib	sp, {r5, r7, ip}
   14f70:	ldr	ip, [r4]
   14f74:	str	ip, [sp]
   14f78:	bl	13150 <__assert_fail@plt+0x1fc4>
   14f7c:	mov	r0, fp
   14f80:	str	sl, [r6]
   14f84:	add	sp, sp, #36	; 0x24
   14f88:	ldrd	r4, [sp]
   14f8c:	ldrd	r6, [sp, #8]
   14f90:	ldrd	r8, [sp, #16]
   14f94:	ldrd	sl, [sp, #24]
   14f98:	add	sp, sp, #32
   14f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa0:	andeq	sl, r2, r0, lsl r3
   14fa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14fa8:	cmp	r3, #0
   14fac:	ldr	r4, [pc, #220]	; 15090 <__assert_fail@plt+0x3f04>
   14fb0:	movne	r4, r3
   14fb4:	strd	r6, [sp, #8]
   14fb8:	mov	r6, r2
   14fbc:	strd	r8, [sp, #16]
   14fc0:	mov	r9, r0
   14fc4:	strd	sl, [sp, #24]
   14fc8:	mov	sl, r1
   14fcc:	str	lr, [sp, #32]
   14fd0:	sub	sp, sp, #44	; 0x2c
   14fd4:	bl	11090 <__errno_location@plt>
   14fd8:	ldr	r5, [r4, #4]
   14fdc:	mov	r7, r0
   14fe0:	mov	r1, #0
   14fe4:	add	r8, r4, #8
   14fe8:	mov	r3, sl
   14fec:	ldr	ip, [r4, #44]	; 0x2c
   14ff0:	mov	r2, r9
   14ff4:	mov	r0, r1
   14ff8:	ldr	lr, [r7]
   14ffc:	cmp	r6, r1
   15000:	orreq	r5, r5, #1
   15004:	str	ip, [sp, #16]
   15008:	ldr	ip, [r4, #40]	; 0x28
   1500c:	stmib	sp, {r5, r8, ip}
   15010:	ldr	ip, [r4]
   15014:	str	lr, [sp, #28]
   15018:	str	ip, [sp]
   1501c:	bl	13150 <__assert_fail@plt+0x1fc4>
   15020:	add	r1, r0, #1
   15024:	mov	fp, r0
   15028:	mov	r0, r1
   1502c:	str	r1, [sp, #36]	; 0x24
   15030:	bl	174cc <__assert_fail@plt+0x6340>
   15034:	ldr	ip, [r4, #44]	; 0x2c
   15038:	mov	r3, sl
   1503c:	mov	r2, r9
   15040:	ldr	r1, [sp, #36]	; 0x24
   15044:	str	ip, [sp, #16]
   15048:	ldr	ip, [r4, #40]	; 0x28
   1504c:	str	r0, [sp, #32]
   15050:	stmib	sp, {r5, r8, ip}
   15054:	ldr	ip, [r4]
   15058:	str	ip, [sp]
   1505c:	bl	13150 <__assert_fail@plt+0x1fc4>
   15060:	ldr	lr, [sp, #28]
   15064:	cmp	r6, #0
   15068:	ldr	r0, [sp, #32]
   1506c:	str	lr, [r7]
   15070:	strne	fp, [r6]
   15074:	add	sp, sp, #44	; 0x2c
   15078:	ldrd	r4, [sp]
   1507c:	ldrd	r6, [sp, #8]
   15080:	ldrd	r8, [sp, #16]
   15084:	ldrd	sl, [sp, #24]
   15088:	add	sp, sp, #32
   1508c:	pop	{pc}		; (ldr pc, [sp], #4)
   15090:	andeq	sl, r2, r0, lsl r3
   15094:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15098:	movw	r5, #41256	; 0xa128
   1509c:	movt	r5, #2
   150a0:	ldr	r3, [r5, #4]
   150a4:	strd	r6, [sp, #8]
   150a8:	str	r8, [sp, #16]
   150ac:	str	lr, [sp, #20]
   150b0:	ldr	r7, [r5]
   150b4:	cmp	r3, #1
   150b8:	ble	150dc <__assert_fail@plt+0x3f50>
   150bc:	mov	r4, #1
   150c0:	add	r6, r7, #4
   150c4:	ldr	r0, [r6, r4, lsl #3]
   150c8:	add	r4, r4, #1
   150cc:	bl	12d94 <__assert_fail@plt+0x1c08>
   150d0:	ldr	r3, [r5, #4]
   150d4:	cmp	r3, r4
   150d8:	bgt	150c4 <__assert_fail@plt+0x3f38>
   150dc:	ldr	r0, [r7, #4]
   150e0:	movw	r4, #41488	; 0xa210
   150e4:	movt	r4, #2
   150e8:	cmp	r0, r4
   150ec:	beq	15100 <__assert_fail@plt+0x3f74>
   150f0:	bl	12d94 <__assert_fail@plt+0x1c08>
   150f4:	mov	r3, #256	; 0x100
   150f8:	str	r3, [r5, #8]
   150fc:	str	r4, [r5, #12]
   15100:	ldr	r4, [pc, #44]	; 15134 <__assert_fail@plt+0x3fa8>
   15104:	cmp	r7, r4
   15108:	beq	15118 <__assert_fail@plt+0x3f8c>
   1510c:	mov	r0, r7
   15110:	bl	12d94 <__assert_fail@plt+0x1c08>
   15114:	str	r4, [r5]
   15118:	mov	r3, #1
   1511c:	ldrd	r6, [sp, #8]
   15120:	str	r3, [r5, #4]
   15124:	ldrd	r4, [sp]
   15128:	ldr	r8, [sp, #16]
   1512c:	add	sp, sp, #20
   15130:	pop	{pc}		; (ldr pc, [sp], #4)
   15134:	andeq	sl, r2, r0, lsr r1
   15138:	ldr	r3, [pc, #4]	; 15144 <__assert_fail@plt+0x3fb8>
   1513c:	mvn	r2, #0
   15140:	b	14b3c <__assert_fail@plt+0x39b0>
   15144:	andeq	sl, r2, r0, lsl r3
   15148:	ldr	r3, [pc]	; 15150 <__assert_fail@plt+0x3fc4>
   1514c:	b	14b3c <__assert_fail@plt+0x39b0>
   15150:	andeq	sl, r2, r0, lsl r3
   15154:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15158:	movw	r4, #41256	; 0xa128
   1515c:	movt	r4, #2
   15160:	strd	r6, [sp, #8]
   15164:	strd	r8, [sp, #16]
   15168:	strd	sl, [sp, #24]
   1516c:	mov	sl, r0
   15170:	str	lr, [sp, #32]
   15174:	sub	sp, sp, #44	; 0x2c
   15178:	bl	11090 <__errno_location@plt>
   1517c:	ldr	r3, [r0]
   15180:	mov	r8, r0
   15184:	ldr	r2, [r4, #4]
   15188:	ldr	r5, [r4]
   1518c:	str	r3, [sp, #28]
   15190:	cmp	r2, #0
   15194:	bgt	151f0 <__assert_fail@plt+0x4064>
   15198:	add	r3, r4, #8
   1519c:	str	r2, [sp, #36]	; 0x24
   151a0:	rsb	r2, r2, #1
   151a4:	cmp	r5, r3
   151a8:	beq	152bc <__assert_fail@plt+0x4130>
   151ac:	mov	r1, #8
   151b0:	mov	r0, r5
   151b4:	mvn	r3, #-2147483648	; 0x80000000
   151b8:	str	r1, [sp]
   151bc:	add	r1, sp, #36	; 0x24
   151c0:	bl	17770 <__assert_fail@plt+0x65e4>
   151c4:	mov	r5, r0
   151c8:	str	r0, [r4]
   151cc:	ldr	r0, [r4, #4]
   151d0:	mov	r1, #0
   151d4:	ldr	r2, [sp, #36]	; 0x24
   151d8:	sub	r2, r2, r0
   151dc:	add	r0, r5, r0, lsl #3
   151e0:	lsl	r2, r2, #3
   151e4:	bl	110b4 <memset@plt>
   151e8:	ldr	r3, [sp, #36]	; 0x24
   151ec:	str	r3, [r4, #4]
   151f0:	movw	r4, #41488	; 0xa210
   151f4:	movt	r4, #2
   151f8:	ldr	r9, [r5]
   151fc:	add	fp, r4, #264	; 0x108
   15200:	mvn	r3, #0
   15204:	ldr	r7, [r4, #260]	; 0x104
   15208:	mov	r2, sl
   1520c:	ldr	r6, [r5, #4]
   15210:	str	fp, [sp, #8]
   15214:	mov	r1, r9
   15218:	ldr	ip, [r4, #256]	; 0x100
   1521c:	orr	r7, r7, #1
   15220:	ldr	lr, [r4, #300]	; 0x12c
   15224:	mov	r0, r6
   15228:	str	ip, [sp]
   1522c:	str	r7, [sp, #4]
   15230:	str	lr, [sp, #16]
   15234:	ldr	ip, [r4, #296]	; 0x128
   15238:	str	ip, [sp, #12]
   1523c:	bl	13150 <__assert_fail@plt+0x1fc4>
   15240:	cmp	r9, r0
   15244:	bhi	15294 <__assert_fail@plt+0x4108>
   15248:	add	r9, r0, #1
   1524c:	cmp	r6, r4
   15250:	str	r9, [r5]
   15254:	beq	15260 <__assert_fail@plt+0x40d4>
   15258:	mov	r0, r6
   1525c:	bl	12d94 <__assert_fail@plt+0x1c08>
   15260:	mov	r0, r9
   15264:	bl	174cc <__assert_fail@plt+0x6340>
   15268:	ldr	r3, [r4, #256]	; 0x100
   1526c:	mov	r2, sl
   15270:	mov	r1, r9
   15274:	mov	r6, r0
   15278:	ldr	lr, [r4, #296]	; 0x128
   1527c:	ldr	ip, [r4, #300]	; 0x12c
   15280:	str	r0, [r5, #4]
   15284:	stm	sp, {r3, r7, fp, lr}
   15288:	mvn	r3, #0
   1528c:	str	ip, [sp, #16]
   15290:	bl	13150 <__assert_fail@plt+0x1fc4>
   15294:	ldr	r3, [sp, #28]
   15298:	mov	r0, r6
   1529c:	str	r3, [r8]
   152a0:	add	sp, sp, #44	; 0x2c
   152a4:	ldrd	r4, [sp]
   152a8:	ldrd	r6, [sp, #8]
   152ac:	ldrd	r8, [sp, #16]
   152b0:	ldrd	sl, [sp, #24]
   152b4:	add	sp, sp, #32
   152b8:	pop	{pc}		; (ldr pc, [sp], #4)
   152bc:	mov	r0, #8
   152c0:	mvn	r3, #-2147483648	; 0x80000000
   152c4:	add	r1, sp, #36	; 0x24
   152c8:	str	r0, [sp]
   152cc:	mov	r0, #0
   152d0:	bl	17770 <__assert_fail@plt+0x65e4>
   152d4:	ldrd	r2, [r4, #8]
   152d8:	mov	r5, r0
   152dc:	str	r0, [r4]
   152e0:	strd	r2, [r0]
   152e4:	b	151cc <__assert_fail@plt+0x4040>
   152e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152ec:	movw	r4, #41256	; 0xa128
   152f0:	movt	r4, #2
   152f4:	strd	r6, [sp, #8]
   152f8:	strd	r8, [sp, #16]
   152fc:	strd	sl, [sp, #24]
   15300:	mov	sl, r0
   15304:	mov	fp, r1
   15308:	str	lr, [sp, #32]
   1530c:	sub	sp, sp, #44	; 0x2c
   15310:	bl	11090 <__errno_location@plt>
   15314:	ldr	r3, [r0]
   15318:	mov	r8, r0
   1531c:	ldr	r2, [r4, #4]
   15320:	ldr	r5, [r4]
   15324:	str	r3, [sp, #28]
   15328:	cmp	r2, #0
   1532c:	bgt	15388 <__assert_fail@plt+0x41fc>
   15330:	add	r3, r4, #8
   15334:	str	r2, [sp, #36]	; 0x24
   15338:	rsb	r2, r2, #1
   1533c:	cmp	r5, r3
   15340:	beq	15464 <__assert_fail@plt+0x42d8>
   15344:	mov	r1, #8
   15348:	mov	r0, r5
   1534c:	mvn	r3, #-2147483648	; 0x80000000
   15350:	str	r1, [sp]
   15354:	add	r1, sp, #36	; 0x24
   15358:	bl	17770 <__assert_fail@plt+0x65e4>
   1535c:	mov	r5, r0
   15360:	str	r0, [r4]
   15364:	ldr	r0, [r4, #4]
   15368:	mov	r1, #0
   1536c:	ldr	r2, [sp, #36]	; 0x24
   15370:	sub	r2, r2, r0
   15374:	add	r0, r5, r0, lsl #3
   15378:	lsl	r2, r2, #3
   1537c:	bl	110b4 <memset@plt>
   15380:	ldr	r3, [sp, #36]	; 0x24
   15384:	str	r3, [r4, #4]
   15388:	movw	r4, #41488	; 0xa210
   1538c:	movt	r4, #2
   15390:	ldr	r9, [r5]
   15394:	add	r0, r4, #264	; 0x108
   15398:	mov	r3, fp
   1539c:	ldr	r7, [r4, #260]	; 0x104
   153a0:	mov	r2, sl
   153a4:	ldr	r6, [r5, #4]
   153a8:	str	r0, [sp, #8]
   153ac:	mov	r1, r9
   153b0:	ldr	ip, [r4, #256]	; 0x100
   153b4:	orr	r7, r7, #1
   153b8:	ldr	lr, [r4, #300]	; 0x12c
   153bc:	mov	r0, r6
   153c0:	str	ip, [sp]
   153c4:	str	r7, [sp, #4]
   153c8:	str	lr, [sp, #16]
   153cc:	ldr	ip, [r4, #296]	; 0x128
   153d0:	str	ip, [sp, #12]
   153d4:	bl	13150 <__assert_fail@plt+0x1fc4>
   153d8:	cmp	r9, r0
   153dc:	bhi	1543c <__assert_fail@plt+0x42b0>
   153e0:	add	r9, r0, #1
   153e4:	cmp	r6, r4
   153e8:	str	r9, [r5]
   153ec:	beq	153f8 <__assert_fail@plt+0x426c>
   153f0:	mov	r0, r6
   153f4:	bl	12d94 <__assert_fail@plt+0x1c08>
   153f8:	mov	r0, r9
   153fc:	bl	174cc <__assert_fail@plt+0x6340>
   15400:	ldr	ip, [r4, #256]	; 0x100
   15404:	mov	r1, r9
   15408:	mov	r3, fp
   1540c:	mov	r2, sl
   15410:	mov	r6, r0
   15414:	ldr	r9, [r4, #296]	; 0x128
   15418:	ldr	lr, [r4, #300]	; 0x12c
   1541c:	str	r0, [r5, #4]
   15420:	str	ip, [sp]
   15424:	ldr	ip, [pc, #100]	; 15490 <__assert_fail@plt+0x4304>
   15428:	str	r7, [sp, #4]
   1542c:	str	ip, [sp, #8]
   15430:	str	r9, [sp, #12]
   15434:	str	lr, [sp, #16]
   15438:	bl	13150 <__assert_fail@plt+0x1fc4>
   1543c:	ldr	r3, [sp, #28]
   15440:	mov	r0, r6
   15444:	str	r3, [r8]
   15448:	add	sp, sp, #44	; 0x2c
   1544c:	ldrd	r4, [sp]
   15450:	ldrd	r6, [sp, #8]
   15454:	ldrd	r8, [sp, #16]
   15458:	ldrd	sl, [sp, #24]
   1545c:	add	sp, sp, #32
   15460:	pop	{pc}		; (ldr pc, [sp], #4)
   15464:	mov	r0, #8
   15468:	mvn	r3, #-2147483648	; 0x80000000
   1546c:	add	r1, sp, #36	; 0x24
   15470:	str	r0, [sp]
   15474:	mov	r0, #0
   15478:	bl	17770 <__assert_fail@plt+0x65e4>
   1547c:	ldrd	r2, [r4, #8]
   15480:	mov	r5, r0
   15484:	str	r0, [r4]
   15488:	strd	r2, [r0]
   1548c:	b	15364 <__assert_fail@plt+0x41d8>
   15490:	andeq	sl, r2, r8, lsl r3
   15494:	strd	r4, [sp, #-20]!	; 0xffffffec
   15498:	mov	r4, #0
   1549c:	mov	r5, #0
   154a0:	strd	r6, [sp, #8]
   154a4:	cmp	r1, #10
   154a8:	str	lr, [sp, #16]
   154ac:	sub	sp, sp, #100	; 0x64
   154b0:	strd	r4, [sp, #48]	; 0x30
   154b4:	beq	154fc <__assert_fail@plt+0x4370>
   154b8:	mov	r3, sp
   154bc:	strd	r4, [sp, #8]
   154c0:	str	r1, [sp, #48]	; 0x30
   154c4:	mov	r1, r2
   154c8:	mvn	r2, #0
   154cc:	ldrd	r6, [sp, #48]	; 0x30
   154d0:	strd	r6, [sp]
   154d4:	strd	r4, [sp, #16]
   154d8:	strd	r4, [sp, #24]
   154dc:	strd	r4, [sp, #32]
   154e0:	strd	r4, [sp, #40]	; 0x28
   154e4:	bl	14b3c <__assert_fail@plt+0x39b0>
   154e8:	add	sp, sp, #100	; 0x64
   154ec:	ldrd	r4, [sp]
   154f0:	ldrd	r6, [sp, #8]
   154f4:	add	sp, sp, #16
   154f8:	pop	{pc}		; (ldr pc, [sp], #4)
   154fc:	bl	11174 <abort@plt>
   15500:	strd	r4, [sp, #-20]!	; 0xffffffec
   15504:	mov	r4, #0
   15508:	mov	r5, #0
   1550c:	strd	r6, [sp, #8]
   15510:	cmp	r1, #10
   15514:	str	lr, [sp, #16]
   15518:	sub	sp, sp, #100	; 0x64
   1551c:	strd	r4, [sp, #48]	; 0x30
   15520:	beq	1556c <__assert_fail@plt+0x43e0>
   15524:	mov	ip, r2
   15528:	mov	r2, r3
   1552c:	strd	r4, [sp, #8]
   15530:	str	r1, [sp, #48]	; 0x30
   15534:	mov	r3, sp
   15538:	mov	r1, ip
   1553c:	ldrd	r6, [sp, #48]	; 0x30
   15540:	strd	r6, [sp]
   15544:	strd	r4, [sp, #16]
   15548:	strd	r4, [sp, #24]
   1554c:	strd	r4, [sp, #32]
   15550:	strd	r4, [sp, #40]	; 0x28
   15554:	bl	14b3c <__assert_fail@plt+0x39b0>
   15558:	add	sp, sp, #100	; 0x64
   1555c:	ldrd	r4, [sp]
   15560:	ldrd	r6, [sp, #8]
   15564:	add	sp, sp, #16
   15568:	pop	{pc}		; (ldr pc, [sp], #4)
   1556c:	bl	11174 <abort@plt>
   15570:	mov	r2, #0
   15574:	mov	r3, #0
   15578:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1557c:	strd	r6, [sp, #8]
   15580:	cmp	r0, #10
   15584:	strd	r8, [sp, #16]
   15588:	strd	sl, [sp, #24]
   1558c:	str	lr, [sp, #32]
   15590:	sub	sp, sp, #124	; 0x7c
   15594:	strd	r2, [sp, #72]	; 0x48
   15598:	strd	r2, [sp, #80]	; 0x50
   1559c:	strd	r2, [sp, #88]	; 0x58
   155a0:	strd	r2, [sp, #96]	; 0x60
   155a4:	strd	r2, [sp, #104]	; 0x68
   155a8:	strd	r2, [sp, #112]	; 0x70
   155ac:	beq	15750 <__assert_fail@plt+0x45c4>
   155b0:	mov	r6, r1
   155b4:	movw	r4, #41256	; 0xa128
   155b8:	movt	r4, #2
   155bc:	str	r0, [sp, #72]	; 0x48
   155c0:	ldrd	r0, [sp, #72]	; 0x48
   155c4:	strd	r0, [sp, #24]
   155c8:	strd	r2, [sp, #32]
   155cc:	strd	r2, [sp, #40]	; 0x28
   155d0:	strd	r2, [sp, #48]	; 0x30
   155d4:	strd	r2, [sp, #56]	; 0x38
   155d8:	strd	r2, [sp, #64]	; 0x40
   155dc:	bl	11090 <__errno_location@plt>
   155e0:	mov	r8, r0
   155e4:	ldr	r5, [r4]
   155e8:	ldr	r2, [r4, #4]
   155ec:	ldr	r9, [r0]
   155f0:	cmp	r2, #0
   155f4:	bgt	15650 <__assert_fail@plt+0x44c4>
   155f8:	add	r3, r4, #8
   155fc:	str	r2, [sp, #72]	; 0x48
   15600:	rsb	r2, r2, #1
   15604:	cmp	r5, r3
   15608:	beq	15724 <__assert_fail@plt+0x4598>
   1560c:	mov	r3, #8
   15610:	mov	r0, r5
   15614:	add	r1, sp, #72	; 0x48
   15618:	str	r3, [sp]
   1561c:	mvn	r3, #-2147483648	; 0x80000000
   15620:	bl	17770 <__assert_fail@plt+0x65e4>
   15624:	mov	r5, r0
   15628:	str	r0, [r4]
   1562c:	ldr	r0, [r4, #4]
   15630:	mov	r1, #0
   15634:	ldr	r2, [sp, #72]	; 0x48
   15638:	sub	r2, r2, r0
   1563c:	add	r0, r5, r0, lsl #3
   15640:	lsl	r2, r2, #3
   15644:	bl	110b4 <memset@plt>
   15648:	ldr	r3, [sp, #72]	; 0x48
   1564c:	str	r3, [r4, #4]
   15650:	ldr	sl, [r5]
   15654:	add	r0, sp, #32
   15658:	mvn	r3, #0
   1565c:	mov	r2, r6
   15660:	ldr	r7, [sp, #28]
   15664:	ldr	r4, [r5, #4]
   15668:	mov	r1, sl
   1566c:	str	r0, [sp, #8]
   15670:	ldr	lr, [sp, #24]
   15674:	orr	r7, r7, #1
   15678:	ldr	ip, [sp, #64]	; 0x40
   1567c:	mov	r0, r4
   15680:	ldr	fp, [sp, #68]	; 0x44
   15684:	str	lr, [sp]
   15688:	str	r7, [sp, #4]
   1568c:	str	ip, [sp, #12]
   15690:	str	fp, [sp, #16]
   15694:	bl	13150 <__assert_fail@plt+0x1fc4>
   15698:	cmp	sl, r0
   1569c:	bhi	15700 <__assert_fail@plt+0x4574>
   156a0:	add	sl, r0, #1
   156a4:	movw	r3, #41488	; 0xa210
   156a8:	movt	r3, #2
   156ac:	cmp	r4, r3
   156b0:	str	sl, [r5]
   156b4:	beq	156c0 <__assert_fail@plt+0x4534>
   156b8:	mov	r0, r4
   156bc:	bl	12d94 <__assert_fail@plt+0x1c08>
   156c0:	mov	r0, sl
   156c4:	bl	174cc <__assert_fail@plt+0x6340>
   156c8:	ldr	r3, [sp, #24]
   156cc:	mov	r2, r6
   156d0:	mov	r1, sl
   156d4:	mov	r4, r0
   156d8:	ldr	lr, [sp, #64]	; 0x40
   156dc:	ldr	ip, [sp, #68]	; 0x44
   156e0:	str	r0, [r5, #4]
   156e4:	add	r5, sp, #32
   156e8:	stm	sp, {r3, r7}
   156ec:	mvn	r3, #0
   156f0:	str	r5, [sp, #8]
   156f4:	str	lr, [sp, #12]
   156f8:	str	ip, [sp, #16]
   156fc:	bl	13150 <__assert_fail@plt+0x1fc4>
   15700:	mov	r0, r4
   15704:	str	r9, [r8]
   15708:	add	sp, sp, #124	; 0x7c
   1570c:	ldrd	r4, [sp]
   15710:	ldrd	r6, [sp, #8]
   15714:	ldrd	r8, [sp, #16]
   15718:	ldrd	sl, [sp, #24]
   1571c:	add	sp, sp, #32
   15720:	pop	{pc}		; (ldr pc, [sp], #4)
   15724:	mov	r0, #8
   15728:	mvn	r3, #-2147483648	; 0x80000000
   1572c:	add	r1, sp, #72	; 0x48
   15730:	str	r0, [sp]
   15734:	mov	r0, #0
   15738:	bl	17770 <__assert_fail@plt+0x65e4>
   1573c:	ldrd	r2, [r4, #8]
   15740:	mov	r5, r0
   15744:	str	r0, [r4]
   15748:	strd	r2, [r0]
   1574c:	b	1562c <__assert_fail@plt+0x44a0>
   15750:	bl	11174 <abort@plt>
   15754:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15758:	cmp	r0, #10
   1575c:	strd	r6, [sp, #8]
   15760:	mov	r6, #0
   15764:	mov	r7, #0
   15768:	strd	r8, [sp, #16]
   1576c:	strd	sl, [sp, #24]
   15770:	str	lr, [sp, #32]
   15774:	sub	sp, sp, #124	; 0x7c
   15778:	strd	r6, [sp, #72]	; 0x48
   1577c:	strd	r6, [sp, #80]	; 0x50
   15780:	strd	r6, [sp, #88]	; 0x58
   15784:	strd	r6, [sp, #96]	; 0x60
   15788:	strd	r6, [sp, #104]	; 0x68
   1578c:	strd	r6, [sp, #112]	; 0x70
   15790:	beq	1593c <__assert_fail@plt+0x47b0>
   15794:	mov	sl, r2
   15798:	movw	r5, #41256	; 0xa128
   1579c:	movt	r5, #2
   157a0:	str	r0, [sp, #72]	; 0x48
   157a4:	mov	r9, r1
   157a8:	ldrd	r2, [sp, #72]	; 0x48
   157ac:	strd	r2, [sp, #24]
   157b0:	strd	r6, [sp, #32]
   157b4:	strd	r6, [sp, #40]	; 0x28
   157b8:	strd	r6, [sp, #48]	; 0x30
   157bc:	strd	r6, [sp, #56]	; 0x38
   157c0:	strd	r6, [sp, #64]	; 0x40
   157c4:	bl	11090 <__errno_location@plt>
   157c8:	mov	r7, r0
   157cc:	ldr	r4, [r5]
   157d0:	ldr	r2, [r5, #4]
   157d4:	ldr	fp, [r0]
   157d8:	cmp	r2, #0
   157dc:	bgt	15838 <__assert_fail@plt+0x46ac>
   157e0:	add	r3, r5, #8
   157e4:	str	r2, [sp, #72]	; 0x48
   157e8:	rsb	r2, r2, #1
   157ec:	cmp	r4, r3
   157f0:	beq	15910 <__assert_fail@plt+0x4784>
   157f4:	mov	r3, #8
   157f8:	mov	r0, r4
   157fc:	add	r1, sp, #72	; 0x48
   15800:	str	r3, [sp]
   15804:	mvn	r3, #-2147483648	; 0x80000000
   15808:	bl	17770 <__assert_fail@plt+0x65e4>
   1580c:	mov	r4, r0
   15810:	str	r0, [r5]
   15814:	ldr	r0, [r5, #4]
   15818:	mov	r1, #0
   1581c:	ldr	r2, [sp, #72]	; 0x48
   15820:	sub	r2, r2, r0
   15824:	add	r0, r4, r0, lsl #3
   15828:	lsl	r2, r2, #3
   1582c:	bl	110b4 <memset@plt>
   15830:	ldr	r3, [sp, #72]	; 0x48
   15834:	str	r3, [r5, #4]
   15838:	ldr	ip, [sp, #24]
   1583c:	add	r0, sp, #32
   15840:	mov	r3, sl
   15844:	mov	r2, r9
   15848:	ldr	r6, [sp, #28]
   1584c:	ldr	r8, [r4]
   15850:	ldr	r5, [r4, #4]
   15854:	str	ip, [sp]
   15858:	orr	r6, r6, #1
   1585c:	ldr	ip, [sp, #64]	; 0x40
   15860:	mov	r1, r8
   15864:	str	r6, [sp, #4]
   15868:	ldr	lr, [sp, #68]	; 0x44
   1586c:	str	r0, [sp, #8]
   15870:	mov	r0, r5
   15874:	str	ip, [sp, #12]
   15878:	str	lr, [sp, #16]
   1587c:	bl	13150 <__assert_fail@plt+0x1fc4>
   15880:	cmp	r8, r0
   15884:	bhi	158ec <__assert_fail@plt+0x4760>
   15888:	add	r8, r0, #1
   1588c:	movw	r3, #41488	; 0xa210
   15890:	movt	r3, #2
   15894:	cmp	r5, r3
   15898:	str	r8, [r4]
   1589c:	beq	158a8 <__assert_fail@plt+0x471c>
   158a0:	mov	r0, r5
   158a4:	bl	12d94 <__assert_fail@plt+0x1c08>
   158a8:	mov	r0, r8
   158ac:	bl	174cc <__assert_fail@plt+0x6340>
   158b0:	ldr	lr, [sp, #24]
   158b4:	mov	r1, r8
   158b8:	mov	r3, sl
   158bc:	mov	r2, r9
   158c0:	mov	r5, r0
   158c4:	ldr	r8, [sp, #64]	; 0x40
   158c8:	ldr	ip, [sp, #68]	; 0x44
   158cc:	str	r0, [r4, #4]
   158d0:	str	lr, [sp]
   158d4:	add	lr, sp, #32
   158d8:	str	r6, [sp, #4]
   158dc:	str	lr, [sp, #8]
   158e0:	str	r8, [sp, #12]
   158e4:	str	ip, [sp, #16]
   158e8:	bl	13150 <__assert_fail@plt+0x1fc4>
   158ec:	mov	r0, r5
   158f0:	str	fp, [r7]
   158f4:	add	sp, sp, #124	; 0x7c
   158f8:	ldrd	r4, [sp]
   158fc:	ldrd	r6, [sp, #8]
   15900:	ldrd	r8, [sp, #16]
   15904:	ldrd	sl, [sp, #24]
   15908:	add	sp, sp, #32
   1590c:	pop	{pc}		; (ldr pc, [sp], #4)
   15910:	mov	r0, #8
   15914:	mvn	r3, #-2147483648	; 0x80000000
   15918:	add	r1, sp, #72	; 0x48
   1591c:	str	r0, [sp]
   15920:	mov	r0, #0
   15924:	bl	17770 <__assert_fail@plt+0x65e4>
   15928:	ldrd	r2, [r5, #8]
   1592c:	mov	r4, r0
   15930:	str	r0, [r5]
   15934:	strd	r2, [r0]
   15938:	b	15814 <__assert_fail@plt+0x4688>
   1593c:	bl	11174 <abort@plt>
   15940:	ldr	r3, [pc, #492]	; 15b34 <__assert_fail@plt+0x49a8>
   15944:	lsr	ip, r2, #5
   15948:	and	r2, r2, #31
   1594c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15950:	movw	r5, #41256	; 0xa128
   15954:	movt	r5, #2
   15958:	strd	r6, [sp, #8]
   1595c:	strd	r8, [sp, #16]
   15960:	strd	sl, [sp, #24]
   15964:	mov	sl, r0
   15968:	mov	fp, r1
   1596c:	ldrd	r0, [r3]
   15970:	str	lr, [sp, #32]
   15974:	sub	sp, sp, #92	; 0x5c
   15978:	ldrd	r8, [r3, #8]
   1597c:	add	r6, sp, #48	; 0x30
   15980:	strd	r0, [sp, #40]	; 0x28
   15984:	ldrd	r0, [r3, #16]
   15988:	strd	r8, [sp, #48]	; 0x30
   1598c:	ldrd	r8, [r3, #24]
   15990:	strd	r0, [sp, #56]	; 0x38
   15994:	ldrd	r0, [r3, #32]
   15998:	strd	r8, [sp, #64]	; 0x40
   1599c:	ldrd	r8, [r3, #40]	; 0x28
   159a0:	strd	r0, [sp, #72]	; 0x48
   159a4:	strd	r8, [sp, #80]	; 0x50
   159a8:	ldr	r3, [r6, ip, lsl #2]
   159ac:	mvn	r1, r3, lsr r2
   159b0:	and	r1, r1, #1
   159b4:	eor	r2, r3, r1, lsl r2
   159b8:	str	r2, [r6, ip, lsl #2]
   159bc:	bl	11090 <__errno_location@plt>
   159c0:	ldr	r3, [r0]
   159c4:	mov	r8, r0
   159c8:	ldr	r2, [r5, #4]
   159cc:	ldr	r4, [r5]
   159d0:	str	r3, [sp, #28]
   159d4:	cmp	r2, #0
   159d8:	bgt	15a34 <__assert_fail@plt+0x48a8>
   159dc:	add	r3, r5, #8
   159e0:	str	r2, [sp, #36]	; 0x24
   159e4:	rsb	r2, r2, #1
   159e8:	cmp	r4, r3
   159ec:	beq	15b08 <__assert_fail@plt+0x497c>
   159f0:	mov	r1, #8
   159f4:	mov	r0, r4
   159f8:	mvn	r3, #-2147483648	; 0x80000000
   159fc:	str	r1, [sp]
   15a00:	add	r1, sp, #36	; 0x24
   15a04:	bl	17770 <__assert_fail@plt+0x65e4>
   15a08:	mov	r4, r0
   15a0c:	str	r0, [r5]
   15a10:	ldr	r0, [r5, #4]
   15a14:	mov	r1, #0
   15a18:	ldr	r2, [sp, #36]	; 0x24
   15a1c:	sub	r2, r2, r0
   15a20:	add	r0, r4, r0, lsl #3
   15a24:	lsl	r2, r2, #3
   15a28:	bl	110b4 <memset@plt>
   15a2c:	ldr	r3, [sp, #36]	; 0x24
   15a30:	str	r3, [r5, #4]
   15a34:	ldr	ip, [sp, #40]	; 0x28
   15a38:	mov	r3, fp
   15a3c:	mov	r2, sl
   15a40:	ldr	r7, [sp, #44]	; 0x2c
   15a44:	ldr	r9, [r4]
   15a48:	ldr	r5, [r4, #4]
   15a4c:	str	ip, [sp]
   15a50:	orr	r7, r7, #1
   15a54:	ldr	ip, [sp, #80]	; 0x50
   15a58:	mov	r1, r9
   15a5c:	str	r7, [sp, #4]
   15a60:	ldr	lr, [sp, #84]	; 0x54
   15a64:	mov	r0, r5
   15a68:	str	r6, [sp, #8]
   15a6c:	str	ip, [sp, #12]
   15a70:	str	lr, [sp, #16]
   15a74:	bl	13150 <__assert_fail@plt+0x1fc4>
   15a78:	cmp	r9, r0
   15a7c:	bhi	15ae0 <__assert_fail@plt+0x4954>
   15a80:	add	r9, r0, #1
   15a84:	movw	r3, #41488	; 0xa210
   15a88:	movt	r3, #2
   15a8c:	cmp	r5, r3
   15a90:	str	r9, [r4]
   15a94:	beq	15aa0 <__assert_fail@plt+0x4914>
   15a98:	mov	r0, r5
   15a9c:	bl	12d94 <__assert_fail@plt+0x1c08>
   15aa0:	mov	r0, r9
   15aa4:	bl	174cc <__assert_fail@plt+0x6340>
   15aa8:	mov	r1, r9
   15aac:	ldr	ip, [sp, #40]	; 0x28
   15ab0:	mov	r3, fp
   15ab4:	mov	r2, sl
   15ab8:	mov	r5, r0
   15abc:	ldr	r9, [sp, #80]	; 0x50
   15ac0:	ldr	lr, [sp, #84]	; 0x54
   15ac4:	str	r0, [r4, #4]
   15ac8:	str	ip, [sp]
   15acc:	str	r7, [sp, #4]
   15ad0:	str	r6, [sp, #8]
   15ad4:	str	r9, [sp, #12]
   15ad8:	str	lr, [sp, #16]
   15adc:	bl	13150 <__assert_fail@plt+0x1fc4>
   15ae0:	ldr	r3, [sp, #28]
   15ae4:	mov	r0, r5
   15ae8:	str	r3, [r8]
   15aec:	add	sp, sp, #92	; 0x5c
   15af0:	ldrd	r4, [sp]
   15af4:	ldrd	r6, [sp, #8]
   15af8:	ldrd	r8, [sp, #16]
   15afc:	ldrd	sl, [sp, #24]
   15b00:	add	sp, sp, #32
   15b04:	pop	{pc}		; (ldr pc, [sp], #4)
   15b08:	mov	r0, #8
   15b0c:	mvn	r3, #-2147483648	; 0x80000000
   15b10:	add	r1, sp, #36	; 0x24
   15b14:	str	r0, [sp]
   15b18:	mov	r0, #0
   15b1c:	bl	17770 <__assert_fail@plt+0x65e4>
   15b20:	ldrd	r2, [r5, #8]
   15b24:	mov	r4, r0
   15b28:	str	r0, [r5]
   15b2c:	strd	r2, [r0]
   15b30:	b	15a10 <__assert_fail@plt+0x4884>
   15b34:	andeq	sl, r2, r0, lsl r3
   15b38:	ldr	ip, [pc, #476]	; 15d1c <__assert_fail@plt+0x4b90>
   15b3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b40:	movw	r4, #41256	; 0xa128
   15b44:	movt	r4, #2
   15b48:	ldrd	r2, [ip, #8]
   15b4c:	strd	r6, [sp, #8]
   15b50:	lsr	r7, r1, #5
   15b54:	mov	r6, r0
   15b58:	strd	r8, [sp, #16]
   15b5c:	str	lr, [sp, #32]
   15b60:	and	lr, r1, #31
   15b64:	ldrd	r0, [ip]
   15b68:	strd	sl, [sp, #24]
   15b6c:	sub	sp, sp, #84	; 0x54
   15b70:	add	r5, sp, #40	; 0x28
   15b74:	strd	r0, [sp, #32]
   15b78:	strd	r2, [sp, #40]	; 0x28
   15b7c:	ldrd	r0, [ip, #16]
   15b80:	ldrd	r2, [ip, #24]
   15b84:	strd	r0, [sp, #48]	; 0x30
   15b88:	ldrd	r0, [ip, #32]
   15b8c:	strd	r2, [sp, #56]	; 0x38
   15b90:	ldrd	r2, [ip, #40]	; 0x28
   15b94:	strd	r0, [sp, #64]	; 0x40
   15b98:	strd	r2, [sp, #72]	; 0x48
   15b9c:	ldr	r1, [r5, r7, lsl #2]
   15ba0:	mvn	r3, r1, lsr lr
   15ba4:	and	r3, r3, #1
   15ba8:	eor	r1, r1, r3, lsl lr
   15bac:	str	r1, [r5, r7, lsl #2]
   15bb0:	bl	11090 <__errno_location@plt>
   15bb4:	mov	r9, r0
   15bb8:	ldr	sl, [r0]
   15bbc:	ldr	r2, [r4, #4]
   15bc0:	ldr	r7, [r4]
   15bc4:	cmp	r2, #0
   15bc8:	bgt	15c24 <__assert_fail@plt+0x4a98>
   15bcc:	add	r3, r4, #8
   15bd0:	str	r2, [sp, #28]
   15bd4:	rsb	r2, r2, #1
   15bd8:	cmp	r7, r3
   15bdc:	beq	15cf0 <__assert_fail@plt+0x4b64>
   15be0:	mov	r1, #8
   15be4:	mov	r0, r7
   15be8:	mvn	r3, #-2147483648	; 0x80000000
   15bec:	str	r1, [sp]
   15bf0:	add	r1, sp, #28
   15bf4:	bl	17770 <__assert_fail@plt+0x65e4>
   15bf8:	mov	r7, r0
   15bfc:	str	r0, [r4]
   15c00:	ldr	r0, [r4, #4]
   15c04:	mov	r1, #0
   15c08:	ldr	r2, [sp, #28]
   15c0c:	sub	r2, r2, r0
   15c10:	add	r0, r7, r0, lsl #3
   15c14:	lsl	r2, r2, #3
   15c18:	bl	110b4 <memset@plt>
   15c1c:	ldr	r3, [sp, #28]
   15c20:	str	r3, [r4, #4]
   15c24:	ldr	ip, [sp, #32]
   15c28:	mvn	r3, #0
   15c2c:	mov	r2, r6
   15c30:	ldr	r8, [sp, #36]	; 0x24
   15c34:	ldr	fp, [r7]
   15c38:	ldr	r4, [r7, #4]
   15c3c:	str	ip, [sp]
   15c40:	orr	r8, r8, #1
   15c44:	ldr	ip, [sp, #72]	; 0x48
   15c48:	mov	r1, fp
   15c4c:	str	r8, [sp, #4]
   15c50:	ldr	lr, [sp, #76]	; 0x4c
   15c54:	mov	r0, r4
   15c58:	str	r5, [sp, #8]
   15c5c:	str	ip, [sp, #12]
   15c60:	str	lr, [sp, #16]
   15c64:	bl	13150 <__assert_fail@plt+0x1fc4>
   15c68:	cmp	fp, r0
   15c6c:	bhi	15ccc <__assert_fail@plt+0x4b40>
   15c70:	add	fp, r0, #1
   15c74:	movw	r3, #41488	; 0xa210
   15c78:	movt	r3, #2
   15c7c:	cmp	r4, r3
   15c80:	str	fp, [r7]
   15c84:	beq	15c90 <__assert_fail@plt+0x4b04>
   15c88:	mov	r0, r4
   15c8c:	bl	12d94 <__assert_fail@plt+0x1c08>
   15c90:	mov	r0, fp
   15c94:	bl	174cc <__assert_fail@plt+0x6340>
   15c98:	ldr	r3, [sp, #32]
   15c9c:	mov	r2, r6
   15ca0:	mov	r1, fp
   15ca4:	mov	r4, r0
   15ca8:	ldr	lr, [sp, #72]	; 0x48
   15cac:	ldr	ip, [sp, #76]	; 0x4c
   15cb0:	str	r0, [r7, #4]
   15cb4:	stm	sp, {r3, r8}
   15cb8:	mvn	r3, #0
   15cbc:	str	r5, [sp, #8]
   15cc0:	str	lr, [sp, #12]
   15cc4:	str	ip, [sp, #16]
   15cc8:	bl	13150 <__assert_fail@plt+0x1fc4>
   15ccc:	mov	r0, r4
   15cd0:	str	sl, [r9]
   15cd4:	add	sp, sp, #84	; 0x54
   15cd8:	ldrd	r4, [sp]
   15cdc:	ldrd	r6, [sp, #8]
   15ce0:	ldrd	r8, [sp, #16]
   15ce4:	ldrd	sl, [sp, #24]
   15ce8:	add	sp, sp, #32
   15cec:	pop	{pc}		; (ldr pc, [sp], #4)
   15cf0:	mov	r0, #8
   15cf4:	mvn	r3, #-2147483648	; 0x80000000
   15cf8:	add	r1, sp, #28
   15cfc:	str	r0, [sp]
   15d00:	mov	r0, #0
   15d04:	bl	17770 <__assert_fail@plt+0x65e4>
   15d08:	ldrd	r2, [r4, #8]
   15d0c:	mov	r7, r0
   15d10:	str	r0, [r4]
   15d14:	strd	r2, [r0]
   15d18:	b	15c00 <__assert_fail@plt+0x4a74>
   15d1c:	andeq	sl, r2, r0, lsl r3
   15d20:	ldr	ip, [pc, #472]	; 15f00 <__assert_fail@plt+0x4d74>
   15d24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d28:	mov	r5, r0
   15d2c:	movw	r4, #41256	; 0xa128
   15d30:	movt	r4, #2
   15d34:	ldrd	r2, [ip]
   15d38:	ldrd	r0, [ip, #8]
   15d3c:	strd	r6, [sp, #8]
   15d40:	strd	r8, [sp, #16]
   15d44:	strd	sl, [sp, #24]
   15d48:	str	lr, [sp, #32]
   15d4c:	sub	sp, sp, #84	; 0x54
   15d50:	strd	r2, [sp, #32]
   15d54:	strd	r0, [sp, #40]	; 0x28
   15d58:	ldr	r6, [sp, #44]	; 0x2c
   15d5c:	ldrd	r2, [ip, #16]
   15d60:	ldrd	r0, [ip, #24]
   15d64:	mvn	lr, r6
   15d68:	and	lr, lr, #67108864	; 0x4000000
   15d6c:	eor	lr, lr, r6
   15d70:	ldrd	r6, [ip, #40]	; 0x28
   15d74:	strd	r2, [sp, #48]	; 0x30
   15d78:	ldrd	r2, [ip, #32]
   15d7c:	str	lr, [sp, #44]	; 0x2c
   15d80:	strd	r0, [sp, #56]	; 0x38
   15d84:	strd	r2, [sp, #64]	; 0x40
   15d88:	strd	r6, [sp, #72]	; 0x48
   15d8c:	bl	11090 <__errno_location@plt>
   15d90:	mov	r8, r0
   15d94:	ldr	r9, [r0]
   15d98:	ldr	r2, [r4, #4]
   15d9c:	ldr	r6, [r4]
   15da0:	cmp	r2, #0
   15da4:	bgt	15e00 <__assert_fail@plt+0x4c74>
   15da8:	add	r3, r4, #8
   15dac:	str	r2, [sp, #28]
   15db0:	rsb	r2, r2, #1
   15db4:	cmp	r6, r3
   15db8:	beq	15ed4 <__assert_fail@plt+0x4d48>
   15dbc:	mov	r1, #8
   15dc0:	mov	r0, r6
   15dc4:	mvn	r3, #-2147483648	; 0x80000000
   15dc8:	str	r1, [sp]
   15dcc:	add	r1, sp, #28
   15dd0:	bl	17770 <__assert_fail@plt+0x65e4>
   15dd4:	mov	r6, r0
   15dd8:	str	r0, [r4]
   15ddc:	ldr	r0, [r4, #4]
   15de0:	mov	r1, #0
   15de4:	ldr	r2, [sp, #28]
   15de8:	sub	r2, r2, r0
   15dec:	add	r0, r6, r0, lsl #3
   15df0:	lsl	r2, r2, #3
   15df4:	bl	110b4 <memset@plt>
   15df8:	ldr	r3, [sp, #28]
   15dfc:	str	r3, [r4, #4]
   15e00:	ldr	sl, [r6]
   15e04:	add	r0, sp, #40	; 0x28
   15e08:	mvn	r3, #0
   15e0c:	mov	r2, r5
   15e10:	ldr	r7, [sp, #36]	; 0x24
   15e14:	ldr	r4, [r6, #4]
   15e18:	mov	r1, sl
   15e1c:	str	r0, [sp, #8]
   15e20:	ldr	lr, [sp, #32]
   15e24:	orr	r7, r7, #1
   15e28:	ldr	ip, [sp, #72]	; 0x48
   15e2c:	mov	r0, r4
   15e30:	ldr	fp, [sp, #76]	; 0x4c
   15e34:	str	lr, [sp]
   15e38:	str	r7, [sp, #4]
   15e3c:	str	ip, [sp, #12]
   15e40:	str	fp, [sp, #16]
   15e44:	bl	13150 <__assert_fail@plt+0x1fc4>
   15e48:	cmp	sl, r0
   15e4c:	bhi	15eb0 <__assert_fail@plt+0x4d24>
   15e50:	add	sl, r0, #1
   15e54:	movw	r3, #41488	; 0xa210
   15e58:	movt	r3, #2
   15e5c:	cmp	r4, r3
   15e60:	str	sl, [r6]
   15e64:	beq	15e70 <__assert_fail@plt+0x4ce4>
   15e68:	mov	r0, r4
   15e6c:	bl	12d94 <__assert_fail@plt+0x1c08>
   15e70:	mov	r0, sl
   15e74:	bl	174cc <__assert_fail@plt+0x6340>
   15e78:	ldr	r3, [sp, #32]
   15e7c:	mov	r2, r5
   15e80:	add	r5, sp, #40	; 0x28
   15e84:	mov	r1, sl
   15e88:	mov	r4, r0
   15e8c:	ldr	lr, [sp, #72]	; 0x48
   15e90:	ldr	ip, [sp, #76]	; 0x4c
   15e94:	str	r0, [r6, #4]
   15e98:	stm	sp, {r3, r7}
   15e9c:	mvn	r3, #0
   15ea0:	str	r5, [sp, #8]
   15ea4:	str	lr, [sp, #12]
   15ea8:	str	ip, [sp, #16]
   15eac:	bl	13150 <__assert_fail@plt+0x1fc4>
   15eb0:	mov	r0, r4
   15eb4:	str	r9, [r8]
   15eb8:	add	sp, sp, #84	; 0x54
   15ebc:	ldrd	r4, [sp]
   15ec0:	ldrd	r6, [sp, #8]
   15ec4:	ldrd	r8, [sp, #16]
   15ec8:	ldrd	sl, [sp, #24]
   15ecc:	add	sp, sp, #32
   15ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ed4:	mov	r0, #8
   15ed8:	mvn	r3, #-2147483648	; 0x80000000
   15edc:	add	r1, sp, #28
   15ee0:	str	r0, [sp]
   15ee4:	mov	r0, #0
   15ee8:	bl	17770 <__assert_fail@plt+0x65e4>
   15eec:	ldrd	r2, [r4, #8]
   15ef0:	mov	r6, r0
   15ef4:	str	r0, [r4]
   15ef8:	strd	r2, [r0]
   15efc:	b	15ddc <__assert_fail@plt+0x4c50>
   15f00:	andeq	sl, r2, r0, lsl r3
   15f04:	ldr	ip, [pc, #480]	; 160ec <__assert_fail@plt+0x4f60>
   15f08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15f0c:	mov	r5, r0
   15f10:	movw	r4, #41256	; 0xa128
   15f14:	movt	r4, #2
   15f18:	ldrd	r2, [ip]
   15f1c:	strd	r6, [sp, #8]
   15f20:	mov	r6, r1
   15f24:	ldrd	r0, [ip, #8]
   15f28:	strd	r8, [sp, #16]
   15f2c:	strd	sl, [sp, #24]
   15f30:	str	lr, [sp, #32]
   15f34:	sub	sp, sp, #84	; 0x54
   15f38:	ldrd	r8, [ip, #40]	; 0x28
   15f3c:	strd	r2, [sp, #32]
   15f40:	strd	r0, [sp, #40]	; 0x28
   15f44:	ldrd	r2, [ip, #16]
   15f48:	ldr	r7, [sp, #44]	; 0x2c
   15f4c:	ldrd	r0, [ip, #24]
   15f50:	strd	r2, [sp, #48]	; 0x30
   15f54:	ldrd	r2, [ip, #32]
   15f58:	mvn	lr, r7
   15f5c:	and	lr, lr, #67108864	; 0x4000000
   15f60:	eor	lr, lr, r7
   15f64:	str	lr, [sp, #44]	; 0x2c
   15f68:	strd	r0, [sp, #56]	; 0x38
   15f6c:	strd	r2, [sp, #64]	; 0x40
   15f70:	strd	r8, [sp, #72]	; 0x48
   15f74:	bl	11090 <__errno_location@plt>
   15f78:	mov	r9, r0
   15f7c:	ldr	sl, [r0]
   15f80:	ldr	r2, [r4, #4]
   15f84:	ldr	r7, [r4]
   15f88:	cmp	r2, #0
   15f8c:	bgt	15fe8 <__assert_fail@plt+0x4e5c>
   15f90:	add	r3, r4, #8
   15f94:	str	r2, [sp, #28]
   15f98:	rsb	r2, r2, #1
   15f9c:	cmp	r7, r3
   15fa0:	beq	160c0 <__assert_fail@plt+0x4f34>
   15fa4:	mov	r1, #8
   15fa8:	mov	r0, r7
   15fac:	mvn	r3, #-2147483648	; 0x80000000
   15fb0:	str	r1, [sp]
   15fb4:	add	r1, sp, #28
   15fb8:	bl	17770 <__assert_fail@plt+0x65e4>
   15fbc:	mov	r7, r0
   15fc0:	str	r0, [r4]
   15fc4:	ldr	r0, [r4, #4]
   15fc8:	mov	r1, #0
   15fcc:	ldr	r2, [sp, #28]
   15fd0:	sub	r2, r2, r0
   15fd4:	add	r0, r7, r0, lsl #3
   15fd8:	lsl	r2, r2, #3
   15fdc:	bl	110b4 <memset@plt>
   15fe0:	ldr	r3, [sp, #28]
   15fe4:	str	r3, [r4, #4]
   15fe8:	ldr	ip, [sp, #32]
   15fec:	add	r0, sp, #40	; 0x28
   15ff0:	mov	r3, r6
   15ff4:	mov	r2, r5
   15ff8:	ldr	r8, [sp, #36]	; 0x24
   15ffc:	ldr	fp, [r7]
   16000:	ldr	r4, [r7, #4]
   16004:	str	ip, [sp]
   16008:	orr	r8, r8, #1
   1600c:	ldr	ip, [sp, #72]	; 0x48
   16010:	mov	r1, fp
   16014:	str	r8, [sp, #4]
   16018:	ldr	lr, [sp, #76]	; 0x4c
   1601c:	str	r0, [sp, #8]
   16020:	mov	r0, r4
   16024:	str	ip, [sp, #12]
   16028:	str	lr, [sp, #16]
   1602c:	bl	13150 <__assert_fail@plt+0x1fc4>
   16030:	cmp	fp, r0
   16034:	bhi	1609c <__assert_fail@plt+0x4f10>
   16038:	add	fp, r0, #1
   1603c:	movw	r3, #41488	; 0xa210
   16040:	movt	r3, #2
   16044:	cmp	r4, r3
   16048:	str	fp, [r7]
   1604c:	beq	16058 <__assert_fail@plt+0x4ecc>
   16050:	mov	r0, r4
   16054:	bl	12d94 <__assert_fail@plt+0x1c08>
   16058:	mov	r0, fp
   1605c:	bl	174cc <__assert_fail@plt+0x6340>
   16060:	ldr	lr, [sp, #32]
   16064:	mov	r2, r5
   16068:	mov	r3, r6
   1606c:	mov	r1, fp
   16070:	mov	r4, r0
   16074:	ldr	r5, [sp, #72]	; 0x48
   16078:	ldr	ip, [sp, #76]	; 0x4c
   1607c:	str	r0, [r7, #4]
   16080:	str	lr, [sp]
   16084:	add	lr, sp, #40	; 0x28
   16088:	str	r8, [sp, #4]
   1608c:	str	lr, [sp, #8]
   16090:	str	r5, [sp, #12]
   16094:	str	ip, [sp, #16]
   16098:	bl	13150 <__assert_fail@plt+0x1fc4>
   1609c:	mov	r0, r4
   160a0:	str	sl, [r9]
   160a4:	add	sp, sp, #84	; 0x54
   160a8:	ldrd	r4, [sp]
   160ac:	ldrd	r6, [sp, #8]
   160b0:	ldrd	r8, [sp, #16]
   160b4:	ldrd	sl, [sp, #24]
   160b8:	add	sp, sp, #32
   160bc:	pop	{pc}		; (ldr pc, [sp], #4)
   160c0:	mov	r0, #8
   160c4:	mvn	r3, #-2147483648	; 0x80000000
   160c8:	add	r1, sp, #28
   160cc:	str	r0, [sp]
   160d0:	mov	r0, #0
   160d4:	bl	17770 <__assert_fail@plt+0x65e4>
   160d8:	ldrd	r2, [r4, #8]
   160dc:	mov	r7, r0
   160e0:	str	r0, [r4]
   160e4:	strd	r2, [r0]
   160e8:	b	15fc4 <__assert_fail@plt+0x4e38>
   160ec:	andeq	sl, r2, r0, lsl r3
   160f0:	strd	r4, [sp, #-12]!
   160f4:	mov	r4, #0
   160f8:	mov	r5, #0
   160fc:	str	lr, [sp, #8]
   16100:	sub	sp, sp, #100	; 0x64
   16104:	cmp	r1, #10
   16108:	strd	r4, [sp]
   1610c:	strd	r4, [sp, #8]
   16110:	strd	r4, [sp, #16]
   16114:	strd	r4, [sp, #24]
   16118:	strd	r4, [sp, #32]
   1611c:	strd	r4, [sp, #40]	; 0x28
   16120:	beq	16150 <__assert_fail@plt+0x4fc4>
   16124:	mov	ip, #67108864	; 0x4000000
   16128:	mov	r3, sp
   1612c:	str	r1, [sp]
   16130:	mov	r1, r2
   16134:	mvn	r2, #0
   16138:	str	ip, [sp, #12]
   1613c:	bl	14b3c <__assert_fail@plt+0x39b0>
   16140:	add	sp, sp, #100	; 0x64
   16144:	ldrd	r4, [sp]
   16148:	add	sp, sp, #8
   1614c:	pop	{pc}		; (ldr pc, [sp], #4)
   16150:	bl	11174 <abort@plt>
   16154:	ldr	ip, [pc, #156]	; 161f8 <__assert_fail@plt+0x506c>
   16158:	cmp	r2, #0
   1615c:	cmpne	r1, #0
   16160:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16164:	strd	r6, [sp, #8]
   16168:	mov	r6, r2
   1616c:	str	r8, [sp, #16]
   16170:	mov	r8, r3
   16174:	strd	sl, [sp, #20]
   16178:	ldrd	r4, [ip]
   1617c:	str	lr, [sp, #28]
   16180:	sub	sp, sp, #48	; 0x30
   16184:	mov	lr, #10
   16188:	ldrd	r2, [ip, #8]
   1618c:	ldrd	sl, [ip, #16]
   16190:	strd	r4, [sp]
   16194:	ldrd	r4, [ip, #32]
   16198:	str	lr, [sp]
   1619c:	strd	r2, [sp, #8]
   161a0:	strd	sl, [sp, #16]
   161a4:	ldrd	r2, [ip, #24]
   161a8:	ldrd	sl, [ip, #40]	; 0x28
   161ac:	strd	r2, [sp, #24]
   161b0:	strd	r4, [sp, #32]
   161b4:	strd	sl, [sp, #40]	; 0x28
   161b8:	beq	161f4 <__assert_fail@plt+0x5068>
   161bc:	mov	r7, r1
   161c0:	mov	r3, sp
   161c4:	mov	r1, r8
   161c8:	mvn	r2, #0
   161cc:	str	r7, [sp, #40]	; 0x28
   161d0:	str	r6, [sp, #44]	; 0x2c
   161d4:	bl	14b3c <__assert_fail@plt+0x39b0>
   161d8:	add	sp, sp, #48	; 0x30
   161dc:	ldrd	r4, [sp]
   161e0:	ldrd	r6, [sp, #8]
   161e4:	ldr	r8, [sp, #16]
   161e8:	ldrd	sl, [sp, #20]
   161ec:	add	sp, sp, #28
   161f0:	pop	{pc}		; (ldr pc, [sp], #4)
   161f4:	bl	11174 <abort@plt>
   161f8:	andeq	sl, r2, r0, lsl r3
   161fc:	ldr	ip, [pc, #156]	; 162a0 <__assert_fail@plt+0x5114>
   16200:	cmp	r2, #0
   16204:	cmpne	r1, #0
   16208:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1620c:	strd	r6, [sp, #8]
   16210:	mov	r6, r2
   16214:	str	r8, [sp, #16]
   16218:	mov	r8, r3
   1621c:	strd	sl, [sp, #20]
   16220:	ldrd	r4, [ip]
   16224:	str	lr, [sp, #28]
   16228:	sub	sp, sp, #48	; 0x30
   1622c:	mov	lr, #10
   16230:	ldrd	r2, [ip, #8]
   16234:	ldrd	sl, [ip, #16]
   16238:	strd	r4, [sp]
   1623c:	ldrd	r4, [ip, #32]
   16240:	str	lr, [sp]
   16244:	strd	r2, [sp, #8]
   16248:	strd	sl, [sp, #16]
   1624c:	ldrd	r2, [ip, #24]
   16250:	ldrd	sl, [ip, #40]	; 0x28
   16254:	strd	r2, [sp, #24]
   16258:	strd	r4, [sp, #32]
   1625c:	strd	sl, [sp, #40]	; 0x28
   16260:	beq	1629c <__assert_fail@plt+0x5110>
   16264:	ldr	r2, [sp, #80]	; 0x50
   16268:	mov	r7, r1
   1626c:	mov	r3, sp
   16270:	mov	r1, r8
   16274:	str	r7, [sp, #40]	; 0x28
   16278:	str	r6, [sp, #44]	; 0x2c
   1627c:	bl	14b3c <__assert_fail@plt+0x39b0>
   16280:	add	sp, sp, #48	; 0x30
   16284:	ldrd	r4, [sp]
   16288:	ldrd	r6, [sp, #8]
   1628c:	ldr	r8, [sp, #16]
   16290:	ldrd	sl, [sp, #20]
   16294:	add	sp, sp, #28
   16298:	pop	{pc}		; (ldr pc, [sp], #4)
   1629c:	bl	11174 <abort@plt>
   162a0:	andeq	sl, r2, r0, lsl r3
   162a4:	ldr	ip, [pc, #512]	; 164ac <__assert_fail@plt+0x5320>
   162a8:	cmp	r0, #0
   162ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   162b0:	ldrd	r4, [ip, #16]
   162b4:	strd	r6, [sp, #8]
   162b8:	clz	r6, r1
   162bc:	mov	r7, r1
   162c0:	strd	r8, [sp, #16]
   162c4:	mov	r8, r0
   162c8:	lsr	r6, r6, #5
   162cc:	strd	sl, [sp, #24]
   162d0:	mov	fp, r2
   162d4:	mov	sl, #10
   162d8:	ldrd	r2, [ip]
   162dc:	moveq	r6, #1
   162e0:	str	lr, [sp, #32]
   162e4:	sub	sp, sp, #92	; 0x5c
   162e8:	cmp	r6, #0
   162ec:	ldrd	r0, [ip, #8]
   162f0:	strd	r2, [sp, #40]	; 0x28
   162f4:	strd	r4, [sp, #56]	; 0x38
   162f8:	ldrd	r2, [ip, #24]
   162fc:	strd	r0, [sp, #48]	; 0x30
   16300:	ldrd	r0, [ip, #32]
   16304:	str	sl, [sp, #40]	; 0x28
   16308:	ldrd	r4, [ip, #40]	; 0x28
   1630c:	strd	r2, [sp, #64]	; 0x40
   16310:	strd	r0, [sp, #72]	; 0x48
   16314:	strd	r4, [sp, #80]	; 0x50
   16318:	bne	164a8 <__assert_fail@plt+0x531c>
   1631c:	movw	r5, #41256	; 0xa128
   16320:	movt	r5, #2
   16324:	str	r8, [sp, #80]	; 0x50
   16328:	str	r7, [sp, #84]	; 0x54
   1632c:	bl	11090 <__errno_location@plt>
   16330:	ldr	r3, [r0]
   16334:	mov	r9, r0
   16338:	ldr	r2, [r5, #4]
   1633c:	ldr	r4, [r5]
   16340:	str	r3, [sp, #28]
   16344:	cmp	r2, #0
   16348:	movgt	r1, sl
   1634c:	bgt	163b4 <__assert_fail@plt+0x5228>
   16350:	add	r3, r5, #8
   16354:	str	r2, [sp, #36]	; 0x24
   16358:	rsb	r2, r2, #1
   1635c:	cmp	r4, r3
   16360:	beq	1647c <__assert_fail@plt+0x52f0>
   16364:	mov	r1, #8
   16368:	mov	r0, r4
   1636c:	mvn	r3, #-2147483648	; 0x80000000
   16370:	str	r1, [sp]
   16374:	add	r1, sp, #36	; 0x24
   16378:	bl	17770 <__assert_fail@plt+0x65e4>
   1637c:	mov	r4, r0
   16380:	str	r0, [r5]
   16384:	ldr	r0, [r5, #4]
   16388:	mov	r1, #0
   1638c:	ldr	r2, [sp, #36]	; 0x24
   16390:	sub	r2, r2, r0
   16394:	add	r0, r4, r0, lsl #3
   16398:	lsl	r2, r2, #3
   1639c:	bl	110b4 <memset@plt>
   163a0:	ldr	r3, [sp, #36]	; 0x24
   163a4:	ldr	r1, [sp, #40]	; 0x28
   163a8:	ldr	r8, [sp, #80]	; 0x50
   163ac:	str	r3, [r5, #4]
   163b0:	ldr	r7, [sp, #84]	; 0x54
   163b4:	mvn	r3, #0
   163b8:	mov	r2, fp
   163bc:	ldr	r6, [sp, #44]	; 0x2c
   163c0:	ldr	sl, [r4]
   163c4:	ldr	r5, [r4, #4]
   163c8:	orr	r6, r6, #1
   163cc:	stm	sp, {r1, r6}
   163d0:	add	r1, sp, #48	; 0x30
   163d4:	str	r8, [sp, #12]
   163d8:	mov	r0, r5
   163dc:	str	r1, [sp, #8]
   163e0:	mov	r1, sl
   163e4:	str	r7, [sp, #16]
   163e8:	bl	13150 <__assert_fail@plt+0x1fc4>
   163ec:	cmp	sl, r0
   163f0:	bhi	16454 <__assert_fail@plt+0x52c8>
   163f4:	add	r7, r0, #1
   163f8:	movw	r3, #41488	; 0xa210
   163fc:	movt	r3, #2
   16400:	cmp	r5, r3
   16404:	str	r7, [r4]
   16408:	beq	16414 <__assert_fail@plt+0x5288>
   1640c:	mov	r0, r5
   16410:	bl	12d94 <__assert_fail@plt+0x1c08>
   16414:	mov	r0, r7
   16418:	bl	174cc <__assert_fail@plt+0x6340>
   1641c:	ldr	r3, [sp, #40]	; 0x28
   16420:	mov	r2, fp
   16424:	mov	r1, r7
   16428:	mov	r5, r0
   1642c:	ldr	lr, [sp, #80]	; 0x50
   16430:	ldr	ip, [sp, #84]	; 0x54
   16434:	str	r0, [r4, #4]
   16438:	add	r4, sp, #48	; 0x30
   1643c:	stm	sp, {r3, r6}
   16440:	mvn	r3, #0
   16444:	str	r4, [sp, #8]
   16448:	str	lr, [sp, #12]
   1644c:	str	ip, [sp, #16]
   16450:	bl	13150 <__assert_fail@plt+0x1fc4>
   16454:	ldr	r3, [sp, #28]
   16458:	mov	r0, r5
   1645c:	str	r3, [r9]
   16460:	add	sp, sp, #92	; 0x5c
   16464:	ldrd	r4, [sp]
   16468:	ldrd	r6, [sp, #8]
   1646c:	ldrd	r8, [sp, #16]
   16470:	ldrd	sl, [sp, #24]
   16474:	add	sp, sp, #32
   16478:	pop	{pc}		; (ldr pc, [sp], #4)
   1647c:	mov	r1, #8
   16480:	mvn	r3, #-2147483648	; 0x80000000
   16484:	mov	r0, r6
   16488:	str	r1, [sp]
   1648c:	add	r1, sp, #36	; 0x24
   16490:	bl	17770 <__assert_fail@plt+0x65e4>
   16494:	ldrd	r2, [r5, #8]
   16498:	mov	r4, r0
   1649c:	str	r0, [r5]
   164a0:	strd	r2, [r0]
   164a4:	b	16384 <__assert_fail@plt+0x51f8>
   164a8:	bl	11174 <abort@plt>
   164ac:	andeq	sl, r2, r0, lsl r3
   164b0:	ldr	ip, [pc, #536]	; 166d0 <__assert_fail@plt+0x5544>
   164b4:	cmp	r0, #0
   164b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   164bc:	ldrd	r4, [ip, #16]
   164c0:	strd	r6, [sp, #8]
   164c4:	mov	r6, r1
   164c8:	mov	r7, r0
   164cc:	strd	r8, [sp, #16]
   164d0:	mov	r9, #10
   164d4:	strd	sl, [sp, #24]
   164d8:	mov	sl, r2
   164dc:	mov	fp, r3
   164e0:	str	lr, [sp, #32]
   164e4:	clz	lr, r1
   164e8:	sub	sp, sp, #92	; 0x5c
   164ec:	ldrd	r2, [ip]
   164f0:	lsr	lr, lr, #5
   164f4:	moveq	lr, #1
   164f8:	ldrd	r0, [ip, #8]
   164fc:	cmp	lr, #0
   16500:	strd	r4, [sp, #56]	; 0x38
   16504:	ldrd	r4, [ip, #40]	; 0x28
   16508:	str	lr, [sp, #28]
   1650c:	strd	r2, [sp, #40]	; 0x28
   16510:	ldrd	r2, [ip, #24]
   16514:	strd	r0, [sp, #48]	; 0x30
   16518:	ldrd	r0, [ip, #32]
   1651c:	str	r9, [sp, #40]	; 0x28
   16520:	strd	r2, [sp, #64]	; 0x40
   16524:	strd	r4, [sp, #80]	; 0x50
   16528:	strd	r0, [sp, #72]	; 0x48
   1652c:	bne	166cc <__assert_fail@plt+0x5540>
   16530:	movw	r5, #41256	; 0xa128
   16534:	movt	r5, #2
   16538:	str	r7, [sp, #80]	; 0x50
   1653c:	str	r6, [sp, #84]	; 0x54
   16540:	bl	11090 <__errno_location@plt>
   16544:	ldr	r3, [r0]
   16548:	mov	r8, r0
   1654c:	ldr	r2, [r5, #4]
   16550:	ldr	r4, [r5]
   16554:	str	r3, [sp, #24]
   16558:	cmp	r2, #0
   1655c:	movgt	r1, r9
   16560:	bgt	165c8 <__assert_fail@plt+0x543c>
   16564:	add	r3, r5, #8
   16568:	str	r2, [sp, #36]	; 0x24
   1656c:	rsb	r2, r2, #1
   16570:	cmp	r4, r3
   16574:	beq	166a0 <__assert_fail@plt+0x5514>
   16578:	mov	r1, #8
   1657c:	mov	r0, r4
   16580:	mvn	r3, #-2147483648	; 0x80000000
   16584:	str	r1, [sp]
   16588:	add	r1, sp, #36	; 0x24
   1658c:	bl	17770 <__assert_fail@plt+0x65e4>
   16590:	mov	r4, r0
   16594:	str	r0, [r5]
   16598:	ldr	r0, [r5, #4]
   1659c:	mov	r1, #0
   165a0:	ldr	r2, [sp, #36]	; 0x24
   165a4:	sub	r2, r2, r0
   165a8:	add	r0, r4, r0, lsl #3
   165ac:	lsl	r2, r2, #3
   165b0:	bl	110b4 <memset@plt>
   165b4:	ldr	r3, [sp, #36]	; 0x24
   165b8:	ldr	r1, [sp, #40]	; 0x28
   165bc:	ldr	r7, [sp, #80]	; 0x50
   165c0:	str	r3, [r5, #4]
   165c4:	ldr	r6, [sp, #84]	; 0x54
   165c8:	mov	r3, fp
   165cc:	mov	r2, sl
   165d0:	ldr	r0, [sp, #44]	; 0x2c
   165d4:	ldr	r9, [r4]
   165d8:	ldr	r5, [r4, #4]
   165dc:	orr	r0, r0, #1
   165e0:	str	r1, [sp]
   165e4:	add	r1, sp, #48	; 0x30
   165e8:	str	r0, [sp, #4]
   165ec:	str	r1, [sp, #8]
   165f0:	mov	r1, r9
   165f4:	str	r7, [sp, #12]
   165f8:	str	r6, [sp, #16]
   165fc:	str	r0, [sp, #28]
   16600:	mov	r0, r5
   16604:	bl	13150 <__assert_fail@plt+0x1fc4>
   16608:	cmp	r9, r0
   1660c:	bhi	16678 <__assert_fail@plt+0x54ec>
   16610:	add	r6, r0, #1
   16614:	movw	r3, #41488	; 0xa210
   16618:	movt	r3, #2
   1661c:	cmp	r5, r3
   16620:	str	r6, [r4]
   16624:	beq	16630 <__assert_fail@plt+0x54a4>
   16628:	mov	r0, r5
   1662c:	bl	12d94 <__assert_fail@plt+0x1c08>
   16630:	mov	r0, r6
   16634:	bl	174cc <__assert_fail@plt+0x6340>
   16638:	ldr	lr, [sp, #40]	; 0x28
   1663c:	mov	r1, r6
   16640:	mov	r3, fp
   16644:	mov	r2, sl
   16648:	mov	r5, r0
   1664c:	ldr	r6, [sp, #80]	; 0x50
   16650:	ldr	ip, [sp, #84]	; 0x54
   16654:	str	r0, [r4, #4]
   16658:	str	lr, [sp]
   1665c:	ldr	lr, [sp, #28]
   16660:	str	lr, [sp, #4]
   16664:	add	lr, sp, #48	; 0x30
   16668:	str	r6, [sp, #12]
   1666c:	str	lr, [sp, #8]
   16670:	str	ip, [sp, #16]
   16674:	bl	13150 <__assert_fail@plt+0x1fc4>
   16678:	ldr	r3, [sp, #24]
   1667c:	mov	r0, r5
   16680:	str	r3, [r8]
   16684:	add	sp, sp, #92	; 0x5c
   16688:	ldrd	r4, [sp]
   1668c:	ldrd	r6, [sp, #8]
   16690:	ldrd	r8, [sp, #16]
   16694:	ldrd	sl, [sp, #24]
   16698:	add	sp, sp, #32
   1669c:	pop	{pc}		; (ldr pc, [sp], #4)
   166a0:	mov	r1, #8
   166a4:	mvn	r3, #-2147483648	; 0x80000000
   166a8:	ldr	r0, [sp, #28]
   166ac:	str	r1, [sp]
   166b0:	add	r1, sp, #36	; 0x24
   166b4:	bl	17770 <__assert_fail@plt+0x65e4>
   166b8:	ldrd	r2, [r5, #8]
   166bc:	mov	r4, r0
   166c0:	str	r0, [r5]
   166c4:	strd	r2, [r0]
   166c8:	b	16598 <__assert_fail@plt+0x540c>
   166cc:	bl	11174 <abort@plt>
   166d0:	andeq	sl, r2, r0, lsl r3
   166d4:	ldr	r3, [pc]	; 166dc <__assert_fail@plt+0x5550>
   166d8:	b	14b3c <__assert_fail@plt+0x39b0>
   166dc:	andeq	sl, r2, r8, lsr r1
   166e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166e4:	movw	r4, #41256	; 0xa128
   166e8:	movt	r4, #2
   166ec:	strd	r6, [sp, #8]
   166f0:	strd	r8, [sp, #16]
   166f4:	strd	sl, [sp, #24]
   166f8:	mov	sl, r0
   166fc:	mov	fp, r1
   16700:	str	lr, [sp, #32]
   16704:	sub	sp, sp, #44	; 0x2c
   16708:	bl	11090 <__errno_location@plt>
   1670c:	ldr	r3, [r0]
   16710:	mov	r8, r0
   16714:	ldr	r2, [r4, #4]
   16718:	ldr	r5, [r4]
   1671c:	str	r3, [sp, #28]
   16720:	cmp	r2, #0
   16724:	bgt	16780 <__assert_fail@plt+0x55f4>
   16728:	add	r3, r4, #8
   1672c:	str	r2, [sp, #36]	; 0x24
   16730:	rsb	r2, r2, #1
   16734:	cmp	r5, r3
   16738:	beq	1685c <__assert_fail@plt+0x56d0>
   1673c:	mov	r1, #8
   16740:	mov	r0, r5
   16744:	mvn	r3, #-2147483648	; 0x80000000
   16748:	str	r1, [sp]
   1674c:	add	r1, sp, #36	; 0x24
   16750:	bl	17770 <__assert_fail@plt+0x65e4>
   16754:	mov	r5, r0
   16758:	str	r0, [r4]
   1675c:	ldr	r0, [r4, #4]
   16760:	mov	r1, #0
   16764:	ldr	r2, [sp, #36]	; 0x24
   16768:	sub	r2, r2, r0
   1676c:	add	r0, r5, r0, lsl #3
   16770:	lsl	r2, r2, #3
   16774:	bl	110b4 <memset@plt>
   16778:	ldr	r3, [sp, #36]	; 0x24
   1677c:	str	r3, [r4, #4]
   16780:	ldr	ip, [r4, #16]
   16784:	mov	r3, fp
   16788:	mov	r2, sl
   1678c:	ldr	r7, [r4, #20]
   16790:	ldr	r0, [pc, #240]	; 16888 <__assert_fail@plt+0x56fc>
   16794:	ldr	r9, [r5]
   16798:	orr	r7, r7, #1
   1679c:	ldr	r6, [r5, #4]
   167a0:	str	ip, [sp]
   167a4:	ldr	ip, [r4, #56]	; 0x38
   167a8:	mov	r1, r9
   167ac:	str	r7, [sp, #4]
   167b0:	ldr	lr, [r4, #60]	; 0x3c
   167b4:	str	r0, [sp, #8]
   167b8:	mov	r0, r6
   167bc:	str	ip, [sp, #12]
   167c0:	str	lr, [sp, #16]
   167c4:	bl	13150 <__assert_fail@plt+0x1fc4>
   167c8:	cmp	r9, r0
   167cc:	bhi	16834 <__assert_fail@plt+0x56a8>
   167d0:	add	r9, r0, #1
   167d4:	movw	r3, #41488	; 0xa210
   167d8:	movt	r3, #2
   167dc:	cmp	r6, r3
   167e0:	str	r9, [r5]
   167e4:	beq	167f0 <__assert_fail@plt+0x5664>
   167e8:	mov	r0, r6
   167ec:	bl	12d94 <__assert_fail@plt+0x1c08>
   167f0:	mov	r0, r9
   167f4:	bl	174cc <__assert_fail@plt+0x6340>
   167f8:	ldr	ip, [r4, #16]
   167fc:	mov	r1, r9
   16800:	mov	r3, fp
   16804:	mov	r2, sl
   16808:	mov	r6, r0
   1680c:	ldr	r9, [r4, #56]	; 0x38
   16810:	ldr	lr, [r4, #60]	; 0x3c
   16814:	str	r0, [r5, #4]
   16818:	str	ip, [sp]
   1681c:	ldr	ip, [pc, #100]	; 16888 <__assert_fail@plt+0x56fc>
   16820:	str	r7, [sp, #4]
   16824:	str	ip, [sp, #8]
   16828:	str	r9, [sp, #12]
   1682c:	str	lr, [sp, #16]
   16830:	bl	13150 <__assert_fail@plt+0x1fc4>
   16834:	ldr	r3, [sp, #28]
   16838:	mov	r0, r6
   1683c:	str	r3, [r8]
   16840:	add	sp, sp, #44	; 0x2c
   16844:	ldrd	r4, [sp]
   16848:	ldrd	r6, [sp, #8]
   1684c:	ldrd	r8, [sp, #16]
   16850:	ldrd	sl, [sp, #24]
   16854:	add	sp, sp, #32
   16858:	pop	{pc}		; (ldr pc, [sp], #4)
   1685c:	mov	r0, #8
   16860:	mvn	r3, #-2147483648	; 0x80000000
   16864:	add	r1, sp, #36	; 0x24
   16868:	str	r0, [sp]
   1686c:	mov	r0, #0
   16870:	bl	17770 <__assert_fail@plt+0x65e4>
   16874:	ldrd	r2, [r4, #8]
   16878:	mov	r5, r0
   1687c:	str	r0, [r4]
   16880:	strd	r2, [r0]
   16884:	b	1675c <__assert_fail@plt+0x55d0>
   16888:	andeq	sl, r2, r0, asr #2
   1688c:	ldr	r3, [pc, #4]	; 16898 <__assert_fail@plt+0x570c>
   16890:	mvn	r2, #0
   16894:	b	14b3c <__assert_fail@plt+0x39b0>
   16898:	andeq	sl, r2, r8, lsr r1
   1689c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   168a0:	movw	r4, #41256	; 0xa128
   168a4:	movt	r4, #2
   168a8:	strd	r6, [sp, #8]
   168ac:	strd	r8, [sp, #16]
   168b0:	strd	sl, [sp, #24]
   168b4:	mov	sl, r0
   168b8:	str	lr, [sp, #32]
   168bc:	sub	sp, sp, #44	; 0x2c
   168c0:	bl	11090 <__errno_location@plt>
   168c4:	ldr	r3, [r0]
   168c8:	mov	r8, r0
   168cc:	ldr	r2, [r4, #4]
   168d0:	ldr	r5, [r4]
   168d4:	str	r3, [sp, #28]
   168d8:	cmp	r2, #0
   168dc:	bgt	16938 <__assert_fail@plt+0x57ac>
   168e0:	add	r3, r4, #8
   168e4:	str	r2, [sp, #36]	; 0x24
   168e8:	rsb	r2, r2, #1
   168ec:	cmp	r5, r3
   168f0:	beq	16a00 <__assert_fail@plt+0x5874>
   168f4:	mov	r1, #8
   168f8:	mov	r0, r5
   168fc:	mvn	r3, #-2147483648	; 0x80000000
   16900:	str	r1, [sp]
   16904:	add	r1, sp, #36	; 0x24
   16908:	bl	17770 <__assert_fail@plt+0x65e4>
   1690c:	mov	r5, r0
   16910:	str	r0, [r4]
   16914:	ldr	r0, [r4, #4]
   16918:	mov	r1, #0
   1691c:	ldr	r2, [sp, #36]	; 0x24
   16920:	sub	r2, r2, r0
   16924:	add	r0, r5, r0, lsl #3
   16928:	lsl	r2, r2, #3
   1692c:	bl	110b4 <memset@plt>
   16930:	ldr	r3, [sp, #36]	; 0x24
   16934:	str	r3, [r4, #4]
   16938:	ldr	ip, [r4, #16]
   1693c:	mvn	r3, #0
   16940:	mov	r2, sl
   16944:	ldr	r7, [r4, #20]
   16948:	ldr	fp, [pc, #220]	; 16a2c <__assert_fail@plt+0x58a0>
   1694c:	ldr	r9, [r5]
   16950:	orr	r7, r7, #1
   16954:	ldr	r6, [r5, #4]
   16958:	str	ip, [sp]
   1695c:	ldr	ip, [r4, #56]	; 0x38
   16960:	mov	r1, r9
   16964:	stmib	sp, {r7, fp}
   16968:	ldr	lr, [r4, #60]	; 0x3c
   1696c:	mov	r0, r6
   16970:	str	ip, [sp, #12]
   16974:	str	lr, [sp, #16]
   16978:	bl	13150 <__assert_fail@plt+0x1fc4>
   1697c:	cmp	r9, r0
   16980:	bhi	169d8 <__assert_fail@plt+0x584c>
   16984:	add	r9, r0, #1
   16988:	movw	r3, #41488	; 0xa210
   1698c:	movt	r3, #2
   16990:	cmp	r6, r3
   16994:	str	r9, [r5]
   16998:	beq	169a4 <__assert_fail@plt+0x5818>
   1699c:	mov	r0, r6
   169a0:	bl	12d94 <__assert_fail@plt+0x1c08>
   169a4:	mov	r0, r9
   169a8:	bl	174cc <__assert_fail@plt+0x6340>
   169ac:	ldr	r3, [r4, #16]
   169b0:	mov	r2, sl
   169b4:	mov	r1, r9
   169b8:	mov	r6, r0
   169bc:	ldr	lr, [r4, #56]	; 0x38
   169c0:	ldr	ip, [r4, #60]	; 0x3c
   169c4:	str	r0, [r5, #4]
   169c8:	stm	sp, {r3, r7, fp, lr}
   169cc:	mvn	r3, #0
   169d0:	str	ip, [sp, #16]
   169d4:	bl	13150 <__assert_fail@plt+0x1fc4>
   169d8:	ldr	r3, [sp, #28]
   169dc:	mov	r0, r6
   169e0:	str	r3, [r8]
   169e4:	add	sp, sp, #44	; 0x2c
   169e8:	ldrd	r4, [sp]
   169ec:	ldrd	r6, [sp, #8]
   169f0:	ldrd	r8, [sp, #16]
   169f4:	ldrd	sl, [sp, #24]
   169f8:	add	sp, sp, #32
   169fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16a00:	mov	r0, #8
   16a04:	mvn	r3, #-2147483648	; 0x80000000
   16a08:	add	r1, sp, #36	; 0x24
   16a0c:	str	r0, [sp]
   16a10:	mov	r0, #0
   16a14:	bl	17770 <__assert_fail@plt+0x65e4>
   16a18:	ldrd	r2, [r4, #8]
   16a1c:	mov	r5, r0
   16a20:	str	r0, [r4]
   16a24:	strd	r2, [r0]
   16a28:	b	16914 <__assert_fail@plt+0x5788>
   16a2c:	andeq	sl, r2, r0, asr #2
   16a30:	strd	r4, [sp, #-16]!
   16a34:	mov	r5, r0
   16a38:	mov	r0, #33	; 0x21
   16a3c:	str	r6, [sp, #8]
   16a40:	str	lr, [sp, #12]
   16a44:	bl	17484 <__assert_fail@plt+0x62f8>
   16a48:	mov	r4, r0
   16a4c:	add	r1, r5, #44	; 0x2c
   16a50:	mov	r2, #32
   16a54:	mov	r5, #0
   16a58:	bl	110c0 <strncpy@plt>
   16a5c:	mov	r0, r4
   16a60:	strb	r5, [r4, #32]
   16a64:	bl	11078 <strlen@plt>
   16a68:	add	r0, r4, r0
   16a6c:	cmp	r4, r0
   16a70:	bcs	16a80 <__assert_fail@plt+0x58f4>
   16a74:	ldrb	r3, [r0, #-1]
   16a78:	cmp	r3, #32
   16a7c:	beq	16a94 <__assert_fail@plt+0x5908>
   16a80:	mov	r0, r4
   16a84:	ldrd	r4, [sp]
   16a88:	ldr	r6, [sp, #8]
   16a8c:	add	sp, sp, #12
   16a90:	pop	{pc}		; (ldr pc, [sp], #4)
   16a94:	sub	r0, r0, #1
   16a98:	cmp	r0, r4
   16a9c:	strb	r5, [r0]
   16aa0:	beq	16a80 <__assert_fail@plt+0x58f4>
   16aa4:	ldrb	r3, [r0, #-1]!
   16aa8:	cmp	r3, #32
   16aac:	bne	16a80 <__assert_fail@plt+0x58f4>
   16ab0:	b	16a98 <__assert_fail@plt+0x590c>
   16ab4:	mov	ip, #0
   16ab8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16abc:	strd	r6, [sp, #8]
   16ac0:	mov	r5, ip
   16ac4:	mov	r7, ip
   16ac8:	strd	r8, [sp, #16]
   16acc:	and	r8, r3, #2
   16ad0:	mov	r9, r2
   16ad4:	strd	sl, [sp, #24]
   16ad8:	and	r6, r3, #1
   16adc:	mov	sl, r1
   16ae0:	str	lr, [sp, #32]
   16ae4:	sub	sp, sp, #20
   16ae8:	mov	fp, #384	; 0x180
   16aec:	str	ip, [sp, #12]
   16af0:	bl	10ed4 <utmpxname@plt>
   16af4:	bl	10f64 <setutxent@plt>
   16af8:	cmp	r8, #0
   16afc:	bne	16b58 <__assert_fail@plt+0x59cc>
   16b00:	cmp	r6, #0
   16b04:	beq	16c70 <__assert_fail@plt+0x5ae4>
   16b08:	bl	11180 <getutxent@plt>
   16b0c:	subs	r4, r0, #0
   16b10:	beq	16b90 <__assert_fail@plt+0x5a04>
   16b14:	ldrb	r3, [r4, #44]	; 0x2c
   16b18:	cmp	r3, #0
   16b1c:	beq	16b2c <__assert_fail@plt+0x59a0>
   16b20:	ldrsh	r3, [r4]
   16b24:	cmp	r3, #7
   16b28:	beq	16bbc <__assert_fail@plt+0x5a30>
   16b2c:	ldr	r3, [sp, #12]
   16b30:	cmp	r3, r5
   16b34:	beq	16bf8 <__assert_fail@plt+0x5a6c>
   16b38:	add	r0, r5, r5, lsl #1
   16b3c:	mov	r1, r4
   16b40:	mov	r2, #384	; 0x180
   16b44:	add	r5, r5, #1
   16b48:	add	r0, r7, r0, lsl #7
   16b4c:	bl	10f04 <memcpy@plt>
   16b50:	cmp	r8, #0
   16b54:	beq	16b00 <__assert_fail@plt+0x5974>
   16b58:	cmp	r6, #0
   16b5c:	bne	16c48 <__assert_fail@plt+0x5abc>
   16b60:	bl	11180 <getutxent@plt>
   16b64:	subs	r4, r0, #0
   16b68:	beq	16b90 <__assert_fail@plt+0x5a04>
   16b6c:	ldrb	r3, [r4, #44]	; 0x2c
   16b70:	cmp	r3, #0
   16b74:	beq	16b60 <__assert_fail@plt+0x59d4>
   16b78:	ldrsh	r3, [r4]
   16b7c:	cmp	r3, #7
   16b80:	beq	16b2c <__assert_fail@plt+0x59a0>
   16b84:	bl	11180 <getutxent@plt>
   16b88:	subs	r4, r0, #0
   16b8c:	bne	16b6c <__assert_fail@plt+0x59e0>
   16b90:	bl	11108 <endutxent@plt>
   16b94:	mov	r0, #0
   16b98:	str	r5, [sl]
   16b9c:	str	r7, [r9]
   16ba0:	add	sp, sp, #20
   16ba4:	ldrd	r4, [sp]
   16ba8:	ldrd	r6, [sp, #8]
   16bac:	ldrd	r8, [sp, #16]
   16bb0:	ldrd	sl, [sp, #24]
   16bb4:	add	sp, sp, #32
   16bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bbc:	ldr	r3, [r4, #4]
   16bc0:	mov	r1, #0
   16bc4:	cmp	r3, r1
   16bc8:	mov	r0, r3
   16bcc:	ble	16b2c <__assert_fail@plt+0x59a0>
   16bd0:	bl	11048 <kill@plt>
   16bd4:	cmp	r0, #0
   16bd8:	bge	16b2c <__assert_fail@plt+0x59a0>
   16bdc:	bl	11090 <__errno_location@plt>
   16be0:	ldr	r3, [r0]
   16be4:	cmp	r3, #3
   16be8:	beq	16b08 <__assert_fail@plt+0x597c>
   16bec:	ldr	r3, [sp, #12]
   16bf0:	cmp	r3, r5
   16bf4:	bne	16b38 <__assert_fail@plt+0x59ac>
   16bf8:	mov	r0, r7
   16bfc:	mvn	r3, #0
   16c00:	str	fp, [sp]
   16c04:	mov	r2, #1
   16c08:	add	r1, sp, #12
   16c0c:	bl	17770 <__assert_fail@plt+0x65e4>
   16c10:	mov	r7, r0
   16c14:	b	16b38 <__assert_fail@plt+0x59ac>
   16c18:	ldr	r3, [r4, #4]
   16c1c:	mov	r1, #0
   16c20:	cmp	r3, r1
   16c24:	mov	r0, r3
   16c28:	ble	16b2c <__assert_fail@plt+0x59a0>
   16c2c:	bl	11048 <kill@plt>
   16c30:	cmp	r0, #0
   16c34:	bge	16b2c <__assert_fail@plt+0x59a0>
   16c38:	bl	11090 <__errno_location@plt>
   16c3c:	ldr	r3, [r0]
   16c40:	cmp	r3, #3
   16c44:	bne	16b2c <__assert_fail@plt+0x59a0>
   16c48:	bl	11180 <getutxent@plt>
   16c4c:	subs	r4, r0, #0
   16c50:	beq	16b90 <__assert_fail@plt+0x5a04>
   16c54:	ldrb	r3, [r4, #44]	; 0x2c
   16c58:	cmp	r3, #0
   16c5c:	beq	16c48 <__assert_fail@plt+0x5abc>
   16c60:	ldrsh	r3, [r4]
   16c64:	cmp	r3, #7
   16c68:	bne	16c48 <__assert_fail@plt+0x5abc>
   16c6c:	b	16c18 <__assert_fail@plt+0x5a8c>
   16c70:	bl	11180 <getutxent@plt>
   16c74:	subs	r4, r0, #0
   16c78:	bne	16b2c <__assert_fail@plt+0x59a0>
   16c7c:	b	16b90 <__assert_fail@plt+0x5a04>
   16c80:	strd	r4, [sp, #-16]!
   16c84:	mov	r5, r1
   16c88:	mov	r1, #0
   16c8c:	mov	r4, r2
   16c90:	str	r6, [sp, #8]
   16c94:	str	lr, [sp, #12]
   16c98:	bl	11114 <setlocale@plt>
   16c9c:	subs	r6, r0, #0
   16ca0:	beq	16d20 <__assert_fail@plt+0x5b94>
   16ca4:	bl	11078 <strlen@plt>
   16ca8:	cmp	r4, r0
   16cac:	bhi	16ccc <__assert_fail@plt+0x5b40>
   16cb0:	cmp	r4, #0
   16cb4:	moveq	r0, #34	; 0x22
   16cb8:	bne	16cf0 <__assert_fail@plt+0x5b64>
   16cbc:	ldrd	r4, [sp]
   16cc0:	ldr	r6, [sp, #8]
   16cc4:	add	sp, sp, #12
   16cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ccc:	add	r2, r0, #1
   16cd0:	mov	r1, r6
   16cd4:	mov	r0, r5
   16cd8:	bl	10f04 <memcpy@plt>
   16cdc:	ldrd	r4, [sp]
   16ce0:	mov	r0, #0
   16ce4:	ldr	r6, [sp, #8]
   16ce8:	add	sp, sp, #12
   16cec:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf0:	sub	r4, r4, #1
   16cf4:	mov	r1, r6
   16cf8:	mov	r2, r4
   16cfc:	mov	r0, r5
   16d00:	bl	10f04 <memcpy@plt>
   16d04:	mov	r3, #0
   16d08:	mov	r0, #34	; 0x22
   16d0c:	strb	r3, [r5, r4]
   16d10:	ldrd	r4, [sp]
   16d14:	ldr	r6, [sp, #8]
   16d18:	add	sp, sp, #12
   16d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d20:	cmp	r4, #0
   16d24:	mov	r0, #22
   16d28:	strbne	r6, [r5]
   16d2c:	ldrd	r4, [sp]
   16d30:	ldr	r6, [sp, #8]
   16d34:	add	sp, sp, #12
   16d38:	pop	{pc}		; (ldr pc, [sp], #4)
   16d3c:	mov	r1, #0
   16d40:	b	11114 <setlocale@plt>
   16d44:	cmp	r1, #0
   16d48:	strd	r4, [sp, #-16]!
   16d4c:	mov	ip, r3
   16d50:	str	r6, [sp, #8]
   16d54:	mov	r4, r0
   16d58:	str	lr, [sp, #12]
   16d5c:	sub	sp, sp, #32
   16d60:	ldr	r5, [sp, #48]	; 0x30
   16d64:	ldr	r6, [sp, #52]	; 0x34
   16d68:	beq	16eac <__assert_fail@plt+0x5d20>
   16d6c:	mov	r3, r1
   16d70:	mov	r1, #1
   16d74:	stm	sp, {r2, ip}
   16d78:	movw	r2, #36108	; 0x8d0c
   16d7c:	movt	r2, #1
   16d80:	bl	110e4 <__fprintf_chk@plt>
   16d84:	mov	r2, #5
   16d88:	movw	r1, #36128	; 0x8d20
   16d8c:	movt	r1, #1
   16d90:	mov	r0, #0
   16d94:	bl	10f4c <dcgettext@plt>
   16d98:	movw	ip, #2022	; 0x7e6
   16d9c:	mov	r3, r0
   16da0:	mov	r1, #1
   16da4:	movw	r2, #36856	; 0x8ff8
   16da8:	movt	r2, #1
   16dac:	mov	r0, r4
   16db0:	str	ip, [sp]
   16db4:	bl	110e4 <__fprintf_chk@plt>
   16db8:	mov	r1, r4
   16dbc:	mov	r0, #10
   16dc0:	bl	10f40 <fputc_unlocked@plt>
   16dc4:	mov	r2, #5
   16dc8:	movw	r1, #36132	; 0x8d24
   16dcc:	movt	r1, #1
   16dd0:	mov	r0, #0
   16dd4:	bl	10f4c <dcgettext@plt>
   16dd8:	mov	r2, r0
   16ddc:	mov	r1, #1
   16de0:	movw	r3, #36304	; 0x8dd0
   16de4:	movt	r3, #1
   16de8:	mov	r0, r4
   16dec:	bl	110e4 <__fprintf_chk@plt>
   16df0:	mov	r1, r4
   16df4:	mov	r0, #10
   16df8:	bl	10f40 <fputc_unlocked@plt>
   16dfc:	cmp	r6, #9
   16e00:	ldrls	pc, [pc, r6, lsl #2]
   16e04:	b	17118 <__assert_fail@plt+0x5f8c>
   16e08:	muleq	r1, r8, lr
   16e0c:	andeq	r6, r1, r8, asr #29
   16e10:	andeq	r6, r1, r4, lsl #30
   16e14:	andeq	r6, r1, r4, asr #30
   16e18:	andeq	r6, r1, ip, lsl #31
   16e1c:	andeq	r6, r1, r4, asr #31
   16e20:	andeq	r7, r1, ip
   16e24:	andeq	r7, r1, r0, rrx
   16e28:	strheq	r7, [r1], -r8
   16e2c:	andeq	r6, r1, r0, lsr lr
   16e30:	movw	r1, #36608	; 0x8f00
   16e34:	movt	r1, #1
   16e38:	mov	r2, #5
   16e3c:	mov	r0, #0
   16e40:	bl	10f4c <dcgettext@plt>
   16e44:	ldr	lr, [r5, #4]
   16e48:	mov	r2, r0
   16e4c:	mov	r1, #1
   16e50:	mov	r0, r4
   16e54:	ldr	r3, [r5, #8]
   16e58:	ldr	ip, [r5, #32]
   16e5c:	str	lr, [sp]
   16e60:	ldr	lr, [r5, #12]
   16e64:	str	ip, [sp, #28]
   16e68:	ldr	ip, [r5, #28]
   16e6c:	str	r3, [sp, #4]
   16e70:	ldr	r3, [r5, #16]
   16e74:	str	lr, [sp, #8]
   16e78:	ldr	lr, [r5, #20]
   16e7c:	str	ip, [sp, #24]
   16e80:	ldr	ip, [r5, #24]
   16e84:	str	r3, [sp, #12]
   16e88:	ldr	r3, [r5]
   16e8c:	str	lr, [sp, #16]
   16e90:	str	ip, [sp, #20]
   16e94:	bl	110e4 <__fprintf_chk@plt>
   16e98:	add	sp, sp, #32
   16e9c:	ldrd	r4, [sp]
   16ea0:	ldr	r6, [sp, #8]
   16ea4:	add	sp, sp, #12
   16ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   16eac:	mov	r3, r2
   16eb0:	mov	r1, #1
   16eb4:	str	ip, [sp]
   16eb8:	movw	r2, #36120	; 0x8d18
   16ebc:	movt	r2, #1
   16ec0:	bl	110e4 <__fprintf_chk@plt>
   16ec4:	b	16d84 <__assert_fail@plt+0x5bf8>
   16ec8:	mov	r2, #5
   16ecc:	movw	r1, #36340	; 0x8df4
   16ed0:	movt	r1, #1
   16ed4:	mov	r0, #0
   16ed8:	bl	10f4c <dcgettext@plt>
   16edc:	ldr	r3, [r5]
   16ee0:	mov	r2, r0
   16ee4:	mov	r1, #1
   16ee8:	mov	r0, r4
   16eec:	add	sp, sp, #32
   16ef0:	ldrd	r4, [sp]
   16ef4:	ldr	r6, [sp, #8]
   16ef8:	ldr	lr, [sp, #12]
   16efc:	add	sp, sp, #16
   16f00:	b	110e4 <__fprintf_chk@plt>
   16f04:	mov	r2, #5
   16f08:	movw	r1, #36356	; 0x8e04
   16f0c:	movt	r1, #1
   16f10:	mov	r0, #0
   16f14:	bl	10f4c <dcgettext@plt>
   16f18:	ldm	r5, {r3, ip}
   16f1c:	mov	r2, r0
   16f20:	mov	r1, #1
   16f24:	mov	r0, r4
   16f28:	str	ip, [sp, #48]	; 0x30
   16f2c:	add	sp, sp, #32
   16f30:	ldrd	r4, [sp]
   16f34:	ldr	r6, [sp, #8]
   16f38:	ldr	lr, [sp, #12]
   16f3c:	add	sp, sp, #16
   16f40:	b	110e4 <__fprintf_chk@plt>
   16f44:	mov	r2, #5
   16f48:	movw	r1, #36380	; 0x8e1c
   16f4c:	movt	r1, #1
   16f50:	mov	r0, #0
   16f54:	bl	10f4c <dcgettext@plt>
   16f58:	ldm	r5, {r3, lr}
   16f5c:	mov	r2, r0
   16f60:	mov	r1, #1
   16f64:	mov	r0, r4
   16f68:	ldr	ip, [r5, #8]
   16f6c:	str	lr, [sp, #48]	; 0x30
   16f70:	str	ip, [sp, #52]	; 0x34
   16f74:	add	sp, sp, #32
   16f78:	ldrd	r4, [sp]
   16f7c:	ldr	r6, [sp, #8]
   16f80:	ldr	lr, [sp, #12]
   16f84:	add	sp, sp, #16
   16f88:	b	110e4 <__fprintf_chk@plt>
   16f8c:	mov	r2, #5
   16f90:	movw	r1, #36408	; 0x8e38
   16f94:	movt	r1, #1
   16f98:	mov	r0, #0
   16f9c:	bl	10f4c <dcgettext@plt>
   16fa0:	ldmib	r5, {r3, ip, lr}
   16fa4:	mov	r2, r0
   16fa8:	mov	r1, #1
   16fac:	mov	r0, r4
   16fb0:	str	r3, [sp]
   16fb4:	ldr	r3, [r5]
   16fb8:	stmib	sp, {ip, lr}
   16fbc:	bl	110e4 <__fprintf_chk@plt>
   16fc0:	b	16e98 <__assert_fail@plt+0x5d0c>
   16fc4:	mov	r2, #5
   16fc8:	movw	r1, #36440	; 0x8e58
   16fcc:	movt	r1, #1
   16fd0:	mov	r0, #0
   16fd4:	bl	10f4c <dcgettext@plt>
   16fd8:	ldmib	r5, {ip, lr}
   16fdc:	mov	r2, r0
   16fe0:	mov	r1, #1
   16fe4:	mov	r0, r4
   16fe8:	ldr	r3, [r5, #16]
   16fec:	str	ip, [sp]
   16ff0:	ldr	ip, [r5, #12]
   16ff4:	str	r3, [sp, #12]
   16ff8:	ldr	r3, [r5]
   16ffc:	str	lr, [sp, #4]
   17000:	str	ip, [sp, #8]
   17004:	bl	110e4 <__fprintf_chk@plt>
   17008:	b	16e98 <__assert_fail@plt+0x5d0c>
   1700c:	mov	r2, #5
   17010:	movw	r1, #36476	; 0x8e7c
   17014:	movt	r1, #1
   17018:	mov	r0, #0
   1701c:	bl	10f4c <dcgettext@plt>
   17020:	ldr	lr, [r5, #4]
   17024:	mov	r2, r0
   17028:	mov	r1, #1
   1702c:	mov	r0, r4
   17030:	ldr	r3, [r5, #8]
   17034:	ldr	ip, [r5, #20]
   17038:	str	lr, [sp]
   1703c:	ldr	lr, [r5, #12]
   17040:	str	ip, [sp, #16]
   17044:	ldr	ip, [r5, #16]
   17048:	str	r3, [sp, #4]
   1704c:	ldr	r3, [r5]
   17050:	str	lr, [sp, #8]
   17054:	str	ip, [sp, #12]
   17058:	bl	110e4 <__fprintf_chk@plt>
   1705c:	b	16e98 <__assert_fail@plt+0x5d0c>
   17060:	mov	r2, #5
   17064:	movw	r1, #36516	; 0x8ea4
   17068:	movt	r1, #1
   1706c:	mov	r0, #0
   17070:	bl	10f4c <dcgettext@plt>
   17074:	ldmib	r5, {r3, ip}
   17078:	mov	r2, r0
   1707c:	mov	r1, #1
   17080:	mov	r0, r4
   17084:	ldr	lr, [r5, #24]
   17088:	str	r3, [sp]
   1708c:	ldr	r3, [r5, #12]
   17090:	str	lr, [sp, #20]
   17094:	ldr	lr, [r5, #20]
   17098:	str	ip, [sp, #4]
   1709c:	ldr	ip, [r5, #16]
   170a0:	str	r3, [sp, #8]
   170a4:	ldr	r3, [r5]
   170a8:	str	ip, [sp, #12]
   170ac:	str	lr, [sp, #16]
   170b0:	bl	110e4 <__fprintf_chk@plt>
   170b4:	b	16e98 <__assert_fail@plt+0x5d0c>
   170b8:	mov	r2, #5
   170bc:	movw	r1, #36560	; 0x8ed0
   170c0:	movt	r1, #1
   170c4:	mov	r0, #0
   170c8:	bl	10f4c <dcgettext@plt>
   170cc:	ldmib	r5, {ip, lr}
   170d0:	mov	r2, r0
   170d4:	mov	r1, #1
   170d8:	mov	r0, r4
   170dc:	ldr	r3, [r5, #28]
   170e0:	str	ip, [sp]
   170e4:	ldr	ip, [r5, #12]
   170e8:	str	r3, [sp, #24]
   170ec:	ldr	r3, [r5, #24]
   170f0:	str	lr, [sp, #4]
   170f4:	ldr	lr, [r5, #16]
   170f8:	str	ip, [sp, #8]
   170fc:	ldr	ip, [r5, #20]
   17100:	str	r3, [sp, #20]
   17104:	ldr	r3, [r5]
   17108:	str	lr, [sp, #12]
   1710c:	str	ip, [sp, #16]
   17110:	bl	110e4 <__fprintf_chk@plt>
   17114:	b	16e98 <__assert_fail@plt+0x5d0c>
   17118:	movw	r1, #36660	; 0x8f34
   1711c:	movt	r1, #1
   17120:	b	16e38 <__assert_fail@plt+0x5cac>
   17124:	strd	r4, [sp, #-12]!
   17128:	str	lr, [sp, #8]
   1712c:	sub	sp, sp, #12
   17130:	ldr	r5, [sp, #24]
   17134:	ldr	ip, [r5]
   17138:	cmp	ip, #0
   1713c:	beq	17158 <__assert_fail@plt+0x5fcc>
   17140:	mov	lr, r5
   17144:	mov	ip, #0
   17148:	ldr	r4, [lr, #4]!
   1714c:	add	ip, ip, #1
   17150:	cmp	r4, #0
   17154:	bne	17148 <__assert_fail@plt+0x5fbc>
   17158:	stm	sp, {r5, ip}
   1715c:	bl	16d44 <__assert_fail@plt+0x5bb8>
   17160:	add	sp, sp, #12
   17164:	ldrd	r4, [sp]
   17168:	add	sp, sp, #8
   1716c:	pop	{pc}		; (ldr pc, [sp], #4)
   17170:	push	{lr}		; (str lr, [sp, #-4]!)
   17174:	sub	sp, sp, #52	; 0x34
   17178:	ldr	ip, [sp, #56]	; 0x38
   1717c:	ldr	lr, [ip]
   17180:	cmp	lr, #0
   17184:	str	lr, [sp, #8]
   17188:	beq	17220 <__assert_fail@plt+0x6094>
   1718c:	ldr	lr, [ip, #4]
   17190:	cmp	lr, #0
   17194:	str	lr, [sp, #12]
   17198:	beq	17234 <__assert_fail@plt+0x60a8>
   1719c:	ldr	lr, [ip, #8]
   171a0:	cmp	lr, #0
   171a4:	str	lr, [sp, #16]
   171a8:	beq	1723c <__assert_fail@plt+0x60b0>
   171ac:	ldr	lr, [ip, #12]
   171b0:	cmp	lr, #0
   171b4:	str	lr, [sp, #20]
   171b8:	beq	17244 <__assert_fail@plt+0x60b8>
   171bc:	ldr	lr, [ip, #16]
   171c0:	cmp	lr, #0
   171c4:	str	lr, [sp, #24]
   171c8:	beq	1724c <__assert_fail@plt+0x60c0>
   171cc:	ldr	lr, [ip, #20]
   171d0:	cmp	lr, #0
   171d4:	str	lr, [sp, #28]
   171d8:	beq	17254 <__assert_fail@plt+0x60c8>
   171dc:	ldr	lr, [ip, #24]
   171e0:	cmp	lr, #0
   171e4:	str	lr, [sp, #32]
   171e8:	beq	1725c <__assert_fail@plt+0x60d0>
   171ec:	ldr	lr, [ip, #28]
   171f0:	cmp	lr, #0
   171f4:	str	lr, [sp, #36]	; 0x24
   171f8:	beq	17264 <__assert_fail@plt+0x60d8>
   171fc:	ldr	lr, [ip, #32]
   17200:	cmp	lr, #0
   17204:	str	lr, [sp, #40]	; 0x28
   17208:	beq	1726c <__assert_fail@plt+0x60e0>
   1720c:	ldr	ip, [ip, #36]	; 0x24
   17210:	cmp	ip, #0
   17214:	str	ip, [sp, #44]	; 0x2c
   17218:	movne	lr, #10
   1721c:	moveq	lr, #9
   17220:	add	ip, sp, #8
   17224:	stm	sp, {ip, lr}
   17228:	bl	16d44 <__assert_fail@plt+0x5bb8>
   1722c:	add	sp, sp, #52	; 0x34
   17230:	pop	{pc}		; (ldr pc, [sp], #4)
   17234:	mov	lr, #1
   17238:	b	17220 <__assert_fail@plt+0x6094>
   1723c:	mov	lr, #2
   17240:	b	17220 <__assert_fail@plt+0x6094>
   17244:	mov	lr, #3
   17248:	b	17220 <__assert_fail@plt+0x6094>
   1724c:	mov	lr, #4
   17250:	b	17220 <__assert_fail@plt+0x6094>
   17254:	mov	lr, #5
   17258:	b	17220 <__assert_fail@plt+0x6094>
   1725c:	mov	lr, #6
   17260:	b	17220 <__assert_fail@plt+0x6094>
   17264:	mov	lr, #7
   17268:	b	17220 <__assert_fail@plt+0x6094>
   1726c:	mov	lr, #8
   17270:	b	17220 <__assert_fail@plt+0x6094>
   17274:	push	{r3}		; (str r3, [sp, #-4]!)
   17278:	push	{lr}		; (str lr, [sp, #-4]!)
   1727c:	sub	sp, sp, #56	; 0x38
   17280:	ldr	ip, [sp, #64]	; 0x40
   17284:	add	r3, sp, #64	; 0x40
   17288:	str	r3, [sp, #12]
   1728c:	cmp	ip, #0
   17290:	str	ip, [sp, #16]
   17294:	beq	1732c <__assert_fail@plt+0x61a0>
   17298:	ldr	ip, [sp, #68]	; 0x44
   1729c:	cmp	ip, #0
   172a0:	str	ip, [sp, #20]
   172a4:	beq	17350 <__assert_fail@plt+0x61c4>
   172a8:	ldr	ip, [sp, #72]	; 0x48
   172ac:	cmp	ip, #0
   172b0:	str	ip, [sp, #24]
   172b4:	beq	17358 <__assert_fail@plt+0x61cc>
   172b8:	ldr	ip, [sp, #76]	; 0x4c
   172bc:	cmp	ip, #0
   172c0:	str	ip, [sp, #28]
   172c4:	beq	17360 <__assert_fail@plt+0x61d4>
   172c8:	ldr	ip, [sp, #80]	; 0x50
   172cc:	cmp	ip, #0
   172d0:	str	ip, [sp, #32]
   172d4:	beq	17368 <__assert_fail@plt+0x61dc>
   172d8:	ldr	ip, [sp, #84]	; 0x54
   172dc:	cmp	ip, #0
   172e0:	str	ip, [sp, #36]	; 0x24
   172e4:	beq	17370 <__assert_fail@plt+0x61e4>
   172e8:	ldr	ip, [sp, #88]	; 0x58
   172ec:	cmp	ip, #0
   172f0:	str	ip, [sp, #40]	; 0x28
   172f4:	beq	17378 <__assert_fail@plt+0x61ec>
   172f8:	ldr	ip, [sp, #92]	; 0x5c
   172fc:	cmp	ip, #0
   17300:	str	ip, [sp, #44]	; 0x2c
   17304:	beq	17380 <__assert_fail@plt+0x61f4>
   17308:	ldr	ip, [sp, #96]	; 0x60
   1730c:	cmp	ip, #0
   17310:	str	ip, [sp, #48]	; 0x30
   17314:	beq	17388 <__assert_fail@plt+0x61fc>
   17318:	ldr	r3, [sp, #100]	; 0x64
   1731c:	cmp	r3, #0
   17320:	str	r3, [sp, #52]	; 0x34
   17324:	movne	ip, #10
   17328:	moveq	ip, #9
   1732c:	ldr	r3, [sp, #60]	; 0x3c
   17330:	add	lr, sp, #16
   17334:	str	lr, [sp]
   17338:	str	ip, [sp, #4]
   1733c:	bl	16d44 <__assert_fail@plt+0x5bb8>
   17340:	add	sp, sp, #56	; 0x38
   17344:	pop	{lr}		; (ldr lr, [sp], #4)
   17348:	add	sp, sp, #4
   1734c:	bx	lr
   17350:	mov	ip, #1
   17354:	b	1732c <__assert_fail@plt+0x61a0>
   17358:	mov	ip, #2
   1735c:	b	1732c <__assert_fail@plt+0x61a0>
   17360:	mov	ip, #3
   17364:	b	1732c <__assert_fail@plt+0x61a0>
   17368:	mov	ip, #4
   1736c:	b	1732c <__assert_fail@plt+0x61a0>
   17370:	mov	ip, #5
   17374:	b	1732c <__assert_fail@plt+0x61a0>
   17378:	mov	ip, #6
   1737c:	b	1732c <__assert_fail@plt+0x61a0>
   17380:	mov	ip, #7
   17384:	b	1732c <__assert_fail@plt+0x61a0>
   17388:	mov	ip, #8
   1738c:	b	1732c <__assert_fail@plt+0x61a0>
   17390:	movw	r3, #41340	; 0xa17c
   17394:	movt	r3, #2
   17398:	str	r4, [sp, #-8]!
   1739c:	mov	r0, #10
   173a0:	ldr	r1, [r3]
   173a4:	str	lr, [sp, #4]
   173a8:	bl	10f40 <fputc_unlocked@plt>
   173ac:	mov	r2, #5
   173b0:	movw	r1, #36720	; 0x8f70
   173b4:	movt	r1, #1
   173b8:	mov	r0, #0
   173bc:	bl	10f4c <dcgettext@plt>
   173c0:	mov	r1, r0
   173c4:	movw	r2, #36740	; 0x8f84
   173c8:	movt	r2, #1
   173cc:	mov	r0, #1
   173d0:	bl	110cc <__printf_chk@plt>
   173d4:	mov	r2, #5
   173d8:	movw	r1, #36764	; 0x8f9c
   173dc:	movt	r1, #1
   173e0:	mov	r0, #0
   173e4:	bl	10f4c <dcgettext@plt>
   173e8:	mov	r1, r0
   173ec:	movw	r3, #35180	; 0x896c
   173f0:	movt	r3, #1
   173f4:	movw	r2, #35220	; 0x8994
   173f8:	movt	r2, #1
   173fc:	mov	r0, #1
   17400:	bl	110cc <__printf_chk@plt>
   17404:	mov	r2, #5
   17408:	movw	r1, #36784	; 0x8fb0
   1740c:	movt	r1, #1
   17410:	mov	r0, #0
   17414:	bl	10f4c <dcgettext@plt>
   17418:	mov	r1, r0
   1741c:	movw	r2, #36824	; 0x8fd8
   17420:	movt	r2, #1
   17424:	mov	r0, #1
   17428:	ldr	r4, [sp]
   1742c:	ldr	lr, [sp, #4]
   17430:	add	sp, sp, #8
   17434:	b	110cc <__printf_chk@plt>
   17438:	strd	r4, [sp, #-16]!
   1743c:	mov	r4, r0
   17440:	mov	r5, r2
   17444:	str	r6, [sp, #8]
   17448:	mov	r6, r1
   1744c:	str	lr, [sp, #12]
   17450:	bl	17eb0 <__assert_fail@plt+0x6d24>
   17454:	cmp	r0, #0
   17458:	beq	1746c <__assert_fail@plt+0x62e0>
   1745c:	ldrd	r4, [sp]
   17460:	ldr	r6, [sp, #8]
   17464:	add	sp, sp, #12
   17468:	pop	{pc}		; (ldr pc, [sp], #4)
   1746c:	cmp	r4, #0
   17470:	beq	17480 <__assert_fail@plt+0x62f4>
   17474:	cmp	r6, #0
   17478:	cmpne	r5, #0
   1747c:	beq	1745c <__assert_fail@plt+0x62d0>
   17480:	bl	17a3c <__assert_fail@plt+0x68b0>
   17484:	str	r4, [sp, #-8]!
   17488:	str	lr, [sp, #4]
   1748c:	bl	17af4 <__assert_fail@plt+0x6968>
   17490:	cmp	r0, #0
   17494:	beq	174a4 <__assert_fail@plt+0x6318>
   17498:	ldr	r4, [sp]
   1749c:	add	sp, sp, #4
   174a0:	pop	{pc}		; (ldr pc, [sp], #4)
   174a4:	bl	17a3c <__assert_fail@plt+0x68b0>
   174a8:	str	r4, [sp, #-8]!
   174ac:	str	lr, [sp, #4]
   174b0:	bl	17af4 <__assert_fail@plt+0x6968>
   174b4:	cmp	r0, #0
   174b8:	beq	174c8 <__assert_fail@plt+0x633c>
   174bc:	ldr	r4, [sp]
   174c0:	add	sp, sp, #4
   174c4:	pop	{pc}		; (ldr pc, [sp], #4)
   174c8:	bl	17a3c <__assert_fail@plt+0x68b0>
   174cc:	str	r4, [sp, #-8]!
   174d0:	str	lr, [sp, #4]
   174d4:	bl	17af4 <__assert_fail@plt+0x6968>
   174d8:	cmp	r0, #0
   174dc:	beq	174ec <__assert_fail@plt+0x6360>
   174e0:	ldr	r4, [sp]
   174e4:	add	sp, sp, #4
   174e8:	pop	{pc}		; (ldr pc, [sp], #4)
   174ec:	bl	17a3c <__assert_fail@plt+0x68b0>
   174f0:	strd	r4, [sp, #-16]!
   174f4:	mov	r5, r0
   174f8:	mov	r4, r1
   174fc:	str	r6, [sp, #8]
   17500:	str	lr, [sp, #12]
   17504:	bl	17b30 <__assert_fail@plt+0x69a4>
   17508:	cmp	r0, #0
   1750c:	beq	17520 <__assert_fail@plt+0x6394>
   17510:	ldrd	r4, [sp]
   17514:	ldr	r6, [sp, #8]
   17518:	add	sp, sp, #12
   1751c:	pop	{pc}		; (ldr pc, [sp], #4)
   17520:	adds	r4, r4, #0
   17524:	movne	r4, #1
   17528:	cmp	r5, #0
   1752c:	moveq	r4, #1
   17530:	cmp	r4, #0
   17534:	beq	17510 <__assert_fail@plt+0x6384>
   17538:	bl	17a3c <__assert_fail@plt+0x68b0>
   1753c:	cmp	r1, #0
   17540:	orreq	r1, r1, #1
   17544:	str	r4, [sp, #-8]!
   17548:	str	lr, [sp, #4]
   1754c:	bl	17b30 <__assert_fail@plt+0x69a4>
   17550:	cmp	r0, #0
   17554:	beq	17564 <__assert_fail@plt+0x63d8>
   17558:	ldr	r4, [sp]
   1755c:	add	sp, sp, #4
   17560:	pop	{pc}		; (ldr pc, [sp], #4)
   17564:	bl	17a3c <__assert_fail@plt+0x68b0>
   17568:	strd	r4, [sp, #-16]!
   1756c:	mov	r4, r0
   17570:	mov	r5, r2
   17574:	str	r6, [sp, #8]
   17578:	mov	r6, r1
   1757c:	str	lr, [sp, #12]
   17580:	bl	17eb0 <__assert_fail@plt+0x6d24>
   17584:	cmp	r0, #0
   17588:	beq	1759c <__assert_fail@plt+0x6410>
   1758c:	ldrd	r4, [sp]
   17590:	ldr	r6, [sp, #8]
   17594:	add	sp, sp, #12
   17598:	pop	{pc}		; (ldr pc, [sp], #4)
   1759c:	cmp	r4, #0
   175a0:	beq	175b0 <__assert_fail@plt+0x6424>
   175a4:	cmp	r6, #0
   175a8:	cmpne	r5, #0
   175ac:	beq	1758c <__assert_fail@plt+0x6400>
   175b0:	bl	17a3c <__assert_fail@plt+0x68b0>
   175b4:	cmp	r2, #0
   175b8:	cmpne	r1, #0
   175bc:	str	r4, [sp, #-8]!
   175c0:	moveq	r2, #1
   175c4:	str	lr, [sp, #4]
   175c8:	moveq	r1, r2
   175cc:	bl	17eb0 <__assert_fail@plt+0x6d24>
   175d0:	cmp	r0, #0
   175d4:	beq	175e4 <__assert_fail@plt+0x6458>
   175d8:	ldr	r4, [sp]
   175dc:	add	sp, sp, #4
   175e0:	pop	{pc}		; (ldr pc, [sp], #4)
   175e4:	bl	17a3c <__assert_fail@plt+0x68b0>
   175e8:	mov	r2, r1
   175ec:	mov	r1, r0
   175f0:	str	r4, [sp, #-8]!
   175f4:	mov	r0, #0
   175f8:	str	lr, [sp, #4]
   175fc:	bl	17eb0 <__assert_fail@plt+0x6d24>
   17600:	cmp	r0, #0
   17604:	beq	17614 <__assert_fail@plt+0x6488>
   17608:	ldr	r4, [sp]
   1760c:	add	sp, sp, #4
   17610:	pop	{pc}		; (ldr pc, [sp], #4)
   17614:	bl	17a3c <__assert_fail@plt+0x68b0>
   17618:	cmp	r1, #0
   1761c:	cmpne	r0, #0
   17620:	str	r4, [sp, #-8]!
   17624:	moveq	r2, #1
   17628:	movne	r2, r1
   1762c:	str	lr, [sp, #4]
   17630:	movne	r1, r0
   17634:	moveq	r1, r2
   17638:	mov	r0, #0
   1763c:	bl	17eb0 <__assert_fail@plt+0x6d24>
   17640:	cmp	r0, #0
   17644:	beq	17654 <__assert_fail@plt+0x64c8>
   17648:	ldr	r4, [sp]
   1764c:	add	sp, sp, #4
   17650:	pop	{pc}		; (ldr pc, [sp], #4)
   17654:	bl	17a3c <__assert_fail@plt+0x68b0>
   17658:	cmp	r0, #0
   1765c:	strd	r4, [sp, #-16]!
   17660:	mov	r5, r1
   17664:	ldr	r4, [r1]
   17668:	str	r6, [sp, #8]
   1766c:	str	lr, [sp, #12]
   17670:	beq	176b8 <__assert_fail@plt+0x652c>
   17674:	lsr	r3, r4, #1
   17678:	add	r3, r3, #1
   1767c:	adds	r4, r4, r3
   17680:	bcs	176b4 <__assert_fail@plt+0x6528>
   17684:	mov	r2, #1
   17688:	mov	r1, r4
   1768c:	bl	17eb0 <__assert_fail@plt+0x6d24>
   17690:	cmp	r0, #0
   17694:	beq	176ac <__assert_fail@plt+0x6520>
   17698:	ldr	r6, [sp, #8]
   1769c:	str	r4, [r5]
   176a0:	ldrd	r4, [sp]
   176a4:	add	sp, sp, #12
   176a8:	pop	{pc}		; (ldr pc, [sp], #4)
   176ac:	cmp	r4, #0
   176b0:	beq	17698 <__assert_fail@plt+0x650c>
   176b4:	bl	17a3c <__assert_fail@plt+0x68b0>
   176b8:	cmp	r4, #0
   176bc:	mov	r2, #1
   176c0:	moveq	r4, #64	; 0x40
   176c4:	mov	r1, r4
   176c8:	bl	17eb0 <__assert_fail@plt+0x6d24>
   176cc:	cmp	r0, #0
   176d0:	bne	17698 <__assert_fail@plt+0x650c>
   176d4:	b	176b4 <__assert_fail@plt+0x6528>
   176d8:	cmp	r0, #0
   176dc:	strd	r4, [sp, #-16]!
   176e0:	mov	r5, r1
   176e4:	ldr	r4, [r1]
   176e8:	str	r6, [sp, #8]
   176ec:	mov	r6, r2
   176f0:	str	lr, [sp, #12]
   176f4:	beq	1773c <__assert_fail@plt+0x65b0>
   176f8:	lsr	r3, r4, #1
   176fc:	add	r3, r3, #1
   17700:	adds	r4, r4, r3
   17704:	bcs	17738 <__assert_fail@plt+0x65ac>
   17708:	mov	r1, r4
   1770c:	bl	17eb0 <__assert_fail@plt+0x6d24>
   17710:	cmp	r0, #0
   17714:	beq	1772c <__assert_fail@plt+0x65a0>
   17718:	ldr	r6, [sp, #8]
   1771c:	str	r4, [r5]
   17720:	ldrd	r4, [sp]
   17724:	add	sp, sp, #12
   17728:	pop	{pc}		; (ldr pc, [sp], #4)
   1772c:	cmp	r4, #0
   17730:	cmpne	r6, #0
   17734:	beq	17718 <__assert_fail@plt+0x658c>
   17738:	bl	17a3c <__assert_fail@plt+0x68b0>
   1773c:	cmp	r4, #0
   17740:	bne	17754 <__assert_fail@plt+0x65c8>
   17744:	mov	r4, #64	; 0x40
   17748:	udiv	r4, r4, r2
   1774c:	cmp	r2, #64	; 0x40
   17750:	addhi	r4, r4, #1
   17754:	mov	r2, r6
   17758:	mov	r1, r4
   1775c:	mov	r0, #0
   17760:	bl	17eb0 <__assert_fail@plt+0x6d24>
   17764:	cmp	r0, #0
   17768:	bne	17718 <__assert_fail@plt+0x658c>
   1776c:	b	17738 <__assert_fail@plt+0x65ac>
   17770:	ldr	ip, [r1]
   17774:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17778:	strd	r6, [sp, #8]
   1777c:	mov	r7, r1
   17780:	mov	r6, r0
   17784:	str	r8, [sp, #16]
   17788:	mvn	r8, r3
   1778c:	lsr	r8, r8, #31
   17790:	str	lr, [sp, #20]
   17794:	asr	r1, ip, #1
   17798:	ldr	lr, [sp, #24]
   1779c:	adds	r4, ip, r1
   177a0:	mvnvs	r4, #-2147483648	; 0x80000000
   177a4:	cmp	r3, r4
   177a8:	movge	r1, #0
   177ac:	andlt	r1, r8, #1
   177b0:	cmp	r1, #0
   177b4:	movne	r4, r3
   177b8:	smull	r0, r1, r4, lr
   177bc:	cmp	r1, r0, asr #31
   177c0:	bne	17870 <__assert_fail@plt+0x66e4>
   177c4:	cmp	r0, #63	; 0x3f
   177c8:	mov	r5, r0
   177cc:	ble	1783c <__assert_fail@plt+0x66b0>
   177d0:	cmp	r6, #0
   177d4:	sub	r1, r4, ip
   177d8:	streq	r6, [r7]
   177dc:	cmp	r1, r2
   177e0:	bge	17810 <__assert_fail@plt+0x6684>
   177e4:	adds	r4, ip, r2
   177e8:	bvs	1786c <__assert_fail@plt+0x66e0>
   177ec:	cmp	r4, r3
   177f0:	movle	r3, #0
   177f4:	andgt	r3, r8, #1
   177f8:	cmp	r3, #0
   177fc:	bne	1786c <__assert_fail@plt+0x66e0>
   17800:	smull	r0, r1, r4, lr
   17804:	cmp	r1, r0, asr #31
   17808:	mov	r5, r0
   1780c:	bne	1786c <__assert_fail@plt+0x66e0>
   17810:	mov	r1, r5
   17814:	mov	r0, r6
   17818:	bl	17b30 <__assert_fail@plt+0x69a4>
   1781c:	cmp	r0, #0
   17820:	beq	17850 <__assert_fail@plt+0x66c4>
   17824:	ldr	r8, [sp, #16]
   17828:	str	r4, [r7]
   1782c:	ldrd	r4, [sp]
   17830:	ldrd	r6, [sp, #8]
   17834:	add	sp, sp, #20
   17838:	pop	{pc}		; (ldr pc, [sp], #4)
   1783c:	mov	r0, #64	; 0x40
   17840:	sdiv	r4, r0, lr
   17844:	mls	r5, lr, r4, r0
   17848:	sub	r5, r0, r5
   1784c:	b	177d0 <__assert_fail@plt+0x6644>
   17850:	adds	r5, r5, #0
   17854:	movne	r5, #1
   17858:	cmp	r6, #0
   1785c:	movne	r6, r5
   17860:	moveq	r6, #1
   17864:	cmp	r6, #0
   17868:	beq	17824 <__assert_fail@plt+0x6698>
   1786c:	bl	17a3c <__assert_fail@plt+0x68b0>
   17870:	mvn	r0, #-2147483648	; 0x80000000
   17874:	b	17840 <__assert_fail@plt+0x66b4>
   17878:	mov	r1, #1
   1787c:	str	r4, [sp, #-8]!
   17880:	str	lr, [sp, #4]
   17884:	bl	17a80 <__assert_fail@plt+0x68f4>
   17888:	cmp	r0, #0
   1788c:	beq	1789c <__assert_fail@plt+0x6710>
   17890:	ldr	r4, [sp]
   17894:	add	sp, sp, #4
   17898:	pop	{pc}		; (ldr pc, [sp], #4)
   1789c:	bl	17a3c <__assert_fail@plt+0x68b0>
   178a0:	mov	r1, #1
   178a4:	str	r4, [sp, #-8]!
   178a8:	str	lr, [sp, #4]
   178ac:	bl	17a80 <__assert_fail@plt+0x68f4>
   178b0:	cmp	r0, #0
   178b4:	beq	178c4 <__assert_fail@plt+0x6738>
   178b8:	ldr	r4, [sp]
   178bc:	add	sp, sp, #4
   178c0:	pop	{pc}		; (ldr pc, [sp], #4)
   178c4:	bl	17a3c <__assert_fail@plt+0x68b0>
   178c8:	str	r4, [sp, #-8]!
   178cc:	str	lr, [sp, #4]
   178d0:	bl	17a80 <__assert_fail@plt+0x68f4>
   178d4:	cmp	r0, #0
   178d8:	beq	178e8 <__assert_fail@plt+0x675c>
   178dc:	ldr	r4, [sp]
   178e0:	add	sp, sp, #4
   178e4:	pop	{pc}		; (ldr pc, [sp], #4)
   178e8:	bl	17a3c <__assert_fail@plt+0x68b0>
   178ec:	str	r4, [sp, #-8]!
   178f0:	str	lr, [sp, #4]
   178f4:	bl	17a80 <__assert_fail@plt+0x68f4>
   178f8:	cmp	r0, #0
   178fc:	beq	1790c <__assert_fail@plt+0x6780>
   17900:	ldr	r4, [sp]
   17904:	add	sp, sp, #4
   17908:	pop	{pc}		; (ldr pc, [sp], #4)
   1790c:	bl	17a3c <__assert_fail@plt+0x68b0>
   17910:	strd	r4, [sp, #-16]!
   17914:	mov	r4, r1
   17918:	str	r6, [sp, #8]
   1791c:	mov	r6, r0
   17920:	mov	r0, r1
   17924:	str	lr, [sp, #12]
   17928:	bl	17af4 <__assert_fail@plt+0x6968>
   1792c:	subs	r5, r0, #0
   17930:	beq	17954 <__assert_fail@plt+0x67c8>
   17934:	mov	r2, r4
   17938:	mov	r1, r6
   1793c:	bl	10f04 <memcpy@plt>
   17940:	mov	r0, r5
   17944:	ldrd	r4, [sp]
   17948:	ldr	r6, [sp, #8]
   1794c:	add	sp, sp, #12
   17950:	pop	{pc}		; (ldr pc, [sp], #4)
   17954:	bl	17a3c <__assert_fail@plt+0x68b0>
   17958:	strd	r4, [sp, #-16]!
   1795c:	mov	r4, r1
   17960:	str	r6, [sp, #8]
   17964:	mov	r6, r0
   17968:	mov	r0, r1
   1796c:	str	lr, [sp, #12]
   17970:	bl	17af4 <__assert_fail@plt+0x6968>
   17974:	subs	r5, r0, #0
   17978:	beq	1799c <__assert_fail@plt+0x6810>
   1797c:	mov	r2, r4
   17980:	mov	r1, r6
   17984:	bl	10f04 <memcpy@plt>
   17988:	mov	r0, r5
   1798c:	ldrd	r4, [sp]
   17990:	ldr	r6, [sp, #8]
   17994:	add	sp, sp, #12
   17998:	pop	{pc}		; (ldr pc, [sp], #4)
   1799c:	bl	17a3c <__assert_fail@plt+0x68b0>
   179a0:	strd	r4, [sp, #-16]!
   179a4:	mov	r4, r1
   179a8:	str	r6, [sp, #8]
   179ac:	mov	r6, r0
   179b0:	add	r0, r1, #1
   179b4:	str	lr, [sp, #12]
   179b8:	bl	17af4 <__assert_fail@plt+0x6968>
   179bc:	subs	r5, r0, #0
   179c0:	beq	179ec <__assert_fail@plt+0x6860>
   179c4:	mov	r3, #0
   179c8:	mov	r1, r6
   179cc:	mov	r2, r4
   179d0:	strb	r3, [r5, r4]
   179d4:	bl	10f04 <memcpy@plt>
   179d8:	mov	r0, r5
   179dc:	ldrd	r4, [sp]
   179e0:	ldr	r6, [sp, #8]
   179e4:	add	sp, sp, #12
   179e8:	pop	{pc}		; (ldr pc, [sp], #4)
   179ec:	bl	17a3c <__assert_fail@plt+0x68b0>
   179f0:	strd	r4, [sp, #-16]!
   179f4:	str	r6, [sp, #8]
   179f8:	mov	r6, r0
   179fc:	str	lr, [sp, #12]
   17a00:	bl	11078 <strlen@plt>
   17a04:	add	r4, r0, #1
   17a08:	mov	r0, r4
   17a0c:	bl	17af4 <__assert_fail@plt+0x6968>
   17a10:	subs	r5, r0, #0
   17a14:	beq	17a38 <__assert_fail@plt+0x68ac>
   17a18:	mov	r2, r4
   17a1c:	mov	r1, r6
   17a20:	bl	10f04 <memcpy@plt>
   17a24:	mov	r0, r5
   17a28:	ldrd	r4, [sp]
   17a2c:	ldr	r6, [sp, #8]
   17a30:	add	sp, sp, #12
   17a34:	pop	{pc}		; (ldr pc, [sp], #4)
   17a38:	bl	17a3c <__assert_fail@plt+0x68b0>
   17a3c:	movw	r3, #41252	; 0xa124
   17a40:	movt	r3, #2
   17a44:	str	r4, [sp, #-8]!
   17a48:	ldr	r4, [r3]
   17a4c:	mov	r2, #5
   17a50:	movw	r1, #36904	; 0x9028
   17a54:	movt	r1, #1
   17a58:	mov	r0, #0
   17a5c:	str	lr, [sp, #4]
   17a60:	bl	10f4c <dcgettext@plt>
   17a64:	mov	r3, r0
   17a68:	movw	r2, #35812	; 0x8be4
   17a6c:	movt	r2, #1
   17a70:	mov	r1, #0
   17a74:	mov	r0, r4
   17a78:	bl	10fd0 <error@plt>
   17a7c:	bl	11174 <abort@plt>
   17a80:	cmp	r1, #0
   17a84:	cmpne	r0, #0
   17a88:	beq	17ad4 <__assert_fail@plt+0x6948>
   17a8c:	strd	r4, [sp, #-16]!
   17a90:	umull	r4, r5, r0, r1
   17a94:	str	r6, [sp, #8]
   17a98:	str	lr, [sp, #12]
   17a9c:	adds	r3, r5, #0
   17aa0:	movne	r3, #1
   17aa4:	cmp	r4, #0
   17aa8:	blt	17ab4 <__assert_fail@plt+0x6928>
   17aac:	cmp	r3, #0
   17ab0:	beq	17ae0 <__assert_fail@plt+0x6954>
   17ab4:	bl	11090 <__errno_location@plt>
   17ab8:	mov	r3, #12
   17abc:	ldrd	r4, [sp]
   17ac0:	ldr	r6, [sp, #8]
   17ac4:	add	sp, sp, #12
   17ac8:	str	r3, [r0]
   17acc:	mov	r0, #0
   17ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ad4:	mov	r1, #1
   17ad8:	mov	r0, r1
   17adc:	b	10e98 <calloc@plt>
   17ae0:	ldrd	r4, [sp]
   17ae4:	ldr	r6, [sp, #8]
   17ae8:	ldr	lr, [sp, #12]
   17aec:	add	sp, sp, #16
   17af0:	b	10e98 <calloc@plt>
   17af4:	cmp	r0, #0
   17af8:	beq	17b04 <__assert_fail@plt+0x6978>
   17afc:	blt	17b0c <__assert_fail@plt+0x6980>
   17b00:	b	10ff4 <malloc@plt>
   17b04:	mov	r0, #1
   17b08:	b	10ff4 <malloc@plt>
   17b0c:	str	r4, [sp, #-8]!
   17b10:	str	lr, [sp, #4]
   17b14:	bl	11090 <__errno_location@plt>
   17b18:	mov	r3, #12
   17b1c:	ldr	r4, [sp]
   17b20:	add	sp, sp, #4
   17b24:	str	r3, [r0]
   17b28:	mov	r0, #0
   17b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b30:	cmp	r0, #0
   17b34:	beq	17b5c <__assert_fail@plt+0x69d0>
   17b38:	cmp	r1, #0
   17b3c:	str	r4, [sp, #-8]!
   17b40:	str	lr, [sp, #4]
   17b44:	beq	17b64 <__assert_fail@plt+0x69d8>
   17b48:	blt	17b78 <__assert_fail@plt+0x69ec>
   17b4c:	ldr	r4, [sp]
   17b50:	ldr	lr, [sp, #4]
   17b54:	add	sp, sp, #8
   17b58:	b	10f70 <realloc@plt>
   17b5c:	mov	r0, r1
   17b60:	b	17af4 <__assert_fail@plt+0x6968>
   17b64:	bl	12d94 <__assert_fail@plt+0x1c08>
   17b68:	ldr	r4, [sp]
   17b6c:	add	sp, sp, #4
   17b70:	mov	r0, #0
   17b74:	pop	{pc}		; (ldr pc, [sp], #4)
   17b78:	bl	11090 <__errno_location@plt>
   17b7c:	mov	r3, #12
   17b80:	str	r3, [r0]
   17b84:	b	17b68 <__assert_fail@plt+0x69dc>
   17b88:	strd	r4, [sp, #-16]!
   17b8c:	mov	r4, r0
   17b90:	str	r6, [sp, #8]
   17b94:	str	lr, [sp, #12]
   17b98:	bl	10fb8 <__fpending@plt>
   17b9c:	ldr	r5, [r4]
   17ba0:	mov	r6, r0
   17ba4:	mov	r0, r4
   17ba8:	bl	17c10 <__assert_fail@plt+0x6a84>
   17bac:	mov	r4, r0
   17bb0:	and	r5, r5, #32
   17bb4:	cmp	r5, #0
   17bb8:	bne	17bf0 <__assert_fail@plt+0x6a64>
   17bbc:	cmp	r0, #0
   17bc0:	beq	17bdc <__assert_fail@plt+0x6a50>
   17bc4:	cmp	r6, #0
   17bc8:	bne	17c08 <__assert_fail@plt+0x6a7c>
   17bcc:	bl	11090 <__errno_location@plt>
   17bd0:	ldr	r4, [r0]
   17bd4:	subs	r4, r4, #9
   17bd8:	mvnne	r4, #0
   17bdc:	mov	r0, r4
   17be0:	ldrd	r4, [sp]
   17be4:	ldr	r6, [sp, #8]
   17be8:	add	sp, sp, #12
   17bec:	pop	{pc}		; (ldr pc, [sp], #4)
   17bf0:	cmp	r0, #0
   17bf4:	bne	17c08 <__assert_fail@plt+0x6a7c>
   17bf8:	bl	11090 <__errno_location@plt>
   17bfc:	str	r4, [r0]
   17c00:	mvn	r4, #0
   17c04:	b	17bdc <__assert_fail@plt+0x6a50>
   17c08:	mvn	r4, #0
   17c0c:	b	17bdc <__assert_fail@plt+0x6a50>
   17c10:	strd	r4, [sp, #-12]!
   17c14:	mov	r4, r0
   17c18:	str	lr, [sp, #8]
   17c1c:	sub	sp, sp, #12
   17c20:	bl	110d8 <fileno@plt>
   17c24:	cmp	r0, #0
   17c28:	mov	r0, r4
   17c2c:	blt	17cb0 <__assert_fail@plt+0x6b24>
   17c30:	bl	11018 <__freading@plt>
   17c34:	cmp	r0, #0
   17c38:	bne	17c7c <__assert_fail@plt+0x6af0>
   17c3c:	mov	r0, r4
   17c40:	bl	17cc4 <__assert_fail@plt+0x6b38>
   17c44:	cmp	r0, #0
   17c48:	beq	17cac <__assert_fail@plt+0x6b20>
   17c4c:	bl	11090 <__errno_location@plt>
   17c50:	mov	r5, r0
   17c54:	mov	r0, r4
   17c58:	ldr	r4, [r5]
   17c5c:	bl	110f0 <fclose@plt>
   17c60:	cmp	r4, #0
   17c64:	mvnne	r0, #0
   17c68:	strne	r4, [r5]
   17c6c:	add	sp, sp, #12
   17c70:	ldrd	r4, [sp]
   17c74:	add	sp, sp, #8
   17c78:	pop	{pc}		; (ldr pc, [sp], #4)
   17c7c:	mov	r0, r4
   17c80:	bl	110d8 <fileno@plt>
   17c84:	mov	r1, #1
   17c88:	mov	r2, #0
   17c8c:	mov	r3, #0
   17c90:	str	r1, [sp]
   17c94:	bl	10fa0 <lseek64@plt>
   17c98:	mvn	r3, #0
   17c9c:	mvn	r2, #0
   17ca0:	cmp	r1, r3
   17ca4:	cmpeq	r0, r2
   17ca8:	bne	17c3c <__assert_fail@plt+0x6ab0>
   17cac:	mov	r0, r4
   17cb0:	add	sp, sp, #12
   17cb4:	ldrd	r4, [sp]
   17cb8:	ldr	lr, [sp, #8]
   17cbc:	add	sp, sp, #12
   17cc0:	b	110f0 <fclose@plt>
   17cc4:	str	r4, [sp, #-8]!
   17cc8:	subs	r4, r0, #0
   17ccc:	str	lr, [sp, #4]
   17cd0:	sub	sp, sp, #8
   17cd4:	beq	17cf0 <__assert_fail@plt+0x6b64>
   17cd8:	bl	11018 <__freading@plt>
   17cdc:	cmp	r0, #0
   17ce0:	beq	17cf0 <__assert_fail@plt+0x6b64>
   17ce4:	ldr	r3, [r4]
   17ce8:	tst	r3, #256	; 0x100
   17cec:	bne	17d08 <__assert_fail@plt+0x6b7c>
   17cf0:	mov	r0, r4
   17cf4:	add	sp, sp, #8
   17cf8:	ldr	r4, [sp]
   17cfc:	ldr	lr, [sp, #4]
   17d00:	add	sp, sp, #8
   17d04:	b	10ec8 <fflush@plt>
   17d08:	mov	r1, #1
   17d0c:	mov	r2, #0
   17d10:	mov	r3, #0
   17d14:	mov	r0, r4
   17d18:	str	r1, [sp]
   17d1c:	bl	17d24 <__assert_fail@plt+0x6b98>
   17d20:	b	17cf0 <__assert_fail@plt+0x6b64>
   17d24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17d28:	mov	r4, r0
   17d2c:	ldr	ip, [r0, #4]
   17d30:	strd	r6, [sp, #8]
   17d34:	str	lr, [sp, #20]
   17d38:	ldr	lr, [r0, #8]
   17d3c:	str	r8, [sp, #16]
   17d40:	sub	sp, sp, #8
   17d44:	ldr	r5, [sp, #32]
   17d48:	cmp	lr, ip
   17d4c:	beq	17d74 <__assert_fail@plt+0x6be8>
   17d50:	mov	r0, r4
   17d54:	str	r5, [sp, #32]
   17d58:	add	sp, sp, #8
   17d5c:	ldrd	r4, [sp]
   17d60:	ldrd	r6, [sp, #8]
   17d64:	ldr	r8, [sp, #16]
   17d68:	ldr	lr, [sp, #20]
   17d6c:	add	sp, sp, #24
   17d70:	b	110fc <fseeko64@plt>
   17d74:	ldr	ip, [r0, #16]
   17d78:	ldr	lr, [r0, #20]
   17d7c:	cmp	lr, ip
   17d80:	bne	17d50 <__assert_fail@plt+0x6bc4>
   17d84:	ldr	r8, [r0, #36]	; 0x24
   17d88:	cmp	r8, #0
   17d8c:	bne	17d50 <__assert_fail@plt+0x6bc4>
   17d90:	mov	r6, r2
   17d94:	mov	r7, r3
   17d98:	bl	110d8 <fileno@plt>
   17d9c:	mov	r2, r6
   17da0:	mov	r3, r7
   17da4:	str	r5, [sp]
   17da8:	bl	10fa0 <lseek64@plt>
   17dac:	mvn	r3, #0
   17db0:	mvn	r2, #0
   17db4:	cmp	r1, r3
   17db8:	cmpeq	r0, r2
   17dbc:	beq	17dec <__assert_fail@plt+0x6c60>
   17dc0:	ldr	r3, [r4]
   17dc4:	strd	r0, [r4, #80]	; 0x50
   17dc8:	bic	r3, r3, #16
   17dcc:	str	r3, [r4]
   17dd0:	mov	r0, r8
   17dd4:	add	sp, sp, #8
   17dd8:	ldrd	r4, [sp]
   17ddc:	ldrd	r6, [sp, #8]
   17de0:	ldr	r8, [sp, #16]
   17de4:	add	sp, sp, #20
   17de8:	pop	{pc}		; (ldr pc, [sp], #4)
   17dec:	mvn	r8, #0
   17df0:	b	17dd0 <__assert_fail@plt+0x6c44>
   17df4:	mov	r0, #14
   17df8:	str	r4, [sp, #-8]!
   17dfc:	str	lr, [sp, #4]
   17e00:	bl	1112c <nl_langinfo@plt>
   17e04:	cmp	r0, #0
   17e08:	beq	17e2c <__assert_fail@plt+0x6ca0>
   17e0c:	ldrb	r2, [r0]
   17e10:	movw	r3, #36924	; 0x903c
   17e14:	movt	r3, #1
   17e18:	ldr	r4, [sp]
   17e1c:	add	sp, sp, #4
   17e20:	cmp	r2, #0
   17e24:	moveq	r0, r3
   17e28:	pop	{pc}		; (ldr pc, [sp], #4)
   17e2c:	ldr	r4, [sp]
   17e30:	add	sp, sp, #4
   17e34:	movw	r0, #36924	; 0x903c
   17e38:	movt	r0, #1
   17e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e40:	strd	r4, [sp, #-20]!	; 0xffffffec
   17e44:	mov	r5, r2
   17e48:	strd	r6, [sp, #8]
   17e4c:	subs	r6, r0, #0
   17e50:	mov	r7, r1
   17e54:	str	lr, [sp, #16]
   17e58:	sub	sp, sp, #12
   17e5c:	addeq	r6, sp, #4
   17e60:	mov	r0, r6
   17e64:	bl	10fc4 <mbrtowc@plt>
   17e68:	cmp	r5, #0
   17e6c:	cmnne	r0, #3
   17e70:	mov	r4, r0
   17e74:	bhi	17e90 <__assert_fail@plt+0x6d04>
   17e78:	mov	r0, r4
   17e7c:	add	sp, sp, #12
   17e80:	ldrd	r4, [sp]
   17e84:	ldrd	r6, [sp, #8]
   17e88:	add	sp, sp, #16
   17e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e90:	mov	r0, #0
   17e94:	bl	12df4 <__assert_fail@plt+0x1c68>
   17e98:	cmp	r0, #0
   17e9c:	bne	17e78 <__assert_fail@plt+0x6cec>
   17ea0:	ldrb	r3, [r7]
   17ea4:	mov	r4, #1
   17ea8:	str	r3, [r6]
   17eac:	b	17e78 <__assert_fail@plt+0x6cec>
   17eb0:	umull	r2, r3, r1, r2
   17eb4:	cmp	r3, #0
   17eb8:	bne	17ec4 <__assert_fail@plt+0x6d38>
   17ebc:	mov	r1, r2
   17ec0:	b	17b30 <__assert_fail@plt+0x69a4>
   17ec4:	str	r4, [sp, #-8]!
   17ec8:	str	lr, [sp, #4]
   17ecc:	bl	11090 <__errno_location@plt>
   17ed0:	mov	r3, #12
   17ed4:	ldr	r4, [sp]
   17ed8:	add	sp, sp, #4
   17edc:	str	r3, [r0]
   17ee0:	mov	r0, #0
   17ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee8:	cmp	r3, #0
   17eec:	cmpeq	r2, #0
   17ef0:	bne	17f14 <__assert_fail@plt+0x6d88>
   17ef4:	cmp	r1, #0
   17ef8:	movlt	r1, #-2147483648	; 0x80000000
   17efc:	movlt	r0, #0
   17f00:	blt	17f10 <__assert_fail@plt+0x6d84>
   17f04:	cmpeq	r0, #0
   17f08:	mvnne	r1, #-2147483648	; 0x80000000
   17f0c:	mvnne	r0, #0
   17f10:	b	17ff8 <__assert_fail@plt+0x6e6c>
   17f14:	sub	sp, sp, #8
   17f18:	push	{sp, lr}
   17f1c:	cmp	r1, #0
   17f20:	blt	17f40 <__assert_fail@plt+0x6db4>
   17f24:	cmp	r3, #0
   17f28:	blt	17f74 <__assert_fail@plt+0x6de8>
   17f2c:	bl	18008 <__assert_fail@plt+0x6e7c>
   17f30:	ldr	lr, [sp, #4]
   17f34:	add	sp, sp, #8
   17f38:	pop	{r2, r3}
   17f3c:	bx	lr
   17f40:	rsbs	r0, r0, #0
   17f44:	sbc	r1, r1, r1, lsl #1
   17f48:	cmp	r3, #0
   17f4c:	blt	17f98 <__assert_fail@plt+0x6e0c>
   17f50:	bl	18008 <__assert_fail@plt+0x6e7c>
   17f54:	ldr	lr, [sp, #4]
   17f58:	add	sp, sp, #8
   17f5c:	pop	{r2, r3}
   17f60:	rsbs	r0, r0, #0
   17f64:	sbc	r1, r1, r1, lsl #1
   17f68:	rsbs	r2, r2, #0
   17f6c:	sbc	r3, r3, r3, lsl #1
   17f70:	bx	lr
   17f74:	rsbs	r2, r2, #0
   17f78:	sbc	r3, r3, r3, lsl #1
   17f7c:	bl	18008 <__assert_fail@plt+0x6e7c>
   17f80:	ldr	lr, [sp, #4]
   17f84:	add	sp, sp, #8
   17f88:	pop	{r2, r3}
   17f8c:	rsbs	r0, r0, #0
   17f90:	sbc	r1, r1, r1, lsl #1
   17f94:	bx	lr
   17f98:	rsbs	r2, r2, #0
   17f9c:	sbc	r3, r3, r3, lsl #1
   17fa0:	bl	18008 <__assert_fail@plt+0x6e7c>
   17fa4:	ldr	lr, [sp, #4]
   17fa8:	add	sp, sp, #8
   17fac:	pop	{r2, r3}
   17fb0:	rsbs	r2, r2, #0
   17fb4:	sbc	r3, r3, r3, lsl #1
   17fb8:	bx	lr
   17fbc:	cmp	r3, #0
   17fc0:	cmpeq	r2, #0
   17fc4:	bne	17fdc <__assert_fail@plt+0x6e50>
   17fc8:	cmp	r1, #0
   17fcc:	cmpeq	r0, #0
   17fd0:	mvnne	r1, #0
   17fd4:	mvnne	r0, #0
   17fd8:	b	17ff8 <__assert_fail@plt+0x6e6c>
   17fdc:	sub	sp, sp, #8
   17fe0:	push	{sp, lr}
   17fe4:	bl	18008 <__assert_fail@plt+0x6e7c>
   17fe8:	ldr	lr, [sp, #4]
   17fec:	add	sp, sp, #8
   17ff0:	pop	{r2, r3}
   17ff4:	bx	lr
   17ff8:	push	{r1, lr}
   17ffc:	mov	r0, #8
   18000:	bl	10eb0 <raise@plt>
   18004:	pop	{r1, pc}
   18008:	cmp	r1, r3
   1800c:	cmpeq	r0, r2
   18010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18014:	mov	r4, r0
   18018:	movcc	r0, #0
   1801c:	mov	r5, r1
   18020:	ldr	lr, [sp, #36]	; 0x24
   18024:	movcc	r1, r0
   18028:	bcc	18124 <__assert_fail@plt+0x6f98>
   1802c:	cmp	r3, #0
   18030:	clzeq	ip, r2
   18034:	clzne	ip, r3
   18038:	addeq	ip, ip, #32
   1803c:	cmp	r5, #0
   18040:	clzeq	r1, r4
   18044:	addeq	r1, r1, #32
   18048:	clzne	r1, r5
   1804c:	sub	ip, ip, r1
   18050:	sub	sl, ip, #32
   18054:	lsl	r9, r3, ip
   18058:	rsb	fp, ip, #32
   1805c:	orr	r9, r9, r2, lsl sl
   18060:	orr	r9, r9, r2, lsr fp
   18064:	lsl	r8, r2, ip
   18068:	cmp	r5, r9
   1806c:	cmpeq	r4, r8
   18070:	movcc	r0, #0
   18074:	movcc	r1, r0
   18078:	bcc	18094 <__assert_fail@plt+0x6f08>
   1807c:	mov	r0, #1
   18080:	subs	r4, r4, r8
   18084:	lsl	r1, r0, sl
   18088:	orr	r1, r1, r0, lsr fp
   1808c:	lsl	r0, r0, ip
   18090:	sbc	r5, r5, r9
   18094:	cmp	ip, #0
   18098:	beq	18124 <__assert_fail@plt+0x6f98>
   1809c:	lsr	r6, r8, #1
   180a0:	orr	r6, r6, r9, lsl #31
   180a4:	lsr	r7, r9, #1
   180a8:	mov	r2, ip
   180ac:	b	180d0 <__assert_fail@plt+0x6f44>
   180b0:	subs	r3, r4, r6
   180b4:	sbc	r8, r5, r7
   180b8:	adds	r3, r3, r3
   180bc:	adc	r8, r8, r8
   180c0:	adds	r4, r3, #1
   180c4:	adc	r5, r8, #0
   180c8:	subs	r2, r2, #1
   180cc:	beq	180ec <__assert_fail@plt+0x6f60>
   180d0:	cmp	r5, r7
   180d4:	cmpeq	r4, r6
   180d8:	bcs	180b0 <__assert_fail@plt+0x6f24>
   180dc:	adds	r4, r4, r4
   180e0:	adc	r5, r5, r5
   180e4:	subs	r2, r2, #1
   180e8:	bne	180d0 <__assert_fail@plt+0x6f44>
   180ec:	lsr	r3, r4, ip
   180f0:	orr	r3, r3, r5, lsl fp
   180f4:	lsr	r2, r5, ip
   180f8:	orr	r3, r3, r5, lsr sl
   180fc:	adds	r0, r0, r4
   18100:	mov	r4, r3
   18104:	lsl	r3, r2, ip
   18108:	orr	r3, r3, r4, lsl sl
   1810c:	lsl	ip, r4, ip
   18110:	orr	r3, r3, r4, lsr fp
   18114:	adc	r1, r1, r5
   18118:	subs	r0, r0, ip
   1811c:	mov	r5, r2
   18120:	sbc	r1, r1, r3
   18124:	cmp	lr, #0
   18128:	strdne	r4, [lr]
   1812c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18130:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18134:	mov	r7, r0
   18138:	ldr	r6, [pc, #72]	; 18188 <__assert_fail@plt+0x6ffc>
   1813c:	ldr	r5, [pc, #72]	; 1818c <__assert_fail@plt+0x7000>
   18140:	add	r6, pc, r6
   18144:	add	r5, pc, r5
   18148:	sub	r6, r6, r5
   1814c:	mov	r8, r1
   18150:	mov	r9, r2
   18154:	bl	10e78 <calloc@plt-0x20>
   18158:	asrs	r6, r6, #2
   1815c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18160:	mov	r4, #0
   18164:	add	r4, r4, #1
   18168:	ldr	r3, [r5], #4
   1816c:	mov	r2, r9
   18170:	mov	r1, r8
   18174:	mov	r0, r7
   18178:	blx	r3
   1817c:	cmp	r6, r4
   18180:	bne	18164 <__assert_fail@plt+0x6fd8>
   18184:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18188:	andeq	r1, r1, ip, asr #27
   1818c:	andeq	r1, r1, r4, asr #27
   18190:	bx	lr
   18194:	ldr	r3, [pc, #12]	; 181a8 <__assert_fail@plt+0x701c>
   18198:	mov	r1, #0
   1819c:	add	r3, pc, r3
   181a0:	ldr	r2, [r3]
   181a4:	b	110a8 <__cxa_atexit@plt>
   181a8:	andeq	r1, r1, r0, ror pc

Disassembly of section .fini:

000181ac <.fini>:
   181ac:	push	{r3, lr}
   181b0:	pop	{r3, pc}
