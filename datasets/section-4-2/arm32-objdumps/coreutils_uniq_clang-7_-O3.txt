
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010ea0 <.init>:
   10ea0:	push	{r3, lr}
   10ea4:	bl	1119c <__assert_fail@plt+0x48>
   10ea8:	pop	{r3, pc}

Disassembly of section .plt:

00010eac <calloc@plt-0x14>:
   10eac:	push	{lr}		; (str lr, [sp, #-4]!)
   10eb0:	ldr	lr, [pc, #4]	; 10ebc <calloc@plt-0x4>
   10eb4:	add	lr, pc, lr
   10eb8:	ldr	pc, [lr, #8]!
   10ebc:	andeq	r8, r1, r4, asr #2

00010ec0 <calloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #324]!	; 0x144

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #316]!	; 0x13c

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #308]!	; 0x134

00010ee4 <strcmp@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #300]!	; 0x12c

00010ef0 <strtol@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #292]!	; 0x124

00010efc <posix_fadvise64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #284]!	; 0x11c

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #276]!	; 0x114

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #268]!	; 0x10c

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #260]!	; 0x104

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #252]!	; 0xfc

00010f38 <__strtoull_internal@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #244]!	; 0xf4

00010f44 <mbsinit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #236]!	; 0xec

00010f50 <fwrite_unlocked@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #228]!	; 0xe4

00010f5c <memcmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #220]!	; 0xdc

00010f68 <dcgettext@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #212]!	; 0xd4

00010f74 <dup2@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #204]!	; 0xcc

00010f80 <realloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #196]!	; 0xc4

00010f8c <textdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #188]!	; 0xbc

00010f98 <iswprint@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #180]!	; 0xb4

00010fa4 <fwrite@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #172]!	; 0xac

00010fb0 <lseek64@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #164]!	; 0xa4

00010fbc <__ctype_get_mb_cur_max@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #156]!	; 0x9c

00010fc8 <__fpending@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #148]!	; 0x94

00010fd4 <mbrtowc@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #140]!	; 0x8c

00010fe0 <error@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #132]!	; 0x84

00010fec <open64@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #124]!	; 0x7c

00010ff8 <getenv@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #116]!	; 0x74

00011004 <malloc@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #108]!	; 0x6c

00011010 <__libc_start_main@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #100]!	; 0x64

0001101c <__freading@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #92]!	; 0x5c

00011028 <__ctype_toupper_loc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #84]!	; 0x54

00011034 <__gmon_start__@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #76]!	; 0x4c

00011040 <freopen64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #68]!	; 0x44

0001104c <getopt_long@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #60]!	; 0x3c

00011058 <__ctype_b_loc@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #52]!	; 0x34

00011064 <exit@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #44]!	; 0x2c

00011070 <strlen@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #36]!	; 0x24

0001107c <strchr@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #28]!

00011088 <__errno_location@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #20]!

00011094 <__cxa_atexit@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #12]!

000110a0 <memset@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #4]!

000110ac <__printf_chk@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #4092]!	; 0xffc

000110b8 <fileno@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #4084]!	; 0xff4

000110c4 <__fprintf_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #4076]!	; 0xfec

000110d0 <fclose@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110dc <fseeko64@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110e8 <__uflow@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f4 <__overflow@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #4044]!	; 0xfcc

00011100 <setlocale@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #4036]!	; 0xfc4

0001110c <strrchr@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #4028]!	; 0xfbc

00011118 <nl_langinfo@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #4020]!	; 0xfb4

00011124 <bindtextdomain@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #4012]!	; 0xfac

00011130 <strncmp@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #4004]!	; 0xfa4

0001113c <abort@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3996]!	; 0xf9c

00011148 <close@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3988]!	; 0xf94

00011154 <__assert_fail@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3980]!	; 0xf8c

Disassembly of section .text:

00011160 <.text>:
   11160:	mov	fp, #0
   11164:	mov	lr, #0
   11168:	pop	{r1}		; (ldr r1, [sp], #4)
   1116c:	mov	r2, sp
   11170:	push	{r2}		; (str r2, [sp, #-4]!)
   11174:	push	{r0}		; (str r0, [sp, #-4]!)
   11178:	ldr	ip, [pc, #16]	; 11190 <__assert_fail@plt+0x3c>
   1117c:	push	{ip}		; (str ip, [sp, #-4]!)
   11180:	ldr	r0, [pc, #12]	; 11194 <__assert_fail@plt+0x40>
   11184:	ldr	r3, [pc, #12]	; 11198 <__assert_fail@plt+0x44>
   11188:	bl	11010 <__libc_start_main@plt>
   1118c:	bl	1113c <abort@plt>
   11190:	muleq	r1, r4, r4
   11194:	andeq	r1, r1, ip, lsr #11
   11198:	andeq	r7, r1, r4, lsr r4
   1119c:	ldr	r3, [pc, #20]	; 111b8 <__assert_fail@plt+0x64>
   111a0:	ldr	r2, [pc, #20]	; 111bc <__assert_fail@plt+0x68>
   111a4:	add	r3, pc, r3
   111a8:	ldr	r2, [r3, r2]
   111ac:	cmp	r2, #0
   111b0:	bxeq	lr
   111b4:	b	11034 <__gmon_start__@plt>
   111b8:	andeq	r7, r1, r4, asr lr
   111bc:	andeq	r0, r0, ip, ror #1
   111c0:	ldr	r0, [pc, #24]	; 111e0 <__assert_fail@plt+0x8c>
   111c4:	ldr	r3, [pc, #24]	; 111e4 <__assert_fail@plt+0x90>
   111c8:	cmp	r3, r0
   111cc:	bxeq	lr
   111d0:	ldr	r3, [pc, #16]	; 111e8 <__assert_fail@plt+0x94>
   111d4:	cmp	r3, #0
   111d8:	bxeq	lr
   111dc:	bx	r3
   111e0:	andeq	r9, r2, r8, asr #2
   111e4:	andeq	r9, r2, r8, asr #2
   111e8:	andeq	r0, r0, r0
   111ec:	ldr	r0, [pc, #36]	; 11218 <__assert_fail@plt+0xc4>
   111f0:	ldr	r1, [pc, #36]	; 1121c <__assert_fail@plt+0xc8>
   111f4:	sub	r1, r1, r0
   111f8:	asr	r1, r1, #2
   111fc:	add	r1, r1, r1, lsr #31
   11200:	asrs	r1, r1, #1
   11204:	bxeq	lr
   11208:	ldr	r3, [pc, #16]	; 11220 <__assert_fail@plt+0xcc>
   1120c:	cmp	r3, #0
   11210:	bxeq	lr
   11214:	bx	r3
   11218:	andeq	r9, r2, r8, asr #2
   1121c:	andeq	r9, r2, r8, asr #2
   11220:	andeq	r0, r0, r0
   11224:	push	{r4, lr}
   11228:	ldr	r4, [pc, #24]	; 11248 <__assert_fail@plt+0xf4>
   1122c:	ldrb	r3, [r4]
   11230:	cmp	r3, #0
   11234:	popne	{r4, pc}
   11238:	bl	111c0 <__assert_fail@plt+0x6c>
   1123c:	mov	r3, #1
   11240:	strb	r3, [r4]
   11244:	pop	{r4, pc}
   11248:	andeq	r9, r2, ip, ror #2
   1124c:	b	111ec <__assert_fail@plt+0x98>
   11250:	push	{fp, lr}
   11254:	mov	fp, sp
   11258:	sub	sp, sp, #56	; 0x38
   1125c:	mov	r4, r0
   11260:	cmp	r0, #0
   11264:	bne	11568 <__assert_fail@plt+0x414>
   11268:	movw	r1, #29923	; 0x74e3
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10f68 <dcgettext@plt>
   1127c:	mov	r1, r0
   11280:	movw	r0, #37268	; 0x9194
   11284:	movt	r0, #2
   11288:	ldr	r2, [r0]
   1128c:	mov	r0, #1
   11290:	bl	110ac <__printf_chk@plt>
   11294:	movw	r1, #29963	; 0x750b
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10f68 <dcgettext@plt>
   112a8:	movw	r7, #37220	; 0x9164
   112ac:	movt	r7, #2
   112b0:	ldr	r1, [r7]
   112b4:	bl	10ecc <fputs_unlocked@plt>
   112b8:	movw	r1, #31823	; 0x7c4f
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10f68 <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10ecc <fputs_unlocked@plt>
   112d4:	movw	r1, #30136	; 0x75b8
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10f68 <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10ecc <fputs_unlocked@plt>
   112f0:	movw	r1, #30274	; 0x7642
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10f68 <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10ecc <fputs_unlocked@plt>
   1130c:	movw	r1, #30519	; 0x7737
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10f68 <dcgettext@plt>
   11320:	ldr	r1, [r7]
   11324:	bl	10ecc <fputs_unlocked@plt>
   11328:	movw	r1, #30579	; 0x7773
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10f68 <dcgettext@plt>
   1133c:	ldr	r1, [r7]
   11340:	bl	10ecc <fputs_unlocked@plt>
   11344:	movw	r1, #30731	; 0x780b
   11348:	mov	r0, #0
   1134c:	mov	r2, #5
   11350:	movt	r1, #1
   11354:	bl	10f68 <dcgettext@plt>
   11358:	ldr	r1, [r7]
   1135c:	bl	10ecc <fputs_unlocked@plt>
   11360:	movw	r1, #30909	; 0x78bd
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	movt	r1, #1
   11370:	bl	10f68 <dcgettext@plt>
   11374:	ldr	r1, [r7]
   11378:	bl	10ecc <fputs_unlocked@plt>
   1137c:	movw	r1, #30973	; 0x78fd
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10f68 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10ecc <fputs_unlocked@plt>
   11398:	movw	r1, #31041	; 0x7941
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10f68 <dcgettext@plt>
   113ac:	ldr	r1, [r7]
   113b0:	bl	10ecc <fputs_unlocked@plt>
   113b4:	movw	r1, #31086	; 0x796e
   113b8:	mov	r0, #0
   113bc:	mov	r2, #5
   113c0:	movt	r1, #1
   113c4:	bl	10f68 <dcgettext@plt>
   113c8:	ldr	r1, [r7]
   113cc:	bl	10ecc <fputs_unlocked@plt>
   113d0:	movw	r1, #31140	; 0x79a4
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f68 <dcgettext@plt>
   113e4:	ldr	r1, [r7]
   113e8:	bl	10ecc <fputs_unlocked@plt>
   113ec:	movw	r1, #31260	; 0x7a1c
   113f0:	mov	r0, #0
   113f4:	mov	r2, #5
   113f8:	movt	r1, #1
   113fc:	bl	10f68 <dcgettext@plt>
   11400:	ldr	r1, [r7]
   11404:	bl	10ecc <fputs_unlocked@plt>
   11408:	movw	r0, #32640	; 0x7f80
   1140c:	mov	r2, #48	; 0x30
   11410:	mov	r6, sp
   11414:	movw	r5, #31403	; 0x7aab
   11418:	movt	r0, #1
   1141c:	movt	r5, #1
   11420:	add	r1, r0, #32
   11424:	add	r3, r0, #16
   11428:	vld1.64	{d18-d19}, [r0], r2
   1142c:	vld1.64	{d16-d17}, [r1]
   11430:	vld1.64	{d20-d21}, [r3]
   11434:	add	r1, r6, #32
   11438:	vldr	d22, [r0]
   1143c:	add	r0, r6, #16
   11440:	vst1.64	{d16-d17}, [r1]
   11444:	movw	r1, #31898	; 0x7c9a
   11448:	vst1.64	{d20-d21}, [r0]
   1144c:	mov	r0, r6
   11450:	vst1.64	{d18-d19}, [r0], r2
   11454:	movt	r1, #1
   11458:	vstr	d22, [r0]
   1145c:	mov	r0, r5
   11460:	bl	10ee4 <strcmp@plt>
   11464:	cmp	r0, #0
   11468:	ldrne	r1, [r6, #8]!
   1146c:	cmpne	r1, #0
   11470:	bne	1145c <__assert_fail@plt+0x308>
   11474:	ldr	r6, [r6, #4]
   11478:	movw	r1, #31993	; 0x7cf9
   1147c:	mov	r0, #0
   11480:	mov	r2, #5
   11484:	movt	r1, #1
   11488:	bl	10f68 <dcgettext@plt>
   1148c:	movw	r2, #31612	; 0x7b7c
   11490:	movw	r3, #32016	; 0x7d10
   11494:	mov	r1, r0
   11498:	mov	r0, #1
   1149c:	movt	r2, #1
   114a0:	movt	r3, #1
   114a4:	bl	110ac <__printf_chk@plt>
   114a8:	cmp	r6, #0
   114ac:	mov	r0, #5
   114b0:	mov	r1, #0
   114b4:	moveq	r6, r5
   114b8:	bl	11100 <setlocale@plt>
   114bc:	cmp	r0, #0
   114c0:	beq	114f8 <__assert_fail@plt+0x3a4>
   114c4:	movw	r1, #32056	; 0x7d38
   114c8:	mov	r2, #3
   114cc:	movt	r1, #1
   114d0:	bl	11130 <strncmp@plt>
   114d4:	cmp	r0, #0
   114d8:	beq	114f8 <__assert_fail@plt+0x3a4>
   114dc:	movw	r1, #32060	; 0x7d3c
   114e0:	mov	r0, #0
   114e4:	mov	r2, #5
   114e8:	movt	r1, #1
   114ec:	bl	10f68 <dcgettext@plt>
   114f0:	ldr	r1, [r7]
   114f4:	bl	10ecc <fputs_unlocked@plt>
   114f8:	movw	r1, #32131	; 0x7d83
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	10f68 <dcgettext@plt>
   1150c:	movw	r2, #32016	; 0x7d10
   11510:	mov	r1, r0
   11514:	mov	r0, #1
   11518:	mov	r3, r5
   1151c:	movt	r2, #1
   11520:	bl	110ac <__printf_chk@plt>
   11524:	movw	r1, #32158	; 0x7d9e
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	movt	r1, #1
   11534:	bl	10f68 <dcgettext@plt>
   11538:	movw	r3, #32208	; 0x7dd0
   1153c:	mov	r1, r0
   11540:	movw	r0, #31926	; 0x7cb6
   11544:	cmp	r6, r5
   11548:	mov	r2, r6
   1154c:	movt	r0, #1
   11550:	movt	r3, #1
   11554:	moveq	r3, r0
   11558:	mov	r0, #1
   1155c:	bl	110ac <__printf_chk@plt>
   11560:	mov	r0, r4
   11564:	bl	11064 <exit@plt>
   11568:	movw	r0, #37208	; 0x9158
   1156c:	movw	r1, #29884	; 0x74bc
   11570:	mov	r2, #5
   11574:	movt	r0, #2
   11578:	movt	r1, #1
   1157c:	ldr	r5, [r0]
   11580:	mov	r0, #0
   11584:	bl	10f68 <dcgettext@plt>
   11588:	mov	r2, r0
   1158c:	movw	r0, #37268	; 0x9194
   11590:	mov	r1, #1
   11594:	movt	r0, #2
   11598:	ldr	r3, [r0]
   1159c:	mov	r0, r5
   115a0:	bl	110c4 <__fprintf_chk@plt>
   115a4:	mov	r0, r4
   115a8:	bl	11064 <exit@plt>
   115ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115b0:	add	fp, sp, #28
   115b4:	sub	sp, sp, #84	; 0x54
   115b8:	mov	r5, r0
   115bc:	movw	r0, #31408	; 0x7ab0
   115c0:	mov	r4, r1
   115c4:	movt	r0, #1
   115c8:	bl	10ff8 <getenv@plt>
   115cc:	mov	r6, r0
   115d0:	movw	r0, #32905	; 0x8089
   115d4:	movt	r0, #1
   115d8:	str	r0, [sp, #52]	; 0x34
   115dc:	str	r0, [sp, #56]	; 0x38
   115e0:	ldr	r0, [r4]
   115e4:	bl	136dc <__assert_fail@plt+0x2588>
   115e8:	movw	r1, #32208	; 0x7dd0
   115ec:	mov	r0, #6
   115f0:	movt	r1, #1
   115f4:	bl	11100 <setlocale@plt>
   115f8:	movw	r7, #31616	; 0x7b80
   115fc:	movw	r1, #31424	; 0x7ac0
   11600:	movt	r7, #1
   11604:	movt	r1, #1
   11608:	mov	r0, r7
   1160c:	bl	11124 <bindtextdomain@plt>
   11610:	mov	r0, r7
   11614:	bl	10f8c <textdomain@plt>
   11618:	movw	r0, #11864	; 0x2e58
   1161c:	movt	r0, #1
   11620:	bl	17498 <__assert_fail@plt+0x6344>
   11624:	movw	r1, #37232	; 0x9170
   11628:	movw	r0, #257	; 0x101
   1162c:	mov	r2, #0
   11630:	mvn	r3, #0
   11634:	mov	r7, #10
   11638:	mov	sl, #0
   1163c:	mov	r8, #0
   11640:	movt	r1, #2
   11644:	strh	r0, [r1]
   11648:	mov	r0, #1
   1164c:	strb	r2, [r1, #2]
   11650:	strb	r0, [r1, #4]
   11654:	str	r2, [r1, #8]
   11658:	str	r2, [r1, #12]
   1165c:	str	r3, [r1, #16]
   11660:	str	r2, [r1, #20]
   11664:	mov	r0, #0
   11668:	mov	r1, #0
   1166c:	str	r1, [sp, #48]	; 0x30
   11670:	b	11690 <__assert_fail@plt+0x53c>
   11674:	add	r2, r1, #1
   11678:	str	r2, [r7]
   1167c:	add	r2, sp, #52	; 0x34
   11680:	mov	r7, r3
   11684:	ldr	r1, [r4, r1, lsl #2]
   11688:	str	r1, [r2, r8, lsl #2]
   1168c:	add	r8, r8, #1
   11690:	cmp	r8, #0
   11694:	mov	r1, r8
   11698:	mov	r2, r6
   1169c:	mov	r3, r7
   116a0:	movwne	r1, #1
   116a4:	cmp	r6, #0
   116a8:	movwne	r2, #1
   116ac:	cmn	r0, #1
   116b0:	beq	11914 <__assert_fail@plt+0x7c0>
   116b4:	ands	r1, r2, r1
   116b8:	bne	11914 <__assert_fail@plt+0x7c0>
   116bc:	movw	r2, #31448	; 0x7ad8
   116c0:	mov	r9, r3
   116c4:	movw	r3, #32368	; 0x7e70
   116c8:	mov	r7, #0
   116cc:	mov	r0, r5
   116d0:	mov	r1, r4
   116d4:	movt	r2, #1
   116d8:	movt	r3, #1
   116dc:	str	r7, [sp]
   116e0:	bl	1104c <getopt_long@plt>
   116e4:	add	r1, r0, #3
   116e8:	cmp	r1, #125	; 0x7d
   116ec:	bhi	11974 <__assert_fail@plt+0x820>
   116f0:	add	r2, pc, #4
   116f4:	mov	r3, r9
   116f8:	ldr	pc, [r2, r1, lsl #2]
   116fc:	andeq	r2, r1, ip, ror r7
   11700:	ldrdeq	r2, [r1], -r0
   11704:	andeq	r1, r1, r4, lsl r9
   11708:	andeq	r2, r1, r4, lsr r7
   1170c:	andeq	r1, r1, r4, asr fp
   11710:	andeq	r2, r1, r4, lsr r7
   11714:	andeq	r2, r1, r4, lsr r7
   11718:	andeq	r2, r1, r4, lsr r7
   1171c:	andeq	r2, r1, r4, lsr r7
   11720:	andeq	r2, r1, r4, lsr r7
   11724:	andeq	r2, r1, r4, lsr r7
   11728:	andeq	r2, r1, r4, lsr r7
   1172c:	andeq	r2, r1, r4, lsr r7
   11730:	andeq	r2, r1, r4, lsr r7
   11734:	andeq	r2, r1, r4, lsr r7
   11738:	andeq	r2, r1, r4, lsr r7
   1173c:	andeq	r2, r1, r4, lsr r7
   11740:	andeq	r2, r1, r4, lsr r7
   11744:	andeq	r2, r1, r4, lsr r7
   11748:	andeq	r2, r1, r4, lsr r7
   1174c:	andeq	r2, r1, r4, lsr r7
   11750:	andeq	r2, r1, r4, lsr r7
   11754:	andeq	r2, r1, r4, lsr r7
   11758:	andeq	r2, r1, r4, lsr r7
   1175c:	andeq	r2, r1, r4, lsr r7
   11760:	andeq	r2, r1, r4, lsr r7
   11764:	andeq	r2, r1, r4, lsr r7
   11768:	andeq	r2, r1, r4, lsr r7
   1176c:	andeq	r2, r1, r4, lsr r7
   11770:	andeq	r2, r1, r4, lsr r7
   11774:	andeq	r2, r1, r4, lsr r7
   11778:	andeq	r2, r1, r4, lsr r7
   1177c:	andeq	r2, r1, r4, lsr r7
   11780:	andeq	r2, r1, r4, lsr r7
   11784:	andeq	r2, r1, r4, lsr r7
   11788:	andeq	r2, r1, r4, lsr r7
   1178c:	andeq	r2, r1, r4, lsr r7
   11790:	andeq	r2, r1, r4, lsr r7
   11794:	andeq	r2, r1, r4, lsr r7
   11798:	andeq	r2, r1, r4, lsr r7
   1179c:	andeq	r2, r1, r4, lsr r7
   117a0:	andeq	r2, r1, r4, lsr r7
   117a4:	andeq	r2, r1, r4, lsr r7
   117a8:	andeq	r2, r1, r4, lsr r7
   117ac:	andeq	r2, r1, r4, lsr r7
   117b0:	andeq	r2, r1, r4, lsr r7
   117b4:	andeq	r2, r1, r4, lsr r7
   117b8:	andeq	r2, r1, r4, lsr r7
   117bc:	andeq	r2, r1, r4, lsr r7
   117c0:	andeq	r2, r1, r4, lsr r7
   117c4:	andeq	r2, r1, r4, lsr r7
   117c8:	strdeq	r1, [r1], -r4
   117cc:	strdeq	r1, [r1], -r4
   117d0:	strdeq	r1, [r1], -r4
   117d4:	strdeq	r1, [r1], -r4
   117d8:	strdeq	r1, [r1], -r4
   117dc:	strdeq	r1, [r1], -r4
   117e0:	strdeq	r1, [r1], -r4
   117e4:	strdeq	r1, [r1], -r4
   117e8:	strdeq	r1, [r1], -r4
   117ec:	strdeq	r1, [r1], -r4
   117f0:	andeq	r2, r1, r4, lsr r7
   117f4:	andeq	r2, r1, r4, lsr r7
   117f8:	andeq	r2, r1, r4, lsr r7
   117fc:	andeq	r2, r1, r4, lsr r7
   11800:	andeq	r2, r1, r4, lsr r7
   11804:	andeq	r2, r1, r4, lsr r7
   11808:	andeq	r2, r1, r4, lsr r7
   1180c:	andeq	r2, r1, r4, lsr r7
   11810:	andeq	r2, r1, r4, lsr r7
   11814:	andeq	r2, r1, r4, lsr r7
   11818:	andeq	r1, r1, ip, ror #19
   1181c:	andeq	r2, r1, r4, lsr r7
   11820:	andeq	r2, r1, r4, lsr r7
   11824:	andeq	r2, r1, r4, lsr r7
   11828:	andeq	r2, r1, r4, lsr r7
   1182c:	andeq	r2, r1, r4, lsr r7
   11830:	andeq	r2, r1, r4, lsr r7
   11834:	andeq	r2, r1, r4, lsr r7
   11838:	andeq	r2, r1, r4, lsr r7
   1183c:	andeq	r2, r1, r4, lsr r7
   11840:	andeq	r2, r1, r4, lsr r7
   11844:	andeq	r2, r1, r4, lsr r7
   11848:	andeq	r2, r1, r4, lsr r7
   1184c:	andeq	r2, r1, r4, lsr r7
   11850:	andeq	r2, r1, r4, lsr r7
   11854:	andeq	r2, r1, r4, lsr r7
   11858:	andeq	r2, r1, r4, lsr r7
   1185c:	andeq	r2, r1, r4, lsr r7
   11860:	andeq	r2, r1, r4, lsr r7
   11864:	andeq	r2, r1, r4, lsr r7
   11868:	andeq	r2, r1, r4, lsr r7
   1186c:	andeq	r2, r1, r4, lsr r7
   11870:	andeq	r2, r1, r4, lsr r7
   11874:	andeq	r2, r1, r4, lsr r7
   11878:	andeq	r2, r1, r4, lsr r7
   1187c:	andeq	r2, r1, r4, lsr r7
   11880:	andeq	r2, r1, r4, lsr r7
   11884:	andeq	r2, r1, r4, lsr r7
   11888:	andeq	r2, r1, r4, lsr r7
   1188c:	andeq	r2, r1, r4, lsr r7
   11890:	andeq	r2, r1, r4, lsr r7
   11894:	andeq	r1, r1, ip, asr #21
   11898:	andeq	r1, r1, r4, lsl ip
   1189c:	andeq	r2, r1, r4, lsr r7
   118a0:	andeq	r1, r1, r4, ror #20
   118a4:	andeq	r2, r1, r4, lsr r7
   118a8:	andeq	r2, r1, r4, lsr r7
   118ac:	muleq	r1, ip, ip
   118b0:	andeq	r2, r1, r4, lsr r7
   118b4:	andeq	r2, r1, r4, lsr r7
   118b8:	andeq	r2, r1, r4, lsr r7
   118bc:	andeq	r2, r1, r4, lsr r7
   118c0:	andeq	r2, r1, r4, lsr r7
   118c4:	andeq	r2, r1, r4, lsr r7
   118c8:	andeq	r2, r1, r4, lsr r7
   118cc:	andeq	r2, r1, r4, lsr r7
   118d0:	andeq	r2, r1, r4, lsr r7
   118d4:	strdeq	r1, [r1], -r0
   118d8:	andeq	r2, r1, r4, lsr r7
   118dc:	strdeq	r1, [r1], -r0
   118e0:	andeq	r2, r1, r4, lsr r7
   118e4:	andeq	r1, r1, r8, lsr ip
   118e8:	andeq	r2, r1, r4, lsr r7
   118ec:	andeq	r2, r1, r4, lsr r7
   118f0:	muleq	r1, r0, r6
   118f4:	movw	r7, #37232	; 0x9170
   118f8:	cmp	sl, #2
   118fc:	movt	r7, #2
   11900:	bne	11934 <__assert_fail@plt+0x7e0>
   11904:	mov	r1, #0
   11908:	str	r1, [r7, #12]
   1190c:	sub	r1, r0, #48	; 0x30
   11910:	b	11964 <__assert_fail@plt+0x810>
   11914:	movw	r7, #37200	; 0x9150
   11918:	movt	r7, #2
   1191c:	ldr	r1, [r7]
   11920:	cmp	r1, r5
   11924:	bge	11d08 <__assert_fail@plt+0xbb4>
   11928:	cmp	r8, #2
   1192c:	bne	11674 <__assert_fail@plt+0x520>
   11930:	b	1273c <__assert_fail@plt+0x15e8>
   11934:	ldr	r2, [r7, #12]
   11938:	movw	r1, #39321	; 0x9999
   1193c:	movt	r1, #6553	; 0x1999
   11940:	cmp	r2, r1
   11944:	bls	11950 <__assert_fail@plt+0x7fc>
   11948:	mvn	r1, #0
   1194c:	b	11964 <__assert_fail@plt+0x810>
   11950:	add	r1, r2, r2, lsl #2
   11954:	add	r1, r0, r1, lsl #1
   11958:	sub	r1, r1, #48	; 0x30
   1195c:	cmp	r1, r2
   11960:	mvncc	r1, #0
   11964:	str	r1, [r7, #12]
   11968:	mov	sl, #1
   1196c:	mov	r7, r3
   11970:	b	11690 <__assert_fail@plt+0x53c>
   11974:	cmp	r0, #256	; 0x100
   11978:	bne	12734 <__assert_fail@plt+0x15e0>
   1197c:	movw	r0, #37224	; 0x9168
   11980:	movt	r0, #2
   11984:	ldr	r1, [r0]
   11988:	cmp	r1, #0
   1198c:	beq	11cd8 <__assert_fail@plt+0xb84>
   11990:	movw	r0, #37116	; 0x90fc
   11994:	mov	r2, #4
   11998:	mov	r7, r9
   1199c:	movw	r9, #32604	; 0x7f5c
   119a0:	movt	r0, #2
   119a4:	str	r2, [sp]
   119a8:	movw	r2, #32620	; 0x7f6c
   119ac:	movt	r9, #1
   119b0:	ldr	r0, [r0]
   119b4:	movt	r2, #1
   119b8:	mov	r3, r9
   119bc:	str	r0, [sp, #4]
   119c0:	mov	r0, #1
   119c4:	str	r0, [sp, #8]
   119c8:	movw	r0, #31504	; 0x7b10
   119cc:	movt	r0, #1
   119d0:	bl	12c84 <__assert_fail@plt+0x1b30>
   119d4:	ldr	r0, [r9, r0, lsl #2]
   119d8:	movw	r1, #37232	; 0x9170
   119dc:	movt	r1, #2
   119e0:	str	r0, [r1, #24]
   119e4:	mov	r0, #256	; 0x100
   119e8:	b	11690 <__assert_fail@plt+0x53c>
   119ec:	movw	r7, #37232	; 0x9170
   119f0:	mov	r0, #256	; 0x100
   119f4:	movt	r7, #2
   119f8:	strh	r0, [r7, #1]
   119fc:	movw	r0, #37224	; 0x9168
   11a00:	movt	r0, #2
   11a04:	ldr	r1, [r0]
   11a08:	cmp	r1, #0
   11a0c:	beq	11cb8 <__assert_fail@plt+0xb64>
   11a10:	movw	r0, #37116	; 0x90fc
   11a14:	movw	r7, #32576	; 0x7f40
   11a18:	mov	r2, #4
   11a1c:	movt	r0, #2
   11a20:	str	r2, [sp]
   11a24:	movw	r2, #32588	; 0x7f4c
   11a28:	movt	r7, #1
   11a2c:	ldr	r0, [r0]
   11a30:	movt	r2, #1
   11a34:	mov	r3, r7
   11a38:	str	r0, [sp, #4]
   11a3c:	mov	r0, #1
   11a40:	str	r0, [sp, #8]
   11a44:	movw	r0, #31489	; 0x7b01
   11a48:	movt	r0, #1
   11a4c:	bl	12c84 <__assert_fail@plt+0x1b30>
   11a50:	ldr	r0, [r7, r0, lsl #2]
   11a54:	movw	r2, #37232	; 0x9170
   11a58:	mov	r3, r9
   11a5c:	movt	r2, #2
   11a60:	b	11cc0 <__assert_fail@plt+0xb6c>
   11a64:	movw	r0, #37224	; 0x9168
   11a68:	mov	r1, #0
   11a6c:	mov	r2, #10
   11a70:	sub	r3, fp, #40	; 0x28
   11a74:	movt	r0, #2
   11a78:	ldr	sl, [r0]
   11a7c:	movw	r0, #32208	; 0x7dd0
   11a80:	movt	r0, #1
   11a84:	str	r0, [sp]
   11a88:	mov	r0, sl
   11a8c:	bl	162d4 <__assert_fail@plt+0x5180>
   11a90:	cmp	r0, #2
   11a94:	bcs	127d8 <__assert_fail@plt+0x1684>
   11a98:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11a9c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11aa0:	mvn	r3, #0
   11aa4:	mov	sl, #2
   11aa8:	mov	r7, r9
   11aac:	subs	r2, r0, r3
   11ab0:	sbcs	r1, r1, #0
   11ab4:	movw	r1, #37232	; 0x9170
   11ab8:	movcs	r0, r3
   11abc:	movt	r1, #2
   11ac0:	str	r0, [r1, #12]
   11ac4:	mov	r0, #102	; 0x66
   11ac8:	b	11690 <__assert_fail@plt+0x53c>
   11acc:	movw	r0, #37232	; 0x9170
   11ad0:	mov	r1, #0
   11ad4:	mov	r7, r3
   11ad8:	movt	r0, #2
   11adc:	strb	r1, [r0, #4]
   11ae0:	mov	r0, #1
   11ae4:	str	r0, [sp, #48]	; 0x30
   11ae8:	mov	r0, #99	; 0x63
   11aec:	b	11690 <__assert_fail@plt+0x53c>
   11af0:	movw	r0, #37224	; 0x9168
   11af4:	mov	r1, #0
   11af8:	mov	r2, #10
   11afc:	sub	r3, fp, #40	; 0x28
   11b00:	movt	r0, #2
   11b04:	ldr	r7, [r0]
   11b08:	movw	r0, #32208	; 0x7dd0
   11b0c:	movt	r0, #1
   11b10:	str	r0, [sp]
   11b14:	mov	r0, r7
   11b18:	bl	162d4 <__assert_fail@plt+0x5180>
   11b1c:	cmp	r0, #2
   11b20:	bcs	12808 <__assert_fail@plt+0x16b4>
   11b24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11b28:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11b2c:	mvn	r3, #0
   11b30:	mov	r7, r9
   11b34:	subs	r2, r0, r3
   11b38:	sbcs	r1, r1, #0
   11b3c:	movw	r1, #37232	; 0x9170
   11b40:	movcs	r0, r3
   11b44:	movt	r1, #2
   11b48:	str	r0, [r1, #8]
   11b4c:	mov	r0, #115	; 0x73
   11b50:	b	11690 <__assert_fail@plt+0x53c>
   11b54:	movw	r0, #37224	; 0x9168
   11b58:	movt	r0, #2
   11b5c:	ldr	r0, [r0]
   11b60:	ldrb	r0, [r0]
   11b64:	cmp	r0, #43	; 0x2b
   11b68:	bne	11bc4 <__assert_fail@plt+0xa70>
   11b6c:	bl	13678 <__assert_fail@plt+0x2524>
   11b70:	movw	r1, #62032	; 0xf250
   11b74:	mov	r3, r9
   11b78:	movt	r1, #65532	; 0xfffc
   11b7c:	add	r0, r0, r1
   11b80:	cmp	r0, #696	; 0x2b8
   11b84:	bls	11bc4 <__assert_fail@plt+0xa70>
   11b88:	movw	r0, #37224	; 0x9168
   11b8c:	movw	r1, #32208	; 0x7dd0
   11b90:	mov	r2, #10
   11b94:	sub	r3, fp, #40	; 0x28
   11b98:	movt	r0, #2
   11b9c:	movt	r1, #1
   11ba0:	ldr	r0, [r0]
   11ba4:	str	r1, [sp]
   11ba8:	mov	r1, #0
   11bac:	bl	162d4 <__assert_fail@plt+0x5180>
   11bb0:	cmp	r0, #0
   11bb4:	mov	r3, r9
   11bb8:	ldreq	r0, [fp, #-36]	; 0xffffffdc
   11bbc:	cmpeq	r0, #0
   11bc0:	beq	11cf4 <__assert_fail@plt+0xba0>
   11bc4:	cmp	r8, #2
   11bc8:	beq	12814 <__assert_fail@plt+0x16c0>
   11bcc:	movw	r0, #37224	; 0x9168
   11bd0:	add	r1, sp, #52	; 0x34
   11bd4:	movt	r0, #2
   11bd8:	ldr	r0, [r0]
   11bdc:	str	r0, [r1, r8, lsl #2]
   11be0:	add	r8, r8, #1
   11be4:	mov	r0, #1
   11be8:	mov	r7, r3
   11bec:	b	11690 <__assert_fail@plt+0x53c>
   11bf0:	movw	r0, #37232	; 0x9170
   11bf4:	mov	r1, #0
   11bf8:	mov	r7, r3
   11bfc:	movt	r0, #2
   11c00:	strb	r1, [r0]
   11c04:	mov	r0, #1
   11c08:	str	r0, [sp, #48]	; 0x30
   11c0c:	mov	r0, #117	; 0x75
   11c10:	b	11690 <__assert_fail@plt+0x53c>
   11c14:	movw	r0, #37232	; 0x9170
   11c18:	mov	r1, #0
   11c1c:	mov	r7, r3
   11c20:	movt	r0, #2
   11c24:	strb	r1, [r0, #1]
   11c28:	mov	r0, #1
   11c2c:	str	r0, [sp, #48]	; 0x30
   11c30:	mov	r0, #100	; 0x64
   11c34:	b	11690 <__assert_fail@plt+0x53c>
   11c38:	movw	r0, #37224	; 0x9168
   11c3c:	mov	r1, #0
   11c40:	mov	r2, #10
   11c44:	sub	r3, fp, #40	; 0x28
   11c48:	movt	r0, #2
   11c4c:	ldr	r7, [r0]
   11c50:	movw	r0, #32208	; 0x7dd0
   11c54:	movt	r0, #1
   11c58:	str	r0, [sp]
   11c5c:	mov	r0, r7
   11c60:	bl	162d4 <__assert_fail@plt+0x5180>
   11c64:	cmp	r0, #2
   11c68:	bcs	12858 <__assert_fail@plt+0x1704>
   11c6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c70:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11c74:	mvn	r3, #0
   11c78:	mov	r7, r9
   11c7c:	subs	r2, r0, r3
   11c80:	sbcs	r1, r1, #0
   11c84:	movw	r1, #37232	; 0x9170
   11c88:	movcs	r0, r3
   11c8c:	movt	r1, #2
   11c90:	str	r0, [r1, #16]
   11c94:	mov	r0, #119	; 0x77
   11c98:	b	11690 <__assert_fail@plt+0x53c>
   11c9c:	movw	r0, #37232	; 0x9170
   11ca0:	mov	r1, #1
   11ca4:	mov	r7, r3
   11ca8:	movt	r0, #2
   11cac:	strb	r1, [r0, #5]
   11cb0:	mov	r0, #105	; 0x69
   11cb4:	b	11690 <__assert_fail@plt+0x53c>
   11cb8:	mov	r2, r7
   11cbc:	mov	r0, #0
   11cc0:	str	r0, [r2, #20]
   11cc4:	mov	r0, #1
   11cc8:	mov	r7, r3
   11ccc:	str	r0, [sp, #48]	; 0x30
   11cd0:	mov	r0, #68	; 0x44
   11cd4:	b	11690 <__assert_fail@plt+0x53c>
   11cd8:	movw	r0, #37232	; 0x9170
   11cdc:	mov	r1, #3
   11ce0:	mov	r7, r9
   11ce4:	movt	r0, #2
   11ce8:	str	r1, [r0, #24]
   11cec:	mov	r0, #256	; 0x100
   11cf0:	b	11690 <__assert_fail@plt+0x53c>
   11cf4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11cf8:	movw	r1, #37232	; 0x9170
   11cfc:	movt	r1, #2
   11d00:	str	r0, [r1, #8]
   11d04:	b	11be4 <__assert_fail@plt+0xa90>
   11d08:	movw	r6, #37232	; 0x9170
   11d0c:	movt	r6, #2
   11d10:	ldr	r0, [r6, #24]
   11d14:	mov	r7, r6
   11d18:	cmp	r0, #0
   11d1c:	beq	11d30 <__assert_fail@plt+0xbdc>
   11d20:	ldr	r1, [sp, #48]	; 0x30
   11d24:	eor	r1, r1, #1
   11d28:	tst	r1, #1
   11d2c:	beq	12888 <__assert_fail@plt+0x1734>
   11d30:	ldrb	r1, [r7, #4]
   11d34:	cmp	r0, #0
   11d38:	beq	11d44 <__assert_fail@plt+0xbf0>
   11d3c:	cmp	r1, #0
   11d40:	beq	12894 <__assert_fail@plt+0x1740>
   11d44:	cmp	r1, #0
   11d48:	str	r3, [sp, #28]
   11d4c:	ldrbeq	r0, [r7, #2]
   11d50:	cmpeq	r0, #1
   11d54:	beq	128a0 <__assert_fail@plt+0x174c>
   11d58:	ldr	r5, [sp, #52]	; 0x34
   11d5c:	ldr	r4, [sp, #56]	; 0x38
   11d60:	movw	r1, #32905	; 0x8089
   11d64:	movt	r1, #1
   11d68:	mov	r0, r5
   11d6c:	bl	10ee4 <strcmp@plt>
   11d70:	cmp	r0, #0
   11d74:	beq	11d9c <__assert_fail@plt+0xc48>
   11d78:	movw	r0, #37216	; 0x9160
   11d7c:	movw	r1, #32811	; 0x802b
   11d80:	movt	r0, #2
   11d84:	movt	r1, #1
   11d88:	ldr	r2, [r0]
   11d8c:	mov	r0, r5
   11d90:	bl	130b0 <__assert_fail@plt+0x1f5c>
   11d94:	cmp	r0, #0
   11d98:	beq	128cc <__assert_fail@plt+0x1778>
   11d9c:	movw	r1, #32905	; 0x8089
   11da0:	mov	r0, r4
   11da4:	movt	r1, #1
   11da8:	bl	10ee4 <strcmp@plt>
   11dac:	cmp	r0, #0
   11db0:	beq	11dd8 <__assert_fail@plt+0xc84>
   11db4:	movw	r0, #37220	; 0x9164
   11db8:	movw	r1, #32339	; 0x7e53
   11dbc:	movt	r0, #2
   11dc0:	movt	r1, #1
   11dc4:	ldr	r2, [r0]
   11dc8:	mov	r0, r4
   11dcc:	bl	130b0 <__assert_fail@plt+0x1f5c>
   11dd0:	cmp	r0, #0
   11dd4:	beq	128fc <__assert_fail@plt+0x17a8>
   11dd8:	movw	r6, #37216	; 0x9160
   11ddc:	mov	r1, #2
   11de0:	str	r5, [sp, #16]
   11de4:	movt	r6, #2
   11de8:	ldr	r0, [r6]
   11dec:	bl	12f48 <__assert_fail@plt+0x1df4>
   11df0:	sub	r0, fp, #40	; 0x28
   11df4:	bl	133c0 <__assert_fail@plt+0x226c>
   11df8:	sub	r4, fp, #52	; 0x34
   11dfc:	mov	r0, r4
   11e00:	bl	133c0 <__assert_fail@plt+0x226c>
   11e04:	ldrb	r0, [r7, #1]
   11e08:	cmp	r0, #1
   11e0c:	ldrbeq	r0, [r7]
   11e10:	cmpeq	r0, #1
   11e14:	beq	12300 <__assert_fail@plt+0x11ac>
   11e18:	ldr	r0, [sp, #28]
   11e1c:	ldr	r1, [r6]
   11e20:	sub	sl, fp, #52	; 0x34
   11e24:	uxtb	r2, r0
   11e28:	mov	r0, sl
   11e2c:	str	r2, [sp, #24]
   11e30:	bl	134f4 <__assert_fail@plt+0x23a0>
   11e34:	cmp	r0, #0
   11e38:	beq	126a8 <__assert_fail@plt+0x1554>
   11e3c:	ldr	r8, [fp, #-48]	; 0xffffffd0
   11e40:	ldr	r5, [fp, #-44]	; 0xffffffd4
   11e44:	mov	r0, #0
   11e48:	mov	r6, #0
   11e4c:	str	r0, [sp, #40]	; 0x28
   11e50:	subs	r7, r8, #1
   11e54:	beq	11efc <__assert_fail@plt+0xda8>
   11e58:	movw	r0, #37232	; 0x9170
   11e5c:	mov	r6, #0
   11e60:	movt	r0, #2
   11e64:	ldr	r9, [r0, #12]
   11e68:	cmp	r9, #0
   11e6c:	beq	11efc <__assert_fail@plt+0xda8>
   11e70:	mov	r6, #0
   11e74:	mov	r4, #0
   11e78:	cmp	r6, r7
   11e7c:	bcs	11eb0 <__assert_fail@plt+0xd5c>
   11e80:	bl	11058 <__ctype_b_loc@plt>
   11e84:	ldr	r0, [r0]
   11e88:	ldrb	r1, [r5, r6]
   11e8c:	cmp	r1, #10
   11e90:	beq	11ea4 <__assert_fail@plt+0xd50>
   11e94:	add	r1, r0, r1, lsl #1
   11e98:	ldrh	r1, [r1]
   11e9c:	ands	r1, r1, #1
   11ea0:	beq	11eb0 <__assert_fail@plt+0xd5c>
   11ea4:	add	r6, r6, #1
   11ea8:	cmp	r6, r7
   11eac:	bcc	11e88 <__assert_fail@plt+0xd34>
   11eb0:	cmp	r6, r7
   11eb4:	bcs	11ee8 <__assert_fail@plt+0xd94>
   11eb8:	bl	11058 <__ctype_b_loc@plt>
   11ebc:	ldr	r0, [r0]
   11ec0:	ldrb	r1, [r5, r6]
   11ec4:	cmp	r1, #10
   11ec8:	beq	11ee8 <__assert_fail@plt+0xd94>
   11ecc:	add	r1, r0, r1, lsl #1
   11ed0:	ldrh	r1, [r1]
   11ed4:	ands	r1, r1, #1
   11ed8:	bne	11ee8 <__assert_fail@plt+0xd94>
   11edc:	add	r6, r6, #1
   11ee0:	cmp	r6, r7
   11ee4:	bcc	11ec0 <__assert_fail@plt+0xd6c>
   11ee8:	add	r4, r4, #1
   11eec:	cmp	r4, r9
   11ef0:	bcs	11efc <__assert_fail@plt+0xda8>
   11ef4:	cmp	r7, r6
   11ef8:	bhi	11e78 <__assert_fail@plt+0xd24>
   11efc:	movw	r9, #37232	; 0x9170
   11f00:	sub	r1, r7, r6
   11f04:	movw	r4, #37216	; 0x9160
   11f08:	add	r0, r8, r5
   11f0c:	movt	r9, #2
   11f10:	movt	r4, #2
   11f14:	ldr	r2, [r9, #8]
   11f18:	cmp	r2, r1
   11f1c:	movcc	r1, r2
   11f20:	add	r1, r1, r6
   11f24:	mov	r6, r4
   11f28:	add	ip, r5, r1
   11f2c:	sub	r5, fp, #40	; 0x28
   11f30:	mvn	r1, ip
   11f34:	add	r1, r0, r1
   11f38:	mov	r0, #1
   11f3c:	str	r0, [sp, #20]
   11f40:	mov	r0, #0
   11f44:	str	r0, [sp, #48]	; 0x30
   11f48:	mov	r4, sl
   11f4c:	mov	sl, r1
   11f50:	ldr	r1, [r6]
   11f54:	ldrb	r0, [r1]
   11f58:	tst	r0, #16
   11f5c:	bne	125a4 <__assert_fail@plt+0x1450>
   11f60:	ldr	r2, [sp, #24]
   11f64:	mov	r0, r5
   11f68:	mov	r7, ip
   11f6c:	bl	134f4 <__assert_fail@plt+0x23a0>
   11f70:	cmp	r0, #0
   11f74:	beq	12020 <__assert_fail@plt+0xecc>
   11f78:	str	r7, [sp, #36]	; 0x24
   11f7c:	str	r4, [sp, #44]	; 0x2c
   11f80:	mov	r7, #0
   11f84:	ldmib	r5, {r0, r6}
   11f88:	subs	r4, r0, #1
   11f8c:	str	r0, [sp, #32]
   11f90:	ldrne	r9, [r9, #12]
   11f94:	cmpne	r9, #0
   11f98:	bne	12104 <__assert_fail@plt+0xfb0>
   11f9c:	movw	r9, #37232	; 0x9170
   11fa0:	sub	r1, r4, r7
   11fa4:	ldr	r0, [sp, #32]
   11fa8:	mov	r8, #1
   11fac:	movt	r9, #2
   11fb0:	ldr	r2, [r9, #8]
   11fb4:	add	r0, r0, r6
   11fb8:	cmp	r2, r1
   11fbc:	movcc	r1, r2
   11fc0:	add	r1, r1, r7
   11fc4:	add	ip, r6, r1
   11fc8:	mvn	r1, ip
   11fcc:	add	r2, r0, r1
   11fd0:	ldr	r0, [r9, #16]
   11fd4:	ldrb	r1, [r9, #5]
   11fd8:	str	r2, [sp, #32]
   11fdc:	cmp	r0, r2
   11fe0:	movcc	r2, r0
   11fe4:	cmp	r0, sl
   11fe8:	movcs	r0, sl
   11fec:	cmp	r1, #1
   11ff0:	bne	1204c <__assert_fail@plt+0xef8>
   11ff4:	ldr	r7, [sp, #36]	; 0x24
   11ff8:	movw	r4, #37216	; 0x9160
   11ffc:	cmp	r2, r0
   12000:	movt	r4, #2
   12004:	mov	r6, r4
   12008:	bne	12084 <__assert_fail@plt+0xf30>
   1200c:	mov	r0, ip
   12010:	mov	r1, r7
   12014:	mov	r4, ip
   12018:	bl	13620 <__assert_fail@plt+0x24cc>
   1201c:	b	12074 <__assert_fail@plt+0xf20>
   12020:	ldr	r0, [r6]
   12024:	mov	r1, sl
   12028:	mov	ip, r7
   1202c:	mov	sl, r4
   12030:	ldrb	r0, [r0]
   12034:	tst	r0, #32
   12038:	mov	r0, #6
   1203c:	movweq	r0, #8
   12040:	cmp	r0, #0
   12044:	beq	11f48 <__assert_fail@plt+0xdf4>
   12048:	b	125bc <__assert_fail@plt+0x1468>
   1204c:	ldr	r7, [sp, #36]	; 0x24
   12050:	movw	r4, #37216	; 0x9160
   12054:	cmp	r2, r0
   12058:	movt	r4, #2
   1205c:	mov	r6, r4
   12060:	bne	12084 <__assert_fail@plt+0xf30>
   12064:	mov	r0, ip
   12068:	mov	r1, r7
   1206c:	mov	r4, ip
   12070:	bl	10f5c <memcmp@plt>
   12074:	mov	r8, r0
   12078:	cmp	r0, #0
   1207c:	mov	ip, r4
   12080:	movwne	r8, #1
   12084:	ldr	r1, [sp, #40]	; 0x28
   12088:	eor	r0, r8, #1
   1208c:	adds	r0, r1, r0
   12090:	ldr	r1, [sp, #48]	; 0x30
   12094:	adc	r1, r1, #0
   12098:	subs	r4, r0, #1
   1209c:	and	r2, r0, r1
   120a0:	sbc	r3, r1, #0
   120a4:	cmn	r2, #1
   120a8:	movne	r3, r1
   120ac:	movne	r4, r0
   120b0:	ldr	r0, [r9, #20]
   120b4:	str	r3, [sp, #48]	; 0x30
   120b8:	ldr	r3, [sp, #28]
   120bc:	cmp	r0, #0
   120c0:	beq	120f8 <__assert_fail@plt+0xfa4>
   120c4:	cmp	r8, #0
   120c8:	beq	12194 <__assert_fail@plt+0x1040>
   120cc:	ldr	r0, [sp, #48]	; 0x30
   120d0:	ldr	r1, [sp, #20]
   120d4:	orr	r0, r4, r0
   120d8:	clz	r0, r0
   120dc:	lsr	r0, r0, #5
   120e0:	and	r1, r1, r0
   120e4:	str	r1, [sp, #20]
   120e8:	ldr	r7, [sp, #48]	; 0x30
   120ec:	orrs	r0, r4, r7
   120f0:	bne	121d8 <__assert_fail@plt+0x1084>
   120f4:	b	1223c <__assert_fail@plt+0x10e8>
   120f8:	cmp	r8, #0
   120fc:	beq	121bc <__assert_fail@plt+0x1068>
   12100:	b	121cc <__assert_fail@plt+0x1078>
   12104:	mov	r7, #0
   12108:	mov	r8, #0
   1210c:	cmp	r7, r4
   12110:	bcs	12144 <__assert_fail@plt+0xff0>
   12114:	bl	11058 <__ctype_b_loc@plt>
   12118:	ldr	r0, [r0]
   1211c:	ldrb	r1, [r6, r7]
   12120:	cmp	r1, #10
   12124:	beq	12138 <__assert_fail@plt+0xfe4>
   12128:	add	r1, r0, r1, lsl #1
   1212c:	ldrh	r1, [r1]
   12130:	ands	r1, r1, #1
   12134:	beq	12144 <__assert_fail@plt+0xff0>
   12138:	add	r7, r7, #1
   1213c:	cmp	r7, r4
   12140:	bcc	1211c <__assert_fail@plt+0xfc8>
   12144:	cmp	r7, r4
   12148:	bcs	1217c <__assert_fail@plt+0x1028>
   1214c:	bl	11058 <__ctype_b_loc@plt>
   12150:	ldr	r0, [r0]
   12154:	ldrb	r1, [r6, r7]
   12158:	cmp	r1, #10
   1215c:	beq	1217c <__assert_fail@plt+0x1028>
   12160:	add	r1, r0, r1, lsl #1
   12164:	ldrh	r1, [r1]
   12168:	ands	r1, r1, #1
   1216c:	bne	1217c <__assert_fail@plt+0x1028>
   12170:	add	r7, r7, #1
   12174:	cmp	r7, r4
   12178:	bcc	12154 <__assert_fail@plt+0x1000>
   1217c:	add	r8, r8, #1
   12180:	cmp	r8, r9
   12184:	bcs	11f9c <__assert_fail@plt+0xe48>
   12188:	cmp	r4, r7
   1218c:	bhi	1210c <__assert_fail@plt+0xfb8>
   12190:	b	11f9c <__assert_fail@plt+0xe48>
   12194:	ldr	r2, [sp, #48]	; 0x30
   12198:	eor	r1, r4, #1
   1219c:	orrs	r1, r1, r2
   121a0:	bne	121bc <__assert_fail@plt+0x1068>
   121a4:	cmp	r0, #1
   121a8:	beq	12288 <__assert_fail@plt+0x1134>
   121ac:	cmp	r0, #2
   121b0:	ldreq	r0, [sp, #20]
   121b4:	tsteq	r0, #1
   121b8:	beq	12288 <__assert_fail@plt+0x1134>
   121bc:	ldrb	r1, [r9, #2]
   121c0:	mov	r0, #0
   121c4:	cmp	r1, #1
   121c8:	bne	122c0 <__assert_fail@plt+0x116c>
   121cc:	ldr	r7, [sp, #48]	; 0x30
   121d0:	orrs	r0, r4, r7
   121d4:	beq	1223c <__assert_fail@plt+0x10e8>
   121d8:	cmp	r8, #0
   121dc:	beq	1224c <__assert_fail@plt+0x10f8>
   121e0:	ldrb	r0, [r9]
   121e4:	cmp	r0, #0
   121e8:	beq	12258 <__assert_fail@plt+0x1104>
   121ec:	ldrb	r0, [r9, #4]
   121f0:	mov	sl, ip
   121f4:	cmp	r0, #0
   121f8:	bne	12214 <__assert_fail@plt+0x10c0>
   121fc:	movw	r1, #32358	; 0x7e66
   12200:	adds	r2, r4, #1
   12204:	mov	r0, #1
   12208:	adc	r3, r7, #0
   1220c:	movt	r1, #1
   12210:	bl	110ac <__printf_chk@plt>
   12214:	movw	r0, #37220	; 0x9164
   12218:	mov	r1, #1
   1221c:	movt	r0, #2
   12220:	ldr	r3, [r0]
   12224:	ldr	r0, [sp, #44]	; 0x2c
   12228:	ldr	r2, [r0, #4]
   1222c:	ldr	r0, [r0, #8]
   12230:	bl	10f50 <fwrite_unlocked@plt>
   12234:	mov	ip, sl
   12238:	b	12258 <__assert_fail@plt+0x1104>
   1223c:	ldrb	r0, [r9, #1]
   12240:	cmp	r0, #0
   12244:	bne	121ec <__assert_fail@plt+0x1098>
   12248:	b	12258 <__assert_fail@plt+0x1104>
   1224c:	ldrb	r0, [r9, #2]
   12250:	cmp	r0, #1
   12254:	beq	121ec <__assert_fail@plt+0x1098>
   12258:	mov	sl, r5
   1225c:	ldr	r5, [sp, #44]	; 0x2c
   12260:	ldr	r1, [sp, #32]
   12264:	cmp	r8, #0
   12268:	mov	r0, #0
   1226c:	movwne	r4, #0
   12270:	movwne	r7, #0
   12274:	str	r4, [sp, #40]	; 0x28
   12278:	str	r7, [sp, #48]	; 0x30
   1227c:	cmp	r0, #0
   12280:	beq	11f48 <__assert_fail@plt+0xdf4>
   12284:	b	125bc <__assert_fail@plt+0x1468>
   12288:	movw	r0, #37220	; 0x9164
   1228c:	movt	r0, #2
   12290:	ldr	r0, [r0]
   12294:	ldr	r1, [r0, #20]
   12298:	ldr	r2, [r0, #24]
   1229c:	cmp	r1, r2
   122a0:	bcs	122dc <__assert_fail@plt+0x1188>
   122a4:	add	r2, r1, #1
   122a8:	str	r2, [r0, #20]
   122ac:	strb	r3, [r1]
   122b0:	ldrb	r1, [r9, #2]
   122b4:	mov	r0, #0
   122b8:	cmp	r1, #1
   122bc:	beq	121cc <__assert_fail@plt+0x1078>
   122c0:	mov	r1, sl
   122c4:	ldr	sl, [sp, #44]	; 0x2c
   122c8:	str	r4, [sp, #40]	; 0x28
   122cc:	mov	ip, r7
   122d0:	cmp	r0, #0
   122d4:	beq	11f48 <__assert_fail@plt+0xdf4>
   122d8:	b	125bc <__assert_fail@plt+0x1468>
   122dc:	ldr	r1, [sp, #24]
   122e0:	str	ip, [sp, #40]	; 0x28
   122e4:	bl	110f4 <__overflow@plt>
   122e8:	ldr	ip, [sp, #40]	; 0x28
   122ec:	ldrb	r1, [r9, #2]
   122f0:	mov	r0, #0
   122f4:	cmp	r1, #1
   122f8:	beq	121cc <__assert_fail@plt+0x1078>
   122fc:	b	122c0 <__assert_fail@plt+0x116c>
   12300:	ldrb	r0, [r7, #4]
   12304:	cmp	r0, #0
   12308:	beq	11e18 <__assert_fail@plt+0xcc4>
   1230c:	ldr	r1, [r6]
   12310:	mov	r2, #0
   12314:	str	r4, [sp, #44]	; 0x2c
   12318:	str	r2, [sp, #36]	; 0x24
   1231c:	ldrb	r0, [r1]
   12320:	tst	r0, #16
   12324:	bne	12638 <__assert_fail@plt+0x14e4>
   12328:	ldr	r0, [sp, #28]
   1232c:	mov	r5, #0
   12330:	sub	r9, fp, #40	; 0x28
   12334:	uxtb	r0, r0
   12338:	str	r0, [sp, #32]
   1233c:	mov	r0, #0
   12340:	str	r0, [sp, #36]	; 0x24
   12344:	ldr	r2, [sp, #32]
   12348:	mov	r0, r9
   1234c:	bl	134f4 <__assert_fail@plt+0x23a0>
   12350:	cmp	r0, #0
   12354:	beq	12638 <__assert_fail@plt+0x14e4>
   12358:	ldr	r8, [r9, #4]
   1235c:	str	r5, [sp, #48]	; 0x30
   12360:	ldr	r4, [r9, #8]
   12364:	mov	r6, #0
   12368:	subs	r7, r8, #1
   1236c:	movwne	r0, #37232	; 0x9170
   12370:	movtne	r0, #2
   12374:	ldrne	r5, [r0, #12]
   12378:	cmpne	r5, #0
   1237c:	bne	123f8 <__assert_fail@plt+0x12a4>
   12380:	movw	r3, #37232	; 0x9170
   12384:	sub	r1, r7, r6
   12388:	ldr	r5, [sp, #48]	; 0x30
   1238c:	add	r0, r8, r4
   12390:	movt	r3, #2
   12394:	ldr	r2, [r3, #8]
   12398:	cmp	r2, r1
   1239c:	movcc	r1, r2
   123a0:	cmp	r5, #0
   123a4:	add	r1, r1, r6
   123a8:	mov	r6, #1
   123ac:	add	r4, r4, r1
   123b0:	mvn	r1, r4
   123b4:	add	r8, r0, r1
   123b8:	beq	124a8 <__assert_fail@plt+0x1354>
   123bc:	ldr	r2, [r3, #16]
   123c0:	ldr	r0, [sp, #40]	; 0x28
   123c4:	ldrb	r1, [r3, #5]
   123c8:	cmp	r2, r0
   123cc:	movcc	r0, r2
   123d0:	cmp	r2, r8
   123d4:	movcs	r2, r8
   123d8:	cmp	r1, #1
   123dc:	bne	12488 <__assert_fail@plt+0x1334>
   123e0:	cmp	r2, r0
   123e4:	bne	124a8 <__assert_fail@plt+0x1354>
   123e8:	mov	r0, r4
   123ec:	mov	r1, r5
   123f0:	bl	13620 <__assert_fail@plt+0x24cc>
   123f4:	b	1249c <__assert_fail@plt+0x1348>
   123f8:	mov	r6, #0
   123fc:	mov	sl, #0
   12400:	cmp	r6, r7
   12404:	bcs	12438 <__assert_fail@plt+0x12e4>
   12408:	bl	11058 <__ctype_b_loc@plt>
   1240c:	ldr	r0, [r0]
   12410:	ldrb	r1, [r4, r6]
   12414:	cmp	r1, #10
   12418:	beq	1242c <__assert_fail@plt+0x12d8>
   1241c:	add	r1, r0, r1, lsl #1
   12420:	ldrh	r1, [r1]
   12424:	ands	r1, r1, #1
   12428:	beq	12438 <__assert_fail@plt+0x12e4>
   1242c:	add	r6, r6, #1
   12430:	cmp	r6, r7
   12434:	bcc	12410 <__assert_fail@plt+0x12bc>
   12438:	cmp	r6, r7
   1243c:	bcs	12470 <__assert_fail@plt+0x131c>
   12440:	bl	11058 <__ctype_b_loc@plt>
   12444:	ldr	r0, [r0]
   12448:	ldrb	r1, [r4, r6]
   1244c:	cmp	r1, #10
   12450:	beq	12470 <__assert_fail@plt+0x131c>
   12454:	add	r1, r0, r1, lsl #1
   12458:	ldrh	r1, [r1]
   1245c:	ands	r1, r1, #1
   12460:	bne	12470 <__assert_fail@plt+0x131c>
   12464:	add	r6, r6, #1
   12468:	cmp	r6, r7
   1246c:	bcc	12448 <__assert_fail@plt+0x12f4>
   12470:	add	sl, sl, #1
   12474:	cmp	sl, r5
   12478:	bcs	12380 <__assert_fail@plt+0x122c>
   1247c:	cmp	r7, r6
   12480:	bhi	12400 <__assert_fail@plt+0x12ac>
   12484:	b	12380 <__assert_fail@plt+0x122c>
   12488:	cmp	r2, r0
   1248c:	bne	124a8 <__assert_fail@plt+0x1354>
   12490:	mov	r0, r4
   12494:	mov	r1, r5
   12498:	bl	10f5c <memcmp@plt>
   1249c:	mov	r6, r0
   124a0:	cmp	r0, #0
   124a4:	movwne	r6, #1
   124a8:	movw	r0, #37232	; 0x9170
   124ac:	ldr	r3, [sp, #28]
   124b0:	cmp	r6, #0
   124b4:	movt	r0, #2
   124b8:	ldr	r0, [r0, #24]
   124bc:	cmpne	r0, #0
   124c0:	bne	124dc <__assert_fail@plt+0x1388>
   124c4:	clz	r0, r0
   124c8:	mvn	r1, r6
   124cc:	lsr	r0, r0, #5
   124d0:	tst	r1, r0
   124d4:	beq	12510 <__assert_fail@plt+0x13bc>
   124d8:	b	12548 <__assert_fail@plt+0x13f4>
   124dc:	cmp	r0, #1
   124e0:	cmpne	r0, #4
   124e4:	bne	12568 <__assert_fail@plt+0x1414>
   124e8:	movw	r0, #37220	; 0x9164
   124ec:	movt	r0, #2
   124f0:	ldr	r0, [r0]
   124f4:	ldr	r1, [r0, #20]
   124f8:	ldr	r2, [r0, #24]
   124fc:	cmp	r1, r2
   12500:	bcs	1258c <__assert_fail@plt+0x1438>
   12504:	add	r2, r1, #1
   12508:	str	r2, [r0, #20]
   1250c:	strb	r3, [r1]
   12510:	movw	r0, #37220	; 0x9164
   12514:	ldr	r2, [r9, #4]
   12518:	mov	r1, #1
   1251c:	movt	r0, #2
   12520:	str	r1, [sp, #36]	; 0x24
   12524:	mov	r1, #1
   12528:	ldr	r3, [r0]
   1252c:	ldr	r0, [r9, #8]
   12530:	bl	10f50 <fwrite_unlocked@plt>
   12534:	mov	r0, r9
   12538:	ldr	r9, [sp, #44]	; 0x2c
   1253c:	mov	r5, r4
   12540:	str	r8, [sp, #40]	; 0x28
   12544:	str	r0, [sp, #44]	; 0x2c
   12548:	movw	r4, #37216	; 0x9160
   1254c:	movt	r4, #2
   12550:	ldr	r1, [r4]
   12554:	mov	r6, r4
   12558:	ldrb	r0, [r1]
   1255c:	tst	r0, #16
   12560:	beq	12344 <__assert_fail@plt+0x11f0>
   12564:	b	12638 <__assert_fail@plt+0x14e4>
   12568:	ldr	r1, [sp, #36]	; 0x24
   1256c:	orr	r0, r0, #1
   12570:	subs	r0, r0, #3
   12574:	movwne	r0, #1
   12578:	mvn	r1, r1
   1257c:	orr	r0, r1, r0
   12580:	tst	r0, #1
   12584:	beq	124e8 <__assert_fail@plt+0x1394>
   12588:	b	12510 <__assert_fail@plt+0x13bc>
   1258c:	ldr	r1, [sp, #32]
   12590:	bl	110f4 <__overflow@plt>
   12594:	movw	r0, #37232	; 0x9170
   12598:	movt	r0, #2
   1259c:	ldr	r0, [r0, #24]
   125a0:	b	124c4 <__assert_fail@plt+0x1370>
   125a4:	ldr	r1, [sp, #40]	; 0x28
   125a8:	mov	sl, r4
   125ac:	ldr	r0, [sp, #48]	; 0x30
   125b0:	orrs	r0, r1, r0
   125b4:	bne	125d4 <__assert_fail@plt+0x1480>
   125b8:	b	1269c <__assert_fail@plt+0x1548>
   125bc:	ldr	r1, [sp, #40]	; 0x28
   125c0:	cmp	r0, #8
   125c4:	bne	126a8 <__assert_fail@plt+0x1554>
   125c8:	ldr	r0, [sp, #48]	; 0x30
   125cc:	orrs	r0, r1, r0
   125d0:	beq	1269c <__assert_fail@plt+0x1548>
   125d4:	ldrb	r0, [r9]
   125d8:	cmp	r0, #1
   125dc:	bne	126a8 <__assert_fail@plt+0x1554>
   125e0:	ldrb	r0, [r9, #4]
   125e4:	cmp	r0, #0
   125e8:	bne	12608 <__assert_fail@plt+0x14b4>
   125ec:	ldr	r0, [sp, #48]	; 0x30
   125f0:	adds	r2, r1, #1
   125f4:	movw	r1, #32358	; 0x7e66
   125f8:	movt	r1, #1
   125fc:	adc	r3, r0, #0
   12600:	mov	r0, #1
   12604:	bl	110ac <__printf_chk@plt>
   12608:	movw	r0, #37220	; 0x9164
   1260c:	ldr	r2, [sl, #4]
   12610:	mov	r1, #1
   12614:	movt	r0, #2
   12618:	ldr	r3, [r0]
   1261c:	ldr	r0, [sl, #8]
   12620:	bl	10f50 <fwrite_unlocked@plt>
   12624:	ldr	r0, [r6]
   12628:	ldrb	r1, [r0]
   1262c:	tst	r1, #32
   12630:	beq	126b8 <__assert_fail@plt+0x1564>
   12634:	b	126fc <__assert_fail@plt+0x15a8>
   12638:	movw	r0, #37232	; 0x9170
   1263c:	movt	r0, #2
   12640:	ldr	r0, [r0, #24]
   12644:	cmp	r0, #4
   12648:	cmpne	r0, #2
   1264c:	bne	126a8 <__assert_fail@plt+0x1554>
   12650:	ldr	r0, [sp, #36]	; 0x24
   12654:	tst	r0, #1
   12658:	beq	126a8 <__assert_fail@plt+0x1554>
   1265c:	movw	r0, #37220	; 0x9164
   12660:	movt	r0, #2
   12664:	ldr	r0, [r0]
   12668:	ldr	r1, [r0, #20]
   1266c:	ldr	r2, [r0, #24]
   12670:	cmp	r1, r2
   12674:	bcs	126e0 <__assert_fail@plt+0x158c>
   12678:	add	r2, r1, #1
   1267c:	str	r2, [r0, #20]
   12680:	ldr	r0, [sp, #28]
   12684:	strb	r0, [r1]
   12688:	ldr	r0, [r6]
   1268c:	ldrb	r1, [r0]
   12690:	tst	r1, #32
   12694:	beq	126b8 <__assert_fail@plt+0x1564>
   12698:	b	126fc <__assert_fail@plt+0x15a8>
   1269c:	ldrb	r0, [r9, #1]
   126a0:	cmp	r0, #0
   126a4:	bne	125e0 <__assert_fail@plt+0x148c>
   126a8:	ldr	r0, [r6]
   126ac:	ldrb	r1, [r0]
   126b0:	tst	r1, #32
   126b4:	bne	126fc <__assert_fail@plt+0x15a8>
   126b8:	bl	12f84 <__assert_fail@plt+0x1e30>
   126bc:	cmp	r0, #0
   126c0:	bne	126fc <__assert_fail@plt+0x15a8>
   126c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   126c8:	bl	13088 <__assert_fail@plt+0x1f34>
   126cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   126d0:	bl	13088 <__assert_fail@plt+0x1f34>
   126d4:	mov	r0, #0
   126d8:	sub	sp, fp, #28
   126dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126e0:	ldr	r1, [sp, #28]
   126e4:	uxtb	r1, r1
   126e8:	bl	110f4 <__overflow@plt>
   126ec:	ldr	r0, [r6]
   126f0:	ldrb	r1, [r0]
   126f4:	tst	r1, #32
   126f8:	beq	126b8 <__assert_fail@plt+0x1564>
   126fc:	movw	r1, #32341	; 0x7e55
   12700:	mov	r0, #0
   12704:	mov	r2, #5
   12708:	movt	r1, #1
   1270c:	bl	10f68 <dcgettext@plt>
   12710:	ldr	r1, [sp, #16]
   12714:	mov	r4, r0
   12718:	mov	r0, #4
   1271c:	bl	15130 <__assert_fail@plt+0x3fdc>
   12720:	mov	r3, r0
   12724:	mov	r0, #1
   12728:	mov	r1, #0
   1272c:	mov	r2, r4
   12730:	bl	10fe0 <error@plt>
   12734:	mov	r0, #1
   12738:	bl	11250 <__assert_fail@plt+0xfc>
   1273c:	movw	r1, #31472	; 0x7af0
   12740:	mov	r0, #0
   12744:	mov	r2, #5
   12748:	movt	r1, #1
   1274c:	bl	10f68 <dcgettext@plt>
   12750:	mov	r5, r0
   12754:	ldr	r0, [r7]
   12758:	ldr	r0, [r4, r0, lsl #2]
   1275c:	bl	15658 <__assert_fail@plt+0x4504>
   12760:	mov	r3, r0
   12764:	mov	r0, #0
   12768:	mov	r1, #0
   1276c:	mov	r2, r5
   12770:	bl	10fe0 <error@plt>
   12774:	mov	r0, #1
   12778:	bl	11250 <__assert_fail@plt+0xfc>
   1277c:	movw	r0, #37112	; 0x90f8
   12780:	movw	r2, #31646	; 0x7b9e
   12784:	mov	r1, #0
   12788:	movw	r7, #31626	; 0x7b8a
   1278c:	movt	r0, #2
   12790:	movt	r2, #1
   12794:	str	r1, [sp, #8]
   12798:	movw	r1, #31403	; 0x7aab
   1279c:	movt	r7, #1
   127a0:	ldr	r3, [r0]
   127a4:	movw	r0, #37220	; 0x9164
   127a8:	str	r2, [sp, #4]
   127ac:	movw	r2, #31612	; 0x7b7c
   127b0:	movt	r1, #1
   127b4:	str	r7, [sp]
   127b8:	movt	r0, #2
   127bc:	movt	r2, #1
   127c0:	ldr	r0, [r0]
   127c4:	bl	15afc <__assert_fail@plt+0x49a8>
   127c8:	mov	r0, #0
   127cc:	bl	11064 <exit@plt>
   127d0:	mov	r0, #0
   127d4:	bl	11250 <__assert_fail@plt+0xfc>
   127d8:	movw	r1, #31512	; 0x7b18
   127dc:	mov	r0, #0
   127e0:	mov	r2, #5
   127e4:	movt	r1, #1
   127e8:	bl	10f68 <dcgettext@plt>
   127ec:	movw	r2, #32332	; 0x7e4c
   127f0:	str	r0, [sp]
   127f4:	mov	r0, #1
   127f8:	mov	r1, #0
   127fc:	mov	r3, sl
   12800:	movt	r2, #1
   12804:	bl	10fe0 <error@plt>
   12808:	movw	r1, #31545	; 0x7b39
   1280c:	movt	r1, #1
   12810:	b	12860 <__assert_fail@plt+0x170c>
   12814:	movw	r1, #31472	; 0x7af0
   12818:	mov	r0, #0
   1281c:	mov	r2, #5
   12820:	movt	r1, #1
   12824:	bl	10f68 <dcgettext@plt>
   12828:	mov	r4, r0
   1282c:	movw	r0, #37224	; 0x9168
   12830:	movt	r0, #2
   12834:	ldr	r0, [r0]
   12838:	bl	15658 <__assert_fail@plt+0x4504>
   1283c:	mov	r3, r0
   12840:	mov	r0, #0
   12844:	mov	r1, #0
   12848:	mov	r2, r4
   1284c:	bl	10fe0 <error@plt>
   12850:	mov	r0, #1
   12854:	bl	11250 <__assert_fail@plt+0xfc>
   12858:	movw	r1, #31577	; 0x7b59
   1285c:	movt	r1, #1
   12860:	mov	r0, #0
   12864:	mov	r2, #5
   12868:	bl	10f68 <dcgettext@plt>
   1286c:	movw	r2, #32332	; 0x7e4c
   12870:	str	r0, [sp]
   12874:	mov	r0, #1
   12878:	mov	r1, #0
   1287c:	mov	r3, r7
   12880:	movt	r2, #1
   12884:	bl	10fe0 <error@plt>
   12888:	movw	r1, #31662	; 0x7bae
   1288c:	movt	r1, #1
   12890:	b	128a8 <__assert_fail@plt+0x1754>
   12894:	movw	r1, #31709	; 0x7bdd
   12898:	movt	r1, #1
   1289c:	b	128a8 <__assert_fail@plt+0x1754>
   128a0:	movw	r1, #31760	; 0x7c10
   128a4:	movt	r1, #1
   128a8:	mov	r0, #0
   128ac:	mov	r2, #5
   128b0:	bl	10f68 <dcgettext@plt>
   128b4:	mov	r2, r0
   128b8:	mov	r0, #0
   128bc:	mov	r1, #0
   128c0:	bl	10fe0 <error@plt>
   128c4:	mov	r0, #1
   128c8:	bl	11250 <__assert_fail@plt+0xfc>
   128cc:	bl	11088 <__errno_location@plt>
   128d0:	ldr	r4, [r0]
   128d4:	mov	r0, #0
   128d8:	mov	r1, #3
   128dc:	mov	r2, r5
   128e0:	bl	153ac <__assert_fail@plt+0x4258>
   128e4:	movw	r2, #32798	; 0x801e
   128e8:	mov	r3, r0
   128ec:	mov	r0, #1
   128f0:	mov	r1, r4
   128f4:	movt	r2, #1
   128f8:	bl	10fe0 <error@plt>
   128fc:	bl	11088 <__errno_location@plt>
   12900:	ldr	r5, [r0]
   12904:	mov	r0, #0
   12908:	mov	r1, #3
   1290c:	mov	r2, r4
   12910:	bl	153ac <__assert_fail@plt+0x4258>
   12914:	movw	r2, #32798	; 0x801e
   12918:	mov	r3, r0
   1291c:	mov	r0, #1
   12920:	mov	r1, r5
   12924:	movt	r2, #1
   12928:	bl	10fe0 <error@plt>
   1292c:	mov	r0, #1
   12930:	b	11250 <__assert_fail@plt+0xfc>
   12934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12938:	add	fp, sp, #28
   1293c:	sub	sp, sp, #12
   12940:	mov	r4, r3
   12944:	mov	r9, r2
   12948:	mov	r7, r1
   1294c:	mov	r8, r0
   12950:	bl	11070 <strlen@plt>
   12954:	ldr	r6, [r7]
   12958:	cmp	r6, #0
   1295c:	beq	12a08 <__assert_fail@plt+0x18b4>
   12960:	mov	r5, r0
   12964:	cmp	r9, #0
   12968:	beq	12a18 <__assert_fail@plt+0x18c4>
   1296c:	add	r0, r7, #4
   12970:	mvn	sl, #0
   12974:	mov	r7, #0
   12978:	str	r9, [sp]
   1297c:	str	r0, [sp, #8]
   12980:	mov	r0, #0
   12984:	str	r0, [sp, #4]
   12988:	mov	r0, r9
   1298c:	mov	r0, r6
   12990:	mov	r1, r8
   12994:	mov	r2, r5
   12998:	bl	11130 <strncmp@plt>
   1299c:	cmp	r0, #0
   129a0:	bne	129ec <__assert_fail@plt+0x1898>
   129a4:	mov	r0, r6
   129a8:	bl	11070 <strlen@plt>
   129ac:	cmp	r0, r5
   129b0:	beq	12a0c <__assert_fail@plt+0x18b8>
   129b4:	cmn	sl, #1
   129b8:	beq	129e8 <__assert_fail@plt+0x1894>
   129bc:	ldr	r0, [sp]
   129c0:	mov	r1, r9
   129c4:	mov	r2, r4
   129c8:	mla	r0, sl, r4, r0
   129cc:	bl	10f5c <memcmp@plt>
   129d0:	ldr	r1, [sp, #4]
   129d4:	cmp	r0, #0
   129d8:	movwne	r0, #1
   129dc:	orr	r1, r1, r0
   129e0:	str	r1, [sp, #4]
   129e4:	b	129ec <__assert_fail@plt+0x1898>
   129e8:	mov	sl, r7
   129ec:	ldr	r0, [sp, #8]
   129f0:	add	r9, r9, r4
   129f4:	ldr	r6, [r0, r7, lsl #2]
   129f8:	add	r7, r7, #1
   129fc:	cmp	r6, #0
   12a00:	bne	1298c <__assert_fail@plt+0x1838>
   12a04:	b	12a80 <__assert_fail@plt+0x192c>
   12a08:	mvn	r7, #0
   12a0c:	mov	r0, r7
   12a10:	sub	sp, fp, #28
   12a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a18:	add	r4, r7, #4
   12a1c:	mov	r0, #0
   12a20:	mvn	sl, #0
   12a24:	mov	r7, #0
   12a28:	str	r0, [sp, #4]
   12a2c:	mov	r0, r6
   12a30:	mov	r1, r8
   12a34:	mov	r2, r5
   12a38:	bl	11130 <strncmp@plt>
   12a3c:	cmp	r0, #0
   12a40:	bne	12a70 <__assert_fail@plt+0x191c>
   12a44:	mov	r0, r6
   12a48:	bl	11070 <strlen@plt>
   12a4c:	cmp	r0, r5
   12a50:	beq	12a0c <__assert_fail@plt+0x18b8>
   12a54:	ldr	r1, [sp, #4]
   12a58:	cmn	sl, #1
   12a5c:	add	r0, sl, #1
   12a60:	movwne	r0, #1
   12a64:	moveq	sl, r7
   12a68:	orr	r1, r1, r0
   12a6c:	str	r1, [sp, #4]
   12a70:	ldr	r6, [r4, r7, lsl #2]
   12a74:	add	r7, r7, #1
   12a78:	cmp	r6, #0
   12a7c:	bne	12a2c <__assert_fail@plt+0x18d8>
   12a80:	ldr	r0, [sp, #4]
   12a84:	tst	r0, #1
   12a88:	mvnne	sl, #1
   12a8c:	mov	r0, sl
   12a90:	sub	sp, fp, #28
   12a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a98:	push	{r4, r5, r6, r7, fp, lr}
   12a9c:	add	fp, sp, #16
   12aa0:	mov	r5, r0
   12aa4:	ldr	r0, [r1]
   12aa8:	mvn	r4, #0
   12aac:	cmp	r0, #0
   12ab0:	beq	12ae0 <__assert_fail@plt+0x198c>
   12ab4:	add	r7, r1, #4
   12ab8:	mov	r6, #0
   12abc:	mov	r1, r5
   12ac0:	bl	10ee4 <strcmp@plt>
   12ac4:	cmp	r0, #0
   12ac8:	moveq	r0, r6
   12acc:	popeq	{r4, r5, r6, r7, fp, pc}
   12ad0:	ldr	r0, [r7, r6, lsl #2]
   12ad4:	add	r6, r6, #1
   12ad8:	cmp	r0, #0
   12adc:	bne	12abc <__assert_fail@plt+0x1968>
   12ae0:	mov	r0, r4
   12ae4:	pop	{r4, r5, r6, r7, fp, pc}
   12ae8:	push	{r4, r5, r6, sl, fp, lr}
   12aec:	add	fp, sp, #16
   12af0:	sub	sp, sp, #8
   12af4:	mov	r4, r1
   12af8:	movw	r1, #32738	; 0x7fe2
   12afc:	mov	r5, r0
   12b00:	movw	r0, #32711	; 0x7fc7
   12b04:	cmn	r2, #1
   12b08:	mov	r2, #5
   12b0c:	movt	r0, #1
   12b10:	movt	r1, #1
   12b14:	moveq	r1, r0
   12b18:	mov	r0, #0
   12b1c:	bl	10f68 <dcgettext@plt>
   12b20:	mov	r6, r0
   12b24:	mov	r0, #0
   12b28:	mov	r1, #8
   12b2c:	mov	r2, r4
   12b30:	bl	15088 <__assert_fail@plt+0x3f34>
   12b34:	mov	r4, r0
   12b38:	mov	r0, #1
   12b3c:	mov	r1, r5
   12b40:	bl	15648 <__assert_fail@plt+0x44f4>
   12b44:	str	r0, [sp]
   12b48:	mov	r0, #0
   12b4c:	mov	r1, #0
   12b50:	mov	r2, r6
   12b54:	mov	r3, r4
   12b58:	bl	10fe0 <error@plt>
   12b5c:	sub	sp, fp, #16
   12b60:	pop	{r4, r5, r6, sl, fp, pc}
   12b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b68:	add	fp, sp, #28
   12b6c:	sub	sp, sp, #4
   12b70:	mov	r5, r1
   12b74:	movw	r1, #32767	; 0x7fff
   12b78:	mov	sl, r2
   12b7c:	mov	r7, r0
   12b80:	mov	r0, #0
   12b84:	mov	r2, #5
   12b88:	mov	r8, #0
   12b8c:	movt	r1, #1
   12b90:	bl	10f68 <dcgettext@plt>
   12b94:	movw	r4, #37208	; 0x9158
   12b98:	movt	r4, #2
   12b9c:	ldr	r1, [r4]
   12ba0:	bl	10ecc <fputs_unlocked@plt>
   12ba4:	ldr	r6, [r7]
   12ba8:	cmp	r6, #0
   12bac:	beq	12c4c <__assert_fail@plt+0x1af8>
   12bb0:	add	r9, r7, #4
   12bb4:	mov	r7, #0
   12bb8:	str	sl, [sp]
   12bbc:	cmp	r8, #0
   12bc0:	beq	12bdc <__assert_fail@plt+0x1a88>
   12bc4:	mov	r0, r7
   12bc8:	mov	r1, r5
   12bcc:	mov	r2, sl
   12bd0:	bl	10f5c <memcmp@plt>
   12bd4:	cmp	r0, #0
   12bd8:	beq	12c08 <__assert_fail@plt+0x1ab4>
   12bdc:	ldr	r7, [r4]
   12be0:	mov	r0, r6
   12be4:	bl	15658 <__assert_fail@plt+0x4504>
   12be8:	movw	r2, #32788	; 0x8014
   12bec:	mov	r3, r0
   12bf0:	mov	r0, r7
   12bf4:	mov	r1, #1
   12bf8:	movt	r2, #1
   12bfc:	bl	110c4 <__fprintf_chk@plt>
   12c00:	mov	r7, r5
   12c04:	b	12c38 <__assert_fail@plt+0x1ae4>
   12c08:	mov	sl, r9
   12c0c:	ldr	r9, [r4]
   12c10:	mov	r0, r6
   12c14:	bl	15658 <__assert_fail@plt+0x4504>
   12c18:	mov	r3, r0
   12c1c:	mov	r0, r9
   12c20:	mov	r9, sl
   12c24:	ldr	sl, [sp]
   12c28:	movw	r2, #32796	; 0x801c
   12c2c:	mov	r1, #1
   12c30:	movt	r2, #1
   12c34:	bl	110c4 <__fprintf_chk@plt>
   12c38:	ldr	r6, [r9, -r8, lsl #2]
   12c3c:	add	r5, r5, sl
   12c40:	sub	r8, r8, #1
   12c44:	cmp	r6, #0
   12c48:	bne	12bbc <__assert_fail@plt+0x1a68>
   12c4c:	ldr	r0, [r4]
   12c50:	ldr	r1, [r0, #20]
   12c54:	ldr	r2, [r0, #24]
   12c58:	cmp	r1, r2
   12c5c:	addcc	r2, r1, #1
   12c60:	strcc	r2, [r0, #20]
   12c64:	movcc	r0, #10
   12c68:	strbcc	r0, [r1]
   12c6c:	subcc	sp, fp, #28
   12c70:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c74:	mov	r1, #10
   12c78:	sub	sp, fp, #28
   12c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c80:	b	110f4 <__overflow@plt>
   12c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c88:	add	fp, sp, #28
   12c8c:	sub	sp, sp, #12
   12c90:	mov	sl, r0
   12c94:	ldr	r0, [fp, #16]
   12c98:	ldr	r9, [fp, #8]
   12c9c:	mov	r5, r3
   12ca0:	mov	r8, r2
   12ca4:	mov	r6, r1
   12ca8:	cmp	r0, #0
   12cac:	beq	12cdc <__assert_fail@plt+0x1b88>
   12cb0:	mov	r0, r6
   12cb4:	mov	r1, r8
   12cb8:	mov	r2, r5
   12cbc:	mov	r3, r9
   12cc0:	bl	12934 <__assert_fail@plt+0x17e0>
   12cc4:	mov	r4, r0
   12cc8:	cmn	r4, #1
   12ccc:	ble	12d2c <__assert_fail@plt+0x1bd8>
   12cd0:	mov	r0, r4
   12cd4:	sub	sp, fp, #28
   12cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cdc:	ldr	r0, [r8]
   12ce0:	movw	r7, #32711	; 0x7fc7
   12ce4:	str	r5, [sp, #8]
   12ce8:	movt	r7, #1
   12cec:	cmp	r0, #0
   12cf0:	beq	12d44 <__assert_fail@plt+0x1bf0>
   12cf4:	add	r5, r8, #4
   12cf8:	mov	r4, #0
   12cfc:	mov	r1, r6
   12d00:	bl	10ee4 <strcmp@plt>
   12d04:	cmp	r0, #0
   12d08:	beq	12d20 <__assert_fail@plt+0x1bcc>
   12d0c:	ldr	r0, [r5, r4, lsl #2]
   12d10:	add	r4, r4, #1
   12d14:	cmp	r0, #0
   12d18:	bne	12cfc <__assert_fail@plt+0x1ba8>
   12d1c:	b	12d44 <__assert_fail@plt+0x1bf0>
   12d20:	ldr	r5, [sp, #8]
   12d24:	cmn	r4, #1
   12d28:	bgt	12cd0 <__assert_fail@plt+0x1b7c>
   12d2c:	movw	r0, #32711	; 0x7fc7
   12d30:	movw	r7, #32738	; 0x7fe2
   12d34:	str	r5, [sp, #8]
   12d38:	movt	r0, #1
   12d3c:	movt	r7, #1
   12d40:	moveq	r7, r0
   12d44:	ldr	r5, [fp, #12]
   12d48:	mov	r0, #0
   12d4c:	mov	r1, r7
   12d50:	mov	r2, #5
   12d54:	bl	10f68 <dcgettext@plt>
   12d58:	mov	r4, r0
   12d5c:	mov	r0, #0
   12d60:	mov	r1, #8
   12d64:	mov	r2, r6
   12d68:	bl	15088 <__assert_fail@plt+0x3f34>
   12d6c:	mov	r6, r0
   12d70:	mov	r0, #1
   12d74:	mov	r1, sl
   12d78:	bl	15648 <__assert_fail@plt+0x44f4>
   12d7c:	str	r0, [sp]
   12d80:	mov	r0, #0
   12d84:	mov	r1, #0
   12d88:	mov	r2, r4
   12d8c:	mov	r3, r6
   12d90:	bl	10fe0 <error@plt>
   12d94:	ldr	r1, [sp, #8]
   12d98:	mov	r0, r8
   12d9c:	mov	r2, r9
   12da0:	bl	12b64 <__assert_fail@plt+0x1a10>
   12da4:	blx	r5
   12da8:	mvn	r4, #0
   12dac:	mov	r0, r4
   12db0:	sub	sp, fp, #28
   12db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12db8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12dbc:	add	fp, sp, #24
   12dc0:	ldr	r6, [r1]
   12dc4:	cmp	r6, #0
   12dc8:	beq	12e2c <__assert_fail@plt+0x1cd8>
   12dcc:	mov	r8, r1
   12dd0:	mov	r7, r2
   12dd4:	mov	r1, r2
   12dd8:	mov	r2, r3
   12ddc:	mov	r4, r3
   12de0:	mov	r9, r0
   12de4:	bl	10f5c <memcmp@plt>
   12de8:	cmp	r0, #0
   12dec:	beq	12e24 <__assert_fail@plt+0x1cd0>
   12df0:	add	r7, r7, r4
   12df4:	add	r5, r8, #4
   12df8:	ldr	r6, [r5]
   12dfc:	cmp	r6, #0
   12e00:	beq	12e2c <__assert_fail@plt+0x1cd8>
   12e04:	mov	r0, r9
   12e08:	mov	r1, r7
   12e0c:	mov	r2, r4
   12e10:	bl	10f5c <memcmp@plt>
   12e14:	add	r7, r7, r4
   12e18:	add	r5, r5, #4
   12e1c:	cmp	r0, #0
   12e20:	bne	12df8 <__assert_fail@plt+0x1ca4>
   12e24:	mov	r0, r6
   12e28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e2c:	mov	r6, #0
   12e30:	mov	r0, r6
   12e34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e38:	movw	r1, #37260	; 0x918c
   12e3c:	movt	r1, #2
   12e40:	str	r0, [r1, #4]
   12e44:	bx	lr
   12e48:	movw	r1, #37260	; 0x918c
   12e4c:	movt	r1, #2
   12e50:	strb	r0, [r1]
   12e54:	bx	lr
   12e58:	push	{r4, r5, r6, sl, fp, lr}
   12e5c:	add	fp, sp, #16
   12e60:	sub	sp, sp, #8
   12e64:	movw	r0, #37220	; 0x9164
   12e68:	movt	r0, #2
   12e6c:	ldr	r0, [r0]
   12e70:	bl	17060 <__assert_fail@plt+0x5f0c>
   12e74:	cmp	r0, #0
   12e78:	beq	12ea0 <__assert_fail@plt+0x1d4c>
   12e7c:	movw	r5, #37260	; 0x918c
   12e80:	movt	r5, #2
   12e84:	ldrb	r0, [r5]
   12e88:	cmp	r0, #0
   12e8c:	beq	12ecc <__assert_fail@plt+0x1d78>
   12e90:	bl	11088 <__errno_location@plt>
   12e94:	ldr	r0, [r0]
   12e98:	cmp	r0, #32
   12e9c:	bne	12ecc <__assert_fail@plt+0x1d78>
   12ea0:	movw	r0, #37208	; 0x9158
   12ea4:	movt	r0, #2
   12ea8:	ldr	r0, [r0]
   12eac:	bl	17060 <__assert_fail@plt+0x5f0c>
   12eb0:	cmp	r0, #0
   12eb4:	subeq	sp, fp, #16
   12eb8:	popeq	{r4, r5, r6, sl, fp, pc}
   12ebc:	movw	r0, #37120	; 0x9100
   12ec0:	movt	r0, #2
   12ec4:	ldr	r0, [r0]
   12ec8:	bl	10f20 <_exit@plt>
   12ecc:	movw	r1, #32801	; 0x8021
   12ed0:	mov	r0, #0
   12ed4:	mov	r2, #5
   12ed8:	movt	r1, #1
   12edc:	bl	10f68 <dcgettext@plt>
   12ee0:	ldr	r6, [r5, #4]
   12ee4:	mov	r4, r0
   12ee8:	bl	11088 <__errno_location@plt>
   12eec:	ldr	r5, [r0]
   12ef0:	cmp	r6, #0
   12ef4:	bne	12f10 <__assert_fail@plt+0x1dbc>
   12ef8:	movw	r2, #32798	; 0x801e
   12efc:	mov	r0, #0
   12f00:	mov	r1, r5
   12f04:	mov	r3, r4
   12f08:	movt	r2, #1
   12f0c:	b	12f30 <__assert_fail@plt+0x1ddc>
   12f10:	mov	r0, r6
   12f14:	bl	152d0 <__assert_fail@plt+0x417c>
   12f18:	movw	r2, #32332	; 0x7e4c
   12f1c:	mov	r3, r0
   12f20:	str	r4, [sp]
   12f24:	mov	r0, #0
   12f28:	mov	r1, r5
   12f2c:	movt	r2, #1
   12f30:	bl	10fe0 <error@plt>
   12f34:	movw	r0, #37120	; 0x9100
   12f38:	movt	r0, #2
   12f3c:	ldr	r0, [r0]
   12f40:	bl	10f20 <_exit@plt>
   12f44:	b	10efc <posix_fadvise64@plt>
   12f48:	cmp	r0, #0
   12f4c:	bxeq	lr
   12f50:	push	{r4, sl, fp, lr}
   12f54:	add	fp, sp, #8
   12f58:	sub	sp, sp, #16
   12f5c:	mov	r4, r1
   12f60:	bl	110b8 <fileno@plt>
   12f64:	mov	r1, #0
   12f68:	mov	r2, #0
   12f6c:	mov	r3, #0
   12f70:	str	r1, [sp]
   12f74:	stmib	sp, {r1, r4}
   12f78:	bl	10efc <posix_fadvise64@plt>
   12f7c:	sub	sp, fp, #8
   12f80:	pop	{r4, sl, fp, pc}
   12f84:	push	{r4, r5, r6, sl, fp, lr}
   12f88:	add	fp, sp, #16
   12f8c:	sub	sp, sp, #8
   12f90:	mov	r4, r0
   12f94:	bl	110b8 <fileno@plt>
   12f98:	cmn	r0, #1
   12f9c:	ble	13010 <__assert_fail@plt+0x1ebc>
   12fa0:	mov	r0, r4
   12fa4:	bl	1101c <__freading@plt>
   12fa8:	cmp	r0, #0
   12fac:	beq	12fd8 <__assert_fail@plt+0x1e84>
   12fb0:	mov	r0, r4
   12fb4:	bl	110b8 <fileno@plt>
   12fb8:	mov	r1, #1
   12fbc:	mov	r2, #0
   12fc0:	mov	r3, #0
   12fc4:	str	r1, [sp]
   12fc8:	bl	10fb0 <lseek64@plt>
   12fcc:	and	r0, r0, r1
   12fd0:	cmn	r0, #1
   12fd4:	beq	13010 <__assert_fail@plt+0x1ebc>
   12fd8:	mov	r0, r4
   12fdc:	bl	13020 <__assert_fail@plt+0x1ecc>
   12fe0:	cmp	r0, #0
   12fe4:	beq	13010 <__assert_fail@plt+0x1ebc>
   12fe8:	bl	11088 <__errno_location@plt>
   12fec:	ldr	r6, [r0]
   12ff0:	mov	r5, r0
   12ff4:	mov	r0, r4
   12ff8:	bl	110d0 <fclose@plt>
   12ffc:	cmp	r6, #0
   13000:	strne	r6, [r5]
   13004:	mvnne	r0, #0
   13008:	sub	sp, fp, #16
   1300c:	pop	{r4, r5, r6, sl, fp, pc}
   13010:	mov	r0, r4
   13014:	sub	sp, fp, #16
   13018:	pop	{r4, r5, r6, sl, fp, lr}
   1301c:	b	110d0 <fclose@plt>
   13020:	push	{r4, sl, fp, lr}
   13024:	add	fp, sp, #8
   13028:	sub	sp, sp, #8
   1302c:	mov	r4, r0
   13030:	cmp	r0, #0
   13034:	beq	13050 <__assert_fail@plt+0x1efc>
   13038:	mov	r0, r4
   1303c:	bl	1101c <__freading@plt>
   13040:	cmp	r0, #0
   13044:	ldrbne	r0, [r4, #1]
   13048:	tstne	r0, #1
   1304c:	bne	13060 <__assert_fail@plt+0x1f0c>
   13050:	mov	r0, r4
   13054:	sub	sp, fp, #8
   13058:	pop	{r4, sl, fp, lr}
   1305c:	b	10f08 <fflush@plt>
   13060:	mov	r0, #1
   13064:	mov	r2, #0
   13068:	mov	r3, #0
   1306c:	str	r0, [sp]
   13070:	mov	r0, r4
   13074:	bl	1331c <__assert_fail@plt+0x21c8>
   13078:	mov	r0, r4
   1307c:	sub	sp, fp, #8
   13080:	pop	{r4, sl, fp, lr}
   13084:	b	10f08 <fflush@plt>
   13088:	push	{r4, r5, r6, sl, fp, lr}
   1308c:	add	fp, sp, #16
   13090:	mov	r4, r0
   13094:	bl	11088 <__errno_location@plt>
   13098:	ldr	r6, [r0]
   1309c:	mov	r5, r0
   130a0:	mov	r0, r4
   130a4:	bl	10f14 <free@plt>
   130a8:	str	r6, [r5]
   130ac:	pop	{r4, r5, r6, sl, fp, pc}
   130b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130b4:	add	fp, sp, #28
   130b8:	sub	sp, sp, #4
   130bc:	mov	r5, r0
   130c0:	mov	r0, r2
   130c4:	mov	r4, r2
   130c8:	mov	r9, r1
   130cc:	bl	110b8 <fileno@plt>
   130d0:	mov	r7, #0
   130d4:	cmp	r0, #0
   130d8:	beq	13118 <__assert_fail@plt+0x1fc4>
   130dc:	cmp	r0, #1
   130e0:	beq	13124 <__assert_fail@plt+0x1fd0>
   130e4:	cmp	r0, #2
   130e8:	beq	13100 <__assert_fail@plt+0x1fac>
   130ec:	mov	r0, #2
   130f0:	mov	r1, #2
   130f4:	bl	10f74 <dup2@plt>
   130f8:	subs	r7, r0, #2
   130fc:	movwne	r7, #1
   13100:	mov	r0, #1
   13104:	mov	r1, #1
   13108:	bl	10f74 <dup2@plt>
   1310c:	subs	r6, r0, #1
   13110:	movwne	r6, #1
   13114:	b	13128 <__assert_fail@plt+0x1fd4>
   13118:	mov	r6, #0
   1311c:	mov	r8, #0
   13120:	b	131f0 <__assert_fail@plt+0x209c>
   13124:	mov	r6, #0
   13128:	mov	r0, #0
   1312c:	mov	r1, #0
   13130:	mov	sl, #0
   13134:	bl	10f74 <dup2@plt>
   13138:	cmp	r0, #0
   1313c:	mov	r8, #0
   13140:	beq	13180 <__assert_fail@plt+0x202c>
   13144:	movw	r0, #32813	; 0x802d
   13148:	mov	r1, #0
   1314c:	movt	r0, #1
   13150:	bl	10fec <open64@plt>
   13154:	cmp	r0, #0
   13158:	beq	1317c <__assert_fail@plt+0x2028>
   1315c:	cmn	r0, #1
   13160:	ble	132a0 <__assert_fail@plt+0x214c>
   13164:	bl	11148 <close@plt>
   13168:	bl	11088 <__errno_location@plt>
   1316c:	mov	r4, r0
   13170:	mov	r0, #9
   13174:	str	r0, [r4]
   13178:	b	132a8 <__assert_fail@plt+0x2154>
   1317c:	mov	r8, #1
   13180:	cmp	r6, #0
   13184:	beq	131a4 <__assert_fail@plt+0x2050>
   13188:	movw	r0, #32813	; 0x802d
   1318c:	mov	r1, #0
   13190:	movt	r0, #1
   13194:	bl	10fec <open64@plt>
   13198:	mov	sl, #1
   1319c:	cmp	r0, #1
   131a0:	bne	13270 <__assert_fail@plt+0x211c>
   131a4:	cmp	r7, #0
   131a8:	beq	131e8 <__assert_fail@plt+0x2094>
   131ac:	movw	r0, #32813	; 0x802d
   131b0:	mov	r1, #0
   131b4:	movt	r0, #1
   131b8:	bl	10fec <open64@plt>
   131bc:	mov	r7, #1
   131c0:	cmp	r0, #2
   131c4:	beq	131ec <__assert_fail@plt+0x2098>
   131c8:	cmn	r0, #1
   131cc:	ble	132f8 <__assert_fail@plt+0x21a4>
   131d0:	bl	11148 <close@plt>
   131d4:	bl	11088 <__errno_location@plt>
   131d8:	mov	r4, r0
   131dc:	mov	r0, #9
   131e0:	str	r0, [r4]
   131e4:	b	13300 <__assert_fail@plt+0x21ac>
   131e8:	mov	r7, #0
   131ec:	mov	r6, sl
   131f0:	mov	r0, r5
   131f4:	mov	r1, r9
   131f8:	mov	r2, r4
   131fc:	bl	11040 <freopen64@plt>
   13200:	mov	r5, r0
   13204:	bl	11088 <__errno_location@plt>
   13208:	ldr	r9, [r0]
   1320c:	mov	r4, r0
   13210:	cmp	r7, #0
   13214:	beq	13220 <__assert_fail@plt+0x20cc>
   13218:	mov	r0, #2
   1321c:	bl	11148 <close@plt>
   13220:	cmp	r6, #0
   13224:	beq	13230 <__assert_fail@plt+0x20dc>
   13228:	mov	r0, #1
   1322c:	bl	11148 <close@plt>
   13230:	cmp	r8, #0
   13234:	beq	13254 <__assert_fail@plt+0x2100>
   13238:	mov	r0, #0
   1323c:	bl	11148 <close@plt>
   13240:	cmp	r5, #0
   13244:	beq	1325c <__assert_fail@plt+0x2108>
   13248:	mov	r0, r5
   1324c:	sub	sp, fp, #28
   13250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13254:	cmp	r5, #0
   13258:	bne	13248 <__assert_fail@plt+0x20f4>
   1325c:	mov	r5, #0
   13260:	str	r9, [r4]
   13264:	mov	r0, r5
   13268:	sub	sp, fp, #28
   1326c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13270:	cmn	r0, #1
   13274:	ble	132c0 <__assert_fail@plt+0x216c>
   13278:	bl	11148 <close@plt>
   1327c:	bl	11088 <__errno_location@plt>
   13280:	mov	r4, r0
   13284:	mov	r0, #9
   13288:	str	r0, [r4]
   1328c:	ldr	r9, [r4]
   13290:	mov	r5, #0
   13294:	cmp	r7, #0
   13298:	beq	13228 <__assert_fail@plt+0x20d4>
   1329c:	b	132d8 <__assert_fail@plt+0x2184>
   132a0:	bl	11088 <__errno_location@plt>
   132a4:	mov	r4, r0
   132a8:	ldr	r9, [r4]
   132ac:	mov	r8, #1
   132b0:	mov	r5, #0
   132b4:	cmp	r7, #0
   132b8:	bne	13218 <__assert_fail@plt+0x20c4>
   132bc:	b	13220 <__assert_fail@plt+0x20cc>
   132c0:	bl	11088 <__errno_location@plt>
   132c4:	mov	r4, r0
   132c8:	ldr	r9, [r4]
   132cc:	mov	r5, #0
   132d0:	cmp	r7, #0
   132d4:	beq	13228 <__assert_fail@plt+0x20d4>
   132d8:	mov	r0, #2
   132dc:	bl	11148 <close@plt>
   132e0:	mov	r0, #1
   132e4:	bl	11148 <close@plt>
   132e8:	mov	r5, #0
   132ec:	cmp	r8, #0
   132f0:	beq	1325c <__assert_fail@plt+0x2108>
   132f4:	b	13238 <__assert_fail@plt+0x20e4>
   132f8:	bl	11088 <__errno_location@plt>
   132fc:	mov	r4, r0
   13300:	ldr	r9, [r4]
   13304:	mov	r0, #2
   13308:	bl	11148 <close@plt>
   1330c:	mov	r5, #0
   13310:	cmp	sl, #0
   13314:	bne	13228 <__assert_fail@plt+0x20d4>
   13318:	b	13230 <__assert_fail@plt+0x20dc>
   1331c:	push	{r4, r5, r6, r7, fp, lr}
   13320:	add	fp, sp, #16
   13324:	sub	sp, sp, #8
   13328:	mov	r4, r0
   1332c:	ldr	r0, [r0, #4]
   13330:	mov	r5, r3
   13334:	mov	r6, r2
   13338:	ldr	r1, [r4, #8]
   1333c:	cmp	r1, r0
   13340:	bne	1335c <__assert_fail@plt+0x2208>
   13344:	ldrd	r0, [r4, #16]
   13348:	cmp	r1, r0
   1334c:	bne	1335c <__assert_fail@plt+0x2208>
   13350:	ldr	r0, [r4, #36]	; 0x24
   13354:	cmp	r0, #0
   13358:	beq	13374 <__assert_fail@plt+0x2220>
   1335c:	mov	r0, r4
   13360:	mov	r2, r6
   13364:	mov	r3, r5
   13368:	sub	sp, fp, #16
   1336c:	pop	{r4, r5, r6, r7, fp, lr}
   13370:	b	110dc <fseeko64@plt>
   13374:	ldr	r7, [fp, #8]
   13378:	mov	r0, r4
   1337c:	bl	110b8 <fileno@plt>
   13380:	mov	r2, r6
   13384:	mov	r3, r5
   13388:	str	r7, [sp]
   1338c:	bl	10fb0 <lseek64@plt>
   13390:	and	r2, r0, r1
   13394:	cmn	r2, #1
   13398:	mvneq	r0, #0
   1339c:	subeq	sp, fp, #16
   133a0:	popeq	{r4, r5, r6, r7, fp, pc}
   133a4:	strd	r0, [r4, #80]	; 0x50
   133a8:	ldr	r0, [r4]
   133ac:	bic	r0, r0, #16
   133b0:	str	r0, [r4]
   133b4:	mov	r0, #0
   133b8:	sub	sp, fp, #16
   133bc:	pop	{r4, r5, r6, r7, fp, pc}
   133c0:	mov	r1, #0
   133c4:	str	r1, [r0]
   133c8:	str	r1, [r0, #4]
   133cc:	str	r1, [r0, #8]
   133d0:	bx	lr
   133d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133d8:	add	fp, sp, #28
   133dc:	sub	sp, sp, #4
   133e0:	mov	r9, r0
   133e4:	ldrb	r0, [r1]
   133e8:	tst	r0, #16
   133ec:	bne	134c4 <__assert_fail@plt+0x2370>
   133f0:	ldr	r4, [r9, #8]
   133f4:	ldr	r0, [r9]
   133f8:	mov	r5, r1
   133fc:	mov	r8, #1
   13400:	add	sl, r4, r0
   13404:	mov	r6, r4
   13408:	ldmib	r5, {r0, r1}
   1340c:	cmp	r0, r1
   13410:	bcs	13478 <__assert_fail@plt+0x2324>
   13414:	add	r1, r0, #1
   13418:	str	r1, [r5, #4]
   1341c:	ldrb	r7, [r0]
   13420:	cmp	r6, sl
   13424:	beq	13438 <__assert_fail@plt+0x22e4>
   13428:	strb	r7, [r6], #1
   1342c:	cmp	r7, #10
   13430:	bne	13408 <__assert_fail@plt+0x22b4>
   13434:	b	134b0 <__assert_fail@plt+0x235c>
   13438:	ldr	r6, [r9]
   1343c:	mov	r0, r4
   13440:	mov	r1, r9
   13444:	mov	r2, #1
   13448:	mvn	r3, #0
   1344c:	str	r8, [sp]
   13450:	bl	15f60 <__assert_fail@plt+0x4e0c>
   13454:	str	r0, [r9, #8]
   13458:	mov	r4, r0
   1345c:	add	r6, r0, r6
   13460:	ldr	r0, [r9]
   13464:	add	sl, r4, r0
   13468:	strb	r7, [r6], #1
   1346c:	cmp	r7, #10
   13470:	bne	13408 <__assert_fail@plt+0x22b4>
   13474:	b	134b0 <__assert_fail@plt+0x235c>
   13478:	mov	r0, r5
   1347c:	bl	110e8 <__uflow@plt>
   13480:	mov	r7, r0
   13484:	cmn	r0, #1
   13488:	bne	13420 <__assert_fail@plt+0x22cc>
   1348c:	cmp	r6, r4
   13490:	beq	134d4 <__assert_fail@plt+0x2380>
   13494:	ldrb	r0, [r5]
   13498:	tst	r0, #32
   1349c:	bne	134e4 <__assert_fail@plt+0x2390>
   134a0:	ldrb	r0, [r6, #-1]
   134a4:	mov	r7, #10
   134a8:	cmp	r0, #10
   134ac:	bne	13420 <__assert_fail@plt+0x22cc>
   134b0:	sub	r0, r6, r4
   134b4:	str	r0, [r9, #4]
   134b8:	mov	r0, r9
   134bc:	sub	sp, fp, #28
   134c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134c4:	mov	r9, #0
   134c8:	mov	r0, r9
   134cc:	sub	sp, fp, #28
   134d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134d4:	mov	r9, #0
   134d8:	mov	r0, r9
   134dc:	sub	sp, fp, #28
   134e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134e4:	mov	r9, #0
   134e8:	mov	r0, r9
   134ec:	sub	sp, fp, #28
   134f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134f8:	add	fp, sp, #28
   134fc:	sub	sp, sp, #4
   13500:	mov	sl, r0
   13504:	ldrb	r0, [r1]
   13508:	tst	r0, #16
   1350c:	bne	135e8 <__assert_fail@plt+0x2494>
   13510:	ldr	r4, [sl, #8]
   13514:	ldr	r0, [sl]
   13518:	mov	r8, r2
   1351c:	mov	r6, r1
   13520:	add	r9, r4, r0
   13524:	mov	r7, r4
   13528:	ldmib	r6, {r0, r1}
   1352c:	cmp	r0, r1
   13530:	bcs	1359c <__assert_fail@plt+0x2448>
   13534:	add	r1, r0, #1
   13538:	str	r1, [r6, #4]
   1353c:	ldrb	r5, [r0]
   13540:	cmp	r7, r9
   13544:	beq	13558 <__assert_fail@plt+0x2404>
   13548:	strb	r5, [r7], #1
   1354c:	cmp	r5, r8
   13550:	bne	13528 <__assert_fail@plt+0x23d4>
   13554:	b	135d4 <__assert_fail@plt+0x2480>
   13558:	ldr	r7, [sl]
   1355c:	mov	r0, #1
   13560:	mov	r1, sl
   13564:	mov	r2, #1
   13568:	mvn	r3, #0
   1356c:	str	r0, [sp]
   13570:	mov	r0, r4
   13574:	bl	15f60 <__assert_fail@plt+0x4e0c>
   13578:	str	r0, [sl, #8]
   1357c:	mov	r4, r0
   13580:	add	r7, r0, r7
   13584:	ldr	r0, [sl]
   13588:	add	r9, r4, r0
   1358c:	strb	r5, [r7], #1
   13590:	cmp	r5, r8
   13594:	bne	13528 <__assert_fail@plt+0x23d4>
   13598:	b	135d4 <__assert_fail@plt+0x2480>
   1359c:	mov	r0, r6
   135a0:	bl	110e8 <__uflow@plt>
   135a4:	mov	r5, r0
   135a8:	cmn	r0, #1
   135ac:	bne	13540 <__assert_fail@plt+0x23ec>
   135b0:	cmp	r7, r4
   135b4:	beq	135f8 <__assert_fail@plt+0x24a4>
   135b8:	ldrb	r0, [r6]
   135bc:	tst	r0, #32
   135c0:	bne	13608 <__assert_fail@plt+0x24b4>
   135c4:	ldrb	r0, [r7, #-1]
   135c8:	mov	r5, r8
   135cc:	cmp	r0, r8
   135d0:	bne	13540 <__assert_fail@plt+0x23ec>
   135d4:	sub	r0, r7, r4
   135d8:	str	r0, [sl, #4]
   135dc:	mov	r0, sl
   135e0:	sub	sp, fp, #28
   135e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135e8:	mov	sl, #0
   135ec:	mov	r0, sl
   135f0:	sub	sp, fp, #28
   135f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135f8:	mov	sl, #0
   135fc:	mov	r0, sl
   13600:	sub	sp, fp, #28
   13604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13608:	mov	sl, #0
   1360c:	mov	r0, sl
   13610:	sub	sp, fp, #28
   13614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13618:	ldr	r0, [r0, #8]
   1361c:	b	13088 <__assert_fail@plt+0x1f34>
   13620:	push	{r4, r5, r6, sl, fp, lr}
   13624:	add	fp, sp, #16
   13628:	cmp	r2, #0
   1362c:	moveq	r0, #0
   13630:	popeq	{r4, r5, r6, sl, fp, pc}
   13634:	mov	r4, r2
   13638:	mov	r5, r1
   1363c:	mov	r6, r0
   13640:	bl	11028 <__ctype_toupper_loc@plt>
   13644:	ldr	r1, [r0]
   13648:	mov	r2, #0
   1364c:	ldrb	r0, [r5, r2]
   13650:	ldrb	r3, [r6, r2]
   13654:	ldr	r0, [r1, r0, lsl #2]
   13658:	ldr	r3, [r1, r3, lsl #2]
   1365c:	subs	r0, r3, r0
   13660:	popne	{r4, r5, r6, sl, fp, pc}
   13664:	add	r2, r2, #1
   13668:	cmp	r2, r4
   1366c:	movcs	r0, #0
   13670:	popcs	{r4, r5, r6, sl, fp, pc}
   13674:	b	1364c <__assert_fail@plt+0x24f8>
   13678:	push	{r4, sl, fp, lr}
   1367c:	add	fp, sp, #8
   13680:	sub	sp, sp, #8
   13684:	movw	r0, #32823	; 0x8037
   13688:	movt	r0, #1
   1368c:	bl	10ff8 <getenv@plt>
   13690:	cmp	r0, #0
   13694:	movw	r4, #4201	; 0x1069
   13698:	ldrbne	r1, [r0]
   1369c:	movt	r4, #3
   136a0:	cmpne	r1, #0
   136a4:	bne	136b4 <__assert_fail@plt+0x2560>
   136a8:	mov	r0, r4
   136ac:	sub	sp, fp, #8
   136b0:	pop	{r4, sl, fp, pc}
   136b4:	add	r1, sp, #4
   136b8:	mov	r2, #10
   136bc:	bl	10ef0 <strtol@plt>
   136c0:	ldr	r1, [sp, #4]
   136c4:	ldrb	r1, [r1]
   136c8:	cmp	r1, #0
   136cc:	moveq	r4, r0
   136d0:	mov	r0, r4
   136d4:	sub	sp, fp, #8
   136d8:	pop	{r4, sl, fp, pc}
   136dc:	push	{r4, r5, fp, lr}
   136e0:	add	fp, sp, #8
   136e4:	cmp	r0, #0
   136e8:	beq	1377c <__assert_fail@plt+0x2628>
   136ec:	mov	r1, #47	; 0x2f
   136f0:	mov	r4, r0
   136f4:	bl	1110c <strrchr@plt>
   136f8:	cmp	r0, #0
   136fc:	mov	r5, r4
   13700:	addne	r5, r0, #1
   13704:	sub	r0, r5, r4
   13708:	cmp	r0, #7
   1370c:	blt	13760 <__assert_fail@plt+0x260c>
   13710:	movw	r1, #32895	; 0x807f
   13714:	sub	r0, r5, #7
   13718:	mov	r2, #7
   1371c:	movt	r1, #1
   13720:	bl	11130 <strncmp@plt>
   13724:	cmp	r0, #0
   13728:	bne	13760 <__assert_fail@plt+0x260c>
   1372c:	movw	r1, #32903	; 0x8087
   13730:	mov	r0, r5
   13734:	mov	r2, #3
   13738:	movt	r1, #1
   1373c:	bl	11130 <strncmp@plt>
   13740:	cmp	r0, #0
   13744:	beq	13750 <__assert_fail@plt+0x25fc>
   13748:	mov	r4, r5
   1374c:	b	13760 <__assert_fail@plt+0x260c>
   13750:	movw	r0, #37192	; 0x9148
   13754:	add	r4, r5, #3
   13758:	movt	r0, #2
   1375c:	str	r4, [r0]
   13760:	movw	r0, #37196	; 0x914c
   13764:	movt	r0, #2
   13768:	str	r4, [r0]
   1376c:	movw	r0, #37268	; 0x9194
   13770:	movt	r0, #2
   13774:	str	r4, [r0]
   13778:	pop	{r4, r5, fp, pc}
   1377c:	movw	r0, #37208	; 0x9158
   13780:	mov	r1, #55	; 0x37
   13784:	mov	r2, #1
   13788:	movt	r0, #2
   1378c:	ldr	r3, [r0]
   13790:	movw	r0, #32839	; 0x8047
   13794:	movt	r0, #1
   13798:	bl	10fa4 <fwrite@plt>
   1379c:	bl	1113c <abort@plt>
   137a0:	push	{r4, r5, r6, sl, fp, lr}
   137a4:	add	fp, sp, #16
   137a8:	mov	r4, r0
   137ac:	movw	r0, #37272	; 0x9198
   137b0:	movt	r0, #2
   137b4:	cmp	r4, #0
   137b8:	moveq	r4, r0
   137bc:	bl	11088 <__errno_location@plt>
   137c0:	ldr	r6, [r0]
   137c4:	mov	r5, r0
   137c8:	mov	r0, r4
   137cc:	mov	r1, #48	; 0x30
   137d0:	bl	16190 <__assert_fail@plt+0x503c>
   137d4:	str	r6, [r5]
   137d8:	pop	{r4, r5, r6, sl, fp, pc}
   137dc:	movw	r1, #37272	; 0x9198
   137e0:	cmp	r0, #0
   137e4:	movt	r1, #2
   137e8:	movne	r1, r0
   137ec:	ldr	r0, [r1]
   137f0:	bx	lr
   137f4:	movw	r2, #37272	; 0x9198
   137f8:	cmp	r0, #0
   137fc:	movt	r2, #2
   13800:	movne	r2, r0
   13804:	str	r1, [r2]
   13808:	bx	lr
   1380c:	movw	r3, #37272	; 0x9198
   13810:	cmp	r0, #0
   13814:	movt	r3, #2
   13818:	movne	r3, r0
   1381c:	ubfx	r0, r1, #5, #3
   13820:	and	r1, r1, #31
   13824:	add	r0, r3, r0, lsl #2
   13828:	ldr	r3, [r0, #8]
   1382c:	eor	r2, r2, r3, lsr r1
   13830:	and	r2, r2, #1
   13834:	eor	r2, r3, r2, lsl r1
   13838:	str	r2, [r0, #8]
   1383c:	mov	r0, #1
   13840:	and	r0, r0, r3, lsr r1
   13844:	bx	lr
   13848:	movw	r2, #37272	; 0x9198
   1384c:	cmp	r0, #0
   13850:	movt	r2, #2
   13854:	movne	r2, r0
   13858:	ldr	r0, [r2, #4]
   1385c:	str	r1, [r2, #4]
   13860:	bx	lr
   13864:	movw	r3, #37272	; 0x9198
   13868:	cmp	r0, #0
   1386c:	movt	r3, #2
   13870:	movne	r3, r0
   13874:	cmp	r1, #0
   13878:	mov	r0, #10
   1387c:	cmpne	r2, #0
   13880:	str	r0, [r3]
   13884:	bne	13894 <__assert_fail@plt+0x2740>
   13888:	push	{fp, lr}
   1388c:	mov	fp, sp
   13890:	bl	1113c <abort@plt>
   13894:	str	r1, [r3, #40]	; 0x28
   13898:	str	r2, [r3, #44]	; 0x2c
   1389c:	bx	lr
   138a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138a4:	add	fp, sp, #28
   138a8:	sub	sp, sp, #20
   138ac:	mov	r7, r0
   138b0:	ldr	r0, [fp, #8]
   138b4:	movw	r5, #37272	; 0x9198
   138b8:	mov	r8, r3
   138bc:	mov	r9, r2
   138c0:	mov	sl, r1
   138c4:	movt	r5, #2
   138c8:	cmp	r0, #0
   138cc:	movne	r5, r0
   138d0:	bl	11088 <__errno_location@plt>
   138d4:	mov	r4, r0
   138d8:	ldm	r5, {r0, r1}
   138dc:	ldr	r2, [r5, #40]	; 0x28
   138e0:	ldr	r3, [r5, #44]	; 0x2c
   138e4:	add	r5, r5, #8
   138e8:	ldr	r6, [r4]
   138ec:	stm	sp, {r0, r1, r5}
   138f0:	str	r2, [sp, #12]
   138f4:	str	r3, [sp, #16]
   138f8:	mov	r0, r7
   138fc:	mov	r1, sl
   13900:	mov	r2, r9
   13904:	mov	r3, r8
   13908:	bl	13918 <__assert_fail@plt+0x27c4>
   1390c:	str	r6, [r4]
   13910:	sub	sp, fp, #28
   13914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1391c:	add	fp, sp, #28
   13920:	sub	sp, sp, #156	; 0x9c
   13924:	str	r0, [sp, #76]	; 0x4c
   13928:	ldr	r0, [fp, #12]
   1392c:	mov	r6, r1
   13930:	str	r3, [sp, #84]	; 0x54
   13934:	str	r2, [fp, #-84]	; 0xffffffac
   13938:	and	r1, r0, #4
   1393c:	str	r1, [sp, #24]
   13940:	and	r1, r0, #1
   13944:	str	r1, [sp, #28]
   13948:	ubfx	r8, r0, #1, #1
   1394c:	bl	10fbc <__ctype_get_mb_cur_max@plt>
   13950:	str	r0, [sp, #32]
   13954:	ldr	r0, [fp, #24]
   13958:	ldr	r7, [fp, #8]
   1395c:	mov	r1, #0
   13960:	mov	r2, #0
   13964:	mov	r4, #1
   13968:	str	r1, [sp, #52]	; 0x34
   1396c:	str	r0, [sp, #72]	; 0x48
   13970:	ldr	r0, [fp, #20]
   13974:	str	r0, [sp, #68]	; 0x44
   13978:	mov	r0, #0
   1397c:	str	r0, [sp, #48]	; 0x30
   13980:	mov	r0, #0
   13984:	str	r0, [sp, #92]	; 0x5c
   13988:	mov	r0, #0
   1398c:	str	r0, [fp, #-76]	; 0xffffffb4
   13990:	mov	r0, #0
   13994:	cmp	r7, #10
   13998:	bhi	14c80 <__assert_fail@plt+0x3b2c>
   1399c:	add	r1, pc, #28
   139a0:	mov	sl, r6
   139a4:	ldr	r6, [sp, #76]	; 0x4c
   139a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   139ac:	ldr	lr, [sp, #84]	; 0x54
   139b0:	mov	r9, #0
   139b4:	mov	r3, #1
   139b8:	mov	r5, #0
   139bc:	ldr	pc, [r1, r7, lsl #2]
   139c0:	muleq	r1, r0, sl
   139c4:	andeq	r3, r1, ip, asr #21
   139c8:	andeq	r3, r1, r0, lsr #21
   139cc:	andeq	r3, r1, r8, lsl #21
   139d0:	andeq	r3, r1, r0, asr #21
   139d4:	strdeq	r3, [r1], -r4
   139d8:			; <UNDEFINED> instruction: 0x00013ab0
   139dc:	andeq	r3, r1, r0, lsl #26
   139e0:	andeq	r3, r1, ip, ror #19
   139e4:	andeq	r3, r1, ip, ror #19
   139e8:	muleq	r1, r4, ip
   139ec:	mov	r9, r4
   139f0:	movw	r4, #32985	; 0x80d9
   139f4:	mov	r5, r8
   139f8:	mov	r8, r2
   139fc:	mov	r0, #0
   13a00:	mov	r2, #5
   13a04:	movt	r4, #1
   13a08:	mov	r1, r4
   13a0c:	bl	10f68 <dcgettext@plt>
   13a10:	cmp	r0, r4
   13a14:	str	r0, [sp, #68]	; 0x44
   13a18:	bne	13ba8 <__assert_fail@plt+0x2a54>
   13a1c:	bl	170e4 <__assert_fail@plt+0x5f90>
   13a20:	ldrb	r1, [r0]
   13a24:	and	r1, r1, #223	; 0xdf
   13a28:	cmp	r1, #71	; 0x47
   13a2c:	beq	13b74 <__assert_fail@plt+0x2a20>
   13a30:	cmp	r1, #85	; 0x55
   13a34:	bne	13b8c <__assert_fail@plt+0x2a38>
   13a38:	ldrb	r1, [r0, #1]
   13a3c:	and	r1, r1, #223	; 0xdf
   13a40:	cmp	r1, #84	; 0x54
   13a44:	bne	13b8c <__assert_fail@plt+0x2a38>
   13a48:	ldrb	r1, [r0, #2]
   13a4c:	and	r1, r1, #223	; 0xdf
   13a50:	cmp	r1, #70	; 0x46
   13a54:	bne	13b8c <__assert_fail@plt+0x2a38>
   13a58:	ldrb	r1, [r0, #3]
   13a5c:	cmp	r1, #45	; 0x2d
   13a60:	ldrbeq	r1, [r0, #4]
   13a64:	cmpeq	r1, #56	; 0x38
   13a68:	bne	13b8c <__assert_fail@plt+0x2a38>
   13a6c:	ldrb	r0, [r0, #5]
   13a70:	cmp	r0, #0
   13a74:	movw	r0, #32989	; 0x80dd
   13a78:	movt	r0, #1
   13a7c:	str	r0, [sp, #68]	; 0x44
   13a80:	bne	13b8c <__assert_fail@plt+0x2a38>
   13a84:	b	13ba8 <__assert_fail@plt+0x2a54>
   13a88:	mov	r0, #1
   13a8c:	b	13acc <__assert_fail@plt+0x2978>
   13a90:	mov	r7, #0
   13a94:	mov	r9, #0
   13a98:	mov	r3, r0
   13a9c:	b	13b6c <__assert_fail@plt+0x2a18>
   13aa0:	tst	r8, #1
   13aa4:	bne	13acc <__assert_fail@plt+0x2978>
   13aa8:	mov	r3, r0
   13aac:	b	13b24 <__assert_fail@plt+0x29d0>
   13ab0:	mov	r0, #1
   13ab4:	mov	r9, #0
   13ab8:	mov	r7, #5
   13abc:	b	13b08 <__assert_fail@plt+0x29b4>
   13ac0:	mov	r3, #1
   13ac4:	tst	r8, #1
   13ac8:	beq	13b24 <__assert_fail@plt+0x29d0>
   13acc:	mov	r1, #1
   13ad0:	mov	r9, #0
   13ad4:	mov	r7, #2
   13ad8:	mov	r3, r0
   13adc:	mov	r5, #1
   13ae0:	str	r1, [fp, #-76]	; 0xffffffb4
   13ae4:	movw	r1, #32987	; 0x80db
   13ae8:	movt	r1, #1
   13aec:	str	r1, [sp, #92]	; 0x5c
   13af0:	b	13d00 <__assert_fail@plt+0x2bac>
   13af4:	mov	r7, #5
   13af8:	tst	r8, #1
   13afc:	beq	13b44 <__assert_fail@plt+0x29f0>
   13b00:	mov	r0, #1
   13b04:	mov	r9, #0
   13b08:	str	r0, [fp, #-76]	; 0xffffffb4
   13b0c:	movw	r0, #32983	; 0x80d7
   13b10:	mov	r3, #1
   13b14:	mov	r5, #1
   13b18:	movt	r0, #1
   13b1c:	str	r0, [sp, #92]	; 0x5c
   13b20:	b	13d00 <__assert_fail@plt+0x2bac>
   13b24:	cmp	sl, #0
   13b28:	mov	r9, #1
   13b2c:	mov	r7, #2
   13b30:	movne	r0, #39	; 0x27
   13b34:	strbne	r0, [r6]
   13b38:	movw	r0, #32987	; 0x80db
   13b3c:	movt	r0, #1
   13b40:	b	13b60 <__assert_fail@plt+0x2a0c>
   13b44:	cmp	sl, #0
   13b48:	mov	r9, #1
   13b4c:	mov	r3, #1
   13b50:	movne	r0, #34	; 0x22
   13b54:	strbne	r0, [r6]
   13b58:	movw	r0, #32983	; 0x80d7
   13b5c:	movt	r0, #1
   13b60:	str	r0, [sp, #92]	; 0x5c
   13b64:	mov	r0, #1
   13b68:	str	r0, [fp, #-76]	; 0xffffffb4
   13b6c:	mov	r5, #0
   13b70:	b	13d00 <__assert_fail@plt+0x2bac>
   13b74:	ldrb	r1, [r0, #1]
   13b78:	and	r1, r1, #223	; 0xdf
   13b7c:	cmp	r1, #66	; 0x42
   13b80:	ldrbeq	r1, [r0, #2]
   13b84:	cmpeq	r1, #49	; 0x31
   13b88:	beq	14aa8 <__assert_fail@plt+0x3954>
   13b8c:	movw	r0, #32987	; 0x80db
   13b90:	movw	r1, #32983	; 0x80d7
   13b94:	cmp	r7, #9
   13b98:	movt	r0, #1
   13b9c:	movt	r1, #1
   13ba0:	moveq	r0, r1
   13ba4:	str	r0, [sp, #68]	; 0x44
   13ba8:	movw	r4, #32987	; 0x80db
   13bac:	mov	r0, #0
   13bb0:	mov	r2, #5
   13bb4:	movt	r4, #1
   13bb8:	mov	r1, r4
   13bbc:	bl	10f68 <dcgettext@plt>
   13bc0:	cmp	r0, r4
   13bc4:	str	r0, [sp, #72]	; 0x48
   13bc8:	beq	13bd8 <__assert_fail@plt+0x2a84>
   13bcc:	mov	r4, r9
   13bd0:	mov	r2, r8
   13bd4:	b	13c90 <__assert_fail@plt+0x2b3c>
   13bd8:	bl	170e4 <__assert_fail@plt+0x5f90>
   13bdc:	ldrb	r1, [r0]
   13be0:	mov	r4, r9
   13be4:	and	r1, r1, #223	; 0xdf
   13be8:	cmp	r1, #71	; 0x47
   13bec:	beq	13c48 <__assert_fail@plt+0x2af4>
   13bf0:	cmp	r1, #85	; 0x55
   13bf4:	mov	r2, r8
   13bf8:	bne	13c70 <__assert_fail@plt+0x2b1c>
   13bfc:	ldrb	r1, [r0, #1]
   13c00:	and	r1, r1, #223	; 0xdf
   13c04:	cmp	r1, #84	; 0x54
   13c08:	bne	13c70 <__assert_fail@plt+0x2b1c>
   13c0c:	ldrb	r1, [r0, #2]
   13c10:	and	r1, r1, #223	; 0xdf
   13c14:	cmp	r1, #70	; 0x46
   13c18:	ldrbeq	r1, [r0, #3]
   13c1c:	cmpeq	r1, #45	; 0x2d
   13c20:	bne	13c70 <__assert_fail@plt+0x2b1c>
   13c24:	ldrb	r1, [r0, #4]
   13c28:	cmp	r1, #56	; 0x38
   13c2c:	ldrbeq	r0, [r0, #5]
   13c30:	cmpeq	r0, #0
   13c34:	bne	13c70 <__assert_fail@plt+0x2b1c>
   13c38:	movw	r0, #32993	; 0x80e1
   13c3c:	movt	r0, #1
   13c40:	str	r0, [sp, #72]	; 0x48
   13c44:	b	13c90 <__assert_fail@plt+0x2b3c>
   13c48:	ldrb	r1, [r0, #1]
   13c4c:	mov	r2, r8
   13c50:	and	r1, r1, #223	; 0xdf
   13c54:	cmp	r1, #66	; 0x42
   13c58:	bne	13c70 <__assert_fail@plt+0x2b1c>
   13c5c:	ldrb	r1, [r0, #2]
   13c60:	cmp	r1, #49	; 0x31
   13c64:	ldrbeq	r1, [r0, #3]
   13c68:	cmpeq	r1, #56	; 0x38
   13c6c:	beq	14aec <__assert_fail@plt+0x3998>
   13c70:	movw	r0, #32987	; 0x80db
   13c74:	cmp	r7, #9
   13c78:	movt	r0, #1
   13c7c:	mov	r1, r0
   13c80:	movw	r0, #32983	; 0x80d7
   13c84:	movt	r0, #1
   13c88:	moveq	r1, r0
   13c8c:	str	r1, [sp, #72]	; 0x48
   13c90:	mov	r8, r5
   13c94:	mov	r9, #0
   13c98:	tst	r8, #1
   13c9c:	mov	r5, r8
   13ca0:	str	r2, [fp, #-48]	; 0xffffffd0
   13ca4:	bne	13cdc <__assert_fail@plt+0x2b88>
   13ca8:	ldr	r0, [sp, #68]	; 0x44
   13cac:	ldrb	r0, [r0]
   13cb0:	cmp	r0, #0
   13cb4:	beq	13cdc <__assert_fail@plt+0x2b88>
   13cb8:	ldr	r1, [sp, #68]	; 0x44
   13cbc:	mov	r9, #0
   13cc0:	add	r1, r1, #1
   13cc4:	cmp	r9, sl
   13cc8:	strbcc	r0, [r6, r9]
   13ccc:	ldrb	r0, [r1, r9]
   13cd0:	add	r9, r9, #1
   13cd4:	cmp	r0, #0
   13cd8:	bne	13cc4 <__assert_fail@plt+0x2b70>
   13cdc:	ldr	r8, [sp, #72]	; 0x48
   13ce0:	mov	r0, r8
   13ce4:	bl	11070 <strlen@plt>
   13ce8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13cec:	ldr	lr, [sp, #84]	; 0x54
   13cf0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13cf4:	str	r0, [fp, #-76]	; 0xffffffb4
   13cf8:	str	r8, [sp, #92]	; 0x5c
   13cfc:	mov	r3, #1
   13d00:	ldr	r0, [fp, #16]
   13d04:	str	r7, [fp, #-64]	; 0xffffffc0
   13d08:	str	r5, [fp, #-72]	; 0xffffffb8
   13d0c:	str	r3, [sp, #80]	; 0x50
   13d10:	cmp	r0, #0
   13d14:	movwne	r0, #1
   13d18:	and	r0, r0, r5
   13d1c:	str	r0, [fp, #-88]	; 0xffffffa8
   13d20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d24:	cmp	r0, #0
   13d28:	movwne	r0, #1
   13d2c:	subs	r7, r7, #2
   13d30:	and	r1, r0, r5
   13d34:	str	r7, [fp, #-80]	; 0xffffffb0
   13d38:	and	r1, r3, r1
   13d3c:	str	r1, [sp, #40]	; 0x28
   13d40:	clz	r1, r7
   13d44:	lsr	r1, r1, #5
   13d48:	and	r1, r1, r5
   13d4c:	eor	r5, r5, #1
   13d50:	str	r1, [sp, #36]	; 0x24
   13d54:	mov	r1, r7
   13d58:	str	r5, [sp, #88]	; 0x58
   13d5c:	mov	r7, #0
   13d60:	movwne	r1, #1
   13d64:	orr	r5, r1, r5
   13d68:	and	r1, r1, r3
   13d6c:	and	r0, r0, r1
   13d70:	str	r5, [sp, #60]	; 0x3c
   13d74:	str	r1, [fp, #-68]	; 0xffffffbc
   13d78:	str	r0, [fp, #-60]	; 0xffffffc4
   13d7c:	eor	r0, r3, #1
   13d80:	str	r0, [sp, #44]	; 0x2c
   13d84:	cmn	lr, #1
   13d88:	beq	13d98 <__assert_fail@plt+0x2c44>
   13d8c:	cmp	r7, lr
   13d90:	bne	13da4 <__assert_fail@plt+0x2c50>
   13d94:	b	14a1c <__assert_fail@plt+0x38c8>
   13d98:	ldrb	r0, [ip, r7]
   13d9c:	cmp	r0, #0
   13da0:	beq	14a24 <__assert_fail@plt+0x38d0>
   13da4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13da8:	mov	r8, #0
   13dac:	str	r4, [fp, #-52]	; 0xffffffcc
   13db0:	str	r2, [fp, #-48]	; 0xffffffd0
   13db4:	cmp	r0, #0
   13db8:	beq	13dec <__assert_fail@plt+0x2c98>
   13dbc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13dc0:	add	r4, r7, r0
   13dc4:	cmp	r0, #2
   13dc8:	bcc	13de4 <__assert_fail@plt+0x2c90>
   13dcc:	cmn	lr, #1
   13dd0:	bne	13de4 <__assert_fail@plt+0x2c90>
   13dd4:	mov	r0, ip
   13dd8:	bl	11070 <strlen@plt>
   13ddc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13de0:	mov	lr, r0
   13de4:	cmp	r4, lr
   13de8:	bls	13e04 <__assert_fail@plt+0x2cb0>
   13dec:	mov	r0, #0
   13df0:	str	r0, [fp, #-56]	; 0xffffffc8
   13df4:	ldrb	r5, [ip, r7]
   13df8:	cmp	r5, #126	; 0x7e
   13dfc:	bls	13e54 <__assert_fail@plt+0x2d00>
   13e00:	b	1425c <__assert_fail@plt+0x3108>
   13e04:	ldr	r1, [sp, #92]	; 0x5c
   13e08:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13e0c:	add	r0, ip, r7
   13e10:	mov	r4, lr
   13e14:	bl	10f5c <memcmp@plt>
   13e18:	ldr	r2, [sp, #88]	; 0x58
   13e1c:	cmp	r0, #0
   13e20:	mov	r1, r0
   13e24:	movwne	r1, #1
   13e28:	orr	r1, r1, r2
   13e2c:	tst	r1, #1
   13e30:	beq	14b30 <__assert_fail@plt+0x39dc>
   13e34:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e38:	clz	r0, r0
   13e3c:	mov	lr, r4
   13e40:	lsr	r0, r0, #5
   13e44:	str	r0, [fp, #-56]	; 0xffffffc8
   13e48:	ldrb	r5, [ip, r7]
   13e4c:	cmp	r5, #126	; 0x7e
   13e50:	bhi	1425c <__assert_fail@plt+0x3108>
   13e54:	add	r3, pc, #16
   13e58:	mov	r4, #1
   13e5c:	mov	r2, #110	; 0x6e
   13e60:	mov	r0, #97	; 0x61
   13e64:	mov	r1, #0
   13e68:	ldr	pc, [r3, r5, lsl #2]
   13e6c:	andeq	r4, r1, ip, lsr r1
   13e70:	andeq	r4, r1, ip, asr r2
   13e74:	andeq	r4, r1, ip, asr r2
   13e78:	andeq	r4, r1, ip, asr r2
   13e7c:	andeq	r4, r1, ip, asr r2
   13e80:	andeq	r4, r1, ip, asr r2
   13e84:	andeq	r4, r1, ip, asr r2
   13e88:	andeq	r4, r1, r8, lsr r3
   13e8c:	andeq	r4, r1, ip, lsl r1
   13e90:	andeq	r4, r1, r4, lsl #2
   13e94:	andeq	r4, r1, r8, lsr #2
   13e98:			; <UNDEFINED> instruction: 0x000141b8
   13e9c:	strdeq	r4, [r1], -ip
   13ea0:	andeq	r4, r1, r4, lsr #2
   13ea4:	andeq	r4, r1, ip, asr r2
   13ea8:	andeq	r4, r1, ip, asr r2
   13eac:	andeq	r4, r1, ip, asr r2
   13eb0:	andeq	r4, r1, ip, asr r2
   13eb4:	andeq	r4, r1, ip, asr r2
   13eb8:	andeq	r4, r1, ip, asr r2
   13ebc:	andeq	r4, r1, ip, asr r2
   13ec0:	andeq	r4, r1, ip, asr r2
   13ec4:	andeq	r4, r1, ip, asr r2
   13ec8:	andeq	r4, r1, ip, asr r2
   13ecc:	andeq	r4, r1, ip, asr r2
   13ed0:	andeq	r4, r1, ip, asr r2
   13ed4:	andeq	r4, r1, ip, asr r2
   13ed8:	andeq	r4, r1, ip, asr r2
   13edc:	andeq	r4, r1, ip, asr r2
   13ee0:	andeq	r4, r1, ip, asr r2
   13ee4:	andeq	r4, r1, ip, asr r2
   13ee8:	andeq	r4, r1, ip, asr r2
   13eec:			; <UNDEFINED> instruction: 0x000142b4
   13ef0:			; <UNDEFINED> instruction: 0x000142b8
   13ef4:			; <UNDEFINED> instruction: 0x000142b8
   13ef8:	andeq	r4, r1, r8, lsl #1
   13efc:			; <UNDEFINED> instruction: 0x000142b8
   13f00:	andeq	r4, r1, r8, rrx
   13f04:			; <UNDEFINED> instruction: 0x000142b8
   13f08:	andeq	r4, r1, r0, asr #3
   13f0c:			; <UNDEFINED> instruction: 0x000142b8
   13f10:			; <UNDEFINED> instruction: 0x000142b8
   13f14:			; <UNDEFINED> instruction: 0x000142b8
   13f18:	andeq	r4, r1, r8, rrx
   13f1c:	andeq	r4, r1, r8, rrx
   13f20:	andeq	r4, r1, r8, rrx
   13f24:	andeq	r4, r1, r8, rrx
   13f28:	andeq	r4, r1, r8, rrx
   13f2c:	andeq	r4, r1, r8, rrx
   13f30:	andeq	r4, r1, r8, rrx
   13f34:	andeq	r4, r1, r8, rrx
   13f38:	andeq	r4, r1, r8, rrx
   13f3c:	andeq	r4, r1, r8, rrx
   13f40:	andeq	r4, r1, r8, rrx
   13f44:	andeq	r4, r1, r8, rrx
   13f48:	andeq	r4, r1, r8, rrx
   13f4c:	andeq	r4, r1, r8, rrx
   13f50:	andeq	r4, r1, r8, rrx
   13f54:	andeq	r4, r1, r8, rrx
   13f58:			; <UNDEFINED> instruction: 0x000142b8
   13f5c:			; <UNDEFINED> instruction: 0x000142b8
   13f60:			; <UNDEFINED> instruction: 0x000142b8
   13f64:			; <UNDEFINED> instruction: 0x000142b8
   13f68:	andeq	r4, r1, ip, ror r1
   13f6c:	andeq	r4, r1, ip, asr r2
   13f70:	andeq	r4, r1, r8, rrx
   13f74:	andeq	r4, r1, r8, rrx
   13f78:	andeq	r4, r1, r8, rrx
   13f7c:	andeq	r4, r1, r8, rrx
   13f80:	andeq	r4, r1, r8, rrx
   13f84:	andeq	r4, r1, r8, rrx
   13f88:	andeq	r4, r1, r8, rrx
   13f8c:	andeq	r4, r1, r8, rrx
   13f90:	andeq	r4, r1, r8, rrx
   13f94:	andeq	r4, r1, r8, rrx
   13f98:	andeq	r4, r1, r8, rrx
   13f9c:	andeq	r4, r1, r8, rrx
   13fa0:	andeq	r4, r1, r8, rrx
   13fa4:	andeq	r4, r1, r8, rrx
   13fa8:	andeq	r4, r1, r8, rrx
   13fac:	andeq	r4, r1, r8, rrx
   13fb0:	andeq	r4, r1, r8, rrx
   13fb4:	andeq	r4, r1, r8, rrx
   13fb8:	andeq	r4, r1, r8, rrx
   13fbc:	andeq	r4, r1, r8, rrx
   13fc0:	andeq	r4, r1, r8, rrx
   13fc4:	andeq	r4, r1, r8, rrx
   13fc8:	andeq	r4, r1, r8, rrx
   13fcc:	andeq	r4, r1, r8, rrx
   13fd0:	andeq	r4, r1, r8, rrx
   13fd4:	andeq	r4, r1, r8, rrx
   13fd8:			; <UNDEFINED> instruction: 0x000142b8
   13fdc:	andeq	r4, r1, r8, asr #1
   13fe0:	andeq	r4, r1, r8, rrx
   13fe4:			; <UNDEFINED> instruction: 0x000142b8
   13fe8:	andeq	r4, r1, r8, rrx
   13fec:			; <UNDEFINED> instruction: 0x000142b8
   13ff0:	andeq	r4, r1, r8, rrx
   13ff4:	andeq	r4, r1, r8, rrx
   13ff8:	andeq	r4, r1, r8, rrx
   13ffc:	andeq	r4, r1, r8, rrx
   14000:	andeq	r4, r1, r8, rrx
   14004:	andeq	r4, r1, r8, rrx
   14008:	andeq	r4, r1, r8, rrx
   1400c:	andeq	r4, r1, r8, rrx
   14010:	andeq	r4, r1, r8, rrx
   14014:	andeq	r4, r1, r8, rrx
   14018:	andeq	r4, r1, r8, rrx
   1401c:	andeq	r4, r1, r8, rrx
   14020:	andeq	r4, r1, r8, rrx
   14024:	andeq	r4, r1, r8, rrx
   14028:	andeq	r4, r1, r8, rrx
   1402c:	andeq	r4, r1, r8, rrx
   14030:	andeq	r4, r1, r8, rrx
   14034:	andeq	r4, r1, r8, rrx
   14038:	andeq	r4, r1, r8, rrx
   1403c:	andeq	r4, r1, r8, rrx
   14040:	andeq	r4, r1, r8, rrx
   14044:	andeq	r4, r1, r8, rrx
   14048:	andeq	r4, r1, r8, rrx
   1404c:	andeq	r4, r1, r8, rrx
   14050:	andeq	r4, r1, r8, rrx
   14054:	andeq	r4, r1, r8, rrx
   14058:	andeq	r4, r1, r8, lsr #1
   1405c:			; <UNDEFINED> instruction: 0x000142b8
   14060:	andeq	r4, r1, r8, lsr #1
   14064:	andeq	r4, r1, r8, lsl #1
   14068:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1406c:	cmp	r0, #0
   14070:	beq	1434c <__assert_fail@plt+0x31f8>
   14074:	ldr	r0, [fp, #16]
   14078:	cmp	r0, #0
   1407c:	mov	r0, r5
   14080:	bne	1435c <__assert_fail@plt+0x3208>
   14084:	b	1437c <__assert_fail@plt+0x3228>
   14088:	mov	r4, #0
   1408c:	cmp	r7, #0
   14090:	beq	142b4 <__assert_fail@plt+0x3160>
   14094:	mov	r8, #0
   14098:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1409c:	cmp	r0, #0
   140a0:	bne	14074 <__assert_fail@plt+0x2f20>
   140a4:	b	1434c <__assert_fail@plt+0x31f8>
   140a8:	mov	r4, #0
   140ac:	cmn	lr, #1
   140b0:	beq	1428c <__assert_fail@plt+0x3138>
   140b4:	cmp	r7, #0
   140b8:	bne	14094 <__assert_fail@plt+0x2f40>
   140bc:	cmp	lr, #1
   140c0:	beq	142b4 <__assert_fail@plt+0x3160>
   140c4:	b	14094 <__assert_fail@plt+0x2f40>
   140c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   140cc:	cmp	r0, #2
   140d0:	bne	142e4 <__assert_fail@plt+0x3190>
   140d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   140d8:	tst	r0, #1
   140dc:	bne	14b44 <__assert_fail@plt+0x39f0>
   140e0:	mov	r8, #0
   140e4:	mov	r0, #92	; 0x5c
   140e8:	mov	r4, #0
   140ec:	cmp	r8, #0
   140f0:	beq	14304 <__assert_fail@plt+0x31b0>
   140f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   140f8:	b	143f8 <__assert_fail@plt+0x32a4>
   140fc:	mov	r0, #102	; 0x66
   14100:	b	14338 <__assert_fail@plt+0x31e4>
   14104:	mov	r2, #116	; 0x74
   14108:	ldr	r0, [sp, #60]	; 0x3c
   1410c:	tst	r0, #1
   14110:	mov	r0, r2
   14114:	bne	14338 <__assert_fail@plt+0x31e4>
   14118:	b	14b44 <__assert_fail@plt+0x39f0>
   1411c:	mov	r0, #98	; 0x62
   14120:	b	14338 <__assert_fail@plt+0x31e4>
   14124:	mov	r2, #114	; 0x72
   14128:	ldr	r0, [sp, #60]	; 0x3c
   1412c:	tst	r0, #1
   14130:	mov	r0, r2
   14134:	bne	14338 <__assert_fail@plt+0x31e4>
   14138:	b	14b44 <__assert_fail@plt+0x39f0>
   1413c:	ldr	r0, [sp, #80]	; 0x50
   14140:	tst	r0, #1
   14144:	beq	14420 <__assert_fail@plt+0x32cc>
   14148:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1414c:	tst	r0, #1
   14150:	bne	14c6c <__assert_fail@plt+0x3b18>
   14154:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14158:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1415c:	cmp	r0, #2
   14160:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14164:	movwne	r0, #1
   14168:	orr	r0, r0, r2
   1416c:	tst	r0, #1
   14170:	beq	14718 <__assert_fail@plt+0x35c4>
   14174:	mov	r0, r9
   14178:	b	1474c <__assert_fail@plt+0x35f8>
   1417c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14180:	mov	r8, #0
   14184:	mov	r5, #63	; 0x3f
   14188:	cmp	r0, #5
   1418c:	beq	145d4 <__assert_fail@plt+0x3480>
   14190:	cmp	r0, #2
   14194:	bne	14684 <__assert_fail@plt+0x3530>
   14198:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1419c:	tst	r0, #1
   141a0:	bne	14b44 <__assert_fail@plt+0x39f0>
   141a4:	mov	r4, #0
   141a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141ac:	cmp	r0, #0
   141b0:	bne	14074 <__assert_fail@plt+0x2f20>
   141b4:	b	1434c <__assert_fail@plt+0x31f8>
   141b8:	mov	r0, #118	; 0x76
   141bc:	b	14338 <__assert_fail@plt+0x31e4>
   141c0:	mov	r0, #1
   141c4:	mov	r5, #39	; 0x27
   141c8:	str	r0, [sp, #52]	; 0x34
   141cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   141d0:	cmp	r0, #2
   141d4:	bne	14248 <__assert_fail@plt+0x30f4>
   141d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   141dc:	tst	r0, #1
   141e0:	bne	14b44 <__assert_fail@plt+0x39f0>
   141e4:	ldr	r2, [sp, #48]	; 0x30
   141e8:	clz	r1, sl
   141ec:	mov	r8, #0
   141f0:	lsr	r1, r1, #5
   141f4:	cmp	r2, #0
   141f8:	mov	r0, r2
   141fc:	movwne	r0, #1
   14200:	orrs	r0, r0, r1
   14204:	moveq	r2, sl
   14208:	moveq	sl, r0
   1420c:	cmp	r9, sl
   14210:	str	r2, [sp, #48]	; 0x30
   14214:	movcc	r0, #39	; 0x27
   14218:	strbcc	r0, [r6, r9]
   1421c:	add	r0, r9, #1
   14220:	cmp	r0, sl
   14224:	movcc	r1, #92	; 0x5c
   14228:	strbcc	r1, [r6, r0]
   1422c:	add	r0, r9, #2
   14230:	add	r9, r9, #3
   14234:	cmp	r0, sl
   14238:	movcc	r1, #39	; 0x27
   1423c:	strbcc	r1, [r6, r0]
   14240:	mov	r0, #0
   14244:	str	r0, [fp, #-48]	; 0xffffffd0
   14248:	mov	r4, #1
   1424c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14250:	cmp	r0, #0
   14254:	bne	14074 <__assert_fail@plt+0x2f20>
   14258:	b	1434c <__assert_fail@plt+0x31f8>
   1425c:	ldr	r0, [sp, #32]
   14260:	cmp	r0, #1
   14264:	bne	14450 <__assert_fail@plt+0x32fc>
   14268:	str	lr, [sp, #84]	; 0x54
   1426c:	bl	11058 <__ctype_b_loc@plt>
   14270:	ldr	r0, [r0]
   14274:	ldr	ip, [fp, #-84]	; 0xffffffac
   14278:	mov	r1, #1
   1427c:	add	r0, r0, r5, lsl #1
   14280:	ldrb	r0, [r0, #1]
   14284:	ubfx	r4, r0, #6, #1
   14288:	b	14848 <__assert_fail@plt+0x36f4>
   1428c:	cmp	r7, #0
   14290:	ldrbeq	r0, [ip, #1]
   14294:	cmpeq	r0, #0
   14298:	beq	142b4 <__assert_fail@plt+0x3160>
   1429c:	mvn	lr, #0
   142a0:	mov	r8, #0
   142a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142a8:	cmp	r0, #0
   142ac:	bne	14074 <__assert_fail@plt+0x2f20>
   142b0:	b	1434c <__assert_fail@plt+0x31f8>
   142b4:	mov	r1, #1
   142b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   142bc:	cmp	r0, #2
   142c0:	bne	142d0 <__assert_fail@plt+0x317c>
   142c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   142c8:	tst	r0, #1
   142cc:	bne	14b44 <__assert_fail@plt+0x39f0>
   142d0:	mov	r4, r1
   142d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142d8:	cmp	r0, #0
   142dc:	bne	14074 <__assert_fail@plt+0x2f20>
   142e0:	b	1434c <__assert_fail@plt+0x31f8>
   142e4:	ldr	r1, [sp, #40]	; 0x28
   142e8:	mov	r8, #0
   142ec:	mov	r0, #92	; 0x5c
   142f0:	cmp	r1, #0
   142f4:	beq	14338 <__assert_fail@plt+0x31e4>
   142f8:	mov	r4, #0
   142fc:	cmp	r8, #0
   14300:	bne	140f4 <__assert_fail@plt+0x2fa0>
   14304:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14308:	tst	r2, #1
   1430c:	beq	143f8 <__assert_fail@plt+0x32a4>
   14310:	cmp	r9, sl
   14314:	movcc	r1, #39	; 0x27
   14318:	strbcc	r1, [r6, r9]
   1431c:	add	r1, r9, #1
   14320:	add	r9, r9, #2
   14324:	cmp	r1, sl
   14328:	movcc	r2, #39	; 0x27
   1432c:	strbcc	r2, [r6, r1]
   14330:	mov	r2, #0
   14334:	b	143f8 <__assert_fail@plt+0x32a4>
   14338:	ldr	r1, [sp, #80]	; 0x50
   1433c:	mov	r4, #0
   14340:	mov	r8, #0
   14344:	tst	r1, #1
   14348:	bne	14388 <__assert_fail@plt+0x3234>
   1434c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14350:	cmp	r0, #0
   14354:	mov	r0, r5
   14358:	beq	1437c <__assert_fail@plt+0x3228>
   1435c:	ldr	r1, [fp, #16]
   14360:	ubfx	r0, r5, #5, #3
   14364:	mov	r2, #1
   14368:	ldr	r0, [r1, r0, lsl #2]
   1436c:	and	r1, r5, #31
   14370:	tst	r0, r2, lsl r1
   14374:	mov	r0, r5
   14378:	bne	14388 <__assert_fail@plt+0x3234>
   1437c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14380:	cmp	r1, #0
   14384:	beq	147e0 <__assert_fail@plt+0x368c>
   14388:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1438c:	tst	r1, #1
   14390:	bne	14b24 <__assert_fail@plt+0x39d0>
   14394:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14398:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1439c:	cmp	r1, #2
   143a0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   143a4:	movwne	r1, #1
   143a8:	orr	r1, r1, r2
   143ac:	tst	r1, #1
   143b0:	bne	143e8 <__assert_fail@plt+0x3294>
   143b4:	cmp	r9, sl
   143b8:	movcc	r1, #39	; 0x27
   143bc:	strbcc	r1, [r6, r9]
   143c0:	add	r1, r9, #1
   143c4:	cmp	r1, sl
   143c8:	movcc	r2, #36	; 0x24
   143cc:	strbcc	r2, [r6, r1]
   143d0:	add	r1, r9, #2
   143d4:	add	r9, r9, #3
   143d8:	cmp	r1, sl
   143dc:	movcc	r2, #39	; 0x27
   143e0:	strbcc	r2, [r6, r1]
   143e4:	mov	r2, #1
   143e8:	cmp	r9, sl
   143ec:	movcc	r1, #92	; 0x5c
   143f0:	strbcc	r1, [r6, r9]
   143f4:	add	r9, r9, #1
   143f8:	cmp	r9, sl
   143fc:	add	r7, r7, #1
   14400:	strbcc	r0, [r6, r9]
   14404:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14408:	add	r9, r9, #1
   1440c:	and	r0, r0, r4
   14410:	mov	r4, r0
   14414:	cmn	lr, #1
   14418:	bne	13d8c <__assert_fail@plt+0x2c38>
   1441c:	b	13d98 <__assert_fail@plt+0x2c44>
   14420:	ldr	r0, [sp, #28]
   14424:	mov	r4, #0
   14428:	mov	r8, #0
   1442c:	mov	r5, #0
   14430:	cmp	r0, #0
   14434:	beq	1434c <__assert_fail@plt+0x31f8>
   14438:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1443c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14440:	add	r7, r7, #1
   14444:	cmn	lr, #1
   14448:	bne	13d8c <__assert_fail@plt+0x2c38>
   1444c:	b	13d98 <__assert_fail@plt+0x2c44>
   14450:	mov	r0, #0
   14454:	cmn	lr, #1
   14458:	str	r0, [fp, #-36]	; 0xffffffdc
   1445c:	str	r0, [fp, #-40]	; 0xffffffd8
   14460:	bne	14474 <__assert_fail@plt+0x3320>
   14464:	mov	r0, ip
   14468:	bl	11070 <strlen@plt>
   1446c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14470:	mov	lr, r0
   14474:	ldr	r0, [sp, #36]	; 0x24
   14478:	str	sl, [sp, #56]	; 0x38
   1447c:	str	lr, [sp, #84]	; 0x54
   14480:	cmp	r0, #0
   14484:	beq	1469c <__assert_fail@plt+0x3548>
   14488:	add	r0, ip, r7
   1448c:	mov	r4, #1
   14490:	mov	r6, #0
   14494:	sub	sl, fp, #40	; 0x28
   14498:	str	r0, [sp, #20]
   1449c:	str	r6, [sp, #64]	; 0x40
   144a0:	add	r6, r6, r7
   144a4:	sub	r0, fp, #44	; 0x2c
   144a8:	mov	r3, sl
   144ac:	add	r1, ip, r6
   144b0:	sub	r2, lr, r6
   144b4:	bl	1711c <__assert_fail@plt+0x5fc8>
   144b8:	cmn	r0, #2
   144bc:	beq	147f8 <__assert_fail@plt+0x36a4>
   144c0:	ldr	sl, [sp, #56]	; 0x38
   144c4:	cmn	r0, #1
   144c8:	beq	147ec <__assert_fail@plt+0x3698>
   144cc:	cmp	r0, #0
   144d0:	beq	147f0 <__assert_fail@plt+0x369c>
   144d4:	cmp	r0, #2
   144d8:	bcc	14598 <__assert_fail@plt+0x3444>
   144dc:	ldr	r1, [sp, #64]	; 0x40
   144e0:	ldr	r2, [sp, #20]
   144e4:	add	r1, r2, r1
   144e8:	mov	r2, #1
   144ec:	ldrb	r3, [r1, r2]
   144f0:	sub	r3, r3, #91	; 0x5b
   144f4:	cmp	r3, #33	; 0x21
   144f8:	bhi	1458c <__assert_fail@plt+0x3438>
   144fc:	add	r6, pc, #0
   14500:	ldr	pc, [r6, r3, lsl #2]
   14504:	andeq	r4, r1, r0, asr fp
   14508:	andeq	r4, r1, r0, asr fp
   1450c:	andeq	r4, r1, ip, lsl #11
   14510:	andeq	r4, r1, r0, asr fp
   14514:	andeq	r4, r1, ip, lsl #11
   14518:	andeq	r4, r1, r0, asr fp
   1451c:	andeq	r4, r1, ip, lsl #11
   14520:	andeq	r4, r1, ip, lsl #11
   14524:	andeq	r4, r1, ip, lsl #11
   14528:	andeq	r4, r1, ip, lsl #11
   1452c:	andeq	r4, r1, ip, lsl #11
   14530:	andeq	r4, r1, ip, lsl #11
   14534:	andeq	r4, r1, ip, lsl #11
   14538:	andeq	r4, r1, ip, lsl #11
   1453c:	andeq	r4, r1, ip, lsl #11
   14540:	andeq	r4, r1, ip, lsl #11
   14544:	andeq	r4, r1, ip, lsl #11
   14548:	andeq	r4, r1, ip, lsl #11
   1454c:	andeq	r4, r1, ip, lsl #11
   14550:	andeq	r4, r1, ip, lsl #11
   14554:	andeq	r4, r1, ip, lsl #11
   14558:	andeq	r4, r1, ip, lsl #11
   1455c:	andeq	r4, r1, ip, lsl #11
   14560:	andeq	r4, r1, ip, lsl #11
   14564:	andeq	r4, r1, ip, lsl #11
   14568:	andeq	r4, r1, ip, lsl #11
   1456c:	andeq	r4, r1, ip, lsl #11
   14570:	andeq	r4, r1, ip, lsl #11
   14574:	andeq	r4, r1, ip, lsl #11
   14578:	andeq	r4, r1, ip, lsl #11
   1457c:	andeq	r4, r1, ip, lsl #11
   14580:	andeq	r4, r1, ip, lsl #11
   14584:	andeq	r4, r1, ip, lsl #11
   14588:	andeq	r4, r1, r0, asr fp
   1458c:	add	r2, r2, #1
   14590:	cmp	r2, r0
   14594:	bcc	144ec <__assert_fail@plt+0x3398>
   14598:	ldr	r6, [sp, #64]	; 0x40
   1459c:	add	r6, r0, r6
   145a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   145a4:	bl	10f98 <iswprint@plt>
   145a8:	cmp	r0, #0
   145ac:	sub	sl, fp, #40	; 0x28
   145b0:	movwne	r0, #1
   145b4:	and	r4, r4, r0
   145b8:	mov	r0, sl
   145bc:	bl	10f44 <mbsinit@plt>
   145c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   145c4:	ldr	lr, [sp, #84]	; 0x54
   145c8:	cmp	r0, #0
   145cc:	beq	1449c <__assert_fail@plt+0x3348>
   145d0:	b	1483c <__assert_fail@plt+0x36e8>
   145d4:	ldr	r0, [sp, #24]
   145d8:	cmp	r0, #0
   145dc:	beq	14684 <__assert_fail@plt+0x3530>
   145e0:	add	r0, r7, #2
   145e4:	cmp	r0, lr
   145e8:	bcs	14684 <__assert_fail@plt+0x3530>
   145ec:	add	r1, ip, r7
   145f0:	ldrb	r1, [r1, #1]
   145f4:	cmp	r1, #63	; 0x3f
   145f8:	bne	14684 <__assert_fail@plt+0x3530>
   145fc:	ldrb	r5, [ip, r0]
   14600:	sub	r1, r5, #33	; 0x21
   14604:	cmp	r1, #29
   14608:	bhi	14684 <__assert_fail@plt+0x3530>
   1460c:	movw	r3, #20929	; 0x51c1
   14610:	mov	r2, #1
   14614:	movt	r3, #14336	; 0x3800
   14618:	tst	r3, r2, lsl r1
   1461c:	beq	14684 <__assert_fail@plt+0x3530>
   14620:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14624:	tst	r1, #1
   14628:	bne	14c74 <__assert_fail@plt+0x3b20>
   1462c:	cmp	r9, sl
   14630:	mov	r7, r0
   14634:	mov	r4, #0
   14638:	movcc	r1, #63	; 0x3f
   1463c:	strbcc	r1, [r6, r9]
   14640:	add	r1, r9, #1
   14644:	cmp	r1, sl
   14648:	movcc	r2, #34	; 0x22
   1464c:	strbcc	r2, [r6, r1]
   14650:	add	r1, r9, #2
   14654:	cmp	r1, sl
   14658:	movcc	r2, #34	; 0x22
   1465c:	strbcc	r2, [r6, r1]
   14660:	add	r1, r9, #3
   14664:	add	r9, r9, #4
   14668:	cmp	r1, sl
   1466c:	movcc	r2, #63	; 0x3f
   14670:	strbcc	r2, [r6, r1]
   14674:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14678:	cmp	r0, #0
   1467c:	bne	14074 <__assert_fail@plt+0x2f20>
   14680:	b	1434c <__assert_fail@plt+0x31f8>
   14684:	mov	r5, #63	; 0x3f
   14688:	mov	r4, #0
   1468c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14690:	cmp	r0, #0
   14694:	bne	14074 <__assert_fail@plt+0x2f20>
   14698:	b	1434c <__assert_fail@plt+0x31f8>
   1469c:	mov	r4, #1
   146a0:	mov	r6, #0
   146a4:	sub	sl, fp, #40	; 0x28
   146a8:	str	r6, [sp, #64]	; 0x40
   146ac:	add	r6, r6, r7
   146b0:	sub	r0, fp, #44	; 0x2c
   146b4:	mov	r3, sl
   146b8:	add	r1, ip, r6
   146bc:	sub	r2, lr, r6
   146c0:	bl	1711c <__assert_fail@plt+0x5fc8>
   146c4:	cmn	r0, #2
   146c8:	beq	147f8 <__assert_fail@plt+0x36a4>
   146cc:	cmn	r0, #1
   146d0:	beq	147ec <__assert_fail@plt+0x3698>
   146d4:	ldr	r6, [sp, #64]	; 0x40
   146d8:	cmp	r0, #0
   146dc:	beq	14838 <__assert_fail@plt+0x36e4>
   146e0:	add	r6, r0, r6
   146e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   146e8:	bl	10f98 <iswprint@plt>
   146ec:	cmp	r0, #0
   146f0:	sub	sl, fp, #40	; 0x28
   146f4:	movwne	r0, #1
   146f8:	and	r4, r4, r0
   146fc:	mov	r0, sl
   14700:	bl	10f44 <mbsinit@plt>
   14704:	ldr	ip, [fp, #-84]	; 0xffffffac
   14708:	ldr	lr, [sp, #84]	; 0x54
   1470c:	cmp	r0, #0
   14710:	beq	146a8 <__assert_fail@plt+0x3554>
   14714:	b	1483c <__assert_fail@plt+0x36e8>
   14718:	cmp	r9, sl
   1471c:	mov	r2, #1
   14720:	movcc	r0, #39	; 0x27
   14724:	strbcc	r0, [r6, r9]
   14728:	add	r0, r9, #1
   1472c:	cmp	r0, sl
   14730:	movcc	r1, #36	; 0x24
   14734:	strbcc	r1, [r6, r0]
   14738:	add	r0, r9, #2
   1473c:	cmp	r0, sl
   14740:	movcc	r1, #39	; 0x27
   14744:	strbcc	r1, [r6, r0]
   14748:	add	r0, r9, #3
   1474c:	cmp	r0, sl
   14750:	add	r9, r0, #1
   14754:	str	r2, [fp, #-48]	; 0xffffffd0
   14758:	movcc	r1, #92	; 0x5c
   1475c:	strbcc	r1, [r6, r0]
   14760:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14764:	cmp	r1, #2
   14768:	beq	147c8 <__assert_fail@plt+0x3674>
   1476c:	add	r1, r7, #1
   14770:	mov	r4, #0
   14774:	mov	r8, #1
   14778:	mov	r5, #48	; 0x30
   1477c:	cmp	r1, lr
   14780:	bcs	14068 <__assert_fail@plt+0x2f14>
   14784:	ldrb	r1, [ip, r1]
   14788:	sub	r1, r1, #48	; 0x30
   1478c:	uxtb	r1, r1
   14790:	cmp	r1, #9
   14794:	bhi	14068 <__assert_fail@plt+0x2f14>
   14798:	cmp	r9, sl
   1479c:	movcc	r1, #48	; 0x30
   147a0:	strbcc	r1, [r6, r9]
   147a4:	add	r1, r0, #2
   147a8:	add	r9, r0, #3
   147ac:	cmp	r1, sl
   147b0:	movcc	r2, #48	; 0x30
   147b4:	strbcc	r2, [r6, r1]
   147b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   147bc:	cmp	r0, #0
   147c0:	bne	14074 <__assert_fail@plt+0x2f20>
   147c4:	b	1434c <__assert_fail@plt+0x31f8>
   147c8:	mov	r0, #48	; 0x30
   147cc:	mov	r8, #1
   147d0:	mov	r4, #0
   147d4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   147d8:	cmp	r1, #0
   147dc:	bne	14388 <__assert_fail@plt+0x3234>
   147e0:	cmp	r8, #0
   147e4:	beq	14304 <__assert_fail@plt+0x31b0>
   147e8:	b	140f4 <__assert_fail@plt+0x2fa0>
   147ec:	mov	r4, #0
   147f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   147f4:	b	14830 <__assert_fail@plt+0x36dc>
   147f8:	ldr	r1, [sp, #84]	; 0x54
   147fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14800:	mov	r4, #0
   14804:	cmp	r6, r1
   14808:	bcs	14830 <__assert_fail@plt+0x36dc>
   1480c:	ldrb	r0, [ip, r6]
   14810:	cmp	r0, #0
   14814:	beq	14830 <__assert_fail@plt+0x36dc>
   14818:	ldr	r0, [sp, #64]	; 0x40
   1481c:	add	r0, r0, #1
   14820:	add	r6, r0, r7
   14824:	str	r0, [sp, #64]	; 0x40
   14828:	cmp	r6, r1
   1482c:	bcc	1480c <__assert_fail@plt+0x36b8>
   14830:	ldr	r6, [sp, #64]	; 0x40
   14834:	b	1483c <__assert_fail@plt+0x36e8>
   14838:	ldr	ip, [fp, #-84]	; 0xffffffac
   1483c:	mov	r1, r6
   14840:	ldr	r6, [sp, #76]	; 0x4c
   14844:	ldr	sl, [sp, #56]	; 0x38
   14848:	ldr	r0, [sp, #44]	; 0x2c
   1484c:	cmp	r1, #1
   14850:	orr	r2, r4, r0
   14854:	mov	r0, r1
   14858:	bhi	14878 <__assert_fail@plt+0x3724>
   1485c:	tst	r2, #1
   14860:	beq	14878 <__assert_fail@plt+0x3724>
   14864:	ldr	lr, [sp, #84]	; 0x54
   14868:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1486c:	cmp	r0, #0
   14870:	bne	14074 <__assert_fail@plt+0x2f20>
   14874:	b	1434c <__assert_fail@plt+0x31f8>
   14878:	str	r2, [sp, #64]	; 0x40
   1487c:	add	r0, r0, r7
   14880:	add	r1, r7, #1
   14884:	ldr	lr, [sp, #84]	; 0x54
   14888:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1488c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14890:	mov	r3, #0
   14894:	str	r0, [sp, #56]	; 0x38
   14898:	ldr	r0, [sp, #64]	; 0x40
   1489c:	tst	r0, #1
   148a0:	bne	14988 <__assert_fail@plt+0x3834>
   148a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   148a8:	tst	r0, #1
   148ac:	bne	14b28 <__assert_fail@plt+0x39d4>
   148b0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   148b4:	cmp	r7, #2
   148b8:	movwne	r3, #1
   148bc:	orr	r3, r3, r2
   148c0:	tst	r3, #1
   148c4:	bne	148fc <__assert_fail@plt+0x37a8>
   148c8:	cmp	r9, sl
   148cc:	add	r3, r9, #1
   148d0:	movcc	r2, #39	; 0x27
   148d4:	strbcc	r2, [r6, r9]
   148d8:	cmp	r3, sl
   148dc:	movcc	r2, #36	; 0x24
   148e0:	strbcc	r2, [r6, r3]
   148e4:	add	r3, r9, #2
   148e8:	add	r9, r9, #3
   148ec:	cmp	r3, sl
   148f0:	movcc	r2, #39	; 0x27
   148f4:	strbcc	r2, [r6, r3]
   148f8:	mov	r2, #1
   148fc:	cmp	r9, sl
   14900:	mov	r0, r2
   14904:	movcc	r3, #92	; 0x5c
   14908:	strbcc	r3, [r6, r9]
   1490c:	add	r3, r9, #1
   14910:	cmp	r3, sl
   14914:	andcc	r7, r5, #192	; 0xc0
   14918:	movcc	r2, #48	; 0x30
   1491c:	orrcc	r7, r2, r7, lsr #6
   14920:	strbcc	r7, [r6, r3]
   14924:	add	r3, r9, #2
   14928:	add	r9, r9, #3
   1492c:	cmp	r3, sl
   14930:	lsrcc	r7, r5, #3
   14934:	movcc	r2, #6
   14938:	bficc	r7, r2, #3, #29
   1493c:	mov	r2, #6
   14940:	strbcc	r7, [r6, r3]
   14944:	bfi	r5, r2, #3, #29
   14948:	mov	r3, #1
   1494c:	mov	r2, r0
   14950:	ldr	r0, [sp, #56]	; 0x38
   14954:	and	r8, r3, #1
   14958:	cmp	r0, r1
   1495c:	bhi	149bc <__assert_fail@plt+0x3868>
   14960:	b	149fc <__assert_fail@plt+0x38a8>
   14964:	cmp	r9, sl
   14968:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1496c:	strbcc	r5, [r6, r9]
   14970:	add	r9, r9, #1
   14974:	ldrb	r5, [ip, r1]
   14978:	add	r1, r1, #1
   1497c:	ldr	r0, [sp, #64]	; 0x40
   14980:	tst	r0, #1
   14984:	beq	148a4 <__assert_fail@plt+0x3750>
   14988:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1498c:	tst	r7, #1
   14990:	beq	149a4 <__assert_fail@plt+0x3850>
   14994:	cmp	r9, sl
   14998:	movcc	r7, #92	; 0x5c
   1499c:	strbcc	r7, [r6, r9]
   149a0:	add	r9, r9, #1
   149a4:	mov	r7, #0
   149a8:	str	r7, [fp, #-56]	; 0xffffffc8
   149ac:	ldr	r0, [sp, #56]	; 0x38
   149b0:	and	r8, r3, #1
   149b4:	cmp	r0, r1
   149b8:	bls	149fc <__assert_fail@plt+0x38a8>
   149bc:	cmp	r8, #0
   149c0:	mvn	r7, r2
   149c4:	movwne	r8, #1
   149c8:	orr	r7, r7, r8
   149cc:	tst	r7, #1
   149d0:	bne	14964 <__assert_fail@plt+0x3810>
   149d4:	cmp	r9, sl
   149d8:	movcc	r7, #39	; 0x27
   149dc:	strbcc	r7, [r6, r9]
   149e0:	add	r7, r9, #1
   149e4:	add	r9, r9, #2
   149e8:	cmp	r7, sl
   149ec:	movcc	r2, #39	; 0x27
   149f0:	strbcc	r2, [r6, r7]
   149f4:	mov	r2, #0
   149f8:	b	14964 <__assert_fail@plt+0x3810>
   149fc:	cmp	r8, #0
   14a00:	sub	r7, r1, #1
   14a04:	mov	r0, r5
   14a08:	str	r2, [fp, #-48]	; 0xffffffd0
   14a0c:	movwne	r8, #1
   14a10:	cmp	r8, #0
   14a14:	beq	14304 <__assert_fail@plt+0x31b0>
   14a18:	b	140f4 <__assert_fail@plt+0x2fa0>
   14a1c:	mov	lr, r7
   14a20:	b	14a28 <__assert_fail@plt+0x38d4>
   14a24:	mvn	lr, #0
   14a28:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14a2c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14a30:	eor	r0, r7, #2
   14a34:	orr	r0, r0, r9
   14a38:	clz	r0, r0
   14a3c:	lsr	r0, r0, #5
   14a40:	tst	r1, r0
   14a44:	bne	14b44 <__assert_fail@plt+0x39f0>
   14a48:	mov	r0, r1
   14a4c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14a50:	cmp	r7, #2
   14a54:	movwne	r1, #1
   14a58:	orr	r0, r0, r1
   14a5c:	tst	r0, #1
   14a60:	ldreq	r0, [sp, #52]	; 0x34
   14a64:	streq	lr, [sp, #84]	; 0x54
   14a68:	eoreq	r0, r0, #1
   14a6c:	tsteq	r0, #1
   14a70:	bne	14c08 <__assert_fail@plt+0x3ab4>
   14a74:	tst	r4, #1
   14a78:	bne	14bc4 <__assert_fail@plt+0x3a70>
   14a7c:	ldr	r6, [sp, #48]	; 0x30
   14a80:	mov	r8, #0
   14a84:	cmp	r6, #0
   14a88:	beq	14c00 <__assert_fail@plt+0x3aac>
   14a8c:	ldr	r0, [sp, #80]	; 0x50
   14a90:	mov	r1, #0
   14a94:	cmp	sl, #0
   14a98:	mov	r4, #0
   14a9c:	str	r1, [fp, #-72]	; 0xffffffb8
   14aa0:	beq	13994 <__assert_fail@plt+0x2840>
   14aa4:	b	14c08 <__assert_fail@plt+0x3ab4>
   14aa8:	ldrb	r1, [r0, #3]
   14aac:	cmp	r1, #56	; 0x38
   14ab0:	ldrbeq	r1, [r0, #4]
   14ab4:	cmpeq	r1, #48	; 0x30
   14ab8:	bne	13b8c <__assert_fail@plt+0x2a38>
   14abc:	ldrb	r1, [r0, #5]
   14ac0:	cmp	r1, #51	; 0x33
   14ac4:	ldrbeq	r1, [r0, #6]
   14ac8:	cmpeq	r1, #48	; 0x30
   14acc:	bne	13b8c <__assert_fail@plt+0x2a38>
   14ad0:	ldrb	r0, [r0, #7]
   14ad4:	cmp	r0, #0
   14ad8:	movw	r0, #32997	; 0x80e5
   14adc:	movt	r0, #1
   14ae0:	str	r0, [sp, #68]	; 0x44
   14ae4:	bne	13b8c <__assert_fail@plt+0x2a38>
   14ae8:	b	13ba8 <__assert_fail@plt+0x2a54>
   14aec:	ldrb	r1, [r0, #4]
   14af0:	cmp	r1, #48	; 0x30
   14af4:	ldrbeq	r1, [r0, #5]
   14af8:	cmpeq	r1, #51	; 0x33
   14afc:	bne	13c70 <__assert_fail@plt+0x2b1c>
   14b00:	ldrb	r1, [r0, #6]
   14b04:	cmp	r1, #48	; 0x30
   14b08:	ldrbeq	r0, [r0, #7]
   14b0c:	cmpeq	r0, #0
   14b10:	bne	13c70 <__assert_fail@plt+0x2b1c>
   14b14:	movw	r0, #33001	; 0x80e9
   14b18:	movt	r0, #1
   14b1c:	str	r0, [sp, #72]	; 0x48
   14b20:	b	13c90 <__assert_fail@plt+0x2b3c>
   14b24:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14b28:	ldr	r2, [sp, #80]	; 0x50
   14b2c:	b	14b64 <__assert_fail@plt+0x3a10>
   14b30:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b34:	mov	r2, #1
   14b38:	mov	lr, r4
   14b3c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14b40:	b	14b64 <__assert_fail@plt+0x3a10>
   14b44:	ldr	r2, [sp, #80]	; 0x50
   14b48:	mov	r7, #2
   14b4c:	b	14b64 <__assert_fail@plt+0x3a10>
   14b50:	ldr	r6, [sp, #76]	; 0x4c
   14b54:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b58:	ldr	lr, [sp, #84]	; 0x54
   14b5c:	ldr	r2, [sp, #80]	; 0x50
   14b60:	mov	r7, #2
   14b64:	mov	r0, #0
   14b68:	ldr	r1, [fp, #12]
   14b6c:	tst	r2, #1
   14b70:	mov	r2, r7
   14b74:	mov	r3, lr
   14b78:	str	r0, [sp, #8]
   14b7c:	ldr	r0, [sp, #68]	; 0x44
   14b80:	movwne	r2, #4
   14b84:	cmp	r7, #2
   14b88:	movne	r2, r7
   14b8c:	str	r2, [sp]
   14b90:	mov	r2, ip
   14b94:	bic	r1, r1, #2
   14b98:	str	r0, [sp, #12]
   14b9c:	ldr	r0, [sp, #72]	; 0x48
   14ba0:	str	r1, [sp, #4]
   14ba4:	mov	r1, sl
   14ba8:	str	r0, [sp, #16]
   14bac:	mov	r0, r6
   14bb0:	bl	13918 <__assert_fail@plt+0x27c4>
   14bb4:	mov	r9, r0
   14bb8:	mov	r0, r9
   14bbc:	sub	sp, fp, #28
   14bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bc4:	mov	r0, #5
   14bc8:	ldr	r1, [sp, #48]	; 0x30
   14bcc:	ldr	r2, [fp, #-84]	; 0xffffffac
   14bd0:	ldr	r3, [sp, #84]	; 0x54
   14bd4:	str	r0, [sp]
   14bd8:	ldr	r0, [fp, #12]
   14bdc:	str	r0, [sp, #4]
   14be0:	ldr	r0, [fp, #16]
   14be4:	str	r0, [sp, #8]
   14be8:	ldr	r0, [sp, #68]	; 0x44
   14bec:	str	r0, [sp, #12]
   14bf0:	ldr	r0, [sp, #72]	; 0x48
   14bf4:	str	r0, [sp, #16]
   14bf8:	ldr	r0, [sp, #76]	; 0x4c
   14bfc:	b	14bb0 <__assert_fail@plt+0x3a5c>
   14c00:	mov	r0, #0
   14c04:	str	r0, [fp, #-72]	; 0xffffffb8
   14c08:	ldr	r1, [sp, #92]	; 0x5c
   14c0c:	cmp	r1, #0
   14c10:	beq	14c50 <__assert_fail@plt+0x3afc>
   14c14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14c18:	ldr	r2, [sp, #76]	; 0x4c
   14c1c:	tst	r0, #1
   14c20:	bne	14c54 <__assert_fail@plt+0x3b00>
   14c24:	ldrb	r0, [r1]
   14c28:	cmp	r0, #0
   14c2c:	beq	14c54 <__assert_fail@plt+0x3b00>
   14c30:	add	r1, r1, #1
   14c34:	cmp	r9, sl
   14c38:	strbcc	r0, [r2, r9]
   14c3c:	add	r9, r9, #1
   14c40:	ldrb	r0, [r1], #1
   14c44:	cmp	r0, #0
   14c48:	bne	14c34 <__assert_fail@plt+0x3ae0>
   14c4c:	b	14c54 <__assert_fail@plt+0x3b00>
   14c50:	ldr	r2, [sp, #76]	; 0x4c
   14c54:	cmp	r9, sl
   14c58:	movcc	r0, #0
   14c5c:	strbcc	r0, [r2, r9]
   14c60:	mov	r0, r9
   14c64:	sub	sp, fp, #28
   14c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c6c:	mov	r2, #1
   14c70:	b	14b3c <__assert_fail@plt+0x39e8>
   14c74:	ldr	r2, [sp, #80]	; 0x50
   14c78:	mov	r7, #5
   14c7c:	b	14b64 <__assert_fail@plt+0x3a10>
   14c80:	bl	1113c <abort@plt>
   14c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c88:	add	fp, sp, #28
   14c8c:	sub	sp, sp, #28
   14c90:	movw	r5, #37272	; 0x9198
   14c94:	cmp	r2, #0
   14c98:	mov	r4, r1
   14c9c:	mov	r7, r0
   14ca0:	str	r0, [sp, #20]
   14ca4:	movt	r5, #2
   14ca8:	movne	r5, r2
   14cac:	bl	11088 <__errno_location@plt>
   14cb0:	mov	sl, r0
   14cb4:	ldm	r5, {r0, r1}
   14cb8:	ldr	r2, [r5, #40]	; 0x28
   14cbc:	ldr	r3, [r5, #44]	; 0x2c
   14cc0:	add	r9, r5, #8
   14cc4:	ldr	r6, [sl]
   14cc8:	orr	r8, r1, #1
   14ccc:	mov	r1, #0
   14cd0:	str	r6, [sp, #24]
   14cd4:	stm	sp, {r0, r8, r9}
   14cd8:	str	r2, [sp, #12]
   14cdc:	str	r3, [sp, #16]
   14ce0:	mov	r0, #0
   14ce4:	mov	r2, r7
   14ce8:	mov	r3, r4
   14cec:	mov	r6, r4
   14cf0:	bl	13918 <__assert_fail@plt+0x27c4>
   14cf4:	add	r7, r0, #1
   14cf8:	mov	r0, r7
   14cfc:	bl	15d60 <__assert_fail@plt+0x4c0c>
   14d00:	mov	r4, r0
   14d04:	ldr	r0, [r5]
   14d08:	ldr	r2, [r5, #44]	; 0x2c
   14d0c:	ldr	r1, [r5, #40]	; 0x28
   14d10:	mov	r3, r6
   14d14:	stm	sp, {r0, r8, r9}
   14d18:	str	r2, [sp, #16]
   14d1c:	str	r1, [sp, #12]
   14d20:	mov	r0, r4
   14d24:	mov	r1, r7
   14d28:	ldr	r2, [sp, #20]
   14d2c:	bl	13918 <__assert_fail@plt+0x27c4>
   14d30:	ldr	r0, [sp, #24]
   14d34:	str	r0, [sl]
   14d38:	mov	r0, r4
   14d3c:	sub	sp, fp, #28
   14d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d48:	add	fp, sp, #28
   14d4c:	sub	sp, sp, #36	; 0x24
   14d50:	movw	r8, #37272	; 0x9198
   14d54:	cmp	r3, #0
   14d58:	mov	r4, r2
   14d5c:	str	r2, [sp, #24]
   14d60:	mov	r5, r1
   14d64:	mov	r6, r0
   14d68:	str	r0, [sp, #20]
   14d6c:	movt	r8, #2
   14d70:	movne	r8, r3
   14d74:	bl	11088 <__errno_location@plt>
   14d78:	str	r0, [sp, #28]
   14d7c:	cmp	r4, #0
   14d80:	add	sl, r8, #8
   14d84:	ldm	r8, {r3, r9}
   14d88:	ldr	r7, [r0]
   14d8c:	ldr	r1, [r8, #40]	; 0x28
   14d90:	ldr	r2, [r8, #44]	; 0x2c
   14d94:	mov	r0, #0
   14d98:	orreq	r9, r9, #1
   14d9c:	str	r7, [sp, #32]
   14da0:	mov	r7, r5
   14da4:	stm	sp, {r3, r9, sl}
   14da8:	str	r1, [sp, #12]
   14dac:	str	r2, [sp, #16]
   14db0:	mov	r1, #0
   14db4:	mov	r2, r6
   14db8:	mov	r3, r5
   14dbc:	bl	13918 <__assert_fail@plt+0x27c4>
   14dc0:	add	r4, r0, #1
   14dc4:	mov	r5, r0
   14dc8:	mov	r0, r4
   14dcc:	bl	15d60 <__assert_fail@plt+0x4c0c>
   14dd0:	mov	r6, r0
   14dd4:	ldr	r0, [r8]
   14dd8:	ldr	r2, [r8, #44]	; 0x2c
   14ddc:	ldr	r1, [r8, #40]	; 0x28
   14de0:	mov	r3, r7
   14de4:	stm	sp, {r0, r9, sl}
   14de8:	str	r2, [sp, #16]
   14dec:	str	r1, [sp, #12]
   14df0:	mov	r0, r6
   14df4:	mov	r1, r4
   14df8:	ldr	r2, [sp, #20]
   14dfc:	bl	13918 <__assert_fail@plt+0x27c4>
   14e00:	ldr	r0, [sp, #24]
   14e04:	ldr	r1, [sp, #32]
   14e08:	ldr	r2, [sp, #28]
   14e0c:	cmp	r0, #0
   14e10:	str	r1, [r2]
   14e14:	strne	r5, [r0]
   14e18:	mov	r0, r6
   14e1c:	sub	sp, fp, #28
   14e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e24:	push	{r4, r5, r6, r7, fp, lr}
   14e28:	add	fp, sp, #16
   14e2c:	movw	r4, #37176	; 0x9138
   14e30:	movt	r4, #2
   14e34:	ldrd	r6, [r4]
   14e38:	cmp	r7, #2
   14e3c:	blt	14e68 <__assert_fail@plt+0x3d14>
   14e40:	add	r5, r6, #12
   14e44:	mov	r7, #0
   14e48:	ldr	r0, [r5, r7, lsl #3]
   14e4c:	bl	13088 <__assert_fail@plt+0x1f34>
   14e50:	ldr	r1, [r4, #4]
   14e54:	add	r2, r7, #2
   14e58:	add	r0, r7, #1
   14e5c:	mov	r7, r0
   14e60:	cmp	r2, r1
   14e64:	blt	14e48 <__assert_fail@plt+0x3cf4>
   14e68:	ldr	r0, [r6, #4]
   14e6c:	movw	r5, #37320	; 0x91c8
   14e70:	movt	r5, #2
   14e74:	cmp	r0, r5
   14e78:	beq	14e8c <__assert_fail@plt+0x3d38>
   14e7c:	bl	13088 <__assert_fail@plt+0x1f34>
   14e80:	mov	r0, #256	; 0x100
   14e84:	str	r0, [r4, #8]
   14e88:	str	r5, [r4, #12]
   14e8c:	add	r5, r4, #8
   14e90:	cmp	r6, r5
   14e94:	beq	14ea4 <__assert_fail@plt+0x3d50>
   14e98:	mov	r0, r6
   14e9c:	bl	13088 <__assert_fail@plt+0x1f34>
   14ea0:	str	r5, [r4]
   14ea4:	mov	r0, #1
   14ea8:	str	r0, [r4, #4]
   14eac:	pop	{r4, r5, r6, r7, fp, pc}
   14eb0:	movw	r3, #37272	; 0x9198
   14eb4:	mvn	r2, #0
   14eb8:	movt	r3, #2
   14ebc:	b	14ec0 <__assert_fail@plt+0x3d6c>
   14ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ec4:	add	fp, sp, #28
   14ec8:	sub	sp, sp, #44	; 0x2c
   14ecc:	mov	r7, r3
   14ed0:	str	r2, [sp, #36]	; 0x24
   14ed4:	str	r1, [sp, #32]
   14ed8:	mov	r5, r0
   14edc:	bl	11088 <__errno_location@plt>
   14ee0:	cmp	r5, #0
   14ee4:	blt	15048 <__assert_fail@plt+0x3ef4>
   14ee8:	cmn	r5, #-2147483647	; 0x80000001
   14eec:	beq	15048 <__assert_fail@plt+0x3ef4>
   14ef0:	movw	r8, #37176	; 0x9138
   14ef4:	mov	r4, r0
   14ef8:	movt	r8, #2
   14efc:	ldr	r6, [r8]
   14f00:	ldr	r1, [r8, #4]
   14f04:	ldr	r0, [r0]
   14f08:	str	r4, [sp, #28]
   14f0c:	cmp	r1, r5
   14f10:	str	r0, [sp, #24]
   14f14:	ble	14f20 <__assert_fail@plt+0x3dcc>
   14f18:	mov	sl, r6
   14f1c:	b	14f84 <__assert_fail@plt+0x3e30>
   14f20:	mov	r0, #8
   14f24:	add	r9, r8, #8
   14f28:	add	r2, r5, #1
   14f2c:	str	r1, [fp, #-32]	; 0xffffffe0
   14f30:	mvn	r3, #-2147483648	; 0x80000000
   14f34:	str	r0, [sp]
   14f38:	subs	r0, r6, r9
   14f3c:	sub	r2, r2, r1
   14f40:	sub	r1, fp, #32
   14f44:	movne	r0, r6
   14f48:	bl	15f60 <__assert_fail@plt+0x4e0c>
   14f4c:	str	r0, [r8]
   14f50:	cmp	r6, r9
   14f54:	mov	sl, r0
   14f58:	ldrdeq	r0, [r8, #8]
   14f5c:	stmeq	sl, {r0, r1}
   14f60:	ldr	r1, [r8, #4]
   14f64:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14f68:	add	r0, sl, r1, lsl #3
   14f6c:	sub	r1, r2, r1
   14f70:	lsl	r2, r1, #3
   14f74:	mov	r1, #0
   14f78:	bl	110a0 <memset@plt>
   14f7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14f80:	str	r0, [r8, #4]
   14f84:	mov	r9, sl
   14f88:	ldr	r6, [r9, r5, lsl #3]!
   14f8c:	ldr	r4, [r9, #4]!
   14f90:	ldm	r7, {r0, r1}
   14f94:	ldr	r2, [r7, #40]	; 0x28
   14f98:	ldr	r3, [r7, #44]	; 0x2c
   14f9c:	orr	r8, r1, #1
   14fa0:	add	r1, r7, #8
   14fa4:	stm	sp, {r0, r8}
   14fa8:	add	r0, sp, #8
   14fac:	str	r1, [sp, #20]
   14fb0:	stm	r0, {r1, r2, r3}
   14fb4:	mov	r0, r4
   14fb8:	mov	r1, r6
   14fbc:	ldr	r2, [sp, #32]
   14fc0:	ldr	r3, [sp, #36]	; 0x24
   14fc4:	bl	13918 <__assert_fail@plt+0x27c4>
   14fc8:	cmp	r6, r0
   14fcc:	bhi	15030 <__assert_fail@plt+0x3edc>
   14fd0:	add	r6, r0, #1
   14fd4:	movw	r0, #37320	; 0x91c8
   14fd8:	movt	r0, #2
   14fdc:	str	r6, [sl, r5, lsl #3]
   14fe0:	cmp	r4, r0
   14fe4:	beq	14ff0 <__assert_fail@plt+0x3e9c>
   14fe8:	mov	r0, r4
   14fec:	bl	13088 <__assert_fail@plt+0x1f34>
   14ff0:	mov	r0, r6
   14ff4:	bl	15d60 <__assert_fail@plt+0x4c0c>
   14ff8:	str	r0, [r9]
   14ffc:	mov	r4, r0
   15000:	add	r3, sp, #8
   15004:	ldr	r0, [r7]
   15008:	ldr	r1, [r7, #40]	; 0x28
   1500c:	ldr	r2, [r7, #44]	; 0x2c
   15010:	stm	sp, {r0, r8}
   15014:	ldr	r0, [sp, #20]
   15018:	stm	r3, {r0, r1, r2}
   1501c:	mov	r0, r4
   15020:	mov	r1, r6
   15024:	ldr	r2, [sp, #32]
   15028:	ldr	r3, [sp, #36]	; 0x24
   1502c:	bl	13918 <__assert_fail@plt+0x27c4>
   15030:	ldr	r1, [sp, #24]
   15034:	ldr	r0, [sp, #28]
   15038:	str	r1, [r0]
   1503c:	mov	r0, r4
   15040:	sub	sp, fp, #28
   15044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15048:	bl	1113c <abort@plt>
   1504c:	movw	r3, #37272	; 0x9198
   15050:	movt	r3, #2
   15054:	b	14ec0 <__assert_fail@plt+0x3d6c>
   15058:	movw	r3, #37272	; 0x9198
   1505c:	mov	r1, r0
   15060:	mov	r0, #0
   15064:	mvn	r2, #0
   15068:	movt	r3, #2
   1506c:	b	14ec0 <__assert_fail@plt+0x3d6c>
   15070:	movw	r3, #37272	; 0x9198
   15074:	mov	r2, r1
   15078:	mov	r1, r0
   1507c:	mov	r0, #0
   15080:	movt	r3, #2
   15084:	b	14ec0 <__assert_fail@plt+0x3d6c>
   15088:	push	{fp, lr}
   1508c:	mov	fp, sp
   15090:	sub	sp, sp, #48	; 0x30
   15094:	vmov.i32	q8, #0	; 0x00000000
   15098:	mov	ip, #32
   1509c:	mov	r3, sp
   150a0:	mov	lr, r2
   150a4:	cmp	r1, #10
   150a8:	add	r2, r3, #16
   150ac:	vst1.64	{d16-d17}, [r3], ip
   150b0:	vst1.64	{d16-d17}, [r3]
   150b4:	vst1.64	{d16-d17}, [r2]
   150b8:	beq	150d8 <__assert_fail@plt+0x3f84>
   150bc:	str	r1, [sp]
   150c0:	mov	r3, sp
   150c4:	mov	r1, lr
   150c8:	mvn	r2, #0
   150cc:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   150d0:	mov	sp, fp
   150d4:	pop	{fp, pc}
   150d8:	bl	1113c <abort@plt>
   150dc:	push	{r4, sl, fp, lr}
   150e0:	add	fp, sp, #8
   150e4:	sub	sp, sp, #48	; 0x30
   150e8:	mov	ip, r3
   150ec:	mov	r3, sp
   150f0:	vmov.i32	q8, #0	; 0x00000000
   150f4:	mov	lr, #32
   150f8:	cmp	r1, #10
   150fc:	add	r4, r3, #16
   15100:	vst1.64	{d16-d17}, [r3], lr
   15104:	vst1.64	{d16-d17}, [r3]
   15108:	vst1.64	{d16-d17}, [r4]
   1510c:	beq	1512c <__assert_fail@plt+0x3fd8>
   15110:	str	r1, [sp]
   15114:	mov	r1, r2
   15118:	mov	r3, sp
   1511c:	mov	r2, ip
   15120:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   15124:	sub	sp, fp, #8
   15128:	pop	{r4, sl, fp, pc}
   1512c:	bl	1113c <abort@plt>
   15130:	push	{fp, lr}
   15134:	mov	fp, sp
   15138:	sub	sp, sp, #48	; 0x30
   1513c:	mov	r3, sp
   15140:	vmov.i32	q8, #0	; 0x00000000
   15144:	mov	ip, #32
   15148:	cmp	r0, #10
   1514c:	add	r2, r3, #16
   15150:	vst1.64	{d16-d17}, [r3], ip
   15154:	vst1.64	{d16-d17}, [r3]
   15158:	vst1.64	{d16-d17}, [r2]
   1515c:	beq	1517c <__assert_fail@plt+0x4028>
   15160:	str	r0, [sp]
   15164:	mov	r3, sp
   15168:	mov	r0, #0
   1516c:	mvn	r2, #0
   15170:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   15174:	mov	sp, fp
   15178:	pop	{fp, pc}
   1517c:	bl	1113c <abort@plt>
   15180:	push	{fp, lr}
   15184:	mov	fp, sp
   15188:	sub	sp, sp, #48	; 0x30
   1518c:	mov	r3, sp
   15190:	vmov.i32	q8, #0	; 0x00000000
   15194:	mov	ip, #32
   15198:	cmp	r0, #10
   1519c:	add	lr, r3, #16
   151a0:	vst1.64	{d16-d17}, [r3], ip
   151a4:	vst1.64	{d16-d17}, [r3]
   151a8:	vst1.64	{d16-d17}, [lr]
   151ac:	beq	151c8 <__assert_fail@plt+0x4074>
   151b0:	str	r0, [sp]
   151b4:	mov	r3, sp
   151b8:	mov	r0, #0
   151bc:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   151c0:	mov	sp, fp
   151c4:	pop	{fp, pc}
   151c8:	bl	1113c <abort@plt>
   151cc:	push	{r4, sl, fp, lr}
   151d0:	add	fp, sp, #8
   151d4:	sub	sp, sp, #48	; 0x30
   151d8:	mov	lr, r0
   151dc:	movw	r0, #37272	; 0x9198
   151e0:	mov	r3, #32
   151e4:	mov	ip, r1
   151e8:	mov	r4, #1
   151ec:	movt	r0, #2
   151f0:	add	r1, r0, #16
   151f4:	vld1.64	{d16-d17}, [r0], r3
   151f8:	mov	r3, sp
   151fc:	vld1.64	{d18-d19}, [r1]
   15200:	add	r1, r3, #16
   15204:	vld1.64	{d20-d21}, [r0]
   15208:	add	r0, r3, #32
   1520c:	vst1.64	{d18-d19}, [r1]
   15210:	mov	r1, r3
   15214:	vst1.64	{d20-d21}, [r0]
   15218:	mov	r0, #28
   1521c:	and	r0, r0, r2, lsr #3
   15220:	and	r2, r2, #31
   15224:	vst1.64	{d16-d17}, [r1], r0
   15228:	ldr	r0, [r1, #8]
   1522c:	bic	r4, r4, r0, lsr r2
   15230:	eor	r0, r0, r4, lsl r2
   15234:	mov	r2, ip
   15238:	str	r0, [r1, #8]
   1523c:	mov	r0, #0
   15240:	mov	r1, lr
   15244:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   15248:	sub	sp, fp, #8
   1524c:	pop	{r4, sl, fp, pc}
   15250:	push	{fp, lr}
   15254:	mov	fp, sp
   15258:	sub	sp, sp, #48	; 0x30
   1525c:	mov	ip, r0
   15260:	movw	r0, #37272	; 0x9198
   15264:	mov	r3, #32
   15268:	movt	r0, #2
   1526c:	add	r2, r0, #16
   15270:	vld1.64	{d16-d17}, [r0], r3
   15274:	mov	r3, sp
   15278:	vld1.64	{d18-d19}, [r2]
   1527c:	add	r2, r3, #16
   15280:	vld1.64	{d20-d21}, [r0]
   15284:	add	r0, r3, #32
   15288:	vst1.64	{d18-d19}, [r2]
   1528c:	mov	r2, r3
   15290:	vst1.64	{d20-d21}, [r0]
   15294:	mov	r0, #28
   15298:	and	r0, r0, r1, lsr #3
   1529c:	and	r1, r1, #31
   152a0:	vst1.64	{d16-d17}, [r2], r0
   152a4:	mov	r0, #1
   152a8:	ldr	lr, [r2, #8]
   152ac:	bic	r0, r0, lr, lsr r1
   152b0:	eor	r0, lr, r0, lsl r1
   152b4:	mov	r1, ip
   152b8:	str	r0, [r2, #8]
   152bc:	mov	r0, #0
   152c0:	mvn	r2, #0
   152c4:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   152c8:	mov	sp, fp
   152cc:	pop	{fp, pc}
   152d0:	push	{fp, lr}
   152d4:	mov	fp, sp
   152d8:	sub	sp, sp, #48	; 0x30
   152dc:	movw	r2, #37272	; 0x9198
   152e0:	mov	r3, #32
   152e4:	mov	r1, r0
   152e8:	movt	r2, #2
   152ec:	add	r0, r2, #16
   152f0:	vld1.64	{d16-d17}, [r2], r3
   152f4:	mov	r3, sp
   152f8:	vld1.64	{d18-d19}, [r0]
   152fc:	add	r0, r3, #16
   15300:	vld1.64	{d20-d21}, [r2]
   15304:	mov	r2, r3
   15308:	vst1.64	{d18-d19}, [r0]
   1530c:	add	r0, r3, #32
   15310:	vst1.64	{d20-d21}, [r0]
   15314:	mov	r0, #12
   15318:	vst1.64	{d16-d17}, [r2], r0
   1531c:	ldr	r0, [r2]
   15320:	orr	r0, r0, #67108864	; 0x4000000
   15324:	str	r0, [r2]
   15328:	mov	r0, #0
   1532c:	mvn	r2, #0
   15330:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   15334:	mov	sp, fp
   15338:	pop	{fp, pc}
   1533c:	push	{fp, lr}
   15340:	mov	fp, sp
   15344:	sub	sp, sp, #48	; 0x30
   15348:	mov	ip, r1
   1534c:	mov	r1, r0
   15350:	movw	r0, #37272	; 0x9198
   15354:	mov	r3, #32
   15358:	movt	r0, #2
   1535c:	add	r2, r0, #16
   15360:	vld1.64	{d16-d17}, [r0], r3
   15364:	mov	r3, sp
   15368:	vld1.64	{d18-d19}, [r2]
   1536c:	add	r2, r3, #16
   15370:	vld1.64	{d20-d21}, [r0]
   15374:	add	r0, r3, #32
   15378:	vst1.64	{d18-d19}, [r2]
   1537c:	mov	r2, r3
   15380:	vst1.64	{d20-d21}, [r0]
   15384:	mov	r0, #12
   15388:	vst1.64	{d16-d17}, [r2], r0
   1538c:	ldr	r0, [r2]
   15390:	orr	r0, r0, #67108864	; 0x4000000
   15394:	str	r0, [r2]
   15398:	mov	r0, #0
   1539c:	mov	r2, ip
   153a0:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   153a4:	mov	sp, fp
   153a8:	pop	{fp, pc}
   153ac:	push	{r4, sl, fp, lr}
   153b0:	add	fp, sp, #8
   153b4:	sub	sp, sp, #96	; 0x60
   153b8:	mov	ip, r2
   153bc:	mov	r2, sp
   153c0:	vmov.i32	q8, #0	; 0x00000000
   153c4:	mov	r4, #28
   153c8:	cmp	r1, #10
   153cc:	mov	r3, r2
   153d0:	add	lr, r2, #16
   153d4:	vst1.64	{d16-d17}, [r3], r4
   153d8:	vst1.64	{d16-d17}, [lr]
   153dc:	vst1.32	{d16-d17}, [r3]
   153e0:	beq	15430 <__assert_fail@plt+0x42dc>
   153e4:	vld1.64	{d16-d17}, [r2], r4
   153e8:	vld1.64	{d18-d19}, [lr]
   153ec:	add	r3, sp, #48	; 0x30
   153f0:	add	r4, r3, #4
   153f4:	vld1.32	{d20-d21}, [r2]
   153f8:	add	r2, r3, #20
   153fc:	vst1.32	{d16-d17}, [r4]
   15400:	vst1.32	{d18-d19}, [r2]
   15404:	add	r2, r3, #32
   15408:	vst1.32	{d20-d21}, [r2]
   1540c:	str	r1, [sp, #48]	; 0x30
   15410:	mvn	r2, #0
   15414:	ldr	r1, [sp, #60]	; 0x3c
   15418:	orr	r1, r1, #67108864	; 0x4000000
   1541c:	str	r1, [sp, #60]	; 0x3c
   15420:	mov	r1, ip
   15424:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   15428:	sub	sp, fp, #8
   1542c:	pop	{r4, sl, fp, pc}
   15430:	bl	1113c <abort@plt>
   15434:	push	{r4, r5, fp, lr}
   15438:	add	fp, sp, #8
   1543c:	sub	sp, sp, #48	; 0x30
   15440:	mov	ip, r3
   15444:	movw	r3, #37272	; 0x9198
   15448:	mov	lr, #32
   1544c:	cmp	r1, #0
   15450:	mov	r5, sp
   15454:	movt	r3, #2
   15458:	cmpne	r2, #0
   1545c:	add	r4, r3, #16
   15460:	vld1.64	{d16-d17}, [r3], lr
   15464:	vld1.64	{d18-d19}, [r4]
   15468:	add	r4, r5, #16
   1546c:	vld1.64	{d20-d21}, [r3]
   15470:	vst1.64	{d16-d17}, [r5], lr
   15474:	mov	r3, #10
   15478:	vst1.64	{d18-d19}, [r4]
   1547c:	vst1.64	{d20-d21}, [r5]
   15480:	str	r3, [sp]
   15484:	bne	1548c <__assert_fail@plt+0x4338>
   15488:	bl	1113c <abort@plt>
   1548c:	str	r2, [sp, #44]	; 0x2c
   15490:	str	r1, [sp, #40]	; 0x28
   15494:	mov	r3, sp
   15498:	mov	r1, ip
   1549c:	mvn	r2, #0
   154a0:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   154a4:	sub	sp, fp, #8
   154a8:	pop	{r4, r5, fp, pc}
   154ac:	push	{r4, r5, fp, lr}
   154b0:	add	fp, sp, #8
   154b4:	sub	sp, sp, #48	; 0x30
   154b8:	mov	lr, r3
   154bc:	movw	r3, #37272	; 0x9198
   154c0:	mov	ip, #32
   154c4:	cmp	r1, #0
   154c8:	mov	r5, sp
   154cc:	movt	r3, #2
   154d0:	cmpne	r2, #0
   154d4:	add	r4, r3, #16
   154d8:	vld1.64	{d16-d17}, [r3], ip
   154dc:	vld1.64	{d18-d19}, [r4]
   154e0:	add	r4, r5, #16
   154e4:	vld1.64	{d20-d21}, [r3]
   154e8:	vst1.64	{d16-d17}, [r5], ip
   154ec:	mov	r3, #10
   154f0:	vst1.64	{d18-d19}, [r4]
   154f4:	vst1.64	{d20-d21}, [r5]
   154f8:	str	r3, [sp]
   154fc:	bne	15504 <__assert_fail@plt+0x43b0>
   15500:	bl	1113c <abort@plt>
   15504:	ldr	ip, [fp, #8]
   15508:	str	r2, [sp, #44]	; 0x2c
   1550c:	str	r1, [sp, #40]	; 0x28
   15510:	mov	r3, sp
   15514:	mov	r1, lr
   15518:	mov	r2, ip
   1551c:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   15520:	sub	sp, fp, #8
   15524:	pop	{r4, r5, fp, pc}
   15528:	push	{r4, sl, fp, lr}
   1552c:	add	fp, sp, #8
   15530:	sub	sp, sp, #48	; 0x30
   15534:	mov	ip, r2
   15538:	movw	r2, #37272	; 0x9198
   1553c:	mov	lr, #32
   15540:	cmp	r0, #0
   15544:	mov	r4, sp
   15548:	movt	r2, #2
   1554c:	cmpne	r1, #0
   15550:	add	r3, r2, #16
   15554:	vld1.64	{d16-d17}, [r2], lr
   15558:	vld1.64	{d18-d19}, [r3]
   1555c:	add	r3, r4, #16
   15560:	vld1.64	{d20-d21}, [r2]
   15564:	vst1.64	{d16-d17}, [r4], lr
   15568:	mov	r2, #10
   1556c:	vst1.64	{d18-d19}, [r3]
   15570:	vst1.64	{d20-d21}, [r4]
   15574:	str	r2, [sp]
   15578:	bne	15580 <__assert_fail@plt+0x442c>
   1557c:	bl	1113c <abort@plt>
   15580:	str	r1, [sp, #44]	; 0x2c
   15584:	str	r0, [sp, #40]	; 0x28
   15588:	mov	r3, sp
   1558c:	mov	r0, #0
   15590:	mov	r1, ip
   15594:	mvn	r2, #0
   15598:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   1559c:	sub	sp, fp, #8
   155a0:	pop	{r4, sl, fp, pc}
   155a4:	push	{r4, r5, fp, lr}
   155a8:	add	fp, sp, #8
   155ac:	sub	sp, sp, #48	; 0x30
   155b0:	mov	lr, r2
   155b4:	movw	r2, #37272	; 0x9198
   155b8:	mov	ip, r3
   155bc:	mov	r3, #32
   155c0:	cmp	r0, #0
   155c4:	mov	r5, sp
   155c8:	movt	r2, #2
   155cc:	cmpne	r1, #0
   155d0:	add	r4, r2, #16
   155d4:	vld1.64	{d16-d17}, [r2], r3
   155d8:	vld1.64	{d18-d19}, [r4]
   155dc:	add	r4, r5, #16
   155e0:	vld1.64	{d20-d21}, [r2]
   155e4:	vst1.64	{d16-d17}, [r5], r3
   155e8:	mov	r2, #10
   155ec:	vst1.64	{d18-d19}, [r4]
   155f0:	vst1.64	{d20-d21}, [r5]
   155f4:	str	r2, [sp]
   155f8:	bne	15600 <__assert_fail@plt+0x44ac>
   155fc:	bl	1113c <abort@plt>
   15600:	str	r1, [sp, #44]	; 0x2c
   15604:	str	r0, [sp, #40]	; 0x28
   15608:	mov	r3, sp
   1560c:	mov	r0, #0
   15610:	mov	r1, lr
   15614:	mov	r2, ip
   15618:	bl	14ec0 <__assert_fail@plt+0x3d6c>
   1561c:	sub	sp, fp, #8
   15620:	pop	{r4, r5, fp, pc}
   15624:	movw	r3, #37128	; 0x9108
   15628:	movt	r3, #2
   1562c:	b	14ec0 <__assert_fail@plt+0x3d6c>
   15630:	movw	r3, #37128	; 0x9108
   15634:	mov	r2, r1
   15638:	mov	r1, r0
   1563c:	mov	r0, #0
   15640:	movt	r3, #2
   15644:	b	14ec0 <__assert_fail@plt+0x3d6c>
   15648:	movw	r3, #37128	; 0x9108
   1564c:	mvn	r2, #0
   15650:	movt	r3, #2
   15654:	b	14ec0 <__assert_fail@plt+0x3d6c>
   15658:	movw	r3, #37128	; 0x9108
   1565c:	mov	r1, r0
   15660:	mov	r0, #0
   15664:	mvn	r2, #0
   15668:	movt	r3, #2
   1566c:	b	14ec0 <__assert_fail@plt+0x3d6c>
   15670:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15674:	add	fp, sp, #24
   15678:	sub	sp, sp, #32
   1567c:	ldr	r6, [fp, #12]
   15680:	ldr	r7, [fp, #8]
   15684:	mov	r4, r2
   15688:	mov	r8, r0
   1568c:	cmp	r1, #0
   15690:	beq	156b8 <__assert_fail@plt+0x4564>
   15694:	movw	r2, #33088	; 0x8140
   15698:	mov	r5, r1
   1569c:	str	r3, [sp, #4]
   156a0:	str	r4, [sp]
   156a4:	mov	r0, r8
   156a8:	mov	r1, #1
   156ac:	movt	r2, #1
   156b0:	mov	r3, r5
   156b4:	b	156d0 <__assert_fail@plt+0x457c>
   156b8:	movw	r2, #33100	; 0x814c
   156bc:	str	r3, [sp]
   156c0:	mov	r0, r8
   156c4:	mov	r1, #1
   156c8:	mov	r3, r4
   156cc:	movt	r2, #1
   156d0:	bl	110c4 <__fprintf_chk@plt>
   156d4:	movw	r1, #33107	; 0x8153
   156d8:	mov	r0, #0
   156dc:	mov	r2, #5
   156e0:	movt	r1, #1
   156e4:	bl	10f68 <dcgettext@plt>
   156e8:	movw	r2, #33825	; 0x8421
   156ec:	mov	r3, r0
   156f0:	movw	r0, #2022	; 0x7e6
   156f4:	mov	r1, #1
   156f8:	str	r0, [sp]
   156fc:	movt	r2, #1
   15700:	mov	r0, r8
   15704:	bl	110c4 <__fprintf_chk@plt>
   15708:	movw	r4, #32207	; 0x7dcf
   1570c:	mov	r1, r8
   15710:	movt	r4, #1
   15714:	mov	r0, r4
   15718:	bl	10ecc <fputs_unlocked@plt>
   1571c:	movw	r1, #33111	; 0x8157
   15720:	mov	r0, #0
   15724:	mov	r2, #5
   15728:	movt	r1, #1
   1572c:	bl	10f68 <dcgettext@plt>
   15730:	movw	r3, #33282	; 0x8202
   15734:	mov	r2, r0
   15738:	mov	r0, r8
   1573c:	mov	r1, #1
   15740:	movt	r3, #1
   15744:	bl	110c4 <__fprintf_chk@plt>
   15748:	mov	r0, r4
   1574c:	mov	r1, r8
   15750:	bl	10ecc <fputs_unlocked@plt>
   15754:	cmp	r6, #9
   15758:	bhi	15794 <__assert_fail@plt+0x4640>
   1575c:	add	r0, pc, #0
   15760:	ldr	pc, [r0, r6, lsl #2]
   15764:	andeq	r5, r1, ip, lsl #15
   15768:	andeq	r5, r1, r0, lsr #15
   1576c:	ldrdeq	r5, [r1], -r0
   15770:	strdeq	r5, [r1], -r8
   15774:	andeq	r5, r1, r0, lsr #16
   15778:	andeq	r5, r1, r8, asr #16
   1577c:	andeq	r5, r1, r0, ror r8
   15780:	andeq	r5, r1, r8, lsr #17
   15784:	andeq	r5, r1, r0, asr r9
   15788:	strdeq	r5, [r1], -r8
   1578c:	sub	sp, fp, #24
   15790:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15794:	movw	r1, #33635	; 0x8363
   15798:	movt	r1, #1
   1579c:	b	15900 <__assert_fail@plt+0x47ac>
   157a0:	movw	r1, #33316	; 0x8224
   157a4:	mov	r0, #0
   157a8:	mov	r2, #5
   157ac:	movt	r1, #1
   157b0:	bl	10f68 <dcgettext@plt>
   157b4:	ldr	r3, [r7]
   157b8:	mov	r2, r0
   157bc:	mov	r0, r8
   157c0:	mov	r1, #1
   157c4:	sub	sp, fp, #24
   157c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   157cc:	b	110c4 <__fprintf_chk@plt>
   157d0:	movw	r1, #33332	; 0x8234
   157d4:	mov	r0, #0
   157d8:	mov	r2, #5
   157dc:	movt	r1, #1
   157e0:	bl	10f68 <dcgettext@plt>
   157e4:	mov	r2, r0
   157e8:	ldr	r3, [r7]
   157ec:	ldr	r0, [r7, #4]
   157f0:	str	r0, [sp]
   157f4:	b	158e4 <__assert_fail@plt+0x4790>
   157f8:	movw	r1, #33355	; 0x824b
   157fc:	mov	r0, #0
   15800:	mov	r2, #5
   15804:	movt	r1, #1
   15808:	bl	10f68 <dcgettext@plt>
   1580c:	ldr	r3, [r7]
   15810:	mov	r2, r0
   15814:	ldmib	r7, {r0, r1}
   15818:	stm	sp, {r0, r1}
   1581c:	b	158e4 <__assert_fail@plt+0x4790>
   15820:	movw	r1, #33383	; 0x8267
   15824:	mov	r0, #0
   15828:	mov	r2, #5
   1582c:	movt	r1, #1
   15830:	bl	10f68 <dcgettext@plt>
   15834:	ldr	r3, [r7]
   15838:	mov	r2, r0
   1583c:	ldmib	r7, {r0, r1, r7}
   15840:	stm	sp, {r0, r1, r7}
   15844:	b	158e4 <__assert_fail@plt+0x4790>
   15848:	movw	r1, #33415	; 0x8287
   1584c:	mov	r0, #0
   15850:	mov	r2, #5
   15854:	movt	r1, #1
   15858:	bl	10f68 <dcgettext@plt>
   1585c:	ldr	r3, [r7]
   15860:	mov	r2, r0
   15864:	ldmib	r7, {r0, r1, r6, r7}
   15868:	stm	sp, {r0, r1, r6, r7}
   1586c:	b	158e4 <__assert_fail@plt+0x4790>
   15870:	movw	r1, #33451	; 0x82ab
   15874:	mov	r0, #0
   15878:	mov	r2, #5
   1587c:	movt	r1, #1
   15880:	bl	10f68 <dcgettext@plt>
   15884:	ldr	r3, [r7]
   15888:	mov	r2, r0
   1588c:	ldmib	r7, {r0, r1, r6}
   15890:	ldr	r5, [r7, #16]
   15894:	ldr	r7, [r7, #20]
   15898:	stm	sp, {r0, r1, r6}
   1589c:	str	r5, [sp, #12]
   158a0:	str	r7, [sp, #16]
   158a4:	b	158e4 <__assert_fail@plt+0x4790>
   158a8:	movw	r1, #33491	; 0x82d3
   158ac:	mov	r0, #0
   158b0:	mov	r2, #5
   158b4:	movt	r1, #1
   158b8:	bl	10f68 <dcgettext@plt>
   158bc:	ldr	r3, [r7]
   158c0:	mov	r2, r0
   158c4:	ldmib	r7, {r0, r1, r6}
   158c8:	ldr	r5, [r7, #16]
   158cc:	ldr	r4, [r7, #20]
   158d0:	ldr	r7, [r7, #24]
   158d4:	stm	sp, {r0, r1, r6}
   158d8:	str	r5, [sp, #12]
   158dc:	str	r4, [sp, #16]
   158e0:	str	r7, [sp, #20]
   158e4:	mov	r0, r8
   158e8:	mov	r1, #1
   158ec:	bl	110c4 <__fprintf_chk@plt>
   158f0:	sub	sp, fp, #24
   158f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   158f8:	movw	r1, #33583	; 0x832f
   158fc:	movt	r1, #1
   15900:	mov	r0, #0
   15904:	mov	r2, #5
   15908:	bl	10f68 <dcgettext@plt>
   1590c:	mov	ip, r0
   15910:	ldr	r3, [r7]
   15914:	ldr	r0, [r7, #4]
   15918:	ldr	r1, [r7, #8]
   1591c:	ldr	r6, [r7, #12]
   15920:	ldr	r5, [r7, #16]
   15924:	ldr	r4, [r7, #20]
   15928:	ldr	r2, [r7, #24]
   1592c:	ldr	lr, [r7, #28]
   15930:	ldr	r7, [r7, #32]
   15934:	stm	sp, {r0, r1, r6}
   15938:	str	r5, [sp, #12]
   1593c:	str	r4, [sp, #16]
   15940:	str	r2, [sp, #20]
   15944:	str	lr, [sp, #24]
   15948:	str	r7, [sp, #28]
   1594c:	b	15994 <__assert_fail@plt+0x4840>
   15950:	movw	r1, #33535	; 0x82ff
   15954:	mov	r0, #0
   15958:	mov	r2, #5
   1595c:	movt	r1, #1
   15960:	bl	10f68 <dcgettext@plt>
   15964:	mov	ip, r0
   15968:	ldr	r3, [r7]
   1596c:	ldmib	r7, {r0, r1, r6}
   15970:	ldr	r5, [r7, #16]
   15974:	ldr	r4, [r7, #20]
   15978:	ldr	r2, [r7, #24]
   1597c:	ldr	r7, [r7, #28]
   15980:	stm	sp, {r0, r1, r6}
   15984:	str	r5, [sp, #12]
   15988:	str	r4, [sp, #16]
   1598c:	str	r2, [sp, #20]
   15990:	str	r7, [sp, #24]
   15994:	mov	r0, r8
   15998:	mov	r1, #1
   1599c:	mov	r2, ip
   159a0:	bl	110c4 <__fprintf_chk@plt>
   159a4:	sub	sp, fp, #24
   159a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159ac:	push	{r4, sl, fp, lr}
   159b0:	add	fp, sp, #8
   159b4:	sub	sp, sp, #8
   159b8:	ldr	ip, [fp, #8]
   159bc:	mov	lr, #0
   159c0:	ldr	r4, [ip, lr, lsl #2]
   159c4:	add	lr, lr, #1
   159c8:	cmp	r4, #0
   159cc:	bne	159c0 <__assert_fail@plt+0x486c>
   159d0:	sub	r4, lr, #1
   159d4:	str	ip, [sp]
   159d8:	str	r4, [sp, #4]
   159dc:	bl	15670 <__assert_fail@plt+0x451c>
   159e0:	sub	sp, fp, #8
   159e4:	pop	{r4, sl, fp, pc}
   159e8:	push	{fp, lr}
   159ec:	mov	fp, sp
   159f0:	sub	sp, sp, #48	; 0x30
   159f4:	ldr	ip, [fp, #8]
   159f8:	ldr	lr, [ip]
   159fc:	cmp	lr, #0
   15a00:	str	lr, [sp, #8]
   15a04:	beq	15aa0 <__assert_fail@plt+0x494c>
   15a08:	ldr	lr, [ip, #4]
   15a0c:	cmp	lr, #0
   15a10:	str	lr, [sp, #12]
   15a14:	beq	15aa8 <__assert_fail@plt+0x4954>
   15a18:	ldr	lr, [ip, #8]
   15a1c:	cmp	lr, #0
   15a20:	str	lr, [sp, #16]
   15a24:	beq	15ab0 <__assert_fail@plt+0x495c>
   15a28:	ldr	lr, [ip, #12]
   15a2c:	cmp	lr, #0
   15a30:	str	lr, [sp, #20]
   15a34:	beq	15ab8 <__assert_fail@plt+0x4964>
   15a38:	ldr	lr, [ip, #16]
   15a3c:	cmp	lr, #0
   15a40:	str	lr, [sp, #24]
   15a44:	beq	15ac0 <__assert_fail@plt+0x496c>
   15a48:	ldr	lr, [ip, #20]
   15a4c:	cmp	lr, #0
   15a50:	str	lr, [sp, #28]
   15a54:	beq	15ac8 <__assert_fail@plt+0x4974>
   15a58:	ldr	lr, [ip, #24]
   15a5c:	cmp	lr, #0
   15a60:	str	lr, [sp, #32]
   15a64:	beq	15ad0 <__assert_fail@plt+0x497c>
   15a68:	ldr	lr, [ip, #28]
   15a6c:	cmp	lr, #0
   15a70:	str	lr, [sp, #36]	; 0x24
   15a74:	beq	15ad8 <__assert_fail@plt+0x4984>
   15a78:	ldr	lr, [ip, #32]
   15a7c:	cmp	lr, #0
   15a80:	str	lr, [sp, #40]	; 0x28
   15a84:	beq	15ae0 <__assert_fail@plt+0x498c>
   15a88:	ldr	lr, [ip, #36]	; 0x24
   15a8c:	mov	ip, #10
   15a90:	cmp	lr, #0
   15a94:	str	lr, [sp, #44]	; 0x2c
   15a98:	movweq	ip, #9
   15a9c:	b	15ae4 <__assert_fail@plt+0x4990>
   15aa0:	mov	ip, #0
   15aa4:	b	15ae4 <__assert_fail@plt+0x4990>
   15aa8:	mov	ip, #1
   15aac:	b	15ae4 <__assert_fail@plt+0x4990>
   15ab0:	mov	ip, #2
   15ab4:	b	15ae4 <__assert_fail@plt+0x4990>
   15ab8:	mov	ip, #3
   15abc:	b	15ae4 <__assert_fail@plt+0x4990>
   15ac0:	mov	ip, #4
   15ac4:	b	15ae4 <__assert_fail@plt+0x4990>
   15ac8:	mov	ip, #5
   15acc:	b	15ae4 <__assert_fail@plt+0x4990>
   15ad0:	mov	ip, #6
   15ad4:	b	15ae4 <__assert_fail@plt+0x4990>
   15ad8:	mov	ip, #7
   15adc:	b	15ae4 <__assert_fail@plt+0x4990>
   15ae0:	mov	ip, #8
   15ae4:	add	lr, sp, #8
   15ae8:	str	ip, [sp, #4]
   15aec:	str	lr, [sp]
   15af0:	bl	15670 <__assert_fail@plt+0x451c>
   15af4:	mov	sp, fp
   15af8:	pop	{fp, pc}
   15afc:	push	{fp, lr}
   15b00:	mov	fp, sp
   15b04:	sub	sp, sp, #56	; 0x38
   15b08:	add	ip, fp, #8
   15b0c:	str	ip, [sp, #12]
   15b10:	ldr	lr, [fp, #8]
   15b14:	cmp	lr, #0
   15b18:	str	lr, [sp, #16]
   15b1c:	beq	15bb8 <__assert_fail@plt+0x4a64>
   15b20:	ldr	lr, [ip, #4]
   15b24:	cmp	lr, #0
   15b28:	str	lr, [sp, #20]
   15b2c:	beq	15bc0 <__assert_fail@plt+0x4a6c>
   15b30:	ldr	lr, [ip, #8]
   15b34:	cmp	lr, #0
   15b38:	str	lr, [sp, #24]
   15b3c:	beq	15bc8 <__assert_fail@plt+0x4a74>
   15b40:	ldr	lr, [ip, #12]
   15b44:	cmp	lr, #0
   15b48:	str	lr, [sp, #28]
   15b4c:	beq	15bd0 <__assert_fail@plt+0x4a7c>
   15b50:	ldr	lr, [ip, #16]
   15b54:	cmp	lr, #0
   15b58:	str	lr, [sp, #32]
   15b5c:	beq	15bd8 <__assert_fail@plt+0x4a84>
   15b60:	ldr	lr, [ip, #20]
   15b64:	cmp	lr, #0
   15b68:	str	lr, [sp, #36]	; 0x24
   15b6c:	beq	15be0 <__assert_fail@plt+0x4a8c>
   15b70:	ldr	lr, [ip, #24]
   15b74:	cmp	lr, #0
   15b78:	str	lr, [sp, #40]	; 0x28
   15b7c:	beq	15be8 <__assert_fail@plt+0x4a94>
   15b80:	ldr	lr, [ip, #28]
   15b84:	cmp	lr, #0
   15b88:	str	lr, [sp, #44]	; 0x2c
   15b8c:	beq	15bf0 <__assert_fail@plt+0x4a9c>
   15b90:	ldr	lr, [ip, #32]
   15b94:	cmp	lr, #0
   15b98:	str	lr, [sp, #48]	; 0x30
   15b9c:	beq	15bf8 <__assert_fail@plt+0x4aa4>
   15ba0:	ldr	lr, [ip, #36]	; 0x24
   15ba4:	mov	ip, #10
   15ba8:	cmp	lr, #0
   15bac:	str	lr, [sp, #52]	; 0x34
   15bb0:	movweq	ip, #9
   15bb4:	b	15bfc <__assert_fail@plt+0x4aa8>
   15bb8:	mov	ip, #0
   15bbc:	b	15bfc <__assert_fail@plt+0x4aa8>
   15bc0:	mov	ip, #1
   15bc4:	b	15bfc <__assert_fail@plt+0x4aa8>
   15bc8:	mov	ip, #2
   15bcc:	b	15bfc <__assert_fail@plt+0x4aa8>
   15bd0:	mov	ip, #3
   15bd4:	b	15bfc <__assert_fail@plt+0x4aa8>
   15bd8:	mov	ip, #4
   15bdc:	b	15bfc <__assert_fail@plt+0x4aa8>
   15be0:	mov	ip, #5
   15be4:	b	15bfc <__assert_fail@plt+0x4aa8>
   15be8:	mov	ip, #6
   15bec:	b	15bfc <__assert_fail@plt+0x4aa8>
   15bf0:	mov	ip, #7
   15bf4:	b	15bfc <__assert_fail@plt+0x4aa8>
   15bf8:	mov	ip, #8
   15bfc:	add	lr, sp, #16
   15c00:	str	ip, [sp, #4]
   15c04:	str	lr, [sp]
   15c08:	bl	15670 <__assert_fail@plt+0x451c>
   15c0c:	mov	sp, fp
   15c10:	pop	{fp, pc}
   15c14:	push	{fp, lr}
   15c18:	mov	fp, sp
   15c1c:	movw	r0, #37220	; 0x9164
   15c20:	movt	r0, #2
   15c24:	ldr	r1, [r0]
   15c28:	movw	r0, #32207	; 0x7dcf
   15c2c:	movt	r0, #1
   15c30:	bl	10ecc <fputs_unlocked@plt>
   15c34:	movw	r1, #33695	; 0x839f
   15c38:	mov	r0, #0
   15c3c:	mov	r2, #5
   15c40:	movt	r1, #1
   15c44:	bl	10f68 <dcgettext@plt>
   15c48:	movw	r2, #33715	; 0x83b3
   15c4c:	mov	r1, r0
   15c50:	mov	r0, #1
   15c54:	movt	r2, #1
   15c58:	bl	110ac <__printf_chk@plt>
   15c5c:	movw	r1, #33737	; 0x83c9
   15c60:	mov	r0, #0
   15c64:	mov	r2, #5
   15c68:	movt	r1, #1
   15c6c:	bl	10f68 <dcgettext@plt>
   15c70:	movw	r2, #31612	; 0x7b7c
   15c74:	movw	r3, #32016	; 0x7d10
   15c78:	mov	r1, r0
   15c7c:	mov	r0, #1
   15c80:	movt	r2, #1
   15c84:	movt	r3, #1
   15c88:	bl	110ac <__printf_chk@plt>
   15c8c:	movw	r1, #33757	; 0x83dd
   15c90:	mov	r0, #0
   15c94:	mov	r2, #5
   15c98:	movt	r1, #1
   15c9c:	bl	10f68 <dcgettext@plt>
   15ca0:	movw	r2, #33796	; 0x8404
   15ca4:	mov	r1, r0
   15ca8:	mov	r0, #1
   15cac:	movt	r2, #1
   15cb0:	pop	{fp, lr}
   15cb4:	b	110ac <__printf_chk@plt>
   15cb8:	push	{r4, r5, r6, sl, fp, lr}
   15cbc:	add	fp, sp, #16
   15cc0:	mov	r4, r2
   15cc4:	mov	r5, r1
   15cc8:	mov	r6, r0
   15ccc:	bl	1717c <__assert_fail@plt+0x6028>
   15cd0:	cmp	r0, #0
   15cd4:	popne	{r4, r5, r6, sl, fp, pc}
   15cd8:	cmp	r6, #0
   15cdc:	beq	15cf0 <__assert_fail@plt+0x4b9c>
   15ce0:	cmp	r5, #0
   15ce4:	cmpne	r4, #0
   15ce8:	bne	15cf0 <__assert_fail@plt+0x4b9c>
   15cec:	pop	{r4, r5, r6, sl, fp, pc}
   15cf0:	bl	16290 <__assert_fail@plt+0x513c>
   15cf4:	push	{r4, r5, r6, sl, fp, lr}
   15cf8:	add	fp, sp, #16
   15cfc:	mov	r4, r2
   15d00:	mov	r5, r1
   15d04:	mov	r6, r0
   15d08:	bl	1717c <__assert_fail@plt+0x6028>
   15d0c:	cmp	r0, #0
   15d10:	popne	{r4, r5, r6, sl, fp, pc}
   15d14:	cmp	r6, #0
   15d18:	beq	15d2c <__assert_fail@plt+0x4bd8>
   15d1c:	cmp	r5, #0
   15d20:	cmpne	r4, #0
   15d24:	bne	15d2c <__assert_fail@plt+0x4bd8>
   15d28:	pop	{r4, r5, r6, sl, fp, pc}
   15d2c:	bl	16290 <__assert_fail@plt+0x513c>
   15d30:	push	{fp, lr}
   15d34:	mov	fp, sp
   15d38:	bl	16fdc <__assert_fail@plt+0x5e88>
   15d3c:	cmp	r0, #0
   15d40:	popne	{fp, pc}
   15d44:	bl	16290 <__assert_fail@plt+0x513c>
   15d48:	push	{fp, lr}
   15d4c:	mov	fp, sp
   15d50:	bl	16fdc <__assert_fail@plt+0x5e88>
   15d54:	cmp	r0, #0
   15d58:	popne	{fp, pc}
   15d5c:	bl	16290 <__assert_fail@plt+0x513c>
   15d60:	push	{fp, lr}
   15d64:	mov	fp, sp
   15d68:	bl	16fdc <__assert_fail@plt+0x5e88>
   15d6c:	cmp	r0, #0
   15d70:	popne	{fp, pc}
   15d74:	bl	16290 <__assert_fail@plt+0x513c>
   15d78:	push	{r4, r5, fp, lr}
   15d7c:	add	fp, sp, #8
   15d80:	mov	r4, r1
   15d84:	mov	r5, r0
   15d88:	bl	1700c <__assert_fail@plt+0x5eb8>
   15d8c:	cmp	r0, #0
   15d90:	popne	{r4, r5, fp, pc}
   15d94:	cmp	r5, #0
   15d98:	beq	15da8 <__assert_fail@plt+0x4c54>
   15d9c:	cmp	r4, #0
   15da0:	bne	15da8 <__assert_fail@plt+0x4c54>
   15da4:	pop	{r4, r5, fp, pc}
   15da8:	bl	16290 <__assert_fail@plt+0x513c>
   15dac:	push	{fp, lr}
   15db0:	mov	fp, sp
   15db4:	cmp	r1, #0
   15db8:	orreq	r1, r1, #1
   15dbc:	bl	1700c <__assert_fail@plt+0x5eb8>
   15dc0:	cmp	r0, #0
   15dc4:	popne	{fp, pc}
   15dc8:	bl	16290 <__assert_fail@plt+0x513c>
   15dcc:	push	{fp, lr}
   15dd0:	mov	fp, sp
   15dd4:	clz	r3, r2
   15dd8:	lsr	ip, r3, #5
   15ddc:	clz	r3, r1
   15de0:	lsr	r3, r3, #5
   15de4:	orrs	r3, r3, ip
   15de8:	movwne	r1, #1
   15dec:	movwne	r2, #1
   15df0:	bl	1717c <__assert_fail@plt+0x6028>
   15df4:	cmp	r0, #0
   15df8:	popne	{fp, pc}
   15dfc:	bl	16290 <__assert_fail@plt+0x513c>
   15e00:	push	{fp, lr}
   15e04:	mov	fp, sp
   15e08:	mov	r2, r1
   15e0c:	mov	r1, r0
   15e10:	mov	r0, #0
   15e14:	bl	1717c <__assert_fail@plt+0x6028>
   15e18:	cmp	r0, #0
   15e1c:	popne	{fp, pc}
   15e20:	bl	16290 <__assert_fail@plt+0x513c>
   15e24:	push	{fp, lr}
   15e28:	mov	fp, sp
   15e2c:	mov	r2, r1
   15e30:	mov	r1, r0
   15e34:	clz	r0, r2
   15e38:	clz	r3, r1
   15e3c:	lsr	r0, r0, #5
   15e40:	lsr	r3, r3, #5
   15e44:	orrs	r0, r3, r0
   15e48:	movwne	r1, #1
   15e4c:	movwne	r2, #1
   15e50:	mov	r0, #0
   15e54:	bl	1717c <__assert_fail@plt+0x6028>
   15e58:	cmp	r0, #0
   15e5c:	popne	{fp, pc}
   15e60:	bl	16290 <__assert_fail@plt+0x513c>
   15e64:	push	{r4, r5, r6, sl, fp, lr}
   15e68:	add	fp, sp, #16
   15e6c:	ldr	r5, [r1]
   15e70:	mov	r4, r1
   15e74:	mov	r6, r0
   15e78:	cmp	r0, #0
   15e7c:	beq	15e94 <__assert_fail@plt+0x4d40>
   15e80:	mov	r0, #1
   15e84:	add	r0, r0, r5, lsr #1
   15e88:	adds	r5, r5, r0
   15e8c:	bcc	15e9c <__assert_fail@plt+0x4d48>
   15e90:	b	15ed8 <__assert_fail@plt+0x4d84>
   15e94:	cmp	r5, #0
   15e98:	movweq	r5, #64	; 0x40
   15e9c:	mov	r0, r6
   15ea0:	mov	r1, r5
   15ea4:	mov	r2, #1
   15ea8:	bl	1717c <__assert_fail@plt+0x6028>
   15eac:	cmp	r5, #0
   15eb0:	mov	r1, r5
   15eb4:	movwne	r1, #1
   15eb8:	cmp	r0, #0
   15ebc:	bne	15ed0 <__assert_fail@plt+0x4d7c>
   15ec0:	clz	r2, r6
   15ec4:	lsr	r2, r2, #5
   15ec8:	orrs	r1, r2, r1
   15ecc:	bne	15ed8 <__assert_fail@plt+0x4d84>
   15ed0:	str	r5, [r4]
   15ed4:	pop	{r4, r5, r6, sl, fp, pc}
   15ed8:	bl	16290 <__assert_fail@plt+0x513c>
   15edc:	push	{r4, r5, r6, r7, fp, lr}
   15ee0:	add	fp, sp, #16
   15ee4:	ldr	r5, [r1]
   15ee8:	mov	r6, r2
   15eec:	mov	r4, r1
   15ef0:	mov	r7, r0
   15ef4:	cmp	r0, #0
   15ef8:	beq	15f10 <__assert_fail@plt+0x4dbc>
   15efc:	mov	r0, #1
   15f00:	add	r0, r0, r5, lsr #1
   15f04:	adds	r5, r5, r0
   15f08:	bcc	15f28 <__assert_fail@plt+0x4dd4>
   15f0c:	b	15f5c <__assert_fail@plt+0x4e08>
   15f10:	cmp	r5, #0
   15f14:	bne	15f28 <__assert_fail@plt+0x4dd4>
   15f18:	mov	r0, #64	; 0x40
   15f1c:	cmp	r6, #64	; 0x40
   15f20:	udiv	r5, r0, r6
   15f24:	addhi	r5, r5, #1
   15f28:	mov	r0, r7
   15f2c:	mov	r1, r5
   15f30:	mov	r2, r6
   15f34:	bl	1717c <__assert_fail@plt+0x6028>
   15f38:	cmp	r0, #0
   15f3c:	bne	15f54 <__assert_fail@plt+0x4e00>
   15f40:	cmp	r7, #0
   15f44:	beq	15f5c <__assert_fail@plt+0x4e08>
   15f48:	cmp	r6, #0
   15f4c:	cmpne	r5, #0
   15f50:	bne	15f5c <__assert_fail@plt+0x4e08>
   15f54:	str	r5, [r4]
   15f58:	pop	{r4, r5, r6, r7, fp, pc}
   15f5c:	bl	16290 <__assert_fail@plt+0x513c>
   15f60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f64:	add	fp, sp, #24
   15f68:	mov	r8, r1
   15f6c:	ldr	r1, [r1]
   15f70:	mov	r5, r0
   15f74:	add	r0, r1, r1, asr #1
   15f78:	cmp	r0, r1
   15f7c:	mvnvs	r0, #-2147483648	; 0x80000000
   15f80:	cmp	r0, r3
   15f84:	mov	r7, r0
   15f88:	movgt	r7, r3
   15f8c:	cmn	r3, #1
   15f90:	movle	r7, r0
   15f94:	ldr	r0, [fp, #8]
   15f98:	cmn	r0, #1
   15f9c:	ble	15fc4 <__assert_fail@plt+0x4e70>
   15fa0:	cmp	r0, #0
   15fa4:	beq	16018 <__assert_fail@plt+0x4ec4>
   15fa8:	cmn	r7, #1
   15fac:	ble	15fec <__assert_fail@plt+0x4e98>
   15fb0:	mvn	r4, #-2147483648	; 0x80000000
   15fb4:	udiv	r6, r4, r0
   15fb8:	cmp	r6, r7
   15fbc:	bge	16018 <__assert_fail@plt+0x4ec4>
   15fc0:	b	16028 <__assert_fail@plt+0x4ed4>
   15fc4:	cmn	r7, #1
   15fc8:	ble	16008 <__assert_fail@plt+0x4eb4>
   15fcc:	cmn	r0, #1
   15fd0:	beq	16018 <__assert_fail@plt+0x4ec4>
   15fd4:	mov	r6, #-2147483648	; 0x80000000
   15fd8:	mvn	r4, #-2147483648	; 0x80000000
   15fdc:	sdiv	r6, r6, r0
   15fe0:	cmp	r6, r7
   15fe4:	bge	16018 <__assert_fail@plt+0x4ec4>
   15fe8:	b	16028 <__assert_fail@plt+0x4ed4>
   15fec:	beq	16018 <__assert_fail@plt+0x4ec4>
   15ff0:	mov	r6, #-2147483648	; 0x80000000
   15ff4:	mvn	r4, #-2147483648	; 0x80000000
   15ff8:	sdiv	r6, r6, r7
   15ffc:	cmp	r6, r0
   16000:	bge	16018 <__assert_fail@plt+0x4ec4>
   16004:	b	16028 <__assert_fail@plt+0x4ed4>
   16008:	mvn	r4, #-2147483648	; 0x80000000
   1600c:	sdiv	r6, r4, r0
   16010:	cmp	r7, r6
   16014:	blt	16028 <__assert_fail@plt+0x4ed4>
   16018:	mul	r6, r7, r0
   1601c:	mov	r4, #64	; 0x40
   16020:	cmp	r6, #63	; 0x3f
   16024:	bgt	16030 <__assert_fail@plt+0x4edc>
   16028:	sdiv	r7, r4, r0
   1602c:	mul	r6, r7, r0
   16030:	cmp	r5, #0
   16034:	moveq	r4, #0
   16038:	streq	r4, [r8]
   1603c:	sub	r4, r7, r1
   16040:	cmp	r4, r2
   16044:	bge	160f0 <__assert_fail@plt+0x4f9c>
   16048:	add	r7, r1, r2
   1604c:	mov	r6, #0
   16050:	mov	r2, #0
   16054:	cmp	r7, r3
   16058:	movwgt	r6, #1
   1605c:	cmn	r3, #1
   16060:	movwgt	r2, #1
   16064:	cmp	r7, r1
   16068:	bvs	16124 <__assert_fail@plt+0x4fd0>
   1606c:	ands	r1, r2, r6
   16070:	bne	16124 <__assert_fail@plt+0x4fd0>
   16074:	cmn	r0, #1
   16078:	ble	160a0 <__assert_fail@plt+0x4f4c>
   1607c:	cmp	r0, #0
   16080:	beq	160ec <__assert_fail@plt+0x4f98>
   16084:	cmn	r7, #1
   16088:	ble	160c4 <__assert_fail@plt+0x4f70>
   1608c:	mvn	r1, #-2147483648	; 0x80000000
   16090:	udiv	r1, r1, r0
   16094:	cmp	r1, r7
   16098:	bge	160ec <__assert_fail@plt+0x4f98>
   1609c:	b	16124 <__assert_fail@plt+0x4fd0>
   160a0:	cmn	r7, #1
   160a4:	ble	160dc <__assert_fail@plt+0x4f88>
   160a8:	cmn	r0, #1
   160ac:	beq	160ec <__assert_fail@plt+0x4f98>
   160b0:	mov	r1, #-2147483648	; 0x80000000
   160b4:	sdiv	r1, r1, r0
   160b8:	cmp	r1, r7
   160bc:	bge	160ec <__assert_fail@plt+0x4f98>
   160c0:	b	16124 <__assert_fail@plt+0x4fd0>
   160c4:	beq	160ec <__assert_fail@plt+0x4f98>
   160c8:	mov	r1, #-2147483648	; 0x80000000
   160cc:	sdiv	r1, r1, r7
   160d0:	cmp	r1, r0
   160d4:	bge	160ec <__assert_fail@plt+0x4f98>
   160d8:	b	16124 <__assert_fail@plt+0x4fd0>
   160dc:	mvn	r1, #-2147483648	; 0x80000000
   160e0:	sdiv	r1, r1, r0
   160e4:	cmp	r7, r1
   160e8:	blt	16124 <__assert_fail@plt+0x4fd0>
   160ec:	mul	r6, r7, r0
   160f0:	mov	r0, r5
   160f4:	mov	r1, r6
   160f8:	bl	1700c <__assert_fail@plt+0x5eb8>
   160fc:	cmp	r6, #0
   16100:	movwne	r6, #1
   16104:	cmp	r0, #0
   16108:	bne	1611c <__assert_fail@plt+0x4fc8>
   1610c:	clz	r1, r5
   16110:	lsr	r1, r1, #5
   16114:	orrs	r1, r1, r6
   16118:	bne	16124 <__assert_fail@plt+0x4fd0>
   1611c:	str	r7, [r8]
   16120:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16124:	bl	16290 <__assert_fail@plt+0x513c>
   16128:	push	{fp, lr}
   1612c:	mov	fp, sp
   16130:	mov	r1, #1
   16134:	bl	16f88 <__assert_fail@plt+0x5e34>
   16138:	cmp	r0, #0
   1613c:	popne	{fp, pc}
   16140:	bl	16290 <__assert_fail@plt+0x513c>
   16144:	push	{fp, lr}
   16148:	mov	fp, sp
   1614c:	bl	16f88 <__assert_fail@plt+0x5e34>
   16150:	cmp	r0, #0
   16154:	popne	{fp, pc}
   16158:	bl	16290 <__assert_fail@plt+0x513c>
   1615c:	push	{fp, lr}
   16160:	mov	fp, sp
   16164:	mov	r1, #1
   16168:	bl	16f88 <__assert_fail@plt+0x5e34>
   1616c:	cmp	r0, #0
   16170:	popne	{fp, pc}
   16174:	bl	16290 <__assert_fail@plt+0x513c>
   16178:	push	{fp, lr}
   1617c:	mov	fp, sp
   16180:	bl	16f88 <__assert_fail@plt+0x5e34>
   16184:	cmp	r0, #0
   16188:	popne	{fp, pc}
   1618c:	bl	16290 <__assert_fail@plt+0x513c>
   16190:	push	{r4, r5, r6, sl, fp, lr}
   16194:	add	fp, sp, #16
   16198:	mov	r5, r0
   1619c:	mov	r0, r1
   161a0:	mov	r4, r1
   161a4:	bl	16fdc <__assert_fail@plt+0x5e88>
   161a8:	cmp	r0, #0
   161ac:	beq	161c8 <__assert_fail@plt+0x5074>
   161b0:	mov	r1, r5
   161b4:	mov	r2, r4
   161b8:	mov	r6, r0
   161bc:	bl	10f2c <memcpy@plt>
   161c0:	mov	r0, r6
   161c4:	pop	{r4, r5, r6, sl, fp, pc}
   161c8:	bl	16290 <__assert_fail@plt+0x513c>
   161cc:	push	{r4, r5, r6, sl, fp, lr}
   161d0:	add	fp, sp, #16
   161d4:	mov	r5, r0
   161d8:	mov	r0, r1
   161dc:	mov	r4, r1
   161e0:	bl	16fdc <__assert_fail@plt+0x5e88>
   161e4:	cmp	r0, #0
   161e8:	beq	16204 <__assert_fail@plt+0x50b0>
   161ec:	mov	r1, r5
   161f0:	mov	r2, r4
   161f4:	mov	r6, r0
   161f8:	bl	10f2c <memcpy@plt>
   161fc:	mov	r0, r6
   16200:	pop	{r4, r5, r6, sl, fp, pc}
   16204:	bl	16290 <__assert_fail@plt+0x513c>
   16208:	push	{r4, r5, r6, sl, fp, lr}
   1620c:	add	fp, sp, #16
   16210:	mov	r5, r0
   16214:	add	r0, r1, #1
   16218:	mov	r4, r1
   1621c:	bl	16fdc <__assert_fail@plt+0x5e88>
   16220:	cmp	r0, #0
   16224:	beq	1624c <__assert_fail@plt+0x50f8>
   16228:	mov	r6, r0
   1622c:	mov	r0, #0
   16230:	mov	r1, r5
   16234:	mov	r2, r4
   16238:	strb	r0, [r6, r4]
   1623c:	mov	r0, r6
   16240:	bl	10f2c <memcpy@plt>
   16244:	mov	r0, r6
   16248:	pop	{r4, r5, r6, sl, fp, pc}
   1624c:	bl	16290 <__assert_fail@plt+0x513c>
   16250:	push	{r4, r5, r6, sl, fp, lr}
   16254:	add	fp, sp, #16
   16258:	mov	r4, r0
   1625c:	bl	11070 <strlen@plt>
   16260:	add	r5, r0, #1
   16264:	mov	r0, r5
   16268:	bl	16fdc <__assert_fail@plt+0x5e88>
   1626c:	cmp	r0, #0
   16270:	beq	1628c <__assert_fail@plt+0x5138>
   16274:	mov	r1, r4
   16278:	mov	r2, r5
   1627c:	mov	r6, r0
   16280:	bl	10f2c <memcpy@plt>
   16284:	mov	r0, r6
   16288:	pop	{r4, r5, r6, sl, fp, pc}
   1628c:	bl	16290 <__assert_fail@plt+0x513c>
   16290:	push	{fp, lr}
   16294:	mov	fp, sp
   16298:	movw	r0, #37120	; 0x9100
   1629c:	movw	r1, #33872	; 0x8450
   162a0:	mov	r2, #5
   162a4:	movt	r0, #2
   162a8:	movt	r1, #1
   162ac:	ldr	r4, [r0]
   162b0:	mov	r0, #0
   162b4:	bl	10f68 <dcgettext@plt>
   162b8:	movw	r2, #32798	; 0x801e
   162bc:	mov	r3, r0
   162c0:	mov	r0, r4
   162c4:	mov	r1, #0
   162c8:	movt	r2, #1
   162cc:	bl	10fe0 <error@plt>
   162d0:	bl	1113c <abort@plt>
   162d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162d8:	add	fp, sp, #28
   162dc:	sub	sp, sp, #44	; 0x2c
   162e0:	cmp	r2, #37	; 0x25
   162e4:	bcs	16f68 <__assert_fail@plt+0x5e14>
   162e8:	ldr	sl, [fp, #8]
   162ec:	mov	r6, r2
   162f0:	mov	r7, r1
   162f4:	mov	r4, r0
   162f8:	str	r3, [sp, #36]	; 0x24
   162fc:	bl	11088 <__errno_location@plt>
   16300:	mov	r5, r0
   16304:	mov	r0, #0
   16308:	str	r0, [r5]
   1630c:	bl	11058 <__ctype_b_loc@plt>
   16310:	ldr	r1, [r0]
   16314:	mov	r2, r4
   16318:	ldrb	r0, [r2], #1
   1631c:	add	r3, r1, r0, lsl #1
   16320:	ldrb	r3, [r3, #1]
   16324:	tst	r3, #32
   16328:	bne	16318 <__assert_fail@plt+0x51c4>
   1632c:	sub	r9, fp, #32
   16330:	cmp	r7, #0
   16334:	mov	r8, #4
   16338:	movne	r9, r7
   1633c:	cmp	r0, #45	; 0x2d
   16340:	beq	16700 <__assert_fail@plt+0x55ac>
   16344:	mov	r0, r4
   16348:	mov	r1, r9
   1634c:	mov	r2, r6
   16350:	mov	r3, #0
   16354:	bl	10f38 <__strtoull_internal@plt>
   16358:	mov	r7, r1
   1635c:	ldr	r1, [r9]
   16360:	cmp	r1, r4
   16364:	beq	1639c <__assert_fail@plt+0x5248>
   16368:	mov	r6, r0
   1636c:	ldr	r0, [r5]
   16370:	cmp	r0, #0
   16374:	beq	166b8 <__assert_fail@plt+0x5564>
   16378:	cmp	r0, #34	; 0x22
   1637c:	bne	16700 <__assert_fail@plt+0x55ac>
   16380:	mov	r8, #1
   16384:	cmp	sl, #0
   16388:	beq	16f54 <__assert_fail@plt+0x5e00>
   1638c:	ldrb	r4, [r1]
   16390:	cmp	r4, #0
   16394:	bne	163e0 <__assert_fail@plt+0x528c>
   16398:	b	16f54 <__assert_fail@plt+0x5e00>
   1639c:	cmp	sl, #0
   163a0:	beq	16700 <__assert_fail@plt+0x55ac>
   163a4:	mov	r5, r1
   163a8:	ldrb	r1, [r4]
   163ac:	cmp	r1, #0
   163b0:	beq	16700 <__assert_fail@plt+0x55ac>
   163b4:	mov	r0, sl
   163b8:	bl	1107c <strchr@plt>
   163bc:	cmp	r0, #0
   163c0:	beq	16700 <__assert_fail@plt+0x55ac>
   163c4:	mov	r1, r5
   163c8:	mov	r8, #0
   163cc:	mov	r6, #1
   163d0:	mov	r7, #0
   163d4:	ldrb	r4, [r1]
   163d8:	cmp	r4, #0
   163dc:	beq	16f54 <__assert_fail@plt+0x5e00>
   163e0:	str	r1, [sp, #32]
   163e4:	mov	r0, sl
   163e8:	mov	r1, r4
   163ec:	bl	1107c <strchr@plt>
   163f0:	cmp	r0, #0
   163f4:	beq	166f4 <__assert_fail@plt+0x55a0>
   163f8:	sub	r0, r4, #69	; 0x45
   163fc:	mov	r1, #1
   16400:	mov	r3, #0
   16404:	mov	r5, #1024	; 0x400
   16408:	cmp	r0, #47	; 0x2f
   1640c:	str	r1, [sp, #28]
   16410:	bhi	16514 <__assert_fail@plt+0x53c0>
   16414:	add	r1, pc, #0
   16418:	ldr	pc, [r1, r0, lsl #2]
   1641c:	ldrdeq	r6, [r1], -ip
   16420:	andeq	r6, r1, r4, lsl r5
   16424:	ldrdeq	r6, [r1], -ip
   16428:	andeq	r6, r1, r4, lsl r5
   1642c:	andeq	r6, r1, r4, lsl r5
   16430:	andeq	r6, r1, r4, lsl r5
   16434:	ldrdeq	r6, [r1], -ip
   16438:	andeq	r6, r1, r4, lsl r5
   1643c:	ldrdeq	r6, [r1], -ip
   16440:	andeq	r6, r1, r4, lsl r5
   16444:	andeq	r6, r1, r4, lsl r5
   16448:	ldrdeq	r6, [r1], -ip
   1644c:	andeq	r6, r1, r4, lsl r5
   16450:	andeq	r6, r1, r4, lsl r5
   16454:	andeq	r6, r1, r4, lsl r5
   16458:	ldrdeq	r6, [r1], -ip
   1645c:	andeq	r6, r1, r4, lsl r5
   16460:	andeq	r6, r1, r4, lsl r5
   16464:	andeq	r6, r1, r4, lsl r5
   16468:	andeq	r6, r1, r4, lsl r5
   1646c:	ldrdeq	r6, [r1], -ip
   16470:	ldrdeq	r6, [r1], -ip
   16474:	andeq	r6, r1, r4, lsl r5
   16478:	andeq	r6, r1, r4, lsl r5
   1647c:	andeq	r6, r1, r4, lsl r5
   16480:	andeq	r6, r1, r4, lsl r5
   16484:	andeq	r6, r1, r4, lsl r5
   16488:	andeq	r6, r1, r4, lsl r5
   1648c:	andeq	r6, r1, r4, lsl r5
   16490:	andeq	r6, r1, r4, lsl r5
   16494:	andeq	r6, r1, r4, lsl r5
   16498:	andeq	r6, r1, r4, lsl r5
   1649c:	andeq	r6, r1, r4, lsl r5
   164a0:	andeq	r6, r1, r4, lsl r5
   164a4:	ldrdeq	r6, [r1], -ip
   164a8:	andeq	r6, r1, r4, lsl r5
   164ac:	andeq	r6, r1, r4, lsl r5
   164b0:	andeq	r6, r1, r4, lsl r5
   164b4:	ldrdeq	r6, [r1], -ip
   164b8:	andeq	r6, r1, r4, lsl r5
   164bc:	ldrdeq	r6, [r1], -ip
   164c0:	andeq	r6, r1, r4, lsl r5
   164c4:	andeq	r6, r1, r4, lsl r5
   164c8:	andeq	r6, r1, r4, lsl r5
   164cc:	andeq	r6, r1, r4, lsl r5
   164d0:	andeq	r6, r1, r4, lsl r5
   164d4:	andeq	r6, r1, r4, lsl r5
   164d8:	ldrdeq	r6, [r1], -ip
   164dc:	mov	r0, sl
   164e0:	mov	r1, #48	; 0x30
   164e4:	bl	1107c <strchr@plt>
   164e8:	cmp	r0, #0
   164ec:	beq	16510 <__assert_fail@plt+0x53bc>
   164f0:	ldr	r1, [sp, #32]
   164f4:	ldrb	r0, [r1, #1]
   164f8:	cmp	r0, #66	; 0x42
   164fc:	cmpne	r0, #68	; 0x44
   16500:	bne	166c8 <__assert_fail@plt+0x5574>
   16504:	mov	r5, #1000	; 0x3e8
   16508:	mov	r0, #2
   1650c:	str	r0, [sp, #28]
   16510:	mov	r3, #0
   16514:	sub	r0, r4, #66	; 0x42
   16518:	cmp	r0, #53	; 0x35
   1651c:	bhi	166f4 <__assert_fail@plt+0x55a0>
   16520:	add	r1, pc, #0
   16524:	ldr	pc, [r1, r0, lsl #2]
   16528:	andeq	r6, r1, r4, ror #20
   1652c:	strdeq	r6, [r1], -r4
   16530:	strdeq	r6, [r1], -r4
   16534:	andeq	r6, r1, ip, lsl #21
   16538:	strdeq	r6, [r1], -r4
   1653c:	andeq	r6, r1, r0, lsl #12
   16540:	strdeq	r6, [r1], -r4
   16544:	strdeq	r6, [r1], -r4
   16548:	strdeq	r6, [r1], -r4
   1654c:	andeq	r6, r1, ip, lsl #14
   16550:	strdeq	r6, [r1], -r4
   16554:	andeq	r6, r1, r4, asr r7
   16558:	strdeq	r6, [r1], -r4
   1655c:	strdeq	r6, [r1], -r4
   16560:	andeq	r6, r1, r0, ror #23
   16564:	strdeq	r6, [r1], -r4
   16568:	strdeq	r6, [r1], -r4
   1656c:	strdeq	r6, [r1], -r4
   16570:	andeq	r6, r1, r0, ror #15
   16574:	strdeq	r6, [r1], -r4
   16578:	strdeq	r6, [r1], -r4
   1657c:	strdeq	r6, [r1], -r4
   16580:	strdeq	r6, [r1], -r4
   16584:	andeq	r6, r1, r8, lsl #26
   16588:	andeq	r6, r1, r8, asr #17
   1658c:	strdeq	r6, [r1], -r4
   16590:	strdeq	r6, [r1], -r4
   16594:	strdeq	r6, [r1], -r4
   16598:	strdeq	r6, [r1], -r4
   1659c:	strdeq	r6, [r1], -r4
   165a0:	strdeq	r6, [r1], -r4
   165a4:	strdeq	r6, [r1], -r4
   165a8:	ldrdeq	r6, [r1], -ip
   165ac:	andeq	r6, r1, r4, lsr pc
   165b0:	strdeq	r6, [r1], -r4
   165b4:	strdeq	r6, [r1], -r4
   165b8:	strdeq	r6, [r1], -r4
   165bc:	andeq	r6, r1, r0, lsl #12
   165c0:	strdeq	r6, [r1], -r4
   165c4:	strdeq	r6, [r1], -r4
   165c8:	strdeq	r6, [r1], -r4
   165cc:	andeq	r6, r1, ip, lsl #14
   165d0:	strdeq	r6, [r1], -r4
   165d4:	andeq	r6, r1, r4, asr r7
   165d8:	strdeq	r6, [r1], -r4
   165dc:	strdeq	r6, [r1], -r4
   165e0:	strdeq	r6, [r1], -r4
   165e4:	strdeq	r6, [r1], -r4
   165e8:	strdeq	r6, [r1], -r4
   165ec:	strdeq	r6, [r1], -r4
   165f0:	andeq	r6, r1, r0, ror #15
   165f4:	strdeq	r6, [r1], -r4
   165f8:	strdeq	r6, [r1], -r4
   165fc:	andeq	r6, r1, r0, lsl pc
   16600:	mvn	r0, #0
   16604:	mvn	r1, #0
   16608:	mov	r2, r5
   1660c:	mov	sl, r3
   16610:	bl	172c0 <__assert_fail@plt+0x616c>
   16614:	subs	r3, r0, r6
   16618:	mov	lr, #0
   1661c:	umull	r4, r2, r6, r5
   16620:	str	r1, [sp, #20]
   16624:	sbcs	r3, r1, r7
   16628:	mla	ip, r6, sl, r2
   1662c:	mov	r2, r1
   16630:	movwcc	lr, #1
   16634:	mla	r7, r7, r5, ip
   16638:	mov	r2, #0
   1663c:	cmp	lr, #0
   16640:	mvnne	r4, #0
   16644:	mvnne	r7, #0
   16648:	subs	r6, r0, r4
   1664c:	sbcs	r6, r1, r7
   16650:	movwcc	r2, #1
   16654:	umull	r3, r6, r4, r5
   16658:	cmp	r2, #0
   1665c:	str	r6, [sp, #16]
   16660:	mvnne	r3, #0
   16664:	cmp	r2, #0
   16668:	umull	r6, ip, r3, r5
   1666c:	mla	r1, r3, sl, ip
   16670:	ldr	ip, [sp, #16]
   16674:	str	r1, [sp, #12]
   16678:	mla	r4, r4, sl, ip
   1667c:	mla	r4, r7, r5, r4
   16680:	ldr	r7, [sp, #12]
   16684:	mvnne	r4, #0
   16688:	subs	r0, r0, r3
   1668c:	ldr	r0, [sp, #20]
   16690:	mla	r7, r4, r5, r7
   16694:	sbcs	r0, r0, r4
   16698:	mov	r0, #0
   1669c:	movwcc	r0, #1
   166a0:	cmp	r0, #0
   166a4:	mov	r1, r0
   166a8:	orr	r0, lr, r2
   166ac:	mvnne	r7, #0
   166b0:	mvnne	r6, #0
   166b4:	b	16d00 <__assert_fail@plt+0x5bac>
   166b8:	mov	r8, r0
   166bc:	cmp	sl, #0
   166c0:	bne	1638c <__assert_fail@plt+0x5238>
   166c4:	b	16f54 <__assert_fail@plt+0x5e00>
   166c8:	cmp	r0, #105	; 0x69
   166cc:	mov	r3, #0
   166d0:	bne	16514 <__assert_fail@plt+0x53c0>
   166d4:	ldrb	r0, [r1, #2]
   166d8:	mov	r1, #1
   166dc:	cmp	r0, #66	; 0x42
   166e0:	movweq	r1, #3
   166e4:	str	r1, [sp, #28]
   166e8:	sub	r0, r4, #66	; 0x42
   166ec:	cmp	r0, #53	; 0x35
   166f0:	bls	16520 <__assert_fail@plt+0x53cc>
   166f4:	ldr	r0, [sp, #36]	; 0x24
   166f8:	orr	r8, r8, #2
   166fc:	strd	r6, [r0]
   16700:	mov	r0, r8
   16704:	sub	sp, fp, #28
   16708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1670c:	mvn	r0, #0
   16710:	mvn	r1, #0
   16714:	mov	r2, r5
   16718:	mov	r4, r3
   1671c:	bl	172c0 <__assert_fail@plt+0x616c>
   16720:	subs	r0, r0, r6
   16724:	mov	r2, #0
   16728:	sbcs	r0, r1, r7
   1672c:	movwcc	r2, #1
   16730:	umull	r0, r1, r6, r5
   16734:	mla	r1, r6, r4, r1
   16738:	cmp	r2, #0
   1673c:	mov	r3, r2
   16740:	mla	r7, r7, r5, r1
   16744:	mvnne	r0, #0
   16748:	mvnne	r7, #0
   1674c:	mov	r6, r0
   16750:	b	16f34 <__assert_fail@plt+0x5de0>
   16754:	mvn	r0, #0
   16758:	mvn	r1, #0
   1675c:	mov	r2, r5
   16760:	str	r3, [sp, #24]
   16764:	bl	172c0 <__assert_fail@plt+0x616c>
   16768:	subs	r3, r0, r6
   1676c:	mov	ip, r0
   16770:	umull	r4, r0, r6, r5
   16774:	mov	sl, #0
   16778:	sbcs	r3, r1, r7
   1677c:	str	r0, [sp, #20]
   16780:	ldr	r0, [sp, #24]
   16784:	mov	r3, #0
   16788:	movwcc	r3, #1
   1678c:	cmp	r3, #0
   16790:	mvnne	r4, #0
   16794:	cmp	r3, #0
   16798:	umull	lr, r2, r4, r5
   1679c:	mla	r2, r4, r0, r2
   167a0:	str	r2, [sp, #16]
   167a4:	ldr	r2, [sp, #20]
   167a8:	mla	r6, r6, r0, r2
   167ac:	ldr	r0, [sp, #16]
   167b0:	mla	r6, r7, r5, r6
   167b4:	mvnne	r6, #0
   167b8:	mla	r7, r6, r5, r0
   167bc:	subs	r0, ip, r4
   167c0:	sbcs	r0, r1, r6
   167c4:	movwcc	sl, #1
   167c8:	cmp	sl, #0
   167cc:	orr	r3, r3, sl
   167d0:	mvnne	lr, #0
   167d4:	mvnne	r7, #0
   167d8:	mov	r6, lr
   167dc:	b	16f34 <__assert_fail@plt+0x5de0>
   167e0:	mvn	r0, #0
   167e4:	mvn	r1, #0
   167e8:	mov	r2, r5
   167ec:	mov	sl, r3
   167f0:	bl	172c0 <__assert_fail@plt+0x616c>
   167f4:	subs	r3, r0, r6
   167f8:	mov	ip, r1
   167fc:	umull	r2, lr, r6, r5
   16800:	str	r0, [sp, #20]
   16804:	sbcs	r3, r1, r7
   16808:	mov	r1, #0
   1680c:	mla	r6, r6, sl, lr
   16810:	mov	lr, #0
   16814:	str	ip, [sp, #16]
   16818:	movwcc	r1, #1
   1681c:	mla	r7, r7, r5, r6
   16820:	cmp	r1, #0
   16824:	mvnne	r2, #0
   16828:	cmp	r1, #0
   1682c:	umull	r3, r4, r2, r5
   16830:	mvnne	r7, #0
   16834:	mla	r4, r2, sl, r4
   16838:	subs	r2, r0, r2
   1683c:	sbcs	r2, ip, r7
   16840:	mla	r4, r7, r5, r4
   16844:	movwcc	lr, #1
   16848:	mov	r2, #0
   1684c:	cmp	lr, #0
   16850:	mvnne	r3, #0
   16854:	mvnne	r4, #0
   16858:	subs	r7, r0, r3
   1685c:	mov	r0, r5
   16860:	sbcs	r7, ip, r4
   16864:	movwcc	r2, #1
   16868:	umull	r5, r7, r3, r5
   1686c:	cmp	r2, #0
   16870:	mla	r3, r3, sl, r7
   16874:	mvnne	r5, #0
   16878:	mla	r3, r4, r0, r3
   1687c:	cmp	r2, #0
   16880:	umull	r6, ip, r5, r0
   16884:	mvnne	r3, #0
   16888:	mla	ip, r5, sl, ip
   1688c:	mla	r7, r3, r0, ip
   16890:	ldr	r0, [sp, #20]
   16894:	subs	r0, r0, r5
   16898:	ldr	r0, [sp, #16]
   1689c:	sbcs	r0, r0, r3
   168a0:	mov	r0, #0
   168a4:	movwcc	r0, #1
   168a8:	cmp	r0, #0
   168ac:	mov	r3, r0
   168b0:	orr	r0, r1, lr
   168b4:	orr	r0, r0, r2
   168b8:	mvnne	r7, #0
   168bc:	mvnne	r6, #0
   168c0:	orr	r3, r0, r3
   168c4:	b	16f34 <__assert_fail@plt+0x5de0>
   168c8:	mvn	r0, #0
   168cc:	mvn	r1, #0
   168d0:	mov	r2, r5
   168d4:	mov	r4, r3
   168d8:	str	r3, [sp, #24]
   168dc:	bl	172c0 <__assert_fail@plt+0x616c>
   168e0:	umull	r3, r2, r6, r5
   168e4:	mla	r2, r6, r4, r2
   168e8:	subs	r6, r0, r6
   168ec:	sbcs	r6, r1, r7
   168f0:	mla	r2, r7, r5, r2
   168f4:	mov	r7, #0
   168f8:	mov	r6, #0
   168fc:	movwcc	r6, #1
   16900:	cmp	r6, #0
   16904:	str	r6, [sp, #20]
   16908:	mvnne	r3, #0
   1690c:	mvnne	r2, #0
   16910:	subs	r4, r0, r3
   16914:	umull	r6, ip, r3, r5
   16918:	sbcs	r4, r1, r2
   1691c:	ldr	r4, [sp, #24]
   16920:	movwcc	r7, #1
   16924:	cmp	r7, #0
   16928:	mov	lr, r7
   1692c:	str	r7, [sp, #16]
   16930:	mvnne	r6, #0
   16934:	cmp	lr, #0
   16938:	mov	lr, #0
   1693c:	umull	sl, r7, r6, r5
   16940:	mla	r3, r3, r4, ip
   16944:	mla	r7, r6, r4, r7
   16948:	mov	r4, r0
   1694c:	mla	r2, r2, r5, r3
   16950:	mvnne	r2, #0
   16954:	subs	r3, r0, r6
   16958:	mov	r0, #0
   1695c:	mla	r7, r2, r5, r7
   16960:	sbcs	r2, r1, r2
   16964:	mov	r3, r4
   16968:	movwcc	r0, #1
   1696c:	str	r3, [sp, #4]
   16970:	cmp	r0, #0
   16974:	str	r0, [sp, #12]
   16978:	mov	r0, r1
   1697c:	mvnne	sl, #0
   16980:	mvnne	r7, #0
   16984:	str	r0, [sp, #8]
   16988:	subs	r2, r4, sl
   1698c:	ldr	r4, [sp, #24]
   16990:	sbcs	r2, r1, r7
   16994:	movwcc	lr, #1
   16998:	umull	r6, r2, sl, r5
   1699c:	cmp	lr, #0
   169a0:	mvnne	r6, #0
   169a4:	mla	r2, sl, r4, r2
   169a8:	cmp	lr, #0
   169ac:	umull	r1, ip, r6, r5
   169b0:	mla	r2, r7, r5, r2
   169b4:	mla	ip, r6, r4, ip
   169b8:	mvnne	r2, #0
   169bc:	subs	r6, r3, r6
   169c0:	mla	r7, r2, r5, ip
   169c4:	sbcs	r2, r0, r2
   169c8:	mov	ip, #0
   169cc:	movwcc	ip, #1
   169d0:	mov	r2, #0
   169d4:	cmp	ip, #0
   169d8:	mvnne	r1, #0
   169dc:	mvnne	r7, #0
   169e0:	subs	r6, r3, r1
   169e4:	ldr	r3, [sp, #24]
   169e8:	sbcs	r6, r0, r7
   169ec:	umull	r0, sl, r1, r5
   169f0:	movwcc	r2, #1
   169f4:	cmp	r2, #0
   169f8:	mvnne	r0, #0
   169fc:	mla	r1, r1, r3, sl
   16a00:	cmp	r2, #0
   16a04:	umull	r6, r4, r0, r5
   16a08:	mla	r1, r7, r5, r1
   16a0c:	mla	r4, r0, r3, r4
   16a10:	ldr	r3, [sp, #4]
   16a14:	mvnne	r1, #0
   16a18:	mla	r7, r1, r5, r4
   16a1c:	ldr	r5, [sp, #16]
   16a20:	subs	r0, r3, r0
   16a24:	ldr	r0, [sp, #8]
   16a28:	sbcs	r0, r0, r1
   16a2c:	mov	r0, #0
   16a30:	movwcc	r0, #1
   16a34:	cmp	r0, #0
   16a38:	mov	r1, r0
   16a3c:	ldr	r0, [sp, #20]
   16a40:	mvnne	r7, #0
   16a44:	mvnne	r6, #0
   16a48:	orr	r0, r0, r5
   16a4c:	ldr	r5, [sp, #12]
   16a50:	orr	r0, r0, r5
   16a54:	orr	r0, r0, lr
   16a58:	orr	r0, r0, ip
   16a5c:	orr	r0, r0, r2
   16a60:	b	16ed0 <__assert_fail@plt+0x5d7c>
   16a64:	mov	r1, #0
   16a68:	lsl	r2, r7, #10
   16a6c:	lsl	r0, r6, #10
   16a70:	lsr	r3, r7, #22
   16a74:	cmp	r1, r7, lsr #22
   16a78:	orr	r2, r2, r6, lsr #22
   16a7c:	mvnne	r0, #0
   16a80:	movwne	r3, #1
   16a84:	cmp	r1, r7, lsr #22
   16a88:	b	16f00 <__assert_fail@plt+0x5dac>
   16a8c:	mvn	r0, #0
   16a90:	mvn	r1, #0
   16a94:	mov	r2, r5
   16a98:	mov	sl, r3
   16a9c:	bl	172c0 <__assert_fail@plt+0x616c>
   16aa0:	subs	r2, r0, r6
   16aa4:	mov	ip, r0
   16aa8:	mov	r0, #0
   16aac:	sbcs	r2, r1, r7
   16ab0:	movwcc	r0, #1
   16ab4:	umull	r4, r2, r6, r5
   16ab8:	cmp	r0, #0
   16abc:	mla	r2, r6, sl, r2
   16ac0:	str	r0, [sp, #20]
   16ac4:	mvnne	r4, #0
   16ac8:	cmp	r0, #0
   16acc:	mla	r2, r7, r5, r2
   16ad0:	mov	r0, #0
   16ad4:	umull	lr, r3, r4, r5
   16ad8:	mvnne	r2, #0
   16adc:	mla	r3, r4, sl, r3
   16ae0:	mla	r6, r2, r5, r3
   16ae4:	subs	r3, ip, r4
   16ae8:	sbcs	r2, r1, r2
   16aec:	mov	r3, r1
   16af0:	movwcc	r0, #1
   16af4:	str	r3, [sp, #8]
   16af8:	cmp	r0, #0
   16afc:	str	r0, [sp, #16]
   16b00:	mov	r0, ip
   16b04:	mvnne	lr, #0
   16b08:	mvnne	r6, #0
   16b0c:	str	r0, [sp, #12]
   16b10:	subs	r2, ip, lr
   16b14:	umull	r7, r4, lr, r5
   16b18:	sbcs	r2, r1, r6
   16b1c:	mla	r4, lr, sl, r4
   16b20:	mov	r2, #0
   16b24:	mla	r6, r6, r5, r4
   16b28:	mov	r4, #0
   16b2c:	movwcc	r2, #1
   16b30:	cmp	r2, #0
   16b34:	mvnne	r7, #0
   16b38:	cmp	r2, #0
   16b3c:	umull	r1, ip, r7, r5
   16b40:	mvnne	r6, #0
   16b44:	mla	ip, r7, sl, ip
   16b48:	subs	r7, r0, r7
   16b4c:	mla	lr, r6, r5, ip
   16b50:	sbcs	r7, r3, r6
   16b54:	mov	ip, #0
   16b58:	movwcc	ip, #1
   16b5c:	cmp	ip, #0
   16b60:	mvnne	r1, #0
   16b64:	mvnne	lr, #0
   16b68:	subs	r7, r0, r1
   16b6c:	sbcs	r7, r3, lr
   16b70:	movwcc	r4, #1
   16b74:	umull	r0, r7, r1, r5
   16b78:	cmp	r4, #0
   16b7c:	mla	r1, r1, sl, r7
   16b80:	mvnne	r0, #0
   16b84:	mla	r1, lr, r5, r1
   16b88:	cmp	r4, #0
   16b8c:	umull	r6, r3, r0, r5
   16b90:	mvnne	r1, #0
   16b94:	mla	r3, r0, sl, r3
   16b98:	mla	r7, r1, r5, r3
   16b9c:	ldr	r3, [sp, #12]
   16ba0:	subs	r0, r3, r0
   16ba4:	ldr	r3, [sp, #16]
   16ba8:	ldr	r0, [sp, #8]
   16bac:	sbcs	r0, r0, r1
   16bb0:	mov	r0, #0
   16bb4:	movwcc	r0, #1
   16bb8:	cmp	r0, #0
   16bbc:	mov	r1, r0
   16bc0:	ldr	r0, [sp, #20]
   16bc4:	mvnne	r7, #0
   16bc8:	mvnne	r6, #0
   16bcc:	orr	r0, r0, r3
   16bd0:	orr	r0, r0, r2
   16bd4:	orr	r0, r0, ip
   16bd8:	orr	r0, r0, r4
   16bdc:	b	16d00 <__assert_fail@plt+0x5bac>
   16be0:	mvn	r0, #0
   16be4:	mvn	r1, #0
   16be8:	mov	r2, r5
   16bec:	mov	sl, r3
   16bf0:	bl	172c0 <__assert_fail@plt+0x616c>
   16bf4:	umull	r3, r2, r6, r5
   16bf8:	mov	lr, r1
   16bfc:	mov	r1, r0
   16c00:	mla	r2, r6, sl, r2
   16c04:	subs	r6, r0, r6
   16c08:	mov	r0, #0
   16c0c:	sbcs	r6, lr, r7
   16c10:	mla	r2, r7, r5, r2
   16c14:	movwcc	r0, #1
   16c18:	cmp	r0, #0
   16c1c:	str	r0, [sp, #20]
   16c20:	mov	r0, r1
   16c24:	mvnne	r3, #0
   16c28:	mvnne	r2, #0
   16c2c:	str	r0, [sp, #16]
   16c30:	subs	r4, r1, r3
   16c34:	umull	r7, ip, r3, r5
   16c38:	sbcs	r4, lr, r2
   16c3c:	mla	r3, r3, sl, ip
   16c40:	mov	ip, #0
   16c44:	mov	r4, #0
   16c48:	mla	r2, r2, r5, r3
   16c4c:	movwcc	r4, #1
   16c50:	cmp	r4, #0
   16c54:	mvnne	r7, #0
   16c58:	cmp	r4, #0
   16c5c:	umull	r1, r6, r7, r5
   16c60:	mvnne	r2, #0
   16c64:	mla	r6, r7, sl, r6
   16c68:	mla	r3, r2, r5, r6
   16c6c:	subs	r6, r0, r7
   16c70:	sbcs	r2, lr, r2
   16c74:	movwcc	ip, #1
   16c78:	mov	r2, #0
   16c7c:	cmp	ip, #0
   16c80:	mvnne	r1, #0
   16c84:	mvnne	r3, #0
   16c88:	subs	r6, r0, r1
   16c8c:	sbcs	r6, lr, r3
   16c90:	movwcc	r2, #1
   16c94:	umull	r0, r6, r1, r5
   16c98:	cmp	r2, #0
   16c9c:	str	r6, [sp, #12]
   16ca0:	mvnne	r0, #0
   16ca4:	cmp	r2, #0
   16ca8:	umull	r6, r7, r0, r5
   16cac:	mla	r7, r0, sl, r7
   16cb0:	str	r7, [sp, #8]
   16cb4:	ldr	r7, [sp, #12]
   16cb8:	mla	r1, r1, sl, r7
   16cbc:	mla	r1, r3, r5, r1
   16cc0:	ldr	r3, [sp, #8]
   16cc4:	mvnne	r1, #0
   16cc8:	mla	r7, r1, r5, r3
   16ccc:	ldr	r3, [sp, #16]
   16cd0:	subs	r0, r3, r0
   16cd4:	sbcs	r0, lr, r1
   16cd8:	mov	r0, #0
   16cdc:	movwcc	r0, #1
   16ce0:	cmp	r0, #0
   16ce4:	mov	r1, r0
   16ce8:	ldr	r0, [sp, #20]
   16cec:	mvnne	r7, #0
   16cf0:	mvnne	r6, #0
   16cf4:	orr	r0, r0, r4
   16cf8:	orr	r0, r0, ip
   16cfc:	orr	r0, r0, r2
   16d00:	orr	r3, r0, r1
   16d04:	b	16f34 <__assert_fail@plt+0x5de0>
   16d08:	mvn	r0, #0
   16d0c:	mvn	r1, #0
   16d10:	mov	r2, r5
   16d14:	mov	sl, r3
   16d18:	bl	172c0 <__assert_fail@plt+0x616c>
   16d1c:	mov	ip, r1
   16d20:	subs	r1, r0, r6
   16d24:	umull	r3, lr, r6, r5
   16d28:	mov	r2, r5
   16d2c:	sbcs	r1, ip, r7
   16d30:	mla	r6, r6, sl, lr
   16d34:	str	ip, [sp, #4]
   16d38:	mov	r1, #0
   16d3c:	mla	r7, r7, r2, r6
   16d40:	movwcc	r1, #1
   16d44:	cmp	r1, #0
   16d48:	str	r1, [sp, #20]
   16d4c:	mvnne	r3, #0
   16d50:	cmp	r1, #0
   16d54:	mov	r1, r0
   16d58:	umull	r4, r5, r3, r5
   16d5c:	mvnne	r7, #0
   16d60:	mov	lr, r1
   16d64:	mla	r5, r3, sl, r5
   16d68:	subs	r3, r0, r3
   16d6c:	sbcs	r0, ip, r7
   16d70:	mla	r5, r7, r2, r5
   16d74:	mov	r0, #0
   16d78:	movwcc	r0, #1
   16d7c:	cmp	r0, #0
   16d80:	str	r0, [sp, #16]
   16d84:	mvnne	r4, #0
   16d88:	mvnne	r5, #0
   16d8c:	subs	r0, r1, r4
   16d90:	mov	r1, #0
   16d94:	sbcs	r0, ip, r5
   16d98:	movwcc	r1, #1
   16d9c:	umull	r3, r0, r4, r2
   16da0:	cmp	r1, #0
   16da4:	mla	r0, r4, sl, r0
   16da8:	mov	r4, lr
   16dac:	str	r1, [sp, #12]
   16db0:	mvnne	r3, #0
   16db4:	mla	r0, r5, r2, r0
   16db8:	cmp	r1, #0
   16dbc:	str	r4, [sp]
   16dc0:	umull	r7, r6, r3, r2
   16dc4:	mvnne	r0, #0
   16dc8:	mla	r6, r3, sl, r6
   16dcc:	subs	r3, lr, r3
   16dd0:	mla	r5, r0, r2, r6
   16dd4:	sbcs	r0, ip, r0
   16dd8:	mov	r3, #0
   16ddc:	mov	r0, #0
   16de0:	movwcc	r0, #1
   16de4:	cmp	r0, #0
   16de8:	str	r0, [sp, #8]
   16dec:	mvnne	r7, #0
   16df0:	mvnne	r5, #0
   16df4:	subs	r0, lr, r7
   16df8:	sbcs	r0, ip, r5
   16dfc:	movwcc	r3, #1
   16e00:	umull	r6, r0, r7, r2
   16e04:	cmp	r3, #0
   16e08:	mla	r7, r7, sl, r0
   16e0c:	mov	r0, ip
   16e10:	mvnne	r6, #0
   16e14:	mla	r7, r5, r2, r7
   16e18:	cmp	r3, #0
   16e1c:	mov	r5, #0
   16e20:	umull	r1, lr, r6, r2
   16e24:	mvnne	r7, #0
   16e28:	mla	lr, r6, sl, lr
   16e2c:	subs	r6, r4, r6
   16e30:	mla	lr, r7, r2, lr
   16e34:	sbcs	r7, ip, r7
   16e38:	mov	ip, #0
   16e3c:	movwcc	ip, #1
   16e40:	cmp	ip, #0
   16e44:	mvnne	r1, #0
   16e48:	mvnne	lr, #0
   16e4c:	subs	r7, r4, r1
   16e50:	sbcs	r7, r0, lr
   16e54:	movwcc	r5, #1
   16e58:	umull	r0, r7, r1, r2
   16e5c:	cmp	r5, #0
   16e60:	mla	r1, r1, sl, r7
   16e64:	mvnne	r0, #0
   16e68:	mla	r1, lr, r2, r1
   16e6c:	cmp	r5, #0
   16e70:	umull	r6, r4, r0, r2
   16e74:	mvnne	r1, #0
   16e78:	mla	r4, r0, sl, r4
   16e7c:	mla	r7, r1, r2, r4
   16e80:	ldr	r2, [sp]
   16e84:	subs	r0, r2, r0
   16e88:	ldr	r2, [sp, #16]
   16e8c:	ldr	r0, [sp, #4]
   16e90:	sbcs	r0, r0, r1
   16e94:	mov	r0, #0
   16e98:	movwcc	r0, #1
   16e9c:	cmp	r0, #0
   16ea0:	mov	r1, r0
   16ea4:	ldr	r0, [sp, #20]
   16ea8:	mvnne	r7, #0
   16eac:	mvnne	r6, #0
   16eb0:	orr	r0, r0, r2
   16eb4:	ldr	r2, [sp, #12]
   16eb8:	orr	r0, r0, r2
   16ebc:	ldr	r2, [sp, #8]
   16ec0:	orr	r0, r0, r2
   16ec4:	orr	r0, r0, r3
   16ec8:	orr	r0, r0, ip
   16ecc:	orr	r0, r0, r5
   16ed0:	orr	r0, r0, r1
   16ed4:	and	r3, r0, #1
   16ed8:	b	16f34 <__assert_fail@plt+0x5de0>
   16edc:	mov	r1, #0
   16ee0:	lsl	r2, r7, #9
   16ee4:	lsl	r0, r6, #9
   16ee8:	lsr	r3, r7, #23
   16eec:	cmp	r1, r7, lsr #23
   16ef0:	orr	r2, r2, r6, lsr #23
   16ef4:	mvnne	r0, #0
   16ef8:	movwne	r3, #1
   16efc:	cmp	r1, r7, lsr #23
   16f00:	mvnne	r2, #0
   16f04:	mov	r6, r0
   16f08:	mov	r7, r2
   16f0c:	b	16f34 <__assert_fail@plt+0x5de0>
   16f10:	lsl	r1, r7, #1
   16f14:	lsl	r0, r6, #1
   16f18:	cmp	r7, #0
   16f1c:	lsr	r3, r7, #31
   16f20:	orr	r1, r1, r6, lsr #31
   16f24:	mvnlt	r0, #0
   16f28:	mvnlt	r1, #0
   16f2c:	mov	r6, r0
   16f30:	mov	r7, r1
   16f34:	ldr	r1, [sp, #32]
   16f38:	ldr	r2, [sp, #28]
   16f3c:	orr	r8, r3, r8
   16f40:	add	r0, r1, r2
   16f44:	str	r0, [r9]
   16f48:	ldrb	r0, [r1, r2]
   16f4c:	cmp	r0, #0
   16f50:	orrne	r8, r8, #2
   16f54:	ldr	r0, [sp, #36]	; 0x24
   16f58:	strd	r6, [r0]
   16f5c:	mov	r0, r8
   16f60:	sub	sp, fp, #28
   16f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f68:	movw	r0, #33889	; 0x8461
   16f6c:	movw	r1, #33927	; 0x8487
   16f70:	movw	r3, #33943	; 0x8497
   16f74:	mov	r2, #85	; 0x55
   16f78:	movt	r0, #1
   16f7c:	movt	r1, #1
   16f80:	movt	r3, #1
   16f84:	bl	11154 <__assert_fail@plt>
   16f88:	clz	r2, r1
   16f8c:	clz	r3, r0
   16f90:	lsr	r2, r2, #5
   16f94:	lsr	r3, r3, #5
   16f98:	orrs	r2, r3, r2
   16f9c:	movwne	r1, #1
   16fa0:	movwne	r0, #1
   16fa4:	cmp	r1, #0
   16fa8:	beq	16fd8 <__assert_fail@plt+0x5e84>
   16fac:	mvn	r2, #-2147483648	; 0x80000000
   16fb0:	udiv	r2, r2, r1
   16fb4:	cmp	r2, r0
   16fb8:	bcs	16fd8 <__assert_fail@plt+0x5e84>
   16fbc:	push	{fp, lr}
   16fc0:	mov	fp, sp
   16fc4:	bl	11088 <__errno_location@plt>
   16fc8:	mov	r1, #12
   16fcc:	str	r1, [r0]
   16fd0:	mov	r0, #0
   16fd4:	pop	{fp, pc}
   16fd8:	b	10ec0 <calloc@plt>
   16fdc:	cmp	r0, #0
   16fe0:	movweq	r0, #1
   16fe4:	cmn	r0, #1
   16fe8:	ble	16ff0 <__assert_fail@plt+0x5e9c>
   16fec:	b	11004 <malloc@plt>
   16ff0:	push	{fp, lr}
   16ff4:	mov	fp, sp
   16ff8:	bl	11088 <__errno_location@plt>
   16ffc:	mov	r1, #12
   17000:	str	r1, [r0]
   17004:	mov	r0, #0
   17008:	pop	{fp, pc}
   1700c:	push	{fp, lr}
   17010:	mov	fp, sp
   17014:	cmp	r0, #0
   17018:	beq	17034 <__assert_fail@plt+0x5ee0>
   1701c:	cmp	r1, #0
   17020:	beq	17040 <__assert_fail@plt+0x5eec>
   17024:	cmn	r1, #1
   17028:	ble	1704c <__assert_fail@plt+0x5ef8>
   1702c:	pop	{fp, lr}
   17030:	b	10f80 <realloc@plt>
   17034:	mov	r0, r1
   17038:	pop	{fp, lr}
   1703c:	b	16fdc <__assert_fail@plt+0x5e88>
   17040:	bl	13088 <__assert_fail@plt+0x1f34>
   17044:	mov	r0, #0
   17048:	pop	{fp, pc}
   1704c:	bl	11088 <__errno_location@plt>
   17050:	mov	r1, #12
   17054:	str	r1, [r0]
   17058:	mov	r0, #0
   1705c:	pop	{fp, pc}
   17060:	push	{r4, r5, r6, sl, fp, lr}
   17064:	add	fp, sp, #16
   17068:	mov	r4, r0
   1706c:	bl	10fc8 <__fpending@plt>
   17070:	ldr	r6, [r4]
   17074:	mov	r5, r0
   17078:	mov	r0, r4
   1707c:	bl	12f84 <__assert_fail@plt+0x1e30>
   17080:	tst	r6, #32
   17084:	bne	170bc <__assert_fail@plt+0x5f68>
   17088:	cmp	r0, #0
   1708c:	mov	r4, r0
   17090:	mvnne	r4, #0
   17094:	cmp	r5, #0
   17098:	bne	170c8 <__assert_fail@plt+0x5f74>
   1709c:	cmp	r0, #0
   170a0:	beq	170c8 <__assert_fail@plt+0x5f74>
   170a4:	bl	11088 <__errno_location@plt>
   170a8:	ldr	r0, [r0]
   170ac:	subs	r4, r0, #9
   170b0:	mvnne	r4, #0
   170b4:	mov	r0, r4
   170b8:	pop	{r4, r5, r6, sl, fp, pc}
   170bc:	mvn	r4, #0
   170c0:	cmp	r0, #0
   170c4:	beq	170d0 <__assert_fail@plt+0x5f7c>
   170c8:	mov	r0, r4
   170cc:	pop	{r4, r5, r6, sl, fp, pc}
   170d0:	bl	11088 <__errno_location@plt>
   170d4:	mov	r1, #0
   170d8:	str	r1, [r0]
   170dc:	mov	r0, r4
   170e0:	pop	{r4, r5, r6, sl, fp, pc}
   170e4:	push	{fp, lr}
   170e8:	mov	fp, sp
   170ec:	mov	r0, #14
   170f0:	bl	11118 <nl_langinfo@plt>
   170f4:	movw	r1, #32208	; 0x7dd0
   170f8:	cmp	r0, #0
   170fc:	movt	r1, #1
   17100:	movne	r1, r0
   17104:	movw	r0, #34022	; 0x84e6
   17108:	ldrb	r2, [r1]
   1710c:	movt	r0, #1
   17110:	cmp	r2, #0
   17114:	movne	r0, r1
   17118:	pop	{fp, pc}
   1711c:	push	{r4, r5, r6, r7, fp, lr}
   17120:	add	fp, sp, #16
   17124:	sub	sp, sp, #8
   17128:	add	r5, sp, #4
   1712c:	cmp	r0, #0
   17130:	mov	r7, r2
   17134:	mov	r4, r1
   17138:	movne	r5, r0
   1713c:	mov	r0, r5
   17140:	bl	10fd4 <mbrtowc@plt>
   17144:	mov	r6, r0
   17148:	cmp	r7, #0
   1714c:	beq	17170 <__assert_fail@plt+0x601c>
   17150:	cmn	r6, #2
   17154:	bcc	17170 <__assert_fail@plt+0x601c>
   17158:	mov	r0, #0
   1715c:	bl	171b8 <__assert_fail@plt+0x6064>
   17160:	cmp	r0, #0
   17164:	ldrbeq	r0, [r4]
   17168:	moveq	r6, #1
   1716c:	streq	r0, [r5]
   17170:	mov	r0, r6
   17174:	sub	sp, fp, #16
   17178:	pop	{r4, r5, r6, r7, fp, pc}
   1717c:	cmp	r2, #0
   17180:	beq	171b0 <__assert_fail@plt+0x605c>
   17184:	mvn	r3, #0
   17188:	udiv	r3, r3, r2
   1718c:	cmp	r3, r1
   17190:	bcs	171b0 <__assert_fail@plt+0x605c>
   17194:	push	{fp, lr}
   17198:	mov	fp, sp
   1719c:	bl	11088 <__errno_location@plt>
   171a0:	mov	r1, #12
   171a4:	str	r1, [r0]
   171a8:	mov	r0, #0
   171ac:	pop	{fp, pc}
   171b0:	mul	r1, r2, r1
   171b4:	b	1700c <__assert_fail@plt+0x5eb8>
   171b8:	push	{r4, sl, fp, lr}
   171bc:	add	fp, sp, #8
   171c0:	sub	sp, sp, #264	; 0x108
   171c4:	add	r1, sp, #7
   171c8:	movw	r2, #257	; 0x101
   171cc:	bl	1721c <__assert_fail@plt+0x60c8>
   171d0:	mov	r4, #0
   171d4:	cmp	r0, #0
   171d8:	bne	17210 <__assert_fail@plt+0x60bc>
   171dc:	movw	r1, #34028	; 0x84ec
   171e0:	add	r0, sp, #7
   171e4:	movt	r1, #1
   171e8:	bl	10ee4 <strcmp@plt>
   171ec:	cmp	r0, #0
   171f0:	beq	17210 <__assert_fail@plt+0x60bc>
   171f4:	movw	r1, #34030	; 0x84ee
   171f8:	add	r0, sp, #7
   171fc:	movt	r1, #1
   17200:	bl	10ee4 <strcmp@plt>
   17204:	mov	r4, r0
   17208:	cmp	r0, #0
   1720c:	movwne	r4, #1
   17210:	mov	r0, r4
   17214:	sub	sp, fp, #8
   17218:	pop	{r4, sl, fp, pc}
   1721c:	push	{r4, r5, r6, r7, fp, lr}
   17220:	add	fp, sp, #16
   17224:	mov	r4, r1
   17228:	mov	r1, #0
   1722c:	mov	r6, r2
   17230:	bl	11100 <setlocale@plt>
   17234:	cmp	r0, #0
   17238:	beq	17268 <__assert_fail@plt+0x6114>
   1723c:	mov	r7, r0
   17240:	bl	11070 <strlen@plt>
   17244:	cmp	r0, r6
   17248:	bcs	17288 <__assert_fail@plt+0x6134>
   1724c:	add	r2, r0, #1
   17250:	mov	r0, r4
   17254:	mov	r1, r7
   17258:	bl	10f2c <memcpy@plt>
   1725c:	mov	r5, #0
   17260:	mov	r0, r5
   17264:	pop	{r4, r5, r6, r7, fp, pc}
   17268:	cmp	r6, #0
   1726c:	mov	r5, #22
   17270:	movne	r0, #0
   17274:	strbne	r0, [r4]
   17278:	movne	r0, r5
   1727c:	popne	{r4, r5, r6, r7, fp, pc}
   17280:	mov	r0, r5
   17284:	pop	{r4, r5, r6, r7, fp, pc}
   17288:	mov	r5, #34	; 0x22
   1728c:	cmp	r6, #0
   17290:	beq	172b0 <__assert_fail@plt+0x615c>
   17294:	sub	r6, r6, #1
   17298:	mov	r0, r4
   1729c:	mov	r1, r7
   172a0:	mov	r2, r6
   172a4:	bl	10f2c <memcpy@plt>
   172a8:	mov	r0, #0
   172ac:	strb	r0, [r4, r6]
   172b0:	mov	r0, r5
   172b4:	pop	{r4, r5, r6, r7, fp, pc}
   172b8:	mov	r1, #0
   172bc:	b	11100 <setlocale@plt>
   172c0:	cmp	r3, #0
   172c4:	cmpeq	r2, #0
   172c8:	bne	172e0 <__assert_fail@plt+0x618c>
   172cc:	cmp	r1, #0
   172d0:	cmpeq	r0, #0
   172d4:	mvnne	r1, #0
   172d8:	mvnne	r0, #0
   172dc:	b	172fc <__assert_fail@plt+0x61a8>
   172e0:	sub	sp, sp, #8
   172e4:	push	{sp, lr}
   172e8:	bl	1730c <__assert_fail@plt+0x61b8>
   172ec:	ldr	lr, [sp, #4]
   172f0:	add	sp, sp, #8
   172f4:	pop	{r2, r3}
   172f8:	bx	lr
   172fc:	push	{r1, lr}
   17300:	mov	r0, #8
   17304:	bl	10ed8 <raise@plt>
   17308:	pop	{r1, pc}
   1730c:	cmp	r1, r3
   17310:	cmpeq	r0, r2
   17314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17318:	mov	r4, r0
   1731c:	movcc	r0, #0
   17320:	mov	r5, r1
   17324:	ldr	lr, [sp, #36]	; 0x24
   17328:	movcc	r1, r0
   1732c:	bcc	17428 <__assert_fail@plt+0x62d4>
   17330:	cmp	r3, #0
   17334:	clzeq	ip, r2
   17338:	clzne	ip, r3
   1733c:	addeq	ip, ip, #32
   17340:	cmp	r5, #0
   17344:	clzeq	r1, r4
   17348:	addeq	r1, r1, #32
   1734c:	clzne	r1, r5
   17350:	sub	ip, ip, r1
   17354:	sub	sl, ip, #32
   17358:	lsl	r9, r3, ip
   1735c:	rsb	fp, ip, #32
   17360:	orr	r9, r9, r2, lsl sl
   17364:	orr	r9, r9, r2, lsr fp
   17368:	lsl	r8, r2, ip
   1736c:	cmp	r5, r9
   17370:	cmpeq	r4, r8
   17374:	movcc	r0, #0
   17378:	movcc	r1, r0
   1737c:	bcc	17398 <__assert_fail@plt+0x6244>
   17380:	mov	r0, #1
   17384:	subs	r4, r4, r8
   17388:	lsl	r1, r0, sl
   1738c:	orr	r1, r1, r0, lsr fp
   17390:	lsl	r0, r0, ip
   17394:	sbc	r5, r5, r9
   17398:	cmp	ip, #0
   1739c:	beq	17428 <__assert_fail@plt+0x62d4>
   173a0:	lsr	r6, r8, #1
   173a4:	orr	r6, r6, r9, lsl #31
   173a8:	lsr	r7, r9, #1
   173ac:	mov	r2, ip
   173b0:	b	173d4 <__assert_fail@plt+0x6280>
   173b4:	subs	r3, r4, r6
   173b8:	sbc	r8, r5, r7
   173bc:	adds	r3, r3, r3
   173c0:	adc	r8, r8, r8
   173c4:	adds	r4, r3, #1
   173c8:	adc	r5, r8, #0
   173cc:	subs	r2, r2, #1
   173d0:	beq	173f0 <__assert_fail@plt+0x629c>
   173d4:	cmp	r5, r7
   173d8:	cmpeq	r4, r6
   173dc:	bcs	173b4 <__assert_fail@plt+0x6260>
   173e0:	adds	r4, r4, r4
   173e4:	adc	r5, r5, r5
   173e8:	subs	r2, r2, #1
   173ec:	bne	173d4 <__assert_fail@plt+0x6280>
   173f0:	lsr	r3, r4, ip
   173f4:	orr	r3, r3, r5, lsl fp
   173f8:	lsr	r2, r5, ip
   173fc:	orr	r3, r3, r5, lsr sl
   17400:	adds	r0, r0, r4
   17404:	mov	r4, r3
   17408:	lsl	r3, r2, ip
   1740c:	orr	r3, r3, r4, lsl sl
   17410:	lsl	ip, r4, ip
   17414:	orr	r3, r3, r4, lsr fp
   17418:	adc	r1, r1, r5
   1741c:	subs	r0, r0, ip
   17420:	mov	r5, r2
   17424:	sbc	r1, r1, r3
   17428:	cmp	lr, #0
   1742c:	strdne	r4, [lr]
   17430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17434:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17438:	mov	r7, r0
   1743c:	ldr	r6, [pc, #72]	; 1748c <__assert_fail@plt+0x6338>
   17440:	ldr	r5, [pc, #72]	; 17490 <__assert_fail@plt+0x633c>
   17444:	add	r6, pc, r6
   17448:	add	r5, pc, r5
   1744c:	sub	r6, r6, r5
   17450:	mov	r8, r1
   17454:	mov	r9, r2
   17458:	bl	10ea0 <calloc@plt-0x20>
   1745c:	asrs	r6, r6, #2
   17460:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17464:	mov	r4, #0
   17468:	add	r4, r4, #1
   1746c:	ldr	r3, [r5], #4
   17470:	mov	r2, r9
   17474:	mov	r1, r8
   17478:	mov	r0, r7
   1747c:	blx	r3
   17480:	cmp	r6, r4
   17484:	bne	17468 <__assert_fail@plt+0x6314>
   17488:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1748c:	andeq	r1, r1, r0, asr #21
   17490:			; <UNDEFINED> instruction: 0x00011ab8
   17494:	bx	lr
   17498:	ldr	r3, [pc, #12]	; 174ac <__assert_fail@plt+0x6358>
   1749c:	mov	r1, #0
   174a0:	add	r3, pc, r3
   174a4:	ldr	r2, [r3]
   174a8:	b	11094 <__cxa_atexit@plt>
   174ac:	andeq	r1, r1, ip, asr #24

Disassembly of section .fini:

000174b0 <.fini>:
   174b0:	push	{r3, lr}
   174b4:	pop	{r3, pc}
