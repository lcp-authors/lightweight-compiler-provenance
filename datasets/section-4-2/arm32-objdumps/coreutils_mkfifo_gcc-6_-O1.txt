
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

000113ec <.init>:
   113ec:	push	{r3, lr}
   113f0:	bl	11874 <__assert_fail@plt+0x48>
   113f4:	pop	{r3, pc}

Disassembly of section .plt:

000113f8 <fstatfs64@plt-0x14>:
   113f8:	push	{lr}		; (str lr, [sp, #-4]!)
   113fc:	ldr	lr, [pc, #4]	; 11408 <fstatfs64@plt-0x4>
   11400:	add	lr, pc, lr
   11404:	ldr	pc, [lr, #8]!
   11408:	strdeq	sl, [r1], -r8

0001140c <fstatfs64@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3064]!	; 0xbf8

00011418 <selabel_lookup@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3056]!	; 0xbf0

00011424 <calloc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011430 <fputs_unlocked@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3040]!	; 0xbe0

0001143c <raise@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3032]!	; 0xbd8

00011448 <is_selinux_enabled@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3024]!	; 0xbd0

00011454 <strcmp@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011460 <context_type_get@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3008]!	; 0xbc0

0001146c <fflush@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3000]!	; 0xbb8

00011478 <lsetfilecon@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #2992]!	; 0xbb0

00011484 <memmove@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #2984]!	; 0xba8

00011490 <free@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #2976]!	; 0xba0

0001149c <faccessat@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #2968]!	; 0xb98

000114a8 <_exit@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #2960]!	; 0xb90

000114b4 <memcpy@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #2952]!	; 0xb88

000114c0 <mbsinit@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #2944]!	; 0xb80

000114cc <context_new@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #2936]!	; 0xb78

000114d8 <memcmp@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #2928]!	; 0xb70

000114e4 <fputc_unlocked@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #2920]!	; 0xb68

000114f0 <dcgettext@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #2912]!	; 0xb60

000114fc <context_type_set@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #2904]!	; 0xb58

00011508 <realloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #2896]!	; 0xb50

00011514 <fgetfilecon@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #2888]!	; 0xb48

00011520 <textdomain@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #2880]!	; 0xb40

0001152c <rawmemchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #2872]!	; 0xb38

00011538 <__fxstatat64@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #2864]!	; 0xb30

00011544 <iswprint@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #2856]!	; 0xb28

00011550 <__fxstat64@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #2848]!	; 0xb20

0001155c <readlink@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #2840]!	; 0xb18

00011568 <fwrite@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #2832]!	; 0xb10

00011574 <lseek64@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #2824]!	; 0xb08

00011580 <__ctype_get_mb_cur_max@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2816]!	; 0xb00

0001158c <getcon@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2808]!	; 0xaf8

00011598 <__fpending@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2800]!	; 0xaf0

000115a4 <mbrtowc@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2792]!	; 0xae8

000115b0 <error@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2784]!	; 0xae0

000115bc <open64@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2776]!	; 0xad8

000115c8 <lgetfilecon@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2768]!	; 0xad0

000115d4 <malloc@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #106496	; 0x1a000
   115dc:	ldr	pc, [ip, #2760]!	; 0xac8

000115e0 <__libc_start_main@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #106496	; 0x1a000
   115e8:	ldr	pc, [ip, #2752]!	; 0xac0

000115ec <__freading@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #106496	; 0x1a000
   115f4:	ldr	pc, [ip, #2744]!	; 0xab8

000115f8 <__gmon_start__@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #106496	; 0x1a000
   11600:	ldr	pc, [ip, #2736]!	; 0xab0

00011604 <context_free@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #106496	; 0x1a000
   1160c:	ldr	pc, [ip, #2728]!	; 0xaa8

00011610 <mempcpy@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #106496	; 0x1a000
   11618:	ldr	pc, [ip, #2720]!	; 0xaa0

0001161c <getopt_long@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #106496	; 0x1a000
   11624:	ldr	pc, [ip, #2712]!	; 0xa98

00011628 <__ctype_b_loc@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #106496	; 0x1a000
   11630:	ldr	pc, [ip, #2704]!	; 0xa90

00011634 <getcwd@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #106496	; 0x1a000
   1163c:	ldr	pc, [ip, #2696]!	; 0xa88

00011640 <exit@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #106496	; 0x1a000
   11648:	ldr	pc, [ip, #2688]!	; 0xa80

0001164c <getfilecon@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #106496	; 0x1a000
   11654:	ldr	pc, [ip, #2680]!	; 0xa78

00011658 <strlen@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #106496	; 0x1a000
   11660:	ldr	pc, [ip, #2672]!	; 0xa70

00011664 <selabel_open@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #106496	; 0x1a000
   1166c:	ldr	pc, [ip, #2664]!	; 0xa68

00011670 <openat64@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #106496	; 0x1a000
   11678:	ldr	pc, [ip, #2656]!	; 0xa60

0001167c <setfscreatecon@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #106496	; 0x1a000
   11684:	ldr	pc, [ip, #2648]!	; 0xa58

00011688 <__errno_location@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #106496	; 0x1a000
   11690:	ldr	pc, [ip, #2640]!	; 0xa50

00011694 <__sprintf_chk@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #106496	; 0x1a000
   1169c:	ldr	pc, [ip, #2632]!	; 0xa48

000116a0 <__cxa_atexit@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #106496	; 0x1a000
   116a8:	ldr	pc, [ip, #2624]!	; 0xa40

000116ac <memset@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #106496	; 0x1a000
   116b4:	ldr	pc, [ip, #2616]!	; 0xa38

000116b8 <__printf_chk@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #106496	; 0x1a000
   116c0:	ldr	pc, [ip, #2608]!	; 0xa30

000116c4 <fileno@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #106496	; 0x1a000
   116cc:	ldr	pc, [ip, #2600]!	; 0xa28

000116d0 <__fprintf_chk@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #106496	; 0x1a000
   116d8:	ldr	pc, [ip, #2592]!	; 0xa20

000116dc <fclose@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #106496	; 0x1a000
   116e4:	ldr	pc, [ip, #2584]!	; 0xa18

000116e8 <fseeko64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #106496	; 0x1a000
   116f0:	ldr	pc, [ip, #2576]!	; 0xa10

000116f4 <fcntl64@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #106496	; 0x1a000
   116fc:	ldr	pc, [ip, #2568]!	; 0xa08

00011700 <setlocale@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #106496	; 0x1a000
   11708:	ldr	pc, [ip, #2560]!	; 0xa00

0001170c <fsetfilecon@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #106496	; 0x1a000
   11714:	ldr	pc, [ip, #2552]!	; 0x9f8

00011718 <strrchr@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #106496	; 0x1a000
   11720:	ldr	pc, [ip, #2544]!	; 0x9f0

00011724 <nl_langinfo@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #106496	; 0x1a000
   1172c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011730 <readdir64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #106496	; 0x1a000
   11738:	ldr	pc, [ip, #2528]!	; 0x9e0

0001173c <fdopendir@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #106496	; 0x1a000
   11744:	ldr	pc, [ip, #2520]!	; 0x9d8

00011748 <security_compute_create@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #106496	; 0x1a000
   11750:	ldr	pc, [ip, #2512]!	; 0x9d0

00011754 <dirfd@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #106496	; 0x1a000
   1175c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011760 <fchdir@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #106496	; 0x1a000
   11768:	ldr	pc, [ip, #2496]!	; 0x9c0

0001176c <qsort@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #106496	; 0x1a000
   11774:	ldr	pc, [ip, #2488]!	; 0x9b8

00011778 <freecon@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #106496	; 0x1a000
   11780:	ldr	pc, [ip, #2480]!	; 0x9b0

00011784 <bindtextdomain@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #106496	; 0x1a000
   1178c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011790 <getfscreatecon@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #106496	; 0x1a000
   11798:	ldr	pc, [ip, #2464]!	; 0x9a0

0001179c <umask@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #106496	; 0x1a000
   117a4:	ldr	pc, [ip, #2456]!	; 0x998

000117a8 <context_str@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #106496	; 0x1a000
   117b0:	ldr	pc, [ip, #2448]!	; 0x990

000117b4 <chmod@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #106496	; 0x1a000
   117bc:	ldr	pc, [ip, #2440]!	; 0x988

000117c0 <__xstat64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #106496	; 0x1a000
   117c8:	ldr	pc, [ip, #2432]!	; 0x980

000117cc <strncmp@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #106496	; 0x1a000
   117d4:	ldr	pc, [ip, #2424]!	; 0x978

000117d8 <abort@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #106496	; 0x1a000
   117e0:	ldr	pc, [ip, #2416]!	; 0x970

000117e4 <close@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #106496	; 0x1a000
   117ec:	ldr	pc, [ip, #2408]!	; 0x968

000117f0 <__lxstat64@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #106496	; 0x1a000
   117f8:	ldr	pc, [ip, #2400]!	; 0x960

000117fc <mkfifo@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #106496	; 0x1a000
   11804:	ldr	pc, [ip, #2392]!	; 0x958

00011808 <mode_to_security_class@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #106496	; 0x1a000
   11810:	ldr	pc, [ip, #2384]!	; 0x950

00011814 <closedir@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #106496	; 0x1a000
   1181c:	ldr	pc, [ip, #2376]!	; 0x948

00011820 <strspn@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #106496	; 0x1a000
   11828:	ldr	pc, [ip, #2368]!	; 0x940

0001182c <__assert_fail@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #106496	; 0x1a000
   11834:	ldr	pc, [ip, #2360]!	; 0x938

Disassembly of section .text:

00011838 <lchmod@@Base-0x4c50>:
   11838:	mov	fp, #0
   1183c:	mov	lr, #0
   11840:	pop	{r1}		; (ldr r1, [sp], #4)
   11844:	mov	r2, sp
   11848:	push	{r2}		; (str r2, [sp, #-4]!)
   1184c:	push	{r0}		; (str r0, [sp, #-4]!)
   11850:	ldr	ip, [pc, #16]	; 11868 <__assert_fail@plt+0x3c>
   11854:	push	{ip}		; (str ip, [sp, #-4]!)
   11858:	ldr	r0, [pc, #12]	; 1186c <__assert_fail@plt+0x40>
   1185c:	ldr	r3, [pc, #12]	; 11870 <__assert_fail@plt+0x44>
   11860:	bl	115e0 <__libc_start_main@plt>
   11864:	bl	117d8 <abort@plt>
   11868:	muleq	r1, r0, r4
   1186c:	andeq	r1, r1, r0, asr #25
   11870:	andeq	sl, r1, r0, lsr r4
   11874:	ldr	r3, [pc, #20]	; 11890 <__assert_fail@plt+0x64>
   11878:	ldr	r2, [pc, #20]	; 11894 <__assert_fail@plt+0x68>
   1187c:	add	r3, pc, r3
   11880:	ldr	r2, [r3, r2]
   11884:	cmp	r2, #0
   11888:	bxeq	lr
   1188c:	b	115f8 <__gmon_start__@plt>
   11890:	andeq	sl, r1, ip, ror r7
   11894:	andeq	r0, r0, r0, ror r1
   11898:	ldr	r3, [pc, #28]	; 118bc <__assert_fail@plt+0x90>
   1189c:	ldr	r0, [pc, #28]	; 118c0 <__assert_fail@plt+0x94>
   118a0:	sub	r3, r3, r0
   118a4:	cmp	r3, #6
   118a8:	bxls	lr
   118ac:	ldr	r3, [pc, #16]	; 118c4 <__assert_fail@plt+0x98>
   118b0:	cmp	r3, #0
   118b4:	bxeq	lr
   118b8:	bx	r3
   118bc:	andeq	ip, r2, r7, asr #3
   118c0:	andeq	ip, r2, r4, asr #3
   118c4:	andeq	r0, r0, r0
   118c8:	ldr	r1, [pc, #36]	; 118f4 <__assert_fail@plt+0xc8>
   118cc:	ldr	r0, [pc, #36]	; 118f8 <__assert_fail@plt+0xcc>
   118d0:	sub	r1, r1, r0
   118d4:	asr	r1, r1, #2
   118d8:	add	r1, r1, r1, lsr #31
   118dc:	asrs	r1, r1, #1
   118e0:	bxeq	lr
   118e4:	ldr	r3, [pc, #16]	; 118fc <__assert_fail@plt+0xd0>
   118e8:	cmp	r3, #0
   118ec:	bxeq	lr
   118f0:	bx	r3
   118f4:	andeq	ip, r2, r4, asr #3
   118f8:	andeq	ip, r2, r4, asr #3
   118fc:	andeq	r0, r0, r0
   11900:	push	{r4, lr}
   11904:	ldr	r4, [pc, #24]	; 11924 <__assert_fail@plt+0xf8>
   11908:	ldrb	r3, [r4]
   1190c:	cmp	r3, #0
   11910:	popne	{r4, pc}
   11914:	bl	11898 <__assert_fail@plt+0x6c>
   11918:	mov	r3, #1
   1191c:	strb	r3, [r4]
   11920:	pop	{r4, pc}
   11924:	andeq	ip, r2, r4, ror #3
   11928:	ldr	r0, [pc, #40]	; 11958 <__assert_fail@plt+0x12c>
   1192c:	ldr	r3, [r0]
   11930:	cmp	r3, #0
   11934:	bne	1193c <__assert_fail@plt+0x110>
   11938:	b	118c8 <__assert_fail@plt+0x9c>
   1193c:	ldr	r3, [pc, #24]	; 1195c <__assert_fail@plt+0x130>
   11940:	cmp	r3, #0
   11944:	beq	11938 <__assert_fail@plt+0x10c>
   11948:	push	{r4, lr}
   1194c:	blx	r3
   11950:	pop	{r4, lr}
   11954:	b	118c8 <__assert_fail@plt+0x9c>
   11958:	andeq	fp, r2, ip, lsl #30
   1195c:	andeq	r0, r0, r0
   11960:	push	{lr}		; (str lr, [sp, #-4]!)
   11964:	sub	sp, sp, #60	; 0x3c
   11968:	subs	r6, r0, #0
   1196c:	beq	119a8 <__assert_fail@plt+0x17c>
   11970:	ldr	r3, [pc, #752]	; 11c68 <__assert_fail@plt+0x43c>
   11974:	ldr	r4, [r3]
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #744]	; 11c6c <__assert_fail@plt+0x440>
   11980:	mov	r0, #0
   11984:	bl	114f0 <dcgettext@plt>
   11988:	ldr	r3, [pc, #736]	; 11c70 <__assert_fail@plt+0x444>
   1198c:	ldr	r3, [r3]
   11990:	mov	r2, r0
   11994:	mov	r1, #1
   11998:	mov	r0, r4
   1199c:	bl	116d0 <__fprintf_chk@plt>
   119a0:	mov	r0, r6
   119a4:	bl	11640 <exit@plt>
   119a8:	mov	r2, #5
   119ac:	ldr	r1, [pc, #704]	; 11c74 <__assert_fail@plt+0x448>
   119b0:	mov	r0, #0
   119b4:	bl	114f0 <dcgettext@plt>
   119b8:	ldr	r3, [pc, #688]	; 11c70 <__assert_fail@plt+0x444>
   119bc:	ldr	r2, [r3]
   119c0:	mov	r1, r0
   119c4:	mov	r0, #1
   119c8:	bl	116b8 <__printf_chk@plt>
   119cc:	mov	r2, #5
   119d0:	ldr	r1, [pc, #672]	; 11c78 <__assert_fail@plt+0x44c>
   119d4:	mov	r0, #0
   119d8:	bl	114f0 <dcgettext@plt>
   119dc:	ldr	r4, [pc, #664]	; 11c7c <__assert_fail@plt+0x450>
   119e0:	ldr	r1, [r4]
   119e4:	bl	11430 <fputs_unlocked@plt>
   119e8:	mov	r2, #5
   119ec:	ldr	r1, [pc, #652]	; 11c80 <__assert_fail@plt+0x454>
   119f0:	mov	r0, #0
   119f4:	bl	114f0 <dcgettext@plt>
   119f8:	ldr	r1, [r4]
   119fc:	bl	11430 <fputs_unlocked@plt>
   11a00:	mov	r2, #5
   11a04:	ldr	r1, [pc, #632]	; 11c84 <__assert_fail@plt+0x458>
   11a08:	mov	r0, #0
   11a0c:	bl	114f0 <dcgettext@plt>
   11a10:	ldr	r1, [r4]
   11a14:	bl	11430 <fputs_unlocked@plt>
   11a18:	mov	r2, #5
   11a1c:	ldr	r1, [pc, #612]	; 11c88 <__assert_fail@plt+0x45c>
   11a20:	mov	r0, #0
   11a24:	bl	114f0 <dcgettext@plt>
   11a28:	ldr	r1, [r4]
   11a2c:	bl	11430 <fputs_unlocked@plt>
   11a30:	mov	r2, #5
   11a34:	ldr	r1, [pc, #592]	; 11c8c <__assert_fail@plt+0x460>
   11a38:	mov	r0, #0
   11a3c:	bl	114f0 <dcgettext@plt>
   11a40:	ldr	r1, [r4]
   11a44:	bl	11430 <fputs_unlocked@plt>
   11a48:	mov	r2, #5
   11a4c:	ldr	r1, [pc, #572]	; 11c90 <__assert_fail@plt+0x464>
   11a50:	mov	r0, #0
   11a54:	bl	114f0 <dcgettext@plt>
   11a58:	ldr	r1, [r4]
   11a5c:	bl	11430 <fputs_unlocked@plt>
   11a60:	mov	ip, sp
   11a64:	ldr	lr, [pc, #552]	; 11c94 <__assert_fail@plt+0x468>
   11a68:	ldm	lr!, {r0, r1, r2, r3}
   11a6c:	stmia	ip!, {r0, r1, r2, r3}
   11a70:	ldm	lr!, {r0, r1, r2, r3}
   11a74:	stmia	ip!, {r0, r1, r2, r3}
   11a78:	ldm	lr!, {r0, r1, r2, r3}
   11a7c:	stmia	ip!, {r0, r1, r2, r3}
   11a80:	ldm	lr, {r0, r1}
   11a84:	stm	ip, {r0, r1}
   11a88:	ldr	r1, [sp]
   11a8c:	cmp	r1, #0
   11a90:	moveq	r4, sp
   11a94:	beq	11abc <__assert_fail@plt+0x290>
   11a98:	mov	r4, sp
   11a9c:	ldr	r5, [pc, #500]	; 11c98 <__assert_fail@plt+0x46c>
   11aa0:	mov	r0, r5
   11aa4:	bl	11454 <strcmp@plt>
   11aa8:	cmp	r0, #0
   11aac:	beq	11abc <__assert_fail@plt+0x290>
   11ab0:	ldr	r1, [r4, #8]!
   11ab4:	cmp	r1, #0
   11ab8:	bne	11aa0 <__assert_fail@plt+0x274>
   11abc:	ldr	r4, [r4, #4]
   11ac0:	cmp	r4, #0
   11ac4:	beq	11bd8 <__assert_fail@plt+0x3ac>
   11ac8:	mov	r2, #5
   11acc:	ldr	r1, [pc, #456]	; 11c9c <__assert_fail@plt+0x470>
   11ad0:	mov	r0, #0
   11ad4:	bl	114f0 <dcgettext@plt>
   11ad8:	ldr	r3, [pc, #448]	; 11ca0 <__assert_fail@plt+0x474>
   11adc:	ldr	r2, [pc, #448]	; 11ca4 <__assert_fail@plt+0x478>
   11ae0:	mov	r1, r0
   11ae4:	mov	r0, #1
   11ae8:	bl	116b8 <__printf_chk@plt>
   11aec:	mov	r1, #0
   11af0:	mov	r0, #5
   11af4:	bl	11700 <setlocale@plt>
   11af8:	cmp	r0, #0
   11afc:	beq	11b14 <__assert_fail@plt+0x2e8>
   11b00:	mov	r2, #3
   11b04:	ldr	r1, [pc, #412]	; 11ca8 <__assert_fail@plt+0x47c>
   11b08:	bl	117cc <strncmp@plt>
   11b0c:	cmp	r0, #0
   11b10:	bne	11b74 <__assert_fail@plt+0x348>
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #396]	; 11cac <__assert_fail@plt+0x480>
   11b1c:	mov	r0, #0
   11b20:	bl	114f0 <dcgettext@plt>
   11b24:	ldr	r5, [pc, #364]	; 11c98 <__assert_fail@plt+0x46c>
   11b28:	mov	r3, r5
   11b2c:	ldr	r2, [pc, #364]	; 11ca0 <__assert_fail@plt+0x474>
   11b30:	mov	r1, r0
   11b34:	mov	r0, #1
   11b38:	bl	116b8 <__printf_chk@plt>
   11b3c:	mov	r2, #5
   11b40:	ldr	r1, [pc, #360]	; 11cb0 <__assert_fail@plt+0x484>
   11b44:	mov	r0, #0
   11b48:	bl	114f0 <dcgettext@plt>
   11b4c:	mov	r1, r0
   11b50:	ldr	r2, [pc, #348]	; 11cb4 <__assert_fail@plt+0x488>
   11b54:	ldr	r3, [pc, #348]	; 11cb8 <__assert_fail@plt+0x48c>
   11b58:	cmp	r4, r5
   11b5c:	movne	r3, r2
   11b60:	mov	r2, r4
   11b64:	mov	r0, #1
   11b68:	bl	116b8 <__printf_chk@plt>
   11b6c:	b	119a0 <__assert_fail@plt+0x174>
   11b70:	ldr	r4, [pc, #288]	; 11c98 <__assert_fail@plt+0x46c>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #316]	; 11cbc <__assert_fail@plt+0x490>
   11b7c:	mov	r0, #0
   11b80:	bl	114f0 <dcgettext@plt>
   11b84:	ldr	r3, [pc, #240]	; 11c7c <__assert_fail@plt+0x450>
   11b88:	ldr	r1, [r3]
   11b8c:	bl	11430 <fputs_unlocked@plt>
   11b90:	b	11b14 <__assert_fail@plt+0x2e8>
   11b94:	mov	r2, #5
   11b98:	ldr	r1, [pc, #268]	; 11cac <__assert_fail@plt+0x480>
   11b9c:	mov	r0, #0
   11ba0:	bl	114f0 <dcgettext@plt>
   11ba4:	ldr	r4, [pc, #236]	; 11c98 <__assert_fail@plt+0x46c>
   11ba8:	mov	r3, r4
   11bac:	ldr	r2, [pc, #236]	; 11ca0 <__assert_fail@plt+0x474>
   11bb0:	mov	r1, r0
   11bb4:	mov	r0, #1
   11bb8:	bl	116b8 <__printf_chk@plt>
   11bbc:	mov	r2, #5
   11bc0:	ldr	r1, [pc, #232]	; 11cb0 <__assert_fail@plt+0x484>
   11bc4:	mov	r0, #0
   11bc8:	bl	114f0 <dcgettext@plt>
   11bcc:	mov	r1, r0
   11bd0:	ldr	r3, [pc, #224]	; 11cb8 <__assert_fail@plt+0x48c>
   11bd4:	b	11b60 <__assert_fail@plt+0x334>
   11bd8:	mov	r2, #5
   11bdc:	ldr	r1, [pc, #184]	; 11c9c <__assert_fail@plt+0x470>
   11be0:	mov	r0, #0
   11be4:	bl	114f0 <dcgettext@plt>
   11be8:	ldr	r3, [pc, #176]	; 11ca0 <__assert_fail@plt+0x474>
   11bec:	ldr	r2, [pc, #176]	; 11ca4 <__assert_fail@plt+0x478>
   11bf0:	mov	r1, r0
   11bf4:	mov	r0, #1
   11bf8:	bl	116b8 <__printf_chk@plt>
   11bfc:	mov	r1, #0
   11c00:	mov	r0, #5
   11c04:	bl	11700 <setlocale@plt>
   11c08:	cmp	r0, #0
   11c0c:	beq	11b94 <__assert_fail@plt+0x368>
   11c10:	mov	r2, #3
   11c14:	ldr	r1, [pc, #140]	; 11ca8 <__assert_fail@plt+0x47c>
   11c18:	bl	117cc <strncmp@plt>
   11c1c:	cmp	r0, #0
   11c20:	bne	11b70 <__assert_fail@plt+0x344>
   11c24:	mov	r2, #5
   11c28:	ldr	r1, [pc, #124]	; 11cac <__assert_fail@plt+0x480>
   11c2c:	mov	r0, #0
   11c30:	bl	114f0 <dcgettext@plt>
   11c34:	ldr	r4, [pc, #92]	; 11c98 <__assert_fail@plt+0x46c>
   11c38:	mov	r3, r4
   11c3c:	ldr	r2, [pc, #92]	; 11ca0 <__assert_fail@plt+0x474>
   11c40:	mov	r1, r0
   11c44:	mov	r0, #1
   11c48:	bl	116b8 <__printf_chk@plt>
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #88]	; 11cb0 <__assert_fail@plt+0x484>
   11c54:	mov	r0, #0
   11c58:	bl	114f0 <dcgettext@plt>
   11c5c:	mov	r1, r0
   11c60:	ldr	r3, [pc, #80]	; 11cb8 <__assert_fail@plt+0x48c>
   11c64:	b	11b60 <__assert_fail@plt+0x334>
   11c68:	ldrdeq	ip, [r2], -r8
   11c6c:	andeq	sl, r1, r8, asr #10
   11c70:	strdeq	ip, [r2], -r0
   11c74:	andeq	sl, r1, r0, ror r5
   11c78:	muleq	r1, r0, r5
   11c7c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11c80:	andeq	sl, r1, r4, asr #11
   11c84:	andeq	sl, r1, r0, lsl r6
   11c88:	andeq	sl, r1, ip, asr r6
   11c8c:	andeq	sl, r1, ip, lsr #14
   11c90:	andeq	sl, r1, ip, asr r7
   11c94:			; <UNDEFINED> instruction: 0x0001a4b8
   11c98:	andeq	sl, r1, r0, asr #10
   11c9c:	muleq	r1, r4, r7
   11ca0:	andeq	sl, r1, ip, lsr #15
   11ca4:	ldrdeq	sl, [r1], -r4
   11ca8:	andeq	sl, r1, r4, ror #15
   11cac:	andeq	sl, r1, r0, lsr r8
   11cb0:	andeq	sl, r1, ip, asr #16
   11cb4:	ldrdeq	sl, [r1], -ip
   11cb8:	ldrdeq	sl, [r1], -r4
   11cbc:	andeq	sl, r1, r8, ror #15
   11cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cc4:	sub	sp, sp, #20
   11cc8:	mov	r6, r0
   11ccc:	mov	r4, r1
   11cd0:	ldr	r0, [r1]
   11cd4:	bl	16b6c <lchmod@@Base+0x6e4>
   11cd8:	ldr	r1, [pc, #924]	; 1207c <__assert_fail@plt+0x850>
   11cdc:	mov	r0, #6
   11ce0:	bl	11700 <setlocale@plt>
   11ce4:	ldr	r5, [pc, #916]	; 12080 <__assert_fail@plt+0x854>
   11ce8:	ldr	r1, [pc, #916]	; 12084 <__assert_fail@plt+0x858>
   11cec:	mov	r0, r5
   11cf0:	bl	11784 <bindtextdomain@plt>
   11cf4:	mov	r0, r5
   11cf8:	bl	11520 <textdomain@plt>
   11cfc:	ldr	r0, [pc, #900]	; 12088 <__assert_fail@plt+0x85c>
   11d00:	bl	1a494 <lchmod@@Base+0x400c>
   11d04:	mov	r5, #0
   11d08:	str	r5, [sp, #8]
   11d0c:	mov	sl, r5
   11d10:	ldr	r9, [pc, #884]	; 1208c <__assert_fail@plt+0x860>
   11d14:	ldr	r8, [pc, #884]	; 12090 <__assert_fail@plt+0x864>
   11d18:	mov	r7, r5
   11d1c:	ldr	fp, [pc, #880]	; 12094 <__assert_fail@plt+0x868>
   11d20:	str	r7, [sp]
   11d24:	mov	r3, r9
   11d28:	mov	r2, r8
   11d2c:	mov	r1, r4
   11d30:	mov	r0, r6
   11d34:	bl	1161c <getopt_long@plt>
   11d38:	cmn	r0, #1
   11d3c:	beq	11e44 <__assert_fail@plt+0x618>
   11d40:	cmn	r0, #2
   11d44:	beq	11e34 <__assert_fail@plt+0x608>
   11d48:	ble	11d64 <__assert_fail@plt+0x538>
   11d4c:	cmp	r0, #90	; 0x5a
   11d50:	beq	11da0 <__assert_fail@plt+0x574>
   11d54:	cmp	r0, #109	; 0x6d
   11d58:	bne	11e3c <__assert_fail@plt+0x610>
   11d5c:	ldr	sl, [fp]
   11d60:	b	11d20 <__assert_fail@plt+0x4f4>
   11d64:	cmn	r0, #3
   11d68:	bne	11e3c <__assert_fail@plt+0x610>
   11d6c:	mov	r4, #0
   11d70:	str	r4, [sp, #4]
   11d74:	ldr	r3, [pc, #796]	; 12098 <__assert_fail@plt+0x86c>
   11d78:	str	r3, [sp]
   11d7c:	ldr	r3, [pc, #792]	; 1209c <__assert_fail@plt+0x870>
   11d80:	ldr	r3, [r3]
   11d84:	ldr	r2, [pc, #788]	; 120a0 <__assert_fail@plt+0x874>
   11d88:	ldr	r1, [pc, #788]	; 120a4 <__assert_fail@plt+0x878>
   11d8c:	ldr	r0, [pc, #788]	; 120a8 <__assert_fail@plt+0x87c>
   11d90:	ldr	r0, [r0]
   11d94:	bl	18dd8 <lchmod@@Base+0x2950>
   11d98:	mov	r0, r4
   11d9c:	bl	11640 <exit@plt>
   11da0:	bl	11448 <is_selinux_enabled@plt>
   11da4:	cmp	r0, #0
   11da8:	ble	11e04 <__assert_fail@plt+0x5d8>
   11dac:	ldr	r3, [fp]
   11db0:	cmp	r3, #0
   11db4:	strne	r3, [sp, #8]
   11db8:	bne	11d20 <__assert_fail@plt+0x4f4>
   11dbc:	mov	r2, r7
   11dc0:	mov	r1, r7
   11dc4:	mov	r0, r7
   11dc8:	bl	11664 <selabel_open@plt>
   11dcc:	subs	r5, r0, #0
   11dd0:	bne	11d20 <__assert_fail@plt+0x4f4>
   11dd4:	bl	11688 <__errno_location@plt>
   11dd8:	ldr	r3, [r0]
   11ddc:	str	r3, [sp, #12]
   11de0:	mov	r2, #5
   11de4:	ldr	r1, [pc, #704]	; 120ac <__assert_fail@plt+0x880>
   11de8:	mov	r0, r7
   11dec:	bl	114f0 <dcgettext@plt>
   11df0:	mov	r2, r0
   11df4:	ldr	r1, [sp, #12]
   11df8:	mov	r0, r7
   11dfc:	bl	115b0 <error@plt>
   11e00:	b	11d20 <__assert_fail@plt+0x4f4>
   11e04:	ldr	r3, [fp]
   11e08:	cmp	r3, #0
   11e0c:	beq	11d20 <__assert_fail@plt+0x4f4>
   11e10:	mov	r2, #5
   11e14:	ldr	r1, [pc, #660]	; 120b0 <__assert_fail@plt+0x884>
   11e18:	mov	r0, r7
   11e1c:	bl	114f0 <dcgettext@plt>
   11e20:	mov	r2, r0
   11e24:	mov	r1, r7
   11e28:	mov	r0, r7
   11e2c:	bl	115b0 <error@plt>
   11e30:	b	11d20 <__assert_fail@plt+0x4f4>
   11e34:	mov	r0, #0
   11e38:	bl	11960 <__assert_fail@plt+0x134>
   11e3c:	mov	r0, #1
   11e40:	bl	11960 <__assert_fail@plt+0x134>
   11e44:	ldr	r3, [pc, #616]	; 120b4 <__assert_fail@plt+0x888>
   11e48:	ldr	r3, [r3]
   11e4c:	cmp	r6, r3
   11e50:	beq	11ed8 <__assert_fail@plt+0x6ac>
   11e54:	ldr	r3, [sp, #8]
   11e58:	cmp	r3, #0
   11e5c:	beq	11e70 <__assert_fail@plt+0x644>
   11e60:	mov	r0, r3
   11e64:	bl	1167c <setfscreatecon@plt>
   11e68:	cmp	r0, #0
   11e6c:	blt	11f00 <__assert_fail@plt+0x6d4>
   11e70:	cmp	sl, #0
   11e74:	beq	11f54 <__assert_fail@plt+0x728>
   11e78:	mov	r0, sl
   11e7c:	bl	16594 <lchmod@@Base+0x10c>
   11e80:	subs	r7, r0, #0
   11e84:	beq	11f38 <__assert_fail@plt+0x70c>
   11e88:	mov	r0, #0
   11e8c:	bl	1179c <umask@plt>
   11e90:	mov	r8, r0
   11e94:	bl	1179c <umask@plt>
   11e98:	mov	r1, #0
   11e9c:	str	r1, [sp]
   11ea0:	mov	r3, r7
   11ea4:	mov	r2, r8
   11ea8:	ldr	r0, [pc, #520]	; 120b8 <__assert_fail@plt+0x88c>
   11eac:	bl	169a4 <lchmod@@Base+0x51c>
   11eb0:	mov	r8, r0
   11eb4:	mov	r0, r7
   11eb8:	bl	1315c <__assert_fail@plt+0x1930>
   11ebc:	bic	r3, r8, #508	; 0x1fc
   11ec0:	bic	r3, r3, #3
   11ec4:	cmp	r3, #0
   11ec8:	bne	11f5c <__assert_fail@plt+0x730>
   11ecc:	mov	r9, #0
   11ed0:	ldr	r7, [pc, #476]	; 120b4 <__assert_fail@plt+0x888>
   11ed4:	b	11fcc <__assert_fail@plt+0x7a0>
   11ed8:	mov	r2, #5
   11edc:	ldr	r1, [pc, #472]	; 120bc <__assert_fail@plt+0x890>
   11ee0:	mov	r0, #0
   11ee4:	bl	114f0 <dcgettext@plt>
   11ee8:	mov	r2, r0
   11eec:	mov	r1, #0
   11ef0:	mov	r0, r1
   11ef4:	bl	115b0 <error@plt>
   11ef8:	mov	r0, #1
   11efc:	bl	11960 <__assert_fail@plt+0x134>
   11f00:	bl	11688 <__errno_location@plt>
   11f04:	ldr	r4, [r0]
   11f08:	mov	r2, #5
   11f0c:	ldr	r1, [pc, #428]	; 120c0 <__assert_fail@plt+0x894>
   11f10:	mov	r0, #0
   11f14:	bl	114f0 <dcgettext@plt>
   11f18:	mov	r5, r0
   11f1c:	ldr	r0, [sp, #8]
   11f20:	bl	186bc <lchmod@@Base+0x2234>
   11f24:	mov	r3, r0
   11f28:	mov	r2, r5
   11f2c:	mov	r1, r4
   11f30:	mov	r0, #1
   11f34:	bl	115b0 <error@plt>
   11f38:	mov	r2, #5
   11f3c:	ldr	r1, [pc, #384]	; 120c4 <__assert_fail@plt+0x898>
   11f40:	bl	114f0 <dcgettext@plt>
   11f44:	mov	r2, r0
   11f48:	mov	r1, #0
   11f4c:	mov	r0, #1
   11f50:	bl	115b0 <error@plt>
   11f54:	ldr	r8, [pc, #348]	; 120b8 <__assert_fail@plt+0x88c>
   11f58:	b	11ecc <__assert_fail@plt+0x6a0>
   11f5c:	mov	r2, #5
   11f60:	ldr	r1, [pc, #352]	; 120c8 <__assert_fail@plt+0x89c>
   11f64:	mov	r0, #0
   11f68:	bl	114f0 <dcgettext@plt>
   11f6c:	mov	r2, r0
   11f70:	mov	r1, #0
   11f74:	mov	r0, #1
   11f78:	bl	115b0 <error@plt>
   11f7c:	bl	11688 <__errno_location@plt>
   11f80:	ldr	r9, [r0]
   11f84:	mov	r2, #5
   11f88:	ldr	r1, [pc, #316]	; 120cc <__assert_fail@plt+0x8a0>
   11f8c:	mov	r0, #0
   11f90:	bl	114f0 <dcgettext@plt>
   11f94:	mov	fp, r0
   11f98:	ldr	r3, [r7]
   11f9c:	ldr	r1, [r4, r3, lsl #2]
   11fa0:	mov	r0, #4
   11fa4:	bl	18488 <lchmod@@Base+0x2000>
   11fa8:	mov	r3, r0
   11fac:	mov	r2, fp
   11fb0:	mov	r1, r9
   11fb4:	mov	r0, #0
   11fb8:	bl	115b0 <error@plt>
   11fbc:	mov	r9, #1
   11fc0:	ldr	r3, [r7]
   11fc4:	add	r3, r3, #1
   11fc8:	str	r3, [r7]
   11fcc:	ldr	r3, [r7]
   11fd0:	cmp	r6, r3
   11fd4:	ble	12070 <__assert_fail@plt+0x844>
   11fd8:	cmp	r5, #0
   11fdc:	beq	11ff0 <__assert_fail@plt+0x7c4>
   11fe0:	mov	r2, #4096	; 0x1000
   11fe4:	ldr	r1, [r4, r3, lsl #2]
   11fe8:	mov	r0, r5
   11fec:	bl	123c0 <__assert_fail@plt+0xb94>
   11ff0:	ldr	r3, [r7]
   11ff4:	mov	r1, r8
   11ff8:	ldr	r0, [r4, r3, lsl #2]
   11ffc:	bl	117fc <mkfifo@plt>
   12000:	cmp	r0, #0
   12004:	bne	11f7c <__assert_fail@plt+0x750>
   12008:	cmp	sl, #0
   1200c:	beq	11fc0 <__assert_fail@plt+0x794>
   12010:	ldr	r3, [r7]
   12014:	mov	r1, r8
   12018:	ldr	r0, [r4, r3, lsl #2]
   1201c:	bl	16488 <lchmod@@Base>
   12020:	cmp	r0, #0
   12024:	beq	11fc0 <__assert_fail@plt+0x794>
   12028:	bl	11688 <__errno_location@plt>
   1202c:	ldr	r9, [r0]
   12030:	mov	r2, #5
   12034:	ldr	r1, [pc, #148]	; 120d0 <__assert_fail@plt+0x8a4>
   12038:	mov	r0, #0
   1203c:	bl	114f0 <dcgettext@plt>
   12040:	mov	fp, r0
   12044:	ldr	r3, [r7]
   12048:	ldr	r1, [r4, r3, lsl #2]
   1204c:	mov	r0, #4
   12050:	bl	18488 <lchmod@@Base+0x2000>
   12054:	mov	r3, r0
   12058:	mov	r2, fp
   1205c:	mov	r1, r9
   12060:	mov	r0, #0
   12064:	bl	115b0 <error@plt>
   12068:	mov	r9, #1
   1206c:	b	11fc0 <__assert_fail@plt+0x794>
   12070:	mov	r0, r9
   12074:	add	sp, sp, #20
   12078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1207c:	ldrdeq	sl, [r1], -ip
   12080:	ldrdeq	sl, [r1], -r8
   12084:	andeq	sl, r1, r0, lsl #17
   12088:	ldrdeq	r2, [r1], -r4
   1208c:	strdeq	sl, [r1], -r0
   12090:	andeq	sl, r1, r0, lsl r9
   12094:	andeq	ip, r2, r0, ror #3
   12098:	andeq	sl, r1, r0, lsl #18
   1209c:	andeq	ip, r2, ip, ror r1
   120a0:	ldrdeq	sl, [r1], -r4
   120a4:	andeq	sl, r1, r0, asr #10
   120a8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   120ac:	muleq	r1, r8, r8
   120b0:			; <UNDEFINED> instruction: 0x0001a8b4
   120b4:	ldrdeq	ip, [r2], -r0
   120b8:			; <UNDEFINED> instruction: 0x000001b6
   120bc:	andeq	sl, r1, r4, lsl r9
   120c0:	andeq	sl, r1, r4, lsr #18
   120c4:	andeq	sl, r1, r8, asr r9
   120c8:	andeq	sl, r1, r8, ror #18
   120cc:	muleq	r1, r4, r9
   120d0:	andeq	sl, r1, ip, lsr #19
   120d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   120d8:	sub	sp, sp, #116	; 0x74
   120dc:	mov	r5, r1
   120e0:	mov	r3, #0
   120e4:	str	r3, [sp, #4]
   120e8:	str	r3, [sp]
   120ec:	subs	r6, r0, #0
   120f0:	beq	121c4 <__assert_fail@plt+0x998>
   120f4:	mov	r1, #32768	; 0x8000
   120f8:	mov	r0, r5
   120fc:	bl	115bc <open64@plt>
   12100:	mov	r4, r0
   12104:	cmn	r0, #1
   12108:	beq	1221c <__assert_fail@plt+0x9f0>
   1210c:	add	r2, sp, #8
   12110:	mov	r1, r0
   12114:	mov	r0, #3
   12118:	bl	11550 <__fxstat64@plt>
   1211c:	cmp	r0, #0
   12120:	blt	12384 <__assert_fail@plt+0xb58>
   12124:	ldr	r3, [sp, #24]
   12128:	mov	r2, r5
   1212c:	add	r1, sp, #4
   12130:	mov	r0, r6
   12134:	bl	11418 <selabel_lookup@plt>
   12138:	cmp	r0, #0
   1213c:	blt	1226c <__assert_fail@plt+0xa40>
   12140:	ldr	r0, [sp, #4]
   12144:	bl	114cc <context_new@plt>
   12148:	subs	r8, r0, #0
   1214c:	beq	12344 <__assert_fail@plt+0xb18>
   12150:	cmn	r4, #1
   12154:	beq	122ec <__assert_fail@plt+0xac0>
   12158:	mov	r1, sp
   1215c:	mov	r0, r4
   12160:	bl	188c8 <lchmod@@Base+0x2440>
   12164:	cmp	r0, #0
   12168:	blt	123a0 <__assert_fail@plt+0xb74>
   1216c:	ldr	r0, [sp]
   12170:	bl	114cc <context_new@plt>
   12174:	subs	r6, r0, #0
   12178:	beq	12368 <__assert_fail@plt+0xb3c>
   1217c:	mov	r0, r8
   12180:	bl	11460 <context_type_get@plt>
   12184:	subs	r1, r0, #0
   12188:	beq	123ac <__assert_fail@plt+0xb80>
   1218c:	mov	r0, r6
   12190:	bl	114fc <context_type_set@plt>
   12194:	cmp	r0, #0
   12198:	bne	12284 <__assert_fail@plt+0xa58>
   1219c:	mov	r0, r6
   121a0:	bl	117a8 <context_str@plt>
   121a4:	subs	r1, r0, #0
   121a8:	beq	12284 <__assert_fail@plt+0xa58>
   121ac:	cmn	r4, #1
   121b0:	beq	12334 <__assert_fail@plt+0xb08>
   121b4:	mov	r0, r4
   121b8:	bl	1170c <fsetfilecon@plt>
   121bc:	mov	r7, r0
   121c0:	b	12390 <__assert_fail@plt+0xb64>
   121c4:	mov	r0, sp
   121c8:	bl	11790 <getfscreatecon@plt>
   121cc:	cmp	r0, #0
   121d0:	blt	1234c <__assert_fail@plt+0xb20>
   121d4:	ldr	r1, [sp]
   121d8:	cmp	r1, #0
   121dc:	beq	12208 <__assert_fail@plt+0x9dc>
   121e0:	mov	r0, r5
   121e4:	bl	11478 <lsetfilecon@plt>
   121e8:	mov	r7, r0
   121ec:	bl	11688 <__errno_location@plt>
   121f0:	mov	r4, r0
   121f4:	ldr	r5, [r0]
   121f8:	ldr	r0, [sp]
   121fc:	bl	11778 <freecon@plt>
   12200:	str	r5, [r4]
   12204:	b	122cc <__assert_fail@plt+0xaa0>
   12208:	bl	11688 <__errno_location@plt>
   1220c:	mov	r3, #61	; 0x3d
   12210:	str	r3, [r0]
   12214:	mvn	r7, #0
   12218:	b	122cc <__assert_fail@plt+0xaa0>
   1221c:	bl	11688 <__errno_location@plt>
   12220:	ldr	r3, [r0]
   12224:	cmp	r3, #40	; 0x28
   12228:	movne	r6, #0
   1222c:	movne	r8, r6
   12230:	beq	12248 <__assert_fail@plt+0xa1c>
   12234:	bl	11688 <__errno_location@plt>
   12238:	mov	r5, r0
   1223c:	ldr	r9, [r0]
   12240:	mov	r7, r4
   12244:	b	122a8 <__assert_fail@plt+0xa7c>
   12248:	add	r2, sp, #8
   1224c:	mov	r1, r5
   12250:	mov	r0, #3
   12254:	bl	117f0 <__lxstat64@plt>
   12258:	cmp	r0, #0
   1225c:	bge	12124 <__assert_fail@plt+0x8f8>
   12260:	mov	r6, #0
   12264:	mov	r8, r6
   12268:	b	12234 <__assert_fail@plt+0xa08>
   1226c:	bl	11688 <__errno_location@plt>
   12270:	ldr	r3, [r0]
   12274:	cmp	r3, #2
   12278:	movne	r6, #0
   1227c:	movne	r8, r6
   12280:	beq	122d8 <__assert_fail@plt+0xaac>
   12284:	bl	11688 <__errno_location@plt>
   12288:	mov	r5, r0
   1228c:	ldr	r9, [r0]
   12290:	cmn	r4, #1
   12294:	moveq	r7, r4
   12298:	beq	122a8 <__assert_fail@plt+0xa7c>
   1229c:	mvn	r7, #0
   122a0:	mov	r0, r4
   122a4:	bl	117e4 <close@plt>
   122a8:	mov	r0, r8
   122ac:	bl	11604 <context_free@plt>
   122b0:	mov	r0, r6
   122b4:	bl	11604 <context_free@plt>
   122b8:	ldr	r0, [sp, #4]
   122bc:	bl	11778 <freecon@plt>
   122c0:	ldr	r0, [sp]
   122c4:	bl	11778 <freecon@plt>
   122c8:	str	r9, [r5]
   122cc:	mov	r0, r7
   122d0:	add	sp, sp, #116	; 0x74
   122d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   122d8:	mov	r3, #61	; 0x3d
   122dc:	str	r3, [r0]
   122e0:	mov	r6, #0
   122e4:	mov	r8, r6
   122e8:	b	12284 <__assert_fail@plt+0xa58>
   122ec:	mov	r1, sp
   122f0:	mov	r0, r5
   122f4:	bl	188b0 <lchmod@@Base+0x2428>
   122f8:	cmp	r0, #0
   122fc:	blt	1237c <__assert_fail@plt+0xb50>
   12300:	ldr	r0, [sp]
   12304:	bl	114cc <context_new@plt>
   12308:	subs	r6, r0, #0
   1230c:	beq	12354 <__assert_fail@plt+0xb28>
   12310:	mov	r0, r8
   12314:	bl	11460 <context_type_get@plt>
   12318:	subs	r1, r0, #0
   1231c:	bne	1218c <__assert_fail@plt+0x960>
   12320:	bl	11688 <__errno_location@plt>
   12324:	mov	r5, r0
   12328:	ldr	r9, [r0]
   1232c:	mov	r7, r4
   12330:	b	122a8 <__assert_fail@plt+0xa7c>
   12334:	mov	r0, r5
   12338:	bl	11478 <lsetfilecon@plt>
   1233c:	mov	r4, r0
   12340:	b	12234 <__assert_fail@plt+0xa08>
   12344:	mov	r6, r8
   12348:	b	12284 <__assert_fail@plt+0xa58>
   1234c:	mvn	r7, #0
   12350:	b	122cc <__assert_fail@plt+0xaa0>
   12354:	bl	11688 <__errno_location@plt>
   12358:	mov	r5, r0
   1235c:	ldr	r9, [r0]
   12360:	mov	r7, r4
   12364:	b	122a8 <__assert_fail@plt+0xa7c>
   12368:	bl	11688 <__errno_location@plt>
   1236c:	mov	r5, r0
   12370:	ldr	r9, [r0]
   12374:	mvn	r7, #0
   12378:	b	122a0 <__assert_fail@plt+0xa74>
   1237c:	mov	r6, #0
   12380:	b	12234 <__assert_fail@plt+0xa08>
   12384:	mov	r6, #0
   12388:	mov	r8, r6
   1238c:	mvn	r7, #0
   12390:	bl	11688 <__errno_location@plt>
   12394:	mov	r5, r0
   12398:	ldr	r9, [r0]
   1239c:	b	122a0 <__assert_fail@plt+0xa74>
   123a0:	mov	r6, #0
   123a4:	mvn	r7, #0
   123a8:	b	12390 <__assert_fail@plt+0xb64>
   123ac:	bl	11688 <__errno_location@plt>
   123b0:	mov	r5, r0
   123b4:	ldr	r9, [r0]
   123b8:	mvn	r7, #0
   123bc:	b	122a0 <__assert_fail@plt+0xa74>
   123c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   123c4:	sub	sp, sp, #20
   123c8:	mov	r7, r0
   123cc:	mov	r4, r1
   123d0:	mov	r5, r2
   123d4:	mov	r3, #0
   123d8:	str	r3, [sp, #12]
   123dc:	str	r3, [sp, #8]
   123e0:	ldrb	r3, [r1]
   123e4:	cmp	r3, #47	; 0x2f
   123e8:	beq	12550 <__assert_fail@plt+0xd24>
   123ec:	mov	r1, #2
   123f0:	mov	r0, r4
   123f4:	bl	1271c <__assert_fail@plt+0xef0>
   123f8:	subs	r6, r0, #0
   123fc:	beq	1258c <__assert_fail@plt+0xd60>
   12400:	mov	r4, r6
   12404:	mov	r3, r5
   12408:	mov	r2, r4
   1240c:	add	r1, sp, #12
   12410:	mov	r0, r7
   12414:	bl	11418 <selabel_lookup@plt>
   12418:	cmp	r0, #0
   1241c:	blt	12558 <__assert_fail@plt+0xd2c>
   12420:	mov	r3, #0
   12424:	str	r3, [sp]
   12428:	str	r3, [sp, #4]
   1242c:	mov	r0, r4
   12430:	bl	12fc8 <__assert_fail@plt+0x179c>
   12434:	subs	r4, r0, #0
   12438:	beq	125d8 <__assert_fail@plt+0xdac>
   1243c:	mov	r0, sp
   12440:	bl	1158c <getcon@plt>
   12444:	cmp	r0, #0
   12448:	blt	125d8 <__assert_fail@plt+0xdac>
   1244c:	add	r1, sp, #4
   12450:	mov	r0, r4
   12454:	bl	18898 <lchmod@@Base+0x2410>
   12458:	cmp	r0, #0
   1245c:	blt	125d8 <__assert_fail@plt+0xdac>
   12460:	mov	r0, r5
   12464:	bl	11808 <mode_to_security_class@plt>
   12468:	subs	r2, r0, #0
   1246c:	beq	125d8 <__assert_fail@plt+0xdac>
   12470:	add	r3, sp, #8
   12474:	ldr	r1, [sp, #4]
   12478:	ldr	r0, [sp]
   1247c:	bl	11748 <security_compute_create@plt>
   12480:	mov	r7, r0
   12484:	bl	11688 <__errno_location@plt>
   12488:	mov	r5, r0
   1248c:	ldr	r8, [r0]
   12490:	mov	r0, r4
   12494:	bl	1315c <__assert_fail@plt+0x1930>
   12498:	ldr	r0, [sp]
   1249c:	bl	11778 <freecon@plt>
   124a0:	ldr	r0, [sp, #4]
   124a4:	bl	11778 <freecon@plt>
   124a8:	str	r8, [r5]
   124ac:	cmp	r7, #0
   124b0:	blt	1259c <__assert_fail@plt+0xd70>
   124b4:	ldr	r0, [sp, #12]
   124b8:	bl	114cc <context_new@plt>
   124bc:	subs	r7, r0, #0
   124c0:	beq	125ac <__assert_fail@plt+0xd80>
   124c4:	ldr	r0, [sp, #8]
   124c8:	bl	114cc <context_new@plt>
   124cc:	subs	r4, r0, #0
   124d0:	beq	125b8 <__assert_fail@plt+0xd8c>
   124d4:	mov	r0, r7
   124d8:	bl	11460 <context_type_get@plt>
   124dc:	subs	r1, r0, #0
   124e0:	beq	125c0 <__assert_fail@plt+0xd94>
   124e4:	mov	r0, r4
   124e8:	bl	114fc <context_type_set@plt>
   124ec:	cmp	r0, #0
   124f0:	bne	125c8 <__assert_fail@plt+0xd9c>
   124f4:	mov	r0, r4
   124f8:	bl	117a8 <context_str@plt>
   124fc:	cmp	r0, #0
   12500:	beq	125d0 <__assert_fail@plt+0xda4>
   12504:	bl	1167c <setfscreatecon@plt>
   12508:	mov	r8, r0
   1250c:	bl	11688 <__errno_location@plt>
   12510:	mov	r5, r0
   12514:	ldr	r9, [r0]
   12518:	mov	r0, r7
   1251c:	bl	11604 <context_free@plt>
   12520:	mov	r0, r4
   12524:	bl	11604 <context_free@plt>
   12528:	ldr	r0, [sp, #12]
   1252c:	bl	11778 <freecon@plt>
   12530:	ldr	r0, [sp, #8]
   12534:	bl	11778 <freecon@plt>
   12538:	mov	r0, r6
   1253c:	bl	1315c <__assert_fail@plt+0x1930>
   12540:	str	r9, [r5]
   12544:	mov	r0, r8
   12548:	add	sp, sp, #20
   1254c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12550:	mov	r6, #0
   12554:	b	12404 <__assert_fail@plt+0xbd8>
   12558:	bl	11688 <__errno_location@plt>
   1255c:	ldr	r3, [r0]
   12560:	cmp	r3, #2
   12564:	movne	r4, #0
   12568:	movne	r7, r4
   1256c:	mvnne	r8, #0
   12570:	bne	1250c <__assert_fail@plt+0xce0>
   12574:	mov	r3, #61	; 0x3d
   12578:	str	r3, [r0]
   1257c:	mov	r4, #0
   12580:	mov	r7, r4
   12584:	mvn	r8, #0
   12588:	b	1250c <__assert_fail@plt+0xce0>
   1258c:	mov	r4, #0
   12590:	mov	r7, r4
   12594:	mvn	r8, #0
   12598:	b	1250c <__assert_fail@plt+0xce0>
   1259c:	mov	r4, #0
   125a0:	mov	r7, r4
   125a4:	mvn	r8, #0
   125a8:	b	1250c <__assert_fail@plt+0xce0>
   125ac:	mov	r4, r7
   125b0:	mvn	r8, #0
   125b4:	b	1250c <__assert_fail@plt+0xce0>
   125b8:	mvn	r8, #0
   125bc:	b	1250c <__assert_fail@plt+0xce0>
   125c0:	mvn	r8, #0
   125c4:	b	1250c <__assert_fail@plt+0xce0>
   125c8:	mvn	r8, #0
   125cc:	b	1250c <__assert_fail@plt+0xce0>
   125d0:	mvn	r8, #0
   125d4:	b	1250c <__assert_fail@plt+0xce0>
   125d8:	bl	11688 <__errno_location@plt>
   125dc:	mov	r5, r0
   125e0:	ldr	r7, [r0]
   125e4:	mov	r0, r4
   125e8:	bl	1315c <__assert_fail@plt+0x1930>
   125ec:	ldr	r0, [sp]
   125f0:	bl	11778 <freecon@plt>
   125f4:	ldr	r0, [sp, #4]
   125f8:	bl	11778 <freecon@plt>
   125fc:	str	r7, [r5]
   12600:	mov	r4, #0
   12604:	mov	r7, r4
   12608:	mvn	r8, #0
   1260c:	b	1250c <__assert_fail@plt+0xce0>
   12610:	push	{r4, r5, r6, r7, lr}
   12614:	sub	sp, sp, #12
   12618:	mov	r6, r0
   1261c:	mov	r0, r1
   12620:	mov	r4, r2
   12624:	ldrb	r3, [r1]
   12628:	cmp	r3, #47	; 0x2f
   1262c:	beq	12648 <__assert_fail@plt+0xe1c>
   12630:	mov	r1, #2
   12634:	bl	1271c <__assert_fail@plt+0xef0>
   12638:	subs	r7, r0, #0
   1263c:	beq	12714 <__assert_fail@plt+0xee8>
   12640:	mov	r0, r7
   12644:	b	1264c <__assert_fail@plt+0xe20>
   12648:	mov	r7, #0
   1264c:	cmp	r4, #0
   12650:	beq	126a4 <__assert_fail@plt+0xe78>
   12654:	str	r0, [sp]
   12658:	mov	r5, #0
   1265c:	str	r5, [sp, #4]
   12660:	mov	r2, r5
   12664:	mov	r1, #16
   12668:	mov	r0, sp
   1266c:	bl	19488 <lchmod@@Base+0x3000>
   12670:	mov	r4, r0
   12674:	mov	r0, r4
   12678:	bl	14b98 <__assert_fail@plt+0x336c>
   1267c:	cmp	r0, #0
   12680:	beq	126d4 <__assert_fail@plt+0xea8>
   12684:	ldr	r1, [r4, #24]
   12688:	mov	r0, r6
   1268c:	bl	120d4 <__assert_fail@plt+0x8a8>
   12690:	cmp	r0, #0
   12694:	bge	12674 <__assert_fail@plt+0xe48>
   12698:	bl	11688 <__errno_location@plt>
   1269c:	ldr	r5, [r0]
   126a0:	b	12674 <__assert_fail@plt+0xe48>
   126a4:	mov	r1, r0
   126a8:	mov	r0, r6
   126ac:	bl	120d4 <__assert_fail@plt+0x8a8>
   126b0:	adds	r5, r0, #1
   126b4:	movne	r5, #1
   126b8:	bl	11688 <__errno_location@plt>
   126bc:	mov	r4, r0
   126c0:	ldr	r6, [r0]
   126c4:	mov	r0, r7
   126c8:	bl	1315c <__assert_fail@plt+0x1930>
   126cc:	str	r6, [r4]
   126d0:	b	12708 <__assert_fail@plt+0xedc>
   126d4:	bl	11688 <__errno_location@plt>
   126d8:	mov	r6, r0
   126dc:	ldr	r3, [r0]
   126e0:	cmp	r3, #0
   126e4:	movne	r5, r3
   126e8:	mov	r0, r4
   126ec:	bl	14a34 <__assert_fail@plt+0x3208>
   126f0:	cmp	r0, #0
   126f4:	ldrne	r5, [r6]
   126f8:	mov	r0, r7
   126fc:	bl	1315c <__assert_fail@plt+0x1930>
   12700:	clz	r5, r5
   12704:	lsr	r5, r5, #5
   12708:	mov	r0, r5
   1270c:	add	sp, sp, #12
   12710:	pop	{r4, r5, r6, r7, pc}
   12714:	mov	r5, #0
   12718:	b	12708 <__assert_fail@plt+0xedc>
   1271c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12720:	sub	sp, sp, #3232	; 0xca0
   12724:	sub	sp, sp, #12
   12728:	and	fp, r1, #3
   1272c:	sub	r3, fp, #1
   12730:	tst	r3, fp
   12734:	bne	127d8 <__assert_fail@plt+0xfac>
   12738:	mov	r4, r0
   1273c:	mov	r6, r1
   12740:	cmp	r0, #0
   12744:	beq	127ec <__assert_fail@plt+0xfc0>
   12748:	ldrb	r1, [r0]
   1274c:	cmp	r1, #0
   12750:	beq	12800 <__assert_fail@plt+0xfd4>
   12754:	add	r3, sp, #152	; 0x98
   12758:	str	r3, [sp, #144]	; 0x90
   1275c:	mov	r3, #1024	; 0x400
   12760:	str	r3, [sp, #148]	; 0x94
   12764:	add	r2, sp, #1184	; 0x4a0
   12768:	str	r2, [sp, #1176]	; 0x498
   1276c:	str	r3, [sp, #1180]	; 0x49c
   12770:	add	r2, sp, #2208	; 0x8a0
   12774:	add	r2, r2, #8
   12778:	str	r2, [sp, #2208]	; 0x8a0
   1277c:	str	r3, [sp, #2212]	; 0x8a4
   12780:	cmp	r1, #47	; 0x2f
   12784:	beq	1282c <__assert_fail@plt+0x1000>
   12788:	add	r5, sp, #2208	; 0x8a0
   1278c:	add	r5, r5, #8
   12790:	sub	r7, r5, #8
   12794:	ldr	r1, [sp, #2212]	; 0x8a4
   12798:	mov	r0, r5
   1279c:	bl	11634 <getcwd@plt>
   127a0:	cmp	r0, #0
   127a4:	bne	12818 <__assert_fail@plt+0xfec>
   127a8:	bl	11688 <__errno_location@plt>
   127ac:	ldr	r3, [r0]
   127b0:	cmp	r3, #12
   127b4:	beq	12814 <__assert_fail@plt+0xfe8>
   127b8:	cmp	r3, #34	; 0x22
   127bc:	bne	12e14 <__assert_fail@plt+0x15e8>
   127c0:	mov	r0, r7
   127c4:	bl	18718 <lchmod@@Base+0x2290>
   127c8:	cmp	r0, #0
   127cc:	beq	12814 <__assert_fail@plt+0xfe8>
   127d0:	ldr	r5, [sp, #2208]	; 0x8a0
   127d4:	b	12794 <__assert_fail@plt+0xf68>
   127d8:	bl	11688 <__errno_location@plt>
   127dc:	mov	r3, #22
   127e0:	str	r3, [r0]
   127e4:	mov	r0, #0
   127e8:	b	12e74 <__assert_fail@plt+0x1648>
   127ec:	bl	11688 <__errno_location@plt>
   127f0:	mov	r3, #22
   127f4:	str	r3, [r0]
   127f8:	mov	r0, #0
   127fc:	b	12e74 <__assert_fail@plt+0x1648>
   12800:	bl	11688 <__errno_location@plt>
   12804:	mov	r3, #2
   12808:	str	r3, [r0]
   1280c:	mov	r0, #0
   12810:	b	12e74 <__assert_fail@plt+0x1648>
   12814:	bl	19448 <lchmod@@Base+0x2fc0>
   12818:	mov	r1, #0
   1281c:	mov	r0, r5
   12820:	bl	1152c <rawmemchr@plt>
   12824:	mov	r1, r0
   12828:	b	12844 <__assert_fail@plt+0x1018>
   1282c:	add	r1, sp, #3232	; 0xca0
   12830:	add	r1, r1, #8
   12834:	mov	r3, #47	; 0x2f
   12838:	strb	r3, [r1, #-1024]!	; 0xfffffc00
   1283c:	mov	r5, r1
   12840:	add	r1, r1, #1
   12844:	and	r3, r6, #4
   12848:	str	r3, [sp, #12]
   1284c:	mov	r3, #0
   12850:	str	r3, [sp, #28]
   12854:	str	r3, [sp, #20]
   12858:	str	r3, [sp, #24]
   1285c:	ldrb	r2, [r4]
   12860:	cmp	r2, #0
   12864:	beq	12da0 <__assert_fail@plt+0x1574>
   12868:	cmp	r2, #47	; 0x2f
   1286c:	bne	1288c <__assert_fail@plt+0x1060>
   12870:	ldrb	r2, [r4, #1]!
   12874:	cmp	r2, #47	; 0x2f
   12878:	beq	12870 <__assert_fail@plt+0x1044>
   1287c:	mov	r3, r2
   12880:	cmp	r2, #47	; 0x2f
   12884:	cmpne	r2, #0
   12888:	beq	1299c <__assert_fail@plt+0x1170>
   1288c:	mov	r6, r4
   12890:	ldrb	r3, [r6, #1]!
   12894:	cmp	r3, #0
   12898:	cmpne	r3, #47	; 0x2f
   1289c:	bne	12890 <__assert_fail@plt+0x1064>
   128a0:	str	r6, [sp, #16]
   128a4:	subs	r8, r6, r4
   128a8:	beq	12da0 <__assert_fail@plt+0x1574>
   128ac:	cmp	r2, #46	; 0x2e
   128b0:	movne	r3, #0
   128b4:	moveq	r3, #1
   128b8:	cmp	r8, #1
   128bc:	cmpeq	r2, #46	; 0x2e
   128c0:	beq	12d98 <__assert_fail@plt+0x156c>
   128c4:	cmp	r8, #2
   128c8:	movne	r3, #0
   128cc:	andeq	r3, r3, #1
   128d0:	cmp	r3, #0
   128d4:	bne	129a4 <__assert_fail@plt+0x1178>
   128d8:	ldrb	r3, [r1, #-1]
   128dc:	cmp	r3, #47	; 0x2f
   128e0:	addne	r0, r1, #1
   128e4:	movne	r3, #47	; 0x2f
   128e8:	strbne	r3, [r1]
   128ec:	moveq	r0, r1
   128f0:	mov	r2, r0
   128f4:	add	r9, r8, #2
   128f8:	ldr	r3, [sp, #2212]	; 0x8a4
   128fc:	add	r3, r5, r3
   12900:	sub	r3, r3, r0
   12904:	cmp	r3, r9
   12908:	bcs	1293c <__assert_fail@plt+0x1110>
   1290c:	sub	r7, r2, r5
   12910:	add	r0, sp, #2208	; 0x8a0
   12914:	bl	18788 <lchmod@@Base+0x2300>
   12918:	cmp	r0, #0
   1291c:	beq	129fc <__assert_fail@plt+0x11d0>
   12920:	ldr	r5, [sp, #2208]	; 0x8a0
   12924:	add	r0, r5, r7
   12928:	mov	r2, r0
   1292c:	ldr	r3, [sp, #2212]	; 0x8a4
   12930:	sub	r3, r3, r7
   12934:	cmp	r3, r9
   12938:	bcc	1290c <__assert_fail@plt+0x10e0>
   1293c:	mov	r2, r8
   12940:	mov	r1, r4
   12944:	bl	11610 <mempcpy@plt>
   12948:	str	r0, [sp, #32]
   1294c:	mov	r3, #0
   12950:	strb	r3, [r0]
   12954:	ldr	r3, [sp, #12]
   12958:	cmp	r3, #0
   1295c:	bne	12c1c <__assert_fail@plt+0x13f0>
   12960:	ldr	sl, [sp, #1176]	; 0x498
   12964:	ldr	r7, [sp, #1180]	; 0x49c
   12968:	sub	r7, r7, #1
   1296c:	mov	r2, r7
   12970:	mov	r1, sl
   12974:	mov	r0, r5
   12978:	bl	1155c <readlink@plt>
   1297c:	cmp	r7, r0
   12980:	bgt	12a00 <__assert_fail@plt+0x11d4>
   12984:	add	r0, sp, #1168	; 0x490
   12988:	add	r0, r0, #8
   1298c:	bl	18718 <lchmod@@Base+0x2290>
   12990:	cmp	r0, #0
   12994:	bne	12960 <__assert_fail@plt+0x1134>
   12998:	bl	19448 <lchmod@@Base+0x2fc0>
   1299c:	mov	r6, r4
   129a0:	b	128a0 <__assert_fail@plt+0x1074>
   129a4:	ldrb	r3, [r4, #1]
   129a8:	cmp	r3, #46	; 0x2e
   129ac:	bne	128d8 <__assert_fail@plt+0x10ac>
   129b0:	add	r3, r5, #1
   129b4:	cmp	r1, r3
   129b8:	bls	12d98 <__assert_fail@plt+0x156c>
   129bc:	sub	r3, r1, #1
   129c0:	cmp	r5, r3
   129c4:	bcs	12d48 <__assert_fail@plt+0x151c>
   129c8:	ldrb	r2, [r1, #-2]
   129cc:	cmp	r2, #47	; 0x2f
   129d0:	moveq	r1, r3
   129d4:	beq	12d98 <__assert_fail@plt+0x156c>
   129d8:	sub	r3, r1, #2
   129dc:	mov	r2, r5
   129e0:	mov	r1, r3
   129e4:	cmp	r2, r3
   129e8:	beq	12d98 <__assert_fail@plt+0x156c>
   129ec:	ldrb	r0, [r3, #-1]!
   129f0:	cmp	r0, #47	; 0x2f
   129f4:	bne	129e0 <__assert_fail@plt+0x11b4>
   129f8:	b	12d98 <__assert_fail@plt+0x156c>
   129fc:	bl	19448 <lchmod@@Base+0x2fc0>
   12a00:	mov	r9, r0
   12a04:	cmp	r0, #0
   12a08:	blt	12c1c <__assert_fail@plt+0x13f0>
   12a0c:	ldr	r3, [sp, #24]
   12a10:	cmp	r3, #19
   12a14:	addle	r3, r3, #1
   12a18:	strle	r3, [sp, #24]
   12a1c:	ble	12af0 <__assert_fail@plt+0x12c4>
   12a20:	ldrb	r3, [r4]
   12a24:	cmp	r3, #0
   12a28:	beq	12af0 <__assert_fail@plt+0x12c4>
   12a2c:	rsb	r8, r8, #0
   12a30:	mov	r3, #0
   12a34:	ldr	r7, [sp, #32]
   12a38:	strb	r3, [r7, r8]
   12a3c:	ldrb	r1, [r5]
   12a40:	add	r2, sp, #40	; 0x28
   12a44:	ldr	r3, [pc, #1108]	; 12ea0 <__assert_fail@plt+0x1674>
   12a48:	cmp	r1, #0
   12a4c:	movne	r3, r5
   12a50:	mov	r1, r3
   12a54:	mov	r0, #3
   12a58:	bl	117c0 <__xstat64@plt>
   12a5c:	cmp	r0, #0
   12a60:	bne	12aa4 <__assert_fail@plt+0x1278>
   12a64:	ldrb	r3, [r4]
   12a68:	strb	r3, [r7, r8]
   12a6c:	ldr	r3, [sp, #28]
   12a70:	cmp	r3, #0
   12a74:	beq	12ab4 <__assert_fail@plt+0x1288>
   12a78:	add	r2, sp, #40	; 0x28
   12a7c:	mov	r1, r4
   12a80:	ldr	r0, [sp, #28]
   12a84:	bl	13118 <__assert_fail@plt+0x18ec>
   12a88:	cmp	r0, #0
   12a8c:	beq	12ae0 <__assert_fail@plt+0x12b4>
   12a90:	cmp	fp, #2
   12a94:	beq	12bf4 <__assert_fail@plt+0x13c8>
   12a98:	bl	11688 <__errno_location@plt>
   12a9c:	mov	r3, #40	; 0x28
   12aa0:	str	r3, [r0]
   12aa4:	mov	r6, r5
   12aa8:	ldr	r5, [sp, #32]
   12aac:	mov	r4, #1
   12ab0:	b	12e00 <__assert_fail@plt+0x15d4>
   12ab4:	ldr	r3, [pc, #1000]	; 12ea4 <__assert_fail@plt+0x1678>
   12ab8:	str	r3, [sp]
   12abc:	ldr	r3, [pc, #996]	; 12ea8 <__assert_fail@plt+0x167c>
   12ac0:	ldr	r2, [pc, #996]	; 12eac <__assert_fail@plt+0x1680>
   12ac4:	mov	r1, #0
   12ac8:	mov	r0, #7
   12acc:	bl	15c88 <__assert_fail@plt+0x445c>
   12ad0:	subs	r3, r0, #0
   12ad4:	str	r3, [sp, #28]
   12ad8:	bne	12a78 <__assert_fail@plt+0x124c>
   12adc:	bl	19448 <lchmod@@Base+0x2fc0>
   12ae0:	add	r2, sp, #40	; 0x28
   12ae4:	mov	r1, r4
   12ae8:	ldr	r0, [sp, #28]
   12aec:	bl	130b0 <__assert_fail@plt+0x1884>
   12af0:	mov	r3, #0
   12af4:	strb	r3, [sl, r9]
   12af8:	ldr	r8, [sp, #144]	; 0x90
   12afc:	ldr	r3, [sp, #20]
   12b00:	cmp	r3, #0
   12b04:	ldrne	r3, [sp, #16]
   12b08:	subne	r3, r3, r8
   12b0c:	moveq	r3, #0
   12b10:	str	r3, [sp, #36]	; 0x24
   12b14:	mov	r0, r6
   12b18:	bl	11658 <strlen@plt>
   12b1c:	mov	r7, r0
   12b20:	adds	r4, r9, r0
   12b24:	bcs	12bfc <__assert_fail@plt+0x13d0>
   12b28:	ldr	r3, [sp, #148]	; 0x94
   12b2c:	cmp	r3, r4
   12b30:	addls	r3, sp, #152	; 0x98
   12b34:	addls	r3, sp, #144	; 0x90
   12b38:	strls	r3, [sp, #16]
   12b3c:	bhi	12b60 <__assert_fail@plt+0x1334>
   12b40:	ldr	r0, [sp, #16]
   12b44:	bl	18788 <lchmod@@Base+0x2300>
   12b48:	cmp	r0, #0
   12b4c:	beq	12c00 <__assert_fail@plt+0x13d4>
   12b50:	ldr	r3, [sp, #148]	; 0x94
   12b54:	cmp	r4, r3
   12b58:	bcs	12b40 <__assert_fail@plt+0x1314>
   12b5c:	ldr	r8, [sp, #144]	; 0x90
   12b60:	ldr	r3, [sp, #20]
   12b64:	cmp	r3, #0
   12b68:	ldrne	r3, [sp, #36]	; 0x24
   12b6c:	addne	r6, r8, r3
   12b70:	add	r2, r7, #1
   12b74:	mov	r1, r6
   12b78:	add	r0, r8, r9
   12b7c:	bl	11484 <memmove@plt>
   12b80:	mov	r2, r9
   12b84:	mov	r1, sl
   12b88:	mov	r0, r8
   12b8c:	bl	114b4 <memcpy@plt>
   12b90:	ldrb	r3, [sl]
   12b94:	cmp	r3, #47	; 0x2f
   12b98:	beq	12c04 <__assert_fail@plt+0x13d8>
   12b9c:	add	r3, r5, #1
   12ba0:	ldr	r2, [sp, #32]
   12ba4:	cmp	r2, r3
   12ba8:	bls	12d50 <__assert_fail@plt+0x1524>
   12bac:	sub	r1, r2, #1
   12bb0:	cmp	r1, r5
   12bb4:	bls	12d64 <__assert_fail@plt+0x1538>
   12bb8:	ldrb	r3, [r2, #-2]
   12bbc:	cmp	r3, #47	; 0x2f
   12bc0:	beq	12d74 <__assert_fail@plt+0x1548>
   12bc4:	sub	r3, r2, #2
   12bc8:	mov	ip, r5
   12bcc:	mov	r1, r3
   12bd0:	cmp	r3, ip
   12bd4:	beq	12d84 <__assert_fail@plt+0x1558>
   12bd8:	ldrb	r2, [r3, #-1]!
   12bdc:	cmp	r2, #47	; 0x2f
   12be0:	bne	12bcc <__assert_fail@plt+0x13a0>
   12be4:	mov	r6, r0
   12be8:	mov	r3, #1
   12bec:	str	r3, [sp, #20]
   12bf0:	b	12d98 <__assert_fail@plt+0x156c>
   12bf4:	ldr	r1, [sp, #32]
   12bf8:	b	12d98 <__assert_fail@plt+0x156c>
   12bfc:	bl	19448 <lchmod@@Base+0x2fc0>
   12c00:	bl	19448 <lchmod@@Base+0x2fc0>
   12c04:	add	r1, r5, #1
   12c08:	strb	r3, [r5]
   12c0c:	mov	r6, r0
   12c10:	mov	r3, #1
   12c14:	str	r3, [sp, #20]
   12c18:	b	12d98 <__assert_fail@plt+0x156c>
   12c1c:	cmp	fp, #2
   12c20:	ldreq	r1, [sp, #32]
   12c24:	beq	12d98 <__assert_fail@plt+0x156c>
   12c28:	mov	r3, r6
   12c2c:	ldrb	r2, [r3]
   12c30:	cmp	r2, #47	; 0x2f
   12c34:	beq	12c98 <__assert_fail@plt+0x146c>
   12c38:	ldr	r3, [sp, #12]
   12c3c:	cmp	r3, #0
   12c40:	bne	12d10 <__assert_fail@plt+0x14e4>
   12c44:	bl	11688 <__errno_location@plt>
   12c48:	ldr	r4, [r0]
   12c4c:	subs	r4, r4, #22
   12c50:	movne	r4, #1
   12c54:	cmp	r4, #0
   12c58:	beq	12d94 <__assert_fail@plt+0x1568>
   12c5c:	cmp	fp, #1
   12c60:	bne	12dd0 <__assert_fail@plt+0x15a4>
   12c64:	bl	11688 <__errno_location@plt>
   12c68:	ldr	r3, [r0]
   12c6c:	cmp	r3, #2
   12c70:	bne	12ddc <__assert_fail@plt+0x15b0>
   12c74:	ldr	r1, [pc, #564]	; 12eb0 <__assert_fail@plt+0x1684>
   12c78:	mov	r0, r6
   12c7c:	bl	11820 <strspn@plt>
   12c80:	ldrb	r3, [r6, r0]
   12c84:	cmp	r3, #0
   12c88:	bne	12de8 <__assert_fail@plt+0x15bc>
   12c8c:	ldr	r1, [sp, #32]
   12c90:	b	12d98 <__assert_fail@plt+0x156c>
   12c94:	mov	r3, r1
   12c98:	add	r1, r3, #1
   12c9c:	ldrb	r2, [r3, #1]
   12ca0:	cmp	r2, #47	; 0x2f
   12ca4:	beq	12c94 <__assert_fail@plt+0x1468>
   12ca8:	add	r3, r3, #2
   12cac:	cmp	r2, #0
   12cb0:	beq	12ce0 <__assert_fail@plt+0x14b4>
   12cb4:	cmp	r2, #46	; 0x2e
   12cb8:	bne	12c38 <__assert_fail@plt+0x140c>
   12cbc:	ldrb	r2, [r1, #1]
   12cc0:	cmp	r2, #0
   12cc4:	beq	12ce0 <__assert_fail@plt+0x14b4>
   12cc8:	cmp	r2, #46	; 0x2e
   12ccc:	bne	12c2c <__assert_fail@plt+0x1400>
   12cd0:	ldrb	r2, [r1, #2]
   12cd4:	cmp	r2, #47	; 0x2f
   12cd8:	cmpne	r2, #0
   12cdc:	bne	12c2c <__assert_fail@plt+0x1400>
   12ce0:	ldr	r3, [pc, #456]	; 12eb0 <__assert_fail@plt+0x1684>
   12ce4:	ldrh	r3, [r3]
   12ce8:	ldr	r2, [sp, #32]
   12cec:	strh	r3, [r2]
   12cf0:	mov	r3, #512	; 0x200
   12cf4:	mov	r2, #0
   12cf8:	mov	r1, r5
   12cfc:	mvn	r0, #99	; 0x63
   12d00:	bl	1149c <faccessat@plt>
   12d04:	adds	r4, r0, #0
   12d08:	movne	r4, #1
   12d0c:	b	12c54 <__assert_fail@plt+0x1428>
   12d10:	ldrb	r3, [r6]
   12d14:	cmp	r3, #0
   12d18:	movne	r0, #0
   12d1c:	beq	12d28 <__assert_fail@plt+0x14fc>
   12d20:	mov	r4, r0
   12d24:	b	12c54 <__assert_fail@plt+0x1428>
   12d28:	mov	r3, #512	; 0x200
   12d2c:	mov	r2, #0
   12d30:	mov	r1, r5
   12d34:	mvn	r0, #99	; 0x63
   12d38:	bl	1149c <faccessat@plt>
   12d3c:	adds	r0, r0, #0
   12d40:	movne	r0, #1
   12d44:	b	12d20 <__assert_fail@plt+0x14f4>
   12d48:	mov	r1, r3
   12d4c:	b	12d98 <__assert_fail@plt+0x156c>
   12d50:	mov	r6, r0
   12d54:	ldr	r1, [sp, #32]
   12d58:	mov	r3, #1
   12d5c:	str	r3, [sp, #20]
   12d60:	b	12d98 <__assert_fail@plt+0x156c>
   12d64:	mov	r6, r0
   12d68:	mov	r3, #1
   12d6c:	str	r3, [sp, #20]
   12d70:	b	12d98 <__assert_fail@plt+0x156c>
   12d74:	mov	r6, r0
   12d78:	mov	r3, #1
   12d7c:	str	r3, [sp, #20]
   12d80:	b	12d98 <__assert_fail@plt+0x156c>
   12d84:	mov	r6, r0
   12d88:	mov	r3, #1
   12d8c:	str	r3, [sp, #20]
   12d90:	b	12d98 <__assert_fail@plt+0x156c>
   12d94:	ldr	r1, [sp, #32]
   12d98:	mov	r4, r6
   12d9c:	b	1285c <__assert_fail@plt+0x1030>
   12da0:	add	r3, r5, #1
   12da4:	cmp	r1, r3
   12da8:	bls	12df4 <__assert_fail@plt+0x15c8>
   12dac:	ldrb	r3, [r1, #-1]
   12db0:	cmp	r3, #47	; 0x2f
   12db4:	moveq	r6, r5
   12db8:	subeq	r5, r1, #1
   12dbc:	moveq	r4, #0
   12dc0:	movne	r6, r5
   12dc4:	movne	r5, r1
   12dc8:	movne	r4, #0
   12dcc:	b	12e00 <__assert_fail@plt+0x15d4>
   12dd0:	mov	r6, r5
   12dd4:	ldr	r5, [sp, #32]
   12dd8:	b	12e00 <__assert_fail@plt+0x15d4>
   12ddc:	mov	r6, r5
   12de0:	ldr	r5, [sp, #32]
   12de4:	b	12e00 <__assert_fail@plt+0x15d4>
   12de8:	mov	r6, r5
   12dec:	ldr	r5, [sp, #32]
   12df0:	b	12e00 <__assert_fail@plt+0x15d4>
   12df4:	mov	r6, r5
   12df8:	mov	r5, r1
   12dfc:	mov	r4, #0
   12e00:	ldr	r0, [sp, #28]
   12e04:	cmp	r0, #0
   12e08:	beq	12e1c <__assert_fail@plt+0x15f0>
   12e0c:	bl	15e18 <__assert_fail@plt+0x45ec>
   12e10:	b	12e1c <__assert_fail@plt+0x15f0>
   12e14:	mov	r6, r5
   12e18:	mov	r4, #1
   12e1c:	ldr	r0, [sp, #144]	; 0x90
   12e20:	add	r3, sp, #152	; 0x98
   12e24:	cmp	r0, r3
   12e28:	beq	12e30 <__assert_fail@plt+0x1604>
   12e2c:	bl	1315c <__assert_fail@plt+0x1930>
   12e30:	add	r3, sp, #3232	; 0xca0
   12e34:	add	r3, r3, #8
   12e38:	ldr	r0, [r3, #-2064]!	; 0xfffff7f0
   12e3c:	add	r3, r3, #8
   12e40:	cmp	r0, r3
   12e44:	beq	12e4c <__assert_fail@plt+0x1620>
   12e48:	bl	1315c <__assert_fail@plt+0x1930>
   12e4c:	cmp	r4, #0
   12e50:	beq	12e80 <__assert_fail@plt+0x1654>
   12e54:	ldr	r0, [sp, #2208]	; 0x8a0
   12e58:	add	r3, sp, #2208	; 0x8a0
   12e5c:	add	r3, r3, #8
   12e60:	cmp	r0, r3
   12e64:	moveq	r0, #0
   12e68:	beq	12e74 <__assert_fail@plt+0x1648>
   12e6c:	bl	1315c <__assert_fail@plt+0x1930>
   12e70:	mov	r0, #0
   12e74:	add	sp, sp, #3232	; 0xca0
   12e78:	add	sp, sp, #12
   12e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e80:	mov	r3, #0
   12e84:	strb	r3, [r5], #1
   12e88:	sub	r1, r5, r6
   12e8c:	add	r0, sp, #2208	; 0x8a0
   12e90:	bl	186d0 <lchmod@@Base+0x2248>
   12e94:	cmp	r0, #0
   12e98:	bne	12e74 <__assert_fail@plt+0x1648>
   12e9c:	bl	19448 <lchmod@@Base+0x2fc0>
   12ea0:	andeq	sl, r1, r8, asr sl
   12ea4:	andeq	r6, r1, ip, lsr #7
   12ea8:	andeq	r6, r1, r8, asr r3
   12eac:	andeq	r6, r1, r0, lsr #6
   12eb0:	andeq	sl, r1, ip, asr sl
   12eb4:	ldr	r3, [pc, #4]	; 12ec0 <__assert_fail@plt+0x1694>
   12eb8:	str	r0, [r3]
   12ebc:	bx	lr
   12ec0:	andeq	ip, r2, r8, ror #3
   12ec4:	ldr	r3, [pc, #4]	; 12ed0 <__assert_fail@plt+0x16a4>
   12ec8:	strb	r0, [r3, #4]
   12ecc:	bx	lr
   12ed0:	andeq	ip, r2, r8, ror #3
   12ed4:	push	{r4, r5, r6, lr}
   12ed8:	sub	sp, sp, #8
   12edc:	ldr	r3, [pc, #200]	; 12fac <__assert_fail@plt+0x1780>
   12ee0:	ldr	r0, [r3]
   12ee4:	bl	19698 <lchmod@@Base+0x3210>
   12ee8:	cmp	r0, #0
   12eec:	beq	12f10 <__assert_fail@plt+0x16e4>
   12ef0:	ldr	r3, [pc, #184]	; 12fb0 <__assert_fail@plt+0x1784>
   12ef4:	ldrb	r3, [r3, #4]
   12ef8:	cmp	r3, #0
   12efc:	beq	12f2c <__assert_fail@plt+0x1700>
   12f00:	bl	11688 <__errno_location@plt>
   12f04:	ldr	r3, [r0]
   12f08:	cmp	r3, #32
   12f0c:	bne	12f2c <__assert_fail@plt+0x1700>
   12f10:	ldr	r3, [pc, #156]	; 12fb4 <__assert_fail@plt+0x1788>
   12f14:	ldr	r0, [r3]
   12f18:	bl	19698 <lchmod@@Base+0x3210>
   12f1c:	cmp	r0, #0
   12f20:	bne	12fa0 <__assert_fail@plt+0x1774>
   12f24:	add	sp, sp, #8
   12f28:	pop	{r4, r5, r6, pc}
   12f2c:	mov	r2, #5
   12f30:	ldr	r1, [pc, #128]	; 12fb8 <__assert_fail@plt+0x178c>
   12f34:	mov	r0, #0
   12f38:	bl	114f0 <dcgettext@plt>
   12f3c:	mov	r4, r0
   12f40:	ldr	r3, [pc, #104]	; 12fb0 <__assert_fail@plt+0x1784>
   12f44:	ldr	r5, [r3]
   12f48:	cmp	r5, #0
   12f4c:	beq	12f84 <__assert_fail@plt+0x1758>
   12f50:	bl	11688 <__errno_location@plt>
   12f54:	ldr	r6, [r0]
   12f58:	mov	r0, r5
   12f5c:	bl	18534 <lchmod@@Base+0x20ac>
   12f60:	str	r4, [sp]
   12f64:	mov	r3, r0
   12f68:	ldr	r2, [pc, #76]	; 12fbc <__assert_fail@plt+0x1790>
   12f6c:	mov	r1, r6
   12f70:	mov	r0, #0
   12f74:	bl	115b0 <error@plt>
   12f78:	ldr	r3, [pc, #64]	; 12fc0 <__assert_fail@plt+0x1794>
   12f7c:	ldr	r0, [r3]
   12f80:	bl	114a8 <_exit@plt>
   12f84:	bl	11688 <__errno_location@plt>
   12f88:	mov	r3, r4
   12f8c:	ldr	r2, [pc, #48]	; 12fc4 <__assert_fail@plt+0x1798>
   12f90:	ldr	r1, [r0]
   12f94:	mov	r0, #0
   12f98:	bl	115b0 <error@plt>
   12f9c:	b	12f78 <__assert_fail@plt+0x174c>
   12fa0:	ldr	r3, [pc, #24]	; 12fc0 <__assert_fail@plt+0x1794>
   12fa4:	ldr	r0, [r3]
   12fa8:	bl	114a8 <_exit@plt>
   12fac:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12fb0:	andeq	ip, r2, r8, ror #3
   12fb4:	ldrdeq	ip, [r2], -r8
   12fb8:	andeq	sl, r1, r0, ror #20
   12fbc:	andeq	sl, r1, ip, ror #20
   12fc0:	andeq	ip, r2, r0, lsl #3
   12fc4:	andeq	sl, r1, r0, ror sl
   12fc8:	push	{r4, lr}
   12fcc:	bl	13054 <__assert_fail@plt+0x1828>
   12fd0:	cmp	r0, #0
   12fd4:	popne	{r4, pc}
   12fd8:	bl	19448 <lchmod@@Base+0x2fc0>
   12fdc:	push	{r4, r5, r6, lr}
   12fe0:	mov	r5, r0
   12fe4:	ldrb	r4, [r0]
   12fe8:	cmp	r4, #47	; 0x2f
   12fec:	movne	r4, #0
   12ff0:	moveq	r4, #1
   12ff4:	bl	195d8 <lchmod@@Base+0x3150>
   12ff8:	sub	r0, r0, r5
   12ffc:	cmp	r0, r4
   13000:	bls	13038 <__assert_fail@plt+0x180c>
   13004:	sub	r3, r0, #1
   13008:	add	r2, r5, r3
   1300c:	ldrb	r1, [r5, r3]
   13010:	cmp	r1, #47	; 0x2f
   13014:	bne	13040 <__assert_fail@plt+0x1814>
   13018:	cmp	r4, r3
   1301c:	beq	1304c <__assert_fail@plt+0x1820>
   13020:	sub	r0, r3, #1
   13024:	ldrb	r1, [r2, #-1]!
   13028:	cmp	r1, #47	; 0x2f
   1302c:	bne	13048 <__assert_fail@plt+0x181c>
   13030:	mov	r3, r0
   13034:	b	13018 <__assert_fail@plt+0x17ec>
   13038:	mov	r4, r0
   1303c:	b	1304c <__assert_fail@plt+0x1820>
   13040:	mov	r4, r0
   13044:	b	1304c <__assert_fail@plt+0x1820>
   13048:	mov	r4, r3
   1304c:	mov	r0, r4
   13050:	pop	{r4, r5, r6, pc}
   13054:	push	{r4, r5, r6, r7, r8, lr}
   13058:	mov	r7, r0
   1305c:	bl	12fdc <__assert_fail@plt+0x17b0>
   13060:	mov	r4, r0
   13064:	add	r6, r0, #1
   13068:	cmp	r0, #0
   1306c:	movne	r0, r6
   13070:	addeq	r0, r6, #1
   13074:	bl	19558 <lchmod@@Base+0x30d0>
   13078:	subs	r5, r0, #0
   1307c:	beq	130a8 <__assert_fail@plt+0x187c>
   13080:	mov	r2, r4
   13084:	mov	r1, r7
   13088:	mov	r0, r5
   1308c:	bl	114b4 <memcpy@plt>
   13090:	cmp	r4, #0
   13094:	moveq	r3, #46	; 0x2e
   13098:	strbeq	r3, [r5, r4]
   1309c:	moveq	r4, r6
   130a0:	mov	r3, #0
   130a4:	strb	r3, [r5, r4]
   130a8:	mov	r0, r5
   130ac:	pop	{r4, r5, r6, r7, r8, pc}
   130b0:	push	{r4, r5, r6, r7, r8, lr}
   130b4:	subs	r7, r0, #0
   130b8:	popeq	{r4, r5, r6, r7, r8, pc}
   130bc:	mov	r5, r2
   130c0:	mov	r6, r1
   130c4:	mov	r0, #24
   130c8:	bl	18ea4 <lchmod@@Base+0x2a1c>
   130cc:	mov	r4, r0
   130d0:	mov	r0, r6
   130d4:	bl	1942c <lchmod@@Base+0x2fa4>
   130d8:	str	r0, [r4]
   130dc:	ldrd	r2, [r5, #96]	; 0x60
   130e0:	strd	r2, [r4, #8]
   130e4:	ldrd	r2, [r5]
   130e8:	strd	r2, [r4, #16]
   130ec:	mov	r1, r4
   130f0:	mov	r0, r7
   130f4:	bl	161d4 <__assert_fail@plt+0x49a8>
   130f8:	cmp	r0, #0
   130fc:	beq	13114 <__assert_fail@plt+0x18e8>
   13100:	cmp	r4, r0
   13104:	popeq	{r4, r5, r6, r7, r8, pc}
   13108:	mov	r0, r4
   1310c:	bl	163ac <__assert_fail@plt+0x4b80>
   13110:	pop	{r4, r5, r6, r7, r8, pc}
   13114:	bl	19448 <lchmod@@Base+0x2fc0>
   13118:	cmp	r0, #0
   1311c:	beq	13154 <__assert_fail@plt+0x1928>
   13120:	push	{r4, r5, lr}
   13124:	sub	sp, sp, #28
   13128:	str	r1, [sp]
   1312c:	ldrd	r4, [r2, #96]	; 0x60
   13130:	strd	r4, [sp, #8]
   13134:	ldrd	r2, [r2]
   13138:	strd	r2, [sp, #16]
   1313c:	mov	r1, sp
   13140:	bl	159d0 <__assert_fail@plt+0x41a4>
   13144:	adds	r0, r0, #0
   13148:	movne	r0, #1
   1314c:	add	sp, sp, #28
   13150:	pop	{r4, r5, pc}
   13154:	mov	r0, #0
   13158:	bx	lr
   1315c:	push	{r4, r5, lr}
   13160:	sub	sp, sp, #12
   13164:	mov	r5, r0
   13168:	bl	11688 <__errno_location@plt>
   1316c:	mov	r4, r0
   13170:	ldr	r3, [r0]
   13174:	str	r3, [sp]
   13178:	str	r3, [sp, #4]
   1317c:	mov	r3, #0
   13180:	str	r3, [r0]
   13184:	mov	r0, r5
   13188:	bl	11490 <free@plt>
   1318c:	ldr	r3, [r4]
   13190:	cmp	r3, #0
   13194:	moveq	r3, #4
   13198:	movne	r3, #0
   1319c:	add	r2, sp, #8
   131a0:	add	r3, r2, r3
   131a4:	ldr	r3, [r3, #-8]
   131a8:	str	r3, [r4]
   131ac:	add	sp, sp, #12
   131b0:	pop	{r4, r5, pc}
   131b4:	push	{r4, r5}
   131b8:	ldrd	r4, [r0, #8]
   131bc:	ldrd	r2, [r1, #8]
   131c0:	cmp	r5, r3
   131c4:	cmpeq	r4, r2
   131c8:	movne	r0, #0
   131cc:	beq	131d8 <__assert_fail@plt+0x19ac>
   131d0:	pop	{r4, r5}
   131d4:	bx	lr
   131d8:	ldrd	r4, [r0]
   131dc:	ldrd	r2, [r1]
   131e0:	cmp	r5, r3
   131e4:	cmpeq	r4, r2
   131e8:	moveq	r0, #1
   131ec:	movne	r0, #0
   131f0:	b	131d0 <__assert_fail@plt+0x19a4>
   131f4:	push	{r4, lr}
   131f8:	mov	r2, r1
   131fc:	mov	r3, #0
   13200:	ldrd	r0, [r0, #8]
   13204:	bl	1a2bc <lchmod@@Base+0x3e34>
   13208:	mov	r0, r2
   1320c:	pop	{r4, pc}
   13210:	push	{r4, lr}
   13214:	mov	r2, r1
   13218:	mov	r3, #0
   1321c:	ldrd	r0, [r0]
   13220:	bl	1a2bc <lchmod@@Base+0x3e34>
   13224:	mov	r0, r2
   13228:	pop	{r4, pc}
   1322c:	push	{r4, r5}
   13230:	ldrd	r4, [r0]
   13234:	ldrd	r2, [r1]
   13238:	cmp	r5, r3
   1323c:	cmpeq	r4, r2
   13240:	moveq	r0, #1
   13244:	movne	r0, #0
   13248:	pop	{r4, r5}
   1324c:	bx	lr
   13250:	push	{r4, r5}
   13254:	ldr	r3, [r0]
   13258:	ldrd	r4, [r3, #160]	; 0xa0
   1325c:	ldr	r3, [r1]
   13260:	ldrd	r2, [r3, #160]	; 0xa0
   13264:	cmp	r5, r3
   13268:	cmpeq	r4, r2
   1326c:	movhi	r0, #1
   13270:	movls	r0, #0
   13274:	movcc	r3, #1
   13278:	movcs	r3, #0
   1327c:	sub	r0, r0, r3
   13280:	pop	{r4, r5}
   13284:	bx	lr
   13288:	push	{r4, r5, r6, lr}
   1328c:	mov	r4, r0
   13290:	ldr	r3, [r0, #36]	; 0x24
   13294:	add	r1, r1, #256	; 0x100
   13298:	adds	r1, r1, r3
   1329c:	bcs	132c0 <__assert_fail@plt+0x1a94>
   132a0:	str	r1, [r0, #36]	; 0x24
   132a4:	ldr	r0, [r0, #24]
   132a8:	bl	19588 <lchmod@@Base+0x3100>
   132ac:	cmp	r0, #0
   132b0:	beq	132e4 <__assert_fail@plt+0x1ab8>
   132b4:	str	r0, [r4, #24]
   132b8:	mov	r0, #1
   132bc:	pop	{r4, r5, r6, pc}
   132c0:	ldr	r0, [r0, #24]
   132c4:	bl	1315c <__assert_fail@plt+0x1930>
   132c8:	mov	r5, #0
   132cc:	str	r5, [r4, #24]
   132d0:	bl	11688 <__errno_location@plt>
   132d4:	mov	r3, #36	; 0x24
   132d8:	str	r3, [r0]
   132dc:	mov	r0, r5
   132e0:	pop	{r4, r5, r6, pc}
   132e4:	ldr	r0, [r4, #24]
   132e8:	bl	1315c <__assert_fail@plt+0x1930>
   132ec:	mov	r0, #0
   132f0:	str	r0, [r4, #24]
   132f4:	pop	{r4, r5, r6, pc}
   132f8:	push	{r4, r5, r6, lr}
   132fc:	sub	sp, sp, #8
   13300:	mov	r4, r1
   13304:	add	r5, r1, #64	; 0x40
   13308:	ldr	r3, [r1, #48]	; 0x30
   1330c:	cmp	r3, #0
   13310:	bne	13320 <__assert_fail@plt+0x1af4>
   13314:	ldr	r3, [r0, #48]	; 0x30
   13318:	tst	r3, #1
   1331c:	bne	13330 <__assert_fail@plt+0x1b04>
   13320:	ldr	r3, [r0, #48]	; 0x30
   13324:	lsl	r3, r3, #30
   13328:	orrs	r3, r2, r3, lsr #31
   1332c:	beq	133a8 <__assert_fail@plt+0x1b7c>
   13330:	mov	r2, r5
   13334:	ldr	r1, [r4, #24]
   13338:	mov	r0, #3
   1333c:	bl	117c0 <__xstat64@plt>
   13340:	cmp	r0, #0
   13344:	beq	133dc <__assert_fail@plt+0x1bb0>
   13348:	bl	11688 <__errno_location@plt>
   1334c:	mov	r6, r0
   13350:	ldr	r3, [r0]
   13354:	cmp	r3, #2
   13358:	beq	13380 <__assert_fail@plt+0x1b54>
   1335c:	ldr	r3, [r6]
   13360:	str	r3, [r4, #32]
   13364:	mov	r2, #104	; 0x68
   13368:	mov	r1, #0
   1336c:	mov	r0, r5
   13370:	bl	116ac <memset@plt>
   13374:	mov	r0, #10
   13378:	add	sp, sp, #8
   1337c:	pop	{r4, r5, r6, pc}
   13380:	mov	r2, r5
   13384:	ldr	r1, [r4, #24]
   13388:	mov	r0, #3
   1338c:	bl	117f0 <__lxstat64@plt>
   13390:	cmp	r0, #0
   13394:	bne	1335c <__assert_fail@plt+0x1b30>
   13398:	mov	r3, #0
   1339c:	str	r3, [r6]
   133a0:	mov	r0, #13
   133a4:	b	13378 <__assert_fail@plt+0x1b4c>
   133a8:	ldr	r1, [r0, #32]
   133ac:	mov	r3, #256	; 0x100
   133b0:	str	r3, [sp]
   133b4:	mov	r3, r5
   133b8:	ldr	r2, [r4, #24]
   133bc:	mov	r0, #3
   133c0:	bl	11538 <__fxstatat64@plt>
   133c4:	cmp	r0, #0
   133c8:	beq	133dc <__assert_fail@plt+0x1bb0>
   133cc:	bl	11688 <__errno_location@plt>
   133d0:	ldr	r3, [r0]
   133d4:	str	r3, [r4, #32]
   133d8:	b	13364 <__assert_fail@plt+0x1b38>
   133dc:	ldr	r0, [r4, #80]	; 0x50
   133e0:	and	r0, r0, #61440	; 0xf000
   133e4:	cmp	r0, #16384	; 0x4000
   133e8:	beq	13408 <__assert_fail@plt+0x1bdc>
   133ec:	cmp	r0, #40960	; 0xa000
   133f0:	moveq	r0, #12
   133f4:	beq	13378 <__assert_fail@plt+0x1b4c>
   133f8:	cmp	r0, #32768	; 0x8000
   133fc:	moveq	r0, #8
   13400:	movne	r0, #3
   13404:	b	13378 <__assert_fail@plt+0x1b4c>
   13408:	ldrb	r3, [r4, #168]	; 0xa8
   1340c:	cmp	r3, #46	; 0x2e
   13410:	movne	r0, #1
   13414:	bne	13378 <__assert_fail@plt+0x1b4c>
   13418:	ldrb	r3, [r4, #169]	; 0xa9
   1341c:	cmp	r3, #0
   13420:	beq	1343c <__assert_fail@plt+0x1c10>
   13424:	ldr	r3, [r4, #168]	; 0xa8
   13428:	bic	r3, r3, #-16777216	; 0xff000000
   1342c:	bic	r3, r3, #255	; 0xff
   13430:	cmp	r3, #11776	; 0x2e00
   13434:	movne	r0, #1
   13438:	bne	13378 <__assert_fail@plt+0x1b4c>
   1343c:	ldr	r0, [r4, #48]	; 0x30
   13440:	cmp	r0, #0
   13444:	moveq	r0, #1
   13448:	movne	r0, #5
   1344c:	b	13378 <__assert_fail@plt+0x1b4c>
   13450:	push	{r4, r5, r6, r7, r8, lr}
   13454:	mov	r6, r0
   13458:	mov	r4, r1
   1345c:	mov	r5, r2
   13460:	ldr	r7, [r0, #44]	; 0x2c
   13464:	ldr	r3, [r0, #40]	; 0x28
   13468:	cmp	r3, r2
   1346c:	bcs	13498 <__assert_fail@plt+0x1c6c>
   13470:	add	r1, r2, #40	; 0x28
   13474:	str	r1, [r0, #40]	; 0x28
   13478:	cmn	r1, #-1073741823	; 0xc0000001
   1347c:	bhi	13508 <__assert_fail@plt+0x1cdc>
   13480:	lsl	r1, r1, #2
   13484:	ldr	r0, [r0, #8]
   13488:	bl	19588 <lchmod@@Base+0x3100>
   1348c:	cmp	r0, #0
   13490:	strne	r0, [r6, #8]
   13494:	beq	13508 <__assert_fail@plt+0x1cdc>
   13498:	ldr	r3, [r6, #8]
   1349c:	cmp	r4, #0
   134a0:	beq	134b4 <__assert_fail@plt+0x1c88>
   134a4:	str	r4, [r3], #4
   134a8:	ldr	r4, [r4, #8]
   134ac:	cmp	r4, #0
   134b0:	bne	134a4 <__assert_fail@plt+0x1c78>
   134b4:	mov	r3, r7
   134b8:	mov	r2, #4
   134bc:	mov	r1, r5
   134c0:	ldr	r0, [r6, #8]
   134c4:	bl	1176c <qsort@plt>
   134c8:	ldr	lr, [r6, #8]
   134cc:	ldr	r0, [lr]
   134d0:	subs	r3, r5, #1
   134d4:	beq	134f8 <__assert_fail@plt+0x1ccc>
   134d8:	mov	r2, lr
   134dc:	ldr	r1, [r2]
   134e0:	ldr	ip, [r2, #4]!
   134e4:	str	ip, [r1, #8]
   134e8:	subs	r3, r3, #1
   134ec:	bne	134dc <__assert_fail@plt+0x1cb0>
   134f0:	sub	r5, r5, #-1073741823	; 0xc0000001
   134f4:	add	lr, lr, r5, lsl #2
   134f8:	ldr	r3, [lr]
   134fc:	mov	r2, #0
   13500:	str	r2, [r3, #8]
   13504:	pop	{r4, r5, r6, r7, r8, pc}
   13508:	ldr	r0, [r6, #8]
   1350c:	bl	1315c <__assert_fail@plt+0x1930>
   13510:	mov	r3, #0
   13514:	str	r3, [r6, #8]
   13518:	str	r3, [r6, #40]	; 0x28
   1351c:	mov	r0, r4
   13520:	pop	{r4, r5, r6, r7, r8, pc}
   13524:	push	{r4, r5, r6, r7, r8, lr}
   13528:	mov	r6, r0
   1352c:	mov	r7, r1
   13530:	mov	r5, r2
   13534:	add	r0, r2, #176	; 0xb0
   13538:	bic	r0, r0, #7
   1353c:	bl	19558 <lchmod@@Base+0x30d0>
   13540:	subs	r4, r0, #0
   13544:	beq	13590 <__assert_fail@plt+0x1d64>
   13548:	mov	r2, r5
   1354c:	mov	r1, r7
   13550:	add	r0, r4, #168	; 0xa8
   13554:	bl	114b4 <memcpy@plt>
   13558:	add	r2, r4, r5
   1355c:	mov	r3, #0
   13560:	strb	r3, [r2, #168]	; 0xa8
   13564:	str	r5, [r4, #52]	; 0x34
   13568:	str	r6, [r4, #44]	; 0x2c
   1356c:	ldr	r2, [r6, #24]
   13570:	str	r2, [r4, #28]
   13574:	str	r3, [r4, #32]
   13578:	str	r3, [r4, #12]
   1357c:	strh	r3, [r4, #58]	; 0x3a
   13580:	mov	r2, #3
   13584:	strh	r2, [r4, #60]	; 0x3c
   13588:	str	r3, [r4, #16]
   1358c:	str	r3, [r4, #20]
   13590:	mov	r0, r4
   13594:	pop	{r4, r5, r6, r7, r8, pc}
   13598:	push	{r4, lr}
   1359c:	sub	sp, sp, #8
   135a0:	mov	r4, r0
   135a4:	ldr	r2, [r0, #48]	; 0x30
   135a8:	ldr	r3, [pc, #92]	; 1360c <__assert_fail@plt+0x1de0>
   135ac:	and	r3, r3, r2
   135b0:	cmp	r3, #0
   135b4:	beq	135e8 <__assert_fail@plt+0x1dbc>
   135b8:	ldr	r3, [pc, #80]	; 13610 <__assert_fail@plt+0x1de4>
   135bc:	str	r3, [sp]
   135c0:	ldr	r3, [pc, #76]	; 13614 <__assert_fail@plt+0x1de8>
   135c4:	ldr	r2, [pc, #76]	; 13618 <__assert_fail@plt+0x1dec>
   135c8:	mov	r1, #0
   135cc:	mov	r0, #31
   135d0:	bl	15c88 <__assert_fail@plt+0x445c>
   135d4:	str	r0, [r4, #56]	; 0x38
   135d8:	adds	r0, r0, #0
   135dc:	movne	r0, #1
   135e0:	add	sp, sp, #8
   135e4:	pop	{r4, pc}
   135e8:	mov	r0, #32
   135ec:	bl	19558 <lchmod@@Base+0x30d0>
   135f0:	str	r0, [r4, #56]	; 0x38
   135f4:	cmp	r0, #0
   135f8:	moveq	r0, #0
   135fc:	beq	135e0 <__assert_fail@plt+0x1db4>
   13600:	bl	19710 <lchmod@@Base+0x3288>
   13604:	mov	r0, #1
   13608:	b	135e0 <__assert_fail@plt+0x1db4>
   1360c:	andeq	r0, r0, r2, lsl #2
   13610:	andeq	r3, r1, ip, asr r1
   13614:			; <UNDEFINED> instruction: 0x000131b4
   13618:	strdeq	r3, [r1], -r4
   1361c:	push	{r4, lr}
   13620:	mov	ip, r1
   13624:	ldr	r3, [r0, #48]	; 0x30
   13628:	and	lr, r3, #16
   1362c:	ldr	r2, [pc, #48]	; 13664 <__assert_fail@plt+0x1e38>
   13630:	ldr	r1, [pc, #48]	; 13668 <__assert_fail@plt+0x1e3c>
   13634:	cmp	lr, #0
   13638:	moveq	r1, r2
   1363c:	tst	r3, #512	; 0x200
   13640:	bne	13650 <__assert_fail@plt+0x1e24>
   13644:	mov	r0, ip
   13648:	bl	19af8 <lchmod@@Base+0x3670>
   1364c:	pop	{r4, pc}
   13650:	mov	r2, r1
   13654:	mov	r1, ip
   13658:	ldr	r0, [r0, #32]
   1365c:	bl	16ad4 <lchmod@@Base+0x64c>
   13660:	pop	{r4, pc}
   13664:	andeq	r4, r8, r0, lsl #18
   13668:	andeq	ip, r8, r0, lsl #18
   1366c:	push	{r4, r5, r6, lr}
   13670:	subs	r4, r0, #0
   13674:	bne	13690 <__assert_fail@plt+0x1e64>
   13678:	pop	{r4, r5, r6, pc}
   1367c:	mov	r0, r4
   13680:	bl	1315c <__assert_fail@plt+0x1930>
   13684:	mov	r4, r5
   13688:	cmp	r5, #0
   1368c:	beq	136a8 <__assert_fail@plt+0x1e7c>
   13690:	ldr	r5, [r4, #8]
   13694:	ldr	r0, [r4, #12]
   13698:	cmp	r0, #0
   1369c:	beq	1367c <__assert_fail@plt+0x1e50>
   136a0:	bl	11814 <closedir@plt>
   136a4:	b	1367c <__assert_fail@plt+0x1e50>
   136a8:	pop	{r4, r5, r6, pc}
   136ac:	push	{r4, lr}
   136b0:	ldr	r2, [r0, #48]	; 0x30
   136b4:	ldr	r3, [pc, #40]	; 136e4 <__assert_fail@plt+0x1eb8>
   136b8:	and	r3, r3, r2
   136bc:	cmp	r3, #0
   136c0:	beq	136d8 <__assert_fail@plt+0x1eac>
   136c4:	ldr	r0, [r0, #56]	; 0x38
   136c8:	cmp	r0, #0
   136cc:	popeq	{r4, pc}
   136d0:	bl	15e18 <__assert_fail@plt+0x45ec>
   136d4:	pop	{r4, pc}
   136d8:	ldr	r0, [r0, #56]	; 0x38
   136dc:	bl	1315c <__assert_fail@plt+0x1930>
   136e0:	pop	{r4, pc}
   136e4:	andeq	r0, r0, r2, lsl #2
   136e8:	push	{r4, lr}
   136ec:	mov	r4, r0
   136f0:	mov	r0, r4
   136f4:	bl	163f4 <__assert_fail@plt+0x4bc8>
   136f8:	cmp	r0, #0
   136fc:	bne	13718 <__assert_fail@plt+0x1eec>
   13700:	mov	r0, r4
   13704:	bl	16440 <__assert_fail@plt+0x4c14>
   13708:	cmp	r0, #0
   1370c:	blt	136f0 <__assert_fail@plt+0x1ec4>
   13710:	bl	117e4 <close@plt>
   13714:	b	136f0 <__assert_fail@plt+0x1ec4>
   13718:	pop	{r4, pc}
   1371c:	push	{r4, r5, r6, r7, lr}
   13720:	sub	sp, sp, #116	; 0x74
   13724:	ldr	r4, [r0, #44]	; 0x2c
   13728:	ldr	r3, [r4, #48]	; 0x30
   1372c:	tst	r3, #512	; 0x200
   13730:	beq	13810 <__assert_fail@plt+0x1fe4>
   13734:	mov	r7, r1
   13738:	mov	r5, r0
   1373c:	ldr	r6, [r4, #52]	; 0x34
   13740:	cmp	r6, #0
   13744:	beq	1376c <__assert_fail@plt+0x1f40>
   13748:	ldrd	r2, [r5, #64]	; 0x40
   1374c:	add	r1, sp, #112	; 0x70
   13750:	strd	r2, [r1, #-104]!	; 0xffffff98
   13754:	mov	r0, r6
   13758:	bl	159d0 <__assert_fail@plt+0x41a4>
   1375c:	cmp	r0, #0
   13760:	beq	13798 <__assert_fail@plt+0x1f6c>
   13764:	ldr	r0, [r0, #8]
   13768:	b	13814 <__assert_fail@plt+0x1fe8>
   1376c:	ldr	r3, [pc, #184]	; 1382c <__assert_fail@plt+0x2000>
   13770:	str	r3, [sp]
   13774:	ldr	r3, [pc, #180]	; 13830 <__assert_fail@plt+0x2004>
   13778:	ldr	r2, [pc, #180]	; 13834 <__assert_fail@plt+0x2008>
   1377c:	mov	r1, #0
   13780:	mov	r0, #13
   13784:	bl	15c88 <__assert_fail@plt+0x445c>
   13788:	mov	r6, r0
   1378c:	str	r0, [r4, #52]	; 0x34
   13790:	cmp	r0, #0
   13794:	bne	13748 <__assert_fail@plt+0x1f1c>
   13798:	cmp	r7, #0
   1379c:	blt	1381c <__assert_fail@plt+0x1ff0>
   137a0:	add	r1, sp, #24
   137a4:	mov	r0, r7
   137a8:	bl	1140c <fstatfs64@plt>
   137ac:	cmp	r0, #0
   137b0:	bne	13824 <__assert_fail@plt+0x1ff8>
   137b4:	cmp	r6, #0
   137b8:	beq	137f8 <__assert_fail@plt+0x1fcc>
   137bc:	mov	r0, #16
   137c0:	bl	19558 <lchmod@@Base+0x30d0>
   137c4:	subs	r4, r0, #0
   137c8:	beq	137f8 <__assert_fail@plt+0x1fcc>
   137cc:	ldrd	r2, [r5, #64]	; 0x40
   137d0:	strd	r2, [r4]
   137d4:	ldr	r3, [sp, #24]
   137d8:	str	r3, [r4, #8]
   137dc:	mov	r1, r4
   137e0:	mov	r0, r6
   137e4:	bl	161d4 <__assert_fail@plt+0x49a8>
   137e8:	cmp	r0, #0
   137ec:	beq	13804 <__assert_fail@plt+0x1fd8>
   137f0:	cmp	r4, r0
   137f4:	bne	13800 <__assert_fail@plt+0x1fd4>
   137f8:	ldr	r0, [sp, #24]
   137fc:	b	13814 <__assert_fail@plt+0x1fe8>
   13800:	bl	117d8 <abort@plt>
   13804:	mov	r0, r4
   13808:	bl	1315c <__assert_fail@plt+0x1930>
   1380c:	b	137f8 <__assert_fail@plt+0x1fcc>
   13810:	mov	r0, #0
   13814:	add	sp, sp, #116	; 0x74
   13818:	pop	{r4, r5, r6, r7, pc}
   1381c:	mov	r0, #0
   13820:	b	13814 <__assert_fail@plt+0x1fe8>
   13824:	mov	r0, #0
   13828:	b	13814 <__assert_fail@plt+0x1fe8>
   1382c:	andeq	r3, r1, ip, asr r1
   13830:	andeq	r3, r1, ip, lsr #4
   13834:	andeq	r3, r1, r0, lsl r2
   13838:	push	{r4, r5, r6, lr}
   1383c:	mov	r5, r0
   13840:	mov	r4, r1
   13844:	ldr	r2, [r0, #48]	; 0x30
   13848:	ldr	r3, [pc, #176]	; 13900 <__assert_fail@plt+0x20d4>
   1384c:	and	r3, r3, r2
   13850:	cmp	r3, #0
   13854:	beq	138bc <__assert_fail@plt+0x2090>
   13858:	mov	r0, #24
   1385c:	bl	19558 <lchmod@@Base+0x30d0>
   13860:	subs	r6, r0, #0
   13864:	beq	138e0 <__assert_fail@plt+0x20b4>
   13868:	ldrd	r2, [r4, #64]	; 0x40
   1386c:	strd	r2, [r6]
   13870:	ldrd	r2, [r4, #160]	; 0xa0
   13874:	strd	r2, [r6, #8]
   13878:	str	r4, [r6, #16]
   1387c:	mov	r1, r6
   13880:	ldr	r0, [r5, #56]	; 0x38
   13884:	bl	161d4 <__assert_fail@plt+0x49a8>
   13888:	mov	r5, r0
   1388c:	cmp	r6, r0
   13890:	beq	138e8 <__assert_fail@plt+0x20bc>
   13894:	mov	r0, r6
   13898:	bl	1315c <__assert_fail@plt+0x1930>
   1389c:	cmp	r5, #0
   138a0:	beq	138f0 <__assert_fail@plt+0x20c4>
   138a4:	ldr	r3, [r5, #16]
   138a8:	str	r3, [r4]
   138ac:	mov	r3, #2
   138b0:	strh	r3, [r4, #56]	; 0x38
   138b4:	mov	r0, #1
   138b8:	pop	{r4, r5, r6, pc}
   138bc:	add	r1, r1, #64	; 0x40
   138c0:	ldr	r0, [r0, #56]	; 0x38
   138c4:	bl	1972c <lchmod@@Base+0x32a4>
   138c8:	cmp	r0, #0
   138cc:	beq	138f8 <__assert_fail@plt+0x20cc>
   138d0:	str	r4, [r4]
   138d4:	mov	r3, #2
   138d8:	strh	r3, [r4, #56]	; 0x38
   138dc:	pop	{r4, r5, r6, pc}
   138e0:	mov	r0, #0
   138e4:	pop	{r4, r5, r6, pc}
   138e8:	mov	r0, #1
   138ec:	pop	{r4, r5, r6, pc}
   138f0:	mov	r0, #0
   138f4:	pop	{r4, r5, r6, pc}
   138f8:	mov	r0, #1
   138fc:	pop	{r4, r5, r6, pc}
   13900:	andeq	r0, r0, r2, lsl #2
   13904:	push	{r4, r5, r6, lr}
   13908:	mov	r5, r1
   1390c:	ldr	r1, [r0, #32]
   13910:	cmp	r1, r5
   13914:	movne	r3, #0
   13918:	moveq	r3, #1
   1391c:	cmn	r1, #100	; 0x64
   13920:	moveq	r3, #0
   13924:	cmp	r3, #0
   13928:	bne	13968 <__assert_fail@plt+0x213c>
   1392c:	mov	r4, r0
   13930:	cmp	r2, #0
   13934:	bne	1396c <__assert_fail@plt+0x2140>
   13938:	ldr	r3, [r0, #48]	; 0x30
   1393c:	lsr	r3, r3, #2
   13940:	eor	r3, r3, #1
   13944:	cmp	r1, #0
   13948:	movlt	r3, #0
   1394c:	andge	r3, r3, #1
   13950:	cmp	r3, #0
   13954:	beq	13960 <__assert_fail@plt+0x2134>
   13958:	mov	r0, r1
   1395c:	bl	117e4 <close@plt>
   13960:	str	r5, [r4, #32]
   13964:	pop	{r4, r5, r6, pc}
   13968:	bl	117d8 <abort@plt>
   1396c:	add	r0, r0, #60	; 0x3c
   13970:	bl	163fc <__assert_fail@plt+0x4bd0>
   13974:	cmp	r0, #0
   13978:	blt	13960 <__assert_fail@plt+0x2134>
   1397c:	bl	117e4 <close@plt>
   13980:	b	13960 <__assert_fail@plt+0x2134>
   13984:	push	{r4, r5, r6, lr}
   13988:	mov	r4, r0
   1398c:	ldr	r3, [r0, #48]	; 0x30
   13990:	ands	r5, r3, #4
   13994:	movne	r5, #0
   13998:	bne	139b4 <__assert_fail@plt+0x2188>
   1399c:	tst	r3, #512	; 0x200
   139a0:	bne	139c4 <__assert_fail@plt+0x2198>
   139a4:	ldr	r0, [r0, #28]
   139a8:	bl	11760 <fchdir@plt>
   139ac:	adds	r5, r0, #0
   139b0:	movne	r5, #1
   139b4:	add	r0, r4, #60	; 0x3c
   139b8:	bl	136e8 <__assert_fail@plt+0x1ebc>
   139bc:	mov	r0, r5
   139c0:	pop	{r4, r5, r6, pc}
   139c4:	mov	r2, #1
   139c8:	mvn	r1, #99	; 0x63
   139cc:	bl	13904 <__assert_fail@plt+0x20d8>
   139d0:	b	139b4 <__assert_fail@plt+0x2188>
   139d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   139d8:	sub	sp, sp, #108	; 0x6c
   139dc:	mov	r4, r0
   139e0:	mov	r6, r1
   139e4:	mov	r5, r2
   139e8:	subs	r9, r3, #0
   139ec:	beq	13b88 <__assert_fail@plt+0x235c>
   139f0:	ldr	r1, [pc, #448]	; 13bb8 <__assert_fail@plt+0x238c>
   139f4:	mov	r0, r9
   139f8:	bl	11454 <strcmp@plt>
   139fc:	cmp	r0, #0
   13a00:	bne	13b88 <__assert_fail@plt+0x235c>
   13a04:	ldr	r3, [r4, #48]	; 0x30
   13a08:	tst	r3, #4
   13a0c:	bne	13b94 <__assert_fail@plt+0x2368>
   13a10:	cmp	r5, #0
   13a14:	bge	13b24 <__assert_fail@plt+0x22f8>
   13a18:	tst	r3, #512	; 0x200
   13a1c:	beq	13a34 <__assert_fail@plt+0x2208>
   13a20:	add	r7, r4, #60	; 0x3c
   13a24:	mov	r0, r7
   13a28:	bl	163f4 <__assert_fail@plt+0x4bc8>
   13a2c:	cmp	r0, #0
   13a30:	beq	13a54 <__assert_fail@plt+0x2228>
   13a34:	mov	r7, #1
   13a38:	mov	r1, r9
   13a3c:	mov	r0, r4
   13a40:	bl	1361c <__assert_fail@plt+0x1df0>
   13a44:	subs	r8, r0, #0
   13a48:	bge	13aa4 <__assert_fail@plt+0x2278>
   13a4c:	mvn	r4, #0
   13a50:	b	13b10 <__assert_fail@plt+0x22e4>
   13a54:	mov	r0, r7
   13a58:	bl	16440 <__assert_fail@plt+0x4c14>
   13a5c:	subs	r8, r0, #0
   13a60:	blt	13a34 <__assert_fail@plt+0x2208>
   13a64:	ldr	r3, [r4, #48]	; 0x30
   13a68:	tst	r3, #2
   13a6c:	bne	13b30 <__assert_fail@plt+0x2304>
   13a70:	mov	r5, r8
   13a74:	mov	r7, #1
   13a78:	ldr	r3, [r4, #48]	; 0x30
   13a7c:	tst	r3, #512	; 0x200
   13a80:	bne	13b54 <__assert_fail@plt+0x2328>
   13a84:	mov	r0, r8
   13a88:	bl	11760 <fchdir@plt>
   13a8c:	mov	r4, r0
   13a90:	b	13b08 <__assert_fail@plt+0x22dc>
   13a94:	cmp	r5, #0
   13a98:	movge	r8, r5
   13a9c:	movge	r7, #0
   13aa0:	blt	13b1c <__assert_fail@plt+0x22f0>
   13aa4:	ldr	r3, [r4, #48]	; 0x30
   13aa8:	tst	r3, #2
   13aac:	bne	13acc <__assert_fail@plt+0x22a0>
   13ab0:	cmp	r9, #0
   13ab4:	beq	13a78 <__assert_fail@plt+0x224c>
   13ab8:	ldr	r1, [pc, #248]	; 13bb8 <__assert_fail@plt+0x238c>
   13abc:	mov	r0, r9
   13ac0:	bl	11454 <strcmp@plt>
   13ac4:	cmp	r0, #0
   13ac8:	bne	13a78 <__assert_fail@plt+0x224c>
   13acc:	mov	r2, sp
   13ad0:	mov	r1, r8
   13ad4:	mov	r0, #3
   13ad8:	bl	11550 <__fxstat64@plt>
   13adc:	cmp	r0, #0
   13ae0:	bne	13b04 <__assert_fail@plt+0x22d8>
   13ae4:	ldrd	r0, [r6, #64]	; 0x40
   13ae8:	ldrd	r2, [sp]
   13aec:	cmp	r1, r3
   13af0:	cmpeq	r0, r2
   13af4:	beq	13b3c <__assert_fail@plt+0x2310>
   13af8:	bl	11688 <__errno_location@plt>
   13afc:	mov	r3, #2
   13b00:	str	r3, [r0]
   13b04:	mvn	r4, #0
   13b08:	cmp	r5, #0
   13b0c:	blt	13b6c <__assert_fail@plt+0x2340>
   13b10:	mov	r0, r4
   13b14:	add	sp, sp, #108	; 0x6c
   13b18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13b1c:	mov	r7, #0
   13b20:	b	13a38 <__assert_fail@plt+0x220c>
   13b24:	mov	r8, r5
   13b28:	mov	r7, #1
   13b2c:	b	13aa4 <__assert_fail@plt+0x2278>
   13b30:	mov	r5, r8
   13b34:	mov	r7, #1
   13b38:	b	13acc <__assert_fail@plt+0x22a0>
   13b3c:	ldrd	r0, [r6, #160]	; 0xa0
   13b40:	ldrd	r2, [sp, #96]	; 0x60
   13b44:	cmp	r1, r3
   13b48:	cmpeq	r0, r2
   13b4c:	bne	13af8 <__assert_fail@plt+0x22cc>
   13b50:	b	13a78 <__assert_fail@plt+0x224c>
   13b54:	eor	r2, r7, #1
   13b58:	mov	r1, r8
   13b5c:	mov	r0, r4
   13b60:	bl	13904 <__assert_fail@plt+0x20d8>
   13b64:	mov	r4, #0
   13b68:	b	13b10 <__assert_fail@plt+0x22e4>
   13b6c:	bl	11688 <__errno_location@plt>
   13b70:	mov	r5, r0
   13b74:	ldr	r6, [r0]
   13b78:	mov	r0, r8
   13b7c:	bl	117e4 <close@plt>
   13b80:	str	r6, [r5]
   13b84:	b	13b10 <__assert_fail@plt+0x22e4>
   13b88:	ldr	r3, [r4, #48]	; 0x30
   13b8c:	tst	r3, #4
   13b90:	beq	13a94 <__assert_fail@plt+0x2268>
   13b94:	mvn	r2, r5
   13b98:	lsr	r2, r2, #31
   13b9c:	ands	r3, r2, r3, lsr #9
   13ba0:	moveq	r4, #0
   13ba4:	beq	13b10 <__assert_fail@plt+0x22e4>
   13ba8:	mov	r0, r5
   13bac:	bl	117e4 <close@plt>
   13bb0:	mov	r4, #0
   13bb4:	b	13b10 <__assert_fail@plt+0x22e4>
   13bb8:	andeq	sl, r1, r4, ror sl
   13bbc:	push	{r4, r5, lr}
   13bc0:	sub	sp, sp, #28
   13bc4:	ldr	r2, [r0, #48]	; 0x30
   13bc8:	ldr	r3, [pc, #172]	; 13c7c <__assert_fail@plt+0x2450>
   13bcc:	and	r3, r3, r2
   13bd0:	cmp	r3, #0
   13bd4:	bne	13c1c <__assert_fail@plt+0x23f0>
   13bd8:	ldr	ip, [r1, #4]
   13bdc:	cmp	ip, #0
   13be0:	beq	13c14 <__assert_fail@plt+0x23e8>
   13be4:	ldr	r3, [ip, #48]	; 0x30
   13be8:	cmp	r3, #0
   13bec:	blt	13c14 <__assert_fail@plt+0x23e8>
   13bf0:	ldr	lr, [r0, #56]	; 0x38
   13bf4:	ldrd	r2, [lr, #16]
   13bf8:	orrs	r3, r2, r3
   13bfc:	beq	13c4c <__assert_fail@plt+0x2420>
   13c00:	ldrd	r4, [lr]
   13c04:	ldrd	r2, [r1, #160]	; 0xa0
   13c08:	cmp	r5, r3
   13c0c:	cmpeq	r4, r2
   13c10:	beq	13c50 <__assert_fail@plt+0x2424>
   13c14:	add	sp, sp, #28
   13c18:	pop	{r4, r5, pc}
   13c1c:	ldrd	r2, [r1, #64]	; 0x40
   13c20:	strd	r2, [sp]
   13c24:	ldrd	r2, [r1, #160]	; 0xa0
   13c28:	strd	r2, [sp, #8]
   13c2c:	mov	r1, sp
   13c30:	ldr	r0, [r0, #56]	; 0x38
   13c34:	bl	1620c <__assert_fail@plt+0x49e0>
   13c38:	cmp	r0, #0
   13c3c:	beq	13c48 <__assert_fail@plt+0x241c>
   13c40:	bl	1315c <__assert_fail@plt+0x1930>
   13c44:	b	13c14 <__assert_fail@plt+0x23e8>
   13c48:	bl	117d8 <abort@plt>
   13c4c:	bl	117d8 <abort@plt>
   13c50:	ldrd	r2, [lr, #8]
   13c54:	ldrd	r4, [r1, #64]	; 0x40
   13c58:	cmp	r3, r5
   13c5c:	cmpeq	r2, r4
   13c60:	bne	13c14 <__assert_fail@plt+0x23e8>
   13c64:	ldrd	r2, [ip, #64]	; 0x40
   13c68:	strd	r2, [lr, #8]
   13c6c:	ldr	r3, [r0, #56]	; 0x38
   13c70:	ldrd	r0, [ip, #160]	; 0xa0
   13c74:	strd	r0, [r3]
   13c78:	b	13c14 <__assert_fail@plt+0x23e8>
   13c7c:	andeq	r0, r0, r2, lsl #2
   13c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c84:	sub	sp, sp, #68	; 0x44
   13c88:	mov	r5, r0
   13c8c:	str	r1, [sp, #40]	; 0x28
   13c90:	ldr	r9, [r0]
   13c94:	ldr	r3, [r9, #12]
   13c98:	str	r3, [sp, #44]	; 0x2c
   13c9c:	cmp	r3, #0
   13ca0:	beq	13da0 <__assert_fail@plt+0x2574>
   13ca4:	mov	r0, r3
   13ca8:	bl	11754 <dirfd@plt>
   13cac:	str	r0, [sp, #60]	; 0x3c
   13cb0:	cmp	r0, #0
   13cb4:	blt	13d5c <__assert_fail@plt+0x2530>
   13cb8:	ldr	r3, [r5, #44]	; 0x2c
   13cbc:	cmp	r3, #0
   13cc0:	ldr	r3, [pc, #2472]	; 14670 <__assert_fail@plt+0x2e44>
   13cc4:	mvnne	r3, #0
   13cc8:	str	r3, [sp, #24]
   13ccc:	mov	r3, #1
   13cd0:	str	r3, [sp, #52]	; 0x34
   13cd4:	ldr	r3, [r9, #40]	; 0x28
   13cd8:	mov	r1, r3
   13cdc:	sub	r3, r3, #1
   13ce0:	ldr	r2, [r9, #28]
   13ce4:	ldrb	r2, [r2, r3]
   13ce8:	cmp	r2, #47	; 0x2f
   13cec:	moveq	r1, r3
   13cf0:	str	r1, [sp, #32]
   13cf4:	ldr	r3, [r5, #48]	; 0x30
   13cf8:	tst	r3, #4
   13cfc:	ldrne	r3, [r5, #24]
   13d00:	addne	r2, r3, r1
   13d04:	addne	r2, r2, #1
   13d08:	strne	r2, [sp, #28]
   13d0c:	movne	r2, #47	; 0x2f
   13d10:	strbne	r2, [r3, r1]
   13d14:	moveq	r3, #0
   13d18:	streq	r3, [sp, #28]
   13d1c:	ldr	r3, [sp, #32]
   13d20:	add	r3, r3, #1
   13d24:	str	r3, [sp, #12]
   13d28:	ldr	fp, [r5, #36]	; 0x24
   13d2c:	sub	fp, fp, r3
   13d30:	ldr	r3, [r9, #48]	; 0x30
   13d34:	add	r3, r3, #1
   13d38:	str	r3, [sp, #20]
   13d3c:	mov	r3, #0
   13d40:	str	r3, [sp, #48]	; 0x30
   13d44:	str	r3, [sp, #36]	; 0x24
   13d48:	str	r3, [sp, #4]
   13d4c:	mov	r8, r3
   13d50:	str	r3, [sp, #8]
   13d54:	mov	sl, r3
   13d58:	b	142d0 <__assert_fail@plt+0x2aa4>
   13d5c:	ldr	r0, [r9, #12]
   13d60:	bl	11814 <closedir@plt>
   13d64:	mov	r3, #0
   13d68:	str	r3, [r9, #12]
   13d6c:	ldr	r3, [sp, #40]	; 0x28
   13d70:	cmp	r3, #3
   13d74:	movne	r3, #0
   13d78:	strne	r3, [sp, #8]
   13d7c:	bne	14140 <__assert_fail@plt+0x2914>
   13d80:	mov	r3, #4
   13d84:	strh	r3, [r9, #56]	; 0x38
   13d88:	bl	11688 <__errno_location@plt>
   13d8c:	ldr	r3, [r0]
   13d90:	str	r3, [r9, #32]
   13d94:	mov	r3, #0
   13d98:	str	r3, [sp, #8]
   13d9c:	b	14140 <__assert_fail@plt+0x2914>
   13da0:	ldr	r3, [r0, #48]	; 0x30
   13da4:	and	r2, r3, #516	; 0x204
   13da8:	cmp	r2, #512	; 0x200
   13dac:	ldreq	r0, [r0, #32]
   13db0:	mvnne	r0, #99	; 0x63
   13db4:	ldr	r1, [r9, #24]
   13db8:	ands	r2, r3, #16
   13dbc:	beq	13ddc <__assert_fail@plt+0x25b0>
   13dc0:	tst	r3, #1
   13dc4:	moveq	r2, #32768	; 0x8000
   13dc8:	beq	13ddc <__assert_fail@plt+0x25b0>
   13dcc:	ldr	r2, [r9, #48]	; 0x30
   13dd0:	cmp	r2, #0
   13dd4:	movne	r2, #32768	; 0x8000
   13dd8:	moveq	r2, #0
   13ddc:	add	r3, sp, #60	; 0x3c
   13de0:	bl	16b10 <lchmod@@Base+0x688>
   13de4:	str	r0, [r9, #12]
   13de8:	cmp	r0, #0
   13dec:	beq	13ee0 <__assert_fail@plt+0x26b4>
   13df0:	ldrh	r3, [r9, #56]	; 0x38
   13df4:	cmp	r3, #11
   13df8:	beq	13f14 <__assert_fail@plt+0x26e8>
   13dfc:	ldr	r3, [r5, #48]	; 0x30
   13e00:	tst	r3, #256	; 0x100
   13e04:	bne	13f2c <__assert_fail@plt+0x2700>
   13e08:	ldr	r3, [r5, #44]	; 0x2c
   13e0c:	cmp	r3, #0
   13e10:	ldr	r3, [pc, #2136]	; 14670 <__assert_fail@plt+0x2e44>
   13e14:	mvnne	r3, #0
   13e18:	str	r3, [sp, #24]
   13e1c:	ldr	r3, [sp, #40]	; 0x28
   13e20:	cmp	r3, #2
   13e24:	beq	1401c <__assert_fail@plt+0x27f0>
   13e28:	ldr	r3, [r5, #48]	; 0x30
   13e2c:	and	r3, r3, #56	; 0x38
   13e30:	cmp	r3, #24
   13e34:	beq	13f74 <__assert_fail@plt+0x2748>
   13e38:	ldr	r3, [sp, #40]	; 0x28
   13e3c:	cmp	r3, #3
   13e40:	movne	r6, #0
   13e44:	moveq	r6, #1
   13e48:	mov	r4, #1
   13e4c:	ldr	r3, [r5, #48]	; 0x30
   13e50:	tst	r3, #512	; 0x200
   13e54:	bne	14004 <__assert_fail@plt+0x27d8>
   13e58:	ldr	r2, [sp, #60]	; 0x3c
   13e5c:	cmp	r2, #0
   13e60:	blt	13e84 <__assert_fail@plt+0x2658>
   13e64:	mov	r3, #0
   13e68:	mov	r1, r9
   13e6c:	mov	r0, r5
   13e70:	bl	139d4 <__assert_fail@plt+0x21a8>
   13e74:	cmp	r0, #0
   13e78:	moveq	r3, #1
   13e7c:	streq	r3, [sp, #52]	; 0x34
   13e80:	beq	13cd4 <__assert_fail@plt+0x24a8>
   13e84:	tst	r4, r6
   13e88:	beq	13e98 <__assert_fail@plt+0x266c>
   13e8c:	bl	11688 <__errno_location@plt>
   13e90:	ldr	r3, [r0]
   13e94:	str	r3, [r9, #32]
   13e98:	ldrh	r3, [r9, #58]	; 0x3a
   13e9c:	orr	r3, r3, #1
   13ea0:	strh	r3, [r9, #58]	; 0x3a
   13ea4:	ldr	r0, [r9, #12]
   13ea8:	bl	11814 <closedir@plt>
   13eac:	mov	r3, #0
   13eb0:	str	r3, [r9, #12]
   13eb4:	ldr	r3, [r5, #48]	; 0x30
   13eb8:	tst	r3, #512	; 0x200
   13ebc:	beq	13ed0 <__assert_fail@plt+0x26a4>
   13ec0:	ldr	r0, [sp, #60]	; 0x3c
   13ec4:	cmp	r0, #0
   13ec8:	blt	13ed0 <__assert_fail@plt+0x26a4>
   13ecc:	bl	117e4 <close@plt>
   13ed0:	mov	r3, #0
   13ed4:	str	r3, [r9, #12]
   13ed8:	str	r3, [sp, #52]	; 0x34
   13edc:	b	13cd4 <__assert_fail@plt+0x24a8>
   13ee0:	ldr	r3, [sp, #40]	; 0x28
   13ee4:	cmp	r3, #3
   13ee8:	movne	r3, #0
   13eec:	strne	r3, [sp, #8]
   13ef0:	bne	14140 <__assert_fail@plt+0x2914>
   13ef4:	mov	r3, #4
   13ef8:	strh	r3, [r9, #56]	; 0x38
   13efc:	bl	11688 <__errno_location@plt>
   13f00:	ldr	r3, [r0]
   13f04:	str	r3, [r9, #32]
   13f08:	mov	r3, #0
   13f0c:	str	r3, [sp, #8]
   13f10:	b	14140 <__assert_fail@plt+0x2914>
   13f14:	mov	r2, #0
   13f18:	mov	r1, r9
   13f1c:	mov	r0, r5
   13f20:	bl	132f8 <__assert_fail@plt+0x1acc>
   13f24:	strh	r0, [r9, #56]	; 0x38
   13f28:	b	13e08 <__assert_fail@plt+0x25dc>
   13f2c:	mov	r1, r9
   13f30:	mov	r0, r5
   13f34:	bl	13bbc <__assert_fail@plt+0x2390>
   13f38:	mov	r2, #0
   13f3c:	mov	r1, r9
   13f40:	mov	r0, r5
   13f44:	bl	132f8 <__assert_fail@plt+0x1acc>
   13f48:	mov	r1, r9
   13f4c:	mov	r0, r5
   13f50:	bl	13838 <__assert_fail@plt+0x200c>
   13f54:	cmp	r0, #0
   13f58:	bne	13e08 <__assert_fail@plt+0x25dc>
   13f5c:	bl	11688 <__errno_location@plt>
   13f60:	mov	r3, #12
   13f64:	str	r3, [r0]
   13f68:	mov	r3, #0
   13f6c:	str	r3, [sp, #8]
   13f70:	b	14140 <__assert_fail@plt+0x2914>
   13f74:	ldr	r3, [r9, #84]	; 0x54
   13f78:	cmp	r3, #2
   13f7c:	bne	13e38 <__assert_fail@plt+0x260c>
   13f80:	ldr	r1, [sp, #60]	; 0x3c
   13f84:	mov	r0, r9
   13f88:	bl	1371c <__assert_fail@plt+0x1ef0>
   13f8c:	ldr	r3, [pc, #1760]	; 14674 <__assert_fail@plt+0x2e48>
   13f90:	cmp	r0, r3
   13f94:	beq	13fec <__assert_fail@plt+0x27c0>
   13f98:	bgt	13fd4 <__assert_fail@plt+0x27a8>
   13f9c:	ldr	r3, [pc, #1748]	; 14678 <__assert_fail@plt+0x2e4c>
   13fa0:	cmp	r0, r3
   13fa4:	beq	13fec <__assert_fail@plt+0x27c0>
   13fa8:	cmp	r0, #0
   13fac:	beq	13fec <__assert_fail@plt+0x27c0>
   13fb0:	ldr	r3, [sp, #40]	; 0x28
   13fb4:	cmp	r3, #3
   13fb8:	moveq	r6, #1
   13fbc:	movne	r6, #0
   13fc0:	movne	r3, #0
   13fc4:	strne	r3, [sp, #52]	; 0x34
   13fc8:	bne	13cd4 <__assert_fail@plt+0x24a8>
   13fcc:	mov	r4, #0
   13fd0:	b	13e4c <__assert_fail@plt+0x2620>
   13fd4:	ldr	r3, [pc, #1696]	; 1467c <__assert_fail@plt+0x2e50>
   13fd8:	cmp	r0, r3
   13fdc:	beq	13fec <__assert_fail@plt+0x27c0>
   13fe0:	ldr	r3, [pc, #1688]	; 14680 <__assert_fail@plt+0x2e54>
   13fe4:	cmp	r0, r3
   13fe8:	bne	13fb0 <__assert_fail@plt+0x2784>
   13fec:	ldr	r3, [sp, #40]	; 0x28
   13ff0:	cmp	r3, #3
   13ff4:	movne	r6, #0
   13ff8:	moveq	r6, #1
   13ffc:	mov	r4, #1
   14000:	b	13e4c <__assert_fail@plt+0x2620>
   14004:	mov	r2, #3
   14008:	ldr	r1, [pc, #1652]	; 14684 <__assert_fail@plt+0x2e58>
   1400c:	ldr	r0, [sp, #60]	; 0x3c
   14010:	bl	198a0 <lchmod@@Base+0x3418>
   14014:	str	r0, [sp, #60]	; 0x3c
   14018:	b	13e58 <__assert_fail@plt+0x262c>
   1401c:	mov	r3, #0
   14020:	str	r3, [sp, #52]	; 0x34
   14024:	b	13cd4 <__assert_fail@plt+0x24a8>
   14028:	ldr	r3, [sp, #16]
   1402c:	ldr	r3, [r3]
   14030:	cmp	r3, #0
   14034:	beq	14060 <__assert_fail@plt+0x2834>
   14038:	str	r3, [r9, #32]
   1403c:	ldr	r3, [sp, #44]	; 0x2c
   14040:	cmp	r8, #0
   14044:	cmpeq	r3, #0
   14048:	movne	r3, #1
   1404c:	moveq	r3, #0
   14050:	cmp	r3, #0
   14054:	movne	r3, #7
   14058:	moveq	r3, #4
   1405c:	strh	r3, [r9, #56]	; 0x38
   14060:	ldr	r0, [r9, #12]
   14064:	cmp	r0, #0
   14068:	beq	14078 <__assert_fail@plt+0x284c>
   1406c:	bl	11814 <closedir@plt>
   14070:	mov	r3, #0
   14074:	str	r3, [r9, #12]
   14078:	ldr	r3, [sp, #36]	; 0x24
   1407c:	cmp	r3, #0
   14080:	bne	144c0 <__assert_fail@plt+0x2c94>
   14084:	ldr	r3, [r5, #48]	; 0x30
   14088:	tst	r3, #4
   1408c:	beq	140b8 <__assert_fail@plt+0x288c>
   14090:	ldr	r3, [r5, #36]	; 0x24
   14094:	ldr	r2, [sp, #12]
   14098:	cmp	r8, #0
   1409c:	cmpne	r3, r2
   140a0:	ldreq	r3, [sp, #28]
   140a4:	subeq	r3, r3, #1
   140a8:	streq	r3, [sp, #28]
   140ac:	mov	r3, #0
   140b0:	ldr	r2, [sp, #28]
   140b4:	strb	r3, [r2]
   140b8:	ldr	r3, [sp, #52]	; 0x34
   140bc:	ldr	r2, [sp, #44]	; 0x2c
   140c0:	cmp	r2, #0
   140c4:	movne	r3, #0
   140c8:	andeq	r3, r3, #1
   140cc:	cmp	r3, #0
   140d0:	beq	14108 <__assert_fail@plt+0x28dc>
   140d4:	ldr	r3, [sp, #40]	; 0x28
   140d8:	cmp	r8, #0
   140dc:	cmpne	r3, #1
   140e0:	bne	14108 <__assert_fail@plt+0x28dc>
   140e4:	ldr	r3, [r9, #48]	; 0x30
   140e8:	cmp	r3, #0
   140ec:	bne	14540 <__assert_fail@plt+0x2d14>
   140f0:	mov	r0, r5
   140f4:	bl	13984 <__assert_fail@plt+0x2158>
   140f8:	adds	r0, r0, #0
   140fc:	movne	r0, #1
   14100:	cmp	r0, #0
   14104:	bne	14560 <__assert_fail@plt+0x2d34>
   14108:	cmp	r8, #0
   1410c:	beq	14588 <__assert_fail@plt+0x2d5c>
   14110:	ldr	r3, [sp, #48]	; 0x30
   14114:	cmp	r3, #0
   14118:	bne	145c0 <__assert_fail@plt+0x2d94>
   1411c:	ldr	r3, [r5, #44]	; 0x2c
   14120:	cmp	r3, #0
   14124:	cmpne	r8, #1
   14128:	bls	14140 <__assert_fail@plt+0x2914>
   1412c:	mov	r2, r8
   14130:	ldr	r1, [sp, #8]
   14134:	mov	r0, r5
   14138:	bl	13450 <__assert_fail@plt+0x1c24>
   1413c:	str	r0, [sp, #8]
   14140:	ldr	r0, [sp, #8]
   14144:	add	sp, sp, #68	; 0x44
   14148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1414c:	ldrb	r3, [r7, #20]
   14150:	cmp	r3, #0
   14154:	beq	144b8 <__assert_fail@plt+0x2c8c>
   14158:	ldrh	r3, [r7, #20]
   1415c:	cmp	r3, #46	; 0x2e
   14160:	bne	14310 <__assert_fail@plt+0x2ae4>
   14164:	ldr	r4, [sp, #4]
   14168:	b	142cc <__assert_fail@plt+0x2aa0>
   1416c:	ldr	fp, [r5, #24]
   14170:	ldr	r3, [sp, #32]
   14174:	add	r1, r3, #2
   14178:	add	r1, r1, r6
   1417c:	mov	r0, r5
   14180:	bl	13288 <__assert_fail@plt+0x1a5c>
   14184:	cmp	r0, #0
   14188:	beq	141c0 <__assert_fail@plt+0x2994>
   1418c:	ldr	r3, [r5, #24]
   14190:	cmp	fp, r3
   14194:	beq	14208 <__assert_fail@plt+0x29dc>
   14198:	ldr	r2, [r5, #48]	; 0x30
   1419c:	tst	r2, #4
   141a0:	ldrne	r2, [sp, #12]
   141a4:	addne	r3, r3, r2
   141a8:	strne	r3, [sp, #28]
   141ac:	ldr	fp, [r5, #36]	; 0x24
   141b0:	ldr	r3, [sp, #12]
   141b4:	sub	fp, fp, r3
   141b8:	str	r0, [sp, #36]	; 0x24
   141bc:	b	14340 <__assert_fail@plt+0x2b14>
   141c0:	ldr	r7, [sp, #16]
   141c4:	ldr	r6, [r7]
   141c8:	mov	r0, r4
   141cc:	bl	1315c <__assert_fail@plt+0x1930>
   141d0:	ldr	r0, [sp, #8]
   141d4:	bl	1366c <__assert_fail@plt+0x1e40>
   141d8:	ldr	r0, [r9, #12]
   141dc:	bl	11814 <closedir@plt>
   141e0:	mov	r2, #0
   141e4:	str	r2, [r9, #12]
   141e8:	mov	r3, #7
   141ec:	strh	r3, [r9, #56]	; 0x38
   141f0:	ldr	r3, [r5, #48]	; 0x30
   141f4:	orr	r3, r3, #8192	; 0x2000
   141f8:	str	r3, [r5, #48]	; 0x30
   141fc:	str	r6, [r7]
   14200:	str	r2, [sp, #8]
   14204:	b	14140 <__assert_fail@plt+0x2914>
   14208:	ldr	r0, [sp, #36]	; 0x24
   1420c:	b	141ac <__assert_fail@plt+0x2980>
   14210:	mov	r0, r4
   14214:	bl	1315c <__assert_fail@plt+0x1930>
   14218:	ldr	r0, [sp, #8]
   1421c:	bl	1366c <__assert_fail@plt+0x1e40>
   14220:	ldr	r0, [r9, #12]
   14224:	bl	11814 <closedir@plt>
   14228:	mov	r2, #0
   1422c:	str	r2, [r9, #12]
   14230:	mov	r3, #7
   14234:	strh	r3, [r9, #56]	; 0x38
   14238:	ldr	r3, [r5, #48]	; 0x30
   1423c:	orr	r3, r3, #8192	; 0x2000
   14240:	str	r3, [r5, #48]	; 0x30
   14244:	mov	r3, #36	; 0x24
   14248:	ldr	r1, [sp, #16]
   1424c:	str	r3, [r1]
   14250:	str	r2, [sp, #8]
   14254:	b	14140 <__assert_fail@plt+0x2914>
   14258:	ldr	r3, [r4, #28]
   1425c:	str	r3, [r4, #24]
   14260:	ldr	r2, [r4, #52]	; 0x34
   14264:	add	r2, r2, #1
   14268:	add	r1, r4, #168	; 0xa8
   1426c:	ldr	r0, [sp, #28]
   14270:	bl	11484 <memmove@plt>
   14274:	b	1437c <__assert_fail@plt+0x2b50>
   14278:	mov	r3, sl
   1427c:	mov	r2, #16384	; 0x4000
   14280:	str	r2, [r4, #80]	; 0x50
   14284:	cmp	r3, #0
   14288:	movne	r2, #1
   1428c:	moveq	r2, #2
   14290:	mov	r3, #0
   14294:	strd	r2, [r4, #112]	; 0x70
   14298:	str	sl, [r4, #8]
   1429c:	ldr	r3, [sp, #8]
   142a0:	cmp	r3, #0
   142a4:	ldrne	r3, [sp, #4]
   142a8:	strne	r4, [r3, #8]
   142ac:	streq	r4, [sp, #8]
   142b0:	ldr	r3, [pc, #976]	; 14688 <__assert_fail@plt+0x2e5c>
   142b4:	cmp	r8, r3
   142b8:	beq	1446c <__assert_fail@plt+0x2c40>
   142bc:	add	r8, r8, #1
   142c0:	ldr	r3, [sp, #24]
   142c4:	cmp	r8, r3
   142c8:	bcs	14078 <__assert_fail@plt+0x284c>
   142cc:	str	r4, [sp, #4]
   142d0:	ldr	r3, [r9, #12]
   142d4:	cmp	r3, #0
   142d8:	beq	14078 <__assert_fail@plt+0x284c>
   142dc:	bl	11688 <__errno_location@plt>
   142e0:	str	r0, [sp, #16]
   142e4:	str	sl, [r0]
   142e8:	ldr	r0, [r9, #12]
   142ec:	bl	11730 <readdir64@plt>
   142f0:	subs	r7, r0, #0
   142f4:	beq	14028 <__assert_fail@plt+0x27fc>
   142f8:	ldr	r3, [r5, #48]	; 0x30
   142fc:	tst	r3, #32
   14300:	bne	14310 <__assert_fail@plt+0x2ae4>
   14304:	ldrb	r3, [r7, #19]
   14308:	cmp	r3, #46	; 0x2e
   1430c:	beq	1414c <__assert_fail@plt+0x2920>
   14310:	add	r4, r7, #19
   14314:	mov	r0, r4
   14318:	bl	11658 <strlen@plt>
   1431c:	mov	r6, r0
   14320:	mov	r2, r0
   14324:	mov	r1, r4
   14328:	mov	r0, r5
   1432c:	bl	13524 <__assert_fail@plt+0x1cf8>
   14330:	subs	r4, r0, #0
   14334:	beq	141c0 <__assert_fail@plt+0x2994>
   14338:	cmp	fp, r6
   1433c:	bls	1416c <__assert_fail@plt+0x2940>
   14340:	ldr	r3, [sp, #12]
   14344:	adds	r6, r3, r6
   14348:	bcs	14210 <__assert_fail@plt+0x29e4>
   1434c:	ldr	r3, [sp, #20]
   14350:	str	r3, [r4, #48]	; 0x30
   14354:	ldr	r3, [r5]
   14358:	str	r3, [r4, #4]
   1435c:	str	r6, [r4, #40]	; 0x28
   14360:	ldrd	r2, [r7]
   14364:	strd	r2, [r4, #160]	; 0xa0
   14368:	ldr	r3, [r5, #48]	; 0x30
   1436c:	tst	r3, #4
   14370:	addeq	r3, r4, #168	; 0xa8
   14374:	streq	r3, [r4, #24]
   14378:	bne	14258 <__assert_fail@plt+0x2a2c>
   1437c:	ldr	r3, [r5, #44]	; 0x2c
   14380:	cmp	r3, #0
   14384:	beq	14394 <__assert_fail@plt+0x2b68>
   14388:	ldr	r3, [r5, #48]	; 0x30
   1438c:	tst	r3, #1024	; 0x400
   14390:	beq	14454 <__assert_fail@plt+0x2c28>
   14394:	ldr	r3, [r5, #48]	; 0x30
   14398:	tst	r3, #8
   1439c:	beq	14624 <__assert_fail@plt+0x2df8>
   143a0:	ldrb	r2, [r7, #18]
   143a4:	tst	r2, #251	; 0xfb
   143a8:	beq	14624 <__assert_fail@plt+0x2df8>
   143ac:	lsr	r3, r3, #4
   143b0:	and	r3, r3, #1
   143b4:	cmp	r2, #10
   143b8:	orrne	r3, r3, #1
   143bc:	cmp	r3, #0
   143c0:	beq	14624 <__assert_fail@plt+0x2df8>
   143c4:	mov	r2, #11
   143c8:	strh	r2, [r4, #56]	; 0x38
   143cc:	ldrb	r2, [r7, #18]
   143d0:	sub	r2, r2, #1
   143d4:	cmp	r2, #11
   143d8:	ldrls	pc, [pc, r2, lsl #2]
   143dc:	b	14444 <__assert_fail@plt+0x2c18>
   143e0:	andeq	r4, r1, r4, lsl r4
   143e4:	andeq	r4, r1, ip, asr #8
   143e8:	andeq	r4, r1, r4, asr #8
   143ec:	andeq	r4, r1, ip, ror r2
   143f0:	andeq	r4, r1, r4, asr #8
   143f4:	andeq	r4, r1, r8, ror #11
   143f8:	andeq	r4, r1, r4, asr #8
   143fc:	andeq	r4, r1, ip, lsr #8
   14400:	andeq	r4, r1, r4, asr #8
   14404:	andeq	r4, r1, r0, lsr #8
   14408:	andeq	r4, r1, r4, asr #8
   1440c:	andeq	r4, r1, r8, lsr r4
   14410:	mov	r3, sl
   14414:	mov	r2, #4096	; 0x1000
   14418:	b	14280 <__assert_fail@plt+0x2a54>
   1441c:	mov	r3, sl
   14420:	mov	r2, #40960	; 0xa000
   14424:	b	14280 <__assert_fail@plt+0x2a54>
   14428:	mov	r3, sl
   1442c:	mov	r2, #32768	; 0x8000
   14430:	b	14280 <__assert_fail@plt+0x2a54>
   14434:	mov	r3, sl
   14438:	mov	r2, #49152	; 0xc000
   1443c:	b	14280 <__assert_fail@plt+0x2a54>
   14440:	mov	r3, sl
   14444:	mov	r2, sl
   14448:	b	14280 <__assert_fail@plt+0x2a54>
   1444c:	mov	r2, #8192	; 0x2000
   14450:	b	14280 <__assert_fail@plt+0x2a54>
   14454:	mov	r2, sl
   14458:	mov	r1, r4
   1445c:	mov	r0, r5
   14460:	bl	132f8 <__assert_fail@plt+0x1acc>
   14464:	strh	r0, [r4, #56]	; 0x38
   14468:	b	14298 <__assert_fail@plt+0x2a6c>
   1446c:	ldr	r3, [r5, #44]	; 0x2c
   14470:	cmp	r3, #0
   14474:	bne	142bc <__assert_fail@plt+0x2a90>
   14478:	ldr	r1, [sp, #60]	; 0x3c
   1447c:	mov	r0, r9
   14480:	bl	1371c <__assert_fail@plt+0x1ef0>
   14484:	ldr	r3, [pc, #488]	; 14674 <__assert_fail@plt+0x2e48>
   14488:	cmp	r0, r3
   1448c:	beq	144b0 <__assert_fail@plt+0x2c84>
   14490:	ldr	r3, [pc, #500]	; 1468c <__assert_fail@plt+0x2e60>
   14494:	cmp	r0, r3
   14498:	beq	144b0 <__assert_fail@plt+0x2c84>
   1449c:	ldr	r3, [pc, #468]	; 14678 <__assert_fail@plt+0x2e4c>
   144a0:	cmp	r0, r3
   144a4:	movne	r3, #1
   144a8:	strne	r3, [sp, #48]	; 0x30
   144ac:	bne	142bc <__assert_fail@plt+0x2a90>
   144b0:	str	sl, [sp, #48]	; 0x30
   144b4:	b	142bc <__assert_fail@plt+0x2a90>
   144b8:	ldr	r4, [sp, #4]
   144bc:	b	142cc <__assert_fail@plt+0x2aa0>
   144c0:	ldr	r0, [r5, #24]
   144c4:	ldr	r1, [r5, #4]
   144c8:	cmp	r1, #0
   144cc:	beq	144fc <__assert_fail@plt+0x2cd0>
   144d0:	ldr	r3, [r1, #24]
   144d4:	add	r2, r1, #168	; 0xa8
   144d8:	cmp	r3, r2
   144dc:	ldrne	r2, [r1, #28]
   144e0:	subne	r3, r3, r2
   144e4:	addne	r3, r0, r3
   144e8:	strne	r3, [r1, #24]
   144ec:	str	r0, [r1, #28]
   144f0:	ldr	r1, [r1, #8]
   144f4:	cmp	r1, #0
   144f8:	bne	144d0 <__assert_fail@plt+0x2ca4>
   144fc:	ldr	r3, [sp, #8]
   14500:	ldr	r2, [r3, #48]	; 0x30
   14504:	cmp	r2, #0
   14508:	blt	14084 <__assert_fail@plt+0x2858>
   1450c:	ldr	r2, [r3, #24]
   14510:	add	r1, r3, #168	; 0xa8
   14514:	cmp	r2, r1
   14518:	ldrne	r1, [r3, #28]
   1451c:	subne	r2, r2, r1
   14520:	addne	r2, r0, r2
   14524:	strne	r2, [r3, #24]
   14528:	str	r0, [r3, #28]
   1452c:	ldr	r2, [r3, #8]
   14530:	cmp	r2, #0
   14534:	ldreq	r2, [r3, #4]
   14538:	mov	r3, r2
   1453c:	b	14500 <__assert_fail@plt+0x2cd4>
   14540:	ldr	r3, [pc, #328]	; 14690 <__assert_fail@plt+0x2e64>
   14544:	mvn	r2, #0
   14548:	ldr	r1, [r9, #4]
   1454c:	mov	r0, r5
   14550:	bl	139d4 <__assert_fail@plt+0x21a8>
   14554:	adds	r0, r0, #0
   14558:	movne	r0, #1
   1455c:	b	14100 <__assert_fail@plt+0x28d4>
   14560:	mov	r3, #7
   14564:	strh	r3, [r9, #56]	; 0x38
   14568:	ldr	r3, [r5, #48]	; 0x30
   1456c:	orr	r3, r3, #8192	; 0x2000
   14570:	str	r3, [r5, #48]	; 0x30
   14574:	ldr	r0, [sp, #8]
   14578:	bl	1366c <__assert_fail@plt+0x1e40>
   1457c:	mov	r3, #0
   14580:	str	r3, [sp, #8]
   14584:	b	14140 <__assert_fail@plt+0x2914>
   14588:	ldr	r3, [sp, #40]	; 0x28
   1458c:	cmp	r3, #3
   14590:	beq	145a8 <__assert_fail@plt+0x2d7c>
   14594:	ldr	r0, [sp, #8]
   14598:	bl	1366c <__assert_fail@plt+0x1e40>
   1459c:	mov	r3, #0
   145a0:	str	r3, [sp, #8]
   145a4:	b	14140 <__assert_fail@plt+0x2914>
   145a8:	ldrh	r3, [r9, #56]	; 0x38
   145ac:	cmp	r3, #4
   145b0:	cmpne	r3, #7
   145b4:	movne	r3, #6
   145b8:	strhne	r3, [r9, #56]	; 0x38
   145bc:	b	14594 <__assert_fail@plt+0x2d68>
   145c0:	ldr	r3, [pc, #204]	; 14694 <__assert_fail@plt+0x2e68>
   145c4:	str	r3, [r5, #44]	; 0x2c
   145c8:	mov	r2, r8
   145cc:	ldr	r1, [sp, #8]
   145d0:	mov	r0, r5
   145d4:	bl	13450 <__assert_fail@plt+0x1c24>
   145d8:	str	r0, [sp, #8]
   145dc:	mov	r3, #0
   145e0:	str	r3, [r5, #44]	; 0x2c
   145e4:	b	14140 <__assert_fail@plt+0x2914>
   145e8:	mov	r3, #24576	; 0x6000
   145ec:	str	r3, [r4, #80]	; 0x50
   145f0:	mov	r2, #1
   145f4:	mov	r3, #0
   145f8:	b	14294 <__assert_fail@plt+0x2a68>
   145fc:	mov	r3, #24576	; 0x6000
   14600:	str	r3, [r4, #80]	; 0x50
   14604:	mov	r2, #2
   14608:	mov	r3, #0
   1460c:	b	14294 <__assert_fail@plt+0x2a68>
   14610:	mov	r3, #8192	; 0x2000
   14614:	str	r3, [r4, #80]	; 0x50
   14618:	mov	r2, #2
   1461c:	mov	r3, #0
   14620:	b	14294 <__assert_fail@plt+0x2a68>
   14624:	mov	r3, #11
   14628:	strh	r3, [r4, #56]	; 0x38
   1462c:	ldrb	r3, [r7, #18]
   14630:	sub	r3, r3, #1
   14634:	cmp	r3, #11
   14638:	ldrls	pc, [pc, r3, lsl #2]
   1463c:	b	14440 <__assert_fail@plt+0x2c14>
   14640:	andeq	r4, r1, r0, lsl r4
   14644:	andeq	r4, r1, r0, lsl r6
   14648:	andeq	r4, r1, r0, asr #8
   1464c:	andeq	r4, r1, r8, ror r2
   14650:	andeq	r4, r1, r0, asr #8
   14654:	strdeq	r4, [r1], -ip
   14658:	andeq	r4, r1, r0, asr #8
   1465c:	andeq	r4, r1, r8, lsr #8
   14660:	andeq	r4, r1, r0, asr #8
   14664:	andeq	r4, r1, ip, lsl r4
   14668:	andeq	r4, r1, r0, asr #8
   1466c:	andeq	r4, r1, r4, lsr r4
   14670:	andeq	r8, r1, r0, lsr #13
   14674:	andeq	r6, r0, r9, ror #18
   14678:			; <UNDEFINED> instruction: 0xff534d42
   1467c:	andeq	r9, r0, r0, lsr #31
   14680:	movtpl	r4, #24911	; 0x614f
   14684:	andeq	r0, r0, r6, lsl #8
   14688:	andeq	r2, r0, r0, lsl r7
   1468c:			; <UNDEFINED> instruction: 0x01021994
   14690:	andeq	sl, r1, r4, ror sl
   14694:	andeq	r3, r1, r0, asr r2
   14698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1469c:	sub	sp, sp, #20
   146a0:	bic	r3, r1, #4080	; 0xff0
   146a4:	bics	r3, r3, #15
   146a8:	bne	147c8 <__assert_fail@plt+0x2f9c>
   146ac:	mov	r7, r0
   146b0:	mov	r9, r1
   146b4:	mov	fp, r2
   146b8:	and	r3, r1, #516	; 0x204
   146bc:	cmp	r3, #516	; 0x204
   146c0:	beq	147dc <__assert_fail@plt+0x2fb0>
   146c4:	tst	r1, #18
   146c8:	beq	147f0 <__assert_fail@plt+0x2fc4>
   146cc:	mov	r1, #96	; 0x60
   146d0:	mov	r0, #1
   146d4:	bl	19508 <lchmod@@Base+0x3080>
   146d8:	subs	r6, r0, #0
   146dc:	beq	14a0c <__assert_fail@plt+0x31e0>
   146e0:	str	fp, [r6, #44]	; 0x2c
   146e4:	tst	r9, #2
   146e8:	streq	r9, [r6, #48]	; 0x30
   146ec:	bicne	r3, r9, #512	; 0x200
   146f0:	orrne	r3, r3, #4
   146f4:	strne	r3, [r6, #48]	; 0x30
   146f8:	mvn	r3, #99	; 0x63
   146fc:	str	r3, [r6, #32]
   14700:	ldr	r0, [r7]
   14704:	cmp	r0, #0
   14708:	beq	14804 <__assert_fail@plt+0x2fd8>
   1470c:	mov	r5, r7
   14710:	mov	r4, #0
   14714:	bl	11658 <strlen@plt>
   14718:	cmp	r4, r0
   1471c:	movcc	r4, r0
   14720:	ldr	r0, [r5, #4]!
   14724:	cmp	r0, #0
   14728:	bne	14714 <__assert_fail@plt+0x2ee8>
   1472c:	add	r1, r4, #1
   14730:	cmp	r1, #4096	; 0x1000
   14734:	movcc	r1, #4096	; 0x1000
   14738:	mov	r0, r6
   1473c:	bl	13288 <__assert_fail@plt+0x1a5c>
   14740:	subs	sl, r0, #0
   14744:	beq	14a00 <__assert_fail@plt+0x31d4>
   14748:	ldr	r3, [r7]
   1474c:	cmp	r3, #0
   14750:	beq	14a18 <__assert_fail@plt+0x31ec>
   14754:	mov	r2, #0
   14758:	ldr	r1, [pc, #716]	; 14a2c <__assert_fail@plt+0x3200>
   1475c:	mov	r0, r6
   14760:	bl	13524 <__assert_fail@plt+0x1cf8>
   14764:	subs	r3, r0, #0
   14768:	mov	r2, r3
   1476c:	str	r3, [sp, #8]
   14770:	beq	149f8 <__assert_fail@plt+0x31cc>
   14774:	mvn	r3, #0
   14778:	str	r3, [r2, #48]	; 0x30
   1477c:	cmp	fp, #0
   14780:	beq	14790 <__assert_fail@plt+0x2f64>
   14784:	ldr	sl, [r6, #48]	; 0x30
   14788:	lsr	sl, sl, #10
   1478c:	and	sl, sl, #1
   14790:	ldr	r4, [r7]
   14794:	cmp	r4, #0
   14798:	beq	149a8 <__assert_fail@plt+0x317c>
   1479c:	mov	r3, #0
   147a0:	mov	r5, r3
   147a4:	str	r3, [sp, #12]
   147a8:	mov	r8, r3
   147ac:	lsr	r9, r9, #11
   147b0:	eor	r9, r9, #1
   147b4:	and	r3, r9, #1
   147b8:	mov	r9, r5
   147bc:	str	r6, [sp, #4]
   147c0:	mov	r6, r3
   147c4:	b	1487c <__assert_fail@plt+0x3050>
   147c8:	bl	11688 <__errno_location@plt>
   147cc:	mov	r3, #22
   147d0:	str	r3, [r0]
   147d4:	mov	r6, #0
   147d8:	b	14a0c <__assert_fail@plt+0x31e0>
   147dc:	bl	11688 <__errno_location@plt>
   147e0:	mov	r3, #22
   147e4:	str	r3, [r0]
   147e8:	mov	r6, #0
   147ec:	b	14a0c <__assert_fail@plt+0x31e0>
   147f0:	bl	11688 <__errno_location@plt>
   147f4:	mov	r3, #22
   147f8:	str	r3, [r0]
   147fc:	mov	r6, #0
   14800:	b	14a0c <__assert_fail@plt+0x31e0>
   14804:	mov	r4, #0
   14808:	b	1472c <__assert_fail@plt+0x2f00>
   1480c:	mov	r1, r4
   14810:	ldr	r0, [sp, #4]
   14814:	bl	13524 <__assert_fail@plt+0x1cf8>
   14818:	subs	r4, r0, #0
   1481c:	beq	149e4 <__assert_fail@plt+0x31b8>
   14820:	str	r9, [r4, #48]	; 0x30
   14824:	ldr	r3, [sp, #8]
   14828:	str	r3, [r4, #4]
   1482c:	add	r3, r4, #168	; 0xa8
   14830:	str	r3, [r4, #24]
   14834:	cmp	r5, #0
   14838:	moveq	r3, #0
   1483c:	andne	r3, sl, #1
   14840:	cmp	r3, #0
   14844:	beq	148e4 <__assert_fail@plt+0x30b8>
   14848:	mov	r3, #11
   1484c:	strh	r3, [r4, #56]	; 0x38
   14850:	mov	r2, #2
   14854:	mov	r3, #0
   14858:	strd	r2, [r4, #112]	; 0x70
   1485c:	cmp	fp, #0
   14860:	beq	148fc <__assert_fail@plt+0x30d0>
   14864:	str	r5, [r4, #8]
   14868:	mov	r5, r4
   1486c:	add	r8, r8, #1
   14870:	ldr	r4, [r7, #4]!
   14874:	cmp	r4, #0
   14878:	beq	1491c <__assert_fail@plt+0x30f0>
   1487c:	mov	r0, r4
   14880:	bl	11658 <strlen@plt>
   14884:	mov	r2, r0
   14888:	cmp	r0, #2
   1488c:	movls	r3, #0
   14890:	andhi	r3, r6, #1
   14894:	cmp	r3, #0
   14898:	beq	1480c <__assert_fail@plt+0x2fe0>
   1489c:	add	r3, r4, r0
   148a0:	ldrb	r3, [r3, #-1]
   148a4:	cmp	r3, #47	; 0x2f
   148a8:	bne	1480c <__assert_fail@plt+0x2fe0>
   148ac:	cmp	r0, #1
   148b0:	bls	1480c <__assert_fail@plt+0x2fe0>
   148b4:	sub	r1, r0, #2
   148b8:	add	r3, r4, r1
   148bc:	ldrb	r1, [r4, r1]
   148c0:	cmp	r1, #47	; 0x2f
   148c4:	bne	1480c <__assert_fail@plt+0x2fe0>
   148c8:	sub	r2, r2, #1
   148cc:	cmp	r2, #1
   148d0:	beq	1480c <__assert_fail@plt+0x2fe0>
   148d4:	ldrb	r1, [r3, #-1]!
   148d8:	cmp	r1, #47	; 0x2f
   148dc:	beq	148c8 <__assert_fail@plt+0x309c>
   148e0:	b	1480c <__assert_fail@plt+0x2fe0>
   148e4:	mov	r2, r9
   148e8:	mov	r1, r4
   148ec:	ldr	r0, [sp, #4]
   148f0:	bl	132f8 <__assert_fail@plt+0x1acc>
   148f4:	strh	r0, [r4, #56]	; 0x38
   148f8:	b	1485c <__assert_fail@plt+0x3030>
   148fc:	str	r9, [r4, #8]
   14900:	cmp	r5, #0
   14904:	ldrne	r3, [sp, #12]
   14908:	strne	r4, [r3, #8]
   1490c:	strne	r4, [sp, #12]
   14910:	streq	r4, [sp, #12]
   14914:	moveq	r5, r4
   14918:	b	1486c <__assert_fail@plt+0x3040>
   1491c:	ldr	r6, [sp, #4]
   14920:	cmp	fp, #0
   14924:	cmpne	r8, #1
   14928:	bhi	14990 <__assert_fail@plt+0x3164>
   1492c:	mov	r2, #0
   14930:	ldr	r1, [pc, #244]	; 14a2c <__assert_fail@plt+0x3200>
   14934:	mov	r0, r6
   14938:	bl	13524 <__assert_fail@plt+0x1cf8>
   1493c:	str	r0, [r6]
   14940:	cmp	r0, #0
   14944:	beq	149e8 <__assert_fail@plt+0x31bc>
   14948:	str	r5, [r0, #8]
   1494c:	ldr	r3, [r6]
   14950:	mov	r2, #9
   14954:	strh	r2, [r3, #56]	; 0x38
   14958:	ldr	r3, [r6]
   1495c:	mov	r2, #1
   14960:	str	r2, [r3, #48]	; 0x30
   14964:	mov	r0, r6
   14968:	bl	13598 <__assert_fail@plt+0x1d6c>
   1496c:	cmp	r0, #0
   14970:	beq	149e8 <__assert_fail@plt+0x31bc>
   14974:	ldr	r3, [r6, #48]	; 0x30
   14978:	tst	r3, #516	; 0x204
   1497c:	beq	149c0 <__assert_fail@plt+0x3194>
   14980:	mvn	r1, #0
   14984:	add	r0, r6, #60	; 0x3c
   14988:	bl	163c8 <__assert_fail@plt+0x4b9c>
   1498c:	b	14a0c <__assert_fail@plt+0x31e0>
   14990:	mov	r2, r8
   14994:	mov	r1, r5
   14998:	mov	r0, r6
   1499c:	bl	13450 <__assert_fail@plt+0x1c24>
   149a0:	mov	r5, r0
   149a4:	b	1492c <__assert_fail@plt+0x3100>
   149a8:	mov	r5, #0
   149ac:	b	1492c <__assert_fail@plt+0x3100>
   149b0:	mov	r3, #0
   149b4:	str	r3, [sp, #8]
   149b8:	mov	r5, r3
   149bc:	b	1492c <__assert_fail@plt+0x3100>
   149c0:	ldr	r1, [pc, #104]	; 14a30 <__assert_fail@plt+0x3204>
   149c4:	mov	r0, r6
   149c8:	bl	1361c <__assert_fail@plt+0x1df0>
   149cc:	str	r0, [r6, #28]
   149d0:	cmp	r0, #0
   149d4:	ldrlt	r3, [r6, #48]	; 0x30
   149d8:	orrlt	r3, r3, #4
   149dc:	strlt	r3, [r6, #48]	; 0x30
   149e0:	b	14980 <__assert_fail@plt+0x3154>
   149e4:	ldr	r6, [sp, #4]
   149e8:	mov	r0, r5
   149ec:	bl	1366c <__assert_fail@plt+0x1e40>
   149f0:	ldr	r0, [sp, #8]
   149f4:	bl	1315c <__assert_fail@plt+0x1930>
   149f8:	ldr	r0, [r6, #24]
   149fc:	bl	1315c <__assert_fail@plt+0x1930>
   14a00:	mov	r0, r6
   14a04:	bl	1315c <__assert_fail@plt+0x1930>
   14a08:	mov	r6, #0
   14a0c:	mov	r0, r6
   14a10:	add	sp, sp, #20
   14a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a18:	cmp	fp, #0
   14a1c:	beq	149b0 <__assert_fail@plt+0x3184>
   14a20:	mov	r3, #0
   14a24:	str	r3, [sp, #8]
   14a28:	b	14784 <__assert_fail@plt+0x2f58>
   14a2c:	ldrdeq	sl, [r1], -ip
   14a30:	andeq	sl, r1, r8, asr sl
   14a34:	push	{r4, r5, r6, lr}
   14a38:	mov	r5, r0
   14a3c:	ldr	r0, [r0]
   14a40:	cmp	r0, #0
   14a44:	beq	14a7c <__assert_fail@plt+0x3250>
   14a48:	ldr	r3, [r0, #48]	; 0x30
   14a4c:	cmp	r3, #0
   14a50:	blt	14ae0 <__assert_fail@plt+0x32b4>
   14a54:	ldr	r4, [r0, #8]
   14a58:	cmp	r4, #0
   14a5c:	ldreq	r4, [r0, #4]
   14a60:	bl	1315c <__assert_fail@plt+0x1930>
   14a64:	mov	r0, r4
   14a68:	ldr	r3, [r4, #48]	; 0x30
   14a6c:	cmp	r3, #0
   14a70:	bge	14a54 <__assert_fail@plt+0x3228>
   14a74:	mov	r0, r4
   14a78:	bl	1315c <__assert_fail@plt+0x1930>
   14a7c:	ldr	r0, [r5, #4]
   14a80:	cmp	r0, #0
   14a84:	beq	14a8c <__assert_fail@plt+0x3260>
   14a88:	bl	1366c <__assert_fail@plt+0x1e40>
   14a8c:	ldr	r0, [r5, #8]
   14a90:	bl	1315c <__assert_fail@plt+0x1930>
   14a94:	ldr	r0, [r5, #24]
   14a98:	bl	1315c <__assert_fail@plt+0x1930>
   14a9c:	ldr	r3, [r5, #48]	; 0x30
   14aa0:	tst	r3, #512	; 0x200
   14aa4:	beq	14ae8 <__assert_fail@plt+0x32bc>
   14aa8:	ldr	r0, [r5, #32]
   14aac:	cmp	r0, #0
   14ab0:	blt	14af0 <__assert_fail@plt+0x32c4>
   14ab4:	bl	117e4 <close@plt>
   14ab8:	cmp	r0, #0
   14abc:	beq	14af0 <__assert_fail@plt+0x32c4>
   14ac0:	bl	11688 <__errno_location@plt>
   14ac4:	ldr	r4, [r0]
   14ac8:	add	r0, r5, #60	; 0x3c
   14acc:	bl	136e8 <__assert_fail@plt+0x1ebc>
   14ad0:	ldr	r0, [r5, #52]	; 0x34
   14ad4:	cmp	r0, #0
   14ad8:	bne	14b08 <__assert_fail@plt+0x32dc>
   14adc:	b	14b0c <__assert_fail@plt+0x32e0>
   14ae0:	mov	r4, r0
   14ae4:	b	14a74 <__assert_fail@plt+0x3248>
   14ae8:	tst	r3, #4
   14aec:	beq	14b2c <__assert_fail@plt+0x3300>
   14af0:	add	r0, r5, #60	; 0x3c
   14af4:	bl	136e8 <__assert_fail@plt+0x1ebc>
   14af8:	ldr	r0, [r5, #52]	; 0x34
   14afc:	cmp	r0, #0
   14b00:	movne	r4, #0
   14b04:	beq	14b80 <__assert_fail@plt+0x3354>
   14b08:	bl	15e18 <__assert_fail@plt+0x45ec>
   14b0c:	mov	r0, r5
   14b10:	bl	136ac <__assert_fail@plt+0x1e80>
   14b14:	mov	r0, r5
   14b18:	bl	1315c <__assert_fail@plt+0x1930>
   14b1c:	cmp	r4, #0
   14b20:	bne	14b70 <__assert_fail@plt+0x3344>
   14b24:	mov	r0, r4
   14b28:	pop	{r4, r5, r6, pc}
   14b2c:	ldr	r0, [r5, #28]
   14b30:	bl	11760 <fchdir@plt>
   14b34:	subs	r4, r0, #0
   14b38:	beq	14b44 <__assert_fail@plt+0x3318>
   14b3c:	bl	11688 <__errno_location@plt>
   14b40:	ldr	r4, [r0]
   14b44:	ldr	r0, [r5, #28]
   14b48:	bl	117e4 <close@plt>
   14b4c:	clz	r3, r4
   14b50:	lsr	r3, r3, #5
   14b54:	cmp	r0, #0
   14b58:	moveq	r3, #0
   14b5c:	cmp	r3, #0
   14b60:	beq	14ac8 <__assert_fail@plt+0x329c>
   14b64:	bl	11688 <__errno_location@plt>
   14b68:	ldr	r4, [r0]
   14b6c:	b	14ac8 <__assert_fail@plt+0x329c>
   14b70:	bl	11688 <__errno_location@plt>
   14b74:	str	r4, [r0]
   14b78:	mvn	r4, #0
   14b7c:	b	14b24 <__assert_fail@plt+0x32f8>
   14b80:	mov	r0, r5
   14b84:	bl	136ac <__assert_fail@plt+0x1e80>
   14b88:	mov	r0, r5
   14b8c:	bl	1315c <__assert_fail@plt+0x1930>
   14b90:	mov	r4, #0
   14b94:	b	14b24 <__assert_fail@plt+0x32f8>
   14b98:	push	{r4, r5, r6, r7, r8, lr}
   14b9c:	ldr	r5, [r0]
   14ba0:	cmp	r5, #0
   14ba4:	beq	151e8 <__assert_fail@plt+0x39bc>
   14ba8:	ldr	r3, [r0, #48]	; 0x30
   14bac:	tst	r3, #8192	; 0x2000
   14bb0:	bne	151f0 <__assert_fail@plt+0x39c4>
   14bb4:	mov	r8, r0
   14bb8:	ldrh	r3, [r5, #60]	; 0x3c
   14bbc:	mov	r2, #3
   14bc0:	strh	r2, [r5, #60]	; 0x3c
   14bc4:	cmp	r3, #1
   14bc8:	beq	14c48 <__assert_fail@plt+0x341c>
   14bcc:	cmp	r3, #2
   14bd0:	beq	14c60 <__assert_fail@plt+0x3434>
   14bd4:	ldrh	r2, [r5, #56]	; 0x38
   14bd8:	cmp	r2, #1
   14bdc:	bne	14e54 <__assert_fail@plt+0x3628>
   14be0:	cmp	r3, #4
   14be4:	beq	14c08 <__assert_fail@plt+0x33dc>
   14be8:	ldr	r1, [r8, #48]	; 0x30
   14bec:	tst	r1, #64	; 0x40
   14bf0:	beq	14d00 <__assert_fail@plt+0x34d4>
   14bf4:	ldrd	r6, [r5, #64]	; 0x40
   14bf8:	ldrd	r2, [r8, #16]
   14bfc:	cmp	r7, r3
   14c00:	cmpeq	r6, r2
   14c04:	beq	14d00 <__assert_fail@plt+0x34d4>
   14c08:	ldrh	r3, [r5, #58]	; 0x3a
   14c0c:	tst	r3, #2
   14c10:	bne	14cf4 <__assert_fail@plt+0x34c8>
   14c14:	ldr	r0, [r8, #4]
   14c18:	cmp	r0, #0
   14c1c:	beq	14c2c <__assert_fail@plt+0x3400>
   14c20:	bl	1366c <__assert_fail@plt+0x1e40>
   14c24:	mov	r3, #0
   14c28:	str	r3, [r8, #4]
   14c2c:	mov	r3, #6
   14c30:	strh	r3, [r5, #56]	; 0x38
   14c34:	mov	r1, r5
   14c38:	mov	r0, r8
   14c3c:	bl	13bbc <__assert_fail@plt+0x2390>
   14c40:	mov	r4, r5
   14c44:	b	14f30 <__assert_fail@plt+0x3704>
   14c48:	mov	r2, #0
   14c4c:	mov	r1, r5
   14c50:	bl	132f8 <__assert_fail@plt+0x1acc>
   14c54:	strh	r0, [r5, #56]	; 0x38
   14c58:	mov	r4, r5
   14c5c:	b	14f30 <__assert_fail@plt+0x3704>
   14c60:	ldrh	r2, [r5, #56]	; 0x38
   14c64:	sub	r3, r2, #12
   14c68:	uxth	r3, r3
   14c6c:	cmp	r3, #1
   14c70:	bls	14c80 <__assert_fail@plt+0x3454>
   14c74:	cmp	r2, #1
   14c78:	bne	14e54 <__assert_fail@plt+0x3628>
   14c7c:	b	14be8 <__assert_fail@plt+0x33bc>
   14c80:	mov	r2, #1
   14c84:	mov	r1, r5
   14c88:	bl	132f8 <__assert_fail@plt+0x1acc>
   14c8c:	strh	r0, [r5, #56]	; 0x38
   14c90:	cmp	r0, #1
   14c94:	movne	r4, r5
   14c98:	bne	15030 <__assert_fail@plt+0x3804>
   14c9c:	ldr	r3, [r8, #48]	; 0x30
   14ca0:	tst	r3, #4
   14ca4:	movne	r4, r5
   14ca8:	bne	15030 <__assert_fail@plt+0x3804>
   14cac:	ldr	r1, [pc, #1356]	; 15200 <__assert_fail@plt+0x39d4>
   14cb0:	mov	r0, r8
   14cb4:	bl	1361c <__assert_fail@plt+0x1df0>
   14cb8:	str	r0, [r5, #36]	; 0x24
   14cbc:	cmp	r0, #0
   14cc0:	blt	14cd8 <__assert_fail@plt+0x34ac>
   14cc4:	ldrh	r3, [r5, #58]	; 0x3a
   14cc8:	orr	r3, r3, #2
   14ccc:	strh	r3, [r5, #58]	; 0x3a
   14cd0:	mov	r4, r5
   14cd4:	b	15030 <__assert_fail@plt+0x3804>
   14cd8:	bl	11688 <__errno_location@plt>
   14cdc:	ldr	r3, [r0]
   14ce0:	str	r3, [r5, #32]
   14ce4:	mov	r3, #7
   14ce8:	strh	r3, [r5, #56]	; 0x38
   14cec:	mov	r4, r5
   14cf0:	b	15030 <__assert_fail@plt+0x3804>
   14cf4:	ldr	r0, [r5, #36]	; 0x24
   14cf8:	bl	117e4 <close@plt>
   14cfc:	b	14c14 <__assert_fail@plt+0x33e8>
   14d00:	ldr	r0, [r8, #4]
   14d04:	cmp	r0, #0
   14d08:	beq	14d54 <__assert_fail@plt+0x3528>
   14d0c:	tst	r1, #4096	; 0x1000
   14d10:	bne	14d40 <__assert_fail@plt+0x3514>
   14d14:	ldr	r3, [r5, #24]
   14d18:	mvn	r2, #0
   14d1c:	mov	r1, r5
   14d20:	mov	r0, r8
   14d24:	bl	139d4 <__assert_fail@plt+0x21a8>
   14d28:	cmp	r0, #0
   14d2c:	bne	14da8 <__assert_fail@plt+0x357c>
   14d30:	ldr	r4, [r8, #4]
   14d34:	mov	r3, #0
   14d38:	str	r3, [r8, #4]
   14d3c:	b	14ff0 <__assert_fail@plt+0x37c4>
   14d40:	bic	r1, r1, #4096	; 0x1000
   14d44:	str	r1, [r8, #48]	; 0x30
   14d48:	bl	1366c <__assert_fail@plt+0x1e40>
   14d4c:	mov	r3, #0
   14d50:	str	r3, [r8, #4]
   14d54:	mov	r1, #3
   14d58:	mov	r0, r8
   14d5c:	bl	13c80 <__assert_fail@plt+0x2454>
   14d60:	str	r0, [r8, #4]
   14d64:	cmp	r0, #0
   14d68:	bne	14d30 <__assert_fail@plt+0x3504>
   14d6c:	ldr	r3, [r8, #48]	; 0x30
   14d70:	tst	r3, #8192	; 0x2000
   14d74:	bne	151f8 <__assert_fail@plt+0x39cc>
   14d78:	ldr	r3, [r5, #32]
   14d7c:	cmp	r3, #0
   14d80:	beq	14d94 <__assert_fail@plt+0x3568>
   14d84:	ldrh	r3, [r5, #56]	; 0x38
   14d88:	cmp	r3, #4
   14d8c:	movne	r3, #7
   14d90:	strhne	r3, [r5, #56]	; 0x38
   14d94:	mov	r1, r5
   14d98:	mov	r0, r8
   14d9c:	bl	13bbc <__assert_fail@plt+0x2390>
   14da0:	mov	r4, r5
   14da4:	b	14f30 <__assert_fail@plt+0x3704>
   14da8:	bl	11688 <__errno_location@plt>
   14dac:	ldr	r3, [r0]
   14db0:	str	r3, [r5, #32]
   14db4:	ldrh	r3, [r5, #58]	; 0x3a
   14db8:	orr	r3, r3, #1
   14dbc:	strh	r3, [r5, #58]	; 0x3a
   14dc0:	ldr	r3, [r8, #4]
   14dc4:	cmp	r3, #0
   14dc8:	beq	14d30 <__assert_fail@plt+0x3504>
   14dcc:	ldr	r2, [r3, #4]
   14dd0:	ldr	r2, [r2, #24]
   14dd4:	str	r2, [r3, #24]
   14dd8:	ldr	r3, [r3, #8]
   14ddc:	cmp	r3, #0
   14de0:	bne	14dcc <__assert_fail@plt+0x35a0>
   14de4:	b	14d30 <__assert_fail@plt+0x3504>
   14de8:	str	r3, [r8]
   14dec:	ldr	r2, [r8, #24]
   14df0:	ldr	r3, [r3, #40]	; 0x28
   14df4:	mov	r1, #0
   14df8:	strb	r1, [r2, r3]
   14dfc:	mov	r1, #3
   14e00:	mov	r0, r8
   14e04:	bl	13c80 <__assert_fail@plt+0x2454>
   14e08:	subs	r4, r0, #0
   14e0c:	beq	14e1c <__assert_fail@plt+0x35f0>
   14e10:	mov	r0, r5
   14e14:	bl	1315c <__assert_fail@plt+0x1930>
   14e18:	b	14ff0 <__assert_fail@plt+0x37c4>
   14e1c:	ldr	r3, [r8, #48]	; 0x30
   14e20:	tst	r3, #8192	; 0x2000
   14e24:	beq	14e70 <__assert_fail@plt+0x3644>
   14e28:	b	14f30 <__assert_fail@plt+0x3704>
   14e2c:	str	r4, [r8]
   14e30:	mov	r0, r5
   14e34:	bl	1315c <__assert_fail@plt+0x1930>
   14e38:	ldr	r3, [r4, #48]	; 0x30
   14e3c:	cmp	r3, #0
   14e40:	beq	14f38 <__assert_fail@plt+0x370c>
   14e44:	ldrh	r3, [r4, #60]	; 0x3c
   14e48:	mov	r5, r4
   14e4c:	cmp	r3, #4
   14e50:	bne	14fe8 <__assert_fail@plt+0x37bc>
   14e54:	ldr	r4, [r5, #8]
   14e58:	cmp	r4, #0
   14e5c:	bne	14e2c <__assert_fail@plt+0x3600>
   14e60:	ldr	r3, [r5, #4]
   14e64:	ldr	r2, [r3, #12]
   14e68:	cmp	r2, #0
   14e6c:	bne	14de8 <__assert_fail@plt+0x35bc>
   14e70:	ldr	r4, [r5, #4]
   14e74:	str	r4, [r8]
   14e78:	mov	r0, r5
   14e7c:	bl	1315c <__assert_fail@plt+0x1930>
   14e80:	ldr	r3, [r4, #48]	; 0x30
   14e84:	cmn	r3, #1
   14e88:	beq	15130 <__assert_fail@plt+0x3904>
   14e8c:	ldrh	r3, [r4, #56]	; 0x38
   14e90:	cmp	r3, #11
   14e94:	beq	1514c <__assert_fail@plt+0x3920>
   14e98:	ldr	r2, [r8, #24]
   14e9c:	ldr	r3, [r4, #40]	; 0x28
   14ea0:	mov	r1, #0
   14ea4:	strb	r1, [r2, r3]
   14ea8:	ldr	r3, [r4, #48]	; 0x30
   14eac:	cmp	r3, r1
   14eb0:	beq	15150 <__assert_fail@plt+0x3924>
   14eb4:	ldrh	r3, [r4, #58]	; 0x3a
   14eb8:	tst	r3, #2
   14ebc:	beq	151a8 <__assert_fail@plt+0x397c>
   14ec0:	ldr	r3, [r8, #48]	; 0x30
   14ec4:	tst	r3, #4
   14ec8:	bne	14ee4 <__assert_fail@plt+0x36b8>
   14ecc:	tst	r3, #512	; 0x200
   14ed0:	beq	1517c <__assert_fail@plt+0x3950>
   14ed4:	mov	r2, #1
   14ed8:	ldr	r1, [r4, #36]	; 0x24
   14edc:	mov	r0, r8
   14ee0:	bl	13904 <__assert_fail@plt+0x20d8>
   14ee4:	ldr	r0, [r4, #36]	; 0x24
   14ee8:	bl	117e4 <close@plt>
   14eec:	ldrh	r3, [r4, #56]	; 0x38
   14ef0:	cmp	r3, #2
   14ef4:	beq	14f20 <__assert_fail@plt+0x36f4>
   14ef8:	ldr	r3, [r4, #32]
   14efc:	cmp	r3, #0
   14f00:	movne	r3, #7
   14f04:	strhne	r3, [r4, #56]	; 0x38
   14f08:	bne	14f20 <__assert_fail@plt+0x36f4>
   14f0c:	mov	r3, #6
   14f10:	strh	r3, [r4, #56]	; 0x38
   14f14:	mov	r1, r4
   14f18:	mov	r0, r8
   14f1c:	bl	13bbc <__assert_fail@plt+0x2390>
   14f20:	ldr	r3, [r8, #48]	; 0x30
   14f24:	and	r3, r3, #8192	; 0x2000
   14f28:	cmp	r3, #0
   14f2c:	movne	r4, #0
   14f30:	mov	r0, r4
   14f34:	pop	{r4, r5, r6, r7, r8, pc}
   14f38:	mov	r0, r8
   14f3c:	bl	13984 <__assert_fail@plt+0x2158>
   14f40:	cmp	r0, #0
   14f44:	bne	14fc4 <__assert_fail@plt+0x3798>
   14f48:	mov	r0, r8
   14f4c:	bl	136ac <__assert_fail@plt+0x1e80>
   14f50:	ldr	r2, [r4, #52]	; 0x34
   14f54:	str	r2, [r4, #40]	; 0x28
   14f58:	add	r6, r4, #168	; 0xa8
   14f5c:	add	r2, r2, #1
   14f60:	mov	r1, r6
   14f64:	ldr	r0, [r8, #24]
   14f68:	bl	11484 <memmove@plt>
   14f6c:	mov	r1, #47	; 0x2f
   14f70:	mov	r0, r6
   14f74:	bl	11718 <strrchr@plt>
   14f78:	cmp	r0, #0
   14f7c:	beq	14fac <__assert_fail@plt+0x3780>
   14f80:	cmp	r6, r0
   14f84:	beq	14fd8 <__assert_fail@plt+0x37ac>
   14f88:	add	r5, r0, #1
   14f8c:	mov	r0, r5
   14f90:	bl	11658 <strlen@plt>
   14f94:	mov	r7, r0
   14f98:	add	r2, r0, #1
   14f9c:	mov	r1, r5
   14fa0:	mov	r0, r6
   14fa4:	bl	11484 <memmove@plt>
   14fa8:	str	r7, [r4, #52]	; 0x34
   14fac:	ldr	r3, [r8, #24]
   14fb0:	str	r3, [r4, #28]
   14fb4:	str	r3, [r4, #24]
   14fb8:	mov	r0, r8
   14fbc:	bl	13598 <__assert_fail@plt+0x1d6c>
   14fc0:	b	15030 <__assert_fail@plt+0x3804>
   14fc4:	ldr	r3, [r8, #48]	; 0x30
   14fc8:	orr	r3, r3, #8192	; 0x2000
   14fcc:	str	r3, [r8, #48]	; 0x30
   14fd0:	mov	r4, #0
   14fd4:	b	14f30 <__assert_fail@plt+0x3704>
   14fd8:	ldrb	r3, [r4, #169]	; 0xa9
   14fdc:	cmp	r3, #0
   14fe0:	bne	14f88 <__assert_fail@plt+0x375c>
   14fe4:	b	14fac <__assert_fail@plt+0x3780>
   14fe8:	cmp	r3, #2
   14fec:	beq	15084 <__assert_fail@plt+0x3858>
   14ff0:	ldr	r2, [r8, #24]
   14ff4:	ldr	r0, [r4, #4]
   14ff8:	ldr	r1, [r0, #40]	; 0x28
   14ffc:	sub	r3, r1, #1
   15000:	ldr	r0, [r0, #28]
   15004:	ldrb	r0, [r0, r3]
   15008:	cmp	r0, #47	; 0x2f
   1500c:	movne	r3, r1
   15010:	add	r0, r2, r3
   15014:	mov	r1, #47	; 0x2f
   15018:	strb	r1, [r2, r3]
   1501c:	ldr	r2, [r4, #52]	; 0x34
   15020:	add	r2, r2, #1
   15024:	add	r1, r4, #168	; 0xa8
   15028:	add	r0, r0, #1
   1502c:	bl	11484 <memmove@plt>
   15030:	str	r4, [r8]
   15034:	ldrh	r3, [r4, #56]	; 0x38
   15038:	cmp	r3, #11
   1503c:	beq	150f8 <__assert_fail@plt+0x38cc>
   15040:	ldrh	r3, [r4, #56]	; 0x38
   15044:	cmp	r3, #1
   15048:	bne	14f30 <__assert_fail@plt+0x3704>
   1504c:	ldr	r3, [r4, #48]	; 0x30
   15050:	cmp	r3, #0
   15054:	ldrdeq	r2, [r4, #64]	; 0x40
   15058:	strdeq	r2, [r8, #16]
   1505c:	mov	r1, r4
   15060:	mov	r0, r8
   15064:	bl	13838 <__assert_fail@plt+0x200c>
   15068:	cmp	r0, #0
   1506c:	bne	14f30 <__assert_fail@plt+0x3704>
   15070:	bl	11688 <__errno_location@plt>
   15074:	mov	r3, #12
   15078:	str	r3, [r0]
   1507c:	mov	r4, #0
   15080:	b	14f30 <__assert_fail@plt+0x3704>
   15084:	mov	r2, #1
   15088:	mov	r1, r4
   1508c:	mov	r0, r8
   15090:	bl	132f8 <__assert_fail@plt+0x1acc>
   15094:	strh	r0, [r4, #56]	; 0x38
   15098:	cmp	r0, #1
   1509c:	beq	150ac <__assert_fail@plt+0x3880>
   150a0:	mov	r3, #3
   150a4:	strh	r3, [r4, #60]	; 0x3c
   150a8:	b	14ff0 <__assert_fail@plt+0x37c4>
   150ac:	ldr	r3, [r8, #48]	; 0x30
   150b0:	tst	r3, #4
   150b4:	bne	150a0 <__assert_fail@plt+0x3874>
   150b8:	ldr	r1, [pc, #320]	; 15200 <__assert_fail@plt+0x39d4>
   150bc:	mov	r0, r8
   150c0:	bl	1361c <__assert_fail@plt+0x1df0>
   150c4:	str	r0, [r4, #36]	; 0x24
   150c8:	cmp	r0, #0
   150cc:	bge	150e8 <__assert_fail@plt+0x38bc>
   150d0:	bl	11688 <__errno_location@plt>
   150d4:	ldr	r3, [r0]
   150d8:	str	r3, [r4, #32]
   150dc:	mov	r3, #7
   150e0:	strh	r3, [r4, #56]	; 0x38
   150e4:	b	150a0 <__assert_fail@plt+0x3874>
   150e8:	ldrh	r3, [r4, #58]	; 0x3a
   150ec:	orr	r3, r3, #2
   150f0:	strh	r3, [r4, #58]	; 0x3a
   150f4:	b	150a0 <__assert_fail@plt+0x3874>
   150f8:	ldrd	r2, [r4, #112]	; 0x70
   150fc:	cmp	r3, #0
   15100:	cmpeq	r2, #2
   15104:	beq	15118 <__assert_fail@plt+0x38ec>
   15108:	cmp	r3, #0
   1510c:	cmpeq	r2, #1
   15110:	beq	14f30 <__assert_fail@plt+0x3704>
   15114:	bl	117d8 <abort@plt>
   15118:	mov	r2, #0
   1511c:	mov	r1, r4
   15120:	mov	r0, r8
   15124:	bl	132f8 <__assert_fail@plt+0x1acc>
   15128:	strh	r0, [r4, #56]	; 0x38
   1512c:	b	15040 <__assert_fail@plt+0x3814>
   15130:	mov	r0, r4
   15134:	bl	1315c <__assert_fail@plt+0x1930>
   15138:	bl	11688 <__errno_location@plt>
   1513c:	mov	r4, #0
   15140:	str	r4, [r0]
   15144:	str	r4, [r8]
   15148:	b	14f30 <__assert_fail@plt+0x3704>
   1514c:	bl	117d8 <abort@plt>
   15150:	mov	r0, r8
   15154:	bl	13984 <__assert_fail@plt+0x2158>
   15158:	cmp	r0, #0
   1515c:	beq	14eec <__assert_fail@plt+0x36c0>
   15160:	bl	11688 <__errno_location@plt>
   15164:	ldr	r3, [r0]
   15168:	str	r3, [r4, #32]
   1516c:	ldr	r3, [r8, #48]	; 0x30
   15170:	orr	r3, r3, #8192	; 0x2000
   15174:	str	r3, [r8, #48]	; 0x30
   15178:	b	14eec <__assert_fail@plt+0x36c0>
   1517c:	ldr	r0, [r4, #36]	; 0x24
   15180:	bl	11760 <fchdir@plt>
   15184:	cmp	r0, #0
   15188:	beq	14ee4 <__assert_fail@plt+0x36b8>
   1518c:	bl	11688 <__errno_location@plt>
   15190:	ldr	r3, [r0]
   15194:	str	r3, [r4, #32]
   15198:	ldr	r3, [r8, #48]	; 0x30
   1519c:	orr	r3, r3, #8192	; 0x2000
   151a0:	str	r3, [r8, #48]	; 0x30
   151a4:	b	14ee4 <__assert_fail@plt+0x36b8>
   151a8:	tst	r3, #1
   151ac:	bne	14eec <__assert_fail@plt+0x36c0>
   151b0:	ldr	r3, [pc, #76]	; 15204 <__assert_fail@plt+0x39d8>
   151b4:	mvn	r2, #0
   151b8:	ldr	r1, [r4, #4]
   151bc:	mov	r0, r8
   151c0:	bl	139d4 <__assert_fail@plt+0x21a8>
   151c4:	cmp	r0, #0
   151c8:	beq	14eec <__assert_fail@plt+0x36c0>
   151cc:	bl	11688 <__errno_location@plt>
   151d0:	ldr	r3, [r0]
   151d4:	str	r3, [r4, #32]
   151d8:	ldr	r3, [r8, #48]	; 0x30
   151dc:	orr	r3, r3, #8192	; 0x2000
   151e0:	str	r3, [r8, #48]	; 0x30
   151e4:	b	14eec <__assert_fail@plt+0x36c0>
   151e8:	mov	r4, #0
   151ec:	b	14f30 <__assert_fail@plt+0x3704>
   151f0:	mov	r4, #0
   151f4:	b	14f30 <__assert_fail@plt+0x3704>
   151f8:	mov	r4, #0
   151fc:	b	14f30 <__assert_fail@plt+0x3704>
   15200:	andeq	sl, r1, r8, asr sl
   15204:	andeq	sl, r1, r4, ror sl
   15208:	cmp	r2, #4
   1520c:	bhi	1521c <__assert_fail@plt+0x39f0>
   15210:	strh	r2, [r1, #60]	; 0x3c
   15214:	mov	r0, #0
   15218:	bx	lr
   1521c:	push	{r4, lr}
   15220:	bl	11688 <__errno_location@plt>
   15224:	mov	r3, #22
   15228:	str	r3, [r0]
   1522c:	mov	r0, #1
   15230:	pop	{r4, pc}
   15234:	push	{r4, r5, r6, r7, r8, lr}
   15238:	bics	r3, r1, #4096	; 0x1000
   1523c:	bne	152e0 <__assert_fail@plt+0x3ab4>
   15240:	mov	r4, r0
   15244:	mov	r6, r1
   15248:	ldr	r5, [r0]
   1524c:	bl	11688 <__errno_location@plt>
   15250:	mov	r7, r0
   15254:	mov	r3, #0
   15258:	str	r3, [r0]
   1525c:	ldr	r3, [r4, #48]	; 0x30
   15260:	tst	r3, #8192	; 0x2000
   15264:	bne	15384 <__assert_fail@plt+0x3b58>
   15268:	ldrh	r3, [r5, #56]	; 0x38
   1526c:	cmp	r3, #9
   15270:	beq	152f4 <__assert_fail@plt+0x3ac8>
   15274:	cmp	r3, #1
   15278:	bne	1538c <__assert_fail@plt+0x3b60>
   1527c:	ldr	r0, [r4, #4]
   15280:	cmp	r0, #0
   15284:	beq	1528c <__assert_fail@plt+0x3a60>
   15288:	bl	1366c <__assert_fail@plt+0x1e40>
   1528c:	cmp	r6, #4096	; 0x1000
   15290:	ldreq	r3, [r4, #48]	; 0x30
   15294:	orreq	r3, r3, #4096	; 0x1000
   15298:	streq	r3, [r4, #48]	; 0x30
   1529c:	moveq	r6, #2
   152a0:	movne	r6, #1
   152a4:	ldr	r3, [r5, #48]	; 0x30
   152a8:	cmp	r3, #0
   152ac:	bne	152cc <__assert_fail@plt+0x3aa0>
   152b0:	ldr	r3, [r5, #24]
   152b4:	ldrb	r3, [r3]
   152b8:	cmp	r3, #47	; 0x2f
   152bc:	beq	152cc <__assert_fail@plt+0x3aa0>
   152c0:	ldr	r3, [r4, #48]	; 0x30
   152c4:	tst	r3, #4
   152c8:	beq	152fc <__assert_fail@plt+0x3ad0>
   152cc:	mov	r1, r6
   152d0:	mov	r0, r4
   152d4:	bl	13c80 <__assert_fail@plt+0x2454>
   152d8:	str	r0, [r4, #4]
   152dc:	pop	{r4, r5, r6, r7, r8, pc}
   152e0:	bl	11688 <__errno_location@plt>
   152e4:	mov	r3, #22
   152e8:	str	r3, [r0]
   152ec:	mov	r0, #0
   152f0:	pop	{r4, r5, r6, r7, r8, pc}
   152f4:	ldr	r0, [r5, #8]
   152f8:	pop	{r4, r5, r6, r7, r8, pc}
   152fc:	ldr	r1, [pc, #144]	; 15394 <__assert_fail@plt+0x3b68>
   15300:	mov	r0, r4
   15304:	bl	1361c <__assert_fail@plt+0x1df0>
   15308:	subs	r5, r0, #0
   1530c:	blt	15344 <__assert_fail@plt+0x3b18>
   15310:	mov	r1, r6
   15314:	mov	r0, r4
   15318:	bl	13c80 <__assert_fail@plt+0x2454>
   1531c:	str	r0, [r4, #4]
   15320:	ldr	r3, [r4, #48]	; 0x30
   15324:	tst	r3, #512	; 0x200
   15328:	beq	15350 <__assert_fail@plt+0x3b24>
   1532c:	mov	r2, #1
   15330:	mov	r1, r5
   15334:	mov	r0, r4
   15338:	bl	13904 <__assert_fail@plt+0x20d8>
   1533c:	ldr	r0, [r4, #4]
   15340:	pop	{r4, r5, r6, r7, r8, pc}
   15344:	mov	r0, #0
   15348:	str	r0, [r4, #4]
   1534c:	pop	{r4, r5, r6, r7, r8, pc}
   15350:	mov	r0, r5
   15354:	bl	11760 <fchdir@plt>
   15358:	cmp	r0, #0
   1535c:	bne	1536c <__assert_fail@plt+0x3b40>
   15360:	mov	r0, r5
   15364:	bl	117e4 <close@plt>
   15368:	b	1533c <__assert_fail@plt+0x3b10>
   1536c:	ldr	r4, [r7]
   15370:	mov	r0, r5
   15374:	bl	117e4 <close@plt>
   15378:	str	r4, [r7]
   1537c:	mov	r0, #0
   15380:	pop	{r4, r5, r6, r7, r8, pc}
   15384:	mov	r0, #0
   15388:	pop	{r4, r5, r6, r7, r8, pc}
   1538c:	mov	r0, #0
   15390:	pop	{r4, r5, r6, r7, r8, pc}
   15394:	andeq	sl, r1, r8, asr sl
   15398:	push	{r4, lr}
   1539c:	ror	r0, r0, #3
   153a0:	bl	1a05c <lchmod@@Base+0x3bd4>
   153a4:	mov	r0, r1
   153a8:	pop	{r4, pc}
   153ac:	cmp	r1, r0
   153b0:	movne	r0, #0
   153b4:	moveq	r0, #1
   153b8:	bx	lr
   153bc:	ldr	r3, [r0, #20]
   153c0:	ldr	r2, [pc, #176]	; 15478 <__assert_fail@plt+0x3c4c>
   153c4:	cmp	r3, r2
   153c8:	beq	15460 <__assert_fail@plt+0x3c34>
   153cc:	vldr	s15, [r3, #8]
   153d0:	vldr	s14, [pc, #144]	; 15468 <__assert_fail@plt+0x3c3c>
   153d4:	vcmpe.f32	s15, s14
   153d8:	vmrs	APSR_nzcv, fpscr
   153dc:	ble	1543c <__assert_fail@plt+0x3c10>
   153e0:	vldr	s14, [pc, #132]	; 1546c <__assert_fail@plt+0x3c40>
   153e4:	vcmpe.f32	s15, s14
   153e8:	vmrs	APSR_nzcv, fpscr
   153ec:	bpl	1543c <__assert_fail@plt+0x3c10>
   153f0:	vldr	s13, [r3, #12]
   153f4:	vldr	s14, [pc, #116]	; 15470 <__assert_fail@plt+0x3c44>
   153f8:	vcmpe.f32	s13, s14
   153fc:	vmrs	APSR_nzcv, fpscr
   15400:	ble	1543c <__assert_fail@plt+0x3c10>
   15404:	vldr	s14, [r3]
   15408:	vcmpe.f32	s14, #0.0
   1540c:	vmrs	APSR_nzcv, fpscr
   15410:	blt	1543c <__assert_fail@plt+0x3c10>
   15414:	vldr	s13, [pc, #76]	; 15468 <__assert_fail@plt+0x3c3c>
   15418:	vadd.f32	s14, s14, s13
   1541c:	vldr	s13, [r3, #4]
   15420:	vcmpe.f32	s14, s13
   15424:	vmrs	APSR_nzcv, fpscr
   15428:	bpl	1543c <__assert_fail@plt+0x3c10>
   1542c:	vldr	s12, [pc, #64]	; 15474 <__assert_fail@plt+0x3c48>
   15430:	vcmpe.f32	s13, s12
   15434:	vmrs	APSR_nzcv, fpscr
   15438:	bls	1544c <__assert_fail@plt+0x3c20>
   1543c:	ldr	r3, [pc, #52]	; 15478 <__assert_fail@plt+0x3c4c>
   15440:	str	r3, [r0, #20]
   15444:	mov	r0, #0
   15448:	bx	lr
   1544c:	vcmpe.f32	s15, s14
   15450:	vmrs	APSR_nzcv, fpscr
   15454:	ble	1543c <__assert_fail@plt+0x3c10>
   15458:	mov	r0, #1
   1545c:	bx	lr
   15460:	mov	r0, #1
   15464:	bx	lr
   15468:	stclcc	12, cr12, [ip, #820]	; 0x334
   1546c:	svccc	0x00666666
   15470:	svccc	0x008ccccd
   15474:	svccc	0x00800000
   15478:	andeq	sl, r1, r8, ror sl
   1547c:	push	{r4, lr}
   15480:	mov	r4, r0
   15484:	mov	r0, r1
   15488:	ldr	r3, [r4, #24]
   1548c:	ldr	r1, [r4, #8]
   15490:	blx	r3
   15494:	ldr	r3, [r4, #8]
   15498:	cmp	r0, r3
   1549c:	bcs	154ac <__assert_fail@plt+0x3c80>
   154a0:	ldr	r3, [r4]
   154a4:	add	r0, r3, r0, lsl #3
   154a8:	pop	{r4, pc}
   154ac:	bl	117d8 <abort@plt>
   154b0:	push	{r4, r5, r6, r7, r8, lr}
   154b4:	ldrb	r3, [r1, #16]
   154b8:	cmp	r3, #0
   154bc:	bne	154ec <__assert_fail@plt+0x3cc0>
   154c0:	vmov	s15, r0
   154c4:	vcvt.f32.u32	s13, s15
   154c8:	vldr	s14, [r1, #8]
   154cc:	vdiv.f32	s15, s13, s14
   154d0:	vldr	s14, [pc, #204]	; 155a4 <__assert_fail@plt+0x3d78>
   154d4:	vcmpe.f32	s15, s14
   154d8:	vmrs	APSR_nzcv, fpscr
   154dc:	movge	r7, #0
   154e0:	bge	15524 <__assert_fail@plt+0x3cf8>
   154e4:	vcvt.u32.f32	s15, s15
   154e8:	vmov	r0, s15
   154ec:	cmp	r0, #10
   154f0:	movcc	r0, #10
   154f4:	orr	r7, r0, #1
   154f8:	cmn	r7, #1
   154fc:	ldrne	r8, [pc, #164]	; 155a8 <__assert_fail@plt+0x3d7c>
   15500:	bne	15550 <__assert_fail@plt+0x3d24>
   15504:	lsr	r3, r7, #30
   15508:	lsl	r2, r7, #2
   1550c:	adds	r3, r3, #0
   15510:	movne	r3, #1
   15514:	cmp	r2, #0
   15518:	movlt	r3, #1
   1551c:	cmp	r3, #0
   15520:	movne	r7, #0
   15524:	mov	r0, r7
   15528:	pop	{r4, r5, r6, r7, r8, pc}
   1552c:	mov	r4, #3
   15530:	mov	r1, r4
   15534:	mov	r0, r7
   15538:	bl	1a05c <lchmod@@Base+0x3bd4>
   1553c:	cmp	r1, #0
   15540:	bne	15504 <__assert_fail@plt+0x3cd8>
   15544:	add	r7, r7, #2
   15548:	cmn	r7, #1
   1554c:	beq	15504 <__assert_fail@plt+0x3cd8>
   15550:	cmp	r7, #9
   15554:	bls	1552c <__assert_fail@plt+0x3d00>
   15558:	umull	r2, r3, r8, r7
   1555c:	lsr	r3, r3, #1
   15560:	add	r3, r3, r3, lsl #1
   15564:	cmp	r7, r3
   15568:	beq	15544 <__assert_fail@plt+0x3d18>
   1556c:	mov	r6, #16
   15570:	mov	r5, #9
   15574:	mov	r4, #3
   15578:	add	r5, r5, r6
   1557c:	add	r4, r4, #2
   15580:	cmp	r5, r7
   15584:	bcs	15530 <__assert_fail@plt+0x3d04>
   15588:	add	r6, r6, #8
   1558c:	mov	r1, r4
   15590:	mov	r0, r7
   15594:	bl	1a05c <lchmod@@Base+0x3bd4>
   15598:	cmp	r1, #0
   1559c:	bne	15578 <__assert_fail@plt+0x3d4c>
   155a0:	b	15544 <__assert_fail@plt+0x3d18>
   155a4:	svcmi	0x00800000
   155a8:	bge	feac005c <optarg@@GLIBC_2.4+0xfea93e7c>
   155ac:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155b0:	ldr	r7, [r1]
   155b4:	ldr	r3, [r1, #4]
   155b8:	cmp	r7, r3
   155bc:	bcs	156f0 <__assert_fail@plt+0x3ec4>
   155c0:	mov	fp, r2
   155c4:	mov	sl, r1
   155c8:	mov	r6, r0
   155cc:	add	r7, r7, #8
   155d0:	mov	r9, #0
   155d4:	b	1563c <__assert_fail@plt+0x3e10>
   155d8:	str	r5, [r0]
   155dc:	ldr	r2, [r6, #12]
   155e0:	add	r2, r2, #1
   155e4:	str	r2, [r6, #12]
   155e8:	str	r9, [r4]
   155ec:	ldr	r2, [r6, #36]	; 0x24
   155f0:	str	r2, [r4, #4]
   155f4:	str	r4, [r6, #36]	; 0x24
   155f8:	b	15684 <__assert_fail@plt+0x3e58>
   155fc:	mov	r0, #8
   15600:	bl	19558 <lchmod@@Base+0x30d0>
   15604:	cmp	r0, #0
   15608:	beq	156f8 <__assert_fail@plt+0x3ecc>
   1560c:	str	r4, [r0]
   15610:	ldr	r3, [r5, #4]
   15614:	str	r3, [r0, #4]
   15618:	str	r0, [r5, #4]
   1561c:	str	r9, [r8, #-8]
   15620:	ldr	r3, [sl, #12]
   15624:	sub	r3, r3, #1
   15628:	str	r3, [sl, #12]
   1562c:	add	r7, r7, #8
   15630:	ldr	r3, [sl, #4]
   15634:	cmp	r3, r8
   15638:	bls	156e8 <__assert_fail@plt+0x3ebc>
   1563c:	mov	r8, r7
   15640:	ldr	r3, [r7, #-8]
   15644:	cmp	r3, #0
   15648:	beq	1562c <__assert_fail@plt+0x3e00>
   1564c:	ldr	r4, [r7, #-4]
   15650:	cmp	r4, #0
   15654:	beq	15690 <__assert_fail@plt+0x3e64>
   15658:	ldr	r5, [r4]
   1565c:	mov	r1, r5
   15660:	mov	r0, r6
   15664:	bl	1547c <__assert_fail@plt+0x3c50>
   15668:	ldr	r3, [r4, #4]
   1566c:	ldr	r2, [r0]
   15670:	cmp	r2, #0
   15674:	beq	155d8 <__assert_fail@plt+0x3dac>
   15678:	ldr	r2, [r0, #4]
   1567c:	str	r2, [r4, #4]
   15680:	str	r4, [r0, #4]
   15684:	mov	r4, r3
   15688:	cmp	r3, #0
   1568c:	bne	15658 <__assert_fail@plt+0x3e2c>
   15690:	ldr	r4, [r8, #-8]
   15694:	str	r9, [r8, #-4]
   15698:	cmp	fp, #0
   1569c:	bne	1562c <__assert_fail@plt+0x3e00>
   156a0:	mov	r1, r4
   156a4:	mov	r0, r6
   156a8:	bl	1547c <__assert_fail@plt+0x3c50>
   156ac:	mov	r5, r0
   156b0:	ldr	r3, [r0]
   156b4:	cmp	r3, #0
   156b8:	beq	156d4 <__assert_fail@plt+0x3ea8>
   156bc:	ldr	r0, [r6, #36]	; 0x24
   156c0:	cmp	r0, #0
   156c4:	beq	155fc <__assert_fail@plt+0x3dd0>
   156c8:	ldr	r3, [r0, #4]
   156cc:	str	r3, [r6, #36]	; 0x24
   156d0:	b	1560c <__assert_fail@plt+0x3de0>
   156d4:	str	r4, [r0]
   156d8:	ldr	r3, [r6, #12]
   156dc:	add	r3, r3, #1
   156e0:	str	r3, [r6, #12]
   156e4:	b	1561c <__assert_fail@plt+0x3df0>
   156e8:	mov	r0, #1
   156ec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156f0:	mov	r0, #1
   156f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156f8:	mov	r0, fp
   156fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15700:	push	{r4, r5, r6, r7, r8, lr}
   15704:	mov	r6, r0
   15708:	mov	r5, r1
   1570c:	mov	r8, r2
   15710:	mov	r7, r3
   15714:	bl	1547c <__assert_fail@plt+0x3c50>
   15718:	str	r0, [r8]
   1571c:	ldr	r3, [r0]
   15720:	cmp	r3, #0
   15724:	beq	157fc <__assert_fail@plt+0x3fd0>
   15728:	mov	r4, r0
   1572c:	cmp	r5, r3
   15730:	beq	157c4 <__assert_fail@plt+0x3f98>
   15734:	ldr	r2, [r6, #28]
   15738:	mov	r1, r3
   1573c:	mov	r0, r5
   15740:	blx	r2
   15744:	cmp	r0, #0
   15748:	bne	157c4 <__assert_fail@plt+0x3f98>
   1574c:	ldr	r3, [r4, #4]
   15750:	cmp	r3, #0
   15754:	beq	15804 <__assert_fail@plt+0x3fd8>
   15758:	ldr	r1, [r3]
   1575c:	cmp	r5, r1
   15760:	beq	15794 <__assert_fail@plt+0x3f68>
   15764:	ldr	r3, [r6, #28]
   15768:	mov	r0, r5
   1576c:	blx	r3
   15770:	cmp	r0, #0
   15774:	bne	15794 <__assert_fail@plt+0x3f68>
   15778:	ldr	r4, [r4, #4]
   1577c:	ldr	r3, [r4, #4]
   15780:	cmp	r3, #0
   15784:	beq	157fc <__assert_fail@plt+0x3fd0>
   15788:	ldr	r1, [r3]
   1578c:	cmp	r5, r1
   15790:	bne	15764 <__assert_fail@plt+0x3f38>
   15794:	ldr	r2, [r4, #4]
   15798:	ldr	r3, [r2]
   1579c:	cmp	r7, #0
   157a0:	beq	157fc <__assert_fail@plt+0x3fd0>
   157a4:	ldr	r1, [r2, #4]
   157a8:	str	r1, [r4, #4]
   157ac:	mov	r1, #0
   157b0:	str	r1, [r2]
   157b4:	ldr	r1, [r6, #36]	; 0x24
   157b8:	str	r1, [r2, #4]
   157bc:	str	r2, [r6, #36]	; 0x24
   157c0:	b	157fc <__assert_fail@plt+0x3fd0>
   157c4:	ldr	r3, [r4]
   157c8:	cmp	r7, #0
   157cc:	beq	157fc <__assert_fail@plt+0x3fd0>
   157d0:	ldr	r2, [r4, #4]
   157d4:	cmp	r2, #0
   157d8:	ldmne	r2, {r0, r1}
   157dc:	stmne	r4, {r0, r1}
   157e0:	movne	r1, #0
   157e4:	strne	r1, [r2]
   157e8:	ldrne	r1, [r6, #36]	; 0x24
   157ec:	strne	r1, [r2, #4]
   157f0:	strne	r2, [r6, #36]	; 0x24
   157f4:	moveq	r2, #0
   157f8:	streq	r2, [r4]
   157fc:	mov	r0, r3
   15800:	pop	{r4, r5, r6, r7, r8, pc}
   15804:	mov	r3, #0
   15808:	b	157fc <__assert_fail@plt+0x3fd0>
   1580c:	ldr	r0, [r0, #8]
   15810:	bx	lr
   15814:	ldr	r0, [r0, #12]
   15818:	bx	lr
   1581c:	ldr	r0, [r0, #16]
   15820:	bx	lr
   15824:	ldr	r1, [r0]
   15828:	ldr	ip, [r0, #4]
   1582c:	cmp	r1, ip
   15830:	bcs	15888 <__assert_fail@plt+0x405c>
   15834:	mov	r0, #0
   15838:	b	15854 <__assert_fail@plt+0x4028>
   1583c:	mov	r2, #1
   15840:	cmp	r0, r2
   15844:	movcc	r0, r2
   15848:	add	r1, r1, #8
   1584c:	cmp	r1, ip
   15850:	bcs	15884 <__assert_fail@plt+0x4058>
   15854:	ldr	r3, [r1]
   15858:	cmp	r3, #0
   1585c:	beq	15848 <__assert_fail@plt+0x401c>
   15860:	ldr	r3, [r1, #4]
   15864:	cmp	r3, #0
   15868:	beq	1583c <__assert_fail@plt+0x4010>
   1586c:	mov	r2, #1
   15870:	add	r2, r2, #1
   15874:	ldr	r3, [r3, #4]
   15878:	cmp	r3, #0
   1587c:	bne	15870 <__assert_fail@plt+0x4044>
   15880:	b	15840 <__assert_fail@plt+0x4014>
   15884:	bx	lr
   15888:	mov	r0, #0
   1588c:	bx	lr
   15890:	push	{lr}		; (str lr, [sp, #-4]!)
   15894:	ldr	r1, [r0]
   15898:	ldr	lr, [r0, #4]
   1589c:	cmp	r1, lr
   158a0:	bcs	158f0 <__assert_fail@plt+0x40c4>
   158a4:	mov	r2, #0
   158a8:	mov	ip, r2
   158ac:	b	158bc <__assert_fail@plt+0x4090>
   158b0:	add	r1, r1, #8
   158b4:	cmp	r1, lr
   158b8:	bcs	158f8 <__assert_fail@plt+0x40cc>
   158bc:	ldr	r3, [r1]
   158c0:	cmp	r3, #0
   158c4:	beq	158b0 <__assert_fail@plt+0x4084>
   158c8:	add	ip, ip, #1
   158cc:	add	r2, r2, #1
   158d0:	ldr	r3, [r1, #4]
   158d4:	cmp	r3, #0
   158d8:	beq	158b0 <__assert_fail@plt+0x4084>
   158dc:	add	r2, r2, #1
   158e0:	ldr	r3, [r3, #4]
   158e4:	cmp	r3, #0
   158e8:	bne	158dc <__assert_fail@plt+0x40b0>
   158ec:	b	158b0 <__assert_fail@plt+0x4084>
   158f0:	mov	r2, #0
   158f4:	mov	ip, r2
   158f8:	ldr	r3, [r0, #12]
   158fc:	cmp	r3, ip
   15900:	beq	1590c <__assert_fail@plt+0x40e0>
   15904:	mov	r0, #0
   15908:	pop	{pc}		; (ldr pc, [sp], #4)
   1590c:	ldr	r0, [r0, #16]
   15910:	cmp	r0, r2
   15914:	movne	r0, #0
   15918:	moveq	r0, #1
   1591c:	pop	{pc}		; (ldr pc, [sp], #4)
   15920:	push	{r4, r5, r6, r7, r8, lr}
   15924:	sub	sp, sp, #8
   15928:	mov	r6, r0
   1592c:	mov	r4, r1
   15930:	ldr	r5, [r0, #8]
   15934:	ldr	r7, [r0, #12]
   15938:	bl	15824 <__assert_fail@plt+0x3ff8>
   1593c:	mov	r8, r0
   15940:	ldr	r3, [r6, #16]
   15944:	ldr	r2, [pc, #116]	; 159c0 <__assert_fail@plt+0x4194>
   15948:	mov	r1, #1
   1594c:	mov	r0, r4
   15950:	bl	116d0 <__fprintf_chk@plt>
   15954:	mov	r3, r5
   15958:	ldr	r2, [pc, #100]	; 159c4 <__assert_fail@plt+0x4198>
   1595c:	mov	r1, #1
   15960:	mov	r0, r4
   15964:	bl	116d0 <__fprintf_chk@plt>
   15968:	vmov	s15, r7
   1596c:	vcvt.f64.u32	d6, s15
   15970:	vldr	d7, [pc, #64]	; 159b8 <__assert_fail@plt+0x418c>
   15974:	vmul.f64	d6, d6, d7
   15978:	vmov	s15, r5
   1597c:	vcvt.f64.u32	d7, s15
   15980:	vdiv.f64	d5, d6, d7
   15984:	vstr	d5, [sp]
   15988:	mov	r3, r7
   1598c:	ldr	r2, [pc, #52]	; 159c8 <__assert_fail@plt+0x419c>
   15990:	mov	r1, #1
   15994:	mov	r0, r4
   15998:	bl	116d0 <__fprintf_chk@plt>
   1599c:	mov	r3, r8
   159a0:	ldr	r2, [pc, #36]	; 159cc <__assert_fail@plt+0x41a0>
   159a4:	mov	r1, #1
   159a8:	mov	r0, r4
   159ac:	bl	116d0 <__fprintf_chk@plt>
   159b0:	add	sp, sp, #8
   159b4:	pop	{r4, r5, r6, r7, r8, pc}
   159b8:	andeq	r0, r0, r0
   159bc:	subsmi	r0, r9, r0
   159c0:	andeq	sl, r1, ip, lsl #21
   159c4:	andeq	sl, r1, r4, lsr #21
   159c8:			; <UNDEFINED> instruction: 0x0001aabc
   159cc:	andeq	sl, r1, r0, ror #21
   159d0:	push	{r4, r5, r6, lr}
   159d4:	mov	r6, r0
   159d8:	mov	r5, r1
   159dc:	bl	1547c <__assert_fail@plt+0x3c50>
   159e0:	ldr	r1, [r0]
   159e4:	cmp	r1, #0
   159e8:	beq	15a3c <__assert_fail@plt+0x4210>
   159ec:	mov	r4, r0
   159f0:	cmp	r0, #0
   159f4:	beq	15a44 <__assert_fail@plt+0x4218>
   159f8:	cmp	r5, r1
   159fc:	beq	15a2c <__assert_fail@plt+0x4200>
   15a00:	ldr	r3, [r6, #28]
   15a04:	mov	r0, r5
   15a08:	blx	r3
   15a0c:	cmp	r0, #0
   15a10:	bne	15a2c <__assert_fail@plt+0x4200>
   15a14:	ldr	r4, [r4, #4]
   15a18:	cmp	r4, #0
   15a1c:	beq	15a34 <__assert_fail@plt+0x4208>
   15a20:	ldr	r1, [r4]
   15a24:	cmp	r5, r1
   15a28:	bne	15a00 <__assert_fail@plt+0x41d4>
   15a2c:	ldr	r0, [r4]
   15a30:	pop	{r4, r5, r6, pc}
   15a34:	mov	r0, #0
   15a38:	pop	{r4, r5, r6, pc}
   15a3c:	mov	r0, #0
   15a40:	pop	{r4, r5, r6, pc}
   15a44:	mov	r0, #0
   15a48:	pop	{r4, r5, r6, pc}
   15a4c:	ldr	r3, [r0, #16]
   15a50:	cmp	r3, #0
   15a54:	beq	15a98 <__assert_fail@plt+0x426c>
   15a58:	ldr	r3, [r0]
   15a5c:	ldr	r2, [r0, #4]
   15a60:	cmp	r3, r2
   15a64:	bcs	15a90 <__assert_fail@plt+0x4264>
   15a68:	ldr	r0, [r3]
   15a6c:	cmp	r0, #0
   15a70:	bne	15a8c <__assert_fail@plt+0x4260>
   15a74:	add	r3, r3, #8
   15a78:	cmp	r3, r2
   15a7c:	bcs	15a90 <__assert_fail@plt+0x4264>
   15a80:	ldr	r0, [r3]
   15a84:	cmp	r0, #0
   15a88:	beq	15a74 <__assert_fail@plt+0x4248>
   15a8c:	bx	lr
   15a90:	push	{r4, lr}
   15a94:	bl	117d8 <abort@plt>
   15a98:	mov	r0, #0
   15a9c:	b	15a8c <__assert_fail@plt+0x4260>
   15aa0:	push	{r4, r5, r6, lr}
   15aa4:	mov	r5, r0
   15aa8:	mov	r4, r1
   15aac:	bl	1547c <__assert_fail@plt+0x3c50>
   15ab0:	mov	r2, r0
   15ab4:	mov	r3, r0
   15ab8:	ldr	r1, [r3]
   15abc:	cmp	r4, r1
   15ac0:	beq	15ad4 <__assert_fail@plt+0x42a8>
   15ac4:	ldr	r3, [r3, #4]
   15ac8:	cmp	r3, #0
   15acc:	bne	15ab8 <__assert_fail@plt+0x428c>
   15ad0:	b	15ae0 <__assert_fail@plt+0x42b4>
   15ad4:	ldr	r3, [r3, #4]
   15ad8:	cmp	r3, #0
   15adc:	bne	15b00 <__assert_fail@plt+0x42d4>
   15ae0:	ldr	r3, [r5, #4]
   15ae4:	add	r2, r2, #8
   15ae8:	cmp	r2, r3
   15aec:	bcs	15b08 <__assert_fail@plt+0x42dc>
   15af0:	ldr	r0, [r2]
   15af4:	cmp	r0, #0
   15af8:	beq	15ae4 <__assert_fail@plt+0x42b8>
   15afc:	pop	{r4, r5, r6, pc}
   15b00:	ldr	r0, [r3]
   15b04:	pop	{r4, r5, r6, pc}
   15b08:	mov	r0, #0
   15b0c:	pop	{r4, r5, r6, pc}
   15b10:	push	{r4, r5, lr}
   15b14:	ldr	r4, [r0]
   15b18:	ldr	r3, [r0, #4]
   15b1c:	cmp	r4, r3
   15b20:	bcs	15b8c <__assert_fail@plt+0x4360>
   15b24:	mov	r5, r0
   15b28:	mov	r0, #0
   15b2c:	b	15b40 <__assert_fail@plt+0x4314>
   15b30:	add	r4, r4, #8
   15b34:	ldr	r3, [r5, #4]
   15b38:	cmp	r3, r4
   15b3c:	bls	15b88 <__assert_fail@plt+0x435c>
   15b40:	ldr	r3, [r4]
   15b44:	cmp	r3, #0
   15b48:	beq	15b30 <__assert_fail@plt+0x4304>
   15b4c:	cmp	r4, #0
   15b50:	beq	15b30 <__assert_fail@plt+0x4304>
   15b54:	cmp	r2, r0
   15b58:	popls	{r4, r5, pc}
   15b5c:	add	ip, r1, r0, lsl #2
   15b60:	mov	r3, r4
   15b64:	add	r0, r0, #1
   15b68:	ldr	lr, [r3]
   15b6c:	str	lr, [ip], #4
   15b70:	ldr	r3, [r3, #4]
   15b74:	cmp	r3, #0
   15b78:	beq	15b30 <__assert_fail@plt+0x4304>
   15b7c:	cmp	r2, r0
   15b80:	bne	15b64 <__assert_fail@plt+0x4338>
   15b84:	pop	{r4, r5, pc}
   15b88:	pop	{r4, r5, pc}
   15b8c:	mov	r0, #0
   15b90:	pop	{r4, r5, pc}
   15b94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b98:	ldr	r8, [r0]
   15b9c:	ldr	r3, [r0, #4]
   15ba0:	cmp	r8, r3
   15ba4:	bcs	15c0c <__assert_fail@plt+0x43e0>
   15ba8:	mov	r7, r2
   15bac:	mov	r6, r1
   15bb0:	mov	r9, r0
   15bb4:	mov	r5, #0
   15bb8:	b	15bcc <__assert_fail@plt+0x43a0>
   15bbc:	add	r8, r8, #8
   15bc0:	ldr	r3, [r9, #4]
   15bc4:	cmp	r3, r8
   15bc8:	bls	15c10 <__assert_fail@plt+0x43e4>
   15bcc:	ldr	r3, [r8]
   15bd0:	cmp	r3, #0
   15bd4:	beq	15bbc <__assert_fail@plt+0x4390>
   15bd8:	cmp	r8, #0
   15bdc:	beq	15bbc <__assert_fail@plt+0x4390>
   15be0:	mov	r4, r8
   15be4:	mov	r1, r7
   15be8:	ldr	r0, [r4]
   15bec:	blx	r6
   15bf0:	cmp	r0, #0
   15bf4:	beq	15c10 <__assert_fail@plt+0x43e4>
   15bf8:	add	r5, r5, #1
   15bfc:	ldr	r4, [r4, #4]
   15c00:	cmp	r4, #0
   15c04:	bne	15be4 <__assert_fail@plt+0x43b8>
   15c08:	b	15bbc <__assert_fail@plt+0x4390>
   15c0c:	mov	r5, #0
   15c10:	mov	r0, r5
   15c14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c18:	ldrb	r3, [r0]
   15c1c:	cmp	r3, #0
   15c20:	beq	15c58 <__assert_fail@plt+0x442c>
   15c24:	push	{r4, r5, r6, lr}
   15c28:	mov	r4, r0
   15c2c:	mov	r5, r1
   15c30:	mov	r1, #0
   15c34:	rsb	r0, r1, r1, lsl #5
   15c38:	mov	r1, r5
   15c3c:	add	r0, r0, r3
   15c40:	bl	1a05c <lchmod@@Base+0x3bd4>
   15c44:	ldrb	r3, [r4, #1]!
   15c48:	cmp	r3, #0
   15c4c:	bne	15c34 <__assert_fail@plt+0x4408>
   15c50:	mov	r0, r1
   15c54:	pop	{r4, r5, r6, pc}
   15c58:	mov	r1, #0
   15c5c:	mov	r0, r1
   15c60:	bx	lr
   15c64:	push	{lr}		; (str lr, [sp, #-4]!)
   15c68:	mov	ip, r0
   15c6c:	ldr	lr, [pc, #16]	; 15c84 <__assert_fail@plt+0x4458>
   15c70:	ldm	lr!, {r0, r1, r2, r3}
   15c74:	stmia	ip!, {r0, r1, r2, r3}
   15c78:	ldr	r3, [lr]
   15c7c:	str	r3, [ip]
   15c80:	pop	{pc}		; (ldr pc, [sp], #4)
   15c84:	andeq	sl, r1, r8, ror sl
   15c88:	push	{r4, r5, r6, r7, r8, lr}
   15c8c:	mov	r8, r0
   15c90:	mov	r5, r1
   15c94:	subs	r7, r2, #0
   15c98:	ldr	r2, [pc, #180]	; 15d54 <__assert_fail@plt+0x4528>
   15c9c:	cmp	r7, #0
   15ca0:	moveq	r7, r2
   15ca4:	subs	r6, r3, #0
   15ca8:	ldr	r3, [pc, #168]	; 15d58 <__assert_fail@plt+0x452c>
   15cac:	cmp	r6, #0
   15cb0:	moveq	r6, r3
   15cb4:	mov	r0, #40	; 0x28
   15cb8:	bl	19558 <lchmod@@Base+0x30d0>
   15cbc:	subs	r4, r0, #0
   15cc0:	beq	15d3c <__assert_fail@plt+0x4510>
   15cc4:	ldr	r3, [pc, #144]	; 15d5c <__assert_fail@plt+0x4530>
   15cc8:	cmp	r5, #0
   15ccc:	moveq	r5, r3
   15cd0:	str	r5, [r4, #20]
   15cd4:	mov	r0, r4
   15cd8:	bl	153bc <__assert_fail@plt+0x3b90>
   15cdc:	cmp	r0, #0
   15ce0:	beq	15d44 <__assert_fail@plt+0x4518>
   15ce4:	mov	r1, r5
   15ce8:	mov	r0, r8
   15cec:	bl	154b0 <__assert_fail@plt+0x3c84>
   15cf0:	str	r0, [r4, #8]
   15cf4:	cmp	r0, #0
   15cf8:	beq	15d44 <__assert_fail@plt+0x4518>
   15cfc:	mov	r1, #8
   15d00:	bl	19508 <lchmod@@Base+0x3080>
   15d04:	str	r0, [r4]
   15d08:	cmp	r0, #0
   15d0c:	beq	15d44 <__assert_fail@plt+0x4518>
   15d10:	ldr	r3, [r4, #8]
   15d14:	add	r0, r0, r3, lsl #3
   15d18:	str	r0, [r4, #4]
   15d1c:	mov	r3, #0
   15d20:	str	r3, [r4, #12]
   15d24:	str	r3, [r4, #16]
   15d28:	str	r7, [r4, #24]
   15d2c:	str	r6, [r4, #28]
   15d30:	ldr	r2, [sp, #24]
   15d34:	str	r2, [r4, #32]
   15d38:	str	r3, [r4, #36]	; 0x24
   15d3c:	mov	r0, r4
   15d40:	pop	{r4, r5, r6, r7, r8, pc}
   15d44:	mov	r0, r4
   15d48:	bl	1315c <__assert_fail@plt+0x1930>
   15d4c:	mov	r4, #0
   15d50:	b	15d3c <__assert_fail@plt+0x4510>
   15d54:	muleq	r1, r8, r3
   15d58:	andeq	r5, r1, ip, lsr #7
   15d5c:	andeq	sl, r1, r8, ror sl
   15d60:	push	{r4, r5, r6, r7, r8, lr}
   15d64:	mov	r5, r0
   15d68:	ldr	r7, [r0]
   15d6c:	ldr	r3, [r0, #4]
   15d70:	cmp	r7, r3
   15d74:	bcs	15e08 <__assert_fail@plt+0x45dc>
   15d78:	add	r7, r7, #8
   15d7c:	mov	r6, #0
   15d80:	b	15de8 <__assert_fail@plt+0x45bc>
   15d84:	str	r6, [r4]
   15d88:	ldr	r3, [r4, #4]
   15d8c:	ldr	r2, [r5, #36]	; 0x24
   15d90:	str	r2, [r4, #4]
   15d94:	str	r4, [r5, #36]	; 0x24
   15d98:	mov	r4, r3
   15d9c:	cmp	r3, #0
   15da0:	beq	15dbc <__assert_fail@plt+0x4590>
   15da4:	ldr	r3, [r5, #32]
   15da8:	cmp	r3, #0
   15dac:	beq	15d84 <__assert_fail@plt+0x4558>
   15db0:	ldr	r0, [r4]
   15db4:	blx	r3
   15db8:	b	15d84 <__assert_fail@plt+0x4558>
   15dbc:	ldr	r3, [r5, #32]
   15dc0:	cmp	r3, #0
   15dc4:	beq	15dd0 <__assert_fail@plt+0x45a4>
   15dc8:	ldr	r0, [r8, #-8]
   15dcc:	blx	r3
   15dd0:	str	r6, [r8, #-8]
   15dd4:	str	r6, [r8, #-4]
   15dd8:	add	r7, r7, #8
   15ddc:	ldr	r3, [r5, #4]
   15de0:	cmp	r3, r8
   15de4:	bls	15e08 <__assert_fail@plt+0x45dc>
   15de8:	mov	r8, r7
   15dec:	ldr	r3, [r7, #-8]
   15df0:	cmp	r3, #0
   15df4:	beq	15dd8 <__assert_fail@plt+0x45ac>
   15df8:	ldr	r4, [r7, #-4]
   15dfc:	cmp	r4, #0
   15e00:	bne	15da4 <__assert_fail@plt+0x4578>
   15e04:	b	15dbc <__assert_fail@plt+0x4590>
   15e08:	mov	r3, #0
   15e0c:	str	r3, [r5, #12]
   15e10:	str	r3, [r5, #16]
   15e14:	pop	{r4, r5, r6, r7, r8, pc}
   15e18:	push	{r4, r5, r6, lr}
   15e1c:	mov	r5, r0
   15e20:	ldr	r3, [r0, #32]
   15e24:	cmp	r3, #0
   15e28:	beq	15e90 <__assert_fail@plt+0x4664>
   15e2c:	ldr	r3, [r0, #16]
   15e30:	cmp	r3, #0
   15e34:	beq	15e90 <__assert_fail@plt+0x4664>
   15e38:	ldr	r6, [r0]
   15e3c:	ldr	r3, [r0, #4]
   15e40:	cmp	r6, r3
   15e44:	bcc	15e5c <__assert_fail@plt+0x4630>
   15e48:	b	15ed0 <__assert_fail@plt+0x46a4>
   15e4c:	add	r6, r6, #8
   15e50:	ldr	r3, [r5, #4]
   15e54:	cmp	r3, r6
   15e58:	bls	15e90 <__assert_fail@plt+0x4664>
   15e5c:	ldr	r3, [r6]
   15e60:	cmp	r3, #0
   15e64:	beq	15e4c <__assert_fail@plt+0x4620>
   15e68:	cmp	r6, #0
   15e6c:	beq	15e4c <__assert_fail@plt+0x4620>
   15e70:	mov	r4, r6
   15e74:	ldr	r3, [r5, #32]
   15e78:	ldr	r0, [r4]
   15e7c:	blx	r3
   15e80:	ldr	r4, [r4, #4]
   15e84:	cmp	r4, #0
   15e88:	bne	15e74 <__assert_fail@plt+0x4648>
   15e8c:	b	15e4c <__assert_fail@plt+0x4620>
   15e90:	ldr	r6, [r5]
   15e94:	ldr	r3, [r5, #4]
   15e98:	cmp	r6, r3
   15e9c:	bcs	15ed0 <__assert_fail@plt+0x46a4>
   15ea0:	ldr	r0, [r6, #4]
   15ea4:	cmp	r0, #0
   15ea8:	beq	15ec0 <__assert_fail@plt+0x4694>
   15eac:	ldr	r4, [r0, #4]
   15eb0:	bl	1315c <__assert_fail@plt+0x1930>
   15eb4:	mov	r0, r4
   15eb8:	cmp	r4, #0
   15ebc:	bne	15eac <__assert_fail@plt+0x4680>
   15ec0:	add	r6, r6, #8
   15ec4:	ldr	r3, [r5, #4]
   15ec8:	cmp	r3, r6
   15ecc:	bhi	15ea0 <__assert_fail@plt+0x4674>
   15ed0:	ldr	r0, [r5, #36]	; 0x24
   15ed4:	cmp	r0, #0
   15ed8:	beq	15ef0 <__assert_fail@plt+0x46c4>
   15edc:	ldr	r4, [r0, #4]
   15ee0:	bl	1315c <__assert_fail@plt+0x1930>
   15ee4:	mov	r0, r4
   15ee8:	cmp	r4, #0
   15eec:	bne	15edc <__assert_fail@plt+0x46b0>
   15ef0:	ldr	r0, [r5]
   15ef4:	bl	1315c <__assert_fail@plt+0x1930>
   15ef8:	mov	r0, r5
   15efc:	bl	1315c <__assert_fail@plt+0x1930>
   15f00:	pop	{r4, r5, r6, pc}
   15f04:	push	{r4, r5, lr}
   15f08:	sub	sp, sp, #44	; 0x2c
   15f0c:	mov	r4, r0
   15f10:	mov	r0, r1
   15f14:	ldr	r1, [r4, #20]
   15f18:	bl	154b0 <__assert_fail@plt+0x3c84>
   15f1c:	subs	r5, r0, #0
   15f20:	beq	16018 <__assert_fail@plt+0x47ec>
   15f24:	ldr	r3, [r4, #8]
   15f28:	cmp	r5, r3
   15f2c:	beq	16028 <__assert_fail@plt+0x47fc>
   15f30:	mov	r1, #8
   15f34:	mov	r0, r5
   15f38:	bl	19508 <lchmod@@Base+0x3080>
   15f3c:	str	r0, [sp]
   15f40:	cmp	r0, #0
   15f44:	beq	16030 <__assert_fail@plt+0x4804>
   15f48:	str	r5, [sp, #8]
   15f4c:	add	r0, r0, r5, lsl #3
   15f50:	str	r0, [sp, #4]
   15f54:	mov	r2, #0
   15f58:	str	r2, [sp, #12]
   15f5c:	str	r2, [sp, #16]
   15f60:	ldr	r3, [r4, #20]
   15f64:	str	r3, [sp, #20]
   15f68:	ldr	r3, [r4, #24]
   15f6c:	str	r3, [sp, #24]
   15f70:	ldr	r3, [r4, #28]
   15f74:	str	r3, [sp, #28]
   15f78:	ldr	r3, [r4, #32]
   15f7c:	str	r3, [sp, #32]
   15f80:	ldr	r3, [r4, #36]	; 0x24
   15f84:	str	r3, [sp, #36]	; 0x24
   15f88:	mov	r1, r4
   15f8c:	mov	r0, sp
   15f90:	bl	155ac <__assert_fail@plt+0x3d80>
   15f94:	subs	r5, r0, #0
   15f98:	bne	15fe0 <__assert_fail@plt+0x47b4>
   15f9c:	ldr	r3, [sp, #36]	; 0x24
   15fa0:	str	r3, [r4, #36]	; 0x24
   15fa4:	mov	r2, #1
   15fa8:	mov	r1, sp
   15fac:	mov	r0, r4
   15fb0:	bl	155ac <__assert_fail@plt+0x3d80>
   15fb4:	cmp	r0, #0
   15fb8:	beq	16014 <__assert_fail@plt+0x47e8>
   15fbc:	mov	r2, #0
   15fc0:	mov	r1, sp
   15fc4:	mov	r0, r4
   15fc8:	bl	155ac <__assert_fail@plt+0x3d80>
   15fcc:	cmp	r0, #0
   15fd0:	beq	16014 <__assert_fail@plt+0x47e8>
   15fd4:	ldr	r0, [sp]
   15fd8:	bl	1315c <__assert_fail@plt+0x1930>
   15fdc:	b	1601c <__assert_fail@plt+0x47f0>
   15fe0:	ldr	r0, [r4]
   15fe4:	bl	1315c <__assert_fail@plt+0x1930>
   15fe8:	ldr	r3, [sp]
   15fec:	str	r3, [r4]
   15ff0:	ldr	r3, [sp, #4]
   15ff4:	str	r3, [r4, #4]
   15ff8:	ldr	r3, [sp, #8]
   15ffc:	str	r3, [r4, #8]
   16000:	ldr	r3, [sp, #12]
   16004:	str	r3, [r4, #12]
   16008:	ldr	r3, [sp, #36]	; 0x24
   1600c:	str	r3, [r4, #36]	; 0x24
   16010:	b	1601c <__assert_fail@plt+0x47f0>
   16014:	bl	117d8 <abort@plt>
   16018:	mov	r5, #0
   1601c:	mov	r0, r5
   16020:	add	sp, sp, #44	; 0x2c
   16024:	pop	{r4, r5, pc}
   16028:	mov	r5, #1
   1602c:	b	1601c <__assert_fail@plt+0x47f0>
   16030:	mov	r5, #0
   16034:	b	1601c <__assert_fail@plt+0x47f0>
   16038:	push	{r4, r5, r6, lr}
   1603c:	sub	sp, sp, #8
   16040:	subs	r6, r1, #0
   16044:	beq	16080 <__assert_fail@plt+0x4854>
   16048:	mov	r4, r0
   1604c:	mov	r5, r2
   16050:	mov	r3, #0
   16054:	add	r2, sp, #4
   16058:	mov	r1, r6
   1605c:	bl	15700 <__assert_fail@plt+0x3ed4>
   16060:	cmp	r0, #0
   16064:	beq	16084 <__assert_fail@plt+0x4858>
   16068:	cmp	r5, #0
   1606c:	moveq	r0, #0
   16070:	strne	r0, [r5]
   16074:	movne	r0, #0
   16078:	add	sp, sp, #8
   1607c:	pop	{r4, r5, r6, pc}
   16080:	bl	117d8 <abort@plt>
   16084:	vldr	s15, [r4, #12]
   16088:	vcvt.f32.u32	s14, s15
   1608c:	ldr	r3, [r4, #20]
   16090:	vldr	s15, [r4, #8]
   16094:	vcvt.f32.u32	s15, s15
   16098:	vldr	s13, [r3, #8]
   1609c:	vmul.f32	s15, s15, s13
   160a0:	vcmpe.f32	s14, s15
   160a4:	vmrs	APSR_nzcv, fpscr
   160a8:	bgt	160f8 <__assert_fail@plt+0x48cc>
   160ac:	ldr	r3, [sp, #4]
   160b0:	ldr	r2, [r3]
   160b4:	cmp	r2, #0
   160b8:	beq	1619c <__assert_fail@plt+0x4970>
   160bc:	ldr	r0, [r4, #36]	; 0x24
   160c0:	cmp	r0, #0
   160c4:	beq	16184 <__assert_fail@plt+0x4958>
   160c8:	ldr	r3, [r0, #4]
   160cc:	str	r3, [r4, #36]	; 0x24
   160d0:	str	r6, [r0]
   160d4:	ldr	r3, [sp, #4]
   160d8:	ldr	r2, [r3, #4]
   160dc:	str	r2, [r0, #4]
   160e0:	str	r0, [r3, #4]
   160e4:	ldr	r3, [r4, #16]
   160e8:	add	r3, r3, #1
   160ec:	str	r3, [r4, #16]
   160f0:	mov	r0, #1
   160f4:	b	16078 <__assert_fail@plt+0x484c>
   160f8:	mov	r0, r4
   160fc:	bl	153bc <__assert_fail@plt+0x3b90>
   16100:	ldr	r3, [r4, #20]
   16104:	vldr	s13, [r3, #8]
   16108:	vldr	s15, [r4, #8]
   1610c:	vcvt.f32.u32	s15, s15
   16110:	vldr	s14, [r4, #12]
   16114:	vcvt.f32.u32	s14, s14
   16118:	vmul.f32	s12, s13, s15
   1611c:	vcmpe.f32	s14, s12
   16120:	vmrs	APSR_nzcv, fpscr
   16124:	ble	160ac <__assert_fail@plt+0x4880>
   16128:	ldrb	r2, [r3, #16]
   1612c:	cmp	r2, #0
   16130:	vldr	s14, [r3, #12]
   16134:	vmul.f32	s15, s15, s14
   16138:	vmuleq.f32	s15, s15, s13
   1613c:	vldr	s14, [pc, #140]	; 161d0 <__assert_fail@plt+0x49a4>
   16140:	vcmpe.f32	s15, s14
   16144:	vmrs	APSR_nzcv, fpscr
   16148:	bge	161c0 <__assert_fail@plt+0x4994>
   1614c:	vcvt.u32.f32	s15, s15
   16150:	vmov	r1, s15
   16154:	mov	r0, r4
   16158:	bl	15f04 <__assert_fail@plt+0x46d8>
   1615c:	cmp	r0, #0
   16160:	beq	161c8 <__assert_fail@plt+0x499c>
   16164:	mov	r3, #0
   16168:	add	r2, sp, #4
   1616c:	mov	r1, r6
   16170:	mov	r0, r4
   16174:	bl	15700 <__assert_fail@plt+0x3ed4>
   16178:	cmp	r0, #0
   1617c:	beq	160ac <__assert_fail@plt+0x4880>
   16180:	bl	117d8 <abort@plt>
   16184:	mov	r0, #8
   16188:	bl	19558 <lchmod@@Base+0x30d0>
   1618c:	cmp	r0, #0
   16190:	bne	160d0 <__assert_fail@plt+0x48a4>
   16194:	mvn	r0, #0
   16198:	b	16078 <__assert_fail@plt+0x484c>
   1619c:	str	r6, [r3]
   161a0:	ldr	r3, [r4, #16]
   161a4:	add	r3, r3, #1
   161a8:	str	r3, [r4, #16]
   161ac:	ldr	r3, [r4, #12]
   161b0:	add	r3, r3, #1
   161b4:	str	r3, [r4, #12]
   161b8:	mov	r0, #1
   161bc:	b	16078 <__assert_fail@plt+0x484c>
   161c0:	mvn	r0, #0
   161c4:	b	16078 <__assert_fail@plt+0x484c>
   161c8:	mvn	r0, #0
   161cc:	b	16078 <__assert_fail@plt+0x484c>
   161d0:	svcmi	0x00800000
   161d4:	push	{r4, lr}
   161d8:	sub	sp, sp, #8
   161dc:	mov	r4, r1
   161e0:	add	r2, sp, #4
   161e4:	bl	16038 <__assert_fail@plt+0x480c>
   161e8:	cmn	r0, #1
   161ec:	beq	16204 <__assert_fail@plt+0x49d8>
   161f0:	cmp	r0, #0
   161f4:	movne	r0, r4
   161f8:	ldreq	r0, [sp, #4]
   161fc:	add	sp, sp, #8
   16200:	pop	{r4, pc}
   16204:	mov	r0, #0
   16208:	b	161fc <__assert_fail@plt+0x49d0>
   1620c:	push	{r4, r5, r6, lr}
   16210:	sub	sp, sp, #8
   16214:	mov	r4, r0
   16218:	mov	r3, #1
   1621c:	add	r2, sp, #4
   16220:	bl	15700 <__assert_fail@plt+0x3ed4>
   16224:	subs	r5, r0, #0
   16228:	beq	16248 <__assert_fail@plt+0x4a1c>
   1622c:	ldr	r3, [r4, #16]
   16230:	sub	r3, r3, #1
   16234:	str	r3, [r4, #16]
   16238:	ldr	r3, [sp, #4]
   1623c:	ldr	r3, [r3]
   16240:	cmp	r3, #0
   16244:	beq	16254 <__assert_fail@plt+0x4a28>
   16248:	mov	r0, r5
   1624c:	add	sp, sp, #8
   16250:	pop	{r4, r5, r6, pc}
   16254:	ldr	r3, [r4, #12]
   16258:	sub	r3, r3, #1
   1625c:	str	r3, [r4, #12]
   16260:	vmov	s15, r3
   16264:	vcvt.f32.u32	s15, s15
   16268:	ldr	r3, [r4, #20]
   1626c:	vldr	s14, [r4, #8]
   16270:	vcvt.f32.u32	s14, s14
   16274:	vldr	s13, [r3]
   16278:	vmul.f32	s14, s14, s13
   1627c:	vcmpe.f32	s15, s14
   16280:	vmrs	APSR_nzcv, fpscr
   16284:	bpl	16248 <__assert_fail@plt+0x4a1c>
   16288:	mov	r0, r4
   1628c:	bl	153bc <__assert_fail@plt+0x3b90>
   16290:	ldr	r3, [r4, #20]
   16294:	vldr	s15, [r4, #8]
   16298:	vcvt.f32.u32	s15, s15
   1629c:	vldr	s14, [r4, #12]
   162a0:	vcvt.f32.u32	s13, s14
   162a4:	vldr	s14, [r3]
   162a8:	vmul.f32	s14, s15, s14
   162ac:	vcmpe.f32	s13, s14
   162b0:	vmrs	APSR_nzcv, fpscr
   162b4:	bpl	16248 <__assert_fail@plt+0x4a1c>
   162b8:	ldrb	r2, [r3, #16]
   162bc:	cmp	r2, #0
   162c0:	vldr	s14, [r3, #4]
   162c4:	vmuleq.f32	s15, s15, s14
   162c8:	vldreq	s14, [r3, #8]
   162cc:	vmul.f32	s15, s15, s14
   162d0:	vcvt.u32.f32	s15, s15
   162d4:	vmov	r1, s15
   162d8:	mov	r0, r4
   162dc:	bl	15f04 <__assert_fail@plt+0x46d8>
   162e0:	cmp	r0, #0
   162e4:	bne	16248 <__assert_fail@plt+0x4a1c>
   162e8:	ldr	r0, [r4, #36]	; 0x24
   162ec:	cmp	r0, #0
   162f0:	beq	16308 <__assert_fail@plt+0x4adc>
   162f4:	ldr	r6, [r0, #4]
   162f8:	bl	1315c <__assert_fail@plt+0x1930>
   162fc:	mov	r0, r6
   16300:	cmp	r6, #0
   16304:	bne	162f4 <__assert_fail@plt+0x4ac8>
   16308:	mov	r3, #0
   1630c:	str	r3, [r4, #36]	; 0x24
   16310:	b	16248 <__assert_fail@plt+0x4a1c>
   16314:	push	{r4, lr}
   16318:	bl	1620c <__assert_fail@plt+0x49e0>
   1631c:	pop	{r4, pc}
   16320:	push	{r4, r5, r6, lr}
   16324:	mov	r4, r0
   16328:	mov	r6, r1
   1632c:	ldr	r0, [r0]
   16330:	bl	19c40 <lchmod@@Base+0x37b8>
   16334:	ldrd	r4, [r4, #8]
   16338:	mov	r2, r6
   1633c:	mov	r3, #0
   16340:	eor	r4, r4, r0
   16344:	mov	r0, r4
   16348:	mov	r1, r5
   1634c:	bl	1a2bc <lchmod@@Base+0x3e34>
   16350:	mov	r0, r2
   16354:	pop	{r4, r5, r6, pc}
   16358:	push	{r4, r5, r6, lr}
   1635c:	ldrd	r4, [r0, #8]
   16360:	ldrd	r2, [r1, #8]
   16364:	cmp	r5, r3
   16368:	cmpeq	r4, r2
   1636c:	beq	16378 <__assert_fail@plt+0x4b4c>
   16370:	mov	r0, #0
   16374:	pop	{r4, r5, r6, pc}
   16378:	ldrd	r4, [r0, #16]
   1637c:	ldrd	r2, [r1, #16]
   16380:	cmp	r5, r3
   16384:	cmpeq	r4, r2
   16388:	beq	16394 <__assert_fail@plt+0x4b68>
   1638c:	mov	r0, #0
   16390:	pop	{r4, r5, r6, pc}
   16394:	ldr	r1, [r1]
   16398:	ldr	r0, [r0]
   1639c:	bl	11454 <strcmp@plt>
   163a0:	clz	r0, r0
   163a4:	lsr	r0, r0, #5
   163a8:	pop	{r4, r5, r6, pc}
   163ac:	push	{r4, lr}
   163b0:	mov	r4, r0
   163b4:	ldr	r0, [r0]
   163b8:	bl	1315c <__assert_fail@plt+0x1930>
   163bc:	mov	r0, r4
   163c0:	bl	1315c <__assert_fail@plt+0x1930>
   163c4:	pop	{r4, pc}
   163c8:	mov	r3, #1
   163cc:	strb	r3, [r0, #28]
   163d0:	mov	r3, #0
   163d4:	str	r3, [r0, #20]
   163d8:	str	r3, [r0, #24]
   163dc:	str	r1, [r0]
   163e0:	str	r1, [r0, #4]
   163e4:	str	r1, [r0, #8]
   163e8:	str	r1, [r0, #12]
   163ec:	str	r1, [r0, #16]
   163f0:	bx	lr
   163f4:	ldrb	r0, [r0, #28]
   163f8:	bx	lr
   163fc:	mov	r2, r0
   16400:	ldrb	ip, [r0, #28]
   16404:	eor	ip, ip, #1
   16408:	ldr	r3, [r0, #20]
   1640c:	add	r3, ip, r3
   16410:	and	r3, r3, #3
   16414:	ldr	r0, [r0, r3, lsl #2]
   16418:	str	r1, [r2, r3, lsl #2]
   1641c:	str	r3, [r2, #20]
   16420:	ldr	r1, [r2, #24]
   16424:	cmp	r3, r1
   16428:	addeq	r3, ip, r3
   1642c:	andeq	r3, r3, #3
   16430:	streq	r3, [r2, #24]
   16434:	mov	r3, #0
   16438:	strb	r3, [r2, #28]
   1643c:	bx	lr
   16440:	ldrb	r3, [r0, #28]
   16444:	cmp	r3, #0
   16448:	bne	16480 <__assert_fail@plt+0x4c54>
   1644c:	mov	r2, r0
   16450:	ldr	r3, [r0, #20]
   16454:	ldr	r0, [r0, r3, lsl #2]
   16458:	ldr	r1, [r2, #16]
   1645c:	str	r1, [r2, r3, lsl #2]
   16460:	ldr	r1, [r2, #24]
   16464:	cmp	r3, r1
   16468:	moveq	r3, #1
   1646c:	strbeq	r3, [r2, #28]
   16470:	addne	r3, r3, #3
   16474:	andne	r3, r3, #3
   16478:	strne	r3, [r2, #20]
   1647c:	bx	lr
   16480:	push	{r4, lr}
   16484:	bl	117d8 <abort@plt>

00016488 <lchmod@@Base>:
   16488:	push	{r4, r5, r6, r7, r8, r9, lr}
   1648c:	sub	sp, sp, #148	; 0x94
   16490:	mov	r9, r0
   16494:	mov	r6, r1
   16498:	mov	r1, #2654208	; 0x288000
   1649c:	bl	115bc <open64@plt>
   164a0:	subs	r4, r0, #0
   164a4:	movlt	r5, r4
   164a8:	blt	16530 <lchmod@@Base+0xa8>
   164ac:	mov	r3, #4096	; 0x1000
   164b0:	str	r3, [sp]
   164b4:	add	r3, sp, #40	; 0x28
   164b8:	ldr	r2, [pc, #204]	; 1658c <lchmod@@Base+0x104>
   164bc:	mov	r1, r4
   164c0:	mov	r0, #3
   164c4:	bl	11538 <__fxstatat64@plt>
   164c8:	cmp	r0, #0
   164cc:	bne	1653c <lchmod@@Base+0xb4>
   164d0:	ldr	r3, [sp, #56]	; 0x38
   164d4:	and	r3, r3, #61440	; 0xf000
   164d8:	cmp	r3, #40960	; 0xa000
   164dc:	beq	1655c <lchmod@@Base+0xd4>
   164e0:	str	r4, [sp]
   164e4:	ldr	r3, [pc, #164]	; 16590 <lchmod@@Base+0x108>
   164e8:	mov	r2, #26
   164ec:	mov	r1, #1
   164f0:	add	r0, sp, #12
   164f4:	bl	11694 <__sprintf_chk@plt>
   164f8:	mov	r1, r6
   164fc:	add	r0, sp, #12
   16500:	bl	117b4 <chmod@plt>
   16504:	mov	r5, r0
   16508:	bl	11688 <__errno_location@plt>
   1650c:	mov	r7, r0
   16510:	ldr	r8, [r0]
   16514:	mov	r0, r4
   16518:	bl	117e4 <close@plt>
   1651c:	cmp	r5, #0
   16520:	beq	16530 <lchmod@@Base+0xa8>
   16524:	cmp	r8, #2
   16528:	strne	r8, [r7]
   1652c:	beq	16578 <lchmod@@Base+0xf0>
   16530:	mov	r0, r5
   16534:	add	sp, sp, #148	; 0x94
   16538:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1653c:	bl	11688 <__errno_location@plt>
   16540:	mov	r5, r0
   16544:	ldr	r6, [r0]
   16548:	mov	r0, r4
   1654c:	bl	117e4 <close@plt>
   16550:	str	r6, [r5]
   16554:	mvn	r5, #0
   16558:	b	16530 <lchmod@@Base+0xa8>
   1655c:	mov	r0, r4
   16560:	bl	117e4 <close@plt>
   16564:	bl	11688 <__errno_location@plt>
   16568:	mov	r3, #95	; 0x5f
   1656c:	str	r3, [r0]
   16570:	mvn	r5, #0
   16574:	b	16530 <lchmod@@Base+0xa8>
   16578:	mov	r1, r6
   1657c:	mov	r0, r9
   16580:	bl	117b4 <chmod@plt>
   16584:	mov	r5, r0
   16588:	b	16530 <lchmod@@Base+0xa8>
   1658c:	ldrdeq	sl, [r1], -ip
   16590:	strdeq	sl, [r1], -r8
   16594:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16598:	mov	r4, r0
   1659c:	ldrb	r3, [r0]
   165a0:	sub	r2, r3, #48	; 0x30
   165a4:	uxtb	r2, r2
   165a8:	cmp	r2, #7
   165ac:	bls	16644 <lchmod@@Base+0x1bc>
   165b0:	cmp	r3, #0
   165b4:	moveq	r0, #1
   165b8:	beq	165e8 <lchmod@@Base+0x160>
   165bc:	mov	r1, r4
   165c0:	mov	r0, #1
   165c4:	and	r2, r3, #239	; 0xef
   165c8:	cmp	r3, #43	; 0x2b
   165cc:	cmpne	r2, #45	; 0x2d
   165d0:	moveq	r3, #1
   165d4:	movne	r3, #0
   165d8:	add	r0, r0, r3
   165dc:	ldrb	r3, [r1, #1]!
   165e0:	cmp	r3, #0
   165e4:	bne	165c4 <lchmod@@Base+0x13c>
   165e8:	mov	r1, #16
   165ec:	bl	18f9c <lchmod@@Base+0x2b14>
   165f0:	mov	ip, #0
   165f4:	mov	r8, #3
   165f8:	mov	sl, #1
   165fc:	mov	fp, #2
   16600:	ldr	r5, [pc, #820]	; 1693c <lchmod@@Base+0x4b4>
   16604:	mov	r1, #0
   16608:	mov	r3, r4
   1660c:	add	r4, r4, #1
   16610:	ldrb	r2, [r3]
   16614:	cmp	r2, #97	; 0x61
   16618:	beq	16714 <lchmod@@Base+0x28c>
   1661c:	bls	166d0 <lchmod@@Base+0x248>
   16620:	cmp	r2, #111	; 0x6f
   16624:	beq	16708 <lchmod@@Base+0x280>
   16628:	cmp	r2, #117	; 0x75
   1662c:	beq	166f4 <lchmod@@Base+0x26c>
   16630:	cmp	r2, #103	; 0x67
   16634:	beq	166fc <lchmod@@Base+0x274>
   16638:	bl	1315c <__assert_fail@plt+0x1930>
   1663c:	mov	r0, #0
   16640:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16644:	mov	r3, r0
   16648:	mov	r5, #0
   1664c:	ldr	r0, [pc, #744]	; 1693c <lchmod@@Base+0x4b4>
   16650:	lsl	r5, r5, #3
   16654:	sub	r5, r5, #48	; 0x30
   16658:	ldrb	r2, [r3], #1
   1665c:	add	r5, r2, r5
   16660:	cmp	r5, r0
   16664:	bhi	1692c <lchmod@@Base+0x4a4>
   16668:	ldrb	r1, [r3]
   1666c:	sub	r2, r1, #48	; 0x30
   16670:	uxtb	r2, r2
   16674:	cmp	r2, #7
   16678:	bls	16650 <lchmod@@Base+0x1c8>
   1667c:	cmp	r1, #0
   16680:	bne	16934 <lchmod@@Base+0x4ac>
   16684:	sub	r3, r3, r4
   16688:	cmp	r3, #4
   1668c:	andle	r4, r5, #3072	; 0xc00
   16690:	mvnle	r4, r4, lsr #10
   16694:	mvnle	r4, r4, lsl #10
   16698:	ldrgt	r4, [pc, #668]	; 1693c <lchmod@@Base+0x4b4>
   1669c:	mov	r0, #32
   166a0:	bl	18ea4 <lchmod@@Base+0x2a1c>
   166a4:	mov	r3, #61	; 0x3d
   166a8:	strb	r3, [r0]
   166ac:	mov	r3, #1
   166b0:	strb	r3, [r0, #1]
   166b4:	ldr	r3, [pc, #640]	; 1693c <lchmod@@Base+0x4b4>
   166b8:	str	r3, [r0, #4]
   166bc:	str	r5, [r0, #8]
   166c0:	str	r4, [r0, #12]
   166c4:	mov	r3, #0
   166c8:	strb	r3, [r0, #17]
   166cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166d0:	cmp	r2, #45	; 0x2d
   166d4:	beq	166e8 <lchmod@@Base+0x260>
   166d8:	cmp	r2, #61	; 0x3d
   166dc:	beq	166e8 <lchmod@@Base+0x260>
   166e0:	cmp	r2, #43	; 0x2b
   166e4:	bne	16638 <lchmod@@Base+0x1b0>
   166e8:	add	r6, ip, #1
   166ec:	add	ip, r0, ip, lsl #4
   166f0:	b	167d8 <lchmod@@Base+0x350>
   166f4:	orr	r1, r1, #2496	; 0x9c0
   166f8:	b	16608 <lchmod@@Base+0x180>
   166fc:	orr	r1, r1, #1072	; 0x430
   16700:	orr	r1, r1, #8
   16704:	b	16608 <lchmod@@Base+0x180>
   16708:	orr	r1, r1, #516	; 0x204
   1670c:	orr	r1, r1, #3
   16710:	b	16608 <lchmod@@Base+0x180>
   16714:	ldr	r1, [pc, #544]	; 1693c <lchmod@@Base+0x4b4>
   16718:	b	16608 <lchmod@@Base+0x180>
   1671c:	sub	lr, lr, #48	; 0x30
   16720:	cmp	lr, #7
   16724:	movls	r3, #0
   16728:	bhi	16808 <lchmod@@Base+0x380>
   1672c:	lsl	r3, r3, #3
   16730:	sub	r3, r3, #48	; 0x30
   16734:	ldrb	lr, [r2], #1
   16738:	add	r3, lr, r3
   1673c:	cmp	r3, r5
   16740:	bhi	16638 <lchmod@@Base+0x1b0>
   16744:	ldrb	r7, [r2]
   16748:	sub	lr, r7, #48	; 0x30
   1674c:	uxtb	lr, lr
   16750:	cmp	lr, #7
   16754:	bls	1672c <lchmod@@Base+0x2a4>
   16758:	cmp	r1, #0
   1675c:	bne	16638 <lchmod@@Base+0x1b0>
   16760:	cmp	r7, #0
   16764:	cmpne	r7, #44	; 0x2c
   16768:	bne	16638 <lchmod@@Base+0x1b0>
   1676c:	mov	lr, ip
   16770:	strb	r4, [ip]
   16774:	strb	sl, [ip, #1]
   16778:	str	r5, [ip, #4]
   1677c:	str	r3, [ip, #8]
   16780:	mov	r3, r2
   16784:	mov	r1, r5
   16788:	mov	r7, r5
   1678c:	b	167b4 <lchmod@@Base+0x32c>
   16790:	add	r3, r3, #2
   16794:	mov	r7, #56	; 0x38
   16798:	mov	lr, ip
   1679c:	strb	r4, [ip]
   167a0:	strb	r8, [ip, #1]
   167a4:	str	r1, [ip, #4]
   167a8:	str	r7, [ip, #8]
   167ac:	cmp	r1, #0
   167b0:	andne	r7, r7, r1
   167b4:	str	r7, [lr, #12]
   167b8:	ldrb	r2, [r3]
   167bc:	add	r4, r6, #1
   167c0:	add	ip, ip, #16
   167c4:	and	lr, r2, #239	; 0xef
   167c8:	cmp	r2, #43	; 0x2b
   167cc:	cmpne	lr, #45	; 0x2d
   167d0:	bne	16904 <lchmod@@Base+0x47c>
   167d4:	mov	r6, r4
   167d8:	add	r2, r3, #1
   167dc:	ldrb	r4, [r3]
   167e0:	ldrb	lr, [r3, #1]
   167e4:	cmp	lr, #103	; 0x67
   167e8:	beq	16790 <lchmod@@Base+0x308>
   167ec:	bls	1671c <lchmod@@Base+0x294>
   167f0:	cmp	lr, #111	; 0x6f
   167f4:	beq	16814 <lchmod@@Base+0x38c>
   167f8:	cmp	lr, #117	; 0x75
   167fc:	addeq	r3, r3, #2
   16800:	moveq	r7, #448	; 0x1c0
   16804:	beq	16798 <lchmod@@Base+0x310>
   16808:	mov	r9, sl
   1680c:	mov	r7, #0
   16810:	b	1684c <lchmod@@Base+0x3c4>
   16814:	add	r3, r3, #2
   16818:	mov	r7, #7
   1681c:	b	16798 <lchmod@@Base+0x310>
   16820:	orr	r7, r7, #292	; 0x124
   16824:	b	1684c <lchmod@@Base+0x3c4>
   16828:	orr	r7, r7, #146	; 0x92
   1682c:	b	1684c <lchmod@@Base+0x3c4>
   16830:	orr	r7, r7, #73	; 0x49
   16834:	b	1684c <lchmod@@Base+0x3c4>
   16838:	orr	r7, r7, #3072	; 0xc00
   1683c:	b	1684c <lchmod@@Base+0x3c4>
   16840:	orr	r7, r7, #512	; 0x200
   16844:	b	1684c <lchmod@@Base+0x3c4>
   16848:	mov	r9, fp
   1684c:	mov	r3, r2
   16850:	add	r2, r2, #1
   16854:	ldrb	lr, [r3]
   16858:	sub	lr, lr, #88	; 0x58
   1685c:	cmp	lr, #32
   16860:	ldrls	pc, [pc, lr, lsl #2]
   16864:	b	168ec <lchmod@@Base+0x464>
   16868:	andeq	r6, r1, r8, asr #16
   1686c:	andeq	r6, r1, ip, ror #17
   16870:	andeq	r6, r1, ip, ror #17
   16874:	andeq	r6, r1, ip, ror #17
   16878:	andeq	r6, r1, ip, ror #17
   1687c:	andeq	r6, r1, ip, ror #17
   16880:	andeq	r6, r1, ip, ror #17
   16884:	andeq	r6, r1, ip, ror #17
   16888:	andeq	r6, r1, ip, ror #17
   1688c:	andeq	r6, r1, ip, ror #17
   16890:	andeq	r6, r1, ip, ror #17
   16894:	andeq	r6, r1, ip, ror #17
   16898:	andeq	r6, r1, ip, ror #17
   1689c:	andeq	r6, r1, ip, ror #17
   168a0:	andeq	r6, r1, ip, ror #17
   168a4:	andeq	r6, r1, ip, ror #17
   168a8:	andeq	r6, r1, ip, ror #17
   168ac:	andeq	r6, r1, ip, ror #17
   168b0:	andeq	r6, r1, ip, ror #17
   168b4:	andeq	r6, r1, ip, ror #17
   168b8:	andeq	r6, r1, ip, ror #17
   168bc:	andeq	r6, r1, ip, ror #17
   168c0:	andeq	r6, r1, ip, ror #17
   168c4:	andeq	r6, r1, ip, ror #17
   168c8:	andeq	r6, r1, ip, ror #17
   168cc:	andeq	r6, r1, ip, ror #17
   168d0:	andeq	r6, r1, r0, lsr #16
   168d4:	andeq	r6, r1, r8, lsr r8
   168d8:	andeq	r6, r1, r0, asr #16
   168dc:	andeq	r6, r1, ip, ror #17
   168e0:	andeq	r6, r1, ip, ror #17
   168e4:	andeq	r6, r1, r8, lsr #16
   168e8:	andeq	r6, r1, r0, lsr r8
   168ec:	mov	lr, ip
   168f0:	strb	r4, [ip]
   168f4:	strb	r9, [ip, #1]
   168f8:	str	r1, [ip, #4]
   168fc:	str	r7, [ip, #8]
   16900:	b	167ac <lchmod@@Base+0x324>
   16904:	cmp	r2, #44	; 0x2c
   16908:	addeq	r4, r3, #1
   1690c:	moveq	ip, r6
   16910:	beq	16604 <lchmod@@Base+0x17c>
   16914:	cmp	r2, #0
   16918:	bne	16638 <lchmod@@Base+0x1b0>
   1691c:	add	r6, r0, r6, lsl #4
   16920:	mov	r3, #0
   16924:	strb	r3, [r6, #1]
   16928:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1692c:	mov	r0, #0
   16930:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16934:	mov	r0, #0
   16938:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1693c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16940:	push	{r4, lr}
   16944:	sub	sp, sp, #104	; 0x68
   16948:	mov	r2, sp
   1694c:	mov	r1, r0
   16950:	mov	r0, #3
   16954:	bl	117c0 <__xstat64@plt>
   16958:	cmp	r0, #0
   1695c:	movne	r0, #0
   16960:	bne	16998 <lchmod@@Base+0x510>
   16964:	ldr	r4, [sp, #16]
   16968:	mov	r0, #32
   1696c:	bl	18ea4 <lchmod@@Base+0x2a1c>
   16970:	mov	r3, #61	; 0x3d
   16974:	strb	r3, [r0]
   16978:	mov	r3, #1
   1697c:	strb	r3, [r0, #1]
   16980:	ldr	r3, [pc, #24]	; 169a0 <lchmod@@Base+0x518>
   16984:	str	r3, [r0, #4]
   16988:	str	r4, [r0, #8]
   1698c:	str	r3, [r0, #12]
   16990:	mov	r3, #0
   16994:	strb	r3, [r0, #17]
   16998:	add	sp, sp, #104	; 0x68
   1699c:	pop	{r4, pc}
   169a0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   169a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   169a8:	ldr	r6, [sp, #32]
   169ac:	lsl	r0, r0, #20
   169b0:	lsr	r0, r0, #20
   169b4:	ldrb	r9, [r3, #1]
   169b8:	cmp	r9, #0
   169bc:	beq	16ac4 <lchmod@@Base+0x63c>
   169c0:	cmp	r1, #0
   169c4:	movne	r7, #3072	; 0xc00
   169c8:	moveq	r7, #0
   169cc:	add	r3, r3, #16
   169d0:	mov	r5, #0
   169d4:	mvn	r2, r2
   169d8:	b	16a1c <lchmod@@Base+0x594>
   169dc:	and	r9, r0, #73	; 0x49
   169e0:	orrs	r9, r9, r1
   169e4:	orrne	ip, ip, #73	; 0x49
   169e8:	b	16a80 <lchmod@@Base+0x5f8>
   169ec:	cmp	lr, #0
   169f0:	mvnne	lr, lr
   169f4:	orr	lr, lr, r4
   169f8:	mvn	r4, lr
   169fc:	lsl	r4, r4, #20
   16a00:	orr	r5, r5, r4, lsr #20
   16a04:	and	lr, lr, r0
   16a08:	orr	r0, ip, lr
   16a0c:	add	r3, r3, #16
   16a10:	ldrb	r9, [r3, #-15]
   16a14:	cmp	r9, #0
   16a18:	beq	16ac8 <lchmod@@Base+0x640>
   16a1c:	mov	r8, r3
   16a20:	ldr	lr, [r3, #-12]
   16a24:	ldr	r4, [r3, #-4]
   16a28:	bic	r4, r7, r4
   16a2c:	ldr	ip, [r3, #-8]
   16a30:	cmp	r9, #2
   16a34:	beq	169dc <lchmod@@Base+0x554>
   16a38:	cmp	r9, #3
   16a3c:	bne	16a80 <lchmod@@Base+0x5f8>
   16a40:	and	ip, ip, r0
   16a44:	and	r9, ip, #292	; 0x124
   16a48:	cmp	r9, #0
   16a4c:	movne	r9, #292	; 0x124
   16a50:	moveq	r9, #0
   16a54:	and	sl, ip, #146	; 0x92
   16a58:	cmp	sl, #0
   16a5c:	movne	sl, #146	; 0x92
   16a60:	moveq	sl, #0
   16a64:	orr	sl, r9, sl
   16a68:	and	r9, ip, #73	; 0x49
   16a6c:	cmp	r9, #0
   16a70:	movne	r9, #73	; 0x49
   16a74:	moveq	r9, #0
   16a78:	orr	r9, r9, sl
   16a7c:	orr	ip, r9, ip
   16a80:	cmp	lr, #0
   16a84:	movne	r9, lr
   16a88:	moveq	r9, r2
   16a8c:	bic	ip, ip, r4
   16a90:	and	ip, ip, r9
   16a94:	ldrb	r8, [r8, #-16]
   16a98:	cmp	r8, #45	; 0x2d
   16a9c:	beq	16ab8 <lchmod@@Base+0x630>
   16aa0:	cmp	r8, #61	; 0x3d
   16aa4:	beq	169ec <lchmod@@Base+0x564>
   16aa8:	cmp	r8, #43	; 0x2b
   16aac:	orreq	r5, r5, ip
   16ab0:	orreq	r0, r0, ip
   16ab4:	b	16a0c <lchmod@@Base+0x584>
   16ab8:	orr	r5, r5, ip
   16abc:	bic	r0, r0, ip
   16ac0:	b	16a0c <lchmod@@Base+0x584>
   16ac4:	mov	r5, #0
   16ac8:	cmp	r6, #0
   16acc:	strne	r5, [r6]
   16ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ad4:	push	{r2, r3}
   16ad8:	push	{lr}		; (str lr, [sp, #-4]!)
   16adc:	sub	sp, sp, #12
   16ae0:	ldr	r2, [sp, #16]
   16ae4:	tst	r2, #64	; 0x40
   16ae8:	addne	r3, sp, #24
   16aec:	strne	r3, [sp, #4]
   16af0:	ldrne	r3, [sp, #20]
   16af4:	moveq	r3, #0
   16af8:	bl	11670 <openat64@plt>
   16afc:	bl	188e0 <lchmod@@Base+0x2458>
   16b00:	add	sp, sp, #12
   16b04:	pop	{lr}		; (ldr lr, [sp], #4)
   16b08:	add	sp, sp, #8
   16b0c:	bx	lr
   16b10:	push	{r4, r5, r6, r7, r8, lr}
   16b14:	mov	r6, r3
   16b18:	orr	r2, r2, #540672	; 0x84000
   16b1c:	orr	r2, r2, #2304	; 0x900
   16b20:	bl	16ad4 <lchmod@@Base+0x64c>
   16b24:	subs	r4, r0, #0
   16b28:	blt	16b64 <lchmod@@Base+0x6dc>
   16b2c:	mov	r0, r4
   16b30:	bl	1173c <fdopendir@plt>
   16b34:	subs	r5, r0, #0
   16b38:	beq	16b48 <lchmod@@Base+0x6c0>
   16b3c:	str	r4, [r6]
   16b40:	mov	r0, r5
   16b44:	pop	{r4, r5, r6, r7, r8, pc}
   16b48:	bl	11688 <__errno_location@plt>
   16b4c:	mov	r6, r0
   16b50:	ldr	r7, [r0]
   16b54:	mov	r0, r4
   16b58:	bl	117e4 <close@plt>
   16b5c:	str	r7, [r6]
   16b60:	b	16b40 <lchmod@@Base+0x6b8>
   16b64:	mov	r5, #0
   16b68:	b	16b40 <lchmod@@Base+0x6b8>
   16b6c:	push	{r4, r5, r6, lr}
   16b70:	subs	r4, r0, #0
   16b74:	beq	16bec <lchmod@@Base+0x764>
   16b78:	mov	r1, #47	; 0x2f
   16b7c:	mov	r0, r4
   16b80:	bl	11718 <strrchr@plt>
   16b84:	cmp	r0, #0
   16b88:	addne	r5, r0, #1
   16b8c:	moveq	r5, r4
   16b90:	sub	r3, r5, r4
   16b94:	cmp	r3, #6
   16b98:	ble	16bd8 <lchmod@@Base+0x750>
   16b9c:	mov	r2, #7
   16ba0:	ldr	r1, [pc, #96]	; 16c08 <lchmod@@Base+0x780>
   16ba4:	sub	r0, r5, #7
   16ba8:	bl	117cc <strncmp@plt>
   16bac:	cmp	r0, #0
   16bb0:	bne	16bd8 <lchmod@@Base+0x750>
   16bb4:	mov	r2, #3
   16bb8:	ldr	r1, [pc, #76]	; 16c0c <lchmod@@Base+0x784>
   16bbc:	mov	r0, r5
   16bc0:	bl	117cc <strncmp@plt>
   16bc4:	cmp	r0, #0
   16bc8:	addeq	r4, r5, #3
   16bcc:	ldreq	r3, [pc, #60]	; 16c10 <lchmod@@Base+0x788>
   16bd0:	streq	r4, [r3]
   16bd4:	movne	r4, r5
   16bd8:	ldr	r3, [pc, #52]	; 16c14 <lchmod@@Base+0x78c>
   16bdc:	str	r4, [r3]
   16be0:	ldr	r3, [pc, #48]	; 16c18 <lchmod@@Base+0x790>
   16be4:	str	r4, [r3]
   16be8:	pop	{r4, r5, r6, pc}
   16bec:	ldr	r3, [pc, #40]	; 16c1c <lchmod@@Base+0x794>
   16bf0:	ldr	r3, [r3]
   16bf4:	mov	r2, #55	; 0x37
   16bf8:	mov	r1, #1
   16bfc:	ldr	r0, [pc, #28]	; 16c20 <lchmod@@Base+0x798>
   16c00:	bl	11568 <fwrite@plt>
   16c04:	bl	117d8 <abort@plt>
   16c08:	andeq	sl, r1, r4, asr #22
   16c0c:	andeq	sl, r1, ip, asr #22
   16c10:	andeq	ip, r2, r8, asr #3
   16c14:	strdeq	ip, [r2], -r0
   16c18:	andeq	ip, r2, ip, asr #3
   16c1c:	ldrdeq	ip, [r2], -r8
   16c20:	andeq	sl, r1, ip, lsl #22
   16c24:	push	{r4, r5, r6, lr}
   16c28:	mov	r5, r0
   16c2c:	mov	r4, r1
   16c30:	mov	r2, #48	; 0x30
   16c34:	mov	r1, #0
   16c38:	bl	116ac <memset@plt>
   16c3c:	cmp	r4, #10
   16c40:	beq	16c50 <lchmod@@Base+0x7c8>
   16c44:	str	r4, [r5]
   16c48:	mov	r0, r5
   16c4c:	pop	{r4, r5, r6, pc}
   16c50:	bl	117d8 <abort@plt>
   16c54:	push	{r4, r5, r6, lr}
   16c58:	mov	r4, r0
   16c5c:	mov	r5, r1
   16c60:	mov	r2, #5
   16c64:	mov	r1, r0
   16c68:	mov	r0, #0
   16c6c:	bl	114f0 <dcgettext@plt>
   16c70:	cmp	r4, r0
   16c74:	popne	{r4, r5, r6, pc}
   16c78:	bl	19c7c <lchmod@@Base+0x37f4>
   16c7c:	ldrb	r3, [r0]
   16c80:	bic	r3, r3, #32
   16c84:	cmp	r3, #85	; 0x55
   16c88:	beq	16d04 <lchmod@@Base+0x87c>
   16c8c:	cmp	r3, #71	; 0x47
   16c90:	bne	16d60 <lchmod@@Base+0x8d8>
   16c94:	ldrb	r3, [r0, #1]
   16c98:	bic	r3, r3, #32
   16c9c:	cmp	r3, #66	; 0x42
   16ca0:	bne	16d60 <lchmod@@Base+0x8d8>
   16ca4:	ldrb	r3, [r0, #2]
   16ca8:	cmp	r3, #49	; 0x31
   16cac:	bne	16d60 <lchmod@@Base+0x8d8>
   16cb0:	ldrb	r3, [r0, #3]
   16cb4:	cmp	r3, #56	; 0x38
   16cb8:	bne	16d60 <lchmod@@Base+0x8d8>
   16cbc:	ldrb	r3, [r0, #4]
   16cc0:	cmp	r3, #48	; 0x30
   16cc4:	bne	16d60 <lchmod@@Base+0x8d8>
   16cc8:	ldrb	r3, [r0, #5]
   16ccc:	cmp	r3, #51	; 0x33
   16cd0:	bne	16d60 <lchmod@@Base+0x8d8>
   16cd4:	ldrb	r3, [r0, #6]
   16cd8:	cmp	r3, #48	; 0x30
   16cdc:	bne	16d60 <lchmod@@Base+0x8d8>
   16ce0:	ldrb	r3, [r0, #7]
   16ce4:	cmp	r3, #0
   16ce8:	bne	16d60 <lchmod@@Base+0x8d8>
   16cec:	ldrb	r2, [r4]
   16cf0:	ldr	r3, [pc, #124]	; 16d74 <lchmod@@Base+0x8ec>
   16cf4:	ldr	r0, [pc, #124]	; 16d78 <lchmod@@Base+0x8f0>
   16cf8:	cmp	r2, #96	; 0x60
   16cfc:	movne	r0, r3
   16d00:	pop	{r4, r5, r6, pc}
   16d04:	ldrb	r3, [r0, #1]
   16d08:	bic	r3, r3, #32
   16d0c:	cmp	r3, #84	; 0x54
   16d10:	bne	16d60 <lchmod@@Base+0x8d8>
   16d14:	ldrb	r3, [r0, #2]
   16d18:	bic	r3, r3, #32
   16d1c:	cmp	r3, #70	; 0x46
   16d20:	bne	16d60 <lchmod@@Base+0x8d8>
   16d24:	ldrb	r3, [r0, #3]
   16d28:	cmp	r3, #45	; 0x2d
   16d2c:	bne	16d60 <lchmod@@Base+0x8d8>
   16d30:	ldrb	r3, [r0, #4]
   16d34:	cmp	r3, #56	; 0x38
   16d38:	bne	16d60 <lchmod@@Base+0x8d8>
   16d3c:	ldrb	r3, [r0, #5]
   16d40:	cmp	r3, #0
   16d44:	bne	16d60 <lchmod@@Base+0x8d8>
   16d48:	ldrb	r2, [r4]
   16d4c:	ldr	r3, [pc, #40]	; 16d7c <lchmod@@Base+0x8f4>
   16d50:	ldr	r0, [pc, #40]	; 16d80 <lchmod@@Base+0x8f8>
   16d54:	cmp	r2, #96	; 0x60
   16d58:	movne	r0, r3
   16d5c:	pop	{r4, r5, r6, pc}
   16d60:	ldr	r3, [pc, #28]	; 16d84 <lchmod@@Base+0x8fc>
   16d64:	ldr	r0, [pc, #28]	; 16d88 <lchmod@@Base+0x900>
   16d68:	cmp	r5, #9
   16d6c:	movne	r0, r3
   16d70:	pop	{r4, r5, r6, pc}
   16d74:	andeq	sl, r1, r8, lsr #23
   16d78:			; <UNDEFINED> instruction: 0x0001abb4
   16d7c:	andeq	sl, r1, r4, lsr #23
   16d80:			; <UNDEFINED> instruction: 0x0001abb8
   16d84:	andeq	sl, r1, ip, lsr #23
   16d88:			; <UNDEFINED> instruction: 0x0001abb0
   16d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d90:	sub	sp, sp, #116	; 0x74
   16d94:	str	r0, [sp, #36]	; 0x24
   16d98:	mov	sl, r1
   16d9c:	str	r2, [sp, #52]	; 0x34
   16da0:	str	r3, [sp, #28]
   16da4:	ldr	r8, [sp, #152]	; 0x98
   16da8:	bl	11580 <__ctype_get_mb_cur_max@plt>
   16dac:	str	r0, [sp, #84]	; 0x54
   16db0:	ldr	r3, [sp, #156]	; 0x9c
   16db4:	lsr	r3, r3, #1
   16db8:	and	r3, r3, #1
   16dbc:	str	r3, [sp, #32]
   16dc0:	mov	r3, #1
   16dc4:	str	r3, [sp, #40]	; 0x28
   16dc8:	mov	r3, #0
   16dcc:	str	r3, [sp, #80]	; 0x50
   16dd0:	str	r3, [sp, #44]	; 0x2c
   16dd4:	str	r3, [sp, #48]	; 0x30
   16dd8:	str	r3, [sp, #60]	; 0x3c
   16ddc:	str	r3, [sp, #72]	; 0x48
   16de0:	str	r3, [sp, #76]	; 0x4c
   16de4:	mov	r7, sl
   16de8:	mov	sl, r8
   16dec:	cmp	sl, #10
   16df0:	ldrls	pc, [pc, sl, lsl #2]
   16df4:	b	16fac <lchmod@@Base+0xb24>
   16df8:	andeq	r6, r1, ip, asr lr
   16dfc:	andeq	r6, r1, ip, lsr #28
   16e00:	andeq	r6, r1, r8, lsl #31
   16e04:	andeq	r6, r1, r4, lsr #28
   16e08:	andeq	r6, r1, ip, lsr pc
   16e0c:	andeq	r6, r1, ip, ror #28
   16e10:	ldrdeq	r7, [r1], -r8
   16e14:			; <UNDEFINED> instruction: 0x00016fb0
   16e18:	andeq	r6, r1, r8, lsr #29
   16e1c:	andeq	r6, r1, r8, lsr #29
   16e20:	andeq	r6, r1, r8, lsr #29
   16e24:	mov	r3, #1
   16e28:	str	r3, [sp, #48]	; 0x30
   16e2c:	mov	r3, #1
   16e30:	str	r3, [sp, #32]
   16e34:	str	r3, [sp, #60]	; 0x3c
   16e38:	ldr	r3, [pc, #4068]	; 17e24 <lchmod@@Base+0x199c>
   16e3c:	str	r3, [sp, #72]	; 0x48
   16e40:	mov	fp, #0
   16e44:	mov	sl, #2
   16e48:	mov	r6, #0
   16e4c:	ldr	r3, [sp, #48]	; 0x30
   16e50:	eor	r3, r3, #1
   16e54:	str	r3, [sp, #68]	; 0x44
   16e58:	b	17740 <lchmod@@Base+0x12b8>
   16e5c:	mov	r3, #0
   16e60:	str	r3, [sp, #32]
   16e64:	mov	fp, r3
   16e68:	b	16e48 <lchmod@@Base+0x9c0>
   16e6c:	ldr	r3, [sp, #32]
   16e70:	cmp	r3, #0
   16e74:	bne	16fc8 <lchmod@@Base+0xb40>
   16e78:	cmp	r7, #0
   16e7c:	beq	16fe8 <lchmod@@Base+0xb60>
   16e80:	ldr	r3, [sp, #36]	; 0x24
   16e84:	mov	r2, #34	; 0x22
   16e88:	strb	r2, [r3]
   16e8c:	mov	r3, #1
   16e90:	str	r3, [sp, #48]	; 0x30
   16e94:	str	r3, [sp, #60]	; 0x3c
   16e98:	ldr	r3, [pc, #3980]	; 17e2c <lchmod@@Base+0x19a4>
   16e9c:	str	r3, [sp, #72]	; 0x48
   16ea0:	mov	fp, #1
   16ea4:	b	16e48 <lchmod@@Base+0x9c0>
   16ea8:	cmp	sl, #10
   16eac:	beq	16ed0 <lchmod@@Base+0xa48>
   16eb0:	mov	r1, sl
   16eb4:	ldr	r0, [pc, #3948]	; 17e28 <lchmod@@Base+0x19a0>
   16eb8:	bl	16c54 <lchmod@@Base+0x7cc>
   16ebc:	str	r0, [sp, #164]	; 0xa4
   16ec0:	mov	r1, sl
   16ec4:	ldr	r0, [pc, #3928]	; 17e24 <lchmod@@Base+0x199c>
   16ec8:	bl	16c54 <lchmod@@Base+0x7cc>
   16ecc:	str	r0, [sp, #168]	; 0xa8
   16ed0:	ldr	r3, [sp, #32]
   16ed4:	cmp	r3, #0
   16ed8:	movne	fp, #0
   16edc:	bne	16f14 <lchmod@@Base+0xa8c>
   16ee0:	ldr	r3, [sp, #164]	; 0xa4
   16ee4:	ldrb	r3, [r3]
   16ee8:	cmp	r3, #0
   16eec:	beq	16f34 <lchmod@@Base+0xaac>
   16ef0:	ldr	r2, [sp, #164]	; 0xa4
   16ef4:	mov	fp, #0
   16ef8:	ldr	r1, [sp, #36]	; 0x24
   16efc:	cmp	r7, fp
   16f00:	strbhi	r3, [r1, fp]
   16f04:	add	fp, fp, #1
   16f08:	ldrb	r3, [r2, #1]!
   16f0c:	cmp	r3, #0
   16f10:	bne	16efc <lchmod@@Base+0xa74>
   16f14:	ldr	r0, [sp, #168]	; 0xa8
   16f18:	bl	11658 <strlen@plt>
   16f1c:	str	r0, [sp, #60]	; 0x3c
   16f20:	ldr	r3, [sp, #168]	; 0xa8
   16f24:	str	r3, [sp, #72]	; 0x48
   16f28:	mov	r3, #1
   16f2c:	str	r3, [sp, #48]	; 0x30
   16f30:	b	16e48 <lchmod@@Base+0x9c0>
   16f34:	mov	fp, #0
   16f38:	b	16f14 <lchmod@@Base+0xa8c>
   16f3c:	ldr	r3, [sp, #32]
   16f40:	cmp	r3, #0
   16f44:	bne	17004 <lchmod@@Base+0xb7c>
   16f48:	mov	r3, #1
   16f4c:	str	r3, [sp, #48]	; 0x30
   16f50:	cmp	r7, #0
   16f54:	beq	17020 <lchmod@@Base+0xb98>
   16f58:	ldr	r3, [sp, #36]	; 0x24
   16f5c:	mov	r2, #39	; 0x27
   16f60:	strb	r2, [r3]
   16f64:	mov	r3, #0
   16f68:	str	r3, [sp, #32]
   16f6c:	mov	r3, #1
   16f70:	str	r3, [sp, #60]	; 0x3c
   16f74:	ldr	r3, [pc, #3752]	; 17e24 <lchmod@@Base+0x199c>
   16f78:	str	r3, [sp, #72]	; 0x48
   16f7c:	mov	fp, #1
   16f80:	mov	sl, #2
   16f84:	b	16e48 <lchmod@@Base+0x9c0>
   16f88:	ldr	r3, [sp, #32]
   16f8c:	cmp	r3, #0
   16f90:	beq	16f50 <lchmod@@Base+0xac8>
   16f94:	mov	r3, #1
   16f98:	str	r3, [sp, #60]	; 0x3c
   16f9c:	ldr	r3, [pc, #3712]	; 17e24 <lchmod@@Base+0x199c>
   16fa0:	str	r3, [sp, #72]	; 0x48
   16fa4:	mov	fp, #0
   16fa8:	b	16e48 <lchmod@@Base+0x9c0>
   16fac:	bl	117d8 <abort@plt>
   16fb0:	mov	r3, #0
   16fb4:	str	r3, [sp, #32]
   16fb8:	mov	r3, #1
   16fbc:	str	r3, [sp, #48]	; 0x30
   16fc0:	mov	fp, #0
   16fc4:	b	16e48 <lchmod@@Base+0x9c0>
   16fc8:	ldr	r3, [sp, #32]
   16fcc:	str	r3, [sp, #48]	; 0x30
   16fd0:	mov	r3, #1
   16fd4:	str	r3, [sp, #60]	; 0x3c
   16fd8:	ldr	r3, [pc, #3660]	; 17e2c <lchmod@@Base+0x19a4>
   16fdc:	str	r3, [sp, #72]	; 0x48
   16fe0:	mov	fp, #0
   16fe4:	b	16e48 <lchmod@@Base+0x9c0>
   16fe8:	mov	r3, #1
   16fec:	str	r3, [sp, #48]	; 0x30
   16ff0:	str	r3, [sp, #60]	; 0x3c
   16ff4:	ldr	r3, [pc, #3632]	; 17e2c <lchmod@@Base+0x19a4>
   16ff8:	str	r3, [sp, #72]	; 0x48
   16ffc:	mov	fp, #1
   17000:	b	16e48 <lchmod@@Base+0x9c0>
   17004:	mov	r3, #1
   17008:	str	r3, [sp, #60]	; 0x3c
   1700c:	ldr	r3, [pc, #3600]	; 17e24 <lchmod@@Base+0x199c>
   17010:	str	r3, [sp, #72]	; 0x48
   17014:	mov	fp, #0
   17018:	mov	sl, #2
   1701c:	b	16e48 <lchmod@@Base+0x9c0>
   17020:	mov	r3, #0
   17024:	str	r3, [sp, #32]
   17028:	mov	r3, #1
   1702c:	str	r3, [sp, #60]	; 0x3c
   17030:	ldr	r3, [pc, #3564]	; 17e24 <lchmod@@Base+0x199c>
   17034:	str	r3, [sp, #72]	; 0x48
   17038:	mov	fp, #1
   1703c:	mov	sl, #2
   17040:	b	16e48 <lchmod@@Base+0x9c0>
   17044:	mov	r3, #0
   17048:	str	r3, [sp, #56]	; 0x38
   1704c:	ldr	r3, [sp, #52]	; 0x34
   17050:	add	r2, r3, r6
   17054:	str	r2, [sp, #64]	; 0x40
   17058:	ldrb	r4, [r3, r6]
   1705c:	cmp	r4, #126	; 0x7e
   17060:	ldrls	pc, [pc, r4, lsl #2]
   17064:	b	178a0 <lchmod@@Base+0x1418>
   17068:	andeq	r7, r1, r0, lsl #5
   1706c:	andeq	r7, r1, r0, lsr #17
   17070:	andeq	r7, r1, r0, lsr #17
   17074:	andeq	r7, r1, r0, lsr #17
   17078:	andeq	r7, r1, r0, lsr #17
   1707c:	andeq	r7, r1, r0, lsr #17
   17080:	andeq	r7, r1, r0, lsr #17
   17084:	ldrdeq	r7, [r1], -ip
   17088:	andeq	r7, r1, r8, ror r2
   1708c:	muleq	r1, r4, r5
   17090:	andeq	r7, r1, ip, lsl #11
   17094:	strdeq	r7, [r1], -ip
   17098:	strdeq	r7, [r1], -r4
   1709c:	andeq	r7, r1, r0, ror r2
   170a0:	andeq	r7, r1, r0, lsr #17
   170a4:	andeq	r7, r1, r0, lsr #17
   170a8:	andeq	r7, r1, r0, lsr #17
   170ac:	andeq	r7, r1, r0, lsr #17
   170b0:	andeq	r7, r1, r0, lsr #17
   170b4:	andeq	r7, r1, r0, lsr #17
   170b8:	andeq	r7, r1, r0, lsr #17
   170bc:	andeq	r7, r1, r0, lsr #17
   170c0:	andeq	r7, r1, r0, lsr #17
   170c4:	andeq	r7, r1, r0, lsr #17
   170c8:	andeq	r7, r1, r0, lsr #17
   170cc:	andeq	r7, r1, r0, lsr #17
   170d0:	andeq	r7, r1, r0, lsr #17
   170d4:	andeq	r7, r1, r0, lsr #17
   170d8:	andeq	r7, r1, r0, lsr #17
   170dc:	andeq	r7, r1, r0, lsr #17
   170e0:	andeq	r7, r1, r0, lsr #17
   170e4:	andeq	r7, r1, r0, lsr #17
   170e8:	andeq	r7, r1, r0, lsr r6
   170ec:	andeq	r7, r1, ip, lsr #12
   170f0:	andeq	r7, r1, ip, lsr #12
   170f4:	andeq	r7, r1, r4, lsl #12
   170f8:	andeq	r7, r1, ip, lsr #12
   170fc:	andeq	r7, r1, r4, ror ip
   17100:	andeq	r7, r1, ip, lsr #12
   17104:	andeq	r7, r1, r4, lsl #16
   17108:	andeq	r7, r1, ip, lsr #12
   1710c:	andeq	r7, r1, ip, lsr #12
   17110:	andeq	r7, r1, ip, lsr #12
   17114:	andeq	r7, r1, r4, ror ip
   17118:	andeq	r7, r1, r4, ror ip
   1711c:	andeq	r7, r1, r4, ror ip
   17120:	andeq	r7, r1, r4, ror ip
   17124:	andeq	r7, r1, r4, ror ip
   17128:	andeq	r7, r1, r4, ror ip
   1712c:	andeq	r7, r1, r4, ror ip
   17130:	andeq	r7, r1, r4, ror ip
   17134:	andeq	r7, r1, r4, ror ip
   17138:	andeq	r7, r1, r4, ror ip
   1713c:	andeq	r7, r1, r4, ror ip
   17140:	andeq	r7, r1, r4, ror ip
   17144:	andeq	r7, r1, r4, ror ip
   17148:	andeq	r7, r1, r4, ror ip
   1714c:	andeq	r7, r1, r4, ror ip
   17150:	andeq	r7, r1, r4, ror ip
   17154:	andeq	r7, r1, ip, lsr #12
   17158:	andeq	r7, r1, ip, lsr #12
   1715c:	andeq	r7, r1, ip, lsr #12
   17160:	andeq	r7, r1, ip, lsr #12
   17164:	andeq	r7, r1, r8, lsl #7
   17168:	andeq	r7, r1, r0, lsr #17
   1716c:	andeq	r7, r1, r4, ror ip
   17170:	andeq	r7, r1, r4, ror ip
   17174:	andeq	r7, r1, r4, ror ip
   17178:	andeq	r7, r1, r4, ror ip
   1717c:	andeq	r7, r1, r4, ror ip
   17180:	andeq	r7, r1, r4, ror ip
   17184:	andeq	r7, r1, r4, ror ip
   17188:	andeq	r7, r1, r4, ror ip
   1718c:	andeq	r7, r1, r4, ror ip
   17190:	andeq	r7, r1, r4, ror ip
   17194:	andeq	r7, r1, r4, ror ip
   17198:	andeq	r7, r1, r4, ror ip
   1719c:	andeq	r7, r1, r4, ror ip
   171a0:	andeq	r7, r1, r4, ror ip
   171a4:	andeq	r7, r1, r4, ror ip
   171a8:	andeq	r7, r1, r4, ror ip
   171ac:	andeq	r7, r1, r4, ror ip
   171b0:	andeq	r7, r1, r4, ror ip
   171b4:	andeq	r7, r1, r4, ror ip
   171b8:	andeq	r7, r1, r4, ror ip
   171bc:	andeq	r7, r1, r4, ror ip
   171c0:	andeq	r7, r1, r4, ror ip
   171c4:	andeq	r7, r1, r4, ror ip
   171c8:	andeq	r7, r1, r4, ror ip
   171cc:	andeq	r7, r1, r4, ror ip
   171d0:	andeq	r7, r1, r4, ror ip
   171d4:	andeq	r7, r1, ip, lsr #12
   171d8:	andeq	r7, r1, r4, lsl #10
   171dc:	andeq	r7, r1, r4, ror ip
   171e0:	andeq	r7, r1, ip, lsr #12
   171e4:	andeq	r7, r1, r4, ror ip
   171e8:	andeq	r7, r1, ip, lsr #12
   171ec:	andeq	r7, r1, r4, ror ip
   171f0:	andeq	r7, r1, r4, ror ip
   171f4:	andeq	r7, r1, r4, ror ip
   171f8:	andeq	r7, r1, r4, ror ip
   171fc:	andeq	r7, r1, r4, ror ip
   17200:	andeq	r7, r1, r4, ror ip
   17204:	andeq	r7, r1, r4, ror ip
   17208:	andeq	r7, r1, r4, ror ip
   1720c:	andeq	r7, r1, r4, ror ip
   17210:	andeq	r7, r1, r4, ror ip
   17214:	andeq	r7, r1, r4, ror ip
   17218:	andeq	r7, r1, r4, ror ip
   1721c:	andeq	r7, r1, r4, ror ip
   17220:	andeq	r7, r1, r4, ror ip
   17224:	andeq	r7, r1, r4, ror ip
   17228:	andeq	r7, r1, r4, ror ip
   1722c:	andeq	r7, r1, r4, ror ip
   17230:	andeq	r7, r1, r4, ror ip
   17234:	andeq	r7, r1, r4, ror ip
   17238:	andeq	r7, r1, r4, ror ip
   1723c:	andeq	r7, r1, r4, ror ip
   17240:	andeq	r7, r1, r4, ror ip
   17244:	andeq	r7, r1, r4, ror ip
   17248:	andeq	r7, r1, r4, ror ip
   1724c:	andeq	r7, r1, r4, ror ip
   17250:	andeq	r7, r1, r4, ror ip
   17254:	andeq	r7, r1, r4, ror #11
   17258:	andeq	r7, r1, ip, lsr #12
   1725c:	andeq	r7, r1, r4, ror #11
   17260:	andeq	r7, r1, r4, lsl #12
   17264:	mov	r3, #0
   17268:	str	r3, [sp, #56]	; 0x38
   1726c:	b	1704c <lchmod@@Base+0xbc4>
   17270:	mov	r3, #114	; 0x72
   17274:	b	17598 <lchmod@@Base+0x1110>
   17278:	mov	r3, #98	; 0x62
   1727c:	b	175b0 <lchmod@@Base+0x1128>
   17280:	ldr	r3, [sp, #48]	; 0x30
   17284:	cmp	r3, #0
   17288:	beq	17370 <lchmod@@Base+0xee8>
   1728c:	ldr	r3, [sp, #32]
   17290:	cmp	r3, #0
   17294:	bne	17df8 <lchmod@@Base+0x1970>
   17298:	ldr	r3, [sp, #44]	; 0x2c
   1729c:	eor	r3, r3, #1
   172a0:	cmp	sl, #2
   172a4:	movne	r3, #0
   172a8:	andeq	r3, r3, #1
   172ac:	cmp	r3, #0
   172b0:	moveq	r2, fp
   172b4:	beq	172f8 <lchmod@@Base+0xe70>
   172b8:	cmp	r7, fp
   172bc:	ldrhi	r2, [sp, #36]	; 0x24
   172c0:	movhi	r1, #39	; 0x27
   172c4:	strbhi	r1, [r2, fp]
   172c8:	add	r2, fp, #1
   172cc:	cmp	r7, r2
   172d0:	ldrhi	r1, [sp, #36]	; 0x24
   172d4:	movhi	r0, #36	; 0x24
   172d8:	strbhi	r0, [r1, r2]
   172dc:	add	r2, fp, #2
   172e0:	cmp	r7, r2
   172e4:	ldrhi	r1, [sp, #36]	; 0x24
   172e8:	movhi	r0, #39	; 0x27
   172ec:	strbhi	r0, [r1, r2]
   172f0:	add	r2, fp, #3
   172f4:	str	r3, [sp, #44]	; 0x2c
   172f8:	cmp	r7, r2
   172fc:	ldrhi	r3, [sp, #36]	; 0x24
   17300:	movhi	r1, #92	; 0x5c
   17304:	strbhi	r1, [r3, r2]
   17308:	add	fp, r2, #1
   1730c:	cmp	r5, #0
   17310:	beq	17c7c <lchmod@@Base+0x17f4>
   17314:	add	r3, r6, #1
   17318:	ldr	r1, [sp, #28]
   1731c:	cmp	r1, r3
   17320:	bls	17c8c <lchmod@@Base+0x1804>
   17324:	ldr	r1, [sp, #52]	; 0x34
   17328:	ldrb	r3, [r1, r3]
   1732c:	sub	r3, r3, #48	; 0x30
   17330:	uxtb	r3, r3
   17334:	cmp	r3, #9
   17338:	bhi	17c98 <lchmod@@Base+0x1810>
   1733c:	cmp	r7, fp
   17340:	movhi	r3, #48	; 0x30
   17344:	ldrhi	r1, [sp, #36]	; 0x24
   17348:	strbhi	r3, [r1, fp]
   1734c:	add	r3, r2, #2
   17350:	cmp	r7, r3
   17354:	movhi	r1, #48	; 0x30
   17358:	ldrhi	r0, [sp, #36]	; 0x24
   1735c:	strbhi	r1, [r0, r3]
   17360:	add	fp, r2, #3
   17364:	ldr	r8, [sp, #32]
   17368:	mov	r4, #48	; 0x30
   1736c:	b	17648 <lchmod@@Base+0x11c0>
   17370:	ldr	r3, [sp, #156]	; 0x9c
   17374:	tst	r3, #1
   17378:	bne	1773c <lchmod@@Base+0x12b4>
   1737c:	ldr	r5, [sp, #48]	; 0x30
   17380:	mov	r8, r5
   17384:	b	17648 <lchmod@@Base+0x11c0>
   17388:	cmp	sl, #2
   1738c:	beq	173a4 <lchmod@@Base+0xf1c>
   17390:	cmp	sl, #5
   17394:	beq	173bc <lchmod@@Base+0xf34>
   17398:	mov	r8, #0
   1739c:	mov	r5, r8
   173a0:	b	17648 <lchmod@@Base+0x11c0>
   173a4:	ldr	r3, [sp, #32]
   173a8:	cmp	r3, #0
   173ac:	bne	17e0c <lchmod@@Base+0x1984>
   173b0:	mov	r8, r3
   173b4:	mov	r5, r3
   173b8:	b	17648 <lchmod@@Base+0x11c0>
   173bc:	ldr	r3, [sp, #156]	; 0x9c
   173c0:	tst	r3, #4
   173c4:	beq	17ca4 <lchmod@@Base+0x181c>
   173c8:	add	r3, r6, #2
   173cc:	ldr	r2, [sp, #28]
   173d0:	cmp	r2, r3
   173d4:	bls	17cb0 <lchmod@@Base+0x1828>
   173d8:	ldr	r2, [sp, #52]	; 0x34
   173dc:	add	r2, r2, r6
   173e0:	ldrb	r2, [r2, #1]
   173e4:	cmp	r2, #63	; 0x3f
   173e8:	movne	r8, #0
   173ec:	movne	r5, r8
   173f0:	bne	17648 <lchmod@@Base+0x11c0>
   173f4:	ldr	r2, [sp, #52]	; 0x34
   173f8:	ldrb	r2, [r2, r3]
   173fc:	sub	r1, r2, #33	; 0x21
   17400:	cmp	r1, #29
   17404:	ldrls	pc, [pc, r1, lsl #2]
   17408:	b	17cbc <lchmod@@Base+0x1834>
   1740c:	andeq	r7, r1, r4, lsl #9
   17410:			; <UNDEFINED> instruction: 0x00017cbc
   17414:			; <UNDEFINED> instruction: 0x00017cbc
   17418:			; <UNDEFINED> instruction: 0x00017cbc
   1741c:			; <UNDEFINED> instruction: 0x00017cbc
   17420:			; <UNDEFINED> instruction: 0x00017cbc
   17424:	andeq	r7, r1, r4, lsl #9
   17428:	andeq	r7, r1, r4, lsl #9
   1742c:	andeq	r7, r1, r4, lsl #9
   17430:			; <UNDEFINED> instruction: 0x00017cbc
   17434:			; <UNDEFINED> instruction: 0x00017cbc
   17438:			; <UNDEFINED> instruction: 0x00017cbc
   1743c:	andeq	r7, r1, r4, lsl #9
   17440:			; <UNDEFINED> instruction: 0x00017cbc
   17444:	andeq	r7, r1, r4, lsl #9
   17448:			; <UNDEFINED> instruction: 0x00017cbc
   1744c:			; <UNDEFINED> instruction: 0x00017cbc
   17450:			; <UNDEFINED> instruction: 0x00017cbc
   17454:			; <UNDEFINED> instruction: 0x00017cbc
   17458:			; <UNDEFINED> instruction: 0x00017cbc
   1745c:			; <UNDEFINED> instruction: 0x00017cbc
   17460:			; <UNDEFINED> instruction: 0x00017cbc
   17464:			; <UNDEFINED> instruction: 0x00017cbc
   17468:			; <UNDEFINED> instruction: 0x00017cbc
   1746c:			; <UNDEFINED> instruction: 0x00017cbc
   17470:			; <UNDEFINED> instruction: 0x00017cbc
   17474:			; <UNDEFINED> instruction: 0x00017cbc
   17478:	andeq	r7, r1, r4, lsl #9
   1747c:	andeq	r7, r1, r4, lsl #9
   17480:	andeq	r7, r1, r4, lsl #9
   17484:	ldr	r1, [sp, #32]
   17488:	cmp	r1, #0
   1748c:	bne	17ecc <lchmod@@Base+0x1a44>
   17490:	cmp	r7, fp
   17494:	movhi	r1, #63	; 0x3f
   17498:	ldrhi	r0, [sp, #36]	; 0x24
   1749c:	strbhi	r1, [r0, fp]
   174a0:	add	r1, fp, #1
   174a4:	cmp	r7, r1
   174a8:	ldrhi	r0, [sp, #36]	; 0x24
   174ac:	movhi	ip, #34	; 0x22
   174b0:	strbhi	ip, [r0, r1]
   174b4:	add	r1, fp, #2
   174b8:	cmp	r7, r1
   174bc:	ldrhi	r0, [sp, #36]	; 0x24
   174c0:	movhi	ip, #34	; 0x22
   174c4:	strbhi	ip, [r0, r1]
   174c8:	add	r1, fp, #3
   174cc:	cmp	r7, r1
   174d0:	movhi	r0, #63	; 0x3f
   174d4:	ldrhi	ip, [sp, #36]	; 0x24
   174d8:	strbhi	r0, [ip, r1]
   174dc:	add	fp, fp, #4
   174e0:	ldr	r5, [sp, #32]
   174e4:	mov	r8, r5
   174e8:	mov	r4, r2
   174ec:	mov	r6, r3
   174f0:	b	17648 <lchmod@@Base+0x11c0>
   174f4:	mov	r3, #102	; 0x66
   174f8:	b	175b0 <lchmod@@Base+0x1128>
   174fc:	mov	r3, #118	; 0x76
   17500:	b	175b0 <lchmod@@Base+0x1128>
   17504:	cmp	sl, #2
   17508:	beq	17574 <lchmod@@Base+0x10ec>
   1750c:	ldr	r3, [sp, #48]	; 0x30
   17510:	ldr	r2, [sp, #32]
   17514:	and	r3, r3, r2
   17518:	tst	r9, r3
   1751c:	moveq	r3, r4
   17520:	beq	175b0 <lchmod@@Base+0x1128>
   17524:	mov	r8, #0
   17528:	mov	r5, r8
   1752c:	eor	r5, r5, #1
   17530:	ldr	r3, [sp, #44]	; 0x2c
   17534:	and	r5, r5, r3
   17538:	tst	r5, #255	; 0xff
   1753c:	beq	1771c <lchmod@@Base+0x1294>
   17540:	cmp	r7, fp
   17544:	ldrhi	r3, [sp, #36]	; 0x24
   17548:	movhi	r2, #39	; 0x27
   1754c:	strbhi	r2, [r3, fp]
   17550:	add	r3, fp, #1
   17554:	cmp	r7, r3
   17558:	ldrhi	r2, [sp, #36]	; 0x24
   1755c:	movhi	r1, #39	; 0x27
   17560:	strbhi	r1, [r2, r3]
   17564:	add	fp, fp, #2
   17568:	mov	r3, #0
   1756c:	str	r3, [sp, #44]	; 0x2c
   17570:	b	1771c <lchmod@@Base+0x1294>
   17574:	ldr	r3, [sp, #32]
   17578:	cmp	r3, #0
   1757c:	bne	17e18 <lchmod@@Base+0x1990>
   17580:	mov	r8, r3
   17584:	mov	r5, r3
   17588:	b	1752c <lchmod@@Base+0x10a4>
   1758c:	mov	r3, #110	; 0x6e
   17590:	b	17598 <lchmod@@Base+0x1110>
   17594:	mov	r3, #116	; 0x74
   17598:	ldr	r2, [sp, #32]
   1759c:	cmp	sl, #2
   175a0:	movne	r2, #0
   175a4:	andeq	r2, r2, #1
   175a8:	cmp	r2, #0
   175ac:	bne	175d0 <lchmod@@Base+0x1148>
   175b0:	ldr	r2, [sp, #48]	; 0x30
   175b4:	cmp	r2, #0
   175b8:	moveq	r8, r2
   175bc:	moveq	r5, r2
   175c0:	beq	17648 <lchmod@@Base+0x11c0>
   175c4:	mov	r4, r3
   175c8:	mov	r8, #0
   175cc:	b	176a0 <lchmod@@Base+0x1218>
   175d0:	mov	r8, sl
   175d4:	mov	sl, r7
   175d8:	b	17e44 <lchmod@@Base+0x19bc>
   175dc:	mov	r3, #97	; 0x61
   175e0:	b	175b0 <lchmod@@Base+0x1128>
   175e4:	ldr	r3, [sp, #28]
   175e8:	cmn	r3, #1
   175ec:	beq	17618 <lchmod@@Base+0x1190>
   175f0:	ldr	r3, [sp, #28]
   175f4:	subs	r3, r3, #1
   175f8:	movne	r3, #1
   175fc:	cmp	r3, #0
   17600:	bne	17cc8 <lchmod@@Base+0x1840>
   17604:	cmp	r6, #0
   17608:	beq	17630 <lchmod@@Base+0x11a8>
   1760c:	mov	r8, #0
   17610:	mov	r5, r8
   17614:	b	17648 <lchmod@@Base+0x11c0>
   17618:	ldr	r3, [sp, #52]	; 0x34
   1761c:	ldrb	r3, [r3, #1]
   17620:	adds	r3, r3, #0
   17624:	movne	r3, #1
   17628:	b	175fc <lchmod@@Base+0x1174>
   1762c:	mov	r8, #0
   17630:	ldr	r5, [sp, #32]
   17634:	cmp	sl, #2
   17638:	movne	r5, #0
   1763c:	andeq	r5, r5, #1
   17640:	cmp	r5, #0
   17644:	bne	177f8 <lchmod@@Base+0x1370>
   17648:	ldr	r3, [sp, #68]	; 0x44
   1764c:	cmp	sl, #2
   17650:	orreq	r3, r3, #1
   17654:	eor	r3, r3, #1
   17658:	ldr	r2, [sp, #32]
   1765c:	orr	r3, r2, r3
   17660:	tst	r3, #255	; 0xff
   17664:	beq	17694 <lchmod@@Base+0x120c>
   17668:	ldr	r3, [sp, #160]	; 0xa0
   1766c:	cmp	r3, #0
   17670:	beq	17694 <lchmod@@Base+0x120c>
   17674:	lsr	r2, r4, #5
   17678:	uxtb	r2, r2
   1767c:	and	r3, r4, #31
   17680:	ldr	r1, [sp, #160]	; 0xa0
   17684:	ldr	r2, [r1, r2, lsl #2]
   17688:	lsr	r3, r2, r3
   1768c:	tst	r3, #1
   17690:	bne	176a0 <lchmod@@Base+0x1218>
   17694:	ldr	r3, [sp, #56]	; 0x38
   17698:	cmp	r3, #0
   1769c:	beq	1752c <lchmod@@Base+0x10a4>
   176a0:	ldr	r3, [sp, #32]
   176a4:	cmp	r3, #0
   176a8:	bne	17eb4 <lchmod@@Base+0x1a2c>
   176ac:	ldr	r3, [sp, #44]	; 0x2c
   176b0:	eor	r3, r3, #1
   176b4:	cmp	sl, #2
   176b8:	movne	r3, #0
   176bc:	andeq	r3, r3, #1
   176c0:	cmp	r3, #0
   176c4:	beq	17708 <lchmod@@Base+0x1280>
   176c8:	cmp	r7, fp
   176cc:	ldrhi	r2, [sp, #36]	; 0x24
   176d0:	movhi	r1, #39	; 0x27
   176d4:	strbhi	r1, [r2, fp]
   176d8:	add	r2, fp, #1
   176dc:	cmp	r7, r2
   176e0:	ldrhi	r1, [sp, #36]	; 0x24
   176e4:	movhi	r0, #36	; 0x24
   176e8:	strbhi	r0, [r1, r2]
   176ec:	add	r2, fp, #2
   176f0:	cmp	r7, r2
   176f4:	ldrhi	r1, [sp, #36]	; 0x24
   176f8:	movhi	r0, #39	; 0x27
   176fc:	strbhi	r0, [r1, r2]
   17700:	add	fp, fp, #3
   17704:	str	r3, [sp, #44]	; 0x2c
   17708:	cmp	r7, fp
   1770c:	ldrhi	r3, [sp, #36]	; 0x24
   17710:	movhi	r2, #92	; 0x5c
   17714:	strbhi	r2, [r3, fp]
   17718:	add	fp, fp, #1
   1771c:	cmp	fp, r7
   17720:	ldrcc	r3, [sp, #36]	; 0x24
   17724:	strbcc	r4, [r3, fp]
   17728:	add	fp, fp, #1
   1772c:	ldr	r3, [sp, #40]	; 0x28
   17730:	cmp	r8, #0
   17734:	moveq	r3, #0
   17738:	str	r3, [sp, #40]	; 0x28
   1773c:	add	r6, r6, #1
   17740:	ldr	r3, [sp, #28]
   17744:	cmn	r3, #1
   17748:	beq	17cd4 <lchmod@@Base+0x184c>
   1774c:	ldr	r3, [sp, #28]
   17750:	subs	r8, r3, r6
   17754:	movne	r8, #1
   17758:	cmp	r8, #0
   1775c:	beq	17ce8 <lchmod@@Base+0x1860>
   17760:	ldr	r5, [sp, #48]	; 0x30
   17764:	cmp	sl, #2
   17768:	moveq	r5, #0
   1776c:	andne	r5, r5, #1
   17770:	ldr	r3, [sp, #60]	; 0x3c
   17774:	adds	r9, r3, #0
   17778:	movne	r9, #1
   1777c:	ands	r2, r5, r9
   17780:	str	r2, [sp, #56]	; 0x38
   17784:	beq	1704c <lchmod@@Base+0xbc4>
   17788:	add	r4, r6, r3
   1778c:	ldr	r2, [sp, #28]
   17790:	cmp	r3, #1
   17794:	movls	r3, #0
   17798:	movhi	r3, #1
   1779c:	cmn	r2, #1
   177a0:	movne	r3, #0
   177a4:	cmp	r3, #0
   177a8:	beq	177b8 <lchmod@@Base+0x1330>
   177ac:	ldr	r0, [sp, #52]	; 0x34
   177b0:	bl	11658 <strlen@plt>
   177b4:	str	r0, [sp, #28]
   177b8:	ldr	r3, [sp, #28]
   177bc:	cmp	r3, r4
   177c0:	bcc	17044 <lchmod@@Base+0xbbc>
   177c4:	ldr	r2, [sp, #60]	; 0x3c
   177c8:	ldr	r1, [sp, #72]	; 0x48
   177cc:	ldr	r3, [sp, #52]	; 0x34
   177d0:	add	r0, r3, r6
   177d4:	bl	114d8 <memcmp@plt>
   177d8:	cmp	r0, #0
   177dc:	bne	17264 <lchmod@@Base+0xddc>
   177e0:	ldr	r3, [sp, #32]
   177e4:	cmp	r3, #0
   177e8:	beq	1704c <lchmod@@Base+0xbc4>
   177ec:	mov	r8, sl
   177f0:	mov	sl, r7
   177f4:	b	17e44 <lchmod@@Base+0x19bc>
   177f8:	mov	r8, sl
   177fc:	mov	sl, r7
   17800:	b	17e44 <lchmod@@Base+0x19bc>
   17804:	cmp	sl, #2
   17808:	strne	r8, [sp, #80]	; 0x50
   1780c:	movne	r5, #0
   17810:	bne	17648 <lchmod@@Base+0x11c0>
   17814:	ldr	r3, [sp, #32]
   17818:	cmp	r3, #0
   1781c:	bne	17e30 <lchmod@@Base+0x19a8>
   17820:	ldr	r2, [sp, #76]	; 0x4c
   17824:	adds	r3, r7, #0
   17828:	movne	r3, #1
   1782c:	cmp	r2, #0
   17830:	movne	r3, #0
   17834:	cmp	r3, #0
   17838:	movne	r3, #0
   1783c:	bne	1786c <lchmod@@Base+0x13e4>
   17840:	cmp	r7, fp
   17844:	ldrhi	r3, [sp, #36]	; 0x24
   17848:	movhi	r2, #39	; 0x27
   1784c:	strbhi	r2, [r3, fp]
   17850:	add	r3, fp, #1
   17854:	cmp	r7, r3
   17858:	ldrhi	r2, [sp, #36]	; 0x24
   1785c:	movhi	r1, #92	; 0x5c
   17860:	strbhi	r1, [r2, r3]
   17864:	mov	r3, r7
   17868:	ldr	r7, [sp, #76]	; 0x4c
   1786c:	add	r2, fp, #2
   17870:	cmp	r2, r3
   17874:	ldrcc	r1, [sp, #36]	; 0x24
   17878:	movcc	r0, #39	; 0x27
   1787c:	strbcc	r0, [r1, r2]
   17880:	add	fp, fp, #3
   17884:	ldr	r2, [sp, #32]
   17888:	mov	r5, r2
   1788c:	str	r8, [sp, #80]	; 0x50
   17890:	str	r2, [sp, #44]	; 0x2c
   17894:	str	r7, [sp, #76]	; 0x4c
   17898:	mov	r7, r3
   1789c:	b	17648 <lchmod@@Base+0x11c0>
   178a0:	ldr	r5, [sp, #84]	; 0x54
   178a4:	cmp	r5, #1
   178a8:	beq	178d8 <lchmod@@Base+0x1450>
   178ac:	mov	r3, #0
   178b0:	str	r3, [sp, #104]	; 0x68
   178b4:	str	r3, [sp, #108]	; 0x6c
   178b8:	ldr	r3, [sp, #28]
   178bc:	cmn	r3, #1
   178c0:	beq	1790c <lchmod@@Base+0x1484>
   178c4:	mov	r3, #0
   178c8:	str	r4, [sp, #88]	; 0x58
   178cc:	str	fp, [sp, #92]	; 0x5c
   178d0:	mov	fp, r3
   178d4:	b	17a34 <lchmod@@Base+0x15ac>
   178d8:	bl	11628 <__ctype_b_loc@plt>
   178dc:	ldr	r2, [r0]
   178e0:	lsl	r3, r4, #1
   178e4:	ldrh	r8, [r2, r3]
   178e8:	lsr	r8, r8, #14
   178ec:	and	r8, r8, #1
   178f0:	mov	r2, r5
   178f4:	eor	r5, r8, #1
   178f8:	ldr	r3, [sp, #48]	; 0x30
   178fc:	and	r5, r5, r3
   17900:	ands	r5, r5, #255	; 0xff
   17904:	beq	17648 <lchmod@@Base+0x11c0>
   17908:	b	17acc <lchmod@@Base+0x1644>
   1790c:	ldr	r0, [sp, #52]	; 0x34
   17910:	bl	11658 <strlen@plt>
   17914:	str	r0, [sp, #28]
   17918:	b	178c4 <lchmod@@Base+0x143c>
   1791c:	mov	r2, fp
   17920:	mov	r1, r4
   17924:	ldr	r4, [sp, #88]	; 0x58
   17928:	ldr	fp, [sp, #92]	; 0x5c
   1792c:	ldr	r0, [sp, #28]
   17930:	cmp	r0, r5
   17934:	bls	17b00 <lchmod@@Base+0x1678>
   17938:	ldrb	r3, [r1]
   1793c:	cmp	r3, #0
   17940:	beq	17b08 <lchmod@@Base+0x1680>
   17944:	mov	r3, r1
   17948:	add	r2, r2, #1
   1794c:	add	r1, r6, r2
   17950:	cmp	r0, r1
   17954:	bls	17b10 <lchmod@@Base+0x1688>
   17958:	ldrb	r1, [r3, #1]!
   1795c:	cmp	r1, #0
   17960:	bne	17948 <lchmod@@Base+0x14c0>
   17964:	mov	r8, #0
   17968:	b	17ac4 <lchmod@@Base+0x163c>
   1796c:	cmp	r4, r5
   17970:	beq	17a10 <lchmod@@Base+0x1588>
   17974:	ldrb	r3, [r4, #1]!
   17978:	sub	r3, r3, #91	; 0x5b
   1797c:	cmp	r3, #33	; 0x21
   17980:	ldrls	pc, [pc, r3, lsl #2]
   17984:	b	1796c <lchmod@@Base+0x14e4>
   17988:	andeq	r7, r1, ip, lsr lr
   1798c:	andeq	r7, r1, ip, lsr lr
   17990:	andeq	r7, r1, ip, ror #18
   17994:	andeq	r7, r1, ip, lsr lr
   17998:	andeq	r7, r1, ip, ror #18
   1799c:	andeq	r7, r1, ip, lsr lr
   179a0:	andeq	r7, r1, ip, ror #18
   179a4:	andeq	r7, r1, ip, ror #18
   179a8:	andeq	r7, r1, ip, ror #18
   179ac:	andeq	r7, r1, ip, ror #18
   179b0:	andeq	r7, r1, ip, ror #18
   179b4:	andeq	r7, r1, ip, ror #18
   179b8:	andeq	r7, r1, ip, ror #18
   179bc:	andeq	r7, r1, ip, ror #18
   179c0:	andeq	r7, r1, ip, ror #18
   179c4:	andeq	r7, r1, ip, ror #18
   179c8:	andeq	r7, r1, ip, ror #18
   179cc:	andeq	r7, r1, ip, ror #18
   179d0:	andeq	r7, r1, ip, ror #18
   179d4:	andeq	r7, r1, ip, ror #18
   179d8:	andeq	r7, r1, ip, ror #18
   179dc:	andeq	r7, r1, ip, ror #18
   179e0:	andeq	r7, r1, ip, ror #18
   179e4:	andeq	r7, r1, ip, ror #18
   179e8:	andeq	r7, r1, ip, ror #18
   179ec:	andeq	r7, r1, ip, ror #18
   179f0:	andeq	r7, r1, ip, ror #18
   179f4:	andeq	r7, r1, ip, ror #18
   179f8:	andeq	r7, r1, ip, ror #18
   179fc:	andeq	r7, r1, ip, ror #18
   17a00:	andeq	r7, r1, ip, ror #18
   17a04:	andeq	r7, r1, ip, ror #18
   17a08:	andeq	r7, r1, ip, ror #18
   17a0c:	andeq	r7, r1, ip, lsr lr
   17a10:	ldr	r0, [sp, #100]	; 0x64
   17a14:	bl	11544 <iswprint@plt>
   17a18:	cmp	r0, #0
   17a1c:	moveq	r8, #0
   17a20:	add	fp, fp, r9
   17a24:	add	r0, sp, #104	; 0x68
   17a28:	bl	114c0 <mbsinit@plt>
   17a2c:	cmp	r0, #0
   17a30:	bne	17aa4 <lchmod@@Base+0x161c>
   17a34:	add	r5, r6, fp
   17a38:	ldr	r3, [sp, #52]	; 0x34
   17a3c:	add	r4, r3, r5
   17a40:	add	r3, sp, #104	; 0x68
   17a44:	ldr	r2, [sp, #28]
   17a48:	sub	r2, r2, r5
   17a4c:	mov	r1, r4
   17a50:	add	r0, sp, #100	; 0x64
   17a54:	bl	19cb0 <lchmod@@Base+0x3828>
   17a58:	subs	r9, r0, #0
   17a5c:	beq	17b18 <lchmod@@Base+0x1690>
   17a60:	cmn	r9, #1
   17a64:	beq	17ab4 <lchmod@@Base+0x162c>
   17a68:	cmn	r9, #2
   17a6c:	beq	1791c <lchmod@@Base+0x1494>
   17a70:	ldr	r3, [sp, #32]
   17a74:	cmp	sl, #2
   17a78:	movne	r3, #0
   17a7c:	andeq	r3, r3, #1
   17a80:	cmp	r3, #0
   17a84:	beq	17a10 <lchmod@@Base+0x1588>
   17a88:	cmp	r9, #1
   17a8c:	bls	17a10 <lchmod@@Base+0x1588>
   17a90:	sub	r3, r9, #1
   17a94:	add	r5, r3, r5
   17a98:	ldr	r3, [sp, #52]	; 0x34
   17a9c:	add	r5, r3, r5
   17aa0:	b	17974 <lchmod@@Base+0x14ec>
   17aa4:	ldr	r4, [sp, #88]	; 0x58
   17aa8:	mov	r2, fp
   17aac:	ldr	fp, [sp, #92]	; 0x5c
   17ab0:	b	17ac4 <lchmod@@Base+0x163c>
   17ab4:	ldr	r4, [sp, #88]	; 0x58
   17ab8:	mov	r2, fp
   17abc:	ldr	fp, [sp, #92]	; 0x5c
   17ac0:	mov	r8, #0
   17ac4:	cmp	r2, #1
   17ac8:	bls	178f4 <lchmod@@Base+0x146c>
   17acc:	add	r1, r6, r2
   17ad0:	ldr	ip, [sp, #64]	; 0x40
   17ad4:	mov	r5, #0
   17ad8:	eor	r3, r8, #1
   17adc:	ldr	r2, [sp, #48]	; 0x30
   17ae0:	and	r3, r3, r2
   17ae4:	uxtb	r3, r3
   17ae8:	ldr	r9, [sp, #32]
   17aec:	ldr	lr, [sp, #44]	; 0x2c
   17af0:	ldr	r2, [sp, #56]	; 0x38
   17af4:	str	r8, [sp, #56]	; 0x38
   17af8:	ldr	r0, [sp, #36]	; 0x24
   17afc:	b	17b98 <lchmod@@Base+0x1710>
   17b00:	mov	r8, #0
   17b04:	b	17ac4 <lchmod@@Base+0x163c>
   17b08:	mov	r8, #0
   17b0c:	b	17ac4 <lchmod@@Base+0x163c>
   17b10:	mov	r8, #0
   17b14:	b	17ac4 <lchmod@@Base+0x163c>
   17b18:	ldr	r4, [sp, #88]	; 0x58
   17b1c:	mov	r2, fp
   17b20:	ldr	fp, [sp, #92]	; 0x5c
   17b24:	b	17ac4 <lchmod@@Base+0x163c>
   17b28:	cmp	r2, #0
   17b2c:	beq	17b40 <lchmod@@Base+0x16b8>
   17b30:	cmp	r7, fp
   17b34:	movhi	r2, #92	; 0x5c
   17b38:	strbhi	r2, [r0, fp]
   17b3c:	add	fp, fp, #1
   17b40:	add	r8, r6, #1
   17b44:	cmp	r1, r8
   17b48:	bls	17c50 <lchmod@@Base+0x17c8>
   17b4c:	eor	r2, r5, #1
   17b50:	and	r2, r2, lr
   17b54:	ands	r2, r2, #255	; 0xff
   17b58:	beq	17c6c <lchmod@@Base+0x17e4>
   17b5c:	cmp	r7, fp
   17b60:	movhi	r2, #39	; 0x27
   17b64:	strbhi	r2, [r0, fp]
   17b68:	add	r2, fp, #1
   17b6c:	cmp	r7, r2
   17b70:	movhi	lr, #39	; 0x27
   17b74:	strbhi	lr, [r0, r2]
   17b78:	add	fp, fp, #2
   17b7c:	mov	r6, r8
   17b80:	mov	r2, r3
   17b84:	mov	lr, r3
   17b88:	cmp	r7, fp
   17b8c:	strbhi	r4, [r0, fp]
   17b90:	add	fp, fp, #1
   17b94:	ldrb	r4, [ip, #1]!
   17b98:	cmp	r3, #0
   17b9c:	beq	17b28 <lchmod@@Base+0x16a0>
   17ba0:	cmp	r9, #0
   17ba4:	bne	17ea8 <lchmod@@Base+0x1a20>
   17ba8:	eor	r5, lr, #1
   17bac:	cmp	sl, #2
   17bb0:	movne	r5, #0
   17bb4:	andeq	r5, r5, #1
   17bb8:	cmp	r5, #0
   17bbc:	beq	17bf4 <lchmod@@Base+0x176c>
   17bc0:	cmp	r7, fp
   17bc4:	movhi	lr, #39	; 0x27
   17bc8:	strbhi	lr, [r0, fp]
   17bcc:	add	lr, fp, #1
   17bd0:	cmp	r7, lr
   17bd4:	movhi	r8, #36	; 0x24
   17bd8:	strbhi	r8, [r0, lr]
   17bdc:	add	lr, fp, #2
   17be0:	cmp	r7, lr
   17be4:	movhi	r8, #39	; 0x27
   17be8:	strbhi	r8, [r0, lr]
   17bec:	add	fp, fp, #3
   17bf0:	mov	lr, r5
   17bf4:	cmp	r7, fp
   17bf8:	movhi	r5, #92	; 0x5c
   17bfc:	strbhi	r5, [r0, fp]
   17c00:	add	r5, fp, #1
   17c04:	cmp	r7, r5
   17c08:	lsrhi	r8, r4, #6
   17c0c:	addhi	r8, r8, #48	; 0x30
   17c10:	strbhi	r8, [r0, r5]
   17c14:	add	r8, fp, #2
   17c18:	cmp	r7, r8
   17c1c:	lsrhi	r5, r4, #3
   17c20:	andhi	r5, r5, #7
   17c24:	addhi	r5, r5, #48	; 0x30
   17c28:	strbhi	r5, [r0, r8]
   17c2c:	add	fp, fp, #3
   17c30:	and	r4, r4, #7
   17c34:	add	r4, r4, #48	; 0x30
   17c38:	add	r5, r6, #1
   17c3c:	cmp	r1, r5
   17c40:	bls	17c5c <lchmod@@Base+0x17d4>
   17c44:	mov	r6, r5
   17c48:	mov	r5, r3
   17c4c:	b	17b88 <lchmod@@Base+0x1700>
   17c50:	str	lr, [sp, #44]	; 0x2c
   17c54:	ldr	r8, [sp, #56]	; 0x38
   17c58:	b	1752c <lchmod@@Base+0x10a4>
   17c5c:	str	lr, [sp, #44]	; 0x2c
   17c60:	ldr	r8, [sp, #56]	; 0x38
   17c64:	mov	r5, r3
   17c68:	b	1752c <lchmod@@Base+0x10a4>
   17c6c:	mov	r6, r8
   17c70:	b	17b88 <lchmod@@Base+0x1700>
   17c74:	mov	r5, #0
   17c78:	b	17648 <lchmod@@Base+0x11c0>
   17c7c:	mov	r8, r5
   17c80:	ldr	r5, [sp, #48]	; 0x30
   17c84:	mov	r4, #48	; 0x30
   17c88:	b	17648 <lchmod@@Base+0x11c0>
   17c8c:	ldr	r8, [sp, #32]
   17c90:	mov	r4, #48	; 0x30
   17c94:	b	17648 <lchmod@@Base+0x11c0>
   17c98:	ldr	r8, [sp, #32]
   17c9c:	mov	r4, #48	; 0x30
   17ca0:	b	17648 <lchmod@@Base+0x11c0>
   17ca4:	mov	r8, #0
   17ca8:	mov	r5, r8
   17cac:	b	17648 <lchmod@@Base+0x11c0>
   17cb0:	mov	r8, #0
   17cb4:	mov	r5, r8
   17cb8:	b	17648 <lchmod@@Base+0x11c0>
   17cbc:	mov	r8, #0
   17cc0:	mov	r5, r8
   17cc4:	b	17648 <lchmod@@Base+0x11c0>
   17cc8:	mov	r8, #0
   17ccc:	mov	r5, r8
   17cd0:	b	17648 <lchmod@@Base+0x11c0>
   17cd4:	ldr	r3, [sp, #52]	; 0x34
   17cd8:	ldrb	r8, [r3, r6]
   17cdc:	adds	r8, r8, #0
   17ce0:	movne	r8, #1
   17ce4:	b	17758 <lchmod@@Base+0x12d0>
   17ce8:	cmp	sl, #2
   17cec:	movne	r3, #0
   17cf0:	moveq	r3, #1
   17cf4:	ldr	r1, [sp, #32]
   17cf8:	mov	r2, r1
   17cfc:	and	r2, r2, r3
   17d00:	cmp	fp, #0
   17d04:	movne	r2, #0
   17d08:	andeq	r2, r2, #1
   17d0c:	cmp	r2, #0
   17d10:	bne	17ec0 <lchmod@@Base+0x1a38>
   17d14:	eor	r2, r1, #1
   17d18:	and	r3, r3, r2
   17d1c:	ldr	r1, [sp, #80]	; 0x50
   17d20:	tst	r1, r3
   17d24:	beq	17d9c <lchmod@@Base+0x1914>
   17d28:	ldr	r3, [sp, #40]	; 0x28
   17d2c:	cmp	r3, #0
   17d30:	bne	17d58 <lchmod@@Base+0x18d0>
   17d34:	ldr	r1, [sp, #76]	; 0x4c
   17d38:	clz	r3, r7
   17d3c:	lsr	r3, r3, #5
   17d40:	cmp	r1, #0
   17d44:	moveq	r3, #0
   17d48:	cmp	r3, #0
   17d4c:	beq	17d9c <lchmod@@Base+0x1914>
   17d50:	ldr	r7, [sp, #76]	; 0x4c
   17d54:	b	16dec <lchmod@@Base+0x964>
   17d58:	ldr	r3, [sp, #168]	; 0xa8
   17d5c:	str	r3, [sp, #16]
   17d60:	ldr	r3, [sp, #164]	; 0xa4
   17d64:	str	r3, [sp, #12]
   17d68:	ldr	r3, [sp, #160]	; 0xa0
   17d6c:	str	r3, [sp, #8]
   17d70:	ldr	r3, [sp, #156]	; 0x9c
   17d74:	str	r3, [sp, #4]
   17d78:	mov	r3, #5
   17d7c:	str	r3, [sp]
   17d80:	ldr	r3, [sp, #28]
   17d84:	ldr	r2, [sp, #52]	; 0x34
   17d88:	ldr	r1, [sp, #76]	; 0x4c
   17d8c:	ldr	r0, [sp, #36]	; 0x24
   17d90:	bl	16d8c <lchmod@@Base+0x904>
   17d94:	mov	fp, r0
   17d98:	b	17e9c <lchmod@@Base+0x1a14>
   17d9c:	mov	sl, r7
   17da0:	ldr	r3, [sp, #72]	; 0x48
   17da4:	cmp	r3, #0
   17da8:	moveq	r2, #0
   17dac:	andne	r2, r2, #1
   17db0:	cmp	r2, #0
   17db4:	beq	17de4 <lchmod@@Base+0x195c>
   17db8:	mov	r2, r3
   17dbc:	ldrb	r3, [r3]
   17dc0:	cmp	r3, #0
   17dc4:	beq	17de4 <lchmod@@Base+0x195c>
   17dc8:	ldr	r1, [sp, #36]	; 0x24
   17dcc:	cmp	sl, fp
   17dd0:	strbhi	r3, [r1, fp]
   17dd4:	add	fp, fp, #1
   17dd8:	ldrb	r3, [r2, #1]!
   17ddc:	cmp	r3, #0
   17de0:	bne	17dcc <lchmod@@Base+0x1944>
   17de4:	cmp	sl, fp
   17de8:	movhi	r3, #0
   17dec:	ldrhi	r2, [sp, #36]	; 0x24
   17df0:	strbhi	r3, [r2, fp]
   17df4:	b	17e9c <lchmod@@Base+0x1a14>
   17df8:	mov	r8, sl
   17dfc:	mov	sl, r7
   17e00:	ldr	r3, [sp, #32]
   17e04:	str	r3, [sp, #48]	; 0x30
   17e08:	b	17e44 <lchmod@@Base+0x19bc>
   17e0c:	mov	r8, sl
   17e10:	mov	sl, r7
   17e14:	b	17e44 <lchmod@@Base+0x19bc>
   17e18:	mov	r8, sl
   17e1c:	mov	sl, r7
   17e20:	b	17e44 <lchmod@@Base+0x19bc>
   17e24:	andeq	sl, r1, ip, lsr #23
   17e28:			; <UNDEFINED> instruction: 0x0001abbc
   17e2c:			; <UNDEFINED> instruction: 0x0001abb0
   17e30:	mov	r8, sl
   17e34:	mov	sl, r7
   17e38:	b	17e44 <lchmod@@Base+0x19bc>
   17e3c:	mov	r8, sl
   17e40:	mov	sl, r7
   17e44:	ldr	r3, [sp, #48]	; 0x30
   17e48:	cmp	r8, #2
   17e4c:	movne	r3, #0
   17e50:	andeq	r3, r3, #1
   17e54:	cmp	r3, #0
   17e58:	movne	r8, #4
   17e5c:	ldr	r3, [sp, #168]	; 0xa8
   17e60:	str	r3, [sp, #16]
   17e64:	ldr	r3, [sp, #164]	; 0xa4
   17e68:	str	r3, [sp, #12]
   17e6c:	mov	r3, #0
   17e70:	str	r3, [sp, #8]
   17e74:	ldr	r3, [sp, #156]	; 0x9c
   17e78:	bic	r3, r3, #2
   17e7c:	str	r3, [sp, #4]
   17e80:	str	r8, [sp]
   17e84:	ldr	r3, [sp, #28]
   17e88:	ldr	r2, [sp, #52]	; 0x34
   17e8c:	mov	r1, sl
   17e90:	ldr	r0, [sp, #36]	; 0x24
   17e94:	bl	16d8c <lchmod@@Base+0x904>
   17e98:	mov	fp, r0
   17e9c:	mov	r0, fp
   17ea0:	add	sp, sp, #116	; 0x74
   17ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ea8:	mov	r8, sl
   17eac:	mov	sl, r7
   17eb0:	b	17e44 <lchmod@@Base+0x19bc>
   17eb4:	mov	r8, sl
   17eb8:	mov	sl, r7
   17ebc:	b	17e44 <lchmod@@Base+0x19bc>
   17ec0:	mov	r8, sl
   17ec4:	mov	sl, r7
   17ec8:	b	17e44 <lchmod@@Base+0x19bc>
   17ecc:	mov	r8, sl
   17ed0:	mov	sl, r7
   17ed4:	b	17e5c <lchmod@@Base+0x19d4>
   17ed8:	mov	r3, #1
   17edc:	str	r3, [sp, #32]
   17ee0:	str	r3, [sp, #48]	; 0x30
   17ee4:	str	r3, [sp, #60]	; 0x3c
   17ee8:	ldr	r3, [pc, #-196]	; 17e2c <lchmod@@Base+0x19a4>
   17eec:	str	r3, [sp, #72]	; 0x48
   17ef0:	mov	fp, #0
   17ef4:	mov	sl, #5
   17ef8:	b	16e48 <lchmod@@Base+0x9c0>
   17efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f00:	sub	sp, sp, #52	; 0x34
   17f04:	mov	r5, r0
   17f08:	str	r1, [sp, #24]
   17f0c:	str	r2, [sp, #28]
   17f10:	mov	r4, r3
   17f14:	bl	11688 <__errno_location@plt>
   17f18:	str	r0, [sp, #32]
   17f1c:	ldr	r3, [r0]
   17f20:	str	r3, [sp, #36]	; 0x24
   17f24:	ldr	r3, [pc, #396]	; 180b8 <lchmod@@Base+0x1c30>
   17f28:	ldr	r6, [r3]
   17f2c:	cmn	r5, #-2147483647	; 0x80000001
   17f30:	movne	r3, #0
   17f34:	moveq	r3, #1
   17f38:	orrs	r3, r3, r5, lsr #31
   17f3c:	bne	1807c <lchmod@@Base+0x1bf4>
   17f40:	ldr	r3, [pc, #368]	; 180b8 <lchmod@@Base+0x1c30>
   17f44:	ldr	r2, [r3, #4]
   17f48:	cmp	r5, r2
   17f4c:	blt	17fb4 <lchmod@@Base+0x1b2c>
   17f50:	str	r2, [sp, #44]	; 0x2c
   17f54:	add	r3, r3, #8
   17f58:	cmp	r6, r3
   17f5c:	beq	18080 <lchmod@@Base+0x1bf8>
   17f60:	sub	r2, r5, r2
   17f64:	mov	r3, #8
   17f68:	str	r3, [sp]
   17f6c:	mvn	r3, #-2147483648	; 0x80000000
   17f70:	add	r2, r2, #1
   17f74:	add	r1, sp, #44	; 0x2c
   17f78:	mov	r0, r6
   17f7c:	bl	19050 <lchmod@@Base+0x2bc8>
   17f80:	mov	r6, r0
   17f84:	ldr	r3, [pc, #300]	; 180b8 <lchmod@@Base+0x1c30>
   17f88:	str	r0, [r3]
   17f8c:	ldr	r7, [pc, #292]	; 180b8 <lchmod@@Base+0x1c30>
   17f90:	ldr	r0, [r7, #4]
   17f94:	ldr	r2, [sp, #44]	; 0x2c
   17f98:	sub	r2, r2, r0
   17f9c:	lsl	r2, r2, #3
   17fa0:	mov	r1, #0
   17fa4:	add	r0, r6, r0, lsl #3
   17fa8:	bl	116ac <memset@plt>
   17fac:	ldr	r3, [sp, #44]	; 0x2c
   17fb0:	str	r3, [r7, #4]
   17fb4:	add	fp, r6, r5, lsl #3
   17fb8:	ldr	r8, [r6, r5, lsl #3]
   17fbc:	ldr	r7, [fp, #4]
   17fc0:	ldr	r9, [r4, #4]
   17fc4:	orr	r9, r9, #1
   17fc8:	add	sl, r4, #8
   17fcc:	ldr	r3, [r4, #44]	; 0x2c
   17fd0:	str	r3, [sp, #16]
   17fd4:	ldr	r3, [r4, #40]	; 0x28
   17fd8:	str	r3, [sp, #12]
   17fdc:	str	sl, [sp, #8]
   17fe0:	str	r9, [sp, #4]
   17fe4:	ldr	r3, [r4]
   17fe8:	str	r3, [sp]
   17fec:	ldr	r3, [sp, #28]
   17ff0:	ldr	r2, [sp, #24]
   17ff4:	mov	r1, r8
   17ff8:	mov	r0, r7
   17ffc:	bl	16d8c <lchmod@@Base+0x904>
   18000:	cmp	r8, r0
   18004:	bhi	18064 <lchmod@@Base+0x1bdc>
   18008:	add	r8, r0, #1
   1800c:	str	r8, [r6, r5, lsl #3]
   18010:	ldr	r3, [pc, #164]	; 180bc <lchmod@@Base+0x1c34>
   18014:	cmp	r7, r3
   18018:	beq	18024 <lchmod@@Base+0x1b9c>
   1801c:	mov	r0, r7
   18020:	bl	1315c <__assert_fail@plt+0x1930>
   18024:	mov	r0, r8
   18028:	bl	18ecc <lchmod@@Base+0x2a44>
   1802c:	mov	r7, r0
   18030:	str	r0, [fp, #4]
   18034:	ldr	r3, [r4, #44]	; 0x2c
   18038:	str	r3, [sp, #16]
   1803c:	ldr	r3, [r4, #40]	; 0x28
   18040:	str	r3, [sp, #12]
   18044:	str	sl, [sp, #8]
   18048:	str	r9, [sp, #4]
   1804c:	ldr	r3, [r4]
   18050:	str	r3, [sp]
   18054:	ldr	r3, [sp, #28]
   18058:	ldr	r2, [sp, #24]
   1805c:	mov	r1, r8
   18060:	bl	16d8c <lchmod@@Base+0x904>
   18064:	ldr	r3, [sp, #32]
   18068:	ldr	r2, [sp, #36]	; 0x24
   1806c:	str	r2, [r3]
   18070:	mov	r0, r7
   18074:	add	sp, sp, #52	; 0x34
   18078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1807c:	bl	117d8 <abort@plt>
   18080:	sub	r2, r5, r2
   18084:	mov	r3, #8
   18088:	str	r3, [sp]
   1808c:	mvn	r3, #-2147483648	; 0x80000000
   18090:	add	r2, r2, #1
   18094:	add	r1, sp, #44	; 0x2c
   18098:	mov	r0, #0
   1809c:	bl	19050 <lchmod@@Base+0x2bc8>
   180a0:	mov	r6, r0
   180a4:	ldr	r3, [pc, #12]	; 180b8 <lchmod@@Base+0x1c30>
   180a8:	str	r0, [r3], #8
   180ac:	ldm	r3, {r0, r1}
   180b0:	stm	r6, {r0, r1}
   180b4:	b	17f8c <lchmod@@Base+0x1b04>
   180b8:	andeq	ip, r2, r4, lsl #3
   180bc:	strdeq	ip, [r2], -r4
   180c0:	push	{r4, r5, r6, lr}
   180c4:	mov	r4, r0
   180c8:	bl	11688 <__errno_location@plt>
   180cc:	mov	r5, r0
   180d0:	ldr	r6, [r0]
   180d4:	cmp	r4, #0
   180d8:	ldr	r3, [pc, #20]	; 180f4 <lchmod@@Base+0x1c6c>
   180dc:	moveq	r4, r3
   180e0:	mov	r1, #48	; 0x30
   180e4:	mov	r0, r4
   180e8:	bl	193b8 <lchmod@@Base+0x2f30>
   180ec:	str	r6, [r5]
   180f0:	pop	{r4, r5, r6, pc}
   180f4:	strdeq	ip, [r2], -r4
   180f8:	subs	r3, r0, #0
   180fc:	ldr	r2, [pc, #8]	; 1810c <lchmod@@Base+0x1c84>
   18100:	moveq	r3, r2
   18104:	ldr	r0, [r3]
   18108:	bx	lr
   1810c:	strdeq	ip, [r2], -r4
   18110:	subs	r3, r0, #0
   18114:	ldr	r2, [pc, #8]	; 18124 <lchmod@@Base+0x1c9c>
   18118:	moveq	r3, r2
   1811c:	str	r1, [r3]
   18120:	bx	lr
   18124:	strdeq	ip, [r2], -r4
   18128:	push	{lr}		; (str lr, [sp, #-4]!)
   1812c:	subs	r3, r0, #0
   18130:	ldr	r0, [pc, #44]	; 18164 <lchmod@@Base+0x1cdc>
   18134:	moveq	r3, r0
   18138:	add	r3, r3, #8
   1813c:	lsr	lr, r1, #5
   18140:	and	r1, r1, #31
   18144:	ldr	ip, [r3, lr, lsl #2]
   18148:	lsr	r0, ip, r1
   1814c:	eor	r2, r2, r0
   18150:	and	r2, r2, #1
   18154:	eor	r1, ip, r2, lsl r1
   18158:	str	r1, [r3, lr, lsl #2]
   1815c:	and	r0, r0, #1
   18160:	pop	{pc}		; (ldr pc, [sp], #4)
   18164:	strdeq	ip, [r2], -r4
   18168:	subs	r3, r0, #0
   1816c:	ldr	r2, [pc, #12]	; 18180 <lchmod@@Base+0x1cf8>
   18170:	moveq	r3, r2
   18174:	ldr	r0, [r3, #4]
   18178:	str	r1, [r3, #4]
   1817c:	bx	lr
   18180:	strdeq	ip, [r2], -r4
   18184:	subs	r3, r0, #0
   18188:	ldr	r0, [pc, #40]	; 181b8 <lchmod@@Base+0x1d30>
   1818c:	moveq	r3, r0
   18190:	mov	r0, #10
   18194:	str	r0, [r3]
   18198:	cmp	r2, #0
   1819c:	cmpne	r1, #0
   181a0:	beq	181b0 <lchmod@@Base+0x1d28>
   181a4:	str	r1, [r3, #40]	; 0x28
   181a8:	str	r2, [r3, #44]	; 0x2c
   181ac:	bx	lr
   181b0:	push	{r4, lr}
   181b4:	bl	117d8 <abort@plt>
   181b8:	strdeq	ip, [r2], -r4
   181bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   181c0:	sub	sp, sp, #24
   181c4:	mov	r7, r0
   181c8:	mov	r8, r1
   181cc:	mov	r9, r2
   181d0:	mov	sl, r3
   181d4:	ldr	r4, [sp, #56]	; 0x38
   181d8:	cmp	r4, #0
   181dc:	ldr	r3, [pc, #84]	; 18238 <lchmod@@Base+0x1db0>
   181e0:	moveq	r4, r3
   181e4:	bl	11688 <__errno_location@plt>
   181e8:	mov	r5, r0
   181ec:	ldr	r6, [r0]
   181f0:	ldr	r3, [r4, #44]	; 0x2c
   181f4:	str	r3, [sp, #16]
   181f8:	ldr	r3, [r4, #40]	; 0x28
   181fc:	str	r3, [sp, #12]
   18200:	add	r3, r4, #8
   18204:	str	r3, [sp, #8]
   18208:	ldr	r3, [r4, #4]
   1820c:	str	r3, [sp, #4]
   18210:	ldr	r3, [r4]
   18214:	str	r3, [sp]
   18218:	mov	r3, sl
   1821c:	mov	r2, r9
   18220:	mov	r1, r8
   18224:	mov	r0, r7
   18228:	bl	16d8c <lchmod@@Base+0x904>
   1822c:	str	r6, [r5]
   18230:	add	sp, sp, #24
   18234:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18238:	strdeq	ip, [r2], -r4
   1823c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18240:	sub	sp, sp, #44	; 0x2c
   18244:	str	r0, [sp, #28]
   18248:	str	r1, [sp, #32]
   1824c:	mov	r6, r2
   18250:	subs	r4, r3, #0
   18254:	ldr	r3, [pc, #172]	; 18308 <lchmod@@Base+0x1e80>
   18258:	moveq	r4, r3
   1825c:	bl	11688 <__errno_location@plt>
   18260:	mov	r7, r0
   18264:	ldr	fp, [r0]
   18268:	ldr	r5, [r4, #4]
   1826c:	cmp	r6, #0
   18270:	orreq	r5, r5, #1
   18274:	add	r9, r4, #8
   18278:	ldr	r3, [r4, #44]	; 0x2c
   1827c:	str	r3, [sp, #16]
   18280:	ldr	r3, [r4, #40]	; 0x28
   18284:	str	r3, [sp, #12]
   18288:	str	r9, [sp, #8]
   1828c:	str	r5, [sp, #4]
   18290:	ldr	r3, [r4]
   18294:	str	r3, [sp]
   18298:	ldr	r3, [sp, #32]
   1829c:	ldr	r2, [sp, #28]
   182a0:	mov	r1, #0
   182a4:	mov	r0, r1
   182a8:	bl	16d8c <lchmod@@Base+0x904>
   182ac:	mov	sl, r0
   182b0:	add	r8, r0, #1
   182b4:	mov	r0, r8
   182b8:	bl	18ecc <lchmod@@Base+0x2a44>
   182bc:	str	r0, [sp, #36]	; 0x24
   182c0:	ldr	r3, [r4, #44]	; 0x2c
   182c4:	str	r3, [sp, #16]
   182c8:	ldr	r3, [r4, #40]	; 0x28
   182cc:	str	r3, [sp, #12]
   182d0:	str	r9, [sp, #8]
   182d4:	str	r5, [sp, #4]
   182d8:	ldr	r3, [r4]
   182dc:	str	r3, [sp]
   182e0:	ldr	r3, [sp, #32]
   182e4:	ldr	r2, [sp, #28]
   182e8:	mov	r1, r8
   182ec:	bl	16d8c <lchmod@@Base+0x904>
   182f0:	str	fp, [r7]
   182f4:	cmp	r6, #0
   182f8:	strne	sl, [r6]
   182fc:	ldr	r0, [sp, #36]	; 0x24
   18300:	add	sp, sp, #44	; 0x2c
   18304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18308:	strdeq	ip, [r2], -r4
   1830c:	push	{r4, lr}
   18310:	mov	r3, r2
   18314:	mov	r2, #0
   18318:	bl	1823c <lchmod@@Base+0x1db4>
   1831c:	pop	{r4, pc}
   18320:	push	{r4, r5, r6, r7, r8, lr}
   18324:	ldr	r3, [pc, #140]	; 183b8 <lchmod@@Base+0x1f30>
   18328:	ldr	r7, [r3]
   1832c:	ldr	r3, [r3, #4]
   18330:	cmp	r3, #1
   18334:	ble	18360 <lchmod@@Base+0x1ed8>
   18338:	mov	r5, r7
   1833c:	mov	r4, #1
   18340:	ldr	r6, [pc, #112]	; 183b8 <lchmod@@Base+0x1f30>
   18344:	ldr	r0, [r5, #12]
   18348:	bl	1315c <__assert_fail@plt+0x1930>
   1834c:	add	r4, r4, #1
   18350:	add	r5, r5, #8
   18354:	ldr	r3, [r6, #4]
   18358:	cmp	r3, r4
   1835c:	bgt	18344 <lchmod@@Base+0x1ebc>
   18360:	ldr	r0, [r7, #4]
   18364:	ldr	r3, [pc, #80]	; 183bc <lchmod@@Base+0x1f34>
   18368:	cmp	r0, r3
   1836c:	beq	18388 <lchmod@@Base+0x1f00>
   18370:	bl	1315c <__assert_fail@plt+0x1930>
   18374:	ldr	r3, [pc, #60]	; 183b8 <lchmod@@Base+0x1f30>
   18378:	mov	r2, #256	; 0x100
   1837c:	str	r2, [r3, #8]
   18380:	ldr	r2, [pc, #52]	; 183bc <lchmod@@Base+0x1f34>
   18384:	str	r2, [r3, #12]
   18388:	ldr	r3, [pc, #48]	; 183c0 <lchmod@@Base+0x1f38>
   1838c:	cmp	r7, r3
   18390:	beq	183a8 <lchmod@@Base+0x1f20>
   18394:	mov	r0, r7
   18398:	bl	1315c <__assert_fail@plt+0x1930>
   1839c:	ldr	r3, [pc, #20]	; 183b8 <lchmod@@Base+0x1f30>
   183a0:	add	r2, r3, #8
   183a4:	str	r2, [r3]
   183a8:	mov	r2, #1
   183ac:	ldr	r3, [pc, #4]	; 183b8 <lchmod@@Base+0x1f30>
   183b0:	str	r2, [r3, #4]
   183b4:	pop	{r4, r5, r6, r7, r8, pc}
   183b8:	andeq	ip, r2, r4, lsl #3
   183bc:	strdeq	ip, [r2], -r4
   183c0:	andeq	ip, r2, ip, lsl #3
   183c4:	push	{r4, lr}
   183c8:	ldr	r3, [pc, #8]	; 183d8 <lchmod@@Base+0x1f50>
   183cc:	mvn	r2, #0
   183d0:	bl	17efc <lchmod@@Base+0x1a74>
   183d4:	pop	{r4, pc}
   183d8:	strdeq	ip, [r2], -r4
   183dc:	push	{r4, lr}
   183e0:	ldr	r3, [pc, #4]	; 183ec <lchmod@@Base+0x1f64>
   183e4:	bl	17efc <lchmod@@Base+0x1a74>
   183e8:	pop	{r4, pc}
   183ec:	strdeq	ip, [r2], -r4
   183f0:	push	{r4, lr}
   183f4:	mov	r1, r0
   183f8:	mov	r0, #0
   183fc:	bl	183c4 <lchmod@@Base+0x1f3c>
   18400:	pop	{r4, pc}
   18404:	push	{r4, lr}
   18408:	mov	r2, r1
   1840c:	mov	r1, r0
   18410:	mov	r0, #0
   18414:	bl	183dc <lchmod@@Base+0x1f54>
   18418:	pop	{r4, pc}
   1841c:	push	{r4, r5, lr}
   18420:	sub	sp, sp, #52	; 0x34
   18424:	mov	r4, r0
   18428:	mov	r5, r2
   1842c:	mov	r0, sp
   18430:	bl	16c24 <lchmod@@Base+0x79c>
   18434:	mov	r3, sp
   18438:	mvn	r2, #0
   1843c:	mov	r1, r5
   18440:	mov	r0, r4
   18444:	bl	17efc <lchmod@@Base+0x1a74>
   18448:	add	sp, sp, #52	; 0x34
   1844c:	pop	{r4, r5, pc}
   18450:	push	{r4, r5, r6, lr}
   18454:	sub	sp, sp, #48	; 0x30
   18458:	mov	r4, r0
   1845c:	mov	r5, r2
   18460:	mov	r6, r3
   18464:	mov	r0, sp
   18468:	bl	16c24 <lchmod@@Base+0x79c>
   1846c:	mov	r3, sp
   18470:	mov	r2, r6
   18474:	mov	r1, r5
   18478:	mov	r0, r4
   1847c:	bl	17efc <lchmod@@Base+0x1a74>
   18480:	add	sp, sp, #48	; 0x30
   18484:	pop	{r4, r5, r6, pc}
   18488:	push	{r4, lr}
   1848c:	mov	r2, r1
   18490:	mov	r1, r0
   18494:	mov	r0, #0
   18498:	bl	1841c <lchmod@@Base+0x1f94>
   1849c:	pop	{r4, pc}
   184a0:	push	{r4, lr}
   184a4:	mov	r3, r2
   184a8:	mov	r2, r1
   184ac:	mov	r1, r0
   184b0:	mov	r0, #0
   184b4:	bl	18450 <lchmod@@Base+0x1fc8>
   184b8:	pop	{r4, pc}
   184bc:	push	{r4, r5, r6, lr}
   184c0:	sub	sp, sp, #48	; 0x30
   184c4:	mov	r4, r0
   184c8:	mov	r5, r1
   184cc:	mov	r6, r2
   184d0:	mov	ip, sp
   184d4:	ldr	lr, [pc, #64]	; 1851c <lchmod@@Base+0x2094>
   184d8:	ldm	lr!, {r0, r1, r2, r3}
   184dc:	stmia	ip!, {r0, r1, r2, r3}
   184e0:	ldm	lr!, {r0, r1, r2, r3}
   184e4:	stmia	ip!, {r0, r1, r2, r3}
   184e8:	ldm	lr, {r0, r1, r2, r3}
   184ec:	stm	ip, {r0, r1, r2, r3}
   184f0:	mov	r2, #1
   184f4:	mov	r1, r6
   184f8:	mov	r0, sp
   184fc:	bl	18128 <lchmod@@Base+0x1ca0>
   18500:	mov	r3, sp
   18504:	mov	r2, r5
   18508:	mov	r1, r4
   1850c:	mov	r0, #0
   18510:	bl	17efc <lchmod@@Base+0x1a74>
   18514:	add	sp, sp, #48	; 0x30
   18518:	pop	{r4, r5, r6, pc}
   1851c:	strdeq	ip, [r2], -r4
   18520:	push	{r4, lr}
   18524:	mov	r2, r1
   18528:	mvn	r1, #0
   1852c:	bl	184bc <lchmod@@Base+0x2034>
   18530:	pop	{r4, pc}
   18534:	push	{r4, lr}
   18538:	mov	r1, #58	; 0x3a
   1853c:	bl	18520 <lchmod@@Base+0x2098>
   18540:	pop	{r4, pc}
   18544:	push	{r4, lr}
   18548:	mov	r2, #58	; 0x3a
   1854c:	bl	184bc <lchmod@@Base+0x2034>
   18550:	pop	{r4, pc}
   18554:	push	{r4, r5, lr}
   18558:	sub	sp, sp, #100	; 0x64
   1855c:	mov	r4, r0
   18560:	mov	r5, r2
   18564:	mov	r0, sp
   18568:	bl	16c24 <lchmod@@Base+0x79c>
   1856c:	add	lr, sp, #48	; 0x30
   18570:	mov	ip, sp
   18574:	ldm	ip!, {r0, r1, r2, r3}
   18578:	stmia	lr!, {r0, r1, r2, r3}
   1857c:	ldm	ip!, {r0, r1, r2, r3}
   18580:	stmia	lr!, {r0, r1, r2, r3}
   18584:	ldm	ip, {r0, r1, r2, r3}
   18588:	stm	lr, {r0, r1, r2, r3}
   1858c:	mov	r2, #1
   18590:	mov	r1, #58	; 0x3a
   18594:	add	r0, sp, #48	; 0x30
   18598:	bl	18128 <lchmod@@Base+0x1ca0>
   1859c:	add	r3, sp, #48	; 0x30
   185a0:	mvn	r2, #0
   185a4:	mov	r1, r5
   185a8:	mov	r0, r4
   185ac:	bl	17efc <lchmod@@Base+0x1a74>
   185b0:	add	sp, sp, #100	; 0x64
   185b4:	pop	{r4, r5, pc}
   185b8:	push	{r4, r5, r6, r7, lr}
   185bc:	sub	sp, sp, #52	; 0x34
   185c0:	mov	r4, r0
   185c4:	mov	r6, r1
   185c8:	mov	r7, r2
   185cc:	mov	r5, r3
   185d0:	mov	ip, sp
   185d4:	ldr	lr, [pc, #64]	; 1861c <lchmod@@Base+0x2194>
   185d8:	ldm	lr!, {r0, r1, r2, r3}
   185dc:	stmia	ip!, {r0, r1, r2, r3}
   185e0:	ldm	lr!, {r0, r1, r2, r3}
   185e4:	stmia	ip!, {r0, r1, r2, r3}
   185e8:	ldm	lr, {r0, r1, r2, r3}
   185ec:	stm	ip, {r0, r1, r2, r3}
   185f0:	mov	r2, r7
   185f4:	mov	r1, r6
   185f8:	mov	r0, sp
   185fc:	bl	18184 <lchmod@@Base+0x1cfc>
   18600:	mov	r3, sp
   18604:	ldr	r2, [sp, #72]	; 0x48
   18608:	mov	r1, r5
   1860c:	mov	r0, r4
   18610:	bl	17efc <lchmod@@Base+0x1a74>
   18614:	add	sp, sp, #52	; 0x34
   18618:	pop	{r4, r5, r6, r7, pc}
   1861c:	strdeq	ip, [r2], -r4
   18620:	push	{lr}		; (str lr, [sp, #-4]!)
   18624:	sub	sp, sp, #12
   18628:	mvn	ip, #0
   1862c:	str	ip, [sp]
   18630:	bl	185b8 <lchmod@@Base+0x2130>
   18634:	add	sp, sp, #12
   18638:	pop	{pc}		; (ldr pc, [sp], #4)
   1863c:	push	{r4, lr}
   18640:	mov	r3, r2
   18644:	mov	r2, r1
   18648:	mov	r1, r0
   1864c:	mov	r0, #0
   18650:	bl	18620 <lchmod@@Base+0x2198>
   18654:	pop	{r4, pc}
   18658:	push	{lr}		; (str lr, [sp, #-4]!)
   1865c:	sub	sp, sp, #12
   18660:	str	r3, [sp]
   18664:	mov	r3, r2
   18668:	mov	r2, r1
   1866c:	mov	r1, r0
   18670:	mov	r0, #0
   18674:	bl	185b8 <lchmod@@Base+0x2130>
   18678:	add	sp, sp, #12
   1867c:	pop	{pc}		; (ldr pc, [sp], #4)
   18680:	push	{r4, lr}
   18684:	ldr	r3, [pc, #4]	; 18690 <lchmod@@Base+0x2208>
   18688:	bl	17efc <lchmod@@Base+0x1a74>
   1868c:	pop	{r4, pc}
   18690:	muleq	r2, r4, r1
   18694:	push	{r4, lr}
   18698:	mov	r2, r1
   1869c:	mov	r1, r0
   186a0:	mov	r0, #0
   186a4:	bl	18680 <lchmod@@Base+0x21f8>
   186a8:	pop	{r4, pc}
   186ac:	push	{r4, lr}
   186b0:	mvn	r2, #0
   186b4:	bl	18680 <lchmod@@Base+0x21f8>
   186b8:	pop	{r4, pc}
   186bc:	push	{r4, lr}
   186c0:	mov	r1, r0
   186c4:	mov	r0, #0
   186c8:	bl	186ac <lchmod@@Base+0x2224>
   186cc:	pop	{r4, pc}
   186d0:	push	{r4, r5, r6, lr}
   186d4:	mov	r5, r1
   186d8:	ldr	r4, [r0], #8
   186dc:	cmp	r4, r0
   186e0:	beq	186f8 <lchmod@@Base+0x2270>
   186e4:	mov	r0, r4
   186e8:	bl	19588 <lchmod@@Base+0x3100>
   186ec:	cmp	r0, #0
   186f0:	moveq	r0, r4
   186f4:	pop	{r4, r5, r6, pc}
   186f8:	mov	r0, r1
   186fc:	bl	19558 <lchmod@@Base+0x30d0>
   18700:	cmp	r0, #0
   18704:	popeq	{r4, r5, r6, pc}
   18708:	mov	r2, r5
   1870c:	mov	r1, r4
   18710:	bl	114b4 <memcpy@plt>
   18714:	pop	{r4, r5, r6, pc}
   18718:	push	{r4, r5, r6, lr}
   1871c:	mov	r4, r0
   18720:	ldr	r5, [r0, #4]
   18724:	lsl	r5, r5, #1
   18728:	mov	r6, r0
   1872c:	ldr	r0, [r6], #8
   18730:	cmp	r0, r6
   18734:	beq	1873c <lchmod@@Base+0x22b4>
   18738:	bl	1315c <__assert_fail@plt+0x1930>
   1873c:	ldr	r3, [r4, #4]
   18740:	cmp	r5, r3
   18744:	bcc	18768 <lchmod@@Base+0x22e0>
   18748:	mov	r0, r5
   1874c:	bl	19558 <lchmod@@Base+0x30d0>
   18750:	cmp	r0, #0
   18754:	beq	18774 <lchmod@@Base+0x22ec>
   18758:	str	r0, [r4]
   1875c:	str	r5, [r4, #4]
   18760:	mov	r0, #1
   18764:	pop	{r4, r5, r6, pc}
   18768:	bl	11688 <__errno_location@plt>
   1876c:	mov	r3, #12
   18770:	str	r3, [r0]
   18774:	str	r6, [r4]
   18778:	mov	r3, #1024	; 0x400
   1877c:	str	r3, [r4, #4]
   18780:	mov	r0, #0
   18784:	pop	{r4, r5, r6, pc}
   18788:	push	{r4, r5, r6, r7, r8, lr}
   1878c:	mov	r4, r0
   18790:	ldr	r3, [r0, #4]
   18794:	lsl	r6, r3, #1
   18798:	mov	r5, r0
   1879c:	ldr	r0, [r5], #8
   187a0:	cmp	r0, r5
   187a4:	beq	187d0 <lchmod@@Base+0x2348>
   187a8:	cmp	r3, r6
   187ac:	bhi	187f4 <lchmod@@Base+0x236c>
   187b0:	mov	r1, r6
   187b4:	bl	19588 <lchmod@@Base+0x3100>
   187b8:	subs	r7, r0, #0
   187bc:	beq	18800 <lchmod@@Base+0x2378>
   187c0:	str	r7, [r4]
   187c4:	str	r6, [r4, #4]
   187c8:	mov	r0, #1
   187cc:	pop	{r4, r5, r6, r7, r8, pc}
   187d0:	mov	r0, r6
   187d4:	bl	19558 <lchmod@@Base+0x30d0>
   187d8:	subs	r7, r0, #0
   187dc:	beq	1881c <lchmod@@Base+0x2394>
   187e0:	ldr	r2, [r4, #4]
   187e4:	mov	r1, r5
   187e8:	mov	r0, r7
   187ec:	bl	114b4 <memcpy@plt>
   187f0:	b	187c0 <lchmod@@Base+0x2338>
   187f4:	bl	11688 <__errno_location@plt>
   187f8:	mov	r3, #12
   187fc:	str	r3, [r0]
   18800:	ldr	r0, [r4]
   18804:	bl	1315c <__assert_fail@plt+0x1930>
   18808:	str	r5, [r4]
   1880c:	mov	r3, #1024	; 0x400
   18810:	str	r3, [r4, #4]
   18814:	mov	r0, #0
   18818:	pop	{r4, r5, r6, r7, r8, pc}
   1881c:	mov	r0, #0
   18820:	pop	{r4, r5, r6, r7, r8, pc}
   18824:	push	{r4, r5, r6, lr}
   18828:	subs	r4, r0, #0
   1882c:	beq	18844 <lchmod@@Base+0x23bc>
   18830:	mov	r5, r1
   18834:	cmp	r4, #10
   18838:	beq	18858 <lchmod@@Base+0x23d0>
   1883c:	mov	r0, r4
   18840:	pop	{r4, r5, r6, pc}
   18844:	bl	11688 <__errno_location@plt>
   18848:	mov	r3, #95	; 0x5f
   1884c:	str	r3, [r0]
   18850:	mvn	r4, #0
   18854:	b	1883c <lchmod@@Base+0x23b4>
   18858:	ldr	r6, [r1]
   1885c:	ldr	r1, [pc, #48]	; 18894 <lchmod@@Base+0x240c>
   18860:	mov	r0, r6
   18864:	bl	11454 <strcmp@plt>
   18868:	cmp	r0, #0
   1886c:	bne	1883c <lchmod@@Base+0x23b4>
   18870:	mov	r0, r6
   18874:	bl	11778 <freecon@plt>
   18878:	mov	r3, #0
   1887c:	str	r3, [r5]
   18880:	bl	11688 <__errno_location@plt>
   18884:	mov	r3, #61	; 0x3d
   18888:	str	r3, [r0]
   1888c:	mvn	r4, #0
   18890:	b	1883c <lchmod@@Base+0x23b4>
   18894:	andeq	sl, r1, r4, lsr #24
   18898:	push	{r4, lr}
   1889c:	mov	r4, r1
   188a0:	bl	1164c <getfilecon@plt>
   188a4:	mov	r1, r4
   188a8:	bl	18824 <lchmod@@Base+0x239c>
   188ac:	pop	{r4, pc}
   188b0:	push	{r4, lr}
   188b4:	mov	r4, r1
   188b8:	bl	115c8 <lgetfilecon@plt>
   188bc:	mov	r1, r4
   188c0:	bl	18824 <lchmod@@Base+0x239c>
   188c4:	pop	{r4, pc}
   188c8:	push	{r4, lr}
   188cc:	mov	r4, r1
   188d0:	bl	11514 <fgetfilecon@plt>
   188d4:	mov	r1, r4
   188d8:	bl	18824 <lchmod@@Base+0x239c>
   188dc:	pop	{r4, pc}
   188e0:	push	{r4, r5, r6, r7, r8, lr}
   188e4:	mov	r4, r0
   188e8:	cmp	r0, #2
   188ec:	bls	188f8 <lchmod@@Base+0x2470>
   188f0:	mov	r0, r4
   188f4:	pop	{r4, r5, r6, r7, r8, pc}
   188f8:	bl	19d54 <lchmod@@Base+0x38cc>
   188fc:	mov	r6, r0
   18900:	bl	11688 <__errno_location@plt>
   18904:	mov	r5, r0
   18908:	ldr	r7, [r0]
   1890c:	mov	r0, r4
   18910:	bl	117e4 <close@plt>
   18914:	str	r7, [r5]
   18918:	mov	r4, r6
   1891c:	b	188f0 <lchmod@@Base+0x2468>
   18920:	push	{r4, r5, r6, lr}
   18924:	sub	sp, sp, #32
   18928:	mov	r4, r0
   1892c:	ldr	r5, [sp, #48]	; 0x30
   18930:	ldr	r6, [sp, #52]	; 0x34
   18934:	cmp	r1, #0
   18938:	beq	189f0 <lchmod@@Base+0x2568>
   1893c:	str	r3, [sp, #4]
   18940:	str	r2, [sp]
   18944:	mov	r3, r1
   18948:	ldr	r2, [pc, #940]	; 18cfc <lchmod@@Base+0x2874>
   1894c:	mov	r1, #1
   18950:	bl	116d0 <__fprintf_chk@plt>
   18954:	mov	r2, #5
   18958:	ldr	r1, [pc, #928]	; 18d00 <lchmod@@Base+0x2878>
   1895c:	mov	r0, #0
   18960:	bl	114f0 <dcgettext@plt>
   18964:	ldr	r3, [pc, #920]	; 18d04 <lchmod@@Base+0x287c>
   18968:	str	r3, [sp]
   1896c:	mov	r3, r0
   18970:	ldr	r2, [pc, #912]	; 18d08 <lchmod@@Base+0x2880>
   18974:	mov	r1, #1
   18978:	mov	r0, r4
   1897c:	bl	116d0 <__fprintf_chk@plt>
   18980:	mov	r1, r4
   18984:	mov	r0, #10
   18988:	bl	114e4 <fputc_unlocked@plt>
   1898c:	mov	r2, #5
   18990:	ldr	r1, [pc, #884]	; 18d0c <lchmod@@Base+0x2884>
   18994:	mov	r0, #0
   18998:	bl	114f0 <dcgettext@plt>
   1899c:	ldr	r3, [pc, #876]	; 18d10 <lchmod@@Base+0x2888>
   189a0:	mov	r2, r0
   189a4:	mov	r1, #1
   189a8:	mov	r0, r4
   189ac:	bl	116d0 <__fprintf_chk@plt>
   189b0:	mov	r1, r4
   189b4:	mov	r0, #10
   189b8:	bl	114e4 <fputc_unlocked@plt>
   189bc:	cmp	r6, #9
   189c0:	ldrls	pc, [pc, r6, lsl #2]
   189c4:	b	18c94 <lchmod@@Base+0x280c>
   189c8:	andeq	r8, r1, ip, lsr #20
   189cc:	andeq	r8, r1, r8, lsl #20
   189d0:	andeq	r8, r1, r4, lsr sl
   189d4:	andeq	r8, r1, r4, ror #20
   189d8:	muleq	r1, ip, sl
   189dc:	ldrdeq	r8, [r1], -ip
   189e0:	andeq	r8, r1, r4, lsr #22
   189e4:	andeq	r8, r1, r4, ror fp
   189e8:	andeq	r8, r1, ip, asr #23
   189ec:	andeq	r8, r1, ip, lsr #24
   189f0:	str	r3, [sp]
   189f4:	mov	r3, r2
   189f8:	ldr	r2, [pc, #788]	; 18d14 <lchmod@@Base+0x288c>
   189fc:	mov	r1, #1
   18a00:	bl	116d0 <__fprintf_chk@plt>
   18a04:	b	18954 <lchmod@@Base+0x24cc>
   18a08:	mov	r2, #5
   18a0c:	ldr	r1, [pc, #772]	; 18d18 <lchmod@@Base+0x2890>
   18a10:	mov	r0, #0
   18a14:	bl	114f0 <dcgettext@plt>
   18a18:	ldr	r3, [r5]
   18a1c:	mov	r2, r0
   18a20:	mov	r1, #1
   18a24:	mov	r0, r4
   18a28:	bl	116d0 <__fprintf_chk@plt>
   18a2c:	add	sp, sp, #32
   18a30:	pop	{r4, r5, r6, pc}
   18a34:	mov	r2, #5
   18a38:	ldr	r1, [pc, #732]	; 18d1c <lchmod@@Base+0x2894>
   18a3c:	mov	r0, #0
   18a40:	bl	114f0 <dcgettext@plt>
   18a44:	ldr	r3, [r5]
   18a48:	ldr	r2, [r5, #4]
   18a4c:	str	r2, [sp]
   18a50:	mov	r2, r0
   18a54:	mov	r1, #1
   18a58:	mov	r0, r4
   18a5c:	bl	116d0 <__fprintf_chk@plt>
   18a60:	b	18a2c <lchmod@@Base+0x25a4>
   18a64:	mov	r2, #5
   18a68:	ldr	r1, [pc, #688]	; 18d20 <lchmod@@Base+0x2898>
   18a6c:	mov	r0, #0
   18a70:	bl	114f0 <dcgettext@plt>
   18a74:	ldr	r3, [r5]
   18a78:	ldr	r2, [r5, #8]
   18a7c:	str	r2, [sp, #4]
   18a80:	ldr	r2, [r5, #4]
   18a84:	str	r2, [sp]
   18a88:	mov	r2, r0
   18a8c:	mov	r1, #1
   18a90:	mov	r0, r4
   18a94:	bl	116d0 <__fprintf_chk@plt>
   18a98:	b	18a2c <lchmod@@Base+0x25a4>
   18a9c:	mov	r2, #5
   18aa0:	ldr	r1, [pc, #636]	; 18d24 <lchmod@@Base+0x289c>
   18aa4:	mov	r0, #0
   18aa8:	bl	114f0 <dcgettext@plt>
   18aac:	ldr	r3, [r5]
   18ab0:	ldr	r2, [r5, #12]
   18ab4:	str	r2, [sp, #8]
   18ab8:	ldr	r2, [r5, #8]
   18abc:	str	r2, [sp, #4]
   18ac0:	ldr	r2, [r5, #4]
   18ac4:	str	r2, [sp]
   18ac8:	mov	r2, r0
   18acc:	mov	r1, #1
   18ad0:	mov	r0, r4
   18ad4:	bl	116d0 <__fprintf_chk@plt>
   18ad8:	b	18a2c <lchmod@@Base+0x25a4>
   18adc:	mov	r2, #5
   18ae0:	ldr	r1, [pc, #576]	; 18d28 <lchmod@@Base+0x28a0>
   18ae4:	mov	r0, #0
   18ae8:	bl	114f0 <dcgettext@plt>
   18aec:	ldr	r3, [r5]
   18af0:	ldr	r2, [r5, #16]
   18af4:	str	r2, [sp, #12]
   18af8:	ldr	r2, [r5, #12]
   18afc:	str	r2, [sp, #8]
   18b00:	ldr	r2, [r5, #8]
   18b04:	str	r2, [sp, #4]
   18b08:	ldr	r2, [r5, #4]
   18b0c:	str	r2, [sp]
   18b10:	mov	r2, r0
   18b14:	mov	r1, #1
   18b18:	mov	r0, r4
   18b1c:	bl	116d0 <__fprintf_chk@plt>
   18b20:	b	18a2c <lchmod@@Base+0x25a4>
   18b24:	mov	r2, #5
   18b28:	ldr	r1, [pc, #508]	; 18d2c <lchmod@@Base+0x28a4>
   18b2c:	mov	r0, #0
   18b30:	bl	114f0 <dcgettext@plt>
   18b34:	ldr	r3, [r5]
   18b38:	ldr	r2, [r5, #20]
   18b3c:	str	r2, [sp, #16]
   18b40:	ldr	r2, [r5, #16]
   18b44:	str	r2, [sp, #12]
   18b48:	ldr	r2, [r5, #12]
   18b4c:	str	r2, [sp, #8]
   18b50:	ldr	r2, [r5, #8]
   18b54:	str	r2, [sp, #4]
   18b58:	ldr	r2, [r5, #4]
   18b5c:	str	r2, [sp]
   18b60:	mov	r2, r0
   18b64:	mov	r1, #1
   18b68:	mov	r0, r4
   18b6c:	bl	116d0 <__fprintf_chk@plt>
   18b70:	b	18a2c <lchmod@@Base+0x25a4>
   18b74:	mov	r2, #5
   18b78:	ldr	r1, [pc, #432]	; 18d30 <lchmod@@Base+0x28a8>
   18b7c:	mov	r0, #0
   18b80:	bl	114f0 <dcgettext@plt>
   18b84:	ldr	r3, [r5]
   18b88:	ldr	r2, [r5, #24]
   18b8c:	str	r2, [sp, #20]
   18b90:	ldr	r2, [r5, #20]
   18b94:	str	r2, [sp, #16]
   18b98:	ldr	r2, [r5, #16]
   18b9c:	str	r2, [sp, #12]
   18ba0:	ldr	r2, [r5, #12]
   18ba4:	str	r2, [sp, #8]
   18ba8:	ldr	r2, [r5, #8]
   18bac:	str	r2, [sp, #4]
   18bb0:	ldr	r2, [r5, #4]
   18bb4:	str	r2, [sp]
   18bb8:	mov	r2, r0
   18bbc:	mov	r1, #1
   18bc0:	mov	r0, r4
   18bc4:	bl	116d0 <__fprintf_chk@plt>
   18bc8:	b	18a2c <lchmod@@Base+0x25a4>
   18bcc:	mov	r2, #5
   18bd0:	ldr	r1, [pc, #348]	; 18d34 <lchmod@@Base+0x28ac>
   18bd4:	mov	r0, #0
   18bd8:	bl	114f0 <dcgettext@plt>
   18bdc:	ldr	r3, [r5]
   18be0:	ldr	r2, [r5, #28]
   18be4:	str	r2, [sp, #24]
   18be8:	ldr	r2, [r5, #24]
   18bec:	str	r2, [sp, #20]
   18bf0:	ldr	r2, [r5, #20]
   18bf4:	str	r2, [sp, #16]
   18bf8:	ldr	r2, [r5, #16]
   18bfc:	str	r2, [sp, #12]
   18c00:	ldr	r2, [r5, #12]
   18c04:	str	r2, [sp, #8]
   18c08:	ldr	r2, [r5, #8]
   18c0c:	str	r2, [sp, #4]
   18c10:	ldr	r2, [r5, #4]
   18c14:	str	r2, [sp]
   18c18:	mov	r2, r0
   18c1c:	mov	r1, #1
   18c20:	mov	r0, r4
   18c24:	bl	116d0 <__fprintf_chk@plt>
   18c28:	b	18a2c <lchmod@@Base+0x25a4>
   18c2c:	mov	r2, #5
   18c30:	ldr	r1, [pc, #256]	; 18d38 <lchmod@@Base+0x28b0>
   18c34:	mov	r0, #0
   18c38:	bl	114f0 <dcgettext@plt>
   18c3c:	ldr	r3, [r5]
   18c40:	ldr	r2, [r5, #32]
   18c44:	str	r2, [sp, #28]
   18c48:	ldr	r2, [r5, #28]
   18c4c:	str	r2, [sp, #24]
   18c50:	ldr	r2, [r5, #24]
   18c54:	str	r2, [sp, #20]
   18c58:	ldr	r2, [r5, #20]
   18c5c:	str	r2, [sp, #16]
   18c60:	ldr	r2, [r5, #16]
   18c64:	str	r2, [sp, #12]
   18c68:	ldr	r2, [r5, #12]
   18c6c:	str	r2, [sp, #8]
   18c70:	ldr	r2, [r5, #8]
   18c74:	str	r2, [sp, #4]
   18c78:	ldr	r2, [r5, #4]
   18c7c:	str	r2, [sp]
   18c80:	mov	r2, r0
   18c84:	mov	r1, #1
   18c88:	mov	r0, r4
   18c8c:	bl	116d0 <__fprintf_chk@plt>
   18c90:	b	18a2c <lchmod@@Base+0x25a4>
   18c94:	mov	r2, #5
   18c98:	ldr	r1, [pc, #156]	; 18d3c <lchmod@@Base+0x28b4>
   18c9c:	mov	r0, #0
   18ca0:	bl	114f0 <dcgettext@plt>
   18ca4:	ldr	r3, [r5]
   18ca8:	ldr	r2, [r5, #32]
   18cac:	str	r2, [sp, #28]
   18cb0:	ldr	r2, [r5, #28]
   18cb4:	str	r2, [sp, #24]
   18cb8:	ldr	r2, [r5, #24]
   18cbc:	str	r2, [sp, #20]
   18cc0:	ldr	r2, [r5, #20]
   18cc4:	str	r2, [sp, #16]
   18cc8:	ldr	r2, [r5, #16]
   18ccc:	str	r2, [sp, #12]
   18cd0:	ldr	r2, [r5, #12]
   18cd4:	str	r2, [sp, #8]
   18cd8:	ldr	r2, [r5, #8]
   18cdc:	str	r2, [sp, #4]
   18ce0:	ldr	r2, [r5, #4]
   18ce4:	str	r2, [sp]
   18ce8:	mov	r2, r0
   18cec:	mov	r1, #1
   18cf0:	mov	r0, r4
   18cf4:	bl	116d0 <__fprintf_chk@plt>
   18cf8:	b	18a2c <lchmod@@Base+0x25a4>
   18cfc:	andeq	sl, r1, r0, lsr ip
   18d00:	andeq	sl, r1, r4, asr #24
   18d04:	andeq	r0, r0, r6, ror #15
   18d08:	andeq	sl, r1, ip, lsl pc
   18d0c:	andeq	sl, r1, r8, asr #24
   18d10:	strdeq	sl, [r1], -r4
   18d14:	andeq	sl, r1, ip, lsr ip
   18d18:	andeq	sl, r1, r8, lsl sp
   18d1c:	andeq	sl, r1, r8, lsr #26
   18d20:	andeq	sl, r1, r0, asr #26
   18d24:	andeq	sl, r1, ip, asr sp
   18d28:	andeq	sl, r1, ip, ror sp
   18d2c:	andeq	sl, r1, r0, lsr #27
   18d30:	andeq	sl, r1, r8, asr #27
   18d34:	strdeq	sl, [r1], -r4
   18d38:	andeq	sl, r1, r4, lsr #28
   18d3c:	andeq	sl, r1, r8, asr lr
   18d40:	push	{r4, r5, lr}
   18d44:	sub	sp, sp, #12
   18d48:	ldr	r5, [sp, #24]
   18d4c:	ldr	ip, [r5]
   18d50:	cmp	ip, #0
   18d54:	beq	18d84 <lchmod@@Base+0x28fc>
   18d58:	mov	lr, r5
   18d5c:	mov	ip, #0
   18d60:	add	ip, ip, #1
   18d64:	ldr	r4, [lr, #4]!
   18d68:	cmp	r4, #0
   18d6c:	bne	18d60 <lchmod@@Base+0x28d8>
   18d70:	str	ip, [sp, #4]
   18d74:	str	r5, [sp]
   18d78:	bl	18920 <lchmod@@Base+0x2498>
   18d7c:	add	sp, sp, #12
   18d80:	pop	{r4, r5, pc}
   18d84:	mov	ip, #0
   18d88:	b	18d70 <lchmod@@Base+0x28e8>
   18d8c:	push	{r4, r5, lr}
   18d90:	sub	sp, sp, #52	; 0x34
   18d94:	ldr	r4, [sp, #64]	; 0x40
   18d98:	sub	r4, r4, #4
   18d9c:	add	r5, sp, #4
   18da0:	mov	ip, #0
   18da4:	ldr	lr, [r4, #4]!
   18da8:	str	lr, [r5, #4]!
   18dac:	cmp	lr, #0
   18db0:	beq	18dc0 <lchmod@@Base+0x2938>
   18db4:	add	ip, ip, #1
   18db8:	cmp	ip, #10
   18dbc:	bne	18da4 <lchmod@@Base+0x291c>
   18dc0:	str	ip, [sp, #4]
   18dc4:	add	ip, sp, #8
   18dc8:	str	ip, [sp]
   18dcc:	bl	18920 <lchmod@@Base+0x2498>
   18dd0:	add	sp, sp, #52	; 0x34
   18dd4:	pop	{r4, r5, pc}
   18dd8:	push	{r3}		; (str r3, [sp, #-4]!)
   18ddc:	push	{lr}		; (str lr, [sp, #-4]!)
   18de0:	sub	sp, sp, #16
   18de4:	add	r3, sp, #24
   18de8:	str	r3, [sp, #12]
   18dec:	str	r3, [sp]
   18df0:	ldr	r3, [sp, #20]
   18df4:	bl	18d8c <lchmod@@Base+0x2904>
   18df8:	add	sp, sp, #16
   18dfc:	pop	{lr}		; (ldr lr, [sp], #4)
   18e00:	add	sp, sp, #4
   18e04:	bx	lr
   18e08:	push	{r4, lr}
   18e0c:	ldr	r3, [pc, #112]	; 18e84 <lchmod@@Base+0x29fc>
   18e10:	ldr	r1, [r3]
   18e14:	mov	r0, #10
   18e18:	bl	114e4 <fputc_unlocked@plt>
   18e1c:	mov	r2, #5
   18e20:	ldr	r1, [pc, #96]	; 18e88 <lchmod@@Base+0x2a00>
   18e24:	mov	r0, #0
   18e28:	bl	114f0 <dcgettext@plt>
   18e2c:	ldr	r2, [pc, #88]	; 18e8c <lchmod@@Base+0x2a04>
   18e30:	mov	r1, r0
   18e34:	mov	r0, #1
   18e38:	bl	116b8 <__printf_chk@plt>
   18e3c:	mov	r2, #5
   18e40:	ldr	r1, [pc, #72]	; 18e90 <lchmod@@Base+0x2a08>
   18e44:	mov	r0, #0
   18e48:	bl	114f0 <dcgettext@plt>
   18e4c:	ldr	r3, [pc, #64]	; 18e94 <lchmod@@Base+0x2a0c>
   18e50:	ldr	r2, [pc, #64]	; 18e98 <lchmod@@Base+0x2a10>
   18e54:	mov	r1, r0
   18e58:	mov	r0, #1
   18e5c:	bl	116b8 <__printf_chk@plt>
   18e60:	mov	r2, #5
   18e64:	ldr	r1, [pc, #48]	; 18e9c <lchmod@@Base+0x2a14>
   18e68:	mov	r0, #0
   18e6c:	bl	114f0 <dcgettext@plt>
   18e70:	ldr	r2, [pc, #40]	; 18ea0 <lchmod@@Base+0x2a18>
   18e74:	mov	r1, r0
   18e78:	mov	r0, #1
   18e7c:	bl	116b8 <__printf_chk@plt>
   18e80:	pop	{r4, pc}
   18e84:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18e88:	muleq	r1, r4, lr
   18e8c:	andeq	sl, r1, r8, lsr #29
   18e90:	andeq	sl, r1, r0, asr #29
   18e94:	andeq	sl, r1, ip, lsr #15
   18e98:	ldrdeq	sl, [r1], -r4
   18e9c:	ldrdeq	sl, [r1], -r4
   18ea0:	strdeq	sl, [r1], -ip
   18ea4:	push	{r4, lr}
   18ea8:	bl	19558 <lchmod@@Base+0x30d0>
   18eac:	cmp	r0, #0
   18eb0:	popne	{r4, pc}
   18eb4:	bl	19448 <lchmod@@Base+0x2fc0>
   18eb8:	push	{r4, lr}
   18ebc:	bl	19558 <lchmod@@Base+0x30d0>
   18ec0:	cmp	r0, #0
   18ec4:	popne	{r4, pc}
   18ec8:	bl	19448 <lchmod@@Base+0x2fc0>
   18ecc:	push	{r4, lr}
   18ed0:	bl	18ea4 <lchmod@@Base+0x2a1c>
   18ed4:	pop	{r4, pc}
   18ed8:	push	{r4, r5, r6, lr}
   18edc:	mov	r5, r0
   18ee0:	mov	r4, r1
   18ee4:	bl	19588 <lchmod@@Base+0x3100>
   18ee8:	cmp	r0, #0
   18eec:	popne	{r4, r5, r6, pc}
   18ef0:	adds	r4, r4, #0
   18ef4:	movne	r4, #1
   18ef8:	cmp	r5, #0
   18efc:	orreq	r4, r4, #1
   18f00:	cmp	r4, #0
   18f04:	popeq	{r4, r5, r6, pc}
   18f08:	bl	19448 <lchmod@@Base+0x2fc0>
   18f0c:	push	{r4, lr}
   18f10:	cmp	r1, #0
   18f14:	orreq	r1, r1, #1
   18f18:	bl	19588 <lchmod@@Base+0x3100>
   18f1c:	cmp	r0, #0
   18f20:	popne	{r4, pc}
   18f24:	bl	19448 <lchmod@@Base+0x2fc0>
   18f28:	push	{r4, r5, r6, lr}
   18f2c:	mov	r6, r0
   18f30:	mov	r5, r1
   18f34:	mov	r4, r2
   18f38:	bl	19d08 <lchmod@@Base+0x3880>
   18f3c:	cmp	r0, #0
   18f40:	popne	{r4, r5, r6, pc}
   18f44:	cmp	r6, #0
   18f48:	beq	18f58 <lchmod@@Base+0x2ad0>
   18f4c:	cmp	r5, #0
   18f50:	cmpne	r4, #0
   18f54:	popeq	{r4, r5, r6, pc}
   18f58:	bl	19448 <lchmod@@Base+0x2fc0>
   18f5c:	push	{r4, lr}
   18f60:	bl	18f28 <lchmod@@Base+0x2aa0>
   18f64:	pop	{r4, pc}
   18f68:	push	{r4, lr}
   18f6c:	mov	ip, r1
   18f70:	mov	r3, r2
   18f74:	cmp	r2, #0
   18f78:	cmpne	r1, #0
   18f7c:	moveq	r3, #1
   18f80:	moveq	ip, r3
   18f84:	mov	r2, r3
   18f88:	mov	r1, ip
   18f8c:	bl	19d08 <lchmod@@Base+0x3880>
   18f90:	cmp	r0, #0
   18f94:	popne	{r4, pc}
   18f98:	bl	19448 <lchmod@@Base+0x2fc0>
   18f9c:	push	{r4, lr}
   18fa0:	mov	r2, r1
   18fa4:	mov	r1, r0
   18fa8:	mov	r0, #0
   18fac:	bl	18f28 <lchmod@@Base+0x2aa0>
   18fb0:	pop	{r4, pc}
   18fb4:	push	{r4, lr}
   18fb8:	mov	r2, r1
   18fbc:	mov	r1, r0
   18fc0:	mov	r0, #0
   18fc4:	bl	18f68 <lchmod@@Base+0x2ae0>
   18fc8:	pop	{r4, pc}
   18fcc:	push	{r4, r5, r6, r7, r8, lr}
   18fd0:	mov	r5, r1
   18fd4:	mov	r6, r2
   18fd8:	ldr	r4, [r1]
   18fdc:	subs	r7, r0, #0
   18fe0:	beq	18ffc <lchmod@@Base+0x2b74>
   18fe4:	lsr	r2, r4, #1
   18fe8:	add	r3, r2, #1
   18fec:	mvn	r3, r3
   18ff0:	cmp	r4, r3
   18ff4:	bls	19020 <lchmod@@Base+0x2b98>
   18ff8:	bl	19448 <lchmod@@Base+0x2fc0>
   18ffc:	cmp	r4, #0
   19000:	bne	19028 <lchmod@@Base+0x2ba0>
   19004:	mov	r1, r2
   19008:	mov	r0, #64	; 0x40
   1900c:	bl	19e70 <lchmod@@Base+0x39e8>
   19010:	cmp	r0, #0
   19014:	movne	r4, r0
   19018:	addeq	r4, r0, #1
   1901c:	b	19028 <lchmod@@Base+0x2ba0>
   19020:	add	r4, r4, #1
   19024:	add	r4, r4, r2
   19028:	mov	r2, r6
   1902c:	mov	r1, r4
   19030:	mov	r0, r7
   19034:	bl	18f28 <lchmod@@Base+0x2aa0>
   19038:	str	r4, [r5]
   1903c:	pop	{r4, r5, r6, r7, r8, pc}
   19040:	push	{r4, lr}
   19044:	mov	r2, #1
   19048:	bl	18fcc <lchmod@@Base+0x2b44>
   1904c:	pop	{r4, pc}
   19050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19054:	sub	sp, sp, #12
   19058:	mov	fp, r0
   1905c:	mov	sl, r1
   19060:	mov	r9, r2
   19064:	mov	r7, r3
   19068:	ldr	r6, [sp, #48]	; 0x30
   1906c:	ldr	r5, [r1]
   19070:	asrs	r4, r5, #1
   19074:	bmi	191d0 <lchmod@@Base+0x2d48>
   19078:	cmp	r5, #0
   1907c:	blt	191e4 <lchmod@@Base+0x2d5c>
   19080:	mvn	r3, #-2147483648	; 0x80000000
   19084:	sub	r3, r3, r4
   19088:	cmp	r5, r3
   1908c:	movle	r3, #0
   19090:	movgt	r3, #1
   19094:	cmp	r3, #0
   19098:	addeq	r4, r4, r5
   1909c:	mvnne	r4, #-2147483648	; 0x80000000
   190a0:	mvn	r8, r7
   190a4:	lsr	r8, r8, #31
   190a8:	cmp	r7, r4
   190ac:	movge	r3, #0
   190b0:	andlt	r3, r8, #1
   190b4:	cmp	r3, #0
   190b8:	movne	r4, r7
   190bc:	cmp	r6, #0
   190c0:	blt	191f8 <lchmod@@Base+0x2d70>
   190c4:	cmp	r6, #0
   190c8:	beq	192a4 <lchmod@@Base+0x2e1c>
   190cc:	cmp	r4, #0
   190d0:	blt	19254 <lchmod@@Base+0x2dcc>
   190d4:	mov	r1, r6
   190d8:	mvn	r0, #-2147483648	; 0x80000000
   190dc:	bl	1a07c <lchmod@@Base+0x3bf4>
   190e0:	cmp	r0, r4
   190e4:	movge	r0, #0
   190e8:	movlt	r0, #1
   190ec:	cmp	r0, #0
   190f0:	mvnne	r3, #-2147483648	; 0x80000000
   190f4:	strne	r3, [sp, #4]
   190f8:	beq	1928c <lchmod@@Base+0x2e04>
   190fc:	mov	r1, r6
   19100:	ldr	r0, [sp, #4]
   19104:	bl	1a07c <lchmod@@Base+0x3bf4>
   19108:	mov	r4, r0
   1910c:	mov	r1, r6
   19110:	ldr	r0, [sp, #4]
   19114:	bl	1a29c <lchmod@@Base+0x3e14>
   19118:	ldr	r3, [sp, #4]
   1911c:	sub	r1, r3, r1
   19120:	cmp	fp, #0
   19124:	moveq	r3, #0
   19128:	streq	r3, [sl]
   1912c:	sub	r3, r4, r5
   19130:	cmp	r3, r9
   19134:	bge	191bc <lchmod@@Base+0x2d34>
   19138:	cmp	r9, #0
   1913c:	blt	192b0 <lchmod@@Base+0x2e28>
   19140:	cmp	r5, #0
   19144:	blt	192c4 <lchmod@@Base+0x2e3c>
   19148:	mvn	r3, #-2147483648	; 0x80000000
   1914c:	sub	r3, r3, r9
   19150:	cmp	r5, r3
   19154:	movle	r3, #0
   19158:	movgt	r3, #1
   1915c:	cmp	r3, #0
   19160:	bne	1936c <lchmod@@Base+0x2ee4>
   19164:	add	r5, r5, r9
   19168:	mov	r4, r5
   1916c:	cmp	r7, r5
   19170:	movge	r7, #0
   19174:	andlt	r7, r8, #1
   19178:	cmp	r7, #0
   1917c:	bne	1936c <lchmod@@Base+0x2ee4>
   19180:	cmp	r6, #0
   19184:	blt	192d8 <lchmod@@Base+0x2e50>
   19188:	cmp	r6, #0
   1918c:	beq	191b8 <lchmod@@Base+0x2d30>
   19190:	cmp	r5, #0
   19194:	blt	19334 <lchmod@@Base+0x2eac>
   19198:	mov	r1, r6
   1919c:	mvn	r0, #-2147483648	; 0x80000000
   191a0:	bl	1a07c <lchmod@@Base+0x3bf4>
   191a4:	cmp	r5, r0
   191a8:	movle	r0, #0
   191ac:	movgt	r0, #1
   191b0:	cmp	r0, #0
   191b4:	bne	1936c <lchmod@@Base+0x2ee4>
   191b8:	mul	r1, r5, r6
   191bc:	mov	r0, fp
   191c0:	bl	18ed8 <lchmod@@Base+0x2a50>
   191c4:	str	r4, [sl]
   191c8:	add	sp, sp, #12
   191cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191d0:	rsb	r3, r4, #-2147483648	; 0x80000000
   191d4:	cmp	r5, r3
   191d8:	movge	r3, #0
   191dc:	movlt	r3, #1
   191e0:	b	19094 <lchmod@@Base+0x2c0c>
   191e4:	rsb	r3, r5, #-2147483648	; 0x80000000
   191e8:	cmp	r4, r3
   191ec:	movge	r3, #0
   191f0:	movlt	r3, #1
   191f4:	b	19094 <lchmod@@Base+0x2c0c>
   191f8:	cmp	r4, #0
   191fc:	blt	19224 <lchmod@@Base+0x2d9c>
   19200:	cmn	r6, #1
   19204:	beq	19240 <lchmod@@Base+0x2db8>
   19208:	mov	r1, r6
   1920c:	mov	r0, #-2147483648	; 0x80000000
   19210:	bl	1a07c <lchmod@@Base+0x3bf4>
   19214:	cmp	r0, r4
   19218:	movge	r0, #0
   1921c:	movlt	r0, #1
   19220:	b	190ec <lchmod@@Base+0x2c64>
   19224:	mov	r1, r6
   19228:	mvn	r0, #-2147483648	; 0x80000000
   1922c:	bl	1a07c <lchmod@@Base+0x3bf4>
   19230:	cmp	r0, r4
   19234:	movle	r0, #0
   19238:	movgt	r0, #1
   1923c:	b	190ec <lchmod@@Base+0x2c64>
   19240:	add	r0, r4, #-2147483648	; 0x80000000
   19244:	cmp	r0, #0
   19248:	movle	r0, #0
   1924c:	movgt	r0, #1
   19250:	b	190ec <lchmod@@Base+0x2c64>
   19254:	cmn	r4, #1
   19258:	beq	19278 <lchmod@@Base+0x2df0>
   1925c:	mov	r1, r4
   19260:	mov	r0, #-2147483648	; 0x80000000
   19264:	bl	1a07c <lchmod@@Base+0x3bf4>
   19268:	cmp	r6, r0
   1926c:	movle	r0, #0
   19270:	movgt	r0, #1
   19274:	b	190ec <lchmod@@Base+0x2c64>
   19278:	add	r0, r6, #-2147483648	; 0x80000000
   1927c:	cmp	r0, #0
   19280:	movle	r0, #0
   19284:	movgt	r0, #1
   19288:	b	190ec <lchmod@@Base+0x2c64>
   1928c:	mul	r1, r6, r4
   19290:	cmp	r1, #63	; 0x3f
   19294:	movle	r3, #64	; 0x40
   19298:	strle	r3, [sp, #4]
   1929c:	bgt	19120 <lchmod@@Base+0x2c98>
   192a0:	b	190fc <lchmod@@Base+0x2c74>
   192a4:	mov	r3, #64	; 0x40
   192a8:	str	r3, [sp, #4]
   192ac:	b	190fc <lchmod@@Base+0x2c74>
   192b0:	rsb	r3, r9, #-2147483648	; 0x80000000
   192b4:	cmp	r5, r3
   192b8:	movge	r3, #0
   192bc:	movlt	r3, #1
   192c0:	b	1915c <lchmod@@Base+0x2cd4>
   192c4:	rsb	r3, r5, #-2147483648	; 0x80000000
   192c8:	cmp	r9, r3
   192cc:	movge	r3, #0
   192d0:	movlt	r3, #1
   192d4:	b	1915c <lchmod@@Base+0x2cd4>
   192d8:	cmp	r5, #0
   192dc:	blt	19304 <lchmod@@Base+0x2e7c>
   192e0:	cmn	r6, #1
   192e4:	beq	19320 <lchmod@@Base+0x2e98>
   192e8:	mov	r1, r6
   192ec:	mov	r0, #-2147483648	; 0x80000000
   192f0:	bl	1a07c <lchmod@@Base+0x3bf4>
   192f4:	cmp	r5, r0
   192f8:	movle	r0, #0
   192fc:	movgt	r0, #1
   19300:	b	191b0 <lchmod@@Base+0x2d28>
   19304:	mov	r1, r6
   19308:	mvn	r0, #-2147483648	; 0x80000000
   1930c:	bl	1a07c <lchmod@@Base+0x3bf4>
   19310:	cmp	r5, r0
   19314:	movge	r0, #0
   19318:	movlt	r0, #1
   1931c:	b	191b0 <lchmod@@Base+0x2d28>
   19320:	add	r0, r5, #-2147483648	; 0x80000000
   19324:	cmp	r0, #0
   19328:	movle	r0, #0
   1932c:	movgt	r0, #1
   19330:	b	191b0 <lchmod@@Base+0x2d28>
   19334:	cmn	r5, #1
   19338:	beq	19358 <lchmod@@Base+0x2ed0>
   1933c:	mov	r1, r5
   19340:	mov	r0, #-2147483648	; 0x80000000
   19344:	bl	1a07c <lchmod@@Base+0x3bf4>
   19348:	cmp	r6, r0
   1934c:	movle	r0, #0
   19350:	movgt	r0, #1
   19354:	b	191b0 <lchmod@@Base+0x2d28>
   19358:	add	r0, r6, #-2147483648	; 0x80000000
   1935c:	cmp	r0, #0
   19360:	movle	r0, #0
   19364:	movgt	r0, #1
   19368:	b	191b0 <lchmod@@Base+0x2d28>
   1936c:	bl	19448 <lchmod@@Base+0x2fc0>
   19370:	push	{r4, lr}
   19374:	bl	19508 <lchmod@@Base+0x3080>
   19378:	cmp	r0, #0
   1937c:	popne	{r4, pc}
   19380:	bl	19448 <lchmod@@Base+0x2fc0>
   19384:	push	{r4, lr}
   19388:	mov	r1, #1
   1938c:	bl	19370 <lchmod@@Base+0x2ee8>
   19390:	pop	{r4, pc}
   19394:	push	{r4, lr}
   19398:	bl	19508 <lchmod@@Base+0x3080>
   1939c:	cmp	r0, #0
   193a0:	popne	{r4, pc}
   193a4:	bl	19448 <lchmod@@Base+0x2fc0>
   193a8:	push	{r4, lr}
   193ac:	mov	r1, #1
   193b0:	bl	19394 <lchmod@@Base+0x2f0c>
   193b4:	pop	{r4, pc}
   193b8:	push	{r4, r5, r6, lr}
   193bc:	mov	r5, r0
   193c0:	mov	r4, r1
   193c4:	mov	r0, r1
   193c8:	bl	18ea4 <lchmod@@Base+0x2a1c>
   193cc:	mov	r2, r4
   193d0:	mov	r1, r5
   193d4:	bl	114b4 <memcpy@plt>
   193d8:	pop	{r4, r5, r6, pc}
   193dc:	push	{r4, r5, r6, lr}
   193e0:	mov	r5, r0
   193e4:	mov	r4, r1
   193e8:	mov	r0, r1
   193ec:	bl	18eb8 <lchmod@@Base+0x2a30>
   193f0:	mov	r2, r4
   193f4:	mov	r1, r5
   193f8:	bl	114b4 <memcpy@plt>
   193fc:	pop	{r4, r5, r6, pc}
   19400:	push	{r4, r5, r6, lr}
   19404:	mov	r5, r0
   19408:	mov	r4, r1
   1940c:	add	r0, r1, #1
   19410:	bl	18eb8 <lchmod@@Base+0x2a30>
   19414:	mov	r2, #0
   19418:	strb	r2, [r0, r4]
   1941c:	mov	r2, r4
   19420:	mov	r1, r5
   19424:	bl	114b4 <memcpy@plt>
   19428:	pop	{r4, r5, r6, pc}
   1942c:	push	{r4, lr}
   19430:	mov	r4, r0
   19434:	bl	11658 <strlen@plt>
   19438:	add	r1, r0, #1
   1943c:	mov	r0, r4
   19440:	bl	193b8 <lchmod@@Base+0x2f30>
   19444:	pop	{r4, pc}
   19448:	push	{r4, lr}
   1944c:	ldr	r3, [pc, #40]	; 1947c <lchmod@@Base+0x2ff4>
   19450:	ldr	r4, [r3]
   19454:	mov	r2, #5
   19458:	ldr	r1, [pc, #32]	; 19480 <lchmod@@Base+0x2ff8>
   1945c:	mov	r0, #0
   19460:	bl	114f0 <dcgettext@plt>
   19464:	mov	r3, r0
   19468:	ldr	r2, [pc, #20]	; 19484 <lchmod@@Base+0x2ffc>
   1946c:	mov	r1, #0
   19470:	mov	r0, r4
   19474:	bl	115b0 <error@plt>
   19478:	bl	117d8 <abort@plt>
   1947c:	andeq	ip, r2, r0, lsl #3
   19480:	andeq	sl, r1, ip, asr #30
   19484:	andeq	sl, r1, r0, ror sl
   19488:	push	{r4, lr}
   1948c:	orr	r1, r1, #512	; 0x200
   19490:	bl	14698 <__assert_fail@plt+0x2e6c>
   19494:	cmp	r0, #0
   19498:	popne	{r4, pc}
   1949c:	bl	11688 <__errno_location@plt>
   194a0:	ldr	r3, [r0]
   194a4:	cmp	r3, #22
   194a8:	beq	194b0 <lchmod@@Base+0x3028>
   194ac:	bl	19448 <lchmod@@Base+0x2fc0>
   194b0:	ldr	r3, [pc, #12]	; 194c4 <lchmod@@Base+0x303c>
   194b4:	mov	r2, #41	; 0x29
   194b8:	ldr	r1, [pc, #8]	; 194c8 <lchmod@@Base+0x3040>
   194bc:	ldr	r0, [pc, #8]	; 194cc <lchmod@@Base+0x3044>
   194c0:	bl	1182c <__assert_fail@plt>
   194c4:	andeq	sl, r1, r0, ror #30
   194c8:	andeq	sl, r1, ip, ror #30
   194cc:	andeq	sl, r1, r8, ror pc
   194d0:	ldr	r3, [r0, #48]	; 0x30
   194d4:	and	r3, r3, #17
   194d8:	cmp	r3, #16
   194dc:	beq	19500 <lchmod@@Base+0x3078>
   194e0:	cmp	r3, #17
   194e4:	beq	194f0 <lchmod@@Base+0x3068>
   194e8:	mov	r0, #0
   194ec:	bx	lr
   194f0:	ldr	r0, [r1, #48]	; 0x30
   194f4:	adds	r0, r0, #0
   194f8:	movne	r0, #1
   194fc:	bx	lr
   19500:	mov	r0, #1
   19504:	bx	lr
   19508:	push	{r4, lr}
   1950c:	mov	r2, r0
   19510:	mov	r3, r1
   19514:	cmp	r1, #0
   19518:	cmpne	r0, #0
   1951c:	moveq	r3, #1
   19520:	moveq	r2, r3
   19524:	umull	r0, r1, r2, r3
   19528:	cmp	r0, #0
   1952c:	cmpge	r1, #0
   19530:	bne	19544 <lchmod@@Base+0x30bc>
   19534:	mov	r1, r3
   19538:	mov	r0, r2
   1953c:	bl	11424 <calloc@plt>
   19540:	pop	{r4, pc}
   19544:	bl	11688 <__errno_location@plt>
   19548:	mov	r3, #12
   1954c:	str	r3, [r0]
   19550:	mov	r0, #0
   19554:	pop	{r4, pc}
   19558:	push	{r4, lr}
   1955c:	cmp	r0, #0
   19560:	moveq	r0, #1
   19564:	cmp	r0, #0
   19568:	blt	19574 <lchmod@@Base+0x30ec>
   1956c:	bl	115d4 <malloc@plt>
   19570:	pop	{r4, pc}
   19574:	bl	11688 <__errno_location@plt>
   19578:	mov	r3, #12
   1957c:	str	r3, [r0]
   19580:	mov	r0, #0
   19584:	pop	{r4, pc}
   19588:	push	{r4, lr}
   1958c:	cmp	r0, #0
   19590:	beq	195ac <lchmod@@Base+0x3124>
   19594:	cmp	r1, #0
   19598:	beq	195b8 <lchmod@@Base+0x3130>
   1959c:	cmp	r1, #0
   195a0:	blt	195c4 <lchmod@@Base+0x313c>
   195a4:	bl	11508 <realloc@plt>
   195a8:	pop	{r4, pc}
   195ac:	mov	r0, r1
   195b0:	bl	19558 <lchmod@@Base+0x30d0>
   195b4:	pop	{r4, pc}
   195b8:	bl	1315c <__assert_fail@plt+0x1930>
   195bc:	mov	r0, #0
   195c0:	pop	{r4, pc}
   195c4:	bl	11688 <__errno_location@plt>
   195c8:	mov	r3, #12
   195cc:	str	r3, [r0]
   195d0:	mov	r0, #0
   195d4:	pop	{r4, pc}
   195d8:	ldrb	r3, [r0]
   195dc:	cmp	r3, #47	; 0x2f
   195e0:	bne	195f0 <lchmod@@Base+0x3168>
   195e4:	ldrb	r3, [r0, #1]!
   195e8:	cmp	r3, #47	; 0x2f
   195ec:	beq	195e4 <lchmod@@Base+0x315c>
   195f0:	ldrb	r2, [r0]
   195f4:	cmp	r2, #0
   195f8:	bxeq	lr
   195fc:	push	{lr}		; (str lr, [sp, #-4]!)
   19600:	mov	r1, r0
   19604:	mov	r3, #0
   19608:	mov	lr, #1
   1960c:	mov	ip, r3
   19610:	b	19620 <lchmod@@Base+0x3198>
   19614:	ldrb	r2, [r1, #1]!
   19618:	cmp	r2, #0
   1961c:	beq	1963c <lchmod@@Base+0x31b4>
   19620:	cmp	r2, #47	; 0x2f
   19624:	moveq	r3, lr
   19628:	beq	19614 <lchmod@@Base+0x318c>
   1962c:	cmp	r3, #0
   19630:	movne	r0, r1
   19634:	movne	r3, ip
   19638:	b	19614 <lchmod@@Base+0x318c>
   1963c:	pop	{pc}		; (ldr pc, [sp], #4)
   19640:	push	{r4, lr}
   19644:	mov	r4, r0
   19648:	bl	11658 <strlen@plt>
   1964c:	cmp	r0, #1
   19650:	popls	{r4, pc}
   19654:	sub	r3, r0, #1
   19658:	add	r2, r4, r3
   1965c:	ldrb	r1, [r4, r3]
   19660:	cmp	r1, #47	; 0x2f
   19664:	popne	{r4, pc}
   19668:	cmp	r3, #1
   1966c:	beq	19690 <lchmod@@Base+0x3208>
   19670:	sub	r0, r3, #1
   19674:	ldrb	r1, [r2, #-1]!
   19678:	cmp	r1, #47	; 0x2f
   1967c:	beq	19688 <lchmod@@Base+0x3200>
   19680:	mov	r0, r3
   19684:	pop	{r4, pc}
   19688:	mov	r3, r0
   1968c:	b	19668 <lchmod@@Base+0x31e0>
   19690:	mov	r0, #1
   19694:	pop	{r4, pc}
   19698:	push	{r4, r5, r6, lr}
   1969c:	mov	r5, r0
   196a0:	bl	11598 <__fpending@plt>
   196a4:	mov	r6, r0
   196a8:	ldr	r4, [r5]
   196ac:	and	r4, r4, #32
   196b0:	mov	r0, r5
   196b4:	bl	197f8 <lchmod@@Base+0x3370>
   196b8:	cmp	r4, #0
   196bc:	bne	196e4 <lchmod@@Base+0x325c>
   196c0:	cmp	r0, #0
   196c4:	popeq	{r4, r5, r6, pc}
   196c8:	cmp	r6, #0
   196cc:	bne	19700 <lchmod@@Base+0x3278>
   196d0:	bl	11688 <__errno_location@plt>
   196d4:	ldr	r0, [r0]
   196d8:	subs	r0, r0, #9
   196dc:	mvnne	r0, #0
   196e0:	pop	{r4, r5, r6, pc}
   196e4:	cmp	r0, #0
   196e8:	bne	19708 <lchmod@@Base+0x3280>
   196ec:	bl	11688 <__errno_location@plt>
   196f0:	mov	r3, #0
   196f4:	str	r3, [r0]
   196f8:	mvn	r0, #0
   196fc:	pop	{r4, r5, r6, pc}
   19700:	mvn	r0, #0
   19704:	pop	{r4, r5, r6, pc}
   19708:	mvn	r0, #0
   1970c:	pop	{r4, r5, r6, pc}
   19710:	mov	r2, #0
   19714:	mov	r3, #0
   19718:	strd	r2, [r0, #16]
   1971c:	ldr	r3, [pc, #4]	; 19728 <lchmod@@Base+0x32a0>
   19720:	str	r3, [r0, #24]
   19724:	bx	lr
   19728:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1972c:	push	{r4, r5, r6, r7, r8, lr}
   19730:	ldr	r2, [r0, #24]
   19734:	ldr	r3, [pc, #172]	; 197e8 <lchmod@@Base+0x3360>
   19738:	cmp	r2, r3
   1973c:	bne	19784 <lchmod@@Base+0x32fc>
   19740:	ldrd	r6, [r0, #16]
   19744:	orrs	r3, r6, r7
   19748:	beq	197c4 <lchmod@@Base+0x333c>
   1974c:	ldrd	r4, [r1, #96]	; 0x60
   19750:	ldrd	r2, [r0]
   19754:	cmp	r5, r3
   19758:	cmpeq	r4, r2
   1975c:	beq	19798 <lchmod@@Base+0x3310>
   19760:	adds	r2, r6, #1
   19764:	adc	r3, r7, #0
   19768:	strd	r2, [r0, #16]
   1976c:	and	r6, r6, r2
   19770:	and	r7, r7, r3
   19774:	orrs	ip, r6, r7
   19778:	beq	197b4 <lchmod@@Base+0x332c>
   1977c:	mov	r0, #0
   19780:	pop	{r4, r5, r6, r7, r8, pc}
   19784:	ldr	r3, [pc, #96]	; 197ec <lchmod@@Base+0x3364>
   19788:	mov	r2, #60	; 0x3c
   1978c:	ldr	r1, [pc, #92]	; 197f0 <lchmod@@Base+0x3368>
   19790:	ldr	r0, [pc, #92]	; 197f4 <lchmod@@Base+0x336c>
   19794:	bl	1182c <__assert_fail@plt>
   19798:	ldrd	r4, [r1]
   1979c:	ldrd	r2, [r0, #8]
   197a0:	cmp	r5, r3
   197a4:	cmpeq	r4, r2
   197a8:	bne	19760 <lchmod@@Base+0x32d8>
   197ac:	mov	r0, #1
   197b0:	pop	{r4, r5, r6, r7, r8, pc}
   197b4:	orrs	r3, r2, r3
   197b8:	bne	197d0 <lchmod@@Base+0x3348>
   197bc:	mov	r0, #1
   197c0:	pop	{r4, r5, r6, r7, r8, pc}
   197c4:	mov	r2, #1
   197c8:	mov	r3, #0
   197cc:	strd	r2, [r0, #16]
   197d0:	ldrd	r2, [r1]
   197d4:	strd	r2, [r0, #8]
   197d8:	ldrd	r2, [r1, #96]	; 0x60
   197dc:	strd	r2, [r0]
   197e0:	mov	r0, #0
   197e4:	pop	{r4, r5, r6, r7, r8, pc}
   197e8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   197ec:	andeq	sl, r1, r8, lsl #31
   197f0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   197f4:	andeq	sl, r1, r8, lsr #31
   197f8:	push	{r4, r5, r6, lr}
   197fc:	sub	sp, sp, #8
   19800:	mov	r4, r0
   19804:	bl	116c4 <fileno@plt>
   19808:	cmp	r0, #0
   1980c:	blt	19884 <lchmod@@Base+0x33fc>
   19810:	mov	r0, r4
   19814:	bl	115ec <__freading@plt>
   19818:	cmp	r0, #0
   1981c:	beq	19850 <lchmod@@Base+0x33c8>
   19820:	mov	r0, r4
   19824:	bl	116c4 <fileno@plt>
   19828:	mov	r3, #1
   1982c:	str	r3, [sp]
   19830:	mov	r2, #0
   19834:	mov	r3, #0
   19838:	bl	11574 <lseek64@plt>
   1983c:	mvn	r2, #0
   19840:	mvn	r3, #0
   19844:	cmp	r1, r3
   19848:	cmpeq	r0, r2
   1984c:	beq	19890 <lchmod@@Base+0x3408>
   19850:	mov	r0, r4
   19854:	bl	19b34 <lchmod@@Base+0x36ac>
   19858:	cmp	r0, #0
   1985c:	beq	19890 <lchmod@@Base+0x3408>
   19860:	bl	11688 <__errno_location@plt>
   19864:	mov	r5, r0
   19868:	ldr	r6, [r0]
   1986c:	mov	r0, r4
   19870:	bl	116dc <fclose@plt>
   19874:	cmp	r6, #0
   19878:	strne	r6, [r5]
   1987c:	mvnne	r0, #0
   19880:	b	19898 <lchmod@@Base+0x3410>
   19884:	mov	r0, r4
   19888:	bl	116dc <fclose@plt>
   1988c:	b	19898 <lchmod@@Base+0x3410>
   19890:	mov	r0, r4
   19894:	bl	116dc <fclose@plt>
   19898:	add	sp, sp, #8
   1989c:	pop	{r4, r5, r6, pc}
   198a0:	push	{r1, r2, r3}
   198a4:	push	{r4, r5, r6, lr}
   198a8:	sub	sp, sp, #12
   198ac:	mov	r5, r0
   198b0:	ldr	r1, [sp, #28]
   198b4:	add	r3, sp, #32
   198b8:	str	r3, [sp, #4]
   198bc:	cmp	r1, #0
   198c0:	beq	19908 <lchmod@@Base+0x3480>
   198c4:	ldr	r3, [pc, #540]	; 19ae8 <lchmod@@Base+0x3660>
   198c8:	cmp	r1, r3
   198cc:	beq	19938 <lchmod@@Base+0x34b0>
   198d0:	cmp	r1, #11
   198d4:	beq	19ad8 <lchmod@@Base+0x3650>
   198d8:	bgt	19a64 <lchmod@@Base+0x35dc>
   198dc:	cmp	r1, #3
   198e0:	beq	19ad8 <lchmod@@Base+0x3650>
   198e4:	ble	19a24 <lchmod@@Base+0x359c>
   198e8:	cmp	r1, #8
   198ec:	beq	19a44 <lchmod@@Base+0x35bc>
   198f0:	ble	19a3c <lchmod@@Base+0x35b4>
   198f4:	cmp	r1, #9
   198f8:	beq	19ad8 <lchmod@@Base+0x3650>
   198fc:	cmp	r1, #10
   19900:	bne	19a9c <lchmod@@Base+0x3614>
   19904:	b	19a44 <lchmod@@Base+0x35bc>
   19908:	ldr	r3, [sp, #4]
   1990c:	add	r2, r3, #4
   19910:	str	r2, [sp, #4]
   19914:	ldr	r2, [r3]
   19918:	mov	r1, #0
   1991c:	bl	116f4 <fcntl64@plt>
   19920:	mov	r4, r0
   19924:	mov	r0, r4
   19928:	add	sp, sp, #12
   1992c:	pop	{r4, r5, r6, lr}
   19930:	add	sp, sp, #12
   19934:	bx	lr
   19938:	ldr	r3, [sp, #4]
   1993c:	add	r2, r3, #4
   19940:	str	r2, [sp, #4]
   19944:	ldr	r6, [r3]
   19948:	ldr	r3, [pc, #412]	; 19aec <lchmod@@Base+0x3664>
   1994c:	ldr	r3, [r3]
   19950:	cmp	r3, #0
   19954:	blt	199b4 <lchmod@@Base+0x352c>
   19958:	mov	r2, r6
   1995c:	ldr	r1, [pc, #388]	; 19ae8 <lchmod@@Base+0x3660>
   19960:	bl	116f4 <fcntl64@plt>
   19964:	subs	r4, r0, #0
   19968:	blt	1997c <lchmod@@Base+0x34f4>
   1996c:	mov	r2, #1
   19970:	ldr	r3, [pc, #372]	; 19aec <lchmod@@Base+0x3664>
   19974:	str	r2, [r3]
   19978:	b	19924 <lchmod@@Base+0x349c>
   1997c:	bl	11688 <__errno_location@plt>
   19980:	ldr	r3, [r0]
   19984:	cmp	r3, #22
   19988:	bne	1996c <lchmod@@Base+0x34e4>
   1998c:	mov	r2, r6
   19990:	mov	r1, #0
   19994:	mov	r0, r5
   19998:	bl	116f4 <fcntl64@plt>
   1999c:	subs	r4, r0, #0
   199a0:	blt	19924 <lchmod@@Base+0x349c>
   199a4:	mvn	r2, #0
   199a8:	ldr	r3, [pc, #316]	; 19aec <lchmod@@Base+0x3664>
   199ac:	str	r2, [r3]
   199b0:	b	199d8 <lchmod@@Base+0x3550>
   199b4:	mov	r2, r6
   199b8:	mov	r1, #0
   199bc:	bl	116f4 <fcntl64@plt>
   199c0:	subs	r4, r0, #0
   199c4:	blt	19924 <lchmod@@Base+0x349c>
   199c8:	ldr	r3, [pc, #284]	; 19aec <lchmod@@Base+0x3664>
   199cc:	ldr	r3, [r3]
   199d0:	cmn	r3, #1
   199d4:	bne	19924 <lchmod@@Base+0x349c>
   199d8:	mov	r1, #1
   199dc:	mov	r0, r4
   199e0:	bl	116f4 <fcntl64@plt>
   199e4:	subs	r2, r0, #0
   199e8:	blt	19a04 <lchmod@@Base+0x357c>
   199ec:	orr	r2, r2, #1
   199f0:	mov	r1, #2
   199f4:	mov	r0, r4
   199f8:	bl	116f4 <fcntl64@plt>
   199fc:	cmn	r0, #1
   19a00:	bne	19924 <lchmod@@Base+0x349c>
   19a04:	bl	11688 <__errno_location@plt>
   19a08:	mov	r5, r0
   19a0c:	ldr	r6, [r0]
   19a10:	mov	r0, r4
   19a14:	bl	117e4 <close@plt>
   19a18:	str	r6, [r5]
   19a1c:	mvn	r4, #0
   19a20:	b	19924 <lchmod@@Base+0x349c>
   19a24:	cmp	r1, #1
   19a28:	beq	19ad8 <lchmod@@Base+0x3650>
   19a2c:	bgt	19a44 <lchmod@@Base+0x35bc>
   19a30:	cmp	r1, #0
   19a34:	bne	19a9c <lchmod@@Base+0x3614>
   19a38:	b	19a44 <lchmod@@Base+0x35bc>
   19a3c:	cmp	r1, #4
   19a40:	bne	19a9c <lchmod@@Base+0x3614>
   19a44:	ldr	r3, [sp, #4]
   19a48:	add	r2, r3, #4
   19a4c:	str	r2, [sp, #4]
   19a50:	ldr	r2, [r3]
   19a54:	mov	r0, r5
   19a58:	bl	116f4 <fcntl64@plt>
   19a5c:	mov	r4, r0
   19a60:	b	19924 <lchmod@@Base+0x349c>
   19a64:	ldr	r3, [pc, #132]	; 19af0 <lchmod@@Base+0x3668>
   19a68:	cmp	r1, r3
   19a6c:	bgt	19abc <lchmod@@Base+0x3634>
   19a70:	sub	r3, r3, #1
   19a74:	cmp	r1, r3
   19a78:	bge	19a44 <lchmod@@Base+0x35bc>
   19a7c:	sub	r3, r3, #5
   19a80:	cmp	r1, r3
   19a84:	beq	19ad8 <lchmod@@Base+0x3650>
   19a88:	add	r3, r3, #1
   19a8c:	cmp	r1, r3
   19a90:	beq	19a44 <lchmod@@Base+0x35bc>
   19a94:	cmp	r1, #1024	; 0x400
   19a98:	beq	19a44 <lchmod@@Base+0x35bc>
   19a9c:	ldr	r3, [sp, #4]
   19aa0:	add	r2, r3, #4
   19aa4:	str	r2, [sp, #4]
   19aa8:	ldr	r2, [r3]
   19aac:	mov	r0, r5
   19ab0:	bl	116f4 <fcntl64@plt>
   19ab4:	mov	r4, r0
   19ab8:	b	19924 <lchmod@@Base+0x349c>
   19abc:	ldr	r3, [pc, #48]	; 19af4 <lchmod@@Base+0x366c>
   19ac0:	cmp	r1, r3
   19ac4:	beq	19a44 <lchmod@@Base+0x35bc>
   19ac8:	blt	19ad8 <lchmod@@Base+0x3650>
   19acc:	add	r3, r3, #1
   19ad0:	cmp	r1, r3
   19ad4:	bne	19a9c <lchmod@@Base+0x3614>
   19ad8:	mov	r0, r5
   19adc:	bl	116f4 <fcntl64@plt>
   19ae0:	mov	r4, r0
   19ae4:	b	19924 <lchmod@@Base+0x349c>
   19ae8:	andeq	r0, r0, r6, lsl #8
   19aec:	andeq	ip, r2, r4, lsr #6
   19af0:	andeq	r0, r0, r7, lsl #8
   19af4:	andeq	r0, r0, r9, lsl #8
   19af8:	push	{r1, r2, r3}
   19afc:	push	{lr}		; (str lr, [sp, #-4]!)
   19b00:	sub	sp, sp, #8
   19b04:	ldr	r1, [sp, #12]
   19b08:	tst	r1, #64	; 0x40
   19b0c:	addne	r3, sp, #20
   19b10:	strne	r3, [sp, #4]
   19b14:	ldrne	r2, [sp, #16]
   19b18:	moveq	r2, #0
   19b1c:	bl	115bc <open64@plt>
   19b20:	bl	188e0 <lchmod@@Base+0x2458>
   19b24:	add	sp, sp, #8
   19b28:	pop	{lr}		; (ldr lr, [sp], #4)
   19b2c:	add	sp, sp, #12
   19b30:	bx	lr
   19b34:	push	{r4, lr}
   19b38:	sub	sp, sp, #8
   19b3c:	subs	r4, r0, #0
   19b40:	beq	19b54 <lchmod@@Base+0x36cc>
   19b44:	mov	r0, r4
   19b48:	bl	115ec <__freading@plt>
   19b4c:	cmp	r0, #0
   19b50:	bne	19b64 <lchmod@@Base+0x36dc>
   19b54:	mov	r0, r4
   19b58:	bl	1146c <fflush@plt>
   19b5c:	add	sp, sp, #8
   19b60:	pop	{r4, pc}
   19b64:	ldr	r3, [r4]
   19b68:	tst	r3, #256	; 0x100
   19b6c:	bne	19b7c <lchmod@@Base+0x36f4>
   19b70:	mov	r0, r4
   19b74:	bl	1146c <fflush@plt>
   19b78:	b	19b5c <lchmod@@Base+0x36d4>
   19b7c:	mov	r3, #1
   19b80:	str	r3, [sp]
   19b84:	mov	r2, #0
   19b88:	mov	r3, #0
   19b8c:	mov	r0, r4
   19b90:	bl	19b98 <lchmod@@Base+0x3710>
   19b94:	b	19b70 <lchmod@@Base+0x36e8>
   19b98:	push	{r4, r5, r6, r7, lr}
   19b9c:	sub	sp, sp, #12
   19ba0:	mov	r4, r0
   19ba4:	mov	r6, r2
   19ba8:	mov	r7, r3
   19bac:	ldr	r5, [sp, #32]
   19bb0:	ldr	r2, [r0, #8]
   19bb4:	ldr	r3, [r0, #4]
   19bb8:	cmp	r2, r3
   19bbc:	beq	19bdc <lchmod@@Base+0x3754>
   19bc0:	str	r5, [sp]
   19bc4:	mov	r2, r6
   19bc8:	mov	r3, r7
   19bcc:	mov	r0, r4
   19bd0:	bl	116e8 <fseeko64@plt>
   19bd4:	add	sp, sp, #12
   19bd8:	pop	{r4, r5, r6, r7, pc}
   19bdc:	ldr	r2, [r0, #20]
   19be0:	ldr	r3, [r0, #16]
   19be4:	cmp	r2, r3
   19be8:	bne	19bc0 <lchmod@@Base+0x3738>
   19bec:	ldr	r3, [r0, #36]	; 0x24
   19bf0:	cmp	r3, #0
   19bf4:	bne	19bc0 <lchmod@@Base+0x3738>
   19bf8:	bl	116c4 <fileno@plt>
   19bfc:	str	r5, [sp]
   19c00:	mov	r2, r6
   19c04:	mov	r3, r7
   19c08:	bl	11574 <lseek64@plt>
   19c0c:	mvn	r2, #0
   19c10:	mvn	r3, #0
   19c14:	cmp	r1, r3
   19c18:	cmpeq	r0, r2
   19c1c:	beq	19c38 <lchmod@@Base+0x37b0>
   19c20:	ldr	r3, [r4]
   19c24:	bic	r3, r3, #16
   19c28:	str	r3, [r4]
   19c2c:	strd	r0, [r4, #80]	; 0x50
   19c30:	mov	r0, #0
   19c34:	b	19bd4 <lchmod@@Base+0x374c>
   19c38:	mvn	r0, #0
   19c3c:	b	19bd4 <lchmod@@Base+0x374c>
   19c40:	push	{r4, lr}
   19c44:	ldrb	r3, [r0]
   19c48:	cmp	r3, #0
   19c4c:	beq	19c74 <lchmod@@Base+0x37ec>
   19c50:	mov	r2, r0
   19c54:	mov	r0, #0
   19c58:	add	r0, r3, r0, ror #23
   19c5c:	ldrb	r3, [r2, #1]!
   19c60:	cmp	r3, #0
   19c64:	bne	19c58 <lchmod@@Base+0x37d0>
   19c68:	bl	1a05c <lchmod@@Base+0x3bd4>
   19c6c:	mov	r0, r1
   19c70:	pop	{r4, pc}
   19c74:	mov	r0, #0
   19c78:	b	19c68 <lchmod@@Base+0x37e0>
   19c7c:	push	{r4, lr}
   19c80:	mov	r0, #14
   19c84:	bl	11724 <nl_langinfo@plt>
   19c88:	cmp	r0, #0
   19c8c:	beq	19ca4 <lchmod@@Base+0x381c>
   19c90:	ldrb	r2, [r0]
   19c94:	ldr	r3, [pc, #16]	; 19cac <lchmod@@Base+0x3824>
   19c98:	cmp	r2, #0
   19c9c:	moveq	r0, r3
   19ca0:	pop	{r4, pc}
   19ca4:	ldr	r0, [pc]	; 19cac <lchmod@@Base+0x3824>
   19ca8:	pop	{r4, pc}
   19cac:	andeq	sl, r1, r0, asr #31
   19cb0:	push	{r4, r5, r6, r7, lr}
   19cb4:	sub	sp, sp, #12
   19cb8:	mov	r7, r1
   19cbc:	mov	r5, r2
   19cc0:	subs	r6, r0, #0
   19cc4:	addeq	r6, sp, #4
   19cc8:	mov	r0, r6
   19ccc:	bl	115a4 <mbrtowc@plt>
   19cd0:	mov	r4, r0
   19cd4:	cmp	r5, #0
   19cd8:	cmnne	r0, #3
   19cdc:	bhi	19cec <lchmod@@Base+0x3864>
   19ce0:	mov	r0, r4
   19ce4:	add	sp, sp, #12
   19ce8:	pop	{r4, r5, r6, r7, pc}
   19cec:	mov	r0, #0
   19cf0:	bl	19d68 <lchmod@@Base+0x38e0>
   19cf4:	cmp	r0, #0
   19cf8:	ldrbeq	r3, [r7]
   19cfc:	streq	r3, [r6]
   19d00:	moveq	r4, #1
   19d04:	b	19ce0 <lchmod@@Base+0x3858>
   19d08:	push	{r4, r5, r6, lr}
   19d0c:	mov	r6, r0
   19d10:	mov	r5, r1
   19d14:	subs	r4, r2, #0
   19d18:	beq	19d44 <lchmod@@Base+0x38bc>
   19d1c:	mov	r1, r4
   19d20:	mvn	r0, #0
   19d24:	bl	19e70 <lchmod@@Base+0x39e8>
   19d28:	cmp	r0, r5
   19d2c:	bcs	19d44 <lchmod@@Base+0x38bc>
   19d30:	bl	11688 <__errno_location@plt>
   19d34:	mov	r3, #12
   19d38:	str	r3, [r0]
   19d3c:	mov	r0, #0
   19d40:	pop	{r4, r5, r6, pc}
   19d44:	mul	r1, r5, r4
   19d48:	mov	r0, r6
   19d4c:	bl	19588 <lchmod@@Base+0x3100>
   19d50:	pop	{r4, r5, r6, pc}
   19d54:	push	{r4, lr}
   19d58:	mov	r2, #3
   19d5c:	mov	r1, #0
   19d60:	bl	198a0 <lchmod@@Base+0x3418>
   19d64:	pop	{r4, pc}
   19d68:	push	{lr}		; (str lr, [sp, #-4]!)
   19d6c:	sub	sp, sp, #268	; 0x10c
   19d70:	ldr	r2, [pc, #68]	; 19dbc <lchmod@@Base+0x3934>
   19d74:	add	r1, sp, #4
   19d78:	bl	19dc8 <lchmod@@Base+0x3940>
   19d7c:	cmp	r0, #0
   19d80:	movne	r0, #0
   19d84:	bne	19db4 <lchmod@@Base+0x392c>
   19d88:	ldr	r1, [pc, #48]	; 19dc0 <lchmod@@Base+0x3938>
   19d8c:	add	r0, sp, #4
   19d90:	bl	11454 <strcmp@plt>
   19d94:	cmp	r0, #0
   19d98:	moveq	r0, #0
   19d9c:	beq	19db4 <lchmod@@Base+0x392c>
   19da0:	ldr	r1, [pc, #28]	; 19dc4 <lchmod@@Base+0x393c>
   19da4:	add	r0, sp, #4
   19da8:	bl	11454 <strcmp@plt>
   19dac:	adds	r0, r0, #0
   19db0:	movne	r0, #1
   19db4:	add	sp, sp, #268	; 0x10c
   19db8:	pop	{pc}		; (ldr pc, [sp], #4)
   19dbc:	andeq	r0, r0, r1, lsl #2
   19dc0:	andeq	sl, r1, r8, asr #31
   19dc4:	andeq	sl, r1, ip, asr #31
   19dc8:	push	{r4, r5, r6, lr}
   19dcc:	mov	r6, r1
   19dd0:	mov	r4, r2
   19dd4:	mov	r1, #0
   19dd8:	bl	11700 <setlocale@plt>
   19ddc:	subs	r5, r0, #0
   19de0:	beq	19e04 <lchmod@@Base+0x397c>
   19de4:	mov	r0, r5
   19de8:	bl	11658 <strlen@plt>
   19dec:	cmp	r4, r0
   19df0:	bhi	19e1c <lchmod@@Base+0x3994>
   19df4:	cmp	r4, #0
   19df8:	bne	19e34 <lchmod@@Base+0x39ac>
   19dfc:	mov	r0, #34	; 0x22
   19e00:	pop	{r4, r5, r6, pc}
   19e04:	cmp	r4, #0
   19e08:	beq	19e58 <lchmod@@Base+0x39d0>
   19e0c:	mov	r3, #0
   19e10:	strb	r3, [r6]
   19e14:	mov	r0, #22
   19e18:	pop	{r4, r5, r6, pc}
   19e1c:	add	r2, r0, #1
   19e20:	mov	r1, r5
   19e24:	mov	r0, r6
   19e28:	bl	114b4 <memcpy@plt>
   19e2c:	mov	r0, #0
   19e30:	pop	{r4, r5, r6, pc}
   19e34:	sub	r4, r4, #1
   19e38:	mov	r2, r4
   19e3c:	mov	r1, r5
   19e40:	mov	r0, r6
   19e44:	bl	114b4 <memcpy@plt>
   19e48:	mov	r3, #0
   19e4c:	strb	r3, [r6, r4]
   19e50:	mov	r0, #34	; 0x22
   19e54:	pop	{r4, r5, r6, pc}
   19e58:	mov	r0, #22
   19e5c:	pop	{r4, r5, r6, pc}
   19e60:	push	{r4, lr}
   19e64:	mov	r1, #0
   19e68:	bl	11700 <setlocale@plt>
   19e6c:	pop	{r4, pc}
   19e70:	subs	r2, r1, #1
   19e74:	bxeq	lr
   19e78:	bcc	1a050 <lchmod@@Base+0x3bc8>
   19e7c:	cmp	r0, r1
   19e80:	bls	1a034 <lchmod@@Base+0x3bac>
   19e84:	tst	r1, r2
   19e88:	beq	1a040 <lchmod@@Base+0x3bb8>
   19e8c:	clz	r3, r0
   19e90:	clz	r2, r1
   19e94:	sub	r3, r2, r3
   19e98:	rsbs	r3, r3, #31
   19e9c:	addne	r3, r3, r3, lsl #1
   19ea0:	mov	r2, #0
   19ea4:	addne	pc, pc, r3, lsl #2
   19ea8:	nop			; (mov r0, r0)
   19eac:	cmp	r0, r1, lsl #31
   19eb0:	adc	r2, r2, r2
   19eb4:	subcs	r0, r0, r1, lsl #31
   19eb8:	cmp	r0, r1, lsl #30
   19ebc:	adc	r2, r2, r2
   19ec0:	subcs	r0, r0, r1, lsl #30
   19ec4:	cmp	r0, r1, lsl #29
   19ec8:	adc	r2, r2, r2
   19ecc:	subcs	r0, r0, r1, lsl #29
   19ed0:	cmp	r0, r1, lsl #28
   19ed4:	adc	r2, r2, r2
   19ed8:	subcs	r0, r0, r1, lsl #28
   19edc:	cmp	r0, r1, lsl #27
   19ee0:	adc	r2, r2, r2
   19ee4:	subcs	r0, r0, r1, lsl #27
   19ee8:	cmp	r0, r1, lsl #26
   19eec:	adc	r2, r2, r2
   19ef0:	subcs	r0, r0, r1, lsl #26
   19ef4:	cmp	r0, r1, lsl #25
   19ef8:	adc	r2, r2, r2
   19efc:	subcs	r0, r0, r1, lsl #25
   19f00:	cmp	r0, r1, lsl #24
   19f04:	adc	r2, r2, r2
   19f08:	subcs	r0, r0, r1, lsl #24
   19f0c:	cmp	r0, r1, lsl #23
   19f10:	adc	r2, r2, r2
   19f14:	subcs	r0, r0, r1, lsl #23
   19f18:	cmp	r0, r1, lsl #22
   19f1c:	adc	r2, r2, r2
   19f20:	subcs	r0, r0, r1, lsl #22
   19f24:	cmp	r0, r1, lsl #21
   19f28:	adc	r2, r2, r2
   19f2c:	subcs	r0, r0, r1, lsl #21
   19f30:	cmp	r0, r1, lsl #20
   19f34:	adc	r2, r2, r2
   19f38:	subcs	r0, r0, r1, lsl #20
   19f3c:	cmp	r0, r1, lsl #19
   19f40:	adc	r2, r2, r2
   19f44:	subcs	r0, r0, r1, lsl #19
   19f48:	cmp	r0, r1, lsl #18
   19f4c:	adc	r2, r2, r2
   19f50:	subcs	r0, r0, r1, lsl #18
   19f54:	cmp	r0, r1, lsl #17
   19f58:	adc	r2, r2, r2
   19f5c:	subcs	r0, r0, r1, lsl #17
   19f60:	cmp	r0, r1, lsl #16
   19f64:	adc	r2, r2, r2
   19f68:	subcs	r0, r0, r1, lsl #16
   19f6c:	cmp	r0, r1, lsl #15
   19f70:	adc	r2, r2, r2
   19f74:	subcs	r0, r0, r1, lsl #15
   19f78:	cmp	r0, r1, lsl #14
   19f7c:	adc	r2, r2, r2
   19f80:	subcs	r0, r0, r1, lsl #14
   19f84:	cmp	r0, r1, lsl #13
   19f88:	adc	r2, r2, r2
   19f8c:	subcs	r0, r0, r1, lsl #13
   19f90:	cmp	r0, r1, lsl #12
   19f94:	adc	r2, r2, r2
   19f98:	subcs	r0, r0, r1, lsl #12
   19f9c:	cmp	r0, r1, lsl #11
   19fa0:	adc	r2, r2, r2
   19fa4:	subcs	r0, r0, r1, lsl #11
   19fa8:	cmp	r0, r1, lsl #10
   19fac:	adc	r2, r2, r2
   19fb0:	subcs	r0, r0, r1, lsl #10
   19fb4:	cmp	r0, r1, lsl #9
   19fb8:	adc	r2, r2, r2
   19fbc:	subcs	r0, r0, r1, lsl #9
   19fc0:	cmp	r0, r1, lsl #8
   19fc4:	adc	r2, r2, r2
   19fc8:	subcs	r0, r0, r1, lsl #8
   19fcc:	cmp	r0, r1, lsl #7
   19fd0:	adc	r2, r2, r2
   19fd4:	subcs	r0, r0, r1, lsl #7
   19fd8:	cmp	r0, r1, lsl #6
   19fdc:	adc	r2, r2, r2
   19fe0:	subcs	r0, r0, r1, lsl #6
   19fe4:	cmp	r0, r1, lsl #5
   19fe8:	adc	r2, r2, r2
   19fec:	subcs	r0, r0, r1, lsl #5
   19ff0:	cmp	r0, r1, lsl #4
   19ff4:	adc	r2, r2, r2
   19ff8:	subcs	r0, r0, r1, lsl #4
   19ffc:	cmp	r0, r1, lsl #3
   1a000:	adc	r2, r2, r2
   1a004:	subcs	r0, r0, r1, lsl #3
   1a008:	cmp	r0, r1, lsl #2
   1a00c:	adc	r2, r2, r2
   1a010:	subcs	r0, r0, r1, lsl #2
   1a014:	cmp	r0, r1, lsl #1
   1a018:	adc	r2, r2, r2
   1a01c:	subcs	r0, r0, r1, lsl #1
   1a020:	cmp	r0, r1
   1a024:	adc	r2, r2, r2
   1a028:	subcs	r0, r0, r1
   1a02c:	mov	r0, r2
   1a030:	bx	lr
   1a034:	moveq	r0, #1
   1a038:	movne	r0, #0
   1a03c:	bx	lr
   1a040:	clz	r2, r1
   1a044:	rsb	r2, r2, #31
   1a048:	lsr	r0, r0, r2
   1a04c:	bx	lr
   1a050:	cmp	r0, #0
   1a054:	mvnne	r0, #0
   1a058:	b	1a2f8 <lchmod@@Base+0x3e70>
   1a05c:	cmp	r1, #0
   1a060:	beq	1a050 <lchmod@@Base+0x3bc8>
   1a064:	push	{r0, r1, lr}
   1a068:	bl	19e70 <lchmod@@Base+0x39e8>
   1a06c:	pop	{r1, r2, lr}
   1a070:	mul	r3, r2, r0
   1a074:	sub	r1, r1, r3
   1a078:	bx	lr
   1a07c:	cmp	r1, #0
   1a080:	beq	1a28c <lchmod@@Base+0x3e04>
   1a084:	eor	ip, r0, r1
   1a088:	rsbmi	r1, r1, #0
   1a08c:	subs	r2, r1, #1
   1a090:	beq	1a258 <lchmod@@Base+0x3dd0>
   1a094:	movs	r3, r0
   1a098:	rsbmi	r3, r0, #0
   1a09c:	cmp	r3, r1
   1a0a0:	bls	1a264 <lchmod@@Base+0x3ddc>
   1a0a4:	tst	r1, r2
   1a0a8:	beq	1a274 <lchmod@@Base+0x3dec>
   1a0ac:	clz	r2, r3
   1a0b0:	clz	r0, r1
   1a0b4:	sub	r2, r0, r2
   1a0b8:	rsbs	r2, r2, #31
   1a0bc:	addne	r2, r2, r2, lsl #1
   1a0c0:	mov	r0, #0
   1a0c4:	addne	pc, pc, r2, lsl #2
   1a0c8:	nop			; (mov r0, r0)
   1a0cc:	cmp	r3, r1, lsl #31
   1a0d0:	adc	r0, r0, r0
   1a0d4:	subcs	r3, r3, r1, lsl #31
   1a0d8:	cmp	r3, r1, lsl #30
   1a0dc:	adc	r0, r0, r0
   1a0e0:	subcs	r3, r3, r1, lsl #30
   1a0e4:	cmp	r3, r1, lsl #29
   1a0e8:	adc	r0, r0, r0
   1a0ec:	subcs	r3, r3, r1, lsl #29
   1a0f0:	cmp	r3, r1, lsl #28
   1a0f4:	adc	r0, r0, r0
   1a0f8:	subcs	r3, r3, r1, lsl #28
   1a0fc:	cmp	r3, r1, lsl #27
   1a100:	adc	r0, r0, r0
   1a104:	subcs	r3, r3, r1, lsl #27
   1a108:	cmp	r3, r1, lsl #26
   1a10c:	adc	r0, r0, r0
   1a110:	subcs	r3, r3, r1, lsl #26
   1a114:	cmp	r3, r1, lsl #25
   1a118:	adc	r0, r0, r0
   1a11c:	subcs	r3, r3, r1, lsl #25
   1a120:	cmp	r3, r1, lsl #24
   1a124:	adc	r0, r0, r0
   1a128:	subcs	r3, r3, r1, lsl #24
   1a12c:	cmp	r3, r1, lsl #23
   1a130:	adc	r0, r0, r0
   1a134:	subcs	r3, r3, r1, lsl #23
   1a138:	cmp	r3, r1, lsl #22
   1a13c:	adc	r0, r0, r0
   1a140:	subcs	r3, r3, r1, lsl #22
   1a144:	cmp	r3, r1, lsl #21
   1a148:	adc	r0, r0, r0
   1a14c:	subcs	r3, r3, r1, lsl #21
   1a150:	cmp	r3, r1, lsl #20
   1a154:	adc	r0, r0, r0
   1a158:	subcs	r3, r3, r1, lsl #20
   1a15c:	cmp	r3, r1, lsl #19
   1a160:	adc	r0, r0, r0
   1a164:	subcs	r3, r3, r1, lsl #19
   1a168:	cmp	r3, r1, lsl #18
   1a16c:	adc	r0, r0, r0
   1a170:	subcs	r3, r3, r1, lsl #18
   1a174:	cmp	r3, r1, lsl #17
   1a178:	adc	r0, r0, r0
   1a17c:	subcs	r3, r3, r1, lsl #17
   1a180:	cmp	r3, r1, lsl #16
   1a184:	adc	r0, r0, r0
   1a188:	subcs	r3, r3, r1, lsl #16
   1a18c:	cmp	r3, r1, lsl #15
   1a190:	adc	r0, r0, r0
   1a194:	subcs	r3, r3, r1, lsl #15
   1a198:	cmp	r3, r1, lsl #14
   1a19c:	adc	r0, r0, r0
   1a1a0:	subcs	r3, r3, r1, lsl #14
   1a1a4:	cmp	r3, r1, lsl #13
   1a1a8:	adc	r0, r0, r0
   1a1ac:	subcs	r3, r3, r1, lsl #13
   1a1b0:	cmp	r3, r1, lsl #12
   1a1b4:	adc	r0, r0, r0
   1a1b8:	subcs	r3, r3, r1, lsl #12
   1a1bc:	cmp	r3, r1, lsl #11
   1a1c0:	adc	r0, r0, r0
   1a1c4:	subcs	r3, r3, r1, lsl #11
   1a1c8:	cmp	r3, r1, lsl #10
   1a1cc:	adc	r0, r0, r0
   1a1d0:	subcs	r3, r3, r1, lsl #10
   1a1d4:	cmp	r3, r1, lsl #9
   1a1d8:	adc	r0, r0, r0
   1a1dc:	subcs	r3, r3, r1, lsl #9
   1a1e0:	cmp	r3, r1, lsl #8
   1a1e4:	adc	r0, r0, r0
   1a1e8:	subcs	r3, r3, r1, lsl #8
   1a1ec:	cmp	r3, r1, lsl #7
   1a1f0:	adc	r0, r0, r0
   1a1f4:	subcs	r3, r3, r1, lsl #7
   1a1f8:	cmp	r3, r1, lsl #6
   1a1fc:	adc	r0, r0, r0
   1a200:	subcs	r3, r3, r1, lsl #6
   1a204:	cmp	r3, r1, lsl #5
   1a208:	adc	r0, r0, r0
   1a20c:	subcs	r3, r3, r1, lsl #5
   1a210:	cmp	r3, r1, lsl #4
   1a214:	adc	r0, r0, r0
   1a218:	subcs	r3, r3, r1, lsl #4
   1a21c:	cmp	r3, r1, lsl #3
   1a220:	adc	r0, r0, r0
   1a224:	subcs	r3, r3, r1, lsl #3
   1a228:	cmp	r3, r1, lsl #2
   1a22c:	adc	r0, r0, r0
   1a230:	subcs	r3, r3, r1, lsl #2
   1a234:	cmp	r3, r1, lsl #1
   1a238:	adc	r0, r0, r0
   1a23c:	subcs	r3, r3, r1, lsl #1
   1a240:	cmp	r3, r1
   1a244:	adc	r0, r0, r0
   1a248:	subcs	r3, r3, r1
   1a24c:	cmp	ip, #0
   1a250:	rsbmi	r0, r0, #0
   1a254:	bx	lr
   1a258:	teq	ip, r0
   1a25c:	rsbmi	r0, r0, #0
   1a260:	bx	lr
   1a264:	movcc	r0, #0
   1a268:	asreq	r0, ip, #31
   1a26c:	orreq	r0, r0, #1
   1a270:	bx	lr
   1a274:	clz	r2, r1
   1a278:	rsb	r2, r2, #31
   1a27c:	cmp	ip, #0
   1a280:	lsr	r0, r3, r2
   1a284:	rsbmi	r0, r0, #0
   1a288:	bx	lr
   1a28c:	cmp	r0, #0
   1a290:	mvngt	r0, #-2147483648	; 0x80000000
   1a294:	movlt	r0, #-2147483648	; 0x80000000
   1a298:	b	1a2f8 <lchmod@@Base+0x3e70>
   1a29c:	cmp	r1, #0
   1a2a0:	beq	1a28c <lchmod@@Base+0x3e04>
   1a2a4:	push	{r0, r1, lr}
   1a2a8:	bl	1a084 <lchmod@@Base+0x3bfc>
   1a2ac:	pop	{r1, r2, lr}
   1a2b0:	mul	r3, r2, r0
   1a2b4:	sub	r1, r1, r3
   1a2b8:	bx	lr
   1a2bc:	cmp	r3, #0
   1a2c0:	cmpeq	r2, #0
   1a2c4:	bne	1a2dc <lchmod@@Base+0x3e54>
   1a2c8:	cmp	r1, #0
   1a2cc:	cmpeq	r0, #0
   1a2d0:	mvnne	r1, #0
   1a2d4:	mvnne	r0, #0
   1a2d8:	b	1a2f8 <lchmod@@Base+0x3e70>
   1a2dc:	sub	sp, sp, #8
   1a2e0:	push	{sp, lr}
   1a2e4:	bl	1a308 <lchmod@@Base+0x3e80>
   1a2e8:	ldr	lr, [sp, #4]
   1a2ec:	add	sp, sp, #8
   1a2f0:	pop	{r2, r3}
   1a2f4:	bx	lr
   1a2f8:	push	{r1, lr}
   1a2fc:	mov	r0, #8
   1a300:	bl	1143c <raise@plt>
   1a304:	pop	{r1, pc}
   1a308:	cmp	r1, r3
   1a30c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a310:	cmpeq	r0, r2
   1a314:	mov	r4, r0
   1a318:	mov	r5, r1
   1a31c:	ldr	r9, [sp, #28]
   1a320:	movcc	r0, #0
   1a324:	movcc	r1, #0
   1a328:	bcc	1a420 <lchmod@@Base+0x3f98>
   1a32c:	cmp	r3, #0
   1a330:	clzeq	ip, r2
   1a334:	clzne	ip, r3
   1a338:	addeq	ip, ip, #32
   1a33c:	cmp	r5, #0
   1a340:	clzeq	r1, r4
   1a344:	addeq	r1, r1, #32
   1a348:	clzne	r1, r5
   1a34c:	sub	ip, ip, r1
   1a350:	sub	lr, ip, #32
   1a354:	lsl	r7, r3, ip
   1a358:	rsb	r8, ip, #32
   1a35c:	orr	r7, r7, r2, lsl lr
   1a360:	orr	r7, r7, r2, lsr r8
   1a364:	lsl	r6, r2, ip
   1a368:	cmp	r5, r7
   1a36c:	cmpeq	r4, r6
   1a370:	movcc	r0, #0
   1a374:	movcc	r1, #0
   1a378:	bcc	1a394 <lchmod@@Base+0x3f0c>
   1a37c:	mov	r3, #1
   1a380:	subs	r4, r4, r6
   1a384:	lsl	r1, r3, lr
   1a388:	lsl	r0, r3, ip
   1a38c:	orr	r1, r1, r3, lsr r8
   1a390:	sbc	r5, r5, r7
   1a394:	cmp	ip, #0
   1a398:	beq	1a420 <lchmod@@Base+0x3f98>
   1a39c:	lsrs	r3, r7, #1
   1a3a0:	rrx	r2, r6
   1a3a4:	mov	r6, ip
   1a3a8:	b	1a3cc <lchmod@@Base+0x3f44>
   1a3ac:	subs	r4, r4, r2
   1a3b0:	sbc	r5, r5, r3
   1a3b4:	adds	r4, r4, r4
   1a3b8:	adc	r5, r5, r5
   1a3bc:	adds	r4, r4, #1
   1a3c0:	adc	r5, r5, #0
   1a3c4:	subs	r6, r6, #1
   1a3c8:	beq	1a3e8 <lchmod@@Base+0x3f60>
   1a3cc:	cmp	r5, r3
   1a3d0:	cmpeq	r4, r2
   1a3d4:	bcs	1a3ac <lchmod@@Base+0x3f24>
   1a3d8:	adds	r4, r4, r4
   1a3dc:	adc	r5, r5, r5
   1a3e0:	subs	r6, r6, #1
   1a3e4:	bne	1a3cc <lchmod@@Base+0x3f44>
   1a3e8:	lsr	r6, r4, ip
   1a3ec:	lsr	r7, r5, ip
   1a3f0:	orr	r6, r6, r5, lsl r8
   1a3f4:	adds	r2, r0, r4
   1a3f8:	orr	r6, r6, r5, lsr lr
   1a3fc:	adc	r3, r1, r5
   1a400:	lsl	r1, r7, ip
   1a404:	orr	r1, r1, r6, lsl lr
   1a408:	lsl	r0, r6, ip
   1a40c:	orr	r1, r1, r6, lsr r8
   1a410:	subs	r0, r2, r0
   1a414:	mov	r4, r6
   1a418:	mov	r5, r7
   1a41c:	sbc	r1, r3, r1
   1a420:	cmp	r9, #0
   1a424:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a428:	strd	r4, [r9]
   1a42c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a430:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a434:	mov	r7, r0
   1a438:	ldr	r6, [pc, #72]	; 1a488 <lchmod@@Base+0x4000>
   1a43c:	ldr	r5, [pc, #72]	; 1a48c <lchmod@@Base+0x4004>
   1a440:	add	r6, pc, r6
   1a444:	add	r5, pc, r5
   1a448:	sub	r6, r6, r5
   1a44c:	mov	r8, r1
   1a450:	mov	r9, r2
   1a454:	bl	113ec <fstatfs64@plt-0x20>
   1a458:	asrs	r6, r6, #2
   1a45c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a460:	mov	r4, #0
   1a464:	add	r4, r4, #1
   1a468:	ldr	r3, [r5], #4
   1a46c:	mov	r2, r9
   1a470:	mov	r1, r8
   1a474:	mov	r0, r7
   1a478:	blx	r3
   1a47c:	cmp	r6, r4
   1a480:	bne	1a464 <lchmod@@Base+0x3fdc>
   1a484:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a488:	andeq	r1, r1, r0, asr #21
   1a48c:			; <UNDEFINED> instruction: 0x00011ab8
   1a490:	bx	lr
   1a494:	ldr	r3, [pc, #12]	; 1a4a8 <lchmod@@Base+0x4020>
   1a498:	mov	r1, #0
   1a49c:	add	r3, pc, r3
   1a4a0:	ldr	r2, [r3]
   1a4a4:	b	116a0 <__cxa_atexit@plt>
   1a4a8:	ldrdeq	r1, [r1], -r4

Disassembly of section .fini:

0001a4ac <.fini>:
   1a4ac:	push	{r3, lr}
   1a4b0:	pop	{r3, pc}
