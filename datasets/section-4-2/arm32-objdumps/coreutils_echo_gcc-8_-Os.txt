
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010aec <.init>:
   10aec:	push	{r3, lr}
   10af0:	bl	11174 <__assert_fail@plt+0x458>
   10af4:	pop	{r3, pc}

Disassembly of section .plt:

00010af8 <calloc@plt-0x14>:
   10af8:	push	{lr}		; (str lr, [sp, #-4]!)
   10afc:	ldr	lr, [pc, #4]	; 10b08 <calloc@plt-0x4>
   10b00:	add	lr, pc, lr
   10b04:	ldr	pc, [lr, #8]!
   10b08:	strdeq	r4, [r1], -r8

00010b0c <calloc@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #20, 20	; 0x14000
   10b14:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b18 <fputs_unlocked@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #20, 20	; 0x14000
   10b20:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b24 <strcmp@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #20, 20	; 0x14000
   10b2c:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b30 <fflush@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #20, 20	; 0x14000
   10b38:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b3c <free@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #20, 20	; 0x14000
   10b44:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b48 <_exit@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #20, 20	; 0x14000
   10b50:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b54 <memcpy@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #20, 20	; 0x14000
   10b5c:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b60 <mbsinit@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #20, 20	; 0x14000
   10b68:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b6c <memcmp@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #20, 20	; 0x14000
   10b74:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b78 <fputc_unlocked@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #20, 20	; 0x14000
   10b80:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b84 <dcgettext@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #20, 20	; 0x14000
   10b8c:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b90 <realloc@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #20, 20	; 0x14000
   10b98:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b9c <textdomain@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #20, 20	; 0x14000
   10ba4:	ldr	pc, [ip, #1176]!	; 0x498

00010ba8 <iswprint@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #20, 20	; 0x14000
   10bb0:	ldr	pc, [ip, #1168]!	; 0x490

00010bb4 <lseek64@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #20, 20	; 0x14000
   10bbc:	ldr	pc, [ip, #1160]!	; 0x488

00010bc0 <__ctype_get_mb_cur_max@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #20, 20	; 0x14000
   10bc8:	ldr	pc, [ip, #1152]!	; 0x480

00010bcc <__fpending@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #20, 20	; 0x14000
   10bd4:	ldr	pc, [ip, #1144]!	; 0x478

00010bd8 <ferror_unlocked@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #20, 20	; 0x14000
   10be0:	ldr	pc, [ip, #1136]!	; 0x470

00010be4 <mbrtowc@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #20, 20	; 0x14000
   10bec:	ldr	pc, [ip, #1128]!	; 0x468

00010bf0 <error@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #20, 20	; 0x14000
   10bf8:	ldr	pc, [ip, #1120]!	; 0x460

00010bfc <getenv@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #20, 20	; 0x14000
   10c04:	ldr	pc, [ip, #1112]!	; 0x458

00010c08 <malloc@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #20, 20	; 0x14000
   10c10:	ldr	pc, [ip, #1104]!	; 0x450

00010c14 <__libc_start_main@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #20, 20	; 0x14000
   10c1c:	ldr	pc, [ip, #1096]!	; 0x448

00010c20 <__freading@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #20, 20	; 0x14000
   10c28:	ldr	pc, [ip, #1088]!	; 0x440

00010c2c <__gmon_start__@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #20, 20	; 0x14000
   10c34:	ldr	pc, [ip, #1080]!	; 0x438

00010c38 <__ctype_b_loc@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #20, 20	; 0x14000
   10c40:	ldr	pc, [ip, #1072]!	; 0x430

00010c44 <exit@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #20, 20	; 0x14000
   10c4c:	ldr	pc, [ip, #1064]!	; 0x428

00010c50 <strlen@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #20, 20	; 0x14000
   10c58:	ldr	pc, [ip, #1056]!	; 0x420

00010c5c <__errno_location@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #20, 20	; 0x14000
   10c64:	ldr	pc, [ip, #1048]!	; 0x418

00010c68 <__cxa_atexit@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #20, 20	; 0x14000
   10c70:	ldr	pc, [ip, #1040]!	; 0x410

00010c74 <memset@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #20, 20	; 0x14000
   10c7c:	ldr	pc, [ip, #1032]!	; 0x408

00010c80 <__printf_chk@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #1024]!	; 0x400

00010c8c <fileno@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c98 <__fprintf_chk@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #1008]!	; 0x3f0

00010ca4 <fclose@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #1000]!	; 0x3e8

00010cb0 <fseeko64@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #992]!	; 0x3e0

00010cbc <setlocale@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #984]!	; 0x3d8

00010cc8 <strrchr@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #976]!	; 0x3d0

00010cd4 <nl_langinfo@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #20, 20	; 0x14000
   10cdc:	ldr	pc, [ip, #968]!	; 0x3c8

00010ce0 <bindtextdomain@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #960]!	; 0x3c0

00010cec <fputs@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #952]!	; 0x3b8

00010cf8 <strncmp@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #944]!	; 0x3b0

00010d04 <abort@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #936]!	; 0x3a8

00010d10 <putchar_unlocked@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #928]!	; 0x3a0

00010d1c <__assert_fail@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #920]!	; 0x398

Disassembly of section .text:

00010d28 <.text>:
   10d28:	push	{r4, lr}
   10d2c:	bl	10c5c <__errno_location@plt>
   10d30:	mov	r3, #12
   10d34:	str	r3, [r0]
   10d38:	mov	r0, #0
   10d3c:	pop	{r4, pc}
   10d40:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   10d44:	mov	r5, r0
   10d48:	mov	r6, r1
   10d4c:	ldr	r0, [pc, #940]	; 11100 <__assert_fail@plt+0x3e4>
   10d50:	bl	10bfc <getenv@plt>
   10d54:	cmp	r0, #0
   10d58:	movne	r7, #1
   10d5c:	moveq	r7, #0
   10d60:	moveq	r4, #1
   10d64:	beq	10d88 <__assert_fail@plt+0x6c>
   10d68:	cmp	r5, #1
   10d6c:	movle	r4, #0
   10d70:	ble	10d88 <__assert_fail@plt+0x6c>
   10d74:	ldr	r1, [pc, #904]	; 11104 <__assert_fail@plt+0x3e8>
   10d78:	ldr	r0, [r6, #4]
   10d7c:	bl	10b24 <strcmp@plt>
   10d80:	clz	r4, r0
   10d84:	lsr	r4, r4, #5
   10d88:	ldr	r0, [r6]
   10d8c:	bl	11678 <__assert_fail@plt+0x95c>
   10d90:	ldr	r1, [pc, #880]	; 11108 <__assert_fail@plt+0x3ec>
   10d94:	mov	r0, #6
   10d98:	bl	10cbc <setlocale@plt>
   10d9c:	ldr	r1, [pc, #872]	; 1110c <__assert_fail@plt+0x3f0>
   10da0:	ldr	r0, [pc, #872]	; 11110 <__assert_fail@plt+0x3f4>
   10da4:	bl	10ce0 <bindtextdomain@plt>
   10da8:	ldr	r0, [pc, #864]	; 11110 <__assert_fail@plt+0x3f4>
   10dac:	bl	10b9c <textdomain@plt>
   10db0:	ldr	r0, [pc, #860]	; 11114 <__assert_fail@plt+0x3f8>
   10db4:	bl	139b4 <__assert_fail@plt+0x2c98>
   10db8:	cmp	r5, #2
   10dbc:	movne	r3, #0
   10dc0:	andeq	r3, r4, #1
   10dc4:	cmp	r3, #0
   10dc8:	beq	10e38 <__assert_fail@plt+0x11c>
   10dcc:	ldr	r8, [r6, #4]
   10dd0:	ldr	r1, [pc, #832]	; 11118 <__assert_fail@plt+0x3fc>
   10dd4:	mov	r0, r8
   10dd8:	bl	10b24 <strcmp@plt>
   10ddc:	cmp	r0, #0
   10de0:	bne	10de8 <__assert_fail@plt+0xcc>
   10de4:	bl	112c8 <__assert_fail@plt+0x5ac>
   10de8:	ldr	r1, [pc, #812]	; 1111c <__assert_fail@plt+0x400>
   10dec:	mov	r0, r8
   10df0:	bl	10b24 <strcmp@plt>
   10df4:	cmp	r0, #0
   10df8:	bne	10e38 <__assert_fail@plt+0x11c>
   10dfc:	ldr	r3, [pc, #796]	; 11120 <__assert_fail@plt+0x404>
   10e00:	ldr	r2, [pc, #796]	; 11124 <__assert_fail@plt+0x408>
   10e04:	ldr	r1, [pc, #796]	; 11128 <__assert_fail@plt+0x40c>
   10e08:	str	r3, [sp, #4]
   10e0c:	ldr	r3, [pc, #792]	; 1112c <__assert_fail@plt+0x410>
   10e10:	str	r0, [sp, #8]
   10e14:	ldr	r0, [pc, #788]	; 11130 <__assert_fail@plt+0x414>
   10e18:	str	r3, [sp]
   10e1c:	ldr	r3, [pc, #784]	; 11134 <__assert_fail@plt+0x418>
   10e20:	ldr	r0, [r0]
   10e24:	ldr	r3, [r3]
   10e28:	bl	130c4 <__assert_fail@plt+0x23a8>
   10e2c:	mov	r0, #0
   10e30:	add	sp, sp, #16
   10e34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e38:	cmp	r4, #0
   10e3c:	add	r6, r6, #4
   10e40:	sub	r5, r5, #1
   10e44:	movne	r0, r6
   10e48:	movne	r4, #0
   10e4c:	movne	r8, #1
   10e50:	bne	10e8c <__assert_fail@plt+0x170>
   10e54:	mov	r8, #1
   10e58:	b	10ec8 <__assert_fail@plt+0x1ac>
   10e5c:	mov	ip, r3
   10e60:	mov	r2, r3
   10e64:	ldrb	r1, [r2, #1]
   10e68:	add	lr, r2, #1
   10e6c:	cmp	r1, #0
   10e70:	bne	10eac <__assert_fail@plt+0x190>
   10e74:	cmp	r2, r3
   10e78:	beq	10ec8 <__assert_fail@plt+0x1ac>
   10e7c:	ldrb	r3, [ip, #1]!
   10e80:	cmp	r3, #0
   10e84:	bne	10f04 <__assert_fail@plt+0x1e8>
   10e88:	sub	r5, r5, #1
   10e8c:	cmp	r5, #0
   10e90:	mov	r6, r0
   10e94:	ble	10ec8 <__assert_fail@plt+0x1ac>
   10e98:	ldr	r3, [r0], #4
   10e9c:	ldrb	r2, [r3]
   10ea0:	cmp	r2, #45	; 0x2d
   10ea4:	beq	10e5c <__assert_fail@plt+0x140>
   10ea8:	b	10ec8 <__assert_fail@plt+0x1ac>
   10eac:	cmp	r1, #101	; 0x65
   10eb0:	mov	r2, lr
   10eb4:	beq	10e64 <__assert_fail@plt+0x148>
   10eb8:	cmp	r1, #110	; 0x6e
   10ebc:	beq	10e64 <__assert_fail@plt+0x148>
   10ec0:	cmp	r1, #69	; 0x45
   10ec4:	beq	10e64 <__assert_fail@plt+0x148>
   10ec8:	orr	r4, r4, r7
   10ecc:	tst	r4, #255	; 0xff
   10ed0:	ldreq	r4, [pc, #600]	; 11130 <__assert_fail@plt+0x414>
   10ed4:	subne	r6, r6, #4
   10ed8:	bne	10f4c <__assert_fail@plt+0x230>
   10edc:	cmp	r5, #0
   10ee0:	ble	10f54 <__assert_fail@plt+0x238>
   10ee4:	ldr	r0, [r6], #4
   10ee8:	ldr	r1, [r4]
   10eec:	bl	10b18 <fputs_unlocked@plt>
   10ef0:	subs	r5, r5, #1
   10ef4:	beq	10f54 <__assert_fail@plt+0x238>
   10ef8:	mov	r0, #32
   10efc:	bl	10d10 <putchar_unlocked@plt>
   10f00:	b	10edc <__assert_fail@plt+0x1c0>
   10f04:	cmp	r3, #101	; 0x65
   10f08:	moveq	r4, #1
   10f0c:	beq	10e7c <__assert_fail@plt+0x160>
   10f10:	cmp	r3, #110	; 0x6e
   10f14:	moveq	r8, #0
   10f18:	beq	10e7c <__assert_fail@plt+0x160>
   10f1c:	cmp	r3, #69	; 0x45
   10f20:	moveq	r4, #0
   10f24:	b	10e7c <__assert_fail@plt+0x160>
   10f28:	ldr	sl, [r6, #4]!
   10f2c:	mov	r7, sl
   10f30:	ldrb	r0, [r7], #1
   10f34:	cmp	r0, #0
   10f38:	bne	10f68 <__assert_fail@plt+0x24c>
   10f3c:	subs	r5, r5, #1
   10f40:	beq	10f54 <__assert_fail@plt+0x238>
   10f44:	mov	r0, #32
   10f48:	bl	10d10 <putchar_unlocked@plt>
   10f4c:	cmp	r5, #0
   10f50:	bgt	10f28 <__assert_fail@plt+0x20c>
   10f54:	cmp	r8, #0
   10f58:	beq	10e2c <__assert_fail@plt+0x110>
   10f5c:	mov	r0, #10
   10f60:	bl	10d10 <putchar_unlocked@plt>
   10f64:	b	10e2c <__assert_fail@plt+0x110>
   10f68:	cmp	r0, #92	; 0x5c
   10f6c:	bne	10fd0 <__assert_fail@plt+0x2b4>
   10f70:	ldrb	r4, [sl, #1]
   10f74:	cmp	r4, #0
   10f78:	beq	10fd0 <__assert_fail@plt+0x2b4>
   10f7c:	cmp	r4, #99	; 0x63
   10f80:	add	r7, sl, #2
   10f84:	beq	10e2c <__assert_fail@plt+0x110>
   10f88:	bhi	10fdc <__assert_fail@plt+0x2c0>
   10f8c:	cmp	r4, #55	; 0x37
   10f90:	bhi	10fb4 <__assert_fail@plt+0x298>
   10f94:	cmp	r4, #49	; 0x31
   10f98:	bcs	11038 <__assert_fail@plt+0x31c>
   10f9c:	cmp	r4, #48	; 0x30
   10fa0:	beq	110e0 <__assert_fail@plt+0x3c4>
   10fa4:	mov	r0, #92	; 0x5c
   10fa8:	bl	10d10 <putchar_unlocked@plt>
   10fac:	mov	r0, r4
   10fb0:	b	10fd0 <__assert_fail@plt+0x2b4>
   10fb4:	cmp	r4, #97	; 0x61
   10fb8:	moveq	r0, #7
   10fbc:	beq	10fd0 <__assert_fail@plt+0x2b4>
   10fc0:	movhi	r0, #8
   10fc4:	bhi	10fd0 <__assert_fail@plt+0x2b4>
   10fc8:	cmp	r4, #92	; 0x5c
   10fcc:	bne	10fa4 <__assert_fail@plt+0x288>
   10fd0:	bl	10d10 <putchar_unlocked@plt>
   10fd4:	mov	sl, r7
   10fd8:	b	10f2c <__assert_fail@plt+0x210>
   10fdc:	cmp	r4, #114	; 0x72
   10fe0:	moveq	r0, #13
   10fe4:	beq	10fd0 <__assert_fail@plt+0x2b4>
   10fe8:	bhi	11014 <__assert_fail@plt+0x2f8>
   10fec:	cmp	r4, #102	; 0x66
   10ff0:	moveq	r0, #12
   10ff4:	beq	10fd0 <__assert_fail@plt+0x2b4>
   10ff8:	cmp	r4, #110	; 0x6e
   10ffc:	moveq	r0, #10
   11000:	beq	10fd0 <__assert_fail@plt+0x2b4>
   11004:	cmp	r4, #101	; 0x65
   11008:	bne	10fa4 <__assert_fail@plt+0x288>
   1100c:	mov	r0, #27
   11010:	b	10fd0 <__assert_fail@plt+0x2b4>
   11014:	cmp	r4, #118	; 0x76
   11018:	moveq	r0, #11
   1101c:	beq	10fd0 <__assert_fail@plt+0x2b4>
   11020:	cmp	r4, #120	; 0x78
   11024:	beq	11080 <__assert_fail@plt+0x364>
   11028:	cmp	r4, #116	; 0x74
   1102c:	bne	10fa4 <__assert_fail@plt+0x288>
   11030:	mov	r0, #9
   11034:	b	10fd0 <__assert_fail@plt+0x2b4>
   11038:	ldrb	r3, [sl, #2]
   1103c:	sub	r3, r3, #48	; 0x30
   11040:	sub	r0, r4, #48	; 0x30
   11044:	uxtb	r3, r3
   11048:	uxtb	r0, r0
   1104c:	cmp	r3, #7
   11050:	addls	r7, r7, #1
   11054:	addls	r0, r3, r0, lsl #3
   11058:	ldrb	r3, [r7]
   1105c:	andls	r0, r0, #255	; 0xff
   11060:	sub	r2, r3, #48	; 0x30
   11064:	cmp	r2, #7
   11068:	bhi	10fd0 <__assert_fail@plt+0x2b4>
   1106c:	add	r0, r3, r0, lsl #3
   11070:	add	r7, r7, #1
   11074:	sub	r0, r0, #48	; 0x30
   11078:	and	r0, r0, #255	; 0xff
   1107c:	b	10fd0 <__assert_fail@plt+0x2b4>
   11080:	ldrb	r9, [sl, #2]
   11084:	bl	10c38 <__ctype_b_loc@plt>
   11088:	ldr	r3, [r0]
   1108c:	lsl	r2, r9, #1
   11090:	ldrh	r2, [r3, r2]
   11094:	tst	r2, #4096	; 0x1000
   11098:	beq	10fa4 <__assert_fail@plt+0x288>
   1109c:	mov	r0, r9
   110a0:	bl	11228 <__assert_fail@plt+0x50c>
   110a4:	ldrb	r2, [sl, #3]
   110a8:	uxtb	r0, r0
   110ac:	lsl	r1, r2, #1
   110b0:	ldrh	r3, [r3, r1]
   110b4:	tst	r3, #4096	; 0x1000
   110b8:	addeq	r7, sl, #3
   110bc:	beq	10fd0 <__assert_fail@plt+0x2b4>
   110c0:	lsl	r3, r0, #4
   110c4:	mov	r0, r2
   110c8:	add	r7, sl, #4
   110cc:	uxtb	r3, r3
   110d0:	bl	11228 <__assert_fail@plt+0x50c>
   110d4:	add	r0, r3, r0
   110d8:	uxtb	r0, r0
   110dc:	b	10fd0 <__assert_fail@plt+0x2b4>
   110e0:	ldrb	r4, [sl, #2]
   110e4:	sub	r3, r4, #48	; 0x30
   110e8:	cmp	r3, #7
   110ec:	movhi	r0, #0
   110f0:	bhi	10fd0 <__assert_fail@plt+0x2b4>
   110f4:	add	r7, sl, #3
   110f8:	ldrb	r3, [sl, #3]
   110fc:	b	1103c <__assert_fail@plt+0x320>
   11100:	andeq	r3, r1, r2, ror #30
   11104:	andeq	r3, r1, r2, ror pc
   11108:	andeq	r3, r1, r0, lsl #24
   1110c:	andeq	r3, r1, r5, ror pc
   11110:			; <UNDEFINED> instruction: 0x00013ebf
   11114:	andeq	r1, r1, r4, lsr #11
   11118:	andeq	r3, r1, sp, lsl #31
   1111c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11120:	muleq	r1, lr, pc	; <UNPREDICTABLE>
   11124:			; <UNDEFINED> instruction: 0x00013ebb
   11128:	andeq	r3, r1, r8, lsl sl
   1112c:	andeq	r3, r1, r9, lsr #31
   11130:	andeq	r5, r2, r4, lsr #2
   11134:	andeq	r5, r2, ip, asr #1
   11138:	mov	fp, #0
   1113c:	mov	lr, #0
   11140:	pop	{r1}		; (ldr r1, [sp], #4)
   11144:	mov	r2, sp
   11148:	push	{r2}		; (str r2, [sp, #-4]!)
   1114c:	push	{r0}		; (str r0, [sp, #-4]!)
   11150:	ldr	ip, [pc, #16]	; 11168 <__assert_fail@plt+0x44c>
   11154:	push	{ip}		; (str ip, [sp, #-4]!)
   11158:	ldr	r0, [pc, #12]	; 1116c <__assert_fail@plt+0x450>
   1115c:	ldr	r3, [pc, #12]	; 11170 <__assert_fail@plt+0x454>
   11160:	bl	10c14 <__libc_start_main@plt>
   11164:	bl	10d04 <abort@plt>
   11168:			; <UNDEFINED> instruction: 0x000139b0
   1116c:	andeq	r0, r1, r0, asr #26
   11170:	andeq	r3, r1, r0, asr r9
   11174:	ldr	r3, [pc, #20]	; 11190 <__assert_fail@plt+0x474>
   11178:	ldr	r2, [pc, #20]	; 11194 <__assert_fail@plt+0x478>
   1117c:	add	r3, pc, r3
   11180:	ldr	r2, [r3, r2]
   11184:	cmp	r2, #0
   11188:	bxeq	lr
   1118c:	b	10c2c <__gmon_start__@plt>
   11190:	andeq	r3, r1, ip, ror lr
   11194:	andeq	r0, r0, r0, asr #1
   11198:	ldr	r0, [pc, #24]	; 111b8 <__assert_fail@plt+0x49c>
   1119c:	ldr	r3, [pc, #24]	; 111bc <__assert_fail@plt+0x4a0>
   111a0:	cmp	r3, r0
   111a4:	bxeq	lr
   111a8:	ldr	r3, [pc, #16]	; 111c0 <__assert_fail@plt+0x4a4>
   111ac:	cmp	r3, #0
   111b0:	bxeq	lr
   111b4:	bx	r3
   111b8:	andeq	r5, r2, r4, lsl r1
   111bc:	andeq	r5, r2, r4, lsl r1
   111c0:	andeq	r0, r0, r0
   111c4:	ldr	r0, [pc, #36]	; 111f0 <__assert_fail@plt+0x4d4>
   111c8:	ldr	r1, [pc, #36]	; 111f4 <__assert_fail@plt+0x4d8>
   111cc:	sub	r1, r1, r0
   111d0:	asr	r1, r1, #2
   111d4:	add	r1, r1, r1, lsr #31
   111d8:	asrs	r1, r1, #1
   111dc:	bxeq	lr
   111e0:	ldr	r3, [pc, #16]	; 111f8 <__assert_fail@plt+0x4dc>
   111e4:	cmp	r3, #0
   111e8:	bxeq	lr
   111ec:	bx	r3
   111f0:	andeq	r5, r2, r4, lsl r1
   111f4:	andeq	r5, r2, r4, lsl r1
   111f8:	andeq	r0, r0, r0
   111fc:	push	{r4, lr}
   11200:	ldr	r4, [pc, #24]	; 11220 <__assert_fail@plt+0x504>
   11204:	ldrb	r3, [r4]
   11208:	cmp	r3, #0
   1120c:	popne	{r4, pc}
   11210:	bl	11198 <__assert_fail@plt+0x47c>
   11214:	mov	r3, #1
   11218:	strb	r3, [r4]
   1121c:	pop	{r4, pc}
   11220:	andeq	r5, r2, r8, lsr #2
   11224:	b	111c4 <__assert_fail@plt+0x4a8>
   11228:	cmp	r0, #70	; 0x46
   1122c:	beq	112a0 <__assert_fail@plt+0x584>
   11230:	bhi	11270 <__assert_fail@plt+0x554>
   11234:	cmp	r0, #67	; 0x43
   11238:	beq	112a8 <__assert_fail@plt+0x58c>
   1123c:	bhi	11258 <__assert_fail@plt+0x53c>
   11240:	cmp	r0, #65	; 0x41
   11244:	beq	112b0 <__assert_fail@plt+0x594>
   11248:	cmp	r0, #66	; 0x42
   1124c:	bne	11268 <__assert_fail@plt+0x54c>
   11250:	mov	r0, #11
   11254:	bx	lr
   11258:	cmp	r0, #68	; 0x44
   1125c:	beq	112c0 <__assert_fail@plt+0x5a4>
   11260:	cmp	r0, #69	; 0x45
   11264:	beq	112b8 <__assert_fail@plt+0x59c>
   11268:	sub	r0, r0, #48	; 0x30
   1126c:	bx	lr
   11270:	cmp	r0, #99	; 0x63
   11274:	beq	112a8 <__assert_fail@plt+0x58c>
   11278:	bhi	1128c <__assert_fail@plt+0x570>
   1127c:	cmp	r0, #97	; 0x61
   11280:	beq	112b0 <__assert_fail@plt+0x594>
   11284:	cmp	r0, #98	; 0x62
   11288:	b	1124c <__assert_fail@plt+0x530>
   1128c:	cmp	r0, #101	; 0x65
   11290:	beq	112b8 <__assert_fail@plt+0x59c>
   11294:	bcc	112c0 <__assert_fail@plt+0x5a4>
   11298:	cmp	r0, #102	; 0x66
   1129c:	bne	11268 <__assert_fail@plt+0x54c>
   112a0:	mov	r0, #15
   112a4:	bx	lr
   112a8:	mov	r0, #12
   112ac:	bx	lr
   112b0:	mov	r0, #10
   112b4:	bx	lr
   112b8:	mov	r0, #14
   112bc:	bx	lr
   112c0:	mov	r0, #13
   112c4:	bx	lr
   112c8:	subs	r5, r0, #0
   112cc:	push	{lr}		; (str lr, [sp, #-4]!)
   112d0:	sub	sp, sp, #60	; 0x3c
   112d4:	beq	112ec <__assert_fail@plt+0x5d0>
   112d8:	mov	r2, #40	; 0x28
   112dc:	ldr	r3, [pc, #568]	; 1151c <__assert_fail@plt+0x800>
   112e0:	ldr	r1, [pc, #568]	; 11520 <__assert_fail@plt+0x804>
   112e4:	ldr	r0, [pc, #568]	; 11524 <__assert_fail@plt+0x808>
   112e8:	bl	10d1c <__assert_fail@plt>
   112ec:	mov	r2, #5
   112f0:	ldr	r1, [pc, #560]	; 11528 <__assert_fail@plt+0x80c>
   112f4:	bl	10b84 <dcgettext@plt>
   112f8:	ldr	r3, [pc, #556]	; 1152c <__assert_fail@plt+0x810>
   112fc:	mov	r1, r0
   11300:	mov	r0, #1
   11304:	ldr	r4, [pc, #548]	; 11530 <__assert_fail@plt+0x814>
   11308:	ldr	r6, [pc, #548]	; 11534 <__assert_fail@plt+0x818>
   1130c:	ldr	r3, [r3]
   11310:	mov	r2, r3
   11314:	bl	10c80 <__printf_chk@plt>
   11318:	mov	r2, #5
   1131c:	ldr	r1, [pc, #532]	; 11538 <__assert_fail@plt+0x81c>
   11320:	mov	r0, r5
   11324:	bl	10b84 <dcgettext@plt>
   11328:	ldr	r1, [r4]
   1132c:	bl	10b18 <fputs_unlocked@plt>
   11330:	mov	r2, #5
   11334:	ldr	r1, [pc, #512]	; 1153c <__assert_fail@plt+0x820>
   11338:	mov	r0, r5
   1133c:	bl	10b84 <dcgettext@plt>
   11340:	ldr	r1, [r4]
   11344:	bl	10b18 <fputs_unlocked@plt>
   11348:	mov	r2, #5
   1134c:	ldr	r1, [pc, #492]	; 11540 <__assert_fail@plt+0x824>
   11350:	mov	r0, r5
   11354:	bl	10b84 <dcgettext@plt>
   11358:	ldr	r1, [r4]
   1135c:	bl	10b18 <fputs_unlocked@plt>
   11360:	mov	r2, #5
   11364:	ldr	r1, [pc, #472]	; 11544 <__assert_fail@plt+0x828>
   11368:	mov	r0, r5
   1136c:	bl	10b84 <dcgettext@plt>
   11370:	ldr	r1, [r4]
   11374:	bl	10b18 <fputs_unlocked@plt>
   11378:	mov	r2, #5
   1137c:	ldr	r1, [pc, #452]	; 11548 <__assert_fail@plt+0x82c>
   11380:	mov	r0, r5
   11384:	bl	10b84 <dcgettext@plt>
   11388:	ldr	r1, [r4]
   1138c:	bl	10b18 <fputs_unlocked@plt>
   11390:	mov	r2, #5
   11394:	ldr	r1, [pc, #432]	; 1154c <__assert_fail@plt+0x830>
   11398:	mov	r0, r5
   1139c:	bl	10b84 <dcgettext@plt>
   113a0:	ldr	r1, [r4]
   113a4:	bl	10b18 <fputs_unlocked@plt>
   113a8:	mov	r2, #5
   113ac:	ldr	r1, [pc, #412]	; 11550 <__assert_fail@plt+0x834>
   113b0:	mov	r0, r5
   113b4:	bl	10b84 <dcgettext@plt>
   113b8:	ldr	r1, [r4]
   113bc:	bl	10b18 <fputs_unlocked@plt>
   113c0:	mov	r2, #5
   113c4:	ldr	r1, [pc, #392]	; 11554 <__assert_fail@plt+0x838>
   113c8:	mov	r0, r5
   113cc:	bl	10b84 <dcgettext@plt>
   113d0:	mov	r1, r0
   113d4:	ldr	r2, [pc, #344]	; 11534 <__assert_fail@plt+0x818>
   113d8:	mov	r0, #1
   113dc:	bl	10c80 <__printf_chk@plt>
   113e0:	mov	r2, #5
   113e4:	ldr	r1, [pc, #364]	; 11558 <__assert_fail@plt+0x83c>
   113e8:	mov	r0, r5
   113ec:	bl	10b84 <dcgettext@plt>
   113f0:	ldr	r1, [r4]
   113f4:	mov	r5, sp
   113f8:	bl	10b18 <fputs_unlocked@plt>
   113fc:	ldr	lr, [pc, #344]	; 1155c <__assert_fail@plt+0x840>
   11400:	mov	ip, sp
   11404:	ldm	lr!, {r0, r1, r2, r3}
   11408:	stmia	ip!, {r0, r1, r2, r3}
   1140c:	ldm	lr!, {r0, r1, r2, r3}
   11410:	stmia	ip!, {r0, r1, r2, r3}
   11414:	ldm	lr!, {r0, r1, r2, r3}
   11418:	stmia	ip!, {r0, r1, r2, r3}
   1141c:	ldm	lr, {r0, r1}
   11420:	stm	ip, {r0, r1}
   11424:	ldr	r1, [r5]
   11428:	cmp	r1, #0
   1142c:	bne	114d4 <__assert_fail@plt+0x7b8>
   11430:	ldr	r5, [r5, #4]
   11434:	mov	r2, #5
   11438:	mov	r0, #0
   1143c:	ldr	r6, [pc, #240]	; 11534 <__assert_fail@plt+0x818>
   11440:	ldr	r1, [pc, #280]	; 11560 <__assert_fail@plt+0x844>
   11444:	cmp	r5, #0
   11448:	moveq	r5, r6
   1144c:	bl	10b84 <dcgettext@plt>
   11450:	mov	r1, r0
   11454:	ldr	r3, [pc, #264]	; 11564 <__assert_fail@plt+0x848>
   11458:	mov	r0, #1
   1145c:	ldr	r2, [pc, #260]	; 11568 <__assert_fail@plt+0x84c>
   11460:	bl	10c80 <__printf_chk@plt>
   11464:	mov	r1, #0
   11468:	mov	r0, #5
   1146c:	bl	10cbc <setlocale@plt>
   11470:	cmp	r0, #0
   11474:	bne	114ec <__assert_fail@plt+0x7d0>
   11478:	mov	r2, #5
   1147c:	ldr	r1, [pc, #232]	; 1156c <__assert_fail@plt+0x850>
   11480:	mov	r0, #0
   11484:	bl	10b84 <dcgettext@plt>
   11488:	mov	r1, r0
   1148c:	ldr	r3, [pc, #160]	; 11534 <__assert_fail@plt+0x818>
   11490:	mov	r0, #1
   11494:	ldr	r2, [pc, #200]	; 11564 <__assert_fail@plt+0x848>
   11498:	bl	10c80 <__printf_chk@plt>
   1149c:	mov	r2, #5
   114a0:	ldr	r1, [pc, #200]	; 11570 <__assert_fail@plt+0x854>
   114a4:	mov	r0, #0
   114a8:	bl	10b84 <dcgettext@plt>
   114ac:	ldr	r2, [pc, #192]	; 11574 <__assert_fail@plt+0x858>
   114b0:	cmp	r5, r6
   114b4:	mov	r1, r0
   114b8:	mov	r0, #1
   114bc:	ldr	r3, [pc, #180]	; 11578 <__assert_fail@plt+0x85c>
   114c0:	moveq	r3, r2
   114c4:	mov	r2, r5
   114c8:	bl	10c80 <__printf_chk@plt>
   114cc:	mov	r0, #0
   114d0:	bl	10c44 <exit@plt>
   114d4:	mov	r0, r6
   114d8:	bl	10b24 <strcmp@plt>
   114dc:	cmp	r0, #0
   114e0:	beq	11430 <__assert_fail@plt+0x714>
   114e4:	add	r5, r5, #8
   114e8:	b	11424 <__assert_fail@plt+0x708>
   114ec:	mov	r2, #3
   114f0:	ldr	r1, [pc, #132]	; 1157c <__assert_fail@plt+0x860>
   114f4:	bl	10cf8 <strncmp@plt>
   114f8:	cmp	r0, #0
   114fc:	beq	11478 <__assert_fail@plt+0x75c>
   11500:	mov	r2, #5
   11504:	ldr	r1, [pc, #116]	; 11580 <__assert_fail@plt+0x864>
   11508:	mov	r0, #0
   1150c:	bl	10b84 <dcgettext@plt>
   11510:	ldr	r1, [r4]
   11514:	bl	10b18 <fputs_unlocked@plt>
   11518:	b	11478 <__assert_fail@plt+0x75c>
   1151c:	ldrdeq	r3, [r1], -r8
   11520:	andeq	r3, r1, sp, lsl sl
   11524:	andeq	r3, r1, r8, lsr #20
   11528:	andeq	r3, r1, pc, lsr sl
   1152c:	andeq	r5, r2, r4, lsr r1
   11530:	andeq	r5, r2, r4, lsr #2
   11534:	andeq	r3, r1, r8, lsl sl
   11538:	andeq	r3, r1, lr, ror sl
   1153c:	ldrdeq	r3, [r1], -fp
   11540:	andeq	r3, r1, pc, asr fp
   11544:	andeq	r3, r1, ip, lsl #23
   11548:	andeq	r3, r1, r2, asr #23
   1154c:	andeq	r3, r1, r1, lsl #24
   11550:	andeq	r3, r1, r6, ror #25
   11554:	andeq	r3, r1, r4, asr sp
   11558:	andeq	r3, r1, r3, lsl lr
   1155c:	andeq	r3, r1, r0, ror #19
   11560:	andeq	r3, r1, ip, ror lr
   11564:	muleq	r1, r3, lr
   11568:			; <UNDEFINED> instruction: 0x00013ebb
   1156c:	andeq	r3, r1, r4, lsl pc
   11570:	andeq	r3, r1, pc, lsr #30
   11574:	andeq	r3, r1, pc, asr #31
   11578:	andeq	r3, r1, r0, lsl #24
   1157c:	andeq	r3, r1, r9, asr #29
   11580:	andeq	r3, r1, sp, asr #29
   11584:	ldr	r3, [pc, #4]	; 11590 <__assert_fail@plt+0x874>
   11588:	str	r0, [r3]
   1158c:	bx	lr
   11590:	andeq	r5, r2, ip, lsr #2
   11594:	ldr	r3, [pc, #4]	; 115a0 <__assert_fail@plt+0x884>
   11598:	strb	r0, [r3, #4]
   1159c:	bx	lr
   115a0:	andeq	r5, r2, ip, lsr #2
   115a4:	ldr	r3, [pc, #176]	; 1165c <__assert_fail@plt+0x940>
   115a8:	push	{r0, r1, r4, r5, r6, lr}
   115ac:	ldr	r0, [r3]
   115b0:	bl	13548 <__assert_fail@plt+0x282c>
   115b4:	cmp	r0, #0
   115b8:	beq	11640 <__assert_fail@plt+0x924>
   115bc:	ldr	r4, [pc, #156]	; 11660 <__assert_fail@plt+0x944>
   115c0:	bl	10c5c <__errno_location@plt>
   115c4:	mov	r5, r0
   115c8:	ldrb	r6, [r4, #4]
   115cc:	cmp	r6, #0
   115d0:	beq	115e0 <__assert_fail@plt+0x8c4>
   115d4:	ldr	r3, [r0]
   115d8:	cmp	r3, #32
   115dc:	beq	11640 <__assert_fail@plt+0x924>
   115e0:	mov	r2, #5
   115e4:	ldr	r1, [pc, #120]	; 11664 <__assert_fail@plt+0x948>
   115e8:	mov	r0, #0
   115ec:	bl	10b84 <dcgettext@plt>
   115f0:	mov	r6, r0
   115f4:	ldr	r0, [r4]
   115f8:	cmp	r0, #0
   115fc:	beq	1162c <__assert_fail@plt+0x910>
   11600:	ldr	r4, [r5]
   11604:	bl	12b28 <__assert_fail@plt+0x1e0c>
   11608:	mov	r3, r0
   1160c:	ldr	r2, [pc, #84]	; 11668 <__assert_fail@plt+0x94c>
   11610:	mov	r0, #0
   11614:	str	r6, [sp]
   11618:	mov	r1, r4
   1161c:	bl	10bf0 <error@plt>
   11620:	ldr	r3, [pc, #68]	; 1166c <__assert_fail@plt+0x950>
   11624:	ldr	r0, [r3]
   11628:	bl	10b48 <_exit@plt>
   1162c:	mov	r3, r6
   11630:	ldr	r2, [pc, #56]	; 11670 <__assert_fail@plt+0x954>
   11634:	ldr	r1, [r5]
   11638:	bl	10bf0 <error@plt>
   1163c:	b	11620 <__assert_fail@plt+0x904>
   11640:	ldr	r3, [pc, #44]	; 11674 <__assert_fail@plt+0x958>
   11644:	ldr	r0, [r3]
   11648:	bl	13548 <__assert_fail@plt+0x282c>
   1164c:	cmp	r0, #0
   11650:	bne	11620 <__assert_fail@plt+0x904>
   11654:	add	sp, sp, #8
   11658:	pop	{r4, r5, r6, pc}
   1165c:	andeq	r5, r2, r4, lsr #2
   11660:	andeq	r5, r2, ip, lsr #2
   11664:	andeq	r4, r1, r1, lsr #32
   11668:	andeq	r4, r1, sp, lsr #32
   1166c:	ldrdeq	r5, [r2], -r0
   11670:	andeq	r4, r1, r1, lsr r0
   11674:	andeq	r5, r2, r0, lsr #2
   11678:	push	{r4, r5, r6, lr}
   1167c:	subs	r4, r0, #0
   11680:	bne	11698 <__assert_fail@plt+0x97c>
   11684:	ldr	r3, [pc, #124]	; 11708 <__assert_fail@plt+0x9ec>
   11688:	ldr	r0, [pc, #124]	; 1170c <__assert_fail@plt+0x9f0>
   1168c:	ldr	r1, [r3]
   11690:	bl	10cec <fputs@plt>
   11694:	bl	10d04 <abort@plt>
   11698:	mov	r1, #47	; 0x2f
   1169c:	bl	10cc8 <strrchr@plt>
   116a0:	subs	r6, r0, #0
   116a4:	beq	116f4 <__assert_fail@plt+0x9d8>
   116a8:	add	r5, r6, #1
   116ac:	sub	r3, r5, r4
   116b0:	cmp	r3, #6
   116b4:	ble	116f4 <__assert_fail@plt+0x9d8>
   116b8:	mov	r2, #7
   116bc:	ldr	r1, [pc, #76]	; 11710 <__assert_fail@plt+0x9f4>
   116c0:	sub	r0, r6, #6
   116c4:	bl	10cf8 <strncmp@plt>
   116c8:	cmp	r0, #0
   116cc:	bne	116f4 <__assert_fail@plt+0x9d8>
   116d0:	mov	r2, #3
   116d4:	ldr	r1, [pc, #56]	; 11714 <__assert_fail@plt+0x9f8>
   116d8:	mov	r0, r5
   116dc:	bl	10cf8 <strncmp@plt>
   116e0:	cmp	r0, #0
   116e4:	ldreq	r3, [pc, #44]	; 11718 <__assert_fail@plt+0x9fc>
   116e8:	addeq	r4, r6, #4
   116ec:	movne	r4, r5
   116f0:	streq	r4, [r3]
   116f4:	ldr	r3, [pc, #32]	; 1171c <__assert_fail@plt+0xa00>
   116f8:	str	r4, [r3]
   116fc:	ldr	r3, [pc, #28]	; 11720 <__assert_fail@plt+0xa04>
   11700:	str	r4, [r3]
   11704:	pop	{r4, r5, r6, pc}
   11708:	andeq	r5, r2, r0, lsr #2
   1170c:	andeq	r4, r1, r4, lsr r0
   11710:	andeq	r4, r1, ip, rrx
   11714:	andeq	r4, r1, r4, ror r0
   11718:	andeq	r5, r2, r8, lsl r1
   1171c:	andeq	r5, r2, r4, lsr r1
   11720:	andeq	r5, r2, ip, lsl r1
   11724:	push	{r4, lr}
   11728:	mov	r2, #48	; 0x30
   1172c:	mov	r4, r1
   11730:	mov	r1, #0
   11734:	bl	10c74 <memset@plt>
   11738:	cmp	r4, #10
   1173c:	bne	11744 <__assert_fail@plt+0xa28>
   11740:	bl	10d04 <abort@plt>
   11744:	str	r4, [r0]
   11748:	pop	{r4, pc}
   1174c:	push	{r4, r5, r6, lr}
   11750:	mov	r2, #5
   11754:	mov	r6, r0
   11758:	mov	r5, r1
   1175c:	mov	r1, r0
   11760:	mov	r0, #0
   11764:	bl	10b84 <dcgettext@plt>
   11768:	cmp	r6, r0
   1176c:	mov	r4, r0
   11770:	bne	117e0 <__assert_fail@plt+0xac4>
   11774:	bl	137c0 <__assert_fail@plt+0x2aa4>
   11778:	ldrb	r3, [r0]
   1177c:	bic	r3, r3, #32
   11780:	cmp	r3, #85	; 0x55
   11784:	bne	117e8 <__assert_fail@plt+0xacc>
   11788:	ldrb	r3, [r0, #1]
   1178c:	bic	r3, r3, #32
   11790:	cmp	r3, #84	; 0x54
   11794:	bne	11858 <__assert_fail@plt+0xb3c>
   11798:	ldrb	r3, [r0, #2]
   1179c:	bic	r3, r3, #32
   117a0:	cmp	r3, #70	; 0x46
   117a4:	bne	11858 <__assert_fail@plt+0xb3c>
   117a8:	ldrb	r3, [r0, #3]
   117ac:	cmp	r3, #45	; 0x2d
   117b0:	bne	11858 <__assert_fail@plt+0xb3c>
   117b4:	ldrb	r3, [r0, #4]
   117b8:	cmp	r3, #56	; 0x38
   117bc:	bne	11858 <__assert_fail@plt+0xb3c>
   117c0:	ldrb	r3, [r0, #5]
   117c4:	cmp	r3, #0
   117c8:	bne	11858 <__assert_fail@plt+0xb3c>
   117cc:	ldrb	r2, [r4]
   117d0:	ldr	r3, [pc, #144]	; 11868 <__assert_fail@plt+0xb4c>
   117d4:	ldr	r4, [pc, #144]	; 1186c <__assert_fail@plt+0xb50>
   117d8:	cmp	r2, #96	; 0x60
   117dc:	movne	r4, r3
   117e0:	mov	r0, r4
   117e4:	pop	{r4, r5, r6, pc}
   117e8:	cmp	r3, #71	; 0x47
   117ec:	bne	11858 <__assert_fail@plt+0xb3c>
   117f0:	ldrb	r3, [r0, #1]
   117f4:	bic	r3, r3, #32
   117f8:	cmp	r3, #66	; 0x42
   117fc:	bne	11858 <__assert_fail@plt+0xb3c>
   11800:	ldrb	r3, [r0, #2]
   11804:	cmp	r3, #49	; 0x31
   11808:	bne	11858 <__assert_fail@plt+0xb3c>
   1180c:	ldrb	r3, [r0, #3]
   11810:	cmp	r3, #56	; 0x38
   11814:	bne	11858 <__assert_fail@plt+0xb3c>
   11818:	ldrb	r3, [r0, #4]
   1181c:	cmp	r3, #48	; 0x30
   11820:	bne	11858 <__assert_fail@plt+0xb3c>
   11824:	ldrb	r3, [r0, #5]
   11828:	cmp	r3, #51	; 0x33
   1182c:	bne	11858 <__assert_fail@plt+0xb3c>
   11830:	ldrb	r3, [r0, #6]
   11834:	cmp	r3, #48	; 0x30
   11838:	bne	11858 <__assert_fail@plt+0xb3c>
   1183c:	ldrb	r3, [r0, #7]
   11840:	cmp	r3, #0
   11844:	bne	11858 <__assert_fail@plt+0xb3c>
   11848:	ldrb	r2, [r4]
   1184c:	ldr	r3, [pc, #28]	; 11870 <__assert_fail@plt+0xb54>
   11850:	ldr	r4, [pc, #28]	; 11874 <__assert_fail@plt+0xb58>
   11854:	b	117d8 <__assert_fail@plt+0xabc>
   11858:	ldr	r4, [pc, #24]	; 11878 <__assert_fail@plt+0xb5c>
   1185c:	cmp	r5, #9
   11860:	ldr	r3, [pc, #20]	; 1187c <__assert_fail@plt+0xb60>
   11864:	b	117dc <__assert_fail@plt+0xac0>
   11868:	andeq	r4, r1, lr, asr #1
   1186c:	ldrdeq	r4, [r1], -r9
   11870:	ldrdeq	r4, [r1], -r2
   11874:	ldrdeq	r4, [r1], -r5
   11878:	andeq	r4, r1, ip, asr #1
   1187c:	ldrdeq	r4, [r1], -sp
   11880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11884:	sub	sp, sp, #108	; 0x6c
   11888:	mov	r8, r0
   1188c:	mov	r5, r1
   11890:	mov	r6, #0
   11894:	str	r3, [sp, #40]	; 0x28
   11898:	str	r2, [sp, #48]	; 0x30
   1189c:	ldr	sl, [sp, #144]	; 0x90
   118a0:	bl	10bc0 <__ctype_get_mb_cur_max@plt>
   118a4:	ldr	r3, [sp, #148]	; 0x94
   118a8:	str	r6, [sp, #24]
   118ac:	str	r6, [sp, #32]
   118b0:	str	r6, [sp, #44]	; 0x2c
   118b4:	str	r6, [sp, #52]	; 0x34
   118b8:	ubfx	r7, r3, #1, #1
   118bc:	mov	r3, #1
   118c0:	str	r6, [sp, #60]	; 0x3c
   118c4:	str	r3, [sp, #72]	; 0x48
   118c8:	str	r0, [sp, #76]	; 0x4c
   118cc:	cmp	sl, #10
   118d0:	ldrls	pc, [pc, sl, lsl #2]
   118d4:	b	11b18 <__assert_fail@plt+0xdfc>
   118d8:	andeq	r1, r1, r4, lsl #18
   118dc:	andeq	r1, r1, r0, lsr fp
   118e0:			; <UNDEFINED> instruction: 0x00011ab4
   118e4:	andeq	r1, r1, ip, asr #21
   118e8:	muleq	r1, ip, sl
   118ec:	strdeq	r1, [r1], -r4
   118f0:	ldrdeq	r1, [r1], -r4
   118f4:	andeq	r1, r1, ip, lsl fp
   118f8:	andeq	r1, r1, r4, lsr #20
   118fc:	andeq	r1, r1, r4, lsr #20
   11900:	andeq	r1, r1, r4, lsr #20
   11904:	mov	r4, sl
   11908:	mov	r7, #0
   1190c:	mov	r9, r5
   11910:	mov	r3, #0
   11914:	str	r6, [sp, #68]	; 0x44
   11918:	str	r3, [sp, #28]
   1191c:	ldr	r3, [sp, #40]	; 0x28
   11920:	cmn	r3, #1
   11924:	bne	124c4 <__assert_fail@plt+0x17a8>
   11928:	ldr	r2, [sp, #28]
   1192c:	ldr	r3, [sp, #48]	; 0x30
   11930:	ldrb	r3, [r3, r2]
   11934:	adds	r3, r3, #0
   11938:	movne	r3, #1
   1193c:	str	r3, [sp, #36]	; 0x24
   11940:	ldr	r3, [sp, #36]	; 0x24
   11944:	cmp	r3, #0
   11948:	bne	11b54 <__assert_fail@plt+0xe38>
   1194c:	sub	r3, sl, #2
   11950:	cmp	r4, #0
   11954:	clz	r3, r3
   11958:	movne	r2, #0
   1195c:	lsr	r3, r3, #5
   11960:	andeq	r2, r3, r7
   11964:	cmp	r2, #0
   11968:	bne	11d18 <__assert_fail@plt+0xffc>
   1196c:	eor	r7, r7, #1
   11970:	ands	r3, r3, r7
   11974:	beq	1253c <__assert_fail@plt+0x1820>
   11978:	ldr	r2, [sp, #68]	; 0x44
   1197c:	cmp	r2, #0
   11980:	beq	12504 <__assert_fail@plt+0x17e8>
   11984:	ldr	r3, [sp, #72]	; 0x48
   11988:	cmp	r3, #0
   1198c:	beq	124d8 <__assert_fail@plt+0x17bc>
   11990:	ldr	r2, [sp, #48]	; 0x30
   11994:	ldr	r3, [sp, #160]	; 0xa0
   11998:	ldr	r1, [sp, #60]	; 0x3c
   1199c:	str	r3, [sp, #16]
   119a0:	ldr	r3, [sp, #156]	; 0x9c
   119a4:	str	r3, [sp, #12]
   119a8:	ldr	r3, [sp, #152]	; 0x98
   119ac:	str	r3, [sp, #8]
   119b0:	ldr	r3, [sp, #148]	; 0x94
   119b4:	str	r3, [sp, #4]
   119b8:	mov	r3, #5
   119bc:	str	r3, [sp]
   119c0:	ldr	r3, [sp, #40]	; 0x28
   119c4:	mov	r0, r8
   119c8:	bl	11880 <__assert_fail@plt+0xb64>
   119cc:	mov	r4, r0
   119d0:	b	12530 <__assert_fail@plt+0x1814>
   119d4:	ldr	r3, [pc, #2948]	; 12560 <__assert_fail@plt+0x1844>
   119d8:	mov	r7, #1
   119dc:	mov	r4, #0
   119e0:	mov	sl, #5
   119e4:	str	r7, [sp, #24]
   119e8:	str	r7, [sp, #32]
   119ec:	str	r3, [sp, #44]	; 0x2c
   119f0:	b	1190c <__assert_fail@plt+0xbf0>
   119f4:	cmp	r7, #0
   119f8:	bne	11b3c <__assert_fail@plt+0xe20>
   119fc:	cmp	r5, #0
   11a00:	mov	r4, #1
   11a04:	movne	r3, #34	; 0x22
   11a08:	strbne	r3, [r8]
   11a0c:	mov	r3, #1
   11a10:	str	r3, [sp, #24]
   11a14:	str	r3, [sp, #32]
   11a18:	ldr	r3, [pc, #2880]	; 12560 <__assert_fail@plt+0x1844>
   11a1c:	str	r3, [sp, #44]	; 0x2c
   11a20:	b	1190c <__assert_fail@plt+0xbf0>
   11a24:	cmp	sl, #10
   11a28:	beq	11a4c <__assert_fail@plt+0xd30>
   11a2c:	mov	r1, sl
   11a30:	ldr	r0, [pc, #2860]	; 12564 <__assert_fail@plt+0x1848>
   11a34:	bl	1174c <__assert_fail@plt+0xa30>
   11a38:	mov	r1, sl
   11a3c:	str	r0, [sp, #156]	; 0x9c
   11a40:	ldr	r0, [pc, #2848]	; 12568 <__assert_fail@plt+0x184c>
   11a44:	bl	1174c <__assert_fail@plt+0xa30>
   11a48:	str	r0, [sp, #160]	; 0xa0
   11a4c:	cmp	r7, #0
   11a50:	moveq	r4, r7
   11a54:	beq	11a6c <__assert_fail@plt+0xd50>
   11a58:	mov	r4, #0
   11a5c:	b	11a7c <__assert_fail@plt+0xd60>
   11a60:	cmp	r5, r4
   11a64:	strbhi	r3, [r8, r4]
   11a68:	add	r4, r4, #1
   11a6c:	ldr	r3, [sp, #156]	; 0x9c
   11a70:	ldrb	r3, [r3, r4]
   11a74:	cmp	r3, #0
   11a78:	bne	11a60 <__assert_fail@plt+0xd44>
   11a7c:	ldr	r0, [sp, #160]	; 0xa0
   11a80:	bl	10c50 <strlen@plt>
   11a84:	ldr	r3, [sp, #160]	; 0xa0
   11a88:	str	r0, [sp, #32]
   11a8c:	str	r3, [sp, #44]	; 0x2c
   11a90:	mov	r3, #1
   11a94:	str	r3, [sp, #24]
   11a98:	b	1190c <__assert_fail@plt+0xbf0>
   11a9c:	mov	r3, #1
   11aa0:	cmp	r7, #0
   11aa4:	streq	r3, [sp, #24]
   11aa8:	beq	11aec <__assert_fail@plt+0xdd0>
   11aac:	str	r3, [sp, #32]
   11ab0:	b	11ad8 <__assert_fail@plt+0xdbc>
   11ab4:	cmp	r7, #0
   11ab8:	beq	11aec <__assert_fail@plt+0xdd0>
   11abc:	mov	r3, #1
   11ac0:	str	r3, [sp, #32]
   11ac4:	ldr	r3, [pc, #2716]	; 12568 <__assert_fail@plt+0x184c>
   11ac8:	b	11b4c <__assert_fail@plt+0xe30>
   11acc:	mov	r7, #1
   11ad0:	str	r7, [sp, #24]
   11ad4:	str	r7, [sp, #32]
   11ad8:	ldr	r3, [pc, #2696]	; 12568 <__assert_fail@plt+0x184c>
   11adc:	mov	r4, #0
   11ae0:	str	r3, [sp, #44]	; 0x2c
   11ae4:	mov	sl, #2
   11ae8:	b	1190c <__assert_fail@plt+0xbf0>
   11aec:	cmp	r5, #0
   11af0:	movne	r3, #39	; 0x27
   11af4:	movne	r7, #0
   11af8:	strbne	r3, [r8]
   11afc:	moveq	r7, r5
   11b00:	mov	r3, #1
   11b04:	mov	r4, #1
   11b08:	str	r3, [sp, #32]
   11b0c:	ldr	r3, [pc, #2644]	; 12568 <__assert_fail@plt+0x184c>
   11b10:	str	r3, [sp, #44]	; 0x2c
   11b14:	b	11ae4 <__assert_fail@plt+0xdc8>
   11b18:	bl	10d04 <abort@plt>
   11b1c:	mov	r3, #1
   11b20:	mov	r7, #0
   11b24:	str	r3, [sp, #24]
   11b28:	mov	r4, #0
   11b2c:	b	1190c <__assert_fail@plt+0xbf0>
   11b30:	mov	r7, #1
   11b34:	str	sl, [sp, #32]
   11b38:	b	11ad8 <__assert_fail@plt+0xdbc>
   11b3c:	mov	r3, #1
   11b40:	str	r7, [sp, #24]
   11b44:	str	r3, [sp, #32]
   11b48:	ldr	r3, [pc, #2576]	; 12560 <__assert_fail@plt+0x1844>
   11b4c:	str	r3, [sp, #44]	; 0x2c
   11b50:	b	11b28 <__assert_fail@plt+0xe0c>
   11b54:	ldr	fp, [sp, #24]
   11b58:	ldr	r3, [sp, #32]
   11b5c:	cmp	sl, #2
   11b60:	moveq	fp, #0
   11b64:	andne	fp, fp, #1
   11b68:	adds	r5, r3, #0
   11b6c:	movne	r5, #1
   11b70:	ands	r3, fp, r5
   11b74:	str	r3, [sp, #64]	; 0x40
   11b78:	beq	11c48 <__assert_fail@plt+0xf2c>
   11b7c:	ldr	r3, [sp, #28]
   11b80:	ldr	r2, [sp, #32]
   11b84:	cmp	r2, #1
   11b88:	add	r6, r3, r2
   11b8c:	mov	r3, r2
   11b90:	ldr	r2, [sp, #40]	; 0x28
   11b94:	movls	r3, #0
   11b98:	movhi	r3, #1
   11b9c:	cmn	r2, #1
   11ba0:	movne	r3, #0
   11ba4:	cmp	r3, #0
   11ba8:	beq	11bb8 <__assert_fail@plt+0xe9c>
   11bac:	ldr	r0, [sp, #48]	; 0x30
   11bb0:	bl	10c50 <strlen@plt>
   11bb4:	str	r0, [sp, #40]	; 0x28
   11bb8:	ldr	r3, [sp, #40]	; 0x28
   11bbc:	cmp	r6, r3
   11bc0:	bhi	11c40 <__assert_fail@plt+0xf24>
   11bc4:	ldr	r0, [sp, #28]
   11bc8:	ldr	r2, [sp, #32]
   11bcc:	ldr	r3, [sp, #48]	; 0x30
   11bd0:	ldr	r1, [sp, #44]	; 0x2c
   11bd4:	add	r0, r3, r0
   11bd8:	bl	10b6c <memcmp@plt>
   11bdc:	cmp	r0, #0
   11be0:	bne	11c40 <__assert_fail@plt+0xf24>
   11be4:	cmp	r7, #0
   11be8:	beq	11c48 <__assert_fail@plt+0xf2c>
   11bec:	str	r7, [sp, #24]
   11bf0:	ldr	r3, [sp, #24]
   11bf4:	mov	r1, r9
   11bf8:	ldr	r2, [sp, #48]	; 0x30
   11bfc:	cmp	sl, #2
   11c00:	movne	r3, #0
   11c04:	andeq	r3, r3, #1
   11c08:	cmp	r3, #0
   11c0c:	ldr	r3, [sp, #160]	; 0xa0
   11c10:	movne	sl, #4
   11c14:	str	sl, [sp]
   11c18:	str	r3, [sp, #16]
   11c1c:	ldr	r3, [sp, #156]	; 0x9c
   11c20:	str	r3, [sp, #12]
   11c24:	mov	r3, #0
   11c28:	str	r3, [sp, #8]
   11c2c:	ldr	r3, [sp, #148]	; 0x94
   11c30:	bic	r3, r3, #2
   11c34:	str	r3, [sp, #4]
   11c38:	ldr	r3, [sp, #40]	; 0x28
   11c3c:	b	119c4 <__assert_fail@plt+0xca8>
   11c40:	mov	r3, #0
   11c44:	str	r3, [sp, #64]	; 0x40
   11c48:	ldr	r2, [sp, #28]
   11c4c:	ldr	r3, [sp, #48]	; 0x30
   11c50:	add	r3, r3, r2
   11c54:	str	r3, [sp, #80]	; 0x50
   11c58:	ldr	r3, [sp, #48]	; 0x30
   11c5c:	ldrb	r6, [r3, r2]
   11c60:	cmp	r6, #58	; 0x3a
   11c64:	bhi	11dc8 <__assert_fail@plt+0x10ac>
   11c68:	cmp	r6, #43	; 0x2b
   11c6c:	bcs	11f88 <__assert_fail@plt+0x126c>
   11c70:	cmp	r6, #32
   11c74:	beq	11fdc <__assert_fail@plt+0x12c0>
   11c78:	bhi	11d20 <__assert_fail@plt+0x1004>
   11c7c:	cmp	r6, #9
   11c80:	beq	12184 <__assert_fail@plt+0x1468>
   11c84:	bhi	11ce4 <__assert_fail@plt+0xfc8>
   11c88:	cmp	r6, #7
   11c8c:	beq	12194 <__assert_fail@plt+0x1478>
   11c90:	bhi	121b0 <__assert_fail@plt+0x1494>
   11c94:	cmp	r6, #0
   11c98:	beq	11ff8 <__assert_fail@plt+0x12dc>
   11c9c:	ldr	r3, [sp, #76]	; 0x4c
   11ca0:	cmp	r3, #1
   11ca4:	bne	121fc <__assert_fail@plt+0x14e0>
   11ca8:	bl	10c38 <__ctype_b_loc@plt>
   11cac:	ldr	r2, [r0]
   11cb0:	sxth	r3, r6
   11cb4:	lsl	r3, r3, #1
   11cb8:	ldrh	r5, [r2, r3]
   11cbc:	ldr	r3, [sp, #76]	; 0x4c
   11cc0:	ubfx	r5, r5, #14, #1
   11cc4:	str	r3, [sp, #56]	; 0x38
   11cc8:	ldr	r3, [sp, #24]
   11ccc:	eor	fp, r5, #1
   11cd0:	and	fp, fp, r3
   11cd4:	ands	fp, fp, #255	; 0xff
   11cd8:	beq	11eb8 <__assert_fail@plt+0x119c>
   11cdc:	mov	r5, #0
   11ce0:	b	122a8 <__assert_fail@plt+0x158c>
   11ce4:	cmp	r6, #11
   11ce8:	beq	121b8 <__assert_fail@plt+0x149c>
   11cec:	bcc	1218c <__assert_fail@plt+0x1470>
   11cf0:	cmp	r6, #12
   11cf4:	beq	121c0 <__assert_fail@plt+0x14a4>
   11cf8:	cmp	r6, #13
   11cfc:	moveq	r3, #114	; 0x72
   11d00:	bne	11c9c <__assert_fail@plt+0xf80>
   11d04:	cmp	sl, #2
   11d08:	movne	r2, #0
   11d0c:	andeq	r2, r7, #1
   11d10:	cmp	r2, #0
   11d14:	beq	12198 <__assert_fail@plt+0x147c>
   11d18:	mov	sl, #2
   11d1c:	b	11bf0 <__assert_fail@plt+0xed4>
   11d20:	cmp	r6, #37	; 0x25
   11d24:	beq	11f88 <__assert_fail@plt+0x126c>
   11d28:	bhi	11d3c <__assert_fail@plt+0x1020>
   11d2c:	cmp	r6, #35	; 0x23
   11d30:	beq	11fd0 <__assert_fail@plt+0x12b4>
   11d34:	mov	r5, #0
   11d38:	b	11fe0 <__assert_fail@plt+0x12c4>
   11d3c:	cmp	r6, #39	; 0x27
   11d40:	bne	11d34 <__assert_fail@plt+0x1018>
   11d44:	cmp	sl, #2
   11d48:	ldrne	r5, [sp, #36]	; 0x24
   11d4c:	movne	r3, r5
   11d50:	strne	r3, [sp, #68]	; 0x44
   11d54:	bne	120d4 <__assert_fail@plt+0x13b8>
   11d58:	cmp	r7, #0
   11d5c:	bne	11bf0 <__assert_fail@plt+0xed4>
   11d60:	ldr	r3, [sp, #60]	; 0x3c
   11d64:	cmp	r9, #0
   11d68:	clz	r3, r3
   11d6c:	lsr	r3, r3, #5
   11d70:	moveq	r3, #0
   11d74:	cmp	r3, #0
   11d78:	strne	r9, [sp, #60]	; 0x3c
   11d7c:	movne	r9, #0
   11d80:	bne	11d90 <__assert_fail@plt+0x1074>
   11d84:	cmp	r9, r4
   11d88:	movhi	r3, #39	; 0x27
   11d8c:	strbhi	r3, [r8, r4]
   11d90:	add	r3, r4, #1
   11d94:	ldr	r5, [sp, #36]	; 0x24
   11d98:	mov	fp, #0
   11d9c:	cmp	r3, r9
   11da0:	movcc	r2, #92	; 0x5c
   11da4:	str	fp, [sp, #52]	; 0x34
   11da8:	strbcc	r2, [r8, r3]
   11dac:	add	r3, r4, #2
   11db0:	add	r4, r4, #3
   11db4:	cmp	r3, r9
   11db8:	str	r5, [sp, #68]	; 0x44
   11dbc:	movcc	r2, #39	; 0x27
   11dc0:	strbcc	r2, [r8, r3]
   11dc4:	b	11eb8 <__assert_fail@plt+0x119c>
   11dc8:	cmp	r6, #94	; 0x5e
   11dcc:	beq	11d34 <__assert_fail@plt+0x1018>
   11dd0:	bhi	11f90 <__assert_fail@plt+0x1274>
   11dd4:	cmp	r6, #90	; 0x5a
   11dd8:	bhi	11f7c <__assert_fail@plt+0x1260>
   11ddc:	cmp	r6, #65	; 0x41
   11de0:	bcs	11f88 <__assert_fail@plt+0x126c>
   11de4:	cmp	r6, #62	; 0x3e
   11de8:	bls	11d34 <__assert_fail@plt+0x1018>
   11dec:	cmp	r6, #63	; 0x3f
   11df0:	bne	11c9c <__assert_fail@plt+0xf80>
   11df4:	cmp	sl, #2
   11df8:	beq	120dc <__assert_fail@plt+0x13c0>
   11dfc:	cmp	sl, #5
   11e00:	movne	fp, #0
   11e04:	bne	124ac <__assert_fail@plt+0x1790>
   11e08:	ldr	r3, [sp, #148]	; 0x94
   11e0c:	tst	r3, #4
   11e10:	beq	120e4 <__assert_fail@plt+0x13c8>
   11e14:	ldr	r3, [sp, #28]
   11e18:	add	r2, r3, #2
   11e1c:	ldr	r3, [sp, #40]	; 0x28
   11e20:	cmp	r2, r3
   11e24:	bcs	120e4 <__assert_fail@plt+0x13c8>
   11e28:	ldr	r1, [sp, #28]
   11e2c:	ldr	r3, [sp, #48]	; 0x30
   11e30:	add	r3, r3, r1
   11e34:	ldrb	r1, [r3, #1]
   11e38:	cmp	r1, #63	; 0x3f
   11e3c:	bne	120e4 <__assert_fail@plt+0x13c8>
   11e40:	ldr	r3, [sp, #48]	; 0x30
   11e44:	ldrb	r6, [r3, r2]
   11e48:	sub	r3, r6, #33	; 0x21
   11e4c:	uxtb	r3, r3
   11e50:	cmp	r3, #29
   11e54:	bhi	124b4 <__assert_fail@plt+0x1798>
   11e58:	ldr	r0, [pc, #1804]	; 1256c <__assert_fail@plt+0x1850>
   11e5c:	mov	r5, #1
   11e60:	ands	r5, r0, r5, lsl r3
   11e64:	beq	124bc <__assert_fail@plt+0x17a0>
   11e68:	cmp	r7, #0
   11e6c:	bne	11bf0 <__assert_fail@plt+0xed4>
   11e70:	cmp	r9, r4
   11e74:	add	r3, r4, #1
   11e78:	str	r2, [sp, #28]
   11e7c:	mov	r5, #0
   11e80:	strbhi	r1, [r8, r4]
   11e84:	cmp	r9, r3
   11e88:	mov	fp, r5
   11e8c:	movhi	r1, #34	; 0x22
   11e90:	strbhi	r1, [r8, r3]
   11e94:	add	r3, r4, #2
   11e98:	cmp	r9, r3
   11e9c:	movhi	r1, #34	; 0x22
   11ea0:	strbhi	r1, [r8, r3]
   11ea4:	add	r3, r4, #3
   11ea8:	add	r4, r4, #4
   11eac:	cmp	r9, r3
   11eb0:	movhi	r1, #63	; 0x3f
   11eb4:	strbhi	r1, [r8, r3]
   11eb8:	ldr	r3, [sp, #24]
   11ebc:	eor	r3, r3, #1
   11ec0:	cmp	sl, #2
   11ec4:	orreq	r3, r3, #1
   11ec8:	eor	r3, r3, #1
   11ecc:	orr	r3, r7, r3
   11ed0:	tst	r3, #255	; 0xff
   11ed4:	beq	11f00 <__assert_fail@plt+0x11e4>
   11ed8:	ldr	r3, [sp, #152]	; 0x98
   11edc:	cmp	r3, #0
   11ee0:	beq	11f00 <__assert_fail@plt+0x11e4>
   11ee4:	ldr	r1, [sp, #152]	; 0x98
   11ee8:	ubfx	r2, r6, #5, #8
   11eec:	and	r3, r6, #31
   11ef0:	ldr	r2, [r1, r2, lsl #2]
   11ef4:	lsr	r3, r2, r3
   11ef8:	tst	r3, #1
   11efc:	bne	11f0c <__assert_fail@plt+0x11f0>
   11f00:	ldr	r3, [sp, #64]	; 0x40
   11f04:	cmp	r3, #0
   11f08:	beq	12104 <__assert_fail@plt+0x13e8>
   11f0c:	sub	r3, sl, #2
   11f10:	cmp	r7, #0
   11f14:	clz	r3, r3
   11f18:	lsr	r3, r3, #5
   11f1c:	bne	11bf0 <__assert_fail@plt+0xed4>
   11f20:	ldr	r2, [sp, #52]	; 0x34
   11f24:	eor	r2, r2, #1
   11f28:	ands	r3, r3, r2
   11f2c:	beq	11f64 <__assert_fail@plt+0x1248>
   11f30:	cmp	r9, r4
   11f34:	str	r3, [sp, #52]	; 0x34
   11f38:	movhi	r2, #39	; 0x27
   11f3c:	strbhi	r2, [r8, r4]
   11f40:	add	r2, r4, #1
   11f44:	cmp	r9, r2
   11f48:	movhi	r1, #36	; 0x24
   11f4c:	strbhi	r1, [r8, r2]
   11f50:	add	r2, r4, #2
   11f54:	add	r4, r4, #3
   11f58:	cmp	r9, r2
   11f5c:	movhi	r1, #39	; 0x27
   11f60:	strbhi	r1, [r8, r2]
   11f64:	cmp	r9, r4
   11f68:	ldr	fp, [sp, #36]	; 0x24
   11f6c:	movhi	r3, #92	; 0x5c
   11f70:	strbhi	r3, [r8, r4]
   11f74:	add	r4, r4, #1
   11f78:	b	12104 <__assert_fail@plt+0x13e8>
   11f7c:	cmp	r6, #92	; 0x5c
   11f80:	beq	120ec <__assert_fail@plt+0x13d0>
   11f84:	bls	11d34 <__assert_fail@plt+0x1018>
   11f88:	ldr	r5, [sp, #36]	; 0x24
   11f8c:	b	120d4 <__assert_fail@plt+0x13b8>
   11f90:	cmp	r6, #122	; 0x7a
   11f94:	bhi	11fb4 <__assert_fail@plt+0x1298>
   11f98:	cmp	r6, #97	; 0x61
   11f9c:	bcs	11f88 <__assert_fail@plt+0x126c>
   11fa0:	cmp	r6, #95	; 0x5f
   11fa4:	beq	11f88 <__assert_fail@plt+0x126c>
   11fa8:	cmp	r6, #96	; 0x60
   11fac:	bne	11c9c <__assert_fail@plt+0xf80>
   11fb0:	b	11d34 <__assert_fail@plt+0x1018>
   11fb4:	cmp	r6, #124	; 0x7c
   11fb8:	beq	11d34 <__assert_fail@plt+0x1018>
   11fbc:	bcc	121c8 <__assert_fail@plt+0x14ac>
   11fc0:	cmp	r6, #125	; 0x7d
   11fc4:	beq	121c8 <__assert_fail@plt+0x14ac>
   11fc8:	cmp	r6, #126	; 0x7e
   11fcc:	bne	11c9c <__assert_fail@plt+0xf80>
   11fd0:	ldr	r3, [sp, #28]
   11fd4:	cmp	r3, #0
   11fd8:	bne	120e4 <__assert_fail@plt+0x13c8>
   11fdc:	ldr	r5, [sp, #36]	; 0x24
   11fe0:	cmp	sl, #2
   11fe4:	movne	fp, #0
   11fe8:	andeq	fp, r7, #1
   11fec:	cmp	fp, #0
   11ff0:	beq	11eb8 <__assert_fail@plt+0x119c>
   11ff4:	b	11d18 <__assert_fail@plt+0xffc>
   11ff8:	ldr	r3, [sp, #24]
   11ffc:	cmp	r3, #0
   12000:	beq	120c8 <__assert_fail@plt+0x13ac>
   12004:	sub	r2, sl, #2
   12008:	cmp	r7, #0
   1200c:	clz	r2, r2
   12010:	lsr	r2, r2, #5
   12014:	bne	11bec <__assert_fail@plt+0xed0>
   12018:	ldr	r3, [sp, #52]	; 0x34
   1201c:	eor	r3, r3, #1
   12020:	ands	r2, r2, r3
   12024:	moveq	r3, r4
   12028:	beq	12060 <__assert_fail@plt+0x1344>
   1202c:	cmp	r9, r4
   12030:	str	r2, [sp, #52]	; 0x34
   12034:	movhi	r3, #39	; 0x27
   12038:	strbhi	r3, [r8, r4]
   1203c:	add	r3, r4, #1
   12040:	cmp	r9, r3
   12044:	movhi	r1, #36	; 0x24
   12048:	strbhi	r1, [r8, r3]
   1204c:	add	r3, r4, #2
   12050:	cmp	r9, r3
   12054:	movhi	r1, #39	; 0x27
   12058:	strbhi	r1, [r8, r3]
   1205c:	add	r3, r4, #3
   12060:	cmp	r9, r3
   12064:	add	r4, r3, #1
   12068:	movhi	r2, #92	; 0x5c
   1206c:	strbhi	r2, [r8, r3]
   12070:	cmp	fp, #0
   12074:	beq	1249c <__assert_fail@plt+0x1780>
   12078:	ldr	r2, [sp, #28]
   1207c:	ldr	r1, [sp, #40]	; 0x28
   12080:	add	r2, r2, #1
   12084:	cmp	r2, r1
   12088:	bcs	120c0 <__assert_fail@plt+0x13a4>
   1208c:	ldr	r1, [sp, #48]	; 0x30
   12090:	mov	r6, #48	; 0x30
   12094:	ldrb	r2, [r1, r2]
   12098:	sub	r2, r2, #48	; 0x30
   1209c:	cmp	r2, #9
   120a0:	bhi	124ac <__assert_fail@plt+0x1790>
   120a4:	cmp	r9, r4
   120a8:	add	r2, r3, #2
   120ac:	strbhi	r6, [r8, r4]
   120b0:	cmp	r9, r2
   120b4:	add	r4, r3, #3
   120b8:	movhi	r1, #48	; 0x30
   120bc:	strbhi	r1, [r8, r2]
   120c0:	mov	r5, #0
   120c4:	b	124a4 <__assert_fail@plt+0x1788>
   120c8:	ldr	r3, [sp, #148]	; 0x94
   120cc:	ands	r5, r3, #1
   120d0:	bne	12158 <__assert_fail@plt+0x143c>
   120d4:	mov	fp, #0
   120d8:	b	11eb8 <__assert_fail@plt+0x119c>
   120dc:	cmp	r7, #0
   120e0:	bne	11bf0 <__assert_fail@plt+0xed4>
   120e4:	mov	r5, #0
   120e8:	b	120d4 <__assert_fail@plt+0x13b8>
   120ec:	cmp	sl, #2
   120f0:	bne	12164 <__assert_fail@plt+0x1448>
   120f4:	cmp	r7, #0
   120f8:	bne	11bf0 <__assert_fail@plt+0xed4>
   120fc:	mov	r5, r7
   12100:	mov	fp, r7
   12104:	ldr	r3, [sp, #52]	; 0x34
   12108:	eor	fp, fp, #1
   1210c:	tst	r3, fp
   12110:	beq	1213c <__assert_fail@plt+0x1420>
   12114:	cmp	r9, r4
   12118:	movhi	r3, #39	; 0x27
   1211c:	strbhi	r3, [r8, r4]
   12120:	add	r3, r4, #1
   12124:	add	r4, r4, #2
   12128:	cmp	r9, r3
   1212c:	movhi	r2, #39	; 0x27
   12130:	strbhi	r2, [r8, r3]
   12134:	mov	r3, #0
   12138:	str	r3, [sp, #52]	; 0x34
   1213c:	cmp	r9, r4
   12140:	ldr	r3, [sp, #72]	; 0x48
   12144:	strbhi	r6, [r8, r4]
   12148:	cmp	r5, #0
   1214c:	add	r4, r4, #1
   12150:	moveq	r3, #0
   12154:	str	r3, [sp, #72]	; 0x48
   12158:	ldr	r3, [sp, #28]
   1215c:	add	r3, r3, #1
   12160:	b	11918 <__assert_fail@plt+0xbfc>
   12164:	ldr	r3, [sp, #24]
   12168:	and	r3, r3, r7
   1216c:	tst	r5, r3
   12170:	moveq	r3, r6
   12174:	beq	11d04 <__assert_fail@plt+0xfe8>
   12178:	mov	fp, #0
   1217c:	mov	r5, fp
   12180:	b	12104 <__assert_fail@plt+0x13e8>
   12184:	mov	r3, #116	; 0x74
   12188:	b	11d04 <__assert_fail@plt+0xfe8>
   1218c:	mov	r3, #110	; 0x6e
   12190:	b	11d04 <__assert_fail@plt+0xfe8>
   12194:	mov	r3, #97	; 0x61
   12198:	ldr	r2, [sp, #24]
   1219c:	cmp	r2, #0
   121a0:	beq	120e4 <__assert_fail@plt+0x13c8>
   121a4:	mov	r6, r3
   121a8:	mov	r5, #0
   121ac:	b	11f0c <__assert_fail@plt+0x11f0>
   121b0:	mov	r3, #98	; 0x62
   121b4:	b	12198 <__assert_fail@plt+0x147c>
   121b8:	mov	r3, #118	; 0x76
   121bc:	b	12198 <__assert_fail@plt+0x147c>
   121c0:	mov	r3, #102	; 0x66
   121c4:	b	12198 <__assert_fail@plt+0x147c>
   121c8:	ldr	r3, [sp, #40]	; 0x28
   121cc:	cmn	r3, #1
   121d0:	bne	121f0 <__assert_fail@plt+0x14d4>
   121d4:	ldr	r3, [sp, #48]	; 0x30
   121d8:	ldrb	r3, [r3, #1]
   121dc:	adds	r3, r3, #0
   121e0:	movne	r3, #1
   121e4:	cmp	r3, #0
   121e8:	bne	120e4 <__assert_fail@plt+0x13c8>
   121ec:	b	11fd0 <__assert_fail@plt+0x12b4>
   121f0:	ldr	r3, [sp, #40]	; 0x28
   121f4:	subs	r3, r3, #1
   121f8:	b	121e0 <__assert_fail@plt+0x14c4>
   121fc:	mov	r3, #0
   12200:	mov	r2, #0
   12204:	strd	r2, [sp, #96]	; 0x60
   12208:	ldr	r3, [sp, #40]	; 0x28
   1220c:	cmn	r3, #1
   12210:	bne	12220 <__assert_fail@plt+0x1504>
   12214:	ldr	r0, [sp, #48]	; 0x30
   12218:	bl	10c50 <strlen@plt>
   1221c:	str	r0, [sp, #40]	; 0x28
   12220:	ldr	r5, [sp, #36]	; 0x24
   12224:	mov	r3, #0
   12228:	str	r3, [sp, #56]	; 0x38
   1222c:	ldr	r3, [sp, #28]
   12230:	add	r0, sp, #92	; 0x5c
   12234:	ldr	r1, [sp, #40]	; 0x28
   12238:	ldr	r2, [sp, #56]	; 0x38
   1223c:	add	r2, r3, r2
   12240:	ldr	r3, [sp, #48]	; 0x30
   12244:	add	fp, r3, r2
   12248:	sub	r2, r1, r2
   1224c:	add	r3, sp, #96	; 0x60
   12250:	mov	r1, fp
   12254:	bl	137f4 <__assert_fail@plt+0x2ad8>
   12258:	subs	r2, r0, #0
   1225c:	beq	1229c <__assert_fail@plt+0x1580>
   12260:	cmn	r2, #1
   12264:	beq	12470 <__assert_fail@plt+0x1754>
   12268:	cmn	r2, #2
   1226c:	bne	123e0 <__assert_fail@plt+0x16c4>
   12270:	ldr	r3, [sp, #28]
   12274:	ldr	r2, [sp, #56]	; 0x38
   12278:	add	r3, r3, r2
   1227c:	ldr	r2, [sp, #40]	; 0x28
   12280:	cmp	r2, r3
   12284:	bls	12470 <__assert_fail@plt+0x1754>
   12288:	ldr	r2, [sp, #56]	; 0x38
   1228c:	ldr	r3, [sp, #80]	; 0x50
   12290:	ldrb	r5, [r3, r2]
   12294:	cmp	r5, #0
   12298:	bne	123d0 <__assert_fail@plt+0x16b4>
   1229c:	ldr	r3, [sp, #56]	; 0x38
   122a0:	cmp	r3, #1
   122a4:	bls	11cc8 <__assert_fail@plt+0xfac>
   122a8:	ldr	r3, [sp, #28]
   122ac:	mov	fp, #0
   122b0:	mov	ip, #92	; 0x5c
   122b4:	ldr	r2, [sp, #56]	; 0x38
   122b8:	add	r3, r3, r2
   122bc:	ldr	r2, [sp, #24]
   122c0:	str	r3, [sp, #36]	; 0x24
   122c4:	eor	r3, r5, #1
   122c8:	and	r3, r3, r2
   122cc:	mov	r2, #39	; 0x27
   122d0:	uxtb	r3, r3
   122d4:	cmp	r3, #0
   122d8:	beq	12478 <__assert_fail@plt+0x175c>
   122dc:	sub	r0, sl, #2
   122e0:	cmp	r7, #0
   122e4:	clz	r0, r0
   122e8:	lsr	r0, r0, #5
   122ec:	bne	11bec <__assert_fail@plt+0xed0>
   122f0:	ldr	r1, [sp, #52]	; 0x34
   122f4:	eor	r1, r1, #1
   122f8:	ands	r1, r0, r1
   122fc:	beq	1232c <__assert_fail@plt+0x1610>
   12300:	cmp	r9, r4
   12304:	add	r0, r4, #1
   12308:	str	r1, [sp, #52]	; 0x34
   1230c:	strbhi	r2, [r8, r4]
   12310:	cmp	r9, r0
   12314:	movhi	lr, #36	; 0x24
   12318:	strbhi	lr, [r8, r0]
   1231c:	add	r0, r4, #2
   12320:	add	r4, r4, #3
   12324:	cmp	r9, r0
   12328:	strbhi	r2, [r8, r0]
   1232c:	cmp	r9, r4
   12330:	add	r0, r4, #1
   12334:	mov	fp, r3
   12338:	strbhi	ip, [r8, r4]
   1233c:	cmp	r9, r0
   12340:	lsrhi	r1, r6, #6
   12344:	addhi	r1, r1, #48	; 0x30
   12348:	strbhi	r1, [r8, r0]
   1234c:	add	r0, r4, #2
   12350:	add	r4, r4, #3
   12354:	cmp	r9, r0
   12358:	ubfxhi	r1, r6, #3, #3
   1235c:	and	r6, r6, #7
   12360:	add	r6, r6, #48	; 0x30
   12364:	addhi	r1, r1, #48	; 0x30
   12368:	strbhi	r1, [r8, r0]
   1236c:	eor	r0, fp, #1
   12370:	ldr	r1, [sp, #28]
   12374:	ldr	lr, [sp, #52]	; 0x34
   12378:	add	r1, r1, #1
   1237c:	and	r0, r0, lr
   12380:	ldr	lr, [sp, #36]	; 0x24
   12384:	cmp	r1, lr
   12388:	bcs	12104 <__assert_fail@plt+0x13e8>
   1238c:	cmp	r0, #0
   12390:	beq	123b4 <__assert_fail@plt+0x1698>
   12394:	cmp	r9, r4
   12398:	add	r0, r4, #1
   1239c:	strbhi	r2, [r8, r4]
   123a0:	cmp	r9, r0
   123a4:	add	r4, r4, #2
   123a8:	strbhi	r2, [r8, r0]
   123ac:	mov	r0, #0
   123b0:	str	r0, [sp, #52]	; 0x34
   123b4:	ldr	r0, [sp, #48]	; 0x30
   123b8:	cmp	r9, r4
   123bc:	str	r1, [sp, #28]
   123c0:	strbhi	r6, [r8, r4]
   123c4:	add	r4, r4, #1
   123c8:	ldrb	r6, [r0, r1]
   123cc:	b	122d4 <__assert_fail@plt+0x15b8>
   123d0:	ldr	r3, [sp, #56]	; 0x38
   123d4:	add	r3, r3, #1
   123d8:	str	r3, [sp, #56]	; 0x38
   123dc:	b	12270 <__assert_fail@plt+0x1554>
   123e0:	cmp	sl, #2
   123e4:	movne	r3, #0
   123e8:	andeq	r3, r7, #1
   123ec:	cmp	r3, #0
   123f0:	movne	r1, #1
   123f4:	bne	12450 <__assert_fail@plt+0x1734>
   123f8:	ldr	r0, [sp, #92]	; 0x5c
   123fc:	str	r2, [sp, #84]	; 0x54
   12400:	bl	10ba8 <iswprint@plt>
   12404:	ldr	r3, [sp, #56]	; 0x38
   12408:	cmp	r0, #0
   1240c:	add	r0, sp, #96	; 0x60
   12410:	moveq	r5, #0
   12414:	ldr	r2, [sp, #84]	; 0x54
   12418:	add	r3, r3, r2
   1241c:	str	r3, [sp, #56]	; 0x38
   12420:	bl	10b60 <mbsinit@plt>
   12424:	cmp	r0, #0
   12428:	beq	1222c <__assert_fail@plt+0x1510>
   1242c:	b	1229c <__assert_fail@plt+0x1580>
   12430:	ldrb	r3, [fp, #1]!
   12434:	cmp	r3, #94	; 0x5e
   12438:	beq	11d18 <__assert_fail@plt+0xffc>
   1243c:	bhi	1245c <__assert_fail@plt+0x1740>
   12440:	sub	r3, r3, #91	; 0x5b
   12444:	cmp	r3, #1
   12448:	bls	11d18 <__assert_fail@plt+0xffc>
   1244c:	add	r1, r1, #1
   12450:	cmp	r1, r2
   12454:	bne	12430 <__assert_fail@plt+0x1714>
   12458:	b	123f8 <__assert_fail@plt+0x16dc>
   1245c:	cmp	r3, #96	; 0x60
   12460:	beq	11d18 <__assert_fail@plt+0xffc>
   12464:	cmp	r3, #124	; 0x7c
   12468:	bne	1244c <__assert_fail@plt+0x1730>
   1246c:	b	11d18 <__assert_fail@plt+0xffc>
   12470:	mov	r5, #0
   12474:	b	1229c <__assert_fail@plt+0x1580>
   12478:	ldr	r1, [sp, #64]	; 0x40
   1247c:	cmp	r1, #0
   12480:	beq	1236c <__assert_fail@plt+0x1650>
   12484:	cmp	r9, r4
   12488:	mov	r1, #0
   1248c:	strbhi	ip, [r8, r4]
   12490:	add	r4, r4, #1
   12494:	str	r1, [sp, #64]	; 0x40
   12498:	b	1236c <__assert_fail@plt+0x1650>
   1249c:	mov	r5, fp
   124a0:	ldr	fp, [sp, #24]
   124a4:	mov	r6, #48	; 0x30
   124a8:	b	11eb8 <__assert_fail@plt+0x119c>
   124ac:	mov	r5, #0
   124b0:	b	11eb8 <__assert_fail@plt+0x119c>
   124b4:	mov	r6, r1
   124b8:	b	120e4 <__assert_fail@plt+0x13c8>
   124bc:	mov	r6, r1
   124c0:	b	120d4 <__assert_fail@plt+0x13b8>
   124c4:	ldr	r2, [sp, #28]
   124c8:	ldr	r3, [sp, #40]	; 0x28
   124cc:	subs	r3, r3, r2
   124d0:	movne	r3, #1
   124d4:	b	1193c <__assert_fail@plt+0xc20>
   124d8:	ldr	r3, [sp, #60]	; 0x3c
   124dc:	mov	sl, #2
   124e0:	ldr	r7, [sp, #72]	; 0x48
   124e4:	adds	r6, r3, #0
   124e8:	mov	r5, r3
   124ec:	movne	r6, #1
   124f0:	cmp	r9, #0
   124f4:	movne	r6, #0
   124f8:	cmp	r6, #0
   124fc:	bne	118cc <__assert_fail@plt+0xbb0>
   12500:	ldr	r3, [sp, #68]	; 0x44
   12504:	ldr	r2, [sp, #44]	; 0x2c
   12508:	cmp	r2, #0
   1250c:	moveq	r3, #0
   12510:	andne	r3, r3, #1
   12514:	cmp	r3, #0
   12518:	movne	r3, r2
   1251c:	subne	r3, r3, #1
   12520:	bne	12550 <__assert_fail@plt+0x1834>
   12524:	cmp	r9, r4
   12528:	movhi	r3, #0
   1252c:	strbhi	r3, [r8, r4]
   12530:	mov	r0, r4
   12534:	add	sp, sp, #108	; 0x6c
   12538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1253c:	mov	r3, r7
   12540:	b	12504 <__assert_fail@plt+0x17e8>
   12544:	cmp	r9, r4
   12548:	strbhi	r2, [r8, r4]
   1254c:	add	r4, r4, #1
   12550:	ldrb	r2, [r3, #1]!
   12554:	cmp	r2, #0
   12558:	bne	12544 <__assert_fail@plt+0x1828>
   1255c:	b	12524 <__assert_fail@plt+0x1808>
   12560:	andeq	r4, r1, ip, asr #1
   12564:	ldrdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   12568:	ldrdeq	r4, [r1], -sp
   1256c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12574:	sub	sp, sp, #52	; 0x34
   12578:	mov	r6, r0
   1257c:	mov	r5, r3
   12580:	mov	r8, r1
   12584:	mov	r9, r2
   12588:	bl	10c5c <__errno_location@plt>
   1258c:	ldr	r3, [r0]
   12590:	cmn	r6, #-2147483647	; 0x80000001
   12594:	str	r0, [sp, #24]
   12598:	ldr	r7, [pc, #368]	; 12710 <__assert_fail@plt+0x19f4>
   1259c:	str	r3, [sp, #32]
   125a0:	movne	r3, #0
   125a4:	moveq	r3, #1
   125a8:	orrs	r3, r3, r6, lsr #31
   125ac:	ldr	r4, [r7]
   125b0:	beq	125b8 <__assert_fail@plt+0x189c>
   125b4:	bl	10d04 <abort@plt>
   125b8:	ldr	r2, [r7, #4]
   125bc:	cmp	r2, r6
   125c0:	bgt	12630 <__assert_fail@plt+0x1914>
   125c4:	add	sl, r7, #8
   125c8:	mov	r3, #8
   125cc:	cmp	r4, sl
   125d0:	add	r1, sp, #44	; 0x2c
   125d4:	str	r2, [sp, #44]	; 0x2c
   125d8:	sub	r2, r6, r2
   125dc:	movne	r0, r4
   125e0:	moveq	r0, #0
   125e4:	add	r2, r2, #1
   125e8:	str	r3, [sp]
   125ec:	mvn	r3, #-2147483648	; 0x80000000
   125f0:	bl	132c4 <__assert_fail@plt+0x25a8>
   125f4:	cmp	r4, sl
   125f8:	mov	fp, r0
   125fc:	str	r0, [r7]
   12600:	ldmeq	r4, {r0, r1}
   12604:	mov	r4, fp
   12608:	ldr	r2, [sp, #44]	; 0x2c
   1260c:	stmeq	fp, {r0, r1}
   12610:	mov	r1, #0
   12614:	ldr	r0, [r7, #4]
   12618:	sub	r2, r2, r0
   1261c:	add	r0, fp, r0, lsl #3
   12620:	lsl	r2, r2, #3
   12624:	bl	10c74 <memset@plt>
   12628:	ldr	r3, [sp, #44]	; 0x2c
   1262c:	str	r3, [r7, #4]
   12630:	ldr	r3, [r5, #4]
   12634:	add	sl, r4, r6, lsl #3
   12638:	mov	r2, r8
   1263c:	ldr	fp, [r4, r6, lsl #3]
   12640:	ldr	r7, [sl, #4]
   12644:	orr	r3, r3, #1
   12648:	str	r3, [sp, #28]
   1264c:	add	r3, r5, #8
   12650:	mov	r1, fp
   12654:	str	r3, [sp, #36]	; 0x24
   12658:	mov	r0, r7
   1265c:	ldr	r3, [r5, #44]	; 0x2c
   12660:	str	r3, [sp, #16]
   12664:	ldr	r3, [r5, #40]	; 0x28
   12668:	str	r3, [sp, #12]
   1266c:	add	r3, r5, #8
   12670:	str	r3, [sp, #8]
   12674:	ldr	r3, [sp, #28]
   12678:	str	r3, [sp, #4]
   1267c:	ldr	r3, [r5]
   12680:	str	r3, [sp]
   12684:	mov	r3, r9
   12688:	bl	11880 <__assert_fail@plt+0xb64>
   1268c:	cmp	fp, r0
   12690:	bhi	126f8 <__assert_fail@plt+0x19dc>
   12694:	ldr	r3, [pc, #120]	; 12714 <__assert_fail@plt+0x19f8>
   12698:	add	fp, r0, #1
   1269c:	str	fp, [r4, r6, lsl #3]
   126a0:	cmp	r7, r3
   126a4:	beq	126b0 <__assert_fail@plt+0x1994>
   126a8:	mov	r0, r7
   126ac:	bl	136b0 <__assert_fail@plt+0x2994>
   126b0:	mov	r0, fp
   126b4:	bl	131b4 <__assert_fail@plt+0x2498>
   126b8:	ldr	r3, [r5, #44]	; 0x2c
   126bc:	mov	r2, r8
   126c0:	mov	r1, fp
   126c4:	str	r0, [sl, #4]
   126c8:	mov	r7, r0
   126cc:	str	r3, [sp, #16]
   126d0:	ldr	r3, [r5, #40]	; 0x28
   126d4:	str	r3, [sp, #12]
   126d8:	add	r3, r5, #8
   126dc:	str	r3, [sp, #8]
   126e0:	ldr	r3, [sp, #28]
   126e4:	str	r3, [sp, #4]
   126e8:	ldr	r3, [r5]
   126ec:	str	r3, [sp]
   126f0:	mov	r3, r9
   126f4:	bl	11880 <__assert_fail@plt+0xb64>
   126f8:	ldr	r3, [sp, #24]
   126fc:	mov	r0, r7
   12700:	ldr	r2, [sp, #32]
   12704:	str	r2, [r3]
   12708:	add	sp, sp, #52	; 0x34
   1270c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12710:	ldrdeq	r5, [r2], -r4
   12714:	andeq	r5, r2, r8, lsr r1
   12718:	push	{r4, r5, r6, lr}
   1271c:	mov	r5, r0
   12720:	bl	10c5c <__errno_location@plt>
   12724:	mov	r4, r0
   12728:	cmp	r5, #0
   1272c:	ldr	r0, [pc, #20]	; 12748 <__assert_fail@plt+0x1a2c>
   12730:	mov	r1, #48	; 0x30
   12734:	movne	r0, r5
   12738:	ldr	r6, [r4]
   1273c:	bl	133b4 <__assert_fail@plt+0x2698>
   12740:	str	r6, [r4]
   12744:	pop	{r4, r5, r6, pc}
   12748:	andeq	r5, r2, r8, lsr r2
   1274c:	ldr	r3, [pc, #12]	; 12760 <__assert_fail@plt+0x1a44>
   12750:	cmp	r0, #0
   12754:	moveq	r0, r3
   12758:	ldr	r0, [r0]
   1275c:	bx	lr
   12760:	andeq	r5, r2, r8, lsr r2
   12764:	ldr	r3, [pc, #12]	; 12778 <__assert_fail@plt+0x1a5c>
   12768:	cmp	r0, #0
   1276c:	moveq	r0, r3
   12770:	str	r1, [r0]
   12774:	bx	lr
   12778:	andeq	r5, r2, r8, lsr r2
   1277c:	ldr	r3, [pc, #52]	; 127b8 <__assert_fail@plt+0x1a9c>
   12780:	cmp	r0, #0
   12784:	push	{lr}		; (str lr, [sp, #-4]!)
   12788:	lsr	lr, r1, #5
   1278c:	and	r1, r1, #31
   12790:	moveq	r0, r3
   12794:	add	r3, r0, #8
   12798:	ldr	ip, [r3, lr, lsl #2]
   1279c:	lsr	r0, ip, r1
   127a0:	eor	r2, r2, r0
   127a4:	and	r0, r0, #1
   127a8:	and	r2, r2, #1
   127ac:	eor	r1, ip, r2, lsl r1
   127b0:	str	r1, [r3, lr, lsl #2]
   127b4:	pop	{pc}		; (ldr pc, [sp], #4)
   127b8:	andeq	r5, r2, r8, lsr r2
   127bc:	ldr	r3, [pc, #16]	; 127d4 <__assert_fail@plt+0x1ab8>
   127c0:	cmp	r0, #0
   127c4:	movne	r3, r0
   127c8:	ldr	r0, [r3, #4]
   127cc:	str	r1, [r3, #4]
   127d0:	bx	lr
   127d4:	andeq	r5, r2, r8, lsr r2
   127d8:	ldr	r3, [pc, #44]	; 1280c <__assert_fail@plt+0x1af0>
   127dc:	cmp	r0, #0
   127e0:	moveq	r0, r3
   127e4:	mov	r3, #10
   127e8:	cmp	r2, #0
   127ec:	cmpne	r1, #0
   127f0:	str	r3, [r0]
   127f4:	bne	12800 <__assert_fail@plt+0x1ae4>
   127f8:	push	{r4, lr}
   127fc:	bl	10d04 <abort@plt>
   12800:	str	r1, [r0, #40]	; 0x28
   12804:	str	r2, [r0, #44]	; 0x2c
   12808:	bx	lr
   1280c:	andeq	r5, r2, r8, lsr r2
   12810:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12814:	sub	sp, sp, #24
   12818:	mov	sl, r3
   1281c:	mov	r7, r0
   12820:	mov	r8, r1
   12824:	mov	r9, r2
   12828:	ldr	r4, [sp, #56]	; 0x38
   1282c:	ldr	r3, [pc, #88]	; 1288c <__assert_fail@plt+0x1b70>
   12830:	cmp	r4, #0
   12834:	moveq	r4, r3
   12838:	bl	10c5c <__errno_location@plt>
   1283c:	ldr	r3, [r4, #44]	; 0x2c
   12840:	mov	r5, r0
   12844:	mov	r2, r9
   12848:	mov	r1, r8
   1284c:	mov	r0, r7
   12850:	ldr	r6, [r5]
   12854:	str	r3, [sp, #16]
   12858:	ldr	r3, [r4, #40]	; 0x28
   1285c:	str	r3, [sp, #12]
   12860:	add	r3, r4, #8
   12864:	str	r3, [sp, #8]
   12868:	ldr	r3, [r4, #4]
   1286c:	str	r3, [sp, #4]
   12870:	ldr	r3, [r4]
   12874:	str	r3, [sp]
   12878:	mov	r3, sl
   1287c:	bl	11880 <__assert_fail@plt+0xb64>
   12880:	str	r6, [r5]
   12884:	add	sp, sp, #24
   12888:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1288c:	andeq	r5, r2, r8, lsr r2
   12890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12894:	cmp	r3, #0
   12898:	sub	sp, sp, #44	; 0x2c
   1289c:	mov	r6, r2
   128a0:	mov	sl, r1
   128a4:	mov	r9, r0
   128a8:	ldr	r4, [pc, #176]	; 12960 <__assert_fail@plt+0x1c44>
   128ac:	movne	r4, r3
   128b0:	bl	10c5c <__errno_location@plt>
   128b4:	ldr	r3, [r0]
   128b8:	mov	r1, #0
   128bc:	mov	r2, r9
   128c0:	mov	r8, r0
   128c4:	mov	r0, r1
   128c8:	ldr	r5, [r4, #4]
   128cc:	add	fp, r4, #8
   128d0:	str	r3, [sp, #28]
   128d4:	ldr	r3, [r4, #44]	; 0x2c
   128d8:	cmp	r6, #0
   128dc:	orreq	r5, r5, #1
   128e0:	str	r3, [sp, #16]
   128e4:	ldr	r3, [r4, #40]	; 0x28
   128e8:	stmib	sp, {r5, fp}
   128ec:	str	r3, [sp, #12]
   128f0:	ldr	r3, [r4]
   128f4:	str	r3, [sp]
   128f8:	mov	r3, sl
   128fc:	bl	11880 <__assert_fail@plt+0xb64>
   12900:	add	r1, r0, #1
   12904:	mov	r7, r0
   12908:	mov	r0, r1
   1290c:	str	r1, [sp, #36]	; 0x24
   12910:	bl	131b4 <__assert_fail@plt+0x2498>
   12914:	ldr	r3, [r4, #44]	; 0x2c
   12918:	mov	r2, r9
   1291c:	ldr	r1, [sp, #36]	; 0x24
   12920:	str	r3, [sp, #16]
   12924:	ldr	r3, [r4, #40]	; 0x28
   12928:	stmib	sp, {r5, fp}
   1292c:	str	r0, [sp, #32]
   12930:	str	r3, [sp, #12]
   12934:	ldr	r3, [r4]
   12938:	str	r3, [sp]
   1293c:	mov	r3, sl
   12940:	bl	11880 <__assert_fail@plt+0xb64>
   12944:	ldr	r3, [sp, #28]
   12948:	cmp	r6, #0
   1294c:	ldr	r0, [sp, #32]
   12950:	str	r3, [r8]
   12954:	strne	r7, [r6]
   12958:	add	sp, sp, #44	; 0x2c
   1295c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12960:	andeq	r5, r2, r8, lsr r2
   12964:	mov	r3, r2
   12968:	mov	r2, #0
   1296c:	b	12890 <__assert_fail@plt+0x1b74>
   12970:	push	{r4, r5, r6, r7, r8, lr}
   12974:	mov	r6, #1
   12978:	ldr	r4, [pc, #100]	; 129e4 <__assert_fail@plt+0x1cc8>
   1297c:	ldr	r5, [r4]
   12980:	add	r7, r5, #4
   12984:	ldr	r3, [r4, #4]
   12988:	cmp	r3, r6
   1298c:	bgt	129d4 <__assert_fail@plt+0x1cb8>
   12990:	ldr	r6, [pc, #80]	; 129e8 <__assert_fail@plt+0x1ccc>
   12994:	ldr	r0, [r5, #4]
   12998:	cmp	r0, r6
   1299c:	beq	129b0 <__assert_fail@plt+0x1c94>
   129a0:	bl	136b0 <__assert_fail@plt+0x2994>
   129a4:	mov	r3, #256	; 0x100
   129a8:	str	r3, [r4, #8]
   129ac:	str	r6, [r4, #12]
   129b0:	ldr	r6, [pc, #52]	; 129ec <__assert_fail@plt+0x1cd0>
   129b4:	cmp	r5, r6
   129b8:	beq	129c8 <__assert_fail@plt+0x1cac>
   129bc:	mov	r0, r5
   129c0:	bl	136b0 <__assert_fail@plt+0x2994>
   129c4:	str	r6, [r4]
   129c8:	mov	r3, #1
   129cc:	str	r3, [r4, #4]
   129d0:	pop	{r4, r5, r6, r7, r8, pc}
   129d4:	ldr	r0, [r7, r6, lsl #3]
   129d8:	add	r6, r6, #1
   129dc:	bl	136b0 <__assert_fail@plt+0x2994>
   129e0:	b	12984 <__assert_fail@plt+0x1c68>
   129e4:	ldrdeq	r5, [r2], -r4
   129e8:	andeq	r5, r2, r8, lsr r1
   129ec:	ldrdeq	r5, [r2], -ip
   129f0:	ldr	r3, [pc, #4]	; 129fc <__assert_fail@plt+0x1ce0>
   129f4:	mvn	r2, #0
   129f8:	b	12570 <__assert_fail@plt+0x1854>
   129fc:	andeq	r5, r2, r8, lsr r2
   12a00:	ldr	r3, [pc]	; 12a08 <__assert_fail@plt+0x1cec>
   12a04:	b	12570 <__assert_fail@plt+0x1854>
   12a08:	andeq	r5, r2, r8, lsr r2
   12a0c:	mov	r1, r0
   12a10:	mov	r0, #0
   12a14:	b	129f0 <__assert_fail@plt+0x1cd4>
   12a18:	mov	r2, r1
   12a1c:	mov	r1, r0
   12a20:	mov	r0, #0
   12a24:	b	12a00 <__assert_fail@plt+0x1ce4>
   12a28:	push	{r4, r5, lr}
   12a2c:	sub	sp, sp, #52	; 0x34
   12a30:	mov	r5, r2
   12a34:	mov	r4, r0
   12a38:	mov	r0, sp
   12a3c:	bl	11724 <__assert_fail@plt+0xa08>
   12a40:	mov	r3, sp
   12a44:	mvn	r2, #0
   12a48:	mov	r1, r5
   12a4c:	mov	r0, r4
   12a50:	bl	12570 <__assert_fail@plt+0x1854>
   12a54:	add	sp, sp, #52	; 0x34
   12a58:	pop	{r4, r5, pc}
   12a5c:	push	{r4, r5, r6, lr}
   12a60:	sub	sp, sp, #48	; 0x30
   12a64:	mov	r5, r2
   12a68:	mov	r6, r3
   12a6c:	mov	r4, r0
   12a70:	mov	r0, sp
   12a74:	bl	11724 <__assert_fail@plt+0xa08>
   12a78:	mov	r3, sp
   12a7c:	mov	r2, r6
   12a80:	mov	r1, r5
   12a84:	mov	r0, r4
   12a88:	bl	12570 <__assert_fail@plt+0x1854>
   12a8c:	add	sp, sp, #48	; 0x30
   12a90:	pop	{r4, r5, r6, pc}
   12a94:	mov	r2, r1
   12a98:	mov	r1, r0
   12a9c:	mov	r0, #0
   12aa0:	b	12a28 <__assert_fail@plt+0x1d0c>
   12aa4:	mov	r3, r2
   12aa8:	mov	r2, r1
   12aac:	mov	r1, r0
   12ab0:	mov	r0, #0
   12ab4:	b	12a5c <__assert_fail@plt+0x1d40>
   12ab8:	push	{r4, r5, r6, lr}
   12abc:	mov	r4, r0
   12ac0:	mov	r5, r1
   12ac4:	mov	r6, r2
   12ac8:	sub	sp, sp, #48	; 0x30
   12acc:	mov	ip, sp
   12ad0:	ldr	lr, [pc, #64]	; 12b18 <__assert_fail@plt+0x1dfc>
   12ad4:	ldm	lr!, {r0, r1, r2, r3}
   12ad8:	stmia	ip!, {r0, r1, r2, r3}
   12adc:	ldm	lr!, {r0, r1, r2, r3}
   12ae0:	stmia	ip!, {r0, r1, r2, r3}
   12ae4:	ldm	lr, {r0, r1, r2, r3}
   12ae8:	stm	ip, {r0, r1, r2, r3}
   12aec:	mov	r1, r6
   12af0:	mov	r2, #1
   12af4:	mov	r0, sp
   12af8:	bl	1277c <__assert_fail@plt+0x1a60>
   12afc:	mov	r3, sp
   12b00:	mov	r2, r5
   12b04:	mov	r1, r4
   12b08:	mov	r0, #0
   12b0c:	bl	12570 <__assert_fail@plt+0x1854>
   12b10:	add	sp, sp, #48	; 0x30
   12b14:	pop	{r4, r5, r6, pc}
   12b18:	andeq	r5, r2, r8, lsr r2
   12b1c:	mov	r2, r1
   12b20:	mvn	r1, #0
   12b24:	b	12ab8 <__assert_fail@plt+0x1d9c>
   12b28:	mov	r1, #58	; 0x3a
   12b2c:	b	12b1c <__assert_fail@plt+0x1e00>
   12b30:	mov	r2, #58	; 0x3a
   12b34:	b	12ab8 <__assert_fail@plt+0x1d9c>
   12b38:	push	{r4, r5, lr}
   12b3c:	sub	sp, sp, #100	; 0x64
   12b40:	mov	r4, r0
   12b44:	mov	r0, sp
   12b48:	mov	r5, r2
   12b4c:	bl	11724 <__assert_fail@plt+0xa08>
   12b50:	mov	ip, sp
   12b54:	add	lr, sp, #48	; 0x30
   12b58:	ldm	ip!, {r0, r1, r2, r3}
   12b5c:	stmia	lr!, {r0, r1, r2, r3}
   12b60:	ldm	ip!, {r0, r1, r2, r3}
   12b64:	stmia	lr!, {r0, r1, r2, r3}
   12b68:	ldm	ip, {r0, r1, r2, r3}
   12b6c:	stm	lr, {r0, r1, r2, r3}
   12b70:	mov	r2, #1
   12b74:	mov	r1, #58	; 0x3a
   12b78:	add	r0, sp, #48	; 0x30
   12b7c:	bl	1277c <__assert_fail@plt+0x1a60>
   12b80:	add	r3, sp, #48	; 0x30
   12b84:	mvn	r2, #0
   12b88:	mov	r1, r5
   12b8c:	mov	r0, r4
   12b90:	bl	12570 <__assert_fail@plt+0x1854>
   12b94:	add	sp, sp, #100	; 0x64
   12b98:	pop	{r4, r5, pc}
   12b9c:	push	{r4, r5, r6, r7, lr}
   12ba0:	mov	r4, r0
   12ba4:	mov	r6, r1
   12ba8:	mov	r7, r2
   12bac:	mov	r5, r3
   12bb0:	sub	sp, sp, #52	; 0x34
   12bb4:	ldr	lr, [pc, #68]	; 12c00 <__assert_fail@plt+0x1ee4>
   12bb8:	mov	ip, sp
   12bbc:	ldm	lr!, {r0, r1, r2, r3}
   12bc0:	stmia	ip!, {r0, r1, r2, r3}
   12bc4:	ldm	lr!, {r0, r1, r2, r3}
   12bc8:	stmia	ip!, {r0, r1, r2, r3}
   12bcc:	ldm	lr, {r0, r1, r2, r3}
   12bd0:	stm	ip, {r0, r1, r2, r3}
   12bd4:	mov	r2, r7
   12bd8:	mov	r1, r6
   12bdc:	mov	r0, sp
   12be0:	bl	127d8 <__assert_fail@plt+0x1abc>
   12be4:	ldr	r2, [sp, #72]	; 0x48
   12be8:	mov	r3, sp
   12bec:	mov	r1, r5
   12bf0:	mov	r0, r4
   12bf4:	bl	12570 <__assert_fail@plt+0x1854>
   12bf8:	add	sp, sp, #52	; 0x34
   12bfc:	pop	{r4, r5, r6, r7, pc}
   12c00:	andeq	r5, r2, r8, lsr r2
   12c04:	mvn	ip, #0
   12c08:	push	{r0, r1, r2, lr}
   12c0c:	str	ip, [sp]
   12c10:	bl	12b9c <__assert_fail@plt+0x1e80>
   12c14:	add	sp, sp, #12
   12c18:	pop	{pc}		; (ldr pc, [sp], #4)
   12c1c:	mov	r3, r2
   12c20:	mov	r2, r1
   12c24:	mov	r1, r0
   12c28:	mov	r0, #0
   12c2c:	b	12c04 <__assert_fail@plt+0x1ee8>
   12c30:	push	{r0, r1, r2, lr}
   12c34:	str	r3, [sp]
   12c38:	mov	r3, r2
   12c3c:	mov	r2, r1
   12c40:	mov	r1, r0
   12c44:	mov	r0, #0
   12c48:	bl	12b9c <__assert_fail@plt+0x1e80>
   12c4c:	add	sp, sp, #12
   12c50:	pop	{pc}		; (ldr pc, [sp], #4)
   12c54:	ldr	r3, [pc]	; 12c5c <__assert_fail@plt+0x1f40>
   12c58:	b	12570 <__assert_fail@plt+0x1854>
   12c5c:	andeq	r5, r2, r4, ror #1
   12c60:	mov	r2, r1
   12c64:	mov	r1, r0
   12c68:	mov	r0, #0
   12c6c:	b	12c54 <__assert_fail@plt+0x1f38>
   12c70:	mvn	r2, #0
   12c74:	b	12c54 <__assert_fail@plt+0x1f38>
   12c78:	mov	r1, r0
   12c7c:	mov	r0, #0
   12c80:	b	12c70 <__assert_fail@plt+0x1f54>
   12c84:	push	{r4, r5, r6, lr}
   12c88:	cmp	r1, #0
   12c8c:	sub	sp, sp, #32
   12c90:	mov	r5, r0
   12c94:	ldr	r4, [sp, #48]	; 0x30
   12c98:	ldr	r6, [sp, #52]	; 0x34
   12c9c:	beq	12d50 <__assert_fail@plt+0x2034>
   12ca0:	strd	r2, [sp]
   12ca4:	mov	r3, r1
   12ca8:	mov	r1, #1
   12cac:	ldr	r2, [pc, #856]	; 1300c <__assert_fail@plt+0x22f0>
   12cb0:	bl	10c98 <__fprintf_chk@plt>
   12cb4:	mov	r2, #5
   12cb8:	ldr	r1, [pc, #848]	; 13010 <__assert_fail@plt+0x22f4>
   12cbc:	mov	r0, #0
   12cc0:	bl	10b84 <dcgettext@plt>
   12cc4:	movw	r3, #2022	; 0x7e6
   12cc8:	ldr	r2, [pc, #836]	; 13014 <__assert_fail@plt+0x22f8>
   12ccc:	mov	r1, #1
   12cd0:	str	r3, [sp]
   12cd4:	mov	r3, r0
   12cd8:	mov	r0, r5
   12cdc:	bl	10c98 <__fprintf_chk@plt>
   12ce0:	mov	r1, r5
   12ce4:	mov	r0, #10
   12ce8:	bl	10b78 <fputc_unlocked@plt>
   12cec:	mov	r2, #5
   12cf0:	ldr	r1, [pc, #800]	; 13018 <__assert_fail@plt+0x22fc>
   12cf4:	mov	r0, #0
   12cf8:	bl	10b84 <dcgettext@plt>
   12cfc:	mov	r2, r0
   12d00:	mov	r1, #1
   12d04:	ldr	r3, [pc, #784]	; 1301c <__assert_fail@plt+0x2300>
   12d08:	mov	r0, r5
   12d0c:	bl	10c98 <__fprintf_chk@plt>
   12d10:	mov	r1, r5
   12d14:	mov	r0, #10
   12d18:	bl	10b78 <fputc_unlocked@plt>
   12d1c:	cmp	r6, #9
   12d20:	ldrls	pc, [pc, r6, lsl #2]
   12d24:	b	13000 <__assert_fail@plt+0x22e4>
   12d28:	andeq	r2, r1, r0, asr #28
   12d2c:	andeq	r2, r1, r8, ror #26
   12d30:	muleq	r1, r4, sp
   12d34:	andeq	r2, r1, r8, asr #27
   12d38:	andeq	r2, r1, r4, lsl #28
   12d3c:	andeq	r2, r1, r8, asr #28
   12d40:	muleq	r1, r0, lr
   12d44:	andeq	r2, r1, r0, ror #29
   12d48:	andeq	r2, r1, r8, lsr pc
   12d4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12d50:	mov	r1, #1
   12d54:	str	r3, [sp]
   12d58:	mov	r3, r2
   12d5c:	ldr	r2, [pc, #700]	; 13020 <__assert_fail@plt+0x2304>
   12d60:	bl	10c98 <__fprintf_chk@plt>
   12d64:	b	12cb4 <__assert_fail@plt+0x1f98>
   12d68:	mov	r2, #5
   12d6c:	ldr	r1, [pc, #688]	; 13024 <__assert_fail@plt+0x2308>
   12d70:	mov	r0, #0
   12d74:	bl	10b84 <dcgettext@plt>
   12d78:	ldr	r3, [r4]
   12d7c:	mov	r2, r0
   12d80:	mov	r1, #1
   12d84:	mov	r0, r5
   12d88:	add	sp, sp, #32
   12d8c:	pop	{r4, r5, r6, lr}
   12d90:	b	10c98 <__fprintf_chk@plt>
   12d94:	mov	r2, #5
   12d98:	ldr	r1, [pc, #648]	; 13028 <__assert_fail@plt+0x230c>
   12d9c:	mov	r0, #0
   12da0:	bl	10b84 <dcgettext@plt>
   12da4:	ldr	r3, [r4, #4]
   12da8:	mov	r2, r0
   12dac:	mov	r1, #1
   12db0:	mov	r0, r5
   12db4:	str	r3, [sp, #48]	; 0x30
   12db8:	ldr	r3, [r4]
   12dbc:	add	sp, sp, #32
   12dc0:	pop	{r4, r5, r6, lr}
   12dc4:	b	10c98 <__fprintf_chk@plt>
   12dc8:	mov	r2, #5
   12dcc:	ldr	r1, [pc, #600]	; 1302c <__assert_fail@plt+0x2310>
   12dd0:	mov	r0, #0
   12dd4:	bl	10b84 <dcgettext@plt>
   12dd8:	ldr	r3, [r4, #8]
   12ddc:	mov	r2, r0
   12de0:	mov	r1, #1
   12de4:	mov	r0, r5
   12de8:	str	r3, [sp, #52]	; 0x34
   12dec:	ldr	r3, [r4, #4]
   12df0:	str	r3, [sp, #48]	; 0x30
   12df4:	ldr	r3, [r4]
   12df8:	add	sp, sp, #32
   12dfc:	pop	{r4, r5, r6, lr}
   12e00:	b	10c98 <__fprintf_chk@plt>
   12e04:	mov	r2, #5
   12e08:	ldr	r1, [pc, #544]	; 13030 <__assert_fail@plt+0x2314>
   12e0c:	mov	r0, #0
   12e10:	bl	10b84 <dcgettext@plt>
   12e14:	ldr	r3, [r4, #12]
   12e18:	mov	r2, r0
   12e1c:	mov	r1, #1
   12e20:	mov	r0, r5
   12e24:	str	r3, [sp, #8]
   12e28:	ldr	r3, [r4, #8]
   12e2c:	str	r3, [sp, #4]
   12e30:	ldr	r3, [r4, #4]
   12e34:	str	r3, [sp]
   12e38:	ldr	r3, [r4]
   12e3c:	bl	10c98 <__fprintf_chk@plt>
   12e40:	add	sp, sp, #32
   12e44:	pop	{r4, r5, r6, pc}
   12e48:	mov	r2, #5
   12e4c:	ldr	r1, [pc, #480]	; 13034 <__assert_fail@plt+0x2318>
   12e50:	mov	r0, #0
   12e54:	bl	10b84 <dcgettext@plt>
   12e58:	ldr	r3, [r4, #16]
   12e5c:	mov	r2, r0
   12e60:	mov	r1, #1
   12e64:	mov	r0, r5
   12e68:	str	r3, [sp, #12]
   12e6c:	ldr	r3, [r4, #12]
   12e70:	str	r3, [sp, #8]
   12e74:	ldr	r3, [r4, #8]
   12e78:	str	r3, [sp, #4]
   12e7c:	ldr	r3, [r4, #4]
   12e80:	str	r3, [sp]
   12e84:	ldr	r3, [r4]
   12e88:	bl	10c98 <__fprintf_chk@plt>
   12e8c:	b	12e40 <__assert_fail@plt+0x2124>
   12e90:	mov	r2, #5
   12e94:	ldr	r1, [pc, #412]	; 13038 <__assert_fail@plt+0x231c>
   12e98:	mov	r0, #0
   12e9c:	bl	10b84 <dcgettext@plt>
   12ea0:	ldr	r3, [r4, #20]
   12ea4:	mov	r2, r0
   12ea8:	mov	r1, #1
   12eac:	mov	r0, r5
   12eb0:	str	r3, [sp, #16]
   12eb4:	ldr	r3, [r4, #16]
   12eb8:	str	r3, [sp, #12]
   12ebc:	ldr	r3, [r4, #12]
   12ec0:	str	r3, [sp, #8]
   12ec4:	ldr	r3, [r4, #8]
   12ec8:	str	r3, [sp, #4]
   12ecc:	ldr	r3, [r4, #4]
   12ed0:	str	r3, [sp]
   12ed4:	ldr	r3, [r4]
   12ed8:	bl	10c98 <__fprintf_chk@plt>
   12edc:	b	12e40 <__assert_fail@plt+0x2124>
   12ee0:	mov	r2, #5
   12ee4:	ldr	r1, [pc, #336]	; 1303c <__assert_fail@plt+0x2320>
   12ee8:	mov	r0, #0
   12eec:	bl	10b84 <dcgettext@plt>
   12ef0:	ldr	r3, [r4, #24]
   12ef4:	mov	r2, r0
   12ef8:	mov	r1, #1
   12efc:	mov	r0, r5
   12f00:	str	r3, [sp, #20]
   12f04:	ldr	r3, [r4, #20]
   12f08:	str	r3, [sp, #16]
   12f0c:	ldr	r3, [r4, #16]
   12f10:	str	r3, [sp, #12]
   12f14:	ldr	r3, [r4, #12]
   12f18:	str	r3, [sp, #8]
   12f1c:	ldr	r3, [r4, #8]
   12f20:	str	r3, [sp, #4]
   12f24:	ldr	r3, [r4, #4]
   12f28:	str	r3, [sp]
   12f2c:	ldr	r3, [r4]
   12f30:	bl	10c98 <__fprintf_chk@plt>
   12f34:	b	12e40 <__assert_fail@plt+0x2124>
   12f38:	mov	r2, #5
   12f3c:	ldr	r1, [pc, #252]	; 13040 <__assert_fail@plt+0x2324>
   12f40:	mov	r0, #0
   12f44:	bl	10b84 <dcgettext@plt>
   12f48:	ldr	r3, [r4, #28]
   12f4c:	mov	r2, r0
   12f50:	mov	r1, #1
   12f54:	mov	r0, r5
   12f58:	str	r3, [sp, #24]
   12f5c:	ldr	r3, [r4, #24]
   12f60:	str	r3, [sp, #20]
   12f64:	ldr	r3, [r4, #20]
   12f68:	str	r3, [sp, #16]
   12f6c:	ldr	r3, [r4, #16]
   12f70:	str	r3, [sp, #12]
   12f74:	ldr	r3, [r4, #12]
   12f78:	str	r3, [sp, #8]
   12f7c:	ldr	r3, [r4, #8]
   12f80:	str	r3, [sp, #4]
   12f84:	ldr	r3, [r4, #4]
   12f88:	str	r3, [sp]
   12f8c:	ldr	r3, [r4]
   12f90:	bl	10c98 <__fprintf_chk@plt>
   12f94:	b	12e40 <__assert_fail@plt+0x2124>
   12f98:	ldr	r1, [pc, #164]	; 13044 <__assert_fail@plt+0x2328>
   12f9c:	mov	r2, #5
   12fa0:	mov	r0, #0
   12fa4:	bl	10b84 <dcgettext@plt>
   12fa8:	ldr	r3, [r4, #32]
   12fac:	mov	r2, r0
   12fb0:	mov	r1, #1
   12fb4:	mov	r0, r5
   12fb8:	str	r3, [sp, #28]
   12fbc:	ldr	r3, [r4, #28]
   12fc0:	str	r3, [sp, #24]
   12fc4:	ldr	r3, [r4, #24]
   12fc8:	str	r3, [sp, #20]
   12fcc:	ldr	r3, [r4, #20]
   12fd0:	str	r3, [sp, #16]
   12fd4:	ldr	r3, [r4, #16]
   12fd8:	str	r3, [sp, #12]
   12fdc:	ldr	r3, [r4, #12]
   12fe0:	str	r3, [sp, #8]
   12fe4:	ldr	r3, [r4, #8]
   12fe8:	str	r3, [sp, #4]
   12fec:	ldr	r3, [r4, #4]
   12ff0:	str	r3, [sp]
   12ff4:	ldr	r3, [r4]
   12ff8:	bl	10c98 <__fprintf_chk@plt>
   12ffc:	b	12e40 <__assert_fail@plt+0x2124>
   13000:	mov	r2, #5
   13004:	ldr	r1, [pc, #60]	; 13048 <__assert_fail@plt+0x232c>
   13008:	b	12fa0 <__assert_fail@plt+0x2284>
   1300c:	andeq	r4, r1, sp, lsr #2
   13010:	andeq	r4, r1, r0, asr #2
   13014:	andeq	r4, r1, lr, lsl #8
   13018:	andeq	r4, r1, r4, asr #2
   1301c:	andeq	r4, r1, pc, ror #3
   13020:	andeq	r4, r1, r9, lsr r1
   13024:	andeq	r4, r1, r1, lsl r2
   13028:	andeq	r4, r1, r1, lsr #4
   1302c:	andeq	r4, r1, r8, lsr r2
   13030:	andeq	r4, r1, r4, asr r2
   13034:	andeq	r4, r1, r4, ror r2
   13038:	muleq	r1, r8, r2
   1303c:	andeq	r4, r1, r0, asr #5
   13040:	andeq	r4, r1, ip, ror #5
   13044:	andeq	r4, r1, ip, lsl r3
   13048:	andeq	r4, r1, r0, asr r3
   1304c:	push	{r0, r1, r4, lr}
   13050:	mov	ip, #0
   13054:	ldr	lr, [sp, #16]
   13058:	ldr	r4, [lr, ip, lsl #2]
   1305c:	cmp	r4, #0
   13060:	bne	13078 <__assert_fail@plt+0x235c>
   13064:	str	lr, [sp]
   13068:	str	ip, [sp, #4]
   1306c:	bl	12c84 <__assert_fail@plt+0x1f68>
   13070:	add	sp, sp, #8
   13074:	pop	{r4, pc}
   13078:	add	ip, ip, #1
   1307c:	b	13058 <__assert_fail@plt+0x233c>
   13080:	push	{r4, r5, r6, lr}
   13084:	sub	sp, sp, #48	; 0x30
   13088:	mov	ip, #0
   1308c:	add	lr, sp, #8
   13090:	mov	r5, lr
   13094:	ldr	r6, [sp, #64]	; 0x40
   13098:	ldr	r4, [r6, ip, lsl #2]
   1309c:	cmp	r4, #0
   130a0:	str	r4, [lr], #4
   130a4:	beq	130b4 <__assert_fail@plt+0x2398>
   130a8:	add	ip, ip, #1
   130ac:	cmp	ip, #10
   130b0:	bne	13098 <__assert_fail@plt+0x237c>
   130b4:	stm	sp, {r5, ip}
   130b8:	bl	12c84 <__assert_fail@plt+0x1f68>
   130bc:	add	sp, sp, #48	; 0x30
   130c0:	pop	{r4, r5, r6, pc}
   130c4:	push	{r3}		; (str r3, [sp, #-4]!)
   130c8:	push	{r0, r1, r2, r3, lr}
   130cc:	add	r3, sp, #24
   130d0:	str	r3, [sp]
   130d4:	str	r3, [sp, #12]
   130d8:	ldr	r3, [sp, #20]
   130dc:	bl	13080 <__assert_fail@plt+0x2364>
   130e0:	add	sp, sp, #16
   130e4:	pop	{lr}		; (ldr lr, [sp], #4)
   130e8:	add	sp, sp, #4
   130ec:	bx	lr
   130f0:	ldr	r3, [pc, #116]	; 1316c <__assert_fail@plt+0x2450>
   130f4:	mov	r0, #10
   130f8:	push	{r4, lr}
   130fc:	ldr	r1, [r3]
   13100:	bl	10b78 <fputc_unlocked@plt>
   13104:	mov	r2, #5
   13108:	ldr	r1, [pc, #96]	; 13170 <__assert_fail@plt+0x2454>
   1310c:	mov	r0, #0
   13110:	bl	10b84 <dcgettext@plt>
   13114:	mov	r1, r0
   13118:	ldr	r2, [pc, #84]	; 13174 <__assert_fail@plt+0x2458>
   1311c:	mov	r0, #1
   13120:	bl	10c80 <__printf_chk@plt>
   13124:	mov	r2, #5
   13128:	ldr	r1, [pc, #72]	; 13178 <__assert_fail@plt+0x245c>
   1312c:	mov	r0, #0
   13130:	bl	10b84 <dcgettext@plt>
   13134:	mov	r1, r0
   13138:	ldr	r3, [pc, #60]	; 1317c <__assert_fail@plt+0x2460>
   1313c:	mov	r0, #1
   13140:	ldr	r2, [pc, #56]	; 13180 <__assert_fail@plt+0x2464>
   13144:	bl	10c80 <__printf_chk@plt>
   13148:	mov	r2, #5
   1314c:	ldr	r1, [pc, #48]	; 13184 <__assert_fail@plt+0x2468>
   13150:	mov	r0, #0
   13154:	bl	10b84 <dcgettext@plt>
   13158:	mov	r1, r0
   1315c:	ldr	r2, [pc, #36]	; 13188 <__assert_fail@plt+0x246c>
   13160:	mov	r0, #1
   13164:	pop	{r4, lr}
   13168:	b	10c80 <__printf_chk@plt>
   1316c:	andeq	r5, r2, r4, lsr #2
   13170:	andeq	r4, r1, ip, lsl #7
   13174:	andeq	r4, r1, r0, lsr #7
   13178:			; <UNDEFINED> instruction: 0x000143b6
   1317c:	muleq	r1, r3, lr
   13180:			; <UNDEFINED> instruction: 0x00013ebb
   13184:	andeq	r4, r1, sl, asr #7
   13188:	strdeq	r4, [r1], -r1
   1318c:	push	{r4, lr}
   13190:	bl	134d8 <__assert_fail@plt+0x27bc>
   13194:	cmp	r0, #0
   13198:	popne	{r4, pc}
   1319c:	bl	13444 <__assert_fail@plt+0x2728>
   131a0:	push	{r4, lr}
   131a4:	bl	134d8 <__assert_fail@plt+0x27bc>
   131a8:	cmp	r0, #0
   131ac:	popne	{r4, pc}
   131b0:	bl	13444 <__assert_fail@plt+0x2728>
   131b4:	b	1318c <__assert_fail@plt+0x2470>
   131b8:	push	{r4, r5, r6, lr}
   131bc:	mov	r5, r0
   131c0:	mov	r4, r1
   131c4:	bl	13504 <__assert_fail@plt+0x27e8>
   131c8:	cmp	r0, #0
   131cc:	popne	{r4, r5, r6, pc}
   131d0:	adds	r4, r4, #0
   131d4:	movne	r4, #1
   131d8:	cmp	r5, #0
   131dc:	moveq	r4, #1
   131e0:	cmp	r4, #0
   131e4:	popeq	{r4, r5, r6, pc}
   131e8:	bl	13444 <__assert_fail@plt+0x2728>
   131ec:	push	{r4, lr}
   131f0:	bl	1379c <__assert_fail@plt+0x2a80>
   131f4:	cmp	r0, #0
   131f8:	popne	{r4, pc}
   131fc:	bl	13444 <__assert_fail@plt+0x2728>
   13200:	push	{r4, r5, r6, lr}
   13204:	mov	r6, r0
   13208:	mov	r5, r1
   1320c:	mov	r4, r2
   13210:	bl	13844 <__assert_fail@plt+0x2b28>
   13214:	cmp	r0, #0
   13218:	popne	{r4, r5, r6, pc}
   1321c:	cmp	r6, #0
   13220:	beq	13230 <__assert_fail@plt+0x2514>
   13224:	cmp	r5, #0
   13228:	cmpne	r4, #0
   1322c:	popeq	{r4, r5, r6, pc}
   13230:	bl	13444 <__assert_fail@plt+0x2728>
   13234:	b	13200 <__assert_fail@plt+0x24e4>
   13238:	push	{r4, lr}
   1323c:	bl	137ac <__assert_fail@plt+0x2a90>
   13240:	cmp	r0, #0
   13244:	popne	{r4, pc}
   13248:	bl	13444 <__assert_fail@plt+0x2728>
   1324c:	mov	r2, r1
   13250:	mov	r1, r0
   13254:	mov	r0, #0
   13258:	b	13200 <__assert_fail@plt+0x24e4>
   1325c:	mov	r2, r1
   13260:	mov	r1, r0
   13264:	mov	r0, #0
   13268:	b	13238 <__assert_fail@plt+0x251c>
   1326c:	cmp	r0, #0
   13270:	push	{r4, r5, r6, lr}
   13274:	mov	r5, r1
   13278:	ldr	r4, [r1]
   1327c:	bne	132a8 <__assert_fail@plt+0x258c>
   13280:	cmp	r4, #0
   13284:	bne	13298 <__assert_fail@plt+0x257c>
   13288:	mov	r4, #64	; 0x40
   1328c:	udiv	r4, r4, r2
   13290:	cmp	r2, #64	; 0x40
   13294:	addhi	r4, r4, #1
   13298:	mov	r1, r4
   1329c:	bl	13200 <__assert_fail@plt+0x24e4>
   132a0:	str	r4, [r5]
   132a4:	pop	{r4, r5, r6, pc}
   132a8:	lsr	r3, r4, #1
   132ac:	add	r3, r3, #1
   132b0:	adds	r4, r4, r3
   132b4:	bcc	13298 <__assert_fail@plt+0x257c>
   132b8:	bl	13444 <__assert_fail@plt+0x2728>
   132bc:	mov	r2, #1
   132c0:	b	1326c <__assert_fail@plt+0x2550>
   132c4:	ldr	ip, [r1]
   132c8:	push	{r4, r5, r6, r7, r8, lr}
   132cc:	mov	r5, r1
   132d0:	mvn	r8, r3
   132d4:	lsr	r8, r8, #31
   132d8:	ldr	lr, [sp, #24]
   132dc:	asr	r1, ip, #1
   132e0:	adds	r4, ip, r1
   132e4:	mvnvs	r4, #-2147483648	; 0x80000000
   132e8:	cmp	r3, r4
   132ec:	movge	r1, #0
   132f0:	andlt	r1, r8, #1
   132f4:	cmp	r1, #0
   132f8:	movne	r4, r3
   132fc:	smull	r6, r7, r4, lr
   13300:	cmp	r7, r6, asr #31
   13304:	bne	1331c <__assert_fail@plt+0x2600>
   13308:	cmp	r6, #63	; 0x3f
   1330c:	mov	r1, r6
   13310:	bgt	1332c <__assert_fail@plt+0x2610>
   13314:	mov	r1, #64	; 0x40
   13318:	b	13320 <__assert_fail@plt+0x2604>
   1331c:	mvn	r1, #-2147483648	; 0x80000000
   13320:	sdiv	r4, r1, lr
   13324:	mls	r6, lr, r4, r1
   13328:	sub	r1, r1, r6
   1332c:	cmp	r0, #0
   13330:	sub	r6, r4, ip
   13334:	streq	r0, [r5]
   13338:	cmp	r6, r2
   1333c:	bge	13370 <__assert_fail@plt+0x2654>
   13340:	adds	r4, ip, r2
   13344:	bvs	1336c <__assert_fail@plt+0x2650>
   13348:	cmp	r4, r3
   1334c:	movle	r3, #0
   13350:	andgt	r3, r8, #1
   13354:	cmp	r3, #0
   13358:	bne	1336c <__assert_fail@plt+0x2650>
   1335c:	smull	r2, r3, r4, lr
   13360:	cmp	r3, r2, asr #31
   13364:	mov	r1, r2
   13368:	beq	13370 <__assert_fail@plt+0x2654>
   1336c:	bl	13444 <__assert_fail@plt+0x2728>
   13370:	bl	131b8 <__assert_fail@plt+0x249c>
   13374:	str	r4, [r5]
   13378:	pop	{r4, r5, r6, r7, r8, pc}
   1337c:	push	{r4, lr}
   13380:	bl	13484 <__assert_fail@plt+0x2768>
   13384:	cmp	r0, #0
   13388:	popne	{r4, pc}
   1338c:	bl	13444 <__assert_fail@plt+0x2728>
   13390:	mov	r1, #1
   13394:	b	1337c <__assert_fail@plt+0x2660>
   13398:	push	{r4, lr}
   1339c:	bl	13484 <__assert_fail@plt+0x2768>
   133a0:	cmp	r0, #0
   133a4:	popne	{r4, pc}
   133a8:	bl	13444 <__assert_fail@plt+0x2728>
   133ac:	mov	r1, #1
   133b0:	b	13398 <__assert_fail@plt+0x267c>
   133b4:	push	{r4, r5, r6, lr}
   133b8:	mov	r4, r1
   133bc:	mov	r5, r0
   133c0:	mov	r0, r1
   133c4:	bl	1318c <__assert_fail@plt+0x2470>
   133c8:	mov	r2, r4
   133cc:	mov	r1, r5
   133d0:	pop	{r4, r5, r6, lr}
   133d4:	b	10b54 <memcpy@plt>
   133d8:	push	{r4, r5, r6, lr}
   133dc:	mov	r4, r1
   133e0:	mov	r5, r0
   133e4:	mov	r0, r1
   133e8:	bl	131a0 <__assert_fail@plt+0x2484>
   133ec:	mov	r2, r4
   133f0:	mov	r1, r5
   133f4:	pop	{r4, r5, r6, lr}
   133f8:	b	10b54 <memcpy@plt>
   133fc:	push	{r4, r5, r6, lr}
   13400:	mov	r5, r0
   13404:	add	r0, r1, #1
   13408:	mov	r4, r1
   1340c:	bl	131a0 <__assert_fail@plt+0x2484>
   13410:	mov	r2, #0
   13414:	mov	r1, r5
   13418:	strb	r2, [r0, r4]
   1341c:	mov	r2, r4
   13420:	pop	{r4, r5, r6, lr}
   13424:	b	10b54 <memcpy@plt>
   13428:	push	{r4, lr}
   1342c:	mov	r4, r0
   13430:	bl	10c50 <strlen@plt>
   13434:	add	r1, r0, #1
   13438:	mov	r0, r4
   1343c:	pop	{r4, lr}
   13440:	b	133b4 <__assert_fail@plt+0x2698>
   13444:	ldr	r3, [pc, #44]	; 13478 <__assert_fail@plt+0x275c>
   13448:	mov	r2, #5
   1344c:	mov	r0, #0
   13450:	push	{r4, lr}
   13454:	ldr	r1, [pc, #32]	; 1347c <__assert_fail@plt+0x2760>
   13458:	ldr	r4, [r3]
   1345c:	bl	10b84 <dcgettext@plt>
   13460:	mov	r3, r0
   13464:	ldr	r2, [pc, #20]	; 13480 <__assert_fail@plt+0x2764>
   13468:	mov	r1, #0
   1346c:	mov	r0, r4
   13470:	bl	10bf0 <error@plt>
   13474:	bl	10d04 <abort@plt>
   13478:	ldrdeq	r5, [r2], -r0
   1347c:	andeq	r4, r1, sp, lsr r4
   13480:	andeq	r4, r1, r1, lsr r0
   13484:	cmp	r1, #0
   13488:	cmpne	r0, #0
   1348c:	beq	134c4 <__assert_fail@plt+0x27a8>
   13490:	push	{r4, r5, r6, lr}
   13494:	umull	r4, r5, r0, r1
   13498:	adds	r3, r5, #0
   1349c:	movne	r3, #1
   134a0:	cmp	r4, #0
   134a4:	blt	134b0 <__assert_fail@plt+0x2794>
   134a8:	cmp	r3, #0
   134ac:	beq	134d0 <__assert_fail@plt+0x27b4>
   134b0:	bl	10c5c <__errno_location@plt>
   134b4:	mov	r3, #12
   134b8:	str	r3, [r0]
   134bc:	mov	r0, #0
   134c0:	pop	{r4, r5, r6, pc}
   134c4:	mov	r1, #1
   134c8:	mov	r0, r1
   134cc:	b	10b0c <calloc@plt>
   134d0:	pop	{r4, r5, r6, lr}
   134d4:	b	134cc <__assert_fail@plt+0x27b0>
   134d8:	cmp	r0, #0
   134dc:	beq	134fc <__assert_fail@plt+0x27e0>
   134e0:	bge	13500 <__assert_fail@plt+0x27e4>
   134e4:	push	{r4, lr}
   134e8:	bl	10c5c <__errno_location@plt>
   134ec:	mov	r3, #12
   134f0:	str	r3, [r0]
   134f4:	mov	r0, #0
   134f8:	pop	{r4, pc}
   134fc:	mov	r0, #1
   13500:	b	10c08 <malloc@plt>
   13504:	cmp	r0, #0
   13508:	bne	13514 <__assert_fail@plt+0x27f8>
   1350c:	mov	r0, r1
   13510:	b	134d8 <__assert_fail@plt+0x27bc>
   13514:	cmp	r1, #0
   13518:	push	{r4, lr}
   1351c:	bne	1352c <__assert_fail@plt+0x2810>
   13520:	bl	136b0 <__assert_fail@plt+0x2994>
   13524:	mov	r0, #0
   13528:	pop	{r4, pc}
   1352c:	blt	13538 <__assert_fail@plt+0x281c>
   13530:	pop	{r4, lr}
   13534:	b	10b90 <realloc@plt>
   13538:	bl	10c5c <__errno_location@plt>
   1353c:	mov	r3, #12
   13540:	str	r3, [r0]
   13544:	b	13524 <__assert_fail@plt+0x2808>
   13548:	push	{r4, r5, r6, lr}
   1354c:	mov	r4, r0
   13550:	bl	10bcc <__fpending@plt>
   13554:	mov	r5, r0
   13558:	mov	r0, r4
   1355c:	bl	10bd8 <ferror_unlocked@plt>
   13560:	mov	r6, r0
   13564:	mov	r0, r4
   13568:	bl	135b8 <__assert_fail@plt+0x289c>
   1356c:	cmp	r6, #0
   13570:	mov	r4, r0
   13574:	bne	135a0 <__assert_fail@plt+0x2884>
   13578:	cmp	r0, #0
   1357c:	beq	13598 <__assert_fail@plt+0x287c>
   13580:	cmp	r5, #0
   13584:	bne	135b0 <__assert_fail@plt+0x2894>
   13588:	bl	10c5c <__errno_location@plt>
   1358c:	ldr	r4, [r0]
   13590:	subs	r4, r4, #9
   13594:	mvnne	r4, #0
   13598:	mov	r0, r4
   1359c:	pop	{r4, r5, r6, pc}
   135a0:	cmp	r0, #0
   135a4:	bne	135b0 <__assert_fail@plt+0x2894>
   135a8:	bl	10c5c <__errno_location@plt>
   135ac:	str	r4, [r0]
   135b0:	mvn	r4, #0
   135b4:	b	13598 <__assert_fail@plt+0x287c>
   135b8:	push	{r0, r1, r2, r4, r5, lr}
   135bc:	mov	r4, r0
   135c0:	bl	10c8c <fileno@plt>
   135c4:	cmp	r0, #0
   135c8:	mov	r0, r4
   135cc:	bge	135dc <__assert_fail@plt+0x28c0>
   135d0:	add	sp, sp, #12
   135d4:	pop	{r4, r5, lr}
   135d8:	b	10ca4 <fclose@plt>
   135dc:	bl	10c20 <__freading@plt>
   135e0:	cmp	r0, #0
   135e4:	bne	13620 <__assert_fail@plt+0x2904>
   135e8:	mov	r0, r4
   135ec:	bl	13660 <__assert_fail@plt+0x2944>
   135f0:	cmp	r0, #0
   135f4:	bne	13654 <__assert_fail@plt+0x2938>
   135f8:	mov	r5, #0
   135fc:	mov	r0, r4
   13600:	bl	10ca4 <fclose@plt>
   13604:	cmp	r5, #0
   13608:	beq	13618 <__assert_fail@plt+0x28fc>
   1360c:	bl	10c5c <__errno_location@plt>
   13610:	str	r5, [r0]
   13614:	mvn	r0, #0
   13618:	add	sp, sp, #12
   1361c:	pop	{r4, r5, pc}
   13620:	mov	r0, r4
   13624:	bl	10c8c <fileno@plt>
   13628:	mov	r3, #1
   1362c:	mov	r2, #0
   13630:	str	r3, [sp]
   13634:	mov	r3, #0
   13638:	bl	10bb4 <lseek64@plt>
   1363c:	mvn	r3, #0
   13640:	mvn	r2, #0
   13644:	cmp	r1, r3
   13648:	cmpeq	r0, r2
   1364c:	bne	135e8 <__assert_fail@plt+0x28cc>
   13650:	b	135f8 <__assert_fail@plt+0x28dc>
   13654:	bl	10c5c <__errno_location@plt>
   13658:	ldr	r5, [r0]
   1365c:	b	135fc <__assert_fail@plt+0x28e0>
   13660:	push	{r0, r1, r4, lr}
   13664:	subs	r4, r0, #0
   13668:	bne	1367c <__assert_fail@plt+0x2960>
   1366c:	mov	r0, r4
   13670:	add	sp, sp, #8
   13674:	pop	{r4, lr}
   13678:	b	10b30 <fflush@plt>
   1367c:	bl	10c20 <__freading@plt>
   13680:	cmp	r0, #0
   13684:	beq	1366c <__assert_fail@plt+0x2950>
   13688:	ldr	r3, [r4]
   1368c:	tst	r3, #256	; 0x100
   13690:	beq	1366c <__assert_fail@plt+0x2950>
   13694:	mov	r3, #1
   13698:	mov	r2, #0
   1369c:	mov	r0, r4
   136a0:	str	r3, [sp]
   136a4:	mov	r3, #0
   136a8:	bl	13700 <__assert_fail@plt+0x29e4>
   136ac:	b	1366c <__assert_fail@plt+0x2950>
   136b0:	push	{r0, r1, r2, r4, r5, lr}
   136b4:	mov	r5, r0
   136b8:	bl	10c5c <__errno_location@plt>
   136bc:	mov	r4, r0
   136c0:	mov	r0, r5
   136c4:	ldr	r3, [r4]
   136c8:	str	r3, [sp]
   136cc:	str	r3, [sp, #4]
   136d0:	mov	r3, #0
   136d4:	str	r3, [r4]
   136d8:	bl	10b3c <free@plt>
   136dc:	ldr	r3, [r4]
   136e0:	add	r2, sp, #8
   136e4:	clz	r3, r3
   136e8:	lsr	r3, r3, #5
   136ec:	add	r3, r2, r3, lsl #2
   136f0:	ldr	r3, [r3, #-8]
   136f4:	str	r3, [r4]
   136f8:	add	sp, sp, #12
   136fc:	pop	{r4, r5, pc}
   13700:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13704:	mov	r4, r0
   13708:	ldmib	r0, {ip, lr}
   1370c:	ldr	r8, [sp, #32]
   13710:	cmp	lr, ip
   13714:	bne	13784 <__assert_fail@plt+0x2a68>
   13718:	ldr	ip, [r0, #16]
   1371c:	ldr	lr, [r0, #20]
   13720:	cmp	lr, ip
   13724:	bne	13784 <__assert_fail@plt+0x2a68>
   13728:	ldr	r5, [r0, #36]	; 0x24
   1372c:	cmp	r5, #0
   13730:	bne	13784 <__assert_fail@plt+0x2a68>
   13734:	mov	r6, r2
   13738:	mov	r7, r3
   1373c:	bl	10c8c <fileno@plt>
   13740:	mov	r2, r6
   13744:	mov	r3, r7
   13748:	str	r8, [sp]
   1374c:	bl	10bb4 <lseek64@plt>
   13750:	mvn	r3, #0
   13754:	mvn	r2, #0
   13758:	cmp	r1, r3
   1375c:	cmpeq	r0, r2
   13760:	mvneq	r0, #0
   13764:	beq	1377c <__assert_fail@plt+0x2a60>
   13768:	ldr	r3, [r4]
   1376c:	strd	r0, [r4, #80]	; 0x50
   13770:	mov	r0, r5
   13774:	bic	r3, r3, #16
   13778:	str	r3, [r4]
   1377c:	add	sp, sp, #8
   13780:	pop	{r4, r5, r6, r7, r8, pc}
   13784:	mov	r0, r4
   13788:	str	r8, [sp, #32]
   1378c:	add	sp, sp, #8
   13790:	pop	{r4, r5, r6, r7, r8, lr}
   13794:	b	10cb0 <fseeko64@plt>
   13798:	b	134d8 <__assert_fail@plt+0x27bc>
   1379c:	cmp	r1, #0
   137a0:	orreq	r1, r1, #1
   137a4:	b	13504 <__assert_fail@plt+0x27e8>
   137a8:	b	13484 <__assert_fail@plt+0x2768>
   137ac:	cmp	r2, #0
   137b0:	cmpne	r1, #0
   137b4:	moveq	r2, #1
   137b8:	moveq	r1, r2
   137bc:	b	13844 <__assert_fail@plt+0x2b28>
   137c0:	push	{r4, lr}
   137c4:	mov	r0, #14
   137c8:	bl	10cd4 <nl_langinfo@plt>
   137cc:	cmp	r0, #0
   137d0:	beq	137e8 <__assert_fail@plt+0x2acc>
   137d4:	ldrb	r2, [r0]
   137d8:	ldr	r3, [pc, #16]	; 137f0 <__assert_fail@plt+0x2ad4>
   137dc:	cmp	r2, #0
   137e0:	moveq	r0, r3
   137e4:	pop	{r4, pc}
   137e8:	ldr	r0, [pc]	; 137f0 <__assert_fail@plt+0x2ad4>
   137ec:	pop	{r4, pc}
   137f0:	andeq	r4, r1, lr, asr #8
   137f4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   137f8:	subs	r5, r0, #0
   137fc:	mov	r7, r2
   13800:	addeq	r5, sp, #4
   13804:	mov	r6, r1
   13808:	mov	r0, r5
   1380c:	bl	10be4 <mbrtowc@plt>
   13810:	cmp	r7, #0
   13814:	cmnne	r0, #3
   13818:	mov	r4, r0
   1381c:	bls	13838 <__assert_fail@plt+0x2b1c>
   13820:	mov	r0, #0
   13824:	bl	13870 <__assert_fail@plt+0x2b54>
   13828:	cmp	r0, #0
   1382c:	ldrbeq	r3, [r6]
   13830:	moveq	r4, #1
   13834:	streq	r3, [r5]
   13838:	mov	r0, r4
   1383c:	add	sp, sp, #12
   13840:	pop	{r4, r5, r6, r7, pc}
   13844:	umull	r2, r3, r1, r2
   13848:	cmp	r3, #0
   1384c:	bne	13858 <__assert_fail@plt+0x2b3c>
   13850:	mov	r1, r2
   13854:	b	13504 <__assert_fail@plt+0x27e8>
   13858:	push	{r4, lr}
   1385c:	bl	10c5c <__errno_location@plt>
   13860:	mov	r3, #12
   13864:	str	r3, [r0]
   13868:	mov	r0, #0
   1386c:	pop	{r4, pc}
   13870:	push	{lr}		; (str lr, [sp, #-4]!)
   13874:	sub	sp, sp, #268	; 0x10c
   13878:	movw	r2, #257	; 0x101
   1387c:	add	r1, sp, #4
   13880:	bl	138cc <__assert_fail@plt+0x2bb0>
   13884:	cmp	r0, #0
   13888:	movne	r0, #0
   1388c:	bne	138bc <__assert_fail@plt+0x2ba0>
   13890:	ldr	r1, [pc, #44]	; 138c4 <__assert_fail@plt+0x2ba8>
   13894:	add	r0, sp, #4
   13898:	bl	10b24 <strcmp@plt>
   1389c:	cmp	r0, #0
   138a0:	beq	138b8 <__assert_fail@plt+0x2b9c>
   138a4:	ldr	r1, [pc, #28]	; 138c8 <__assert_fail@plt+0x2bac>
   138a8:	add	r0, sp, #4
   138ac:	bl	10b24 <strcmp@plt>
   138b0:	adds	r0, r0, #0
   138b4:	movne	r0, #1
   138b8:	and	r0, r0, #1
   138bc:	add	sp, sp, #268	; 0x10c
   138c0:	pop	{pc}		; (ldr pc, [sp], #4)
   138c4:	andeq	r4, r1, r4, asr r4
   138c8:	andeq	r4, r1, r6, asr r4
   138cc:	push	{r4, r5, r6, lr}
   138d0:	mov	r5, r1
   138d4:	mov	r1, #0
   138d8:	mov	r4, r2
   138dc:	bl	10cbc <setlocale@plt>
   138e0:	subs	r6, r0, #0
   138e4:	bne	138f8 <__assert_fail@plt+0x2bdc>
   138e8:	cmp	r4, #0
   138ec:	mov	r0, #22
   138f0:	strbne	r6, [r5]
   138f4:	pop	{r4, r5, r6, pc}
   138f8:	bl	10c50 <strlen@plt>
   138fc:	cmp	r4, r0
   13900:	bls	1391c <__assert_fail@plt+0x2c00>
   13904:	add	r2, r0, #1
   13908:	mov	r1, r6
   1390c:	mov	r0, r5
   13910:	bl	10b54 <memcpy@plt>
   13914:	mov	r0, #0
   13918:	pop	{r4, r5, r6, pc}
   1391c:	cmp	r4, #0
   13920:	beq	13940 <__assert_fail@plt+0x2c24>
   13924:	sub	r4, r4, #1
   13928:	mov	r1, r6
   1392c:	mov	r2, r4
   13930:	mov	r0, r5
   13934:	bl	10b54 <memcpy@plt>
   13938:	mov	r3, #0
   1393c:	strb	r3, [r5, r4]
   13940:	mov	r0, #34	; 0x22
   13944:	pop	{r4, r5, r6, pc}
   13948:	mov	r1, #0
   1394c:	b	10cbc <setlocale@plt>
   13950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13954:	mov	r7, r0
   13958:	ldr	r6, [pc, #72]	; 139a8 <__assert_fail@plt+0x2c8c>
   1395c:	ldr	r5, [pc, #72]	; 139ac <__assert_fail@plt+0x2c90>
   13960:	add	r6, pc, r6
   13964:	add	r5, pc, r5
   13968:	sub	r6, r6, r5
   1396c:	mov	r8, r1
   13970:	mov	r9, r2
   13974:	bl	10aec <calloc@plt-0x20>
   13978:	asrs	r6, r6, #2
   1397c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13980:	mov	r4, #0
   13984:	add	r4, r4, #1
   13988:	ldr	r3, [r5], #4
   1398c:	mov	r2, r9
   13990:	mov	r1, r8
   13994:	mov	r0, r7
   13998:	blx	r3
   1399c:	cmp	r6, r4
   139a0:	bne	13984 <__assert_fail@plt+0x2c68>
   139a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139a8:	andeq	r1, r1, ip, lsr #11
   139ac:	andeq	r1, r1, r4, lsr #11
   139b0:	bx	lr
   139b4:	ldr	r3, [pc, #12]	; 139c8 <__assert_fail@plt+0x2cac>
   139b8:	mov	r1, #0
   139bc:	add	r3, pc, r3
   139c0:	ldr	r2, [r3]
   139c4:	b	10c68 <__cxa_atexit@plt>
   139c8:	andeq	r1, r1, r4, lsl #14

Disassembly of section .fini:

000139cc <.fini>:
   139cc:	push	{r3, lr}
   139d0:	pop	{r3, pc}
