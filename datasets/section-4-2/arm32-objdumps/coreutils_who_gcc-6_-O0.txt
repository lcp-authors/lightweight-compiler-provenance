
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010e64 <.init>:
   10e64:	push	{r3, lr}
   10e68:	bl	111cc <__assert_fail@plt+0x48>
   10e6c:	pop	{r3, pc}

Disassembly of section .plt:

00010e70 <calloc@plt-0x14>:
   10e70:	push	{lr}		; (str lr, [sp, #-4]!)
   10e74:	ldr	lr, [pc, #4]	; 10e80 <calloc@plt-0x4>
   10e78:	add	lr, pc, lr
   10e7c:	ldr	pc, [lr, #8]!
   10e80:	andeq	r9, r1, r0, lsl #3

00010e84 <calloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #384]!	; 0x180

00010e90 <fputs_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #376]!	; 0x178

00010e9c <raise@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #368]!	; 0x170

00010ea8 <strcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #360]!	; 0x168

00010eb4 <printf@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #352]!	; 0x160

00010ec0 <fflush@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #344]!	; 0x158

00010ecc <utmpxname@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #336]!	; 0x150

00010ed8 <free@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #328]!	; 0x148

00010ee4 <gai_strerror@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #320]!	; 0x140

00010ef0 <_exit@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #312]!	; 0x138

00010efc <memcpy@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #304]!	; 0x130

00010f08 <mbsinit@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #296]!	; 0x128

00010f14 <time@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #288]!	; 0x120

00010f20 <memcmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #280]!	; 0x118

00010f2c <stpcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #272]!	; 0x110

00010f38 <fputc_unlocked@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #264]!	; 0x108

00010f44 <strdup@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #256]!	; 0x100

00010f50 <setutxent@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #248]!	; 0xf8

00010f5c <realloc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #240]!	; 0xf0

00010f68 <textdomain@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #232]!	; 0xe8

00010f74 <iswprint@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #224]!	; 0xe0

00010f80 <fwrite@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #216]!	; 0xd8

00010f8c <lseek64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #208]!	; 0xd0

00010f98 <__ctype_get_mb_cur_max@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #200]!	; 0xc8

00010fa4 <__fpending@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #192]!	; 0xc0

00010fb0 <ferror_unlocked@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #184]!	; 0xb8

00010fbc <mbrtowc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #176]!	; 0xb0

00010fc8 <error@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #168]!	; 0xa8

00010fd4 <puts@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #160]!	; 0xa0

00010fe0 <malloc@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #152]!	; 0x98

00010fec <__libc_start_main@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #144]!	; 0x90

00010ff8 <strftime@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #136]!	; 0x88

00011004 <__freading@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #128]!	; 0x80

00011010 <localtime@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #120]!	; 0x78

0001101c <__gmon_start__@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #112]!	; 0x70

00011028 <getopt_long@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #104]!	; 0x68

00011034 <kill@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #96]!	; 0x60

00011040 <__ctype_b_loc@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #88]!	; 0x58

0001104c <exit@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #80]!	; 0x50

00011058 <gettext@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #72]!	; 0x48

00011064 <ttyname@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #64]!	; 0x40

00011070 <strlen@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #56]!	; 0x38

0001107c <strchr@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #48]!	; 0x30

00011088 <fprintf@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #40]!	; 0x28

00011094 <__errno_location@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #32]!

000110a0 <__cxa_atexit@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #24]!

000110ac <memset@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #102400	; 0x19000
   110b4:	ldr	pc, [ip, #16]!

000110b8 <strncpy@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #102400	; 0x19000
   110c0:	ldr	pc, [ip, #8]!

000110c4 <fileno@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #102400	; 0x19000
   110cc:	ldr	pc, [ip, #0]!

000110d0 <asprintf@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #24, 20	; 0x18000
   110d8:	ldr	pc, [ip, #4088]!	; 0xff8

000110dc <fclose@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #24, 20	; 0x18000
   110e4:	ldr	pc, [ip, #4080]!	; 0xff0

000110e8 <fseeko64@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #24, 20	; 0x18000
   110f0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f4 <endutxent@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #24, 20	; 0x18000
   110fc:	ldr	pc, [ip, #4064]!	; 0xfe0

00011100 <setlocale@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #24, 20	; 0x18000
   11108:	ldr	pc, [ip, #4056]!	; 0xfd8

0001110c <strrchr@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #24, 20	; 0x18000
   11114:	ldr	pc, [ip, #4048]!	; 0xfd0

00011118 <nl_langinfo@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #24, 20	; 0x18000
   11120:	ldr	pc, [ip, #4040]!	; 0xfc8

00011124 <sprintf@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #24, 20	; 0x18000
   1112c:	ldr	pc, [ip, #4032]!	; 0xfc0

00011130 <freeaddrinfo@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #24, 20	; 0x18000
   11138:	ldr	pc, [ip, #4024]!	; 0xfb8

0001113c <getaddrinfo@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #24, 20	; 0x18000
   11144:	ldr	pc, [ip, #4016]!	; 0xfb0

00011148 <bindtextdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #24, 20	; 0x18000
   11150:	ldr	pc, [ip, #4008]!	; 0xfa8

00011154 <__xstat64@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #24, 20	; 0x18000
   1115c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011160 <strncmp@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #24, 20	; 0x18000
   11168:	ldr	pc, [ip, #3992]!	; 0xf98

0001116c <abort@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #24, 20	; 0x18000
   11174:	ldr	pc, [ip, #3984]!	; 0xf90

00011178 <getutxent@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #24, 20	; 0x18000
   11180:	ldr	pc, [ip, #3976]!	; 0xf88

00011184 <__assert_fail@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #24, 20	; 0x18000
   1118c:	ldr	pc, [ip, #3968]!	; 0xf80

Disassembly of section .text:

00011190 <.text>:
   11190:	mov	fp, #0
   11194:	mov	lr, #0
   11198:	pop	{r1}		; (ldr r1, [sp], #4)
   1119c:	mov	r2, sp
   111a0:	push	{r2}		; (str r2, [sp, #-4]!)
   111a4:	push	{r0}		; (str r0, [sp, #-4]!)
   111a8:	ldr	ip, [pc, #16]	; 111c0 <__assert_fail@plt+0x3c>
   111ac:	push	{ip}		; (str ip, [sp, #-4]!)
   111b0:	ldr	r0, [pc, #12]	; 111c4 <__assert_fail@plt+0x40>
   111b4:	ldr	r3, [pc, #12]	; 111c8 <__assert_fail@plt+0x44>
   111b8:	bl	10fec <__libc_start_main@plt>
   111bc:	bl	1116c <abort@plt>
   111c0:	andeq	r8, r1, ip, lsr #17
   111c4:	andeq	r2, r1, r4, asr #21
   111c8:	andeq	r8, r1, ip, asr #16
   111cc:	ldr	r3, [pc, #20]	; 111e8 <__assert_fail@plt+0x64>
   111d0:	ldr	r2, [pc, #20]	; 111ec <__assert_fail@plt+0x68>
   111d4:	add	r3, pc, r3
   111d8:	ldr	r2, [r3, r2]
   111dc:	cmp	r2, #0
   111e0:	bxeq	lr
   111e4:	b	1101c <__gmon_start__@plt>
   111e8:	andeq	r8, r1, r4, lsr #28
   111ec:	andeq	r0, r0, r0, lsl r1
   111f0:	ldr	r3, [pc, #28]	; 11214 <__assert_fail@plt+0x90>
   111f4:	ldr	r0, [pc, #28]	; 11218 <__assert_fail@plt+0x94>
   111f8:	sub	r3, r3, r0
   111fc:	cmp	r3, #6
   11200:	bxls	lr
   11204:	ldr	r3, [pc, #16]	; 1121c <__assert_fail@plt+0x98>
   11208:	cmp	r3, #0
   1120c:	bxeq	lr
   11210:	bx	r3
   11214:	andeq	sl, r2, pc, ror #2
   11218:	andeq	sl, r2, ip, ror #2
   1121c:	andeq	r0, r0, r0
   11220:	ldr	r1, [pc, #36]	; 1124c <__assert_fail@plt+0xc8>
   11224:	ldr	r0, [pc, #36]	; 11250 <__assert_fail@plt+0xcc>
   11228:	sub	r1, r1, r0
   1122c:	asr	r1, r1, #2
   11230:	add	r1, r1, r1, lsr #31
   11234:	asrs	r1, r1, #1
   11238:	bxeq	lr
   1123c:	ldr	r3, [pc, #16]	; 11254 <__assert_fail@plt+0xd0>
   11240:	cmp	r3, #0
   11244:	bxeq	lr
   11248:	bx	r3
   1124c:	andeq	sl, r2, ip, ror #2
   11250:	andeq	sl, r2, ip, ror #2
   11254:	andeq	r0, r0, r0
   11258:	push	{r4, lr}
   1125c:	ldr	r4, [pc, #24]	; 1127c <__assert_fail@plt+0xf8>
   11260:	ldrb	r3, [r4]
   11264:	cmp	r3, #0
   11268:	popne	{r4, pc}
   1126c:	bl	111f0 <__assert_fail@plt+0x6c>
   11270:	mov	r3, #1
   11274:	strb	r3, [r4]
   11278:	pop	{r4, pc}
   1127c:	andeq	sl, r2, r8, lsl #3
   11280:	ldr	r0, [pc, #40]	; 112b0 <__assert_fail@plt+0x12c>
   11284:	ldr	r3, [r0]
   11288:	cmp	r3, #0
   1128c:	bne	11294 <__assert_fail@plt+0x110>
   11290:	b	11220 <__assert_fail@plt+0x9c>
   11294:	ldr	r3, [pc, #24]	; 112b4 <__assert_fail@plt+0x130>
   11298:	cmp	r3, #0
   1129c:	beq	11290 <__assert_fail@plt+0x10c>
   112a0:	push	{r4, lr}
   112a4:	blx	r3
   112a8:	pop	{r4, lr}
   112ac:	b	11220 <__assert_fail@plt+0x9c>
   112b0:	andeq	r9, r2, r4, lsl pc
   112b4:	andeq	r0, r0, r0
   112b8:	push	{fp, lr}
   112bc:	add	fp, sp, #4
   112c0:	sub	sp, sp, #80	; 0x50
   112c4:	str	r0, [fp, #-80]	; 0xffffffb0
   112c8:	ldr	r3, [pc, #348]	; 1142c <__assert_fail@plt+0x2a8>
   112cc:	sub	ip, fp, #72	; 0x48
   112d0:	mov	lr, r3
   112d4:	ldm	lr!, {r0, r1, r2, r3}
   112d8:	stmia	ip!, {r0, r1, r2, r3}
   112dc:	ldm	lr!, {r0, r1, r2, r3}
   112e0:	stmia	ip!, {r0, r1, r2, r3}
   112e4:	ldm	lr!, {r0, r1, r2, r3}
   112e8:	stmia	ip!, {r0, r1, r2, r3}
   112ec:	ldm	lr, {r0, r1}
   112f0:	stm	ip, {r0, r1}
   112f4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   112f8:	str	r3, [fp, #-8]
   112fc:	sub	r3, fp, #72	; 0x48
   11300:	str	r3, [fp, #-12]
   11304:	b	11314 <__assert_fail@plt+0x190>
   11308:	ldr	r3, [fp, #-12]
   1130c:	add	r3, r3, #8
   11310:	str	r3, [fp, #-12]
   11314:	ldr	r3, [fp, #-12]
   11318:	ldr	r3, [r3]
   1131c:	cmp	r3, #0
   11320:	beq	11344 <__assert_fail@plt+0x1c0>
   11324:	ldr	r3, [fp, #-12]
   11328:	ldr	r3, [r3]
   1132c:	mov	r1, r3
   11330:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11334:	bl	10ea8 <strcmp@plt>
   11338:	mov	r3, r0
   1133c:	cmp	r3, #0
   11340:	bne	11308 <__assert_fail@plt+0x184>
   11344:	ldr	r3, [fp, #-12]
   11348:	ldr	r3, [r3, #4]
   1134c:	cmp	r3, #0
   11350:	beq	11360 <__assert_fail@plt+0x1dc>
   11354:	ldr	r3, [fp, #-12]
   11358:	ldr	r3, [r3, #4]
   1135c:	str	r3, [fp, #-8]
   11360:	ldr	r0, [pc, #200]	; 11430 <__assert_fail@plt+0x2ac>
   11364:	bl	11058 <gettext@plt>
   11368:	mov	r3, r0
   1136c:	ldr	r2, [pc, #192]	; 11434 <__assert_fail@plt+0x2b0>
   11370:	ldr	r1, [pc, #192]	; 11438 <__assert_fail@plt+0x2b4>
   11374:	mov	r0, r3
   11378:	bl	10eb4 <printf@plt>
   1137c:	mov	r1, #0
   11380:	mov	r0, #5
   11384:	bl	11100 <setlocale@plt>
   11388:	str	r0, [fp, #-16]
   1138c:	ldr	r3, [fp, #-16]
   11390:	cmp	r3, #0
   11394:	beq	113d4 <__assert_fail@plt+0x250>
   11398:	mov	r2, #3
   1139c:	ldr	r1, [pc, #152]	; 1143c <__assert_fail@plt+0x2b8>
   113a0:	ldr	r0, [fp, #-16]
   113a4:	bl	11160 <strncmp@plt>
   113a8:	mov	r3, r0
   113ac:	cmp	r3, #0
   113b0:	beq	113d4 <__assert_fail@plt+0x250>
   113b4:	ldr	r0, [pc, #132]	; 11440 <__assert_fail@plt+0x2bc>
   113b8:	bl	11058 <gettext@plt>
   113bc:	mov	r2, r0
   113c0:	ldr	r3, [pc, #124]	; 11444 <__assert_fail@plt+0x2c0>
   113c4:	ldr	r3, [r3]
   113c8:	mov	r1, r3
   113cc:	mov	r0, r2
   113d0:	bl	10e90 <fputs_unlocked@plt>
   113d4:	ldr	r0, [pc, #108]	; 11448 <__assert_fail@plt+0x2c4>
   113d8:	bl	11058 <gettext@plt>
   113dc:	mov	r3, r0
   113e0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   113e4:	ldr	r1, [pc, #72]	; 11434 <__assert_fail@plt+0x2b0>
   113e8:	mov	r0, r3
   113ec:	bl	10eb4 <printf@plt>
   113f0:	ldr	r0, [pc, #84]	; 1144c <__assert_fail@plt+0x2c8>
   113f4:	bl	11058 <gettext@plt>
   113f8:	ldr	r2, [fp, #-8]
   113fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11400:	cmp	r2, r3
   11404:	bne	11410 <__assert_fail@plt+0x28c>
   11408:	ldr	r3, [pc, #64]	; 11450 <__assert_fail@plt+0x2cc>
   1140c:	b	11414 <__assert_fail@plt+0x290>
   11410:	ldr	r3, [pc, #60]	; 11454 <__assert_fail@plt+0x2d0>
   11414:	mov	r2, r3
   11418:	ldr	r1, [fp, #-8]
   1141c:	bl	10eb4 <printf@plt>
   11420:	nop			; (mov r0, r0)
   11424:	sub	sp, fp, #4
   11428:	pop	{fp, pc}
   1142c:	andeq	r8, r1, r8, asr sl
   11430:	andeq	r8, r1, r4, ror #17
   11434:	strdeq	r8, [r1], -ip
   11438:	andeq	r8, r1, r4, lsr #18
   1143c:	andeq	r8, r1, r4, lsr r9
   11440:	andeq	r8, r1, r8, lsr r9
   11444:	andeq	sl, r2, r4, lsl #3
   11448:	andeq	r8, r1, r0, lsl #19
   1144c:	muleq	r1, ip, r9
   11450:	ldrdeq	r8, [r1], -r0
   11454:	ldrdeq	r8, [r1], -ip
   11458:	push	{fp, lr}
   1145c:	add	fp, sp, #4
   11460:	sub	sp, sp, #8
   11464:	str	r0, [fp, #-8]
   11468:	str	r1, [fp, #-12]
   1146c:	ldr	r3, [fp, #-8]
   11470:	mov	r0, r3
   11474:	asr	r1, r0, #31
   11478:	ldr	r2, [fp, #-12]
   1147c:	bl	138fc <__assert_fail@plt+0x2778>
   11480:	mov	r3, r0
   11484:	mov	r0, r3
   11488:	sub	sp, fp, #4
   1148c:	pop	{fp, pc}
   11490:	push	{fp}		; (str fp, [sp, #-4]!)
   11494:	add	fp, sp, #0
   11498:	sub	sp, sp, #28
   1149c:	str	r0, [fp, #-16]
   114a0:	str	r1, [fp, #-20]	; 0xffffffec
   114a4:	str	r2, [fp, #-24]	; 0xffffffe8
   114a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   114ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114b0:	add	r3, r2, r3
   114b4:	str	r3, [fp, #-8]
   114b8:	b	114dc <__assert_fail@plt+0x358>
   114bc:	ldr	r3, [fp, #-16]
   114c0:	add	r2, r3, #1
   114c4:	str	r2, [fp, #-16]
   114c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   114cc:	add	r1, r2, #1
   114d0:	str	r1, [fp, #-20]	; 0xffffffec
   114d4:	ldrb	r2, [r2]
   114d8:	strb	r2, [r3]
   114dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   114e0:	ldr	r3, [fp, #-8]
   114e4:	cmp	r2, r3
   114e8:	bcs	114fc <__assert_fail@plt+0x378>
   114ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   114f0:	ldrb	r3, [r3]
   114f4:	cmp	r3, #0
   114f8:	bne	114bc <__assert_fail@plt+0x338>
   114fc:	ldr	r3, [fp, #-16]
   11500:	mov	r2, #0
   11504:	strb	r2, [r3]
   11508:	ldr	r3, [fp, #-16]
   1150c:	mov	r0, r3
   11510:	add	sp, fp, #0
   11514:	pop	{fp}		; (ldr fp, [sp], #4)
   11518:	bx	lr
   1151c:	push	{fp, lr}
   11520:	add	fp, sp, #4
   11524:	sub	sp, sp, #16
   11528:	str	r0, [fp, #-16]
   1152c:	str	r1, [fp, #-20]	; 0xffffffec
   11530:	ldr	r3, [pc, #296]	; 11660 <__assert_fail@plt+0x4dc>
   11534:	ldr	r3, [r3]
   11538:	cmp	r3, #-2147483648	; 0x80000000
   1153c:	bne	11548 <__assert_fail@plt+0x3c4>
   11540:	ldr	r0, [pc, #280]	; 11660 <__assert_fail@plt+0x4dc>
   11544:	bl	10f14 <time@plt>
   11548:	ldr	r2, [fp, #-20]	; 0xffffffec
   1154c:	ldr	r3, [fp, #-16]
   11550:	cmp	r2, r3
   11554:	bge	11648 <__assert_fail@plt+0x4c4>
   11558:	ldr	r3, [pc, #256]	; 11660 <__assert_fail@plt+0x4dc>
   1155c:	ldr	r3, [r3]
   11560:	sub	r3, r3, #86016	; 0x15000
   11564:	sub	r3, r3, #384	; 0x180
   11568:	ldr	r2, [fp, #-16]
   1156c:	cmp	r3, r2
   11570:	bge	11648 <__assert_fail@plt+0x4c4>
   11574:	ldr	r3, [pc, #228]	; 11660 <__assert_fail@plt+0x4dc>
   11578:	ldr	r3, [r3]
   1157c:	ldr	r2, [fp, #-16]
   11580:	cmp	r2, r3
   11584:	bgt	11648 <__assert_fail@plt+0x4c4>
   11588:	ldr	r3, [pc, #208]	; 11660 <__assert_fail@plt+0x4dc>
   1158c:	ldr	r2, [r3]
   11590:	ldr	r3, [fp, #-16]
   11594:	sub	r3, r2, r3
   11598:	str	r3, [fp, #-8]
   1159c:	ldr	r3, [fp, #-8]
   115a0:	cmp	r3, #59	; 0x3b
   115a4:	bgt	115b0 <__assert_fail@plt+0x42c>
   115a8:	ldr	r3, [pc, #180]	; 11664 <__assert_fail@plt+0x4e0>
   115ac:	b	11654 <__assert_fail@plt+0x4d0>
   115b0:	ldr	r3, [fp, #-8]
   115b4:	ldr	r2, [pc, #172]	; 11668 <__assert_fail@plt+0x4e4>
   115b8:	cmp	r3, r2
   115bc:	ble	115d4 <__assert_fail@plt+0x450>
   115c0:	ldr	r3, [pc, #164]	; 1166c <__assert_fail@plt+0x4e8>
   115c4:	mov	r2, #205	; 0xcd
   115c8:	ldr	r1, [pc, #160]	; 11670 <__assert_fail@plt+0x4ec>
   115cc:	ldr	r0, [pc, #160]	; 11674 <__assert_fail@plt+0x4f0>
   115d0:	bl	11184 <__assert_fail@plt>
   115d4:	ldr	r3, [fp, #-8]
   115d8:	ldr	r2, [pc, #152]	; 11678 <__assert_fail@plt+0x4f4>
   115dc:	smull	r1, r2, r2, r3
   115e0:	add	r2, r2, r3
   115e4:	asr	r2, r2, #11
   115e8:	asr	r3, r3, #31
   115ec:	sub	r0, r2, r3
   115f0:	ldr	r2, [fp, #-8]
   115f4:	ldr	r3, [pc, #124]	; 11678 <__assert_fail@plt+0x4f4>
   115f8:	smull	r1, r3, r3, r2
   115fc:	add	r3, r3, r2
   11600:	asr	r1, r3, #11
   11604:	asr	r3, r2, #31
   11608:	sub	r3, r1, r3
   1160c:	mov	r1, #3600	; 0xe10
   11610:	mul	r3, r1, r3
   11614:	sub	r3, r2, r3
   11618:	ldr	r2, [pc, #92]	; 1167c <__assert_fail@plt+0x4f8>
   1161c:	smull	r1, r2, r2, r3
   11620:	add	r2, r2, r3
   11624:	asr	r2, r2, #5
   11628:	asr	r3, r3, #31
   1162c:	sub	r3, r2, r3
   11630:	mov	r2, r0
   11634:	ldr	r1, [pc, #68]	; 11680 <__assert_fail@plt+0x4fc>
   11638:	ldr	r0, [pc, #68]	; 11684 <__assert_fail@plt+0x500>
   1163c:	bl	11124 <sprintf@plt>
   11640:	ldr	r3, [pc, #60]	; 11684 <__assert_fail@plt+0x500>
   11644:	b	11654 <__assert_fail@plt+0x4d0>
   11648:	ldr	r0, [pc, #56]	; 11688 <__assert_fail@plt+0x504>
   1164c:	bl	11058 <gettext@plt>
   11650:	mov	r3, r0
   11654:	mov	r0, r3
   11658:	sub	sp, fp, #4
   1165c:	pop	{fp, pc}
   11660:	andeq	sl, r2, ip, lsl r1
   11664:	andeq	r8, r1, ip, lsr ip
   11668:	andeq	r5, r1, pc, ror r1
   1166c:	andeq	r9, r1, r8, lsl #6
   11670:	andeq	r8, r1, r4, asr #24
   11674:	andeq	r8, r1, r0, asr ip
   11678:			; <UNDEFINED> instruction: 0x91a2b3c5
   1167c:	stmhi	r8, {r0, r3, r7, fp, pc}
   11680:	andeq	r8, r1, r0, ror ip
   11684:	andeq	sl, r2, r4, lsr #3
   11688:	andeq	r8, r1, ip, ror ip
   1168c:	push	{fp, lr}
   11690:	add	fp, sp, #4
   11694:	sub	sp, sp, #16
   11698:	str	r0, [fp, #-16]
   1169c:	ldr	r3, [fp, #-16]
   116a0:	ldr	r3, [r3, #340]	; 0x154
   116a4:	str	r3, [fp, #-12]
   116a8:	sub	r3, fp, #12
   116ac:	mov	r0, r3
   116b0:	bl	11010 <localtime@plt>
   116b4:	str	r0, [fp, #-8]
   116b8:	ldr	r3, [fp, #-8]
   116bc:	cmp	r3, #0
   116c0:	beq	116e4 <__assert_fail@plt+0x560>
   116c4:	ldr	r3, [pc, #56]	; 11704 <__assert_fail@plt+0x580>
   116c8:	ldr	r2, [r3]
   116cc:	ldr	r3, [fp, #-8]
   116d0:	mov	r1, #33	; 0x21
   116d4:	ldr	r0, [pc, #44]	; 11708 <__assert_fail@plt+0x584>
   116d8:	bl	10ff8 <strftime@plt>
   116dc:	ldr	r3, [pc, #36]	; 11708 <__assert_fail@plt+0x584>
   116e0:	b	116f8 <__assert_fail@plt+0x574>
   116e4:	ldr	r3, [fp, #-12]
   116e8:	ldr	r1, [pc, #24]	; 11708 <__assert_fail@plt+0x584>
   116ec:	mov	r0, r3
   116f0:	bl	11458 <__assert_fail@plt+0x2d4>
   116f4:	mov	r3, r0
   116f8:	mov	r0, r3
   116fc:	sub	sp, fp, #4
   11700:	pop	{fp, pc}
   11704:	muleq	r2, ip, r1
   11708:	andeq	sl, r2, ip, lsr #3
   1170c:	push	{r4, fp, lr}
   11710:	add	fp, sp, #8
   11714:	sub	sp, sp, #100	; 0x64
   11718:	str	r0, [fp, #-56]	; 0xffffffc8
   1171c:	str	r1, [fp, #-60]	; 0xffffffc4
   11720:	str	r3, [fp, #-68]	; 0xffffffbc
   11724:	mov	r3, r2
   11728:	strb	r3, [fp, #-61]	; 0xffffffc3
   1172c:	ldr	r2, [pc, #588]	; 11980 <__assert_fail@plt+0x7fc>
   11730:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   11734:	strb	r3, [r2, #1]
   11738:	ldr	r3, [pc, #580]	; 11984 <__assert_fail@plt+0x800>
   1173c:	ldrb	r3, [r3]
   11740:	cmp	r3, #0
   11744:	beq	1178c <__assert_fail@plt+0x608>
   11748:	ldr	r3, [pc, #568]	; 11988 <__assert_fail@plt+0x804>
   1174c:	ldrb	r3, [r3]
   11750:	eor	r3, r3, #1
   11754:	uxtb	r3, r3
   11758:	cmp	r3, #0
   1175c:	beq	1178c <__assert_fail@plt+0x608>
   11760:	ldr	r0, [fp, #12]
   11764:	bl	11070 <strlen@plt>
   11768:	mov	r3, r0
   1176c:	cmp	r3, #6
   11770:	bhi	1178c <__assert_fail@plt+0x608>
   11774:	sub	r3, fp, #36	; 0x24
   11778:	ldr	r2, [fp, #12]
   1177c:	ldr	r1, [pc, #520]	; 1198c <__assert_fail@plt+0x808>
   11780:	mov	r0, r3
   11784:	bl	11124 <sprintf@plt>
   11788:	b	11794 <__assert_fail@plt+0x610>
   1178c:	mov	r3, #0
   11790:	strb	r3, [fp, #-36]	; 0xffffffdc
   11794:	ldr	r3, [pc, #492]	; 11988 <__assert_fail@plt+0x804>
   11798:	ldrb	r3, [r3]
   1179c:	eor	r3, r3, #1
   117a0:	uxtb	r3, r3
   117a4:	cmp	r3, #0
   117a8:	beq	117d8 <__assert_fail@plt+0x654>
   117ac:	ldr	r0, [fp, #16]
   117b0:	bl	11070 <strlen@plt>
   117b4:	mov	r3, r0
   117b8:	cmp	r3, #11
   117bc:	bhi	117d8 <__assert_fail@plt+0x654>
   117c0:	sub	r3, fp, #52	; 0x34
   117c4:	ldr	r2, [fp, #16]
   117c8:	ldr	r1, [pc, #448]	; 11990 <__assert_fail@plt+0x80c>
   117cc:	mov	r0, r3
   117d0:	bl	11124 <sprintf@plt>
   117d4:	b	117e0 <__assert_fail@plt+0x65c>
   117d8:	mov	r3, #0
   117dc:	strb	r3, [fp, #-52]	; 0xffffffcc
   117e0:	ldr	r3, [pc, #428]	; 11994 <__assert_fail@plt+0x810>
   117e4:	ldrb	r3, [r3]
   117e8:	cmp	r3, #0
   117ec:	beq	11820 <__assert_fail@plt+0x69c>
   117f0:	ldr	r0, [fp, #24]
   117f4:	bl	11070 <strlen@plt>
   117f8:	mov	r3, r0
   117fc:	cmp	r3, #11
   11800:	bls	11818 <__assert_fail@plt+0x694>
   11804:	ldr	r0, [fp, #24]
   11808:	bl	11070 <strlen@plt>
   1180c:	mov	r3, r0
   11810:	add	r3, r3, #2
   11814:	b	11824 <__assert_fail@plt+0x6a0>
   11818:	mov	r3, #14
   1181c:	b	11824 <__assert_fail@plt+0x6a0>
   11820:	mov	r3, #1
   11824:	mov	r0, r3
   11828:	bl	16d78 <__assert_fail@plt+0x5bf4>
   1182c:	mov	r3, r0
   11830:	str	r3, [fp, #-20]	; 0xffffffec
   11834:	ldr	r3, [pc, #344]	; 11994 <__assert_fail@plt+0x810>
   11838:	ldrb	r3, [r3]
   1183c:	cmp	r3, #0
   11840:	beq	11858 <__assert_fail@plt+0x6d4>
   11844:	ldr	r2, [fp, #24]
   11848:	ldr	r1, [pc, #328]	; 11998 <__assert_fail@plt+0x814>
   1184c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11850:	bl	11124 <sprintf@plt>
   11854:	b	11864 <__assert_fail@plt+0x6e0>
   11858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1185c:	mov	r2, #0
   11860:	strb	r2, [r3]
   11864:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11868:	cmp	r3, #0
   1186c:	beq	11878 <__assert_fail@plt+0x6f4>
   11870:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11874:	b	1187c <__assert_fail@plt+0x6f8>
   11878:	ldr	r0, [pc, #284]	; 1199c <__assert_fail@plt+0x818>
   1187c:	ldr	r3, [pc, #284]	; 119a0 <__assert_fail@plt+0x81c>
   11880:	ldrb	r3, [r3]
   11884:	cmp	r3, #0
   11888:	beq	11894 <__assert_fail@plt+0x710>
   1188c:	ldr	r3, [pc, #236]	; 11980 <__assert_fail@plt+0x7fc>
   11890:	b	11898 <__assert_fail@plt+0x714>
   11894:	ldr	r3, [pc, #264]	; 119a4 <__assert_fail@plt+0x820>
   11898:	ldr	r2, [pc, #264]	; 119a8 <__assert_fail@plt+0x824>
   1189c:	ldr	r2, [r2]
   118a0:	sub	ip, fp, #28
   118a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   118a8:	str	r1, [sp, #32]
   118ac:	ldr	r1, [fp, #20]
   118b0:	str	r1, [sp, #28]
   118b4:	sub	r1, fp, #52	; 0x34
   118b8:	str	r1, [sp, #24]
   118bc:	sub	r1, fp, #36	; 0x24
   118c0:	str	r1, [sp, #20]
   118c4:	ldr	r1, [fp, #8]
   118c8:	str	r1, [sp, #16]
   118cc:	str	r2, [sp, #12]
   118d0:	ldr	r2, [fp, #4]
   118d4:	str	r2, [sp, #8]
   118d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   118dc:	str	r2, [sp, #4]
   118e0:	str	r3, [sp]
   118e4:	mov	r3, r0
   118e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   118ec:	ldr	r1, [pc, #184]	; 119ac <__assert_fail@plt+0x828>
   118f0:	mov	r0, ip
   118f4:	bl	110d0 <asprintf@plt>
   118f8:	str	r0, [fp, #-24]	; 0xffffffe8
   118fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11900:	cmn	r3, #1
   11904:	bne	1190c <__assert_fail@plt+0x788>
   11908:	bl	17894 <__assert_fail@plt+0x6710>
   1190c:	ldr	r4, [fp, #-28]	; 0xffffffe4
   11910:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11914:	mov	r0, r3
   11918:	bl	11070 <strlen@plt>
   1191c:	mov	r3, r0
   11920:	add	r3, r4, r3
   11924:	str	r3, [fp, #-16]
   11928:	ldr	r3, [fp, #-16]
   1192c:	sub	r3, r3, #1
   11930:	str	r3, [fp, #-16]
   11934:	ldr	r3, [fp, #-16]
   11938:	ldrb	r3, [r3]
   1193c:	cmp	r3, #32
   11940:	beq	11928 <__assert_fail@plt+0x7a4>
   11944:	ldr	r3, [fp, #-16]
   11948:	add	r3, r3, #1
   1194c:	mov	r2, #0
   11950:	strb	r2, [r3]
   11954:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11958:	mov	r0, r3
   1195c:	bl	10fd4 <puts@plt>
   11960:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11964:	mov	r0, r3
   11968:	bl	137d4 <__assert_fail@plt+0x2650>
   1196c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11970:	bl	137d4 <__assert_fail@plt+0x2650>
   11974:	nop			; (mov r0, r0)
   11978:	sub	sp, fp, #8
   1197c:	pop	{r4, fp, pc}
   11980:	andeq	sl, r2, r0, lsr #2
   11984:	andeq	sl, r2, pc, lsl #3
   11988:	andeq	sl, r2, lr, lsl #3
   1198c:	andeq	r8, r1, r4, lsl #25
   11990:	andeq	r8, r1, ip, lsl #25
   11994:	muleq	r2, r2, r1
   11998:	muleq	r1, r4, ip
   1199c:	muleq	r1, ip, ip
   119a0:	muleq	r2, r1, r1
   119a4:	ldrdeq	r8, [r1], -ip
   119a8:	andeq	sl, r2, r0, lsr #3
   119ac:	andeq	r8, r1, r4, lsr #25
   119b0:	push	{fp}		; (str fp, [sp, #-4]!)
   119b4:	add	fp, sp, #0
   119b8:	sub	sp, sp, #12
   119bc:	str	r0, [fp, #-8]
   119c0:	ldr	r3, [fp, #-8]
   119c4:	ldr	r3, [r3, #16]
   119c8:	and	r3, r3, #16
   119cc:	cmp	r3, #0
   119d0:	movne	r3, #1
   119d4:	moveq	r3, #0
   119d8:	uxtb	r3, r3
   119dc:	mov	r0, r3
   119e0:	add	sp, fp, #0
   119e4:	pop	{fp}		; (ldr fp, [sp], #4)
   119e8:	bx	lr
   119ec:	push	{r4, r5, fp, lr}
   119f0:	add	fp, sp, #12
   119f4:	sub	sp, sp, #480	; 0x1e0
   119f8:	str	r0, [fp, #-464]	; 0xfffffe30
   119fc:	str	r1, [fp, #-468]	; 0xfffffe2c
   11a00:	sub	r3, fp, #188	; 0xbc
   11a04:	str	r3, [fp, #-24]	; 0xffffffe8
   11a08:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11a0c:	ldr	r2, [r3, #4]
   11a10:	sub	r3, fp, #200	; 0xc8
   11a14:	ldr	r1, [pc, #968]	; 11de4 <__assert_fail@plt+0xc60>
   11a18:	mov	r0, r3
   11a1c:	bl	11124 <sprintf@plt>
   11a20:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11a24:	ldrb	r3, [r3, #8]
   11a28:	cmp	r3, #47	; 0x2f
   11a2c:	beq	11a54 <__assert_fail@plt+0x8d0>
   11a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a34:	ldr	r2, [pc, #940]	; 11de8 <__assert_fail@plt+0xc64>
   11a38:	ldr	r0, [r2]
   11a3c:	str	r0, [r3]
   11a40:	ldrh	r2, [r2, #4]
   11a44:	strh	r2, [r3, #4]
   11a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a4c:	add	r3, r3, #5
   11a50:	str	r3, [fp, #-24]	; 0xffffffe8
   11a54:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11a58:	add	r3, r3, #8
   11a5c:	mov	r2, #32
   11a60:	mov	r1, r3
   11a64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a68:	bl	11490 <__assert_fail@plt+0x30c>
   11a6c:	sub	r2, fp, #140	; 0x8c
   11a70:	sub	r3, fp, #188	; 0xbc
   11a74:	mov	r1, r2
   11a78:	mov	r0, r3
   11a7c:	bl	188c8 <__assert_fail@plt+0x7744>
   11a80:	mov	r3, r0
   11a84:	cmp	r3, #0
   11a88:	bne	11ac0 <__assert_fail@plt+0x93c>
   11a8c:	sub	r3, fp, #140	; 0x8c
   11a90:	mov	r0, r3
   11a94:	bl	119b0 <__assert_fail@plt+0x82c>
   11a98:	mov	r3, r0
   11a9c:	cmp	r3, #0
   11aa0:	beq	11aac <__assert_fail@plt+0x928>
   11aa4:	mov	r3, #43	; 0x2b
   11aa8:	b	11ab0 <__assert_fail@plt+0x92c>
   11aac:	mov	r3, #45	; 0x2d
   11ab0:	strb	r3, [fp, #-17]	; 0xffffffef
   11ab4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11ab8:	str	r3, [fp, #-16]
   11abc:	b	11ad0 <__assert_fail@plt+0x94c>
   11ac0:	mov	r3, #63	; 0x3f
   11ac4:	strb	r3, [fp, #-17]	; 0xffffffef
   11ac8:	mov	r3, #0
   11acc:	str	r3, [fp, #-16]
   11ad0:	ldr	r3, [fp, #-16]
   11ad4:	cmp	r3, #0
   11ad8:	beq	11b00 <__assert_fail@plt+0x97c>
   11adc:	ldr	r1, [fp, #-468]	; 0xfffffe2c
   11ae0:	ldr	r0, [fp, #-16]
   11ae4:	bl	1151c <__assert_fail@plt+0x398>
   11ae8:	mov	r3, r0
   11aec:	sub	r0, fp, #148	; 0x94
   11af0:	mov	r2, #6
   11af4:	ldr	r1, [pc, #752]	; 11dec <__assert_fail@plt+0xc68>
   11af8:	bl	11124 <sprintf@plt>
   11afc:	b	11b0c <__assert_fail@plt+0x988>
   11b00:	sub	r3, fp, #148	; 0x94
   11b04:	ldr	r2, [pc, #740]	; 11df0 <__assert_fail@plt+0xc6c>
   11b08:	str	r2, [r3]
   11b0c:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11b10:	ldrb	r3, [r3, #76]	; 0x4c
   11b14:	cmp	r3, #0
   11b18:	beq	11d08 <__assert_fail@plt+0xb84>
   11b1c:	mov	r3, #0
   11b20:	str	r3, [fp, #-28]	; 0xffffffe4
   11b24:	mov	r3, #0
   11b28:	str	r3, [fp, #-32]	; 0xffffffe0
   11b2c:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11b30:	add	r1, r3, #76	; 0x4c
   11b34:	sub	r3, fp, #460	; 0x1cc
   11b38:	mov	r2, #256	; 0x100
   11b3c:	mov	r0, r3
   11b40:	bl	11490 <__assert_fail@plt+0x30c>
   11b44:	sub	r3, fp, #460	; 0x1cc
   11b48:	mov	r1, #58	; 0x3a
   11b4c:	mov	r0, r3
   11b50:	bl	1107c <strchr@plt>
   11b54:	str	r0, [fp, #-32]	; 0xffffffe0
   11b58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b5c:	cmp	r3, #0
   11b60:	beq	11b78 <__assert_fail@plt+0x9f4>
   11b64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b68:	add	r2, r3, #1
   11b6c:	str	r2, [fp, #-32]	; 0xffffffe0
   11b70:	mov	r2, #0
   11b74:	strb	r2, [r3]
   11b78:	ldrb	r3, [fp, #-460]	; 0xfffffe34
   11b7c:	cmp	r3, #0
   11b80:	beq	11ba8 <__assert_fail@plt+0xa24>
   11b84:	ldr	r3, [pc, #616]	; 11df4 <__assert_fail@plt+0xc70>
   11b88:	ldrb	r3, [r3]
   11b8c:	cmp	r3, #0
   11b90:	beq	11ba8 <__assert_fail@plt+0xa24>
   11b94:	sub	r3, fp, #460	; 0x1cc
   11b98:	mov	r0, r3
   11b9c:	bl	13500 <__assert_fail@plt+0x237c>
   11ba0:	mov	r3, r0
   11ba4:	str	r3, [fp, #-28]	; 0xffffffe4
   11ba8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11bac:	cmp	r3, #0
   11bb0:	bne	11bbc <__assert_fail@plt+0xa38>
   11bb4:	sub	r3, fp, #460	; 0x1cc
   11bb8:	str	r3, [fp, #-28]	; 0xffffffe4
   11bbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11bc0:	cmp	r3, #0
   11bc4:	beq	11c6c <__assert_fail@plt+0xae8>
   11bc8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11bcc:	bl	11070 <strlen@plt>
   11bd0:	mov	r4, r0
   11bd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11bd8:	bl	11070 <strlen@plt>
   11bdc:	mov	r3, r0
   11be0:	add	r3, r4, r3
   11be4:	add	r2, r3, #4
   11be8:	ldr	r3, [pc, #520]	; 11df8 <__assert_fail@plt+0xc74>
   11bec:	ldr	r3, [r3]
   11bf0:	cmp	r2, r3
   11bf4:	bls	11c50 <__assert_fail@plt+0xacc>
   11bf8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11bfc:	bl	11070 <strlen@plt>
   11c00:	mov	r4, r0
   11c04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11c08:	bl	11070 <strlen@plt>
   11c0c:	mov	r3, r0
   11c10:	add	r3, r4, r3
   11c14:	add	r3, r3, #4
   11c18:	ldr	r2, [pc, #472]	; 11df8 <__assert_fail@plt+0xc74>
   11c1c:	str	r3, [r2]
   11c20:	ldr	r3, [pc, #468]	; 11dfc <__assert_fail@plt+0xc78>
   11c24:	ldr	r3, [r3]
   11c28:	mov	r0, r3
   11c2c:	bl	137d4 <__assert_fail@plt+0x2650>
   11c30:	ldr	r3, [pc, #448]	; 11df8 <__assert_fail@plt+0xc74>
   11c34:	ldr	r3, [r3]
   11c38:	mov	r0, r3
   11c3c:	bl	16d78 <__assert_fail@plt+0x5bf4>
   11c40:	mov	r3, r0
   11c44:	mov	r2, r3
   11c48:	ldr	r3, [pc, #428]	; 11dfc <__assert_fail@plt+0xc78>
   11c4c:	str	r2, [r3]
   11c50:	ldr	r3, [pc, #420]	; 11dfc <__assert_fail@plt+0xc78>
   11c54:	ldr	r0, [r3]
   11c58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c5c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11c60:	ldr	r1, [pc, #408]	; 11e00 <__assert_fail@plt+0xc7c>
   11c64:	bl	11124 <sprintf@plt>
   11c68:	b	11cec <__assert_fail@plt+0xb68>
   11c6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c70:	bl	11070 <strlen@plt>
   11c74:	mov	r3, r0
   11c78:	add	r2, r3, #3
   11c7c:	ldr	r3, [pc, #372]	; 11df8 <__assert_fail@plt+0xc74>
   11c80:	ldr	r3, [r3]
   11c84:	cmp	r2, r3
   11c88:	bls	11cd4 <__assert_fail@plt+0xb50>
   11c8c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c90:	bl	11070 <strlen@plt>
   11c94:	mov	r3, r0
   11c98:	add	r3, r3, #3
   11c9c:	ldr	r2, [pc, #340]	; 11df8 <__assert_fail@plt+0xc74>
   11ca0:	str	r3, [r2]
   11ca4:	ldr	r3, [pc, #336]	; 11dfc <__assert_fail@plt+0xc78>
   11ca8:	ldr	r3, [r3]
   11cac:	mov	r0, r3
   11cb0:	bl	137d4 <__assert_fail@plt+0x2650>
   11cb4:	ldr	r3, [pc, #316]	; 11df8 <__assert_fail@plt+0xc74>
   11cb8:	ldr	r3, [r3]
   11cbc:	mov	r0, r3
   11cc0:	bl	16d78 <__assert_fail@plt+0x5bf4>
   11cc4:	mov	r3, r0
   11cc8:	mov	r2, r3
   11ccc:	ldr	r3, [pc, #296]	; 11dfc <__assert_fail@plt+0xc78>
   11cd0:	str	r2, [r3]
   11cd4:	ldr	r3, [pc, #288]	; 11dfc <__assert_fail@plt+0xc78>
   11cd8:	ldr	r3, [r3]
   11cdc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11ce0:	ldr	r1, [pc, #284]	; 11e04 <__assert_fail@plt+0xc80>
   11ce4:	mov	r0, r3
   11ce8:	bl	11124 <sprintf@plt>
   11cec:	sub	r3, fp, #460	; 0x1cc
   11cf0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11cf4:	cmp	r2, r3
   11cf8:	beq	11d64 <__assert_fail@plt+0xbe0>
   11cfc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11d00:	bl	137d4 <__assert_fail@plt+0x2650>
   11d04:	b	11d64 <__assert_fail@plt+0xbe0>
   11d08:	ldr	r3, [pc, #232]	; 11df8 <__assert_fail@plt+0xc74>
   11d0c:	ldr	r3, [r3]
   11d10:	cmp	r3, #0
   11d14:	bne	11d54 <__assert_fail@plt+0xbd0>
   11d18:	ldr	r3, [pc, #216]	; 11df8 <__assert_fail@plt+0xc74>
   11d1c:	mov	r2, #1
   11d20:	str	r2, [r3]
   11d24:	ldr	r3, [pc, #208]	; 11dfc <__assert_fail@plt+0xc78>
   11d28:	ldr	r3, [r3]
   11d2c:	mov	r0, r3
   11d30:	bl	137d4 <__assert_fail@plt+0x2650>
   11d34:	ldr	r3, [pc, #188]	; 11df8 <__assert_fail@plt+0xc74>
   11d38:	ldr	r3, [r3]
   11d3c:	mov	r0, r3
   11d40:	bl	16d78 <__assert_fail@plt+0x5bf4>
   11d44:	mov	r3, r0
   11d48:	mov	r2, r3
   11d4c:	ldr	r3, [pc, #168]	; 11dfc <__assert_fail@plt+0xc78>
   11d50:	str	r2, [r3]
   11d54:	ldr	r3, [pc, #160]	; 11dfc <__assert_fail@plt+0xc78>
   11d58:	ldr	r3, [r3]
   11d5c:	mov	r2, #0
   11d60:	strb	r2, [r3]
   11d64:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11d68:	add	r5, r3, #44	; 0x2c
   11d6c:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11d70:	add	r4, r3, #8
   11d74:	ldr	r0, [fp, #-464]	; 0xfffffe30
   11d78:	bl	1168c <__assert_fail@plt+0x508>
   11d7c:	ldr	r3, [pc, #120]	; 11dfc <__assert_fail@plt+0xc78>
   11d80:	ldr	r3, [r3]
   11d84:	cmp	r3, #0
   11d88:	beq	11d98 <__assert_fail@plt+0xc14>
   11d8c:	ldr	r3, [pc, #104]	; 11dfc <__assert_fail@plt+0xc78>
   11d90:	ldr	r3, [r3]
   11d94:	b	11d9c <__assert_fail@plt+0xc18>
   11d98:	ldr	r3, [pc, #104]	; 11e08 <__assert_fail@plt+0xc84>
   11d9c:	ldrb	r1, [fp, #-17]	; 0xffffffef
   11da0:	ldr	r2, [pc, #96]	; 11e08 <__assert_fail@plt+0xc84>
   11da4:	str	r2, [sp, #20]
   11da8:	str	r3, [sp, #16]
   11dac:	sub	r3, fp, #200	; 0xc8
   11db0:	str	r3, [sp, #12]
   11db4:	sub	r3, fp, #148	; 0x94
   11db8:	str	r3, [sp, #8]
   11dbc:	str	r0, [sp, #4]
   11dc0:	str	r4, [sp]
   11dc4:	mov	r3, #32
   11dc8:	mov	r2, r1
   11dcc:	mov	r1, r5
   11dd0:	mov	r0, #32
   11dd4:	bl	1170c <__assert_fail@plt+0x588>
   11dd8:	nop			; (mov r0, r0)
   11ddc:	sub	sp, fp, #12
   11de0:	pop	{r4, r5, fp, pc}
   11de4:	andeq	r8, r1, r8, asr #25
   11de8:	andeq	r8, r1, ip, asr #25
   11dec:	ldrdeq	r8, [r1], -r4
   11df0:	eorseq	r2, pc, r0, lsr #32
   11df4:	andeq	sl, r2, ip, lsl #3
   11df8:	ldrdeq	sl, [r2], -r0
   11dfc:	ldrdeq	sl, [r2], -r4
   11e00:	ldrdeq	r8, [r1], -ip
   11e04:	andeq	r8, r1, r4, ror #25
   11e08:	ldrdeq	r8, [r1], -ip
   11e0c:	push	{r4, fp, lr}
   11e10:	add	fp, sp, #8
   11e14:	sub	sp, sp, #36	; 0x24
   11e18:	str	r0, [fp, #-16]
   11e1c:	ldr	r0, [pc, #88]	; 11e7c <__assert_fail@plt+0xcf8>
   11e20:	bl	11058 <gettext@plt>
   11e24:	mov	r4, r0
   11e28:	ldr	r0, [fp, #-16]
   11e2c:	bl	1168c <__assert_fail@plt+0x508>
   11e30:	mov	r2, r0
   11e34:	ldr	r3, [pc, #68]	; 11e80 <__assert_fail@plt+0xcfc>
   11e38:	str	r3, [sp, #20]
   11e3c:	ldr	r3, [pc, #60]	; 11e80 <__assert_fail@plt+0xcfc>
   11e40:	str	r3, [sp, #16]
   11e44:	ldr	r3, [pc, #52]	; 11e80 <__assert_fail@plt+0xcfc>
   11e48:	str	r3, [sp, #12]
   11e4c:	ldr	r3, [pc, #44]	; 11e80 <__assert_fail@plt+0xcfc>
   11e50:	str	r3, [sp, #8]
   11e54:	str	r2, [sp, #4]
   11e58:	str	r4, [sp]
   11e5c:	mvn	r3, #0
   11e60:	mov	r2, #32
   11e64:	ldr	r1, [pc, #20]	; 11e80 <__assert_fail@plt+0xcfc>
   11e68:	mvn	r0, #0
   11e6c:	bl	1170c <__assert_fail@plt+0x588>
   11e70:	nop			; (mov r0, r0)
   11e74:	sub	sp, fp, #8
   11e78:	pop	{r4, fp, pc}
   11e7c:	andeq	r8, r1, ip, ror #25
   11e80:	ldrdeq	r8, [r1], -ip
   11e84:	push	{fp, lr}
   11e88:	add	fp, sp, #4
   11e8c:	sub	sp, sp, #24
   11e90:	str	r0, [fp, #-24]	; 0xffffffe8
   11e94:	mov	r3, #4
   11e98:	str	r3, [fp, #-8]
   11e9c:	ldr	r0, [pc, #112]	; 11f14 <__assert_fail@plt+0xd90>
   11ea0:	bl	11058 <gettext@plt>
   11ea4:	mov	r3, r0
   11ea8:	mov	r0, r3
   11eac:	bl	11070 <strlen@plt>
   11eb0:	mov	r2, r0
   11eb4:	ldr	r3, [fp, #-8]
   11eb8:	add	r3, r2, r3
   11ebc:	add	r3, r3, #1
   11ec0:	mov	r0, r3
   11ec4:	bl	16d78 <__assert_fail@plt+0x5bf4>
   11ec8:	mov	r3, r0
   11ecc:	str	r3, [fp, #-12]
   11ed0:	ldr	r0, [pc, #60]	; 11f14 <__assert_fail@plt+0xd90>
   11ed4:	bl	11058 <gettext@plt>
   11ed8:	mov	r3, r0
   11edc:	mov	r1, r3
   11ee0:	ldr	r0, [fp, #-12]
   11ee4:	bl	10f2c <stpcpy@plt>
   11ee8:	str	r0, [fp, #-16]
   11eec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ef0:	add	r3, r3, #40	; 0x28
   11ef4:	ldr	r2, [fp, #-8]
   11ef8:	mov	r1, r3
   11efc:	ldr	r0, [fp, #-16]
   11f00:	bl	11490 <__assert_fail@plt+0x30c>
   11f04:	ldr	r3, [fp, #-12]
   11f08:	mov	r0, r3
   11f0c:	sub	sp, fp, #4
   11f10:	pop	{fp, pc}
   11f14:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11f18:	push	{r4, r5, r6, fp, lr}
   11f1c:	add	fp, sp, #16
   11f20:	sub	sp, sp, #52	; 0x34
   11f24:	str	r0, [fp, #-40]	; 0xffffffd8
   11f28:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11f2c:	bl	11e84 <__assert_fail@plt+0xd00>
   11f30:	str	r0, [fp, #-24]	; 0xffffffe8
   11f34:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11f38:	ldr	r2, [r3, #4]
   11f3c:	sub	r3, fp, #36	; 0x24
   11f40:	ldr	r1, [pc, #296]	; 12070 <__assert_fail@plt+0xeec>
   11f44:	mov	r0, r3
   11f48:	bl	11124 <sprintf@plt>
   11f4c:	ldr	r3, [pc, #288]	; 12074 <__assert_fail@plt+0xef0>
   11f50:	ldr	r3, [r3]
   11f54:	cmp	r3, #0
   11f58:	bne	11fac <__assert_fail@plt+0xe28>
   11f5c:	ldr	r0, [pc, #276]	; 12078 <__assert_fail@plt+0xef4>
   11f60:	bl	11058 <gettext@plt>
   11f64:	mov	r3, r0
   11f68:	mov	r0, r3
   11f6c:	bl	11070 <strlen@plt>
   11f70:	mov	r4, r0
   11f74:	ldr	r0, [pc, #256]	; 1207c <__assert_fail@plt+0xef8>
   11f78:	bl	11058 <gettext@plt>
   11f7c:	mov	r3, r0
   11f80:	mov	r0, r3
   11f84:	bl	11070 <strlen@plt>
   11f88:	mov	r3, r0
   11f8c:	add	r3, r4, r3
   11f90:	add	r3, r3, #14
   11f94:	mov	r0, r3
   11f98:	bl	16d78 <__assert_fail@plt+0x5bf4>
   11f9c:	mov	r3, r0
   11fa0:	mov	r2, r3
   11fa4:	ldr	r3, [pc, #200]	; 12074 <__assert_fail@plt+0xef0>
   11fa8:	str	r2, [r3]
   11fac:	ldr	r3, [pc, #192]	; 12074 <__assert_fail@plt+0xef0>
   11fb0:	ldr	r4, [r3]
   11fb4:	ldr	r0, [pc, #188]	; 12078 <__assert_fail@plt+0xef4>
   11fb8:	bl	11058 <gettext@plt>
   11fbc:	mov	r5, r0
   11fc0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11fc4:	add	r3, r3, #332	; 0x14c
   11fc8:	ldrsh	r3, [r3]
   11fcc:	mov	r6, r3
   11fd0:	ldr	r0, [pc, #164]	; 1207c <__assert_fail@plt+0xef8>
   11fd4:	bl	11058 <gettext@plt>
   11fd8:	mov	r2, r0
   11fdc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11fe0:	add	r3, r3, #332	; 0x14c
   11fe4:	add	r3, r3, #2
   11fe8:	ldrsh	r3, [r3]
   11fec:	str	r3, [sp, #4]
   11ff0:	str	r2, [sp]
   11ff4:	mov	r3, r6
   11ff8:	mov	r2, r5
   11ffc:	ldr	r1, [pc, #124]	; 12080 <__assert_fail@plt+0xefc>
   12000:	mov	r0, r4
   12004:	bl	11124 <sprintf@plt>
   12008:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1200c:	add	r4, r3, #8
   12010:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12014:	bl	1168c <__assert_fail@plt+0x508>
   12018:	mov	r2, r0
   1201c:	ldr	r3, [pc, #80]	; 12074 <__assert_fail@plt+0xef0>
   12020:	ldr	r3, [r3]
   12024:	str	r3, [sp, #20]
   12028:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1202c:	str	r3, [sp, #16]
   12030:	sub	r3, fp, #36	; 0x24
   12034:	str	r3, [sp, #12]
   12038:	ldr	r3, [pc, #68]	; 12084 <__assert_fail@plt+0xf00>
   1203c:	str	r3, [sp, #8]
   12040:	str	r2, [sp, #4]
   12044:	str	r4, [sp]
   12048:	mov	r3, #32
   1204c:	mov	r2, #32
   12050:	ldr	r1, [pc, #44]	; 12084 <__assert_fail@plt+0xf00>
   12054:	mvn	r0, #0
   12058:	bl	1170c <__assert_fail@plt+0x588>
   1205c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12060:	bl	137d4 <__assert_fail@plt+0x2650>
   12064:	nop			; (mov r0, r0)
   12068:	sub	sp, fp, #16
   1206c:	pop	{r4, r5, r6, fp, pc}
   12070:	andeq	r8, r1, r8, asr #25
   12074:	ldrdeq	sl, [r2], -r8
   12078:	strdeq	r8, [r1], -ip
   1207c:	andeq	r8, r1, r4, lsl #26
   12080:	andeq	r8, r1, ip, lsl #26
   12084:	ldrdeq	r8, [r1], -ip
   12088:	push	{r4, r5, fp, lr}
   1208c:	add	fp, sp, #12
   12090:	sub	sp, sp, #48	; 0x30
   12094:	str	r0, [fp, #-32]	; 0xffffffe0
   12098:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1209c:	bl	11e84 <__assert_fail@plt+0xd00>
   120a0:	str	r0, [fp, #-16]
   120a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   120a8:	ldr	r2, [r3, #4]
   120ac:	sub	r3, fp, #28
   120b0:	ldr	r1, [pc, #116]	; 1212c <__assert_fail@plt+0xfa8>
   120b4:	mov	r0, r3
   120b8:	bl	11124 <sprintf@plt>
   120bc:	ldr	r0, [pc, #108]	; 12130 <__assert_fail@plt+0xfac>
   120c0:	bl	11058 <gettext@plt>
   120c4:	mov	r5, r0
   120c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   120cc:	add	r4, r3, #8
   120d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   120d4:	bl	1168c <__assert_fail@plt+0x508>
   120d8:	mov	r2, r0
   120dc:	ldr	r3, [pc, #80]	; 12134 <__assert_fail@plt+0xfb0>
   120e0:	str	r3, [sp, #20]
   120e4:	ldr	r3, [fp, #-16]
   120e8:	str	r3, [sp, #16]
   120ec:	sub	r3, fp, #28
   120f0:	str	r3, [sp, #12]
   120f4:	ldr	r3, [pc, #56]	; 12134 <__assert_fail@plt+0xfb0>
   120f8:	str	r3, [sp, #8]
   120fc:	str	r2, [sp, #4]
   12100:	str	r4, [sp]
   12104:	mov	r3, #32
   12108:	mov	r2, #32
   1210c:	mov	r1, r5
   12110:	mvn	r0, #0
   12114:	bl	1170c <__assert_fail@plt+0x588>
   12118:	ldr	r0, [fp, #-16]
   1211c:	bl	137d4 <__assert_fail@plt+0x2650>
   12120:	nop			; (mov r0, r0)
   12124:	sub	sp, fp, #12
   12128:	pop	{r4, r5, fp, pc}
   1212c:	andeq	r8, r1, r8, asr #25
   12130:	andeq	r8, r1, r8, lsl sp
   12134:	ldrdeq	r8, [r1], -ip
   12138:	push	{r4, fp, lr}
   1213c:	add	fp, sp, #8
   12140:	sub	sp, sp, #52	; 0x34
   12144:	str	r0, [fp, #-32]	; 0xffffffe0
   12148:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1214c:	bl	11e84 <__assert_fail@plt+0xd00>
   12150:	str	r0, [fp, #-16]
   12154:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12158:	ldr	r2, [r3, #4]
   1215c:	sub	r3, fp, #28
   12160:	ldr	r1, [pc, #104]	; 121d0 <__assert_fail@plt+0x104c>
   12164:	mov	r0, r3
   12168:	bl	11124 <sprintf@plt>
   1216c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12170:	add	r4, r3, #8
   12174:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12178:	bl	1168c <__assert_fail@plt+0x508>
   1217c:	mov	r2, r0
   12180:	ldr	r3, [pc, #76]	; 121d4 <__assert_fail@plt+0x1050>
   12184:	str	r3, [sp, #20]
   12188:	ldr	r3, [fp, #-16]
   1218c:	str	r3, [sp, #16]
   12190:	sub	r3, fp, #28
   12194:	str	r3, [sp, #12]
   12198:	ldr	r3, [pc, #52]	; 121d4 <__assert_fail@plt+0x1050>
   1219c:	str	r3, [sp, #8]
   121a0:	str	r2, [sp, #4]
   121a4:	str	r4, [sp]
   121a8:	mov	r3, #32
   121ac:	mov	r2, #32
   121b0:	ldr	r1, [pc, #28]	; 121d4 <__assert_fail@plt+0x1050>
   121b4:	mvn	r0, #0
   121b8:	bl	1170c <__assert_fail@plt+0x588>
   121bc:	ldr	r0, [fp, #-16]
   121c0:	bl	137d4 <__assert_fail@plt+0x2650>
   121c4:	nop			; (mov r0, r0)
   121c8:	sub	sp, fp, #8
   121cc:	pop	{r4, fp, pc}
   121d0:	andeq	r8, r1, r8, asr #25
   121d4:	ldrdeq	r8, [r1], -ip
   121d8:	push	{r4, fp, lr}
   121dc:	add	fp, sp, #8
   121e0:	sub	sp, sp, #36	; 0x24
   121e4:	str	r0, [fp, #-16]
   121e8:	ldr	r0, [pc, #88]	; 12248 <__assert_fail@plt+0x10c4>
   121ec:	bl	11058 <gettext@plt>
   121f0:	mov	r4, r0
   121f4:	ldr	r0, [fp, #-16]
   121f8:	bl	1168c <__assert_fail@plt+0x508>
   121fc:	mov	r2, r0
   12200:	ldr	r3, [pc, #68]	; 1224c <__assert_fail@plt+0x10c8>
   12204:	str	r3, [sp, #20]
   12208:	ldr	r3, [pc, #60]	; 1224c <__assert_fail@plt+0x10c8>
   1220c:	str	r3, [sp, #16]
   12210:	ldr	r3, [pc, #52]	; 1224c <__assert_fail@plt+0x10c8>
   12214:	str	r3, [sp, #12]
   12218:	ldr	r3, [pc, #44]	; 1224c <__assert_fail@plt+0x10c8>
   1221c:	str	r3, [sp, #8]
   12220:	str	r2, [sp, #4]
   12224:	str	r4, [sp]
   12228:	mvn	r3, #0
   1222c:	mov	r2, #32
   12230:	ldr	r1, [pc, #20]	; 1224c <__assert_fail@plt+0x10c8>
   12234:	mvn	r0, #0
   12238:	bl	1170c <__assert_fail@plt+0x588>
   1223c:	nop			; (mov r0, r0)
   12240:	sub	sp, fp, #8
   12244:	pop	{r4, fp, pc}
   12248:	andeq	r8, r1, r0, lsr #26
   1224c:	ldrdeq	r8, [r1], -ip
   12250:	push	{r4, r5, fp, lr}
   12254:	add	fp, sp, #12
   12258:	sub	sp, sp, #40	; 0x28
   1225c:	str	r0, [fp, #-24]	; 0xffffffe8
   12260:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12264:	ldr	r3, [r3, #4]
   12268:	add	r2, r3, #255	; 0xff
   1226c:	cmp	r3, #0
   12270:	movlt	r3, r2
   12274:	movge	r3, r3
   12278:	asr	r3, r3, #8
   1227c:	strb	r3, [fp, #-13]
   12280:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12284:	ldr	r2, [r3, #4]
   12288:	asr	r3, r2, #31
   1228c:	lsr	r3, r3, #24
   12290:	add	r2, r2, r3
   12294:	uxtb	r2, r2
   12298:	sub	r3, r2, r3
   1229c:	strb	r3, [fp, #-14]
   122a0:	ldr	r3, [pc, #348]	; 12404 <__assert_fail@plt+0x1280>
   122a4:	ldr	r3, [r3]
   122a8:	cmp	r3, #0
   122ac:	bne	122e4 <__assert_fail@plt+0x1160>
   122b0:	ldr	r0, [pc, #336]	; 12408 <__assert_fail@plt+0x1284>
   122b4:	bl	11058 <gettext@plt>
   122b8:	mov	r3, r0
   122bc:	mov	r0, r3
   122c0:	bl	11070 <strlen@plt>
   122c4:	mov	r3, r0
   122c8:	add	r3, r3, #3
   122cc:	mov	r0, r3
   122d0:	bl	16d78 <__assert_fail@plt+0x5bf4>
   122d4:	mov	r3, r0
   122d8:	mov	r2, r3
   122dc:	ldr	r3, [pc, #288]	; 12404 <__assert_fail@plt+0x1280>
   122e0:	str	r2, [r3]
   122e4:	ldr	r3, [pc, #280]	; 12404 <__assert_fail@plt+0x1280>
   122e8:	ldr	r4, [r3]
   122ec:	ldr	r0, [pc, #276]	; 12408 <__assert_fail@plt+0x1284>
   122f0:	bl	11058 <gettext@plt>
   122f4:	mov	r2, r0
   122f8:	ldrb	r3, [fp, #-14]
   122fc:	ldr	r1, [pc, #264]	; 1240c <__assert_fail@plt+0x1288>
   12300:	mov	r0, r4
   12304:	bl	11124 <sprintf@plt>
   12308:	ldr	r3, [pc, #256]	; 12410 <__assert_fail@plt+0x128c>
   1230c:	ldr	r3, [r3]
   12310:	cmp	r3, #0
   12314:	bne	1234c <__assert_fail@plt+0x11c8>
   12318:	ldr	r0, [pc, #244]	; 12414 <__assert_fail@plt+0x1290>
   1231c:	bl	11058 <gettext@plt>
   12320:	mov	r3, r0
   12324:	mov	r0, r3
   12328:	bl	11070 <strlen@plt>
   1232c:	mov	r3, r0
   12330:	add	r3, r3, #2
   12334:	mov	r0, r3
   12338:	bl	16d78 <__assert_fail@plt+0x5bf4>
   1233c:	mov	r3, r0
   12340:	mov	r2, r3
   12344:	ldr	r3, [pc, #196]	; 12410 <__assert_fail@plt+0x128c>
   12348:	str	r2, [r3]
   1234c:	ldr	r3, [pc, #188]	; 12410 <__assert_fail@plt+0x128c>
   12350:	ldr	r4, [r3]
   12354:	ldr	r0, [pc, #184]	; 12414 <__assert_fail@plt+0x1290>
   12358:	bl	11058 <gettext@plt>
   1235c:	mov	r2, r0
   12360:	ldrb	r3, [fp, #-13]
   12364:	cmp	r3, #78	; 0x4e
   12368:	beq	12374 <__assert_fail@plt+0x11f0>
   1236c:	ldrb	r3, [fp, #-13]
   12370:	b	12378 <__assert_fail@plt+0x11f4>
   12374:	mov	r3, #83	; 0x53
   12378:	ldr	r1, [pc, #152]	; 12418 <__assert_fail@plt+0x1294>
   1237c:	mov	r0, r4
   12380:	bl	11124 <sprintf@plt>
   12384:	ldr	r3, [pc, #120]	; 12404 <__assert_fail@plt+0x1280>
   12388:	ldr	r4, [r3]
   1238c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12390:	bl	1168c <__assert_fail@plt+0x508>
   12394:	mov	r5, r0
   12398:	ldrb	r3, [fp, #-13]
   1239c:	mov	r0, r3
   123a0:	bl	13238 <__assert_fail@plt+0x20b4>
   123a4:	mov	r3, r0
   123a8:	cmp	r3, #0
   123ac:	beq	123bc <__assert_fail@plt+0x1238>
   123b0:	ldr	r3, [pc, #88]	; 12410 <__assert_fail@plt+0x128c>
   123b4:	ldr	r3, [r3]
   123b8:	b	123c0 <__assert_fail@plt+0x123c>
   123bc:	ldr	r3, [pc, #88]	; 1241c <__assert_fail@plt+0x1298>
   123c0:	ldr	r2, [pc, #84]	; 1241c <__assert_fail@plt+0x1298>
   123c4:	str	r2, [sp, #20]
   123c8:	str	r3, [sp, #16]
   123cc:	ldr	r3, [pc, #72]	; 1241c <__assert_fail@plt+0x1298>
   123d0:	str	r3, [sp, #12]
   123d4:	ldr	r3, [pc, #64]	; 1241c <__assert_fail@plt+0x1298>
   123d8:	str	r3, [sp, #8]
   123dc:	str	r5, [sp, #4]
   123e0:	str	r4, [sp]
   123e4:	mvn	r3, #0
   123e8:	mov	r2, #32
   123ec:	ldr	r1, [pc, #40]	; 1241c <__assert_fail@plt+0x1298>
   123f0:	mvn	r0, #0
   123f4:	bl	1170c <__assert_fail@plt+0x588>
   123f8:	nop			; (mov r0, r0)
   123fc:	sub	sp, fp, #12
   12400:	pop	{r4, r5, fp, pc}
   12404:	ldrdeq	sl, [r2], -ip
   12408:	andeq	r8, r1, r0, lsr sp
   1240c:	andeq	r8, r1, ip, lsr sp
   12410:	andeq	sl, r2, r0, ror #3
   12414:	andeq	r8, r1, r4, asr #26
   12418:	andeq	r8, r1, ip, asr #26
   1241c:	ldrdeq	r8, [r1], -ip
   12420:	push	{fp, lr}
   12424:	add	fp, sp, #4
   12428:	sub	sp, sp, #24
   1242c:	str	r0, [fp, #-24]	; 0xffffffe8
   12430:	str	r1, [fp, #-28]	; 0xffffffe4
   12434:	mov	r3, #0
   12438:	str	r3, [fp, #-8]
   1243c:	ldr	r3, [pc, #164]	; 124e8 <__assert_fail@plt+0x1364>
   12440:	str	r3, [fp, #-12]
   12444:	b	124b0 <__assert_fail@plt+0x132c>
   12448:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1244c:	ldrb	r3, [r3, #44]	; 0x2c
   12450:	cmp	r3, #0
   12454:	beq	124a4 <__assert_fail@plt+0x1320>
   12458:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1245c:	ldrsh	r3, [r3]
   12460:	cmp	r3, #7
   12464:	bne	124a4 <__assert_fail@plt+0x1320>
   12468:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1246c:	bl	16170 <__assert_fail@plt+0x4fec>
   12470:	mov	r3, r0
   12474:	str	r3, [fp, #-16]
   12478:	ldr	r2, [fp, #-16]
   1247c:	ldr	r1, [fp, #-12]
   12480:	ldr	r0, [pc, #100]	; 124ec <__assert_fail@plt+0x1368>
   12484:	bl	10eb4 <printf@plt>
   12488:	ldr	r0, [fp, #-16]
   1248c:	bl	137d4 <__assert_fail@plt+0x2650>
   12490:	ldr	r3, [pc, #88]	; 124f0 <__assert_fail@plt+0x136c>
   12494:	str	r3, [fp, #-12]
   12498:	ldr	r3, [fp, #-8]
   1249c:	add	r3, r3, #1
   124a0:	str	r3, [fp, #-8]
   124a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   124a8:	add	r3, r3, #384	; 0x180
   124ac:	str	r3, [fp, #-28]	; 0xffffffe4
   124b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124b4:	sub	r2, r3, #1
   124b8:	str	r2, [fp, #-24]	; 0xffffffe8
   124bc:	cmp	r3, #0
   124c0:	bne	12448 <__assert_fail@plt+0x12c4>
   124c4:	ldr	r0, [pc, #40]	; 124f4 <__assert_fail@plt+0x1370>
   124c8:	bl	11058 <gettext@plt>
   124cc:	mov	r3, r0
   124d0:	ldr	r1, [fp, #-8]
   124d4:	mov	r0, r3
   124d8:	bl	10eb4 <printf@plt>
   124dc:	nop			; (mov r0, r0)
   124e0:	sub	sp, fp, #4
   124e4:	pop	{fp, pc}
   124e8:	ldrdeq	r8, [r1], -ip
   124ec:	andeq	r8, r1, r4, asr sp
   124f0:	andeq	r8, r1, ip, asr sp
   124f4:	andeq	r8, r1, r0, ror #26
   124f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   124fc:	add	fp, sp, #28
   12500:	sub	sp, sp, #24
   12504:	ldr	r0, [pc, #132]	; 12590 <__assert_fail@plt+0x140c>
   12508:	bl	11058 <gettext@plt>
   1250c:	mov	r9, r0
   12510:	ldr	r0, [pc, #124]	; 12594 <__assert_fail@plt+0x1410>
   12514:	bl	11058 <gettext@plt>
   12518:	mov	r4, r0
   1251c:	ldr	r0, [pc, #116]	; 12598 <__assert_fail@plt+0x1414>
   12520:	bl	11058 <gettext@plt>
   12524:	mov	r5, r0
   12528:	ldr	r0, [pc, #108]	; 1259c <__assert_fail@plt+0x1418>
   1252c:	bl	11058 <gettext@plt>
   12530:	mov	r6, r0
   12534:	ldr	r0, [pc, #100]	; 125a0 <__assert_fail@plt+0x141c>
   12538:	bl	11058 <gettext@plt>
   1253c:	mov	r7, r0
   12540:	ldr	r0, [pc, #92]	; 125a4 <__assert_fail@plt+0x1420>
   12544:	bl	11058 <gettext@plt>
   12548:	mov	r8, r0
   1254c:	ldr	r0, [pc, #84]	; 125a8 <__assert_fail@plt+0x1424>
   12550:	bl	11058 <gettext@plt>
   12554:	mov	r3, r0
   12558:	str	r3, [sp, #20]
   1255c:	str	r8, [sp, #16]
   12560:	str	r7, [sp, #12]
   12564:	str	r6, [sp, #8]
   12568:	str	r5, [sp, #4]
   1256c:	str	r4, [sp]
   12570:	mvn	r3, #0
   12574:	mov	r2, #32
   12578:	mov	r1, r9
   1257c:	mvn	r0, #0
   12580:	bl	1170c <__assert_fail@plt+0x588>
   12584:	nop			; (mov r0, r0)
   12588:	sub	sp, fp, #28
   1258c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12590:	andeq	r8, r1, r0, ror sp
   12594:	andeq	r8, r1, r8, ror sp
   12598:	andeq	r8, r1, r0, lsl #27
   1259c:	andeq	r8, r1, r8, lsl #27
   125a0:	muleq	r1, r0, sp
   125a4:	muleq	r1, r4, sp
   125a8:	muleq	r1, ip, sp
   125ac:	push	{fp, lr}
   125b0:	add	fp, sp, #4
   125b4:	sub	sp, sp, #16
   125b8:	str	r0, [fp, #-16]
   125bc:	str	r1, [fp, #-20]	; 0xffffffec
   125c0:	mov	r3, #0
   125c4:	str	r3, [fp, #-8]
   125c8:	mov	r3, #-2147483648	; 0x80000000
   125cc:	str	r3, [fp, #-12]
   125d0:	ldr	r3, [pc, #556]	; 12804 <__assert_fail@plt+0x1680>
   125d4:	ldrb	r3, [r3]
   125d8:	cmp	r3, #0
   125dc:	beq	125e4 <__assert_fail@plt+0x1460>
   125e0:	bl	124f8 <__assert_fail@plt+0x1374>
   125e4:	ldr	r3, [pc, #540]	; 12808 <__assert_fail@plt+0x1684>
   125e8:	ldrb	r3, [r3]
   125ec:	cmp	r3, #0
   125f0:	beq	127e0 <__assert_fail@plt+0x165c>
   125f4:	mov	r0, #0
   125f8:	bl	11064 <ttyname@plt>
   125fc:	str	r0, [fp, #-8]
   12600:	ldr	r3, [fp, #-8]
   12604:	cmp	r3, #0
   12608:	beq	127f8 <__assert_fail@plt+0x1674>
   1260c:	mov	r2, #5
   12610:	ldr	r1, [pc, #500]	; 1280c <__assert_fail@plt+0x1688>
   12614:	ldr	r0, [fp, #-8]
   12618:	bl	11160 <strncmp@plt>
   1261c:	mov	r3, r0
   12620:	cmp	r3, #0
   12624:	bne	127e0 <__assert_fail@plt+0x165c>
   12628:	ldr	r3, [fp, #-8]
   1262c:	add	r3, r3, #5
   12630:	str	r3, [fp, #-8]
   12634:	b	127e0 <__assert_fail@plt+0x165c>
   12638:	ldr	r3, [pc, #456]	; 12808 <__assert_fail@plt+0x1684>
   1263c:	ldrb	r3, [r3]
   12640:	eor	r3, r3, #1
   12644:	uxtb	r3, r3
   12648:	cmp	r3, #0
   1264c:	bne	12674 <__assert_fail@plt+0x14f0>
   12650:	ldr	r3, [fp, #-20]	; 0xffffffec
   12654:	add	r3, r3, #8
   12658:	mov	r2, #32
   1265c:	mov	r1, r3
   12660:	ldr	r0, [fp, #-8]
   12664:	bl	11160 <strncmp@plt>
   12668:	mov	r3, r0
   1266c:	cmp	r3, #0
   12670:	bne	127b8 <__assert_fail@plt+0x1634>
   12674:	ldr	r3, [pc, #404]	; 12810 <__assert_fail@plt+0x168c>
   12678:	ldrb	r3, [r3]
   1267c:	cmp	r3, #0
   12680:	beq	126b4 <__assert_fail@plt+0x1530>
   12684:	ldr	r3, [fp, #-20]	; 0xffffffec
   12688:	ldrb	r3, [r3, #44]	; 0x2c
   1268c:	cmp	r3, #0
   12690:	beq	126b4 <__assert_fail@plt+0x1530>
   12694:	ldr	r3, [fp, #-20]	; 0xffffffec
   12698:	ldrsh	r3, [r3]
   1269c:	cmp	r3, #7
   126a0:	bne	126b4 <__assert_fail@plt+0x1530>
   126a4:	ldr	r1, [fp, #-12]
   126a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   126ac:	bl	119ec <__assert_fail@plt+0x868>
   126b0:	b	127b8 <__assert_fail@plt+0x1634>
   126b4:	ldr	r3, [pc, #344]	; 12814 <__assert_fail@plt+0x1690>
   126b8:	ldrb	r3, [r3]
   126bc:	cmp	r3, #0
   126c0:	beq	126e0 <__assert_fail@plt+0x155c>
   126c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   126c8:	ldrsh	r3, [r3]
   126cc:	cmp	r3, #1
   126d0:	bne	126e0 <__assert_fail@plt+0x155c>
   126d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   126d8:	bl	12250 <__assert_fail@plt+0x10cc>
   126dc:	b	127b8 <__assert_fail@plt+0x1634>
   126e0:	ldr	r3, [pc, #304]	; 12818 <__assert_fail@plt+0x1694>
   126e4:	ldrb	r3, [r3]
   126e8:	cmp	r3, #0
   126ec:	beq	1270c <__assert_fail@plt+0x1588>
   126f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   126f4:	ldrsh	r3, [r3]
   126f8:	cmp	r3, #2
   126fc:	bne	1270c <__assert_fail@plt+0x1588>
   12700:	ldr	r0, [fp, #-20]	; 0xffffffec
   12704:	bl	11e0c <__assert_fail@plt+0xc88>
   12708:	b	127b8 <__assert_fail@plt+0x1634>
   1270c:	ldr	r3, [pc, #264]	; 1281c <__assert_fail@plt+0x1698>
   12710:	ldrb	r3, [r3]
   12714:	cmp	r3, #0
   12718:	beq	12738 <__assert_fail@plt+0x15b4>
   1271c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12720:	ldrsh	r3, [r3]
   12724:	cmp	r3, #3
   12728:	bne	12738 <__assert_fail@plt+0x15b4>
   1272c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12730:	bl	121d8 <__assert_fail@plt+0x1054>
   12734:	b	127b8 <__assert_fail@plt+0x1634>
   12738:	ldr	r3, [pc, #224]	; 12820 <__assert_fail@plt+0x169c>
   1273c:	ldrb	r3, [r3]
   12740:	cmp	r3, #0
   12744:	beq	12764 <__assert_fail@plt+0x15e0>
   12748:	ldr	r3, [fp, #-20]	; 0xffffffec
   1274c:	ldrsh	r3, [r3]
   12750:	cmp	r3, #5
   12754:	bne	12764 <__assert_fail@plt+0x15e0>
   12758:	ldr	r0, [fp, #-20]	; 0xffffffec
   1275c:	bl	12138 <__assert_fail@plt+0xfb4>
   12760:	b	127b8 <__assert_fail@plt+0x1634>
   12764:	ldr	r3, [pc, #184]	; 12824 <__assert_fail@plt+0x16a0>
   12768:	ldrb	r3, [r3]
   1276c:	cmp	r3, #0
   12770:	beq	12790 <__assert_fail@plt+0x160c>
   12774:	ldr	r3, [fp, #-20]	; 0xffffffec
   12778:	ldrsh	r3, [r3]
   1277c:	cmp	r3, #6
   12780:	bne	12790 <__assert_fail@plt+0x160c>
   12784:	ldr	r0, [fp, #-20]	; 0xffffffec
   12788:	bl	12088 <__assert_fail@plt+0xf04>
   1278c:	b	127b8 <__assert_fail@plt+0x1634>
   12790:	ldr	r3, [pc, #144]	; 12828 <__assert_fail@plt+0x16a4>
   12794:	ldrb	r3, [r3]
   12798:	cmp	r3, #0
   1279c:	beq	127b8 <__assert_fail@plt+0x1634>
   127a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   127a4:	ldrsh	r3, [r3]
   127a8:	cmp	r3, #8
   127ac:	bne	127b8 <__assert_fail@plt+0x1634>
   127b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   127b4:	bl	11f18 <__assert_fail@plt+0xd94>
   127b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   127bc:	ldrsh	r3, [r3]
   127c0:	cmp	r3, #2
   127c4:	bne	127d4 <__assert_fail@plt+0x1650>
   127c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   127cc:	ldr	r3, [r3, #340]	; 0x154
   127d0:	str	r3, [fp, #-12]
   127d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   127d8:	add	r3, r3, #384	; 0x180
   127dc:	str	r3, [fp, #-20]	; 0xffffffec
   127e0:	ldr	r3, [fp, #-16]
   127e4:	sub	r2, r3, #1
   127e8:	str	r2, [fp, #-16]
   127ec:	cmp	r3, #0
   127f0:	bne	12638 <__assert_fail@plt+0x14b4>
   127f4:	b	127fc <__assert_fail@plt+0x1678>
   127f8:	nop			; (mov r0, r0)
   127fc:	sub	sp, fp, #4
   12800:	pop	{fp, pc}
   12804:	muleq	r2, r0, r1
   12808:	muleq	r2, sl, r1
   1280c:	andeq	r8, r1, ip, asr #25
   12810:	muleq	r2, r9, r1
   12814:	muleq	r2, r8, r1
   12818:	muleq	r2, r3, r1
   1281c:	muleq	r2, r7, r1
   12820:	muleq	r2, r6, r1
   12824:	muleq	r2, r5, r1
   12828:	muleq	r2, r4, r1
   1282c:	push	{r4, fp, lr}
   12830:	add	fp, sp, #8
   12834:	sub	sp, sp, #20
   12838:	str	r0, [fp, #-24]	; 0xffffffe8
   1283c:	str	r1, [fp, #-28]	; 0xffffffe4
   12840:	sub	r2, fp, #20
   12844:	sub	r1, fp, #16
   12848:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1284c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12850:	bl	16314 <__assert_fail@plt+0x5190>
   12854:	mov	r3, r0
   12858:	cmp	r3, #0
   1285c:	beq	12890 <__assert_fail@plt+0x170c>
   12860:	bl	11094 <__errno_location@plt>
   12864:	mov	r3, r0
   12868:	ldr	r4, [r3]
   1286c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12870:	mov	r1, #3
   12874:	mov	r0, #0
   12878:	bl	15ed4 <__assert_fail@plt+0x4d50>
   1287c:	mov	r3, r0
   12880:	ldr	r2, [pc, #92]	; 128e4 <__assert_fail@plt+0x1760>
   12884:	mov	r1, r4
   12888:	mov	r0, #1
   1288c:	bl	10fc8 <error@plt>
   12890:	ldr	r3, [pc, #80]	; 128e8 <__assert_fail@plt+0x1764>
   12894:	ldrb	r3, [r3]
   12898:	cmp	r3, #0
   1289c:	beq	128b8 <__assert_fail@plt+0x1734>
   128a0:	ldr	r3, [fp, #-16]
   128a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   128a8:	mov	r1, r2
   128ac:	mov	r0, r3
   128b0:	bl	12420 <__assert_fail@plt+0x129c>
   128b4:	b	128cc <__assert_fail@plt+0x1748>
   128b8:	ldr	r3, [fp, #-16]
   128bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   128c0:	mov	r1, r2
   128c4:	mov	r0, r3
   128c8:	bl	125ac <__assert_fail@plt+0x1428>
   128cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   128d0:	mov	r0, r3
   128d4:	bl	137d4 <__assert_fail@plt+0x2650>
   128d8:	nop			; (mov r0, r0)
   128dc:	sub	sp, fp, #8
   128e0:	pop	{r4, fp, pc}
   128e4:	andeq	r8, r1, r4, lsr #27
   128e8:	andeq	sl, r2, sp, lsl #3
   128ec:	push	{r4, fp, lr}
   128f0:	add	fp, sp, #8
   128f4:	sub	sp, sp, #12
   128f8:	str	r0, [fp, #-16]
   128fc:	ldr	r3, [fp, #-16]
   12900:	cmp	r3, #0
   12904:	beq	12934 <__assert_fail@plt+0x17b0>
   12908:	ldr	r3, [pc, #368]	; 12a80 <__assert_fail@plt+0x18fc>
   1290c:	ldr	r4, [r3]
   12910:	ldr	r0, [pc, #364]	; 12a84 <__assert_fail@plt+0x1900>
   12914:	bl	11058 <gettext@plt>
   12918:	mov	r1, r0
   1291c:	ldr	r3, [pc, #356]	; 12a88 <__assert_fail@plt+0x1904>
   12920:	ldr	r3, [r3]
   12924:	mov	r2, r3
   12928:	mov	r0, r4
   1292c:	bl	11088 <fprintf@plt>
   12930:	b	12a78 <__assert_fail@plt+0x18f4>
   12934:	ldr	r0, [pc, #336]	; 12a8c <__assert_fail@plt+0x1908>
   12938:	bl	11058 <gettext@plt>
   1293c:	mov	r2, r0
   12940:	ldr	r3, [pc, #320]	; 12a88 <__assert_fail@plt+0x1904>
   12944:	ldr	r3, [r3]
   12948:	mov	r1, r3
   1294c:	mov	r0, r2
   12950:	bl	10eb4 <printf@plt>
   12954:	ldr	r0, [pc, #308]	; 12a90 <__assert_fail@plt+0x190c>
   12958:	bl	11058 <gettext@plt>
   1295c:	mov	r2, r0
   12960:	ldr	r3, [pc, #300]	; 12a94 <__assert_fail@plt+0x1910>
   12964:	ldr	r3, [r3]
   12968:	mov	r1, r3
   1296c:	mov	r0, r2
   12970:	bl	10e90 <fputs_unlocked@plt>
   12974:	ldr	r0, [pc, #284]	; 12a98 <__assert_fail@plt+0x1914>
   12978:	bl	11058 <gettext@plt>
   1297c:	mov	r2, r0
   12980:	ldr	r3, [pc, #268]	; 12a94 <__assert_fail@plt+0x1910>
   12984:	ldr	r3, [r3]
   12988:	mov	r1, r3
   1298c:	mov	r0, r2
   12990:	bl	10e90 <fputs_unlocked@plt>
   12994:	ldr	r0, [pc, #256]	; 12a9c <__assert_fail@plt+0x1918>
   12998:	bl	11058 <gettext@plt>
   1299c:	mov	r2, r0
   129a0:	ldr	r3, [pc, #236]	; 12a94 <__assert_fail@plt+0x1910>
   129a4:	ldr	r3, [r3]
   129a8:	mov	r1, r3
   129ac:	mov	r0, r2
   129b0:	bl	10e90 <fputs_unlocked@plt>
   129b4:	ldr	r0, [pc, #228]	; 12aa0 <__assert_fail@plt+0x191c>
   129b8:	bl	11058 <gettext@plt>
   129bc:	mov	r2, r0
   129c0:	ldr	r3, [pc, #204]	; 12a94 <__assert_fail@plt+0x1910>
   129c4:	ldr	r3, [r3]
   129c8:	mov	r1, r3
   129cc:	mov	r0, r2
   129d0:	bl	10e90 <fputs_unlocked@plt>
   129d4:	ldr	r0, [pc, #200]	; 12aa4 <__assert_fail@plt+0x1920>
   129d8:	bl	11058 <gettext@plt>
   129dc:	mov	r2, r0
   129e0:	ldr	r3, [pc, #172]	; 12a94 <__assert_fail@plt+0x1910>
   129e4:	ldr	r3, [r3]
   129e8:	mov	r1, r3
   129ec:	mov	r0, r2
   129f0:	bl	10e90 <fputs_unlocked@plt>
   129f4:	ldr	r0, [pc, #172]	; 12aa8 <__assert_fail@plt+0x1924>
   129f8:	bl	11058 <gettext@plt>
   129fc:	mov	r2, r0
   12a00:	ldr	r3, [pc, #140]	; 12a94 <__assert_fail@plt+0x1910>
   12a04:	ldr	r3, [r3]
   12a08:	mov	r1, r3
   12a0c:	mov	r0, r2
   12a10:	bl	10e90 <fputs_unlocked@plt>
   12a14:	ldr	r0, [pc, #144]	; 12aac <__assert_fail@plt+0x1928>
   12a18:	bl	11058 <gettext@plt>
   12a1c:	mov	r2, r0
   12a20:	ldr	r3, [pc, #108]	; 12a94 <__assert_fail@plt+0x1910>
   12a24:	ldr	r3, [r3]
   12a28:	mov	r1, r3
   12a2c:	mov	r0, r2
   12a30:	bl	10e90 <fputs_unlocked@plt>
   12a34:	ldr	r0, [pc, #116]	; 12ab0 <__assert_fail@plt+0x192c>
   12a38:	bl	11058 <gettext@plt>
   12a3c:	mov	r2, r0
   12a40:	ldr	r3, [pc, #76]	; 12a94 <__assert_fail@plt+0x1910>
   12a44:	ldr	r3, [r3]
   12a48:	mov	r1, r3
   12a4c:	mov	r0, r2
   12a50:	bl	10e90 <fputs_unlocked@plt>
   12a54:	ldr	r0, [pc, #88]	; 12ab4 <__assert_fail@plt+0x1930>
   12a58:	bl	11058 <gettext@plt>
   12a5c:	mov	r3, r0
   12a60:	ldr	r2, [pc, #80]	; 12ab8 <__assert_fail@plt+0x1934>
   12a64:	ldr	r1, [pc, #80]	; 12abc <__assert_fail@plt+0x1938>
   12a68:	mov	r0, r3
   12a6c:	bl	10eb4 <printf@plt>
   12a70:	ldr	r0, [pc, #72]	; 12ac0 <__assert_fail@plt+0x193c>
   12a74:	bl	112b8 <__assert_fail@plt+0x134>
   12a78:	ldr	r0, [fp, #-16]
   12a7c:	bl	1104c <exit@plt>
   12a80:	andeq	sl, r2, r0, lsl #3
   12a84:	andeq	r8, r1, r8, lsr #27
   12a88:	andeq	sl, r2, r0, lsl r2
   12a8c:	ldrdeq	r8, [r1], -r0
   12a90:	strdeq	r8, [r1], -ip
   12a94:	andeq	sl, r2, r4, lsl #3
   12a98:	andeq	r8, r1, r8, lsr lr
   12a9c:	strdeq	r8, [r1], -ip
   12aa0:	andeq	r8, r1, r0, lsr pc
   12aa4:	andeq	r8, r1, ip, ror #31
   12aa8:	andeq	r9, r1, ip, asr #1
   12aac:	andeq	r9, r1, r0, ror r1
   12ab0:	andeq	r9, r1, r0, lsr #3
   12ab4:	ldrdeq	r9, [r1], -r8
   12ab8:	andeq	r9, r1, r8, asr r2
   12abc:	andeq	r9, r1, r8, ror #4
   12ac0:	andeq	r9, r1, r8, ror r2
   12ac4:	push	{r4, fp, lr}
   12ac8:	add	fp, sp, #8
   12acc:	sub	sp, sp, #36	; 0x24
   12ad0:	str	r0, [fp, #-24]	; 0xffffffe8
   12ad4:	str	r1, [fp, #-28]	; 0xffffffe4
   12ad8:	mov	r3, #1
   12adc:	strb	r3, [fp, #-13]
   12ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ae4:	ldr	r3, [r3]
   12ae8:	mov	r0, r3
   12aec:	bl	13a14 <__assert_fail@plt+0x2890>
   12af0:	ldr	r1, [pc, #1160]	; 12f80 <__assert_fail@plt+0x1dfc>
   12af4:	mov	r0, #6
   12af8:	bl	11100 <setlocale@plt>
   12afc:	ldr	r1, [pc, #1152]	; 12f84 <__assert_fail@plt+0x1e00>
   12b00:	ldr	r0, [pc, #1152]	; 12f88 <__assert_fail@plt+0x1e04>
   12b04:	bl	11148 <bindtextdomain@plt>
   12b08:	ldr	r0, [pc, #1144]	; 12f88 <__assert_fail@plt+0x1e04>
   12b0c:	bl	10f68 <textdomain@plt>
   12b10:	ldr	r0, [pc, #1140]	; 12f8c <__assert_fail@plt+0x1e08>
   12b14:	bl	188b0 <__assert_fail@plt+0x772c>
   12b18:	b	12dfc <__assert_fail@plt+0x1c78>
   12b1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b20:	cmp	r3, #109	; 0x6d
   12b24:	beq	12cdc <__assert_fail@plt+0x1b58>
   12b28:	cmp	r3, #109	; 0x6d
   12b2c:	bgt	12b8c <__assert_fail@plt+0x1a08>
   12b30:	cmp	r3, #84	; 0x54
   12b34:	beq	12d60 <__assert_fail@plt+0x1bdc>
   12b38:	cmp	r3, #84	; 0x54
   12b3c:	bgt	12b5c <__assert_fail@plt+0x19d8>
   12b40:	cmn	r3, #2
   12b44:	beq	12da4 <__assert_fail@plt+0x1c20>
   12b48:	cmp	r3, #72	; 0x48
   12b4c:	beq	12ca8 <__assert_fail@plt+0x1b24>
   12b50:	cmn	r3, #3
   12b54:	beq	12dac <__assert_fail@plt+0x1c28>
   12b58:	b	12df4 <__assert_fail@plt+0x1c70>
   12b5c:	cmp	r3, #98	; 0x62
   12b60:	beq	12c60 <__assert_fail@plt+0x1adc>
   12b64:	cmp	r3, #98	; 0x62
   12b68:	bgt	12b78 <__assert_fail@plt+0x19f4>
   12b6c:	cmp	r3, #97	; 0x61
   12b70:	beq	12bdc <__assert_fail@plt+0x1a58>
   12b74:	b	12df4 <__assert_fail@plt+0x1c70>
   12b78:	cmp	r3, #100	; 0x64
   12b7c:	beq	12c78 <__assert_fail@plt+0x1af4>
   12b80:	cmp	r3, #108	; 0x6c
   12b84:	beq	12cb8 <__assert_fail@plt+0x1b34>
   12b88:	b	12df4 <__assert_fail@plt+0x1c70>
   12b8c:	cmp	r3, #115	; 0x73
   12b90:	beq	12d38 <__assert_fail@plt+0x1bb4>
   12b94:	cmp	r3, #115	; 0x73
   12b98:	bgt	12bb8 <__assert_fail@plt+0x1a34>
   12b9c:	cmp	r3, #113	; 0x71
   12ba0:	beq	12d04 <__assert_fail@plt+0x1b80>
   12ba4:	cmp	r3, #113	; 0x71
   12ba8:	bgt	12d14 <__assert_fail@plt+0x1b90>
   12bac:	cmp	r3, #112	; 0x70
   12bb0:	beq	12cec <__assert_fail@plt+0x1b68>
   12bb4:	b	12df4 <__assert_fail@plt+0x1c70>
   12bb8:	cmp	r3, #117	; 0x75
   12bbc:	beq	12d70 <__assert_fail@plt+0x1bec>
   12bc0:	cmp	r3, #117	; 0x75
   12bc4:	blt	12d48 <__assert_fail@plt+0x1bc4>
   12bc8:	cmp	r3, #119	; 0x77
   12bcc:	beq	12d60 <__assert_fail@plt+0x1bdc>
   12bd0:	cmp	r3, #256	; 0x100
   12bd4:	beq	12d94 <__assert_fail@plt+0x1c10>
   12bd8:	b	12df4 <__assert_fail@plt+0x1c70>
   12bdc:	ldr	r3, [pc, #940]	; 12f90 <__assert_fail@plt+0x1e0c>
   12be0:	mov	r2, #1
   12be4:	strb	r2, [r3]
   12be8:	ldr	r3, [pc, #932]	; 12f94 <__assert_fail@plt+0x1e10>
   12bec:	mov	r2, #1
   12bf0:	strb	r2, [r3]
   12bf4:	ldr	r3, [pc, #924]	; 12f98 <__assert_fail@plt+0x1e14>
   12bf8:	mov	r2, #1
   12bfc:	strb	r2, [r3]
   12c00:	ldr	r3, [pc, #916]	; 12f9c <__assert_fail@plt+0x1e18>
   12c04:	mov	r2, #1
   12c08:	strb	r2, [r3]
   12c0c:	ldr	r3, [pc, #908]	; 12fa0 <__assert_fail@plt+0x1e1c>
   12c10:	mov	r2, #1
   12c14:	strb	r2, [r3]
   12c18:	ldr	r3, [pc, #900]	; 12fa4 <__assert_fail@plt+0x1e20>
   12c1c:	mov	r2, #1
   12c20:	strb	r2, [r3]
   12c24:	ldr	r3, [pc, #892]	; 12fa8 <__assert_fail@plt+0x1e24>
   12c28:	mov	r2, #1
   12c2c:	strb	r2, [r3]
   12c30:	ldr	r3, [pc, #884]	; 12fac <__assert_fail@plt+0x1e28>
   12c34:	mov	r2, #1
   12c38:	strb	r2, [r3]
   12c3c:	ldr	r3, [pc, #876]	; 12fb0 <__assert_fail@plt+0x1e2c>
   12c40:	mov	r2, #1
   12c44:	strb	r2, [r3]
   12c48:	ldr	r3, [pc, #868]	; 12fb4 <__assert_fail@plt+0x1e30>
   12c4c:	mov	r2, #1
   12c50:	strb	r2, [r3]
   12c54:	mov	r3, #0
   12c58:	strb	r3, [fp, #-13]
   12c5c:	b	12dfc <__assert_fail@plt+0x1c78>
   12c60:	ldr	r3, [pc, #808]	; 12f90 <__assert_fail@plt+0x1e0c>
   12c64:	mov	r2, #1
   12c68:	strb	r2, [r3]
   12c6c:	mov	r3, #0
   12c70:	strb	r3, [fp, #-13]
   12c74:	b	12dfc <__assert_fail@plt+0x1c78>
   12c78:	ldr	r3, [pc, #788]	; 12f94 <__assert_fail@plt+0x1e10>
   12c7c:	mov	r2, #1
   12c80:	strb	r2, [r3]
   12c84:	ldr	r3, [pc, #804]	; 12fb0 <__assert_fail@plt+0x1e2c>
   12c88:	mov	r2, #1
   12c8c:	strb	r2, [r3]
   12c90:	ldr	r3, [pc, #796]	; 12fb4 <__assert_fail@plt+0x1e30>
   12c94:	mov	r2, #1
   12c98:	strb	r2, [r3]
   12c9c:	mov	r3, #0
   12ca0:	strb	r3, [fp, #-13]
   12ca4:	b	12dfc <__assert_fail@plt+0x1c78>
   12ca8:	ldr	r3, [pc, #776]	; 12fb8 <__assert_fail@plt+0x1e34>
   12cac:	mov	r2, #1
   12cb0:	strb	r2, [r3]
   12cb4:	b	12dfc <__assert_fail@plt+0x1c78>
   12cb8:	ldr	r3, [pc, #728]	; 12f98 <__assert_fail@plt+0x1e14>
   12cbc:	mov	r2, #1
   12cc0:	strb	r2, [r3]
   12cc4:	ldr	r3, [pc, #740]	; 12fb0 <__assert_fail@plt+0x1e2c>
   12cc8:	mov	r2, #1
   12ccc:	strb	r2, [r3]
   12cd0:	mov	r3, #0
   12cd4:	strb	r3, [fp, #-13]
   12cd8:	b	12dfc <__assert_fail@plt+0x1c78>
   12cdc:	ldr	r3, [pc, #728]	; 12fbc <__assert_fail@plt+0x1e38>
   12ce0:	mov	r2, #1
   12ce4:	strb	r2, [r3]
   12ce8:	b	12dfc <__assert_fail@plt+0x1c78>
   12cec:	ldr	r3, [pc, #680]	; 12f9c <__assert_fail@plt+0x1e18>
   12cf0:	mov	r2, #1
   12cf4:	strb	r2, [r3]
   12cf8:	mov	r3, #0
   12cfc:	strb	r3, [fp, #-13]
   12d00:	b	12dfc <__assert_fail@plt+0x1c78>
   12d04:	ldr	r3, [pc, #692]	; 12fc0 <__assert_fail@plt+0x1e3c>
   12d08:	mov	r2, #1
   12d0c:	strb	r2, [r3]
   12d10:	b	12dfc <__assert_fail@plt+0x1c78>
   12d14:	ldr	r3, [pc, #644]	; 12fa0 <__assert_fail@plt+0x1e1c>
   12d18:	mov	r2, #1
   12d1c:	strb	r2, [r3]
   12d20:	ldr	r3, [pc, #648]	; 12fb0 <__assert_fail@plt+0x1e2c>
   12d24:	mov	r2, #1
   12d28:	strb	r2, [r3]
   12d2c:	mov	r3, #0
   12d30:	strb	r3, [fp, #-13]
   12d34:	b	12dfc <__assert_fail@plt+0x1c78>
   12d38:	ldr	r3, [pc, #644]	; 12fc4 <__assert_fail@plt+0x1e40>
   12d3c:	mov	r2, #1
   12d40:	strb	r2, [r3]
   12d44:	b	12dfc <__assert_fail@plt+0x1c78>
   12d48:	ldr	r3, [pc, #596]	; 12fa4 <__assert_fail@plt+0x1e20>
   12d4c:	mov	r2, #1
   12d50:	strb	r2, [r3]
   12d54:	mov	r3, #0
   12d58:	strb	r3, [fp, #-13]
   12d5c:	b	12dfc <__assert_fail@plt+0x1c78>
   12d60:	ldr	r3, [pc, #580]	; 12fac <__assert_fail@plt+0x1e28>
   12d64:	mov	r2, #1
   12d68:	strb	r2, [r3]
   12d6c:	b	12dfc <__assert_fail@plt+0x1c78>
   12d70:	ldr	r3, [pc, #560]	; 12fa8 <__assert_fail@plt+0x1e24>
   12d74:	mov	r2, #1
   12d78:	strb	r2, [r3]
   12d7c:	ldr	r3, [pc, #556]	; 12fb0 <__assert_fail@plt+0x1e2c>
   12d80:	mov	r2, #1
   12d84:	strb	r2, [r3]
   12d88:	mov	r3, #0
   12d8c:	strb	r3, [fp, #-13]
   12d90:	b	12dfc <__assert_fail@plt+0x1c78>
   12d94:	ldr	r3, [pc, #556]	; 12fc8 <__assert_fail@plt+0x1e44>
   12d98:	mov	r2, #1
   12d9c:	strb	r2, [r3]
   12da0:	b	12dfc <__assert_fail@plt+0x1c78>
   12da4:	mov	r0, #0
   12da8:	bl	128ec <__assert_fail@plt+0x1768>
   12dac:	ldr	r3, [pc, #536]	; 12fcc <__assert_fail@plt+0x1e48>
   12db0:	ldr	r0, [r3]
   12db4:	ldr	r3, [pc, #532]	; 12fd0 <__assert_fail@plt+0x1e4c>
   12db8:	ldr	r2, [r3]
   12dbc:	mov	r3, #0
   12dc0:	str	r3, [sp, #12]
   12dc4:	ldr	r3, [pc, #520]	; 12fd4 <__assert_fail@plt+0x1e50>
   12dc8:	str	r3, [sp, #8]
   12dcc:	ldr	r3, [pc, #516]	; 12fd8 <__assert_fail@plt+0x1e54>
   12dd0:	str	r3, [sp, #4]
   12dd4:	ldr	r3, [pc, #512]	; 12fdc <__assert_fail@plt+0x1e58>
   12dd8:	str	r3, [sp]
   12ddc:	mov	r3, r2
   12de0:	ldr	r2, [pc, #504]	; 12fe0 <__assert_fail@plt+0x1e5c>
   12de4:	ldr	r1, [pc, #504]	; 12fe4 <__assert_fail@plt+0x1e60>
   12de8:	bl	16c2c <__assert_fail@plt+0x5aa8>
   12dec:	mov	r0, #0
   12df0:	bl	1104c <exit@plt>
   12df4:	mov	r0, #1
   12df8:	bl	128ec <__assert_fail@plt+0x1768>
   12dfc:	mov	r3, #0
   12e00:	str	r3, [sp]
   12e04:	ldr	r3, [pc, #476]	; 12fe8 <__assert_fail@plt+0x1e64>
   12e08:	ldr	r2, [pc, #476]	; 12fec <__assert_fail@plt+0x1e68>
   12e0c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12e10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12e14:	bl	11028 <getopt_long@plt>
   12e18:	str	r0, [fp, #-20]	; 0xffffffec
   12e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e20:	cmn	r3, #1
   12e24:	bne	12b1c <__assert_fail@plt+0x1998>
   12e28:	ldrb	r3, [fp, #-13]
   12e2c:	cmp	r3, #0
   12e30:	beq	12e4c <__assert_fail@plt+0x1cc8>
   12e34:	ldr	r3, [pc, #364]	; 12fa8 <__assert_fail@plt+0x1e24>
   12e38:	mov	r2, #1
   12e3c:	strb	r2, [r3]
   12e40:	ldr	r3, [pc, #380]	; 12fc4 <__assert_fail@plt+0x1e40>
   12e44:	mov	r2, #1
   12e48:	strb	r2, [r3]
   12e4c:	ldr	r3, [pc, #352]	; 12fb4 <__assert_fail@plt+0x1e30>
   12e50:	ldrb	r3, [r3]
   12e54:	cmp	r3, #0
   12e58:	beq	12e68 <__assert_fail@plt+0x1ce4>
   12e5c:	ldr	r3, [pc, #352]	; 12fc4 <__assert_fail@plt+0x1e40>
   12e60:	mov	r2, #0
   12e64:	strb	r2, [r3]
   12e68:	mov	r0, #2
   12e6c:	bl	13860 <__assert_fail@plt+0x26dc>
   12e70:	mov	r3, r0
   12e74:	cmp	r3, #0
   12e78:	beq	12e98 <__assert_fail@plt+0x1d14>
   12e7c:	ldr	r3, [pc, #364]	; 12ff0 <__assert_fail@plt+0x1e6c>
   12e80:	ldr	r2, [pc, #364]	; 12ff4 <__assert_fail@plt+0x1e70>
   12e84:	str	r2, [r3]
   12e88:	ldr	r3, [pc, #360]	; 12ff8 <__assert_fail@plt+0x1e74>
   12e8c:	mov	r2, #16
   12e90:	str	r2, [r3]
   12e94:	b	12eb0 <__assert_fail@plt+0x1d2c>
   12e98:	ldr	r3, [pc, #336]	; 12ff0 <__assert_fail@plt+0x1e6c>
   12e9c:	ldr	r2, [pc, #344]	; 12ffc <__assert_fail@plt+0x1e78>
   12ea0:	str	r2, [r3]
   12ea4:	ldr	r3, [pc, #332]	; 12ff8 <__assert_fail@plt+0x1e74>
   12ea8:	mov	r2, #12
   12eac:	str	r2, [r3]
   12eb0:	ldr	r3, [pc, #328]	; 13000 <__assert_fail@plt+0x1e7c>
   12eb4:	ldr	r3, [r3]
   12eb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ebc:	sub	r3, r2, r3
   12ec0:	add	r3, r3, #1
   12ec4:	cmp	r3, #3
   12ec8:	ldrls	pc, [pc, r3, lsl #2]
   12ecc:	b	12f24 <__assert_fail@plt+0x1da0>
   12ed0:	andeq	r2, r1, ip, ror #29
   12ed4:	andeq	r2, r1, ip, ror #29
   12ed8:	strdeq	r2, [r1], -ip
   12edc:	andeq	r2, r1, r0, ror #29
   12ee0:	ldr	r3, [pc, #212]	; 12fbc <__assert_fail@plt+0x1e38>
   12ee4:	mov	r2, #1
   12ee8:	strb	r2, [r3]
   12eec:	mov	r1, #1
   12ef0:	ldr	r0, [pc, #268]	; 13004 <__assert_fail@plt+0x1e80>
   12ef4:	bl	1282c <__assert_fail@plt+0x16a8>
   12ef8:	b	12f70 <__assert_fail@plt+0x1dec>
   12efc:	ldr	r3, [pc, #252]	; 13000 <__assert_fail@plt+0x1e7c>
   12f00:	ldr	r3, [r3]
   12f04:	lsl	r3, r3, #2
   12f08:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12f0c:	add	r3, r2, r3
   12f10:	ldr	r3, [r3]
   12f14:	mov	r1, #0
   12f18:	mov	r0, r3
   12f1c:	bl	1282c <__assert_fail@plt+0x16a8>
   12f20:	b	12f70 <__assert_fail@plt+0x1dec>
   12f24:	ldr	r0, [pc, #220]	; 13008 <__assert_fail@plt+0x1e84>
   12f28:	bl	11058 <gettext@plt>
   12f2c:	mov	r4, r0
   12f30:	ldr	r3, [pc, #200]	; 13000 <__assert_fail@plt+0x1e7c>
   12f34:	ldr	r3, [r3]
   12f38:	add	r3, r3, #2
   12f3c:	lsl	r3, r3, #2
   12f40:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12f44:	add	r3, r2, r3
   12f48:	ldr	r3, [r3]
   12f4c:	mov	r0, r3
   12f50:	bl	16144 <__assert_fail@plt+0x4fc0>
   12f54:	mov	r3, r0
   12f58:	mov	r2, r4
   12f5c:	mov	r1, #0
   12f60:	mov	r0, #0
   12f64:	bl	10fc8 <error@plt>
   12f68:	mov	r0, #1
   12f6c:	bl	128ec <__assert_fail@plt+0x1768>
   12f70:	mov	r3, #0
   12f74:	mov	r0, r3
   12f78:	sub	sp, fp, #8
   12f7c:	pop	{r4, fp, pc}
   12f80:	ldrdeq	r8, [r1], -ip
   12f84:	andeq	r9, r1, ip, ror r2
   12f88:	strdeq	r8, [r1], -r4
   12f8c:	andeq	r3, r1, r0, lsr #13
   12f90:	muleq	r2, r3, r1
   12f94:	muleq	r2, r4, r1
   12f98:	muleq	r2, r5, r1
   12f9c:	muleq	r2, r6, r1
   12fa0:	muleq	r2, r8, r1
   12fa4:	muleq	r2, r7, r1
   12fa8:	muleq	r2, r9, r1
   12fac:	muleq	r2, r1, r1
   12fb0:	andeq	sl, r2, pc, lsl #3
   12fb4:	muleq	r2, r2, r1
   12fb8:	muleq	r2, r0, r1
   12fbc:	muleq	r2, sl, r1
   12fc0:	andeq	sl, r2, sp, lsl #3
   12fc4:	andeq	sl, r2, lr, lsl #3
   12fc8:	andeq	sl, r2, ip, lsl #3
   12fcc:	andeq	sl, r2, r4, lsl #3
   12fd0:	andeq	sl, r2, r4, lsr #2
   12fd4:	muleq	r1, r4, r2
   12fd8:	andeq	r9, r1, r4, lsr #5
   12fdc:			; <UNDEFINED> instruction: 0x000192b4
   12fe0:	andeq	r8, r1, r4, lsr #18
   12fe4:	andeq	r9, r1, r8, ror r2
   12fe8:	andeq	r8, r1, ip, lsl fp
   12fec:	andeq	r9, r1, r8, asr #5
   12ff0:	muleq	r2, ip, r1
   12ff4:	ldrdeq	r9, [r1], -r8
   12ff8:	andeq	sl, r2, r0, lsr #3
   12ffc:	andeq	r9, r1, r8, ror #5
   13000:	andeq	sl, r2, r8, ror r1
   13004:	andeq	r9, r1, r8, ror #4
   13008:	strdeq	r9, [r1], -r4
   1300c:	push	{fp}		; (str fp, [sp, #-4]!)
   13010:	add	fp, sp, #0
   13014:	sub	sp, sp, #12
   13018:	str	r0, [fp, #-8]
   1301c:	ldr	r3, [fp, #-8]
   13020:	cmp	r3, #90	; 0x5a
   13024:	bgt	13040 <__assert_fail@plt+0x1ebc>
   13028:	cmp	r3, #65	; 0x41
   1302c:	bge	1304c <__assert_fail@plt+0x1ec8>
   13030:	sub	r3, r3, #48	; 0x30
   13034:	cmp	r3, #9
   13038:	bhi	13054 <__assert_fail@plt+0x1ed0>
   1303c:	b	1304c <__assert_fail@plt+0x1ec8>
   13040:	sub	r3, r3, #97	; 0x61
   13044:	cmp	r3, #25
   13048:	bhi	13054 <__assert_fail@plt+0x1ed0>
   1304c:	mov	r3, #1
   13050:	b	13058 <__assert_fail@plt+0x1ed4>
   13054:	mov	r3, #0
   13058:	mov	r0, r3
   1305c:	add	sp, fp, #0
   13060:	pop	{fp}		; (ldr fp, [sp], #4)
   13064:	bx	lr
   13068:	push	{fp}		; (str fp, [sp, #-4]!)
   1306c:	add	fp, sp, #0
   13070:	sub	sp, sp, #12
   13074:	str	r0, [fp, #-8]
   13078:	ldr	r3, [fp, #-8]
   1307c:	cmp	r3, #65	; 0x41
   13080:	blt	130a0 <__assert_fail@plt+0x1f1c>
   13084:	cmp	r3, #90	; 0x5a
   13088:	ble	13098 <__assert_fail@plt+0x1f14>
   1308c:	sub	r3, r3, #97	; 0x61
   13090:	cmp	r3, #25
   13094:	bhi	130a0 <__assert_fail@plt+0x1f1c>
   13098:	mov	r3, #1
   1309c:	b	130a4 <__assert_fail@plt+0x1f20>
   130a0:	mov	r3, #0
   130a4:	mov	r0, r3
   130a8:	add	sp, fp, #0
   130ac:	pop	{fp}		; (ldr fp, [sp], #4)
   130b0:	bx	lr
   130b4:	push	{fp}		; (str fp, [sp, #-4]!)
   130b8:	add	fp, sp, #0
   130bc:	sub	sp, sp, #12
   130c0:	str	r0, [fp, #-8]
   130c4:	ldr	r3, [fp, #-8]
   130c8:	add	r3, r3, #0
   130cc:	cmp	r3, #127	; 0x7f
   130d0:	bhi	130dc <__assert_fail@plt+0x1f58>
   130d4:	mov	r3, #1
   130d8:	b	130e0 <__assert_fail@plt+0x1f5c>
   130dc:	mov	r3, #0
   130e0:	mov	r0, r3
   130e4:	add	sp, fp, #0
   130e8:	pop	{fp}		; (ldr fp, [sp], #4)
   130ec:	bx	lr
   130f0:	push	{fp}		; (str fp, [sp, #-4]!)
   130f4:	add	fp, sp, #0
   130f8:	sub	sp, sp, #12
   130fc:	str	r0, [fp, #-8]
   13100:	ldr	r3, [fp, #-8]
   13104:	cmp	r3, #32
   13108:	beq	13118 <__assert_fail@plt+0x1f94>
   1310c:	ldr	r3, [fp, #-8]
   13110:	cmp	r3, #9
   13114:	bne	13120 <__assert_fail@plt+0x1f9c>
   13118:	mov	r3, #1
   1311c:	b	13124 <__assert_fail@plt+0x1fa0>
   13120:	mov	r3, #0
   13124:	and	r3, r3, #1
   13128:	uxtb	r3, r3
   1312c:	mov	r0, r3
   13130:	add	sp, fp, #0
   13134:	pop	{fp}		; (ldr fp, [sp], #4)
   13138:	bx	lr
   1313c:	push	{fp}		; (str fp, [sp, #-4]!)
   13140:	add	fp, sp, #0
   13144:	sub	sp, sp, #12
   13148:	str	r0, [fp, #-8]
   1314c:	ldr	r3, [fp, #-8]
   13150:	cmp	r3, #0
   13154:	blt	13170 <__assert_fail@plt+0x1fec>
   13158:	cmp	r3, #31
   1315c:	ble	13168 <__assert_fail@plt+0x1fe4>
   13160:	cmp	r3, #127	; 0x7f
   13164:	bne	13170 <__assert_fail@plt+0x1fec>
   13168:	mov	r3, #1
   1316c:	b	13174 <__assert_fail@plt+0x1ff0>
   13170:	mov	r3, #0
   13174:	mov	r0, r3
   13178:	add	sp, fp, #0
   1317c:	pop	{fp}		; (ldr fp, [sp], #4)
   13180:	bx	lr
   13184:	push	{fp}		; (str fp, [sp, #-4]!)
   13188:	add	fp, sp, #0
   1318c:	sub	sp, sp, #12
   13190:	str	r0, [fp, #-8]
   13194:	ldr	r3, [fp, #-8]
   13198:	sub	r3, r3, #48	; 0x30
   1319c:	cmp	r3, #9
   131a0:	bhi	131ac <__assert_fail@plt+0x2028>
   131a4:	mov	r3, #1
   131a8:	b	131b0 <__assert_fail@plt+0x202c>
   131ac:	mov	r3, #0
   131b0:	mov	r0, r3
   131b4:	add	sp, fp, #0
   131b8:	pop	{fp}		; (ldr fp, [sp], #4)
   131bc:	bx	lr
   131c0:	push	{fp}		; (str fp, [sp, #-4]!)
   131c4:	add	fp, sp, #0
   131c8:	sub	sp, sp, #12
   131cc:	str	r0, [fp, #-8]
   131d0:	ldr	r3, [fp, #-8]
   131d4:	sub	r3, r3, #33	; 0x21
   131d8:	cmp	r3, #93	; 0x5d
   131dc:	bhi	131e8 <__assert_fail@plt+0x2064>
   131e0:	mov	r3, #1
   131e4:	b	131ec <__assert_fail@plt+0x2068>
   131e8:	mov	r3, #0
   131ec:	mov	r0, r3
   131f0:	add	sp, fp, #0
   131f4:	pop	{fp}		; (ldr fp, [sp], #4)
   131f8:	bx	lr
   131fc:	push	{fp}		; (str fp, [sp, #-4]!)
   13200:	add	fp, sp, #0
   13204:	sub	sp, sp, #12
   13208:	str	r0, [fp, #-8]
   1320c:	ldr	r3, [fp, #-8]
   13210:	sub	r3, r3, #97	; 0x61
   13214:	cmp	r3, #25
   13218:	bhi	13224 <__assert_fail@plt+0x20a0>
   1321c:	mov	r3, #1
   13220:	b	13228 <__assert_fail@plt+0x20a4>
   13224:	mov	r3, #0
   13228:	mov	r0, r3
   1322c:	add	sp, fp, #0
   13230:	pop	{fp}		; (ldr fp, [sp], #4)
   13234:	bx	lr
   13238:	push	{fp}		; (str fp, [sp, #-4]!)
   1323c:	add	fp, sp, #0
   13240:	sub	sp, sp, #12
   13244:	str	r0, [fp, #-8]
   13248:	ldr	r3, [fp, #-8]
   1324c:	sub	r3, r3, #32
   13250:	cmp	r3, #94	; 0x5e
   13254:	bhi	13260 <__assert_fail@plt+0x20dc>
   13258:	mov	r3, #1
   1325c:	b	13264 <__assert_fail@plt+0x20e0>
   13260:	mov	r3, #0
   13264:	mov	r0, r3
   13268:	add	sp, fp, #0
   1326c:	pop	{fp}		; (ldr fp, [sp], #4)
   13270:	bx	lr
   13274:	push	{fp}		; (str fp, [sp, #-4]!)
   13278:	add	fp, sp, #0
   1327c:	sub	sp, sp, #12
   13280:	str	r0, [fp, #-8]
   13284:	ldr	r3, [fp, #-8]
   13288:	cmp	r3, #64	; 0x40
   1328c:	bgt	132a8 <__assert_fail@plt+0x2124>
   13290:	cmp	r3, #58	; 0x3a
   13294:	bge	132c4 <__assert_fail@plt+0x2140>
   13298:	sub	r3, r3, #33	; 0x21
   1329c:	cmp	r3, #14
   132a0:	bhi	132cc <__assert_fail@plt+0x2148>
   132a4:	b	132c4 <__assert_fail@plt+0x2140>
   132a8:	cmp	r3, #91	; 0x5b
   132ac:	blt	132cc <__assert_fail@plt+0x2148>
   132b0:	cmp	r3, #96	; 0x60
   132b4:	ble	132c4 <__assert_fail@plt+0x2140>
   132b8:	sub	r3, r3, #123	; 0x7b
   132bc:	cmp	r3, #3
   132c0:	bhi	132cc <__assert_fail@plt+0x2148>
   132c4:	mov	r3, #1
   132c8:	b	132d0 <__assert_fail@plt+0x214c>
   132cc:	mov	r3, #0
   132d0:	mov	r0, r3
   132d4:	add	sp, fp, #0
   132d8:	pop	{fp}		; (ldr fp, [sp], #4)
   132dc:	bx	lr
   132e0:	push	{fp}		; (str fp, [sp, #-4]!)
   132e4:	add	fp, sp, #0
   132e8:	sub	sp, sp, #12
   132ec:	str	r0, [fp, #-8]
   132f0:	ldr	r3, [fp, #-8]
   132f4:	cmp	r3, #9
   132f8:	blt	13314 <__assert_fail@plt+0x2190>
   132fc:	cmp	r3, #13
   13300:	ble	1330c <__assert_fail@plt+0x2188>
   13304:	cmp	r3, #32
   13308:	bne	13314 <__assert_fail@plt+0x2190>
   1330c:	mov	r3, #1
   13310:	b	13318 <__assert_fail@plt+0x2194>
   13314:	mov	r3, #0
   13318:	mov	r0, r3
   1331c:	add	sp, fp, #0
   13320:	pop	{fp}		; (ldr fp, [sp], #4)
   13324:	bx	lr
   13328:	push	{fp}		; (str fp, [sp, #-4]!)
   1332c:	add	fp, sp, #0
   13330:	sub	sp, sp, #12
   13334:	str	r0, [fp, #-8]
   13338:	ldr	r3, [fp, #-8]
   1333c:	sub	r3, r3, #65	; 0x41
   13340:	cmp	r3, #25
   13344:	bhi	13350 <__assert_fail@plt+0x21cc>
   13348:	mov	r3, #1
   1334c:	b	13354 <__assert_fail@plt+0x21d0>
   13350:	mov	r3, #0
   13354:	mov	r0, r3
   13358:	add	sp, fp, #0
   1335c:	pop	{fp}		; (ldr fp, [sp], #4)
   13360:	bx	lr
   13364:	push	{fp}		; (str fp, [sp, #-4]!)
   13368:	add	fp, sp, #0
   1336c:	sub	sp, sp, #12
   13370:	str	r0, [fp, #-8]
   13374:	ldr	r3, [fp, #-8]
   13378:	sub	r3, r3, #48	; 0x30
   1337c:	cmp	r3, #54	; 0x36
   13380:	addls	pc, pc, r3, lsl #2
   13384:	b	1346c <__assert_fail@plt+0x22e8>
   13388:	b	13464 <__assert_fail@plt+0x22e0>
   1338c:	b	13464 <__assert_fail@plt+0x22e0>
   13390:	b	13464 <__assert_fail@plt+0x22e0>
   13394:	b	13464 <__assert_fail@plt+0x22e0>
   13398:	b	13464 <__assert_fail@plt+0x22e0>
   1339c:	b	13464 <__assert_fail@plt+0x22e0>
   133a0:	b	13464 <__assert_fail@plt+0x22e0>
   133a4:	b	13464 <__assert_fail@plt+0x22e0>
   133a8:	b	13464 <__assert_fail@plt+0x22e0>
   133ac:	b	13464 <__assert_fail@plt+0x22e0>
   133b0:	b	1346c <__assert_fail@plt+0x22e8>
   133b4:	b	1346c <__assert_fail@plt+0x22e8>
   133b8:	b	1346c <__assert_fail@plt+0x22e8>
   133bc:	b	1346c <__assert_fail@plt+0x22e8>
   133c0:	b	1346c <__assert_fail@plt+0x22e8>
   133c4:	b	1346c <__assert_fail@plt+0x22e8>
   133c8:	b	1346c <__assert_fail@plt+0x22e8>
   133cc:	b	13464 <__assert_fail@plt+0x22e0>
   133d0:	b	13464 <__assert_fail@plt+0x22e0>
   133d4:	b	13464 <__assert_fail@plt+0x22e0>
   133d8:	b	13464 <__assert_fail@plt+0x22e0>
   133dc:	b	13464 <__assert_fail@plt+0x22e0>
   133e0:	b	13464 <__assert_fail@plt+0x22e0>
   133e4:	b	1346c <__assert_fail@plt+0x22e8>
   133e8:	b	1346c <__assert_fail@plt+0x22e8>
   133ec:	b	1346c <__assert_fail@plt+0x22e8>
   133f0:	b	1346c <__assert_fail@plt+0x22e8>
   133f4:	b	1346c <__assert_fail@plt+0x22e8>
   133f8:	b	1346c <__assert_fail@plt+0x22e8>
   133fc:	b	1346c <__assert_fail@plt+0x22e8>
   13400:	b	1346c <__assert_fail@plt+0x22e8>
   13404:	b	1346c <__assert_fail@plt+0x22e8>
   13408:	b	1346c <__assert_fail@plt+0x22e8>
   1340c:	b	1346c <__assert_fail@plt+0x22e8>
   13410:	b	1346c <__assert_fail@plt+0x22e8>
   13414:	b	1346c <__assert_fail@plt+0x22e8>
   13418:	b	1346c <__assert_fail@plt+0x22e8>
   1341c:	b	1346c <__assert_fail@plt+0x22e8>
   13420:	b	1346c <__assert_fail@plt+0x22e8>
   13424:	b	1346c <__assert_fail@plt+0x22e8>
   13428:	b	1346c <__assert_fail@plt+0x22e8>
   1342c:	b	1346c <__assert_fail@plt+0x22e8>
   13430:	b	1346c <__assert_fail@plt+0x22e8>
   13434:	b	1346c <__assert_fail@plt+0x22e8>
   13438:	b	1346c <__assert_fail@plt+0x22e8>
   1343c:	b	1346c <__assert_fail@plt+0x22e8>
   13440:	b	1346c <__assert_fail@plt+0x22e8>
   13444:	b	1346c <__assert_fail@plt+0x22e8>
   13448:	b	1346c <__assert_fail@plt+0x22e8>
   1344c:	b	13464 <__assert_fail@plt+0x22e0>
   13450:	b	13464 <__assert_fail@plt+0x22e0>
   13454:	b	13464 <__assert_fail@plt+0x22e0>
   13458:	b	13464 <__assert_fail@plt+0x22e0>
   1345c:	b	13464 <__assert_fail@plt+0x22e0>
   13460:	b	13464 <__assert_fail@plt+0x22e0>
   13464:	mov	r3, #1
   13468:	b	13470 <__assert_fail@plt+0x22ec>
   1346c:	mov	r3, #0
   13470:	mov	r0, r3
   13474:	add	sp, fp, #0
   13478:	pop	{fp}		; (ldr fp, [sp], #4)
   1347c:	bx	lr
   13480:	push	{fp}		; (str fp, [sp, #-4]!)
   13484:	add	fp, sp, #0
   13488:	sub	sp, sp, #12
   1348c:	str	r0, [fp, #-8]
   13490:	ldr	r3, [fp, #-8]
   13494:	sub	r3, r3, #65	; 0x41
   13498:	cmp	r3, #25
   1349c:	bhi	134ac <__assert_fail@plt+0x2328>
   134a0:	ldr	r3, [fp, #-8]
   134a4:	add	r3, r3, #32
   134a8:	b	134b0 <__assert_fail@plt+0x232c>
   134ac:	ldr	r3, [fp, #-8]
   134b0:	mov	r0, r3
   134b4:	add	sp, fp, #0
   134b8:	pop	{fp}		; (ldr fp, [sp], #4)
   134bc:	bx	lr
   134c0:	push	{fp}		; (str fp, [sp, #-4]!)
   134c4:	add	fp, sp, #0
   134c8:	sub	sp, sp, #12
   134cc:	str	r0, [fp, #-8]
   134d0:	ldr	r3, [fp, #-8]
   134d4:	sub	r3, r3, #97	; 0x61
   134d8:	cmp	r3, #25
   134dc:	bhi	134ec <__assert_fail@plt+0x2368>
   134e0:	ldr	r3, [fp, #-8]
   134e4:	sub	r3, r3, #32
   134e8:	b	134f0 <__assert_fail@plt+0x236c>
   134ec:	ldr	r3, [fp, #-8]
   134f0:	mov	r0, r3
   134f4:	add	sp, fp, #0
   134f8:	pop	{fp}		; (ldr fp, [sp], #4)
   134fc:	bx	lr
   13500:	push	{fp, lr}
   13504:	add	fp, sp, #4
   13508:	sub	sp, sp, #8
   1350c:	str	r0, [fp, #-8]
   13510:	ldr	r1, [pc, #20]	; 1352c <__assert_fail@plt+0x23a8>
   13514:	ldr	r0, [fp, #-8]
   13518:	bl	13530 <__assert_fail@plt+0x23ac>
   1351c:	mov	r3, r0
   13520:	mov	r0, r3
   13524:	sub	sp, fp, #4
   13528:	pop	{fp, pc}
   1352c:	andeq	sl, r2, r4, ror #3
   13530:	push	{fp, lr}
   13534:	add	fp, sp, #4
   13538:	sub	sp, sp, #24
   1353c:	str	r0, [fp, #-24]	; 0xffffffe8
   13540:	str	r1, [fp, #-28]	; 0xffffffe4
   13544:	mov	r3, #0
   13548:	str	r3, [fp, #-8]
   1354c:	mov	r3, #0
   13550:	str	r3, [fp, #-16]
   13554:	ldr	r3, [pc, #180]	; 13610 <__assert_fail@plt+0x248c>
   13558:	mov	r2, #2
   1355c:	str	r2, [r3]
   13560:	sub	r3, fp, #16
   13564:	ldr	r2, [pc, #164]	; 13610 <__assert_fail@plt+0x248c>
   13568:	mov	r1, #0
   1356c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13570:	bl	1113c <getaddrinfo@plt>
   13574:	str	r0, [fp, #-12]
   13578:	ldr	r3, [fp, #-12]
   1357c:	cmp	r3, #0
   13580:	bne	135e8 <__assert_fail@plt+0x2464>
   13584:	ldr	r3, [fp, #-16]
   13588:	ldr	r3, [r3, #24]
   1358c:	cmp	r3, #0
   13590:	beq	135a0 <__assert_fail@plt+0x241c>
   13594:	ldr	r3, [fp, #-16]
   13598:	ldr	r3, [r3, #24]
   1359c:	b	135a4 <__assert_fail@plt+0x2420>
   135a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   135a4:	mov	r0, r3
   135a8:	bl	10f44 <strdup@plt>
   135ac:	mov	r3, r0
   135b0:	str	r3, [fp, #-8]
   135b4:	ldr	r3, [fp, #-8]
   135b8:	cmp	r3, #0
   135bc:	bne	135d8 <__assert_fail@plt+0x2454>
   135c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   135c4:	cmp	r3, #0
   135c8:	beq	135d8 <__assert_fail@plt+0x2454>
   135cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   135d0:	mvn	r2, #9
   135d4:	str	r2, [r3]
   135d8:	ldr	r3, [fp, #-16]
   135dc:	mov	r0, r3
   135e0:	bl	11130 <freeaddrinfo@plt>
   135e4:	b	13600 <__assert_fail@plt+0x247c>
   135e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   135ec:	cmp	r3, #0
   135f0:	beq	13600 <__assert_fail@plt+0x247c>
   135f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   135f8:	ldr	r2, [fp, #-12]
   135fc:	str	r2, [r3]
   13600:	ldr	r3, [fp, #-8]
   13604:	mov	r0, r3
   13608:	sub	sp, fp, #4
   1360c:	pop	{fp, pc}
   13610:	andeq	sl, r2, r8, ror #3
   13614:	push	{fp, lr}
   13618:	add	fp, sp, #4
   1361c:	ldr	r3, [pc, #20]	; 13638 <__assert_fail@plt+0x24b4>
   13620:	ldr	r3, [r3]
   13624:	mov	r0, r3
   13628:	bl	10ee4 <gai_strerror@plt>
   1362c:	mov	r3, r0
   13630:	mov	r0, r3
   13634:	pop	{fp, pc}
   13638:	andeq	sl, r2, r4, ror #3
   1363c:	push	{fp}		; (str fp, [sp, #-4]!)
   13640:	add	fp, sp, #0
   13644:	sub	sp, sp, #12
   13648:	str	r0, [fp, #-8]
   1364c:	ldr	r2, [pc, #20]	; 13668 <__assert_fail@plt+0x24e4>
   13650:	ldr	r3, [fp, #-8]
   13654:	str	r3, [r2]
   13658:	nop			; (mov r0, r0)
   1365c:	add	sp, fp, #0
   13660:	pop	{fp}		; (ldr fp, [sp], #4)
   13664:	bx	lr
   13668:	andeq	sl, r2, r8, lsl #4
   1366c:	push	{fp}		; (str fp, [sp, #-4]!)
   13670:	add	fp, sp, #0
   13674:	sub	sp, sp, #12
   13678:	mov	r3, r0
   1367c:	strb	r3, [fp, #-5]
   13680:	ldr	r2, [pc, #20]	; 1369c <__assert_fail@plt+0x2518>
   13684:	ldrb	r3, [fp, #-5]
   13688:	strb	r3, [r2]
   1368c:	nop			; (mov r0, r0)
   13690:	add	sp, fp, #0
   13694:	pop	{fp}		; (ldr fp, [sp], #4)
   13698:	bx	lr
   1369c:	andeq	sl, r2, ip, lsl #4
   136a0:	push	{r4, fp, lr}
   136a4:	add	fp, sp, #8
   136a8:	sub	sp, sp, #20
   136ac:	ldr	r3, [pc, #256]	; 137b4 <__assert_fail@plt+0x2630>
   136b0:	ldr	r3, [r3]
   136b4:	mov	r0, r3
   136b8:	bl	17ba4 <__assert_fail@plt+0x6a20>
   136bc:	mov	r3, r0
   136c0:	cmp	r3, #0
   136c4:	beq	1377c <__assert_fail@plt+0x25f8>
   136c8:	ldr	r3, [pc, #232]	; 137b8 <__assert_fail@plt+0x2634>
   136cc:	ldrb	r3, [r3]
   136d0:	eor	r3, r3, #1
   136d4:	uxtb	r3, r3
   136d8:	cmp	r3, #0
   136dc:	bne	136f4 <__assert_fail@plt+0x2570>
   136e0:	bl	11094 <__errno_location@plt>
   136e4:	mov	r3, r0
   136e8:	ldr	r3, [r3]
   136ec:	cmp	r3, #32
   136f0:	beq	1377c <__assert_fail@plt+0x25f8>
   136f4:	ldr	r0, [pc, #192]	; 137bc <__assert_fail@plt+0x2638>
   136f8:	bl	11058 <gettext@plt>
   136fc:	str	r0, [fp, #-16]
   13700:	ldr	r3, [pc, #184]	; 137c0 <__assert_fail@plt+0x263c>
   13704:	ldr	r3, [r3]
   13708:	cmp	r3, #0
   1370c:	beq	13750 <__assert_fail@plt+0x25cc>
   13710:	bl	11094 <__errno_location@plt>
   13714:	mov	r3, r0
   13718:	ldr	r4, [r3]
   1371c:	ldr	r3, [pc, #156]	; 137c0 <__assert_fail@plt+0x263c>
   13720:	ldr	r3, [r3]
   13724:	mov	r0, r3
   13728:	bl	15e74 <__assert_fail@plt+0x4cf0>
   1372c:	mov	r2, r0
   13730:	ldr	r3, [fp, #-16]
   13734:	str	r3, [sp]
   13738:	mov	r3, r2
   1373c:	ldr	r2, [pc, #128]	; 137c4 <__assert_fail@plt+0x2640>
   13740:	mov	r1, r4
   13744:	mov	r0, #0
   13748:	bl	10fc8 <error@plt>
   1374c:	b	1376c <__assert_fail@plt+0x25e8>
   13750:	bl	11094 <__errno_location@plt>
   13754:	mov	r3, r0
   13758:	ldr	r1, [r3]
   1375c:	ldr	r3, [fp, #-16]
   13760:	ldr	r2, [pc, #96]	; 137c8 <__assert_fail@plt+0x2644>
   13764:	mov	r0, #0
   13768:	bl	10fc8 <error@plt>
   1376c:	ldr	r3, [pc, #88]	; 137cc <__assert_fail@plt+0x2648>
   13770:	ldr	r3, [r3]
   13774:	mov	r0, r3
   13778:	bl	10ef0 <_exit@plt>
   1377c:	ldr	r3, [pc, #76]	; 137d0 <__assert_fail@plt+0x264c>
   13780:	ldr	r3, [r3]
   13784:	mov	r0, r3
   13788:	bl	17ba4 <__assert_fail@plt+0x6a20>
   1378c:	mov	r3, r0
   13790:	cmp	r3, #0
   13794:	beq	137a8 <__assert_fail@plt+0x2624>
   13798:	ldr	r3, [pc, #44]	; 137cc <__assert_fail@plt+0x2648>
   1379c:	ldr	r3, [r3]
   137a0:	mov	r0, r3
   137a4:	bl	10ef0 <_exit@plt>
   137a8:	nop			; (mov r0, r0)
   137ac:	sub	sp, fp, #8
   137b0:	pop	{r4, fp, pc}
   137b4:	andeq	sl, r2, r4, lsl #3
   137b8:	andeq	sl, r2, ip, lsl #4
   137bc:	andeq	r9, r1, r4, lsr #6
   137c0:	andeq	sl, r2, r8, lsl #4
   137c4:	andeq	r9, r1, r0, lsr r3
   137c8:	andeq	r9, r1, r8, lsr r3
   137cc:	andeq	sl, r2, r8, lsr #2
   137d0:	andeq	sl, r2, r0, lsl #3
   137d4:	push	{r4, fp, lr}
   137d8:	add	fp, sp, #8
   137dc:	sub	sp, sp, #20
   137e0:	str	r0, [fp, #-24]	; 0xffffffe8
   137e4:	bl	11094 <__errno_location@plt>
   137e8:	mov	r3, r0
   137ec:	ldr	r3, [r3]
   137f0:	str	r3, [fp, #-20]	; 0xffffffec
   137f4:	bl	11094 <__errno_location@plt>
   137f8:	mov	r3, r0
   137fc:	ldr	r3, [r3]
   13800:	str	r3, [fp, #-16]
   13804:	bl	11094 <__errno_location@plt>
   13808:	mov	r2, r0
   1380c:	mov	r3, #0
   13810:	str	r3, [r2]
   13814:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13818:	bl	10ed8 <free@plt>
   1381c:	bl	11094 <__errno_location@plt>
   13820:	mov	r4, r0
   13824:	bl	11094 <__errno_location@plt>
   13828:	mov	r3, r0
   1382c:	ldr	r3, [r3]
   13830:	cmp	r3, #0
   13834:	moveq	r3, #1
   13838:	movne	r3, #0
   1383c:	uxtb	r3, r3
   13840:	lsl	r3, r3, #2
   13844:	sub	r2, fp, #12
   13848:	add	r3, r2, r3
   1384c:	ldr	r3, [r3, #-8]
   13850:	str	r3, [r4]
   13854:	nop			; (mov r0, r0)
   13858:	sub	sp, fp, #8
   1385c:	pop	{r4, fp, pc}
   13860:	push	{fp, lr}
   13864:	add	fp, sp, #4
   13868:	sub	sp, sp, #272	; 0x110
   1386c:	str	r0, [fp, #-272]	; 0xfffffef0
   13870:	sub	r3, fp, #264	; 0x108
   13874:	ldr	r2, [pc, #116]	; 138f0 <__assert_fail@plt+0x276c>
   13878:	mov	r1, r3
   1387c:	ldr	r0, [fp, #-272]	; 0xfffffef0
   13880:	bl	1652c <__assert_fail@plt+0x53a8>
   13884:	mov	r3, r0
   13888:	cmp	r3, #0
   1388c:	beq	13898 <__assert_fail@plt+0x2714>
   13890:	mov	r3, #0
   13894:	b	138e4 <__assert_fail@plt+0x2760>
   13898:	sub	r3, fp, #264	; 0x108
   1389c:	ldr	r1, [pc, #80]	; 138f4 <__assert_fail@plt+0x2770>
   138a0:	mov	r0, r3
   138a4:	bl	10ea8 <strcmp@plt>
   138a8:	mov	r3, r0
   138ac:	cmp	r3, #0
   138b0:	beq	138d8 <__assert_fail@plt+0x2754>
   138b4:	sub	r3, fp, #264	; 0x108
   138b8:	ldr	r1, [pc, #56]	; 138f8 <__assert_fail@plt+0x2774>
   138bc:	mov	r0, r3
   138c0:	bl	10ea8 <strcmp@plt>
   138c4:	mov	r3, r0
   138c8:	cmp	r3, #0
   138cc:	beq	138d8 <__assert_fail@plt+0x2754>
   138d0:	mov	r3, #1
   138d4:	b	138dc <__assert_fail@plt+0x2758>
   138d8:	mov	r3, #0
   138dc:	and	r3, r3, #1
   138e0:	uxtb	r3, r3
   138e4:	mov	r0, r3
   138e8:	sub	sp, fp, #4
   138ec:	pop	{fp, pc}
   138f0:	andeq	r0, r0, r1, lsl #2
   138f4:	andeq	r9, r1, ip, lsr r3
   138f8:	andeq	r9, r1, r0, asr #6
   138fc:	push	{fp, lr}
   13900:	add	fp, sp, #4
   13904:	sub	sp, sp, #24
   13908:	strd	r0, [fp, #-20]	; 0xffffffec
   1390c:	str	r2, [fp, #-24]	; 0xffffffe8
   13910:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13914:	add	r3, r3, #20
   13918:	str	r3, [fp, #-8]
   1391c:	ldr	r3, [fp, #-8]
   13920:	mov	r2, #0
   13924:	strb	r2, [r3]
   13928:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1392c:	cmp	r2, #0
   13930:	sbcs	r3, r3, #0
   13934:	bge	139ac <__assert_fail@plt+0x2828>
   13938:	ldr	r3, [fp, #-8]
   1393c:	sub	r3, r3, #1
   13940:	str	r3, [fp, #-8]
   13944:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13948:	mov	r2, #10
   1394c:	mov	r3, #0
   13950:	bl	18640 <__assert_fail@plt+0x74bc>
   13954:	uxtb	r3, r2
   13958:	rsb	r3, r3, #48	; 0x30
   1395c:	uxtb	r2, r3
   13960:	ldr	r3, [fp, #-8]
   13964:	strb	r2, [r3]
   13968:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1396c:	mov	r2, #10
   13970:	mov	r3, #0
   13974:	bl	18640 <__assert_fail@plt+0x74bc>
   13978:	mov	r2, r0
   1397c:	mov	r3, r1
   13980:	strd	r2, [fp, #-20]	; 0xffffffec
   13984:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13988:	orrs	r3, r2, r3
   1398c:	bne	13938 <__assert_fail@plt+0x27b4>
   13990:	ldr	r3, [fp, #-8]
   13994:	sub	r3, r3, #1
   13998:	str	r3, [fp, #-8]
   1399c:	ldr	r3, [fp, #-8]
   139a0:	mov	r2, #45	; 0x2d
   139a4:	strb	r2, [r3]
   139a8:	b	13a04 <__assert_fail@plt+0x2880>
   139ac:	ldr	r3, [fp, #-8]
   139b0:	sub	r3, r3, #1
   139b4:	str	r3, [fp, #-8]
   139b8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   139bc:	mov	r2, #10
   139c0:	mov	r3, #0
   139c4:	bl	18640 <__assert_fail@plt+0x74bc>
   139c8:	uxtb	r3, r2
   139cc:	add	r3, r3, #48	; 0x30
   139d0:	uxtb	r2, r3
   139d4:	ldr	r3, [fp, #-8]
   139d8:	strb	r2, [r3]
   139dc:	ldrd	r0, [fp, #-20]	; 0xffffffec
   139e0:	mov	r2, #10
   139e4:	mov	r3, #0
   139e8:	bl	18640 <__assert_fail@plt+0x74bc>
   139ec:	mov	r2, r0
   139f0:	mov	r3, r1
   139f4:	strd	r2, [fp, #-20]	; 0xffffffec
   139f8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   139fc:	orrs	r3, r2, r3
   13a00:	bne	139ac <__assert_fail@plt+0x2828>
   13a04:	ldr	r3, [fp, #-8]
   13a08:	mov	r0, r3
   13a0c:	sub	sp, fp, #4
   13a10:	pop	{fp, pc}
   13a14:	push	{fp, lr}
   13a18:	add	fp, sp, #4
   13a1c:	sub	sp, sp, #16
   13a20:	str	r0, [fp, #-16]
   13a24:	ldr	r3, [fp, #-16]
   13a28:	cmp	r3, #0
   13a2c:	bne	13a4c <__assert_fail@plt+0x28c8>
   13a30:	ldr	r3, [pc, #220]	; 13b14 <__assert_fail@plt+0x2990>
   13a34:	ldr	r3, [r3]
   13a38:	mov	r2, #55	; 0x37
   13a3c:	mov	r1, #1
   13a40:	ldr	r0, [pc, #208]	; 13b18 <__assert_fail@plt+0x2994>
   13a44:	bl	10f80 <fwrite@plt>
   13a48:	bl	1116c <abort@plt>
   13a4c:	mov	r1, #47	; 0x2f
   13a50:	ldr	r0, [fp, #-16]
   13a54:	bl	1110c <strrchr@plt>
   13a58:	str	r0, [fp, #-8]
   13a5c:	ldr	r3, [fp, #-8]
   13a60:	cmp	r3, #0
   13a64:	beq	13a74 <__assert_fail@plt+0x28f0>
   13a68:	ldr	r3, [fp, #-8]
   13a6c:	add	r3, r3, #1
   13a70:	b	13a78 <__assert_fail@plt+0x28f4>
   13a74:	ldr	r3, [fp, #-16]
   13a78:	str	r3, [fp, #-12]
   13a7c:	ldr	r2, [fp, #-12]
   13a80:	ldr	r3, [fp, #-16]
   13a84:	sub	r3, r2, r3
   13a88:	cmp	r3, #6
   13a8c:	ble	13af0 <__assert_fail@plt+0x296c>
   13a90:	ldr	r3, [fp, #-12]
   13a94:	sub	r3, r3, #7
   13a98:	mov	r2, #7
   13a9c:	ldr	r1, [pc, #120]	; 13b1c <__assert_fail@plt+0x2998>
   13aa0:	mov	r0, r3
   13aa4:	bl	11160 <strncmp@plt>
   13aa8:	mov	r3, r0
   13aac:	cmp	r3, #0
   13ab0:	bne	13af0 <__assert_fail@plt+0x296c>
   13ab4:	ldr	r3, [fp, #-12]
   13ab8:	str	r3, [fp, #-16]
   13abc:	mov	r2, #3
   13ac0:	ldr	r1, [pc, #88]	; 13b20 <__assert_fail@plt+0x299c>
   13ac4:	ldr	r0, [fp, #-12]
   13ac8:	bl	11160 <strncmp@plt>
   13acc:	mov	r3, r0
   13ad0:	cmp	r3, #0
   13ad4:	bne	13af0 <__assert_fail@plt+0x296c>
   13ad8:	ldr	r3, [fp, #-12]
   13adc:	add	r3, r3, #3
   13ae0:	str	r3, [fp, #-16]
   13ae4:	ldr	r2, [pc, #56]	; 13b24 <__assert_fail@plt+0x29a0>
   13ae8:	ldr	r3, [fp, #-16]
   13aec:	str	r3, [r2]
   13af0:	ldr	r2, [pc, #48]	; 13b28 <__assert_fail@plt+0x29a4>
   13af4:	ldr	r3, [fp, #-16]
   13af8:	str	r3, [r2]
   13afc:	ldr	r2, [pc, #40]	; 13b2c <__assert_fail@plt+0x29a8>
   13b00:	ldr	r3, [fp, #-16]
   13b04:	str	r3, [r2]
   13b08:	nop			; (mov r0, r0)
   13b0c:	sub	sp, fp, #4
   13b10:	pop	{fp, pc}
   13b14:	andeq	sl, r2, r0, lsl #3
   13b18:	andeq	r9, r1, r8, asr #6
   13b1c:	andeq	r9, r1, r0, lsl #7
   13b20:	andeq	r9, r1, r8, lsl #7
   13b24:	andeq	sl, r2, r0, ror r1
   13b28:	andeq	sl, r2, r0, lsl r2
   13b2c:	andeq	sl, r2, r4, ror r1
   13b30:	push	{fp, lr}
   13b34:	add	fp, sp, #4
   13b38:	sub	sp, sp, #16
   13b3c:	str	r0, [fp, #-16]
   13b40:	bl	11094 <__errno_location@plt>
   13b44:	mov	r3, r0
   13b48:	ldr	r3, [r3]
   13b4c:	str	r3, [fp, #-8]
   13b50:	ldr	r3, [fp, #-16]
   13b54:	cmp	r3, #0
   13b58:	beq	13b64 <__assert_fail@plt+0x29e0>
   13b5c:	ldr	r3, [fp, #-16]
   13b60:	b	13b68 <__assert_fail@plt+0x29e4>
   13b64:	ldr	r3, [pc, #48]	; 13b9c <__assert_fail@plt+0x2a18>
   13b68:	mov	r1, #48	; 0x30
   13b6c:	mov	r0, r3
   13b70:	bl	17770 <__assert_fail@plt+0x65ec>
   13b74:	mov	r3, r0
   13b78:	str	r3, [fp, #-12]
   13b7c:	bl	11094 <__errno_location@plt>
   13b80:	mov	r2, r0
   13b84:	ldr	r3, [fp, #-8]
   13b88:	str	r3, [r2]
   13b8c:	ldr	r3, [fp, #-12]
   13b90:	mov	r0, r3
   13b94:	sub	sp, fp, #4
   13b98:	pop	{fp, pc}
   13b9c:	andeq	sl, r2, r4, lsl r2
   13ba0:	push	{fp}		; (str fp, [sp, #-4]!)
   13ba4:	add	fp, sp, #0
   13ba8:	sub	sp, sp, #12
   13bac:	str	r0, [fp, #-8]
   13bb0:	ldr	r3, [fp, #-8]
   13bb4:	cmp	r3, #0
   13bb8:	beq	13bc4 <__assert_fail@plt+0x2a40>
   13bbc:	ldr	r3, [fp, #-8]
   13bc0:	b	13bc8 <__assert_fail@plt+0x2a44>
   13bc4:	ldr	r3, [pc, #16]	; 13bdc <__assert_fail@plt+0x2a58>
   13bc8:	ldr	r3, [r3]
   13bcc:	mov	r0, r3
   13bd0:	add	sp, fp, #0
   13bd4:	pop	{fp}		; (ldr fp, [sp], #4)
   13bd8:	bx	lr
   13bdc:	andeq	sl, r2, r4, lsl r2
   13be0:	push	{fp}		; (str fp, [sp, #-4]!)
   13be4:	add	fp, sp, #0
   13be8:	sub	sp, sp, #12
   13bec:	str	r0, [fp, #-8]
   13bf0:	str	r1, [fp, #-12]
   13bf4:	ldr	r3, [fp, #-8]
   13bf8:	cmp	r3, #0
   13bfc:	beq	13c08 <__assert_fail@plt+0x2a84>
   13c00:	ldr	r3, [fp, #-8]
   13c04:	b	13c0c <__assert_fail@plt+0x2a88>
   13c08:	ldr	r3, [pc, #20]	; 13c24 <__assert_fail@plt+0x2aa0>
   13c0c:	ldr	r2, [fp, #-12]
   13c10:	str	r2, [r3]
   13c14:	nop			; (mov r0, r0)
   13c18:	add	sp, fp, #0
   13c1c:	pop	{fp}		; (ldr fp, [sp], #4)
   13c20:	bx	lr
   13c24:	andeq	sl, r2, r4, lsl r2
   13c28:	push	{fp}		; (str fp, [sp, #-4]!)
   13c2c:	add	fp, sp, #0
   13c30:	sub	sp, sp, #36	; 0x24
   13c34:	str	r0, [fp, #-24]	; 0xffffffe8
   13c38:	mov	r3, r1
   13c3c:	str	r2, [fp, #-32]	; 0xffffffe0
   13c40:	strb	r3, [fp, #-25]	; 0xffffffe7
   13c44:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13c48:	strb	r3, [fp, #-5]
   13c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c50:	cmp	r3, #0
   13c54:	beq	13c60 <__assert_fail@plt+0x2adc>
   13c58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c5c:	b	13c64 <__assert_fail@plt+0x2ae0>
   13c60:	ldr	r3, [pc, #124]	; 13ce4 <__assert_fail@plt+0x2b60>
   13c64:	add	r2, r3, #8
   13c68:	ldrb	r3, [fp, #-5]
   13c6c:	lsr	r3, r3, #5
   13c70:	uxtb	r3, r3
   13c74:	lsl	r3, r3, #2
   13c78:	add	r3, r2, r3
   13c7c:	str	r3, [fp, #-12]
   13c80:	ldrb	r3, [fp, #-5]
   13c84:	and	r3, r3, #31
   13c88:	str	r3, [fp, #-16]
   13c8c:	ldr	r3, [fp, #-12]
   13c90:	ldr	r2, [r3]
   13c94:	ldr	r3, [fp, #-16]
   13c98:	lsr	r3, r2, r3
   13c9c:	and	r3, r3, #1
   13ca0:	str	r3, [fp, #-20]	; 0xffffffec
   13ca4:	ldr	r3, [fp, #-12]
   13ca8:	ldr	r3, [r3]
   13cac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13cb0:	and	r1, r2, #1
   13cb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cb8:	eor	r1, r1, r2
   13cbc:	ldr	r2, [fp, #-16]
   13cc0:	lsl	r2, r1, r2
   13cc4:	eor	r2, r2, r3
   13cc8:	ldr	r3, [fp, #-12]
   13ccc:	str	r2, [r3]
   13cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cd4:	mov	r0, r3
   13cd8:	add	sp, fp, #0
   13cdc:	pop	{fp}		; (ldr fp, [sp], #4)
   13ce0:	bx	lr
   13ce4:	andeq	sl, r2, r4, lsl r2
   13ce8:	push	{fp}		; (str fp, [sp, #-4]!)
   13cec:	add	fp, sp, #0
   13cf0:	sub	sp, sp, #20
   13cf4:	str	r0, [fp, #-16]
   13cf8:	str	r1, [fp, #-20]	; 0xffffffec
   13cfc:	ldr	r3, [fp, #-16]
   13d00:	cmp	r3, #0
   13d04:	bne	13d10 <__assert_fail@plt+0x2b8c>
   13d08:	ldr	r3, [pc, #44]	; 13d3c <__assert_fail@plt+0x2bb8>
   13d0c:	str	r3, [fp, #-16]
   13d10:	ldr	r3, [fp, #-16]
   13d14:	ldr	r3, [r3, #4]
   13d18:	str	r3, [fp, #-8]
   13d1c:	ldr	r3, [fp, #-16]
   13d20:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d24:	str	r2, [r3, #4]
   13d28:	ldr	r3, [fp, #-8]
   13d2c:	mov	r0, r3
   13d30:	add	sp, fp, #0
   13d34:	pop	{fp}		; (ldr fp, [sp], #4)
   13d38:	bx	lr
   13d3c:	andeq	sl, r2, r4, lsl r2
   13d40:	push	{fp, lr}
   13d44:	add	fp, sp, #4
   13d48:	sub	sp, sp, #16
   13d4c:	str	r0, [fp, #-8]
   13d50:	str	r1, [fp, #-12]
   13d54:	str	r2, [fp, #-16]
   13d58:	ldr	r3, [fp, #-8]
   13d5c:	cmp	r3, #0
   13d60:	bne	13d6c <__assert_fail@plt+0x2be8>
   13d64:	ldr	r3, [pc, #76]	; 13db8 <__assert_fail@plt+0x2c34>
   13d68:	str	r3, [fp, #-8]
   13d6c:	ldr	r3, [fp, #-8]
   13d70:	mov	r2, #10
   13d74:	str	r2, [r3]
   13d78:	ldr	r3, [fp, #-12]
   13d7c:	cmp	r3, #0
   13d80:	beq	13d90 <__assert_fail@plt+0x2c0c>
   13d84:	ldr	r3, [fp, #-16]
   13d88:	cmp	r3, #0
   13d8c:	bne	13d94 <__assert_fail@plt+0x2c10>
   13d90:	bl	1116c <abort@plt>
   13d94:	ldr	r3, [fp, #-8]
   13d98:	ldr	r2, [fp, #-12]
   13d9c:	str	r2, [r3, #40]	; 0x28
   13da0:	ldr	r3, [fp, #-8]
   13da4:	ldr	r2, [fp, #-16]
   13da8:	str	r2, [r3, #44]	; 0x2c
   13dac:	nop			; (mov r0, r0)
   13db0:	sub	sp, fp, #4
   13db4:	pop	{fp, pc}
   13db8:	andeq	sl, r2, r4, lsl r2
   13dbc:	push	{fp, lr}
   13dc0:	add	fp, sp, #4
   13dc4:	sub	sp, sp, #56	; 0x38
   13dc8:	str	r0, [fp, #-56]	; 0xffffffc8
   13dcc:	str	r1, [fp, #-60]	; 0xffffffc4
   13dd0:	sub	r3, fp, #52	; 0x34
   13dd4:	mov	r2, #48	; 0x30
   13dd8:	mov	r1, #0
   13ddc:	mov	r0, r3
   13de0:	bl	110ac <memset@plt>
   13de4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13de8:	cmp	r3, #10
   13dec:	bne	13df4 <__assert_fail@plt+0x2c70>
   13df0:	bl	1116c <abort@plt>
   13df4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13df8:	str	r3, [fp, #-52]	; 0xffffffcc
   13dfc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13e00:	mov	lr, r3
   13e04:	sub	ip, fp, #52	; 0x34
   13e08:	ldm	ip!, {r0, r1, r2, r3}
   13e0c:	stmia	lr!, {r0, r1, r2, r3}
   13e10:	ldm	ip!, {r0, r1, r2, r3}
   13e14:	stmia	lr!, {r0, r1, r2, r3}
   13e18:	ldm	ip, {r0, r1, r2, r3}
   13e1c:	stm	lr, {r0, r1, r2, r3}
   13e20:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e24:	sub	sp, fp, #4
   13e28:	pop	{fp, pc}
   13e2c:	push	{fp, lr}
   13e30:	add	fp, sp, #4
   13e34:	sub	sp, sp, #16
   13e38:	str	r0, [fp, #-16]
   13e3c:	str	r1, [fp, #-20]	; 0xffffffec
   13e40:	ldr	r0, [fp, #-16]
   13e44:	bl	11058 <gettext@plt>
   13e48:	str	r0, [fp, #-8]
   13e4c:	ldr	r2, [fp, #-8]
   13e50:	ldr	r3, [fp, #-16]
   13e54:	cmp	r2, r3
   13e58:	beq	13e64 <__assert_fail@plt+0x2ce0>
   13e5c:	ldr	r3, [fp, #-8]
   13e60:	b	13ef4 <__assert_fail@plt+0x2d70>
   13e64:	bl	1803c <__assert_fail@plt+0x6eb8>
   13e68:	str	r0, [fp, #-12]
   13e6c:	ldr	r1, [pc, #140]	; 13f00 <__assert_fail@plt+0x2d7c>
   13e70:	ldr	r0, [fp, #-12]
   13e74:	bl	17b0c <__assert_fail@plt+0x6988>
   13e78:	mov	r3, r0
   13e7c:	cmp	r3, #0
   13e80:	bne	13ea4 <__assert_fail@plt+0x2d20>
   13e84:	ldr	r3, [fp, #-16]
   13e88:	ldrb	r3, [r3]
   13e8c:	cmp	r3, #96	; 0x60
   13e90:	bne	13e9c <__assert_fail@plt+0x2d18>
   13e94:	ldr	r3, [pc, #104]	; 13f04 <__assert_fail@plt+0x2d80>
   13e98:	b	13ef4 <__assert_fail@plt+0x2d70>
   13e9c:	ldr	r3, [pc, #100]	; 13f08 <__assert_fail@plt+0x2d84>
   13ea0:	b	13ef4 <__assert_fail@plt+0x2d70>
   13ea4:	ldr	r1, [pc, #96]	; 13f0c <__assert_fail@plt+0x2d88>
   13ea8:	ldr	r0, [fp, #-12]
   13eac:	bl	17b0c <__assert_fail@plt+0x6988>
   13eb0:	mov	r3, r0
   13eb4:	cmp	r3, #0
   13eb8:	bne	13edc <__assert_fail@plt+0x2d58>
   13ebc:	ldr	r3, [fp, #-16]
   13ec0:	ldrb	r3, [r3]
   13ec4:	cmp	r3, #96	; 0x60
   13ec8:	bne	13ed4 <__assert_fail@plt+0x2d50>
   13ecc:	ldr	r3, [pc, #60]	; 13f10 <__assert_fail@plt+0x2d8c>
   13ed0:	b	13ef4 <__assert_fail@plt+0x2d70>
   13ed4:	ldr	r3, [pc, #56]	; 13f14 <__assert_fail@plt+0x2d90>
   13ed8:	b	13ef4 <__assert_fail@plt+0x2d70>
   13edc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ee0:	cmp	r3, #9
   13ee4:	bne	13ef0 <__assert_fail@plt+0x2d6c>
   13ee8:	ldr	r3, [pc, #40]	; 13f18 <__assert_fail@plt+0x2d94>
   13eec:	b	13ef4 <__assert_fail@plt+0x2d70>
   13ef0:	ldr	r3, [pc, #36]	; 13f1c <__assert_fail@plt+0x2d98>
   13ef4:	mov	r0, r3
   13ef8:	sub	sp, fp, #4
   13efc:	pop	{fp, pc}
   13f00:	andeq	r9, r1, r8, asr #8
   13f04:	andeq	r9, r1, r0, asr r4
   13f08:	andeq	r9, r1, r4, asr r4
   13f0c:	andeq	r9, r1, r8, asr r4
   13f10:	andeq	r9, r1, r0, ror #8
   13f14:	andeq	r9, r1, r4, ror #8
   13f18:	andeq	r9, r1, r8, ror #8
   13f1c:	andeq	r9, r1, ip, ror #8
   13f20:	push	{r4, fp, lr}
   13f24:	add	fp, sp, #8
   13f28:	sub	sp, sp, #116	; 0x74
   13f2c:	str	r0, [fp, #-88]	; 0xffffffa8
   13f30:	str	r1, [fp, #-92]	; 0xffffffa4
   13f34:	str	r2, [fp, #-96]	; 0xffffffa0
   13f38:	str	r3, [fp, #-100]	; 0xffffff9c
   13f3c:	mov	r3, #0
   13f40:	str	r3, [fp, #-20]	; 0xffffffec
   13f44:	mov	r3, #0
   13f48:	str	r3, [fp, #-24]	; 0xffffffe8
   13f4c:	mov	r3, #0
   13f50:	str	r3, [fp, #-28]	; 0xffffffe4
   13f54:	mov	r3, #0
   13f58:	str	r3, [fp, #-32]	; 0xffffffe0
   13f5c:	mov	r3, #0
   13f60:	strb	r3, [fp, #-33]	; 0xffffffdf
   13f64:	bl	10f98 <__ctype_get_mb_cur_max@plt>
   13f68:	mov	r3, r0
   13f6c:	cmp	r3, #1
   13f70:	moveq	r3, #1
   13f74:	movne	r3, #0
   13f78:	strb	r3, [fp, #-57]	; 0xffffffc7
   13f7c:	ldr	r3, [fp, #8]
   13f80:	and	r3, r3, #2
   13f84:	cmp	r3, #0
   13f88:	movne	r3, #1
   13f8c:	moveq	r3, #0
   13f90:	strb	r3, [fp, #-34]	; 0xffffffde
   13f94:	mov	r3, #0
   13f98:	strb	r3, [fp, #-35]	; 0xffffffdd
   13f9c:	mov	r3, #0
   13fa0:	strb	r3, [fp, #-36]	; 0xffffffdc
   13fa4:	mov	r3, #1
   13fa8:	strb	r3, [fp, #-37]	; 0xffffffdb
   13fac:	ldr	r3, [fp, #4]
   13fb0:	cmp	r3, #10
   13fb4:	ldrls	pc, [pc, r3, lsl #2]
   13fb8:	b	141c0 <__assert_fail@plt+0x303c>
   13fbc:			; <UNDEFINED> instruction: 0x000141b4
   13fc0:	andeq	r4, r1, r0, lsr r1
   13fc4:	andeq	r4, r1, r4, asr r1
   13fc8:	andeq	r4, r1, r8, lsr #2
   13fcc:	andeq	r4, r1, r8, lsr r1
   13fd0:	strdeq	r3, [r1], -r8
   13fd4:	andeq	r3, r1, r8, ror #31
   13fd8:	andeq	r4, r1, r8, asr r0
   13fdc:	andeq	r4, r1, ip, rrx
   13fe0:	andeq	r4, r1, ip, rrx
   13fe4:	andeq	r4, r1, ip, rrx
   13fe8:	mov	r3, #5
   13fec:	str	r3, [fp, #4]
   13ff0:	mov	r3, #1
   13ff4:	strb	r3, [fp, #-34]	; 0xffffffde
   13ff8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ffc:	eor	r3, r3, #1
   14000:	uxtb	r3, r3
   14004:	cmp	r3, #0
   14008:	beq	1403c <__assert_fail@plt+0x2eb8>
   1400c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14010:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14014:	cmp	r2, r3
   14018:	bcs	14030 <__assert_fail@plt+0x2eac>
   1401c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14020:	ldr	r3, [fp, #-20]	; 0xffffffec
   14024:	add	r3, r2, r3
   14028:	mov	r2, #34	; 0x22
   1402c:	strb	r2, [r3]
   14030:	ldr	r3, [fp, #-20]	; 0xffffffec
   14034:	add	r3, r3, #1
   14038:	str	r3, [fp, #-20]	; 0xffffffec
   1403c:	mov	r3, #1
   14040:	strb	r3, [fp, #-33]	; 0xffffffdf
   14044:	ldr	r3, [pc, #3872]	; 14f6c <__assert_fail@plt+0x3de8>
   14048:	str	r3, [fp, #-28]	; 0xffffffe4
   1404c:	mov	r3, #1
   14050:	str	r3, [fp, #-32]	; 0xffffffe0
   14054:	b	141c4 <__assert_fail@plt+0x3040>
   14058:	mov	r3, #1
   1405c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14060:	mov	r3, #0
   14064:	strb	r3, [fp, #-34]	; 0xffffffde
   14068:	b	141c4 <__assert_fail@plt+0x3040>
   1406c:	ldr	r3, [fp, #4]
   14070:	cmp	r3, #10
   14074:	beq	14098 <__assert_fail@plt+0x2f14>
   14078:	ldr	r1, [fp, #4]
   1407c:	ldr	r0, [pc, #3820]	; 14f70 <__assert_fail@plt+0x3dec>
   14080:	bl	13e2c <__assert_fail@plt+0x2ca8>
   14084:	str	r0, [fp, #16]
   14088:	ldr	r1, [fp, #4]
   1408c:	ldr	r0, [pc, #3808]	; 14f74 <__assert_fail@plt+0x3df0>
   14090:	bl	13e2c <__assert_fail@plt+0x2ca8>
   14094:	str	r0, [fp, #20]
   14098:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1409c:	eor	r3, r3, #1
   140a0:	uxtb	r3, r3
   140a4:	cmp	r3, #0
   140a8:	beq	14108 <__assert_fail@plt+0x2f84>
   140ac:	ldr	r3, [fp, #16]
   140b0:	str	r3, [fp, #-28]	; 0xffffffe4
   140b4:	b	140f8 <__assert_fail@plt+0x2f74>
   140b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   140bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140c0:	cmp	r2, r3
   140c4:	bcs	140e0 <__assert_fail@plt+0x2f5c>
   140c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   140cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   140d0:	add	r3, r2, r3
   140d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   140d8:	ldrb	r2, [r2]
   140dc:	strb	r2, [r3]
   140e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   140e4:	add	r3, r3, #1
   140e8:	str	r3, [fp, #-20]	; 0xffffffec
   140ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140f0:	add	r3, r3, #1
   140f4:	str	r3, [fp, #-28]	; 0xffffffe4
   140f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140fc:	ldrb	r3, [r3]
   14100:	cmp	r3, #0
   14104:	bne	140b8 <__assert_fail@plt+0x2f34>
   14108:	mov	r3, #1
   1410c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14110:	ldr	r3, [fp, #20]
   14114:	str	r3, [fp, #-28]	; 0xffffffe4
   14118:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1411c:	bl	11070 <strlen@plt>
   14120:	str	r0, [fp, #-32]	; 0xffffffe0
   14124:	b	141c4 <__assert_fail@plt+0x3040>
   14128:	mov	r3, #1
   1412c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14130:	mov	r3, #1
   14134:	strb	r3, [fp, #-34]	; 0xffffffde
   14138:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1413c:	eor	r3, r3, #1
   14140:	uxtb	r3, r3
   14144:	cmp	r3, #0
   14148:	beq	14154 <__assert_fail@plt+0x2fd0>
   1414c:	mov	r3, #1
   14150:	strb	r3, [fp, #-33]	; 0xffffffdf
   14154:	mov	r3, #2
   14158:	str	r3, [fp, #4]
   1415c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14160:	eor	r3, r3, #1
   14164:	uxtb	r3, r3
   14168:	cmp	r3, #0
   1416c:	beq	141a0 <__assert_fail@plt+0x301c>
   14170:	ldr	r2, [fp, #-20]	; 0xffffffec
   14174:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14178:	cmp	r2, r3
   1417c:	bcs	14194 <__assert_fail@plt+0x3010>
   14180:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14184:	ldr	r3, [fp, #-20]	; 0xffffffec
   14188:	add	r3, r2, r3
   1418c:	mov	r2, #39	; 0x27
   14190:	strb	r2, [r3]
   14194:	ldr	r3, [fp, #-20]	; 0xffffffec
   14198:	add	r3, r3, #1
   1419c:	str	r3, [fp, #-20]	; 0xffffffec
   141a0:	ldr	r3, [pc, #3532]	; 14f74 <__assert_fail@plt+0x3df0>
   141a4:	str	r3, [fp, #-28]	; 0xffffffe4
   141a8:	mov	r3, #1
   141ac:	str	r3, [fp, #-32]	; 0xffffffe0
   141b0:	b	141c4 <__assert_fail@plt+0x3040>
   141b4:	mov	r3, #0
   141b8:	strb	r3, [fp, #-34]	; 0xffffffde
   141bc:	b	141c4 <__assert_fail@plt+0x3040>
   141c0:	bl	1116c <abort@plt>
   141c4:	mov	r3, #0
   141c8:	str	r3, [fp, #-16]
   141cc:	b	1535c <__assert_fail@plt+0x41d8>
   141d0:	mov	r3, #0
   141d4:	strb	r3, [fp, #-40]	; 0xffffffd8
   141d8:	mov	r3, #0
   141dc:	strb	r3, [fp, #-41]	; 0xffffffd7
   141e0:	mov	r3, #0
   141e4:	strb	r3, [fp, #-42]	; 0xffffffd6
   141e8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   141ec:	cmp	r3, #0
   141f0:	beq	1428c <__assert_fail@plt+0x3108>
   141f4:	ldr	r3, [fp, #4]
   141f8:	cmp	r3, #2
   141fc:	beq	1428c <__assert_fail@plt+0x3108>
   14200:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14204:	cmp	r3, #0
   14208:	beq	1428c <__assert_fail@plt+0x3108>
   1420c:	ldr	r2, [fp, #-16]
   14210:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14214:	add	r4, r2, r3
   14218:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1421c:	cmn	r3, #1
   14220:	bne	14244 <__assert_fail@plt+0x30c0>
   14224:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14228:	cmp	r3, #1
   1422c:	bls	14244 <__assert_fail@plt+0x30c0>
   14230:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14234:	bl	11070 <strlen@plt>
   14238:	str	r0, [fp, #-100]	; 0xffffff9c
   1423c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14240:	b	14248 <__assert_fail@plt+0x30c4>
   14244:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14248:	cmp	r4, r3
   1424c:	bhi	1428c <__assert_fail@plt+0x3108>
   14250:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14254:	ldr	r3, [fp, #-16]
   14258:	add	r3, r2, r3
   1425c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14260:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14264:	mov	r0, r3
   14268:	bl	10f20 <memcmp@plt>
   1426c:	mov	r3, r0
   14270:	cmp	r3, #0
   14274:	bne	1428c <__assert_fail@plt+0x3108>
   14278:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1427c:	cmp	r3, #0
   14280:	bne	15518 <__assert_fail@plt+0x4394>
   14284:	mov	r3, #1
   14288:	strb	r3, [fp, #-40]	; 0xffffffd8
   1428c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14290:	ldr	r3, [fp, #-16]
   14294:	add	r3, r2, r3
   14298:	ldrb	r3, [r3]
   1429c:	strb	r3, [fp, #-38]	; 0xffffffda
   142a0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   142a4:	cmp	r3, #126	; 0x7e
   142a8:	ldrls	pc, [pc, r3, lsl #2]
   142ac:	b	14ad8 <__assert_fail@plt+0x3954>
   142b0:	andeq	r4, r1, ip, lsr #9
   142b4:	ldrdeq	r4, [r1], -r8
   142b8:	ldrdeq	r4, [r1], -r8
   142bc:	ldrdeq	r4, [r1], -r8
   142c0:	ldrdeq	r4, [r1], -r8
   142c4:	ldrdeq	r4, [r1], -r8
   142c8:	ldrdeq	r4, [r1], -r8
   142cc:	muleq	r1, ip, r8
   142d0:	andeq	r4, r1, r8, lsr #17
   142d4:	ldrdeq	r4, [r1], -r8
   142d8:	andeq	r4, r1, r0, asr #17
   142dc:	andeq	r4, r1, r4, ror #17
   142e0:			; <UNDEFINED> instruction: 0x000148b4
   142e4:	andeq	r4, r1, ip, asr #17
   142e8:	ldrdeq	r4, [r1], -r8
   142ec:	ldrdeq	r4, [r1], -r8
   142f0:	ldrdeq	r4, [r1], -r8
   142f4:	ldrdeq	r4, [r1], -r8
   142f8:	ldrdeq	r4, [r1], -r8
   142fc:	ldrdeq	r4, [r1], -r8
   14300:	ldrdeq	r4, [r1], -r8
   14304:	ldrdeq	r4, [r1], -r8
   14308:	ldrdeq	r4, [r1], -r8
   1430c:	ldrdeq	r4, [r1], -r8
   14310:	ldrdeq	r4, [r1], -r8
   14314:	ldrdeq	r4, [r1], -r8
   14318:	ldrdeq	r4, [r1], -r8
   1431c:	ldrdeq	r4, [r1], -r8
   14320:	ldrdeq	r4, [r1], -r8
   14324:	ldrdeq	r4, [r1], -r8
   14328:	ldrdeq	r4, [r1], -r8
   1432c:	ldrdeq	r4, [r1], -r8
   14330:			; <UNDEFINED> instruction: 0x000149bc
   14334:	andeq	r4, r1, r4, asr #19
   14338:	andeq	r4, r1, r4, asr #19
   1433c:			; <UNDEFINED> instruction: 0x000149b0
   14340:	andeq	r4, r1, r4, asr #19
   14344:	andeq	r4, r1, ip, asr #21
   14348:	andeq	r4, r1, r4, asr #19
   1434c:	andeq	r4, r1, r0, ror #19
   14350:	andeq	r4, r1, r4, asr #19
   14354:	andeq	r4, r1, r4, asr #19
   14358:	andeq	r4, r1, r4, asr #19
   1435c:	andeq	r4, r1, ip, asr #21
   14360:	andeq	r4, r1, ip, asr #21
   14364:	andeq	r4, r1, ip, asr #21
   14368:	andeq	r4, r1, ip, asr #21
   1436c:	andeq	r4, r1, ip, asr #21
   14370:	andeq	r4, r1, ip, asr #21
   14374:	andeq	r4, r1, ip, asr #21
   14378:	andeq	r4, r1, ip, asr #21
   1437c:	andeq	r4, r1, ip, asr #21
   14380:	andeq	r4, r1, ip, asr #21
   14384:	andeq	r4, r1, ip, asr #21
   14388:	andeq	r4, r1, ip, asr #21
   1438c:	andeq	r4, r1, ip, asr #21
   14390:	andeq	r4, r1, ip, asr #21
   14394:	andeq	r4, r1, ip, asr #21
   14398:	andeq	r4, r1, ip, asr #21
   1439c:	andeq	r4, r1, r4, asr #19
   143a0:	andeq	r4, r1, r4, asr #19
   143a4:	andeq	r4, r1, r4, asr #19
   143a8:	andeq	r4, r1, r4, asr #19
   143ac:	andeq	r4, r1, ip, lsl #13
   143b0:	ldrdeq	r4, [r1], -r8
   143b4:	andeq	r4, r1, ip, asr #21
   143b8:	andeq	r4, r1, ip, asr #21
   143bc:	andeq	r4, r1, ip, asr #21
   143c0:	andeq	r4, r1, ip, asr #21
   143c4:	andeq	r4, r1, ip, asr #21
   143c8:	andeq	r4, r1, ip, asr #21
   143cc:	andeq	r4, r1, ip, asr #21
   143d0:	andeq	r4, r1, ip, asr #21
   143d4:	andeq	r4, r1, ip, asr #21
   143d8:	andeq	r4, r1, ip, asr #21
   143dc:	andeq	r4, r1, ip, asr #21
   143e0:	andeq	r4, r1, ip, asr #21
   143e4:	andeq	r4, r1, ip, asr #21
   143e8:	andeq	r4, r1, ip, asr #21
   143ec:	andeq	r4, r1, ip, asr #21
   143f0:	andeq	r4, r1, ip, asr #21
   143f4:	andeq	r4, r1, ip, asr #21
   143f8:	andeq	r4, r1, ip, asr #21
   143fc:	andeq	r4, r1, ip, asr #21
   14400:	andeq	r4, r1, ip, asr #21
   14404:	andeq	r4, r1, ip, asr #21
   14408:	andeq	r4, r1, ip, asr #21
   1440c:	andeq	r4, r1, ip, asr #21
   14410:	andeq	r4, r1, ip, asr #21
   14414:	andeq	r4, r1, ip, asr #21
   14418:	andeq	r4, r1, ip, asr #21
   1441c:	andeq	r4, r1, r4, asr #19
   14420:	strdeq	r4, [r1], -r0
   14424:	andeq	r4, r1, ip, asr #21
   14428:	andeq	r4, r1, r4, asr #19
   1442c:	andeq	r4, r1, ip, asr #21
   14430:	andeq	r4, r1, r4, asr #19
   14434:	andeq	r4, r1, ip, asr #21
   14438:	andeq	r4, r1, ip, asr #21
   1443c:	andeq	r4, r1, ip, asr #21
   14440:	andeq	r4, r1, ip, asr #21
   14444:	andeq	r4, r1, ip, asr #21
   14448:	andeq	r4, r1, ip, asr #21
   1444c:	andeq	r4, r1, ip, asr #21
   14450:	andeq	r4, r1, ip, asr #21
   14454:	andeq	r4, r1, ip, asr #21
   14458:	andeq	r4, r1, ip, asr #21
   1445c:	andeq	r4, r1, ip, asr #21
   14460:	andeq	r4, r1, ip, asr #21
   14464:	andeq	r4, r1, ip, asr #21
   14468:	andeq	r4, r1, ip, asr #21
   1446c:	andeq	r4, r1, ip, asr #21
   14470:	andeq	r4, r1, ip, asr #21
   14474:	andeq	r4, r1, ip, asr #21
   14478:	andeq	r4, r1, ip, asr #21
   1447c:	andeq	r4, r1, ip, asr #21
   14480:	andeq	r4, r1, ip, asr #21
   14484:	andeq	r4, r1, ip, asr #21
   14488:	andeq	r4, r1, ip, asr #21
   1448c:	andeq	r4, r1, ip, asr #21
   14490:	andeq	r4, r1, ip, asr #21
   14494:	andeq	r4, r1, ip, asr #21
   14498:	andeq	r4, r1, ip, asr #21
   1449c:	andeq	r4, r1, r8, ror #18
   144a0:	andeq	r4, r1, r4, asr #19
   144a4:	andeq	r4, r1, r8, ror #18
   144a8:			; <UNDEFINED> instruction: 0x000149b0
   144ac:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   144b0:	cmp	r3, #0
   144b4:	beq	14678 <__assert_fail@plt+0x34f4>
   144b8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   144bc:	cmp	r3, #0
   144c0:	bne	15520 <__assert_fail@plt+0x439c>
   144c4:	mov	r3, #1
   144c8:	strb	r3, [fp, #-41]	; 0xffffffd7
   144cc:	ldr	r3, [fp, #4]
   144d0:	cmp	r3, #2
   144d4:	bne	14584 <__assert_fail@plt+0x3400>
   144d8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   144dc:	eor	r3, r3, #1
   144e0:	uxtb	r3, r3
   144e4:	cmp	r3, #0
   144e8:	beq	14584 <__assert_fail@plt+0x3400>
   144ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   144f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144f4:	cmp	r2, r3
   144f8:	bcs	14510 <__assert_fail@plt+0x338c>
   144fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14500:	ldr	r3, [fp, #-20]	; 0xffffffec
   14504:	add	r3, r2, r3
   14508:	mov	r2, #39	; 0x27
   1450c:	strb	r2, [r3]
   14510:	ldr	r3, [fp, #-20]	; 0xffffffec
   14514:	add	r3, r3, #1
   14518:	str	r3, [fp, #-20]	; 0xffffffec
   1451c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14520:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14524:	cmp	r2, r3
   14528:	bcs	14540 <__assert_fail@plt+0x33bc>
   1452c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14530:	ldr	r3, [fp, #-20]	; 0xffffffec
   14534:	add	r3, r2, r3
   14538:	mov	r2, #36	; 0x24
   1453c:	strb	r2, [r3]
   14540:	ldr	r3, [fp, #-20]	; 0xffffffec
   14544:	add	r3, r3, #1
   14548:	str	r3, [fp, #-20]	; 0xffffffec
   1454c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14550:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14554:	cmp	r2, r3
   14558:	bcs	14570 <__assert_fail@plt+0x33ec>
   1455c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14560:	ldr	r3, [fp, #-20]	; 0xffffffec
   14564:	add	r3, r2, r3
   14568:	mov	r2, #39	; 0x27
   1456c:	strb	r2, [r3]
   14570:	ldr	r3, [fp, #-20]	; 0xffffffec
   14574:	add	r3, r3, #1
   14578:	str	r3, [fp, #-20]	; 0xffffffec
   1457c:	mov	r3, #1
   14580:	strb	r3, [fp, #-35]	; 0xffffffdd
   14584:	ldr	r2, [fp, #-20]	; 0xffffffec
   14588:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1458c:	cmp	r2, r3
   14590:	bcs	145a8 <__assert_fail@plt+0x3424>
   14594:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14598:	ldr	r3, [fp, #-20]	; 0xffffffec
   1459c:	add	r3, r2, r3
   145a0:	mov	r2, #92	; 0x5c
   145a4:	strb	r2, [r3]
   145a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145ac:	add	r3, r3, #1
   145b0:	str	r3, [fp, #-20]	; 0xffffffec
   145b4:	ldr	r3, [fp, #4]
   145b8:	cmp	r3, #2
   145bc:	beq	1466c <__assert_fail@plt+0x34e8>
   145c0:	ldr	r3, [fp, #-16]
   145c4:	add	r2, r3, #1
   145c8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   145cc:	cmp	r2, r3
   145d0:	bcs	1466c <__assert_fail@plt+0x34e8>
   145d4:	ldr	r3, [fp, #-16]
   145d8:	add	r3, r3, #1
   145dc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   145e0:	add	r3, r2, r3
   145e4:	ldrb	r3, [r3]
   145e8:	cmp	r3, #47	; 0x2f
   145ec:	bls	1466c <__assert_fail@plt+0x34e8>
   145f0:	ldr	r3, [fp, #-16]
   145f4:	add	r3, r3, #1
   145f8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   145fc:	add	r3, r2, r3
   14600:	ldrb	r3, [r3]
   14604:	cmp	r3, #57	; 0x39
   14608:	bhi	1466c <__assert_fail@plt+0x34e8>
   1460c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14610:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14614:	cmp	r2, r3
   14618:	bcs	14630 <__assert_fail@plt+0x34ac>
   1461c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14620:	ldr	r3, [fp, #-20]	; 0xffffffec
   14624:	add	r3, r2, r3
   14628:	mov	r2, #48	; 0x30
   1462c:	strb	r2, [r3]
   14630:	ldr	r3, [fp, #-20]	; 0xffffffec
   14634:	add	r3, r3, #1
   14638:	str	r3, [fp, #-20]	; 0xffffffec
   1463c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14640:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14644:	cmp	r2, r3
   14648:	bcs	14660 <__assert_fail@plt+0x34dc>
   1464c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14650:	ldr	r3, [fp, #-20]	; 0xffffffec
   14654:	add	r3, r2, r3
   14658:	mov	r2, #48	; 0x30
   1465c:	strb	r2, [r3]
   14660:	ldr	r3, [fp, #-20]	; 0xffffffec
   14664:	add	r3, r3, #1
   14668:	str	r3, [fp, #-20]	; 0xffffffec
   1466c:	mov	r3, #48	; 0x30
   14670:	strb	r3, [fp, #-38]	; 0xffffffda
   14674:	b	150b4 <__assert_fail@plt+0x3f30>
   14678:	ldr	r3, [fp, #8]
   1467c:	and	r3, r3, #1
   14680:	cmp	r3, #0
   14684:	beq	150b4 <__assert_fail@plt+0x3f30>
   14688:	b	15350 <__assert_fail@plt+0x41cc>
   1468c:	ldr	r3, [fp, #4]
   14690:	cmp	r3, #2
   14694:	beq	146a4 <__assert_fail@plt+0x3520>
   14698:	cmp	r3, #5
   1469c:	beq	146b4 <__assert_fail@plt+0x3530>
   146a0:	b	14898 <__assert_fail@plt+0x3714>
   146a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   146a8:	cmp	r3, #0
   146ac:	beq	1488c <__assert_fail@plt+0x3708>
   146b0:	b	1555c <__assert_fail@plt+0x43d8>
   146b4:	ldr	r3, [fp, #8]
   146b8:	and	r3, r3, #4
   146bc:	cmp	r3, #0
   146c0:	beq	14894 <__assert_fail@plt+0x3710>
   146c4:	ldr	r3, [fp, #-16]
   146c8:	add	r2, r3, #2
   146cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   146d0:	cmp	r2, r3
   146d4:	bcs	14894 <__assert_fail@plt+0x3710>
   146d8:	ldr	r3, [fp, #-16]
   146dc:	add	r3, r3, #1
   146e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   146e4:	add	r3, r2, r3
   146e8:	ldrb	r3, [r3]
   146ec:	cmp	r3, #63	; 0x3f
   146f0:	bne	14894 <__assert_fail@plt+0x3710>
   146f4:	ldr	r3, [fp, #-16]
   146f8:	add	r3, r3, #2
   146fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14700:	add	r3, r2, r3
   14704:	ldrb	r3, [r3]
   14708:	sub	r3, r3, #33	; 0x21
   1470c:	cmp	r3, #29
   14710:	ldrls	pc, [pc, r3, lsl #2]
   14714:	b	14884 <__assert_fail@plt+0x3700>
   14718:	muleq	r1, r0, r7
   1471c:	andeq	r4, r1, r4, lsl #17
   14720:	andeq	r4, r1, r4, lsl #17
   14724:	andeq	r4, r1, r4, lsl #17
   14728:	andeq	r4, r1, r4, lsl #17
   1472c:	andeq	r4, r1, r4, lsl #17
   14730:	muleq	r1, r0, r7
   14734:	muleq	r1, r0, r7
   14738:	muleq	r1, r0, r7
   1473c:	andeq	r4, r1, r4, lsl #17
   14740:	andeq	r4, r1, r4, lsl #17
   14744:	andeq	r4, r1, r4, lsl #17
   14748:	muleq	r1, r0, r7
   1474c:	andeq	r4, r1, r4, lsl #17
   14750:	muleq	r1, r0, r7
   14754:	andeq	r4, r1, r4, lsl #17
   14758:	andeq	r4, r1, r4, lsl #17
   1475c:	andeq	r4, r1, r4, lsl #17
   14760:	andeq	r4, r1, r4, lsl #17
   14764:	andeq	r4, r1, r4, lsl #17
   14768:	andeq	r4, r1, r4, lsl #17
   1476c:	andeq	r4, r1, r4, lsl #17
   14770:	andeq	r4, r1, r4, lsl #17
   14774:	andeq	r4, r1, r4, lsl #17
   14778:	andeq	r4, r1, r4, lsl #17
   1477c:	andeq	r4, r1, r4, lsl #17
   14780:	andeq	r4, r1, r4, lsl #17
   14784:	muleq	r1, r0, r7
   14788:	muleq	r1, r0, r7
   1478c:	muleq	r1, r0, r7
   14790:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14794:	cmp	r3, #0
   14798:	bne	15528 <__assert_fail@plt+0x43a4>
   1479c:	ldr	r3, [fp, #-16]
   147a0:	add	r3, r3, #2
   147a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   147a8:	add	r3, r2, r3
   147ac:	ldrb	r3, [r3]
   147b0:	strb	r3, [fp, #-38]	; 0xffffffda
   147b4:	ldr	r3, [fp, #-16]
   147b8:	add	r3, r3, #2
   147bc:	str	r3, [fp, #-16]
   147c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   147c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   147c8:	cmp	r2, r3
   147cc:	bcs	147e4 <__assert_fail@plt+0x3660>
   147d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   147d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   147d8:	add	r3, r2, r3
   147dc:	mov	r2, #63	; 0x3f
   147e0:	strb	r2, [r3]
   147e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   147e8:	add	r3, r3, #1
   147ec:	str	r3, [fp, #-20]	; 0xffffffec
   147f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   147f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   147f8:	cmp	r2, r3
   147fc:	bcs	14814 <__assert_fail@plt+0x3690>
   14800:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14804:	ldr	r3, [fp, #-20]	; 0xffffffec
   14808:	add	r3, r2, r3
   1480c:	mov	r2, #34	; 0x22
   14810:	strb	r2, [r3]
   14814:	ldr	r3, [fp, #-20]	; 0xffffffec
   14818:	add	r3, r3, #1
   1481c:	str	r3, [fp, #-20]	; 0xffffffec
   14820:	ldr	r2, [fp, #-20]	; 0xffffffec
   14824:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14828:	cmp	r2, r3
   1482c:	bcs	14844 <__assert_fail@plt+0x36c0>
   14830:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14834:	ldr	r3, [fp, #-20]	; 0xffffffec
   14838:	add	r3, r2, r3
   1483c:	mov	r2, #34	; 0x22
   14840:	strb	r2, [r3]
   14844:	ldr	r3, [fp, #-20]	; 0xffffffec
   14848:	add	r3, r3, #1
   1484c:	str	r3, [fp, #-20]	; 0xffffffec
   14850:	ldr	r2, [fp, #-20]	; 0xffffffec
   14854:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14858:	cmp	r2, r3
   1485c:	bcs	14874 <__assert_fail@plt+0x36f0>
   14860:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14864:	ldr	r3, [fp, #-20]	; 0xffffffec
   14868:	add	r3, r2, r3
   1486c:	mov	r2, #63	; 0x3f
   14870:	strb	r2, [r3]
   14874:	ldr	r3, [fp, #-20]	; 0xffffffec
   14878:	add	r3, r3, #1
   1487c:	str	r3, [fp, #-20]	; 0xffffffec
   14880:	b	14888 <__assert_fail@plt+0x3704>
   14884:	nop			; (mov r0, r0)
   14888:	b	14894 <__assert_fail@plt+0x3710>
   1488c:	nop			; (mov r0, r0)
   14890:	b	150e0 <__assert_fail@plt+0x3f5c>
   14894:	nop			; (mov r0, r0)
   14898:	b	150e0 <__assert_fail@plt+0x3f5c>
   1489c:	mov	r3, #97	; 0x61
   148a0:	strb	r3, [fp, #-39]	; 0xffffffd9
   148a4:	b	14950 <__assert_fail@plt+0x37cc>
   148a8:	mov	r3, #98	; 0x62
   148ac:	strb	r3, [fp, #-39]	; 0xffffffd9
   148b0:	b	14950 <__assert_fail@plt+0x37cc>
   148b4:	mov	r3, #102	; 0x66
   148b8:	strb	r3, [fp, #-39]	; 0xffffffd9
   148bc:	b	14950 <__assert_fail@plt+0x37cc>
   148c0:	mov	r3, #110	; 0x6e
   148c4:	strb	r3, [fp, #-39]	; 0xffffffd9
   148c8:	b	14938 <__assert_fail@plt+0x37b4>
   148cc:	mov	r3, #114	; 0x72
   148d0:	strb	r3, [fp, #-39]	; 0xffffffd9
   148d4:	b	14938 <__assert_fail@plt+0x37b4>
   148d8:	mov	r3, #116	; 0x74
   148dc:	strb	r3, [fp, #-39]	; 0xffffffd9
   148e0:	b	14938 <__assert_fail@plt+0x37b4>
   148e4:	mov	r3, #118	; 0x76
   148e8:	strb	r3, [fp, #-39]	; 0xffffffd9
   148ec:	b	14950 <__assert_fail@plt+0x37cc>
   148f0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   148f4:	strb	r3, [fp, #-39]	; 0xffffffd9
   148f8:	ldr	r3, [fp, #4]
   148fc:	cmp	r3, #2
   14900:	bne	14914 <__assert_fail@plt+0x3790>
   14904:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14908:	cmp	r3, #0
   1490c:	beq	15268 <__assert_fail@plt+0x40e4>
   14910:	b	1555c <__assert_fail@plt+0x43d8>
   14914:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14918:	cmp	r3, #0
   1491c:	beq	14938 <__assert_fail@plt+0x37b4>
   14920:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14924:	cmp	r3, #0
   14928:	beq	14938 <__assert_fail@plt+0x37b4>
   1492c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14930:	cmp	r3, #0
   14934:	bne	15270 <__assert_fail@plt+0x40ec>
   14938:	ldr	r3, [fp, #4]
   1493c:	cmp	r3, #2
   14940:	bne	14950 <__assert_fail@plt+0x37cc>
   14944:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14948:	cmp	r3, #0
   1494c:	bne	15530 <__assert_fail@plt+0x43ac>
   14950:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14954:	cmp	r3, #0
   14958:	beq	150bc <__assert_fail@plt+0x3f38>
   1495c:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   14960:	strb	r3, [fp, #-38]	; 0xffffffda
   14964:	b	15168 <__assert_fail@plt+0x3fe4>
   14968:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1496c:	cmn	r3, #1
   14970:	bne	14994 <__assert_fail@plt+0x3810>
   14974:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14978:	add	r3, r3, #1
   1497c:	ldrb	r3, [r3]
   14980:	cmp	r3, #0
   14984:	movne	r3, #1
   14988:	moveq	r3, #0
   1498c:	uxtb	r3, r3
   14990:	b	149a8 <__assert_fail@plt+0x3824>
   14994:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14998:	cmp	r3, #1
   1499c:	movne	r3, #1
   149a0:	moveq	r3, #0
   149a4:	uxtb	r3, r3
   149a8:	cmp	r3, #0
   149ac:	bne	150c4 <__assert_fail@plt+0x3f40>
   149b0:	ldr	r3, [fp, #-16]
   149b4:	cmp	r3, #0
   149b8:	bne	150cc <__assert_fail@plt+0x3f48>
   149bc:	mov	r3, #1
   149c0:	strb	r3, [fp, #-42]	; 0xffffffd6
   149c4:	ldr	r3, [fp, #4]
   149c8:	cmp	r3, #2
   149cc:	bne	150d4 <__assert_fail@plt+0x3f50>
   149d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   149d4:	cmp	r3, #0
   149d8:	beq	150d4 <__assert_fail@plt+0x3f50>
   149dc:	b	1555c <__assert_fail@plt+0x43d8>
   149e0:	mov	r3, #1
   149e4:	strb	r3, [fp, #-36]	; 0xffffffdc
   149e8:	mov	r3, #1
   149ec:	strb	r3, [fp, #-42]	; 0xffffffd6
   149f0:	ldr	r3, [fp, #4]
   149f4:	cmp	r3, #2
   149f8:	bne	150dc <__assert_fail@plt+0x3f58>
   149fc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14a00:	cmp	r3, #0
   14a04:	bne	15538 <__assert_fail@plt+0x43b4>
   14a08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a0c:	cmp	r3, #0
   14a10:	beq	14a30 <__assert_fail@plt+0x38ac>
   14a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a18:	cmp	r3, #0
   14a1c:	bne	14a30 <__assert_fail@plt+0x38ac>
   14a20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a24:	str	r3, [fp, #-24]	; 0xffffffe8
   14a28:	mov	r3, #0
   14a2c:	str	r3, [fp, #-92]	; 0xffffffa4
   14a30:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a38:	cmp	r2, r3
   14a3c:	bcs	14a54 <__assert_fail@plt+0x38d0>
   14a40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a48:	add	r3, r2, r3
   14a4c:	mov	r2, #39	; 0x27
   14a50:	strb	r2, [r3]
   14a54:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a58:	add	r3, r3, #1
   14a5c:	str	r3, [fp, #-20]	; 0xffffffec
   14a60:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a68:	cmp	r2, r3
   14a6c:	bcs	14a84 <__assert_fail@plt+0x3900>
   14a70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a78:	add	r3, r2, r3
   14a7c:	mov	r2, #92	; 0x5c
   14a80:	strb	r2, [r3]
   14a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a88:	add	r3, r3, #1
   14a8c:	str	r3, [fp, #-20]	; 0xffffffec
   14a90:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a94:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a98:	cmp	r2, r3
   14a9c:	bcs	14ab4 <__assert_fail@plt+0x3930>
   14aa0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14aa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14aa8:	add	r3, r2, r3
   14aac:	mov	r2, #39	; 0x27
   14ab0:	strb	r2, [r3]
   14ab4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ab8:	add	r3, r3, #1
   14abc:	str	r3, [fp, #-20]	; 0xffffffec
   14ac0:	mov	r3, #0
   14ac4:	strb	r3, [fp, #-35]	; 0xffffffdd
   14ac8:	b	150dc <__assert_fail@plt+0x3f58>
   14acc:	mov	r3, #1
   14ad0:	strb	r3, [fp, #-42]	; 0xffffffd6
   14ad4:	b	150e0 <__assert_fail@plt+0x3f5c>
   14ad8:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   14adc:	cmp	r3, #0
   14ae0:	beq	14b20 <__assert_fail@plt+0x399c>
   14ae4:	mov	r3, #1
   14ae8:	str	r3, [fp, #-48]	; 0xffffffd0
   14aec:	bl	11040 <__ctype_b_loc@plt>
   14af0:	mov	r3, r0
   14af4:	ldr	r2, [r3]
   14af8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14afc:	lsl	r3, r3, #1
   14b00:	add	r3, r2, r3
   14b04:	ldrh	r3, [r3]
   14b08:	and	r3, r3, #16384	; 0x4000
   14b0c:	cmp	r3, #0
   14b10:	movne	r3, #1
   14b14:	moveq	r3, #0
   14b18:	strb	r3, [fp, #-49]	; 0xffffffcf
   14b1c:	b	14d6c <__assert_fail@plt+0x3be8>
   14b20:	sub	r3, fp, #76	; 0x4c
   14b24:	mov	r2, #8
   14b28:	mov	r1, #0
   14b2c:	mov	r0, r3
   14b30:	bl	110ac <memset@plt>
   14b34:	mov	r3, #0
   14b38:	str	r3, [fp, #-48]	; 0xffffffd0
   14b3c:	mov	r3, #1
   14b40:	strb	r3, [fp, #-49]	; 0xffffffcf
   14b44:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14b48:	cmn	r3, #1
   14b4c:	bne	14b5c <__assert_fail@plt+0x39d8>
   14b50:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14b54:	bl	11070 <strlen@plt>
   14b58:	str	r0, [fp, #-100]	; 0xffffff9c
   14b5c:	ldr	r2, [fp, #-16]
   14b60:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b64:	add	r3, r2, r3
   14b68:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14b6c:	add	r1, r2, r3
   14b70:	ldr	r2, [fp, #-16]
   14b74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b78:	add	r3, r2, r3
   14b7c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14b80:	sub	r2, r2, r3
   14b84:	sub	r3, fp, #76	; 0x4c
   14b88:	sub	r0, fp, #80	; 0x50
   14b8c:	bl	18098 <__assert_fail@plt+0x6f14>
   14b90:	str	r0, [fp, #-64]	; 0xffffffc0
   14b94:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14b98:	cmp	r3, #0
   14b9c:	beq	14d60 <__assert_fail@plt+0x3bdc>
   14ba0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14ba4:	cmn	r3, #1
   14ba8:	bne	14bb8 <__assert_fail@plt+0x3a34>
   14bac:	mov	r3, #0
   14bb0:	strb	r3, [fp, #-49]	; 0xffffffcf
   14bb4:	b	14d6c <__assert_fail@plt+0x3be8>
   14bb8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14bbc:	cmn	r3, #2
   14bc0:	bne	14c18 <__assert_fail@plt+0x3a94>
   14bc4:	mov	r3, #0
   14bc8:	strb	r3, [fp, #-49]	; 0xffffffcf
   14bcc:	b	14bdc <__assert_fail@plt+0x3a58>
   14bd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14bd4:	add	r3, r3, #1
   14bd8:	str	r3, [fp, #-48]	; 0xffffffd0
   14bdc:	ldr	r2, [fp, #-16]
   14be0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14be4:	add	r2, r2, r3
   14be8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14bec:	cmp	r2, r3
   14bf0:	bcs	14d68 <__assert_fail@plt+0x3be4>
   14bf4:	ldr	r2, [fp, #-16]
   14bf8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14bfc:	add	r3, r2, r3
   14c00:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14c04:	add	r3, r2, r3
   14c08:	ldrb	r3, [r3]
   14c0c:	cmp	r3, #0
   14c10:	bne	14bd0 <__assert_fail@plt+0x3a4c>
   14c14:	b	14d68 <__assert_fail@plt+0x3be4>
   14c18:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14c1c:	cmp	r3, #0
   14c20:	beq	14d14 <__assert_fail@plt+0x3b90>
   14c24:	ldr	r3, [fp, #4]
   14c28:	cmp	r3, #2
   14c2c:	bne	14d14 <__assert_fail@plt+0x3b90>
   14c30:	mov	r3, #1
   14c34:	str	r3, [fp, #-56]	; 0xffffffc8
   14c38:	b	14d04 <__assert_fail@plt+0x3b80>
   14c3c:	ldr	r2, [fp, #-16]
   14c40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14c44:	add	r2, r2, r3
   14c48:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14c4c:	add	r3, r2, r3
   14c50:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14c54:	add	r3, r2, r3
   14c58:	ldrb	r3, [r3]
   14c5c:	sub	r3, r3, #91	; 0x5b
   14c60:	cmp	r3, #33	; 0x21
   14c64:	ldrls	pc, [pc, r3, lsl #2]
   14c68:	b	14cf4 <__assert_fail@plt+0x3b70>
   14c6c:	andeq	r5, r1, r0, asr #10
   14c70:	andeq	r5, r1, r0, asr #10
   14c74:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c78:	andeq	r5, r1, r0, asr #10
   14c7c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c80:	andeq	r5, r1, r0, asr #10
   14c84:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c88:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c94:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c98:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c9c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ca0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ca4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ca8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cb0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cb4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cb8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cbc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cc0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cc4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cc8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ccc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cd0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cd4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cd8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cdc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ce0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ce4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ce8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cf0:	andeq	r5, r1, r0, asr #10
   14cf4:	nop			; (mov r0, r0)
   14cf8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14cfc:	add	r3, r3, #1
   14d00:	str	r3, [fp, #-56]	; 0xffffffc8
   14d04:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14d08:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14d0c:	cmp	r2, r3
   14d10:	bcc	14c3c <__assert_fail@plt+0x3ab8>
   14d14:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14d18:	mov	r0, r3
   14d1c:	bl	10f74 <iswprint@plt>
   14d20:	mov	r3, r0
   14d24:	cmp	r3, #0
   14d28:	bne	14d34 <__assert_fail@plt+0x3bb0>
   14d2c:	mov	r3, #0
   14d30:	strb	r3, [fp, #-49]	; 0xffffffcf
   14d34:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14d38:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14d3c:	add	r3, r2, r3
   14d40:	str	r3, [fp, #-48]	; 0xffffffd0
   14d44:	sub	r3, fp, #76	; 0x4c
   14d48:	mov	r0, r3
   14d4c:	bl	10f08 <mbsinit@plt>
   14d50:	mov	r3, r0
   14d54:	cmp	r3, #0
   14d58:	beq	14b5c <__assert_fail@plt+0x39d8>
   14d5c:	b	14d6c <__assert_fail@plt+0x3be8>
   14d60:	nop			; (mov r0, r0)
   14d64:	b	14d6c <__assert_fail@plt+0x3be8>
   14d68:	nop			; (mov r0, r0)
   14d6c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14d70:	strb	r3, [fp, #-42]	; 0xffffffd6
   14d74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d78:	cmp	r3, #1
   14d7c:	bhi	14da0 <__assert_fail@plt+0x3c1c>
   14d80:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14d84:	cmp	r3, #0
   14d88:	beq	150e0 <__assert_fail@plt+0x3f5c>
   14d8c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14d90:	eor	r3, r3, #1
   14d94:	uxtb	r3, r3
   14d98:	cmp	r3, #0
   14d9c:	beq	150e0 <__assert_fail@plt+0x3f5c>
   14da0:	ldr	r2, [fp, #-16]
   14da4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14da8:	add	r3, r2, r3
   14dac:	str	r3, [fp, #-68]	; 0xffffffbc
   14db0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14db4:	cmp	r3, #0
   14db8:	beq	14f78 <__assert_fail@plt+0x3df4>
   14dbc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14dc0:	eor	r3, r3, #1
   14dc4:	uxtb	r3, r3
   14dc8:	cmp	r3, #0
   14dcc:	beq	14f78 <__assert_fail@plt+0x3df4>
   14dd0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14dd4:	cmp	r3, #0
   14dd8:	bne	15548 <__assert_fail@plt+0x43c4>
   14ddc:	mov	r3, #1
   14de0:	strb	r3, [fp, #-41]	; 0xffffffd7
   14de4:	ldr	r3, [fp, #4]
   14de8:	cmp	r3, #2
   14dec:	bne	14e9c <__assert_fail@plt+0x3d18>
   14df0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14df4:	eor	r3, r3, #1
   14df8:	uxtb	r3, r3
   14dfc:	cmp	r3, #0
   14e00:	beq	14e9c <__assert_fail@plt+0x3d18>
   14e04:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e0c:	cmp	r2, r3
   14e10:	bcs	14e28 <__assert_fail@plt+0x3ca4>
   14e14:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e18:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e1c:	add	r3, r2, r3
   14e20:	mov	r2, #39	; 0x27
   14e24:	strb	r2, [r3]
   14e28:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e2c:	add	r3, r3, #1
   14e30:	str	r3, [fp, #-20]	; 0xffffffec
   14e34:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e3c:	cmp	r2, r3
   14e40:	bcs	14e58 <__assert_fail@plt+0x3cd4>
   14e44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e4c:	add	r3, r2, r3
   14e50:	mov	r2, #36	; 0x24
   14e54:	strb	r2, [r3]
   14e58:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e5c:	add	r3, r3, #1
   14e60:	str	r3, [fp, #-20]	; 0xffffffec
   14e64:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e6c:	cmp	r2, r3
   14e70:	bcs	14e88 <__assert_fail@plt+0x3d04>
   14e74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e7c:	add	r3, r2, r3
   14e80:	mov	r2, #39	; 0x27
   14e84:	strb	r2, [r3]
   14e88:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e8c:	add	r3, r3, #1
   14e90:	str	r3, [fp, #-20]	; 0xffffffec
   14e94:	mov	r3, #1
   14e98:	strb	r3, [fp, #-35]	; 0xffffffdd
   14e9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ea0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ea4:	cmp	r2, r3
   14ea8:	bcs	14ec0 <__assert_fail@plt+0x3d3c>
   14eac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14eb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14eb4:	add	r3, r2, r3
   14eb8:	mov	r2, #92	; 0x5c
   14ebc:	strb	r2, [r3]
   14ec0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ec4:	add	r3, r3, #1
   14ec8:	str	r3, [fp, #-20]	; 0xffffffec
   14ecc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ed0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ed4:	cmp	r2, r3
   14ed8:	bcs	14f00 <__assert_fail@plt+0x3d7c>
   14edc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ee4:	add	r3, r2, r3
   14ee8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14eec:	lsr	r2, r2, #6
   14ef0:	uxtb	r2, r2
   14ef4:	add	r2, r2, #48	; 0x30
   14ef8:	uxtb	r2, r2
   14efc:	strb	r2, [r3]
   14f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f04:	add	r3, r3, #1
   14f08:	str	r3, [fp, #-20]	; 0xffffffec
   14f0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f14:	cmp	r2, r3
   14f18:	bcs	14f48 <__assert_fail@plt+0x3dc4>
   14f1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f20:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f24:	add	r3, r2, r3
   14f28:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14f2c:	lsr	r2, r2, #3
   14f30:	uxtb	r2, r2
   14f34:	and	r2, r2, #7
   14f38:	uxtb	r2, r2
   14f3c:	add	r2, r2, #48	; 0x30
   14f40:	uxtb	r2, r2
   14f44:	strb	r2, [r3]
   14f48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f4c:	add	r3, r3, #1
   14f50:	str	r3, [fp, #-20]	; 0xffffffec
   14f54:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14f58:	and	r3, r3, #7
   14f5c:	uxtb	r3, r3
   14f60:	add	r3, r3, #48	; 0x30
   14f64:	strb	r3, [fp, #-38]	; 0xffffffda
   14f68:	b	14fbc <__assert_fail@plt+0x3e38>
   14f6c:	andeq	r9, r1, r8, ror #8
   14f70:	andeq	r9, r1, r0, ror r4
   14f74:	andeq	r9, r1, ip, ror #8
   14f78:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14f7c:	cmp	r3, #0
   14f80:	beq	14fbc <__assert_fail@plt+0x3e38>
   14f84:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f8c:	cmp	r2, r3
   14f90:	bcs	14fa8 <__assert_fail@plt+0x3e24>
   14f94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f98:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f9c:	add	r3, r2, r3
   14fa0:	mov	r2, #92	; 0x5c
   14fa4:	strb	r2, [r3]
   14fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fac:	add	r3, r3, #1
   14fb0:	str	r3, [fp, #-20]	; 0xffffffec
   14fb4:	mov	r3, #0
   14fb8:	strb	r3, [fp, #-40]	; 0xffffffd8
   14fbc:	ldr	r3, [fp, #-16]
   14fc0:	add	r2, r3, #1
   14fc4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14fc8:	cmp	r2, r3
   14fcc:	bcs	150ac <__assert_fail@plt+0x3f28>
   14fd0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14fd4:	cmp	r3, #0
   14fd8:	beq	15058 <__assert_fail@plt+0x3ed4>
   14fdc:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14fe0:	eor	r3, r3, #1
   14fe4:	uxtb	r3, r3
   14fe8:	cmp	r3, #0
   14fec:	beq	15058 <__assert_fail@plt+0x3ed4>
   14ff0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ff4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ff8:	cmp	r2, r3
   14ffc:	bcs	15014 <__assert_fail@plt+0x3e90>
   15000:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15004:	ldr	r3, [fp, #-20]	; 0xffffffec
   15008:	add	r3, r2, r3
   1500c:	mov	r2, #39	; 0x27
   15010:	strb	r2, [r3]
   15014:	ldr	r3, [fp, #-20]	; 0xffffffec
   15018:	add	r3, r3, #1
   1501c:	str	r3, [fp, #-20]	; 0xffffffec
   15020:	ldr	r2, [fp, #-20]	; 0xffffffec
   15024:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15028:	cmp	r2, r3
   1502c:	bcs	15044 <__assert_fail@plt+0x3ec0>
   15030:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15034:	ldr	r3, [fp, #-20]	; 0xffffffec
   15038:	add	r3, r2, r3
   1503c:	mov	r2, #39	; 0x27
   15040:	strb	r2, [r3]
   15044:	ldr	r3, [fp, #-20]	; 0xffffffec
   15048:	add	r3, r3, #1
   1504c:	str	r3, [fp, #-20]	; 0xffffffec
   15050:	mov	r3, #0
   15054:	strb	r3, [fp, #-35]	; 0xffffffdd
   15058:	ldr	r2, [fp, #-20]	; 0xffffffec
   1505c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15060:	cmp	r2, r3
   15064:	bcs	1507c <__assert_fail@plt+0x3ef8>
   15068:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1506c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15070:	add	r3, r2, r3
   15074:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15078:	strb	r2, [r3]
   1507c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15080:	add	r3, r3, #1
   15084:	str	r3, [fp, #-20]	; 0xffffffec
   15088:	ldr	r3, [fp, #-16]
   1508c:	add	r3, r3, #1
   15090:	str	r3, [fp, #-16]
   15094:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15098:	ldr	r3, [fp, #-16]
   1509c:	add	r3, r2, r3
   150a0:	ldrb	r3, [r3]
   150a4:	strb	r3, [fp, #-38]	; 0xffffffda
   150a8:	b	14db0 <__assert_fail@plt+0x3c2c>
   150ac:	nop			; (mov r0, r0)
   150b0:	b	1527c <__assert_fail@plt+0x40f8>
   150b4:	nop			; (mov r0, r0)
   150b8:	b	150e0 <__assert_fail@plt+0x3f5c>
   150bc:	nop			; (mov r0, r0)
   150c0:	b	150e0 <__assert_fail@plt+0x3f5c>
   150c4:	nop			; (mov r0, r0)
   150c8:	b	150e0 <__assert_fail@plt+0x3f5c>
   150cc:	nop			; (mov r0, r0)
   150d0:	b	150e0 <__assert_fail@plt+0x3f5c>
   150d4:	nop			; (mov r0, r0)
   150d8:	b	150e0 <__assert_fail@plt+0x3f5c>
   150dc:	nop			; (mov r0, r0)
   150e0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   150e4:	eor	r3, r3, #1
   150e8:	uxtb	r3, r3
   150ec:	cmp	r3, #0
   150f0:	bne	15100 <__assert_fail@plt+0x3f7c>
   150f4:	ldr	r3, [fp, #4]
   150f8:	cmp	r3, #2
   150fc:	bne	15114 <__assert_fail@plt+0x3f90>
   15100:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15104:	eor	r3, r3, #1
   15108:	uxtb	r3, r3
   1510c:	cmp	r3, #0
   15110:	bne	15154 <__assert_fail@plt+0x3fd0>
   15114:	ldr	r3, [fp, #12]
   15118:	cmp	r3, #0
   1511c:	beq	15154 <__assert_fail@plt+0x3fd0>
   15120:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15124:	lsr	r3, r3, #5
   15128:	uxtb	r3, r3
   1512c:	lsl	r3, r3, #2
   15130:	ldr	r2, [fp, #12]
   15134:	add	r3, r2, r3
   15138:	ldr	r2, [r3]
   1513c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15140:	and	r3, r3, #31
   15144:	lsr	r3, r2, r3
   15148:	and	r3, r3, #1
   1514c:	cmp	r3, #0
   15150:	bne	15168 <__assert_fail@plt+0x3fe4>
   15154:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   15158:	eor	r3, r3, #1
   1515c:	uxtb	r3, r3
   15160:	cmp	r3, #0
   15164:	bne	15278 <__assert_fail@plt+0x40f4>
   15168:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1516c:	cmp	r3, #0
   15170:	bne	15550 <__assert_fail@plt+0x43cc>
   15174:	mov	r3, #1
   15178:	strb	r3, [fp, #-41]	; 0xffffffd7
   1517c:	ldr	r3, [fp, #4]
   15180:	cmp	r3, #2
   15184:	bne	15234 <__assert_fail@plt+0x40b0>
   15188:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1518c:	eor	r3, r3, #1
   15190:	uxtb	r3, r3
   15194:	cmp	r3, #0
   15198:	beq	15234 <__assert_fail@plt+0x40b0>
   1519c:	ldr	r2, [fp, #-20]	; 0xffffffec
   151a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   151a4:	cmp	r2, r3
   151a8:	bcs	151c0 <__assert_fail@plt+0x403c>
   151ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   151b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   151b4:	add	r3, r2, r3
   151b8:	mov	r2, #39	; 0x27
   151bc:	strb	r2, [r3]
   151c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   151c4:	add	r3, r3, #1
   151c8:	str	r3, [fp, #-20]	; 0xffffffec
   151cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   151d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   151d4:	cmp	r2, r3
   151d8:	bcs	151f0 <__assert_fail@plt+0x406c>
   151dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   151e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   151e4:	add	r3, r2, r3
   151e8:	mov	r2, #36	; 0x24
   151ec:	strb	r2, [r3]
   151f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   151f4:	add	r3, r3, #1
   151f8:	str	r3, [fp, #-20]	; 0xffffffec
   151fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   15200:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15204:	cmp	r2, r3
   15208:	bcs	15220 <__assert_fail@plt+0x409c>
   1520c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15210:	ldr	r3, [fp, #-20]	; 0xffffffec
   15214:	add	r3, r2, r3
   15218:	mov	r2, #39	; 0x27
   1521c:	strb	r2, [r3]
   15220:	ldr	r3, [fp, #-20]	; 0xffffffec
   15224:	add	r3, r3, #1
   15228:	str	r3, [fp, #-20]	; 0xffffffec
   1522c:	mov	r3, #1
   15230:	strb	r3, [fp, #-35]	; 0xffffffdd
   15234:	ldr	r2, [fp, #-20]	; 0xffffffec
   15238:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1523c:	cmp	r2, r3
   15240:	bcs	15258 <__assert_fail@plt+0x40d4>
   15244:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15248:	ldr	r3, [fp, #-20]	; 0xffffffec
   1524c:	add	r3, r2, r3
   15250:	mov	r2, #92	; 0x5c
   15254:	strb	r2, [r3]
   15258:	ldr	r3, [fp, #-20]	; 0xffffffec
   1525c:	add	r3, r3, #1
   15260:	str	r3, [fp, #-20]	; 0xffffffec
   15264:	b	1527c <__assert_fail@plt+0x40f8>
   15268:	nop			; (mov r0, r0)
   1526c:	b	1527c <__assert_fail@plt+0x40f8>
   15270:	nop			; (mov r0, r0)
   15274:	b	1527c <__assert_fail@plt+0x40f8>
   15278:	nop			; (mov r0, r0)
   1527c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15280:	cmp	r3, #0
   15284:	beq	15304 <__assert_fail@plt+0x4180>
   15288:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1528c:	eor	r3, r3, #1
   15290:	uxtb	r3, r3
   15294:	cmp	r3, #0
   15298:	beq	15304 <__assert_fail@plt+0x4180>
   1529c:	ldr	r2, [fp, #-20]	; 0xffffffec
   152a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152a4:	cmp	r2, r3
   152a8:	bcs	152c0 <__assert_fail@plt+0x413c>
   152ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   152b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152b4:	add	r3, r2, r3
   152b8:	mov	r2, #39	; 0x27
   152bc:	strb	r2, [r3]
   152c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152c4:	add	r3, r3, #1
   152c8:	str	r3, [fp, #-20]	; 0xffffffec
   152cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   152d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152d4:	cmp	r2, r3
   152d8:	bcs	152f0 <__assert_fail@plt+0x416c>
   152dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   152e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152e4:	add	r3, r2, r3
   152e8:	mov	r2, #39	; 0x27
   152ec:	strb	r2, [r3]
   152f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152f4:	add	r3, r3, #1
   152f8:	str	r3, [fp, #-20]	; 0xffffffec
   152fc:	mov	r3, #0
   15300:	strb	r3, [fp, #-35]	; 0xffffffdd
   15304:	ldr	r2, [fp, #-20]	; 0xffffffec
   15308:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1530c:	cmp	r2, r3
   15310:	bcs	15328 <__assert_fail@plt+0x41a4>
   15314:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15318:	ldr	r3, [fp, #-20]	; 0xffffffec
   1531c:	add	r3, r2, r3
   15320:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15324:	strb	r2, [r3]
   15328:	ldr	r3, [fp, #-20]	; 0xffffffec
   1532c:	add	r3, r3, #1
   15330:	str	r3, [fp, #-20]	; 0xffffffec
   15334:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   15338:	eor	r3, r3, #1
   1533c:	uxtb	r3, r3
   15340:	cmp	r3, #0
   15344:	beq	15350 <__assert_fail@plt+0x41cc>
   15348:	mov	r3, #0
   1534c:	strb	r3, [fp, #-37]	; 0xffffffdb
   15350:	ldr	r3, [fp, #-16]
   15354:	add	r3, r3, #1
   15358:	str	r3, [fp, #-16]
   1535c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15360:	cmn	r3, #1
   15364:	bne	1538c <__assert_fail@plt+0x4208>
   15368:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1536c:	ldr	r3, [fp, #-16]
   15370:	add	r3, r2, r3
   15374:	ldrb	r3, [r3]
   15378:	cmp	r3, #0
   1537c:	movne	r3, #1
   15380:	moveq	r3, #0
   15384:	uxtb	r3, r3
   15388:	b	153a4 <__assert_fail@plt+0x4220>
   1538c:	ldr	r2, [fp, #-16]
   15390:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15394:	cmp	r2, r3
   15398:	movne	r3, #1
   1539c:	moveq	r3, #0
   153a0:	uxtb	r3, r3
   153a4:	cmp	r3, #0
   153a8:	bne	141d0 <__assert_fail@plt+0x304c>
   153ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   153b0:	cmp	r3, #0
   153b4:	bne	153d0 <__assert_fail@plt+0x424c>
   153b8:	ldr	r3, [fp, #4]
   153bc:	cmp	r3, #2
   153c0:	bne	153d0 <__assert_fail@plt+0x424c>
   153c4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   153c8:	cmp	r3, #0
   153cc:	bne	15558 <__assert_fail@plt+0x43d4>
   153d0:	ldr	r3, [fp, #4]
   153d4:	cmp	r3, #2
   153d8:	bne	15478 <__assert_fail@plt+0x42f4>
   153dc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   153e0:	eor	r3, r3, #1
   153e4:	uxtb	r3, r3
   153e8:	cmp	r3, #0
   153ec:	beq	15478 <__assert_fail@plt+0x42f4>
   153f0:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   153f4:	cmp	r3, #0
   153f8:	beq	15478 <__assert_fail@plt+0x42f4>
   153fc:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15400:	cmp	r3, #0
   15404:	beq	1544c <__assert_fail@plt+0x42c8>
   15408:	ldr	r3, [fp, #20]
   1540c:	str	r3, [sp, #16]
   15410:	ldr	r3, [fp, #16]
   15414:	str	r3, [sp, #12]
   15418:	ldr	r3, [fp, #12]
   1541c:	str	r3, [sp, #8]
   15420:	ldr	r3, [fp, #8]
   15424:	str	r3, [sp, #4]
   15428:	mov	r3, #5
   1542c:	str	r3, [sp]
   15430:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15434:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15438:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1543c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15440:	bl	13f20 <__assert_fail@plt+0x2d9c>
   15444:	mov	r3, r0
   15448:	b	155c0 <__assert_fail@plt+0x443c>
   1544c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15450:	cmp	r3, #0
   15454:	bne	15478 <__assert_fail@plt+0x42f4>
   15458:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1545c:	cmp	r3, #0
   15460:	beq	15478 <__assert_fail@plt+0x42f4>
   15464:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15468:	str	r3, [fp, #-92]	; 0xffffffa4
   1546c:	mov	r3, #0
   15470:	str	r3, [fp, #-20]	; 0xffffffec
   15474:	b	13fac <__assert_fail@plt+0x2e28>
   15478:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1547c:	cmp	r3, #0
   15480:	beq	154ec <__assert_fail@plt+0x4368>
   15484:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15488:	eor	r3, r3, #1
   1548c:	uxtb	r3, r3
   15490:	cmp	r3, #0
   15494:	beq	154ec <__assert_fail@plt+0x4368>
   15498:	b	154dc <__assert_fail@plt+0x4358>
   1549c:	ldr	r2, [fp, #-20]	; 0xffffffec
   154a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154a4:	cmp	r2, r3
   154a8:	bcs	154c4 <__assert_fail@plt+0x4340>
   154ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   154b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   154b4:	add	r3, r2, r3
   154b8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   154bc:	ldrb	r2, [r2]
   154c0:	strb	r2, [r3]
   154c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   154c8:	add	r3, r3, #1
   154cc:	str	r3, [fp, #-20]	; 0xffffffec
   154d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   154d4:	add	r3, r3, #1
   154d8:	str	r3, [fp, #-28]	; 0xffffffe4
   154dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   154e0:	ldrb	r3, [r3]
   154e4:	cmp	r3, #0
   154e8:	bne	1549c <__assert_fail@plt+0x4318>
   154ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   154f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154f4:	cmp	r2, r3
   154f8:	bcs	15510 <__assert_fail@plt+0x438c>
   154fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15500:	ldr	r3, [fp, #-20]	; 0xffffffec
   15504:	add	r3, r2, r3
   15508:	mov	r2, #0
   1550c:	strb	r2, [r3]
   15510:	ldr	r3, [fp, #-20]	; 0xffffffec
   15514:	b	155c0 <__assert_fail@plt+0x443c>
   15518:	nop			; (mov r0, r0)
   1551c:	b	1555c <__assert_fail@plt+0x43d8>
   15520:	nop			; (mov r0, r0)
   15524:	b	1555c <__assert_fail@plt+0x43d8>
   15528:	nop			; (mov r0, r0)
   1552c:	b	1555c <__assert_fail@plt+0x43d8>
   15530:	nop			; (mov r0, r0)
   15534:	b	1555c <__assert_fail@plt+0x43d8>
   15538:	nop			; (mov r0, r0)
   1553c:	b	1555c <__assert_fail@plt+0x43d8>
   15540:	nop			; (mov r0, r0)
   15544:	b	1555c <__assert_fail@plt+0x43d8>
   15548:	nop			; (mov r0, r0)
   1554c:	b	1555c <__assert_fail@plt+0x43d8>
   15550:	nop			; (mov r0, r0)
   15554:	b	1555c <__assert_fail@plt+0x43d8>
   15558:	nop			; (mov r0, r0)
   1555c:	ldr	r3, [fp, #4]
   15560:	cmp	r3, #2
   15564:	bne	1557c <__assert_fail@plt+0x43f8>
   15568:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1556c:	cmp	r3, #0
   15570:	beq	1557c <__assert_fail@plt+0x43f8>
   15574:	mov	r3, #4
   15578:	str	r3, [fp, #4]
   1557c:	ldr	r3, [fp, #8]
   15580:	bic	r3, r3, #2
   15584:	ldr	r2, [fp, #20]
   15588:	str	r2, [sp, #16]
   1558c:	ldr	r2, [fp, #16]
   15590:	str	r2, [sp, #12]
   15594:	mov	r2, #0
   15598:	str	r2, [sp, #8]
   1559c:	str	r3, [sp, #4]
   155a0:	ldr	r3, [fp, #4]
   155a4:	str	r3, [sp]
   155a8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   155ac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   155b0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   155b4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   155b8:	bl	13f20 <__assert_fail@plt+0x2d9c>
   155bc:	mov	r3, r0
   155c0:	mov	r0, r3
   155c4:	sub	sp, fp, #8
   155c8:	pop	{r4, fp, pc}
   155cc:	push	{fp, lr}
   155d0:	add	fp, sp, #4
   155d4:	sub	sp, sp, #56	; 0x38
   155d8:	str	r0, [fp, #-24]	; 0xffffffe8
   155dc:	str	r1, [fp, #-28]	; 0xffffffe4
   155e0:	str	r2, [fp, #-32]	; 0xffffffe0
   155e4:	str	r3, [fp, #-36]	; 0xffffffdc
   155e8:	ldr	r3, [fp, #4]
   155ec:	cmp	r3, #0
   155f0:	beq	155fc <__assert_fail@plt+0x4478>
   155f4:	ldr	r3, [fp, #4]
   155f8:	b	15600 <__assert_fail@plt+0x447c>
   155fc:	ldr	r3, [pc, #132]	; 15688 <__assert_fail@plt+0x4504>
   15600:	str	r3, [fp, #-8]
   15604:	bl	11094 <__errno_location@plt>
   15608:	mov	r3, r0
   1560c:	ldr	r3, [r3]
   15610:	str	r3, [fp, #-12]
   15614:	ldr	r3, [fp, #-8]
   15618:	ldr	r3, [r3]
   1561c:	ldr	r2, [fp, #-8]
   15620:	ldr	r2, [r2, #4]
   15624:	ldr	r1, [fp, #-8]
   15628:	add	r1, r1, #8
   1562c:	ldr	r0, [fp, #-8]
   15630:	ldr	r0, [r0, #40]	; 0x28
   15634:	ldr	ip, [fp, #-8]
   15638:	ldr	ip, [ip, #44]	; 0x2c
   1563c:	str	ip, [sp, #16]
   15640:	str	r0, [sp, #12]
   15644:	str	r1, [sp, #8]
   15648:	str	r2, [sp, #4]
   1564c:	str	r3, [sp]
   15650:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15654:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15658:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1565c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15660:	bl	13f20 <__assert_fail@plt+0x2d9c>
   15664:	str	r0, [fp, #-16]
   15668:	bl	11094 <__errno_location@plt>
   1566c:	mov	r2, r0
   15670:	ldr	r3, [fp, #-12]
   15674:	str	r3, [r2]
   15678:	ldr	r3, [fp, #-16]
   1567c:	mov	r0, r3
   15680:	sub	sp, fp, #4
   15684:	pop	{fp, pc}
   15688:	andeq	sl, r2, r4, lsl r2
   1568c:	push	{fp, lr}
   15690:	add	fp, sp, #4
   15694:	sub	sp, sp, #16
   15698:	str	r0, [fp, #-8]
   1569c:	str	r1, [fp, #-12]
   156a0:	str	r2, [fp, #-16]
   156a4:	ldr	r3, [fp, #-16]
   156a8:	mov	r2, #0
   156ac:	ldr	r1, [fp, #-12]
   156b0:	ldr	r0, [fp, #-8]
   156b4:	bl	156c8 <__assert_fail@plt+0x4544>
   156b8:	mov	r3, r0
   156bc:	mov	r0, r3
   156c0:	sub	sp, fp, #4
   156c4:	pop	{fp, pc}
   156c8:	push	{fp, lr}
   156cc:	add	fp, sp, #4
   156d0:	sub	sp, sp, #64	; 0x40
   156d4:	str	r0, [fp, #-32]	; 0xffffffe0
   156d8:	str	r1, [fp, #-36]	; 0xffffffdc
   156dc:	str	r2, [fp, #-40]	; 0xffffffd8
   156e0:	str	r3, [fp, #-44]	; 0xffffffd4
   156e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   156e8:	cmp	r3, #0
   156ec:	beq	156f8 <__assert_fail@plt+0x4574>
   156f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   156f4:	b	156fc <__assert_fail@plt+0x4578>
   156f8:	ldr	r3, [pc, #292]	; 15824 <__assert_fail@plt+0x46a0>
   156fc:	str	r3, [fp, #-8]
   15700:	bl	11094 <__errno_location@plt>
   15704:	mov	r3, r0
   15708:	ldr	r3, [r3]
   1570c:	str	r3, [fp, #-12]
   15710:	ldr	r3, [fp, #-8]
   15714:	ldr	r3, [r3, #4]
   15718:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1571c:	cmp	r2, #0
   15720:	moveq	r2, #1
   15724:	movne	r2, #0
   15728:	uxtb	r2, r2
   1572c:	orr	r3, r3, r2
   15730:	str	r3, [fp, #-16]
   15734:	ldr	r3, [fp, #-8]
   15738:	ldr	r3, [r3]
   1573c:	ldr	r2, [fp, #-8]
   15740:	add	r2, r2, #8
   15744:	ldr	r1, [fp, #-8]
   15748:	ldr	r1, [r1, #40]	; 0x28
   1574c:	ldr	r0, [fp, #-8]
   15750:	ldr	r0, [r0, #44]	; 0x2c
   15754:	str	r0, [sp, #16]
   15758:	str	r1, [sp, #12]
   1575c:	str	r2, [sp, #8]
   15760:	ldr	r2, [fp, #-16]
   15764:	str	r2, [sp, #4]
   15768:	str	r3, [sp]
   1576c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15770:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15774:	mov	r1, #0
   15778:	mov	r0, #0
   1577c:	bl	13f20 <__assert_fail@plt+0x2d9c>
   15780:	mov	r3, r0
   15784:	add	r3, r3, #1
   15788:	str	r3, [fp, #-20]	; 0xffffffec
   1578c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15790:	bl	16de0 <__assert_fail@plt+0x5c5c>
   15794:	mov	r3, r0
   15798:	str	r3, [fp, #-24]	; 0xffffffe8
   1579c:	ldr	r3, [fp, #-8]
   157a0:	ldr	r3, [r3]
   157a4:	ldr	r2, [fp, #-8]
   157a8:	add	r2, r2, #8
   157ac:	ldr	r1, [fp, #-8]
   157b0:	ldr	r1, [r1, #40]	; 0x28
   157b4:	ldr	r0, [fp, #-8]
   157b8:	ldr	r0, [r0, #44]	; 0x2c
   157bc:	str	r0, [sp, #16]
   157c0:	str	r1, [sp, #12]
   157c4:	str	r2, [sp, #8]
   157c8:	ldr	r2, [fp, #-16]
   157cc:	str	r2, [sp, #4]
   157d0:	str	r3, [sp]
   157d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   157d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   157dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   157e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157e4:	bl	13f20 <__assert_fail@plt+0x2d9c>
   157e8:	bl	11094 <__errno_location@plt>
   157ec:	mov	r2, r0
   157f0:	ldr	r3, [fp, #-12]
   157f4:	str	r3, [r2]
   157f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   157fc:	cmp	r3, #0
   15800:	beq	15814 <__assert_fail@plt+0x4690>
   15804:	ldr	r3, [fp, #-20]	; 0xffffffec
   15808:	sub	r2, r3, #1
   1580c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15810:	str	r2, [r3]
   15814:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15818:	mov	r0, r3
   1581c:	sub	sp, fp, #4
   15820:	pop	{fp, pc}
   15824:	andeq	sl, r2, r4, lsl r2
   15828:	push	{fp, lr}
   1582c:	add	fp, sp, #4
   15830:	sub	sp, sp, #8
   15834:	ldr	r3, [pc, #196]	; 15900 <__assert_fail@plt+0x477c>
   15838:	ldr	r3, [r3]
   1583c:	str	r3, [fp, #-12]
   15840:	mov	r3, #1
   15844:	str	r3, [fp, #-8]
   15848:	b	15874 <__assert_fail@plt+0x46f0>
   1584c:	ldr	r3, [fp, #-8]
   15850:	lsl	r3, r3, #3
   15854:	ldr	r2, [fp, #-12]
   15858:	add	r3, r2, r3
   1585c:	ldr	r3, [r3, #4]
   15860:	mov	r0, r3
   15864:	bl	137d4 <__assert_fail@plt+0x2650>
   15868:	ldr	r3, [fp, #-8]
   1586c:	add	r3, r3, #1
   15870:	str	r3, [fp, #-8]
   15874:	ldr	r3, [pc, #136]	; 15904 <__assert_fail@plt+0x4780>
   15878:	ldr	r3, [r3]
   1587c:	ldr	r2, [fp, #-8]
   15880:	cmp	r2, r3
   15884:	blt	1584c <__assert_fail@plt+0x46c8>
   15888:	ldr	r3, [fp, #-12]
   1588c:	ldr	r3, [r3, #4]
   15890:	ldr	r2, [pc, #112]	; 15908 <__assert_fail@plt+0x4784>
   15894:	cmp	r3, r2
   15898:	beq	158c4 <__assert_fail@plt+0x4740>
   1589c:	ldr	r3, [fp, #-12]
   158a0:	ldr	r3, [r3, #4]
   158a4:	mov	r0, r3
   158a8:	bl	137d4 <__assert_fail@plt+0x2650>
   158ac:	ldr	r3, [pc, #88]	; 1590c <__assert_fail@plt+0x4788>
   158b0:	mov	r2, #256	; 0x100
   158b4:	str	r2, [r3]
   158b8:	ldr	r3, [pc, #76]	; 1590c <__assert_fail@plt+0x4788>
   158bc:	ldr	r2, [pc, #68]	; 15908 <__assert_fail@plt+0x4784>
   158c0:	str	r2, [r3, #4]
   158c4:	ldr	r3, [fp, #-12]
   158c8:	ldr	r2, [pc, #60]	; 1590c <__assert_fail@plt+0x4788>
   158cc:	cmp	r3, r2
   158d0:	beq	158e8 <__assert_fail@plt+0x4764>
   158d4:	ldr	r0, [fp, #-12]
   158d8:	bl	137d4 <__assert_fail@plt+0x2650>
   158dc:	ldr	r3, [pc, #28]	; 15900 <__assert_fail@plt+0x477c>
   158e0:	ldr	r2, [pc, #36]	; 1590c <__assert_fail@plt+0x4788>
   158e4:	str	r2, [r3]
   158e8:	ldr	r3, [pc, #20]	; 15904 <__assert_fail@plt+0x4780>
   158ec:	mov	r2, #1
   158f0:	str	r2, [r3]
   158f4:	nop			; (mov r0, r0)
   158f8:	sub	sp, fp, #4
   158fc:	pop	{fp, pc}
   15900:	andeq	sl, r2, r8, lsr r1
   15904:	andeq	sl, r2, ip, lsr #2
   15908:	andeq	sl, r2, r4, asr #4
   1590c:	andeq	sl, r2, r0, lsr r1
   15910:	push	{r4, fp, lr}
   15914:	add	fp, sp, #8
   15918:	sub	sp, sp, #84	; 0x54
   1591c:	str	r0, [fp, #-56]	; 0xffffffc8
   15920:	str	r1, [fp, #-60]	; 0xffffffc4
   15924:	str	r2, [fp, #-64]	; 0xffffffc0
   15928:	str	r3, [fp, #-68]	; 0xffffffbc
   1592c:	bl	11094 <__errno_location@plt>
   15930:	mov	r3, r0
   15934:	ldr	r3, [r3]
   15938:	str	r3, [fp, #-24]	; 0xffffffe8
   1593c:	ldr	r3, [pc, #640]	; 15bc4 <__assert_fail@plt+0x4a40>
   15940:	ldr	r3, [r3]
   15944:	str	r3, [fp, #-16]
   15948:	mvn	r3, #-2147483648	; 0x80000000
   1594c:	str	r3, [fp, #-28]	; 0xffffffe4
   15950:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15954:	cmp	r3, #0
   15958:	blt	1596c <__assert_fail@plt+0x47e8>
   1595c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15960:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15964:	cmp	r2, r3
   15968:	blt	15970 <__assert_fail@plt+0x47ec>
   1596c:	bl	1116c <abort@plt>
   15970:	ldr	r3, [pc, #592]	; 15bc8 <__assert_fail@plt+0x4a44>
   15974:	ldr	r2, [r3]
   15978:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1597c:	cmp	r2, r3
   15980:	bgt	15a54 <__assert_fail@plt+0x48d0>
   15984:	ldr	r3, [fp, #-16]
   15988:	ldr	r2, [pc, #572]	; 15bcc <__assert_fail@plt+0x4a48>
   1598c:	cmp	r3, r2
   15990:	moveq	r3, #1
   15994:	movne	r3, #0
   15998:	strb	r3, [fp, #-29]	; 0xffffffe3
   1599c:	ldr	r3, [pc, #548]	; 15bc8 <__assert_fail@plt+0x4a44>
   159a0:	ldr	r3, [r3]
   159a4:	str	r3, [fp, #-48]	; 0xffffffd0
   159a8:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   159ac:	cmp	r3, #0
   159b0:	beq	159bc <__assert_fail@plt+0x4838>
   159b4:	mov	r0, #0
   159b8:	b	159c0 <__assert_fail@plt+0x483c>
   159bc:	ldr	r0, [fp, #-16]
   159c0:	ldr	r3, [pc, #512]	; 15bc8 <__assert_fail@plt+0x4a44>
   159c4:	ldr	r3, [r3]
   159c8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   159cc:	sub	r3, r2, r3
   159d0:	add	r2, r3, #1
   159d4:	sub	r1, fp, #48	; 0x30
   159d8:	mov	r3, #8
   159dc:	str	r3, [sp]
   159e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   159e4:	bl	17100 <__assert_fail@plt+0x5f7c>
   159e8:	str	r0, [fp, #-16]
   159ec:	ldr	r2, [pc, #464]	; 15bc4 <__assert_fail@plt+0x4a40>
   159f0:	ldr	r3, [fp, #-16]
   159f4:	str	r3, [r2]
   159f8:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   159fc:	cmp	r3, #0
   15a00:	beq	15a14 <__assert_fail@plt+0x4890>
   15a04:	ldr	r3, [fp, #-16]
   15a08:	ldr	r2, [pc, #444]	; 15bcc <__assert_fail@plt+0x4a48>
   15a0c:	ldm	r2, {r0, r1}
   15a10:	stm	r3, {r0, r1}
   15a14:	ldr	r3, [pc, #428]	; 15bc8 <__assert_fail@plt+0x4a44>
   15a18:	ldr	r3, [r3]
   15a1c:	lsl	r3, r3, #3
   15a20:	ldr	r2, [fp, #-16]
   15a24:	add	r0, r2, r3
   15a28:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15a2c:	ldr	r3, [pc, #404]	; 15bc8 <__assert_fail@plt+0x4a44>
   15a30:	ldr	r3, [r3]
   15a34:	sub	r3, r2, r3
   15a38:	lsl	r3, r3, #3
   15a3c:	mov	r2, r3
   15a40:	mov	r1, #0
   15a44:	bl	110ac <memset@plt>
   15a48:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a4c:	ldr	r2, [pc, #372]	; 15bc8 <__assert_fail@plt+0x4a44>
   15a50:	str	r3, [r2]
   15a54:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15a58:	lsl	r3, r3, #3
   15a5c:	ldr	r2, [fp, #-16]
   15a60:	add	r3, r2, r3
   15a64:	ldr	r3, [r3]
   15a68:	str	r3, [fp, #-36]	; 0xffffffdc
   15a6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15a70:	lsl	r3, r3, #3
   15a74:	ldr	r2, [fp, #-16]
   15a78:	add	r3, r2, r3
   15a7c:	ldr	r3, [r3, #4]
   15a80:	str	r3, [fp, #-20]	; 0xffffffec
   15a84:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15a88:	ldr	r3, [r3, #4]
   15a8c:	orr	r3, r3, #1
   15a90:	str	r3, [fp, #-40]	; 0xffffffd8
   15a94:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15a98:	ldr	r3, [r3]
   15a9c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15aa0:	add	r2, r2, #8
   15aa4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15aa8:	ldr	r1, [r1, #40]	; 0x28
   15aac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15ab0:	ldr	r0, [r0, #44]	; 0x2c
   15ab4:	str	r0, [sp, #16]
   15ab8:	str	r1, [sp, #12]
   15abc:	str	r2, [sp, #8]
   15ac0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15ac4:	str	r2, [sp, #4]
   15ac8:	str	r3, [sp]
   15acc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15ad0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15ad4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15ad8:	ldr	r0, [fp, #-20]	; 0xffffffec
   15adc:	bl	13f20 <__assert_fail@plt+0x2d9c>
   15ae0:	str	r0, [fp, #-44]	; 0xffffffd4
   15ae4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15ae8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15aec:	cmp	r2, r3
   15af0:	bhi	15ba4 <__assert_fail@plt+0x4a20>
   15af4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15af8:	lsl	r3, r3, #3
   15afc:	ldr	r2, [fp, #-16]
   15b00:	add	r3, r2, r3
   15b04:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15b08:	add	r2, r2, #1
   15b0c:	str	r2, [fp, #-36]	; 0xffffffdc
   15b10:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15b14:	str	r2, [r3]
   15b18:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b1c:	ldr	r2, [pc, #172]	; 15bd0 <__assert_fail@plt+0x4a4c>
   15b20:	cmp	r3, r2
   15b24:	beq	15b30 <__assert_fail@plt+0x49ac>
   15b28:	ldr	r0, [fp, #-20]	; 0xffffffec
   15b2c:	bl	137d4 <__assert_fail@plt+0x2650>
   15b30:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15b34:	lsl	r3, r3, #3
   15b38:	ldr	r2, [fp, #-16]
   15b3c:	add	r4, r2, r3
   15b40:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15b44:	bl	16de0 <__assert_fail@plt+0x5c5c>
   15b48:	mov	r3, r0
   15b4c:	str	r3, [fp, #-20]	; 0xffffffec
   15b50:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b54:	str	r3, [r4, #4]
   15b58:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15b5c:	ldr	r3, [r3]
   15b60:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15b64:	add	r2, r2, #8
   15b68:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15b6c:	ldr	r1, [r1, #40]	; 0x28
   15b70:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15b74:	ldr	r0, [r0, #44]	; 0x2c
   15b78:	str	r0, [sp, #16]
   15b7c:	str	r1, [sp, #12]
   15b80:	str	r2, [sp, #8]
   15b84:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15b88:	str	r2, [sp, #4]
   15b8c:	str	r3, [sp]
   15b90:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15b94:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15b98:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15b9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15ba0:	bl	13f20 <__assert_fail@plt+0x2d9c>
   15ba4:	bl	11094 <__errno_location@plt>
   15ba8:	mov	r2, r0
   15bac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bb0:	str	r3, [r2]
   15bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bb8:	mov	r0, r3
   15bbc:	sub	sp, fp, #8
   15bc0:	pop	{r4, fp, pc}
   15bc4:	andeq	sl, r2, r8, lsr r1
   15bc8:	andeq	sl, r2, ip, lsr #2
   15bcc:	andeq	sl, r2, r0, lsr r1
   15bd0:	andeq	sl, r2, r4, asr #4
   15bd4:	push	{fp, lr}
   15bd8:	add	fp, sp, #4
   15bdc:	sub	sp, sp, #8
   15be0:	str	r0, [fp, #-8]
   15be4:	str	r1, [fp, #-12]
   15be8:	ldr	r3, [pc, #28]	; 15c0c <__assert_fail@plt+0x4a88>
   15bec:	mvn	r2, #0
   15bf0:	ldr	r1, [fp, #-12]
   15bf4:	ldr	r0, [fp, #-8]
   15bf8:	bl	15910 <__assert_fail@plt+0x478c>
   15bfc:	mov	r3, r0
   15c00:	mov	r0, r3
   15c04:	sub	sp, fp, #4
   15c08:	pop	{fp, pc}
   15c0c:	andeq	sl, r2, r4, lsl r2
   15c10:	push	{fp, lr}
   15c14:	add	fp, sp, #4
   15c18:	sub	sp, sp, #16
   15c1c:	str	r0, [fp, #-8]
   15c20:	str	r1, [fp, #-12]
   15c24:	str	r2, [fp, #-16]
   15c28:	ldr	r3, [pc, #28]	; 15c4c <__assert_fail@plt+0x4ac8>
   15c2c:	ldr	r2, [fp, #-16]
   15c30:	ldr	r1, [fp, #-12]
   15c34:	ldr	r0, [fp, #-8]
   15c38:	bl	15910 <__assert_fail@plt+0x478c>
   15c3c:	mov	r3, r0
   15c40:	mov	r0, r3
   15c44:	sub	sp, fp, #4
   15c48:	pop	{fp, pc}
   15c4c:	andeq	sl, r2, r4, lsl r2
   15c50:	push	{fp, lr}
   15c54:	add	fp, sp, #4
   15c58:	sub	sp, sp, #8
   15c5c:	str	r0, [fp, #-8]
   15c60:	ldr	r1, [fp, #-8]
   15c64:	mov	r0, #0
   15c68:	bl	15bd4 <__assert_fail@plt+0x4a50>
   15c6c:	mov	r3, r0
   15c70:	mov	r0, r3
   15c74:	sub	sp, fp, #4
   15c78:	pop	{fp, pc}
   15c7c:	push	{fp, lr}
   15c80:	add	fp, sp, #4
   15c84:	sub	sp, sp, #8
   15c88:	str	r0, [fp, #-8]
   15c8c:	str	r1, [fp, #-12]
   15c90:	ldr	r2, [fp, #-12]
   15c94:	ldr	r1, [fp, #-8]
   15c98:	mov	r0, #0
   15c9c:	bl	15c10 <__assert_fail@plt+0x4a8c>
   15ca0:	mov	r3, r0
   15ca4:	mov	r0, r3
   15ca8:	sub	sp, fp, #4
   15cac:	pop	{fp, pc}
   15cb0:	push	{fp, lr}
   15cb4:	add	fp, sp, #4
   15cb8:	sub	sp, sp, #64	; 0x40
   15cbc:	str	r0, [fp, #-56]	; 0xffffffc8
   15cc0:	str	r1, [fp, #-60]	; 0xffffffc4
   15cc4:	str	r2, [fp, #-64]	; 0xffffffc0
   15cc8:	sub	r3, fp, #52	; 0x34
   15ccc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15cd0:	mov	r0, r3
   15cd4:	bl	13dbc <__assert_fail@plt+0x2c38>
   15cd8:	sub	r3, fp, #52	; 0x34
   15cdc:	mvn	r2, #0
   15ce0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15ce4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15ce8:	bl	15910 <__assert_fail@plt+0x478c>
   15cec:	mov	r3, r0
   15cf0:	mov	r0, r3
   15cf4:	sub	sp, fp, #4
   15cf8:	pop	{fp, pc}
   15cfc:	push	{fp, lr}
   15d00:	add	fp, sp, #4
   15d04:	sub	sp, sp, #64	; 0x40
   15d08:	str	r0, [fp, #-56]	; 0xffffffc8
   15d0c:	str	r1, [fp, #-60]	; 0xffffffc4
   15d10:	str	r2, [fp, #-64]	; 0xffffffc0
   15d14:	str	r3, [fp, #-68]	; 0xffffffbc
   15d18:	sub	r3, fp, #52	; 0x34
   15d1c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15d20:	mov	r0, r3
   15d24:	bl	13dbc <__assert_fail@plt+0x2c38>
   15d28:	sub	r3, fp, #52	; 0x34
   15d2c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15d30:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15d34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15d38:	bl	15910 <__assert_fail@plt+0x478c>
   15d3c:	mov	r3, r0
   15d40:	mov	r0, r3
   15d44:	sub	sp, fp, #4
   15d48:	pop	{fp, pc}
   15d4c:	push	{fp, lr}
   15d50:	add	fp, sp, #4
   15d54:	sub	sp, sp, #8
   15d58:	str	r0, [fp, #-8]
   15d5c:	str	r1, [fp, #-12]
   15d60:	ldr	r2, [fp, #-12]
   15d64:	ldr	r1, [fp, #-8]
   15d68:	mov	r0, #0
   15d6c:	bl	15cb0 <__assert_fail@plt+0x4b2c>
   15d70:	mov	r3, r0
   15d74:	mov	r0, r3
   15d78:	sub	sp, fp, #4
   15d7c:	pop	{fp, pc}
   15d80:	push	{fp, lr}
   15d84:	add	fp, sp, #4
   15d88:	sub	sp, sp, #16
   15d8c:	str	r0, [fp, #-8]
   15d90:	str	r1, [fp, #-12]
   15d94:	str	r2, [fp, #-16]
   15d98:	ldr	r3, [fp, #-16]
   15d9c:	ldr	r2, [fp, #-12]
   15da0:	ldr	r1, [fp, #-8]
   15da4:	mov	r0, #0
   15da8:	bl	15cfc <__assert_fail@plt+0x4b78>
   15dac:	mov	r3, r0
   15db0:	mov	r0, r3
   15db4:	sub	sp, fp, #4
   15db8:	pop	{fp, pc}
   15dbc:	push	{fp, lr}
   15dc0:	add	fp, sp, #4
   15dc4:	sub	sp, sp, #64	; 0x40
   15dc8:	str	r0, [fp, #-56]	; 0xffffffc8
   15dcc:	str	r1, [fp, #-60]	; 0xffffffc4
   15dd0:	mov	r3, r2
   15dd4:	strb	r3, [fp, #-61]	; 0xffffffc3
   15dd8:	ldr	r3, [pc, #84]	; 15e34 <__assert_fail@plt+0x4cb0>
   15ddc:	sub	ip, fp, #52	; 0x34
   15de0:	mov	lr, r3
   15de4:	ldm	lr!, {r0, r1, r2, r3}
   15de8:	stmia	ip!, {r0, r1, r2, r3}
   15dec:	ldm	lr!, {r0, r1, r2, r3}
   15df0:	stmia	ip!, {r0, r1, r2, r3}
   15df4:	ldm	lr, {r0, r1, r2, r3}
   15df8:	stm	ip, {r0, r1, r2, r3}
   15dfc:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   15e00:	sub	r3, fp, #52	; 0x34
   15e04:	mov	r2, #1
   15e08:	mov	r0, r3
   15e0c:	bl	13c28 <__assert_fail@plt+0x2aa4>
   15e10:	sub	r3, fp, #52	; 0x34
   15e14:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15e18:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15e1c:	mov	r0, #0
   15e20:	bl	15910 <__assert_fail@plt+0x478c>
   15e24:	mov	r3, r0
   15e28:	mov	r0, r3
   15e2c:	sub	sp, fp, #4
   15e30:	pop	{fp, pc}
   15e34:	andeq	sl, r2, r4, lsl r2
   15e38:	push	{fp, lr}
   15e3c:	add	fp, sp, #4
   15e40:	sub	sp, sp, #8
   15e44:	str	r0, [fp, #-8]
   15e48:	mov	r3, r1
   15e4c:	strb	r3, [fp, #-9]
   15e50:	ldrb	r3, [fp, #-9]
   15e54:	mov	r2, r3
   15e58:	mvn	r1, #0
   15e5c:	ldr	r0, [fp, #-8]
   15e60:	bl	15dbc <__assert_fail@plt+0x4c38>
   15e64:	mov	r3, r0
   15e68:	mov	r0, r3
   15e6c:	sub	sp, fp, #4
   15e70:	pop	{fp, pc}
   15e74:	push	{fp, lr}
   15e78:	add	fp, sp, #4
   15e7c:	sub	sp, sp, #8
   15e80:	str	r0, [fp, #-8]
   15e84:	mov	r1, #58	; 0x3a
   15e88:	ldr	r0, [fp, #-8]
   15e8c:	bl	15e38 <__assert_fail@plt+0x4cb4>
   15e90:	mov	r3, r0
   15e94:	mov	r0, r3
   15e98:	sub	sp, fp, #4
   15e9c:	pop	{fp, pc}
   15ea0:	push	{fp, lr}
   15ea4:	add	fp, sp, #4
   15ea8:	sub	sp, sp, #8
   15eac:	str	r0, [fp, #-8]
   15eb0:	str	r1, [fp, #-12]
   15eb4:	mov	r2, #58	; 0x3a
   15eb8:	ldr	r1, [fp, #-12]
   15ebc:	ldr	r0, [fp, #-8]
   15ec0:	bl	15dbc <__assert_fail@plt+0x4c38>
   15ec4:	mov	r3, r0
   15ec8:	mov	r0, r3
   15ecc:	sub	sp, fp, #4
   15ed0:	pop	{fp, pc}
   15ed4:	push	{fp, lr}
   15ed8:	add	fp, sp, #4
   15edc:	sub	sp, sp, #112	; 0x70
   15ee0:	str	r0, [fp, #-56]	; 0xffffffc8
   15ee4:	str	r1, [fp, #-60]	; 0xffffffc4
   15ee8:	str	r2, [fp, #-64]	; 0xffffffc0
   15eec:	sub	r3, fp, #116	; 0x74
   15ef0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ef4:	mov	r0, r3
   15ef8:	bl	13dbc <__assert_fail@plt+0x2c38>
   15efc:	sub	ip, fp, #52	; 0x34
   15f00:	sub	lr, fp, #116	; 0x74
   15f04:	ldm	lr!, {r0, r1, r2, r3}
   15f08:	stmia	ip!, {r0, r1, r2, r3}
   15f0c:	ldm	lr!, {r0, r1, r2, r3}
   15f10:	stmia	ip!, {r0, r1, r2, r3}
   15f14:	ldm	lr, {r0, r1, r2, r3}
   15f18:	stm	ip, {r0, r1, r2, r3}
   15f1c:	sub	r3, fp, #52	; 0x34
   15f20:	mov	r2, #1
   15f24:	mov	r1, #58	; 0x3a
   15f28:	mov	r0, r3
   15f2c:	bl	13c28 <__assert_fail@plt+0x2aa4>
   15f30:	sub	r3, fp, #52	; 0x34
   15f34:	mvn	r2, #0
   15f38:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15f3c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15f40:	bl	15910 <__assert_fail@plt+0x478c>
   15f44:	mov	r3, r0
   15f48:	mov	r0, r3
   15f4c:	sub	sp, fp, #4
   15f50:	pop	{fp, pc}
   15f54:	push	{fp, lr}
   15f58:	add	fp, sp, #4
   15f5c:	sub	sp, sp, #24
   15f60:	str	r0, [fp, #-8]
   15f64:	str	r1, [fp, #-12]
   15f68:	str	r2, [fp, #-16]
   15f6c:	str	r3, [fp, #-20]	; 0xffffffec
   15f70:	mvn	r3, #0
   15f74:	str	r3, [sp]
   15f78:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f7c:	ldr	r2, [fp, #-16]
   15f80:	ldr	r1, [fp, #-12]
   15f84:	ldr	r0, [fp, #-8]
   15f88:	bl	15f9c <__assert_fail@plt+0x4e18>
   15f8c:	mov	r3, r0
   15f90:	mov	r0, r3
   15f94:	sub	sp, fp, #4
   15f98:	pop	{fp, pc}
   15f9c:	push	{fp, lr}
   15fa0:	add	fp, sp, #4
   15fa4:	sub	sp, sp, #64	; 0x40
   15fa8:	str	r0, [fp, #-56]	; 0xffffffc8
   15fac:	str	r1, [fp, #-60]	; 0xffffffc4
   15fb0:	str	r2, [fp, #-64]	; 0xffffffc0
   15fb4:	str	r3, [fp, #-68]	; 0xffffffbc
   15fb8:	ldr	r3, [pc, #84]	; 16014 <__assert_fail@plt+0x4e90>
   15fbc:	sub	ip, fp, #52	; 0x34
   15fc0:	mov	lr, r3
   15fc4:	ldm	lr!, {r0, r1, r2, r3}
   15fc8:	stmia	ip!, {r0, r1, r2, r3}
   15fcc:	ldm	lr!, {r0, r1, r2, r3}
   15fd0:	stmia	ip!, {r0, r1, r2, r3}
   15fd4:	ldm	lr, {r0, r1, r2, r3}
   15fd8:	stm	ip, {r0, r1, r2, r3}
   15fdc:	sub	r3, fp, #52	; 0x34
   15fe0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15fe4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15fe8:	mov	r0, r3
   15fec:	bl	13d40 <__assert_fail@plt+0x2bbc>
   15ff0:	sub	r3, fp, #52	; 0x34
   15ff4:	ldr	r2, [fp, #4]
   15ff8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15ffc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16000:	bl	15910 <__assert_fail@plt+0x478c>
   16004:	mov	r3, r0
   16008:	mov	r0, r3
   1600c:	sub	sp, fp, #4
   16010:	pop	{fp, pc}
   16014:	andeq	sl, r2, r4, lsl r2
   16018:	push	{fp, lr}
   1601c:	add	fp, sp, #4
   16020:	sub	sp, sp, #16
   16024:	str	r0, [fp, #-8]
   16028:	str	r1, [fp, #-12]
   1602c:	str	r2, [fp, #-16]
   16030:	ldr	r3, [fp, #-16]
   16034:	ldr	r2, [fp, #-12]
   16038:	ldr	r1, [fp, #-8]
   1603c:	mov	r0, #0
   16040:	bl	15f54 <__assert_fail@plt+0x4dd0>
   16044:	mov	r3, r0
   16048:	mov	r0, r3
   1604c:	sub	sp, fp, #4
   16050:	pop	{fp, pc}
   16054:	push	{fp, lr}
   16058:	add	fp, sp, #4
   1605c:	sub	sp, sp, #24
   16060:	str	r0, [fp, #-8]
   16064:	str	r1, [fp, #-12]
   16068:	str	r2, [fp, #-16]
   1606c:	str	r3, [fp, #-20]	; 0xffffffec
   16070:	ldr	r3, [fp, #-20]	; 0xffffffec
   16074:	str	r3, [sp]
   16078:	ldr	r3, [fp, #-16]
   1607c:	ldr	r2, [fp, #-12]
   16080:	ldr	r1, [fp, #-8]
   16084:	mov	r0, #0
   16088:	bl	15f9c <__assert_fail@plt+0x4e18>
   1608c:	mov	r3, r0
   16090:	mov	r0, r3
   16094:	sub	sp, fp, #4
   16098:	pop	{fp, pc}
   1609c:	push	{fp, lr}
   160a0:	add	fp, sp, #4
   160a4:	sub	sp, sp, #16
   160a8:	str	r0, [fp, #-8]
   160ac:	str	r1, [fp, #-12]
   160b0:	str	r2, [fp, #-16]
   160b4:	ldr	r3, [pc, #28]	; 160d8 <__assert_fail@plt+0x4f54>
   160b8:	ldr	r2, [fp, #-16]
   160bc:	ldr	r1, [fp, #-12]
   160c0:	ldr	r0, [fp, #-8]
   160c4:	bl	15910 <__assert_fail@plt+0x478c>
   160c8:	mov	r3, r0
   160cc:	mov	r0, r3
   160d0:	sub	sp, fp, #4
   160d4:	pop	{fp, pc}
   160d8:	andeq	sl, r2, ip, lsr r1
   160dc:	push	{fp, lr}
   160e0:	add	fp, sp, #4
   160e4:	sub	sp, sp, #8
   160e8:	str	r0, [fp, #-8]
   160ec:	str	r1, [fp, #-12]
   160f0:	ldr	r2, [fp, #-12]
   160f4:	ldr	r1, [fp, #-8]
   160f8:	mov	r0, #0
   160fc:	bl	1609c <__assert_fail@plt+0x4f18>
   16100:	mov	r3, r0
   16104:	mov	r0, r3
   16108:	sub	sp, fp, #4
   1610c:	pop	{fp, pc}
   16110:	push	{fp, lr}
   16114:	add	fp, sp, #4
   16118:	sub	sp, sp, #8
   1611c:	str	r0, [fp, #-8]
   16120:	str	r1, [fp, #-12]
   16124:	mvn	r2, #0
   16128:	ldr	r1, [fp, #-12]
   1612c:	ldr	r0, [fp, #-8]
   16130:	bl	1609c <__assert_fail@plt+0x4f18>
   16134:	mov	r3, r0
   16138:	mov	r0, r3
   1613c:	sub	sp, fp, #4
   16140:	pop	{fp, pc}
   16144:	push	{fp, lr}
   16148:	add	fp, sp, #4
   1614c:	sub	sp, sp, #8
   16150:	str	r0, [fp, #-8]
   16154:	ldr	r1, [fp, #-8]
   16158:	mov	r0, #0
   1615c:	bl	16110 <__assert_fail@plt+0x4f8c>
   16160:	mov	r3, r0
   16164:	mov	r0, r3
   16168:	sub	sp, fp, #4
   1616c:	pop	{fp, pc}
   16170:	push	{fp, lr}
   16174:	add	fp, sp, #4
   16178:	sub	sp, sp, #16
   1617c:	str	r0, [fp, #-16]
   16180:	mov	r0, #33	; 0x21
   16184:	bl	16d78 <__assert_fail@plt+0x5bf4>
   16188:	mov	r3, r0
   1618c:	str	r3, [fp, #-12]
   16190:	ldr	r3, [fp, #-16]
   16194:	add	r3, r3, #44	; 0x2c
   16198:	mov	r2, #32
   1619c:	mov	r1, r3
   161a0:	ldr	r0, [fp, #-12]
   161a4:	bl	110b8 <strncpy@plt>
   161a8:	ldr	r3, [fp, #-12]
   161ac:	add	r3, r3, #32
   161b0:	mov	r2, #0
   161b4:	strb	r2, [r3]
   161b8:	ldr	r0, [fp, #-12]
   161bc:	bl	11070 <strlen@plt>
   161c0:	mov	r2, r0
   161c4:	ldr	r3, [fp, #-12]
   161c8:	add	r3, r3, r2
   161cc:	str	r3, [fp, #-8]
   161d0:	b	161ec <__assert_fail@plt+0x5068>
   161d4:	ldr	r3, [fp, #-8]
   161d8:	sub	r3, r3, #1
   161dc:	str	r3, [fp, #-8]
   161e0:	ldr	r3, [fp, #-8]
   161e4:	mov	r2, #0
   161e8:	strb	r2, [r3]
   161ec:	ldr	r2, [fp, #-12]
   161f0:	ldr	r3, [fp, #-8]
   161f4:	cmp	r2, r3
   161f8:	bcs	16210 <__assert_fail@plt+0x508c>
   161fc:	ldr	r3, [fp, #-8]
   16200:	sub	r3, r3, #1
   16204:	ldrb	r3, [r3]
   16208:	cmp	r3, #32
   1620c:	beq	161d4 <__assert_fail@plt+0x5050>
   16210:	ldr	r3, [fp, #-12]
   16214:	mov	r0, r3
   16218:	sub	sp, fp, #4
   1621c:	pop	{fp, pc}
   16220:	push	{fp, lr}
   16224:	add	fp, sp, #4
   16228:	sub	sp, sp, #16
   1622c:	str	r0, [fp, #-16]
   16230:	str	r1, [fp, #-20]	; 0xffffffec
   16234:	ldr	r3, [fp, #-16]
   16238:	ldrb	r3, [r3, #44]	; 0x2c
   1623c:	cmp	r3, #0
   16240:	beq	1625c <__assert_fail@plt+0x50d8>
   16244:	ldr	r3, [fp, #-16]
   16248:	ldrsh	r3, [r3]
   1624c:	cmp	r3, #7
   16250:	bne	1625c <__assert_fail@plt+0x50d8>
   16254:	mov	r3, #1
   16258:	b	16260 <__assert_fail@plt+0x50dc>
   1625c:	mov	r3, #0
   16260:	strb	r3, [fp, #-5]
   16264:	ldrb	r3, [fp, #-5]
   16268:	and	r3, r3, #1
   1626c:	strb	r3, [fp, #-5]
   16270:	ldr	r3, [fp, #-20]	; 0xffffffec
   16274:	and	r3, r3, #2
   16278:	cmp	r3, #0
   1627c:	beq	1629c <__assert_fail@plt+0x5118>
   16280:	ldrb	r3, [fp, #-5]
   16284:	eor	r3, r3, #1
   16288:	uxtb	r3, r3
   1628c:	cmp	r3, #0
   16290:	beq	1629c <__assert_fail@plt+0x5118>
   16294:	mov	r3, #0
   16298:	b	16308 <__assert_fail@plt+0x5184>
   1629c:	ldr	r3, [fp, #-20]	; 0xffffffec
   162a0:	and	r3, r3, #1
   162a4:	cmp	r3, #0
   162a8:	beq	16304 <__assert_fail@plt+0x5180>
   162ac:	ldrb	r3, [fp, #-5]
   162b0:	cmp	r3, #0
   162b4:	beq	16304 <__assert_fail@plt+0x5180>
   162b8:	ldr	r3, [fp, #-16]
   162bc:	ldr	r3, [r3, #4]
   162c0:	cmp	r3, #0
   162c4:	ble	16304 <__assert_fail@plt+0x5180>
   162c8:	ldr	r3, [fp, #-16]
   162cc:	ldr	r3, [r3, #4]
   162d0:	mov	r1, #0
   162d4:	mov	r0, r3
   162d8:	bl	11034 <kill@plt>
   162dc:	mov	r3, r0
   162e0:	cmp	r3, #0
   162e4:	bge	16304 <__assert_fail@plt+0x5180>
   162e8:	bl	11094 <__errno_location@plt>
   162ec:	mov	r3, r0
   162f0:	ldr	r3, [r3]
   162f4:	cmp	r3, #3
   162f8:	bne	16304 <__assert_fail@plt+0x5180>
   162fc:	mov	r3, #0
   16300:	b	16308 <__assert_fail@plt+0x5184>
   16304:	mov	r3, #1
   16308:	mov	r0, r3
   1630c:	sub	sp, fp, #4
   16310:	pop	{fp, pc}
   16314:	push	{fp, lr}
   16318:	add	fp, sp, #4
   1631c:	sub	sp, sp, #40	; 0x28
   16320:	str	r0, [fp, #-24]	; 0xffffffe8
   16324:	str	r1, [fp, #-28]	; 0xffffffe4
   16328:	str	r2, [fp, #-32]	; 0xffffffe0
   1632c:	str	r3, [fp, #-36]	; 0xffffffdc
   16330:	mov	r3, #0
   16334:	str	r3, [fp, #-8]
   16338:	mov	r3, #0
   1633c:	str	r3, [fp, #-20]	; 0xffffffec
   16340:	mov	r3, #0
   16344:	str	r3, [fp, #-12]
   16348:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1634c:	bl	10ecc <utmpxname@plt>
   16350:	bl	10f50 <setutxent@plt>
   16354:	b	163e4 <__assert_fail@plt+0x5260>
   16358:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1635c:	ldr	r0, [fp, #-16]
   16360:	bl	16220 <__assert_fail@plt+0x509c>
   16364:	mov	r3, r0
   16368:	cmp	r3, #0
   1636c:	beq	163e4 <__assert_fail@plt+0x5260>
   16370:	ldr	r3, [fp, #-20]	; 0xffffffec
   16374:	ldr	r2, [fp, #-8]
   16378:	cmp	r2, r3
   1637c:	bne	163a0 <__assert_fail@plt+0x521c>
   16380:	sub	r1, fp, #20
   16384:	mov	r3, #384	; 0x180
   16388:	str	r3, [sp]
   1638c:	mvn	r3, #0
   16390:	mov	r2, #1
   16394:	ldr	r0, [fp, #-12]
   16398:	bl	17100 <__assert_fail@plt+0x5f7c>
   1639c:	str	r0, [fp, #-12]
   163a0:	ldr	r3, [fp, #-8]
   163a4:	add	r2, r3, #1
   163a8:	str	r2, [fp, #-8]
   163ac:	mov	r2, r3
   163b0:	mov	r3, r2
   163b4:	lsl	r3, r3, #1
   163b8:	add	r3, r3, r2
   163bc:	lsl	r3, r3, #7
   163c0:	mov	r2, r3
   163c4:	ldr	r3, [fp, #-12]
   163c8:	add	r2, r3, r2
   163cc:	ldr	r3, [fp, #-16]
   163d0:	mov	r0, r2
   163d4:	mov	r1, r3
   163d8:	mov	r3, #384	; 0x180
   163dc:	mov	r2, r3
   163e0:	bl	10efc <memcpy@plt>
   163e4:	bl	11178 <getutxent@plt>
   163e8:	str	r0, [fp, #-16]
   163ec:	ldr	r3, [fp, #-16]
   163f0:	cmp	r3, #0
   163f4:	bne	16358 <__assert_fail@plt+0x51d4>
   163f8:	bl	110f4 <endutxent@plt>
   163fc:	ldr	r2, [fp, #-8]
   16400:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16404:	str	r2, [r3]
   16408:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1640c:	ldr	r2, [fp, #-12]
   16410:	str	r2, [r3]
   16414:	mov	r3, #0
   16418:	mov	r0, r3
   1641c:	sub	sp, fp, #4
   16420:	pop	{fp, pc}
   16424:	push	{fp, lr}
   16428:	add	fp, sp, #4
   1642c:	sub	sp, sp, #16
   16430:	str	r0, [fp, #-16]
   16434:	mov	r1, #0
   16438:	ldr	r0, [fp, #-16]
   1643c:	bl	11100 <setlocale@plt>
   16440:	str	r0, [fp, #-8]
   16444:	ldr	r3, [fp, #-8]
   16448:	mov	r0, r3
   1644c:	sub	sp, fp, #4
   16450:	pop	{fp, pc}
   16454:	push	{fp, lr}
   16458:	add	fp, sp, #4
   1645c:	sub	sp, sp, #24
   16460:	str	r0, [fp, #-16]
   16464:	str	r1, [fp, #-20]	; 0xffffffec
   16468:	str	r2, [fp, #-24]	; 0xffffffe8
   1646c:	ldr	r0, [fp, #-16]
   16470:	bl	16424 <__assert_fail@plt+0x52a0>
   16474:	str	r0, [fp, #-8]
   16478:	ldr	r3, [fp, #-8]
   1647c:	cmp	r3, #0
   16480:	bne	164a4 <__assert_fail@plt+0x5320>
   16484:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16488:	cmp	r3, #0
   1648c:	beq	1649c <__assert_fail@plt+0x5318>
   16490:	ldr	r3, [fp, #-20]	; 0xffffffec
   16494:	mov	r2, #0
   16498:	strb	r2, [r3]
   1649c:	mov	r3, #22
   164a0:	b	16520 <__assert_fail@plt+0x539c>
   164a4:	ldr	r0, [fp, #-8]
   164a8:	bl	11070 <strlen@plt>
   164ac:	str	r0, [fp, #-12]
   164b0:	ldr	r2, [fp, #-12]
   164b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164b8:	cmp	r2, r3
   164bc:	bcs	164e0 <__assert_fail@plt+0x535c>
   164c0:	ldr	r3, [fp, #-12]
   164c4:	add	r3, r3, #1
   164c8:	mov	r2, r3
   164cc:	ldr	r1, [fp, #-8]
   164d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   164d4:	bl	10efc <memcpy@plt>
   164d8:	mov	r3, #0
   164dc:	b	16520 <__assert_fail@plt+0x539c>
   164e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164e4:	cmp	r3, #0
   164e8:	beq	1651c <__assert_fail@plt+0x5398>
   164ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164f0:	sub	r3, r3, #1
   164f4:	mov	r2, r3
   164f8:	ldr	r1, [fp, #-8]
   164fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   16500:	bl	10efc <memcpy@plt>
   16504:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16508:	sub	r3, r3, #1
   1650c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16510:	add	r3, r2, r3
   16514:	mov	r2, #0
   16518:	strb	r2, [r3]
   1651c:	mov	r3, #34	; 0x22
   16520:	mov	r0, r3
   16524:	sub	sp, fp, #4
   16528:	pop	{fp, pc}
   1652c:	push	{fp, lr}
   16530:	add	fp, sp, #4
   16534:	sub	sp, sp, #16
   16538:	str	r0, [fp, #-8]
   1653c:	str	r1, [fp, #-12]
   16540:	str	r2, [fp, #-16]
   16544:	ldr	r2, [fp, #-16]
   16548:	ldr	r1, [fp, #-12]
   1654c:	ldr	r0, [fp, #-8]
   16550:	bl	16454 <__assert_fail@plt+0x52d0>
   16554:	mov	r3, r0
   16558:	mov	r0, r3
   1655c:	sub	sp, fp, #4
   16560:	pop	{fp, pc}
   16564:	push	{fp, lr}
   16568:	add	fp, sp, #4
   1656c:	sub	sp, sp, #8
   16570:	str	r0, [fp, #-8]
   16574:	ldr	r0, [fp, #-8]
   16578:	bl	16424 <__assert_fail@plt+0x52a0>
   1657c:	mov	r3, r0
   16580:	mov	r0, r3
   16584:	sub	sp, fp, #4
   16588:	pop	{fp, pc}
   1658c:	push	{r4, r5, r6, r7, fp, lr}
   16590:	add	fp, sp, #20
   16594:	sub	sp, sp, #48	; 0x30
   16598:	str	r0, [fp, #-24]	; 0xffffffe8
   1659c:	str	r1, [fp, #-28]	; 0xffffffe4
   165a0:	str	r2, [fp, #-32]	; 0xffffffe0
   165a4:	str	r3, [fp, #-36]	; 0xffffffdc
   165a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   165ac:	cmp	r3, #0
   165b0:	beq	165d4 <__assert_fail@plt+0x5450>
   165b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   165b8:	str	r3, [sp]
   165bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   165c0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   165c4:	ldr	r1, [pc, #1260]	; 16ab8 <__assert_fail@plt+0x5934>
   165c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   165cc:	bl	11088 <fprintf@plt>
   165d0:	b	165e8 <__assert_fail@plt+0x5464>
   165d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   165d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   165dc:	ldr	r1, [pc, #1240]	; 16abc <__assert_fail@plt+0x5938>
   165e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   165e4:	bl	11088 <fprintf@plt>
   165e8:	ldr	r0, [pc, #1232]	; 16ac0 <__assert_fail@plt+0x593c>
   165ec:	bl	11058 <gettext@plt>
   165f0:	mov	r2, r0
   165f4:	ldr	r3, [pc, #1224]	; 16ac4 <__assert_fail@plt+0x5940>
   165f8:	ldr	r1, [pc, #1224]	; 16ac8 <__assert_fail@plt+0x5944>
   165fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16600:	bl	11088 <fprintf@plt>
   16604:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16608:	mov	r0, #10
   1660c:	bl	10f38 <fputc_unlocked@plt>
   16610:	ldr	r0, [pc, #1204]	; 16acc <__assert_fail@plt+0x5948>
   16614:	bl	11058 <gettext@plt>
   16618:	mov	r3, r0
   1661c:	ldr	r2, [pc, #1196]	; 16ad0 <__assert_fail@plt+0x594c>
   16620:	mov	r1, r3
   16624:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16628:	bl	11088 <fprintf@plt>
   1662c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16630:	mov	r0, #10
   16634:	bl	10f38 <fputc_unlocked@plt>
   16638:	ldr	r3, [fp, #8]
   1663c:	cmp	r3, #9
   16640:	ldrls	pc, [pc, r3, lsl #2]
   16644:	b	16a00 <__assert_fail@plt+0x587c>
   16648:	andeq	r6, r1, r8, lsr #21
   1664c:	andeq	r6, r1, r0, ror r6
   16650:	muleq	r1, r4, r6
   16654:	andeq	r6, r1, r0, asr #13
   16658:	andeq	r6, r1, r0, lsl #14
   1665c:	andeq	r6, r1, r8, asr r7
   16660:	andeq	r6, r1, r0, asr #15
   16664:	andeq	r6, r1, r8, lsr r8
   16668:	andeq	r6, r1, r0, asr #17
   1666c:	andeq	r6, r1, r8, asr r9
   16670:	ldr	r0, [pc, #1116]	; 16ad4 <__assert_fail@plt+0x5950>
   16674:	bl	11058 <gettext@plt>
   16678:	mov	r1, r0
   1667c:	ldr	r3, [fp, #4]
   16680:	ldr	r3, [r3]
   16684:	mov	r2, r3
   16688:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1668c:	bl	11088 <fprintf@plt>
   16690:	b	16aac <__assert_fail@plt+0x5928>
   16694:	ldr	r0, [pc, #1084]	; 16ad8 <__assert_fail@plt+0x5954>
   16698:	bl	11058 <gettext@plt>
   1669c:	mov	r1, r0
   166a0:	ldr	r3, [fp, #4]
   166a4:	ldr	r2, [r3]
   166a8:	ldr	r3, [fp, #4]
   166ac:	add	r3, r3, #4
   166b0:	ldr	r3, [r3]
   166b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166b8:	bl	11088 <fprintf@plt>
   166bc:	b	16aac <__assert_fail@plt+0x5928>
   166c0:	ldr	r0, [pc, #1044]	; 16adc <__assert_fail@plt+0x5958>
   166c4:	bl	11058 <gettext@plt>
   166c8:	ldr	r3, [fp, #4]
   166cc:	ldr	r2, [r3]
   166d0:	ldr	r3, [fp, #4]
   166d4:	add	r3, r3, #4
   166d8:	ldr	r1, [r3]
   166dc:	ldr	r3, [fp, #4]
   166e0:	add	r3, r3, #8
   166e4:	ldr	r3, [r3]
   166e8:	str	r3, [sp]
   166ec:	mov	r3, r1
   166f0:	mov	r1, r0
   166f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166f8:	bl	11088 <fprintf@plt>
   166fc:	b	16aac <__assert_fail@plt+0x5928>
   16700:	ldr	r0, [pc, #984]	; 16ae0 <__assert_fail@plt+0x595c>
   16704:	bl	11058 <gettext@plt>
   16708:	mov	ip, r0
   1670c:	ldr	r3, [fp, #4]
   16710:	ldr	r1, [r3]
   16714:	ldr	r3, [fp, #4]
   16718:	add	r3, r3, #4
   1671c:	ldr	r0, [r3]
   16720:	ldr	r3, [fp, #4]
   16724:	add	r3, r3, #8
   16728:	ldr	r3, [r3]
   1672c:	ldr	r2, [fp, #4]
   16730:	add	r2, r2, #12
   16734:	ldr	r2, [r2]
   16738:	str	r2, [sp, #4]
   1673c:	str	r3, [sp]
   16740:	mov	r3, r0
   16744:	mov	r2, r1
   16748:	mov	r1, ip
   1674c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16750:	bl	11088 <fprintf@plt>
   16754:	b	16aac <__assert_fail@plt+0x5928>
   16758:	ldr	r0, [pc, #900]	; 16ae4 <__assert_fail@plt+0x5960>
   1675c:	bl	11058 <gettext@plt>
   16760:	mov	lr, r0
   16764:	ldr	r3, [fp, #4]
   16768:	ldr	r0, [r3]
   1676c:	ldr	r3, [fp, #4]
   16770:	add	r3, r3, #4
   16774:	ldr	ip, [r3]
   16778:	ldr	r3, [fp, #4]
   1677c:	add	r3, r3, #8
   16780:	ldr	r3, [r3]
   16784:	ldr	r2, [fp, #4]
   16788:	add	r2, r2, #12
   1678c:	ldr	r2, [r2]
   16790:	ldr	r1, [fp, #4]
   16794:	add	r1, r1, #16
   16798:	ldr	r1, [r1]
   1679c:	str	r1, [sp, #8]
   167a0:	str	r2, [sp, #4]
   167a4:	str	r3, [sp]
   167a8:	mov	r3, ip
   167ac:	mov	r2, r0
   167b0:	mov	r1, lr
   167b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   167b8:	bl	11088 <fprintf@plt>
   167bc:	b	16aac <__assert_fail@plt+0x5928>
   167c0:	ldr	r0, [pc, #800]	; 16ae8 <__assert_fail@plt+0x5964>
   167c4:	bl	11058 <gettext@plt>
   167c8:	mov	r4, r0
   167cc:	ldr	r3, [fp, #4]
   167d0:	ldr	ip, [r3]
   167d4:	ldr	r3, [fp, #4]
   167d8:	add	r3, r3, #4
   167dc:	ldr	lr, [r3]
   167e0:	ldr	r3, [fp, #4]
   167e4:	add	r3, r3, #8
   167e8:	ldr	r3, [r3]
   167ec:	ldr	r2, [fp, #4]
   167f0:	add	r2, r2, #12
   167f4:	ldr	r2, [r2]
   167f8:	ldr	r1, [fp, #4]
   167fc:	add	r1, r1, #16
   16800:	ldr	r1, [r1]
   16804:	ldr	r0, [fp, #4]
   16808:	add	r0, r0, #20
   1680c:	ldr	r0, [r0]
   16810:	str	r0, [sp, #12]
   16814:	str	r1, [sp, #8]
   16818:	str	r2, [sp, #4]
   1681c:	str	r3, [sp]
   16820:	mov	r3, lr
   16824:	mov	r2, ip
   16828:	mov	r1, r4
   1682c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16830:	bl	11088 <fprintf@plt>
   16834:	b	16aac <__assert_fail@plt+0x5928>
   16838:	ldr	r0, [pc, #684]	; 16aec <__assert_fail@plt+0x5968>
   1683c:	bl	11058 <gettext@plt>
   16840:	mov	r5, r0
   16844:	ldr	r3, [fp, #4]
   16848:	ldr	lr, [r3]
   1684c:	ldr	r3, [fp, #4]
   16850:	add	r3, r3, #4
   16854:	ldr	r4, [r3]
   16858:	ldr	r3, [fp, #4]
   1685c:	add	r3, r3, #8
   16860:	ldr	r3, [r3]
   16864:	ldr	r2, [fp, #4]
   16868:	add	r2, r2, #12
   1686c:	ldr	r2, [r2]
   16870:	ldr	r1, [fp, #4]
   16874:	add	r1, r1, #16
   16878:	ldr	r1, [r1]
   1687c:	ldr	r0, [fp, #4]
   16880:	add	r0, r0, #20
   16884:	ldr	r0, [r0]
   16888:	ldr	ip, [fp, #4]
   1688c:	add	ip, ip, #24
   16890:	ldr	ip, [ip]
   16894:	str	ip, [sp, #16]
   16898:	str	r0, [sp, #12]
   1689c:	str	r1, [sp, #8]
   168a0:	str	r2, [sp, #4]
   168a4:	str	r3, [sp]
   168a8:	mov	r3, r4
   168ac:	mov	r2, lr
   168b0:	mov	r1, r5
   168b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   168b8:	bl	11088 <fprintf@plt>
   168bc:	b	16aac <__assert_fail@plt+0x5928>
   168c0:	ldr	r0, [pc, #552]	; 16af0 <__assert_fail@plt+0x596c>
   168c4:	bl	11058 <gettext@plt>
   168c8:	mov	r6, r0
   168cc:	ldr	r3, [fp, #4]
   168d0:	ldr	r4, [r3]
   168d4:	ldr	r3, [fp, #4]
   168d8:	add	r3, r3, #4
   168dc:	ldr	r5, [r3]
   168e0:	ldr	r3, [fp, #4]
   168e4:	add	r3, r3, #8
   168e8:	ldr	r3, [r3]
   168ec:	ldr	r2, [fp, #4]
   168f0:	add	r2, r2, #12
   168f4:	ldr	r2, [r2]
   168f8:	ldr	r1, [fp, #4]
   168fc:	add	r1, r1, #16
   16900:	ldr	r1, [r1]
   16904:	ldr	r0, [fp, #4]
   16908:	add	r0, r0, #20
   1690c:	ldr	r0, [r0]
   16910:	ldr	ip, [fp, #4]
   16914:	add	ip, ip, #24
   16918:	ldr	ip, [ip]
   1691c:	ldr	lr, [fp, #4]
   16920:	add	lr, lr, #28
   16924:	ldr	lr, [lr]
   16928:	str	lr, [sp, #20]
   1692c:	str	ip, [sp, #16]
   16930:	str	r0, [sp, #12]
   16934:	str	r1, [sp, #8]
   16938:	str	r2, [sp, #4]
   1693c:	str	r3, [sp]
   16940:	mov	r3, r5
   16944:	mov	r2, r4
   16948:	mov	r1, r6
   1694c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16950:	bl	11088 <fprintf@plt>
   16954:	b	16aac <__assert_fail@plt+0x5928>
   16958:	ldr	r0, [pc, #404]	; 16af4 <__assert_fail@plt+0x5970>
   1695c:	bl	11058 <gettext@plt>
   16960:	mov	r7, r0
   16964:	ldr	r3, [fp, #4]
   16968:	ldr	r5, [r3]
   1696c:	ldr	r3, [fp, #4]
   16970:	add	r3, r3, #4
   16974:	ldr	r6, [r3]
   16978:	ldr	r3, [fp, #4]
   1697c:	add	r3, r3, #8
   16980:	ldr	r3, [r3]
   16984:	ldr	r2, [fp, #4]
   16988:	add	r2, r2, #12
   1698c:	ldr	r2, [r2]
   16990:	ldr	r1, [fp, #4]
   16994:	add	r1, r1, #16
   16998:	ldr	r1, [r1]
   1699c:	ldr	r0, [fp, #4]
   169a0:	add	r0, r0, #20
   169a4:	ldr	r0, [r0]
   169a8:	ldr	ip, [fp, #4]
   169ac:	add	ip, ip, #24
   169b0:	ldr	ip, [ip]
   169b4:	ldr	lr, [fp, #4]
   169b8:	add	lr, lr, #28
   169bc:	ldr	lr, [lr]
   169c0:	ldr	r4, [fp, #4]
   169c4:	add	r4, r4, #32
   169c8:	ldr	r4, [r4]
   169cc:	str	r4, [sp, #24]
   169d0:	str	lr, [sp, #20]
   169d4:	str	ip, [sp, #16]
   169d8:	str	r0, [sp, #12]
   169dc:	str	r1, [sp, #8]
   169e0:	str	r2, [sp, #4]
   169e4:	str	r3, [sp]
   169e8:	mov	r3, r6
   169ec:	mov	r2, r5
   169f0:	mov	r1, r7
   169f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   169f8:	bl	11088 <fprintf@plt>
   169fc:	b	16aac <__assert_fail@plt+0x5928>
   16a00:	ldr	r0, [pc, #240]	; 16af8 <__assert_fail@plt+0x5974>
   16a04:	bl	11058 <gettext@plt>
   16a08:	mov	r7, r0
   16a0c:	ldr	r3, [fp, #4]
   16a10:	ldr	r5, [r3]
   16a14:	ldr	r3, [fp, #4]
   16a18:	add	r3, r3, #4
   16a1c:	ldr	r6, [r3]
   16a20:	ldr	r3, [fp, #4]
   16a24:	add	r3, r3, #8
   16a28:	ldr	r3, [r3]
   16a2c:	ldr	r2, [fp, #4]
   16a30:	add	r2, r2, #12
   16a34:	ldr	r2, [r2]
   16a38:	ldr	r1, [fp, #4]
   16a3c:	add	r1, r1, #16
   16a40:	ldr	r1, [r1]
   16a44:	ldr	r0, [fp, #4]
   16a48:	add	r0, r0, #20
   16a4c:	ldr	r0, [r0]
   16a50:	ldr	ip, [fp, #4]
   16a54:	add	ip, ip, #24
   16a58:	ldr	ip, [ip]
   16a5c:	ldr	lr, [fp, #4]
   16a60:	add	lr, lr, #28
   16a64:	ldr	lr, [lr]
   16a68:	ldr	r4, [fp, #4]
   16a6c:	add	r4, r4, #32
   16a70:	ldr	r4, [r4]
   16a74:	str	r4, [sp, #24]
   16a78:	str	lr, [sp, #20]
   16a7c:	str	ip, [sp, #16]
   16a80:	str	r0, [sp, #12]
   16a84:	str	r1, [sp, #8]
   16a88:	str	r2, [sp, #4]
   16a8c:	str	r3, [sp]
   16a90:	mov	r3, r6
   16a94:	mov	r2, r5
   16a98:	mov	r1, r7
   16a9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16aa0:	bl	11088 <fprintf@plt>
   16aa4:	b	16aac <__assert_fail@plt+0x5928>
   16aa8:	nop			; (mov r0, r0)
   16aac:	nop			; (mov r0, r0)
   16ab0:	sub	sp, fp, #20
   16ab4:	pop	{r4, r5, r6, r7, fp, pc}
   16ab8:	andeq	r9, r1, r4, ror r4
   16abc:	andeq	r9, r1, r0, lsl #9
   16ac0:	andeq	r9, r1, r8, lsl #9
   16ac4:	andeq	r0, r0, r6, ror #15
   16ac8:	muleq	r1, r8, r7
   16acc:	andeq	r9, r1, ip, lsl #9
   16ad0:	andeq	r9, r1, r8, lsr r5
   16ad4:	andeq	r9, r1, ip, asr r5
   16ad8:	andeq	r9, r1, ip, ror #10
   16adc:	andeq	r9, r1, r4, lsl #11
   16ae0:	andeq	r9, r1, r0, lsr #11
   16ae4:	andeq	r9, r1, r0, asr #11
   16ae8:	andeq	r9, r1, r4, ror #11
   16aec:	andeq	r9, r1, ip, lsl #12
   16af0:	andeq	r9, r1, r8, lsr r6
   16af4:	andeq	r9, r1, r8, ror #12
   16af8:	muleq	r1, ip, r6
   16afc:	push	{fp, lr}
   16b00:	add	fp, sp, #4
   16b04:	sub	sp, sp, #32
   16b08:	str	r0, [fp, #-16]
   16b0c:	str	r1, [fp, #-20]	; 0xffffffec
   16b10:	str	r2, [fp, #-24]	; 0xffffffe8
   16b14:	str	r3, [fp, #-28]	; 0xffffffe4
   16b18:	mov	r3, #0
   16b1c:	str	r3, [fp, #-8]
   16b20:	b	16b30 <__assert_fail@plt+0x59ac>
   16b24:	ldr	r3, [fp, #-8]
   16b28:	add	r3, r3, #1
   16b2c:	str	r3, [fp, #-8]
   16b30:	ldr	r3, [fp, #-8]
   16b34:	lsl	r3, r3, #2
   16b38:	ldr	r2, [fp, #4]
   16b3c:	add	r3, r2, r3
   16b40:	ldr	r3, [r3]
   16b44:	cmp	r3, #0
   16b48:	bne	16b24 <__assert_fail@plt+0x59a0>
   16b4c:	ldr	r3, [fp, #-8]
   16b50:	str	r3, [sp, #4]
   16b54:	ldr	r3, [fp, #4]
   16b58:	str	r3, [sp]
   16b5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b60:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16b64:	ldr	r1, [fp, #-20]	; 0xffffffec
   16b68:	ldr	r0, [fp, #-16]
   16b6c:	bl	1658c <__assert_fail@plt+0x5408>
   16b70:	nop			; (mov r0, r0)
   16b74:	sub	sp, fp, #4
   16b78:	pop	{fp, pc}
   16b7c:	push	{fp, lr}
   16b80:	add	fp, sp, #4
   16b84:	sub	sp, sp, #72	; 0x48
   16b88:	str	r0, [fp, #-56]	; 0xffffffc8
   16b8c:	str	r1, [fp, #-60]	; 0xffffffc4
   16b90:	str	r2, [fp, #-64]	; 0xffffffc0
   16b94:	str	r3, [fp, #-68]	; 0xffffffbc
   16b98:	mov	r3, #0
   16b9c:	str	r3, [fp, #-8]
   16ba0:	b	16bb0 <__assert_fail@plt+0x5a2c>
   16ba4:	ldr	r3, [fp, #-8]
   16ba8:	add	r3, r3, #1
   16bac:	str	r3, [fp, #-8]
   16bb0:	ldr	r3, [fp, #-8]
   16bb4:	cmp	r3, #9
   16bb8:	bhi	16bfc <__assert_fail@plt+0x5a78>
   16bbc:	ldr	r3, [fp, #4]
   16bc0:	add	r2, r3, #4
   16bc4:	str	r2, [fp, #4]
   16bc8:	ldr	r2, [r3]
   16bcc:	ldr	r3, [fp, #-8]
   16bd0:	lsl	r3, r3, #2
   16bd4:	sub	r1, fp, #4
   16bd8:	add	r3, r1, r3
   16bdc:	str	r2, [r3, #-44]	; 0xffffffd4
   16be0:	ldr	r3, [fp, #-8]
   16be4:	lsl	r3, r3, #2
   16be8:	sub	r2, fp, #4
   16bec:	add	r3, r2, r3
   16bf0:	ldr	r3, [r3, #-44]	; 0xffffffd4
   16bf4:	cmp	r3, #0
   16bf8:	bne	16ba4 <__assert_fail@plt+0x5a20>
   16bfc:	ldr	r3, [fp, #-8]
   16c00:	str	r3, [sp, #4]
   16c04:	sub	r3, fp, #48	; 0x30
   16c08:	str	r3, [sp]
   16c0c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16c10:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16c14:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16c18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16c1c:	bl	1658c <__assert_fail@plt+0x5408>
   16c20:	nop			; (mov r0, r0)
   16c24:	sub	sp, fp, #4
   16c28:	pop	{fp, pc}
   16c2c:	push	{r3}		; (str r3, [sp, #-4]!)
   16c30:	push	{fp, lr}
   16c34:	add	fp, sp, #4
   16c38:	sub	sp, sp, #36	; 0x24
   16c3c:	str	r0, [fp, #-20]	; 0xffffffec
   16c40:	str	r1, [fp, #-24]	; 0xffffffe8
   16c44:	str	r2, [fp, #-28]	; 0xffffffe4
   16c48:	add	r3, fp, #8
   16c4c:	str	r3, [fp, #-12]
   16c50:	ldr	r3, [fp, #-12]
   16c54:	str	r3, [sp]
   16c58:	ldr	r3, [fp, #4]
   16c5c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16c60:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16c64:	ldr	r0, [fp, #-20]	; 0xffffffec
   16c68:	bl	16b7c <__assert_fail@plt+0x59f8>
   16c6c:	nop			; (mov r0, r0)
   16c70:	sub	sp, fp, #4
   16c74:	pop	{fp, lr}
   16c78:	add	sp, sp, #4
   16c7c:	bx	lr
   16c80:	push	{fp, lr}
   16c84:	add	fp, sp, #4
   16c88:	ldr	r3, [pc, #96]	; 16cf0 <__assert_fail@plt+0x5b6c>
   16c8c:	ldr	r3, [r3]
   16c90:	mov	r1, r3
   16c94:	mov	r0, #10
   16c98:	bl	10f38 <fputc_unlocked@plt>
   16c9c:	ldr	r0, [pc, #80]	; 16cf4 <__assert_fail@plt+0x5b70>
   16ca0:	bl	11058 <gettext@plt>
   16ca4:	mov	r3, r0
   16ca8:	ldr	r1, [pc, #72]	; 16cf8 <__assert_fail@plt+0x5b74>
   16cac:	mov	r0, r3
   16cb0:	bl	10eb4 <printf@plt>
   16cb4:	ldr	r0, [pc, #64]	; 16cfc <__assert_fail@plt+0x5b78>
   16cb8:	bl	11058 <gettext@plt>
   16cbc:	mov	r3, r0
   16cc0:	ldr	r2, [pc, #56]	; 16d00 <__assert_fail@plt+0x5b7c>
   16cc4:	ldr	r1, [pc, #56]	; 16d04 <__assert_fail@plt+0x5b80>
   16cc8:	mov	r0, r3
   16ccc:	bl	10eb4 <printf@plt>
   16cd0:	ldr	r0, [pc, #48]	; 16d08 <__assert_fail@plt+0x5b84>
   16cd4:	bl	11058 <gettext@plt>
   16cd8:	mov	r3, r0
   16cdc:	ldr	r1, [pc, #40]	; 16d0c <__assert_fail@plt+0x5b88>
   16ce0:	mov	r0, r3
   16ce4:	bl	10eb4 <printf@plt>
   16ce8:	nop			; (mov r0, r0)
   16cec:	pop	{fp, pc}
   16cf0:	andeq	sl, r2, r4, lsl #3
   16cf4:	ldrdeq	r9, [r1], -r8
   16cf8:	andeq	r9, r1, ip, ror #13
   16cfc:	andeq	r9, r1, r4, lsl #14
   16d00:	andeq	r9, r1, r8, lsl r7
   16d04:	andeq	r9, r1, r0, asr #14
   16d08:	andeq	r9, r1, r0, asr r7
   16d0c:	andeq	r9, r1, r8, ror r7
   16d10:	push	{fp, lr}
   16d14:	add	fp, sp, #4
   16d18:	sub	sp, sp, #16
   16d1c:	str	r0, [fp, #-8]
   16d20:	str	r1, [fp, #-12]
   16d24:	str	r2, [fp, #-16]
   16d28:	ldr	r2, [fp, #-16]
   16d2c:	ldr	r1, [fp, #-12]
   16d30:	ldr	r0, [fp, #-8]
   16d34:	bl	16ea0 <__assert_fail@plt+0x5d1c>
   16d38:	mov	r3, r0
   16d3c:	mov	r0, r3
   16d40:	sub	sp, fp, #4
   16d44:	pop	{fp, pc}
   16d48:	push	{fp, lr}
   16d4c:	add	fp, sp, #4
   16d50:	sub	sp, sp, #8
   16d54:	str	r0, [fp, #-8]
   16d58:	ldr	r3, [fp, #-8]
   16d5c:	cmp	r3, #0
   16d60:	bne	16d68 <__assert_fail@plt+0x5be4>
   16d64:	bl	17894 <__assert_fail@plt+0x6710>
   16d68:	ldr	r3, [fp, #-8]
   16d6c:	mov	r0, r3
   16d70:	sub	sp, fp, #4
   16d74:	pop	{fp, pc}
   16d78:	push	{fp, lr}
   16d7c:	add	fp, sp, #4
   16d80:	sub	sp, sp, #8
   16d84:	str	r0, [fp, #-8]
   16d88:	ldr	r0, [fp, #-8]
   16d8c:	bl	17994 <__assert_fail@plt+0x6810>
   16d90:	mov	r3, r0
   16d94:	mov	r0, r3
   16d98:	bl	16d48 <__assert_fail@plt+0x5bc4>
   16d9c:	mov	r3, r0
   16da0:	mov	r0, r3
   16da4:	sub	sp, fp, #4
   16da8:	pop	{fp, pc}
   16dac:	push	{fp, lr}
   16db0:	add	fp, sp, #4
   16db4:	sub	sp, sp, #8
   16db8:	str	r0, [fp, #-8]
   16dbc:	ldr	r0, [fp, #-8]
   16dc0:	bl	17f24 <__assert_fail@plt+0x6da0>
   16dc4:	mov	r3, r0
   16dc8:	mov	r0, r3
   16dcc:	bl	16d48 <__assert_fail@plt+0x5bc4>
   16dd0:	mov	r3, r0
   16dd4:	mov	r0, r3
   16dd8:	sub	sp, fp, #4
   16ddc:	pop	{fp, pc}
   16de0:	push	{fp, lr}
   16de4:	add	fp, sp, #4
   16de8:	sub	sp, sp, #8
   16dec:	str	r0, [fp, #-8]
   16df0:	ldr	r0, [fp, #-8]
   16df4:	bl	16d78 <__assert_fail@plt+0x5bf4>
   16df8:	mov	r3, r0
   16dfc:	mov	r0, r3
   16e00:	sub	sp, fp, #4
   16e04:	pop	{fp, pc}
   16e08:	push	{fp, lr}
   16e0c:	add	fp, sp, #4
   16e10:	sub	sp, sp, #16
   16e14:	str	r0, [fp, #-16]
   16e18:	str	r1, [fp, #-20]	; 0xffffffec
   16e1c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e20:	ldr	r0, [fp, #-16]
   16e24:	bl	17a3c <__assert_fail@plt+0x68b8>
   16e28:	str	r0, [fp, #-8]
   16e2c:	ldr	r3, [fp, #-8]
   16e30:	cmp	r3, #0
   16e34:	bne	16e54 <__assert_fail@plt+0x5cd0>
   16e38:	ldr	r3, [fp, #-16]
   16e3c:	cmp	r3, #0
   16e40:	beq	16e50 <__assert_fail@plt+0x5ccc>
   16e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e48:	cmp	r3, #0
   16e4c:	beq	16e54 <__assert_fail@plt+0x5cd0>
   16e50:	bl	17894 <__assert_fail@plt+0x6710>
   16e54:	ldr	r3, [fp, #-8]
   16e58:	mov	r0, r3
   16e5c:	sub	sp, fp, #4
   16e60:	pop	{fp, pc}
   16e64:	push	{fp, lr}
   16e68:	add	fp, sp, #4
   16e6c:	sub	sp, sp, #8
   16e70:	str	r0, [fp, #-8]
   16e74:	str	r1, [fp, #-12]
   16e78:	ldr	r1, [fp, #-12]
   16e7c:	ldr	r0, [fp, #-8]
   16e80:	bl	17f50 <__assert_fail@plt+0x6dcc>
   16e84:	mov	r3, r0
   16e88:	mov	r0, r3
   16e8c:	bl	16d48 <__assert_fail@plt+0x5bc4>
   16e90:	mov	r3, r0
   16e94:	mov	r0, r3
   16e98:	sub	sp, fp, #4
   16e9c:	pop	{fp, pc}
   16ea0:	push	{fp, lr}
   16ea4:	add	fp, sp, #4
   16ea8:	sub	sp, sp, #24
   16eac:	str	r0, [fp, #-16]
   16eb0:	str	r1, [fp, #-20]	; 0xffffffec
   16eb4:	str	r2, [fp, #-24]	; 0xffffffe8
   16eb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16ebc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ec0:	ldr	r0, [fp, #-16]
   16ec4:	bl	18144 <__assert_fail@plt+0x6fc0>
   16ec8:	str	r0, [fp, #-8]
   16ecc:	ldr	r3, [fp, #-8]
   16ed0:	cmp	r3, #0
   16ed4:	bne	16f00 <__assert_fail@plt+0x5d7c>
   16ed8:	ldr	r3, [fp, #-16]
   16edc:	cmp	r3, #0
   16ee0:	beq	16efc <__assert_fail@plt+0x5d78>
   16ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ee8:	cmp	r3, #0
   16eec:	beq	16f00 <__assert_fail@plt+0x5d7c>
   16ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ef4:	cmp	r3, #0
   16ef8:	beq	16f00 <__assert_fail@plt+0x5d7c>
   16efc:	bl	17894 <__assert_fail@plt+0x6710>
   16f00:	ldr	r3, [fp, #-8]
   16f04:	mov	r0, r3
   16f08:	sub	sp, fp, #4
   16f0c:	pop	{fp, pc}
   16f10:	push	{fp, lr}
   16f14:	add	fp, sp, #4
   16f18:	sub	sp, sp, #16
   16f1c:	str	r0, [fp, #-8]
   16f20:	str	r1, [fp, #-12]
   16f24:	str	r2, [fp, #-16]
   16f28:	ldr	r2, [fp, #-16]
   16f2c:	ldr	r1, [fp, #-12]
   16f30:	ldr	r0, [fp, #-8]
   16f34:	bl	17fd8 <__assert_fail@plt+0x6e54>
   16f38:	mov	r3, r0
   16f3c:	mov	r0, r3
   16f40:	bl	16d48 <__assert_fail@plt+0x5bc4>
   16f44:	mov	r3, r0
   16f48:	mov	r0, r3
   16f4c:	sub	sp, fp, #4
   16f50:	pop	{fp, pc}
   16f54:	push	{fp, lr}
   16f58:	add	fp, sp, #4
   16f5c:	sub	sp, sp, #8
   16f60:	str	r0, [fp, #-8]
   16f64:	str	r1, [fp, #-12]
   16f68:	ldr	r2, [fp, #-12]
   16f6c:	ldr	r1, [fp, #-8]
   16f70:	mov	r0, #0
   16f74:	bl	16ea0 <__assert_fail@plt+0x5d1c>
   16f78:	mov	r3, r0
   16f7c:	mov	r0, r3
   16f80:	sub	sp, fp, #4
   16f84:	pop	{fp, pc}
   16f88:	push	{fp, lr}
   16f8c:	add	fp, sp, #4
   16f90:	sub	sp, sp, #8
   16f94:	str	r0, [fp, #-8]
   16f98:	str	r1, [fp, #-12]
   16f9c:	ldr	r2, [fp, #-12]
   16fa0:	ldr	r1, [fp, #-8]
   16fa4:	mov	r0, #0
   16fa8:	bl	16f10 <__assert_fail@plt+0x5d8c>
   16fac:	mov	r3, r0
   16fb0:	mov	r0, r3
   16fb4:	sub	sp, fp, #4
   16fb8:	pop	{fp, pc}
   16fbc:	push	{fp, lr}
   16fc0:	add	fp, sp, #4
   16fc4:	sub	sp, sp, #8
   16fc8:	str	r0, [fp, #-8]
   16fcc:	str	r1, [fp, #-12]
   16fd0:	mov	r2, #1
   16fd4:	ldr	r1, [fp, #-12]
   16fd8:	ldr	r0, [fp, #-8]
   16fdc:	bl	16ff0 <__assert_fail@plt+0x5e6c>
   16fe0:	mov	r3, r0
   16fe4:	mov	r0, r3
   16fe8:	sub	sp, fp, #4
   16fec:	pop	{fp, pc}
   16ff0:	push	{fp, lr}
   16ff4:	add	fp, sp, #4
   16ff8:	sub	sp, sp, #24
   16ffc:	str	r0, [fp, #-16]
   17000:	str	r1, [fp, #-20]	; 0xffffffec
   17004:	str	r2, [fp, #-24]	; 0xffffffe8
   17008:	ldr	r3, [fp, #-20]	; 0xffffffec
   1700c:	ldr	r3, [r3]
   17010:	str	r3, [fp, #-8]
   17014:	ldr	r3, [fp, #-16]
   17018:	cmp	r3, #0
   1701c:	bne	17068 <__assert_fail@plt+0x5ee4>
   17020:	ldr	r3, [fp, #-8]
   17024:	cmp	r3, #0
   17028:	bne	170cc <__assert_fail@plt+0x5f48>
   1702c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17030:	mov	r0, #64	; 0x40
   17034:	bl	181f4 <__assert_fail@plt+0x7070>
   17038:	mov	r3, r0
   1703c:	str	r3, [fp, #-8]
   17040:	ldr	r3, [fp, #-8]
   17044:	cmp	r3, #0
   17048:	moveq	r3, #1
   1704c:	movne	r3, #0
   17050:	uxtb	r3, r3
   17054:	mov	r2, r3
   17058:	ldr	r3, [fp, #-8]
   1705c:	add	r3, r2, r3
   17060:	str	r3, [fp, #-8]
   17064:	b	170cc <__assert_fail@plt+0x5f48>
   17068:	ldr	r3, [fp, #-8]
   1706c:	lsr	r3, r3, #1
   17070:	add	r3, r3, #1
   17074:	mvn	r2, r3
   17078:	ldr	r3, [fp, #-8]
   1707c:	cmp	r2, r3
   17080:	bcs	170a4 <__assert_fail@plt+0x5f20>
   17084:	ldr	r3, [fp, #-8]
   17088:	lsr	r2, r3, #1
   1708c:	ldr	r3, [fp, #-8]
   17090:	add	r3, r2, r3
   17094:	add	r3, r3, #1
   17098:	str	r3, [fp, #-8]
   1709c:	mov	r3, #1
   170a0:	b	170c0 <__assert_fail@plt+0x5f3c>
   170a4:	ldr	r3, [fp, #-8]
   170a8:	lsr	r2, r3, #1
   170ac:	ldr	r3, [fp, #-8]
   170b0:	add	r3, r2, r3
   170b4:	add	r3, r3, #1
   170b8:	str	r3, [fp, #-8]
   170bc:	mov	r3, #0
   170c0:	cmp	r3, #0
   170c4:	beq	170cc <__assert_fail@plt+0x5f48>
   170c8:	bl	17894 <__assert_fail@plt+0x6710>
   170cc:	ldr	r3, [fp, #-8]
   170d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   170d4:	mov	r1, r3
   170d8:	ldr	r0, [fp, #-16]
   170dc:	bl	16ea0 <__assert_fail@plt+0x5d1c>
   170e0:	str	r0, [fp, #-16]
   170e4:	ldr	r2, [fp, #-8]
   170e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   170ec:	str	r2, [r3]
   170f0:	ldr	r3, [fp, #-16]
   170f4:	mov	r0, r3
   170f8:	sub	sp, fp, #4
   170fc:	pop	{fp, pc}
   17100:	push	{fp, lr}
   17104:	add	fp, sp, #4
   17108:	sub	sp, sp, #32
   1710c:	str	r0, [fp, #-24]	; 0xffffffe8
   17110:	str	r1, [fp, #-28]	; 0xffffffe4
   17114:	str	r2, [fp, #-32]	; 0xffffffe0
   17118:	str	r3, [fp, #-36]	; 0xffffffdc
   1711c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17120:	ldr	r3, [r3]
   17124:	str	r3, [fp, #-8]
   17128:	ldr	r3, [fp, #-8]
   1712c:	asr	r3, r3, #1
   17130:	cmp	r3, #0
   17134:	bge	1715c <__assert_fail@plt+0x5fd8>
   17138:	ldr	r3, [fp, #-8]
   1713c:	asr	r3, r3, #1
   17140:	rsb	r2, r3, #-2147483648	; 0x80000000
   17144:	ldr	r3, [fp, #-8]
   17148:	cmp	r2, r3
   1714c:	movgt	r3, #1
   17150:	movle	r3, #0
   17154:	uxtb	r3, r3
   17158:	b	171b0 <__assert_fail@plt+0x602c>
   1715c:	ldr	r3, [fp, #-8]
   17160:	cmp	r3, #0
   17164:	bge	1718c <__assert_fail@plt+0x6008>
   17168:	ldr	r3, [fp, #-8]
   1716c:	asr	r2, r3, #1
   17170:	ldr	r3, [fp, #-8]
   17174:	rsb	r3, r3, #-2147483648	; 0x80000000
   17178:	cmp	r2, r3
   1717c:	movlt	r3, #1
   17180:	movge	r3, #0
   17184:	uxtb	r3, r3
   17188:	b	171b0 <__assert_fail@plt+0x602c>
   1718c:	ldr	r3, [fp, #-8]
   17190:	asr	r2, r3, #1
   17194:	mvn	r3, #-2147483648	; 0x80000000
   17198:	sub	r3, r3, r2
   1719c:	ldr	r2, [fp, #-8]
   171a0:	cmp	r3, r2
   171a4:	movlt	r3, #1
   171a8:	movge	r3, #0
   171ac:	uxtb	r3, r3
   171b0:	cmp	r3, #0
   171b4:	beq	171d8 <__assert_fail@plt+0x6054>
   171b8:	ldr	r3, [fp, #-8]
   171bc:	asr	r3, r3, #1
   171c0:	mov	r2, r3
   171c4:	ldr	r3, [fp, #-8]
   171c8:	add	r3, r2, r3
   171cc:	str	r3, [fp, #-16]
   171d0:	mov	r3, #1
   171d4:	b	171f4 <__assert_fail@plt+0x6070>
   171d8:	ldr	r3, [fp, #-8]
   171dc:	asr	r3, r3, #1
   171e0:	mov	r2, r3
   171e4:	ldr	r3, [fp, #-8]
   171e8:	add	r3, r2, r3
   171ec:	str	r3, [fp, #-16]
   171f0:	mov	r3, #0
   171f4:	cmp	r3, #0
   171f8:	beq	17204 <__assert_fail@plt+0x6080>
   171fc:	mvn	r3, #-2147483648	; 0x80000000
   17200:	str	r3, [fp, #-16]
   17204:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17208:	cmp	r3, #0
   1720c:	blt	17228 <__assert_fail@plt+0x60a4>
   17210:	ldr	r3, [fp, #-16]
   17214:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17218:	cmp	r2, r3
   1721c:	bge	17228 <__assert_fail@plt+0x60a4>
   17220:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17224:	str	r3, [fp, #-16]
   17228:	ldr	r3, [fp, #4]
   1722c:	cmp	r3, #0
   17230:	bge	172c0 <__assert_fail@plt+0x613c>
   17234:	ldr	r3, [fp, #-16]
   17238:	cmp	r3, #0
   1723c:	bge	1726c <__assert_fail@plt+0x60e8>
   17240:	ldr	r1, [fp, #4]
   17244:	mvn	r0, #-2147483648	; 0x80000000
   17248:	bl	18400 <__assert_fail@plt+0x727c>
   1724c:	mov	r3, r0
   17250:	mov	r2, r3
   17254:	ldr	r3, [fp, #-16]
   17258:	cmp	r2, r3
   1725c:	movgt	r3, #1
   17260:	movle	r3, #0
   17264:	uxtb	r3, r3
   17268:	b	17360 <__assert_fail@plt+0x61dc>
   1726c:	ldr	r3, [fp, #4]
   17270:	cmn	r3, #1
   17274:	bne	17294 <__assert_fail@plt+0x6110>
   17278:	ldr	r3, [fp, #-16]
   1727c:	add	r3, r3, #-2147483648	; 0x80000000
   17280:	cmp	r3, #0
   17284:	movgt	r3, #1
   17288:	movle	r3, #0
   1728c:	uxtb	r3, r3
   17290:	b	17360 <__assert_fail@plt+0x61dc>
   17294:	ldr	r1, [fp, #4]
   17298:	mov	r0, #-2147483648	; 0x80000000
   1729c:	bl	18400 <__assert_fail@plt+0x727c>
   172a0:	mov	r3, r0
   172a4:	mov	r2, r3
   172a8:	ldr	r3, [fp, #-16]
   172ac:	cmp	r2, r3
   172b0:	movlt	r3, #1
   172b4:	movge	r3, #0
   172b8:	uxtb	r3, r3
   172bc:	b	17360 <__assert_fail@plt+0x61dc>
   172c0:	ldr	r3, [fp, #4]
   172c4:	cmp	r3, #0
   172c8:	beq	1735c <__assert_fail@plt+0x61d8>
   172cc:	ldr	r3, [fp, #-16]
   172d0:	cmp	r3, #0
   172d4:	bge	17330 <__assert_fail@plt+0x61ac>
   172d8:	ldr	r3, [fp, #-16]
   172dc:	cmn	r3, #1
   172e0:	bne	17300 <__assert_fail@plt+0x617c>
   172e4:	ldr	r3, [fp, #4]
   172e8:	add	r3, r3, #-2147483648	; 0x80000000
   172ec:	cmp	r3, #0
   172f0:	movgt	r3, #1
   172f4:	movle	r3, #0
   172f8:	uxtb	r3, r3
   172fc:	b	17360 <__assert_fail@plt+0x61dc>
   17300:	ldr	r3, [fp, #-16]
   17304:	mov	r1, r3
   17308:	mov	r0, #-2147483648	; 0x80000000
   1730c:	bl	18400 <__assert_fail@plt+0x727c>
   17310:	mov	r3, r0
   17314:	mov	r2, r3
   17318:	ldr	r3, [fp, #4]
   1731c:	cmp	r2, r3
   17320:	movlt	r3, #1
   17324:	movge	r3, #0
   17328:	uxtb	r3, r3
   1732c:	b	17360 <__assert_fail@plt+0x61dc>
   17330:	ldr	r1, [fp, #4]
   17334:	mvn	r0, #-2147483648	; 0x80000000
   17338:	bl	18400 <__assert_fail@plt+0x727c>
   1733c:	mov	r3, r0
   17340:	mov	r2, r3
   17344:	ldr	r3, [fp, #-16]
   17348:	cmp	r2, r3
   1734c:	movlt	r3, #1
   17350:	movge	r3, #0
   17354:	uxtb	r3, r3
   17358:	b	17360 <__assert_fail@plt+0x61dc>
   1735c:	mov	r3, #0
   17360:	cmp	r3, #0
   17364:	beq	17384 <__assert_fail@plt+0x6200>
   17368:	ldr	r3, [fp, #-16]
   1736c:	mov	r2, r3
   17370:	ldr	r3, [fp, #4]
   17374:	mul	r3, r3, r2
   17378:	str	r3, [fp, #-20]	; 0xffffffec
   1737c:	mov	r3, #1
   17380:	b	1739c <__assert_fail@plt+0x6218>
   17384:	ldr	r3, [fp, #-16]
   17388:	mov	r2, r3
   1738c:	ldr	r3, [fp, #4]
   17390:	mul	r3, r3, r2
   17394:	str	r3, [fp, #-20]	; 0xffffffec
   17398:	mov	r3, #0
   1739c:	cmp	r3, #0
   173a0:	beq	173ac <__assert_fail@plt+0x6228>
   173a4:	mvn	r3, #-2147483648	; 0x80000000
   173a8:	b	173c4 <__assert_fail@plt+0x6240>
   173ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   173b0:	cmp	r3, #63	; 0x3f
   173b4:	bgt	173c0 <__assert_fail@plt+0x623c>
   173b8:	mov	r3, #64	; 0x40
   173bc:	b	173c4 <__assert_fail@plt+0x6240>
   173c0:	mov	r3, #0
   173c4:	str	r3, [fp, #-12]
   173c8:	ldr	r3, [fp, #-12]
   173cc:	cmp	r3, #0
   173d0:	beq	1740c <__assert_fail@plt+0x6288>
   173d4:	ldr	r1, [fp, #4]
   173d8:	ldr	r0, [fp, #-12]
   173dc:	bl	18400 <__assert_fail@plt+0x727c>
   173e0:	mov	r3, r0
   173e4:	str	r3, [fp, #-16]
   173e8:	ldr	r3, [fp, #-12]
   173ec:	ldr	r1, [fp, #4]
   173f0:	mov	r0, r3
   173f4:	bl	18620 <__assert_fail@plt+0x749c>
   173f8:	mov	r3, r1
   173fc:	mov	r2, r3
   17400:	ldr	r3, [fp, #-12]
   17404:	sub	r3, r3, r2
   17408:	str	r3, [fp, #-20]	; 0xffffffec
   1740c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17410:	cmp	r3, #0
   17414:	bne	17424 <__assert_fail@plt+0x62a0>
   17418:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1741c:	mov	r2, #0
   17420:	str	r2, [r3]
   17424:	ldr	r2, [fp, #-16]
   17428:	ldr	r3, [fp, #-8]
   1742c:	sub	r2, r2, r3
   17430:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17434:	cmp	r2, r3
   17438:	bge	17670 <__assert_fail@plt+0x64ec>
   1743c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17440:	cmp	r3, #0
   17444:	bge	17468 <__assert_fail@plt+0x62e4>
   17448:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1744c:	rsb	r2, r3, #-2147483648	; 0x80000000
   17450:	ldr	r3, [fp, #-8]
   17454:	cmp	r2, r3
   17458:	movgt	r3, #1
   1745c:	movle	r3, #0
   17460:	uxtb	r3, r3
   17464:	b	174b4 <__assert_fail@plt+0x6330>
   17468:	ldr	r3, [fp, #-8]
   1746c:	cmp	r3, #0
   17470:	bge	17494 <__assert_fail@plt+0x6310>
   17474:	ldr	r3, [fp, #-8]
   17478:	rsb	r2, r3, #-2147483648	; 0x80000000
   1747c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17480:	cmp	r2, r3
   17484:	movgt	r3, #1
   17488:	movle	r3, #0
   1748c:	uxtb	r3, r3
   17490:	b	174b4 <__assert_fail@plt+0x6330>
   17494:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17498:	mvn	r3, #-2147483648	; 0x80000000
   1749c:	sub	r3, r3, r2
   174a0:	ldr	r2, [fp, #-8]
   174a4:	cmp	r3, r2
   174a8:	movlt	r3, #1
   174ac:	movge	r3, #0
   174b0:	uxtb	r3, r3
   174b4:	cmp	r3, #0
   174b8:	beq	174d0 <__assert_fail@plt+0x634c>
   174bc:	ldr	r2, [fp, #-8]
   174c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174c4:	add	r3, r2, r3
   174c8:	str	r3, [fp, #-16]
   174cc:	b	1766c <__assert_fail@plt+0x64e8>
   174d0:	ldr	r2, [fp, #-8]
   174d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174d8:	add	r3, r2, r3
   174dc:	str	r3, [fp, #-16]
   174e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   174e4:	cmp	r3, #0
   174e8:	blt	174fc <__assert_fail@plt+0x6378>
   174ec:	ldr	r3, [fp, #-16]
   174f0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   174f4:	cmp	r2, r3
   174f8:	blt	1766c <__assert_fail@plt+0x64e8>
   174fc:	ldr	r3, [fp, #4]
   17500:	cmp	r3, #0
   17504:	bge	17594 <__assert_fail@plt+0x6410>
   17508:	ldr	r3, [fp, #-16]
   1750c:	cmp	r3, #0
   17510:	bge	17540 <__assert_fail@plt+0x63bc>
   17514:	ldr	r1, [fp, #4]
   17518:	mvn	r0, #-2147483648	; 0x80000000
   1751c:	bl	18400 <__assert_fail@plt+0x727c>
   17520:	mov	r3, r0
   17524:	mov	r2, r3
   17528:	ldr	r3, [fp, #-16]
   1752c:	cmp	r2, r3
   17530:	movgt	r3, #1
   17534:	movle	r3, #0
   17538:	uxtb	r3, r3
   1753c:	b	17634 <__assert_fail@plt+0x64b0>
   17540:	ldr	r3, [fp, #4]
   17544:	cmn	r3, #1
   17548:	bne	17568 <__assert_fail@plt+0x63e4>
   1754c:	ldr	r3, [fp, #-16]
   17550:	add	r3, r3, #-2147483648	; 0x80000000
   17554:	cmp	r3, #0
   17558:	movgt	r3, #1
   1755c:	movle	r3, #0
   17560:	uxtb	r3, r3
   17564:	b	17634 <__assert_fail@plt+0x64b0>
   17568:	ldr	r1, [fp, #4]
   1756c:	mov	r0, #-2147483648	; 0x80000000
   17570:	bl	18400 <__assert_fail@plt+0x727c>
   17574:	mov	r3, r0
   17578:	mov	r2, r3
   1757c:	ldr	r3, [fp, #-16]
   17580:	cmp	r2, r3
   17584:	movlt	r3, #1
   17588:	movge	r3, #0
   1758c:	uxtb	r3, r3
   17590:	b	17634 <__assert_fail@plt+0x64b0>
   17594:	ldr	r3, [fp, #4]
   17598:	cmp	r3, #0
   1759c:	beq	17630 <__assert_fail@plt+0x64ac>
   175a0:	ldr	r3, [fp, #-16]
   175a4:	cmp	r3, #0
   175a8:	bge	17604 <__assert_fail@plt+0x6480>
   175ac:	ldr	r3, [fp, #-16]
   175b0:	cmn	r3, #1
   175b4:	bne	175d4 <__assert_fail@plt+0x6450>
   175b8:	ldr	r3, [fp, #4]
   175bc:	add	r3, r3, #-2147483648	; 0x80000000
   175c0:	cmp	r3, #0
   175c4:	movgt	r3, #1
   175c8:	movle	r3, #0
   175cc:	uxtb	r3, r3
   175d0:	b	17634 <__assert_fail@plt+0x64b0>
   175d4:	ldr	r3, [fp, #-16]
   175d8:	mov	r1, r3
   175dc:	mov	r0, #-2147483648	; 0x80000000
   175e0:	bl	18400 <__assert_fail@plt+0x727c>
   175e4:	mov	r3, r0
   175e8:	mov	r2, r3
   175ec:	ldr	r3, [fp, #4]
   175f0:	cmp	r2, r3
   175f4:	movlt	r3, #1
   175f8:	movge	r3, #0
   175fc:	uxtb	r3, r3
   17600:	b	17634 <__assert_fail@plt+0x64b0>
   17604:	ldr	r1, [fp, #4]
   17608:	mvn	r0, #-2147483648	; 0x80000000
   1760c:	bl	18400 <__assert_fail@plt+0x727c>
   17610:	mov	r3, r0
   17614:	mov	r2, r3
   17618:	ldr	r3, [fp, #-16]
   1761c:	cmp	r2, r3
   17620:	movlt	r3, #1
   17624:	movge	r3, #0
   17628:	uxtb	r3, r3
   1762c:	b	17634 <__assert_fail@plt+0x64b0>
   17630:	mov	r3, #0
   17634:	cmp	r3, #0
   17638:	beq	17654 <__assert_fail@plt+0x64d0>
   1763c:	ldr	r3, [fp, #-16]
   17640:	mov	r2, r3
   17644:	ldr	r3, [fp, #4]
   17648:	mul	r3, r3, r2
   1764c:	str	r3, [fp, #-20]	; 0xffffffec
   17650:	b	1766c <__assert_fail@plt+0x64e8>
   17654:	ldr	r3, [fp, #-16]
   17658:	mov	r2, r3
   1765c:	ldr	r3, [fp, #4]
   17660:	mul	r3, r3, r2
   17664:	str	r3, [fp, #-20]	; 0xffffffec
   17668:	b	17670 <__assert_fail@plt+0x64ec>
   1766c:	bl	17894 <__assert_fail@plt+0x6710>
   17670:	ldr	r3, [fp, #-20]	; 0xffffffec
   17674:	mov	r1, r3
   17678:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1767c:	bl	16e08 <__assert_fail@plt+0x5c84>
   17680:	str	r0, [fp, #-24]	; 0xffffffe8
   17684:	ldr	r2, [fp, #-16]
   17688:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1768c:	str	r2, [r3]
   17690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17694:	mov	r0, r3
   17698:	sub	sp, fp, #4
   1769c:	pop	{fp, pc}
   176a0:	push	{fp, lr}
   176a4:	add	fp, sp, #4
   176a8:	sub	sp, sp, #8
   176ac:	str	r0, [fp, #-8]
   176b0:	mov	r1, #1
   176b4:	ldr	r0, [fp, #-8]
   176b8:	bl	176f8 <__assert_fail@plt+0x6574>
   176bc:	mov	r3, r0
   176c0:	mov	r0, r3
   176c4:	sub	sp, fp, #4
   176c8:	pop	{fp, pc}
   176cc:	push	{fp, lr}
   176d0:	add	fp, sp, #4
   176d4:	sub	sp, sp, #8
   176d8:	str	r0, [fp, #-8]
   176dc:	mov	r1, #1
   176e0:	ldr	r0, [fp, #-8]
   176e4:	bl	17734 <__assert_fail@plt+0x65b0>
   176e8:	mov	r3, r0
   176ec:	mov	r0, r3
   176f0:	sub	sp, fp, #4
   176f4:	pop	{fp, pc}
   176f8:	push	{fp, lr}
   176fc:	add	fp, sp, #4
   17700:	sub	sp, sp, #8
   17704:	str	r0, [fp, #-8]
   17708:	str	r1, [fp, #-12]
   1770c:	ldr	r1, [fp, #-12]
   17710:	ldr	r0, [fp, #-8]
   17714:	bl	178d0 <__assert_fail@plt+0x674c>
   17718:	mov	r3, r0
   1771c:	mov	r0, r3
   17720:	bl	16d48 <__assert_fail@plt+0x5bc4>
   17724:	mov	r3, r0
   17728:	mov	r0, r3
   1772c:	sub	sp, fp, #4
   17730:	pop	{fp, pc}
   17734:	push	{fp, lr}
   17738:	add	fp, sp, #4
   1773c:	sub	sp, sp, #8
   17740:	str	r0, [fp, #-8]
   17744:	str	r1, [fp, #-12]
   17748:	ldr	r1, [fp, #-12]
   1774c:	ldr	r0, [fp, #-8]
   17750:	bl	17fa0 <__assert_fail@plt+0x6e1c>
   17754:	mov	r3, r0
   17758:	mov	r0, r3
   1775c:	bl	16d48 <__assert_fail@plt+0x5bc4>
   17760:	mov	r3, r0
   17764:	mov	r0, r3
   17768:	sub	sp, fp, #4
   1776c:	pop	{fp, pc}
   17770:	push	{fp, lr}
   17774:	add	fp, sp, #4
   17778:	sub	sp, sp, #8
   1777c:	str	r0, [fp, #-8]
   17780:	str	r1, [fp, #-12]
   17784:	ldr	r0, [fp, #-12]
   17788:	bl	16d78 <__assert_fail@plt+0x5bf4>
   1778c:	mov	r3, r0
   17790:	ldr	r2, [fp, #-12]
   17794:	ldr	r1, [fp, #-8]
   17798:	mov	r0, r3
   1779c:	bl	10efc <memcpy@plt>
   177a0:	mov	r3, r0
   177a4:	mov	r0, r3
   177a8:	sub	sp, fp, #4
   177ac:	pop	{fp, pc}
   177b0:	push	{fp, lr}
   177b4:	add	fp, sp, #4
   177b8:	sub	sp, sp, #8
   177bc:	str	r0, [fp, #-8]
   177c0:	str	r1, [fp, #-12]
   177c4:	ldr	r0, [fp, #-12]
   177c8:	bl	16dac <__assert_fail@plt+0x5c28>
   177cc:	mov	r3, r0
   177d0:	mov	r0, r3
   177d4:	ldr	r3, [fp, #-12]
   177d8:	mov	r2, r3
   177dc:	ldr	r1, [fp, #-8]
   177e0:	bl	10efc <memcpy@plt>
   177e4:	mov	r3, r0
   177e8:	mov	r0, r3
   177ec:	sub	sp, fp, #4
   177f0:	pop	{fp, pc}
   177f4:	push	{fp, lr}
   177f8:	add	fp, sp, #4
   177fc:	sub	sp, sp, #16
   17800:	str	r0, [fp, #-16]
   17804:	str	r1, [fp, #-20]	; 0xffffffec
   17808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1780c:	add	r3, r3, #1
   17810:	mov	r0, r3
   17814:	bl	16dac <__assert_fail@plt+0x5c28>
   17818:	mov	r3, r0
   1781c:	str	r3, [fp, #-8]
   17820:	ldr	r3, [fp, #-20]	; 0xffffffec
   17824:	ldr	r2, [fp, #-8]
   17828:	add	r3, r2, r3
   1782c:	mov	r2, #0
   17830:	strb	r2, [r3]
   17834:	ldr	r3, [fp, #-20]	; 0xffffffec
   17838:	mov	r2, r3
   1783c:	ldr	r1, [fp, #-16]
   17840:	ldr	r0, [fp, #-8]
   17844:	bl	10efc <memcpy@plt>
   17848:	mov	r3, r0
   1784c:	mov	r0, r3
   17850:	sub	sp, fp, #4
   17854:	pop	{fp, pc}
   17858:	push	{fp, lr}
   1785c:	add	fp, sp, #4
   17860:	sub	sp, sp, #8
   17864:	str	r0, [fp, #-8]
   17868:	ldr	r0, [fp, #-8]
   1786c:	bl	11070 <strlen@plt>
   17870:	mov	r3, r0
   17874:	add	r3, r3, #1
   17878:	mov	r1, r3
   1787c:	ldr	r0, [fp, #-8]
   17880:	bl	17770 <__assert_fail@plt+0x65ec>
   17884:	mov	r3, r0
   17888:	mov	r0, r3
   1788c:	sub	sp, fp, #4
   17890:	pop	{fp, pc}
   17894:	push	{r4, r5, fp, lr}
   17898:	add	fp, sp, #12
   1789c:	ldr	r3, [pc, #32]	; 178c4 <__assert_fail@plt+0x6740>
   178a0:	ldr	r4, [r3]
   178a4:	ldr	r0, [pc, #28]	; 178c8 <__assert_fail@plt+0x6744>
   178a8:	bl	11058 <gettext@plt>
   178ac:	mov	r3, r0
   178b0:	ldr	r2, [pc, #20]	; 178cc <__assert_fail@plt+0x6748>
   178b4:	mov	r1, #0
   178b8:	mov	r0, r4
   178bc:	bl	10fc8 <error@plt>
   178c0:	bl	1116c <abort@plt>
   178c4:	andeq	sl, r2, r8, lsr #2
   178c8:	andeq	r9, r1, r8, asr #15
   178cc:	ldrdeq	r9, [r1], -ip
   178d0:	push	{r4, r5, fp, lr}
   178d4:	add	fp, sp, #12
   178d8:	sub	sp, sp, #16
   178dc:	str	r0, [fp, #-24]	; 0xffffffe8
   178e0:	str	r1, [fp, #-28]	; 0xffffffe4
   178e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178e8:	cmp	r3, #0
   178ec:	beq	178fc <__assert_fail@plt+0x6778>
   178f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   178f4:	cmp	r3, #0
   178f8:	bne	1790c <__assert_fail@plt+0x6788>
   178fc:	mov	r3, #1
   17900:	str	r3, [fp, #-28]	; 0xffffffe4
   17904:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17908:	str	r3, [fp, #-24]	; 0xffffffe8
   1790c:	mov	r1, #0
   17910:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17914:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17918:	umull	r2, r3, r2, r3
   1791c:	mov	r4, r3
   17920:	mov	r5, #0
   17924:	cmp	r4, #0
   17928:	beq	17930 <__assert_fail@plt+0x67ac>
   1792c:	mov	r1, #1
   17930:	cmp	r2, #0
   17934:	bge	1793c <__assert_fail@plt+0x67b8>
   17938:	mov	r1, #1
   1793c:	mov	r3, r2
   17940:	str	r3, [fp, #-20]	; 0xffffffec
   17944:	mov	r3, r1
   17948:	and	r3, r3, #1
   1794c:	uxtb	r3, r3
   17950:	cmp	r3, #0
   17954:	beq	17970 <__assert_fail@plt+0x67ec>
   17958:	bl	11094 <__errno_location@plt>
   1795c:	mov	r2, r0
   17960:	mov	r3, #12
   17964:	str	r3, [r2]
   17968:	mov	r3, #0
   1796c:	b	17988 <__assert_fail@plt+0x6804>
   17970:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17974:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17978:	bl	10e84 <calloc@plt>
   1797c:	mov	r3, r0
   17980:	str	r3, [fp, #-16]
   17984:	ldr	r3, [fp, #-16]
   17988:	mov	r0, r3
   1798c:	sub	sp, fp, #12
   17990:	pop	{r4, r5, fp, pc}
   17994:	push	{r4, r5, fp, lr}
   17998:	add	fp, sp, #12
   1799c:	sub	sp, sp, #16
   179a0:	str	r0, [fp, #-24]	; 0xffffffe8
   179a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179a8:	cmp	r3, #0
   179ac:	bne	179b8 <__assert_fail@plt+0x6834>
   179b0:	mov	r3, #1
   179b4:	str	r3, [fp, #-24]	; 0xffffffe8
   179b8:	mov	r1, #0
   179bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179c0:	mov	r2, r3
   179c4:	mov	r3, #0
   179c8:	mov	r4, r3
   179cc:	mov	r5, #0
   179d0:	cmp	r4, #0
   179d4:	beq	179dc <__assert_fail@plt+0x6858>
   179d8:	mov	r1, #1
   179dc:	cmp	r2, #0
   179e0:	bge	179e8 <__assert_fail@plt+0x6864>
   179e4:	mov	r1, #1
   179e8:	mov	r3, r2
   179ec:	str	r3, [fp, #-20]	; 0xffffffec
   179f0:	mov	r3, r1
   179f4:	and	r3, r3, #1
   179f8:	uxtb	r3, r3
   179fc:	cmp	r3, #0
   17a00:	beq	17a1c <__assert_fail@plt+0x6898>
   17a04:	bl	11094 <__errno_location@plt>
   17a08:	mov	r2, r0
   17a0c:	mov	r3, #12
   17a10:	str	r3, [r2]
   17a14:	mov	r3, #0
   17a18:	b	17a30 <__assert_fail@plt+0x68ac>
   17a1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a20:	bl	10fe0 <malloc@plt>
   17a24:	mov	r3, r0
   17a28:	str	r3, [fp, #-16]
   17a2c:	ldr	r3, [fp, #-16]
   17a30:	mov	r0, r3
   17a34:	sub	sp, fp, #12
   17a38:	pop	{r4, r5, fp, pc}
   17a3c:	push	{r4, r5, fp, lr}
   17a40:	add	fp, sp, #12
   17a44:	sub	sp, sp, #16
   17a48:	str	r0, [fp, #-24]	; 0xffffffe8
   17a4c:	str	r1, [fp, #-28]	; 0xffffffe4
   17a50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a54:	cmp	r3, #0
   17a58:	bne	17a6c <__assert_fail@plt+0x68e8>
   17a5c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17a60:	bl	17994 <__assert_fail@plt+0x6810>
   17a64:	mov	r3, r0
   17a68:	b	17b00 <__assert_fail@plt+0x697c>
   17a6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17a70:	cmp	r3, #0
   17a74:	bne	17a88 <__assert_fail@plt+0x6904>
   17a78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a7c:	bl	137d4 <__assert_fail@plt+0x2650>
   17a80:	mov	r3, #0
   17a84:	b	17b00 <__assert_fail@plt+0x697c>
   17a88:	mov	r1, #0
   17a8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17a90:	mov	r2, r3
   17a94:	mov	r3, #0
   17a98:	mov	r4, r3
   17a9c:	mov	r5, #0
   17aa0:	cmp	r4, #0
   17aa4:	beq	17aac <__assert_fail@plt+0x6928>
   17aa8:	mov	r1, #1
   17aac:	cmp	r2, #0
   17ab0:	bge	17ab8 <__assert_fail@plt+0x6934>
   17ab4:	mov	r1, #1
   17ab8:	mov	r3, r2
   17abc:	str	r3, [fp, #-20]	; 0xffffffec
   17ac0:	mov	r3, r1
   17ac4:	and	r3, r3, #1
   17ac8:	uxtb	r3, r3
   17acc:	cmp	r3, #0
   17ad0:	beq	17aec <__assert_fail@plt+0x6968>
   17ad4:	bl	11094 <__errno_location@plt>
   17ad8:	mov	r2, r0
   17adc:	mov	r3, #12
   17ae0:	str	r3, [r2]
   17ae4:	mov	r3, #0
   17ae8:	b	17b00 <__assert_fail@plt+0x697c>
   17aec:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17af0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17af4:	bl	10f5c <realloc@plt>
   17af8:	str	r0, [fp, #-16]
   17afc:	ldr	r3, [fp, #-16]
   17b00:	mov	r0, r3
   17b04:	sub	sp, fp, #12
   17b08:	pop	{r4, r5, fp, pc}
   17b0c:	push	{r4, r5, fp, lr}
   17b10:	add	fp, sp, #12
   17b14:	sub	sp, sp, #16
   17b18:	str	r0, [fp, #-24]	; 0xffffffe8
   17b1c:	str	r1, [fp, #-28]	; 0xffffffe4
   17b20:	ldr	r5, [fp, #-24]	; 0xffffffe8
   17b24:	ldr	r4, [fp, #-28]	; 0xffffffe4
   17b28:	cmp	r5, r4
   17b2c:	bne	17b38 <__assert_fail@plt+0x69b4>
   17b30:	mov	r3, #0
   17b34:	b	17b98 <__assert_fail@plt+0x6a14>
   17b38:	ldrb	r3, [r5]
   17b3c:	mov	r0, r3
   17b40:	bl	13480 <__assert_fail@plt+0x22fc>
   17b44:	mov	r3, r0
   17b48:	strb	r3, [fp, #-13]
   17b4c:	ldrb	r3, [r4]
   17b50:	mov	r0, r3
   17b54:	bl	13480 <__assert_fail@plt+0x22fc>
   17b58:	mov	r3, r0
   17b5c:	strb	r3, [fp, #-14]
   17b60:	ldrb	r3, [fp, #-13]
   17b64:	cmp	r3, #0
   17b68:	beq	17b88 <__assert_fail@plt+0x6a04>
   17b6c:	add	r5, r5, #1
   17b70:	add	r4, r4, #1
   17b74:	ldrb	r2, [fp, #-13]
   17b78:	ldrb	r3, [fp, #-14]
   17b7c:	cmp	r2, r3
   17b80:	beq	17b38 <__assert_fail@plt+0x69b4>
   17b84:	b	17b8c <__assert_fail@plt+0x6a08>
   17b88:	nop			; (mov r0, r0)
   17b8c:	ldrb	r2, [fp, #-13]
   17b90:	ldrb	r3, [fp, #-14]
   17b94:	sub	r3, r2, r3
   17b98:	mov	r0, r3
   17b9c:	sub	sp, fp, #12
   17ba0:	pop	{r4, r5, fp, pc}
   17ba4:	push	{fp, lr}
   17ba8:	add	fp, sp, #4
   17bac:	sub	sp, sp, #16
   17bb0:	str	r0, [fp, #-16]
   17bb4:	ldr	r0, [fp, #-16]
   17bb8:	bl	10fa4 <__fpending@plt>
   17bbc:	mov	r3, r0
   17bc0:	cmp	r3, #0
   17bc4:	movne	r3, #1
   17bc8:	moveq	r3, #0
   17bcc:	strb	r3, [fp, #-5]
   17bd0:	ldr	r0, [fp, #-16]
   17bd4:	bl	10fb0 <ferror_unlocked@plt>
   17bd8:	mov	r3, r0
   17bdc:	cmp	r3, #0
   17be0:	movne	r3, #1
   17be4:	moveq	r3, #0
   17be8:	strb	r3, [fp, #-6]
   17bec:	ldr	r0, [fp, #-16]
   17bf0:	bl	17c7c <__assert_fail@plt+0x6af8>
   17bf4:	mov	r3, r0
   17bf8:	cmp	r3, #0
   17bfc:	movne	r3, #1
   17c00:	moveq	r3, #0
   17c04:	strb	r3, [fp, #-7]
   17c08:	ldrb	r3, [fp, #-6]
   17c0c:	cmp	r3, #0
   17c10:	bne	17c40 <__assert_fail@plt+0x6abc>
   17c14:	ldrb	r3, [fp, #-7]
   17c18:	cmp	r3, #0
   17c1c:	beq	17c6c <__assert_fail@plt+0x6ae8>
   17c20:	ldrb	r3, [fp, #-5]
   17c24:	cmp	r3, #0
   17c28:	bne	17c40 <__assert_fail@plt+0x6abc>
   17c2c:	bl	11094 <__errno_location@plt>
   17c30:	mov	r3, r0
   17c34:	ldr	r3, [r3]
   17c38:	cmp	r3, #9
   17c3c:	beq	17c6c <__assert_fail@plt+0x6ae8>
   17c40:	ldrb	r3, [fp, #-7]
   17c44:	eor	r3, r3, #1
   17c48:	uxtb	r3, r3
   17c4c:	cmp	r3, #0
   17c50:	beq	17c64 <__assert_fail@plt+0x6ae0>
   17c54:	bl	11094 <__errno_location@plt>
   17c58:	mov	r2, r0
   17c5c:	mov	r3, #0
   17c60:	str	r3, [r2]
   17c64:	mvn	r3, #0
   17c68:	b	17c70 <__assert_fail@plt+0x6aec>
   17c6c:	mov	r3, #0
   17c70:	mov	r0, r3
   17c74:	sub	sp, fp, #4
   17c78:	pop	{fp, pc}
   17c7c:	push	{fp, lr}
   17c80:	add	fp, sp, #4
   17c84:	sub	sp, sp, #32
   17c88:	str	r0, [fp, #-24]	; 0xffffffe8
   17c8c:	mov	r3, #0
   17c90:	str	r3, [fp, #-8]
   17c94:	mov	r3, #0
   17c98:	str	r3, [fp, #-12]
   17c9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ca0:	bl	110c4 <fileno@plt>
   17ca4:	str	r0, [fp, #-16]
   17ca8:	ldr	r3, [fp, #-16]
   17cac:	cmp	r3, #0
   17cb0:	bge	17cc4 <__assert_fail@plt+0x6b40>
   17cb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17cb8:	bl	110dc <fclose@plt>
   17cbc:	mov	r3, r0
   17cc0:	b	17d68 <__assert_fail@plt+0x6be4>
   17cc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17cc8:	bl	11004 <__freading@plt>
   17ccc:	mov	r3, r0
   17cd0:	cmp	r3, #0
   17cd4:	beq	17d10 <__assert_fail@plt+0x6b8c>
   17cd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17cdc:	bl	110c4 <fileno@plt>
   17ce0:	mov	r1, r0
   17ce4:	mov	r3, #1
   17ce8:	str	r3, [sp]
   17cec:	mov	r2, #0
   17cf0:	mov	r3, #0
   17cf4:	mov	r0, r1
   17cf8:	bl	10f8c <lseek64@plt>
   17cfc:	mvn	r2, #0
   17d00:	mvn	r3, #0
   17d04:	cmp	r1, r3
   17d08:	cmpeq	r0, r2
   17d0c:	beq	17d34 <__assert_fail@plt+0x6bb0>
   17d10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d14:	bl	17dbc <__assert_fail@plt+0x6c38>
   17d18:	mov	r3, r0
   17d1c:	cmp	r3, #0
   17d20:	beq	17d34 <__assert_fail@plt+0x6bb0>
   17d24:	bl	11094 <__errno_location@plt>
   17d28:	mov	r3, r0
   17d2c:	ldr	r3, [r3]
   17d30:	str	r3, [fp, #-8]
   17d34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d38:	bl	110dc <fclose@plt>
   17d3c:	str	r0, [fp, #-12]
   17d40:	ldr	r3, [fp, #-8]
   17d44:	cmp	r3, #0
   17d48:	beq	17d64 <__assert_fail@plt+0x6be0>
   17d4c:	bl	11094 <__errno_location@plt>
   17d50:	mov	r2, r0
   17d54:	ldr	r3, [fp, #-8]
   17d58:	str	r3, [r2]
   17d5c:	mvn	r3, #0
   17d60:	str	r3, [fp, #-12]
   17d64:	ldr	r3, [fp, #-12]
   17d68:	mov	r0, r3
   17d6c:	sub	sp, fp, #4
   17d70:	pop	{fp, pc}
   17d74:	push	{fp, lr}
   17d78:	add	fp, sp, #4
   17d7c:	sub	sp, sp, #16
   17d80:	str	r0, [fp, #-8]
   17d84:	ldr	r3, [fp, #-8]
   17d88:	ldr	r3, [r3]
   17d8c:	and	r3, r3, #256	; 0x100
   17d90:	cmp	r3, #0
   17d94:	beq	17db0 <__assert_fail@plt+0x6c2c>
   17d98:	mov	r3, #1
   17d9c:	str	r3, [sp]
   17da0:	mov	r2, #0
   17da4:	mov	r3, #0
   17da8:	ldr	r0, [fp, #-8]
   17dac:	bl	17e1c <__assert_fail@plt+0x6c98>
   17db0:	nop			; (mov r0, r0)
   17db4:	sub	sp, fp, #4
   17db8:	pop	{fp, pc}
   17dbc:	push	{fp, lr}
   17dc0:	add	fp, sp, #4
   17dc4:	sub	sp, sp, #8
   17dc8:	str	r0, [fp, #-8]
   17dcc:	ldr	r3, [fp, #-8]
   17dd0:	cmp	r3, #0
   17dd4:	beq	17dec <__assert_fail@plt+0x6c68>
   17dd8:	ldr	r0, [fp, #-8]
   17ddc:	bl	11004 <__freading@plt>
   17de0:	mov	r3, r0
   17de4:	cmp	r3, #0
   17de8:	bne	17dfc <__assert_fail@plt+0x6c78>
   17dec:	ldr	r0, [fp, #-8]
   17df0:	bl	10ec0 <fflush@plt>
   17df4:	mov	r3, r0
   17df8:	b	17e10 <__assert_fail@plt+0x6c8c>
   17dfc:	ldr	r0, [fp, #-8]
   17e00:	bl	17d74 <__assert_fail@plt+0x6bf0>
   17e04:	ldr	r0, [fp, #-8]
   17e08:	bl	10ec0 <fflush@plt>
   17e0c:	mov	r3, r0
   17e10:	mov	r0, r3
   17e14:	sub	sp, fp, #4
   17e18:	pop	{fp, pc}
   17e1c:	push	{fp, lr}
   17e20:	add	fp, sp, #4
   17e24:	sub	sp, sp, #32
   17e28:	str	r0, [fp, #-16]
   17e2c:	strd	r2, [fp, #-28]	; 0xffffffe4
   17e30:	ldr	r3, [fp, #-16]
   17e34:	ldr	r2, [r3, #8]
   17e38:	ldr	r3, [fp, #-16]
   17e3c:	ldr	r3, [r3, #4]
   17e40:	cmp	r2, r3
   17e44:	bne	17edc <__assert_fail@plt+0x6d58>
   17e48:	ldr	r3, [fp, #-16]
   17e4c:	ldr	r2, [r3, #20]
   17e50:	ldr	r3, [fp, #-16]
   17e54:	ldr	r3, [r3, #16]
   17e58:	cmp	r2, r3
   17e5c:	bne	17edc <__assert_fail@plt+0x6d58>
   17e60:	ldr	r3, [fp, #-16]
   17e64:	ldr	r3, [r3, #36]	; 0x24
   17e68:	cmp	r3, #0
   17e6c:	bne	17edc <__assert_fail@plt+0x6d58>
   17e70:	ldr	r0, [fp, #-16]
   17e74:	bl	110c4 <fileno@plt>
   17e78:	mov	r1, r0
   17e7c:	ldr	r3, [fp, #4]
   17e80:	str	r3, [sp]
   17e84:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17e88:	mov	r0, r1
   17e8c:	bl	10f8c <lseek64@plt>
   17e90:	strd	r0, [fp, #-12]
   17e94:	ldrd	r2, [fp, #-12]
   17e98:	mvn	r0, #0
   17e9c:	mvn	r1, #0
   17ea0:	cmp	r3, r1
   17ea4:	cmpeq	r2, r0
   17ea8:	bne	17eb4 <__assert_fail@plt+0x6d30>
   17eac:	mvn	r3, #0
   17eb0:	b	17ef4 <__assert_fail@plt+0x6d70>
   17eb4:	ldr	r3, [fp, #-16]
   17eb8:	ldr	r3, [r3]
   17ebc:	bic	r2, r3, #16
   17ec0:	ldr	r3, [fp, #-16]
   17ec4:	str	r2, [r3]
   17ec8:	ldr	r1, [fp, #-16]
   17ecc:	ldrd	r2, [fp, #-12]
   17ed0:	strd	r2, [r1, #80]	; 0x50
   17ed4:	mov	r3, #0
   17ed8:	b	17ef4 <__assert_fail@plt+0x6d70>
   17edc:	ldr	r3, [fp, #4]
   17ee0:	str	r3, [sp]
   17ee4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17ee8:	ldr	r0, [fp, #-16]
   17eec:	bl	110e8 <fseeko64@plt>
   17ef0:	mov	r3, r0
   17ef4:	mov	r0, r3
   17ef8:	sub	sp, fp, #4
   17efc:	pop	{fp, pc}
   17f00:	push	{fp, lr}
   17f04:	add	fp, sp, #4
   17f08:	bl	11094 <__errno_location@plt>
   17f0c:	mov	r2, r0
   17f10:	mov	r3, #12
   17f14:	str	r3, [r2]
   17f18:	mov	r3, #0
   17f1c:	mov	r0, r3
   17f20:	pop	{fp, pc}
   17f24:	push	{fp, lr}
   17f28:	add	fp, sp, #4
   17f2c:	sub	sp, sp, #8
   17f30:	str	r0, [fp, #-8]
   17f34:	ldr	r3, [fp, #-8]
   17f38:	mov	r0, r3
   17f3c:	bl	17994 <__assert_fail@plt+0x6810>
   17f40:	mov	r3, r0
   17f44:	mov	r0, r3
   17f48:	sub	sp, fp, #4
   17f4c:	pop	{fp, pc}
   17f50:	push	{fp, lr}
   17f54:	add	fp, sp, #4
   17f58:	sub	sp, sp, #8
   17f5c:	str	r0, [fp, #-8]
   17f60:	str	r1, [fp, #-12]
   17f64:	ldr	r3, [fp, #-12]
   17f68:	cmp	r3, #0
   17f6c:	moveq	r3, #1
   17f70:	movne	r3, #0
   17f74:	uxtb	r3, r3
   17f78:	mov	r2, r3
   17f7c:	ldr	r3, [fp, #-12]
   17f80:	orr	r3, r2, r3
   17f84:	mov	r1, r3
   17f88:	ldr	r0, [fp, #-8]
   17f8c:	bl	17a3c <__assert_fail@plt+0x68b8>
   17f90:	mov	r3, r0
   17f94:	mov	r0, r3
   17f98:	sub	sp, fp, #4
   17f9c:	pop	{fp, pc}
   17fa0:	push	{fp, lr}
   17fa4:	add	fp, sp, #4
   17fa8:	sub	sp, sp, #8
   17fac:	str	r0, [fp, #-8]
   17fb0:	str	r1, [fp, #-12]
   17fb4:	ldr	r3, [fp, #-8]
   17fb8:	ldr	r2, [fp, #-12]
   17fbc:	mov	r1, r2
   17fc0:	mov	r0, r3
   17fc4:	bl	178d0 <__assert_fail@plt+0x674c>
   17fc8:	mov	r3, r0
   17fcc:	mov	r0, r3
   17fd0:	sub	sp, fp, #4
   17fd4:	pop	{fp, pc}
   17fd8:	push	{fp, lr}
   17fdc:	add	fp, sp, #4
   17fe0:	sub	sp, sp, #16
   17fe4:	str	r0, [fp, #-8]
   17fe8:	str	r1, [fp, #-12]
   17fec:	str	r2, [fp, #-16]
   17ff0:	ldr	r3, [fp, #-12]
   17ff4:	cmp	r3, #0
   17ff8:	beq	18008 <__assert_fail@plt+0x6e84>
   17ffc:	ldr	r3, [fp, #-16]
   18000:	cmp	r3, #0
   18004:	bne	18018 <__assert_fail@plt+0x6e94>
   18008:	mov	r3, #1
   1800c:	str	r3, [fp, #-16]
   18010:	ldr	r3, [fp, #-16]
   18014:	str	r3, [fp, #-12]
   18018:	ldr	r3, [fp, #-12]
   1801c:	ldr	r2, [fp, #-16]
   18020:	mov	r1, r3
   18024:	ldr	r0, [fp, #-8]
   18028:	bl	18144 <__assert_fail@plt+0x6fc0>
   1802c:	mov	r3, r0
   18030:	mov	r0, r3
   18034:	sub	sp, fp, #4
   18038:	pop	{fp, pc}
   1803c:	push	{fp, lr}
   18040:	add	fp, sp, #4
   18044:	sub	sp, sp, #8
   18048:	mov	r0, #14
   1804c:	bl	11118 <nl_langinfo@plt>
   18050:	str	r0, [fp, #-8]
   18054:	ldr	r3, [fp, #-8]
   18058:	cmp	r3, #0
   1805c:	bne	18068 <__assert_fail@plt+0x6ee4>
   18060:	ldr	r3, [pc, #40]	; 18090 <__assert_fail@plt+0x6f0c>
   18064:	str	r3, [fp, #-8]
   18068:	ldr	r3, [fp, #-8]
   1806c:	ldrb	r3, [r3]
   18070:	cmp	r3, #0
   18074:	bne	18080 <__assert_fail@plt+0x6efc>
   18078:	ldr	r3, [pc, #20]	; 18094 <__assert_fail@plt+0x6f10>
   1807c:	str	r3, [fp, #-8]
   18080:	ldr	r3, [fp, #-8]
   18084:	mov	r0, r3
   18088:	sub	sp, fp, #4
   1808c:	pop	{fp, pc}
   18090:	andeq	r9, r1, r0, ror #15
   18094:	andeq	r9, r1, r4, ror #15
   18098:	push	{fp, lr}
   1809c:	add	fp, sp, #4
   180a0:	sub	sp, sp, #32
   180a4:	str	r0, [fp, #-24]	; 0xffffffe8
   180a8:	str	r1, [fp, #-28]	; 0xffffffe4
   180ac:	str	r2, [fp, #-32]	; 0xffffffe0
   180b0:	str	r3, [fp, #-36]	; 0xffffffdc
   180b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180b8:	cmp	r3, #0
   180bc:	bne	180c8 <__assert_fail@plt+0x6f44>
   180c0:	sub	r3, fp, #16
   180c4:	str	r3, [fp, #-24]	; 0xffffffe8
   180c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   180d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   180d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   180d8:	bl	10fbc <mbrtowc@plt>
   180dc:	str	r0, [fp, #-8]
   180e0:	ldr	r3, [fp, #-8]
   180e4:	cmn	r3, #3
   180e8:	bls	18134 <__assert_fail@plt+0x6fb0>
   180ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180f0:	cmp	r3, #0
   180f4:	beq	18134 <__assert_fail@plt+0x6fb0>
   180f8:	mov	r0, #0
   180fc:	bl	13860 <__assert_fail@plt+0x26dc>
   18100:	mov	r3, r0
   18104:	eor	r3, r3, #1
   18108:	uxtb	r3, r3
   1810c:	cmp	r3, #0
   18110:	beq	18134 <__assert_fail@plt+0x6fb0>
   18114:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18118:	ldrb	r3, [r3]
   1811c:	strb	r3, [fp, #-9]
   18120:	ldrb	r2, [fp, #-9]
   18124:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18128:	str	r2, [r3]
   1812c:	mov	r3, #1
   18130:	b	18138 <__assert_fail@plt+0x6fb4>
   18134:	ldr	r3, [fp, #-8]
   18138:	mov	r0, r3
   1813c:	sub	sp, fp, #4
   18140:	pop	{fp, pc}
   18144:	push	{fp, lr}
   18148:	add	fp, sp, #4
   1814c:	sub	sp, sp, #24
   18150:	str	r0, [fp, #-16]
   18154:	str	r1, [fp, #-20]	; 0xffffffec
   18158:	str	r2, [fp, #-24]	; 0xffffffe8
   1815c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18160:	cmp	r3, #0
   18164:	beq	181a0 <__assert_fail@plt+0x701c>
   18168:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1816c:	mvn	r0, #0
   18170:	bl	181f4 <__assert_fail@plt+0x7070>
   18174:	mov	r3, r0
   18178:	mov	r2, r3
   1817c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18180:	cmp	r2, r3
   18184:	bcs	181a0 <__assert_fail@plt+0x701c>
   18188:	ldr	r3, [fp, #-20]	; 0xffffffec
   1818c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18190:	mul	r3, r2, r3
   18194:	str	r3, [fp, #-8]
   18198:	mov	r3, #1
   1819c:	b	181b4 <__assert_fail@plt+0x7030>
   181a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   181a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   181a8:	mul	r3, r2, r3
   181ac:	str	r3, [fp, #-8]
   181b0:	mov	r3, #0
   181b4:	cmp	r3, #0
   181b8:	beq	181d4 <__assert_fail@plt+0x7050>
   181bc:	bl	11094 <__errno_location@plt>
   181c0:	mov	r2, r0
   181c4:	mov	r3, #12
   181c8:	str	r3, [r2]
   181cc:	mov	r3, #0
   181d0:	b	181e8 <__assert_fail@plt+0x7064>
   181d4:	ldr	r3, [fp, #-8]
   181d8:	mov	r1, r3
   181dc:	ldr	r0, [fp, #-16]
   181e0:	bl	17a3c <__assert_fail@plt+0x68b8>
   181e4:	mov	r3, r0
   181e8:	mov	r0, r3
   181ec:	sub	sp, fp, #4
   181f0:	pop	{fp, pc}
   181f4:	subs	r2, r1, #1
   181f8:	bxeq	lr
   181fc:	bcc	183d4 <__assert_fail@plt+0x7250>
   18200:	cmp	r0, r1
   18204:	bls	183b8 <__assert_fail@plt+0x7234>
   18208:	tst	r1, r2
   1820c:	beq	183c4 <__assert_fail@plt+0x7240>
   18210:	clz	r3, r0
   18214:	clz	r2, r1
   18218:	sub	r3, r2, r3
   1821c:	rsbs	r3, r3, #31
   18220:	addne	r3, r3, r3, lsl #1
   18224:	mov	r2, #0
   18228:	addne	pc, pc, r3, lsl #2
   1822c:	nop			; (mov r0, r0)
   18230:	cmp	r0, r1, lsl #31
   18234:	adc	r2, r2, r2
   18238:	subcs	r0, r0, r1, lsl #31
   1823c:	cmp	r0, r1, lsl #30
   18240:	adc	r2, r2, r2
   18244:	subcs	r0, r0, r1, lsl #30
   18248:	cmp	r0, r1, lsl #29
   1824c:	adc	r2, r2, r2
   18250:	subcs	r0, r0, r1, lsl #29
   18254:	cmp	r0, r1, lsl #28
   18258:	adc	r2, r2, r2
   1825c:	subcs	r0, r0, r1, lsl #28
   18260:	cmp	r0, r1, lsl #27
   18264:	adc	r2, r2, r2
   18268:	subcs	r0, r0, r1, lsl #27
   1826c:	cmp	r0, r1, lsl #26
   18270:	adc	r2, r2, r2
   18274:	subcs	r0, r0, r1, lsl #26
   18278:	cmp	r0, r1, lsl #25
   1827c:	adc	r2, r2, r2
   18280:	subcs	r0, r0, r1, lsl #25
   18284:	cmp	r0, r1, lsl #24
   18288:	adc	r2, r2, r2
   1828c:	subcs	r0, r0, r1, lsl #24
   18290:	cmp	r0, r1, lsl #23
   18294:	adc	r2, r2, r2
   18298:	subcs	r0, r0, r1, lsl #23
   1829c:	cmp	r0, r1, lsl #22
   182a0:	adc	r2, r2, r2
   182a4:	subcs	r0, r0, r1, lsl #22
   182a8:	cmp	r0, r1, lsl #21
   182ac:	adc	r2, r2, r2
   182b0:	subcs	r0, r0, r1, lsl #21
   182b4:	cmp	r0, r1, lsl #20
   182b8:	adc	r2, r2, r2
   182bc:	subcs	r0, r0, r1, lsl #20
   182c0:	cmp	r0, r1, lsl #19
   182c4:	adc	r2, r2, r2
   182c8:	subcs	r0, r0, r1, lsl #19
   182cc:	cmp	r0, r1, lsl #18
   182d0:	adc	r2, r2, r2
   182d4:	subcs	r0, r0, r1, lsl #18
   182d8:	cmp	r0, r1, lsl #17
   182dc:	adc	r2, r2, r2
   182e0:	subcs	r0, r0, r1, lsl #17
   182e4:	cmp	r0, r1, lsl #16
   182e8:	adc	r2, r2, r2
   182ec:	subcs	r0, r0, r1, lsl #16
   182f0:	cmp	r0, r1, lsl #15
   182f4:	adc	r2, r2, r2
   182f8:	subcs	r0, r0, r1, lsl #15
   182fc:	cmp	r0, r1, lsl #14
   18300:	adc	r2, r2, r2
   18304:	subcs	r0, r0, r1, lsl #14
   18308:	cmp	r0, r1, lsl #13
   1830c:	adc	r2, r2, r2
   18310:	subcs	r0, r0, r1, lsl #13
   18314:	cmp	r0, r1, lsl #12
   18318:	adc	r2, r2, r2
   1831c:	subcs	r0, r0, r1, lsl #12
   18320:	cmp	r0, r1, lsl #11
   18324:	adc	r2, r2, r2
   18328:	subcs	r0, r0, r1, lsl #11
   1832c:	cmp	r0, r1, lsl #10
   18330:	adc	r2, r2, r2
   18334:	subcs	r0, r0, r1, lsl #10
   18338:	cmp	r0, r1, lsl #9
   1833c:	adc	r2, r2, r2
   18340:	subcs	r0, r0, r1, lsl #9
   18344:	cmp	r0, r1, lsl #8
   18348:	adc	r2, r2, r2
   1834c:	subcs	r0, r0, r1, lsl #8
   18350:	cmp	r0, r1, lsl #7
   18354:	adc	r2, r2, r2
   18358:	subcs	r0, r0, r1, lsl #7
   1835c:	cmp	r0, r1, lsl #6
   18360:	adc	r2, r2, r2
   18364:	subcs	r0, r0, r1, lsl #6
   18368:	cmp	r0, r1, lsl #5
   1836c:	adc	r2, r2, r2
   18370:	subcs	r0, r0, r1, lsl #5
   18374:	cmp	r0, r1, lsl #4
   18378:	adc	r2, r2, r2
   1837c:	subcs	r0, r0, r1, lsl #4
   18380:	cmp	r0, r1, lsl #3
   18384:	adc	r2, r2, r2
   18388:	subcs	r0, r0, r1, lsl #3
   1838c:	cmp	r0, r1, lsl #2
   18390:	adc	r2, r2, r2
   18394:	subcs	r0, r0, r1, lsl #2
   18398:	cmp	r0, r1, lsl #1
   1839c:	adc	r2, r2, r2
   183a0:	subcs	r0, r0, r1, lsl #1
   183a4:	cmp	r0, r1
   183a8:	adc	r2, r2, r2
   183ac:	subcs	r0, r0, r1
   183b0:	mov	r0, r2
   183b4:	bx	lr
   183b8:	moveq	r0, #1
   183bc:	movne	r0, #0
   183c0:	bx	lr
   183c4:	clz	r2, r1
   183c8:	rsb	r2, r2, #31
   183cc:	lsr	r0, r0, r2
   183d0:	bx	lr
   183d4:	cmp	r0, #0
   183d8:	mvnne	r0, #0
   183dc:	b	18714 <__assert_fail@plt+0x7590>
   183e0:	cmp	r1, #0
   183e4:	beq	183d4 <__assert_fail@plt+0x7250>
   183e8:	push	{r0, r1, lr}
   183ec:	bl	181f4 <__assert_fail@plt+0x7070>
   183f0:	pop	{r1, r2, lr}
   183f4:	mul	r3, r2, r0
   183f8:	sub	r1, r1, r3
   183fc:	bx	lr
   18400:	cmp	r1, #0
   18404:	beq	18610 <__assert_fail@plt+0x748c>
   18408:	eor	ip, r0, r1
   1840c:	rsbmi	r1, r1, #0
   18410:	subs	r2, r1, #1
   18414:	beq	185dc <__assert_fail@plt+0x7458>
   18418:	movs	r3, r0
   1841c:	rsbmi	r3, r0, #0
   18420:	cmp	r3, r1
   18424:	bls	185e8 <__assert_fail@plt+0x7464>
   18428:	tst	r1, r2
   1842c:	beq	185f8 <__assert_fail@plt+0x7474>
   18430:	clz	r2, r3
   18434:	clz	r0, r1
   18438:	sub	r2, r0, r2
   1843c:	rsbs	r2, r2, #31
   18440:	addne	r2, r2, r2, lsl #1
   18444:	mov	r0, #0
   18448:	addne	pc, pc, r2, lsl #2
   1844c:	nop			; (mov r0, r0)
   18450:	cmp	r3, r1, lsl #31
   18454:	adc	r0, r0, r0
   18458:	subcs	r3, r3, r1, lsl #31
   1845c:	cmp	r3, r1, lsl #30
   18460:	adc	r0, r0, r0
   18464:	subcs	r3, r3, r1, lsl #30
   18468:	cmp	r3, r1, lsl #29
   1846c:	adc	r0, r0, r0
   18470:	subcs	r3, r3, r1, lsl #29
   18474:	cmp	r3, r1, lsl #28
   18478:	adc	r0, r0, r0
   1847c:	subcs	r3, r3, r1, lsl #28
   18480:	cmp	r3, r1, lsl #27
   18484:	adc	r0, r0, r0
   18488:	subcs	r3, r3, r1, lsl #27
   1848c:	cmp	r3, r1, lsl #26
   18490:	adc	r0, r0, r0
   18494:	subcs	r3, r3, r1, lsl #26
   18498:	cmp	r3, r1, lsl #25
   1849c:	adc	r0, r0, r0
   184a0:	subcs	r3, r3, r1, lsl #25
   184a4:	cmp	r3, r1, lsl #24
   184a8:	adc	r0, r0, r0
   184ac:	subcs	r3, r3, r1, lsl #24
   184b0:	cmp	r3, r1, lsl #23
   184b4:	adc	r0, r0, r0
   184b8:	subcs	r3, r3, r1, lsl #23
   184bc:	cmp	r3, r1, lsl #22
   184c0:	adc	r0, r0, r0
   184c4:	subcs	r3, r3, r1, lsl #22
   184c8:	cmp	r3, r1, lsl #21
   184cc:	adc	r0, r0, r0
   184d0:	subcs	r3, r3, r1, lsl #21
   184d4:	cmp	r3, r1, lsl #20
   184d8:	adc	r0, r0, r0
   184dc:	subcs	r3, r3, r1, lsl #20
   184e0:	cmp	r3, r1, lsl #19
   184e4:	adc	r0, r0, r0
   184e8:	subcs	r3, r3, r1, lsl #19
   184ec:	cmp	r3, r1, lsl #18
   184f0:	adc	r0, r0, r0
   184f4:	subcs	r3, r3, r1, lsl #18
   184f8:	cmp	r3, r1, lsl #17
   184fc:	adc	r0, r0, r0
   18500:	subcs	r3, r3, r1, lsl #17
   18504:	cmp	r3, r1, lsl #16
   18508:	adc	r0, r0, r0
   1850c:	subcs	r3, r3, r1, lsl #16
   18510:	cmp	r3, r1, lsl #15
   18514:	adc	r0, r0, r0
   18518:	subcs	r3, r3, r1, lsl #15
   1851c:	cmp	r3, r1, lsl #14
   18520:	adc	r0, r0, r0
   18524:	subcs	r3, r3, r1, lsl #14
   18528:	cmp	r3, r1, lsl #13
   1852c:	adc	r0, r0, r0
   18530:	subcs	r3, r3, r1, lsl #13
   18534:	cmp	r3, r1, lsl #12
   18538:	adc	r0, r0, r0
   1853c:	subcs	r3, r3, r1, lsl #12
   18540:	cmp	r3, r1, lsl #11
   18544:	adc	r0, r0, r0
   18548:	subcs	r3, r3, r1, lsl #11
   1854c:	cmp	r3, r1, lsl #10
   18550:	adc	r0, r0, r0
   18554:	subcs	r3, r3, r1, lsl #10
   18558:	cmp	r3, r1, lsl #9
   1855c:	adc	r0, r0, r0
   18560:	subcs	r3, r3, r1, lsl #9
   18564:	cmp	r3, r1, lsl #8
   18568:	adc	r0, r0, r0
   1856c:	subcs	r3, r3, r1, lsl #8
   18570:	cmp	r3, r1, lsl #7
   18574:	adc	r0, r0, r0
   18578:	subcs	r3, r3, r1, lsl #7
   1857c:	cmp	r3, r1, lsl #6
   18580:	adc	r0, r0, r0
   18584:	subcs	r3, r3, r1, lsl #6
   18588:	cmp	r3, r1, lsl #5
   1858c:	adc	r0, r0, r0
   18590:	subcs	r3, r3, r1, lsl #5
   18594:	cmp	r3, r1, lsl #4
   18598:	adc	r0, r0, r0
   1859c:	subcs	r3, r3, r1, lsl #4
   185a0:	cmp	r3, r1, lsl #3
   185a4:	adc	r0, r0, r0
   185a8:	subcs	r3, r3, r1, lsl #3
   185ac:	cmp	r3, r1, lsl #2
   185b0:	adc	r0, r0, r0
   185b4:	subcs	r3, r3, r1, lsl #2
   185b8:	cmp	r3, r1, lsl #1
   185bc:	adc	r0, r0, r0
   185c0:	subcs	r3, r3, r1, lsl #1
   185c4:	cmp	r3, r1
   185c8:	adc	r0, r0, r0
   185cc:	subcs	r3, r3, r1
   185d0:	cmp	ip, #0
   185d4:	rsbmi	r0, r0, #0
   185d8:	bx	lr
   185dc:	teq	ip, r0
   185e0:	rsbmi	r0, r0, #0
   185e4:	bx	lr
   185e8:	movcc	r0, #0
   185ec:	asreq	r0, ip, #31
   185f0:	orreq	r0, r0, #1
   185f4:	bx	lr
   185f8:	clz	r2, r1
   185fc:	rsb	r2, r2, #31
   18600:	cmp	ip, #0
   18604:	lsr	r0, r3, r2
   18608:	rsbmi	r0, r0, #0
   1860c:	bx	lr
   18610:	cmp	r0, #0
   18614:	mvngt	r0, #-2147483648	; 0x80000000
   18618:	movlt	r0, #-2147483648	; 0x80000000
   1861c:	b	18714 <__assert_fail@plt+0x7590>
   18620:	cmp	r1, #0
   18624:	beq	18610 <__assert_fail@plt+0x748c>
   18628:	push	{r0, r1, lr}
   1862c:	bl	18408 <__assert_fail@plt+0x7284>
   18630:	pop	{r1, r2, lr}
   18634:	mul	r3, r2, r0
   18638:	sub	r1, r1, r3
   1863c:	bx	lr
   18640:	cmp	r3, #0
   18644:	cmpeq	r2, #0
   18648:	bne	1866c <__assert_fail@plt+0x74e8>
   1864c:	cmp	r1, #0
   18650:	movlt	r1, #-2147483648	; 0x80000000
   18654:	movlt	r0, #0
   18658:	blt	18668 <__assert_fail@plt+0x74e4>
   1865c:	cmpeq	r0, #0
   18660:	mvnne	r1, #-2147483648	; 0x80000000
   18664:	mvnne	r0, #0
   18668:	b	18714 <__assert_fail@plt+0x7590>
   1866c:	sub	sp, sp, #8
   18670:	push	{sp, lr}
   18674:	cmp	r1, #0
   18678:	blt	18698 <__assert_fail@plt+0x7514>
   1867c:	cmp	r3, #0
   18680:	blt	186cc <__assert_fail@plt+0x7548>
   18684:	bl	18724 <__assert_fail@plt+0x75a0>
   18688:	ldr	lr, [sp, #4]
   1868c:	add	sp, sp, #8
   18690:	pop	{r2, r3}
   18694:	bx	lr
   18698:	rsbs	r0, r0, #0
   1869c:	sbc	r1, r1, r1, lsl #1
   186a0:	cmp	r3, #0
   186a4:	blt	186f0 <__assert_fail@plt+0x756c>
   186a8:	bl	18724 <__assert_fail@plt+0x75a0>
   186ac:	ldr	lr, [sp, #4]
   186b0:	add	sp, sp, #8
   186b4:	pop	{r2, r3}
   186b8:	rsbs	r0, r0, #0
   186bc:	sbc	r1, r1, r1, lsl #1
   186c0:	rsbs	r2, r2, #0
   186c4:	sbc	r3, r3, r3, lsl #1
   186c8:	bx	lr
   186cc:	rsbs	r2, r2, #0
   186d0:	sbc	r3, r3, r3, lsl #1
   186d4:	bl	18724 <__assert_fail@plt+0x75a0>
   186d8:	ldr	lr, [sp, #4]
   186dc:	add	sp, sp, #8
   186e0:	pop	{r2, r3}
   186e4:	rsbs	r0, r0, #0
   186e8:	sbc	r1, r1, r1, lsl #1
   186ec:	bx	lr
   186f0:	rsbs	r2, r2, #0
   186f4:	sbc	r3, r3, r3, lsl #1
   186f8:	bl	18724 <__assert_fail@plt+0x75a0>
   186fc:	ldr	lr, [sp, #4]
   18700:	add	sp, sp, #8
   18704:	pop	{r2, r3}
   18708:	rsbs	r2, r2, #0
   1870c:	sbc	r3, r3, r3, lsl #1
   18710:	bx	lr
   18714:	push	{r1, lr}
   18718:	mov	r0, #8
   1871c:	bl	10e9c <raise@plt>
   18720:	pop	{r1, pc}
   18724:	cmp	r1, r3
   18728:	push	{r4, r5, r6, r7, r8, r9, lr}
   1872c:	cmpeq	r0, r2
   18730:	mov	r4, r0
   18734:	mov	r5, r1
   18738:	ldr	r9, [sp, #28]
   1873c:	movcc	r0, #0
   18740:	movcc	r1, #0
   18744:	bcc	1883c <__assert_fail@plt+0x76b8>
   18748:	cmp	r3, #0
   1874c:	clzeq	ip, r2
   18750:	clzne	ip, r3
   18754:	addeq	ip, ip, #32
   18758:	cmp	r5, #0
   1875c:	clzeq	r1, r4
   18760:	addeq	r1, r1, #32
   18764:	clzne	r1, r5
   18768:	sub	ip, ip, r1
   1876c:	sub	lr, ip, #32
   18770:	lsl	r7, r3, ip
   18774:	rsb	r8, ip, #32
   18778:	orr	r7, r7, r2, lsl lr
   1877c:	orr	r7, r7, r2, lsr r8
   18780:	lsl	r6, r2, ip
   18784:	cmp	r5, r7
   18788:	cmpeq	r4, r6
   1878c:	movcc	r0, #0
   18790:	movcc	r1, #0
   18794:	bcc	187b0 <__assert_fail@plt+0x762c>
   18798:	mov	r3, #1
   1879c:	subs	r4, r4, r6
   187a0:	lsl	r1, r3, lr
   187a4:	lsl	r0, r3, ip
   187a8:	orr	r1, r1, r3, lsr r8
   187ac:	sbc	r5, r5, r7
   187b0:	cmp	ip, #0
   187b4:	beq	1883c <__assert_fail@plt+0x76b8>
   187b8:	lsrs	r3, r7, #1
   187bc:	rrx	r2, r6
   187c0:	mov	r6, ip
   187c4:	b	187e8 <__assert_fail@plt+0x7664>
   187c8:	subs	r4, r4, r2
   187cc:	sbc	r5, r5, r3
   187d0:	adds	r4, r4, r4
   187d4:	adc	r5, r5, r5
   187d8:	adds	r4, r4, #1
   187dc:	adc	r5, r5, #0
   187e0:	subs	r6, r6, #1
   187e4:	beq	18804 <__assert_fail@plt+0x7680>
   187e8:	cmp	r5, r3
   187ec:	cmpeq	r4, r2
   187f0:	bcs	187c8 <__assert_fail@plt+0x7644>
   187f4:	adds	r4, r4, r4
   187f8:	adc	r5, r5, r5
   187fc:	subs	r6, r6, #1
   18800:	bne	187e8 <__assert_fail@plt+0x7664>
   18804:	lsr	r6, r4, ip
   18808:	lsr	r7, r5, ip
   1880c:	orr	r6, r6, r5, lsl r8
   18810:	adds	r2, r0, r4
   18814:	orr	r6, r6, r5, lsr lr
   18818:	adc	r3, r1, r5
   1881c:	lsl	r1, r7, ip
   18820:	orr	r1, r1, r6, lsl lr
   18824:	lsl	r0, r6, ip
   18828:	orr	r1, r1, r6, lsr r8
   1882c:	subs	r0, r2, r0
   18830:	mov	r4, r6
   18834:	mov	r5, r7
   18838:	sbc	r1, r3, r1
   1883c:	cmp	r9, #0
   18840:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18844:	strd	r4, [r9]
   18848:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1884c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18850:	mov	r7, r0
   18854:	ldr	r6, [pc, #72]	; 188a4 <__assert_fail@plt+0x7720>
   18858:	ldr	r5, [pc, #72]	; 188a8 <__assert_fail@plt+0x7724>
   1885c:	add	r6, pc, r6
   18860:	add	r5, pc, r5
   18864:	sub	r6, r6, r5
   18868:	mov	r8, r1
   1886c:	mov	r9, r2
   18870:	bl	10e64 <calloc@plt-0x20>
   18874:	asrs	r6, r6, #2
   18878:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1887c:	mov	r4, #0
   18880:	add	r4, r4, #1
   18884:	ldr	r3, [r5], #4
   18888:	mov	r2, r9
   1888c:	mov	r1, r8
   18890:	mov	r0, r7
   18894:	blx	r3
   18898:	cmp	r6, r4
   1889c:	bne	18880 <__assert_fail@plt+0x76fc>
   188a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188a4:	andeq	r1, r1, ip, lsr #13
   188a8:	andeq	r1, r1, r4, lsr #13
   188ac:	bx	lr
   188b0:	ldr	r3, [pc, #12]	; 188c4 <__assert_fail@plt+0x7740>
   188b4:	mov	r1, #0
   188b8:	add	r3, pc, r3
   188bc:	ldr	r2, [r3]
   188c0:	b	110a0 <__cxa_atexit@plt>
   188c4:	andeq	r1, r1, r8, asr r8
   188c8:	mov	r2, r1
   188cc:	mov	r1, r0
   188d0:	mov	r0, #3
   188d4:	b	11154 <__xstat64@plt>

Disassembly of section .fini:

000188d8 <.fini>:
   188d8:	push	{r3, lr}
   188dc:	pop	{r3, pc}
