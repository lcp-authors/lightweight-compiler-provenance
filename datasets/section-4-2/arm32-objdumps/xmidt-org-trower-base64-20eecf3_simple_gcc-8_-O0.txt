
../repos/xmidt-org-trower-base64-20eecf3/tests/simple:     file format elf32-littlearm


Disassembly of section .init:

00010e7c <.init>:
   10e7c:	push	{r3, lr}
   10e80:	bl	110d0 <_start@@Base+0x3c>
   10e84:	pop	{r3, pc}

Disassembly of section .plt:

00010e88 <fdopen@plt-0x14>:
   10e88:	push	{lr}		; (str lr, [sp, #-4]!)
   10e8c:	ldr	lr, [pc, #4]	; 10e98 <fdopen@plt-0x4>
   10e90:	add	lr, pc, lr
   10e94:	ldr	pc, [lr, #8]!
   10e98:	andeq	r6, r1, r8, ror #2

00010e9c <fdopen@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #360]!	; 0x168

00010ea8 <CU_basic_set_mode@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #352]!	; 0x160

00010eb4 <raise@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #344]!	; 0x158

00010ec0 <CU_initialize_registry@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #336]!	; 0x150

00010ecc <setbuf@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #328]!	; 0x148

00010ed8 <printf@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #320]!	; 0x140

00010ee4 <CU_get_number_of_tests_failed@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #312]!	; 0x138

00010ef0 <CU_cleanup_registry@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #304]!	; 0x130

00010efc <free@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #296]!	; 0x128

00010f08 <CU_add_suite@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #288]!	; 0x120

00010f14 <memcpy@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #280]!	; 0x118

00010f20 <CU_basic_run_tests@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #272]!	; 0x110

00010f2c <CU_basic_show_failures@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #264]!	; 0x108

00010f38 <ftell@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #256]!	; 0x100

00010f44 <fwrite@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #248]!	; 0xf8

00010f50 <strcpy@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #240]!	; 0xf0

00010f5c <fread@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #232]!	; 0xe8

00010f68 <open64@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #224]!	; 0xe0

00010f74 <getenv@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #216]!	; 0xd8

00010f80 <puts@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #208]!	; 0xd0

00010f8c <malloc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #200]!	; 0xc8

00010f98 <__libc_start_main@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #192]!	; 0xc0

00010fa4 <__gmon_start__@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #184]!	; 0xb8

00010fb0 <CU_assertImplementation@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #176]!	; 0xb0

00010fbc <getpid@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #168]!	; 0xa8

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #160]!	; 0xa0

00010fd4 <fprintf@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #152]!	; 0x98

00010fe0 <__errno_location@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #144]!	; 0x90

00010fec <mkdir@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #136]!	; 0x88

00010ff8 <memset@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #128]!	; 0x80

00011004 <putchar@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #120]!	; 0x78

00011010 <CU_add_test@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #112]!	; 0x70

0001101c <access@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #104]!	; 0x68

00011028 <fclose@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #96]!	; 0x60

00011034 <fcntl64@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #88]!	; 0x58

00011040 <vfprintf@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #80]!	; 0x50

0001104c <atoi@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #72]!	; 0x48

00011058 <fopen64@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #64]!	; 0x40

00011064 <CU_get_failure_list@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #56]!	; 0x38

00011070 <fseek@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #48]!	; 0x30

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #40]!	; 0x28

00011088 <close@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #32]!

Disassembly of section .text:

00011094 <_start@@Base>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <_start@@Base+0x30>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <_start@@Base+0x34>
   110b8:	ldr	r3, [pc, #12]	; 110cc <_start@@Base+0x38>
   110bc:	bl	10f98 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r5, r1, r4, lsr pc
   110c8:	muleq	r1, r8, ip
   110cc:	ldrdeq	r5, [r1], -r4
   110d0:	ldr	r3, [pc, #20]	; 110ec <_start@@Base+0x58>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <_start@@Base+0x5c>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10fa4 <__gmon_start__@plt>
   110ec:	andeq	r5, r1, r0, lsr #30
   110f0:	andeq	r0, r0, r0, asr #1
   110f4:	ldr	r0, [pc, #24]	; 11114 <_start@@Base+0x80>
   110f8:	ldr	r3, [pc, #24]	; 11118 <_start@@Base+0x84>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <_start@@Base+0x88>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r7, r2, r8, lsl #6
   11118:	andeq	r7, r2, r8, lsl #6
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <_start@@Base+0xb8>
   11124:	ldr	r1, [pc, #36]	; 11150 <_start@@Base+0xbc>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <_start@@Base+0xc0>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r7, r2, r8, lsl #6
   11150:	andeq	r7, r2, r8, lsl #6
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <_start@@Base+0xe8>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <_start@@Base+0x60>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	r7, r2, r8, lsl #6
   11180:	b	11120 <_start@@Base+0x8c>

00011184 <test_encoded_size@@Base>:
   11184:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11188:	strd	r6, [sp, #8]
   1118c:	strd	r8, [sp, #16]
   11190:	str	fp, [sp, #24]
   11194:	str	lr, [sp, #28]
   11198:	add	fp, sp, #28
   1119c:	sub	sp, sp, #80	; 0x50
   111a0:	ldr	r3, [pc, #1004]	; 11594 <test_encoded_size@@Base+0x410>
   111a4:	add	r3, pc, r3
   111a8:	ldrd	r2, [r3]
   111ac:	adds	r0, r2, #1
   111b0:	adc	r1, r3, #0
   111b4:	ldr	r3, [pc, #988]	; 11598 <test_encoded_size@@Base+0x414>
   111b8:	add	r3, pc, r3
   111bc:	strd	r0, [r3]
   111c0:	mov	r0, #0
   111c4:	bl	13060 <b64_get_encoded_buffer_size@@Base>
   111c8:	mov	r1, r0
   111cc:	ldr	r3, [pc, #968]	; 1159c <test_encoded_size@@Base+0x418>
   111d0:	add	r3, pc, r3
   111d4:	ldrd	r2, [r3, #8]
   111d8:	adds	r4, r2, #1
   111dc:	adc	r5, r3, #0
   111e0:	ldr	r3, [pc, #952]	; 115a0 <test_encoded_size@@Base+0x41c>
   111e4:	add	r3, pc, r3
   111e8:	strd	r4, [r3, #8]
   111ec:	cmp	r1, #0
   111f0:	moveq	r3, #1
   111f4:	movne	r3, #0
   111f8:	uxtb	r3, r3
   111fc:	mov	r0, r3
   11200:	mov	r3, #0
   11204:	str	r3, [sp, #4]
   11208:	ldr	r3, [pc, #916]	; 115a4 <test_encoded_size@@Base+0x420>
   1120c:	add	r3, pc, r3
   11210:	str	r3, [sp]
   11214:	ldr	r3, [pc, #908]	; 115a8 <test_encoded_size@@Base+0x424>
   11218:	add	r3, pc, r3
   1121c:	ldr	r2, [pc, #904]	; 115ac <test_encoded_size@@Base+0x428>
   11220:	add	r2, pc, r2
   11224:	mov	r1, #29
   11228:	bl	10fb0 <CU_assertImplementation@plt>
   1122c:	ldr	r3, [pc, #892]	; 115b0 <test_encoded_size@@Base+0x42c>
   11230:	add	r3, pc, r3
   11234:	ldrd	r2, [r3, #16]
   11238:	adds	r6, r2, #1
   1123c:	adc	r7, r3, #0
   11240:	ldr	r3, [pc, #876]	; 115b4 <test_encoded_size@@Base+0x430>
   11244:	add	r3, pc, r3
   11248:	strd	r6, [r3, #16]
   1124c:	mov	r0, #1
   11250:	bl	13060 <b64_get_encoded_buffer_size@@Base>
   11254:	mov	r1, r0
   11258:	ldr	r3, [pc, #856]	; 115b8 <test_encoded_size@@Base+0x434>
   1125c:	add	r3, pc, r3
   11260:	ldrd	r2, [r3, #24]
   11264:	adds	r8, r2, #1
   11268:	adc	r9, r3, #0
   1126c:	ldr	r3, [pc, #840]	; 115bc <test_encoded_size@@Base+0x438>
   11270:	add	r3, pc, r3
   11274:	strd	r8, [r3, #24]
   11278:	cmp	r1, #4
   1127c:	moveq	r3, #1
   11280:	movne	r3, #0
   11284:	uxtb	r3, r3
   11288:	mov	r0, r3
   1128c:	mov	r3, #0
   11290:	str	r3, [sp, #4]
   11294:	ldr	r3, [pc, #804]	; 115c0 <test_encoded_size@@Base+0x43c>
   11298:	add	r3, pc, r3
   1129c:	str	r3, [sp]
   112a0:	ldr	r3, [pc, #796]	; 115c4 <test_encoded_size@@Base+0x440>
   112a4:	add	r3, pc, r3
   112a8:	ldr	r2, [pc, #792]	; 115c8 <test_encoded_size@@Base+0x444>
   112ac:	add	r2, pc, r2
   112b0:	mov	r1, #30
   112b4:	bl	10fb0 <CU_assertImplementation@plt>
   112b8:	ldr	r3, [pc, #780]	; 115cc <test_encoded_size@@Base+0x448>
   112bc:	add	r3, pc, r3
   112c0:	ldrd	r2, [r3, #32]
   112c4:	adds	r1, r2, #1
   112c8:	str	r1, [fp, #-36]	; 0xffffffdc
   112cc:	adc	r3, r3, #0
   112d0:	str	r3, [fp, #-32]	; 0xffffffe0
   112d4:	ldr	r3, [pc, #756]	; 115d0 <test_encoded_size@@Base+0x44c>
   112d8:	add	r3, pc, r3
   112dc:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   112e0:	strd	r0, [r3, #32]
   112e4:	mov	r0, #2
   112e8:	bl	13060 <b64_get_encoded_buffer_size@@Base>
   112ec:	mov	r1, r0
   112f0:	ldr	r3, [pc, #732]	; 115d4 <test_encoded_size@@Base+0x450>
   112f4:	add	r3, pc, r3
   112f8:	ldrd	r2, [r3, #40]	; 0x28
   112fc:	adds	r0, r2, #1
   11300:	str	r0, [fp, #-44]	; 0xffffffd4
   11304:	adc	r3, r3, #0
   11308:	str	r3, [fp, #-40]	; 0xffffffd8
   1130c:	ldr	r3, [pc, #708]	; 115d8 <test_encoded_size@@Base+0x454>
   11310:	add	r3, pc, r3
   11314:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   11318:	strd	r4, [r3, #40]	; 0x28
   1131c:	cmp	r1, #4
   11320:	moveq	r3, #1
   11324:	movne	r3, #0
   11328:	uxtb	r3, r3
   1132c:	mov	r0, r3
   11330:	mov	r3, #0
   11334:	str	r3, [sp, #4]
   11338:	ldr	r3, [pc, #668]	; 115dc <test_encoded_size@@Base+0x458>
   1133c:	add	r3, pc, r3
   11340:	str	r3, [sp]
   11344:	ldr	r3, [pc, #660]	; 115e0 <test_encoded_size@@Base+0x45c>
   11348:	add	r3, pc, r3
   1134c:	ldr	r2, [pc, #656]	; 115e4 <test_encoded_size@@Base+0x460>
   11350:	add	r2, pc, r2
   11354:	mov	r1, #31
   11358:	bl	10fb0 <CU_assertImplementation@plt>
   1135c:	ldr	r3, [pc, #644]	; 115e8 <test_encoded_size@@Base+0x464>
   11360:	add	r3, pc, r3
   11364:	ldrd	r2, [r3, #48]	; 0x30
   11368:	adds	r1, r2, #1
   1136c:	str	r1, [fp, #-52]	; 0xffffffcc
   11370:	adc	r3, r3, #0
   11374:	str	r3, [fp, #-48]	; 0xffffffd0
   11378:	ldr	r3, [pc, #620]	; 115ec <test_encoded_size@@Base+0x468>
   1137c:	add	r3, pc, r3
   11380:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11384:	strd	r0, [r3, #48]	; 0x30
   11388:	mov	r0, #3
   1138c:	bl	13060 <b64_get_encoded_buffer_size@@Base>
   11390:	mov	r1, r0
   11394:	ldr	r3, [pc, #596]	; 115f0 <test_encoded_size@@Base+0x46c>
   11398:	add	r3, pc, r3
   1139c:	ldrd	r2, [r3, #56]	; 0x38
   113a0:	adds	r0, r2, #1
   113a4:	str	r0, [fp, #-60]	; 0xffffffc4
   113a8:	adc	r3, r3, #0
   113ac:	str	r3, [fp, #-56]	; 0xffffffc8
   113b0:	ldr	r3, [pc, #572]	; 115f4 <test_encoded_size@@Base+0x470>
   113b4:	add	r3, pc, r3
   113b8:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   113bc:	strd	r4, [r3, #56]	; 0x38
   113c0:	cmp	r1, #4
   113c4:	moveq	r3, #1
   113c8:	movne	r3, #0
   113cc:	uxtb	r3, r3
   113d0:	mov	r0, r3
   113d4:	mov	r3, #0
   113d8:	str	r3, [sp, #4]
   113dc:	ldr	r3, [pc, #532]	; 115f8 <test_encoded_size@@Base+0x474>
   113e0:	add	r3, pc, r3
   113e4:	str	r3, [sp]
   113e8:	ldr	r3, [pc, #524]	; 115fc <test_encoded_size@@Base+0x478>
   113ec:	add	r3, pc, r3
   113f0:	ldr	r2, [pc, #520]	; 11600 <test_encoded_size@@Base+0x47c>
   113f4:	add	r2, pc, r2
   113f8:	mov	r1, #32
   113fc:	bl	10fb0 <CU_assertImplementation@plt>
   11400:	ldr	r3, [pc, #508]	; 11604 <test_encoded_size@@Base+0x480>
   11404:	add	r3, pc, r3
   11408:	ldrd	r2, [r3, #64]	; 0x40
   1140c:	adds	r1, r2, #1
   11410:	str	r1, [fp, #-68]	; 0xffffffbc
   11414:	adc	r3, r3, #0
   11418:	str	r3, [fp, #-64]	; 0xffffffc0
   1141c:	ldr	r3, [pc, #484]	; 11608 <test_encoded_size@@Base+0x484>
   11420:	add	r3, pc, r3
   11424:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   11428:	strd	r0, [r3, #64]	; 0x40
   1142c:	mov	r0, #4
   11430:	bl	13060 <b64_get_encoded_buffer_size@@Base>
   11434:	mov	r1, r0
   11438:	ldr	r3, [pc, #460]	; 1160c <test_encoded_size@@Base+0x488>
   1143c:	add	r3, pc, r3
   11440:	ldrd	r2, [r3, #72]	; 0x48
   11444:	adds	r0, r2, #1
   11448:	str	r0, [fp, #-76]	; 0xffffffb4
   1144c:	adc	r3, r3, #0
   11450:	str	r3, [fp, #-72]	; 0xffffffb8
   11454:	ldr	r3, [pc, #436]	; 11610 <test_encoded_size@@Base+0x48c>
   11458:	add	r3, pc, r3
   1145c:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   11460:	strd	r4, [r3, #72]	; 0x48
   11464:	cmp	r1, #8
   11468:	moveq	r3, #1
   1146c:	movne	r3, #0
   11470:	uxtb	r3, r3
   11474:	mov	r0, r3
   11478:	mov	r3, #0
   1147c:	str	r3, [sp, #4]
   11480:	ldr	r3, [pc, #396]	; 11614 <test_encoded_size@@Base+0x490>
   11484:	add	r3, pc, r3
   11488:	str	r3, [sp]
   1148c:	ldr	r3, [pc, #388]	; 11618 <test_encoded_size@@Base+0x494>
   11490:	add	r3, pc, r3
   11494:	ldr	r2, [pc, #384]	; 1161c <test_encoded_size@@Base+0x498>
   11498:	add	r2, pc, r2
   1149c:	mov	r1, #33	; 0x21
   114a0:	bl	10fb0 <CU_assertImplementation@plt>
   114a4:	ldr	r3, [pc, #372]	; 11620 <test_encoded_size@@Base+0x49c>
   114a8:	add	r3, pc, r3
   114ac:	ldrd	r2, [r3, #80]	; 0x50
   114b0:	adds	r1, r2, #1
   114b4:	str	r1, [fp, #-84]	; 0xffffffac
   114b8:	adc	r3, r3, #0
   114bc:	str	r3, [fp, #-80]	; 0xffffffb0
   114c0:	ldr	r3, [pc, #348]	; 11624 <test_encoded_size@@Base+0x4a0>
   114c4:	add	r3, pc, r3
   114c8:	ldrd	r0, [fp, #-84]	; 0xffffffac
   114cc:	strd	r0, [r3, #80]	; 0x50
   114d0:	mov	r0, #300	; 0x12c
   114d4:	bl	13060 <b64_get_encoded_buffer_size@@Base>
   114d8:	mov	r1, r0
   114dc:	ldr	r3, [pc, #324]	; 11628 <test_encoded_size@@Base+0x4a4>
   114e0:	add	r3, pc, r3
   114e4:	ldrd	r2, [r3, #88]	; 0x58
   114e8:	adds	r0, r2, #1
   114ec:	str	r0, [fp, #-92]	; 0xffffffa4
   114f0:	adc	r3, r3, #0
   114f4:	str	r3, [fp, #-88]	; 0xffffffa8
   114f8:	ldr	r3, [pc, #300]	; 1162c <test_encoded_size@@Base+0x4a8>
   114fc:	add	r3, pc, r3
   11500:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   11504:	strd	r4, [r3, #88]	; 0x58
   11508:	cmp	r1, #400	; 0x190
   1150c:	moveq	r3, #1
   11510:	movne	r3, #0
   11514:	uxtb	r3, r3
   11518:	mov	r0, r3
   1151c:	mov	r3, #0
   11520:	str	r3, [sp, #4]
   11524:	ldr	r3, [pc, #260]	; 11630 <test_encoded_size@@Base+0x4ac>
   11528:	add	r3, pc, r3
   1152c:	str	r3, [sp]
   11530:	ldr	r3, [pc, #252]	; 11634 <test_encoded_size@@Base+0x4b0>
   11534:	add	r3, pc, r3
   11538:	ldr	r2, [pc, #248]	; 11638 <test_encoded_size@@Base+0x4b4>
   1153c:	add	r2, pc, r2
   11540:	mov	r1, #34	; 0x22
   11544:	bl	10fb0 <CU_assertImplementation@plt>
   11548:	ldr	r3, [pc, #236]	; 1163c <test_encoded_size@@Base+0x4b8>
   1154c:	add	r3, pc, r3
   11550:	ldrd	r2, [r3, #96]	; 0x60
   11554:	adds	r1, r2, #1
   11558:	str	r1, [fp, #-100]	; 0xffffff9c
   1155c:	adc	r3, r3, #0
   11560:	str	r3, [fp, #-96]	; 0xffffffa0
   11564:	ldr	r3, [pc, #212]	; 11640 <test_encoded_size@@Base+0x4bc>
   11568:	add	r3, pc, r3
   1156c:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   11570:	strd	r0, [r3, #96]	; 0x60
   11574:	nop	{0}
   11578:	sub	sp, fp, #28
   1157c:	ldrd	r4, [sp]
   11580:	ldrd	r6, [sp, #8]
   11584:	ldrd	r8, [sp, #16]
   11588:	ldr	fp, [sp, #24]
   1158c:	add	sp, sp, #28
   11590:	pop	{pc}		; (ldr pc, [sp], #4)
   11594:	andeq	r6, r1, ip, lsl #7
   11598:	andeq	r6, r1, r8, ror r3
   1159c:	andeq	r6, r1, r0, ror #6
   115a0:	andeq	r6, r1, ip, asr #6
   115a4:	andeq	r4, r0, r4, asr #27
   115a8:	andeq	r4, r0, r4, lsr #26
   115ac:	andeq	r4, r0, ip, ror sp
   115b0:	andeq	r6, r1, r0, lsl #6
   115b4:	andeq	r6, r1, ip, ror #5
   115b8:	ldrdeq	r6, [r1], -r4
   115bc:	andeq	r6, r1, r0, asr #5
   115c0:	andeq	r4, r0, r8, lsr sp
   115c4:	muleq	r0, r8, ip
   115c8:	andeq	r4, r0, r8, lsr #26
   115cc:	andeq	r6, r1, r4, ror r2
   115d0:	andeq	r6, r1, r8, asr r2
   115d4:	andeq	r6, r1, ip, lsr r2
   115d8:	andeq	r6, r1, r0, lsr #4
   115dc:	muleq	r0, r4, ip
   115e0:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   115e4:			; <UNDEFINED> instruction: 0x00004cb8
   115e8:	ldrdeq	r6, [r1], -r0
   115ec:			; <UNDEFINED> instruction: 0x000161b4
   115f0:	muleq	r1, r8, r1
   115f4:	andeq	r6, r1, ip, ror r1
   115f8:	strdeq	r4, [r0], -r0
   115fc:	andeq	r4, r0, r0, asr fp
   11600:	andeq	r4, r0, r8, asr #24
   11604:	andeq	r6, r1, ip, lsr #2
   11608:	andeq	r6, r1, r0, lsl r1
   1160c:	strdeq	r6, [r1], -r4
   11610:	ldrdeq	r6, [r1], -r8
   11614:	andeq	r4, r0, ip, asr #22
   11618:	andeq	r4, r0, ip, lsr #21
   1161c:	ldrdeq	r4, [r0], -r8
   11620:	andeq	r6, r1, r8, lsl #1
   11624:	andeq	r6, r1, ip, rrx
   11628:	andeq	r6, r1, r0, asr r0
   1162c:	andeq	r6, r1, r4, lsr r0
   11630:	andeq	r4, r0, r8, lsr #21
   11634:	andeq	r4, r0, r8, lsl #20
   11638:	andeq	r4, r0, r8, ror #22
   1163c:	andeq	r5, r1, r4, ror #31
   11640:	andeq	r5, r1, r8, asr #31

00011644 <test_decoded_size@@Base>:
   11644:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11648:	strd	r6, [sp, #8]
   1164c:	strd	r8, [sp, #16]
   11650:	str	fp, [sp, #24]
   11654:	str	lr, [sp, #28]
   11658:	add	fp, sp, #28
   1165c:	sub	sp, sp, #80	; 0x50
   11660:	ldr	r3, [pc, #1004]	; 11a54 <test_decoded_size@@Base+0x410>
   11664:	add	r3, pc, r3
   11668:	ldrd	r2, [r3]
   1166c:	adds	r0, r2, #1
   11670:	adc	r1, r3, #0
   11674:	ldr	r3, [pc, #988]	; 11a58 <test_decoded_size@@Base+0x414>
   11678:	add	r3, pc, r3
   1167c:	strd	r0, [r3]
   11680:	mov	r0, #0
   11684:	bl	135a4 <b64_get_decoded_buffer_size@@Base>
   11688:	mov	r1, r0
   1168c:	ldr	r3, [pc, #968]	; 11a5c <test_decoded_size@@Base+0x418>
   11690:	add	r3, pc, r3
   11694:	ldrd	r2, [r3, #8]
   11698:	adds	r4, r2, #1
   1169c:	adc	r5, r3, #0
   116a0:	ldr	r3, [pc, #952]	; 11a60 <test_decoded_size@@Base+0x41c>
   116a4:	add	r3, pc, r3
   116a8:	strd	r4, [r3, #8]
   116ac:	cmp	r1, #0
   116b0:	moveq	r3, #1
   116b4:	movne	r3, #0
   116b8:	uxtb	r3, r3
   116bc:	mov	r0, r3
   116c0:	mov	r3, #0
   116c4:	str	r3, [sp, #4]
   116c8:	ldr	r3, [pc, #916]	; 11a64 <test_decoded_size@@Base+0x420>
   116cc:	add	r3, pc, r3
   116d0:	str	r3, [sp]
   116d4:	ldr	r3, [pc, #908]	; 11a68 <test_decoded_size@@Base+0x424>
   116d8:	add	r3, pc, r3
   116dc:	ldr	r2, [pc, #904]	; 11a6c <test_decoded_size@@Base+0x428>
   116e0:	add	r2, pc, r2
   116e4:	mov	r1, #38	; 0x26
   116e8:	bl	10fb0 <CU_assertImplementation@plt>
   116ec:	ldr	r3, [pc, #892]	; 11a70 <test_decoded_size@@Base+0x42c>
   116f0:	add	r3, pc, r3
   116f4:	ldrd	r2, [r3, #16]
   116f8:	adds	r6, r2, #1
   116fc:	adc	r7, r3, #0
   11700:	ldr	r3, [pc, #876]	; 11a74 <test_decoded_size@@Base+0x430>
   11704:	add	r3, pc, r3
   11708:	strd	r6, [r3, #16]
   1170c:	mov	r0, #1
   11710:	bl	135a4 <b64_get_decoded_buffer_size@@Base>
   11714:	mov	r1, r0
   11718:	ldr	r3, [pc, #856]	; 11a78 <test_decoded_size@@Base+0x434>
   1171c:	add	r3, pc, r3
   11720:	ldrd	r2, [r3, #24]
   11724:	adds	r8, r2, #1
   11728:	adc	r9, r3, #0
   1172c:	ldr	r3, [pc, #840]	; 11a7c <test_decoded_size@@Base+0x438>
   11730:	add	r3, pc, r3
   11734:	strd	r8, [r3, #24]
   11738:	cmp	r1, #0
   1173c:	moveq	r3, #1
   11740:	movne	r3, #0
   11744:	uxtb	r3, r3
   11748:	mov	r0, r3
   1174c:	mov	r3, #0
   11750:	str	r3, [sp, #4]
   11754:	ldr	r3, [pc, #804]	; 11a80 <test_decoded_size@@Base+0x43c>
   11758:	add	r3, pc, r3
   1175c:	str	r3, [sp]
   11760:	ldr	r3, [pc, #796]	; 11a84 <test_decoded_size@@Base+0x440>
   11764:	add	r3, pc, r3
   11768:	ldr	r2, [pc, #792]	; 11a88 <test_decoded_size@@Base+0x444>
   1176c:	add	r2, pc, r2
   11770:	mov	r1, #39	; 0x27
   11774:	bl	10fb0 <CU_assertImplementation@plt>
   11778:	ldr	r3, [pc, #780]	; 11a8c <test_decoded_size@@Base+0x448>
   1177c:	add	r3, pc, r3
   11780:	ldrd	r2, [r3, #32]
   11784:	adds	r1, r2, #1
   11788:	str	r1, [fp, #-36]	; 0xffffffdc
   1178c:	adc	r3, r3, #0
   11790:	str	r3, [fp, #-32]	; 0xffffffe0
   11794:	ldr	r3, [pc, #756]	; 11a90 <test_decoded_size@@Base+0x44c>
   11798:	add	r3, pc, r3
   1179c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   117a0:	strd	r0, [r3, #32]
   117a4:	mov	r0, #2
   117a8:	bl	135a4 <b64_get_decoded_buffer_size@@Base>
   117ac:	mov	r1, r0
   117b0:	ldr	r3, [pc, #732]	; 11a94 <test_decoded_size@@Base+0x450>
   117b4:	add	r3, pc, r3
   117b8:	ldrd	r2, [r3, #40]	; 0x28
   117bc:	adds	r0, r2, #1
   117c0:	str	r0, [fp, #-44]	; 0xffffffd4
   117c4:	adc	r3, r3, #0
   117c8:	str	r3, [fp, #-40]	; 0xffffffd8
   117cc:	ldr	r3, [pc, #708]	; 11a98 <test_decoded_size@@Base+0x454>
   117d0:	add	r3, pc, r3
   117d4:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   117d8:	strd	r4, [r3, #40]	; 0x28
   117dc:	cmp	r1, #0
   117e0:	moveq	r3, #1
   117e4:	movne	r3, #0
   117e8:	uxtb	r3, r3
   117ec:	mov	r0, r3
   117f0:	mov	r3, #0
   117f4:	str	r3, [sp, #4]
   117f8:	ldr	r3, [pc, #668]	; 11a9c <test_decoded_size@@Base+0x458>
   117fc:	add	r3, pc, r3
   11800:	str	r3, [sp]
   11804:	ldr	r3, [pc, #660]	; 11aa0 <test_decoded_size@@Base+0x45c>
   11808:	add	r3, pc, r3
   1180c:	ldr	r2, [pc, #656]	; 11aa4 <test_decoded_size@@Base+0x460>
   11810:	add	r2, pc, r2
   11814:	mov	r1, #40	; 0x28
   11818:	bl	10fb0 <CU_assertImplementation@plt>
   1181c:	ldr	r3, [pc, #644]	; 11aa8 <test_decoded_size@@Base+0x464>
   11820:	add	r3, pc, r3
   11824:	ldrd	r2, [r3, #48]	; 0x30
   11828:	adds	r1, r2, #1
   1182c:	str	r1, [fp, #-52]	; 0xffffffcc
   11830:	adc	r3, r3, #0
   11834:	str	r3, [fp, #-48]	; 0xffffffd0
   11838:	ldr	r3, [pc, #620]	; 11aac <test_decoded_size@@Base+0x468>
   1183c:	add	r3, pc, r3
   11840:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11844:	strd	r0, [r3, #48]	; 0x30
   11848:	mov	r0, #3
   1184c:	bl	135a4 <b64_get_decoded_buffer_size@@Base>
   11850:	mov	r1, r0
   11854:	ldr	r3, [pc, #596]	; 11ab0 <test_decoded_size@@Base+0x46c>
   11858:	add	r3, pc, r3
   1185c:	ldrd	r2, [r3, #56]	; 0x38
   11860:	adds	r0, r2, #1
   11864:	str	r0, [fp, #-60]	; 0xffffffc4
   11868:	adc	r3, r3, #0
   1186c:	str	r3, [fp, #-56]	; 0xffffffc8
   11870:	ldr	r3, [pc, #572]	; 11ab4 <test_decoded_size@@Base+0x470>
   11874:	add	r3, pc, r3
   11878:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   1187c:	strd	r4, [r3, #56]	; 0x38
   11880:	cmp	r1, #0
   11884:	moveq	r3, #1
   11888:	movne	r3, #0
   1188c:	uxtb	r3, r3
   11890:	mov	r0, r3
   11894:	mov	r3, #0
   11898:	str	r3, [sp, #4]
   1189c:	ldr	r3, [pc, #532]	; 11ab8 <test_decoded_size@@Base+0x474>
   118a0:	add	r3, pc, r3
   118a4:	str	r3, [sp]
   118a8:	ldr	r3, [pc, #524]	; 11abc <test_decoded_size@@Base+0x478>
   118ac:	add	r3, pc, r3
   118b0:	ldr	r2, [pc, #520]	; 11ac0 <test_decoded_size@@Base+0x47c>
   118b4:	add	r2, pc, r2
   118b8:	mov	r1, #41	; 0x29
   118bc:	bl	10fb0 <CU_assertImplementation@plt>
   118c0:	ldr	r3, [pc, #508]	; 11ac4 <test_decoded_size@@Base+0x480>
   118c4:	add	r3, pc, r3
   118c8:	ldrd	r2, [r3, #64]	; 0x40
   118cc:	adds	r1, r2, #1
   118d0:	str	r1, [fp, #-68]	; 0xffffffbc
   118d4:	adc	r3, r3, #0
   118d8:	str	r3, [fp, #-64]	; 0xffffffc0
   118dc:	ldr	r3, [pc, #484]	; 11ac8 <test_decoded_size@@Base+0x484>
   118e0:	add	r3, pc, r3
   118e4:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   118e8:	strd	r0, [r3, #64]	; 0x40
   118ec:	mov	r0, #4
   118f0:	bl	135a4 <b64_get_decoded_buffer_size@@Base>
   118f4:	mov	r1, r0
   118f8:	ldr	r3, [pc, #460]	; 11acc <test_decoded_size@@Base+0x488>
   118fc:	add	r3, pc, r3
   11900:	ldrd	r2, [r3, #72]	; 0x48
   11904:	adds	r0, r2, #1
   11908:	str	r0, [fp, #-76]	; 0xffffffb4
   1190c:	adc	r3, r3, #0
   11910:	str	r3, [fp, #-72]	; 0xffffffb8
   11914:	ldr	r3, [pc, #436]	; 11ad0 <test_decoded_size@@Base+0x48c>
   11918:	add	r3, pc, r3
   1191c:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   11920:	strd	r4, [r3, #72]	; 0x48
   11924:	cmp	r1, #3
   11928:	moveq	r3, #1
   1192c:	movne	r3, #0
   11930:	uxtb	r3, r3
   11934:	mov	r0, r3
   11938:	mov	r3, #0
   1193c:	str	r3, [sp, #4]
   11940:	ldr	r3, [pc, #396]	; 11ad4 <test_decoded_size@@Base+0x490>
   11944:	add	r3, pc, r3
   11948:	str	r3, [sp]
   1194c:	ldr	r3, [pc, #388]	; 11ad8 <test_decoded_size@@Base+0x494>
   11950:	add	r3, pc, r3
   11954:	ldr	r2, [pc, #384]	; 11adc <test_decoded_size@@Base+0x498>
   11958:	add	r2, pc, r2
   1195c:	mov	r1, #42	; 0x2a
   11960:	bl	10fb0 <CU_assertImplementation@plt>
   11964:	ldr	r3, [pc, #372]	; 11ae0 <test_decoded_size@@Base+0x49c>
   11968:	add	r3, pc, r3
   1196c:	ldrd	r2, [r3, #80]	; 0x50
   11970:	adds	r1, r2, #1
   11974:	str	r1, [fp, #-84]	; 0xffffffac
   11978:	adc	r3, r3, #0
   1197c:	str	r3, [fp, #-80]	; 0xffffffb0
   11980:	ldr	r3, [pc, #348]	; 11ae4 <test_decoded_size@@Base+0x4a0>
   11984:	add	r3, pc, r3
   11988:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1198c:	strd	r0, [r3, #80]	; 0x50
   11990:	mov	r0, #8
   11994:	bl	135a4 <b64_get_decoded_buffer_size@@Base>
   11998:	mov	r1, r0
   1199c:	ldr	r3, [pc, #324]	; 11ae8 <test_decoded_size@@Base+0x4a4>
   119a0:	add	r3, pc, r3
   119a4:	ldrd	r2, [r3, #88]	; 0x58
   119a8:	adds	r0, r2, #1
   119ac:	str	r0, [fp, #-92]	; 0xffffffa4
   119b0:	adc	r3, r3, #0
   119b4:	str	r3, [fp, #-88]	; 0xffffffa8
   119b8:	ldr	r3, [pc, #300]	; 11aec <test_decoded_size@@Base+0x4a8>
   119bc:	add	r3, pc, r3
   119c0:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   119c4:	strd	r4, [r3, #88]	; 0x58
   119c8:	cmp	r1, #6
   119cc:	moveq	r3, #1
   119d0:	movne	r3, #0
   119d4:	uxtb	r3, r3
   119d8:	mov	r0, r3
   119dc:	mov	r3, #0
   119e0:	str	r3, [sp, #4]
   119e4:	ldr	r3, [pc, #260]	; 11af0 <test_decoded_size@@Base+0x4ac>
   119e8:	add	r3, pc, r3
   119ec:	str	r3, [sp]
   119f0:	ldr	r3, [pc, #252]	; 11af4 <test_decoded_size@@Base+0x4b0>
   119f4:	add	r3, pc, r3
   119f8:	ldr	r2, [pc, #248]	; 11af8 <test_decoded_size@@Base+0x4b4>
   119fc:	add	r2, pc, r2
   11a00:	mov	r1, #43	; 0x2b
   11a04:	bl	10fb0 <CU_assertImplementation@plt>
   11a08:	ldr	r3, [pc, #236]	; 11afc <test_decoded_size@@Base+0x4b8>
   11a0c:	add	r3, pc, r3
   11a10:	ldrd	r2, [r3, #96]	; 0x60
   11a14:	adds	r1, r2, #1
   11a18:	str	r1, [fp, #-100]	; 0xffffff9c
   11a1c:	adc	r3, r3, #0
   11a20:	str	r3, [fp, #-96]	; 0xffffffa0
   11a24:	ldr	r3, [pc, #212]	; 11b00 <test_decoded_size@@Base+0x4bc>
   11a28:	add	r3, pc, r3
   11a2c:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   11a30:	strd	r0, [r3, #96]	; 0x60
   11a34:	nop	{0}
   11a38:	sub	sp, fp, #28
   11a3c:	ldrd	r4, [sp]
   11a40:	ldrd	r6, [sp, #8]
   11a44:	ldrd	r8, [sp, #16]
   11a48:	ldr	fp, [sp, #24]
   11a4c:	add	sp, sp, #28
   11a50:	pop	{pc}		; (ldr pc, [sp], #4)
   11a54:	andeq	r5, r1, r4, ror #28
   11a58:	andeq	r5, r1, r0, asr lr
   11a5c:	andeq	r5, r1, r8, lsr lr
   11a60:	andeq	r5, r1, r4, lsr #28
   11a64:	andeq	r4, r0, r4, lsl #18
   11a68:	andeq	r4, r0, r4, ror #16
   11a6c:	strdeq	r4, [r0], -ip
   11a70:	ldrdeq	r5, [r1], -r8
   11a74:	andeq	r5, r1, r4, asr #27
   11a78:	andeq	r5, r1, ip, lsr #27
   11a7c:	muleq	r1, r8, sp
   11a80:	andeq	r4, r0, r8, ror r8
   11a84:	ldrdeq	r4, [r0], -r8
   11a88:	andeq	r4, r0, r4, lsr #19
   11a8c:	andeq	r5, r1, ip, asr #26
   11a90:	andeq	r5, r1, r0, lsr sp
   11a94:	andeq	r5, r1, r4, lsl sp
   11a98:	strdeq	r5, [r1], -r8
   11a9c:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   11aa0:	andeq	r4, r0, r4, lsr r7
   11aa4:	andeq	r4, r0, r4, lsr r9
   11aa8:	andeq	r5, r1, r8, lsr #25
   11aac:	andeq	r5, r1, ip, lsl #25
   11ab0:	andeq	r5, r1, r0, ror ip
   11ab4:	andeq	r5, r1, r4, asr ip
   11ab8:	andeq	r4, r0, r0, lsr r7
   11abc:	muleq	r0, r0, r6
   11ac0:	andeq	r4, r0, r4, asr #17
   11ac4:	andeq	r5, r1, r4, lsl #24
   11ac8:	andeq	r5, r1, r8, ror #23
   11acc:	andeq	r5, r1, ip, asr #23
   11ad0:			; <UNDEFINED> instruction: 0x00015bb0
   11ad4:	andeq	r4, r0, ip, lsl #13
   11ad8:	andeq	r4, r0, ip, ror #11
   11adc:	andeq	r4, r0, r4, asr r8
   11ae0:	andeq	r5, r1, r0, ror #22
   11ae4:	andeq	r5, r1, r4, asr #22
   11ae8:	andeq	r5, r1, r8, lsr #22
   11aec:	andeq	r5, r1, ip, lsl #22
   11af0:	andeq	r4, r0, r8, ror #11
   11af4:	andeq	r4, r0, r8, asr #10
   11af8:	andeq	r4, r0, r4, ror #15
   11afc:			; <UNDEFINED> instruction: 0x00015abc
   11b00:	andeq	r5, r1, r0, lsr #21

00011b04 <test_encode@@Base>:
   11b04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11b08:	strd	r6, [sp, #8]
   11b0c:	strd	r8, [sp, #16]
   11b10:	str	fp, [sp, #24]
   11b14:	str	lr, [sp, #28]
   11b18:	add	fp, sp, #28
   11b1c:	sub	sp, sp, #48	; 0x30
   11b20:	ldr	r3, [pc, #740]	; 11e0c <test_encode@@Base+0x308>
   11b24:	add	r3, pc, r3
   11b28:	ldrd	r2, [r3]
   11b2c:	adds	r0, r2, #1
   11b30:	adc	r1, r3, #0
   11b34:	ldr	r3, [pc, #724]	; 11e10 <test_encode@@Base+0x30c>
   11b38:	add	r3, pc, r3
   11b3c:	strd	r0, [r3]
   11b40:	mov	r3, #12
   11b44:	ldr	r2, [pc, #712]	; 11e14 <test_encode@@Base+0x310>
   11b48:	add	r2, pc, r2
   11b4c:	mov	r1, #8
   11b50:	ldr	r0, [pc, #704]	; 11e18 <test_encode@@Base+0x314>
   11b54:	add	r0, pc, r0
   11b58:	bl	11ea4 <test_encoded_stuff@@Base>
   11b5c:	mov	r3, r0
   11b60:	mov	r1, r3
   11b64:	ldr	r3, [pc, #688]	; 11e1c <test_encode@@Base+0x318>
   11b68:	add	r3, pc, r3
   11b6c:	ldrd	r2, [r3, #8]
   11b70:	adds	r4, r2, #1
   11b74:	adc	r5, r3, #0
   11b78:	ldr	r3, [pc, #672]	; 11e20 <test_encode@@Base+0x31c>
   11b7c:	add	r3, pc, r3
   11b80:	strd	r4, [r3, #8]
   11b84:	eor	r3, r1, #1
   11b88:	uxtb	r3, r3
   11b8c:	mov	r0, r3
   11b90:	mov	r3, #0
   11b94:	str	r3, [sp, #4]
   11b98:	ldr	r3, [pc, #644]	; 11e24 <test_encode@@Base+0x320>
   11b9c:	add	r3, pc, r3
   11ba0:	str	r3, [sp]
   11ba4:	ldr	r3, [pc, #636]	; 11e28 <test_encode@@Base+0x324>
   11ba8:	add	r3, pc, r3
   11bac:	ldr	r2, [pc, #632]	; 11e2c <test_encode@@Base+0x328>
   11bb0:	add	r2, pc, r2
   11bb4:	mov	r1, #47	; 0x2f
   11bb8:	bl	10fb0 <CU_assertImplementation@plt>
   11bbc:	ldr	r3, [pc, #620]	; 11e30 <test_encode@@Base+0x32c>
   11bc0:	add	r3, pc, r3
   11bc4:	ldrd	r2, [r3, #16]
   11bc8:	adds	r6, r2, #1
   11bcc:	adc	r7, r3, #0
   11bd0:	ldr	r3, [pc, #604]	; 11e34 <test_encode@@Base+0x330>
   11bd4:	add	r3, pc, r3
   11bd8:	strd	r6, [r3, #16]
   11bdc:	mov	r3, #12
   11be0:	ldr	r2, [pc, #592]	; 11e38 <test_encode@@Base+0x334>
   11be4:	add	r2, pc, r2
   11be8:	mov	r1, #7
   11bec:	ldr	r0, [pc, #584]	; 11e3c <test_encode@@Base+0x338>
   11bf0:	add	r0, pc, r0
   11bf4:	bl	11ea4 <test_encoded_stuff@@Base>
   11bf8:	mov	r3, r0
   11bfc:	mov	r1, r3
   11c00:	ldr	r3, [pc, #568]	; 11e40 <test_encode@@Base+0x33c>
   11c04:	add	r3, pc, r3
   11c08:	ldrd	r2, [r3, #24]
   11c0c:	adds	r8, r2, #1
   11c10:	adc	r9, r3, #0
   11c14:	ldr	r3, [pc, #552]	; 11e44 <test_encode@@Base+0x340>
   11c18:	add	r3, pc, r3
   11c1c:	strd	r8, [r3, #24]
   11c20:	eor	r3, r1, #1
   11c24:	uxtb	r3, r3
   11c28:	mov	r0, r3
   11c2c:	mov	r3, #0
   11c30:	str	r3, [sp, #4]
   11c34:	ldr	r3, [pc, #524]	; 11e48 <test_encode@@Base+0x344>
   11c38:	add	r3, pc, r3
   11c3c:	str	r3, [sp]
   11c40:	ldr	r3, [pc, #516]	; 11e4c <test_encode@@Base+0x348>
   11c44:	add	r3, pc, r3
   11c48:	ldr	r2, [pc, #512]	; 11e50 <test_encode@@Base+0x34c>
   11c4c:	add	r2, pc, r2
   11c50:	mov	r1, #48	; 0x30
   11c54:	bl	10fb0 <CU_assertImplementation@plt>
   11c58:	ldr	r3, [pc, #500]	; 11e54 <test_encode@@Base+0x350>
   11c5c:	add	r3, pc, r3
   11c60:	ldrd	r2, [r3, #32]
   11c64:	adds	r1, r2, #1
   11c68:	str	r1, [fp, #-36]	; 0xffffffdc
   11c6c:	adc	r3, r3, #0
   11c70:	str	r3, [fp, #-32]	; 0xffffffe0
   11c74:	ldr	r3, [pc, #476]	; 11e58 <test_encode@@Base+0x354>
   11c78:	add	r3, pc, r3
   11c7c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11c80:	strd	r0, [r3, #32]
   11c84:	mov	r3, #8
   11c88:	ldr	r2, [pc, #460]	; 11e5c <test_encode@@Base+0x358>
   11c8c:	add	r2, pc, r2
   11c90:	mov	r1, #6
   11c94:	ldr	r0, [pc, #452]	; 11e60 <test_encode@@Base+0x35c>
   11c98:	add	r0, pc, r0
   11c9c:	bl	11ea4 <test_encoded_stuff@@Base>
   11ca0:	mov	r3, r0
   11ca4:	mov	r1, r3
   11ca8:	ldr	r3, [pc, #436]	; 11e64 <test_encode@@Base+0x360>
   11cac:	add	r3, pc, r3
   11cb0:	ldrd	r2, [r3, #40]	; 0x28
   11cb4:	adds	r0, r2, #1
   11cb8:	str	r0, [fp, #-44]	; 0xffffffd4
   11cbc:	adc	r3, r3, #0
   11cc0:	str	r3, [fp, #-40]	; 0xffffffd8
   11cc4:	ldr	r3, [pc, #412]	; 11e68 <test_encode@@Base+0x364>
   11cc8:	add	r3, pc, r3
   11ccc:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   11cd0:	strd	r4, [r3, #40]	; 0x28
   11cd4:	eor	r3, r1, #1
   11cd8:	uxtb	r3, r3
   11cdc:	mov	r0, r3
   11ce0:	mov	r3, #0
   11ce4:	str	r3, [sp, #4]
   11ce8:	ldr	r3, [pc, #380]	; 11e6c <test_encode@@Base+0x368>
   11cec:	add	r3, pc, r3
   11cf0:	str	r3, [sp]
   11cf4:	ldr	r3, [pc, #372]	; 11e70 <test_encode@@Base+0x36c>
   11cf8:	add	r3, pc, r3
   11cfc:	ldr	r2, [pc, #368]	; 11e74 <test_encode@@Base+0x370>
   11d00:	add	r2, pc, r2
   11d04:	mov	r1, #49	; 0x31
   11d08:	bl	10fb0 <CU_assertImplementation@plt>
   11d0c:	ldr	r3, [pc, #356]	; 11e78 <test_encode@@Base+0x374>
   11d10:	add	r3, pc, r3
   11d14:	ldrd	r2, [r3, #48]	; 0x30
   11d18:	adds	r1, r2, #1
   11d1c:	str	r1, [fp, #-52]	; 0xffffffcc
   11d20:	adc	r3, r3, #0
   11d24:	str	r3, [fp, #-48]	; 0xffffffd0
   11d28:	ldr	r3, [pc, #332]	; 11e7c <test_encode@@Base+0x378>
   11d2c:	add	r3, pc, r3
   11d30:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11d34:	strd	r0, [r3, #48]	; 0x30
   11d38:	mov	r3, #8
   11d3c:	ldr	r2, [pc, #316]	; 11e80 <test_encode@@Base+0x37c>
   11d40:	add	r2, pc, r2
   11d44:	mov	r1, #5
   11d48:	ldr	r0, [pc, #308]	; 11e84 <test_encode@@Base+0x380>
   11d4c:	add	r0, pc, r0
   11d50:	bl	11ea4 <test_encoded_stuff@@Base>
   11d54:	mov	r3, r0
   11d58:	mov	r1, r3
   11d5c:	ldr	r3, [pc, #292]	; 11e88 <test_encode@@Base+0x384>
   11d60:	add	r3, pc, r3
   11d64:	ldrd	r2, [r3, #56]	; 0x38
   11d68:	adds	r0, r2, #1
   11d6c:	str	r0, [fp, #-60]	; 0xffffffc4
   11d70:	adc	r3, r3, #0
   11d74:	str	r3, [fp, #-56]	; 0xffffffc8
   11d78:	ldr	r3, [pc, #268]	; 11e8c <test_encode@@Base+0x388>
   11d7c:	add	r3, pc, r3
   11d80:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   11d84:	strd	r4, [r3, #56]	; 0x38
   11d88:	eor	r3, r1, #1
   11d8c:	uxtb	r3, r3
   11d90:	mov	r0, r3
   11d94:	mov	r3, #0
   11d98:	str	r3, [sp, #4]
   11d9c:	ldr	r3, [pc, #236]	; 11e90 <test_encode@@Base+0x38c>
   11da0:	add	r3, pc, r3
   11da4:	str	r3, [sp]
   11da8:	ldr	r3, [pc, #228]	; 11e94 <test_encode@@Base+0x390>
   11dac:	add	r3, pc, r3
   11db0:	ldr	r2, [pc, #224]	; 11e98 <test_encode@@Base+0x394>
   11db4:	add	r2, pc, r2
   11db8:	mov	r1, #50	; 0x32
   11dbc:	bl	10fb0 <CU_assertImplementation@plt>
   11dc0:	ldr	r3, [pc, #212]	; 11e9c <test_encode@@Base+0x398>
   11dc4:	add	r3, pc, r3
   11dc8:	ldrd	r2, [r3, #64]	; 0x40
   11dcc:	adds	r1, r2, #1
   11dd0:	str	r1, [fp, #-68]	; 0xffffffbc
   11dd4:	adc	r3, r3, #0
   11dd8:	str	r3, [fp, #-64]	; 0xffffffc0
   11ddc:	ldr	r3, [pc, #188]	; 11ea0 <test_encode@@Base+0x39c>
   11de0:	add	r3, pc, r3
   11de4:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   11de8:	strd	r0, [r3, #64]	; 0x40
   11dec:	nop	{0}
   11df0:	sub	sp, fp, #28
   11df4:	ldrd	r4, [sp]
   11df8:	ldrd	r6, [sp, #8]
   11dfc:	ldrd	r8, [sp, #16]
   11e00:	ldr	fp, [sp, #24]
   11e04:	add	sp, sp, #28
   11e08:	pop	{pc}		; (ldr pc, [sp], #4)
   11e0c:	andeq	r5, r1, ip, asr r9
   11e10:	andeq	r5, r1, r8, asr #18
   11e14:	andeq	r4, r0, ip, asr #13
   11e18:	ldrdeq	r4, [r0], -r0
   11e1c:	andeq	r5, r1, r8, lsl r9
   11e20:	andeq	r5, r1, r4, lsl #18
   11e24:	andeq	r4, r0, r4, lsr r4
   11e28:	muleq	r0, r4, r3
   11e2c:	andeq	r4, r0, r0, lsl #13
   11e30:	andeq	r5, r1, r0, asr #17
   11e34:	andeq	r5, r1, ip, lsr #17
   11e38:	andeq	r4, r0, ip, lsr #13
   11e3c:			; <UNDEFINED> instruction: 0x000046b0
   11e40:	andeq	r5, r1, ip, ror r8
   11e44:	andeq	r5, r1, r8, ror #16
   11e48:	muleq	r0, r8, r3
   11e4c:	strdeq	r4, [r0], -r8
   11e50:	andeq	r4, r0, ip, asr r6
   11e54:	andeq	r5, r1, r4, lsr #16
   11e58:	andeq	r5, r1, r8, lsl #16
   11e5c:	andeq	r4, r0, r8, ror r6
   11e60:	andeq	r4, r0, r8, ror r6
   11e64:	ldrdeq	r5, [r1], -r4
   11e68:			; <UNDEFINED> instruction: 0x000157b8
   11e6c:	andeq	r4, r0, r4, ror #5
   11e70:	andeq	r4, r0, r4, asr #4
   11e74:	andeq	r4, r0, r8, lsl r6
   11e78:	andeq	r5, r1, r0, ror r7
   11e7c:	andeq	r5, r1, r4, asr r7
   11e80:	andeq	r4, r0, r0, lsr r6
   11e84:	andeq	r4, r0, r0, lsr r6
   11e88:	andeq	r5, r1, r0, lsr #14
   11e8c:	andeq	r5, r1, r4, lsl #14
   11e90:	andeq	r4, r0, r0, lsr r2
   11e94:	muleq	r0, r0, r1
   11e98:	ldrdeq	r4, [r0], -r0
   11e9c:			; <UNDEFINED> instruction: 0x000156bc
   11ea0:	andeq	r5, r1, r0, lsr #13

00011ea4 <test_encoded_stuff@@Base>:
   11ea4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11ea8:	strd	r6, [sp, #8]
   11eac:	strd	r8, [sp, #16]
   11eb0:	str	fp, [sp, #24]
   11eb4:	str	lr, [sp, #28]
   11eb8:	add	fp, sp, #28
   11ebc:	sub	sp, sp, #96	; 0x60
   11ec0:	str	r0, [fp, #-48]	; 0xffffffd0
   11ec4:	str	r1, [fp, #-52]	; 0xffffffcc
   11ec8:	str	r2, [fp, #-56]	; 0xffffffc8
   11ecc:	str	r3, [fp, #-60]	; 0xffffffc4
   11ed0:	ldr	r3, [pc, #812]	; 12204 <test_encoded_stuff@@Base+0x360>
   11ed4:	add	r3, pc, r3
   11ed8:	ldrd	r2, [r3]
   11edc:	adds	r4, r2, #1
   11ee0:	adc	r5, r3, #0
   11ee4:	ldr	r3, [pc, #796]	; 12208 <test_encoded_stuff@@Base+0x364>
   11ee8:	add	r3, pc, r3
   11eec:	strd	r4, [r3]
   11ef0:	mov	r3, #0
   11ef4:	strb	r3, [fp, #-33]	; 0xffffffdf
   11ef8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11efc:	bl	13060 <b64_get_encoded_buffer_size@@Base>
   11f00:	str	r0, [fp, #-40]	; 0xffffffd8
   11f04:	ldr	r3, [pc, #768]	; 1220c <test_encoded_stuff@@Base+0x368>
   11f08:	add	r3, pc, r3
   11f0c:	ldrd	r2, [r3, #8]
   11f10:	adds	r6, r2, #1
   11f14:	adc	r7, r3, #0
   11f18:	ldr	r3, [pc, #752]	; 12210 <test_encoded_stuff@@Base+0x36c>
   11f1c:	add	r3, pc, r3
   11f20:	strd	r6, [r3, #8]
   11f24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11f28:	bl	10f8c <malloc@plt>
   11f2c:	mov	r3, r0
   11f30:	str	r3, [fp, #-44]	; 0xffffffd4
   11f34:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11f38:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11f3c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11f40:	bl	130d0 <b64_encode@@Base>
   11f44:	ldr	r3, [pc, #712]	; 12214 <test_encoded_stuff@@Base+0x370>
   11f48:	add	r3, pc, r3
   11f4c:	ldrd	r2, [r3, #16]
   11f50:	adds	r8, r2, #1
   11f54:	adc	r9, r3, #0
   11f58:	ldr	r3, [pc, #696]	; 12218 <test_encoded_stuff@@Base+0x374>
   11f5c:	add	r3, pc, r3
   11f60:	strd	r8, [r3, #16]
   11f64:	ldr	r2, [fp, #-60]	; 0xffffffc4
   11f68:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11f6c:	cmp	r2, r3
   11f70:	moveq	r3, #1
   11f74:	movne	r3, #0
   11f78:	uxtb	r3, r3
   11f7c:	mov	r0, r3
   11f80:	mov	r3, #0
   11f84:	str	r3, [sp, #4]
   11f88:	ldr	r3, [pc, #652]	; 1221c <test_encoded_stuff@@Base+0x378>
   11f8c:	add	r3, pc, r3
   11f90:	str	r3, [sp]
   11f94:	ldr	r3, [pc, #644]	; 12220 <test_encoded_stuff@@Base+0x37c>
   11f98:	add	r3, pc, r3
   11f9c:	ldr	r2, [pc, #640]	; 12224 <test_encoded_stuff@@Base+0x380>
   11fa0:	add	r2, pc, r2
   11fa4:	mov	r1, #62	; 0x3e
   11fa8:	bl	10fb0 <CU_assertImplementation@plt>
   11fac:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11fb0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   11fb4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11fb8:	cmp	r1, r2
   11fbc:	movne	r2, #1
   11fc0:	moveq	r2, #0
   11fc4:	uxtb	r2, r2
   11fc8:	orr	r3, r3, r2
   11fcc:	cmp	r3, #0
   11fd0:	movne	r3, #1
   11fd4:	moveq	r3, #0
   11fd8:	strb	r3, [fp, #-33]	; 0xffffffdf
   11fdc:	mov	r3, #0
   11fe0:	str	r3, [fp, #-32]	; 0xffffffe0
   11fe4:	b	1219c <test_encoded_stuff@@Base+0x2f8>
   11fe8:	ldr	r3, [pc, #568]	; 12228 <test_encoded_stuff@@Base+0x384>
   11fec:	add	r3, pc, r3
   11ff0:	ldrd	r2, [r3, #48]	; 0x30
   11ff4:	adds	r1, r2, #1
   11ff8:	str	r1, [fp, #-92]	; 0xffffffa4
   11ffc:	adc	r3, r3, #0
   12000:	str	r3, [fp, #-88]	; 0xffffffa8
   12004:	ldr	r3, [pc, #544]	; 1222c <test_encoded_stuff@@Base+0x388>
   12008:	add	r3, pc, r3
   1200c:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   12010:	strd	r0, [r3, #48]	; 0x30
   12014:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12018:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1201c:	add	r3, r2, r3
   12020:	ldrb	r2, [r3]
   12024:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12028:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1202c:	add	r3, r1, r3
   12030:	ldrb	r3, [r3]
   12034:	cmp	r2, r3
   12038:	moveq	r3, #1
   1203c:	movne	r3, #0
   12040:	uxtb	r3, r3
   12044:	mov	r0, r3
   12048:	mov	r3, #0
   1204c:	str	r3, [sp, #4]
   12050:	ldr	r3, [pc, #472]	; 12230 <test_encoded_stuff@@Base+0x38c>
   12054:	add	r3, pc, r3
   12058:	str	r3, [sp]
   1205c:	ldr	r3, [pc, #464]	; 12234 <test_encoded_stuff@@Base+0x390>
   12060:	add	r3, pc, r3
   12064:	ldr	r2, [pc, #460]	; 12238 <test_encoded_stuff@@Base+0x394>
   12068:	add	r2, pc, r2
   1206c:	mov	r1, #65	; 0x41
   12070:	bl	10fb0 <CU_assertImplementation@plt>
   12074:	ldr	r3, [pc, #448]	; 1223c <test_encoded_stuff@@Base+0x398>
   12078:	add	r3, pc, r3
   1207c:	ldrd	r2, [r3, #24]
   12080:	adds	r1, r2, #1
   12084:	str	r1, [fp, #-68]	; 0xffffffbc
   12088:	adc	r3, r3, #0
   1208c:	str	r3, [fp, #-64]	; 0xffffffc0
   12090:	ldr	r3, [pc, #424]	; 12240 <test_encoded_stuff@@Base+0x39c>
   12094:	add	r3, pc, r3
   12098:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1209c:	strd	r0, [r3, #24]
   120a0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   120a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   120a8:	add	r3, r2, r3
   120ac:	ldrb	r2, [r3]
   120b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   120b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   120b8:	add	r3, r1, r3
   120bc:	ldrb	r3, [r3]
   120c0:	cmp	r2, r3
   120c4:	beq	12164 <test_encoded_stuff@@Base+0x2c0>
   120c8:	ldr	r3, [pc, #372]	; 12244 <test_encoded_stuff@@Base+0x3a0>
   120cc:	add	r3, pc, r3
   120d0:	ldrd	r2, [r3, #32]
   120d4:	adds	r1, r2, #1
   120d8:	str	r1, [fp, #-76]	; 0xffffffb4
   120dc:	adc	r3, r3, #0
   120e0:	str	r3, [fp, #-72]	; 0xffffffb8
   120e4:	ldr	r3, [pc, #348]	; 12248 <test_encoded_stuff@@Base+0x3a4>
   120e8:	add	r3, pc, r3
   120ec:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   120f0:	strd	r0, [r3, #32]
   120f4:	mov	r3, #1
   120f8:	strb	r3, [fp, #-33]	; 0xffffffdf
   120fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12100:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12104:	add	r3, r2, r3
   12108:	ldrb	r3, [r3]
   1210c:	mov	ip, r3
   12110:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12114:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12118:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1211c:	add	r3, r2, r3
   12120:	ldrb	r3, [r3]
   12124:	mov	r1, r3
   12128:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1212c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12130:	str	r3, [sp, #16]
   12134:	str	r2, [sp, #12]
   12138:	str	r1, [sp, #8]
   1213c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12140:	str	r3, [sp, #4]
   12144:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12148:	str	r3, [sp]
   1214c:	mov	r3, r0
   12150:	mov	r2, ip
   12154:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12158:	ldr	r0, [pc, #236]	; 1224c <test_encoded_stuff@@Base+0x3a8>
   1215c:	add	r0, pc, r0
   12160:	bl	10ed8 <printf@plt>
   12164:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12168:	add	r3, r3, #1
   1216c:	str	r3, [fp, #-32]	; 0xffffffe0
   12170:	ldr	r3, [pc, #216]	; 12250 <test_encoded_stuff@@Base+0x3ac>
   12174:	add	r3, pc, r3
   12178:	ldrd	r2, [r3, #40]	; 0x28
   1217c:	adds	r1, r2, #1
   12180:	str	r1, [fp, #-84]	; 0xffffffac
   12184:	adc	r3, r3, #0
   12188:	str	r3, [fp, #-80]	; 0xffffffb0
   1218c:	ldr	r3, [pc, #192]	; 12254 <test_encoded_stuff@@Base+0x3b0>
   12190:	add	r3, pc, r3
   12194:	ldrd	r0, [fp, #-84]	; 0xffffffac
   12198:	strd	r0, [r3, #40]	; 0x28
   1219c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   121a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   121a4:	cmp	r2, r3
   121a8:	bcc	11fe8 <test_encoded_stuff@@Base+0x144>
   121ac:	ldr	r3, [pc, #164]	; 12258 <test_encoded_stuff@@Base+0x3b4>
   121b0:	add	r3, pc, r3
   121b4:	ldrd	r2, [r3, #56]	; 0x38
   121b8:	adds	r1, r2, #1
   121bc:	str	r1, [fp, #-100]	; 0xffffff9c
   121c0:	adc	r3, r3, #0
   121c4:	str	r3, [fp, #-96]	; 0xffffffa0
   121c8:	ldr	r3, [pc, #140]	; 1225c <test_encoded_stuff@@Base+0x3b8>
   121cc:	add	r3, pc, r3
   121d0:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   121d4:	strd	r0, [r3, #56]	; 0x38
   121d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   121dc:	bl	10efc <free@plt>
   121e0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   121e4:	mov	r0, r3
   121e8:	sub	sp, fp, #28
   121ec:	ldrd	r4, [sp]
   121f0:	ldrd	r6, [sp, #8]
   121f4:	ldrd	r8, [sp, #16]
   121f8:	ldr	fp, [sp, #24]
   121fc:	add	sp, sp, #28
   12200:	pop	{pc}		; (ldr pc, [sp], #4)
   12204:	andeq	r5, r1, ip, ror #10
   12208:	andeq	r5, r1, r8, asr r5
   1220c:	andeq	r5, r1, r8, lsr r5
   12210:	andeq	r5, r1, r4, lsr #10
   12214:	strdeq	r5, [r1], -r8
   12218:	andeq	r5, r1, r4, ror #9
   1221c:	andeq	r4, r0, r4, asr #32
   12220:	andeq	r3, r0, r4, lsr #31
   12224:	andeq	r4, r0, ip, lsr r4
   12228:	andeq	r5, r1, r4, asr r4
   1222c:	andeq	r5, r1, r8, lsr r4
   12230:	andeq	r3, r0, ip, ror pc
   12234:	ldrdeq	r3, [r0], -ip
   12238:	andeq	r4, r0, r4, lsr #7
   1223c:	andeq	r5, r1, r8, asr #7
   12240:	andeq	r5, r1, ip, lsr #7
   12244:	andeq	r5, r1, r4, ror r3
   12248:	andeq	r5, r1, r8, asr r3
   1224c:	ldrdeq	r4, [r0], -ip
   12250:	andeq	r5, r1, ip, asr #5
   12254:			; <UNDEFINED> instruction: 0x000152b0
   12258:	muleq	r1, r0, r2
   1225c:	andeq	r5, r1, r4, ror r2

00012260 <test_decode@@Base>:
   12260:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12264:	strd	r6, [sp, #8]
   12268:	strd	r8, [sp, #16]
   1226c:	str	fp, [sp, #24]
   12270:	str	lr, [sp, #28]
   12274:	add	fp, sp, #28
   12278:	sub	sp, sp, #48	; 0x30
   1227c:	ldr	r3, [pc, #740]	; 12568 <test_decode@@Base+0x308>
   12280:	add	r3, pc, r3
   12284:	ldrd	r2, [r3]
   12288:	adds	r0, r2, #1
   1228c:	adc	r1, r3, #0
   12290:	ldr	r3, [pc, #724]	; 1256c <test_decode@@Base+0x30c>
   12294:	add	r3, pc, r3
   12298:	strd	r0, [r3]
   1229c:	mov	r3, #8
   122a0:	ldr	r2, [pc, #712]	; 12570 <test_decode@@Base+0x310>
   122a4:	add	r2, pc, r2
   122a8:	mov	r1, #12
   122ac:	ldr	r0, [pc, #704]	; 12574 <test_decode@@Base+0x314>
   122b0:	add	r0, pc, r0
   122b4:	bl	12600 <test_decoded_stuff@@Base>
   122b8:	mov	r3, r0
   122bc:	mov	r1, r3
   122c0:	ldr	r3, [pc, #688]	; 12578 <test_decode@@Base+0x318>
   122c4:	add	r3, pc, r3
   122c8:	ldrd	r2, [r3, #8]
   122cc:	adds	r4, r2, #1
   122d0:	adc	r5, r3, #0
   122d4:	ldr	r3, [pc, #672]	; 1257c <test_decode@@Base+0x31c>
   122d8:	add	r3, pc, r3
   122dc:	strd	r4, [r3, #8]
   122e0:	eor	r3, r1, #1
   122e4:	uxtb	r3, r3
   122e8:	mov	r0, r3
   122ec:	mov	r3, #0
   122f0:	str	r3, [sp, #4]
   122f4:	ldr	r3, [pc, #644]	; 12580 <test_decode@@Base+0x320>
   122f8:	add	r3, pc, r3
   122fc:	str	r3, [sp]
   12300:	ldr	r3, [pc, #636]	; 12584 <test_decode@@Base+0x324>
   12304:	add	r3, pc, r3
   12308:	ldr	r2, [pc, #632]	; 12588 <test_decode@@Base+0x328>
   1230c:	add	r2, pc, r2
   12310:	mov	r1, #78	; 0x4e
   12314:	bl	10fb0 <CU_assertImplementation@plt>
   12318:	ldr	r3, [pc, #620]	; 1258c <test_decode@@Base+0x32c>
   1231c:	add	r3, pc, r3
   12320:	ldrd	r2, [r3, #16]
   12324:	adds	r6, r2, #1
   12328:	adc	r7, r3, #0
   1232c:	ldr	r3, [pc, #604]	; 12590 <test_decode@@Base+0x330>
   12330:	add	r3, pc, r3
   12334:	strd	r6, [r3, #16]
   12338:	mov	r3, #7
   1233c:	ldr	r2, [pc, #592]	; 12594 <test_decode@@Base+0x334>
   12340:	add	r2, pc, r2
   12344:	mov	r1, #12
   12348:	ldr	r0, [pc, #584]	; 12598 <test_decode@@Base+0x338>
   1234c:	add	r0, pc, r0
   12350:	bl	12600 <test_decoded_stuff@@Base>
   12354:	mov	r3, r0
   12358:	mov	r1, r3
   1235c:	ldr	r3, [pc, #568]	; 1259c <test_decode@@Base+0x33c>
   12360:	add	r3, pc, r3
   12364:	ldrd	r2, [r3, #24]
   12368:	adds	r8, r2, #1
   1236c:	adc	r9, r3, #0
   12370:	ldr	r3, [pc, #552]	; 125a0 <test_decode@@Base+0x340>
   12374:	add	r3, pc, r3
   12378:	strd	r8, [r3, #24]
   1237c:	eor	r3, r1, #1
   12380:	uxtb	r3, r3
   12384:	mov	r0, r3
   12388:	mov	r3, #0
   1238c:	str	r3, [sp, #4]
   12390:	ldr	r3, [pc, #524]	; 125a4 <test_decode@@Base+0x344>
   12394:	add	r3, pc, r3
   12398:	str	r3, [sp]
   1239c:	ldr	r3, [pc, #516]	; 125a8 <test_decode@@Base+0x348>
   123a0:	add	r3, pc, r3
   123a4:	ldr	r2, [pc, #512]	; 125ac <test_decode@@Base+0x34c>
   123a8:	add	r2, pc, r2
   123ac:	mov	r1, #79	; 0x4f
   123b0:	bl	10fb0 <CU_assertImplementation@plt>
   123b4:	ldr	r3, [pc, #500]	; 125b0 <test_decode@@Base+0x350>
   123b8:	add	r3, pc, r3
   123bc:	ldrd	r2, [r3, #32]
   123c0:	adds	r1, r2, #1
   123c4:	str	r1, [fp, #-36]	; 0xffffffdc
   123c8:	adc	r3, r3, #0
   123cc:	str	r3, [fp, #-32]	; 0xffffffe0
   123d0:	ldr	r3, [pc, #476]	; 125b4 <test_decode@@Base+0x354>
   123d4:	add	r3, pc, r3
   123d8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   123dc:	strd	r0, [r3, #32]
   123e0:	mov	r3, #6
   123e4:	ldr	r2, [pc, #460]	; 125b8 <test_decode@@Base+0x358>
   123e8:	add	r2, pc, r2
   123ec:	mov	r1, #8
   123f0:	ldr	r0, [pc, #452]	; 125bc <test_decode@@Base+0x35c>
   123f4:	add	r0, pc, r0
   123f8:	bl	12600 <test_decoded_stuff@@Base>
   123fc:	mov	r3, r0
   12400:	mov	r1, r3
   12404:	ldr	r3, [pc, #436]	; 125c0 <test_decode@@Base+0x360>
   12408:	add	r3, pc, r3
   1240c:	ldrd	r2, [r3, #40]	; 0x28
   12410:	adds	r0, r2, #1
   12414:	str	r0, [fp, #-44]	; 0xffffffd4
   12418:	adc	r3, r3, #0
   1241c:	str	r3, [fp, #-40]	; 0xffffffd8
   12420:	ldr	r3, [pc, #412]	; 125c4 <test_decode@@Base+0x364>
   12424:	add	r3, pc, r3
   12428:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   1242c:	strd	r4, [r3, #40]	; 0x28
   12430:	eor	r3, r1, #1
   12434:	uxtb	r3, r3
   12438:	mov	r0, r3
   1243c:	mov	r3, #0
   12440:	str	r3, [sp, #4]
   12444:	ldr	r3, [pc, #380]	; 125c8 <test_decode@@Base+0x368>
   12448:	add	r3, pc, r3
   1244c:	str	r3, [sp]
   12450:	ldr	r3, [pc, #372]	; 125cc <test_decode@@Base+0x36c>
   12454:	add	r3, pc, r3
   12458:	ldr	r2, [pc, #368]	; 125d0 <test_decode@@Base+0x370>
   1245c:	add	r2, pc, r2
   12460:	mov	r1, #80	; 0x50
   12464:	bl	10fb0 <CU_assertImplementation@plt>
   12468:	ldr	r3, [pc, #356]	; 125d4 <test_decode@@Base+0x374>
   1246c:	add	r3, pc, r3
   12470:	ldrd	r2, [r3, #48]	; 0x30
   12474:	adds	r1, r2, #1
   12478:	str	r1, [fp, #-52]	; 0xffffffcc
   1247c:	adc	r3, r3, #0
   12480:	str	r3, [fp, #-48]	; 0xffffffd0
   12484:	ldr	r3, [pc, #332]	; 125d8 <test_decode@@Base+0x378>
   12488:	add	r3, pc, r3
   1248c:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   12490:	strd	r0, [r3, #48]	; 0x30
   12494:	mov	r3, #5
   12498:	ldr	r2, [pc, #316]	; 125dc <test_decode@@Base+0x37c>
   1249c:	add	r2, pc, r2
   124a0:	mov	r1, #8
   124a4:	ldr	r0, [pc, #308]	; 125e0 <test_decode@@Base+0x380>
   124a8:	add	r0, pc, r0
   124ac:	bl	12600 <test_decoded_stuff@@Base>
   124b0:	mov	r3, r0
   124b4:	mov	r1, r3
   124b8:	ldr	r3, [pc, #292]	; 125e4 <test_decode@@Base+0x384>
   124bc:	add	r3, pc, r3
   124c0:	ldrd	r2, [r3, #56]	; 0x38
   124c4:	adds	r0, r2, #1
   124c8:	str	r0, [fp, #-60]	; 0xffffffc4
   124cc:	adc	r3, r3, #0
   124d0:	str	r3, [fp, #-56]	; 0xffffffc8
   124d4:	ldr	r3, [pc, #268]	; 125e8 <test_decode@@Base+0x388>
   124d8:	add	r3, pc, r3
   124dc:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   124e0:	strd	r4, [r3, #56]	; 0x38
   124e4:	eor	r3, r1, #1
   124e8:	uxtb	r3, r3
   124ec:	mov	r0, r3
   124f0:	mov	r3, #0
   124f4:	str	r3, [sp, #4]
   124f8:	ldr	r3, [pc, #236]	; 125ec <test_decode@@Base+0x38c>
   124fc:	add	r3, pc, r3
   12500:	str	r3, [sp]
   12504:	ldr	r3, [pc, #228]	; 125f0 <test_decode@@Base+0x390>
   12508:	add	r3, pc, r3
   1250c:	ldr	r2, [pc, #224]	; 125f4 <test_decode@@Base+0x394>
   12510:	add	r2, pc, r2
   12514:	mov	r1, #81	; 0x51
   12518:	bl	10fb0 <CU_assertImplementation@plt>
   1251c:	ldr	r3, [pc, #212]	; 125f8 <test_decode@@Base+0x398>
   12520:	add	r3, pc, r3
   12524:	ldrd	r2, [r3, #64]	; 0x40
   12528:	adds	r1, r2, #1
   1252c:	str	r1, [fp, #-68]	; 0xffffffbc
   12530:	adc	r3, r3, #0
   12534:	str	r3, [fp, #-64]	; 0xffffffc0
   12538:	ldr	r3, [pc, #188]	; 125fc <test_decode@@Base+0x39c>
   1253c:	add	r3, pc, r3
   12540:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   12544:	strd	r0, [r3, #64]	; 0x40
   12548:	nop	{0}
   1254c:	sub	sp, fp, #28
   12550:	ldrd	r4, [sp]
   12554:	ldrd	r6, [sp, #8]
   12558:	ldrd	r8, [sp, #16]
   1255c:	ldr	fp, [sp, #24]
   12560:	add	sp, sp, #28
   12564:	pop	{pc}		; (ldr pc, [sp], #4)
   12568:	andeq	r5, r1, r8, ror r1
   1256c:	andeq	r5, r1, r4, ror #2
   12570:	andeq	r3, r0, r0, lsl #31
   12574:	andeq	r3, r0, r4, ror #30
   12578:	andeq	r5, r1, r4, lsr r1
   1257c:	andeq	r5, r1, r0, lsr #2
   12580:	ldrdeq	r3, [r0], -r8
   12584:	andeq	r3, r0, r8, lsr ip
   12588:	andeq	r4, r0, r8, asr r1
   1258c:	ldrdeq	r5, [r1], -ip
   12590:	andeq	r5, r1, r8, asr #1
   12594:	andeq	r3, r0, r0, ror #30
   12598:	andeq	r3, r0, r4, asr #30
   1259c:	muleq	r1, r8, r0
   125a0:	andeq	r5, r1, r4, lsl #1
   125a4:	andeq	r3, r0, ip, lsr ip
   125a8:	muleq	r0, ip, fp
   125ac:	andeq	r4, r0, ip, lsl r1
   125b0:	andeq	r5, r1, r0, asr #32
   125b4:	andeq	r5, r1, r4, lsr #32
   125b8:	andeq	r3, r0, r8, lsr #30
   125bc:	andeq	r3, r0, r0, lsl pc
   125c0:	strdeq	r4, [r1], -r0
   125c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   125c8:	andeq	r3, r0, r8, lsl #23
   125cc:	andeq	r3, r0, r8, ror #21
   125d0:	andeq	r4, r0, r4, asr #1
   125d4:	andeq	r4, r1, ip, lsl #31
   125d8:	andeq	r4, r1, r0, ror pc
   125dc:	andeq	r3, r0, r0, ror #29
   125e0:	andeq	r3, r0, r8, asr #29
   125e4:	andeq	r4, r1, ip, lsr pc
   125e8:	andeq	r4, r1, r0, lsr #30
   125ec:	ldrdeq	r3, [r0], -r4
   125f0:	andeq	r3, r0, r4, lsr sl
   125f4:	andeq	r4, r0, r8, rrx
   125f8:	ldrdeq	r4, [r1], -r8
   125fc:			; <UNDEFINED> instruction: 0x00014ebc

00012600 <test_decoded_stuff@@Base>:
   12600:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12604:	strd	r6, [sp, #8]
   12608:	strd	r8, [sp, #16]
   1260c:	str	fp, [sp, #24]
   12610:	str	lr, [sp, #28]
   12614:	add	fp, sp, #28
   12618:	sub	sp, sp, #120	; 0x78
   1261c:	str	r0, [fp, #-56]	; 0xffffffc8
   12620:	str	r1, [fp, #-60]	; 0xffffffc4
   12624:	str	r2, [fp, #-64]	; 0xffffffc0
   12628:	str	r3, [fp, #-68]	; 0xffffffbc
   1262c:	ldr	r3, [pc, #944]	; 129e4 <test_decoded_stuff@@Base+0x3e4>
   12630:	add	r3, pc, r3
   12634:	ldrd	r2, [r3]
   12638:	adds	r4, r2, #1
   1263c:	adc	r5, r3, #0
   12640:	ldr	r3, [pc, #928]	; 129e8 <test_decoded_stuff@@Base+0x3e8>
   12644:	add	r3, pc, r3
   12648:	strd	r4, [r3]
   1264c:	mov	r3, #0
   12650:	strb	r3, [fp, #-33]	; 0xffffffdf
   12654:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12658:	bl	135a4 <b64_get_decoded_buffer_size@@Base>
   1265c:	str	r0, [fp, #-40]	; 0xffffffd8
   12660:	ldr	r3, [pc, #900]	; 129ec <test_decoded_stuff@@Base+0x3ec>
   12664:	add	r3, pc, r3
   12668:	ldrd	r2, [r3, #8]
   1266c:	adds	r6, r2, #1
   12670:	adc	r7, r3, #0
   12674:	ldr	r3, [pc, #884]	; 129f0 <test_decoded_stuff@@Base+0x3f0>
   12678:	add	r3, pc, r3
   1267c:	strd	r6, [r3, #8]
   12680:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12684:	bl	10f8c <malloc@plt>
   12688:	mov	r3, r0
   1268c:	str	r3, [fp, #-44]	; 0xffffffd4
   12690:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12694:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12698:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1269c:	bl	13698 <b64_decode@@Base>
   126a0:	str	r0, [fp, #-48]	; 0xffffffd0
   126a4:	ldr	r3, [pc, #840]	; 129f4 <test_decoded_stuff@@Base+0x3f4>
   126a8:	add	r3, pc, r3
   126ac:	ldrd	r2, [r3, #16]
   126b0:	adds	r8, r2, #1
   126b4:	adc	r9, r3, #0
   126b8:	ldr	r3, [pc, #824]	; 129f8 <test_decoded_stuff@@Base+0x3f8>
   126bc:	add	r3, pc, r3
   126c0:	strd	r8, [r3, #16]
   126c4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   126c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   126cc:	cmp	r2, r3
   126d0:	moveq	r3, #1
   126d4:	movne	r3, #0
   126d8:	uxtb	r3, r3
   126dc:	mov	r0, r3
   126e0:	mov	r3, #0
   126e4:	str	r3, [sp, #4]
   126e8:	ldr	r3, [pc, #780]	; 129fc <test_decoded_stuff@@Base+0x3fc>
   126ec:	add	r3, pc, r3
   126f0:	str	r3, [sp]
   126f4:	ldr	r3, [pc, #772]	; 12a00 <test_decoded_stuff@@Base+0x400>
   126f8:	add	r3, pc, r3
   126fc:	ldr	r2, [pc, #768]	; 12a04 <test_decoded_stuff@@Base+0x404>
   12700:	add	r2, pc, r2
   12704:	mov	r1, #92	; 0x5c
   12708:	bl	10fb0 <CU_assertImplementation@plt>
   1270c:	ldr	r3, [pc, #756]	; 12a08 <test_decoded_stuff@@Base+0x408>
   12710:	add	r3, pc, r3
   12714:	ldrd	r2, [r3, #24]
   12718:	adds	r1, r2, #1
   1271c:	str	r1, [fp, #-76]	; 0xffffffb4
   12720:	adc	r3, r3, #0
   12724:	str	r3, [fp, #-72]	; 0xffffffb8
   12728:	ldr	r3, [pc, #732]	; 12a0c <test_decoded_stuff@@Base+0x40c>
   1272c:	add	r3, pc, r3
   12730:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   12734:	strd	r0, [r3, #24]
   12738:	ldrb	r1, [fp, #-33]	; 0xffffffdf
   1273c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12740:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12744:	cmp	r2, r3
   12748:	movne	r3, #1
   1274c:	moveq	r3, #0
   12750:	uxtb	r3, r3
   12754:	orr	r3, r1, r3
   12758:	cmp	r3, #0
   1275c:	movne	r3, #1
   12760:	moveq	r3, #0
   12764:	strb	r3, [fp, #-33]	; 0xffffffdf
   12768:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1276c:	cmp	r3, #0
   12770:	beq	127b8 <test_decoded_stuff@@Base+0x1b8>
   12774:	ldr	r3, [pc, #660]	; 12a10 <test_decoded_stuff@@Base+0x410>
   12778:	add	r3, pc, r3
   1277c:	ldrd	r2, [r3, #32]
   12780:	adds	r1, r2, #1
   12784:	str	r1, [fp, #-84]	; 0xffffffac
   12788:	adc	r3, r3, #0
   1278c:	str	r3, [fp, #-80]	; 0xffffffb0
   12790:	ldr	r3, [pc, #636]	; 12a14 <test_decoded_stuff@@Base+0x414>
   12794:	add	r3, pc, r3
   12798:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1279c:	strd	r0, [r3, #32]
   127a0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   127a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   127a8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   127ac:	ldr	r0, [pc, #612]	; 12a18 <test_decoded_stuff@@Base+0x418>
   127b0:	add	r0, pc, r0
   127b4:	bl	10ed8 <printf@plt>
   127b8:	mov	r3, #0
   127bc:	str	r3, [fp, #-32]	; 0xffffffe0
   127c0:	ldr	r3, [pc, #596]	; 12a1c <test_decoded_stuff@@Base+0x41c>
   127c4:	add	r3, pc, r3
   127c8:	ldrd	r2, [r3, #40]	; 0x28
   127cc:	adds	r1, r2, #1
   127d0:	str	r1, [fp, #-92]	; 0xffffffa4
   127d4:	adc	r3, r3, #0
   127d8:	str	r3, [fp, #-88]	; 0xffffffa8
   127dc:	ldr	r3, [pc, #572]	; 12a20 <test_decoded_stuff@@Base+0x420>
   127e0:	add	r3, pc, r3
   127e4:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   127e8:	strd	r0, [r3, #40]	; 0x28
   127ec:	b	129a8 <test_decoded_stuff@@Base+0x3a8>
   127f0:	ldr	r3, [pc, #556]	; 12a24 <test_decoded_stuff@@Base+0x424>
   127f4:	add	r3, pc, r3
   127f8:	ldrd	r2, [r3, #72]	; 0x48
   127fc:	adds	r1, r2, #1
   12800:	str	r1, [fp, #-124]	; 0xffffff84
   12804:	adc	r3, r3, #0
   12808:	str	r3, [fp, #-120]	; 0xffffff88
   1280c:	ldr	r3, [pc, #532]	; 12a28 <test_decoded_stuff@@Base+0x428>
   12810:	add	r3, pc, r3
   12814:	ldrd	r0, [fp, #-124]	; 0xffffff84
   12818:	strd	r0, [r3, #72]	; 0x48
   1281c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12820:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12824:	add	r3, r2, r3
   12828:	ldrb	r2, [r3]
   1282c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12830:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12834:	add	r3, r1, r3
   12838:	ldrb	r3, [r3]
   1283c:	cmp	r2, r3
   12840:	moveq	r3, #1
   12844:	movne	r3, #0
   12848:	uxtb	r3, r3
   1284c:	mov	r0, r3
   12850:	mov	r3, #0
   12854:	str	r3, [sp, #4]
   12858:	ldr	r3, [pc, #460]	; 12a2c <test_decoded_stuff@@Base+0x42c>
   1285c:	add	r3, pc, r3
   12860:	str	r3, [sp]
   12864:	ldr	r3, [pc, #452]	; 12a30 <test_decoded_stuff@@Base+0x430>
   12868:	add	r3, pc, r3
   1286c:	ldr	r2, [pc, #448]	; 12a34 <test_decoded_stuff@@Base+0x434>
   12870:	add	r2, pc, r2
   12874:	mov	r1, #99	; 0x63
   12878:	bl	10fb0 <CU_assertImplementation@plt>
   1287c:	ldr	r3, [pc, #436]	; 12a38 <test_decoded_stuff@@Base+0x438>
   12880:	add	r3, pc, r3
   12884:	ldrd	r2, [r3, #48]	; 0x30
   12888:	adds	r1, r2, #1
   1288c:	str	r1, [fp, #-100]	; 0xffffff9c
   12890:	adc	r3, r3, #0
   12894:	str	r3, [fp, #-96]	; 0xffffffa0
   12898:	ldr	r3, [pc, #412]	; 12a3c <test_decoded_stuff@@Base+0x43c>
   1289c:	add	r3, pc, r3
   128a0:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   128a4:	strd	r0, [r3, #48]	; 0x30
   128a8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   128ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   128b0:	add	r3, r2, r3
   128b4:	ldrb	r2, [r3]
   128b8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   128bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   128c0:	add	r3, r1, r3
   128c4:	ldrb	r3, [r3]
   128c8:	cmp	r2, r3
   128cc:	beq	12970 <test_decoded_stuff@@Base+0x370>
   128d0:	ldr	r3, [pc, #360]	; 12a40 <test_decoded_stuff@@Base+0x440>
   128d4:	add	r3, pc, r3
   128d8:	ldrd	r2, [r3, #56]	; 0x38
   128dc:	adds	r1, r2, #1
   128e0:	str	r1, [fp, #-108]	; 0xffffff94
   128e4:	adc	r3, r3, #0
   128e8:	str	r3, [fp, #-104]	; 0xffffff98
   128ec:	ldr	r3, [pc, #336]	; 12a44 <test_decoded_stuff@@Base+0x444>
   128f0:	add	r3, pc, r3
   128f4:	ldrd	r0, [fp, #-108]	; 0xffffff94
   128f8:	strd	r0, [r3, #56]	; 0x38
   128fc:	mov	r3, #1
   12900:	strb	r3, [fp, #-33]	; 0xffffffdf
   12904:	ldr	ip, [fp, #-32]	; 0xffffffe0
   12908:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1290c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12910:	add	r3, r2, r3
   12914:	ldrb	r3, [r3]
   12918:	mov	r4, r3
   1291c:	ldr	lr, [fp, #-68]	; 0xffffffbc
   12920:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12924:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12928:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1292c:	add	r3, r2, r3
   12930:	ldrb	r3, [r3]
   12934:	mov	r0, r3
   12938:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1293c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12940:	str	r3, [sp, #16]
   12944:	str	r2, [sp, #12]
   12948:	str	r0, [sp, #8]
   1294c:	str	r1, [sp, #4]
   12950:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12954:	str	r3, [sp]
   12958:	mov	r3, lr
   1295c:	mov	r2, r4
   12960:	mov	r1, ip
   12964:	ldr	r0, [pc, #220]	; 12a48 <test_decoded_stuff@@Base+0x448>
   12968:	add	r0, pc, r0
   1296c:	bl	10ed8 <printf@plt>
   12970:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12974:	add	r3, r3, #1
   12978:	str	r3, [fp, #-32]	; 0xffffffe0
   1297c:	ldr	r3, [pc, #200]	; 12a4c <test_decoded_stuff@@Base+0x44c>
   12980:	add	r3, pc, r3
   12984:	ldrd	r2, [r3, #64]	; 0x40
   12988:	adds	r1, r2, #1
   1298c:	str	r1, [fp, #-116]	; 0xffffff8c
   12990:	adc	r3, r3, #0
   12994:	str	r3, [fp, #-112]	; 0xffffff90
   12998:	ldr	r3, [pc, #176]	; 12a50 <test_decoded_stuff@@Base+0x450>
   1299c:	add	r3, pc, r3
   129a0:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   129a4:	strd	r0, [r3, #64]	; 0x40
   129a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   129ac:	ldr	r3, [fp, #-68]	; 0xffffffbc
   129b0:	cmp	r2, r3
   129b4:	bcc	127f0 <test_decoded_stuff@@Base+0x1f0>
   129b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   129bc:	bl	10efc <free@plt>
   129c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   129c4:	mov	r0, r3
   129c8:	sub	sp, fp, #28
   129cc:	ldrd	r4, [sp]
   129d0:	ldrd	r6, [sp, #8]
   129d4:	ldrd	r8, [sp, #16]
   129d8:	ldr	fp, [sp, #24]
   129dc:	add	sp, sp, #28
   129e0:	pop	{pc}		; (ldr pc, [sp], #4)
   129e4:	andeq	r4, r1, r8, ror sp
   129e8:	andeq	r4, r1, r4, ror #26
   129ec:	andeq	r4, r1, r4, asr #26
   129f0:	andeq	r4, r1, r0, lsr sp
   129f4:	andeq	r4, r1, r0, lsl #26
   129f8:	andeq	r4, r1, ip, ror #25
   129fc:	andeq	r3, r0, r4, ror #17
   12a00:	andeq	r3, r0, r4, asr #16
   12a04:	ldrdeq	r3, [r0], -r0
   12a08:	muleq	r1, r8, ip
   12a0c:	andeq	r4, r1, ip, ror ip
   12a10:	andeq	r4, r1, r0, lsr ip
   12a14:	andeq	r4, r1, r4, lsl ip
   12a18:	andeq	r3, r0, ip, asr #28
   12a1c:	andeq	r4, r1, r4, ror #23
   12a20:	andeq	r4, r1, r8, asr #23
   12a24:			; <UNDEFINED> instruction: 0x00014bb4
   12a28:	muleq	r1, r8, fp
   12a2c:	andeq	r3, r0, r4, ror r7
   12a30:	ldrdeq	r3, [r0], -r4
   12a34:	muleq	r0, ip, fp
   12a38:	andeq	r4, r1, r8, lsr #22
   12a3c:	andeq	r4, r1, ip, lsl #22
   12a40:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12a44:			; <UNDEFINED> instruction: 0x00014ab8
   12a48:	andeq	r3, r0, ip, lsr #25
   12a4c:	andeq	r4, r1, r8, lsr #20
   12a50:	andeq	r4, r1, ip, lsl #20

00012a54 <add_suites@@Base>:
   12a54:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12a58:	str	r6, [sp, #8]
   12a5c:	strd	r8, [sp, #12]
   12a60:	str	fp, [sp, #20]
   12a64:	str	lr, [sp, #24]
   12a68:	add	fp, sp, #24
   12a6c:	sub	sp, sp, #44	; 0x2c
   12a70:	str	r0, [fp, #-32]	; 0xffffffe0
   12a74:	ldr	r6, [pc, #452]	; 12c40 <add_suites@@Base+0x1ec>
   12a78:	add	r6, pc, r6
   12a7c:	ldr	r3, [pc, #448]	; 12c44 <add_suites@@Base+0x1f0>
   12a80:	add	r3, pc, r3
   12a84:	ldrd	r2, [r3]
   12a88:	adds	r4, r2, #1
   12a8c:	adc	r5, r3, #0
   12a90:	ldr	r3, [pc, #432]	; 12c48 <add_suites@@Base+0x1f4>
   12a94:	add	r3, pc, r3
   12a98:	strd	r4, [r3]
   12a9c:	mov	r2, #0
   12aa0:	mov	r1, #0
   12aa4:	ldr	r3, [pc, #416]	; 12c4c <add_suites@@Base+0x1f8>
   12aa8:	add	r3, pc, r3
   12aac:	mov	r0, r3
   12ab0:	bl	10f08 <CU_add_suite@plt>
   12ab4:	mov	r1, r0
   12ab8:	ldr	r3, [pc, #400]	; 12c50 <add_suites@@Base+0x1fc>
   12abc:	add	r3, pc, r3
   12ac0:	ldrd	r2, [r3, #8]
   12ac4:	adds	r8, r2, #1
   12ac8:	adc	r9, r3, #0
   12acc:	ldr	r3, [pc, #384]	; 12c54 <add_suites@@Base+0x200>
   12ad0:	add	r3, pc, r3
   12ad4:	strd	r8, [r3, #8]
   12ad8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12adc:	str	r1, [r3]
   12ae0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ae4:	ldr	r0, [r3]
   12ae8:	ldr	r3, [pc, #360]	; 12c58 <add_suites@@Base+0x204>
   12aec:	ldr	r3, [r6, r3]
   12af0:	mov	r2, r3
   12af4:	ldr	r3, [pc, #352]	; 12c5c <add_suites@@Base+0x208>
   12af8:	add	r3, pc, r3
   12afc:	mov	r1, r3
   12b00:	bl	11010 <CU_add_test@plt>
   12b04:	ldr	r3, [pc, #340]	; 12c60 <add_suites@@Base+0x20c>
   12b08:	add	r3, pc, r3
   12b0c:	ldrd	r2, [r3, #16]
   12b10:	adds	r1, r2, #1
   12b14:	str	r1, [fp, #-44]	; 0xffffffd4
   12b18:	adc	r3, r3, #0
   12b1c:	str	r3, [fp, #-40]	; 0xffffffd8
   12b20:	ldr	r3, [pc, #316]	; 12c64 <add_suites@@Base+0x210>
   12b24:	add	r3, pc, r3
   12b28:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   12b2c:	strd	r0, [r3, #16]
   12b30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b34:	ldr	r0, [r3]
   12b38:	ldr	r3, [pc, #296]	; 12c68 <add_suites@@Base+0x214>
   12b3c:	ldr	r3, [r6, r3]
   12b40:	mov	r2, r3
   12b44:	ldr	r3, [pc, #288]	; 12c6c <add_suites@@Base+0x218>
   12b48:	add	r3, pc, r3
   12b4c:	mov	r1, r3
   12b50:	bl	11010 <CU_add_test@plt>
   12b54:	ldr	r3, [pc, #276]	; 12c70 <add_suites@@Base+0x21c>
   12b58:	add	r3, pc, r3
   12b5c:	ldrd	r2, [r3, #24]
   12b60:	adds	r1, r2, #1
   12b64:	str	r1, [fp, #-52]	; 0xffffffcc
   12b68:	adc	r3, r3, #0
   12b6c:	str	r3, [fp, #-48]	; 0xffffffd0
   12b70:	ldr	r3, [pc, #252]	; 12c74 <add_suites@@Base+0x220>
   12b74:	add	r3, pc, r3
   12b78:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   12b7c:	strd	r0, [r3, #24]
   12b80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b84:	ldr	r0, [r3]
   12b88:	ldr	r3, [pc, #232]	; 12c78 <add_suites@@Base+0x224>
   12b8c:	ldr	r3, [r6, r3]
   12b90:	mov	r2, r3
   12b94:	ldr	r3, [pc, #224]	; 12c7c <add_suites@@Base+0x228>
   12b98:	add	r3, pc, r3
   12b9c:	mov	r1, r3
   12ba0:	bl	11010 <CU_add_test@plt>
   12ba4:	ldr	r3, [pc, #212]	; 12c80 <add_suites@@Base+0x22c>
   12ba8:	add	r3, pc, r3
   12bac:	ldrd	r2, [r3, #32]
   12bb0:	adds	r1, r2, #1
   12bb4:	str	r1, [fp, #-60]	; 0xffffffc4
   12bb8:	adc	r3, r3, #0
   12bbc:	str	r3, [fp, #-56]	; 0xffffffc8
   12bc0:	ldr	r3, [pc, #188]	; 12c84 <add_suites@@Base+0x230>
   12bc4:	add	r3, pc, r3
   12bc8:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   12bcc:	strd	r0, [r3, #32]
   12bd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12bd4:	ldr	r0, [r3]
   12bd8:	ldr	r3, [pc, #168]	; 12c88 <add_suites@@Base+0x234>
   12bdc:	ldr	r3, [r6, r3]
   12be0:	mov	r2, r3
   12be4:	ldr	r3, [pc, #160]	; 12c8c <add_suites@@Base+0x238>
   12be8:	add	r3, pc, r3
   12bec:	mov	r1, r3
   12bf0:	bl	11010 <CU_add_test@plt>
   12bf4:	ldr	r3, [pc, #148]	; 12c90 <add_suites@@Base+0x23c>
   12bf8:	add	r3, pc, r3
   12bfc:	ldrd	r2, [r3, #40]	; 0x28
   12c00:	adds	r1, r2, #1
   12c04:	str	r1, [fp, #-68]	; 0xffffffbc
   12c08:	adc	r3, r3, #0
   12c0c:	str	r3, [fp, #-64]	; 0xffffffc0
   12c10:	ldr	r3, [pc, #124]	; 12c94 <add_suites@@Base+0x240>
   12c14:	add	r3, pc, r3
   12c18:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   12c1c:	strd	r0, [r3, #40]	; 0x28
   12c20:	nop	{0}
   12c24:	sub	sp, fp, #24
   12c28:	ldrd	r4, [sp]
   12c2c:	ldr	r6, [sp, #8]
   12c30:	ldrd	r8, [sp, #12]
   12c34:	ldr	fp, [sp, #20]
   12c38:	add	sp, sp, #24
   12c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c40:	andeq	r4, r1, r0, lsl #11
   12c44:	strdeq	r4, [r1], -r8
   12c48:	andeq	r4, r1, r4, ror #17
   12c4c:	muleq	r0, r8, fp
   12c50:			; <UNDEFINED> instruction: 0x000148bc
   12c54:	andeq	r4, r1, r8, lsr #17
   12c58:	ldrdeq	r0, [r0], -r4
   12c5c:	andeq	r3, r0, r0, ror #22
   12c60:	andeq	r4, r1, r0, ror r8
   12c64:	andeq	r4, r1, r4, asr r8
   12c68:	andeq	r0, r0, ip, asr #1
   12c6c:	andeq	r3, r0, ip, lsr #22
   12c70:	andeq	r4, r1, r0, lsr #16
   12c74:	andeq	r4, r1, r4, lsl #16
   12c78:	strheq	r0, [r0], -r4
   12c7c:	strdeq	r3, [r0], -r8
   12c80:	ldrdeq	r4, [r1], -r0
   12c84:			; <UNDEFINED> instruction: 0x000147b4
   12c88:	strheq	r0, [r0], -ip
   12c8c:	andeq	r3, r0, r4, asr #21
   12c90:	andeq	r4, r1, r0, lsl #15
   12c94:	andeq	r4, r1, r4, ror #14

00012c98 <main@@Base>:
   12c98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12c9c:	strd	r6, [sp, #8]
   12ca0:	strd	r8, [sp, #16]
   12ca4:	str	fp, [sp, #24]
   12ca8:	str	lr, [sp, #28]
   12cac:	add	fp, sp, #28
   12cb0:	sub	sp, sp, #88	; 0x58
   12cb4:	ldr	r3, [pc, #736]	; 12f9c <main@@Base+0x304>
   12cb8:	add	r3, pc, r3
   12cbc:	ldrd	r2, [r3]
   12cc0:	adds	r0, r2, #1
   12cc4:	adc	r1, r3, #0
   12cc8:	ldr	r3, [pc, #720]	; 12fa0 <main@@Base+0x308>
   12ccc:	add	r3, pc, r3
   12cd0:	strd	r0, [r3]
   12cd4:	mov	r3, #1
   12cd8:	str	r3, [fp, #-32]	; 0xffffffe0
   12cdc:	mov	r3, #0
   12ce0:	str	r3, [fp, #-36]	; 0xffffffdc
   12ce4:	bl	10ec0 <CU_initialize_registry@plt>
   12ce8:	mov	r1, r0
   12cec:	ldr	r3, [pc, #688]	; 12fa4 <main@@Base+0x30c>
   12cf0:	add	r3, pc, r3
   12cf4:	ldrd	r2, [r3, #8]
   12cf8:	adds	r4, r2, #1
   12cfc:	adc	r5, r3, #0
   12d00:	ldr	r3, [pc, #672]	; 12fa8 <main@@Base+0x310>
   12d04:	add	r3, pc, r3
   12d08:	strd	r4, [r3, #8]
   12d0c:	cmp	r1, #0
   12d10:	bne	12f0c <main@@Base+0x274>
   12d14:	ldr	r3, [pc, #656]	; 12fac <main@@Base+0x314>
   12d18:	add	r3, pc, r3
   12d1c:	ldrd	r2, [r3, #16]
   12d20:	adds	r6, r2, #1
   12d24:	adc	r7, r3, #0
   12d28:	ldr	r3, [pc, #640]	; 12fb0 <main@@Base+0x318>
   12d2c:	add	r3, pc, r3
   12d30:	strd	r6, [r3, #16]
   12d34:	sub	r3, fp, #36	; 0x24
   12d38:	mov	r0, r3
   12d3c:	bl	12a54 <add_suites@@Base>
   12d40:	ldr	r3, [pc, #620]	; 12fb4 <main@@Base+0x31c>
   12d44:	add	r3, pc, r3
   12d48:	ldrd	r2, [r3, #24]
   12d4c:	adds	r8, r2, #1
   12d50:	adc	r9, r3, #0
   12d54:	ldr	r3, [pc, #604]	; 12fb8 <main@@Base+0x320>
   12d58:	add	r3, pc, r3
   12d5c:	strd	r8, [r3, #24]
   12d60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d64:	cmp	r3, #0
   12d68:	beq	12f08 <main@@Base+0x270>
   12d6c:	ldr	r3, [pc, #584]	; 12fbc <main@@Base+0x324>
   12d70:	add	r3, pc, r3
   12d74:	ldrd	r2, [r3, #32]
   12d78:	adds	r1, r2, #1
   12d7c:	str	r1, [fp, #-44]	; 0xffffffd4
   12d80:	adc	r3, r3, #0
   12d84:	str	r3, [fp, #-40]	; 0xffffffd8
   12d88:	ldr	r3, [pc, #560]	; 12fc0 <main@@Base+0x328>
   12d8c:	add	r3, pc, r3
   12d90:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   12d94:	strd	r0, [r3, #32]
   12d98:	mov	r0, #2
   12d9c:	bl	10ea8 <CU_basic_set_mode@plt>
   12da0:	ldr	r3, [pc, #540]	; 12fc4 <main@@Base+0x32c>
   12da4:	add	r3, pc, r3
   12da8:	ldrd	r2, [r3, #40]	; 0x28
   12dac:	adds	r1, r2, #1
   12db0:	str	r1, [fp, #-52]	; 0xffffffcc
   12db4:	adc	r3, r3, #0
   12db8:	str	r3, [fp, #-48]	; 0xffffffd0
   12dbc:	ldr	r3, [pc, #516]	; 12fc8 <main@@Base+0x330>
   12dc0:	add	r3, pc, r3
   12dc4:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   12dc8:	strd	r0, [r3, #40]	; 0x28
   12dcc:	bl	10f20 <CU_basic_run_tests@plt>
   12dd0:	ldr	r3, [pc, #500]	; 12fcc <main@@Base+0x334>
   12dd4:	add	r3, pc, r3
   12dd8:	ldrd	r2, [r3, #48]	; 0x30
   12ddc:	adds	r1, r2, #1
   12de0:	str	r1, [fp, #-60]	; 0xffffffc4
   12de4:	adc	r3, r3, #0
   12de8:	str	r3, [fp, #-56]	; 0xffffffc8
   12dec:	ldr	r3, [pc, #476]	; 12fd0 <main@@Base+0x338>
   12df0:	add	r3, pc, r3
   12df4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   12df8:	strd	r0, [r3, #48]	; 0x30
   12dfc:	mov	r0, #10
   12e00:	bl	11004 <putchar@plt>
   12e04:	ldr	r3, [pc, #456]	; 12fd4 <main@@Base+0x33c>
   12e08:	add	r3, pc, r3
   12e0c:	ldrd	r2, [r3, #56]	; 0x38
   12e10:	adds	r1, r2, #1
   12e14:	str	r1, [fp, #-68]	; 0xffffffbc
   12e18:	adc	r3, r3, #0
   12e1c:	str	r3, [fp, #-64]	; 0xffffffc0
   12e20:	ldr	r3, [pc, #432]	; 12fd8 <main@@Base+0x340>
   12e24:	add	r3, pc, r3
   12e28:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   12e2c:	strd	r0, [r3, #56]	; 0x38
   12e30:	bl	11064 <CU_get_failure_list@plt>
   12e34:	mov	r1, r0
   12e38:	ldr	r3, [pc, #412]	; 12fdc <main@@Base+0x344>
   12e3c:	add	r3, pc, r3
   12e40:	ldrd	r2, [r3, #64]	; 0x40
   12e44:	adds	r0, r2, #1
   12e48:	str	r0, [fp, #-76]	; 0xffffffb4
   12e4c:	adc	r3, r3, #0
   12e50:	str	r3, [fp, #-72]	; 0xffffffb8
   12e54:	ldr	r3, [pc, #388]	; 12fe0 <main@@Base+0x348>
   12e58:	add	r3, pc, r3
   12e5c:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   12e60:	strd	r4, [r3, #64]	; 0x40
   12e64:	mov	r0, r1
   12e68:	bl	10f2c <CU_basic_show_failures@plt>
   12e6c:	ldr	r3, [pc, #368]	; 12fe4 <main@@Base+0x34c>
   12e70:	add	r3, pc, r3
   12e74:	ldrd	r2, [r3, #72]	; 0x48
   12e78:	adds	r1, r2, #1
   12e7c:	str	r1, [fp, #-84]	; 0xffffffac
   12e80:	adc	r3, r3, #0
   12e84:	str	r3, [fp, #-80]	; 0xffffffb0
   12e88:	ldr	r3, [pc, #344]	; 12fe8 <main@@Base+0x350>
   12e8c:	add	r3, pc, r3
   12e90:	ldrd	r0, [fp, #-84]	; 0xffffffac
   12e94:	strd	r0, [r3, #72]	; 0x48
   12e98:	ldr	r3, [pc, #332]	; 12fec <main@@Base+0x354>
   12e9c:	add	r3, pc, r3
   12ea0:	mov	r0, r3
   12ea4:	bl	10f80 <puts@plt>
   12ea8:	ldr	r3, [pc, #320]	; 12ff0 <main@@Base+0x358>
   12eac:	add	r3, pc, r3
   12eb0:	ldrd	r2, [r3, #80]	; 0x50
   12eb4:	adds	r1, r2, #1
   12eb8:	str	r1, [fp, #-92]	; 0xffffffa4
   12ebc:	adc	r3, r3, #0
   12ec0:	str	r3, [fp, #-88]	; 0xffffffa8
   12ec4:	ldr	r3, [pc, #296]	; 12ff4 <main@@Base+0x35c>
   12ec8:	add	r3, pc, r3
   12ecc:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   12ed0:	strd	r0, [r3, #80]	; 0x50
   12ed4:	bl	10ee4 <CU_get_number_of_tests_failed@plt>
   12ed8:	str	r0, [fp, #-32]	; 0xffffffe0
   12edc:	ldr	r3, [pc, #276]	; 12ff8 <main@@Base+0x360>
   12ee0:	add	r3, pc, r3
   12ee4:	ldrd	r2, [r3, #88]	; 0x58
   12ee8:	adds	r1, r2, #1
   12eec:	str	r1, [fp, #-100]	; 0xffffff9c
   12ef0:	adc	r3, r3, #0
   12ef4:	str	r3, [fp, #-96]	; 0xffffffa0
   12ef8:	ldr	r3, [pc, #252]	; 12ffc <main@@Base+0x364>
   12efc:	add	r3, pc, r3
   12f00:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   12f04:	strd	r0, [r3, #88]	; 0x58
   12f08:	bl	10ef0 <CU_cleanup_registry@plt>
   12f0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12f10:	cmp	r3, #0
   12f14:	beq	12f4c <main@@Base+0x2b4>
   12f18:	ldr	r3, [pc, #224]	; 13000 <main@@Base+0x368>
   12f1c:	add	r3, pc, r3
   12f20:	ldrd	r2, [r3, #96]	; 0x60
   12f24:	adds	r1, r2, #1
   12f28:	str	r1, [fp, #-108]	; 0xffffff94
   12f2c:	adc	r3, r3, #0
   12f30:	str	r3, [fp, #-104]	; 0xffffff98
   12f34:	ldr	r3, [pc, #200]	; 13004 <main@@Base+0x36c>
   12f38:	add	r3, pc, r3
   12f3c:	ldrd	r0, [fp, #-108]	; 0xffffff94
   12f40:	strd	r0, [r3, #96]	; 0x60
   12f44:	mov	r3, #1
   12f48:	b	12f7c <main@@Base+0x2e4>
   12f4c:	ldr	r3, [pc, #180]	; 13008 <main@@Base+0x370>
   12f50:	add	r3, pc, r3
   12f54:	ldrd	r2, [r3, #104]	; 0x68
   12f58:	adds	r1, r2, #1
   12f5c:	str	r1, [fp, #-116]	; 0xffffff8c
   12f60:	adc	r3, r3, #0
   12f64:	str	r3, [fp, #-112]	; 0xffffff90
   12f68:	ldr	r3, [pc, #156]	; 1300c <main@@Base+0x374>
   12f6c:	add	r3, pc, r3
   12f70:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   12f74:	strd	r0, [r3, #104]	; 0x68
   12f78:	mov	r3, #0
   12f7c:	mov	r0, r3
   12f80:	sub	sp, fp, #28
   12f84:	ldrd	r4, [sp]
   12f88:	ldrd	r6, [sp, #8]
   12f8c:	ldrd	r8, [sp, #16]
   12f90:	ldr	fp, [sp, #24]
   12f94:	add	sp, sp, #28
   12f98:	pop	{pc}		; (ldr pc, [sp], #4)
   12f9c:	andeq	r4, r1, r0, asr r6
   12fa0:	andeq	r4, r1, ip, lsr r6
   12fa4:	andeq	r4, r1, r8, lsl r6
   12fa8:	andeq	r4, r1, r4, lsl #12
   12fac:	strdeq	r4, [r1], -r0
   12fb0:	ldrdeq	r4, [r1], -ip
   12fb4:	andeq	r4, r1, r4, asr #11
   12fb8:			; <UNDEFINED> instruction: 0x000145b0
   12fbc:	muleq	r1, r8, r5
   12fc0:	andeq	r4, r1, ip, ror r5
   12fc4:	andeq	r4, r1, r4, ror #10
   12fc8:	andeq	r4, r1, r8, asr #10
   12fcc:	andeq	r4, r1, r4, lsr r5
   12fd0:	andeq	r4, r1, r8, lsl r5
   12fd4:	andeq	r4, r1, r0, lsl #10
   12fd8:	andeq	r4, r1, r4, ror #9
   12fdc:	andeq	r4, r1, ip, asr #9
   12fe0:			; <UNDEFINED> instruction: 0x000144b0
   12fe4:	muleq	r1, r8, r4
   12fe8:	andeq	r4, r1, ip, ror r4
   12fec:	andeq	r3, r0, ip, lsr #16
   12ff0:	andeq	r4, r1, ip, asr r4
   12ff4:	andeq	r4, r1, r0, asr #8
   12ff8:	andeq	r4, r1, r8, lsr #8
   12ffc:	andeq	r4, r1, ip, lsl #8
   13000:	andeq	r4, r1, ip, ror #7
   13004:	ldrdeq	r4, [r1], -r0
   13008:			; <UNDEFINED> instruction: 0x000143b8
   1300c:	muleq	r1, ip, r3
   13010:	str	fp, [sp, #-8]!
   13014:	str	lr, [sp, #4]
   13018:	add	fp, sp, #4
   1301c:	ldr	r3, [pc, #24]	; 1303c <main@@Base+0x3a4>
   13020:	add	r3, pc, r3
   13024:	mov	r0, r3
   13028:	bl	15bbc <__gcov_sort_n_vals@@Base+0x4a0>
   1302c:	sub	sp, fp, #4
   13030:	ldr	fp, [sp]
   13034:	add	sp, sp, #4
   13038:	pop	{pc}		; (ldr pc, [sp], #4)
   1303c:	muleq	r1, r8, r1
   13040:	str	fp, [sp, #-8]!
   13044:	str	lr, [sp, #4]
   13048:	add	fp, sp, #4
   1304c:	bl	15b4c <__gcov_sort_n_vals@@Base+0x430>
   13050:	sub	sp, fp, #4
   13054:	ldr	fp, [sp]
   13058:	add	sp, sp, #4
   1305c:	pop	{pc}		; (ldr pc, [sp], #4)

00013060 <b64_get_encoded_buffer_size@@Base>:
   13060:	strd	r4, [sp, #-12]!
   13064:	str	fp, [sp, #8]
   13068:	add	fp, sp, #8
   1306c:	sub	sp, sp, #12
   13070:	str	r0, [fp, #-16]
   13074:	ldr	r3, [pc, #76]	; 130c8 <b64_get_encoded_buffer_size@@Base+0x68>
   13078:	add	r3, pc, r3
   1307c:	ldrd	r2, [r3]
   13080:	adds	r4, r2, #1
   13084:	adc	r5, r3, #0
   13088:	ldr	r3, [pc, #60]	; 130cc <b64_get_encoded_buffer_size@@Base+0x6c>
   1308c:	add	r3, pc, r3
   13090:	strd	r4, [r3]
   13094:	ldr	r3, [fp, #-16]
   13098:	add	r2, r3, #2
   1309c:	movw	r3, #43691	; 0xaaab
   130a0:	movt	r3, #43690	; 0xaaaa
   130a4:	umull	r2, r3, r3, r2
   130a8:	lsr	r3, r3, #1
   130ac:	lsl	r3, r3, #2
   130b0:	mov	r0, r3
   130b4:	sub	sp, fp, #8
   130b8:	ldrd	r4, [sp]
   130bc:	ldr	fp, [sp, #8]
   130c0:	add	sp, sp, #12
   130c4:	bx	lr
   130c8:	andeq	r4, r1, r8, ror #10
   130cc:	andeq	r4, r1, r4, asr r5

000130d0 <b64_encode@@Base>:
   130d0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   130d4:	strd	r6, [sp, #8]
   130d8:	strd	r8, [sp, #16]
   130dc:	str	fp, [sp, #24]
   130e0:	add	fp, sp, #24
   130e4:	sub	sp, sp, #92	; 0x5c
   130e8:	str	r0, [fp, #-56]	; 0xffffffc8
   130ec:	str	r1, [fp, #-60]	; 0xffffffc4
   130f0:	str	r2, [fp, #-64]	; 0xffffffc0
   130f4:	ldr	r3, [pc, #756]	; 133f0 <b64_encode@@Base+0x320>
   130f8:	add	r3, pc, r3
   130fc:	ldrd	r2, [r3]
   13100:	adds	r4, r2, #1
   13104:	adc	r5, r3, #0
   13108:	ldr	r3, [pc, #740]	; 133f4 <b64_encode@@Base+0x324>
   1310c:	add	r3, pc, r3
   13110:	strd	r4, [r3]
   13114:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13118:	str	r3, [fp, #-32]	; 0xffffffe0
   1311c:	b	133c4 <b64_encode@@Base+0x2f4>
   13120:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13124:	cmp	r3, #3
   13128:	movcc	r3, r3
   1312c:	movcs	r3, #3
   13130:	str	r3, [fp, #-44]	; 0xffffffd4
   13134:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13138:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1313c:	sub	r3, r3, r2
   13140:	str	r3, [fp, #-32]	; 0xffffffe0
   13144:	mov	r3, #0
   13148:	str	r3, [fp, #-40]	; 0xffffffd8
   1314c:	mov	r3, #0
   13150:	str	r3, [fp, #-36]	; 0xffffffdc
   13154:	ldr	r3, [pc, #668]	; 133f8 <b64_encode@@Base+0x328>
   13158:	add	r3, pc, r3
   1315c:	ldrd	r2, [r3, #8]
   13160:	adds	r8, r2, #1
   13164:	adc	r9, r3, #0
   13168:	ldr	r3, [pc, #652]	; 133fc <b64_encode@@Base+0x32c>
   1316c:	add	r3, pc, r3
   13170:	strd	r8, [r3, #8]
   13174:	b	131c4 <b64_encode@@Base+0xf4>
   13178:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1317c:	lsl	r1, r3, #8
   13180:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13184:	add	r3, r2, #1
   13188:	str	r3, [fp, #-56]	; 0xffffffc8
   1318c:	ldrb	r3, [r2]
   13190:	orr	r3, r1, r3
   13194:	str	r3, [fp, #-40]	; 0xffffffd8
   13198:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1319c:	add	r3, r3, #1
   131a0:	str	r3, [fp, #-36]	; 0xffffffdc
   131a4:	ldr	r3, [pc, #596]	; 13400 <b64_encode@@Base+0x330>
   131a8:	add	r3, pc, r3
   131ac:	ldrd	r2, [r3, #16]
   131b0:	adds	r6, r2, #1
   131b4:	adc	r7, r3, #0
   131b8:	ldr	r3, [pc, #580]	; 13404 <b64_encode@@Base+0x334>
   131bc:	add	r3, pc, r3
   131c0:	strd	r6, [r3, #16]
   131c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   131c8:	cmp	r3, #2
   131cc:	ble	13178 <b64_encode@@Base+0xa8>
   131d0:	mov	r3, #4
   131d4:	str	r3, [fp, #-36]	; 0xffffffdc
   131d8:	b	133a0 <b64_encode@@Base+0x2d0>
   131dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   131e0:	and	r3, r3, #63	; 0x3f
   131e4:	str	r3, [fp, #-48]	; 0xffffffd0
   131e8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   131ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   131f0:	cmp	r2, r3
   131f4:	bgt	13350 <b64_encode@@Base+0x280>
   131f8:	ldr	r3, [pc, #520]	; 13408 <b64_encode@@Base+0x338>
   131fc:	add	r3, pc, r3
   13200:	ldrd	r2, [r3, #24]
   13204:	adds	r1, r2, #1
   13208:	str	r1, [fp, #-76]	; 0xffffffb4
   1320c:	adc	r3, r3, #0
   13210:	str	r3, [fp, #-72]	; 0xffffffb8
   13214:	ldr	r3, [pc, #496]	; 1340c <b64_encode@@Base+0x33c>
   13218:	add	r3, pc, r3
   1321c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   13220:	strd	r0, [r3, #24]
   13224:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13228:	cmp	r3, #25
   1322c:	bgt	13270 <b64_encode@@Base+0x1a0>
   13230:	ldr	r3, [pc, #472]	; 13410 <b64_encode@@Base+0x340>
   13234:	add	r3, pc, r3
   13238:	ldrd	r2, [r3, #40]	; 0x28
   1323c:	adds	r1, r2, #1
   13240:	str	r1, [fp, #-92]	; 0xffffffa4
   13244:	adc	r3, r3, #0
   13248:	str	r3, [fp, #-88]	; 0xffffffa8
   1324c:	ldr	r3, [pc, #448]	; 13414 <b64_encode@@Base+0x344>
   13250:	add	r3, pc, r3
   13254:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   13258:	strd	r0, [r3, #40]	; 0x28
   1325c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13260:	uxtb	r3, r3
   13264:	add	r3, r3, #65	; 0x41
   13268:	uxtb	r1, r3
   1326c:	b	13380 <b64_encode@@Base+0x2b0>
   13270:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13274:	cmp	r3, #51	; 0x33
   13278:	bgt	132bc <b64_encode@@Base+0x1ec>
   1327c:	ldr	r3, [pc, #404]	; 13418 <b64_encode@@Base+0x348>
   13280:	add	r3, pc, r3
   13284:	ldrd	r2, [r3, #48]	; 0x30
   13288:	adds	r1, r2, #1
   1328c:	str	r1, [fp, #-100]	; 0xffffff9c
   13290:	adc	r3, r3, #0
   13294:	str	r3, [fp, #-96]	; 0xffffffa0
   13298:	ldr	r3, [pc, #380]	; 1341c <b64_encode@@Base+0x34c>
   1329c:	add	r3, pc, r3
   132a0:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   132a4:	strd	r0, [r3, #48]	; 0x30
   132a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   132ac:	uxtb	r3, r3
   132b0:	add	r3, r3, #71	; 0x47
   132b4:	uxtb	r1, r3
   132b8:	b	13380 <b64_encode@@Base+0x2b0>
   132bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   132c0:	cmp	r3, #61	; 0x3d
   132c4:	bgt	13308 <b64_encode@@Base+0x238>
   132c8:	ldr	r3, [pc, #336]	; 13420 <b64_encode@@Base+0x350>
   132cc:	add	r3, pc, r3
   132d0:	ldrd	r2, [r3, #56]	; 0x38
   132d4:	adds	r1, r2, #1
   132d8:	str	r1, [fp, #-108]	; 0xffffff94
   132dc:	adc	r3, r3, #0
   132e0:	str	r3, [fp, #-104]	; 0xffffff98
   132e4:	ldr	r3, [pc, #312]	; 13424 <b64_encode@@Base+0x354>
   132e8:	add	r3, pc, r3
   132ec:	ldrd	r0, [fp, #-108]	; 0xffffff94
   132f0:	strd	r0, [r3, #56]	; 0x38
   132f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   132f8:	uxtb	r3, r3
   132fc:	sub	r3, r3, #4
   13300:	uxtb	r1, r3
   13304:	b	13380 <b64_encode@@Base+0x2b0>
   13308:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1330c:	cmp	r3, #62	; 0x3e
   13310:	bne	13348 <b64_encode@@Base+0x278>
   13314:	ldr	r3, [pc, #268]	; 13428 <b64_encode@@Base+0x358>
   13318:	add	r3, pc, r3
   1331c:	ldrd	r2, [r3, #64]	; 0x40
   13320:	adds	r1, r2, #1
   13324:	str	r1, [fp, #-116]	; 0xffffff8c
   13328:	adc	r3, r3, #0
   1332c:	str	r3, [fp, #-112]	; 0xffffff90
   13330:	ldr	r3, [pc, #244]	; 1342c <b64_encode@@Base+0x35c>
   13334:	add	r3, pc, r3
   13338:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   1333c:	strd	r0, [r3, #64]	; 0x40
   13340:	mov	r1, #43	; 0x2b
   13344:	b	13380 <b64_encode@@Base+0x2b0>
   13348:	mov	r1, #47	; 0x2f
   1334c:	b	13380 <b64_encode@@Base+0x2b0>
   13350:	ldr	r3, [pc, #216]	; 13430 <b64_encode@@Base+0x360>
   13354:	add	r3, pc, r3
   13358:	ldrd	r2, [r3, #32]
   1335c:	adds	r1, r2, #1
   13360:	str	r1, [fp, #-84]	; 0xffffffac
   13364:	adc	r3, r3, #0
   13368:	str	r3, [fp, #-80]	; 0xffffffb0
   1336c:	ldr	r3, [pc, #192]	; 13434 <b64_encode@@Base+0x364>
   13370:	add	r3, pc, r3
   13374:	ldrd	r0, [fp, #-84]	; 0xffffffac
   13378:	strd	r0, [r3, #32]
   1337c:	mov	r1, #61	; 0x3d
   13380:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13384:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13388:	add	r2, r3, r2
   1338c:	mov	r3, r1
   13390:	strb	r3, [r2]
   13394:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13398:	lsr	r3, r3, #6
   1339c:	str	r3, [fp, #-40]	; 0xffffffd8
   133a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   133a4:	sub	r3, r3, #1
   133a8:	str	r3, [fp, #-36]	; 0xffffffdc
   133ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   133b0:	cmp	r3, #0
   133b4:	bge	131dc <b64_encode@@Base+0x10c>
   133b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   133bc:	add	r3, r3, #4
   133c0:	str	r3, [fp, #-64]	; 0xffffffc0
   133c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   133c8:	cmp	r3, #0
   133cc:	bne	13120 <b64_encode@@Base+0x50>
   133d0:	nop	{0}
   133d4:	sub	sp, fp, #24
   133d8:	ldrd	r4, [sp]
   133dc:	ldrd	r6, [sp, #8]
   133e0:	ldrd	r8, [sp, #16]
   133e4:	ldr	fp, [sp, #24]
   133e8:	add	sp, sp, #28
   133ec:	bx	lr
   133f0:	andeq	r4, r1, r0, lsr #9
   133f4:	andeq	r4, r1, ip, lsl #9
   133f8:	andeq	r4, r1, r0, asr #8
   133fc:	andeq	r4, r1, ip, lsr #8
   13400:	strdeq	r4, [r1], -r0
   13404:	ldrdeq	r4, [r1], -ip
   13408:	muleq	r1, ip, r3
   1340c:	andeq	r4, r1, r0, lsl #7
   13410:	andeq	r4, r1, r4, ror #6
   13414:	andeq	r4, r1, r8, asr #6
   13418:	andeq	r4, r1, r8, lsl r3
   1341c:	strdeq	r4, [r1], -ip
   13420:	andeq	r4, r1, ip, asr #5
   13424:			; <UNDEFINED> instruction: 0x000142b0
   13428:	andeq	r4, r1, r0, lsl #5
   1342c:	andeq	r4, r1, r4, ror #4
   13430:	andeq	r4, r1, r4, asr #4
   13434:	andeq	r4, r1, r8, lsr #4
   13438:	str	fp, [sp, #-8]!
   1343c:	str	lr, [sp, #4]
   13440:	add	fp, sp, #4
   13444:	ldr	r3, [pc, #24]	; 13464 <b64_encode@@Base+0x394>
   13448:	add	r3, pc, r3
   1344c:	mov	r0, r3
   13450:	bl	15bbc <__gcov_sort_n_vals@@Base+0x4a0>
   13454:	sub	sp, fp, #4
   13458:	ldr	fp, [sp]
   1345c:	add	sp, sp, #4
   13460:	pop	{pc}		; (ldr pc, [sp], #4)
   13464:	andeq	r3, r1, r4, ror #27
   13468:	str	fp, [sp, #-8]!
   1346c:	str	lr, [sp, #4]
   13470:	add	fp, sp, #4
   13474:	bl	15b4c <__gcov_sort_n_vals@@Base+0x430>
   13478:	sub	sp, fp, #4
   1347c:	ldr	fp, [sp]
   13480:	add	sp, sp, #4
   13484:	pop	{pc}		; (ldr pc, [sp], #4)
   13488:	strd	r4, [sp, #-12]!
   1348c:	str	fp, [sp, #8]
   13490:	add	fp, sp, #8
   13494:	sub	sp, sp, #12
   13498:	str	r0, [fp, #-16]
   1349c:	str	r1, [fp, #-20]	; 0xffffffec
   134a0:	ldr	r3, [pc, #244]	; 1359c <b64_encode@@Base+0x4cc>
   134a4:	add	r3, pc, r3
   134a8:	ldrd	r2, [r3]
   134ac:	adds	r4, r2, #1
   134b0:	adc	r5, r3, #0
   134b4:	ldr	r3, [pc, #228]	; 135a0 <b64_encode@@Base+0x4d0>
   134b8:	add	r3, pc, r3
   134bc:	strd	r4, [r3]
   134c0:	ldr	r3, [fp, #-16]
   134c4:	ldrb	r3, [r3]
   134c8:	lsl	r3, r3, #2
   134cc:	sxtb	r2, r3
   134d0:	ldr	r3, [fp, #-16]
   134d4:	add	r3, r3, #1
   134d8:	ldrb	r3, [r3]
   134dc:	lsr	r3, r3, #4
   134e0:	uxtb	r3, r3
   134e4:	sxtb	r3, r3
   134e8:	orr	r3, r2, r3
   134ec:	sxtb	r3, r3
   134f0:	uxtb	r2, r3
   134f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134f8:	strb	r2, [r3]
   134fc:	ldr	r3, [fp, #-16]
   13500:	add	r3, r3, #1
   13504:	ldrb	r3, [r3]
   13508:	lsl	r3, r3, #4
   1350c:	sxtb	r2, r3
   13510:	ldr	r3, [fp, #-16]
   13514:	add	r3, r3, #2
   13518:	ldrb	r3, [r3]
   1351c:	lsr	r3, r3, #2
   13520:	uxtb	r3, r3
   13524:	sxtb	r3, r3
   13528:	orr	r3, r2, r3
   1352c:	sxtb	r2, r3
   13530:	ldr	r3, [fp, #-20]	; 0xffffffec
   13534:	add	r3, r3, #1
   13538:	uxtb	r2, r2
   1353c:	strb	r2, [r3]
   13540:	ldr	r3, [fp, #-16]
   13544:	add	r3, r3, #2
   13548:	ldrb	r3, [r3]
   1354c:	lsl	r3, r3, #6
   13550:	sxtb	r3, r3
   13554:	bic	r3, r3, #63	; 0x3f
   13558:	sxtb	r2, r3
   1355c:	ldr	r3, [fp, #-16]
   13560:	add	r3, r3, #3
   13564:	ldrb	r3, [r3]
   13568:	sxtb	r3, r3
   1356c:	orr	r3, r2, r3
   13570:	sxtb	r2, r3
   13574:	ldr	r3, [fp, #-20]	; 0xffffffec
   13578:	add	r3, r3, #2
   1357c:	uxtb	r2, r2
   13580:	strb	r2, [r3]
   13584:	nop	{0}
   13588:	sub	sp, fp, #8
   1358c:	ldrd	r4, [sp]
   13590:	ldr	fp, [sp, #8]
   13594:	add	sp, sp, #12
   13598:	bx	lr
   1359c:	andeq	r4, r1, ip, asr #3
   135a0:			; <UNDEFINED> instruction: 0x000141b8

000135a4 <b64_get_decoded_buffer_size@@Base>:
   135a4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   135a8:	strd	r6, [sp, #8]
   135ac:	strd	r8, [sp, #16]
   135b0:	str	fp, [sp, #24]
   135b4:	add	fp, sp, #24
   135b8:	sub	sp, sp, #20
   135bc:	str	r0, [fp, #-40]	; 0xffffffd8
   135c0:	ldr	r3, [pc, #184]	; 13680 <b64_get_decoded_buffer_size@@Base+0xdc>
   135c4:	add	r3, pc, r3
   135c8:	ldrd	r2, [r3]
   135cc:	adds	r8, r2, #1
   135d0:	adc	r9, r3, #0
   135d4:	ldr	r3, [pc, #168]	; 13684 <b64_get_decoded_buffer_size@@Base+0xe0>
   135d8:	add	r3, pc, r3
   135dc:	strd	r8, [r3]
   135e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   135e4:	cmp	r3, #0
   135e8:	beq	1361c <b64_get_decoded_buffer_size@@Base+0x78>
   135ec:	ldr	r3, [pc, #148]	; 13688 <b64_get_decoded_buffer_size@@Base+0xe4>
   135f0:	add	r3, pc, r3
   135f4:	ldrd	r2, [r3, #8]
   135f8:	adds	r6, r2, #1
   135fc:	adc	r7, r3, #0
   13600:	ldr	r3, [pc, #132]	; 1368c <b64_get_decoded_buffer_size@@Base+0xe8>
   13604:	add	r3, pc, r3
   13608:	strd	r6, [r3, #8]
   1360c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13610:	lsr	r3, r3, #2
   13614:	cmp	r3, #0
   13618:	bne	13624 <b64_get_decoded_buffer_size@@Base+0x80>
   1361c:	mov	r3, #0
   13620:	b	13660 <b64_get_decoded_buffer_size@@Base+0xbc>
   13624:	ldr	r3, [pc, #100]	; 13690 <b64_get_decoded_buffer_size@@Base+0xec>
   13628:	add	r3, pc, r3
   1362c:	ldrd	r2, [r3, #16]
   13630:	adds	r4, r2, #1
   13634:	adc	r5, r3, #0
   13638:	ldr	r3, [pc, #84]	; 13694 <b64_get_decoded_buffer_size@@Base+0xf0>
   1363c:	add	r3, pc, r3
   13640:	strd	r4, [r3, #16]
   13644:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13648:	lsr	r2, r3, #2
   1364c:	mov	r3, r2
   13650:	lsl	r3, r3, #1
   13654:	add	r3, r3, r2
   13658:	str	r3, [fp, #-32]	; 0xffffffe0
   1365c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13660:	mov	r0, r3
   13664:	sub	sp, fp, #24
   13668:	ldrd	r4, [sp]
   1366c:	ldrd	r6, [sp, #8]
   13670:	ldrd	r8, [sp, #16]
   13674:	ldr	fp, [sp, #24]
   13678:	add	sp, sp, #28
   1367c:	bx	lr
   13680:	muleq	r1, r4, r0
   13684:	andeq	r4, r1, r0, lsl #1
   13688:	andeq	r4, r1, r8, rrx
   1368c:	andeq	r4, r1, r4, asr r0
   13690:	andeq	r4, r1, r0, lsr r0
   13694:	andeq	r4, r1, ip, lsl r0

00013698 <b64_decode@@Base>:
   13698:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1369c:	strd	r6, [sp, #8]
   136a0:	strd	r8, [sp, #16]
   136a4:	str	fp, [sp, #24]
   136a8:	str	lr, [sp, #28]
   136ac:	add	fp, sp, #28
   136b0:	sub	sp, sp, #136	; 0x88
   136b4:	str	r0, [fp, #-64]	; 0xffffffc0
   136b8:	str	r1, [fp, #-68]	; 0xffffffbc
   136bc:	str	r2, [fp, #-72]	; 0xffffffb8
   136c0:	ldr	r3, [pc, #1040]	; 13ad8 <b64_decode@@Base+0x440>
   136c4:	add	r3, pc, r3
   136c8:	ldrd	r2, [r3]
   136cc:	adds	r4, r2, #1
   136d0:	adc	r5, r3, #0
   136d4:	ldr	r3, [pc, #1024]	; 13adc <b64_decode@@Base+0x444>
   136d8:	add	r3, pc, r3
   136dc:	strd	r4, [r3]
   136e0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   136e4:	str	r3, [fp, #-36]	; 0xffffffdc
   136e8:	mov	r3, #0
   136ec:	str	r3, [fp, #-48]	; 0xffffffd0
   136f0:	b	13a9c <b64_decode@@Base+0x404>
   136f4:	mov	r3, #0
   136f8:	str	r3, [fp, #-44]	; 0xffffffd4
   136fc:	mov	r3, #0
   13700:	str	r3, [fp, #-40]	; 0xffffffd8
   13704:	ldr	r3, [pc, #980]	; 13ae0 <b64_decode@@Base+0x448>
   13708:	add	r3, pc, r3
   1370c:	ldrd	r2, [r3, #8]
   13710:	adds	r6, r2, #1
   13714:	adc	r7, r3, #0
   13718:	ldr	r3, [pc, #964]	; 13ae4 <b64_decode@@Base+0x44c>
   1371c:	add	r3, pc, r3
   13720:	strd	r6, [r3, #8]
   13724:	b	139cc <b64_decode@@Base+0x334>
   13728:	mov	r3, #0
   1372c:	strb	r3, [fp, #-29]	; 0xffffffe3
   13730:	ldr	r3, [pc, #944]	; 13ae8 <b64_decode@@Base+0x450>
   13734:	add	r3, pc, r3
   13738:	ldrd	r2, [r3, #16]
   1373c:	adds	r8, r2, #1
   13740:	adc	r9, r3, #0
   13744:	ldr	r3, [pc, #928]	; 13aec <b64_decode@@Base+0x454>
   13748:	add	r3, pc, r3
   1374c:	strd	r8, [r3, #16]
   13750:	b	13888 <b64_decode@@Base+0x1f0>
   13754:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13758:	add	r3, r2, #1
   1375c:	str	r3, [fp, #-48]	; 0xffffffd0
   13760:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13764:	add	r3, r3, r2
   13768:	ldrb	r3, [r3]
   1376c:	strb	r3, [fp, #-29]	; 0xffffffe3
   13770:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13774:	sub	r3, r3, #43	; 0x2b
   13778:	str	r3, [fp, #-52]	; 0xffffffcc
   1377c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13780:	cmp	r3, #79	; 0x4f
   13784:	bhi	137cc <b64_decode@@Base+0x134>
   13788:	ldr	r3, [pc, #864]	; 13af0 <b64_decode@@Base+0x458>
   1378c:	add	r3, pc, r3
   13790:	ldrd	r2, [r3, #24]
   13794:	adds	r1, r2, #1
   13798:	str	r1, [fp, #-84]	; 0xffffffac
   1379c:	adc	r3, r3, #0
   137a0:	str	r3, [fp, #-80]	; 0xffffffb0
   137a4:	ldr	r3, [pc, #840]	; 13af4 <b64_decode@@Base+0x45c>
   137a8:	add	r3, pc, r3
   137ac:	ldrd	r0, [fp, #-84]	; 0xffffffac
   137b0:	strd	r0, [r3, #24]
   137b4:	ldr	r2, [pc, #828]	; 13af8 <b64_decode@@Base+0x460>
   137b8:	add	r2, pc, r2
   137bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   137c0:	add	r3, r2, r3
   137c4:	ldrb	r3, [r3]
   137c8:	b	137fc <b64_decode@@Base+0x164>
   137cc:	ldr	r3, [pc, #808]	; 13afc <b64_decode@@Base+0x464>
   137d0:	add	r3, pc, r3
   137d4:	ldrd	r2, [r3, #32]
   137d8:	adds	r1, r2, #1
   137dc:	str	r1, [fp, #-92]	; 0xffffffa4
   137e0:	adc	r3, r3, #0
   137e4:	str	r3, [fp, #-88]	; 0xffffffa8
   137e8:	ldr	r3, [pc, #784]	; 13b00 <b64_decode@@Base+0x468>
   137ec:	add	r3, pc, r3
   137f0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   137f4:	strd	r0, [r3, #32]
   137f8:	mov	r3, #0
   137fc:	strb	r3, [fp, #-29]	; 0xffffffe3
   13800:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13804:	cmp	r3, #0
   13808:	beq	13888 <b64_decode@@Base+0x1f0>
   1380c:	ldr	r3, [pc, #752]	; 13b04 <b64_decode@@Base+0x46c>
   13810:	add	r3, pc, r3
   13814:	ldrd	r2, [r3, #40]	; 0x28
   13818:	adds	r1, r2, #1
   1381c:	str	r1, [fp, #-100]	; 0xffffff9c
   13820:	adc	r3, r3, #0
   13824:	str	r3, [fp, #-96]	; 0xffffffa0
   13828:	ldr	r3, [pc, #728]	; 13b08 <b64_decode@@Base+0x470>
   1382c:	add	r3, pc, r3
   13830:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   13834:	strd	r0, [r3, #40]	; 0x28
   13838:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1383c:	cmp	r3, #36	; 0x24
   13840:	beq	13880 <b64_decode@@Base+0x1e8>
   13844:	ldr	r3, [pc, #704]	; 13b0c <b64_decode@@Base+0x474>
   13848:	add	r3, pc, r3
   1384c:	ldrd	r2, [r3, #48]	; 0x30
   13850:	adds	r1, r2, #1
   13854:	str	r1, [fp, #-108]	; 0xffffff94
   13858:	adc	r3, r3, #0
   1385c:	str	r3, [fp, #-104]	; 0xffffff98
   13860:	ldr	r3, [pc, #680]	; 13b10 <b64_decode@@Base+0x478>
   13864:	add	r3, pc, r3
   13868:	ldrd	r0, [fp, #-108]	; 0xffffff94
   1386c:	strd	r0, [r3, #48]	; 0x30
   13870:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13874:	sub	r3, r3, #61	; 0x3d
   13878:	uxtb	r3, r3
   1387c:	b	13884 <b64_decode@@Base+0x1ec>
   13880:	mov	r3, #0
   13884:	strb	r3, [fp, #-29]	; 0xffffffe3
   13888:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1388c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13890:	cmp	r2, r3
   13894:	bcs	138d0 <b64_decode@@Base+0x238>
   13898:	ldr	r3, [pc, #628]	; 13b14 <b64_decode@@Base+0x47c>
   1389c:	add	r3, pc, r3
   138a0:	ldrd	r2, [r3, #56]	; 0x38
   138a4:	adds	r1, r2, #1
   138a8:	str	r1, [fp, #-116]	; 0xffffff8c
   138ac:	adc	r3, r3, #0
   138b0:	str	r3, [fp, #-112]	; 0xffffff90
   138b4:	ldr	r3, [pc, #604]	; 13b18 <b64_decode@@Base+0x480>
   138b8:	add	r3, pc, r3
   138bc:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   138c0:	strd	r0, [r3, #56]	; 0x38
   138c4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   138c8:	cmp	r3, #0
   138cc:	beq	13754 <b64_decode@@Base+0xbc>
   138d0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   138d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   138d8:	cmp	r2, r3
   138dc:	bcc	13918 <b64_decode@@Base+0x280>
   138e0:	ldr	r3, [pc, #564]	; 13b1c <b64_decode@@Base+0x484>
   138e4:	add	r3, pc, r3
   138e8:	ldrd	r2, [r3, #64]	; 0x40
   138ec:	adds	r1, r2, #1
   138f0:	str	r1, [fp, #-124]	; 0xffffff84
   138f4:	adc	r3, r3, #0
   138f8:	str	r3, [fp, #-120]	; 0xffffff88
   138fc:	ldr	r3, [pc, #540]	; 13b20 <b64_decode@@Base+0x488>
   13900:	add	r3, pc, r3
   13904:	ldrd	r0, [fp, #-124]	; 0xffffff84
   13908:	strd	r0, [r3, #64]	; 0x40
   1390c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13910:	cmp	r3, #0
   13914:	beq	13980 <b64_decode@@Base+0x2e8>
   13918:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1391c:	add	r3, r3, #1
   13920:	str	r3, [fp, #-44]	; 0xffffffd4
   13924:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13928:	cmp	r3, #0
   1392c:	beq	139c0 <b64_decode@@Base+0x328>
   13930:	ldr	r3, [pc, #492]	; 13b24 <b64_decode@@Base+0x48c>
   13934:	add	r3, pc, r3
   13938:	ldrd	r2, [r3, #80]	; 0x50
   1393c:	adds	r1, r2, #1
   13940:	str	r1, [fp, #-140]	; 0xffffff74
   13944:	adc	r3, r3, #0
   13948:	str	r3, [fp, #-136]	; 0xffffff78
   1394c:	ldr	r3, [pc, #468]	; 13b28 <b64_decode@@Base+0x490>
   13950:	add	r3, pc, r3
   13954:	ldrd	r0, [fp, #-140]	; 0xffffff74
   13958:	strd	r0, [r3, #80]	; 0x50
   1395c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13960:	sub	r3, r3, #1
   13964:	uxtb	r1, r3
   13968:	sub	r2, fp, #56	; 0x38
   1396c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13970:	add	r2, r2, r3
   13974:	mov	r3, r1
   13978:	strb	r3, [r2]
   1397c:	b	139c0 <b64_decode@@Base+0x328>
   13980:	ldr	r3, [pc, #420]	; 13b2c <b64_decode@@Base+0x494>
   13984:	add	r3, pc, r3
   13988:	ldrd	r2, [r3, #72]	; 0x48
   1398c:	adds	r1, r2, #1
   13990:	str	r1, [fp, #-132]	; 0xffffff7c
   13994:	adc	r3, r3, #0
   13998:	str	r3, [fp, #-128]	; 0xffffff80
   1399c:	ldr	r3, [pc, #396]	; 13b30 <b64_decode@@Base+0x498>
   139a0:	add	r3, pc, r3
   139a4:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   139a8:	strd	r0, [r3, #72]	; 0x48
   139ac:	sub	r2, fp, #56	; 0x38
   139b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139b4:	add	r2, r2, r3
   139b8:	mov	r3, #0
   139bc:	strb	r3, [r2]
   139c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139c4:	add	r3, r3, #1
   139c8:	str	r3, [fp, #-40]	; 0xffffffd8
   139cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139d0:	cmp	r3, #3
   139d4:	bgt	13a14 <b64_decode@@Base+0x37c>
   139d8:	ldr	r3, [pc, #340]	; 13b34 <b64_decode@@Base+0x49c>
   139dc:	add	r3, pc, r3
   139e0:	ldrd	r2, [r3, #88]	; 0x58
   139e4:	adds	r1, r2, #1
   139e8:	str	r1, [fp, #-148]	; 0xffffff6c
   139ec:	adc	r3, r3, #0
   139f0:	str	r3, [fp, #-144]	; 0xffffff70
   139f4:	ldr	r3, [pc, #316]	; 13b38 <b64_decode@@Base+0x4a0>
   139f8:	add	r3, pc, r3
   139fc:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   13a00:	strd	r0, [r3, #88]	; 0x58
   13a04:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13a08:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13a0c:	cmp	r2, r3
   13a10:	bcc	13728 <b64_decode@@Base+0x90>
   13a14:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13a18:	cmp	r3, #0
   13a1c:	beq	13a9c <b64_decode@@Base+0x404>
   13a20:	ldr	r3, [pc, #276]	; 13b3c <b64_decode@@Base+0x4a4>
   13a24:	add	r3, pc, r3
   13a28:	ldrd	r2, [r3, #96]	; 0x60
   13a2c:	adds	r1, r2, #1
   13a30:	str	r1, [fp, #-156]	; 0xffffff64
   13a34:	adc	r3, r3, #0
   13a38:	str	r3, [fp, #-152]	; 0xffffff68
   13a3c:	ldr	r3, [pc, #252]	; 13b40 <b64_decode@@Base+0x4a8>
   13a40:	add	r3, pc, r3
   13a44:	ldrd	r0, [fp, #-156]	; 0xffffff64
   13a48:	strd	r0, [r3, #96]	; 0x60
   13a4c:	sub	r3, fp, #56	; 0x38
   13a50:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13a54:	mov	r0, r3
   13a58:	bl	13488 <b64_encode@@Base+0x3b8>
   13a5c:	ldr	r3, [pc, #224]	; 13b44 <b64_decode@@Base+0x4ac>
   13a60:	add	r3, pc, r3
   13a64:	ldrd	r2, [r3, #104]	; 0x68
   13a68:	adds	r1, r2, #1
   13a6c:	str	r1, [fp, #-164]	; 0xffffff5c
   13a70:	adc	r3, r3, #0
   13a74:	str	r3, [fp, #-160]	; 0xffffff60
   13a78:	ldr	r3, [pc, #200]	; 13b48 <b64_decode@@Base+0x4b0>
   13a7c:	add	r3, pc, r3
   13a80:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   13a84:	strd	r0, [r3, #104]	; 0x68
   13a88:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13a8c:	sub	r2, r3, #1
   13a90:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13a94:	add	r3, r3, r2
   13a98:	str	r3, [fp, #-36]	; 0xffffffdc
   13a9c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13aa0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13aa4:	cmp	r2, r3
   13aa8:	bcc	136f4 <b64_decode@@Base+0x5c>
   13aac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13ab0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13ab4:	sub	r3, r2, r3
   13ab8:	mov	r0, r3
   13abc:	sub	sp, fp, #28
   13ac0:	ldrd	r4, [sp]
   13ac4:	ldrd	r6, [sp, #8]
   13ac8:	ldrd	r8, [sp, #16]
   13acc:	ldr	fp, [sp, #24]
   13ad0:	add	sp, sp, #28
   13ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad8:	andeq	r3, r1, r4, lsr #30
   13adc:	andeq	r3, r1, r0, lsl pc
   13ae0:	andeq	r3, r1, r0, ror #29
   13ae4:	andeq	r3, r1, ip, asr #29
   13ae8:			; <UNDEFINED> instruction: 0x00013eb4
   13aec:	andeq	r3, r1, r0, lsr #29
   13af0:	andeq	r3, r1, ip, asr lr
   13af4:	andeq	r3, r1, r0, asr #28
   13af8:	andeq	r3, r0, r8
   13afc:	andeq	r3, r1, r8, lsl lr
   13b00:	strdeq	r3, [r1], -ip
   13b04:	ldrdeq	r3, [r1], -r8
   13b08:			; <UNDEFINED> instruction: 0x00013dbc
   13b0c:	andeq	r3, r1, r0, lsr #27
   13b10:	andeq	r3, r1, r4, lsl #27
   13b14:	andeq	r3, r1, ip, asr #26
   13b18:	andeq	r3, r1, r0, lsr sp
   13b1c:	andeq	r3, r1, r4, lsl #26
   13b20:	andeq	r3, r1, r8, ror #25
   13b24:			; <UNDEFINED> instruction: 0x00013cb4
   13b28:	muleq	r1, r8, ip
   13b2c:	andeq	r3, r1, r4, ror #24
   13b30:	andeq	r3, r1, r8, asr #24
   13b34:	andeq	r3, r1, ip, lsl #24
   13b38:	strdeq	r3, [r1], -r0
   13b3c:	andeq	r3, r1, r4, asr #23
   13b40:	andeq	r3, r1, r8, lsr #23
   13b44:	andeq	r3, r1, r8, lsl #23
   13b48:	andeq	r3, r1, ip, ror #22
   13b4c:	str	fp, [sp, #-8]!
   13b50:	str	lr, [sp, #4]
   13b54:	add	fp, sp, #4
   13b58:	ldr	r3, [pc, #24]	; 13b78 <b64_decode@@Base+0x4e0>
   13b5c:	add	r3, pc, r3
   13b60:	mov	r0, r3
   13b64:	bl	15bbc <__gcov_sort_n_vals@@Base+0x4a0>
   13b68:	sub	sp, fp, #4
   13b6c:	ldr	fp, [sp]
   13b70:	add	sp, sp, #4
   13b74:	pop	{pc}		; (ldr pc, [sp], #4)
   13b78:	andeq	r3, r1, r0, ror #14
   13b7c:	str	fp, [sp, #-8]!
   13b80:	str	lr, [sp, #4]
   13b84:	add	fp, sp, #4
   13b88:	bl	15b4c <__gcov_sort_n_vals@@Base+0x430>
   13b8c:	sub	sp, fp, #4
   13b90:	ldr	fp, [sp]
   13b94:	add	sp, sp, #4
   13b98:	pop	{pc}		; (ldr pc, [sp], #4)
   13b9c:	b	14e40 <b64_decode@@Base+0x17a8>
   13ba0:	push	{r4, r5, r6, r7, r8, lr}
   13ba4:	subs	r5, r1, #0
   13ba8:	popeq	{r4, r5, r6, r7, r8, pc}
   13bac:	mov	r4, r0
   13bb0:	bl	13b9c <b64_decode@@Base+0x504>
   13bb4:	ldr	r3, [r4]
   13bb8:	ldr	r2, [r4, #4]
   13bbc:	adds	r6, r3, r0
   13bc0:	adc	r7, r2, r1
   13bc4:	subs	r5, r5, #1
   13bc8:	strd	r6, [r4], #8
   13bcc:	bne	13bb0 <b64_decode@@Base+0x518>
   13bd0:	pop	{r4, r5, r6, r7, r8, pc}
   13bd4:	ldr	r3, [pc, #20]	; 13bf0 <b64_decode@@Base+0x558>
   13bd8:	ldr	r2, [pc, #20]	; 13bf4 <b64_decode@@Base+0x55c>
   13bdc:	add	r3, pc, r3
   13be0:	ldr	r3, [r3, r2]
   13be4:	ldmib	r3, {r0, r3}
   13be8:	add	r0, r0, r3
   13bec:	bx	lr
   13bf0:	andeq	r3, r1, ip, lsl r4
   13bf4:	andeq	r0, r0, r8, asr #1
   13bf8:	ldr	r3, [pc, #28]	; 13c1c <b64_decode@@Base+0x584>
   13bfc:	ldr	r2, [pc, #28]	; 13c20 <b64_decode@@Base+0x588>
   13c00:	add	r3, pc, r3
   13c04:	ldr	r3, [r3, r2]
   13c08:	ldr	r2, [r3]
   13c0c:	cmp	r2, #0
   13c10:	ldrne	r0, [r3, #20]
   13c14:	moveq	r0, #1
   13c18:	bx	lr
   13c1c:	strdeq	r3, [r1], -r8
   13c20:	andeq	r0, r0, r8, asr #1
   13c24:	bx	lr
   13c28:	ldr	ip, [pc, #32]	; 13c50 <b64_decode@@Base+0x5b8>
   13c2c:	mov	r3, #32
   13c30:	teq	r0, r1
   13c34:	movmi	r2, ip
   13c38:	movpl	r2, #0
   13c3c:	subs	r3, r3, #1
   13c40:	lsl	r1, r1, #1
   13c44:	eor	r0, r2, r0, lsl #1
   13c48:	bne	13c30 <b64_decode@@Base+0x598>
   13c4c:	bx	lr
   13c50:	strbeq	r1, [r1], #3511	; 0xdb7
   13c54:	ldr	r2, [pc, #60]	; 13c98 <b64_decode@@Base+0x600>
   13c58:	ldr	r3, [pc, #60]	; 13c9c <b64_decode@@Base+0x604>
   13c5c:	add	r2, pc, r2
   13c60:	push	{r4, lr}
   13c64:	ldr	r4, [r2, r3]
   13c68:	ldr	r0, [r4]
   13c6c:	cmp	r0, #0
   13c70:	popeq	{r4, pc}
   13c74:	ldr	r3, [pc, #36]	; 13ca0 <b64_decode@@Base+0x608>
   13c78:	ldr	r3, [r2, r3]
   13c7c:	ldr	r3, [r3]
   13c80:	cmp	r0, r3
   13c84:	popeq	{r4, pc}
   13c88:	bl	11028 <fclose@plt>
   13c8c:	mov	r3, #0
   13c90:	str	r3, [r4]
   13c94:	pop	{r4, pc}
   13c98:	muleq	r1, ip, r3
   13c9c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13ca0:	strheq	r0, [r0], -r8
   13ca4:	ldr	r3, [pc, #76]	; 13cf8 <b64_decode@@Base+0x660>
   13ca8:	ldr	r1, [pc, #76]	; 13cfc <b64_decode@@Base+0x664>
   13cac:	add	r3, pc, r3
   13cb0:	push	{r4, r5, r6, lr}
   13cb4:	mov	r5, r0
   13cb8:	ldr	r4, [r3, r1]
   13cbc:	lsl	r1, r0, #2
   13cc0:	mov	r0, r4
   13cc4:	mov	r2, #1
   13cc8:	ldr	r3, [r0], #28
   13ccc:	bl	10f44 <fwrite@plt>
   13cd0:	cmp	r0, #1
   13cd4:	movne	r3, #1
   13cd8:	ldr	r0, [r4, #8]
   13cdc:	strne	r3, [r4, #20]
   13ce0:	ldr	r3, [r4, #4]
   13ce4:	sub	r0, r0, r5
   13ce8:	add	r3, r3, r5
   13cec:	str	r3, [r4, #4]
   13cf0:	str	r0, [r4, #8]
   13cf4:	pop	{r4, r5, r6, pc}
   13cf8:	andeq	r3, r1, ip, asr #6
   13cfc:	andeq	r0, r0, r8, asr #1
   13d00:	ldr	r3, [pc, #80]	; 13d58 <b64_decode@@Base+0x6c0>
   13d04:	ldr	r2, [pc, #80]	; 13d5c <b64_decode@@Base+0x6c4>
   13d08:	add	r3, pc, r3
   13d0c:	push	{r4, r5, r6, lr}
   13d10:	mov	r5, r0
   13d14:	ldr	r4, [r3, r2]
   13d18:	ldr	r3, [r4, #8]
   13d1c:	cmp	r3, #1024	; 0x400
   13d20:	bcs	13d38 <b64_decode@@Base+0x6a0>
   13d24:	add	r0, r3, #7
   13d28:	add	r3, r5, r3
   13d2c:	str	r3, [r4, #8]
   13d30:	add	r0, r4, r0, lsl #2
   13d34:	pop	{r4, r5, r6, pc}
   13d38:	mov	r0, #1024	; 0x400
   13d3c:	bl	13ca4 <b64_decode@@Base+0x60c>
   13d40:	ldr	r3, [r4, #8]
   13d44:	cmp	r3, #0
   13d48:	addne	r2, r4, #4096	; 0x1000
   13d4c:	ldrne	r2, [r2, #28]
   13d50:	strne	r2, [r4, #28]
   13d54:	b	13d24 <b64_decode@@Base+0x68c>
   13d58:	strdeq	r3, [r1], -r0
   13d5c:	andeq	r0, r0, r8, asr #1
   13d60:	ldr	r3, [pc, #192]	; 13e28 <b64_decode@@Base+0x790>
   13d64:	ldr	r2, [pc, #192]	; 13e2c <b64_decode@@Base+0x794>
   13d68:	add	r3, pc, r3
   13d6c:	push	{r4, r5, r6, lr}
   13d70:	ldr	r4, [r3, r2]
   13d74:	ldr	r2, [r4, #24]
   13d78:	ldr	r3, [r4, #8]
   13d7c:	ldr	ip, [r4, #12]
   13d80:	cmp	r2, #0
   13d84:	sub	ip, ip, r3
   13d88:	ble	13e04 <b64_decode@@Base+0x76c>
   13d8c:	cmp	ip, r0
   13d90:	mov	r5, r0
   13d94:	bcs	13df0 <b64_decode@@Base+0x758>
   13d98:	ldr	r2, [r4, #4]
   13d9c:	cmp	ip, #0
   13da0:	add	r2, r2, r3
   13da4:	str	r2, [r4, #4]
   13da8:	addne	r2, r4, #28
   13dac:	mov	r0, r4
   13db0:	ldrne	r3, [r2, r3, lsl #2]
   13db4:	mov	r6, #0
   13db8:	strne	r3, [r4, #28]
   13dbc:	ldr	r3, [r0], #28
   13dc0:	mov	r2, #4096	; 0x1000
   13dc4:	add	r0, r0, ip, lsl #2
   13dc8:	mov	r1, #1
   13dcc:	str	ip, [r4, #12]
   13dd0:	str	r6, [r4, #8]
   13dd4:	bl	10f5c <fread@plt>
   13dd8:	ldr	r3, [r4, #12]
   13ddc:	add	r0, r3, r0, lsr #2
   13de0:	cmp	r0, r5
   13de4:	str	r0, [r4, #12]
   13de8:	bcc	13e0c <b64_decode@@Base+0x774>
   13dec:	ldr	r3, [r4, #8]
   13df0:	add	r0, r3, #7
   13df4:	add	r5, r5, r3
   13df8:	str	r5, [r4, #8]
   13dfc:	add	r0, r4, r0, lsl #2
   13e00:	pop	{r4, r5, r6, pc}
   13e04:	mov	r0, #0
   13e08:	pop	{r4, r5, r6, pc}
   13e0c:	ldr	r3, [r4, #16]
   13e10:	str	r6, [r4, #12]
   13e14:	add	r5, r5, r3
   13e18:	sub	r5, r5, r0
   13e1c:	str	r5, [r4, #16]
   13e20:	mov	r0, r6
   13e24:	pop	{r4, r5, r6, pc}
   13e28:	muleq	r1, r0, r2
   13e2c:	andeq	r0, r0, r8, asr #1
   13e30:	push	{r4, r5, r6, lr}
   13e34:	ldr	r4, [pc, #92]	; 13e98 <b64_decode@@Base+0x800>
   13e38:	ldr	r3, [pc, #92]	; 13e9c <b64_decode@@Base+0x804>
   13e3c:	add	r4, pc, r4
   13e40:	ldr	r5, [r4, r3]
   13e44:	ldr	r0, [r5]
   13e48:	cmp	r0, #0
   13e4c:	popne	{r4, r5, r6, pc}
   13e50:	ldr	r0, [pc, #72]	; 13ea0 <b64_decode@@Base+0x808>
   13e54:	add	r0, pc, r0
   13e58:	bl	10f74 <getenv@plt>
   13e5c:	cmp	r0, #0
   13e60:	beq	13e90 <b64_decode@@Base+0x7f8>
   13e64:	ldr	r1, [pc, #56]	; 13ea4 <b64_decode@@Base+0x80c>
   13e68:	add	r1, pc, r1
   13e6c:	bl	11058 <fopen64@plt>
   13e70:	str	r0, [r5]
   13e74:	cmp	r0, #0
   13e78:	popne	{r4, r5, r6, pc}
   13e7c:	ldr	r3, [pc, #36]	; 13ea8 <b64_decode@@Base+0x810>
   13e80:	ldr	r3, [r4, r3]
   13e84:	ldr	r0, [r3]
   13e88:	str	r0, [r5]
   13e8c:	pop	{r4, r5, r6, pc}
   13e90:	ldr	r0, [r5]
   13e94:	b	13e74 <b64_decode@@Base+0x7dc>
   13e98:			; <UNDEFINED> instruction: 0x000131bc
   13e9c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13ea0:	andeq	r2, r0, r4, asr #20
   13ea4:	andeq	r2, r0, r0, asr #20
   13ea8:	strheq	r0, [r0], -r8
   13eac:	push	{r0, r1, r2, r3}
   13eb0:	push	{lr}		; (str lr, [sp, #-4]!)
   13eb4:	sub	sp, sp, #12
   13eb8:	add	r3, sp, #20
   13ebc:	str	r3, [sp, #4]
   13ec0:	bl	13e30 <b64_decode@@Base+0x798>
   13ec4:	ldr	r1, [sp, #16]
   13ec8:	ldr	r2, [sp, #4]
   13ecc:	bl	11040 <vfprintf@plt>
   13ed0:	add	sp, sp, #12
   13ed4:	pop	{lr}		; (ldr lr, [sp], #4)
   13ed8:	add	sp, sp, #16
   13edc:	bx	lr
   13ee0:	push	{r4, r5, r6, r7, r8, lr}
   13ee4:	subs	r6, r1, #0
   13ee8:	beq	13f3c <b64_decode@@Base+0x8a4>
   13eec:	cmp	r2, #0
   13ef0:	ldr	r7, [r6]
   13ef4:	beq	13f2c <b64_decode@@Base+0x894>
   13ef8:	add	r4, r0, #12
   13efc:	add	r5, r4, r2, lsl #2
   13f00:	mov	r3, #0
   13f04:	ldr	r2, [r4, #4]!
   13f08:	add	r1, r6, r3, lsl #3
   13f0c:	cmp	r2, #0
   13f10:	add	r8, r3, #1
   13f14:	beq	13f24 <b64_decode@@Base+0x88c>
   13f18:	ldr	r0, [r1, #28]
   13f1c:	bl	10efc <free@plt>
   13f20:	mov	r3, r8
   13f24:	cmp	r4, r5
   13f28:	bne	13f04 <b64_decode@@Base+0x86c>
   13f2c:	mov	r0, r6
   13f30:	bl	10efc <free@plt>
   13f34:	mov	r0, r7
   13f38:	pop	{r4, r5, r6, r7, r8, pc}
   13f3c:	mov	r7, r6
   13f40:	b	13f34 <b64_decode@@Base+0x89c>
   13f44:	push	{r4, r5}
   13f48:	mov	r4, r0
   13f4c:	mov	r5, r1
   13f50:	orrs	r3, r4, r5
   13f54:	beq	13f98 <b64_decode@@Base+0x900>
   13f58:	cmp	r1, #0
   13f5c:	clzeq	r2, r0
   13f60:	addeq	r2, r2, #32
   13f64:	clzne	r2, r1
   13f68:	rsb	r3, r2, #63	; 0x3f
   13f6c:	cmp	r3, #1
   13f70:	bls	13f98 <b64_decode@@Base+0x900>
   13f74:	rsb	r1, r2, #61	; 0x3d
   13f78:	rsb	r0, r1, #32
   13f7c:	lsr	r3, r4, r1
   13f80:	sub	r1, r1, #32
   13f84:	orr	r3, r3, r5, lsl r0
   13f88:	orr	r3, r3, r5, lsr r1
   13f8c:	rsb	r2, r2, #1073741886	; 0x4000003e
   13f90:	and	r0, r3, #3
   13f94:	add	r0, r0, r2, lsl #2
   13f98:	pop	{r4, r5}
   13f9c:	bx	lr
   13fa0:	push	{r4, r5, r6, lr}
   13fa4:	mov	r1, r3
   13fa8:	mov	r6, r0
   13fac:	mov	r0, r2
   13fb0:	mov	r4, r2
   13fb4:	mov	r5, r3
   13fb8:	bl	13f44 <b64_decode@@Base+0x8ac>
   13fbc:	add	r0, r0, r0, lsl #1
   13fc0:	lsl	r0, r0, #3
   13fc4:	add	r3, r6, r0
   13fc8:	ldr	r1, [r6, r0]
   13fcc:	ldr	r2, [r3, #16]
   13fd0:	add	r1, r1, #1
   13fd4:	str	r1, [r6, r0]
   13fd8:	ldrd	r0, [r3, #8]
   13fdc:	ldr	ip, [r3, #20]
   13fe0:	adds	r2, r2, r4
   13fe4:	str	r2, [r3, #16]
   13fe8:	adc	r2, ip, r5
   13fec:	cmp	r4, r0
   13ff0:	sbcs	r1, r5, r1
   13ff4:	str	r2, [r3, #20]
   13ff8:	strdlt	r4, [r3, #8]
   13ffc:	pop	{r4, r5, r6, pc}
   14000:	ldr	r3, [r1, #8]
   14004:	cmp	r3, #0
   14008:	bxeq	lr
   1400c:	add	r2, r1, #6016	; 0x1780
   14010:	push	{r4, r5, r6, r7, r8, lr}
   14014:	mov	r3, r1
   14018:	mov	r8, r1
   1401c:	mov	r7, r0
   14020:	ldrd	r4, [r1, #24]
   14024:	add	r2, r2, #32
   14028:	mov	ip, #0
   1402c:	mov	r0, #0
   14030:	mov	r1, #0
   14034:	str	ip, [r3, #40]	; 0x28
   14038:	strd	r4, [r3, #48]	; 0x30
   1403c:	strd	r0, [r3, #56]	; 0x38
   14040:	add	r3, r3, #24
   14044:	cmp	r3, r2
   14048:	bne	14034 <b64_decode@@Base+0x99c>
   1404c:	cmp	r7, #0
   14050:	popeq	{r4, r5, r6, r7, r8, pc}
   14054:	add	r8, r8, #40	; 0x28
   14058:	ldr	r3, [r7, #16]
   1405c:	cmp	r3, #0
   14060:	beq	140e8 <b64_decode@@Base+0xa50>
   14064:	ldr	r2, [r7, #52]	; 0x34
   14068:	cmp	r2, #0
   1406c:	beq	140e8 <b64_decode@@Base+0xa50>
   14070:	mov	r6, #0
   14074:	b	14084 <b64_decode@@Base+0x9ec>
   14078:	add	r6, r6, #1
   1407c:	cmp	r2, r6
   14080:	beq	140e8 <b64_decode@@Base+0xa50>
   14084:	ldr	r3, [r7, #56]	; 0x38
   14088:	ldr	r5, [r3, r6, lsl #2]
   1408c:	cmp	r5, #0
   14090:	beq	14078 <b64_decode@@Base+0x9e0>
   14094:	ldr	r3, [r5]
   14098:	cmp	r3, r7
   1409c:	bne	14078 <b64_decode@@Base+0x9e0>
   140a0:	ldr	r3, [r5, #16]
   140a4:	cmp	r3, #0
   140a8:	beq	14078 <b64_decode@@Base+0x9e0>
   140ac:	mov	r4, #0
   140b0:	ldr	r2, [r5, #20]
   140b4:	lsl	r3, r4, #3
   140b8:	add	r2, r2, r3
   140bc:	mov	r0, r8
   140c0:	ldrd	r2, [r2]
   140c4:	bl	13fa0 <b64_decode@@Base+0x908>
   140c8:	ldr	r3, [r5, #16]
   140cc:	add	r4, r4, #1
   140d0:	cmp	r3, r4
   140d4:	bhi	140b0 <b64_decode@@Base+0xa18>
   140d8:	ldr	r2, [r7, #52]	; 0x34
   140dc:	add	r6, r6, #1
   140e0:	cmp	r2, r6
   140e4:	bne	14084 <b64_decode@@Base+0x9ec>
   140e8:	ldr	r7, [r7, #4]
   140ec:	cmp	r7, #0
   140f0:	bne	14058 <b64_decode@@Base+0x9c0>
   140f4:	pop	{r4, r5, r6, r7, r8, pc}
   140f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140fc:	sub	sp, sp, #12
   14100:	mov	r6, r0
   14104:	str	r0, [sp, #4]
   14108:	mov	r8, r2
   1410c:	mov	r0, r1
   14110:	mov	r4, r1
   14114:	ldr	r2, [pc, #364]	; 14288 <b64_decode@@Base+0xbf0>
   14118:	mov	r1, #0
   1411c:	bl	10ff8 <memset@plt>
   14120:	mov	r5, #0
   14124:	cmp	r6, #0
   14128:	str	r5, [r8]
   1412c:	beq	1426c <b64_decode@@Base+0xbd4>
   14130:	mov	r9, r5
   14134:	ldr	r0, [r6, #12]
   14138:	bl	10fc8 <strlen@plt>
   1413c:	cmp	r5, r0
   14140:	strcc	r0, [r8]
   14144:	mov	r0, r9
   14148:	ldr	r1, [r6, #8]
   1414c:	bl	13c28 <b64_decode@@Base+0x590>
   14150:	ldr	r7, [r6, #52]	; 0x34
   14154:	mov	r1, r7
   14158:	bl	13c28 <b64_decode@@Base+0x590>
   1415c:	cmp	r7, #0
   14160:	mov	r9, r0
   14164:	beq	14258 <b64_decode@@Base+0xbc0>
   14168:	ldr	r5, [r6, #56]	; 0x38
   1416c:	add	r7, r5, r7, lsl #2
   14170:	sub	r7, r7, #4
   14174:	sub	r5, r5, #4
   14178:	b	141a8 <b64_decode@@Base+0xb10>
   1417c:	ldr	r3, [sl]
   14180:	mov	r0, r9
   14184:	cmp	r3, r6
   14188:	beq	141c4 <b64_decode@@Base+0xb2c>
   1418c:	mov	r1, #0
   14190:	bl	13c28 <b64_decode@@Base+0x590>
   14194:	mov	r1, #0
   14198:	bl	13c28 <b64_decode@@Base+0x590>
   1419c:	mov	r9, r0
   141a0:	cmp	r5, r7
   141a4:	beq	14258 <b64_decode@@Base+0xbc0>
   141a8:	ldr	sl, [r5, #4]!
   141ac:	cmp	sl, #0
   141b0:	bne	1417c <b64_decode@@Base+0xae4>
   141b4:	mov	r1, sl
   141b8:	mov	r0, r9
   141bc:	bl	13c28 <b64_decode@@Base+0x590>
   141c0:	b	14194 <b64_decode@@Base+0xafc>
   141c4:	ldr	r1, [sl, #12]
   141c8:	bl	13c28 <b64_decode@@Base+0x590>
   141cc:	ldr	r1, [sl, #8]
   141d0:	bl	13c28 <b64_decode@@Base+0x590>
   141d4:	ldr	r3, [r6, #16]
   141d8:	cmp	r3, #0
   141dc:	mov	r9, r0
   141e0:	beq	141a0 <b64_decode@@Base+0xb08>
   141e4:	ldr	fp, [sl, #16]
   141e8:	ldr	r3, [r4, #8]
   141ec:	mov	r1, fp
   141f0:	add	r3, r3, fp
   141f4:	str	r3, [r4, #8]
   141f8:	bl	13c28 <b64_decode@@Base+0x590>
   141fc:	cmp	fp, #0
   14200:	mov	r9, r0
   14204:	beq	141a0 <b64_decode@@Base+0xb08>
   14208:	ldr	r2, [sl, #20]
   1420c:	ldr	r3, [r4, #16]
   14210:	add	lr, r2, fp, lsl #3
   14214:	ldr	ip, [r4, #20]
   14218:	sub	lr, lr, #8
   1421c:	sub	r2, r2, #8
   14220:	ldrd	r0, [r2, #8]!
   14224:	ldrd	sl, [r4, #24]
   14228:	adds	r3, r3, r0
   1422c:	adc	ip, ip, r1
   14230:	str	ip, [r4, #20]
   14234:	str	r3, [r4, #16]
   14238:	ldrd	r0, [r2]
   1423c:	cmp	sl, r0
   14240:	sbcs	sl, fp, r1
   14244:	strdlt	r0, [r4, #24]
   14248:	cmp	lr, r2
   1424c:	bne	14220 <b64_decode@@Base+0xb88>
   14250:	cmp	r5, r7
   14254:	bne	141a8 <b64_decode@@Base+0xb10>
   14258:	ldr	r6, [r6, #4]
   1425c:	cmp	r6, #0
   14260:	beq	14270 <b64_decode@@Base+0xbd8>
   14264:	ldr	r5, [r8]
   14268:	b	14134 <b64_decode@@Base+0xa9c>
   1426c:	ldr	r9, [sp, #4]
   14270:	ldr	r0, [sp, #4]
   14274:	mov	r1, r4
   14278:	bl	14000 <b64_decode@@Base+0x968>
   1427c:	mov	r0, r9
   14280:	add	sp, sp, #12
   14284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14288:	andeq	r1, r0, r8, asr #15
   1428c:	push	{r4, r5, r6, lr}
   14290:	mov	r4, r0
   14294:	ldr	r0, [pc, #192]	; 1435c <b64_decode@@Base+0xcc4>
   14298:	add	r0, pc, r0
   1429c:	bl	10f74 <getenv@plt>
   142a0:	subs	r3, r0, #0
   142a4:	beq	142b0 <b64_decode@@Base+0xc18>
   142a8:	bl	1104c <atoi@plt>
   142ac:	bic	r3, r0, r0, asr #31
   142b0:	ldr	r0, [pc, #168]	; 14360 <b64_decode@@Base+0xcc8>
   142b4:	str	r3, [r4, #8]
   142b8:	add	r0, pc, r0
   142bc:	bl	10f74 <getenv@plt>
   142c0:	subs	r6, r0, #0
   142c4:	beq	14334 <b64_decode@@Base+0xc9c>
   142c8:	bl	10fc8 <strlen@plt>
   142cc:	ldr	r3, [r4, #4]
   142d0:	add	r3, r3, #2
   142d4:	cmp	r0, #0
   142d8:	bne	14314 <b64_decode@@Base+0xc7c>
   142dc:	ldr	r2, [r4, #8]
   142e0:	cmp	r2, #0
   142e4:	beq	14348 <b64_decode@@Base+0xcb0>
   142e8:	ldr	r6, [pc, #116]	; 14364 <b64_decode@@Base+0xccc>
   142ec:	mov	r5, #1
   142f0:	add	r6, pc, r6
   142f4:	str	r5, [r4, #12]
   142f8:	add	r0, r3, r5
   142fc:	bl	10f8c <malloc@plt>
   14300:	mov	r2, r5
   14304:	mov	r1, r6
   14308:	str	r0, [r4]
   1430c:	pop	{r4, r5, r6, lr}
   14310:	b	10f14 <memcpy@plt>
   14314:	sub	r5, r0, #1
   14318:	ldrb	r2, [r6, r5]
   1431c:	cmp	r2, #47	; 0x2f
   14320:	movne	r5, r0
   14324:	bne	142f4 <b64_decode@@Base+0xc5c>
   14328:	cmp	r5, #0
   1432c:	bne	142f4 <b64_decode@@Base+0xc5c>
   14330:	b	142dc <b64_decode@@Base+0xc44>
   14334:	ldr	r2, [r4, #8]
   14338:	ldr	r3, [r4, #4]
   1433c:	cmp	r2, #0
   14340:	add	r3, r3, #2
   14344:	bne	142e8 <b64_decode@@Base+0xc50>
   14348:	str	r2, [r4, #12]
   1434c:	mov	r0, r3
   14350:	bl	10f8c <malloc@plt>
   14354:	str	r0, [r4]
   14358:	pop	{r4, r5, r6, pc}
   1435c:	andeq	r2, r0, r8, lsl r6
   14360:	andeq	r2, r0, ip, lsl #12
   14364:			; <UNDEFINED> instruction: 0x000025bc
   14368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1436c:	sub	sp, sp, #6080	; 0x17c0
   14370:	sub	sp, sp, #36	; 0x24
   14374:	mov	r3, r0
   14378:	str	r1, [sp, #40]	; 0x28
   1437c:	mov	r1, #0
   14380:	mov	r4, r1
   14384:	str	r0, [sp, #56]	; 0x38
   14388:	add	r7, r3, #6016	; 0x1780
   1438c:	add	r0, sp, #64	; 0x40
   14390:	add	r6, sp, #2016	; 0x7e0
   14394:	ldr	r2, [pc, #984]	; 14774 <b64_decode@@Base+0x10dc>
   14398:	mov	r5, #251	; 0xfb
   1439c:	str	r0, [sp, #60]	; 0x3c
   143a0:	str	r5, [sp, #52]	; 0x34
   143a4:	str	r6, [sp, #36]	; 0x24
   143a8:	mov	r9, r4
   143ac:	bl	10ff8 <memset@plt>
   143b0:	mov	sl, r4
   143b4:	add	r3, r7, #8
   143b8:	mov	r0, r4
   143bc:	str	r3, [sp, #48]	; 0x30
   143c0:	sub	r3, r6, #1952	; 0x7a0
   143c4:	str	r3, [sp, #44]	; 0x2c
   143c8:	ldr	r3, [sp, #48]	; 0x30
   143cc:	ldr	r2, [r3, #16]
   143d0:	ldr	r7, [r3]
   143d4:	str	r2, [sp, #16]
   143d8:	ldr	r2, [r3, #20]
   143dc:	cmp	r7, #0
   143e0:	str	r2, [sp, #20]
   143e4:	beq	14704 <b64_decode@@Base+0x106c>
   143e8:	ldrd	r2, [r3, #8]
   143ec:	str	r9, [sp, #12]
   143f0:	strd	r2, [sp, #24]
   143f4:	b	144d4 <b64_decode@@Base+0xe3c>
   143f8:	bls	14768 <b64_decode@@Base+0x10d0>
   143fc:	ldr	r3, [sp, #12]
   14400:	mov	r2, r4
   14404:	umull	r0, r1, r7, r3
   14408:	mov	r3, #0
   1440c:	mla	r1, r7, sl, r1
   14410:	bl	15c84 <__gcov_sort_n_vals@@Base+0x568>
   14414:	mov	r6, r0
   14418:	mov	r8, r1
   1441c:	ldr	r3, [sp, #12]
   14420:	sub	r4, r4, r7
   14424:	subs	r3, r3, r6
   14428:	sbc	sl, sl, r8
   1442c:	mov	fp, r7
   14430:	mov	r7, #0
   14434:	str	r3, [sp, #12]
   14438:	ldr	r0, [sp, #16]
   1443c:	ldr	r3, [sp, #20]
   14440:	str	r7, [sp, #16]
   14444:	str	r7, [sp, #20]
   14448:	adds	r6, r6, r0
   1444c:	ldrd	r0, [sp]
   14450:	adc	r8, r8, r3
   14454:	bl	13f44 <b64_decode@@Base+0x8ac>
   14458:	ldr	r3, [sp, #44]	; 0x2c
   1445c:	add	r1, r0, r0, lsl #1
   14460:	lsl	r1, r1, #3
   14464:	add	ip, r3, r1
   14468:	ldr	r3, [sp, #36]	; 0x24
   1446c:	ldr	lr, [ip, #16]
   14470:	add	r1, r3, r1
   14474:	adds	r6, lr, r6
   14478:	ldr	lr, [ip, #20]
   1447c:	ldrd	r2, [ip, #8]
   14480:	adc	lr, lr, r8
   14484:	ldrd	r8, [sp]
   14488:	str	lr, [sp, #32]
   1448c:	orrs	lr, r2, r3
   14490:	moveq	lr, #1
   14494:	movne	lr, #0
   14498:	cmp	r8, r2
   1449c:	sbcs	r3, r9, r3
   144a0:	orrlt	lr, lr, #1
   144a4:	cmp	lr, #0
   144a8:	str	r6, [ip, #16]
   144ac:	ldr	r6, [r1, #-1952]	; 0xfffff860
   144b0:	ldr	r3, [sp, #32]
   144b4:	strdne	r8, [ip, #8]
   144b8:	cmp	r4, #0
   144bc:	add	fp, r6, fp
   144c0:	subeq	r5, r5, #1
   144c4:	cmp	r7, #0
   144c8:	str	r3, [ip, #20]
   144cc:	str	fp, [r1, #-1952]	; 0xfffff860
   144d0:	beq	14700 <b64_decode@@Base+0x1068>
   144d4:	cmp	r4, #0
   144d8:	beq	1455c <b64_decode@@Base+0xec4>
   144dc:	add	r2, r5, r5, lsl #1
   144e0:	ldr	r3, [sp, #40]	; 0x28
   144e4:	add	r2, r3, r2, lsl #3
   144e8:	ldrd	r0, [sp, #24]
   144ec:	ldr	r3, [r2, #8]
   144f0:	ldr	r2, [r2, #12]
   144f4:	adds	r3, r0, r3
   144f8:	str	r3, [sp]
   144fc:	adc	r3, r1, r2
   14500:	cmp	r4, r7
   14504:	str	r3, [sp, #4]
   14508:	bcs	143f8 <b64_decode@@Base+0xd60>
   1450c:	ldr	r6, [sp, #16]
   14510:	ldr	r8, [sp, #20]
   14514:	mov	r2, r7
   14518:	umull	r0, r1, r4, r6
   1451c:	mov	r3, #0
   14520:	mla	r1, r4, r8, r1
   14524:	bl	15c84 <__gcov_sort_n_vals@@Base+0x568>
   14528:	sub	r7, r7, r4
   1452c:	mov	fp, r4
   14530:	mov	r4, #0
   14534:	subs	r2, r6, r0
   14538:	str	r2, [sp, #16]
   1453c:	sbc	r2, r8, r1
   14540:	ldr	r6, [sp, #12]
   14544:	mov	r8, sl
   14548:	mov	r3, r1
   1454c:	str	r2, [sp, #20]
   14550:	str	r4, [sp, #12]
   14554:	mov	sl, r4
   14558:	b	14448 <b64_decode@@Base+0xdb0>
   1455c:	cmp	r5, #0
   14560:	blt	14760 <b64_decode@@Base+0x10c8>
   14564:	ldr	r3, [sp, #40]	; 0x28
   14568:	add	r2, r5, r5, lsl #1
   1456c:	ldr	r4, [r3, r2, lsl #3]
   14570:	add	r2, r3, r2, lsl #3
   14574:	cmp	r4, #0
   14578:	bne	146f0 <b64_decode@@Base+0x1058>
   1457c:	mov	r3, r2
   14580:	ldr	r9, [sp, #12]
   14584:	b	14598 <b64_decode@@Base+0xf00>
   14588:	ldr	r4, [r3]
   1458c:	mov	r2, r3
   14590:	cmp	r4, #0
   14594:	bne	146f0 <b64_decode@@Base+0x1058>
   14598:	subs	r5, r5, #1
   1459c:	sub	r3, r3, #24
   145a0:	bcs	14588 <b64_decode@@Base+0xef0>
   145a4:	ldr	r2, [sp, #52]	; 0x34
   145a8:	ldr	ip, [sp, #36]	; 0x24
   145ac:	ldr	r4, [sp, #16]
   145b0:	lsl	r3, r2, #1
   145b4:	add	r1, r3, r2
   145b8:	sub	r2, ip, #1952	; 0x7a0
   145bc:	lsl	r1, r1, #3
   145c0:	add	r2, r2, r1
   145c4:	add	r1, ip, r1
   145c8:	ldr	ip, [r2, #16]
   145cc:	ldr	lr, [r1, #-1952]	; 0xfffff860
   145d0:	adds	ip, ip, r4
   145d4:	add	r7, lr, r7
   145d8:	ldrd	r4, [r2, #8]
   145dc:	ldr	lr, [r2, #20]
   145e0:	str	r7, [r1, #-1952]	; 0xfffff860
   145e4:	ldr	r1, [sp, #20]
   145e8:	str	ip, [r2, #16]
   145ec:	adc	lr, lr, r1
   145f0:	orrs	r1, r4, r5
   145f4:	str	lr, [r2, #20]
   145f8:	beq	146d0 <b64_decode@@Base+0x1038>
   145fc:	ldrd	r6, [sp, #24]
   14600:	cmp	r6, r4
   14604:	sbcs	r2, r7, r5
   14608:	blt	146d0 <b64_decode@@Base+0x1038>
   1460c:	ldr	r2, [sp, #52]	; 0x34
   14610:	ldr	lr, [sp, #60]	; 0x3c
   14614:	add	ip, r3, r2
   14618:	ldr	r3, [sp, #56]	; 0x38
   1461c:	lsl	ip, ip, #3
   14620:	add	r1, lr, ip
   14624:	add	ip, r3, ip
   14628:	b	14684 <b64_decode@@Base+0xfec>
   1462c:	ldr	r3, [r1, #-8]
   14630:	ldr	r6, [ip, #-8]
   14634:	ldr	r7, [ip, #-4]
   14638:	ldr	r2, [r1, #-4]
   1463c:	adds	r6, r3, r6
   14640:	ldrd	r4, [r1, #-16]
   14644:	adc	r2, r2, r7
   14648:	ldr	r3, [r1, #-24]	; 0xffffffe8
   1464c:	ldr	r7, [ip, #-24]	; 0xffffffe8
   14650:	orrs	r8, r4, r5
   14654:	add	r3, r3, r7
   14658:	str	r2, [r1, #-4]
   1465c:	str	r3, [r1, #-24]	; 0xffffffe8
   14660:	str	r6, [r1, #-8]
   14664:	ldrd	r2, [ip, #-16]
   14668:	sub	ip, ip, #24
   1466c:	beq	1467c <b64_decode@@Base+0xfe4>
   14670:	cmp	r2, r4
   14674:	sbcs	r4, r3, r5
   14678:	bge	14680 <b64_decode@@Base+0xfe8>
   1467c:	strd	r2, [r1, #-16]
   14680:	sub	r1, r1, #24
   14684:	cmp	r1, lr
   14688:	bne	1462c <b64_decode@@Base+0xf94>
   1468c:	ldr	r3, [sp, #36]	; 0x24
   14690:	add	r0, r0, r0, lsl #1
   14694:	sub	r3, r3, #1952	; 0x7a0
   14698:	add	r3, r3, r0, lsl #3
   1469c:	ldr	r1, [sp, #60]	; 0x3c
   146a0:	ldr	r2, [r3, #16]
   146a4:	ldr	ip, [r3, #20]
   146a8:	adds	r9, r2, r9
   146ac:	adc	sl, ip, sl
   146b0:	ldr	r0, [sp, #56]	; 0x38
   146b4:	ldr	r2, [pc, #184]	; 14774 <b64_decode@@Base+0x10dc>
   146b8:	str	r9, [r3, #16]
   146bc:	str	sl, [r3, #20]
   146c0:	bl	10f14 <memcpy@plt>
   146c4:	add	sp, sp, #6080	; 0x17c0
   146c8:	add	sp, sp, #36	; 0x24
   146cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d0:	ldr	r2, [sp, #52]	; 0x34
   146d4:	ldrd	r4, [sp, #24]
   146d8:	add	r1, r3, r2
   146dc:	ldr	r2, [sp, #36]	; 0x24
   146e0:	sub	r2, r2, #1952	; 0x7a0
   146e4:	add	r2, r2, r1, lsl #3
   146e8:	strd	r4, [r2, #8]
   146ec:	b	1460c <b64_decode@@Base+0xf74>
   146f0:	ldr	r3, [r2, #16]
   146f4:	ldr	sl, [r2, #20]
   146f8:	str	r3, [sp, #12]
   146fc:	b	144e8 <b64_decode@@Base+0xe50>
   14700:	ldr	r9, [sp, #12]
   14704:	ldr	r3, [sp, #52]	; 0x34
   14708:	sub	r3, r3, #1
   1470c:	str	r3, [sp, #52]	; 0x34
   14710:	cmn	r3, #1
   14714:	ldr	r3, [sp, #48]	; 0x30
   14718:	sub	r3, r3, #24
   1471c:	str	r3, [sp, #48]	; 0x30
   14720:	bne	143c8 <b64_decode@@Base+0xd30>
   14724:	cmp	r4, #0
   14728:	subne	r5, r5, #1
   1472c:	cmp	r5, #0
   14730:	blt	1468c <b64_decode@@Base+0xff4>
   14734:	add	r5, r5, r5, lsl #1
   14738:	ldr	ip, [sp, #40]	; 0x28
   1473c:	add	r3, ip, r5, lsl #3
   14740:	ldr	r2, [r3, #16]
   14744:	ldr	r1, [r3, #20]
   14748:	adds	r9, r9, r2
   1474c:	adc	sl, sl, r1
   14750:	cmp	ip, r3
   14754:	sub	r3, r3, #24
   14758:	bne	14740 <b64_decode@@Base+0x10a8>
   1475c:	b	1468c <b64_decode@@Base+0xff4>
   14760:	ldr	r9, [sp, #12]
   14764:	b	145a4 <b64_decode@@Base+0xf0c>
   14768:	ldr	r6, [sp, #12]
   1476c:	mov	r8, sl
   14770:	b	1441c <b64_decode@@Base+0xd84>
   14774:	andeq	r1, r0, r0, lsr #15
   14778:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1477c:	ldrb	r4, [r0]
   14780:	cmp	r4, #47	; 0x2f
   14784:	addeq	r5, r0, #1
   14788:	ldrbeq	r4, [r0, #1]
   1478c:	movne	r5, r0
   14790:	cmp	r4, #0
   14794:	beq	147e8 <b64_decode@@Base+0x1150>
   14798:	mov	r6, r0
   1479c:	mov	r7, #0
   147a0:	mov	r8, #47	; 0x2f
   147a4:	ldr	sl, [pc, #136]	; 14834 <b64_decode@@Base+0x119c>
   147a8:	b	147b8 <b64_decode@@Base+0x1120>
   147ac:	ldrb	r4, [r5, #1]!
   147b0:	cmp	r4, #0
   147b4:	beq	147e8 <b64_decode@@Base+0x1150>
   147b8:	cmp	r4, #47	; 0x2f
   147bc:	bne	147ac <b64_decode@@Base+0x1114>
   147c0:	strb	r7, [r5]
   147c4:	mov	r1, #0
   147c8:	mov	r0, r6
   147cc:	bl	1101c <access@plt>
   147d0:	cmn	r0, #1
   147d4:	beq	147f4 <b64_decode@@Base+0x115c>
   147d8:	strb	r8, [r5]
   147dc:	ldrb	r4, [r5, #1]!
   147e0:	cmp	r4, #0
   147e4:	bne	147b8 <b64_decode@@Base+0x1120>
   147e8:	mov	r9, #0
   147ec:	mov	r0, r9
   147f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   147f4:	mov	r1, sl
   147f8:	mov	r0, r6
   147fc:	bl	10fec <mkdir@plt>
   14800:	cmn	r0, #1
   14804:	mov	r9, r0
   14808:	bne	147d8 <b64_decode@@Base+0x1140>
   1480c:	bl	10fe0 <__errno_location@plt>
   14810:	ldr	r3, [r0]
   14814:	cmp	r3, #17
   14818:	beq	147d8 <b64_decode@@Base+0x1140>
   1481c:	ldr	r0, [pc, #20]	; 14838 <b64_decode@@Base+0x11a0>
   14820:	mov	r1, r6
   14824:	add	r0, pc, r0
   14828:	bl	13eac <b64_decode@@Base+0x814>
   1482c:	strb	r4, [r5]
   14830:	b	147ec <b64_decode@@Base+0x1154>
   14834:	andeq	r0, r0, sp, ror #3
   14838:	andeq	r2, r0, ip, lsr #1
   1483c:	ldr	r3, [pc, #76]	; 14890 <b64_decode@@Base+0x11f8>
   14840:	cmp	r1, r3
   14844:	beq	14888 <b64_decode@@Base+0x11f0>
   14848:	cmp	r2, #0
   1484c:	ldr	ip, [pc, #64]	; 14894 <b64_decode@@Base+0x11fc>
   14850:	push	{lr}		; (str lr, [sp, #-4]!)
   14854:	rev	r3, r1
   14858:	sub	sp, sp, #12
   1485c:	ldreq	r2, [r0]
   14860:	ldr	r0, [pc, #48]	; 14898 <b64_decode@@Base+0x1200>
   14864:	stm	sp, {r3, ip}
   14868:	mov	r1, r2
   1486c:	mov	r3, sp
   14870:	add	r2, sp, #4
   14874:	add	r0, pc, r0
   14878:	bl	13eac <b64_decode@@Base+0x814>
   1487c:	mov	r0, #0
   14880:	add	sp, sp, #12
   14884:	pop	{pc}		; (ldr pc, [sp], #4)
   14888:	mov	r0, #1
   1488c:	bx	lr
   14890:	teqmi	r8, sl, lsr #6
   14894:	bcs	ce29a0 <__bss_end__@@Base+0xcba2e4>
   14898:	andeq	r2, r0, r4, lsl #1
   1489c:	ldr	r2, [r2]
   148a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148a4:	cmp	r2, #0
   148a8:	mov	r4, r3
   148ac:	ldr	r2, [r3, #12]
   148b0:	ldr	r3, [sp, #32]
   148b4:	beq	149a0 <b64_decode@@Base+0x1308>
   148b8:	cmp	r1, #0
   148bc:	addeq	r1, r2, #1
   148c0:	streq	r1, [r4, #12]
   148c4:	cmp	r2, #0
   148c8:	ldr	r0, [r4, #16]
   148cc:	ldr	lr, [r4, #20]
   148d0:	ldrd	r6, [r4, #24]
   148d4:	ldr	r2, [r4, #32]
   148d8:	ldr	r1, [r4, #36]	; 0x24
   148dc:	bne	1494c <b64_decode@@Base+0x12b4>
   148e0:	ldr	ip, [r3, #8]
   148e4:	str	ip, [r4, #8]
   148e8:	ldr	ip, [r3, #16]
   148ec:	ldr	r5, [r3, #20]
   148f0:	adds	r0, ip, r0
   148f4:	adc	lr, r5, lr
   148f8:	str	r0, [r4, #16]
   148fc:	str	lr, [r4, #20]
   14900:	ldrd	r8, [r3, #24]
   14904:	cmp	r6, r8
   14908:	sbcs	r0, r7, r9
   1490c:	bge	149c0 <b64_decode@@Base+0x1328>
   14910:	strd	r8, [r4, #24]
   14914:	ldr	r0, [r3, #24]
   14918:	ldr	ip, [r3, #28]
   1491c:	adds	r2, r0, r2
   14920:	adc	r1, ip, r1
   14924:	str	r1, [r4, #36]	; 0x24
   14928:	str	r2, [r4, #32]
   1492c:	add	r1, r3, #40	; 0x28
   14930:	ldr	r2, [pc, #176]	; 149e8 <b64_decode@@Base+0x1350>
   14934:	add	r0, r4, #40	; 0x28
   14938:	bl	10f14 <memcpy@plt>
   1493c:	ldr	r3, [sp, #36]	; 0x24
   14940:	mov	r0, #0
   14944:	str	r3, [r4]
   14948:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1494c:	ldr	ip, [r3, #16]
   14950:	ldr	r5, [r3, #20]
   14954:	adds	r0, ip, r0
   14958:	adc	lr, r5, lr
   1495c:	str	r0, [r4, #16]
   14960:	str	lr, [r4, #20]
   14964:	ldrd	r8, [r3, #24]
   14968:	cmp	r6, r8
   1496c:	sbcs	r0, r7, r9
   14970:	bge	149d4 <b64_decode@@Base+0x133c>
   14974:	strd	r8, [r4, #24]
   14978:	ldr	r0, [r3, #24]
   1497c:	ldr	ip, [r3, #28]
   14980:	adds	r2, r0, r2
   14984:	adc	r1, ip, r1
   14988:	str	r1, [r4, #36]	; 0x24
   1498c:	str	r2, [r4, #32]
   14990:	add	r1, r3, #40	; 0x28
   14994:	add	r0, r4, #40	; 0x28
   14998:	bl	14368 <b64_decode@@Base+0xcd0>
   1499c:	b	1493c <b64_decode@@Base+0x12a4>
   149a0:	cmp	r2, #0
   149a4:	beq	1493c <b64_decode@@Base+0x12a4>
   149a8:	mov	r1, r0
   149ac:	ldr	r0, [pc, #56]	; 149ec <b64_decode@@Base+0x1354>
   149b0:	add	r0, pc, r0
   149b4:	bl	13eac <b64_decode@@Base+0x814>
   149b8:	mvn	r0, #0
   149bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149c0:	adds	r2, r2, r8
   149c4:	adc	r1, r1, r9
   149c8:	str	r1, [r4, #36]	; 0x24
   149cc:	str	r2, [r4, #32]
   149d0:	b	1492c <b64_decode@@Base+0x1294>
   149d4:	adds	r2, r2, r8
   149d8:	adc	r1, r1, r9
   149dc:	str	r1, [r4, #36]	; 0x24
   149e0:	str	r2, [r4, #32]
   149e4:	b	14990 <b64_decode@@Base+0x12f8>
   149e8:	andeq	r1, r0, r0, lsr #15
   149ec:	andeq	r1, r0, r0, lsl #31
   149f0:	ldr	r0, [pc, #52]	; 14a2c <b64_decode@@Base+0x1394>
   149f4:	ldr	r3, [pc, #52]	; 14a30 <b64_decode@@Base+0x1398>
   149f8:	add	r0, pc, r0
   149fc:	push	{lr}		; (str lr, [sp, #-4]!)
   14a00:	mov	ip, #0
   14a04:	ldr	r3, [r0, r3]
   14a08:	mvn	lr, #0
   14a0c:	mov	r2, ip
   14a10:	str	lr, [r3, #24]
   14a14:	mov	r1, ip
   14a18:	ldr	r0, [r3]
   14a1c:	pop	{lr}		; (ldr lr, [sp], #4)
   14a20:	str	ip, [r3, #4]
   14a24:	str	ip, [r3, #8]
   14a28:	b	11070 <fseek@plt>
   14a2c:	andeq	r2, r1, r0, lsl #12
   14a30:	andeq	r0, r0, r8, asr #1
   14a34:	push	{r4, r5, r6, r7, lr}
   14a38:	mov	r2, #0
   14a3c:	sub	sp, sp, #36	; 0x24
   14a40:	mov	r3, #0
   14a44:	mov	r4, #0
   14a48:	mov	r6, r0
   14a4c:	strd	r2, [sp, #8]
   14a50:	strd	r2, [sp, #16]
   14a54:	strh	r4, [sp, #2]
   14a58:	bl	10fbc <getpid@plt>
   14a5c:	ldr	r3, [pc, #196]	; 14b28 <b64_decode@@Base+0x1490>
   14a60:	ldr	ip, [pc, #196]	; 14b2c <b64_decode@@Base+0x1494>
   14a64:	add	r3, pc, r3
   14a68:	mvn	lr, #0
   14a6c:	mov	r7, #1
   14a70:	ldr	r2, [pc, #184]	; 14b30 <b64_decode@@Base+0x1498>
   14a74:	mov	r1, #66	; 0x42
   14a78:	str	r0, [sp, #24]
   14a7c:	ldr	r5, [r3, ip]
   14a80:	mov	r0, r6
   14a84:	strh	r7, [sp]
   14a88:	str	r4, [r5, #4]
   14a8c:	str	r4, [r5, #12]
   14a90:	str	r4, [r5, #8]
   14a94:	str	r4, [r5, #20]
   14a98:	str	lr, [r5, #16]
   14a9c:	bl	10f68 <open64@plt>
   14aa0:	subs	r6, r0, #0
   14aa4:	movlt	r0, r4
   14aa8:	blt	14b0c <b64_decode@@Base+0x1474>
   14aac:	mov	r4, sp
   14ab0:	mov	r2, r4
   14ab4:	mov	r1, #14
   14ab8:	mov	r0, r6
   14abc:	bl	11034 <fcntl64@plt>
   14ac0:	cmp	r0, #0
   14ac4:	beq	14ad8 <b64_decode@@Base+0x1440>
   14ac8:	bl	10fe0 <__errno_location@plt>
   14acc:	ldr	r3, [r0]
   14ad0:	cmp	r3, #4
   14ad4:	beq	14ab0 <b64_decode@@Base+0x1418>
   14ad8:	ldr	r1, [pc, #84]	; 14b34 <b64_decode@@Base+0x149c>
   14adc:	mov	r0, r6
   14ae0:	add	r1, pc, r1
   14ae4:	bl	10e9c <fdopen@plt>
   14ae8:	cmp	r0, #0
   14aec:	mov	r4, r0
   14af0:	str	r0, [r5]
   14af4:	beq	14b14 <b64_decode@@Base+0x147c>
   14af8:	mov	r4, #1
   14afc:	mov	r1, #0
   14b00:	str	r4, [r5, #24]
   14b04:	bl	10ecc <setbuf@plt>
   14b08:	mov	r0, r4
   14b0c:	add	sp, sp, #36	; 0x24
   14b10:	pop	{r4, r5, r6, r7, pc}
   14b14:	mov	r0, r6
   14b18:	bl	11088 <close@plt>
   14b1c:	mov	r0, r4
   14b20:	add	sp, sp, #36	; 0x24
   14b24:	pop	{r4, r5, r6, r7, pc}
   14b28:	muleq	r1, r4, r5
   14b2c:	andeq	r0, r0, r8, asr #1
   14b30:			; <UNDEFINED> instruction: 0x000001b6
   14b34:	andeq	r1, r0, ip, ror lr
   14b38:	push	{r4, r5, r6, lr}
   14b3c:	mov	r4, r1
   14b40:	ldr	r5, [pc, #248]	; 14c40 <b64_decode@@Base+0x15a8>
   14b44:	ldr	ip, [r4, #8]
   14b48:	ldr	lr, [r4, #12]
   14b4c:	ldr	r6, [r4]
   14b50:	cmp	ip, #0
   14b54:	mov	r1, r0
   14b58:	add	r5, pc, r5
   14b5c:	add	r0, r6, lr
   14b60:	ble	14b9c <b64_decode@@Base+0x1504>
   14b64:	ldrb	r3, [r1]
   14b68:	cmp	r3, #47	; 0x2f
   14b6c:	addeq	r2, r1, #1
   14b70:	ldrbeq	r3, [r1, #1]
   14b74:	movne	r2, r1
   14b78:	cmp	r3, #0
   14b7c:	beq	14b9c <b64_decode@@Base+0x1504>
   14b80:	cmp	r3, #47	; 0x2f
   14b84:	moveq	r1, r2
   14b88:	ldrb	r3, [r2, #1]!
   14b8c:	subeq	ip, ip, #1
   14b90:	cmp	r3, #0
   14b94:	cmpne	ip, #0
   14b98:	bne	14b80 <b64_decode@@Base+0x14e8>
   14b9c:	cmp	lr, #0
   14ba0:	bne	14bc0 <b64_decode@@Base+0x1528>
   14ba4:	bl	10f50 <strcpy@plt>
   14ba8:	ldr	r0, [r4]
   14bac:	bl	14a34 <b64_decode@@Base+0x139c>
   14bb0:	cmp	r0, #0
   14bb4:	beq	14bd8 <b64_decode@@Base+0x1540>
   14bb8:	mov	r0, #0
   14bbc:	pop	{r4, r5, r6, pc}
   14bc0:	ldrb	r3, [r1]
   14bc4:	cmp	r3, #47	; 0x2f
   14bc8:	movne	r3, #47	; 0x2f
   14bcc:	addne	r0, r0, #1
   14bd0:	strbne	r3, [r6, lr]
   14bd4:	b	14ba4 <b64_decode@@Base+0x150c>
   14bd8:	ldr	r0, [r4]
   14bdc:	bl	14778 <b64_decode@@Base+0x10e0>
   14be0:	cmp	r0, #0
   14be4:	bne	14c1c <b64_decode@@Base+0x1584>
   14be8:	ldr	r0, [r4]
   14bec:	bl	14a34 <b64_decode@@Base+0x139c>
   14bf0:	cmp	r0, #0
   14bf4:	bne	14bb8 <b64_decode@@Base+0x1520>
   14bf8:	ldr	r3, [pc, #68]	; 14c44 <b64_decode@@Base+0x15ac>
   14bfc:	ldr	r1, [pc, #68]	; 14c48 <b64_decode@@Base+0x15b0>
   14c00:	ldr	r2, [r4]
   14c04:	ldr	r3, [r5, r3]
   14c08:	add	r1, pc, r1
   14c0c:	ldr	r0, [r3]
   14c10:	bl	10fd4 <fprintf@plt>
   14c14:	mvn	r0, #0
   14c18:	pop	{r4, r5, r6, pc}
   14c1c:	ldr	r3, [pc, #32]	; 14c44 <b64_decode@@Base+0x15ac>
   14c20:	ldr	r1, [pc, #36]	; 14c4c <b64_decode@@Base+0x15b4>
   14c24:	ldr	r2, [r4]
   14c28:	ldr	r3, [r5, r3]
   14c2c:	add	r1, pc, r1
   14c30:	ldr	r0, [r3]
   14c34:	bl	10fd4 <fprintf@plt>
   14c38:	mvn	r0, #0
   14c3c:	pop	{r4, r5, r6, pc}
   14c40:	andeq	r2, r1, r0, lsr #9
   14c44:	strheq	r0, [r0], -r8
   14c48:	andeq	r1, r0, ip, ror #26
   14c4c:	andeq	r1, r0, r4, lsr sp
   14c50:	ldr	r3, [pc, #96]	; 14cb8 <b64_decode@@Base+0x1620>
   14c54:	ldr	r2, [pc, #96]	; 14cbc <b64_decode@@Base+0x1624>
   14c58:	add	r3, pc, r3
   14c5c:	push	{r4, lr}
   14c60:	ldr	r4, [r3, r2]
   14c64:	ldr	r0, [r4]
   14c68:	cmp	r0, #0
   14c6c:	beq	14c8c <b64_decode@@Base+0x15f4>
   14c70:	ldr	r3, [r4, #8]
   14c74:	cmp	r3, #0
   14c78:	bne	14c9c <b64_decode@@Base+0x1604>
   14c7c:	bl	11028 <fclose@plt>
   14c80:	mov	r3, #0
   14c84:	str	r3, [r4]
   14c88:	str	r3, [r4, #12]
   14c8c:	mov	r3, #0
   14c90:	str	r3, [r4, #24]
   14c94:	ldr	r0, [r4, #20]
   14c98:	pop	{r4, pc}
   14c9c:	ldr	r2, [r4, #24]
   14ca0:	cmp	r2, #0
   14ca4:	bge	14c7c <b64_decode@@Base+0x15e4>
   14ca8:	mov	r0, r3
   14cac:	bl	13ca4 <b64_decode@@Base+0x60c>
   14cb0:	ldr	r0, [r4]
   14cb4:	b	14c7c <b64_decode@@Base+0x15e4>
   14cb8:	andeq	r2, r1, r0, lsr #7
   14cbc:	andeq	r0, r0, r8, asr #1
   14cc0:	push	{r4, lr}
   14cc4:	mov	r4, r0
   14cc8:	mov	r0, #1
   14ccc:	bl	13d00 <b64_decode@@Base+0x668>
   14cd0:	str	r4, [r0]
   14cd4:	pop	{r4, pc}
   14cd8:	push	{r4, r5, r6, lr}
   14cdc:	mov	r5, r0
   14ce0:	mov	r0, #2
   14ce4:	mov	r4, r1
   14ce8:	bl	13d00 <b64_decode@@Base+0x668>
   14cec:	str	r5, [r0]
   14cf0:	str	r4, [r0, #4]
   14cf4:	pop	{r4, r5, r6, pc}
   14cf8:	push	{r4, r5, r6, lr}
   14cfc:	mov	r5, r0
   14d00:	mov	r0, #2
   14d04:	mov	r4, r1
   14d08:	bl	13d00 <b64_decode@@Base+0x668>
   14d0c:	str	r5, [r0]
   14d10:	str	r4, [r0, #4]
   14d14:	pop	{r4, r5, r6, pc}
   14d18:	mov	r2, #0
   14d1c:	push	{r4, r5, r6, r7, r8, lr}
   14d20:	mov	r3, r2
   14d24:	sub	sp, sp, #32
   14d28:	mov	r5, r1
   14d2c:	mov	r7, r2
   14d30:	mov	r4, r1
   14d34:	mov	r8, #1
   14d38:	str	r2, [sp]
   14d3c:	str	r2, [sp, #4]
   14d40:	str	r2, [sp, #8]
   14d44:	str	r2, [sp, #12]
   14d48:	str	r2, [sp, #16]
   14d4c:	str	r2, [sp, #20]
   14d50:	str	r2, [sp, #24]
   14d54:	str	r2, [sp, #28]
   14d58:	lsr	r2, r3, #5
   14d5c:	ldr	lr, [r1, #40]	; 0x28
   14d60:	add	ip, sp, #32
   14d64:	cmp	lr, #0
   14d68:	add	r2, ip, r2, lsl #2
   14d6c:	and	r6, r3, #31
   14d70:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   14d74:	add	r3, r3, #1
   14d78:	orrne	ip, ip, r8, lsl r6
   14d7c:	addne	r7, r7, #1
   14d80:	strne	ip, [r2, #-32]	; 0xffffffe0
   14d84:	cmp	r3, #252	; 0xfc
   14d88:	add	r1, r1, #24
   14d8c:	bne	14d58 <b64_decode@@Base+0x16c0>
   14d90:	add	r7, r7, r7, lsl #2
   14d94:	add	r1, r7, #17
   14d98:	bl	14cf8 <b64_decode@@Base+0x1660>
   14d9c:	ldr	r0, [r5]
   14da0:	bl	14cc0 <b64_decode@@Base+0x1628>
   14da4:	ldr	r0, [r5, #8]
   14da8:	bl	14cc0 <b64_decode@@Base+0x1628>
   14dac:	ldr	r0, [r5, #12]
   14db0:	bl	14cc0 <b64_decode@@Base+0x1628>
   14db4:	ldrd	r0, [r5, #16]
   14db8:	bl	14cd8 <b64_decode@@Base+0x1640>
   14dbc:	ldrd	r0, [r5, #24]
   14dc0:	bl	14cd8 <b64_decode@@Base+0x1640>
   14dc4:	ldrd	r0, [r5, #32]
   14dc8:	bl	14cd8 <b64_decode@@Base+0x1640>
   14dcc:	sub	r6, sp, #4
   14dd0:	add	r7, sp, #28
   14dd4:	ldr	r0, [r6, #4]!
   14dd8:	bl	14cc0 <b64_decode@@Base+0x1628>
   14ddc:	cmp	r7, r6
   14de0:	bne	14dd4 <b64_decode@@Base+0x173c>
   14de4:	add	r5, r5, #6016	; 0x1780
   14de8:	add	r5, r5, #32
   14dec:	ldr	r3, [r4, #40]	; 0x28
   14df0:	subs	r0, r3, #0
   14df4:	beq	14e0c <b64_decode@@Base+0x1774>
   14df8:	bl	14cc0 <b64_decode@@Base+0x1628>
   14dfc:	ldrd	r0, [r4, #48]	; 0x30
   14e00:	bl	14cd8 <b64_decode@@Base+0x1640>
   14e04:	ldrd	r0, [r4, #56]	; 0x38
   14e08:	bl	14cd8 <b64_decode@@Base+0x1640>
   14e0c:	add	r4, r4, #24
   14e10:	cmp	r4, r5
   14e14:	bne	14dec <b64_decode@@Base+0x1754>
   14e18:	add	sp, sp, #32
   14e1c:	pop	{r4, r5, r6, r7, r8, pc}
   14e20:	push	{r4, lr}
   14e24:	mov	r0, #1
   14e28:	bl	13d60 <b64_decode@@Base+0x6c8>
   14e2c:	subs	r3, r0, #0
   14e30:	popeq	{r4, pc}
   14e34:	ldr	r0, [r3]
   14e38:	pop	{r4, lr}
   14e3c:	b	13c24 <b64_decode@@Base+0x58c>
   14e40:	push	{r4, lr}
   14e44:	mov	r0, #2
   14e48:	bl	13d60 <b64_decode@@Base+0x6c8>
   14e4c:	subs	r2, r0, #0
   14e50:	beq	14e74 <b64_decode@@Base+0x17dc>
   14e54:	ldr	r0, [r2]
   14e58:	bl	13c24 <b64_decode@@Base+0x58c>
   14e5c:	mov	r3, r0
   14e60:	ldr	r0, [r2, #4]
   14e64:	bl	13c24 <b64_decode@@Base+0x58c>
   14e68:	mov	r1, r0
   14e6c:	mov	r0, r3
   14e70:	pop	{r4, pc}
   14e74:	mov	r3, r2
   14e78:	mov	r1, r2
   14e7c:	mov	r0, r3
   14e80:	pop	{r4, pc}
   14e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e88:	sub	sp, sp, #28
   14e8c:	mov	r8, r1
   14e90:	str	r3, [sp, #12]
   14e94:	mov	r4, #0
   14e98:	add	r3, r1, #52	; 0x34
   14e9c:	add	r1, r1, #16
   14ea0:	str	r0, [sp, #20]
   14ea4:	str	r2, [sp, #16]
   14ea8:	ldr	r2, [r3, #-4]!
   14eac:	cmp	r2, #0
   14eb0:	addne	r4, r4, #1
   14eb4:	cmp	r1, r3
   14eb8:	bne	14ea8 <b64_decode@@Base+0x1810>
   14ebc:	add	r4, r4, #4
   14ec0:	lsl	r4, r4, #3
   14ec4:	mov	r0, r4
   14ec8:	bl	10f8c <malloc@plt>
   14ecc:	subs	r6, r0, #0
   14ed0:	beq	14fa4 <b64_decode@@Base+0x190c>
   14ed4:	ldr	r3, [sp, #12]
   14ed8:	mov	r4, #0
   14edc:	str	r3, [r6, #4]
   14ee0:	str	r4, [r6]
   14ee4:	bl	14e20 <b64_decode@@Base+0x1788>
   14ee8:	mov	r7, r4
   14eec:	add	r5, r8, #12
   14ef0:	str	r0, [r6, #12]
   14ef4:	bl	14e20 <b64_decode@@Base+0x1788>
   14ef8:	str	r0, [r6, #16]
   14efc:	bl	14e20 <b64_decode@@Base+0x1788>
   14f00:	str	r0, [r6, #20]
   14f04:	b	14f14 <b64_decode@@Base+0x187c>
   14f08:	add	r4, r4, #1
   14f0c:	cmp	r4, #9
   14f10:	beq	14f90 <b64_decode@@Base+0x18f8>
   14f14:	ldr	r3, [r5, #4]!
   14f18:	cmp	r3, #0
   14f1c:	beq	14f08 <b64_decode@@Base+0x1870>
   14f20:	bl	14e20 <b64_decode@@Base+0x1788>
   14f24:	lsl	r3, r4, #17
   14f28:	add	r3, r3, #27262976	; 0x1a00000
   14f2c:	add	r3, r3, #65536	; 0x10000
   14f30:	cmp	r0, r3
   14f34:	bne	14ff8 <b64_decode@@Base+0x1960>
   14f38:	bl	14e20 <b64_decode@@Base+0x1788>
   14f3c:	lsr	sl, r0, #1
   14f40:	lsl	fp, sl, #3
   14f44:	mov	r0, fp
   14f48:	bl	10f8c <malloc@plt>
   14f4c:	subs	r9, r0, #0
   14f50:	beq	15008 <b64_decode@@Base+0x1970>
   14f54:	add	r1, r6, r7, lsl #3
   14f58:	cmp	sl, #0
   14f5c:	str	sl, [r1, #24]
   14f60:	str	r9, [r1, #28]
   14f64:	sub	fp, sl, #1
   14f68:	beq	14f80 <b64_decode@@Base+0x18e8>
   14f6c:	bl	14e40 <b64_decode@@Base+0x17a8>
   14f70:	sub	fp, fp, #1
   14f74:	cmn	fp, #1
   14f78:	strd	r0, [r9], #8
   14f7c:	bne	14f6c <b64_decode@@Base+0x18d4>
   14f80:	add	r4, r4, #1
   14f84:	cmp	r4, #9
   14f88:	add	r7, r7, #1
   14f8c:	bne	14f14 <b64_decode@@Base+0x187c>
   14f90:	ldr	r3, [sp, #16]
   14f94:	mov	r0, r6
   14f98:	str	r6, [r3]
   14f9c:	add	sp, sp, #28
   14fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fa4:	mvn	r5, #0
   14fa8:	cmp	r4, #0
   14fac:	bne	14fec <b64_decode@@Base+0x1954>
   14fb0:	ldr	r3, [pc, #92]	; 15014 <b64_decode@@Base+0x197c>
   14fb4:	mov	r4, r5
   14fb8:	add	r3, pc, r3
   14fbc:	ldr	r0, [pc, #84]	; 15018 <b64_decode@@Base+0x1980>
   14fc0:	ldr	r2, [sp, #12]
   14fc4:	ldr	r1, [sp, #20]
   14fc8:	str	r4, [sp]
   14fcc:	add	r0, pc, r0
   14fd0:	bl	13eac <b64_decode@@Base+0x814>
   14fd4:	mov	r2, r5
   14fd8:	mov	r1, r6
   14fdc:	mov	r0, r8
   14fe0:	add	sp, sp, #28
   14fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fe8:	b	13ee0 <b64_decode@@Base+0x848>
   14fec:	ldr	r3, [pc, #40]	; 1501c <b64_decode@@Base+0x1984>
   14ff0:	add	r3, pc, r3
   14ff4:	b	14fbc <b64_decode@@Base+0x1924>
   14ff8:	ldr	r3, [pc, #32]	; 15020 <b64_decode@@Base+0x1988>
   14ffc:	mov	r5, r4
   15000:	add	r3, pc, r3
   15004:	b	14fbc <b64_decode@@Base+0x1924>
   15008:	mov	r5, r4
   1500c:	mov	r4, fp
   15010:	b	14fa8 <b64_decode@@Base+0x1910>
   15014:	ldrdeq	r1, [r0], -r8
   15018:	andeq	r1, r0, r8, ror #19
   1501c:			; <UNDEFINED> instruction: 0x000019b4
   15020:	muleq	r0, r0, r9
   15024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15028:	sub	sp, sp, #36	; 0x24
   1502c:	mov	r9, r0
   15030:	bl	14e20 <b64_decode@@Base+0x1788>
   15034:	mov	r7, #0
   15038:	sub	r4, sp, #4
   1503c:	add	r5, sp, #28
   15040:	str	r0, [r9]
   15044:	bl	14e20 <b64_decode@@Base+0x1788>
   15048:	str	r0, [r9, #8]
   1504c:	bl	14e20 <b64_decode@@Base+0x1788>
   15050:	str	r0, [r9, #12]
   15054:	bl	14e40 <b64_decode@@Base+0x17a8>
   15058:	strd	r0, [r9, #16]
   1505c:	bl	14e40 <b64_decode@@Base+0x17a8>
   15060:	strd	r0, [r9, #24]
   15064:	bl	14e40 <b64_decode@@Base+0x17a8>
   15068:	ldr	r2, [pc, #264]	; 15178 <b64_decode@@Base+0x1ae0>
   1506c:	strd	r0, [r9, #32]
   15070:	add	r0, r9, #40	; 0x28
   15074:	mov	r1, r7
   15078:	bl	10ff8 <memset@plt>
   1507c:	bl	14e20 <b64_decode@@Base+0x1788>
   15080:	str	r0, [r4, #4]!
   15084:	bl	15d68 <__gcov_sort_n_vals@@Base+0x64c>
   15088:	cmp	r4, r5
   1508c:	add	r7, r7, r0
   15090:	bne	1507c <b64_decode@@Base+0x19e4>
   15094:	cmp	r7, #0
   15098:	sub	r7, r7, #1
   1509c:	beq	15164 <b64_decode@@Base+0x1acc>
   150a0:	ldr	r8, [pc, #212]	; 1517c <b64_decode@@Base+0x1ae4>
   150a4:	ldr	sl, [pc, #212]	; 15180 <b64_decode@@Base+0x1ae8>
   150a8:	mov	r4, #0
   150ac:	add	r8, pc, r8
   150b0:	add	sl, pc, sl
   150b4:	mov	r5, r4
   150b8:	mov	r6, r4
   150bc:	cmp	r4, #0
   150c0:	addeq	r3, sp, #32
   150c4:	addeq	r6, r3, r5, lsl #2
   150c8:	subeq	r6, r6, #36	; 0x24
   150cc:	beq	150e8 <b64_decode@@Base+0x1a50>
   150d0:	b	15110 <b64_decode@@Base+0x1a78>
   150d4:	ldr	r4, [r6, #4]!
   150d8:	add	r3, r5, #1
   150dc:	cmp	r4, #0
   150e0:	bne	15108 <b64_decode@@Base+0x1a70>
   150e4:	mov	r5, r3
   150e8:	cmp	r5, #7
   150ec:	bls	150d4 <b64_decode@@Base+0x1a3c>
   150f0:	mov	r0, r8
   150f4:	bl	13eac <b64_decode@@Base+0x814>
   150f8:	ldr	r4, [r6, #4]!
   150fc:	add	r3, r5, #1
   15100:	cmp	r4, #0
   15104:	beq	150e4 <b64_decode@@Base+0x1a4c>
   15108:	lsl	r6, r5, #5
   1510c:	mov	r5, r3
   15110:	tst	r4, #1
   15114:	bne	15128 <b64_decode@@Base+0x1a90>
   15118:	lsr	r4, r4, #1
   1511c:	tst	r4, #1
   15120:	add	r6, r6, #1
   15124:	beq	15118 <b64_decode@@Base+0x1a80>
   15128:	cmp	r6, #251	; 0xfb
   1512c:	bhi	1516c <b64_decode@@Base+0x1ad4>
   15130:	bl	14e20 <b64_decode@@Base+0x1788>
   15134:	add	fp, r6, r6, lsl #1
   15138:	sub	r7, r7, #1
   1513c:	add	fp, r9, fp, lsl #3
   15140:	lsr	r4, r4, #1
   15144:	add	r6, r6, #1
   15148:	str	r0, [fp, #40]	; 0x28
   1514c:	bl	14e40 <b64_decode@@Base+0x17a8>
   15150:	strd	r0, [fp, #48]	; 0x30
   15154:	bl	14e40 <b64_decode@@Base+0x17a8>
   15158:	cmn	r7, #1
   1515c:	strd	r0, [fp, #56]	; 0x38
   15160:	bne	150bc <b64_decode@@Base+0x1a24>
   15164:	add	sp, sp, #36	; 0x24
   15168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1516c:	mov	r0, sl
   15170:	bl	13eac <b64_decode@@Base+0x814>
   15174:	b	15130 <b64_decode@@Base+0x1a98>
   15178:	andeq	r1, r0, r0, lsr #15
   1517c:	andeq	r1, r0, ip, lsr #18
   15180:	andeq	r1, r0, r8, ror #18
   15184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15188:	sub	sp, sp, #6080	; 0x17c0
   1518c:	sub	sp, sp, #28
   15190:	mov	r4, r1
   15194:	strd	r2, [sp, #4]
   15198:	add	r3, sp, #6144	; 0x1800
   1519c:	mov	r9, r0
   151a0:	ldr	r7, [r3]
   151a4:	add	r3, sp, #6144	; 0x1800
   151a8:	add	r3, r3, #4
   151ac:	ldr	r6, [r3]
   151b0:	add	r3, sp, #6144	; 0x1800
   151b4:	add	r3, r3, #8
   151b8:	ldr	sl, [r3]
   151bc:	bl	14e20 <b64_decode@@Base+0x1788>
   151c0:	add	r3, r4, #12
   151c4:	mov	r2, r9
   151c8:	str	r3, [sp, #12]
   151cc:	mov	r1, r0
   151d0:	mov	r0, r3
   151d4:	bl	1483c <b64_decode@@Base+0x11a4>
   151d8:	cmp	r0, #0
   151dc:	beq	15464 <b64_decode@@Base+0x1dcc>
   151e0:	bl	14e20 <b64_decode@@Base+0x1788>
   151e4:	ldr	r3, [r4, #8]
   151e8:	cmp	r0, r3
   151ec:	bne	15280 <b64_decode@@Base+0x1be8>
   151f0:	ldr	fp, [pc, #628]	; 1546c <b64_decode@@Base+0x1dd4>
   151f4:	add	r5, sp, #16
   151f8:	add	fp, pc, fp
   151fc:	bl	13bd4 <b64_decode@@Base+0x53c>
   15200:	str	r0, [r6]
   15204:	bl	14e20 <b64_decode@@Base+0x1788>
   15208:	cmp	r0, #-1560281088	; 0xa3000000
   1520c:	bne	152c4 <b64_decode@@Base+0x1c2c>
   15210:	bl	14e20 <b64_decode@@Base+0x1788>
   15214:	mov	r0, r5
   15218:	bl	15024 <b64_decode@@Base+0x198c>
   1521c:	bl	13bf8 <b64_decode@@Base+0x560>
   15220:	add	r2, sp, #2000	; 0x7d0
   15224:	add	r2, r2, #8
   15228:	subs	r8, r0, #0
   1522c:	bne	153f8 <b64_decode@@Base+0x1d60>
   15230:	ldr	r3, [r7]
   15234:	cmp	r3, #0
   15238:	bne	15290 <b64_decode@@Base+0x1bf8>
   1523c:	ldr	r3, [r2, #-1992]	; 0xfffff838
   15240:	cmp	r3, sl
   15244:	bne	151fc <b64_decode@@Base+0x1b64>
   15248:	ldr	r3, [sp, #8]
   1524c:	ldr	r2, [r2, #-1984]	; 0xfffff840
   15250:	ldr	r3, [r3]
   15254:	cmp	r2, r3
   15258:	bne	151fc <b64_decode@@Base+0x1b64>
   1525c:	ldr	r2, [pc, #524]	; 15470 <b64_decode@@Base+0x1dd8>
   15260:	mov	r1, r5
   15264:	ldr	r0, [sp, #4]
   15268:	bl	10f14 <memcpy@plt>
   1526c:	ldr	r3, [r6]
   15270:	str	r3, [r7]
   15274:	b	151fc <b64_decode@@Base+0x1b64>
   15278:	cmp	r0, #0
   1527c:	bne	15438 <b64_decode@@Base+0x1da0>
   15280:	mov	r0, #0
   15284:	add	sp, sp, #6080	; 0x17c0
   15288:	add	sp, sp, #28
   1528c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15290:	ldr	r0, [pc, #476]	; 15474 <b64_decode@@Base+0x1ddc>
   15294:	bl	10f8c <malloc@plt>
   15298:	ldr	r2, [pc, #464]	; 15470 <b64_decode@@Base+0x1dd8>
   1529c:	mov	r1, r5
   152a0:	mov	r3, r0
   152a4:	str	r0, [fp]
   152a8:	add	r0, r0, #8
   152ac:	str	r3, [sp]
   152b0:	bl	10f14 <memcpy@plt>
   152b4:	ldr	r3, [sp]
   152b8:	str	r8, [r3]
   152bc:	ldr	fp, [fp]
   152c0:	b	151fc <b64_decode@@Base+0x1b64>
   152c4:	ldr	r5, [r4, #52]	; 0x34
   152c8:	cmp	r5, #0
   152cc:	beq	15278 <b64_decode@@Base+0x1be0>
   152d0:	ldr	r3, [r4, #56]	; 0x38
   152d4:	cmp	r0, #16777216	; 0x1000000
   152d8:	ldr	r8, [r3]
   152dc:	bne	15434 <b64_decode@@Base+0x1d9c>
   152e0:	ldr	r6, [pc, #400]	; 15478 <b64_decode@@Base+0x1de0>
   152e4:	mov	r5, #0
   152e8:	add	r6, pc, r6
   152ec:	add	r6, r6, #4
   152f0:	b	15334 <b64_decode@@Base+0x1c9c>
   152f4:	mov	r2, r6
   152f8:	mov	r3, r5
   152fc:	mov	r1, r4
   15300:	mov	r0, r9
   15304:	bl	14e84 <b64_decode@@Base+0x17ec>
   15308:	subs	r6, r0, #0
   1530c:	beq	15438 <b64_decode@@Base+0x1da0>
   15310:	bl	14e20 <b64_decode@@Base+0x1788>
   15314:	ldr	r3, [r4, #52]	; 0x34
   15318:	add	r5, r5, #1
   1531c:	cmp	r3, r5
   15320:	beq	15278 <b64_decode@@Base+0x1be0>
   15324:	ldr	r3, [r4, #56]	; 0x38
   15328:	cmp	r0, #16777216	; 0x1000000
   1532c:	ldr	r8, [r3, r5, lsl #2]
   15330:	bne	15438 <b64_decode@@Base+0x1da0>
   15334:	bl	14e20 <b64_decode@@Base+0x1788>
   15338:	cmp	r0, #0
   1533c:	beq	15310 <b64_decode@@Base+0x1c78>
   15340:	cmp	r0, #3
   15344:	bne	15438 <b64_decode@@Base+0x1da0>
   15348:	cmp	r8, #0
   1534c:	beq	152f4 <b64_decode@@Base+0x1c5c>
   15350:	ldr	r3, [r8]
   15354:	cmp	r4, r3
   15358:	bne	152f4 <b64_decode@@Base+0x1c5c>
   1535c:	bl	14e20 <b64_decode@@Base+0x1788>
   15360:	ldr	r3, [r8, #4]
   15364:	cmp	r0, r3
   15368:	bne	15438 <b64_decode@@Base+0x1da0>
   1536c:	bl	14e20 <b64_decode@@Base+0x1788>
   15370:	ldr	r3, [r8, #8]
   15374:	cmp	r0, r3
   15378:	bne	15438 <b64_decode@@Base+0x1da0>
   1537c:	bl	14e20 <b64_decode@@Base+0x1788>
   15380:	ldr	r3, [r8, #12]
   15384:	cmp	r0, r3
   15388:	bne	15438 <b64_decode@@Base+0x1da0>
   1538c:	ldr	r7, [pc, #232]	; 1547c <b64_decode@@Base+0x1de4>
   15390:	ldr	fp, [sp, #12]
   15394:	add	r8, r8, #16
   15398:	ldr	sl, [fp, #4]!
   1539c:	cmp	sl, #0
   153a0:	beq	153d8 <b64_decode@@Base+0x1d40>
   153a4:	bl	14e20 <b64_decode@@Base+0x1788>
   153a8:	str	r0, [sp]
   153ac:	bl	14e20 <b64_decode@@Base+0x1788>
   153b0:	ldr	r3, [sp]
   153b4:	cmp	r3, r7
   153b8:	bne	15438 <b64_decode@@Base+0x1da0>
   153bc:	ldr	r3, [r8]
   153c0:	mov	r1, r3
   153c4:	cmp	r0, r3, lsl #1
   153c8:	bne	15438 <b64_decode@@Base+0x1da0>
   153cc:	ldr	r0, [r8, #4]
   153d0:	blx	sl
   153d4:	add	r8, r8, #8
   153d8:	ldr	r3, [pc, #160]	; 15480 <b64_decode@@Base+0x1de8>
   153dc:	add	r7, r7, #131072	; 0x20000
   153e0:	cmp	r7, r3
   153e4:	bne	15398 <b64_decode@@Base+0x1d00>
   153e8:	bl	13bf8 <b64_decode@@Base+0x560>
   153ec:	cmp	r0, #0
   153f0:	beq	15310 <b64_decode@@Base+0x1c78>
   153f4:	mov	r8, r0
   153f8:	cmp	r8, #0
   153fc:	blt	15428 <b64_decode@@Base+0x1d90>
   15400:	ldr	r2, [pc, #124]	; 15484 <b64_decode@@Base+0x1dec>
   15404:	add	r2, pc, r2
   15408:	ldr	r0, [pc, #120]	; 15488 <b64_decode@@Base+0x1df0>
   1540c:	mov	r1, r9
   15410:	add	r0, pc, r0
   15414:	bl	13eac <b64_decode@@Base+0x814>
   15418:	mvn	r0, #0
   1541c:	add	sp, sp, #6080	; 0x17c0
   15420:	add	sp, sp, #28
   15424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15428:	ldr	r2, [pc, #92]	; 1548c <b64_decode@@Base+0x1df4>
   1542c:	add	r2, pc, r2
   15430:	b	15408 <b64_decode@@Base+0x1d70>
   15434:	mov	r5, #0
   15438:	ldr	r2, [pc, #80]	; 15490 <b64_decode@@Base+0x1df8>
   1543c:	ldr	r0, [pc, #80]	; 15494 <b64_decode@@Base+0x1dfc>
   15440:	mov	r3, r5
   15444:	mov	r1, r9
   15448:	add	r2, pc, r2
   1544c:	add	r0, pc, r0
   15450:	bl	13eac <b64_decode@@Base+0x814>
   15454:	mvn	r0, #0
   15458:	add	sp, sp, #6080	; 0x17c0
   1545c:	add	sp, sp, #28
   15460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15464:	mvn	r0, #0
   15468:	b	15284 <b64_decode@@Base+0x1bec>
   1546c:	andeq	r2, r1, r0, lsl #9
   15470:	andeq	r1, r0, r8, asr #15
   15474:	ldrdeq	r1, [r0], -r0
   15478:	muleq	r1, r0, r3
   1547c:			; <UNDEFINED> instruction: 0x01a10000
   15480:			; <UNDEFINED> instruction: 0x01b30000
   15484:	andeq	r1, r0, ip, asr r6
   15488:	andeq	r1, r0, ip, lsl #13
   1548c:	andeq	r1, r0, r8, lsr #12
   15490:	andeq	r1, r0, r0, lsr #12
   15494:	andeq	r1, r0, r8, lsr #12
   15498:	ldr	r3, [pc, #72]	; 154e8 <b64_decode@@Base+0x1e50>
   1549c:	ldr	r2, [pc, #72]	; 154ec <b64_decode@@Base+0x1e54>
   154a0:	add	r3, pc, r3
   154a4:	push	{r4, r5, r6, lr}
   154a8:	mov	r5, r0
   154ac:	ldr	r4, [r3, r2]
   154b0:	ldr	r0, [r4, #8]
   154b4:	cmp	r0, #0
   154b8:	bne	154e0 <b64_decode@@Base+0x1e48>
   154bc:	lsl	r1, r5, #2
   154c0:	mov	r2, #0
   154c4:	ldr	r0, [r4]
   154c8:	bl	11070 <fseek@plt>
   154cc:	ldr	r0, [r4]
   154d0:	bl	10f38 <ftell@plt>
   154d4:	asr	r0, r0, #2
   154d8:	str	r0, [r4, #4]
   154dc:	pop	{r4, r5, r6, pc}
   154e0:	bl	13ca4 <b64_decode@@Base+0x60c>
   154e4:	b	154bc <b64_decode@@Base+0x1e24>
   154e8:	andeq	r1, r1, r8, asr fp
   154ec:	andeq	r0, r0, r8, asr #1
   154f0:	cmp	r2, #0
   154f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f8:	mov	r8, r0
   154fc:	sub	sp, sp, #20
   15500:	mov	r5, r1
   15504:	mov	r4, r3
   15508:	beq	156d8 <b64_decode@@Base+0x2040>
   1550c:	cmp	r4, #0
   15510:	bne	156f4 <b64_decode@@Base+0x205c>
   15514:	mov	r1, r5
   15518:	ldr	r5, [pc, #480]	; 15700 <b64_decode@@Base+0x2068>
   1551c:	mov	r0, #-1560281088	; 0xa3000000
   15520:	add	r5, pc, r5
   15524:	bl	14d18 <b64_decode@@Base+0x1680>
   15528:	ldr	r4, [r5]
   1552c:	cmp	r4, #0
   15530:	beq	1555c <b64_decode@@Base+0x1ec4>
   15534:	add	r1, r4, #8
   15538:	mov	r0, #-1560281088	; 0xa3000000
   1553c:	bl	14d18 <b64_decode@@Base+0x1680>
   15540:	ldr	r3, [r5]
   15544:	mov	r0, r3
   15548:	ldr	r4, [r3]
   1554c:	bl	10efc <free@plt>
   15550:	cmp	r4, #0
   15554:	str	r4, [r5]
   15558:	bne	15534 <b64_decode@@Base+0x1e9c>
   1555c:	ldr	r3, [r8, #52]	; 0x34
   15560:	cmp	r3, #0
   15564:	beq	156b0 <b64_decode@@Base+0x2018>
   15568:	ldr	r3, [pc, #404]	; 15704 <b64_decode@@Base+0x206c>
   1556c:	ldr	r9, [pc, #404]	; 15708 <b64_decode@@Base+0x2070>
   15570:	add	r3, pc, r3
   15574:	str	r3, [sp, #4]
   15578:	ldr	r3, [pc, #396]	; 1570c <b64_decode@@Base+0x2074>
   1557c:	mov	r7, #0
   15580:	add	r3, pc, r3
   15584:	str	r3, [sp, #12]
   15588:	b	155c4 <b64_decode@@Base+0x1f2c>
   1558c:	ldr	r3, [r8, #56]	; 0x38
   15590:	ldr	r4, [r3, r7, lsl #2]
   15594:	cmp	r4, #0
   15598:	beq	155a8 <b64_decode@@Base+0x1f10>
   1559c:	ldr	r3, [r4]
   155a0:	cmp	r3, r8
   155a4:	beq	156c0 <b64_decode@@Base+0x2028>
   155a8:	mov	r1, #0
   155ac:	mov	r0, #16777216	; 0x1000000
   155b0:	bl	14cf8 <b64_decode@@Base+0x1660>
   155b4:	ldr	r3, [r8, #52]	; 0x34
   155b8:	add	r7, r7, #1
   155bc:	cmp	r3, r7
   155c0:	beq	156b0 <b64_decode@@Base+0x2018>
   155c4:	ldr	r3, [sp, #4]
   155c8:	ldr	r4, [r3, #4]
   155cc:	cmp	r4, #0
   155d0:	beq	1558c <b64_decode@@Base+0x1ef4>
   155d4:	ldr	r3, [r4, #4]
   155d8:	cmp	r3, r7
   155dc:	bne	1558c <b64_decode@@Base+0x1ef4>
   155e0:	mov	r3, #1
   155e4:	mov	r1, #3
   155e8:	mov	r0, #16777216	; 0x1000000
   155ec:	add	r4, r4, #8
   155f0:	str	r3, [sp, #8]
   155f4:	bl	14cf8 <b64_decode@@Base+0x1660>
   155f8:	ldr	r0, [r4, #4]
   155fc:	bl	14cc0 <b64_decode@@Base+0x1628>
   15600:	ldr	r0, [r4, #8]
   15604:	bl	14cc0 <b64_decode@@Base+0x1628>
   15608:	ldr	r0, [r4, #12]
   1560c:	bl	14cc0 <b64_decode@@Base+0x1628>
   15610:	ldr	r5, [pc, #248]	; 15710 <b64_decode@@Base+0x2078>
   15614:	add	r4, r4, #16
   15618:	add	r6, r8, #12
   1561c:	b	1562c <b64_decode@@Base+0x1f94>
   15620:	add	r5, r5, #131072	; 0x20000
   15624:	cmp	r5, r9
   15628:	beq	1567c <b64_decode@@Base+0x1fe4>
   1562c:	ldr	r3, [r6, #4]!
   15630:	cmp	r3, #0
   15634:	beq	15620 <b64_decode@@Base+0x1f88>
   15638:	ldr	fp, [r4]
   1563c:	mov	r0, r5
   15640:	sub	sl, fp, #1
   15644:	lsl	r1, fp, #1
   15648:	bl	14cf8 <b64_decode@@Base+0x1660>
   1564c:	cmp	fp, #0
   15650:	ldr	fp, [r4, #4]
   15654:	beq	1566c <b64_decode@@Base+0x1fd4>
   15658:	sub	sl, sl, #1
   1565c:	ldrd	r0, [fp], #8
   15660:	bl	14cd8 <b64_decode@@Base+0x1640>
   15664:	cmn	sl, #1
   15668:	bne	15658 <b64_decode@@Base+0x1fc0>
   1566c:	add	r5, r5, #131072	; 0x20000
   15670:	cmp	r5, r9
   15674:	add	r4, r4, #8
   15678:	bne	1562c <b64_decode@@Base+0x1f94>
   1567c:	ldr	r3, [sp, #8]
   15680:	cmp	r3, #0
   15684:	beq	155b4 <b64_decode@@Base+0x1f1c>
   15688:	ldr	r4, [sp, #12]
   1568c:	mov	r2, #9
   15690:	mov	r0, r8
   15694:	ldr	r1, [r4, #4]
   15698:	bl	13ee0 <b64_decode@@Base+0x848>
   1569c:	ldr	r3, [r8, #52]	; 0x34
   156a0:	add	r7, r7, #1
   156a4:	cmp	r3, r7
   156a8:	str	r0, [r4, #4]
   156ac:	bne	155c4 <b64_decode@@Base+0x1f2c>
   156b0:	mov	r0, #0
   156b4:	add	sp, sp, #20
   156b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156bc:	b	14cc0 <b64_decode@@Base+0x1628>
   156c0:	mov	r1, #3
   156c4:	mov	r0, #16777216	; 0x1000000
   156c8:	bl	14cf8 <b64_decode@@Base+0x1660>
   156cc:	mov	r3, #0
   156d0:	str	r3, [sp, #8]
   156d4:	b	155f8 <b64_decode@@Base+0x1f60>
   156d8:	ldr	r1, [pc, #52]	; 15714 <b64_decode@@Base+0x207c>
   156dc:	ldr	r0, [pc, #52]	; 15718 <b64_decode@@Base+0x2080>
   156e0:	bl	14cf8 <b64_decode@@Base+0x1660>
   156e4:	ldr	r0, [r8, #8]
   156e8:	bl	14cc0 <b64_decode@@Base+0x1628>
   156ec:	cmp	r4, #0
   156f0:	beq	15514 <b64_decode@@Base+0x1e7c>
   156f4:	mov	r0, r4
   156f8:	bl	15498 <b64_decode@@Base+0x1e00>
   156fc:	b	15514 <b64_decode@@Base+0x1e7c>
   15700:	andeq	r2, r1, r8, asr r1
   15704:	andeq	r2, r1, r8, lsl #2
   15708:			; <UNDEFINED> instruction: 0x01b30000
   1570c:	strdeq	r2, [r1], -r8
   15710:			; <UNDEFINED> instruction: 0x01a10000
   15714:	teqmi	r8, sl, lsr #6
   15718:	strbvs	r6, [r3, -r1, ror #8]!

0001571c <__gcov_sort_n_vals@@Base>:
   1571c:	cmp	r1, #2
   15720:	bxle	lr
   15724:	sub	r1, r1, #3
   15728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1572c:	add	r2, r0, #8
   15730:	sub	sp, sp, #20
   15734:	mov	r6, r0
   15738:	bic	r7, r1, #1
   1573c:	mvn	r8, #15
   15740:	mov	lr, #0
   15744:	ldrd	r0, [r2]
   15748:	ldrd	r4, [r2, #16]
   1574c:	ldrd	sl, [r2, #8]
   15750:	add	r9, r2, #16
   15754:	cmp	r0, r4
   15758:	sbcs	r3, r1, r5
   1575c:	mov	ip, r9
   15760:	sub	r1, r6, r8
   15764:	strd	sl, [sp]
   15768:	mov	r3, lr
   1576c:	bge	157d4 <__gcov_sort_n_vals@@Base+0xb8>
   15770:	add	sl, r8, #16
   15774:	mvn	fp, #1
   15778:	add	sl, r2, sl
   1577c:	orr	fp, lr, fp
   15780:	str	r7, [sp, #8]
   15784:	str	r6, [sp, #12]
   15788:	b	157a0 <__gcov_sort_n_vals@@Base+0x84>
   1578c:	ldrd	r6, [ip, #-16]
   15790:	sub	r2, r2, #16
   15794:	cmp	r6, r4
   15798:	sbcs	r1, r7, r5
   1579c:	bge	157fc <__gcov_sort_n_vals@@Base+0xe0>
   157a0:	ldrd	r6, [r2, #-8]
   157a4:	lsl	r1, r3, #3
   157a8:	mov	r0, r3
   157ac:	strd	r6, [r2, #8]
   157b0:	ldrd	r6, [sl, r1]
   157b4:	sub	r3, r3, #2
   157b8:	cmp	r3, fp
   157bc:	strd	r6, [r2, #16]
   157c0:	mov	ip, r2
   157c4:	bne	1578c <__gcov_sort_n_vals@@Base+0x70>
   157c8:	ldr	r6, [sp, #12]
   157cc:	ldr	r7, [sp, #8]
   157d0:	add	r1, r6, r1
   157d4:	ldrd	r2, [sp]
   157d8:	cmp	lr, r7
   157dc:	sub	r8, r8, #16
   157e0:	strd	r2, [r1]
   157e4:	add	lr, lr, #2
   157e8:	strd	r4, [ip]
   157ec:	mov	r2, r9
   157f0:	bne	15744 <__gcov_sort_n_vals@@Base+0x28>
   157f4:	add	sp, sp, #20
   157f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157fc:	ldr	r6, [sp, #12]
   15800:	ldr	r7, [sp, #8]
   15804:	add	r1, r6, r0, lsl #3
   15808:	b	157d4 <__gcov_sort_n_vals@@Base+0xb8>
   1580c:	push	{r4, r5, r6, lr}
   15810:	ldr	r4, [pc, #76]	; 15864 <__gcov_sort_n_vals@@Base+0x148>
   15814:	smull	r2, r3, r4, r0
   15818:	asr	r4, r0, #31
   1581c:	rsb	r4, r4, r3, asr #1
   15820:	add	r4, r4, r4, lsl #3
   15824:	subs	r4, r0, r4
   15828:	bne	15860 <__gcov_sort_n_vals@@Base+0x144>
   1582c:	cmp	r0, #0
   15830:	mov	r6, r0
   15834:	ldr	r5, [r1]
   15838:	pople	{r4, r5, r6, pc}
   1583c:	add	r5, r5, #8
   15840:	mov	r0, r5
   15844:	add	r4, r4, #9
   15848:	mov	r1, #8
   1584c:	bl	1571c <__gcov_sort_n_vals@@Base>
   15850:	cmp	r6, r4
   15854:	add	r5, r5, #72	; 0x48
   15858:	bgt	15840 <__gcov_sort_n_vals@@Base+0x124>
   1585c:	pop	{r4, r5, r6, pc}
   15860:	bl	1107c <abort@plt>
   15864:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   15868:	ldr	r3, [r0, #48]	; 0x30
   1586c:	cmp	r3, #0
   15870:	bxeq	lr
   15874:	push	{r4, r5, r6, lr}
   15878:	ldr	lr, [r0, #52]	; 0x34
   1587c:	cmp	lr, #0
   15880:	popeq	{r4, r5, r6, pc}
   15884:	mov	r5, r0
   15888:	mov	r4, #0
   1588c:	add	r6, r0, #12
   15890:	ldr	r1, [r5, #56]	; 0x38
   15894:	mov	r2, r6
   15898:	mov	r3, #0
   1589c:	ldr	r1, [r1, r4, lsl #2]
   158a0:	add	r1, r1, #16
   158a4:	ldr	ip, [r2, #4]!
   158a8:	cmp	ip, #0
   158ac:	beq	158bc <__gcov_sort_n_vals@@Base+0x1a0>
   158b0:	cmp	r3, #8
   158b4:	beq	158d8 <__gcov_sort_n_vals@@Base+0x1bc>
   158b8:	add	r1, r1, #8
   158bc:	add	r3, r3, #1
   158c0:	cmp	r3, #9
   158c4:	bne	158a4 <__gcov_sort_n_vals@@Base+0x188>
   158c8:	add	r4, r4, #1
   158cc:	cmp	lr, r4
   158d0:	bne	15890 <__gcov_sort_n_vals@@Base+0x174>
   158d4:	pop	{r4, r5, r6, pc}
   158d8:	ldr	r0, [r1], #4
   158dc:	bl	1580c <__gcov_sort_n_vals@@Base+0xf0>
   158e0:	ldr	lr, [r5, #52]	; 0x34
   158e4:	b	158c8 <__gcov_sort_n_vals@@Base+0x1ac>
   158e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   158ec:	sub	sp, sp, #6080	; 0x17c0
   158f0:	ldr	ip, [pc, #396]	; 15a84 <__gcov_sort_n_vals@@Base+0x368>
   158f4:	sub	sp, sp, #36	; 0x24
   158f8:	add	ip, pc, ip
   158fc:	add	r5, sp, #2016	; 0x7e0
   15900:	mov	r4, r0
   15904:	mov	r6, r1
   15908:	mov	r1, #0
   1590c:	str	r1, [ip, #4]
   15910:	str	r1, [ip]
   15914:	mov	r8, r2
   15918:	mov	r7, r3
   1591c:	str	r1, [r5, #-2000]	; 0xfffff830
   15920:	str	r1, [r5, #-1996]	; 0xfffff834
   15924:	bl	15868 <__gcov_sort_n_vals@@Base+0x14c>
   15928:	mov	r1, r6
   1592c:	ldr	r0, [r4, #12]
   15930:	bl	14b38 <b64_decode@@Base+0x14a0>
   15934:	cmn	r0, #1
   15938:	beq	159b4 <__gcov_sort_n_vals@@Base+0x298>
   1593c:	bl	14e20 <b64_decode@@Base+0x1788>
   15940:	cmp	r0, #0
   15944:	beq	159c0 <__gcov_sort_n_vals@@Base+0x2a4>
   15948:	ldr	r2, [pc, #312]	; 15a88 <__gcov_sort_n_vals@@Base+0x36c>
   1594c:	ldr	r1, [r6]
   15950:	cmp	r0, r2
   15954:	beq	15a18 <__gcov_sort_n_vals@@Base+0x2fc>
   15958:	ldr	r0, [pc, #300]	; 15a8c <__gcov_sort_n_vals@@Base+0x370>
   1595c:	add	r0, pc, r0
   15960:	bl	13eac <b64_decode@@Base+0x814>
   15964:	ldr	r5, [pc, #292]	; 15a90 <__gcov_sort_n_vals@@Base+0x374>
   15968:	add	r5, pc, r5
   1596c:	ldr	r1, [r5, #4]
   15970:	cmp	r1, #0
   15974:	beq	15994 <__gcov_sort_n_vals@@Base+0x278>
   15978:	mov	r2, #9
   1597c:	mov	r0, r4
   15980:	bl	13ee0 <b64_decode@@Base+0x848>
   15984:	cmp	r0, #0
   15988:	mov	r1, r0
   1598c:	str	r0, [r5, #4]
   15990:	bne	15978 <__gcov_sort_n_vals@@Base+0x25c>
   15994:	bl	14c50 <b64_decode@@Base+0x15b8>
   15998:	cmp	r0, #0
   1599c:	beq	159b4 <__gcov_sort_n_vals@@Base+0x298>
   159a0:	blt	15a78 <__gcov_sort_n_vals@@Base+0x35c>
   159a4:	ldr	r0, [pc, #232]	; 15a94 <__gcov_sort_n_vals@@Base+0x378>
   159a8:	add	r0, pc, r0
   159ac:	ldr	r1, [r6]
   159b0:	bl	13eac <b64_decode@@Base+0x814>
   159b4:	add	sp, sp, #6080	; 0x17c0
   159b8:	add	sp, sp, #36	; 0x24
   159bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   159c0:	bl	149f0 <b64_decode@@Base+0x1358>
   159c4:	ldr	r1, [r5, #-2000]	; 0xfffff830
   159c8:	add	r9, sp, #24
   159cc:	cmp	r1, #0
   159d0:	beq	15a60 <__gcov_sort_n_vals@@Base+0x344>
   159d4:	add	r3, sp, #6144	; 0x1800
   159d8:	str	r7, [sp, #4]
   159dc:	ldr	r3, [r3]
   159e0:	mov	r1, r8
   159e4:	str	r3, [sp]
   159e8:	add	r2, r4, #16
   159ec:	mov	r3, r9
   159f0:	ldr	r0, [r6]
   159f4:	bl	1489c <b64_decode@@Base+0x1204>
   159f8:	cmn	r0, #1
   159fc:	beq	15964 <__gcov_sort_n_vals@@Base+0x248>
   15a00:	mov	r1, r9
   15a04:	ldr	r3, [r5, #-2000]	; 0xfffff830
   15a08:	ldr	r2, [r5, #-1996]	; 0xfffff834
   15a0c:	mov	r0, r4
   15a10:	bl	154f0 <b64_decode@@Base+0x1e58>
   15a14:	b	15964 <__gcov_sort_n_vals@@Base+0x248>
   15a18:	add	ip, sp, #20
   15a1c:	add	r3, sp, #16
   15a20:	str	r7, [sp, #8]
   15a24:	stm	sp, {r3, ip}
   15a28:	add	r3, sp, #6144	; 0x1800
   15a2c:	add	r9, sp, #24
   15a30:	ldr	r3, [r3]
   15a34:	mov	r0, r1
   15a38:	mov	r2, r9
   15a3c:	add	r3, r3, #8
   15a40:	mov	r1, r4
   15a44:	bl	15184 <b64_decode@@Base+0x1aec>
   15a48:	cmn	r0, #1
   15a4c:	beq	15964 <__gcov_sort_n_vals@@Base+0x248>
   15a50:	bl	149f0 <b64_decode@@Base+0x1358>
   15a54:	ldr	r1, [r5, #-2000]	; 0xfffff830
   15a58:	cmp	r1, #0
   15a5c:	bne	159d4 <__gcov_sort_n_vals@@Base+0x2b8>
   15a60:	ldr	r2, [pc, #48]	; 15a98 <__gcov_sort_n_vals@@Base+0x37c>
   15a64:	mov	r0, r9
   15a68:	bl	10ff8 <memset@plt>
   15a6c:	ldr	r3, [r5, #-1996]	; 0xfffff834
   15a70:	str	r3, [r5, #-2000]	; 0xfffff830
   15a74:	b	159d4 <__gcov_sort_n_vals@@Base+0x2b8>
   15a78:	ldr	r0, [pc, #28]	; 15a9c <__gcov_sort_n_vals@@Base+0x380>
   15a7c:	add	r0, pc, r0
   15a80:	b	159ac <__gcov_sort_n_vals@@Base+0x290>
   15a84:	andeq	r1, r1, r0, lsl #27
   15a88:	strbvs	r6, [r3, -r1, ror #8]!
   15a8c:	muleq	r0, r8, r1
   15a90:	andeq	r1, r1, r0, lsl sp
   15a94:	andeq	r1, r0, r0, lsr r1
   15a98:	andeq	r1, r0, r8, asr #15
   15a9c:	andeq	r1, r0, ip, lsr r0
   15aa0:	push	{r4, r5, r6, r7, r8, lr}
   15aa4:	sub	sp, sp, #6080	; 0x17c0
   15aa8:	sub	sp, sp, #32
   15aac:	add	r6, sp, #24
   15ab0:	add	r2, sp, #12
   15ab4:	mov	r8, r1
   15ab8:	mov	r1, r6
   15abc:	mov	r4, r0
   15ac0:	bl	140f8 <b64_decode@@Base+0xa60>
   15ac4:	add	r5, sp, #8
   15ac8:	mov	r7, r0
   15acc:	mov	r0, r5
   15ad0:	bl	1428c <b64_decode@@Base+0xbf4>
   15ad4:	cmp	r4, #0
   15ad8:	beq	15b00 <__gcov_sort_n_vals@@Base+0x3e4>
   15adc:	mov	r0, r4
   15ae0:	str	r6, [sp]
   15ae4:	mov	r3, r7
   15ae8:	mov	r2, r8
   15aec:	mov	r1, r5
   15af0:	bl	158e8 <__gcov_sort_n_vals@@Base+0x1cc>
   15af4:	ldr	r4, [r4, #4]
   15af8:	cmp	r4, #0
   15afc:	bne	15adc <__gcov_sort_n_vals@@Base+0x3c0>
   15b00:	ldr	r0, [sp, #8]
   15b04:	bl	10efc <free@plt>
   15b08:	add	sp, sp, #6080	; 0x17c0
   15b0c:	add	sp, sp, #32
   15b10:	pop	{r4, r5, r6, r7, r8, pc}
   15b14:	ldrb	r1, [r0, #4]
   15b18:	tst	r1, #1
   15b1c:	bxne	lr
   15b20:	push	{r4, lr}
   15b24:	lsr	r1, r1, #1
   15b28:	mov	r4, r0
   15b2c:	and	r1, r1, #1
   15b30:	ldr	r0, [r0]
   15b34:	bl	15aa0 <__gcov_sort_n_vals@@Base+0x384>
   15b38:	ldrb	r3, [r4, #4]
   15b3c:	bic	r3, r3, #3
   15b40:	orr	r3, r3, #3
   15b44:	strb	r3, [r4, #4]
   15b48:	pop	{r4, pc}
   15b4c:	push	{r4, r5, r6, lr}
   15b50:	ldr	r4, [pc, #84]	; 15bac <__gcov_sort_n_vals@@Base+0x490>
   15b54:	ldr	r5, [pc, #84]	; 15bb0 <__gcov_sort_n_vals@@Base+0x494>
   15b58:	add	r4, pc, r4
   15b5c:	mov	r0, r4
   15b60:	bl	15b14 <__gcov_sort_n_vals@@Base+0x3f8>
   15b64:	ldr	r3, [r4, #8]
   15b68:	add	r5, pc, r5
   15b6c:	cmp	r3, #0
   15b70:	ldrne	r2, [r4, #12]
   15b74:	strne	r2, [r3, #12]
   15b78:	ldr	r2, [pc, #52]	; 15bb4 <__gcov_sort_n_vals@@Base+0x498>
   15b7c:	add	r2, pc, r2
   15b80:	ldr	r2, [r2, #12]
   15b84:	cmp	r2, #0
   15b88:	strne	r3, [r2, #8]
   15b8c:	beq	15b98 <__gcov_sort_n_vals@@Base+0x47c>
   15b90:	pop	{r4, r5, r6, lr}
   15b94:	b	13c54 <b64_decode@@Base+0x5bc>
   15b98:	ldr	r2, [pc, #24]	; 15bb8 <__gcov_sort_n_vals@@Base+0x49c>
   15b9c:	ldr	r2, [r5, r2]
   15ba0:	pop	{r4, r5, r6, lr}
   15ba4:	str	r3, [r2, #4]
   15ba8:	b	13c54 <b64_decode@@Base+0x5bc>
   15bac:	andeq	r1, r1, ip, lsr #22
   15bb0:	muleq	r1, r0, r4
   15bb4:	andeq	r1, r1, r8, lsl #22
   15bb8:	andeq	r0, r0, r4, asr #1
   15bbc:	ldr	r1, [r0]
   15bc0:	push	{r4, r5, r6, lr}
   15bc4:	cmp	r1, #0
   15bc8:	ldr	r5, [pc, #156]	; 15c6c <__gcov_sort_n_vals@@Base+0x550>
   15bcc:	add	r5, pc, r5
   15bd0:	popeq	{r4, r5, r6, pc}
   15bd4:	ldr	r3, [r0, #52]	; 0x34
   15bd8:	cmp	r3, #0
   15bdc:	popeq	{r4, r5, r6, pc}
   15be0:	mov	r4, r0
   15be4:	mov	r2, #0
   15be8:	add	r0, r0, #12
   15bec:	bl	1483c <b64_decode@@Base+0x11a4>
   15bf0:	cmp	r0, #0
   15bf4:	popeq	{r4, r5, r6, pc}
   15bf8:	ldr	r6, [pc, #112]	; 15c70 <__gcov_sort_n_vals@@Base+0x554>
   15bfc:	add	r6, pc, r6
   15c00:	ldr	r2, [r6]
   15c04:	cmp	r2, #0
   15c08:	beq	15c20 <__gcov_sort_n_vals@@Base+0x504>
   15c0c:	ldr	r3, [pc, #96]	; 15c74 <__gcov_sort_n_vals@@Base+0x558>
   15c10:	str	r2, [r4, #4]
   15c14:	add	r3, pc, r3
   15c18:	str	r4, [r3]
   15c1c:	pop	{r4, r5, r6, pc}
   15c20:	ldr	r3, [pc, #80]	; 15c78 <__gcov_sort_n_vals@@Base+0x55c>
   15c24:	ldr	r2, [pc, #80]	; 15c7c <__gcov_sort_n_vals@@Base+0x560>
   15c28:	mov	r0, #12
   15c2c:	ldr	r5, [r5, r3]
   15c30:	add	r2, pc, r2
   15c34:	ldr	r1, [r5]
   15c38:	bl	1483c <b64_decode@@Base+0x11a4>
   15c3c:	cmp	r0, #0
   15c40:	ldreq	r2, [r6]
   15c44:	beq	15c0c <__gcov_sort_n_vals@@Base+0x4f0>
   15c48:	ldr	r3, [r5, #4]
   15c4c:	cmp	r3, #0
   15c50:	str	r3, [r6, #8]
   15c54:	strne	r6, [r3, #12]
   15c58:	ldr	r3, [pc, #32]	; 15c80 <__gcov_sort_n_vals@@Base+0x564>
   15c5c:	add	r3, pc, r3
   15c60:	str	r3, [r5, #4]
   15c64:	ldr	r2, [r3]
   15c68:	b	15c0c <__gcov_sort_n_vals@@Base+0x4f0>
   15c6c:	andeq	r1, r1, ip, lsr #8
   15c70:	andeq	r1, r1, r8, lsl #21
   15c74:	andeq	r1, r1, r0, ror sl
   15c78:	andeq	r0, r0, r4, asr #1
   15c7c:	andeq	r0, r0, r8, ror #29
   15c80:	andeq	r1, r1, r8, lsr #20
   15c84:	cmp	r3, #0
   15c88:	cmpeq	r2, #0
   15c8c:	bne	15cb0 <__gcov_sort_n_vals@@Base+0x594>
   15c90:	cmp	r1, #0
   15c94:	movlt	r1, #-2147483648	; 0x80000000
   15c98:	movlt	r0, #0
   15c9c:	blt	15cac <__gcov_sort_n_vals@@Base+0x590>
   15ca0:	cmpeq	r0, #0
   15ca4:	mvnne	r1, #-2147483648	; 0x80000000
   15ca8:	mvnne	r0, #0
   15cac:	b	15d58 <__gcov_sort_n_vals@@Base+0x63c>
   15cb0:	sub	sp, sp, #8
   15cb4:	push	{sp, lr}
   15cb8:	cmp	r1, #0
   15cbc:	blt	15cdc <__gcov_sort_n_vals@@Base+0x5c0>
   15cc0:	cmp	r3, #0
   15cc4:	blt	15d10 <__gcov_sort_n_vals@@Base+0x5f4>
   15cc8:	bl	15dac <__gcov_sort_n_vals@@Base+0x690>
   15ccc:	ldr	lr, [sp, #4]
   15cd0:	add	sp, sp, #8
   15cd4:	pop	{r2, r3}
   15cd8:	bx	lr
   15cdc:	rsbs	r0, r0, #0
   15ce0:	sbc	r1, r1, r1, lsl #1
   15ce4:	cmp	r3, #0
   15ce8:	blt	15d34 <__gcov_sort_n_vals@@Base+0x618>
   15cec:	bl	15dac <__gcov_sort_n_vals@@Base+0x690>
   15cf0:	ldr	lr, [sp, #4]
   15cf4:	add	sp, sp, #8
   15cf8:	pop	{r2, r3}
   15cfc:	rsbs	r0, r0, #0
   15d00:	sbc	r1, r1, r1, lsl #1
   15d04:	rsbs	r2, r2, #0
   15d08:	sbc	r3, r3, r3, lsl #1
   15d0c:	bx	lr
   15d10:	rsbs	r2, r2, #0
   15d14:	sbc	r3, r3, r3, lsl #1
   15d18:	bl	15dac <__gcov_sort_n_vals@@Base+0x690>
   15d1c:	ldr	lr, [sp, #4]
   15d20:	add	sp, sp, #8
   15d24:	pop	{r2, r3}
   15d28:	rsbs	r0, r0, #0
   15d2c:	sbc	r1, r1, r1, lsl #1
   15d30:	bx	lr
   15d34:	rsbs	r2, r2, #0
   15d38:	sbc	r3, r3, r3, lsl #1
   15d3c:	bl	15dac <__gcov_sort_n_vals@@Base+0x690>
   15d40:	ldr	lr, [sp, #4]
   15d44:	add	sp, sp, #8
   15d48:	pop	{r2, r3}
   15d4c:	rsbs	r2, r2, #0
   15d50:	sbc	r3, r3, r3, lsl #1
   15d54:	bx	lr
   15d58:	push	{r1, lr}
   15d5c:	mov	r0, #8
   15d60:	bl	10eb4 <raise@plt>
   15d64:	pop	{r1, pc}
   15d68:	ldr	r3, [pc, #48]	; 15da0 <__gcov_sort_n_vals@@Base+0x684>
   15d6c:	ldr	r2, [pc, #48]	; 15da4 <__gcov_sort_n_vals@@Base+0x688>
   15d70:	and	r3, r3, r0, lsr #1
   15d74:	sub	r0, r0, r3
   15d78:	and	r3, r0, r2
   15d7c:	and	r0, r2, r0, lsr #2
   15d80:	add	r3, r3, r0
   15d84:	ldr	r0, [pc, #28]	; 15da8 <__gcov_sort_n_vals@@Base+0x68c>
   15d88:	add	r3, r3, r3, lsr #4
   15d8c:	and	r0, r0, r3
   15d90:	add	r0, r0, r0, lsl #8
   15d94:	add	r0, r0, r0, lsl #16
   15d98:	lsr	r0, r0, #24
   15d9c:	bx	lr
   15da0:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   15da4:	teqcc	r3, #-872415232	; 0xcc000000
   15da8:	svceq	0x000f0f0f
   15dac:	cmp	r1, r3
   15db0:	cmpeq	r0, r2
   15db4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15db8:	mov	r4, r0
   15dbc:	movcc	r0, #0
   15dc0:	mov	r5, r1
   15dc4:	ldr	lr, [sp, #36]	; 0x24
   15dc8:	movcc	r1, r0
   15dcc:	bcc	15ec8 <__gcov_sort_n_vals@@Base+0x7ac>
   15dd0:	cmp	r3, #0
   15dd4:	clzeq	ip, r2
   15dd8:	clzne	ip, r3
   15ddc:	addeq	ip, ip, #32
   15de0:	cmp	r5, #0
   15de4:	clzeq	r1, r4
   15de8:	addeq	r1, r1, #32
   15dec:	clzne	r1, r5
   15df0:	sub	ip, ip, r1
   15df4:	sub	sl, ip, #32
   15df8:	lsl	r9, r3, ip
   15dfc:	rsb	fp, ip, #32
   15e00:	orr	r9, r9, r2, lsl sl
   15e04:	orr	r9, r9, r2, lsr fp
   15e08:	lsl	r8, r2, ip
   15e0c:	cmp	r5, r9
   15e10:	cmpeq	r4, r8
   15e14:	movcc	r0, #0
   15e18:	movcc	r1, r0
   15e1c:	bcc	15e38 <__gcov_sort_n_vals@@Base+0x71c>
   15e20:	mov	r0, #1
   15e24:	subs	r4, r4, r8
   15e28:	lsl	r1, r0, sl
   15e2c:	orr	r1, r1, r0, lsr fp
   15e30:	lsl	r0, r0, ip
   15e34:	sbc	r5, r5, r9
   15e38:	cmp	ip, #0
   15e3c:	beq	15ec8 <__gcov_sort_n_vals@@Base+0x7ac>
   15e40:	lsr	r6, r8, #1
   15e44:	orr	r6, r6, r9, lsl #31
   15e48:	lsr	r7, r9, #1
   15e4c:	mov	r2, ip
   15e50:	b	15e74 <__gcov_sort_n_vals@@Base+0x758>
   15e54:	subs	r3, r4, r6
   15e58:	sbc	r8, r5, r7
   15e5c:	adds	r3, r3, r3
   15e60:	adc	r8, r8, r8
   15e64:	adds	r4, r3, #1
   15e68:	adc	r5, r8, #0
   15e6c:	subs	r2, r2, #1
   15e70:	beq	15e90 <__gcov_sort_n_vals@@Base+0x774>
   15e74:	cmp	r5, r7
   15e78:	cmpeq	r4, r6
   15e7c:	bcs	15e54 <__gcov_sort_n_vals@@Base+0x738>
   15e80:	adds	r4, r4, r4
   15e84:	adc	r5, r5, r5
   15e88:	subs	r2, r2, #1
   15e8c:	bne	15e74 <__gcov_sort_n_vals@@Base+0x758>
   15e90:	lsr	r3, r4, ip
   15e94:	orr	r3, r3, r5, lsl fp
   15e98:	lsr	r2, r5, ip
   15e9c:	orr	r3, r3, r5, lsr sl
   15ea0:	adds	r0, r0, r4
   15ea4:	mov	r4, r3
   15ea8:	lsl	r3, r2, ip
   15eac:	orr	r3, r3, r4, lsl sl
   15eb0:	lsl	ip, r4, ip
   15eb4:	orr	r3, r3, r4, lsr fp
   15eb8:	adc	r1, r1, r5
   15ebc:	subs	r0, r0, ip
   15ec0:	mov	r5, r2
   15ec4:	sbc	r1, r1, r3
   15ec8:	cmp	lr, #0
   15ecc:	strdne	r4, [lr]
   15ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015ed4 <__libc_csu_init@@Base>:
   15ed4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ed8:	mov	r7, r0
   15edc:	ldr	r6, [pc, #72]	; 15f2c <__libc_csu_init@@Base+0x58>
   15ee0:	ldr	r5, [pc, #72]	; 15f30 <__libc_csu_init@@Base+0x5c>
   15ee4:	add	r6, pc, r6
   15ee8:	add	r5, pc, r5
   15eec:	sub	r6, r6, r5
   15ef0:	mov	r8, r1
   15ef4:	mov	r9, r2
   15ef8:	bl	10e7c <fdopen@plt-0x20>
   15efc:	asrs	r6, r6, #2
   15f00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f04:	mov	r4, #0
   15f08:	add	r4, r4, #1
   15f0c:	ldr	r3, [r5], #4
   15f10:	mov	r2, r9
   15f14:	mov	r1, r8
   15f18:	mov	r0, r7
   15f1c:	blx	r3
   15f20:	cmp	r6, r4
   15f24:	bne	15f08 <__libc_csu_init@@Base+0x34>
   15f28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f2c:	andeq	r1, r1, r4, lsl r0
   15f30:	andeq	r1, r1, r0

00015f34 <__libc_csu_fini@@Base>:
   15f34:	bx	lr

Disassembly of section .fini:

00015f38 <.fini>:
   15f38:	push	{r3, lr}
   15f3c:	pop	{r3, pc}
