
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011248 <.init>:
   11248:	push	{r3, lr}
   1124c:	bl	11604 <__assert_fail@plt+0x48>
   11250:	pop	{r3, pc}

Disassembly of section .plt:

00011254 <calloc@plt-0x14>:
   11254:	push	{lr}		; (str lr, [sp, #-4]!)
   11258:	ldr	lr, [pc, #4]	; 11264 <calloc@plt-0x4>
   1125c:	add	lr, pc, lr
   11260:	ldr	pc, [lr, #8]!
   11264:	muleq	r2, ip, sp

00011268 <calloc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #32, 20	; 0x20000
   11270:	ldr	pc, [ip, #3484]!	; 0xd9c

00011274 <fputs_unlocked@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #32, 20	; 0x20000
   1127c:	ldr	pc, [ip, #3476]!	; 0xd94

00011280 <raise@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #32, 20	; 0x20000
   11288:	ldr	pc, [ip, #3468]!	; 0xd8c

0001128c <gmtime_r@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #32, 20	; 0x20000
   11294:	ldr	pc, [ip, #3460]!	; 0xd84

00011298 <utimensat@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #32, 20	; 0x20000
   112a0:	ldr	pc, [ip, #3452]!	; 0xd7c

000112a4 <strcmp@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #32, 20	; 0x20000
   112ac:	ldr	pc, [ip, #3444]!	; 0xd74

000112b0 <strtol@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #32, 20	; 0x20000
   112b8:	ldr	pc, [ip, #3436]!	; 0xd6c

000112bc <mktime@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #32, 20	; 0x20000
   112c4:	ldr	pc, [ip, #3428]!	; 0xd64

000112c8 <fflush@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #32, 20	; 0x20000
   112d0:	ldr	pc, [ip, #3420]!	; 0xd5c

000112d4 <free@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #32, 20	; 0x20000
   112dc:	ldr	pc, [ip, #3412]!	; 0xd54

000112e0 <clock_gettime@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #32, 20	; 0x20000
   112e8:	ldr	pc, [ip, #3404]!	; 0xd4c

000112ec <_exit@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #32, 20	; 0x20000
   112f4:	ldr	pc, [ip, #3396]!	; 0xd44

000112f8 <memcpy@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #32, 20	; 0x20000
   11300:	ldr	pc, [ip, #3388]!	; 0xd3c

00011304 <mbsinit@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #32, 20	; 0x20000
   1130c:	ldr	pc, [ip, #3380]!	; 0xd34

00011310 <time@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #32, 20	; 0x20000
   11318:	ldr	pc, [ip, #3372]!	; 0xd2c

0001131c <memcmp@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #32, 20	; 0x20000
   11324:	ldr	pc, [ip, #3364]!	; 0xd24

00011328 <dcgettext@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #32, 20	; 0x20000
   11330:	ldr	pc, [ip, #3356]!	; 0xd1c

00011334 <dup2@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #32, 20	; 0x20000
   1133c:	ldr	pc, [ip, #3348]!	; 0xd14

00011340 <realloc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #32, 20	; 0x20000
   11348:	ldr	pc, [ip, #3340]!	; 0xd0c

0001134c <localtime_r@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #32, 20	; 0x20000
   11354:	ldr	pc, [ip, #3332]!	; 0xd04

00011358 <textdomain@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #32, 20	; 0x20000
   11360:	ldr	pc, [ip, #3324]!	; 0xcfc

00011364 <iswprint@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #32, 20	; 0x20000
   1136c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011370 <tzset@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #32, 20	; 0x20000
   11378:	ldr	pc, [ip, #3308]!	; 0xcec

0001137c <fwrite@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #32, 20	; 0x20000
   11384:	ldr	pc, [ip, #3300]!	; 0xce4

00011388 <lseek64@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #32, 20	; 0x20000
   11390:	ldr	pc, [ip, #3292]!	; 0xcdc

00011394 <__ctype_get_mb_cur_max@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #32, 20	; 0x20000
   1139c:	ldr	pc, [ip, #3284]!	; 0xcd4

000113a0 <__fpending@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #32, 20	; 0x20000
   113a8:	ldr	pc, [ip, #3276]!	; 0xccc

000113ac <mbrtowc@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #32, 20	; 0x20000
   113b4:	ldr	pc, [ip, #3268]!	; 0xcc4

000113b8 <error@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #32, 20	; 0x20000
   113c0:	ldr	pc, [ip, #3260]!	; 0xcbc

000113c4 <open64@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #32, 20	; 0x20000
   113cc:	ldr	pc, [ip, #3252]!	; 0xcb4

000113d0 <getenv@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #32, 20	; 0x20000
   113d8:	ldr	pc, [ip, #3244]!	; 0xcac

000113dc <malloc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #32, 20	; 0x20000
   113e4:	ldr	pc, [ip, #3236]!	; 0xca4

000113e8 <__libc_start_main@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #32, 20	; 0x20000
   113f0:	ldr	pc, [ip, #3228]!	; 0xc9c

000113f4 <strftime@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #32, 20	; 0x20000
   113fc:	ldr	pc, [ip, #3220]!	; 0xc94

00011400 <__vfprintf_chk@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #32, 20	; 0x20000
   11408:	ldr	pc, [ip, #3212]!	; 0xc8c

0001140c <__freading@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #32, 20	; 0x20000
   11414:	ldr	pc, [ip, #3204]!	; 0xc84

00011418 <localtime@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #32, 20	; 0x20000
   11420:	ldr	pc, [ip, #3196]!	; 0xc7c

00011424 <__ctype_tolower_loc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #32, 20	; 0x20000
   1142c:	ldr	pc, [ip, #3188]!	; 0xc74

00011430 <__ctype_toupper_loc@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #32, 20	; 0x20000
   11438:	ldr	pc, [ip, #3180]!	; 0xc6c

0001143c <__gmon_start__@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #32, 20	; 0x20000
   11444:	ldr	pc, [ip, #3172]!	; 0xc64

00011448 <getopt_long@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #32, 20	; 0x20000
   11450:	ldr	pc, [ip, #3164]!	; 0xc5c

00011454 <__ctype_b_loc@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #32, 20	; 0x20000
   1145c:	ldr	pc, [ip, #3156]!	; 0xc54

00011460 <exit@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #32, 20	; 0x20000
   11468:	ldr	pc, [ip, #3148]!	; 0xc4c

0001146c <strlen@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #32, 20	; 0x20000
   11474:	ldr	pc, [ip, #3140]!	; 0xc44

00011478 <strchr@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #32, 20	; 0x20000
   11480:	ldr	pc, [ip, #3132]!	; 0xc3c

00011484 <setenv@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #32, 20	; 0x20000
   1148c:	ldr	pc, [ip, #3124]!	; 0xc34

00011490 <__errno_location@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #32, 20	; 0x20000
   11498:	ldr	pc, [ip, #3116]!	; 0xc2c

0001149c <__sprintf_chk@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #32, 20	; 0x20000
   114a4:	ldr	pc, [ip, #3108]!	; 0xc24

000114a8 <__cxa_atexit@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #32, 20	; 0x20000
   114b0:	ldr	pc, [ip, #3100]!	; 0xc1c

000114b4 <memset@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #32, 20	; 0x20000
   114bc:	ldr	pc, [ip, #3092]!	; 0xc14

000114c0 <__printf_chk@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #32, 20	; 0x20000
   114c8:	ldr	pc, [ip, #3084]!	; 0xc0c

000114cc <fileno@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #32, 20	; 0x20000
   114d4:	ldr	pc, [ip, #3076]!	; 0xc04

000114d8 <__fprintf_chk@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #32, 20	; 0x20000
   114e0:	ldr	pc, [ip, #3068]!	; 0xbfc

000114e4 <fclose@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #32, 20	; 0x20000
   114ec:	ldr	pc, [ip, #3060]!	; 0xbf4

000114f0 <fseeko64@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #32, 20	; 0x20000
   114f8:	ldr	pc, [ip, #3052]!	; 0xbec

000114fc <__overflow@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #32, 20	; 0x20000
   11504:	ldr	pc, [ip, #3044]!	; 0xbe4

00011508 <setlocale@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #32, 20	; 0x20000
   11510:	ldr	pc, [ip, #3036]!	; 0xbdc

00011514 <strrchr@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #32, 20	; 0x20000
   1151c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011520 <nl_langinfo@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #32, 20	; 0x20000
   11528:	ldr	pc, [ip, #3020]!	; 0xbcc

0001152c <fputc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #32, 20	; 0x20000
   11534:	ldr	pc, [ip, #3012]!	; 0xbc4

00011538 <timegm@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #32, 20	; 0x20000
   11540:	ldr	pc, [ip, #3004]!	; 0xbbc

00011544 <futimens@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #32, 20	; 0x20000
   1154c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011550 <bindtextdomain@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #32, 20	; 0x20000
   11558:	ldr	pc, [ip, #2988]!	; 0xbac

0001155c <__xstat64@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #32, 20	; 0x20000
   11564:	ldr	pc, [ip, #2980]!	; 0xba4

00011568 <unsetenv@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #32, 20	; 0x20000
   11570:	ldr	pc, [ip, #2972]!	; 0xb9c

00011574 <fputs@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #32, 20	; 0x20000
   1157c:	ldr	pc, [ip, #2964]!	; 0xb94

00011580 <strncmp@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #32, 20	; 0x20000
   11588:	ldr	pc, [ip, #2956]!	; 0xb8c

0001158c <abort@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #32, 20	; 0x20000
   11594:	ldr	pc, [ip, #2948]!	; 0xb84

00011598 <close@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #32, 20	; 0x20000
   115a0:	ldr	pc, [ip, #2940]!	; 0xb7c

000115a4 <__lxstat64@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #32, 20	; 0x20000
   115ac:	ldr	pc, [ip, #2932]!	; 0xb74

000115b0 <__snprintf_chk@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #32, 20	; 0x20000
   115b8:	ldr	pc, [ip, #2924]!	; 0xb6c

000115bc <__assert_fail@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #32, 20	; 0x20000
   115c4:	ldr	pc, [ip, #2916]!	; 0xb64

Disassembly of section .text:

000115c8 <.text>:
   115c8:	mov	fp, #0
   115cc:	mov	lr, #0
   115d0:	pop	{r1}		; (ldr r1, [sp], #4)
   115d4:	mov	r2, sp
   115d8:	push	{r2}		; (str r2, [sp, #-4]!)
   115dc:	push	{r0}		; (str r0, [sp, #-4]!)
   115e0:	ldr	ip, [pc, #16]	; 115f8 <__assert_fail@plt+0x3c>
   115e4:	push	{ip}		; (str ip, [sp, #-4]!)
   115e8:	ldr	r0, [pc, #12]	; 115fc <__assert_fail@plt+0x40>
   115ec:	ldr	r3, [pc, #12]	; 11600 <__assert_fail@plt+0x44>
   115f0:	bl	113e8 <__libc_start_main@plt>
   115f4:	bl	1158c <abort@plt>
   115f8:	andeq	pc, r1, r8, ror #5
   115fc:	andeq	r1, r1, r8, lsl #19
   11600:	andeq	pc, r1, r8, lsl #5
   11604:	ldr	r3, [pc, #20]	; 11620 <__assert_fail@plt+0x64>
   11608:	ldr	r2, [pc, #20]	; 11624 <__assert_fail@plt+0x68>
   1160c:	add	r3, pc, r3
   11610:	ldr	r2, [r3, r2]
   11614:	cmp	r2, #0
   11618:	bxeq	lr
   1161c:	b	1143c <__gmon_start__@plt>
   11620:	andeq	r0, r2, ip, ror #19
   11624:	andeq	r0, r0, ip, lsr #2
   11628:	ldr	r0, [pc, #24]	; 11648 <__assert_fail@plt+0x8c>
   1162c:	ldr	r3, [pc, #24]	; 1164c <__assert_fail@plt+0x90>
   11630:	cmp	r3, r0
   11634:	bxeq	lr
   11638:	ldr	r3, [pc, #16]	; 11650 <__assert_fail@plt+0x94>
   1163c:	cmp	r3, #0
   11640:	bxeq	lr
   11644:	bx	r3
   11648:	andeq	r2, r3, r8, lsl #3
   1164c:	andeq	r2, r3, r8, lsl #3
   11650:	andeq	r0, r0, r0
   11654:	ldr	r0, [pc, #36]	; 11680 <__assert_fail@plt+0xc4>
   11658:	ldr	r1, [pc, #36]	; 11684 <__assert_fail@plt+0xc8>
   1165c:	sub	r1, r1, r0
   11660:	asr	r1, r1, #2
   11664:	add	r1, r1, r1, lsr #31
   11668:	asrs	r1, r1, #1
   1166c:	bxeq	lr
   11670:	ldr	r3, [pc, #16]	; 11688 <__assert_fail@plt+0xcc>
   11674:	cmp	r3, #0
   11678:	bxeq	lr
   1167c:	bx	r3
   11680:	andeq	r2, r3, r8, lsl #3
   11684:	andeq	r2, r3, r8, lsl #3
   11688:	andeq	r0, r0, r0
   1168c:	push	{r4, lr}
   11690:	ldr	r4, [pc, #24]	; 116b0 <__assert_fail@plt+0xf4>
   11694:	ldrb	r3, [r4]
   11698:	cmp	r3, #0
   1169c:	popne	{r4, pc}
   116a0:	bl	11628 <__assert_fail@plt+0x6c>
   116a4:	mov	r3, #1
   116a8:	strb	r3, [r4]
   116ac:	pop	{r4, pc}
   116b0:	andeq	r2, r3, ip, lsr #3
   116b4:	b	11654 <__assert_fail@plt+0x98>
   116b8:	push	{fp, lr}
   116bc:	mov	fp, sp
   116c0:	sub	sp, sp, #56	; 0x38
   116c4:	mov	r4, r0
   116c8:	cmp	r0, #0
   116cc:	bne	11944 <__assert_fail@plt+0x388>
   116d0:	movw	r1, #62267	; 0xf33b
   116d4:	mov	r0, #0
   116d8:	mov	r2, #5
   116dc:	movt	r1, #1
   116e0:	bl	11328 <dcgettext@plt>
   116e4:	mov	r1, r0
   116e8:	movw	r0, #8668	; 0x21dc
   116ec:	movt	r0, #3
   116f0:	ldr	r2, [r0]
   116f4:	mov	r0, #1
   116f8:	bl	114c0 <__printf_chk@plt>
   116fc:	movw	r1, #62298	; 0xf35a
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	11328 <dcgettext@plt>
   11710:	movw	r7, #8612	; 0x21a4
   11714:	movt	r7, #3
   11718:	ldr	r1, [r7]
   1171c:	bl	11274 <fputs_unlocked@plt>
   11720:	movw	r1, #63916	; 0xf9ac
   11724:	mov	r0, #0
   11728:	mov	r2, #5
   1172c:	movt	r1, #1
   11730:	bl	11328 <dcgettext@plt>
   11734:	ldr	r1, [r7]
   11738:	bl	11274 <fputs_unlocked@plt>
   1173c:	movw	r1, #62590	; 0xf47e
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #1
   1174c:	bl	11328 <dcgettext@plt>
   11750:	ldr	r1, [r7]
   11754:	bl	11274 <fputs_unlocked@plt>
   11758:	movw	r1, #62801	; 0xf551
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	movt	r1, #1
   11768:	bl	11328 <dcgettext@plt>
   1176c:	ldr	r1, [r7]
   11770:	bl	11274 <fputs_unlocked@plt>
   11774:	movw	r1, #63062	; 0xf656
   11778:	mov	r0, #0
   1177c:	mov	r2, #5
   11780:	movt	r1, #1
   11784:	bl	11328 <dcgettext@plt>
   11788:	ldr	r1, [r7]
   1178c:	bl	11274 <fputs_unlocked@plt>
   11790:	movw	r1, #63405	; 0xf7ad
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	movt	r1, #1
   117a0:	bl	11328 <dcgettext@plt>
   117a4:	ldr	r1, [r7]
   117a8:	bl	11274 <fputs_unlocked@plt>
   117ac:	movw	r1, #63450	; 0xf7da
   117b0:	mov	r0, #0
   117b4:	mov	r2, #5
   117b8:	movt	r1, #1
   117bc:	bl	11328 <dcgettext@plt>
   117c0:	ldr	r1, [r7]
   117c4:	bl	11274 <fputs_unlocked@plt>
   117c8:	movw	r1, #63504	; 0xf810
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #1
   117d8:	bl	11328 <dcgettext@plt>
   117dc:	ldr	r1, [r7]
   117e0:	bl	11274 <fputs_unlocked@plt>
   117e4:	movw	r0, #64672	; 0xfca0
   117e8:	mov	r2, #48	; 0x30
   117ec:	mov	r6, sp
   117f0:	movw	r5, #63574	; 0xf856
   117f4:	movt	r0, #1
   117f8:	movt	r5, #1
   117fc:	add	r1, r0, #32
   11800:	add	r3, r0, #16
   11804:	vld1.64	{d18-d19}, [r0], r2
   11808:	vld1.64	{d16-d17}, [r1]
   1180c:	vld1.64	{d20-d21}, [r3]
   11810:	add	r1, r6, #32
   11814:	vldr	d22, [r0]
   11818:	add	r0, r6, #16
   1181c:	vst1.64	{d16-d17}, [r1]
   11820:	movw	r1, #63991	; 0xf9f7
   11824:	vst1.64	{d20-d21}, [r0]
   11828:	mov	r0, r6
   1182c:	vst1.64	{d18-d19}, [r0], r2
   11830:	movt	r1, #1
   11834:	vstr	d22, [r0]
   11838:	mov	r0, r5
   1183c:	bl	112a4 <strcmp@plt>
   11840:	cmp	r0, #0
   11844:	ldrne	r1, [r6, #8]!
   11848:	cmpne	r1, #0
   1184c:	bne	11838 <__assert_fail@plt+0x27c>
   11850:	ldr	r6, [r6, #4]
   11854:	movw	r1, #64086	; 0xfa56
   11858:	mov	r0, #0
   1185c:	mov	r2, #5
   11860:	movt	r1, #1
   11864:	bl	11328 <dcgettext@plt>
   11868:	movw	r2, #63646	; 0xf89e
   1186c:	movw	r3, #64109	; 0xfa6d
   11870:	mov	r1, r0
   11874:	mov	r0, #1
   11878:	movt	r2, #1
   1187c:	movt	r3, #1
   11880:	bl	114c0 <__printf_chk@plt>
   11884:	cmp	r6, #0
   11888:	mov	r0, #5
   1188c:	mov	r1, #0
   11890:	moveq	r6, r5
   11894:	bl	11508 <setlocale@plt>
   11898:	cmp	r0, #0
   1189c:	beq	118d4 <__assert_fail@plt+0x318>
   118a0:	movw	r1, #64149	; 0xfa95
   118a4:	mov	r2, #3
   118a8:	movt	r1, #1
   118ac:	bl	11580 <strncmp@plt>
   118b0:	cmp	r0, #0
   118b4:	beq	118d4 <__assert_fail@plt+0x318>
   118b8:	movw	r1, #64153	; 0xfa99
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #1
   118c8:	bl	11328 <dcgettext@plt>
   118cc:	ldr	r1, [r7]
   118d0:	bl	11274 <fputs_unlocked@plt>
   118d4:	movw	r1, #64224	; 0xfae0
   118d8:	mov	r0, #0
   118dc:	mov	r2, #5
   118e0:	movt	r1, #1
   118e4:	bl	11328 <dcgettext@plt>
   118e8:	movw	r2, #64109	; 0xfa6d
   118ec:	mov	r1, r0
   118f0:	mov	r0, #1
   118f4:	mov	r3, r5
   118f8:	movt	r2, #1
   118fc:	bl	114c0 <__printf_chk@plt>
   11900:	movw	r1, #64251	; 0xfafb
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #1
   11910:	bl	11328 <dcgettext@plt>
   11914:	movw	r3, #5329	; 0x14d1
   11918:	mov	r1, r0
   1191c:	movw	r0, #64019	; 0xfa13
   11920:	cmp	r6, r5
   11924:	mov	r2, r6
   11928:	movt	r0, #1
   1192c:	movt	r3, #2
   11930:	moveq	r3, r0
   11934:	mov	r0, #1
   11938:	bl	114c0 <__printf_chk@plt>
   1193c:	mov	r0, r4
   11940:	bl	11460 <exit@plt>
   11944:	movw	r0, #8608	; 0x21a0
   11948:	movw	r1, #62228	; 0xf314
   1194c:	mov	r2, #5
   11950:	movt	r0, #3
   11954:	movt	r1, #1
   11958:	ldr	r5, [r0]
   1195c:	mov	r0, #0
   11960:	bl	11328 <dcgettext@plt>
   11964:	mov	r2, r0
   11968:	movw	r0, #8668	; 0x21dc
   1196c:	mov	r1, #1
   11970:	movt	r0, #3
   11974:	ldr	r3, [r0]
   11978:	mov	r0, r5
   1197c:	bl	114d8 <__fprintf_chk@plt>
   11980:	mov	r0, r4
   11984:	bl	11460 <exit@plt>
   11988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1198c:	add	fp, sp, #28
   11990:	sub	sp, sp, #164	; 0xa4
   11994:	str	r0, [sp, #36]	; 0x24
   11998:	ldr	r0, [r1]
   1199c:	str	r1, [sp, #32]
   119a0:	bl	1a1c8 <__assert_fail@plt+0x8c0c>
   119a4:	movw	r1, #5329	; 0x14d1
   119a8:	mov	r0, #6
   119ac:	movt	r1, #2
   119b0:	bl	11508 <setlocale@plt>
   119b4:	movw	r6, #63650	; 0xf8a2
   119b8:	movw	r1, #63580	; 0xf85c
   119bc:	movt	r6, #1
   119c0:	movt	r1, #1
   119c4:	mov	r0, r6
   119c8:	bl	11550 <bindtextdomain@plt>
   119cc:	mov	r0, r6
   119d0:	bl	11358 <textdomain@plt>
   119d4:	movw	r0, #10452	; 0x28d4
   119d8:	movt	r0, #1
   119dc:	bl	1f2ec <__assert_fail@plt+0xdd30>
   119e0:	movw	r0, #8624	; 0x21b0
   119e4:	mov	r8, #0
   119e8:	movw	r9, #8628	; 0x21b4
   119ec:	movw	r7, #63604	; 0xf874
   119f0:	movw	r6, #64496	; 0xfbf0
   119f4:	movw	r5, #8616	; 0x21a8
   119f8:	mov	r4, #1
   119fc:	movt	r0, #3
   11a00:	movt	r9, #3
   11a04:	movt	r7, #1
   11a08:	movt	r6, #1
   11a0c:	movt	r5, #3
   11a10:	str	r8, [r0]
   11a14:	movw	r0, #8629	; 0x21b5
   11a18:	strb	r8, [r9]
   11a1c:	movt	r0, #3
   11a20:	strb	r8, [r0]
   11a24:	mov	r0, #0
   11a28:	str	r0, [sp, #24]
   11a2c:	mov	r0, #0
   11a30:	b	11a38 <__assert_fail@plt+0x47c>
   11a34:	ldr	r0, [r5]
   11a38:	str	r0, [sp, #28]
   11a3c:	b	11a4c <__assert_fail@plt+0x490>
   11a40:	movw	r0, #8630	; 0x21b6
   11a44:	movt	r0, #3
   11a48:	strb	r4, [r0]
   11a4c:	ldr	r0, [sp, #36]	; 0x24
   11a50:	ldr	r1, [sp, #32]
   11a54:	mov	r2, r7
   11a58:	mov	r3, r6
   11a5c:	str	r8, [sp]
   11a60:	bl	11448 <getopt_long@plt>
   11a64:	cmp	r0, #96	; 0x60
   11a68:	ble	11bdc <__assert_fail@plt+0x620>
   11a6c:	sub	r1, r0, #97	; 0x61
   11a70:	cmp	r1, #19
   11a74:	bhi	11b5c <__assert_fail@plt+0x5a0>
   11a78:	add	r0, pc, #0
   11a7c:	ldr	pc, [r0, r1, lsl #2]
   11a80:	ldrdeq	r1, [r1], -r0
   11a84:			; <UNDEFINED> instruction: 0x000122b0
   11a88:	andeq	r1, r1, ip, ror #21
   11a8c:	andeq	r1, r1, r4, lsr sl
   11a90:			; <UNDEFINED> instruction: 0x000122b0
   11a94:	andeq	r1, r1, ip, asr #20
   11a98:			; <UNDEFINED> instruction: 0x000122b0
   11a9c:	andeq	r1, r1, r0, asr #20
   11aa0:			; <UNDEFINED> instruction: 0x000122b0
   11aa4:			; <UNDEFINED> instruction: 0x000122b0
   11aa8:			; <UNDEFINED> instruction: 0x000122b0
   11aac:			; <UNDEFINED> instruction: 0x000122b0
   11ab0:	andeq	r1, r1, r0, asr #23
   11ab4:			; <UNDEFINED> instruction: 0x000122b0
   11ab8:			; <UNDEFINED> instruction: 0x000122b0
   11abc:			; <UNDEFINED> instruction: 0x000122b0
   11ac0:			; <UNDEFINED> instruction: 0x000122b0
   11ac4:	strdeq	r1, [r1], -ip
   11ac8:			; <UNDEFINED> instruction: 0x000122b0
   11acc:	andeq	r1, r1, r4, lsl fp
   11ad0:	movw	r0, #8624	; 0x21b0
   11ad4:	movt	r0, #3
   11ad8:	mov	r1, r0
   11adc:	ldr	r0, [r0]
   11ae0:	orr	r0, r0, #1
   11ae4:	str	r0, [r1]
   11ae8:	b	11a4c <__assert_fail@plt+0x490>
   11aec:	movw	r0, #8629	; 0x21b5
   11af0:	movt	r0, #3
   11af4:	strb	r4, [r0]
   11af8:	b	11a4c <__assert_fail@plt+0x490>
   11afc:	ldr	r0, [r5]
   11b00:	movw	r1, #8632	; 0x21b8
   11b04:	strb	r4, [r9]
   11b08:	movt	r1, #3
   11b0c:	str	r0, [r1]
   11b10:	b	11a4c <__assert_fail@plt+0x490>
   11b14:	ldr	r1, [r5]
   11b18:	mov	sl, r5
   11b1c:	movw	r5, #8640	; 0x21c0
   11b20:	mov	r2, #6
   11b24:	movt	r5, #3
   11b28:	mov	r0, r5
   11b2c:	bl	19e18 <__assert_fail@plt+0x885c>
   11b30:	cmp	r0, #0
   11b34:	beq	122b8 <__assert_fail@plt+0xcfc>
   11b38:	ldr	r0, [r5]
   11b3c:	str	r8, [r5, #4]
   11b40:	str	r8, [r5, #12]
   11b44:	mov	r4, #1
   11b48:	str	r0, [r5, #8]
   11b4c:	mov	r0, #1
   11b50:	mov	r5, sl
   11b54:	str	r0, [sp, #24]
   11b58:	b	11a4c <__assert_fail@plt+0x490>
   11b5c:	cmp	r0, #256	; 0x100
   11b60:	bne	122b0 <__assert_fail@plt+0xcf4>
   11b64:	movw	r0, #8508	; 0x213c
   11b68:	ldr	r1, [r5]
   11b6c:	movw	sl, #64624	; 0xfc70
   11b70:	mov	r2, #4
   11b74:	movt	r0, #3
   11b78:	str	r2, [sp]
   11b7c:	movw	r2, #64644	; 0xfc84
   11b80:	movt	sl, #1
   11b84:	ldr	r0, [r0]
   11b88:	movt	r2, #1
   11b8c:	mov	r3, sl
   11b90:	stmib	sp, {r0, r4}
   11b94:	movw	r0, #63639	; 0xf897
   11b98:	movt	r0, #1
   11b9c:	bl	12648 <__assert_fail@plt+0x108c>
   11ba0:	movw	r1, #8624	; 0x21b0
   11ba4:	ldr	r0, [sl, r0, lsl #2]
   11ba8:	movt	r1, #3
   11bac:	mov	r2, r1
   11bb0:	ldr	r1, [r1]
   11bb4:	orr	r0, r1, r0
   11bb8:	str	r0, [r2]
   11bbc:	b	11a4c <__assert_fail@plt+0x490>
   11bc0:	movw	r0, #8624	; 0x21b0
   11bc4:	movt	r0, #3
   11bc8:	mov	r1, r0
   11bcc:	ldr	r0, [r0]
   11bd0:	orr	r0, r0, #2
   11bd4:	str	r0, [r1]
   11bd8:	b	11a4c <__assert_fail@plt+0x490>
   11bdc:	cmn	r0, #1
   11be0:	bne	1220c <__assert_fail@plt+0xc50>
   11be4:	movw	r7, #8624	; 0x21b0
   11be8:	ldr	r1, [sp, #24]
   11bec:	movt	r7, #3
   11bf0:	ldr	r0, [r7]
   11bf4:	cmp	r0, #0
   11bf8:	moveq	r0, #3
   11bfc:	streq	r0, [r7]
   11c00:	ldrb	r0, [r9]
   11c04:	tst	r1, #1
   11c08:	beq	11c38 <__assert_fail@plt+0x67c>
   11c0c:	ldr	r1, [sp, #28]
   11c10:	movw	r4, #8640	; 0x21c0
   11c14:	eor	r0, r0, #1
   11c18:	movt	r4, #3
   11c1c:	clz	r1, r1
   11c20:	lsr	r1, r1, #5
   11c24:	tst	r1, r0
   11c28:	bne	11f1c <__assert_fail@plt+0x960>
   11c2c:	movw	r1, #63726	; 0xf8ee
   11c30:	movt	r1, #1
   11c34:	b	122f4 <__assert_fail@plt+0xd38>
   11c38:	movw	r4, #8640	; 0x21c0
   11c3c:	cmp	r0, #0
   11c40:	movt	r4, #3
   11c44:	beq	11c80 <__assert_fail@plt+0x6c4>
   11c48:	movw	r0, #8632	; 0x21b8
   11c4c:	add	r2, sp, #56	; 0x38
   11c50:	movt	r0, #3
   11c54:	ldr	r1, [r0]
   11c58:	movw	r0, #8630	; 0x21b6
   11c5c:	movt	r0, #3
   11c60:	ldrb	r0, [r0]
   11c64:	cmp	r0, #1
   11c68:	bne	11e44 <__assert_fail@plt+0x888>
   11c6c:	mov	r0, #3
   11c70:	bl	115a4 <__lxstat64@plt>
   11c74:	cmp	r0, #0
   11c78:	beq	11e54 <__assert_fail@plt+0x898>
   11c7c:	b	12318 <__assert_fail@plt+0xd5c>
   11c80:	ldr	r0, [sp, #28]
   11c84:	cmp	r0, #0
   11c88:	beq	11d30 <__assert_fail@plt+0x774>
   11c8c:	add	r7, sp, #56	; 0x38
   11c90:	mov	r0, r7
   11c94:	bl	12abc <__assert_fail@plt+0x1500>
   11c98:	ldr	r1, [sp, #28]
   11c9c:	movw	r6, #8640	; 0x21c0
   11ca0:	mov	r2, r7
   11ca4:	movt	r6, #3
   11ca8:	mov	r0, r6
   11cac:	bl	19bc0 <__assert_fail@plt+0x8604>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11ebc <__assert_fail@plt+0x900>
   11cb8:	ldrd	r0, [r6]
   11cbc:	movw	r7, #8624	; 0x21b0
   11cc0:	movt	r7, #3
   11cc4:	strd	r0, [r6, #8]
   11cc8:	ldr	r1, [r7]
   11ccc:	cmp	r1, #3
   11cd0:	ldreq	r1, [sp, #56]	; 0x38
   11cd4:	cmpeq	r1, r0
   11cd8:	bne	11f1c <__assert_fail@plt+0x960>
   11cdc:	ldr	r1, [r6, #4]
   11ce0:	ldr	r2, [sp, #60]	; 0x3c
   11ce4:	cmp	r1, r2
   11ce8:	bne	11f1c <__assert_fail@plt+0x960>
   11cec:	str	r1, [sp, #52]	; 0x34
   11cf0:	ldr	r1, [sp, #28]
   11cf4:	eor	r0, r0, #1
   11cf8:	add	r2, sp, #48	; 0x30
   11cfc:	str	r0, [sp, #48]	; 0x30
   11d00:	add	r0, sp, #40	; 0x28
   11d04:	bl	19bc0 <__assert_fail@plt+0x8604>
   11d08:	cmp	r0, #0
   11d0c:	beq	11ebc <__assert_fail@plt+0x900>
   11d10:	ldr	r0, [sp, #48]	; 0x30
   11d14:	ldr	r1, [sp, #40]	; 0x28
   11d18:	cmp	r1, r0
   11d1c:	bne	11f1c <__assert_fail@plt+0x960>
   11d20:	ldr	r0, [sp, #52]	; 0x34
   11d24:	ldr	r1, [sp, #44]	; 0x2c
   11d28:	cmp	r1, r0
   11d2c:	bne	11f1c <__assert_fail@plt+0x960>
   11d30:	movw	r5, #8600	; 0x2198
   11d34:	ldr	r1, [sp, #36]	; 0x24
   11d38:	movt	r5, #3
   11d3c:	ldr	r0, [r5]
   11d40:	sub	r0, r1, r0
   11d44:	cmp	r0, #2
   11d48:	blt	11ef0 <__assert_fail@plt+0x934>
   11d4c:	bl	1a170 <__assert_fail@plt+0x8bb4>
   11d50:	movw	r1, #3503	; 0xdaf
   11d54:	movt	r1, #3
   11d58:	cmp	r0, r1
   11d5c:	bgt	11ef0 <__assert_fail@plt+0x934>
   11d60:	ldr	r0, [r5]
   11d64:	ldr	r1, [sp, #32]
   11d68:	movw	r6, #8640	; 0x21c0
   11d6c:	mov	r2, #9
   11d70:	movt	r6, #3
   11d74:	ldr	r1, [r1, r0, lsl #2]
   11d78:	mov	r0, r6
   11d7c:	bl	19e18 <__assert_fail@plt+0x885c>
   11d80:	cmp	r0, #0
   11d84:	beq	11ef0 <__assert_fail@plt+0x934>
   11d88:	ldr	r1, [r6]
   11d8c:	mov	r0, #0
   11d90:	stmib	r6, {r0, r1}
   11d94:	str	r0, [r6, #12]
   11d98:	movw	r0, #63804	; 0xf93c
   11d9c:	movt	r0, #1
   11da0:	bl	113d0 <getenv@plt>
   11da4:	cmp	r0, #0
   11da8:	bne	11e34 <__assert_fail@plt+0x878>
   11dac:	movw	r0, #8640	; 0x21c0
   11db0:	movt	r0, #3
   11db4:	bl	11418 <localtime@plt>
   11db8:	cmp	r0, #0
   11dbc:	beq	11e34 <__assert_fail@plt+0x878>
   11dc0:	movw	r1, #63820	; 0xf94c
   11dc4:	mov	r6, r0
   11dc8:	mov	r0, #0
   11dcc:	mov	r2, #5
   11dd0:	movt	r1, #1
   11dd4:	bl	11328 <dcgettext@plt>
   11dd8:	mov	ip, r0
   11ddc:	ldr	r0, [r5]
   11de0:	ldr	r1, [sp, #32]
   11de4:	ldr	lr, [r6]
   11de8:	ldr	r8, [r6, #4]
   11dec:	ldr	r7, [r6, #8]
   11df0:	add	r6, r6, #12
   11df4:	ldr	r3, [r1, r0, lsl #2]
   11df8:	ldm	r6, {r1, r2, r6}
   11dfc:	movw	r0, #1900	; 0x76c
   11e00:	add	r2, r2, #1
   11e04:	add	r0, r6, r0
   11e08:	stm	sp, {r0, r2}
   11e0c:	str	r1, [sp, #8]
   11e10:	str	r7, [sp, #12]
   11e14:	movw	r7, #8624	; 0x21b0
   11e18:	mov	r0, #0
   11e1c:	mov	r1, #0
   11e20:	mov	r2, ip
   11e24:	str	r8, [sp, #16]
   11e28:	str	lr, [sp, #20]
   11e2c:	movt	r7, #3
   11e30:	bl	113b8 <error@plt>
   11e34:	ldr	r0, [r5]
   11e38:	add	r0, r0, #1
   11e3c:	str	r0, [r5]
   11e40:	b	11f1c <__assert_fail@plt+0x960>
   11e44:	mov	r0, #3
   11e48:	bl	1155c <__xstat64@plt>
   11e4c:	cmp	r0, #0
   11e50:	bne	12318 <__assert_fail@plt+0xd5c>
   11e54:	add	r0, sp, #56	; 0x38
   11e58:	add	r0, r0, #72	; 0x48
   11e5c:	vld1.64	{d16-d17}, [r0]
   11e60:	ldr	r0, [sp, #28]
   11e64:	cmp	r0, #0
   11e68:	vst1.64	{d16-d17}, [r4 :128]
   11e6c:	beq	11f1c <__assert_fail@plt+0x960>
   11e70:	ldr	r0, [r7]
   11e74:	tst	r0, #1
   11e78:	beq	11e9c <__assert_fail@plt+0x8e0>
   11e7c:	ldr	r1, [sp, #28]
   11e80:	movw	r0, #8640	; 0x21c0
   11e84:	movt	r0, #3
   11e88:	mov	r2, r0
   11e8c:	bl	19bc0 <__assert_fail@plt+0x8604>
   11e90:	cmp	r0, #0
   11e94:	beq	11ebc <__assert_fail@plt+0x900>
   11e98:	ldr	r0, [r7]
   11e9c:	tst	r0, #2
   11ea0:	beq	11f1c <__assert_fail@plt+0x960>
   11ea4:	ldr	r1, [sp, #28]
   11ea8:	add	r0, r4, #8
   11eac:	mov	r2, r0
   11eb0:	bl	19bc0 <__assert_fail@plt+0x8604>
   11eb4:	cmp	r0, #0
   11eb8:	bne	11f1c <__assert_fail@plt+0x960>
   11ebc:	movw	r1, #63616	; 0xf880
   11ec0:	mov	r0, #0
   11ec4:	mov	r2, #5
   11ec8:	movt	r1, #1
   11ecc:	bl	11328 <dcgettext@plt>
   11ed0:	mov	r4, r0
   11ed4:	ldr	r0, [sp, #28]
   11ed8:	bl	1bdfc <__assert_fail@plt+0xa840>
   11edc:	mov	r3, r0
   11ee0:	mov	r0, #1
   11ee4:	mov	r1, #0
   11ee8:	mov	r2, r4
   11eec:	bl	113b8 <error@plt>
   11ef0:	ldr	r0, [r7]
   11ef4:	cmp	r0, #3
   11ef8:	bne	11f10 <__assert_fail@plt+0x954>
   11efc:	movw	r0, #8656	; 0x21d0
   11f00:	mov	r1, #1
   11f04:	movt	r0, #3
   11f08:	strb	r1, [r0]
   11f0c:	b	11f1c <__assert_fail@plt+0x960>
   11f10:	mvn	r0, #-1073741824	; 0xc0000000
   11f14:	str	r0, [r4, #12]
   11f18:	str	r0, [r4, #4]
   11f1c:	movw	r0, #8600	; 0x2198
   11f20:	movt	r0, #3
   11f24:	ldr	r1, [r0]
   11f28:	ldr	r0, [sp, #36]	; 0x24
   11f2c:	cmp	r1, r0
   11f30:	beq	122ec <__assert_fail@plt+0xd30>
   11f34:	mov	r0, #0
   11f38:	bge	12204 <__assert_fail@plt+0xc48>
   11f3c:	add	r0, r4, #4
   11f40:	mov	r5, #1
   11f44:	str	r0, [sp, #28]
   11f48:	add	r0, r4, #12
   11f4c:	str	r0, [sp, #24]
   11f50:	ldr	r0, [sp, #32]
   11f54:	ldr	r9, [r0, r1, lsl #2]
   11f58:	movw	r1, #5420	; 0x152c
   11f5c:	movt	r1, #2
   11f60:	mov	r0, r9
   11f64:	bl	112a4 <strcmp@plt>
   11f68:	cmp	r0, #0
   11f6c:	mov	sl, #0
   11f70:	mov	r6, #1
   11f74:	beq	11fdc <__assert_fail@plt+0xa20>
   11f78:	movw	r0, #8629	; 0x21b5
   11f7c:	mvn	r6, #0
   11f80:	movt	r0, #3
   11f84:	ldrb	r0, [r0]
   11f88:	cmp	r0, #0
   11f8c:	beq	11f98 <__assert_fail@plt+0x9dc>
   11f90:	mov	sl, #0
   11f94:	b	11fdc <__assert_fail@plt+0xa20>
   11f98:	movw	r0, #8630	; 0x21b6
   11f9c:	mov	sl, #0
   11fa0:	movt	r0, #3
   11fa4:	ldrb	r0, [r0]
   11fa8:	cmp	r0, #0
   11fac:	bne	11fdc <__assert_fail@plt+0xa20>
   11fb0:	mov	r0, #0
   11fb4:	mov	r1, r9
   11fb8:	movw	r2, #2369	; 0x941
   11fbc:	movw	r3, #438	; 0x1b6
   11fc0:	mov	sl, #0
   11fc4:	bl	129bc <__assert_fail@plt+0x1400>
   11fc8:	mov	r6, r0
   11fcc:	cmn	r0, #1
   11fd0:	bgt	11fdc <__assert_fail@plt+0xa20>
   11fd4:	bl	11490 <__errno_location@plt>
   11fd8:	ldr	sl, [r0]
   11fdc:	ldr	r0, [r7]
   11fe0:	cmp	r0, #1
   11fe4:	beq	12000 <__assert_fail@plt+0xa44>
   11fe8:	ldr	r1, [sp, #28]
   11fec:	cmp	r0, #2
   11ff0:	beq	12004 <__assert_fail@plt+0xa48>
   11ff4:	cmp	r0, #3
   11ff8:	beq	1200c <__assert_fail@plt+0xa50>
   11ffc:	b	12280 <__assert_fail@plt+0xcc4>
   12000:	ldr	r1, [sp, #24]
   12004:	mvn	r0, #-1073741823	; 0xc0000001
   12008:	str	r0, [r1]
   1200c:	movw	r1, #8630	; 0x21b6
   12010:	movw	r0, #8656	; 0x21d0
   12014:	movw	r3, #8640	; 0x21c0
   12018:	movt	r1, #3
   1201c:	movt	r0, #3
   12020:	movt	r3, #3
   12024:	ldrb	r1, [r1]
   12028:	ldrb	r0, [r0]
   1202c:	cmp	r1, #0
   12030:	movwne	r1, #256	; 0x100
   12034:	subs	r2, r6, #1
   12038:	movne	r2, r9
   1203c:	cmp	r0, #0
   12040:	str	r1, [sp]
   12044:	mov	r0, r6
   12048:	mvn	r1, #99	; 0x63
   1204c:	movwne	r3, #0
   12050:	bl	12a24 <__assert_fail@plt+0x1468>
   12054:	cmp	r0, #0
   12058:	beq	12088 <__assert_fail@plt+0xacc>
   1205c:	bl	11490 <__errno_location@plt>
   12060:	ldr	r8, [r0]
   12064:	cmp	r6, #0
   12068:	beq	12094 <__assert_fail@plt+0xad8>
   1206c:	cmp	r6, #1
   12070:	cmpeq	r8, #9
   12074:	beq	120f0 <__assert_fail@plt+0xb34>
   12078:	cmp	r8, #0
   1207c:	bne	12108 <__assert_fail@plt+0xb4c>
   12080:	mov	r4, #1
   12084:	b	121d8 <__assert_fail@plt+0xc1c>
   12088:	mov	r8, #0
   1208c:	cmp	r6, #0
   12090:	bne	1206c <__assert_fail@plt+0xab0>
   12094:	mov	r0, #0
   12098:	bl	11598 <close@plt>
   1209c:	cmp	r0, #0
   120a0:	beq	12078 <__assert_fail@plt+0xabc>
   120a4:	bl	11490 <__errno_location@plt>
   120a8:	ldr	r6, [r0]
   120ac:	movw	r1, #64438	; 0xfbb6
   120b0:	mov	r0, #0
   120b4:	mov	r2, #5
   120b8:	mov	r4, #0
   120bc:	movt	r1, #1
   120c0:	bl	11328 <dcgettext@plt>
   120c4:	mov	r7, r0
   120c8:	mov	r0, #4
   120cc:	mov	r1, r9
   120d0:	bl	1b8d4 <__assert_fail@plt+0xa318>
   120d4:	mov	r2, r7
   120d8:	movw	r7, #8624	; 0x21b0
   120dc:	mov	r3, r0
   120e0:	mov	r0, #0
   120e4:	mov	r1, r6
   120e8:	movt	r7, #3
   120ec:	b	121d4 <__assert_fail@plt+0xc18>
   120f0:	movw	r0, #8629	; 0x21b5
   120f4:	mov	r4, #1
   120f8:	movt	r0, #3
   120fc:	ldrb	r0, [r0]
   12100:	cmp	r0, #0
   12104:	bne	121d8 <__assert_fail@plt+0xc1c>
   12108:	cmp	sl, #0
   1210c:	cmpne	sl, #21
   12110:	bne	1216c <__assert_fail@plt+0xbb0>
   12114:	cmp	r8, #2
   12118:	bne	12134 <__assert_fail@plt+0xb78>
   1211c:	movw	r0, #8629	; 0x21b5
   12120:	mov	r4, #1
   12124:	movt	r0, #3
   12128:	ldrb	r0, [r0]
   1212c:	cmp	r0, #0
   12130:	bne	121d8 <__assert_fail@plt+0xc1c>
   12134:	movw	r1, #64473	; 0xfbd9
   12138:	mov	r0, #0
   1213c:	mov	r2, #5
   12140:	mov	r4, #0
   12144:	movt	r1, #1
   12148:	bl	11328 <dcgettext@plt>
   1214c:	mov	r6, r0
   12150:	mov	r0, #4
   12154:	mov	r1, r9
   12158:	bl	1b8d4 <__assert_fail@plt+0xa318>
   1215c:	mov	r3, r0
   12160:	mov	r0, #0
   12164:	mov	r1, r8
   12168:	b	121d0 <__assert_fail@plt+0xc14>
   1216c:	cmp	sl, #22
   12170:	bne	1219c <__assert_fail@plt+0xbe0>
   12174:	mov	r0, #3
   12178:	mov	r1, r9
   1217c:	add	r2, sp, #56	; 0x38
   12180:	bl	1155c <__xstat64@plt>
   12184:	cmp	r0, #0
   12188:	bne	1219c <__assert_fail@plt+0xbe0>
   1218c:	ldr	r0, [sp, #72]	; 0x48
   12190:	and	r0, r0, #61440	; 0xf000
   12194:	cmp	r0, #16384	; 0x4000
   12198:	beq	12114 <__assert_fail@plt+0xb58>
   1219c:	movw	r1, #64457	; 0xfbc9
   121a0:	mov	r0, #0
   121a4:	mov	r2, #5
   121a8:	mov	r4, #0
   121ac:	movt	r1, #1
   121b0:	bl	11328 <dcgettext@plt>
   121b4:	mov	r6, r0
   121b8:	mov	r0, #4
   121bc:	mov	r1, r9
   121c0:	bl	1b8d4 <__assert_fail@plt+0xa318>
   121c4:	mov	r3, r0
   121c8:	mov	r0, #0
   121cc:	mov	r1, sl
   121d0:	mov	r2, r6
   121d4:	bl	113b8 <error@plt>
   121d8:	movw	r0, #8600	; 0x2198
   121dc:	and	r5, r5, r4
   121e0:	movt	r0, #3
   121e4:	mov	r2, r0
   121e8:	ldr	r0, [r0]
   121ec:	add	r1, r0, #1
   121f0:	ldr	r0, [sp, #36]	; 0x24
   121f4:	str	r1, [r2]
   121f8:	cmp	r1, r0
   121fc:	blt	11f50 <__assert_fail@plt+0x994>
   12200:	eor	r0, r5, #1
   12204:	sub	sp, fp, #28
   12208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1220c:	cmn	r0, #3
   12210:	bne	122a0 <__assert_fail@plt+0xce4>
   12214:	movw	r0, #8504	; 0x2138
   12218:	movw	r2, #63714	; 0xf8e2
   1221c:	movw	r7, #63698	; 0xf8d2
   12220:	movw	r6, #63686	; 0xf8c6
   12224:	movw	r5, #63671	; 0xf8b7
   12228:	movw	r4, #63660	; 0xf8ac
   1222c:	mov	r1, #0
   12230:	movt	r0, #3
   12234:	movt	r2, #1
   12238:	movt	r7, #1
   1223c:	movt	r6, #1
   12240:	movt	r5, #1
   12244:	movt	r4, #1
   12248:	ldr	r3, [r0]
   1224c:	movw	r0, #8612	; 0x21a4
   12250:	movt	r0, #3
   12254:	ldr	r0, [r0]
   12258:	stm	sp, {r4, r5, r6, r7}
   1225c:	str	r2, [sp, #16]
   12260:	movw	r2, #63646	; 0xf89e
   12264:	str	r1, [sp, #20]
   12268:	movw	r1, #63574	; 0xf856
   1226c:	movt	r1, #1
   12270:	movt	r2, #1
   12274:	bl	1c9cc <__assert_fail@plt+0xb410>
   12278:	mov	r0, #0
   1227c:	bl	11460 <exit@plt>
   12280:	movw	r0, #64375	; 0xfb77
   12284:	movw	r1, #64400	; 0xfb90
   12288:	movw	r3, #64412	; 0xfb9c
   1228c:	mov	r2, #147	; 0x93
   12290:	movt	r0, #1
   12294:	movt	r1, #1
   12298:	movt	r3, #1
   1229c:	bl	115bc <__assert_fail@plt>
   122a0:	cmn	r0, #2
   122a4:	bne	122b0 <__assert_fail@plt+0xcf4>
   122a8:	mov	r0, #0
   122ac:	bl	116b8 <__assert_fail@plt+0xfc>
   122b0:	mov	r0, #1
   122b4:	bl	116b8 <__assert_fail@plt+0xfc>
   122b8:	movw	r1, #63616	; 0xf880
   122bc:	mov	r0, #0
   122c0:	mov	r2, #5
   122c4:	movt	r1, #1
   122c8:	bl	11328 <dcgettext@plt>
   122cc:	mov	r5, r0
   122d0:	ldr	r0, [sl]
   122d4:	bl	1bdfc <__assert_fail@plt+0xa840>
   122d8:	mov	r3, r0
   122dc:	mov	r0, #1
   122e0:	mov	r1, #0
   122e4:	mov	r2, r5
   122e8:	bl	113b8 <error@plt>
   122ec:	movw	r1, #63895	; 0xf997
   122f0:	movt	r1, #1
   122f4:	mov	r0, #0
   122f8:	mov	r2, #5
   122fc:	bl	11328 <dcgettext@plt>
   12300:	mov	r2, r0
   12304:	mov	r0, #0
   12308:	mov	r1, #0
   1230c:	bl	113b8 <error@plt>
   12310:	mov	r0, #1
   12314:	bl	116b8 <__assert_fail@plt+0xfc>
   12318:	bl	11490 <__errno_location@plt>
   1231c:	ldr	r6, [r0]
   12320:	movw	r1, #63773	; 0xf91d
   12324:	mov	r0, #0
   12328:	mov	r2, #5
   1232c:	movt	r1, #1
   12330:	bl	11328 <dcgettext@plt>
   12334:	mov	r5, r0
   12338:	movw	r0, #8632	; 0x21b8
   1233c:	movt	r0, #3
   12340:	ldr	r1, [r0]
   12344:	mov	r0, #4
   12348:	bl	1b8d4 <__assert_fail@plt+0xa318>
   1234c:	mov	r3, r0
   12350:	mov	r0, #1
   12354:	mov	r1, r6
   12358:	mov	r2, r5
   1235c:	bl	113b8 <error@plt>
   12360:	mov	r0, #1
   12364:	b	116b8 <__assert_fail@plt+0xfc>
   12368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1236c:	add	fp, sp, #28
   12370:	sub	sp, sp, #12
   12374:	mov	r4, r3
   12378:	mov	r6, r2
   1237c:	mov	r5, r1
   12380:	mov	sl, r0
   12384:	bl	1146c <strlen@plt>
   12388:	ldr	r8, [r5]
   1238c:	cmp	r8, #0
   12390:	beq	1244c <__assert_fail@plt+0xe90>
   12394:	mov	r7, r0
   12398:	mov	r0, #0
   1239c:	add	r9, r5, #4
   123a0:	mov	r5, #0
   123a4:	str	r6, [sp, #4]
   123a8:	str	r0, [sp]
   123ac:	mvn	r0, #0
   123b0:	str	r0, [sp, #8]
   123b4:	mov	r0, r8
   123b8:	mov	r1, sl
   123bc:	mov	r2, r7
   123c0:	bl	11580 <strncmp@plt>
   123c4:	cmp	r0, #0
   123c8:	bne	12420 <__assert_fail@plt+0xe64>
   123cc:	mov	r0, r8
   123d0:	bl	1146c <strlen@plt>
   123d4:	cmp	r0, r7
   123d8:	beq	12450 <__assert_fail@plt+0xe94>
   123dc:	ldr	r0, [sp, #8]
   123e0:	cmn	r0, #1
   123e4:	beq	1241c <__assert_fail@plt+0xe60>
   123e8:	ldr	r0, [sp, #4]
   123ec:	cmp	r0, #0
   123f0:	beq	12410 <__assert_fail@plt+0xe54>
   123f4:	ldr	r1, [sp, #8]
   123f8:	mov	r2, r4
   123fc:	mla	r0, r1, r4, r0
   12400:	mov	r1, r6
   12404:	bl	1131c <memcmp@plt>
   12408:	cmp	r0, #0
   1240c:	beq	12420 <__assert_fail@plt+0xe64>
   12410:	mov	r0, #1
   12414:	str	r0, [sp]
   12418:	b	12420 <__assert_fail@plt+0xe64>
   1241c:	str	r5, [sp, #8]
   12420:	ldr	r8, [r9, r5, lsl #2]
   12424:	add	r6, r6, r4
   12428:	add	r5, r5, #1
   1242c:	cmp	r8, #0
   12430:	bne	123b4 <__assert_fail@plt+0xdf8>
   12434:	ldr	r0, [sp]
   12438:	tst	r0, #1
   1243c:	ldr	r0, [sp, #8]
   12440:	mvnne	r0, #1
   12444:	sub	sp, fp, #28
   12448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1244c:	mvn	r5, #0
   12450:	mov	r0, r5
   12454:	sub	sp, fp, #28
   12458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1245c:	push	{r4, r5, r6, r7, fp, lr}
   12460:	add	fp, sp, #16
   12464:	mov	r5, r0
   12468:	ldr	r0, [r1]
   1246c:	mvn	r4, #0
   12470:	cmp	r0, #0
   12474:	beq	124a4 <__assert_fail@plt+0xee8>
   12478:	add	r7, r1, #4
   1247c:	mov	r6, #0
   12480:	mov	r1, r5
   12484:	bl	112a4 <strcmp@plt>
   12488:	cmp	r0, #0
   1248c:	moveq	r0, r6
   12490:	popeq	{r4, r5, r6, r7, fp, pc}
   12494:	ldr	r0, [r7, r6, lsl #2]
   12498:	add	r6, r6, #1
   1249c:	cmp	r0, #0
   124a0:	bne	12480 <__assert_fail@plt+0xec4>
   124a4:	mov	r0, r4
   124a8:	pop	{r4, r5, r6, r7, fp, pc}
   124ac:	push	{r4, r5, r6, sl, fp, lr}
   124b0:	add	fp, sp, #16
   124b4:	sub	sp, sp, #8
   124b8:	mov	r4, r1
   124bc:	movw	r1, #64770	; 0xfd02
   124c0:	mov	r5, r0
   124c4:	movw	r0, #64743	; 0xfce7
   124c8:	cmn	r2, #1
   124cc:	mov	r2, #5
   124d0:	movt	r0, #1
   124d4:	movt	r1, #1
   124d8:	moveq	r1, r0
   124dc:	mov	r0, #0
   124e0:	bl	11328 <dcgettext@plt>
   124e4:	mov	r6, r0
   124e8:	mov	r0, #0
   124ec:	mov	r1, #8
   124f0:	mov	r2, r4
   124f4:	bl	1b82c <__assert_fail@plt+0xa270>
   124f8:	mov	r4, r0
   124fc:	mov	r0, #1
   12500:	mov	r1, r5
   12504:	bl	1bdec <__assert_fail@plt+0xa830>
   12508:	str	r0, [sp]
   1250c:	mov	r0, #0
   12510:	mov	r1, #0
   12514:	mov	r2, r6
   12518:	mov	r3, r4
   1251c:	bl	113b8 <error@plt>
   12520:	sub	sp, fp, #16
   12524:	pop	{r4, r5, r6, sl, fp, pc}
   12528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1252c:	add	fp, sp, #28
   12530:	sub	sp, sp, #4
   12534:	mov	r5, r1
   12538:	movw	r1, #64799	; 0xfd1f
   1253c:	mov	sl, r2
   12540:	mov	r7, r0
   12544:	mov	r0, #0
   12548:	mov	r2, #5
   1254c:	mov	r8, #0
   12550:	movt	r1, #1
   12554:	bl	11328 <dcgettext@plt>
   12558:	movw	r4, #8608	; 0x21a0
   1255c:	movt	r4, #3
   12560:	ldr	r1, [r4]
   12564:	bl	11274 <fputs_unlocked@plt>
   12568:	ldr	r6, [r7]
   1256c:	cmp	r6, #0
   12570:	beq	12610 <__assert_fail@plt+0x1054>
   12574:	add	r9, r7, #4
   12578:	mov	r7, #0
   1257c:	str	sl, [sp]
   12580:	cmp	r8, #0
   12584:	beq	125a0 <__assert_fail@plt+0xfe4>
   12588:	mov	r0, r7
   1258c:	mov	r1, r5
   12590:	mov	r2, sl
   12594:	bl	1131c <memcmp@plt>
   12598:	cmp	r0, #0
   1259c:	beq	125cc <__assert_fail@plt+0x1010>
   125a0:	ldr	r7, [r4]
   125a4:	mov	r0, r6
   125a8:	bl	1bdfc <__assert_fail@plt+0xa840>
   125ac:	movw	r2, #64820	; 0xfd34
   125b0:	mov	r3, r0
   125b4:	mov	r0, r7
   125b8:	mov	r1, #1
   125bc:	movt	r2, #1
   125c0:	bl	114d8 <__fprintf_chk@plt>
   125c4:	mov	r7, r5
   125c8:	b	125fc <__assert_fail@plt+0x1040>
   125cc:	mov	sl, r9
   125d0:	ldr	r9, [r4]
   125d4:	mov	r0, r6
   125d8:	bl	1bdfc <__assert_fail@plt+0xa840>
   125dc:	mov	r3, r0
   125e0:	mov	r0, r9
   125e4:	mov	r9, sl
   125e8:	ldr	sl, [sp]
   125ec:	movw	r2, #64828	; 0xfd3c
   125f0:	mov	r1, #1
   125f4:	movt	r2, #1
   125f8:	bl	114d8 <__fprintf_chk@plt>
   125fc:	ldr	r6, [r9, -r8, lsl #2]
   12600:	add	r5, r5, sl
   12604:	sub	r8, r8, #1
   12608:	cmp	r6, #0
   1260c:	bne	12580 <__assert_fail@plt+0xfc4>
   12610:	ldr	r0, [r4]
   12614:	ldr	r1, [r0, #20]
   12618:	ldr	r2, [r0, #24]
   1261c:	cmp	r1, r2
   12620:	addcc	r2, r1, #1
   12624:	strcc	r2, [r0, #20]
   12628:	movcc	r0, #10
   1262c:	strbcc	r0, [r1]
   12630:	subcc	sp, fp, #28
   12634:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12638:	mov	r1, #10
   1263c:	sub	sp, fp, #28
   12640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12644:	b	114fc <__overflow@plt>
   12648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1264c:	add	fp, sp, #28
   12650:	sub	sp, sp, #20
   12654:	mov	r9, r0
   12658:	ldr	r0, [fp, #16]
   1265c:	mov	r8, r3
   12660:	mov	sl, r2
   12664:	mov	r7, r1
   12668:	cmp	r0, #0
   1266c:	beq	12744 <__assert_fail@plt+0x1188>
   12670:	mov	r0, r7
   12674:	str	r9, [sp, #8]
   12678:	str	r8, [sp, #16]
   1267c:	bl	1146c <strlen@plt>
   12680:	ldr	r9, [sl]
   12684:	cmp	r9, #0
   12688:	beq	12784 <__assert_fail@plt+0x11c8>
   1268c:	str	sl, [sp, #4]
   12690:	add	r8, sl, #4
   12694:	ldr	sl, [sp, #16]
   12698:	mov	r4, r0
   1269c:	mov	r0, #0
   126a0:	mvn	r6, #0
   126a4:	mov	r5, #0
   126a8:	str	r0, [sp, #12]
   126ac:	mov	r0, r9
   126b0:	mov	r1, r7
   126b4:	mov	r2, r4
   126b8:	bl	11580 <strncmp@plt>
   126bc:	cmp	r0, #0
   126c0:	bne	12710 <__assert_fail@plt+0x1154>
   126c4:	mov	r0, r9
   126c8:	bl	1146c <strlen@plt>
   126cc:	cmp	r0, r4
   126d0:	beq	12790 <__assert_fail@plt+0x11d4>
   126d4:	cmn	r6, #1
   126d8:	beq	1270c <__assert_fail@plt+0x1150>
   126dc:	ldr	r0, [sp, #16]
   126e0:	cmp	r0, #0
   126e4:	beq	12700 <__assert_fail@plt+0x1144>
   126e8:	ldr	r2, [fp, #8]
   126ec:	mov	r1, sl
   126f0:	mla	r0, r6, r2, r0
   126f4:	bl	1131c <memcmp@plt>
   126f8:	cmp	r0, #0
   126fc:	beq	12710 <__assert_fail@plt+0x1154>
   12700:	mov	r0, #1
   12704:	str	r0, [sp, #12]
   12708:	b	12710 <__assert_fail@plt+0x1154>
   1270c:	mov	r6, r5
   12710:	ldr	r9, [r8, r5, lsl #2]
   12714:	ldr	r0, [fp, #8]
   12718:	add	r5, r5, #1
   1271c:	add	sl, sl, r0
   12720:	cmp	r9, #0
   12724:	bne	126ac <__assert_fail@plt+0x10f0>
   12728:	ldr	r0, [sp, #12]
   1272c:	ldr	r8, [sp, #16]
   12730:	ldr	sl, [sp, #4]
   12734:	ldr	r9, [sp, #8]
   12738:	tst	r0, #1
   1273c:	beq	127a0 <__assert_fail@plt+0x11e4>
   12740:	b	127ac <__assert_fail@plt+0x11f0>
   12744:	ldr	r0, [sl]
   12748:	movw	r4, #64743	; 0xfce7
   1274c:	movt	r4, #1
   12750:	cmp	r0, #0
   12754:	beq	127c0 <__assert_fail@plt+0x1204>
   12758:	add	r5, sl, #4
   1275c:	mov	r6, #0
   12760:	mov	r1, r7
   12764:	bl	112a4 <strcmp@plt>
   12768:	cmp	r0, #0
   1276c:	beq	127a0 <__assert_fail@plt+0x11e4>
   12770:	ldr	r0, [r5, r6, lsl #2]
   12774:	add	r6, r6, #1
   12778:	cmp	r0, #0
   1277c:	bne	12760 <__assert_fail@plt+0x11a4>
   12780:	b	127c0 <__assert_fail@plt+0x1204>
   12784:	ldr	r8, [sp, #16]
   12788:	ldr	r9, [sp, #8]
   1278c:	b	127b8 <__assert_fail@plt+0x11fc>
   12790:	ldr	r8, [sp, #16]
   12794:	ldr	sl, [sp, #4]
   12798:	ldr	r9, [sp, #8]
   1279c:	mov	r6, r5
   127a0:	cmn	r6, #1
   127a4:	bgt	12828 <__assert_fail@plt+0x126c>
   127a8:	beq	127b8 <__assert_fail@plt+0x11fc>
   127ac:	movw	r4, #64770	; 0xfd02
   127b0:	movt	r4, #1
   127b4:	b	127c0 <__assert_fail@plt+0x1204>
   127b8:	movw	r4, #64743	; 0xfce7
   127bc:	movt	r4, #1
   127c0:	ldr	r6, [fp, #12]
   127c4:	mov	r0, #0
   127c8:	mov	r1, r4
   127cc:	mov	r2, #5
   127d0:	bl	11328 <dcgettext@plt>
   127d4:	mov	r4, r0
   127d8:	mov	r0, #0
   127dc:	mov	r1, #8
   127e0:	mov	r2, r7
   127e4:	bl	1b82c <__assert_fail@plt+0xa270>
   127e8:	mov	r5, r0
   127ec:	mov	r0, #1
   127f0:	mov	r1, r9
   127f4:	bl	1bdec <__assert_fail@plt+0xa830>
   127f8:	str	r0, [sp]
   127fc:	mov	r0, #0
   12800:	mov	r1, #0
   12804:	mov	r2, r4
   12808:	mov	r3, r5
   1280c:	bl	113b8 <error@plt>
   12810:	ldr	r2, [fp, #8]
   12814:	mov	r0, sl
   12818:	mov	r1, r8
   1281c:	bl	12528 <__assert_fail@plt+0xf6c>
   12820:	blx	r6
   12824:	mvn	r6, #0
   12828:	mov	r0, r6
   1282c:	sub	sp, fp, #28
   12830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12834:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12838:	add	fp, sp, #24
   1283c:	ldr	r6, [r1]
   12840:	cmp	r6, #0
   12844:	beq	128a8 <__assert_fail@plt+0x12ec>
   12848:	mov	r8, r1
   1284c:	mov	r7, r2
   12850:	mov	r1, r2
   12854:	mov	r2, r3
   12858:	mov	r4, r3
   1285c:	mov	r9, r0
   12860:	bl	1131c <memcmp@plt>
   12864:	cmp	r0, #0
   12868:	beq	128a0 <__assert_fail@plt+0x12e4>
   1286c:	add	r7, r7, r4
   12870:	add	r5, r8, #4
   12874:	ldr	r6, [r5]
   12878:	cmp	r6, #0
   1287c:	beq	128a8 <__assert_fail@plt+0x12ec>
   12880:	mov	r0, r9
   12884:	mov	r1, r7
   12888:	mov	r2, r4
   1288c:	bl	1131c <memcmp@plt>
   12890:	add	r7, r7, r4
   12894:	add	r5, r5, #4
   12898:	cmp	r0, #0
   1289c:	bne	12874 <__assert_fail@plt+0x12b8>
   128a0:	mov	r0, r6
   128a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128a8:	mov	r6, #0
   128ac:	mov	r0, r6
   128b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128b4:	movw	r1, #8660	; 0x21d4
   128b8:	movt	r1, #3
   128bc:	str	r0, [r1]
   128c0:	bx	lr
   128c4:	movw	r1, #8664	; 0x21d8
   128c8:	movt	r1, #3
   128cc:	strb	r0, [r1]
   128d0:	bx	lr
   128d4:	push	{r4, r5, r6, sl, fp, lr}
   128d8:	add	fp, sp, #16
   128dc:	sub	sp, sp, #8
   128e0:	movw	r0, #8612	; 0x21a4
   128e4:	movt	r0, #3
   128e8:	ldr	r0, [r0]
   128ec:	bl	1d27c <__assert_fail@plt+0xbcc0>
   128f0:	cmp	r0, #0
   128f4:	beq	1291c <__assert_fail@plt+0x1360>
   128f8:	movw	r0, #8664	; 0x21d8
   128fc:	movt	r0, #3
   12900:	ldrb	r0, [r0]
   12904:	cmp	r0, #0
   12908:	beq	1293c <__assert_fail@plt+0x1380>
   1290c:	bl	11490 <__errno_location@plt>
   12910:	ldr	r0, [r0]
   12914:	cmp	r0, #32
   12918:	bne	1293c <__assert_fail@plt+0x1380>
   1291c:	movw	r0, #8608	; 0x21a0
   12920:	movt	r0, #3
   12924:	ldr	r0, [r0]
   12928:	bl	1d27c <__assert_fail@plt+0xbcc0>
   1292c:	cmp	r0, #0
   12930:	subeq	sp, fp, #16
   12934:	popeq	{r4, r5, r6, sl, fp, pc}
   12938:	b	129ac <__assert_fail@plt+0x13f0>
   1293c:	movw	r1, #64833	; 0xfd41
   12940:	mov	r0, #0
   12944:	mov	r2, #5
   12948:	movt	r1, #1
   1294c:	bl	11328 <dcgettext@plt>
   12950:	mov	r4, r0
   12954:	movw	r0, #8660	; 0x21d4
   12958:	movt	r0, #3
   1295c:	ldr	r6, [r0]
   12960:	bl	11490 <__errno_location@plt>
   12964:	ldr	r5, [r0]
   12968:	cmp	r6, #0
   1296c:	bne	12988 <__assert_fail@plt+0x13cc>
   12970:	movw	r2, #64830	; 0xfd3e
   12974:	mov	r0, #0
   12978:	mov	r1, r5
   1297c:	mov	r3, r4
   12980:	movt	r2, #1
   12984:	b	129a8 <__assert_fail@plt+0x13ec>
   12988:	mov	r0, r6
   1298c:	bl	1ba74 <__assert_fail@plt+0xa4b8>
   12990:	movw	r2, #64845	; 0xfd4d
   12994:	mov	r3, r0
   12998:	str	r4, [sp]
   1299c:	mov	r0, #0
   129a0:	mov	r1, r5
   129a4:	movt	r2, #1
   129a8:	bl	113b8 <error@plt>
   129ac:	movw	r0, #8512	; 0x2140
   129b0:	movt	r0, #3
   129b4:	ldr	r0, [r0]
   129b8:	bl	112ec <_exit@plt>
   129bc:	push	{r4, r5, r6, r7, fp, lr}
   129c0:	add	fp, sp, #16
   129c4:	mov	r5, r0
   129c8:	mov	r0, r1
   129cc:	mov	r1, r2
   129d0:	mov	r2, r3
   129d4:	bl	113c4 <open64@plt>
   129d8:	mov	r4, r0
   129dc:	cmp	r0, r5
   129e0:	beq	12a1c <__assert_fail@plt+0x1460>
   129e4:	cmp	r4, #0
   129e8:	blt	12a1c <__assert_fail@plt+0x1460>
   129ec:	mov	r0, r4
   129f0:	mov	r1, r5
   129f4:	bl	11334 <dup2@plt>
   129f8:	mov	r5, r0
   129fc:	bl	11490 <__errno_location@plt>
   12a00:	ldr	r7, [r0]
   12a04:	mov	r6, r0
   12a08:	mov	r0, r4
   12a0c:	bl	11598 <close@plt>
   12a10:	mov	r0, r5
   12a14:	str	r7, [r6]
   12a18:	pop	{r4, r5, r6, r7, fp, pc}
   12a1c:	mov	r0, r4
   12a20:	pop	{r4, r5, r6, r7, fp, pc}
   12a24:	push	{r4, r5, r6, r7, fp, lr}
   12a28:	add	fp, sp, #16
   12a2c:	mov	r4, r3
   12a30:	mov	r5, r2
   12a34:	mov	r6, r1
   12a38:	mov	r7, r0
   12a3c:	cmp	r0, #0
   12a40:	blt	12a94 <__assert_fail@plt+0x14d8>
   12a44:	mov	r0, r7
   12a48:	mov	r1, r4
   12a4c:	bl	11544 <futimens@plt>
   12a50:	cmp	r5, #0
   12a54:	beq	12aa0 <__assert_fail@plt+0x14e4>
   12a58:	cmp	r7, #0
   12a5c:	blt	12a7c <__assert_fail@plt+0x14c0>
   12a60:	cmn	r0, #1
   12a64:	bne	12aa0 <__assert_fail@plt+0x14e4>
   12a68:	bl	11490 <__errno_location@plt>
   12a6c:	ldr	r1, [r0]
   12a70:	mvn	r0, #0
   12a74:	cmp	r1, #38	; 0x26
   12a78:	bne	12ab8 <__assert_fail@plt+0x14fc>
   12a7c:	ldr	r3, [fp, #8]
   12a80:	mov	r0, r6
   12a84:	mov	r1, r5
   12a88:	mov	r2, r4
   12a8c:	bl	11298 <utimensat@plt>
   12a90:	b	12aa0 <__assert_fail@plt+0x14e4>
   12a94:	mov	r0, #1
   12a98:	cmp	r5, #0
   12a9c:	bne	12a58 <__assert_fail@plt+0x149c>
   12aa0:	cmp	r0, #1
   12aa4:	popne	{r4, r5, r6, r7, fp, pc}
   12aa8:	bl	11490 <__errno_location@plt>
   12aac:	mov	r1, #9
   12ab0:	str	r1, [r0]
   12ab4:	mvn	r0, #0
   12ab8:	pop	{r4, r5, r6, r7, fp, pc}
   12abc:	mov	r1, r0
   12ac0:	mov	r0, #0
   12ac4:	b	112e0 <clock_gettime@plt>
   12ac8:	push	{fp, lr}
   12acc:	mov	fp, sp
   12ad0:	mov	r1, r0
   12ad4:	mov	r0, #0
   12ad8:	bl	112e0 <clock_gettime@plt>
   12adc:	pop	{fp, pc}
   12ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae4:	add	fp, sp, #28
   12ae8:	sub	sp, sp, #4
   12aec:	vpush	{d8-d9}
   12af0:	sub	sp, sp, #408	; 0x198
   12af4:	sub	sp, sp, #1024	; 0x400
   12af8:	sub	r1, fp, #72	; 0x48
   12afc:	mov	r4, r0
   12b00:	mvn	r7, #1
   12b04:	add	sl, sp, #248	; 0xf8
   12b08:	vmov.i32	q4, #0	; 0x00000000
   12b0c:	mov	r8, #0
   12b10:	mov	r9, #0
   12b14:	add	r0, r1, #1
   12b18:	str	r0, [sp, #88]	; 0x58
   12b1c:	add	r0, r1, #19
   12b20:	str	r0, [sp, #92]	; 0x5c
   12b24:	add	r0, r4, #48	; 0x30
   12b28:	str	r0, [sp, #100]	; 0x64
   12b2c:	add	r0, r4, #32
   12b30:	str	r0, [sp, #108]	; 0x6c
   12b34:	add	r0, r4, #40	; 0x28
   12b38:	str	r0, [sp, #96]	; 0x60
   12b3c:	add	r0, r4, #64	; 0x40
   12b40:	str	r0, [sp, #168]	; 0xa8
   12b44:	add	r0, r4, #56	; 0x38
   12b48:	str	r0, [sp, #172]	; 0xac
   12b4c:	add	r0, r4, #8
   12b50:	str	r0, [sp, #104]	; 0x68
   12b54:	add	r0, r4, #96	; 0x60
   12b58:	str	r0, [sp, #132]	; 0x84
   12b5c:	add	r0, r4, #104	; 0x68
   12b60:	str	r0, [sp, #128]	; 0x80
   12b64:	add	r0, r4, #112	; 0x70
   12b68:	str	r0, [sp, #124]	; 0x7c
   12b6c:	add	r0, r4, #120	; 0x78
   12b70:	str	r0, [sp, #120]	; 0x78
   12b74:	add	r0, r4, #128	; 0x80
   12b78:	str	r0, [sp, #116]	; 0x74
   12b7c:	add	r0, r4, #136	; 0x88
   12b80:	str	r0, [sp, #112]	; 0x70
   12b84:	add	r0, r4, #80	; 0x50
   12b88:	str	r0, [sp, #152]	; 0x98
   12b8c:	add	r0, r4, #72	; 0x48
   12b90:	str	r0, [sp, #148]	; 0x94
   12b94:	add	r0, r4, #88	; 0x58
   12b98:	str	r0, [sp, #84]	; 0x54
   12b9c:	mov	r0, #0
   12ba0:	strh	r0, [fp, #-112]	; 0xffffff90
   12ba4:	mov	r0, #0
   12ba8:	str	r0, [sp, #136]	; 0x88
   12bac:	mov	r0, #0
   12bb0:	str	r0, [sp, #140]	; 0x8c
   12bb4:	mov	r0, #0
   12bb8:	str	r0, [sp, #144]	; 0x90
   12bbc:	mov	r0, #0
   12bc0:	str	r0, [sp, #160]	; 0xa0
   12bc4:	mov	r0, #0
   12bc8:	str	r0, [sp, #164]	; 0xa4
   12bcc:	mov	r0, #0
   12bd0:	str	r0, [sp, #156]	; 0x9c
   12bd4:	cmp	r8, #12
   12bd8:	beq	16498 <__assert_fail@plt+0x4edc>
   12bdc:	movw	r0, #64912	; 0xfd90
   12be0:	movt	r0, #1
   12be4:	add	r0, r0, r8
   12be8:	ldrsb	ip, [r0]
   12bec:	cmn	ip, #93	; 0x5d
   12bf0:	beq	139b8 <__assert_fail@plt+0x23fc>
   12bf4:	cmn	r7, #2
   12bf8:	bne	13284 <__assert_fail@plt+0x1cc8>
   12bfc:	ldr	r1, [r4]
   12c00:	b	12c0c <__assert_fail@plt+0x1650>
   12c04:	add	r1, r1, #1
   12c08:	str	r1, [r4]
   12c0c:	ldrb	r3, [r1]
   12c10:	sub	r0, r3, #9
   12c14:	cmp	r0, #5
   12c18:	bcc	12c04 <__assert_fail@plt+0x1648>
   12c1c:	cmp	r3, #32
   12c20:	beq	12c04 <__assert_fail@plt+0x1648>
   12c24:	sub	r0, r3, #48	; 0x30
   12c28:	cmp	r0, #10
   12c2c:	bcs	12c40 <__assert_fail@plt+0x1684>
   12c30:	cmp	r3, #45	; 0x2d
   12c34:	cmpne	r3, #43	; 0x2b
   12c38:	beq	12da0 <__assert_fail@plt+0x17e4>
   12c3c:	b	12e2c <__assert_fail@plt+0x1870>
   12c40:	sub	r0, r3, #40	; 0x28
   12c44:	cmp	r0, #82	; 0x52
   12c48:	bhi	13958 <__assert_fail@plt+0x239c>
   12c4c:	add	r2, pc, #0
   12c50:	ldr	pc, [r2, r0, lsl #2]
   12c54:	ldrdeq	r2, [r1], -r0
   12c58:	andeq	r3, r1, r8, asr r9
   12c5c:	andeq	r3, r1, r8, asr r9
   12c60:	andeq	r2, r1, r0, lsr #27
   12c64:	andeq	r3, r1, r8, asr r9
   12c68:	andeq	r2, r1, r0, lsr #27
   12c6c:	andeq	r3, r1, r8, asr r9
   12c70:	andeq	r3, r1, r8, asr r9
   12c74:	andeq	r3, r1, r8, asr r9
   12c78:	andeq	r3, r1, r8, asr r9
   12c7c:	andeq	r3, r1, r8, asr r9
   12c80:	andeq	r3, r1, r8, asr r9
   12c84:	andeq	r3, r1, r8, asr r9
   12c88:	andeq	r3, r1, r8, asr r9
   12c8c:	andeq	r3, r1, r8, asr r9
   12c90:	andeq	r3, r1, r8, asr r9
   12c94:	andeq	r3, r1, r8, asr r9
   12c98:	andeq	r3, r1, r8, asr r9
   12c9c:	andeq	r3, r1, r8, asr r9
   12ca0:	andeq	r3, r1, r8, asr r9
   12ca4:	andeq	r3, r1, r8, asr r9
   12ca8:	andeq	r3, r1, r8, asr r9
   12cac:	andeq	r3, r1, r8, asr r9
   12cb0:	andeq	r3, r1, r8, asr r9
   12cb4:	andeq	r3, r1, r8, asr r9
   12cb8:	andeq	r3, r1, r8, lsl r0
   12cbc:	andeq	r3, r1, r8, lsl r0
   12cc0:	andeq	r3, r1, r8, lsl r0
   12cc4:	andeq	r3, r1, r8, lsl r0
   12cc8:	andeq	r3, r1, r8, lsl r0
   12ccc:	andeq	r3, r1, r8, lsl r0
   12cd0:	andeq	r3, r1, r8, lsl r0
   12cd4:	andeq	r3, r1, r8, lsl r0
   12cd8:	andeq	r3, r1, r8, lsl r0
   12cdc:	andeq	r3, r1, r8, lsl r0
   12ce0:	andeq	r3, r1, r8, lsl r0
   12ce4:	andeq	r3, r1, r8, lsl r0
   12ce8:	andeq	r3, r1, r8, lsl r0
   12cec:	andeq	r3, r1, r8, lsl r0
   12cf0:	andeq	r3, r1, r8, lsl r0
   12cf4:	andeq	r3, r1, r8, lsl r0
   12cf8:	andeq	r3, r1, r8, lsl r0
   12cfc:	andeq	r3, r1, r8, lsl r0
   12d00:	andeq	r3, r1, r8, lsl r0
   12d04:	andeq	r3, r1, r8, lsl r0
   12d08:	andeq	r3, r1, r8, lsl r0
   12d0c:	andeq	r3, r1, r8, lsl r0
   12d10:	andeq	r3, r1, r8, lsl r0
   12d14:	andeq	r3, r1, r8, lsl r0
   12d18:	andeq	r3, r1, r8, lsl r0
   12d1c:	andeq	r3, r1, r8, lsl r0
   12d20:	andeq	r3, r1, r8, asr r9
   12d24:	andeq	r3, r1, r8, asr r9
   12d28:	andeq	r3, r1, r8, asr r9
   12d2c:	andeq	r3, r1, r8, asr r9
   12d30:	andeq	r3, r1, r8, asr r9
   12d34:	andeq	r3, r1, r8, asr r9
   12d38:	andeq	r3, r1, r8, lsl r0
   12d3c:	andeq	r3, r1, r8, lsl r0
   12d40:	andeq	r3, r1, r8, lsl r0
   12d44:	andeq	r3, r1, r8, lsl r0
   12d48:	andeq	r3, r1, r8, lsl r0
   12d4c:	andeq	r3, r1, r8, lsl r0
   12d50:	andeq	r3, r1, r8, lsl r0
   12d54:	andeq	r3, r1, r8, lsl r0
   12d58:	andeq	r3, r1, r8, lsl r0
   12d5c:	andeq	r3, r1, r8, lsl r0
   12d60:	andeq	r3, r1, r8, lsl r0
   12d64:	andeq	r3, r1, r8, lsl r0
   12d68:	andeq	r3, r1, r8, lsl r0
   12d6c:	andeq	r3, r1, r8, lsl r0
   12d70:	andeq	r3, r1, r8, lsl r0
   12d74:	andeq	r3, r1, r8, lsl r0
   12d78:	andeq	r3, r1, r8, lsl r0
   12d7c:	andeq	r3, r1, r8, lsl r0
   12d80:	andeq	r3, r1, r8, lsl r0
   12d84:	andeq	r3, r1, r8, lsl r0
   12d88:	andeq	r3, r1, r8, lsl r0
   12d8c:	andeq	r3, r1, r8, lsl r0
   12d90:	andeq	r3, r1, r8, lsl r0
   12d94:	andeq	r3, r1, r8, lsl r0
   12d98:	andeq	r3, r1, r8, lsl r0
   12d9c:	andeq	r3, r1, r8, lsl r0
   12da0:	add	r1, r1, #1
   12da4:	str	r1, [r4]
   12da8:	ldrb	r2, [r1]
   12dac:	sub	r0, r2, #9
   12db0:	cmp	r0, #5
   12db4:	bcc	12da0 <__assert_fail@plt+0x17e4>
   12db8:	cmp	r2, #32
   12dbc:	beq	12da0 <__assert_fail@plt+0x17e4>
   12dc0:	sub	r0, r2, #48	; 0x30
   12dc4:	cmp	r0, #9
   12dc8:	bhi	12c0c <__assert_fail@plt+0x1650>
   12dcc:	b	12e18 <__assert_fail@plt+0x185c>
   12dd0:	mov	r0, #0
   12dd4:	mov	r2, r1
   12dd8:	add	r1, r1, #1
   12ddc:	str	r1, [r4]
   12de0:	ldrb	r2, [r2]
   12de4:	cmp	r2, #40	; 0x28
   12de8:	beq	12e08 <__assert_fail@plt+0x184c>
   12dec:	cmp	r2, #41	; 0x29
   12df0:	beq	12e00 <__assert_fail@plt+0x1844>
   12df4:	cmp	r2, #0
   12df8:	bne	12e0c <__assert_fail@plt+0x1850>
   12dfc:	b	1396c <__assert_fail@plt+0x23b0>
   12e00:	sub	r0, r0, #1
   12e04:	b	12e0c <__assert_fail@plt+0x1850>
   12e08:	add	r0, r0, #1
   12e0c:	cmp	r0, #0
   12e10:	bne	12dd4 <__assert_fail@plt+0x1818>
   12e14:	b	12c0c <__assert_fail@plt+0x1650>
   12e18:	cmp	r3, #45	; 0x2d
   12e1c:	mov	r0, #1
   12e20:	str	r9, [sp, #192]	; 0xc0
   12e24:	mvneq	r0, #0
   12e28:	b	12e38 <__assert_fail@plt+0x187c>
   12e2c:	mov	r0, #0
   12e30:	mov	r2, r3
   12e34:	str	r9, [sp, #192]	; 0xc0
   12e38:	mov	r5, #0
   12e3c:	mov	r3, r1
   12e40:	cmn	r5, #1
   12e44:	ble	12e5c <__assert_fail@plt+0x18a0>
   12e48:	movw	r6, #52428	; 0xcccc
   12e4c:	movt	r6, #3276	; 0xccc
   12e50:	cmp	r5, r6
   12e54:	ble	12e70 <__assert_fail@plt+0x18b4>
   12e58:	b	13144 <__assert_fail@plt+0x1b88>
   12e5c:	beq	12e70 <__assert_fail@plt+0x18b4>
   12e60:	mov	r6, #-2147483648	; 0x80000000
   12e64:	sdiv	r6, r6, r5
   12e68:	cmp	r6, #10
   12e6c:	blt	13144 <__assert_fail@plt+0x1b88>
   12e70:	mvn	r6, #47	; 0x2f
   12e74:	cmp	r0, #0
   12e78:	mov	r7, #63	; 0x3f
   12e7c:	uxtab	r6, r6, r2
   12e80:	uxtb	r2, r2
   12e84:	rsblt	r6, r2, #48	; 0x30
   12e88:	add	r2, r5, r5, lsl #2
   12e8c:	add	r5, r6, r2, lsl #1
   12e90:	cmp	r5, r2, lsl #1
   12e94:	bvs	132d0 <__assert_fail@plt+0x1d14>
   12e98:	ldrb	r2, [r3, #1]!
   12e9c:	sub	r6, r2, #48	; 0x30
   12ea0:	cmp	r6, #10
   12ea4:	bcc	12e40 <__assert_fail@plt+0x1884>
   12ea8:	orr	r2, r2, #2
   12eac:	cmp	r2, #46	; 0x2e
   12eb0:	bne	13150 <__assert_fail@plt+0x1b94>
   12eb4:	ldrb	r2, [r3, #1]
   12eb8:	sub	r2, r2, #48	; 0x30
   12ebc:	cmp	r2, #9
   12ec0:	bhi	13150 <__assert_fail@plt+0x1b94>
   12ec4:	mov	r1, r3
   12ec8:	str	ip, [sp, #244]	; 0xf4
   12ecc:	add	r2, r2, r2, lsl #2
   12ed0:	ldrb	r6, [r1, #2]!
   12ed4:	sub	r7, r6, #48	; 0x30
   12ed8:	mov	r6, #2
   12edc:	cmp	r7, #10
   12ee0:	movwcc	r6, #3
   12ee4:	addcc	r1, r3, #3
   12ee8:	ldrb	r3, [r3, r6]
   12eec:	sub	r3, r3, #48	; 0x30
   12ef0:	cmp	r3, #10
   12ef4:	str	r3, [sp, #240]	; 0xf0
   12ef8:	addcc	r1, r1, #1
   12efc:	mov	r3, r1
   12f00:	ldrb	r6, [r3], #1
   12f04:	sub	r6, r6, #48	; 0x30
   12f08:	cmp	r6, #10
   12f0c:	str	r6, [sp, #236]	; 0xec
   12f10:	movcs	r3, r1
   12f14:	mov	r1, r3
   12f18:	ldrb	r6, [r1], #1
   12f1c:	sub	r6, r6, #48	; 0x30
   12f20:	cmp	r6, #10
   12f24:	str	r6, [sp, #232]	; 0xe8
   12f28:	movcs	r1, r3
   12f2c:	mov	r3, r1
   12f30:	ldrb	r6, [r3], #1
   12f34:	sub	r9, r6, #48	; 0x30
   12f38:	cmp	r9, #10
   12f3c:	movcs	r3, r1
   12f40:	mov	r1, r3
   12f44:	ldrb	r6, [r1], #1
   12f48:	sub	lr, r6, #48	; 0x30
   12f4c:	cmp	lr, #10
   12f50:	movcs	r1, r3
   12f54:	mov	r6, r1
   12f58:	ldrb	r3, [r6], #1
   12f5c:	sub	ip, r3, #48	; 0x30
   12f60:	cmp	ip, #10
   12f64:	movcs	r6, r1
   12f68:	mov	r1, r6
   12f6c:	ldrb	r3, [r1], #1
   12f70:	sub	r3, r3, #48	; 0x30
   12f74:	cmp	r3, #10
   12f78:	movcs	r1, r6
   12f7c:	lsl	r6, r2, #1
   12f80:	cmp	r7, #10
   12f84:	addcc	r6, r7, r2, lsl #1
   12f88:	ldr	r7, [sp, #240]	; 0xf0
   12f8c:	add	r2, r6, r6, lsl #2
   12f90:	lsl	r6, r2, #1
   12f94:	cmp	r7, #10
   12f98:	addcc	r6, r7, r2, lsl #1
   12f9c:	ldr	r7, [sp, #236]	; 0xec
   12fa0:	add	r2, r6, r6, lsl #2
   12fa4:	lsl	r6, r2, #1
   12fa8:	cmp	r7, #10
   12fac:	addcc	r6, r7, r2, lsl #1
   12fb0:	ldr	r7, [sp, #232]	; 0xe8
   12fb4:	add	r2, r6, r6, lsl #2
   12fb8:	lsl	r6, r2, #1
   12fbc:	cmp	r7, #10
   12fc0:	addcc	r6, r7, r2, lsl #1
   12fc4:	cmp	r9, #10
   12fc8:	add	r2, r6, r6, lsl #2
   12fcc:	lsl	r6, r2, #1
   12fd0:	addcc	r6, r9, r2, lsl #1
   12fd4:	cmp	lr, #10
   12fd8:	add	r2, r6, r6, lsl #2
   12fdc:	lsl	r6, r2, #1
   12fe0:	addcc	r6, lr, r2, lsl #1
   12fe4:	cmp	ip, #10
   12fe8:	add	r2, r6, r6, lsl #2
   12fec:	lsl	r6, r2, #1
   12ff0:	addcc	r6, ip, r2, lsl #1
   12ff4:	cmp	r3, #10
   12ff8:	add	r6, r6, r6, lsl #2
   12ffc:	lsl	r2, r6, #1
   13000:	addcc	r2, r3, r6, lsl #1
   13004:	cmn	r0, #1
   13008:	ble	131a4 <__assert_fail@plt+0x1be8>
   1300c:	ldr	ip, [sp, #244]	; 0xf4
   13010:	mov	r7, #63	; 0x3f
   13014:	b	132a4 <__assert_fail@plt+0x1ce8>
   13018:	ldr	r7, [sp, #92]	; 0x5c
   1301c:	sub	r0, fp, #72	; 0x48
   13020:	str	ip, [sp, #244]	; 0xf4
   13024:	mvn	ip, #96	; 0x60
   13028:	str	r9, [sp, #192]	; 0xc0
   1302c:	mov	r5, r0
   13030:	cmp	r5, r7
   13034:	strbcc	r3, [r5], #1
   13038:	ldrcc	r2, [r4]
   1303c:	movcs	r2, r1
   13040:	add	r1, r2, #1
   13044:	str	r1, [r4]
   13048:	ldrb	r3, [r2, #1]
   1304c:	mov	r2, #1
   13050:	sub	r6, r3, #65	; 0x41
   13054:	cmp	r6, #26
   13058:	subcs	r6, r3, #97	; 0x61
   1305c:	cmpcs	r6, #26
   13060:	movcs	r2, #0
   13064:	cmp	r3, #46	; 0x2e
   13068:	beq	13030 <__assert_fail@plt+0x1a74>
   1306c:	cmp	r2, #0
   13070:	bne	13030 <__assert_fail@plt+0x1a74>
   13074:	mov	r1, #0
   13078:	strb	r1, [r5]
   1307c:	ldrb	r3, [fp, #-72]	; 0xffffffb8
   13080:	cmp	r3, #0
   13084:	beq	130ac <__assert_fail@plt+0x1af0>
   13088:	ldr	r1, [sp, #88]	; 0x58
   1308c:	uxtab	r2, ip, r3
   13090:	cmp	r2, #26
   13094:	subcc	r3, r3, #32
   13098:	strb	r3, [r1, #-1]
   1309c:	ldrb	r3, [r1]
   130a0:	add	r1, r1, #1
   130a4:	cmp	r3, #0
   130a8:	bne	1308c <__assert_fail@plt+0x1ad0>
   130ac:	movw	r1, #2701	; 0xa8d
   130b0:	movt	r1, #2
   130b4:	bl	112a4 <strcmp@plt>
   130b8:	movw	r9, #528	; 0x210
   130bc:	cmp	r0, #0
   130c0:	movt	r9, #2
   130c4:	beq	13258 <__assert_fail@plt+0x1c9c>
   130c8:	movw	r1, #2704	; 0xa90
   130cc:	sub	r5, fp, #72	; 0x48
   130d0:	mov	r0, r5
   130d4:	movt	r1, #2
   130d8:	bl	112a4 <strcmp@plt>
   130dc:	cmp	r0, #0
   130e0:	beq	13184 <__assert_fail@plt+0x1bc8>
   130e4:	movw	r1, #2709	; 0xa95
   130e8:	mov	r0, r5
   130ec:	movt	r1, #2
   130f0:	bl	112a4 <strcmp@plt>
   130f4:	cmp	r0, #0
   130f8:	beq	13194 <__assert_fail@plt+0x1bd8>
   130fc:	movw	r1, #2712	; 0xa98
   13100:	mov	r0, r5
   13104:	movt	r1, #2
   13108:	bl	112a4 <strcmp@plt>
   1310c:	cmp	r0, #0
   13110:	beq	131dc <__assert_fail@plt+0x1c20>
   13114:	mov	r0, r5
   13118:	bl	1146c <strlen@plt>
   1311c:	mov	r6, r0
   13120:	cmp	r0, #3
   13124:	beq	131ec <__assert_fail@plt+0x1c30>
   13128:	cmp	r6, #4
   1312c:	bne	131f4 <__assert_fail@plt+0x1c38>
   13130:	ldrb	r0, [fp, #-69]	; 0xffffffbb
   13134:	sub	r0, r0, #46	; 0x2e
   13138:	clz	r0, r0
   1313c:	lsr	r5, r0, #5
   13140:	b	131f8 <__assert_fail@plt+0x1c3c>
   13144:	ldr	r9, [sp, #192]	; 0xc0
   13148:	mov	r7, #63	; 0x3f
   1314c:	b	132d4 <__assert_fail@plt+0x1d18>
   13150:	ldr	r9, [sp, #192]	; 0xc0
   13154:	sub	r1, r3, r1
   13158:	cmp	r0, #0
   1315c:	movw	r7, #274	; 0x112
   13160:	lsr	r0, r0, #31
   13164:	str	r3, [r4]
   13168:	str	r5, [sp, #136]	; 0x88
   1316c:	str	r1, [sp, #144]	; 0x90
   13170:	asr	r1, r5, #31
   13174:	movweq	r7, #275	; 0x113
   13178:	str	r0, [sp, #164]	; 0xa4
   1317c:	str	r1, [sp, #140]	; 0x8c
   13180:	b	132d4 <__assert_fail@plt+0x1d18>
   13184:	movw	r0, #528	; 0x210
   13188:	movt	r0, #2
   1318c:	add	r9, r0, #12
   13190:	b	13258 <__assert_fail@plt+0x1c9c>
   13194:	movw	r0, #528	; 0x210
   13198:	movt	r0, #2
   1319c:	add	r9, r0, #24
   131a0:	b	13258 <__assert_fail@plt+0x1c9c>
   131a4:	ldrb	r3, [r1]
   131a8:	ldr	ip, [sp, #244]	; 0xf4
   131ac:	mov	r7, #63	; 0x3f
   131b0:	sub	r6, r3, #48	; 0x30
   131b4:	cmp	r6, #9
   131b8:	bhi	132a4 <__assert_fail@plt+0x1ce8>
   131bc:	uxtb	r3, r3
   131c0:	cmp	r3, #48	; 0x30
   131c4:	bne	132a0 <__assert_fail@plt+0x1ce4>
   131c8:	ldrb	r3, [r1, #1]!
   131cc:	sub	r6, r3, #48	; 0x30
   131d0:	cmp	r6, #10
   131d4:	bcc	131bc <__assert_fail@plt+0x1c00>
   131d8:	b	132a4 <__assert_fail@plt+0x1ce8>
   131dc:	movw	r0, #528	; 0x210
   131e0:	movt	r0, #2
   131e4:	add	r9, r0, #36	; 0x24
   131e8:	b	13258 <__assert_fail@plt+0x1c9c>
   131ec:	mov	r5, #1
   131f0:	b	131f8 <__assert_fail@plt+0x1c3c>
   131f4:	mov	r5, #0
   131f8:	movw	r1, #2717	; 0xa9d
   131fc:	movw	r9, #588	; 0x24c
   13200:	movt	r1, #2
   13204:	movt	r9, #2
   13208:	sub	r0, fp, #72	; 0x48
   1320c:	cmp	r5, #0
   13210:	beq	13228 <__assert_fail@plt+0x1c6c>
   13214:	mov	r2, #3
   13218:	bl	11580 <strncmp@plt>
   1321c:	cmp	r0, #0
   13220:	bne	13234 <__assert_fail@plt+0x1c78>
   13224:	b	13258 <__assert_fail@plt+0x1c9c>
   13228:	bl	112a4 <strcmp@plt>
   1322c:	cmp	r0, #0
   13230:	beq	13258 <__assert_fail@plt+0x1c9c>
   13234:	ldr	r1, [r9, #12]!
   13238:	cmp	r1, #0
   1323c:	bne	13208 <__assert_fail@plt+0x1c4c>
   13240:	mov	r0, r4
   13244:	sub	r1, fp, #72	; 0x48
   13248:	bl	19d28 <__assert_fail@plt+0x876c>
   1324c:	mov	r9, r0
   13250:	cmp	r0, #0
   13254:	beq	13320 <__assert_fail@plt+0x1d64>
   13258:	ldr	r1, [r9, #8]
   1325c:	ldr	r6, [r9, #4]
   13260:	asr	r0, r1, #31
   13264:	str	r1, [sp, #164]	; 0xa4
   13268:	str	r0, [sp, #160]	; 0xa0
   1326c:	mov	r0, r1
   13270:	lsr	r0, r1, #8
   13274:	str	r0, [sp, #156]	; 0x9c
   13278:	ldr	r9, [sp, #192]	; 0xc0
   1327c:	ldr	ip, [sp, #244]	; 0xf4
   13280:	mov	r7, r6
   13284:	cmp	r7, #1
   13288:	blt	1396c <__assert_fail@plt+0x23b0>
   1328c:	lsr	r1, r7, #1
   13290:	mov	r0, #2
   13294:	cmp	r1, #138	; 0x8a
   13298:	bhi	13974 <__assert_fail@plt+0x23b8>
   1329c:	b	132d4 <__assert_fail@plt+0x1d18>
   132a0:	add	r2, r2, #1
   132a4:	sub	r1, r1, #1
   132a8:	ldrb	r3, [r1, #1]!
   132ac:	sub	r3, r3, #48	; 0x30
   132b0:	cmp	r3, #10
   132b4:	bcc	132a8 <__assert_fail@plt+0x1cec>
   132b8:	cmn	r0, #1
   132bc:	bgt	132f4 <__assert_fail@plt+0x1d38>
   132c0:	cmp	r2, #0
   132c4:	beq	132f4 <__assert_fail@plt+0x1d38>
   132c8:	subs	r3, r5, #1
   132cc:	bvc	132e4 <__assert_fail@plt+0x1d28>
   132d0:	ldr	r9, [sp, #192]	; 0xc0
   132d4:	movw	r0, #65026	; 0xfe02
   132d8:	movt	r0, #1
   132dc:	ldrb	r0, [r0, r7]
   132e0:	b	13974 <__assert_fail@plt+0x23b8>
   132e4:	movw	r5, #51712	; 0xca00
   132e8:	movt	r5, #15258	; 0x3b9a
   132ec:	sub	r2, r5, r2
   132f0:	mov	r5, r3
   132f4:	str	r2, [sp, #160]	; 0xa0
   132f8:	ldr	r9, [sp, #192]	; 0xc0
   132fc:	cmp	r0, #0
   13300:	mov	r0, r5
   13304:	mov	r7, #276	; 0x114
   13308:	str	r1, [r4]
   1330c:	str	r5, [sp, #164]	; 0xa4
   13310:	lsr	r0, r5, #8
   13314:	movweq	r7, #277	; 0x115
   13318:	str	r0, [sp, #156]	; 0x9c
   1331c:	b	132d4 <__assert_fail@plt+0x1d18>
   13320:	movw	r1, #2548	; 0x9f4
   13324:	sub	r0, fp, #72	; 0x48
   13328:	movt	r1, #2
   1332c:	bl	112a4 <strcmp@plt>
   13330:	movw	r9, #888	; 0x378
   13334:	cmp	r0, #0
   13338:	movt	r9, #2
   1333c:	beq	13258 <__assert_fail@plt+0x1c9c>
   13340:	movw	r1, #3081	; 0xc09
   13344:	sub	r0, fp, #72	; 0x48
   13348:	movt	r1, #2
   1334c:	bl	112a4 <strcmp@plt>
   13350:	movw	r9, #900	; 0x384
   13354:	cmp	r0, #0
   13358:	movt	r9, #2
   1335c:	beq	13258 <__assert_fail@plt+0x1c9c>
   13360:	movw	r1, #3086	; 0xc0e
   13364:	sub	r5, fp, #72	; 0x48
   13368:	mov	r0, r5
   1336c:	movt	r1, #2
   13370:	bl	112a4 <strcmp@plt>
   13374:	movw	r9, #900	; 0x384
   13378:	cmp	r0, #0
   1337c:	movt	r9, #2
   13380:	add	r1, r9, #12
   13384:	beq	16128 <__assert_fail@plt+0x4b6c>
   13388:	str	r1, [sp, #240]	; 0xf0
   1338c:	movw	r1, #3092	; 0xc14
   13390:	mov	r0, r5
   13394:	movt	r1, #2
   13398:	bl	112a4 <strcmp@plt>
   1339c:	add	r7, r9, #24
   133a0:	cmp	r0, #0
   133a4:	beq	16130 <__assert_fail@plt+0x4b74>
   133a8:	movw	r1, #3102	; 0xc1e
   133ac:	mov	r0, r5
   133b0:	movt	r1, #2
   133b4:	bl	112a4 <strcmp@plt>
   133b8:	add	r1, r9, #36	; 0x24
   133bc:	cmp	r0, #0
   133c0:	beq	16128 <__assert_fail@plt+0x4b6c>
   133c4:	str	r1, [sp, #232]	; 0xe8
   133c8:	movw	r1, #2875	; 0xb3b
   133cc:	mov	r0, r5
   133d0:	str	r7, [sp, #236]	; 0xec
   133d4:	movt	r1, #2
   133d8:	bl	112a4 <strcmp@plt>
   133dc:	add	r7, r9, #48	; 0x30
   133e0:	cmp	r0, #0
   133e4:	beq	16130 <__assert_fail@plt+0x4b74>
   133e8:	movw	r1, #3107	; 0xc23
   133ec:	mov	r0, r5
   133f0:	movt	r1, #2
   133f4:	bl	112a4 <strcmp@plt>
   133f8:	add	r1, r9, #60	; 0x3c
   133fc:	cmp	r0, #0
   13400:	beq	16128 <__assert_fail@plt+0x4b6c>
   13404:	str	r1, [sp, #224]	; 0xe0
   13408:	movw	r1, #3112	; 0xc28
   1340c:	mov	r0, r5
   13410:	str	r7, [sp, #228]	; 0xe4
   13414:	movt	r1, #2
   13418:	bl	112a4 <strcmp@plt>
   1341c:	add	r7, r9, #72	; 0x48
   13420:	cmp	r0, #0
   13424:	beq	16130 <__assert_fail@plt+0x4b74>
   13428:	movw	r1, #3119	; 0xc2f
   1342c:	mov	r0, r5
   13430:	movt	r1, #2
   13434:	bl	112a4 <strcmp@plt>
   13438:	add	r1, r9, #84	; 0x54
   1343c:	cmp	r0, #0
   13440:	beq	16128 <__assert_fail@plt+0x4b6c>
   13444:	str	r1, [sp, #216]	; 0xd8
   13448:	movw	r1, #3123	; 0xc33
   1344c:	mov	r0, r5
   13450:	movt	r1, #2
   13454:	bl	112a4 <strcmp@plt>
   13458:	add	r1, r9, #96	; 0x60
   1345c:	cmp	r0, #0
   13460:	str	r1, [sp, #220]	; 0xdc
   13464:	beq	16138 <__assert_fail@plt+0x4b7c>
   13468:	movw	r1, #3130	; 0xc3a
   1346c:	mov	r0, r5
   13470:	movt	r1, #2
   13474:	bl	112a4 <strcmp@plt>
   13478:	add	r5, r9, #108	; 0x6c
   1347c:	cmp	r0, #0
   13480:	beq	16140 <__assert_fail@plt+0x4b84>
   13484:	sub	r1, r6, #1
   13488:	sub	r0, fp, #72	; 0x48
   1348c:	ldrb	r0, [r0, r1]
   13490:	str	r1, [sp, #212]	; 0xd4
   13494:	cmp	r0, #83	; 0x53
   13498:	bne	135d4 <__assert_fail@plt+0x2018>
   1349c:	ldr	r2, [sp, #212]	; 0xd4
   134a0:	sub	r0, fp, #72	; 0x48
   134a4:	mov	r1, #0
   134a8:	strb	r1, [r0, r2]
   134ac:	movw	r1, #3081	; 0xc09
   134b0:	movt	r1, #2
   134b4:	bl	112a4 <strcmp@plt>
   134b8:	movw	r9, #900	; 0x384
   134bc:	cmp	r0, #0
   134c0:	movt	r9, #2
   134c4:	beq	13258 <__assert_fail@plt+0x1c9c>
   134c8:	movw	r1, #3086	; 0xc0e
   134cc:	sub	r0, fp, #72	; 0x48
   134d0:	movt	r1, #2
   134d4:	bl	112a4 <strcmp@plt>
   134d8:	ldr	r9, [sp, #240]	; 0xf0
   134dc:	cmp	r0, #0
   134e0:	beq	13258 <__assert_fail@plt+0x1c9c>
   134e4:	movw	r1, #3092	; 0xc14
   134e8:	sub	r0, fp, #72	; 0x48
   134ec:	movt	r1, #2
   134f0:	bl	112a4 <strcmp@plt>
   134f4:	ldr	r9, [sp, #236]	; 0xec
   134f8:	cmp	r0, #0
   134fc:	beq	13258 <__assert_fail@plt+0x1c9c>
   13500:	movw	r1, #3102	; 0xc1e
   13504:	sub	r0, fp, #72	; 0x48
   13508:	movt	r1, #2
   1350c:	bl	112a4 <strcmp@plt>
   13510:	ldr	r9, [sp, #232]	; 0xe8
   13514:	cmp	r0, #0
   13518:	beq	13258 <__assert_fail@plt+0x1c9c>
   1351c:	movw	r1, #2875	; 0xb3b
   13520:	sub	r0, fp, #72	; 0x48
   13524:	movt	r1, #2
   13528:	bl	112a4 <strcmp@plt>
   1352c:	ldr	r9, [sp, #228]	; 0xe4
   13530:	cmp	r0, #0
   13534:	beq	13258 <__assert_fail@plt+0x1c9c>
   13538:	movw	r1, #3107	; 0xc23
   1353c:	sub	r0, fp, #72	; 0x48
   13540:	movt	r1, #2
   13544:	bl	112a4 <strcmp@plt>
   13548:	ldr	r9, [sp, #224]	; 0xe0
   1354c:	cmp	r0, #0
   13550:	beq	13258 <__assert_fail@plt+0x1c9c>
   13554:	movw	r1, #3112	; 0xc28
   13558:	sub	r0, fp, #72	; 0x48
   1355c:	movt	r1, #2
   13560:	bl	112a4 <strcmp@plt>
   13564:	cmp	r0, #0
   13568:	mov	r9, r7
   1356c:	beq	13258 <__assert_fail@plt+0x1c9c>
   13570:	movw	r1, #3119	; 0xc2f
   13574:	sub	r0, fp, #72	; 0x48
   13578:	movt	r1, #2
   1357c:	bl	112a4 <strcmp@plt>
   13580:	ldr	r9, [sp, #216]	; 0xd8
   13584:	cmp	r0, #0
   13588:	beq	13258 <__assert_fail@plt+0x1c9c>
   1358c:	movw	r1, #3123	; 0xc33
   13590:	sub	r0, fp, #72	; 0x48
   13594:	movt	r1, #2
   13598:	bl	112a4 <strcmp@plt>
   1359c:	ldr	r9, [sp, #220]	; 0xdc
   135a0:	cmp	r0, #0
   135a4:	beq	13258 <__assert_fail@plt+0x1c9c>
   135a8:	movw	r1, #3130	; 0xc3a
   135ac:	sub	r0, fp, #72	; 0x48
   135b0:	movt	r1, #2
   135b4:	bl	112a4 <strcmp@plt>
   135b8:	cmp	r0, #0
   135bc:	mov	r9, r5
   135c0:	beq	13258 <__assert_fail@plt+0x1c9c>
   135c4:	ldr	r2, [sp, #212]	; 0xd4
   135c8:	sub	r0, fp, #72	; 0x48
   135cc:	mov	r1, #83	; 0x53
   135d0:	strb	r1, [r0, r2]
   135d4:	movw	r1, #3134	; 0xc3e
   135d8:	sub	r0, fp, #72	; 0x48
   135dc:	movt	r1, #2
   135e0:	bl	112a4 <strcmp@plt>
   135e4:	movw	r9, #1032	; 0x408
   135e8:	cmp	r0, #0
   135ec:	movt	r9, #2
   135f0:	beq	13258 <__assert_fail@plt+0x1c9c>
   135f4:	movw	r1, #3143	; 0xc47
   135f8:	sub	r0, fp, #72	; 0x48
   135fc:	movt	r1, #2
   13600:	bl	112a4 <strcmp@plt>
   13604:	cmp	r0, #0
   13608:	beq	16148 <__assert_fail@plt+0x4b8c>
   1360c:	movw	r1, #3153	; 0xc51
   13610:	sub	r0, fp, #72	; 0x48
   13614:	movt	r1, #2
   13618:	bl	112a4 <strcmp@plt>
   1361c:	cmp	r0, #0
   13620:	beq	16154 <__assert_fail@plt+0x4b98>
   13624:	movw	r1, #3159	; 0xc57
   13628:	sub	r0, fp, #72	; 0x48
   1362c:	movt	r1, #2
   13630:	bl	112a4 <strcmp@plt>
   13634:	cmp	r0, #0
   13638:	beq	16164 <__assert_fail@plt+0x4ba8>
   1363c:	movw	r1, #3163	; 0xc5b
   13640:	sub	r0, fp, #72	; 0x48
   13644:	movt	r1, #2
   13648:	bl	112a4 <strcmp@plt>
   1364c:	cmp	r0, #0
   13650:	beq	16174 <__assert_fail@plt+0x4bb8>
   13654:	movw	r1, #3168	; 0xc60
   13658:	sub	r0, fp, #72	; 0x48
   1365c:	movt	r1, #2
   13660:	bl	112a4 <strcmp@plt>
   13664:	cmp	r0, #0
   13668:	beq	16184 <__assert_fail@plt+0x4bc8>
   1366c:	movw	r1, #3173	; 0xc65
   13670:	sub	r0, fp, #72	; 0x48
   13674:	movt	r1, #2
   13678:	bl	112a4 <strcmp@plt>
   1367c:	cmp	r0, #0
   13680:	beq	16194 <__assert_fail@plt+0x4bd8>
   13684:	movw	r1, #3178	; 0xc6a
   13688:	sub	r0, fp, #72	; 0x48
   1368c:	movt	r1, #2
   13690:	bl	112a4 <strcmp@plt>
   13694:	cmp	r0, #0
   13698:	beq	161a4 <__assert_fail@plt+0x4be8>
   1369c:	movw	r1, #3184	; 0xc70
   136a0:	sub	r0, fp, #72	; 0x48
   136a4:	movt	r1, #2
   136a8:	bl	112a4 <strcmp@plt>
   136ac:	cmp	r0, #0
   136b0:	beq	161b4 <__assert_fail@plt+0x4bf8>
   136b4:	movw	r1, #3190	; 0xc76
   136b8:	sub	r0, fp, #72	; 0x48
   136bc:	movt	r1, #2
   136c0:	bl	112a4 <strcmp@plt>
   136c4:	cmp	r0, #0
   136c8:	beq	161c4 <__assert_fail@plt+0x4c08>
   136cc:	movw	r1, #3197	; 0xc7d
   136d0:	sub	r0, fp, #72	; 0x48
   136d4:	movt	r1, #2
   136d8:	bl	112a4 <strcmp@plt>
   136dc:	cmp	r0, #0
   136e0:	beq	161d4 <__assert_fail@plt+0x4c18>
   136e4:	movw	r1, #3203	; 0xc83
   136e8:	sub	r0, fp, #72	; 0x48
   136ec:	movt	r1, #2
   136f0:	bl	112a4 <strcmp@plt>
   136f4:	cmp	r0, #0
   136f8:	beq	161e4 <__assert_fail@plt+0x4c28>
   136fc:	movw	r1, #3209	; 0xc89
   13700:	sub	r0, fp, #72	; 0x48
   13704:	movt	r1, #2
   13708:	bl	112a4 <strcmp@plt>
   1370c:	cmp	r0, #0
   13710:	beq	161f4 <__assert_fail@plt+0x4c38>
   13714:	movw	r1, #3217	; 0xc91
   13718:	sub	r0, fp, #72	; 0x48
   1371c:	movt	r1, #2
   13720:	bl	112a4 <strcmp@plt>
   13724:	cmp	r0, #0
   13728:	beq	16204 <__assert_fail@plt+0x4c48>
   1372c:	movw	r1, #3224	; 0xc98
   13730:	sub	r0, fp, #72	; 0x48
   13734:	movt	r1, #2
   13738:	bl	112a4 <strcmp@plt>
   1373c:	cmp	r0, #0
   13740:	beq	16214 <__assert_fail@plt+0x4c58>
   13744:	movw	r1, #3230	; 0xc9e
   13748:	sub	r0, fp, #72	; 0x48
   1374c:	movt	r1, #2
   13750:	bl	112a4 <strcmp@plt>
   13754:	cmp	r0, #0
   13758:	beq	16224 <__assert_fail@plt+0x4c68>
   1375c:	movw	r1, #3236	; 0xca4
   13760:	sub	r0, fp, #72	; 0x48
   13764:	movt	r1, #2
   13768:	bl	112a4 <strcmp@plt>
   1376c:	cmp	r0, #0
   13770:	beq	16234 <__assert_fail@plt+0x4c78>
   13774:	movw	r1, #3245	; 0xcad
   13778:	sub	r0, fp, #72	; 0x48
   1377c:	movt	r1, #2
   13780:	bl	112a4 <strcmp@plt>
   13784:	cmp	r0, #0
   13788:	beq	16244 <__assert_fail@plt+0x4c88>
   1378c:	movw	r1, #3253	; 0xcb5
   13790:	sub	r0, fp, #72	; 0x48
   13794:	movt	r1, #2
   13798:	bl	112a4 <strcmp@plt>
   1379c:	cmp	r0, #0
   137a0:	beq	16254 <__assert_fail@plt+0x4c98>
   137a4:	movw	r1, #3257	; 0xcb9
   137a8:	sub	r0, fp, #72	; 0x48
   137ac:	movt	r1, #2
   137b0:	bl	112a4 <strcmp@plt>
   137b4:	cmp	r0, #0
   137b8:	beq	16264 <__assert_fail@plt+0x4ca8>
   137bc:	ldrb	r1, [fp, #-72]	; 0xffffffb8
   137c0:	cmp	r6, #1
   137c4:	bne	16274 <__assert_fail@plt+0x4cb8>
   137c8:	cmp	r1, #90	; 0x5a
   137cc:	bhi	1627c <__assert_fail@plt+0x4cc0>
   137d0:	movw	r9, #1284	; 0x504
   137d4:	add	r0, pc, #4
   137d8:	movt	r9, #2
   137dc:	ldr	pc, [r0, r1, lsl #2]
   137e0:	strdeq	r6, [r1], -r8
   137e4:	andeq	r6, r1, ip, ror r2
   137e8:	andeq	r6, r1, ip, ror r2
   137ec:	andeq	r6, r1, ip, ror r2
   137f0:	andeq	r6, r1, ip, ror r2
   137f4:	andeq	r6, r1, ip, ror r2
   137f8:	andeq	r6, r1, ip, ror r2
   137fc:	andeq	r6, r1, ip, ror r2
   13800:	andeq	r6, r1, ip, ror r2
   13804:	andeq	r6, r1, ip, ror r2
   13808:	andeq	r6, r1, ip, ror r2
   1380c:	andeq	r6, r1, ip, ror r2
   13810:	andeq	r6, r1, ip, ror r2
   13814:	andeq	r6, r1, ip, ror r2
   13818:	andeq	r6, r1, ip, ror r2
   1381c:	andeq	r6, r1, ip, ror r2
   13820:	andeq	r6, r1, ip, ror r2
   13824:	andeq	r6, r1, ip, ror r2
   13828:	andeq	r6, r1, ip, ror r2
   1382c:	andeq	r6, r1, ip, ror r2
   13830:	andeq	r6, r1, ip, ror r2
   13834:	andeq	r6, r1, ip, ror r2
   13838:	andeq	r6, r1, ip, ror r2
   1383c:	andeq	r6, r1, ip, ror r2
   13840:	andeq	r6, r1, ip, ror r2
   13844:	andeq	r6, r1, ip, ror r2
   13848:	andeq	r6, r1, ip, ror r2
   1384c:	andeq	r6, r1, ip, ror r2
   13850:	andeq	r6, r1, ip, ror r2
   13854:	andeq	r6, r1, ip, ror r2
   13858:	andeq	r6, r1, ip, ror r2
   1385c:	andeq	r6, r1, ip, ror r2
   13860:	andeq	r6, r1, ip, ror r2
   13864:	andeq	r6, r1, ip, ror r2
   13868:	andeq	r6, r1, ip, ror r2
   1386c:	andeq	r6, r1, ip, ror r2
   13870:	andeq	r6, r1, ip, ror r2
   13874:	andeq	r6, r1, ip, ror r2
   13878:	andeq	r6, r1, ip, ror r2
   1387c:	andeq	r6, r1, ip, ror r2
   13880:	andeq	r6, r1, ip, ror r2
   13884:	andeq	r6, r1, ip, ror r2
   13888:	andeq	r6, r1, ip, ror r2
   1388c:	andeq	r6, r1, ip, ror r2
   13890:	andeq	r6, r1, ip, ror r2
   13894:	andeq	r6, r1, ip, ror r2
   13898:	andeq	r6, r1, ip, ror r2
   1389c:	andeq	r6, r1, ip, ror r2
   138a0:	andeq	r6, r1, ip, ror r2
   138a4:	andeq	r6, r1, ip, ror r2
   138a8:	andeq	r6, r1, ip, ror r2
   138ac:	andeq	r6, r1, ip, ror r2
   138b0:	andeq	r6, r1, ip, ror r2
   138b4:	andeq	r6, r1, ip, ror r2
   138b8:	andeq	r6, r1, ip, ror r2
   138bc:	andeq	r6, r1, ip, ror r2
   138c0:	andeq	r6, r1, ip, ror r2
   138c4:	andeq	r6, r1, ip, ror r2
   138c8:	andeq	r6, r1, ip, ror r2
   138cc:	andeq	r6, r1, ip, ror r2
   138d0:	andeq	r6, r1, ip, ror r2
   138d4:	andeq	r6, r1, ip, ror r2
   138d8:	andeq	r6, r1, ip, ror r2
   138dc:	andeq	r6, r1, ip, ror r2
   138e0:	andeq	r6, r1, ip, ror r2
   138e4:	andeq	r3, r1, r8, asr r2
   138e8:	andeq	r3, r1, ip, asr #18
   138ec:	andeq	r6, r1, r8, lsr #6
   138f0:	andeq	r6, r1, r8, lsr r3
   138f4:	andeq	r6, r1, r8, asr #6
   138f8:	andeq	r6, r1, r8, asr r3
   138fc:	andeq	r6, r1, r8, ror #6
   13900:	andeq	r6, r1, r8, ror r3
   13904:	andeq	r6, r1, r8, lsl #7
   13908:	andeq	r6, r1, ip, ror r2
   1390c:	muleq	r1, r8, r3
   13910:	andeq	r6, r1, r8, lsr #7
   13914:			; <UNDEFINED> instruction: 0x000163b8
   13918:	andeq	r6, r1, r8, asr #7
   1391c:	ldrdeq	r6, [r1], -r8
   13920:	andeq	r6, r1, r8, ror #7
   13924:	strdeq	r6, [r1], -r8
   13928:	andeq	r6, r1, r8, lsl #8
   1392c:	andeq	r6, r1, r8, lsl r4
   13930:	andeq	r6, r1, r8, lsr #8
   13934:	andeq	r6, r1, r8, lsr r4
   13938:	andeq	r6, r1, r8, asr #8
   1393c:	andeq	r6, r1, r8, asr r4
   13940:	andeq	r6, r1, r8, ror #8
   13944:	andeq	r6, r1, r8, ror r4
   13948:	andeq	r6, r1, r8, lsl #9
   1394c:	movw	r0, #1284	; 0x504
   13950:	movt	r0, #2
   13954:	b	1318c <__assert_fail@plt+0x1bd0>
   13958:	add	r0, r1, #1
   1395c:	str	r0, [r4]
   13960:	ldrb	r7, [r1]
   13964:	cmp	r7, #1
   13968:	bge	1328c <__assert_fail@plt+0x1cd0>
   1396c:	mov	r0, #0
   13970:	mov	r7, #0
   13974:	add	r1, r0, ip
   13978:	cmp	r1, #112	; 0x70
   1397c:	bhi	139b8 <__assert_fail@plt+0x23fc>
   13980:	movw	r2, #65304	; 0xff18
   13984:	movt	r2, #1
   13988:	add	r2, r2, r1
   1398c:	ldrsb	r2, [r2]
   13990:	cmp	r0, r2
   13994:	bne	139b8 <__assert_fail@plt+0x23fc>
   13998:	movw	r0, #65417	; 0xff89
   1399c:	movt	r0, #1
   139a0:	ldrb	r8, [r0, r1]
   139a4:	orr	r0, r1, #4
   139a8:	cmp	r0, #111	; 0x6f
   139ac:	bne	13efc <__assert_fail@plt+0x2940>
   139b0:	rsb	r5, r8, #0
   139b4:	b	139cc <__assert_fail@plt+0x2410>
   139b8:	movw	r0, #65530	; 0xfffa
   139bc:	movt	r0, #1
   139c0:	ldrb	r5, [r0, r8]
   139c4:	cmp	r5, #0
   139c8:	beq	164a0 <__assert_fail@plt+0x4ee4>
   139cc:	movw	r0, #108	; 0x6c
   139d0:	str	r7, [sp, #212]	; 0xd4
   139d4:	mov	r1, sl
   139d8:	movt	r0, #2
   139dc:	ldrb	r7, [r0, r5]
   139e0:	rsb	r0, r7, #1
   139e4:	rsb	r0, r0, r0, lsl #3
   139e8:	ldr	r0, [r1, r0, lsl #3]!
   139ec:	str	r0, [sp, #244]	; 0xf4
   139f0:	ldr	r0, [r1, #44]	; 0x2c
   139f4:	add	lr, r1, #8
   139f8:	str	r0, [sp, #220]	; 0xdc
   139fc:	ldr	r0, [r1, #40]	; 0x28
   13a00:	str	r0, [sp, #228]	; 0xe4
   13a04:	ldr	r0, [r1, #36]	; 0x24
   13a08:	str	r0, [sp, #224]	; 0xe0
   13a0c:	ldr	r0, [r1, #4]
   13a10:	str	r0, [sp, #240]	; 0xf0
   13a14:	ldm	lr, {r8, ip, lr}
   13a18:	ldr	r0, [r1, #28]
   13a1c:	ldr	r6, [r1, #52]	; 0x34
   13a20:	ldr	r3, [r1, #20]
   13a24:	ldr	r2, [r1, #24]
   13a28:	str	r0, [sp, #236]	; 0xec
   13a2c:	ldr	r0, [r1, #32]
   13a30:	ldr	r1, [r1, #48]	; 0x30
   13a34:	str	r6, [sp, #208]	; 0xd0
   13a38:	str	r0, [sp, #232]	; 0xe8
   13a3c:	sub	r0, r5, #4
   13a40:	str	r1, [sp, #216]	; 0xd8
   13a44:	cmp	r0, #87	; 0x57
   13a48:	bhi	1512c <__assert_fail@plt+0x3b70>
   13a4c:	add	r1, pc, #0
   13a50:	ldr	pc, [r1, r0, lsl #2]
   13a54:			; <UNDEFINED> instruction: 0x00014cb4
   13a58:	andeq	r5, r1, ip, lsr #2
   13a5c:	andeq	r5, r1, ip, lsr #2
   13a60:	ldrdeq	r4, [r1], -ip
   13a64:	andeq	r4, r1, r0, asr fp
   13a68:	andeq	r4, r1, r8, lsr lr
   13a6c:	andeq	r4, r1, r8, asr lr
   13a70:	andeq	r4, r1, ip, lsr ip
   13a74:	andeq	r4, r1, r0, lsl #26
   13a78:	andeq	r4, r1, r8, lsl sp
   13a7c:	andeq	r4, r1, ip, lsl pc
   13a80:	andeq	r4, r1, ip, lsr #29
   13a84:	andeq	r5, r1, ip, lsr #2
   13a88:	andeq	r5, r1, ip, lsr #2
   13a8c:	andeq	r4, r1, ip, lsr #13
   13a90:	andeq	r4, r1, r4, asr ip
   13a94:	andeq	r4, r1, r0, ror #21
   13a98:	andeq	r5, r1, ip, lsr #2
   13a9c:	ldrdeq	r4, [r1], -ip
   13aa0:	andeq	r4, r1, r4, lsr #26
   13aa4:			; <UNDEFINED> instruction: 0x00014dbc
   13aa8:	andeq	r5, r1, ip, lsr #2
   13aac:	andeq	r5, r1, ip, lsr #2
   13ab0:	andeq	r4, r1, ip, lsl #31
   13ab4:	andeq	r4, r1, ip, asr pc
   13ab8:	andeq	r4, r1, r0, lsr #11
   13abc:	andeq	r4, r1, r4, asr #22
   13ac0:	muleq	r1, r0, r0
   13ac4:			; <UNDEFINED> instruction: 0x000145b8
   13ac8:	andeq	r4, r1, ip, asr #14
   13acc:	andeq	r4, r1, r8, lsl #12
   13ad0:	andeq	r4, r1, r4, lsr #25
   13ad4:	andeq	r4, r1, r0, lsl #12
   13ad8:	andeq	r5, r1, r0, asr r3
   13adc:	andeq	r5, r1, ip, ror #6
   13ae0:	andeq	r4, r1, r4, asr #14
   13ae4:	andeq	r4, r1, r8, ror #22
   13ae8:	andeq	r4, r1, r0, asr lr
   13aec:	muleq	r1, r0, fp
   13af0:	andeq	r5, r1, r4, asr #7
   13af4:	ldrdeq	r4, [r1], -r0
   13af8:	andeq	r4, r1, r8, ror #30
   13afc:	andeq	r5, r1, r8, lsl #7
   13b00:	andeq	r4, r1, r4, ror r5
   13b04:	andeq	r4, r1, r0, ror lr
   13b08:	andeq	r5, r1, ip, lsr #2
   13b0c:	andeq	r4, r1, r0, lsl #10
   13b10:	muleq	r1, r8, r1
   13b14:			; <UNDEFINED> instruction: 0x00013bb4
   13b18:			; <UNDEFINED> instruction: 0x00013bb4
   13b1c:	andeq	r5, r1, ip, lsr r0
   13b20:	andeq	r3, r1, ip, asr pc
   13b24:	andeq	r4, r1, ip, ror #26
   13b28:	andeq	r4, r1, ip, lsl #29
   13b2c:	andeq	r3, r1, ip, ror #30
   13b30:	andeq	r4, r1, ip, lsl #3
   13b34:	andeq	r4, r1, r8, asr r1
   13b38:	strdeq	r3, [r1], -r4
   13b3c:			; <UNDEFINED> instruction: 0x00013fbc
   13b40:	andeq	r4, r1, ip, ror #29
   13b44:	ldrdeq	r3, [r1], -r0
   13b48:	andeq	r5, r1, r8, lsr r3
   13b4c:	ldrdeq	r5, [r1], -ip
   13b50:	andeq	r3, r1, r4, asr pc
   13b54:	andeq	r5, r1, ip, asr #8
   13b58:	andeq	r5, r1, r0, lsr #1
   13b5c:	andeq	r3, r1, r4, ror #30
   13b60:	andeq	r3, r1, r8, ror pc
   13b64:	andeq	r3, r1, r8, ror pc
   13b68:	andeq	r5, r1, r4, lsl r4
   13b6c:	andeq	r5, r1, ip, lsr #2
   13b70:	andeq	r3, r1, ip, asr pc
   13b74:	andeq	r3, r1, ip, ror #30
   13b78:	strdeq	r3, [r1], -r4
   13b7c:	ldrdeq	r3, [r1], -r0
   13b80:	andeq	r3, r1, r4, asr pc
   13b84:	andeq	r3, r1, r4, ror #30
   13b88:			; <UNDEFINED> instruction: 0x00013fbc
   13b8c:	andeq	r5, r1, ip, lsr #2
   13b90:	andeq	r5, r1, ip, lsr #2
   13b94:	andeq	r5, r1, ip, lsr #2
   13b98:	ldrdeq	r3, [r1], -ip
   13b9c:	andeq	r5, r1, ip, lsr #2
   13ba0:	ldrdeq	r3, [r1], -ip
   13ba4:	andeq	r5, r1, ip, lsl r2
   13ba8:	andeq	r4, r1, r8, asr r0
   13bac:	muleq	r1, r0, r5
   13bb0:	ldrdeq	r4, [r1], -ip
   13bb4:	add	r0, sp, #180	; 0xb4
   13bb8:	str	r2, [sp, #204]	; 0xcc
   13bbc:	str	r3, [sp, #200]	; 0xc8
   13bc0:	str	ip, [sp, #196]	; 0xc4
   13bc4:	str	r8, [sp, #176]	; 0xb0
   13bc8:	stm	r0, {r5, r7, lr}
   13bcc:	str	r9, [sp, #192]	; 0xc0
   13bd0:	ldr	r1, [r4, #144]	; 0x90
   13bd4:	ldr	r0, [sl, #48]	; 0x30
   13bd8:	ldr	r8, [sl, #4]
   13bdc:	ldr	r6, [sl, #12]
   13be0:	ldr	lr, [sl, #20]
   13be4:	ldr	ip, [sl, #28]
   13be8:	ldr	r3, [sl, #36]	; 0x24
   13bec:	ldr	r9, [sl, #32]
   13bf0:	ldr	r2, [sl, #40]	; 0x28
   13bf4:	add	r0, r1, r0
   13bf8:	str	r1, [sp, #80]	; 0x50
   13bfc:	ldr	r1, [sl]
   13c00:	str	r8, [sp, #72]	; 0x48
   13c04:	str	r6, [sp, #64]	; 0x40
   13c08:	str	lr, [sp, #52]	; 0x34
   13c0c:	str	ip, [sp, #40]	; 0x28
   13c10:	str	r3, [sp, #32]
   13c14:	str	r0, [sp, #76]	; 0x4c
   13c18:	str	r1, [sp, #68]	; 0x44
   13c1c:	ldr	r1, [sl, #8]
   13c20:	str	r1, [sp, #60]	; 0x3c
   13c24:	ldr	r1, [sl, #16]
   13c28:	str	r1, [sp, #56]	; 0x38
   13c2c:	ldr	r1, [sl, #24]
   13c30:	str	r1, [sp, #48]	; 0x30
   13c34:	ldr	r1, [sl, #44]	; 0x2c
   13c38:	str	r0, [r4, #144]	; 0x90
   13c3c:	ldr	r0, [sp, #112]	; 0x70
   13c40:	str	r1, [sp, #24]
   13c44:	ldm	r0, {r5, r7}
   13c48:	adds	r2, r5, r2
   13c4c:	adc	r5, r7, r1
   13c50:	stm	r0, {r2, r5}
   13c54:	ldr	r0, [sp, #116]	; 0x74
   13c58:	ldr	r2, [r0]
   13c5c:	ldr	r1, [r0, #4]
   13c60:	adds	r2, r2, r9
   13c64:	str	r1, [sp, #20]
   13c68:	adc	r9, r1, r3
   13c6c:	stm	r0, {r2, r9}
   13c70:	ldr	r0, [sp, #120]	; 0x78
   13c74:	ldr	r2, [r0]
   13c78:	ldr	r1, [r0, #4]
   13c7c:	ldr	r3, [sp, #48]	; 0x30
   13c80:	adds	r3, r2, r3
   13c84:	str	r1, [sp, #28]
   13c88:	adc	r2, r1, ip
   13c8c:	str	r3, [r0]
   13c90:	str	r2, [r0, #4]
   13c94:	ldr	r0, [sp, #124]	; 0x7c
   13c98:	ldr	ip, [r0]
   13c9c:	ldr	r1, [r0, #4]
   13ca0:	ldr	r3, [sp, #56]	; 0x38
   13ca4:	adds	ip, ip, r3
   13ca8:	str	r1, [sp, #36]	; 0x24
   13cac:	adc	r1, r1, lr
   13cb0:	mov	lr, #0
   13cb4:	str	r1, [sp, #44]	; 0x2c
   13cb8:	str	ip, [r0]
   13cbc:	str	r1, [r0, #4]
   13cc0:	ldr	ip, [sp, #128]	; 0x80
   13cc4:	ldr	r3, [sp, #60]	; 0x3c
   13cc8:	ldrd	r0, [ip]
   13ccc:	adds	r0, r0, r3
   13cd0:	str	r1, [sp, #48]	; 0x30
   13cd4:	adc	r1, r1, r6
   13cd8:	str	r1, [sp, #56]	; 0x38
   13cdc:	strd	r0, [ip]
   13ce0:	ldr	ip, [sp, #132]	; 0x84
   13ce4:	ldr	r3, [sp, #68]	; 0x44
   13ce8:	ldrd	r0, [ip]
   13cec:	adds	r0, r0, r3
   13cf0:	str	r1, [sp, #60]	; 0x3c
   13cf4:	adc	r3, r1, r8
   13cf8:	cmn	r7, #1
   13cfc:	mov	r1, #0
   13d00:	mov	r7, #0
   13d04:	mov	r8, #0
   13d08:	str	r3, [sp, #68]	; 0x44
   13d0c:	stm	ip, {r0, r3}
   13d10:	mov	r3, #0
   13d14:	mov	r0, #0
   13d18:	mov	ip, #0
   13d1c:	movwgt	r3, #1
   13d20:	cmn	r5, #1
   13d24:	mov	r5, #0
   13d28:	movwgt	r0, #1
   13d2c:	str	r3, [sp, #16]
   13d30:	subs	r0, r3, r0
   13d34:	ldr	r3, [sp, #76]	; 0x4c
   13d38:	movwne	r0, #1
   13d3c:	str	r0, [sp, #12]
   13d40:	ldr	r0, [sp, #24]
   13d44:	cmn	r0, #1
   13d48:	mov	r0, #0
   13d4c:	movwgt	r0, #1
   13d50:	str	r0, [sp, #24]
   13d54:	ldr	r0, [sp, #20]
   13d58:	cmn	r0, #1
   13d5c:	mov	r0, #0
   13d60:	movwgt	r1, #1
   13d64:	cmn	r9, #1
   13d68:	mov	r9, #0
   13d6c:	movwgt	r0, #1
   13d70:	str	r1, [sp, #20]
   13d74:	subs	r0, r1, r0
   13d78:	mov	r1, #0
   13d7c:	movwne	r0, #1
   13d80:	str	r0, [sp, #8]
   13d84:	ldr	r0, [sp, #32]
   13d88:	cmn	r0, #1
   13d8c:	mov	r0, #0
   13d90:	movwgt	r0, #1
   13d94:	str	r0, [sp, #32]
   13d98:	ldr	r0, [sp, #28]
   13d9c:	cmn	r0, #1
   13da0:	mov	r0, #0
   13da4:	movwgt	r7, #1
   13da8:	cmn	r2, #1
   13dac:	mov	r2, #0
   13db0:	movwgt	r0, #1
   13db4:	subs	r0, r7, r0
   13db8:	movwne	r0, #1
   13dbc:	str	r0, [sp, #28]
   13dc0:	ldr	r0, [sp, #40]	; 0x28
   13dc4:	cmn	r0, #1
   13dc8:	ldr	r0, [sp, #36]	; 0x24
   13dcc:	movwgt	lr, #1
   13dd0:	cmn	r0, #1
   13dd4:	ldr	r0, [sp, #44]	; 0x2c
   13dd8:	movwgt	r9, #1
   13ddc:	cmn	r0, #1
   13de0:	mov	r0, #0
   13de4:	movwgt	r0, #1
   13de8:	subs	r0, r9, r0
   13dec:	movwne	r0, #1
   13df0:	str	r0, [sp, #44]	; 0x2c
   13df4:	ldr	r0, [sp, #52]	; 0x34
   13df8:	cmn	r0, #1
   13dfc:	ldr	r0, [sp, #48]	; 0x30
   13e00:	movwgt	ip, #1
   13e04:	cmn	r0, #1
   13e08:	ldr	r0, [sp, #56]	; 0x38
   13e0c:	movwgt	r2, #1
   13e10:	cmn	r0, #1
   13e14:	ldr	r0, [sp, #64]	; 0x40
   13e18:	movwgt	r1, #1
   13e1c:	subs	r6, r2, r1
   13e20:	mov	r1, #0
   13e24:	movwne	r6, #1
   13e28:	cmn	r0, #1
   13e2c:	ldr	r0, [sp, #60]	; 0x3c
   13e30:	movwgt	r8, #1
   13e34:	cmn	r0, #1
   13e38:	ldr	r0, [sp, #68]	; 0x44
   13e3c:	movwgt	r5, #1
   13e40:	cmn	r0, #1
   13e44:	ldr	r0, [sp, #72]	; 0x48
   13e48:	movwgt	r1, #1
   13e4c:	subs	r1, r5, r1
   13e50:	movwne	r1, #1
   13e54:	cmn	r0, #1
   13e58:	mov	r0, #0
   13e5c:	movwgt	r0, #1
   13e60:	str	r0, [sp, #72]	; 0x48
   13e64:	ldr	r0, [sp, #80]	; 0x50
   13e68:	cmp	r3, r0
   13e6c:	bvs	164a0 <__assert_fail@plt+0x4ee4>
   13e70:	ldr	r0, [sp, #16]
   13e74:	ldr	r3, [sp, #24]
   13e78:	sub	r0, r0, r3
   13e7c:	ldr	r3, [sp, #12]
   13e80:	clz	r0, r0
   13e84:	lsr	r0, r0, #5
   13e88:	ands	r0, r0, r3
   13e8c:	bne	164a0 <__assert_fail@plt+0x4ee4>
   13e90:	ldr	r0, [sp, #20]
   13e94:	ldr	r3, [sp, #32]
   13e98:	sub	r0, r0, r3
   13e9c:	ldr	r3, [sp, #8]
   13ea0:	clz	r0, r0
   13ea4:	lsr	r0, r0, #5
   13ea8:	ands	r0, r0, r3
   13eac:	bne	164a0 <__assert_fail@plt+0x4ee4>
   13eb0:	ldr	r3, [sp, #28]
   13eb4:	sub	r0, r7, lr
   13eb8:	clz	r0, r0
   13ebc:	lsr	r0, r0, #5
   13ec0:	ands	r0, r0, r3
   13ec4:	bne	164a0 <__assert_fail@plt+0x4ee4>
   13ec8:	ldr	r3, [sp, #44]	; 0x2c
   13ecc:	sub	r0, r9, ip
   13ed0:	clz	r0, r0
   13ed4:	lsr	r0, r0, #5
   13ed8:	ands	r0, r0, r3
   13edc:	bne	164a0 <__assert_fail@plt+0x4ee4>
   13ee0:	sub	r0, r2, r8
   13ee4:	clz	r0, r0
   13ee8:	lsr	r0, r0, #5
   13eec:	ands	r0, r0, r6
   13ef0:	bne	164a0 <__assert_fail@plt+0x4ee4>
   13ef4:	ldr	r0, [sp, #72]	; 0x48
   13ef8:	b	144d8 <__assert_fail@plt+0x2f1c>
   13efc:	ldr	r0, [sp, #164]	; 0xa4
   13f00:	ldr	r1, [sp, #156]	; 0x9c
   13f04:	mvn	r7, #1
   13f08:	uxtb	r0, r0
   13f0c:	orr	r0, r0, r1, lsl #8
   13f10:	str	r0, [sl, #56]!	; 0x38
   13f14:	ldr	r0, [sp, #160]	; 0xa0
   13f18:	str	r0, [sl, #4]
   13f1c:	ldr	r0, [sp, #136]	; 0x88
   13f20:	str	r0, [sl, #8]
   13f24:	ldr	r0, [sp, #140]	; 0x8c
   13f28:	str	r0, [sl, #12]
   13f2c:	ldr	r0, [sp, #144]	; 0x90
   13f30:	str	r0, [sl, #16]
   13f34:	mov	r0, #0
   13f38:	str	r0, [sl, #52]	; 0x34
   13f3c:	add	r0, sl, #36	; 0x24
   13f40:	vst1.32	{d8-d9}, [r0]
   13f44:	add	r0, sl, #20
   13f48:	vst1.32	{d8-d9}, [r0]
   13f4c:	mov	r0, r9
   13f50:	b	15200 <__assert_fail@plt+0x3c44>
   13f54:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   13f58:	b	150e0 <__assert_fail@plt+0x3b24>
   13f5c:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   13f60:	b	15040 <__assert_fail@plt+0x3a84>
   13f64:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   13f68:	b	150a4 <__assert_fail@plt+0x3ae8>
   13f6c:	ldr	r8, [sl, #-48]	; 0xffffffd0
   13f70:	ldr	ip, [sl, #-44]	; 0xffffffd4
   13f74:	b	14e94 <__assert_fail@plt+0x38d8>
   13f78:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   13f7c:	mov	r8, #0
   13f80:	mov	ip, #0
   13f84:	mov	lr, #0
   13f88:	mov	r3, #0
   13f8c:	mov	r2, #0
   13f90:	str	r0, [sp, #228]	; 0xe4
   13f94:	asr	r0, r0, #31
   13f98:	str	r1, [sp, #216]	; 0xd8
   13f9c:	str	r0, [sp, #220]	; 0xdc
   13fa0:	mov	r0, #0
   13fa4:	str	r0, [sp, #236]	; 0xec
   13fa8:	mov	r0, #0
   13fac:	str	r0, [sp, #232]	; 0xe8
   13fb0:	mov	r0, #0
   13fb4:	str	r0, [sp, #224]	; 0xe0
   13fb8:	b	1511c <__assert_fail@plt+0x3b60>
   13fbc:	ldr	lr, [sl]
   13fc0:	ldr	r3, [sl, #4]
   13fc4:	mov	r8, #0
   13fc8:	mov	ip, #0
   13fcc:	b	14e9c <__assert_fail@plt+0x38e0>
   13fd0:	ldr	r2, [sl, #-48]	; 0xffffffd0
   13fd4:	ldr	r0, [sl, #-44]	; 0xffffffd4
   13fd8:	b	14ef4 <__assert_fail@plt+0x3938>
   13fdc:	ldrd	r0, [sl, #8]
   13fe0:	str	r0, [sp, #244]	; 0xf4
   13fe4:	adds	r0, r0, #-2147483648	; 0x80000000
   13fe8:	adcs	r0, r1, #0
   13fec:	beq	15124 <__assert_fail@plt+0x3b68>
   13ff0:	b	164a0 <__assert_fail@plt+0x4ee4>
   13ff4:	ldrd	r2, [sl]
   13ff8:	str	r9, [sp, #192]	; 0xc0
   13ffc:	str	r7, [sp, #184]	; 0xb8
   14000:	str	r5, [sp, #180]	; 0xb4
   14004:	cmn	r3, #1
   14008:	ble	15474 <__assert_fail@plt+0x3eb8>
   1400c:	ldr	r5, [sl, #-48]	; 0xffffffd0
   14010:	ldr	r7, [sl, #-44]	; 0xffffffd4
   14014:	orrs	r0, r2, r3
   14018:	beq	14180 <__assert_fail@plt+0x2bc4>
   1401c:	cmn	r7, #1
   14020:	ble	1556c <__assert_fail@plt+0x3fb0>
   14024:	mvn	r0, #0
   14028:	mvn	r1, #-2147483648	; 0x80000000
   1402c:	mov	r8, r2
   14030:	mov	r6, r3
   14034:	bl	1f114 <__assert_fail@plt+0xdb58>
   14038:	subs	r0, r0, r5
   1403c:	mov	r3, r6
   14040:	mov	r2, r8
   14044:	mov	r6, r5
   14048:	mov	r8, r7
   1404c:	sbcs	r0, r1, r7
   14050:	bge	155f4 <__assert_fail@plt+0x4038>
   14054:	b	164a0 <__assert_fail@plt+0x4ee4>
   14058:	ldr	r0, [sl, #-40]	; 0xffffffd8
   1405c:	sub	r1, sl, #56	; 0x38
   14060:	str	r9, [sp, #192]	; 0xc0
   14064:	str	r8, [sp, #176]	; 0xb0
   14068:	vld1.64	{d16-d17}, [r1]
   1406c:	add	r1, sp, #180	; 0xb4
   14070:	str	r0, [sp, #80]	; 0x50
   14074:	ldr	r0, [r4, #156]	; 0x9c
   14078:	stm	r1, {r5, r7, lr}
   1407c:	str	ip, [sp, #196]	; 0xc4
   14080:	str	r3, [sp, #200]	; 0xc8
   14084:	str	r2, [sp, #204]	; 0xcc
   14088:	cmp	r0, #0
   1408c:	beq	140c8 <__assert_fail@plt+0x2b0c>
   14090:	ldr	r1, [sp, #100]	; 0x64
   14094:	ldr	r1, [r1]
   14098:	cmp	r1, #0
   1409c:	bne	140c8 <__assert_fail@plt+0x2b0c>
   140a0:	ldrb	r1, [r4, #153]	; 0x99
   140a4:	cmp	r1, #0
   140a8:	bne	140c8 <__assert_fail@plt+0x2b0c>
   140ac:	ldr	r1, [sp, #80]	; 0x50
   140b0:	ldr	r6, [sl, #-36]	; 0xffffffdc
   140b4:	cmp	r1, #2
   140b8:	bgt	160e4 <__assert_fail@plt+0x4b28>
   140bc:	ldr	r2, [r4, #172]	; 0xac
   140c0:	cmp	r2, #0
   140c4:	bne	160e4 <__assert_fail@plt+0x4b28>
   140c8:	ldr	r9, [sp, #80]	; 0x50
   140cc:	cmp	r9, #5
   140d0:	blt	15504 <__assert_fail@plt+0x3f48>
   140d4:	add	r0, r0, #1
   140d8:	vmov.32	r5, d17[1]
   140dc:	vmov.32	r7, d17[0]
   140e0:	mov	r2, #100	; 0x64
   140e4:	mov	r3, #0
   140e8:	mov	r6, #100	; 0x64
   140ec:	str	r0, [r4, #156]	; 0x9c
   140f0:	mov	r0, r7
   140f4:	mov	r1, r5
   140f8:	bl	1f040 <__assert_fail@plt+0xda84>
   140fc:	umull	r2, r3, r0, r6
   14100:	mla	r3, r1, r6, r3
   14104:	ldr	r6, [sp, #168]	; 0xa8
   14108:	subs	r2, r7, r2
   1410c:	sbc	r3, r5, r3
   14110:	strd	r2, [r6]
   14114:	mov	r2, #100	; 0x64
   14118:	mov	r3, #0
   1411c:	bl	1f040 <__assert_fail@plt+0xda84>
   14120:	mov	r0, r2
   14124:	ldr	r2, [sp, #172]	; 0xac
   14128:	mov	r1, r3
   1412c:	mov	r3, #0
   14130:	strd	r0, [r2]
   14134:	mov	r0, r7
   14138:	mov	r1, r5
   1413c:	movw	r2, #10000	; 0x2710
   14140:	bl	1f040 <__assert_fail@plt+0xda84>
   14144:	ldr	r2, [sp, #96]	; 0x60
   14148:	strd	r0, [r2]
   1414c:	sub	r0, r9, #4
   14150:	str	r0, [r4, #48]	; 0x30
   14154:	b	159d0 <__assert_fail@plt+0x4414>
   14158:	ldrd	r2, [sl]
   1415c:	str	r9, [sp, #192]	; 0xc0
   14160:	str	r7, [sp, #184]	; 0xb8
   14164:	str	r5, [sp, #180]	; 0xb4
   14168:	cmn	r3, #1
   1416c:	ble	155bc <__assert_fail@plt+0x4000>
   14170:	ldr	r5, [sl, #-56]	; 0xffffffc8
   14174:	ldr	r7, [sl, #-52]	; 0xffffffcc
   14178:	orrs	r0, r2, r3
   1417c:	bne	1401c <__assert_fail@plt+0x2a60>
   14180:	mov	r6, r5
   14184:	mov	r8, r7
   14188:	b	155f4 <__assert_fail@plt+0x4038>
   1418c:	mov	ip, #0
   14190:	mov	r8, #1
   14194:	b	14e94 <__assert_fail@plt+0x38d8>
   14198:	add	r0, sp, #180	; 0xb4
   1419c:	str	r2, [sp, #204]	; 0xcc
   141a0:	str	r3, [sp, #200]	; 0xc8
   141a4:	str	ip, [sp, #196]	; 0xc4
   141a8:	str	r8, [sp, #176]	; 0xb0
   141ac:	stm	r0, {r5, r7, lr}
   141b0:	str	r9, [sp, #192]	; 0xc0
   141b4:	ldr	r0, [sl, #-56]	; 0xffffffc8
   141b8:	ldr	r3, [sl]
   141bc:	ldr	r9, [sl, #-12]
   141c0:	ldr	r7, [r4, #144]	; 0x90
   141c4:	ldr	r1, [sl, #-16]
   141c8:	ldr	r5, [sl, #-20]	; 0xffffffec
   141cc:	ldr	r8, [sl, #-24]	; 0xffffffe8
   141d0:	ldr	r6, [sl, #-40]	; 0xffffffd8
   141d4:	ldr	ip, [sl, #-32]	; 0xffffffe0
   141d8:	ldr	lr, [sl, #-28]	; 0xffffffe4
   141dc:	str	r0, [sp, #64]	; 0x40
   141e0:	ldr	r0, [sl, #-52]	; 0xffffffcc
   141e4:	cmn	r3, #1
   141e8:	str	r7, [sp, #68]	; 0x44
   141ec:	str	r9, [sp, #56]	; 0x38
   141f0:	str	r0, [sp, #76]	; 0x4c
   141f4:	ldr	r0, [sl, #-48]	; 0xffffffd0
   141f8:	str	r0, [sp, #60]	; 0x3c
   141fc:	ldr	r0, [sl, #-44]	; 0xffffffd4
   14200:	str	r0, [sp, #72]	; 0x48
   14204:	ldr	r0, [sl, #-36]	; 0xffffffdc
   14208:	str	r0, [sp, #80]	; 0x50
   1420c:	ldr	r0, [sl, #-8]
   14210:	ble	1565c <__assert_fail@plt+0x40a0>
   14214:	ldr	r2, [sp, #112]	; 0x70
   14218:	add	r0, r7, r0
   1421c:	str	r0, [sp, #52]	; 0x34
   14220:	str	r0, [r4, #144]	; 0x90
   14224:	ldm	r2, {r0, r3}
   14228:	adds	r0, r0, r1
   1422c:	adc	r7, r3, r9
   14230:	mov	r9, r6
   14234:	stm	r2, {r0, r7}
   14238:	ldr	r6, [sp, #116]	; 0x74
   1423c:	ldrd	r0, [r6]
   14240:	str	r5, [sp, #32]
   14244:	adds	r2, r0, r8
   14248:	str	r1, [sp, #28]
   1424c:	adc	r5, r1, r5
   14250:	stm	r6, {r2, r5}
   14254:	ldr	r8, [sp, #120]	; 0x78
   14258:	ldm	r8, {r2, r6}
   1425c:	str	lr, [sp, #40]	; 0x28
   14260:	adds	r2, r2, ip
   14264:	adc	lr, r6, lr
   14268:	stm	r8, {r2, lr}
   1426c:	ldr	r8, [sp, #124]	; 0x7c
   14270:	ldr	r2, [r8]
   14274:	ldr	r1, [r8, #4]
   14278:	ldr	r0, [sp, #80]	; 0x50
   1427c:	adds	r2, r2, r9
   14280:	str	r1, [sp, #36]	; 0x24
   14284:	mov	r9, #0
   14288:	adc	r0, r1, r0
   1428c:	str	r0, [sp, #44]	; 0x2c
   14290:	str	r2, [r8]
   14294:	str	r0, [r8, #4]
   14298:	ldr	ip, [sp, #128]	; 0x80
   1429c:	ldr	r2, [ip]
   142a0:	ldr	r1, [ip, #4]
   142a4:	ldr	r0, [sp, #60]	; 0x3c
   142a8:	adds	r2, r2, r0
   142ac:	ldr	r0, [sp, #72]	; 0x48
   142b0:	str	r1, [sp, #48]	; 0x30
   142b4:	adc	r8, r1, r0
   142b8:	stm	ip, {r2, r8}
   142bc:	ldr	ip, [sp, #132]	; 0x84
   142c0:	ldr	r2, [ip]
   142c4:	ldr	r1, [ip, #4]
   142c8:	ldr	r0, [sp, #64]	; 0x40
   142cc:	adds	r2, r2, r0
   142d0:	ldr	r0, [sp, #76]	; 0x4c
   142d4:	str	r1, [sp, #60]	; 0x3c
   142d8:	adc	r0, r1, r0
   142dc:	cmn	r3, #1
   142e0:	mov	r1, #0
   142e4:	mov	r3, #0
   142e8:	str	r0, [sp, #64]	; 0x40
   142ec:	str	r2, [ip]
   142f0:	mov	r2, #0
   142f4:	str	r0, [ip, #4]
   142f8:	mov	ip, #0
   142fc:	movwgt	r2, #1
   14300:	cmn	r7, #1
   14304:	mov	r7, #0
   14308:	movwgt	r1, #1
   1430c:	str	r2, [sp, #24]
   14310:	subs	r0, r2, r1
   14314:	mov	r1, #0
   14318:	mov	r2, #0
   1431c:	movwne	r0, #1
   14320:	str	r0, [sp, #20]
   14324:	ldr	r0, [sp, #56]	; 0x38
   14328:	cmn	r0, #1
   1432c:	mov	r0, #0
   14330:	movwgt	r0, #1
   14334:	str	r0, [sp, #56]	; 0x38
   14338:	ldr	r0, [sp, #28]
   1433c:	cmn	r0, #1
   14340:	mov	r0, #0
   14344:	movwgt	r1, #1
   14348:	cmn	r5, #1
   1434c:	mov	r5, #0
   14350:	movwgt	r0, #1
   14354:	str	r1, [sp, #28]
   14358:	subs	r0, r1, r0
   1435c:	mov	r1, #0
   14360:	movwne	r0, #1
   14364:	str	r0, [sp, #16]
   14368:	ldr	r0, [sp, #32]
   1436c:	cmn	r0, #1
   14370:	mov	r0, #0
   14374:	movwgt	r0, #1
   14378:	cmn	r6, #1
   1437c:	str	r0, [sp, #32]
   14380:	movwgt	r2, #1
   14384:	cmn	lr, #1
   14388:	mov	r0, #0
   1438c:	mov	lr, #0
   14390:	movwgt	r0, #1
   14394:	subs	r0, r2, r0
   14398:	movwne	r0, #1
   1439c:	str	r0, [sp, #12]
   143a0:	ldr	r0, [sp, #40]	; 0x28
   143a4:	cmn	r0, #1
   143a8:	ldr	r0, [sp, #36]	; 0x24
   143ac:	movwgt	lr, #1
   143b0:	cmn	r0, #1
   143b4:	ldr	r0, [sp, #44]	; 0x2c
   143b8:	movwgt	r9, #1
   143bc:	cmn	r0, #1
   143c0:	mov	r0, #0
   143c4:	movwgt	r0, #1
   143c8:	subs	r0, r9, r0
   143cc:	movwne	r0, #1
   143d0:	str	r0, [sp, #44]	; 0x2c
   143d4:	ldr	r0, [sp, #80]	; 0x50
   143d8:	cmn	r0, #1
   143dc:	ldr	r0, [sp, #48]	; 0x30
   143e0:	movwgt	r3, #1
   143e4:	cmn	r0, #1
   143e8:	ldr	r0, [sp, #72]	; 0x48
   143ec:	movwgt	ip, #1
   143f0:	cmn	r8, #1
   143f4:	mov	r8, #0
   143f8:	movwgt	r1, #1
   143fc:	subs	r6, ip, r1
   14400:	mov	r1, #0
   14404:	movwne	r6, #1
   14408:	cmn	r0, #1
   1440c:	ldr	r0, [sp, #60]	; 0x3c
   14410:	movwgt	r8, #1
   14414:	cmn	r0, #1
   14418:	ldr	r0, [sp, #64]	; 0x40
   1441c:	movwgt	r5, #1
   14420:	cmn	r0, #1
   14424:	ldr	r0, [sp, #76]	; 0x4c
   14428:	movwgt	r1, #1
   1442c:	subs	r1, r5, r1
   14430:	movwne	r1, #1
   14434:	cmn	r0, #1
   14438:	ldr	r0, [sp, #52]	; 0x34
   1443c:	movwgt	r7, #1
   14440:	str	r7, [sp, #80]	; 0x50
   14444:	ldr	r7, [sp, #68]	; 0x44
   14448:	cmp	r0, r7
   1444c:	bvs	164a0 <__assert_fail@plt+0x4ee4>
   14450:	ldr	r0, [sp, #24]
   14454:	ldr	r7, [sp, #56]	; 0x38
   14458:	sub	r0, r0, r7
   1445c:	ldr	r7, [sp, #20]
   14460:	clz	r0, r0
   14464:	lsr	r0, r0, #5
   14468:	ands	r0, r0, r7
   1446c:	bne	164a0 <__assert_fail@plt+0x4ee4>
   14470:	ldr	r0, [sp, #28]
   14474:	ldr	r7, [sp, #32]
   14478:	sub	r0, r0, r7
   1447c:	ldr	r7, [sp, #16]
   14480:	clz	r0, r0
   14484:	lsr	r0, r0, #5
   14488:	ands	r0, r0, r7
   1448c:	bne	164a0 <__assert_fail@plt+0x4ee4>
   14490:	sub	r0, r2, lr
   14494:	ldr	r2, [sp, #12]
   14498:	clz	r0, r0
   1449c:	lsr	r0, r0, #5
   144a0:	ands	r0, r0, r2
   144a4:	bne	164a0 <__assert_fail@plt+0x4ee4>
   144a8:	ldr	r2, [sp, #44]	; 0x2c
   144ac:	sub	r0, r9, r3
   144b0:	clz	r0, r0
   144b4:	lsr	r0, r0, #5
   144b8:	ands	r0, r0, r2
   144bc:	bne	164a0 <__assert_fail@plt+0x4ee4>
   144c0:	sub	r0, ip, r8
   144c4:	clz	r0, r0
   144c8:	lsr	r0, r0, #5
   144cc:	ands	r0, r0, r6
   144d0:	bne	164a0 <__assert_fail@plt+0x4ee4>
   144d4:	ldr	r0, [sp, #80]	; 0x50
   144d8:	sub	r0, r5, r0
   144dc:	ldr	r9, [sp, #192]	; 0xc0
   144e0:	ldr	r7, [sp, #184]	; 0xb8
   144e4:	ldr	r5, [sp, #180]	; 0xb4
   144e8:	ldr	r8, [sp, #176]	; 0xb0
   144ec:	clz	r0, r0
   144f0:	lsr	r0, r0, #5
   144f4:	ands	r0, r0, r1
   144f8:	ldr	lr, [sp, #188]	; 0xbc
   144fc:	b	15d10 <__assert_fail@plt+0x4754>
   14500:	sub	r0, sl, #112	; 0x70
   14504:	vldr	d18, [sl, #-96]	; 0xffffffa0
   14508:	str	r2, [sp, #204]	; 0xcc
   1450c:	ldr	r2, [sp, #172]	; 0xac
   14510:	str	r3, [sp, #200]	; 0xc8
   14514:	vld1.64	{d16-d17}, [r0]
   14518:	ldr	r0, [sp, #108]	; 0x6c
   1451c:	vst1.64	{d16-d17}, [r0]!
   14520:	vstr	d18, [r0]
   14524:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   14528:	rsbs	r0, r0, #0
   1452c:	rsc	r3, r1, #0
   14530:	and	r1, r1, r3
   14534:	stm	r2, {r0, r3}
   14538:	mov	r0, #1
   1453c:	cmp	r1, #0
   14540:	blt	164ac <__assert_fail@plt+0x4ef0>
   14544:	ldrd	r0, [sl, #8]
   14548:	ldr	r2, [sp, #168]	; 0xa8
   1454c:	rsbs	r0, r0, #0
   14550:	rsc	r3, r1, #0
   14554:	stm	r2, {r0, r3}
   14558:	and	r1, r1, r3
   1455c:	mov	r0, #1
   14560:	ldr	r3, [sp, #200]	; 0xc8
   14564:	ldr	r2, [sp, #204]	; 0xcc
   14568:	cmp	r1, #0
   1456c:	bge	1512c <__assert_fail@plt+0x3b70>
   14570:	b	164ac <__assert_fail@plt+0x4ef0>
   14574:	str	r2, [sp, #204]	; 0xcc
   14578:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   1457c:	ldr	r2, [sp, #168]	; 0xa8
   14580:	strd	r0, [r2]
   14584:	ldrd	r0, [sl]
   14588:	ldr	r2, [sp, #172]	; 0xac
   1458c:	b	14f80 <__assert_fail@plt+0x39c4>
   14590:	mvn	r0, #0
   14594:	str	r0, [sp, #244]	; 0xf4
   14598:	mvn	r0, #0
   1459c:	b	15128 <__assert_fail@plt+0x3b6c>
   145a0:	mov	r0, #1
   145a4:	str	r0, [r4, #20]
   145a8:	ldr	r0, [r4, #168]	; 0xa8
   145ac:	add	r0, r0, #1
   145b0:	str	r0, [r4, #168]	; 0xa8
   145b4:	b	1512c <__assert_fail@plt+0x3b70>
   145b8:	add	r0, sp, #180	; 0xb4
   145bc:	str	r2, [sp, #204]	; 0xcc
   145c0:	str	r3, [sp, #200]	; 0xc8
   145c4:	str	ip, [sp, #196]	; 0xc4
   145c8:	str	r8, [sp, #176]	; 0xb0
   145cc:	stm	r0, {r5, r7, lr}
   145d0:	str	r9, [sp, #192]	; 0xc0
   145d4:	ldr	r0, [sl, #-56]	; 0xffffffc8
   145d8:	b	14770 <__assert_fail@plt+0x31b4>
   145dc:	str	r2, [sp, #204]	; 0xcc
   145e0:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   145e4:	ldr	r2, [sp, #148]	; 0x94
   145e8:	vmov.i32	q8, #0	; 0x00000000
   145ec:	strd	r0, [r2]
   145f0:	ldr	r2, [sp, #204]	; 0xcc
   145f4:	ldr	r0, [sp, #152]	; 0x98
   145f8:	vst1.64	{d16-d17}, [r0]
   145fc:	b	14e2c <__assert_fail@plt+0x3870>
   14600:	ldr	r0, [sl, #-56]	; 0xffffffc8
   14604:	b	14ca8 <__assert_fail@plt+0x36ec>
   14608:	ldr	r1, [sl, #-40]	; 0xffffffd8
   1460c:	ldr	r6, [sl, #4]
   14610:	str	r9, [sp, #192]	; 0xc0
   14614:	ldr	r0, [sl, #-48]	; 0xffffffd0
   14618:	ldr	r9, [sl, #-44]	; 0xffffffd4
   1461c:	str	r2, [sp, #204]	; 0xcc
   14620:	mov	r2, #0
   14624:	str	r8, [sp, #176]	; 0xb0
   14628:	mov	r8, #100	; 0x64
   1462c:	str	lr, [sp, #188]	; 0xbc
   14630:	str	ip, [sp, #196]	; 0xc4
   14634:	str	r3, [sp, #200]	; 0xc8
   14638:	cmp	r1, #3
   1463c:	mov	r1, #0
   14640:	movwlt	r1, #1
   14644:	cmp	r6, #0
   14648:	movwlt	r2, #1
   1464c:	ands	r1, r2, r1
   14650:	mov	r2, r9
   14654:	umull	r9, r1, r0, r8
   14658:	mlane	r2, r2, r8, r1
   1465c:	moveq	r9, r0
   14660:	cmn	r6, #1
   14664:	ble	158f8 <__assert_fail@plt+0x433c>
   14668:	ldr	r0, [sl, #-56]	; 0xffffffc8
   1466c:	ldr	ip, [sl]
   14670:	cmn	r2, #1
   14674:	str	r7, [sp, #184]	; 0xb8
   14678:	str	r5, [sp, #180]	; 0xb4
   1467c:	str	r0, [sp, #80]	; 0x50
   14680:	ble	15da4 <__assert_fail@plt+0x47e8>
   14684:	movw	r1, #8738	; 0x2222
   14688:	movw	r0, #8738	; 0x2222
   1468c:	mov	r3, #1
   14690:	mov	r5, r9
   14694:	movt	r1, #8738	; 0x2222
   14698:	movt	r0, #546	; 0x222
   1469c:	subs	r1, r1, r9
   146a0:	sbcs	r0, r0, r2
   146a4:	bge	15db4 <__assert_fail@plt+0x47f8>
   146a8:	b	15e4c <__assert_fail@plt+0x4890>
   146ac:	str	r2, [sp, #204]	; 0xcc
   146b0:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   146b4:	ldr	r2, [sp, #148]	; 0x94
   146b8:	vmov.i32	q8, #0	; 0x00000000
   146bc:	strd	r0, [r2]
   146c0:	ldr	r2, [sp, #204]	; 0xcc
   146c4:	ldr	r0, [sp, #152]	; 0x98
   146c8:	vst1.64	{d16-d17}, [r0]
   146cc:	b	14c98 <__assert_fail@plt+0x36dc>
   146d0:	str	r2, [sp, #204]	; 0xcc
   146d4:	ldrd	r0, [sl, #-112]	; 0xffffff90
   146d8:	ldr	r2, [sp, #172]	; 0xac
   146dc:	str	r3, [sp, #200]	; 0xc8
   146e0:	strd	r0, [r2]
   146e4:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   146e8:	ldr	r2, [sp, #168]	; 0xa8
   146ec:	rsbs	r0, r0, #0
   146f0:	rsc	r3, r1, #0
   146f4:	and	r1, r1, r3
   146f8:	stm	r2, {r0, r3}
   146fc:	mov	r0, #1
   14700:	cmp	r1, #0
   14704:	blt	164ac <__assert_fail@plt+0x4ef0>
   14708:	ldrd	r0, [sl, #8]
   1470c:	ldr	r2, [sp, #96]	; 0x60
   14710:	rsbs	r0, r0, #0
   14714:	rsc	r3, r1, #0
   14718:	stm	r2, {r0, r3}
   1471c:	and	r1, r1, r3
   14720:	mov	r0, #1
   14724:	ldr	r3, [sp, #200]	; 0xc8
   14728:	ldr	r2, [sp, #204]	; 0xcc
   1472c:	cmp	r1, #0
   14730:	blt	164ac <__assert_fail@plt+0x4ef0>
   14734:	ldr	r0, [sl, #16]
   14738:	ldr	r1, [sp, #100]	; 0x64
   1473c:	str	r0, [r1]
   14740:	b	1512c <__assert_fail@plt+0x3b70>
   14744:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   14748:	b	14b6c <__assert_fail@plt+0x35b0>
   1474c:	add	r0, sp, #180	; 0xb4
   14750:	str	r2, [sp, #204]	; 0xcc
   14754:	str	r3, [sp, #200]	; 0xc8
   14758:	str	ip, [sp, #196]	; 0xc4
   1475c:	str	r8, [sp, #176]	; 0xb0
   14760:	stm	r0, {r5, r7, lr}
   14764:	movw	r0, #40336	; 0x9d90
   14768:	str	r9, [sp, #192]	; 0xc0
   1476c:	movt	r0, #65535	; 0xffff
   14770:	str	r0, [r4, #24]
   14774:	ldr	r1, [r4, #144]	; 0x90
   14778:	ldr	r0, [sl, #48]	; 0x30
   1477c:	ldr	r8, [sl, #4]
   14780:	ldr	r6, [sl, #12]
   14784:	ldr	lr, [sl, #20]
   14788:	ldr	ip, [sl, #28]
   1478c:	ldr	r3, [sl, #36]	; 0x24
   14790:	ldr	r9, [sl, #32]
   14794:	ldr	r2, [sl, #40]	; 0x28
   14798:	add	r0, r1, r0
   1479c:	str	r1, [sp, #80]	; 0x50
   147a0:	ldr	r1, [sl]
   147a4:	str	r8, [sp, #72]	; 0x48
   147a8:	str	r6, [sp, #64]	; 0x40
   147ac:	str	lr, [sp, #52]	; 0x34
   147b0:	str	ip, [sp, #40]	; 0x28
   147b4:	str	r3, [sp, #32]
   147b8:	str	r0, [sp, #76]	; 0x4c
   147bc:	str	r1, [sp, #68]	; 0x44
   147c0:	ldr	r1, [sl, #8]
   147c4:	str	r1, [sp, #60]	; 0x3c
   147c8:	ldr	r1, [sl, #16]
   147cc:	str	r1, [sp, #56]	; 0x38
   147d0:	ldr	r1, [sl, #24]
   147d4:	str	r1, [sp, #48]	; 0x30
   147d8:	ldr	r1, [sl, #44]	; 0x2c
   147dc:	str	r0, [r4, #144]	; 0x90
   147e0:	ldr	r0, [sp, #112]	; 0x70
   147e4:	str	r1, [sp, #24]
   147e8:	ldm	r0, {r5, r7}
   147ec:	adds	r2, r5, r2
   147f0:	adc	r5, r7, r1
   147f4:	stm	r0, {r2, r5}
   147f8:	ldr	r0, [sp, #116]	; 0x74
   147fc:	ldr	r2, [r0]
   14800:	ldr	r1, [r0, #4]
   14804:	adds	r2, r2, r9
   14808:	str	r1, [sp, #20]
   1480c:	adc	r9, r1, r3
   14810:	stm	r0, {r2, r9}
   14814:	ldr	r0, [sp, #120]	; 0x78
   14818:	ldr	r2, [r0]
   1481c:	ldr	r1, [r0, #4]
   14820:	ldr	r3, [sp, #48]	; 0x30
   14824:	adds	r3, r2, r3
   14828:	str	r1, [sp, #28]
   1482c:	adc	r2, r1, ip
   14830:	str	r3, [r0]
   14834:	str	r2, [r0, #4]
   14838:	ldr	r0, [sp, #124]	; 0x7c
   1483c:	ldr	ip, [r0]
   14840:	ldr	r1, [r0, #4]
   14844:	ldr	r3, [sp, #56]	; 0x38
   14848:	adds	ip, ip, r3
   1484c:	str	r1, [sp, #36]	; 0x24
   14850:	adc	r1, r1, lr
   14854:	mov	lr, #0
   14858:	str	r1, [sp, #44]	; 0x2c
   1485c:	str	ip, [r0]
   14860:	str	r1, [r0, #4]
   14864:	ldr	ip, [sp, #128]	; 0x80
   14868:	ldr	r3, [sp, #60]	; 0x3c
   1486c:	ldrd	r0, [ip]
   14870:	adds	r0, r0, r3
   14874:	str	r1, [sp, #48]	; 0x30
   14878:	adc	r1, r1, r6
   1487c:	str	r1, [sp, #56]	; 0x38
   14880:	strd	r0, [ip]
   14884:	ldr	ip, [sp, #132]	; 0x84
   14888:	ldr	r3, [sp, #68]	; 0x44
   1488c:	ldrd	r0, [ip]
   14890:	adds	r0, r0, r3
   14894:	str	r1, [sp, #60]	; 0x3c
   14898:	adc	r3, r1, r8
   1489c:	cmn	r7, #1
   148a0:	mov	r1, #0
   148a4:	mov	r7, #0
   148a8:	mov	r8, #0
   148ac:	str	r3, [sp, #68]	; 0x44
   148b0:	stm	ip, {r0, r3}
   148b4:	mov	r3, #0
   148b8:	mov	r0, #0
   148bc:	mov	ip, #0
   148c0:	movwgt	r3, #1
   148c4:	cmn	r5, #1
   148c8:	mov	r5, #0
   148cc:	movwgt	r0, #1
   148d0:	str	r3, [sp, #16]
   148d4:	subs	r0, r3, r0
   148d8:	ldr	r3, [sp, #76]	; 0x4c
   148dc:	movwne	r0, #1
   148e0:	str	r0, [sp, #12]
   148e4:	ldr	r0, [sp, #24]
   148e8:	cmn	r0, #1
   148ec:	mov	r0, #0
   148f0:	movwgt	r0, #1
   148f4:	str	r0, [sp, #24]
   148f8:	ldr	r0, [sp, #20]
   148fc:	cmn	r0, #1
   14900:	mov	r0, #0
   14904:	movwgt	r1, #1
   14908:	cmn	r9, #1
   1490c:	mov	r9, #0
   14910:	movwgt	r0, #1
   14914:	str	r1, [sp, #20]
   14918:	subs	r0, r1, r0
   1491c:	mov	r1, #0
   14920:	movwne	r0, #1
   14924:	str	r0, [sp, #8]
   14928:	ldr	r0, [sp, #32]
   1492c:	cmn	r0, #1
   14930:	mov	r0, #0
   14934:	movwgt	r0, #1
   14938:	str	r0, [sp, #32]
   1493c:	ldr	r0, [sp, #28]
   14940:	cmn	r0, #1
   14944:	mov	r0, #0
   14948:	movwgt	r7, #1
   1494c:	cmn	r2, #1
   14950:	mov	r2, #0
   14954:	movwgt	r0, #1
   14958:	subs	r0, r7, r0
   1495c:	movwne	r0, #1
   14960:	str	r0, [sp, #28]
   14964:	ldr	r0, [sp, #40]	; 0x28
   14968:	cmn	r0, #1
   1496c:	ldr	r0, [sp, #36]	; 0x24
   14970:	movwgt	lr, #1
   14974:	cmn	r0, #1
   14978:	ldr	r0, [sp, #44]	; 0x2c
   1497c:	movwgt	r9, #1
   14980:	cmn	r0, #1
   14984:	mov	r0, #0
   14988:	movwgt	r0, #1
   1498c:	subs	r0, r9, r0
   14990:	movwne	r0, #1
   14994:	str	r0, [sp, #44]	; 0x2c
   14998:	ldr	r0, [sp, #52]	; 0x34
   1499c:	cmn	r0, #1
   149a0:	ldr	r0, [sp, #48]	; 0x30
   149a4:	movwgt	ip, #1
   149a8:	cmn	r0, #1
   149ac:	ldr	r0, [sp, #56]	; 0x38
   149b0:	movwgt	r2, #1
   149b4:	cmn	r0, #1
   149b8:	ldr	r0, [sp, #64]	; 0x40
   149bc:	movwgt	r1, #1
   149c0:	subs	r6, r2, r1
   149c4:	mov	r1, #0
   149c8:	movwne	r6, #1
   149cc:	cmn	r0, #1
   149d0:	ldr	r0, [sp, #60]	; 0x3c
   149d4:	movwgt	r8, #1
   149d8:	cmn	r0, #1
   149dc:	ldr	r0, [sp, #68]	; 0x44
   149e0:	movwgt	r5, #1
   149e4:	cmn	r0, #1
   149e8:	ldr	r0, [sp, #72]	; 0x48
   149ec:	movwgt	r1, #1
   149f0:	subs	r1, r5, r1
   149f4:	movwne	r1, #1
   149f8:	cmn	r0, #1
   149fc:	mov	r0, #0
   14a00:	movwgt	r0, #1
   14a04:	str	r0, [sp, #72]	; 0x48
   14a08:	ldr	r0, [sp, #80]	; 0x50
   14a0c:	cmp	r3, r0
   14a10:	bvs	164a0 <__assert_fail@plt+0x4ee4>
   14a14:	ldr	r0, [sp, #16]
   14a18:	ldr	r3, [sp, #24]
   14a1c:	sub	r0, r0, r3
   14a20:	ldr	r3, [sp, #12]
   14a24:	clz	r0, r0
   14a28:	lsr	r0, r0, #5
   14a2c:	ands	r0, r0, r3
   14a30:	bne	164a0 <__assert_fail@plt+0x4ee4>
   14a34:	ldr	r0, [sp, #20]
   14a38:	ldr	r3, [sp, #32]
   14a3c:	sub	r0, r0, r3
   14a40:	ldr	r3, [sp, #8]
   14a44:	clz	r0, r0
   14a48:	lsr	r0, r0, #5
   14a4c:	ands	r0, r0, r3
   14a50:	bne	164a0 <__assert_fail@plt+0x4ee4>
   14a54:	ldr	r3, [sp, #28]
   14a58:	sub	r0, r7, lr
   14a5c:	clz	r0, r0
   14a60:	lsr	r0, r0, #5
   14a64:	ands	r0, r0, r3
   14a68:	bne	164a0 <__assert_fail@plt+0x4ee4>
   14a6c:	ldr	r3, [sp, #44]	; 0x2c
   14a70:	sub	r0, r9, ip
   14a74:	clz	r0, r0
   14a78:	lsr	r0, r0, #5
   14a7c:	ands	r0, r0, r3
   14a80:	bne	164a0 <__assert_fail@plt+0x4ee4>
   14a84:	sub	r0, r2, r8
   14a88:	clz	r0, r0
   14a8c:	lsr	r0, r0, #5
   14a90:	ands	r0, r0, r6
   14a94:	bne	164a0 <__assert_fail@plt+0x4ee4>
   14a98:	ldr	r0, [sp, #72]	; 0x48
   14a9c:	ldr	r9, [sp, #192]	; 0xc0
   14aa0:	ldr	r7, [sp, #184]	; 0xb8
   14aa4:	ldr	r8, [sp, #176]	; 0xb0
   14aa8:	sub	r0, r5, r0
   14aac:	ldr	r5, [sp, #180]	; 0xb4
   14ab0:	clz	r0, r0
   14ab4:	lsr	r0, r0, #5
   14ab8:	ands	r0, r0, r1
   14abc:	mov	r0, #1
   14ac0:	bne	164ac <__assert_fail@plt+0x4ef0>
   14ac4:	movw	r1, #2262	; 0x8d6
   14ac8:	mov	r0, #1
   14acc:	mov	r2, #5
   14ad0:	strb	r0, [r4, #153]	; 0x99
   14ad4:	movt	r1, #2
   14ad8:	mov	r0, #0
   14adc:	b	14ecc <__assert_fail@plt+0x3910>
   14ae0:	add	r0, sp, #180	; 0xb4
   14ae4:	stm	r0, {r5, r7, lr}
   14ae8:	str	r2, [sp, #204]	; 0xcc
   14aec:	mov	lr, r3
   14af0:	mov	r7, ip
   14af4:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   14af8:	ldr	r2, [sl, #-272]	; 0xfffffef0
   14afc:	ldr	r3, [sl, #-268]	; 0xfffffef4
   14b00:	str	r1, [sp, #76]	; 0x4c
   14b04:	str	r0, [sp, #80]	; 0x50
   14b08:	ldr	r6, [sl, #-160]	; 0xffffff60
   14b0c:	ldr	r5, [sl, #-156]	; 0xffffff64
   14b10:	ldr	r0, [sp, #148]	; 0x94
   14b14:	strd	r2, [r0]
   14b18:	mov	r3, lr
   14b1c:	add	lr, sp, #180	; 0xb4
   14b20:	ldr	r2, [sp, #152]	; 0x98
   14b24:	str	r6, [r2]
   14b28:	str	r5, [r2, #4]
   14b2c:	ldr	r0, [sp, #80]	; 0x50
   14b30:	ldr	r1, [sp, #76]	; 0x4c
   14b34:	ldr	r2, [sp, #204]	; 0xcc
   14b38:	strd	r0, [r4, #88]	; 0x58
   14b3c:	ldm	lr, {r5, r7, lr}
   14b40:	b	14c98 <__assert_fail@plt+0x36dc>
   14b44:	ldr	r0, [sl]
   14b48:	str	r0, [r4, #24]
   14b4c:	b	1512c <__assert_fail@plt+0x3b70>
   14b50:	ldr	r0, [r4, #172]	; 0xac
   14b54:	movw	r1, #63641	; 0xf899
   14b58:	movt	r1, #1
   14b5c:	add	r0, r0, #1
   14b60:	str	r0, [r4, #172]	; 0xac
   14b64:	b	14f24 <__assert_fail@plt+0x3968>
   14b68:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   14b6c:	str	r2, [sp, #204]	; 0xcc
   14b70:	ldr	r2, [sp, #104]	; 0x68
   14b74:	strd	r0, [r2]
   14b78:	mov	r1, #1
   14b7c:	ldr	r0, [sl]
   14b80:	ldr	r2, [sp, #204]	; 0xcc
   14b84:	strb	r1, [r4, #188]	; 0xbc
   14b88:	str	r0, [r4, #16]
   14b8c:	b	1512c <__assert_fail@plt+0x3b70>
   14b90:	ldr	r6, [sl, #-208]	; 0xffffff30
   14b94:	ldrb	r0, [r4, #181]	; 0xb5
   14b98:	str	r8, [sp, #176]	; 0xb0
   14b9c:	str	r9, [sp, #192]	; 0xc0
   14ba0:	str	r2, [sp, #204]	; 0xcc
   14ba4:	cmp	r6, #4
   14ba8:	blt	154bc <__assert_fail@plt+0x3f00>
   14bac:	str	r5, [sp, #180]	; 0xb4
   14bb0:	sub	r5, sl, #224	; 0xe0
   14bb4:	cmp	r0, #0
   14bb8:	str	r7, [sp, #184]	; 0xb8
   14bbc:	beq	14c00 <__assert_fail@plt+0x3644>
   14bc0:	movw	r1, #2285	; 0x8ed
   14bc4:	mov	r0, #0
   14bc8:	mov	r2, #5
   14bcc:	mov	r9, lr
   14bd0:	mov	r8, ip
   14bd4:	mov	r7, r3
   14bd8:	movt	r1, #2
   14bdc:	bl	11328 <dcgettext@plt>
   14be0:	ldrd	r2, [sl, #-216]	; 0xffffff28
   14be4:	asr	r1, r6, #31
   14be8:	str	r6, [sp]
   14bec:	str	r1, [sp, #4]
   14bf0:	bl	16c20 <__assert_fail@plt+0x5664>
   14bf4:	mov	r3, r7
   14bf8:	mov	lr, r9
   14bfc:	mov	ip, r8
   14c00:	vld1.64	{d16-d17}, [r5]!
   14c04:	ldr	r0, [sp, #108]	; 0x6c
   14c08:	ldr	r2, [sp, #172]	; 0xac
   14c0c:	vldr	d18, [r5]
   14c10:	vst1.64	{d16-d17}, [r0]!
   14c14:	vstr	d18, [r0]
   14c18:	ldrd	r0, [sl, #-104]	; 0xffffff98
   14c1c:	strd	r0, [r2]
   14c20:	ldrd	r0, [sl, #8]
   14c24:	ldr	r2, [sp, #168]	; 0xa8
   14c28:	strd	r0, [r2]
   14c2c:	ldr	r9, [sp, #192]	; 0xc0
   14c30:	ldr	r7, [sp, #184]	; 0xb8
   14c34:	ldr	r5, [sp, #180]	; 0xb4
   14c38:	b	15e0c <__assert_fail@plt+0x4850>
   14c3c:	ldr	r0, [r4, #156]	; 0x9c
   14c40:	movw	r1, #64312	; 0xfb38
   14c44:	movt	r1, #1
   14c48:	add	r0, r0, #1
   14c4c:	str	r0, [r4, #156]	; 0x9c
   14c50:	b	14f24 <__assert_fail@plt+0x3968>
   14c54:	str	ip, [sp, #196]	; 0xc4
   14c58:	ldr	ip, [sl, #-160]	; 0xffffff60
   14c5c:	ldr	r1, [sl, #-156]	; 0xffffff64
   14c60:	ldr	r6, [sp, #148]	; 0x94
   14c64:	str	r3, [sp, #200]	; 0xc8
   14c68:	str	r2, [sp, #204]	; 0xcc
   14c6c:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   14c70:	str	ip, [r6]
   14c74:	str	r1, [r6, #4]
   14c78:	ldr	r0, [sp, #152]	; 0x98
   14c7c:	ldr	ip, [sp, #196]	; 0xc4
   14c80:	strd	r2, [r0]
   14c84:	mov	r0, #0
   14c88:	ldr	r2, [sp, #204]	; 0xcc
   14c8c:	ldr	r3, [sp, #200]	; 0xc8
   14c90:	str	r0, [r4, #88]	; 0x58
   14c94:	str	r0, [r4, #92]	; 0x5c
   14c98:	ldr	r0, [sl]
   14c9c:	str	r0, [r4, #28]
   14ca0:	b	1512c <__assert_fail@plt+0x3b70>
   14ca4:	ldr	r0, [sl]
   14ca8:	add	r0, r0, #3600	; 0xe10
   14cac:	str	r0, [r4, #24]
   14cb0:	b	1512c <__assert_fail@plt+0x3b70>
   14cb4:	str	r2, [sp, #204]	; 0xcc
   14cb8:	ldrd	r0, [sl]
   14cbc:	ldr	r2, [sp, #84]	; 0x54
   14cc0:	strd	r0, [r2]
   14cc4:	movw	r1, #2220	; 0x8ac
   14cc8:	mov	r0, #1
   14ccc:	strb	r0, [r4, #152]	; 0x98
   14cd0:	movt	r1, #2
   14cd4:	mov	r0, #0
   14cd8:	b	14f2c <__assert_fail@plt+0x3970>
   14cdc:	ldr	r1, [r4, #172]	; 0xac
   14ce0:	ldr	r0, [r4, #156]	; 0x9c
   14ce4:	add	r1, r1, #1
   14ce8:	add	r0, r0, #1
   14cec:	str	r1, [r4, #172]	; 0xac
   14cf0:	movw	r1, #2238	; 0x8be
   14cf4:	str	r0, [r4, #156]	; 0x9c
   14cf8:	movt	r1, #2
   14cfc:	b	14f24 <__assert_fail@plt+0x3968>
   14d00:	ldr	r0, [r4, #160]	; 0xa0
   14d04:	movw	r1, #2258	; 0x8d2
   14d08:	movt	r1, #2
   14d0c:	add	r0, r0, #1
   14d10:	str	r0, [r4, #160]	; 0xa0
   14d14:	b	14f24 <__assert_fail@plt+0x3968>
   14d18:	movw	r1, #2262	; 0x8d6
   14d1c:	movt	r1, #2
   14d20:	b	14eb4 <__assert_fail@plt+0x38f8>
   14d24:	str	ip, [sp, #196]	; 0xc4
   14d28:	ldr	ip, [sl, #-160]	; 0xffffff60
   14d2c:	ldr	r1, [sl, #-156]	; 0xffffff64
   14d30:	ldr	r6, [sp, #148]	; 0x94
   14d34:	str	r3, [sp, #200]	; 0xc8
   14d38:	str	r2, [sp, #204]	; 0xcc
   14d3c:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   14d40:	str	ip, [r6]
   14d44:	str	r1, [r6, #4]
   14d48:	ldr	r0, [sp, #152]	; 0x98
   14d4c:	ldr	ip, [sp, #196]	; 0xc4
   14d50:	strd	r2, [r0]
   14d54:	mov	r0, #0
   14d58:	ldr	r2, [sp, #204]	; 0xcc
   14d5c:	ldr	r3, [sp, #200]	; 0xc8
   14d60:	str	r0, [r4, #88]	; 0x58
   14d64:	str	r0, [r4, #92]	; 0x5c
   14d68:	b	14e2c <__assert_fail@plt+0x3870>
   14d6c:	mov	r0, #1
   14d70:	mov	r8, #0
   14d74:	mov	ip, #0
   14d78:	mov	lr, #0
   14d7c:	mov	r3, #0
   14d80:	mov	r2, #0
   14d84:	str	r0, [sp, #244]	; 0xf4
   14d88:	mov	r0, #0
   14d8c:	str	r0, [sp, #236]	; 0xec
   14d90:	mov	r0, #0
   14d94:	str	r0, [sp, #232]	; 0xe8
   14d98:	mov	r0, #0
   14d9c:	str	r0, [sp, #224]	; 0xe0
   14da0:	mov	r0, #0
   14da4:	str	r0, [sp, #228]	; 0xe4
   14da8:	mov	r0, #0
   14dac:	str	r0, [sp, #220]	; 0xdc
   14db0:	mov	r0, #0
   14db4:	str	r0, [sp, #216]	; 0xd8
   14db8:	b	15124 <__assert_fail@plt+0x3b68>
   14dbc:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   14dc0:	str	r7, [sp, #184]	; 0xb8
   14dc4:	str	ip, [sp, #196]	; 0xc4
   14dc8:	str	lr, [sp, #188]	; 0xbc
   14dcc:	mov	lr, r2
   14dd0:	mov	ip, r3
   14dd4:	mov	r7, r5
   14dd8:	ldr	r2, [sl, #-272]	; 0xfffffef0
   14ddc:	ldr	r3, [sl, #-268]	; 0xfffffef4
   14de0:	str	r1, [sp, #76]	; 0x4c
   14de4:	str	r0, [sp, #80]	; 0x50
   14de8:	mov	r1, r9
   14dec:	ldr	r6, [sl, #-160]	; 0xffffff60
   14df0:	ldr	r5, [sl, #-156]	; 0xffffff64
   14df4:	ldr	r0, [sp, #148]	; 0x94
   14df8:	strd	r2, [r0]
   14dfc:	mov	r3, ip
   14e00:	ldr	r2, [sp, #152]	; 0x98
   14e04:	str	r6, [r2]
   14e08:	str	r5, [r2, #4]
   14e0c:	mov	r2, lr
   14e10:	mov	r5, r7
   14e14:	ldr	r0, [sp, #80]	; 0x50
   14e18:	ldr	r1, [sp, #76]	; 0x4c
   14e1c:	strd	r0, [r4, #88]	; 0x58
   14e20:	ldr	lr, [sp, #188]	; 0xbc
   14e24:	ldr	ip, [sp, #196]	; 0xc4
   14e28:	ldr	r7, [sp, #184]	; 0xb8
   14e2c:	mov	r0, #2
   14e30:	str	r0, [r4, #28]
   14e34:	b	1512c <__assert_fail@plt+0x3b70>
   14e38:	ldr	r0, [r4, #164]	; 0xa4
   14e3c:	movw	r1, #2247	; 0x8c7
   14e40:	movt	r1, #2
   14e44:	add	r0, r0, #1
   14e48:	str	r0, [r4, #164]	; 0xa4
   14e4c:	b	14f24 <__assert_fail@plt+0x3968>
   14e50:	ldrd	r0, [sl, #-104]	; 0xffffff98
   14e54:	b	14f6c <__assert_fail@plt+0x39b0>
   14e58:	ldr	r0, [r4, #176]	; 0xb0
   14e5c:	movw	r1, #2253	; 0x8cd
   14e60:	movt	r1, #2
   14e64:	add	r0, r0, #1
   14e68:	str	r0, [r4, #176]	; 0xb0
   14e6c:	b	14f24 <__assert_fail@plt+0x3968>
   14e70:	str	r2, [sp, #204]	; 0xcc
   14e74:	ldrd	r0, [sl, #-104]	; 0xffffff98
   14e78:	ldr	r2, [sp, #168]	; 0xa8
   14e7c:	strd	r0, [r2]
   14e80:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   14e84:	ldr	r2, [sp, #172]	; 0xac
   14e88:	b	153a0 <__assert_fail@plt+0x3de4>
   14e8c:	ldr	r8, [sl, #-56]	; 0xffffffc8
   14e90:	ldr	ip, [sl, #-52]	; 0xffffffcc
   14e94:	mov	lr, #0
   14e98:	mov	r3, #0
   14e9c:	mov	r2, #0
   14ea0:	mov	r0, #0
   14ea4:	str	r0, [sp, #236]	; 0xec
   14ea8:	b	14f08 <__assert_fail@plt+0x394c>
   14eac:	movw	r1, #2278	; 0x8e6
   14eb0:	movt	r1, #2
   14eb4:	str	r2, [sp, #204]	; 0xcc
   14eb8:	mov	r0, #0
   14ebc:	mov	r2, #5
   14ec0:	str	lr, [sp, #188]	; 0xbc
   14ec4:	str	ip, [sp, #196]	; 0xc4
   14ec8:	str	r3, [sp, #200]	; 0xc8
   14ecc:	bl	11328 <dcgettext@plt>
   14ed0:	mov	r1, r4
   14ed4:	bl	16958 <__assert_fail@plt+0x539c>
   14ed8:	b	14f48 <__assert_fail@plt+0x398c>
   14edc:	ldrd	r0, [sl, #8]
   14ee0:	str	r1, [sp, #240]	; 0xf0
   14ee4:	str	r0, [sp, #244]	; 0xf4
   14ee8:	b	1512c <__assert_fail@plt+0x3b70>
   14eec:	ldr	r2, [sl, #-56]	; 0xffffffc8
   14ef0:	ldr	r0, [sl, #-52]	; 0xffffffcc
   14ef4:	str	r0, [sp, #236]	; 0xec
   14ef8:	mov	r8, #0
   14efc:	mov	ip, #0
   14f00:	mov	lr, #0
   14f04:	mov	r3, #0
   14f08:	mov	r0, #0
   14f0c:	str	r0, [sp, #232]	; 0xe8
   14f10:	mov	r0, #0
   14f14:	str	r0, [sp, #224]	; 0xe0
   14f18:	b	15104 <__assert_fail@plt+0x3b48>
   14f1c:	movw	r1, #2271	; 0x8df
   14f20:	movt	r1, #2
   14f24:	mov	r0, #0
   14f28:	str	r2, [sp, #204]	; 0xcc
   14f2c:	mov	r2, #5
   14f30:	str	lr, [sp, #188]	; 0xbc
   14f34:	str	ip, [sp, #196]	; 0xc4
   14f38:	str	r3, [sp, #200]	; 0xc8
   14f3c:	bl	11328 <dcgettext@plt>
   14f40:	mov	r1, r4
   14f44:	bl	164bc <__assert_fail@plt+0x4f00>
   14f48:	ldr	r2, [sp, #204]	; 0xcc
   14f4c:	ldr	r3, [sp, #200]	; 0xc8
   14f50:	ldr	lr, [sp, #188]	; 0xbc
   14f54:	ldr	ip, [sp, #196]	; 0xc4
   14f58:	b	1512c <__assert_fail@plt+0x3b70>
   14f5c:	ldr	r0, [sl]
   14f60:	str	r0, [r4, #20]
   14f64:	b	1512c <__assert_fail@plt+0x3b70>
   14f68:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   14f6c:	str	r2, [sp, #204]	; 0xcc
   14f70:	ldr	r2, [sp, #172]	; 0xac
   14f74:	strd	r0, [r2]
   14f78:	ldrd	r0, [sl, #8]
   14f7c:	ldr	r2, [sp, #168]	; 0xa8
   14f80:	strd	r0, [r2]
   14f84:	ldr	r2, [sp, #204]	; 0xcc
   14f88:	b	1512c <__assert_fail@plt+0x3b70>
   14f8c:	ldr	r0, [r4, #176]	; 0xb0
   14f90:	str	r9, [sp, #192]	; 0xc0
   14f94:	str	r2, [sp, #204]	; 0xcc
   14f98:	mov	r2, #0
   14f9c:	str	r8, [sp, #176]	; 0xb0
   14fa0:	mov	r8, #100	; 0x64
   14fa4:	str	lr, [sp, #188]	; 0xbc
   14fa8:	str	ip, [sp, #196]	; 0xc4
   14fac:	str	r3, [sp, #200]	; 0xc8
   14fb0:	add	r0, r0, #1
   14fb4:	str	r0, [r4, #176]	; 0xb0
   14fb8:	ldr	r1, [sl, #-40]	; 0xffffffd8
   14fbc:	ldr	r6, [sl, #4]
   14fc0:	ldr	r0, [sl, #-48]	; 0xffffffd0
   14fc4:	ldr	r9, [sl, #-44]	; 0xffffffd4
   14fc8:	cmp	r1, #3
   14fcc:	mov	r1, #0
   14fd0:	movwlt	r1, #1
   14fd4:	cmp	r6, #0
   14fd8:	movwlt	r2, #1
   14fdc:	ands	r1, r2, r1
   14fe0:	mov	r2, r9
   14fe4:	umull	r9, r1, r0, r8
   14fe8:	mlane	r2, r2, r8, r1
   14fec:	moveq	r9, r0
   14ff0:	cmn	r6, #1
   14ff4:	ble	15940 <__assert_fail@plt+0x4384>
   14ff8:	ldr	r0, [sl, #-56]	; 0xffffffc8
   14ffc:	ldr	ip, [sl]
   15000:	cmn	r2, #1
   15004:	str	r7, [sp, #184]	; 0xb8
   15008:	str	r5, [sp, #180]	; 0xb4
   1500c:	str	r0, [sp, #80]	; 0x50
   15010:	ble	15dbc <__assert_fail@plt+0x4800>
   15014:	movw	r1, #8738	; 0x2222
   15018:	movw	r0, #8738	; 0x2222
   1501c:	mov	r3, #1
   15020:	mov	r5, r9
   15024:	movt	r1, #8738	; 0x2222
   15028:	movt	r0, #546	; 0x222
   1502c:	subs	r1, r1, r9
   15030:	sbcs	r0, r0, r2
   15034:	bge	15dcc <__assert_fail@plt+0x4810>
   15038:	b	15fe4 <__assert_fail@plt+0x4a28>
   1503c:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   15040:	str	r0, [sp, #244]	; 0xf4
   15044:	mov	r0, #0
   15048:	str	r1, [sp, #240]	; 0xf0
   1504c:	mov	r8, #0
   15050:	mov	ip, #0
   15054:	mov	lr, #0
   15058:	mov	r3, #0
   1505c:	mov	r2, #0
   15060:	str	r0, [sp, #236]	; 0xec
   15064:	mov	r0, #0
   15068:	str	r0, [sp, #232]	; 0xe8
   1506c:	mov	r0, #0
   15070:	str	r0, [sp, #224]	; 0xe0
   15074:	mov	r0, #0
   15078:	str	r0, [sp, #228]	; 0xe4
   1507c:	mov	r0, #0
   15080:	str	r0, [sp, #220]	; 0xdc
   15084:	mov	r0, #0
   15088:	str	r0, [sp, #216]	; 0xd8
   1508c:	b	1512c <__assert_fail@plt+0x3b70>
   15090:	movw	r0, #40336	; 0x9d90
   15094:	movt	r0, #65535	; 0xffff
   15098:	str	r0, [r4, #24]
   1509c:	b	1512c <__assert_fail@plt+0x3b70>
   150a0:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   150a4:	str	r0, [sp, #228]	; 0xe4
   150a8:	mov	r0, #0
   150ac:	str	r1, [sp, #220]	; 0xdc
   150b0:	mov	r8, #0
   150b4:	mov	ip, #0
   150b8:	mov	lr, #0
   150bc:	mov	r3, #0
   150c0:	mov	r2, #0
   150c4:	str	r0, [sp, #236]	; 0xec
   150c8:	mov	r0, #0
   150cc:	str	r0, [sp, #232]	; 0xe8
   150d0:	mov	r0, #0
   150d4:	str	r0, [sp, #224]	; 0xe0
   150d8:	b	15114 <__assert_fail@plt+0x3b58>
   150dc:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   150e0:	str	r0, [sp, #232]	; 0xe8
   150e4:	mov	r0, #0
   150e8:	str	r1, [sp, #224]	; 0xe0
   150ec:	mov	r8, #0
   150f0:	mov	ip, #0
   150f4:	mov	lr, #0
   150f8:	mov	r3, #0
   150fc:	mov	r2, #0
   15100:	str	r0, [sp, #236]	; 0xec
   15104:	mov	r0, #0
   15108:	str	r0, [sp, #228]	; 0xe4
   1510c:	mov	r0, #0
   15110:	str	r0, [sp, #220]	; 0xdc
   15114:	mov	r0, #0
   15118:	str	r0, [sp, #216]	; 0xd8
   1511c:	mov	r0, #0
   15120:	str	r0, [sp, #244]	; 0xf4
   15124:	mov	r0, #0
   15128:	str	r0, [sp, #240]	; 0xf0
   1512c:	sub	r0, r7, r7, lsl #3
   15130:	sub	r1, fp, #112	; 0x70
   15134:	add	sl, sl, r0, lsl #3
   15138:	ldr	r0, [sp, #244]	; 0xf4
   1513c:	str	r0, [sl, #56]!	; 0x38
   15140:	ldr	r0, [sp, #240]	; 0xf0
   15144:	stmib	sl, {r0, r8, ip, lr}
   15148:	str	r3, [sl, #20]
   1514c:	str	r2, [sl, #24]
   15150:	movw	r3, #292	; 0x124
   15154:	ldr	r0, [sp, #236]	; 0xec
   15158:	movt	r3, #2
   1515c:	str	r0, [sl, #28]
   15160:	ldr	r0, [sp, #232]	; 0xe8
   15164:	str	r0, [sl, #32]
   15168:	ldr	r0, [sp, #224]	; 0xe0
   1516c:	str	r0, [sl, #36]	; 0x24
   15170:	ldr	r0, [sp, #228]	; 0xe4
   15174:	str	r0, [sl, #40]	; 0x28
   15178:	ldr	r0, [sp, #220]	; 0xdc
   1517c:	str	r0, [sl, #44]	; 0x2c
   15180:	ldr	r0, [sp, #216]	; 0xd8
   15184:	str	r0, [sl, #48]	; 0x30
   15188:	ldr	r0, [sp, #208]	; 0xd0
   1518c:	str	r0, [sl, #52]	; 0x34
   15190:	sub	r0, r9, r7
   15194:	add	r1, r1, r0, lsl #1
   15198:	ldrsh	r2, [r1]
   1519c:	movw	r1, #200	; 0xc8
   151a0:	movt	r1, #2
   151a4:	ldrb	r1, [r1, r5]
   151a8:	sub	r1, r1, #28
   151ac:	add	r3, r3, r1
   151b0:	ldrsb	r3, [r3]
   151b4:	add	r3, r2, r3
   151b8:	cmp	r3, #112	; 0x70
   151bc:	bhi	151ec <__assert_fail@plt+0x3c30>
   151c0:	movw	r6, #65304	; 0xff18
   151c4:	movt	r6, #1
   151c8:	add	r7, r6, r3
   151cc:	ldrsb	r7, [r7]
   151d0:	cmp	r7, r2
   151d4:	bne	151ec <__assert_fail@plt+0x3c30>
   151d8:	movw	r1, #65417	; 0xff89
   151dc:	ldr	r7, [sp, #212]	; 0xd4
   151e0:	movt	r1, #1
   151e4:	ldrb	r8, [r1, r3]
   151e8:	b	15200 <__assert_fail@plt+0x3c44>
   151ec:	movw	r2, #318	; 0x13e
   151f0:	ldr	r7, [sp, #212]	; 0xd4
   151f4:	movt	r2, #2
   151f8:	add	r1, r2, r1
   151fc:	ldrsb	r8, [r1]
   15200:	add	r9, r0, #1
   15204:	sub	r1, fp, #112	; 0x70
   15208:	cmp	r0, #17
   1520c:	add	r1, r1, r9, lsl #1
   15210:	strh	r8, [r1]
   15214:	ble	12bd4 <__assert_fail@plt+0x1618>
   15218:	b	164a8 <__assert_fail@plt+0x4eec>
   1521c:	mov	r1, sl
   15220:	ldr	r6, [r4, #156]	; 0x9c
   15224:	str	r2, [sp, #204]	; 0xcc
   15228:	vld1.64	{d16-d17}, [r1]!
   1522c:	cmp	r6, #0
   15230:	ldr	r0, [r1]
   15234:	str	r0, [sp, #80]	; 0x50
   15238:	beq	1527c <__assert_fail@plt+0x3cc0>
   1523c:	ldr	r2, [sp, #100]	; 0x64
   15240:	ldr	r2, [r2]
   15244:	cmp	r2, #0
   15248:	bne	1527c <__assert_fail@plt+0x3cc0>
   1524c:	ldrb	r2, [r4, #153]	; 0x99
   15250:	cmp	r2, #0
   15254:	ldr	r2, [sp, #204]	; 0xcc
   15258:	bne	1527c <__assert_fail@plt+0x3cc0>
   1525c:	ldr	r0, [sp, #80]	; 0x50
   15260:	ldr	r1, [r1, #4]
   15264:	cmp	r0, #2
   15268:	bgt	16104 <__assert_fail@plt+0x4b48>
   1526c:	ldr	r2, [r4, #172]	; 0xac
   15270:	cmp	r2, #0
   15274:	ldr	r2, [sp, #204]	; 0xcc
   15278:	bne	16104 <__assert_fail@plt+0x4b48>
   1527c:	str	r5, [sp, #180]	; 0xb4
   15280:	ldr	r5, [sp, #80]	; 0x50
   15284:	str	r7, [sp, #184]	; 0xb8
   15288:	str	r9, [sp, #192]	; 0xc0
   1528c:	str	r3, [sp, #200]	; 0xc8
   15290:	cmp	r5, #5
   15294:	blt	15534 <__assert_fail@plt+0x3f78>
   15298:	add	r0, r6, #1
   1529c:	vmov.32	r9, d17[1]
   152a0:	vmov.32	r7, d17[0]
   152a4:	mov	r2, #100	; 0x64
   152a8:	mov	r3, #0
   152ac:	mov	r6, #100	; 0x64
   152b0:	str	lr, [sp, #188]	; 0xbc
   152b4:	str	ip, [sp, #196]	; 0xc4
   152b8:	str	r0, [r4, #156]	; 0x9c
   152bc:	mov	r0, r7
   152c0:	mov	r1, r9
   152c4:	bl	1f040 <__assert_fail@plt+0xda84>
   152c8:	umull	r2, r3, r0, r6
   152cc:	mla	r3, r1, r6, r3
   152d0:	ldr	r6, [sp, #168]	; 0xa8
   152d4:	subs	r2, r7, r2
   152d8:	sbc	r3, r9, r3
   152dc:	strd	r2, [r6]
   152e0:	mov	r2, #100	; 0x64
   152e4:	mov	r3, #0
   152e8:	bl	1f040 <__assert_fail@plt+0xda84>
   152ec:	mov	r0, r2
   152f0:	ldr	r2, [sp, #172]	; 0xac
   152f4:	mov	r1, r3
   152f8:	mov	r3, #0
   152fc:	strd	r0, [r2]
   15300:	mov	r0, r7
   15304:	mov	r1, r9
   15308:	movw	r2, #10000	; 0x2710
   1530c:	bl	1f040 <__assert_fail@plt+0xda84>
   15310:	ldr	r2, [sp, #96]	; 0x60
   15314:	ldr	r3, [sp, #200]	; 0xc8
   15318:	ldr	lr, [sp, #188]	; 0xbc
   1531c:	ldr	ip, [sp, #196]	; 0xc4
   15320:	strd	r0, [r2]
   15324:	ldr	r0, [sp, #80]	; 0x50
   15328:	ldr	r2, [sp, #204]	; 0xcc
   1532c:	sub	r0, r0, #4
   15330:	str	r0, [r4, #48]	; 0x30
   15334:	b	1564c <__assert_fail@plt+0x4090>
   15338:	mov	r8, #0
   1533c:	mov	r2, #1
   15340:	mov	ip, #0
   15344:	mov	lr, #0
   15348:	mov	r3, #0
   1534c:	b	14ea0 <__assert_fail@plt+0x38e4>
   15350:	ldr	r1, [sp, #104]	; 0x68
   15354:	mov	r0, #0
   15358:	str	r0, [r1]
   1535c:	str	r0, [r1, #4]
   15360:	ldr	r0, [sl]
   15364:	str	r0, [r4, #16]
   15368:	b	1512c <__assert_fail@plt+0x3b70>
   1536c:	ldr	r1, [sp, #104]	; 0x68
   15370:	mov	r0, #0
   15374:	str	r0, [r1]
   15378:	str	r0, [r1, #4]
   1537c:	ldr	r0, [sl, #-56]	; 0xffffffc8
   15380:	str	r0, [r4, #16]
   15384:	b	1512c <__assert_fail@plt+0x3b70>
   15388:	str	r2, [sp, #204]	; 0xcc
   1538c:	ldrd	r0, [sl, #-168]	; 0xffffff58
   15390:	ldr	r2, [sp, #172]	; 0xac
   15394:	strd	r0, [r2]
   15398:	ldrd	r0, [sl, #-104]	; 0xffffff98
   1539c:	ldr	r2, [sp, #168]	; 0xa8
   153a0:	strd	r0, [r2]
   153a4:	mov	r0, sl
   153a8:	vld1.64	{d16-d17}, [r0]!
   153ac:	ldr	r2, [sp, #204]	; 0xcc
   153b0:	vldr	d18, [r0]
   153b4:	ldr	r0, [sp, #108]	; 0x6c
   153b8:	vst1.64	{d16-d17}, [r0]!
   153bc:	vstr	d18, [r0]
   153c0:	b	1512c <__assert_fail@plt+0x3b70>
   153c4:	str	r2, [sp, #204]	; 0xcc
   153c8:	ldrd	r0, [sl, #-104]	; 0xffffff98
   153cc:	ldr	r2, [sp, #168]	; 0xa8
   153d0:	str	r3, [sp, #200]	; 0xc8
   153d4:	strd	r0, [r2]
   153d8:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   153dc:	ldr	r2, [sp, #172]	; 0xac
   153e0:	strd	r0, [r2]
   153e4:	ldrd	r0, [sl, #8]
   153e8:	ldr	r2, [sp, #96]	; 0x60
   153ec:	rsbs	r0, r0, #0
   153f0:	rsc	r3, r1, #0
   153f4:	stm	r2, {r0, r3}
   153f8:	and	r0, r1, r3
   153fc:	cmp	r0, #0
   15400:	blt	164a0 <__assert_fail@plt+0x4ee4>
   15404:	ldr	r0, [sl, #16]
   15408:	ldr	r1, [sp, #100]	; 0x64
   1540c:	str	r0, [r1]
   15410:	b	15d98 <__assert_fail@plt+0x47dc>
   15414:	mov	r0, #1
   15418:	mov	r8, #0
   1541c:	mov	ip, #0
   15420:	mov	lr, #0
   15424:	mov	r3, #0
   15428:	mov	r2, #0
   1542c:	str	r0, [sp, #228]	; 0xe4
   15430:	mov	r0, #0
   15434:	str	r0, [sp, #236]	; 0xec
   15438:	mov	r0, #0
   1543c:	str	r0, [sp, #232]	; 0xe8
   15440:	mov	r0, #0
   15444:	str	r0, [sp, #224]	; 0xe0
   15448:	b	1510c <__assert_fail@plt+0x3b50>
   1544c:	mov	r0, #1
   15450:	mov	r8, #0
   15454:	mov	ip, #0
   15458:	mov	lr, #0
   1545c:	mov	r3, #0
   15460:	mov	r2, #0
   15464:	str	r0, [sp, #232]	; 0xe8
   15468:	mov	r0, #0
   1546c:	str	r0, [sp, #236]	; 0xec
   15470:	b	14f10 <__assert_fail@plt+0x3954>
   15474:	ldr	r6, [sl, #-48]	; 0xffffffd0
   15478:	ldr	r8, [sl, #-44]	; 0xffffffd4
   1547c:	cmn	r8, #1
   15480:	ble	155cc <__assert_fail@plt+0x4010>
   15484:	and	r0, r2, r3
   15488:	cmn	r0, #1
   1548c:	beq	155f4 <__assert_fail@plt+0x4038>
   15490:	mov	r0, #0
   15494:	mov	r1, #-2147483648	; 0x80000000
   15498:	mov	r5, r2
   1549c:	mov	r7, r3
   154a0:	bl	1f040 <__assert_fail@plt+0xda84>
   154a4:	subs	r0, r0, r6
   154a8:	mov	r3, r7
   154ac:	mov	r2, r5
   154b0:	sbcs	r0, r1, r8
   154b4:	bge	155f4 <__assert_fail@plt+0x4038>
   154b8:	b	164a0 <__assert_fail@plt+0x4ee4>
   154bc:	cmp	r0, #0
   154c0:	beq	15dd4 <__assert_fail@plt+0x4818>
   154c4:	movw	r1, #2343	; 0x927
   154c8:	mov	r0, #0
   154cc:	mov	r2, #5
   154d0:	str	lr, [sp, #188]	; 0xbc
   154d4:	str	ip, [sp, #196]	; 0xc4
   154d8:	mov	r9, r3
   154dc:	movt	r1, #2
   154e0:	bl	11328 <dcgettext@plt>
   154e4:	mov	r6, sl
   154e8:	ldr	r2, [r6, #-216]!	; 0xffffff28
   154ec:	ldr	r3, [r6, #4]
   154f0:	bl	16c20 <__assert_fail@plt+0x5664>
   154f4:	ldr	lr, [sp, #188]	; 0xbc
   154f8:	ldr	ip, [sp, #196]	; 0xc4
   154fc:	mov	r3, r9
   15500:	b	15dd8 <__assert_fail@plt+0x481c>
   15504:	ldr	r0, [r4, #172]	; 0xac
   15508:	vmov.32	r6, d17[1]
   1550c:	mov	r8, #0
   15510:	cmp	r9, #3
   15514:	add	r0, r0, #1
   15518:	str	r0, [r4, #172]	; 0xac
   1551c:	vmov.32	r0, d17[0]
   15520:	bge	15988 <__assert_fail@plt+0x43cc>
   15524:	mov	r1, r6
   15528:	mov	r2, #0
   1552c:	mov	r3, #0
   15530:	b	159b0 <__assert_fail@plt+0x43f4>
   15534:	ldr	r0, [r4, #172]	; 0xac
   15538:	str	r8, [sp, #176]	; 0xb0
   1553c:	vmov.32	r7, d17[1]
   15540:	vmov.32	r8, d17[0]
   15544:	mov	r9, #0
   15548:	cmp	r5, #3
   1554c:	add	r0, r0, #1
   15550:	str	r0, [r4, #172]	; 0xac
   15554:	bge	15d30 <__assert_fail@plt+0x4774>
   15558:	mov	r0, r8
   1555c:	mov	r1, r7
   15560:	mov	r2, #0
   15564:	mov	r3, #0
   15568:	b	15d68 <__assert_fail@plt+0x47ac>
   1556c:	and	r0, r5, r7
   15570:	mvn	r6, #0
   15574:	mvn	r8, #0
   15578:	cmn	r0, #1
   1557c:	beq	155f4 <__assert_fail@plt+0x4038>
   15580:	mov	r8, r2
   15584:	mov	r6, r3
   15588:	mov	r0, #0
   1558c:	mov	r1, #-2147483648	; 0x80000000
   15590:	mov	r2, r5
   15594:	mov	r3, r7
   15598:	bl	1f040 <__assert_fail@plt+0xda84>
   1559c:	subs	r0, r0, r8
   155a0:	mov	r2, r8
   155a4:	mov	r3, r6
   155a8:	mov	r8, r7
   155ac:	sbcs	r0, r1, r6
   155b0:	mov	r6, r5
   155b4:	bge	155f4 <__assert_fail@plt+0x4038>
   155b8:	b	164a0 <__assert_fail@plt+0x4ee4>
   155bc:	ldr	r6, [sl, #-56]	; 0xffffffc8
   155c0:	ldr	r8, [sl, #-52]	; 0xffffffcc
   155c4:	cmn	r8, #1
   155c8:	bgt	15484 <__assert_fail@plt+0x3ec8>
   155cc:	mvn	r0, #0
   155d0:	mvn	r1, #-2147483648	; 0x80000000
   155d4:	mov	r5, r2
   155d8:	mov	r7, r3
   155dc:	bl	1f040 <__assert_fail@plt+0xda84>
   155e0:	subs	r0, r6, r0
   155e4:	mov	r3, r7
   155e8:	mov	r2, r5
   155ec:	sbcs	r0, r8, r1
   155f0:	blt	164a0 <__assert_fail@plt+0x4ee4>
   155f4:	umull	lr, r0, r6, r2
   155f8:	mov	ip, #0
   155fc:	mla	r0, r6, r3, r0
   15600:	mla	r3, r8, r2, r0
   15604:	mov	r0, #0
   15608:	mov	r8, #0
   1560c:	mov	r2, #0
   15610:	str	r0, [sp, #236]	; 0xec
   15614:	mov	r0, #0
   15618:	str	r0, [sp, #232]	; 0xe8
   1561c:	mov	r0, #0
   15620:	str	r0, [sp, #224]	; 0xe0
   15624:	mov	r0, #0
   15628:	str	r0, [sp, #228]	; 0xe4
   1562c:	mov	r0, #0
   15630:	str	r0, [sp, #220]	; 0xdc
   15634:	mov	r0, #0
   15638:	str	r0, [sp, #216]	; 0xd8
   1563c:	mov	r0, #0
   15640:	str	r0, [sp, #244]	; 0xf4
   15644:	mov	r0, #0
   15648:	str	r0, [sp, #240]	; 0xf0
   1564c:	ldr	r9, [sp, #192]	; 0xc0
   15650:	ldr	r7, [sp, #184]	; 0xb8
   15654:	ldr	r5, [sp, #180]	; 0xb4
   15658:	b	1512c <__assert_fail@plt+0x3b70>
   1565c:	sub	r3, r7, r0
   15660:	str	r0, [sp, #52]	; 0x34
   15664:	ldr	r0, [sp, #112]	; 0x70
   15668:	str	r3, [r4, #144]	; 0x90
   1566c:	ldm	r0, {r3, r7}
   15670:	subs	r1, r3, r1
   15674:	sbc	r3, r7, r9
   15678:	stm	r0, {r1, r3}
   1567c:	ldr	r2, [sp, #116]	; 0x74
   15680:	ldm	r2, {r0, r9}
   15684:	subs	r0, r0, r8
   15688:	sbc	r1, r9, r5
   1568c:	str	r1, [sp, #16]
   15690:	strd	r0, [r2]
   15694:	ldr	r2, [sp, #120]	; 0x78
   15698:	ldrd	r0, [r2]
   1569c:	subs	r0, r0, ip
   156a0:	str	r1, [sp, #20]
   156a4:	sbc	r1, r1, lr
   156a8:	str	r1, [sp, #24]
   156ac:	strd	r0, [r2]
   156b0:	ldr	r2, [sp, #124]	; 0x7c
   156b4:	ldrd	r0, [r2]
   156b8:	subs	r0, r0, r6
   156bc:	ldr	r6, [sp, #80]	; 0x50
   156c0:	str	r1, [sp, #28]
   156c4:	sbc	r1, r1, r6
   156c8:	str	r1, [sp, #36]	; 0x24
   156cc:	strd	r0, [r2]
   156d0:	ldr	r2, [sp, #128]	; 0x80
   156d4:	ldr	r6, [sp, #60]	; 0x3c
   156d8:	ldr	ip, [sp, #72]	; 0x48
   156dc:	ldrd	r0, [r2]
   156e0:	subs	r0, r0, r6
   156e4:	str	r1, [sp, #44]	; 0x2c
   156e8:	sbc	r1, r1, ip
   156ec:	str	r1, [sp, #48]	; 0x30
   156f0:	strd	r0, [r2]
   156f4:	ldr	r2, [sp, #132]	; 0x84
   156f8:	ldr	r6, [sp, #64]	; 0x40
   156fc:	ldrd	r0, [r2]
   15700:	subs	r8, r0, r6
   15704:	ldr	r0, [sp, #76]	; 0x4c
   15708:	str	r1, [sp, #60]	; 0x3c
   1570c:	sbc	r6, r1, r0
   15710:	mov	r1, #0
   15714:	str	r6, [sp, #64]	; 0x40
   15718:	str	r8, [r2]
   1571c:	str	r6, [r2, #4]
   15720:	mov	r2, #0
   15724:	mov	r6, #0
   15728:	ldr	r0, [sp, #56]	; 0x38
   1572c:	cmn	r0, #1
   15730:	mov	r0, #0
   15734:	movwgt	r0, #1
   15738:	cmn	r7, #1
   1573c:	ldr	r7, [sp, #76]	; 0x4c
   15740:	movwgt	r2, #1
   15744:	subs	r0, r2, r0
   15748:	movwne	r0, #1
   1574c:	cmn	r3, #1
   15750:	ldr	r3, [sp, #44]	; 0x2c
   15754:	str	r0, [sp, #56]	; 0x38
   15758:	mov	r0, #0
   1575c:	movwgt	r0, #1
   15760:	subs	r0, r2, r0
   15764:	ldr	r2, [sp, #36]	; 0x24
   15768:	movwne	r0, #1
   1576c:	cmn	r5, #1
   15770:	mov	r5, #0
   15774:	str	r0, [sp, #12]
   15778:	mov	r0, #0
   1577c:	movwgt	r0, #1
   15780:	cmn	r9, #1
   15784:	movwgt	r1, #1
   15788:	subs	r0, r1, r0
   1578c:	movwne	r0, #1
   15790:	str	r0, [sp, #32]
   15794:	ldr	r0, [sp, #16]
   15798:	cmn	r0, #1
   1579c:	mov	r0, #0
   157a0:	movwgt	r0, #1
   157a4:	subs	r0, r1, r0
   157a8:	ldr	r1, [sp, #20]
   157ac:	movwne	r0, #1
   157b0:	cmn	lr, #1
   157b4:	str	r0, [sp, #16]
   157b8:	mov	r0, #0
   157bc:	movwgt	r0, #1
   157c0:	cmn	r1, #1
   157c4:	mov	r1, #0
   157c8:	movwgt	r1, #1
   157cc:	subs	r8, r1, r0
   157d0:	ldr	r0, [sp, #24]
   157d4:	movwne	r8, #1
   157d8:	cmn	r0, #1
   157dc:	mov	r0, #0
   157e0:	movwgt	r0, #1
   157e4:	subs	r9, r1, r0
   157e8:	ldr	r0, [sp, #80]	; 0x50
   157ec:	ldr	r1, [sp, #28]
   157f0:	movwne	r9, #1
   157f4:	cmn	r0, #1
   157f8:	mov	r0, #0
   157fc:	movwgt	r0, #1
   15800:	cmn	r1, #1
   15804:	mov	r1, #0
   15808:	movwgt	r1, #1
   1580c:	subs	r0, r1, r0
   15810:	movwne	r0, #1
   15814:	cmn	r2, #1
   15818:	mov	r2, #0
   1581c:	movwgt	r2, #1
   15820:	subs	r2, r1, r2
   15824:	mov	r1, #0
   15828:	movwne	r2, #1
   1582c:	cmn	ip, #1
   15830:	movwgt	r1, #1
   15834:	cmn	r3, #1
   15838:	movwgt	r6, #1
   1583c:	subs	r3, r6, r1
   15840:	ldr	r1, [sp, #48]	; 0x30
   15844:	movwne	r3, #1
   15848:	cmn	r1, #1
   1584c:	mov	r1, #0
   15850:	movwgt	r1, #1
   15854:	subs	r1, r6, r1
   15858:	mov	r6, #0
   1585c:	movwne	r1, #1
   15860:	cmn	r7, #1
   15864:	ldr	r7, [sp, #60]	; 0x3c
   15868:	movwgt	r6, #1
   1586c:	cmn	r7, #1
   15870:	ldr	r7, [sp, #64]	; 0x40
   15874:	movwgt	r5, #1
   15878:	subs	ip, r5, r6
   1587c:	ldr	r6, [sp, #52]	; 0x34
   15880:	movwne	ip, #1
   15884:	cmn	r7, #1
   15888:	mov	r7, #0
   1588c:	movwgt	r7, #1
   15890:	subs	lr, r5, r7
   15894:	ldr	r5, [sp, #68]	; 0x44
   15898:	movwne	lr, #1
   1589c:	cmp	r5, r6
   158a0:	bvs	164a0 <__assert_fail@plt+0x4ee4>
   158a4:	ldr	r5, [sp, #56]	; 0x38
   158a8:	ldr	r6, [sp, #12]
   158ac:	ands	r5, r5, r6
   158b0:	bne	164a0 <__assert_fail@plt+0x4ee4>
   158b4:	ldr	r5, [sp, #32]
   158b8:	ldr	r6, [sp, #16]
   158bc:	mov	r7, r8
   158c0:	ldr	r8, [sp, #176]	; 0xb0
   158c4:	ands	r5, r5, r6
   158c8:	bne	164a0 <__assert_fail@plt+0x4ee4>
   158cc:	ands	r5, r7, r9
   158d0:	bne	164a0 <__assert_fail@plt+0x4ee4>
   158d4:	ldr	r9, [sp, #192]	; 0xc0
   158d8:	ldr	r7, [sp, #184]	; 0xb8
   158dc:	ldr	r5, [sp, #180]	; 0xb4
   158e0:	ands	r0, r0, r2
   158e4:	bne	164a0 <__assert_fail@plt+0x4ee4>
   158e8:	ands	r0, r3, r1
   158ec:	bne	164a0 <__assert_fail@plt+0x4ee4>
   158f0:	ands	r0, ip, lr
   158f4:	b	144f8 <__assert_fail@plt+0x2f3c>
   158f8:	mov	r0, r9
   158fc:	mov	r1, r2
   15900:	mov	r6, r2
   15904:	mov	r2, #100	; 0x64
   15908:	mov	r3, #0
   1590c:	bl	1f040 <__assert_fail@plt+0xda84>
   15910:	umull	r2, r3, r0, r8
   15914:	mla	r3, r1, r8, r3
   15918:	subs	r2, r9, r2
   1591c:	rsb	r1, r1, r1, lsl #4
   15920:	sbc	r3, r6, r3
   15924:	mov	r6, #60	; 0x3c
   15928:	umull	r0, r6, r0, r6
   1592c:	adds	r0, r0, r2
   15930:	add	r1, r6, r1, lsl #2
   15934:	mov	r2, #1
   15938:	adc	r6, r1, r3
   1593c:	b	15efc <__assert_fail@plt+0x4940>
   15940:	mov	r0, r9
   15944:	mov	r1, r2
   15948:	mov	r6, r2
   1594c:	mov	r2, #100	; 0x64
   15950:	mov	r3, #0
   15954:	bl	1f040 <__assert_fail@plt+0xda84>
   15958:	umull	r2, r3, r0, r8
   1595c:	mla	r3, r1, r8, r3
   15960:	subs	r2, r9, r2
   15964:	rsb	r1, r1, r1, lsl #4
   15968:	sbc	r3, r6, r3
   1596c:	mov	r6, #60	; 0x3c
   15970:	umull	r0, r6, r0, r6
   15974:	adds	r0, r0, r2
   15978:	add	r1, r6, r1, lsl #2
   1597c:	mov	r2, #1
   15980:	adc	r6, r1, r3
   15984:	b	16098 <__assert_fail@plt+0x4adc>
   15988:	mov	r1, r6
   1598c:	mov	r2, #100	; 0x64
   15990:	mov	r3, #0
   15994:	mov	r9, r0
   15998:	bl	1f040 <__assert_fail@plt+0xda84>
   1599c:	mov	ip, #100	; 0x64
   159a0:	umull	r2, r3, r0, ip
   159a4:	mla	r3, r1, ip, r3
   159a8:	subs	r2, r9, r2
   159ac:	sbc	r3, r6, r3
   159b0:	ldr	r6, [sp, #148]	; 0x94
   159b4:	strd	r0, [r6]
   159b8:	ldr	r0, [sp, #152]	; 0x98
   159bc:	strd	r2, [r0]
   159c0:	mov	r0, #2
   159c4:	str	r8, [r4, #88]	; 0x58
   159c8:	str	r8, [r4, #92]	; 0x5c
   159cc:	str	r0, [r4, #28]
   159d0:	ldr	r1, [r4, #144]	; 0x90
   159d4:	ldr	r0, [sl, #48]	; 0x30
   159d8:	ldr	lr, [sl, #12]
   159dc:	ldr	r6, [sl, #20]
   159e0:	ldr	r3, [sl, #28]
   159e4:	ldr	r2, [sl, #44]	; 0x2c
   159e8:	ldr	ip, [sl, #24]
   159ec:	ldr	r9, [sl, #32]
   159f0:	ldr	r8, [sl, #40]	; 0x28
   159f4:	add	r0, r1, r0
   159f8:	str	r1, [sp, #76]	; 0x4c
   159fc:	ldr	r1, [sl]
   15a00:	str	lr, [sp, #60]	; 0x3c
   15a04:	str	r6, [sp, #56]	; 0x38
   15a08:	str	r3, [sp, #44]	; 0x2c
   15a0c:	str	r2, [sp, #28]
   15a10:	str	r0, [sp, #72]	; 0x48
   15a14:	str	r1, [sp, #68]	; 0x44
   15a18:	ldr	r1, [sl, #4]
   15a1c:	str	r1, [sp, #80]	; 0x50
   15a20:	ldr	r1, [sl, #8]
   15a24:	str	r1, [sp, #64]	; 0x40
   15a28:	ldr	r1, [sl, #16]
   15a2c:	str	r1, [sp, #52]	; 0x34
   15a30:	ldr	r1, [sl, #36]	; 0x24
   15a34:	str	r0, [r4, #144]	; 0x90
   15a38:	ldr	r0, [sp, #112]	; 0x70
   15a3c:	str	r1, [sp, #36]	; 0x24
   15a40:	ldm	r0, {r5, r7}
   15a44:	adds	r8, r5, r8
   15a48:	adc	r5, r7, r2
   15a4c:	str	r8, [r0]
   15a50:	str	r5, [r0, #4]
   15a54:	ldr	r0, [sp, #116]	; 0x74
   15a58:	ldm	r0, {r2, r8}
   15a5c:	adds	r2, r2, r9
   15a60:	adc	r9, r8, r1
   15a64:	stm	r0, {r2, r9}
   15a68:	ldr	r0, [sp, #120]	; 0x78
   15a6c:	ldr	r2, [r0]
   15a70:	ldr	r1, [r0, #4]
   15a74:	adds	ip, r2, ip
   15a78:	str	r1, [sp, #32]
   15a7c:	adc	r2, r1, r3
   15a80:	str	ip, [r0]
   15a84:	str	r2, [r0, #4]
   15a88:	ldr	r0, [sp, #124]	; 0x7c
   15a8c:	ldr	ip, [r0]
   15a90:	ldr	r1, [r0, #4]
   15a94:	ldr	r3, [sp, #52]	; 0x34
   15a98:	adds	ip, ip, r3
   15a9c:	str	r1, [sp, #40]	; 0x28
   15aa0:	adc	r1, r1, r6
   15aa4:	mov	r6, #0
   15aa8:	str	r1, [sp, #48]	; 0x30
   15aac:	str	ip, [r0]
   15ab0:	str	r1, [r0, #4]
   15ab4:	ldr	ip, [sp, #128]	; 0x80
   15ab8:	ldm	ip, {r0, r3}
   15abc:	ldr	r1, [sp, #64]	; 0x40
   15ac0:	adds	r0, r0, r1
   15ac4:	str	r3, [sp, #52]	; 0x34
   15ac8:	adc	lr, r3, lr
   15acc:	stm	ip, {r0, lr}
   15ad0:	ldr	ip, [sp, #132]	; 0x84
   15ad4:	ldm	ip, {r0, r3}
   15ad8:	ldr	r1, [sp, #68]	; 0x44
   15adc:	adds	r0, r0, r1
   15ae0:	ldr	r1, [sp, #80]	; 0x50
   15ae4:	str	r3, [sp, #64]	; 0x40
   15ae8:	adc	r3, r3, r1
   15aec:	cmn	r7, #1
   15af0:	mov	r1, #0
   15af4:	mov	r7, #0
   15af8:	str	r3, [sp, #68]	; 0x44
   15afc:	stm	ip, {r0, r3}
   15b00:	mov	r3, #0
   15b04:	mov	r0, #0
   15b08:	mov	ip, #0
   15b0c:	movwgt	r3, #1
   15b10:	cmn	r5, #1
   15b14:	mov	r5, #0
   15b18:	movwgt	r0, #1
   15b1c:	str	r3, [sp, #24]
   15b20:	subs	r0, r3, r0
   15b24:	mov	r3, #0
   15b28:	movwne	r0, #1
   15b2c:	str	r0, [sp, #20]
   15b30:	ldr	r0, [sp, #28]
   15b34:	cmn	r0, #1
   15b38:	mov	r0, #0
   15b3c:	movwgt	r0, #1
   15b40:	cmn	r8, #1
   15b44:	movwgt	r1, #1
   15b48:	str	r0, [sp, #28]
   15b4c:	cmn	r9, #1
   15b50:	mov	r0, #0
   15b54:	mov	r9, #0
   15b58:	movwgt	r0, #1
   15b5c:	str	r1, [sp, #16]
   15b60:	subs	r0, r1, r0
   15b64:	mov	r1, #0
   15b68:	movwne	r0, #1
   15b6c:	str	r0, [sp, #12]
   15b70:	ldr	r0, [sp, #36]	; 0x24
   15b74:	cmn	r0, #1
   15b78:	mov	r0, #0
   15b7c:	movwgt	r0, #1
   15b80:	str	r0, [sp, #36]	; 0x24
   15b84:	ldr	r0, [sp, #32]
   15b88:	cmn	r0, #1
   15b8c:	mov	r0, #0
   15b90:	movwgt	r1, #1
   15b94:	cmn	r2, #1
   15b98:	mov	r2, #0
   15b9c:	movwgt	r0, #1
   15ba0:	str	r1, [sp, #32]
   15ba4:	subs	r0, r1, r0
   15ba8:	mov	r1, #0
   15bac:	movwne	r0, #1
   15bb0:	str	r0, [sp, #8]
   15bb4:	ldr	r0, [sp, #44]	; 0x2c
   15bb8:	cmn	r0, #1
   15bbc:	ldr	r0, [sp, #40]	; 0x28
   15bc0:	movwgt	r7, #1
   15bc4:	cmn	r0, #1
   15bc8:	ldr	r0, [sp, #48]	; 0x30
   15bcc:	movwgt	r9, #1
   15bd0:	cmn	r0, #1
   15bd4:	movwgt	r1, #1
   15bd8:	subs	r0, r9, r1
   15bdc:	mov	r1, #0
   15be0:	movwne	r0, #1
   15be4:	str	r0, [sp, #48]	; 0x30
   15be8:	ldr	r0, [sp, #56]	; 0x38
   15bec:	cmn	r0, #1
   15bf0:	ldr	r0, [sp, #52]	; 0x34
   15bf4:	movwgt	ip, #1
   15bf8:	cmn	r0, #1
   15bfc:	ldr	r0, [sp, #60]	; 0x3c
   15c00:	movwgt	r2, #1
   15c04:	cmn	lr, #1
   15c08:	movwgt	r1, #1
   15c0c:	subs	r8, r2, r1
   15c10:	mov	r1, #0
   15c14:	movwne	r8, #1
   15c18:	cmn	r0, #1
   15c1c:	ldr	r0, [sp, #64]	; 0x40
   15c20:	movwgt	r3, #1
   15c24:	cmn	r0, #1
   15c28:	ldr	r0, [sp, #68]	; 0x44
   15c2c:	movwgt	r5, #1
   15c30:	cmn	r0, #1
   15c34:	ldr	r0, [sp, #80]	; 0x50
   15c38:	movwgt	r1, #1
   15c3c:	subs	r1, r5, r1
   15c40:	movwne	r1, #1
   15c44:	cmn	r0, #1
   15c48:	ldr	r0, [sp, #76]	; 0x4c
   15c4c:	movwgt	r6, #1
   15c50:	str	r6, [sp, #80]	; 0x50
   15c54:	ldr	r6, [sp, #72]	; 0x48
   15c58:	cmp	r6, r0
   15c5c:	bvs	164a0 <__assert_fail@plt+0x4ee4>
   15c60:	ldr	r0, [sp, #24]
   15c64:	ldr	r6, [sp, #28]
   15c68:	sub	lr, r0, r6
   15c6c:	ldr	r6, [sp, #20]
   15c70:	clz	r0, lr
   15c74:	lsr	r0, r0, #5
   15c78:	ands	r0, r0, r6
   15c7c:	bne	164a0 <__assert_fail@plt+0x4ee4>
   15c80:	ldr	r0, [sp, #16]
   15c84:	ldr	r6, [sp, #36]	; 0x24
   15c88:	sub	r0, r0, r6
   15c8c:	ldr	r6, [sp, #12]
   15c90:	clz	r0, r0
   15c94:	lsr	r0, r0, #5
   15c98:	ands	r0, r0, r6
   15c9c:	bne	164a0 <__assert_fail@plt+0x4ee4>
   15ca0:	ldr	r0, [sp, #32]
   15ca4:	ldr	lr, [sp, #188]	; 0xbc
   15ca8:	sub	r0, r0, r7
   15cac:	ldr	r7, [sp, #8]
   15cb0:	clz	r0, r0
   15cb4:	lsr	r0, r0, #5
   15cb8:	ands	r0, r0, r7
   15cbc:	bne	164a0 <__assert_fail@plt+0x4ee4>
   15cc0:	ldr	r7, [sp, #48]	; 0x30
   15cc4:	sub	r0, r9, ip
   15cc8:	clz	r0, r0
   15ccc:	lsr	r0, r0, #5
   15cd0:	ands	r0, r0, r7
   15cd4:	bne	164a0 <__assert_fail@plt+0x4ee4>
   15cd8:	sub	r0, r2, r3
   15cdc:	clz	r0, r0
   15ce0:	lsr	r0, r0, #5
   15ce4:	ands	r0, r0, r8
   15ce8:	bne	164a0 <__assert_fail@plt+0x4ee4>
   15cec:	ldr	r0, [sp, #80]	; 0x50
   15cf0:	ldr	r9, [sp, #192]	; 0xc0
   15cf4:	ldr	r7, [sp, #184]	; 0xb8
   15cf8:	ldr	r8, [sp, #176]	; 0xb0
   15cfc:	sub	r0, r5, r0
   15d00:	ldr	r5, [sp, #180]	; 0xb4
   15d04:	clz	r0, r0
   15d08:	lsr	r0, r0, #5
   15d0c:	ands	r0, r0, r1
   15d10:	ldr	ip, [sp, #196]	; 0xc4
   15d14:	ldr	r3, [sp, #200]	; 0xc8
   15d18:	ldr	r2, [sp, #204]	; 0xcc
   15d1c:	mov	r0, #1
   15d20:	bne	164ac <__assert_fail@plt+0x4ef0>
   15d24:	mov	r0, #1
   15d28:	strb	r0, [r4, #153]	; 0x99
   15d2c:	b	1512c <__assert_fail@plt+0x3b70>
   15d30:	mov	r0, r8
   15d34:	mov	r1, r7
   15d38:	mov	r2, #100	; 0x64
   15d3c:	mov	r3, #0
   15d40:	mov	r6, lr
   15d44:	mov	r5, ip
   15d48:	bl	1f040 <__assert_fail@plt+0xda84>
   15d4c:	mov	ip, r5
   15d50:	mov	r5, #100	; 0x64
   15d54:	mov	lr, r6
   15d58:	umull	r2, r3, r0, r5
   15d5c:	mla	r3, r1, r5, r3
   15d60:	subs	r2, r8, r2
   15d64:	sbc	r3, r7, r3
   15d68:	ldr	r6, [sp, #148]	; 0x94
   15d6c:	strd	r0, [r6]
   15d70:	ldr	r0, [sp, #152]	; 0x98
   15d74:	strd	r2, [r0]
   15d78:	str	r9, [r4, #88]	; 0x58
   15d7c:	str	r9, [r4, #92]	; 0x5c
   15d80:	mov	r0, #2
   15d84:	ldr	r9, [sp, #192]	; 0xc0
   15d88:	ldr	r7, [sp, #184]	; 0xb8
   15d8c:	ldr	r5, [sp, #180]	; 0xb4
   15d90:	ldr	r8, [sp, #176]	; 0xb0
   15d94:	str	r0, [r4, #28]
   15d98:	ldr	r3, [sp, #200]	; 0xc8
   15d9c:	ldr	r2, [sp, #204]	; 0xcc
   15da0:	b	1512c <__assert_fail@plt+0x3b70>
   15da4:	and	r0, r9, r2
   15da8:	mov	r5, r9
   15dac:	cmn	r0, #1
   15db0:	bne	15e18 <__assert_fail@plt+0x485c>
   15db4:	mov	r3, #0
   15db8:	b	15e4c <__assert_fail@plt+0x4890>
   15dbc:	and	r0, r9, r2
   15dc0:	mov	r5, r9
   15dc4:	cmn	r0, #1
   15dc8:	bne	15fb0 <__assert_fail@plt+0x49f4>
   15dcc:	mov	r3, #0
   15dd0:	b	15fe4 <__assert_fail@plt+0x4a28>
   15dd4:	sub	r6, sl, #216	; 0xd8
   15dd8:	ldrd	r0, [r6]
   15ddc:	ldr	r2, [sp, #172]	; 0xac
   15de0:	strd	r0, [r2]
   15de4:	ldrd	r0, [sl, #-104]	; 0xffffff98
   15de8:	ldr	r2, [sp, #168]	; 0xa8
   15dec:	strd	r0, [r2]
   15df0:	mov	r0, sl
   15df4:	vld1.64	{d16-d17}, [r0]!
   15df8:	ldr	r9, [sp, #192]	; 0xc0
   15dfc:	vldr	d18, [r0]
   15e00:	ldr	r0, [sp, #108]	; 0x6c
   15e04:	vst1.64	{d16-d17}, [r0]!
   15e08:	vstr	d18, [r0]
   15e0c:	ldr	r8, [sp, #176]	; 0xb0
   15e10:	ldr	r2, [sp, #204]	; 0xcc
   15e14:	b	1512c <__assert_fail@plt+0x3b70>
   15e18:	mov	r8, r2
   15e1c:	mov	r0, #0
   15e20:	mov	r1, #-2147483648	; 0x80000000
   15e24:	mov	r2, r5
   15e28:	mov	r9, ip
   15e2c:	mov	r3, r8
   15e30:	bl	1f040 <__assert_fail@plt+0xda84>
   15e34:	subs	r0, r0, #60	; 0x3c
   15e38:	mov	r3, #1
   15e3c:	mov	ip, r9
   15e40:	mov	r2, r8
   15e44:	sbcs	r0, r1, #0
   15e48:	movge	r3, #0
   15e4c:	mov	r0, #60	; 0x3c
   15e50:	str	r3, [sp, #72]	; 0x48
   15e54:	rsb	r3, r2, r2, lsl #4
   15e58:	mov	r2, #0
   15e5c:	umull	r7, r1, r5, r0
   15e60:	add	r5, r1, r3, lsl #2
   15e64:	adds	r0, r7, ip
   15e68:	mov	r1, #0
   15e6c:	mov	r3, #0
   15e70:	adc	r8, r5, r6
   15e74:	str	r0, [sp, #76]	; 0x4c
   15e78:	mov	r0, ip
   15e7c:	cmn	r8, #1
   15e80:	movwgt	r1, #1
   15e84:	cmn	r5, #1
   15e88:	movwgt	r3, #1
   15e8c:	subs	r9, r3, r1
   15e90:	mov	r1, #0
   15e94:	movwne	r9, #1
   15e98:	cmn	r6, #1
   15e9c:	movwgt	r1, #1
   15ea0:	subs	r0, r7, r0
   15ea4:	ldr	r7, [sp, #184]	; 0xb8
   15ea8:	sbc	r6, r5, r6
   15eac:	sub	ip, r3, r1
   15eb0:	ldr	r5, [sp, #180]	; 0xb4
   15eb4:	cmn	r6, #1
   15eb8:	clz	lr, ip
   15ebc:	movwgt	r2, #1
   15ec0:	lsr	lr, lr, #5
   15ec4:	subs	r2, r3, r2
   15ec8:	movwne	r2, #1
   15ecc:	cmp	r3, r1
   15ed0:	movwne	ip, #1
   15ed4:	and	r1, ip, r2
   15ed8:	ldr	r2, [sp, #80]	; 0x50
   15edc:	ands	r2, r2, #1
   15ee0:	ldr	r2, [sp, #72]	; 0x48
   15ee4:	andeq	r1, lr, r9
   15ee8:	moveq	r6, r8
   15eec:	orr	r1, r2, r1
   15ef0:	eor	r2, r1, #1
   15ef4:	ldr	r1, [sp, #76]	; 0x4c
   15ef8:	moveq	r0, r1
   15efc:	adds	r1, r0, #1440	; 0x5a0
   15f00:	adc	r3, r6, #0
   15f04:	cmp	r2, #0
   15f08:	beq	164a0 <__assert_fail@plt+0x4ee4>
   15f0c:	rsbs	r1, r1, #2880	; 0xb40
   15f10:	rscs	r1, r3, #0
   15f14:	bcc	164a0 <__assert_fail@plt+0x4ee4>
   15f18:	rsb	r0, r0, r0, lsl #4
   15f1c:	mov	r3, #0
   15f20:	mov	r2, #0
   15f24:	lsl	r1, r0, #2
   15f28:	str	r1, [r4, #24]
   15f2c:	sbfx	r1, r0, #29, #1
   15f30:	ldr	r6, [sl, #-112]	; 0xffffff90
   15f34:	ldr	ip, [sl, #-108]	; 0xffffff94
   15f38:	cmn	r1, #1
   15f3c:	movwgt	r3, #1
   15f40:	adds	r0, r6, r0, lsl #2
   15f44:	mov	r6, #0
   15f48:	adc	r1, r1, ip
   15f4c:	str	r0, [r4, #24]
   15f50:	cmn	r1, #1
   15f54:	movwgt	r6, #1
   15f58:	subs	r6, r3, r6
   15f5c:	movwne	r6, #1
   15f60:	cmn	ip, #1
   15f64:	movwgt	r2, #1
   15f68:	sub	r2, r3, r2
   15f6c:	clz	r2, r2
   15f70:	lsr	r2, r2, #5
   15f74:	tst	r2, r6
   15f78:	bne	164a0 <__assert_fail@plt+0x4ee4>
   15f7c:	asr	r2, r0, #31
   15f80:	ldr	r9, [sp, #192]	; 0xc0
   15f84:	ldr	r8, [sp, #176]	; 0xb0
   15f88:	ldr	lr, [sp, #188]	; 0xbc
   15f8c:	ldr	ip, [sp, #196]	; 0xc4
   15f90:	ldr	r3, [sp, #200]	; 0xc8
   15f94:	eor	r0, r0, r0
   15f98:	eor	r1, r1, r2
   15f9c:	ldr	r2, [sp, #204]	; 0xcc
   15fa0:	orrs	r0, r0, r1
   15fa4:	mov	r0, #1
   15fa8:	beq	1512c <__assert_fail@plt+0x3b70>
   15fac:	b	164ac <__assert_fail@plt+0x4ef0>
   15fb0:	mov	r8, r2
   15fb4:	mov	r0, #0
   15fb8:	mov	r1, #-2147483648	; 0x80000000
   15fbc:	mov	r2, r5
   15fc0:	mov	r9, ip
   15fc4:	mov	r3, r8
   15fc8:	bl	1f040 <__assert_fail@plt+0xda84>
   15fcc:	subs	r0, r0, #60	; 0x3c
   15fd0:	mov	r3, #1
   15fd4:	mov	ip, r9
   15fd8:	mov	r2, r8
   15fdc:	sbcs	r0, r1, #0
   15fe0:	movge	r3, #0
   15fe4:	mov	r0, #60	; 0x3c
   15fe8:	str	r3, [sp, #72]	; 0x48
   15fec:	rsb	r3, r2, r2, lsl #4
   15ff0:	mov	r2, #0
   15ff4:	umull	r7, r1, r5, r0
   15ff8:	add	r5, r1, r3, lsl #2
   15ffc:	adds	r0, r7, ip
   16000:	mov	r1, #0
   16004:	mov	r3, #0
   16008:	adc	r8, r5, r6
   1600c:	str	r0, [sp, #76]	; 0x4c
   16010:	mov	r0, ip
   16014:	cmn	r8, #1
   16018:	movwgt	r1, #1
   1601c:	cmn	r5, #1
   16020:	movwgt	r3, #1
   16024:	subs	r9, r3, r1
   16028:	mov	r1, #0
   1602c:	movwne	r9, #1
   16030:	cmn	r6, #1
   16034:	movwgt	r1, #1
   16038:	subs	r7, r7, r0
   1603c:	ldr	r0, [sp, #80]	; 0x50
   16040:	sbc	r6, r5, r6
   16044:	sub	ip, r3, r1
   16048:	ldr	r5, [sp, #180]	; 0xb4
   1604c:	cmn	r6, #1
   16050:	clz	lr, ip
   16054:	movwgt	r2, #1
   16058:	lsr	lr, lr, #5
   1605c:	subs	r2, r3, r2
   16060:	movwne	r2, #1
   16064:	cmp	r3, r1
   16068:	movwne	ip, #1
   1606c:	and	r1, ip, r2
   16070:	ands	r2, r0, #1
   16074:	mov	r0, r7
   16078:	ldr	r7, [sp, #184]	; 0xb8
   1607c:	ldr	r2, [sp, #72]	; 0x48
   16080:	andeq	r1, lr, r9
   16084:	moveq	r6, r8
   16088:	orr	r1, r2, r1
   1608c:	eor	r2, r1, #1
   16090:	ldr	r1, [sp, #76]	; 0x4c
   16094:	moveq	r0, r1
   16098:	ldr	r9, [sp, #192]	; 0xc0
   1609c:	adds	r1, r0, #1440	; 0x5a0
   160a0:	adc	r3, r6, #0
   160a4:	cmp	r2, #0
   160a8:	beq	164a0 <__assert_fail@plt+0x4ee4>
   160ac:	rsbs	r1, r1, #2880	; 0xb40
   160b0:	ldr	r8, [sp, #176]	; 0xb0
   160b4:	ldr	lr, [sp, #188]	; 0xbc
   160b8:	ldr	ip, [sp, #196]	; 0xc4
   160bc:	ldr	r2, [sp, #204]	; 0xcc
   160c0:	mov	r6, r0
   160c4:	mov	r0, #1
   160c8:	rscs	r1, r3, #0
   160cc:	ldr	r3, [sp, #200]	; 0xc8
   160d0:	bcc	164ac <__assert_fail@plt+0x4ef0>
   160d4:	rsb	r0, r6, r6, lsl #4
   160d8:	lsl	r0, r0, #2
   160dc:	str	r0, [r4, #24]
   160e0:	b	1512c <__assert_fail@plt+0x3b70>
   160e4:	mov	r0, #1
   160e8:	ldr	r1, [sp, #80]	; 0x50
   160ec:	strb	r0, [r4, #180]	; 0xb4
   160f0:	ldr	r0, [sp, #108]	; 0x6c
   160f4:	vst1.64	{d16-d17}, [r0]
   160f8:	ldr	r0, [sp, #100]	; 0x64
   160fc:	stm	r0, {r1, r6}
   16100:	b	159d0 <__assert_fail@plt+0x4414>
   16104:	mov	r0, #1
   16108:	mov	r6, r1
   1610c:	ldr	r1, [sp, #80]	; 0x50
   16110:	strb	r0, [r4, #180]	; 0xb4
   16114:	ldr	r0, [sp, #108]	; 0x6c
   16118:	vst1.64	{d16-d17}, [r0]
   1611c:	ldr	r0, [sp, #100]	; 0x64
   16120:	stm	r0, {r1, r6}
   16124:	b	1512c <__assert_fail@plt+0x3b70>
   16128:	mov	r9, r1
   1612c:	b	13258 <__assert_fail@plt+0x1c9c>
   16130:	mov	r9, r7
   16134:	b	13258 <__assert_fail@plt+0x1c9c>
   16138:	ldr	r9, [sp, #220]	; 0xdc
   1613c:	b	13258 <__assert_fail@plt+0x1c9c>
   16140:	mov	r9, r5
   16144:	b	13258 <__assert_fail@plt+0x1c9c>
   16148:	movw	r0, #1032	; 0x408
   1614c:	movt	r0, #2
   16150:	b	1318c <__assert_fail@plt+0x1bd0>
   16154:	movw	r0, #1032	; 0x408
   16158:	movt	r0, #2
   1615c:	add	r9, r0, #24
   16160:	b	13258 <__assert_fail@plt+0x1c9c>
   16164:	movw	r0, #1032	; 0x408
   16168:	movt	r0, #2
   1616c:	add	r9, r0, #36	; 0x24
   16170:	b	13258 <__assert_fail@plt+0x1c9c>
   16174:	movw	r0, #1032	; 0x408
   16178:	movt	r0, #2
   1617c:	add	r9, r0, #48	; 0x30
   16180:	b	13258 <__assert_fail@plt+0x1c9c>
   16184:	movw	r0, #1032	; 0x408
   16188:	movt	r0, #2
   1618c:	add	r9, r0, #60	; 0x3c
   16190:	b	13258 <__assert_fail@plt+0x1c9c>
   16194:	movw	r0, #1032	; 0x408
   16198:	movt	r0, #2
   1619c:	add	r9, r0, #72	; 0x48
   161a0:	b	13258 <__assert_fail@plt+0x1c9c>
   161a4:	movw	r0, #1032	; 0x408
   161a8:	movt	r0, #2
   161ac:	add	r9, r0, #84	; 0x54
   161b0:	b	13258 <__assert_fail@plt+0x1c9c>
   161b4:	movw	r0, #1032	; 0x408
   161b8:	movt	r0, #2
   161bc:	add	r9, r0, #96	; 0x60
   161c0:	b	13258 <__assert_fail@plt+0x1c9c>
   161c4:	movw	r0, #1032	; 0x408
   161c8:	movt	r0, #2
   161cc:	add	r9, r0, #108	; 0x6c
   161d0:	b	13258 <__assert_fail@plt+0x1c9c>
   161d4:	movw	r0, #1032	; 0x408
   161d8:	movt	r0, #2
   161dc:	add	r9, r0, #120	; 0x78
   161e0:	b	13258 <__assert_fail@plt+0x1c9c>
   161e4:	movw	r0, #1032	; 0x408
   161e8:	movt	r0, #2
   161ec:	add	r9, r0, #132	; 0x84
   161f0:	b	13258 <__assert_fail@plt+0x1c9c>
   161f4:	movw	r0, #1032	; 0x408
   161f8:	movt	r0, #2
   161fc:	add	r9, r0, #144	; 0x90
   16200:	b	13258 <__assert_fail@plt+0x1c9c>
   16204:	movw	r0, #1032	; 0x408
   16208:	movt	r0, #2
   1620c:	add	r9, r0, #156	; 0x9c
   16210:	b	13258 <__assert_fail@plt+0x1c9c>
   16214:	movw	r0, #1032	; 0x408
   16218:	movt	r0, #2
   1621c:	add	r9, r0, #168	; 0xa8
   16220:	b	13258 <__assert_fail@plt+0x1c9c>
   16224:	movw	r0, #1032	; 0x408
   16228:	movt	r0, #2
   1622c:	add	r9, r0, #180	; 0xb4
   16230:	b	13258 <__assert_fail@plt+0x1c9c>
   16234:	movw	r0, #1032	; 0x408
   16238:	movt	r0, #2
   1623c:	add	r9, r0, #192	; 0xc0
   16240:	b	13258 <__assert_fail@plt+0x1c9c>
   16244:	movw	r0, #1032	; 0x408
   16248:	movt	r0, #2
   1624c:	add	r9, r0, #204	; 0xcc
   16250:	b	13258 <__assert_fail@plt+0x1c9c>
   16254:	movw	r0, #1032	; 0x408
   16258:	movt	r0, #2
   1625c:	add	r9, r0, #216	; 0xd8
   16260:	b	13258 <__assert_fail@plt+0x1c9c>
   16264:	movw	r0, #1032	; 0x408
   16268:	movt	r0, #2
   1626c:	add	r9, r0, #228	; 0xe4
   16270:	b	13258 <__assert_fail@plt+0x1c9c>
   16274:	cmp	r1, #0
   16278:	beq	162f8 <__assert_fail@plt+0x4d3c>
   1627c:	ldr	r0, [sp, #88]	; 0x58
   16280:	cmp	r1, #46	; 0x2e
   16284:	sub	r2, fp, #72	; 0x48
   16288:	sub	r1, r1, #46	; 0x2e
   1628c:	clz	r1, r1
   16290:	lsr	r1, r1, #5
   16294:	moveq	r0, r2
   16298:	ldrb	r2, [fp, #-71]	; 0xffffffb9
   1629c:	cmp	r2, #0
   162a0:	strb	r2, [r0]
   162a4:	beq	162d8 <__assert_fail@plt+0x4d1c>
   162a8:	ldr	r2, [sp, #88]	; 0x58
   162ac:	ldrb	r3, [r2]
   162b0:	ldrb	r6, [r2, #1]!
   162b4:	cmp	r3, #46	; 0x2e
   162b8:	sub	r3, r3, #46	; 0x2e
   162bc:	clz	r3, r3
   162c0:	addne	r0, r0, #1
   162c4:	cmp	r6, #0
   162c8:	lsr	r3, r3, #5
   162cc:	strb	r6, [r0]
   162d0:	orr	r1, r1, r3
   162d4:	bne	162ac <__assert_fail@plt+0x4cf0>
   162d8:	tst	r1, #1
   162dc:	beq	162f8 <__assert_fail@plt+0x4d3c>
   162e0:	mov	r0, r4
   162e4:	sub	r1, fp, #72	; 0x48
   162e8:	bl	19d28 <__assert_fail@plt+0x876c>
   162ec:	mov	r9, r0
   162f0:	cmp	r0, #0
   162f4:	bne	13258 <__assert_fail@plt+0x1c9c>
   162f8:	ldrb	r0, [r4, #181]	; 0xb5
   162fc:	mov	r6, #63	; 0x3f
   16300:	cmp	r0, #0
   16304:	beq	13278 <__assert_fail@plt+0x1cbc>
   16308:	movw	r1, #2675	; 0xa73
   1630c:	mov	r0, #0
   16310:	mov	r2, #5
   16314:	movt	r1, #2
   16318:	bl	11328 <dcgettext@plt>
   1631c:	sub	r1, fp, #72	; 0x48
   16320:	bl	16c20 <__assert_fail@plt+0x5664>
   16324:	b	13278 <__assert_fail@plt+0x1cbc>
   16328:	movw	r0, #1284	; 0x504
   1632c:	movt	r0, #2
   16330:	add	r9, r0, #24
   16334:	b	13258 <__assert_fail@plt+0x1c9c>
   16338:	movw	r0, #1284	; 0x504
   1633c:	movt	r0, #2
   16340:	add	r9, r0, #36	; 0x24
   16344:	b	13258 <__assert_fail@plt+0x1c9c>
   16348:	movw	r0, #1284	; 0x504
   1634c:	movt	r0, #2
   16350:	add	r9, r0, #48	; 0x30
   16354:	b	13258 <__assert_fail@plt+0x1c9c>
   16358:	movw	r0, #1284	; 0x504
   1635c:	movt	r0, #2
   16360:	add	r9, r0, #60	; 0x3c
   16364:	b	13258 <__assert_fail@plt+0x1c9c>
   16368:	movw	r0, #1284	; 0x504
   1636c:	movt	r0, #2
   16370:	add	r9, r0, #72	; 0x48
   16374:	b	13258 <__assert_fail@plt+0x1c9c>
   16378:	movw	r0, #1284	; 0x504
   1637c:	movt	r0, #2
   16380:	add	r9, r0, #84	; 0x54
   16384:	b	13258 <__assert_fail@plt+0x1c9c>
   16388:	movw	r0, #1284	; 0x504
   1638c:	movt	r0, #2
   16390:	add	r9, r0, #96	; 0x60
   16394:	b	13258 <__assert_fail@plt+0x1c9c>
   16398:	movw	r0, #1284	; 0x504
   1639c:	movt	r0, #2
   163a0:	add	r9, r0, #108	; 0x6c
   163a4:	b	13258 <__assert_fail@plt+0x1c9c>
   163a8:	movw	r0, #1284	; 0x504
   163ac:	movt	r0, #2
   163b0:	add	r9, r0, #120	; 0x78
   163b4:	b	13258 <__assert_fail@plt+0x1c9c>
   163b8:	movw	r0, #1284	; 0x504
   163bc:	movt	r0, #2
   163c0:	add	r9, r0, #132	; 0x84
   163c4:	b	13258 <__assert_fail@plt+0x1c9c>
   163c8:	movw	r0, #1284	; 0x504
   163cc:	movt	r0, #2
   163d0:	add	r9, r0, #144	; 0x90
   163d4:	b	13258 <__assert_fail@plt+0x1c9c>
   163d8:	movw	r0, #1284	; 0x504
   163dc:	movt	r0, #2
   163e0:	add	r9, r0, #156	; 0x9c
   163e4:	b	13258 <__assert_fail@plt+0x1c9c>
   163e8:	movw	r0, #1284	; 0x504
   163ec:	movt	r0, #2
   163f0:	add	r9, r0, #168	; 0xa8
   163f4:	b	13258 <__assert_fail@plt+0x1c9c>
   163f8:	movw	r0, #1284	; 0x504
   163fc:	movt	r0, #2
   16400:	add	r9, r0, #180	; 0xb4
   16404:	b	13258 <__assert_fail@plt+0x1c9c>
   16408:	movw	r0, #1284	; 0x504
   1640c:	movt	r0, #2
   16410:	add	r9, r0, #192	; 0xc0
   16414:	b	13258 <__assert_fail@plt+0x1c9c>
   16418:	movw	r0, #1284	; 0x504
   1641c:	movt	r0, #2
   16420:	add	r9, r0, #204	; 0xcc
   16424:	b	13258 <__assert_fail@plt+0x1c9c>
   16428:	movw	r0, #1284	; 0x504
   1642c:	movt	r0, #2
   16430:	add	r9, r0, #216	; 0xd8
   16434:	b	13258 <__assert_fail@plt+0x1c9c>
   16438:	movw	r0, #1284	; 0x504
   1643c:	movt	r0, #2
   16440:	add	r9, r0, #228	; 0xe4
   16444:	b	13258 <__assert_fail@plt+0x1c9c>
   16448:	movw	r0, #1284	; 0x504
   1644c:	movt	r0, #2
   16450:	add	r9, r0, #240	; 0xf0
   16454:	b	13258 <__assert_fail@plt+0x1c9c>
   16458:	movw	r0, #1284	; 0x504
   1645c:	movt	r0, #2
   16460:	add	r9, r0, #252	; 0xfc
   16464:	b	13258 <__assert_fail@plt+0x1c9c>
   16468:	movw	r0, #1284	; 0x504
   1646c:	movt	r0, #2
   16470:	add	r9, r0, #264	; 0x108
   16474:	b	13258 <__assert_fail@plt+0x1c9c>
   16478:	movw	r0, #1284	; 0x504
   1647c:	movt	r0, #2
   16480:	add	r9, r0, #276	; 0x114
   16484:	b	13258 <__assert_fail@plt+0x1c9c>
   16488:	movw	r0, #1284	; 0x504
   1648c:	movt	r0, #2
   16490:	add	r9, r0, #288	; 0x120
   16494:	b	13258 <__assert_fail@plt+0x1c9c>
   16498:	mov	r0, #0
   1649c:	b	164ac <__assert_fail@plt+0x4ef0>
   164a0:	mov	r0, #1
   164a4:	b	164ac <__assert_fail@plt+0x4ef0>
   164a8:	mov	r0, #2
   164ac:	sub	sp, fp, #48	; 0x30
   164b0:	vpop	{d8-d9}
   164b4:	add	sp, sp, #4
   164b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   164c0:	add	fp, sp, #24
   164c4:	sub	sp, sp, #128	; 0x80
   164c8:	mov	r5, r0
   164cc:	ldrb	r0, [r1, #181]	; 0xb5
   164d0:	cmp	r0, #0
   164d4:	bne	164e0 <__assert_fail@plt+0x4f24>
   164d8:	sub	sp, fp, #24
   164dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   164e0:	mov	r4, r1
   164e4:	movw	r1, #2413	; 0x96d
   164e8:	mov	r0, #0
   164ec:	mov	r2, #5
   164f0:	mov	r7, #0
   164f4:	movt	r1, #2
   164f8:	bl	11328 <dcgettext@plt>
   164fc:	mov	r1, r5
   16500:	bl	16c20 <__assert_fail@plt+0x5664>
   16504:	ldr	r0, [r4, #156]	; 0x9c
   16508:	cmp	r0, #0
   1650c:	beq	16568 <__assert_fail@plt+0x4fac>
   16510:	ldrb	r0, [r4, #182]	; 0xb6
   16514:	cmp	r0, #0
   16518:	bne	16568 <__assert_fail@plt+0x4fac>
   1651c:	movw	r0, #8608	; 0x21a0
   16520:	ldrd	r2, [r4, #40]	; 0x28
   16524:	ldr	r1, [r4, #56]	; 0x38
   16528:	ldr	r7, [r4, #60]	; 0x3c
   1652c:	ldr	r6, [r4, #64]	; 0x40
   16530:	ldr	r5, [r4, #68]	; 0x44
   16534:	movt	r0, #3
   16538:	ldr	r0, [r0]
   1653c:	stm	sp, {r2, r3}
   16540:	movw	r2, #2430	; 0x97e
   16544:	str	r1, [sp, #8]
   16548:	mov	r1, #1
   1654c:	str	r7, [sp, #12]
   16550:	str	r6, [sp, #16]
   16554:	str	r5, [sp, #20]
   16558:	mov	r7, #1
   1655c:	movt	r2, #2
   16560:	bl	114d8 <__fprintf_chk@plt>
   16564:	strb	r7, [r4, #182]	; 0xb6
   16568:	ldrb	r0, [r4, #180]	; 0xb4
   1656c:	ldrb	r1, [r4, #187]	; 0xbb
   16570:	cmp	r0, r1
   16574:	beq	165d8 <__assert_fail@plt+0x501c>
   16578:	cmp	r7, #0
   1657c:	beq	16594 <__assert_fail@plt+0x4fd8>
   16580:	movw	r0, #8608	; 0x21a0
   16584:	movt	r0, #3
   16588:	ldr	r1, [r0]
   1658c:	mov	r0, #32
   16590:	bl	1152c <fputc@plt>
   16594:	movw	r0, #8608	; 0x21a0
   16598:	movw	r1, #2459	; 0x99b
   1659c:	mov	r2, #5
   165a0:	movt	r0, #3
   165a4:	movt	r1, #2
   165a8:	ldr	r5, [r0]
   165ac:	mov	r0, #0
   165b0:	bl	11328 <dcgettext@plt>
   165b4:	mov	r2, r0
   165b8:	ldrd	r0, [r4, #40]	; 0x28
   165bc:	mov	r7, #1
   165c0:	stm	sp, {r0, r1}
   165c4:	mov	r0, r5
   165c8:	mov	r1, #1
   165cc:	bl	114d8 <__fprintf_chk@plt>
   165d0:	ldrb	r0, [r4, #180]	; 0xb4
   165d4:	strb	r0, [r4, #187]	; 0xbb
   165d8:	ldr	r0, [r4, #172]	; 0xac
   165dc:	cmp	r0, #0
   165e0:	beq	16684 <__assert_fail@plt+0x50c8>
   165e4:	ldrb	r0, [r4, #185]	; 0xb9
   165e8:	cmp	r0, #0
   165ec:	bne	16684 <__assert_fail@plt+0x50c8>
   165f0:	movw	r8, #8608	; 0x21a0
   165f4:	add	r6, r4, #76	; 0x4c
   165f8:	ldr	ip, [r4, #72]	; 0x48
   165fc:	movt	r8, #3
   16600:	ldr	r0, [r8]
   16604:	ldm	r6, {r2, r3, r6}
   16608:	ldr	r5, [r4, #88]	; 0x58
   1660c:	str	ip, [sp]
   16610:	stmib	sp, {r2, r3, r6}
   16614:	movw	r2, #2472	; 0x9a8
   16618:	asr	r1, r5, #31
   1661c:	str	r5, [sp, #16]
   16620:	str	r1, [sp, #20]
   16624:	eor	r1, r7, #1
   16628:	movt	r2, #2
   1662c:	add	r2, r2, r1
   16630:	mov	r1, #1
   16634:	bl	114d8 <__fprintf_chk@plt>
   16638:	ldr	r3, [r4, #92]	; 0x5c
   1663c:	cmp	r3, #0
   16640:	beq	16658 <__assert_fail@plt+0x509c>
   16644:	ldr	r0, [r8]
   16648:	movw	r2, #2494	; 0x9be
   1664c:	mov	r1, #1
   16650:	movt	r2, #2
   16654:	bl	114d8 <__fprintf_chk@plt>
   16658:	ldr	r0, [r4, #28]
   1665c:	cmp	r0, #1
   16660:	bne	1667c <__assert_fail@plt+0x50c0>
   16664:	ldr	r3, [r8]
   16668:	movw	r0, #2500	; 0x9c4
   1666c:	mov	r1, #2
   16670:	mov	r2, #1
   16674:	movt	r0, #2
   16678:	bl	1137c <fwrite@plt>
   1667c:	mov	r7, #1
   16680:	strb	r7, [r4, #185]	; 0xb9
   16684:	ldr	r0, [r4, #160]	; 0xa0
   16688:	cmp	r0, #0
   1668c:	beq	16710 <__assert_fail@plt+0x5154>
   16690:	ldrb	r0, [r4, #183]	; 0xb7
   16694:	cmp	r0, #0
   16698:	bne	16710 <__assert_fail@plt+0x5154>
   1669c:	cmp	r7, #0
   166a0:	beq	166b8 <__assert_fail@plt+0x50fc>
   166a4:	movw	r0, #8608	; 0x21a0
   166a8:	movt	r0, #3
   166ac:	ldr	r1, [r0]
   166b0:	mov	r0, #32
   166b4:	bl	1152c <fputc@plt>
   166b8:	movw	r0, #8608	; 0x21a0
   166bc:	movw	r1, #2503	; 0x9c7
   166c0:	mov	r2, #5
   166c4:	movt	r0, #3
   166c8:	movt	r1, #2
   166cc:	ldr	r5, [r0]
   166d0:	mov	r0, #0
   166d4:	bl	11328 <dcgettext@plt>
   166d8:	mov	r6, r0
   166dc:	add	r1, sp, #28
   166e0:	mov	r0, r4
   166e4:	bl	19c30 <__assert_fail@plt+0x8674>
   166e8:	add	r2, r4, #8
   166ec:	mov	r3, r0
   166f0:	mov	r7, #1
   166f4:	ldm	r2, {r0, r1, r2}
   166f8:	stm	sp, {r0, r1, r2}
   166fc:	mov	r0, r5
   16700:	mov	r1, #1
   16704:	mov	r2, r6
   16708:	bl	114d8 <__fprintf_chk@plt>
   1670c:	strb	r7, [r4, #183]	; 0xb7
   16710:	ldr	r0, [r4, #164]	; 0xa4
   16714:	cmp	r0, #0
   16718:	beq	16778 <__assert_fail@plt+0x51bc>
   1671c:	ldrb	r0, [r4, #184]	; 0xb8
   16720:	cmp	r0, #0
   16724:	bne	16778 <__assert_fail@plt+0x51bc>
   16728:	ldr	r0, [r4, #168]	; 0xa8
   1672c:	movw	r1, #5329	; 0x14d1
   16730:	movw	r2, #2547	; 0x9f3
   16734:	ldr	r3, [r4, #20]
   16738:	movt	r1, #2
   1673c:	movt	r2, #2
   16740:	cmp	r0, #0
   16744:	movw	r0, #8608	; 0x21a0
   16748:	movt	r0, #3
   1674c:	moveq	r2, r1
   16750:	eor	r1, r7, #1
   16754:	mov	r7, #1
   16758:	ldr	r0, [r0]
   1675c:	str	r2, [sp]
   16760:	movw	r2, #2535	; 0x9e7
   16764:	movt	r2, #2
   16768:	add	r2, r2, r1
   1676c:	mov	r1, #1
   16770:	bl	114d8 <__fprintf_chk@plt>
   16774:	strb	r7, [r4, #184]	; 0xb8
   16778:	ldr	r0, [r4, #176]	; 0xb0
   1677c:	cmp	r0, #0
   16780:	beq	168d4 <__assert_fail@plt+0x5318>
   16784:	ldrb	r0, [r4, #186]	; 0xba
   16788:	cmp	r0, #0
   1678c:	bne	168d4 <__assert_fail@plt+0x5318>
   16790:	ldr	r5, [r4, #24]
   16794:	mov	r0, #43	; 0x2b
   16798:	movw	r1, #8608	; 0x21a0
   1679c:	movw	r3, #2583	; 0xa17
   167a0:	add	r9, sp, #28
   167a4:	mov	r2, #27
   167a8:	movt	r1, #3
   167ac:	movt	r3, #2
   167b0:	ldr	r8, [r1]
   167b4:	cmp	r5, #0
   167b8:	movwlt	r0, #45	; 0x2d
   167bc:	str	r0, [sp]
   167c0:	movw	r0, #46021	; 0xb3c5
   167c4:	movt	r0, #37282	; 0x91a2
   167c8:	smmla	r0, r5, r0, r5
   167cc:	asr	r1, r0, #11
   167d0:	add	r6, r1, r0, lsr #31
   167d4:	mov	r1, #1
   167d8:	cmp	r6, #0
   167dc:	mov	r0, r6
   167e0:	rsbmi	r0, r6, #0
   167e4:	str	r0, [sp, #4]
   167e8:	mov	r0, r9
   167ec:	bl	1149c <__sprintf_chk@plt>
   167f0:	mov	r1, #3600	; 0xe10
   167f4:	eor	r2, r7, #1
   167f8:	movw	r7, #2552	; 0x9f8
   167fc:	mls	r3, r6, r1, r5
   16800:	movt	r7, #2
   16804:	cmp	r3, #0
   16808:	mov	r1, r3
   1680c:	add	r2, r7, r2
   16810:	rsbmi	r1, r3, #0
   16814:	cmp	r3, #0
   16818:	beq	168bc <__assert_fail@plt+0x5300>
   1681c:	movw	r7, #33205	; 0x81b5
   16820:	mov	lr, #48	; 0x30
   16824:	add	r0, r9, r0
   16828:	mov	ip, #58	; 0x3a
   1682c:	movw	r9, #52429	; 0xcccd
   16830:	movt	r7, #6990	; 0x1b4e
   16834:	strb	ip, [r0]
   16838:	movt	r9, #52428	; 0xcccc
   1683c:	umull	r7, r6, r1, r7
   16840:	add	r6, lr, r6, lsr #6
   16844:	strb	r6, [r0, #1]
   16848:	movw	r6, #34953	; 0x8889
   1684c:	movt	r6, #34952	; 0x8888
   16850:	umull	r6, r5, r1, r6
   16854:	lsr	r3, r5, #5
   16858:	umull	r7, r6, r3, r9
   1685c:	lsr	r6, r6, #3
   16860:	add	r6, r6, r6, lsl #2
   16864:	sub	r6, r3, r6, lsl #1
   16868:	lsl	r3, r3, #4
   1686c:	sub	r3, r3, r5, lsr #5
   16870:	orr	r6, r6, #48	; 0x30
   16874:	sub	r1, r1, r3, lsl #2
   16878:	strb	r6, [r0, #2]
   1687c:	cmp	r1, #0
   16880:	bne	1688c <__assert_fail@plt+0x52d0>
   16884:	add	r0, r0, #3
   16888:	b	168b4 <__assert_fail@plt+0x52f8>
   1688c:	umull	r3, r7, r1, r9
   16890:	strb	ip, [r0, #3]
   16894:	orr	r3, lr, r7, lsr #3
   16898:	strb	r3, [r0, #4]
   1689c:	lsr	r3, r7, #3
   168a0:	add	r3, r3, r3, lsl #2
   168a4:	sub	r1, r1, r3, lsl #1
   168a8:	orr	r1, r1, #48	; 0x30
   168ac:	strb	r1, [r0, #5]
   168b0:	add	r0, r0, #6
   168b4:	mov	r1, #0
   168b8:	strb	r1, [r0]
   168bc:	add	r3, sp, #28
   168c0:	mov	r0, r8
   168c4:	mov	r1, #1
   168c8:	mov	r7, #1
   168cc:	bl	114d8 <__fprintf_chk@plt>
   168d0:	strb	r7, [r4, #186]	; 0xba
   168d4:	ldrb	r0, [r4, #152]	; 0x98
   168d8:	cmp	r0, #0
   168dc:	beq	1693c <__assert_fail@plt+0x5380>
   168e0:	ldr	r5, [r4, #88]	; 0x58
   168e4:	cmp	r7, #0
   168e8:	beq	16900 <__assert_fail@plt+0x5344>
   168ec:	movw	r0, #8608	; 0x21a0
   168f0:	movt	r0, #3
   168f4:	ldr	r1, [r0]
   168f8:	mov	r0, #32
   168fc:	bl	1152c <fputc@plt>
   16900:	movw	r0, #8608	; 0x21a0
   16904:	movw	r1, #2559	; 0x9ff
   16908:	mov	r2, #5
   1690c:	movt	r0, #3
   16910:	movt	r1, #2
   16914:	ldr	r4, [r0]
   16918:	mov	r0, #0
   1691c:	bl	11328 <dcgettext@plt>
   16920:	mov	r2, r0
   16924:	asr	r0, r5, #31
   16928:	mov	r1, #1
   1692c:	str	r5, [sp]
   16930:	str	r0, [sp, #4]
   16934:	mov	r0, r4
   16938:	bl	114d8 <__fprintf_chk@plt>
   1693c:	movw	r0, #8608	; 0x21a0
   16940:	movt	r0, #3
   16944:	ldr	r1, [r0]
   16948:	mov	r0, #10
   1694c:	bl	1152c <fputc@plt>
   16950:	sub	sp, fp, #24
   16954:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16958:	push	{r4, r5, r6, sl, fp, lr}
   1695c:	add	fp, sp, #16
   16960:	sub	sp, sp, #16
   16964:	mov	r5, r0
   16968:	ldrb	r0, [r1, #181]	; 0xb5
   1696c:	cmp	r0, #0
   16970:	subeq	sp, fp, #16
   16974:	popeq	{r4, r5, r6, sl, fp, pc}
   16978:	mov	r4, r1
   1697c:	movw	r1, #2413	; 0x96d
   16980:	mov	r0, #0
   16984:	mov	r2, #5
   16988:	mov	r6, #0
   1698c:	movt	r1, #2
   16990:	bl	11328 <dcgettext@plt>
   16994:	mov	r1, r5
   16998:	bl	16c20 <__assert_fail@plt+0x5664>
   1699c:	ldr	r2, [r4, #96]	; 0x60
   169a0:	ldr	r1, [r4, #100]	; 0x64
   169a4:	orrs	r0, r2, r1
   169a8:	beq	169f4 <__assert_fail@plt+0x5438>
   169ac:	movw	r0, #8608	; 0x21a0
   169b0:	movw	r3, #2606	; 0xa2e
   169b4:	mov	r5, #1
   169b8:	movt	r0, #3
   169bc:	movt	r3, #2
   169c0:	ldr	r0, [r0]
   169c4:	str	r2, [sp]
   169c8:	stmib	sp, {r1, r3}
   169cc:	movw	r1, #2658	; 0xa62
   169d0:	movt	r1, #2
   169d4:	add	r2, r1, #1
   169d8:	mov	r1, #1
   169dc:	bl	114d8 <__fprintf_chk@plt>
   169e0:	ldr	r2, [r4, #104]	; 0x68
   169e4:	ldr	r1, [r4, #108]	; 0x6c
   169e8:	orrs	r0, r2, r1
   169ec:	bne	16a08 <__assert_fail@plt+0x544c>
   169f0:	b	16a3c <__assert_fail@plt+0x5480>
   169f4:	ldr	r2, [r4, #104]	; 0x68
   169f8:	ldr	r1, [r4, #108]	; 0x6c
   169fc:	mov	r6, #1
   16a00:	orrs	r0, r2, r1
   16a04:	beq	16bbc <__assert_fail@plt+0x5600>
   16a08:	movw	r0, #8608	; 0x21a0
   16a0c:	movw	r3, #2614	; 0xa36
   16a10:	mov	r5, #1
   16a14:	movt	r0, #3
   16a18:	movt	r3, #2
   16a1c:	ldr	r0, [r0]
   16a20:	str	r2, [sp]
   16a24:	stmib	sp, {r1, r3}
   16a28:	movw	r1, #2658	; 0xa62
   16a2c:	movt	r1, #2
   16a30:	add	r2, r1, r6
   16a34:	mov	r1, #1
   16a38:	bl	114d8 <__fprintf_chk@plt>
   16a3c:	ldr	r2, [r4, #112]	; 0x70
   16a40:	ldr	r1, [r4, #116]	; 0x74
   16a44:	orrs	r0, r2, r1
   16a48:	beq	16a84 <__assert_fail@plt+0x54c8>
   16a4c:	movw	r0, #8608	; 0x21a0
   16a50:	movw	r3, #2623	; 0xa3f
   16a54:	movt	r0, #3
   16a58:	movt	r3, #2
   16a5c:	ldr	r0, [r0]
   16a60:	str	r2, [sp]
   16a64:	movw	r2, #2658	; 0xa62
   16a68:	stmib	sp, {r1, r3}
   16a6c:	eor	r1, r5, #1
   16a70:	mov	r5, #1
   16a74:	movt	r2, #2
   16a78:	add	r2, r2, r1
   16a7c:	mov	r1, #1
   16a80:	bl	114d8 <__fprintf_chk@plt>
   16a84:	ldr	r2, [r4, #120]	; 0x78
   16a88:	ldr	r1, [r4, #124]	; 0x7c
   16a8c:	orrs	r0, r2, r1
   16a90:	beq	16acc <__assert_fail@plt+0x5510>
   16a94:	movw	r0, #8608	; 0x21a0
   16a98:	movw	r3, #2630	; 0xa46
   16a9c:	movt	r0, #3
   16aa0:	movt	r3, #2
   16aa4:	ldr	r0, [r0]
   16aa8:	str	r2, [sp]
   16aac:	movw	r2, #2658	; 0xa62
   16ab0:	stmib	sp, {r1, r3}
   16ab4:	eor	r1, r5, #1
   16ab8:	mov	r5, #1
   16abc:	movt	r2, #2
   16ac0:	add	r2, r2, r1
   16ac4:	mov	r1, #1
   16ac8:	bl	114d8 <__fprintf_chk@plt>
   16acc:	ldr	r2, [r4, #128]	; 0x80
   16ad0:	ldr	r1, [r4, #132]	; 0x84
   16ad4:	orrs	r0, r2, r1
   16ad8:	beq	16b14 <__assert_fail@plt+0x5558>
   16adc:	movw	r0, #8608	; 0x21a0
   16ae0:	movw	r3, #2638	; 0xa4e
   16ae4:	movt	r0, #3
   16ae8:	movt	r3, #2
   16aec:	ldr	r0, [r0]
   16af0:	str	r2, [sp]
   16af4:	movw	r2, #2658	; 0xa62
   16af8:	stmib	sp, {r1, r3}
   16afc:	eor	r1, r5, #1
   16b00:	mov	r5, #1
   16b04:	movt	r2, #2
   16b08:	add	r2, r2, r1
   16b0c:	mov	r1, #1
   16b10:	bl	114d8 <__fprintf_chk@plt>
   16b14:	ldr	r2, [r4, #136]	; 0x88
   16b18:	ldr	r1, [r4, #140]	; 0x8c
   16b1c:	orrs	r0, r2, r1
   16b20:	beq	16b5c <__assert_fail@plt+0x55a0>
   16b24:	movw	r0, #8608	; 0x21a0
   16b28:	movw	r3, #2230	; 0x8b6
   16b2c:	movt	r0, #3
   16b30:	movt	r3, #2
   16b34:	ldr	r0, [r0]
   16b38:	str	r2, [sp]
   16b3c:	movw	r2, #2658	; 0xa62
   16b40:	stmib	sp, {r1, r3}
   16b44:	eor	r1, r5, #1
   16b48:	mov	r5, #1
   16b4c:	movt	r2, #2
   16b50:	add	r2, r2, r1
   16b54:	mov	r1, #1
   16b58:	bl	114d8 <__fprintf_chk@plt>
   16b5c:	ldr	r1, [r4, #144]	; 0x90
   16b60:	cmp	r1, #0
   16b64:	beq	16ba0 <__assert_fail@plt+0x55e4>
   16b68:	movw	r0, #8608	; 0x21a0
   16b6c:	movw	r2, #2646	; 0xa56
   16b70:	asr	r3, r1, #31
   16b74:	movt	r0, #3
   16b78:	movt	r2, #2
   16b7c:	ldr	r0, [r0]
   16b80:	stm	sp, {r1, r3}
   16b84:	str	r2, [sp, #8]
   16b88:	movw	r2, #2658	; 0xa62
   16b8c:	eor	r1, r5, #1
   16b90:	movt	r2, #2
   16b94:	add	r2, r2, r1
   16b98:	mov	r1, #1
   16b9c:	bl	114d8 <__fprintf_chk@plt>
   16ba0:	movw	r0, #8608	; 0x21a0
   16ba4:	movt	r0, #3
   16ba8:	ldr	r1, [r0]
   16bac:	mov	r0, #10
   16bb0:	sub	sp, fp, #16
   16bb4:	pop	{r4, r5, r6, sl, fp, lr}
   16bb8:	b	1152c <fputc@plt>
   16bbc:	ldrd	r0, [r4, #112]	; 0x70
   16bc0:	mov	r5, #0
   16bc4:	orrs	r0, r0, r1
   16bc8:	ldrdeq	r0, [r4, #120]	; 0x78
   16bcc:	orrseq	r0, r0, r1
   16bd0:	bne	16a3c <__assert_fail@plt+0x5480>
   16bd4:	ldrd	r0, [r4, #128]	; 0x80
   16bd8:	orrs	r0, r0, r1
   16bdc:	ldrdeq	r0, [r4, #136]	; 0x88
   16be0:	orrseq	r0, r0, r1
   16be4:	bne	16a3c <__assert_fail@plt+0x5480>
   16be8:	ldr	r0, [r4, #144]	; 0x90
   16bec:	cmp	r0, #0
   16bf0:	bne	16a3c <__assert_fail@plt+0x5480>
   16bf4:	movw	r1, #2590	; 0xa1e
   16bf8:	mov	r0, #0
   16bfc:	mov	r2, #5
   16c00:	movt	r1, #2
   16c04:	bl	11328 <dcgettext@plt>
   16c08:	movw	r1, #8608	; 0x21a0
   16c0c:	movt	r1, #3
   16c10:	ldr	r1, [r1]
   16c14:	sub	sp, fp, #16
   16c18:	pop	{r4, r5, r6, sl, fp, lr}
   16c1c:	b	11574 <fputs@plt>
   16c20:	sub	sp, sp, #12
   16c24:	push	{r4, r5, fp, lr}
   16c28:	add	fp, sp, #8
   16c2c:	sub	sp, sp, #4
   16c30:	movw	r5, #8608	; 0x21a0
   16c34:	mov	r4, r0
   16c38:	add	r0, fp, #8
   16c3c:	stm	r0, {r1, r2, r3}
   16c40:	movt	r5, #3
   16c44:	movw	r0, #2668	; 0xa6c
   16c48:	mov	r1, #6
   16c4c:	mov	r2, #1
   16c50:	ldr	r3, [r5]
   16c54:	movt	r0, #2
   16c58:	bl	1137c <fwrite@plt>
   16c5c:	ldr	r0, [r5]
   16c60:	add	r3, fp, #8
   16c64:	mov	r1, #1
   16c68:	mov	r2, r4
   16c6c:	str	r3, [sp]
   16c70:	bl	11400 <__vfprintf_chk@plt>
   16c74:	sub	sp, fp, #8
   16c78:	pop	{r4, r5, fp, lr}
   16c7c:	add	sp, sp, #12
   16c80:	bx	lr
   16c84:	b	16c88 <__assert_fail@plt+0x56cc>
   16c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c8c:	add	fp, sp, #28
   16c90:	sub	sp, sp, #908	; 0x38c
   16c94:	mov	r6, r0
   16c98:	mov	r0, r1
   16c9c:	str	r3, [sp, #88]	; 0x58
   16ca0:	mov	r7, r2
   16ca4:	mov	r4, r1
   16ca8:	bl	1146c <strlen@plt>
   16cac:	mov	r5, r0
   16cb0:	cmp	r7, #0
   16cb4:	bne	16cc4 <__assert_fail@plt+0x5708>
   16cb8:	sub	r7, fp, #456	; 0x1c8
   16cbc:	mov	r0, r7
   16cc0:	bl	12abc <__assert_fail@plt+0x1500>
   16cc4:	ldr	r0, [r7]
   16cc8:	ldr	r2, [fp, #12]
   16ccc:	add	r5, r4, r5
   16cd0:	add	r4, r4, #4
   16cd4:	str	r0, [sp, #96]	; 0x60
   16cd8:	ldr	r0, [r7, #4]
   16cdc:	str	r0, [sp, #92]	; 0x5c
   16ce0:	b	16ce8 <__assert_fail@plt+0x572c>
   16ce4:	add	r4, r4, #1
   16ce8:	ldrb	r0, [r4, #-4]
   16cec:	sub	r1, r0, #9
   16cf0:	cmp	r1, #5
   16cf4:	bcc	16ce4 <__assert_fail@plt+0x5728>
   16cf8:	cmp	r0, #32
   16cfc:	beq	16ce4 <__assert_fail@plt+0x5728>
   16d00:	add	r9, sp, #424	; 0x1a8
   16d04:	vmov.i32	q8, #0	; 0x00000000
   16d08:	mov	r0, #52	; 0x34
   16d0c:	sub	r8, r4, #4
   16d10:	str	r2, [sp, #72]	; 0x48
   16d14:	mov	r2, #4
   16d18:	str	r6, [sp, #68]	; 0x44
   16d1c:	mov	r1, r9
   16d20:	add	sl, r9, #16
   16d24:	vst1.64	{d16-d17}, [r1], r0
   16d28:	mov	r0, #0
   16d2c:	vst1.64	{d16-d17}, [sl]
   16d30:	str	r0, [r1]
   16d34:	add	r1, r9, #32
   16d38:	str	r0, [sp, #472]	; 0x1d8
   16d3c:	mov	r0, r8
   16d40:	str	r1, [sp, #84]	; 0x54
   16d44:	vst1.64	{d16-d17}, [r1]
   16d48:	movw	r1, #3279	; 0xccf
   16d4c:	movt	r1, #2
   16d50:	bl	11580 <strncmp@plt>
   16d54:	cmp	r0, #0
   16d58:	str	r5, [sp, #76]	; 0x4c
   16d5c:	beq	16f64 <__assert_fail@plt+0x59a8>
   16d60:	ldr	r6, [fp, #8]
   16d64:	mov	r5, r6
   16d68:	mov	r4, #0
   16d6c:	add	r2, sp, #380	; 0x17c
   16d70:	mov	r0, r5
   16d74:	mov	r1, r7
   16d78:	bl	1bfe8 <__assert_fail@plt+0xaa2c>
   16d7c:	cmp	r0, #0
   16d80:	mov	r7, #0
   16d84:	beq	175c8 <__assert_fail@plt+0x600c>
   16d88:	ldr	r1, [sp, #88]	; 0x58
   16d8c:	ldrb	r0, [r8]
   16d90:	str	r4, [sp, #80]	; 0x50
   16d94:	add	r7, sp, #380	; 0x17c
   16d98:	vmov.i32	q12, #0	; 0x00000000
   16d9c:	and	r1, r1, #1
   16da0:	cmp	r0, #0
   16da4:	strb	r1, [sp, #325]	; 0x145
   16da8:	ldm	r7, {r1, r2, r3, r7}
   16dac:	ldr	r0, [sp, #396]	; 0x18c
   16db0:	str	r5, [sp, #88]	; 0x58
   16db4:	ldr	r5, [sp, #400]	; 0x190
   16db8:	vld1.64	{d18-d19}, [sl]
   16dbc:	str	r7, [sp, #208]	; 0xd0
   16dc0:	str	r3, [sp, #216]	; 0xd8
   16dc4:	str	r2, [sp, #224]	; 0xe0
   16dc8:	str	r1, [sp, #232]	; 0xe8
   16dcc:	movw	r1, #3439	; 0xd6f
   16dd0:	add	r4, r0, #1
   16dd4:	movw	r0, #1900	; 0x76c
   16dd8:	asr	r7, r7, #31
   16ddc:	asr	r3, r3, #31
   16de0:	asr	r2, r2, #31
   16de4:	movt	r1, #2
   16de8:	movne	r1, r8
   16dec:	adds	r6, r5, r0
   16df0:	mov	r0, #0
   16df4:	str	r0, [sp, #192]	; 0xc0
   16df8:	str	r6, [sp, #184]	; 0xb8
   16dfc:	str	r4, [sp, #200]	; 0xc8
   16e00:	str	r7, [sp, #212]	; 0xd4
   16e04:	str	r3, [sp, #220]	; 0xdc
   16e08:	str	r2, [sp, #228]	; 0xe4
   16e0c:	str	r1, [sp, #144]	; 0x90
   16e10:	asr	r1, r5, #31
   16e14:	mov	r2, #48	; 0x30
   16e18:	add	r7, sp, #144	; 0x90
   16e1c:	ldr	r5, [sp, #88]	; 0x58
   16e20:	vld1.64	{d16-d17}, [r9], r2
   16e24:	adc	r1, r1, #0
   16e28:	ldr	r2, [sp, #84]	; 0x54
   16e2c:	add	r8, r7, #96	; 0x60
   16e30:	str	r1, [sp, #188]	; 0xbc
   16e34:	asr	r1, r4, #31
   16e38:	ldr	r4, [sp, #96]	; 0x60
   16e3c:	str	r1, [sp, #204]	; 0xcc
   16e40:	ldr	r1, [sp, #92]	; 0x5c
   16e44:	vld1.64	{d20-d21}, [r2]
   16e48:	add	r2, r7, #112	; 0x70
   16e4c:	vldr	d22, [r9]
   16e50:	str	r1, [sp, #236]	; 0xec
   16e54:	mov	r1, #2
   16e58:	str	r1, [sp, #172]	; 0xac
   16e5c:	vst1.64	{d18-d19}, [r2]
   16e60:	add	r2, r7, #128	; 0x80
   16e64:	vst1.64	{d16-d17}, [r8]
   16e68:	ldr	r1, [sp, #412]	; 0x19c
   16e6c:	vst1.64	{d20-d21}, [r2]
   16e70:	add	r2, r7, #165	; 0xa5
   16e74:	vst1.8	{d24-d25}, [r2]
   16e78:	add	r2, r7, #156	; 0x9c
   16e7c:	vst1.32	{d24-d25}, [r2]
   16e80:	add	r2, sp, #296	; 0x128
   16e84:	strh	r0, [r2]
   16e88:	vstr	d22, [sp, #288]	; 0x120
   16e8c:	strh	r0, [r2, #34]	; 0x22
   16e90:	ldr	r2, [sp, #420]	; 0x1a4
   16e94:	strb	r0, [sp, #332]	; 0x14c
   16e98:	str	r0, [sp, #326]	; 0x146
   16e9c:	str	r1, [fp, #-144]	; 0xffffff70
   16ea0:	str	r2, [sp, #336]	; 0x150
   16ea4:	movw	r2, #269	; 0x10d
   16ea8:	str	r2, [sp, #340]	; 0x154
   16eac:	str	r1, [sp, #344]	; 0x158
   16eb0:	str	r0, [sp, #348]	; 0x15c
   16eb4:	add	r0, r4, #42752	; 0xa700
   16eb8:	add	r0, r0, #7733248	; 0x760000
   16ebc:	cmp	r0, r4
   16ec0:	str	r0, [fp, #-348]	; 0xfffffea4
   16ec4:	bvs	170ac <__assert_fail@plt+0x5af0>
   16ec8:	sub	r1, fp, #348	; 0x15c
   16ecc:	sub	r2, fp, #132	; 0x84
   16ed0:	mov	r0, r5
   16ed4:	bl	1bfe8 <__assert_fail@plt+0xaa2c>
   16ed8:	cmp	r0, #0
   16edc:	ldrne	r0, [fp, #-92]	; 0xffffffa4
   16ee0:	cmpne	r0, #0
   16ee4:	bne	16fd8 <__assert_fail@plt+0x5a1c>
   16ee8:	add	r0, r4, #19968	; 0x4e00
   16eec:	add	r0, r0, #15532032	; 0xed0000
   16ef0:	cmp	r0, r4
   16ef4:	str	r0, [fp, #-348]	; 0xfffffea4
   16ef8:	bvs	170ac <__assert_fail@plt+0x5af0>
   16efc:	sub	r1, fp, #348	; 0x15c
   16f00:	sub	r2, fp, #132	; 0x84
   16f04:	mov	r0, r5
   16f08:	bl	1bfe8 <__assert_fail@plt+0xaa2c>
   16f0c:	cmp	r0, #0
   16f10:	ldrne	r0, [fp, #-92]	; 0xffffffa4
   16f14:	cmpne	r0, #0
   16f18:	bne	17084 <__assert_fail@plt+0x5ac8>
   16f1c:	movw	r0, #62720	; 0xf500
   16f20:	movt	r0, #355	; 0x163
   16f24:	adds	r0, r4, r0
   16f28:	str	r0, [fp, #-348]	; 0xfffffea4
   16f2c:	bvs	170ac <__assert_fail@plt+0x5af0>
   16f30:	sub	r1, fp, #348	; 0x15c
   16f34:	sub	r2, fp, #132	; 0x84
   16f38:	mov	r0, r5
   16f3c:	bl	1bfe8 <__assert_fail@plt+0xaa2c>
   16f40:	cmp	r0, #0
   16f44:	ldrne	r0, [fp, #-92]	; 0xffffffa4
   16f48:	cmpne	r0, #0
   16f4c:	beq	170ac <__assert_fail@plt+0x5af0>
   16f50:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16f54:	ldr	r2, [sp, #344]	; 0x158
   16f58:	cmp	r1, r2
   16f5c:	bne	17094 <__assert_fail@plt+0x5ad8>
   16f60:	b	170ac <__assert_fail@plt+0x5af0>
   16f64:	ldr	r6, [fp, #8]
   16f68:	mov	r0, #1
   16f6c:	mov	r1, r4
   16f70:	b	16f7c <__assert_fail@plt+0x59c0>
   16f74:	add	r0, r0, #1
   16f78:	add	r1, r1, #1
   16f7c:	ldrb	r2, [r1]
   16f80:	cmp	r2, #92	; 0x5c
   16f84:	beq	16f9c <__assert_fail@plt+0x59e0>
   16f88:	cmp	r2, #0
   16f8c:	beq	16d64 <__assert_fail@plt+0x57a8>
   16f90:	cmp	r2, #34	; 0x22
   16f94:	bne	16f74 <__assert_fail@plt+0x59b8>
   16f98:	b	16fb0 <__assert_fail@plt+0x59f4>
   16f9c:	ldrb	r2, [r1, #1]!
   16fa0:	cmp	r2, #34	; 0x22
   16fa4:	cmpne	r2, #92	; 0x5c
   16fa8:	beq	16f74 <__assert_fail@plt+0x59b8>
   16fac:	b	16d64 <__assert_fail@plt+0x57a8>
   16fb0:	cmp	r0, #101	; 0x65
   16fb4:	bcc	16fec <__assert_fail@plt+0x5a30>
   16fb8:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   16fbc:	mov	r6, r0
   16fc0:	cmp	r0, #0
   16fc4:	mov	r5, r0
   16fc8:	bne	16ff4 <__assert_fail@plt+0x5a38>
   16fcc:	mov	r7, #0
   16fd0:	mov	r4, #0
   16fd4:	b	175d8 <__assert_fail@plt+0x601c>
   16fd8:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16fdc:	ldr	r2, [sp, #344]	; 0x158
   16fe0:	cmp	r1, r2
   16fe4:	beq	16ee8 <__assert_fail@plt+0x592c>
   16fe8:	b	17094 <__assert_fail@plt+0x5ad8>
   16fec:	mov	r5, #0
   16ff0:	sub	r6, fp, #448	; 0x1c0
   16ff4:	ldrb	r1, [r4]
   16ff8:	mov	r0, r6
   16ffc:	cmp	r1, #34	; 0x22
   17000:	beq	17024 <__assert_fail@plt+0x5a68>
   17004:	uxtb	r1, r1
   17008:	cmp	r1, #92	; 0x5c
   1700c:	addeq	r4, r4, #1
   17010:	ldrb	r1, [r4]
   17014:	strb	r1, [r0], #1
   17018:	ldrb	r1, [r4, #1]!
   1701c:	cmp	r1, #34	; 0x22
   17020:	bne	17004 <__assert_fail@plt+0x5a48>
   17024:	mov	r1, #0
   17028:	strb	r1, [r0]
   1702c:	mov	r0, r6
   17030:	bl	1bf34 <__assert_fail@plt+0xa978>
   17034:	cmp	r0, #0
   17038:	beq	17078 <__assert_fail@plt+0x5abc>
   1703c:	str	r6, [sp, #72]	; 0x48
   17040:	ldr	r6, [fp, #8]
   17044:	add	r8, r4, #1
   17048:	mov	r4, r5
   1704c:	mov	r5, r0
   17050:	mov	r1, r0
   17054:	b	1705c <__assert_fail@plt+0x5aa0>
   17058:	add	r8, r8, #1
   1705c:	ldrb	r0, [r8]
   17060:	sub	r1, r0, #9
   17064:	cmp	r1, #5
   17068:	bcc	17058 <__assert_fail@plt+0x5a9c>
   1706c:	cmp	r0, #32
   17070:	beq	17058 <__assert_fail@plt+0x5a9c>
   17074:	b	16d6c <__assert_fail@plt+0x57b0>
   17078:	mov	r7, #0
   1707c:	mov	r4, r5
   17080:	b	175d8 <__assert_fail@plt+0x601c>
   17084:	ldr	r1, [fp, #-100]	; 0xffffff9c
   17088:	ldr	r2, [sp, #344]	; 0x158
   1708c:	cmp	r1, r2
   17090:	beq	16f1c <__assert_fail@plt+0x5960>
   17094:	movw	r2, #269	; 0x10d
   17098:	str	r2, [sp, #352]	; 0x160
   1709c:	str	r0, [sp, #348]	; 0x15c
   170a0:	mov	r0, #0
   170a4:	str	r1, [sp, #356]	; 0x164
   170a8:	str	r0, [sp, #360]	; 0x168
   170ac:	ldr	r0, [sp, #336]	; 0x150
   170b0:	ldr	r6, [fp, #8]
   170b4:	ldr	r4, [sp, #80]	; 0x50
   170b8:	cmp	r0, #0
   170bc:	ldrne	r1, [sp, #348]	; 0x15c
   170c0:	cmpne	r1, #0
   170c4:	bne	171a0 <__assert_fail@plt+0x5be4>
   170c8:	add	r0, sp, #144	; 0x90
   170cc:	bl	12ae0 <__assert_fail@plt+0x1524>
   170d0:	ldrb	r1, [sp, #325]	; 0x145
   170d4:	cmp	r0, #0
   170d8:	beq	17128 <__assert_fail@plt+0x5b6c>
   170dc:	cmp	r1, #0
   170e0:	beq	18570 <__assert_fail@plt+0x6fb4>
   170e4:	ldr	r0, [sp, #144]	; 0x90
   170e8:	ldr	r3, [sp, #76]	; 0x4c
   170ec:	movw	r2, #3307	; 0xceb
   170f0:	movw	r1, #3284	; 0xcd4
   170f4:	mov	r7, #0
   170f8:	movt	r2, #2
   170fc:	movt	r1, #2
   17100:	cmp	r3, r0
   17104:	mov	r0, #0
   17108:	movhi	r1, r2
   1710c:	mov	r2, #5
   17110:	bl	11328 <dcgettext@plt>
   17114:	ldr	r1, [sp, #144]	; 0x90
   17118:	bl	16c20 <__assert_fail@plt+0x5664>
   1711c:	cmp	r5, r6
   17120:	bne	175d0 <__assert_fail@plt+0x6014>
   17124:	b	175d8 <__assert_fail@plt+0x601c>
   17128:	cmp	r1, #0
   1712c:	bne	1754c <__assert_fail@plt+0x5f90>
   17130:	ldrb	r0, [sp, #296]	; 0x128
   17134:	cmp	r0, #0
   17138:	beq	171c0 <__assert_fail@plt+0x5c04>
   1713c:	add	r0, r7, #88	; 0x58
   17140:	ldr	r7, [sp, #68]	; 0x44
   17144:	mov	r2, r6
   17148:	ldrd	r0, [r0]
   1714c:	stm	r7, {r0, r1}
   17150:	ldrb	r0, [sp, #325]	; 0x145
   17154:	ldr	r6, [sp, #72]	; 0x48
   17158:	cmp	r0, #0
   1715c:	beq	17288 <__assert_fail@plt+0x5ccc>
   17160:	cmp	r6, #0
   17164:	beq	17318 <__assert_fail@plt+0x5d5c>
   17168:	movw	r1, #3436	; 0xd6c
   1716c:	mov	r0, r6
   17170:	movt	r1, #2
   17174:	bl	112a4 <strcmp@plt>
   17178:	cmp	r0, #0
   1717c:	beq	17344 <__assert_fail@plt+0x5d88>
   17180:	movw	r1, #5070	; 0x13ce
   17184:	mov	r0, #0
   17188:	mov	r2, #5
   1718c:	movt	r1, #2
   17190:	bl	11328 <dcgettext@plt>
   17194:	mov	r1, r6
   17198:	bl	16c20 <__assert_fail@plt+0x5664>
   1719c:	b	1735c <__assert_fail@plt+0x5da0>
   171a0:	bl	112a4 <strcmp@plt>
   171a4:	cmp	r0, #0
   171a8:	bne	170c8 <__assert_fail@plt+0x5b0c>
   171ac:	mov	r0, #0
   171b0:	str	r0, [sp, #348]	; 0x15c
   171b4:	mvn	r0, #0
   171b8:	str	r0, [sp, #344]	; 0x158
   171bc:	b	170c8 <__assert_fail@plt+0x5b0c>
   171c0:	ldr	r1, [sp, #308]	; 0x134
   171c4:	ldr	r6, [sp, #320]	; 0x140
   171c8:	ldr	r0, [sp, #300]	; 0x12c
   171cc:	ldr	r2, [sp, #304]	; 0x130
   171d0:	ldr	r3, [sp, #312]	; 0x138
   171d4:	add	r6, r6, r1
   171d8:	ldr	r1, [sp, #316]	; 0x13c
   171dc:	orr	r5, r0, r1
   171e0:	orr	r2, r5, r2
   171e4:	ldrb	r5, [sp, #325]	; 0x145
   171e8:	orr	r2, r2, r3
   171ec:	orr	r2, r2, r6
   171f0:	cmp	r2, #2
   171f4:	blt	17290 <__assert_fail@plt+0x5cd4>
   171f8:	ldr	r6, [fp, #8]
   171fc:	mov	r7, #0
   17200:	cmp	r5, #0
   17204:	beq	19a68 <__assert_fail@plt+0x84ac>
   17208:	ldr	r5, [sp, #88]	; 0x58
   1720c:	cmp	r1, #2
   17210:	blt	17224 <__assert_fail@plt+0x5c68>
   17214:	movw	r0, #3528	; 0xdc8
   17218:	movt	r0, #2
   1721c:	bl	16c20 <__assert_fail@plt+0x5664>
   17220:	ldr	r0, [sp, #300]	; 0x12c
   17224:	cmp	r0, #2
   17228:	blt	17238 <__assert_fail@plt+0x5c7c>
   1722c:	movw	r0, #3561	; 0xde9
   17230:	movt	r0, #2
   17234:	bl	16c20 <__assert_fail@plt+0x5664>
   17238:	ldr	r0, [sp, #304]	; 0x130
   1723c:	cmp	r0, #2
   17240:	blt	17250 <__assert_fail@plt+0x5c94>
   17244:	movw	r0, #3594	; 0xe0a
   17248:	movt	r0, #2
   1724c:	bl	16c20 <__assert_fail@plt+0x5664>
   17250:	ldr	r0, [sp, #312]	; 0x138
   17254:	cmp	r0, #2
   17258:	blt	17268 <__assert_fail@plt+0x5cac>
   1725c:	movw	r0, #3627	; 0xe2b
   17260:	movt	r0, #2
   17264:	bl	16c20 <__assert_fail@plt+0x5664>
   17268:	ldr	r0, [sp, #308]	; 0x134
   1726c:	ldr	r1, [sp, #320]	; 0x140
   17270:	add	r0, r1, r0
   17274:	cmp	r0, #2
   17278:	blt	175c8 <__assert_fail@plt+0x600c>
   1727c:	movw	r0, #3671	; 0xe57
   17280:	movt	r0, #2
   17284:	b	176dc <__assert_fail@plt+0x6120>
   17288:	mov	r6, r2
   1728c:	b	175c4 <__assert_fail@plt+0x6008>
   17290:	add	r0, r7, #40	; 0x28
   17294:	mvn	r2, #0
   17298:	ldm	r0, {r4, r9}
   1729c:	cmp	r9, #0
   172a0:	blt	17324 <__assert_fail@plt+0x5d68>
   172a4:	add	r0, r7, #48	; 0x30
   172a8:	ldr	r0, [r0]
   172ac:	cmp	r0, #2
   172b0:	bne	175ec <__assert_fail@plt+0x6030>
   172b4:	subs	r1, r4, #69	; 0x45
   172b8:	mov	r0, #0
   172bc:	sbcs	r1, r9, #0
   172c0:	movwlt	r0, #1
   172c4:	movw	r1, #1900	; 0x76c
   172c8:	cmp	r0, #0
   172cc:	movwne	r1, #2000	; 0x7d0
   172d0:	adds	sl, r1, r4
   172d4:	adc	r6, r9, #0
   172d8:	cmp	r5, #0
   172dc:	beq	1730c <__assert_fail@plt+0x5d50>
   172e0:	movw	r1, #5177	; 0x1439
   172e4:	mov	r0, #0
   172e8:	mov	r2, #5
   172ec:	movt	r1, #2
   172f0:	bl	11328 <dcgettext@plt>
   172f4:	mov	r2, r4
   172f8:	mov	r3, r9
   172fc:	str	sl, [sp]
   17300:	str	r6, [sp, #4]
   17304:	bl	16c20 <__assert_fail@plt+0x5664>
   17308:	mvn	r2, #0
   1730c:	cmn	r6, #1
   17310:	bgt	175f4 <__assert_fail@plt+0x6038>
   17314:	b	1732c <__assert_fail@plt+0x5d70>
   17318:	movw	r1, #5018	; 0x139a
   1731c:	movt	r1, #2
   17320:	b	1734c <__assert_fail@plt+0x5d90>
   17324:	mov	sl, r4
   17328:	mov	r6, r9
   1732c:	movw	r0, #63636	; 0xf894
   17330:	movt	r0, #65535	; 0xffff
   17334:	subs	r0, r0, sl
   17338:	str	r0, [fp, #-156]	; 0xffffff64
   1733c:	sbc	r1, r2, r6
   17340:	b	17604 <__assert_fail@plt+0x6048>
   17344:	movw	r1, #5044	; 0x13b4
   17348:	movt	r1, #2
   1734c:	mov	r0, #0
   17350:	mov	r2, #5
   17354:	bl	11328 <dcgettext@plt>
   17358:	bl	16c20 <__assert_fail@plt+0x5664>
   1735c:	ldr	r6, [r7]
   17360:	ldr	r5, [r7, #4]
   17364:	movw	r1, #5107	; 0x13f3
   17368:	mov	r0, #0
   1736c:	mov	r2, #5
   17370:	mov	r4, #0
   17374:	movt	r1, #2
   17378:	bl	11328 <dcgettext@plt>
   1737c:	asr	r3, r6, #31
   17380:	mov	r2, r6
   17384:	str	r5, [sp]
   17388:	bl	16c20 <__assert_fail@plt+0x5664>
   1738c:	sub	r1, fp, #132	; 0x84
   17390:	mov	r0, r7
   17394:	bl	1128c <gmtime_r@plt>
   17398:	cmp	r0, #0
   1739c:	beq	173e8 <__assert_fail@plt+0x5e2c>
   173a0:	movw	r1, #5141	; 0x1415
   173a4:	mov	r0, #0
   173a8:	mov	r2, #5
   173ac:	movt	r1, #2
   173b0:	bl	11328 <dcgettext@plt>
   173b4:	movw	r2, #5615	; 0x15ef
   173b8:	str	r4, [sp]
   173bc:	str	r4, [sp, #4]
   173c0:	sub	r4, fp, #348	; 0x15c
   173c4:	mov	r6, r0
   173c8:	sub	r3, fp, #132	; 0x84
   173cc:	mov	r1, #100	; 0x64
   173d0:	movt	r2, #2
   173d4:	mov	r0, r4
   173d8:	bl	1d55c <__assert_fail@plt+0xbfa0>
   173dc:	mov	r0, r6
   173e0:	mov	r1, r4
   173e4:	bl	16c20 <__assert_fail@plt+0x5664>
   173e8:	ldr	r5, [sp, #88]	; 0x58
   173ec:	add	r2, sp, #100	; 0x64
   173f0:	mov	r1, r7
   173f4:	mov	r0, r5
   173f8:	bl	1bfe8 <__assert_fail@plt+0xaa2c>
   173fc:	ldr	r6, [fp, #8]
   17400:	cmp	r0, #0
   17404:	beq	175c0 <__assert_fail@plt+0x6004>
   17408:	ldr	r4, [sp, #136]	; 0x88
   1740c:	movw	r1, #5158	; 0x1426
   17410:	mov	r0, #0
   17414:	mov	r2, #5
   17418:	mov	r5, #0
   1741c:	movt	r1, #2
   17420:	bl	11328 <dcgettext@plt>
   17424:	movw	r2, #5615	; 0x15ef
   17428:	mov	r8, r0
   1742c:	sub	r0, fp, #348	; 0x15c
   17430:	add	r3, sp, #100	; 0x64
   17434:	mov	r1, #100	; 0x64
   17438:	str	r5, [sp]
   1743c:	str	r5, [sp, #4]
   17440:	movt	r2, #2
   17444:	bl	1d55c <__assert_fail@plt+0xbfa0>
   17448:	movw	r0, #46021	; 0xb3c5
   1744c:	movw	r3, #2583	; 0xa17
   17450:	sub	r7, fp, #247	; 0xf7
   17454:	mov	r2, #27
   17458:	movt	r0, #37282	; 0x91a2
   1745c:	movt	r3, #2
   17460:	smmla	r0, r4, r0, r4
   17464:	asr	r1, r0, #11
   17468:	add	r5, r1, r0, lsr #31
   1746c:	mov	r1, #43	; 0x2b
   17470:	cmp	r5, #0
   17474:	mov	r0, r5
   17478:	rsbmi	r0, r5, #0
   1747c:	cmp	r4, #0
   17480:	movwlt	r1, #45	; 0x2d
   17484:	str	r0, [sp, #4]
   17488:	mov	r0, r7
   1748c:	str	r1, [sp]
   17490:	mov	r1, #1
   17494:	bl	1149c <__sprintf_chk@plt>
   17498:	mov	r1, #3600	; 0xe10
   1749c:	mls	r2, r5, r1, r4
   174a0:	ldr	r5, [sp, #88]	; 0x58
   174a4:	cmp	r2, #0
   174a8:	mov	r1, r2
   174ac:	rsbmi	r1, r2, #0
   174b0:	cmp	r2, #0
   174b4:	beq	175b0 <__assert_fail@plt+0x5ff4>
   174b8:	movw	r3, #33205	; 0x81b5
   174bc:	add	r0, r7, r0
   174c0:	mov	ip, #58	; 0x3a
   174c4:	movt	r3, #6990	; 0x1b4e
   174c8:	strb	ip, [r0]
   174cc:	umull	r3, r7, r1, r3
   174d0:	mov	r3, #48	; 0x30
   174d4:	add	r7, r3, r7, lsr #6
   174d8:	strb	r7, [r0, #1]
   174dc:	movw	r7, #34953	; 0x8889
   174e0:	movt	r7, #34952	; 0x8888
   174e4:	umull	r7, r5, r1, r7
   174e8:	movw	r7, #52429	; 0xcccd
   174ec:	lsr	r4, r5, #5
   174f0:	movt	r7, #52428	; 0xcccc
   174f4:	umull	r6, r2, r4, r7
   174f8:	lsr	r2, r2, #3
   174fc:	add	r2, r2, r2, lsl #2
   17500:	sub	r2, r4, r2, lsl #1
   17504:	orr	r2, r2, #48	; 0x30
   17508:	strb	r2, [r0, #2]
   1750c:	lsl	r2, r4, #4
   17510:	sub	r2, r2, r5, lsr #5
   17514:	sub	r1, r1, r2, lsl #2
   17518:	cmp	r1, #0
   1751c:	beq	1759c <__assert_fail@plt+0x5fe0>
   17520:	umull	r2, r7, r1, r7
   17524:	strb	ip, [r0, #3]
   17528:	orr	r2, r3, r7, lsr #3
   1752c:	strb	r2, [r0, #4]
   17530:	lsr	r2, r7, #3
   17534:	add	r2, r2, r2, lsl #2
   17538:	sub	r1, r1, r2, lsl #1
   1753c:	orr	r1, r1, #48	; 0x30
   17540:	strb	r1, [r0, #5]
   17544:	add	r0, r0, #6
   17548:	b	175a0 <__assert_fail@plt+0x5fe4>
   1754c:	movw	r1, #3347	; 0xd13
   17550:	mov	r0, #0
   17554:	mov	r2, #5
   17558:	movt	r1, #2
   1755c:	bl	11328 <dcgettext@plt>
   17560:	bl	16c20 <__assert_fail@plt+0x5664>
   17564:	ldrb	r0, [sp, #296]	; 0x128
   17568:	cmp	r0, #0
   1756c:	bne	176ec <__assert_fail@plt+0x6130>
   17570:	ldr	r0, [sp, #320]	; 0x140
   17574:	cmp	r0, #0
   17578:	bne	17784 <__assert_fail@plt+0x61c8>
   1757c:	ldr	r0, [sp, #72]	; 0x48
   17580:	cmp	r0, #0
   17584:	bne	17908 <__assert_fail@plt+0x634c>
   17588:	movw	r0, #8608	; 0x21a0
   1758c:	movw	r1, #3501	; 0xdad
   17590:	movt	r0, #3
   17594:	movt	r1, #2
   17598:	b	17794 <__assert_fail@plt+0x61d8>
   1759c:	add	r0, r0, #3
   175a0:	ldr	r6, [fp, #8]
   175a4:	ldr	r5, [sp, #88]	; 0x58
   175a8:	mov	r1, #0
   175ac:	strb	r1, [r0]
   175b0:	sub	r1, fp, #348	; 0x15c
   175b4:	sub	r2, fp, #247	; 0xf7
   175b8:	mov	r0, r8
   175bc:	bl	16c20 <__assert_fail@plt+0x5664>
   175c0:	ldr	r4, [sp, #80]	; 0x50
   175c4:	mov	r7, #1
   175c8:	cmp	r5, r6
   175cc:	beq	175d8 <__assert_fail@plt+0x601c>
   175d0:	mov	r0, r5
   175d4:	bl	1bfc0 <__assert_fail@plt+0xaa04>
   175d8:	mov	r0, r4
   175dc:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   175e0:	mov	r0, r7
   175e4:	sub	sp, fp, #28
   175e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175ec:	mov	sl, r4
   175f0:	mov	r6, r9
   175f4:	movw	r0, #1900	; 0x76c
   175f8:	subs	r0, sl, r0
   175fc:	sbc	r1, r6, #0
   17600:	str	r0, [fp, #-156]	; 0xffffff64
   17604:	ldr	r4, [sp, #80]	; 0x50
   17608:	eor	r1, r1, r0, asr #31
   1760c:	clz	r0, r1
   17610:	cmp	r1, #0
   17614:	lsr	r0, r0, #5
   17618:	beq	1764c <__assert_fail@plt+0x6090>
   1761c:	cmp	r5, #0
   17620:	ldr	r5, [sp, #88]	; 0x58
   17624:	beq	17650 <__assert_fail@plt+0x6094>
   17628:	movw	r1, #5221	; 0x1465
   1762c:	mov	r0, #0
   17630:	mov	r2, #5
   17634:	movt	r1, #2
   17638:	bl	11328 <dcgettext@plt>
   1763c:	mov	r2, sl
   17640:	mov	r3, r6
   17644:	bl	16c20 <__assert_fail@plt+0x5664>
   17648:	b	176b4 <__assert_fail@plt+0x60f8>
   1764c:	ldr	r5, [sp, #88]	; 0x58
   17650:	cmp	r0, #0
   17654:	beq	176b4 <__assert_fail@plt+0x60f8>
   17658:	add	r0, r7, #56	; 0x38
   1765c:	mov	r6, #0
   17660:	mov	r5, #0
   17664:	mov	r2, #0
   17668:	ldm	r0, {r0, r3}
   1766c:	cmn	r3, #1
   17670:	movwgt	r6, #1
   17674:	subs	r0, r0, #1
   17678:	sbc	r1, r3, #0
   1767c:	str	r0, [fp, #-160]	; 0xffffff60
   17680:	cmn	r1, #1
   17684:	movwgt	r5, #1
   17688:	subs	r6, r6, r5
   1768c:	ldr	r5, [sp, #88]	; 0x58
   17690:	movwne	r6, #1
   17694:	cmp	r3, #0
   17698:	movwlt	r2, #1
   1769c:	tst	r2, r6
   176a0:	asreq	r2, r0, #31
   176a4:	eoreq	r0, r0, r0
   176a8:	eoreq	r1, r1, r2
   176ac:	orrseq	r0, r0, r1
   176b0:	beq	17700 <__assert_fail@plt+0x6144>
   176b4:	ldrb	r0, [sp, #325]	; 0x145
   176b8:	ldr	r6, [fp, #8]
   176bc:	mov	r7, #0
   176c0:	cmp	r0, #0
   176c4:	beq	175c8 <__assert_fail@plt+0x600c>
   176c8:	movw	r1, #3709	; 0xe7d
   176cc:	mov	r0, #0
   176d0:	mov	r2, #5
   176d4:	movt	r1, #2
   176d8:	bl	11328 <dcgettext@plt>
   176dc:	bl	16c20 <__assert_fail@plt+0x5664>
   176e0:	cmp	r5, r6
   176e4:	bne	175d0 <__assert_fail@plt+0x6014>
   176e8:	b	175d8 <__assert_fail@plt+0x601c>
   176ec:	movw	r0, #8608	; 0x21a0
   176f0:	movw	r1, #3364	; 0xd24
   176f4:	movt	r0, #3
   176f8:	movt	r1, #2
   176fc:	b	17794 <__assert_fail@plt+0x61d8>
   17700:	add	r0, r7, #64	; 0x40
   17704:	ldrd	r0, [r0]
   17708:	teq	r1, r0, asr #31
   1770c:	str	r0, [fp, #-164]	; 0xffffff5c
   17710:	bne	176b4 <__assert_fail@plt+0x60f8>
   17714:	ldr	r0, [sp, #316]	; 0x13c
   17718:	cmp	r0, #0
   1771c:	bne	1773c <__assert_fail@plt+0x6180>
   17720:	ldrb	r1, [sp, #297]	; 0x129
   17724:	cmp	r1, #0
   17728:	beq	17b68 <__assert_fail@plt+0x65ac>
   1772c:	ldr	r1, [sp, #300]	; 0x12c
   17730:	ldr	r2, [sp, #304]	; 0x130
   17734:	orrs	r1, r2, r1
   17738:	bne	17b68 <__assert_fail@plt+0x65ac>
   1773c:	add	r4, r7, #72	; 0x48
   17740:	ldr	r1, [sp, #172]	; 0xac
   17744:	ldrd	r2, [r4]
   17748:	cmp	r1, #0
   1774c:	beq	17a0c <__assert_fail@plt+0x6450>
   17750:	cmp	r1, #1
   17754:	bne	17a30 <__assert_fail@plt+0x6474>
   17758:	eor	r6, r2, #12
   1775c:	orrs	r6, r6, r3
   17760:	mvn	r6, #0
   17764:	movweq	r6, #12
   17768:	subs	r5, r2, #1
   1776c:	sbc	r3, r3, #0
   17770:	subs	r5, r5, #11
   17774:	sbcs	r3, r3, #0
   17778:	addcc	r6, r2, #12
   1777c:	mov	r2, r6
   17780:	b	17a3c <__assert_fail@plt+0x6480>
   17784:	movw	r0, #8608	; 0x21a0
   17788:	movw	r1, #3389	; 0xd3d
   1778c:	movt	r0, #3
   17790:	movt	r1, #2
   17794:	ldr	r4, [r0]
   17798:	mov	r0, #0
   1779c:	mov	r2, #5
   177a0:	bl	11328 <dcgettext@plt>
   177a4:	mov	r2, r0
   177a8:	mov	r0, r4
   177ac:	mov	r1, #1
   177b0:	bl	114d8 <__fprintf_chk@plt>
   177b4:	ldr	r1, [sp, #308]	; 0x134
   177b8:	ldr	r0, [sp, #320]	; 0x140
   177bc:	cmp	r1, #0
   177c0:	beq	17808 <__assert_fail@plt+0x624c>
   177c4:	ldr	r4, [sp, #80]	; 0x50
   177c8:	cmp	r0, #0
   177cc:	bne	1780c <__assert_fail@plt+0x6250>
   177d0:	ldr	r0, [sp, #164]	; 0xa4
   177d4:	cmp	r0, #1
   177d8:	blt	179bc <__assert_fail@plt+0x6400>
   177dc:	movw	r0, #8608	; 0x21a0
   177e0:	movw	r2, #3516	; 0xdbc
   177e4:	mov	r1, #1
   177e8:	movt	r0, #3
   177ec:	movt	r2, #2
   177f0:	ldr	r0, [r0]
   177f4:	bl	114d8 <__fprintf_chk@plt>
   177f8:	ldr	r0, [sp, #320]	; 0x140
   177fc:	cmp	r0, #0
   17800:	bne	17814 <__assert_fail@plt+0x6258>
   17804:	b	179bc <__assert_fail@plt+0x6400>
   17808:	ldr	r4, [sp, #80]	; 0x50
   1780c:	cmp	r0, #0
   17810:	beq	179bc <__assert_fail@plt+0x6400>
   17814:	ldr	r5, [sp, #168]	; 0xa8
   17818:	mov	r0, #43	; 0x2b
   1781c:	movw	r1, #8608	; 0x21a0
   17820:	movw	r3, #2583	; 0xa17
   17824:	sub	r6, fp, #247	; 0xf7
   17828:	mov	r2, #27
   1782c:	movt	r1, #3
   17830:	movt	r3, #2
   17834:	ldr	r9, [r1]
   17838:	cmp	r5, #0
   1783c:	movwlt	r0, #45	; 0x2d
   17840:	str	r0, [sp]
   17844:	movw	r0, #46021	; 0xb3c5
   17848:	movt	r0, #37282	; 0x91a2
   1784c:	smmla	r0, r5, r0, r5
   17850:	asr	r1, r0, #11
   17854:	add	r4, r1, r0, lsr #31
   17858:	mov	r1, #1
   1785c:	cmp	r4, #0
   17860:	mov	r0, r4
   17864:	rsbmi	r0, r4, #0
   17868:	str	r0, [sp, #4]
   1786c:	mov	r0, r6
   17870:	bl	1149c <__sprintf_chk@plt>
   17874:	mov	r1, #3600	; 0xe10
   17878:	mls	r2, r4, r1, r5
   1787c:	ldr	r4, [sp, #80]	; 0x50
   17880:	ldr	r5, [sp, #88]	; 0x58
   17884:	cmp	r2, #0
   17888:	mov	r1, r2
   1788c:	rsbmi	r1, r2, #0
   17890:	cmp	r2, #0
   17894:	beq	179a0 <__assert_fail@plt+0x63e4>
   17898:	movw	r3, #33205	; 0x81b5
   1789c:	add	r0, r6, r0
   178a0:	mov	lr, #48	; 0x30
   178a4:	mov	ip, #58	; 0x3a
   178a8:	movt	r3, #6990	; 0x1b4e
   178ac:	strb	ip, [r0]
   178b0:	umull	r3, r6, r1, r3
   178b4:	add	r6, lr, r6, lsr #6
   178b8:	strb	r6, [r0, #1]
   178bc:	movw	r6, #34953	; 0x8889
   178c0:	movt	r6, #34952	; 0x8888
   178c4:	umull	r6, r5, r1, r6
   178c8:	movw	r6, #52429	; 0xcccd
   178cc:	lsr	r4, r5, #5
   178d0:	movt	r6, #52428	; 0xcccc
   178d4:	umull	r2, r3, r4, r6
   178d8:	lsr	r2, r3, #3
   178dc:	add	r2, r2, r2, lsl #2
   178e0:	sub	r2, r4, r2, lsl #1
   178e4:	orr	r2, r2, #48	; 0x30
   178e8:	strb	r2, [r0, #2]
   178ec:	lsl	r2, r4, #4
   178f0:	sub	r2, r2, r5, lsr #5
   178f4:	sub	r1, r1, r2, lsl #2
   178f8:	cmp	r1, #0
   178fc:	bne	17968 <__assert_fail@plt+0x63ac>
   17900:	add	r0, r0, #3
   17904:	b	17990 <__assert_fail@plt+0x63d4>
   17908:	cmp	r5, r6
   1790c:	bne	179d4 <__assert_fail@plt+0x6418>
   17910:	mov	r9, r6
   17914:	ldr	r6, [sp, #72]	; 0x48
   17918:	movw	r1, #3436	; 0xd6c
   1791c:	movt	r1, #2
   17920:	mov	r0, r6
   17924:	bl	112a4 <strcmp@plt>
   17928:	movw	r1, #8608	; 0x21a0
   1792c:	cmp	r0, #0
   17930:	movt	r1, #3
   17934:	ldr	r4, [r1]
   17938:	bne	17b38 <__assert_fail@plt+0x657c>
   1793c:	movw	r1, #3441	; 0xd71
   17940:	mov	r0, #0
   17944:	mov	r2, #5
   17948:	movt	r1, #2
   1794c:	bl	11328 <dcgettext@plt>
   17950:	mov	r2, r0
   17954:	mov	r0, r4
   17958:	mov	r1, #1
   1795c:	bl	114d8 <__fprintf_chk@plt>
   17960:	mov	r6, r9
   17964:	b	177b4 <__assert_fail@plt+0x61f8>
   17968:	umull	r2, r3, r1, r6
   1796c:	strb	ip, [r0, #3]
   17970:	orr	r2, lr, r3, lsr #3
   17974:	strb	r2, [r0, #4]
   17978:	lsr	r2, r3, #3
   1797c:	add	r2, r2, r2, lsl #2
   17980:	sub	r1, r1, r2, lsl #1
   17984:	orr	r1, r1, #48	; 0x30
   17988:	strb	r1, [r0, #5]
   1798c:	add	r0, r0, #6
   17990:	ldr	r4, [sp, #80]	; 0x50
   17994:	ldr	r5, [sp, #88]	; 0x58
   17998:	mov	r1, #0
   1799c:	strb	r1, [r0]
   179a0:	movw	r2, #3522	; 0xdc2
   179a4:	sub	r3, fp, #247	; 0xf7
   179a8:	mov	r0, r9
   179ac:	mov	r1, #1
   179b0:	movt	r2, #2
   179b4:	bl	114d8 <__fprintf_chk@plt>
   179b8:	ldr	r6, [fp, #8]
   179bc:	movw	r0, #8608	; 0x21a0
   179c0:	movt	r0, #3
   179c4:	ldr	r1, [r0]
   179c8:	mov	r0, #10
   179cc:	bl	1152c <fputc@plt>
   179d0:	b	17130 <__assert_fail@plt+0x5b74>
   179d4:	movw	r0, #8608	; 0x21a0
   179d8:	movw	r1, #3413	; 0xd55
   179dc:	mov	r2, #5
   179e0:	movt	r0, #3
   179e4:	movt	r1, #2
   179e8:	ldr	r4, [r0]
   179ec:	mov	r0, #0
   179f0:	bl	11328 <dcgettext@plt>
   179f4:	ldr	r3, [sp, #72]	; 0x48
   179f8:	mov	r2, r0
   179fc:	mov	r0, r4
   17a00:	mov	r1, #1
   17a04:	bl	114d8 <__fprintf_chk@plt>
   17a08:	b	177b4 <__assert_fail@plt+0x61f8>
   17a0c:	eor	r6, r2, #12
   17a10:	orrs	r6, r6, r3
   17a14:	mvnne	r6, #0
   17a18:	subs	r5, r2, #1
   17a1c:	sbc	r3, r3, #0
   17a20:	subs	r5, r5, #11
   17a24:	sbcs	r3, r3, #0
   17a28:	movcs	r2, r6
   17a2c:	b	17a3c <__assert_fail@plt+0x6480>
   17a30:	subs	r6, r2, #24
   17a34:	sbcs	r3, r3, #0
   17a38:	mvncs	r2, #0
   17a3c:	ldr	r6, [fp, #8]
   17a40:	cmn	r2, #1
   17a44:	str	r2, [fp, #-168]	; 0xffffff58
   17a48:	ble	17adc <__assert_fail@plt+0x6520>
   17a4c:	add	r1, r7, #80	; 0x50
   17a50:	ldr	r2, [sp, #232]	; 0xe8
   17a54:	ldr	r1, [r1]
   17a58:	str	r2, [fp, #-176]	; 0xffffff50
   17a5c:	str	r1, [fp, #-172]	; 0xffffff54
   17a60:	ldrb	r1, [sp, #325]	; 0x145
   17a64:	cmp	r1, #0
   17a68:	beq	17b94 <__assert_fail@plt+0x65d8>
   17a6c:	movw	r2, #3823	; 0xeef
   17a70:	movw	r1, #3777	; 0xec1
   17a74:	cmp	r0, #0
   17a78:	mov	r0, #0
   17a7c:	movt	r2, #2
   17a80:	movt	r1, #2
   17a84:	moveq	r1, r2
   17a88:	mov	r2, #5
   17a8c:	bl	11328 <dcgettext@plt>
   17a90:	sub	r2, fp, #176	; 0xb0
   17a94:	mov	r4, r0
   17a98:	movw	r3, #5252	; 0x1484
   17a9c:	sub	r6, fp, #348	; 0x15c
   17aa0:	ldm	r2, {r0, r1, r2}
   17aa4:	movt	r3, #2
   17aa8:	str	r3, [sp]
   17aac:	mov	r3, #100	; 0x64
   17ab0:	str	r2, [sp, #4]
   17ab4:	str	r1, [sp, #8]
   17ab8:	str	r0, [sp, #12]
   17abc:	mov	r0, r6
   17ac0:	mov	r1, #100	; 0x64
   17ac4:	mov	r2, #1
   17ac8:	bl	115b0 <__snprintf_chk@plt>
   17acc:	mov	r0, r4
   17ad0:	mov	r1, r6
   17ad4:	bl	16c20 <__assert_fail@plt+0x5664>
   17ad8:	b	17b94 <__assert_fail@plt+0x65d8>
   17adc:	ldrb	r0, [sp, #325]	; 0x145
   17ae0:	cmp	r0, #0
   17ae4:	beq	19a60 <__assert_fail@plt+0x84a4>
   17ae8:	movw	r0, #2500	; 0x9c4
   17aec:	movw	r2, #5329	; 0x14d1
   17af0:	movw	r5, #3746	; 0xea2
   17af4:	cmp	r1, #1
   17af8:	mov	r7, #0
   17afc:	movt	r0, #2
   17b00:	movt	r2, #2
   17b04:	movt	r5, #2
   17b08:	moveq	r2, r0
   17b0c:	cmp	r1, #0
   17b10:	movw	r1, #3749	; 0xea5
   17b14:	mov	r0, #0
   17b18:	movne	r5, r2
   17b1c:	movt	r1, #2
   17b20:	mov	r2, #5
   17b24:	bl	11328 <dcgettext@plt>
   17b28:	ldrd	r2, [r4]
   17b2c:	str	r5, [sp]
   17b30:	bl	16c20 <__assert_fail@plt+0x5664>
   17b34:	b	19a64 <__assert_fail@plt+0x84a8>
   17b38:	movw	r1, #3475	; 0xd93
   17b3c:	mov	r0, #0
   17b40:	mov	r2, #5
   17b44:	movt	r1, #2
   17b48:	bl	11328 <dcgettext@plt>
   17b4c:	mov	r2, r0
   17b50:	mov	r0, r4
   17b54:	mov	r1, #1
   17b58:	mov	r3, r6
   17b5c:	bl	114d8 <__fprintf_chk@plt>
   17b60:	mov	r6, r9
   17b64:	b	177b4 <__assert_fail@plt+0x61f8>
   17b68:	mov	r0, #0
   17b6c:	str	r0, [sp, #236]	; 0xec
   17b70:	str	r0, [fp, #-172]	; 0xffffff54
   17b74:	str	r0, [fp, #-176]	; 0xffffff50
   17b78:	str	r0, [fp, #-168]	; 0xffffff58
   17b7c:	ldrb	r0, [sp, #325]	; 0x145
   17b80:	cmp	r0, #0
   17b84:	beq	17b94 <__assert_fail@plt+0x65d8>
   17b88:	movw	r0, #3867	; 0xf1b
   17b8c:	movt	r0, #2
   17b90:	bl	16c20 <__assert_fail@plt+0x5664>
   17b94:	ldr	r0, [sp, #300]	; 0x12c
   17b98:	ldr	r1, [sp, #304]	; 0x130
   17b9c:	ldr	r2, [sp, #316]	; 0x13c
   17ba0:	sub	sl, fp, #176	; 0xb0
   17ba4:	orr	r0, r1, r0
   17ba8:	sub	r1, fp, #176	; 0xb0
   17bac:	orrs	r0, r0, r2
   17bb0:	mvnne	r0, #0
   17bb4:	strne	r0, [fp, #-144]	; 0xffffff70
   17bb8:	ldr	r0, [sp, #308]	; 0x134
   17bbc:	cmp	r0, #0
   17bc0:	ldrne	r0, [sp, #164]	; 0xa4
   17bc4:	strne	r0, [fp, #-144]	; 0xffffff70
   17bc8:	ldreq	r0, [fp, #-144]	; 0xffffff70
   17bcc:	str	r0, [fp, #-188]	; 0xffffff44
   17bd0:	mvn	r0, #0
   17bd4:	str	r0, [fp, #-152]	; 0xffffff68
   17bd8:	sub	r0, fp, #220	; 0xdc
   17bdc:	ldm	sl, {r4, r5, r6, sl}
   17be0:	stm	r0, {r4, r5, r6, sl}
   17be4:	ldr	r9, [fp, #-160]	; 0xffffff60
   17be8:	ldr	r0, [sp, #88]	; 0x58
   17bec:	ldr	r7, [fp, #-156]	; 0xffffff64
   17bf0:	str	r9, [fp, #-204]	; 0xffffff34
   17bf4:	str	r7, [fp, #-200]	; 0xffffff38
   17bf8:	bl	1c3bc <__assert_fail@plt+0xae00>
   17bfc:	mov	ip, r0
   17c00:	ldr	r0, [fp, #-152]	; 0xffffff68
   17c04:	cmp	r0, #0
   17c08:	blt	17c4c <__assert_fail@plt+0x6690>
   17c0c:	sub	r3, fp, #176	; 0xb0
   17c10:	ldm	r3, {r0, r1, r2, r3}
   17c14:	eor	r0, r0, r4
   17c18:	eor	r1, r1, r5
   17c1c:	orr	r0, r1, r0
   17c20:	eor	r1, r2, r6
   17c24:	orr	r0, r0, r1
   17c28:	eor	r1, r3, sl
   17c2c:	orr	r0, r0, r1
   17c30:	ldr	r1, [fp, #-160]	; 0xffffff60
   17c34:	eor	r1, r1, r9
   17c38:	orr	r0, r0, r1
   17c3c:	ldr	r1, [fp, #-156]	; 0xffffff64
   17c40:	eor	r1, r1, r7
   17c44:	orrs	r0, r0, r1
   17c48:	beq	17e90 <__assert_fail@plt+0x68d4>
   17c4c:	ldr	r9, [sp, #320]	; 0x140
   17c50:	cmp	r9, #0
   17c54:	beq	17f18 <__assert_fail@plt+0x695c>
   17c58:	ldr	r5, [sp, #168]	; 0xa8
   17c5c:	mov	r0, #88	; 0x58
   17c60:	movw	r3, #2583	; 0xa17
   17c64:	mov	r2, #27
   17c68:	strb	r0, [fp, #-130]	; 0xffffff7e
   17c6c:	movw	r0, #22616	; 0x5858
   17c70:	movt	r3, #2
   17c74:	strh	r0, [fp, #-132]	; 0xffffff7c
   17c78:	mov	r0, #43	; 0x2b
   17c7c:	cmp	r5, #0
   17c80:	movwlt	r0, #45	; 0x2d
   17c84:	str	r0, [sp]
   17c88:	movw	r0, #46021	; 0xb3c5
   17c8c:	movt	r0, #37282	; 0x91a2
   17c90:	smmla	r0, r5, r0, r5
   17c94:	asr	r1, r0, #11
   17c98:	add	r4, r1, r0, lsr #31
   17c9c:	mov	r1, #1
   17ca0:	cmp	r4, #0
   17ca4:	mov	r0, r4
   17ca8:	rsbmi	r0, r4, #0
   17cac:	str	r0, [sp, #4]
   17cb0:	sub	r0, fp, #132	; 0x84
   17cb4:	add	r6, r0, #3
   17cb8:	mov	r0, r6
   17cbc:	bl	1149c <__sprintf_chk@plt>
   17cc0:	mov	r1, #3600	; 0xe10
   17cc4:	mls	r2, r4, r1, r5
   17cc8:	ldr	r5, [sp, #88]	; 0x58
   17ccc:	cmp	r2, #0
   17cd0:	mov	r1, r2
   17cd4:	rsbmi	r1, r2, #0
   17cd8:	cmp	r2, #0
   17cdc:	beq	17d80 <__assert_fail@plt+0x67c4>
   17ce0:	movw	r2, #33205	; 0x81b5
   17ce4:	add	r6, r6, r0
   17ce8:	mov	ip, #58	; 0x3a
   17cec:	movt	r2, #6990	; 0x1b4e
   17cf0:	strb	ip, [r6]
   17cf4:	umull	r2, r3, r1, r2
   17cf8:	mov	r2, #48	; 0x30
   17cfc:	add	r3, r2, r3, lsr #6
   17d00:	strb	r3, [r6, #1]
   17d04:	movw	r3, #34953	; 0x8889
   17d08:	movt	r3, #34952	; 0x8888
   17d0c:	umull	r3, r7, r1, r3
   17d10:	movw	r3, #52429	; 0xcccd
   17d14:	lsr	r5, r7, #5
   17d18:	movt	r3, #52428	; 0xcccc
   17d1c:	umull	r4, r0, r5, r3
   17d20:	lsr	r0, r0, #3
   17d24:	add	r0, r0, r0, lsl #2
   17d28:	sub	r0, r5, r0, lsl #1
   17d2c:	orr	r0, r0, #48	; 0x30
   17d30:	strb	r0, [r6, #2]
   17d34:	lsl	r0, r5, #4
   17d38:	sub	r0, r0, r7, lsr #5
   17d3c:	sub	r7, r1, r0, lsl #2
   17d40:	add	r1, r6, #3
   17d44:	cmp	r7, #0
   17d48:	beq	17d74 <__assert_fail@plt+0x67b8>
   17d4c:	umull	r0, r3, r7, r3
   17d50:	strb	ip, [r1]
   17d54:	orr	r0, r2, r3, lsr #3
   17d58:	strb	r0, [r1, #1]
   17d5c:	lsr	r0, r3, #3
   17d60:	add	r0, r0, r0, lsl #2
   17d64:	sub	r0, r7, r0, lsl #1
   17d68:	orr	r0, r0, #48	; 0x30
   17d6c:	strb	r0, [r1, #2]
   17d70:	add	r1, r1, #3
   17d74:	ldr	r5, [sp, #88]	; 0x58
   17d78:	mov	r0, #0
   17d7c:	strb	r0, [r1]
   17d80:	sub	r0, fp, #132	; 0x84
   17d84:	bl	1bf34 <__assert_fail@plt+0xa978>
   17d88:	cmp	r0, #0
   17d8c:	beq	17edc <__assert_fail@plt+0x6920>
   17d90:	mov	r6, r0
   17d94:	mov	r0, #32
   17d98:	sub	r3, fp, #220	; 0xdc
   17d9c:	sub	r1, fp, #176	; 0xb0
   17da0:	ldr	r2, [fp, #-200]	; 0xffffff38
   17da4:	vld1.32	{d16-d17}, [r3], r0
   17da8:	mov	r0, #24
   17dac:	mov	r4, r1
   17db0:	vst1.32	{d16-d17}, [r4], r0
   17db4:	mvn	r0, #0
   17db8:	str	r0, [r4]
   17dbc:	ldr	r0, [fp, #-204]	; 0xffffff34
   17dc0:	str	r0, [fp, #-160]	; 0xffffff60
   17dc4:	ldr	r0, [r3]
   17dc8:	str	r2, [fp, #-156]	; 0xffffff64
   17dcc:	str	r0, [fp, #-144]	; 0xffffff70
   17dd0:	mov	r0, r6
   17dd4:	bl	1c3bc <__assert_fail@plt+0xae00>
   17dd8:	ldr	r1, [r4]
   17ddc:	cmn	r1, #1
   17de0:	ble	17f10 <__assert_fail@plt+0x6954>
   17de4:	str	r0, [sp, #96]	; 0x60
   17de8:	ldr	r0, [fp, #-156]	; 0xffffff64
   17dec:	sub	sl, fp, #220	; 0xdc
   17df0:	str	r0, [sp, #92]	; 0x5c
   17df4:	ldr	r0, [fp, #-200]	; 0xffffff38
   17df8:	str	r0, [sp, #84]	; 0x54
   17dfc:	ldr	r0, [fp, #-160]	; 0xffffff60
   17e00:	str	r0, [sp, #76]	; 0x4c
   17e04:	ldr	r0, [fp, #-204]	; 0xffffff34
   17e08:	str	r0, [sp, #64]	; 0x40
   17e0c:	ldr	r0, [fp, #-176]	; 0xffffff50
   17e10:	str	r0, [sp, #52]	; 0x34
   17e14:	ldr	r0, [fp, #-172]	; 0xffffff54
   17e18:	str	r0, [sp, #48]	; 0x30
   17e1c:	ldr	r0, [fp, #-168]	; 0xffffff58
   17e20:	str	r0, [sp, #56]	; 0x38
   17e24:	ldr	r0, [fp, #-164]	; 0xffffff5c
   17e28:	str	r0, [sp, #60]	; 0x3c
   17e2c:	mov	r0, r6
   17e30:	ldm	sl, {r4, r7, sl}
   17e34:	ldr	r5, [fp, #-208]	; 0xffffff30
   17e38:	bl	1bfc0 <__assert_fail@plt+0xaa04>
   17e3c:	ldr	r0, [sp, #52]	; 0x34
   17e40:	ldr	r1, [sp, #48]	; 0x30
   17e44:	ldr	r2, [sp, #64]	; 0x40
   17e48:	eor	r0, r0, r4
   17e4c:	eor	r1, r1, r7
   17e50:	orr	r0, r1, r0
   17e54:	ldr	r1, [sp, #56]	; 0x38
   17e58:	eor	r1, r1, sl
   17e5c:	orr	r0, r0, r1
   17e60:	ldr	r1, [sp, #60]	; 0x3c
   17e64:	eor	r1, r1, r5
   17e68:	orr	r0, r0, r1
   17e6c:	ldr	r1, [sp, #76]	; 0x4c
   17e70:	eor	r1, r1, r2
   17e74:	ldr	r2, [sp, #84]	; 0x54
   17e78:	orr	r0, r0, r1
   17e7c:	ldr	r1, [sp, #92]	; 0x5c
   17e80:	eor	r1, r1, r2
   17e84:	orrs	r0, r0, r1
   17e88:	bne	17f18 <__assert_fail@plt+0x695c>
   17e8c:	ldr	ip, [sp, #96]	; 0x60
   17e90:	ldr	r0, [sp, #304]	; 0x130
   17e94:	ldr	r6, [fp, #8]
   17e98:	add	r9, sp, #144	; 0x90
   17e9c:	mvn	r2, #0
   17ea0:	cmp	r0, #0
   17ea4:	beq	18b48 <__assert_fail@plt+0x758c>
   17ea8:	ldr	r0, [sp, #300]	; 0x12c
   17eac:	cmp	r0, #0
   17eb0:	bne	18b48 <__assert_fail@plt+0x758c>
   17eb4:	ldr	r5, [sp, #152]	; 0x98
   17eb8:	ldr	r4, [sp, #156]	; 0x9c
   17ebc:	subs	r0, r5, #1
   17ec0:	sbcs	r0, r4, #0
   17ec4:	blt	1815c <__assert_fail@plt+0x6ba0>
   17ec8:	ldr	r0, [sp, #160]	; 0xa0
   17ecc:	ldr	r1, [fp, #-152]	; 0xffffff68
   17ed0:	subs	r0, r1, r0
   17ed4:	movwne	r0, #1
   17ed8:	b	18160 <__assert_fail@plt+0x6ba4>
   17edc:	ldrb	r0, [sp, #325]	; 0x145
   17ee0:	cmp	r0, #0
   17ee4:	beq	17f04 <__assert_fail@plt+0x6948>
   17ee8:	movw	r1, #3919	; 0xf4f
   17eec:	mov	r0, #0
   17ef0:	mov	r2, #5
   17ef4:	movt	r1, #2
   17ef8:	bl	11328 <dcgettext@plt>
   17efc:	sub	r1, fp, #132	; 0x84
   17f00:	bl	16c20 <__assert_fail@plt+0x5664>
   17f04:	ldr	r6, [fp, #8]
   17f08:	ldr	r4, [sp, #80]	; 0x50
   17f0c:	b	18570 <__assert_fail@plt+0x6fb4>
   17f10:	mov	r0, r6
   17f14:	bl	1bfc0 <__assert_fail@plt+0xaa04>
   17f18:	ldr	r2, [fp, #-168]	; 0xffffff58
   17f1c:	ldr	r3, [fp, #-212]	; 0xffffff2c
   17f20:	ldrb	r1, [sp, #325]	; 0x145
   17f24:	ldr	r4, [sp, #80]	; 0x50
   17f28:	ldr	r5, [sp, #88]	; 0x58
   17f2c:	subs	r0, r3, r2
   17f30:	movwne	r0, #1
   17f34:	cmp	r1, #0
   17f38:	beq	1856c <__assert_fail@plt+0x6fb0>
   17f3c:	str	r2, [sp, #68]	; 0x44
   17f40:	ldr	r6, [fp, #-176]	; 0xffffff50
   17f44:	ldr	r1, [fp, #-172]	; 0xffffff54
   17f48:	ldr	r5, [fp, #-220]	; 0xffffff24
   17f4c:	ldr	r2, [fp, #-216]	; 0xffffff28
   17f50:	str	r3, [sp, #64]	; 0x40
   17f54:	ldr	r3, [fp, #-164]	; 0xffffff5c
   17f58:	ldr	r7, [fp, #-208]	; 0xffffff30
   17f5c:	str	r9, [sp, #92]	; 0x5c
   17f60:	mov	r8, #0
   17f64:	str	r1, [sp, #52]	; 0x34
   17f68:	str	r2, [sp, #48]	; 0x30
   17f6c:	eor	r1, r2, r1
   17f70:	eor	r2, r5, r6
   17f74:	str	r5, [sp, #40]	; 0x28
   17f78:	str	r6, [sp, #44]	; 0x2c
   17f7c:	str	r3, [sp, #84]	; 0x54
   17f80:	str	r7, [sp, #76]	; 0x4c
   17f84:	orr	r1, r2, r1
   17f88:	ldr	r2, [fp, #-204]	; 0xffffff34
   17f8c:	clz	r1, r1
   17f90:	lsr	r1, r1, #5
   17f94:	and	r9, r1, r0
   17f98:	sub	r0, r7, r3
   17f9c:	ldr	r1, [fp, #-200]	; 0xffffff38
   17fa0:	clz	r0, r0
   17fa4:	str	r2, [sp, #96]	; 0x60
   17fa8:	lsr	r5, r0, #5
   17fac:	ldr	r0, [fp, #-156]	; 0xffffff64
   17fb0:	str	r1, [sp, #56]	; 0x38
   17fb4:	str	r0, [sp, #60]	; 0x3c
   17fb8:	eor	r0, r1, r0
   17fbc:	ldr	r1, [fp, #-160]	; 0xffffff60
   17fc0:	str	r1, [sp, #72]	; 0x48
   17fc4:	eor	r1, r2, r1
   17fc8:	mov	r2, #5
   17fcc:	orr	r0, r1, r0
   17fd0:	movw	r1, #5267	; 0x1493
   17fd4:	clz	r0, r0
   17fd8:	movt	r1, #2
   17fdc:	str	r0, [sp, #36]	; 0x24
   17fe0:	mov	r0, #0
   17fe4:	bl	11328 <dcgettext@plt>
   17fe8:	bl	16c20 <__assert_fail@plt+0x5664>
   17fec:	movw	r1, #5300	; 0x14b4
   17ff0:	mov	r0, #0
   17ff4:	mov	r2, #5
   17ff8:	movt	r1, #2
   17ffc:	bl	11328 <dcgettext@plt>
   18000:	movw	r2, #5615	; 0x15ef
   18004:	sub	r7, fp, #132	; 0x84
   18008:	mov	sl, r0
   1800c:	sub	r3, fp, #220	; 0xdc
   18010:	mov	r1, #100	; 0x64
   18014:	str	r8, [sp]
   18018:	str	r8, [sp, #4]
   1801c:	movt	r2, #2
   18020:	mov	r0, r7
   18024:	bl	1d55c <__assert_fail@plt+0xbfa0>
   18028:	cmp	r0, #99	; 0x63
   1802c:	bgt	181e4 <__assert_fail@plt+0x6c28>
   18030:	mov	r6, r0
   18034:	ldr	r0, [sp, #320]	; 0x140
   18038:	cmp	r0, #0
   1803c:	beq	181e4 <__assert_fail@plt+0x6c28>
   18040:	ldr	r4, [sp, #168]	; 0xa8
   18044:	mov	r0, #43	; 0x2b
   18048:	str	r5, [sp, #32]
   1804c:	movw	r3, #2583	; 0xa17
   18050:	mov	r2, #27
   18054:	movt	r3, #2
   18058:	cmp	r4, #0
   1805c:	movwlt	r0, #45	; 0x2d
   18060:	str	r0, [sp]
   18064:	movw	r0, #46021	; 0xb3c5
   18068:	movt	r0, #37282	; 0x91a2
   1806c:	smmla	r0, r4, r0, r4
   18070:	asr	r1, r0, #11
   18074:	add	r5, r1, r0, lsr #31
   18078:	mov	r1, #1
   1807c:	cmp	r5, #0
   18080:	mov	r0, r5
   18084:	rsbmi	r0, r5, #0
   18088:	str	r0, [sp, #4]
   1808c:	add	r0, sp, #100	; 0x64
   18090:	bl	1149c <__sprintf_chk@plt>
   18094:	mov	r2, r0
   18098:	mov	r0, #3600	; 0xe10
   1809c:	rsb	r1, r6, #100	; 0x64
   180a0:	mls	r3, r5, r0, r4
   180a4:	add	r0, r7, r6
   180a8:	cmp	r3, #0
   180ac:	mov	r4, r3
   180b0:	rsbmi	r4, r3, #0
   180b4:	cmp	r3, #0
   180b8:	beq	181bc <__assert_fail@plt+0x6c00>
   180bc:	add	r3, sp, #100	; 0x64
   180c0:	mov	lr, #48	; 0x30
   180c4:	mov	ip, r9
   180c8:	movw	r9, #52429	; 0xcccd
   180cc:	add	r2, r3, r2
   180d0:	mov	r3, #58	; 0x3a
   180d4:	movt	r9, #52428	; 0xcccc
   180d8:	strb	r3, [r2]
   180dc:	movw	r3, #33205	; 0x81b5
   180e0:	movt	r3, #6990	; 0x1b4e
   180e4:	umull	r3, r5, r4, r3
   180e8:	add	r3, lr, r5, lsr #6
   180ec:	strb	r3, [r2, #1]
   180f0:	movw	r3, #34953	; 0x8889
   180f4:	movt	r3, #34952	; 0x8888
   180f8:	umull	r3, r7, r4, r3
   180fc:	lsr	r3, r7, #5
   18100:	umull	r6, r5, r3, r9
   18104:	lsr	r5, r5, #3
   18108:	add	r5, r5, r5, lsl #2
   1810c:	sub	r5, r3, r5, lsl #1
   18110:	lsl	r3, r3, #4
   18114:	sub	r3, r3, r7, lsr #5
   18118:	orr	r5, r5, #48	; 0x30
   1811c:	sub	r3, r4, r3, lsl #2
   18120:	strb	r5, [r2, #2]
   18124:	cmp	r3, #0
   18128:	beq	181ac <__assert_fail@plt+0x6bf0>
   1812c:	umull	r7, r6, r3, r9
   18130:	mov	r4, #58	; 0x3a
   18134:	orr	r7, lr, r6, lsr #3
   18138:	strb	r4, [r2, #3]
   1813c:	strb	r7, [r2, #4]
   18140:	lsr	r7, r6, #3
   18144:	add	r7, r7, r7, lsl #2
   18148:	sub	r3, r3, r7, lsl #1
   1814c:	orr	r3, r3, #48	; 0x30
   18150:	strb	r3, [r2, #5]
   18154:	add	r2, r2, #6
   18158:	b	181b0 <__assert_fail@plt+0x6bf4>
   1815c:	mov	r0, #0
   18160:	subs	r0, r5, r0
   18164:	sbcs	r0, r4, #0
   18168:	bge	1818c <__assert_fail@plt+0x6bd0>
   1816c:	subs	r0, r5, #1
   18170:	sbcs	r0, r4, #0
   18174:	blt	18580 <__assert_fail@plt+0x6fc4>
   18178:	ldr	r0, [sp, #160]	; 0xa0
   1817c:	ldr	r1, [fp, #-152]	; 0xffffff68
   18180:	subs	r0, r1, r0
   18184:	movwne	r0, #1
   18188:	b	18584 <__assert_fail@plt+0x6fc8>
   1818c:	subs	r0, r5, #1
   18190:	sbcs	r0, r4, #0
   18194:	blt	185bc <__assert_fail@plt+0x7000>
   18198:	ldr	r0, [sp, #160]	; 0xa0
   1819c:	ldr	r1, [fp, #-152]	; 0xffffff68
   181a0:	subs	r0, r1, r0
   181a4:	movwne	r0, #1
   181a8:	b	185c0 <__assert_fail@plt+0x7004>
   181ac:	add	r2, r2, #3
   181b0:	mov	r3, #0
   181b4:	mov	r9, ip
   181b8:	strb	r3, [r2]
   181bc:	movw	r2, #5641	; 0x1609
   181c0:	mvn	r3, #0
   181c4:	movt	r2, #2
   181c8:	str	r2, [sp]
   181cc:	add	r2, sp, #100	; 0x64
   181d0:	str	r2, [sp, #4]
   181d4:	mov	r2, #1
   181d8:	bl	115b0 <__snprintf_chk@plt>
   181dc:	ldr	r4, [sp, #80]	; 0x50
   181e0:	ldr	r5, [sp, #32]
   181e4:	ldr	r0, [sp, #36]	; 0x24
   181e8:	sub	r6, fp, #132	; 0x84
   181ec:	and	r5, r9, r5
   181f0:	mov	r1, r6
   181f4:	lsr	r9, r0, #5
   181f8:	mov	r0, sl
   181fc:	bl	16c20 <__assert_fail@plt+0x5664>
   18200:	movw	r1, #5330	; 0x14d2
   18204:	mov	r0, #0
   18208:	mov	r2, #5
   1820c:	movt	r1, #2
   18210:	bl	11328 <dcgettext@plt>
   18214:	movw	r2, #5615	; 0x15ef
   18218:	mov	sl, r0
   1821c:	sub	r3, fp, #176	; 0xb0
   18220:	mov	r0, r6
   18224:	mov	r1, #100	; 0x64
   18228:	str	r8, [sp]
   1822c:	str	r8, [sp, #4]
   18230:	movt	r2, #2
   18234:	bl	1d55c <__assert_fail@plt+0xbfa0>
   18238:	cmp	r0, #99	; 0x63
   1823c:	bgt	18394 <__assert_fail@plt+0x6dd8>
   18240:	mov	r7, r0
   18244:	ldr	r0, [sp, #320]	; 0x140
   18248:	cmp	r0, #0
   1824c:	beq	18394 <__assert_fail@plt+0x6dd8>
   18250:	str	r5, [sp, #36]	; 0x24
   18254:	ldr	r5, [sp, #168]	; 0xa8
   18258:	mov	r0, #43	; 0x2b
   1825c:	movw	r3, #2583	; 0xa17
   18260:	add	r8, sp, #100	; 0x64
   18264:	mov	r2, #27
   18268:	movt	r3, #2
   1826c:	cmp	r5, #0
   18270:	movwlt	r0, #45	; 0x2d
   18274:	str	r0, [sp]
   18278:	movw	r0, #46021	; 0xb3c5
   1827c:	movt	r0, #37282	; 0x91a2
   18280:	smmla	r0, r5, r0, r5
   18284:	asr	r1, r0, #11
   18288:	add	r4, r1, r0, lsr #31
   1828c:	mov	r1, #1
   18290:	cmp	r4, #0
   18294:	mov	r0, r4
   18298:	rsbmi	r0, r4, #0
   1829c:	str	r0, [sp, #4]
   182a0:	mov	r0, r8
   182a4:	bl	1149c <__sprintf_chk@plt>
   182a8:	mov	r2, r0
   182ac:	mov	r0, #3600	; 0xe10
   182b0:	rsb	r1, r7, #100	; 0x64
   182b4:	mls	r3, r4, r0, r5
   182b8:	add	r0, r6, r7
   182bc:	cmp	r3, #0
   182c0:	mov	r4, r3
   182c4:	rsbmi	r4, r3, #0
   182c8:	cmp	r3, #0
   182cc:	beq	18374 <__assert_fail@plt+0x6db8>
   182d0:	add	r2, r8, r2
   182d4:	mov	r3, #58	; 0x3a
   182d8:	mov	lr, #48	; 0x30
   182dc:	strb	r3, [r2]
   182e0:	movw	r3, #33205	; 0x81b5
   182e4:	movt	r3, #6990	; 0x1b4e
   182e8:	umull	r3, r5, r4, r3
   182ec:	add	r3, lr, r5, lsr #6
   182f0:	movw	r5, #52429	; 0xcccd
   182f4:	strb	r3, [r2, #1]
   182f8:	movw	r3, #34953	; 0x8889
   182fc:	movt	r5, #52428	; 0xcccc
   18300:	movt	r3, #34952	; 0x8888
   18304:	umull	r3, r7, r4, r3
   18308:	lsr	r3, r7, #5
   1830c:	umull	r6, ip, r3, r5
   18310:	lsr	r6, ip, #3
   18314:	add	r6, r6, r6, lsl #2
   18318:	sub	r6, r3, r6, lsl #1
   1831c:	lsl	r3, r3, #4
   18320:	sub	r3, r3, r7, lsr #5
   18324:	orr	r6, r6, #48	; 0x30
   18328:	sub	r3, r4, r3, lsl #2
   1832c:	strb	r6, [r2, #2]
   18330:	cmp	r3, #0
   18334:	beq	18368 <__assert_fail@plt+0x6dac>
   18338:	mov	r7, #58	; 0x3a
   1833c:	strb	r7, [r2, #3]
   18340:	umull	r7, r6, r3, r5
   18344:	orr	r7, lr, r6, lsr #3
   18348:	strb	r7, [r2, #4]
   1834c:	lsr	r7, r6, #3
   18350:	add	r7, r7, r7, lsl #2
   18354:	sub	r3, r3, r7, lsl #1
   18358:	orr	r3, r3, #48	; 0x30
   1835c:	strb	r3, [r2, #5]
   18360:	add	r2, r2, #6
   18364:	b	1836c <__assert_fail@plt+0x6db0>
   18368:	add	r2, r2, #3
   1836c:	mov	r3, #0
   18370:	strb	r3, [r2]
   18374:	movw	r2, #5641	; 0x1609
   18378:	mvn	r3, #0
   1837c:	movt	r2, #2
   18380:	stm	sp, {r2, r8}
   18384:	mov	r2, #1
   18388:	bl	115b0 <__snprintf_chk@plt>
   1838c:	ldr	r4, [sp, #80]	; 0x50
   18390:	ldr	r5, [sp, #36]	; 0x24
   18394:	sub	r6, fp, #132	; 0x84
   18398:	mov	r0, sl
   1839c:	and	r9, r5, r9
   183a0:	mov	r1, r6
   183a4:	bl	16c20 <__assert_fail@plt+0x5664>
   183a8:	ldr	r2, [sp, #44]	; 0x2c
   183ac:	ldr	r3, [sp, #40]	; 0x28
   183b0:	movw	r1, #5419	; 0x152b
   183b4:	movw	r0, #5329	; 0x14d1
   183b8:	ldr	r7, [sp, #84]	; 0x54
   183bc:	ldr	r5, [sp, #76]	; 0x4c
   183c0:	ldr	sl, [sp, #72]	; 0x48
   183c4:	movt	r1, #2
   183c8:	movt	r0, #2
   183cc:	cmp	r3, r2
   183d0:	mov	r2, r1
   183d4:	ldr	r3, [sp, #48]	; 0x30
   183d8:	moveq	r2, r0
   183dc:	str	r2, [sp, #24]
   183e0:	ldr	r2, [sp, #52]	; 0x34
   183e4:	cmp	r3, r2
   183e8:	mov	r2, r1
   183ec:	ldr	r3, [sp, #64]	; 0x40
   183f0:	moveq	r2, r0
   183f4:	str	r2, [sp, #20]
   183f8:	ldr	r2, [sp, #68]	; 0x44
   183fc:	cmp	r3, r2
   18400:	mov	r2, r1
   18404:	ldr	r3, [sp, #56]	; 0x38
   18408:	moveq	r2, r0
   1840c:	cmp	r5, r7
   18410:	str	r2, [sp, #16]
   18414:	mov	r2, r1
   18418:	moveq	r2, r0
   1841c:	str	r2, [sp, #12]
   18420:	ldr	r2, [sp, #96]	; 0x60
   18424:	cmp	r2, sl
   18428:	ldr	r2, [sp, #60]	; 0x3c
   1842c:	moveq	r1, r0
   18430:	str	r1, [sp, #8]
   18434:	movw	r1, #5417	; 0x1529
   18438:	movt	r1, #2
   1843c:	cmp	r3, r2
   18440:	mov	r2, #1
   18444:	mov	r3, #100	; 0x64
   18448:	moveq	r1, r0
   1844c:	movw	r0, #5360	; 0x14f0
   18450:	movt	r0, #2
   18454:	str	r1, [sp, #4]
   18458:	mov	r1, #100	; 0x64
   1845c:	str	r0, [sp]
   18460:	mov	r0, r6
   18464:	bl	115b0 <__snprintf_chk@plt>
   18468:	ldr	r8, [sp, #92]	; 0x5c
   1846c:	cmp	r0, #0
   18470:	blt	184ac <__assert_fail@plt+0x6ef0>
   18474:	cmp	r0, #99	; 0x63
   18478:	movcs	r0, #99	; 0x63
   1847c:	add	r0, r0, #1
   18480:	mov	r1, r0
   18484:	sub	r0, r0, #1
   18488:	cmp	r0, #1
   1848c:	blt	184a0 <__assert_fail@plt+0x6ee4>
   18490:	add	r2, r6, r1
   18494:	ldrb	r2, [r2, #-2]
   18498:	cmp	r2, #32
   1849c:	beq	18480 <__assert_fail@plt+0x6ec4>
   184a0:	add	r0, r6, r1
   184a4:	mov	r1, #0
   184a8:	strb	r1, [r0, #-1]
   184ac:	movw	r0, #5575	; 0x15c7
   184b0:	sub	r1, fp, #132	; 0x84
   184b4:	movt	r0, #2
   184b8:	bl	16c20 <__assert_fail@plt+0x5664>
   184bc:	movw	r1, #5422	; 0x152e
   184c0:	mov	r0, #0
   184c4:	mov	r2, #5
   184c8:	movt	r1, #2
   184cc:	bl	11328 <dcgettext@plt>
   184d0:	bl	16c20 <__assert_fail@plt+0x5664>
   184d4:	cmp	r9, #0
   184d8:	beq	184f4 <__assert_fail@plt+0x6f38>
   184dc:	movw	r1, #5446	; 0x1546
   184e0:	mov	r0, #0
   184e4:	mov	r2, #5
   184e8:	movt	r1, #2
   184ec:	bl	11328 <dcgettext@plt>
   184f0:	bl	16c20 <__assert_fail@plt+0x5664>
   184f4:	cmp	r5, r7
   184f8:	ldr	r5, [sp, #88]	; 0x58
   184fc:	ldrne	r0, [sp, #96]	; 0x60
   18500:	cmpne	r0, sl
   18504:	beq	18520 <__assert_fail@plt+0x6f64>
   18508:	movw	r1, #5496	; 0x1578
   1850c:	mov	r0, #0
   18510:	mov	r2, #5
   18514:	movt	r1, #2
   18518:	bl	11328 <dcgettext@plt>
   1851c:	bl	16c20 <__assert_fail@plt+0x5664>
   18520:	movw	r1, #5535	; 0x159f
   18524:	mov	r0, #0
   18528:	mov	r2, #5
   1852c:	movt	r1, #2
   18530:	bl	11328 <dcgettext@plt>
   18534:	bl	16c20 <__assert_fail@plt+0x5664>
   18538:	movw	r0, #5579	; 0x15cb
   1853c:	movw	r1, #5598	; 0x15de
   18540:	cmp	r8, #0
   18544:	mov	r2, #5
   18548:	movt	r0, #2
   1854c:	movt	r1, #2
   18550:	movne	r1, r0
   18554:	mov	r0, #0
   18558:	bl	11328 <dcgettext@plt>
   1855c:	mov	r1, r0
   18560:	movw	r0, #5568	; 0x15c0
   18564:	movt	r0, #2
   18568:	bl	16c20 <__assert_fail@plt+0x5664>
   1856c:	ldr	r6, [fp, #8]
   18570:	mov	r7, #0
   18574:	cmp	r5, r6
   18578:	bne	175d0 <__assert_fail@plt+0x6014>
   1857c:	b	175d8 <__assert_fail@plt+0x601c>
   18580:	mov	r0, #0
   18584:	subs	r0, r5, r0
   18588:	sbc	r1, r4, #0
   1858c:	eor	r0, r0, r2
   18590:	eor	r1, r1, r2
   18594:	orrs	r0, r0, r1
   18598:	beq	18614 <__assert_fail@plt+0x7058>
   1859c:	subs	r0, r5, #1
   185a0:	sbcs	r0, r4, #0
   185a4:	blt	185e8 <__assert_fail@plt+0x702c>
   185a8:	ldr	r0, [sp, #160]	; 0xa0
   185ac:	ldr	r1, [fp, #-152]	; 0xffffff68
   185b0:	subs	r0, r1, r0
   185b4:	movwne	r0, #1
   185b8:	b	185ec <__assert_fail@plt+0x7030>
   185bc:	mov	r0, #0
   185c0:	movw	r3, #37449	; 0x9249
   185c4:	movw	r2, #9362	; 0x2492
   185c8:	subs	r0, r5, r0
   185cc:	movt	r3, #18724	; 0x4924
   185d0:	sbc	r1, r4, #0
   185d4:	movt	r2, #4681	; 0x1249
   185d8:	subs	r0, r3, r0
   185dc:	sbcs	r0, r2, r1
   185e0:	bge	18614 <__assert_fail@plt+0x7058>
   185e4:	b	18734 <__assert_fail@plt+0x7178>
   185e8:	mov	r0, #0
   185ec:	subs	r2, r5, r0
   185f0:	mov	r0, #0
   185f4:	mov	r1, #-2147483648	; 0x80000000
   185f8:	sbc	r3, r4, #0
   185fc:	bl	1f040 <__assert_fail@plt+0xda84>
   18600:	ldr	r6, [fp, #8]
   18604:	subs	r0, r0, #7
   18608:	add	r9, sp, #144	; 0x90
   1860c:	sbcs	r0, r1, #0
   18610:	blt	18734 <__assert_fail@plt+0x7178>
   18614:	rsbs	r0, r5, #0
   18618:	rscs	r0, r4, #0
   1861c:	bge	18634 <__assert_fail@plt+0x7078>
   18620:	ldr	r1, [sp, #160]	; 0xa0
   18624:	ldr	r0, [fp, #-152]	; 0xffffff68
   18628:	subs	r2, r0, r1
   1862c:	movwne	r2, #1
   18630:	b	18640 <__assert_fail@plt+0x7084>
   18634:	ldr	r0, [fp, #-152]	; 0xffffff68
   18638:	ldr	r1, [sp, #160]	; 0xa0
   1863c:	mov	r2, #0
   18640:	add	r1, r1, #7
   18644:	subs	r2, r5, r2
   18648:	mov	r3, #7
   1864c:	mov	r6, #0
   18650:	sub	r0, r1, r0
   18654:	movw	r1, #9363	; 0x2493
   18658:	sbc	r7, r4, #0
   1865c:	umull	r2, r3, r2, r3
   18660:	movt	r1, #37449	; 0x9249
   18664:	rsb	r7, r7, r7, lsl #3
   18668:	smmla	r1, r0, r1, r0
   1866c:	add	r3, r3, r7
   18670:	asr	r7, r1, #2
   18674:	add	r1, r7, r1, lsr #31
   18678:	sub	r1, r1, r1, lsl #3
   1867c:	add	r0, r0, r1
   18680:	asr	r7, r0, #31
   18684:	adds	r2, r0, r2
   18688:	mov	r0, #0
   1868c:	adc	r1, r7, r3
   18690:	cmn	r1, #1
   18694:	movwgt	r6, #1
   18698:	cmn	r7, #1
   1869c:	mov	r7, #0
   186a0:	movwgt	r7, #1
   186a4:	subs	r6, r7, r6
   186a8:	movwne	r6, #1
   186ac:	cmn	r3, #1
   186b0:	mov	r3, #0
   186b4:	movwgt	r3, #1
   186b8:	sub	r3, r7, r3
   186bc:	clz	r3, r3
   186c0:	lsr	r3, r3, #5
   186c4:	ands	r3, r3, r6
   186c8:	ldr	r6, [fp, #8]
   186cc:	bne	18734 <__assert_fail@plt+0x7178>
   186d0:	ldr	r7, [fp, #-164]	; 0xffffff5c
   186d4:	cmn	r1, #1
   186d8:	mov	r3, #0
   186dc:	mov	r6, #0
   186e0:	movwgt	r3, #1
   186e4:	adds	r2, r2, r7
   186e8:	adc	r1, r1, r7, asr #31
   186ec:	asr	r7, r7, #31
   186f0:	str	r2, [fp, #-164]	; 0xffffff5c
   186f4:	cmn	r1, #1
   186f8:	movwgt	r6, #1
   186fc:	subs	r6, r3, r6
   18700:	movwne	r6, #1
   18704:	cmn	r7, #1
   18708:	movwgt	r0, #1
   1870c:	sub	r0, r3, r0
   18710:	clz	r0, r0
   18714:	lsr	r0, r0, #5
   18718:	tst	r0, r6
   1871c:	ldr	r6, [fp, #8]
   18720:	asreq	r0, r2, #31
   18724:	eoreq	r2, r2, r2
   18728:	eoreq	r0, r1, r0
   1872c:	orrseq	r0, r2, r0
   18730:	beq	188dc <__assert_fail@plt+0x7320>
   18734:	ldrb	r0, [sp, #325]	; 0x145
   18738:	cmp	r0, #0
   1873c:	beq	19a60 <__assert_fail@plt+0x84a4>
   18740:	movw	r1, #3949	; 0xf6d
   18744:	mov	r0, #0
   18748:	mov	r2, #5
   1874c:	add	r4, r9, #8
   18750:	mov	r8, #0
   18754:	movt	r1, #2
   18758:	bl	11328 <dcgettext@plt>
   1875c:	mov	r9, r0
   18760:	add	r0, sp, #144	; 0x90
   18764:	sub	r1, fp, #132	; 0x84
   18768:	bl	19c30 <__assert_fail@plt+0x8674>
   1876c:	ldm	r4, {r5, sl}
   18770:	ldr	r4, [sp, #160]	; 0xa0
   18774:	movw	r2, #5615	; 0x15ef
   18778:	mov	r7, r0
   1877c:	sub	r0, fp, #348	; 0x15c
   18780:	sub	r3, fp, #176	; 0xb0
   18784:	mov	r1, #100	; 0x64
   18788:	str	r8, [sp]
   1878c:	str	r8, [sp, #4]
   18790:	movt	r2, #2
   18794:	bl	1d55c <__assert_fail@plt+0xbfa0>
   18798:	cmp	r0, #99	; 0x63
   1879c:	bgt	18ac0 <__assert_fail@plt+0x7504>
   187a0:	mov	r8, r0
   187a4:	ldr	r0, [sp, #320]	; 0x140
   187a8:	cmp	r0, #0
   187ac:	beq	18ac0 <__assert_fail@plt+0x7504>
   187b0:	str	r9, [sp, #96]	; 0x60
   187b4:	ldr	r9, [sp, #168]	; 0xa8
   187b8:	mov	r0, #43	; 0x2b
   187bc:	str	sl, [sp, #92]	; 0x5c
   187c0:	movw	r3, #2583	; 0xa17
   187c4:	str	r4, [sp, #72]	; 0x48
   187c8:	add	r4, sp, #100	; 0x64
   187cc:	mov	r2, #27
   187d0:	str	r5, [sp, #76]	; 0x4c
   187d4:	str	r7, [sp, #84]	; 0x54
   187d8:	movt	r3, #2
   187dc:	cmp	r9, #0
   187e0:	movwlt	r0, #45	; 0x2d
   187e4:	str	r0, [sp]
   187e8:	movw	r0, #46021	; 0xb3c5
   187ec:	movt	r0, #37282	; 0x91a2
   187f0:	smmla	r0, r9, r0, r9
   187f4:	asr	r1, r0, #11
   187f8:	add	sl, r1, r0, lsr #31
   187fc:	mov	r1, #1
   18800:	cmp	sl, #0
   18804:	mov	r0, sl
   18808:	rsbmi	r0, sl, #0
   1880c:	str	r0, [sp, #4]
   18810:	mov	r0, r4
   18814:	bl	1149c <__sprintf_chk@plt>
   18818:	mov	r2, r0
   1881c:	mov	r0, #3600	; 0xe10
   18820:	rsb	r1, r8, #100	; 0x64
   18824:	mls	r3, sl, r0, r9
   18828:	sub	r0, fp, #348	; 0x15c
   1882c:	cmp	r3, #0
   18830:	mov	r5, r3
   18834:	add	r0, r0, r8
   18838:	rsbmi	r5, r3, #0
   1883c:	cmp	r3, #0
   18840:	beq	18a90 <__assert_fail@plt+0x74d4>
   18844:	movw	r3, #33205	; 0x81b5
   18848:	mov	lr, #48	; 0x30
   1884c:	add	r2, r4, r2
   18850:	mov	ip, #58	; 0x3a
   18854:	movw	r9, #52429	; 0xcccd
   18858:	mov	r8, r4
   1885c:	movt	r3, #6990	; 0x1b4e
   18860:	strb	ip, [r2]
   18864:	movt	r9, #52428	; 0xcccc
   18868:	umull	r3, r7, r5, r3
   1886c:	add	r3, lr, r7, lsr #6
   18870:	strb	r3, [r2, #1]
   18874:	movw	r3, #34953	; 0x8889
   18878:	movt	r3, #34952	; 0x8888
   1887c:	umull	r3, r7, r5, r3
   18880:	lsr	r3, r7, #5
   18884:	umull	r4, r6, r3, r9
   18888:	lsr	r4, r6, #3
   1888c:	add	r4, r4, r4, lsl #2
   18890:	sub	r4, r3, r4, lsl #1
   18894:	lsl	r3, r3, #4
   18898:	sub	r3, r3, r7, lsr #5
   1889c:	orr	r4, r4, #48	; 0x30
   188a0:	sub	r3, r5, r3, lsl #2
   188a4:	strb	r4, [r2, #2]
   188a8:	cmp	r3, #0
   188ac:	beq	18a80 <__assert_fail@plt+0x74c4>
   188b0:	umull	r7, r6, r3, r9
   188b4:	strb	ip, [r2, #3]
   188b8:	orr	r7, lr, r6, lsr #3
   188bc:	strb	r7, [r2, #4]
   188c0:	lsr	r7, r6, #3
   188c4:	add	r7, r7, r7, lsl #2
   188c8:	sub	r3, r3, r7, lsl #1
   188cc:	orr	r3, r3, #48	; 0x30
   188d0:	strb	r3, [r2, #5]
   188d4:	add	r2, r2, #6
   188d8:	b	18a84 <__assert_fail@plt+0x74c8>
   188dc:	mvn	r0, #0
   188e0:	sub	r1, fp, #176	; 0xb0
   188e4:	str	r0, [fp, #-144]	; 0xffffff70
   188e8:	ldr	r0, [sp, #88]	; 0x58
   188ec:	bl	1c3bc <__assert_fail@plt+0xae00>
   188f0:	ldrb	r1, [sp, #325]	; 0x145
   188f4:	cmn	r0, #1
   188f8:	beq	18ae4 <__assert_fail@plt+0x7528>
   188fc:	mov	sl, r0
   18900:	cmp	r1, #0
   18904:	beq	18af8 <__assert_fail@plt+0x753c>
   18908:	movw	r1, #4029	; 0xfbd
   1890c:	mov	r0, #0
   18910:	mov	r2, #5
   18914:	mov	r4, #0
   18918:	movt	r1, #2
   1891c:	bl	11328 <dcgettext@plt>
   18920:	str	r0, [sp, #96]	; 0x60
   18924:	add	r0, sp, #144	; 0x90
   18928:	sub	r1, fp, #132	; 0x84
   1892c:	bl	19c30 <__assert_fail@plt+0x8674>
   18930:	movw	r2, #5615	; 0x15ef
   18934:	sub	r6, fp, #348	; 0x15c
   18938:	str	r0, [sp, #92]	; 0x5c
   1893c:	sub	r3, fp, #176	; 0xb0
   18940:	mov	r1, #100	; 0x64
   18944:	str	r4, [sp]
   18948:	str	r4, [sp, #4]
   1894c:	movt	r2, #2
   18950:	mov	r0, r6
   18954:	bl	1d55c <__assert_fail@plt+0xbfa0>
   18958:	cmp	r0, #99	; 0x63
   1895c:	bgt	18b30 <__assert_fail@plt+0x7574>
   18960:	mov	r4, r0
   18964:	ldr	r0, [sp, #320]	; 0x140
   18968:	cmp	r0, #0
   1896c:	beq	18b30 <__assert_fail@plt+0x7574>
   18970:	ldr	r5, [sp, #168]	; 0xa8
   18974:	mov	r0, #43	; 0x2b
   18978:	movw	r3, #2583	; 0xa17
   1897c:	mov	r2, #27
   18980:	movt	r3, #2
   18984:	cmp	r5, #0
   18988:	movwlt	r0, #45	; 0x2d
   1898c:	str	r0, [sp]
   18990:	movw	r0, #46021	; 0xb3c5
   18994:	movt	r0, #37282	; 0x91a2
   18998:	smmla	r0, r5, r0, r5
   1899c:	asr	r1, r0, #11
   189a0:	add	r7, r1, r0, lsr #31
   189a4:	mov	r1, #1
   189a8:	cmp	r7, #0
   189ac:	mov	r0, r7
   189b0:	rsbmi	r0, r7, #0
   189b4:	str	r0, [sp, #4]
   189b8:	add	r0, sp, #100	; 0x64
   189bc:	bl	1149c <__sprintf_chk@plt>
   189c0:	mov	r2, r0
   189c4:	mov	r0, #3600	; 0xe10
   189c8:	rsb	r1, r4, #100	; 0x64
   189cc:	mls	r3, r7, r0, r5
   189d0:	add	r0, r6, r4
   189d4:	cmp	r3, #0
   189d8:	mov	r7, r3
   189dc:	rsbmi	r7, r3, #0
   189e0:	cmp	r3, #0
   189e4:	beq	18b10 <__assert_fail@plt+0x7554>
   189e8:	movw	r6, #33205	; 0x81b5
   189ec:	add	r3, sp, #100	; 0x64
   189f0:	mov	lr, #48	; 0x30
   189f4:	mov	ip, #58	; 0x3a
   189f8:	movw	r9, #52429	; 0xcccd
   189fc:	movt	r6, #6990	; 0x1b4e
   18a00:	add	r2, r3, r2
   18a04:	movt	r9, #52428	; 0xcccc
   18a08:	umull	r6, r5, r7, r6
   18a0c:	strb	ip, [r2]
   18a10:	add	r5, lr, r5, lsr #6
   18a14:	strb	r5, [r2, #1]
   18a18:	movw	r5, #34953	; 0x8889
   18a1c:	movt	r5, #34952	; 0x8888
   18a20:	umull	r5, r4, r7, r5
   18a24:	lsr	r3, r4, #5
   18a28:	umull	r6, r5, r3, r9
   18a2c:	lsr	r5, r5, #3
   18a30:	add	r5, r5, r5, lsl #2
   18a34:	sub	r5, r3, r5, lsl #1
   18a38:	lsl	r3, r3, #4
   18a3c:	sub	r3, r3, r4, lsr #5
   18a40:	orr	r5, r5, #48	; 0x30
   18a44:	sub	r7, r7, r3, lsl #2
   18a48:	strb	r5, [r2, #2]
   18a4c:	cmp	r7, #0
   18a50:	beq	18b04 <__assert_fail@plt+0x7548>
   18a54:	umull	r3, r6, r7, r9
   18a58:	strb	ip, [r2, #3]
   18a5c:	orr	r3, lr, r6, lsr #3
   18a60:	strb	r3, [r2, #4]
   18a64:	lsr	r3, r6, #3
   18a68:	add	r3, r3, r3, lsl #2
   18a6c:	sub	r3, r7, r3, lsl #1
   18a70:	orr	r3, r3, #48	; 0x30
   18a74:	strb	r3, [r2, #5]
   18a78:	add	r2, r2, #6
   18a7c:	b	18b08 <__assert_fail@plt+0x754c>
   18a80:	add	r2, r2, #3
   18a84:	mov	r3, #0
   18a88:	mov	r4, r8
   18a8c:	strb	r3, [r2]
   18a90:	movw	r2, #5641	; 0x1609
   18a94:	mvn	r3, #0
   18a98:	movt	r2, #2
   18a9c:	stm	sp, {r2, r4}
   18aa0:	mov	r2, #1
   18aa4:	bl	115b0 <__snprintf_chk@plt>
   18aa8:	ldr	r6, [fp, #8]
   18aac:	ldr	r9, [sp, #96]	; 0x60
   18ab0:	ldr	sl, [sp, #92]	; 0x5c
   18ab4:	ldr	r7, [sp, #84]	; 0x54
   18ab8:	ldr	r5, [sp, #76]	; 0x4c
   18abc:	ldr	r4, [sp, #72]	; 0x48
   18ac0:	sub	r0, fp, #348	; 0x15c
   18ac4:	mov	r1, r7
   18ac8:	mov	r2, r5
   18acc:	mov	r3, sl
   18ad0:	str	r4, [sp]
   18ad4:	str	r0, [sp, #4]
   18ad8:	mov	r0, r9
   18adc:	bl	16c20 <__assert_fail@plt+0x5664>
   18ae0:	b	19a60 <__assert_fail@plt+0x84a4>
   18ae4:	ldr	r6, [fp, #8]
   18ae8:	cmp	r1, #0
   18aec:	add	r9, sp, #144	; 0x90
   18af0:	bne	18740 <__assert_fail@plt+0x7184>
   18af4:	b	19a60 <__assert_fail@plt+0x84a4>
   18af8:	add	r9, sp, #144	; 0x90
   18afc:	mov	ip, sl
   18b00:	b	18e2c <__assert_fail@plt+0x7870>
   18b04:	add	r2, r2, #3
   18b08:	mov	r3, #0
   18b0c:	strb	r3, [r2]
   18b10:	movw	r2, #5641	; 0x1609
   18b14:	mvn	r3, #0
   18b18:	movt	r2, #2
   18b1c:	str	r2, [sp]
   18b20:	add	r2, sp, #100	; 0x64
   18b24:	str	r2, [sp, #4]
   18b28:	mov	r2, #1
   18b2c:	bl	115b0 <__snprintf_chk@plt>
   18b30:	ldr	r0, [sp, #96]	; 0x60
   18b34:	ldr	r1, [sp, #92]	; 0x5c
   18b38:	sub	r2, fp, #348	; 0x15c
   18b3c:	bl	16c20 <__assert_fail@plt+0x5664>
   18b40:	add	r9, sp, #144	; 0x90
   18b44:	mov	ip, sl
   18b48:	ldrb	r0, [sp, #325]	; 0x145
   18b4c:	cmp	r0, #0
   18b50:	beq	18e2c <__assert_fail@plt+0x7870>
   18b54:	ldr	r0, [sp, #300]	; 0x12c
   18b58:	ldr	r1, [sp, #304]	; 0x130
   18b5c:	str	ip, [sp, #96]	; 0x60
   18b60:	orrs	r2, r1, r0
   18b64:	bne	18c40 <__assert_fail@plt+0x7684>
   18b68:	movw	r1, #4059	; 0xfdb
   18b6c:	mov	r0, #0
   18b70:	mov	r2, #5
   18b74:	movt	r1, #2
   18b78:	bl	11328 <dcgettext@plt>
   18b7c:	mov	r4, r0
   18b80:	ldr	r0, [fp, #-156]	; 0xffffff64
   18b84:	movw	r1, #34079	; 0x851f
   18b88:	mvn	r3, #18
   18b8c:	add	r6, sp, #100	; 0x64
   18b90:	movt	r1, #20971	; 0x51eb
   18b94:	smmul	r1, r0, r1
   18b98:	asr	r2, r1, #5
   18b9c:	add	r1, r2, r1, lsr #31
   18ba0:	mov	r2, #100	; 0x64
   18ba4:	mls	r2, r1, r2, r0
   18ba8:	add	r7, r1, #19
   18bac:	cmp	r2, #0
   18bb0:	rsbmi	r2, r2, #0
   18bb4:	cmn	r0, #2000	; 0x7d0
   18bb8:	suble	r7, r3, r1
   18bbc:	movw	r1, #63537	; 0xf831
   18bc0:	movw	r3, #5669	; 0x1625
   18bc4:	str	r2, [sp, #4]
   18bc8:	mov	r2, #13
   18bcc:	movt	r1, #65535	; 0xffff
   18bd0:	movt	r3, #2
   18bd4:	str	r7, [sp]
   18bd8:	add	r1, r1, #98	; 0x62
   18bdc:	cmp	r0, r1
   18be0:	mov	r0, r6
   18be4:	mov	r1, #1
   18be8:	addgt	r3, r3, #1
   18bec:	bl	1149c <__sprintf_chk@plt>
   18bf0:	ldr	r1, [fp, #-160]	; 0xffffff60
   18bf4:	ldr	r0, [fp, #-164]	; 0xffffff5c
   18bf8:	movw	r2, #5648	; 0x1610
   18bfc:	mov	r3, #100	; 0x64
   18c00:	movt	r2, #2
   18c04:	stm	sp, {r2, r6}
   18c08:	sub	r6, fp, #348	; 0x15c
   18c0c:	mov	r2, #1
   18c10:	add	r1, r1, #1
   18c14:	str	r0, [sp, #12]
   18c18:	mov	r0, r6
   18c1c:	str	r1, [sp, #8]
   18c20:	mov	r1, #100	; 0x64
   18c24:	bl	115b0 <__snprintf_chk@plt>
   18c28:	mov	r0, r4
   18c2c:	mov	r1, r6
   18c30:	bl	16c20 <__assert_fail@plt+0x5664>
   18c34:	ldr	r0, [sp, #300]	; 0x12c
   18c38:	ldr	r1, [sp, #304]	; 0x130
   18c3c:	add	r9, sp, #144	; 0x90
   18c40:	cmp	r1, #0
   18c44:	cmpne	r0, #0
   18c48:	beq	18c7c <__assert_fail@plt+0x76c0>
   18c4c:	movw	r1, #4103	; 0x1007
   18c50:	mov	r0, #0
   18c54:	mov	r2, #5
   18c58:	movt	r1, #2
   18c5c:	bl	11328 <dcgettext@plt>
   18c60:	mov	r4, r0
   18c64:	add	r0, sp, #144	; 0x90
   18c68:	sub	r1, fp, #132	; 0x84
   18c6c:	bl	19c30 <__assert_fail@plt+0x8674>
   18c70:	mov	r1, r0
   18c74:	mov	r0, r4
   18c78:	bl	16c20 <__assert_fail@plt+0x5664>
   18c7c:	movw	r1, #4160	; 0x1040
   18c80:	mov	r0, #0
   18c84:	mov	r2, #5
   18c88:	mov	r4, #0
   18c8c:	movt	r1, #2
   18c90:	bl	11328 <dcgettext@plt>
   18c94:	movw	r2, #5615	; 0x15ef
   18c98:	sub	sl, fp, #348	; 0x15c
   18c9c:	mov	r5, r0
   18ca0:	sub	r3, fp, #176	; 0xb0
   18ca4:	mov	r1, #100	; 0x64
   18ca8:	str	r4, [sp]
   18cac:	str	r4, [sp, #4]
   18cb0:	movt	r2, #2
   18cb4:	mov	r0, sl
   18cb8:	bl	1d55c <__assert_fail@plt+0xbfa0>
   18cbc:	cmp	r0, #99	; 0x63
   18cc0:	bgt	18e1c <__assert_fail@plt+0x7860>
   18cc4:	mov	r4, r0
   18cc8:	ldr	r0, [sp, #320]	; 0x140
   18ccc:	cmp	r0, #0
   18cd0:	beq	18e1c <__assert_fail@plt+0x7860>
   18cd4:	str	r5, [sp, #92]	; 0x5c
   18cd8:	ldr	r5, [sp, #168]	; 0xa8
   18cdc:	mov	r0, #43	; 0x2b
   18ce0:	movw	r3, #2583	; 0xa17
   18ce4:	add	r6, sp, #100	; 0x64
   18ce8:	mov	r2, #27
   18cec:	movt	r3, #2
   18cf0:	cmp	r5, #0
   18cf4:	movwlt	r0, #45	; 0x2d
   18cf8:	str	r0, [sp]
   18cfc:	movw	r0, #46021	; 0xb3c5
   18d00:	movt	r0, #37282	; 0x91a2
   18d04:	smmla	r0, r5, r0, r5
   18d08:	asr	r1, r0, #11
   18d0c:	add	r7, r1, r0, lsr #31
   18d10:	mov	r1, #1
   18d14:	cmp	r7, #0
   18d18:	mov	r0, r7
   18d1c:	rsbmi	r0, r7, #0
   18d20:	str	r0, [sp, #4]
   18d24:	mov	r0, r6
   18d28:	bl	1149c <__sprintf_chk@plt>
   18d2c:	mov	r2, r0
   18d30:	mov	r0, #3600	; 0xe10
   18d34:	rsb	r1, r4, #100	; 0x64
   18d38:	mls	r3, r7, r0, r5
   18d3c:	add	r0, sl, r4
   18d40:	cmp	r3, #0
   18d44:	mov	r7, r3
   18d48:	rsbmi	r7, r3, #0
   18d4c:	cmp	r3, #0
   18d50:	beq	18dfc <__assert_fail@plt+0x7840>
   18d54:	mov	sl, r6
   18d58:	add	r2, r6, r2
   18d5c:	movw	r6, #33205	; 0x81b5
   18d60:	mov	lr, #48	; 0x30
   18d64:	mov	ip, #58	; 0x3a
   18d68:	movw	r9, #52429	; 0xcccd
   18d6c:	movt	r6, #6990	; 0x1b4e
   18d70:	strb	ip, [r2]
   18d74:	movt	r9, #52428	; 0xcccc
   18d78:	umull	r6, r5, r7, r6
   18d7c:	add	r5, lr, r5, lsr #6
   18d80:	strb	r5, [r2, #1]
   18d84:	movw	r5, #34953	; 0x8889
   18d88:	movt	r5, #34952	; 0x8888
   18d8c:	umull	r5, r4, r7, r5
   18d90:	lsr	r3, r4, #5
   18d94:	umull	r6, r5, r3, r9
   18d98:	lsr	r5, r5, #3
   18d9c:	add	r5, r5, r5, lsl #2
   18da0:	sub	r5, r3, r5, lsl #1
   18da4:	lsl	r3, r3, #4
   18da8:	sub	r3, r3, r4, lsr #5
   18dac:	orr	r5, r5, #48	; 0x30
   18db0:	sub	r7, r7, r3, lsl #2
   18db4:	strb	r5, [r2, #2]
   18db8:	cmp	r7, #0
   18dbc:	beq	18dec <__assert_fail@plt+0x7830>
   18dc0:	umull	r3, r6, r7, r9
   18dc4:	strb	ip, [r2, #3]
   18dc8:	orr	r3, lr, r6, lsr #3
   18dcc:	strb	r3, [r2, #4]
   18dd0:	lsr	r3, r6, #3
   18dd4:	add	r3, r3, r3, lsl #2
   18dd8:	sub	r3, r7, r3, lsl #1
   18ddc:	orr	r3, r3, #48	; 0x30
   18de0:	strb	r3, [r2, #5]
   18de4:	add	r2, r2, #6
   18de8:	b	18df0 <__assert_fail@plt+0x7834>
   18dec:	add	r2, r2, #3
   18df0:	mov	r3, #0
   18df4:	mov	r6, sl
   18df8:	strb	r3, [r2]
   18dfc:	movw	r2, #5641	; 0x1609
   18e00:	mvn	r3, #0
   18e04:	movt	r2, #2
   18e08:	stm	sp, {r2, r6}
   18e0c:	mov	r2, #1
   18e10:	bl	115b0 <__snprintf_chk@plt>
   18e14:	ldr	r5, [sp, #92]	; 0x5c
   18e18:	add	r9, sp, #144	; 0x90
   18e1c:	sub	r1, fp, #348	; 0x15c
   18e20:	mov	r0, r5
   18e24:	bl	16c20 <__assert_fail@plt+0x5664>
   18e28:	ldr	ip, [sp, #96]	; 0x60
   18e2c:	ldrd	r4, [r8]
   18e30:	ldr	r3, [sp, #248]	; 0xf8
   18e34:	ldr	r2, [sp, #252]	; 0xfc
   18e38:	ldr	r0, [sp, #256]	; 0x100
   18e3c:	ldr	r1, [sp, #260]	; 0x104
   18e40:	orr	r2, r2, r5
   18e44:	orr	r3, r3, r4
   18e48:	orr	r7, r2, r1
   18e4c:	orr	r6, r3, r0
   18e50:	orrs	r7, r6, r7
   18e54:	beq	19578 <__assert_fail@plt+0x7fbc>
   18e58:	ldrb	r6, [sp, #325]	; 0x145
   18e5c:	add	r9, r9, #112	; 0x70
   18e60:	cmp	r6, #0
   18e64:	beq	18ebc <__assert_fail@plt+0x7900>
   18e68:	orrs	r2, r3, r2
   18e6c:	ldrne	r2, [fp, #-164]	; 0xffffff5c
   18e70:	cmpne	r2, #15
   18e74:	beq	18e94 <__assert_fail@plt+0x78d8>
   18e78:	movw	r1, #4186	; 0x105a
   18e7c:	mov	r0, #0
   18e80:	mov	r2, #5
   18e84:	movt	r1, #2
   18e88:	bl	11328 <dcgettext@plt>
   18e8c:	bl	16c20 <__assert_fail@plt+0x5664>
   18e90:	ldrd	r0, [r9]
   18e94:	orrs	r0, r0, r1
   18e98:	ldrne	r0, [fp, #-168]	; 0xffffff58
   18e9c:	cmpne	r0, #12
   18ea0:	beq	18ebc <__assert_fail@plt+0x7900>
   18ea4:	movw	r1, #4283	; 0x10bb
   18ea8:	mov	r0, #0
   18eac:	mov	r2, #5
   18eb0:	movt	r1, #2
   18eb4:	bl	11328 <dcgettext@plt>
   18eb8:	bl	16c20 <__assert_fail@plt+0x5664>
   18ebc:	ldr	r0, [fp, #-156]	; 0xffffff64
   18ec0:	ldrd	r4, [r8]
   18ec4:	mov	r3, #0
   18ec8:	mov	r2, #0
   18ecc:	asr	r1, r0, #31
   18ed0:	cmn	r1, #1
   18ed4:	movwgt	r3, #1
   18ed8:	adds	r6, r0, r4
   18edc:	adc	r0, r1, r5
   18ee0:	mov	r1, #0
   18ee4:	cmn	r0, #1
   18ee8:	movwgt	r1, #1
   18eec:	subs	r1, r3, r1
   18ef0:	movwne	r1, #1
   18ef4:	cmn	r5, #1
   18ef8:	movwgt	r2, #1
   18efc:	sub	r2, r3, r2
   18f00:	clz	r2, r2
   18f04:	lsr	r2, r2, #5
   18f08:	tst	r2, r1
   18f0c:	asreq	r1, r6, #31
   18f10:	eoreq	r2, r6, r6
   18f14:	eoreq	r0, r0, r1
   18f18:	orrseq	r0, r2, r0
   18f1c:	bne	18f8c <__assert_fail@plt+0x79d0>
   18f20:	add	r0, sp, #144	; 0x90
   18f24:	mov	r3, #0
   18f28:	mov	r2, #0
   18f2c:	add	sl, r0, #104	; 0x68
   18f30:	ldr	r0, [fp, #-160]	; 0xffffff60
   18f34:	ldrd	r4, [sl]
   18f38:	asr	r1, r0, #31
   18f3c:	cmn	r1, #1
   18f40:	movwgt	r3, #1
   18f44:	adds	r4, r0, r4
   18f48:	adc	r0, r1, r5
   18f4c:	mov	r1, #0
   18f50:	cmn	r0, #1
   18f54:	movwgt	r1, #1
   18f58:	subs	r1, r3, r1
   18f5c:	movwne	r1, #1
   18f60:	cmn	r5, #1
   18f64:	movwgt	r2, #1
   18f68:	sub	r2, r3, r2
   18f6c:	clz	r2, r2
   18f70:	lsr	r2, r2, #5
   18f74:	tst	r2, r1
   18f78:	asreq	r1, r4, #31
   18f7c:	eoreq	r2, r4, r4
   18f80:	eoreq	r0, r0, r1
   18f84:	orrseq	r0, r2, r0
   18f88:	beq	18fc4 <__assert_fail@plt+0x7a08>
   18f8c:	ldrb	r0, [sp, #325]	; 0x145
   18f90:	ldr	r6, [fp, #8]
   18f94:	cmp	r0, #0
   18f98:	beq	19a60 <__assert_fail@plt+0x84a4>
   18f9c:	movw	r1, #4354	; 0x1102
   18fa0:	mov	r0, #0
   18fa4:	mov	r2, #5
   18fa8:	movt	r1, #2
   18fac:	bl	11328 <dcgettext@plt>
   18fb0:	movw	r1, #4368	; 0x1110
   18fb4:	movw	r2, #2149	; 0x865
   18fb8:	movt	r1, #2
   18fbc:	bl	16c20 <__assert_fail@plt+0x5664>
   18fc0:	b	19a60 <__assert_fail@plt+0x84a4>
   18fc4:	ldr	r5, [fp, #-164]	; 0xffffff5c
   18fc8:	ldm	r9, {r0, r7}
   18fcc:	mov	r3, #0
   18fd0:	mov	r2, #0
   18fd4:	asr	r1, r5, #31
   18fd8:	cmn	r1, #1
   18fdc:	movwgt	r3, #1
   18fe0:	adds	r5, r5, r0
   18fe4:	adc	r0, r1, r7
   18fe8:	mov	r1, #0
   18fec:	cmn	r0, #1
   18ff0:	movwgt	r1, #1
   18ff4:	subs	r1, r3, r1
   18ff8:	movwne	r1, #1
   18ffc:	cmn	r7, #1
   19000:	movwgt	r2, #1
   19004:	sub	r2, r3, r2
   19008:	clz	r2, r2
   1900c:	lsr	r2, r2, #5
   19010:	tst	r2, r1
   19014:	asreq	r1, r5, #31
   19018:	eoreq	r2, r5, r5
   1901c:	eoreq	r0, r0, r1
   19020:	orrseq	r0, r2, r0
   19024:	bne	18f8c <__assert_fail@plt+0x79d0>
   19028:	str	r4, [fp, #-160]	; 0xffffff60
   1902c:	str	r6, [fp, #-156]	; 0xffffff64
   19030:	str	r5, [sp, #92]	; 0x5c
   19034:	str	r5, [fp, #-164]	; 0xffffff5c
   19038:	sub	r2, fp, #220	; 0xdc
   1903c:	sub	ip, fp, #176	; 0xb0
   19040:	ldm	r2, {r0, r1, r2}
   19044:	ldr	r3, [fp, #-188]	; 0xffffff44
   19048:	stm	ip, {r0, r1, r2}
   1904c:	sub	r1, fp, #176	; 0xb0
   19050:	str	r3, [fp, #-144]	; 0xffffff70
   19054:	ldr	r0, [sp, #88]	; 0x58
   19058:	bl	1c3bc <__assert_fail@plt+0xae00>
   1905c:	ldrb	r1, [sp, #325]	; 0x145
   19060:	cmn	r0, #1
   19064:	str	r0, [sp, #96]	; 0x60
   19068:	beq	1922c <__assert_fail@plt+0x7c70>
   1906c:	cmp	r1, #0
   19070:	beq	19574 <__assert_fail@plt+0x7fb8>
   19074:	movw	r1, #4448	; 0x1160
   19078:	mov	r0, #0
   1907c:	mov	r2, #5
   19080:	movt	r1, #2
   19084:	bl	11328 <dcgettext@plt>
   19088:	ldr	r7, [r8]
   1908c:	ldr	r5, [r8, #4]
   19090:	ldr	r8, [sl]
   19094:	ldr	r1, [sl, #4]
   19098:	ldrd	r2, [r9]
   1909c:	str	r8, [sp]
   190a0:	stmib	sp, {r1, r2, r3}
   190a4:	mov	r2, r7
   190a8:	mov	r3, r5
   190ac:	bl	16c20 <__assert_fail@plt+0x5664>
   190b0:	movw	r1, #4512	; 0x11a0
   190b4:	mov	r0, #0
   190b8:	mov	r2, #5
   190bc:	movt	r1, #2
   190c0:	bl	11328 <dcgettext@plt>
   190c4:	movw	r2, #5615	; 0x15ef
   190c8:	str	r0, [sp, #84]	; 0x54
   190cc:	mov	r0, #0
   190d0:	sub	r3, fp, #176	; 0xb0
   190d4:	mov	r1, #100	; 0x64
   190d8:	str	r0, [sp]
   190dc:	str	r0, [sp, #4]
   190e0:	sub	r0, fp, #348	; 0x15c
   190e4:	movt	r2, #2
   190e8:	bl	1d55c <__assert_fail@plt+0xbfa0>
   190ec:	cmp	r0, #99	; 0x63
   190f0:	bgt	193cc <__assert_fail@plt+0x7e10>
   190f4:	mov	r8, r0
   190f8:	ldr	r0, [sp, #320]	; 0x140
   190fc:	cmp	r0, #0
   19100:	beq	193cc <__assert_fail@plt+0x7e10>
   19104:	ldr	r1, [sp, #168]	; 0xa8
   19108:	mov	r0, #43	; 0x2b
   1910c:	movw	r3, #2583	; 0xa17
   19110:	mov	r2, #27
   19114:	movt	r3, #2
   19118:	cmp	r1, #0
   1911c:	mov	r7, r1
   19120:	movwlt	r0, #45	; 0x2d
   19124:	str	r0, [sp]
   19128:	movw	r0, #46021	; 0xb3c5
   1912c:	movt	r0, #37282	; 0x91a2
   19130:	smmla	r0, r1, r0, r1
   19134:	asr	r1, r0, #11
   19138:	add	r5, r1, r0, lsr #31
   1913c:	mov	r1, #1
   19140:	cmp	r5, #0
   19144:	mov	r0, r5
   19148:	rsbmi	r0, r5, #0
   1914c:	str	r0, [sp, #4]
   19150:	add	r0, sp, #100	; 0x64
   19154:	bl	1149c <__sprintf_chk@plt>
   19158:	mov	r2, r0
   1915c:	mov	r0, #3600	; 0xe10
   19160:	rsb	r1, r8, #100	; 0x64
   19164:	mls	r3, r5, r0, r7
   19168:	sub	r0, fp, #348	; 0x15c
   1916c:	cmp	r3, #0
   19170:	mov	ip, r3
   19174:	add	r0, r0, r8
   19178:	rsbmi	ip, r3, #0
   1917c:	cmp	r3, #0
   19180:	beq	193ac <__assert_fail@plt+0x7df0>
   19184:	add	r3, sp, #100	; 0x64
   19188:	add	r2, r3, r2
   1918c:	mov	r3, #58	; 0x3a
   19190:	strb	r3, [r2]
   19194:	movw	r3, #33205	; 0x81b5
   19198:	movt	r3, #6990	; 0x1b4e
   1919c:	umull	r3, r5, ip, r3
   191a0:	mov	r3, #48	; 0x30
   191a4:	add	r3, r3, r5, lsr #6
   191a8:	movw	r5, #52429	; 0xcccd
   191ac:	strb	r3, [r2, #1]
   191b0:	movw	r3, #34953	; 0x8889
   191b4:	movt	r5, #52428	; 0xcccc
   191b8:	movt	r3, #34952	; 0x8888
   191bc:	umull	r3, r7, ip, r3
   191c0:	lsr	r3, r7, #5
   191c4:	umull	r8, lr, r3, r5
   191c8:	lsr	r5, lr, #3
   191cc:	add	r5, r5, r5, lsl #2
   191d0:	sub	r5, r3, r5, lsl #1
   191d4:	lsl	r3, r3, #4
   191d8:	sub	r3, r3, r7, lsr #5
   191dc:	orr	r5, r5, #48	; 0x30
   191e0:	sub	r3, ip, r3, lsl #2
   191e4:	strb	r5, [r2, #2]
   191e8:	cmp	r3, #0
   191ec:	beq	193a0 <__assert_fail@plt+0x7de4>
   191f0:	mov	r7, #58	; 0x3a
   191f4:	strb	r7, [r2, #3]
   191f8:	movw	r7, #52429	; 0xcccd
   191fc:	movt	r7, #52428	; 0xcccc
   19200:	umull	r7, r5, r3, r7
   19204:	mov	r7, #48	; 0x30
   19208:	orr	r7, r7, r5, lsr #3
   1920c:	strb	r7, [r2, #4]
   19210:	lsr	r7, r5, #3
   19214:	add	r7, r7, r7, lsl #2
   19218:	sub	r3, r3, r7, lsl #1
   1921c:	orr	r3, r3, #48	; 0x30
   19220:	strb	r3, [r2, #5]
   19224:	add	r2, r2, #6
   19228:	b	193a4 <__assert_fail@plt+0x7de8>
   1922c:	ldr	r6, [fp, #8]
   19230:	cmp	r1, #0
   19234:	beq	19a60 <__assert_fail@plt+0x84a4>
   19238:	movw	r1, #4385	; 0x1121
   1923c:	mov	r0, #0
   19240:	mov	r2, #5
   19244:	mov	r4, #0
   19248:	movt	r1, #2
   1924c:	bl	11328 <dcgettext@plt>
   19250:	movw	r2, #5615	; 0x15ef
   19254:	sub	r7, fp, #348	; 0x15c
   19258:	mov	r9, r0
   1925c:	sub	r3, fp, #176	; 0xb0
   19260:	mov	r1, #100	; 0x64
   19264:	str	r4, [sp]
   19268:	str	r4, [sp, #4]
   1926c:	movt	r2, #2
   19270:	mov	r0, r7
   19274:	bl	1d55c <__assert_fail@plt+0xbfa0>
   19278:	cmp	r0, #99	; 0x63
   1927c:	bgt	19bac <__assert_fail@plt+0x85f0>
   19280:	mov	r6, r0
   19284:	ldr	r0, [sp, #320]	; 0x140
   19288:	cmp	r0, #0
   1928c:	beq	19bac <__assert_fail@plt+0x85f0>
   19290:	ldr	r5, [sp, #168]	; 0xa8
   19294:	mov	r0, #43	; 0x2b
   19298:	movw	r3, #2583	; 0xa17
   1929c:	add	r8, sp, #100	; 0x64
   192a0:	mov	r2, #27
   192a4:	movt	r3, #2
   192a8:	cmp	r5, #0
   192ac:	movwlt	r0, #45	; 0x2d
   192b0:	str	r0, [sp]
   192b4:	movw	r0, #46021	; 0xb3c5
   192b8:	movt	r0, #37282	; 0x91a2
   192bc:	smmla	r0, r5, r0, r5
   192c0:	asr	r1, r0, #11
   192c4:	add	r4, r1, r0, lsr #31
   192c8:	mov	r1, #1
   192cc:	cmp	r4, #0
   192d0:	mov	r0, r4
   192d4:	rsbmi	r0, r4, #0
   192d8:	str	r0, [sp, #4]
   192dc:	mov	r0, r8
   192e0:	bl	1149c <__sprintf_chk@plt>
   192e4:	mov	r2, r0
   192e8:	mov	r0, #3600	; 0xe10
   192ec:	rsb	r1, r6, #100	; 0x64
   192f0:	mls	r3, r4, r0, r5
   192f4:	add	r0, r7, r6
   192f8:	cmp	r3, #0
   192fc:	mov	r4, r3
   19300:	rsbmi	r4, r3, #0
   19304:	cmp	r3, #0
   19308:	beq	19b94 <__assert_fail@plt+0x85d8>
   1930c:	movw	r3, #33205	; 0x81b5
   19310:	mov	lr, #48	; 0x30
   19314:	add	r2, r8, r2
   19318:	mov	ip, #58	; 0x3a
   1931c:	movw	sl, #52429	; 0xcccd
   19320:	movt	r3, #6990	; 0x1b4e
   19324:	strb	ip, [r2]
   19328:	movt	sl, #52428	; 0xcccc
   1932c:	umull	r3, r5, r4, r3
   19330:	add	r3, lr, r5, lsr #6
   19334:	strb	r3, [r2, #1]
   19338:	movw	r3, #34953	; 0x8889
   1933c:	movt	r3, #34952	; 0x8888
   19340:	umull	r3, r7, r4, r3
   19344:	lsr	r3, r7, #5
   19348:	umull	r6, r5, r3, sl
   1934c:	lsr	r5, r5, #3
   19350:	add	r5, r5, r5, lsl #2
   19354:	sub	r5, r3, r5, lsl #1
   19358:	lsl	r3, r3, #4
   1935c:	sub	r3, r3, r7, lsr #5
   19360:	orr	r5, r5, #48	; 0x30
   19364:	sub	r3, r4, r3, lsl #2
   19368:	strb	r5, [r2, #2]
   1936c:	cmp	r3, #0
   19370:	beq	19b88 <__assert_fail@plt+0x85cc>
   19374:	umull	r7, r6, r3, sl
   19378:	strb	ip, [r2, #3]
   1937c:	orr	r7, lr, r6, lsr #3
   19380:	strb	r7, [r2, #4]
   19384:	lsr	r7, r6, #3
   19388:	add	r7, r7, r7, lsl #2
   1938c:	sub	r3, r3, r7, lsl #1
   19390:	orr	r3, r3, #48	; 0x30
   19394:	strb	r3, [r2, #5]
   19398:	add	r2, r2, #6
   1939c:	b	19b8c <__assert_fail@plt+0x85d0>
   193a0:	add	r2, r2, #3
   193a4:	mov	r3, #0
   193a8:	strb	r3, [r2]
   193ac:	movw	r2, #5641	; 0x1609
   193b0:	mvn	r3, #0
   193b4:	movt	r2, #2
   193b8:	str	r2, [sp]
   193bc:	add	r2, sp, #100	; 0x64
   193c0:	str	r2, [sp, #4]
   193c4:	mov	r2, #1
   193c8:	bl	115b0 <__snprintf_chk@plt>
   193cc:	ldr	r0, [sp, #84]	; 0x54
   193d0:	sub	r1, fp, #348	; 0x15c
   193d4:	bl	16c20 <__assert_fail@plt+0x5664>
   193d8:	ldr	r0, [fp, #-188]	; 0xffffff44
   193dc:	cmn	r0, #1
   193e0:	ldrne	r1, [fp, #-144]	; 0xffffff70
   193e4:	cmpne	r1, r0
   193e8:	beq	19404 <__assert_fail@plt+0x7e48>
   193ec:	movw	r1, #4538	; 0x11ba
   193f0:	mov	r0, #0
   193f4:	mov	r2, #5
   193f8:	movt	r1, #2
   193fc:	bl	11328 <dcgettext@plt>
   19400:	bl	16c20 <__assert_fail@plt+0x5664>
   19404:	ldrd	r0, [r9]
   19408:	orrs	r0, r0, r1
   1940c:	bne	19574 <__assert_fail@plt+0x7fb8>
   19410:	ldr	r0, [fp, #-164]	; 0xffffff5c
   19414:	ldr	r1, [sp, #92]	; 0x5c
   19418:	cmp	r0, r1
   1941c:	bne	19438 <__assert_fail@plt+0x7e7c>
   19420:	ldrd	r0, [sl]
   19424:	orrs	r0, r0, r1
   19428:	bne	19574 <__assert_fail@plt+0x7fb8>
   1942c:	ldr	r0, [fp, #-160]	; 0xffffff60
   19430:	cmp	r0, r4
   19434:	beq	19574 <__assert_fail@plt+0x7fb8>
   19438:	movw	r1, #4599	; 0x11f7
   1943c:	mov	r0, #0
   19440:	mov	r2, #5
   19444:	movt	r1, #2
   19448:	bl	11328 <dcgettext@plt>
   1944c:	bl	16c20 <__assert_fail@plt+0x5664>
   19450:	movw	r1, #4658	; 0x1232
   19454:	mov	r0, #0
   19458:	mov	r2, #5
   1945c:	movt	r1, #2
   19460:	bl	11328 <dcgettext@plt>
   19464:	str	r0, [sp, #84]	; 0x54
   19468:	movw	r0, #34079	; 0x851f
   1946c:	mov	r5, #100	; 0x64
   19470:	mvn	r9, #18
   19474:	movw	r7, #5669	; 0x1625
   19478:	movt	r0, #20971	; 0x51eb
   1947c:	movt	r7, #2
   19480:	smmul	r0, r6, r0
   19484:	add	sl, r7, #1
   19488:	mov	r3, r7
   1948c:	asr	r1, r0, #5
   19490:	add	r0, r1, r0, lsr #31
   19494:	mls	r1, r0, r5, r6
   19498:	add	r2, r0, #19
   1949c:	cmp	r1, #0
   194a0:	rsbmi	r1, r1, #0
   194a4:	cmn	r6, #2000	; 0x7d0
   194a8:	suble	r2, r9, r0
   194ac:	movw	r0, #63537	; 0xf831
   194b0:	str	r1, [sp, #4]
   194b4:	mov	r1, #1
   194b8:	movt	r0, #65535	; 0xffff
   194bc:	str	r2, [sp]
   194c0:	mov	r2, #13
   194c4:	add	r8, r0, #98	; 0x62
   194c8:	cmp	r6, r8
   194cc:	add	r6, sp, #100	; 0x64
   194d0:	movgt	r3, sl
   194d4:	mov	r0, r6
   194d8:	bl	1149c <__sprintf_chk@plt>
   194dc:	ldr	r0, [sp, #84]	; 0x54
   194e0:	ldr	r3, [sp, #92]	; 0x5c
   194e4:	add	r2, r4, #1
   194e8:	mov	r1, r6
   194ec:	bl	16c20 <__assert_fail@plt+0x5664>
   194f0:	movw	r1, #4693	; 0x1255
   194f4:	mov	r0, #0
   194f8:	mov	r2, #5
   194fc:	movt	r1, #2
   19500:	bl	11328 <dcgettext@plt>
   19504:	mov	r4, r0
   19508:	ldr	r0, [fp, #-156]	; 0xffffff64
   1950c:	movw	r1, #34079	; 0x851f
   19510:	movt	r1, #20971	; 0x51eb
   19514:	smmul	r1, r0, r1
   19518:	asr	r2, r1, #5
   1951c:	add	r2, r2, r1, lsr #31
   19520:	mls	r1, r2, r5, r0
   19524:	add	r3, r2, #19
   19528:	cmp	r1, #0
   1952c:	rsbmi	r1, r1, #0
   19530:	cmn	r0, #2000	; 0x7d0
   19534:	suble	r3, r9, r2
   19538:	cmp	r0, r8
   1953c:	str	r1, [sp, #4]
   19540:	mov	r0, r6
   19544:	mov	r1, #1
   19548:	mov	r2, #13
   1954c:	movgt	r7, sl
   19550:	str	r3, [sp]
   19554:	mov	r3, r7
   19558:	bl	1149c <__sprintf_chk@plt>
   1955c:	ldr	r0, [fp, #-160]	; 0xffffff60
   19560:	ldr	r3, [fp, #-164]	; 0xffffff5c
   19564:	mov	r1, r6
   19568:	add	r2, r0, #1
   1956c:	mov	r0, r4
   19570:	bl	16c20 <__assert_fail@plt+0x5664>
   19574:	ldr	ip, [sp, #96]	; 0x60
   19578:	ldr	r0, [sp, #320]	; 0x140
   1957c:	cmp	r0, #0
   19580:	beq	195d8 <__assert_fail@plt+0x801c>
   19584:	ldr	r0, [fp, #-140]	; 0xffffff74
   19588:	ldr	r2, [sp, #168]	; 0xa8
   1958c:	asr	r1, r0, #31
   19590:	subs	r0, r0, r2
   19594:	sbc	r1, r1, r2, asr #31
   19598:	adds	r9, r0, ip
   1959c:	adc	r0, r1, ip, asr #31
   195a0:	teq	r0, r9, asr #31
   195a4:	beq	195dc <__assert_fail@plt+0x8020>
   195a8:	ldrb	r0, [sp, #325]	; 0x145
   195ac:	ldr	r6, [fp, #8]
   195b0:	cmp	r0, #0
   195b4:	beq	19a60 <__assert_fail@plt+0x84a4>
   195b8:	movw	r1, #4728	; 0x1278
   195bc:	mov	r0, #0
   195c0:	mov	r2, #5
   195c4:	movt	r1, #2
   195c8:	bl	11328 <dcgettext@plt>
   195cc:	ldr	r1, [sp, #168]	; 0xa8
   195d0:	bl	16c20 <__assert_fail@plt+0x5664>
   195d4:	b	19a60 <__assert_fail@plt+0x84a4>
   195d8:	mov	r9, ip
   195dc:	ldrb	r0, [sp, #325]	; 0x145
   195e0:	cmp	r0, #0
   195e4:	beq	19790 <__assert_fail@plt+0x81d4>
   195e8:	movw	r1, #4771	; 0x12a3
   195ec:	mov	r0, #0
   195f0:	mov	r2, #5
   195f4:	mov	r4, #0
   195f8:	movt	r1, #2
   195fc:	bl	11328 <dcgettext@plt>
   19600:	movw	r2, #5615	; 0x15ef
   19604:	str	r4, [sp]
   19608:	str	r4, [sp, #4]
   1960c:	sub	r4, fp, #348	; 0x15c
   19610:	mov	sl, r0
   19614:	sub	r3, fp, #176	; 0xb0
   19618:	mov	r1, #100	; 0x64
   1961c:	movt	r2, #2
   19620:	mov	r0, r4
   19624:	bl	1d55c <__assert_fail@plt+0xbfa0>
   19628:	cmp	r0, #99	; 0x63
   1962c:	bgt	1977c <__assert_fail@plt+0x81c0>
   19630:	mov	r6, r0
   19634:	ldr	r0, [sp, #320]	; 0x140
   19638:	cmp	r0, #0
   1963c:	beq	1977c <__assert_fail@plt+0x81c0>
   19640:	ldr	r5, [sp, #168]	; 0xa8
   19644:	mov	r0, #43	; 0x2b
   19648:	movw	r3, #2583	; 0xa17
   1964c:	mov	r2, #27
   19650:	movt	r3, #2
   19654:	cmp	r5, #0
   19658:	movwlt	r0, #45	; 0x2d
   1965c:	str	r0, [sp]
   19660:	movw	r0, #46021	; 0xb3c5
   19664:	movt	r0, #37282	; 0x91a2
   19668:	smmla	r0, r5, r0, r5
   1966c:	asr	r1, r0, #11
   19670:	add	r7, r1, r0, lsr #31
   19674:	mov	r1, #1
   19678:	cmp	r7, #0
   1967c:	mov	r0, r7
   19680:	rsbmi	r0, r7, #0
   19684:	str	r0, [sp, #4]
   19688:	add	r0, sp, #100	; 0x64
   1968c:	bl	1149c <__sprintf_chk@plt>
   19690:	mov	r2, r0
   19694:	mov	r0, #3600	; 0xe10
   19698:	rsb	r1, r6, #100	; 0x64
   1969c:	mls	r3, r7, r0, r5
   196a0:	add	r0, r4, r6
   196a4:	cmp	r3, #0
   196a8:	mov	r7, r3
   196ac:	rsbmi	r7, r3, #0
   196b0:	cmp	r3, #0
   196b4:	beq	1975c <__assert_fail@plt+0x81a0>
   196b8:	movw	r6, #33205	; 0x81b5
   196bc:	add	r3, sp, #100	; 0x64
   196c0:	mov	lr, #48	; 0x30
   196c4:	mov	ip, #58	; 0x3a
   196c8:	movw	r8, #52429	; 0xcccd
   196cc:	movt	r6, #6990	; 0x1b4e
   196d0:	add	r2, r3, r2
   196d4:	movt	r8, #52428	; 0xcccc
   196d8:	umull	r6, r5, r7, r6
   196dc:	strb	ip, [r2]
   196e0:	add	r5, lr, r5, lsr #6
   196e4:	strb	r5, [r2, #1]
   196e8:	movw	r5, #34953	; 0x8889
   196ec:	movt	r5, #34952	; 0x8888
   196f0:	umull	r5, r4, r7, r5
   196f4:	lsr	r3, r4, #5
   196f8:	umull	r6, r5, r3, r8
   196fc:	lsr	r5, r5, #3
   19700:	add	r5, r5, r5, lsl #2
   19704:	sub	r5, r3, r5, lsl #1
   19708:	lsl	r3, r3, #4
   1970c:	sub	r3, r3, r4, lsr #5
   19710:	orr	r5, r5, #48	; 0x30
   19714:	sub	r7, r7, r3, lsl #2
   19718:	strb	r5, [r2, #2]
   1971c:	cmp	r7, #0
   19720:	beq	19750 <__assert_fail@plt+0x8194>
   19724:	umull	r3, r6, r7, r8
   19728:	strb	ip, [r2, #3]
   1972c:	orr	r3, lr, r6, lsr #3
   19730:	strb	r3, [r2, #4]
   19734:	lsr	r3, r6, #3
   19738:	add	r3, r3, r3, lsl #2
   1973c:	sub	r3, r7, r3, lsl #1
   19740:	orr	r3, r3, #48	; 0x30
   19744:	strb	r3, [r2, #5]
   19748:	add	r2, r2, #6
   1974c:	b	19754 <__assert_fail@plt+0x8198>
   19750:	add	r2, r2, #3
   19754:	mov	r3, #0
   19758:	strb	r3, [r2]
   1975c:	movw	r2, #5641	; 0x1609
   19760:	mvn	r3, #0
   19764:	movt	r2, #2
   19768:	str	r2, [sp]
   1976c:	add	r2, sp, #100	; 0x64
   19770:	str	r2, [sp, #4]
   19774:	mov	r2, #1
   19778:	bl	115b0 <__snprintf_chk@plt>
   1977c:	asr	r3, r9, #31
   19780:	sub	r1, fp, #348	; 0x15c
   19784:	mov	r0, sl
   19788:	mov	r2, r9
   1978c:	bl	16c20 <__assert_fail@plt+0x5664>
   19790:	ldr	r8, [sp, #288]	; 0x120
   19794:	ldr	r0, [sp, #236]	; 0xec
   19798:	movw	r7, #51712	; 0xca00
   1979c:	ldr	sl, [sp, #264]	; 0x108
   197a0:	ldr	r5, [sp, #268]	; 0x10c
   197a4:	mov	r3, #0
   197a8:	movt	r7, #15258	; 0x3b9a
   197ac:	mov	r2, r7
   197b0:	asr	r1, r8, #31
   197b4:	adds	r6, r8, r0
   197b8:	adc	r4, r1, r0, asr #31
   197bc:	mov	r0, r6
   197c0:	mov	r1, r4
   197c4:	bl	1f040 <__assert_fail@plt+0xda84>
   197c8:	adds	r0, r2, r7
   197cc:	mov	r2, r7
   197d0:	adc	r1, r3, #0
   197d4:	mov	r3, #0
   197d8:	bl	1f040 <__assert_fail@plt+0xda84>
   197dc:	subs	r0, r6, r2
   197e0:	str	r2, [sp, #84]	; 0x54
   197e4:	mov	r3, #0
   197e8:	sbc	r1, r4, r2, asr #31
   197ec:	mov	r2, r7
   197f0:	bl	1f040 <__assert_fail@plt+0xda84>
   197f4:	cmn	r5, #1
   197f8:	str	r0, [sp, #92]	; 0x5c
   197fc:	str	r1, [sp, #96]	; 0x60
   19800:	ble	19824 <__assert_fail@plt+0x8268>
   19804:	movw	r1, #24175	; 0x5e6f
   19808:	movw	r0, #6699	; 0x1a2b
   1980c:	movt	r1, #15437	; 0x3c4d
   19810:	movt	r0, #9
   19814:	subs	r1, r1, sl
   19818:	sbcs	r0, r0, r5
   1981c:	bge	19858 <__assert_fail@plt+0x829c>
   19820:	b	19a38 <__assert_fail@plt+0x847c>
   19824:	mvn	r1, #0
   19828:	eor	r0, sl, r1
   1982c:	eor	r1, r5, r1
   19830:	orrs	r0, r0, r1
   19834:	beq	19858 <__assert_fail@plt+0x829c>
   19838:	mov	r0, #0
   1983c:	mov	r1, #-2147483648	; 0x80000000
   19840:	mov	r2, sl
   19844:	mov	r3, r5
   19848:	bl	1f040 <__assert_fail@plt+0xda84>
   1984c:	subs	r0, r0, #3600	; 0xe10
   19850:	sbcs	r0, r1, #0
   19854:	blt	19a38 <__assert_fail@plt+0x847c>
   19858:	mov	r0, #3600	; 0xe10
   1985c:	mov	r3, #0
   19860:	umull	r1, r2, sl, r0
   19864:	mla	r0, r5, r0, r2
   19868:	adds	r4, r9, r1
   1986c:	asr	r2, r9, #31
   19870:	mov	r1, #0
   19874:	adc	r6, r2, r0
   19878:	cmn	r6, #1
   1987c:	movwgt	r3, #1
   19880:	cmn	r2, #1
   19884:	mov	r2, #0
   19888:	movwgt	r2, #1
   1988c:	subs	r3, r2, r3
   19890:	movwne	r3, #1
   19894:	cmn	r0, #1
   19898:	movwgt	r1, #1
   1989c:	sub	r0, r2, r1
   198a0:	clz	r0, r0
   198a4:	lsr	r0, r0, #5
   198a8:	tst	r0, r3
   198ac:	bne	19a38 <__assert_fail@plt+0x847c>
   198b0:	ldr	r9, [sp, #276]	; 0x114
   198b4:	ldr	r0, [sp, #272]	; 0x110
   198b8:	cmn	r9, #1
   198bc:	str	r0, [sp, #76]	; 0x4c
   198c0:	ble	198e8 <__assert_fail@plt+0x832c>
   198c4:	ldr	r2, [sp, #76]	; 0x4c
   198c8:	movw	r1, #8738	; 0x2222
   198cc:	movw	r0, #8738	; 0x2222
   198d0:	movt	r1, #8738	; 0x2222
   198d4:	movt	r0, #546	; 0x222
   198d8:	subs	r1, r1, r2
   198dc:	sbcs	r0, r0, r9
   198e0:	bge	19920 <__assert_fail@plt+0x8364>
   198e4:	b	19a38 <__assert_fail@plt+0x847c>
   198e8:	ldr	r0, [sp, #76]	; 0x4c
   198ec:	mvn	r1, #0
   198f0:	eor	r0, r0, r1
   198f4:	eor	r1, r9, r1
   198f8:	orrs	r0, r0, r1
   198fc:	beq	19920 <__assert_fail@plt+0x8364>
   19900:	ldr	r2, [sp, #76]	; 0x4c
   19904:	mov	r0, #0
   19908:	mov	r1, #-2147483648	; 0x80000000
   1990c:	mov	r3, r9
   19910:	bl	1f040 <__assert_fail@plt+0xda84>
   19914:	subs	r0, r0, #60	; 0x3c
   19918:	sbcs	r0, r1, #0
   1991c:	blt	19a38 <__assert_fail@plt+0x847c>
   19920:	ldr	r1, [sp, #76]	; 0x4c
   19924:	mov	r0, #60	; 0x3c
   19928:	rsb	r2, r9, r9, lsl #4
   1992c:	umull	r0, r1, r1, r0
   19930:	add	r1, r1, r2, lsl #2
   19934:	adds	r3, r4, r0
   19938:	mov	r0, #0
   1993c:	mov	r2, #0
   19940:	adc	r4, r6, r1
   19944:	cmn	r4, #1
   19948:	movwgt	r0, #1
   1994c:	cmn	r6, #1
   19950:	mov	r6, #0
   19954:	movwgt	r6, #1
   19958:	subs	r0, r6, r0
   1995c:	movwne	r0, #1
   19960:	cmn	r1, #1
   19964:	mov	r1, #0
   19968:	movwgt	r1, #1
   1996c:	sub	r1, r6, r1
   19970:	clz	r1, r1
   19974:	lsr	r1, r1, #5
   19978:	ands	r0, r1, r0
   1997c:	bne	19a38 <__assert_fail@plt+0x847c>
   19980:	ldr	ip, [sp, #280]	; 0x118
   19984:	ldr	r0, [sp, #284]	; 0x11c
   19988:	cmn	r4, #1
   1998c:	mov	r6, #0
   19990:	mov	r1, #0
   19994:	movwgt	r6, #1
   19998:	adds	r3, r3, ip
   1999c:	adc	r4, r4, r0
   199a0:	cmn	r4, #1
   199a4:	movwgt	r1, #1
   199a8:	subs	r1, r6, r1
   199ac:	movwne	r1, #1
   199b0:	cmn	r0, #1
   199b4:	movwgt	r2, #1
   199b8:	sub	r2, r6, r2
   199bc:	clz	r2, r2
   199c0:	lsr	r2, r2, #5
   199c4:	ands	r1, r2, r1
   199c8:	bne	19a38 <__assert_fail@plt+0x847c>
   199cc:	ldr	r6, [sp, #92]	; 0x5c
   199d0:	cmn	r4, #1
   199d4:	mov	r2, #0
   199d8:	mov	r1, #0
   199dc:	movwgt	r2, #1
   199e0:	adds	r3, r3, r6
   199e4:	ldr	r6, [sp, #96]	; 0x60
   199e8:	str	r3, [sp, #92]	; 0x5c
   199ec:	adc	r3, r4, r6
   199f0:	mov	r4, r3
   199f4:	cmn	r3, #1
   199f8:	mov	r3, #0
   199fc:	movwgt	r3, #1
   19a00:	subs	r3, r2, r3
   19a04:	movwne	r3, #1
   19a08:	cmn	r6, #1
   19a0c:	movwgt	r1, #1
   19a10:	sub	r1, r2, r1
   19a14:	clz	r1, r1
   19a18:	lsr	r1, r1, #5
   19a1c:	tst	r1, r3
   19a20:	ldreq	r2, [sp, #92]	; 0x5c
   19a24:	asreq	r1, r2, #31
   19a28:	eoreq	r2, r2, r2
   19a2c:	eoreq	r1, r4, r1
   19a30:	orrseq	r1, r2, r1
   19a34:	beq	19a78 <__assert_fail@plt+0x84bc>
   19a38:	ldrb	r0, [sp, #325]	; 0x145
   19a3c:	cmp	r0, #0
   19a40:	beq	19a5c <__assert_fail@plt+0x84a0>
   19a44:	movw	r1, #4798	; 0x12be
   19a48:	mov	r0, #0
   19a4c:	mov	r2, #5
   19a50:	movt	r1, #2
   19a54:	bl	11328 <dcgettext@plt>
   19a58:	bl	16c20 <__assert_fail@plt+0x5664>
   19a5c:	ldr	r6, [fp, #8]
   19a60:	mov	r7, #0
   19a64:	ldr	r4, [sp, #80]	; 0x50
   19a68:	ldr	r5, [sp, #88]	; 0x58
   19a6c:	cmp	r5, r6
   19a70:	bne	175d0 <__assert_fail@plt+0x6014>
   19a74:	b	175d8 <__assert_fail@plt+0x601c>
   19a78:	ldr	r1, [sp, #68]	; 0x44
   19a7c:	ldr	r2, [sp, #92]	; 0x5c
   19a80:	str	r2, [r1]
   19a84:	ldr	r2, [sp, #84]	; 0x54
   19a88:	str	r2, [r1, #4]
   19a8c:	ldrb	r1, [sp, #325]	; 0x145
   19a90:	cmp	r1, #0
   19a94:	beq	19b70 <__assert_fail@plt+0x85b4>
   19a98:	ldr	r2, [sp, #76]	; 0x4c
   19a9c:	orr	r1, sl, r8
   19aa0:	orr	r1, r1, r2
   19aa4:	orr	r2, r5, r8, asr #31
   19aa8:	orr	r2, r2, r9
   19aac:	orr	r1, r1, ip
   19ab0:	orr	r0, r2, r0
   19ab4:	orrs	r0, r1, r0
   19ab8:	beq	19b70 <__assert_fail@plt+0x85b4>
   19abc:	add	r0, sp, #144	; 0x90
   19ac0:	movw	r1, #4846	; 0x12ee
   19ac4:	mov	r2, #5
   19ac8:	add	r6, r0, #120	; 0x78
   19acc:	add	r5, r0, #128	; 0x80
   19ad0:	add	r7, r0, #136	; 0x88
   19ad4:	movt	r1, #2
   19ad8:	mov	r0, #0
   19adc:	bl	11328 <dcgettext@plt>
   19ae0:	ldrd	r2, [r6]
   19ae4:	ldr	r6, [r5]
   19ae8:	ldr	r5, [r5, #4]
   19aec:	ldrd	r8, [r7]
   19af0:	ldr	r1, [sp, #288]	; 0x120
   19af4:	str	r6, [sp]
   19af8:	stmib	sp, {r5, r8, r9}
   19afc:	str	r1, [sp, #16]
   19b00:	bl	16c20 <__assert_fail@plt+0x5664>
   19b04:	movw	r1, #4922	; 0x133a
   19b08:	mov	r0, #0
   19b0c:	mov	r2, #5
   19b10:	movt	r1, #2
   19b14:	bl	11328 <dcgettext@plt>
   19b18:	ldr	r2, [sp, #92]	; 0x5c
   19b1c:	mov	r3, r4
   19b20:	bl	16c20 <__assert_fail@plt+0x5664>
   19b24:	ldr	r0, [fp, #-144]	; 0xffffff70
   19b28:	cmn	r0, #1
   19b2c:	beq	19b70 <__assert_fail@plt+0x85b4>
   19b30:	ldr	r0, [sp, #88]	; 0x58
   19b34:	ldr	r1, [sp, #68]	; 0x44
   19b38:	add	r2, sp, #100	; 0x64
   19b3c:	bl	1bfe8 <__assert_fail@plt+0xaa2c>
   19b40:	cmp	r0, #0
   19b44:	beq	19b70 <__assert_fail@plt+0x85b4>
   19b48:	ldr	r0, [sp, #132]	; 0x84
   19b4c:	ldr	r1, [fp, #-144]	; 0xffffff70
   19b50:	cmp	r1, r0
   19b54:	beq	19b70 <__assert_fail@plt+0x85b4>
   19b58:	movw	r1, #4957	; 0x135d
   19b5c:	mov	r0, #0
   19b60:	mov	r2, #5
   19b64:	movt	r1, #2
   19b68:	bl	11328 <dcgettext@plt>
   19b6c:	bl	16c20 <__assert_fail@plt+0x5664>
   19b70:	ldr	r6, [fp, #8]
   19b74:	ldr	r4, [sp, #80]	; 0x50
   19b78:	ldr	r5, [sp, #88]	; 0x58
   19b7c:	ldr	r7, [sp, #68]	; 0x44
   19b80:	mov	r2, r6
   19b84:	b	17150 <__assert_fail@plt+0x5b94>
   19b88:	add	r2, r2, #3
   19b8c:	mov	r3, #0
   19b90:	strb	r3, [r2]
   19b94:	movw	r2, #5641	; 0x1609
   19b98:	mvn	r3, #0
   19b9c:	movt	r2, #2
   19ba0:	stm	sp, {r2, r8}
   19ba4:	mov	r2, #1
   19ba8:	bl	115b0 <__snprintf_chk@plt>
   19bac:	sub	r1, fp, #348	; 0x15c
   19bb0:	mov	r0, r9
   19bb4:	bl	16c20 <__assert_fail@plt+0x5664>
   19bb8:	ldr	r6, [fp, #8]
   19bbc:	b	19a60 <__assert_fail@plt+0x84a4>
   19bc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19bc4:	add	fp, sp, #24
   19bc8:	sub	sp, sp, #8
   19bcc:	mov	r6, r0
   19bd0:	movw	r0, #2410	; 0x96a
   19bd4:	mov	r8, r2
   19bd8:	mov	r5, r1
   19bdc:	movt	r0, #2
   19be0:	bl	113d0 <getenv@plt>
   19be4:	mov	r4, r0
   19be8:	bl	1bf34 <__assert_fail@plt+0xa978>
   19bec:	cmp	r0, #0
   19bf0:	moveq	r0, #0
   19bf4:	subeq	sp, fp, #24
   19bf8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   19bfc:	mov	r7, r0
   19c00:	stm	sp, {r0, r4}
   19c04:	mov	r0, r6
   19c08:	mov	r1, r5
   19c0c:	mov	r2, r8
   19c10:	mov	r3, #0
   19c14:	bl	16c88 <__assert_fail@plt+0x56cc>
   19c18:	mov	r4, r0
   19c1c:	mov	r0, r7
   19c20:	bl	1bfc0 <__assert_fail@plt+0xaa04>
   19c24:	mov	r0, r4
   19c28:	sub	sp, fp, #24
   19c2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c30:	push	{r4, r5, fp, lr}
   19c34:	add	fp, sp, #8
   19c38:	sub	sp, sp, #16
   19c3c:	mov	r5, r0
   19c40:	ldrb	r0, [r0, #188]	; 0xbc
   19c44:	mov	r4, r1
   19c48:	cmp	r0, #0
   19c4c:	beq	19c90 <__assert_fail@plt+0x86d4>
   19c50:	ldrd	r0, [r5, #8]
   19c54:	adds	r2, r0, #1
   19c58:	adc	r3, r1, #0
   19c5c:	rsbs	r2, r2, #13
   19c60:	rscs	r2, r3, #0
   19c64:	bcc	19c9c <__assert_fail@plt+0x86e0>
   19c68:	movw	r2, #344	; 0x158
   19c6c:	mov	r3, #11
   19c70:	movw	r1, #64830	; 0xfd3e
   19c74:	movt	r2, #2
   19c78:	movt	r1, #1
   19c7c:	mla	r0, r0, r3, r2
   19c80:	str	r1, [sp]
   19c84:	add	r0, r0, #11
   19c88:	str	r0, [sp, #4]
   19c8c:	b	19cb0 <__assert_fail@plt+0x86f4>
   19c90:	mov	r0, #0
   19c94:	strb	r0, [r4]
   19c98:	b	19cc4 <__assert_fail@plt+0x8708>
   19c9c:	str	r0, [sp, #8]
   19ca0:	movw	r0, #2578	; 0xa12
   19ca4:	str	r1, [sp, #12]
   19ca8:	movt	r0, #2
   19cac:	str	r0, [sp]
   19cb0:	mov	r0, r4
   19cb4:	mov	r1, #100	; 0x64
   19cb8:	mov	r2, #1
   19cbc:	mvn	r3, #0
   19cc0:	bl	115b0 <__snprintf_chk@plt>
   19cc4:	ldr	r1, [r5, #16]
   19cc8:	cmp	r1, #0
   19ccc:	blt	19d1c <__assert_fail@plt+0x8760>
   19cd0:	cmp	r0, #99	; 0x63
   19cd4:	bhi	19d1c <__assert_fail@plt+0x8760>
   19cd8:	cmp	r1, #6
   19cdc:	bgt	19d1c <__assert_fail@plt+0x8760>
   19ce0:	movw	r2, #498	; 0x1f2
   19ce4:	cmp	r0, #0
   19ce8:	mvn	r3, #0
   19cec:	movt	r2, #2
   19cf0:	add	r1, r2, r1, lsl #2
   19cf4:	movw	r2, #64829	; 0xfd3d
   19cf8:	movt	r2, #1
   19cfc:	str	r1, [sp, #4]
   19d00:	rsb	r1, r0, #100	; 0x64
   19d04:	addeq	r2, r2, #1
   19d08:	str	r2, [sp]
   19d0c:	add	r2, r4, r0
   19d10:	mov	r0, r2
   19d14:	mov	r2, #1
   19d18:	bl	115b0 <__snprintf_chk@plt>
   19d1c:	mov	r0, r4
   19d20:	sub	sp, fp, #8
   19d24:	pop	{r4, r5, fp, pc}
   19d28:	push	{r4, r5, r6, sl, fp, lr}
   19d2c:	add	fp, sp, #16
   19d30:	mov	r4, r1
   19d34:	movw	r1, #2888	; 0xb48
   19d38:	mov	r5, r0
   19d3c:	movt	r1, #2
   19d40:	mov	r0, r4
   19d44:	bl	112a4 <strcmp@plt>
   19d48:	cmp	r0, #0
   19d4c:	beq	19dfc <__assert_fail@plt+0x8840>
   19d50:	movw	r1, #2892	; 0xb4c
   19d54:	mov	r0, r4
   19d58:	movt	r1, #2
   19d5c:	bl	112a4 <strcmp@plt>
   19d60:	movw	r6, #1596	; 0x63c
   19d64:	cmp	r0, #0
   19d68:	movt	r6, #2
   19d6c:	addeq	r5, r6, #12
   19d70:	moveq	r0, r5
   19d74:	popeq	{r4, r5, r6, sl, fp, pc}
   19d78:	movw	r1, #3385	; 0xd39
   19d7c:	mov	r0, r4
   19d80:	movt	r1, #2
   19d84:	bl	112a4 <strcmp@plt>
   19d88:	cmp	r0, #0
   19d8c:	addeq	r5, r6, #24
   19d90:	moveq	r0, r5
   19d94:	popeq	{r4, r5, r6, sl, fp, pc}
   19d98:	ldr	r1, [r5, #192]	; 0xc0
   19d9c:	cmp	r1, #0
   19da0:	beq	19dc4 <__assert_fail@plt+0x8808>
   19da4:	add	r5, r5, #204	; 0xcc
   19da8:	mov	r0, r4
   19dac:	bl	112a4 <strcmp@plt>
   19db0:	cmp	r0, #0
   19db4:	beq	19e0c <__assert_fail@plt+0x8850>
   19db8:	ldr	r1, [r5], #12
   19dbc:	cmp	r1, #0
   19dc0:	bne	19da8 <__assert_fail@plt+0x87ec>
   19dc4:	movw	r5, #1644	; 0x66c
   19dc8:	movw	r1, #2895	; 0xb4f
   19dcc:	movt	r5, #2
   19dd0:	movt	r1, #2
   19dd4:	mov	r0, r4
   19dd8:	bl	112a4 <strcmp@plt>
   19ddc:	cmp	r0, #0
   19de0:	beq	19e10 <__assert_fail@plt+0x8854>
   19de4:	ldr	r1, [r5, #12]!
   19de8:	cmp	r1, #0
   19dec:	bne	19dd4 <__assert_fail@plt+0x8818>
   19df0:	mov	r5, #0
   19df4:	mov	r0, r5
   19df8:	pop	{r4, r5, r6, sl, fp, pc}
   19dfc:	movw	r5, #1596	; 0x63c
   19e00:	movt	r5, #2
   19e04:	mov	r0, r5
   19e08:	pop	{r4, r5, r6, sl, fp, pc}
   19e0c:	sub	r5, r5, #12
   19e10:	mov	r0, r5
   19e14:	pop	{r4, r5, r6, sl, fp, pc}
   19e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e1c:	add	fp, sp, #28
   19e20:	sub	sp, sp, #60	; 0x3c
   19e24:	str	r0, [sp, #8]
   19e28:	mov	r0, r1
   19e2c:	mov	r5, r2
   19e30:	mov	r6, r1
   19e34:	bl	1146c <strlen@plt>
   19e38:	mov	r9, #0
   19e3c:	mov	r7, r0
   19e40:	tst	r5, #4
   19e44:	beq	19e74 <__assert_fail@plt+0x88b8>
   19e48:	mov	r4, r0
   19e4c:	mov	r0, r6
   19e50:	mov	r1, #46	; 0x2e
   19e54:	bl	11478 <strchr@plt>
   19e58:	cmp	r0, #0
   19e5c:	beq	19e74 <__assert_fail@plt+0x88b8>
   19e60:	sub	r7, r0, r6
   19e64:	mov	r9, r0
   19e68:	sub	r1, r4, r7
   19e6c:	cmp	r1, #3
   19e70:	bne	1a148 <__assert_fail@plt+0x8b8c>
   19e74:	sub	r0, r7, #8
   19e78:	cmp	r0, #4
   19e7c:	bhi	1a148 <__assert_fail@plt+0x8b8c>
   19e80:	ands	r0, r7, #1
   19e84:	bne	1a148 <__assert_fail@plt+0x8b8c>
   19e88:	mov	r0, #0
   19e8c:	ldrb	r1, [r6, r0]
   19e90:	sub	r1, r1, #48	; 0x30
   19e94:	cmp	r1, #10
   19e98:	bcs	1a148 <__assert_fail@plt+0x8b8c>
   19e9c:	add	r0, r0, #1
   19ea0:	cmp	r0, r7
   19ea4:	blt	19e8c <__assert_fail@plt+0x88d0>
   19ea8:	add	r0, r7, r7, lsr #31
   19eac:	cmp	r7, #2
   19eb0:	asr	r0, r0, #1
   19eb4:	blt	19ee8 <__assert_fail@plt+0x892c>
   19eb8:	add	r1, r6, #1
   19ebc:	add	r2, sp, #12
   19ec0:	mov	r3, r0
   19ec4:	ldrb	r7, [r1, #-1]
   19ec8:	ldrb	r6, [r1]
   19ecc:	add	r1, r1, #2
   19ed0:	subs	r3, r3, #1
   19ed4:	add	r7, r7, r7, lsl #2
   19ed8:	add	r7, r6, r7, lsl #1
   19edc:	sub	r7, r7, #528	; 0x210
   19ee0:	str	r7, [r2], #4
   19ee4:	bne	19ec4 <__assert_fail@plt+0x8908>
   19ee8:	ands	r8, r5, #1
   19eec:	beq	19ef8 <__assert_fail@plt+0x893c>
   19ef0:	add	r1, sp, #12
   19ef4:	b	19f74 <__assert_fail@plt+0x89b8>
   19ef8:	subs	r4, r0, #4
   19efc:	beq	19f2c <__assert_fail@plt+0x8970>
   19f00:	cmp	r0, #6
   19f04:	bne	19f50 <__assert_fail@plt+0x8994>
   19f08:	tst	r5, #2
   19f0c:	beq	1a148 <__assert_fail@plt+0x8b8c>
   19f10:	ldr	r0, [sp, #12]
   19f14:	ldr	r1, [sp, #16]
   19f18:	mov	r2, #100	; 0x64
   19f1c:	mla	r0, r0, r2, r1
   19f20:	movw	r1, #1900	; 0x76c
   19f24:	sub	r6, r0, r1
   19f28:	b	19f68 <__assert_fail@plt+0x89ac>
   19f2c:	mov	r0, #0
   19f30:	bl	11310 <time@plt>
   19f34:	str	r0, [fp, #-32]	; 0xffffffe0
   19f38:	sub	r0, fp, #32
   19f3c:	bl	11418 <localtime@plt>
   19f40:	cmp	r0, #0
   19f44:	beq	1a148 <__assert_fail@plt+0x8b8c>
   19f48:	ldr	r6, [r0, #20]
   19f4c:	b	19f68 <__assert_fail@plt+0x89ac>
   19f50:	ldr	r6, [sp, #12]
   19f54:	cmp	r6, #68	; 0x44
   19f58:	bgt	19f68 <__assert_fail@plt+0x89ac>
   19f5c:	tst	r5, #8
   19f60:	bne	1a148 <__assert_fail@plt+0x8b8c>
   19f64:	add	r6, r6, #100	; 0x64
   19f68:	add	r0, sp, #12
   19f6c:	add	r1, r0, r4, lsl #2
   19f70:	mov	r0, #4
   19f74:	ldm	r1, {r7, sl}
   19f78:	ldr	r3, [r1, #8]
   19f7c:	ldr	r4, [r1, #12]
   19f80:	cmp	r8, #0
   19f84:	beq	1a008 <__assert_fail@plt+0x8a4c>
   19f88:	cmp	r0, #4
   19f8c:	beq	19fbc <__assert_fail@plt+0x8a00>
   19f90:	cmp	r0, #6
   19f94:	bne	19ff0 <__assert_fail@plt+0x8a34>
   19f98:	tst	r5, #2
   19f9c:	beq	1a148 <__assert_fail@plt+0x8b8c>
   19fa0:	ldr	r0, [r1, #16]
   19fa4:	ldr	r1, [r1, #20]
   19fa8:	mov	r2, #100	; 0x64
   19fac:	mla	r0, r0, r2, r1
   19fb0:	movw	r1, #1900	; 0x76c
   19fb4:	sub	r6, r0, r1
   19fb8:	b	1a008 <__assert_fail@plt+0x8a4c>
   19fbc:	mov	r0, #0
   19fc0:	mov	r5, r4
   19fc4:	mov	r4, r3
   19fc8:	bl	11310 <time@plt>
   19fcc:	str	r0, [fp, #-32]	; 0xffffffe0
   19fd0:	sub	r0, fp, #32
   19fd4:	bl	11418 <localtime@plt>
   19fd8:	cmp	r0, #0
   19fdc:	beq	1a148 <__assert_fail@plt+0x8b8c>
   19fe0:	ldr	r6, [r0, #20]
   19fe4:	mov	r3, r4
   19fe8:	mov	r4, r5
   19fec:	b	1a008 <__assert_fail@plt+0x8a4c>
   19ff0:	ldr	r6, [r1, #16]
   19ff4:	cmp	r6, #68	; 0x44
   19ff8:	bgt	1a008 <__assert_fail@plt+0x8a4c>
   19ffc:	tst	r5, #8
   1a000:	bne	1a148 <__assert_fail@plt+0x8b8c>
   1a004:	add	r6, r6, #100	; 0x64
   1a008:	mov	r5, #0
   1a00c:	cmp	r9, #0
   1a010:	mov	r0, #0
   1a014:	beq	1a044 <__assert_fail@plt+0x8a88>
   1a018:	ldrb	r0, [r9, #1]
   1a01c:	sub	r1, r0, #48	; 0x30
   1a020:	cmp	r1, #9
   1a024:	bhi	1a148 <__assert_fail@plt+0x8b8c>
   1a028:	ldrb	r1, [r9, #2]
   1a02c:	sub	r2, r1, #48	; 0x30
   1a030:	cmp	r2, #9
   1a034:	bhi	1a148 <__assert_fail@plt+0x8b8c>
   1a038:	add	r0, r0, r0, lsl #2
   1a03c:	add	r0, r1, r0, lsl #1
   1a040:	sub	r0, r0, #528	; 0x210
   1a044:	str	r4, [sp, #16]
   1a048:	str	r0, [sp, #12]
   1a04c:	str	r0, [sp, #4]
   1a050:	sub	r7, r7, #1
   1a054:	mvn	r0, #0
   1a058:	str	r3, [sp, #20]
   1a05c:	str	sl, [sp, #24]
   1a060:	mov	r8, sl
   1a064:	mov	sl, r3
   1a068:	mov	r9, r4
   1a06c:	str	r7, [sp, #28]
   1a070:	str	r6, [sp, #32]
   1a074:	str	r0, [sp, #36]	; 0x24
   1a078:	str	r0, [sp, #44]	; 0x2c
   1a07c:	add	r0, sp, #12
   1a080:	bl	112bc <mktime@plt>
   1a084:	ldr	r1, [sp, #36]	; 0x24
   1a088:	cmp	r1, #0
   1a08c:	blt	1a14c <__assert_fail@plt+0x8b90>
   1a090:	mov	ip, #0
   1a094:	ldr	r2, [sp, #32]
   1a098:	ldr	r3, [sp, #28]
   1a09c:	mov	r4, r6
   1a0a0:	ldr	r1, [sp, #20]
   1a0a4:	ldr	r5, [sp, #16]
   1a0a8:	eor	r2, r2, r6
   1a0ac:	eor	r3, r3, r7
   1a0b0:	mov	r6, r7
   1a0b4:	ldr	r7, [sp, #24]
   1a0b8:	orr	r2, r3, r2
   1a0bc:	ldr	r3, [sp, #12]
   1a0c0:	eor	r7, r7, r8
   1a0c4:	orr	r2, r2, r7
   1a0c8:	eor	r7, r1, sl
   1a0cc:	ldr	r1, [sp, #4]
   1a0d0:	orr	r2, r2, r7
   1a0d4:	eor	r7, r5, r9
   1a0d8:	orr	r2, r2, r7
   1a0dc:	eor	r3, r3, r1
   1a0e0:	orrs	r2, r2, r3
   1a0e4:	beq	1a158 <__assert_fail@plt+0x8b9c>
   1a0e8:	mov	r5, #0
   1a0ec:	cmp	r1, #60	; 0x3c
   1a0f0:	bne	1a14c <__assert_fail@plt+0x8b90>
   1a0f4:	mov	r0, #59	; 0x3b
   1a0f8:	mov	r1, #59	; 0x3b
   1a0fc:	str	r9, [sp, #16]
   1a100:	mov	r7, r6
   1a104:	str	r0, [sp, #4]
   1a108:	mvn	r0, #0
   1a10c:	str	r1, [sp, #12]
   1a110:	str	sl, [sp, #20]
   1a114:	str	r8, [sp, #24]
   1a118:	str	r6, [sp, #28]
   1a11c:	str	r4, [sp, #32]
   1a120:	mov	r6, r4
   1a124:	str	r0, [sp, #36]	; 0x24
   1a128:	str	r0, [sp, #44]	; 0x2c
   1a12c:	add	r0, sp, #12
   1a130:	bl	112bc <mktime@plt>
   1a134:	ldr	r2, [sp, #36]	; 0x24
   1a138:	mov	ip, #1
   1a13c:	cmp	r2, #0
   1a140:	bge	1a094 <__assert_fail@plt+0x8ad8>
   1a144:	b	1a14c <__assert_fail@plt+0x8b90>
   1a148:	mov	r5, #0
   1a14c:	mov	r0, r5
   1a150:	sub	sp, fp, #28
   1a154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a158:	adds	r0, r0, ip
   1a15c:	mov	r5, #0
   1a160:	ldrvc	r1, [sp, #8]
   1a164:	movvc	r5, #1
   1a168:	strvc	r0, [r1]
   1a16c:	b	1a14c <__assert_fail@plt+0x8b90>
   1a170:	push	{r4, sl, fp, lr}
   1a174:	add	fp, sp, #8
   1a178:	sub	sp, sp, #8
   1a17c:	movw	r0, #5679	; 0x162f
   1a180:	movt	r0, #2
   1a184:	bl	113d0 <getenv@plt>
   1a188:	cmp	r0, #0
   1a18c:	movw	r4, #4201	; 0x1069
   1a190:	ldrbne	r1, [r0]
   1a194:	movt	r4, #3
   1a198:	cmpne	r1, #0
   1a19c:	beq	1a1bc <__assert_fail@plt+0x8c00>
   1a1a0:	add	r1, sp, #4
   1a1a4:	mov	r2, #10
   1a1a8:	bl	112b0 <strtol@plt>
   1a1ac:	ldr	r1, [sp, #4]
   1a1b0:	ldrb	r1, [r1]
   1a1b4:	cmp	r1, #0
   1a1b8:	moveq	r4, r0
   1a1bc:	mov	r0, r4
   1a1c0:	sub	sp, fp, #8
   1a1c4:	pop	{r4, sl, fp, pc}
   1a1c8:	push	{r4, r5, fp, lr}
   1a1cc:	add	fp, sp, #8
   1a1d0:	cmp	r0, #0
   1a1d4:	beq	1a268 <__assert_fail@plt+0x8cac>
   1a1d8:	mov	r1, #47	; 0x2f
   1a1dc:	mov	r4, r0
   1a1e0:	bl	11514 <strrchr@plt>
   1a1e4:	cmp	r0, #0
   1a1e8:	mov	r5, r4
   1a1ec:	addne	r5, r0, #1
   1a1f0:	sub	r0, r5, r4
   1a1f4:	cmp	r0, #7
   1a1f8:	blt	1a24c <__assert_fail@plt+0x8c90>
   1a1fc:	movw	r1, #5751	; 0x1677
   1a200:	sub	r0, r5, #7
   1a204:	mov	r2, #7
   1a208:	movt	r1, #2
   1a20c:	bl	11580 <strncmp@plt>
   1a210:	cmp	r0, #0
   1a214:	bne	1a24c <__assert_fail@plt+0x8c90>
   1a218:	movw	r1, #5759	; 0x167f
   1a21c:	mov	r0, r5
   1a220:	mov	r2, #3
   1a224:	movt	r1, #2
   1a228:	bl	11580 <strncmp@plt>
   1a22c:	cmp	r0, #0
   1a230:	beq	1a23c <__assert_fail@plt+0x8c80>
   1a234:	mov	r4, r5
   1a238:	b	1a24c <__assert_fail@plt+0x8c90>
   1a23c:	movw	r0, #8592	; 0x2190
   1a240:	add	r4, r5, #3
   1a244:	movt	r0, #3
   1a248:	str	r4, [r0]
   1a24c:	movw	r0, #8596	; 0x2194
   1a250:	movt	r0, #3
   1a254:	str	r4, [r0]
   1a258:	movw	r0, #8668	; 0x21dc
   1a25c:	movt	r0, #3
   1a260:	str	r4, [r0]
   1a264:	pop	{r4, r5, fp, pc}
   1a268:	movw	r0, #8608	; 0x21a0
   1a26c:	mov	r1, #55	; 0x37
   1a270:	mov	r2, #1
   1a274:	movt	r0, #3
   1a278:	ldr	r3, [r0]
   1a27c:	movw	r0, #5695	; 0x163f
   1a280:	movt	r0, #2
   1a284:	bl	1137c <fwrite@plt>
   1a288:	bl	1158c <abort@plt>
   1a28c:	push	{r4, r5, r6, sl, fp, lr}
   1a290:	add	fp, sp, #16
   1a294:	mov	r4, r0
   1a298:	movw	r0, #8672	; 0x21e0
   1a29c:	movt	r0, #3
   1a2a0:	cmp	r4, #0
   1a2a4:	moveq	r4, r0
   1a2a8:	bl	11490 <__errno_location@plt>
   1a2ac:	ldr	r6, [r0]
   1a2b0:	mov	r5, r0
   1a2b4:	mov	r0, r4
   1a2b8:	mov	r1, #48	; 0x30
   1a2bc:	bl	1d060 <__assert_fail@plt+0xbaa4>
   1a2c0:	str	r6, [r5]
   1a2c4:	pop	{r4, r5, r6, sl, fp, pc}
   1a2c8:	movw	r1, #8672	; 0x21e0
   1a2cc:	cmp	r0, #0
   1a2d0:	movt	r1, #3
   1a2d4:	movne	r1, r0
   1a2d8:	ldr	r0, [r1]
   1a2dc:	bx	lr
   1a2e0:	movw	r2, #8672	; 0x21e0
   1a2e4:	cmp	r0, #0
   1a2e8:	movt	r2, #3
   1a2ec:	movne	r2, r0
   1a2f0:	str	r1, [r2]
   1a2f4:	bx	lr
   1a2f8:	movw	r3, #8672	; 0x21e0
   1a2fc:	cmp	r0, #0
   1a300:	movt	r3, #3
   1a304:	movne	r3, r0
   1a308:	ubfx	r0, r1, #5, #3
   1a30c:	and	r1, r1, #31
   1a310:	add	r0, r3, r0, lsl #2
   1a314:	ldr	r3, [r0, #8]
   1a318:	eor	r2, r2, r3, lsr r1
   1a31c:	and	r2, r2, #1
   1a320:	eor	r2, r3, r2, lsl r1
   1a324:	str	r2, [r0, #8]
   1a328:	mov	r0, #1
   1a32c:	and	r0, r0, r3, lsr r1
   1a330:	bx	lr
   1a334:	movw	r2, #8672	; 0x21e0
   1a338:	cmp	r0, #0
   1a33c:	movt	r2, #3
   1a340:	movne	r2, r0
   1a344:	ldr	r0, [r2, #4]
   1a348:	str	r1, [r2, #4]
   1a34c:	bx	lr
   1a350:	movw	r3, #8672	; 0x21e0
   1a354:	cmp	r0, #0
   1a358:	movt	r3, #3
   1a35c:	movne	r3, r0
   1a360:	cmp	r1, #0
   1a364:	mov	r0, #10
   1a368:	cmpne	r2, #0
   1a36c:	str	r0, [r3]
   1a370:	bne	1a380 <__assert_fail@plt+0x8dc4>
   1a374:	push	{fp, lr}
   1a378:	mov	fp, sp
   1a37c:	bl	1158c <abort@plt>
   1a380:	str	r1, [r3, #40]	; 0x28
   1a384:	str	r2, [r3, #44]	; 0x2c
   1a388:	bx	lr
   1a38c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a390:	add	fp, sp, #28
   1a394:	sub	sp, sp, #20
   1a398:	mov	r7, r0
   1a39c:	ldr	r0, [fp, #8]
   1a3a0:	movw	r5, #8672	; 0x21e0
   1a3a4:	mov	r8, r3
   1a3a8:	mov	r9, r2
   1a3ac:	mov	sl, r1
   1a3b0:	movt	r5, #3
   1a3b4:	cmp	r0, #0
   1a3b8:	movne	r5, r0
   1a3bc:	bl	11490 <__errno_location@plt>
   1a3c0:	mov	r4, r0
   1a3c4:	ldm	r5, {r0, r1}
   1a3c8:	ldr	r2, [r5, #40]	; 0x28
   1a3cc:	ldr	r3, [r5, #44]	; 0x2c
   1a3d0:	add	r5, r5, #8
   1a3d4:	ldr	r6, [r4]
   1a3d8:	stm	sp, {r0, r1, r5}
   1a3dc:	str	r2, [sp, #12]
   1a3e0:	str	r3, [sp, #16]
   1a3e4:	mov	r0, r7
   1a3e8:	mov	r1, sl
   1a3ec:	mov	r2, r9
   1a3f0:	mov	r3, r8
   1a3f4:	bl	1a404 <__assert_fail@plt+0x8e48>
   1a3f8:	str	r6, [r4]
   1a3fc:	sub	sp, fp, #28
   1a400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a408:	add	fp, sp, #28
   1a40c:	sub	sp, sp, #156	; 0x9c
   1a410:	str	r0, [sp, #80]	; 0x50
   1a414:	ldr	r0, [fp, #12]
   1a418:	mov	r6, r1
   1a41c:	mov	r9, r3
   1a420:	str	r2, [fp, #-84]	; 0xffffffac
   1a424:	and	r1, r0, #4
   1a428:	str	r1, [sp, #32]
   1a42c:	and	r1, r0, #1
   1a430:	str	r1, [sp, #36]	; 0x24
   1a434:	ubfx	r4, r0, #1, #1
   1a438:	bl	11394 <__ctype_get_mb_cur_max@plt>
   1a43c:	str	r0, [sp, #40]	; 0x28
   1a440:	ldr	r0, [fp, #24]
   1a444:	ldr	r7, [fp, #8]
   1a448:	mov	r1, #0
   1a44c:	mov	r5, #1
   1a450:	str	r1, [fp, #-56]	; 0xffffffc8
   1a454:	mov	r1, #0
   1a458:	str	r1, [sp, #60]	; 0x3c
   1a45c:	str	r0, [sp, #76]	; 0x4c
   1a460:	ldr	r0, [fp, #20]
   1a464:	str	r0, [sp, #72]	; 0x48
   1a468:	mov	r0, #0
   1a46c:	str	r0, [sp, #56]	; 0x38
   1a470:	mov	r0, #0
   1a474:	str	r0, [sp, #92]	; 0x5c
   1a478:	mov	r0, #0
   1a47c:	str	r0, [fp, #-76]	; 0xffffffb4
   1a480:	mov	r0, #0
   1a484:	cmp	r7, #10
   1a488:	bhi	1b408 <__assert_fail@plt+0x9e4c>
   1a48c:	add	r1, pc, #28
   1a490:	mov	sl, r6
   1a494:	ldr	r6, [sp, #80]	; 0x50
   1a498:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a49c:	mov	r8, #0
   1a4a0:	mov	r2, #1
   1a4a4:	mov	r3, #0
   1a4a8:	mov	lr, r9
   1a4ac:	ldr	pc, [r1, r7, lsl #2]
   1a4b0:	muleq	r1, r4, r5
   1a4b4:	andeq	sl, r1, r0, asr #11
   1a4b8:	andeq	sl, r1, r4, lsl #11
   1a4bc:	andeq	sl, r1, ip, ror r5
   1a4c0:			; <UNDEFINED> instruction: 0x0001a5b4
   1a4c4:	andeq	sl, r1, r8, lsl #12
   1a4c8:	andeq	sl, r1, r4, lsr #11
   1a4cc:	andeq	sl, r1, r4, ror #12
   1a4d0:	ldrdeq	sl, [r1], -ip
   1a4d4:	ldrdeq	sl, [r1], -ip
   1a4d8:	andeq	sl, r1, r4, lsl #10
   1a4dc:	movw	r0, #5839	; 0x16cf
   1a4e0:	mov	r1, r7
   1a4e4:	movt	r0, #2
   1a4e8:	bl	1be14 <__assert_fail@plt+0xa858>
   1a4ec:	str	r0, [sp, #72]	; 0x48
   1a4f0:	movw	r0, #63893	; 0xf995
   1a4f4:	mov	r1, r7
   1a4f8:	movt	r0, #1
   1a4fc:	bl	1be14 <__assert_fail@plt+0xa858>
   1a500:	str	r0, [sp, #76]	; 0x4c
   1a504:	str	r5, [fp, #-48]	; 0xffffffd0
   1a508:	mov	r8, #0
   1a50c:	mov	r5, r7
   1a510:	tst	r4, #1
   1a514:	bne	1a54c <__assert_fail@plt+0x8f90>
   1a518:	ldr	r0, [sp, #72]	; 0x48
   1a51c:	ldrb	r0, [r0]
   1a520:	cmp	r0, #0
   1a524:	beq	1a54c <__assert_fail@plt+0x8f90>
   1a528:	ldr	r1, [sp, #72]	; 0x48
   1a52c:	mov	r8, #0
   1a530:	add	r1, r1, #1
   1a534:	cmp	r8, sl
   1a538:	strbcc	r0, [r6, r8]
   1a53c:	ldrb	r0, [r1, r8]
   1a540:	add	r8, r8, #1
   1a544:	cmp	r0, #0
   1a548:	bne	1a534 <__assert_fail@plt+0x8f78>
   1a54c:	ldr	r7, [sp, #76]	; 0x4c
   1a550:	mov	r0, r7
   1a554:	bl	1146c <strlen@plt>
   1a558:	str	r7, [sp, #92]	; 0x5c
   1a55c:	mov	r7, r5
   1a560:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a564:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1a568:	str	r0, [fp, #-76]	; 0xffffffb4
   1a56c:	mov	r2, #1
   1a570:	mov	r3, r4
   1a574:	mov	lr, r9
   1a578:	b	1a664 <__assert_fail@plt+0x90a8>
   1a57c:	mov	r0, #1
   1a580:	b	1a5c0 <__assert_fail@plt+0x9004>
   1a584:	tst	r4, #1
   1a588:	bne	1a5c0 <__assert_fail@plt+0x9004>
   1a58c:	mov	r2, r0
   1a590:	b	1a5e8 <__assert_fail@plt+0x902c>
   1a594:	mov	r7, #0
   1a598:	mov	r8, #0
   1a59c:	mov	r2, r0
   1a5a0:	b	1a660 <__assert_fail@plt+0x90a4>
   1a5a4:	mov	r0, #1
   1a5a8:	mov	r8, #0
   1a5ac:	mov	r7, #5
   1a5b0:	b	1a61c <__assert_fail@plt+0x9060>
   1a5b4:	mov	r2, #1
   1a5b8:	tst	r4, #1
   1a5bc:	beq	1a5e8 <__assert_fail@plt+0x902c>
   1a5c0:	mov	r1, #1
   1a5c4:	mov	r8, #0
   1a5c8:	mov	r7, #2
   1a5cc:	mov	r2, r0
   1a5d0:	mov	r3, #1
   1a5d4:	str	r1, [fp, #-76]	; 0xffffffb4
   1a5d8:	movw	r1, #63893	; 0xf995
   1a5dc:	movt	r1, #1
   1a5e0:	str	r1, [sp, #92]	; 0x5c
   1a5e4:	b	1a664 <__assert_fail@plt+0x90a8>
   1a5e8:	cmp	sl, #0
   1a5ec:	mov	r8, #1
   1a5f0:	mov	r7, #2
   1a5f4:	movne	r0, #39	; 0x27
   1a5f8:	strbne	r0, [r6]
   1a5fc:	movw	r0, #63893	; 0xf995
   1a600:	movt	r0, #1
   1a604:	b	1a654 <__assert_fail@plt+0x9098>
   1a608:	mov	r7, #5
   1a60c:	tst	r4, #1
   1a610:	beq	1a638 <__assert_fail@plt+0x907c>
   1a614:	mov	r0, #1
   1a618:	mov	r8, #0
   1a61c:	str	r0, [fp, #-76]	; 0xffffffb4
   1a620:	movw	r0, #3282	; 0xcd2
   1a624:	mov	r2, #1
   1a628:	mov	r3, #1
   1a62c:	movt	r0, #2
   1a630:	str	r0, [sp, #92]	; 0x5c
   1a634:	b	1a664 <__assert_fail@plt+0x90a8>
   1a638:	cmp	sl, #0
   1a63c:	mov	r8, #1
   1a640:	mov	r2, #1
   1a644:	movne	r0, #34	; 0x22
   1a648:	strbne	r0, [r6]
   1a64c:	movw	r0, #3282	; 0xcd2
   1a650:	movt	r0, #2
   1a654:	str	r0, [sp, #92]	; 0x5c
   1a658:	mov	r0, #1
   1a65c:	str	r0, [fp, #-76]	; 0xffffffb4
   1a660:	mov	r3, #0
   1a664:	ldr	r0, [fp, #16]
   1a668:	str	r3, [fp, #-72]	; 0xffffffb8
   1a66c:	str	r7, [fp, #-64]	; 0xffffffc0
   1a670:	str	r2, [sp, #84]	; 0x54
   1a674:	cmp	r0, #0
   1a678:	movwne	r0, #1
   1a67c:	and	r0, r0, r3
   1a680:	str	r0, [fp, #-88]	; 0xffffffa8
   1a684:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a688:	cmp	r0, #0
   1a68c:	movwne	r0, #1
   1a690:	subs	r4, r7, #2
   1a694:	mov	r7, #0
   1a698:	and	r1, r0, r3
   1a69c:	str	r4, [fp, #-80]	; 0xffffffb0
   1a6a0:	and	r1, r2, r1
   1a6a4:	str	r1, [sp, #48]	; 0x30
   1a6a8:	clz	r1, r4
   1a6ac:	lsr	r1, r1, #5
   1a6b0:	and	r1, r1, r3
   1a6b4:	eor	r3, r3, #1
   1a6b8:	str	r1, [sp, #64]	; 0x40
   1a6bc:	mov	r1, r4
   1a6c0:	str	r3, [sp, #88]	; 0x58
   1a6c4:	movwne	r1, #1
   1a6c8:	orr	r3, r1, r3
   1a6cc:	and	r1, r1, r2
   1a6d0:	and	r0, r0, r1
   1a6d4:	str	r3, [sp, #68]	; 0x44
   1a6d8:	str	r1, [fp, #-68]	; 0xffffffbc
   1a6dc:	str	r0, [fp, #-60]	; 0xffffffc4
   1a6e0:	eor	r0, r2, #1
   1a6e4:	str	r0, [sp, #52]	; 0x34
   1a6e8:	cmn	lr, #1
   1a6ec:	beq	1a6fc <__assert_fail@plt+0x9140>
   1a6f0:	cmp	r7, lr
   1a6f4:	bne	1a708 <__assert_fail@plt+0x914c>
   1a6f8:	b	1b230 <__assert_fail@plt+0x9c74>
   1a6fc:	ldrb	r0, [ip, r7]
   1a700:	cmp	r0, #0
   1a704:	beq	1b238 <__assert_fail@plt+0x9c7c>
   1a708:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1a70c:	mov	r9, #0
   1a710:	str	r5, [fp, #-48]	; 0xffffffd0
   1a714:	cmp	r0, #0
   1a718:	beq	1a74c <__assert_fail@plt+0x9190>
   1a71c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a720:	add	r4, r7, r0
   1a724:	cmp	r0, #2
   1a728:	bcc	1a744 <__assert_fail@plt+0x9188>
   1a72c:	cmn	lr, #1
   1a730:	bne	1a744 <__assert_fail@plt+0x9188>
   1a734:	mov	r0, ip
   1a738:	bl	1146c <strlen@plt>
   1a73c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a740:	mov	lr, r0
   1a744:	cmp	r4, lr
   1a748:	bls	1a754 <__assert_fail@plt+0x9198>
   1a74c:	mov	r0, #0
   1a750:	b	1a794 <__assert_fail@plt+0x91d8>
   1a754:	ldr	r1, [sp, #92]	; 0x5c
   1a758:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a75c:	add	r0, ip, r7
   1a760:	mov	r4, lr
   1a764:	bl	1131c <memcmp@plt>
   1a768:	ldr	r2, [sp, #88]	; 0x58
   1a76c:	cmp	r0, #0
   1a770:	mov	r1, r0
   1a774:	movwne	r1, #1
   1a778:	orr	r1, r1, r2
   1a77c:	tst	r1, #1
   1a780:	beq	1b2c8 <__assert_fail@plt+0x9d0c>
   1a784:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a788:	clz	r0, r0
   1a78c:	mov	lr, r4
   1a790:	lsr	r0, r0, #5
   1a794:	str	r0, [fp, #-52]	; 0xffffffcc
   1a798:	ldrb	r5, [ip, r7]
   1a79c:	cmp	r5, #126	; 0x7e
   1a7a0:	bhi	1ab58 <__assert_fail@plt+0x959c>
   1a7a4:	add	r3, pc, #16
   1a7a8:	mov	r4, #1
   1a7ac:	mov	r2, #110	; 0x6e
   1a7b0:	mov	r0, #97	; 0x61
   1a7b4:	mov	r1, #0
   1a7b8:	ldr	pc, [r3, r5, lsl #2]
   1a7bc:	andeq	sl, r1, r4, asr sl
   1a7c0:	andeq	sl, r1, r8, asr fp
   1a7c4:	andeq	sl, r1, r8, asr fp
   1a7c8:	andeq	sl, r1, r8, asr fp
   1a7cc:	andeq	sl, r1, r8, asr fp
   1a7d0:	andeq	sl, r1, r8, asr fp
   1a7d4:	andeq	sl, r1, r8, asr fp
   1a7d8:	andeq	sl, r1, ip, lsl #24
   1a7dc:	andeq	sl, r1, r4, lsr sl
   1a7e0:	andeq	sl, r1, ip, lsr #20
   1a7e4:	andeq	sl, r1, r0, asr #20
   1a7e8:	andeq	sl, r1, r0, asr #21
   1a7ec:	andeq	sl, r1, r4, lsr #20
   1a7f0:	andeq	sl, r1, ip, lsr sl
   1a7f4:	andeq	sl, r1, r8, asr fp
   1a7f8:	andeq	sl, r1, r8, asr fp
   1a7fc:	andeq	sl, r1, r8, asr fp
   1a800:	andeq	sl, r1, r8, asr fp
   1a804:	andeq	sl, r1, r8, asr fp
   1a808:	andeq	sl, r1, r8, asr fp
   1a80c:	andeq	sl, r1, r8, asr fp
   1a810:	andeq	sl, r1, r8, asr fp
   1a814:	andeq	sl, r1, r8, asr fp
   1a818:	andeq	sl, r1, r8, asr fp
   1a81c:	andeq	sl, r1, r8, asr fp
   1a820:	andeq	sl, r1, r8, asr fp
   1a824:	andeq	sl, r1, r8, asr fp
   1a828:	andeq	sl, r1, r8, asr fp
   1a82c:	andeq	sl, r1, r8, asr fp
   1a830:	andeq	sl, r1, r8, asr fp
   1a834:	andeq	sl, r1, r8, asr fp
   1a838:	andeq	sl, r1, r8, asr fp
   1a83c:	andeq	sl, r1, r4, asr #23
   1a840:	andeq	sl, r1, r8, asr #23
   1a844:	andeq	sl, r1, r8, asr #23
   1a848:	andeq	sl, r1, ip, asr #19
   1a84c:	andeq	sl, r1, r8, asr #23
   1a850:			; <UNDEFINED> instruction: 0x0001a9b8
   1a854:	andeq	sl, r1, r8, asr #23
   1a858:	andeq	sl, r1, r8, asr #21
   1a85c:	andeq	sl, r1, r8, asr #23
   1a860:	andeq	sl, r1, r8, asr #23
   1a864:	andeq	sl, r1, r8, asr #23
   1a868:			; <UNDEFINED> instruction: 0x0001a9b8
   1a86c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a870:			; <UNDEFINED> instruction: 0x0001a9b8
   1a874:			; <UNDEFINED> instruction: 0x0001a9b8
   1a878:			; <UNDEFINED> instruction: 0x0001a9b8
   1a87c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a880:			; <UNDEFINED> instruction: 0x0001a9b8
   1a884:			; <UNDEFINED> instruction: 0x0001a9b8
   1a888:			; <UNDEFINED> instruction: 0x0001a9b8
   1a88c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a890:			; <UNDEFINED> instruction: 0x0001a9b8
   1a894:			; <UNDEFINED> instruction: 0x0001a9b8
   1a898:			; <UNDEFINED> instruction: 0x0001a9b8
   1a89c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8a0:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8a4:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8a8:	andeq	sl, r1, r8, asr #23
   1a8ac:	andeq	sl, r1, r8, asr #23
   1a8b0:	andeq	sl, r1, r8, asr #23
   1a8b4:	andeq	sl, r1, r8, asr #23
   1a8b8:	muleq	r1, r4, sl
   1a8bc:	andeq	sl, r1, r8, asr fp
   1a8c0:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8c4:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8c8:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8cc:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8d0:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8d4:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8d8:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8dc:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8e0:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8e4:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8e8:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8ec:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8f0:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8f4:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8f8:			; <UNDEFINED> instruction: 0x0001a9b8
   1a8fc:			; <UNDEFINED> instruction: 0x0001a9b8
   1a900:			; <UNDEFINED> instruction: 0x0001a9b8
   1a904:			; <UNDEFINED> instruction: 0x0001a9b8
   1a908:			; <UNDEFINED> instruction: 0x0001a9b8
   1a90c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a910:			; <UNDEFINED> instruction: 0x0001a9b8
   1a914:			; <UNDEFINED> instruction: 0x0001a9b8
   1a918:			; <UNDEFINED> instruction: 0x0001a9b8
   1a91c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a920:			; <UNDEFINED> instruction: 0x0001a9b8
   1a924:			; <UNDEFINED> instruction: 0x0001a9b8
   1a928:	andeq	sl, r1, r8, asr #23
   1a92c:	andeq	sl, r1, r0, lsl #20
   1a930:			; <UNDEFINED> instruction: 0x0001a9b8
   1a934:	andeq	sl, r1, r8, asr #23
   1a938:			; <UNDEFINED> instruction: 0x0001a9b8
   1a93c:	andeq	sl, r1, r8, asr #23
   1a940:			; <UNDEFINED> instruction: 0x0001a9b8
   1a944:			; <UNDEFINED> instruction: 0x0001a9b8
   1a948:			; <UNDEFINED> instruction: 0x0001a9b8
   1a94c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a950:			; <UNDEFINED> instruction: 0x0001a9b8
   1a954:			; <UNDEFINED> instruction: 0x0001a9b8
   1a958:			; <UNDEFINED> instruction: 0x0001a9b8
   1a95c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a960:			; <UNDEFINED> instruction: 0x0001a9b8
   1a964:			; <UNDEFINED> instruction: 0x0001a9b8
   1a968:			; <UNDEFINED> instruction: 0x0001a9b8
   1a96c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a970:			; <UNDEFINED> instruction: 0x0001a9b8
   1a974:			; <UNDEFINED> instruction: 0x0001a9b8
   1a978:			; <UNDEFINED> instruction: 0x0001a9b8
   1a97c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a980:			; <UNDEFINED> instruction: 0x0001a9b8
   1a984:			; <UNDEFINED> instruction: 0x0001a9b8
   1a988:			; <UNDEFINED> instruction: 0x0001a9b8
   1a98c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a990:			; <UNDEFINED> instruction: 0x0001a9b8
   1a994:			; <UNDEFINED> instruction: 0x0001a9b8
   1a998:			; <UNDEFINED> instruction: 0x0001a9b8
   1a99c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a9a0:			; <UNDEFINED> instruction: 0x0001a9b8
   1a9a4:			; <UNDEFINED> instruction: 0x0001a9b8
   1a9a8:	andeq	sl, r1, r0, ror #19
   1a9ac:	andeq	sl, r1, r8, asr #23
   1a9b0:	andeq	sl, r1, r0, ror #19
   1a9b4:	andeq	sl, r1, ip, asr #19
   1a9b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a9bc:	cmp	r0, #0
   1a9c0:	beq	1ac20 <__assert_fail@plt+0x9664>
   1a9c4:	ldr	r0, [fp, #16]
   1a9c8:	b	1ac24 <__assert_fail@plt+0x9668>
   1a9cc:	mov	r4, #0
   1a9d0:	cmp	r7, #0
   1a9d4:	beq	1abc4 <__assert_fail@plt+0x9608>
   1a9d8:	mov	r9, #0
   1a9dc:	b	1a9b8 <__assert_fail@plt+0x93fc>
   1a9e0:	mov	r4, #0
   1a9e4:	cmn	lr, #1
   1a9e8:	beq	1aba8 <__assert_fail@plt+0x95ec>
   1a9ec:	cmp	r7, #0
   1a9f0:	bne	1a9d8 <__assert_fail@plt+0x941c>
   1a9f4:	cmp	lr, #1
   1a9f8:	beq	1abc4 <__assert_fail@plt+0x9608>
   1a9fc:	b	1a9d8 <__assert_fail@plt+0x941c>
   1aa00:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1aa04:	cmp	r0, #2
   1aa08:	bne	1abe8 <__assert_fail@plt+0x962c>
   1aa0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1aa10:	tst	r0, #1
   1aa14:	bne	1b2e4 <__assert_fail@plt+0x9d28>
   1aa18:	mov	r9, #0
   1aa1c:	mov	r0, #92	; 0x5c
   1aa20:	b	1abfc <__assert_fail@plt+0x9640>
   1aa24:	mov	r0, #102	; 0x66
   1aa28:	b	1ac0c <__assert_fail@plt+0x9650>
   1aa2c:	mov	r2, #116	; 0x74
   1aa30:	b	1aa40 <__assert_fail@plt+0x9484>
   1aa34:	mov	r0, #98	; 0x62
   1aa38:	b	1ac0c <__assert_fail@plt+0x9650>
   1aa3c:	mov	r2, #114	; 0x72
   1aa40:	ldr	r0, [sp, #68]	; 0x44
   1aa44:	tst	r0, #1
   1aa48:	mov	r0, r2
   1aa4c:	bne	1ac0c <__assert_fail@plt+0x9650>
   1aa50:	b	1b2e4 <__assert_fail@plt+0x9d28>
   1aa54:	ldr	r0, [sp, #84]	; 0x54
   1aa58:	tst	r0, #1
   1aa5c:	beq	1acfc <__assert_fail@plt+0x9740>
   1aa60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1aa64:	tst	r0, #1
   1aa68:	bne	1b3f4 <__assert_fail@plt+0x9e38>
   1aa6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1aa70:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1aa74:	cmp	r0, #2
   1aa78:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1aa7c:	movwne	r0, #1
   1aa80:	orr	r0, r0, r2
   1aa84:	tst	r0, #1
   1aa88:	beq	1b0cc <__assert_fail@plt+0x9b10>
   1aa8c:	mov	r0, r8
   1aa90:	b	1b100 <__assert_fail@plt+0x9b44>
   1aa94:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1aa98:	mov	r9, #0
   1aa9c:	mov	r5, #63	; 0x3f
   1aaa0:	cmp	r0, #5
   1aaa4:	beq	1aeb0 <__assert_fail@plt+0x98f4>
   1aaa8:	cmp	r0, #2
   1aaac:	bne	1af54 <__assert_fail@plt+0x9998>
   1aab0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1aab4:	tst	r0, #1
   1aab8:	beq	1af58 <__assert_fail@plt+0x999c>
   1aabc:	b	1b2e4 <__assert_fail@plt+0x9d28>
   1aac0:	mov	r0, #118	; 0x76
   1aac4:	b	1ac0c <__assert_fail@plt+0x9650>
   1aac8:	mov	r0, #1
   1aacc:	mov	r5, #39	; 0x27
   1aad0:	str	r0, [sp, #60]	; 0x3c
   1aad4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1aad8:	cmp	r0, #2
   1aadc:	bne	1ab50 <__assert_fail@plt+0x9594>
   1aae0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1aae4:	tst	r0, #1
   1aae8:	bne	1b2e4 <__assert_fail@plt+0x9d28>
   1aaec:	ldr	r2, [sp, #56]	; 0x38
   1aaf0:	clz	r1, sl
   1aaf4:	mov	r9, #0
   1aaf8:	lsr	r1, r1, #5
   1aafc:	cmp	r2, #0
   1ab00:	mov	r0, r2
   1ab04:	movwne	r0, #1
   1ab08:	orrs	r0, r0, r1
   1ab0c:	moveq	r2, sl
   1ab10:	moveq	sl, r0
   1ab14:	cmp	r8, sl
   1ab18:	str	r2, [sp, #56]	; 0x38
   1ab1c:	movcc	r0, #39	; 0x27
   1ab20:	strbcc	r0, [r6, r8]
   1ab24:	add	r0, r8, #1
   1ab28:	cmp	r0, sl
   1ab2c:	movcc	r1, #92	; 0x5c
   1ab30:	strbcc	r1, [r6, r0]
   1ab34:	add	r0, r8, #2
   1ab38:	add	r8, r8, #3
   1ab3c:	cmp	r0, sl
   1ab40:	movcc	r1, #39	; 0x27
   1ab44:	strbcc	r1, [r6, r0]
   1ab48:	mov	r0, #0
   1ab4c:	str	r0, [fp, #-56]	; 0xffffffc8
   1ab50:	mov	r4, #1
   1ab54:	b	1a9b8 <__assert_fail@plt+0x93fc>
   1ab58:	ldr	r0, [sp, #40]	; 0x28
   1ab5c:	cmp	r0, #1
   1ab60:	bne	1ad28 <__assert_fail@plt+0x976c>
   1ab64:	str	lr, [sp, #28]
   1ab68:	bl	11454 <__ctype_b_loc@plt>
   1ab6c:	ldr	r0, [r0]
   1ab70:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ab74:	mov	r1, #1
   1ab78:	add	r0, r0, r5, lsl #1
   1ab7c:	ldrb	r0, [r0, #1]
   1ab80:	ubfx	r4, r0, #6, #1
   1ab84:	ldr	r0, [sp, #52]	; 0x34
   1ab88:	mov	r2, r1
   1ab8c:	cmp	r1, #1
   1ab90:	orr	r0, r4, r0
   1ab94:	bhi	1af60 <__assert_fail@plt+0x99a4>
   1ab98:	tst	r0, #1
   1ab9c:	beq	1af60 <__assert_fail@plt+0x99a4>
   1aba0:	ldr	lr, [sp, #28]
   1aba4:	b	1a9b8 <__assert_fail@plt+0x93fc>
   1aba8:	cmp	r7, #0
   1abac:	ldrbeq	r0, [ip, #1]
   1abb0:	cmpeq	r0, #0
   1abb4:	beq	1abc4 <__assert_fail@plt+0x9608>
   1abb8:	mvn	lr, #0
   1abbc:	mov	r9, #0
   1abc0:	b	1a9b8 <__assert_fail@plt+0x93fc>
   1abc4:	mov	r1, #1
   1abc8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1abcc:	cmp	r0, #2
   1abd0:	bne	1abe0 <__assert_fail@plt+0x9624>
   1abd4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1abd8:	tst	r0, #1
   1abdc:	bne	1b2e4 <__assert_fail@plt+0x9d28>
   1abe0:	mov	r4, r1
   1abe4:	b	1a9b8 <__assert_fail@plt+0x93fc>
   1abe8:	ldr	r1, [sp, #48]	; 0x30
   1abec:	mov	r9, #0
   1abf0:	mov	r0, #92	; 0x5c
   1abf4:	cmp	r1, #0
   1abf8:	beq	1ac0c <__assert_fail@plt+0x9650>
   1abfc:	mov	r4, #0
   1ac00:	cmp	r9, #0
   1ac04:	beq	1b198 <__assert_fail@plt+0x9bdc>
   1ac08:	b	1b1d4 <__assert_fail@plt+0x9c18>
   1ac0c:	ldr	r1, [sp, #84]	; 0x54
   1ac10:	mov	r4, #0
   1ac14:	mov	r9, #0
   1ac18:	tst	r1, #1
   1ac1c:	bne	1ac5c <__assert_fail@plt+0x96a0>
   1ac20:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1ac24:	cmp	r0, #0
   1ac28:	mov	r0, r5
   1ac2c:	beq	1ac50 <__assert_fail@plt+0x9694>
   1ac30:	ldr	r1, [fp, #16]
   1ac34:	ubfx	r0, r5, #5, #3
   1ac38:	mov	r2, #1
   1ac3c:	ldr	r0, [r1, r0, lsl #2]
   1ac40:	and	r1, r5, #31
   1ac44:	tst	r0, r2, lsl r1
   1ac48:	mov	r0, r5
   1ac4c:	bne	1ac5c <__assert_fail@plt+0x96a0>
   1ac50:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ac54:	cmp	r1, #0
   1ac58:	beq	1b190 <__assert_fail@plt+0x9bd4>
   1ac5c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1ac60:	tst	r1, #1
   1ac64:	bne	1b2bc <__assert_fail@plt+0x9d00>
   1ac68:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1ac6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ac70:	cmp	r1, #2
   1ac74:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1ac78:	movwne	r1, #1
   1ac7c:	orr	r1, r1, r2
   1ac80:	tst	r1, #1
   1ac84:	beq	1ac90 <__assert_fail@plt+0x96d4>
   1ac88:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1ac8c:	b	1accc <__assert_fail@plt+0x9710>
   1ac90:	cmp	r8, sl
   1ac94:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1ac98:	movcc	r1, #39	; 0x27
   1ac9c:	strbcc	r1, [r6, r8]
   1aca0:	add	r1, r8, #1
   1aca4:	cmp	r1, sl
   1aca8:	movcc	r2, #36	; 0x24
   1acac:	strbcc	r2, [r6, r1]
   1acb0:	add	r1, r8, #2
   1acb4:	add	r8, r8, #3
   1acb8:	cmp	r1, sl
   1acbc:	movcc	r2, #39	; 0x27
   1acc0:	strbcc	r2, [r6, r1]
   1acc4:	mov	r1, #1
   1acc8:	str	r1, [fp, #-56]	; 0xffffffc8
   1accc:	cmp	r8, sl
   1acd0:	movcc	r1, #92	; 0x5c
   1acd4:	strbcc	r1, [r6, r8]
   1acd8:	add	r8, r8, #1
   1acdc:	cmp	r8, sl
   1ace0:	and	r5, r5, r4
   1ace4:	add	r7, r7, #1
   1ace8:	strbcc	r0, [r6, r8]
   1acec:	add	r8, r8, #1
   1acf0:	cmn	lr, #1
   1acf4:	bne	1a6f0 <__assert_fail@plt+0x9134>
   1acf8:	b	1a6fc <__assert_fail@plt+0x9140>
   1acfc:	ldr	r0, [sp, #36]	; 0x24
   1ad00:	mov	r4, #0
   1ad04:	mov	r9, #0
   1ad08:	mov	r5, #0
   1ad0c:	cmp	r0, #0
   1ad10:	beq	1ac20 <__assert_fail@plt+0x9664>
   1ad14:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1ad18:	add	r7, r7, #1
   1ad1c:	cmn	lr, #1
   1ad20:	bne	1a6f0 <__assert_fail@plt+0x9134>
   1ad24:	b	1a6fc <__assert_fail@plt+0x9140>
   1ad28:	mov	r0, #0
   1ad2c:	cmn	lr, #1
   1ad30:	str	r0, [fp, #-36]	; 0xffffffdc
   1ad34:	str	r0, [fp, #-40]	; 0xffffffd8
   1ad38:	bne	1ad4c <__assert_fail@plt+0x9790>
   1ad3c:	mov	r0, ip
   1ad40:	bl	1146c <strlen@plt>
   1ad44:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ad48:	mov	lr, r0
   1ad4c:	add	r0, ip, r7
   1ad50:	mov	r4, #1
   1ad54:	mov	r6, #0
   1ad58:	str	lr, [sp, #28]
   1ad5c:	str	r0, [sp, #24]
   1ad60:	sub	r0, fp, #40	; 0x28
   1ad64:	mov	r3, r0
   1ad68:	str	r6, [sp, #44]	; 0x2c
   1ad6c:	add	r6, r6, r7
   1ad70:	sub	r0, fp, #44	; 0x2c
   1ad74:	add	r1, ip, r6
   1ad78:	sub	r2, lr, r6
   1ad7c:	bl	1d4fc <__assert_fail@plt+0xbf40>
   1ad80:	cmp	r0, #0
   1ad84:	beq	1b21c <__assert_fail@plt+0x9c60>
   1ad88:	cmn	r0, #1
   1ad8c:	beq	1b1dc <__assert_fail@plt+0x9c20>
   1ad90:	ldr	lr, [sp, #28]
   1ad94:	cmn	r0, #2
   1ad98:	beq	1b1e4 <__assert_fail@plt+0x9c28>
   1ad9c:	ldr	r2, [sp, #64]	; 0x40
   1ada0:	cmp	r0, #2
   1ada4:	mov	r1, #0
   1ada8:	movwcc	r1, #1
   1adac:	eor	r2, r2, #1
   1adb0:	orrs	r1, r2, r1
   1adb4:	bne	1ae74 <__assert_fail@plt+0x98b8>
   1adb8:	ldr	r1, [sp, #44]	; 0x2c
   1adbc:	ldr	r2, [sp, #24]
   1adc0:	add	r1, r2, r1
   1adc4:	mov	r2, #1
   1adc8:	ldrb	r3, [r1, r2]
   1adcc:	sub	r3, r3, #91	; 0x5b
   1add0:	cmp	r3, #33	; 0x21
   1add4:	bhi	1ae68 <__assert_fail@plt+0x98ac>
   1add8:	add	r6, pc, #0
   1addc:	ldr	pc, [r6, r3, lsl #2]
   1ade0:	ldrdeq	fp, [r1], -ip
   1ade4:	ldrdeq	fp, [r1], -ip
   1ade8:	andeq	sl, r1, r8, ror #28
   1adec:	ldrdeq	fp, [r1], -ip
   1adf0:	andeq	sl, r1, r8, ror #28
   1adf4:	ldrdeq	fp, [r1], -ip
   1adf8:	andeq	sl, r1, r8, ror #28
   1adfc:	andeq	sl, r1, r8, ror #28
   1ae00:	andeq	sl, r1, r8, ror #28
   1ae04:	andeq	sl, r1, r8, ror #28
   1ae08:	andeq	sl, r1, r8, ror #28
   1ae0c:	andeq	sl, r1, r8, ror #28
   1ae10:	andeq	sl, r1, r8, ror #28
   1ae14:	andeq	sl, r1, r8, ror #28
   1ae18:	andeq	sl, r1, r8, ror #28
   1ae1c:	andeq	sl, r1, r8, ror #28
   1ae20:	andeq	sl, r1, r8, ror #28
   1ae24:	andeq	sl, r1, r8, ror #28
   1ae28:	andeq	sl, r1, r8, ror #28
   1ae2c:	andeq	sl, r1, r8, ror #28
   1ae30:	andeq	sl, r1, r8, ror #28
   1ae34:	andeq	sl, r1, r8, ror #28
   1ae38:	andeq	sl, r1, r8, ror #28
   1ae3c:	andeq	sl, r1, r8, ror #28
   1ae40:	andeq	sl, r1, r8, ror #28
   1ae44:	andeq	sl, r1, r8, ror #28
   1ae48:	andeq	sl, r1, r8, ror #28
   1ae4c:	andeq	sl, r1, r8, ror #28
   1ae50:	andeq	sl, r1, r8, ror #28
   1ae54:	andeq	sl, r1, r8, ror #28
   1ae58:	andeq	sl, r1, r8, ror #28
   1ae5c:	andeq	sl, r1, r8, ror #28
   1ae60:	andeq	sl, r1, r8, ror #28
   1ae64:	ldrdeq	fp, [r1], -ip
   1ae68:	add	r2, r2, #1
   1ae6c:	cmp	r2, r0
   1ae70:	bcc	1adc8 <__assert_fail@plt+0x980c>
   1ae74:	ldr	r6, [sp, #44]	; 0x2c
   1ae78:	add	r6, r0, r6
   1ae7c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ae80:	bl	11364 <iswprint@plt>
   1ae84:	cmp	r0, #0
   1ae88:	movwne	r0, #1
   1ae8c:	and	r4, r4, r0
   1ae90:	sub	r0, fp, #40	; 0x28
   1ae94:	bl	11304 <mbsinit@plt>
   1ae98:	ldr	lr, [sp, #28]
   1ae9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1aea0:	sub	r3, fp, #40	; 0x28
   1aea4:	cmp	r0, #0
   1aea8:	beq	1ad68 <__assert_fail@plt+0x97ac>
   1aeac:	b	1b224 <__assert_fail@plt+0x9c68>
   1aeb0:	ldr	r0, [sp, #32]
   1aeb4:	cmp	r0, #0
   1aeb8:	beq	1af54 <__assert_fail@plt+0x9998>
   1aebc:	add	r0, r7, #2
   1aec0:	cmp	r0, lr
   1aec4:	bcs	1af54 <__assert_fail@plt+0x9998>
   1aec8:	add	r1, ip, r7
   1aecc:	ldrb	r1, [r1, #1]
   1aed0:	cmp	r1, #63	; 0x3f
   1aed4:	bne	1af54 <__assert_fail@plt+0x9998>
   1aed8:	ldrb	r5, [ip, r0]
   1aedc:	sub	r1, r5, #33	; 0x21
   1aee0:	cmp	r1, #29
   1aee4:	bhi	1af54 <__assert_fail@plt+0x9998>
   1aee8:	movw	r3, #20929	; 0x51c1
   1aeec:	mov	r2, #1
   1aef0:	movt	r3, #14336	; 0x3800
   1aef4:	tst	r3, r2, lsl r1
   1aef8:	beq	1af54 <__assert_fail@plt+0x9998>
   1aefc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1af00:	tst	r1, #1
   1af04:	bne	1b3fc <__assert_fail@plt+0x9e40>
   1af08:	cmp	r8, sl
   1af0c:	mov	r7, r0
   1af10:	mov	r4, #0
   1af14:	movcc	r1, #63	; 0x3f
   1af18:	strbcc	r1, [r6, r8]
   1af1c:	add	r1, r8, #1
   1af20:	cmp	r1, sl
   1af24:	movcc	r2, #34	; 0x22
   1af28:	strbcc	r2, [r6, r1]
   1af2c:	add	r1, r8, #2
   1af30:	cmp	r1, sl
   1af34:	movcc	r2, #34	; 0x22
   1af38:	strbcc	r2, [r6, r1]
   1af3c:	add	r1, r8, #3
   1af40:	add	r8, r8, #4
   1af44:	cmp	r1, sl
   1af48:	movcc	r2, #63	; 0x3f
   1af4c:	strbcc	r2, [r6, r1]
   1af50:	b	1a9b8 <__assert_fail@plt+0x93fc>
   1af54:	mov	r5, #63	; 0x3f
   1af58:	mov	r4, #0
   1af5c:	b	1a9b8 <__assert_fail@plt+0x93fc>
   1af60:	add	r1, r2, r7
   1af64:	ldr	lr, [sp, #28]
   1af68:	mov	r3, #0
   1af6c:	str	r1, [sp, #44]	; 0x2c
   1af70:	add	r1, r7, #1
   1af74:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1af78:	tst	r0, #1
   1af7c:	bne	1b050 <__assert_fail@plt+0x9a94>
   1af80:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1af84:	tst	r2, #1
   1af88:	bne	1b344 <__assert_fail@plt+0x9d88>
   1af8c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1af90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1af94:	cmp	r7, #2
   1af98:	movwne	r3, #1
   1af9c:	orr	r3, r3, r2
   1afa0:	tst	r3, #1
   1afa4:	bne	1afe0 <__assert_fail@plt+0x9a24>
   1afa8:	cmp	r8, sl
   1afac:	add	r3, r8, #1
   1afb0:	movcc	r2, #39	; 0x27
   1afb4:	strbcc	r2, [r6, r8]
   1afb8:	cmp	r3, sl
   1afbc:	movcc	r2, #36	; 0x24
   1afc0:	strbcc	r2, [r6, r3]
   1afc4:	add	r3, r8, #2
   1afc8:	add	r8, r8, #3
   1afcc:	cmp	r3, sl
   1afd0:	movcc	r2, #39	; 0x27
   1afd4:	strbcc	r2, [r6, r3]
   1afd8:	mov	r2, #1
   1afdc:	str	r2, [fp, #-56]	; 0xffffffc8
   1afe0:	cmp	r8, sl
   1afe4:	movcc	r3, #92	; 0x5c
   1afe8:	strbcc	r3, [r6, r8]
   1afec:	add	r3, r8, #1
   1aff0:	cmp	r3, sl
   1aff4:	andcc	r7, r5, #192	; 0xc0
   1aff8:	movcc	r2, #48	; 0x30
   1affc:	orrcc	r7, r2, r7, lsr #6
   1b000:	strbcc	r7, [r6, r3]
   1b004:	add	r3, r8, #2
   1b008:	add	r8, r8, #3
   1b00c:	cmp	r3, sl
   1b010:	lsrcc	r7, r5, #3
   1b014:	movcc	r2, #6
   1b018:	bficc	r7, r2, #3, #29
   1b01c:	mov	r2, #6
   1b020:	strbcc	r7, [r6, r3]
   1b024:	bfi	r5, r2, #3, #29
   1b028:	mov	r3, #1
   1b02c:	b	1b074 <__assert_fail@plt+0x9ab8>
   1b030:	cmp	r8, sl
   1b034:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1b038:	strbcc	r5, [r6, r8]
   1b03c:	add	r8, r8, #1
   1b040:	ldrb	r5, [ip, r1]
   1b044:	add	r1, r1, #1
   1b048:	tst	r0, #1
   1b04c:	beq	1af80 <__assert_fail@plt+0x99c4>
   1b050:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1b054:	tst	r2, #1
   1b058:	beq	1b06c <__assert_fail@plt+0x9ab0>
   1b05c:	cmp	r8, sl
   1b060:	movcc	r7, #92	; 0x5c
   1b064:	strbcc	r7, [r6, r8]
   1b068:	add	r8, r8, #1
   1b06c:	mov	r2, #0
   1b070:	str	r2, [fp, #-52]	; 0xffffffcc
   1b074:	ldr	r2, [sp, #44]	; 0x2c
   1b078:	and	r9, r3, #1
   1b07c:	cmp	r2, r1
   1b080:	bls	1b180 <__assert_fail@plt+0x9bc4>
   1b084:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1b088:	cmp	r9, #0
   1b08c:	movwne	r9, #1
   1b090:	mvn	r7, r2
   1b094:	orr	r7, r7, r9
   1b098:	tst	r7, #1
   1b09c:	bne	1b030 <__assert_fail@plt+0x9a74>
   1b0a0:	cmp	r8, sl
   1b0a4:	movcc	r7, #39	; 0x27
   1b0a8:	strbcc	r7, [r6, r8]
   1b0ac:	add	r7, r8, #1
   1b0b0:	add	r8, r8, #2
   1b0b4:	cmp	r7, sl
   1b0b8:	movcc	r2, #39	; 0x27
   1b0bc:	strbcc	r2, [r6, r7]
   1b0c0:	mov	r2, #0
   1b0c4:	str	r2, [fp, #-56]	; 0xffffffc8
   1b0c8:	b	1b030 <__assert_fail@plt+0x9a74>
   1b0cc:	cmp	r8, sl
   1b0d0:	mov	r2, #1
   1b0d4:	movcc	r0, #39	; 0x27
   1b0d8:	strbcc	r0, [r6, r8]
   1b0dc:	add	r0, r8, #1
   1b0e0:	cmp	r0, sl
   1b0e4:	movcc	r1, #36	; 0x24
   1b0e8:	strbcc	r1, [r6, r0]
   1b0ec:	add	r0, r8, #2
   1b0f0:	cmp	r0, sl
   1b0f4:	movcc	r1, #39	; 0x27
   1b0f8:	strbcc	r1, [r6, r0]
   1b0fc:	add	r0, r8, #3
   1b100:	cmp	r0, sl
   1b104:	add	r8, r0, #1
   1b108:	str	r2, [fp, #-56]	; 0xffffffc8
   1b10c:	movcc	r1, #92	; 0x5c
   1b110:	strbcc	r1, [r6, r0]
   1b114:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1b118:	cmp	r1, #2
   1b11c:	beq	1b170 <__assert_fail@plt+0x9bb4>
   1b120:	add	r1, r7, #1
   1b124:	mov	r4, #0
   1b128:	mov	r9, #1
   1b12c:	mov	r5, #48	; 0x30
   1b130:	cmp	r1, lr
   1b134:	bcs	1a9b8 <__assert_fail@plt+0x93fc>
   1b138:	ldrb	r1, [ip, r1]
   1b13c:	sub	r1, r1, #48	; 0x30
   1b140:	uxtb	r1, r1
   1b144:	cmp	r1, #9
   1b148:	bhi	1a9b8 <__assert_fail@plt+0x93fc>
   1b14c:	cmp	r8, sl
   1b150:	movcc	r1, #48	; 0x30
   1b154:	strbcc	r1, [r6, r8]
   1b158:	add	r1, r0, #2
   1b15c:	add	r8, r0, #3
   1b160:	cmp	r1, sl
   1b164:	movcc	r2, #48	; 0x30
   1b168:	strbcc	r2, [r6, r1]
   1b16c:	b	1a9b8 <__assert_fail@plt+0x93fc>
   1b170:	mov	r0, #48	; 0x30
   1b174:	mov	r9, #1
   1b178:	mov	r4, #0
   1b17c:	b	1ac50 <__assert_fail@plt+0x9694>
   1b180:	cmp	r9, #0
   1b184:	sub	r7, r1, #1
   1b188:	mov	r0, r5
   1b18c:	movwne	r9, #1
   1b190:	cmp	r9, #0
   1b194:	bne	1b1d4 <__assert_fail@plt+0x9c18>
   1b198:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1b19c:	tst	r1, #1
   1b1a0:	beq	1b1d4 <__assert_fail@plt+0x9c18>
   1b1a4:	cmp	r8, sl
   1b1a8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1b1ac:	movcc	r1, #39	; 0x27
   1b1b0:	strbcc	r1, [r6, r8]
   1b1b4:	add	r1, r8, #1
   1b1b8:	add	r8, r8, #2
   1b1bc:	cmp	r1, sl
   1b1c0:	movcc	r2, #39	; 0x27
   1b1c4:	strbcc	r2, [r6, r1]
   1b1c8:	mov	r1, #0
   1b1cc:	str	r1, [fp, #-56]	; 0xffffffc8
   1b1d0:	b	1acdc <__assert_fail@plt+0x9720>
   1b1d4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1b1d8:	b	1acdc <__assert_fail@plt+0x9720>
   1b1dc:	mov	r4, #0
   1b1e0:	b	1b21c <__assert_fail@plt+0x9c60>
   1b1e4:	mov	r4, #0
   1b1e8:	cmp	lr, r6
   1b1ec:	bls	1b21c <__assert_fail@plt+0x9c60>
   1b1f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b1f4:	ldr	r6, [sp, #44]	; 0x2c
   1b1f8:	ldr	r0, [sp, #24]
   1b1fc:	ldrb	r0, [r0, r6]
   1b200:	cmp	r0, #0
   1b204:	beq	1b224 <__assert_fail@plt+0x9c68>
   1b208:	add	r6, r6, #1
   1b20c:	add	r0, r7, r6
   1b210:	cmp	r0, lr
   1b214:	bcc	1b1f8 <__assert_fail@plt+0x9c3c>
   1b218:	b	1b224 <__assert_fail@plt+0x9c68>
   1b21c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b220:	ldr	r6, [sp, #44]	; 0x2c
   1b224:	mov	r1, r6
   1b228:	ldr	r6, [sp, #80]	; 0x50
   1b22c:	b	1ab84 <__assert_fail@plt+0x95c8>
   1b230:	mov	lr, r7
   1b234:	b	1b23c <__assert_fail@plt+0x9c80>
   1b238:	mvn	lr, #0
   1b23c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1b240:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1b244:	eor	r0, r7, #2
   1b248:	orr	r0, r0, r8
   1b24c:	clz	r0, r0
   1b250:	lsr	r0, r0, #5
   1b254:	tst	r1, r0
   1b258:	bne	1b2e4 <__assert_fail@plt+0x9d28>
   1b25c:	mov	r0, r1
   1b260:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1b264:	cmp	r7, #2
   1b268:	movwne	r1, #1
   1b26c:	orr	r0, r0, r1
   1b270:	tst	r0, #1
   1b274:	ldreq	r0, [sp, #60]	; 0x3c
   1b278:	eoreq	r0, r0, #1
   1b27c:	tsteq	r0, #1
   1b280:	bne	1b390 <__assert_fail@plt+0x9dd4>
   1b284:	mov	r9, lr
   1b288:	tst	r5, #1
   1b28c:	bne	1b34c <__assert_fail@plt+0x9d90>
   1b290:	ldr	r6, [sp, #56]	; 0x38
   1b294:	mov	r4, #0
   1b298:	cmp	r6, #0
   1b29c:	beq	1b388 <__assert_fail@plt+0x9dcc>
   1b2a0:	ldr	r0, [sp, #84]	; 0x54
   1b2a4:	mov	r1, #0
   1b2a8:	cmp	sl, #0
   1b2ac:	mov	r5, #0
   1b2b0:	str	r1, [fp, #-72]	; 0xffffffb8
   1b2b4:	beq	1a484 <__assert_fail@plt+0x8ec8>
   1b2b8:	b	1b390 <__assert_fail@plt+0x9dd4>
   1b2bc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1b2c0:	ldr	r2, [sp, #84]	; 0x54
   1b2c4:	b	1b2ec <__assert_fail@plt+0x9d30>
   1b2c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b2cc:	mov	r2, #1
   1b2d0:	mov	lr, r4
   1b2d4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1b2d8:	b	1b2ec <__assert_fail@plt+0x9d30>
   1b2dc:	ldr	r6, [sp, #80]	; 0x50
   1b2e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b2e4:	ldr	r2, [sp, #84]	; 0x54
   1b2e8:	mov	r7, #2
   1b2ec:	mov	r0, #0
   1b2f0:	ldr	r1, [fp, #12]
   1b2f4:	tst	r2, #1
   1b2f8:	mov	r2, r7
   1b2fc:	mov	r3, lr
   1b300:	str	r0, [sp, #8]
   1b304:	ldr	r0, [sp, #72]	; 0x48
   1b308:	movwne	r2, #4
   1b30c:	cmp	r7, #2
   1b310:	movne	r2, r7
   1b314:	str	r2, [sp]
   1b318:	mov	r2, ip
   1b31c:	bic	r1, r1, #2
   1b320:	str	r0, [sp, #12]
   1b324:	ldr	r0, [sp, #76]	; 0x4c
   1b328:	str	r1, [sp, #4]
   1b32c:	mov	r1, sl
   1b330:	str	r0, [sp, #16]
   1b334:	mov	r0, r6
   1b338:	bl	1a404 <__assert_fail@plt+0x8e48>
   1b33c:	mov	r8, r0
   1b340:	b	1b3e8 <__assert_fail@plt+0x9e2c>
   1b344:	ldr	r2, [sp, #84]	; 0x54
   1b348:	b	1b2ec <__assert_fail@plt+0x9d30>
   1b34c:	mov	r0, #5
   1b350:	ldr	r1, [sp, #56]	; 0x38
   1b354:	ldr	r2, [fp, #-84]	; 0xffffffac
   1b358:	mov	r3, r9
   1b35c:	str	r0, [sp]
   1b360:	ldr	r0, [fp, #12]
   1b364:	str	r0, [sp, #4]
   1b368:	ldr	r0, [fp, #16]
   1b36c:	str	r0, [sp, #8]
   1b370:	ldr	r0, [sp, #72]	; 0x48
   1b374:	str	r0, [sp, #12]
   1b378:	ldr	r0, [sp, #76]	; 0x4c
   1b37c:	str	r0, [sp, #16]
   1b380:	ldr	r0, [sp, #80]	; 0x50
   1b384:	b	1b338 <__assert_fail@plt+0x9d7c>
   1b388:	mov	r0, #0
   1b38c:	str	r0, [fp, #-72]	; 0xffffffb8
   1b390:	ldr	r1, [sp, #92]	; 0x5c
   1b394:	cmp	r1, #0
   1b398:	beq	1b3d8 <__assert_fail@plt+0x9e1c>
   1b39c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b3a0:	ldr	r2, [sp, #80]	; 0x50
   1b3a4:	tst	r0, #1
   1b3a8:	bne	1b3dc <__assert_fail@plt+0x9e20>
   1b3ac:	ldrb	r0, [r1]
   1b3b0:	cmp	r0, #0
   1b3b4:	beq	1b3dc <__assert_fail@plt+0x9e20>
   1b3b8:	add	r1, r1, #1
   1b3bc:	cmp	r8, sl
   1b3c0:	strbcc	r0, [r2, r8]
   1b3c4:	add	r8, r8, #1
   1b3c8:	ldrb	r0, [r1], #1
   1b3cc:	cmp	r0, #0
   1b3d0:	bne	1b3bc <__assert_fail@plt+0x9e00>
   1b3d4:	b	1b3dc <__assert_fail@plt+0x9e20>
   1b3d8:	ldr	r2, [sp, #80]	; 0x50
   1b3dc:	cmp	r8, sl
   1b3e0:	movcc	r0, #0
   1b3e4:	strbcc	r0, [r2, r8]
   1b3e8:	mov	r0, r8
   1b3ec:	sub	sp, fp, #28
   1b3f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3f4:	mov	r2, #1
   1b3f8:	b	1b2d4 <__assert_fail@plt+0x9d18>
   1b3fc:	ldr	r2, [sp, #84]	; 0x54
   1b400:	mov	r7, #5
   1b404:	b	1b2ec <__assert_fail@plt+0x9d30>
   1b408:	bl	1158c <abort@plt>
   1b40c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b410:	add	fp, sp, #28
   1b414:	sub	sp, sp, #28
   1b418:	movw	r5, #8672	; 0x21e0
   1b41c:	cmp	r2, #0
   1b420:	mov	r4, r1
   1b424:	mov	r7, r0
   1b428:	str	r0, [sp, #20]
   1b42c:	movt	r5, #3
   1b430:	movne	r5, r2
   1b434:	bl	11490 <__errno_location@plt>
   1b438:	mov	sl, r0
   1b43c:	ldm	r5, {r0, r1}
   1b440:	ldr	r2, [r5, #40]	; 0x28
   1b444:	ldr	r3, [r5, #44]	; 0x2c
   1b448:	add	r9, r5, #8
   1b44c:	ldr	r6, [sl]
   1b450:	orr	r8, r1, #1
   1b454:	mov	r1, #0
   1b458:	str	r6, [sp, #24]
   1b45c:	stm	sp, {r0, r8, r9}
   1b460:	str	r2, [sp, #12]
   1b464:	str	r3, [sp, #16]
   1b468:	mov	r0, #0
   1b46c:	mov	r2, r7
   1b470:	mov	r3, r4
   1b474:	mov	r6, r4
   1b478:	bl	1a404 <__assert_fail@plt+0x8e48>
   1b47c:	add	r7, r0, #1
   1b480:	mov	r0, r7
   1b484:	bl	1cc30 <__assert_fail@plt+0xb674>
   1b488:	mov	r4, r0
   1b48c:	ldr	r0, [r5]
   1b490:	ldr	r2, [r5, #44]	; 0x2c
   1b494:	ldr	r1, [r5, #40]	; 0x28
   1b498:	mov	r3, r6
   1b49c:	stm	sp, {r0, r8, r9}
   1b4a0:	str	r2, [sp, #16]
   1b4a4:	str	r1, [sp, #12]
   1b4a8:	mov	r0, r4
   1b4ac:	mov	r1, r7
   1b4b0:	ldr	r2, [sp, #20]
   1b4b4:	bl	1a404 <__assert_fail@plt+0x8e48>
   1b4b8:	ldr	r0, [sp, #24]
   1b4bc:	str	r0, [sl]
   1b4c0:	mov	r0, r4
   1b4c4:	sub	sp, fp, #28
   1b4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4d0:	add	fp, sp, #28
   1b4d4:	sub	sp, sp, #36	; 0x24
   1b4d8:	movw	r8, #8672	; 0x21e0
   1b4dc:	cmp	r3, #0
   1b4e0:	mov	r4, r2
   1b4e4:	str	r2, [sp, #24]
   1b4e8:	mov	r5, r1
   1b4ec:	mov	r6, r0
   1b4f0:	str	r0, [sp, #20]
   1b4f4:	movt	r8, #3
   1b4f8:	movne	r8, r3
   1b4fc:	bl	11490 <__errno_location@plt>
   1b500:	str	r0, [sp, #28]
   1b504:	cmp	r4, #0
   1b508:	add	sl, r8, #8
   1b50c:	ldm	r8, {r3, r9}
   1b510:	ldr	r7, [r0]
   1b514:	ldr	r1, [r8, #40]	; 0x28
   1b518:	ldr	r2, [r8, #44]	; 0x2c
   1b51c:	mov	r0, #0
   1b520:	orreq	r9, r9, #1
   1b524:	str	r7, [sp, #32]
   1b528:	mov	r7, r5
   1b52c:	stm	sp, {r3, r9, sl}
   1b530:	str	r1, [sp, #12]
   1b534:	str	r2, [sp, #16]
   1b538:	mov	r1, #0
   1b53c:	mov	r2, r6
   1b540:	mov	r3, r5
   1b544:	bl	1a404 <__assert_fail@plt+0x8e48>
   1b548:	add	r4, r0, #1
   1b54c:	mov	r5, r0
   1b550:	mov	r0, r4
   1b554:	bl	1cc30 <__assert_fail@plt+0xb674>
   1b558:	mov	r6, r0
   1b55c:	ldr	r0, [r8]
   1b560:	ldr	r2, [r8, #44]	; 0x2c
   1b564:	ldr	r1, [r8, #40]	; 0x28
   1b568:	mov	r3, r7
   1b56c:	stm	sp, {r0, r9, sl}
   1b570:	str	r2, [sp, #16]
   1b574:	str	r1, [sp, #12]
   1b578:	mov	r0, r6
   1b57c:	mov	r1, r4
   1b580:	ldr	r2, [sp, #20]
   1b584:	bl	1a404 <__assert_fail@plt+0x8e48>
   1b588:	ldr	r0, [sp, #24]
   1b58c:	ldr	r1, [sp, #32]
   1b590:	ldr	r2, [sp, #28]
   1b594:	cmp	r0, #0
   1b598:	str	r1, [r2]
   1b59c:	strne	r5, [r0]
   1b5a0:	mov	r0, r6
   1b5a4:	sub	sp, fp, #28
   1b5a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b5b0:	add	fp, sp, #24
   1b5b4:	movw	r5, #8524	; 0x214c
   1b5b8:	movw	r8, #8520	; 0x2148
   1b5bc:	movt	r5, #3
   1b5c0:	movt	r8, #3
   1b5c4:	ldr	r0, [r5]
   1b5c8:	ldr	r4, [r8]
   1b5cc:	cmp	r0, #2
   1b5d0:	blt	1b5fc <__assert_fail@plt+0xa040>
   1b5d4:	add	r7, r4, #12
   1b5d8:	mov	r6, #0
   1b5dc:	ldr	r0, [r7, r6, lsl #3]
   1b5e0:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   1b5e4:	ldr	r1, [r5]
   1b5e8:	add	r2, r6, #2
   1b5ec:	add	r0, r6, #1
   1b5f0:	mov	r6, r0
   1b5f4:	cmp	r2, r1
   1b5f8:	blt	1b5dc <__assert_fail@plt+0xa020>
   1b5fc:	ldr	r0, [r4, #4]
   1b600:	movw	r7, #8720	; 0x2210
   1b604:	movt	r7, #3
   1b608:	cmp	r0, r7
   1b60c:	beq	1b624 <__assert_fail@plt+0xa068>
   1b610:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   1b614:	movw	r0, #8528	; 0x2150
   1b618:	mov	r6, #256	; 0x100
   1b61c:	movt	r0, #3
   1b620:	strd	r6, [r0]
   1b624:	movw	r6, #8528	; 0x2150
   1b628:	movt	r6, #3
   1b62c:	cmp	r4, r6
   1b630:	beq	1b640 <__assert_fail@plt+0xa084>
   1b634:	mov	r0, r4
   1b638:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   1b63c:	str	r6, [r8]
   1b640:	mov	r0, #1
   1b644:	str	r0, [r5]
   1b648:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b64c:	movw	r3, #8672	; 0x21e0
   1b650:	mvn	r2, #0
   1b654:	movt	r3, #3
   1b658:	b	1b65c <__assert_fail@plt+0xa0a0>
   1b65c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b660:	add	fp, sp, #28
   1b664:	sub	sp, sp, #44	; 0x2c
   1b668:	mov	r7, r3
   1b66c:	str	r2, [sp, #36]	; 0x24
   1b670:	str	r1, [sp, #32]
   1b674:	mov	r5, r0
   1b678:	bl	11490 <__errno_location@plt>
   1b67c:	cmp	r5, #0
   1b680:	blt	1b7ec <__assert_fail@plt+0xa230>
   1b684:	cmn	r5, #-2147483647	; 0x80000001
   1b688:	beq	1b7ec <__assert_fail@plt+0xa230>
   1b68c:	movw	r8, #8524	; 0x214c
   1b690:	movw	r4, #8520	; 0x2148
   1b694:	str	r0, [sp, #28]
   1b698:	ldr	r0, [r0]
   1b69c:	movt	r8, #3
   1b6a0:	movt	r4, #3
   1b6a4:	ldr	r1, [r8]
   1b6a8:	ldr	r6, [r4]
   1b6ac:	str	r0, [sp, #24]
   1b6b0:	cmp	r1, r5
   1b6b4:	ble	1b6c0 <__assert_fail@plt+0xa104>
   1b6b8:	mov	sl, r6
   1b6bc:	b	1b728 <__assert_fail@plt+0xa16c>
   1b6c0:	movw	r9, #8528	; 0x2150
   1b6c4:	mov	r0, #8
   1b6c8:	add	r2, r5, #1
   1b6cc:	str	r1, [fp, #-32]	; 0xffffffe0
   1b6d0:	mvn	r3, #-2147483648	; 0x80000000
   1b6d4:	movt	r9, #3
   1b6d8:	str	r0, [sp]
   1b6dc:	sub	r2, r2, r1
   1b6e0:	sub	r1, fp, #32
   1b6e4:	subs	r0, r6, r9
   1b6e8:	movne	r0, r6
   1b6ec:	bl	1ce30 <__assert_fail@plt+0xb874>
   1b6f0:	cmp	r6, r9
   1b6f4:	mov	sl, r0
   1b6f8:	str	r0, [r4]
   1b6fc:	ldrdeq	r0, [r9]
   1b700:	stmeq	sl, {r0, r1}
   1b704:	ldr	r1, [r8]
   1b708:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b70c:	add	r0, sl, r1, lsl #3
   1b710:	sub	r1, r2, r1
   1b714:	lsl	r2, r1, #3
   1b718:	mov	r1, #0
   1b71c:	bl	114b4 <memset@plt>
   1b720:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b724:	str	r0, [r8]
   1b728:	mov	r9, sl
   1b72c:	ldr	r6, [r9, r5, lsl #3]!
   1b730:	ldr	r4, [r9, #4]!
   1b734:	ldm	r7, {r0, r1}
   1b738:	ldr	r2, [r7, #40]	; 0x28
   1b73c:	ldr	r3, [r7, #44]	; 0x2c
   1b740:	orr	r8, r1, #1
   1b744:	add	r1, r7, #8
   1b748:	stm	sp, {r0, r8}
   1b74c:	add	r0, sp, #8
   1b750:	str	r1, [sp, #20]
   1b754:	stm	r0, {r1, r2, r3}
   1b758:	mov	r0, r4
   1b75c:	mov	r1, r6
   1b760:	ldr	r2, [sp, #32]
   1b764:	ldr	r3, [sp, #36]	; 0x24
   1b768:	bl	1a404 <__assert_fail@plt+0x8e48>
   1b76c:	cmp	r6, r0
   1b770:	bhi	1b7d4 <__assert_fail@plt+0xa218>
   1b774:	add	r6, r0, #1
   1b778:	movw	r0, #8720	; 0x2210
   1b77c:	movt	r0, #3
   1b780:	str	r6, [sl, r5, lsl #3]
   1b784:	cmp	r4, r0
   1b788:	beq	1b794 <__assert_fail@plt+0xa1d8>
   1b78c:	mov	r0, r4
   1b790:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   1b794:	mov	r0, r6
   1b798:	bl	1cc30 <__assert_fail@plt+0xb674>
   1b79c:	str	r0, [r9]
   1b7a0:	mov	r4, r0
   1b7a4:	add	r3, sp, #8
   1b7a8:	ldr	r0, [r7]
   1b7ac:	ldr	r1, [r7, #40]	; 0x28
   1b7b0:	ldr	r2, [r7, #44]	; 0x2c
   1b7b4:	stm	sp, {r0, r8}
   1b7b8:	ldr	r0, [sp, #20]
   1b7bc:	stm	r3, {r0, r1, r2}
   1b7c0:	mov	r0, r4
   1b7c4:	mov	r1, r6
   1b7c8:	ldr	r2, [sp, #32]
   1b7cc:	ldr	r3, [sp, #36]	; 0x24
   1b7d0:	bl	1a404 <__assert_fail@plt+0x8e48>
   1b7d4:	ldr	r0, [sp, #28]
   1b7d8:	ldr	r1, [sp, #24]
   1b7dc:	str	r1, [r0]
   1b7e0:	mov	r0, r4
   1b7e4:	sub	sp, fp, #28
   1b7e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7ec:	bl	1158c <abort@plt>
   1b7f0:	movw	r3, #8672	; 0x21e0
   1b7f4:	movt	r3, #3
   1b7f8:	b	1b65c <__assert_fail@plt+0xa0a0>
   1b7fc:	movw	r3, #8672	; 0x21e0
   1b800:	mov	r1, r0
   1b804:	mov	r0, #0
   1b808:	mvn	r2, #0
   1b80c:	movt	r3, #3
   1b810:	b	1b65c <__assert_fail@plt+0xa0a0>
   1b814:	movw	r3, #8672	; 0x21e0
   1b818:	mov	r2, r1
   1b81c:	mov	r1, r0
   1b820:	mov	r0, #0
   1b824:	movt	r3, #3
   1b828:	b	1b65c <__assert_fail@plt+0xa0a0>
   1b82c:	push	{fp, lr}
   1b830:	mov	fp, sp
   1b834:	sub	sp, sp, #48	; 0x30
   1b838:	vmov.i32	q8, #0	; 0x00000000
   1b83c:	mov	ip, #32
   1b840:	mov	r3, sp
   1b844:	mov	lr, r2
   1b848:	cmp	r1, #10
   1b84c:	add	r2, r3, #16
   1b850:	vst1.64	{d16-d17}, [r3], ip
   1b854:	vst1.64	{d16-d17}, [r3]
   1b858:	vst1.64	{d16-d17}, [r2]
   1b85c:	beq	1b87c <__assert_fail@plt+0xa2c0>
   1b860:	str	r1, [sp]
   1b864:	mov	r3, sp
   1b868:	mov	r1, lr
   1b86c:	mvn	r2, #0
   1b870:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1b874:	mov	sp, fp
   1b878:	pop	{fp, pc}
   1b87c:	bl	1158c <abort@plt>
   1b880:	push	{r4, sl, fp, lr}
   1b884:	add	fp, sp, #8
   1b888:	sub	sp, sp, #48	; 0x30
   1b88c:	mov	ip, r3
   1b890:	mov	r3, sp
   1b894:	vmov.i32	q8, #0	; 0x00000000
   1b898:	mov	lr, #32
   1b89c:	cmp	r1, #10
   1b8a0:	add	r4, r3, #16
   1b8a4:	vst1.64	{d16-d17}, [r3], lr
   1b8a8:	vst1.64	{d16-d17}, [r3]
   1b8ac:	vst1.64	{d16-d17}, [r4]
   1b8b0:	beq	1b8d0 <__assert_fail@plt+0xa314>
   1b8b4:	str	r1, [sp]
   1b8b8:	mov	r1, r2
   1b8bc:	mov	r3, sp
   1b8c0:	mov	r2, ip
   1b8c4:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1b8c8:	sub	sp, fp, #8
   1b8cc:	pop	{r4, sl, fp, pc}
   1b8d0:	bl	1158c <abort@plt>
   1b8d4:	push	{fp, lr}
   1b8d8:	mov	fp, sp
   1b8dc:	sub	sp, sp, #48	; 0x30
   1b8e0:	mov	r3, sp
   1b8e4:	vmov.i32	q8, #0	; 0x00000000
   1b8e8:	mov	ip, #32
   1b8ec:	cmp	r0, #10
   1b8f0:	add	r2, r3, #16
   1b8f4:	vst1.64	{d16-d17}, [r3], ip
   1b8f8:	vst1.64	{d16-d17}, [r3]
   1b8fc:	vst1.64	{d16-d17}, [r2]
   1b900:	beq	1b920 <__assert_fail@plt+0xa364>
   1b904:	str	r0, [sp]
   1b908:	mov	r3, sp
   1b90c:	mov	r0, #0
   1b910:	mvn	r2, #0
   1b914:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1b918:	mov	sp, fp
   1b91c:	pop	{fp, pc}
   1b920:	bl	1158c <abort@plt>
   1b924:	push	{fp, lr}
   1b928:	mov	fp, sp
   1b92c:	sub	sp, sp, #48	; 0x30
   1b930:	mov	r3, sp
   1b934:	vmov.i32	q8, #0	; 0x00000000
   1b938:	mov	ip, #32
   1b93c:	cmp	r0, #10
   1b940:	add	lr, r3, #16
   1b944:	vst1.64	{d16-d17}, [r3], ip
   1b948:	vst1.64	{d16-d17}, [r3]
   1b94c:	vst1.64	{d16-d17}, [lr]
   1b950:	beq	1b96c <__assert_fail@plt+0xa3b0>
   1b954:	str	r0, [sp]
   1b958:	mov	r3, sp
   1b95c:	mov	r0, #0
   1b960:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1b964:	mov	sp, fp
   1b968:	pop	{fp, pc}
   1b96c:	bl	1158c <abort@plt>
   1b970:	push	{r4, sl, fp, lr}
   1b974:	add	fp, sp, #8
   1b978:	sub	sp, sp, #48	; 0x30
   1b97c:	mov	lr, r0
   1b980:	movw	r0, #8672	; 0x21e0
   1b984:	mov	r3, #32
   1b988:	mov	ip, r1
   1b98c:	mov	r4, #1
   1b990:	movt	r0, #3
   1b994:	add	r1, r0, #16
   1b998:	vld1.64	{d16-d17}, [r0], r3
   1b99c:	mov	r3, sp
   1b9a0:	vld1.64	{d18-d19}, [r1]
   1b9a4:	add	r1, r3, #16
   1b9a8:	vld1.64	{d20-d21}, [r0]
   1b9ac:	add	r0, r3, #32
   1b9b0:	vst1.64	{d18-d19}, [r1]
   1b9b4:	mov	r1, r3
   1b9b8:	vst1.64	{d20-d21}, [r0]
   1b9bc:	mov	r0, #28
   1b9c0:	and	r0, r0, r2, lsr #3
   1b9c4:	and	r2, r2, #31
   1b9c8:	vst1.64	{d16-d17}, [r1], r0
   1b9cc:	ldr	r0, [r1, #8]
   1b9d0:	bic	r4, r4, r0, lsr r2
   1b9d4:	eor	r0, r0, r4, lsl r2
   1b9d8:	mov	r2, ip
   1b9dc:	str	r0, [r1, #8]
   1b9e0:	mov	r0, #0
   1b9e4:	mov	r1, lr
   1b9e8:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1b9ec:	sub	sp, fp, #8
   1b9f0:	pop	{r4, sl, fp, pc}
   1b9f4:	push	{fp, lr}
   1b9f8:	mov	fp, sp
   1b9fc:	sub	sp, sp, #48	; 0x30
   1ba00:	mov	ip, r0
   1ba04:	movw	r0, #8672	; 0x21e0
   1ba08:	mov	r3, #32
   1ba0c:	movt	r0, #3
   1ba10:	add	r2, r0, #16
   1ba14:	vld1.64	{d16-d17}, [r0], r3
   1ba18:	mov	r3, sp
   1ba1c:	vld1.64	{d18-d19}, [r2]
   1ba20:	add	r2, r3, #16
   1ba24:	vld1.64	{d20-d21}, [r0]
   1ba28:	add	r0, r3, #32
   1ba2c:	vst1.64	{d18-d19}, [r2]
   1ba30:	mov	r2, r3
   1ba34:	vst1.64	{d20-d21}, [r0]
   1ba38:	mov	r0, #28
   1ba3c:	and	r0, r0, r1, lsr #3
   1ba40:	and	r1, r1, #31
   1ba44:	vst1.64	{d16-d17}, [r2], r0
   1ba48:	mov	r0, #1
   1ba4c:	ldr	lr, [r2, #8]
   1ba50:	bic	r0, r0, lr, lsr r1
   1ba54:	eor	r0, lr, r0, lsl r1
   1ba58:	mov	r1, ip
   1ba5c:	str	r0, [r2, #8]
   1ba60:	mov	r0, #0
   1ba64:	mvn	r2, #0
   1ba68:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1ba6c:	mov	sp, fp
   1ba70:	pop	{fp, pc}
   1ba74:	push	{fp, lr}
   1ba78:	mov	fp, sp
   1ba7c:	sub	sp, sp, #48	; 0x30
   1ba80:	movw	r2, #8672	; 0x21e0
   1ba84:	mov	r3, #32
   1ba88:	mov	r1, r0
   1ba8c:	movt	r2, #3
   1ba90:	add	r0, r2, #16
   1ba94:	vld1.64	{d16-d17}, [r2], r3
   1ba98:	mov	r3, sp
   1ba9c:	vld1.64	{d18-d19}, [r0]
   1baa0:	add	r0, r3, #16
   1baa4:	vld1.64	{d20-d21}, [r2]
   1baa8:	mov	r2, r3
   1baac:	vst1.64	{d18-d19}, [r0]
   1bab0:	add	r0, r3, #32
   1bab4:	vst1.64	{d20-d21}, [r0]
   1bab8:	mov	r0, #12
   1babc:	vst1.64	{d16-d17}, [r2], r0
   1bac0:	ldr	r0, [r2]
   1bac4:	orr	r0, r0, #67108864	; 0x4000000
   1bac8:	str	r0, [r2]
   1bacc:	mov	r0, #0
   1bad0:	mvn	r2, #0
   1bad4:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1bad8:	mov	sp, fp
   1badc:	pop	{fp, pc}
   1bae0:	push	{fp, lr}
   1bae4:	mov	fp, sp
   1bae8:	sub	sp, sp, #48	; 0x30
   1baec:	mov	ip, r1
   1baf0:	mov	r1, r0
   1baf4:	movw	r0, #8672	; 0x21e0
   1baf8:	mov	r3, #32
   1bafc:	movt	r0, #3
   1bb00:	add	r2, r0, #16
   1bb04:	vld1.64	{d16-d17}, [r0], r3
   1bb08:	mov	r3, sp
   1bb0c:	vld1.64	{d18-d19}, [r2]
   1bb10:	add	r2, r3, #16
   1bb14:	vld1.64	{d20-d21}, [r0]
   1bb18:	add	r0, r3, #32
   1bb1c:	vst1.64	{d18-d19}, [r2]
   1bb20:	mov	r2, r3
   1bb24:	vst1.64	{d20-d21}, [r0]
   1bb28:	mov	r0, #12
   1bb2c:	vst1.64	{d16-d17}, [r2], r0
   1bb30:	ldr	r0, [r2]
   1bb34:	orr	r0, r0, #67108864	; 0x4000000
   1bb38:	str	r0, [r2]
   1bb3c:	mov	r0, #0
   1bb40:	mov	r2, ip
   1bb44:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1bb48:	mov	sp, fp
   1bb4c:	pop	{fp, pc}
   1bb50:	push	{r4, sl, fp, lr}
   1bb54:	add	fp, sp, #8
   1bb58:	sub	sp, sp, #96	; 0x60
   1bb5c:	mov	ip, r2
   1bb60:	mov	r2, sp
   1bb64:	vmov.i32	q8, #0	; 0x00000000
   1bb68:	mov	r4, #28
   1bb6c:	cmp	r1, #10
   1bb70:	mov	r3, r2
   1bb74:	add	lr, r2, #16
   1bb78:	vst1.64	{d16-d17}, [r3], r4
   1bb7c:	vst1.64	{d16-d17}, [lr]
   1bb80:	vst1.32	{d16-d17}, [r3]
   1bb84:	beq	1bbd4 <__assert_fail@plt+0xa618>
   1bb88:	vld1.64	{d16-d17}, [r2], r4
   1bb8c:	vld1.64	{d18-d19}, [lr]
   1bb90:	add	r3, sp, #48	; 0x30
   1bb94:	add	r4, r3, #4
   1bb98:	vld1.32	{d20-d21}, [r2]
   1bb9c:	add	r2, r3, #20
   1bba0:	vst1.32	{d16-d17}, [r4]
   1bba4:	vst1.32	{d18-d19}, [r2]
   1bba8:	add	r2, r3, #32
   1bbac:	vst1.32	{d20-d21}, [r2]
   1bbb0:	str	r1, [sp, #48]	; 0x30
   1bbb4:	mvn	r2, #0
   1bbb8:	ldr	r1, [sp, #60]	; 0x3c
   1bbbc:	orr	r1, r1, #67108864	; 0x4000000
   1bbc0:	str	r1, [sp, #60]	; 0x3c
   1bbc4:	mov	r1, ip
   1bbc8:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1bbcc:	sub	sp, fp, #8
   1bbd0:	pop	{r4, sl, fp, pc}
   1bbd4:	bl	1158c <abort@plt>
   1bbd8:	push	{r4, r5, fp, lr}
   1bbdc:	add	fp, sp, #8
   1bbe0:	sub	sp, sp, #48	; 0x30
   1bbe4:	mov	ip, r3
   1bbe8:	movw	r3, #8672	; 0x21e0
   1bbec:	mov	lr, #32
   1bbf0:	cmp	r1, #0
   1bbf4:	mov	r5, sp
   1bbf8:	movt	r3, #3
   1bbfc:	cmpne	r2, #0
   1bc00:	add	r4, r3, #16
   1bc04:	vld1.64	{d16-d17}, [r3], lr
   1bc08:	vld1.64	{d18-d19}, [r4]
   1bc0c:	add	r4, r5, #16
   1bc10:	vld1.64	{d20-d21}, [r3]
   1bc14:	vst1.64	{d16-d17}, [r5], lr
   1bc18:	mov	r3, #10
   1bc1c:	vst1.64	{d18-d19}, [r4]
   1bc20:	vst1.64	{d20-d21}, [r5]
   1bc24:	str	r3, [sp]
   1bc28:	bne	1bc30 <__assert_fail@plt+0xa674>
   1bc2c:	bl	1158c <abort@plt>
   1bc30:	str	r2, [sp, #44]	; 0x2c
   1bc34:	str	r1, [sp, #40]	; 0x28
   1bc38:	mov	r3, sp
   1bc3c:	mov	r1, ip
   1bc40:	mvn	r2, #0
   1bc44:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1bc48:	sub	sp, fp, #8
   1bc4c:	pop	{r4, r5, fp, pc}
   1bc50:	push	{r4, r5, fp, lr}
   1bc54:	add	fp, sp, #8
   1bc58:	sub	sp, sp, #48	; 0x30
   1bc5c:	mov	lr, r3
   1bc60:	movw	r3, #8672	; 0x21e0
   1bc64:	mov	ip, #32
   1bc68:	cmp	r1, #0
   1bc6c:	mov	r5, sp
   1bc70:	movt	r3, #3
   1bc74:	cmpne	r2, #0
   1bc78:	add	r4, r3, #16
   1bc7c:	vld1.64	{d16-d17}, [r3], ip
   1bc80:	vld1.64	{d18-d19}, [r4]
   1bc84:	add	r4, r5, #16
   1bc88:	vld1.64	{d20-d21}, [r3]
   1bc8c:	vst1.64	{d16-d17}, [r5], ip
   1bc90:	mov	r3, #10
   1bc94:	vst1.64	{d18-d19}, [r4]
   1bc98:	vst1.64	{d20-d21}, [r5]
   1bc9c:	str	r3, [sp]
   1bca0:	bne	1bca8 <__assert_fail@plt+0xa6ec>
   1bca4:	bl	1158c <abort@plt>
   1bca8:	ldr	ip, [fp, #8]
   1bcac:	str	r2, [sp, #44]	; 0x2c
   1bcb0:	str	r1, [sp, #40]	; 0x28
   1bcb4:	mov	r3, sp
   1bcb8:	mov	r1, lr
   1bcbc:	mov	r2, ip
   1bcc0:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1bcc4:	sub	sp, fp, #8
   1bcc8:	pop	{r4, r5, fp, pc}
   1bccc:	push	{r4, sl, fp, lr}
   1bcd0:	add	fp, sp, #8
   1bcd4:	sub	sp, sp, #48	; 0x30
   1bcd8:	mov	ip, r2
   1bcdc:	movw	r2, #8672	; 0x21e0
   1bce0:	mov	lr, #32
   1bce4:	cmp	r0, #0
   1bce8:	mov	r4, sp
   1bcec:	movt	r2, #3
   1bcf0:	cmpne	r1, #0
   1bcf4:	add	r3, r2, #16
   1bcf8:	vld1.64	{d16-d17}, [r2], lr
   1bcfc:	vld1.64	{d18-d19}, [r3]
   1bd00:	add	r3, r4, #16
   1bd04:	vld1.64	{d20-d21}, [r2]
   1bd08:	vst1.64	{d16-d17}, [r4], lr
   1bd0c:	mov	r2, #10
   1bd10:	vst1.64	{d18-d19}, [r3]
   1bd14:	vst1.64	{d20-d21}, [r4]
   1bd18:	str	r2, [sp]
   1bd1c:	bne	1bd24 <__assert_fail@plt+0xa768>
   1bd20:	bl	1158c <abort@plt>
   1bd24:	str	r1, [sp, #44]	; 0x2c
   1bd28:	str	r0, [sp, #40]	; 0x28
   1bd2c:	mov	r3, sp
   1bd30:	mov	r0, #0
   1bd34:	mov	r1, ip
   1bd38:	mvn	r2, #0
   1bd3c:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1bd40:	sub	sp, fp, #8
   1bd44:	pop	{r4, sl, fp, pc}
   1bd48:	push	{r4, r5, fp, lr}
   1bd4c:	add	fp, sp, #8
   1bd50:	sub	sp, sp, #48	; 0x30
   1bd54:	mov	lr, r2
   1bd58:	movw	r2, #8672	; 0x21e0
   1bd5c:	mov	ip, r3
   1bd60:	mov	r3, #32
   1bd64:	cmp	r0, #0
   1bd68:	mov	r5, sp
   1bd6c:	movt	r2, #3
   1bd70:	cmpne	r1, #0
   1bd74:	add	r4, r2, #16
   1bd78:	vld1.64	{d16-d17}, [r2], r3
   1bd7c:	vld1.64	{d18-d19}, [r4]
   1bd80:	add	r4, r5, #16
   1bd84:	vld1.64	{d20-d21}, [r2]
   1bd88:	vst1.64	{d16-d17}, [r5], r3
   1bd8c:	mov	r2, #10
   1bd90:	vst1.64	{d18-d19}, [r4]
   1bd94:	vst1.64	{d20-d21}, [r5]
   1bd98:	str	r2, [sp]
   1bd9c:	bne	1bda4 <__assert_fail@plt+0xa7e8>
   1bda0:	bl	1158c <abort@plt>
   1bda4:	str	r1, [sp, #44]	; 0x2c
   1bda8:	str	r0, [sp, #40]	; 0x28
   1bdac:	mov	r3, sp
   1bdb0:	mov	r0, #0
   1bdb4:	mov	r1, lr
   1bdb8:	mov	r2, ip
   1bdbc:	bl	1b65c <__assert_fail@plt+0xa0a0>
   1bdc0:	sub	sp, fp, #8
   1bdc4:	pop	{r4, r5, fp, pc}
   1bdc8:	movw	r3, #8536	; 0x2158
   1bdcc:	movt	r3, #3
   1bdd0:	b	1b65c <__assert_fail@plt+0xa0a0>
   1bdd4:	movw	r3, #8536	; 0x2158
   1bdd8:	mov	r2, r1
   1bddc:	mov	r1, r0
   1bde0:	mov	r0, #0
   1bde4:	movt	r3, #3
   1bde8:	b	1b65c <__assert_fail@plt+0xa0a0>
   1bdec:	movw	r3, #8536	; 0x2158
   1bdf0:	mvn	r2, #0
   1bdf4:	movt	r3, #3
   1bdf8:	b	1b65c <__assert_fail@plt+0xa0a0>
   1bdfc:	movw	r3, #8536	; 0x2158
   1be00:	mov	r1, r0
   1be04:	mov	r0, #0
   1be08:	mvn	r2, #0
   1be0c:	movt	r3, #3
   1be10:	b	1b65c <__assert_fail@plt+0xa0a0>
   1be14:	push	{r4, r5, fp, lr}
   1be18:	add	fp, sp, #8
   1be1c:	mov	r5, r0
   1be20:	mov	r4, r1
   1be24:	mov	r0, #0
   1be28:	mov	r2, #5
   1be2c:	mov	r1, r5
   1be30:	bl	11328 <dcgettext@plt>
   1be34:	cmp	r0, r5
   1be38:	popne	{r4, r5, fp, pc}
   1be3c:	bl	1d4c4 <__assert_fail@plt+0xbf08>
   1be40:	ldrb	r1, [r0]
   1be44:	and	r1, r1, #223	; 0xdf
   1be48:	cmp	r1, #71	; 0x47
   1be4c:	beq	1beb4 <__assert_fail@plt+0xa8f8>
   1be50:	cmp	r1, #85	; 0x55
   1be54:	bne	1bed8 <__assert_fail@plt+0xa91c>
   1be58:	ldrb	r1, [r0, #1]
   1be5c:	and	r1, r1, #223	; 0xdf
   1be60:	cmp	r1, #84	; 0x54
   1be64:	bne	1bed8 <__assert_fail@plt+0xa91c>
   1be68:	ldrb	r1, [r0, #2]
   1be6c:	and	r1, r1, #223	; 0xdf
   1be70:	cmp	r1, #70	; 0x46
   1be74:	ldrbeq	r1, [r0, #3]
   1be78:	cmpeq	r1, #45	; 0x2d
   1be7c:	bne	1bed8 <__assert_fail@plt+0xa91c>
   1be80:	ldrb	r1, [r0, #4]
   1be84:	cmp	r1, #56	; 0x38
   1be88:	ldrbeq	r0, [r0, #5]
   1be8c:	cmpeq	r0, #0
   1be90:	bne	1bed8 <__assert_fail@plt+0xa91c>
   1be94:	ldrb	r1, [r5]
   1be98:	movw	r2, #5841	; 0x16d1
   1be9c:	movw	r0, #5845	; 0x16d5
   1bea0:	movt	r2, #2
   1bea4:	movt	r0, #2
   1bea8:	cmp	r1, #96	; 0x60
   1beac:	moveq	r0, r2
   1beb0:	pop	{r4, r5, fp, pc}
   1beb4:	ldrb	r1, [r0, #1]
   1beb8:	and	r1, r1, #223	; 0xdf
   1bebc:	cmp	r1, #66	; 0x42
   1bec0:	bne	1bed8 <__assert_fail@plt+0xa91c>
   1bec4:	ldrb	r1, [r0, #2]
   1bec8:	cmp	r1, #49	; 0x31
   1becc:	ldrbeq	r1, [r0, #3]
   1bed0:	cmpeq	r1, #56	; 0x38
   1bed4:	beq	1bef4 <__assert_fail@plt+0xa938>
   1bed8:	movw	r1, #3282	; 0xcd2
   1bedc:	movw	r0, #63893	; 0xf995
   1bee0:	cmp	r4, #9
   1bee4:	movt	r1, #2
   1bee8:	movt	r0, #1
   1beec:	moveq	r0, r1
   1bef0:	pop	{r4, r5, fp, pc}
   1bef4:	ldrb	r1, [r0, #4]
   1bef8:	cmp	r1, #48	; 0x30
   1befc:	ldrbeq	r1, [r0, #5]
   1bf00:	cmpeq	r1, #51	; 0x33
   1bf04:	bne	1bed8 <__assert_fail@plt+0xa91c>
   1bf08:	ldrb	r1, [r0, #6]
   1bf0c:	cmp	r1, #48	; 0x30
   1bf10:	ldrbeq	r0, [r0, #7]
   1bf14:	cmpeq	r0, #0
   1bf18:	bne	1bed8 <__assert_fail@plt+0xa91c>
   1bf1c:	ldrb	r1, [r5]
   1bf20:	movw	r2, #5849	; 0x16d9
   1bf24:	movw	r0, #5853	; 0x16dd
   1bf28:	movt	r2, #2
   1bf2c:	movt	r0, #2
   1bf30:	b	1bea8 <__assert_fail@plt+0xa8ec>
   1bf34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bf38:	add	fp, sp, #24
   1bf3c:	mov	r4, r0
   1bf40:	cmp	r0, #0
   1bf44:	beq	1bf68 <__assert_fail@plt+0xa9ac>
   1bf48:	mov	r0, r4
   1bf4c:	bl	1146c <strlen@plt>
   1bf50:	add	r5, r0, #1
   1bf54:	cmp	r5, #58	; 0x3a
   1bf58:	bls	1bf6c <__assert_fail@plt+0xa9b0>
   1bf5c:	add	r0, r0, #10
   1bf60:	bic	r0, r0, #3
   1bf64:	b	1bf70 <__assert_fail@plt+0xa9b4>
   1bf68:	mov	r5, #0
   1bf6c:	mov	r0, #64	; 0x40
   1bf70:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1bf74:	mov	r6, r0
   1bf78:	cmp	r0, #0
   1bf7c:	beq	1bfb8 <__assert_fail@plt+0xa9fc>
   1bf80:	cmp	r4, #0
   1bf84:	mov	r0, r4
   1bf88:	mov	r8, #0
   1bf8c:	mov	r7, r6
   1bf90:	movwne	r0, #1
   1bf94:	str	r8, [r6]
   1bf98:	strb	r0, [r6, #4]
   1bf9c:	strb	r8, [r7, #5]!
   1bfa0:	beq	1bfb8 <__assert_fail@plt+0xa9fc>
   1bfa4:	mov	r0, r7
   1bfa8:	mov	r1, r4
   1bfac:	mov	r2, r5
   1bfb0:	bl	112f8 <memcpy@plt>
   1bfb4:	strb	r8, [r7, r5]
   1bfb8:	mov	r0, r6
   1bfbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bfc0:	push	{r4, sl, fp, lr}
   1bfc4:	add	fp, sp, #8
   1bfc8:	cmp	r0, #2
   1bfcc:	popcc	{r4, sl, fp, pc}
   1bfd0:	ldr	r4, [r0]
   1bfd4:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   1bfd8:	cmp	r4, #0
   1bfdc:	mov	r0, r4
   1bfe0:	bne	1bfd0 <__assert_fail@plt+0xaa14>
   1bfe4:	pop	{r4, sl, fp, pc}
   1bfe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfec:	add	fp, sp, #28
   1bff0:	sub	sp, sp, #4
   1bff4:	mov	sl, r2
   1bff8:	mov	r7, r1
   1bffc:	cmp	r0, #0
   1c000:	beq	1c0d0 <__assert_fail@plt+0xab14>
   1c004:	mov	r6, r0
   1c008:	bl	1c10c <__assert_fail@plt+0xab50>
   1c00c:	cmp	r0, #0
   1c010:	moveq	r0, #0
   1c014:	subeq	sp, fp, #28
   1c018:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c01c:	mov	r4, r0
   1c020:	mov	r0, r7
   1c024:	mov	r1, sl
   1c028:	bl	1134c <localtime_r@plt>
   1c02c:	mov	r7, #1
   1c030:	cmp	r0, #0
   1c034:	mov	r9, #1
   1c038:	beq	1c04c <__assert_fail@plt+0xaa90>
   1c03c:	mov	r0, r6
   1c040:	mov	r1, sl
   1c044:	bl	1c258 <__assert_fail@plt+0xac9c>
   1c048:	eor	r9, r0, #1
   1c04c:	cmp	r4, #1
   1c050:	beq	1c0b4 <__assert_fail@plt+0xaaf8>
   1c054:	bl	11490 <__errno_location@plt>
   1c058:	mov	r6, r0
   1c05c:	ldr	r8, [r0]
   1c060:	ldrb	r0, [r4, #4]
   1c064:	cmp	r0, #0
   1c068:	beq	1c0e4 <__assert_fail@plt+0xab28>
   1c06c:	movw	r0, #2410	; 0x96a
   1c070:	add	r1, r4, #5
   1c074:	mov	r2, #1
   1c078:	movt	r0, #2
   1c07c:	bl	11484 <setenv@plt>
   1c080:	cmp	r0, #0
   1c084:	beq	1c0f8 <__assert_fail@plt+0xab3c>
   1c088:	ldr	r8, [r6]
   1c08c:	mov	r7, #0
   1c090:	cmp	r4, #2
   1c094:	bcc	1c0b0 <__assert_fail@plt+0xaaf4>
   1c098:	ldr	r5, [r4]
   1c09c:	mov	r0, r4
   1c0a0:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   1c0a4:	cmp	r5, #0
   1c0a8:	mov	r4, r5
   1c0ac:	bne	1c098 <__assert_fail@plt+0xaadc>
   1c0b0:	str	r8, [r6]
   1c0b4:	cmp	r7, #0
   1c0b8:	moveq	sl, r7
   1c0bc:	cmp	r9, #0
   1c0c0:	movwne	sl, #0
   1c0c4:	mov	r0, sl
   1c0c8:	sub	sp, fp, #28
   1c0cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0d0:	mov	r0, r7
   1c0d4:	mov	r1, sl
   1c0d8:	sub	sp, fp, #28
   1c0dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0e0:	b	1128c <gmtime_r@plt>
   1c0e4:	movw	r0, #2410	; 0x96a
   1c0e8:	movt	r0, #2
   1c0ec:	bl	11568 <unsetenv@plt>
   1c0f0:	cmp	r0, #0
   1c0f4:	bne	1c088 <__assert_fail@plt+0xaacc>
   1c0f8:	bl	11370 <tzset@plt>
   1c0fc:	mov	r7, #1
   1c100:	cmp	r4, #2
   1c104:	bcs	1c098 <__assert_fail@plt+0xaadc>
   1c108:	b	1c0b0 <__assert_fail@plt+0xaaf4>
   1c10c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c110:	add	fp, sp, #28
   1c114:	sub	sp, sp, #4
   1c118:	mov	r4, r0
   1c11c:	movw	r0, #2410	; 0x96a
   1c120:	movt	r0, #2
   1c124:	bl	113d0 <getenv@plt>
   1c128:	mov	r6, r0
   1c12c:	ldrb	r0, [r4, #4]
   1c130:	cmp	r6, #0
   1c134:	beq	1c178 <__assert_fail@plt+0xabbc>
   1c138:	cmp	r0, #0
   1c13c:	beq	1c154 <__assert_fail@plt+0xab98>
   1c140:	add	r0, r4, #5
   1c144:	mov	r1, r6
   1c148:	bl	112a4 <strcmp@plt>
   1c14c:	cmp	r0, #0
   1c150:	beq	1c22c <__assert_fail@plt+0xac70>
   1c154:	mov	r0, r6
   1c158:	bl	1146c <strlen@plt>
   1c15c:	add	r8, r0, #1
   1c160:	mov	r9, #1
   1c164:	cmp	r8, #58	; 0x3a
   1c168:	bls	1c188 <__assert_fail@plt+0xabcc>
   1c16c:	add	r0, r0, #10
   1c170:	bic	r0, r0, #3
   1c174:	b	1c18c <__assert_fail@plt+0xabd0>
   1c178:	mov	r9, #0
   1c17c:	cmp	r0, #0
   1c180:	mov	r8, #0
   1c184:	beq	1c22c <__assert_fail@plt+0xac70>
   1c188:	mov	r0, #64	; 0x40
   1c18c:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1c190:	cmp	r0, #0
   1c194:	beq	1c224 <__assert_fail@plt+0xac68>
   1c198:	mov	sl, #0
   1c19c:	mov	r7, r0
   1c1a0:	strb	r9, [r0, #4]
   1c1a4:	mov	r5, r0
   1c1a8:	cmp	r9, #0
   1c1ac:	str	sl, [r0]
   1c1b0:	strb	sl, [r7, #5]!
   1c1b4:	beq	1c1cc <__assert_fail@plt+0xac10>
   1c1b8:	mov	r0, r7
   1c1bc:	mov	r1, r6
   1c1c0:	mov	r2, r8
   1c1c4:	bl	112f8 <memcpy@plt>
   1c1c8:	strb	sl, [r7, r8]
   1c1cc:	ldrb	r0, [r4, #4]
   1c1d0:	cmp	r0, #0
   1c1d4:	beq	1c234 <__assert_fail@plt+0xac78>
   1c1d8:	movw	r0, #2410	; 0x96a
   1c1dc:	add	r1, r4, #5
   1c1e0:	mov	r2, #1
   1c1e4:	movt	r0, #2
   1c1e8:	bl	11484 <setenv@plt>
   1c1ec:	cmp	r0, #0
   1c1f0:	beq	1c248 <__assert_fail@plt+0xac8c>
   1c1f4:	bl	11490 <__errno_location@plt>
   1c1f8:	ldr	r6, [r0]
   1c1fc:	mov	r4, r0
   1c200:	cmp	r5, #2
   1c204:	bcc	1c220 <__assert_fail@plt+0xac64>
   1c208:	ldr	r7, [r5]
   1c20c:	mov	r0, r5
   1c210:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   1c214:	cmp	r7, #0
   1c218:	mov	r5, r7
   1c21c:	bne	1c208 <__assert_fail@plt+0xac4c>
   1c220:	str	r6, [r4]
   1c224:	mov	r5, #0
   1c228:	b	1c24c <__assert_fail@plt+0xac90>
   1c22c:	mov	r5, #1
   1c230:	b	1c24c <__assert_fail@plt+0xac90>
   1c234:	movw	r0, #2410	; 0x96a
   1c238:	movt	r0, #2
   1c23c:	bl	11568 <unsetenv@plt>
   1c240:	cmp	r0, #0
   1c244:	bne	1c1f4 <__assert_fail@plt+0xac38>
   1c248:	bl	11370 <tzset@plt>
   1c24c:	mov	r0, r5
   1c250:	sub	sp, fp, #28
   1c254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c25c:	add	fp, sp, #28
   1c260:	sub	sp, sp, #4
   1c264:	ldr	r7, [r1, #40]	; 0x28
   1c268:	mov	r8, #1
   1c26c:	cmp	r7, #0
   1c270:	beq	1c314 <__assert_fail@plt+0xad58>
   1c274:	mov	r5, r1
   1c278:	mov	r6, r0
   1c27c:	cmp	r7, r1
   1c280:	bcc	1c290 <__assert_fail@plt+0xacd4>
   1c284:	add	r0, r5, #44	; 0x2c
   1c288:	cmp	r7, r0
   1c28c:	bcc	1c314 <__assert_fail@plt+0xad58>
   1c290:	ldrb	r0, [r7]
   1c294:	cmp	r0, #0
   1c298:	beq	1c308 <__assert_fail@plt+0xad4c>
   1c29c:	add	r4, r6, #5
   1c2a0:	b	1c2b4 <__assert_fail@plt+0xacf8>
   1c2a4:	ldr	r0, [r6]
   1c2a8:	cmp	r0, #0
   1c2ac:	addne	r4, r0, #5
   1c2b0:	movne	r6, r0
   1c2b4:	mov	r0, r4
   1c2b8:	mov	r1, r7
   1c2bc:	bl	112a4 <strcmp@plt>
   1c2c0:	cmp	r0, #0
   1c2c4:	beq	1c310 <__assert_fail@plt+0xad54>
   1c2c8:	ldrb	r0, [r4]
   1c2cc:	cmp	r0, #0
   1c2d0:	bne	1c2ec <__assert_fail@plt+0xad30>
   1c2d4:	add	r0, r6, #5
   1c2d8:	cmp	r4, r0
   1c2dc:	bne	1c320 <__assert_fail@plt+0xad64>
   1c2e0:	ldrb	r0, [r6, #4]
   1c2e4:	cmp	r0, #0
   1c2e8:	beq	1c320 <__assert_fail@plt+0xad64>
   1c2ec:	mov	r0, r4
   1c2f0:	bl	1146c <strlen@plt>
   1c2f4:	add	r4, r4, r0
   1c2f8:	ldrb	r0, [r4, #1]!
   1c2fc:	cmp	r0, #0
   1c300:	bne	1c2b4 <__assert_fail@plt+0xacf8>
   1c304:	b	1c2a4 <__assert_fail@plt+0xace8>
   1c308:	movw	r4, #5329	; 0x14d1
   1c30c:	movt	r4, #2
   1c310:	str	r4, [r5, #40]	; 0x28
   1c314:	mov	r0, r8
   1c318:	sub	sp, fp, #28
   1c31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c320:	add	r0, r6, #64	; 0x40
   1c324:	sub	sl, r0, r4
   1c328:	mov	r0, r7
   1c32c:	bl	1146c <strlen@plt>
   1c330:	add	r9, r0, #1
   1c334:	cmp	r9, sl
   1c338:	bge	1c358 <__assert_fail@plt+0xad9c>
   1c33c:	mov	r0, r4
   1c340:	mov	r1, r7
   1c344:	mov	r2, r9
   1c348:	bl	112f8 <memcpy@plt>
   1c34c:	mov	r0, #0
   1c350:	strb	r0, [r4, r9]
   1c354:	b	1c310 <__assert_fail@plt+0xad54>
   1c358:	add	r0, r0, #10
   1c35c:	cmp	r9, #59	; 0x3b
   1c360:	bic	r0, r0, #3
   1c364:	movwcc	r0, #64	; 0x40
   1c368:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1c36c:	cmp	r0, #0
   1c370:	beq	1c3b0 <__assert_fail@plt+0xadf4>
   1c374:	mov	sl, r0
   1c378:	mov	r0, #0
   1c37c:	mov	r1, r7
   1c380:	mov	r2, r9
   1c384:	str	r0, [sl]
   1c388:	mov	r0, #1
   1c38c:	add	r4, sl, #5
   1c390:	strh	r0, [sl, #4]
   1c394:	mov	r0, r4
   1c398:	bl	112f8 <memcpy@plt>
   1c39c:	mov	r0, #0
   1c3a0:	strb	r0, [r4, r9]
   1c3a4:	str	sl, [r6]
   1c3a8:	strb	r0, [sl, #4]
   1c3ac:	b	1c310 <__assert_fail@plt+0xad54>
   1c3b0:	mov	r8, #0
   1c3b4:	str	r8, [r6]
   1c3b8:	b	1c314 <__assert_fail@plt+0xad58>
   1c3bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3c0:	add	fp, sp, #28
   1c3c4:	sub	sp, sp, #52	; 0x34
   1c3c8:	mov	r4, r1
   1c3cc:	cmp	r0, #0
   1c3d0:	beq	1c4dc <__assert_fail@plt+0xaf20>
   1c3d4:	mov	r6, r0
   1c3d8:	bl	1c10c <__assert_fail@plt+0xab50>
   1c3dc:	cmp	r0, #0
   1c3e0:	beq	1c4d4 <__assert_fail@plt+0xaf18>
   1c3e4:	mov	r8, r0
   1c3e8:	mov	r0, #32
   1c3ec:	mov	r1, r4
   1c3f0:	add	r5, sp, #8
   1c3f4:	vld1.32	{d16-d17}, [r1], r0
   1c3f8:	mov	r2, r5
   1c3fc:	vst1.32	{d16-d17}, [r2], r0
   1c400:	ldr	r0, [r4, #16]
   1c404:	ldr	r3, [r4, #20]
   1c408:	str	r0, [sp, #24]
   1c40c:	mvn	r0, #0
   1c410:	str	r0, [sp, #36]	; 0x24
   1c414:	str	r3, [sp, #28]
   1c418:	ldr	r0, [r1]
   1c41c:	str	r0, [r2]
   1c420:	mov	r0, r5
   1c424:	bl	112bc <mktime@plt>
   1c428:	mov	r9, r0
   1c42c:	ldr	r0, [sp, #36]	; 0x24
   1c430:	mov	sl, #1
   1c434:	mov	r1, #1
   1c438:	cmp	r0, #0
   1c43c:	blt	1c450 <__assert_fail@plt+0xae94>
   1c440:	add	r1, sp, #8
   1c444:	mov	r0, r6
   1c448:	bl	1c258 <__assert_fail@plt+0xac9c>
   1c44c:	eor	r1, r0, #1
   1c450:	cmp	r8, #1
   1c454:	beq	1c4c8 <__assert_fail@plt+0xaf0c>
   1c458:	str	r1, [sp, #4]
   1c45c:	bl	11490 <__errno_location@plt>
   1c460:	mov	r6, r0
   1c464:	ldr	r7, [r0]
   1c468:	ldrb	r0, [r8, #4]
   1c46c:	cmp	r0, #0
   1c470:	beq	1c51c <__assert_fail@plt+0xaf60>
   1c474:	movw	r0, #2410	; 0x96a
   1c478:	add	r1, r8, #5
   1c47c:	mov	r2, #1
   1c480:	movt	r0, #2
   1c484:	bl	11484 <setenv@plt>
   1c488:	cmp	r0, #0
   1c48c:	beq	1c530 <__assert_fail@plt+0xaf74>
   1c490:	ldr	r0, [r6]
   1c494:	mov	sl, #0
   1c498:	str	r0, [sp]
   1c49c:	cmp	r8, #2
   1c4a0:	bcc	1c4bc <__assert_fail@plt+0xaf00>
   1c4a4:	ldr	r7, [r8]
   1c4a8:	mov	r0, r8
   1c4ac:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   1c4b0:	cmp	r7, #0
   1c4b4:	mov	r8, r7
   1c4b8:	bne	1c4a4 <__assert_fail@plt+0xaee8>
   1c4bc:	ldr	r0, [sp]
   1c4c0:	ldr	r1, [sp, #4]
   1c4c4:	str	r0, [r6]
   1c4c8:	eor	r0, sl, #1
   1c4cc:	orrs	r0, r1, r0
   1c4d0:	beq	1c4ec <__assert_fail@plt+0xaf30>
   1c4d4:	mvn	r9, #0
   1c4d8:	b	1c510 <__assert_fail@plt+0xaf54>
   1c4dc:	mov	r0, r4
   1c4e0:	sub	sp, fp, #28
   1c4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4e8:	b	11538 <timegm@plt>
   1c4ec:	mov	r0, #28
   1c4f0:	add	r1, r5, #16
   1c4f4:	vld1.32	{d16-d17}, [r5], r0
   1c4f8:	vld1.64	{d18-d19}, [r1]
   1c4fc:	add	r1, r4, #16
   1c500:	vld1.32	{d20-d21}, [r5]
   1c504:	vst1.32	{d16-d17}, [r4], r0
   1c508:	vst1.32	{d18-d19}, [r1]
   1c50c:	vst1.32	{d20-d21}, [r4]
   1c510:	mov	r0, r9
   1c514:	sub	sp, fp, #28
   1c518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c51c:	movw	r0, #2410	; 0x96a
   1c520:	movt	r0, #2
   1c524:	bl	11568 <unsetenv@plt>
   1c528:	cmp	r0, #0
   1c52c:	bne	1c490 <__assert_fail@plt+0xaed4>
   1c530:	str	r7, [sp]
   1c534:	bl	11370 <tzset@plt>
   1c538:	mov	sl, #1
   1c53c:	cmp	r8, #2
   1c540:	bcs	1c4a4 <__assert_fail@plt+0xaee8>
   1c544:	b	1c4bc <__assert_fail@plt+0xaf00>
   1c548:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c54c:	add	fp, sp, #24
   1c550:	sub	sp, sp, #32
   1c554:	ldr	r6, [fp, #12]
   1c558:	ldr	r7, [fp, #8]
   1c55c:	mov	r4, r2
   1c560:	mov	r8, r0
   1c564:	cmp	r1, #0
   1c568:	beq	1c590 <__assert_fail@plt+0xafd4>
   1c56c:	movw	r2, #5940	; 0x1734
   1c570:	mov	r5, r1
   1c574:	str	r3, [sp, #4]
   1c578:	str	r4, [sp]
   1c57c:	mov	r0, r8
   1c580:	mov	r1, #1
   1c584:	movt	r2, #2
   1c588:	mov	r3, r5
   1c58c:	b	1c5a8 <__assert_fail@plt+0xafec>
   1c590:	movw	r2, #5952	; 0x1740
   1c594:	str	r3, [sp]
   1c598:	mov	r0, r8
   1c59c:	mov	r1, #1
   1c5a0:	mov	r3, r4
   1c5a4:	movt	r2, #2
   1c5a8:	bl	114d8 <__fprintf_chk@plt>
   1c5ac:	movw	r1, #5959	; 0x1747
   1c5b0:	mov	r0, #0
   1c5b4:	mov	r2, #5
   1c5b8:	movt	r1, #2
   1c5bc:	bl	11328 <dcgettext@plt>
   1c5c0:	movw	r2, #6677	; 0x1a15
   1c5c4:	mov	r3, r0
   1c5c8:	movw	r0, #2022	; 0x7e6
   1c5cc:	mov	r1, #1
   1c5d0:	str	r0, [sp]
   1c5d4:	movt	r2, #2
   1c5d8:	mov	r0, r8
   1c5dc:	bl	114d8 <__fprintf_chk@plt>
   1c5e0:	movw	r4, #5328	; 0x14d0
   1c5e4:	mov	r1, r8
   1c5e8:	movt	r4, #2
   1c5ec:	mov	r0, r4
   1c5f0:	bl	11274 <fputs_unlocked@plt>
   1c5f4:	movw	r1, #5963	; 0x174b
   1c5f8:	mov	r0, #0
   1c5fc:	mov	r2, #5
   1c600:	movt	r1, #2
   1c604:	bl	11328 <dcgettext@plt>
   1c608:	movw	r3, #6134	; 0x17f6
   1c60c:	mov	r2, r0
   1c610:	mov	r0, r8
   1c614:	mov	r1, #1
   1c618:	movt	r3, #2
   1c61c:	bl	114d8 <__fprintf_chk@plt>
   1c620:	mov	r0, r4
   1c624:	mov	r1, r8
   1c628:	bl	11274 <fputs_unlocked@plt>
   1c62c:	cmp	r6, #9
   1c630:	bhi	1c66c <__assert_fail@plt+0xb0b0>
   1c634:	add	r0, pc, #0
   1c638:	ldr	pc, [r0, r6, lsl #2]
   1c63c:	andeq	ip, r1, r4, ror #12
   1c640:	andeq	ip, r1, r8, ror r6
   1c644:	andeq	ip, r1, r8, lsr #13
   1c648:	ldrdeq	ip, [r1], -r0
   1c64c:	strdeq	ip, [r1], -r8
   1c650:	andeq	ip, r1, r0, lsr #14
   1c654:	andeq	ip, r1, r8, asr #14
   1c658:	andeq	ip, r1, r0, lsl #15
   1c65c:	andeq	ip, r1, r0, lsr #16
   1c660:	andeq	ip, r1, r8, asr #15
   1c664:	sub	sp, fp, #24
   1c668:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c66c:	movw	r1, #6487	; 0x1957
   1c670:	movt	r1, #2
   1c674:	b	1c7d0 <__assert_fail@plt+0xb214>
   1c678:	movw	r1, #6168	; 0x1818
   1c67c:	mov	r0, #0
   1c680:	mov	r2, #5
   1c684:	movt	r1, #2
   1c688:	bl	11328 <dcgettext@plt>
   1c68c:	ldr	r3, [r7]
   1c690:	mov	r2, r0
   1c694:	mov	r0, r8
   1c698:	mov	r1, #1
   1c69c:	sub	sp, fp, #24
   1c6a0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c6a4:	b	114d8 <__fprintf_chk@plt>
   1c6a8:	movw	r1, #6184	; 0x1828
   1c6ac:	mov	r0, #0
   1c6b0:	mov	r2, #5
   1c6b4:	movt	r1, #2
   1c6b8:	bl	11328 <dcgettext@plt>
   1c6bc:	mov	r2, r0
   1c6c0:	ldr	r3, [r7]
   1c6c4:	ldr	r0, [r7, #4]
   1c6c8:	str	r0, [sp]
   1c6cc:	b	1c7bc <__assert_fail@plt+0xb200>
   1c6d0:	movw	r1, #6207	; 0x183f
   1c6d4:	mov	r0, #0
   1c6d8:	mov	r2, #5
   1c6dc:	movt	r1, #2
   1c6e0:	bl	11328 <dcgettext@plt>
   1c6e4:	ldr	r3, [r7]
   1c6e8:	mov	r2, r0
   1c6ec:	ldmib	r7, {r0, r1}
   1c6f0:	stm	sp, {r0, r1}
   1c6f4:	b	1c7bc <__assert_fail@plt+0xb200>
   1c6f8:	movw	r1, #6235	; 0x185b
   1c6fc:	mov	r0, #0
   1c700:	mov	r2, #5
   1c704:	movt	r1, #2
   1c708:	bl	11328 <dcgettext@plt>
   1c70c:	ldr	r3, [r7]
   1c710:	mov	r2, r0
   1c714:	ldmib	r7, {r0, r1, r7}
   1c718:	stm	sp, {r0, r1, r7}
   1c71c:	b	1c7bc <__assert_fail@plt+0xb200>
   1c720:	movw	r1, #6267	; 0x187b
   1c724:	mov	r0, #0
   1c728:	mov	r2, #5
   1c72c:	movt	r1, #2
   1c730:	bl	11328 <dcgettext@plt>
   1c734:	ldr	r3, [r7]
   1c738:	mov	r2, r0
   1c73c:	ldmib	r7, {r0, r1, r6, r7}
   1c740:	stm	sp, {r0, r1, r6, r7}
   1c744:	b	1c7bc <__assert_fail@plt+0xb200>
   1c748:	movw	r1, #6303	; 0x189f
   1c74c:	mov	r0, #0
   1c750:	mov	r2, #5
   1c754:	movt	r1, #2
   1c758:	bl	11328 <dcgettext@plt>
   1c75c:	ldr	r3, [r7]
   1c760:	mov	r2, r0
   1c764:	ldmib	r7, {r0, r1, r6}
   1c768:	ldr	r5, [r7, #16]
   1c76c:	ldr	r7, [r7, #20]
   1c770:	stm	sp, {r0, r1, r6}
   1c774:	str	r5, [sp, #12]
   1c778:	str	r7, [sp, #16]
   1c77c:	b	1c7bc <__assert_fail@plt+0xb200>
   1c780:	movw	r1, #6343	; 0x18c7
   1c784:	mov	r0, #0
   1c788:	mov	r2, #5
   1c78c:	movt	r1, #2
   1c790:	bl	11328 <dcgettext@plt>
   1c794:	ldr	r3, [r7]
   1c798:	mov	r2, r0
   1c79c:	ldmib	r7, {r0, r1, r6}
   1c7a0:	ldr	r5, [r7, #16]
   1c7a4:	ldr	r4, [r7, #20]
   1c7a8:	ldr	r7, [r7, #24]
   1c7ac:	stm	sp, {r0, r1, r6}
   1c7b0:	str	r5, [sp, #12]
   1c7b4:	str	r4, [sp, #16]
   1c7b8:	str	r7, [sp, #20]
   1c7bc:	mov	r0, r8
   1c7c0:	mov	r1, #1
   1c7c4:	b	1c870 <__assert_fail@plt+0xb2b4>
   1c7c8:	movw	r1, #6435	; 0x1923
   1c7cc:	movt	r1, #2
   1c7d0:	mov	r0, #0
   1c7d4:	mov	r2, #5
   1c7d8:	bl	11328 <dcgettext@plt>
   1c7dc:	mov	ip, r0
   1c7e0:	ldr	r3, [r7]
   1c7e4:	ldr	r0, [r7, #4]
   1c7e8:	ldr	r1, [r7, #8]
   1c7ec:	ldr	r6, [r7, #12]
   1c7f0:	ldr	r5, [r7, #16]
   1c7f4:	ldr	r4, [r7, #20]
   1c7f8:	ldr	r2, [r7, #24]
   1c7fc:	ldr	lr, [r7, #28]
   1c800:	ldr	r7, [r7, #32]
   1c804:	stm	sp, {r0, r1, r6}
   1c808:	str	r5, [sp, #12]
   1c80c:	str	r4, [sp, #16]
   1c810:	str	r2, [sp, #20]
   1c814:	str	lr, [sp, #24]
   1c818:	str	r7, [sp, #28]
   1c81c:	b	1c864 <__assert_fail@plt+0xb2a8>
   1c820:	movw	r1, #6387	; 0x18f3
   1c824:	mov	r0, #0
   1c828:	mov	r2, #5
   1c82c:	movt	r1, #2
   1c830:	bl	11328 <dcgettext@plt>
   1c834:	mov	ip, r0
   1c838:	ldr	r3, [r7]
   1c83c:	ldmib	r7, {r0, r1, r6}
   1c840:	ldr	r5, [r7, #16]
   1c844:	ldr	r4, [r7, #20]
   1c848:	ldr	r2, [r7, #24]
   1c84c:	ldr	r7, [r7, #28]
   1c850:	stm	sp, {r0, r1, r6}
   1c854:	str	r5, [sp, #12]
   1c858:	str	r4, [sp, #16]
   1c85c:	str	r2, [sp, #20]
   1c860:	str	r7, [sp, #24]
   1c864:	mov	r0, r8
   1c868:	mov	r1, #1
   1c86c:	mov	r2, ip
   1c870:	bl	114d8 <__fprintf_chk@plt>
   1c874:	sub	sp, fp, #24
   1c878:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c87c:	push	{r4, sl, fp, lr}
   1c880:	add	fp, sp, #8
   1c884:	sub	sp, sp, #8
   1c888:	ldr	ip, [fp, #8]
   1c88c:	mov	lr, #0
   1c890:	ldr	r4, [ip, lr, lsl #2]
   1c894:	add	lr, lr, #1
   1c898:	cmp	r4, #0
   1c89c:	bne	1c890 <__assert_fail@plt+0xb2d4>
   1c8a0:	sub	r4, lr, #1
   1c8a4:	str	ip, [sp]
   1c8a8:	str	r4, [sp, #4]
   1c8ac:	bl	1c548 <__assert_fail@plt+0xaf8c>
   1c8b0:	sub	sp, fp, #8
   1c8b4:	pop	{r4, sl, fp, pc}
   1c8b8:	push	{fp, lr}
   1c8bc:	mov	fp, sp
   1c8c0:	sub	sp, sp, #48	; 0x30
   1c8c4:	ldr	ip, [fp, #8]
   1c8c8:	ldr	lr, [ip]
   1c8cc:	cmp	lr, #0
   1c8d0:	str	lr, [sp, #8]
   1c8d4:	beq	1c970 <__assert_fail@plt+0xb3b4>
   1c8d8:	ldr	lr, [ip, #4]
   1c8dc:	cmp	lr, #0
   1c8e0:	str	lr, [sp, #12]
   1c8e4:	beq	1c978 <__assert_fail@plt+0xb3bc>
   1c8e8:	ldr	lr, [ip, #8]
   1c8ec:	cmp	lr, #0
   1c8f0:	str	lr, [sp, #16]
   1c8f4:	beq	1c980 <__assert_fail@plt+0xb3c4>
   1c8f8:	ldr	lr, [ip, #12]
   1c8fc:	cmp	lr, #0
   1c900:	str	lr, [sp, #20]
   1c904:	beq	1c988 <__assert_fail@plt+0xb3cc>
   1c908:	ldr	lr, [ip, #16]
   1c90c:	cmp	lr, #0
   1c910:	str	lr, [sp, #24]
   1c914:	beq	1c990 <__assert_fail@plt+0xb3d4>
   1c918:	ldr	lr, [ip, #20]
   1c91c:	cmp	lr, #0
   1c920:	str	lr, [sp, #28]
   1c924:	beq	1c998 <__assert_fail@plt+0xb3dc>
   1c928:	ldr	lr, [ip, #24]
   1c92c:	cmp	lr, #0
   1c930:	str	lr, [sp, #32]
   1c934:	beq	1c9a0 <__assert_fail@plt+0xb3e4>
   1c938:	ldr	lr, [ip, #28]
   1c93c:	cmp	lr, #0
   1c940:	str	lr, [sp, #36]	; 0x24
   1c944:	beq	1c9a8 <__assert_fail@plt+0xb3ec>
   1c948:	ldr	lr, [ip, #32]
   1c94c:	cmp	lr, #0
   1c950:	str	lr, [sp, #40]	; 0x28
   1c954:	beq	1c9b0 <__assert_fail@plt+0xb3f4>
   1c958:	ldr	lr, [ip, #36]	; 0x24
   1c95c:	mov	ip, #10
   1c960:	cmp	lr, #0
   1c964:	str	lr, [sp, #44]	; 0x2c
   1c968:	movweq	ip, #9
   1c96c:	b	1c9b4 <__assert_fail@plt+0xb3f8>
   1c970:	mov	ip, #0
   1c974:	b	1c9b4 <__assert_fail@plt+0xb3f8>
   1c978:	mov	ip, #1
   1c97c:	b	1c9b4 <__assert_fail@plt+0xb3f8>
   1c980:	mov	ip, #2
   1c984:	b	1c9b4 <__assert_fail@plt+0xb3f8>
   1c988:	mov	ip, #3
   1c98c:	b	1c9b4 <__assert_fail@plt+0xb3f8>
   1c990:	mov	ip, #4
   1c994:	b	1c9b4 <__assert_fail@plt+0xb3f8>
   1c998:	mov	ip, #5
   1c99c:	b	1c9b4 <__assert_fail@plt+0xb3f8>
   1c9a0:	mov	ip, #6
   1c9a4:	b	1c9b4 <__assert_fail@plt+0xb3f8>
   1c9a8:	mov	ip, #7
   1c9ac:	b	1c9b4 <__assert_fail@plt+0xb3f8>
   1c9b0:	mov	ip, #8
   1c9b4:	add	lr, sp, #8
   1c9b8:	str	ip, [sp, #4]
   1c9bc:	str	lr, [sp]
   1c9c0:	bl	1c548 <__assert_fail@plt+0xaf8c>
   1c9c4:	mov	sp, fp
   1c9c8:	pop	{fp, pc}
   1c9cc:	push	{fp, lr}
   1c9d0:	mov	fp, sp
   1c9d4:	sub	sp, sp, #56	; 0x38
   1c9d8:	add	ip, fp, #8
   1c9dc:	str	ip, [sp, #12]
   1c9e0:	ldr	lr, [fp, #8]
   1c9e4:	cmp	lr, #0
   1c9e8:	str	lr, [sp, #16]
   1c9ec:	beq	1ca88 <__assert_fail@plt+0xb4cc>
   1c9f0:	ldr	lr, [ip, #4]
   1c9f4:	cmp	lr, #0
   1c9f8:	str	lr, [sp, #20]
   1c9fc:	beq	1ca90 <__assert_fail@plt+0xb4d4>
   1ca00:	ldr	lr, [ip, #8]
   1ca04:	cmp	lr, #0
   1ca08:	str	lr, [sp, #24]
   1ca0c:	beq	1ca98 <__assert_fail@plt+0xb4dc>
   1ca10:	ldr	lr, [ip, #12]
   1ca14:	cmp	lr, #0
   1ca18:	str	lr, [sp, #28]
   1ca1c:	beq	1caa0 <__assert_fail@plt+0xb4e4>
   1ca20:	ldr	lr, [ip, #16]
   1ca24:	cmp	lr, #0
   1ca28:	str	lr, [sp, #32]
   1ca2c:	beq	1caa8 <__assert_fail@plt+0xb4ec>
   1ca30:	ldr	lr, [ip, #20]
   1ca34:	cmp	lr, #0
   1ca38:	str	lr, [sp, #36]	; 0x24
   1ca3c:	beq	1cab0 <__assert_fail@plt+0xb4f4>
   1ca40:	ldr	lr, [ip, #24]
   1ca44:	cmp	lr, #0
   1ca48:	str	lr, [sp, #40]	; 0x28
   1ca4c:	beq	1cab8 <__assert_fail@plt+0xb4fc>
   1ca50:	ldr	lr, [ip, #28]
   1ca54:	cmp	lr, #0
   1ca58:	str	lr, [sp, #44]	; 0x2c
   1ca5c:	beq	1cac0 <__assert_fail@plt+0xb504>
   1ca60:	ldr	lr, [ip, #32]
   1ca64:	cmp	lr, #0
   1ca68:	str	lr, [sp, #48]	; 0x30
   1ca6c:	beq	1cac8 <__assert_fail@plt+0xb50c>
   1ca70:	ldr	lr, [ip, #36]	; 0x24
   1ca74:	mov	ip, #10
   1ca78:	cmp	lr, #0
   1ca7c:	str	lr, [sp, #52]	; 0x34
   1ca80:	movweq	ip, #9
   1ca84:	b	1cacc <__assert_fail@plt+0xb510>
   1ca88:	mov	ip, #0
   1ca8c:	b	1cacc <__assert_fail@plt+0xb510>
   1ca90:	mov	ip, #1
   1ca94:	b	1cacc <__assert_fail@plt+0xb510>
   1ca98:	mov	ip, #2
   1ca9c:	b	1cacc <__assert_fail@plt+0xb510>
   1caa0:	mov	ip, #3
   1caa4:	b	1cacc <__assert_fail@plt+0xb510>
   1caa8:	mov	ip, #4
   1caac:	b	1cacc <__assert_fail@plt+0xb510>
   1cab0:	mov	ip, #5
   1cab4:	b	1cacc <__assert_fail@plt+0xb510>
   1cab8:	mov	ip, #6
   1cabc:	b	1cacc <__assert_fail@plt+0xb510>
   1cac0:	mov	ip, #7
   1cac4:	b	1cacc <__assert_fail@plt+0xb510>
   1cac8:	mov	ip, #8
   1cacc:	add	lr, sp, #16
   1cad0:	str	ip, [sp, #4]
   1cad4:	str	lr, [sp]
   1cad8:	bl	1c548 <__assert_fail@plt+0xaf8c>
   1cadc:	mov	sp, fp
   1cae0:	pop	{fp, pc}
   1cae4:	push	{fp, lr}
   1cae8:	mov	fp, sp
   1caec:	movw	r0, #8612	; 0x21a4
   1caf0:	movt	r0, #3
   1caf4:	ldr	r1, [r0]
   1caf8:	movw	r0, #5328	; 0x14d0
   1cafc:	movt	r0, #2
   1cb00:	bl	11274 <fputs_unlocked@plt>
   1cb04:	movw	r1, #6547	; 0x1993
   1cb08:	mov	r0, #0
   1cb0c:	mov	r2, #5
   1cb10:	movt	r1, #2
   1cb14:	bl	11328 <dcgettext@plt>
   1cb18:	movw	r2, #6567	; 0x19a7
   1cb1c:	mov	r1, r0
   1cb20:	mov	r0, #1
   1cb24:	movt	r2, #2
   1cb28:	bl	114c0 <__printf_chk@plt>
   1cb2c:	movw	r1, #6589	; 0x19bd
   1cb30:	mov	r0, #0
   1cb34:	mov	r2, #5
   1cb38:	movt	r1, #2
   1cb3c:	bl	11328 <dcgettext@plt>
   1cb40:	movw	r2, #63646	; 0xf89e
   1cb44:	movw	r3, #64109	; 0xfa6d
   1cb48:	mov	r1, r0
   1cb4c:	mov	r0, #1
   1cb50:	movt	r2, #1
   1cb54:	movt	r3, #1
   1cb58:	bl	114c0 <__printf_chk@plt>
   1cb5c:	movw	r1, #6609	; 0x19d1
   1cb60:	mov	r0, #0
   1cb64:	mov	r2, #5
   1cb68:	movt	r1, #2
   1cb6c:	bl	11328 <dcgettext@plt>
   1cb70:	movw	r2, #6648	; 0x19f8
   1cb74:	mov	r1, r0
   1cb78:	mov	r0, #1
   1cb7c:	movt	r2, #2
   1cb80:	pop	{fp, lr}
   1cb84:	b	114c0 <__printf_chk@plt>
   1cb88:	push	{r4, r5, r6, sl, fp, lr}
   1cb8c:	add	fp, sp, #16
   1cb90:	mov	r4, r2
   1cb94:	mov	r5, r1
   1cb98:	mov	r6, r0
   1cb9c:	bl	1eefc <__assert_fail@plt+0xd940>
   1cba0:	cmp	r0, #0
   1cba4:	popne	{r4, r5, r6, sl, fp, pc}
   1cba8:	cmp	r6, #0
   1cbac:	beq	1cbc0 <__assert_fail@plt+0xb604>
   1cbb0:	cmp	r5, #0
   1cbb4:	cmpne	r4, #0
   1cbb8:	bne	1cbc0 <__assert_fail@plt+0xb604>
   1cbbc:	pop	{r4, r5, r6, sl, fp, pc}
   1cbc0:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cbc4:	push	{r4, r5, r6, sl, fp, lr}
   1cbc8:	add	fp, sp, #16
   1cbcc:	mov	r4, r2
   1cbd0:	mov	r5, r1
   1cbd4:	mov	r6, r0
   1cbd8:	bl	1eefc <__assert_fail@plt+0xd940>
   1cbdc:	cmp	r0, #0
   1cbe0:	popne	{r4, r5, r6, sl, fp, pc}
   1cbe4:	cmp	r6, #0
   1cbe8:	beq	1cbfc <__assert_fail@plt+0xb640>
   1cbec:	cmp	r5, #0
   1cbf0:	cmpne	r4, #0
   1cbf4:	bne	1cbfc <__assert_fail@plt+0xb640>
   1cbf8:	pop	{r4, r5, r6, sl, fp, pc}
   1cbfc:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cc00:	push	{fp, lr}
   1cc04:	mov	fp, sp
   1cc08:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1cc0c:	cmp	r0, #0
   1cc10:	popne	{fp, pc}
   1cc14:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cc18:	push	{fp, lr}
   1cc1c:	mov	fp, sp
   1cc20:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1cc24:	cmp	r0, #0
   1cc28:	popne	{fp, pc}
   1cc2c:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cc30:	push	{fp, lr}
   1cc34:	mov	fp, sp
   1cc38:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1cc3c:	cmp	r0, #0
   1cc40:	popne	{fp, pc}
   1cc44:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cc48:	push	{r4, r5, fp, lr}
   1cc4c:	add	fp, sp, #8
   1cc50:	mov	r4, r1
   1cc54:	mov	r5, r0
   1cc58:	bl	1d228 <__assert_fail@plt+0xbc6c>
   1cc5c:	cmp	r0, #0
   1cc60:	popne	{r4, r5, fp, pc}
   1cc64:	cmp	r5, #0
   1cc68:	beq	1cc78 <__assert_fail@plt+0xb6bc>
   1cc6c:	cmp	r4, #0
   1cc70:	bne	1cc78 <__assert_fail@plt+0xb6bc>
   1cc74:	pop	{r4, r5, fp, pc}
   1cc78:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cc7c:	push	{fp, lr}
   1cc80:	mov	fp, sp
   1cc84:	cmp	r1, #0
   1cc88:	orreq	r1, r1, #1
   1cc8c:	bl	1d228 <__assert_fail@plt+0xbc6c>
   1cc90:	cmp	r0, #0
   1cc94:	popne	{fp, pc}
   1cc98:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cc9c:	push	{fp, lr}
   1cca0:	mov	fp, sp
   1cca4:	clz	r3, r2
   1cca8:	lsr	ip, r3, #5
   1ccac:	clz	r3, r1
   1ccb0:	lsr	r3, r3, #5
   1ccb4:	orrs	r3, r3, ip
   1ccb8:	movwne	r1, #1
   1ccbc:	movwne	r2, #1
   1ccc0:	bl	1eefc <__assert_fail@plt+0xd940>
   1ccc4:	cmp	r0, #0
   1ccc8:	popne	{fp, pc}
   1cccc:	bl	1d160 <__assert_fail@plt+0xbba4>
   1ccd0:	push	{fp, lr}
   1ccd4:	mov	fp, sp
   1ccd8:	mov	r2, r1
   1ccdc:	mov	r1, r0
   1cce0:	mov	r0, #0
   1cce4:	bl	1eefc <__assert_fail@plt+0xd940>
   1cce8:	cmp	r0, #0
   1ccec:	popne	{fp, pc}
   1ccf0:	bl	1d160 <__assert_fail@plt+0xbba4>
   1ccf4:	push	{fp, lr}
   1ccf8:	mov	fp, sp
   1ccfc:	mov	r2, r1
   1cd00:	mov	r1, r0
   1cd04:	clz	r0, r2
   1cd08:	clz	r3, r1
   1cd0c:	lsr	r0, r0, #5
   1cd10:	lsr	r3, r3, #5
   1cd14:	orrs	r0, r3, r0
   1cd18:	movwne	r1, #1
   1cd1c:	movwne	r2, #1
   1cd20:	mov	r0, #0
   1cd24:	bl	1eefc <__assert_fail@plt+0xd940>
   1cd28:	cmp	r0, #0
   1cd2c:	popne	{fp, pc}
   1cd30:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cd34:	push	{r4, r5, r6, sl, fp, lr}
   1cd38:	add	fp, sp, #16
   1cd3c:	ldr	r5, [r1]
   1cd40:	mov	r4, r1
   1cd44:	mov	r6, r0
   1cd48:	cmp	r0, #0
   1cd4c:	beq	1cd64 <__assert_fail@plt+0xb7a8>
   1cd50:	mov	r0, #1
   1cd54:	add	r0, r0, r5, lsr #1
   1cd58:	adds	r5, r5, r0
   1cd5c:	bcc	1cd6c <__assert_fail@plt+0xb7b0>
   1cd60:	b	1cda8 <__assert_fail@plt+0xb7ec>
   1cd64:	cmp	r5, #0
   1cd68:	movweq	r5, #64	; 0x40
   1cd6c:	mov	r0, r6
   1cd70:	mov	r1, r5
   1cd74:	mov	r2, #1
   1cd78:	bl	1eefc <__assert_fail@plt+0xd940>
   1cd7c:	cmp	r5, #0
   1cd80:	mov	r1, r5
   1cd84:	movwne	r1, #1
   1cd88:	cmp	r0, #0
   1cd8c:	bne	1cda0 <__assert_fail@plt+0xb7e4>
   1cd90:	clz	r2, r6
   1cd94:	lsr	r2, r2, #5
   1cd98:	orrs	r1, r2, r1
   1cd9c:	bne	1cda8 <__assert_fail@plt+0xb7ec>
   1cda0:	str	r5, [r4]
   1cda4:	pop	{r4, r5, r6, sl, fp, pc}
   1cda8:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cdac:	push	{r4, r5, r6, r7, fp, lr}
   1cdb0:	add	fp, sp, #16
   1cdb4:	ldr	r5, [r1]
   1cdb8:	mov	r6, r2
   1cdbc:	mov	r4, r1
   1cdc0:	mov	r7, r0
   1cdc4:	cmp	r0, #0
   1cdc8:	beq	1cde0 <__assert_fail@plt+0xb824>
   1cdcc:	mov	r0, #1
   1cdd0:	add	r0, r0, r5, lsr #1
   1cdd4:	adds	r5, r5, r0
   1cdd8:	bcc	1cdf8 <__assert_fail@plt+0xb83c>
   1cddc:	b	1ce2c <__assert_fail@plt+0xb870>
   1cde0:	cmp	r5, #0
   1cde4:	bne	1cdf8 <__assert_fail@plt+0xb83c>
   1cde8:	mov	r0, #64	; 0x40
   1cdec:	cmp	r6, #64	; 0x40
   1cdf0:	udiv	r5, r0, r6
   1cdf4:	addhi	r5, r5, #1
   1cdf8:	mov	r0, r7
   1cdfc:	mov	r1, r5
   1ce00:	mov	r2, r6
   1ce04:	bl	1eefc <__assert_fail@plt+0xd940>
   1ce08:	cmp	r0, #0
   1ce0c:	bne	1ce24 <__assert_fail@plt+0xb868>
   1ce10:	cmp	r7, #0
   1ce14:	beq	1ce2c <__assert_fail@plt+0xb870>
   1ce18:	cmp	r6, #0
   1ce1c:	cmpne	r5, #0
   1ce20:	bne	1ce2c <__assert_fail@plt+0xb870>
   1ce24:	str	r5, [r4]
   1ce28:	pop	{r4, r5, r6, r7, fp, pc}
   1ce2c:	bl	1d160 <__assert_fail@plt+0xbba4>
   1ce30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ce34:	add	fp, sp, #24
   1ce38:	mov	r8, r1
   1ce3c:	ldr	r1, [r1]
   1ce40:	mov	r5, r0
   1ce44:	add	r0, r1, r1, asr #1
   1ce48:	cmp	r0, r1
   1ce4c:	mvnvs	r0, #-2147483648	; 0x80000000
   1ce50:	cmp	r0, r3
   1ce54:	mov	r7, r0
   1ce58:	movgt	r7, r3
   1ce5c:	cmn	r3, #1
   1ce60:	movle	r7, r0
   1ce64:	ldr	r0, [fp, #8]
   1ce68:	cmn	r0, #1
   1ce6c:	ble	1ce94 <__assert_fail@plt+0xb8d8>
   1ce70:	cmp	r0, #0
   1ce74:	beq	1cee8 <__assert_fail@plt+0xb92c>
   1ce78:	cmn	r7, #1
   1ce7c:	ble	1cebc <__assert_fail@plt+0xb900>
   1ce80:	mvn	r4, #-2147483648	; 0x80000000
   1ce84:	udiv	r6, r4, r0
   1ce88:	cmp	r6, r7
   1ce8c:	bge	1cee8 <__assert_fail@plt+0xb92c>
   1ce90:	b	1cef8 <__assert_fail@plt+0xb93c>
   1ce94:	cmn	r7, #1
   1ce98:	ble	1ced8 <__assert_fail@plt+0xb91c>
   1ce9c:	cmn	r0, #1
   1cea0:	beq	1cee8 <__assert_fail@plt+0xb92c>
   1cea4:	mov	r6, #-2147483648	; 0x80000000
   1cea8:	mvn	r4, #-2147483648	; 0x80000000
   1ceac:	sdiv	r6, r6, r0
   1ceb0:	cmp	r6, r7
   1ceb4:	bge	1cee8 <__assert_fail@plt+0xb92c>
   1ceb8:	b	1cef8 <__assert_fail@plt+0xb93c>
   1cebc:	beq	1cee8 <__assert_fail@plt+0xb92c>
   1cec0:	mov	r6, #-2147483648	; 0x80000000
   1cec4:	mvn	r4, #-2147483648	; 0x80000000
   1cec8:	sdiv	r6, r6, r7
   1cecc:	cmp	r6, r0
   1ced0:	bge	1cee8 <__assert_fail@plt+0xb92c>
   1ced4:	b	1cef8 <__assert_fail@plt+0xb93c>
   1ced8:	mvn	r4, #-2147483648	; 0x80000000
   1cedc:	sdiv	r6, r4, r0
   1cee0:	cmp	r7, r6
   1cee4:	blt	1cef8 <__assert_fail@plt+0xb93c>
   1cee8:	mul	r6, r7, r0
   1ceec:	mov	r4, #64	; 0x40
   1cef0:	cmp	r6, #63	; 0x3f
   1cef4:	bgt	1cf00 <__assert_fail@plt+0xb944>
   1cef8:	sdiv	r7, r4, r0
   1cefc:	mul	r6, r7, r0
   1cf00:	cmp	r5, #0
   1cf04:	moveq	r4, #0
   1cf08:	streq	r4, [r8]
   1cf0c:	sub	r4, r7, r1
   1cf10:	cmp	r4, r2
   1cf14:	bge	1cfc0 <__assert_fail@plt+0xba04>
   1cf18:	add	r7, r1, r2
   1cf1c:	mov	r6, #0
   1cf20:	mov	r2, #0
   1cf24:	cmp	r7, r3
   1cf28:	movwgt	r6, #1
   1cf2c:	cmn	r3, #1
   1cf30:	movwgt	r2, #1
   1cf34:	cmp	r7, r1
   1cf38:	bvs	1cff4 <__assert_fail@plt+0xba38>
   1cf3c:	ands	r1, r2, r6
   1cf40:	bne	1cff4 <__assert_fail@plt+0xba38>
   1cf44:	cmn	r0, #1
   1cf48:	ble	1cf70 <__assert_fail@plt+0xb9b4>
   1cf4c:	cmp	r0, #0
   1cf50:	beq	1cfbc <__assert_fail@plt+0xba00>
   1cf54:	cmn	r7, #1
   1cf58:	ble	1cf94 <__assert_fail@plt+0xb9d8>
   1cf5c:	mvn	r1, #-2147483648	; 0x80000000
   1cf60:	udiv	r1, r1, r0
   1cf64:	cmp	r1, r7
   1cf68:	bge	1cfbc <__assert_fail@plt+0xba00>
   1cf6c:	b	1cff4 <__assert_fail@plt+0xba38>
   1cf70:	cmn	r7, #1
   1cf74:	ble	1cfac <__assert_fail@plt+0xb9f0>
   1cf78:	cmn	r0, #1
   1cf7c:	beq	1cfbc <__assert_fail@plt+0xba00>
   1cf80:	mov	r1, #-2147483648	; 0x80000000
   1cf84:	sdiv	r1, r1, r0
   1cf88:	cmp	r1, r7
   1cf8c:	bge	1cfbc <__assert_fail@plt+0xba00>
   1cf90:	b	1cff4 <__assert_fail@plt+0xba38>
   1cf94:	beq	1cfbc <__assert_fail@plt+0xba00>
   1cf98:	mov	r1, #-2147483648	; 0x80000000
   1cf9c:	sdiv	r1, r1, r7
   1cfa0:	cmp	r1, r0
   1cfa4:	bge	1cfbc <__assert_fail@plt+0xba00>
   1cfa8:	b	1cff4 <__assert_fail@plt+0xba38>
   1cfac:	mvn	r1, #-2147483648	; 0x80000000
   1cfb0:	sdiv	r1, r1, r0
   1cfb4:	cmp	r7, r1
   1cfb8:	blt	1cff4 <__assert_fail@plt+0xba38>
   1cfbc:	mul	r6, r7, r0
   1cfc0:	mov	r0, r5
   1cfc4:	mov	r1, r6
   1cfc8:	bl	1d228 <__assert_fail@plt+0xbc6c>
   1cfcc:	cmp	r6, #0
   1cfd0:	movwne	r6, #1
   1cfd4:	cmp	r0, #0
   1cfd8:	bne	1cfec <__assert_fail@plt+0xba30>
   1cfdc:	clz	r1, r5
   1cfe0:	lsr	r1, r1, #5
   1cfe4:	orrs	r1, r1, r6
   1cfe8:	bne	1cff4 <__assert_fail@plt+0xba38>
   1cfec:	str	r7, [r8]
   1cff0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cff4:	bl	1d160 <__assert_fail@plt+0xbba4>
   1cff8:	push	{fp, lr}
   1cffc:	mov	fp, sp
   1d000:	mov	r1, #1
   1d004:	bl	1d1a4 <__assert_fail@plt+0xbbe8>
   1d008:	cmp	r0, #0
   1d00c:	popne	{fp, pc}
   1d010:	bl	1d160 <__assert_fail@plt+0xbba4>
   1d014:	push	{fp, lr}
   1d018:	mov	fp, sp
   1d01c:	bl	1d1a4 <__assert_fail@plt+0xbbe8>
   1d020:	cmp	r0, #0
   1d024:	popne	{fp, pc}
   1d028:	bl	1d160 <__assert_fail@plt+0xbba4>
   1d02c:	push	{fp, lr}
   1d030:	mov	fp, sp
   1d034:	mov	r1, #1
   1d038:	bl	1d1a4 <__assert_fail@plt+0xbbe8>
   1d03c:	cmp	r0, #0
   1d040:	popne	{fp, pc}
   1d044:	bl	1d160 <__assert_fail@plt+0xbba4>
   1d048:	push	{fp, lr}
   1d04c:	mov	fp, sp
   1d050:	bl	1d1a4 <__assert_fail@plt+0xbbe8>
   1d054:	cmp	r0, #0
   1d058:	popne	{fp, pc}
   1d05c:	bl	1d160 <__assert_fail@plt+0xbba4>
   1d060:	push	{r4, r5, r6, sl, fp, lr}
   1d064:	add	fp, sp, #16
   1d068:	mov	r5, r0
   1d06c:	mov	r0, r1
   1d070:	mov	r4, r1
   1d074:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1d078:	cmp	r0, #0
   1d07c:	beq	1d098 <__assert_fail@plt+0xbadc>
   1d080:	mov	r1, r5
   1d084:	mov	r2, r4
   1d088:	mov	r6, r0
   1d08c:	bl	112f8 <memcpy@plt>
   1d090:	mov	r0, r6
   1d094:	pop	{r4, r5, r6, sl, fp, pc}
   1d098:	bl	1d160 <__assert_fail@plt+0xbba4>
   1d09c:	push	{r4, r5, r6, sl, fp, lr}
   1d0a0:	add	fp, sp, #16
   1d0a4:	mov	r5, r0
   1d0a8:	mov	r0, r1
   1d0ac:	mov	r4, r1
   1d0b0:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1d0b4:	cmp	r0, #0
   1d0b8:	beq	1d0d4 <__assert_fail@plt+0xbb18>
   1d0bc:	mov	r1, r5
   1d0c0:	mov	r2, r4
   1d0c4:	mov	r6, r0
   1d0c8:	bl	112f8 <memcpy@plt>
   1d0cc:	mov	r0, r6
   1d0d0:	pop	{r4, r5, r6, sl, fp, pc}
   1d0d4:	bl	1d160 <__assert_fail@plt+0xbba4>
   1d0d8:	push	{r4, r5, r6, sl, fp, lr}
   1d0dc:	add	fp, sp, #16
   1d0e0:	mov	r5, r0
   1d0e4:	add	r0, r1, #1
   1d0e8:	mov	r4, r1
   1d0ec:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1d0f0:	cmp	r0, #0
   1d0f4:	beq	1d11c <__assert_fail@plt+0xbb60>
   1d0f8:	mov	r6, r0
   1d0fc:	mov	r0, #0
   1d100:	mov	r1, r5
   1d104:	mov	r2, r4
   1d108:	strb	r0, [r6, r4]
   1d10c:	mov	r0, r6
   1d110:	bl	112f8 <memcpy@plt>
   1d114:	mov	r0, r6
   1d118:	pop	{r4, r5, r6, sl, fp, pc}
   1d11c:	bl	1d160 <__assert_fail@plt+0xbba4>
   1d120:	push	{r4, r5, r6, sl, fp, lr}
   1d124:	add	fp, sp, #16
   1d128:	mov	r4, r0
   1d12c:	bl	1146c <strlen@plt>
   1d130:	add	r5, r0, #1
   1d134:	mov	r0, r5
   1d138:	bl	1d1f8 <__assert_fail@plt+0xbc3c>
   1d13c:	cmp	r0, #0
   1d140:	beq	1d15c <__assert_fail@plt+0xbba0>
   1d144:	mov	r1, r4
   1d148:	mov	r2, r5
   1d14c:	mov	r6, r0
   1d150:	bl	112f8 <memcpy@plt>
   1d154:	mov	r0, r6
   1d158:	pop	{r4, r5, r6, sl, fp, pc}
   1d15c:	bl	1d160 <__assert_fail@plt+0xbba4>
   1d160:	push	{fp, lr}
   1d164:	mov	fp, sp
   1d168:	movw	r0, #8512	; 0x2140
   1d16c:	movw	r1, #6724	; 0x1a44
   1d170:	mov	r2, #5
   1d174:	movt	r0, #3
   1d178:	movt	r1, #2
   1d17c:	ldr	r4, [r0]
   1d180:	mov	r0, #0
   1d184:	bl	11328 <dcgettext@plt>
   1d188:	movw	r2, #64830	; 0xfd3e
   1d18c:	mov	r3, r0
   1d190:	mov	r0, r4
   1d194:	mov	r1, #0
   1d198:	movt	r2, #1
   1d19c:	bl	113b8 <error@plt>
   1d1a0:	bl	1158c <abort@plt>
   1d1a4:	clz	r2, r1
   1d1a8:	clz	r3, r0
   1d1ac:	lsr	r2, r2, #5
   1d1b0:	lsr	r3, r3, #5
   1d1b4:	orrs	r2, r3, r2
   1d1b8:	movwne	r1, #1
   1d1bc:	movwne	r0, #1
   1d1c0:	cmp	r1, #0
   1d1c4:	beq	1d1f4 <__assert_fail@plt+0xbc38>
   1d1c8:	mvn	r2, #-2147483648	; 0x80000000
   1d1cc:	udiv	r2, r2, r1
   1d1d0:	cmp	r2, r0
   1d1d4:	bcs	1d1f4 <__assert_fail@plt+0xbc38>
   1d1d8:	push	{fp, lr}
   1d1dc:	mov	fp, sp
   1d1e0:	bl	11490 <__errno_location@plt>
   1d1e4:	mov	r1, #12
   1d1e8:	str	r1, [r0]
   1d1ec:	mov	r0, #0
   1d1f0:	pop	{fp, pc}
   1d1f4:	b	11268 <calloc@plt>
   1d1f8:	cmp	r0, #0
   1d1fc:	movweq	r0, #1
   1d200:	cmn	r0, #1
   1d204:	ble	1d20c <__assert_fail@plt+0xbc50>
   1d208:	b	113dc <malloc@plt>
   1d20c:	push	{fp, lr}
   1d210:	mov	fp, sp
   1d214:	bl	11490 <__errno_location@plt>
   1d218:	mov	r1, #12
   1d21c:	str	r1, [r0]
   1d220:	mov	r0, #0
   1d224:	pop	{fp, pc}
   1d228:	push	{fp, lr}
   1d22c:	mov	fp, sp
   1d230:	cmp	r0, #0
   1d234:	beq	1d250 <__assert_fail@plt+0xbc94>
   1d238:	cmp	r1, #0
   1d23c:	beq	1d25c <__assert_fail@plt+0xbca0>
   1d240:	cmn	r1, #1
   1d244:	ble	1d268 <__assert_fail@plt+0xbcac>
   1d248:	pop	{fp, lr}
   1d24c:	b	11340 <realloc@plt>
   1d250:	mov	r0, r1
   1d254:	pop	{fp, lr}
   1d258:	b	1d1f8 <__assert_fail@plt+0xbc3c>
   1d25c:	bl	1d3f8 <__assert_fail@plt+0xbe3c>
   1d260:	mov	r0, #0
   1d264:	pop	{fp, pc}
   1d268:	bl	11490 <__errno_location@plt>
   1d26c:	mov	r1, #12
   1d270:	str	r1, [r0]
   1d274:	mov	r0, #0
   1d278:	pop	{fp, pc}
   1d27c:	push	{r4, r5, r6, sl, fp, lr}
   1d280:	add	fp, sp, #16
   1d284:	mov	r4, r0
   1d288:	bl	113a0 <__fpending@plt>
   1d28c:	ldr	r6, [r4]
   1d290:	mov	r5, r0
   1d294:	mov	r0, r4
   1d298:	bl	1d300 <__assert_fail@plt+0xbd44>
   1d29c:	tst	r6, #32
   1d2a0:	bne	1d2d8 <__assert_fail@plt+0xbd1c>
   1d2a4:	cmp	r0, #0
   1d2a8:	mov	r4, r0
   1d2ac:	mvnne	r4, #0
   1d2b0:	cmp	r5, #0
   1d2b4:	bne	1d2e4 <__assert_fail@plt+0xbd28>
   1d2b8:	cmp	r0, #0
   1d2bc:	beq	1d2e4 <__assert_fail@plt+0xbd28>
   1d2c0:	bl	11490 <__errno_location@plt>
   1d2c4:	ldr	r0, [r0]
   1d2c8:	subs	r4, r0, #9
   1d2cc:	mvnne	r4, #0
   1d2d0:	mov	r0, r4
   1d2d4:	pop	{r4, r5, r6, sl, fp, pc}
   1d2d8:	mvn	r4, #0
   1d2dc:	cmp	r0, #0
   1d2e0:	beq	1d2ec <__assert_fail@plt+0xbd30>
   1d2e4:	mov	r0, r4
   1d2e8:	pop	{r4, r5, r6, sl, fp, pc}
   1d2ec:	bl	11490 <__errno_location@plt>
   1d2f0:	mov	r1, #0
   1d2f4:	str	r1, [r0]
   1d2f8:	mov	r0, r4
   1d2fc:	pop	{r4, r5, r6, sl, fp, pc}
   1d300:	push	{r4, r5, r6, sl, fp, lr}
   1d304:	add	fp, sp, #16
   1d308:	sub	sp, sp, #8
   1d30c:	mov	r4, r0
   1d310:	bl	114cc <fileno@plt>
   1d314:	cmn	r0, #1
   1d318:	ble	1d38c <__assert_fail@plt+0xbdd0>
   1d31c:	mov	r0, r4
   1d320:	bl	1140c <__freading@plt>
   1d324:	cmp	r0, #0
   1d328:	beq	1d354 <__assert_fail@plt+0xbd98>
   1d32c:	mov	r0, r4
   1d330:	bl	114cc <fileno@plt>
   1d334:	mov	r1, #1
   1d338:	mov	r2, #0
   1d33c:	mov	r3, #0
   1d340:	str	r1, [sp]
   1d344:	bl	11388 <lseek64@plt>
   1d348:	and	r0, r0, r1
   1d34c:	cmn	r0, #1
   1d350:	beq	1d38c <__assert_fail@plt+0xbdd0>
   1d354:	mov	r0, r4
   1d358:	bl	1d39c <__assert_fail@plt+0xbde0>
   1d35c:	cmp	r0, #0
   1d360:	beq	1d38c <__assert_fail@plt+0xbdd0>
   1d364:	bl	11490 <__errno_location@plt>
   1d368:	ldr	r6, [r0]
   1d36c:	mov	r5, r0
   1d370:	mov	r0, r4
   1d374:	bl	114e4 <fclose@plt>
   1d378:	cmp	r6, #0
   1d37c:	strne	r6, [r5]
   1d380:	mvnne	r0, #0
   1d384:	sub	sp, fp, #16
   1d388:	pop	{r4, r5, r6, sl, fp, pc}
   1d38c:	mov	r0, r4
   1d390:	sub	sp, fp, #16
   1d394:	pop	{r4, r5, r6, sl, fp, lr}
   1d398:	b	114e4 <fclose@plt>
   1d39c:	push	{r4, sl, fp, lr}
   1d3a0:	add	fp, sp, #8
   1d3a4:	sub	sp, sp, #8
   1d3a8:	mov	r4, r0
   1d3ac:	cmp	r0, #0
   1d3b0:	beq	1d3cc <__assert_fail@plt+0xbe10>
   1d3b4:	mov	r0, r4
   1d3b8:	bl	1140c <__freading@plt>
   1d3bc:	cmp	r0, #0
   1d3c0:	ldrbne	r0, [r4, #1]
   1d3c4:	tstne	r0, #1
   1d3c8:	bne	1d3dc <__assert_fail@plt+0xbe20>
   1d3cc:	mov	r0, r4
   1d3d0:	sub	sp, fp, #8
   1d3d4:	pop	{r4, sl, fp, lr}
   1d3d8:	b	112c8 <fflush@plt>
   1d3dc:	mov	r0, #1
   1d3e0:	mov	r2, #0
   1d3e4:	mov	r3, #0
   1d3e8:	str	r0, [sp]
   1d3ec:	mov	r0, r4
   1d3f0:	bl	1d420 <__assert_fail@plt+0xbe64>
   1d3f4:	b	1d3cc <__assert_fail@plt+0xbe10>
   1d3f8:	push	{r4, r5, r6, sl, fp, lr}
   1d3fc:	add	fp, sp, #16
   1d400:	mov	r4, r0
   1d404:	bl	11490 <__errno_location@plt>
   1d408:	ldr	r6, [r0]
   1d40c:	mov	r5, r0
   1d410:	mov	r0, r4
   1d414:	bl	112d4 <free@plt>
   1d418:	str	r6, [r5]
   1d41c:	pop	{r4, r5, r6, sl, fp, pc}
   1d420:	push	{r4, r5, r6, r7, fp, lr}
   1d424:	add	fp, sp, #16
   1d428:	sub	sp, sp, #8
   1d42c:	mov	r4, r0
   1d430:	ldr	r0, [r0, #4]
   1d434:	mov	r5, r3
   1d438:	mov	r6, r2
   1d43c:	ldr	r1, [r4, #8]
   1d440:	cmp	r1, r0
   1d444:	bne	1d460 <__assert_fail@plt+0xbea4>
   1d448:	ldrd	r0, [r4, #16]
   1d44c:	cmp	r1, r0
   1d450:	bne	1d460 <__assert_fail@plt+0xbea4>
   1d454:	ldr	r0, [r4, #36]	; 0x24
   1d458:	cmp	r0, #0
   1d45c:	beq	1d478 <__assert_fail@plt+0xbebc>
   1d460:	mov	r0, r4
   1d464:	mov	r2, r6
   1d468:	mov	r3, r5
   1d46c:	sub	sp, fp, #16
   1d470:	pop	{r4, r5, r6, r7, fp, lr}
   1d474:	b	114f0 <fseeko64@plt>
   1d478:	ldr	r7, [fp, #8]
   1d47c:	mov	r0, r4
   1d480:	bl	114cc <fileno@plt>
   1d484:	mov	r2, r6
   1d488:	mov	r3, r5
   1d48c:	str	r7, [sp]
   1d490:	bl	11388 <lseek64@plt>
   1d494:	and	r2, r0, r1
   1d498:	cmn	r2, #1
   1d49c:	mvneq	r0, #0
   1d4a0:	subeq	sp, fp, #16
   1d4a4:	popeq	{r4, r5, r6, r7, fp, pc}
   1d4a8:	strd	r0, [r4, #80]	; 0x50
   1d4ac:	ldr	r0, [r4]
   1d4b0:	bic	r0, r0, #16
   1d4b4:	str	r0, [r4]
   1d4b8:	mov	r0, #0
   1d4bc:	sub	sp, fp, #16
   1d4c0:	pop	{r4, r5, r6, r7, fp, pc}
   1d4c4:	push	{fp, lr}
   1d4c8:	mov	fp, sp
   1d4cc:	mov	r0, #14
   1d4d0:	bl	11520 <nl_langinfo@plt>
   1d4d4:	movw	r1, #5329	; 0x14d1
   1d4d8:	cmp	r0, #0
   1d4dc:	movt	r1, #2
   1d4e0:	movne	r1, r0
   1d4e4:	movw	r0, #6741	; 0x1a55
   1d4e8:	ldrb	r2, [r1]
   1d4ec:	movt	r0, #2
   1d4f0:	cmp	r2, #0
   1d4f4:	movne	r0, r1
   1d4f8:	pop	{fp, pc}
   1d4fc:	push	{r4, r5, r6, r7, fp, lr}
   1d500:	add	fp, sp, #16
   1d504:	sub	sp, sp, #8
   1d508:	add	r5, sp, #4
   1d50c:	cmp	r0, #0
   1d510:	mov	r7, r2
   1d514:	mov	r4, r1
   1d518:	movne	r5, r0
   1d51c:	mov	r0, r5
   1d520:	bl	113ac <mbrtowc@plt>
   1d524:	mov	r6, r0
   1d528:	cmp	r7, #0
   1d52c:	beq	1d550 <__assert_fail@plt+0xbf94>
   1d530:	cmn	r6, #2
   1d534:	bcc	1d550 <__assert_fail@plt+0xbf94>
   1d538:	mov	r0, #0
   1d53c:	bl	1ef38 <__assert_fail@plt+0xd97c>
   1d540:	cmp	r0, #0
   1d544:	ldrbeq	r0, [r4]
   1d548:	moveq	r6, #1
   1d54c:	streq	r0, [r5]
   1d550:	mov	r0, r6
   1d554:	sub	sp, fp, #16
   1d558:	pop	{r4, r5, r6, r7, fp, pc}
   1d55c:	push	{fp, lr}
   1d560:	mov	fp, sp
   1d564:	sub	sp, sp, #24
   1d568:	mvn	ip, #0
   1d56c:	str	ip, [sp, #8]
   1d570:	mov	ip, #0
   1d574:	str	ip, [sp, #4]
   1d578:	str	ip, [sp]
   1d57c:	ldr	ip, [fp, #12]
   1d580:	str	ip, [sp, #16]
   1d584:	ldr	ip, [fp, #8]
   1d588:	str	ip, [sp, #12]
   1d58c:	bl	1d598 <__assert_fail@plt+0xbfdc>
   1d590:	mov	sp, fp
   1d594:	pop	{fp, pc}
   1d598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d59c:	add	fp, sp, #28
   1d5a0:	sub	sp, sp, #124	; 0x7c
   1d5a4:	sub	sp, sp, #1024	; 0x400
   1d5a8:	mov	r4, r3
   1d5ac:	mov	sl, r2
   1d5b0:	str	r1, [sp, #88]	; 0x58
   1d5b4:	mov	r5, r0
   1d5b8:	bl	11490 <__errno_location@plt>
   1d5bc:	mov	r2, r4
   1d5c0:	ldrb	r3, [sl]
   1d5c4:	str	r0, [sp, #60]	; 0x3c
   1d5c8:	ldr	r0, [r0]
   1d5cc:	movw	r6, #5329	; 0x14d1
   1d5d0:	ldr	r1, [r2, #8]!
   1d5d4:	movt	r6, #2
   1d5d8:	str	r0, [sp, #56]	; 0x38
   1d5dc:	cmp	r1, #0
   1d5e0:	mov	r7, r1
   1d5e4:	movweq	r7, #12
   1d5e8:	cmp	r1, #12
   1d5ec:	subgt	r7, r1, #12
   1d5f0:	ldr	r1, [r2, #32]
   1d5f4:	cmp	r1, #0
   1d5f8:	movne	r6, r1
   1d5fc:	cmp	r3, #0
   1d600:	beq	1d680 <__assert_fail@plt+0xc0c4>
   1d604:	sub	r0, fp, #48	; 0x30
   1d608:	mvn	r1, #13
   1d60c:	ldr	r9, [fp, #16]
   1d610:	sub	r8, r6, #1
   1d614:	str	r6, [sp, #36]	; 0x24
   1d618:	movw	r6, #52428	; 0xcccc
   1d61c:	str	r4, [sp, #72]	; 0x48
   1d620:	mov	lr, #0
   1d624:	mov	ip, r5
   1d628:	str	r7, [sp, #44]	; 0x2c
   1d62c:	str	r2, [sp, #48]	; 0x30
   1d630:	sub	r1, r1, r0
   1d634:	movt	r6, #3276	; 0xccc
   1d638:	str	r8, [sp, #20]
   1d63c:	str	r1, [sp, #28]
   1d640:	add	r1, r0, #13
   1d644:	add	r0, r0, #14
   1d648:	str	r1, [sp, #24]
   1d64c:	add	r1, sp, #96	; 0x60
   1d650:	str	r0, [sp, #64]	; 0x40
   1d654:	add	r1, r1, #1
   1d658:	str	r1, [sp, #32]
   1d65c:	add	r1, r4, #12
   1d660:	mov	r4, #-2147483648	; 0x80000000
   1d664:	str	r1, [sp, #40]	; 0x28
   1d668:	sub	r1, fp, #53	; 0x35
   1d66c:	add	r0, r1, #3
   1d670:	str	r0, [sp, #52]	; 0x34
   1d674:	add	r0, r1, #2
   1d678:	str	r0, [sp, #68]	; 0x44
   1d67c:	b	1d9ac <__assert_fail@plt+0xc3f0>
   1d680:	mov	lr, #0
   1d684:	mov	ip, r5
   1d688:	b	1eeb4 <__assert_fail@plt+0xd8f8>
   1d68c:	sub	r0, r9, #6
   1d690:	bic	r8, r0, r0, asr #31
   1d694:	b	1e19c <__assert_fail@plt+0xcbe0>
   1d698:	movw	r6, #63636	; 0xf894
   1d69c:	movt	r6, #65535	; 0xffff
   1d6a0:	sub	r6, r6, r3
   1d6a4:	add	r3, r7, #100	; 0x64
   1d6a8:	cmp	lr, r6
   1d6ac:	rsblt	r3, r7, #0
   1d6b0:	ldr	lr, [sp, #76]	; 0x4c
   1d6b4:	ldr	r7, [fp, #12]
   1d6b8:	cmp	r5, #0
   1d6bc:	mov	r4, #0
   1d6c0:	moveq	r5, r7
   1d6c4:	mov	r7, #0
   1d6c8:	cmp	r5, #43	; 0x2b
   1d6cc:	bne	1e42c <__assert_fail@plt+0xce70>
   1d6d0:	ldr	r8, [sp, #80]	; 0x50
   1d6d4:	mov	r4, #0
   1d6d8:	movw	r6, #9999	; 0x270f
   1d6dc:	mov	ip, #0
   1d6e0:	cmp	r8, r9
   1d6e4:	movwlt	r4, #1
   1d6e8:	cmp	r8, #2
   1d6ec:	movweq	r6, #99	; 0x63
   1d6f0:	cmp	r6, r3
   1d6f4:	movwcc	ip, #1
   1d6f8:	orr	r4, r4, ip
   1d6fc:	ldr	ip, [sp, #84]	; 0x54
   1d700:	b	1e42c <__assert_fail@plt+0xce70>
   1d704:	movw	r4, #63636	; 0xf894
   1d708:	ldr	ip, [sp, #84]	; 0x54
   1d70c:	str	r3, [sp, #80]	; 0x50
   1d710:	add	r3, r6, #100	; 0x64
   1d714:	movt	r4, #65535	; 0xffff
   1d718:	cmp	r7, r4
   1d71c:	rsblt	r3, r6, #0
   1d720:	b	1d6b4 <__assert_fail@plt+0xc0f8>
   1d724:	cmp	r7, #0
   1d728:	beq	1d90c <__assert_fail@plt+0xc350>
   1d72c:	movw	r6, #10000	; 0x2710
   1d730:	mov	r4, #1
   1d734:	mla	r3, r3, r6, r7
   1d738:	mov	r7, #100	; 0x64
   1d73c:	mla	r3, ip, r7, r3
   1d740:	mov	r7, #9
   1d744:	str	r7, [sp, #80]	; 0x50
   1d748:	mov	r7, #20
   1d74c:	b	1d92c <__assert_fail@plt+0xc370>
   1d750:	sub	r1, fp, #48	; 0x30
   1d754:	mov	r0, r6
   1d758:	mov	r2, r4
   1d75c:	mov	r7, lr
   1d760:	bl	112f8 <memcpy@plt>
   1d764:	mov	lr, r7
   1d768:	add	ip, r6, r4
   1d76c:	cmp	r5, #45	; 0x2d
   1d770:	mov	r6, #0
   1d774:	subne	r0, r9, r4
   1d778:	bicne	r6, r0, r0, asr #31
   1d77c:	sub	r0, r8, r4
   1d780:	cmp	r6, r0
   1d784:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1d788:	cmp	ip, #0
   1d78c:	cmpne	r6, #0
   1d790:	beq	1d95c <__assert_fail@plt+0xc3a0>
   1d794:	uxtb	r0, r5
   1d798:	cmp	r0, #48	; 0x30
   1d79c:	cmpne	r0, #43	; 0x2b
   1d7a0:	bne	1d938 <__assert_fail@plt+0xc37c>
   1d7a4:	mov	r0, ip
   1d7a8:	mov	r7, ip
   1d7ac:	mov	r1, #48	; 0x30
   1d7b0:	b	1d944 <__assert_fail@plt+0xc388>
   1d7b4:	mov	r1, #32
   1d7b8:	mov	r5, r2
   1d7bc:	bl	114b4 <memset@plt>
   1d7c0:	ldr	r0, [sp, #84]	; 0x54
   1d7c4:	ldr	lr, [sp, #76]	; 0x4c
   1d7c8:	add	ip, r0, r5
   1d7cc:	tst	r7, #1
   1d7d0:	beq	1d820 <__assert_fail@plt+0xc264>
   1d7d4:	ldr	r8, [sp, #20]
   1d7d8:	cmp	r9, #0
   1d7dc:	beq	1d898 <__assert_fail@plt+0xc2dc>
   1d7e0:	cmp	r6, r9
   1d7e4:	movls	r6, r9
   1d7e8:	add	r0, r0, r6
   1d7ec:	mov	r6, ip
   1d7f0:	sub	r5, r0, #1
   1d7f4:	bl	11424 <__ctype_tolower_loc@plt>
   1d7f8:	ldr	lr, [sp, #76]	; 0x4c
   1d7fc:	mov	ip, r6
   1d800:	mov	r1, r9
   1d804:	ldrb	r2, [r8, r1]
   1d808:	ldr	r3, [r0]
   1d80c:	subs	r1, r1, #1
   1d810:	ldr	r2, [r3, r2, lsl #2]
   1d814:	strb	r2, [r5], #-1
   1d818:	bne	1d804 <__assert_fail@plt+0xc248>
   1d81c:	b	1d898 <__assert_fail@plt+0xc2dc>
   1d820:	eor	r1, r7, #1
   1d824:	and	r1, r8, r1
   1d828:	tst	r1, #1
   1d82c:	beq	1d87c <__assert_fail@plt+0xc2c0>
   1d830:	ldr	r8, [sp, #20]
   1d834:	cmp	r9, #0
   1d838:	beq	1d898 <__assert_fail@plt+0xc2dc>
   1d83c:	cmp	r6, r9
   1d840:	movls	r6, r9
   1d844:	add	r0, r0, r6
   1d848:	mov	r6, ip
   1d84c:	sub	r5, r0, #1
   1d850:	bl	11430 <__ctype_toupper_loc@plt>
   1d854:	ldr	lr, [sp, #76]	; 0x4c
   1d858:	mov	ip, r6
   1d85c:	mov	r1, r9
   1d860:	ldrb	r2, [r8, r1]
   1d864:	ldr	r3, [r0]
   1d868:	subs	r1, r1, #1
   1d86c:	ldr	r2, [r3, r2, lsl #2]
   1d870:	strb	r2, [r5], #-1
   1d874:	bne	1d860 <__assert_fail@plt+0xc2a4>
   1d878:	b	1d898 <__assert_fail@plt+0xc2dc>
   1d87c:	ldr	r1, [sp, #36]	; 0x24
   1d880:	mov	r0, ip
   1d884:	mov	r2, r9
   1d888:	mov	r5, ip
   1d88c:	bl	112f8 <memcpy@plt>
   1d890:	ldr	lr, [sp, #76]	; 0x4c
   1d894:	mov	ip, r5
   1d898:	add	ip, ip, r9
   1d89c:	movw	r6, #52428	; 0xcccc
   1d8a0:	add	lr, r4, lr
   1d8a4:	b	1ed20 <__assert_fail@plt+0xd764>
   1d8a8:	mov	r0, ip
   1d8ac:	mov	r1, #32
   1d8b0:	mov	r2, r4
   1d8b4:	mov	r5, lr
   1d8b8:	mov	r7, ip
   1d8bc:	bl	114b4 <memset@plt>
   1d8c0:	mov	ip, r7
   1d8c4:	mov	lr, r5
   1d8c8:	add	ip, r7, r4
   1d8cc:	mov	r4, #-2147483648	; 0x80000000
   1d8d0:	mov	r0, #10
   1d8d4:	b	1d904 <__assert_fail@plt+0xc348>
   1d8d8:	mov	r0, ip
   1d8dc:	mov	r1, #32
   1d8e0:	mov	r2, r4
   1d8e4:	mov	r5, lr
   1d8e8:	mov	r7, ip
   1d8ec:	bl	114b4 <memset@plt>
   1d8f0:	mov	ip, r7
   1d8f4:	mov	lr, r5
   1d8f8:	add	ip, r7, r4
   1d8fc:	mov	r4, #-2147483648	; 0x80000000
   1d900:	mov	r0, #9
   1d904:	strb	r0, [ip], #1
   1d908:	b	1ee98 <__assert_fail@plt+0xd8dc>
   1d90c:	cmp	ip, #0
   1d910:	beq	1d9a4 <__assert_fail@plt+0xc3e8>
   1d914:	mov	r7, #100	; 0x64
   1d918:	mov	r4, #1
   1d91c:	mla	r3, r3, r7, ip
   1d920:	mov	r7, #6
   1d924:	str	r7, [sp, #80]	; 0x50
   1d928:	mov	r7, #4
   1d92c:	ldr	lr, [sp, #76]	; 0x4c
   1d930:	mov	ip, r8
   1d934:	b	1e42c <__assert_fail@plt+0xce70>
   1d938:	mov	r0, ip
   1d93c:	mov	r7, ip
   1d940:	mov	r1, #32
   1d944:	mov	r2, r6
   1d948:	mov	r5, lr
   1d94c:	bl	114b4 <memset@plt>
   1d950:	mov	lr, r5
   1d954:	add	ip, r7, r6
   1d958:	mov	r0, r7
   1d95c:	add	r0, r6, lr
   1d960:	movw	r6, #52428	; 0xcccc
   1d964:	add	lr, r0, r4
   1d968:	movt	r6, #3276	; 0xccc
   1d96c:	mov	r4, #-2147483648	; 0x80000000
   1d970:	b	1eea4 <__assert_fail@plt+0xd8e8>
   1d974:	mov	r0, ip
   1d978:	mov	r1, #32
   1d97c:	mov	r2, r4
   1d980:	mov	r5, lr
   1d984:	mov	r7, ip
   1d988:	bl	114b4 <memset@plt>
   1d98c:	ldrb	r1, [sl]
   1d990:	mov	ip, r7
   1d994:	mov	lr, r5
   1d998:	add	ip, r7, r4
   1d99c:	strb	r1, [ip], #1
   1d9a0:	b	1ee94 <__assert_fail@plt+0xd8d8>
   1d9a4:	mov	r7, #3
   1d9a8:	b	1ec54 <__assert_fail@plt+0xd698>
   1d9ac:	uxtb	r1, r3
   1d9b0:	cmp	r1, #37	; 0x25
   1d9b4:	bne	1d9d0 <__assert_fail@plt+0xc414>
   1d9b8:	ldr	r0, [fp, #8]
   1d9bc:	mov	r7, #0
   1d9c0:	mov	r5, #0
   1d9c4:	str	sl, [sp, #80]	; 0x50
   1d9c8:	str	r0, [sp, #92]	; 0x5c
   1d9cc:	b	1dac0 <__assert_fail@plt+0xc504>
   1d9d0:	ldr	r0, [sp, #88]	; 0x58
   1d9d4:	bic	r1, r9, r9, asr #31
   1d9d8:	cmp	r1, #1
   1d9dc:	mov	r5, r1
   1d9e0:	movls	r5, #1
   1d9e4:	sub	r2, r0, lr
   1d9e8:	cmp	r5, r2
   1d9ec:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1d9f0:	cmp	ip, #0
   1d9f4:	beq	1db54 <__assert_fail@plt+0xc598>
   1d9f8:	cmp	r1, #2
   1d9fc:	bcc	1da38 <__assert_fail@plt+0xc47c>
   1da00:	sub	r4, r1, #1
   1da04:	mov	r0, ip
   1da08:	mov	r1, #32
   1da0c:	mov	r6, lr
   1da10:	mov	r7, ip
   1da14:	mov	r2, r4
   1da18:	bl	114b4 <memset@plt>
   1da1c:	ldrb	r3, [sl]
   1da20:	mov	ip, r7
   1da24:	mov	lr, r6
   1da28:	movw	r6, #52428	; 0xcccc
   1da2c:	add	ip, r7, r4
   1da30:	movt	r6, #3276	; 0xccc
   1da34:	mov	r4, #-2147483648	; 0x80000000
   1da38:	strb	r3, [ip], #1
   1da3c:	add	lr, r5, lr
   1da40:	b	1eea4 <__assert_fail@plt+0xd8e8>
   1da44:	mov	r7, #1
   1da48:	b	1dac0 <__assert_fail@plt+0xc504>
   1da4c:	add	r1, r1, #1
   1da50:	add	sl, sl, #1
   1da54:	mov	r5, r0
   1da58:	ldrb	r0, [sl]
   1da5c:	sub	r2, r0, #35	; 0x23
   1da60:	cmp	r2, #13
   1da64:	bhi	1daa8 <__assert_fail@plt+0xc4ec>
   1da68:	add	r3, pc, #0
   1da6c:	ldr	pc, [r3, r2, lsl #2]
   1da70:	andeq	sp, r1, r4, asr #20
   1da74:	andeq	sp, r1, ip, asr #21
   1da78:	andeq	sp, r1, ip, asr #21
   1da7c:	andeq	sp, r1, ip, asr #21
   1da80:	andeq	sp, r1, ip, asr #21
   1da84:	andeq	sp, r1, ip, asr #21
   1da88:	andeq	sp, r1, ip, asr #21
   1da8c:	andeq	sp, r1, ip, asr #21
   1da90:	andeq	sp, r1, ip, asr #20
   1da94:	andeq	sp, r1, ip, asr #21
   1da98:	andeq	sp, r1, ip, asr #20
   1da9c:	andeq	sp, r1, ip, asr #21
   1daa0:	andeq	sp, r1, ip, asr #21
   1daa4:	andeq	sp, r1, ip, asr #20
   1daa8:	cmp	r0, #95	; 0x5f
   1daac:	beq	1da4c <__assert_fail@plt+0xc490>
   1dab0:	cmp	r0, #94	; 0x5e
   1dab4:	bne	1dacc <__assert_fail@plt+0xc510>
   1dab8:	mov	r0, #1
   1dabc:	str	r0, [sp, #92]	; 0x5c
   1dac0:	add	r1, sl, #2
   1dac4:	add	sl, sl, #1
   1dac8:	b	1da58 <__assert_fail@plt+0xc49c>
   1dacc:	sub	r2, r0, #48	; 0x30
   1dad0:	cmp	r2, #9
   1dad4:	bhi	1db34 <__assert_fail@plt+0xc578>
   1dad8:	mov	r9, #0
   1dadc:	cmn	r9, #1
   1dae0:	ble	1daf0 <__assert_fail@plt+0xc534>
   1dae4:	cmp	r9, r6
   1dae8:	bgt	1db00 <__assert_fail@plt+0xc544>
   1daec:	b	1db08 <__assert_fail@plt+0xc54c>
   1daf0:	beq	1db08 <__assert_fail@plt+0xc54c>
   1daf4:	sdiv	r2, r4, r9
   1daf8:	cmp	r2, #10
   1dafc:	bge	1db08 <__assert_fail@plt+0xc54c>
   1db00:	mvn	r9, #-2147483648	; 0x80000000
   1db04:	b	1db20 <__assert_fail@plt+0xc564>
   1db08:	add	r2, r9, r9, lsl #2
   1db0c:	lsl	r3, r2, #1
   1db10:	uxtab	r0, r3, r0
   1db14:	sub	r9, r0, #48	; 0x30
   1db18:	cmp	r9, r2, lsl #1
   1db1c:	mvnvs	r9, #-2147483648	; 0x80000000
   1db20:	ldrb	r0, [r1], #1
   1db24:	sub	r2, r0, #48	; 0x30
   1db28:	cmp	r2, #10
   1db2c:	bcc	1dadc <__assert_fail@plt+0xc520>
   1db30:	sub	sl, r1, #1
   1db34:	cmp	r0, #79	; 0x4f
   1db38:	str	ip, [sp, #84]	; 0x54
   1db3c:	cmpne	r0, #69	; 0x45
   1db40:	bne	1db60 <__assert_fail@plt+0xc5a4>
   1db44:	ldrb	r1, [sl, #1]!
   1db48:	cmp	r1, #122	; 0x7a
   1db4c:	bls	1db70 <__assert_fail@plt+0xc5b4>
   1db50:	b	1e76c <__assert_fail@plt+0xd1b0>
   1db54:	mov	ip, #0
   1db58:	add	lr, r5, lr
   1db5c:	b	1eea4 <__assert_fail@plt+0xd8e8>
   1db60:	mov	r1, r0
   1db64:	mov	r0, #0
   1db68:	cmp	r1, #122	; 0x7a
   1db6c:	bhi	1e76c <__assert_fail@plt+0xd1b0>
   1db70:	movw	r4, #6765	; 0x1a6d
   1db74:	add	r2, pc, #12
   1db78:	mov	r6, #0
   1db7c:	mvn	r8, #0
   1db80:	movt	r4, #2
   1db84:	ldr	pc, [r2, r1, lsl #2]
   1db88:	andeq	sp, r1, r4, lsl #29
   1db8c:	andeq	lr, r1, ip, ror #14
   1db90:	andeq	lr, r1, ip, ror #14
   1db94:	andeq	lr, r1, ip, ror #14
   1db98:	andeq	lr, r1, ip, ror #14
   1db9c:	andeq	lr, r1, ip, ror #14
   1dba0:	andeq	lr, r1, ip, ror #14
   1dba4:	andeq	lr, r1, ip, ror #14
   1dba8:	andeq	lr, r1, ip, ror #14
   1dbac:	andeq	lr, r1, ip, ror #14
   1dbb0:	andeq	lr, r1, ip, ror #14
   1dbb4:	andeq	lr, r1, ip, ror #14
   1dbb8:	andeq	lr, r1, ip, ror #14
   1dbbc:	andeq	lr, r1, ip, ror #14
   1dbc0:	andeq	lr, r1, ip, ror #14
   1dbc4:	andeq	lr, r1, ip, ror #14
   1dbc8:	andeq	lr, r1, ip, ror #14
   1dbcc:	andeq	lr, r1, ip, ror #14
   1dbd0:	andeq	lr, r1, ip, ror #14
   1dbd4:	andeq	lr, r1, ip, ror #14
   1dbd8:	andeq	lr, r1, ip, ror #14
   1dbdc:	andeq	lr, r1, ip, ror #14
   1dbe0:	andeq	lr, r1, ip, ror #14
   1dbe4:	andeq	lr, r1, ip, ror #14
   1dbe8:	andeq	lr, r1, ip, ror #14
   1dbec:	andeq	lr, r1, ip, ror #14
   1dbf0:	andeq	lr, r1, ip, ror #14
   1dbf4:	andeq	lr, r1, ip, ror #14
   1dbf8:	andeq	lr, r1, ip, ror #14
   1dbfc:	andeq	lr, r1, ip, ror #14
   1dc00:	andeq	lr, r1, ip, ror #14
   1dc04:	andeq	lr, r1, ip, ror #14
   1dc08:	andeq	lr, r1, ip, ror #14
   1dc0c:	andeq	lr, r1, ip, ror #14
   1dc10:	andeq	lr, r1, ip, ror #14
   1dc14:	andeq	lr, r1, ip, ror #14
   1dc18:	andeq	lr, r1, ip, ror #14
   1dc1c:	muleq	r1, r0, lr
   1dc20:	andeq	lr, r1, ip, ror #14
   1dc24:	andeq	lr, r1, ip, ror #14
   1dc28:	andeq	lr, r1, ip, ror #14
   1dc2c:	andeq	lr, r1, ip, ror #14
   1dc30:	andeq	lr, r1, ip, ror #14
   1dc34:	andeq	lr, r1, ip, ror #14
   1dc38:	andeq	lr, r1, ip, ror #14
   1dc3c:	andeq	lr, r1, ip, ror #14
   1dc40:	andeq	lr, r1, ip, ror #14
   1dc44:	andeq	lr, r1, ip, ror #14
   1dc48:	andeq	lr, r1, ip, ror #14
   1dc4c:	andeq	lr, r1, ip, ror #14
   1dc50:	andeq	lr, r1, ip, ror #14
   1dc54:	andeq	lr, r1, ip, ror #14
   1dc58:	andeq	lr, r1, ip, ror #14
   1dc5c:	andeq	lr, r1, ip, ror #14
   1dc60:	andeq	lr, r1, ip, ror #14
   1dc64:	andeq	lr, r1, ip, ror #14
   1dc68:	andeq	lr, r1, ip, ror #14
   1dc6c:	andeq	lr, r1, ip, ror #14
   1dc70:	strdeq	sp, [r1], -ip
   1dc74:	andeq	lr, r1, ip, ror #14
   1dc78:	andeq	lr, r1, ip, ror #14
   1dc7c:	andeq	lr, r1, ip, ror #14
   1dc80:	andeq	lr, r1, ip, ror #14
   1dc84:	andeq	lr, r1, ip, ror #14
   1dc88:	andeq	lr, r1, ip, ror #14
   1dc8c:	andeq	sp, r1, r0, ror pc
   1dc90:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1dc94:			; <UNDEFINED> instruction: 0x0001dfb0
   1dc98:	andeq	sp, r1, r4, asr #31
   1dc9c:	andeq	lr, r1, ip, ror #14
   1dca0:	ldrdeq	sp, [r1], -r8
   1dca4:	andeq	sp, r1, r4, ror sp
   1dca8:	andeq	lr, r1, r4
   1dcac:	andeq	lr, r1, r8, lsl r0
   1dcb0:	andeq	lr, r1, ip, ror #14
   1dcb4:	andeq	lr, r1, ip, ror #14
   1dcb8:	andeq	lr, r1, ip, ror #14
   1dcbc:	andeq	lr, r1, r8, lsr #32
   1dcc0:	andeq	lr, r1, ip, lsr r0
   1dcc4:	andeq	lr, r1, ip, ror #14
   1dcc8:	andeq	lr, r1, r0, ror #2
   1dccc:	andeq	lr, r1, ip, ror #14
   1dcd0:	muleq	r1, ip, r1
   1dcd4:	andeq	lr, r1, r0, lsl #3
   1dcd8:	muleq	r1, r4, r1
   1dcdc:	andeq	lr, r1, ip, lsr r2
   1dce0:	andeq	sp, r1, r4, ror sp
   1dce4:	andeq	lr, r1, r8, ror #4
   1dce8:			; <UNDEFINED> instruction: 0x0001e2b4
   1dcec:	andeq	lr, r1, r8, asr #5
   1dcf0:	andeq	lr, r1, r4, lsl #6
   1dcf4:	andeq	lr, r1, ip, ror #14
   1dcf8:	andeq	lr, r1, ip, ror #14
   1dcfc:	andeq	lr, r1, ip, ror #14
   1dd00:	andeq	lr, r1, ip, ror #14
   1dd04:	andeq	lr, r1, ip, ror #14
   1dd08:	andeq	lr, r1, ip, ror #14
   1dd0c:	andeq	lr, r1, r4, ror r3
   1dd10:	andeq	sp, r1, r8, ror #28
   1dd14:	muleq	r1, r4, r3
   1dd18:	andeq	lr, r1, r8, lsr #7
   1dd1c:			; <UNDEFINED> instruction: 0x0001e3bc
   1dd20:	andeq	lr, r1, ip, ror #14
   1dd24:	andeq	sp, r1, r4, ror sp
   1dd28:	andeq	sp, r1, r8, ror #28
   1dd2c:	andeq	lr, r1, ip, ror #14
   1dd30:	andeq	lr, r1, ip, asr #7
   1dd34:	andeq	lr, r1, r4, ror #7
   1dd38:	strdeq	lr, [r1], -r8
   1dd3c:	andeq	lr, r1, r0, asr #10
   1dd40:	andeq	lr, r1, r0, ror r5
   1dd44:	andeq	lr, r1, ip, ror #14
   1dd48:	andeq	lr, r1, r4, ror #2
   1dd4c:	andeq	lr, r1, ip, asr #11
   1dd50:	andeq	lr, r1, ip, ror #24
   1dd54:	strdeq	lr, [r1], -r8
   1dd58:			; <UNDEFINED> instruction: 0x0001e6bc
   1dd5c:	andeq	lr, r1, r8, lsl r7
   1dd60:	andeq	lr, r1, ip, ror #14
   1dd64:	andeq	lr, r1, ip, asr #14
   1dd68:	andeq	lr, r1, r4, ror #14
   1dd6c:	muleq	r1, r0, r8
   1dd70:	andeq	sp, r1, r0, lsr #30
   1dd74:	cmp	r0, #69	; 0x45
   1dd78:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1dd7c:	ldr	r2, [sp, #72]	; 0x48
   1dd80:	str	lr, [sp, #76]	; 0x4c
   1dd84:	movw	r6, #9363	; 0x2493
   1dd88:	movt	r6, #37449	; 0x9249
   1dd8c:	add	lr, r2, #20
   1dd90:	movw	r2, #382	; 0x17e
   1dd94:	ldm	lr, {r3, r8, lr}
   1dd98:	add	r2, lr, r2
   1dd9c:	cmp	r3, #0
   1dda0:	str	r3, [sp, #80]	; 0x50
   1dda4:	sub	r2, r2, r8
   1dda8:	smmla	r4, r2, r6, r2
   1ddac:	asr	r7, r4, #2
   1ddb0:	add	r4, r7, r4, lsr #31
   1ddb4:	rsb	r4, r4, r4, lsl #3
   1ddb8:	sub	r2, r4, r2
   1ddbc:	add	r2, lr, r2
   1ddc0:	add	r4, r2, #3
   1ddc4:	mvn	r2, #99	; 0x63
   1ddc8:	movwlt	r2, #300	; 0x12c
   1ddcc:	cmn	r4, #1
   1ddd0:	add	r2, r2, r3
   1ddd4:	ble	1e9f0 <__assert_fail@plt+0xd434>
   1ddd8:	movw	r7, #365	; 0x16d
   1dddc:	tst	r2, #3
   1dde0:	bne	1de24 <__assert_fail@plt+0xc868>
   1dde4:	movw	r7, #34079	; 0x851f
   1dde8:	mov	ip, #100	; 0x64
   1ddec:	movt	r7, #20971	; 0x51eb
   1ddf0:	smmul	r7, r2, r7
   1ddf4:	asr	r3, r7, #5
   1ddf8:	add	r3, r3, r7, lsr #31
   1ddfc:	mls	ip, r3, ip, r2
   1de00:	asr	r3, r7, #7
   1de04:	add	r3, r3, r7, lsr #31
   1de08:	mov	r7, #400	; 0x190
   1de0c:	mls	r2, r3, r7, r2
   1de10:	movw	r7, #365	; 0x16d
   1de14:	cmp	r2, #0
   1de18:	movweq	r7, #366	; 0x16e
   1de1c:	cmp	ip, #0
   1de20:	movwne	r7, #366	; 0x16e
   1de24:	movw	r3, #382	; 0x17e
   1de28:	add	r2, r8, r7
   1de2c:	mov	r7, r6
   1de30:	add	r3, lr, r3
   1de34:	sub	r2, r3, r2
   1de38:	smmla	r2, r2, r6, r2
   1de3c:	asr	r3, r2, #2
   1de40:	add	r2, r3, r2, lsr #31
   1de44:	movw	r3, #379	; 0x17b
   1de48:	rsb	r2, r2, r2, lsl #3
   1de4c:	add	r2, r2, r8
   1de50:	sub	r2, r2, r3
   1de54:	mov	r3, #1
   1de58:	cmn	r2, #1
   1de5c:	eor	r3, r3, r2, lsr #31
   1de60:	movgt	r4, r2
   1de64:	b	1ea70 <__assert_fail@plt+0xd4b4>
   1de68:	ldr	r2, [sp, #92]	; 0x5c
   1de6c:	mov	r6, #0
   1de70:	cmp	r0, #69	; 0x45
   1de74:	orr	r2, r7, r2
   1de78:	str	r2, [sp, #92]	; 0x5c
   1de7c:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1de80:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1de84:	ldr	ip, [sp, #84]	; 0x54
   1de88:	sub	r8, sl, #1
   1de8c:	b	1e774 <__assert_fail@plt+0xd1b8>
   1de90:	ldr	r0, [sp, #80]	; 0x50
   1de94:	ldr	ip, [sp, #84]	; 0x54
   1de98:	sub	r8, sl, #1
   1de9c:	cmp	r8, r0
   1dea0:	bne	1e774 <__assert_fail@plt+0xd1b8>
   1dea4:	ldr	r1, [sp, #88]	; 0x58
   1dea8:	subs	r0, r5, #45	; 0x2d
   1deac:	bicne	r0, r9, r9, asr #31
   1deb0:	cmp	r0, #1
   1deb4:	mov	r6, r0
   1deb8:	movls	r6, #1
   1debc:	sub	r1, r1, lr
   1dec0:	cmp	r6, r1
   1dec4:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1dec8:	cmp	ip, #0
   1decc:	beq	1e944 <__assert_fail@plt+0xd388>
   1ded0:	mov	r1, #37	; 0x25
   1ded4:	cmp	r0, #2
   1ded8:	bcc	1d99c <__assert_fail@plt+0xc3e0>
   1dedc:	uxtb	r1, r5
   1dee0:	sub	r4, r0, #1
   1dee4:	cmp	r1, #48	; 0x30
   1dee8:	cmpne	r1, #43	; 0x2b
   1deec:	bne	1d974 <__assert_fail@plt+0xc3b8>
   1def0:	mov	r0, ip
   1def4:	mov	r1, #48	; 0x30
   1def8:	b	1d97c <__assert_fail@plt+0xc3c0>
   1defc:	mov	r6, #1
   1df00:	b	1df08 <__assert_fail@plt+0xc94c>
   1df04:	add	r6, r6, #1
   1df08:	ldrb	r2, [sl, r6]
   1df0c:	cmp	r2, #58	; 0x3a
   1df10:	beq	1df04 <__assert_fail@plt+0xc948>
   1df14:	cmp	r2, #122	; 0x7a
   1df18:	bne	1e76c <__assert_fail@plt+0xd1b0>
   1df1c:	add	sl, sl, r6
   1df20:	ldr	r3, [sp, #72]	; 0x48
   1df24:	ldr	r2, [r3, #32]
   1df28:	cmp	r2, #0
   1df2c:	blt	1ed18 <__assert_fail@plt+0xd75c>
   1df30:	str	lr, [sp, #76]	; 0x4c
   1df34:	ldr	lr, [r3, #36]	; 0x24
   1df38:	cmp	lr, #0
   1df3c:	blt	1ebd8 <__assert_fail@plt+0xd61c>
   1df40:	ldr	ip, [sp, #84]	; 0x54
   1df44:	mov	r2, #0
   1df48:	bne	1ebe0 <__assert_fail@plt+0xd624>
   1df4c:	ldr	r2, [sp, #36]	; 0x24
   1df50:	ldrb	r2, [r2]
   1df54:	sub	r2, r2, #45	; 0x2d
   1df58:	clz	r2, r2
   1df5c:	lsr	r2, r2, #5
   1df60:	cmp	r6, #3
   1df64:	bls	1ebe8 <__assert_fail@plt+0xd62c>
   1df68:	ldr	lr, [sp, #76]	; 0x4c
   1df6c:	b	1e770 <__assert_fail@plt+0xd1b4>
   1df70:	cmp	r0, #0
   1df74:	bne	1e76c <__assert_fail@plt+0xd1b0>
   1df78:	ldr	r1, [sp, #92]	; 0x5c
   1df7c:	mov	r6, #0
   1df80:	orr	r1, r7, r1
   1df84:	str	r1, [sp, #92]	; 0x5c
   1df88:	mov	r1, #65	; 0x41
   1df8c:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1df90:	cmp	r0, #69	; 0x45
   1df94:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1df98:	ldr	r1, [sp, #92]	; 0x5c
   1df9c:	mov	r6, #0
   1dfa0:	orr	r1, r7, r1
   1dfa4:	str	r1, [sp, #92]	; 0x5c
   1dfa8:	mov	r1, #66	; 0x42
   1dfac:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1dfb0:	cmp	r0, #69	; 0x45
   1dfb4:	bne	1ead4 <__assert_fail@plt+0xd518>
   1dfb8:	mov	r6, #0
   1dfbc:	mov	r1, #67	; 0x43
   1dfc0:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1dfc4:	cmp	r0, #0
   1dfc8:	bne	1e76c <__assert_fail@plt+0xd1b0>
   1dfcc:	movw	r4, #6747	; 0x1a5b
   1dfd0:	movt	r4, #2
   1dfd4:	b	1e19c <__assert_fail@plt+0xcbe0>
   1dfd8:	cmp	r0, #0
   1dfdc:	bne	1e76c <__assert_fail@plt+0xd1b0>
   1dfe0:	movw	r4, #6756	; 0x1a64
   1dfe4:	cmp	r5, #0
   1dfe8:	movt	r4, #2
   1dfec:	bne	1d68c <__assert_fail@plt+0xc0d0>
   1dff0:	cmp	r9, #0
   1dff4:	bge	1d68c <__assert_fail@plt+0xc0d0>
   1dff8:	mov	r5, #43	; 0x2b
   1dffc:	mov	r8, #4
   1e000:	b	1e19c <__assert_fail@plt+0xcbe0>
   1e004:	cmp	r0, #69	; 0x45
   1e008:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e00c:	ldr	r2, [sp, #48]	; 0x30
   1e010:	ldr	r3, [r2]
   1e014:	b	1e40c <__assert_fail@plt+0xce50>
   1e018:	cmp	r0, #69	; 0x45
   1e01c:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e020:	ldr	r3, [sp, #44]	; 0x2c
   1e024:	b	1e40c <__assert_fail@plt+0xce50>
   1e028:	cmp	r0, #69	; 0x45
   1e02c:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e030:	ldr	r2, [sp, #72]	; 0x48
   1e034:	ldr	r3, [r2, #4]
   1e038:	b	1e40c <__assert_fail@plt+0xce50>
   1e03c:	cmp	r0, #69	; 0x45
   1e040:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e044:	ldr	r0, [fp, #24]
   1e048:	cmp	r9, #1
   1e04c:	mov	r4, #9
   1e050:	mov	r7, #8
   1e054:	movwlt	r9, #9
   1e058:	cmp	r9, r4
   1e05c:	bge	1e084 <__assert_fail@plt+0xcac8>
   1e060:	movw	r1, #26215	; 0x6667
   1e064:	sub	r7, r7, #1
   1e068:	sub	r4, r4, #1
   1e06c:	movt	r1, #26214	; 0x6666
   1e070:	smmul	r0, r0, r1
   1e074:	asr	r1, r0, #2
   1e078:	add	r0, r1, r0, lsr #31
   1e07c:	cmp	r9, r4
   1e080:	blt	1e060 <__assert_fail@plt+0xcaa4>
   1e084:	movw	r1, #26215	; 0x6667
   1e088:	cmp	r4, #2
   1e08c:	movt	r1, #26214	; 0x6666
   1e090:	blt	1e0b0 <__assert_fail@plt+0xcaf4>
   1e094:	smmul	r2, r0, r1
   1e098:	asr	r3, r2, #2
   1e09c:	add	r2, r3, r2, lsr #31
   1e0a0:	add	r2, r2, r2, lsl #2
   1e0a4:	sub	r2, r0, r2, lsl #1
   1e0a8:	cmp	r2, #0
   1e0ac:	beq	1e060 <__assert_fail@plt+0xcaa4>
   1e0b0:	cmp	r4, #1
   1e0b4:	mov	r2, r7
   1e0b8:	sub	ip, fp, #48	; 0x30
   1e0bc:	blt	1e0f4 <__assert_fail@plt+0xcb38>
   1e0c0:	smmul	r3, r0, r1
   1e0c4:	asr	r6, r3, #2
   1e0c8:	add	r3, r6, r3, lsr #31
   1e0cc:	add	r6, r3, r3, lsl #2
   1e0d0:	sub	r0, r0, r6, lsl #1
   1e0d4:	add	r0, r0, #48	; 0x30
   1e0d8:	strb	r0, [ip, r2]
   1e0dc:	sub	r0, r2, #1
   1e0e0:	add	r2, r2, #1
   1e0e4:	cmp	r2, #1
   1e0e8:	mov	r2, r0
   1e0ec:	mov	r0, r3
   1e0f0:	bgt	1e0c0 <__assert_fail@plt+0xcb04>
   1e0f4:	ldr	r0, [sp, #88]	; 0x58
   1e0f8:	cmp	r5, #0
   1e0fc:	movweq	r5, #48	; 0x30
   1e100:	sub	r8, r0, lr
   1e104:	cmp	r4, r8
   1e108:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1e10c:	ldr	r6, [sp, #84]	; 0x54
   1e110:	mov	ip, #0
   1e114:	cmp	r6, #0
   1e118:	beq	1d76c <__assert_fail@plt+0xc1b0>
   1e11c:	ldr	r0, [sp, #92]	; 0x5c
   1e120:	tst	r0, #1
   1e124:	beq	1d750 <__assert_fail@plt+0xc194>
   1e128:	cmp	r4, #0
   1e12c:	beq	1d768 <__assert_fail@plt+0xc1ac>
   1e130:	str	lr, [sp, #76]	; 0x4c
   1e134:	bl	11430 <__ctype_toupper_loc@plt>
   1e138:	ldr	lr, [sp, #76]	; 0x4c
   1e13c:	sub	r3, fp, #48	; 0x30
   1e140:	ldrb	r1, [r3, r7]
   1e144:	ldr	r2, [r0]
   1e148:	ldr	r1, [r2, r1, lsl #2]
   1e14c:	strb	r1, [r6, r7]
   1e150:	sub	r7, r7, #1
   1e154:	cmn	r7, #1
   1e158:	bne	1e140 <__assert_fail@plt+0xcb84>
   1e15c:	b	1d768 <__assert_fail@plt+0xc1ac>
   1e160:	mov	r6, #1
   1e164:	ldr	r2, [sp, #92]	; 0x5c
   1e168:	eor	r1, r7, #1
   1e16c:	orr	r6, r7, r6
   1e170:	and	r2, r2, r1
   1e174:	mov	r1, #112	; 0x70
   1e178:	str	r2, [sp, #92]	; 0x5c
   1e17c:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1e180:	cmp	r0, #69	; 0x45
   1e184:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e188:	ldr	r2, [sp, #72]	; 0x48
   1e18c:	ldr	r3, [r2]
   1e190:	b	1e40c <__assert_fail@plt+0xce50>
   1e194:	movw	r4, #5632	; 0x1600
   1e198:	movt	r4, #2
   1e19c:	ldr	r0, [sp, #92]	; 0x5c
   1e1a0:	mvn	r1, #0
   1e1a4:	mov	r2, r4
   1e1a8:	and	r0, r0, #1
   1e1ac:	str	r0, [sp, #92]	; 0x5c
   1e1b0:	stm	sp, {r0, r5, r8}
   1e1b4:	ldr	r0, [fp, #20]
   1e1b8:	str	lr, [sp, #76]	; 0x4c
   1e1bc:	ldr	r3, [sp, #72]	; 0x48
   1e1c0:	str	r0, [sp, #12]
   1e1c4:	ldr	r0, [fp, #24]
   1e1c8:	str	r0, [sp, #16]
   1e1cc:	mov	r0, #0
   1e1d0:	bl	1d598 <__assert_fail@plt+0xbfdc>
   1e1d4:	mov	r7, r0
   1e1d8:	subs	r0, r5, #45	; 0x2d
   1e1dc:	ldr	lr, [sp, #76]	; 0x4c
   1e1e0:	ldr	r1, [sp, #88]	; 0x58
   1e1e4:	movne	r0, r9
   1e1e8:	cmp	r9, #0
   1e1ec:	mov	r6, r7
   1e1f0:	movwlt	r0, #0
   1e1f4:	cmp	r0, r7
   1e1f8:	movhi	r6, r0
   1e1fc:	sub	r9, r1, lr
   1e200:	cmp	r6, r9
   1e204:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1e208:	ldr	ip, [sp, #84]	; 0x54
   1e20c:	cmp	ip, #0
   1e210:	beq	1e944 <__assert_fail@plt+0xd388>
   1e214:	cmp	r0, r7
   1e218:	bls	1e8a4 <__assert_fail@plt+0xd2e8>
   1e21c:	cmp	r5, #48	; 0x30
   1e220:	sub	r2, r0, r7
   1e224:	cmpne	r5, #43	; 0x2b
   1e228:	str	r2, [sp, #80]	; 0x50
   1e22c:	bne	1ee3c <__assert_fail@plt+0xd880>
   1e230:	mov	r0, ip
   1e234:	mov	r1, #48	; 0x30
   1e238:	b	1ee44 <__assert_fail@plt+0xd888>
   1e23c:	cmp	r0, #69	; 0x45
   1e240:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e244:	ldr	r3, [sp, #72]	; 0x48
   1e248:	ldr	r2, [r3, #24]
   1e24c:	ldr	r3, [r3, #28]
   1e250:	add	r3, r3, #7
   1e254:	sub	r2, r3, r2
   1e258:	movw	r3, #9363	; 0x2493
   1e25c:	movt	r3, #37449	; 0x9249
   1e260:	smmla	r2, r2, r3, r2
   1e264:	b	1e2a8 <__assert_fail@plt+0xccec>
   1e268:	cmp	r0, #69	; 0x45
   1e26c:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e270:	ldr	r3, [sp, #72]	; 0x48
   1e274:	movw	r7, #9363	; 0x2493
   1e278:	movt	r7, #37449	; 0x9249
   1e27c:	ldr	r2, [r3, #24]
   1e280:	ldr	r3, [r3, #28]
   1e284:	add	r2, r2, #6
   1e288:	smmla	r6, r2, r7, r2
   1e28c:	asr	r4, r6, #2
   1e290:	add	r6, r4, r6, lsr #31
   1e294:	rsb	r6, r6, r6, lsl #3
   1e298:	sub	r2, r6, r2
   1e29c:	add	r2, r3, r2
   1e2a0:	add	r2, r2, #7
   1e2a4:	smmla	r2, r2, r7, r2
   1e2a8:	asr	r3, r2, #2
   1e2ac:	add	r3, r3, r2, lsr #31
   1e2b0:	b	1e40c <__assert_fail@plt+0xce50>
   1e2b4:	cmp	r0, #79	; 0x4f
   1e2b8:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e2bc:	mov	r6, #0
   1e2c0:	mov	r1, #88	; 0x58
   1e2c4:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1e2c8:	cmp	r0, #69	; 0x45
   1e2cc:	beq	1ec64 <__assert_fail@plt+0xd6a8>
   1e2d0:	cmp	r0, #79	; 0x4f
   1e2d4:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e2d8:	ldr	r2, [sp, #72]	; 0x48
   1e2dc:	movw	r7, #63636	; 0xf894
   1e2e0:	movt	r7, #65535	; 0xffff
   1e2e4:	ldr	r3, [r2, #20]
   1e2e8:	mov	r2, #0
   1e2ec:	cmp	r3, r7
   1e2f0:	movw	r7, #1900	; 0x76c
   1e2f4:	add	r3, r3, r7
   1e2f8:	movwlt	r2, #1
   1e2fc:	mov	r7, #4
   1e300:	b	1eb24 <__assert_fail@plt+0xd568>
   1e304:	ldr	r0, [sp, #36]	; 0x24
   1e308:	ldr	r8, [sp, #92]	; 0x5c
   1e30c:	subs	r6, r5, #45	; 0x2d
   1e310:	str	lr, [sp, #76]	; 0x4c
   1e314:	bicne	r6, r9, r9, asr #31
   1e318:	bl	1146c <strlen@plt>
   1e31c:	ldr	lr, [sp, #76]	; 0x4c
   1e320:	mov	r9, r0
   1e324:	cmp	r6, r0
   1e328:	mov	r4, r0
   1e32c:	ldr	r0, [sp, #88]	; 0x58
   1e330:	movhi	r4, r6
   1e334:	sub	r0, r0, lr
   1e338:	cmp	r4, r0
   1e33c:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1e340:	ldr	r0, [sp, #84]	; 0x54
   1e344:	cmp	r0, #0
   1e348:	beq	1ebd0 <__assert_fail@plt+0xd614>
   1e34c:	cmp	r6, r9
   1e350:	mov	ip, r0
   1e354:	bls	1d7cc <__assert_fail@plt+0xc210>
   1e358:	uxtb	r1, r5
   1e35c:	sub	r2, r6, r9
   1e360:	cmp	r1, #48	; 0x30
   1e364:	cmpne	r1, #43	; 0x2b
   1e368:	bne	1d7b4 <__assert_fail@plt+0xc1f8>
   1e36c:	mov	r1, #48	; 0x30
   1e370:	b	1d7b8 <__assert_fail@plt+0xc1fc>
   1e374:	cmp	r0, #0
   1e378:	bne	1e76c <__assert_fail@plt+0xd1b0>
   1e37c:	ldr	r1, [sp, #92]	; 0x5c
   1e380:	mov	r6, #0
   1e384:	orr	r1, r7, r1
   1e388:	str	r1, [sp, #92]	; 0x5c
   1e38c:	mov	r1, #97	; 0x61
   1e390:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1e394:	cmp	r0, #79	; 0x4f
   1e398:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e39c:	mov	r6, #0
   1e3a0:	mov	r1, #99	; 0x63
   1e3a4:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1e3a8:	cmp	r0, #69	; 0x45
   1e3ac:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e3b0:	ldr	r2, [sp, #40]	; 0x28
   1e3b4:	ldr	r3, [r2]
   1e3b8:	b	1e40c <__assert_fail@plt+0xce50>
   1e3bc:	ldr	r2, [sp, #40]	; 0x28
   1e3c0:	cmp	r0, #69	; 0x45
   1e3c4:	bne	1e3f0 <__assert_fail@plt+0xce34>
   1e3c8:	b	1e76c <__assert_fail@plt+0xd1b0>
   1e3cc:	cmp	r0, #69	; 0x45
   1e3d0:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e3d4:	ldr	r2, [sp, #72]	; 0x48
   1e3d8:	mov	r7, #3
   1e3dc:	ldr	r3, [r2, #28]
   1e3e0:	b	1e554 <__assert_fail@plt+0xcf98>
   1e3e4:	ldr	r2, [sp, #48]	; 0x30
   1e3e8:	cmp	r0, #69	; 0x45
   1e3ec:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e3f0:	ldr	r3, [r2]
   1e3f4:	b	1e404 <__assert_fail@plt+0xce48>
   1e3f8:	ldr	r3, [sp, #44]	; 0x2c
   1e3fc:	cmp	r0, #69	; 0x45
   1e400:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e404:	cmp	r5, #0
   1e408:	movweq	r5, #95	; 0x5f
   1e40c:	mov	r2, #2
   1e410:	str	r2, [sp, #80]	; 0x50
   1e414:	ldr	ip, [sp, #84]	; 0x54
   1e418:	lsr	r2, r3, #31
   1e41c:	cmp	r2, #0
   1e420:	mov	r7, #0
   1e424:	mov	r4, #0
   1e428:	movwne	r2, #1
   1e42c:	cmp	r0, #79	; 0x4f
   1e430:	moveq	r6, #0
   1e434:	cmpeq	r2, #0
   1e438:	beq	1ec6c <__assert_fail@plt+0xd6b0>
   1e43c:	ldr	r8, [sp, #64]	; 0x40
   1e440:	cmp	r2, #0
   1e444:	rsbne	r3, r3, #0
   1e448:	tst	r7, #1
   1e44c:	asr	r7, r7, #1
   1e450:	movne	r0, #58	; 0x3a
   1e454:	strbne	r0, [r8, #-1]!
   1e458:	movw	r0, #52429	; 0xcccd
   1e45c:	cmp	r3, #9
   1e460:	movt	r0, #52428	; 0xcccc
   1e464:	umull	r0, r1, r3, r0
   1e468:	lsr	r0, r1, #3
   1e46c:	add	r1, r0, r0, lsl #2
   1e470:	sub	r1, r3, r1, lsl #1
   1e474:	mov	r3, r0
   1e478:	orr	r1, r1, #48	; 0x30
   1e47c:	strb	r1, [r8, #-1]!
   1e480:	bhi	1e448 <__assert_fail@plt+0xce8c>
   1e484:	cmp	r7, #0
   1e488:	mov	r3, r0
   1e48c:	bne	1e448 <__assert_fail@plt+0xce8c>
   1e490:	ldr	r3, [sp, #80]	; 0x50
   1e494:	cmp	r9, #0
   1e498:	movge	r3, r9
   1e49c:	cmp	r4, #0
   1e4a0:	movwne	r4, #43	; 0x2b
   1e4a4:	cmp	r5, #0
   1e4a8:	movweq	r5, #48	; 0x30
   1e4ac:	ldr	r1, [sp, #64]	; 0x40
   1e4b0:	cmp	r2, #0
   1e4b4:	mov	r0, r3
   1e4b8:	movwne	r4, #45	; 0x2d
   1e4bc:	cmp	r4, #0
   1e4c0:	subne	r0, r0, #1
   1e4c4:	sub	r9, r1, r8
   1e4c8:	sub	r6, r0, r9
   1e4cc:	mov	r0, r4
   1e4d0:	cmp	r6, #1
   1e4d4:	movwlt	r6, #0
   1e4d8:	subs	r4, r5, #45	; 0x2d
   1e4dc:	moveq	r6, r4
   1e4e0:	cmp	r0, #0
   1e4e4:	beq	1e530 <__assert_fail@plt+0xcf74>
   1e4e8:	mov	r7, r0
   1e4ec:	cmp	r5, #95	; 0x5f
   1e4f0:	bne	1e538 <__assert_fail@plt+0xcf7c>
   1e4f4:	cmp	ip, #0
   1e4f8:	beq	1e8b0 <__assert_fail@plt+0xd2f4>
   1e4fc:	mov	r0, ip
   1e500:	mov	r1, #32
   1e504:	mov	r2, r6
   1e508:	str	sl, [sp, #80]	; 0x50
   1e50c:	str	lr, [sp, #76]	; 0x4c
   1e510:	mov	sl, r3
   1e514:	bl	114b4 <memset@plt>
   1e518:	ldr	ip, [sp, #84]	; 0x54
   1e51c:	mov	r3, sl
   1e520:	ldr	lr, [sp, #76]	; 0x4c
   1e524:	ldr	sl, [sp, #80]	; 0x50
   1e528:	add	ip, ip, r6
   1e52c:	b	1e8b4 <__assert_fail@plt+0xd2f8>
   1e530:	ldr	r1, [sp, #92]	; 0x5c
   1e534:	b	1e8e4 <__assert_fail@plt+0xd328>
   1e538:	ldr	r1, [sp, #92]	; 0x5c
   1e53c:	b	1e8c0 <__assert_fail@plt+0xd304>
   1e540:	cmp	r0, #69	; 0x45
   1e544:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e548:	ldr	r2, [sp, #72]	; 0x48
   1e54c:	mov	r7, #2
   1e550:	ldr	r3, [r2, #16]
   1e554:	mov	r2, #0
   1e558:	cmn	r3, #1
   1e55c:	add	r3, r3, #1
   1e560:	movwlt	r2, #1
   1e564:	ldr	ip, [sp, #84]	; 0x54
   1e568:	str	r7, [sp, #80]	; 0x50
   1e56c:	b	1e41c <__assert_fail@plt+0xce60>
   1e570:	ldr	r1, [sp, #88]	; 0x58
   1e574:	subs	r0, r5, #45	; 0x2d
   1e578:	bicne	r0, r9, r9, asr #31
   1e57c:	cmp	r0, #1
   1e580:	mov	r6, r0
   1e584:	movls	r6, #1
   1e588:	sub	r1, r1, lr
   1e58c:	cmp	r6, r1
   1e590:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1e594:	ldr	ip, [sp, #84]	; 0x54
   1e598:	mov	r4, #-2147483648	; 0x80000000
   1e59c:	cmp	ip, #0
   1e5a0:	beq	1e94c <__assert_fail@plt+0xd390>
   1e5a4:	cmp	r0, #2
   1e5a8:	bcc	1d8d0 <__assert_fail@plt+0xc314>
   1e5ac:	uxtb	r1, r5
   1e5b0:	sub	r4, r0, #1
   1e5b4:	cmp	r1, #48	; 0x30
   1e5b8:	cmpne	r1, #43	; 0x2b
   1e5bc:	bne	1d8a8 <__assert_fail@plt+0xc2ec>
   1e5c0:	mov	r0, ip
   1e5c4:	mov	r1, #48	; 0x30
   1e5c8:	b	1d8b0 <__assert_fail@plt+0xc2f4>
   1e5cc:	ldr	r2, [sp, #72]	; 0x48
   1e5d0:	ldr	ip, [sp, #84]	; 0x54
   1e5d4:	mov	r3, #11
   1e5d8:	mov	r7, #1
   1e5dc:	ldr	r2, [r2, #16]
   1e5e0:	mul	r2, r2, r3
   1e5e4:	mov	r3, #1
   1e5e8:	str	r3, [sp, #80]	; 0x50
   1e5ec:	add	r3, r7, r2, asr #5
   1e5f0:	mov	r2, #0
   1e5f4:	b	1e41c <__assert_fail@plt+0xce60>
   1e5f8:	ldr	r2, [sp, #72]	; 0x48
   1e5fc:	mov	r0, #28
   1e600:	add	r1, sp, #96	; 0x60
   1e604:	str	lr, [sp, #76]	; 0x4c
   1e608:	mov	r4, r1
   1e60c:	mov	r3, r2
   1e610:	add	r2, r2, #16
   1e614:	vld1.32	{d16-d17}, [r3], r0
   1e618:	vld1.32	{d18-d19}, [r2]
   1e61c:	add	r2, r1, #16
   1e620:	vld1.32	{d20-d21}, [r3]
   1e624:	vst1.64	{d16-d17}, [r4], r0
   1e628:	mvn	r0, #0
   1e62c:	vst1.64	{d18-d19}, [r2]
   1e630:	vst1.32	{d20-d21}, [r4]
   1e634:	str	r0, [r4]
   1e638:	ldr	r0, [fp, #20]
   1e63c:	bl	1c3bc <__assert_fail@plt+0xae00>
   1e640:	ldr	r1, [r4]
   1e644:	cmp	r1, #0
   1e648:	blt	1eef4 <__assert_fail@plt+0xd938>
   1e64c:	ldr	r1, [sp, #24]
   1e650:	lsr	r2, r0, #31
   1e654:	mov	r3, r0
   1e658:	movw	r7, #26215	; 0x6667
   1e65c:	cmp	r0, #0
   1e660:	movt	r7, #26214	; 0x6666
   1e664:	smmul	r7, r3, r7
   1e668:	asr	r6, r7, #2
   1e66c:	add	r7, r6, r7, lsr #31
   1e670:	add	r6, r7, r7, lsl #2
   1e674:	sub	r6, r3, r6, lsl #1
   1e678:	add	r3, r3, #9
   1e67c:	rsblt	r6, r6, #0
   1e680:	cmp	r3, #18
   1e684:	mov	r3, r7
   1e688:	add	r6, r6, #48	; 0x30
   1e68c:	strb	r6, [r1], #-1
   1e690:	bhi	1e658 <__assert_fail@plt+0xd09c>
   1e694:	ldr	lr, [sp, #76]	; 0x4c
   1e698:	ldr	ip, [sp, #84]	; 0x54
   1e69c:	cmp	r9, #0
   1e6a0:	add	r8, r1, #1
   1e6a4:	mov	r4, #0
   1e6a8:	movwlt	r9, #1
   1e6ac:	cmp	r5, #0
   1e6b0:	movweq	r5, #48	; 0x30
   1e6b4:	mov	r3, r9
   1e6b8:	b	1e4ac <__assert_fail@plt+0xcef0>
   1e6bc:	ldr	r1, [sp, #88]	; 0x58
   1e6c0:	subs	r0, r5, #45	; 0x2d
   1e6c4:	bicne	r0, r9, r9, asr #31
   1e6c8:	cmp	r0, #1
   1e6cc:	mov	r6, r0
   1e6d0:	movls	r6, #1
   1e6d4:	sub	r1, r1, lr
   1e6d8:	cmp	r6, r1
   1e6dc:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1e6e0:	ldr	ip, [sp, #84]	; 0x54
   1e6e4:	mov	r4, #-2147483648	; 0x80000000
   1e6e8:	cmp	ip, #0
   1e6ec:	beq	1e94c <__assert_fail@plt+0xd390>
   1e6f0:	cmp	r0, #2
   1e6f4:	bcc	1d900 <__assert_fail@plt+0xc344>
   1e6f8:	uxtb	r1, r5
   1e6fc:	sub	r4, r0, #1
   1e700:	cmp	r1, #48	; 0x30
   1e704:	cmpne	r1, #43	; 0x2b
   1e708:	bne	1d8d8 <__assert_fail@plt+0xc31c>
   1e70c:	mov	r0, ip
   1e710:	mov	r1, #48	; 0x30
   1e714:	b	1d8e0 <__assert_fail@plt+0xc324>
   1e718:	ldr	r2, [sp, #72]	; 0x48
   1e71c:	movw	r3, #9363	; 0x2493
   1e720:	movt	r3, #37449	; 0x9249
   1e724:	ldr	r2, [r2, #24]
   1e728:	add	r2, r2, #6
   1e72c:	smmla	r3, r2, r3, r2
   1e730:	asr	r7, r3, #2
   1e734:	add	r3, r7, r3, lsr #31
   1e738:	rsb	r3, r3, r3, lsl #3
   1e73c:	sub	r2, r2, r3
   1e740:	add	r3, r2, #1
   1e744:	mov	r2, #1
   1e748:	b	1e410 <__assert_fail@plt+0xce54>
   1e74c:	cmp	r0, #69	; 0x45
   1e750:	beq	1e76c <__assert_fail@plt+0xd1b0>
   1e754:	ldr	r2, [sp, #72]	; 0x48
   1e758:	ldr	r3, [r2, #24]
   1e75c:	mov	r2, #1
   1e760:	b	1e410 <__assert_fail@plt+0xce54>
   1e764:	cmp	r0, #79	; 0x4f
   1e768:	bne	1eb30 <__assert_fail@plt+0xd574>
   1e76c:	ldr	ip, [sp, #84]	; 0x54
   1e770:	mov	r8, sl
   1e774:	ldr	r1, [sp, #80]	; 0x50
   1e778:	subs	r7, r5, #45	; 0x2d
   1e77c:	bicne	r7, r9, r9, asr #31
   1e780:	sub	r0, r8, r1
   1e784:	add	r6, r0, #1
   1e788:	ldr	r0, [sp, #88]	; 0x58
   1e78c:	cmp	r7, r6
   1e790:	mov	r4, r6
   1e794:	movhi	r4, r7
   1e798:	sub	r0, r0, lr
   1e79c:	cmp	r4, r0
   1e7a0:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1e7a4:	cmp	ip, #0
   1e7a8:	beq	1e7dc <__assert_fail@plt+0xd220>
   1e7ac:	cmp	r7, r6
   1e7b0:	mov	r9, ip
   1e7b4:	bls	1e808 <__assert_fail@plt+0xd24c>
   1e7b8:	uxtb	r0, r5
   1e7bc:	mov	sl, lr
   1e7c0:	sub	r9, r7, r6
   1e7c4:	cmp	r0, #48	; 0x30
   1e7c8:	cmpne	r0, #43	; 0x2b
   1e7cc:	bne	1e7e4 <__assert_fail@plt+0xd228>
   1e7d0:	mov	r0, ip
   1e7d4:	mov	r1, #48	; 0x30
   1e7d8:	b	1e7ec <__assert_fail@plt+0xd230>
   1e7dc:	mov	ip, #0
   1e7e0:	b	1e880 <__assert_fail@plt+0xd2c4>
   1e7e4:	mov	r0, ip
   1e7e8:	mov	r1, #32
   1e7ec:	mov	r2, r9
   1e7f0:	mov	r5, ip
   1e7f4:	bl	114b4 <memset@plt>
   1e7f8:	ldr	r1, [sp, #80]	; 0x50
   1e7fc:	add	r9, r5, r9
   1e800:	mov	lr, sl
   1e804:	mov	ip, r5
   1e808:	ldr	r0, [sp, #92]	; 0x5c
   1e80c:	tst	r0, #1
   1e810:	beq	1e868 <__assert_fail@plt+0xd2ac>
   1e814:	cmp	r6, #0
   1e818:	beq	1e87c <__assert_fail@plt+0xd2c0>
   1e81c:	add	r0, r8, #1
   1e820:	sub	r5, r1, r8
   1e824:	mov	sl, lr
   1e828:	sub	r0, r0, r1
   1e82c:	cmp	r7, r0
   1e830:	movhi	r0, r7
   1e834:	add	r0, ip, r0
   1e838:	sub	r7, r0, #1
   1e83c:	bl	11430 <__ctype_toupper_loc@plt>
   1e840:	ldr	r3, [sp, #80]	; 0x50
   1e844:	mov	lr, sl
   1e848:	ldrb	r1, [r3, -r5]
   1e84c:	ldr	r2, [r0]
   1e850:	add	r5, r5, #1
   1e854:	cmp	r5, #1
   1e858:	ldr	r1, [r2, r1, lsl #2]
   1e85c:	strb	r1, [r7], #-1
   1e860:	bne	1e848 <__assert_fail@plt+0xd28c>
   1e864:	b	1e87c <__assert_fail@plt+0xd2c0>
   1e868:	mov	r0, r9
   1e86c:	mov	r2, r6
   1e870:	mov	r5, lr
   1e874:	bl	112f8 <memcpy@plt>
   1e878:	mov	lr, r5
   1e87c:	add	ip, r9, r6
   1e880:	add	lr, r4, lr
   1e884:	mov	sl, r8
   1e888:	mov	r4, #-2147483648	; 0x80000000
   1e88c:	b	1ee9c <__assert_fail@plt+0xd8e0>
   1e890:	cmp	r0, #69	; 0x45
   1e894:	bne	1eb3c <__assert_fail@plt+0xd580>
   1e898:	mov	r6, #0
   1e89c:	mov	r1, #121	; 0x79
   1e8a0:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1e8a4:	ldr	r3, [sp, #72]	; 0x48
   1e8a8:	ldr	r0, [sp, #92]	; 0x5c
   1e8ac:	b	1ee60 <__assert_fail@plt+0xd8a4>
   1e8b0:	mov	ip, #0
   1e8b4:	ldr	r1, [sp, #92]	; 0x5c
   1e8b8:	sub	r3, r3, r6
   1e8bc:	add	lr, r6, lr
   1e8c0:	ldr	r0, [sp, #88]	; 0x58
   1e8c4:	sub	r0, r0, lr
   1e8c8:	cmp	r0, #2
   1e8cc:	bcc	1eed8 <__assert_fail@plt+0xd91c>
   1e8d0:	cmp	ip, #0
   1e8d4:	sub	r3, r3, #1
   1e8d8:	add	lr, lr, #1
   1e8dc:	strbne	r7, [ip], #1
   1e8e0:	moveq	ip, #0
   1e8e4:	ldr	r0, [sp, #88]	; 0x58
   1e8e8:	cmp	r5, #45	; 0x2d
   1e8ec:	mov	r6, r9
   1e8f0:	bicne	r4, r3, r3, asr #31
   1e8f4:	cmp	r4, r9
   1e8f8:	movhi	r6, r4
   1e8fc:	sub	r0, r0, lr
   1e900:	cmp	r6, r0
   1e904:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1e908:	cmp	ip, #0
   1e90c:	beq	1e944 <__assert_fail@plt+0xd388>
   1e910:	str	sl, [sp, #80]	; 0x50
   1e914:	cmp	r4, r9
   1e918:	mov	sl, ip
   1e91c:	bls	1e978 <__assert_fail@plt+0xd3bc>
   1e920:	cmp	r5, #48	; 0x30
   1e924:	mov	r7, lr
   1e928:	sub	sl, r4, r9
   1e92c:	str	r1, [sp, #92]	; 0x5c
   1e930:	cmpne	r5, #43	; 0x2b
   1e934:	bne	1e954 <__assert_fail@plt+0xd398>
   1e938:	mov	r0, ip
   1e93c:	mov	r1, #48	; 0x30
   1e940:	b	1e95c <__assert_fail@plt+0xd3a0>
   1e944:	mov	ip, #0
   1e948:	b	1ee94 <__assert_fail@plt+0xd8d8>
   1e94c:	mov	ip, #0
   1e950:	b	1ee98 <__assert_fail@plt+0xd8dc>
   1e954:	mov	r0, ip
   1e958:	mov	r1, #32
   1e95c:	mov	r2, sl
   1e960:	mov	r5, ip
   1e964:	bl	114b4 <memset@plt>
   1e968:	ldr	r1, [sp, #92]	; 0x5c
   1e96c:	add	sl, r5, sl
   1e970:	mov	lr, r7
   1e974:	mov	ip, r5
   1e978:	tst	r1, #1
   1e97c:	beq	1e9cc <__assert_fail@plt+0xd410>
   1e980:	cmp	r9, #0
   1e984:	beq	1e9e4 <__assert_fail@plt+0xd428>
   1e988:	ldr	r0, [sp, #28]
   1e98c:	cmp	r4, r9
   1e990:	sub	r7, r8, #1
   1e994:	movls	r4, r9
   1e998:	add	r5, r0, r8
   1e99c:	add	r0, ip, r4
   1e9a0:	mov	r8, lr
   1e9a4:	sub	r4, r0, #1
   1e9a8:	bl	11430 <__ctype_toupper_loc@plt>
   1e9ac:	mov	lr, r8
   1e9b0:	ldrb	r1, [r7, -r5]
   1e9b4:	ldr	r2, [r0]
   1e9b8:	adds	r5, r5, #1
   1e9bc:	ldr	r1, [r2, r1, lsl #2]
   1e9c0:	strb	r1, [r4], #-1
   1e9c4:	bne	1e9b0 <__assert_fail@plt+0xd3f4>
   1e9c8:	b	1e9e4 <__assert_fail@plt+0xd428>
   1e9cc:	mov	r0, sl
   1e9d0:	mov	r1, r8
   1e9d4:	mov	r2, r9
   1e9d8:	mov	r4, lr
   1e9dc:	bl	112f8 <memcpy@plt>
   1e9e0:	mov	lr, r4
   1e9e4:	add	ip, sl, r9
   1e9e8:	ldr	sl, [sp, #80]	; 0x50
   1e9ec:	b	1ee94 <__assert_fail@plt+0xd8d8>
   1e9f0:	sub	r2, r2, #1
   1e9f4:	movw	r4, #365	; 0x16d
   1e9f8:	tst	r2, #3
   1e9fc:	bne	1ea40 <__assert_fail@plt+0xd484>
   1ea00:	movw	r4, #34079	; 0x851f
   1ea04:	movt	r4, #20971	; 0x51eb
   1ea08:	smmul	r4, r2, r4
   1ea0c:	asr	r7, r4, #5
   1ea10:	add	r3, r7, r4, lsr #31
   1ea14:	mov	r7, #100	; 0x64
   1ea18:	mls	r3, r3, r7, r2
   1ea1c:	asr	r7, r4, #7
   1ea20:	add	r4, r7, r4, lsr #31
   1ea24:	mov	r7, #400	; 0x190
   1ea28:	mls	r2, r4, r7, r2
   1ea2c:	movw	r4, #365	; 0x16d
   1ea30:	cmp	r2, #0
   1ea34:	movweq	r4, #366	; 0x16e
   1ea38:	cmp	r3, #0
   1ea3c:	movwne	r4, #366	; 0x16e
   1ea40:	add	r2, r4, lr
   1ea44:	movw	r4, #382	; 0x17e
   1ea48:	mov	r7, r6
   1ea4c:	sub	r3, r4, r8
   1ea50:	add	r2, r3, r2
   1ea54:	smmla	r2, r2, r6, r2
   1ea58:	asr	r4, r2, #2
   1ea5c:	add	r2, r4, r2, lsr #31
   1ea60:	rsb	r2, r2, r2, lsl #3
   1ea64:	sub	r2, r2, r3
   1ea68:	mvn	r3, #0
   1ea6c:	add	r4, r2, #3
   1ea70:	ldr	ip, [sp, #84]	; 0x54
   1ea74:	ldr	lr, [sp, #80]	; 0x50
   1ea78:	cmp	r1, #71	; 0x47
   1ea7c:	beq	1eb80 <__assert_fail@plt+0xd5c4>
   1ea80:	cmp	r1, #103	; 0x67
   1ea84:	bne	1ebb0 <__assert_fail@plt+0xd5f4>
   1ea88:	movw	r2, #34079	; 0x851f
   1ea8c:	movt	r2, #20971	; 0x51eb
   1ea90:	smmul	r7, lr, r2
   1ea94:	asr	r6, r7, #5
   1ea98:	add	r7, r6, r7, lsr #31
   1ea9c:	mov	r6, #100	; 0x64
   1eaa0:	mls	r7, r7, r6, lr
   1eaa4:	add	r7, r3, r7
   1eaa8:	smmul	r2, r7, r2
   1eaac:	asr	r4, r2, #5
   1eab0:	add	r2, r4, r2, lsr #31
   1eab4:	mls	r7, r2, r6, r7
   1eab8:	mov	r2, #2
   1eabc:	str	r2, [sp, #80]	; 0x50
   1eac0:	mov	r2, #0
   1eac4:	cmn	r7, #1
   1eac8:	ble	1d698 <__assert_fail@plt+0xc0dc>
   1eacc:	mov	r3, r7
   1ead0:	b	1d6b0 <__assert_fail@plt+0xc0f4>
   1ead4:	ldr	r2, [sp, #72]	; 0x48
   1ead8:	movw	r6, #63636	; 0xf894
   1eadc:	mov	r3, #0
   1eae0:	mvn	r4, #98	; 0x62
   1eae4:	movt	r6, #65535	; 0xffff
   1eae8:	ldr	r7, [r2, #20]
   1eaec:	mov	r2, #0
   1eaf0:	cmp	r7, r6
   1eaf4:	movwge	r3, #1
   1eaf8:	cmp	r7, r6
   1eafc:	and	r3, r3, r7, lsr #31
   1eb00:	movwlt	r2, #1
   1eb04:	smlabb	r3, r3, r4, r7
   1eb08:	movw	r4, #34079	; 0x851f
   1eb0c:	mov	r7, #2
   1eb10:	movt	r4, #20971	; 0x51eb
   1eb14:	smmul	r3, r3, r4
   1eb18:	asr	r4, r3, #5
   1eb1c:	add	r3, r4, r3, lsr #31
   1eb20:	add	r3, r3, #19
   1eb24:	ldr	ip, [sp, #84]	; 0x54
   1eb28:	str	r7, [sp, #80]	; 0x50
   1eb2c:	b	1d6b4 <__assert_fail@plt+0xc0f8>
   1eb30:	mov	r6, #0
   1eb34:	mov	r1, #120	; 0x78
   1eb38:	b	1ec6c <__assert_fail@plt+0xd6b0>
   1eb3c:	ldr	r2, [sp, #72]	; 0x48
   1eb40:	ldr	r7, [r2, #20]
   1eb44:	movw	r2, #34079	; 0x851f
   1eb48:	movt	r2, #20971	; 0x51eb
   1eb4c:	smmul	r2, r7, r2
   1eb50:	asr	r3, r2, #5
   1eb54:	add	r2, r3, r2, lsr #31
   1eb58:	mov	r3, #100	; 0x64
   1eb5c:	mls	r6, r2, r3, r7
   1eb60:	mov	r2, #0
   1eb64:	mov	r3, #2
   1eb68:	cmn	r6, #1
   1eb6c:	ble	1d704 <__assert_fail@plt+0xc148>
   1eb70:	ldr	ip, [sp, #84]	; 0x54
   1eb74:	str	r3, [sp, #80]	; 0x50
   1eb78:	mov	r3, r6
   1eb7c:	b	1d6b4 <__assert_fail@plt+0xc0f8>
   1eb80:	movw	r2, #63636	; 0xf894
   1eb84:	movt	r2, #65535	; 0xffff
   1eb88:	sub	r7, r2, r3
   1eb8c:	add	r3, lr, r3
   1eb90:	mov	r2, #0
   1eb94:	cmp	lr, r7
   1eb98:	movw	r7, #1900	; 0x76c
   1eb9c:	add	r3, r3, r7
   1eba0:	mov	r7, #4
   1eba4:	movwlt	r2, #1
   1eba8:	str	r7, [sp, #80]	; 0x50
   1ebac:	b	1d6b0 <__assert_fail@plt+0xc0f4>
   1ebb0:	smmla	r2, r4, r7, r4
   1ebb4:	ldr	lr, [sp, #76]	; 0x4c
   1ebb8:	asr	r3, r2, #2
   1ebbc:	add	r2, r3, r2, lsr #31
   1ebc0:	add	r3, r2, #1
   1ebc4:	mov	r2, #2
   1ebc8:	str	r2, [sp, #80]	; 0x50
   1ebcc:	b	1e418 <__assert_fail@plt+0xce5c>
   1ebd0:	mov	ip, #0
   1ebd4:	b	1d89c <__assert_fail@plt+0xc2e0>
   1ebd8:	ldr	ip, [sp, #84]	; 0x54
   1ebdc:	mov	r2, #1
   1ebe0:	cmp	r6, #3
   1ebe4:	bhi	1df68 <__assert_fail@plt+0xc9ac>
   1ebe8:	mov	r8, ip
   1ebec:	movw	ip, #34953	; 0x8889
   1ebf0:	movt	ip, #34952	; 0x8888
   1ebf4:	smmla	r4, lr, ip, lr
   1ebf8:	asr	r3, r4, #5
   1ebfc:	add	r4, r3, r4, lsr #31
   1ec00:	smmla	r3, r4, ip, r4
   1ec04:	asr	r7, r3, #5
   1ec08:	add	r3, r7, r3, lsr #31
   1ec0c:	rsb	r3, r3, r3, lsl #4
   1ec10:	sub	ip, r4, r3, lsl #2
   1ec14:	movw	r3, #46021	; 0xb3c5
   1ec18:	rsb	r4, r4, r4, lsl #4
   1ec1c:	movt	r3, #37282	; 0x91a2
   1ec20:	smmla	r3, lr, r3, lr
   1ec24:	asr	r7, r3, #11
   1ec28:	add	r3, r7, r3, lsr #31
   1ec2c:	sub	r7, lr, r4, lsl #2
   1ec30:	add	r4, pc, #0
   1ec34:	ldr	pc, [r4, r6, lsl #2]
   1ec38:	andeq	lr, r1, r8, asr #24
   1ec3c:	andeq	sp, r1, r4, lsl r9
   1ec40:	andeq	sp, r1, ip, lsr #14
   1ec44:	andeq	sp, r1, r4, lsr #14
   1ec48:	mov	r7, #100	; 0x64
   1ec4c:	mla	r3, r3, r7, ip
   1ec50:	mov	r7, #5
   1ec54:	str	r7, [sp, #80]	; 0x50
   1ec58:	mov	r4, #1
   1ec5c:	mov	r7, #0
   1ec60:	b	1d92c <__assert_fail@plt+0xc370>
   1ec64:	mov	r6, #0
   1ec68:	mov	r1, #89	; 0x59
   1ec6c:	movw	r2, #9504	; 0x2520
   1ec70:	cmp	r0, #0
   1ec74:	ldr	r3, [sp, #72]	; 0x48
   1ec78:	str	lr, [sp, #76]	; 0x4c
   1ec7c:	strh	r2, [fp, #-53]	; 0xffffffcb
   1ec80:	ldr	r2, [sp, #68]	; 0x44
   1ec84:	strbne	r0, [fp, #-51]	; 0xffffffcd
   1ec88:	mov	r0, #0
   1ec8c:	ldrne	r2, [sp, #52]	; 0x34
   1ec90:	strb	r0, [r2, #1]
   1ec94:	strb	r1, [r2]
   1ec98:	add	r0, sp, #96	; 0x60
   1ec9c:	sub	r2, fp, #53	; 0x35
   1eca0:	mov	r1, #1024	; 0x400
   1eca4:	bl	113f4 <strftime@plt>
   1eca8:	cmp	r0, #0
   1ecac:	beq	1ed14 <__assert_fail@plt+0xd758>
   1ecb0:	subs	r8, r5, #45	; 0x2d
   1ecb4:	ldr	lr, [sp, #76]	; 0x4c
   1ecb8:	movne	r8, r9
   1ecbc:	cmp	r9, #0
   1ecc0:	sub	r9, r0, #1
   1ecc4:	ldr	r0, [sp, #88]	; 0x58
   1ecc8:	movwlt	r8, #0
   1eccc:	mov	r7, r9
   1ecd0:	cmp	r8, r9
   1ecd4:	movhi	r7, r8
   1ecd8:	sub	r0, r0, lr
   1ecdc:	cmp	r7, r0
   1ece0:	bcs	1eed8 <__assert_fail@plt+0xd91c>
   1ece4:	ldr	r0, [sp, #84]	; 0x54
   1ece8:	cmp	r0, #0
   1ecec:	beq	1ed28 <__assert_fail@plt+0xd76c>
   1ecf0:	cmp	r8, r9
   1ecf4:	mov	ip, r0
   1ecf8:	bls	1ed54 <__assert_fail@plt+0xd798>
   1ecfc:	cmp	r5, #48	; 0x30
   1ed00:	sub	r4, r8, r9
   1ed04:	cmpne	r5, #43	; 0x2b
   1ed08:	bne	1ed38 <__assert_fail@plt+0xd77c>
   1ed0c:	mov	r1, #48	; 0x30
   1ed10:	b	1ed3c <__assert_fail@plt+0xd780>
   1ed14:	ldr	lr, [sp, #76]	; 0x4c
   1ed18:	ldr	ip, [sp, #84]	; 0x54
   1ed1c:	movw	r6, #52428	; 0xcccc
   1ed20:	mov	r4, #-2147483648	; 0x80000000
   1ed24:	b	1eea0 <__assert_fail@plt+0xd8e4>
   1ed28:	movw	r6, #52428	; 0xcccc
   1ed2c:	mov	ip, #0
   1ed30:	movt	r6, #3276	; 0xccc
   1ed34:	b	1ee30 <__assert_fail@plt+0xd874>
   1ed38:	mov	r1, #32
   1ed3c:	mov	r2, r4
   1ed40:	mov	r5, r0
   1ed44:	bl	114b4 <memset@plt>
   1ed48:	ldr	lr, [sp, #76]	; 0x4c
   1ed4c:	add	ip, r5, r4
   1ed50:	mov	r0, r5
   1ed54:	tst	r6, #1
   1ed58:	beq	1edb0 <__assert_fail@plt+0xd7f4>
   1ed5c:	movw	r6, #52428	; 0xcccc
   1ed60:	cmp	r9, #0
   1ed64:	movt	r6, #3276	; 0xccc
   1ed68:	beq	1ee2c <__assert_fail@plt+0xd870>
   1ed6c:	cmp	r8, r9
   1ed70:	mov	r4, ip
   1ed74:	movls	r8, r9
   1ed78:	add	r0, r0, r8
   1ed7c:	sub	r5, r0, #1
   1ed80:	bl	11424 <__ctype_tolower_loc@plt>
   1ed84:	ldr	lr, [sp, #76]	; 0x4c
   1ed88:	mov	ip, r4
   1ed8c:	add	r4, sp, #96	; 0x60
   1ed90:	mov	r1, r9
   1ed94:	ldrb	r2, [r4, r1]
   1ed98:	ldr	r3, [r0]
   1ed9c:	subs	r1, r1, #1
   1eda0:	ldr	r2, [r3, r2, lsl #2]
   1eda4:	strb	r2, [r5], #-1
   1eda8:	bne	1ed94 <__assert_fail@plt+0xd7d8>
   1edac:	b	1ee2c <__assert_fail@plt+0xd870>
   1edb0:	ldr	r1, [sp, #92]	; 0x5c
   1edb4:	movw	r6, #52428	; 0xcccc
   1edb8:	movt	r6, #3276	; 0xccc
   1edbc:	tst	r1, #1
   1edc0:	beq	1ee10 <__assert_fail@plt+0xd854>
   1edc4:	cmp	r9, #0
   1edc8:	beq	1ee2c <__assert_fail@plt+0xd870>
   1edcc:	cmp	r8, r9
   1edd0:	mov	r4, ip
   1edd4:	movls	r8, r9
   1edd8:	add	r0, r0, r8
   1eddc:	sub	r5, r0, #1
   1ede0:	bl	11430 <__ctype_toupper_loc@plt>
   1ede4:	ldr	lr, [sp, #76]	; 0x4c
   1ede8:	mov	ip, r4
   1edec:	add	r4, sp, #96	; 0x60
   1edf0:	mov	r1, r9
   1edf4:	ldrb	r2, [r4, r1]
   1edf8:	ldr	r3, [r0]
   1edfc:	subs	r1, r1, #1
   1ee00:	ldr	r2, [r3, r2, lsl #2]
   1ee04:	strb	r2, [r5], #-1
   1ee08:	bne	1edf4 <__assert_fail@plt+0xd838>
   1ee0c:	b	1ee2c <__assert_fail@plt+0xd870>
   1ee10:	ldr	r1, [sp, #32]
   1ee14:	mov	r0, ip
   1ee18:	mov	r2, r9
   1ee1c:	mov	r4, ip
   1ee20:	bl	112f8 <memcpy@plt>
   1ee24:	ldr	lr, [sp, #76]	; 0x4c
   1ee28:	mov	ip, r4
   1ee2c:	add	ip, ip, r9
   1ee30:	add	lr, r7, lr
   1ee34:	mov	r4, #-2147483648	; 0x80000000
   1ee38:	b	1eea4 <__assert_fail@plt+0xd8e8>
   1ee3c:	mov	r0, ip
   1ee40:	mov	r1, #32
   1ee44:	ldr	r2, [sp, #80]	; 0x50
   1ee48:	bl	114b4 <memset@plt>
   1ee4c:	ldr	r1, [sp, #80]	; 0x50
   1ee50:	ldr	ip, [sp, #84]	; 0x54
   1ee54:	ldr	r3, [sp, #72]	; 0x48
   1ee58:	ldr	r0, [sp, #92]	; 0x5c
   1ee5c:	add	ip, ip, r1
   1ee60:	stm	sp, {r0, r5, r8}
   1ee64:	ldr	r0, [fp, #20]
   1ee68:	mov	r2, r4
   1ee6c:	mov	r1, r9
   1ee70:	mov	r4, ip
   1ee74:	str	r0, [sp, #12]
   1ee78:	ldr	r0, [fp, #24]
   1ee7c:	str	r0, [sp, #16]
   1ee80:	mov	r0, ip
   1ee84:	bl	1d598 <__assert_fail@plt+0xbfdc>
   1ee88:	ldr	lr, [sp, #76]	; 0x4c
   1ee8c:	mov	ip, r4
   1ee90:	add	ip, r4, r7
   1ee94:	mov	r4, #-2147483648	; 0x80000000
   1ee98:	add	lr, r6, lr
   1ee9c:	movw	r6, #52428	; 0xcccc
   1eea0:	movt	r6, #3276	; 0xccc
   1eea4:	ldrb	r3, [sl, #1]!
   1eea8:	mvn	r9, #0
   1eeac:	cmp	r3, #0
   1eeb0:	bne	1d9ac <__assert_fail@plt+0xc3f0>
   1eeb4:	ldr	r0, [sp, #88]	; 0x58
   1eeb8:	ldr	r1, [sp, #56]	; 0x38
   1eebc:	cmp	r0, #0
   1eec0:	cmpne	ip, #0
   1eec4:	movne	r0, #0
   1eec8:	strbne	r0, [ip]
   1eecc:	ldr	r0, [sp, #60]	; 0x3c
   1eed0:	str	r1, [r0]
   1eed4:	b	1eee8 <__assert_fail@plt+0xd92c>
   1eed8:	mov	r0, #34	; 0x22
   1eedc:	ldr	r1, [sp, #60]	; 0x3c
   1eee0:	mov	lr, #0
   1eee4:	str	r0, [r1]
   1eee8:	mov	r0, lr
   1eeec:	sub	sp, fp, #28
   1eef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eef4:	mov	r0, #75	; 0x4b
   1eef8:	b	1eedc <__assert_fail@plt+0xd920>
   1eefc:	cmp	r2, #0
   1ef00:	beq	1ef30 <__assert_fail@plt+0xd974>
   1ef04:	mvn	r3, #0
   1ef08:	udiv	r3, r3, r2
   1ef0c:	cmp	r3, r1
   1ef10:	bcs	1ef30 <__assert_fail@plt+0xd974>
   1ef14:	push	{fp, lr}
   1ef18:	mov	fp, sp
   1ef1c:	bl	11490 <__errno_location@plt>
   1ef20:	mov	r1, #12
   1ef24:	str	r1, [r0]
   1ef28:	mov	r0, #0
   1ef2c:	pop	{fp, pc}
   1ef30:	mul	r1, r2, r1
   1ef34:	b	1d228 <__assert_fail@plt+0xbc6c>
   1ef38:	push	{r4, sl, fp, lr}
   1ef3c:	add	fp, sp, #8
   1ef40:	sub	sp, sp, #264	; 0x108
   1ef44:	add	r1, sp, #7
   1ef48:	movw	r2, #257	; 0x101
   1ef4c:	bl	1ef9c <__assert_fail@plt+0xd9e0>
   1ef50:	mov	r4, #0
   1ef54:	cmp	r0, #0
   1ef58:	bne	1ef90 <__assert_fail@plt+0xd9d4>
   1ef5c:	movw	r1, #3132	; 0xc3c
   1ef60:	add	r0, sp, #7
   1ef64:	movt	r1, #2
   1ef68:	bl	112a4 <strcmp@plt>
   1ef6c:	cmp	r0, #0
   1ef70:	beq	1ef90 <__assert_fail@plt+0xd9d4>
   1ef74:	movw	r1, #6771	; 0x1a73
   1ef78:	add	r0, sp, #7
   1ef7c:	movt	r1, #2
   1ef80:	bl	112a4 <strcmp@plt>
   1ef84:	mov	r4, r0
   1ef88:	cmp	r0, #0
   1ef8c:	movwne	r4, #1
   1ef90:	mov	r0, r4
   1ef94:	sub	sp, fp, #8
   1ef98:	pop	{r4, sl, fp, pc}
   1ef9c:	push	{r4, r5, r6, r7, fp, lr}
   1efa0:	add	fp, sp, #16
   1efa4:	mov	r4, r1
   1efa8:	mov	r1, #0
   1efac:	mov	r6, r2
   1efb0:	bl	11508 <setlocale@plt>
   1efb4:	cmp	r0, #0
   1efb8:	beq	1efe8 <__assert_fail@plt+0xda2c>
   1efbc:	mov	r7, r0
   1efc0:	bl	1146c <strlen@plt>
   1efc4:	cmp	r0, r6
   1efc8:	bcs	1f008 <__assert_fail@plt+0xda4c>
   1efcc:	add	r2, r0, #1
   1efd0:	mov	r0, r4
   1efd4:	mov	r1, r7
   1efd8:	bl	112f8 <memcpy@plt>
   1efdc:	mov	r5, #0
   1efe0:	mov	r0, r5
   1efe4:	pop	{r4, r5, r6, r7, fp, pc}
   1efe8:	cmp	r6, #0
   1efec:	mov	r5, #22
   1eff0:	movne	r0, #0
   1eff4:	strbne	r0, [r4]
   1eff8:	movne	r0, r5
   1effc:	popne	{r4, r5, r6, r7, fp, pc}
   1f000:	mov	r0, r5
   1f004:	pop	{r4, r5, r6, r7, fp, pc}
   1f008:	mov	r5, #34	; 0x22
   1f00c:	cmp	r6, #0
   1f010:	beq	1f030 <__assert_fail@plt+0xda74>
   1f014:	sub	r6, r6, #1
   1f018:	mov	r0, r4
   1f01c:	mov	r1, r7
   1f020:	mov	r2, r6
   1f024:	bl	112f8 <memcpy@plt>
   1f028:	mov	r0, #0
   1f02c:	strb	r0, [r4, r6]
   1f030:	mov	r0, r5
   1f034:	pop	{r4, r5, r6, r7, fp, pc}
   1f038:	mov	r1, #0
   1f03c:	b	11508 <setlocale@plt>
   1f040:	cmp	r3, #0
   1f044:	cmpeq	r2, #0
   1f048:	bne	1f06c <__assert_fail@plt+0xdab0>
   1f04c:	cmp	r1, #0
   1f050:	movlt	r1, #-2147483648	; 0x80000000
   1f054:	movlt	r0, #0
   1f058:	blt	1f068 <__assert_fail@plt+0xdaac>
   1f05c:	cmpeq	r0, #0
   1f060:	mvnne	r1, #-2147483648	; 0x80000000
   1f064:	mvnne	r0, #0
   1f068:	b	1f150 <__assert_fail@plt+0xdb94>
   1f06c:	sub	sp, sp, #8
   1f070:	push	{sp, lr}
   1f074:	cmp	r1, #0
   1f078:	blt	1f098 <__assert_fail@plt+0xdadc>
   1f07c:	cmp	r3, #0
   1f080:	blt	1f0cc <__assert_fail@plt+0xdb10>
   1f084:	bl	1f160 <__assert_fail@plt+0xdba4>
   1f088:	ldr	lr, [sp, #4]
   1f08c:	add	sp, sp, #8
   1f090:	pop	{r2, r3}
   1f094:	bx	lr
   1f098:	rsbs	r0, r0, #0
   1f09c:	sbc	r1, r1, r1, lsl #1
   1f0a0:	cmp	r3, #0
   1f0a4:	blt	1f0f0 <__assert_fail@plt+0xdb34>
   1f0a8:	bl	1f160 <__assert_fail@plt+0xdba4>
   1f0ac:	ldr	lr, [sp, #4]
   1f0b0:	add	sp, sp, #8
   1f0b4:	pop	{r2, r3}
   1f0b8:	rsbs	r0, r0, #0
   1f0bc:	sbc	r1, r1, r1, lsl #1
   1f0c0:	rsbs	r2, r2, #0
   1f0c4:	sbc	r3, r3, r3, lsl #1
   1f0c8:	bx	lr
   1f0cc:	rsbs	r2, r2, #0
   1f0d0:	sbc	r3, r3, r3, lsl #1
   1f0d4:	bl	1f160 <__assert_fail@plt+0xdba4>
   1f0d8:	ldr	lr, [sp, #4]
   1f0dc:	add	sp, sp, #8
   1f0e0:	pop	{r2, r3}
   1f0e4:	rsbs	r0, r0, #0
   1f0e8:	sbc	r1, r1, r1, lsl #1
   1f0ec:	bx	lr
   1f0f0:	rsbs	r2, r2, #0
   1f0f4:	sbc	r3, r3, r3, lsl #1
   1f0f8:	bl	1f160 <__assert_fail@plt+0xdba4>
   1f0fc:	ldr	lr, [sp, #4]
   1f100:	add	sp, sp, #8
   1f104:	pop	{r2, r3}
   1f108:	rsbs	r2, r2, #0
   1f10c:	sbc	r3, r3, r3, lsl #1
   1f110:	bx	lr
   1f114:	cmp	r3, #0
   1f118:	cmpeq	r2, #0
   1f11c:	bne	1f134 <__assert_fail@plt+0xdb78>
   1f120:	cmp	r1, #0
   1f124:	cmpeq	r0, #0
   1f128:	mvnne	r1, #0
   1f12c:	mvnne	r0, #0
   1f130:	b	1f150 <__assert_fail@plt+0xdb94>
   1f134:	sub	sp, sp, #8
   1f138:	push	{sp, lr}
   1f13c:	bl	1f160 <__assert_fail@plt+0xdba4>
   1f140:	ldr	lr, [sp, #4]
   1f144:	add	sp, sp, #8
   1f148:	pop	{r2, r3}
   1f14c:	bx	lr
   1f150:	push	{r1, lr}
   1f154:	mov	r0, #8
   1f158:	bl	11280 <raise@plt>
   1f15c:	pop	{r1, pc}
   1f160:	cmp	r1, r3
   1f164:	cmpeq	r0, r2
   1f168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f16c:	mov	r4, r0
   1f170:	movcc	r0, #0
   1f174:	mov	r5, r1
   1f178:	ldr	lr, [sp, #36]	; 0x24
   1f17c:	movcc	r1, r0
   1f180:	bcc	1f27c <__assert_fail@plt+0xdcc0>
   1f184:	cmp	r3, #0
   1f188:	clzeq	ip, r2
   1f18c:	clzne	ip, r3
   1f190:	addeq	ip, ip, #32
   1f194:	cmp	r5, #0
   1f198:	clzeq	r1, r4
   1f19c:	addeq	r1, r1, #32
   1f1a0:	clzne	r1, r5
   1f1a4:	sub	ip, ip, r1
   1f1a8:	sub	sl, ip, #32
   1f1ac:	lsl	r9, r3, ip
   1f1b0:	rsb	fp, ip, #32
   1f1b4:	orr	r9, r9, r2, lsl sl
   1f1b8:	orr	r9, r9, r2, lsr fp
   1f1bc:	lsl	r8, r2, ip
   1f1c0:	cmp	r5, r9
   1f1c4:	cmpeq	r4, r8
   1f1c8:	movcc	r0, #0
   1f1cc:	movcc	r1, r0
   1f1d0:	bcc	1f1ec <__assert_fail@plt+0xdc30>
   1f1d4:	mov	r0, #1
   1f1d8:	subs	r4, r4, r8
   1f1dc:	lsl	r1, r0, sl
   1f1e0:	orr	r1, r1, r0, lsr fp
   1f1e4:	lsl	r0, r0, ip
   1f1e8:	sbc	r5, r5, r9
   1f1ec:	cmp	ip, #0
   1f1f0:	beq	1f27c <__assert_fail@plt+0xdcc0>
   1f1f4:	lsr	r6, r8, #1
   1f1f8:	orr	r6, r6, r9, lsl #31
   1f1fc:	lsr	r7, r9, #1
   1f200:	mov	r2, ip
   1f204:	b	1f228 <__assert_fail@plt+0xdc6c>
   1f208:	subs	r3, r4, r6
   1f20c:	sbc	r8, r5, r7
   1f210:	adds	r3, r3, r3
   1f214:	adc	r8, r8, r8
   1f218:	adds	r4, r3, #1
   1f21c:	adc	r5, r8, #0
   1f220:	subs	r2, r2, #1
   1f224:	beq	1f244 <__assert_fail@plt+0xdc88>
   1f228:	cmp	r5, r7
   1f22c:	cmpeq	r4, r6
   1f230:	bcs	1f208 <__assert_fail@plt+0xdc4c>
   1f234:	adds	r4, r4, r4
   1f238:	adc	r5, r5, r5
   1f23c:	subs	r2, r2, #1
   1f240:	bne	1f228 <__assert_fail@plt+0xdc6c>
   1f244:	lsr	r3, r4, ip
   1f248:	orr	r3, r3, r5, lsl fp
   1f24c:	lsr	r2, r5, ip
   1f250:	orr	r3, r3, r5, lsr sl
   1f254:	adds	r0, r0, r4
   1f258:	mov	r4, r3
   1f25c:	lsl	r3, r2, ip
   1f260:	orr	r3, r3, r4, lsl sl
   1f264:	lsl	ip, r4, ip
   1f268:	orr	r3, r3, r4, lsr fp
   1f26c:	adc	r1, r1, r5
   1f270:	subs	r0, r0, ip
   1f274:	mov	r5, r2
   1f278:	sbc	r1, r1, r3
   1f27c:	cmp	lr, #0
   1f280:	strdne	r4, [lr]
   1f284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f288:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f28c:	mov	r7, r0
   1f290:	ldr	r6, [pc, #72]	; 1f2e0 <__assert_fail@plt+0xdd24>
   1f294:	ldr	r5, [pc, #72]	; 1f2e4 <__assert_fail@plt+0xdd28>
   1f298:	add	r6, pc, r6
   1f29c:	add	r5, pc, r5
   1f2a0:	sub	r6, r6, r5
   1f2a4:	mov	r8, r1
   1f2a8:	mov	r9, r2
   1f2ac:	bl	11248 <calloc@plt-0x20>
   1f2b0:	asrs	r6, r6, #2
   1f2b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f2b8:	mov	r4, #0
   1f2bc:	add	r4, r4, #1
   1f2c0:	ldr	r3, [r5], #4
   1f2c4:	mov	r2, r9
   1f2c8:	mov	r1, r8
   1f2cc:	mov	r0, r7
   1f2d0:	blx	r3
   1f2d4:	cmp	r6, r4
   1f2d8:	bne	1f2bc <__assert_fail@plt+0xdd00>
   1f2dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f2e0:	andeq	r2, r1, ip, ror #24
   1f2e4:	andeq	r2, r1, r4, ror #24
   1f2e8:	bx	lr
   1f2ec:	ldr	r3, [pc, #12]	; 1f300 <__assert_fail@plt+0xdd44>
   1f2f0:	mov	r1, #0
   1f2f4:	add	r3, pc, r3
   1f2f8:	ldr	r2, [r3]
   1f2fc:	b	114a8 <__cxa_atexit@plt>
   1f300:	andeq	r2, r1, r8, lsr lr

Disassembly of section .fini:

0001f304 <.fini>:
   1f304:	push	{r3, lr}
   1f308:	pop	{r3, pc}
