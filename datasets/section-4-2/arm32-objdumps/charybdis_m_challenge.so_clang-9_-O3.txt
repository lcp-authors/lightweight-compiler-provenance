
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000099c <_init>:
 99c:	push	{r3, lr}
 9a0:	bl	b30 <call_weak_fn>
 9a4:	pop	{r3, pc}

Disassembly of section .plt:

000009a8 <.plt>:
 9a8:	push	{lr}		; (str lr, [sp, #-4]!)
 9ac:	ldr	lr, [pc, #4]	; 9b8 <.plt+0x10>
 9b0:	add	lr, pc, lr
 9b4:	ldr	pc, [lr, #8]!
 9b8:	.word	0x00011648

000009bc <calloc@plt>:
 9bc:	add	ip, pc, #0, 12
 9c0:	add	ip, ip, #69632	; 0x11000
 9c4:	ldr	pc, [ip, #1608]!	; 0x648

000009c8 <rb_current_time@plt>:
 9c8:	add	ip, pc, #0, 12
 9cc:	add	ip, ip, #69632	; 0x11000
 9d0:	ldr	pc, [ip, #1600]!	; 0x640

000009d4 <__cxa_finalize@plt>:
 9d4:	add	ip, pc, #0, 12
 9d8:	add	ip, ip, #69632	; 0x11000
 9dc:	ldr	pc, [ip, #1592]!	; 0x638

000009e0 <RSA_public_encrypt@plt>:
 9e0:	add	ip, pc, #0, 12
 9e4:	add	ip, ip, #69632	; 0x11000
 9e8:	ldr	pc, [ip, #1584]!	; 0x630

000009ec <sendto_one@plt>:
 9ec:	add	ip, pc, #0, 12
 9f0:	add	ip, ip, #69632	; 0x11000
 9f4:	ldr	pc, [ip, #1576]!	; 0x628

000009f8 <free@plt>:
 9f8:	add	ip, pc, #0, 12
 9fc:	add	ip, ip, #69632	; 0x11000
 a00:	ldr	pc, [ip, #1568]!	; 0x620

00000a04 <rb_strcasecmp@plt>:
 a04:	add	ip, pc, #0, 12
 a08:	add	ip, ip, #69632	; 0x11000
 a0c:	ldr	pc, [ip, #1560]!	; 0x618

00000a10 <RSA_size@plt>:
 a10:	add	ip, pc, #0, 12
 a14:	add	ip, ip, #69632	; 0x11000
 a18:	ldr	pc, [ip, #1552]!	; 0x610

00000a1c <rb_outofmemory@plt>:
 a1c:	add	ip, pc, #0, 12
 a20:	add	ip, ip, #69632	; 0x11000
 a24:	ldr	pc, [ip, #1544]!	; 0x608

00000a28 <sendto_realops_snomask@plt>:
 a28:	add	ip, pc, #0, 12
 a2c:	add	ip, ip, #69632	; 0x11000
 a30:	ldr	pc, [ip, #1536]!	; 0x600

00000a34 <rb_base64_decode@plt>:
 a34:	add	ip, pc, #0, 12
 a38:	add	ip, ip, #69632	; 0x11000
 a3c:	ldr	pc, [ip, #1528]!	; 0x5f8

00000a40 <strcpy@plt>:
 a40:	add	ip, pc, #0, 12
 a44:	add	ip, ip, #69632	; 0x11000
 a48:	ldr	pc, [ip, #1520]!	; 0x5f0

00000a4c <malloc@plt>:
 a4c:	add	ip, pc, #0, 12
 a50:	add	ip, ip, #69632	; 0x11000
 a54:	ldr	pc, [ip, #1512]!	; 0x5e8

00000a58 <rb_get_random@plt>:
 a58:	add	ip, pc, #0, 12
 a5c:	add	ip, ip, #69632	; 0x11000
 a60:	ldr	pc, [ip, #1504]!	; 0x5e0

00000a64 <__gmon_start__@plt>:
 a64:	add	ip, pc, #0, 12
 a68:	add	ip, ip, #69632	; 0x11000
 a6c:	ldr	pc, [ip, #1496]!	; 0x5d8

00000a70 <OPENSSL_init_crypto@plt>:
 a70:	add	ip, pc, #0, 12
 a74:	add	ip, ip, #69632	; 0x11000
 a78:	ldr	pc, [ip, #1488]!	; 0x5d0

00000a7c <send_oper_motd@plt>:
 a7c:	add	ip, pc, #0, 12
 a80:	add	ip, ip, #69632	; 0x11000
 a84:	ldr	pc, [ip, #1480]!	; 0x5c8

00000a88 <sendto_one_numeric@plt>:
 a88:	add	ip, pc, #0, 12
 a8c:	add	ip, ip, #69632	; 0x11000
 a90:	ldr	pc, [ip, #1472]!	; 0x5c0

00000a94 <bcmp@plt>:
 a94:	add	ip, pc, #0, 12
 a98:	add	ip, ip, #69632	; 0x11000
 a9c:	ldr	pc, [ip, #1464]!	; 0x5b8

00000aa0 <strlen@plt>:
 aa0:	add	ip, pc, #0, 12
 aa4:	add	ip, ip, #69632	; 0x11000
 aa8:	ldr	pc, [ip, #1456]!	; 0x5b0

00000aac <SHA1_Update@plt>:
 aac:	add	ip, pc, #0, 12
 ab0:	add	ip, ip, #69632	; 0x11000
 ab4:	ldr	pc, [ip, #1448]!	; 0x5a8

00000ab8 <ERR_error_string@plt>:
 ab8:	add	ip, pc, #0, 12
 abc:	add	ip, ip, #69632	; 0x11000
 ac0:	ldr	pc, [ip, #1440]!	; 0x5a0

00000ac4 <ilog@plt>:
 ac4:	add	ip, pc, #0, 12
 ac8:	add	ip, ip, #69632	; 0x11000
 acc:	ldr	pc, [ip, #1432]!	; 0x598

00000ad0 <SHA1_Init@plt>:
 ad0:	add	ip, pc, #0, 12
 ad4:	add	ip, ip, #69632	; 0x11000
 ad8:	ldr	pc, [ip, #1424]!	; 0x590

00000adc <ERR_get_error@plt>:
 adc:	add	ip, pc, #0, 12
 ae0:	add	ip, ip, #69632	; 0x11000
 ae4:	ldr	pc, [ip, #1416]!	; 0x588

00000ae8 <sendto_one_notice@plt>:
 ae8:	add	ip, pc, #0, 12
 aec:	add	ip, ip, #69632	; 0x11000
 af0:	ldr	pc, [ip, #1408]!	; 0x580

00000af4 <rb_strlcpy@plt>:
 af4:	add	ip, pc, #0, 12
 af8:	add	ip, ip, #69632	; 0x11000
 afc:	ldr	pc, [ip, #1400]!	; 0x578

00000b00 <find_oper_conf@plt>:
 b00:	add	ip, pc, #0, 12
 b04:	add	ip, ip, #69632	; 0x11000
 b08:	ldr	pc, [ip, #1392]!	; 0x570

00000b0c <oper_up@plt>:
 b0c:	add	ip, pc, #0, 12
 b10:	add	ip, ip, #69632	; 0x11000
 b14:	ldr	pc, [ip, #1384]!	; 0x568

00000b18 <rb_base64_encode@plt>:
 b18:	add	ip, pc, #0, 12
 b1c:	add	ip, ip, #69632	; 0x11000
 b20:	ldr	pc, [ip, #1376]!	; 0x560

00000b24 <SHA1_Final@plt>:
 b24:	add	ip, pc, #0, 12
 b28:	add	ip, ip, #69632	; 0x11000
 b2c:	ldr	pc, [ip, #1368]!	; 0x558

Disassembly of section .text:

00000b30 <call_weak_fn>:
     b30:	ldr	r3, [pc, #20]	; b4c <call_weak_fn+0x1c>
     b34:	ldr	r2, [pc, #20]	; b50 <call_weak_fn+0x20>
     b38:	add	r3, pc, r3
     b3c:	ldr	r2, [r3, r2]
     b40:	cmp	r2, #0
     b44:	bxeq	lr
     b48:	b	a64 <__gmon_start__@plt>
     b4c:	.word	0x000114c0
     b50:	.word	0x00000090

00000b54 <deregister_tm_clones>:
     b54:	ldr	r0, [pc, #44]	; b88 <deregister_tm_clones+0x34>
     b58:	ldr	r3, [pc, #44]	; b8c <deregister_tm_clones+0x38>
     b5c:	add	r0, pc, r0
     b60:	add	r3, pc, r3
     b64:	cmp	r3, r0
     b68:	ldr	r3, [pc, #32]	; b90 <deregister_tm_clones+0x3c>
     b6c:	add	r3, pc, r3
     b70:	bxeq	lr
     b74:	ldr	r2, [pc, #24]	; b94 <deregister_tm_clones+0x40>
     b78:	ldr	r3, [r3, r2]
     b7c:	cmp	r3, #0
     b80:	bxeq	lr
     b84:	bx	r3
     b88:	.word	0x000115b4
     b8c:	.word	0x000115b0
     b90:	.word	0x0001148c
     b94:	.word	0x0000008c

00000b98 <register_tm_clones>:
     b98:	ldr	r0, [pc, #56]	; bd8 <register_tm_clones+0x40>
     b9c:	ldr	r3, [pc, #56]	; bdc <register_tm_clones+0x44>
     ba0:	add	r0, pc, r0
     ba4:	add	r3, pc, r3
     ba8:	sub	r1, r3, r0
     bac:	ldr	r3, [pc, #44]	; be0 <register_tm_clones+0x48>
     bb0:	asr	r1, r1, #2
     bb4:	add	r3, pc, r3
     bb8:	add	r1, r1, r1, lsr #31
     bbc:	asrs	r1, r1, #1
     bc0:	bxeq	lr
     bc4:	ldr	r2, [pc, #24]	; be4 <register_tm_clones+0x4c>
     bc8:	ldr	r3, [r3, r2]
     bcc:	cmp	r3, #0
     bd0:	bxeq	lr
     bd4:	bx	r3
     bd8:	.word	0x00011570
     bdc:	.word	0x0001156c
     be0:	.word	0x00011444
     be4:	.word	0x00000094

00000be8 <__do_global_dtors_aux>:
     be8:	ldr	r3, [pc, #76]	; c3c <__do_global_dtors_aux+0x54>
     bec:	ldr	r2, [pc, #76]	; c40 <__do_global_dtors_aux+0x58>
     bf0:	add	r3, pc, r3
     bf4:	add	r2, pc, r2
     bf8:	ldrb	r3, [r3]
     bfc:	cmp	r3, #0
     c00:	bxne	lr
     c04:	ldr	r3, [pc, #56]	; c44 <__do_global_dtors_aux+0x5c>
     c08:	push	{r4, lr}
     c0c:	ldr	r3, [r2, r3]
     c10:	cmp	r3, #0
     c14:	beq	c24 <__do_global_dtors_aux+0x3c>
     c18:	ldr	r3, [pc, #40]	; c48 <__do_global_dtors_aux+0x60>
     c1c:	ldr	r0, [pc, r3]
     c20:	bl	9d4 <__cxa_finalize@plt>
     c24:	bl	b54 <deregister_tm_clones>
     c28:	ldr	r3, [pc, #28]	; c4c <__do_global_dtors_aux+0x64>
     c2c:	mov	r2, #1
     c30:	add	r3, pc, r3
     c34:	strb	r2, [r3]
     c38:	pop	{r4, pc}
     c3c:	.word	0x00011520
     c40:	.word	0x00011404
     c44:	.word	0x00000088
     c48:	.word	0x0001147c
     c4c:	.word	0x000114e0

00000c50 <frame_dummy>:
     c50:	b	b98 <register_tm_clones>

00000c54 <m_challenge>:
     c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c58:	add	fp, sp, #28
     c5c:	sub	sp, sp, #532	; 0x214
     c60:	mov	r0, #0
     c64:	mov	r4, r2
     c68:	str	r0, [sp, #20]
     c6c:	ldrb	r0, [r2, #57]	; 0x39
     c70:	tst	r0, #16
     c74:	bne	d54 <m_challenge+0x100>
     c78:	ldr	r9, [fp, #8]
     c7c:	ldr	r0, [r4, #432]	; 0x1b0
     c80:	ldr	r3, [r9, #4]
     c84:	ldrb	r1, [r3]
     c88:	cmp	r1, #43	; 0x2b
     c8c:	bne	d84 <m_challenge+0x130>
     c90:	ldr	r0, [r0, #284]	; 0x11c
     c94:	cmp	r0, #0
     c98:	beq	130c <m_challenge+0x6b8>
     c9c:	bl	9c8 <rb_current_time@plt>
     ca0:	ldr	r1, [r4, #432]	; 0x1b0
     ca4:	ldr	r1, [r1, #304]	; 0x130
     ca8:	sub	r0, r0, r1
     cac:	cmp	r0, #181	; 0xb5
     cb0:	blt	ef4 <m_challenge+0x2a0>
     cb4:	ldr	r0, [pc, #1856]	; 13fc <m_challenge+0x7a8>
     cb8:	add	r5, r4, #88	; 0x58
     cbc:	mov	r3, r5
     cc0:	ldr	r0, [pc, r0]
     cc4:	ldr	r1, [pc, #1844]	; 1400 <m_challenge+0x7ac>
     cc8:	add	r2, r0, #88	; 0x58
     ccc:	add	r1, pc, r1
     cd0:	mov	r0, r4
     cd4:	bl	9ec <sendto_one@plt>
     cd8:	ldr	r1, [r4, #24]
     cdc:	movw	r0, #291	; 0x123
     ce0:	add	r6, r4, #163	; 0xa3
     ce4:	add	r7, r4, #152	; 0x98
     ce8:	mov	r3, r5
     cec:	add	r0, r4, r0
     cf0:	ldr	r2, [r1, #32]
     cf4:	str	r0, [sp, #8]
     cf8:	str	r7, [sp]
     cfc:	str	r6, [sp, #4]
     d00:	mov	r0, #4
     d04:	ldr	r1, [pc, #1784]	; 1404 <m_challenge+0x7b0>
     d08:	add	r1, pc, r1
     d0c:	bl	ac4 <ilog@plt>
     d10:	ldr	r0, [pc, #1776]	; 1408 <m_challenge+0x7b4>
     d14:	ldr	r0, [pc, r0]
     d18:	ldr	r0, [r0, #84]	; 0x54
     d1c:	cmp	r0, #0
     d20:	beq	fdc <m_challenge+0x388>
     d24:	str	r7, [sp]
     d28:	str	r6, [sp, #4]
     d2c:	mov	r0, #256	; 0x100
     d30:	mov	r1, #256	; 0x100
     d34:	mov	r3, r5
     d38:	ldr	r2, [pc, #1740]	; 140c <m_challenge+0x7b8>
     d3c:	add	r2, pc, r2
     d40:	bl	a28 <sendto_realops_snomask@plt>
     d44:	ldr	r0, [r4, #432]	; 0x1b0
     d48:	cmp	r0, #0
     d4c:	bne	fe8 <m_challenge+0x394>
     d50:	b	130c <m_challenge+0x6b8>
     d54:	ldr	r0, [pc, #1688]	; 13f4 <m_challenge+0x7a0>
     d58:	add	r3, r4, #88	; 0x58
     d5c:	ldr	r0, [pc, r0]
     d60:	ldr	r1, [pc, #1680]	; 13f8 <m_challenge+0x7a4>
     d64:	add	r2, r0, #88	; 0x58
     d68:	add	r1, pc, r1
     d6c:	mov	r0, r4
     d70:	bl	9ec <sendto_one@plt>
     d74:	mov	r0, r4
     d78:	bl	a7c <send_oper_motd@plt>
     d7c:	sub	sp, fp, #28
     d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d84:	cmp	r0, #0
     d88:	beq	dcc <m_challenge+0x178>
     d8c:	ldr	r0, [r0, #284]	; 0x11c
     d90:	cmp	r0, #0
     d94:	beq	d9c <m_challenge+0x148>
     d98:	bl	9f8 <free@plt>
     d9c:	ldr	r1, [r4, #24]
     da0:	ldr	r0, [r1, #32]
     da4:	cmp	r0, #0
     da8:	beq	db4 <m_challenge+0x160>
     dac:	bl	9f8 <free@plt>
     db0:	ldr	r1, [r4, #24]
     db4:	ldr	r0, [r4, #432]	; 0x1b0
     db8:	mov	r2, #0
     dbc:	str	r2, [r0, #284]	; 0x11c
     dc0:	str	r2, [r1, #32]
     dc4:	str	r2, [r0, #304]	; 0x130
     dc8:	ldr	r3, [r9, #4]
     dcc:	movw	r0, #291	; 0x123
     dd0:	add	r6, r4, #152	; 0x98
     dd4:	add	r1, r4, #227	; 0xe3
     dd8:	add	r7, r4, r0
     ddc:	mov	r0, r6
     de0:	mov	r2, r7
     de4:	bl	b00 <find_oper_conf@plt>
     de8:	cmp	r0, #0
     dec:	beq	e7c <m_challenge+0x228>
     df0:	ldr	r8, [r0, #40]	; 0x28
     df4:	mov	r5, r0
     df8:	cmp	r8, #0
     dfc:	beq	10c8 <m_challenge+0x474>
     e00:	ldrb	r0, [r5, #22]
     e04:	tst	r0, #8
     e08:	beq	102c <m_challenge+0x3d8>
     e0c:	ldrb	r0, [r4, #57]	; 0x39
     e10:	tst	r0, #64	; 0x40
     e14:	bne	102c <m_challenge+0x3d8>
     e18:	ldr	r2, [pc, #1576]	; 1448 <m_challenge+0x7f4>
     e1c:	mov	r0, r4
     e20:	movw	r1, #491	; 0x1eb
     e24:	add	r2, pc, r2
     e28:	bl	a88 <sendto_one_numeric@plt>
     e2c:	add	r5, r4, #163	; 0xa3
     e30:	ldr	r2, [r9, #4]
     e34:	str	r6, [sp]
     e38:	add	r4, r4, #88	; 0x58
     e3c:	mov	r0, #4
     e40:	stmib	sp, {r5, r7}
     e44:	mov	r3, r4
     e48:	ldr	r1, [pc, #1532]	; 144c <m_challenge+0x7f8>
     e4c:	add	r1, pc, r1
     e50:	bl	ac4 <ilog@plt>
     e54:	ldr	r0, [pc, #1524]	; 1450 <m_challenge+0x7fc>
     e58:	ldr	r0, [pc, r0]
     e5c:	ldr	r0, [r0, #84]	; 0x54
     e60:	cmp	r0, #0
     e64:	beq	130c <m_challenge+0x6b8>
     e68:	str	r6, [sp]
     e6c:	str	r5, [sp, #4]
     e70:	ldr	r2, [pc, #1500]	; 1454 <m_challenge+0x800>
     e74:	add	r2, pc, r2
     e78:	b	10b0 <m_challenge+0x45c>
     e7c:	ldr	r2, [pc, #1460]	; 1438 <m_challenge+0x7e4>
     e80:	mov	r0, r4
     e84:	movw	r1, #491	; 0x1eb
     e88:	add	r2, pc, r2
     e8c:	bl	a88 <sendto_one_numeric@plt>
     e90:	add	r5, r4, #163	; 0xa3
     e94:	ldr	r2, [r9, #4]
     e98:	str	r6, [sp]
     e9c:	add	r4, r4, #88	; 0x58
     ea0:	mov	r0, #4
     ea4:	stmib	sp, {r5, r7}
     ea8:	mov	r3, r4
     eac:	ldr	r1, [pc, #1416]	; 143c <m_challenge+0x7e8>
     eb0:	add	r1, pc, r1
     eb4:	bl	ac4 <ilog@plt>
     eb8:	ldr	r0, [pc, #1408]	; 1440 <m_challenge+0x7ec>
     ebc:	ldr	r0, [pc, r0]
     ec0:	ldr	r0, [r0, #84]	; 0x54
     ec4:	cmp	r0, #0
     ec8:	beq	130c <m_challenge+0x6b8>
     ecc:	str	r6, [sp]
     ed0:	str	r5, [sp, #4]
     ed4:	ldr	r2, [pc, #1364]	; 1430 <m_challenge+0x7dc>
     ed8:	mov	r0, #256	; 0x100
     edc:	mov	r1, #256	; 0x100
     ee0:	add	r2, pc, r2
     ee4:	mov	r3, r4
     ee8:	bl	a28 <sendto_realops_snomask@plt>
     eec:	sub	sp, fp, #28
     ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ef4:	ldr	r0, [r9, #4]
     ef8:	add	r5, r0, #1
     efc:	mov	r0, r5
     f00:	str	r5, [r9, #4]
     f04:	bl	aa0 <strlen@plt>
     f08:	mov	r1, r0
     f0c:	add	r2, sp, #20
     f10:	mov	r0, r5
     f14:	bl	a34 <rb_base64_decode@plt>
     f18:	mov	r8, r0
     f1c:	ldr	r0, [sp, #20]
     f20:	cmp	r0, #20
     f24:	bne	f44 <m_challenge+0x2f0>
     f28:	ldr	r0, [r4, #432]	; 0x1b0
     f2c:	mov	r1, r8
     f30:	mov	r2, #20
     f34:	ldr	r0, [r0, #284]	; 0x11c
     f38:	bl	a94 <bcmp@plt>
     f3c:	cmp	r0, #0
     f40:	beq	10e0 <m_challenge+0x48c>
     f44:	ldr	r0, [pc, #1220]	; 1410 <m_challenge+0x7bc>
     f48:	add	r6, r4, #88	; 0x58
     f4c:	mov	r3, r6
     f50:	ldr	r0, [pc, r0]
     f54:	ldr	r1, [pc, #1208]	; 1414 <m_challenge+0x7c0>
     f58:	add	r2, r0, #88	; 0x58
     f5c:	add	r1, pc, r1
     f60:	mov	r0, r4
     f64:	bl	9ec <sendto_one@plt>
     f68:	ldr	r1, [r4, #24]
     f6c:	movw	r0, #291	; 0x123
     f70:	add	r5, r4, #152	; 0x98
     f74:	add	r7, r4, #163	; 0xa3
     f78:	mov	r3, r6
     f7c:	add	r0, r4, r0
     f80:	ldr	r2, [r1, #32]
     f84:	stm	sp, {r5, r7}
     f88:	str	r0, [sp, #8]
     f8c:	mov	r0, #4
     f90:	ldr	r1, [pc, #1152]	; 1418 <m_challenge+0x7c4>
     f94:	add	r1, pc, r1
     f98:	bl	ac4 <ilog@plt>
     f9c:	ldr	r0, [pc, #1144]	; 141c <m_challenge+0x7c8>
     fa0:	ldr	r0, [pc, r0]
     fa4:	ldr	r0, [r0, #84]	; 0x54
     fa8:	cmp	r0, #0
     fac:	beq	fcc <m_challenge+0x378>
     fb0:	stm	sp, {r5, r7}
     fb4:	mov	r0, #256	; 0x100
     fb8:	mov	r1, #256	; 0x100
     fbc:	mov	r3, r6
     fc0:	ldr	r2, [pc, #1112]	; 1420 <m_challenge+0x7cc>
     fc4:	add	r2, pc, r2
     fc8:	bl	a28 <sendto_realops_snomask@plt>
     fcc:	cmp	r8, #0
     fd0:	beq	fdc <m_challenge+0x388>
     fd4:	mov	r0, r8
     fd8:	bl	9f8 <free@plt>
     fdc:	ldr	r0, [r4, #432]	; 0x1b0
     fe0:	cmp	r0, #0
     fe4:	beq	130c <m_challenge+0x6b8>
     fe8:	ldr	r0, [r0, #284]	; 0x11c
     fec:	cmp	r0, #0
     ff0:	beq	ff8 <m_challenge+0x3a4>
     ff4:	bl	9f8 <free@plt>
     ff8:	ldr	r1, [r4, #24]
     ffc:	ldr	r0, [r1, #32]
    1000:	cmp	r0, #0
    1004:	beq	1010 <m_challenge+0x3bc>
    1008:	bl	9f8 <free@plt>
    100c:	ldr	r1, [r4, #24]
    1010:	ldr	r0, [r4, #432]	; 0x1b0
    1014:	mov	r2, #0
    1018:	str	r2, [r0, #284]	; 0x11c
    101c:	str	r2, [r1, #32]
    1020:	str	r2, [r0, #304]	; 0x130
    1024:	sub	sp, fp, #28
    1028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    102c:	ldr	r1, [r5, #16]
    1030:	cmp	r1, #0
    1034:	beq	11a8 <m_challenge+0x554>
    1038:	ldr	r0, [r4, #444]	; 0x1bc
    103c:	cmp	r0, #0
    1040:	beq	1050 <m_challenge+0x3fc>
    1044:	bl	a04 <rb_strcasecmp@plt>
    1048:	cmp	r0, #0
    104c:	beq	11a4 <m_challenge+0x550>
    1050:	ldr	r2, [pc, #1024]	; 1458 <m_challenge+0x804>
    1054:	mov	r0, r4
    1058:	movw	r1, #491	; 0x1eb
    105c:	add	r2, pc, r2
    1060:	bl	a88 <sendto_one_numeric@plt>
    1064:	add	r5, r4, #163	; 0xa3
    1068:	ldr	r2, [r9, #4]
    106c:	str	r6, [sp]
    1070:	add	r4, r4, #88	; 0x58
    1074:	mov	r0, #4
    1078:	stmib	sp, {r5, r7}
    107c:	mov	r3, r4
    1080:	ldr	r1, [pc, #980]	; 145c <m_challenge+0x808>
    1084:	add	r1, pc, r1
    1088:	bl	ac4 <ilog@plt>
    108c:	ldr	r0, [pc, #972]	; 1460 <m_challenge+0x80c>
    1090:	ldr	r0, [pc, r0]
    1094:	ldr	r0, [r0, #84]	; 0x54
    1098:	cmp	r0, #0
    109c:	beq	130c <m_challenge+0x6b8>
    10a0:	str	r6, [sp]
    10a4:	str	r5, [sp, #4]
    10a8:	ldr	r2, [pc, #948]	; 1464 <m_challenge+0x810>
    10ac:	add	r2, pc, r2
    10b0:	mov	r0, #256	; 0x100
    10b4:	mov	r1, #0
    10b8:	mov	r3, r4
    10bc:	bl	a28 <sendto_realops_snomask@plt>
    10c0:	sub	sp, fp, #28
    10c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10c8:	ldr	r1, [pc, #884]	; 1444 <m_challenge+0x7f0>
    10cc:	add	r1, pc, r1
    10d0:	mov	r0, r4
    10d4:	bl	ae8 <sendto_one_notice@plt>
    10d8:	sub	sp, fp, #28
    10dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10e0:	cmp	r8, #0
    10e4:	beq	10f0 <m_challenge+0x49c>
    10e8:	mov	r0, r8
    10ec:	bl	9f8 <free@plt>
    10f0:	movw	r0, #291	; 0x123
    10f4:	add	r5, r4, #152	; 0x98
    10f8:	add	r1, r4, #227	; 0xe3
    10fc:	add	r6, r4, r0
    1100:	ldr	r0, [r4, #24]
    1104:	mov	r2, r6
    1108:	ldr	r3, [r0, #32]
    110c:	mov	r0, r5
    1110:	bl	b00 <find_oper_conf@plt>
    1114:	cmp	r0, #0
    1118:	beq	1394 <m_challenge+0x740>
    111c:	mov	r7, r0
    1120:	ldr	r0, [r4, #432]	; 0x1b0
    1124:	cmp	r0, #0
    1128:	beq	1168 <m_challenge+0x514>
    112c:	ldr	r0, [r0, #284]	; 0x11c
    1130:	cmp	r0, #0
    1134:	beq	113c <m_challenge+0x4e8>
    1138:	bl	9f8 <free@plt>
    113c:	ldr	r1, [r4, #24]
    1140:	ldr	r0, [r1, #32]
    1144:	cmp	r0, #0
    1148:	beq	1154 <m_challenge+0x500>
    114c:	bl	9f8 <free@plt>
    1150:	ldr	r1, [r4, #24]
    1154:	ldr	r0, [r4, #432]	; 0x1b0
    1158:	mov	r2, #0
    115c:	str	r2, [r0, #284]	; 0x11c
    1160:	str	r2, [r1, #32]
    1164:	str	r2, [r0, #304]	; 0x130
    1168:	mov	r0, r4
    116c:	mov	r1, r7
    1170:	bl	b0c <oper_up@plt>
    1174:	ldr	r0, [r4, #24]
    1178:	add	r3, r4, #88	; 0x58
    117c:	ldr	r2, [r0, #32]
    1180:	add	r0, r4, #163	; 0xa3
    1184:	str	r5, [sp]
    1188:	stmib	sp, {r0, r6}
    118c:	mov	r0, #3
    1190:	ldr	r1, [pc, #668]	; 1434 <m_challenge+0x7e0>
    1194:	add	r1, pc, r1
    1198:	bl	ac4 <ilog@plt>
    119c:	sub	sp, fp, #28
    11a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11a4:	ldr	r8, [r5, #40]	; 0x28
    11a8:	cmp	r8, #0
    11ac:	beq	137c <m_challenge+0x728>
    11b0:	ldr	sl, [r4, #432]	; 0x1b0
    11b4:	add	r0, sp, #27
    11b8:	mov	r1, #128	; 0x80
    11bc:	bl	a58 <rb_get_random@plt>
    11c0:	cmp	r0, #0
    11c4:	beq	1334 <m_challenge+0x6e0>
    11c8:	sub	r6, fp, #128	; 0x80
    11cc:	mov	r0, r6
    11d0:	bl	ad0 <SHA1_Init@plt>
    11d4:	add	r1, sp, #27
    11d8:	mov	r0, r6
    11dc:	mov	r2, #128	; 0x80
    11e0:	bl	aac <SHA1_Update@plt>
    11e4:	mov	r0, #20
    11e8:	bl	a4c <malloc@plt>
    11ec:	mov	r1, r6
    11f0:	str	r0, [sl, #284]	; 0x11c
    11f4:	bl	b24 <SHA1_Final@plt>
    11f8:	mov	r0, r8
    11fc:	bl	a10 <RSA_size@plt>
    1200:	mov	r1, r0
    1204:	mov	r0, #1
    1208:	bl	9bc <calloc@plt>
    120c:	cmp	r0, #0
    1210:	beq	13f0 <m_challenge+0x79c>
    1214:	mov	r7, r0
    1218:	mov	r0, #4
    121c:	add	r9, sp, #27
    1220:	mov	r3, r8
    1224:	str	r0, [sp]
    1228:	mov	r0, #128	; 0x80
    122c:	mov	r1, r9
    1230:	mov	r2, r7
    1234:	bl	9e0 <RSA_public_encrypt@plt>
    1238:	cmn	r0, #1
    123c:	ble	1314 <m_challenge+0x6c0>
    1240:	mov	r1, r0
    1244:	mov	r0, r7
    1248:	bl	b18 <rb_base64_encode@plt>
    124c:	mov	r8, r0
    1250:	mov	r0, r7
    1254:	bl	9f8 <free@plt>
    1258:	bl	9c8 <rb_current_time@plt>
    125c:	ldr	r1, [r4, #432]	; 0x1b0
    1260:	add	r7, r4, #88	; 0x58
    1264:	str	r0, [r1, #304]	; 0x130
    1268:	ldr	r0, [pc, #512]	; 1470 <m_challenge+0x81c>
    126c:	ldr	r0, [pc, r0]
    1270:	str	r8, [sp, #16]
    1274:	add	r6, r0, #88	; 0x58
    1278:	mov	r0, r9
    127c:	mov	r1, r8
    1280:	movw	r2, #405	; 0x195
    1284:	bl	af4 <rb_strlcpy@plt>
    1288:	str	r9, [sp]
    128c:	mov	sl, r0
    1290:	mov	r0, r4
    1294:	mov	r2, r6
    1298:	mov	r3, r7
    129c:	ldr	r1, [pc, #464]	; 1474 <m_challenge+0x820>
    12a0:	add	r1, pc, r1
    12a4:	bl	9ec <sendto_one@plt>
    12a8:	lsr	r0, sl, #1
    12ac:	add	r8, r8, #404	; 0x194
    12b0:	cmp	r0, #202	; 0xca
    12b4:	bhi	1278 <m_challenge+0x624>
    12b8:	ldr	r1, [pc, #440]	; 1478 <m_challenge+0x824>
    12bc:	mov	r0, r4
    12c0:	mov	r2, r6
    12c4:	mov	r3, r7
    12c8:	add	r1, pc, r1
    12cc:	bl	9ec <sendto_one@plt>
    12d0:	ldr	r0, [sp, #16]
    12d4:	cmp	r0, #0
    12d8:	beq	12e0 <m_challenge+0x68c>
    12dc:	bl	9f8 <free@plt>
    12e0:	ldr	r5, [r5]
    12e4:	mov	r0, r5
    12e8:	bl	aa0 <strlen@plt>
    12ec:	add	r0, r0, #1
    12f0:	bl	a4c <malloc@plt>
    12f4:	cmp	r0, #0
    12f8:	beq	13f0 <m_challenge+0x79c>
    12fc:	mov	r1, r5
    1300:	bl	a40 <strcpy@plt>
    1304:	ldr	r1, [r4, #24]
    1308:	str	r0, [r1, #32]
    130c:	sub	sp, fp, #28
    1310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1314:	mov	r0, r7
    1318:	bl	9f8 <free@plt>
    131c:	ldr	r0, [sl, #284]	; 0x11c
    1320:	cmp	r0, #0
    1324:	beq	132c <m_challenge+0x6d8>
    1328:	bl	9f8 <free@plt>
    132c:	mov	r0, #0
    1330:	str	r0, [sl, #284]	; 0x11c
    1334:	mov	r0, #2
    1338:	mov	r1, #0
    133c:	mov	r2, #0
    1340:	bl	a70 <OPENSSL_init_crypto@plt>
    1344:	ldr	r5, [pc, #284]	; 1468 <m_challenge+0x814>
    1348:	mov	r6, #100	; 0x64
    134c:	add	r5, pc, r5
    1350:	bl	adc <ERR_get_error@plt>
    1354:	cmp	r0, #0
    1358:	beq	137c <m_challenge+0x728>
    135c:	mov	r1, #0
    1360:	bl	ab8 <ERR_error_string@plt>
    1364:	mov	r2, r0
    1368:	mov	r0, #0
    136c:	mov	r1, r5
    1370:	bl	ac4 <ilog@plt>
    1374:	subs	r6, r6, #1
    1378:	bne	1350 <m_challenge+0x6fc>
    137c:	ldr	r1, [pc, #232]	; 146c <m_challenge+0x818>
    1380:	add	r1, pc, r1
    1384:	mov	r0, r4
    1388:	bl	ae8 <sendto_one_notice@plt>
    138c:	sub	sp, fp, #28
    1390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1394:	ldr	r2, [pc, #136]	; 1424 <m_challenge+0x7d0>
    1398:	mov	r0, r4
    139c:	movw	r1, #491	; 0x1eb
    13a0:	add	r2, pc, r2
    13a4:	bl	a88 <sendto_one_numeric@plt>
    13a8:	ldr	r0, [r4, #24]
    13ac:	add	r7, r4, #163	; 0xa3
    13b0:	add	r4, r4, #88	; 0x58
    13b4:	mov	r3, r4
    13b8:	ldr	r2, [r0, #32]
    13bc:	stm	sp, {r5, r7}
    13c0:	str	r6, [sp, #8]
    13c4:	mov	r0, #4
    13c8:	ldr	r1, [pc, #88]	; 1428 <m_challenge+0x7d4>
    13cc:	add	r1, pc, r1
    13d0:	bl	ac4 <ilog@plt>
    13d4:	ldr	r0, [pc, #80]	; 142c <m_challenge+0x7d8>
    13d8:	ldr	r0, [pc, r0]
    13dc:	ldr	r0, [r0, #84]	; 0x54
    13e0:	cmp	r0, #0
    13e4:	beq	130c <m_challenge+0x6b8>
    13e8:	stm	sp, {r5, r7}
    13ec:	b	ed4 <m_challenge+0x280>
    13f0:	bl	a1c <rb_outofmemory@plt>
    13f4:	.word	0x00011334
    13f8:	.word	0x00000714
    13fc:	.word	0x000113d0
    1400:	.word	0x0000083c
    1404:	.word	0x0000081f
    1408:	.word	0x00011380
    140c:	.word	0x00000815
    1410:	.word	0x00011140
    1414:	.word	0x000005ac
    1418:	.word	0x000005e5
    141c:	.word	0x000110f4
    1420:	.word	0x000005de
    1424:	.word	0x00000229
    1428:	.word	0x00000236
    142c:	.word	0x00010cbc
    1430:	.word	0x00000746
    1434:	.word	0x000004c9
    1438:	.word	0x00000741
    143c:	.word	0x00000752
    1440:	.word	0x000111d8
    1444:	.word	0x000005aa
    1448:	.word	0x000007a5
    144c:	.word	0x0000086e
    1450:	.word	0x0001123c
    1454:	.word	0x00000883
    1458:	.word	0x0000056d
    145c:	.word	0x000006ac
    1460:	.word	0x00011004
    1464:	.word	0x000006d3
    1468:	.word	0x000004ca
    146c:	.word	0x00000477
    1470:	.word	0x00010e24
    1474:	.word	0x0000052b
    1478:	.word	0x00000512

Disassembly of section .fini:

0000147c <_fini>:
    147c:	push	{r3, lr}
    1480:	pop	{r3, pc}
