
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

000111a4 <.init>:
   111a4:	push	{r3, lr}
   111a8:	bl	11534 <__assert_fail@plt+0x4c>
   111ac:	pop	{r3, pc}

Disassembly of section .plt:

000111b0 <fstatfs64@plt-0x14>:
   111b0:	push	{lr}		; (str lr, [sp, #-4]!)
   111b4:	ldr	lr, [pc, #4]	; 111c0 <fstatfs64@plt-0x4>
   111b8:	add	lr, pc, lr
   111bc:	ldr	pc, [lr, #8]!
   111c0:	andeq	fp, r1, r0, asr #28

000111c4 <fstatfs64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #110592	; 0x1b000
   111cc:	ldr	pc, [ip, #3648]!	; 0xe40

000111d0 <calloc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #110592	; 0x1b000
   111d8:	ldr	pc, [ip, #3640]!	; 0xe38

000111dc <fputs_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #110592	; 0x1b000
   111e4:	ldr	pc, [ip, #3632]!	; 0xe30

000111e8 <raise@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #110592	; 0x1b000
   111f0:	ldr	pc, [ip, #3624]!	; 0xe28

000111f4 <__getdelim@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #110592	; 0x1b000
   111fc:	ldr	pc, [ip, #3616]!	; 0xe20

00011200 <strcmp@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #110592	; 0x1b000
   11208:	ldr	pc, [ip, #3608]!	; 0xe18

0001120c <fflush@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #110592	; 0x1b000
   11214:	ldr	pc, [ip, #3600]!	; 0xe10

00011218 <unlinkat@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #110592	; 0x1b000
   11220:	ldr	pc, [ip, #3592]!	; 0xe08

00011224 <memmove@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #110592	; 0x1b000
   1122c:	ldr	pc, [ip, #3584]!	; 0xe00

00011230 <free@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #110592	; 0x1b000
   11238:	ldr	pc, [ip, #3576]!	; 0xdf8

0001123c <faccessat@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #110592	; 0x1b000
   11244:	ldr	pc, [ip, #3568]!	; 0xdf0

00011248 <_exit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #110592	; 0x1b000
   11250:	ldr	pc, [ip, #3560]!	; 0xde8

00011254 <memcpy@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #110592	; 0x1b000
   1125c:	ldr	pc, [ip, #3552]!	; 0xde0

00011260 <mbsinit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #110592	; 0x1b000
   11268:	ldr	pc, [ip, #3544]!	; 0xdd8

0001126c <dcgettext@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #110592	; 0x1b000
   11274:	ldr	pc, [ip, #3536]!	; 0xdd0

00011278 <realloc@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #110592	; 0x1b000
   11280:	ldr	pc, [ip, #3528]!	; 0xdc8

00011284 <textdomain@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #110592	; 0x1b000
   1128c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011290 <geteuid@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #110592	; 0x1b000
   11298:	ldr	pc, [ip, #3512]!	; 0xdb8

0001129c <__fxstatat64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #110592	; 0x1b000
   112a4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112a8 <iswprint@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #110592	; 0x1b000
   112b0:	ldr	pc, [ip, #3496]!	; 0xda8

000112b4 <__fxstat64@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #110592	; 0x1b000
   112bc:	ldr	pc, [ip, #3488]!	; 0xda0

000112c0 <fwrite@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #110592	; 0x1b000
   112c8:	ldr	pc, [ip, #3480]!	; 0xd98

000112cc <lseek64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #110592	; 0x1b000
   112d4:	ldr	pc, [ip, #3472]!	; 0xd90

000112d8 <__ctype_get_mb_cur_max@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #110592	; 0x1b000
   112e0:	ldr	pc, [ip, #3464]!	; 0xd88

000112e4 <__fpending@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #110592	; 0x1b000
   112ec:	ldr	pc, [ip, #3456]!	; 0xd80

000112f0 <mbrtowc@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #110592	; 0x1b000
   112f8:	ldr	pc, [ip, #3448]!	; 0xd78

000112fc <error@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #110592	; 0x1b000
   11304:	ldr	pc, [ip, #3440]!	; 0xd70

00011308 <open64@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #110592	; 0x1b000
   11310:	ldr	pc, [ip, #3432]!	; 0xd68

00011314 <malloc@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #110592	; 0x1b000
   1131c:	ldr	pc, [ip, #3424]!	; 0xd60

00011320 <__libc_start_main@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #110592	; 0x1b000
   11328:	ldr	pc, [ip, #3416]!	; 0xd58

0001132c <__freading@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #110592	; 0x1b000
   11334:	ldr	pc, [ip, #3408]!	; 0xd50

00011338 <__gmon_start__@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #110592	; 0x1b000
   11340:	ldr	pc, [ip, #3400]!	; 0xd48

00011344 <getopt_long@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #110592	; 0x1b000
   1134c:	ldr	pc, [ip, #3392]!	; 0xd40

00011350 <__ctype_b_loc@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #110592	; 0x1b000
   11358:	ldr	pc, [ip, #3384]!	; 0xd38

0001135c <exit@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #110592	; 0x1b000
   11364:	ldr	pc, [ip, #3376]!	; 0xd30

00011368 <bcmp@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #110592	; 0x1b000
   11370:	ldr	pc, [ip, #3368]!	; 0xd28

00011374 <strlen@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #110592	; 0x1b000
   1137c:	ldr	pc, [ip, #3360]!	; 0xd20

00011380 <openat64@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #110592	; 0x1b000
   11388:	ldr	pc, [ip, #3352]!	; 0xd18

0001138c <__errno_location@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #110592	; 0x1b000
   11394:	ldr	pc, [ip, #3344]!	; 0xd10

00011398 <__cxa_atexit@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #110592	; 0x1b000
   113a0:	ldr	pc, [ip, #3336]!	; 0xd08

000113a4 <memset@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #110592	; 0x1b000
   113ac:	ldr	pc, [ip, #3328]!	; 0xd00

000113b0 <__printf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #110592	; 0x1b000
   113b8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113bc <fileno@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #110592	; 0x1b000
   113c4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113c8 <__fprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #110592	; 0x1b000
   113d0:	ldr	pc, [ip, #3304]!	; 0xce8

000113d4 <fclose@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #110592	; 0x1b000
   113dc:	ldr	pc, [ip, #3296]!	; 0xce0

000113e0 <fseeko64@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #110592	; 0x1b000
   113e8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113ec <fcntl64@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #110592	; 0x1b000
   113f4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113f8 <rpmatch@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #110592	; 0x1b000
   11400:	ldr	pc, [ip, #3272]!	; 0xcc8

00011404 <__overflow@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #110592	; 0x1b000
   1140c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011410 <setlocale@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #110592	; 0x1b000
   11418:	ldr	pc, [ip, #3256]!	; 0xcb8

0001141c <strrchr@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #110592	; 0x1b000
   11424:	ldr	pc, [ip, #3248]!	; 0xcb0

00011428 <nl_langinfo@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #110592	; 0x1b000
   11430:	ldr	pc, [ip, #3240]!	; 0xca8

00011434 <readdir64@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #110592	; 0x1b000
   1143c:	ldr	pc, [ip, #3232]!	; 0xca0

00011440 <fdopendir@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #110592	; 0x1b000
   11448:	ldr	pc, [ip, #3224]!	; 0xc98

0001144c <dirfd@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #110592	; 0x1b000
   11454:	ldr	pc, [ip, #3216]!	; 0xc90

00011458 <fchdir@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #110592	; 0x1b000
   11460:	ldr	pc, [ip, #3208]!	; 0xc88

00011464 <qsort@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #110592	; 0x1b000
   1146c:	ldr	pc, [ip, #3200]!	; 0xc80

00011470 <bindtextdomain@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #110592	; 0x1b000
   11478:	ldr	pc, [ip, #3192]!	; 0xc78

0001147c <__xstat64@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #110592	; 0x1b000
   11484:	ldr	pc, [ip, #3184]!	; 0xc70

00011488 <isatty@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #110592	; 0x1b000
   11490:	ldr	pc, [ip, #3176]!	; 0xc68

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #110592	; 0x1b000
   1149c:	ldr	pc, [ip, #3168]!	; 0xc60

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #110592	; 0x1b000
   114a8:	ldr	pc, [ip, #3160]!	; 0xc58

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #110592	; 0x1b000
   114b4:	ldr	pc, [ip, #3152]!	; 0xc50

000114b8 <__lxstat64@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #110592	; 0x1b000
   114c0:	ldr	pc, [ip, #3144]!	; 0xc48

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #110592	; 0x1b000
   114cc:	ldr	pc, [ip, #3136]!	; 0xc40

000114d0 <closedir@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #110592	; 0x1b000
   114d8:	ldr	pc, [ip, #3128]!	; 0xc38

000114dc <__mempcpy_chk@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #110592	; 0x1b000
   114e4:	ldr	pc, [ip, #3120]!	; 0xc30

000114e8 <__assert_fail@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #110592	; 0x1b000
   114f0:	ldr	pc, [ip, #3112]!	; 0xc28

Disassembly of section .text:

000114f8 <.text>:
   114f8:	mov	fp, #0
   114fc:	mov	lr, #0
   11500:	pop	{r1}		; (ldr r1, [sp], #4)
   11504:	mov	r2, sp
   11508:	push	{r2}		; (str r2, [sp, #-4]!)
   1150c:	push	{r0}		; (str r0, [sp, #-4]!)
   11510:	ldr	ip, [pc, #16]	; 11528 <__assert_fail@plt+0x40>
   11514:	push	{ip}		; (str ip, [sp, #-4]!)
   11518:	ldr	r0, [pc, #12]	; 1152c <__assert_fail@plt+0x44>
   1151c:	ldr	r3, [pc, #12]	; 11530 <__assert_fail@plt+0x48>
   11520:	bl	11320 <__libc_start_main@plt>
   11524:	bl	114a0 <abort@plt>
   11528:	andeq	fp, r1, r0, rrx
   1152c:	strdeq	r1, [r1], -ip
   11530:	andeq	fp, r1, r0
   11534:	ldr	r3, [pc, #20]	; 11550 <__assert_fail@plt+0x68>
   11538:	ldr	r2, [pc, #20]	; 11554 <__assert_fail@plt+0x6c>
   1153c:	add	r3, pc, r3
   11540:	ldr	r2, [r3, r2]
   11544:	cmp	r2, #0
   11548:	bxeq	lr
   1154c:	b	11338 <__gmon_start__@plt>
   11550:			; <UNDEFINED> instruction: 0x0001babc
   11554:	andeq	r0, r0, ip, lsl r1
   11558:	ldr	r0, [pc, #24]	; 11578 <__assert_fail@plt+0x90>
   1155c:	ldr	r3, [pc, #24]	; 1157c <__assert_fail@plt+0x94>
   11560:	cmp	r3, r0
   11564:	bxeq	lr
   11568:	ldr	r3, [pc, #16]	; 11580 <__assert_fail@plt+0x98>
   1156c:	cmp	r3, #0
   11570:	bxeq	lr
   11574:	bx	r3
   11578:	andeq	sp, r2, r8, ror r1
   1157c:	andeq	sp, r2, r8, ror r1
   11580:	andeq	r0, r0, r0
   11584:	ldr	r0, [pc, #36]	; 115b0 <__assert_fail@plt+0xc8>
   11588:	ldr	r1, [pc, #36]	; 115b4 <__assert_fail@plt+0xcc>
   1158c:	sub	r1, r1, r0
   11590:	asr	r1, r1, #2
   11594:	add	r1, r1, r1, lsr #31
   11598:	asrs	r1, r1, #1
   1159c:	bxeq	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <__assert_fail@plt+0xd0>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	andeq	sp, r2, r8, ror r1
   115b4:	andeq	sp, r2, r8, ror r1
   115b8:	andeq	r0, r0, r0
   115bc:	push	{r4, lr}
   115c0:	ldr	r4, [pc, #24]	; 115e0 <__assert_fail@plt+0xf8>
   115c4:	ldrb	r3, [r4]
   115c8:	cmp	r3, #0
   115cc:	popne	{r4, pc}
   115d0:	bl	11558 <__assert_fail@plt+0x70>
   115d4:	mov	r3, #1
   115d8:	strb	r3, [r4]
   115dc:	pop	{r4, pc}
   115e0:	muleq	r2, ip, r1
   115e4:	b	11584 <__assert_fail@plt+0x9c>
   115e8:	push	{fp, lr}
   115ec:	mov	fp, sp
   115f0:	sub	sp, sp, #56	; 0x38
   115f4:	mov	r4, r0
   115f8:	cmp	r0, #0
   115fc:	bne	118b8 <__assert_fail@plt+0x3d0>
   11600:	movw	r1, #45235	; 0xb0b3
   11604:	mov	r0, #0
   11608:	mov	r2, #5
   1160c:	movt	r1, #1
   11610:	bl	1126c <dcgettext@plt>
   11614:	movw	r5, #53692	; 0xd1bc
   11618:	mov	r1, r0
   1161c:	mov	r0, #1
   11620:	movt	r5, #2
   11624:	ldr	r2, [r5]
   11628:	bl	113b0 <__printf_chk@plt>
   1162c:	movw	r1, #45268	; 0xb0d4
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	1126c <dcgettext@plt>
   11640:	movw	r7, #53652	; 0xd194
   11644:	movt	r7, #2
   11648:	ldr	r1, [r7]
   1164c:	bl	111dc <fputs_unlocked@plt>
   11650:	movw	r1, #45428	; 0xb174
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	movt	r1, #1
   11660:	bl	1126c <dcgettext@plt>
   11664:	ldr	r1, [r7]
   11668:	bl	111dc <fputs_unlocked@plt>
   1166c:	movw	r1, #45804	; 0xb2ec
   11670:	mov	r0, #0
   11674:	mov	r2, #5
   11678:	movt	r1, #1
   1167c:	bl	1126c <dcgettext@plt>
   11680:	ldr	r1, [r7]
   11684:	bl	111dc <fputs_unlocked@plt>
   11688:	movw	r1, #46028	; 0xb3cc
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	movt	r1, #1
   11698:	bl	1126c <dcgettext@plt>
   1169c:	ldr	r1, [r7]
   116a0:	bl	111dc <fputs_unlocked@plt>
   116a4:	movw	r1, #46282	; 0xb4ca
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	movt	r1, #1
   116b4:	bl	1126c <dcgettext@plt>
   116b8:	ldr	r1, [r7]
   116bc:	bl	111dc <fputs_unlocked@plt>
   116c0:	movw	r1, #46457	; 0xb579
   116c4:	mov	r0, #0
   116c8:	mov	r2, #5
   116cc:	movt	r1, #1
   116d0:	bl	1126c <dcgettext@plt>
   116d4:	ldr	r1, [r7]
   116d8:	bl	111dc <fputs_unlocked@plt>
   116dc:	movw	r1, #46502	; 0xb5a6
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	movt	r1, #1
   116ec:	bl	1126c <dcgettext@plt>
   116f0:	ldr	r1, [r7]
   116f4:	bl	111dc <fputs_unlocked@plt>
   116f8:	movw	r1, #46556	; 0xb5dc
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	1126c <dcgettext@plt>
   1170c:	ldr	r1, [r7]
   11710:	bl	111dc <fputs_unlocked@plt>
   11714:	movw	r1, #46711	; 0xb677
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #1
   11724:	bl	1126c <dcgettext@plt>
   11728:	ldr	r2, [r5]
   1172c:	mov	r1, r0
   11730:	mov	r0, #1
   11734:	mov	r3, r2
   11738:	bl	113b0 <__printf_chk@plt>
   1173c:	movw	r1, #46833	; 0xb6f1
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #1
   1174c:	bl	1126c <dcgettext@plt>
   11750:	ldr	r1, [r7]
   11754:	bl	111dc <fputs_unlocked@plt>
   11758:	movw	r0, #48240	; 0xbc70
   1175c:	mov	r2, #48	; 0x30
   11760:	mov	r6, sp
   11764:	movw	r5, #47062	; 0xb7d6
   11768:	movt	r0, #1
   1176c:	movt	r5, #1
   11770:	add	r1, r0, #32
   11774:	add	r3, r0, #16
   11778:	vld1.64	{d18-d19}, [r0], r2
   1177c:	vld1.64	{d16-d17}, [r1]
   11780:	vld1.64	{d20-d21}, [r3]
   11784:	vldr	d22, [r0]
   11788:	add	r1, r6, #32
   1178c:	add	r0, r6, #16
   11790:	vst1.64	{d16-d17}, [r1]
   11794:	movw	r1, #47538	; 0xb9b2
   11798:	vst1.64	{d20-d21}, [r0]
   1179c:	mov	r0, r6
   117a0:	movt	r1, #1
   117a4:	vst1.64	{d18-d19}, [r0], r2
   117a8:	vstr	d22, [r0]
   117ac:	mov	r0, r5
   117b0:	bl	11200 <strcmp@plt>
   117b4:	cmp	r0, #0
   117b8:	ldrne	r1, [r6, #8]!
   117bc:	cmpne	r1, #0
   117c0:	bne	117ac <__assert_fail@plt+0x2c4>
   117c4:	movw	r1, #47633	; 0xba11
   117c8:	ldr	r6, [r6, #4]
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #1
   117d8:	bl	1126c <dcgettext@plt>
   117dc:	movw	r2, #47229	; 0xb87d
   117e0:	movw	r3, #47656	; 0xba28
   117e4:	mov	r1, r0
   117e8:	mov	r0, #1
   117ec:	movt	r2, #1
   117f0:	movt	r3, #1
   117f4:	bl	113b0 <__printf_chk@plt>
   117f8:	cmp	r6, #0
   117fc:	mov	r0, #5
   11800:	mov	r1, #0
   11804:	moveq	r6, r5
   11808:	bl	11410 <setlocale@plt>
   1180c:	cmp	r0, #0
   11810:	beq	11848 <__assert_fail@plt+0x360>
   11814:	movw	r1, #47696	; 0xba50
   11818:	mov	r2, #3
   1181c:	movt	r1, #1
   11820:	bl	11494 <strncmp@plt>
   11824:	cmp	r0, #0
   11828:	beq	11848 <__assert_fail@plt+0x360>
   1182c:	movw	r1, #47700	; 0xba54
   11830:	mov	r0, #0
   11834:	mov	r2, #5
   11838:	movt	r1, #1
   1183c:	bl	1126c <dcgettext@plt>
   11840:	ldr	r1, [r7]
   11844:	bl	111dc <fputs_unlocked@plt>
   11848:	movw	r1, #47771	; 0xba9b
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	movt	r1, #1
   11858:	bl	1126c <dcgettext@plt>
   1185c:	movw	r2, #47656	; 0xba28
   11860:	mov	r1, r0
   11864:	mov	r0, #1
   11868:	mov	r3, r5
   1186c:	movt	r2, #1
   11870:	bl	113b0 <__printf_chk@plt>
   11874:	movw	r1, #47798	; 0xbab6
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #1
   11884:	bl	1126c <dcgettext@plt>
   11888:	mov	r1, r0
   1188c:	movw	r0, #47566	; 0xb9ce
   11890:	movw	r3, #47848	; 0xbae8
   11894:	cmp	r6, r5
   11898:	mov	r2, r6
   1189c:	movt	r0, #1
   118a0:	movt	r3, #1
   118a4:	moveq	r3, r0
   118a8:	mov	r0, #1
   118ac:	bl	113b0 <__printf_chk@plt>
   118b0:	mov	r0, r4
   118b4:	bl	1135c <exit@plt>
   118b8:	movw	r0, #53640	; 0xd188
   118bc:	movw	r1, #45196	; 0xb08c
   118c0:	mov	r2, #5
   118c4:	movt	r0, #2
   118c8:	movt	r1, #1
   118cc:	ldr	r5, [r0]
   118d0:	mov	r0, #0
   118d4:	bl	1126c <dcgettext@plt>
   118d8:	mov	r2, r0
   118dc:	movw	r0, #53692	; 0xd1bc
   118e0:	mov	r1, #1
   118e4:	movt	r0, #2
   118e8:	ldr	r3, [r0]
   118ec:	mov	r0, r5
   118f0:	bl	113c8 <__fprintf_chk@plt>
   118f4:	mov	r0, r4
   118f8:	bl	1135c <exit@plt>
   118fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11900:	add	fp, sp, #28
   11904:	sub	sp, sp, #52	; 0x34
   11908:	mov	r5, r0
   1190c:	ldr	r0, [r1]
   11910:	mov	r4, r1
   11914:	bl	17990 <__assert_fail@plt+0x64a8>
   11918:	movw	r1, #47848	; 0xbae8
   1191c:	mov	r0, #6
   11920:	movt	r1, #1
   11924:	bl	11410 <setlocale@plt>
   11928:	movw	r6, #47233	; 0xb881
   1192c:	movw	r1, #47065	; 0xb7d9
   11930:	movt	r6, #1
   11934:	movt	r1, #1
   11938:	mov	r0, r6
   1193c:	bl	11470 <bindtextdomain@plt>
   11940:	mov	r0, r6
   11944:	bl	11284 <textdomain@plt>
   11948:	movw	r0, #13908	; 0x3654
   1194c:	movt	r0, #1
   11950:	bl	1b064 <__assert_fail@plt+0x9b7c>
   11954:	mov	r8, #0
   11958:	mov	r0, #4
   1195c:	strb	r8, [sp, #42]	; 0x2a
   11960:	str	r0, [sp, #36]	; 0x24
   11964:	mov	r0, #0
   11968:	strb	r8, [sp, #32]
   1196c:	strb	r8, [sp, #48]	; 0x30
   11970:	str	r8, [sp, #44]	; 0x2c
   11974:	strh	r8, [sp, #40]	; 0x28
   11978:	bl	11488 <isatty@plt>
   1197c:	cmp	r0, #0
   11980:	movw	r6, #47089	; 0xb7f1
   11984:	movw	r3, #47992	; 0xbb78
   11988:	strh	r8, [sp, #50]	; 0x32
   1198c:	mov	sl, #0
   11990:	movwne	r0, #1
   11994:	movt	r6, #1
   11998:	movt	r3, #1
   1199c:	strb	r0, [sp, #49]	; 0x31
   119a0:	mov	r0, #0
   119a4:	str	r0, [sp, #24]
   119a8:	mov	r0, #0
   119ac:	str	r0, [sp, #28]
   119b0:	mov	r0, #1
   119b4:	str	r0, [sp, #20]
   119b8:	mov	r0, r5
   119bc:	mov	r1, r4
   119c0:	mov	r2, r6
   119c4:	str	r8, [sp]
   119c8:	mov	r9, r3
   119cc:	bl	11344 <getopt_long@plt>
   119d0:	cmp	r0, #72	; 0x48
   119d4:	ble	11c74 <__assert_fail@plt+0x78c>
   119d8:	sub	r1, r0, #73	; 0x49
   119dc:	mov	r7, r6
   119e0:	cmp	r1, #45	; 0x2d
   119e4:	bhi	11ac4 <__assert_fail@plt+0x5dc>
   119e8:	add	r0, pc, #8
   119ec:	mov	r6, r7
   119f0:	mov	r3, r9
   119f4:	ldr	pc, [r0, r1, lsl #2]
   119f8:	andeq	r1, r1, r4, lsl #23
   119fc:	andeq	r1, r1, r0, ror #29
   11a00:	andeq	r1, r1, r0, ror #29
   11a04:	andeq	r1, r1, r0, ror #29
   11a08:	andeq	r1, r1, r0, ror #29
   11a0c:	andeq	r1, r1, r0, ror #29
   11a10:	andeq	r1, r1, r0, ror #29
   11a14:	andeq	r1, r1, r0, ror #29
   11a18:	andeq	r1, r1, r0, ror #29
   11a1c:			; <UNDEFINED> instruction: 0x00011ab0
   11a20:	andeq	r1, r1, r0, ror #29
   11a24:	andeq	r1, r1, r0, ror #29
   11a28:	andeq	r1, r1, r0, ror #29
   11a2c:	andeq	r1, r1, r0, ror #29
   11a30:	andeq	r1, r1, r0, ror #29
   11a34:	andeq	r1, r1, r0, ror #29
   11a38:	andeq	r1, r1, r0, ror #29
   11a3c:	andeq	r1, r1, r0, ror #29
   11a40:	andeq	r1, r1, r0, ror #29
   11a44:	andeq	r1, r1, r0, ror #29
   11a48:	andeq	r1, r1, r0, ror #29
   11a4c:	andeq	r1, r1, r0, ror #29
   11a50:	andeq	r1, r1, r0, ror #29
   11a54:	andeq	r1, r1, r0, ror #29
   11a58:	andeq	r1, r1, r0, ror #29
   11a5c:	andeq	r1, r1, r0, ror #29
   11a60:	andeq	r1, r1, r0, ror #29
   11a64:	andeq	r1, r1, r8, asr #23
   11a68:	andeq	r1, r1, r0, ror #29
   11a6c:	andeq	r1, r1, ip, lsr #23
   11a70:	andeq	r1, r1, r0, ror #29
   11a74:	andeq	r1, r1, r0, ror #29
   11a78:	andeq	r1, r1, r4, ror fp
   11a7c:	andeq	r1, r1, r0, ror #29
   11a80:	andeq	r1, r1, r0, ror #29
   11a84:	andeq	r1, r1, r0, ror #29
   11a88:	andeq	r1, r1, r0, ror #29
   11a8c:	andeq	r1, r1, r0, ror #29
   11a90:	andeq	r1, r1, r0, ror #29
   11a94:	andeq	r1, r1, r0, ror #29
   11a98:	andeq	r1, r1, r0, ror #29
   11a9c:			; <UNDEFINED> instruction: 0x00011ab0
   11aa0:	andeq	r1, r1, r0, ror #29
   11aa4:	andeq	r1, r1, r0, ror #29
   11aa8:	andeq	r1, r1, r0, ror #29
   11aac:	ldrdeq	r1, [r1], -r4
   11ab0:	mov	r1, #1
   11ab4:	mov	r0, #1
   11ab8:	str	r0, [sp, #24]
   11abc:	strb	r1, [sp, #41]	; 0x29
   11ac0:	b	119b8 <__assert_fail@plt+0x4d0>
   11ac4:	sub	r0, r0, #256	; 0x100
   11ac8:	cmp	r0, #4
   11acc:	bhi	11ee0 <__assert_fail@plt+0x9f8>
   11ad0:	add	r1, pc, #8
   11ad4:	mov	r6, r7
   11ad8:	mov	r3, r9
   11adc:	ldr	pc, [r1, r0, lsl #2]
   11ae0:	strdeq	r1, [r1], -r4
   11ae4:	andeq	r1, r1, r8, ror #24
   11ae8:	andeq	r1, r1, r0, ror #23
   11aec:	andeq	r1, r1, ip, lsl ip
   11af0:	andeq	r1, r1, r0, lsr #23
   11af4:	movw	r0, #53656	; 0xd198
   11af8:	movt	r0, #2
   11afc:	ldr	r1, [r0]
   11b00:	cmp	r1, #0
   11b04:	beq	11b74 <__assert_fail@plt+0x68c>
   11b08:	movw	r0, #53548	; 0xd12c
   11b0c:	mov	r2, #4
   11b10:	movw	r3, #48184	; 0xbc38
   11b14:	movt	r0, #2
   11b18:	str	r2, [sp]
   11b1c:	movw	r2, #48208	; 0xbc50
   11b20:	movt	r3, #1
   11b24:	movt	r2, #1
   11b28:	ldr	r0, [r0]
   11b2c:	str	r0, [sp, #4]
   11b30:	mov	r0, #1
   11b34:	str	r0, [sp, #8]
   11b38:	movw	r0, #47097	; 0xb7f9
   11b3c:	movt	r0, #1
   11b40:	bl	133f8 <__assert_fail@plt+0x1f10>
   11b44:	movw	r1, #48184	; 0xbc38
   11b48:	mov	r3, r9
   11b4c:	mov	r6, r7
   11b50:	movt	r1, #1
   11b54:	ldr	r0, [r1, r0, lsl #2]
   11b58:	cmp	r0, #2
   11b5c:	beq	11b74 <__assert_fail@plt+0x68c>
   11b60:	cmp	r0, #1
   11b64:	beq	11b84 <__assert_fail@plt+0x69c>
   11b68:	cmp	r0, #0
   11b6c:	bne	119b8 <__assert_fail@plt+0x4d0>
   11b70:	b	11bb4 <__assert_fail@plt+0x6cc>
   11b74:	mov	sl, #0
   11b78:	mov	r0, #3
   11b7c:	strb	sl, [sp, #32]
   11b80:	b	11bb8 <__assert_fail@plt+0x6d0>
   11b84:	mov	sl, #0
   11b88:	mov	r0, #4
   11b8c:	strb	sl, [sp, #32]
   11b90:	str	r0, [sp, #36]	; 0x24
   11b94:	mov	r0, #1
   11b98:	str	r0, [sp, #28]
   11b9c:	b	119b8 <__assert_fail@plt+0x4d0>
   11ba0:	mov	r0, #1
   11ba4:	strb	r0, [sp, #49]	; 0x31
   11ba8:	b	119b8 <__assert_fail@plt+0x4d0>
   11bac:	mov	sl, #1
   11bb0:	strb	sl, [sp, #32]
   11bb4:	mov	r0, #5
   11bb8:	str	r0, [sp, #36]	; 0x24
   11bbc:	mov	r0, #0
   11bc0:	str	r0, [sp, #28]
   11bc4:	b	119b8 <__assert_fail@plt+0x4d0>
   11bc8:	mov	r0, #1
   11bcc:	strb	r0, [sp, #42]	; 0x2a
   11bd0:	b	119b8 <__assert_fail@plt+0x4d0>
   11bd4:	mov	r0, #1
   11bd8:	strb	r0, [sp, #50]	; 0x32
   11bdc:	b	119b8 <__assert_fail@plt+0x4d0>
   11be0:	movw	r0, #53632	; 0xd180
   11be4:	movw	r1, #47111	; 0xb807
   11be8:	movt	r0, #2
   11bec:	movt	r1, #1
   11bf0:	ldr	r0, [r0]
   11bf4:	add	r0, r4, r0, lsl #2
   11bf8:	ldr	r0, [r0, #-4]
   11bfc:	bl	11200 <strcmp@plt>
   11c00:	mov	r1, #0
   11c04:	mov	r3, r9
   11c08:	mov	r6, r7
   11c0c:	cmp	r0, #0
   11c10:	str	r1, [sp, #20]
   11c14:	beq	119b8 <__assert_fail@plt+0x4d0>
   11c18:	b	11e7c <__assert_fail@plt+0x994>
   11c1c:	movw	r0, #53656	; 0xd198
   11c20:	mov	r1, #1
   11c24:	movt	r0, #2
   11c28:	str	r1, [sp, #20]
   11c2c:	ldr	r0, [r0]
   11c30:	cmp	r0, #0
   11c34:	beq	119b8 <__assert_fail@plt+0x4d0>
   11c38:	movw	r1, #47183	; 0xb84f
   11c3c:	movt	r1, #1
   11c40:	bl	11200 <strcmp@plt>
   11c44:	cmp	r0, #0
   11c48:	bne	11ea0 <__assert_fail@plt+0x9b8>
   11c4c:	mov	r1, #1
   11c50:	mov	r0, #1
   11c54:	mov	r6, r7
   11c58:	mov	r3, r9
   11c5c:	str	r0, [sp, #20]
   11c60:	strb	r1, [sp, #48]	; 0x30
   11c64:	b	119b8 <__assert_fail@plt+0x4d0>
   11c68:	mov	r0, #1
   11c6c:	strb	r0, [sp, #40]	; 0x28
   11c70:	b	119b8 <__assert_fail@plt+0x4d0>
   11c74:	cmn	r0, #1
   11c78:	bne	11e00 <__assert_fail@plt+0x918>
   11c7c:	movw	r8, #53632	; 0xd180
   11c80:	movt	r8, #2
   11c84:	ldr	r6, [r8]
   11c88:	cmp	r6, r5
   11c8c:	bge	11d44 <__assert_fail@plt+0x85c>
   11c90:	ldr	r7, [sp, #24]
   11c94:	tst	r7, #255	; 0xff
   11c98:	beq	11cc8 <__assert_fail@plt+0x7e0>
   11c9c:	ldr	r0, [sp, #20]
   11ca0:	eor	r0, r0, #1
   11ca4:	tst	r0, #1
   11ca8:	bne	11cc8 <__assert_fail@plt+0x7e0>
   11cac:	movw	r0, #53664	; 0xd1a0
   11cb0:	movt	r0, #2
   11cb4:	bl	1996c <__assert_fail@plt+0x8484>
   11cb8:	cmp	r0, #0
   11cbc:	str	r0, [sp, #44]	; 0x2c
   11cc0:	beq	11f14 <__assert_fail@plt+0xa2c>
   11cc4:	ldr	r6, [r8]
   11cc8:	ldr	r0, [sp, #28]
   11ccc:	tst	r0, #1
   11cd0:	beq	11dd0 <__assert_fail@plt+0x8e8>
   11cd4:	sub	r5, r5, r6
   11cd8:	cmp	r5, #3
   11cdc:	bhi	11ce8 <__assert_fail@plt+0x800>
   11ce0:	tst	r7, #255	; 0xff
   11ce4:	beq	11dd0 <__assert_fail@plt+0x8e8>
   11ce8:	movw	r0, #53640	; 0xd188
   11cec:	cmn	r5, #1
   11cf0:	mov	r3, r5
   11cf4:	movt	r0, #2
   11cf8:	ldr	r9, [r0]
   11cfc:	bgt	11d20 <__assert_fail@plt+0x838>
   11d00:	movw	r8, #16960	; 0x4240
   11d04:	asr	r1, r5, #31
   11d08:	mov	r0, r5
   11d0c:	mov	r3, #0
   11d10:	movt	r8, #15
   11d14:	mov	r2, r8
   11d18:	bl	1ae8c <__assert_fail@plt+0x99a4>
   11d1c:	add	r3, r2, r8
   11d20:	mov	r0, #5
   11d24:	tst	r7, #255	; 0xff
   11d28:	beq	11d7c <__assert_fail@plt+0x894>
   11d2c:	movw	r1, #47350	; 0xb8f6
   11d30:	movw	r2, #47389	; 0xb91d
   11d34:	str	r0, [sp]
   11d38:	movt	r1, #1
   11d3c:	movt	r2, #1
   11d40:	b	11d90 <__assert_fail@plt+0x8a8>
   11d44:	mov	r5, #0
   11d48:	tst	sl, #255	; 0xff
   11d4c:	bne	11df4 <__assert_fail@plt+0x90c>
   11d50:	movw	r1, #47303	; 0xb8c7
   11d54:	mov	r0, #0
   11d58:	mov	r2, #5
   11d5c:	movt	r1, #1
   11d60:	bl	1126c <dcgettext@plt>
   11d64:	mov	r2, r0
   11d68:	mov	r0, #0
   11d6c:	mov	r1, #0
   11d70:	bl	112fc <error@plt>
   11d74:	mov	r0, #1
   11d78:	bl	115e8 <__assert_fail@plt+0x100>
   11d7c:	movw	r1, #47429	; 0xb945
   11d80:	movw	r2, #47456	; 0xb960
   11d84:	str	r0, [sp]
   11d88:	movt	r1, #1
   11d8c:	movt	r2, #1
   11d90:	mov	r0, #0
   11d94:	bl	114c4 <dcngettext@plt>
   11d98:	mov	r2, r0
   11d9c:	movw	r0, #53692	; 0xd1bc
   11da0:	mov	r1, #1
   11da4:	str	r5, [sp]
   11da8:	movt	r0, #2
   11dac:	ldr	r3, [r0]
   11db0:	asr	r0, r5, #31
   11db4:	str	r0, [sp, #4]
   11db8:	mov	r0, r9
   11dbc:	bl	113c8 <__fprintf_chk@plt>
   11dc0:	mov	r5, #0
   11dc4:	bl	1a718 <__assert_fail@plt+0x9230>
   11dc8:	cmp	r0, #0
   11dcc:	beq	11df4 <__assert_fail@plt+0x90c>
   11dd0:	add	r0, r4, r6, lsl #2
   11dd4:	add	r1, sp, #32
   11dd8:	bl	12038 <__assert_fail@plt+0xb50>
   11ddc:	sub	r1, r0, #2
   11de0:	cmp	r1, #3
   11de4:	bcs	11ef4 <__assert_fail@plt+0xa0c>
   11de8:	sub	r0, r0, #4
   11dec:	clz	r0, r0
   11df0:	lsr	r5, r0, #5
   11df4:	mov	r0, r5
   11df8:	sub	sp, fp, #28
   11dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e00:	cmn	r0, #3
   11e04:	bne	11e6c <__assert_fail@plt+0x984>
   11e08:	movw	r0, #53544	; 0xd128
   11e0c:	movw	r2, #47290	; 0xb8ba
   11e10:	movw	r5, #47243	; 0xb88b
   11e14:	movw	r7, #47270	; 0xb8a6
   11e18:	movw	r6, #47254	; 0xb896
   11e1c:	mov	r1, #0
   11e20:	movt	r0, #2
   11e24:	movt	r2, #1
   11e28:	movt	r5, #1
   11e2c:	movt	r7, #1
   11e30:	movt	r6, #1
   11e34:	ldr	r3, [r0]
   11e38:	movw	r0, #53652	; 0xd194
   11e3c:	stm	sp, {r5, r6, r7}
   11e40:	str	r2, [sp, #12]
   11e44:	movw	r2, #47229	; 0xb87d
   11e48:	str	r1, [sp, #16]
   11e4c:	movw	r1, #47062	; 0xb7d6
   11e50:	movt	r0, #2
   11e54:	movt	r1, #1
   11e58:	movt	r2, #1
   11e5c:	ldr	r0, [r0]
   11e60:	bl	19e98 <__assert_fail@plt+0x89b0>
   11e64:	mov	r0, #0
   11e68:	bl	1135c <exit@plt>
   11e6c:	cmn	r0, #2
   11e70:	bne	11ee0 <__assert_fail@plt+0x9f8>
   11e74:	mov	r0, #0
   11e78:	bl	115e8 <__assert_fail@plt+0x100>
   11e7c:	movw	r1, #47130	; 0xb81a
   11e80:	mov	r0, #0
   11e84:	mov	r2, #5
   11e88:	movt	r1, #1
   11e8c:	bl	1126c <dcgettext@plt>
   11e90:	mov	r2, r0
   11e94:	mov	r0, #1
   11e98:	mov	r1, #0
   11e9c:	bl	112fc <error@plt>
   11ea0:	movw	r1, #47187	; 0xb853
   11ea4:	mov	r0, #0
   11ea8:	mov	r2, #5
   11eac:	movt	r1, #1
   11eb0:	bl	1126c <dcgettext@plt>
   11eb4:	mov	r4, r0
   11eb8:	movw	r0, #53656	; 0xd198
   11ebc:	movt	r0, #2
   11ec0:	ldr	r1, [r0]
   11ec4:	mov	r0, #4
   11ec8:	bl	1942c <__assert_fail@plt+0x7f44>
   11ecc:	mov	r3, r0
   11ed0:	mov	r0, #1
   11ed4:	mov	r1, #0
   11ed8:	mov	r2, r4
   11edc:	bl	112fc <error@plt>
   11ee0:	mov	r0, r5
   11ee4:	mov	r1, r4
   11ee8:	bl	11f58 <__assert_fail@plt+0xa70>
   11eec:	mov	r0, #1
   11ef0:	bl	115e8 <__assert_fail@plt+0x100>
   11ef4:	movw	r0, #47484	; 0xb97c
   11ef8:	movw	r1, #47506	; 0xb992
   11efc:	movw	r3, #47515	; 0xb99b
   11f00:	movw	r2, #371	; 0x173
   11f04:	movt	r0, #1
   11f08:	movt	r1, #1
   11f0c:	movt	r3, #1
   11f10:	bl	114e8 <__assert_fail@plt>
   11f14:	bl	1138c <__errno_location@plt>
   11f18:	movw	r1, #47319	; 0xb8d7
   11f1c:	ldr	r4, [r0]
   11f20:	mov	r0, #0
   11f24:	mov	r2, #5
   11f28:	movt	r1, #1
   11f2c:	bl	1126c <dcgettext@plt>
   11f30:	movw	r1, #50617	; 0xc5b9
   11f34:	mov	r5, r0
   11f38:	mov	r0, #4
   11f3c:	movt	r1, #1
   11f40:	bl	1942c <__assert_fail@plt+0x7f44>
   11f44:	mov	r3, r0
   11f48:	mov	r0, #1
   11f4c:	mov	r1, r4
   11f50:	mov	r2, r5
   11f54:	bl	112fc <error@plt>
   11f58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11f5c:	add	fp, sp, #24
   11f60:	sub	sp, sp, #112	; 0x70
   11f64:	cmp	r0, #2
   11f68:	blt	12030 <__assert_fail@plt+0xb48>
   11f6c:	mov	r4, r1
   11f70:	mov	r6, r0
   11f74:	mov	r7, #1
   11f78:	add	r8, sp, #8
   11f7c:	ldr	r5, [r4, r7, lsl #2]
   11f80:	ldrb	r0, [r5]
   11f84:	cmp	r0, #45	; 0x2d
   11f88:	beq	11fa8 <__assert_fail@plt+0xac0>
   11f8c:	add	r7, r7, #1
   11f90:	cmp	r6, r7
   11f94:	beq	12030 <__assert_fail@plt+0xb48>
   11f98:	ldr	r5, [r4, r7, lsl #2]
   11f9c:	ldrb	r0, [r5]
   11fa0:	cmp	r0, #45	; 0x2d
   11fa4:	bne	11f8c <__assert_fail@plt+0xaa4>
   11fa8:	ldrb	r0, [r5, #1]
   11fac:	cmp	r0, #0
   11fb0:	beq	11f8c <__assert_fail@plt+0xaa4>
   11fb4:	mov	r0, #3
   11fb8:	mov	r1, r5
   11fbc:	mov	r2, r8
   11fc0:	bl	114b8 <__lxstat64@plt>
   11fc4:	cmp	r0, #0
   11fc8:	bne	11f8c <__assert_fail@plt+0xaa4>
   11fcc:	movw	r0, #53640	; 0xd188
   11fd0:	movw	r1, #47948	; 0xbb4c
   11fd4:	mov	r2, #5
   11fd8:	movt	r0, #2
   11fdc:	movt	r1, #1
   11fe0:	ldr	r8, [r0]
   11fe4:	mov	r0, #0
   11fe8:	bl	1126c <dcgettext@plt>
   11fec:	ldr	r4, [r4]
   11ff0:	mov	r7, r0
   11ff4:	mov	r0, #1
   11ff8:	mov	r1, #3
   11ffc:	mov	r2, r5
   12000:	bl	19384 <__assert_fail@plt+0x7e9c>
   12004:	mov	r6, r0
   12008:	mov	r0, #4
   1200c:	mov	r1, r5
   12010:	bl	1942c <__assert_fail@plt+0x7f44>
   12014:	str	r0, [sp, #4]
   12018:	mov	r0, r8
   1201c:	mov	r1, #1
   12020:	mov	r2, r7
   12024:	mov	r3, r4
   12028:	str	r6, [sp]
   1202c:	bl	113c8 <__fprintf_chk@plt>
   12030:	sub	sp, fp, #24
   12034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1203c:	add	fp, sp, #28
   12040:	sub	sp, sp, #124	; 0x7c
   12044:	mov	sl, r1
   12048:	ldr	r1, [r0]
   1204c:	cmp	r1, #0
   12050:	beq	12758 <__assert_fail@plt+0x1270>
   12054:	ldrb	r2, [sl, #8]
   12058:	mov	r1, #600	; 0x258
   1205c:	mov	r9, #0
   12060:	cmp	r2, #0
   12064:	mov	r2, #0
   12068:	movweq	r1, #536	; 0x218
   1206c:	bl	1a69c <__assert_fail@plt+0x91b4>
   12070:	mov	r4, r0
   12074:	bl	14708 <__assert_fail@plt+0x3220>
   12078:	cmp	r0, #0
   1207c:	beq	12768 <__assert_fail@plt+0x1280>
   12080:	mov	r8, r0
   12084:	add	r0, r4, #16
   12088:	mov	r7, #2
   1208c:	str	r0, [sp, #12]
   12090:	ldrh	r1, [r8, #56]	; 0x38
   12094:	sub	r0, r1, #1
   12098:	cmp	r0, #12
   1209c:	bls	120d4 <__assert_fail@plt+0xbec>
   120a0:	b	127f0 <__assert_fail@plt+0x1308>
   120a4:	cmp	r6, #4
   120a8:	bne	12840 <__assert_fail@plt+0x1358>
   120ac:	mov	r7, r6
   120b0:	mov	r0, r4
   120b4:	bl	14708 <__assert_fail@plt+0x3220>
   120b8:	mov	r8, r0
   120bc:	cmp	r0, #0
   120c0:	beq	1276c <__assert_fail@plt+0x1284>
   120c4:	ldrh	r1, [r8, #56]	; 0x38
   120c8:	sub	r0, r1, #1
   120cc:	cmp	r0, #12
   120d0:	bhi	127f0 <__assert_fail@plt+0x1308>
   120d4:	add	r2, pc, #4
   120d8:	add	r5, r8, #64	; 0x40
   120dc:	ldr	pc, [r2, r0, lsl #2]
   120e0:	andeq	r2, r1, r8, lsl #3
   120e4:	andeq	r2, r1, r8, lsr r2
   120e8:	andeq	r2, r1, r4, lsl r1
   120ec:	andeq	r2, r1, r4, lsl r1
   120f0:	strdeq	r2, [r1], -r0
   120f4:	muleq	r1, r4, r2
   120f8:	strdeq	r2, [r1], -r8
   120fc:	andeq	r2, r1, r4, lsl r1
   12100:	strdeq	r2, [r1], -r0
   12104:	andeq	r2, r1, r4, lsl r1
   12108:	andeq	r2, r1, r4, lsl r1
   1210c:	andeq	r2, r1, r4, lsl r1
   12110:	andeq	r2, r1, r4, lsl r1
   12114:	orr	r1, r1, #2
   12118:	ldr	r0, [r4, #32]
   1211c:	mov	r2, #3
   12120:	mov	r3, sl
   12124:	sub	r1, r1, #6
   12128:	stm	sp, {r2, r9}
   1212c:	clz	r1, r1
   12130:	lsr	r5, r1, #5
   12134:	mov	r1, r8
   12138:	mov	r2, r5
   1213c:	bl	12928 <__assert_fail@plt+0x1440>
   12140:	mov	r6, r0
   12144:	cmp	r0, #2
   12148:	bne	12164 <__assert_fail@plt+0xc7c>
   1214c:	mov	r0, r4
   12150:	mov	r1, r8
   12154:	mov	r2, sl
   12158:	mov	r3, r5
   1215c:	bl	12e94 <__assert_fail@plt+0x19ac>
   12160:	mov	r6, r0
   12164:	sub	r0, r6, #2
   12168:	cmp	r0, #2
   1216c:	bcs	120a4 <__assert_fail@plt+0xbbc>
   12170:	cmp	r7, #2
   12174:	bne	120b0 <__assert_fail@plt+0xbc8>
   12178:	cmp	r6, #3
   1217c:	mov	r6, #3
   12180:	moveq	r7, r6
   12184:	b	120b0 <__assert_fail@plt+0xbc8>
   12188:	ldrb	r0, [sl, #9]
   1218c:	cmp	r0, #0
   12190:	beq	1233c <__assert_fail@plt+0xe54>
   12194:	ldr	r0, [r8, #48]	; 0x30
   12198:	cmp	r0, #0
   1219c:	beq	12370 <__assert_fail@plt+0xe88>
   121a0:	ldr	r0, [r4, #32]
   121a4:	mov	r1, #2
   121a8:	mov	r2, #1
   121ac:	mov	r3, sl
   121b0:	str	r1, [sp]
   121b4:	add	r1, sp, #16
   121b8:	str	r1, [sp, #4]
   121bc:	mov	r1, r8
   121c0:	bl	12928 <__assert_fail@plt+0x1440>
   121c4:	cmp	r0, #2
   121c8:	mov	r9, r0
   121cc:	ldreq	r0, [sp, #16]
   121d0:	cmpeq	r0, #4
   121d4:	beq	124dc <__assert_fail@plt+0xff4>
   121d8:	mov	r6, #2
   121dc:	cmp	r9, #2
   121e0:	bne	12514 <__assert_fail@plt+0x102c>
   121e4:	mov	r9, #0
   121e8:	sub	r0, r6, #2
   121ec:	cmp	r0, #2
   121f0:	bcc	12170 <__assert_fail@plt+0xc88>
   121f4:	b	120a4 <__assert_fail@plt+0xbbc>
   121f8:	movw	r1, #48942	; 0xbf2e
   121fc:	ldr	r5, [r8, #32]
   12200:	mov	r0, #0
   12204:	mov	r2, #5
   12208:	movt	r1, #1
   1220c:	bl	1126c <dcgettext@plt>
   12210:	ldr	r2, [r8, #28]
   12214:	mov	r6, r0
   12218:	mov	r0, #0
   1221c:	mov	r1, #3
   12220:	bl	196a8 <__assert_fail@plt+0x81c0>
   12224:	mov	r3, r0
   12228:	mov	r0, #0
   1222c:	mov	r1, r5
   12230:	mov	r2, r6
   12234:	b	12270 <__assert_fail@plt+0xd88>
   12238:	movw	r1, #48756	; 0xbe74
   1223c:	mov	r0, #0
   12240:	mov	r2, #5
   12244:	movt	r1, #1
   12248:	bl	1126c <dcgettext@plt>
   1224c:	ldr	r2, [r8, #28]
   12250:	mov	r5, r0
   12254:	mov	r0, #0
   12258:	mov	r1, #3
   1225c:	bl	196a8 <__assert_fail@plt+0x81c0>
   12260:	mov	r3, r0
   12264:	mov	r0, #0
   12268:	mov	r1, #0
   1226c:	mov	r2, r5
   12270:	bl	112fc <error@plt>
   12274:	mov	r6, #4
   12278:	mov	r0, r4
   1227c:	mov	r1, r8
   12280:	mov	r2, #4
   12284:	bl	15f68 <__assert_fail@plt+0x4a80>
   12288:	mov	r0, r4
   1228c:	bl	14708 <__assert_fail@plt+0x3220>
   12290:	b	120ac <__assert_fail@plt+0xbc4>
   12294:	ldrb	r0, [sl, #8]
   12298:	cmp	r0, #0
   1229c:	beq	12114 <__assert_fail@plt+0xc2c>
   122a0:	ldr	r0, [r8, #48]	; 0x30
   122a4:	cmp	r0, #1
   122a8:	blt	12114 <__assert_fail@plt+0xc2c>
   122ac:	ldr	r0, [sp, #12]
   122b0:	ldm	r5, {r2, r5}
   122b4:	ldm	r0, {r0, r3}
   122b8:	eor	r3, r5, r3
   122bc:	eor	r0, r2, r0
   122c0:	orrs	r0, r0, r3
   122c4:	beq	12114 <__assert_fail@plt+0xc2c>
   122c8:	ldr	r0, [r8, #4]
   122cc:	mov	r2, #1
   122d0:	ldr	r1, [r0, #48]	; 0x30
   122d4:	cmp	r1, #0
   122d8:	bmi	122fc <__assert_fail@plt+0xe14>
   122dc:	ldr	r1, [r0, #16]
   122e0:	cmp	r1, #0
   122e4:	bne	122fc <__assert_fail@plt+0xe14>
   122e8:	str	r2, [r0, #16]
   122ec:	ldr	r0, [r0, #4]
   122f0:	ldr	r1, [r0, #48]	; 0x30
   122f4:	cmn	r1, #1
   122f8:	bgt	122dc <__assert_fail@plt+0xdf4>
   122fc:	movw	r1, #48673	; 0xbe21
   12300:	mov	r0, #0
   12304:	mov	r2, #5
   12308:	movt	r1, #1
   1230c:	bl	1126c <dcgettext@plt>
   12310:	ldr	r1, [r8, #28]
   12314:	mov	r5, r0
   12318:	mov	r0, #4
   1231c:	mov	r6, #4
   12320:	bl	1942c <__assert_fail@plt+0x7f44>
   12324:	mov	r3, r0
   12328:	mov	r0, #0
   1232c:	mov	r1, #0
   12330:	mov	r2, r5
   12334:	bl	112fc <error@plt>
   12338:	b	120ac <__assert_fail@plt+0xbc4>
   1233c:	ldrb	r0, [sl, #10]
   12340:	cmp	r0, #0
   12344:	beq	12614 <__assert_fail@plt+0x112c>
   12348:	ldr	r1, [r8, #24]
   1234c:	ldr	r0, [r4, #32]
   12350:	bl	12860 <__assert_fail@plt+0x1378>
   12354:	cmp	r0, #0
   12358:	bne	12194 <__assert_fail@plt+0xcac>
   1235c:	ldrb	r0, [sl, #10]
   12360:	mov	r6, #39	; 0x27
   12364:	cmp	r0, #0
   12368:	movweq	r6, #21
   1236c:	b	12618 <__assert_fail@plt+0x1130>
   12370:	ldr	r6, [r8, #24]
   12374:	mov	r0, r6
   12378:	bl	135ac <__assert_fail@plt+0x20c4>
   1237c:	ldrb	r1, [r0]
   12380:	cmp	r1, #46	; 0x2e
   12384:	bne	12428 <__assert_fail@plt+0xf40>
   12388:	ldrb	r1, [r0, #1]
   1238c:	cmp	r1, #46	; 0x2e
   12390:	mov	r1, #1
   12394:	movweq	r1, #2
   12398:	ldrb	r0, [r0, r1]
   1239c:	cmp	r0, #47	; 0x2f
   123a0:	cmpne	r0, #0
   123a4:	bne	12428 <__assert_fail@plt+0xf40>
   123a8:	movw	r1, #48436	; 0xbd34
   123ac:	mov	r0, #0
   123b0:	mov	r2, #5
   123b4:	movt	r1, #1
   123b8:	bl	1126c <dcgettext@plt>
   123bc:	movw	r2, #48488	; 0xbd68
   123c0:	mov	r9, r0
   123c4:	mov	r0, #0
   123c8:	mov	r1, #4
   123cc:	mov	r6, #4
   123d0:	movt	r2, #1
   123d4:	bl	19384 <__assert_fail@plt+0x7e9c>
   123d8:	movw	r2, #48487	; 0xbd67
   123dc:	mov	r7, r0
   123e0:	mov	r0, #1
   123e4:	mov	r1, #4
   123e8:	movt	r2, #1
   123ec:	bl	19384 <__assert_fail@plt+0x7e9c>
   123f0:	ldr	r2, [r8, #28]
   123f4:	mov	r5, r0
   123f8:	mov	r0, #2
   123fc:	mov	r1, #4
   12400:	bl	19384 <__assert_fail@plt+0x7e9c>
   12404:	str	r0, [sp, #4]
   12408:	mov	r2, r9
   1240c:	mov	r0, #0
   12410:	mov	r1, #0
   12414:	mov	r3, r7
   12418:	str	r5, [sp]
   1241c:	mov	r9, #0
   12420:	bl	112fc <error@plt>
   12424:	b	12278 <__assert_fail@plt+0xd90>
   12428:	ldr	r0, [sl, #12]
   1242c:	cmp	r0, #0
   12430:	beq	12578 <__assert_fail@plt+0x1090>
   12434:	add	r1, r8, #160	; 0xa0
   12438:	ldrd	r2, [r0]
   1243c:	ldm	r1, {r1, r9}
   12440:	eor	r3, r9, r3
   12444:	mov	r9, #0
   12448:	eor	r1, r1, r2
   1244c:	orrs	r1, r1, r3
   12450:	bne	12578 <__assert_fail@plt+0x1090>
   12454:	ldrd	r0, [r0, #8]
   12458:	ldrd	r2, [r5]
   1245c:	eor	r1, r3, r1
   12460:	eor	r0, r2, r0
   12464:	orrs	r0, r0, r1
   12468:	bne	12578 <__assert_fail@plt+0x1090>
   1246c:	movw	r7, #50617	; 0xc5b9
   12470:	ldr	r0, [r8, #28]
   12474:	movt	r7, #1
   12478:	mov	r1, r7
   1247c:	bl	11200 <strcmp@plt>
   12480:	cmp	r0, #0
   12484:	beq	126f8 <__assert_fail@plt+0x1210>
   12488:	movw	r1, #48535	; 0xbd97
   1248c:	mov	r0, #0
   12490:	mov	r2, #5
   12494:	movt	r1, #1
   12498:	bl	1126c <dcgettext@plt>
   1249c:	ldr	r2, [r8, #28]
   124a0:	mov	r5, r0
   124a4:	mov	r0, #0
   124a8:	mov	r1, #4
   124ac:	bl	19384 <__assert_fail@plt+0x7e9c>
   124b0:	mov	r6, r0
   124b4:	mov	r0, #1
   124b8:	mov	r1, #4
   124bc:	mov	r2, r7
   124c0:	bl	19384 <__assert_fail@plt+0x7e9c>
   124c4:	str	r0, [sp]
   124c8:	mov	r0, #0
   124cc:	mov	r1, #0
   124d0:	mov	r2, r5
   124d4:	mov	r3, r6
   124d8:	b	1272c <__assert_fail@plt+0x1244>
   124dc:	mov	r0, r4
   124e0:	mov	r1, r8
   124e4:	mov	r2, sl
   124e8:	mov	r3, #1
   124ec:	bl	12e94 <__assert_fail@plt+0x19ac>
   124f0:	mov	r9, r0
   124f4:	cmp	r0, #2
   124f8:	bne	12514 <__assert_fail@plt+0x102c>
   124fc:	mov	r0, r4
   12500:	mov	r1, r8
   12504:	mov	r2, #4
   12508:	bl	15f68 <__assert_fail@plt+0x4a80>
   1250c:	mov	r9, #2
   12510:	b	12558 <__assert_fail@plt+0x1070>
   12514:	ldr	r0, [r8, #4]
   12518:	mov	r2, #1
   1251c:	ldr	r1, [r0, #48]	; 0x30
   12520:	cmp	r1, #0
   12524:	bmi	12548 <__assert_fail@plt+0x1060>
   12528:	ldr	r1, [r0, #16]
   1252c:	cmp	r1, #0
   12530:	bne	12548 <__assert_fail@plt+0x1060>
   12534:	str	r2, [r0, #16]
   12538:	ldr	r0, [r0, #4]
   1253c:	ldr	r1, [r0, #48]	; 0x30
   12540:	cmn	r1, #1
   12544:	bgt	12528 <__assert_fail@plt+0x1040>
   12548:	mov	r0, r4
   1254c:	mov	r1, r8
   12550:	mov	r2, #4
   12554:	bl	15f68 <__assert_fail@plt+0x4a80>
   12558:	mov	r0, r4
   1255c:	bl	14708 <__assert_fail@plt+0x3220>
   12560:	mov	r6, r9
   12564:	mov	r9, #0
   12568:	sub	r0, r6, #2
   1256c:	cmp	r0, #2
   12570:	bcc	12170 <__assert_fail@plt+0xc88>
   12574:	b	120a4 <__assert_fail@plt+0xbbc>
   12578:	ldrb	r0, [sl, #16]
   1257c:	cmp	r0, #0
   12580:	beq	121a0 <__assert_fail@plt+0xcb8>
   12584:	movw	r1, #48487	; 0xbd67
   12588:	mov	r0, r6
   1258c:	mov	r2, #0
   12590:	movt	r1, #1
   12594:	bl	139c0 <__assert_fail@plt+0x24d8>
   12598:	mov	r6, r0
   1259c:	mov	r0, #3
   125a0:	add	r2, sp, #16
   125a4:	mov	r1, r6
   125a8:	bl	114b8 <__lxstat64@plt>
   125ac:	cmp	r0, #0
   125b0:	beq	12688 <__assert_fail@plt+0x11a0>
   125b4:	movw	r1, #48642	; 0xbe02
   125b8:	mov	r0, #0
   125bc:	mov	r2, #5
   125c0:	movt	r1, #1
   125c4:	bl	1126c <dcgettext@plt>
   125c8:	mov	r5, r0
   125cc:	mov	r0, #0
   125d0:	mov	r1, #4
   125d4:	mov	r2, r6
   125d8:	bl	19384 <__assert_fail@plt+0x7e9c>
   125dc:	ldr	r2, [r8, #24]
   125e0:	mov	r7, r0
   125e4:	mov	r0, #1
   125e8:	mov	r1, #4
   125ec:	bl	19384 <__assert_fail@plt+0x7e9c>
   125f0:	str	r0, [sp]
   125f4:	mov	r0, #0
   125f8:	mov	r1, #0
   125fc:	mov	r2, r5
   12600:	mov	r3, r7
   12604:	bl	112fc <error@plt>
   12608:	mov	r0, r6
   1260c:	bl	13af8 <__assert_fail@plt+0x2610>
   12610:	b	12274 <__assert_fail@plt+0xd8c>
   12614:	mov	r6, #21
   12618:	movw	r1, #48419	; 0xbd23
   1261c:	mov	r0, #0
   12620:	mov	r2, #5
   12624:	movt	r1, #1
   12628:	bl	1126c <dcgettext@plt>
   1262c:	ldr	r1, [r8, #28]
   12630:	mov	r5, r0
   12634:	mov	r0, #4
   12638:	bl	1942c <__assert_fail@plt+0x7f44>
   1263c:	mov	r3, r0
   12640:	mov	r0, #0
   12644:	mov	r1, r6
   12648:	mov	r2, r5
   1264c:	bl	112fc <error@plt>
   12650:	ldr	r0, [r8, #4]
   12654:	mov	r2, #1
   12658:	ldr	r1, [r0, #48]	; 0x30
   1265c:	cmp	r1, #0
   12660:	bmi	12274 <__assert_fail@plt+0xd8c>
   12664:	ldr	r1, [r0, #16]
   12668:	cmp	r1, #0
   1266c:	bne	12274 <__assert_fail@plt+0xd8c>
   12670:	str	r2, [r0, #16]
   12674:	ldr	r0, [r0, #4]
   12678:	ldr	r1, [r0, #48]	; 0x30
   1267c:	cmn	r1, #1
   12680:	bgt	12664 <__assert_fail@plt+0x117c>
   12684:	b	12274 <__assert_fail@plt+0xd8c>
   12688:	mov	r0, r6
   1268c:	bl	13af8 <__assert_fail@plt+0x2610>
   12690:	ldr	r0, [sp, #12]
   12694:	ldr	r2, [sp, #16]
   12698:	ldr	r3, [sp, #20]
   1269c:	ldrd	r0, [r0]
   126a0:	eor	r1, r1, r3
   126a4:	eor	r0, r0, r2
   126a8:	orrs	r0, r0, r1
   126ac:	beq	121a0 <__assert_fail@plt+0xcb8>
   126b0:	movw	r1, #48673	; 0xbe21
   126b4:	mov	r0, #0
   126b8:	mov	r2, #5
   126bc:	movt	r1, #1
   126c0:	bl	1126c <dcgettext@plt>
   126c4:	ldr	r1, [r8, #28]
   126c8:	mov	r5, r0
   126cc:	mov	r0, #4
   126d0:	bl	1942c <__assert_fail@plt+0x7f44>
   126d4:	mov	r3, r0
   126d8:	mov	r0, #0
   126dc:	mov	r1, #0
   126e0:	mov	r2, r5
   126e4:	bl	112fc <error@plt>
   126e8:	movw	r1, #48719	; 0xbe4f
   126ec:	mov	r0, #0
   126f0:	movt	r1, #1
   126f4:	b	1273c <__assert_fail@plt+0x1254>
   126f8:	movw	r1, #48490	; 0xbd6a
   126fc:	mov	r0, #0
   12700:	mov	r2, #5
   12704:	movt	r1, #1
   12708:	bl	1126c <dcgettext@plt>
   1270c:	ldr	r1, [r8, #28]
   12710:	mov	r5, r0
   12714:	mov	r0, #4
   12718:	bl	1942c <__assert_fail@plt+0x7f44>
   1271c:	mov	r3, r0
   12720:	mov	r0, #0
   12724:	mov	r1, #0
   12728:	mov	r2, r5
   1272c:	bl	112fc <error@plt>
   12730:	movw	r1, #48593	; 0xbdd1
   12734:	mov	r0, #0
   12738:	movt	r1, #1
   1273c:	mov	r2, #5
   12740:	bl	1126c <dcgettext@plt>
   12744:	mov	r2, r0
   12748:	mov	r0, #0
   1274c:	mov	r1, #0
   12750:	bl	112fc <error@plt>
   12754:	b	12274 <__assert_fail@plt+0xd8c>
   12758:	mov	r7, #2
   1275c:	mov	r0, r7
   12760:	sub	sp, fp, #28
   12764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12768:	mov	r7, #2
   1276c:	bl	1138c <__errno_location@plt>
   12770:	ldr	r6, [r0]
   12774:	mov	r5, r0
   12778:	cmp	r6, #0
   1277c:	beq	127a8 <__assert_fail@plt+0x12c0>
   12780:	movw	r1, #48296	; 0xbca8
   12784:	mov	r0, #0
   12788:	mov	r2, #5
   1278c:	movt	r1, #1
   12790:	bl	1126c <dcgettext@plt>
   12794:	mov	r2, r0
   12798:	mov	r0, #0
   1279c:	mov	r1, r6
   127a0:	bl	112fc <error@plt>
   127a4:	mov	r7, #4
   127a8:	mov	r0, r4
   127ac:	bl	14540 <__assert_fail@plt+0x3058>
   127b0:	cmp	r0, #0
   127b4:	beq	127e4 <__assert_fail@plt+0x12fc>
   127b8:	movw	r1, #48402	; 0xbd12
   127bc:	ldr	r4, [r5]
   127c0:	mov	r0, #0
   127c4:	mov	r2, #5
   127c8:	movt	r1, #1
   127cc:	bl	1126c <dcgettext@plt>
   127d0:	mov	r2, r0
   127d4:	mov	r0, #0
   127d8:	mov	r1, r4
   127dc:	bl	112fc <error@plt>
   127e0:	mov	r7, #4
   127e4:	mov	r0, r7
   127e8:	sub	sp, fp, #28
   127ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127f0:	movw	r1, #48963	; 0xbf43
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	movt	r1, #1
   12800:	bl	1126c <dcgettext@plt>
   12804:	ldr	r2, [r8, #28]
   12808:	ldrh	r5, [r8, #56]	; 0x38
   1280c:	mov	r4, r0
   12810:	mov	r0, #0
   12814:	mov	r1, #3
   12818:	bl	196a8 <__assert_fail@plt+0x81c0>
   1281c:	movw	r1, #49019	; 0xbf7b
   12820:	mov	r2, r4
   12824:	mov	r3, r5
   12828:	movt	r1, #1
   1282c:	stm	sp, {r0, r1}
   12830:	mov	r0, #0
   12834:	mov	r1, #0
   12838:	bl	112fc <error@plt>
   1283c:	bl	114a0 <abort@plt>
   12840:	movw	r0, #48312	; 0xbcb8
   12844:	movw	r1, #48329	; 0xbcc9
   12848:	movw	r3, #48342	; 0xbcd6
   1284c:	movw	r2, #610	; 0x262
   12850:	movt	r0, #1
   12854:	movt	r1, #1
   12858:	movt	r3, #1
   1285c:	bl	114e8 <__assert_fail@plt>
   12860:	push	{r4, r5, r6, r7, fp, lr}
   12864:	add	fp, sp, #16
   12868:	mov	r2, #51456	; 0xc900
   1286c:	bl	11380 <openat64@plt>
   12870:	cmp	r0, #0
   12874:	bmi	12920 <__assert_fail@plt+0x1438>
   12878:	mov	r5, r0
   1287c:	bl	11440 <fdopendir@plt>
   12880:	cmp	r0, #0
   12884:	beq	12918 <__assert_fail@plt+0x1430>
   12888:	mov	r4, r0
   1288c:	bl	1138c <__errno_location@plt>
   12890:	mov	r5, r0
   12894:	mov	r0, #0
   12898:	str	r0, [r5]
   1289c:	mov	r0, r4
   128a0:	bl	11434 <readdir64@plt>
   128a4:	cmp	r0, #0
   128a8:	beq	128f4 <__assert_fail@plt+0x140c>
   128ac:	mov	r6, r0
   128b0:	ldrb	r0, [r6, #19]
   128b4:	cmp	r0, #46	; 0x2e
   128b8:	bne	128f8 <__assert_fail@plt+0x1410>
   128bc:	ldrb	r0, [r6, #20]
   128c0:	cmp	r0, #46	; 0x2e
   128c4:	mov	r0, #1
   128c8:	movweq	r0, #2
   128cc:	add	r0, r6, r0
   128d0:	ldrb	r0, [r0, #19]
   128d4:	cmp	r0, #47	; 0x2f
   128d8:	cmpne	r0, #0
   128dc:	bne	128f8 <__assert_fail@plt+0x1410>
   128e0:	mov	r0, r4
   128e4:	bl	11434 <readdir64@plt>
   128e8:	mov	r6, r0
   128ec:	cmp	r0, #0
   128f0:	bne	128b0 <__assert_fail@plt+0x13c8>
   128f4:	mov	r6, #0
   128f8:	ldr	r7, [r5]
   128fc:	mov	r0, r4
   12900:	bl	114d0 <closedir@plt>
   12904:	orr	r0, r6, r7
   12908:	str	r7, [r5]
   1290c:	clz	r0, r0
   12910:	lsr	r0, r0, #5
   12914:	pop	{r4, r5, r6, r7, fp, pc}
   12918:	mov	r0, r5
   1291c:	bl	114ac <close@plt>
   12920:	mov	r0, #0
   12924:	pop	{r4, r5, r6, r7, fp, pc}
   12928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292c:	add	fp, sp, #28
   12930:	sub	sp, sp, #132	; 0x84
   12934:	ldr	r7, [fp, #12]
   12938:	mov	r5, r2
   1293c:	mov	r4, r1
   12940:	ldr	r2, [r1, #28]
   12944:	ldr	r1, [r1, #24]
   12948:	add	r8, sp, #24
   1294c:	mvn	r6, #0
   12950:	str	r0, [sp, #16]
   12954:	add	sl, r8, #48	; 0x30
   12958:	cmp	r7, #0
   1295c:	str	r2, [sp, #20]
   12960:	str	r1, [sp, #12]
   12964:	beq	129c0 <__assert_fail@plt+0x14d8>
   12968:	mov	r2, #2
   1296c:	str	r2, [r7]
   12970:	str	r6, [sl]
   12974:	str	r6, [sl, #4]
   12978:	mov	r6, r3
   1297c:	bl	12860 <__assert_fail@plt+0x1378>
   12980:	mov	r3, r6
   12984:	mov	r6, r0
   12988:	mov	r0, #3
   1298c:	mov	r9, r5
   12990:	cmp	r6, #0
   12994:	movwne	r0, #4
   12998:	cmp	r5, #0
   1299c:	movwne	r9, #4
   129a0:	str	r0, [r7]
   129a4:	ldr	r0, [r4, #16]
   129a8:	mov	r4, #3
   129ac:	cmp	r0, #0
   129b0:	beq	129e8 <__assert_fail@plt+0x1500>
   129b4:	mov	r0, r4
   129b8:	sub	sp, fp, #28
   129bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c0:	cmp	r5, #0
   129c4:	mov	r9, r5
   129c8:	str	r6, [sl]
   129cc:	str	r6, [sl, #4]
   129d0:	mov	r6, #0
   129d4:	movwne	r9, #4
   129d8:	ldr	r0, [r4, #16]
   129dc:	mov	r4, #3
   129e0:	cmp	r0, #0
   129e4:	bne	129b4 <__assert_fail@plt+0x14cc>
   129e8:	ldr	r1, [r3, #4]
   129ec:	cmp	r1, #5
   129f0:	beq	12abc <__assert_fail@plt+0x15d4>
   129f4:	ldrb	r0, [r3]
   129f8:	add	r8, r8, #96	; 0x60
   129fc:	mov	ip, #0
   12a00:	cmp	r0, #0
   12a04:	beq	12a18 <__assert_fail@plt+0x1530>
   12a08:	mov	r7, #0
   12a0c:	cmp	r1, #3
   12a10:	beq	12a5c <__assert_fail@plt+0x1574>
   12a14:	b	12abc <__assert_fail@plt+0x15d4>
   12a18:	cmp	r1, #3
   12a1c:	beq	12a30 <__assert_fail@plt+0x1548>
   12a20:	ldrb	r0, [r3, #17]
   12a24:	mov	r7, #0
   12a28:	cmp	r0, #0
   12a2c:	beq	12a54 <__assert_fail@plt+0x156c>
   12a30:	str	r3, [sp, #8]
   12a34:	bl	1a054 <__assert_fail@plt+0x8b6c>
   12a38:	cmp	r0, #0
   12a3c:	beq	12acc <__assert_fail@plt+0x15e4>
   12a40:	bl	1138c <__errno_location@plt>
   12a44:	ldr	r3, [sp, #8]
   12a48:	ldr	r7, [r0]
   12a4c:	mov	ip, #0
   12a50:	ldr	r1, [r3, #4]
   12a54:	cmp	r1, #3
   12a58:	bne	12abc <__assert_fail@plt+0x15d4>
   12a5c:	cmp	ip, #0
   12a60:	bmi	12c54 <__assert_fail@plt+0x176c>
   12a64:	cmp	r5, #0
   12a68:	bne	12c54 <__assert_fail@plt+0x176c>
   12a6c:	ldrd	r0, [sl]
   12a70:	mvn	r5, #0
   12a74:	eor	r2, r1, r5
   12a78:	eor	r7, r0, r5
   12a7c:	orrs	r2, r7, r2
   12a80:	beq	12b44 <__assert_fail@plt+0x165c>
   12a84:	subs	r0, r5, r0
   12a88:	sbcs	r0, r5, r1
   12a8c:	bge	12c04 <__assert_fail@plt+0x171c>
   12a90:	ldr	r0, [sp, #40]	; 0x28
   12a94:	and	r0, r0, #61440	; 0xf000
   12a98:	cmp	r0, #16384	; 0x4000
   12a9c:	beq	12c64 <__assert_fail@plt+0x177c>
   12aa0:	mov	r9, #0
   12aa4:	cmp	r0, #40960	; 0xa000
   12aa8:	bne	12c8c <__assert_fail@plt+0x17a4>
   12aac:	ldr	r0, [r3, #4]
   12ab0:	mov	r9, #10
   12ab4:	cmp	r0, #3
   12ab8:	beq	12c8c <__assert_fail@plt+0x17a4>
   12abc:	mov	r4, #2
   12ac0:	mov	r0, r4
   12ac4:	sub	sp, fp, #28
   12ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12acc:	ldrd	r0, [sl]
   12ad0:	mvn	r7, #0
   12ad4:	eor	r2, r1, r7
   12ad8:	eor	r3, r0, r7
   12adc:	orrs	r2, r3, r2
   12ae0:	beq	12b98 <__assert_fail@plt+0x16b0>
   12ae4:	subs	r0, r7, r0
   12ae8:	sbcs	r0, r7, r1
   12aec:	bge	12c28 <__assert_fail@plt+0x1740>
   12af0:	ldr	r0, [sp, #40]	; 0x28
   12af4:	and	r0, r0, #61440	; 0xf000
   12af8:	cmp	r0, #40960	; 0xa000
   12afc:	beq	12a40 <__assert_fail@plt+0x1558>
   12b00:	ldr	r0, [sp, #16]
   12b04:	ldr	r1, [sp, #12]
   12b08:	mov	r2, #2
   12b0c:	mov	r3, #512	; 0x200
   12b10:	bl	1123c <faccessat@plt>
   12b14:	cmp	r0, #0
   12b18:	beq	12a40 <__assert_fail@plt+0x1558>
   12b1c:	bl	1138c <__errno_location@plt>
   12b20:	ldr	r1, [r0]
   12b24:	ldr	r7, [r0]
   12b28:	ldr	r3, [sp, #8]
   12b2c:	mvn	ip, #0
   12b30:	cmp	r1, #13
   12b34:	movweq	ip, #1
   12b38:	cmp	ip, #0
   12b3c:	bpl	12a64 <__assert_fail@plt+0x157c>
   12b40:	b	12c54 <__assert_fail@plt+0x176c>
   12b44:	ldr	r1, [sp, #16]
   12b48:	ldr	r2, [sp, #12]
   12b4c:	mov	r0, #256	; 0x100
   12b50:	mov	r7, r3
   12b54:	add	r3, sp, #24
   12b58:	mov	r9, ip
   12b5c:	str	r0, [sp]
   12b60:	mov	r0, #3
   12b64:	bl	1129c <__fxstatat64@plt>
   12b68:	cmp	r0, #0
   12b6c:	beq	12bec <__assert_fail@plt+0x1704>
   12b70:	subs	r0, r5, #1
   12b74:	sbc	r1, r5, #0
   12b78:	strd	r0, [sl]
   12b7c:	bl	1138c <__errno_location@plt>
   12b80:	ldr	r7, [r0]
   12b84:	asr	r1, r7, #31
   12b88:	str	r7, [r8]
   12b8c:	str	r1, [r8, #4]
   12b90:	str	r7, [r0]
   12b94:	b	12d44 <__assert_fail@plt+0x185c>
   12b98:	ldr	r1, [sp, #16]
   12b9c:	ldr	r2, [sp, #12]
   12ba0:	mov	r0, #256	; 0x100
   12ba4:	add	r3, sp, #24
   12ba8:	str	r0, [sp]
   12bac:	mov	r0, #3
   12bb0:	bl	1129c <__fxstatat64@plt>
   12bb4:	cmp	r0, #0
   12bb8:	beq	12c14 <__assert_fail@plt+0x172c>
   12bbc:	mvn	r1, #0
   12bc0:	subs	r0, r1, #1
   12bc4:	sbc	r1, r1, #0
   12bc8:	strd	r0, [sl]
   12bcc:	bl	1138c <__errno_location@plt>
   12bd0:	mov	r2, r8
   12bd4:	ldr	r8, [r0]
   12bd8:	mov	r7, r2
   12bdc:	asr	r1, r8, #31
   12be0:	str	r8, [r2]
   12be4:	str	r1, [r2, #4]
   12be8:	b	12c34 <__assert_fail@plt+0x174c>
   12bec:	ldrd	r0, [sl]
   12bf0:	mov	r3, r7
   12bf4:	mov	ip, r9
   12bf8:	subs	r0, r5, r0
   12bfc:	sbcs	r0, r5, r1
   12c00:	blt	12a90 <__assert_fail@plt+0x15a8>
   12c04:	ldr	r7, [r8]
   12c08:	bl	1138c <__errno_location@plt>
   12c0c:	str	r7, [r0]
   12c10:	b	12d44 <__assert_fail@plt+0x185c>
   12c14:	ldrd	r0, [sl]
   12c18:	mvn	r7, #0
   12c1c:	subs	r0, r7, r0
   12c20:	sbcs	r0, r7, r1
   12c24:	blt	12af0 <__assert_fail@plt+0x1608>
   12c28:	mov	r7, r8
   12c2c:	ldr	r8, [r8]
   12c30:	bl	1138c <__errno_location@plt>
   12c34:	str	r8, [r0]
   12c38:	ldr	r3, [sp, #8]
   12c3c:	mvn	ip, #0
   12c40:	mov	r8, r7
   12c44:	ldr	r0, [r0]
   12c48:	mov	r7, r0
   12c4c:	cmp	ip, #0
   12c50:	bpl	12a64 <__assert_fail@plt+0x157c>
   12c54:	cmp	ip, #0
   12c58:	bmi	12d44 <__assert_fail@plt+0x185c>
   12c5c:	cmp	r5, #0
   12c60:	beq	12c8c <__assert_fail@plt+0x17a4>
   12c64:	ldrb	r0, [r3, #9]
   12c68:	mov	r9, #4
   12c6c:	cmp	r0, #0
   12c70:	bne	12c8c <__assert_fail@plt+0x17a4>
   12c74:	ldrb	r0, [r3, #10]
   12c78:	mov	r7, #21
   12c7c:	cmp	r0, #0
   12c80:	beq	12d44 <__assert_fail@plt+0x185c>
   12c84:	eors	r0, r6, #1
   12c88:	bne	12d44 <__assert_fail@plt+0x185c>
   12c8c:	ldr	r1, [sp, #20]
   12c90:	ldr	r7, [fp, #8]
   12c94:	mov	r0, #4
   12c98:	mov	r5, ip
   12c9c:	bl	1942c <__assert_fail@plt+0x7f44>
   12ca0:	mov	r3, r0
   12ca4:	eor	r0, r9, #4
   12ca8:	eor	r1, r7, #2
   12cac:	orrs	r0, r1, r0
   12cb0:	movwne	r0, #1
   12cb4:	orrs	r0, r6, r0
   12cb8:	beq	12d8c <__assert_fail@plt+0x18a4>
   12cbc:	ldrd	r0, [sl]
   12cc0:	mvn	r7, #0
   12cc4:	mov	r9, r3
   12cc8:	eor	r2, r1, r7
   12ccc:	eor	r3, r0, r7
   12cd0:	orrs	r2, r3, r2
   12cd4:	beq	12df8 <__assert_fail@plt+0x1910>
   12cd8:	subs	r0, r7, r0
   12cdc:	sbcs	r0, r7, r1
   12ce0:	bge	12e50 <__assert_fail@plt+0x1968>
   12ce4:	movw	r0, #49156	; 0xc004
   12ce8:	movw	r1, #49121	; 0xbfe1
   12cec:	cmp	r5, #0
   12cf0:	mov	r2, #5
   12cf4:	movt	r0, #1
   12cf8:	movt	r1, #1
   12cfc:	moveq	r1, r0
   12d00:	movw	r0, #53640	; 0xd188
   12d04:	movt	r0, #2
   12d08:	ldr	r8, [r0]
   12d0c:	mov	r0, #0
   12d10:	bl	1126c <dcgettext@plt>
   12d14:	mov	r7, r0
   12d18:	movw	r0, #53692	; 0xd1bc
   12d1c:	movt	r0, #2
   12d20:	ldr	r6, [r0]
   12d24:	add	r0, sp, #24
   12d28:	bl	138c8 <__assert_fail@plt+0x23e0>
   12d2c:	stm	sp, {r0, r9}
   12d30:	mov	r0, r8
   12d34:	mov	r1, #1
   12d38:	mov	r2, r7
   12d3c:	mov	r3, r6
   12d40:	b	12ddc <__assert_fail@plt+0x18f4>
   12d44:	ldr	r1, [sp, #20]
   12d48:	mov	r0, #4
   12d4c:	mov	r4, #4
   12d50:	bl	1942c <__assert_fail@plt+0x7f44>
   12d54:	movw	r1, #48419	; 0xbd23
   12d58:	mov	r5, r0
   12d5c:	mov	r0, #0
   12d60:	mov	r2, #5
   12d64:	movt	r1, #1
   12d68:	bl	1126c <dcgettext@plt>
   12d6c:	mov	r2, r0
   12d70:	mov	r0, #0
   12d74:	mov	r1, r7
   12d78:	mov	r3, r5
   12d7c:	bl	112fc <error@plt>
   12d80:	mov	r0, r4
   12d84:	sub	sp, fp, #28
   12d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d8c:	movw	r0, #49089	; 0xbfc1
   12d90:	movw	r1, #49041	; 0xbf91
   12d94:	cmp	r5, #0
   12d98:	mov	r2, #5
   12d9c:	mov	r5, r3
   12da0:	movt	r0, #1
   12da4:	movt	r1, #1
   12da8:	moveq	r1, r0
   12dac:	movw	r0, #53640	; 0xd188
   12db0:	movt	r0, #2
   12db4:	ldr	r6, [r0]
   12db8:	mov	r0, #0
   12dbc:	bl	1126c <dcgettext@plt>
   12dc0:	mov	r2, r0
   12dc4:	movw	r0, #53692	; 0xd1bc
   12dc8:	str	r5, [sp]
   12dcc:	mov	r1, #1
   12dd0:	movt	r0, #2
   12dd4:	ldr	r3, [r0]
   12dd8:	mov	r0, r6
   12ddc:	bl	113c8 <__fprintf_chk@plt>
   12de0:	bl	1a718 <__assert_fail@plt+0x9230>
   12de4:	cmp	r0, #0
   12de8:	movne	r4, #2
   12dec:	mov	r0, r4
   12df0:	sub	sp, fp, #28
   12df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12df8:	ldr	r1, [sp, #16]
   12dfc:	ldr	r2, [sp, #12]
   12e00:	mov	r0, #256	; 0x100
   12e04:	add	r3, sp, #24
   12e08:	str	r0, [sp]
   12e0c:	mov	r0, #3
   12e10:	bl	1129c <__fxstatat64@plt>
   12e14:	cmp	r0, #0
   12e18:	beq	12e40 <__assert_fail@plt+0x1958>
   12e1c:	subs	r0, r7, #1
   12e20:	sbc	r1, r7, #0
   12e24:	strd	r0, [sl]
   12e28:	bl	1138c <__errno_location@plt>
   12e2c:	ldr	r4, [r0]
   12e30:	asr	r1, r4, #31
   12e34:	str	r4, [r8]
   12e38:	str	r1, [r8, #4]
   12e3c:	b	12e58 <__assert_fail@plt+0x1970>
   12e40:	ldrd	r0, [sl]
   12e44:	subs	r0, r7, r0
   12e48:	sbcs	r0, r7, r1
   12e4c:	blt	12ce4 <__assert_fail@plt+0x17fc>
   12e50:	ldr	r4, [r8]
   12e54:	bl	1138c <__errno_location@plt>
   12e58:	movw	r1, #48419	; 0xbd23
   12e5c:	str	r4, [r0]
   12e60:	mov	r0, #0
   12e64:	mov	r2, #5
   12e68:	movt	r1, #1
   12e6c:	bl	1126c <dcgettext@plt>
   12e70:	mov	r2, r0
   12e74:	mov	r0, #0
   12e78:	mov	r1, r4
   12e7c:	mov	r3, r9
   12e80:	bl	112fc <error@plt>
   12e84:	mov	r4, #4
   12e88:	mov	r0, r4
   12e8c:	sub	sp, fp, #28
   12e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e98:	add	fp, sp, #24
   12e9c:	sub	sp, sp, #112	; 0x70
   12ea0:	mov	r4, r1
   12ea4:	mov	r7, r0
   12ea8:	ldr	r1, [r1, #24]
   12eac:	ldr	r0, [r0, #32]
   12eb0:	cmp	r3, #0
   12eb4:	mov	r5, r2
   12eb8:	mov	r2, r3
   12ebc:	mov	r6, r3
   12ec0:	movwne	r2, #512	; 0x200
   12ec4:	bl	11218 <unlinkat@plt>
   12ec8:	cmp	r0, #0
   12ecc:	beq	1300c <__assert_fail@plt+0x1b24>
   12ed0:	bl	1138c <__errno_location@plt>
   12ed4:	ldr	r6, [r0]
   12ed8:	mov	r8, r0
   12edc:	cmp	r6, #30
   12ee0:	bne	12f20 <__assert_fail@plt+0x1a38>
   12ee4:	ldr	r2, [r4, #24]
   12ee8:	ldr	r1, [r7, #32]
   12eec:	mov	r0, #256	; 0x100
   12ef0:	add	r3, sp, #8
   12ef4:	str	r0, [sp]
   12ef8:	mov	r0, #3
   12efc:	bl	1129c <__fxstatat64@plt>
   12f00:	cmp	r0, #0
   12f04:	beq	12f14 <__assert_fail@plt+0x1a2c>
   12f08:	ldr	r0, [r8]
   12f0c:	cmp	r0, #2
   12f10:	beq	12f1c <__assert_fail@plt+0x1a34>
   12f14:	mov	r0, #30
   12f18:	str	r0, [r8]
   12f1c:	ldr	r6, [r8]
   12f20:	ldrb	r0, [r5]
   12f24:	cmp	r0, #0
   12f28:	beq	12f54 <__assert_fail@plt+0x1a6c>
   12f2c:	mov	r5, #2
   12f30:	cmp	r6, #22
   12f34:	bhi	12f4c <__assert_fail@plt+0x1a64>
   12f38:	movw	r1, #4
   12f3c:	mov	r0, #1
   12f40:	movt	r1, #80	; 0x50
   12f44:	tst	r1, r0, lsl r6
   12f48:	bne	13060 <__assert_fail@plt+0x1b78>
   12f4c:	cmp	r6, #84	; 0x54
   12f50:	beq	13060 <__assert_fail@plt+0x1b78>
   12f54:	ldrh	r0, [r4, #56]	; 0x38
   12f58:	cmp	r0, #4
   12f5c:	bne	12f98 <__assert_fail@plt+0x1ab0>
   12f60:	sub	r0, r6, #17
   12f64:	cmp	r0, #22
   12f68:	bhi	12f98 <__assert_fail@plt+0x1ab0>
   12f6c:	movw	r2, #25
   12f70:	mov	r1, #1
   12f74:	movt	r2, #64	; 0x40
   12f78:	tst	r2, r1, lsl r0
   12f7c:	beq	12f98 <__assert_fail@plt+0x1ab0>
   12f80:	ldr	r0, [r4, #32]
   12f84:	cmp	r0, #13
   12f88:	cmpne	r0, #1
   12f8c:	bne	12f98 <__assert_fail@plt+0x1ab0>
   12f90:	mov	r6, r0
   12f94:	str	r0, [r8]
   12f98:	movw	r1, #48419	; 0xbd23
   12f9c:	mov	r0, #0
   12fa0:	mov	r2, #5
   12fa4:	movt	r1, #1
   12fa8:	bl	1126c <dcgettext@plt>
   12fac:	ldr	r1, [r4, #28]
   12fb0:	mov	r7, r0
   12fb4:	mov	r0, #4
   12fb8:	mov	r5, #4
   12fbc:	bl	1942c <__assert_fail@plt+0x7f44>
   12fc0:	mov	r3, r0
   12fc4:	mov	r0, #0
   12fc8:	mov	r1, r6
   12fcc:	mov	r2, r7
   12fd0:	bl	112fc <error@plt>
   12fd4:	ldr	r0, [r4, #4]
   12fd8:	ldr	r1, [r0, #48]	; 0x30
   12fdc:	cmp	r1, #0
   12fe0:	bmi	13060 <__assert_fail@plt+0x1b78>
   12fe4:	mov	r1, #1
   12fe8:	ldr	r2, [r0, #16]
   12fec:	cmp	r2, #0
   12ff0:	bne	13060 <__assert_fail@plt+0x1b78>
   12ff4:	str	r1, [r0, #16]
   12ff8:	ldr	r0, [r0, #4]
   12ffc:	ldr	r2, [r0, #48]	; 0x30
   13000:	cmn	r2, #1
   13004:	bgt	12fe8 <__assert_fail@plt+0x1b00>
   13008:	b	13060 <__assert_fail@plt+0x1b78>
   1300c:	ldrb	r0, [r5, #18]
   13010:	mov	r5, #2
   13014:	cmp	r0, #0
   13018:	beq	13060 <__assert_fail@plt+0x1b78>
   1301c:	movw	r0, #49175	; 0xc017
   13020:	movw	r1, #49197	; 0xc02d
   13024:	cmp	r6, #0
   13028:	mov	r2, #5
   1302c:	movt	r0, #1
   13030:	movt	r1, #1
   13034:	movne	r1, r0
   13038:	mov	r0, #0
   1303c:	bl	1126c <dcgettext@plt>
   13040:	ldr	r1, [r4, #28]
   13044:	mov	r6, r0
   13048:	mov	r0, #4
   1304c:	bl	1942c <__assert_fail@plt+0x7f44>
   13050:	mov	r2, r0
   13054:	mov	r0, #1
   13058:	mov	r1, r6
   1305c:	bl	113b0 <__printf_chk@plt>
   13060:	mov	r0, r5
   13064:	sub	sp, fp, #24
   13068:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1306c:	mov	r0, #1
   13070:	b	115e8 <__assert_fail@plt+0x100>
   13074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13078:	add	fp, sp, #28
   1307c:	sub	sp, sp, #12
   13080:	mov	r4, r3
   13084:	mov	r9, r2
   13088:	mov	r7, r1
   1308c:	mov	r8, r0
   13090:	bl	11374 <strlen@plt>
   13094:	ldr	r6, [r7]
   13098:	cmp	r6, #0
   1309c:	beq	13148 <__assert_fail@plt+0x1c60>
   130a0:	mov	r5, r0
   130a4:	cmp	r9, #0
   130a8:	beq	13158 <__assert_fail@plt+0x1c70>
   130ac:	add	r0, r7, #4
   130b0:	mvn	sl, #0
   130b4:	mov	r7, #0
   130b8:	str	r9, [sp]
   130bc:	str	r0, [sp, #8]
   130c0:	mov	r0, #0
   130c4:	str	r0, [sp, #4]
   130c8:	mov	r0, r9
   130cc:	b	13110 <__assert_fail@plt+0x1c28>
   130d0:	ldr	r0, [sp]
   130d4:	mov	r1, r9
   130d8:	mov	r2, r4
   130dc:	mla	r0, sl, r4, r0
   130e0:	bl	11368 <bcmp@plt>
   130e4:	ldr	r1, [sp, #4]
   130e8:	cmp	r0, #0
   130ec:	movwne	r0, #1
   130f0:	orr	r1, r1, r0
   130f4:	str	r1, [sp, #4]
   130f8:	ldr	r0, [sp, #8]
   130fc:	add	r9, r9, r4
   13100:	ldr	r6, [r0, r7, lsl #2]
   13104:	add	r7, r7, #1
   13108:	cmp	r6, #0
   1310c:	beq	131cc <__assert_fail@plt+0x1ce4>
   13110:	mov	r0, r6
   13114:	mov	r1, r8
   13118:	mov	r2, r5
   1311c:	bl	11494 <strncmp@plt>
   13120:	cmp	r0, #0
   13124:	bne	130f8 <__assert_fail@plt+0x1c10>
   13128:	mov	r0, r6
   1312c:	bl	11374 <strlen@plt>
   13130:	cmp	r0, r5
   13134:	beq	1314c <__assert_fail@plt+0x1c64>
   13138:	cmn	sl, #1
   1313c:	bne	130d0 <__assert_fail@plt+0x1be8>
   13140:	mov	sl, r7
   13144:	b	130f8 <__assert_fail@plt+0x1c10>
   13148:	mvn	r7, #0
   1314c:	mov	r0, r7
   13150:	sub	sp, fp, #28
   13154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13158:	add	r4, r7, #4
   1315c:	mov	r0, #0
   13160:	mvn	r9, #0
   13164:	mvn	sl, #0
   13168:	mov	r7, #0
   1316c:	str	r0, [sp, #4]
   13170:	b	131a0 <__assert_fail@plt+0x1cb8>
   13174:	ldr	r1, [sp, #4]
   13178:	subs	r0, sl, r9
   1317c:	movwne	r0, #1
   13180:	cmn	sl, #1
   13184:	moveq	sl, r7
   13188:	orr	r1, r1, r0
   1318c:	str	r1, [sp, #4]
   13190:	ldr	r6, [r4, r7, lsl #2]
   13194:	add	r7, r7, #1
   13198:	cmp	r6, #0
   1319c:	beq	131cc <__assert_fail@plt+0x1ce4>
   131a0:	mov	r0, r6
   131a4:	mov	r1, r8
   131a8:	mov	r2, r5
   131ac:	bl	11494 <strncmp@plt>
   131b0:	cmp	r0, #0
   131b4:	bne	13190 <__assert_fail@plt+0x1ca8>
   131b8:	mov	r0, r6
   131bc:	bl	11374 <strlen@plt>
   131c0:	cmp	r0, r5
   131c4:	bne	13174 <__assert_fail@plt+0x1c8c>
   131c8:	b	1314c <__assert_fail@plt+0x1c64>
   131cc:	ldr	r0, [sp, #4]
   131d0:	tst	r0, #1
   131d4:	mvnne	sl, #1
   131d8:	mov	r0, sl
   131dc:	sub	sp, fp, #28
   131e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e4:	push	{r4, r5, r6, r7, fp, lr}
   131e8:	add	fp, sp, #16
   131ec:	mov	r5, r0
   131f0:	ldr	r0, [r1]
   131f4:	mvn	r4, #0
   131f8:	cmp	r0, #0
   131fc:	beq	13228 <__assert_fail@plt+0x1d40>
   13200:	add	r7, r1, #4
   13204:	mov	r6, #0
   13208:	mov	r1, r5
   1320c:	bl	11200 <strcmp@plt>
   13210:	cmp	r0, #0
   13214:	beq	13230 <__assert_fail@plt+0x1d48>
   13218:	ldr	r0, [r7, r6, lsl #2]
   1321c:	add	r6, r6, #1
   13220:	cmp	r0, #0
   13224:	bne	13208 <__assert_fail@plt+0x1d20>
   13228:	mov	r0, r4
   1322c:	pop	{r4, r5, r6, r7, fp, pc}
   13230:	mov	r0, r6
   13234:	pop	{r4, r5, r6, r7, fp, pc}
   13238:	push	{r4, r5, r6, sl, fp, lr}
   1323c:	add	fp, sp, #16
   13240:	sub	sp, sp, #8
   13244:	mov	r5, r0
   13248:	movw	r0, #49224	; 0xc048
   1324c:	mov	r4, r1
   13250:	movw	r1, #49251	; 0xc063
   13254:	cmn	r2, #1
   13258:	mov	r2, #5
   1325c:	movt	r0, #1
   13260:	movt	r1, #1
   13264:	moveq	r1, r0
   13268:	mov	r0, #0
   1326c:	bl	1126c <dcgettext@plt>
   13270:	mov	r6, r0
   13274:	mov	r0, #0
   13278:	mov	r1, #8
   1327c:	mov	r2, r4
   13280:	bl	19384 <__assert_fail@plt+0x7e9c>
   13284:	mov	r4, r0
   13288:	mov	r0, #1
   1328c:	mov	r1, r5
   13290:	bl	19944 <__assert_fail@plt+0x845c>
   13294:	str	r0, [sp]
   13298:	mov	r0, #0
   1329c:	mov	r1, #0
   132a0:	mov	r2, r6
   132a4:	mov	r3, r4
   132a8:	bl	112fc <error@plt>
   132ac:	sub	sp, fp, #16
   132b0:	pop	{r4, r5, r6, sl, fp, pc}
   132b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132b8:	add	fp, sp, #28
   132bc:	sub	sp, sp, #4
   132c0:	mov	sl, r1
   132c4:	movw	r1, #49280	; 0xc080
   132c8:	mov	r4, r2
   132cc:	mov	r6, r0
   132d0:	mov	r0, #0
   132d4:	mov	r2, #5
   132d8:	mov	r8, #0
   132dc:	movt	r1, #1
   132e0:	bl	1126c <dcgettext@plt>
   132e4:	movw	r1, #53640	; 0xd188
   132e8:	movt	r1, #2
   132ec:	ldr	r1, [r1]
   132f0:	bl	111dc <fputs_unlocked@plt>
   132f4:	ldr	r7, [r6]
   132f8:	cmp	r7, #0
   132fc:	beq	133b8 <__assert_fail@plt+0x1ed0>
   13300:	add	r0, r6, #4
   13304:	mov	r9, #0
   13308:	mov	r6, #0
   1330c:	str	r0, [sp]
   13310:	cmp	r9, #0
   13314:	bne	1336c <__assert_fail@plt+0x1e84>
   13318:	mov	r5, #0
   1331c:	movw	r0, #53640	; 0xd188
   13320:	movt	r0, #2
   13324:	ldr	r6, [r0]
   13328:	mov	r0, r7
   1332c:	bl	19954 <__assert_fail@plt+0x846c>
   13330:	movw	r2, #49301	; 0xc095
   13334:	mov	r3, r0
   13338:	mov	r0, r6
   1333c:	mov	r1, #1
   13340:	movt	r2, #1
   13344:	bl	113c8 <__fprintf_chk@plt>
   13348:	add	r6, sl, r5
   1334c:	ldr	r0, [sp]
   13350:	add	r8, r8, r4
   13354:	ldr	r7, [r0, -r9, lsl #2]
   13358:	sub	r9, r9, #1
   1335c:	cmp	r7, #0
   13360:	beq	133b8 <__assert_fail@plt+0x1ed0>
   13364:	cmp	r9, #0
   13368:	beq	13318 <__assert_fail@plt+0x1e30>
   1336c:	add	r1, sl, r8
   13370:	mov	r0, r6
   13374:	mov	r2, r4
   13378:	bl	11368 <bcmp@plt>
   1337c:	cmp	r0, #0
   13380:	mov	r5, r8
   13384:	bne	1331c <__assert_fail@plt+0x1e34>
   13388:	movw	r0, #53640	; 0xd188
   1338c:	movt	r0, #2
   13390:	ldr	r5, [r0]
   13394:	mov	r0, r7
   13398:	bl	19954 <__assert_fail@plt+0x846c>
   1339c:	movw	r2, #49309	; 0xc09d
   133a0:	mov	r3, r0
   133a4:	mov	r0, r5
   133a8:	mov	r1, #1
   133ac:	movt	r2, #1
   133b0:	bl	113c8 <__fprintf_chk@plt>
   133b4:	b	1334c <__assert_fail@plt+0x1e64>
   133b8:	movw	r0, #53640	; 0xd188
   133bc:	movt	r0, #2
   133c0:	ldr	r0, [r0]
   133c4:	ldr	r1, [r0, #20]
   133c8:	ldr	r2, [r0, #24]
   133cc:	cmp	r1, r2
   133d0:	addcc	r2, r1, #1
   133d4:	strcc	r2, [r0, #20]
   133d8:	movcc	r0, #10
   133dc:	strbcc	r0, [r1]
   133e0:	subcc	sp, fp, #28
   133e4:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133e8:	mov	r1, #10
   133ec:	sub	sp, fp, #28
   133f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133f4:	b	11404 <__overflow@plt>
   133f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133fc:	add	fp, sp, #28
   13400:	sub	sp, sp, #12
   13404:	mov	sl, r0
   13408:	ldr	r0, [fp, #16]
   1340c:	ldr	r9, [fp, #8]
   13410:	mov	r5, r3
   13414:	mov	r8, r2
   13418:	mov	r6, r1
   1341c:	cmp	r0, #0
   13420:	beq	13450 <__assert_fail@plt+0x1f68>
   13424:	mov	r0, r6
   13428:	mov	r1, r8
   1342c:	mov	r2, r5
   13430:	mov	r3, r9
   13434:	bl	13074 <__assert_fail@plt+0x1b8c>
   13438:	mov	r4, r0
   1343c:	cmn	r4, #1
   13440:	ble	134a0 <__assert_fail@plt+0x1fb8>
   13444:	mov	r0, r4
   13448:	sub	sp, fp, #28
   1344c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13450:	ldr	r0, [r8]
   13454:	movw	r7, #49224	; 0xc048
   13458:	str	r5, [sp, #8]
   1345c:	movt	r7, #1
   13460:	cmp	r0, #0
   13464:	beq	134b8 <__assert_fail@plt+0x1fd0>
   13468:	add	r5, r8, #4
   1346c:	mov	r4, #0
   13470:	mov	r1, r6
   13474:	bl	11200 <strcmp@plt>
   13478:	cmp	r0, #0
   1347c:	beq	13494 <__assert_fail@plt+0x1fac>
   13480:	ldr	r0, [r5, r4, lsl #2]
   13484:	add	r4, r4, #1
   13488:	cmp	r0, #0
   1348c:	bne	13470 <__assert_fail@plt+0x1f88>
   13490:	b	134b8 <__assert_fail@plt+0x1fd0>
   13494:	ldr	r5, [sp, #8]
   13498:	cmn	r4, #1
   1349c:	bgt	13444 <__assert_fail@plt+0x1f5c>
   134a0:	movw	r0, #49224	; 0xc048
   134a4:	movw	r7, #49251	; 0xc063
   134a8:	str	r5, [sp, #8]
   134ac:	movt	r0, #1
   134b0:	movt	r7, #1
   134b4:	moveq	r7, r0
   134b8:	ldr	r5, [fp, #12]
   134bc:	mov	r0, #0
   134c0:	mov	r1, r7
   134c4:	mov	r2, #5
   134c8:	bl	1126c <dcgettext@plt>
   134cc:	mov	r4, r0
   134d0:	mov	r0, #0
   134d4:	mov	r1, #8
   134d8:	mov	r2, r6
   134dc:	bl	19384 <__assert_fail@plt+0x7e9c>
   134e0:	mov	r6, r0
   134e4:	mov	r0, #1
   134e8:	mov	r1, sl
   134ec:	bl	19944 <__assert_fail@plt+0x845c>
   134f0:	str	r0, [sp]
   134f4:	mov	r0, #0
   134f8:	mov	r1, #0
   134fc:	mov	r2, r4
   13500:	mov	r3, r6
   13504:	bl	112fc <error@plt>
   13508:	ldr	r1, [sp, #8]
   1350c:	mov	r0, r8
   13510:	mov	r2, r9
   13514:	bl	132b4 <__assert_fail@plt+0x1dcc>
   13518:	blx	r5
   1351c:	mvn	r4, #0
   13520:	mov	r0, r4
   13524:	sub	sp, fp, #28
   13528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1352c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13530:	add	fp, sp, #24
   13534:	ldr	r6, [r1]
   13538:	cmp	r6, #0
   1353c:	beq	135a0 <__assert_fail@plt+0x20b8>
   13540:	mov	r8, r1
   13544:	mov	r7, r2
   13548:	mov	r1, r2
   1354c:	mov	r2, r3
   13550:	mov	r4, r3
   13554:	mov	r9, r0
   13558:	bl	11368 <bcmp@plt>
   1355c:	cmp	r0, #0
   13560:	beq	13598 <__assert_fail@plt+0x20b0>
   13564:	add	r7, r7, r4
   13568:	add	r5, r8, #4
   1356c:	ldr	r6, [r5]
   13570:	cmp	r6, #0
   13574:	beq	135a0 <__assert_fail@plt+0x20b8>
   13578:	mov	r0, r9
   1357c:	mov	r1, r7
   13580:	mov	r2, r4
   13584:	bl	11368 <bcmp@plt>
   13588:	add	r7, r7, r4
   1358c:	add	r5, r5, #4
   13590:	cmp	r0, #0
   13594:	bne	1356c <__assert_fail@plt+0x2084>
   13598:	mov	r0, r6
   1359c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135a0:	mov	r6, #0
   135a4:	mov	r0, r6
   135a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135ac:	sub	r0, r0, #1
   135b0:	ldrb	r3, [r0, #1]!
   135b4:	cmp	r3, #47	; 0x2f
   135b8:	beq	135b0 <__assert_fail@plt+0x20c8>
   135bc:	mov	r2, #0
   135c0:	mov	r1, r0
   135c4:	uxtb	r3, r3
   135c8:	cmp	r3, #47	; 0x2f
   135cc:	bne	135e4 <__assert_fail@plt+0x20fc>
   135d0:	ldrb	r3, [r1, #1]!
   135d4:	mov	r2, #1
   135d8:	uxtb	r3, r3
   135dc:	cmp	r3, #47	; 0x2f
   135e0:	beq	135d0 <__assert_fail@plt+0x20e8>
   135e4:	cmp	r3, #0
   135e8:	bxeq	lr
   135ec:	tst	r2, #1
   135f0:	mov	r2, #0
   135f4:	movne	r0, r1
   135f8:	ldrb	r3, [r1, #1]!
   135fc:	uxtb	r3, r3
   13600:	cmp	r3, #47	; 0x2f
   13604:	bne	135e4 <__assert_fail@plt+0x20fc>
   13608:	b	135d0 <__assert_fail@plt+0x20e8>
   1360c:	push	{r4, sl, fp, lr}
   13610:	add	fp, sp, #8
   13614:	mov	r4, r0
   13618:	bl	11374 <strlen@plt>
   1361c:	mov	r1, r0
   13620:	sub	r2, r4, #1
   13624:	mov	r0, r1
   13628:	cmp	r1, #2
   1362c:	bcc	13640 <__assert_fail@plt+0x2158>
   13630:	ldrb	r3, [r2, r0]
   13634:	sub	r1, r0, #1
   13638:	cmp	r3, #47	; 0x2f
   1363c:	beq	13624 <__assert_fail@plt+0x213c>
   13640:	pop	{r4, sl, fp, pc}
   13644:	movw	r1, #53680	; 0xd1b0
   13648:	movt	r1, #2
   1364c:	str	r0, [r1]
   13650:	bx	lr
   13654:	push	{r4, r5, r6, sl, fp, lr}
   13658:	add	fp, sp, #16
   1365c:	sub	sp, sp, #8
   13660:	movw	r6, #53648	; 0xd190
   13664:	movt	r6, #2
   13668:	ldr	r5, [r6]
   1366c:	mov	r0, r5
   13670:	bl	13ab8 <__assert_fail@plt+0x25d0>
   13674:	cmp	r0, #0
   13678:	beq	136b8 <__assert_fail@plt+0x21d0>
   1367c:	mov	r0, #1
   13680:	mov	r2, #0
   13684:	mov	r3, #0
   13688:	mov	r4, #0
   1368c:	str	r0, [sp]
   13690:	mov	r0, r5
   13694:	bl	13b20 <__assert_fail@plt+0x2638>
   13698:	cmp	r0, #0
   1369c:	bne	136bc <__assert_fail@plt+0x21d4>
   136a0:	ldr	r0, [r6]
   136a4:	bl	1386c <__assert_fail@plt+0x2384>
   136a8:	cmp	r0, #0
   136ac:	mov	r4, r0
   136b0:	movwne	r4, #1
   136b4:	b	136bc <__assert_fail@plt+0x21d4>
   136b8:	mov	r4, #0
   136bc:	ldr	r0, [r6]
   136c0:	bl	1a870 <__assert_fail@plt+0x9388>
   136c4:	cmp	r4, #0
   136c8:	cmpeq	r0, #0
   136cc:	bne	136dc <__assert_fail@plt+0x21f4>
   136d0:	sub	sp, fp, #16
   136d4:	pop	{r4, r5, r6, sl, fp, lr}
   136d8:	b	13780 <__assert_fail@plt+0x2298>
   136dc:	movw	r1, #49314	; 0xc0a2
   136e0:	mov	r0, #0
   136e4:	mov	r2, #5
   136e8:	movt	r1, #1
   136ec:	bl	1126c <dcgettext@plt>
   136f0:	mov	r4, r0
   136f4:	movw	r0, #53680	; 0xd1b0
   136f8:	movt	r0, #2
   136fc:	ldr	r6, [r0]
   13700:	bl	1138c <__errno_location@plt>
   13704:	ldr	r5, [r0]
   13708:	cmp	r6, #0
   1370c:	bne	13728 <__assert_fail@plt+0x2240>
   13710:	movw	r2, #49311	; 0xc09f
   13714:	mov	r0, #0
   13718:	mov	r1, r5
   1371c:	mov	r3, r4
   13720:	movt	r2, #1
   13724:	b	13748 <__assert_fail@plt+0x2260>
   13728:	mov	r0, r6
   1372c:	bl	195cc <__assert_fail@plt+0x80e4>
   13730:	movw	r2, #49333	; 0xc0b5
   13734:	mov	r3, r0
   13738:	str	r4, [sp]
   1373c:	mov	r0, #0
   13740:	mov	r1, r5
   13744:	movt	r2, #1
   13748:	bl	112fc <error@plt>
   1374c:	bl	13780 <__assert_fail@plt+0x2298>
   13750:	movw	r0, #53552	; 0xd130
   13754:	movt	r0, #2
   13758:	ldr	r0, [r0]
   1375c:	bl	11248 <_exit@plt>
   13760:	movw	r1, #53684	; 0xd1b4
   13764:	movt	r1, #2
   13768:	str	r0, [r1, #4]
   1376c:	bx	lr
   13770:	movw	r1, #53684	; 0xd1b4
   13774:	movt	r1, #2
   13778:	strb	r0, [r1]
   1377c:	bx	lr
   13780:	push	{r4, r5, r6, sl, fp, lr}
   13784:	add	fp, sp, #16
   13788:	sub	sp, sp, #8
   1378c:	movw	r0, #53652	; 0xd194
   13790:	movt	r0, #2
   13794:	ldr	r0, [r0]
   13798:	bl	1a870 <__assert_fail@plt+0x9388>
   1379c:	cmp	r0, #0
   137a0:	beq	137c8 <__assert_fail@plt+0x22e0>
   137a4:	movw	r5, #53684	; 0xd1b4
   137a8:	movt	r5, #2
   137ac:	ldrb	r0, [r5]
   137b0:	cmp	r0, #0
   137b4:	beq	137f4 <__assert_fail@plt+0x230c>
   137b8:	bl	1138c <__errno_location@plt>
   137bc:	ldr	r0, [r0]
   137c0:	cmp	r0, #32
   137c4:	bne	137f4 <__assert_fail@plt+0x230c>
   137c8:	movw	r0, #53640	; 0xd188
   137cc:	movt	r0, #2
   137d0:	ldr	r0, [r0]
   137d4:	bl	1a870 <__assert_fail@plt+0x9388>
   137d8:	cmp	r0, #0
   137dc:	subeq	sp, fp, #16
   137e0:	popeq	{r4, r5, r6, sl, fp, pc}
   137e4:	movw	r0, #53552	; 0xd130
   137e8:	movt	r0, #2
   137ec:	ldr	r0, [r0]
   137f0:	bl	11248 <_exit@plt>
   137f4:	movw	r1, #49340	; 0xc0bc
   137f8:	mov	r0, #0
   137fc:	mov	r2, #5
   13800:	movt	r1, #1
   13804:	bl	1126c <dcgettext@plt>
   13808:	ldr	r6, [r5, #4]
   1380c:	mov	r4, r0
   13810:	bl	1138c <__errno_location@plt>
   13814:	ldr	r5, [r0]
   13818:	cmp	r6, #0
   1381c:	bne	13838 <__assert_fail@plt+0x2350>
   13820:	movw	r2, #49311	; 0xc09f
   13824:	mov	r0, #0
   13828:	mov	r1, r5
   1382c:	mov	r3, r4
   13830:	movt	r2, #1
   13834:	b	13858 <__assert_fail@plt+0x2370>
   13838:	mov	r0, r6
   1383c:	bl	195cc <__assert_fail@plt+0x80e4>
   13840:	movw	r2, #49333	; 0xc0b5
   13844:	mov	r3, r0
   13848:	str	r4, [sp]
   1384c:	mov	r0, #0
   13850:	mov	r1, r5
   13854:	movt	r2, #1
   13858:	bl	112fc <error@plt>
   1385c:	movw	r0, #53552	; 0xd130
   13860:	movt	r0, #2
   13864:	ldr	r0, [r0]
   13868:	bl	11248 <_exit@plt>
   1386c:	push	{r4, sl, fp, lr}
   13870:	add	fp, sp, #8
   13874:	sub	sp, sp, #8
   13878:	mov	r4, r0
   1387c:	cmp	r0, #0
   13880:	beq	138b8 <__assert_fail@plt+0x23d0>
   13884:	mov	r0, r4
   13888:	bl	1132c <__freading@plt>
   1388c:	cmp	r0, #0
   13890:	beq	138b8 <__assert_fail@plt+0x23d0>
   13894:	ldrb	r0, [r4, #1]
   13898:	tst	r0, #1
   1389c:	beq	138b8 <__assert_fail@plt+0x23d0>
   138a0:	mov	r0, #1
   138a4:	mov	r2, #0
   138a8:	mov	r3, #0
   138ac:	str	r0, [sp]
   138b0:	mov	r0, r4
   138b4:	bl	13b20 <__assert_fail@plt+0x2638>
   138b8:	mov	r0, r4
   138bc:	sub	sp, fp, #8
   138c0:	pop	{r4, sl, fp, lr}
   138c4:	b	1120c <fflush@plt>
   138c8:	ldr	r1, [r0, #16]
   138cc:	and	r1, r1, #61440	; 0xf000
   138d0:	sub	r1, r1, #4096	; 0x1000
   138d4:	lsr	r2, r1, #12
   138d8:	cmp	r2, #11
   138dc:	bhi	13948 <__assert_fail@plt+0x2460>
   138e0:	movw	r1, #49384	; 0xc0e8
   138e4:	add	r3, pc, #4
   138e8:	movt	r1, #1
   138ec:	ldr	pc, [r3, r2, lsl #2]
   138f0:	andeq	r3, r1, r0, lsr #18
   138f4:	andeq	r3, r1, r4, lsr r9
   138f8:	andeq	r3, r1, r8, asr #18
   138fc:	andeq	r3, r1, r8, lsr #18
   13900:	andeq	r3, r1, r8, asr #18
   13904:	andeq	r3, r1, ip, asr r9
   13908:	andeq	r3, r1, r8, asr #18
   1390c:	muleq	r1, r8, r9
   13910:	andeq	r3, r1, r8, asr #18
   13914:	andeq	r3, r1, r0, ror r9
   13918:	andeq	r3, r1, r8, asr #18
   1391c:	andeq	r3, r1, r4, lsl #19
   13920:	movw	r1, #49450	; 0xc12a
   13924:	movt	r1, #1
   13928:	mov	r0, #0
   1392c:	mov	r2, #5
   13930:	b	1126c <dcgettext@plt>
   13934:	movw	r1, #49427	; 0xc113
   13938:	movt	r1, #1
   1393c:	mov	r0, #0
   13940:	mov	r2, #5
   13944:	b	1126c <dcgettext@plt>
   13948:	movw	r1, #49462	; 0xc136
   1394c:	movt	r1, #1
   13950:	mov	r0, #0
   13954:	mov	r2, #5
   13958:	b	1126c <dcgettext@plt>
   1395c:	movw	r1, #49408	; 0xc100
   13960:	movt	r1, #1
   13964:	mov	r0, #0
   13968:	mov	r2, #5
   1396c:	b	1126c <dcgettext@plt>
   13970:	movw	r1, #49394	; 0xc0f2
   13974:	movt	r1, #1
   13978:	mov	r0, #0
   1397c:	mov	r2, #5
   13980:	b	1126c <dcgettext@plt>
   13984:	movw	r1, #49455	; 0xc12f
   13988:	movt	r1, #1
   1398c:	mov	r0, #0
   13990:	mov	r2, #5
   13994:	b	1126c <dcgettext@plt>
   13998:	ldrd	r0, [r0, #48]	; 0x30
   1399c:	orrs	r0, r0, r1
   139a0:	movw	r0, #49352	; 0xc0c8
   139a4:	movw	r1, #49371	; 0xc0db
   139a8:	movt	r0, #1
   139ac:	movt	r1, #1
   139b0:	moveq	r1, r0
   139b4:	mov	r0, #0
   139b8:	mov	r2, #5
   139bc:	b	1126c <dcgettext@plt>
   139c0:	push	{fp, lr}
   139c4:	mov	fp, sp
   139c8:	bl	139d8 <__assert_fail@plt+0x24f0>
   139cc:	cmp	r0, #0
   139d0:	popne	{fp, pc}
   139d4:	bl	1a658 <__assert_fail@plt+0x9170>
   139d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139dc:	add	fp, sp, #28
   139e0:	push	{r2}		; (str r2, [sp, #-4]!)
   139e4:	mov	sl, r1
   139e8:	mov	r7, r0
   139ec:	bl	135ac <__assert_fail@plt+0x20c4>
   139f0:	sub	r4, r0, r7
   139f4:	bl	1360c <__assert_fail@plt+0x2124>
   139f8:	mov	r6, r0
   139fc:	add	r5, r4, r0
   13a00:	mov	r0, sl
   13a04:	bl	11374 <strlen@plt>
   13a08:	mov	r9, r0
   13a0c:	cmp	r6, #0
   13a10:	beq	13a38 <__assert_fail@plt+0x2550>
   13a14:	add	r0, r5, r7
   13a18:	mov	r4, #0
   13a1c:	ldrb	r0, [r0, #-1]
   13a20:	cmp	r0, #47	; 0x2f
   13a24:	beq	13a48 <__assert_fail@plt+0x2560>
   13a28:	ldrb	r0, [sl]
   13a2c:	subs	r4, r0, #47	; 0x2f
   13a30:	movwne	r4, #47	; 0x2f
   13a34:	b	13a48 <__assert_fail@plt+0x2560>
   13a38:	ldrb	r0, [sl]
   13a3c:	mov	r4, #0
   13a40:	cmp	r0, #47	; 0x2f
   13a44:	movweq	r4, #46	; 0x2e
   13a48:	uxtb	r8, r4
   13a4c:	add	r0, r9, r5
   13a50:	cmp	r8, #0
   13a54:	movwne	r8, #1
   13a58:	add	r0, r0, r8
   13a5c:	add	r0, r0, #1
   13a60:	bl	1a7ec <__assert_fail@plt+0x9304>
   13a64:	mov	r6, r0
   13a68:	cmp	r0, #0
   13a6c:	beq	13aac <__assert_fail@plt+0x25c4>
   13a70:	mov	r0, r6
   13a74:	mov	r1, r7
   13a78:	mov	r2, r5
   13a7c:	mvn	r3, #0
   13a80:	bl	114dc <__mempcpy_chk@plt>
   13a84:	ldr	r1, [sp]
   13a88:	strb	r4, [r0], r8
   13a8c:	mov	r2, r9
   13a90:	mvn	r3, #0
   13a94:	cmp	r1, #0
   13a98:	strne	r0, [r1]
   13a9c:	mov	r1, sl
   13aa0:	bl	114dc <__mempcpy_chk@plt>
   13aa4:	mov	r1, #0
   13aa8:	strb	r1, [r0]
   13aac:	mov	r0, r6
   13ab0:	sub	sp, fp, #28
   13ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ab8:	ldrd	r2, [r0, #16]
   13abc:	mov	r1, #0
   13ac0:	cmp	r3, r2
   13ac4:	bhi	13af0 <__assert_fail@plt+0x2608>
   13ac8:	ldrb	r3, [r0, #1]
   13acc:	ldmib	r0, {r1, r2}
   13ad0:	sub	r1, r2, r1
   13ad4:	mov	r2, #0
   13ad8:	tst	r3, #1
   13adc:	beq	13aec <__assert_fail@plt+0x2604>
   13ae0:	ldr	r2, [r0, #36]	; 0x24
   13ae4:	ldr	r0, [r0, #44]	; 0x2c
   13ae8:	sub	r2, r0, r2
   13aec:	add	r1, r1, r2
   13af0:	mov	r0, r1
   13af4:	bx	lr
   13af8:	push	{r4, r5, r6, sl, fp, lr}
   13afc:	add	fp, sp, #16
   13b00:	mov	r4, r0
   13b04:	bl	1138c <__errno_location@plt>
   13b08:	ldr	r6, [r0]
   13b0c:	mov	r5, r0
   13b10:	mov	r0, r4
   13b14:	bl	11230 <free@plt>
   13b18:	str	r6, [r5]
   13b1c:	pop	{r4, r5, r6, sl, fp, pc}
   13b20:	push	{r4, r5, r6, r7, fp, lr}
   13b24:	add	fp, sp, #16
   13b28:	sub	sp, sp, #8
   13b2c:	mov	r4, r0
   13b30:	ldr	r0, [r0, #4]
   13b34:	mov	r5, r3
   13b38:	mov	r6, r2
   13b3c:	ldr	r1, [r4, #8]
   13b40:	cmp	r1, r0
   13b44:	bne	13b60 <__assert_fail@plt+0x2678>
   13b48:	ldrd	r0, [r4, #16]
   13b4c:	cmp	r1, r0
   13b50:	bne	13b60 <__assert_fail@plt+0x2678>
   13b54:	ldr	r0, [r4, #36]	; 0x24
   13b58:	cmp	r0, #0
   13b5c:	beq	13b78 <__assert_fail@plt+0x2690>
   13b60:	mov	r0, r4
   13b64:	mov	r2, r6
   13b68:	mov	r3, r5
   13b6c:	sub	sp, fp, #16
   13b70:	pop	{r4, r5, r6, r7, fp, lr}
   13b74:	b	113e0 <fseeko64@plt>
   13b78:	ldr	r7, [fp, #8]
   13b7c:	mov	r0, r4
   13b80:	bl	113bc <fileno@plt>
   13b84:	mov	r2, r6
   13b88:	mov	r3, r5
   13b8c:	str	r7, [sp]
   13b90:	bl	112cc <lseek64@plt>
   13b94:	and	r2, r0, r1
   13b98:	cmn	r2, #1
   13b9c:	beq	13bbc <__assert_fail@plt+0x26d4>
   13ba0:	strd	r0, [r4, #80]	; 0x50
   13ba4:	ldr	r0, [r4]
   13ba8:	bic	r0, r0, #16
   13bac:	str	r0, [r4]
   13bb0:	mov	r0, #0
   13bb4:	sub	sp, fp, #16
   13bb8:	pop	{r4, r5, r6, r7, fp, pc}
   13bbc:	mvn	r0, #0
   13bc0:	sub	sp, fp, #16
   13bc4:	pop	{r4, r5, r6, r7, fp, pc}
   13bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bcc:	add	fp, sp, #28
   13bd0:	sub	sp, sp, #28
   13bd4:	cmp	r1, #4096	; 0x1000
   13bd8:	bcs	13bf4 <__assert_fail@plt+0x270c>
   13bdc:	mov	sl, r0
   13be0:	and	r0, r1, #516	; 0x204
   13be4:	mov	r6, r1
   13be8:	cmp	r0, #516	; 0x204
   13bec:	tstne	r6, #18
   13bf0:	bne	13c10 <__assert_fail@plt+0x2728>
   13bf4:	bl	1138c <__errno_location@plt>
   13bf8:	mov	r1, #22
   13bfc:	mov	r4, #0
   13c00:	str	r1, [r0]
   13c04:	mov	r0, r4
   13c08:	sub	sp, fp, #28
   13c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c10:	mov	r0, #1
   13c14:	mov	r1, #96	; 0x60
   13c18:	mov	r5, r2
   13c1c:	bl	1a798 <__assert_fail@plt+0x92b0>
   13c20:	cmp	r0, #0
   13c24:	beq	14204 <__assert_fail@plt+0x2d1c>
   13c28:	mov	r4, r0
   13c2c:	mvn	r0, #99	; 0x63
   13c30:	tst	r6, #2
   13c34:	mov	r1, r6
   13c38:	str	r0, [r4, #32]
   13c3c:	bic	r0, r6, #516	; 0x204
   13c40:	str	r5, [r4, #44]	; 0x2c
   13c44:	str	r4, [sp, #24]
   13c48:	orrne	r1, r0, #4
   13c4c:	str	r1, [r4, #48]	; 0x30
   13c50:	ldr	r0, [sl]
   13c54:	cmp	r0, #0
   13c58:	beq	13cbc <__assert_fail@plt+0x27d4>
   13c5c:	add	r7, sl, #4
   13c60:	mov	r4, #0
   13c64:	bl	11374 <strlen@plt>
   13c68:	cmp	r0, r4
   13c6c:	movhi	r4, r0
   13c70:	ldr	r0, [r7], #4
   13c74:	cmp	r0, #0
   13c78:	bne	13c64 <__assert_fail@plt+0x277c>
   13c7c:	add	r0, r4, #1
   13c80:	ldr	r4, [sp, #24]
   13c84:	cmp	r0, #4096	; 0x1000
   13c88:	movls	r0, #4096	; 0x1000
   13c8c:	ldr	r1, [r4, #36]	; 0x24
   13c90:	add	r0, r0, #256	; 0x100
   13c94:	adds	r1, r0, r1
   13c98:	bcc	13cd0 <__assert_fail@plt+0x27e8>
   13c9c:	ldr	r0, [r4, #24]
   13ca0:	bl	13af8 <__assert_fail@plt+0x2610>
   13ca4:	mov	r0, #0
   13ca8:	str	r0, [r4, #24]
   13cac:	bl	1138c <__errno_location@plt>
   13cb0:	mov	r1, #36	; 0x24
   13cb4:	str	r1, [r0]
   13cb8:	b	141fc <__assert_fail@plt+0x2d14>
   13cbc:	mov	r0, #4096	; 0x1000
   13cc0:	ldr	r1, [r4, #36]	; 0x24
   13cc4:	add	r0, r0, #256	; 0x100
   13cc8:	adds	r1, r0, r1
   13ccc:	bcs	13c9c <__assert_fail@plt+0x27b4>
   13cd0:	str	r1, [r4, #36]	; 0x24
   13cd4:	ldr	r0, [r4, #24]
   13cd8:	bl	1a81c <__assert_fail@plt+0x9334>
   13cdc:	cmp	r0, #0
   13ce0:	beq	13edc <__assert_fail@plt+0x29f4>
   13ce4:	str	r0, [r4, #24]
   13ce8:	ldr	r0, [sl]
   13cec:	cmp	r0, #0
   13cf0:	beq	13ef0 <__assert_fail@plt+0x2a08>
   13cf4:	mov	r0, #176	; 0xb0
   13cf8:	bl	1a7ec <__assert_fail@plt+0x9304>
   13cfc:	cmp	r0, #0
   13d00:	beq	141f4 <__assert_fail@plt+0x2d0c>
   13d04:	ldr	r1, [r4, #24]
   13d08:	mov	r7, r0
   13d0c:	mov	r0, #0
   13d10:	mov	r2, #196608	; 0x30000
   13d14:	strb	r0, [r7, #168]	; 0xa8
   13d18:	str	r2, [r7, #58]	; 0x3a
   13d1c:	mvn	r2, #0
   13d20:	str	r4, [r7, #44]	; 0x2c
   13d24:	str	r2, [r7, #48]	; 0x30
   13d28:	str	r0, [r7, #52]	; 0x34
   13d2c:	str	r0, [r7, #12]
   13d30:	str	r0, [r7, #16]
   13d34:	str	r0, [r7, #20]
   13d38:	str	r1, [r7, #28]
   13d3c:	str	r0, [r7, #32]
   13d40:	cmp	r5, #0
   13d44:	beq	13efc <__assert_fail@plt+0x2a14>
   13d48:	ldrb	r0, [r4, #49]	; 0x31
   13d4c:	ubfx	r0, r0, #2, #1
   13d50:	ldr	r4, [sl]
   13d54:	str	r0, [sp, #12]
   13d58:	cmp	r4, #0
   13d5c:	beq	13f10 <__assert_fail@plt+0x2a28>
   13d60:	tst	r6, #2048	; 0x800
   13d64:	str	r5, [sp, #16]
   13d68:	str	r7, [sp, #20]
   13d6c:	bne	13f34 <__assert_fail@plt+0x2a4c>
   13d70:	mov	r0, #0
   13d74:	mov	r8, #0
   13d78:	mov	r5, #0
   13d7c:	str	r0, [sp, #8]
   13d80:	b	13dd4 <__assert_fail@plt+0x28ec>
   13d84:	cmp	r8, #0
   13d88:	str	r4, [r7, #8]
   13d8c:	beq	13db0 <__assert_fail@plt+0x28c8>
   13d90:	ldr	r0, [sp, #8]
   13d94:	str	r7, [sp, #8]
   13d98:	str	r7, [r0, #8]
   13d9c:	ldr	r4, [sl, #4]!
   13da0:	add	r5, r5, #1
   13da4:	cmp	r4, #0
   13da8:	bne	13dd4 <__assert_fail@plt+0x28ec>
   13dac:	b	14088 <__assert_fail@plt+0x2ba0>
   13db0:	mov	r0, r7
   13db4:	str	r7, [sp, #8]
   13db8:	b	13dc0 <__assert_fail@plt+0x28d8>
   13dbc:	str	r8, [r7, #8]
   13dc0:	mov	r8, r7
   13dc4:	ldr	r4, [sl, #4]!
   13dc8:	add	r5, r5, #1
   13dcc:	cmp	r4, #0
   13dd0:	beq	14088 <__assert_fail@plt+0x2ba0>
   13dd4:	mov	r0, r4
   13dd8:	bl	11374 <strlen@plt>
   13ddc:	mov	r9, r0
   13de0:	cmp	r0, #3
   13de4:	bcc	13e14 <__assert_fail@plt+0x292c>
   13de8:	add	r0, r9, r4
   13dec:	ldrb	r0, [r0, #-1]
   13df0:	cmp	r0, #47	; 0x2f
   13df4:	bne	13e14 <__assert_fail@plt+0x292c>
   13df8:	sub	r0, r4, #2
   13dfc:	ldrb	r1, [r0, r9]
   13e00:	cmp	r1, #47	; 0x2f
   13e04:	bne	13e14 <__assert_fail@plt+0x292c>
   13e08:	sub	r9, r9, #1
   13e0c:	cmp	r9, #1
   13e10:	bhi	13dfc <__assert_fail@plt+0x2914>
   13e14:	add	r0, r9, #176	; 0xb0
   13e18:	bic	r0, r0, #7
   13e1c:	bl	1a7ec <__assert_fail@plt+0x9304>
   13e20:	cmp	r0, #0
   13e24:	beq	14078 <__assert_fail@plt+0x2b90>
   13e28:	add	r6, r0, #168	; 0xa8
   13e2c:	mov	r7, r0
   13e30:	mov	r1, r4
   13e34:	mov	r2, r9
   13e38:	mov	r0, r6
   13e3c:	bl	11254 <memcpy@plt>
   13e40:	ldr	r0, [sp, #24]
   13e44:	ldr	r1, [sp, #20]
   13e48:	mov	r4, #0
   13e4c:	cmp	r8, #0
   13e50:	strb	r4, [r6, r9]
   13e54:	ldr	r2, [r0, #24]
   13e58:	str	r1, [r7, #4]
   13e5c:	add	r1, r7, #44	; 0x2c
   13e60:	stm	r1, {r0, r4, r9}
   13e64:	mov	r1, #196608	; 0x30000
   13e68:	str	r1, [r7, #58]	; 0x3a
   13e6c:	str	r4, [r7, #12]
   13e70:	str	r4, [r7, #16]
   13e74:	str	r4, [r7, #20]
   13e78:	str	r6, [r7, #24]
   13e7c:	mov	r1, r8
   13e80:	movwne	r1, #1
   13e84:	str	r2, [r7, #28]
   13e88:	ldr	r2, [sp, #12]
   13e8c:	str	r4, [r7, #32]
   13e90:	tst	r2, r1
   13e94:	beq	13ebc <__assert_fail@plt+0x29d4>
   13e98:	mov	r0, #2
   13e9c:	str	r0, [r7, #112]	; 0x70
   13ea0:	mov	r0, #11
   13ea4:	str	r4, [r7, #116]	; 0x74
   13ea8:	strh	r0, [r7, #56]	; 0x38
   13eac:	ldr	r0, [sp, #16]
   13eb0:	cmp	r0, #0
   13eb4:	bne	13dbc <__assert_fail@plt+0x28d4>
   13eb8:	b	13d84 <__assert_fail@plt+0x289c>
   13ebc:	mov	r1, r7
   13ec0:	mov	r2, #0
   13ec4:	bl	14278 <__assert_fail@plt+0x2d90>
   13ec8:	strh	r0, [r7, #56]	; 0x38
   13ecc:	ldr	r0, [sp, #16]
   13ed0:	cmp	r0, #0
   13ed4:	bne	13dbc <__assert_fail@plt+0x28d4>
   13ed8:	b	13d84 <__assert_fail@plt+0x289c>
   13edc:	ldr	r0, [r4, #24]
   13ee0:	bl	13af8 <__assert_fail@plt+0x2610>
   13ee4:	mov	r0, #0
   13ee8:	str	r0, [r4, #24]
   13eec:	b	141fc <__assert_fail@plt+0x2d14>
   13ef0:	mov	r7, #0
   13ef4:	cmp	r5, #0
   13ef8:	bne	13d48 <__assert_fail@plt+0x2860>
   13efc:	mov	r0, #1
   13f00:	ldr	r4, [sl]
   13f04:	str	r0, [sp, #12]
   13f08:	cmp	r4, #0
   13f0c:	bne	13d60 <__assert_fail@plt+0x2878>
   13f10:	ldr	r4, [sp, #24]
   13f14:	mov	r8, #0
   13f18:	mov	r0, #176	; 0xb0
   13f1c:	bl	1a7ec <__assert_fail@plt+0x9304>
   13f20:	cmp	r0, #0
   13f24:	bne	140e0 <__assert_fail@plt+0x2bf8>
   13f28:	mov	r0, #0
   13f2c:	str	r0, [r4]
   13f30:	b	141b0 <__assert_fail@plt+0x2cc8>
   13f34:	add	r0, sl, #4
   13f38:	mov	r9, #0
   13f3c:	mov	r8, #0
   13f40:	mov	r5, #0
   13f44:	str	r0, [sp, #8]
   13f48:	ldr	r0, [sp, #12]
   13f4c:	eor	r0, r0, #1
   13f50:	str	r0, [sp, #12]
   13f54:	mov	r0, #0
   13f58:	str	r0, [sp, #4]
   13f5c:	b	13f90 <__assert_fail@plt+0x2aa8>
   13f60:	cmp	r8, #0
   13f64:	str	r9, [r5, #8]
   13f68:	beq	1406c <__assert_fail@plt+0x2b84>
   13f6c:	ldr	r0, [sp, #4]
   13f70:	str	r5, [sp, #4]
   13f74:	str	r5, [r0, #8]
   13f78:	ldr	r0, [sp, #8]
   13f7c:	mov	r5, sl
   13f80:	add	r5, sl, #1
   13f84:	ldr	r4, [r0, sl, lsl #2]
   13f88:	cmp	r4, #0
   13f8c:	beq	14088 <__assert_fail@plt+0x2ba0>
   13f90:	mov	r0, r4
   13f94:	mov	sl, r5
   13f98:	bl	11374 <strlen@plt>
   13f9c:	mov	r7, r0
   13fa0:	add	r0, r0, #176	; 0xb0
   13fa4:	bic	r0, r0, #7
   13fa8:	bl	1a7ec <__assert_fail@plt+0x9304>
   13fac:	cmp	r0, #0
   13fb0:	beq	14078 <__assert_fail@plt+0x2b90>
   13fb4:	add	r6, r0, #168	; 0xa8
   13fb8:	mov	r5, r0
   13fbc:	mov	r1, r4
   13fc0:	mov	r2, r7
   13fc4:	mov	r0, r6
   13fc8:	bl	11254 <memcpy@plt>
   13fcc:	ldr	r0, [sp, #24]
   13fd0:	ldr	r1, [sp, #20]
   13fd4:	strb	r9, [r6, r7]
   13fd8:	ldr	r2, [r0, #24]
   13fdc:	str	r1, [r5, #4]
   13fe0:	mov	r1, #196608	; 0x30000
   13fe4:	str	r0, [r5, #44]	; 0x2c
   13fe8:	str	r9, [r5, #48]	; 0x30
   13fec:	str	r7, [r5, #52]	; 0x34
   13ff0:	str	r1, [r5, #58]	; 0x3a
   13ff4:	str	r9, [r5, #12]
   13ff8:	str	r9, [r5, #16]
   13ffc:	str	r9, [r5, #20]
   14000:	str	r6, [r5, #24]
   14004:	clz	r1, r8
   14008:	lsr	r1, r1, #5
   1400c:	str	r2, [r5, #28]
   14010:	ldr	r2, [sp, #12]
   14014:	str	r9, [r5, #32]
   14018:	orrs	r1, r2, r1
   1401c:	bne	14044 <__assert_fail@plt+0x2b5c>
   14020:	mov	r0, #2
   14024:	str	r0, [r5, #112]	; 0x70
   14028:	str	r9, [r5, #116]	; 0x74
   1402c:	mov	r0, #11
   14030:	strh	r0, [r5, #56]	; 0x38
   14034:	ldr	r0, [sp, #16]
   14038:	cmp	r0, #0
   1403c:	bne	14060 <__assert_fail@plt+0x2b78>
   14040:	b	13f60 <__assert_fail@plt+0x2a78>
   14044:	mov	r1, r5
   14048:	mov	r2, #0
   1404c:	bl	14278 <__assert_fail@plt+0x2d90>
   14050:	strh	r0, [r5, #56]	; 0x38
   14054:	ldr	r0, [sp, #16]
   14058:	cmp	r0, #0
   1405c:	beq	13f60 <__assert_fail@plt+0x2a78>
   14060:	str	r8, [r5, #8]
   14064:	mov	r8, r5
   14068:	b	13f78 <__assert_fail@plt+0x2a90>
   1406c:	mov	r0, r5
   14070:	str	r5, [sp, #4]
   14074:	b	14064 <__assert_fail@plt+0x2b7c>
   14078:	ldr	r7, [sp, #20]
   1407c:	cmp	r8, #0
   14080:	bne	141d0 <__assert_fail@plt+0x2ce8>
   14084:	b	141e8 <__assert_fail@plt+0x2d00>
   14088:	ldr	r0, [sp, #16]
   1408c:	ldr	r7, [sp, #20]
   14090:	cmp	r0, #0
   14094:	beq	140cc <__assert_fail@plt+0x2be4>
   14098:	ldr	r4, [sp, #24]
   1409c:	cmp	r5, #2
   140a0:	bcc	140d0 <__assert_fail@plt+0x2be8>
   140a4:	mov	r0, r4
   140a8:	mov	r1, r8
   140ac:	mov	r2, r5
   140b0:	bl	14410 <__assert_fail@plt+0x2f28>
   140b4:	mov	r8, r0
   140b8:	mov	r0, #176	; 0xb0
   140bc:	bl	1a7ec <__assert_fail@plt+0x9304>
   140c0:	cmp	r0, #0
   140c4:	bne	140e0 <__assert_fail@plt+0x2bf8>
   140c8:	b	13f28 <__assert_fail@plt+0x2a40>
   140cc:	ldr	r4, [sp, #24]
   140d0:	mov	r0, #176	; 0xb0
   140d4:	bl	1a7ec <__assert_fail@plt+0x9304>
   140d8:	cmp	r0, #0
   140dc:	beq	13f28 <__assert_fail@plt+0x2a40>
   140e0:	ldr	r2, [r4, #24]
   140e4:	mov	r1, #0
   140e8:	mov	r3, #196608	; 0x30000
   140ec:	str	r0, [r4]
   140f0:	str	r1, [r0, #52]	; 0x34
   140f4:	strb	r1, [r0, #168]	; 0xa8
   140f8:	str	r4, [r0, #44]	; 0x2c
   140fc:	str	r3, [r0, #58]	; 0x3a
   14100:	str	r2, [r0, #28]
   14104:	mov	r2, #9
   14108:	str	r1, [r0, #32]
   1410c:	strh	r2, [r0, #56]	; 0x38
   14110:	str	r8, [r0, #8]
   14114:	str	r1, [r0, #12]
   14118:	str	r1, [r0, #16]
   1411c:	str	r1, [r0, #20]
   14120:	mov	r1, #1
   14124:	str	r1, [r0, #48]	; 0x30
   14128:	ldrh	r0, [r4, #48]	; 0x30
   1412c:	movw	r1, #258	; 0x102
   14130:	tst	r0, r1
   14134:	beq	14170 <__assert_fail@plt+0x2c88>
   14138:	movw	r0, #15096	; 0x3af8
   1413c:	movw	r2, #25024	; 0x61c0
   14140:	movw	r3, #25056	; 0x61e0
   14144:	mov	r1, #0
   14148:	movt	r0, #1
   1414c:	movt	r2, #1
   14150:	movt	r3, #1
   14154:	str	r0, [sp]
   14158:	mov	r0, #31
   1415c:	bl	168d4 <__assert_fail@plt+0x53ec>
   14160:	cmp	r0, #0
   14164:	str	r0, [r4, #56]	; 0x38
   14168:	bne	14188 <__assert_fail@plt+0x2ca0>
   1416c:	b	141b0 <__assert_fail@plt+0x2cc8>
   14170:	mov	r0, #32
   14174:	bl	1a7ec <__assert_fail@plt+0x9304>
   14178:	cmp	r0, #0
   1417c:	str	r0, [r4, #56]	; 0x38
   14180:	beq	141b0 <__assert_fail@plt+0x2cc8>
   14184:	bl	1a8f4 <__assert_fail@plt+0x940c>
   14188:	ldr	r4, [sp, #24]
   1418c:	ldr	r0, [r4, #48]	; 0x30
   14190:	tst	r0, #516	; 0x204
   14194:	beq	14214 <__assert_fail@plt+0x2d2c>
   14198:	add	r0, r4, #60	; 0x3c
   1419c:	mvn	r1, #0
   141a0:	bl	17830 <__assert_fail@plt+0x6348>
   141a4:	mov	r0, r4
   141a8:	sub	sp, fp, #28
   141ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141b0:	cmp	r8, #0
   141b4:	bne	141d0 <__assert_fail@plt+0x2ce8>
   141b8:	b	141e8 <__assert_fail@plt+0x2d00>
   141bc:	mov	r0, r8
   141c0:	bl	13af8 <__assert_fail@plt+0x2610>
   141c4:	cmp	r4, #0
   141c8:	mov	r8, r4
   141cc:	beq	141e8 <__assert_fail@plt+0x2d00>
   141d0:	ldrd	r4, [r8, #8]
   141d4:	cmp	r5, #0
   141d8:	beq	141bc <__assert_fail@plt+0x2cd4>
   141dc:	mov	r0, r5
   141e0:	bl	114d0 <closedir@plt>
   141e4:	b	141bc <__assert_fail@plt+0x2cd4>
   141e8:	mov	r0, r7
   141ec:	bl	13af8 <__assert_fail@plt+0x2610>
   141f0:	ldr	r4, [sp, #24]
   141f4:	ldr	r0, [r4, #24]
   141f8:	bl	13af8 <__assert_fail@plt+0x2610>
   141fc:	mov	r0, r4
   14200:	bl	13af8 <__assert_fail@plt+0x2610>
   14204:	mov	r4, #0
   14208:	mov	r0, r4
   1420c:	sub	sp, fp, #28
   14210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14214:	mov	r1, #32768	; 0x8000
   14218:	tst	r0, #512	; 0x200
   1421c:	and	r1, r1, r0, lsl #11
   14220:	orr	r1, r1, #18688	; 0x4900
   14224:	orr	r2, r1, #524288	; 0x80000
   14228:	bne	1424c <__assert_fail@plt+0x2d64>
   1422c:	movw	r0, #48488	; 0xbd68
   14230:	mov	r1, r2
   14234:	movt	r0, #1
   14238:	bl	1ac60 <__assert_fail@plt+0x9778>
   1423c:	cmn	r0, #1
   14240:	str	r0, [r4, #28]
   14244:	bgt	14198 <__assert_fail@plt+0x2cb0>
   14248:	b	14268 <__assert_fail@plt+0x2d80>
   1424c:	ldr	r0, [r4, #32]
   14250:	movw	r1, #48488	; 0xbd68
   14254:	movt	r1, #1
   14258:	bl	178f8 <__assert_fail@plt+0x6410>
   1425c:	cmn	r0, #1
   14260:	str	r0, [r4, #28]
   14264:	bgt	14198 <__assert_fail@plt+0x2cb0>
   14268:	ldr	r0, [r4, #48]	; 0x30
   1426c:	orr	r0, r0, #4
   14270:	str	r0, [r4, #48]	; 0x30
   14274:	b	14198 <__assert_fail@plt+0x2cb0>
   14278:	push	{r4, r5, r6, sl, fp, lr}
   1427c:	add	fp, sp, #16
   14280:	sub	sp, sp, #8
   14284:	mov	r4, r1
   14288:	ldr	r1, [r0, #48]	; 0x30
   1428c:	ldr	r3, [r4, #48]	; 0x30
   14290:	add	r5, r4, #64	; 0x40
   14294:	cmp	r3, #0
   14298:	andeq	r3, r1, #1
   1429c:	orreq	r2, r3, r2
   142a0:	cmp	r2, #0
   142a4:	andseq	r1, r1, #2
   142a8:	beq	14304 <__assert_fail@plt+0x2e1c>
   142ac:	ldr	r1, [r4, #24]
   142b0:	mov	r0, #3
   142b4:	mov	r2, r5
   142b8:	bl	1147c <__xstat64@plt>
   142bc:	cmp	r0, #0
   142c0:	beq	14384 <__assert_fail@plt+0x2e9c>
   142c4:	bl	1138c <__errno_location@plt>
   142c8:	mov	r6, r0
   142cc:	ldr	r0, [r0]
   142d0:	cmp	r0, #2
   142d4:	bne	14334 <__assert_fail@plt+0x2e4c>
   142d8:	ldr	r1, [r4, #24]
   142dc:	mov	r0, #3
   142e0:	mov	r2, r5
   142e4:	bl	114b8 <__lxstat64@plt>
   142e8:	cmp	r0, #0
   142ec:	bne	14330 <__assert_fail@plt+0x2e48>
   142f0:	mov	r0, #0
   142f4:	str	r0, [r6]
   142f8:	mov	r0, #13
   142fc:	sub	sp, fp, #16
   14300:	pop	{r4, r5, r6, sl, fp, pc}
   14304:	ldr	r1, [r0, #32]
   14308:	ldr	r2, [r4, #24]
   1430c:	mov	r0, #256	; 0x100
   14310:	mov	r3, r5
   14314:	str	r0, [sp]
   14318:	mov	r0, #3
   1431c:	bl	1129c <__fxstatat64@plt>
   14320:	cmp	r0, #0
   14324:	beq	14384 <__assert_fail@plt+0x2e9c>
   14328:	bl	1138c <__errno_location@plt>
   1432c:	mov	r6, r0
   14330:	ldr	r0, [r6]
   14334:	vmov.i32	q8, #0	; 0x00000000
   14338:	add	r1, r5, #80	; 0x50
   1433c:	str	r0, [r4, #32]
   14340:	mov	r0, #0
   14344:	str	r0, [r5, #96]	; 0x60
   14348:	vst1.64	{d16-d17}, [r1]
   1434c:	add	r1, r5, #64	; 0x40
   14350:	vst1.64	{d16-d17}, [r1]
   14354:	add	r1, r5, #48	; 0x30
   14358:	vst1.64	{d16-d17}, [r1]
   1435c:	add	r1, r5, #32
   14360:	vst1.64	{d16-d17}, [r1]
   14364:	add	r1, r5, #16
   14368:	vst1.64	{d16-d17}, [r1]
   1436c:	mov	r1, #100	; 0x64
   14370:	vst1.64	{d16-d17}, [r5], r1
   14374:	str	r0, [r5]
   14378:	mov	r0, #10
   1437c:	sub	sp, fp, #16
   14380:	pop	{r4, r5, r6, sl, fp, pc}
   14384:	ldr	r0, [r4, #80]	; 0x50
   14388:	and	r0, r0, #61440	; 0xf000
   1438c:	cmp	r0, #40960	; 0xa000
   14390:	beq	143f8 <__assert_fail@plt+0x2f10>
   14394:	cmp	r0, #32768	; 0x8000
   14398:	beq	143ec <__assert_fail@plt+0x2f04>
   1439c:	cmp	r0, #16384	; 0x4000
   143a0:	bne	14404 <__assert_fail@plt+0x2f1c>
   143a4:	ldrb	r1, [r4, #168]	; 0xa8
   143a8:	mov	r0, #1
   143ac:	cmp	r1, #46	; 0x2e
   143b0:	bne	14408 <__assert_fail@plt+0x2f20>
   143b4:	ldrb	r1, [r4, #169]	; 0xa9
   143b8:	cmp	r1, #0
   143bc:	beq	143d4 <__assert_fail@plt+0x2eec>
   143c0:	cmp	r1, #46	; 0x2e
   143c4:	bne	14408 <__assert_fail@plt+0x2f20>
   143c8:	ldrb	r1, [r4, #170]	; 0xaa
   143cc:	cmp	r1, #0
   143d0:	bne	14408 <__assert_fail@plt+0x2f20>
   143d4:	ldr	r1, [r4, #48]	; 0x30
   143d8:	mov	r0, #5
   143dc:	cmp	r1, #0
   143e0:	movweq	r0, #1
   143e4:	sub	sp, fp, #16
   143e8:	pop	{r4, r5, r6, sl, fp, pc}
   143ec:	mov	r0, #8
   143f0:	sub	sp, fp, #16
   143f4:	pop	{r4, r5, r6, sl, fp, pc}
   143f8:	mov	r0, #12
   143fc:	sub	sp, fp, #16
   14400:	pop	{r4, r5, r6, sl, fp, pc}
   14404:	mov	r0, #3
   14408:	sub	sp, fp, #16
   1440c:	pop	{r4, r5, r6, sl, fp, pc}
   14410:	push	{r4, r5, r6, r7, fp, lr}
   14414:	add	fp, sp, #16
   14418:	mov	r6, r0
   1441c:	ldr	r7, [r0, #44]	; 0x2c
   14420:	ldr	r0, [r0, #40]	; 0x28
   14424:	mov	r5, r2
   14428:	mov	r4, r1
   1442c:	cmp	r0, r2
   14430:	bcs	14468 <__assert_fail@plt+0x2f80>
   14434:	add	r1, r5, #40	; 0x28
   14438:	cmn	r1, #-1073741823	; 0xc0000001
   1443c:	str	r1, [r6, #40]	; 0x28
   14440:	bhi	1450c <__assert_fail@plt+0x3024>
   14444:	ldr	r0, [r6, #8]
   14448:	lsl	r1, r1, #2
   1444c:	bl	1a81c <__assert_fail@plt+0x9334>
   14450:	cmp	r0, #0
   14454:	beq	1450c <__assert_fail@plt+0x3024>
   14458:	str	r0, [r6, #8]
   1445c:	cmp	r4, #0
   14460:	bne	14474 <__assert_fail@plt+0x2f8c>
   14464:	b	14488 <__assert_fail@plt+0x2fa0>
   14468:	ldr	r0, [r6, #8]
   1446c:	cmp	r4, #0
   14470:	beq	14488 <__assert_fail@plt+0x2fa0>
   14474:	str	r4, [r0], #4
   14478:	ldr	r4, [r4, #8]
   1447c:	cmp	r4, #0
   14480:	bne	14474 <__assert_fail@plt+0x2f8c>
   14484:	ldr	r0, [r6, #8]
   14488:	mov	r1, r5
   1448c:	mov	r2, #4
   14490:	mov	r3, r7
   14494:	bl	11464 <qsort@plt>
   14498:	ldr	r0, [r6, #8]
   1449c:	cmp	r5, #1
   144a0:	ldr	r4, [r0]
   144a4:	mov	r1, r4
   144a8:	beq	14530 <__assert_fail@plt+0x3048>
   144ac:	mov	r2, r0
   144b0:	ldr	r1, [r2, #4]!
   144b4:	str	r1, [r4, #8]
   144b8:	subs	r1, r5, #2
   144bc:	beq	14528 <__assert_fail@plt+0x3040>
   144c0:	tst	r1, #1
   144c4:	beq	144dc <__assert_fail@plt+0x2ff4>
   144c8:	ldr	r1, [r0, #8]!
   144cc:	ldr	r2, [r0, #-4]
   144d0:	str	r1, [r2, #8]
   144d4:	sub	r1, r5, #3
   144d8:	mov	r2, r0
   144dc:	cmp	r5, #3
   144e0:	beq	1452c <__assert_fail@plt+0x3044>
   144e4:	mov	r0, r2
   144e8:	ldm	r2, {r3, r7}
   144ec:	subs	r1, r1, #2
   144f0:	str	r7, [r3, #8]
   144f4:	ldr	r3, [r0, #8]!
   144f8:	ldr	r2, [r2, #4]
   144fc:	str	r3, [r2, #8]
   14500:	mov	r2, r0
   14504:	bne	144e8 <__assert_fail@plt+0x3000>
   14508:	b	1452c <__assert_fail@plt+0x3044>
   1450c:	ldr	r0, [r6, #8]
   14510:	bl	13af8 <__assert_fail@plt+0x2610>
   14514:	mov	r0, #0
   14518:	str	r0, [r6, #40]	; 0x28
   1451c:	str	r0, [r6, #8]
   14520:	mov	r0, r4
   14524:	pop	{r4, r5, r6, r7, fp, pc}
   14528:	mov	r0, r2
   1452c:	ldr	r1, [r0]
   14530:	mov	r0, #0
   14534:	str	r0, [r1, #8]
   14538:	mov	r0, r4
   1453c:	pop	{r4, r5, r6, r7, fp, pc}
   14540:	push	{r4, r5, r6, r7, fp, lr}
   14544:	add	fp, sp, #16
   14548:	mov	r4, r0
   1454c:	ldr	r0, [r0]
   14550:	cmp	r0, #0
   14554:	beq	14594 <__assert_fail@plt+0x30ac>
   14558:	ldr	r1, [r0, #48]	; 0x30
   1455c:	cmp	r1, #0
   14560:	bmi	14588 <__assert_fail@plt+0x30a0>
   14564:	ldr	r5, [r0, #8]
   14568:	cmp	r5, #0
   1456c:	ldreq	r5, [r0, #4]
   14570:	bl	13af8 <__assert_fail@plt+0x2610>
   14574:	ldr	r0, [r5, #48]	; 0x30
   14578:	cmn	r0, #1
   1457c:	mov	r0, r5
   14580:	bgt	14564 <__assert_fail@plt+0x307c>
   14584:	b	1458c <__assert_fail@plt+0x30a4>
   14588:	mov	r5, r0
   1458c:	mov	r0, r5
   14590:	bl	13af8 <__assert_fail@plt+0x2610>
   14594:	ldr	r5, [r4, #4]
   14598:	cmp	r5, #0
   1459c:	bne	145b8 <__assert_fail@plt+0x30d0>
   145a0:	b	145d0 <__assert_fail@plt+0x30e8>
   145a4:	mov	r0, r5
   145a8:	bl	13af8 <__assert_fail@plt+0x2610>
   145ac:	cmp	r6, #0
   145b0:	mov	r5, r6
   145b4:	beq	145d0 <__assert_fail@plt+0x30e8>
   145b8:	ldrd	r6, [r5, #8]
   145bc:	cmp	r7, #0
   145c0:	beq	145a4 <__assert_fail@plt+0x30bc>
   145c4:	mov	r0, r7
   145c8:	bl	114d0 <closedir@plt>
   145cc:	b	145a4 <__assert_fail@plt+0x30bc>
   145d0:	ldr	r0, [r4, #8]
   145d4:	bl	13af8 <__assert_fail@plt+0x2610>
   145d8:	ldr	r0, [r4, #24]
   145dc:	bl	13af8 <__assert_fail@plt+0x2610>
   145e0:	ldr	r0, [r4, #48]	; 0x30
   145e4:	tst	r0, #512	; 0x200
   145e8:	bne	14624 <__assert_fail@plt+0x313c>
   145ec:	mov	r6, #0
   145f0:	tst	r0, #4
   145f4:	bne	14648 <__assert_fail@plt+0x3160>
   145f8:	ldr	r0, [r4, #28]
   145fc:	bl	11458 <fchdir@plt>
   14600:	cmp	r0, #0
   14604:	beq	146f0 <__assert_fail@plt+0x3208>
   14608:	bl	1138c <__errno_location@plt>
   1460c:	ldr	r6, [r0]
   14610:	ldr	r0, [r4, #28]
   14614:	bl	114ac <close@plt>
   14618:	cmp	r6, #0
   1461c:	beq	14638 <__assert_fail@plt+0x3150>
   14620:	b	14648 <__assert_fail@plt+0x3160>
   14624:	ldr	r0, [r4, #32]
   14628:	mov	r6, #0
   1462c:	cmp	r0, #0
   14630:	bmi	14648 <__assert_fail@plt+0x3160>
   14634:	bl	114ac <close@plt>
   14638:	cmp	r0, #0
   1463c:	beq	14648 <__assert_fail@plt+0x3160>
   14640:	bl	1138c <__errno_location@plt>
   14644:	ldr	r6, [r0]
   14648:	add	r5, r4, #60	; 0x3c
   1464c:	mov	r0, r5
   14650:	bl	17854 <__assert_fail@plt+0x636c>
   14654:	cmp	r0, #0
   14658:	bne	14680 <__assert_fail@plt+0x3198>
   1465c:	mov	r0, r5
   14660:	bl	178a8 <__assert_fail@plt+0x63c0>
   14664:	cmp	r0, #0
   14668:	bmi	1464c <__assert_fail@plt+0x3164>
   1466c:	bl	114ac <close@plt>
   14670:	mov	r0, r5
   14674:	bl	17854 <__assert_fail@plt+0x636c>
   14678:	cmp	r0, #0
   1467c:	beq	1465c <__assert_fail@plt+0x3174>
   14680:	ldr	r0, [r4, #52]	; 0x34
   14684:	cmp	r0, #0
   14688:	beq	14690 <__assert_fail@plt+0x31a8>
   1468c:	bl	16bf0 <__assert_fail@plt+0x5708>
   14690:	ldrh	r0, [r4, #48]	; 0x30
   14694:	movw	r1, #258	; 0x102
   14698:	tst	r0, r1
   1469c:	beq	146d0 <__assert_fail@plt+0x31e8>
   146a0:	ldr	r0, [r4, #56]	; 0x38
   146a4:	cmp	r0, #0
   146a8:	beq	146b0 <__assert_fail@plt+0x31c8>
   146ac:	bl	16bf0 <__assert_fail@plt+0x5708>
   146b0:	mov	r0, r4
   146b4:	bl	13af8 <__assert_fail@plt+0x2610>
   146b8:	cmp	r6, #0
   146bc:	beq	146e8 <__assert_fail@plt+0x3200>
   146c0:	bl	1138c <__errno_location@plt>
   146c4:	str	r6, [r0]
   146c8:	mvn	r0, #0
   146cc:	pop	{r4, r5, r6, r7, fp, pc}
   146d0:	ldr	r0, [r4, #56]	; 0x38
   146d4:	bl	13af8 <__assert_fail@plt+0x2610>
   146d8:	mov	r0, r4
   146dc:	bl	13af8 <__assert_fail@plt+0x2610>
   146e0:	cmp	r6, #0
   146e4:	bne	146c0 <__assert_fail@plt+0x31d8>
   146e8:	mov	r0, #0
   146ec:	pop	{r4, r5, r6, r7, fp, pc}
   146f0:	mov	r6, #0
   146f4:	ldr	r0, [r4, #28]
   146f8:	bl	114ac <close@plt>
   146fc:	cmp	r6, #0
   14700:	beq	14638 <__assert_fail@plt+0x3150>
   14704:	b	14648 <__assert_fail@plt+0x3160>
   14708:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1470c:	add	fp, sp, #24
   14710:	sub	sp, sp, #8
   14714:	ldr	r6, [r0]
   14718:	mov	r5, #0
   1471c:	cmp	r6, #0
   14720:	beq	14ec8 <__assert_fail@plt+0x39e0>
   14724:	mov	r4, r0
   14728:	ldr	r0, [r0, #48]	; 0x30
   1472c:	tst	r0, #8192	; 0x2000
   14730:	bne	14ec8 <__assert_fail@plt+0x39e0>
   14734:	ldrh	r1, [r6, #60]	; 0x3c
   14738:	mov	r2, #3
   1473c:	strh	r2, [r6, #60]	; 0x3c
   14740:	cmp	r1, #1
   14744:	beq	147e4 <__assert_fail@plt+0x32fc>
   14748:	cmp	r1, #2
   1474c:	bne	14808 <__assert_fail@plt+0x3320>
   14750:	ldrh	r2, [r6, #56]	; 0x38
   14754:	bic	r3, r2, #1
   14758:	cmp	r3, #12
   1475c:	bne	1480c <__assert_fail@plt+0x3324>
   14760:	mov	r0, r4
   14764:	mov	r1, r6
   14768:	mov	r2, #1
   1476c:	bl	14278 <__assert_fail@plt+0x2d90>
   14770:	cmp	r0, #1
   14774:	strh	r0, [r6, #56]	; 0x38
   14778:	bne	14ddc <__assert_fail@plt+0x38f4>
   1477c:	ldr	r0, [r4, #48]	; 0x30
   14780:	tst	r0, #4
   14784:	bne	14ddc <__assert_fail@plt+0x38f4>
   14788:	mov	r1, #32768	; 0x8000
   1478c:	tst	r0, #512	; 0x200
   14790:	and	r1, r1, r0, lsl #11
   14794:	orr	r1, r1, #18688	; 0x4900
   14798:	orr	r2, r1, #524288	; 0x80000
   1479c:	bne	14b10 <__assert_fail@plt+0x3628>
   147a0:	movw	r0, #48488	; 0xbd68
   147a4:	mov	r1, r2
   147a8:	movt	r0, #1
   147ac:	bl	1ac60 <__assert_fail@plt+0x9778>
   147b0:	cmn	r0, #1
   147b4:	str	r0, [r6, #36]	; 0x24
   147b8:	bgt	14b2c <__assert_fail@plt+0x3644>
   147bc:	bl	1138c <__errno_location@plt>
   147c0:	ldr	r0, [r0]
   147c4:	mov	r1, #7
   147c8:	strh	r1, [r6, #56]	; 0x38
   147cc:	str	r0, [r6, #32]
   147d0:	str	r6, [r4]
   147d4:	ldrh	r0, [r6, #56]	; 0x38
   147d8:	cmp	r0, #11
   147dc:	beq	14dec <__assert_fail@plt+0x3904>
   147e0:	b	14e20 <__assert_fail@plt+0x3938>
   147e4:	mov	r0, r4
   147e8:	mov	r1, r6
   147ec:	mov	r2, #0
   147f0:	bl	14278 <__assert_fail@plt+0x2d90>
   147f4:	strh	r0, [r6, #56]	; 0x38
   147f8:	mov	r5, r6
   147fc:	mov	r0, r5
   14800:	sub	sp, fp, #24
   14804:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14808:	ldrh	r2, [r6, #56]	; 0x38
   1480c:	cmp	r2, #1
   14810:	bne	1486c <__assert_fail@plt+0x3384>
   14814:	cmp	r1, #4
   14818:	bne	14920 <__assert_fail@plt+0x3438>
   1481c:	ldrb	r0, [r6, #58]	; 0x3a
   14820:	tst	r0, #2
   14824:	beq	14830 <__assert_fail@plt+0x3348>
   14828:	ldr	r0, [r6, #36]	; 0x24
   1482c:	bl	114ac <close@plt>
   14830:	ldr	r5, [r4, #4]
   14834:	cmp	r5, #0
   14838:	bne	14854 <__assert_fail@plt+0x336c>
   1483c:	b	149b8 <__assert_fail@plt+0x34d0>
   14840:	mov	r0, r5
   14844:	bl	13af8 <__assert_fail@plt+0x2610>
   14848:	cmp	r8, #0
   1484c:	mov	r5, r8
   14850:	beq	149b0 <__assert_fail@plt+0x34c8>
   14854:	ldrd	r8, [r5, #8]
   14858:	cmp	r9, #0
   1485c:	beq	14840 <__assert_fail@plt+0x3358>
   14860:	mov	r0, r9
   14864:	bl	114d0 <closedir@plt>
   14868:	b	14840 <__assert_fail@plt+0x3358>
   1486c:	mov	r7, r6
   14870:	ldr	r6, [r7, #8]
   14874:	cmp	r6, #0
   14878:	beq	149dc <__assert_fail@plt+0x34f4>
   1487c:	mov	r0, r7
   14880:	str	r6, [r4]
   14884:	bl	13af8 <__assert_fail@plt+0x2610>
   14888:	ldr	r0, [r6, #48]	; 0x30
   1488c:	cmp	r0, #0
   14890:	beq	14a24 <__assert_fail@plt+0x353c>
   14894:	ldrh	r0, [r6, #60]	; 0x3c
   14898:	mov	r7, r6
   1489c:	cmp	r0, #4
   148a0:	beq	14870 <__assert_fail@plt+0x3388>
   148a4:	cmp	r0, #2
   148a8:	bne	14da0 <__assert_fail@plt+0x38b8>
   148ac:	mov	r0, r4
   148b0:	mov	r1, r6
   148b4:	mov	r2, #1
   148b8:	bl	14278 <__assert_fail@plt+0x2d90>
   148bc:	cmp	r0, #1
   148c0:	strh	r0, [r6, #56]	; 0x38
   148c4:	bne	14d98 <__assert_fail@plt+0x38b0>
   148c8:	ldr	r0, [r4, #48]	; 0x30
   148cc:	tst	r0, #4
   148d0:	bne	14d98 <__assert_fail@plt+0x38b0>
   148d4:	mov	r1, #32768	; 0x8000
   148d8:	tst	r0, #512	; 0x200
   148dc:	and	r1, r1, r0, lsl #11
   148e0:	orr	r1, r1, #18688	; 0x4900
   148e4:	orr	r2, r1, #524288	; 0x80000
   148e8:	bne	14d70 <__assert_fail@plt+0x3888>
   148ec:	movw	r0, #48488	; 0xbd68
   148f0:	mov	r1, r2
   148f4:	movt	r0, #1
   148f8:	bl	1ac60 <__assert_fail@plt+0x9778>
   148fc:	cmn	r0, #1
   14900:	str	r0, [r6, #36]	; 0x24
   14904:	bgt	14d8c <__assert_fail@plt+0x38a4>
   14908:	bl	1138c <__errno_location@plt>
   1490c:	ldr	r0, [r0]
   14910:	mov	r1, #7
   14914:	strh	r1, [r6, #56]	; 0x38
   14918:	str	r0, [r6, #32]
   1491c:	b	14d98 <__assert_fail@plt+0x38b0>
   14920:	tst	r0, #64	; 0x40
   14924:	beq	14940 <__assert_fail@plt+0x3458>
   14928:	ldrd	r2, [r4, #16]
   1492c:	ldrd	r8, [r6, #64]	; 0x40
   14930:	eor	r1, r9, r3
   14934:	eor	r2, r8, r2
   14938:	orrs	r1, r2, r1
   1493c:	bne	1481c <__assert_fail@plt+0x3334>
   14940:	ldr	r7, [r4, #4]
   14944:	cmp	r7, #0
   14948:	beq	14abc <__assert_fail@plt+0x35d4>
   1494c:	tst	r0, #4096	; 0x1000
   14950:	bne	14a74 <__assert_fail@plt+0x358c>
   14954:	ldr	r3, [r6, #24]
   14958:	mov	r0, r4
   1495c:	mov	r1, r6
   14960:	mvn	r2, #0
   14964:	bl	15084 <__assert_fail@plt+0x3b9c>
   14968:	cmp	r0, #0
   1496c:	beq	14ad4 <__assert_fail@plt+0x35ec>
   14970:	bl	1138c <__errno_location@plt>
   14974:	ldr	r0, [r0]
   14978:	str	r0, [r6, #32]
   1497c:	ldrh	r0, [r6, #58]	; 0x3a
   14980:	orr	r0, r0, #1
   14984:	strh	r0, [r6, #58]	; 0x3a
   14988:	ldr	r0, [r4, #4]
   1498c:	cmp	r0, #0
   14990:	beq	14ad4 <__assert_fail@plt+0x35ec>
   14994:	ldmib	r0, {r1, r2}
   14998:	cmp	r2, #0
   1499c:	ldr	r1, [r1, #24]
   149a0:	str	r1, [r0, #24]
   149a4:	mov	r0, r2
   149a8:	bne	14994 <__assert_fail@plt+0x34ac>
   149ac:	b	14ad4 <__assert_fail@plt+0x35ec>
   149b0:	mov	r0, #0
   149b4:	str	r0, [r4, #4]
   149b8:	mov	r0, #6
   149bc:	strh	r0, [r6, #56]	; 0x38
   149c0:	mov	r0, r4
   149c4:	mov	r1, r6
   149c8:	bl	14fa8 <__assert_fail@plt+0x3ac0>
   149cc:	mov	r5, r6
   149d0:	mov	r0, r5
   149d4:	sub	sp, fp, #24
   149d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149dc:	ldr	r0, [r7, #4]
   149e0:	ldr	r1, [r0, #12]
   149e4:	cmp	r1, #0
   149e8:	beq	14a4c <__assert_fail@plt+0x3564>
   149ec:	str	r0, [r4]
   149f0:	mov	r2, #0
   149f4:	ldr	r1, [r4, #24]
   149f8:	ldr	r0, [r0, #40]	; 0x28
   149fc:	strb	r2, [r1, r0]
   14a00:	mov	r0, r4
   14a04:	mov	r1, #3
   14a08:	bl	15334 <__assert_fail@plt+0x3e4c>
   14a0c:	cmp	r0, #0
   14a10:	beq	14b4c <__assert_fail@plt+0x3664>
   14a14:	mov	r6, r0
   14a18:	mov	r0, r7
   14a1c:	bl	13af8 <__assert_fail@plt+0x2610>
   14a20:	b	14da0 <__assert_fail@plt+0x38b8>
   14a24:	mov	r0, r4
   14a28:	bl	15ecc <__assert_fail@plt+0x49e4>
   14a2c:	ldr	r1, [r4, #48]	; 0x30
   14a30:	cmp	r0, #0
   14a34:	beq	14a54 <__assert_fail@plt+0x356c>
   14a38:	orr	r0, r1, #8192	; 0x2000
   14a3c:	str	r0, [r4, #48]	; 0x30
   14a40:	mov	r0, r5
   14a44:	sub	sp, fp, #24
   14a48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a4c:	mov	r5, r0
   14a50:	b	14b60 <__assert_fail@plt+0x3678>
   14a54:	movw	r0, #258	; 0x102
   14a58:	tst	r1, r0
   14a5c:	beq	14bfc <__assert_fail@plt+0x3714>
   14a60:	ldr	r0, [r4, #56]	; 0x38
   14a64:	cmp	r0, #0
   14a68:	beq	14c04 <__assert_fail@plt+0x371c>
   14a6c:	bl	16bf0 <__assert_fail@plt+0x5708>
   14a70:	b	14c04 <__assert_fail@plt+0x371c>
   14a74:	bic	r0, r0, #4096	; 0x1000
   14a78:	str	r0, [r4, #48]	; 0x30
   14a7c:	ldrd	r8, [r7, #8]
   14a80:	cmp	r9, #0
   14a84:	bne	14aa8 <__assert_fail@plt+0x35c0>
   14a88:	mov	r0, r7
   14a8c:	bl	13af8 <__assert_fail@plt+0x2610>
   14a90:	cmp	r8, #0
   14a94:	mov	r7, r8
   14a98:	beq	14ab4 <__assert_fail@plt+0x35cc>
   14a9c:	ldrd	r8, [r7, #8]
   14aa0:	cmp	r9, #0
   14aa4:	beq	14a88 <__assert_fail@plt+0x35a0>
   14aa8:	mov	r0, r9
   14aac:	bl	114d0 <closedir@plt>
   14ab0:	b	14a88 <__assert_fail@plt+0x35a0>
   14ab4:	mov	r0, #0
   14ab8:	str	r0, [r4, #4]
   14abc:	mov	r0, r4
   14ac0:	mov	r1, #3
   14ac4:	bl	15334 <__assert_fail@plt+0x3e4c>
   14ac8:	cmp	r0, #0
   14acc:	str	r0, [r4, #4]
   14ad0:	beq	14ae4 <__assert_fail@plt+0x35fc>
   14ad4:	ldr	r6, [r4, #4]
   14ad8:	mov	r0, #0
   14adc:	str	r0, [r4, #4]
   14ae0:	b	14da0 <__assert_fail@plt+0x38b8>
   14ae4:	ldrb	r0, [r4, #49]	; 0x31
   14ae8:	tst	r0, #32
   14aec:	bne	14ec8 <__assert_fail@plt+0x39e0>
   14af0:	ldr	r0, [r6, #32]
   14af4:	cmp	r0, #0
   14af8:	beq	149c0 <__assert_fail@plt+0x34d8>
   14afc:	ldrh	r0, [r6, #56]	; 0x38
   14b00:	cmp	r0, #4
   14b04:	beq	149c0 <__assert_fail@plt+0x34d8>
   14b08:	mov	r0, #7
   14b0c:	b	149bc <__assert_fail@plt+0x34d4>
   14b10:	ldr	r0, [r4, #32]
   14b14:	movw	r1, #48488	; 0xbd68
   14b18:	movt	r1, #1
   14b1c:	bl	178f8 <__assert_fail@plt+0x6410>
   14b20:	cmn	r0, #1
   14b24:	str	r0, [r6, #36]	; 0x24
   14b28:	ble	147bc <__assert_fail@plt+0x32d4>
   14b2c:	ldrh	r0, [r6, #58]	; 0x3a
   14b30:	orr	r0, r0, #2
   14b34:	strh	r0, [r6, #58]	; 0x3a
   14b38:	str	r6, [r4]
   14b3c:	ldrh	r0, [r6, #56]	; 0x38
   14b40:	cmp	r0, #11
   14b44:	beq	14dec <__assert_fail@plt+0x3904>
   14b48:	b	14e20 <__assert_fail@plt+0x3938>
   14b4c:	ldrb	r0, [r4, #49]	; 0x31
   14b50:	mov	r5, #0
   14b54:	tst	r0, #32
   14b58:	bne	14ec8 <__assert_fail@plt+0x39e0>
   14b5c:	ldr	r5, [r7, #4]
   14b60:	mov	r0, r7
   14b64:	str	r5, [r4]
   14b68:	bl	13af8 <__assert_fail@plt+0x2610>
   14b6c:	ldr	r0, [r5, #48]	; 0x30
   14b70:	cmn	r0, #1
   14b74:	beq	14bd8 <__assert_fail@plt+0x36f0>
   14b78:	ldrh	r0, [r5, #56]	; 0x38
   14b7c:	cmp	r0, #11
   14b80:	beq	14fa4 <__assert_fail@plt+0x3abc>
   14b84:	ldr	r0, [r5, #40]	; 0x28
   14b88:	ldr	r1, [r4, #24]
   14b8c:	mov	r2, #0
   14b90:	strb	r2, [r1, r0]
   14b94:	ldr	r0, [r5, #48]	; 0x30
   14b98:	cmp	r0, #0
   14b9c:	beq	14cf4 <__assert_fail@plt+0x380c>
   14ba0:	ldrh	r0, [r5, #58]	; 0x3a
   14ba4:	tst	r0, #2
   14ba8:	bne	14d2c <__assert_fail@plt+0x3844>
   14bac:	tst	r0, #1
   14bb0:	bne	14f5c <__assert_fail@plt+0x3a74>
   14bb4:	ldr	r1, [r5, #4]
   14bb8:	movw	r3, #48487	; 0xbd67
   14bbc:	mov	r0, r4
   14bc0:	mvn	r2, #0
   14bc4:	movt	r3, #1
   14bc8:	bl	15084 <__assert_fail@plt+0x3b9c>
   14bcc:	cmp	r0, #0
   14bd0:	bne	14d04 <__assert_fail@plt+0x381c>
   14bd4:	b	14f5c <__assert_fail@plt+0x3a74>
   14bd8:	mov	r0, r5
   14bdc:	bl	13af8 <__assert_fail@plt+0x2610>
   14be0:	bl	1138c <__errno_location@plt>
   14be4:	mov	r5, #0
   14be8:	str	r5, [r0]
   14bec:	str	r5, [r4]
   14bf0:	mov	r0, r5
   14bf4:	sub	sp, fp, #24
   14bf8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14bfc:	ldr	r0, [r4, #56]	; 0x38
   14c00:	bl	13af8 <__assert_fail@plt+0x2610>
   14c04:	ldr	r1, [r6, #52]	; 0x34
   14c08:	add	r7, r6, #168	; 0xa8
   14c0c:	str	r1, [r6, #40]	; 0x28
   14c10:	add	r2, r1, #1
   14c14:	mov	r1, r7
   14c18:	ldr	r0, [r4, #24]
   14c1c:	bl	11224 <memmove@plt>
   14c20:	mov	r0, r7
   14c24:	mov	r1, #47	; 0x2f
   14c28:	bl	1141c <strrchr@plt>
   14c2c:	cmp	r0, #0
   14c30:	beq	14c6c <__assert_fail@plt+0x3784>
   14c34:	cmp	r0, r7
   14c38:	bne	14c48 <__assert_fail@plt+0x3760>
   14c3c:	ldrb	r1, [r6, #169]	; 0xa9
   14c40:	cmp	r1, #0
   14c44:	beq	14c6c <__assert_fail@plt+0x3784>
   14c48:	add	r8, r0, #1
   14c4c:	mov	r0, r8
   14c50:	bl	11374 <strlen@plt>
   14c54:	mov	r9, r0
   14c58:	add	r2, r0, #1
   14c5c:	mov	r0, r7
   14c60:	mov	r1, r8
   14c64:	bl	11224 <memmove@plt>
   14c68:	str	r9, [r6, #52]	; 0x34
   14c6c:	ldr	r0, [r4, #24]
   14c70:	movw	r1, #258	; 0x102
   14c74:	str	r0, [r6, #24]
   14c78:	str	r0, [r6, #28]
   14c7c:	ldrh	r0, [r4, #48]	; 0x30
   14c80:	tst	r0, r1
   14c84:	beq	14cc8 <__assert_fail@plt+0x37e0>
   14c88:	movw	r0, #15096	; 0x3af8
   14c8c:	movw	r2, #25024	; 0x61c0
   14c90:	movw	r3, #25056	; 0x61e0
   14c94:	mov	r1, #0
   14c98:	movt	r0, #1
   14c9c:	movt	r2, #1
   14ca0:	movt	r3, #1
   14ca4:	str	r0, [sp]
   14ca8:	mov	r0, #31
   14cac:	bl	168d4 <__assert_fail@plt+0x53ec>
   14cb0:	str	r0, [r4, #56]	; 0x38
   14cb4:	str	r6, [r4]
   14cb8:	ldrh	r0, [r6, #56]	; 0x38
   14cbc:	cmp	r0, #11
   14cc0:	beq	14dec <__assert_fail@plt+0x3904>
   14cc4:	b	14e20 <__assert_fail@plt+0x3938>
   14cc8:	mov	r0, #32
   14ccc:	bl	1a7ec <__assert_fail@plt+0x9304>
   14cd0:	cmp	r0, #0
   14cd4:	str	r0, [r4, #56]	; 0x38
   14cd8:	beq	14ddc <__assert_fail@plt+0x38f4>
   14cdc:	bl	1a8f4 <__assert_fail@plt+0x940c>
   14ce0:	str	r6, [r4]
   14ce4:	ldrh	r0, [r6, #56]	; 0x38
   14ce8:	cmp	r0, #11
   14cec:	beq	14dec <__assert_fail@plt+0x3904>
   14cf0:	b	14e20 <__assert_fail@plt+0x3938>
   14cf4:	mov	r0, r4
   14cf8:	bl	15ecc <__assert_fail@plt+0x49e4>
   14cfc:	cmp	r0, #0
   14d00:	beq	14f5c <__assert_fail@plt+0x3a74>
   14d04:	bl	1138c <__errno_location@plt>
   14d08:	ldr	r0, [r0]
   14d0c:	str	r0, [r5, #32]
   14d10:	ldr	r0, [r4, #48]	; 0x30
   14d14:	orr	r0, r0, #8192	; 0x2000
   14d18:	str	r0, [r4, #48]	; 0x30
   14d1c:	ldrh	r0, [r5, #56]	; 0x38
   14d20:	cmp	r0, #2
   14d24:	bne	14f68 <__assert_fail@plt+0x3a80>
   14d28:	b	14f8c <__assert_fail@plt+0x3aa4>
   14d2c:	ldr	r0, [r4, #48]	; 0x30
   14d30:	tst	r0, #4
   14d34:	bne	14f54 <__assert_fail@plt+0x3a6c>
   14d38:	ldr	r6, [r5, #36]	; 0x24
   14d3c:	tst	r0, #512	; 0x200
   14d40:	bne	14f28 <__assert_fail@plt+0x3a40>
   14d44:	mov	r0, r6
   14d48:	bl	11458 <fchdir@plt>
   14d4c:	cmp	r0, #0
   14d50:	beq	14f54 <__assert_fail@plt+0x3a6c>
   14d54:	bl	1138c <__errno_location@plt>
   14d58:	ldr	r0, [r0]
   14d5c:	str	r0, [r5, #32]
   14d60:	ldr	r0, [r4, #48]	; 0x30
   14d64:	orr	r0, r0, #8192	; 0x2000
   14d68:	str	r0, [r4, #48]	; 0x30
   14d6c:	b	14f54 <__assert_fail@plt+0x3a6c>
   14d70:	ldr	r0, [r4, #32]
   14d74:	movw	r1, #48488	; 0xbd68
   14d78:	movt	r1, #1
   14d7c:	bl	178f8 <__assert_fail@plt+0x6410>
   14d80:	cmn	r0, #1
   14d84:	str	r0, [r6, #36]	; 0x24
   14d88:	ble	14908 <__assert_fail@plt+0x3420>
   14d8c:	ldrh	r0, [r6, #58]	; 0x3a
   14d90:	orr	r0, r0, #2
   14d94:	strh	r0, [r6, #58]	; 0x3a
   14d98:	mov	r0, #3
   14d9c:	strh	r0, [r6, #60]	; 0x3c
   14da0:	ldr	r0, [r6, #4]
   14da4:	ldr	r1, [r0, #28]
   14da8:	ldr	r0, [r0, #40]	; 0x28
   14dac:	sub	r2, r0, #1
   14db0:	ldrb	r1, [r1, r2]
   14db4:	cmp	r1, #47	; 0x2f
   14db8:	ldr	r1, [r4, #24]
   14dbc:	moveq	r0, r2
   14dc0:	mov	r2, #47	; 0x2f
   14dc4:	strb	r2, [r1, r0]!
   14dc8:	ldr	r2, [r6, #52]	; 0x34
   14dcc:	add	r0, r1, #1
   14dd0:	add	r1, r6, #168	; 0xa8
   14dd4:	add	r2, r2, #1
   14dd8:	bl	11224 <memmove@plt>
   14ddc:	str	r6, [r4]
   14de0:	ldrh	r0, [r6, #56]	; 0x38
   14de4:	cmp	r0, #11
   14de8:	bne	14e20 <__assert_fail@plt+0x3938>
   14dec:	add	r0, r6, #112	; 0x70
   14df0:	ldrd	r0, [r0]
   14df4:	eor	r2, r0, #1
   14df8:	orrs	r2, r2, r1
   14dfc:	beq	14ed4 <__assert_fail@plt+0x39ec>
   14e00:	eor	r0, r0, #2
   14e04:	orrs	r0, r0, r1
   14e08:	bne	14fa4 <__assert_fail@plt+0x3abc>
   14e0c:	mov	r0, r4
   14e10:	mov	r1, r6
   14e14:	mov	r2, #0
   14e18:	bl	14278 <__assert_fail@plt+0x2d90>
   14e1c:	strh	r0, [r6, #56]	; 0x38
   14e20:	cmp	r0, #1
   14e24:	bne	14ec4 <__assert_fail@plt+0x39dc>
   14e28:	ldr	r0, [r6, #48]	; 0x30
   14e2c:	add	r8, r6, #64	; 0x40
   14e30:	cmp	r0, #0
   14e34:	bne	14e40 <__assert_fail@plt+0x3958>
   14e38:	ldrd	r0, [r8]
   14e3c:	strd	r0, [r4, #16]
   14e40:	ldrh	r0, [r4, #48]	; 0x30
   14e44:	movw	r1, #258	; 0x102
   14e48:	tst	r0, r1
   14e4c:	beq	14ee4 <__assert_fail@plt+0x39fc>
   14e50:	mov	r0, #24
   14e54:	bl	1a7ec <__assert_fail@plt+0x9304>
   14e58:	cmp	r0, #0
   14e5c:	beq	14f10 <__assert_fail@plt+0x3a28>
   14e60:	ldrd	r2, [r8]
   14e64:	mov	r7, r0
   14e68:	add	r0, r6, #160	; 0xa0
   14e6c:	stm	r7, {r2, r3}
   14e70:	add	r2, r7, #8
   14e74:	ldrd	r0, [r0]
   14e78:	stm	r2, {r0, r1, r6}
   14e7c:	mov	r1, r7
   14e80:	ldr	r0, [r4, #56]	; 0x38
   14e84:	bl	17530 <__assert_fail@plt+0x6048>
   14e88:	cmp	r0, r7
   14e8c:	beq	14ed4 <__assert_fail@plt+0x39ec>
   14e90:	mov	r4, r0
   14e94:	mov	r0, r7
   14e98:	bl	13af8 <__assert_fail@plt+0x2610>
   14e9c:	cmp	r4, #0
   14ea0:	beq	14f10 <__assert_fail@plt+0x3a28>
   14ea4:	ldr	r0, [r4, #16]
   14ea8:	mov	r1, #2
   14eac:	mov	r5, r6
   14eb0:	strh	r1, [r6, #56]	; 0x38
   14eb4:	str	r0, [r6]
   14eb8:	mov	r0, r5
   14ebc:	sub	sp, fp, #24
   14ec0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ec4:	mov	r5, r6
   14ec8:	mov	r0, r5
   14ecc:	sub	sp, fp, #24
   14ed0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ed4:	mov	r5, r6
   14ed8:	mov	r0, r5
   14edc:	sub	sp, fp, #24
   14ee0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ee4:	ldr	r0, [r4, #56]	; 0x38
   14ee8:	mov	r1, r8
   14eec:	bl	1a910 <__assert_fail@plt+0x9428>
   14ef0:	cmp	r0, #0
   14ef4:	mov	r5, r6
   14ef8:	movne	r0, #2
   14efc:	strhne	r0, [r6, #56]	; 0x38
   14f00:	strne	r6, [r6]
   14f04:	mov	r0, r5
   14f08:	sub	sp, fp, #24
   14f0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f10:	bl	1138c <__errno_location@plt>
   14f14:	mov	r1, #12
   14f18:	str	r1, [r0]
   14f1c:	mov	r0, r5
   14f20:	sub	sp, fp, #24
   14f24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f28:	ldr	r1, [r4, #32]
   14f2c:	cmp	r1, r6
   14f30:	bne	14f3c <__assert_fail@plt+0x3a54>
   14f34:	cmn	r1, #100	; 0x64
   14f38:	bne	14fa4 <__assert_fail@plt+0x3abc>
   14f3c:	add	r0, r4, #60	; 0x3c
   14f40:	bl	1785c <__assert_fail@plt+0x6374>
   14f44:	cmp	r0, #0
   14f48:	bmi	14f50 <__assert_fail@plt+0x3a68>
   14f4c:	bl	114ac <close@plt>
   14f50:	str	r6, [r4, #32]
   14f54:	ldr	r0, [r5, #36]	; 0x24
   14f58:	bl	114ac <close@plt>
   14f5c:	ldrh	r0, [r5, #56]	; 0x38
   14f60:	cmp	r0, #2
   14f64:	beq	14f8c <__assert_fail@plt+0x3aa4>
   14f68:	ldr	r0, [r5, #32]
   14f6c:	mov	r1, #7
   14f70:	cmp	r0, #0
   14f74:	movweq	r1, #6
   14f78:	strh	r1, [r5, #56]	; 0x38
   14f7c:	bne	14f8c <__assert_fail@plt+0x3aa4>
   14f80:	mov	r0, r4
   14f84:	mov	r1, r5
   14f88:	bl	14fa8 <__assert_fail@plt+0x3ac0>
   14f8c:	ldrb	r0, [r4, #49]	; 0x31
   14f90:	tst	r0, #32
   14f94:	movne	r5, #0
   14f98:	mov	r0, r5
   14f9c:	sub	sp, fp, #24
   14fa0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14fa4:	bl	114a0 <abort@plt>
   14fa8:	push	{r4, r5, r7, sl, fp, lr}
   14fac:	add	fp, sp, #16
   14fb0:	sub	sp, sp, #24
   14fb4:	ldrh	r2, [r0, #48]	; 0x30
   14fb8:	movw	r3, #258	; 0x102
   14fbc:	add	lr, r1, #64	; 0x40
   14fc0:	add	r4, r1, #160	; 0xa0
   14fc4:	tst	r2, r3
   14fc8:	beq	15000 <__assert_fail@plt+0x3b18>
   14fcc:	ldrd	r2, [lr]
   14fd0:	mov	r1, sp
   14fd4:	stm	sp, {r2, r3}
   14fd8:	ldrd	r2, [r4]
   14fdc:	str	r3, [sp, #12]
   14fe0:	str	r2, [sp, #8]
   14fe4:	ldr	r0, [r0, #56]	; 0x38
   14fe8:	bl	17578 <__assert_fail@plt+0x6090>
   14fec:	cmp	r0, #0
   14ff0:	beq	15080 <__assert_fail@plt+0x3b98>
   14ff4:	bl	13af8 <__assert_fail@plt+0x2610>
   14ff8:	sub	sp, fp, #16
   14ffc:	pop	{r4, r5, r7, sl, fp, pc}
   15000:	ldr	r1, [r1, #4]
   15004:	cmp	r1, #0
   15008:	beq	15078 <__assert_fail@plt+0x3b90>
   1500c:	ldr	r2, [r1, #48]	; 0x30
   15010:	cmp	r2, #0
   15014:	bmi	15078 <__assert_fail@plt+0x3b90>
   15018:	ldr	ip, [r0, #56]	; 0x38
   1501c:	ldrd	r2, [ip, #16]
   15020:	orrs	r2, r2, r3
   15024:	beq	15080 <__assert_fail@plt+0x3b98>
   15028:	ldrd	r2, [r4]
   1502c:	ldrd	r4, [ip]
   15030:	eor	r3, r5, r3
   15034:	eor	r2, r4, r2
   15038:	orrs	r2, r2, r3
   1503c:	bne	15078 <__assert_fail@plt+0x3b90>
   15040:	add	r3, ip, #8
   15044:	ldm	lr, {r2, r5}
   15048:	ldm	r3, {r4, r7}
   1504c:	eor	r7, r7, r5
   15050:	eor	r2, r4, r2
   15054:	orrs	r2, r2, r7
   15058:	bne	15078 <__assert_fail@plt+0x3b90>
   1505c:	add	r2, r1, #64	; 0x40
   15060:	add	r1, r1, #160	; 0xa0
   15064:	ldm	r2, {r2, r5}
   15068:	stm	r3, {r2, r5}
   1506c:	ldr	r0, [r0, #56]	; 0x38
   15070:	ldrd	r2, [r1]
   15074:	strd	r2, [r0]
   15078:	sub	sp, fp, #16
   1507c:	pop	{r4, r5, r7, sl, fp, pc}
   15080:	bl	114a0 <abort@plt>
   15084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15088:	add	fp, sp, #28
   1508c:	sub	sp, sp, #108	; 0x6c
   15090:	mov	r7, r3
   15094:	mov	r4, r2
   15098:	mov	r8, r1
   1509c:	mov	sl, r0
   150a0:	cmp	r3, #0
   150a4:	beq	15130 <__assert_fail@plt+0x3c48>
   150a8:	movw	r1, #48487	; 0xbd67
   150ac:	mov	r0, r7
   150b0:	movt	r1, #1
   150b4:	bl	11200 <strcmp@plt>
   150b8:	cmp	r0, #0
   150bc:	mov	r6, r0
   150c0:	movwne	r6, #1
   150c4:	ldr	r0, [sl, #48]	; 0x30
   150c8:	tst	r0, #4
   150cc:	bne	15140 <__assert_fail@plt+0x3c58>
   150d0:	cmn	r4, #1
   150d4:	mov	r1, #0
   150d8:	mov	r9, #0
   150dc:	movwgt	r1, #1
   150e0:	orrs	r1, r1, r6
   150e4:	bne	15168 <__assert_fail@plt+0x3c80>
   150e8:	ands	r0, r0, #512	; 0x200
   150ec:	beq	15168 <__assert_fail@plt+0x3c80>
   150f0:	add	r4, sl, #60	; 0x3c
   150f4:	mov	r0, r4
   150f8:	bl	17854 <__assert_fail@plt+0x636c>
   150fc:	cmp	r0, #0
   15100:	bne	15170 <__assert_fail@plt+0x3c88>
   15104:	mov	r0, r4
   15108:	bl	178a8 <__assert_fail@plt+0x63c0>
   1510c:	cmn	r0, #1
   15110:	ble	15170 <__assert_fail@plt+0x3c88>
   15114:	mov	r4, r0
   15118:	mov	r9, #0
   1511c:	mov	r7, #0
   15120:	ldr	r5, [sl, #48]	; 0x30
   15124:	tst	r5, #2
   15128:	beq	151b4 <__assert_fail@plt+0x3ccc>
   1512c:	b	151fc <__assert_fail@plt+0x3d14>
   15130:	mov	r6, #1
   15134:	ldr	r0, [sl, #48]	; 0x30
   15138:	tst	r0, #4
   1513c:	beq	150d0 <__assert_fail@plt+0x3be8>
   15140:	mov	r5, #0
   15144:	cmp	r4, #0
   15148:	bmi	151f0 <__assert_fail@plt+0x3d08>
   1514c:	ands	r0, r0, #512	; 0x200
   15150:	beq	151f0 <__assert_fail@plt+0x3d08>
   15154:	mov	r0, r4
   15158:	bl	114ac <close@plt>
   1515c:	mov	r0, r5
   15160:	sub	sp, fp, #28
   15164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15168:	cmn	r4, #1
   1516c:	bgt	151a8 <__assert_fail@plt+0x3cc0>
   15170:	ldr	r0, [sl, #48]	; 0x30
   15174:	mov	r1, #32768	; 0x8000
   15178:	and	r1, r1, r0, lsl #11
   1517c:	tst	r0, #512	; 0x200
   15180:	orr	r1, r1, #18688	; 0x4900
   15184:	orr	r2, r1, #524288	; 0x80000
   15188:	bne	15224 <__assert_fail@plt+0x3d3c>
   1518c:	mov	r0, r7
   15190:	mov	r1, r2
   15194:	bl	1ac60 <__assert_fail@plt+0x9778>
   15198:	mov	r4, r0
   1519c:	mov	r9, #1
   151a0:	cmp	r0, #0
   151a4:	bmi	15240 <__assert_fail@plt+0x3d58>
   151a8:	ldr	r5, [sl, #48]	; 0x30
   151ac:	tst	r5, #2
   151b0:	bne	151fc <__assert_fail@plt+0x3d14>
   151b4:	cmp	r7, #0
   151b8:	beq	151d4 <__assert_fail@plt+0x3cec>
   151bc:	movw	r1, #48487	; 0xbd67
   151c0:	mov	r0, r7
   151c4:	movt	r1, #1
   151c8:	bl	11200 <strcmp@plt>
   151cc:	cmp	r0, #0
   151d0:	beq	151fc <__assert_fail@plt+0x3d14>
   151d4:	tst	r5, #512	; 0x200
   151d8:	bne	15298 <__assert_fail@plt+0x3db0>
   151dc:	mov	r0, r4
   151e0:	bl	11458 <fchdir@plt>
   151e4:	mov	r5, r0
   151e8:	cmp	r9, #0
   151ec:	bne	152e0 <__assert_fail@plt+0x3df8>
   151f0:	mov	r0, r5
   151f4:	sub	sp, fp, #28
   151f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151fc:	mov	r2, sp
   15200:	mov	r0, #3
   15204:	mov	r1, r4
   15208:	bl	112b4 <__fxstat64@plt>
   1520c:	cmp	r0, #0
   15210:	beq	15250 <__assert_fail@plt+0x3d68>
   15214:	mvn	r5, #0
   15218:	cmp	r9, #0
   1521c:	beq	151f0 <__assert_fail@plt+0x3d08>
   15220:	b	152e0 <__assert_fail@plt+0x3df8>
   15224:	ldr	r0, [sl, #32]
   15228:	mov	r1, r7
   1522c:	bl	178f8 <__assert_fail@plt+0x6410>
   15230:	mov	r4, r0
   15234:	mov	r9, #1
   15238:	cmp	r0, #0
   1523c:	bpl	151a8 <__assert_fail@plt+0x3cc0>
   15240:	mvn	r5, #0
   15244:	mov	r0, r5
   15248:	sub	sp, fp, #28
   1524c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15250:	add	r0, r8, #64	; 0x40
   15254:	ldm	sp, {r2, r3}
   15258:	ldrd	r0, [r0]
   1525c:	eor	r1, r1, r3
   15260:	eor	r0, r0, r2
   15264:	orrs	r0, r0, r1
   15268:	bne	152c8 <__assert_fail@plt+0x3de0>
   1526c:	add	r0, r8, #160	; 0xa0
   15270:	ldr	r2, [sp, #96]	; 0x60
   15274:	ldr	r3, [sp, #100]	; 0x64
   15278:	ldrd	r0, [r0]
   1527c:	eor	r1, r1, r3
   15280:	eor	r0, r0, r2
   15284:	orrs	r0, r0, r1
   15288:	bne	152c8 <__assert_fail@plt+0x3de0>
   1528c:	ldr	r5, [sl, #48]	; 0x30
   15290:	tst	r5, #512	; 0x200
   15294:	beq	151dc <__assert_fail@plt+0x3cf4>
   15298:	ldr	r1, [sl, #32]
   1529c:	cmp	r1, r4
   152a0:	bne	152ac <__assert_fail@plt+0x3dc4>
   152a4:	cmn	r1, #100	; 0x64
   152a8:	bne	15330 <__assert_fail@plt+0x3e48>
   152ac:	cmp	r6, #0
   152b0:	beq	15304 <__assert_fail@plt+0x3e1c>
   152b4:	add	r0, sl, #60	; 0x3c
   152b8:	bl	1785c <__assert_fail@plt+0x6374>
   152bc:	cmp	r0, #0
   152c0:	bpl	15318 <__assert_fail@plt+0x3e30>
   152c4:	b	1531c <__assert_fail@plt+0x3e34>
   152c8:	bl	1138c <__errno_location@plt>
   152cc:	mov	r1, #2
   152d0:	str	r1, [r0]
   152d4:	mvn	r5, #0
   152d8:	cmp	r9, #0
   152dc:	beq	151f0 <__assert_fail@plt+0x3d08>
   152e0:	bl	1138c <__errno_location@plt>
   152e4:	ldr	r7, [r0]
   152e8:	mov	r6, r0
   152ec:	mov	r0, r4
   152f0:	bl	114ac <close@plt>
   152f4:	str	r7, [r6]
   152f8:	mov	r0, r5
   152fc:	sub	sp, fp, #28
   15300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15304:	tst	r5, #4
   15308:	bne	1531c <__assert_fail@plt+0x3e34>
   1530c:	cmp	r1, #0
   15310:	bmi	1531c <__assert_fail@plt+0x3e34>
   15314:	mov	r0, r1
   15318:	bl	114ac <close@plt>
   1531c:	str	r4, [sl, #32]
   15320:	mov	r5, #0
   15324:	mov	r0, r5
   15328:	sub	sp, fp, #28
   1532c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15330:	bl	114a0 <abort@plt>
   15334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15338:	add	fp, sp, #28
   1533c:	sub	sp, sp, #68	; 0x44
   15340:	ldr	sl, [r0]
   15344:	mov	r4, r1
   15348:	mov	r5, r0
   1534c:	str	r0, [fp, #-44]	; 0xffffffd4
   15350:	ldr	r6, [sl, #12]
   15354:	cmp	r6, #0
   15358:	beq	153a0 <__assert_fail@plt+0x3eb8>
   1535c:	mov	r0, r6
   15360:	bl	1144c <dirfd@plt>
   15364:	cmn	r0, #1
   15368:	str	r0, [fp, #-32]	; 0xffffffe0
   1536c:	ble	153d4 <__assert_fail@plt+0x3eec>
   15370:	mov	r1, r5
   15374:	str	r6, [sp, #12]
   15378:	str	r4, [sp, #4]
   1537c:	mov	r7, #0
   15380:	ldr	r0, [r1, #44]!	; 0x2c
   15384:	str	r1, [sp, #20]
   15388:	mvn	r1, #0
   1538c:	cmp	r0, #0
   15390:	movweq	r1, #34464	; 0x86a0
   15394:	movteq	r1, #1
   15398:	str	r1, [sp, #32]
   1539c:	b	156cc <__assert_fail@plt+0x41e4>
   153a0:	ldr	r3, [r5, #48]	; 0x30
   153a4:	mvn	r0, #99	; 0x63
   153a8:	mov	r2, #0
   153ac:	and	r1, r3, #516	; 0x204
   153b0:	cmp	r1, #512	; 0x200
   153b4:	ldr	r1, [sl, #24]
   153b8:	ldreq	r0, [r5, #32]
   153bc:	tst	r3, #16
   153c0:	beq	153fc <__assert_fail@plt+0x3f14>
   153c4:	tst	r3, #1
   153c8:	bne	153f0 <__assert_fail@plt+0x3f08>
   153cc:	mov	r2, #32768	; 0x8000
   153d0:	b	153fc <__assert_fail@plt+0x3f14>
   153d4:	ldr	r0, [sl, #12]
   153d8:	bl	114d0 <closedir@plt>
   153dc:	mov	r6, #0
   153e0:	str	r6, [sl, #12]
   153e4:	cmp	r4, #3
   153e8:	beq	15444 <__assert_fail@plt+0x3f5c>
   153ec:	b	15ddc <__assert_fail@plt+0x48f4>
   153f0:	ldr	r3, [sl, #48]	; 0x30
   153f4:	cmp	r3, #0
   153f8:	movne	r2, #32768	; 0x8000
   153fc:	sub	r3, fp, #32
   15400:	bl	17930 <__assert_fail@plt+0x6448>
   15404:	cmp	r0, #0
   15408:	str	r0, [sl, #12]
   1540c:	beq	15438 <__assert_fail@plt+0x3f50>
   15410:	ldrh	r0, [sl, #56]	; 0x38
   15414:	cmp	r0, #11
   15418:	bne	15464 <__assert_fail@plt+0x3f7c>
   1541c:	mov	r0, r5
   15420:	mov	r1, sl
   15424:	mov	r2, #0
   15428:	bl	14278 <__assert_fail@plt+0x2d90>
   1542c:	strh	r0, [sl, #56]	; 0x38
   15430:	mov	r7, r5
   15434:	b	15530 <__assert_fail@plt+0x4048>
   15438:	mov	r6, #0
   1543c:	cmp	r4, #3
   15440:	bne	15ddc <__assert_fail@plt+0x48f4>
   15444:	mov	r0, #4
   15448:	strh	r0, [sl, #56]	; 0x38
   1544c:	bl	1138c <__errno_location@plt>
   15450:	ldr	r0, [r0]
   15454:	str	r0, [sl, #32]
   15458:	mov	r0, r6
   1545c:	sub	sp, fp, #28
   15460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15464:	ldrb	r0, [r5, #49]	; 0x31
   15468:	mov	r7, r5
   1546c:	tst	r0, #1
   15470:	beq	15530 <__assert_fail@plt+0x4048>
   15474:	mov	r0, r7
   15478:	mov	r1, sl
   1547c:	add	r8, sl, #64	; 0x40
   15480:	bl	14fa8 <__assert_fail@plt+0x3ac0>
   15484:	mov	r0, r7
   15488:	mov	r1, sl
   1548c:	mov	r2, #0
   15490:	bl	14278 <__assert_fail@plt+0x2d90>
   15494:	ldrh	r0, [r7, #48]	; 0x30
   15498:	movw	r1, #258	; 0x102
   1549c:	tst	r0, r1
   154a0:	beq	15514 <__assert_fail@plt+0x402c>
   154a4:	mov	r0, #24
   154a8:	bl	1a7ec <__assert_fail@plt+0x9304>
   154ac:	cmp	r0, #0
   154b0:	beq	155d8 <__assert_fail@plt+0x40f0>
   154b4:	ldrd	r2, [r8]
   154b8:	mov	r5, r0
   154bc:	add	r0, sl, #160	; 0xa0
   154c0:	ldr	r7, [fp, #-44]	; 0xffffffd4
   154c4:	stm	r5, {r2, r3}
   154c8:	add	r2, r5, #8
   154cc:	ldrd	r0, [r0]
   154d0:	stm	r2, {r0, r1, sl}
   154d4:	mov	r1, r5
   154d8:	ldr	r0, [r7, #56]	; 0x38
   154dc:	bl	17530 <__assert_fail@plt+0x6048>
   154e0:	cmp	r0, r5
   154e4:	beq	15530 <__assert_fail@plt+0x4048>
   154e8:	mov	r8, r0
   154ec:	mov	r0, r5
   154f0:	bl	13af8 <__assert_fail@plt+0x2610>
   154f4:	cmp	r8, #0
   154f8:	beq	155d8 <__assert_fail@plt+0x40f0>
   154fc:	ldr	r7, [fp, #-44]	; 0xffffffd4
   15500:	ldr	r0, [r8, #16]
   15504:	mov	r1, #2
   15508:	strh	r1, [sl, #56]	; 0x38
   1550c:	str	r0, [sl]
   15510:	b	15530 <__assert_fail@plt+0x4048>
   15514:	ldr	r0, [r7, #56]	; 0x38
   15518:	mov	r1, r8
   1551c:	bl	1a910 <__assert_fail@plt+0x9428>
   15520:	cmp	r0, #0
   15524:	movne	r0, #2
   15528:	strhne	r0, [sl, #56]	; 0x38
   1552c:	strne	sl, [sl]
   15530:	mov	r1, r7
   15534:	mov	r5, r7
   15538:	str	r4, [sp, #4]
   1553c:	str	r6, [sp, #12]
   15540:	ldr	r0, [r1, #44]!	; 0x2c
   15544:	str	r1, [sp, #20]
   15548:	mvn	r1, #0
   1554c:	cmp	r0, #0
   15550:	movweq	r1, #34464	; 0x86a0
   15554:	movteq	r1, #1
   15558:	cmp	r4, #2
   1555c:	str	r1, [sp, #32]
   15560:	bne	1557c <__assert_fail@plt+0x4094>
   15564:	mov	r7, #1
   15568:	cmp	r4, #3
   1556c:	bne	156cc <__assert_fail@plt+0x41e4>
   15570:	sub	r0, r4, #3
   15574:	mov	r5, #0
   15578:	b	15610 <__assert_fail@plt+0x4128>
   1557c:	ldr	r0, [r5, #48]	; 0x30
   15580:	and	r0, r0, #56	; 0x38
   15584:	cmp	r0, #24
   15588:	bne	15608 <__assert_fail@plt+0x4120>
   1558c:	ldr	r0, [sl, #84]	; 0x54
   15590:	cmp	r0, #2
   15594:	bne	15608 <__assert_fail@plt+0x4120>
   15598:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1559c:	mov	r0, sl
   155a0:	bl	16260 <__assert_fail@plt+0x4d78>
   155a4:	movw	r1, #26984	; 0x6968
   155a8:	cmp	r0, r1
   155ac:	ble	155f4 <__assert_fail@plt+0x410c>
   155b0:	movw	r1, #26985	; 0x6969
   155b4:	cmp	r0, r1
   155b8:	movwne	r1, #16719	; 0x414f
   155bc:	movtne	r1, #21318	; 0x5346
   155c0:	cmpne	r0, r1
   155c4:	beq	15608 <__assert_fail@plt+0x4120>
   155c8:	movw	r1, #40864	; 0x9fa0
   155cc:	cmp	r0, r1
   155d0:	beq	15608 <__assert_fail@plt+0x4120>
   155d4:	b	15564 <__assert_fail@plt+0x407c>
   155d8:	bl	1138c <__errno_location@plt>
   155dc:	mov	r1, #12
   155e0:	mov	r6, #0
   155e4:	str	r1, [r0]
   155e8:	mov	r0, r6
   155ec:	sub	sp, fp, #28
   155f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155f4:	movw	r1, #19778	; 0x4d42
   155f8:	movt	r1, #65363	; 0xff53
   155fc:	cmp	r0, r1
   15600:	cmpne	r0, #0
   15604:	bne	15564 <__assert_fail@plt+0x407c>
   15608:	sub	r0, r4, #3
   1560c:	mov	r5, #1
   15610:	clz	r0, r0
   15614:	lsr	r7, r0, #5
   15618:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1561c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15620:	ldrb	r0, [r0, #49]	; 0x31
   15624:	tst	r0, #2
   15628:	beq	15644 <__assert_fail@plt+0x415c>
   1562c:	mov	r0, r2
   15630:	movw	r1, #1030	; 0x406
   15634:	mov	r2, #3
   15638:	bl	1aa80 <__assert_fail@plt+0x9598>
   1563c:	mov	r2, r0
   15640:	str	r0, [fp, #-32]	; 0xffffffe0
   15644:	cmp	r2, #0
   15648:	bmi	15664 <__assert_fail@plt+0x417c>
   1564c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15650:	mov	r1, sl
   15654:	mov	r3, #0
   15658:	bl	15084 <__assert_fail@plt+0x3b9c>
   1565c:	cmp	r0, #0
   15660:	beq	156c4 <__assert_fail@plt+0x41dc>
   15664:	and	r0, r7, r5
   15668:	cmp	r0, #1
   1566c:	bne	1567c <__assert_fail@plt+0x4194>
   15670:	bl	1138c <__errno_location@plt>
   15674:	ldr	r0, [r0]
   15678:	str	r0, [sl, #32]
   1567c:	ldrh	r0, [sl, #58]	; 0x3a
   15680:	orr	r0, r0, #1
   15684:	strh	r0, [sl, #58]	; 0x3a
   15688:	ldr	r0, [sl, #12]
   1568c:	bl	114d0 <closedir@plt>
   15690:	ldr	r5, [fp, #-44]	; 0xffffffd4
   15694:	mov	r4, #0
   15698:	str	r4, [sl, #12]
   1569c:	ldrb	r0, [r5, #49]	; 0x31
   156a0:	tst	r0, #2
   156a4:	beq	156b8 <__assert_fail@plt+0x41d0>
   156a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   156ac:	cmp	r0, #0
   156b0:	bmi	156b8 <__assert_fail@plt+0x41d0>
   156b4:	bl	114ac <close@plt>
   156b8:	mov	r7, #1
   156bc:	str	r4, [sl, #12]
   156c0:	b	156cc <__assert_fail@plt+0x41e4>
   156c4:	ldr	r5, [fp, #-44]	; 0xffffffd4
   156c8:	mov	r7, #0
   156cc:	ldr	r0, [sl, #40]	; 0x28
   156d0:	ldr	r1, [sl, #28]
   156d4:	mov	r9, #0
   156d8:	sub	r2, r0, #1
   156dc:	ldrb	r1, [r1, r2]
   156e0:	cmp	r1, #47	; 0x2f
   156e4:	ldrb	r1, [r5, #48]	; 0x30
   156e8:	moveq	r0, r2
   156ec:	tst	r1, #4
   156f0:	mov	r1, #0
   156f4:	str	r1, [sp, #40]	; 0x28
   156f8:	beq	15710 <__assert_fail@plt+0x4228>
   156fc:	ldr	r1, [r5, #24]
   15700:	mov	r2, #47	; 0x2f
   15704:	strb	r2, [r1, r0]!
   15708:	add	r1, r1, #1
   1570c:	str	r1, [sp, #40]	; 0x28
   15710:	ldr	r6, [sl, #12]
   15714:	add	r1, r0, #1
   15718:	str	r1, [fp, #-40]	; 0xffffffd8
   1571c:	cmp	r6, #0
   15720:	beq	15ae8 <__assert_fail@plt+0x4600>
   15724:	ldr	r0, [sl, #48]	; 0x30
   15728:	str	r7, [sp]
   1572c:	mov	r7, #0
   15730:	add	r0, r0, #1
   15734:	str	r0, [sp, #24]
   15738:	ldr	r0, [r5, #36]	; 0x24
   1573c:	sub	r0, r0, r1
   15740:	str	r0, [sp, #44]	; 0x2c
   15744:	bl	1138c <__errno_location@plt>
   15748:	str	r0, [sp, #36]	; 0x24
   1574c:	mov	r0, #0
   15750:	mov	r9, #0
   15754:	mov	r4, #0
   15758:	str	sl, [sp, #28]
   1575c:	str	r0, [sp, #48]	; 0x30
   15760:	mov	r0, #0
   15764:	str	r0, [sp, #8]
   15768:	mov	r0, #0
   1576c:	str	r0, [sp, #16]
   15770:	ldr	r0, [sp, #36]	; 0x24
   15774:	str	r7, [r0]
   15778:	mov	r0, r6
   1577c:	bl	11434 <readdir64@plt>
   15780:	cmp	r0, #0
   15784:	beq	15b64 <__assert_fail@plt+0x467c>
   15788:	mov	r8, r0
   1578c:	ldrb	r0, [r5, #48]	; 0x30
   15790:	tst	r0, #32
   15794:	bne	157c4 <__assert_fail@plt+0x42dc>
   15798:	ldrb	r0, [r8, #19]
   1579c:	cmp	r0, #46	; 0x2e
   157a0:	bne	157c4 <__assert_fail@plt+0x42dc>
   157a4:	ldrb	r0, [r8, #20]
   157a8:	cmp	r0, #0
   157ac:	beq	15a80 <__assert_fail@plt+0x4598>
   157b0:	cmp	r0, #46	; 0x2e
   157b4:	bne	157c4 <__assert_fail@plt+0x42dc>
   157b8:	ldrb	r0, [r8, #21]
   157bc:	cmp	r0, #0
   157c0:	beq	15a80 <__assert_fail@plt+0x4598>
   157c4:	str	r4, [fp, #-36]	; 0xffffffdc
   157c8:	add	r4, r8, #19
   157cc:	mov	r0, r4
   157d0:	bl	11374 <strlen@plt>
   157d4:	mov	r5, r0
   157d8:	add	r0, r0, #176	; 0xb0
   157dc:	bic	r0, r0, #7
   157e0:	bl	1a7ec <__assert_fail@plt+0x9304>
   157e4:	mov	r6, r0
   157e8:	cmp	r0, #0
   157ec:	beq	15e48 <__assert_fail@plt+0x4960>
   157f0:	add	sl, r6, #168	; 0xa8
   157f4:	mov	r1, r4
   157f8:	mov	r2, r5
   157fc:	mov	r0, sl
   15800:	bl	11254 <memcpy@plt>
   15804:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15808:	strb	r7, [sl, r5]
   1580c:	str	r5, [r6, #52]	; 0x34
   15810:	mov	r0, #196608	; 0x30000
   15814:	ldr	r1, [sp, #44]	; 0x2c
   15818:	str	r2, [r6, #44]	; 0x2c
   1581c:	cmp	r5, r1
   15820:	ldr	r4, [r2, #24]
   15824:	str	r7, [r6, #12]
   15828:	str	r7, [r6, #16]
   1582c:	str	r7, [r6, #20]
   15830:	str	r0, [r6, #58]	; 0x3a
   15834:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15838:	str	r4, [r6, #28]
   1583c:	str	r7, [r6, #32]
   15840:	add	r7, r5, r0
   15844:	bcs	15858 <__assert_fail@plt+0x4370>
   15848:	mov	r5, r2
   1584c:	cmp	r7, r0
   15850:	bcs	158d0 <__assert_fail@plt+0x43e8>
   15854:	b	15d28 <__assert_fail@plt+0x4840>
   15858:	ldr	r1, [r2, #36]	; 0x24
   1585c:	movw	r0, #257	; 0x101
   15860:	mov	r5, r2
   15864:	add	r0, r7, r0
   15868:	adds	r1, r0, r1
   1586c:	bcs	15e14 <__assert_fail@plt+0x492c>
   15870:	mov	r0, r4
   15874:	str	r1, [r5, #36]	; 0x24
   15878:	bl	1a81c <__assert_fail@plt+0x9334>
   1587c:	cmp	r0, #0
   15880:	beq	15e34 <__assert_fail@plt+0x494c>
   15884:	cmp	r0, r4
   15888:	str	r0, [r5, #24]
   1588c:	beq	158b4 <__assert_fail@plt+0x43cc>
   15890:	ldrb	r1, [r5, #48]	; 0x30
   15894:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15898:	tst	r1, #4
   1589c:	ldr	r1, [sp, #40]	; 0x28
   158a0:	addne	r1, r0, r2
   158a4:	mov	r0, #1
   158a8:	str	r1, [sp, #40]	; 0x28
   158ac:	str	r0, [sp, #16]
   158b0:	b	158b8 <__assert_fail@plt+0x43d0>
   158b4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   158b8:	ldr	r0, [r5, #36]	; 0x24
   158bc:	sub	r0, r0, r2
   158c0:	str	r0, [sp, #44]	; 0x2c
   158c4:	mov	r0, r2
   158c8:	cmp	r7, r0
   158cc:	bcc	15d28 <__assert_fail@plt+0x4840>
   158d0:	ldr	r0, [sp, #24]
   158d4:	add	r4, r6, #112	; 0x70
   158d8:	str	r0, [r6, #48]	; 0x30
   158dc:	ldr	r0, [r5]
   158e0:	str	r7, [r6, #40]	; 0x28
   158e4:	str	r0, [r6, #4]
   158e8:	ldrd	r0, [r8]
   158ec:	strd	r0, [r4, #48]	; 0x30
   158f0:	ldrb	r0, [r5, #48]	; 0x30
   158f4:	tst	r0, #4
   158f8:	bne	15904 <__assert_fail@plt+0x441c>
   158fc:	str	sl, [r6, #24]
   15900:	b	15920 <__assert_fail@plt+0x4438>
   15904:	ldr	r0, [r6, #28]
   15908:	ldr	r1, [r6, #52]	; 0x34
   1590c:	str	r0, [r6, #24]
   15910:	ldr	r0, [sp, #40]	; 0x28
   15914:	add	r2, r1, #1
   15918:	mov	r1, sl
   1591c:	bl	11224 <memmove@plt>
   15920:	ldr	r0, [r5, #44]	; 0x2c
   15924:	ldr	r2, [r5, #48]	; 0x30
   15928:	ldr	sl, [sp, #28]
   1592c:	mov	r7, #0
   15930:	cmp	r0, #0
   15934:	beq	159dc <__assert_fail@plt+0x44f4>
   15938:	ands	r0, r2, #1024	; 0x400
   1593c:	bne	159dc <__assert_fail@plt+0x44f4>
   15940:	mov	r0, r5
   15944:	mov	r1, r6
   15948:	mov	r2, #0
   1594c:	bl	14278 <__assert_fail@plt+0x2d90>
   15950:	strh	r0, [r6, #56]	; 0x38
   15954:	ldr	r4, [fp, #-36]	; 0xffffffdc
   15958:	cmp	r9, #0
   1595c:	str	r7, [r6, #8]
   15960:	beq	15a5c <__assert_fail@plt+0x4574>
   15964:	ldr	r0, [sp, #48]	; 0x30
   15968:	str	r6, [r0, #8]
   1596c:	movw	r0, #10000	; 0x2710
   15970:	cmp	r4, r0
   15974:	bne	15a6c <__assert_fail@plt+0x4584>
   15978:	ldr	r0, [sp, #20]
   1597c:	ldr	r0, [r0]
   15980:	cmp	r0, #0
   15984:	bne	15a6c <__assert_fail@plt+0x4584>
   15988:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1598c:	mov	r0, sl
   15990:	bl	16260 <__assert_fail@plt+0x4d78>
   15994:	mov	r1, #0
   15998:	str	r1, [sp, #8]
   1599c:	movw	r1, #19778	; 0x4d42
   159a0:	movt	r1, #65363	; 0xff53
   159a4:	cmp	r0, r1
   159a8:	movwne	r1, #26985	; 0x6969
   159ac:	cmpne	r0, r1
   159b0:	beq	15a6c <__assert_fail@plt+0x4584>
   159b4:	movw	r1, #6548	; 0x1994
   159b8:	movt	r1, #258	; 0x102
   159bc:	cmp	r0, r1
   159c0:	movne	r0, #1
   159c4:	strne	r0, [sp, #8]
   159c8:	ldr	r0, [sp, #32]
   159cc:	add	r4, r4, #1
   159d0:	cmp	r0, r4
   159d4:	bhi	15a7c <__assert_fail@plt+0x4594>
   159d8:	b	15a8c <__assert_fail@plt+0x45a4>
   159dc:	ldrb	r3, [r8, #18]
   159e0:	mov	r0, #0
   159e4:	tst	r2, #8
   159e8:	mov	r1, #0
   159ec:	beq	15a10 <__assert_fail@plt+0x4528>
   159f0:	orr	r1, r3, #4
   159f4:	cmp	r1, #4
   159f8:	mov	r1, #0
   159fc:	beq	15a10 <__assert_fail@plt+0x4528>
   15a00:	eor	r1, r3, #10
   15a04:	and	r2, r2, #16
   15a08:	orrs	r1, r2, r1
   15a0c:	movwne	r1, #1
   15a10:	mov	r2, #11
   15a14:	strh	r2, [r6, #56]	; 0x38
   15a18:	sub	r2, r3, #1
   15a1c:	uxtb	r3, r2
   15a20:	cmp	r3, #11
   15a24:	bhi	15a38 <__assert_fail@plt+0x4550>
   15a28:	sxtb	r0, r2
   15a2c:	movw	r2, #49476	; 0xc144
   15a30:	movt	r2, #1
   15a34:	ldr	r0, [r2, r0, lsl #2]
   15a38:	cmp	r1, #0
   15a3c:	str	r0, [r6, #80]	; 0x50
   15a40:	mov	r0, #2
   15a44:	movwne	r0, #1
   15a48:	stm	r4, {r0, r7}
   15a4c:	ldr	r4, [fp, #-36]	; 0xffffffdc
   15a50:	cmp	r9, #0
   15a54:	str	r7, [r6, #8]
   15a58:	bne	15964 <__assert_fail@plt+0x447c>
   15a5c:	mov	r9, r6
   15a60:	movw	r0, #10000	; 0x2710
   15a64:	cmp	r4, r0
   15a68:	beq	15978 <__assert_fail@plt+0x4490>
   15a6c:	ldr	r0, [sp, #32]
   15a70:	add	r4, r4, #1
   15a74:	cmp	r0, r4
   15a78:	bls	15a8c <__assert_fail@plt+0x45a4>
   15a7c:	str	r6, [sp, #48]	; 0x30
   15a80:	ldr	r6, [sl, #12]
   15a84:	cmp	r6, #0
   15a88:	bne	15770 <__assert_fail@plt+0x4288>
   15a8c:	ldr	r0, [sp, #16]
   15a90:	ldr	r7, [sp]
   15a94:	ldr	r6, [sp, #8]
   15a98:	tst	r0, #1
   15a9c:	beq	15bb8 <__assert_fail@plt+0x46d0>
   15aa0:	ldr	r1, [r5, #4]
   15aa4:	ldr	r0, [r5, #24]
   15aa8:	cmp	r1, #0
   15aac:	bne	15ac4 <__assert_fail@plt+0x45dc>
   15ab0:	b	15b00 <__assert_fail@plt+0x4618>
   15ab4:	str	r0, [r1, #28]
   15ab8:	ldr	r1, [r1, #8]
   15abc:	cmp	r1, #0
   15ac0:	beq	15b00 <__assert_fail@plt+0x4618>
   15ac4:	ldr	r2, [r1, #24]
   15ac8:	add	r3, r1, #168	; 0xa8
   15acc:	cmp	r2, r3
   15ad0:	beq	15ab4 <__assert_fail@plt+0x45cc>
   15ad4:	ldr	r3, [r1, #28]
   15ad8:	sub	r2, r2, r3
   15adc:	add	r2, r0, r2
   15ae0:	str	r2, [r1, #24]
   15ae4:	b	15ab4 <__assert_fail@plt+0x45cc>
   15ae8:	mov	r4, #0
   15aec:	mov	r6, #0
   15af0:	ldrb	r0, [r5, #48]	; 0x30
   15af4:	tst	r0, #4
   15af8:	bne	15bc4 <__assert_fail@plt+0x46dc>
   15afc:	b	15bec <__assert_fail@plt+0x4704>
   15b00:	ldr	r1, [r9, #48]	; 0x30
   15b04:	cmp	r1, #0
   15b08:	bmi	15bb8 <__assert_fail@plt+0x46d0>
   15b0c:	mov	r1, r9
   15b10:	ldr	r2, [r1, #24]
   15b14:	add	r3, r1, #168	; 0xa8
   15b18:	cmp	r2, r3
   15b1c:	bne	15b50 <__assert_fail@plt+0x4668>
   15b20:	str	r0, [r1, #28]
   15b24:	ldr	r2, [r1, #8]
   15b28:	cmp	r2, #0
   15b2c:	ldreq	r2, [r1, #4]
   15b30:	ldr	r1, [r2, #48]	; 0x30
   15b34:	cmn	r1, #1
   15b38:	mov	r1, r2
   15b3c:	ble	15bb8 <__assert_fail@plt+0x46d0>
   15b40:	ldr	r2, [r1, #24]
   15b44:	add	r3, r1, #168	; 0xa8
   15b48:	cmp	r2, r3
   15b4c:	beq	15b20 <__assert_fail@plt+0x4638>
   15b50:	ldr	r3, [r1, #28]
   15b54:	sub	r2, r2, r3
   15b58:	add	r2, r0, r2
   15b5c:	str	r2, [r1, #24]
   15b60:	b	15b20 <__assert_fail@plt+0x4638>
   15b64:	ldr	r0, [sp, #36]	; 0x24
   15b68:	ldr	r0, [r0]
   15b6c:	cmp	r0, #0
   15b70:	beq	15b8c <__assert_fail@plt+0x46a4>
   15b74:	str	r0, [sl, #32]
   15b78:	ldr	r0, [sp, #12]
   15b7c:	orrs	r0, r0, r4
   15b80:	mov	r0, #4
   15b84:	movwne	r0, #7
   15b88:	strh	r0, [sl, #56]	; 0x38
   15b8c:	ldr	r0, [sl, #12]
   15b90:	ldr	r6, [sp, #8]
   15b94:	cmp	r0, #0
   15b98:	beq	15ba8 <__assert_fail@plt+0x46c0>
   15b9c:	bl	114d0 <closedir@plt>
   15ba0:	mov	r0, #0
   15ba4:	str	r0, [sl, #12]
   15ba8:	ldr	r0, [sp, #16]
   15bac:	ldr	r7, [sp]
   15bb0:	tst	r0, #1
   15bb4:	bne	15aa0 <__assert_fail@plt+0x45b8>
   15bb8:	ldrb	r0, [r5, #48]	; 0x30
   15bbc:	tst	r0, #4
   15bc0:	beq	15bec <__assert_fail@plt+0x4704>
   15bc4:	ldr	r2, [sp, #40]	; 0x28
   15bc8:	ldr	r0, [r5, #36]	; 0x24
   15bcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15bd0:	cmp	r3, r0
   15bd4:	sub	r1, r2, #1
   15bd8:	mov	r0, #0
   15bdc:	moveq	r2, r1
   15be0:	cmp	r4, #0
   15be4:	moveq	r2, r1
   15be8:	strb	r0, [r2]
   15bec:	ldr	r0, [sp, #12]
   15bf0:	cmp	r0, #0
   15bf4:	movwne	r0, #1
   15bf8:	orrs	r0, r0, r7
   15bfc:	beq	15c64 <__assert_fail@plt+0x477c>
   15c00:	cmp	r4, #0
   15c04:	bne	15ca4 <__assert_fail@plt+0x47bc>
   15c08:	ldr	r0, [sp, #4]
   15c0c:	cmp	r0, #3
   15c10:	bne	15c28 <__assert_fail@plt+0x4740>
   15c14:	ldrh	r0, [sl, #56]	; 0x38
   15c18:	cmp	r0, #4
   15c1c:	cmpne	r0, #7
   15c20:	movne	r0, #6
   15c24:	strhne	r0, [sl, #56]	; 0x38
   15c28:	mov	r6, #0
   15c2c:	cmp	r9, #0
   15c30:	bne	15c4c <__assert_fail@plt+0x4764>
   15c34:	b	15ddc <__assert_fail@plt+0x48f4>
   15c38:	mov	r0, r9
   15c3c:	bl	13af8 <__assert_fail@plt+0x2610>
   15c40:	cmp	r4, #0
   15c44:	mov	r9, r4
   15c48:	beq	15ddc <__assert_fail@plt+0x48f4>
   15c4c:	ldrd	r4, [r9, #8]
   15c50:	cmp	r5, #0
   15c54:	beq	15c38 <__assert_fail@plt+0x4750>
   15c58:	mov	r0, r5
   15c5c:	bl	114d0 <closedir@plt>
   15c60:	b	15c38 <__assert_fail@plt+0x4750>
   15c64:	ldr	r0, [sp, #4]
   15c68:	cmp	r0, #1
   15c6c:	cmpne	r4, #0
   15c70:	bne	15ca4 <__assert_fail@plt+0x47bc>
   15c74:	ldr	r0, [sl, #48]	; 0x30
   15c78:	cmp	r0, #0
   15c7c:	beq	15dac <__assert_fail@plt+0x48c4>
   15c80:	ldr	r1, [sl, #4]
   15c84:	movw	r3, #48487	; 0xbd67
   15c88:	mov	r0, r5
   15c8c:	mvn	r2, #0
   15c90:	movt	r3, #1
   15c94:	bl	15084 <__assert_fail@plt+0x3b9c>
   15c98:	cmp	r0, #0
   15c9c:	bne	15dbc <__assert_fail@plt+0x48d4>
   15ca0:	b	15c00 <__assert_fail@plt+0x4718>
   15ca4:	tst	r6, #1
   15ca8:	beq	15ce0 <__assert_fail@plt+0x47f8>
   15cac:	movw	r0, #25128	; 0x6228
   15cb0:	mov	r1, r9
   15cb4:	mov	r2, r4
   15cb8:	movt	r0, #1
   15cbc:	str	r0, [r5, #44]	; 0x2c
   15cc0:	mov	r0, r5
   15cc4:	bl	14410 <__assert_fail@plt+0x2f28>
   15cc8:	mov	r6, r0
   15ccc:	mov	r0, #0
   15cd0:	str	r0, [r5, #44]	; 0x2c
   15cd4:	mov	r0, r6
   15cd8:	sub	sp, fp, #28
   15cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ce0:	cmp	r4, #2
   15ce4:	bcc	15d18 <__assert_fail@plt+0x4830>
   15ce8:	ldr	r0, [sp, #20]
   15cec:	ldr	r0, [r0]
   15cf0:	cmp	r0, #0
   15cf4:	beq	15d18 <__assert_fail@plt+0x4830>
   15cf8:	mov	r0, r5
   15cfc:	mov	r1, r9
   15d00:	mov	r2, r4
   15d04:	bl	14410 <__assert_fail@plt+0x2f28>
   15d08:	mov	r6, r0
   15d0c:	mov	r0, r6
   15d10:	sub	sp, fp, #28
   15d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d18:	mov	r6, r9
   15d1c:	mov	r0, r6
   15d20:	sub	sp, fp, #28
   15d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d28:	mov	r0, r6
   15d2c:	bl	13af8 <__assert_fail@plt+0x2610>
   15d30:	ldr	r7, [sp, #28]
   15d34:	cmp	r9, #0
   15d38:	bne	15d54 <__assert_fail@plt+0x486c>
   15d3c:	b	15d6c <__assert_fail@plt+0x4884>
   15d40:	mov	r0, r9
   15d44:	bl	13af8 <__assert_fail@plt+0x2610>
   15d48:	cmp	r4, #0
   15d4c:	mov	r9, r4
   15d50:	beq	15d6c <__assert_fail@plt+0x4884>
   15d54:	ldrd	r4, [r9, #8]
   15d58:	cmp	r5, #0
   15d5c:	beq	15d40 <__assert_fail@plt+0x4858>
   15d60:	mov	r0, r5
   15d64:	bl	114d0 <closedir@plt>
   15d68:	b	15d40 <__assert_fail@plt+0x4858>
   15d6c:	ldr	r0, [r7, #12]
   15d70:	bl	114d0 <closedir@plt>
   15d74:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15d78:	mov	r0, #7
   15d7c:	mov	r6, #0
   15d80:	strh	r0, [r7, #56]	; 0x38
   15d84:	str	r6, [r7, #12]
   15d88:	ldr	r0, [r1, #48]	; 0x30
   15d8c:	orr	r0, r0, #8192	; 0x2000
   15d90:	str	r0, [r1, #48]	; 0x30
   15d94:	ldr	r1, [sp, #36]	; 0x24
   15d98:	mov	r0, #36	; 0x24
   15d9c:	str	r0, [r1]
   15da0:	mov	r0, r6
   15da4:	sub	sp, fp, #28
   15da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dac:	mov	r0, r5
   15db0:	bl	15ecc <__assert_fail@plt+0x49e4>
   15db4:	cmp	r0, #0
   15db8:	beq	15c00 <__assert_fail@plt+0x4718>
   15dbc:	mov	r0, #7
   15dc0:	mov	r6, #0
   15dc4:	cmp	r9, #0
   15dc8:	strh	r0, [sl, #56]	; 0x38
   15dcc:	ldr	r0, [r5, #48]	; 0x30
   15dd0:	orr	r0, r0, #8192	; 0x2000
   15dd4:	str	r0, [r5, #48]	; 0x30
   15dd8:	bne	15dfc <__assert_fail@plt+0x4914>
   15ddc:	mov	r0, r6
   15de0:	sub	sp, fp, #28
   15de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15de8:	mov	r0, r9
   15dec:	bl	13af8 <__assert_fail@plt+0x2610>
   15df0:	cmp	r4, #0
   15df4:	mov	r9, r4
   15df8:	beq	15ddc <__assert_fail@plt+0x48f4>
   15dfc:	ldrd	r4, [r9, #8]
   15e00:	cmp	r5, #0
   15e04:	beq	15de8 <__assert_fail@plt+0x4900>
   15e08:	mov	r0, r5
   15e0c:	bl	114d0 <closedir@plt>
   15e10:	b	15de8 <__assert_fail@plt+0x4900>
   15e14:	mov	r0, r4
   15e18:	bl	13af8 <__assert_fail@plt+0x2610>
   15e1c:	ldr	r1, [sp, #36]	; 0x24
   15e20:	mov	r0, #0
   15e24:	str	r0, [r5, #24]
   15e28:	mov	r0, #36	; 0x24
   15e2c:	str	r0, [r1]
   15e30:	b	15e44 <__assert_fail@plt+0x495c>
   15e34:	ldr	r0, [r5, #24]
   15e38:	bl	13af8 <__assert_fail@plt+0x2610>
   15e3c:	mov	r0, #0
   15e40:	str	r0, [r5, #24]
   15e44:	ldr	sl, [sp, #28]
   15e48:	ldr	r0, [sp, #36]	; 0x24
   15e4c:	ldr	r4, [r0]
   15e50:	mov	r0, r6
   15e54:	bl	13af8 <__assert_fail@plt+0x2610>
   15e58:	ldr	r5, [fp, #-44]	; 0xffffffd4
   15e5c:	cmp	r9, #0
   15e60:	bne	15e7c <__assert_fail@plt+0x4994>
   15e64:	b	15e94 <__assert_fail@plt+0x49ac>
   15e68:	mov	r0, r9
   15e6c:	bl	13af8 <__assert_fail@plt+0x2610>
   15e70:	cmp	r6, #0
   15e74:	mov	r9, r6
   15e78:	beq	15e94 <__assert_fail@plt+0x49ac>
   15e7c:	ldrd	r6, [r9, #8]
   15e80:	cmp	r7, #0
   15e84:	beq	15e68 <__assert_fail@plt+0x4980>
   15e88:	mov	r0, r7
   15e8c:	bl	114d0 <closedir@plt>
   15e90:	b	15e68 <__assert_fail@plt+0x4980>
   15e94:	ldr	r0, [sl, #12]
   15e98:	bl	114d0 <closedir@plt>
   15e9c:	mov	r0, #7
   15ea0:	mov	r6, #0
   15ea4:	strh	r0, [sl, #56]	; 0x38
   15ea8:	str	r6, [sl, #12]
   15eac:	ldr	r0, [r5, #48]	; 0x30
   15eb0:	orr	r0, r0, #8192	; 0x2000
   15eb4:	str	r0, [r5, #48]	; 0x30
   15eb8:	ldr	r0, [sp, #36]	; 0x24
   15ebc:	str	r4, [r0]
   15ec0:	mov	r0, r6
   15ec4:	sub	sp, fp, #28
   15ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ecc:	push	{r4, r5, fp, lr}
   15ed0:	add	fp, sp, #8
   15ed4:	mov	r5, r0
   15ed8:	ldr	r0, [r0, #48]	; 0x30
   15edc:	mov	r4, #0
   15ee0:	tst	r0, #4
   15ee4:	bne	15f28 <__assert_fail@plt+0x4a40>
   15ee8:	tst	r0, #512	; 0x200
   15eec:	bne	15f08 <__assert_fail@plt+0x4a20>
   15ef0:	ldr	r0, [r5, #28]
   15ef4:	bl	11458 <fchdir@plt>
   15ef8:	cmp	r0, #0
   15efc:	mov	r4, r0
   15f00:	movwne	r4, #1
   15f04:	b	15f28 <__assert_fail@plt+0x4a40>
   15f08:	ldr	r1, [r5, #32]
   15f0c:	add	r0, r5, #60	; 0x3c
   15f10:	bl	1785c <__assert_fail@plt+0x6374>
   15f14:	cmp	r0, #0
   15f18:	bmi	15f20 <__assert_fail@plt+0x4a38>
   15f1c:	bl	114ac <close@plt>
   15f20:	mvn	r0, #99	; 0x63
   15f24:	str	r0, [r5, #32]
   15f28:	add	r5, r5, #60	; 0x3c
   15f2c:	mov	r0, r5
   15f30:	bl	17854 <__assert_fail@plt+0x636c>
   15f34:	cmp	r0, #0
   15f38:	bne	15f60 <__assert_fail@plt+0x4a78>
   15f3c:	mov	r0, r5
   15f40:	bl	178a8 <__assert_fail@plt+0x63c0>
   15f44:	cmp	r0, #0
   15f48:	bmi	15f2c <__assert_fail@plt+0x4a44>
   15f4c:	bl	114ac <close@plt>
   15f50:	mov	r0, r5
   15f54:	bl	17854 <__assert_fail@plt+0x636c>
   15f58:	cmp	r0, #0
   15f5c:	beq	15f3c <__assert_fail@plt+0x4a54>
   15f60:	mov	r0, r4
   15f64:	pop	{r4, r5, fp, pc}
   15f68:	push	{fp, lr}
   15f6c:	mov	fp, sp
   15f70:	cmp	r2, #5
   15f74:	bcc	15f8c <__assert_fail@plt+0x4aa4>
   15f78:	bl	1138c <__errno_location@plt>
   15f7c:	mov	r1, #22
   15f80:	str	r1, [r0]
   15f84:	mov	r0, #1
   15f88:	pop	{fp, pc}
   15f8c:	mov	r0, #0
   15f90:	strh	r2, [r1, #60]	; 0x3c
   15f94:	pop	{fp, pc}
   15f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f9c:	add	fp, sp, #28
   15fa0:	sub	sp, sp, #4
   15fa4:	mov	r9, r0
   15fa8:	mvn	r0, #4096	; 0x1000
   15fac:	tst	r1, r0
   15fb0:	beq	15fd0 <__assert_fail@plt+0x4ae8>
   15fb4:	bl	1138c <__errno_location@plt>
   15fb8:	mov	r1, #22
   15fbc:	mov	r5, #0
   15fc0:	str	r1, [r0]
   15fc4:	mov	r0, r5
   15fc8:	sub	sp, fp, #28
   15fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fd0:	ldr	r8, [r9]
   15fd4:	mov	r7, r1
   15fd8:	bl	1138c <__errno_location@plt>
   15fdc:	mov	r5, #0
   15fe0:	mov	sl, r0
   15fe4:	str	r5, [r0]
   15fe8:	ldrb	r0, [r9, #49]	; 0x31
   15fec:	tst	r0, #32
   15ff0:	bne	16008 <__assert_fail@plt+0x4b20>
   15ff4:	ldrh	r0, [r8, #56]	; 0x38
   15ff8:	cmp	r0, #1
   15ffc:	beq	16014 <__assert_fail@plt+0x4b2c>
   16000:	cmp	r0, #9
   16004:	ldreq	r5, [r8, #8]
   16008:	mov	r0, r5
   1600c:	sub	sp, fp, #28
   16010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16014:	ldr	r6, [r9, #4]
   16018:	cmp	r6, #0
   1601c:	bne	16038 <__assert_fail@plt+0x4b50>
   16020:	b	16054 <__assert_fail@plt+0x4b6c>
   16024:	mov	r0, r6
   16028:	bl	13af8 <__assert_fail@plt+0x2610>
   1602c:	cmp	r4, #0
   16030:	mov	r6, r4
   16034:	beq	16054 <__assert_fail@plt+0x4b6c>
   16038:	ldr	r1, [r6, #12]
   1603c:	ldr	r4, [r6, #8]
   16040:	cmp	r1, #0
   16044:	beq	16024 <__assert_fail@plt+0x4b3c>
   16048:	mov	r0, r1
   1604c:	bl	114d0 <closedir@plt>
   16050:	b	16024 <__assert_fail@plt+0x4b3c>
   16054:	mov	r4, #1
   16058:	cmp	r7, #4096	; 0x1000
   1605c:	bne	16070 <__assert_fail@plt+0x4b88>
   16060:	ldr	r0, [r9, #48]	; 0x30
   16064:	mov	r4, #2
   16068:	orr	r0, r0, #4096	; 0x1000
   1606c:	str	r0, [r9, #48]	; 0x30
   16070:	ldr	r0, [r8, #48]	; 0x30
   16074:	cmp	r0, #0
   16078:	bne	160d0 <__assert_fail@plt+0x4be8>
   1607c:	ldr	r0, [r8, #24]
   16080:	ldrb	r0, [r0]
   16084:	cmp	r0, #47	; 0x2f
   16088:	beq	160d0 <__assert_fail@plt+0x4be8>
   1608c:	ldr	r0, [r9, #48]	; 0x30
   16090:	tst	r0, #4
   16094:	bne	160d0 <__assert_fail@plt+0x4be8>
   16098:	mov	r1, #32768	; 0x8000
   1609c:	tst	r0, #512	; 0x200
   160a0:	and	r1, r1, r0, lsl #11
   160a4:	orr	r1, r1, #18688	; 0x4900
   160a8:	orr	r2, r1, #524288	; 0x80000
   160ac:	bne	160f0 <__assert_fail@plt+0x4c08>
   160b0:	movw	r0, #48488	; 0xbd68
   160b4:	mov	r1, r2
   160b8:	movt	r0, #1
   160bc:	bl	1ac60 <__assert_fail@plt+0x9778>
   160c0:	mov	r8, r0
   160c4:	cmn	r0, #1
   160c8:	bgt	1610c <__assert_fail@plt+0x4c24>
   160cc:	b	16154 <__assert_fail@plt+0x4c6c>
   160d0:	mov	r0, r9
   160d4:	mov	r1, r4
   160d8:	bl	15334 <__assert_fail@plt+0x3e4c>
   160dc:	mov	r5, r0
   160e0:	str	r0, [r9, #4]
   160e4:	mov	r0, r5
   160e8:	sub	sp, fp, #28
   160ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f0:	ldr	r0, [r9, #32]
   160f4:	movw	r1, #48488	; 0xbd68
   160f8:	movt	r1, #1
   160fc:	bl	178f8 <__assert_fail@plt+0x6410>
   16100:	mov	r8, r0
   16104:	cmn	r0, #1
   16108:	ble	16154 <__assert_fail@plt+0x4c6c>
   1610c:	mov	r0, r9
   16110:	mov	r1, r4
   16114:	bl	15334 <__assert_fail@plt+0x3e4c>
   16118:	str	r0, [r9, #4]
   1611c:	ldrb	r0, [r9, #49]	; 0x31
   16120:	tst	r0, #2
   16124:	bne	16168 <__assert_fail@plt+0x4c80>
   16128:	mov	r0, r8
   1612c:	bl	11458 <fchdir@plt>
   16130:	cmp	r0, #0
   16134:	beq	161a4 <__assert_fail@plt+0x4cbc>
   16138:	ldr	r4, [sl]
   1613c:	mov	r0, r8
   16140:	bl	114ac <close@plt>
   16144:	str	r4, [sl]
   16148:	mov	r0, r5
   1614c:	sub	sp, fp, #28
   16150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16154:	mov	r5, #0
   16158:	str	r5, [r9, #4]
   1615c:	mov	r0, r5
   16160:	sub	sp, fp, #28
   16164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16168:	ldr	r1, [r9, #32]
   1616c:	cmp	r1, r8
   16170:	bne	1617c <__assert_fail@plt+0x4c94>
   16174:	cmn	r1, #100	; 0x64
   16178:	bne	161bc <__assert_fail@plt+0x4cd4>
   1617c:	add	r0, r9, #60	; 0x3c
   16180:	bl	1785c <__assert_fail@plt+0x6374>
   16184:	cmp	r0, #0
   16188:	bmi	16190 <__assert_fail@plt+0x4ca8>
   1618c:	bl	114ac <close@plt>
   16190:	str	r8, [r9, #32]
   16194:	ldr	r5, [r9, #4]
   16198:	mov	r0, r5
   1619c:	sub	sp, fp, #28
   161a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161a4:	mov	r0, r8
   161a8:	bl	114ac <close@plt>
   161ac:	ldr	r5, [r9, #4]
   161b0:	mov	r0, r5
   161b4:	sub	sp, fp, #28
   161b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161bc:	bl	114a0 <abort@plt>
   161c0:	push	{fp, lr}
   161c4:	mov	fp, sp
   161c8:	mov	r2, r1
   161cc:	ldrd	r0, [r0, #8]
   161d0:	mov	r3, #0
   161d4:	bl	1ae8c <__assert_fail@plt+0x99a4>
   161d8:	mov	r0, r2
   161dc:	pop	{fp, pc}
   161e0:	push	{r4, r5, fp, lr}
   161e4:	add	fp, sp, #8
   161e8:	ldrd	r2, [r1, #8]
   161ec:	ldrd	r4, [r0, #8]
   161f0:	eor	r3, r5, r3
   161f4:	eor	r2, r4, r2
   161f8:	orrs	r2, r2, r3
   161fc:	mov	r2, #0
   16200:	bne	16220 <__assert_fail@plt+0x4d38>
   16204:	ldrd	r2, [r1]
   16208:	ldrd	r0, [r0]
   1620c:	eor	r1, r1, r3
   16210:	eor	r0, r0, r2
   16214:	orr	r0, r0, r1
   16218:	clz	r0, r0
   1621c:	lsr	r2, r0, #5
   16220:	mov	r0, r2
   16224:	pop	{r4, r5, fp, pc}
   16228:	push	{r4, r5, fp, lr}
   1622c:	add	fp, sp, #8
   16230:	ldr	r0, [r0]
   16234:	ldrd	r2, [r0, #160]	; 0xa0
   16238:	ldr	r0, [r1]
   1623c:	ldrd	r4, [r0, #160]	; 0xa0
   16240:	mov	r0, #0
   16244:	subs	r1, r4, r2
   16248:	sbcs	r1, r5, r3
   1624c:	movwcc	r0, #1
   16250:	subs	r1, r2, r4
   16254:	sbcs	r1, r3, r5
   16258:	subcc	r0, r0, #1
   1625c:	pop	{r4, r5, fp, pc}
   16260:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16264:	add	fp, sp, #24
   16268:	sub	sp, sp, #96	; 0x60
   1626c:	ldr	r7, [r0, #44]	; 0x2c
   16270:	mov	r4, r0
   16274:	mov	r5, #0
   16278:	ldrb	r0, [r7, #49]	; 0x31
   1627c:	tst	r0, #2
   16280:	beq	16330 <__assert_fail@plt+0x4e48>
   16284:	ldr	r6, [r7, #52]	; 0x34
   16288:	mov	r9, r1
   1628c:	cmp	r6, #0
   16290:	bne	162d0 <__assert_fail@plt+0x4de8>
   16294:	movw	r0, #15096	; 0x3af8
   16298:	movw	r2, #25500	; 0x639c
   1629c:	movw	r3, #25532	; 0x63bc
   162a0:	mov	r1, #0
   162a4:	mov	r8, #0
   162a8:	movt	r0, #1
   162ac:	movt	r2, #1
   162b0:	movt	r3, #1
   162b4:	str	r0, [sp]
   162b8:	mov	r0, #13
   162bc:	bl	168d4 <__assert_fail@plt+0x53ec>
   162c0:	mov	r6, r0
   162c4:	cmp	r0, #0
   162c8:	str	r0, [r7, #52]	; 0x34
   162cc:	beq	16310 <__assert_fail@plt+0x4e28>
   162d0:	ldrd	r0, [r4, #64]	; 0x40
   162d4:	str	r1, [sp, #12]
   162d8:	str	r0, [sp, #8]
   162dc:	add	r1, sp, #8
   162e0:	mov	r0, r6
   162e4:	bl	16600 <__assert_fail@plt+0x5118>
   162e8:	cmp	r0, #0
   162ec:	beq	16300 <__assert_fail@plt+0x4e18>
   162f0:	ldr	r5, [r0, #8]
   162f4:	mov	r0, r5
   162f8:	sub	sp, fp, #24
   162fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16300:	mov	r8, #1
   16304:	cmp	r9, #0
   16308:	bpl	1631c <__assert_fail@plt+0x4e34>
   1630c:	b	16330 <__assert_fail@plt+0x4e48>
   16310:	mov	r6, #0
   16314:	cmp	r9, #0
   16318:	bmi	16330 <__assert_fail@plt+0x4e48>
   1631c:	add	r1, sp, #8
   16320:	mov	r0, r9
   16324:	bl	111c4 <fstatfs64@plt>
   16328:	cmp	r0, #0
   1632c:	beq	1633c <__assert_fail@plt+0x4e54>
   16330:	mov	r0, r5
   16334:	sub	sp, fp, #24
   16338:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1633c:	cmp	r8, #0
   16340:	beq	1638c <__assert_fail@plt+0x4ea4>
   16344:	mov	r0, #16
   16348:	bl	1a7ec <__assert_fail@plt+0x9304>
   1634c:	cmp	r0, #0
   16350:	beq	1638c <__assert_fail@plt+0x4ea4>
   16354:	mov	r5, r0
   16358:	ldrd	r0, [r4, #64]	; 0x40
   1635c:	ldr	r2, [sp, #8]
   16360:	stm	r5, {r0, r1, r2}
   16364:	mov	r0, r6
   16368:	mov	r1, r5
   1636c:	bl	17530 <__assert_fail@plt+0x6048>
   16370:	cmp	r0, #0
   16374:	beq	16384 <__assert_fail@plt+0x4e9c>
   16378:	cmp	r0, r5
   1637c:	beq	1638c <__assert_fail@plt+0x4ea4>
   16380:	bl	114a0 <abort@plt>
   16384:	mov	r0, r5
   16388:	bl	13af8 <__assert_fail@plt+0x2610>
   1638c:	ldr	r5, [sp, #8]
   16390:	mov	r0, r5
   16394:	sub	sp, fp, #24
   16398:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1639c:	push	{fp, lr}
   163a0:	mov	fp, sp
   163a4:	mov	r2, r1
   163a8:	ldrd	r0, [r0]
   163ac:	mov	r3, #0
   163b0:	bl	1ae8c <__assert_fail@plt+0x99a4>
   163b4:	mov	r0, r2
   163b8:	pop	{fp, pc}
   163bc:	ldrd	r2, [r1]
   163c0:	ldrd	r0, [r0]
   163c4:	eor	r1, r1, r3
   163c8:	eor	r0, r0, r2
   163cc:	orr	r0, r0, r1
   163d0:	clz	r0, r0
   163d4:	lsr	r0, r0, #5
   163d8:	bx	lr
   163dc:	andeq	r0, r0, r0
   163e0:	ldr	r0, [r0, #8]
   163e4:	bx	lr
   163e8:	ldr	r0, [r0, #12]
   163ec:	bx	lr
   163f0:	ldr	r0, [r0, #16]
   163f4:	bx	lr
   163f8:	ldm	r0, {r2, ip}
   163fc:	mov	r0, #0
   16400:	cmp	r2, ip
   16404:	bxcs	lr
   16408:	mov	r0, #0
   1640c:	ldr	r1, [r2]
   16410:	cmp	r1, #0
   16414:	bne	16430 <__assert_fail@plt+0x4f48>
   16418:	add	r2, r2, #8
   1641c:	cmp	r2, ip
   16420:	bcs	1645c <__assert_fail@plt+0x4f74>
   16424:	ldr	r1, [r2]
   16428:	cmp	r1, #0
   1642c:	beq	16418 <__assert_fail@plt+0x4f30>
   16430:	mov	r3, #0
   16434:	mov	r1, r2
   16438:	ldr	r1, [r1, #4]
   1643c:	add	r3, r3, #1
   16440:	cmp	r1, #0
   16444:	bne	16438 <__assert_fail@plt+0x4f50>
   16448:	cmp	r3, r0
   1644c:	movhi	r0, r3
   16450:	add	r2, r2, #8
   16454:	cmp	r2, ip
   16458:	bcc	16424 <__assert_fail@plt+0x4f3c>
   1645c:	bx	lr
   16460:	push	{fp, lr}
   16464:	mov	fp, sp
   16468:	ldm	r0, {r3, ip}
   1646c:	mov	lr, #0
   16470:	mov	r1, #0
   16474:	cmp	r3, ip
   16478:	bcs	164cc <__assert_fail@plt+0x4fe4>
   1647c:	mov	r1, #0
   16480:	mov	lr, #0
   16484:	ldr	r2, [r3]
   16488:	cmp	r2, #0
   1648c:	bne	164a8 <__assert_fail@plt+0x4fc0>
   16490:	add	r3, r3, #8
   16494:	cmp	r3, ip
   16498:	bcs	164cc <__assert_fail@plt+0x4fe4>
   1649c:	ldr	r2, [r3]
   164a0:	cmp	r2, #0
   164a4:	beq	16490 <__assert_fail@plt+0x4fa8>
   164a8:	mov	r2, r3
   164ac:	ldr	r2, [r2, #4]
   164b0:	add	r1, r1, #1
   164b4:	cmp	r2, #0
   164b8:	bne	164ac <__assert_fail@plt+0x4fc4>
   164bc:	add	lr, lr, #1
   164c0:	add	r3, r3, #8
   164c4:	cmp	r3, ip
   164c8:	bcc	1649c <__assert_fail@plt+0x4fb4>
   164cc:	ldr	r2, [r0, #12]
   164d0:	cmp	lr, r2
   164d4:	bne	164ec <__assert_fail@plt+0x5004>
   164d8:	ldr	r2, [r0, #16]
   164dc:	mov	r0, #1
   164e0:	cmp	r1, r2
   164e4:	movne	r0, #0
   164e8:	pop	{fp, pc}
   164ec:	mov	r0, #0
   164f0:	pop	{fp, pc}
   164f4:	nop	{0}
   164f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   164fc:	add	fp, sp, #24
   16500:	sub	sp, sp, #8
   16504:	ldr	r6, [r0]
   16508:	ldmib	r0, {r2, r7, r8}
   1650c:	ldr	r3, [r0, #16]
   16510:	mov	r4, r1
   16514:	mov	r5, #0
   16518:	cmp	r6, r2
   1651c:	bcs	16574 <__assert_fail@plt+0x508c>
   16520:	mov	r5, #0
   16524:	ldr	r0, [r6]
   16528:	cmp	r0, #0
   1652c:	bne	16548 <__assert_fail@plt+0x5060>
   16530:	add	r6, r6, #8
   16534:	cmp	r6, r2
   16538:	bcs	16574 <__assert_fail@plt+0x508c>
   1653c:	ldr	r0, [r6]
   16540:	cmp	r0, #0
   16544:	beq	16530 <__assert_fail@plt+0x5048>
   16548:	mov	r0, #0
   1654c:	mov	r1, r6
   16550:	ldr	r1, [r1, #4]
   16554:	add	r0, r0, #1
   16558:	cmp	r1, #0
   1655c:	bne	16550 <__assert_fail@plt+0x5068>
   16560:	cmp	r0, r5
   16564:	movhi	r5, r0
   16568:	add	r6, r6, #8
   1656c:	cmp	r6, r2
   16570:	bcc	1653c <__assert_fail@plt+0x5054>
   16574:	movw	r2, #49524	; 0xc174
   16578:	mov	r0, r4
   1657c:	mov	r1, #1
   16580:	movt	r2, #1
   16584:	bl	113c8 <__fprintf_chk@plt>
   16588:	movw	r2, #49548	; 0xc18c
   1658c:	mov	r0, r4
   16590:	mov	r1, #1
   16594:	mov	r3, r7
   16598:	movt	r2, #1
   1659c:	bl	113c8 <__fprintf_chk@plt>
   165a0:	vmov	s0, r8
   165a4:	vldr	d16, [pc, #76]	; 165f8 <__assert_fail@plt+0x5110>
   165a8:	movw	r2, #49572	; 0xc1a4
   165ac:	mov	r0, r4
   165b0:	mov	r1, #1
   165b4:	mov	r3, r8
   165b8:	movt	r2, #1
   165bc:	vcvt.f64.u32	d17, s0
   165c0:	vmov	s0, r7
   165c4:	vcvt.f64.u32	d18, s0
   165c8:	vmul.f64	d16, d17, d16
   165cc:	vdiv.f64	d16, d16, d18
   165d0:	vstr	d16, [sp]
   165d4:	bl	113c8 <__fprintf_chk@plt>
   165d8:	movw	r2, #49605	; 0xc1c5
   165dc:	mov	r0, r4
   165e0:	mov	r1, #1
   165e4:	mov	r3, r5
   165e8:	movt	r2, #1
   165ec:	sub	sp, fp, #24
   165f0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   165f4:	b	113c8 <__fprintf_chk@plt>
   165f8:	andeq	r0, r0, r0
   165fc:	subsmi	r0, r9, r0
   16600:	push	{r4, r5, r6, r7, fp, lr}
   16604:	add	fp, sp, #16
   16608:	mov	r4, r1
   1660c:	ldr	r1, [r0, #8]
   16610:	ldr	r2, [r0, #24]
   16614:	mov	r5, r0
   16618:	mov	r0, r4
   1661c:	blx	r2
   16620:	ldr	r1, [r5, #8]
   16624:	cmp	r0, r1
   16628:	bcs	16690 <__assert_fail@plt+0x51a8>
   1662c:	ldr	r7, [r5]
   16630:	mov	r6, #0
   16634:	ldr	r1, [r7, r0, lsl #3]!
   16638:	cmp	r1, #0
   1663c:	cmpne	r7, #0
   16640:	bne	16670 <__assert_fail@plt+0x5188>
   16644:	mov	r0, r6
   16648:	pop	{r4, r5, r6, r7, fp, pc}
   1664c:	ldr	r2, [r5, #28]
   16650:	mov	r0, r4
   16654:	blx	r2
   16658:	cmp	r0, #0
   1665c:	bne	16684 <__assert_fail@plt+0x519c>
   16660:	ldr	r7, [r7, #4]
   16664:	cmp	r7, #0
   16668:	beq	16644 <__assert_fail@plt+0x515c>
   1666c:	ldr	r1, [r7]
   16670:	cmp	r1, r4
   16674:	bne	1664c <__assert_fail@plt+0x5164>
   16678:	mov	r6, r4
   1667c:	mov	r0, r6
   16680:	pop	{r4, r5, r6, r7, fp, pc}
   16684:	ldr	r6, [r7]
   16688:	mov	r0, r6
   1668c:	pop	{r4, r5, r6, r7, fp, pc}
   16690:	bl	114a0 <abort@plt>
   16694:	push	{fp, lr}
   16698:	mov	fp, sp
   1669c:	ldr	r1, [r0, #16]
   166a0:	cmp	r1, #0
   166a4:	beq	166c4 <__assert_fail@plt+0x51dc>
   166a8:	ldm	r0, {r1, r2}
   166ac:	cmp	r1, r2
   166b0:	bcs	166cc <__assert_fail@plt+0x51e4>
   166b4:	ldr	r0, [r1], #8
   166b8:	cmp	r0, #0
   166bc:	beq	166ac <__assert_fail@plt+0x51c4>
   166c0:	pop	{fp, pc}
   166c4:	mov	r0, #0
   166c8:	pop	{fp, pc}
   166cc:	bl	114a0 <abort@plt>
   166d0:	push	{r4, r5, fp, lr}
   166d4:	add	fp, sp, #8
   166d8:	mov	r5, r1
   166dc:	ldr	r1, [r0, #8]
   166e0:	ldr	r2, [r0, #24]
   166e4:	mov	r4, r0
   166e8:	mov	r0, r5
   166ec:	blx	r2
   166f0:	ldr	r1, [r4, #8]
   166f4:	cmp	r0, r1
   166f8:	bcs	1675c <__assert_fail@plt+0x5274>
   166fc:	ldr	r1, [r4]
   16700:	add	r2, r1, r0, lsl #3
   16704:	ldr	r3, [r2]
   16708:	ldr	r2, [r2, #4]
   1670c:	cmp	r3, r5
   16710:	beq	16720 <__assert_fail@plt+0x5238>
   16714:	cmp	r2, #0
   16718:	bne	16704 <__assert_fail@plt+0x521c>
   1671c:	b	16730 <__assert_fail@plt+0x5248>
   16720:	cmp	r2, #0
   16724:	beq	16730 <__assert_fail@plt+0x5248>
   16728:	ldr	r0, [r2]
   1672c:	pop	{r4, r5, fp, pc}
   16730:	ldr	r2, [r4, #4]
   16734:	add	r0, r1, r0, lsl #3
   16738:	add	r1, r0, #8
   1673c:	cmp	r1, r2
   16740:	bcs	16754 <__assert_fail@plt+0x526c>
   16744:	ldr	r0, [r1], #8
   16748:	cmp	r0, #0
   1674c:	beq	1673c <__assert_fail@plt+0x5254>
   16750:	pop	{r4, r5, fp, pc}
   16754:	mov	r0, #0
   16758:	pop	{r4, r5, fp, pc}
   1675c:	bl	114a0 <abort@plt>
   16760:	push	{r4, r5, fp, lr}
   16764:	add	fp, sp, #8
   16768:	ldm	r0, {r5, lr}
   1676c:	mov	ip, r0
   16770:	mov	r0, #0
   16774:	cmp	r5, lr
   16778:	popcs	{r4, r5, fp, pc}
   1677c:	mov	r0, #0
   16780:	ldr	r3, [r5]
   16784:	cmp	r3, #0
   16788:	cmpne	r5, #0
   1678c:	beq	16798 <__assert_fail@plt+0x52b0>
   16790:	b	167b4 <__assert_fail@plt+0x52cc>
   16794:	ldr	lr, [ip, #4]
   16798:	add	r5, r5, #8
   1679c:	cmp	r5, lr
   167a0:	bcs	167dc <__assert_fail@plt+0x52f4>
   167a4:	ldr	r3, [r5]
   167a8:	cmp	r3, #0
   167ac:	cmpne	r5, #0
   167b0:	beq	16798 <__assert_fail@plt+0x52b0>
   167b4:	mov	r3, r5
   167b8:	cmp	r0, r2
   167bc:	bcs	167dc <__assert_fail@plt+0x52f4>
   167c0:	ldr	r4, [r3]
   167c4:	str	r4, [r1, r0, lsl #2]
   167c8:	add	r0, r0, #1
   167cc:	ldr	r3, [r3, #4]
   167d0:	cmp	r3, #0
   167d4:	bne	167b8 <__assert_fail@plt+0x52d0>
   167d8:	b	16794 <__assert_fail@plt+0x52ac>
   167dc:	pop	{r4, r5, fp, pc}
   167e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   167e4:	add	fp, sp, #24
   167e8:	mov	r5, r1
   167ec:	ldr	r4, [r0]
   167f0:	ldr	r1, [r0, #4]
   167f4:	mov	r6, #0
   167f8:	cmp	r4, r1
   167fc:	bcs	16878 <__assert_fail@plt+0x5390>
   16800:	mov	r9, r2
   16804:	mov	r8, r0
   16808:	mov	r6, #0
   1680c:	ldr	r0, [r4]
   16810:	cmp	r0, #0
   16814:	cmpne	r4, #0
   16818:	beq	16824 <__assert_fail@plt+0x533c>
   1681c:	b	16840 <__assert_fail@plt+0x5358>
   16820:	ldr	r1, [r8, #4]
   16824:	add	r4, r4, #8
   16828:	cmp	r4, r1
   1682c:	bcs	16878 <__assert_fail@plt+0x5390>
   16830:	ldr	r0, [r4]
   16834:	cmp	r0, #0
   16838:	cmpne	r4, #0
   1683c:	beq	16824 <__assert_fail@plt+0x533c>
   16840:	mov	r1, r9
   16844:	blx	r5
   16848:	cmp	r0, #0
   1684c:	beq	16878 <__assert_fail@plt+0x5390>
   16850:	mov	r7, r4
   16854:	ldr	r7, [r7, #4]
   16858:	add	r6, r6, #1
   1685c:	cmp	r7, #0
   16860:	beq	16820 <__assert_fail@plt+0x5338>
   16864:	ldr	r0, [r7]
   16868:	mov	r1, r9
   1686c:	blx	r5
   16870:	cmp	r0, #0
   16874:	bne	16854 <__assert_fail@plt+0x536c>
   16878:	mov	r0, r6
   1687c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16880:	ldrb	r2, [r0]
   16884:	cmp	r2, #0
   16888:	moveq	r0, #0
   1688c:	bxeq	lr
   16890:	add	r3, r0, #1
   16894:	mov	r0, #0
   16898:	rsb	r0, r0, r0, lsl #5
   1689c:	uxtab	r0, r0, r2
   168a0:	udiv	r2, r0, r1
   168a4:	mls	r0, r2, r1, r0
   168a8:	ldrb	r2, [r3], #1
   168ac:	cmp	r2, #0
   168b0:	bne	16898 <__assert_fail@plt+0x53b0>
   168b4:	bx	lr
   168b8:	movw	r1, #49632	; 0xc1e0
   168bc:	movt	r1, #1
   168c0:	vld1.32	{d16-d17}, [r1]!
   168c4:	ldr	r1, [r1]
   168c8:	vst1.32	{d16-d17}, [r0]!
   168cc:	str	r1, [r0]
   168d0:	bx	lr
   168d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   168d8:	add	fp, sp, #24
   168dc:	movw	r9, #27400	; 0x6b08
   168e0:	cmp	r3, #0
   168e4:	movw	r5, #27380	; 0x6af4
   168e8:	mov	r6, r0
   168ec:	mov	r0, #40	; 0x28
   168f0:	mov	r7, r1
   168f4:	movt	r9, #1
   168f8:	movne	r9, r3
   168fc:	cmp	r2, #0
   16900:	movt	r5, #1
   16904:	movne	r5, r2
   16908:	bl	1a7ec <__assert_fail@plt+0x9304>
   1690c:	mov	r8, #0
   16910:	cmp	r0, #0
   16914:	beq	16adc <__assert_fail@plt+0x55f4>
   16918:	mov	r4, r0
   1691c:	movw	r0, #49632	; 0xc1e0
   16920:	cmp	r7, #0
   16924:	movt	r0, #1
   16928:	moveq	r7, r0
   1692c:	cmp	r7, r0
   16930:	str	r7, [r4, #20]
   16934:	beq	169b0 <__assert_fail@plt+0x54c8>
   16938:	vldr	s2, [pc, #420]	; 16ae4 <__assert_fail@plt+0x55fc>
   1693c:	vldr	s0, [r7, #8]
   16940:	vcmpe.f32	s0, s2
   16944:	vmrs	APSR_nzcv, fpscr
   16948:	ble	16a5c <__assert_fail@plt+0x5574>
   1694c:	vldr	s4, [pc, #404]	; 16ae8 <__assert_fail@plt+0x5600>
   16950:	vcmpe.f32	s0, s4
   16954:	vmrs	APSR_nzcv, fpscr
   16958:	bpl	16a5c <__assert_fail@plt+0x5574>
   1695c:	vldr	s4, [pc, #392]	; 16aec <__assert_fail@plt+0x5604>
   16960:	vldr	s6, [r7, #12]
   16964:	vcmpe.f32	s6, s4
   16968:	vmrs	APSR_nzcv, fpscr
   1696c:	ble	16a5c <__assert_fail@plt+0x5574>
   16970:	vldr	s4, [r7]
   16974:	vcmpe.f32	s4, #0.0
   16978:	vmrs	APSR_nzcv, fpscr
   1697c:	blt	16a5c <__assert_fail@plt+0x5574>
   16980:	vadd.f32	s2, s4, s2
   16984:	vcmpe.f32	s2, s0
   16988:	vmrs	APSR_nzcv, fpscr
   1698c:	bpl	16a5c <__assert_fail@plt+0x5574>
   16990:	vldr	s0, [r7, #4]
   16994:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16998:	vcmpe.f32	s0, s4
   1699c:	vmrs	APSR_nzcv, fpscr
   169a0:	bhi	16a5c <__assert_fail@plt+0x5574>
   169a4:	vcmpe.f32	s2, s0
   169a8:	vmrs	APSR_nzcv, fpscr
   169ac:	bpl	16a5c <__assert_fail@plt+0x5574>
   169b0:	ldrb	r0, [r7, #16]
   169b4:	cmp	r0, #0
   169b8:	bne	169e4 <__assert_fail@plt+0x54fc>
   169bc:	vmov	s2, r6
   169c0:	vldr	s0, [r7, #8]
   169c4:	vldr	s4, [pc, #292]	; 16af0 <__assert_fail@plt+0x5608>
   169c8:	vcvt.f32.u32	s2, s2
   169cc:	vdiv.f32	s2, s2, s0
   169d0:	vcvt.u32.f32	s0, s2
   169d4:	vcmpe.f32	s2, s4
   169d8:	vmrs	APSR_nzcv, fpscr
   169dc:	bge	16a78 <__assert_fail@plt+0x5590>
   169e0:	vmov	r6, s0
   169e4:	cmp	r6, #10
   169e8:	movls	r6, #10
   169ec:	orr	r0, r6, #1
   169f0:	cmn	r0, #1
   169f4:	beq	16a78 <__assert_fail@plt+0x5590>
   169f8:	ldr	r6, [fp, #8]
   169fc:	mov	r1, #3
   16a00:	cmp	r0, #10
   16a04:	bcc	16a3c <__assert_fail@plt+0x5554>
   16a08:	mov	r1, #3
   16a0c:	mov	r3, #9
   16a10:	mov	r2, #12
   16a14:	udiv	r7, r0, r1
   16a18:	mls	r7, r7, r1, r0
   16a1c:	cmp	r7, #0
   16a20:	beq	16a3c <__assert_fail@plt+0x5554>
   16a24:	add	r3, r3, r2
   16a28:	add	r2, r2, #8
   16a2c:	add	r1, r1, #2
   16a30:	add	r3, r3, #4
   16a34:	cmp	r3, r0
   16a38:	bcc	16a14 <__assert_fail@plt+0x552c>
   16a3c:	udiv	r2, r0, r1
   16a40:	mls	r1, r2, r1, r0
   16a44:	cmp	r1, #0
   16a48:	bne	16a70 <__assert_fail@plt+0x5588>
   16a4c:	add	r0, r0, #2
   16a50:	cmn	r0, #1
   16a54:	bne	169fc <__assert_fail@plt+0x5514>
   16a58:	b	16a78 <__assert_fail@plt+0x5590>
   16a5c:	str	r0, [r4, #20]
   16a60:	mov	r0, r4
   16a64:	bl	13af8 <__assert_fail@plt+0x2610>
   16a68:	mov	r0, r8
   16a6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a70:	cmp	r0, #536870912	; 0x20000000
   16a74:	bcc	16a90 <__assert_fail@plt+0x55a8>
   16a78:	mov	r0, #0
   16a7c:	str	r0, [r4, #8]
   16a80:	mov	r0, r4
   16a84:	bl	13af8 <__assert_fail@plt+0x2610>
   16a88:	mov	r0, r8
   16a8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a90:	cmp	r0, #0
   16a94:	str	r0, [r4, #8]
   16a98:	beq	16a80 <__assert_fail@plt+0x5598>
   16a9c:	mov	r1, #8
   16aa0:	bl	1a798 <__assert_fail@plt+0x92b0>
   16aa4:	cmp	r0, #0
   16aa8:	str	r0, [r4]
   16aac:	beq	16a80 <__assert_fail@plt+0x5598>
   16ab0:	mov	r1, #0
   16ab4:	str	r5, [r4, #24]
   16ab8:	str	r9, [r4, #28]
   16abc:	str	r6, [r4, #32]
   16ac0:	mov	r8, r4
   16ac4:	str	r1, [r4, #36]	; 0x24
   16ac8:	str	r1, [r4, #12]
   16acc:	str	r1, [r4, #16]
   16ad0:	ldr	r1, [r4, #8]
   16ad4:	add	r0, r0, r1, lsl #3
   16ad8:	str	r0, [r4, #4]
   16adc:	mov	r0, r8
   16ae0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ae4:	stclcc	12, cr12, [ip, #820]	; 0x334
   16ae8:	svccc	0x00666666
   16aec:	svccc	0x008ccccd
   16af0:	svcmi	0x00800000
   16af4:	ror	r2, r0, #3
   16af8:	udiv	r2, r2, r1
   16afc:	mul	r1, r2, r1
   16b00:	rsb	r0, r1, r0, ror #3
   16b04:	bx	lr
   16b08:	sub	r0, r0, r1
   16b0c:	clz	r0, r0
   16b10:	lsr	r0, r0, #5
   16b14:	bx	lr
   16b18:	push	{r4, r5, r6, r7, fp, lr}
   16b1c:	add	fp, sp, #16
   16b20:	mov	r4, r0
   16b24:	ldr	r5, [r0]
   16b28:	ldr	r0, [r0, #4]
   16b2c:	cmp	r5, r0
   16b30:	bcs	16be0 <__assert_fail@plt+0x56f8>
   16b34:	mov	r6, #0
   16b38:	ldr	r1, [r5]
   16b3c:	cmp	r1, #0
   16b40:	bne	16b6c <__assert_fail@plt+0x5684>
   16b44:	b	16b54 <__assert_fail@plt+0x566c>
   16b48:	str	r6, [r5]
   16b4c:	str	r6, [r5, #4]
   16b50:	ldr	r0, [r4, #4]
   16b54:	add	r5, r5, #8
   16b58:	cmp	r5, r0
   16b5c:	bcs	16be0 <__assert_fail@plt+0x56f8>
   16b60:	ldr	r1, [r5]
   16b64:	cmp	r1, #0
   16b68:	beq	16b54 <__assert_fail@plt+0x566c>
   16b6c:	ldr	r1, [r4, #32]
   16b70:	ldr	r7, [r5, #4]
   16b74:	cmp	r1, #0
   16b78:	mov	r0, r1
   16b7c:	movwne	r0, #1
   16b80:	cmp	r7, #0
   16b84:	bne	16bc8 <__assert_fail@plt+0x56e0>
   16b88:	cmp	r0, #0
   16b8c:	beq	16b48 <__assert_fail@plt+0x5660>
   16b90:	ldr	r0, [r5]
   16b94:	blx	r1
   16b98:	b	16b48 <__assert_fail@plt+0x5660>
   16b9c:	str	r6, [r7]
   16ba0:	cmp	r1, #0
   16ba4:	ldr	r2, [r7, #4]
   16ba8:	ldr	r0, [r4, #36]	; 0x24
   16bac:	str	r0, [r7, #4]
   16bb0:	mov	r0, r1
   16bb4:	str	r7, [r4, #36]	; 0x24
   16bb8:	movwne	r0, #1
   16bbc:	cmp	r2, #0
   16bc0:	mov	r7, r2
   16bc4:	beq	16b88 <__assert_fail@plt+0x56a0>
   16bc8:	tst	r0, #1
   16bcc:	beq	16b9c <__assert_fail@plt+0x56b4>
   16bd0:	ldr	r0, [r7]
   16bd4:	blx	r1
   16bd8:	ldr	r1, [r4, #32]
   16bdc:	b	16b9c <__assert_fail@plt+0x56b4>
   16be0:	mov	r0, #0
   16be4:	str	r0, [r4, #12]
   16be8:	str	r0, [r4, #16]
   16bec:	pop	{r4, r5, r6, r7, fp, pc}
   16bf0:	push	{r4, r5, r6, sl, fp, lr}
   16bf4:	add	fp, sp, #16
   16bf8:	mov	r4, r0
   16bfc:	ldr	r0, [r0, #32]
   16c00:	cmp	r0, #0
   16c04:	beq	16c78 <__assert_fail@plt+0x5790>
   16c08:	ldr	r0, [r4, #16]
   16c0c:	cmp	r0, #0
   16c10:	beq	16c78 <__assert_fail@plt+0x5790>
   16c14:	ldr	r5, [r4]
   16c18:	ldr	r1, [r4, #4]
   16c1c:	cmp	r5, r1
   16c20:	bcc	16c38 <__assert_fail@plt+0x5750>
   16c24:	b	16c78 <__assert_fail@plt+0x5790>
   16c28:	ldr	r1, [r4, #4]
   16c2c:	add	r5, r5, #8
   16c30:	cmp	r5, r1
   16c34:	bcs	16c78 <__assert_fail@plt+0x5790>
   16c38:	ldr	r0, [r5]
   16c3c:	cmp	r0, #0
   16c40:	cmpne	r5, #0
   16c44:	beq	16c2c <__assert_fail@plt+0x5744>
   16c48:	ldr	r1, [r4, #32]
   16c4c:	blx	r1
   16c50:	ldr	r6, [r5, #4]
   16c54:	cmp	r6, #0
   16c58:	beq	16c28 <__assert_fail@plt+0x5740>
   16c5c:	ldr	r1, [r4, #32]
   16c60:	ldr	r0, [r6]
   16c64:	blx	r1
   16c68:	ldr	r6, [r6, #4]
   16c6c:	cmp	r6, #0
   16c70:	bne	16c5c <__assert_fail@plt+0x5774>
   16c74:	b	16c28 <__assert_fail@plt+0x5740>
   16c78:	ldr	r5, [r4]
   16c7c:	ldr	r1, [r4, #4]
   16c80:	cmp	r5, r1
   16c84:	bcc	16c98 <__assert_fail@plt+0x57b0>
   16c88:	b	16cc0 <__assert_fail@plt+0x57d8>
   16c8c:	add	r5, r5, #8
   16c90:	cmp	r5, r1
   16c94:	bcs	16cc0 <__assert_fail@plt+0x57d8>
   16c98:	ldr	r0, [r5, #4]
   16c9c:	cmp	r0, #0
   16ca0:	beq	16c8c <__assert_fail@plt+0x57a4>
   16ca4:	ldr	r6, [r0, #4]
   16ca8:	bl	13af8 <__assert_fail@plt+0x2610>
   16cac:	cmp	r6, #0
   16cb0:	mov	r0, r6
   16cb4:	bne	16ca4 <__assert_fail@plt+0x57bc>
   16cb8:	ldr	r1, [r4, #4]
   16cbc:	b	16c8c <__assert_fail@plt+0x57a4>
   16cc0:	ldr	r0, [r4, #36]	; 0x24
   16cc4:	cmp	r0, #0
   16cc8:	beq	16ce0 <__assert_fail@plt+0x57f8>
   16ccc:	ldr	r5, [r0, #4]
   16cd0:	bl	13af8 <__assert_fail@plt+0x2610>
   16cd4:	cmp	r5, #0
   16cd8:	mov	r0, r5
   16cdc:	bne	16ccc <__assert_fail@plt+0x57e4>
   16ce0:	ldr	r0, [r4]
   16ce4:	bl	13af8 <__assert_fail@plt+0x2610>
   16ce8:	mov	r0, r4
   16cec:	pop	{r4, r5, r6, sl, fp, lr}
   16cf0:	b	13af8 <__assert_fail@plt+0x2610>
   16cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cf8:	add	fp, sp, #28
   16cfc:	sub	sp, sp, #44	; 0x2c
   16d00:	mov	r7, r0
   16d04:	mov	r4, r0
   16d08:	ldr	r0, [r7, #20]!
   16d0c:	ldrb	r2, [r0, #16]
   16d10:	cmp	r2, #0
   16d14:	bne	16d44 <__assert_fail@plt+0x585c>
   16d18:	vmov	s2, r1
   16d1c:	vldr	s0, [r0, #8]
   16d20:	vldr	s4, [pc, #592]	; 16f78 <__assert_fail@plt+0x5a90>
   16d24:	mov	r5, #0
   16d28:	vcvt.f32.u32	s2, s2
   16d2c:	vdiv.f32	s2, s2, s0
   16d30:	vcvt.u32.f32	s0, s2
   16d34:	vcmpe.f32	s2, s4
   16d38:	vmrs	APSR_nzcv, fpscr
   16d3c:	bge	16e68 <__assert_fail@plt+0x5980>
   16d40:	vmov	r1, s0
   16d44:	cmp	r1, #10
   16d48:	mov	r5, #0
   16d4c:	movls	r1, #10
   16d50:	orr	r6, r1, #1
   16d54:	cmn	r6, #1
   16d58:	beq	16e68 <__assert_fail@plt+0x5980>
   16d5c:	mov	r0, #3
   16d60:	cmp	r6, #10
   16d64:	bcc	16d9c <__assert_fail@plt+0x58b4>
   16d68:	mov	r0, #3
   16d6c:	mov	r2, #9
   16d70:	mov	r1, #12
   16d74:	udiv	r3, r6, r0
   16d78:	mls	r3, r3, r0, r6
   16d7c:	cmp	r3, #0
   16d80:	beq	16d9c <__assert_fail@plt+0x58b4>
   16d84:	add	r2, r2, r1
   16d88:	add	r1, r1, #8
   16d8c:	add	r0, r0, #2
   16d90:	add	r2, r2, #4
   16d94:	cmp	r2, r6
   16d98:	bcc	16d74 <__assert_fail@plt+0x588c>
   16d9c:	udiv	r1, r6, r0
   16da0:	mls	r0, r1, r0, r6
   16da4:	cmp	r0, #0
   16da8:	bne	16dbc <__assert_fail@plt+0x58d4>
   16dac:	add	r6, r6, #2
   16db0:	cmn	r6, #1
   16db4:	bne	16d5c <__assert_fail@plt+0x5874>
   16db8:	b	16e68 <__assert_fail@plt+0x5980>
   16dbc:	sub	r0, r6, #1
   16dc0:	cmn	r0, #-536870910	; 0xe0000002
   16dc4:	bhi	16e68 <__assert_fail@plt+0x5980>
   16dc8:	ldr	r0, [r4, #8]
   16dcc:	cmp	r6, r0
   16dd0:	bne	16de4 <__assert_fail@plt+0x58fc>
   16dd4:	mov	r5, #1
   16dd8:	mov	r0, r5
   16ddc:	sub	sp, fp, #28
   16de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16de4:	mov	r0, r6
   16de8:	mov	r1, #8
   16dec:	bl	1a798 <__assert_fail@plt+0x92b0>
   16df0:	cmp	r0, #0
   16df4:	str	r0, [sp, #4]
   16df8:	beq	16e68 <__assert_fail@plt+0x5980>
   16dfc:	add	r0, r0, r6, lsl #3
   16e00:	mov	r1, #0
   16e04:	add	r5, sp, #4
   16e08:	mov	sl, r4
   16e0c:	mov	r2, #0
   16e10:	str	r1, [sp, #20]
   16e14:	str	r1, [sp, #16]
   16e18:	str	r6, [sp, #12]
   16e1c:	mov	r1, r4
   16e20:	str	r0, [sp, #8]
   16e24:	add	r0, r5, #20
   16e28:	vld1.32	{d16-d17}, [r7]
   16e2c:	vst1.32	{d16-d17}, [r0]
   16e30:	ldr	r0, [sl, #36]!	; 0x24
   16e34:	str	r0, [sp, #40]	; 0x28
   16e38:	mov	r0, r5
   16e3c:	bl	16f7c <__assert_fail@plt+0x5a94>
   16e40:	cmp	r0, #0
   16e44:	beq	16e74 <__assert_fail@plt+0x598c>
   16e48:	ldr	r0, [r4]
   16e4c:	bl	13af8 <__assert_fail@plt+0x2610>
   16e50:	mov	r0, #36	; 0x24
   16e54:	vld1.32	{d16-d17}, [r5], r0
   16e58:	vst1.32	{d16-d17}, [r4], r0
   16e5c:	ldr	r0, [r5]
   16e60:	mov	r5, #1
   16e64:	str	r0, [r4]
   16e68:	mov	r0, r5
   16e6c:	sub	sp, fp, #28
   16e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e74:	ldr	r0, [sp, #40]	; 0x28
   16e78:	str	r0, [sl]
   16e7c:	ldr	r0, [sp, #8]
   16e80:	ldr	r8, [sp, #4]
   16e84:	cmp	r8, r0
   16e88:	str	r0, [sp]
   16e8c:	bcs	16f44 <__assert_fail@plt+0x5a5c>
   16e90:	mov	r9, #0
   16e94:	ldr	r0, [r8]
   16e98:	cmp	r0, #0
   16e9c:	bne	16ec4 <__assert_fail@plt+0x59dc>
   16ea0:	b	16ea8 <__assert_fail@plt+0x59c0>
   16ea4:	str	r9, [r8, #4]
   16ea8:	ldr	r0, [sp]
   16eac:	add	r8, r8, #8
   16eb0:	cmp	r8, r0
   16eb4:	bcs	16f44 <__assert_fail@plt+0x5a5c>
   16eb8:	ldr	r0, [r8]
   16ebc:	cmp	r0, #0
   16ec0:	beq	16ea8 <__assert_fail@plt+0x59c0>
   16ec4:	ldr	r6, [r8, #4]
   16ec8:	cmp	r6, #0
   16ecc:	beq	16ea4 <__assert_fail@plt+0x59bc>
   16ed0:	ldr	r1, [r4, #8]
   16ed4:	b	16ef8 <__assert_fail@plt+0x5a10>
   16ed8:	add	r0, r3, r0, lsl #3
   16edc:	add	r0, r0, #4
   16ee0:	ldr	r3, [r0]
   16ee4:	cmp	r2, #0
   16ee8:	str	r3, [r6, #4]
   16eec:	str	r6, [r0]
   16ef0:	mov	r6, r2
   16ef4:	beq	16ea4 <__assert_fail@plt+0x59bc>
   16ef8:	ldr	r5, [r6]
   16efc:	ldr	r2, [r4, #24]
   16f00:	mov	r0, r5
   16f04:	blx	r2
   16f08:	ldr	r1, [r4, #8]
   16f0c:	cmp	r0, r1
   16f10:	bcs	16f74 <__assert_fail@plt+0x5a8c>
   16f14:	ldr	r3, [r4]
   16f18:	ldr	r2, [r6, #4]
   16f1c:	ldr	r7, [r3, r0, lsl #3]
   16f20:	cmp	r7, #0
   16f24:	bne	16ed8 <__assert_fail@plt+0x59f0>
   16f28:	str	r5, [r3, r0, lsl #3]
   16f2c:	ldr	r0, [r4, #12]
   16f30:	add	r0, r0, #1
   16f34:	str	r0, [r4, #12]
   16f38:	mov	r0, sl
   16f3c:	str	r9, [r6]
   16f40:	b	16ee0 <__assert_fail@plt+0x59f8>
   16f44:	add	r1, sp, #4
   16f48:	mov	r0, r4
   16f4c:	mov	r2, #0
   16f50:	mov	r5, #0
   16f54:	bl	16f7c <__assert_fail@plt+0x5a94>
   16f58:	cmp	r0, #0
   16f5c:	beq	16f74 <__assert_fail@plt+0x5a8c>
   16f60:	ldr	r0, [sp, #4]
   16f64:	bl	13af8 <__assert_fail@plt+0x2610>
   16f68:	mov	r0, r5
   16f6c:	sub	sp, fp, #28
   16f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f74:	bl	114a0 <abort@plt>
   16f78:	svcmi	0x00800000
   16f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f80:	add	fp, sp, #28
   16f84:	sub	sp, sp, #4
   16f88:	ldr	r8, [r1]
   16f8c:	ldr	r3, [r1, #4]
   16f90:	mov	r6, r0
   16f94:	mov	r0, #1
   16f98:	str	r1, [sp]
   16f9c:	cmp	r8, r3
   16fa0:	bcs	171b4 <__assert_fail@plt+0x5ccc>
   16fa4:	add	sl, r6, #36	; 0x24
   16fa8:	cmp	r2, #0
   16fac:	beq	17068 <__assert_fail@plt+0x5b80>
   16fb0:	mov	r9, #0
   16fb4:	ldr	r1, [r8]
   16fb8:	cmp	r1, #0
   16fbc:	bne	16fe8 <__assert_fail@plt+0x5b00>
   16fc0:	b	16fd0 <__assert_fail@plt+0x5ae8>
   16fc4:	ldr	r0, [sp]
   16fc8:	ldr	r3, [r0, #4]
   16fcc:	str	r9, [r8, #4]
   16fd0:	add	r8, r8, #8
   16fd4:	cmp	r8, r3
   16fd8:	bcs	171b0 <__assert_fail@plt+0x5cc8>
   16fdc:	ldr	r1, [r8]
   16fe0:	cmp	r1, #0
   16fe4:	beq	16fd0 <__assert_fail@plt+0x5ae8>
   16fe8:	ldr	r7, [r8, #4]
   16fec:	cmp	r7, #0
   16ff0:	beq	16fcc <__assert_fail@plt+0x5ae4>
   16ff4:	ldr	r1, [r6, #8]
   16ff8:	b	1702c <__assert_fail@plt+0x5b44>
   16ffc:	str	r4, [r3, r0, lsl #3]
   17000:	ldr	r0, [r6, #12]
   17004:	add	r0, r0, #1
   17008:	str	r0, [r6, #12]
   1700c:	mov	r0, sl
   17010:	str	r9, [r7]
   17014:	ldr	r3, [r0]
   17018:	cmp	r2, #0
   1701c:	str	r3, [r7, #4]
   17020:	str	r7, [r0]
   17024:	mov	r7, r2
   17028:	beq	16fc4 <__assert_fail@plt+0x5adc>
   1702c:	ldr	r4, [r7]
   17030:	ldr	r2, [r6, #24]
   17034:	mov	r0, r4
   17038:	blx	r2
   1703c:	ldr	r1, [r6, #8]
   17040:	cmp	r0, r1
   17044:	bcs	171c8 <__assert_fail@plt+0x5ce0>
   17048:	ldr	r3, [r6]
   1704c:	ldr	r2, [r7, #4]
   17050:	ldr	r5, [r3, r0, lsl #3]
   17054:	cmp	r5, #0
   17058:	beq	16ffc <__assert_fail@plt+0x5b14>
   1705c:	add	r0, r3, r0, lsl #3
   17060:	add	r0, r0, #4
   17064:	b	17014 <__assert_fail@plt+0x5b2c>
   17068:	mov	r5, #0
   1706c:	ldr	r7, [r8]
   17070:	cmp	r7, #0
   17074:	bne	170bc <__assert_fail@plt+0x5bd4>
   17078:	b	170a4 <__assert_fail@plt+0x5bbc>
   1707c:	str	r7, [r9, r4, lsl #3]
   17080:	ldr	r0, [r6, #12]
   17084:	add	r0, r0, #1
   17088:	str	r0, [r6, #12]
   1708c:	ldr	r0, [sp]
   17090:	str	r5, [r8]
   17094:	ldr	r1, [r0, #12]
   17098:	ldr	r3, [r0, #4]
   1709c:	sub	r1, r1, #1
   170a0:	str	r1, [r0, #12]
   170a4:	add	r8, r8, #8
   170a8:	cmp	r8, r3
   170ac:	bcs	171b0 <__assert_fail@plt+0x5cc8>
   170b0:	ldr	r7, [r8]
   170b4:	cmp	r7, #0
   170b8:	beq	170a4 <__assert_fail@plt+0x5bbc>
   170bc:	ldr	r9, [r8, #4]
   170c0:	ldr	r1, [r6, #8]
   170c4:	cmp	r9, #0
   170c8:	bne	170f0 <__assert_fail@plt+0x5c08>
   170cc:	b	17140 <__assert_fail@plt+0x5c58>
   170d0:	add	r0, r3, r0, lsl #3
   170d4:	add	r0, r0, #4
   170d8:	ldr	r3, [r0]
   170dc:	cmp	r2, #0
   170e0:	str	r3, [r9, #4]
   170e4:	str	r9, [r0]
   170e8:	mov	r9, r2
   170ec:	beq	1713c <__assert_fail@plt+0x5c54>
   170f0:	ldr	r4, [r9]
   170f4:	ldr	r2, [r6, #24]
   170f8:	mov	r0, r4
   170fc:	blx	r2
   17100:	ldr	r1, [r6, #8]
   17104:	cmp	r0, r1
   17108:	bcs	171c8 <__assert_fail@plt+0x5ce0>
   1710c:	ldr	r3, [r6]
   17110:	ldr	r2, [r9, #4]
   17114:	ldr	r7, [r3, r0, lsl #3]
   17118:	cmp	r7, #0
   1711c:	bne	170d0 <__assert_fail@plt+0x5be8>
   17120:	str	r4, [r3, r0, lsl #3]
   17124:	ldr	r0, [r6, #12]
   17128:	add	r0, r0, #1
   1712c:	str	r0, [r6, #12]
   17130:	mov	r0, sl
   17134:	str	r5, [r9]
   17138:	b	170d8 <__assert_fail@plt+0x5bf0>
   1713c:	ldr	r7, [r8]
   17140:	str	r5, [r8, #4]
   17144:	mov	r0, r7
   17148:	ldr	r2, [r6, #24]
   1714c:	blx	r2
   17150:	mov	r4, r0
   17154:	ldr	r0, [r6, #8]
   17158:	cmp	r4, r0
   1715c:	bcs	171c8 <__assert_fail@plt+0x5ce0>
   17160:	ldr	r9, [r6]
   17164:	ldr	r0, [r9, r4, lsl #3]
   17168:	cmp	r0, #0
   1716c:	beq	1707c <__assert_fail@plt+0x5b94>
   17170:	ldr	r0, [sl]
   17174:	cmp	r0, #0
   17178:	beq	17188 <__assert_fail@plt+0x5ca0>
   1717c:	ldr	r1, [r0, #4]
   17180:	str	r1, [sl]
   17184:	b	17198 <__assert_fail@plt+0x5cb0>
   17188:	mov	r0, #8
   1718c:	bl	1a7ec <__assert_fail@plt+0x9304>
   17190:	cmp	r0, #0
   17194:	beq	171bc <__assert_fail@plt+0x5cd4>
   17198:	add	r1, r9, r4, lsl #3
   1719c:	str	r7, [r0]
   171a0:	ldr	r2, [r1, #4]
   171a4:	str	r2, [r0, #4]
   171a8:	str	r0, [r1, #4]
   171ac:	b	1708c <__assert_fail@plt+0x5ba4>
   171b0:	mov	r0, #1
   171b4:	sub	sp, fp, #28
   171b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171bc:	mov	r0, #0
   171c0:	sub	sp, fp, #28
   171c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c8:	bl	114a0 <abort@plt>
   171cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171d0:	add	fp, sp, #28
   171d4:	sub	sp, sp, #4
   171d8:	cmp	r1, #0
   171dc:	beq	17518 <__assert_fail@plt+0x6030>
   171e0:	mov	r8, r2
   171e4:	mov	sl, r1
   171e8:	ldr	r1, [r0, #8]
   171ec:	ldr	r2, [r0, #24]
   171f0:	mov	r4, r0
   171f4:	mov	r0, sl
   171f8:	blx	r2
   171fc:	mov	r7, r0
   17200:	ldr	r0, [r4, #8]
   17204:	cmp	r7, r0
   17208:	bcs	17518 <__assert_fail@plt+0x6030>
   1720c:	ldr	r5, [r4]
   17210:	mov	r9, r5
   17214:	ldr	r1, [r9, r7, lsl #3]!
   17218:	cmp	r1, #0
   1721c:	beq	172b0 <__assert_fail@plt+0x5dc8>
   17220:	cmp	r1, sl
   17224:	beq	17250 <__assert_fail@plt+0x5d68>
   17228:	ldr	r2, [r4, #28]
   1722c:	mov	r0, sl
   17230:	blx	r2
   17234:	cmp	r0, #0
   17238:	mov	r6, r9
   1723c:	beq	1726c <__assert_fail@plt+0x5d84>
   17240:	ldr	r0, [r6]
   17244:	cmp	r0, #0
   17248:	bne	17254 <__assert_fail@plt+0x5d6c>
   1724c:	b	172b0 <__assert_fail@plt+0x5dc8>
   17250:	mov	r0, sl
   17254:	cmp	r8, #0
   17258:	mov	r7, #0
   1725c:	strne	r0, [r8]
   17260:	mov	r0, r7
   17264:	sub	sp, fp, #28
   17268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1726c:	add	r6, r5, r7, lsl #3
   17270:	ldr	r0, [r6, #4]!
   17274:	cmp	r0, #0
   17278:	beq	172b0 <__assert_fail@plt+0x5dc8>
   1727c:	ldr	r1, [r0]
   17280:	cmp	r1, sl
   17284:	beq	172a4 <__assert_fail@plt+0x5dbc>
   17288:	ldr	r2, [r4, #28]
   1728c:	mov	r0, sl
   17290:	blx	r2
   17294:	ldr	r6, [r6]
   17298:	cmp	r0, #0
   1729c:	beq	17270 <__assert_fail@plt+0x5d88>
   172a0:	b	17240 <__assert_fail@plt+0x5d58>
   172a4:	mov	r0, sl
   172a8:	cmp	r0, #0
   172ac:	bne	17254 <__assert_fail@plt+0x5d6c>
   172b0:	vldr	s0, [r4, #8]
   172b4:	vldr	s2, [r4, #12]
   172b8:	ldr	r0, [r4, #20]
   172bc:	vcvt.f32.u32	s0, s0
   172c0:	vcvt.f32.u32	s4, s2
   172c4:	vldr	s2, [r0, #8]
   172c8:	vmul.f32	s6, s2, s0
   172cc:	vcmpe.f32	s6, s4
   172d0:	vmrs	APSR_nzcv, fpscr
   172d4:	bpl	17438 <__assert_fail@plt+0x5f50>
   172d8:	movw	r1, #49632	; 0xc1e0
   172dc:	movt	r1, #1
   172e0:	cmp	r0, r1
   172e4:	beq	17380 <__assert_fail@plt+0x5e98>
   172e8:	vldr	s6, [pc, #556]	; 1751c <__assert_fail@plt+0x6034>
   172ec:	vcmpe.f32	s2, s6
   172f0:	vmrs	APSR_nzcv, fpscr
   172f4:	ble	1735c <__assert_fail@plt+0x5e74>
   172f8:	vldr	s8, [pc, #544]	; 17520 <__assert_fail@plt+0x6038>
   172fc:	vcmpe.f32	s2, s8
   17300:	vmrs	APSR_nzcv, fpscr
   17304:	bpl	1735c <__assert_fail@plt+0x5e74>
   17308:	vldr	s8, [pc, #532]	; 17524 <__assert_fail@plt+0x603c>
   1730c:	vldr	s10, [r0, #12]
   17310:	vcmpe.f32	s10, s8
   17314:	vmrs	APSR_nzcv, fpscr
   17318:	ble	1735c <__assert_fail@plt+0x5e74>
   1731c:	vldr	s8, [r0]
   17320:	vcmpe.f32	s8, #0.0
   17324:	vmrs	APSR_nzcv, fpscr
   17328:	blt	1735c <__assert_fail@plt+0x5e74>
   1732c:	vadd.f32	s6, s8, s6
   17330:	vcmpe.f32	s6, s2
   17334:	vmrs	APSR_nzcv, fpscr
   17338:	bpl	1735c <__assert_fail@plt+0x5e74>
   1733c:	vldr	s8, [r0, #4]
   17340:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17344:	vcmpe.f32	s8, s10
   17348:	vmrs	APSR_nzcv, fpscr
   1734c:	bhi	1735c <__assert_fail@plt+0x5e74>
   17350:	vcmpe.f32	s6, s8
   17354:	vmrs	APSR_nzcv, fpscr
   17358:	bmi	1736c <__assert_fail@plt+0x5e84>
   1735c:	vldr	s2, [pc, #452]	; 17528 <__assert_fail@plt+0x6040>
   17360:	movw	r0, #49632	; 0xc1e0
   17364:	movt	r0, #1
   17368:	str	r0, [r4, #20]
   1736c:	vmul.f32	s6, s2, s0
   17370:	vcmpe.f32	s6, s4
   17374:	vmrs	APSR_nzcv, fpscr
   17378:	bmi	17394 <__assert_fail@plt+0x5eac>
   1737c:	b	17438 <__assert_fail@plt+0x5f50>
   17380:	mov	r0, r1
   17384:	vmul.f32	s6, s2, s0
   17388:	vcmpe.f32	s6, s4
   1738c:	vmrs	APSR_nzcv, fpscr
   17390:	bpl	17438 <__assert_fail@plt+0x5f50>
   17394:	vldr	s4, [r0, #12]
   17398:	ldrb	r0, [r0, #16]
   1739c:	mvn	r7, #0
   173a0:	cmp	r0, #0
   173a4:	vmul.f32	s0, s4, s0
   173a8:	vldr	s4, [pc, #380]	; 1752c <__assert_fail@plt+0x6044>
   173ac:	vmul.f32	s2, s2, s0
   173b0:	vseleq.f32	s0, s2, s0
   173b4:	vcmpe.f32	s0, s4
   173b8:	vmrs	APSR_nzcv, fpscr
   173bc:	bge	174ac <__assert_fail@plt+0x5fc4>
   173c0:	vcvt.u32.f32	s0, s0
   173c4:	mov	r0, r4
   173c8:	vmov	r1, s0
   173cc:	bl	16cf4 <__assert_fail@plt+0x580c>
   173d0:	cmp	r0, #0
   173d4:	beq	174ac <__assert_fail@plt+0x5fc4>
   173d8:	ldr	r1, [r4, #8]
   173dc:	ldr	r2, [r4, #24]
   173e0:	mov	r0, sl
   173e4:	blx	r2
   173e8:	mov	r7, r0
   173ec:	ldr	r0, [r4, #8]
   173f0:	cmp	r7, r0
   173f4:	bcs	17518 <__assert_fail@plt+0x6030>
   173f8:	ldr	r5, [r4]
   173fc:	mov	r9, r5
   17400:	ldr	r1, [r9, r7, lsl #3]!
   17404:	cmp	r1, #0
   17408:	beq	17438 <__assert_fail@plt+0x5f50>
   1740c:	cmp	r1, sl
   17410:	mov	r0, sl
   17414:	beq	17430 <__assert_fail@plt+0x5f48>
   17418:	ldr	r2, [r4, #28]
   1741c:	mov	r0, sl
   17420:	blx	r2
   17424:	cmp	r0, #0
   17428:	beq	174c8 <__assert_fail@plt+0x5fe0>
   1742c:	ldr	r0, [r9]
   17430:	cmp	r0, #0
   17434:	bne	17518 <__assert_fail@plt+0x6030>
   17438:	ldr	r0, [r9]
   1743c:	cmp	r0, #0
   17440:	beq	1745c <__assert_fail@plt+0x5f74>
   17444:	ldr	r0, [r4, #36]	; 0x24
   17448:	cmp	r0, #0
   1744c:	beq	1747c <__assert_fail@plt+0x5f94>
   17450:	ldr	r1, [r0, #4]
   17454:	str	r1, [r4, #36]	; 0x24
   17458:	b	1748c <__assert_fail@plt+0x5fa4>
   1745c:	str	sl, [r9]
   17460:	ldr	r0, [r4, #12]
   17464:	ldr	r1, [r4, #16]
   17468:	add	r0, r0, #1
   1746c:	add	r1, r1, #1
   17470:	str	r0, [r4, #12]
   17474:	str	r1, [r4, #16]
   17478:	b	174a8 <__assert_fail@plt+0x5fc0>
   1747c:	mov	r0, #8
   17480:	bl	1a7ec <__assert_fail@plt+0x9304>
   17484:	cmp	r0, #0
   17488:	beq	174b8 <__assert_fail@plt+0x5fd0>
   1748c:	str	sl, [r0]
   17490:	ldr	r1, [r9, #4]
   17494:	str	r1, [r0, #4]
   17498:	str	r0, [r9, #4]
   1749c:	ldr	r0, [r4, #16]
   174a0:	add	r0, r0, #1
   174a4:	str	r0, [r4, #16]
   174a8:	mov	r7, #1
   174ac:	mov	r0, r7
   174b0:	sub	sp, fp, #28
   174b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174b8:	mvn	r7, #0
   174bc:	mov	r0, r7
   174c0:	sub	sp, fp, #28
   174c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174c8:	add	r6, r5, r7, lsl #3
   174cc:	ldr	r0, [r6, #4]!
   174d0:	cmp	r0, #0
   174d4:	beq	17438 <__assert_fail@plt+0x5f50>
   174d8:	ldr	r1, [r0]
   174dc:	cmp	r1, sl
   174e0:	beq	1750c <__assert_fail@plt+0x6024>
   174e4:	ldr	r2, [r4, #28]
   174e8:	mov	r0, sl
   174ec:	blx	r2
   174f0:	ldr	r6, [r6]
   174f4:	cmp	r0, #0
   174f8:	beq	174cc <__assert_fail@plt+0x5fe4>
   174fc:	ldr	r0, [r6]
   17500:	cmp	r0, #0
   17504:	beq	17438 <__assert_fail@plt+0x5f50>
   17508:	b	17518 <__assert_fail@plt+0x6030>
   1750c:	mov	r0, sl
   17510:	cmp	r0, #0
   17514:	beq	17438 <__assert_fail@plt+0x5f50>
   17518:	bl	114a0 <abort@plt>
   1751c:	stclcc	12, cr12, [ip, #820]	; 0x334
   17520:	svccc	0x00666666
   17524:	svccc	0x008ccccd
   17528:	svccc	0x004ccccd
   1752c:	svcmi	0x00800000
   17530:	push	{r4, sl, fp, lr}
   17534:	add	fp, sp, #8
   17538:	sub	sp, sp, #8
   1753c:	add	r2, sp, #4
   17540:	mov	r4, r1
   17544:	bl	171cc <__assert_fail@plt+0x5ce4>
   17548:	cmn	r0, #1
   1754c:	beq	17568 <__assert_fail@plt+0x6080>
   17550:	ldr	r1, [sp, #4]
   17554:	cmp	r0, #0
   17558:	moveq	r4, r1
   1755c:	mov	r0, r4
   17560:	sub	sp, fp, #8
   17564:	pop	{r4, sl, fp, pc}
   17568:	mov	r4, #0
   1756c:	mov	r0, r4
   17570:	sub	sp, fp, #8
   17574:	pop	{r4, sl, fp, pc}
   17578:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1757c:	add	fp, sp, #24
   17580:	mov	r9, r1
   17584:	ldr	r1, [r0, #8]
   17588:	ldr	r2, [r0, #24]
   1758c:	mov	r5, r0
   17590:	mov	r0, r9
   17594:	blx	r2
   17598:	mov	r7, r0
   1759c:	ldr	r0, [r5, #8]
   175a0:	cmp	r7, r0
   175a4:	bcs	17818 <__assert_fail@plt+0x6330>
   175a8:	ldr	r6, [r5]
   175ac:	mov	r8, #0
   175b0:	mov	r4, r6
   175b4:	ldr	r1, [r4, r7, lsl #3]!
   175b8:	cmp	r1, #0
   175bc:	beq	17670 <__assert_fail@plt+0x6188>
   175c0:	cmp	r1, r9
   175c4:	beq	175e0 <__assert_fail@plt+0x60f8>
   175c8:	ldr	r2, [r5, #28]
   175cc:	mov	r0, r9
   175d0:	blx	r2
   175d4:	cmp	r0, #0
   175d8:	beq	17618 <__assert_fail@plt+0x6130>
   175dc:	ldr	r9, [r4]
   175e0:	add	r0, r6, r7, lsl #3
   175e4:	ldr	r0, [r0, #4]
   175e8:	cmp	r0, #0
   175ec:	beq	17660 <__assert_fail@plt+0x6178>
   175f0:	ldm	r0, {r1, r2}
   175f4:	stm	r4, {r1, r2}
   175f8:	mov	r1, #0
   175fc:	str	r1, [r0]
   17600:	ldr	r1, [r5, #36]	; 0x24
   17604:	str	r1, [r0, #4]
   17608:	str	r0, [r5, #36]	; 0x24
   1760c:	cmp	r9, #0
   17610:	bne	176a8 <__assert_fail@plt+0x61c0>
   17614:	b	17670 <__assert_fail@plt+0x6188>
   17618:	add	r7, r6, r7, lsl #3
   1761c:	ldr	r0, [r7, #4]!
   17620:	cmp	r0, #0
   17624:	beq	17670 <__assert_fail@plt+0x6188>
   17628:	ldr	r1, [r0]
   1762c:	cmp	r1, r9
   17630:	beq	17678 <__assert_fail@plt+0x6190>
   17634:	ldr	r2, [r5, #28]
   17638:	mov	r0, r9
   1763c:	blx	r2
   17640:	ldr	r1, [r7]
   17644:	cmp	r0, #0
   17648:	bne	17680 <__assert_fail@plt+0x6198>
   1764c:	ldr	r0, [r1, #4]!
   17650:	mov	r7, r1
   17654:	cmp	r0, #0
   17658:	bne	17628 <__assert_fail@plt+0x6140>
   1765c:	b	17670 <__assert_fail@plt+0x6188>
   17660:	mov	r0, #0
   17664:	str	r0, [r4]
   17668:	cmp	r9, #0
   1766c:	bne	176a8 <__assert_fail@plt+0x61c0>
   17670:	mov	r0, r8
   17674:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17678:	mov	r1, r0
   1767c:	b	17684 <__assert_fail@plt+0x619c>
   17680:	ldr	r9, [r1]
   17684:	ldr	r0, [r1, #4]
   17688:	str	r0, [r7]
   1768c:	mov	r0, #0
   17690:	str	r0, [r1]
   17694:	ldr	r0, [r5, #36]	; 0x24
   17698:	str	r0, [r1, #4]
   1769c:	str	r1, [r5, #36]	; 0x24
   176a0:	cmp	r9, #0
   176a4:	beq	17670 <__assert_fail@plt+0x6188>
   176a8:	ldr	r0, [r5, #16]
   176ac:	sub	r0, r0, #1
   176b0:	str	r0, [r5, #16]
   176b4:	ldr	r0, [r4]
   176b8:	cmp	r0, #0
   176bc:	bne	1780c <__assert_fail@plt+0x6324>
   176c0:	ldr	r0, [r5, #12]
   176c4:	vldr	s0, [r5, #8]
   176c8:	sub	r1, r0, #1
   176cc:	str	r1, [r5, #12]
   176d0:	vmov	s2, r1
   176d4:	ldr	r0, [r5, #20]
   176d8:	vcvt.f32.u32	s0, s0
   176dc:	vcvt.f32.u32	s2, s2
   176e0:	vldr	s4, [r0]
   176e4:	vmul.f32	s6, s4, s0
   176e8:	vcmpe.f32	s6, s2
   176ec:	vmrs	APSR_nzcv, fpscr
   176f0:	ble	1780c <__assert_fail@plt+0x6324>
   176f4:	movw	r1, #49632	; 0xc1e0
   176f8:	movt	r1, #1
   176fc:	cmp	r0, r1
   17700:	beq	1779c <__assert_fail@plt+0x62b4>
   17704:	vldr	s8, [pc, #272]	; 1781c <__assert_fail@plt+0x6334>
   17708:	vldr	s6, [r0, #8]
   1770c:	vcmpe.f32	s6, s8
   17710:	vmrs	APSR_nzcv, fpscr
   17714:	ble	17778 <__assert_fail@plt+0x6290>
   17718:	vldr	s10, [pc, #256]	; 17820 <__assert_fail@plt+0x6338>
   1771c:	vcmpe.f32	s6, s10
   17720:	vmrs	APSR_nzcv, fpscr
   17724:	bpl	17778 <__assert_fail@plt+0x6290>
   17728:	vcmpe.f32	s4, #0.0
   1772c:	vmrs	APSR_nzcv, fpscr
   17730:	blt	17778 <__assert_fail@plt+0x6290>
   17734:	vldr	s10, [r0, #12]
   17738:	vldr	s12, [pc, #228]	; 17824 <__assert_fail@plt+0x633c>
   1773c:	vcmpe.f32	s10, s12
   17740:	vmrs	APSR_nzcv, fpscr
   17744:	ble	17778 <__assert_fail@plt+0x6290>
   17748:	vadd.f32	s8, s4, s8
   1774c:	vcmpe.f32	s8, s6
   17750:	vmrs	APSR_nzcv, fpscr
   17754:	bpl	17778 <__assert_fail@plt+0x6290>
   17758:	vldr	s6, [r0, #4]
   1775c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17760:	vcmpe.f32	s6, s10
   17764:	vmrs	APSR_nzcv, fpscr
   17768:	bhi	17778 <__assert_fail@plt+0x6290>
   1776c:	vcmpe.f32	s8, s6
   17770:	vmrs	APSR_nzcv, fpscr
   17774:	bmi	17788 <__assert_fail@plt+0x62a0>
   17778:	vldr	s4, [pc, #168]	; 17828 <__assert_fail@plt+0x6340>
   1777c:	movw	r0, #49632	; 0xc1e0
   17780:	movt	r0, #1
   17784:	str	r0, [r5, #20]
   17788:	vmul.f32	s4, s4, s0
   1778c:	vcmpe.f32	s4, s2
   17790:	vmrs	APSR_nzcv, fpscr
   17794:	bgt	177b0 <__assert_fail@plt+0x62c8>
   17798:	b	1780c <__assert_fail@plt+0x6324>
   1779c:	mov	r0, r1
   177a0:	vmul.f32	s4, s4, s0
   177a4:	vcmpe.f32	s4, s2
   177a8:	vmrs	APSR_nzcv, fpscr
   177ac:	ble	1780c <__assert_fail@plt+0x6324>
   177b0:	vldr	s2, [r0, #4]
   177b4:	ldrb	r1, [r0, #16]
   177b8:	cmp	r1, #0
   177bc:	vmul.f32	s0, s2, s0
   177c0:	bne	177cc <__assert_fail@plt+0x62e4>
   177c4:	vldr	s2, [r0, #8]
   177c8:	vmul.f32	s0, s0, s2
   177cc:	vcvt.u32.f32	s0, s0
   177d0:	mov	r0, r5
   177d4:	vmov	r1, s0
   177d8:	bl	16cf4 <__assert_fail@plt+0x580c>
   177dc:	cmp	r0, #0
   177e0:	bne	1780c <__assert_fail@plt+0x6324>
   177e4:	ldr	r0, [r5, #36]	; 0x24
   177e8:	cmp	r0, #0
   177ec:	beq	17804 <__assert_fail@plt+0x631c>
   177f0:	ldr	r4, [r0, #4]
   177f4:	bl	13af8 <__assert_fail@plt+0x2610>
   177f8:	cmp	r4, #0
   177fc:	mov	r0, r4
   17800:	bne	177f0 <__assert_fail@plt+0x6308>
   17804:	mov	r0, #0
   17808:	str	r0, [r5, #36]	; 0x24
   1780c:	mov	r8, r9
   17810:	mov	r0, r8
   17814:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17818:	bl	114a0 <abort@plt>
   1781c:	stclcc	12, cr12, [ip, #820]	; 0x334
   17820:	svccc	0x00666666
   17824:	svccc	0x008ccccd
   17828:	andeq	r0, r0, r0
   1782c:	b	17578 <__assert_fail@plt+0x6090>
   17830:	vdup.32	q8, r1
   17834:	mov	r2, #0
   17838:	str	r2, [r0, #20]
   1783c:	str	r2, [r0, #24]
   17840:	mov	r2, #1
   17844:	strb	r2, [r0, #28]
   17848:	vst1.32	{d16-d17}, [r0]!
   1784c:	str	r1, [r0]
   17850:	bx	lr
   17854:	ldrb	r0, [r0, #28]
   17858:	bx	lr
   1785c:	push	{fp, lr}
   17860:	mov	fp, sp
   17864:	ldrb	r3, [r0, #28]
   17868:	ldr	r2, [r0, #20]
   1786c:	eor	lr, r3, #1
   17870:	add	r2, r2, lr
   17874:	and	r3, r2, #3
   17878:	ldr	ip, [r0, r3, lsl #2]
   1787c:	str	r1, [r0, r3, lsl #2]
   17880:	str	r3, [r0, #20]
   17884:	ldr	r1, [r0, #24]
   17888:	cmp	r3, r1
   1788c:	addeq	r1, r2, lr
   17890:	andeq	r1, r1, #3
   17894:	streq	r1, [r0, #24]
   17898:	mov	r1, #0
   1789c:	strb	r1, [r0, #28]
   178a0:	mov	r0, ip
   178a4:	pop	{fp, pc}
   178a8:	push	{fp, lr}
   178ac:	mov	fp, sp
   178b0:	ldrb	r1, [r0, #28]
   178b4:	cmp	r1, #0
   178b8:	bne	178f4 <__assert_fail@plt+0x640c>
   178bc:	ldr	r3, [r0, #20]
   178c0:	ldr	r2, [r0, #16]
   178c4:	ldr	r1, [r0, r3, lsl #2]
   178c8:	str	r2, [r0, r3, lsl #2]
   178cc:	ldr	r2, [r0, #20]
   178d0:	ldr	r3, [r0, #24]
   178d4:	cmp	r2, r3
   178d8:	moveq	r2, #1
   178dc:	strbeq	r2, [r0, #28]
   178e0:	subne	r2, r2, #1
   178e4:	andne	r2, r2, #3
   178e8:	strne	r2, [r0, #20]
   178ec:	mov	r0, r1
   178f0:	pop	{fp, pc}
   178f4:	bl	114a0 <abort@plt>
   178f8:	sub	sp, sp, #4
   178fc:	push	{fp, lr}
   17900:	mov	fp, sp
   17904:	sub	sp, sp, #4
   17908:	str	r3, [fp, #8]
   1790c:	tst	r2, #64	; 0x40
   17910:	mov	r3, #0
   17914:	ldrne	r3, [fp, #8]
   17918:	bl	11380 <openat64@plt>
   1791c:	bl	199c4 <__assert_fail@plt+0x84dc>
   17920:	mov	sp, fp
   17924:	pop	{fp, lr}
   17928:	add	sp, sp, #4
   1792c:	bx	lr
   17930:	push	{r4, r5, r6, sl, fp, lr}
   17934:	add	fp, sp, #16
   17938:	orr	r2, r2, #18688	; 0x4900
   1793c:	mov	r4, r3
   17940:	orr	r2, r2, #524288	; 0x80000
   17944:	bl	178f8 <__assert_fail@plt+0x6410>
   17948:	mov	r5, r0
   1794c:	mov	r0, #0
   17950:	cmp	r5, #0
   17954:	bmi	1798c <__assert_fail@plt+0x64a4>
   17958:	mov	r0, r5
   1795c:	bl	11440 <fdopendir@plt>
   17960:	cmp	r0, #0
   17964:	beq	17970 <__assert_fail@plt+0x6488>
   17968:	str	r5, [r4]
   1796c:	pop	{r4, r5, r6, sl, fp, pc}
   17970:	bl	1138c <__errno_location@plt>
   17974:	ldr	r6, [r0]
   17978:	mov	r4, r0
   1797c:	mov	r0, r5
   17980:	bl	114ac <close@plt>
   17984:	mov	r0, #0
   17988:	str	r6, [r4]
   1798c:	pop	{r4, r5, r6, sl, fp, pc}
   17990:	push	{r4, r5, fp, lr}
   17994:	add	fp, sp, #8
   17998:	cmp	r0, #0
   1799c:	beq	17a30 <__assert_fail@plt+0x6548>
   179a0:	mov	r1, #47	; 0x2f
   179a4:	mov	r4, r0
   179a8:	bl	1141c <strrchr@plt>
   179ac:	cmp	r0, #0
   179b0:	mov	r5, r4
   179b4:	addne	r5, r0, #1
   179b8:	sub	r0, r5, r4
   179bc:	cmp	r0, #7
   179c0:	blt	17a14 <__assert_fail@plt+0x652c>
   179c4:	movw	r1, #49708	; 0xc22c
   179c8:	sub	r0, r5, #7
   179cc:	mov	r2, #7
   179d0:	movt	r1, #1
   179d4:	bl	11494 <strncmp@plt>
   179d8:	cmp	r0, #0
   179dc:	bne	17a14 <__assert_fail@plt+0x652c>
   179e0:	movw	r1, #49716	; 0xc234
   179e4:	mov	r0, r5
   179e8:	mov	r2, #3
   179ec:	movt	r1, #1
   179f0:	bl	11494 <strncmp@plt>
   179f4:	cmp	r0, #0
   179f8:	beq	17a04 <__assert_fail@plt+0x651c>
   179fc:	mov	r4, r5
   17a00:	b	17a14 <__assert_fail@plt+0x652c>
   17a04:	movw	r0, #53624	; 0xd178
   17a08:	add	r4, r5, #3
   17a0c:	movt	r0, #2
   17a10:	str	r4, [r0]
   17a14:	movw	r0, #53628	; 0xd17c
   17a18:	movt	r0, #2
   17a1c:	str	r4, [r0]
   17a20:	movw	r0, #53692	; 0xd1bc
   17a24:	movt	r0, #2
   17a28:	str	r4, [r0]
   17a2c:	pop	{r4, r5, fp, pc}
   17a30:	movw	r0, #53640	; 0xd188
   17a34:	mov	r1, #55	; 0x37
   17a38:	mov	r2, #1
   17a3c:	movt	r0, #2
   17a40:	ldr	r3, [r0]
   17a44:	movw	r0, #49652	; 0xc1f4
   17a48:	movt	r0, #1
   17a4c:	bl	112c0 <fwrite@plt>
   17a50:	bl	114a0 <abort@plt>
   17a54:	push	{r4, r5, r6, sl, fp, lr}
   17a58:	add	fp, sp, #16
   17a5c:	mov	r4, r0
   17a60:	movw	r0, #53696	; 0xd1c0
   17a64:	movt	r0, #2
   17a68:	cmp	r4, #0
   17a6c:	moveq	r4, r0
   17a70:	bl	1138c <__errno_location@plt>
   17a74:	ldr	r6, [r0]
   17a78:	mov	r5, r0
   17a7c:	mov	r0, r4
   17a80:	mov	r1, #48	; 0x30
   17a84:	bl	1a57c <__assert_fail@plt+0x9094>
   17a88:	str	r6, [r5]
   17a8c:	pop	{r4, r5, r6, sl, fp, pc}
   17a90:	movw	r1, #53696	; 0xd1c0
   17a94:	cmp	r0, #0
   17a98:	movt	r1, #2
   17a9c:	movne	r1, r0
   17aa0:	ldr	r0, [r1]
   17aa4:	bx	lr
   17aa8:	movw	r2, #53696	; 0xd1c0
   17aac:	cmp	r0, #0
   17ab0:	movt	r2, #2
   17ab4:	movne	r2, r0
   17ab8:	str	r1, [r2]
   17abc:	bx	lr
   17ac0:	movw	r3, #53696	; 0xd1c0
   17ac4:	cmp	r0, #0
   17ac8:	and	r2, r2, #1
   17acc:	movt	r3, #2
   17ad0:	movne	r3, r0
   17ad4:	ubfx	r0, r1, #5, #3
   17ad8:	and	r1, r1, #31
   17adc:	add	ip, r3, r0, lsl #2
   17ae0:	mov	r0, #1
   17ae4:	ldr	r3, [ip, #8]
   17ae8:	and	r0, r0, r3, lsr r1
   17aec:	eor	r2, r0, r2
   17af0:	eor	r1, r3, r2, lsl r1
   17af4:	str	r1, [ip, #8]
   17af8:	bx	lr
   17afc:	movw	r2, #53696	; 0xd1c0
   17b00:	cmp	r0, #0
   17b04:	movt	r2, #2
   17b08:	movne	r2, r0
   17b0c:	ldr	r0, [r2, #4]
   17b10:	str	r1, [r2, #4]
   17b14:	bx	lr
   17b18:	push	{fp, lr}
   17b1c:	mov	fp, sp
   17b20:	movw	r3, #53696	; 0xd1c0
   17b24:	cmp	r0, #0
   17b28:	movt	r3, #2
   17b2c:	movne	r3, r0
   17b30:	cmp	r1, #0
   17b34:	mov	r0, #10
   17b38:	cmpne	r2, #0
   17b3c:	str	r0, [r3]
   17b40:	bne	17b48 <__assert_fail@plt+0x6660>
   17b44:	bl	114a0 <abort@plt>
   17b48:	str	r1, [r3, #40]	; 0x28
   17b4c:	str	r2, [r3, #44]	; 0x2c
   17b50:	pop	{fp, pc}
   17b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b58:	add	fp, sp, #28
   17b5c:	sub	sp, sp, #20
   17b60:	mov	r7, r0
   17b64:	ldr	r0, [fp, #8]
   17b68:	movw	r5, #53696	; 0xd1c0
   17b6c:	mov	r8, r3
   17b70:	mov	r9, r2
   17b74:	mov	sl, r1
   17b78:	movt	r5, #2
   17b7c:	cmp	r0, #0
   17b80:	movne	r5, r0
   17b84:	bl	1138c <__errno_location@plt>
   17b88:	ldr	r2, [r5, #40]	; 0x28
   17b8c:	ldr	r3, [r5, #44]	; 0x2c
   17b90:	mov	r4, r0
   17b94:	ldm	r5, {r0, r1}
   17b98:	add	r5, r5, #8
   17b9c:	ldr	r6, [r4]
   17ba0:	stm	sp, {r0, r1, r5}
   17ba4:	mov	r0, r7
   17ba8:	mov	r1, sl
   17bac:	str	r2, [sp, #12]
   17bb0:	str	r3, [sp, #16]
   17bb4:	mov	r2, r9
   17bb8:	mov	r3, r8
   17bbc:	bl	17bcc <__assert_fail@plt+0x66e4>
   17bc0:	str	r6, [r4]
   17bc4:	sub	sp, fp, #28
   17bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bd0:	add	fp, sp, #28
   17bd4:	sub	sp, sp, #156	; 0x9c
   17bd8:	str	r0, [fp, #-84]	; 0xffffffac
   17bdc:	add	r0, r2, #1
   17be0:	mov	r6, r1
   17be4:	mov	r7, r3
   17be8:	str	r2, [fp, #-80]	; 0xffffffb0
   17bec:	str	r0, [sp, #80]	; 0x50
   17bf0:	ldr	r0, [fp, #12]
   17bf4:	and	r1, r0, #1
   17bf8:	str	r1, [sp, #36]	; 0x24
   17bfc:	and	r1, r0, #4
   17c00:	str	r1, [sp, #32]
   17c04:	ubfx	r8, r0, #1, #1
   17c08:	bl	112d8 <__ctype_get_mb_cur_max@plt>
   17c0c:	str	r0, [sp, #40]	; 0x28
   17c10:	ldr	r0, [fp, #24]
   17c14:	ldr	r4, [fp, #8]
   17c18:	mov	r1, #0
   17c1c:	str	r1, [fp, #-52]	; 0xffffffcc
   17c20:	mov	r1, #0
   17c24:	str	r1, [sp, #60]	; 0x3c
   17c28:	mov	r1, #1
   17c2c:	str	r1, [sp, #84]	; 0x54
   17c30:	str	r0, [sp, #76]	; 0x4c
   17c34:	ldr	r0, [fp, #20]
   17c38:	str	r0, [sp, #72]	; 0x48
   17c3c:	mov	r0, #0
   17c40:	str	r0, [sp, #56]	; 0x38
   17c44:	mov	r0, #0
   17c48:	str	r0, [fp, #-88]	; 0xffffffa8
   17c4c:	mov	r0, #0
   17c50:	str	r0, [fp, #-72]	; 0xffffffb8
   17c54:	mov	r0, #0
   17c58:	cmp	r4, #10
   17c5c:	bhi	18f78 <__assert_fail@plt+0x7a90>
   17c60:	add	r1, pc, #24
   17c64:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c68:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17c6c:	mov	r5, r6
   17c70:	mov	r9, #0
   17c74:	mov	r2, #1
   17c78:	mov	r3, #0
   17c7c:	ldr	pc, [r1, r4, lsl #2]
   17c80:	andeq	r7, r1, r8, asr #26
   17c84:	andeq	r7, r1, r4, lsl #27
   17c88:	andeq	r7, r1, r8, asr sp
   17c8c:	andeq	r7, r1, r0, asr #26
   17c90:	andeq	r7, r1, r8, ror sp
   17c94:	ldrdeq	r7, [r1], -ip
   17c98:	andeq	r7, r1, r8, ror #26
   17c9c:	andeq	r8, r1, r4, asr r0
   17ca0:	andeq	r7, r1, ip, lsr #25
   17ca4:	andeq	r7, r1, ip, lsr #25
   17ca8:	andeq	r7, r1, r4, ror #29
   17cac:	movw	r6, #49798	; 0xc286
   17cb0:	mov	r0, #0
   17cb4:	mov	r2, #5
   17cb8:	movt	r6, #1
   17cbc:	mov	r1, r6
   17cc0:	bl	1126c <dcgettext@plt>
   17cc4:	cmp	r0, r6
   17cc8:	str	r0, [sp, #72]	; 0x48
   17ccc:	bne	17ebc <__assert_fail@plt+0x69d4>
   17cd0:	bl	1ac9c <__assert_fail@plt+0x97b4>
   17cd4:	ldrb	r1, [r0]
   17cd8:	and	r1, r1, #223	; 0xdf
   17cdc:	cmp	r1, #71	; 0x47
   17ce0:	beq	17e3c <__assert_fail@plt+0x6954>
   17ce4:	cmp	r1, #85	; 0x55
   17ce8:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17cec:	ldrb	r1, [r0, #1]
   17cf0:	and	r1, r1, #223	; 0xdf
   17cf4:	cmp	r1, #84	; 0x54
   17cf8:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17cfc:	ldrb	r1, [r0, #2]
   17d00:	and	r1, r1, #223	; 0xdf
   17d04:	cmp	r1, #70	; 0x46
   17d08:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17d0c:	ldrb	r1, [r0, #3]
   17d10:	cmp	r1, #45	; 0x2d
   17d14:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17d18:	ldrb	r1, [r0, #4]
   17d1c:	cmp	r1, #56	; 0x38
   17d20:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17d24:	ldrb	r0, [r0, #5]
   17d28:	cmp	r0, #0
   17d2c:	movw	r0, #49802	; 0xc28a
   17d30:	movt	r0, #1
   17d34:	str	r0, [sp, #72]	; 0x48
   17d38:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17d3c:	b	17ebc <__assert_fail@plt+0x69d4>
   17d40:	mov	r0, #1
   17d44:	b	17d84 <__assert_fail@plt+0x689c>
   17d48:	mov	r4, #0
   17d4c:	mov	r9, #0
   17d50:	mov	r2, r0
   17d54:	b	17dd4 <__assert_fail@plt+0x68ec>
   17d58:	tst	r8, #1
   17d5c:	bne	17d84 <__assert_fail@plt+0x689c>
   17d60:	mov	r2, r0
   17d64:	b	17dac <__assert_fail@plt+0x68c4>
   17d68:	mov	r0, #1
   17d6c:	mov	r9, #0
   17d70:	mov	r4, #5
   17d74:	b	17df0 <__assert_fail@plt+0x6908>
   17d78:	mov	r2, #1
   17d7c:	tst	r8, #1
   17d80:	beq	17dac <__assert_fail@plt+0x68c4>
   17d84:	mov	r1, #1
   17d88:	mov	r9, #0
   17d8c:	mov	r4, #2
   17d90:	mov	r2, r0
   17d94:	mov	r3, #1
   17d98:	str	r1, [fp, #-72]	; 0xffffffb8
   17d9c:	movw	r1, #49800	; 0xc288
   17da0:	movt	r1, #1
   17da4:	str	r1, [fp, #-88]	; 0xffffffa8
   17da8:	b	18054 <__assert_fail@plt+0x6b6c>
   17dac:	cmp	r5, #0
   17db0:	mov	r9, #1
   17db4:	mov	r4, #2
   17db8:	movne	r0, #39	; 0x27
   17dbc:	strbne	r0, [ip]
   17dc0:	movw	r0, #49800	; 0xc288
   17dc4:	movt	r0, #1
   17dc8:	str	r0, [fp, #-88]	; 0xffffffa8
   17dcc:	mov	r0, #1
   17dd0:	str	r0, [fp, #-72]	; 0xffffffb8
   17dd4:	mov	r3, #0
   17dd8:	b	18054 <__assert_fail@plt+0x6b6c>
   17ddc:	mov	r4, #5
   17de0:	tst	r8, #1
   17de4:	beq	17e0c <__assert_fail@plt+0x6924>
   17de8:	mov	r0, #1
   17dec:	mov	r9, #0
   17df0:	str	r0, [fp, #-72]	; 0xffffffb8
   17df4:	movw	r0, #49796	; 0xc284
   17df8:	mov	r2, #1
   17dfc:	mov	r3, #1
   17e00:	movt	r0, #1
   17e04:	str	r0, [fp, #-88]	; 0xffffffa8
   17e08:	b	18054 <__assert_fail@plt+0x6b6c>
   17e0c:	cmp	r5, #0
   17e10:	mov	r3, #0
   17e14:	mov	r9, #1
   17e18:	mov	r2, #1
   17e1c:	movne	r0, #34	; 0x22
   17e20:	strbne	r0, [ip]
   17e24:	movw	r0, #49796	; 0xc284
   17e28:	movt	r0, #1
   17e2c:	str	r0, [fp, #-88]	; 0xffffffa8
   17e30:	mov	r0, #1
   17e34:	str	r0, [fp, #-72]	; 0xffffffb8
   17e38:	b	18054 <__assert_fail@plt+0x6b6c>
   17e3c:	ldrb	r1, [r0, #1]
   17e40:	and	r1, r1, #223	; 0xdf
   17e44:	cmp	r1, #66	; 0x42
   17e48:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17e4c:	ldrb	r1, [r0, #2]
   17e50:	cmp	r1, #49	; 0x31
   17e54:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17e58:	ldrb	r1, [r0, #3]
   17e5c:	cmp	r1, #56	; 0x38
   17e60:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17e64:	ldrb	r1, [r0, #4]
   17e68:	cmp	r1, #48	; 0x30
   17e6c:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17e70:	ldrb	r1, [r0, #5]
   17e74:	cmp	r1, #51	; 0x33
   17e78:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17e7c:	ldrb	r1, [r0, #6]
   17e80:	cmp	r1, #48	; 0x30
   17e84:	bne	17ea0 <__assert_fail@plt+0x69b8>
   17e88:	ldrb	r0, [r0, #7]
   17e8c:	cmp	r0, #0
   17e90:	movw	r0, #49810	; 0xc292
   17e94:	movt	r0, #1
   17e98:	str	r0, [sp, #72]	; 0x48
   17e9c:	beq	17ebc <__assert_fail@plt+0x69d4>
   17ea0:	movw	r1, #49796	; 0xc284
   17ea4:	movw	r0, #49800	; 0xc288
   17ea8:	cmp	r4, #9
   17eac:	movt	r1, #1
   17eb0:	movt	r0, #1
   17eb4:	moveq	r0, r1
   17eb8:	str	r0, [sp, #72]	; 0x48
   17ebc:	movw	r6, #49800	; 0xc288
   17ec0:	mov	r0, #0
   17ec4:	mov	r2, #5
   17ec8:	movt	r6, #1
   17ecc:	mov	r1, r6
   17ed0:	bl	1126c <dcgettext@plt>
   17ed4:	cmp	r0, r6
   17ed8:	str	r0, [sp, #76]	; 0x4c
   17edc:	beq	17f28 <__assert_fail@plt+0x6a40>
   17ee0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17ee4:	mov	r9, #0
   17ee8:	tst	r8, #1
   17eec:	bne	18030 <__assert_fail@plt+0x6b48>
   17ef0:	ldr	r0, [sp, #72]	; 0x48
   17ef4:	ldrb	r0, [r0]
   17ef8:	cmp	r0, #0
   17efc:	beq	18030 <__assert_fail@plt+0x6b48>
   17f00:	ldr	r1, [sp, #72]	; 0x48
   17f04:	mov	r9, #0
   17f08:	add	r1, r1, #1
   17f0c:	cmp	r9, r5
   17f10:	strbcc	r0, [ip, r9]
   17f14:	ldrb	r0, [r1, r9]
   17f18:	add	r9, r9, #1
   17f1c:	cmp	r0, #0
   17f20:	bne	17f0c <__assert_fail@plt+0x6a24>
   17f24:	b	18030 <__assert_fail@plt+0x6b48>
   17f28:	bl	1ac9c <__assert_fail@plt+0x97b4>
   17f2c:	ldrb	r1, [r0]
   17f30:	and	r1, r1, #223	; 0xdf
   17f34:	cmp	r1, #71	; 0x47
   17f38:	beq	17fa8 <__assert_fail@plt+0x6ac0>
   17f3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f40:	cmp	r1, #85	; 0x55
   17f44:	bne	18004 <__assert_fail@plt+0x6b1c>
   17f48:	ldrb	r1, [r0, #1]
   17f4c:	and	r1, r1, #223	; 0xdf
   17f50:	cmp	r1, #84	; 0x54
   17f54:	bne	18004 <__assert_fail@plt+0x6b1c>
   17f58:	ldrb	r1, [r0, #2]
   17f5c:	and	r1, r1, #223	; 0xdf
   17f60:	cmp	r1, #70	; 0x46
   17f64:	bne	18004 <__assert_fail@plt+0x6b1c>
   17f68:	ldrb	r1, [r0, #3]
   17f6c:	cmp	r1, #45	; 0x2d
   17f70:	bne	18004 <__assert_fail@plt+0x6b1c>
   17f74:	ldrb	r1, [r0, #4]
   17f78:	cmp	r1, #56	; 0x38
   17f7c:	bne	18004 <__assert_fail@plt+0x6b1c>
   17f80:	ldrb	r0, [r0, #5]
   17f84:	cmp	r0, #0
   17f88:	bne	18004 <__assert_fail@plt+0x6b1c>
   17f8c:	movw	r0, #49806	; 0xc28e
   17f90:	movt	r0, #1
   17f94:	str	r0, [sp, #76]	; 0x4c
   17f98:	mov	r9, #0
   17f9c:	tst	r8, #1
   17fa0:	beq	17ef0 <__assert_fail@plt+0x6a08>
   17fa4:	b	18030 <__assert_fail@plt+0x6b48>
   17fa8:	ldrb	r1, [r0, #1]
   17fac:	ldr	ip, [fp, #-84]	; 0xffffffac
   17fb0:	and	r1, r1, #223	; 0xdf
   17fb4:	cmp	r1, #66	; 0x42
   17fb8:	bne	18004 <__assert_fail@plt+0x6b1c>
   17fbc:	ldrb	r1, [r0, #2]
   17fc0:	cmp	r1, #49	; 0x31
   17fc4:	bne	18004 <__assert_fail@plt+0x6b1c>
   17fc8:	ldrb	r1, [r0, #3]
   17fcc:	cmp	r1, #56	; 0x38
   17fd0:	bne	18004 <__assert_fail@plt+0x6b1c>
   17fd4:	ldrb	r1, [r0, #4]
   17fd8:	cmp	r1, #48	; 0x30
   17fdc:	bne	18004 <__assert_fail@plt+0x6b1c>
   17fe0:	ldrb	r1, [r0, #5]
   17fe4:	cmp	r1, #51	; 0x33
   17fe8:	bne	18004 <__assert_fail@plt+0x6b1c>
   17fec:	ldrb	r1, [r0, #6]
   17ff0:	cmp	r1, #48	; 0x30
   17ff4:	bne	18004 <__assert_fail@plt+0x6b1c>
   17ff8:	ldrb	r0, [r0, #7]
   17ffc:	cmp	r0, #0
   18000:	beq	18e18 <__assert_fail@plt+0x7930>
   18004:	movw	r0, #49800	; 0xc288
   18008:	cmp	r4, #9
   1800c:	movt	r0, #1
   18010:	mov	r1, r0
   18014:	movw	r0, #49796	; 0xc284
   18018:	movt	r0, #1
   1801c:	moveq	r1, r0
   18020:	str	r1, [sp, #76]	; 0x4c
   18024:	mov	r9, #0
   18028:	tst	r8, #1
   1802c:	beq	17ef0 <__assert_fail@plt+0x6a08>
   18030:	ldr	r6, [sp, #76]	; 0x4c
   18034:	mov	r0, r6
   18038:	bl	11374 <strlen@plt>
   1803c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18040:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18044:	str	r0, [fp, #-72]	; 0xffffffb8
   18048:	str	r6, [fp, #-88]	; 0xffffffa8
   1804c:	mov	r2, #1
   18050:	mov	r3, r8
   18054:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18058:	str	r4, [fp, #-64]	; 0xffffffc0
   1805c:	mov	sl, #0
   18060:	str	r3, [fp, #-76]	; 0xffffffb4
   18064:	str	r2, [sp, #88]	; 0x58
   18068:	cmp	r0, #0
   1806c:	movwne	r0, #1
   18070:	and	r1, r0, r3
   18074:	and	r1, r2, r1
   18078:	str	r1, [sp, #48]	; 0x30
   1807c:	sub	r1, r4, #2
   18080:	clz	r1, r1
   18084:	lsr	r1, r1, #5
   18088:	and	r1, r1, r3
   1808c:	str	r1, [sp, #44]	; 0x2c
   18090:	subs	r1, r4, #2
   18094:	eor	r4, r3, #1
   18098:	movwne	r1, #1
   1809c:	str	r4, [sp, #92]	; 0x5c
   180a0:	orr	r4, r1, r4
   180a4:	and	r1, r1, r2
   180a8:	and	r0, r0, r1
   180ac:	str	r4, [sp, #64]	; 0x40
   180b0:	ldr	r4, [sp, #84]	; 0x54
   180b4:	str	r0, [fp, #-60]	; 0xffffffc4
   180b8:	orr	r0, r1, r3
   180bc:	ldr	r1, [fp, #16]
   180c0:	eor	r0, r0, #1
   180c4:	clz	r1, r1
   180c8:	lsr	r1, r1, #5
   180cc:	orr	r0, r1, r0
   180d0:	str	r0, [fp, #-68]	; 0xffffffbc
   180d4:	eor	r0, r2, #1
   180d8:	str	r0, [sp, #52]	; 0x34
   180dc:	cmn	r7, #1
   180e0:	beq	180f0 <__assert_fail@plt+0x6c08>
   180e4:	cmp	sl, r7
   180e8:	bne	180fc <__assert_fail@plt+0x6c14>
   180ec:	b	18d90 <__assert_fail@plt+0x78a8>
   180f0:	ldrb	r0, [lr, sl]
   180f4:	cmp	r0, #0
   180f8:	beq	18d98 <__assert_fail@plt+0x78b0>
   180fc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18100:	cmp	r0, #0
   18104:	beq	18164 <__assert_fail@plt+0x6c7c>
   18108:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1810c:	mov	r6, r5
   18110:	add	r5, sl, r0
   18114:	cmp	r0, #2
   18118:	bcc	18184 <__assert_fail@plt+0x6c9c>
   1811c:	mov	r0, #0
   18120:	cmn	r7, #1
   18124:	str	r0, [fp, #-56]	; 0xffffffc8
   18128:	bne	18140 <__assert_fail@plt+0x6c58>
   1812c:	mov	r0, lr
   18130:	bl	11374 <strlen@plt>
   18134:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18138:	ldr	ip, [fp, #-84]	; 0xffffffac
   1813c:	mov	r7, r0
   18140:	cmp	r5, r7
   18144:	bls	18194 <__assert_fail@plt+0x6cac>
   18148:	mov	r0, #0
   1814c:	mov	r5, r6
   18150:	str	r0, [fp, #-48]	; 0xffffffd0
   18154:	ldrb	r6, [lr, sl]
   18158:	cmp	r6, #126	; 0x7e
   1815c:	bls	181e4 <__assert_fail@plt+0x6cfc>
   18160:	b	18740 <__assert_fail@plt+0x7258>
   18164:	mov	r0, #0
   18168:	str	r0, [fp, #-56]	; 0xffffffc8
   1816c:	mov	r0, #0
   18170:	str	r0, [fp, #-48]	; 0xffffffd0
   18174:	ldrb	r6, [lr, sl]
   18178:	cmp	r6, #126	; 0x7e
   1817c:	bls	181e4 <__assert_fail@plt+0x6cfc>
   18180:	b	18740 <__assert_fail@plt+0x7258>
   18184:	mov	r0, #0
   18188:	str	r0, [fp, #-56]	; 0xffffffc8
   1818c:	cmp	r5, r7
   18190:	bhi	18148 <__assert_fail@plt+0x6c60>
   18194:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18198:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1819c:	add	r0, lr, sl
   181a0:	bl	11368 <bcmp@plt>
   181a4:	ldr	r2, [sp, #92]	; 0x5c
   181a8:	cmp	r0, #0
   181ac:	mov	r1, r0
   181b0:	mov	r5, r6
   181b4:	movwne	r1, #1
   181b8:	orr	r1, r1, r2
   181bc:	tst	r1, #1
   181c0:	beq	18e58 <__assert_fail@plt+0x7970>
   181c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   181c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   181cc:	clz	r0, r0
   181d0:	lsr	r0, r0, #5
   181d4:	str	r0, [fp, #-48]	; 0xffffffd0
   181d8:	ldrb	r6, [lr, sl]
   181dc:	cmp	r6, #126	; 0x7e
   181e0:	bhi	18740 <__assert_fail@plt+0x7258>
   181e4:	add	r3, pc, #16
   181e8:	mov	r8, #1
   181ec:	mov	r2, #110	; 0x6e
   181f0:	mov	r0, #97	; 0x61
   181f4:	mov	r1, #0
   181f8:	ldr	pc, [r3, r6, lsl #2]
   181fc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18200:	andeq	r8, r1, r0, asr #14
   18204:	andeq	r8, r1, r0, asr #14
   18208:	andeq	r8, r1, r0, asr #14
   1820c:	andeq	r8, r1, r0, asr #14
   18210:	andeq	r8, r1, r0, asr #14
   18214:	andeq	r8, r1, r0, asr #14
   18218:	strdeq	r8, [r1], -r4
   1821c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18220:	ldrdeq	r8, [r1], -r0
   18224:	andeq	r8, r1, r4, ror #9
   18228:	andeq	r8, r1, r4, lsl r6
   1822c:	andeq	r8, r1, r8, asr #9
   18230:	andeq	r8, r1, r0, ror #9
   18234:	andeq	r8, r1, r0, asr #14
   18238:	andeq	r8, r1, r0, asr #14
   1823c:	andeq	r8, r1, r0, asr #14
   18240:	andeq	r8, r1, r0, asr #14
   18244:	andeq	r8, r1, r0, asr #14
   18248:	andeq	r8, r1, r0, asr #14
   1824c:	andeq	r8, r1, r0, asr #14
   18250:	andeq	r8, r1, r0, asr #14
   18254:	andeq	r8, r1, r0, asr #14
   18258:	andeq	r8, r1, r0, asr #14
   1825c:	andeq	r8, r1, r0, asr #14
   18260:	andeq	r8, r1, r0, asr #14
   18264:	andeq	r8, r1, r0, asr #14
   18268:	andeq	r8, r1, r0, asr #14
   1826c:	andeq	r8, r1, r0, asr #14
   18270:	andeq	r8, r1, r0, asr #14
   18274:	andeq	r8, r1, r0, asr #14
   18278:	andeq	r8, r1, r0, asr #14
   1827c:	andeq	r8, r1, ip, ror #8
   18280:	andeq	r8, r1, r0, ror r4
   18284:	andeq	r8, r1, r0, ror r4
   18288:	andeq	r8, r1, r0, ror #8
   1828c:	andeq	r8, r1, r0, ror r4
   18290:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18294:	andeq	r8, r1, r0, ror r4
   18298:	andeq	r8, r1, ip, lsl r6
   1829c:	andeq	r8, r1, r0, ror r4
   182a0:	andeq	r8, r1, r0, ror r4
   182a4:	andeq	r8, r1, r0, ror r4
   182a8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182ac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182b0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182b4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182b8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182bc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182c0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182c4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182cc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182dc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e8:	andeq	r8, r1, r0, ror r4
   182ec:	andeq	r8, r1, r0, ror r4
   182f0:	andeq	r8, r1, r0, ror r4
   182f4:	andeq	r8, r1, r0, ror r4
   182f8:	andeq	r8, r1, r0, ror #11
   182fc:	andeq	r8, r1, r0, asr #14
   18300:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18304:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18308:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1830c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18310:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18314:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18318:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1831c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18320:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18324:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18328:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1832c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18330:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18334:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18338:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1833c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18340:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18344:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18348:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1834c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18350:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18354:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18358:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1835c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18360:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18364:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18368:	andeq	r8, r1, r0, ror r4
   1836c:	andeq	r8, r1, r4, lsr #9
   18370:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18374:	andeq	r8, r1, r0, ror r4
   18378:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1837c:	andeq	r8, r1, r0, ror r4
   18380:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18384:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18388:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1838c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18390:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18394:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18398:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1839c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183a0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183a4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183a8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183ac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183b0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183b4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183b8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183bc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183c0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183c4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183cc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183d0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183d4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183dc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183e0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183e4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183e8:	andeq	r8, r1, r8, lsr r4
   183ec:	andeq	r8, r1, r0, ror r4
   183f0:	andeq	r8, r1, r8, lsr r4
   183f4:	andeq	r8, r1, r0, ror #8
   183f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   183fc:	tst	r0, #1
   18400:	bne	186b8 <__assert_fail@plt+0x71d0>
   18404:	ldr	r1, [fp, #16]
   18408:	ubfx	r0, r6, #5, #3
   1840c:	mov	r2, #1
   18410:	ldr	r0, [r1, r0, lsl #2]
   18414:	and	r1, r6, #31
   18418:	tst	r0, r2, lsl r1
   1841c:	beq	186b8 <__assert_fail@plt+0x71d0>
   18420:	mov	r0, r6
   18424:	mov	r1, r8
   18428:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1842c:	tst	r2, #1
   18430:	beq	186d8 <__assert_fail@plt+0x71f0>
   18434:	b	18e34 <__assert_fail@plt+0x794c>
   18438:	cmp	r7, #1
   1843c:	beq	18460 <__assert_fail@plt+0x6f78>
   18440:	mov	r8, #0
   18444:	cmn	r7, #1
   18448:	bne	186a4 <__assert_fail@plt+0x71bc>
   1844c:	ldrb	r0, [lr, #1]
   18450:	cmp	r0, #0
   18454:	beq	18460 <__assert_fail@plt+0x6f78>
   18458:	mvn	r7, #0
   1845c:	b	186a4 <__assert_fail@plt+0x71bc>
   18460:	mov	r8, #0
   18464:	cmp	sl, #0
   18468:	bne	186a4 <__assert_fail@plt+0x71bc>
   1846c:	mov	r1, #1
   18470:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18474:	cmp	r0, #2
   18478:	bne	18490 <__assert_fail@plt+0x6fa8>
   1847c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18480:	mov	r8, r1
   18484:	tst	r0, #1
   18488:	beq	183f8 <__assert_fail@plt+0x6f10>
   1848c:	b	18e34 <__assert_fail@plt+0x794c>
   18490:	mov	r8, r1
   18494:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18498:	tst	r0, #1
   1849c:	beq	18404 <__assert_fail@plt+0x6f1c>
   184a0:	b	186b8 <__assert_fail@plt+0x71d0>
   184a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   184a8:	cmp	r0, #2
   184ac:	bne	1876c <__assert_fail@plt+0x7284>
   184b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   184b4:	tst	r0, #1
   184b8:	bne	18e34 <__assert_fail@plt+0x794c>
   184bc:	mov	r0, #0
   184c0:	str	r0, [fp, #-56]	; 0xffffffc8
   184c4:	b	18784 <__assert_fail@plt+0x729c>
   184c8:	mov	r0, #102	; 0x66
   184cc:	b	187f4 <__assert_fail@plt+0x730c>
   184d0:	mov	r2, #116	; 0x74
   184d4:	b	184e4 <__assert_fail@plt+0x6ffc>
   184d8:	mov	r0, #98	; 0x62
   184dc:	b	187f4 <__assert_fail@plt+0x730c>
   184e0:	mov	r2, #114	; 0x72
   184e4:	ldr	r0, [sp, #64]	; 0x40
   184e8:	tst	r0, #1
   184ec:	mov	r0, r2
   184f0:	bne	187f4 <__assert_fail@plt+0x730c>
   184f4:	b	18e34 <__assert_fail@plt+0x794c>
   184f8:	ldr	r0, [sp, #88]	; 0x58
   184fc:	tst	r0, #1
   18500:	beq	18814 <__assert_fail@plt+0x732c>
   18504:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18508:	tst	r0, #1
   1850c:	bne	18f70 <__assert_fail@plt+0x7a88>
   18510:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18514:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18518:	subs	r0, r0, #2
   1851c:	movwne	r0, #1
   18520:	orr	r0, r0, r1
   18524:	tst	r0, #1
   18528:	bne	18564 <__assert_fail@plt+0x707c>
   1852c:	cmp	r9, r5
   18530:	movcc	r0, #39	; 0x27
   18534:	strbcc	r0, [ip, r9]
   18538:	add	r0, r9, #1
   1853c:	cmp	r0, r5
   18540:	movcc	r1, #36	; 0x24
   18544:	strbcc	r1, [ip, r0]
   18548:	add	r0, r9, #2
   1854c:	add	r9, r9, #3
   18550:	cmp	r0, r5
   18554:	movcc	r1, #39	; 0x27
   18558:	strbcc	r1, [ip, r0]
   1855c:	mov	r0, #1
   18560:	str	r0, [fp, #-52]	; 0xffffffcc
   18564:	mov	r1, #1
   18568:	cmp	r9, r5
   1856c:	mov	r8, #0
   18570:	mov	r6, #48	; 0x30
   18574:	str	r1, [fp, #-56]	; 0xffffffc8
   18578:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1857c:	movcc	r0, #92	; 0x5c
   18580:	strbcc	r0, [ip, r9]
   18584:	add	r0, r9, #1
   18588:	cmp	r1, #2
   1858c:	beq	189e0 <__assert_fail@plt+0x74f8>
   18590:	add	r1, sl, #1
   18594:	cmp	r1, r7
   18598:	bcs	189e0 <__assert_fail@plt+0x74f8>
   1859c:	ldrb	r1, [lr, r1]
   185a0:	sub	r1, r1, #48	; 0x30
   185a4:	uxtb	r1, r1
   185a8:	cmp	r1, #9
   185ac:	bhi	189e0 <__assert_fail@plt+0x74f8>
   185b0:	cmp	r0, r5
   185b4:	movcc	r1, #48	; 0x30
   185b8:	strbcc	r1, [ip, r0]
   185bc:	add	r0, r9, #2
   185c0:	add	r9, r9, #3
   185c4:	cmp	r0, r5
   185c8:	movcc	r1, #48	; 0x30
   185cc:	strbcc	r1, [ip, r0]
   185d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   185d4:	tst	r0, #1
   185d8:	beq	18404 <__assert_fail@plt+0x6f1c>
   185dc:	b	186b8 <__assert_fail@plt+0x71d0>
   185e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   185e4:	mov	r6, #63	; 0x3f
   185e8:	cmp	r0, #5
   185ec:	beq	189f4 <__assert_fail@plt+0x750c>
   185f0:	mov	r1, #0
   185f4:	cmp	r0, #2
   185f8:	str	r1, [fp, #-56]	; 0xffffffc8
   185fc:	bne	18abc <__assert_fail@plt+0x75d4>
   18600:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18604:	mov	r8, #0
   18608:	tst	r0, #1
   1860c:	beq	183f8 <__assert_fail@plt+0x6f10>
   18610:	b	18e34 <__assert_fail@plt+0x794c>
   18614:	mov	r0, #118	; 0x76
   18618:	b	187f4 <__assert_fail@plt+0x730c>
   1861c:	mov	r0, #1
   18620:	mov	r6, #39	; 0x27
   18624:	str	r0, [sp, #60]	; 0x3c
   18628:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1862c:	cmp	r0, #2
   18630:	bne	18834 <__assert_fail@plt+0x734c>
   18634:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18638:	tst	r0, #1
   1863c:	bne	18e34 <__assert_fail@plt+0x794c>
   18640:	ldr	r2, [sp, #56]	; 0x38
   18644:	clz	r1, r5
   18648:	mov	r8, #1
   1864c:	lsr	r1, r1, #5
   18650:	cmp	r2, #0
   18654:	mov	r0, r2
   18658:	movwne	r0, #1
   1865c:	orrs	r0, r0, r1
   18660:	moveq	r2, r5
   18664:	moveq	r5, r0
   18668:	cmp	r9, r5
   1866c:	str	r2, [sp, #56]	; 0x38
   18670:	movcc	r0, #39	; 0x27
   18674:	strbcc	r0, [ip, r9]
   18678:	add	r0, r9, #1
   1867c:	cmp	r0, r5
   18680:	movcc	r1, #92	; 0x5c
   18684:	strbcc	r1, [ip, r0]
   18688:	add	r0, r9, #2
   1868c:	add	r9, r9, #3
   18690:	cmp	r0, r5
   18694:	movcc	r1, #39	; 0x27
   18698:	strbcc	r1, [ip, r0]
   1869c:	mov	r0, #0
   186a0:	str	r0, [fp, #-52]	; 0xffffffcc
   186a4:	mov	r0, #0
   186a8:	str	r0, [fp, #-56]	; 0xffffffc8
   186ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   186b0:	tst	r0, #1
   186b4:	beq	18404 <__assert_fail@plt+0x6f1c>
   186b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   186bc:	mov	r1, r8
   186c0:	cmp	r0, #0
   186c4:	mov	r0, r6
   186c8:	beq	1878c <__assert_fail@plt+0x72a4>
   186cc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   186d0:	tst	r2, #1
   186d4:	bne	18e34 <__assert_fail@plt+0x794c>
   186d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   186dc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   186e0:	subs	r2, r2, #2
   186e4:	movwne	r2, #1
   186e8:	orr	r2, r2, r3
   186ec:	tst	r2, #1
   186f0:	bne	1872c <__assert_fail@plt+0x7244>
   186f4:	cmp	r9, r5
   186f8:	movcc	r2, #39	; 0x27
   186fc:	strbcc	r2, [ip, r9]
   18700:	add	r2, r9, #1
   18704:	cmp	r2, r5
   18708:	movcc	r3, #36	; 0x24
   1870c:	strbcc	r3, [ip, r2]
   18710:	add	r2, r9, #2
   18714:	add	r9, r9, #3
   18718:	cmp	r2, r5
   1871c:	movcc	r3, #39	; 0x27
   18720:	strbcc	r3, [ip, r2]
   18724:	mov	r2, #1
   18728:	str	r2, [fp, #-52]	; 0xffffffcc
   1872c:	cmp	r9, r5
   18730:	movcc	r2, #92	; 0x5c
   18734:	strbcc	r2, [ip, r9]
   18738:	add	r9, r9, #1
   1873c:	b	187d4 <__assert_fail@plt+0x72ec>
   18740:	ldr	r0, [sp, #40]	; 0x28
   18744:	cmp	r0, #1
   18748:	bne	18848 <__assert_fail@plt+0x7360>
   1874c:	bl	11350 <__ctype_b_loc@plt>
   18750:	ldr	r0, [r0]
   18754:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18758:	mov	r1, #1
   1875c:	add	r0, r0, r6, lsl #1
   18760:	ldrb	r0, [r0, #1]
   18764:	ubfx	r8, r0, #6, #1
   18768:	b	18ba0 <__assert_fail@plt+0x76b8>
   1876c:	ldr	r1, [sp, #48]	; 0x30
   18770:	mov	r0, #0
   18774:	str	r0, [fp, #-56]	; 0xffffffc8
   18778:	mov	r0, #92	; 0x5c
   1877c:	cmp	r1, #0
   18780:	beq	187f4 <__assert_fail@plt+0x730c>
   18784:	mov	r6, #92	; 0x5c
   18788:	mov	r8, #0
   1878c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18790:	cmp	r0, #0
   18794:	bne	187cc <__assert_fail@plt+0x72e4>
   18798:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1879c:	tst	r0, #1
   187a0:	beq	187cc <__assert_fail@plt+0x72e4>
   187a4:	cmp	r9, r5
   187a8:	movcc	r0, #39	; 0x27
   187ac:	strbcc	r0, [ip, r9]
   187b0:	add	r0, r9, #1
   187b4:	add	r9, r9, #2
   187b8:	cmp	r0, r5
   187bc:	movcc	r1, #39	; 0x27
   187c0:	strbcc	r1, [ip, r0]
   187c4:	mov	r0, #0
   187c8:	str	r0, [fp, #-52]	; 0xffffffcc
   187cc:	mov	r1, r8
   187d0:	mov	r0, r6
   187d4:	cmp	r9, r5
   187d8:	and	r4, r4, r1
   187dc:	strbcc	r0, [ip, r9]
   187e0:	add	r9, r9, #1
   187e4:	add	sl, sl, #1
   187e8:	cmn	r7, #1
   187ec:	bne	180e4 <__assert_fail@plt+0x6bfc>
   187f0:	b	180f0 <__assert_fail@plt+0x6c08>
   187f4:	mov	r1, #0
   187f8:	mov	r8, #0
   187fc:	str	r1, [fp, #-56]	; 0xffffffc8
   18800:	ldr	r1, [sp, #88]	; 0x58
   18804:	tst	r1, #1
   18808:	mov	r1, #0
   1880c:	beq	183f8 <__assert_fail@plt+0x6f10>
   18810:	b	186cc <__assert_fail@plt+0x71e4>
   18814:	ldr	r0, [sp, #36]	; 0x24
   18818:	mov	r6, #0
   1881c:	mov	r8, #0
   18820:	cmp	r0, #0
   18824:	mov	r0, #0
   18828:	str	r0, [fp, #-56]	; 0xffffffc8
   1882c:	bne	187e4 <__assert_fail@plt+0x72fc>
   18830:	b	183f8 <__assert_fail@plt+0x6f10>
   18834:	mov	r8, #1
   18838:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1883c:	tst	r0, #1
   18840:	beq	18404 <__assert_fail@plt+0x6f1c>
   18844:	b	186b8 <__assert_fail@plt+0x71d0>
   18848:	mov	r0, #0
   1884c:	cmn	r7, #1
   18850:	str	r0, [fp, #-36]	; 0xffffffdc
   18854:	str	r0, [fp, #-40]	; 0xffffffd8
   18858:	bne	1886c <__assert_fail@plt+0x7384>
   1885c:	mov	r0, lr
   18860:	bl	11374 <strlen@plt>
   18864:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18868:	mov	r7, r0
   1886c:	ldr	r0, [sp, #44]	; 0x2c
   18870:	str	r4, [sp, #84]	; 0x54
   18874:	str	r5, [sp, #28]
   18878:	cmp	r0, #0
   1887c:	beq	18ad0 <__assert_fail@plt+0x75e8>
   18880:	ldr	r0, [sp, #80]	; 0x50
   18884:	mov	r8, #1
   18888:	mov	r5, #0
   1888c:	add	r0, r0, sl
   18890:	str	r0, [sp, #24]
   18894:	sub	r0, fp, #40	; 0x28
   18898:	mov	r3, r0
   1889c:	b	188d8 <__assert_fail@plt+0x73f0>
   188a0:	ldr	r5, [sp, #68]	; 0x44
   188a4:	add	r5, r0, r5
   188a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   188ac:	bl	112a8 <iswprint@plt>
   188b0:	cmp	r0, #0
   188b4:	sub	r4, fp, #40	; 0x28
   188b8:	movwne	r0, #1
   188bc:	and	r8, r8, r0
   188c0:	mov	r0, r4
   188c4:	bl	11260 <mbsinit@plt>
   188c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   188cc:	mov	r3, r4
   188d0:	cmp	r0, #0
   188d4:	bne	18b94 <__assert_fail@plt+0x76ac>
   188d8:	str	r5, [sp, #68]	; 0x44
   188dc:	add	r5, r5, sl
   188e0:	sub	r0, fp, #44	; 0x2c
   188e4:	add	r1, lr, r5
   188e8:	sub	r2, r7, r5
   188ec:	bl	1acd4 <__assert_fail@plt+0x97ec>
   188f0:	cmn	r0, #2
   188f4:	beq	18b54 <__assert_fail@plt+0x766c>
   188f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   188fc:	cmn	r0, #1
   18900:	beq	18b48 <__assert_fail@plt+0x7660>
   18904:	cmp	r0, #0
   18908:	beq	18b4c <__assert_fail@plt+0x7664>
   1890c:	cmp	r0, #2
   18910:	bcc	188a0 <__assert_fail@plt+0x73b8>
   18914:	ldr	r1, [sp, #68]	; 0x44
   18918:	ldr	r2, [sp, #24]
   1891c:	add	r1, r2, r1
   18920:	sub	r2, r0, #1
   18924:	ldrb	r3, [r1]
   18928:	sub	r3, r3, #91	; 0x5b
   1892c:	cmp	r3, #33	; 0x21
   18930:	bls	18950 <__assert_fail@plt+0x7468>
   18934:	add	r1, r1, #1
   18938:	subs	r2, r2, #1
   1893c:	beq	188a0 <__assert_fail@plt+0x73b8>
   18940:	ldrb	r3, [r1]
   18944:	sub	r3, r3, #91	; 0x5b
   18948:	cmp	r3, #33	; 0x21
   1894c:	bhi	18934 <__assert_fail@plt+0x744c>
   18950:	add	r5, pc, #0
   18954:	ldr	pc, [r5, r3, lsl #2]
   18958:	andeq	r8, r1, ip, ror #28
   1895c:	andeq	r8, r1, ip, ror #28
   18960:	andeq	r8, r1, r4, lsr r9
   18964:	andeq	r8, r1, ip, ror #28
   18968:	andeq	r8, r1, r4, lsr r9
   1896c:	andeq	r8, r1, ip, ror #28
   18970:	andeq	r8, r1, r4, lsr r9
   18974:	andeq	r8, r1, r4, lsr r9
   18978:	andeq	r8, r1, r4, lsr r9
   1897c:	andeq	r8, r1, r4, lsr r9
   18980:	andeq	r8, r1, r4, lsr r9
   18984:	andeq	r8, r1, r4, lsr r9
   18988:	andeq	r8, r1, r4, lsr r9
   1898c:	andeq	r8, r1, r4, lsr r9
   18990:	andeq	r8, r1, r4, lsr r9
   18994:	andeq	r8, r1, r4, lsr r9
   18998:	andeq	r8, r1, r4, lsr r9
   1899c:	andeq	r8, r1, r4, lsr r9
   189a0:	andeq	r8, r1, r4, lsr r9
   189a4:	andeq	r8, r1, r4, lsr r9
   189a8:	andeq	r8, r1, r4, lsr r9
   189ac:	andeq	r8, r1, r4, lsr r9
   189b0:	andeq	r8, r1, r4, lsr r9
   189b4:	andeq	r8, r1, r4, lsr r9
   189b8:	andeq	r8, r1, r4, lsr r9
   189bc:	andeq	r8, r1, r4, lsr r9
   189c0:	andeq	r8, r1, r4, lsr r9
   189c4:	andeq	r8, r1, r4, lsr r9
   189c8:	andeq	r8, r1, r4, lsr r9
   189cc:	andeq	r8, r1, r4, lsr r9
   189d0:	andeq	r8, r1, r4, lsr r9
   189d4:	andeq	r8, r1, r4, lsr r9
   189d8:	andeq	r8, r1, r4, lsr r9
   189dc:	andeq	r8, r1, ip, ror #28
   189e0:	mov	r9, r0
   189e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   189e8:	tst	r0, #1
   189ec:	beq	18404 <__assert_fail@plt+0x6f1c>
   189f0:	b	186b8 <__assert_fail@plt+0x71d0>
   189f4:	mov	r0, #0
   189f8:	str	r0, [fp, #-56]	; 0xffffffc8
   189fc:	ldr	r0, [sp, #32]
   18a00:	cmp	r0, #0
   18a04:	beq	18abc <__assert_fail@plt+0x75d4>
   18a08:	add	r0, sl, #2
   18a0c:	mov	r1, r7
   18a10:	cmp	r0, r7
   18a14:	bcs	18abc <__assert_fail@plt+0x75d4>
   18a18:	add	r1, sl, lr
   18a1c:	ldrb	r1, [r1, #1]
   18a20:	cmp	r1, #63	; 0x3f
   18a24:	bne	18abc <__assert_fail@plt+0x75d4>
   18a28:	ldrb	r8, [lr, r0]
   18a2c:	sub	r2, r8, #33	; 0x21
   18a30:	cmp	r2, #29
   18a34:	bhi	18abc <__assert_fail@plt+0x75d4>
   18a38:	mov	r1, r4
   18a3c:	movw	r4, #20929	; 0x51c1
   18a40:	mov	r3, #1
   18a44:	movt	r4, #14336	; 0x3800
   18a48:	tst	r4, r3, lsl r2
   18a4c:	beq	18d78 <__assert_fail@plt+0x7890>
   18a50:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18a54:	tst	r2, #1
   18a58:	bne	18e34 <__assert_fail@plt+0x794c>
   18a5c:	cmp	r9, r5
   18a60:	mov	r6, r8
   18a64:	mov	r4, r1
   18a68:	mov	sl, r0
   18a6c:	mov	r8, #0
   18a70:	movcc	r2, #63	; 0x3f
   18a74:	strbcc	r2, [ip, r9]
   18a78:	add	r2, r9, #1
   18a7c:	cmp	r2, r5
   18a80:	movcc	r3, #34	; 0x22
   18a84:	strbcc	r3, [ip, r2]
   18a88:	add	r2, r9, #2
   18a8c:	cmp	r2, r5
   18a90:	movcc	r3, #34	; 0x22
   18a94:	strbcc	r3, [ip, r2]
   18a98:	add	r2, r9, #3
   18a9c:	add	r9, r9, #4
   18aa0:	cmp	r2, r5
   18aa4:	movcc	r3, #63	; 0x3f
   18aa8:	strbcc	r3, [ip, r2]
   18aac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18ab0:	tst	r0, #1
   18ab4:	beq	18404 <__assert_fail@plt+0x6f1c>
   18ab8:	b	186b8 <__assert_fail@plt+0x71d0>
   18abc:	mov	r8, #0
   18ac0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18ac4:	tst	r0, #1
   18ac8:	beq	18404 <__assert_fail@plt+0x6f1c>
   18acc:	b	186b8 <__assert_fail@plt+0x71d0>
   18ad0:	mov	r8, #1
   18ad4:	mov	r5, #0
   18ad8:	sub	r4, fp, #40	; 0x28
   18adc:	str	r5, [sp, #68]	; 0x44
   18ae0:	add	r5, r5, sl
   18ae4:	sub	r0, fp, #44	; 0x2c
   18ae8:	mov	r3, r4
   18aec:	add	r1, lr, r5
   18af0:	sub	r2, r7, r5
   18af4:	bl	1acd4 <__assert_fail@plt+0x97ec>
   18af8:	cmn	r0, #2
   18afc:	beq	18b54 <__assert_fail@plt+0x766c>
   18b00:	cmn	r0, #1
   18b04:	beq	18b48 <__assert_fail@plt+0x7660>
   18b08:	ldr	r5, [sp, #68]	; 0x44
   18b0c:	cmp	r0, #0
   18b10:	beq	18b90 <__assert_fail@plt+0x76a8>
   18b14:	add	r5, r0, r5
   18b18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18b1c:	bl	112a8 <iswprint@plt>
   18b20:	cmp	r0, #0
   18b24:	sub	r4, fp, #40	; 0x28
   18b28:	movwne	r0, #1
   18b2c:	and	r8, r8, r0
   18b30:	mov	r0, r4
   18b34:	bl	11260 <mbsinit@plt>
   18b38:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18b3c:	cmp	r0, #0
   18b40:	beq	18adc <__assert_fail@plt+0x75f4>
   18b44:	b	18b94 <__assert_fail@plt+0x76ac>
   18b48:	mov	r8, #0
   18b4c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18b50:	b	18b88 <__assert_fail@plt+0x76a0>
   18b54:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18b58:	mov	r8, #0
   18b5c:	cmp	r5, r7
   18b60:	bcs	18b88 <__assert_fail@plt+0x76a0>
   18b64:	ldrb	r0, [lr, r5]
   18b68:	cmp	r0, #0
   18b6c:	beq	18b88 <__assert_fail@plt+0x76a0>
   18b70:	ldr	r0, [sp, #68]	; 0x44
   18b74:	add	r0, r0, #1
   18b78:	add	r5, r0, sl
   18b7c:	str	r0, [sp, #68]	; 0x44
   18b80:	cmp	r5, r7
   18b84:	bcc	18b64 <__assert_fail@plt+0x767c>
   18b88:	ldr	r5, [sp, #68]	; 0x44
   18b8c:	b	18b94 <__assert_fail@plt+0x76ac>
   18b90:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18b94:	mov	r1, r5
   18b98:	ldr	r5, [sp, #28]
   18b9c:	ldr	r4, [sp, #84]	; 0x54
   18ba0:	ldr	r0, [sp, #52]	; 0x34
   18ba4:	ldr	ip, [fp, #-84]	; 0xffffffac
   18ba8:	cmp	r1, #1
   18bac:	orr	r2, r8, r0
   18bb0:	mov	r0, r1
   18bb4:	bhi	18bc0 <__assert_fail@plt+0x76d8>
   18bb8:	tst	r2, #1
   18bbc:	bne	183f8 <__assert_fail@plt+0x6f10>
   18bc0:	add	r0, r0, sl
   18bc4:	str	r2, [sp, #84]	; 0x54
   18bc8:	str	r0, [fp, #-56]	; 0xffffffc8
   18bcc:	mov	r0, #0
   18bd0:	tst	r2, #1
   18bd4:	bne	18cb4 <__assert_fail@plt+0x77cc>
   18bd8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18bdc:	tst	r1, #1
   18be0:	bne	18e34 <__assert_fail@plt+0x794c>
   18be4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18be8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18bec:	subs	r2, r1, #2
   18bf0:	movwne	r2, #1
   18bf4:	orr	r2, r2, r0
   18bf8:	tst	r2, #1
   18bfc:	bne	18c38 <__assert_fail@plt+0x7750>
   18c00:	cmp	r9, r5
   18c04:	add	r2, r9, #1
   18c08:	mov	r0, #1
   18c0c:	movcc	r1, #39	; 0x27
   18c10:	str	r0, [fp, #-52]	; 0xffffffcc
   18c14:	strbcc	r1, [ip, r9]
   18c18:	cmp	r2, r5
   18c1c:	movcc	r1, #36	; 0x24
   18c20:	strbcc	r1, [ip, r2]
   18c24:	add	r2, r9, #2
   18c28:	add	r9, r9, #3
   18c2c:	cmp	r2, r5
   18c30:	movcc	r1, #39	; 0x27
   18c34:	strbcc	r1, [ip, r2]
   18c38:	cmp	r9, r5
   18c3c:	add	r2, r9, #1
   18c40:	movcc	r1, #92	; 0x5c
   18c44:	strbcc	r1, [ip, r9]
   18c48:	cmp	r2, r5
   18c4c:	bcs	18c60 <__assert_fail@plt+0x7778>
   18c50:	uxtb	r3, r6
   18c54:	mov	r1, #48	; 0x30
   18c58:	orr	r3, r1, r3, lsr #6
   18c5c:	strb	r3, [ip, r2]
   18c60:	add	r2, r9, #2
   18c64:	add	r9, r9, #3
   18c68:	cmp	r2, r5
   18c6c:	lsrcc	r3, r6, #3
   18c70:	movcc	r1, #6
   18c74:	bficc	r3, r1, #3, #29
   18c78:	mov	r1, #6
   18c7c:	bfi	r6, r1, #3, #29
   18c80:	strbcc	r3, [ip, r2]
   18c84:	mov	r2, #1
   18c88:	b	18ce8 <__assert_fail@plt+0x7800>
   18c8c:	ldr	r1, [sp, #80]	; 0x50
   18c90:	cmp	r9, r2
   18c94:	mov	r5, r2
   18c98:	ldr	r2, [sp, #84]	; 0x54
   18c9c:	strbcc	r6, [ip, r9]
   18ca0:	add	r9, r9, #1
   18ca4:	ldrb	r6, [r1, sl]
   18ca8:	mov	sl, r3
   18cac:	tst	r2, #1
   18cb0:	beq	18bd8 <__assert_fail@plt+0x76f0>
   18cb4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18cb8:	tst	r1, #1
   18cbc:	beq	18cdc <__assert_fail@plt+0x77f4>
   18cc0:	cmp	r9, r5
   18cc4:	mov	r2, r0
   18cc8:	movcc	r1, #92	; 0x5c
   18ccc:	strbcc	r1, [ip, r9]
   18cd0:	add	r9, r9, #1
   18cd4:	mov	r1, #0
   18cd8:	b	18ce4 <__assert_fail@plt+0x77fc>
   18cdc:	mov	r1, #0
   18ce0:	mov	r2, r0
   18ce4:	str	r1, [fp, #-48]	; 0xffffffd0
   18ce8:	mov	r0, r2
   18cec:	and	r1, r2, #1
   18cf0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18cf4:	add	r3, sl, #1
   18cf8:	cmp	r2, r3
   18cfc:	bls	18d5c <__assert_fail@plt+0x7874>
   18d00:	mov	r2, r5
   18d04:	ldr	r5, [fp, #-52]	; 0xffffffcc
   18d08:	cmp	r1, #0
   18d0c:	movwne	r1, #1
   18d10:	mvn	r5, r5
   18d14:	orr	r5, r5, r1
   18d18:	tst	r5, #1
   18d1c:	bne	18c8c <__assert_fail@plt+0x77a4>
   18d20:	cmp	r9, r2
   18d24:	movcc	r5, r4
   18d28:	movcc	r4, #39	; 0x27
   18d2c:	strbcc	r4, [ip, r9]
   18d30:	movcc	r4, r5
   18d34:	add	r5, r9, #1
   18d38:	add	r9, r9, #2
   18d3c:	cmp	r5, r2
   18d40:	movcc	r1, r4
   18d44:	movcc	r4, #39	; 0x27
   18d48:	strbcc	r4, [ip, r5]
   18d4c:	movcc	r4, r1
   18d50:	mov	r1, #0
   18d54:	str	r1, [fp, #-52]	; 0xffffffcc
   18d58:	b	18c8c <__assert_fail@plt+0x77a4>
   18d5c:	cmp	r1, #0
   18d60:	movwne	r1, #1
   18d64:	str	r1, [fp, #-56]	; 0xffffffc8
   18d68:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18d6c:	cmp	r0, #0
   18d70:	beq	18798 <__assert_fail@plt+0x72b0>
   18d74:	b	187cc <__assert_fail@plt+0x72e4>
   18d78:	mov	r8, #0
   18d7c:	mov	r4, r1
   18d80:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18d84:	tst	r0, #1
   18d88:	beq	18404 <__assert_fail@plt+0x6f1c>
   18d8c:	b	186b8 <__assert_fail@plt+0x71d0>
   18d90:	mov	r7, sl
   18d94:	b	18d9c <__assert_fail@plt+0x78b4>
   18d98:	mvn	r7, #0
   18d9c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18da0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18da4:	ldr	r2, [sp, #88]	; 0x58
   18da8:	eor	r0, r1, #2
   18dac:	orr	r0, r0, r9
   18db0:	clz	r0, r0
   18db4:	lsr	r0, r0, #5
   18db8:	tst	r3, r0
   18dbc:	bne	18e34 <__assert_fail@plt+0x794c>
   18dc0:	subs	r0, r1, #2
   18dc4:	movwne	r0, #1
   18dc8:	orr	r0, r3, r0
   18dcc:	tst	r0, #1
   18dd0:	ldreq	r0, [sp, #60]	; 0x3c
   18dd4:	eoreq	r0, r0, #1
   18dd8:	tsteq	r0, #1
   18ddc:	bne	18f10 <__assert_fail@plt+0x7a28>
   18de0:	tst	r4, #1
   18de4:	bne	18ed4 <__assert_fail@plt+0x79ec>
   18de8:	ldr	r6, [sp, #56]	; 0x38
   18dec:	mov	r8, #0
   18df0:	cmp	r6, #0
   18df4:	beq	18f0c <__assert_fail@plt+0x7a24>
   18df8:	mov	r1, #0
   18dfc:	mov	r4, #2
   18e00:	cmp	r5, #0
   18e04:	mov	r0, r2
   18e08:	mov	r3, #0
   18e0c:	str	r1, [sp, #84]	; 0x54
   18e10:	beq	17c58 <__assert_fail@plt+0x6770>
   18e14:	b	18f10 <__assert_fail@plt+0x7a28>
   18e18:	movw	r0, #49814	; 0xc296
   18e1c:	movt	r0, #1
   18e20:	str	r0, [sp, #76]	; 0x4c
   18e24:	mov	r9, #0
   18e28:	tst	r8, #1
   18e2c:	beq	17ef0 <__assert_fail@plt+0x6a08>
   18e30:	b	18030 <__assert_fail@plt+0x6b48>
   18e34:	ldr	r1, [sp, #88]	; 0x58
   18e38:	mov	r0, #2
   18e3c:	tst	r1, #1
   18e40:	movwne	r0, #4
   18e44:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18e48:	ldr	r1, [fp, #12]
   18e4c:	cmp	r2, #2
   18e50:	moveq	r2, r0
   18e54:	b	18e8c <__assert_fail@plt+0x79a4>
   18e58:	ldr	ip, [fp, #-84]	; 0xffffffac
   18e5c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18e60:	ldr	r1, [fp, #12]
   18e64:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18e68:	b	18e8c <__assert_fail@plt+0x79a4>
   18e6c:	ldr	r1, [sp, #88]	; 0x58
   18e70:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18e74:	ldr	r5, [sp, #28]
   18e78:	mov	r0, #2
   18e7c:	tst	r1, #1
   18e80:	ldr	r1, [fp, #12]
   18e84:	movwne	r0, #4
   18e88:	mov	r2, r0
   18e8c:	mov	r0, #0
   18e90:	bic	r1, r1, #2
   18e94:	str	r2, [sp]
   18e98:	mov	r2, lr
   18e9c:	str	r0, [sp, #8]
   18ea0:	ldr	r0, [sp, #72]	; 0x48
   18ea4:	str	r1, [sp, #4]
   18ea8:	mov	r1, r5
   18eac:	str	r0, [sp, #12]
   18eb0:	ldr	r0, [sp, #76]	; 0x4c
   18eb4:	str	r0, [sp, #16]
   18eb8:	mov	r0, ip
   18ebc:	mov	r3, r7
   18ec0:	bl	17bcc <__assert_fail@plt+0x66e4>
   18ec4:	mov	r9, r0
   18ec8:	mov	r0, r9
   18ecc:	sub	sp, fp, #28
   18ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ed4:	mov	r0, #5
   18ed8:	ldr	r1, [sp, #56]	; 0x38
   18edc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18ee0:	str	r0, [sp]
   18ee4:	ldr	r0, [fp, #12]
   18ee8:	str	r0, [sp, #4]
   18eec:	ldr	r0, [fp, #16]
   18ef0:	str	r0, [sp, #8]
   18ef4:	ldr	r0, [sp, #72]	; 0x48
   18ef8:	str	r0, [sp, #12]
   18efc:	ldr	r0, [sp, #76]	; 0x4c
   18f00:	str	r0, [sp, #16]
   18f04:	ldr	r0, [fp, #-84]	; 0xffffffac
   18f08:	b	18ebc <__assert_fail@plt+0x79d4>
   18f0c:	mov	r3, #0
   18f10:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18f14:	cmp	r1, #0
   18f18:	beq	18f54 <__assert_fail@plt+0x7a6c>
   18f1c:	ldr	r2, [fp, #-84]	; 0xffffffac
   18f20:	tst	r3, #1
   18f24:	bne	18f58 <__assert_fail@plt+0x7a70>
   18f28:	ldrb	r0, [r1]
   18f2c:	cmp	r0, #0
   18f30:	beq	18f58 <__assert_fail@plt+0x7a70>
   18f34:	add	r1, r1, #1
   18f38:	cmp	r9, r5
   18f3c:	strbcc	r0, [r2, r9]
   18f40:	add	r9, r9, #1
   18f44:	ldrb	r0, [r1], #1
   18f48:	cmp	r0, #0
   18f4c:	bne	18f38 <__assert_fail@plt+0x7a50>
   18f50:	b	18f58 <__assert_fail@plt+0x7a70>
   18f54:	ldr	r2, [fp, #-84]	; 0xffffffac
   18f58:	cmp	r9, r5
   18f5c:	movcc	r0, #0
   18f60:	strbcc	r0, [r2, r9]
   18f64:	mov	r0, r9
   18f68:	sub	sp, fp, #28
   18f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f70:	mov	r0, #4
   18f74:	b	18e44 <__assert_fail@plt+0x795c>
   18f78:	bl	114a0 <abort@plt>
   18f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f80:	add	fp, sp, #28
   18f84:	sub	sp, sp, #28
   18f88:	movw	r5, #53696	; 0xd1c0
   18f8c:	cmp	r2, #0
   18f90:	mov	r4, r1
   18f94:	mov	r7, r0
   18f98:	str	r0, [sp, #20]
   18f9c:	movt	r5, #2
   18fa0:	movne	r5, r2
   18fa4:	bl	1138c <__errno_location@plt>
   18fa8:	mov	sl, r0
   18fac:	ldr	r2, [r5, #40]	; 0x28
   18fb0:	ldr	r3, [r5, #44]	; 0x2c
   18fb4:	ldm	r5, {r0, r1}
   18fb8:	orr	r8, r1, #1
   18fbc:	add	r9, r5, #8
   18fc0:	mov	r1, #0
   18fc4:	ldr	r6, [sl]
   18fc8:	stm	sp, {r0, r8, r9}
   18fcc:	mov	r0, #0
   18fd0:	str	r2, [sp, #12]
   18fd4:	str	r3, [sp, #16]
   18fd8:	mov	r2, r7
   18fdc:	mov	r3, r4
   18fe0:	str	r6, [sp, #24]
   18fe4:	mov	r6, r4
   18fe8:	bl	17bcc <__assert_fail@plt+0x66e4>
   18fec:	add	r7, r0, #1
   18ff0:	mov	r0, r7
   18ff4:	bl	1a14c <__assert_fail@plt+0x8c64>
   18ff8:	mov	r4, r0
   18ffc:	ldr	r0, [r5]
   19000:	ldr	r2, [r5, #44]	; 0x2c
   19004:	ldr	r1, [r5, #40]	; 0x28
   19008:	mov	r3, r6
   1900c:	stm	sp, {r0, r8, r9}
   19010:	str	r2, [sp, #16]
   19014:	ldr	r2, [sp, #20]
   19018:	str	r1, [sp, #12]
   1901c:	mov	r0, r4
   19020:	mov	r1, r7
   19024:	bl	17bcc <__assert_fail@plt+0x66e4>
   19028:	ldr	r0, [sp, #24]
   1902c:	str	r0, [sl]
   19030:	mov	r0, r4
   19034:	sub	sp, fp, #28
   19038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1903c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19040:	add	fp, sp, #28
   19044:	sub	sp, sp, #36	; 0x24
   19048:	movw	r8, #53696	; 0xd1c0
   1904c:	cmp	r3, #0
   19050:	mov	r4, r2
   19054:	str	r2, [sp, #24]
   19058:	mov	r5, r1
   1905c:	mov	r6, r0
   19060:	str	r0, [sp, #20]
   19064:	movt	r8, #2
   19068:	movne	r8, r3
   1906c:	bl	1138c <__errno_location@plt>
   19070:	str	r0, [sp, #28]
   19074:	ldr	r1, [r8, #40]	; 0x28
   19078:	ldr	r2, [r8, #44]	; 0x2c
   1907c:	ldr	r7, [r0]
   19080:	cmp	r4, #0
   19084:	add	sl, r8, #8
   19088:	mov	r0, #0
   1908c:	ldm	r8, {r3, r9}
   19090:	orreq	r9, r9, #1
   19094:	stm	sp, {r3, r9, sl}
   19098:	str	r1, [sp, #12]
   1909c:	str	r2, [sp, #16]
   190a0:	mov	r1, #0
   190a4:	mov	r2, r6
   190a8:	mov	r3, r5
   190ac:	str	r7, [sp, #32]
   190b0:	mov	r7, r5
   190b4:	bl	17bcc <__assert_fail@plt+0x66e4>
   190b8:	add	r4, r0, #1
   190bc:	mov	r5, r0
   190c0:	mov	r0, r4
   190c4:	bl	1a14c <__assert_fail@plt+0x8c64>
   190c8:	mov	r6, r0
   190cc:	ldr	r0, [r8]
   190d0:	ldr	r2, [r8, #44]	; 0x2c
   190d4:	ldr	r1, [r8, #40]	; 0x28
   190d8:	mov	r3, r7
   190dc:	stm	sp, {r0, r9, sl}
   190e0:	str	r2, [sp, #16]
   190e4:	ldr	r2, [sp, #20]
   190e8:	str	r1, [sp, #12]
   190ec:	mov	r0, r6
   190f0:	mov	r1, r4
   190f4:	bl	17bcc <__assert_fail@plt+0x66e4>
   190f8:	ldr	r0, [sp, #24]
   190fc:	ldr	r1, [sp, #32]
   19100:	ldr	r2, [sp, #28]
   19104:	cmp	r0, #0
   19108:	str	r1, [r2]
   1910c:	strne	r5, [r0]
   19110:	mov	r0, r6
   19114:	sub	sp, fp, #28
   19118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1911c:	push	{r4, r5, r6, r7, fp, lr}
   19120:	add	fp, sp, #16
   19124:	movw	r4, #53608	; 0xd168
   19128:	movt	r4, #2
   1912c:	ldrd	r6, [r4]
   19130:	cmp	r7, #2
   19134:	blt	19160 <__assert_fail@plt+0x7c78>
   19138:	add	r5, r6, #12
   1913c:	mov	r7, #0
   19140:	ldr	r0, [r5, r7, lsl #3]
   19144:	bl	13af8 <__assert_fail@plt+0x2610>
   19148:	ldr	r1, [r4, #4]
   1914c:	add	r2, r7, #2
   19150:	add	r0, r7, #1
   19154:	mov	r7, r0
   19158:	cmp	r2, r1
   1915c:	blt	19140 <__assert_fail@plt+0x7c58>
   19160:	ldr	r0, [r6, #4]
   19164:	movw	r5, #53744	; 0xd1f0
   19168:	movt	r5, #2
   1916c:	cmp	r0, r5
   19170:	beq	19184 <__assert_fail@plt+0x7c9c>
   19174:	bl	13af8 <__assert_fail@plt+0x2610>
   19178:	mov	r0, #256	; 0x100
   1917c:	str	r0, [r4, #8]
   19180:	str	r5, [r4, #12]
   19184:	add	r5, r4, #8
   19188:	cmp	r6, r5
   1918c:	beq	1919c <__assert_fail@plt+0x7cb4>
   19190:	mov	r0, r6
   19194:	bl	13af8 <__assert_fail@plt+0x2610>
   19198:	str	r5, [r4]
   1919c:	mov	r0, #1
   191a0:	str	r0, [r4, #4]
   191a4:	pop	{r4, r5, r6, r7, fp, pc}
   191a8:	movw	r3, #53696	; 0xd1c0
   191ac:	mvn	r2, #0
   191b0:	movt	r3, #2
   191b4:	b	191b8 <__assert_fail@plt+0x7cd0>
   191b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191bc:	add	fp, sp, #28
   191c0:	sub	sp, sp, #44	; 0x2c
   191c4:	mov	r7, r3
   191c8:	str	r2, [sp, #36]	; 0x24
   191cc:	str	r1, [sp, #32]
   191d0:	mov	r5, r0
   191d4:	bl	1138c <__errno_location@plt>
   191d8:	cmp	r5, #0
   191dc:	bmi	19344 <__assert_fail@plt+0x7e5c>
   191e0:	cmn	r5, #-2147483647	; 0x80000001
   191e4:	beq	19344 <__assert_fail@plt+0x7e5c>
   191e8:	movw	r8, #53608	; 0xd168
   191ec:	mov	r4, r0
   191f0:	ldr	r0, [r0]
   191f4:	movt	r8, #2
   191f8:	str	r4, [sp, #28]
   191fc:	ldr	r1, [r8, #4]
   19200:	ldr	r6, [r8]
   19204:	str	r0, [sp, #24]
   19208:	cmp	r1, r5
   1920c:	ble	19218 <__assert_fail@plt+0x7d30>
   19210:	mov	sl, r6
   19214:	b	19280 <__assert_fail@plt+0x7d98>
   19218:	mov	r0, #8
   1921c:	add	r9, r8, #8
   19220:	str	r1, [fp, #-32]	; 0xffffffe0
   19224:	sub	r1, r5, r1
   19228:	mvn	r3, #-2147483648	; 0x80000000
   1922c:	str	r0, [sp]
   19230:	subs	r0, r6, r9
   19234:	add	r2, r1, #1
   19238:	sub	r1, fp, #32
   1923c:	movne	r0, r6
   19240:	bl	1a34c <__assert_fail@plt+0x8e64>
   19244:	mov	sl, r0
   19248:	cmp	r6, r9
   1924c:	str	r0, [r8]
   19250:	bne	1925c <__assert_fail@plt+0x7d74>
   19254:	ldrd	r0, [r8, #8]
   19258:	stm	sl, {r0, r1}
   1925c:	ldr	r1, [r8, #4]
   19260:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19264:	add	r0, sl, r1, lsl #3
   19268:	sub	r1, r2, r1
   1926c:	lsl	r2, r1, #3
   19270:	mov	r1, #0
   19274:	bl	113a4 <memset@plt>
   19278:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1927c:	str	r0, [r8, #4]
   19280:	mov	r9, sl
   19284:	ldm	r7, {r0, r1}
   19288:	orr	r8, r1, #1
   1928c:	add	r1, r7, #8
   19290:	ldr	r2, [r7, #40]	; 0x28
   19294:	ldr	r3, [r7, #44]	; 0x2c
   19298:	ldr	r6, [r9, r5, lsl #3]!
   1929c:	str	r1, [sp, #20]
   192a0:	ldr	r4, [r9, #4]!
   192a4:	stm	sp, {r0, r8}
   192a8:	add	r0, sp, #8
   192ac:	stm	r0, {r1, r2, r3}
   192b0:	ldr	r2, [sp, #32]
   192b4:	ldr	r3, [sp, #36]	; 0x24
   192b8:	mov	r1, r6
   192bc:	mov	r0, r4
   192c0:	bl	17bcc <__assert_fail@plt+0x66e4>
   192c4:	cmp	r6, r0
   192c8:	bhi	1932c <__assert_fail@plt+0x7e44>
   192cc:	add	r6, r0, #1
   192d0:	movw	r0, #53744	; 0xd1f0
   192d4:	movt	r0, #2
   192d8:	str	r6, [sl, r5, lsl #3]
   192dc:	cmp	r4, r0
   192e0:	beq	192ec <__assert_fail@plt+0x7e04>
   192e4:	mov	r0, r4
   192e8:	bl	13af8 <__assert_fail@plt+0x2610>
   192ec:	mov	r0, r6
   192f0:	bl	1a14c <__assert_fail@plt+0x8c64>
   192f4:	str	r0, [r9]
   192f8:	mov	r4, r0
   192fc:	add	r3, sp, #8
   19300:	ldr	r0, [r7]
   19304:	ldr	r1, [r7, #40]	; 0x28
   19308:	ldr	r2, [r7, #44]	; 0x2c
   1930c:	stm	sp, {r0, r8}
   19310:	ldr	r0, [sp, #20]
   19314:	stm	r3, {r0, r1, r2}
   19318:	ldr	r2, [sp, #32]
   1931c:	ldr	r3, [sp, #36]	; 0x24
   19320:	mov	r0, r4
   19324:	mov	r1, r6
   19328:	bl	17bcc <__assert_fail@plt+0x66e4>
   1932c:	ldr	r1, [sp, #24]
   19330:	ldr	r0, [sp, #28]
   19334:	str	r1, [r0]
   19338:	mov	r0, r4
   1933c:	sub	sp, fp, #28
   19340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19344:	bl	114a0 <abort@plt>
   19348:	movw	r3, #53696	; 0xd1c0
   1934c:	movt	r3, #2
   19350:	b	191b8 <__assert_fail@plt+0x7cd0>
   19354:	movw	r3, #53696	; 0xd1c0
   19358:	mov	r1, r0
   1935c:	mov	r0, #0
   19360:	mvn	r2, #0
   19364:	movt	r3, #2
   19368:	b	191b8 <__assert_fail@plt+0x7cd0>
   1936c:	movw	r3, #53696	; 0xd1c0
   19370:	mov	r2, r1
   19374:	mov	r1, r0
   19378:	mov	r0, #0
   1937c:	movt	r3, #2
   19380:	b	191b8 <__assert_fail@plt+0x7cd0>
   19384:	push	{fp, lr}
   19388:	mov	fp, sp
   1938c:	sub	sp, sp, #48	; 0x30
   19390:	vmov.i32	q8, #0	; 0x00000000
   19394:	mov	ip, #32
   19398:	mov	r3, sp
   1939c:	mov	lr, r2
   193a0:	cmp	r1, #10
   193a4:	add	r2, r3, #16
   193a8:	vst1.64	{d16-d17}, [r3], ip
   193ac:	vst1.64	{d16-d17}, [r2]
   193b0:	vst1.64	{d16-d17}, [r3]
   193b4:	beq	193d4 <__assert_fail@plt+0x7eec>
   193b8:	str	r1, [sp]
   193bc:	mov	r3, sp
   193c0:	mov	r1, lr
   193c4:	mvn	r2, #0
   193c8:	bl	191b8 <__assert_fail@plt+0x7cd0>
   193cc:	mov	sp, fp
   193d0:	pop	{fp, pc}
   193d4:	bl	114a0 <abort@plt>
   193d8:	push	{r4, sl, fp, lr}
   193dc:	add	fp, sp, #8
   193e0:	sub	sp, sp, #48	; 0x30
   193e4:	vmov.i32	q8, #0	; 0x00000000
   193e8:	mov	ip, r3
   193ec:	mov	r3, sp
   193f0:	mov	lr, #32
   193f4:	cmp	r1, #10
   193f8:	add	r4, r3, #16
   193fc:	vst1.64	{d16-d17}, [r3], lr
   19400:	vst1.64	{d16-d17}, [r4]
   19404:	vst1.64	{d16-d17}, [r3]
   19408:	beq	19428 <__assert_fail@plt+0x7f40>
   1940c:	str	r1, [sp]
   19410:	mov	r1, r2
   19414:	mov	r3, sp
   19418:	mov	r2, ip
   1941c:	bl	191b8 <__assert_fail@plt+0x7cd0>
   19420:	sub	sp, fp, #8
   19424:	pop	{r4, sl, fp, pc}
   19428:	bl	114a0 <abort@plt>
   1942c:	push	{fp, lr}
   19430:	mov	fp, sp
   19434:	sub	sp, sp, #48	; 0x30
   19438:	vmov.i32	q8, #0	; 0x00000000
   1943c:	mov	r3, sp
   19440:	mov	ip, #32
   19444:	cmp	r0, #10
   19448:	add	r2, r3, #16
   1944c:	vst1.64	{d16-d17}, [r3], ip
   19450:	vst1.64	{d16-d17}, [r2]
   19454:	vst1.64	{d16-d17}, [r3]
   19458:	beq	19478 <__assert_fail@plt+0x7f90>
   1945c:	str	r0, [sp]
   19460:	mov	r3, sp
   19464:	mov	r0, #0
   19468:	mvn	r2, #0
   1946c:	bl	191b8 <__assert_fail@plt+0x7cd0>
   19470:	mov	sp, fp
   19474:	pop	{fp, pc}
   19478:	bl	114a0 <abort@plt>
   1947c:	push	{fp, lr}
   19480:	mov	fp, sp
   19484:	sub	sp, sp, #48	; 0x30
   19488:	vmov.i32	q8, #0	; 0x00000000
   1948c:	mov	r3, sp
   19490:	mov	ip, #32
   19494:	cmp	r0, #10
   19498:	add	lr, r3, #16
   1949c:	vst1.64	{d16-d17}, [r3], ip
   194a0:	vst1.64	{d16-d17}, [lr]
   194a4:	vst1.64	{d16-d17}, [r3]
   194a8:	beq	194c4 <__assert_fail@plt+0x7fdc>
   194ac:	str	r0, [sp]
   194b0:	mov	r3, sp
   194b4:	mov	r0, #0
   194b8:	bl	191b8 <__assert_fail@plt+0x7cd0>
   194bc:	mov	sp, fp
   194c0:	pop	{fp, pc}
   194c4:	bl	114a0 <abort@plt>
   194c8:	push	{r4, sl, fp, lr}
   194cc:	add	fp, sp, #8
   194d0:	sub	sp, sp, #48	; 0x30
   194d4:	mov	lr, r0
   194d8:	movw	r0, #53696	; 0xd1c0
   194dc:	mov	ip, r1
   194e0:	mov	r1, #32
   194e4:	mov	r4, #1
   194e8:	movt	r0, #2
   194ec:	add	r3, r0, #16
   194f0:	vld1.64	{d16-d17}, [r0], r1
   194f4:	vld1.64	{d20-d21}, [r0]
   194f8:	vld1.64	{d18-d19}, [r3]
   194fc:	mov	r3, sp
   19500:	add	r0, r3, #32
   19504:	add	r1, r3, #16
   19508:	vst1.64	{d20-d21}, [r0]
   1950c:	mov	r0, #28
   19510:	vst1.64	{d18-d19}, [r1]
   19514:	mov	r1, r3
   19518:	and	r0, r0, r2, lsr #3
   1951c:	and	r2, r2, #31
   19520:	vst1.64	{d16-d17}, [r1], r0
   19524:	ldr	r0, [r1, #8]
   19528:	bic	r4, r4, r0, lsr r2
   1952c:	eor	r0, r0, r4, lsl r2
   19530:	mov	r2, ip
   19534:	str	r0, [r1, #8]
   19538:	mov	r0, #0
   1953c:	mov	r1, lr
   19540:	bl	191b8 <__assert_fail@plt+0x7cd0>
   19544:	sub	sp, fp, #8
   19548:	pop	{r4, sl, fp, pc}
   1954c:	push	{fp, lr}
   19550:	mov	fp, sp
   19554:	sub	sp, sp, #48	; 0x30
   19558:	mov	ip, r0
   1955c:	movw	r0, #53696	; 0xd1c0
   19560:	mov	r2, #32
   19564:	movt	r0, #2
   19568:	add	r3, r0, #16
   1956c:	vld1.64	{d16-d17}, [r0], r2
   19570:	vld1.64	{d20-d21}, [r0]
   19574:	vld1.64	{d18-d19}, [r3]
   19578:	mov	r3, sp
   1957c:	add	r0, r3, #32
   19580:	add	r2, r3, #16
   19584:	vst1.64	{d20-d21}, [r0]
   19588:	mov	r0, #28
   1958c:	vst1.64	{d18-d19}, [r2]
   19590:	mov	r2, r3
   19594:	and	r0, r0, r1, lsr #3
   19598:	and	r1, r1, #31
   1959c:	vst1.64	{d16-d17}, [r2], r0
   195a0:	mov	r0, #1
   195a4:	ldr	lr, [r2, #8]
   195a8:	bic	r0, r0, lr, lsr r1
   195ac:	eor	r0, lr, r0, lsl r1
   195b0:	mov	r1, ip
   195b4:	str	r0, [r2, #8]
   195b8:	mov	r0, #0
   195bc:	mvn	r2, #0
   195c0:	bl	191b8 <__assert_fail@plt+0x7cd0>
   195c4:	mov	sp, fp
   195c8:	pop	{fp, pc}
   195cc:	push	{fp, lr}
   195d0:	mov	fp, sp
   195d4:	sub	sp, sp, #48	; 0x30
   195d8:	mov	r1, r0
   195dc:	movw	r0, #53696	; 0xd1c0
   195e0:	mov	r3, #32
   195e4:	movt	r0, #2
   195e8:	add	r2, r0, #16
   195ec:	vld1.64	{d16-d17}, [r0], r3
   195f0:	mov	r3, sp
   195f4:	vld1.64	{d18-d19}, [r2]
   195f8:	vld1.64	{d20-d21}, [r0]
   195fc:	add	r2, r3, #16
   19600:	add	r0, r3, #32
   19604:	vst1.64	{d18-d19}, [r2]
   19608:	vst1.64	{d20-d21}, [r0]
   1960c:	mov	r0, #12
   19610:	mov	r2, r3
   19614:	vst1.64	{d16-d17}, [r2], r0
   19618:	ldr	r0, [r2]
   1961c:	orr	r0, r0, #67108864	; 0x4000000
   19620:	str	r0, [r2]
   19624:	mov	r0, #0
   19628:	mvn	r2, #0
   1962c:	bl	191b8 <__assert_fail@plt+0x7cd0>
   19630:	mov	sp, fp
   19634:	pop	{fp, pc}
   19638:	push	{fp, lr}
   1963c:	mov	fp, sp
   19640:	sub	sp, sp, #48	; 0x30
   19644:	mov	ip, r1
   19648:	mov	r1, r0
   1964c:	movw	r0, #53696	; 0xd1c0
   19650:	mov	r2, #32
   19654:	movt	r0, #2
   19658:	add	r3, r0, #16
   1965c:	vld1.64	{d16-d17}, [r0], r2
   19660:	vld1.64	{d18-d19}, [r3]
   19664:	vld1.64	{d20-d21}, [r0]
   19668:	mov	r3, sp
   1966c:	add	r2, r3, #16
   19670:	add	r0, r3, #32
   19674:	vst1.64	{d18-d19}, [r2]
   19678:	vst1.64	{d20-d21}, [r0]
   1967c:	mov	r0, #12
   19680:	mov	r2, r3
   19684:	vst1.64	{d16-d17}, [r2], r0
   19688:	ldr	r0, [r2]
   1968c:	orr	r0, r0, #67108864	; 0x4000000
   19690:	str	r0, [r2]
   19694:	mov	r0, #0
   19698:	mov	r2, ip
   1969c:	bl	191b8 <__assert_fail@plt+0x7cd0>
   196a0:	mov	sp, fp
   196a4:	pop	{fp, pc}
   196a8:	push	{r4, sl, fp, lr}
   196ac:	add	fp, sp, #8
   196b0:	sub	sp, sp, #96	; 0x60
   196b4:	vmov.i32	q8, #0	; 0x00000000
   196b8:	mov	ip, r2
   196bc:	mov	r2, sp
   196c0:	mov	r4, #28
   196c4:	cmp	r1, #10
   196c8:	mov	r3, r2
   196cc:	add	lr, r2, #16
   196d0:	vst1.64	{d16-d17}, [r3], r4
   196d4:	vst1.64	{d16-d17}, [lr]
   196d8:	vst1.32	{d16-d17}, [r3]
   196dc:	beq	1972c <__assert_fail@plt+0x8244>
   196e0:	vld1.64	{d16-d17}, [r2], r4
   196e4:	vld1.64	{d18-d19}, [lr]
   196e8:	add	r3, sp, #48	; 0x30
   196ec:	vld1.32	{d20-d21}, [r2]
   196f0:	add	r2, r3, #20
   196f4:	add	r4, r3, #4
   196f8:	vst1.32	{d18-d19}, [r2]
   196fc:	add	r2, r3, #32
   19700:	vst1.32	{d16-d17}, [r4]
   19704:	vst1.32	{d20-d21}, [r2]
   19708:	str	r1, [sp, #48]	; 0x30
   1970c:	mvn	r2, #0
   19710:	ldr	r1, [sp, #60]	; 0x3c
   19714:	orr	r1, r1, #67108864	; 0x4000000
   19718:	str	r1, [sp, #60]	; 0x3c
   1971c:	mov	r1, ip
   19720:	bl	191b8 <__assert_fail@plt+0x7cd0>
   19724:	sub	sp, fp, #8
   19728:	pop	{r4, sl, fp, pc}
   1972c:	bl	114a0 <abort@plt>
   19730:	push	{r4, r5, r6, sl, fp, lr}
   19734:	add	fp, sp, #16
   19738:	sub	sp, sp, #48	; 0x30
   1973c:	mov	ip, r3
   19740:	movw	r3, #53696	; 0xd1c0
   19744:	mov	r6, #32
   19748:	cmp	r1, #0
   1974c:	mov	r4, sp
   19750:	movt	r3, #2
   19754:	cmpne	r2, #0
   19758:	add	r5, r4, #16
   1975c:	add	lr, r3, #16
   19760:	vld1.64	{d16-d17}, [r3], r6
   19764:	vld1.64	{d18-d19}, [lr]
   19768:	vld1.64	{d20-d21}, [r3]
   1976c:	mov	r3, #10
   19770:	vst1.64	{d16-d17}, [r4], r6
   19774:	vst1.64	{d18-d19}, [r5]
   19778:	vst1.64	{d20-d21}, [r4]
   1977c:	str	r3, [sp]
   19780:	bne	19788 <__assert_fail@plt+0x82a0>
   19784:	bl	114a0 <abort@plt>
   19788:	str	r2, [sp, #44]	; 0x2c
   1978c:	str	r1, [sp, #40]	; 0x28
   19790:	mov	r3, sp
   19794:	mov	r1, ip
   19798:	mvn	r2, #0
   1979c:	bl	191b8 <__assert_fail@plt+0x7cd0>
   197a0:	sub	sp, fp, #16
   197a4:	pop	{r4, r5, r6, sl, fp, pc}
   197a8:	push	{r4, r5, r6, sl, fp, lr}
   197ac:	add	fp, sp, #16
   197b0:	sub	sp, sp, #48	; 0x30
   197b4:	mov	lr, r3
   197b8:	movw	r3, #53696	; 0xd1c0
   197bc:	mov	r6, #32
   197c0:	cmp	r1, #0
   197c4:	mov	r4, sp
   197c8:	movt	r3, #2
   197cc:	cmpne	r2, #0
   197d0:	add	r5, r4, #16
   197d4:	add	ip, r3, #16
   197d8:	vld1.64	{d16-d17}, [r3], r6
   197dc:	vld1.64	{d18-d19}, [ip]
   197e0:	vld1.64	{d20-d21}, [r3]
   197e4:	mov	r3, #10
   197e8:	vst1.64	{d16-d17}, [r4], r6
   197ec:	vst1.64	{d18-d19}, [r5]
   197f0:	vst1.64	{d20-d21}, [r4]
   197f4:	str	r3, [sp]
   197f8:	bne	19800 <__assert_fail@plt+0x8318>
   197fc:	bl	114a0 <abort@plt>
   19800:	ldr	ip, [fp, #8]
   19804:	str	r2, [sp, #44]	; 0x2c
   19808:	str	r1, [sp, #40]	; 0x28
   1980c:	mov	r3, sp
   19810:	mov	r1, lr
   19814:	mov	r2, ip
   19818:	bl	191b8 <__assert_fail@plt+0x7cd0>
   1981c:	sub	sp, fp, #16
   19820:	pop	{r4, r5, r6, sl, fp, pc}
   19824:	push	{r4, sl, fp, lr}
   19828:	add	fp, sp, #8
   1982c:	sub	sp, sp, #48	; 0x30
   19830:	movw	r3, #53696	; 0xd1c0
   19834:	mov	lr, #32
   19838:	mov	ip, r2
   1983c:	cmp	r0, #0
   19840:	movt	r3, #2
   19844:	cmpne	r1, #0
   19848:	add	r2, r3, #16
   1984c:	vld1.64	{d16-d17}, [r3], lr
   19850:	vld1.64	{d20-d21}, [r3]
   19854:	vld1.64	{d18-d19}, [r2]
   19858:	mov	r2, sp
   1985c:	add	r4, r2, #16
   19860:	vst1.64	{d16-d17}, [r2], lr
   19864:	vst1.64	{d20-d21}, [r2]
   19868:	mov	r2, #10
   1986c:	vst1.64	{d18-d19}, [r4]
   19870:	str	r2, [sp]
   19874:	bne	1987c <__assert_fail@plt+0x8394>
   19878:	bl	114a0 <abort@plt>
   1987c:	str	r1, [sp, #44]	; 0x2c
   19880:	str	r0, [sp, #40]	; 0x28
   19884:	mov	r3, sp
   19888:	mov	r0, #0
   1988c:	mov	r1, ip
   19890:	mvn	r2, #0
   19894:	bl	191b8 <__assert_fail@plt+0x7cd0>
   19898:	sub	sp, fp, #8
   1989c:	pop	{r4, sl, fp, pc}
   198a0:	push	{r4, r5, fp, lr}
   198a4:	add	fp, sp, #8
   198a8:	sub	sp, sp, #48	; 0x30
   198ac:	mov	ip, r3
   198b0:	movw	r3, #53696	; 0xd1c0
   198b4:	mov	r4, #32
   198b8:	mov	lr, r2
   198bc:	cmp	r0, #0
   198c0:	movt	r3, #2
   198c4:	cmpne	r1, #0
   198c8:	add	r2, r3, #16
   198cc:	vld1.64	{d16-d17}, [r3], r4
   198d0:	vld1.64	{d20-d21}, [r3]
   198d4:	vld1.64	{d18-d19}, [r2]
   198d8:	mov	r2, sp
   198dc:	add	r5, r2, #16
   198e0:	vst1.64	{d16-d17}, [r2], r4
   198e4:	vst1.64	{d20-d21}, [r2]
   198e8:	mov	r2, #10
   198ec:	vst1.64	{d18-d19}, [r5]
   198f0:	str	r2, [sp]
   198f4:	bne	198fc <__assert_fail@plt+0x8414>
   198f8:	bl	114a0 <abort@plt>
   198fc:	str	r1, [sp, #44]	; 0x2c
   19900:	str	r0, [sp, #40]	; 0x28
   19904:	mov	r3, sp
   19908:	mov	r0, #0
   1990c:	mov	r1, lr
   19910:	mov	r2, ip
   19914:	bl	191b8 <__assert_fail@plt+0x7cd0>
   19918:	sub	sp, fp, #8
   1991c:	pop	{r4, r5, fp, pc}
   19920:	movw	r3, #53560	; 0xd138
   19924:	movt	r3, #2
   19928:	b	191b8 <__assert_fail@plt+0x7cd0>
   1992c:	movw	r3, #53560	; 0xd138
   19930:	mov	r2, r1
   19934:	mov	r1, r0
   19938:	mov	r0, #0
   1993c:	movt	r3, #2
   19940:	b	191b8 <__assert_fail@plt+0x7cd0>
   19944:	movw	r3, #53560	; 0xd138
   19948:	mvn	r2, #0
   1994c:	movt	r3, #2
   19950:	b	191b8 <__assert_fail@plt+0x7cd0>
   19954:	movw	r3, #53560	; 0xd138
   19958:	mov	r1, r0
   1995c:	mov	r0, #0
   19960:	mvn	r2, #0
   19964:	movt	r3, #2
   19968:	b	191b8 <__assert_fail@plt+0x7cd0>
   1996c:	push	{r4, sl, fp, lr}
   19970:	add	fp, sp, #8
   19974:	sub	sp, sp, #104	; 0x68
   19978:	movw	r1, #50617	; 0xc5b9
   1997c:	mov	r4, r0
   19980:	mov	r2, sp
   19984:	mov	r0, #3
   19988:	movt	r1, #1
   1998c:	bl	114b8 <__lxstat64@plt>
   19990:	mov	r1, r0
   19994:	mov	r0, #0
   19998:	cmp	r1, #0
   1999c:	beq	199a8 <__assert_fail@plt+0x84c0>
   199a0:	sub	sp, fp, #8
   199a4:	pop	{r4, sl, fp, pc}
   199a8:	ldr	r0, [sp, #96]	; 0x60
   199ac:	ldr	r1, [sp, #100]	; 0x64
   199b0:	ldm	sp, {r2, r3}
   199b4:	stm	r4, {r0, r1, r2, r3}
   199b8:	mov	r0, r4
   199bc:	sub	sp, fp, #8
   199c0:	pop	{r4, sl, fp, pc}
   199c4:	push	{r4, r5, r6, r7, fp, lr}
   199c8:	add	fp, sp, #16
   199cc:	mov	r4, r0
   199d0:	cmp	r0, #2
   199d4:	bhi	19a04 <__assert_fail@plt+0x851c>
   199d8:	mov	r0, r4
   199dc:	bl	1ad74 <__assert_fail@plt+0x988c>
   199e0:	mov	r5, r0
   199e4:	bl	1138c <__errno_location@plt>
   199e8:	ldr	r7, [r0]
   199ec:	mov	r6, r0
   199f0:	mov	r0, r4
   199f4:	bl	114ac <close@plt>
   199f8:	mov	r0, r5
   199fc:	str	r7, [r6]
   19a00:	pop	{r4, r5, r6, r7, fp, pc}
   19a04:	mov	r0, r4
   19a08:	pop	{r4, r5, r6, r7, fp, pc}
   19a0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a10:	add	fp, sp, #24
   19a14:	sub	sp, sp, #32
   19a18:	ldr	r6, [fp, #12]
   19a1c:	ldr	r7, [fp, #8]
   19a20:	mov	r4, r2
   19a24:	mov	r8, r0
   19a28:	cmp	r1, #0
   19a2c:	beq	19a54 <__assert_fail@plt+0x856c>
   19a30:	movw	r2, #49904	; 0xc2f0
   19a34:	mov	r5, r1
   19a38:	str	r3, [sp, #4]
   19a3c:	str	r4, [sp]
   19a40:	mov	r0, r8
   19a44:	mov	r1, #1
   19a48:	movt	r2, #1
   19a4c:	mov	r3, r5
   19a50:	b	19a6c <__assert_fail@plt+0x8584>
   19a54:	movw	r2, #49916	; 0xc2fc
   19a58:	str	r3, [sp]
   19a5c:	mov	r0, r8
   19a60:	mov	r1, #1
   19a64:	mov	r3, r4
   19a68:	movt	r2, #1
   19a6c:	bl	113c8 <__fprintf_chk@plt>
   19a70:	movw	r1, #49923	; 0xc303
   19a74:	mov	r0, #0
   19a78:	mov	r2, #5
   19a7c:	movt	r1, #1
   19a80:	bl	1126c <dcgettext@plt>
   19a84:	movw	r2, #50619	; 0xc5bb
   19a88:	mov	r3, r0
   19a8c:	movw	r0, #2022	; 0x7e6
   19a90:	mov	r1, #1
   19a94:	movt	r2, #1
   19a98:	str	r0, [sp]
   19a9c:	mov	r0, r8
   19aa0:	bl	113c8 <__fprintf_chk@plt>
   19aa4:	movw	r4, #47847	; 0xbae7
   19aa8:	mov	r1, r8
   19aac:	movt	r4, #1
   19ab0:	mov	r0, r4
   19ab4:	bl	111dc <fputs_unlocked@plt>
   19ab8:	movw	r1, #49927	; 0xc307
   19abc:	mov	r0, #0
   19ac0:	mov	r2, #5
   19ac4:	movt	r1, #1
   19ac8:	bl	1126c <dcgettext@plt>
   19acc:	movw	r3, #50098	; 0xc3b2
   19ad0:	mov	r2, r0
   19ad4:	mov	r0, r8
   19ad8:	mov	r1, #1
   19adc:	movt	r3, #1
   19ae0:	bl	113c8 <__fprintf_chk@plt>
   19ae4:	mov	r0, r4
   19ae8:	mov	r1, r8
   19aec:	bl	111dc <fputs_unlocked@plt>
   19af0:	cmp	r6, #9
   19af4:	bhi	19b30 <__assert_fail@plt+0x8648>
   19af8:	add	r0, pc, #0
   19afc:	ldr	pc, [r0, r6, lsl #2]
   19b00:	andeq	r9, r1, r8, lsr #22
   19b04:	andeq	r9, r1, ip, lsr fp
   19b08:	andeq	r9, r1, ip, ror #22
   19b0c:	muleq	r1, r4, fp
   19b10:			; <UNDEFINED> instruction: 0x00019bbc
   19b14:	andeq	r9, r1, r4, ror #23
   19b18:	andeq	r9, r1, ip, lsl #24
   19b1c:	andeq	r9, r1, r4, asr #24
   19b20:	andeq	r9, r1, ip, ror #25
   19b24:	muleq	r1, r4, ip
   19b28:	sub	sp, fp, #24
   19b2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19b30:	movw	r1, #50451	; 0xc513
   19b34:	movt	r1, #1
   19b38:	b	19c9c <__assert_fail@plt+0x87b4>
   19b3c:	movw	r1, #50132	; 0xc3d4
   19b40:	mov	r0, #0
   19b44:	mov	r2, #5
   19b48:	movt	r1, #1
   19b4c:	bl	1126c <dcgettext@plt>
   19b50:	ldr	r3, [r7]
   19b54:	mov	r2, r0
   19b58:	mov	r0, r8
   19b5c:	mov	r1, #1
   19b60:	sub	sp, fp, #24
   19b64:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19b68:	b	113c8 <__fprintf_chk@plt>
   19b6c:	movw	r1, #50148	; 0xc3e4
   19b70:	mov	r0, #0
   19b74:	mov	r2, #5
   19b78:	movt	r1, #1
   19b7c:	bl	1126c <dcgettext@plt>
   19b80:	mov	r2, r0
   19b84:	ldr	r3, [r7]
   19b88:	ldr	r0, [r7, #4]
   19b8c:	str	r0, [sp]
   19b90:	b	19c80 <__assert_fail@plt+0x8798>
   19b94:	movw	r1, #50171	; 0xc3fb
   19b98:	mov	r0, #0
   19b9c:	mov	r2, #5
   19ba0:	movt	r1, #1
   19ba4:	bl	1126c <dcgettext@plt>
   19ba8:	mov	r2, r0
   19bac:	ldr	r3, [r7]
   19bb0:	ldmib	r7, {r0, r1}
   19bb4:	stm	sp, {r0, r1}
   19bb8:	b	19c80 <__assert_fail@plt+0x8798>
   19bbc:	movw	r1, #50199	; 0xc417
   19bc0:	mov	r0, #0
   19bc4:	mov	r2, #5
   19bc8:	movt	r1, #1
   19bcc:	bl	1126c <dcgettext@plt>
   19bd0:	ldr	r3, [r7]
   19bd4:	mov	r2, r0
   19bd8:	ldmib	r7, {r0, r1, r7}
   19bdc:	stm	sp, {r0, r1, r7}
   19be0:	b	19c80 <__assert_fail@plt+0x8798>
   19be4:	movw	r1, #50231	; 0xc437
   19be8:	mov	r0, #0
   19bec:	mov	r2, #5
   19bf0:	movt	r1, #1
   19bf4:	bl	1126c <dcgettext@plt>
   19bf8:	ldr	r3, [r7]
   19bfc:	mov	r2, r0
   19c00:	ldmib	r7, {r0, r1, r6, r7}
   19c04:	stm	sp, {r0, r1, r6, r7}
   19c08:	b	19c80 <__assert_fail@plt+0x8798>
   19c0c:	movw	r1, #50267	; 0xc45b
   19c10:	mov	r0, #0
   19c14:	mov	r2, #5
   19c18:	movt	r1, #1
   19c1c:	bl	1126c <dcgettext@plt>
   19c20:	mov	r2, r0
   19c24:	ldr	r3, [r7]
   19c28:	ldmib	r7, {r0, r1, r6}
   19c2c:	ldr	r5, [r7, #16]
   19c30:	ldr	r7, [r7, #20]
   19c34:	stm	sp, {r0, r1, r6}
   19c38:	str	r5, [sp, #12]
   19c3c:	str	r7, [sp, #16]
   19c40:	b	19c80 <__assert_fail@plt+0x8798>
   19c44:	movw	r1, #50307	; 0xc483
   19c48:	mov	r0, #0
   19c4c:	mov	r2, #5
   19c50:	movt	r1, #1
   19c54:	bl	1126c <dcgettext@plt>
   19c58:	mov	r2, r0
   19c5c:	ldr	r3, [r7]
   19c60:	ldmib	r7, {r0, r1, r6}
   19c64:	ldr	r5, [r7, #16]
   19c68:	ldr	r4, [r7, #20]
   19c6c:	ldr	r7, [r7, #24]
   19c70:	stm	sp, {r0, r1, r6}
   19c74:	str	r5, [sp, #12]
   19c78:	str	r4, [sp, #16]
   19c7c:	str	r7, [sp, #20]
   19c80:	mov	r0, r8
   19c84:	mov	r1, #1
   19c88:	bl	113c8 <__fprintf_chk@plt>
   19c8c:	sub	sp, fp, #24
   19c90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c94:	movw	r1, #50399	; 0xc4df
   19c98:	movt	r1, #1
   19c9c:	mov	r0, #0
   19ca0:	mov	r2, #5
   19ca4:	bl	1126c <dcgettext@plt>
   19ca8:	mov	ip, r0
   19cac:	ldr	r3, [r7]
   19cb0:	ldr	r0, [r7, #4]
   19cb4:	ldr	r1, [r7, #8]
   19cb8:	ldr	r6, [r7, #12]
   19cbc:	ldr	r5, [r7, #16]
   19cc0:	ldr	r4, [r7, #20]
   19cc4:	ldr	r2, [r7, #24]
   19cc8:	ldr	lr, [r7, #28]
   19ccc:	ldr	r7, [r7, #32]
   19cd0:	stm	sp, {r0, r1, r6}
   19cd4:	str	r5, [sp, #12]
   19cd8:	str	r4, [sp, #16]
   19cdc:	str	r2, [sp, #20]
   19ce0:	str	lr, [sp, #24]
   19ce4:	str	r7, [sp, #28]
   19ce8:	b	19d30 <__assert_fail@plt+0x8848>
   19cec:	movw	r1, #50351	; 0xc4af
   19cf0:	mov	r0, #0
   19cf4:	mov	r2, #5
   19cf8:	movt	r1, #1
   19cfc:	bl	1126c <dcgettext@plt>
   19d00:	mov	ip, r0
   19d04:	ldr	r3, [r7]
   19d08:	ldmib	r7, {r0, r1, r6}
   19d0c:	ldr	r5, [r7, #16]
   19d10:	ldr	r4, [r7, #20]
   19d14:	ldr	r2, [r7, #24]
   19d18:	ldr	r7, [r7, #28]
   19d1c:	stm	sp, {r0, r1, r6}
   19d20:	str	r5, [sp, #12]
   19d24:	str	r4, [sp, #16]
   19d28:	str	r2, [sp, #20]
   19d2c:	str	r7, [sp, #24]
   19d30:	mov	r0, r8
   19d34:	mov	r1, #1
   19d38:	mov	r2, ip
   19d3c:	bl	113c8 <__fprintf_chk@plt>
   19d40:	sub	sp, fp, #24
   19d44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19d48:	push	{r4, sl, fp, lr}
   19d4c:	add	fp, sp, #8
   19d50:	sub	sp, sp, #8
   19d54:	ldr	ip, [fp, #8]
   19d58:	mov	lr, #0
   19d5c:	ldr	r4, [ip, lr, lsl #2]
   19d60:	add	lr, lr, #1
   19d64:	cmp	r4, #0
   19d68:	bne	19d5c <__assert_fail@plt+0x8874>
   19d6c:	sub	r4, lr, #1
   19d70:	str	ip, [sp]
   19d74:	str	r4, [sp, #4]
   19d78:	bl	19a0c <__assert_fail@plt+0x8524>
   19d7c:	sub	sp, fp, #8
   19d80:	pop	{r4, sl, fp, pc}
   19d84:	push	{fp, lr}
   19d88:	mov	fp, sp
   19d8c:	sub	sp, sp, #48	; 0x30
   19d90:	ldr	ip, [fp, #8]
   19d94:	ldr	lr, [ip]
   19d98:	cmp	lr, #0
   19d9c:	str	lr, [sp, #8]
   19da0:	beq	19e3c <__assert_fail@plt+0x8954>
   19da4:	ldr	lr, [ip, #4]
   19da8:	cmp	lr, #0
   19dac:	str	lr, [sp, #12]
   19db0:	beq	19e44 <__assert_fail@plt+0x895c>
   19db4:	ldr	lr, [ip, #8]
   19db8:	cmp	lr, #0
   19dbc:	str	lr, [sp, #16]
   19dc0:	beq	19e4c <__assert_fail@plt+0x8964>
   19dc4:	ldr	lr, [ip, #12]
   19dc8:	cmp	lr, #0
   19dcc:	str	lr, [sp, #20]
   19dd0:	beq	19e54 <__assert_fail@plt+0x896c>
   19dd4:	ldr	lr, [ip, #16]
   19dd8:	cmp	lr, #0
   19ddc:	str	lr, [sp, #24]
   19de0:	beq	19e5c <__assert_fail@plt+0x8974>
   19de4:	ldr	lr, [ip, #20]
   19de8:	cmp	lr, #0
   19dec:	str	lr, [sp, #28]
   19df0:	beq	19e64 <__assert_fail@plt+0x897c>
   19df4:	ldr	lr, [ip, #24]
   19df8:	cmp	lr, #0
   19dfc:	str	lr, [sp, #32]
   19e00:	beq	19e6c <__assert_fail@plt+0x8984>
   19e04:	ldr	lr, [ip, #28]
   19e08:	cmp	lr, #0
   19e0c:	str	lr, [sp, #36]	; 0x24
   19e10:	beq	19e74 <__assert_fail@plt+0x898c>
   19e14:	ldr	lr, [ip, #32]
   19e18:	cmp	lr, #0
   19e1c:	str	lr, [sp, #40]	; 0x28
   19e20:	beq	19e7c <__assert_fail@plt+0x8994>
   19e24:	ldr	lr, [ip, #36]	; 0x24
   19e28:	mov	ip, #10
   19e2c:	cmp	lr, #0
   19e30:	str	lr, [sp, #44]	; 0x2c
   19e34:	movweq	ip, #9
   19e38:	b	19e80 <__assert_fail@plt+0x8998>
   19e3c:	mov	ip, #0
   19e40:	b	19e80 <__assert_fail@plt+0x8998>
   19e44:	mov	ip, #1
   19e48:	b	19e80 <__assert_fail@plt+0x8998>
   19e4c:	mov	ip, #2
   19e50:	b	19e80 <__assert_fail@plt+0x8998>
   19e54:	mov	ip, #3
   19e58:	b	19e80 <__assert_fail@plt+0x8998>
   19e5c:	mov	ip, #4
   19e60:	b	19e80 <__assert_fail@plt+0x8998>
   19e64:	mov	ip, #5
   19e68:	b	19e80 <__assert_fail@plt+0x8998>
   19e6c:	mov	ip, #6
   19e70:	b	19e80 <__assert_fail@plt+0x8998>
   19e74:	mov	ip, #7
   19e78:	b	19e80 <__assert_fail@plt+0x8998>
   19e7c:	mov	ip, #8
   19e80:	add	lr, sp, #8
   19e84:	str	ip, [sp, #4]
   19e88:	str	lr, [sp]
   19e8c:	bl	19a0c <__assert_fail@plt+0x8524>
   19e90:	mov	sp, fp
   19e94:	pop	{fp, pc}
   19e98:	push	{fp, lr}
   19e9c:	mov	fp, sp
   19ea0:	sub	sp, sp, #56	; 0x38
   19ea4:	add	ip, fp, #8
   19ea8:	str	ip, [sp, #12]
   19eac:	ldr	lr, [fp, #8]
   19eb0:	cmp	lr, #0
   19eb4:	str	lr, [sp, #16]
   19eb8:	beq	19f54 <__assert_fail@plt+0x8a6c>
   19ebc:	ldr	lr, [ip, #4]
   19ec0:	cmp	lr, #0
   19ec4:	str	lr, [sp, #20]
   19ec8:	beq	19f5c <__assert_fail@plt+0x8a74>
   19ecc:	ldr	lr, [ip, #8]
   19ed0:	cmp	lr, #0
   19ed4:	str	lr, [sp, #24]
   19ed8:	beq	19f64 <__assert_fail@plt+0x8a7c>
   19edc:	ldr	lr, [ip, #12]
   19ee0:	cmp	lr, #0
   19ee4:	str	lr, [sp, #28]
   19ee8:	beq	19f6c <__assert_fail@plt+0x8a84>
   19eec:	ldr	lr, [ip, #16]
   19ef0:	cmp	lr, #0
   19ef4:	str	lr, [sp, #32]
   19ef8:	beq	19f74 <__assert_fail@plt+0x8a8c>
   19efc:	ldr	lr, [ip, #20]
   19f00:	cmp	lr, #0
   19f04:	str	lr, [sp, #36]	; 0x24
   19f08:	beq	19f7c <__assert_fail@plt+0x8a94>
   19f0c:	ldr	lr, [ip, #24]
   19f10:	cmp	lr, #0
   19f14:	str	lr, [sp, #40]	; 0x28
   19f18:	beq	19f84 <__assert_fail@plt+0x8a9c>
   19f1c:	ldr	lr, [ip, #28]
   19f20:	cmp	lr, #0
   19f24:	str	lr, [sp, #44]	; 0x2c
   19f28:	beq	19f8c <__assert_fail@plt+0x8aa4>
   19f2c:	ldr	lr, [ip, #32]
   19f30:	cmp	lr, #0
   19f34:	str	lr, [sp, #48]	; 0x30
   19f38:	beq	19f94 <__assert_fail@plt+0x8aac>
   19f3c:	ldr	lr, [ip, #36]	; 0x24
   19f40:	mov	ip, #10
   19f44:	cmp	lr, #0
   19f48:	str	lr, [sp, #52]	; 0x34
   19f4c:	movweq	ip, #9
   19f50:	b	19f98 <__assert_fail@plt+0x8ab0>
   19f54:	mov	ip, #0
   19f58:	b	19f98 <__assert_fail@plt+0x8ab0>
   19f5c:	mov	ip, #1
   19f60:	b	19f98 <__assert_fail@plt+0x8ab0>
   19f64:	mov	ip, #2
   19f68:	b	19f98 <__assert_fail@plt+0x8ab0>
   19f6c:	mov	ip, #3
   19f70:	b	19f98 <__assert_fail@plt+0x8ab0>
   19f74:	mov	ip, #4
   19f78:	b	19f98 <__assert_fail@plt+0x8ab0>
   19f7c:	mov	ip, #5
   19f80:	b	19f98 <__assert_fail@plt+0x8ab0>
   19f84:	mov	ip, #6
   19f88:	b	19f98 <__assert_fail@plt+0x8ab0>
   19f8c:	mov	ip, #7
   19f90:	b	19f98 <__assert_fail@plt+0x8ab0>
   19f94:	mov	ip, #8
   19f98:	add	lr, sp, #16
   19f9c:	str	ip, [sp, #4]
   19fa0:	str	lr, [sp]
   19fa4:	bl	19a0c <__assert_fail@plt+0x8524>
   19fa8:	mov	sp, fp
   19fac:	pop	{fp, pc}
   19fb0:	push	{fp, lr}
   19fb4:	mov	fp, sp
   19fb8:	movw	r0, #53652	; 0xd194
   19fbc:	movt	r0, #2
   19fc0:	ldr	r1, [r0]
   19fc4:	movw	r0, #47847	; 0xbae7
   19fc8:	movt	r0, #1
   19fcc:	bl	111dc <fputs_unlocked@plt>
   19fd0:	movw	r1, #50511	; 0xc54f
   19fd4:	mov	r0, #0
   19fd8:	mov	r2, #5
   19fdc:	movt	r1, #1
   19fe0:	bl	1126c <dcgettext@plt>
   19fe4:	movw	r2, #49019	; 0xbf7b
   19fe8:	mov	r1, r0
   19fec:	mov	r0, #1
   19ff0:	movt	r2, #1
   19ff4:	bl	113b0 <__printf_chk@plt>
   19ff8:	movw	r1, #50531	; 0xc563
   19ffc:	mov	r0, #0
   1a000:	mov	r2, #5
   1a004:	movt	r1, #1
   1a008:	bl	1126c <dcgettext@plt>
   1a00c:	movw	r2, #47229	; 0xb87d
   1a010:	movw	r3, #47656	; 0xba28
   1a014:	mov	r1, r0
   1a018:	mov	r0, #1
   1a01c:	movt	r2, #1
   1a020:	movt	r3, #1
   1a024:	bl	113b0 <__printf_chk@plt>
   1a028:	movw	r1, #50551	; 0xc577
   1a02c:	mov	r0, #0
   1a030:	mov	r2, #5
   1a034:	movt	r1, #1
   1a038:	bl	1126c <dcgettext@plt>
   1a03c:	movw	r2, #50590	; 0xc59e
   1a040:	mov	r1, r0
   1a044:	mov	r0, #1
   1a048:	movt	r2, #1
   1a04c:	pop	{fp, lr}
   1a050:	b	113b0 <__printf_chk@plt>
   1a054:	push	{r4, sl, fp, lr}
   1a058:	add	fp, sp, #8
   1a05c:	movw	r4, #54000	; 0xd2f0
   1a060:	movt	r4, #2
   1a064:	ldrb	r0, [r4]
   1a068:	cmp	r0, #1
   1a06c:	bne	1a080 <__assert_fail@plt+0x8b98>
   1a070:	ldrb	r0, [r4, #1]
   1a074:	cmp	r0, #0
   1a078:	movwne	r0, #1
   1a07c:	pop	{r4, sl, fp, pc}
   1a080:	bl	11290 <geteuid@plt>
   1a084:	clz	r0, r0
   1a088:	mov	r1, #1
   1a08c:	lsr	r0, r0, #5
   1a090:	strb	r1, [r4]
   1a094:	strb	r0, [r4, #1]
   1a098:	cmp	r0, #0
   1a09c:	movwne	r0, #1
   1a0a0:	pop	{r4, sl, fp, pc}
   1a0a4:	push	{r4, r5, r6, sl, fp, lr}
   1a0a8:	add	fp, sp, #16
   1a0ac:	mov	r4, r2
   1a0b0:	mov	r5, r1
   1a0b4:	mov	r6, r0
   1a0b8:	bl	1ad38 <__assert_fail@plt+0x9850>
   1a0bc:	cmp	r0, #0
   1a0c0:	popne	{r4, r5, r6, sl, fp, pc}
   1a0c4:	cmp	r6, #0
   1a0c8:	beq	1a0dc <__assert_fail@plt+0x8bf4>
   1a0cc:	cmp	r5, #0
   1a0d0:	cmpne	r4, #0
   1a0d4:	bne	1a0dc <__assert_fail@plt+0x8bf4>
   1a0d8:	pop	{r4, r5, r6, sl, fp, pc}
   1a0dc:	bl	1a658 <__assert_fail@plt+0x9170>
   1a0e0:	push	{r4, r5, r6, sl, fp, lr}
   1a0e4:	add	fp, sp, #16
   1a0e8:	mov	r4, r2
   1a0ec:	mov	r5, r1
   1a0f0:	mov	r6, r0
   1a0f4:	bl	1ad38 <__assert_fail@plt+0x9850>
   1a0f8:	cmp	r0, #0
   1a0fc:	popne	{r4, r5, r6, sl, fp, pc}
   1a100:	cmp	r6, #0
   1a104:	beq	1a118 <__assert_fail@plt+0x8c30>
   1a108:	cmp	r5, #0
   1a10c:	cmpne	r4, #0
   1a110:	bne	1a118 <__assert_fail@plt+0x8c30>
   1a114:	pop	{r4, r5, r6, sl, fp, pc}
   1a118:	bl	1a658 <__assert_fail@plt+0x9170>
   1a11c:	push	{fp, lr}
   1a120:	mov	fp, sp
   1a124:	bl	1a7ec <__assert_fail@plt+0x9304>
   1a128:	cmp	r0, #0
   1a12c:	popne	{fp, pc}
   1a130:	bl	1a658 <__assert_fail@plt+0x9170>
   1a134:	push	{fp, lr}
   1a138:	mov	fp, sp
   1a13c:	bl	1a7ec <__assert_fail@plt+0x9304>
   1a140:	cmp	r0, #0
   1a144:	popne	{fp, pc}
   1a148:	bl	1a658 <__assert_fail@plt+0x9170>
   1a14c:	push	{fp, lr}
   1a150:	mov	fp, sp
   1a154:	bl	1a7ec <__assert_fail@plt+0x9304>
   1a158:	cmp	r0, #0
   1a15c:	popne	{fp, pc}
   1a160:	bl	1a658 <__assert_fail@plt+0x9170>
   1a164:	push	{r4, r5, fp, lr}
   1a168:	add	fp, sp, #8
   1a16c:	mov	r4, r1
   1a170:	mov	r5, r0
   1a174:	bl	1a81c <__assert_fail@plt+0x9334>
   1a178:	cmp	r0, #0
   1a17c:	popne	{r4, r5, fp, pc}
   1a180:	cmp	r5, #0
   1a184:	beq	1a194 <__assert_fail@plt+0x8cac>
   1a188:	cmp	r4, #0
   1a18c:	bne	1a194 <__assert_fail@plt+0x8cac>
   1a190:	pop	{r4, r5, fp, pc}
   1a194:	bl	1a658 <__assert_fail@plt+0x9170>
   1a198:	push	{fp, lr}
   1a19c:	mov	fp, sp
   1a1a0:	cmp	r1, #0
   1a1a4:	orreq	r1, r1, #1
   1a1a8:	bl	1a81c <__assert_fail@plt+0x9334>
   1a1ac:	cmp	r0, #0
   1a1b0:	popne	{fp, pc}
   1a1b4:	bl	1a658 <__assert_fail@plt+0x9170>
   1a1b8:	push	{fp, lr}
   1a1bc:	mov	fp, sp
   1a1c0:	clz	r3, r2
   1a1c4:	lsr	ip, r3, #5
   1a1c8:	clz	r3, r1
   1a1cc:	lsr	r3, r3, #5
   1a1d0:	orrs	r3, r3, ip
   1a1d4:	movwne	r1, #1
   1a1d8:	movwne	r2, #1
   1a1dc:	bl	1ad38 <__assert_fail@plt+0x9850>
   1a1e0:	cmp	r0, #0
   1a1e4:	popne	{fp, pc}
   1a1e8:	bl	1a658 <__assert_fail@plt+0x9170>
   1a1ec:	push	{fp, lr}
   1a1f0:	mov	fp, sp
   1a1f4:	mov	r2, r1
   1a1f8:	mov	r1, r0
   1a1fc:	mov	r0, #0
   1a200:	bl	1ad38 <__assert_fail@plt+0x9850>
   1a204:	cmp	r0, #0
   1a208:	popne	{fp, pc}
   1a20c:	bl	1a658 <__assert_fail@plt+0x9170>
   1a210:	push	{fp, lr}
   1a214:	mov	fp, sp
   1a218:	mov	r2, r1
   1a21c:	mov	r1, r0
   1a220:	clz	r0, r2
   1a224:	clz	r3, r1
   1a228:	lsr	r0, r0, #5
   1a22c:	lsr	r3, r3, #5
   1a230:	orrs	r0, r3, r0
   1a234:	mov	r0, #0
   1a238:	movwne	r1, #1
   1a23c:	movwne	r2, #1
   1a240:	bl	1ad38 <__assert_fail@plt+0x9850>
   1a244:	cmp	r0, #0
   1a248:	popne	{fp, pc}
   1a24c:	bl	1a658 <__assert_fail@plt+0x9170>
   1a250:	push	{r4, r5, r6, sl, fp, lr}
   1a254:	add	fp, sp, #16
   1a258:	ldr	r5, [r1]
   1a25c:	mov	r4, r1
   1a260:	mov	r6, r0
   1a264:	cmp	r0, #0
   1a268:	beq	1a280 <__assert_fail@plt+0x8d98>
   1a26c:	mov	r0, #1
   1a270:	add	r0, r0, r5, lsr #1
   1a274:	adds	r5, r5, r0
   1a278:	bcc	1a288 <__assert_fail@plt+0x8da0>
   1a27c:	b	1a2c4 <__assert_fail@plt+0x8ddc>
   1a280:	cmp	r5, #0
   1a284:	movweq	r5, #64	; 0x40
   1a288:	mov	r0, r6
   1a28c:	mov	r1, r5
   1a290:	mov	r2, #1
   1a294:	bl	1ad38 <__assert_fail@plt+0x9850>
   1a298:	cmp	r5, #0
   1a29c:	mov	r1, r5
   1a2a0:	movwne	r1, #1
   1a2a4:	cmp	r0, #0
   1a2a8:	bne	1a2bc <__assert_fail@plt+0x8dd4>
   1a2ac:	clz	r2, r6
   1a2b0:	lsr	r2, r2, #5
   1a2b4:	orrs	r1, r2, r1
   1a2b8:	bne	1a2c4 <__assert_fail@plt+0x8ddc>
   1a2bc:	str	r5, [r4]
   1a2c0:	pop	{r4, r5, r6, sl, fp, pc}
   1a2c4:	bl	1a658 <__assert_fail@plt+0x9170>
   1a2c8:	push	{r4, r5, r6, r7, fp, lr}
   1a2cc:	add	fp, sp, #16
   1a2d0:	ldr	r5, [r1]
   1a2d4:	mov	r6, r2
   1a2d8:	mov	r4, r1
   1a2dc:	mov	r7, r0
   1a2e0:	cmp	r0, #0
   1a2e4:	beq	1a2fc <__assert_fail@plt+0x8e14>
   1a2e8:	mov	r0, #1
   1a2ec:	add	r0, r0, r5, lsr #1
   1a2f0:	adds	r5, r5, r0
   1a2f4:	bcc	1a314 <__assert_fail@plt+0x8e2c>
   1a2f8:	b	1a348 <__assert_fail@plt+0x8e60>
   1a2fc:	cmp	r5, #0
   1a300:	bne	1a314 <__assert_fail@plt+0x8e2c>
   1a304:	mov	r0, #64	; 0x40
   1a308:	cmp	r6, #64	; 0x40
   1a30c:	udiv	r5, r0, r6
   1a310:	addhi	r5, r5, #1
   1a314:	mov	r0, r7
   1a318:	mov	r1, r5
   1a31c:	mov	r2, r6
   1a320:	bl	1ad38 <__assert_fail@plt+0x9850>
   1a324:	cmp	r0, #0
   1a328:	bne	1a340 <__assert_fail@plt+0x8e58>
   1a32c:	cmp	r7, #0
   1a330:	beq	1a348 <__assert_fail@plt+0x8e60>
   1a334:	cmp	r6, #0
   1a338:	cmpne	r5, #0
   1a33c:	bne	1a348 <__assert_fail@plt+0x8e60>
   1a340:	str	r5, [r4]
   1a344:	pop	{r4, r5, r6, r7, fp, pc}
   1a348:	bl	1a658 <__assert_fail@plt+0x9170>
   1a34c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a350:	add	fp, sp, #24
   1a354:	mov	r8, r1
   1a358:	ldr	r1, [r1]
   1a35c:	mov	r5, r0
   1a360:	add	r0, r1, r1, asr #1
   1a364:	cmp	r0, r1
   1a368:	mvnvs	r0, #-2147483648	; 0x80000000
   1a36c:	cmp	r0, r3
   1a370:	mov	r7, r0
   1a374:	movgt	r7, r3
   1a378:	cmn	r3, #1
   1a37c:	movle	r7, r0
   1a380:	ldr	r0, [fp, #8]
   1a384:	cmn	r0, #1
   1a388:	ble	1a3b0 <__assert_fail@plt+0x8ec8>
   1a38c:	cmp	r0, #0
   1a390:	beq	1a404 <__assert_fail@plt+0x8f1c>
   1a394:	cmn	r7, #1
   1a398:	ble	1a3d8 <__assert_fail@plt+0x8ef0>
   1a39c:	mvn	r4, #-2147483648	; 0x80000000
   1a3a0:	udiv	r6, r4, r0
   1a3a4:	cmp	r6, r7
   1a3a8:	bge	1a404 <__assert_fail@plt+0x8f1c>
   1a3ac:	b	1a414 <__assert_fail@plt+0x8f2c>
   1a3b0:	cmn	r7, #1
   1a3b4:	ble	1a3f4 <__assert_fail@plt+0x8f0c>
   1a3b8:	cmn	r0, #1
   1a3bc:	beq	1a404 <__assert_fail@plt+0x8f1c>
   1a3c0:	mov	r6, #-2147483648	; 0x80000000
   1a3c4:	mvn	r4, #-2147483648	; 0x80000000
   1a3c8:	sdiv	r6, r6, r0
   1a3cc:	cmp	r6, r7
   1a3d0:	bge	1a404 <__assert_fail@plt+0x8f1c>
   1a3d4:	b	1a414 <__assert_fail@plt+0x8f2c>
   1a3d8:	beq	1a404 <__assert_fail@plt+0x8f1c>
   1a3dc:	mov	r6, #-2147483648	; 0x80000000
   1a3e0:	mvn	r4, #-2147483648	; 0x80000000
   1a3e4:	sdiv	r6, r6, r7
   1a3e8:	cmp	r6, r0
   1a3ec:	bge	1a404 <__assert_fail@plt+0x8f1c>
   1a3f0:	b	1a414 <__assert_fail@plt+0x8f2c>
   1a3f4:	mvn	r4, #-2147483648	; 0x80000000
   1a3f8:	sdiv	r6, r4, r0
   1a3fc:	cmp	r7, r6
   1a400:	blt	1a414 <__assert_fail@plt+0x8f2c>
   1a404:	mul	r6, r7, r0
   1a408:	mov	r4, #64	; 0x40
   1a40c:	cmp	r6, #63	; 0x3f
   1a410:	bgt	1a41c <__assert_fail@plt+0x8f34>
   1a414:	sdiv	r7, r4, r0
   1a418:	mul	r6, r7, r0
   1a41c:	cmp	r5, #0
   1a420:	moveq	r4, #0
   1a424:	streq	r4, [r8]
   1a428:	sub	r4, r7, r1
   1a42c:	cmp	r4, r2
   1a430:	bge	1a4dc <__assert_fail@plt+0x8ff4>
   1a434:	add	r7, r1, r2
   1a438:	mov	r6, #0
   1a43c:	mov	r2, #0
   1a440:	cmp	r7, r3
   1a444:	movwgt	r6, #1
   1a448:	cmn	r3, #1
   1a44c:	movwgt	r2, #1
   1a450:	cmp	r7, r1
   1a454:	bvs	1a510 <__assert_fail@plt+0x9028>
   1a458:	ands	r1, r2, r6
   1a45c:	bne	1a510 <__assert_fail@plt+0x9028>
   1a460:	cmn	r0, #1
   1a464:	ble	1a48c <__assert_fail@plt+0x8fa4>
   1a468:	cmp	r0, #0
   1a46c:	beq	1a4d8 <__assert_fail@plt+0x8ff0>
   1a470:	cmn	r7, #1
   1a474:	ble	1a4b0 <__assert_fail@plt+0x8fc8>
   1a478:	mvn	r1, #-2147483648	; 0x80000000
   1a47c:	udiv	r1, r1, r0
   1a480:	cmp	r1, r7
   1a484:	bge	1a4d8 <__assert_fail@plt+0x8ff0>
   1a488:	b	1a510 <__assert_fail@plt+0x9028>
   1a48c:	cmn	r7, #1
   1a490:	ble	1a4c8 <__assert_fail@plt+0x8fe0>
   1a494:	cmn	r0, #1
   1a498:	beq	1a4d8 <__assert_fail@plt+0x8ff0>
   1a49c:	mov	r1, #-2147483648	; 0x80000000
   1a4a0:	sdiv	r1, r1, r0
   1a4a4:	cmp	r1, r7
   1a4a8:	bge	1a4d8 <__assert_fail@plt+0x8ff0>
   1a4ac:	b	1a510 <__assert_fail@plt+0x9028>
   1a4b0:	beq	1a4d8 <__assert_fail@plt+0x8ff0>
   1a4b4:	mov	r1, #-2147483648	; 0x80000000
   1a4b8:	sdiv	r1, r1, r7
   1a4bc:	cmp	r1, r0
   1a4c0:	bge	1a4d8 <__assert_fail@plt+0x8ff0>
   1a4c4:	b	1a510 <__assert_fail@plt+0x9028>
   1a4c8:	mvn	r1, #-2147483648	; 0x80000000
   1a4cc:	sdiv	r1, r1, r0
   1a4d0:	cmp	r7, r1
   1a4d4:	blt	1a510 <__assert_fail@plt+0x9028>
   1a4d8:	mul	r6, r7, r0
   1a4dc:	mov	r0, r5
   1a4e0:	mov	r1, r6
   1a4e4:	bl	1a81c <__assert_fail@plt+0x9334>
   1a4e8:	cmp	r6, #0
   1a4ec:	movwne	r6, #1
   1a4f0:	cmp	r0, #0
   1a4f4:	bne	1a508 <__assert_fail@plt+0x9020>
   1a4f8:	clz	r1, r5
   1a4fc:	lsr	r1, r1, #5
   1a500:	orrs	r1, r1, r6
   1a504:	bne	1a510 <__assert_fail@plt+0x9028>
   1a508:	str	r7, [r8]
   1a50c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a510:	bl	1a658 <__assert_fail@plt+0x9170>
   1a514:	push	{fp, lr}
   1a518:	mov	fp, sp
   1a51c:	mov	r1, #1
   1a520:	bl	1a798 <__assert_fail@plt+0x92b0>
   1a524:	cmp	r0, #0
   1a528:	popne	{fp, pc}
   1a52c:	bl	1a658 <__assert_fail@plt+0x9170>
   1a530:	push	{fp, lr}
   1a534:	mov	fp, sp
   1a538:	bl	1a798 <__assert_fail@plt+0x92b0>
   1a53c:	cmp	r0, #0
   1a540:	popne	{fp, pc}
   1a544:	bl	1a658 <__assert_fail@plt+0x9170>
   1a548:	push	{fp, lr}
   1a54c:	mov	fp, sp
   1a550:	mov	r1, #1
   1a554:	bl	1a798 <__assert_fail@plt+0x92b0>
   1a558:	cmp	r0, #0
   1a55c:	popne	{fp, pc}
   1a560:	bl	1a658 <__assert_fail@plt+0x9170>
   1a564:	push	{fp, lr}
   1a568:	mov	fp, sp
   1a56c:	bl	1a798 <__assert_fail@plt+0x92b0>
   1a570:	cmp	r0, #0
   1a574:	popne	{fp, pc}
   1a578:	bl	1a658 <__assert_fail@plt+0x9170>
   1a57c:	push	{r4, r5, fp, lr}
   1a580:	add	fp, sp, #8
   1a584:	mov	r5, r0
   1a588:	mov	r0, r1
   1a58c:	mov	r4, r1
   1a590:	bl	1a7ec <__assert_fail@plt+0x9304>
   1a594:	cmp	r0, #0
   1a598:	beq	1a5ac <__assert_fail@plt+0x90c4>
   1a59c:	mov	r1, r5
   1a5a0:	mov	r2, r4
   1a5a4:	pop	{r4, r5, fp, lr}
   1a5a8:	b	11254 <memcpy@plt>
   1a5ac:	bl	1a658 <__assert_fail@plt+0x9170>
   1a5b0:	push	{r4, r5, fp, lr}
   1a5b4:	add	fp, sp, #8
   1a5b8:	mov	r5, r0
   1a5bc:	mov	r0, r1
   1a5c0:	mov	r4, r1
   1a5c4:	bl	1a7ec <__assert_fail@plt+0x9304>
   1a5c8:	cmp	r0, #0
   1a5cc:	beq	1a5e0 <__assert_fail@plt+0x90f8>
   1a5d0:	mov	r1, r5
   1a5d4:	mov	r2, r4
   1a5d8:	pop	{r4, r5, fp, lr}
   1a5dc:	b	11254 <memcpy@plt>
   1a5e0:	bl	1a658 <__assert_fail@plt+0x9170>
   1a5e4:	push	{r4, r5, fp, lr}
   1a5e8:	add	fp, sp, #8
   1a5ec:	mov	r5, r0
   1a5f0:	add	r0, r1, #1
   1a5f4:	mov	r4, r1
   1a5f8:	bl	1a7ec <__assert_fail@plt+0x9304>
   1a5fc:	cmp	r0, #0
   1a600:	beq	1a61c <__assert_fail@plt+0x9134>
   1a604:	mov	r1, #0
   1a608:	mov	r2, r4
   1a60c:	strb	r1, [r0, r4]
   1a610:	mov	r1, r5
   1a614:	pop	{r4, r5, fp, lr}
   1a618:	b	11254 <memcpy@plt>
   1a61c:	bl	1a658 <__assert_fail@plt+0x9170>
   1a620:	push	{r4, r5, fp, lr}
   1a624:	add	fp, sp, #8
   1a628:	mov	r4, r0
   1a62c:	bl	11374 <strlen@plt>
   1a630:	add	r5, r0, #1
   1a634:	mov	r0, r5
   1a638:	bl	1a7ec <__assert_fail@plt+0x9304>
   1a63c:	cmp	r0, #0
   1a640:	beq	1a654 <__assert_fail@plt+0x916c>
   1a644:	mov	r1, r4
   1a648:	mov	r2, r5
   1a64c:	pop	{r4, r5, fp, lr}
   1a650:	b	11254 <memcpy@plt>
   1a654:	bl	1a658 <__assert_fail@plt+0x9170>
   1a658:	push	{fp, lr}
   1a65c:	mov	fp, sp
   1a660:	movw	r0, #53552	; 0xd130
   1a664:	movw	r1, #50666	; 0xc5ea
   1a668:	mov	r2, #5
   1a66c:	movt	r0, #2
   1a670:	movt	r1, #1
   1a674:	ldr	r4, [r0]
   1a678:	mov	r0, #0
   1a67c:	bl	1126c <dcgettext@plt>
   1a680:	movw	r2, #49311	; 0xc09f
   1a684:	mov	r3, r0
   1a688:	mov	r0, r4
   1a68c:	mov	r1, #0
   1a690:	movt	r2, #1
   1a694:	bl	112fc <error@plt>
   1a698:	bl	114a0 <abort@plt>
   1a69c:	push	{fp, lr}
   1a6a0:	mov	fp, sp
   1a6a4:	orr	r1, r1, #512	; 0x200
   1a6a8:	bl	13bc8 <__assert_fail@plt+0x26e0>
   1a6ac:	cmp	r0, #0
   1a6b0:	popne	{fp, pc}
   1a6b4:	bl	1138c <__errno_location@plt>
   1a6b8:	ldr	r0, [r0]
   1a6bc:	cmp	r0, #22
   1a6c0:	bne	1a6e4 <__assert_fail@plt+0x91fc>
   1a6c4:	movw	r0, #50683	; 0xc5fb
   1a6c8:	movw	r1, #50699	; 0xc60b
   1a6cc:	movw	r3, #50710	; 0xc616
   1a6d0:	mov	r2, #41	; 0x29
   1a6d4:	movt	r0, #1
   1a6d8:	movt	r1, #1
   1a6dc:	movt	r3, #1
   1a6e0:	bl	114e8 <__assert_fail@plt>
   1a6e4:	bl	1a658 <__assert_fail@plt+0x9170>
   1a6e8:	ldr	r0, [r0, #48]	; 0x30
   1a6ec:	and	r0, r0, #17
   1a6f0:	cmp	r0, #16
   1a6f4:	moveq	r0, #1
   1a6f8:	bxeq	lr
   1a6fc:	cmp	r0, #17
   1a700:	movne	r0, #0
   1a704:	bxne	lr
   1a708:	ldr	r0, [r1, #48]	; 0x30
   1a70c:	cmp	r0, #0
   1a710:	movwne	r0, #1
   1a714:	bx	lr
   1a718:	push	{r4, sl, fp, lr}
   1a71c:	add	fp, sp, #8
   1a720:	sub	sp, sp, #8
   1a724:	movw	r0, #53648	; 0xd190
   1a728:	mov	r4, #0
   1a72c:	mov	r1, sp
   1a730:	mov	r2, #10
   1a734:	movt	r0, #2
   1a738:	str	r4, [sp, #4]
   1a73c:	str	r4, [sp]
   1a740:	ldr	r3, [r0]
   1a744:	add	r0, sp, #4
   1a748:	bl	111f4 <__getdelim@plt>
   1a74c:	cmp	r0, #1
   1a750:	blt	1a784 <__assert_fail@plt+0x929c>
   1a754:	sub	r1, r0, #1
   1a758:	ldr	r0, [sp, #4]
   1a75c:	ldrb	r2, [r0, r1]
   1a760:	cmp	r2, #10
   1a764:	bne	1a774 <__assert_fail@plt+0x928c>
   1a768:	mov	r2, #0
   1a76c:	strb	r2, [r0, r1]
   1a770:	ldr	r0, [sp, #4]
   1a774:	bl	113f8 <rpmatch@plt>
   1a778:	cmp	r0, #0
   1a77c:	mov	r4, #0
   1a780:	movwgt	r4, #1
   1a784:	ldr	r0, [sp, #4]
   1a788:	bl	13af8 <__assert_fail@plt+0x2610>
   1a78c:	mov	r0, r4
   1a790:	sub	sp, fp, #8
   1a794:	pop	{r4, sl, fp, pc}
   1a798:	clz	r2, r1
   1a79c:	clz	r3, r0
   1a7a0:	lsr	r2, r2, #5
   1a7a4:	lsr	r3, r3, #5
   1a7a8:	orrs	r2, r3, r2
   1a7ac:	movwne	r1, #1
   1a7b0:	movwne	r0, #1
   1a7b4:	cmp	r1, #0
   1a7b8:	beq	1a7e8 <__assert_fail@plt+0x9300>
   1a7bc:	mvn	r2, #-2147483648	; 0x80000000
   1a7c0:	udiv	r2, r2, r1
   1a7c4:	cmp	r2, r0
   1a7c8:	bcs	1a7e8 <__assert_fail@plt+0x9300>
   1a7cc:	push	{fp, lr}
   1a7d0:	mov	fp, sp
   1a7d4:	bl	1138c <__errno_location@plt>
   1a7d8:	mov	r1, #12
   1a7dc:	str	r1, [r0]
   1a7e0:	mov	r0, #0
   1a7e4:	pop	{fp, pc}
   1a7e8:	b	111d0 <calloc@plt>
   1a7ec:	cmp	r0, #0
   1a7f0:	movweq	r0, #1
   1a7f4:	cmn	r0, #1
   1a7f8:	ble	1a800 <__assert_fail@plt+0x9318>
   1a7fc:	b	11314 <malloc@plt>
   1a800:	push	{fp, lr}
   1a804:	mov	fp, sp
   1a808:	bl	1138c <__errno_location@plt>
   1a80c:	mov	r1, #12
   1a810:	str	r1, [r0]
   1a814:	mov	r0, #0
   1a818:	pop	{fp, pc}
   1a81c:	push	{fp, lr}
   1a820:	mov	fp, sp
   1a824:	cmp	r0, #0
   1a828:	beq	1a844 <__assert_fail@plt+0x935c>
   1a82c:	cmp	r1, #0
   1a830:	beq	1a850 <__assert_fail@plt+0x9368>
   1a834:	cmn	r1, #1
   1a838:	ble	1a85c <__assert_fail@plt+0x9374>
   1a83c:	pop	{fp, lr}
   1a840:	b	11278 <realloc@plt>
   1a844:	mov	r0, r1
   1a848:	pop	{fp, lr}
   1a84c:	b	1a7ec <__assert_fail@plt+0x9304>
   1a850:	bl	13af8 <__assert_fail@plt+0x2610>
   1a854:	mov	r0, #0
   1a858:	pop	{fp, pc}
   1a85c:	bl	1138c <__errno_location@plt>
   1a860:	mov	r1, #12
   1a864:	str	r1, [r0]
   1a868:	mov	r0, #0
   1a86c:	pop	{fp, pc}
   1a870:	push	{r4, r5, r6, sl, fp, lr}
   1a874:	add	fp, sp, #16
   1a878:	mov	r4, r0
   1a87c:	bl	112e4 <__fpending@plt>
   1a880:	ldr	r6, [r4]
   1a884:	mov	r5, r0
   1a888:	mov	r0, r4
   1a88c:	bl	1a9e4 <__assert_fail@plt+0x94fc>
   1a890:	tst	r6, #32
   1a894:	bne	1a8cc <__assert_fail@plt+0x93e4>
   1a898:	cmp	r0, #0
   1a89c:	mov	r4, r0
   1a8a0:	mvnne	r4, #0
   1a8a4:	cmp	r5, #0
   1a8a8:	bne	1a8d8 <__assert_fail@plt+0x93f0>
   1a8ac:	cmp	r0, #0
   1a8b0:	beq	1a8d8 <__assert_fail@plt+0x93f0>
   1a8b4:	bl	1138c <__errno_location@plt>
   1a8b8:	ldr	r0, [r0]
   1a8bc:	subs	r4, r0, #9
   1a8c0:	mvnne	r4, #0
   1a8c4:	mov	r0, r4
   1a8c8:	pop	{r4, r5, r6, sl, fp, pc}
   1a8cc:	mvn	r4, #0
   1a8d0:	cmp	r0, #0
   1a8d4:	beq	1a8e0 <__assert_fail@plt+0x93f8>
   1a8d8:	mov	r0, r4
   1a8dc:	pop	{r4, r5, r6, sl, fp, pc}
   1a8e0:	bl	1138c <__errno_location@plt>
   1a8e4:	mov	r1, #0
   1a8e8:	str	r1, [r0]
   1a8ec:	mov	r0, r4
   1a8f0:	pop	{r4, r5, r6, sl, fp, pc}
   1a8f4:	movw	r2, #62998	; 0xf616
   1a8f8:	mov	r1, #0
   1a8fc:	movt	r2, #149	; 0x95
   1a900:	str	r1, [r0, #16]
   1a904:	str	r1, [r0, #20]
   1a908:	str	r2, [r0, #24]
   1a90c:	bx	lr
   1a910:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1a914:	add	fp, sp, #24
   1a918:	ldr	r2, [r0, #24]
   1a91c:	movw	r3, #62998	; 0xf616
   1a920:	movt	r3, #149	; 0x95
   1a924:	cmp	r2, r3
   1a928:	bne	1a9c4 <__assert_fail@plt+0x94dc>
   1a92c:	add	r3, r0, #16
   1a930:	add	ip, r0, #8
   1a934:	ldrd	r4, [r3]
   1a938:	orrs	r2, r4, r5
   1a93c:	beq	1a978 <__assert_fail@plt+0x9490>
   1a940:	ldr	r6, [r1, #96]	; 0x60
   1a944:	ldr	r9, [r1, #100]	; 0x64
   1a948:	ldm	r0, {r2, r7}
   1a94c:	eor	r7, r9, r7
   1a950:	eor	r2, r6, r2
   1a954:	orrs	r2, r2, r7
   1a958:	bne	1a978 <__assert_fail@plt+0x9490>
   1a95c:	ldm	ip, {r2, r7}
   1a960:	ldm	r1, {r6, r9}
   1a964:	eor	r7, r9, r7
   1a968:	eor	r2, r6, r2
   1a96c:	orrs	r2, r2, r7
   1a970:	mov	r2, #1
   1a974:	beq	1a9b0 <__assert_fail@plt+0x94c8>
   1a978:	adds	r6, r4, #1
   1a97c:	adc	r7, r5, #0
   1a980:	and	r2, r6, r4
   1a984:	strd	r6, [r3]
   1a988:	and	r3, r7, r5
   1a98c:	orrs	r2, r2, r3
   1a990:	mov	r2, #0
   1a994:	bne	1a9b0 <__assert_fail@plt+0x94c8>
   1a998:	orrs	r3, r6, r7
   1a99c:	beq	1a9b8 <__assert_fail@plt+0x94d0>
   1a9a0:	ldrd	r4, [r1]
   1a9a4:	strd	r4, [ip]
   1a9a8:	ldrd	r4, [r1, #96]	; 0x60
   1a9ac:	strd	r4, [r0]
   1a9b0:	mov	r0, r2
   1a9b4:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a9b8:	mov	r2, #1
   1a9bc:	mov	r0, r2
   1a9c0:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a9c4:	movw	r0, #50788	; 0xc664
   1a9c8:	movw	r1, #50812	; 0xc67c
   1a9cc:	movw	r3, #50830	; 0xc68e
   1a9d0:	mov	r2, #60	; 0x3c
   1a9d4:	movt	r0, #1
   1a9d8:	movt	r1, #1
   1a9dc:	movt	r3, #1
   1a9e0:	bl	114e8 <__assert_fail@plt>
   1a9e4:	push	{r4, r5, r6, sl, fp, lr}
   1a9e8:	add	fp, sp, #16
   1a9ec:	sub	sp, sp, #8
   1a9f0:	mov	r4, r0
   1a9f4:	bl	113bc <fileno@plt>
   1a9f8:	cmn	r0, #1
   1a9fc:	ble	1aa70 <__assert_fail@plt+0x9588>
   1aa00:	mov	r0, r4
   1aa04:	bl	1132c <__freading@plt>
   1aa08:	cmp	r0, #0
   1aa0c:	beq	1aa38 <__assert_fail@plt+0x9550>
   1aa10:	mov	r0, r4
   1aa14:	bl	113bc <fileno@plt>
   1aa18:	mov	r1, #1
   1aa1c:	mov	r2, #0
   1aa20:	mov	r3, #0
   1aa24:	str	r1, [sp]
   1aa28:	bl	112cc <lseek64@plt>
   1aa2c:	and	r0, r0, r1
   1aa30:	cmn	r0, #1
   1aa34:	beq	1aa70 <__assert_fail@plt+0x9588>
   1aa38:	mov	r0, r4
   1aa3c:	bl	1386c <__assert_fail@plt+0x2384>
   1aa40:	cmp	r0, #0
   1aa44:	beq	1aa70 <__assert_fail@plt+0x9588>
   1aa48:	bl	1138c <__errno_location@plt>
   1aa4c:	ldr	r6, [r0]
   1aa50:	mov	r5, r0
   1aa54:	mov	r0, r4
   1aa58:	bl	113d4 <fclose@plt>
   1aa5c:	cmp	r6, #0
   1aa60:	strne	r6, [r5]
   1aa64:	mvnne	r0, #0
   1aa68:	sub	sp, fp, #16
   1aa6c:	pop	{r4, r5, r6, sl, fp, pc}
   1aa70:	mov	r0, r4
   1aa74:	sub	sp, fp, #16
   1aa78:	pop	{r4, r5, r6, sl, fp, lr}
   1aa7c:	b	113d4 <fclose@plt>
   1aa80:	sub	sp, sp, #8
   1aa84:	push	{r4, r5, r6, r7, fp, lr}
   1aa88:	add	fp, sp, #16
   1aa8c:	sub	sp, sp, #8
   1aa90:	mov	r5, r0
   1aa94:	add	r0, fp, #8
   1aa98:	cmp	r1, #11
   1aa9c:	str	r2, [fp, #8]
   1aaa0:	str	r3, [fp, #12]
   1aaa4:	str	r0, [sp, #4]
   1aaa8:	bhi	1aae4 <__assert_fail@plt+0x95fc>
   1aaac:	mov	r0, #1
   1aab0:	movw	r2, #1300	; 0x514
   1aab4:	tst	r2, r0, lsl r1
   1aab8:	bne	1aba4 <__assert_fail@plt+0x96bc>
   1aabc:	movw	r2, #2570	; 0xa0a
   1aac0:	tst	r2, r0, lsl r1
   1aac4:	bne	1ab0c <__assert_fail@plt+0x9624>
   1aac8:	cmp	r1, #0
   1aacc:	bne	1aae4 <__assert_fail@plt+0x95fc>
   1aad0:	ldr	r0, [sp, #4]
   1aad4:	add	r1, r0, #4
   1aad8:	str	r1, [sp, #4]
   1aadc:	mov	r1, #0
   1aae0:	b	1abb0 <__assert_fail@plt+0x96c8>
   1aae4:	sub	r0, r1, #1024	; 0x400
   1aae8:	cmp	r0, #10
   1aaec:	bhi	1aba4 <__assert_fail@plt+0x96bc>
   1aaf0:	mov	r2, #1
   1aaf4:	movw	r3, #645	; 0x285
   1aaf8:	tst	r3, r2, lsl r0
   1aafc:	bne	1aba4 <__assert_fail@plt+0x96bc>
   1ab00:	movw	r3, #1282	; 0x502
   1ab04:	tst	r3, r2, lsl r0
   1ab08:	beq	1ab18 <__assert_fail@plt+0x9630>
   1ab0c:	mov	r0, r5
   1ab10:	bl	113ec <fcntl64@plt>
   1ab14:	b	1abbc <__assert_fail@plt+0x96d4>
   1ab18:	cmp	r0, #6
   1ab1c:	bne	1aba4 <__assert_fail@plt+0x96bc>
   1ab20:	ldr	r0, [sp, #4]
   1ab24:	movw	r7, #54004	; 0xd2f4
   1ab28:	movt	r7, #2
   1ab2c:	add	r1, r0, #4
   1ab30:	str	r1, [sp, #4]
   1ab34:	ldr	r6, [r0]
   1ab38:	ldr	r0, [r7]
   1ab3c:	cmp	r0, #0
   1ab40:	bmi	1abe0 <__assert_fail@plt+0x96f8>
   1ab44:	mov	r0, r5
   1ab48:	movw	r1, #1030	; 0x406
   1ab4c:	mov	r2, r6
   1ab50:	bl	113ec <fcntl64@plt>
   1ab54:	mov	r4, r0
   1ab58:	cmn	r0, #1
   1ab5c:	bgt	1abd4 <__assert_fail@plt+0x96ec>
   1ab60:	bl	1138c <__errno_location@plt>
   1ab64:	ldr	r0, [r0]
   1ab68:	cmp	r0, #22
   1ab6c:	bne	1abd4 <__assert_fail@plt+0x96ec>
   1ab70:	mov	r0, r5
   1ab74:	mov	r1, #0
   1ab78:	mov	r2, r6
   1ab7c:	bl	113ec <fcntl64@plt>
   1ab80:	mov	r4, r0
   1ab84:	cmp	r0, #0
   1ab88:	bmi	1abc0 <__assert_fail@plt+0x96d8>
   1ab8c:	mvn	r0, #0
   1ab90:	str	r0, [r7]
   1ab94:	mov	r0, #1
   1ab98:	cmp	r0, #0
   1ab9c:	bne	1ac0c <__assert_fail@plt+0x9724>
   1aba0:	b	1abc0 <__assert_fail@plt+0x96d8>
   1aba4:	ldr	r0, [sp, #4]
   1aba8:	add	r2, r0, #4
   1abac:	str	r2, [sp, #4]
   1abb0:	ldr	r2, [r0]
   1abb4:	mov	r0, r5
   1abb8:	bl	113ec <fcntl64@plt>
   1abbc:	mov	r4, r0
   1abc0:	mov	r0, r4
   1abc4:	sub	sp, fp, #16
   1abc8:	pop	{r4, r5, r6, r7, fp, lr}
   1abcc:	add	sp, sp, #8
   1abd0:	bx	lr
   1abd4:	mov	r0, #1
   1abd8:	str	r0, [r7]
   1abdc:	b	1abc0 <__assert_fail@plt+0x96d8>
   1abe0:	mov	r0, r5
   1abe4:	mov	r1, #0
   1abe8:	mov	r2, r6
   1abec:	bl	113ec <fcntl64@plt>
   1abf0:	mov	r4, r0
   1abf4:	ldr	r0, [r7]
   1abf8:	add	r0, r0, #1
   1abfc:	clz	r0, r0
   1ac00:	lsr	r0, r0, #5
   1ac04:	cmp	r0, #0
   1ac08:	beq	1abc0 <__assert_fail@plt+0x96d8>
   1ac0c:	cmp	r4, #0
   1ac10:	bmi	1abc0 <__assert_fail@plt+0x96d8>
   1ac14:	mov	r0, r4
   1ac18:	mov	r1, #1
   1ac1c:	bl	113ec <fcntl64@plt>
   1ac20:	cmp	r0, #0
   1ac24:	bmi	1ac40 <__assert_fail@plt+0x9758>
   1ac28:	orr	r2, r0, #1
   1ac2c:	mov	r0, r4
   1ac30:	mov	r1, #2
   1ac34:	bl	113ec <fcntl64@plt>
   1ac38:	cmn	r0, #1
   1ac3c:	bne	1abc0 <__assert_fail@plt+0x96d8>
   1ac40:	bl	1138c <__errno_location@plt>
   1ac44:	ldr	r6, [r0]
   1ac48:	mov	r5, r0
   1ac4c:	mov	r0, r4
   1ac50:	bl	114ac <close@plt>
   1ac54:	str	r6, [r5]
   1ac58:	mvn	r4, #0
   1ac5c:	b	1abc0 <__assert_fail@plt+0x96d8>
   1ac60:	sub	sp, sp, #8
   1ac64:	push	{fp, lr}
   1ac68:	mov	fp, sp
   1ac6c:	sub	sp, sp, #8
   1ac70:	str	r2, [fp, #8]
   1ac74:	str	r3, [fp, #12]
   1ac78:	tst	r1, #64	; 0x40
   1ac7c:	mov	r2, #0
   1ac80:	ldrne	r2, [fp, #8]
   1ac84:	bl	11308 <open64@plt>
   1ac88:	bl	199c4 <__assert_fail@plt+0x84dc>
   1ac8c:	mov	sp, fp
   1ac90:	pop	{fp, lr}
   1ac94:	add	sp, sp, #8
   1ac98:	bx	lr
   1ac9c:	push	{fp, lr}
   1aca0:	mov	fp, sp
   1aca4:	mov	r0, #14
   1aca8:	bl	11428 <nl_langinfo@plt>
   1acac:	movw	r1, #47848	; 0xbae8
   1acb0:	cmp	r0, #0
   1acb4:	movt	r1, #1
   1acb8:	movne	r1, r0
   1acbc:	movw	r0, #50897	; 0xc6d1
   1acc0:	ldrb	r2, [r1]
   1acc4:	movt	r0, #1
   1acc8:	cmp	r2, #0
   1accc:	movne	r0, r1
   1acd0:	pop	{fp, pc}
   1acd4:	push	{r4, r5, r6, r7, fp, lr}
   1acd8:	add	fp, sp, #16
   1acdc:	sub	sp, sp, #8
   1ace0:	cmp	r0, #0
   1ace4:	add	r5, sp, #4
   1ace8:	mov	r7, r2
   1acec:	mov	r4, r1
   1acf0:	movne	r5, r0
   1acf4:	mov	r0, r5
   1acf8:	bl	112f0 <mbrtowc@plt>
   1acfc:	mov	r6, r0
   1ad00:	cmp	r7, #0
   1ad04:	beq	1ad2c <__assert_fail@plt+0x9844>
   1ad08:	cmn	r6, #2
   1ad0c:	bcc	1ad2c <__assert_fail@plt+0x9844>
   1ad10:	mov	r0, #0
   1ad14:	bl	1ad80 <__assert_fail@plt+0x9898>
   1ad18:	cmp	r0, #0
   1ad1c:	bne	1ad2c <__assert_fail@plt+0x9844>
   1ad20:	ldrb	r0, [r4]
   1ad24:	mov	r6, #1
   1ad28:	str	r0, [r5]
   1ad2c:	mov	r0, r6
   1ad30:	sub	sp, fp, #16
   1ad34:	pop	{r4, r5, r6, r7, fp, pc}
   1ad38:	cmp	r2, #0
   1ad3c:	beq	1ad6c <__assert_fail@plt+0x9884>
   1ad40:	mvn	r3, #0
   1ad44:	udiv	r3, r3, r2
   1ad48:	cmp	r3, r1
   1ad4c:	bcs	1ad6c <__assert_fail@plt+0x9884>
   1ad50:	push	{fp, lr}
   1ad54:	mov	fp, sp
   1ad58:	bl	1138c <__errno_location@plt>
   1ad5c:	mov	r1, #12
   1ad60:	str	r1, [r0]
   1ad64:	mov	r0, #0
   1ad68:	pop	{fp, pc}
   1ad6c:	mul	r1, r2, r1
   1ad70:	b	1a81c <__assert_fail@plt+0x9334>
   1ad74:	mov	r1, #0
   1ad78:	mov	r2, #3
   1ad7c:	b	1aa80 <__assert_fail@plt+0x9598>
   1ad80:	push	{r4, sl, fp, lr}
   1ad84:	add	fp, sp, #8
   1ad88:	sub	sp, sp, #264	; 0x108
   1ad8c:	add	r1, sp, #7
   1ad90:	movw	r2, #257	; 0x101
   1ad94:	bl	1adec <__assert_fail@plt+0x9904>
   1ad98:	mov	r4, #0
   1ad9c:	cmp	r0, #0
   1ada0:	bne	1ade0 <__assert_fail@plt+0x98f8>
   1ada4:	movw	r1, #50903	; 0xc6d7
   1ada8:	add	r0, sp, #7
   1adac:	mov	r2, #2
   1adb0:	movt	r1, #1
   1adb4:	bl	11368 <bcmp@plt>
   1adb8:	cmp	r0, #0
   1adbc:	beq	1ade0 <__assert_fail@plt+0x98f8>
   1adc0:	movw	r1, #50905	; 0xc6d9
   1adc4:	add	r0, sp, #7
   1adc8:	mov	r2, #6
   1adcc:	movt	r1, #1
   1add0:	bl	11368 <bcmp@plt>
   1add4:	cmp	r0, #0
   1add8:	mov	r4, r0
   1addc:	movwne	r4, #1
   1ade0:	mov	r0, r4
   1ade4:	sub	sp, fp, #8
   1ade8:	pop	{r4, sl, fp, pc}
   1adec:	push	{r4, r5, r6, r7, fp, lr}
   1adf0:	add	fp, sp, #16
   1adf4:	mov	r4, r1
   1adf8:	mov	r1, #0
   1adfc:	mov	r6, r2
   1ae00:	bl	11410 <setlocale@plt>
   1ae04:	cmp	r0, #0
   1ae08:	beq	1ae38 <__assert_fail@plt+0x9950>
   1ae0c:	mov	r7, r0
   1ae10:	bl	11374 <strlen@plt>
   1ae14:	cmp	r0, r6
   1ae18:	bcs	1ae54 <__assert_fail@plt+0x996c>
   1ae1c:	add	r2, r0, #1
   1ae20:	mov	r0, r4
   1ae24:	mov	r1, r7
   1ae28:	bl	11254 <memcpy@plt>
   1ae2c:	mov	r5, #0
   1ae30:	mov	r0, r5
   1ae34:	pop	{r4, r5, r6, r7, fp, pc}
   1ae38:	mov	r5, #22
   1ae3c:	cmp	r6, #0
   1ae40:	beq	1ae7c <__assert_fail@plt+0x9994>
   1ae44:	mov	r0, #0
   1ae48:	strb	r0, [r4]
   1ae4c:	mov	r0, r5
   1ae50:	pop	{r4, r5, r6, r7, fp, pc}
   1ae54:	mov	r5, #34	; 0x22
   1ae58:	cmp	r6, #0
   1ae5c:	beq	1ae7c <__assert_fail@plt+0x9994>
   1ae60:	sub	r6, r6, #1
   1ae64:	mov	r0, r4
   1ae68:	mov	r1, r7
   1ae6c:	mov	r2, r6
   1ae70:	bl	11254 <memcpy@plt>
   1ae74:	mov	r0, #0
   1ae78:	strb	r0, [r4, r6]
   1ae7c:	mov	r0, r5
   1ae80:	pop	{r4, r5, r6, r7, fp, pc}
   1ae84:	mov	r1, #0
   1ae88:	b	11410 <setlocale@plt>
   1ae8c:	cmp	r3, #0
   1ae90:	cmpeq	r2, #0
   1ae94:	bne	1aeac <__assert_fail@plt+0x99c4>
   1ae98:	cmp	r1, #0
   1ae9c:	cmpeq	r0, #0
   1aea0:	mvnne	r1, #0
   1aea4:	mvnne	r0, #0
   1aea8:	b	1aec8 <__assert_fail@plt+0x99e0>
   1aeac:	sub	sp, sp, #8
   1aeb0:	push	{sp, lr}
   1aeb4:	bl	1aed8 <__assert_fail@plt+0x99f0>
   1aeb8:	ldr	lr, [sp, #4]
   1aebc:	add	sp, sp, #8
   1aec0:	pop	{r2, r3}
   1aec4:	bx	lr
   1aec8:	push	{r1, lr}
   1aecc:	mov	r0, #8
   1aed0:	bl	111e8 <raise@plt>
   1aed4:	pop	{r1, pc}
   1aed8:	cmp	r1, r3
   1aedc:	cmpeq	r0, r2
   1aee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aee4:	mov	r4, r0
   1aee8:	movcc	r0, #0
   1aeec:	mov	r5, r1
   1aef0:	ldr	lr, [sp, #36]	; 0x24
   1aef4:	movcc	r1, r0
   1aef8:	bcc	1aff4 <__assert_fail@plt+0x9b0c>
   1aefc:	cmp	r3, #0
   1af00:	clzeq	ip, r2
   1af04:	clzne	ip, r3
   1af08:	addeq	ip, ip, #32
   1af0c:	cmp	r5, #0
   1af10:	clzeq	r1, r4
   1af14:	addeq	r1, r1, #32
   1af18:	clzne	r1, r5
   1af1c:	sub	ip, ip, r1
   1af20:	sub	sl, ip, #32
   1af24:	lsl	r9, r3, ip
   1af28:	rsb	fp, ip, #32
   1af2c:	orr	r9, r9, r2, lsl sl
   1af30:	orr	r9, r9, r2, lsr fp
   1af34:	lsl	r8, r2, ip
   1af38:	cmp	r5, r9
   1af3c:	cmpeq	r4, r8
   1af40:	movcc	r0, #0
   1af44:	movcc	r1, r0
   1af48:	bcc	1af64 <__assert_fail@plt+0x9a7c>
   1af4c:	mov	r0, #1
   1af50:	subs	r4, r4, r8
   1af54:	lsl	r1, r0, sl
   1af58:	orr	r1, r1, r0, lsr fp
   1af5c:	lsl	r0, r0, ip
   1af60:	sbc	r5, r5, r9
   1af64:	cmp	ip, #0
   1af68:	beq	1aff4 <__assert_fail@plt+0x9b0c>
   1af6c:	lsr	r6, r8, #1
   1af70:	orr	r6, r6, r9, lsl #31
   1af74:	lsr	r7, r9, #1
   1af78:	mov	r2, ip
   1af7c:	b	1afa0 <__assert_fail@plt+0x9ab8>
   1af80:	subs	r3, r4, r6
   1af84:	sbc	r8, r5, r7
   1af88:	adds	r3, r3, r3
   1af8c:	adc	r8, r8, r8
   1af90:	adds	r4, r3, #1
   1af94:	adc	r5, r8, #0
   1af98:	subs	r2, r2, #1
   1af9c:	beq	1afbc <__assert_fail@plt+0x9ad4>
   1afa0:	cmp	r5, r7
   1afa4:	cmpeq	r4, r6
   1afa8:	bcs	1af80 <__assert_fail@plt+0x9a98>
   1afac:	adds	r4, r4, r4
   1afb0:	adc	r5, r5, r5
   1afb4:	subs	r2, r2, #1
   1afb8:	bne	1afa0 <__assert_fail@plt+0x9ab8>
   1afbc:	lsr	r3, r4, ip
   1afc0:	orr	r3, r3, r5, lsl fp
   1afc4:	lsr	r2, r5, ip
   1afc8:	orr	r3, r3, r5, lsr sl
   1afcc:	adds	r0, r0, r4
   1afd0:	mov	r4, r3
   1afd4:	lsl	r3, r2, ip
   1afd8:	orr	r3, r3, r4, lsl sl
   1afdc:	lsl	ip, r4, ip
   1afe0:	orr	r3, r3, r4, lsr fp
   1afe4:	adc	r1, r1, r5
   1afe8:	subs	r0, r0, ip
   1afec:	mov	r5, r2
   1aff0:	sbc	r1, r1, r3
   1aff4:	cmp	lr, #0
   1aff8:	strdne	r4, [lr]
   1affc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b000:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b004:	mov	r7, r0
   1b008:	ldr	r6, [pc, #72]	; 1b058 <__assert_fail@plt+0x9b70>
   1b00c:	ldr	r5, [pc, #72]	; 1b05c <__assert_fail@plt+0x9b74>
   1b010:	add	r6, pc, r6
   1b014:	add	r5, pc, r5
   1b018:	sub	r6, r6, r5
   1b01c:	mov	r8, r1
   1b020:	mov	r9, r2
   1b024:	bl	111a4 <fstatfs64@plt-0x20>
   1b028:	asrs	r6, r6, #2
   1b02c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b030:	mov	r4, #0
   1b034:	add	r4, r4, #1
   1b038:	ldr	r3, [r5], #4
   1b03c:	mov	r2, r9
   1b040:	mov	r1, r8
   1b044:	mov	r0, r7
   1b048:	blx	r3
   1b04c:	cmp	r6, r4
   1b050:	bne	1b034 <__assert_fail@plt+0x9b4c>
   1b054:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b058:	strdeq	r1, [r1], -r4
   1b05c:	andeq	r1, r1, ip, ror #29
   1b060:	bx	lr
   1b064:	ldr	r3, [pc, #12]	; 1b078 <__assert_fail@plt+0x9b90>
   1b068:	mov	r1, #0
   1b06c:	add	r3, pc, r3
   1b070:	ldr	r2, [r3]
   1b074:	b	11398 <__cxa_atexit@plt>
   1b078:	strheq	r2, [r1], -r0

Disassembly of section .fini:

0001b07c <.fini>:
   1b07c:	push	{r3, lr}
   1b080:	pop	{r3, pc}
