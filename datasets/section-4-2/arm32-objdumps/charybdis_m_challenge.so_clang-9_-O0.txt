
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000099c <_init>:
 99c:	push	{r3, lr}
 9a0:	bl	b30 <call_weak_fn>
 9a4:	pop	{r3, pc}

Disassembly of section .plt:

000009a8 <.plt>:
 9a8:	push	{lr}		; (str lr, [sp, #-4]!)
 9ac:	ldr	lr, [pc, #4]	; 9b8 <.plt+0x10>
 9b0:	add	lr, pc, lr
 9b4:	ldr	pc, [lr, #8]!
 9b8:	.word	0x00011648

000009bc <calloc@plt>:
 9bc:	add	ip, pc, #0, 12
 9c0:	add	ip, ip, #69632	; 0x11000
 9c4:	ldr	pc, [ip, #1608]!	; 0x648

000009c8 <rb_current_time@plt>:
 9c8:	add	ip, pc, #0, 12
 9cc:	add	ip, ip, #69632	; 0x11000
 9d0:	ldr	pc, [ip, #1600]!	; 0x640

000009d4 <__cxa_finalize@plt>:
 9d4:	add	ip, pc, #0, 12
 9d8:	add	ip, ip, #69632	; 0x11000
 9dc:	ldr	pc, [ip, #1592]!	; 0x638

000009e0 <RSA_public_encrypt@plt>:
 9e0:	add	ip, pc, #0, 12
 9e4:	add	ip, ip, #69632	; 0x11000
 9e8:	ldr	pc, [ip, #1584]!	; 0x630

000009ec <sendto_one@plt>:
 9ec:	add	ip, pc, #0, 12
 9f0:	add	ip, ip, #69632	; 0x11000
 9f4:	ldr	pc, [ip, #1576]!	; 0x628

000009f8 <free@plt>:
 9f8:	add	ip, pc, #0, 12
 9fc:	add	ip, ip, #69632	; 0x11000
 a00:	ldr	pc, [ip, #1568]!	; 0x620

00000a04 <rb_strcasecmp@plt>:
 a04:	add	ip, pc, #0, 12
 a08:	add	ip, ip, #69632	; 0x11000
 a0c:	ldr	pc, [ip, #1560]!	; 0x618

00000a10 <RSA_size@plt>:
 a10:	add	ip, pc, #0, 12
 a14:	add	ip, ip, #69632	; 0x11000
 a18:	ldr	pc, [ip, #1552]!	; 0x610

00000a1c <rb_outofmemory@plt>:
 a1c:	add	ip, pc, #0, 12
 a20:	add	ip, ip, #69632	; 0x11000
 a24:	ldr	pc, [ip, #1544]!	; 0x608

00000a28 <memcmp@plt>:
 a28:	add	ip, pc, #0, 12
 a2c:	add	ip, ip, #69632	; 0x11000
 a30:	ldr	pc, [ip, #1536]!	; 0x600

00000a34 <sendto_realops_snomask@plt>:
 a34:	add	ip, pc, #0, 12
 a38:	add	ip, ip, #69632	; 0x11000
 a3c:	ldr	pc, [ip, #1528]!	; 0x5f8

00000a40 <rb_base64_decode@plt>:
 a40:	add	ip, pc, #0, 12
 a44:	add	ip, ip, #69632	; 0x11000
 a48:	ldr	pc, [ip, #1520]!	; 0x5f0

00000a4c <strcpy@plt>:
 a4c:	add	ip, pc, #0, 12
 a50:	add	ip, ip, #69632	; 0x11000
 a54:	ldr	pc, [ip, #1512]!	; 0x5e8

00000a58 <malloc@plt>:
 a58:	add	ip, pc, #0, 12
 a5c:	add	ip, ip, #69632	; 0x11000
 a60:	ldr	pc, [ip, #1504]!	; 0x5e0

00000a64 <rb_get_random@plt>:
 a64:	add	ip, pc, #0, 12
 a68:	add	ip, ip, #69632	; 0x11000
 a6c:	ldr	pc, [ip, #1496]!	; 0x5d8

00000a70 <__gmon_start__@plt>:
 a70:	add	ip, pc, #0, 12
 a74:	add	ip, ip, #69632	; 0x11000
 a78:	ldr	pc, [ip, #1488]!	; 0x5d0

00000a7c <OPENSSL_init_crypto@plt>:
 a7c:	add	ip, pc, #0, 12
 a80:	add	ip, ip, #69632	; 0x11000
 a84:	ldr	pc, [ip, #1480]!	; 0x5c8

00000a88 <send_oper_motd@plt>:
 a88:	add	ip, pc, #0, 12
 a8c:	add	ip, ip, #69632	; 0x11000
 a90:	ldr	pc, [ip, #1472]!	; 0x5c0

00000a94 <sendto_one_numeric@plt>:
 a94:	add	ip, pc, #0, 12
 a98:	add	ip, ip, #69632	; 0x11000
 a9c:	ldr	pc, [ip, #1464]!	; 0x5b8

00000aa0 <strlen@plt>:
 aa0:	add	ip, pc, #0, 12
 aa4:	add	ip, ip, #69632	; 0x11000
 aa8:	ldr	pc, [ip, #1456]!	; 0x5b0

00000aac <SHA1_Update@plt>:
 aac:	add	ip, pc, #0, 12
 ab0:	add	ip, ip, #69632	; 0x11000
 ab4:	ldr	pc, [ip, #1448]!	; 0x5a8

00000ab8 <ERR_error_string@plt>:
 ab8:	add	ip, pc, #0, 12
 abc:	add	ip, ip, #69632	; 0x11000
 ac0:	ldr	pc, [ip, #1440]!	; 0x5a0

00000ac4 <ilog@plt>:
 ac4:	add	ip, pc, #0, 12
 ac8:	add	ip, ip, #69632	; 0x11000
 acc:	ldr	pc, [ip, #1432]!	; 0x598

00000ad0 <SHA1_Init@plt>:
 ad0:	add	ip, pc, #0, 12
 ad4:	add	ip, ip, #69632	; 0x11000
 ad8:	ldr	pc, [ip, #1424]!	; 0x590

00000adc <ERR_get_error@plt>:
 adc:	add	ip, pc, #0, 12
 ae0:	add	ip, ip, #69632	; 0x11000
 ae4:	ldr	pc, [ip, #1416]!	; 0x588

00000ae8 <sendto_one_notice@plt>:
 ae8:	add	ip, pc, #0, 12
 aec:	add	ip, ip, #69632	; 0x11000
 af0:	ldr	pc, [ip, #1408]!	; 0x580

00000af4 <rb_strlcpy@plt>:
 af4:	add	ip, pc, #0, 12
 af8:	add	ip, ip, #69632	; 0x11000
 afc:	ldr	pc, [ip, #1400]!	; 0x578

00000b00 <find_oper_conf@plt>:
 b00:	add	ip, pc, #0, 12
 b04:	add	ip, ip, #69632	; 0x11000
 b08:	ldr	pc, [ip, #1392]!	; 0x570

00000b0c <oper_up@plt>:
 b0c:	add	ip, pc, #0, 12
 b10:	add	ip, ip, #69632	; 0x11000
 b14:	ldr	pc, [ip, #1384]!	; 0x568

00000b18 <rb_base64_encode@plt>:
 b18:	add	ip, pc, #0, 12
 b1c:	add	ip, ip, #69632	; 0x11000
 b20:	ldr	pc, [ip, #1376]!	; 0x560

00000b24 <SHA1_Final@plt>:
 b24:	add	ip, pc, #0, 12
 b28:	add	ip, ip, #69632	; 0x11000
 b2c:	ldr	pc, [ip, #1368]!	; 0x558

Disassembly of section .text:

00000b30 <call_weak_fn>:
     b30:	ldr	r3, [pc, #20]	; b4c <call_weak_fn+0x1c>
     b34:	ldr	r2, [pc, #20]	; b50 <call_weak_fn+0x20>
     b38:	add	r3, pc, r3
     b3c:	ldr	r2, [r3, r2]
     b40:	cmp	r2, #0
     b44:	bxeq	lr
     b48:	b	a70 <__gmon_start__@plt>
     b4c:	.word	0x000114c0
     b50:	.word	0x00000090

00000b54 <deregister_tm_clones>:
     b54:	ldr	r0, [pc, #44]	; b88 <deregister_tm_clones+0x34>
     b58:	ldr	r3, [pc, #44]	; b8c <deregister_tm_clones+0x38>
     b5c:	add	r0, pc, r0
     b60:	add	r3, pc, r3
     b64:	cmp	r3, r0
     b68:	ldr	r3, [pc, #32]	; b90 <deregister_tm_clones+0x3c>
     b6c:	add	r3, pc, r3
     b70:	bxeq	lr
     b74:	ldr	r2, [pc, #24]	; b94 <deregister_tm_clones+0x40>
     b78:	ldr	r3, [r3, r2]
     b7c:	cmp	r3, #0
     b80:	bxeq	lr
     b84:	bx	r3
     b88:	.word	0x000115b4
     b8c:	.word	0x000115b0
     b90:	.word	0x0001148c
     b94:	.word	0x0000008c

00000b98 <register_tm_clones>:
     b98:	ldr	r0, [pc, #56]	; bd8 <register_tm_clones+0x40>
     b9c:	ldr	r3, [pc, #56]	; bdc <register_tm_clones+0x44>
     ba0:	add	r0, pc, r0
     ba4:	add	r3, pc, r3
     ba8:	sub	r1, r3, r0
     bac:	ldr	r3, [pc, #44]	; be0 <register_tm_clones+0x48>
     bb0:	asr	r1, r1, #2
     bb4:	add	r3, pc, r3
     bb8:	add	r1, r1, r1, lsr #31
     bbc:	asrs	r1, r1, #1
     bc0:	bxeq	lr
     bc4:	ldr	r2, [pc, #24]	; be4 <register_tm_clones+0x4c>
     bc8:	ldr	r3, [r3, r2]
     bcc:	cmp	r3, #0
     bd0:	bxeq	lr
     bd4:	bx	r3
     bd8:	.word	0x00011570
     bdc:	.word	0x0001156c
     be0:	.word	0x00011444
     be4:	.word	0x00000094

00000be8 <__do_global_dtors_aux>:
     be8:	ldr	r3, [pc, #76]	; c3c <__do_global_dtors_aux+0x54>
     bec:	ldr	r2, [pc, #76]	; c40 <__do_global_dtors_aux+0x58>
     bf0:	add	r3, pc, r3
     bf4:	add	r2, pc, r2
     bf8:	ldrb	r3, [r3]
     bfc:	cmp	r3, #0
     c00:	bxne	lr
     c04:	ldr	r3, [pc, #56]	; c44 <__do_global_dtors_aux+0x5c>
     c08:	push	{r4, lr}
     c0c:	ldr	r3, [r2, r3]
     c10:	cmp	r3, #0
     c14:	beq	c24 <__do_global_dtors_aux+0x3c>
     c18:	ldr	r3, [pc, #40]	; c48 <__do_global_dtors_aux+0x60>
     c1c:	ldr	r0, [pc, r3]
     c20:	bl	9d4 <__cxa_finalize@plt>
     c24:	bl	b54 <deregister_tm_clones>
     c28:	ldr	r3, [pc, #28]	; c4c <__do_global_dtors_aux+0x64>
     c2c:	mov	r2, #1
     c30:	add	r3, pc, r3
     c34:	strb	r2, [r3]
     c38:	pop	{r4, pc}
     c3c:	.word	0x00011520
     c40:	.word	0x00011404
     c44:	.word	0x00000088
     c48:	.word	0x0001147c
     c4c:	.word	0x000114e0

00000c50 <frame_dummy>:
     c50:	b	b98 <register_tm_clones>

00000c54 <m_challenge>:
     c54:	push	{r4, sl, fp, lr}
     c58:	add	fp, sp, #8
     c5c:	sub	sp, sp, #552	; 0x228
     c60:	ldr	ip, [fp, #8]
     c64:	str	r0, [fp, #-12]
     c68:	str	r1, [fp, #-16]
     c6c:	str	r2, [fp, #-20]	; 0xffffffec
     c70:	str	r3, [fp, #-24]	; 0xffffffe8
     c74:	movw	r0, #0
     c78:	str	r0, [fp, #-32]	; 0xffffffe0
     c7c:	str	r0, [sp, #108]	; 0x6c
     c80:	ldr	r0, [fp, #-20]	; 0xffffffec
     c84:	ldr	r0, [r0, #56]	; 0x38
     c88:	and	r0, r0, #4096	; 0x1000
     c8c:	cmp	r0, #0
     c90:	beq	cc4 <m_challenge+0x70>
     c94:	ldr	r0, [pc, #2316]	; 15a8 <m_challenge+0x954>
     c98:	add	r1, pc, r0
     c9c:	ldr	r0, [pc, #2312]	; 15ac <m_challenge+0x958>
     ca0:	ldr	r0, [pc, r0]
     ca4:	add	r2, r0, #88	; 0x58
     ca8:	ldr	r0, [fp, #-20]	; 0xffffffec
     cac:	ldr	r3, [fp, #-20]	; 0xffffffec
     cb0:	add	r3, r3, #88	; 0x58
     cb4:	bl	9ec <sendto_one@plt>
     cb8:	ldr	r0, [fp, #-20]	; 0xffffffec
     cbc:	bl	a88 <send_oper_motd@plt>
     cc0:	b	151c <m_challenge+0x8c8>
     cc4:	ldr	r0, [fp, #8]
     cc8:	ldr	r0, [r0, #4]
     ccc:	ldrb	r0, [r0]
     cd0:	cmp	r0, #43	; 0x2b
     cd4:	bne	10d8 <m_challenge+0x484>
     cd8:	ldr	r0, [fp, #-20]	; 0xffffffec
     cdc:	ldr	r0, [r0, #432]	; 0x1b0
     ce0:	ldr	r0, [r0, #284]	; 0x11c
     ce4:	movw	r1, #0
     ce8:	cmp	r0, r1
     cec:	bne	cf4 <m_challenge+0xa0>
     cf0:	b	151c <m_challenge+0x8c8>
     cf4:	bl	9c8 <rb_current_time@plt>
     cf8:	ldr	r1, [fp, #-20]	; 0xffffffec
     cfc:	ldr	r1, [r1, #432]	; 0x1b0
     d00:	ldr	r1, [r1, #304]	; 0x130
     d04:	sub	r0, r0, r1
     d08:	cmp	r0, #180	; 0xb4
     d0c:	ble	df4 <m_challenge+0x1a0>
     d10:	ldr	r0, [pc, #2180]	; 159c <m_challenge+0x948>
     d14:	add	r1, pc, r0
     d18:	ldr	r0, [pc, #2176]	; 15a0 <m_challenge+0x94c>
     d1c:	ldr	r0, [pc, r0]
     d20:	add	r2, r0, #88	; 0x58
     d24:	ldr	r0, [fp, #-20]	; 0xffffffec
     d28:	ldr	r3, [fp, #-20]	; 0xffffffec
     d2c:	add	r3, r3, #88	; 0x58
     d30:	bl	9ec <sendto_one@plt>
     d34:	ldr	r0, [pc, #2140]	; 1598 <m_challenge+0x944>
     d38:	add	r1, pc, r0
     d3c:	ldr	r0, [fp, #-20]	; 0xffffffec
     d40:	ldr	r0, [r0, #24]
     d44:	ldr	r2, [r0, #32]
     d48:	ldr	r0, [fp, #-20]	; 0xffffffec
     d4c:	add	r3, r0, #88	; 0x58
     d50:	ldr	r0, [fp, #-20]	; 0xffffffec
     d54:	add	r0, r0, #152	; 0x98
     d58:	ldr	ip, [fp, #-20]	; 0xffffffec
     d5c:	add	ip, ip, #163	; 0xa3
     d60:	ldr	lr, [fp, #-20]	; 0xffffffec
     d64:	movw	r4, #291	; 0x123
     d68:	add	lr, lr, r4
     d6c:	movw	r4, #4
     d70:	str	r0, [sp, #100]	; 0x64
     d74:	mov	r0, r4
     d78:	ldr	r4, [sp, #100]	; 0x64
     d7c:	str	r4, [sp]
     d80:	str	ip, [sp, #4]
     d84:	str	lr, [sp, #8]
     d88:	bl	ac4 <ilog@plt>
     d8c:	ldr	r0, [pc, #2048]	; 1594 <m_challenge+0x940>
     d90:	ldr	r0, [pc, r0]
     d94:	ldr	r0, [r0, #84]	; 0x54
     d98:	cmp	r0, #0
     d9c:	beq	de8 <m_challenge+0x194>
     da0:	ldr	r0, [pc, #2044]	; 15a4 <m_challenge+0x950>
     da4:	add	r2, pc, r0
     da8:	ldr	r0, [fp, #-20]	; 0xffffffec
     dac:	add	r3, r0, #88	; 0x58
     db0:	ldr	r0, [fp, #-20]	; 0xffffffec
     db4:	add	r0, r0, #152	; 0x98
     db8:	ldr	r1, [fp, #-20]	; 0xffffffec
     dbc:	add	r1, r1, #163	; 0xa3
     dc0:	movw	ip, #256	; 0x100
     dc4:	str	r0, [sp, #96]	; 0x60
     dc8:	mov	r0, ip
     dcc:	str	r1, [sp, #92]	; 0x5c
     dd0:	mov	r1, ip
     dd4:	ldr	ip, [sp, #96]	; 0x60
     dd8:	str	ip, [sp]
     ddc:	ldr	lr, [sp, #92]	; 0x5c
     de0:	str	lr, [sp, #4]
     de4:	bl	a34 <sendto_realops_snomask@plt>
     de8:	ldr	r0, [fp, #-20]	; 0xffffffec
     dec:	bl	15b0 <cleanup_challenge>
     df0:	b	151c <m_challenge+0x8c8>
     df4:	ldr	r0, [fp, #8]
     df8:	ldr	r1, [r0, #4]
     dfc:	add	r1, r1, #1
     e00:	str	r1, [r0, #4]
     e04:	ldr	r0, [fp, #8]
     e08:	ldr	r0, [r0, #4]
     e0c:	ldr	r1, [fp, #8]
     e10:	ldr	r1, [r1, #4]
     e14:	str	r0, [sp, #88]	; 0x58
     e18:	mov	r0, r1
     e1c:	bl	aa0 <strlen@plt>
     e20:	ldr	r1, [sp, #88]	; 0x58
     e24:	str	r0, [sp, #84]	; 0x54
     e28:	mov	r0, r1
     e2c:	ldr	r1, [sp, #84]	; 0x54
     e30:	add	r2, sp, #108	; 0x6c
     e34:	bl	a40 <rb_base64_decode@plt>
     e38:	str	r0, [sp, #116]	; 0x74
     e3c:	ldr	r0, [sp, #108]	; 0x6c
     e40:	cmp	r0, #20
     e44:	bne	e68 <m_challenge+0x214>
     e48:	ldr	r0, [fp, #-20]	; 0xffffffec
     e4c:	ldr	r0, [r0, #432]	; 0x1b0
     e50:	ldr	r0, [r0, #284]	; 0x11c
     e54:	ldr	r1, [sp, #116]	; 0x74
     e58:	mov	r2, #20
     e5c:	bl	a28 <memcmp@plt>
     e60:	cmp	r0, #0
     e64:	beq	f54 <m_challenge+0x300>
     e68:	ldr	r0, [pc, #1816]	; 1588 <m_challenge+0x934>
     e6c:	add	r1, pc, r0
     e70:	ldr	r0, [pc, #1812]	; 158c <m_challenge+0x938>
     e74:	ldr	r0, [pc, r0]
     e78:	add	r2, r0, #88	; 0x58
     e7c:	ldr	r0, [fp, #-20]	; 0xffffffec
     e80:	ldr	r3, [fp, #-20]	; 0xffffffec
     e84:	add	r3, r3, #88	; 0x58
     e88:	bl	9ec <sendto_one@plt>
     e8c:	ldr	r0, [pc, #1776]	; 1584 <m_challenge+0x930>
     e90:	add	r1, pc, r0
     e94:	ldr	r0, [fp, #-20]	; 0xffffffec
     e98:	ldr	r0, [r0, #24]
     e9c:	ldr	r2, [r0, #32]
     ea0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ea4:	add	r3, r0, #88	; 0x58
     ea8:	ldr	r0, [fp, #-20]	; 0xffffffec
     eac:	add	r0, r0, #152	; 0x98
     eb0:	ldr	ip, [fp, #-20]	; 0xffffffec
     eb4:	add	ip, ip, #163	; 0xa3
     eb8:	ldr	lr, [fp, #-20]	; 0xffffffec
     ebc:	movw	r4, #291	; 0x123
     ec0:	add	lr, lr, r4
     ec4:	movw	r4, #4
     ec8:	str	r0, [sp, #80]	; 0x50
     ecc:	mov	r0, r4
     ed0:	ldr	r4, [sp, #80]	; 0x50
     ed4:	str	r4, [sp]
     ed8:	str	ip, [sp, #4]
     edc:	str	lr, [sp, #8]
     ee0:	bl	ac4 <ilog@plt>
     ee4:	ldr	r0, [pc, #1684]	; 1580 <m_challenge+0x92c>
     ee8:	ldr	r0, [pc, r0]
     eec:	ldr	r0, [r0, #84]	; 0x54
     ef0:	cmp	r0, #0
     ef4:	beq	f40 <m_challenge+0x2ec>
     ef8:	ldr	r0, [pc, #1680]	; 1590 <m_challenge+0x93c>
     efc:	add	r2, pc, r0
     f00:	ldr	r0, [fp, #-20]	; 0xffffffec
     f04:	add	r3, r0, #88	; 0x58
     f08:	ldr	r0, [fp, #-20]	; 0xffffffec
     f0c:	add	r0, r0, #152	; 0x98
     f10:	ldr	r1, [fp, #-20]	; 0xffffffec
     f14:	add	r1, r1, #163	; 0xa3
     f18:	movw	ip, #256	; 0x100
     f1c:	str	r0, [sp, #76]	; 0x4c
     f20:	mov	r0, ip
     f24:	str	r1, [sp, #72]	; 0x48
     f28:	mov	r1, ip
     f2c:	ldr	ip, [sp, #76]	; 0x4c
     f30:	str	ip, [sp]
     f34:	ldr	lr, [sp, #72]	; 0x48
     f38:	str	lr, [sp, #4]
     f3c:	bl	a34 <sendto_realops_snomask@plt>
     f40:	ldr	r0, [sp, #116]	; 0x74
     f44:	bl	1628 <rb_free>
     f48:	ldr	r0, [fp, #-20]	; 0xffffffec
     f4c:	bl	15b0 <cleanup_challenge>
     f50:	b	151c <m_challenge+0x8c8>
     f54:	ldr	r0, [sp, #116]	; 0x74
     f58:	bl	1628 <rb_free>
     f5c:	ldr	r0, [fp, #-20]	; 0xffffffec
     f60:	add	r0, r0, #152	; 0x98
     f64:	ldr	r1, [fp, #-20]	; 0xffffffec
     f68:	add	r1, r1, #227	; 0xe3
     f6c:	ldr	r2, [fp, #-20]	; 0xffffffec
     f70:	movw	r3, #291	; 0x123
     f74:	add	r2, r2, r3
     f78:	ldr	r3, [fp, #-20]	; 0xffffffec
     f7c:	ldr	r3, [r3, #24]
     f80:	ldr	r3, [r3, #32]
     f84:	bl	b00 <find_oper_conf@plt>
     f88:	str	r0, [fp, #-28]	; 0xffffffe4
     f8c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     f90:	movw	r1, #0
     f94:	cmp	r0, r1
     f98:	bne	1068 <m_challenge+0x414>
     f9c:	ldr	r0, [pc, #1492]	; 1578 <m_challenge+0x924>
     fa0:	add	r2, pc, r0
     fa4:	ldr	r0, [fp, #-20]	; 0xffffffec
     fa8:	movw	r1, #491	; 0x1eb
     fac:	bl	a94 <sendto_one_numeric@plt>
     fb0:	ldr	r0, [pc, #1468]	; 1574 <m_challenge+0x920>
     fb4:	add	r1, pc, r0
     fb8:	ldr	r0, [fp, #-20]	; 0xffffffec
     fbc:	ldr	r0, [r0, #24]
     fc0:	ldr	r2, [r0, #32]
     fc4:	ldr	r0, [fp, #-20]	; 0xffffffec
     fc8:	add	r3, r0, #88	; 0x58
     fcc:	ldr	r0, [fp, #-20]	; 0xffffffec
     fd0:	add	r0, r0, #152	; 0x98
     fd4:	ldr	ip, [fp, #-20]	; 0xffffffec
     fd8:	add	ip, ip, #163	; 0xa3
     fdc:	ldr	lr, [fp, #-20]	; 0xffffffec
     fe0:	movw	r4, #291	; 0x123
     fe4:	add	lr, lr, r4
     fe8:	movw	r4, #4
     fec:	str	r0, [sp, #68]	; 0x44
     ff0:	mov	r0, r4
     ff4:	ldr	r4, [sp, #68]	; 0x44
     ff8:	str	r4, [sp]
     ffc:	str	ip, [sp, #4]
    1000:	str	lr, [sp, #8]
    1004:	bl	ac4 <ilog@plt>
    1008:	ldr	r0, [pc, #1376]	; 1570 <m_challenge+0x91c>
    100c:	ldr	r0, [pc, r0]
    1010:	ldr	r0, [r0, #84]	; 0x54
    1014:	cmp	r0, #0
    1018:	beq	1064 <m_challenge+0x410>
    101c:	ldr	r0, [pc, #1368]	; 157c <m_challenge+0x928>
    1020:	add	r2, pc, r0
    1024:	ldr	r0, [fp, #-20]	; 0xffffffec
    1028:	add	r3, r0, #88	; 0x58
    102c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1030:	add	r0, r0, #152	; 0x98
    1034:	ldr	r1, [fp, #-20]	; 0xffffffec
    1038:	add	r1, r1, #163	; 0xa3
    103c:	movw	ip, #256	; 0x100
    1040:	str	r0, [sp, #64]	; 0x40
    1044:	mov	r0, ip
    1048:	str	r1, [sp, #60]	; 0x3c
    104c:	mov	r1, ip
    1050:	ldr	ip, [sp, #64]	; 0x40
    1054:	str	ip, [sp]
    1058:	ldr	lr, [sp, #60]	; 0x3c
    105c:	str	lr, [sp, #4]
    1060:	bl	a34 <sendto_realops_snomask@plt>
    1064:	b	151c <m_challenge+0x8c8>
    1068:	ldr	r0, [fp, #-20]	; 0xffffffec
    106c:	bl	15b0 <cleanup_challenge>
    1070:	ldr	r0, [fp, #-20]	; 0xffffffec
    1074:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1078:	bl	b0c <oper_up@plt>
    107c:	ldr	r0, [pc, #1256]	; 156c <m_challenge+0x918>
    1080:	add	r1, pc, r0
    1084:	ldr	r0, [fp, #-20]	; 0xffffffec
    1088:	ldr	r0, [r0, #24]
    108c:	ldr	r2, [r0, #32]
    1090:	ldr	r0, [fp, #-20]	; 0xffffffec
    1094:	add	r3, r0, #88	; 0x58
    1098:	ldr	r0, [fp, #-20]	; 0xffffffec
    109c:	add	r0, r0, #152	; 0x98
    10a0:	ldr	ip, [fp, #-20]	; 0xffffffec
    10a4:	add	ip, ip, #163	; 0xa3
    10a8:	ldr	lr, [fp, #-20]	; 0xffffffec
    10ac:	movw	r4, #291	; 0x123
    10b0:	add	lr, lr, r4
    10b4:	movw	r4, #3
    10b8:	str	r0, [sp, #56]	; 0x38
    10bc:	mov	r0, r4
    10c0:	ldr	r4, [sp, #56]	; 0x38
    10c4:	str	r4, [sp]
    10c8:	str	ip, [sp, #4]
    10cc:	str	lr, [sp, #8]
    10d0:	bl	ac4 <ilog@plt>
    10d4:	b	151c <m_challenge+0x8c8>
    10d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    10dc:	bl	15b0 <cleanup_challenge>
    10e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    10e4:	add	r0, r0, #152	; 0x98
    10e8:	ldr	r1, [fp, #-20]	; 0xffffffec
    10ec:	add	r1, r1, #227	; 0xe3
    10f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    10f4:	movw	r3, #291	; 0x123
    10f8:	add	r2, r2, r3
    10fc:	ldr	r3, [fp, #8]
    1100:	ldr	r3, [r3, #4]
    1104:	bl	b00 <find_oper_conf@plt>
    1108:	str	r0, [fp, #-28]	; 0xffffffe4
    110c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1110:	movw	r1, #0
    1114:	cmp	r0, r1
    1118:	bne	11e4 <m_challenge+0x590>
    111c:	ldr	r0, [pc, #1088]	; 1564 <m_challenge+0x910>
    1120:	add	r2, pc, r0
    1124:	ldr	r0, [fp, #-20]	; 0xffffffec
    1128:	movw	r1, #491	; 0x1eb
    112c:	bl	a94 <sendto_one_numeric@plt>
    1130:	ldr	r0, [pc, #1064]	; 1560 <m_challenge+0x90c>
    1134:	add	r1, pc, r0
    1138:	ldr	r0, [fp, #8]
    113c:	ldr	r2, [r0, #4]
    1140:	ldr	r0, [fp, #-20]	; 0xffffffec
    1144:	add	r3, r0, #88	; 0x58
    1148:	ldr	r0, [fp, #-20]	; 0xffffffec
    114c:	add	r0, r0, #152	; 0x98
    1150:	ldr	ip, [fp, #-20]	; 0xffffffec
    1154:	add	ip, ip, #163	; 0xa3
    1158:	ldr	lr, [fp, #-20]	; 0xffffffec
    115c:	movw	r4, #291	; 0x123
    1160:	add	lr, lr, r4
    1164:	movw	r4, #4
    1168:	str	r0, [sp, #52]	; 0x34
    116c:	mov	r0, r4
    1170:	ldr	r4, [sp, #52]	; 0x34
    1174:	str	r4, [sp]
    1178:	str	ip, [sp, #4]
    117c:	str	lr, [sp, #8]
    1180:	bl	ac4 <ilog@plt>
    1184:	ldr	r0, [pc, #976]	; 155c <m_challenge+0x908>
    1188:	ldr	r0, [pc, r0]
    118c:	ldr	r0, [r0, #84]	; 0x54
    1190:	cmp	r0, #0
    1194:	beq	11e0 <m_challenge+0x58c>
    1198:	ldr	r0, [pc, #968]	; 1568 <m_challenge+0x914>
    119c:	add	r2, pc, r0
    11a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    11a4:	add	r3, r0, #88	; 0x58
    11a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    11ac:	add	r0, r0, #152	; 0x98
    11b0:	ldr	r1, [fp, #-20]	; 0xffffffec
    11b4:	add	r1, r1, #163	; 0xa3
    11b8:	movw	ip, #256	; 0x100
    11bc:	str	r0, [sp, #48]	; 0x30
    11c0:	mov	r0, ip
    11c4:	str	r1, [sp, #44]	; 0x2c
    11c8:	mov	r1, ip
    11cc:	ldr	ip, [sp, #48]	; 0x30
    11d0:	str	ip, [sp]
    11d4:	ldr	lr, [sp, #44]	; 0x2c
    11d8:	str	lr, [sp, #4]
    11dc:	bl	a34 <sendto_realops_snomask@plt>
    11e0:	b	151c <m_challenge+0x8c8>
    11e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    11e8:	ldr	r0, [r0, #40]	; 0x28
    11ec:	movw	r1, #0
    11f0:	cmp	r0, r1
    11f4:	bne	120c <m_challenge+0x5b8>
    11f8:	ldr	r0, [pc, #804]	; 1524 <m_challenge+0x8d0>
    11fc:	add	r1, pc, r0
    1200:	ldr	r0, [fp, #-20]	; 0xffffffec
    1204:	bl	ae8 <sendto_one_notice@plt>
    1208:	b	151c <m_challenge+0x8c8>
    120c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1210:	ldr	r0, [r0, #20]
    1214:	and	r0, r0, #524288	; 0x80000
    1218:	cmp	r0, #0
    121c:	beq	1300 <m_challenge+0x6ac>
    1220:	ldr	r0, [fp, #-20]	; 0xffffffec
    1224:	ldr	r0, [r0, #56]	; 0x38
    1228:	and	r0, r0, #16384	; 0x4000
    122c:	cmp	r0, #0
    1230:	bne	1300 <m_challenge+0x6ac>
    1234:	ldr	r0, [pc, #756]	; 1530 <m_challenge+0x8dc>
    1238:	add	r2, pc, r0
    123c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1240:	movw	r1, #491	; 0x1eb
    1244:	bl	a94 <sendto_one_numeric@plt>
    1248:	ldr	r0, [pc, #732]	; 152c <m_challenge+0x8d8>
    124c:	add	r1, pc, r0
    1250:	ldr	r0, [fp, #8]
    1254:	ldr	r2, [r0, #4]
    1258:	ldr	r0, [fp, #-20]	; 0xffffffec
    125c:	add	r3, r0, #88	; 0x58
    1260:	ldr	r0, [fp, #-20]	; 0xffffffec
    1264:	add	r0, r0, #152	; 0x98
    1268:	ldr	ip, [fp, #-20]	; 0xffffffec
    126c:	add	ip, ip, #163	; 0xa3
    1270:	ldr	lr, [fp, #-20]	; 0xffffffec
    1274:	movw	r4, #291	; 0x123
    1278:	add	lr, lr, r4
    127c:	movw	r4, #4
    1280:	str	r0, [sp, #40]	; 0x28
    1284:	mov	r0, r4
    1288:	ldr	r4, [sp, #40]	; 0x28
    128c:	str	r4, [sp]
    1290:	str	ip, [sp, #4]
    1294:	str	lr, [sp, #8]
    1298:	bl	ac4 <ilog@plt>
    129c:	ldr	r0, [pc, #644]	; 1528 <m_challenge+0x8d4>
    12a0:	ldr	r0, [pc, r0]
    12a4:	ldr	r0, [r0, #84]	; 0x54
    12a8:	cmp	r0, #0
    12ac:	beq	12fc <m_challenge+0x6a8>
    12b0:	ldr	r0, [pc, #636]	; 1534 <m_challenge+0x8e0>
    12b4:	add	r2, pc, r0
    12b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    12bc:	add	r3, r0, #88	; 0x58
    12c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    12c4:	add	r0, r0, #152	; 0x98
    12c8:	ldr	r1, [fp, #-20]	; 0xffffffec
    12cc:	add	r1, r1, #163	; 0xa3
    12d0:	movw	ip, #256	; 0x100
    12d4:	str	r0, [sp, #36]	; 0x24
    12d8:	mov	r0, ip
    12dc:	movw	ip, #0
    12e0:	str	r1, [sp, #32]
    12e4:	mov	r1, ip
    12e8:	ldr	ip, [sp, #36]	; 0x24
    12ec:	str	ip, [sp]
    12f0:	ldr	lr, [sp, #32]
    12f4:	str	lr, [sp, #4]
    12f8:	bl	a34 <sendto_realops_snomask@plt>
    12fc:	b	151c <m_challenge+0x8c8>
    1300:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1304:	ldr	r0, [r0, #16]
    1308:	movw	r1, #0
    130c:	cmp	r0, r1
    1310:	beq	1414 <m_challenge+0x7c0>
    1314:	ldr	r0, [fp, #-20]	; 0xffffffec
    1318:	ldr	r0, [r0, #444]	; 0x1bc
    131c:	movw	r1, #0
    1320:	cmp	r0, r1
    1324:	beq	1344 <m_challenge+0x6f0>
    1328:	ldr	r0, [fp, #-20]	; 0xffffffec
    132c:	ldr	r0, [r0, #444]	; 0x1bc
    1330:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1334:	ldr	r1, [r1, #16]
    1338:	bl	a04 <rb_strcasecmp@plt>
    133c:	cmp	r0, #0
    1340:	beq	1410 <m_challenge+0x7bc>
    1344:	ldr	r0, [pc, #520]	; 1554 <m_challenge+0x900>
    1348:	add	r2, pc, r0
    134c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1350:	movw	r1, #491	; 0x1eb
    1354:	bl	a94 <sendto_one_numeric@plt>
    1358:	ldr	r0, [pc, #496]	; 1550 <m_challenge+0x8fc>
    135c:	add	r1, pc, r0
    1360:	ldr	r0, [fp, #8]
    1364:	ldr	r2, [r0, #4]
    1368:	ldr	r0, [fp, #-20]	; 0xffffffec
    136c:	add	r3, r0, #88	; 0x58
    1370:	ldr	r0, [fp, #-20]	; 0xffffffec
    1374:	add	r0, r0, #152	; 0x98
    1378:	ldr	ip, [fp, #-20]	; 0xffffffec
    137c:	add	ip, ip, #163	; 0xa3
    1380:	ldr	lr, [fp, #-20]	; 0xffffffec
    1384:	movw	r4, #291	; 0x123
    1388:	add	lr, lr, r4
    138c:	movw	r4, #4
    1390:	str	r0, [sp, #28]
    1394:	mov	r0, r4
    1398:	ldr	r4, [sp, #28]
    139c:	str	r4, [sp]
    13a0:	str	ip, [sp, #4]
    13a4:	str	lr, [sp, #8]
    13a8:	bl	ac4 <ilog@plt>
    13ac:	ldr	r0, [pc, #408]	; 154c <m_challenge+0x8f8>
    13b0:	ldr	r0, [pc, r0]
    13b4:	ldr	r0, [r0, #84]	; 0x54
    13b8:	cmp	r0, #0
    13bc:	beq	140c <m_challenge+0x7b8>
    13c0:	ldr	r0, [pc, #400]	; 1558 <m_challenge+0x904>
    13c4:	add	r2, pc, r0
    13c8:	ldr	r0, [fp, #-20]	; 0xffffffec
    13cc:	add	r3, r0, #88	; 0x58
    13d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    13d4:	add	r0, r0, #152	; 0x98
    13d8:	ldr	r1, [fp, #-20]	; 0xffffffec
    13dc:	add	r1, r1, #163	; 0xa3
    13e0:	movw	ip, #256	; 0x100
    13e4:	str	r0, [sp, #24]
    13e8:	mov	r0, ip
    13ec:	movw	ip, #0
    13f0:	str	r1, [sp, #20]
    13f4:	mov	r1, ip
    13f8:	ldr	ip, [sp, #24]
    13fc:	str	ip, [sp]
    1400:	ldr	lr, [sp, #20]
    1404:	str	lr, [sp, #4]
    1408:	bl	a34 <sendto_realops_snomask@plt>
    140c:	b	151c <m_challenge+0x8c8>
    1410:	b	1414 <m_challenge+0x7c0>
    1414:	ldr	r0, [fp, #-20]	; 0xffffffec
    1418:	ldr	r0, [r0, #432]	; 0x1b0
    141c:	add	r1, r0, #284	; 0x11c
    1420:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1424:	ldr	r2, [r0, #40]	; 0x28
    1428:	sub	r0, fp, #32
    142c:	bl	1670 <generate_challenge>
    1430:	tst	r0, #1
    1434:	beq	150c <m_challenge+0x8b8>
    1438:	ldr	r0, [fp, #-32]	; 0xffffffe0
    143c:	str	r0, [sp, #104]	; 0x68
    1440:	bl	9c8 <rb_current_time@plt>
    1444:	ldr	r1, [fp, #-20]	; 0xffffffec
    1448:	ldr	r1, [r1, #432]	; 0x1b0
    144c:	str	r0, [r1, #304]	; 0x130
    1450:	add	r0, sp, #123	; 0x7b
    1454:	ldr	r1, [sp, #104]	; 0x68
    1458:	movw	r2, #405	; 0x195
    145c:	bl	af4 <rb_strlcpy@plt>
    1460:	ldr	r1, [pc, #212]	; 153c <m_challenge+0x8e8>
    1464:	add	r1, pc, r1
    1468:	ldr	r2, [pc, #208]	; 1540 <m_challenge+0x8ec>
    146c:	ldr	r2, [pc, r2]
    1470:	add	r2, r2, #88	; 0x58
    1474:	add	r3, sp, #123	; 0x7b
    1478:	str	r0, [sp, #112]	; 0x70
    147c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1480:	ldr	ip, [fp, #-20]	; 0xffffffec
    1484:	add	ip, ip, #88	; 0x58
    1488:	str	r3, [sp, #16]
    148c:	mov	r3, ip
    1490:	ldr	ip, [sp, #16]
    1494:	str	ip, [sp]
    1498:	bl	9ec <sendto_one@plt>
    149c:	ldr	r0, [sp, #112]	; 0x70
    14a0:	movw	r1, #405	; 0x195
    14a4:	cmp	r0, r1
    14a8:	bls	14bc <m_challenge+0x868>
    14ac:	ldr	r0, [sp, #104]	; 0x68
    14b0:	add	r0, r0, #404	; 0x194
    14b4:	str	r0, [sp, #104]	; 0x68
    14b8:	b	14c0 <m_challenge+0x86c>
    14bc:	b	14c4 <m_challenge+0x870>
    14c0:	b	1450 <m_challenge+0x7fc>
    14c4:	ldr	r0, [pc, #120]	; 1544 <m_challenge+0x8f0>
    14c8:	add	r1, pc, r0
    14cc:	ldr	r0, [pc, #116]	; 1548 <m_challenge+0x8f4>
    14d0:	ldr	r0, [pc, r0]
    14d4:	add	r2, r0, #88	; 0x58
    14d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    14dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    14e0:	add	r3, r3, #88	; 0x58
    14e4:	bl	9ec <sendto_one@plt>
    14e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    14ec:	bl	1628 <rb_free>
    14f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    14f4:	ldr	r0, [r0]
    14f8:	bl	1848 <rb_strdup>
    14fc:	ldr	r1, [fp, #-20]	; 0xffffffec
    1500:	ldr	r1, [r1, #24]
    1504:	str	r0, [r1, #32]
    1508:	b	151c <m_challenge+0x8c8>
    150c:	ldr	r0, [pc, #36]	; 1538 <m_challenge+0x8e4>
    1510:	add	r1, pc, r0
    1514:	ldr	r0, [fp, #-20]	; 0xffffffec
    1518:	bl	ae8 <sendto_one_notice@plt>
    151c:	sub	sp, fp, #8
    1520:	pop	{r4, sl, fp, pc}
    1524:	.word	0x0000090e
    1528:	.word	0x00010df4
    152c:	.word	0x00000902
    1530:	.word	0x00000825
    1534:	.word	0x000008d7
    1538:	.word	0x0000077b
    153c:	.word	0x000007fb
    1540:	.word	0x00010c24
    1544:	.word	0x000007a6
    1548:	.word	0x00010bc0
    154c:	.word	0x00010ce4
    1550:	.word	0x00000868
    1554:	.word	0x00000715
    1558:	.word	0x0000084f
    155c:	.word	0x00010f0c
    1560:	.word	0x00000962
    1564:	.word	0x0000093d
    1568:	.word	0x0000091e
    156c:	.word	0x00000a71
    1570:	.word	0x00011088
    1574:	.word	0x00000ae2
    1578:	.word	0x00000abd
    157c:	.word	0x00000a9a
    1580:	.word	0x000111ac
    1584:	.word	0x00000b7d
    1588:	.word	0x00000b30
    158c:	.word	0x0001121c
    1590:	.word	0x00000b3a
    1594:	.word	0x00011304
    1598:	.word	0x00000c83
    159c:	.word	0x00000c88
    15a0:	.word	0x00011374
    15a4:	.word	0x00000c41
    15a8:	.word	0x00000c78
    15ac:	.word	0x000113f0

000015b0 <cleanup_challenge>:
    15b0:	push	{fp, lr}
    15b4:	mov	fp, sp
    15b8:	sub	sp, sp, #8
    15bc:	str	r0, [sp, #4]
    15c0:	ldr	r0, [sp, #4]
    15c4:	ldr	r0, [r0, #432]	; 0x1b0
    15c8:	movw	r1, #0
    15cc:	cmp	r0, r1
    15d0:	bne	15d8 <cleanup_challenge+0x28>
    15d4:	b	1620 <cleanup_challenge+0x70>
    15d8:	ldr	r0, [sp, #4]
    15dc:	ldr	r0, [r0, #432]	; 0x1b0
    15e0:	ldr	r0, [r0, #284]	; 0x11c
    15e4:	bl	1628 <rb_free>
    15e8:	ldr	r0, [sp, #4]
    15ec:	ldr	r0, [r0, #24]
    15f0:	ldr	r0, [r0, #32]
    15f4:	bl	1628 <rb_free>
    15f8:	ldr	r0, [sp, #4]
    15fc:	ldr	r0, [r0, #432]	; 0x1b0
    1600:	movw	r1, #0
    1604:	str	r1, [r0, #284]	; 0x11c
    1608:	ldr	r0, [sp, #4]
    160c:	ldr	r0, [r0, #24]
    1610:	str	r1, [r0, #32]
    1614:	ldr	r0, [sp, #4]
    1618:	ldr	r0, [r0, #432]	; 0x1b0
    161c:	str	r1, [r0, #304]	; 0x130
    1620:	mov	sp, fp
    1624:	pop	{fp, pc}

00001628 <rb_free>:
    1628:	push	{fp, lr}
    162c:	mov	fp, sp
    1630:	sub	sp, sp, #8
    1634:	str	r0, [sp, #4]
    1638:	ldr	r0, [sp, #4]
    163c:	movw	r1, #0
    1640:	cmp	r0, r1
    1644:	movw	r0, #0
    1648:	movne	r0, #1
    164c:	mvn	r1, #0
    1650:	eor	r0, r0, r1
    1654:	eor	r0, r0, r1
    1658:	tst	r0, #1
    165c:	beq	1668 <rb_free+0x40>
    1660:	ldr	r0, [sp, #4]
    1664:	bl	9f8 <free@plt>
    1668:	mov	sp, fp
    166c:	pop	{fp, pc}

00001670 <generate_challenge>:
    1670:	push	{r4, r5, fp, lr}
    1674:	add	fp, sp, #8
    1678:	sub	sp, sp, #288	; 0x120
    167c:	str	r0, [fp, #-16]
    1680:	str	r1, [fp, #-20]	; 0xffffffec
    1684:	str	r2, [fp, #-24]	; 0xffffffe8
    1688:	movw	r0, #0
    168c:	str	r0, [sp, #36]	; 0x24
    1690:	str	r0, [sp, #32]
    1694:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1698:	cmp	r1, r0
    169c:	bne	16b0 <generate_challenge+0x40>
    16a0:	movw	r0, #0
    16a4:	and	r0, r0, #1
    16a8:	strb	r0, [fp, #-9]
    16ac:	b	1834 <generate_challenge+0x1c4>
    16b0:	add	r0, sp, #48	; 0x30
    16b4:	movw	r1, #128	; 0x80
    16b8:	bl	a64 <rb_get_random@plt>
    16bc:	cmp	r0, #0
    16c0:	beq	17a4 <generate_challenge+0x134>
    16c4:	sub	r0, fp, #120	; 0x78
    16c8:	bl	ad0 <SHA1_Init@plt>
    16cc:	add	r1, sp, #48	; 0x30
    16d0:	sub	r2, fp, #120	; 0x78
    16d4:	str	r0, [sp, #24]
    16d8:	mov	r0, r2
    16dc:	movw	r2, #128	; 0x80
    16e0:	bl	aac <SHA1_Update@plt>
    16e4:	movw	r1, #20
    16e8:	str	r0, [sp, #20]
    16ec:	mov	r0, r1
    16f0:	bl	a58 <malloc@plt>
    16f4:	ldr	r1, [fp, #-20]	; 0xffffffec
    16f8:	str	r0, [r1]
    16fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    1700:	ldr	r0, [r0]
    1704:	sub	r1, fp, #120	; 0x78
    1708:	bl	b24 <SHA1_Final@plt>
    170c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1710:	str	r0, [sp, #16]
    1714:	mov	r0, r1
    1718:	bl	a10 <RSA_size@plt>
    171c:	str	r0, [sp, #40]	; 0x28
    1720:	ldr	r0, [sp, #40]	; 0x28
    1724:	bl	18b8 <rb_malloc>
    1728:	add	r1, sp, #48	; 0x30
    172c:	str	r0, [sp, #44]	; 0x2c
    1730:	ldr	r2, [sp, #44]	; 0x2c
    1734:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1738:	movw	r0, #128	; 0x80
    173c:	movw	ip, #4
    1740:	str	ip, [sp]
    1744:	bl	9e0 <RSA_public_encrypt@plt>
    1748:	str	r0, [sp, #28]
    174c:	ldr	r0, [sp, #28]
    1750:	cmp	r0, #0
    1754:	blt	1784 <generate_challenge+0x114>
    1758:	ldr	r0, [sp, #44]	; 0x2c
    175c:	ldr	r1, [sp, #28]
    1760:	bl	b18 <rb_base64_encode@plt>
    1764:	ldr	r1, [fp, #-16]
    1768:	str	r0, [r1]
    176c:	ldr	r0, [sp, #44]	; 0x2c
    1770:	bl	1628 <rb_free>
    1774:	movw	r0, #1
    1778:	and	r0, r0, #1
    177c:	strb	r0, [fp, #-9]
    1780:	b	1834 <generate_challenge+0x1c4>
    1784:	ldr	r0, [sp, #44]	; 0x2c
    1788:	bl	1628 <rb_free>
    178c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1790:	ldr	r0, [r0]
    1794:	bl	1628 <rb_free>
    1798:	ldr	r0, [fp, #-20]	; 0xffffffec
    179c:	movw	r1, #0
    17a0:	str	r1, [r0]
    17a4:	mov	r0, #2
    17a8:	mov	r1, #0
    17ac:	str	r1, [sp, #12]
    17b0:	ldr	r2, [sp, #12]
    17b4:	bl	a7c <OPENSSL_init_crypto@plt>
    17b8:	ldr	r0, [sp, #32]
    17bc:	cmp	r0, #100	; 0x64
    17c0:	movw	r0, #0
    17c4:	str	r0, [sp, #8]
    17c8:	bcs	17e4 <generate_challenge+0x174>
    17cc:	bl	adc <ERR_get_error@plt>
    17d0:	str	r0, [sp, #36]	; 0x24
    17d4:	cmp	r0, #0
    17d8:	movw	r0, #0
    17dc:	movne	r0, #1
    17e0:	str	r0, [sp, #8]
    17e4:	ldr	r0, [sp, #8]
    17e8:	tst	r0, #1
    17ec:	beq	1828 <generate_challenge+0x1b8>
    17f0:	ldr	r0, [sp, #36]	; 0x24
    17f4:	movw	r1, #0
    17f8:	bl	ab8 <ERR_error_string@plt>
    17fc:	ldr	r1, [pc, #64]	; 1844 <generate_challenge+0x1d4>
    1800:	add	r1, pc, r1
    1804:	movw	r2, #0
    1808:	str	r0, [sp, #4]
    180c:	mov	r0, r2
    1810:	ldr	r2, [sp, #4]
    1814:	bl	ac4 <ilog@plt>
    1818:	ldr	r0, [sp, #32]
    181c:	add	r0, r0, #1
    1820:	str	r0, [sp, #32]
    1824:	b	17b8 <generate_challenge+0x148>
    1828:	movw	r0, #0
    182c:	and	r0, r0, #1
    1830:	strb	r0, [fp, #-9]
    1834:	ldrb	r0, [fp, #-9]
    1838:	and	r0, r0, #1
    183c:	sub	sp, fp, #8
    1840:	pop	{r4, r5, fp, pc}
    1844:	.word	0x000004aa

00001848 <rb_strdup>:
    1848:	push	{fp, lr}
    184c:	mov	fp, sp
    1850:	sub	sp, sp, #16
    1854:	str	r0, [fp, #-4]
    1858:	ldr	r0, [fp, #-4]
    185c:	bl	aa0 <strlen@plt>
    1860:	add	r0, r0, #1
    1864:	bl	a58 <malloc@plt>
    1868:	str	r0, [sp, #8]
    186c:	ldr	r0, [sp, #8]
    1870:	movw	r1, #0
    1874:	cmp	r0, r1
    1878:	movw	r0, #0
    187c:	moveq	r0, #1
    1880:	mvn	r1, #0
    1884:	eor	r0, r0, r1
    1888:	eor	r0, r0, r1
    188c:	tst	r0, #1
    1890:	beq	1898 <rb_strdup+0x50>
    1894:	bl	a1c <rb_outofmemory@plt>
    1898:	ldr	r0, [sp, #8]
    189c:	ldr	r1, [fp, #-4]
    18a0:	bl	a4c <strcpy@plt>
    18a4:	ldr	r1, [sp, #8]
    18a8:	str	r0, [sp, #4]
    18ac:	mov	r0, r1
    18b0:	mov	sp, fp
    18b4:	pop	{fp, pc}

000018b8 <rb_malloc>:
    18b8:	push	{fp, lr}
    18bc:	mov	fp, sp
    18c0:	sub	sp, sp, #8
    18c4:	str	r0, [sp, #4]
    18c8:	ldr	r1, [sp, #4]
    18cc:	movw	r0, #1
    18d0:	bl	9bc <calloc@plt>
    18d4:	str	r0, [sp]
    18d8:	ldr	r0, [sp]
    18dc:	movw	r1, #0
    18e0:	cmp	r0, r1
    18e4:	movw	r0, #0
    18e8:	moveq	r0, #1
    18ec:	mvn	r1, #0
    18f0:	eor	r0, r0, r1
    18f4:	eor	r0, r0, r1
    18f8:	tst	r0, #1
    18fc:	beq	1904 <rb_malloc+0x4c>
    1900:	bl	a1c <rb_outofmemory@plt>
    1904:	ldr	r0, [sp]
    1908:	mov	sp, fp
    190c:	pop	{fp, pc}

Disassembly of section .fini:

00001910 <_fini>:
    1910:	push	{r3, lr}
    1914:	pop	{r3, pc}
