
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00012318 <.init>:
   12318:	push	{r3, lr}
   1231c:	bl	12acc <__assert_fail@plt+0x50>
   12320:	pop	{r3, pc}

Disassembly of section .plt:

00012324 <pthread_mutex_unlock@plt-0x14>:
   12324:	push	{lr}		; (str lr, [sp, #-4]!)
   12328:	ldr	lr, [pc, #4]	; 12334 <pthread_mutex_unlock@plt-0x4>
   1232c:	add	lr, pc, lr
   12330:	ldr	pc, [lr, #8]!
   12334:	andeq	r0, r5, ip, asr #25

00012338 <pthread_mutex_unlock@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #80, 20	; 0x50000
   12340:	ldr	pc, [ip, #3276]!	; 0xccc

00012344 <fdopen@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #80, 20	; 0x50000
   1234c:	ldr	pc, [ip, #3268]!	; 0xcc4

00012350 <fstatfs64@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #80, 20	; 0x50000
   12358:	ldr	pc, [ip, #3260]!	; 0xcbc

0001235c <calloc@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #80, 20	; 0x50000
   12364:	ldr	pc, [ip, #3252]!	; 0xcb4

00012368 <endgrent@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #80, 20	; 0x50000
   12370:	ldr	pc, [ip, #3244]!	; 0xcac

00012374 <wctype@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #80, 20	; 0x50000
   1237c:	ldr	pc, [ip, #3236]!	; 0xca4

00012380 <raise@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #80, 20	; 0x50000
   12388:	ldr	pc, [ip, #3228]!	; 0xc9c

0001238c <wcrtomb@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #80, 20	; 0x50000
   12394:	ldr	pc, [ip, #3220]!	; 0xc94

00012398 <gmtime_r@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #80, 20	; 0x50000
   123a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000123a4 <__getdelim@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #80, 20	; 0x50000
   123ac:	ldr	pc, [ip, #3204]!	; 0xc84

000123b0 <getpwnam@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #80, 20	; 0x50000
   123b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000123bc <is_selinux_enabled@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #80, 20	; 0x50000
   123c4:	ldr	pc, [ip, #3188]!	; 0xc74

000123c8 <iswctype@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #80, 20	; 0x50000
   123d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000123d4 <strcmp@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #80, 20	; 0x50000
   123dc:	ldr	pc, [ip, #3172]!	; 0xc64

000123e0 <strtol@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #80, 20	; 0x50000
   123e8:	ldr	pc, [ip, #3164]!	; 0xc5c

000123ec <getpwuid@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #80, 20	; 0x50000
   123f4:	ldr	pc, [ip, #3156]!	; 0xc54

000123f8 <printf@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #80, 20	; 0x50000
   12400:	ldr	pc, [ip, #3148]!	; 0xc4c

00012404 <pthread_mutex_destroy@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #80, 20	; 0x50000
   1240c:	ldr	pc, [ip, #3140]!	; 0xc44

00012410 <mktime@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #80, 20	; 0x50000
   12418:	ldr	pc, [ip, #3132]!	; 0xc3c

0001241c <fflush@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #80, 20	; 0x50000
   12424:	ldr	pc, [ip, #3124]!	; 0xc34

00012428 <unlinkat@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #80, 20	; 0x50000
   12430:	ldr	pc, [ip, #3116]!	; 0xc2c

00012434 <wcwidth@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #80, 20	; 0x50000
   1243c:	ldr	pc, [ip, #3108]!	; 0xc24

00012440 <lsetfilecon@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #80, 20	; 0x50000
   12448:	ldr	pc, [ip, #3100]!	; 0xc1c

0001244c <memmove@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #80, 20	; 0x50000
   12454:	ldr	pc, [ip, #3092]!	; 0xc14

00012458 <free@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #80, 20	; 0x50000
   12460:	ldr	pc, [ip, #3084]!	; 0xc0c

00012464 <pthread_mutex_lock@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #80, 20	; 0x50000
   1246c:	ldr	pc, [ip, #3076]!	; 0xc04

00012470 <faccessat@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #80, 20	; 0x50000
   12478:	ldr	pc, [ip, #3068]!	; 0xbfc

0001247c <ferror@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #80, 20	; 0x50000
   12484:	ldr	pc, [ip, #3060]!	; 0xbf4

00012488 <thrd_exit@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #80, 20	; 0x50000
   12490:	ldr	pc, [ip, #3052]!	; 0xbec

00012494 <strndup@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #80, 20	; 0x50000
   1249c:	ldr	pc, [ip, #3044]!	; 0xbe4

000124a0 <clock_gettime@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #80, 20	; 0x50000
   124a8:	ldr	pc, [ip, #3036]!	; 0xbdc

000124ac <_exit@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #80, 20	; 0x50000
   124b4:	ldr	pc, [ip, #3028]!	; 0xbd4

000124b8 <memcpy@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #80, 20	; 0x50000
   124c0:	ldr	pc, [ip, #3020]!	; 0xbcc

000124c4 <execvp@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #80, 20	; 0x50000
   124cc:	ldr	pc, [ip, #3012]!	; 0xbc4

000124d0 <pthread_mutex_init@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #80, 20	; 0x50000
   124d8:	ldr	pc, [ip, #3004]!	; 0xbbc

000124dc <__strtoull_internal@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #80, 20	; 0x50000
   124e4:	ldr	pc, [ip, #2996]!	; 0xbb4

000124e8 <towlower@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #80, 20	; 0x50000
   124f0:	ldr	pc, [ip, #2988]!	; 0xbac

000124f4 <mbsinit@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #80, 20	; 0x50000
   124fc:	ldr	pc, [ip, #2980]!	; 0xba4

00012500 <signal@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #80, 20	; 0x50000
   12508:	ldr	pc, [ip, #2972]!	; 0xb9c

0001250c <time@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #80, 20	; 0x50000
   12514:	ldr	pc, [ip, #2964]!	; 0xb94

00012518 <memcmp@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #80, 20	; 0x50000
   12520:	ldr	pc, [ip, #2956]!	; 0xb8c

00012524 <uname@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #80, 20	; 0x50000
   1252c:	ldr	pc, [ip, #2948]!	; 0xb84

00012530 <ctime@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #80, 20	; 0x50000
   12538:	ldr	pc, [ip, #2940]!	; 0xb7c

0001253c <dcgettext@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #80, 20	; 0x50000
   12544:	ldr	pc, [ip, #2932]!	; 0xb74

00012548 <strdup@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #80, 20	; 0x50000
   12550:	ldr	pc, [ip, #2924]!	; 0xb6c

00012554 <sysconf@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #80, 20	; 0x50000
   1255c:	ldr	pc, [ip, #2916]!	; 0xb64

00012560 <getrlimit64@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #80, 20	; 0x50000
   12568:	ldr	pc, [ip, #2908]!	; 0xb5c

0001256c <realloc@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #80, 20	; 0x50000
   12574:	ldr	pc, [ip, #2900]!	; 0xb54

00012578 <fgetfilecon@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #80, 20	; 0x50000
   12580:	ldr	pc, [ip, #2892]!	; 0xb4c

00012584 <localtime_r@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #80, 20	; 0x50000
   1258c:	ldr	pc, [ip, #2884]!	; 0xb44

00012590 <textdomain@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #80, 20	; 0x50000
   12598:	ldr	pc, [ip, #2876]!	; 0xb3c

0001259c <iswcntrl@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #80, 20	; 0x50000
   125a4:	ldr	pc, [ip, #2868]!	; 0xb34

000125a8 <chdir@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #80, 20	; 0x50000
   125b0:	ldr	pc, [ip, #2860]!	; 0xb2c

000125b4 <__fxstatat64@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #80, 20	; 0x50000
   125bc:	ldr	pc, [ip, #2852]!	; 0xb24

000125c0 <iswprint@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #80, 20	; 0x50000
   125c8:	ldr	pc, [ip, #2844]!	; 0xb1c

000125cc <tzset@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #80, 20	; 0x50000
   125d4:	ldr	pc, [ip, #2836]!	; 0xb14

000125d8 <poll@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #80, 20	; 0x50000
   125e0:	ldr	pc, [ip, #2828]!	; 0xb0c

000125e4 <__fxstat64@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #80, 20	; 0x50000
   125ec:	ldr	pc, [ip, #2820]!	; 0xb04

000125f0 <fwrite@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #80, 20	; 0x50000
   125f8:	ldr	pc, [ip, #2812]!	; 0xafc

000125fc <strcat@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #80, 20	; 0x50000
   12604:	ldr	pc, [ip, #2804]!	; 0xaf4

00012608 <lseek64@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #80, 20	; 0x50000
   12610:	ldr	pc, [ip, #2796]!	; 0xaec

00012614 <waitpid@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #80, 20	; 0x50000
   1261c:	ldr	pc, [ip, #2788]!	; 0xae4

00012620 <__ctype_get_mb_cur_max@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #80, 20	; 0x50000
   12628:	ldr	pc, [ip, #2780]!	; 0xadc

0001262c <hasmntopt@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #80, 20	; 0x50000
   12634:	ldr	pc, [ip, #2772]!	; 0xad4

00012638 <strcpy@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #80, 20	; 0x50000
   12640:	ldr	pc, [ip, #2764]!	; 0xacc

00012644 <gettimeofday@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #80, 20	; 0x50000
   1264c:	ldr	pc, [ip, #2756]!	; 0xac4

00012650 <__fpending@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #80, 20	; 0x50000
   12658:	ldr	pc, [ip, #2748]!	; 0xabc

0001265c <mbrtowc@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #80, 20	; 0x50000
   12664:	ldr	pc, [ip, #2740]!	; 0xab4

00012668 <strtok_r@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #80, 20	; 0x50000
   12670:	ldr	pc, [ip, #2732]!	; 0xaac

00012674 <error@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #80, 20	; 0x50000
   1267c:	ldr	pc, [ip, #2724]!	; 0xaa4

00012680 <getmntent@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #80, 20	; 0x50000
   12688:	ldr	pc, [ip, #2716]!	; 0xa9c

0001268c <opendir@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #80, 20	; 0x50000
   12694:	ldr	pc, [ip, #2708]!	; 0xa94

00012698 <fnmatch@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #80, 20	; 0x50000
   126a0:	ldr	pc, [ip, #2700]!	; 0xa8c

000126a4 <open64@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #80, 20	; 0x50000
   126ac:	ldr	pc, [ip, #2692]!	; 0xa84

000126b0 <getenv@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #80, 20	; 0x50000
   126b8:	ldr	pc, [ip, #2684]!	; 0xa7c

000126bc <lgetfilecon@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #80, 20	; 0x50000
   126c4:	ldr	pc, [ip, #2676]!	; 0xa74

000126c8 <malloc@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #80, 20	; 0x50000
   126d0:	ldr	pc, [ip, #2668]!	; 0xa6c

000126d4 <__libc_start_main@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #80, 20	; 0x50000
   126dc:	ldr	pc, [ip, #2660]!	; 0xa64

000126e0 <readlinkat@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #80, 20	; 0x50000
   126e8:	ldr	pc, [ip, #2652]!	; 0xa5c

000126ec <strftime@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #80, 20	; 0x50000
   126f4:	ldr	pc, [ip, #2644]!	; 0xa54

000126f8 <__freading@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #80, 20	; 0x50000
   12700:	ldr	pc, [ip, #2636]!	; 0xa4c

00012704 <localtime@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #80, 20	; 0x50000
   1270c:	ldr	pc, [ip, #2628]!	; 0xa44

00012710 <__ctype_tolower_loc@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #80, 20	; 0x50000
   12718:	ldr	pc, [ip, #2620]!	; 0xa3c

0001271c <modf@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #80, 20	; 0x50000
   12724:	ldr	pc, [ip, #2612]!	; 0xa34

00012728 <__ctype_toupper_loc@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #80, 20	; 0x50000
   12730:	ldr	pc, [ip, #2604]!	; 0xa2c

00012734 <__gmon_start__@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #80, 20	; 0x50000
   1273c:	ldr	pc, [ip, #2596]!	; 0xa24

00012740 <__ctype_b_loc@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #80, 20	; 0x50000
   12748:	ldr	pc, [ip, #2588]!	; 0xa1c

0001274c <getcwd@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #80, 20	; 0x50000
   12754:	ldr	pc, [ip, #2580]!	; 0xa14

00012758 <exit@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #80, 20	; 0x50000
   12760:	ldr	pc, [ip, #2572]!	; 0xa0c

00012764 <feof@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #80, 20	; 0x50000
   1276c:	ldr	pc, [ip, #2564]!	; 0xa04

00012770 <getfilecon@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #80, 20	; 0x50000
   12778:	ldr	pc, [ip, #2556]!	; 0x9fc

0001277c <strtoul@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #80, 20	; 0x50000
   12784:	ldr	pc, [ip, #2548]!	; 0x9f4

00012788 <strlen@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #80, 20	; 0x50000
   12790:	ldr	pc, [ip, #2540]!	; 0x9ec

00012794 <strchr@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #80, 20	; 0x50000
   1279c:	ldr	pc, [ip, #2532]!	; 0x9e4

000127a0 <setenv@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #80, 20	; 0x50000
   127a8:	ldr	pc, [ip, #2524]!	; 0x9dc

000127ac <openat64@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #80, 20	; 0x50000
   127b4:	ldr	pc, [ip, #2516]!	; 0x9d4

000127b8 <memrchr@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #80, 20	; 0x50000
   127c0:	ldr	pc, [ip, #2508]!	; 0x9cc

000127c4 <fprintf@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #80, 20	; 0x50000
   127cc:	ldr	pc, [ip, #2500]!	; 0x9c4

000127d0 <__errno_location@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #80, 20	; 0x50000
   127d8:	ldr	pc, [ip, #2492]!	; 0x9bc

000127dc <iswalnum@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #80, 20	; 0x50000
   127e4:	ldr	pc, [ip, #2484]!	; 0x9b4

000127e8 <snprintf@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #80, 20	; 0x50000
   127f0:	ldr	pc, [ip, #2476]!	; 0x9ac

000127f4 <__cxa_atexit@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #80, 20	; 0x50000
   127fc:	ldr	pc, [ip, #2468]!	; 0x9a4

00012800 <memset@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #80, 20	; 0x50000
   12808:	ldr	pc, [ip, #2460]!	; 0x99c

0001280c <putchar@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #80, 20	; 0x50000
   12814:	ldr	pc, [ip, #2452]!	; 0x994

00012818 <strncpy@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #80, 20	; 0x50000
   12820:	ldr	pc, [ip, #2444]!	; 0x98c

00012824 <pthread_mutexattr_gettype@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #80, 20	; 0x50000
   1282c:	ldr	pc, [ip, #2436]!	; 0x984

00012830 <btowc@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #80, 20	; 0x50000
   12838:	ldr	pc, [ip, #2428]!	; 0x97c

0001283c <strtod@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #80, 20	; 0x50000
   12844:	ldr	pc, [ip, #2420]!	; 0x974

00012848 <fileno@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #80, 20	; 0x50000
   12850:	ldr	pc, [ip, #2412]!	; 0x96c

00012854 <difftime@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #80, 20	; 0x50000
   1285c:	ldr	pc, [ip, #2404]!	; 0x964

00012860 <memchr@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #80, 20	; 0x50000
   12868:	ldr	pc, [ip, #2396]!	; 0x95c

0001286c <setfilecon@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #80, 20	; 0x50000
   12874:	ldr	pc, [ip, #2388]!	; 0x954

00012878 <access@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #80, 20	; 0x50000
   12880:	ldr	pc, [ip, #2380]!	; 0x94c

00012884 <fclose@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #80, 20	; 0x50000
   1288c:	ldr	pc, [ip, #2372]!	; 0x944

00012890 <strnlen@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #80, 20	; 0x50000
   12898:	ldr	pc, [ip, #2364]!	; 0x93c

0001289c <fseeko64@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #80, 20	; 0x50000
   128a4:	ldr	pc, [ip, #2356]!	; 0x934

000128a8 <endmntent@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #80, 20	; 0x50000
   128b0:	ldr	pc, [ip, #2348]!	; 0x92c

000128b4 <fcntl64@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #80, 20	; 0x50000
   128bc:	ldr	pc, [ip, #2340]!	; 0x924

000128c0 <rpmatch@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #80, 20	; 0x50000
   128c8:	ldr	pc, [ip, #2332]!	; 0x91c

000128cc <setlocale@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #80, 20	; 0x50000
   128d4:	ldr	pc, [ip, #2324]!	; 0x914

000128d8 <fork@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #80, 20	; 0x50000
   128e0:	ldr	pc, [ip, #2316]!	; 0x90c

000128e4 <endpwent@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #80, 20	; 0x50000
   128ec:	ldr	pc, [ip, #2308]!	; 0x904

000128f0 <strrchr@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #80, 20	; 0x50000
   128f8:	ldr	pc, [ip, #2300]!	; 0x8fc

000128fc <vfprintf@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #80, 20	; 0x50000
   12904:	ldr	pc, [ip, #2292]!	; 0x8f4

00012908 <nl_langinfo@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #80, 20	; 0x50000
   12910:	ldr	pc, [ip, #2284]!	; 0x8ec

00012914 <fputc@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #80, 20	; 0x50000
   1291c:	ldr	pc, [ip, #2276]!	; 0x8e4

00012920 <sscanf@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #80, 20	; 0x50000
   12928:	ldr	pc, [ip, #2268]!	; 0x8dc

0001292c <localeconv@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #80, 20	; 0x50000
   12934:	ldr	pc, [ip, #2260]!	; 0x8d4

00012938 <sprintf@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #80, 20	; 0x50000
   12940:	ldr	pc, [ip, #2252]!	; 0x8cc

00012944 <readdir64@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #80, 20	; 0x50000
   1294c:	ldr	pc, [ip, #2244]!	; 0x8c4

00012950 <fdopendir@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #80, 20	; 0x50000
   12958:	ldr	pc, [ip, #2236]!	; 0x8bc

0001295c <timegm@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #80, 20	; 0x50000
   12964:	ldr	pc, [ip, #2228]!	; 0x8b4

00012968 <putc@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #80, 20	; 0x50000
   12970:	ldr	pc, [ip, #2220]!	; 0x8ac

00012974 <dirfd@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #80, 20	; 0x50000
   1297c:	ldr	pc, [ip, #2212]!	; 0x8a4

00012980 <fchdir@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #80, 20	; 0x50000
   12988:	ldr	pc, [ip, #2204]!	; 0x89c

0001298c <fopen64@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #80, 20	; 0x50000
   12994:	ldr	pc, [ip, #2196]!	; 0x894

00012998 <qsort@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #80, 20	; 0x50000
   129a0:	ldr	pc, [ip, #2188]!	; 0x88c

000129a4 <freecon@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #80, 20	; 0x50000
   129ac:	ldr	pc, [ip, #2180]!	; 0x884

000129b0 <strpbrk@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #80, 20	; 0x50000
   129b8:	ldr	pc, [ip, #2172]!	; 0x87c

000129bc <setmntent@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #80, 20	; 0x50000
   129c4:	ldr	pc, [ip, #2164]!	; 0x874

000129c8 <bindtextdomain@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #80, 20	; 0x50000
   129d0:	ldr	pc, [ip, #2156]!	; 0x86c

000129d4 <getdelim@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #80, 20	; 0x50000
   129dc:	ldr	pc, [ip, #2148]!	; 0x864

000129e0 <__xstat64@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #80, 20	; 0x50000
   129e8:	ldr	pc, [ip, #2140]!	; 0x85c

000129ec <isatty@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #80, 20	; 0x50000
   129f4:	ldr	pc, [ip, #2132]!	; 0x854

000129f8 <unsetenv@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #80, 20	; 0x50000
   12a00:	ldr	pc, [ip, #2124]!	; 0x84c

00012a04 <towupper@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #80, 20	; 0x50000
   12a0c:	ldr	pc, [ip, #2116]!	; 0x844

00012a10 <fputs@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #80, 20	; 0x50000
   12a18:	ldr	pc, [ip, #2108]!	; 0x83c

00012a1c <strncmp@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #80, 20	; 0x50000
   12a24:	ldr	pc, [ip, #2100]!	; 0x834

00012a28 <abort@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #80, 20	; 0x50000
   12a30:	ldr	pc, [ip, #2092]!	; 0x82c

00012a34 <close@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #80, 20	; 0x50000
   12a3c:	ldr	pc, [ip, #2084]!	; 0x824

00012a40 <__lxstat64@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #80, 20	; 0x50000
   12a48:	ldr	pc, [ip, #2076]!	; 0x81c

00012a4c <closedir@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #80, 20	; 0x50000
   12a54:	ldr	pc, [ip, #2068]!	; 0x814

00012a58 <getgrgid@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #80, 20	; 0x50000
   12a60:	ldr	pc, [ip, #2060]!	; 0x80c

00012a64 <getgrnam@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #80, 20	; 0x50000
   12a6c:	ldr	pc, [ip, #2052]!	; 0x804

00012a70 <strspn@plt>:
   12a70:	add	ip, pc, #0, 12
   12a74:	add	ip, ip, #80, 20	; 0x50000
   12a78:	ldr	pc, [ip, #2044]!	; 0x7fc

00012a7c <__assert_fail@plt>:
   12a7c:	add	ip, pc, #0, 12
   12a80:	add	ip, ip, #80, 20	; 0x50000
   12a84:	ldr	pc, [ip, #2036]!	; 0x7f4

Disassembly of section .text:

00012a90 <.text>:
   12a90:	mov	fp, #0
   12a94:	mov	lr, #0
   12a98:	pop	{r1}		; (ldr r1, [sp], #4)
   12a9c:	mov	r2, sp
   12aa0:	push	{r2}		; (str r2, [sp, #-4]!)
   12aa4:	push	{r0}		; (str r0, [sp, #-4]!)
   12aa8:	ldr	ip, [pc, #16]	; 12ac0 <__assert_fail@plt+0x44>
   12aac:	push	{ip}		; (str ip, [sp, #-4]!)
   12ab0:	ldr	r0, [pc, #12]	; 12ac4 <__assert_fail@plt+0x48>
   12ab4:	ldr	r3, [pc, #12]	; 12ac8 <__assert_fail@plt+0x4c>
   12ab8:	bl	126d4 <__libc_start_main@plt>
   12abc:	bl	12a28 <abort@plt>
   12ac0:	andeq	ip, r4, r0, lsr r4
   12ac4:	andeq	r2, r1, r0, lsl #23
   12ac8:	ldrdeq	ip, [r4], -r0
   12acc:	ldr	r3, [pc, #20]	; 12ae8 <__assert_fail@plt+0x6c>
   12ad0:	ldr	r2, [pc, #20]	; 12aec <__assert_fail@plt+0x70>
   12ad4:	add	r3, pc, r3
   12ad8:	ldr	r2, [r3, r2]
   12adc:	cmp	r2, #0
   12ae0:	bxeq	lr
   12ae4:	b	12734 <__gmon_start__@plt>
   12ae8:	andeq	r0, r5, r4, lsr #10
   12aec:	andeq	r0, r0, ip, ror r2
   12af0:	ldr	r0, [pc, #24]	; 12b10 <__assert_fail@plt+0x94>
   12af4:	ldr	r3, [pc, #24]	; 12b14 <__assert_fail@plt+0x98>
   12af8:	cmp	r3, r0
   12afc:	bxeq	lr
   12b00:	ldr	r3, [pc, #16]	; 12b18 <__assert_fail@plt+0x9c>
   12b04:	cmp	r3, #0
   12b08:	bxeq	lr
   12b0c:	bx	r3
   12b10:	andeq	r3, r6, r4, lsr r5
   12b14:	andeq	r3, r6, r4, lsr r5
   12b18:	andeq	r0, r0, r0
   12b1c:	ldr	r0, [pc, #36]	; 12b48 <__assert_fail@plt+0xcc>
   12b20:	ldr	r1, [pc, #36]	; 12b4c <__assert_fail@plt+0xd0>
   12b24:	sub	r1, r1, r0
   12b28:	asr	r1, r1, #2
   12b2c:	add	r1, r1, r1, lsr #31
   12b30:	asrs	r1, r1, #1
   12b34:	bxeq	lr
   12b38:	ldr	r3, [pc, #16]	; 12b50 <__assert_fail@plt+0xd4>
   12b3c:	cmp	r3, #0
   12b40:	bxeq	lr
   12b44:	bx	r3
   12b48:	andeq	r3, r6, r4, lsr r5
   12b4c:	andeq	r3, r6, r4, lsr r5
   12b50:	andeq	r0, r0, r0
   12b54:	push	{r4, lr}
   12b58:	ldr	r4, [pc, #24]	; 12b78 <__assert_fail@plt+0xfc>
   12b5c:	ldrb	r3, [r4]
   12b60:	cmp	r3, #0
   12b64:	popne	{r4, pc}
   12b68:	bl	12af0 <__assert_fail@plt+0x74>
   12b6c:	mov	r3, #1
   12b70:	strb	r3, [r4]
   12b74:	pop	{r4, pc}
   12b78:	andeq	r3, r6, r8, asr r5
   12b7c:	b	12b1c <__assert_fail@plt+0xa0>
   12b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b84:	add	fp, sp, #28
   12b88:	sub	sp, sp, #236	; 0xec
   12b8c:	mov	r5, r0
   12b90:	ldr	r0, [r1]
   12b94:	mov	r6, r1
   12b98:	cmp	r0, #0
   12b9c:	movweq	r0, #50276	; 0xc464
   12ba0:	movteq	r0, #4
   12ba4:	bl	2d940 <__assert_fail@plt+0x1aec4>
   12ba8:	bl	18c58 <__assert_fail@plt+0x61dc>
   12bac:	movw	r8, #15936	; 0x3e40
   12bb0:	mov	r0, #0
   12bb4:	movt	r8, #6
   12bb8:	str	r0, [r8, #28]
   12bbc:	strb	r0, [r8, #40]	; 0x28
   12bc0:	strb	r0, [r8, #32]
   12bc4:	mvn	r0, #99	; 0x63
   12bc8:	str	r0, [r8, #16]
   12bcc:	bl	2181c <__assert_fail@plt+0xeda0>
   12bd0:	cmp	r0, #0
   12bd4:	beq	12bdc <__assert_fail@plt+0x160>
   12bd8:	bl	21468 <__assert_fail@plt+0xe9ec>
   12bdc:	movw	r0, #62462	; 0xf3fe
   12be0:	movt	r0, #4
   12be4:	bl	19e50 <__assert_fail@plt+0x73d4>
   12be8:	cmp	r0, #0
   12bec:	str	r0, [r8, #36]	; 0x24
   12bf0:	beq	13054 <__assert_fail@plt+0x5d8>
   12bf4:	movw	r4, #15980	; 0x3e6c
   12bf8:	movt	r4, #6
   12bfc:	mov	r0, r4
   12c00:	bl	199dc <__assert_fail@plt+0x6f60>
   12c04:	movw	r1, #58175	; 0xe33f
   12c08:	mov	r0, #6
   12c0c:	movt	r1, #4
   12c10:	bl	128cc <setlocale@plt>
   12c14:	movw	r7, #2925	; 0xb6d
   12c18:	movw	r1, #50325	; 0xc495
   12c1c:	movt	r7, #5
   12c20:	movt	r1, #4
   12c24:	mov	r0, r7
   12c28:	bl	129c8 <bindtextdomain@plt>
   12c2c:	mov	r0, r7
   12c30:	bl	12590 <textdomain@plt>
   12c34:	movw	r0, #13704	; 0x3588
   12c38:	movt	r0, #2
   12c3c:	bl	4c434 <__assert_fail@plt+0x399b8>
   12c40:	cmp	r0, #0
   12c44:	bne	13068 <__assert_fail@plt+0x5ec>
   12c48:	mov	r0, r5
   12c4c:	mov	r1, r6
   12c50:	bl	19510 <__assert_fail@plt+0x6a94>
   12c54:	mov	r7, r0
   12c58:	ldr	r0, [r4, #44]	; 0x2c
   12c5c:	tst	r0, #2
   12c60:	movwne	r1, #37356	; 0x91ec
   12c64:	movtne	r1, #1
   12c68:	strne	r1, [r4, #52]	; 0x34
   12c6c:	tst	r0, #128	; 0x80
   12c70:	bne	1301c <__assert_fail@plt+0x5a0>
   12c74:	mov	r0, r5
   12c78:	mov	r1, r6
   12c7c:	mov	r2, r7
   12c80:	bl	16280 <__assert_fail@plt+0x3804>
   12c84:	mov	r9, r0
   12c88:	add	r6, r6, r7, lsl #2
   12c8c:	mov	r0, #0
   12c90:	cmp	r7, r5
   12c94:	bge	12ca8 <__assert_fail@plt+0x22c>
   12c98:	ldr	r0, [r6]
   12c9c:	mov	r1, #1
   12ca0:	bl	19484 <__assert_fail@plt+0x6a08>
   12ca4:	eor	r0, r0, #1
   12ca8:	ldr	r5, [r4, #76]	; 0x4c
   12cac:	cmp	r5, #0
   12cb0:	beq	12d9c <__assert_fail@plt+0x320>
   12cb4:	cmp	r0, #0
   12cb8:	bne	13094 <__assert_fail@plt+0x618>
   12cbc:	movw	r1, #58538	; 0xe4aa
   12cc0:	mov	r0, r5
   12cc4:	movt	r1, #4
   12cc8:	bl	123d4 <strcmp@plt>
   12ccc:	cmp	r0, #0
   12cd0:	beq	12dc8 <__assert_fail@plt+0x34c>
   12cd4:	mov	r0, #0
   12cd8:	mov	r1, r5
   12cdc:	bl	19d58 <__assert_fail@plt+0x72dc>
   12ce0:	str	r0, [sp, #20]
   12ce4:	ldr	r0, [r4, #76]	; 0x4c
   12ce8:	movw	r1, #3092	; 0xc14
   12cec:	movt	r1, #5
   12cf0:	bl	1298c <fopen64@plt>
   12cf4:	cmp	r0, #0
   12cf8:	beq	13140 <__assert_fail@plt+0x6c4>
   12cfc:	mov	r6, r0
   12d00:	bl	12848 <fileno@plt>
   12d04:	cmn	r0, #1
   12d08:	ble	13170 <__assert_fail@plt+0x6f4>
   12d0c:	mov	r5, r0
   12d10:	ldrb	r0, [r4, #80]	; 0x50
   12d14:	cmp	r0, #0
   12d18:	beq	12d8c <__assert_fail@plt+0x310>
   12d1c:	add	r2, sp, #128	; 0x80
   12d20:	mov	r0, #3
   12d24:	mov	r1, r5
   12d28:	bl	125e4 <__fxstat64@plt>
   12d2c:	cmp	r0, #0
   12d30:	bne	12d8c <__assert_fail@plt+0x310>
   12d34:	add	r2, sp, #24
   12d38:	mov	r0, #3
   12d3c:	mov	r1, #0
   12d40:	bl	125e4 <__fxstat64@plt>
   12d44:	cmp	r0, #0
   12d48:	bne	12d8c <__assert_fail@plt+0x310>
   12d4c:	ldr	r0, [sp, #120]	; 0x78
   12d50:	ldr	r2, [sp, #224]	; 0xe0
   12d54:	ldr	r1, [sp, #124]	; 0x7c
   12d58:	ldr	r3, [sp, #228]	; 0xe4
   12d5c:	eor	r1, r3, r1
   12d60:	eor	r0, r2, r0
   12d64:	orrs	r0, r0, r1
   12d68:	bne	12d8c <__assert_fail@plt+0x310>
   12d6c:	ldr	r0, [sp, #24]
   12d70:	ldr	r2, [sp, #128]	; 0x80
   12d74:	ldr	r1, [sp, #28]
   12d78:	ldr	r3, [sp, #132]	; 0x84
   12d7c:	eor	r1, r3, r1
   12d80:	eor	r0, r2, r0
   12d84:	orrs	r0, r0, r1
   12d88:	beq	131bc <__assert_fail@plt+0x740>
   12d8c:	mov	r0, r5
   12d90:	mov	r1, #1
   12d94:	bl	234fc <__assert_fail@plt+0x10a80>
   12d98:	b	12e04 <__assert_fail@plt+0x388>
   12d9c:	cmp	r0, #0
   12da0:	beq	12f90 <__assert_fail@plt+0x514>
   12da4:	mov	r0, r6
   12da8:	bl	2319c <__assert_fail@plt+0x10720>
   12dac:	mov	r5, r0
   12db0:	mov	r0, #0
   12db4:	mov	r6, #0
   12db8:	str	r0, [sp, #20]
   12dbc:	cmp	r5, #0
   12dc0:	bne	12e18 <__assert_fail@plt+0x39c>
   12dc4:	b	13050 <__assert_fail@plt+0x5d4>
   12dc8:	ldrb	r0, [r4, #80]	; 0x50
   12dcc:	cmp	r0, #0
   12dd0:	bne	13190 <__assert_fail@plt+0x714>
   12dd4:	movw	r1, #50555	; 0xc57b
   12dd8:	mov	r0, #0
   12ddc:	mov	r2, #5
   12de0:	movt	r1, #4
   12de4:	bl	1253c <dcgettext@plt>
   12de8:	mov	r1, r0
   12dec:	mov	r0, #0
   12df0:	bl	19d58 <__assert_fail@plt+0x72dc>
   12df4:	str	r0, [sp, #20]
   12df8:	movw	r0, #13648	; 0x3550
   12dfc:	movt	r0, #6
   12e00:	ldr	r6, [r0]
   12e04:	mov	r0, r6
   12e08:	bl	231d0 <__assert_fail@plt+0x10754>
   12e0c:	mov	r5, r0
   12e10:	cmp	r5, #0
   12e14:	beq	13050 <__assert_fail@plt+0x5d4>
   12e18:	add	r1, sp, #128	; 0x80
   12e1c:	mov	r0, r5
   12e20:	str	r6, [sp, #12]
   12e24:	str	r9, [sp, #16]
   12e28:	bl	23204 <__assert_fail@plt+0x10788>
   12e2c:	cmp	r0, #0
   12e30:	beq	12f78 <__assert_fail@plt+0x4fc>
   12e34:	mov	sl, r0
   12e38:	add	r9, sp, #128	; 0x80
   12e3c:	mov	r7, #1
   12e40:	ldrb	r1, [sl]
   12e44:	ldr	r0, [r4, #76]	; 0x4c
   12e48:	cmp	r1, #0
   12e4c:	beq	12e90 <__assert_fail@plt+0x414>
   12e50:	cmp	r0, #0
   12e54:	bne	12e6c <__assert_fail@plt+0x3f0>
   12e58:	mov	r0, sl
   12e5c:	mov	r1, #1
   12e60:	bl	19484 <__assert_fail@plt+0x6a08>
   12e64:	cmp	r0, #0
   12e68:	bne	12fb8 <__assert_fail@plt+0x53c>
   12e6c:	mov	r0, sl
   12e70:	bl	12788 <strlen@plt>
   12e74:	str	r0, [r8, #20]
   12e78:	mov	r0, sl
   12e7c:	bl	13208 <__assert_fail@plt+0x78c>
   12e80:	cmp	r0, #0
   12e84:	beq	12fb4 <__assert_fail@plt+0x538>
   12e88:	and	r7, r7, r0
   12e8c:	b	12f08 <__assert_fail@plt+0x48c>
   12e90:	cmp	r0, #0
   12e94:	beq	12ed8 <__assert_fail@plt+0x45c>
   12e98:	mov	r0, r5
   12e9c:	bl	232bc <__assert_fail@plt+0x10840>
   12ea0:	movw	r1, #50826	; 0xc68a
   12ea4:	mov	r6, r0
   12ea8:	mov	r0, #0
   12eac:	mov	r2, #5
   12eb0:	movt	r1, #4
   12eb4:	bl	1253c <dcgettext@plt>
   12eb8:	ldr	r3, [sp, #20]
   12ebc:	movw	r2, #50815	; 0xc67f
   12ec0:	str	r0, [sp, #4]
   12ec4:	mov	r0, #0
   12ec8:	mov	r1, #0
   12ecc:	str	r6, [sp]
   12ed0:	movt	r2, #4
   12ed4:	b	12ef8 <__assert_fail@plt+0x47c>
   12ed8:	mov	r0, #0
   12edc:	mov	r1, sl
   12ee0:	bl	19d58 <__assert_fail@plt+0x72dc>
   12ee4:	movw	r2, #9967	; 0x26ef
   12ee8:	mov	r3, r0
   12eec:	mov	r0, #0
   12ef0:	mov	r1, #2
   12ef4:	movt	r2, #5
   12ef8:	bl	12674 <error@plt>
   12efc:	mov	r0, #1
   12f00:	mov	r7, #0
   12f04:	str	r0, [r8, #28]
   12f08:	mov	r0, r5
   12f0c:	mov	r1, r9
   12f10:	bl	23204 <__assert_fail@plt+0x10788>
   12f14:	mov	sl, r0
   12f18:	cmp	r0, #0
   12f1c:	bne	12e40 <__assert_fail@plt+0x3c4>
   12f20:	ldr	r0, [sp, #128]	; 0x80
   12f24:	ldr	r9, [sp, #16]
   12f28:	cmp	r0, #2
   12f2c:	beq	12fbc <__assert_fail@plt+0x540>
   12f30:	cmp	r0, #4
   12f34:	bne	13048 <__assert_fail@plt+0x5cc>
   12f38:	bl	127d0 <__errno_location@plt>
   12f3c:	ldr	r6, [r0]
   12f40:	movw	r1, #50760	; 0xc648
   12f44:	mov	r0, #0
   12f48:	mov	r2, #5
   12f4c:	mov	r7, #0
   12f50:	movt	r1, #4
   12f54:	bl	1253c <dcgettext@plt>
   12f58:	ldr	r3, [sp, #20]
   12f5c:	mov	r2, r0
   12f60:	mov	r0, #0
   12f64:	mov	r1, r6
   12f68:	bl	12674 <error@plt>
   12f6c:	mov	r0, #1
   12f70:	str	r0, [r8, #28]
   12f74:	b	12fbc <__assert_fail@plt+0x540>
   12f78:	mov	r7, #1
   12f7c:	ldr	r0, [sp, #128]	; 0x80
   12f80:	ldr	r9, [sp, #16]
   12f84:	cmp	r0, #2
   12f88:	bne	12f30 <__assert_fail@plt+0x4b4>
   12f8c:	b	12fbc <__assert_fail@plt+0x540>
   12f90:	mov	r0, #46	; 0x2e
   12f94:	strh	r0, [sp, #128]	; 0x80
   12f98:	add	r0, sp, #128	; 0x80
   12f9c:	bl	13208 <__assert_fail@plt+0x78c>
   12fa0:	cmp	r0, #0
   12fa4:	bne	13004 <__assert_fail@plt+0x588>
   12fa8:	ldr	r0, [r8, #28]
   12fac:	sub	sp, fp, #28
   12fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fb4:	mov	r7, #0
   12fb8:	ldr	r9, [sp, #16]
   12fbc:	mov	r0, r5
   12fc0:	bl	232e0 <__assert_fail@plt+0x10864>
   12fc4:	tst	r7, #1
   12fc8:	ldrne	r0, [r4, #76]	; 0x4c
   12fcc:	cmpne	r0, #0
   12fd0:	bne	12fe0 <__assert_fail@plt+0x564>
   12fd4:	tst	r7, #1
   12fd8:	beq	12fa8 <__assert_fail@plt+0x52c>
   12fdc:	b	13004 <__assert_fail@plt+0x588>
   12fe0:	ldr	r4, [sp, #12]
   12fe4:	mov	r0, r4
   12fe8:	bl	1247c <ferror@plt>
   12fec:	cmp	r0, #0
   12ff0:	bne	13118 <__assert_fail@plt+0x69c>
   12ff4:	mov	r0, r4
   12ff8:	bl	12884 <fclose@plt>
   12ffc:	cmp	r0, #0
   13000:	bne	13118 <__assert_fail@plt+0x69c>
   13004:	mov	r0, r9
   13008:	bl	154dc <__assert_fail@plt+0x2a60>
   1300c:	bl	18d04 <__assert_fail@plt+0x6288>
   13010:	ldr	r0, [r8, #28]
   13014:	sub	sp, fp, #28
   13018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1301c:	movw	r0, #13640	; 0x3548
   13020:	movt	r0, #6
   13024:	ldr	r9, [r0]
   13028:	add	r0, r4, #28
   1302c:	bl	12530 <ctime@plt>
   13030:	movw	r1, #50384	; 0xc4d0
   13034:	mov	r2, r0
   13038:	mov	r0, r9
   1303c:	movt	r1, #4
   13040:	bl	127c4 <fprintf@plt>
   13044:	b	12c74 <__assert_fail@plt+0x1f8>
   13048:	cmp	r0, #3
   1304c:	bne	130f8 <__assert_fail@plt+0x67c>
   13050:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   13054:	bl	127d0 <__errno_location@plt>
   13058:	ldr	r4, [r0]
   1305c:	movw	r1, #50281	; 0xc469
   13060:	movt	r1, #4
   13064:	b	13078 <__assert_fail@plt+0x5fc>
   13068:	bl	127d0 <__errno_location@plt>
   1306c:	ldr	r4, [r0]
   13070:	movw	r1, #50349	; 0xc4ad
   13074:	movt	r1, #4
   13078:	mov	r0, #0
   1307c:	mov	r2, #5
   13080:	bl	1253c <dcgettext@plt>
   13084:	mov	r2, r0
   13088:	mov	r0, #1
   1308c:	mov	r1, r4
   13090:	bl	12674 <error@plt>
   13094:	movw	r1, #50403	; 0xc4e3
   13098:	mov	r0, #0
   1309c:	mov	r2, #5
   130a0:	movt	r1, #4
   130a4:	bl	1253c <dcgettext@plt>
   130a8:	ldr	r1, [r6]
   130ac:	mov	r4, r0
   130b0:	mov	r0, #0
   130b4:	bl	19d58 <__assert_fail@plt+0x72dc>
   130b8:	mov	r3, r0
   130bc:	mov	r0, #0
   130c0:	mov	r1, #0
   130c4:	mov	r2, r4
   130c8:	bl	12674 <error@plt>
   130cc:	movw	r1, #50420	; 0xc4f4
   130d0:	mov	r0, #0
   130d4:	mov	r2, #5
   130d8:	movt	r1, #4
   130dc:	bl	1253c <dcgettext@plt>
   130e0:	movw	r2, #9967	; 0x26ef
   130e4:	mov	r3, r0
   130e8:	movt	r2, #5
   130ec:	mov	r0, #1
   130f0:	mov	r1, #0
   130f4:	bl	12674 <error@plt>
   130f8:	movw	r0, #50775	; 0xc657
   130fc:	movw	r1, #50599	; 0xc5a7
   13100:	movw	r3, #50609	; 0xc5b1
   13104:	movw	r2, #675	; 0x2a3
   13108:	movt	r0, #4
   1310c:	movt	r1, #4
   13110:	movt	r3, #4
   13114:	bl	12a7c <__assert_fail@plt>
   13118:	movw	r1, #50856	; 0xc6a8
   1311c:	mov	r0, #0
   13120:	mov	r2, #5
   13124:	movt	r1, #4
   13128:	bl	1253c <dcgettext@plt>
   1312c:	ldr	r3, [sp, #20]
   13130:	mov	r2, r0
   13134:	mov	r0, #1
   13138:	mov	r1, #0
   1313c:	bl	12674 <error@plt>
   13140:	bl	127d0 <__errno_location@plt>
   13144:	ldr	r4, [r0]
   13148:	movw	r1, #50572	; 0xc58c
   1314c:	mov	r0, #0
   13150:	mov	r2, #5
   13154:	movt	r1, #4
   13158:	bl	1253c <dcgettext@plt>
   1315c:	ldr	r3, [sp, #20]
   13160:	mov	r2, r0
   13164:	mov	r0, #1
   13168:	mov	r1, r4
   1316c:	bl	12674 <error@plt>
   13170:	movw	r0, #51078	; 0xc786
   13174:	movw	r1, #50599	; 0xc5a7
   13178:	movw	r3, #50609	; 0xc5b1
   1317c:	movw	r2, #610	; 0x262
   13180:	movt	r0, #4
   13184:	movt	r1, #4
   13188:	movt	r3, #4
   1318c:	bl	12a7c <__assert_fail@plt>
   13190:	movw	r1, #50471	; 0xc527
   13194:	mov	r0, #0
   13198:	mov	r2, #5
   1319c:	movt	r1, #4
   131a0:	bl	1253c <dcgettext@plt>
   131a4:	movw	r2, #7860	; 0x1eb4
   131a8:	mov	r3, r0
   131ac:	movt	r2, #5
   131b0:	mov	r0, #1
   131b4:	mov	r1, #0
   131b8:	bl	12674 <error@plt>
   131bc:	movw	r1, #50661	; 0xc5e5
   131c0:	mov	r0, #0
   131c4:	mov	r2, #5
   131c8:	movt	r1, #4
   131cc:	bl	1253c <dcgettext@plt>
   131d0:	mov	r3, r0
   131d4:	ldr	r0, [sp, #20]
   131d8:	movw	r2, #50653	; 0xc5dd
   131dc:	movt	r2, #4
   131e0:	str	r0, [sp]
   131e4:	mov	r0, #1
   131e8:	mov	r1, #0
   131ec:	bl	12674 <error@plt>
   131f0:	movw	r1, #12936	; 0x3288
   131f4:	movt	r1, #6
   131f8:	ldr	r1, [r1]
   131fc:	str	r1, [r0]
   13200:	mov	r0, #1
   13204:	bx	lr
   13208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1320c:	add	fp, sp, #28
   13210:	sub	sp, sp, #276	; 0x114
   13214:	mov	r6, r0
   13218:	bl	12788 <strlen@plt>
   1321c:	movw	r8, #12936	; 0x3288
   13220:	movw	sl, #15936	; 0x3e40
   13224:	movt	r8, #6
   13228:	movt	sl, #6
   1322c:	ldr	r1, [r8]
   13230:	str	r0, [sl, #20]
   13234:	tst	r1, #512	; 0x200
   13238:	beq	13250 <__assert_fail@plt+0x7d4>
   1323c:	ldr	r2, [r8, #4]
   13240:	mvn	r0, #99	; 0x63
   13244:	str	r0, [sl, #16]
   13248:	cmn	r2, #1
   1324c:	strle	r0, [r8, #4]
   13250:	mov	r0, #0
   13254:	str	r0, [sp, #60]	; 0x3c
   13258:	movw	r0, #15980	; 0x3e6c
   1325c:	str	r6, [sp, #56]	; 0x38
   13260:	movt	r0, #6
   13264:	ldr	r0, [r0, #48]	; 0x30
   13268:	cmp	r0, #0
   1326c:	beq	13290 <__assert_fail@plt+0x814>
   13270:	cmp	r0, #1
   13274:	beq	13288 <__assert_fail@plt+0x80c>
   13278:	cmp	r0, #2
   1327c:	bne	1329c <__assert_fail@plt+0x820>
   13280:	mov	r0, #17
   13284:	b	13294 <__assert_fail@plt+0x818>
   13288:	mov	r0, #3
   1328c:	b	13294 <__assert_fail@plt+0x818>
   13290:	mov	r0, #16
   13294:	orr	r1, r1, r0
   13298:	str	r1, [r8]
   1329c:	movw	r0, #15980	; 0x3e6c
   132a0:	mov	r2, #0
   132a4:	mov	r4, #0
   132a8:	movt	r0, #6
   132ac:	ldrb	r0, [r0, #13]
   132b0:	cmp	r0, #0
   132b4:	add	r0, sp, #56	; 0x38
   132b8:	orrne	r1, r1, #64	; 0x40
   132bc:	strne	r1, [r8]
   132c0:	bl	32d0c <__assert_fail@plt+0x20290>
   132c4:	mov	r5, r0
   132c8:	bl	127d0 <__errno_location@plt>
   132cc:	mov	r7, r0
   132d0:	cmp	r5, #0
   132d4:	beq	13320 <__assert_fail@plt+0x8a4>
   132d8:	mov	r0, r5
   132dc:	str	r6, [sp, #20]
   132e0:	str	r4, [r7]
   132e4:	bl	337b4 <__assert_fail@plt+0x20d38>
   132e8:	movw	r6, #15980	; 0x3e6c
   132ec:	cmp	r0, #0
   132f0:	mov	r4, r5
   132f4:	movt	r6, #6
   132f8:	beq	13a68 <__assert_fail@plt+0xfec>
   132fc:	mov	r9, r0
   13300:	add	r0, sp, #64	; 0x40
   13304:	str	r7, [sp, #40]	; 0x28
   13308:	str	r4, [sp, #44]	; 0x2c
   1330c:	add	r0, r0, #96	; 0x60
   13310:	str	r0, [sp, #48]	; 0x30
   13314:	mov	r0, #-2147483648	; 0x80000000
   13318:	str	r0, [sp, #52]	; 0x34
   1331c:	b	1344c <__assert_fail@plt+0x9d0>
   13320:	ldr	r4, [r7]
   13324:	movw	r1, #50873	; 0xc6b9
   13328:	mov	r0, #0
   1332c:	mov	r2, #5
   13330:	movt	r1, #4
   13334:	bl	1253c <dcgettext@plt>
   13338:	mov	r5, r0
   1333c:	mov	r0, #0
   13340:	mov	r1, r6
   13344:	bl	19d58 <__assert_fail@plt+0x72dc>
   13348:	mov	r3, r0
   1334c:	mov	r0, #0
   13350:	mov	r1, r4
   13354:	mov	r2, r5
   13358:	bl	12674 <error@plt>
   1335c:	mov	r4, #1
   13360:	b	13ae0 <__assert_fail@plt+0x1064>
   13364:	movw	r4, #13657	; 0x3559
   13368:	movw	r1, #51538	; 0xc952
   1336c:	movt	r4, #6
   13370:	movt	r1, #4
   13374:	mov	r0, r4
   13378:	bl	12938 <sprintf@plt>
   1337c:	str	r4, [sp, #28]
   13380:	ldr	r0, [r8, #8]
   13384:	ldr	r1, [r6, #72]	; 0x48
   13388:	ldr	r2, [r9, #28]
   1338c:	ldr	r4, [r9, #48]	; 0x30
   13390:	str	r0, [sp, #24]
   13394:	mov	r0, #1
   13398:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1339c:	ldr	r1, [r6, #72]	; 0x48
   133a0:	ldr	r2, [r9, #24]
   133a4:	mov	r7, r0
   133a8:	mov	r0, #2
   133ac:	bl	2f2ec <__assert_fail@plt+0x1c870>
   133b0:	ldr	r1, [sp, #24]
   133b4:	str	r4, [sp]
   133b8:	stmib	sp, {r1, r7}
   133bc:	str	r0, [sp, #12]
   133c0:	movw	r1, #51086	; 0xc78e
   133c4:	ldr	r0, [sp, #36]	; 0x24
   133c8:	ldr	r2, [sp, #32]
   133cc:	ldr	r3, [sp, #28]
   133d0:	movt	r1, #4
   133d4:	bl	127c4 <fprintf@plt>
   133d8:	ldr	r7, [sp, #40]	; 0x28
   133dc:	ldr	r4, [sp, #44]	; 0x2c
   133e0:	b	134a4 <__assert_fail@plt+0xa28>
   133e4:	mov	r7, #0
   133e8:	b	13854 <__assert_fail@plt+0xdd8>
   133ec:	movw	r0, #13657	; 0x3559
   133f0:	movw	r1, #51538	; 0xc952
   133f4:	str	ip, [sp, #32]
   133f8:	movt	r0, #6
   133fc:	movt	r1, #4
   13400:	bl	12938 <sprintf@plt>
   13404:	ldr	ip, [sp, #32]
   13408:	movw	r3, #13657	; 0x3559
   1340c:	movt	r3, #6
   13410:	ldrb	r0, [sl, #4]
   13414:	ldrb	r1, [sl, #5]
   13418:	mov	r2, ip
   1341c:	str	r7, [sp]
   13420:	str	r4, [sp, #4]
   13424:	str	r0, [sp, #8]
   13428:	ldr	r0, [sp, #36]	; 0x24
   1342c:	str	r1, [sp, #12]
   13430:	movw	r1, #51335	; 0xc887
   13434:	movt	r1, #4
   13438:	bl	127c4 <fprintf@plt>
   1343c:	cmp	r4, #0
   13440:	ldr	r4, [sp, #44]	; 0x2c
   13444:	bne	13910 <__assert_fail@plt+0xe94>
   13448:	b	138bc <__assert_fail@plt+0xe40>
   1344c:	ldrb	r0, [sl, #32]
   13450:	cmp	r0, #0
   13454:	beq	1346c <__assert_fail@plt+0x9f0>
   13458:	ldr	r0, [r9, #48]	; 0x30
   1345c:	ldr	r1, [sp, #52]	; 0x34
   13460:	cmp	r0, r1
   13464:	beq	1346c <__assert_fail@plt+0x9f0>
   13468:	bl	18ac4 <__assert_fail@plt+0x6048>
   1346c:	ldr	r0, [r9, #48]	; 0x30
   13470:	str	r0, [sp, #52]	; 0x34
   13474:	mov	r0, #0
   13478:	strb	r0, [sl, #4]
   1347c:	strb	r0, [sl, #40]	; 0x28
   13480:	ldr	r0, [r9, #80]	; 0x50
   13484:	cmp	r0, #0
   13488:	str	r0, [sl, #8]
   1348c:	movwne	r0, #1
   13490:	strb	r0, [sl, #5]
   13494:	ldrb	r0, [r6, #44]	; 0x2c
   13498:	tst	r0, #4
   1349c:	bne	13994 <__assert_fail@plt+0xf18>
   134a0:	add	r5, r9, #56	; 0x38
   134a4:	ldrh	r0, [r5]
   134a8:	cmp	r0, #6
   134ac:	ldrne	r0, [r9, #48]	; 0x30
   134b0:	cmpne	r0, #0
   134b4:	bne	134ec <__assert_fail@plt+0xa70>
   134b8:	ldr	r0, [r8]
   134bc:	tst	r0, #512	; 0x200
   134c0:	beq	134f8 <__assert_fail@plt+0xa7c>
   134c4:	ldr	r0, [r8, #4]
   134c8:	cmp	r0, #0
   134cc:	blt	134f8 <__assert_fail@plt+0xa7c>
   134d0:	bl	12a34 <close@plt>
   134d4:	mvn	r0, #0
   134d8:	str	r0, [r8, #4]
   134dc:	ldrb	r0, [r8, #1]
   134e0:	tst	r0, #2
   134e4:	bne	13504 <__assert_fail@plt+0xa88>
   134e8:	b	13548 <__assert_fail@plt+0xacc>
   134ec:	ldr	r1, [r8, #8]
   134f0:	cmp	r0, r1
   134f4:	bgt	134b8 <__assert_fail@plt+0xa3c>
   134f8:	ldrb	r0, [r8, #1]
   134fc:	tst	r0, #2
   13500:	beq	13548 <__assert_fail@plt+0xacc>
   13504:	ldr	r0, [r4, #32]
   13508:	cmn	r0, #100	; 0x64
   1350c:	beq	13518 <__assert_fail@plt+0xa9c>
   13510:	cmn	r0, #1
   13514:	ble	13b04 <__assert_fail@plt+0x1088>
   13518:	ldr	r1, [r8, #4]
   1351c:	str	r0, [sl, #16]
   13520:	cmn	r1, #1
   13524:	bgt	13548 <__assert_fail@plt+0xacc>
   13528:	cmn	r0, #100	; 0x64
   1352c:	bne	13538 <__assert_fail@plt+0xabc>
   13530:	mvn	r0, #99	; 0x63
   13534:	b	13544 <__assert_fail@plt+0xac8>
   13538:	cmp	r0, #0
   1353c:	blt	13b64 <__assert_fail@plt+0x10e8>
   13540:	bl	2355c <__assert_fail@plt+0x10ae0>
   13544:	str	r0, [r8, #4]
   13548:	ldr	r0, [r9, #48]	; 0x30
   1354c:	ldr	r1, [sp, #48]	; 0x30
   13550:	str	r0, [r8, #8]
   13554:	ldrd	r2, [r9, #160]	; 0xa0
   13558:	strd	r2, [r1]
   1355c:	ldrh	r1, [r9, #56]	; 0x38
   13560:	sub	r1, r1, #2
   13564:	cmp	r1, #11
   13568:	bhi	1368c <__assert_fail@plt+0xc10>
   1356c:	add	r2, pc, #0
   13570:	ldr	pc, [r2, r1, lsl #2]
   13574:	andeq	r3, r1, r4, lsr #11
   13578:	andeq	r3, r1, ip, lsl #13
   1357c:	strdeq	r3, [r1], -r0
   13580:	andeq	r3, r1, ip, lsl #13
   13584:	andeq	r3, r1, ip, lsl #13
   13588:	andeq	r3, r1, r8, asr #12
   1358c:	andeq	r3, r1, ip, lsl #13
   13590:	andeq	r3, r1, ip, lsl #13
   13594:	andeq	r3, r1, ip, lsl #12
   13598:	andeq	r3, r1, ip, lsl #13
   1359c:	andeq	r3, r1, ip, lsl #13
   135a0:	andeq	r3, r1, r8, asr r6
   135a4:	ldr	r0, [r9, #80]	; 0x50
   135a8:	and	r0, r0, #61440	; 0xf000
   135ac:	cmp	r0, #40960	; 0xa000
   135b0:	bne	1370c <__assert_fail@plt+0xc90>
   135b4:	movw	r1, #51543	; 0xc957
   135b8:	mov	r0, #0
   135bc:	mov	r2, #5
   135c0:	movt	r1, #4
   135c4:	bl	1253c <dcgettext@plt>
   135c8:	ldr	r1, [r9, #28]
   135cc:	mov	r4, r0
   135d0:	mov	r0, #0
   135d4:	bl	19d58 <__assert_fail@plt+0x72dc>
   135d8:	mov	r3, r0
   135dc:	mov	r0, #0
   135e0:	mov	r1, #0
   135e4:	mov	r2, r4
   135e8:	bl	12674 <error@plt>
   135ec:	b	13a40 <__assert_fail@plt+0xfc4>
   135f0:	ldr	r1, [r9, #28]
   135f4:	ldr	r0, [r9, #32]
   135f8:	bl	18990 <__assert_fail@plt+0x5f14>
   135fc:	ldrb	r0, [r6]
   13600:	cmp	r0, #0
   13604:	bne	13a4c <__assert_fail@plt+0xfd0>
   13608:	b	1368c <__assert_fail@plt+0xc10>
   1360c:	cmp	r0, #0
   13610:	beq	13648 <__assert_fail@plt+0xbcc>
   13614:	ldr	r0, [r9, #24]
   13618:	ldr	r2, [r6, #52]	; 0x34
   1361c:	sub	r1, fp, #136	; 0x88
   13620:	blx	r2
   13624:	cmp	r0, #0
   13628:	beq	13638 <__assert_fail@plt+0xbbc>
   1362c:	ldr	r0, [r7]
   13630:	cmp	r0, #40	; 0x28
   13634:	beq	1367c <__assert_fail@plt+0xc00>
   13638:	ldr	r1, [r9, #28]
   1363c:	ldr	r0, [r9, #32]
   13640:	bl	18990 <__assert_fail@plt+0x5f14>
   13644:	b	1368c <__assert_fail@plt+0xc10>
   13648:	ldr	r1, [r9, #28]
   1364c:	ldr	r0, [r9, #32]
   13650:	bl	18990 <__assert_fail@plt+0x5f14>
   13654:	b	13a4c <__assert_fail@plt+0xfd0>
   13658:	ldr	r0, [r9, #24]
   1365c:	ldr	r2, [r6, #52]	; 0x34
   13660:	sub	r1, fp, #136	; 0x88
   13664:	blx	r2
   13668:	cmp	r0, #0
   1366c:	beq	1368c <__assert_fail@plt+0xc10>
   13670:	ldr	r0, [r7]
   13674:	cmp	r0, #40	; 0x28
   13678:	bne	1368c <__assert_fail@plt+0xc10>
   1367c:	ldr	r1, [r9, #28]
   13680:	mov	r0, #40	; 0x28
   13684:	bl	18990 <__assert_fail@plt+0x5f14>
   13688:	b	13a4c <__assert_fail@plt+0xfd0>
   1368c:	ldrh	r1, [r5]
   13690:	movw	r0, #65534	; 0xfffe
   13694:	and	r0, r1, r0
   13698:	cmp	r0, #10
   1369c:	bne	136d4 <__assert_fail@plt+0xc58>
   136a0:	ldrb	r0, [sl, #4]
   136a4:	cmp	r0, #0
   136a8:	bne	13b24 <__assert_fail@plt+0x10a8>
   136ac:	ldr	r0, [sl, #8]
   136b0:	cmp	r1, #11
   136b4:	cmpne	r0, #0
   136b8:	bne	13b44 <__assert_fail@plt+0x10c8>
   136bc:	str	r0, [fp, #-136]	; 0xffffff78
   136c0:	ldr	r1, [r9, #48]	; 0x30
   136c4:	cmp	r0, #0
   136c8:	str	r1, [sl]
   136cc:	bne	137d8 <__assert_fail@plt+0xd5c>
   136d0:	b	13834 <__assert_fail@plt+0xdb8>
   136d4:	movw	r0, #257	; 0x101
   136d8:	add	r1, r9, #64	; 0x40
   136dc:	mov	r2, #104	; 0x68
   136e0:	strh	r0, [sl, #4]
   136e4:	add	r0, sp, #64	; 0x40
   136e8:	bl	124b8 <memcpy@plt>
   136ec:	ldr	r0, [sp, #80]	; 0x50
   136f0:	cmp	r0, #0
   136f4:	str	r0, [sl, #8]
   136f8:	str	r0, [fp, #-136]	; 0xffffff78
   136fc:	beq	13784 <__assert_fail@plt+0xd08>
   13700:	ldr	r0, [r9, #48]	; 0x30
   13704:	str	r0, [sl]
   13708:	b	137d8 <__assert_fail@plt+0xd5c>
   1370c:	movw	r1, #51664	; 0xc9d0
   13710:	mov	r0, #0
   13714:	mov	r2, #5
   13718:	movt	r1, #4
   1371c:	bl	1253c <dcgettext@plt>
   13720:	ldr	r1, [r9, #28]
   13724:	mov	r5, r0
   13728:	mov	r0, #0
   1372c:	bl	19d58 <__assert_fail@plt+0x72dc>
   13730:	mov	r7, r0
   13734:	ldr	r0, [r9]
   13738:	ldr	r1, [r6, #72]	; 0x48
   1373c:	ldr	r4, [r0, #40]	; 0x28
   13740:	cmp	r4, #0
   13744:	beq	13a14 <__assert_fail@plt+0xf98>
   13748:	mov	r9, r7
   1374c:	mov	r7, r5
   13750:	ldr	r5, [r0, #28]
   13754:	mov	r0, #0
   13758:	ldrb	r6, [r5, r4]
   1375c:	strb	r0, [r5, r4]
   13760:	mov	r0, #1
   13764:	mov	r2, r5
   13768:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1376c:	strb	r6, [r5, r4]
   13770:	movw	r6, #15980	; 0x3e6c
   13774:	mov	r5, r7
   13778:	mov	r7, r9
   1377c:	movt	r6, #6
   13780:	b	13a24 <__assert_fail@plt+0xfa8>
   13784:	movw	r1, #51292	; 0xc85c
   13788:	mov	r0, #0
   1378c:	mov	r2, #5
   13790:	movt	r1, #4
   13794:	bl	1253c <dcgettext@plt>
   13798:	ldr	r1, [r6, #72]	; 0x48
   1379c:	ldr	r2, [r9, #28]
   137a0:	mov	r4, r0
   137a4:	mov	r0, #0
   137a8:	bl	2f2ec <__assert_fail@plt+0x1c870>
   137ac:	mov	r2, r4
   137b0:	ldr	r4, [sp, #44]	; 0x2c
   137b4:	mov	r3, r0
   137b8:	mov	r0, #0
   137bc:	mov	r1, #0
   137c0:	bl	12674 <error@plt>
   137c4:	ldr	r0, [fp, #-136]	; 0xffffff78
   137c8:	ldr	r1, [r9, #48]	; 0x30
   137cc:	cmp	r0, #0
   137d0:	str	r1, [sl]
   137d4:	beq	13834 <__assert_fail@plt+0xdb8>
   137d8:	ldr	r1, [r9, #28]
   137dc:	mov	r0, #0
   137e0:	add	r2, r9, #168	; 0xa8
   137e4:	add	r3, sp, #64	; 0x40
   137e8:	str	r0, [sp]
   137ec:	sub	r0, fp, #136	; 0x88
   137f0:	bl	19338 <__assert_fail@plt+0x68bc>
   137f4:	cmp	r0, #0
   137f8:	beq	13a4c <__assert_fail@plt+0xfd0>
   137fc:	ldr	r1, [fp, #-136]	; 0xffffff78
   13800:	ldrh	r0, [r5]
   13804:	and	r1, r1, #61440	; 0xf000
   13808:	cmp	r1, #16384	; 0x4000
   1380c:	bne	13838 <__assert_fail@plt+0xdbc>
   13810:	mov	r7, #1
   13814:	cmp	r0, #11
   13818:	bne	13854 <__assert_fail@plt+0xdd8>
   1381c:	mov	r0, r4
   13820:	mov	r1, r9
   13824:	mov	r2, #1
   13828:	bl	35048 <__assert_fail@plt+0x225cc>
   1382c:	ldr	r7, [sp, #40]	; 0x28
   13830:	b	13a4c <__assert_fail@plt+0xfd0>
   13834:	ldrh	r0, [r5]
   13838:	cmp	r0, #6
   1383c:	bhi	133e4 <__assert_fail@plt+0x968>
   13840:	mov	r1, #1
   13844:	mov	r2, #70	; 0x46
   13848:	mov	r7, #1
   1384c:	tst	r2, r1, lsl r0
   13850:	moveq	r7, #0
   13854:	ldr	r2, [r6, #4]
   13858:	mov	r1, #0
   1385c:	cmp	r2, #0
   13860:	ldrge	r3, [r9, #48]	; 0x30
   13864:	cmpge	r3, r2
   13868:	bge	139e8 <__assert_fail@plt+0xf6c>
   1386c:	ldrb	r3, [r6]
   13870:	subs	r2, r0, #6
   13874:	sub	r0, r0, #1
   13878:	mov	r4, #1
   1387c:	clz	r0, r0
   13880:	movwne	r2, #1
   13884:	lsr	r0, r0, #5
   13888:	clz	r3, r3
   1388c:	lsr	r3, r3, #5
   13890:	orr	r2, r2, r3
   13894:	and	r0, r0, r3
   13898:	eor	r0, r0, r2
   1389c:	cmp	r0, #1
   138a0:	beq	13928 <__assert_fail@plt+0xeac>
   138a4:	ldrb	r0, [r6, #44]	; 0x2c
   138a8:	tst	r0, #4
   138ac:	bne	13948 <__assert_fail@plt+0xecc>
   138b0:	cmp	r4, #0
   138b4:	ldr	r4, [sp, #44]	; 0x2c
   138b8:	bne	13910 <__assert_fail@plt+0xe94>
   138bc:	ldrh	r0, [r9, #56]	; 0x38
   138c0:	orr	r0, r0, #1
   138c4:	subs	r0, r0, #11
   138c8:	movwne	r0, #1
   138cc:	strb	r0, [sl, #4]
   138d0:	ldr	r0, [r9, #24]
   138d4:	str	r0, [sl, #12]
   138d8:	ldr	r0, [r4, #32]
   138dc:	str	r0, [sl, #16]
   138e0:	bl	15fa0 <__assert_fail@plt+0x3524>
   138e4:	mov	r2, r0
   138e8:	ldr	r0, [r9, #28]
   138ec:	add	r1, sp, #64	; 0x40
   138f0:	bl	19be4 <__assert_fail@plt+0x7168>
   138f4:	ldrb	r0, [sl, #24]
   138f8:	cmp	r0, #0
   138fc:	beq	13910 <__assert_fail@plt+0xe94>
   13900:	mov	r0, r4
   13904:	mov	r1, r9
   13908:	mov	r2, #4
   1390c:	bl	35048 <__assert_fail@plt+0x225cc>
   13910:	ldrh	r0, [r5]
   13914:	ldr	r7, [sp, #40]	; 0x28
   13918:	cmp	r0, #6
   1391c:	moveq	r0, #0
   13920:	strbeq	r0, [sl, #24]
   13924:	b	13a4c <__assert_fail@plt+0xfd0>
   13928:	ldr	r0, [r6, #8]
   1392c:	ldr	r2, [r9, #48]	; 0x30
   13930:	cmp	r2, r0
   13934:	movwlt	r1, #1
   13938:	mov	r4, r1
   1393c:	ldrb	r0, [r6, #44]	; 0x2c
   13940:	tst	r0, #4
   13944:	beq	138b0 <__assert_fail@plt+0xe34>
   13948:	movw	r0, #13640	; 0x3548
   1394c:	ldr	r2, [r9, #28]
   13950:	ldr	r1, [r6, #72]	; 0x48
   13954:	movt	r0, #6
   13958:	ldr	r0, [r0]
   1395c:	str	r0, [sp, #36]	; 0x24
   13960:	mov	r0, #0
   13964:	bl	2f2ec <__assert_fail@plt+0x1c870>
   13968:	ldrh	r2, [r9, #56]	; 0x38
   1396c:	mov	ip, r0
   13970:	sub	r0, r2, #1
   13974:	uxth	r1, r0
   13978:	cmp	r1, #14
   1397c:	bcs	133ec <__assert_fail@plt+0x970>
   13980:	movw	r1, #51744	; 0xca20
   13984:	sxth	r0, r0
   13988:	movt	r1, #4
   1398c:	ldr	r3, [r1, r0, lsl #2]
   13990:	b	13410 <__assert_fail@plt+0x994>
   13994:	movw	r0, #13640	; 0x3548
   13998:	ldr	r2, [r9, #28]
   1399c:	ldr	r1, [r6, #72]	; 0x48
   139a0:	movt	r0, #6
   139a4:	ldr	r0, [r0]
   139a8:	str	r0, [sp, #36]	; 0x24
   139ac:	mov	r0, #0
   139b0:	bl	2f2ec <__assert_fail@plt+0x1c870>
   139b4:	mov	r5, r9
   139b8:	str	r0, [sp, #32]
   139bc:	ldrh	r2, [r5, #56]!	; 0x38
   139c0:	sub	r0, r2, #1
   139c4:	uxth	r1, r0
   139c8:	cmp	r1, #14
   139cc:	bcs	13364 <__assert_fail@plt+0x8e8>
   139d0:	movw	r1, #51744	; 0xca20
   139d4:	sxth	r0, r0
   139d8:	movt	r1, #4
   139dc:	ldr	r0, [r1, r0, lsl #2]
   139e0:	str	r0, [sp, #28]
   139e4:	b	13380 <__assert_fail@plt+0x904>
   139e8:	mov	r0, r4
   139ec:	mov	r1, r9
   139f0:	mov	r2, #4
   139f4:	bl	35048 <__assert_fail@plt+0x225cc>
   139f8:	ldr	r0, [r6, #4]
   139fc:	ldr	r1, [r9, #48]	; 0x30
   13a00:	cmp	r1, r0
   13a04:	ldrh	r0, [r9, #56]	; 0x38
   13a08:	mov	r1, #0
   13a0c:	movwgt	r1, #1
   13a10:	b	1386c <__assert_fail@plt+0xdf0>
   13a14:	movw	r2, #58175	; 0xe33f
   13a18:	mov	r0, #1
   13a1c:	movt	r2, #4
   13a20:	bl	2f2ec <__assert_fail@plt+0x1c870>
   13a24:	str	r0, [sp]
   13a28:	mov	r0, #0
   13a2c:	mov	r1, #0
   13a30:	mov	r2, r5
   13a34:	mov	r3, r7
   13a38:	bl	12674 <error@plt>
   13a3c:	ldr	r7, [sp, #40]	; 0x28
   13a40:	ldr	r4, [sp, #44]	; 0x2c
   13a44:	mov	r0, #1
   13a48:	str	r0, [sl, #28]
   13a4c:	mov	r0, #0
   13a50:	str	r0, [r7]
   13a54:	mov	r0, r4
   13a58:	bl	337b4 <__assert_fail@plt+0x20d38>
   13a5c:	mov	r9, r0
   13a60:	cmp	r0, #0
   13a64:	bne	1344c <__assert_fail@plt+0x9d0>
   13a68:	ldr	r5, [r7]
   13a6c:	cmp	r5, #0
   13a70:	beq	13a9c <__assert_fail@plt+0x1020>
   13a74:	ldr	r1, [sp, #20]
   13a78:	mov	r0, #0
   13a7c:	mov	r4, #0
   13a80:	bl	19d58 <__assert_fail@plt+0x72dc>
   13a84:	movw	r2, #50890	; 0xc6ca
   13a88:	mov	r3, r0
   13a8c:	mov	r0, #0
   13a90:	mov	r1, r5
   13a94:	movt	r2, #4
   13a98:	b	13adc <__assert_fail@plt+0x1060>
   13a9c:	mov	r0, r4
   13aa0:	bl	3360c <__assert_fail@plt+0x20b90>
   13aa4:	ldr	r6, [sp, #20]
   13aa8:	cmp	r0, #0
   13aac:	beq	13af4 <__assert_fail@plt+0x1078>
   13ab0:	ldr	r5, [r7]
   13ab4:	movw	r1, #50948	; 0xc704
   13ab8:	mov	r0, #0
   13abc:	mov	r2, #5
   13ac0:	mov	r4, #0
   13ac4:	movt	r1, #4
   13ac8:	bl	1253c <dcgettext@plt>
   13acc:	mov	r2, r0
   13ad0:	mov	r0, #0
   13ad4:	mov	r1, r5
   13ad8:	mov	r3, r6
   13adc:	bl	12674 <error@plt>
   13ae0:	mov	r0, #1
   13ae4:	str	r0, [sl, #28]
   13ae8:	mov	r0, r4
   13aec:	sub	sp, fp, #28
   13af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13af4:	mov	r4, #1
   13af8:	mov	r0, r4
   13afc:	sub	sp, fp, #28
   13b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b04:	movw	r0, #51003	; 0xc73b
   13b08:	movw	r1, #50599	; 0xc5a7
   13b0c:	movw	r3, #51037	; 0xc75d
   13b10:	mov	r2, #107	; 0x6b
   13b14:	movt	r0, #4
   13b18:	movt	r1, #4
   13b1c:	movt	r3, #4
   13b20:	bl	12a7c <__assert_fail@plt>
   13b24:	movw	r0, #51190	; 0xc7f6
   13b28:	movw	r1, #50599	; 0xc5a7
   13b2c:	movw	r3, #51207	; 0xc807
   13b30:	mov	r2, #380	; 0x17c
   13b34:	movt	r0, #4
   13b38:	movt	r1, #4
   13b3c:	movt	r3, #4
   13b40:	bl	12a7c <__assert_fail@plt>
   13b44:	movw	r0, #51247	; 0xc82f
   13b48:	movw	r1, #50599	; 0xc5a7
   13b4c:	movw	r3, #51207	; 0xc807
   13b50:	movw	r2, #381	; 0x17d
   13b54:	movt	r0, #4
   13b58:	movt	r1, #4
   13b5c:	movt	r3, #4
   13b60:	bl	12a7c <__assert_fail@plt>
   13b64:	movw	r0, #51058	; 0xc772
   13b68:	movw	r1, #50599	; 0xc5a7
   13b6c:	movw	r3, #51037	; 0xc75d
   13b70:	mov	r2, #125	; 0x7d
   13b74:	movt	r0, #4
   13b78:	movt	r1, #4
   13b7c:	movt	r3, #4
   13b80:	bl	12a7c <__assert_fail@plt>
   13b84:	andeq	r0, r0, r0
   13b88:	ldrd	r0, [r1, #72]	; 0x48
   13b8c:	mov	r3, #60	; 0x3c
   13b90:	b	13b98 <__assert_fail@plt+0x111c>
   13b94:	nop	{0}
   13b98:	push	{r4, r5, r7, sl, fp, lr}
   13b9c:	add	fp, sp, #16
   13ba0:	mov	r4, r1
   13ba4:	ldr	r1, [r2, #44]	; 0x2c
   13ba8:	cmp	r1, #2
   13bac:	beq	13c58 <__assert_fail@plt+0x11dc>
   13bb0:	cmp	r1, #1
   13bb4:	beq	13c0c <__assert_fail@plt+0x1190>
   13bb8:	cmp	r1, #0
   13bbc:	bne	13cb4 <__assert_fail@plt+0x1238>
   13bc0:	ldr	r5, [r2, #52]	; 0x34
   13bc4:	ldr	r2, [r2, #48]	; 0x30
   13bc8:	cmp	r0, r2
   13bcc:	moveq	r1, #0
   13bd0:	cmpeq	r4, r5
   13bd4:	beq	13cac <__assert_fail@plt+0x1230>
   13bd8:	mov	r1, r2
   13bdc:	bl	12854 <difftime@plt>
   13be0:	vldr	d16, [pc, #240]	; 13cd8 <__assert_fail@plt+0x125c>
   13be4:	sub	r0, r4, r5
   13be8:	mov	r1, #0
   13bec:	vmov	s2, r0
   13bf0:	vcvt.f64.s32	d17, s2
   13bf4:	vmla.f64	d0, d17, d16
   13bf8:	vcmpe.f64	d0, #0.0
   13bfc:	vmrs	APSR_nzcv, fpscr
   13c00:	movwpl	r1, #1
   13c04:	mov	r0, r1
   13c08:	pop	{r4, r5, r7, sl, fp, pc}
   13c0c:	ldr	r5, [r2, #52]	; 0x34
   13c10:	ldr	r2, [r2, #48]	; 0x30
   13c14:	cmp	r0, r2
   13c18:	moveq	r1, #0
   13c1c:	cmpeq	r4, r5
   13c20:	beq	13cac <__assert_fail@plt+0x1230>
   13c24:	mov	r1, r2
   13c28:	bl	12854 <difftime@plt>
   13c2c:	vldr	d16, [pc, #164]	; 13cd8 <__assert_fail@plt+0x125c>
   13c30:	sub	r0, r4, r5
   13c34:	mov	r1, #0
   13c38:	vmov	s2, r0
   13c3c:	vcvt.f64.s32	d17, s2
   13c40:	vmla.f64	d0, d17, d16
   13c44:	vcmpe.f64	d0, #0.0
   13c48:	vmrs	APSR_nzcv, fpscr
   13c4c:	movwmi	r1, #1
   13c50:	mov	r0, r1
   13c54:	pop	{r4, r5, r7, sl, fp, pc}
   13c58:	ldr	r7, [r2, #52]	; 0x34
   13c5c:	ldr	r2, [r2, #48]	; 0x30
   13c60:	mov	r5, r3
   13c64:	mov	r1, r2
   13c68:	bl	12854 <difftime@plt>
   13c6c:	vldr	d16, [pc, #100]	; 13cd8 <__assert_fail@plt+0x125c>
   13c70:	sub	r0, r4, r7
   13c74:	vmov	s4, r5
   13c78:	mov	r1, #0
   13c7c:	vmov	s2, r0
   13c80:	mov	r0, #0
   13c84:	vcvt.f64.s32	d17, s2
   13c88:	vcvt.f64.s32	d18, s4
   13c8c:	vmla.f64	d0, d17, d16
   13c90:	vcmpe.f64	d0, d18
   13c94:	vmrs	APSR_nzcv, fpscr
   13c98:	vcmpe.f64	d0, #0.0
   13c9c:	movwls	r1, #1
   13ca0:	vmrs	APSR_nzcv, fpscr
   13ca4:	movwgt	r0, #1
   13ca8:	and	r1, r0, r1
   13cac:	mov	r0, r1
   13cb0:	pop	{r4, r5, r7, sl, fp, pc}
   13cb4:	movw	r0, #55401	; 0xd869
   13cb8:	movw	r1, #51839	; 0xca7f
   13cbc:	movw	r3, #52818	; 0xce52
   13cc0:	mov	r2, #138	; 0x8a
   13cc4:	movt	r0, #4
   13cc8:	movt	r1, #4
   13ccc:	movt	r3, #4
   13cd0:	bl	12a7c <__assert_fail@plt>
   13cd4:	nop	{0}
   13cd8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13cdc:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13ce0:	push	{r4, r5, r6, sl, fp, lr}
   13ce4:	add	fp, sp, #16
   13ce8:	mov	r5, r2
   13cec:	ldr	r2, [r2, #156]	; 0x9c
   13cf0:	mov	r4, r1
   13cf4:	mov	r6, r0
   13cf8:	cmp	r2, #0
   13cfc:	beq	13d18 <__assert_fail@plt+0x129c>
   13d00:	mov	r0, r6
   13d04:	mov	r1, r4
   13d08:	bl	19be4 <__assert_fail@plt+0x7168>
   13d0c:	cmp	r0, #0
   13d10:	moveq	r0, #0
   13d14:	popeq	{r4, r5, r6, sl, fp, pc}
   13d18:	ldr	r2, [r5, #160]	; 0xa0
   13d1c:	mov	r0, r6
   13d20:	mov	r1, r4
   13d24:	pop	{r4, r5, r6, sl, fp, lr}
   13d28:	b	19be4 <__assert_fail@plt+0x7168>
   13d2c:	nop	{0}
   13d30:	push	{r4, r5, r6, r7, fp, lr}
   13d34:	add	fp, sp, #16
   13d38:	ldr	r0, [r2, #44]	; 0x2c
   13d3c:	cmp	r0, #0
   13d40:	bne	13d90 <__assert_fail@plt+0x1314>
   13d44:	ldrd	r4, [r2, #48]	; 0x30
   13d48:	ldrd	r6, [r1, #72]	; 0x48
   13d4c:	cmp	r4, r6
   13d50:	moveq	r0, #0
   13d54:	cmpeq	r5, r7
   13d58:	popeq	{r4, r5, r6, r7, fp, pc}
   13d5c:	mov	r0, r6
   13d60:	mov	r1, r4
   13d64:	bl	12854 <difftime@plt>
   13d68:	vldr	d16, [pc, #64]	; 13db0 <__assert_fail@plt+0x1334>
   13d6c:	sub	r0, r7, r5
   13d70:	vmov	s2, r0
   13d74:	mov	r0, #0
   13d78:	vcvt.f64.s32	d17, s2
   13d7c:	vmla.f64	d0, d17, d16
   13d80:	vcmpe.f64	d0, #0.0
   13d84:	vmrs	APSR_nzcv, fpscr
   13d88:	movwpl	r0, #1
   13d8c:	pop	{r4, r5, r6, r7, fp, pc}
   13d90:	movw	r0, #51800	; 0xca58
   13d94:	movw	r1, #51839	; 0xca7f
   13d98:	movw	r3, #51846	; 0xca86
   13d9c:	mov	r2, #166	; 0xa6
   13da0:	movt	r0, #4
   13da4:	movt	r1, #4
   13da8:	movt	r3, #4
   13dac:	bl	12a7c <__assert_fail@plt>
   13db0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13db4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13db8:	ldrd	r0, [r1, #72]	; 0x48
   13dbc:	movw	r3, #20864	; 0x5180
   13dc0:	movt	r3, #1
   13dc4:	b	13b98 <__assert_fail@plt+0x111c>
   13dc8:	mov	r0, #1
   13dcc:	bx	lr
   13dd0:	ldrd	r0, [r1, #88]	; 0x58
   13dd4:	mov	r3, #60	; 0x3c
   13dd8:	b	13b98 <__assert_fail@plt+0x111c>
   13ddc:	nop	{0}
   13de0:	push	{r4, r5, r6, r7, fp, lr}
   13de4:	add	fp, sp, #16
   13de8:	ldr	r0, [r2, #44]	; 0x2c
   13dec:	cmp	r0, #0
   13df0:	bne	13e40 <__assert_fail@plt+0x13c4>
   13df4:	ldrd	r4, [r2, #48]	; 0x30
   13df8:	ldrd	r6, [r1, #88]	; 0x58
   13dfc:	cmp	r4, r6
   13e00:	moveq	r0, #0
   13e04:	cmpeq	r5, r7
   13e08:	popeq	{r4, r5, r6, r7, fp, pc}
   13e0c:	mov	r0, r6
   13e10:	mov	r1, r4
   13e14:	bl	12854 <difftime@plt>
   13e18:	vldr	d16, [pc, #64]	; 13e60 <__assert_fail@plt+0x13e4>
   13e1c:	sub	r0, r7, r5
   13e20:	vmov	s2, r0
   13e24:	mov	r0, #0
   13e28:	vcvt.f64.s32	d17, s2
   13e2c:	vmla.f64	d0, d17, d16
   13e30:	vcmpe.f64	d0, #0.0
   13e34:	vmrs	APSR_nzcv, fpscr
   13e38:	movwpl	r0, #1
   13e3c:	pop	{r4, r5, r6, r7, fp, pc}
   13e40:	movw	r0, #51800	; 0xca58
   13e44:	movw	r1, #51839	; 0xca7f
   13e48:	movw	r3, #51913	; 0xcac9
   13e4c:	mov	r2, #199	; 0xc7
   13e50:	movt	r0, #4
   13e54:	movt	r1, #4
   13e58:	movt	r3, #4
   13e5c:	bl	12a7c <__assert_fail@plt>
   13e60:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13e64:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13e68:	push	{r4, r5, r6, sl, fp, lr}
   13e6c:	add	fp, sp, #16
   13e70:	mov	r5, r2
   13e74:	ldr	r2, [r2, #156]	; 0x9c
   13e78:	mov	r4, r1
   13e7c:	mov	r6, r0
   13e80:	cmp	r2, #0
   13e84:	beq	13e94 <__assert_fail@plt+0x1418>
   13e88:	mov	r0, r6
   13e8c:	mov	r1, r4
   13e90:	bl	19be4 <__assert_fail@plt+0x7168>
   13e94:	ldr	r2, [r5, #160]	; 0xa0
   13e98:	mov	r0, r6
   13e9c:	mov	r1, r4
   13ea0:	pop	{r4, r5, r6, sl, fp, lr}
   13ea4:	b	19be4 <__assert_fail@plt+0x7168>
   13ea8:	ldrd	r0, [r1, #88]	; 0x58
   13eac:	movw	r3, #20864	; 0x5180
   13eb0:	movt	r3, #1
   13eb4:	b	13b98 <__assert_fail@plt+0x111c>
   13eb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ebc:	add	fp, sp, #24
   13ec0:	movw	r9, #15936	; 0x3e40
   13ec4:	mov	r5, r1
   13ec8:	movw	r1, #54804	; 0xd614
   13ecc:	mov	r8, r0
   13ed0:	movt	r9, #6
   13ed4:	movt	r1, #4
   13ed8:	ldr	r6, [r9, #12]
   13edc:	mov	r0, r6
   13ee0:	bl	123d4 <strcmp@plt>
   13ee4:	mov	r4, #1
   13ee8:	cmp	r0, #0
   13eec:	beq	13fb8 <__assert_fail@plt+0x153c>
   13ef0:	ldrb	r0, [r9, #4]
   13ef4:	cmp	r0, #0
   13ef8:	beq	13f18 <__assert_fail@plt+0x149c>
   13efc:	ldr	r0, [r5, #16]
   13f00:	and	r0, r0, #61440	; 0xf000
   13f04:	sub	r0, r0, #16384	; 0x4000
   13f08:	clz	r0, r0
   13f0c:	lsr	r0, r0, #5
   13f10:	lsl	r5, r0, #9
   13f14:	b	13f1c <__assert_fail@plt+0x14a0>
   13f18:	mov	r5, #0
   13f1c:	ldr	r0, [r9, #16]
   13f20:	mov	r1, r6
   13f24:	mov	r2, r5
   13f28:	bl	12428 <unlinkat@plt>
   13f2c:	cmp	r0, #0
   13f30:	beq	13fb8 <__assert_fail@plt+0x153c>
   13f34:	bl	127d0 <__errno_location@plt>
   13f38:	ldr	r6, [r0]
   13f3c:	mov	r7, r0
   13f40:	cmp	r6, #2
   13f44:	bne	13f68 <__assert_fail@plt+0x14ec>
   13f48:	movw	r0, #15980	; 0x3e6c
   13f4c:	movt	r0, #6
   13f50:	ldrb	r0, [r0, #14]
   13f54:	cmp	r0, #0
   13f58:	movne	r0, #0
   13f5c:	strne	r0, [r7]
   13f60:	movne	r0, r4
   13f64:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f68:	cmp	r5, #0
   13f6c:	cmpeq	r6, #21
   13f70:	beq	13fc0 <__assert_fail@plt+0x1544>
   13f74:	movw	r1, #51980	; 0xcb0c
   13f78:	mov	r0, #0
   13f7c:	mov	r2, #5
   13f80:	mov	r4, #0
   13f84:	movt	r1, #4
   13f88:	bl	1253c <dcgettext@plt>
   13f8c:	mov	r5, r0
   13f90:	mov	r0, #0
   13f94:	mov	r1, r8
   13f98:	bl	19d58 <__assert_fail@plt+0x72dc>
   13f9c:	mov	r3, r0
   13fa0:	mov	r0, #0
   13fa4:	mov	r1, r6
   13fa8:	mov	r2, r5
   13fac:	bl	12674 <error@plt>
   13fb0:	mov	r0, #1
   13fb4:	str	r0, [r9, #28]
   13fb8:	mov	r0, r4
   13fbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13fc0:	ldr	r1, [r9, #12]
   13fc4:	ldr	r0, [r9, #16]
   13fc8:	mov	r2, #512	; 0x200
   13fcc:	bl	12428 <unlinkat@plt>
   13fd0:	cmp	r0, #0
   13fd4:	beq	13fb8 <__assert_fail@plt+0x153c>
   13fd8:	ldr	r6, [r7]
   13fdc:	b	13f74 <__assert_fail@plt+0x14f8>
   13fe0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13fe4:	add	fp, sp, #24
   13fe8:	mov	r8, r0
   13fec:	ldr	r0, [r1, #16]
   13ff0:	and	r0, r0, #61440	; 0xf000
   13ff4:	cmp	r0, #32768	; 0x8000
   13ff8:	beq	140f4 <__assert_fail@plt+0x1678>
   13ffc:	mov	r4, #0
   14000:	cmp	r0, #16384	; 0x4000
   14004:	bne	14104 <__assert_fail@plt+0x1688>
   14008:	bl	127d0 <__errno_location@plt>
   1400c:	movw	r9, #15936	; 0x3e40
   14010:	mov	r4, #0
   14014:	mov	r6, r0
   14018:	movw	r2, #18688	; 0x4900
   1401c:	str	r4, [r0]
   14020:	movt	r9, #6
   14024:	movt	r2, #10
   14028:	ldr	r1, [r9, #12]
   1402c:	ldr	r0, [r9, #16]
   14030:	bl	27820 <__assert_fail@plt+0x14da4>
   14034:	cmn	r0, #1
   14038:	ble	1410c <__assert_fail@plt+0x1690>
   1403c:	mov	r5, r0
   14040:	bl	12950 <fdopendir@plt>
   14044:	cmp	r0, #0
   14048:	beq	14114 <__assert_fail@plt+0x1698>
   1404c:	mov	r7, r0
   14050:	mov	r0, #0
   14054:	str	r0, [r6]
   14058:	mov	r0, r7
   1405c:	bl	12944 <readdir64@plt>
   14060:	cmp	r0, #0
   14064:	beq	140a4 <__assert_fail@plt+0x1628>
   14068:	mov	r4, #0
   1406c:	ldrb	r1, [r0, #19]
   14070:	cmp	r1, #46	; 0x2e
   14074:	bne	140a8 <__assert_fail@plt+0x162c>
   14078:	ldrb	r1, [r0, #20]
   1407c:	cmp	r1, #0
   14080:	beq	14094 <__assert_fail@plt+0x1618>
   14084:	cmp	r1, #46	; 0x2e
   14088:	ldrbeq	r0, [r0, #21]
   1408c:	cmpeq	r0, #0
   14090:	bne	140a8 <__assert_fail@plt+0x162c>
   14094:	mov	r0, r7
   14098:	bl	12944 <readdir64@plt>
   1409c:	cmp	r0, #0
   140a0:	bne	1406c <__assert_fail@plt+0x15f0>
   140a4:	mov	r4, #1
   140a8:	ldr	r5, [r6]
   140ac:	cmp	r5, #0
   140b0:	beq	14158 <__assert_fail@plt+0x16dc>
   140b4:	mov	r0, #0
   140b8:	mov	r1, r8
   140bc:	mov	r4, #0
   140c0:	bl	19d58 <__assert_fail@plt+0x72dc>
   140c4:	movw	r2, #9967	; 0x26ef
   140c8:	mov	r3, r0
   140cc:	mov	r0, #0
   140d0:	mov	r1, r5
   140d4:	movt	r2, #5
   140d8:	bl	12674 <error@plt>
   140dc:	mov	r0, #1
   140e0:	str	r0, [r9, #28]
   140e4:	mov	r0, r7
   140e8:	bl	12a4c <closedir@plt>
   140ec:	mov	r0, r4
   140f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140f4:	ldrd	r0, [r1, #48]	; 0x30
   140f8:	orr	r0, r0, r1
   140fc:	clz	r0, r0
   14100:	lsr	r4, r0, #5
   14104:	mov	r0, r4
   14108:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1410c:	ldr	r5, [r6]
   14110:	b	14170 <__assert_fail@plt+0x16f4>
   14114:	ldr	r6, [r6]
   14118:	mov	r0, #0
   1411c:	mov	r1, r8
   14120:	mov	r4, #0
   14124:	bl	19d58 <__assert_fail@plt+0x72dc>
   14128:	movw	r2, #9967	; 0x26ef
   1412c:	mov	r3, r0
   14130:	mov	r0, #0
   14134:	mov	r1, r6
   14138:	movt	r2, #5
   1413c:	bl	12674 <error@plt>
   14140:	mov	r0, #1
   14144:	str	r0, [r9, #28]
   14148:	mov	r0, r5
   1414c:	bl	12a34 <close@plt>
   14150:	mov	r0, r4
   14154:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14158:	mov	r0, r7
   1415c:	bl	12a4c <closedir@plt>
   14160:	cmp	r0, #0
   14164:	beq	14104 <__assert_fail@plt+0x1688>
   14168:	ldr	r5, [r6]
   1416c:	mov	r4, #0
   14170:	mov	r0, #0
   14174:	mov	r1, r8
   14178:	bl	19d58 <__assert_fail@plt+0x72dc>
   1417c:	movw	r2, #9967	; 0x26ef
   14180:	mov	r3, r0
   14184:	mov	r0, #0
   14188:	mov	r1, r5
   1418c:	movt	r2, #5
   14190:	bl	12674 <error@plt>
   14194:	mov	r0, #1
   14198:	str	r0, [r9, #28]
   1419c:	mov	r0, r4
   141a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   141a4:	b	15720 <__assert_fail@plt+0x2ca4>
   141a8:	movw	r0, #15936	; 0x3e40
   141ac:	movt	r0, #6
   141b0:	ldr	r0, [r0, #12]
   141b4:	b	15720 <__assert_fail@plt+0x2ca4>
   141b8:	mov	r0, #0
   141bc:	bx	lr
   141c0:	push	{r4, r5, fp, lr}
   141c4:	add	fp, sp, #8
   141c8:	sub	sp, sp, #16
   141cc:	movw	r3, #15980	; 0x3e6c
   141d0:	mov	ip, r1
   141d4:	movw	r1, #15936	; 0x3e40
   141d8:	ldrb	r5, [r2, #32]
   141dc:	ldr	r2, [r2, #44]	; 0x2c
   141e0:	movt	r1, #6
   141e4:	movt	r3, #6
   141e8:	ldr	r4, [r3, #20]
   141ec:	ldr	lr, [r1, #12]
   141f0:	ldr	r3, [r3, #40]	; 0x28
   141f4:	ldr	r1, [r1, #16]
   141f8:	str	r4, [sp]
   141fc:	stmib	sp, {r3, r5}
   14200:	str	r2, [sp, #12]
   14204:	mov	r2, lr
   14208:	mov	r3, ip
   1420c:	bl	21a84 <__assert_fail@plt+0xf008>
   14210:	mov	r0, #1
   14214:	sub	sp, fp, #8
   14218:	pop	{r4, r5, fp, pc}
   1421c:	push	{fp, lr}
   14220:	mov	fp, sp
   14224:	sub	sp, sp, #8
   14228:	ldrb	ip, [r2, #52]	; 0x34
   1422c:	ldr	r1, [r2, #56]	; 0x38
   14230:	ldr	r2, [r2, #44]	; 0x2c
   14234:	movw	r3, #7860	; 0x1eb4
   14238:	str	r0, [sp]
   1423c:	movt	r3, #5
   14240:	mov	r0, r2
   14244:	mov	r2, ip
   14248:	bl	22420 <__assert_fail@plt+0xf9a4>
   1424c:	mov	r0, #1
   14250:	mov	sp, fp
   14254:	pop	{fp, pc}
   14258:	push	{r4, sl, fp, lr}
   1425c:	add	fp, sp, #8
   14260:	ldr	r4, [r2, #44]	; 0x2c
   14264:	mov	r1, r4
   14268:	bl	12a10 <fputs@plt>
   1426c:	mov	r0, #0
   14270:	mov	r1, r4
   14274:	bl	12968 <putc@plt>
   14278:	mov	r0, #1
   1427c:	pop	{r4, sl, fp, pc}
   14280:	push	{r4, sl, fp, lr}
   14284:	add	fp, sp, #8
   14288:	mov	r4, r2
   1428c:	mov	r2, r0
   14290:	mov	r0, r1
   14294:	mov	r1, r2
   14298:	bl	1be00 <__assert_fail@plt+0x9384>
   1429c:	ldr	r1, [r4, #40]	; 0x28
   142a0:	bl	123d4 <strcmp@plt>
   142a4:	clz	r0, r0
   142a8:	lsr	r0, r0, #5
   142ac:	pop	{r4, sl, fp, pc}
   142b0:	ldr	r0, [r2, #40]	; 0x28
   142b4:	cmp	r0, #2
   142b8:	beq	142e8 <__assert_fail@plt+0x186c>
   142bc:	cmp	r0, #1
   142c0:	beq	14308 <__assert_fail@plt+0x188c>
   142c4:	cmp	r0, #0
   142c8:	bne	14300 <__assert_fail@plt+0x1884>
   142cc:	ldr	r1, [r1, #28]
   142d0:	ldrd	r2, [r2, #48]	; 0x30
   142d4:	mov	r0, #1
   142d8:	subs	r1, r2, r1
   142dc:	sbcs	r1, r3, #0
   142e0:	bcs	14300 <__assert_fail@plt+0x1884>
   142e4:	bx	lr
   142e8:	ldr	r0, [r1, #28]
   142ec:	ldrd	r2, [r2, #48]	; 0x30
   142f0:	eor	r0, r2, r0
   142f4:	orrs	r0, r0, r3
   142f8:	mov	r0, #1
   142fc:	bxeq	lr
   14300:	mov	r0, #0
   14304:	bx	lr
   14308:	ldrd	r2, [r2, #48]	; 0x30
   1430c:	ldr	r1, [r1, #28]
   14310:	mov	r0, #1
   14314:	subs	r1, r1, r2
   14318:	rscs	r1, r3, #0
   1431c:	movcs	r0, #0
   14320:	bx	lr
   14324:	ldr	r0, [r1, #28]
   14328:	ldr	r1, [r2, #40]	; 0x28
   1432c:	sub	r0, r1, r0
   14330:	clz	r0, r0
   14334:	lsr	r0, r0, #5
   14338:	bx	lr
   1433c:	push	{r4, r5, r6, r7, fp, lr}
   14340:	add	fp, sp, #16
   14344:	mov	r5, r0
   14348:	ldr	r0, [r1, #16]
   1434c:	mov	r7, #0
   14350:	and	r0, r0, #61440	; 0xf000
   14354:	cmp	r0, #40960	; 0xa000
   14358:	bne	143c0 <__assert_fail@plt+0x1944>
   1435c:	movw	r7, #15936	; 0x3e40
   14360:	mov	r6, r2
   14364:	movt	r7, #6
   14368:	ldr	r1, [r7, #12]
   1436c:	ldr	r0, [r7, #16]
   14370:	bl	23168 <__assert_fail@plt+0x106ec>
   14374:	mov	r4, r0
   14378:	cmp	r0, #0
   1437c:	beq	1439c <__assert_fail@plt+0x1920>
   14380:	ldr	r0, [r6, #40]	; 0x28
   14384:	mov	r1, r4
   14388:	mov	r2, #16
   1438c:	bl	12698 <fnmatch@plt>
   14390:	clz	r0, r0
   14394:	lsr	r7, r0, #5
   14398:	b	143b8 <__assert_fail@plt+0x193c>
   1439c:	bl	127d0 <__errno_location@plt>
   143a0:	ldr	r0, [r0]
   143a4:	mov	r1, r5
   143a8:	bl	18990 <__assert_fail@plt+0x5f14>
   143ac:	mov	r0, #1
   143b0:	str	r0, [r7, #28]
   143b4:	mov	r7, #0
   143b8:	mov	r0, r4
   143bc:	bl	32c40 <__assert_fail@plt+0x201c4>
   143c0:	mov	r0, r7
   143c4:	pop	{r4, r5, r6, r7, fp, pc}
   143c8:	push	{r4, r5, fp, lr}
   143cc:	add	fp, sp, #8
   143d0:	ldr	r4, [r2, #40]	; 0x28
   143d4:	bl	23708 <__assert_fail@plt+0x10c8c>
   143d8:	mov	r5, r0
   143dc:	bl	23858 <__assert_fail@plt+0x10ddc>
   143e0:	mov	r0, r4
   143e4:	mov	r1, r5
   143e8:	mov	r2, #16
   143ec:	bl	12698 <fnmatch@plt>
   143f0:	mov	r4, r0
   143f4:	mov	r0, r5
   143f8:	bl	32c40 <__assert_fail@plt+0x201c4>
   143fc:	clz	r0, r4
   14400:	lsr	r0, r0, #5
   14404:	pop	{r4, r5, fp, pc}
   14408:	push	{r4, r5, fp, lr}
   1440c:	add	fp, sp, #8
   14410:	ldr	r0, [r2, #40]	; 0x28
   14414:	cmp	r0, #2
   14418:	beq	14448 <__assert_fail@plt+0x19cc>
   1441c:	cmp	r0, #1
   14420:	beq	14474 <__assert_fail@plt+0x19f8>
   14424:	cmp	r0, #0
   14428:	bne	1446c <__assert_fail@plt+0x19f0>
   1442c:	ldrd	r4, [r1, #96]	; 0x60
   14430:	ldrd	r2, [r2, #48]	; 0x30
   14434:	mov	r0, #1
   14438:	subs	r1, r2, r4
   1443c:	sbcs	r1, r3, r5
   14440:	bcs	1446c <__assert_fail@plt+0x19f0>
   14444:	pop	{r4, r5, fp, pc}
   14448:	ldr	r0, [r2, #48]	; 0x30
   1444c:	ldr	r3, [r2, #52]	; 0x34
   14450:	ldr	r2, [r1, #96]	; 0x60
   14454:	ldr	r1, [r1, #100]	; 0x64
   14458:	eor	r1, r1, r3
   1445c:	eor	r0, r2, r0
   14460:	orrs	r0, r0, r1
   14464:	mov	r0, #1
   14468:	popeq	{r4, r5, fp, pc}
   1446c:	mov	r0, #0
   14470:	pop	{r4, r5, fp, pc}
   14474:	ldrd	r2, [r2, #48]	; 0x30
   14478:	ldrd	r4, [r1, #96]	; 0x60
   1447c:	mov	r0, #1
   14480:	subs	r1, r4, r2
   14484:	sbcs	r1, r5, r3
   14488:	movcs	r0, #0
   1448c:	pop	{r4, r5, fp, pc}
   14490:	push	{fp, lr}
   14494:	mov	fp, sp
   14498:	mov	r1, r0
   1449c:	ldr	r0, [r2, #40]	; 0x28
   144a0:	mov	r2, #16
   144a4:	bl	12698 <fnmatch@plt>
   144a8:	clz	r0, r0
   144ac:	lsr	r0, r0, #5
   144b0:	pop	{fp, pc}
   144b4:	ldr	r0, [r2, #40]	; 0x28
   144b8:	cmp	r0, #2
   144bc:	beq	144ec <__assert_fail@plt+0x1a70>
   144c0:	cmp	r0, #1
   144c4:	beq	1450c <__assert_fail@plt+0x1a90>
   144c8:	cmp	r0, #0
   144cc:	bne	14504 <__assert_fail@plt+0x1a88>
   144d0:	ldr	r1, [r1, #20]
   144d4:	ldrd	r2, [r2, #48]	; 0x30
   144d8:	mov	r0, #1
   144dc:	subs	r1, r2, r1
   144e0:	sbcs	r1, r3, #0
   144e4:	bcs	14504 <__assert_fail@plt+0x1a88>
   144e8:	bx	lr
   144ec:	ldr	r0, [r1, #20]
   144f0:	ldrd	r2, [r2, #48]	; 0x30
   144f4:	eor	r0, r2, r0
   144f8:	orrs	r0, r0, r3
   144fc:	mov	r0, #1
   14500:	bxeq	lr
   14504:	mov	r0, #0
   14508:	bx	lr
   1450c:	ldrd	r2, [r2, #48]	; 0x30
   14510:	ldr	r1, [r1, #20]
   14514:	mov	r0, #1
   14518:	subs	r1, r1, r2
   1451c:	rscs	r1, r3, #0
   14520:	movcs	r0, #0
   14524:	bx	lr
   14528:	push	{r4, r5, r6, r7, fp, lr}
   1452c:	add	fp, sp, #16
   14530:	mov	r5, r0
   14534:	ldr	r0, [r1, #16]
   14538:	mov	r7, #0
   1453c:	and	r0, r0, #61440	; 0xf000
   14540:	cmp	r0, #40960	; 0xa000
   14544:	bne	145ac <__assert_fail@plt+0x1b30>
   14548:	movw	r7, #15936	; 0x3e40
   1454c:	mov	r6, r2
   14550:	movt	r7, #6
   14554:	ldr	r1, [r7, #12]
   14558:	ldr	r0, [r7, #16]
   1455c:	bl	23168 <__assert_fail@plt+0x106ec>
   14560:	mov	r4, r0
   14564:	cmp	r0, #0
   14568:	beq	14588 <__assert_fail@plt+0x1b0c>
   1456c:	ldr	r0, [r6, #40]	; 0x28
   14570:	mov	r1, r4
   14574:	mov	r2, #0
   14578:	bl	12698 <fnmatch@plt>
   1457c:	clz	r0, r0
   14580:	lsr	r7, r0, #5
   14584:	b	145a4 <__assert_fail@plt+0x1b28>
   14588:	bl	127d0 <__errno_location@plt>
   1458c:	ldr	r0, [r0]
   14590:	mov	r1, r5
   14594:	bl	18990 <__assert_fail@plt+0x5f14>
   14598:	mov	r0, #1
   1459c:	str	r0, [r7, #28]
   145a0:	mov	r7, #0
   145a4:	mov	r0, r4
   145a8:	bl	32c40 <__assert_fail@plt+0x201c4>
   145ac:	mov	r0, r7
   145b0:	pop	{r4, r5, r6, r7, fp, pc}
   145b4:	push	{r4, r5, fp, lr}
   145b8:	add	fp, sp, #8
   145bc:	sub	sp, sp, #16
   145c0:	movw	r3, #15980	; 0x3e6c
   145c4:	mov	ip, r1
   145c8:	movw	r1, #15936	; 0x3e40
   145cc:	ldrb	r5, [r2, #32]
   145d0:	ldr	r2, [r2, #44]	; 0x2c
   145d4:	movt	r1, #6
   145d8:	movt	r3, #6
   145dc:	ldr	r4, [r3, #20]
   145e0:	ldr	lr, [r1, #12]
   145e4:	ldr	r3, [r3, #40]	; 0x28
   145e8:	ldr	r1, [r1, #16]
   145ec:	str	r4, [sp]
   145f0:	stmib	sp, {r3, r5}
   145f4:	str	r2, [sp, #12]
   145f8:	mov	r2, lr
   145fc:	mov	r3, ip
   14600:	bl	21a84 <__assert_fail@plt+0xf008>
   14604:	mov	r0, #1
   14608:	sub	sp, fp, #8
   1460c:	pop	{r4, r5, fp, pc}
   14610:	ldrd	r0, [r1, #80]	; 0x50
   14614:	mov	r3, #60	; 0x3c
   14618:	b	13b98 <__assert_fail@plt+0x111c>
   1461c:	ldrd	r0, [r1, #80]	; 0x50
   14620:	movw	r3, #20864	; 0x5180
   14624:	movt	r3, #1
   14628:	b	13b98 <__assert_fail@plt+0x111c>
   1462c:	push	{r4, r5, fp, lr}
   14630:	add	fp, sp, #8
   14634:	ldr	r4, [r2, #40]	; 0x28
   14638:	bl	23708 <__assert_fail@plt+0x10c8c>
   1463c:	mov	r5, r0
   14640:	bl	23858 <__assert_fail@plt+0x10ddc>
   14644:	mov	r0, r4
   14648:	mov	r1, r5
   1464c:	mov	r2, #0
   14650:	bl	12698 <fnmatch@plt>
   14654:	mov	r4, r0
   14658:	mov	r0, r5
   1465c:	bl	32c40 <__assert_fail@plt+0x201c4>
   14660:	clz	r0, r4
   14664:	lsr	r0, r0, #5
   14668:	pop	{r4, r5, fp, pc}
   1466c:	push	{fp, lr}
   14670:	mov	fp, sp
   14674:	ldr	r2, [r2, #160]	; 0xa0
   14678:	bl	19be4 <__assert_fail@plt+0x7168>
   1467c:	eor	r0, r0, #1
   14680:	pop	{fp, pc}
   14684:	nop	{0}
   14688:	push	{r4, r5, r6, r7, fp, lr}
   1468c:	add	fp, sp, #16
   14690:	ldr	r0, [r2, #44]	; 0x2c
   14694:	cmp	r0, #0
   14698:	bne	146e8 <__assert_fail@plt+0x1c6c>
   1469c:	ldrd	r4, [r2, #48]	; 0x30
   146a0:	ldrd	r6, [r1, #80]	; 0x50
   146a4:	cmp	r4, r6
   146a8:	moveq	r0, #0
   146ac:	cmpeq	r5, r7
   146b0:	popeq	{r4, r5, r6, r7, fp, pc}
   146b4:	mov	r0, r6
   146b8:	mov	r1, r4
   146bc:	bl	12854 <difftime@plt>
   146c0:	vldr	d16, [pc, #64]	; 14708 <__assert_fail@plt+0x1c8c>
   146c4:	sub	r0, r7, r5
   146c8:	vmov	s2, r0
   146cc:	mov	r0, #0
   146d0:	vcvt.f64.s32	d17, s2
   146d4:	vmla.f64	d0, d17, d16
   146d8:	vcmpe.f64	d0, #0.0
   146dc:	vmrs	APSR_nzcv, fpscr
   146e0:	movwpl	r0, #1
   146e4:	pop	{r4, r5, r6, r7, fp, pc}
   146e8:	movw	r0, #51800	; 0xca58
   146ec:	movw	r1, #51839	; 0xca7f
   146f0:	movw	r3, #51997	; 0xcb1d
   146f4:	movw	r2, #621	; 0x26d
   146f8:	movt	r0, #4
   146fc:	movt	r1, #4
   14700:	movt	r3, #4
   14704:	bl	12a7c <__assert_fail@plt>
   14708:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1470c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14710:	push	{r4, r5, r6, r7, fp, lr}
   14714:	add	fp, sp, #16
   14718:	mov	r5, r0
   1471c:	ldr	r0, [r2, #44]	; 0x2c
   14720:	cmp	r0, #0
   14724:	bne	147fc <__assert_fail@plt+0x1d80>
   14728:	ldr	r0, [r2, #40]	; 0x28
   1472c:	cmp	r0, #4
   14730:	bhi	1481c <__assert_fail@plt+0x1da0>
   14734:	add	r3, pc, #0
   14738:	ldr	pc, [r3, r0, lsl #2]
   1473c:	andeq	r4, r1, r0, asr r7
   14740:			; <UNDEFINED> instruction: 0x000147b8
   14744:	andeq	r4, r1, r8, asr r7
   14748:	andeq	r4, r1, r0, ror #14
   1474c:	andeq	r4, r1, ip, lsr r8
   14750:	add	r0, r1, #72	; 0x48
   14754:	b	14764 <__assert_fail@plt+0x1ce8>
   14758:	add	r0, r1, #88	; 0x58
   1475c:	b	14764 <__assert_fail@plt+0x1ce8>
   14760:	add	r0, r1, #80	; 0x50
   14764:	ldr	r5, [r2, #52]	; 0x34
   14768:	ldr	r2, [r2, #48]	; 0x30
   1476c:	ldrd	r6, [r0]
   14770:	cmp	r2, r6
   14774:	moveq	r4, #0
   14778:	cmpeq	r5, r7
   1477c:	beq	147b0 <__assert_fail@plt+0x1d34>
   14780:	mov	r0, r6
   14784:	mov	r1, r2
   14788:	bl	12854 <difftime@plt>
   1478c:	vldr	d16, [pc, #204]	; 14860 <__assert_fail@plt+0x1de4>
   14790:	sub	r0, r7, r5
   14794:	mov	r4, #0
   14798:	vmov	s2, r0
   1479c:	vcvt.f64.s32	d17, s2
   147a0:	vmla.f64	d0, d17, d16
   147a4:	vcmpe.f64	d0, #0.0
   147a8:	vmrs	APSR_nzcv, fpscr
   147ac:	movwpl	r4, #1
   147b0:	mov	r0, r4
   147b4:	pop	{r4, r5, r6, r7, fp, pc}
   147b8:	movw	r1, #52172	; 0xcbcc
   147bc:	mov	r0, #0
   147c0:	mov	r2, #5
   147c4:	mov	r4, #0
   147c8:	movt	r1, #4
   147cc:	bl	1253c <dcgettext@plt>
   147d0:	mov	r6, r0
   147d4:	mov	r0, #0
   147d8:	mov	r1, r5
   147dc:	bl	19d58 <__assert_fail@plt+0x72dc>
   147e0:	mov	r3, r0
   147e4:	mov	r0, #0
   147e8:	mov	r1, #0
   147ec:	mov	r2, r6
   147f0:	bl	12674 <error@plt>
   147f4:	mov	r0, r4
   147f8:	pop	{r4, r5, r6, r7, fp, pc}
   147fc:	movw	r0, #51800	; 0xca58
   14800:	movw	r1, #51839	; 0xca7f
   14804:	movw	r3, #52063	; 0xcb5f
   14808:	movw	r2, #631	; 0x277
   1480c:	movt	r0, #4
   14810:	movt	r1, #4
   14814:	movt	r3, #4
   14818:	bl	12a7c <__assert_fail@plt>
   1481c:	movw	r0, #52220	; 0xcbfc
   14820:	movw	r1, #51839	; 0xca7f
   14824:	movw	r3, #52063	; 0xcb5f
   14828:	movw	r2, #667	; 0x29b
   1482c:	movt	r0, #4
   14830:	movt	r1, #4
   14834:	movt	r3, #4
   14838:	bl	12a7c <__assert_fail@plt>
   1483c:	movw	r0, #52131	; 0xcba3
   14840:	movw	r1, #51839	; 0xca7f
   14844:	movw	r3, #52063	; 0xcb5f
   14848:	mov	r2, #636	; 0x27c
   1484c:	movt	r0, #4
   14850:	movt	r1, #4
   14854:	movt	r3, #4
   14858:	bl	12a7c <__assert_fail@plt>
   1485c:	nop	{0}
   14860:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14864:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14868:	push	{fp, lr}
   1486c:	mov	fp, sp
   14870:	ldr	r0, [r1, #28]
   14874:	bl	12a58 <getgrgid@plt>
   14878:	clz	r0, r0
   1487c:	lsr	r0, r0, #5
   14880:	pop	{fp, pc}
   14884:	push	{fp, lr}
   14888:	mov	fp, sp
   1488c:	ldr	r0, [r1, #24]
   14890:	bl	123ec <getpwuid@plt>
   14894:	clz	r0, r0
   14898:	lsr	r0, r0, #5
   1489c:	pop	{fp, pc}
   148a0:	push	{r4, r5, r6, sl, fp, lr}
   148a4:	add	fp, sp, #16
   148a8:	mov	r6, r0
   148ac:	ldr	r0, [r2, #132]	; 0x84
   148b0:	mov	r5, r1
   148b4:	mov	r4, r2
   148b8:	mov	r1, r6
   148bc:	ldr	r0, [r0]
   148c0:	bl	148e4 <__assert_fail@plt+0x1e68>
   148c4:	cmp	r0, #0
   148c8:	moveq	r0, #0
   148cc:	popeq	{r4, r5, r6, sl, fp, pc}
   148d0:	mov	r0, r6
   148d4:	mov	r1, r5
   148d8:	mov	r2, r4
   148dc:	pop	{r4, r5, r6, sl, fp, lr}
   148e0:	b	15720 <__assert_fail@plt+0x2ca4>
   148e4:	push	{r4, r5, r6, r7, fp, lr}
   148e8:	add	fp, sp, #16
   148ec:	mov	r5, r0
   148f0:	movw	r0, #13652	; 0x3554
   148f4:	mov	r4, r1
   148f8:	movt	r0, #6
   148fc:	ldr	r0, [r0]
   14900:	bl	32bd8 <__assert_fail@plt+0x2015c>
   14904:	movw	r7, #13640	; 0x3548
   14908:	movw	r1, #52888	; 0xce98
   1490c:	mov	r0, #0
   14910:	mov	r2, #5
   14914:	movt	r7, #6
   14918:	movt	r1, #4
   1491c:	ldr	r6, [r7]
   14920:	bl	1253c <dcgettext@plt>
   14924:	mov	r1, r0
   14928:	mov	r0, r6
   1492c:	mov	r2, r5
   14930:	mov	r3, r4
   14934:	bl	127c4 <fprintf@plt>
   14938:	cmn	r0, #1
   1493c:	ble	14950 <__assert_fail@plt+0x1ed4>
   14940:	ldr	r0, [r7]
   14944:	bl	32bd8 <__assert_fail@plt+0x2015c>
   14948:	pop	{r4, r5, r6, r7, fp, lr}
   1494c:	b	32564 <__assert_fail@plt+0x1fae8>
   14950:	bl	127d0 <__errno_location@plt>
   14954:	ldr	r4, [r0]
   14958:	movw	r1, #52905	; 0xcea9
   1495c:	mov	r0, #0
   14960:	mov	r2, #5
   14964:	movt	r1, #4
   14968:	bl	1253c <dcgettext@plt>
   1496c:	mov	r2, r0
   14970:	mov	r0, #1
   14974:	mov	r1, r4
   14978:	bl	12674 <error@plt>
   1497c:	push	{r4, r5, fp, lr}
   14980:	add	fp, sp, #8
   14984:	mov	r5, r1
   14988:	mov	r1, r0
   1498c:	ldr	r0, [r2, #132]	; 0x84
   14990:	mov	r4, r2
   14994:	ldr	r0, [r0]
   14998:	bl	148e4 <__assert_fail@plt+0x1e68>
   1499c:	cmp	r0, #0
   149a0:	moveq	r0, #0
   149a4:	popeq	{r4, r5, fp, pc}
   149a8:	movw	r0, #15936	; 0x3e40
   149ac:	mov	r1, r5
   149b0:	mov	r2, r4
   149b4:	movt	r0, #6
   149b8:	ldr	r0, [r0, #12]
   149bc:	pop	{r4, r5, fp, lr}
   149c0:	b	15720 <__assert_fail@plt+0x2ca4>
   149c4:	mov	r0, #1
   149c8:	bx	lr
   149cc:	push	{r4, r5, r6, sl, fp, lr}
   149d0:	add	fp, sp, #16
   149d4:	mov	r5, r2
   149d8:	ldr	r2, [r2, #156]	; 0x9c
   149dc:	mov	r4, r1
   149e0:	mov	r6, r0
   149e4:	cmp	r2, #0
   149e8:	beq	14a04 <__assert_fail@plt+0x1f88>
   149ec:	mov	r0, r6
   149f0:	mov	r1, r4
   149f4:	bl	19be4 <__assert_fail@plt+0x7168>
   149f8:	cmp	r0, #0
   149fc:	movne	r0, #1
   14a00:	popne	{r4, r5, r6, sl, fp, pc}
   14a04:	ldr	r2, [r5, #160]	; 0xa0
   14a08:	mov	r0, r6
   14a0c:	mov	r1, r4
   14a10:	pop	{r4, r5, r6, sl, fp, lr}
   14a14:	b	19be4 <__assert_fail@plt+0x7168>
   14a18:	push	{fp, lr}
   14a1c:	mov	fp, sp
   14a20:	mov	r1, r0
   14a24:	ldr	r0, [r2, #40]	; 0x28
   14a28:	mov	r2, #0
   14a2c:	bl	12698 <fnmatch@plt>
   14a30:	clz	r0, r0
   14a34:	lsr	r0, r0, #5
   14a38:	pop	{fp, pc}
   14a3c:	ldr	r0, [r1, #16]
   14a40:	ldr	r3, [r2, #40]!	; 0x28
   14a44:	and	r1, r0, #61440	; 0xf000
   14a48:	cmp	r3, #2
   14a4c:	sub	r1, r1, #16384	; 0x4000
   14a50:	clz	r1, r1
   14a54:	lsr	r1, r1, #5
   14a58:	add	r1, r2, r1, lsl #2
   14a5c:	ldr	r1, [r1, #4]
   14a60:	beq	14aa0 <__assert_fail@plt+0x2024>
   14a64:	cmp	r3, #1
   14a68:	beq	14a88 <__assert_fail@plt+0x200c>
   14a6c:	cmp	r3, #0
   14a70:	bne	14ab4 <__assert_fail@plt+0x2038>
   14a74:	and	r0, r1, r0
   14a78:	sub	r0, r0, r1
   14a7c:	clz	r0, r0
   14a80:	lsr	r0, r0, #5
   14a84:	bx	lr
   14a88:	cmp	r1, #0
   14a8c:	moveq	r0, #1
   14a90:	bxeq	lr
   14a94:	ands	r0, r1, r0
   14a98:	movwne	r0, #1
   14a9c:	bx	lr
   14aa0:	bfc	r0, #12, #20
   14aa4:	sub	r0, r0, r1
   14aa8:	clz	r0, r0
   14aac:	lsr	r0, r0, #5
   14ab0:	bx	lr
   14ab4:	push	{fp, lr}
   14ab8:	mov	fp, sp
   14abc:	bl	12a28 <abort@plt>
   14ac0:	push	{fp, lr}
   14ac4:	mov	fp, sp
   14ac8:	movw	r0, #15936	; 0x3e40
   14acc:	mov	r2, #1
   14ad0:	mov	r3, #0
   14ad4:	movt	r0, #6
   14ad8:	ldr	r1, [r0, #12]
   14adc:	ldr	r0, [r0, #16]
   14ae0:	bl	12470 <faccessat@plt>
   14ae4:	clz	r0, r0
   14ae8:	lsr	r0, r0, #5
   14aec:	pop	{fp, pc}
   14af0:	push	{fp, lr}
   14af4:	mov	fp, sp
   14af8:	movw	r0, #15936	; 0x3e40
   14afc:	mov	r2, #4
   14b00:	mov	r3, #0
   14b04:	movt	r0, #6
   14b08:	ldr	r1, [r0, #12]
   14b0c:	ldr	r0, [r0, #16]
   14b10:	bl	12470 <faccessat@plt>
   14b14:	clz	r0, r0
   14b18:	lsr	r0, r0, #5
   14b1c:	pop	{fp, pc}
   14b20:	push	{fp, lr}
   14b24:	mov	fp, sp
   14b28:	movw	r0, #15936	; 0x3e40
   14b2c:	mov	r2, #2
   14b30:	mov	r3, #0
   14b34:	movt	r0, #6
   14b38:	ldr	r1, [r0, #12]
   14b3c:	ldr	r0, [r0, #16]
   14b40:	bl	12470 <faccessat@plt>
   14b44:	clz	r0, r0
   14b48:	lsr	r0, r0, #5
   14b4c:	pop	{fp, pc}
   14b50:	push	{fp, lr}
   14b54:	mov	fp, sp
   14b58:	sub	sp, sp, #8
   14b5c:	ldrb	ip, [r2, #52]	; 0x34
   14b60:	ldr	r1, [r2, #56]	; 0x38
   14b64:	ldr	r2, [r2, #44]	; 0x2c
   14b68:	movw	r3, #7860	; 0x1eb4
   14b6c:	str	r0, [sp]
   14b70:	movt	r3, #5
   14b74:	mov	r0, r2
   14b78:	mov	r2, ip
   14b7c:	bl	22420 <__assert_fail@plt+0xf9a4>
   14b80:	mov	r0, #1
   14b84:	mov	sp, fp
   14b88:	pop	{fp, pc}
   14b8c:	push	{r4, sl, fp, lr}
   14b90:	add	fp, sp, #8
   14b94:	ldr	r4, [r2, #44]	; 0x2c
   14b98:	mov	r1, r4
   14b9c:	bl	12a10 <fputs@plt>
   14ba0:	mov	r0, #0
   14ba4:	mov	r1, r4
   14ba8:	bl	12968 <putc@plt>
   14bac:	mov	r0, #1
   14bb0:	pop	{r4, sl, fp, pc}
   14bb4:	movw	r0, #15980	; 0x3e6c
   14bb8:	movt	r0, #6
   14bbc:	ldrb	r0, [r0]
   14bc0:	cmp	r0, #0
   14bc4:	beq	14bf8 <__assert_fail@plt+0x217c>
   14bc8:	movw	r0, #15936	; 0x3e40
   14bcc:	movt	r0, #6
   14bd0:	ldrb	r2, [r0, #4]
   14bd4:	cmp	r2, #0
   14bd8:	beq	14c00 <__assert_fail@plt+0x2184>
   14bdc:	cmp	r1, #0
   14be0:	beq	14bf8 <__assert_fail@plt+0x217c>
   14be4:	ldr	r1, [r1, #16]
   14be8:	and	r1, r1, #61440	; 0xf000
   14bec:	cmp	r1, #16384	; 0x4000
   14bf0:	moveq	r1, #1
   14bf4:	strbeq	r1, [r0, #24]
   14bf8:	mov	r0, #1
   14bfc:	bx	lr
   14c00:	push	{fp, lr}
   14c04:	mov	fp, sp
   14c08:	movw	r0, #51191	; 0xc7f7
   14c0c:	movw	r1, #51839	; 0xca7f
   14c10:	movw	r3, #52230	; 0xcc06
   14c14:	movw	r2, #853	; 0x355
   14c18:	movt	r0, #4
   14c1c:	movt	r1, #4
   14c20:	movt	r3, #4
   14c24:	bl	12a7c <__assert_fail@plt>
   14c28:	push	{fp, lr}
   14c2c:	mov	fp, sp
   14c30:	bl	18d04 <__assert_fail@plt+0x6288>
   14c34:	movw	r0, #15936	; 0x3e40
   14c38:	movt	r0, #6
   14c3c:	ldr	r0, [r0, #28]
   14c40:	bl	12758 <exit@plt>
   14c44:	push	{r4, r5, r6, sl, fp, lr}
   14c48:	add	fp, sp, #16
   14c4c:	sub	sp, sp, #8
   14c50:	mov	r4, r2
   14c54:	mov	r5, r0
   14c58:	bl	12788 <strlen@plt>
   14c5c:	mov	r6, r0
   14c60:	ldr	r0, [r4, #40]	; 0x28
   14c64:	mov	r1, #0
   14c68:	mov	r3, #0
   14c6c:	str	r1, [sp]
   14c70:	mov	r1, r5
   14c74:	mov	r2, r6
   14c78:	bl	3b0bc <__assert_fail@plt+0x28640>
   14c7c:	sub	r0, r0, r6
   14c80:	clz	r0, r0
   14c84:	lsr	r0, r0, #5
   14c88:	sub	sp, fp, #16
   14c8c:	pop	{r4, r5, r6, sl, fp, pc}
   14c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c94:	add	fp, sp, #28
   14c98:	sub	sp, sp, #4
   14c9c:	ldrd	r6, [r2, #40]	; 0x28
   14ca0:	ldrd	r8, [r1, #48]	; 0x30
   14ca4:	mov	sl, r2
   14ca8:	asr	r5, r7, #31
   14cac:	mov	r0, r8
   14cb0:	mov	r1, r9
   14cb4:	mov	r2, r7
   14cb8:	mov	r3, r5
   14cbc:	bl	4c144 <__assert_fail@plt+0x396c8>
   14cc0:	umull	r4, r2, r0, r7
   14cc4:	mla	r2, r0, r5, r2
   14cc8:	mla	r7, r1, r7, r2
   14ccc:	adds	r2, r0, #1
   14cd0:	adc	r3, r1, #0
   14cd4:	subs	r5, r8, r4
   14cd8:	sbc	r7, r9, r7
   14cdc:	orrs	r7, r5, r7
   14ce0:	moveq	r3, r1
   14ce4:	moveq	r2, r0
   14ce8:	cmp	r6, #2
   14cec:	beq	14d1c <__assert_fail@plt+0x22a0>
   14cf0:	cmp	r6, #1
   14cf4:	beq	14d40 <__assert_fail@plt+0x22c4>
   14cf8:	cmp	r6, #0
   14cfc:	bne	14d34 <__assert_fail@plt+0x22b8>
   14d00:	ldrd	r4, [sl, #48]	; 0x30
   14d04:	mov	r0, #1
   14d08:	subs	r1, r4, r2
   14d0c:	sbcs	r1, r5, r3
   14d10:	bcs	14d34 <__assert_fail@plt+0x22b8>
   14d14:	sub	sp, fp, #28
   14d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d1c:	ldrd	r0, [sl, #48]	; 0x30
   14d20:	eor	r1, r3, r1
   14d24:	eor	r0, r2, r0
   14d28:	orrs	r0, r0, r1
   14d2c:	mov	r0, #1
   14d30:	beq	14d14 <__assert_fail@plt+0x2298>
   14d34:	mov	r0, #0
   14d38:	sub	sp, fp, #28
   14d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d40:	ldrd	r4, [sl, #48]	; 0x30
   14d44:	mov	r0, #1
   14d48:	subs	r1, r2, r4
   14d4c:	sbcs	r1, r3, r5
   14d50:	movcs	r0, #0
   14d54:	sub	sp, fp, #28
   14d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14d60:	add	fp, sp, #24
   14d64:	mov	r6, r1
   14d68:	mov	r5, r2
   14d6c:	mov	r2, r0
   14d70:	mov	r4, r1
   14d74:	ldr	r0, [r6, #96]!	; 0x60
   14d78:	ldr	r1, [r6, #4]
   14d7c:	orrs	r3, r0, r1
   14d80:	beq	14d9c <__assert_fail@plt+0x2320>
   14d84:	ldrd	r8, [r5, #40]	; 0x28
   14d88:	eor	r1, r1, r9
   14d8c:	eor	r0, r0, r8
   14d90:	orrs	r0, r0, r1
   14d94:	mov	r0, #0
   14d98:	bne	14dc4 <__assert_fail@plt+0x2348>
   14d9c:	movw	r0, #15936	; 0x3e40
   14da0:	movt	r0, #6
   14da4:	ldr	r1, [r0, #12]
   14da8:	mov	r0, r2
   14dac:	mov	r2, r4
   14db0:	bl	18854 <__assert_fail@plt+0x5dd8>
   14db4:	mov	r1, r0
   14db8:	mov	r0, #0
   14dbc:	cmp	r1, #0
   14dc0:	beq	14dc8 <__assert_fail@plt+0x234c>
   14dc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14dc8:	ldrd	r2, [r5, #40]	; 0x28
   14dcc:	ldrd	r6, [r6]
   14dd0:	eor	r1, r7, r3
   14dd4:	eor	r2, r6, r2
   14dd8:	orrs	r1, r2, r1
   14ddc:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   14de0:	ldrd	r0, [r5, #48]	; 0x30
   14de4:	ldrd	r2, [r4]
   14de8:	eor	r1, r3, r1
   14dec:	eor	r0, r2, r0
   14df0:	orr	r0, r0, r1
   14df4:	clz	r0, r0
   14df8:	lsr	r0, r0, #5
   14dfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e00:	mov	r0, #1
   14e04:	bx	lr
   14e08:	movw	ip, #15936	; 0x3e40
   14e0c:	movt	ip, #6
   14e10:	ldrb	r0, [ip, #5]
   14e14:	cmp	r0, #0
   14e18:	beq	14e88 <__assert_fail@plt+0x240c>
   14e1c:	ldr	r3, [ip, #8]
   14e20:	mov	r0, #0
   14e24:	cmp	r3, #0
   14e28:	bxeq	lr
   14e2c:	ldrb	r0, [ip, #4]
   14e30:	cmp	r0, #0
   14e34:	ldrne	r3, [r1, #16]
   14e38:	and	r0, r3, #61440	; 0xf000
   14e3c:	sub	r1, r0, #4096	; 0x1000
   14e40:	lsr	r0, r1, #12
   14e44:	cmp	r0, #11
   14e48:	bhi	14e60 <__assert_fail@plt+0x23e4>
   14e4c:	uxth	r3, r0
   14e50:	movw	ip, #2731	; 0xaab
   14e54:	mov	r0, #1
   14e58:	tst	r0, ip, lsr r3
   14e5c:	bne	14e68 <__assert_fail@plt+0x23ec>
   14e60:	mov	r0, #0
   14e64:	bx	lr
   14e68:	movw	r3, #52944	; 0xced0
   14e6c:	movt	r3, #4
   14e70:	ldr	r1, [r3, r1, asr #10]
   14e74:	add	r1, r2, r1
   14e78:	ldrb	r1, [r1, #40]	; 0x28
   14e7c:	cmp	r1, #0
   14e80:	moveq	r0, #0
   14e84:	bx	lr
   14e88:	push	{fp, lr}
   14e8c:	mov	fp, sp
   14e90:	movw	r0, #52296	; 0xcc48
   14e94:	movw	r1, #51839	; 0xca7f
   14e98:	movw	r3, #52312	; 0xcc58
   14e9c:	movw	r2, #977	; 0x3d1
   14ea0:	movt	r0, #4
   14ea4:	movt	r1, #4
   14ea8:	movt	r3, #4
   14eac:	bl	12a7c <__assert_fail@plt>
   14eb0:	ldr	r0, [r2, #40]	; 0x28
   14eb4:	cmp	r0, #2
   14eb8:	beq	14ee8 <__assert_fail@plt+0x246c>
   14ebc:	cmp	r0, #1
   14ec0:	beq	14f08 <__assert_fail@plt+0x248c>
   14ec4:	cmp	r0, #0
   14ec8:	bne	14f00 <__assert_fail@plt+0x2484>
   14ecc:	ldr	r1, [r1, #24]
   14ed0:	ldrd	r2, [r2, #48]	; 0x30
   14ed4:	mov	r0, #1
   14ed8:	subs	r1, r2, r1
   14edc:	sbcs	r1, r3, #0
   14ee0:	bcs	14f00 <__assert_fail@plt+0x2484>
   14ee4:	bx	lr
   14ee8:	ldr	r0, [r1, #24]
   14eec:	ldrd	r2, [r2, #48]	; 0x30
   14ef0:	eor	r0, r2, r0
   14ef4:	orrs	r0, r0, r3
   14ef8:	mov	r0, #1
   14efc:	bxeq	lr
   14f00:	mov	r0, #0
   14f04:	bx	lr
   14f08:	ldrd	r2, [r2, #48]	; 0x30
   14f0c:	ldr	r1, [r1, #24]
   14f10:	mov	r0, #1
   14f14:	subs	r1, r1, r2
   14f18:	rscs	r1, r3, #0
   14f1c:	movcs	r0, #0
   14f20:	bx	lr
   14f24:	nop	{0}
   14f28:	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   14f2c:	add	fp, sp, #24
   14f30:	ldrd	r6, [r1, #72]	; 0x48
   14f34:	ldrd	r8, [r1, #88]	; 0x58
   14f38:	mov	r4, r2
   14f3c:	cmp	r8, r6
   14f40:	cmpeq	r7, r9
   14f44:	beq	14f78 <__assert_fail@plt+0x24fc>
   14f48:	mov	r0, r6
   14f4c:	mov	r1, r8
   14f50:	bl	12854 <difftime@plt>
   14f54:	vldr	d16, [pc, #76]	; 14fa8 <__assert_fail@plt+0x252c>
   14f58:	sub	r0, r7, r9
   14f5c:	vmov	s2, r0
   14f60:	vcvt.f64.s32	d17, s2
   14f64:	vmla.f64	d0, d17, d16
   14f68:	vcmpe.f64	d0, #0.0
   14f6c:	vmrs	APSR_nzcv, fpscr
   14f70:	movmi	r0, #0
   14f74:	popmi	{r4, r6, r7, r8, r9, sl, fp, pc}
   14f78:	movw	r2, #51712	; 0xca00
   14f7c:	sub	r1, r9, r7
   14f80:	sub	r0, r8, r6
   14f84:	movw	r3, #20864	; 0x5180
   14f88:	movt	r2, #15258	; 0x3b9a
   14f8c:	cmp	r1, #0
   14f90:	add	r0, r0, r1, asr #31
   14f94:	movt	r3, #1
   14f98:	addlt	r1, r1, r2
   14f9c:	mov	r2, r4
   14fa0:	pop	{r4, r6, r7, r8, r9, sl, fp, lr}
   14fa4:	b	13b98 <__assert_fail@plt+0x111c>
   14fa8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14fac:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14fb0:	ldr	r0, [r1, #24]
   14fb4:	ldr	r1, [r2, #40]	; 0x28
   14fb8:	sub	r0, r1, r0
   14fbc:	clz	r0, r0
   14fc0:	lsr	r0, r0, #5
   14fc4:	bx	lr
   14fc8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14fcc:	add	fp, sp, #24
   14fd0:	sub	sp, sp, #104	; 0x68
   14fd4:	mov	r8, r2
   14fd8:	mov	r9, r1
   14fdc:	mov	r7, r0
   14fe0:	bl	192fc <__assert_fail@plt+0x6880>
   14fe4:	mov	r4, sp
   14fe8:	mov	r6, r0
   14fec:	mov	r0, r4
   14ff0:	bl	18850 <__assert_fail@plt+0x5dd4>
   14ff4:	movw	r0, #37252	; 0x9184
   14ff8:	movw	r2, #37008	; 0x9090
   14ffc:	movw	r5, #15936	; 0x3e40
   15000:	cmp	r6, #0
   15004:	mov	r1, r4
   15008:	movt	r0, #1
   1500c:	movt	r2, #1
   15010:	movt	r5, #6
   15014:	movne	r2, r0
   15018:	ldr	r0, [r5, #12]
   1501c:	blx	r2
   15020:	cmp	r0, #0
   15024:	beq	150c8 <__assert_fail@plt+0x264c>
   15028:	bl	192fc <__assert_fail@plt+0x6880>
   1502c:	mov	r4, r0
   15030:	bl	127d0 <__errno_location@plt>
   15034:	cmp	r4, #0
   15038:	beq	15088 <__assert_fail@plt+0x260c>
   1503c:	ldr	r1, [r0]
   15040:	cmp	r1, #2
   15044:	bne	15088 <__assert_fail@plt+0x260c>
   15048:	ldrb	r0, [r5, #5]
   1504c:	cmp	r0, #0
   15050:	beq	15154 <__assert_fail@plt+0x26d8>
   15054:	ldr	r0, [r5, #8]
   15058:	mov	r6, #0
   1505c:	cmp	r0, #0
   15060:	beq	15120 <__assert_fail@plt+0x26a4>
   15064:	ldrb	r1, [r5, #4]
   15068:	cmp	r1, #0
   1506c:	ldrne	r0, [r9, #16]
   15070:	and	r0, r0, #61440	; 0xf000
   15074:	sub	r0, r0, #4096	; 0x1000
   15078:	lsr	r1, r0, #12
   1507c:	cmp	r1, #11
   15080:	bls	15108 <__assert_fail@plt+0x268c>
   15084:	b	1511c <__assert_fail@plt+0x26a0>
   15088:	ldr	r4, [r0]
   1508c:	mov	r0, #0
   15090:	mov	r1, r7
   15094:	mov	r6, #0
   15098:	bl	19d58 <__assert_fail@plt+0x72dc>
   1509c:	movw	r2, #9967	; 0x26ef
   150a0:	mov	r3, r0
   150a4:	mov	r0, #0
   150a8:	mov	r1, r4
   150ac:	movt	r2, #5
   150b0:	bl	12674 <error@plt>
   150b4:	mov	r0, #1
   150b8:	str	r0, [r5, #28]
   150bc:	mov	r0, r6
   150c0:	sub	sp, fp, #24
   150c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   150c8:	ldrb	r0, [r5, #5]
   150cc:	cmp	r0, #0
   150d0:	beq	15154 <__assert_fail@plt+0x26d8>
   150d4:	ldr	r0, [r5, #8]
   150d8:	mov	r6, #0
   150dc:	cmp	r0, #0
   150e0:	beq	15120 <__assert_fail@plt+0x26a4>
   150e4:	ldrb	r1, [r5, #4]
   150e8:	ldr	r2, [sp, #16]
   150ec:	cmp	r1, #0
   150f0:	moveq	r2, r0
   150f4:	and	r0, r2, #61440	; 0xf000
   150f8:	sub	r0, r0, #4096	; 0x1000
   150fc:	lsr	r1, r0, #12
   15100:	cmp	r1, #11
   15104:	bhi	1511c <__assert_fail@plt+0x26a0>
   15108:	uxth	r1, r1
   1510c:	movw	r2, #2731	; 0xaab
   15110:	mov	r6, #1
   15114:	tst	r6, r2, lsr r1
   15118:	bne	1512c <__assert_fail@plt+0x26b0>
   1511c:	mov	r6, #0
   15120:	mov	r0, r6
   15124:	sub	sp, fp, #24
   15128:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1512c:	movw	r1, #52944	; 0xced0
   15130:	movt	r1, #4
   15134:	ldr	r0, [r1, r0, asr #10]
   15138:	add	r0, r8, r0
   1513c:	ldrb	r0, [r0, #40]	; 0x28
   15140:	cmp	r0, #0
   15144:	moveq	r6, #0
   15148:	mov	r0, r6
   1514c:	sub	sp, fp, #24
   15150:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15154:	movw	r0, #52296	; 0xcc48
   15158:	movw	r1, #51839	; 0xca7f
   1515c:	movw	r3, #52312	; 0xcc58
   15160:	movw	r2, #977	; 0x3d1
   15164:	movt	r0, #4
   15168:	movt	r1, #4
   1516c:	movt	r3, #4
   15170:	bl	12a7c <__assert_fail@plt>
   15174:	push	{r4, r5, r6, r7, fp, lr}
   15178:	add	fp, sp, #16
   1517c:	sub	sp, sp, #8
   15180:	mov	r5, r2
   15184:	movw	r2, #15980	; 0x3e6c
   15188:	mov	r4, r0
   1518c:	movw	r0, #15936	; 0x3e40
   15190:	movt	r0, #6
   15194:	movt	r2, #6
   15198:	ldr	r1, [r0, #12]
   1519c:	ldr	r3, [r2, #64]	; 0x40
   151a0:	ldr	r0, [r0, #16]
   151a4:	add	r2, sp, #4
   151a8:	blx	r3
   151ac:	cmn	r0, #1
   151b0:	ble	151e4 <__assert_fail@plt+0x2768>
   151b4:	ldr	r0, [r5, #40]	; 0x28
   151b8:	ldr	r1, [sp, #4]
   151bc:	mov	r2, #0
   151c0:	bl	12698 <fnmatch@plt>
   151c4:	mov	r4, r0
   151c8:	ldr	r0, [sp, #4]
   151cc:	bl	129a4 <freecon@plt>
   151d0:	clz	r0, r4
   151d4:	lsr	r5, r0, #5
   151d8:	mov	r0, r5
   151dc:	sub	sp, fp, #16
   151e0:	pop	{r4, r5, r6, r7, fp, pc}
   151e4:	bl	127d0 <__errno_location@plt>
   151e8:	ldr	r6, [r0]
   151ec:	movw	r1, #52377	; 0xcc99
   151f0:	mov	r0, #0
   151f4:	mov	r2, #5
   151f8:	mov	r5, #0
   151fc:	movt	r1, #4
   15200:	bl	1253c <dcgettext@plt>
   15204:	mov	r7, r0
   15208:	mov	r0, #0
   1520c:	mov	r1, r4
   15210:	bl	19d58 <__assert_fail@plt+0x72dc>
   15214:	mov	r3, r0
   15218:	mov	r0, #0
   1521c:	mov	r1, r6
   15220:	mov	r2, r7
   15224:	bl	12674 <error@plt>
   15228:	mov	r0, r5
   1522c:	sub	sp, fp, #16
   15230:	pop	{r4, r5, r6, r7, fp, pc}
   15234:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15238:	add	fp, sp, #24
   1523c:	sub	sp, sp, #264	; 0x108
   15240:	mov	r4, r0
   15244:	cmp	r1, #0
   15248:	beq	152dc <__assert_fail@plt+0x2860>
   1524c:	movw	r8, #52399	; 0xccaf
   15250:	add	r6, sp, #4
   15254:	mov	r5, r1
   15258:	mov	r9, #0
   1525c:	sub	r7, r6, #1
   15260:	movt	r8, #4
   15264:	ldr	r1, [r5, #4]
   15268:	mov	r2, #0
   1526c:	cmp	r1, #0
   15270:	beq	152c4 <__assert_fail@plt+0x2848>
   15274:	mov	r0, r6
   15278:	bl	12638 <strcpy@plt>
   1527c:	mov	r0, r6
   15280:	bl	12788 <strlen@plt>
   15284:	sub	r1, r0, #1
   15288:	cmp	r1, #0
   1528c:	blt	152b8 <__assert_fail@plt+0x283c>
   15290:	ldrb	r1, [r7, r0]
   15294:	cmp	r1, #32
   15298:	cmpne	r1, #9
   1529c:	bne	152b8 <__assert_fail@plt+0x283c>
   152a0:	sub	r1, r0, #1
   152a4:	sub	r0, r0, #2
   152a8:	cmn	r0, #1
   152ac:	mov	r0, r1
   152b0:	bgt	15290 <__assert_fail@plt+0x2814>
   152b4:	b	152bc <__assert_fail@plt+0x2840>
   152b8:	mov	r1, r0
   152bc:	mov	r2, r6
   152c0:	strb	r9, [r6, r1]
   152c4:	mov	r0, r4
   152c8:	mov	r1, r8
   152cc:	bl	127c4 <fprintf@plt>
   152d0:	ldr	r5, [r5, #152]	; 0x98
   152d4:	cmp	r5, #0
   152d8:	bne	15264 <__assert_fail@plt+0x27e8>
   152dc:	mov	r0, #10
   152e0:	mov	r1, r4
   152e4:	bl	12914 <fputc@plt>
   152e8:	sub	sp, fp, #24
   152ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   152f0:	cmp	r1, #0
   152f4:	bxeq	lr
   152f8:	push	{r4, r5, fp, lr}
   152fc:	add	fp, sp, #8
   15300:	sub	sp, sp, #8
   15304:	mov	r5, r1
   15308:	ldr	r1, [r1, #156]	; 0x9c
   1530c:	mov	r4, r0
   15310:	bl	15424 <__assert_fail@plt+0x29a8>
   15314:	ldrb	r2, [r5, #20]
   15318:	ldrb	r0, [r5, #18]
   1531c:	movw	ip, #58175	; 0xe33f
   15320:	movw	r3, #52438	; 0xccd6
   15324:	ldrb	r1, [r5, #19]
   15328:	movt	ip, #4
   1532c:	movt	r3, #4
   15330:	cmp	r2, #0
   15334:	movw	r2, #52412	; 0xccbc
   15338:	moveq	r3, ip
   1533c:	cmp	r0, #0
   15340:	movt	r2, #4
   15344:	mov	r0, r4
   15348:	str	r3, [sp]
   1534c:	movw	r3, #52425	; 0xccc9
   15350:	moveq	r2, ip
   15354:	cmp	r1, #0
   15358:	movw	r1, #52405	; 0xccb5
   1535c:	movt	r3, #4
   15360:	movt	r1, #4
   15364:	moveq	r3, ip
   15368:	bl	127c4 <fprintf@plt>
   1536c:	mov	r0, r4
   15370:	mov	r1, r5
   15374:	bl	15f70 <__assert_fail@plt+0x34f4>
   15378:	vldr	s0, [r5, #28]
   1537c:	movw	r1, #52451	; 0xcce3
   15380:	mov	r0, r4
   15384:	movt	r1, #4
   15388:	vcvt.f64.f32	d16, s0
   1538c:	vmov	r2, r3, d16
   15390:	bl	127c4 <fprintf@plt>
   15394:	movw	r0, #15980	; 0x3e6c
   15398:	movt	r0, #6
   1539c:	ldrb	r0, [r0, #44]	; 0x2c
   153a0:	tst	r0, #64	; 0x40
   153a4:	beq	15410 <__assert_fail@plt+0x2994>
   153a8:	ldr	r3, [r5, #164]	; 0xa4
   153ac:	ldr	r2, [r5, #168]	; 0xa8
   153b0:	movw	r1, #52477	; 0xccfd
   153b4:	mov	r0, r4
   153b8:	movt	r1, #4
   153bc:	bl	127c4 <fprintf@plt>
   153c0:	ldr	r0, [r5, #164]	; 0xa4
   153c4:	cmp	r0, #0
   153c8:	beq	153f8 <__assert_fail@plt+0x297c>
   153cc:	vldr	s0, [r5, #168]	; 0xa8
   153d0:	vmov	s2, r0
   153d4:	movw	r1, #52504	; 0xcd18
   153d8:	mov	r0, r4
   153dc:	vcvt.f64.u32	d16, s2
   153e0:	movt	r1, #4
   153e4:	vcvt.f64.u32	d17, s0
   153e8:	vdiv.f64	d16, d17, d16
   153ec:	vmov	r2, r3, d16
   153f0:	bl	127c4 <fprintf@plt>
   153f4:	b	15410 <__assert_fail@plt+0x2994>
   153f8:	movw	r0, #52512	; 0xcd20
   153fc:	mov	r1, #4
   15400:	mov	r2, #1
   15404:	mov	r3, r4
   15408:	movt	r0, #4
   1540c:	bl	125f0 <fwrite@plt>
   15410:	ldr	r1, [r5, #160]	; 0xa0
   15414:	mov	r0, r4
   15418:	sub	sp, fp, #8
   1541c:	pop	{r4, r5, fp, lr}
   15420:	b	15424 <__assert_fail@plt+0x29a8>
   15424:	push	{r4, r5, fp, lr}
   15428:	add	fp, sp, #8
   1542c:	cmp	r1, #0
   15430:	popeq	{r4, r5, fp, pc}
   15434:	mov	r5, r1
   15438:	movw	r1, #15584	; 0x3ce0
   1543c:	mov	r4, r0
   15440:	movw	r0, #18892	; 0x49cc
   15444:	movt	r0, #1
   15448:	movt	r1, #1
   1544c:	ldr	r3, [r5]
   15450:	ldr	r2, [r5, #156]	; 0x9c
   15454:	cmp	r3, r0
   15458:	cmpne	r3, r1
   1545c:	bne	15478 <__assert_fail@plt+0x29fc>
   15460:	cmp	r2, #0
   15464:	bne	1548c <__assert_fail@plt+0x2a10>
   15468:	ldr	r5, [r5, #160]	; 0xa0
   1546c:	cmp	r5, #0
   15470:	bne	1544c <__assert_fail@plt+0x29d0>
   15474:	pop	{r4, r5, fp, pc}
   15478:	cmp	r2, #0
   1547c:	bne	1548c <__assert_fail@plt+0x2a10>
   15480:	ldr	r0, [r5, #160]	; 0xa0
   15484:	cmp	r0, #0
   15488:	beq	154cc <__assert_fail@plt+0x2a50>
   1548c:	movw	r0, #52936	; 0xcec8
   15490:	mov	r1, #3
   15494:	mov	r2, #1
   15498:	mov	r3, r4
   1549c:	movt	r0, #4
   154a0:	bl	125f0 <fwrite@plt>
   154a4:	mov	r0, r4
   154a8:	mov	r1, r5
   154ac:	bl	152f0 <__assert_fail@plt+0x2874>
   154b0:	movw	r0, #52940	; 0xcecc
   154b4:	mov	r1, #3
   154b8:	mov	r2, #1
   154bc:	mov	r3, r4
   154c0:	movt	r0, #4
   154c4:	pop	{r4, r5, fp, lr}
   154c8:	b	125f0 <fwrite@plt>
   154cc:	mov	r0, r4
   154d0:	mov	r1, r5
   154d4:	pop	{r4, r5, fp, lr}
   154d8:	b	152f0 <__assert_fail@plt+0x2874>
   154dc:	push	{r4, r5, fp, lr}
   154e0:	add	fp, sp, #8
   154e4:	mov	r4, r0
   154e8:	movw	r0, #15980	; 0x3e6c
   154ec:	movt	r0, #6
   154f0:	ldrb	r0, [r0, #44]	; 0x2c
   154f4:	tst	r0, #64	; 0x40
   154f8:	popeq	{r4, r5, fp, pc}
   154fc:	movw	r5, #13640	; 0x3548
   15500:	movw	r0, #52517	; 0xcd25
   15504:	mov	r1, #42	; 0x2a
   15508:	mov	r2, #1
   1550c:	movt	r5, #6
   15510:	movt	r0, #4
   15514:	ldr	r3, [r5]
   15518:	bl	125f0 <fwrite@plt>
   1551c:	ldr	r0, [r5]
   15520:	mov	r1, r4
   15524:	bl	152f0 <__assert_fail@plt+0x2874>
   15528:	ldr	r1, [r5]
   1552c:	mov	r0, #10
   15530:	pop	{r4, r5, fp, lr}
   15534:	b	12914 <fputc@plt>
   15538:	push	{fp, lr}
   1553c:	mov	fp, sp
   15540:	cmp	r0, #0
   15544:	popeq	{fp, pc}
   15548:	movw	lr, #19380	; 0x4bb4
   1554c:	movw	ip, #19496	; 0x4c28
   15550:	movt	lr, #1
   15554:	movt	ip, #1
   15558:	ldr	r3, [r0]
   1555c:	cmp	r3, #0
   15560:	beq	15640 <__assert_fail@plt+0x2bc4>
   15564:	ldr	r2, [r0, #172]	; 0xac
   15568:	cmp	r2, #0
   1556c:	beq	15660 <__assert_fail@plt+0x2be4>
   15570:	ldr	r1, [r2, #12]
   15574:	cmp	r1, #0
   15578:	cmpne	r1, r3
   1557c:	bne	15620 <__assert_fail@plt+0x2ba4>
   15580:	ldr	r1, [r2]
   15584:	cmp	r1, #6
   15588:	bhi	155c8 <__assert_fail@plt+0x2b4c>
   1558c:	add	r2, pc, #0
   15590:	ldr	pc, [r2, r1, lsl #2]
   15594:	andeq	r5, r1, r0, lsl #13
   15598:			; <UNDEFINED> instruction: 0x000155b0
   1559c:	andeq	r5, r1, r0, lsr #13
   155a0:			; <UNDEFINED> instruction: 0x000155b0
   155a4:			; <UNDEFINED> instruction: 0x000155b0
   155a8:			; <UNDEFINED> instruction: 0x000155b0
   155ac:	ldrdeq	r5, [r1], -r8
   155b0:	ldrb	r1, [r0, #17]
   155b4:	cmp	r1, #0
   155b8:	bne	156c0 <__assert_fail@plt+0x2c44>
   155bc:	ldrb	r1, [r0, #16]
   155c0:	cmp	r1, #0
   155c4:	bne	156e0 <__assert_fail@plt+0x2c64>
   155c8:	ldr	r0, [r0, #152]	; 0x98
   155cc:	cmp	r0, #0
   155d0:	bne	15558 <__assert_fail@plt+0x2adc>
   155d4:	b	1561c <__assert_fail@plt+0x2ba0>
   155d8:	ldrb	r1, [r0, #16]
   155dc:	cmp	r1, #0
   155e0:	beq	15700 <__assert_fail@plt+0x2c84>
   155e4:	cmp	r3, lr
   155e8:	cmpne	r3, ip
   155ec:	beq	155c8 <__assert_fail@plt+0x2b4c>
   155f0:	ldrb	r1, [r0, #17]
   155f4:	cmp	r1, #0
   155f8:	bne	155c8 <__assert_fail@plt+0x2b4c>
   155fc:	movw	r0, #52781	; 0xce2d
   15600:	movw	r1, #51839	; 0xca7f
   15604:	movw	r3, #52581	; 0xcd65
   15608:	movw	r2, #1349	; 0x545
   1560c:	movt	r0, #4
   15610:	movt	r1, #4
   15614:	movt	r3, #4
   15618:	bl	12a7c <__assert_fail@plt>
   1561c:	pop	{fp, pc}
   15620:	movw	r0, #52654	; 0xcdae
   15624:	movw	r1, #51839	; 0xca7f
   15628:	movw	r3, #52581	; 0xcd65
   1562c:	movw	r2, #1322	; 0x52a
   15630:	movt	r0, #4
   15634:	movt	r1, #4
   15638:	movt	r3, #4
   1563c:	bl	12a7c <__assert_fail@plt>
   15640:	movw	r0, #52560	; 0xcd50
   15644:	movw	r1, #51839	; 0xca7f
   15648:	movw	r3, #52581	; 0xcd65
   1564c:	movw	r2, #1310	; 0x51e
   15650:	movt	r0, #4
   15654:	movt	r1, #4
   15658:	movt	r3, #4
   1565c:	bl	12a7c <__assert_fail@plt>
   15660:	movw	r0, #52630	; 0xcd96
   15664:	movw	r1, #51839	; 0xca7f
   15668:	movw	r3, #52581	; 0xcd65
   1566c:	movw	r2, #1313	; 0x521
   15670:	movt	r0, #4
   15674:	movt	r1, #4
   15678:	movt	r3, #4
   1567c:	bl	12a7c <__assert_fail@plt>
   15680:	movw	r0, #52697	; 0xcdd9
   15684:	movw	r1, #51839	; 0xca7f
   15688:	movw	r3, #52581	; 0xcd65
   1568c:	movw	r2, #1338	; 0x53a
   15690:	movt	r0, #4
   15694:	movt	r1, #4
   15698:	movt	r3, #4
   1569c:	bl	12a7c <__assert_fail@plt>
   156a0:	movw	r0, #52733	; 0xcdfd
   156a4:	movw	r1, #51839	; 0xca7f
   156a8:	movw	r3, #52581	; 0xcd65
   156ac:	movw	r2, #1339	; 0x53b
   156b0:	movt	r0, #4
   156b4:	movt	r1, #4
   156b8:	movt	r3, #4
   156bc:	bl	12a7c <__assert_fail@plt>
   156c0:	movw	r0, #52780	; 0xce2c
   156c4:	movw	r1, #51839	; 0xca7f
   156c8:	movw	r3, #52581	; 0xcd65
   156cc:	movw	r2, #1363	; 0x553
   156d0:	movt	r0, #4
   156d4:	movt	r1, #4
   156d8:	movt	r3, #4
   156dc:	bl	12a7c <__assert_fail@plt>
   156e0:	movw	r0, #52801	; 0xce41
   156e4:	movw	r1, #51839	; 0xca7f
   156e8:	movw	r3, #52581	; 0xcd65
   156ec:	movw	r2, #1364	; 0x554
   156f0:	movt	r0, #4
   156f4:	movt	r1, #4
   156f8:	movt	r3, #4
   156fc:	bl	12a7c <__assert_fail@plt>
   15700:	movw	r0, #52802	; 0xce42
   15704:	movw	r1, #51839	; 0xca7f
   15708:	movw	r3, #52581	; 0xcd65
   1570c:	movw	r2, #1343	; 0x53f
   15710:	movt	r0, #4
   15714:	movt	r1, #4
   15718:	movt	r3, #4
   1571c:	bl	12a7c <__assert_fail@plt>
   15720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15724:	add	fp, sp, #28
   15728:	sub	sp, sp, #36	; 0x24
   1572c:	mov	r8, r2
   15730:	mov	r9, r0
   15734:	mov	r4, r2
   15738:	ldr	r0, [r8], #40	; 0x28
   1573c:	bl	19d28 <__assert_fail@plt+0x72ac>
   15740:	mov	sl, r0
   15744:	cmp	r0, #0
   15748:	beq	157d0 <__assert_fail@plt+0x2d54>
   1574c:	ldr	r0, [r4, #116]	; 0x74
   15750:	cmp	r0, #0
   15754:	bne	158b4 <__assert_fail@plt+0x2e38>
   15758:	movw	r5, #15936	; 0x3e40
   1575c:	mov	r1, #47	; 0x2f
   15760:	movt	r5, #6
   15764:	ldr	r6, [r5, #12]
   15768:	mov	r0, r6
   1576c:	bl	12794 <strchr@plt>
   15770:	cmp	r0, #0
   15774:	beq	15870 <__assert_fail@plt+0x2df4>
   15778:	mov	r0, r6
   1577c:	bl	237c4 <__assert_fail@plt+0x10d48>
   15780:	ldr	r5, [r5, #16]
   15784:	mov	r6, r0
   15788:	mov	r0, #8
   1578c:	bl	309ec <__assert_fail@plt+0x1df70>
   15790:	mov	r1, #0
   15794:	str	r0, [r4, #144]	; 0x90
   15798:	mov	r2, #0
   1579c:	str	r1, [r0, #4]
   157a0:	mov	r0, r5
   157a4:	mov	r1, r6
   157a8:	bl	27820 <__assert_fail@plt+0x14da4>
   157ac:	ldr	r1, [r4, #144]	; 0x90
   157b0:	cmp	r0, #0
   157b4:	str	r0, [r1]
   157b8:	blt	15a14 <__assert_fail@plt+0x2f98>
   157bc:	mov	r1, #1
   157c0:	bl	234fc <__assert_fail@plt+0x10a80>
   157c4:	mov	r0, r6
   157c8:	bl	32c40 <__assert_fail@plt+0x201c4>
   157cc:	b	158b4 <__assert_fail@plt+0x2e38>
   157d0:	movw	r0, #13672	; 0x3568
   157d4:	ldr	r1, [r4, #144]	; 0x90
   157d8:	mov	r7, #0
   157dc:	mov	r6, #0
   157e0:	mov	r5, #0
   157e4:	movt	r0, #6
   157e8:	ldr	r0, [r0]
   157ec:	cmp	r1, r0
   157f0:	bne	159f4 <__assert_fail@plt+0x2f78>
   157f4:	ldrb	r0, [r8]
   157f8:	cmp	r0, #0
   157fc:	beq	158f0 <__assert_fail@plt+0x2e74>
   15800:	mov	r0, r9
   15804:	bl	12788 <strlen@plt>
   15808:	mov	r1, #0
   1580c:	add	r2, r8, #4
   15810:	add	r3, r0, #1
   15814:	str	r6, [sp]
   15818:	str	r5, [sp, #4]
   1581c:	str	r1, [sp, #8]
   15820:	mov	r0, r2
   15824:	add	r1, r4, #88	; 0x58
   15828:	mov	r2, r9
   1582c:	bl	207c4 <__assert_fail@plt+0xdd48>
   15830:	ldr	r0, [r4, #116]	; 0x74
   15834:	cmp	r0, #0
   15838:	beq	15860 <__assert_fail@plt+0x2de4>
   1583c:	movw	r0, #15936	; 0x3e40
   15840:	mov	r6, #1
   15844:	movt	r0, #6
   15848:	strb	r6, [r0, #32]
   1584c:	cmp	r7, #0
   15850:	bne	159b8 <__assert_fail@plt+0x2f3c>
   15854:	mov	r0, r6
   15858:	sub	sp, fp, #28
   1585c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15860:	mov	r6, #1
   15864:	cmp	r7, #0
   15868:	bne	159b8 <__assert_fail@plt+0x2f3c>
   1586c:	b	15854 <__assert_fail@plt+0x2dd8>
   15870:	ldr	r5, [r5, #16]
   15874:	mov	r0, #8
   15878:	bl	309ec <__assert_fail@plt+0x1df70>
   1587c:	mov	r1, #0
   15880:	str	r0, [r4, #144]	; 0x90
   15884:	mov	r2, #0
   15888:	str	r1, [r0, #4]
   1588c:	movw	r1, #54804	; 0xd614
   15890:	mov	r0, r5
   15894:	movt	r1, #4
   15898:	bl	27820 <__assert_fail@plt+0x14da4>
   1589c:	ldr	r1, [r4, #144]	; 0x90
   158a0:	cmp	r0, #0
   158a4:	str	r0, [r1]
   158a8:	blt	15a1c <__assert_fail@plt+0x2fa0>
   158ac:	mov	r1, #1
   158b0:	bl	234fc <__assert_fail@plt+0x10a80>
   158b4:	movw	r0, #15936	; 0x3e40
   158b8:	movt	r0, #6
   158bc:	ldr	r0, [r0, #12]
   158c0:	bl	23708 <__assert_fail@plt+0x10c8c>
   158c4:	mov	r9, r0
   158c8:	ldrb	r0, [r0]
   158cc:	movw	r6, #53057	; 0xcf41
   158d0:	movt	r6, #4
   158d4:	mov	r7, r9
   158d8:	subs	r5, r0, #47	; 0x2f
   158dc:	moveq	r6, r5
   158e0:	movwne	r5, #2
   158e4:	ldrb	r0, [r8]
   158e8:	cmp	r0, #0
   158ec:	bne	15800 <__assert_fail@plt+0x2d84>
   158f0:	add	r0, r4, #88	; 0x58
   158f4:	str	r7, [sp, #20]
   158f8:	str	sl, [sp, #24]
   158fc:	str	r0, [sp, #32]
   15900:	add	r0, r8, #4
   15904:	str	r0, [sp, #28]
   15908:	ldr	r0, [r4, #136]	; 0x88
   1590c:	cmp	r0, #1
   15910:	blt	15978 <__assert_fail@plt+0x2efc>
   15914:	mov	r7, r9
   15918:	mov	sl, r5
   1591c:	mov	r9, r6
   15920:	mov	r5, #0
   15924:	ldr	r0, [r4, #132]	; 0x84
   15928:	ldr	r6, [r0, r5, lsl #2]
   1592c:	mov	r0, r6
   15930:	bl	12788 <strlen@plt>
   15934:	mov	r8, r0
   15938:	mov	r0, r7
   1593c:	bl	12788 <strlen@plt>
   15940:	stm	sp, {r9, sl}
   15944:	str	r0, [sp, #12]
   15948:	mov	r0, #0
   1594c:	mov	r2, r6
   15950:	mov	r3, r8
   15954:	str	r7, [sp, #8]
   15958:	str	r0, [sp, #16]
   1595c:	ldr	r0, [sp, #28]
   15960:	ldr	r1, [sp, #32]
   15964:	bl	20590 <__assert_fail@plt+0xdb14>
   15968:	ldr	r0, [r4, #136]	; 0x88
   1596c:	add	r5, r5, #1
   15970:	cmp	r5, r0
   15974:	blt	15924 <__assert_fail@plt+0x2ea8>
   15978:	ldr	r0, [sp, #28]
   1597c:	ldr	r1, [sp, #32]
   15980:	bl	20a40 <__assert_fail@plt+0xdfc4>
   15984:	ldrh	r0, [r4, #148]	; 0x94
   15988:	ldr	sl, [sp, #24]
   1598c:	movw	r1, #65407	; 0xff7f
   15990:	and	r0, r0, r1
   15994:	cmp	sl, #0
   15998:	clz	r0, r0
   1599c:	lsr	r6, r0, #5
   159a0:	beq	159ac <__assert_fail@plt+0x2f30>
   159a4:	ldr	r0, [r4, #144]	; 0x90
   159a8:	bl	2f94c <__assert_fail@plt+0x1ced0>
   159ac:	ldr	r7, [sp, #20]
   159b0:	cmp	r7, #0
   159b4:	beq	15854 <__assert_fail@plt+0x2dd8>
   159b8:	cmp	sl, #0
   159bc:	beq	159d4 <__assert_fail@plt+0x2f58>
   159c0:	mov	r0, r7
   159c4:	bl	32c40 <__assert_fail@plt+0x201c4>
   159c8:	mov	r0, r6
   159cc:	sub	sp, fp, #28
   159d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159d4:	movw	r0, #53170	; 0xcfb2
   159d8:	movw	r1, #53093	; 0xcf65
   159dc:	movw	r3, #53100	; 0xcf6c
   159e0:	mov	r2, #208	; 0xd0
   159e4:	movt	r0, #4
   159e8:	movt	r1, #4
   159ec:	movt	r3, #4
   159f0:	bl	12a7c <__assert_fail@plt>
   159f4:	movw	r0, #53060	; 0xcf44
   159f8:	movw	r1, #53093	; 0xcf65
   159fc:	movw	r3, #53100	; 0xcf6c
   15a00:	mov	r2, #148	; 0x94
   15a04:	movt	r0, #4
   15a08:	movt	r1, #4
   15a0c:	movt	r3, #4
   15a10:	bl	12a7c <__assert_fail@plt>
   15a14:	mov	r0, r6
   15a18:	bl	32c40 <__assert_fail@plt+0x201c4>
   15a1c:	bl	127d0 <__errno_location@plt>
   15a20:	ldr	r4, [r0]
   15a24:	movw	r1, #52992	; 0xcf00
   15a28:	mov	r0, #0
   15a2c:	mov	r2, #5
   15a30:	movt	r1, #4
   15a34:	bl	1253c <dcgettext@plt>
   15a38:	mov	r6, r0
   15a3c:	mov	r0, #0
   15a40:	mov	r1, r9
   15a44:	bl	19d58 <__assert_fail@plt+0x72dc>
   15a48:	mov	r3, r0
   15a4c:	mov	r0, #1
   15a50:	mov	r1, r4
   15a54:	mov	r2, r6
   15a58:	bl	12674 <error@plt>
   15a5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a60:	add	fp, sp, #28
   15a64:	sub	sp, sp, #20
   15a68:	movw	r9, #15980	; 0x3e6c
   15a6c:	mov	r8, r3
   15a70:	mov	r5, r1
   15a74:	movt	r9, #6
   15a78:	ldrb	r0, [r9, #44]	; 0x2c
   15a7c:	tst	r0, #32
   15a80:	bne	15c30 <__assert_fail@plt+0x31b4>
   15a84:	movw	r0, #13652	; 0x3554
   15a88:	movt	r0, #6
   15a8c:	ldr	r0, [r0]
   15a90:	bl	32bd8 <__assert_fail@plt+0x2015c>
   15a94:	movw	sl, #13640	; 0x3548
   15a98:	movt	sl, #6
   15a9c:	ldr	r0, [sl]
   15aa0:	bl	32bd8 <__assert_fail@plt+0x2015c>
   15aa4:	movw	r0, #13676	; 0x356c
   15aa8:	movt	r0, #6
   15aac:	ldrb	r1, [r0]
   15ab0:	cmp	r1, #0
   15ab4:	bne	15acc <__assert_fail@plt+0x3050>
   15ab8:	mov	r1, #1
   15abc:	strb	r1, [r0]
   15ac0:	mov	r0, #17
   15ac4:	mov	r1, #0
   15ac8:	bl	12500 <signal@plt>
   15acc:	bl	128d8 <fork@plt>
   15ad0:	cmn	r0, #1
   15ad4:	beq	15cd4 <__assert_fail@plt+0x3258>
   15ad8:	mov	r6, r0
   15adc:	cmp	r0, #0
   15ae0:	beq	15d00 <__assert_fail@plt+0x3284>
   15ae4:	add	r7, r5, #108	; 0x6c
   15ae8:	mov	r0, r6
   15aec:	mov	r1, r7
   15af0:	mov	r2, #0
   15af4:	bl	12614 <waitpid@plt>
   15af8:	cmn	r0, #1
   15afc:	bne	15b68 <__assert_fail@plt+0x30ec>
   15b00:	bl	127d0 <__errno_location@plt>
   15b04:	ldr	r4, [r0]
   15b08:	cmp	r4, #4
   15b0c:	beq	15ae8 <__assert_fail@plt+0x306c>
   15b10:	movw	r1, #53317	; 0xd045
   15b14:	mov	r0, #0
   15b18:	mov	r2, #5
   15b1c:	mov	r6, #0
   15b20:	movt	r1, #4
   15b24:	bl	1253c <dcgettext@plt>
   15b28:	ldr	r1, [r8]
   15b2c:	mov	r5, r0
   15b30:	mov	r0, #0
   15b34:	bl	19d58 <__assert_fail@plt+0x72dc>
   15b38:	mov	r3, r0
   15b3c:	mov	r0, #0
   15b40:	mov	r1, r4
   15b44:	mov	r2, r5
   15b48:	bl	12674 <error@plt>
   15b4c:	movw	r0, #15936	; 0x3e40
   15b50:	mov	r1, #1
   15b54:	movt	r0, #6
   15b58:	str	r1, [r0, #28]
   15b5c:	mov	r0, r6
   15b60:	sub	sp, fp, #28
   15b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b68:	ldr	r0, [r7]
   15b6c:	mov	r1, #2130706432	; 0x7f000000
   15b70:	and	r1, r1, r0, lsl #24
   15b74:	add	r1, r1, #16777216	; 0x1000000
   15b78:	cmp	r1, #33554432	; 0x2000000
   15b7c:	blt	15be4 <__assert_fail@plt+0x3168>
   15b80:	movw	r1, #53338	; 0xd05a
   15b84:	mov	r0, #0
   15b88:	mov	r2, #5
   15b8c:	movt	r1, #4
   15b90:	bl	1253c <dcgettext@plt>
   15b94:	ldr	r1, [r9, #72]	; 0x48
   15b98:	ldr	r2, [r8]
   15b9c:	mov	r4, r0
   15ba0:	mov	r0, #0
   15ba4:	bl	2f2ec <__assert_fail@plt+0x1c870>
   15ba8:	mov	r3, r0
   15bac:	ldr	r0, [r5, #108]	; 0x6c
   15bb0:	mov	r1, #0
   15bb4:	mov	r2, r4
   15bb8:	and	r0, r0, #127	; 0x7f
   15bbc:	str	r0, [sp]
   15bc0:	mov	r0, #0
   15bc4:	bl	12674 <error@plt>
   15bc8:	ldrb	r0, [r5]
   15bcc:	cmp	r0, #0
   15bd0:	bne	15c14 <__assert_fail@plt+0x3198>
   15bd4:	mov	r6, #1
   15bd8:	mov	r0, r6
   15bdc:	sub	sp, fp, #28
   15be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15be4:	ldrb	r1, [r9, #44]	; 0x2c
   15be8:	ubfx	r4, r0, #8, #8
   15bec:	tst	r1, #32
   15bf0:	bne	15cb8 <__assert_fail@plt+0x323c>
   15bf4:	cmp	r4, #0
   15bf8:	mov	r6, #1
   15bfc:	ldrbne	r0, [r5]
   15c00:	cmpne	r0, #0
   15c04:	bne	15c14 <__assert_fail@plt+0x3198>
   15c08:	mov	r0, r6
   15c0c:	sub	sp, fp, #28
   15c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c14:	movw	r0, #15936	; 0x3e40
   15c18:	mov	r6, #1
   15c1c:	movt	r0, #6
   15c20:	str	r6, [r0, #28]
   15c24:	mov	r0, r6
   15c28:	sub	sp, fp, #28
   15c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c30:	ldr	r0, [r5, #48]	; 0x30
   15c34:	movw	r7, #13640	; 0x3548
   15c38:	movw	r1, #53176	; 0xcfb8
   15c3c:	mov	r4, #0
   15c40:	movt	r7, #6
   15c44:	movt	r1, #4
   15c48:	subs	r2, r0, #1
   15c4c:	ldr	r0, [r7]
   15c50:	sbc	r3, r4, #0
   15c54:	bl	127c4 <fprintf@plt>
   15c58:	ldr	r0, [r5, #48]	; 0x30
   15c5c:	ldr	r6, [r7]
   15c60:	cmp	r0, #1
   15c64:	beq	15ca8 <__assert_fail@plt+0x322c>
   15c68:	movw	sl, #9966	; 0x26ee
   15c6c:	movt	sl, #5
   15c70:	ldr	r0, [r5, #52]	; 0x34
   15c74:	ldr	r1, [r0, r4, lsl #2]
   15c78:	mov	r0, #0
   15c7c:	bl	19d58 <__assert_fail@plt+0x72dc>
   15c80:	mov	r2, r0
   15c84:	mov	r0, r6
   15c88:	mov	r1, sl
   15c8c:	bl	127c4 <fprintf@plt>
   15c90:	ldr	r0, [r5, #48]	; 0x30
   15c94:	ldr	r6, [r7]
   15c98:	add	r4, r4, #1
   15c9c:	sub	r0, r0, #1
   15ca0:	cmp	r4, r0
   15ca4:	bcc	15c70 <__assert_fail@plt+0x31f4>
   15ca8:	mov	r0, #10
   15cac:	mov	r1, r6
   15cb0:	bl	12914 <fputc@plt>
   15cb4:	b	15a84 <__assert_fail@plt+0x3008>
   15cb8:	ldr	r0, [sl]
   15cbc:	movw	r1, #53365	; 0xd075
   15cc0:	mov	r2, r6
   15cc4:	mov	r3, r4
   15cc8:	movt	r1, #4
   15ccc:	bl	127c4 <fprintf@plt>
   15cd0:	b	15bf4 <__assert_fail@plt+0x3178>
   15cd4:	bl	127d0 <__errno_location@plt>
   15cd8:	ldr	r4, [r0]
   15cdc:	movw	r1, #53218	; 0xcfe2
   15ce0:	mov	r0, #0
   15ce4:	mov	r2, #5
   15ce8:	movt	r1, #4
   15cec:	bl	1253c <dcgettext@plt>
   15cf0:	mov	r2, r0
   15cf4:	mov	r0, #1
   15cf8:	mov	r1, r4
   15cfc:	bl	12674 <error@plt>
   15d00:	ldr	r6, [r5, #104]	; 0x68
   15d04:	cmp	r6, #0
   15d08:	bne	15d2c <__assert_fail@plt+0x32b0>
   15d0c:	movw	r0, #53230	; 0xcfee
   15d10:	movw	r1, #53093	; 0xcf65
   15d14:	movw	r3, #53257	; 0xd009
   15d18:	movw	r2, #321	; 0x141
   15d1c:	movt	r0, #4
   15d20:	movt	r1, #4
   15d24:	movt	r3, #4
   15d28:	bl	12a7c <__assert_fail@plt>
   15d2c:	ldrb	r0, [r5, #100]	; 0x64
   15d30:	mov	r5, #1
   15d34:	cmp	r0, #0
   15d38:	beq	15dec <__assert_fail@plt+0x3370>
   15d3c:	movw	r0, #53488	; 0xd0f0
   15d40:	mov	r5, #0
   15d44:	movt	r0, #4
   15d48:	vldr	d16, [r0]
   15d4c:	mov	r0, #108	; 0x6c
   15d50:	strh	r0, [sp, #16]
   15d54:	mov	r0, #0
   15d58:	vstr	d16, [sp, #8]
   15d5c:	bl	12a34 <close@plt>
   15d60:	cmn	r0, #1
   15d64:	bgt	15da8 <__assert_fail@plt+0x332c>
   15d68:	bl	127d0 <__errno_location@plt>
   15d6c:	ldr	r4, [r0]
   15d70:	movw	r1, #53427	; 0xd0b3
   15d74:	mov	r0, #0
   15d78:	mov	r2, #5
   15d7c:	movt	r1, #4
   15d80:	bl	1253c <dcgettext@plt>
   15d84:	mov	r2, r0
   15d88:	mov	r0, #0
   15d8c:	mov	r1, r4
   15d90:	bl	12674 <error@plt>
   15d94:	mov	r0, r6
   15d98:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   15d9c:	cmp	r0, #0
   15da0:	beq	15dfc <__assert_fail@plt+0x3380>
   15da4:	b	15e34 <__assert_fail@plt+0x33b8>
   15da8:	add	r0, sp, #8
   15dac:	mov	r1, #131072	; 0x20000
   15db0:	bl	2389c <__assert_fail@plt+0x10e20>
   15db4:	mov	r5, #1
   15db8:	cmn	r0, #1
   15dbc:	bgt	15dec <__assert_fail@plt+0x3370>
   15dc0:	bl	127d0 <__errno_location@plt>
   15dc4:	ldr	r4, [r0]
   15dc8:	add	r1, sp, #8
   15dcc:	mov	r0, #0
   15dd0:	bl	19d58 <__assert_fail@plt+0x72dc>
   15dd4:	movw	r2, #9967	; 0x26ef
   15dd8:	mov	r3, r0
   15ddc:	mov	r0, #0
   15de0:	mov	r1, r4
   15de4:	movt	r2, #5
   15de8:	bl	12674 <error@plt>
   15dec:	mov	r0, r6
   15df0:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   15df4:	cmp	r0, #0
   15df8:	bne	15e34 <__assert_fail@plt+0x33b8>
   15dfc:	cmp	r5, #0
   15e00:	beq	15ea0 <__assert_fail@plt+0x3424>
   15e04:	bl	2181c <__assert_fail@plt+0xeda0>
   15e08:	cmp	r0, #0
   15e0c:	beq	15e14 <__assert_fail@plt+0x3398>
   15e10:	bl	2183c <__assert_fail@plt+0xedc0>
   15e14:	mov	r0, r8
   15e18:	bl	21078 <__assert_fail@plt+0xe5fc>
   15e1c:	cmp	r0, #0
   15e20:	beq	15ea8 <__assert_fail@plt+0x342c>
   15e24:	bl	127d0 <__errno_location@plt>
   15e28:	mov	r1, #7
   15e2c:	str	r1, [r0]
   15e30:	b	15eb8 <__assert_fail@plt+0x343c>
   15e34:	bl	127d0 <__errno_location@plt>
   15e38:	ldr	r4, [r0]
   15e3c:	movw	r1, #53455	; 0xd0cf
   15e40:	mov	r0, #0
   15e44:	mov	r2, #5
   15e48:	movt	r1, #4
   15e4c:	bl	1253c <dcgettext@plt>
   15e50:	mov	r2, r0
   15e54:	ldr	r0, [r6]
   15e58:	cmn	r0, #1
   15e5c:	bgt	15e84 <__assert_fail@plt+0x3408>
   15e60:	ldr	r0, [r6, #4]
   15e64:	movw	r1, #58175	; 0xe33f
   15e68:	movw	r3, #152	; 0x98
   15e6c:	movt	r1, #4
   15e70:	movt	r3, #5
   15e74:	cmp	r0, #0
   15e78:	moveq	r3, r1
   15e7c:	moveq	r0, r1
   15e80:	b	15e90 <__assert_fail@plt+0x3414>
   15e84:	movw	r3, #58175	; 0xe33f
   15e88:	movt	r3, #4
   15e8c:	mov	r0, r3
   15e90:	str	r0, [sp]
   15e94:	mov	r0, #0
   15e98:	mov	r1, r4
   15e9c:	bl	12674 <error@plt>
   15ea0:	mov	r0, #1
   15ea4:	bl	124ac <_exit@plt>
   15ea8:	ldr	r0, [r8]
   15eac:	mov	r1, r8
   15eb0:	bl	124c4 <execvp@plt>
   15eb4:	bl	127d0 <__errno_location@plt>
   15eb8:	ldr	r1, [r8]
   15ebc:	ldr	r4, [r0]
   15ec0:	mov	r0, #0
   15ec4:	bl	19d58 <__assert_fail@plt+0x72dc>
   15ec8:	movw	r2, #9967	; 0x26ef
   15ecc:	mov	r3, r0
   15ed0:	mov	r0, #0
   15ed4:	mov	r1, r4
   15ed8:	movt	r2, #5
   15edc:	bl	12674 <error@plt>
   15ee0:	mov	r0, #1
   15ee4:	bl	124ac <_exit@plt>
   15ee8:	push	{r4, r5, r6, r7, fp, lr}
   15eec:	add	fp, sp, #16
   15ef0:	movw	r6, #13684	; 0x3574
   15ef4:	mov	r5, r0
   15ef8:	mov	r4, r1
   15efc:	cmp	r1, #0
   15f00:	movt	r6, #6
   15f04:	movwne	r4, #16
   15f08:	ldr	r0, [r6]
   15f0c:	cmp	r0, #0
   15f10:	beq	15f50 <__assert_fail@plt+0x34d4>
   15f14:	mov	r7, #0
   15f18:	ldr	r0, [r6, #4]
   15f1c:	mov	r2, r4
   15f20:	ldr	r1, [r0, r7, lsl #2]
   15f24:	mov	r0, r5
   15f28:	bl	12698 <fnmatch@plt>
   15f2c:	cmp	r0, #0
   15f30:	moveq	r0, #1
   15f34:	popeq	{r4, r5, r6, r7, fp, pc}
   15f38:	ldr	r0, [r6]
   15f3c:	add	r7, r7, #1
   15f40:	cmp	r7, r0
   15f44:	movcs	r0, #0
   15f48:	popcs	{r4, r5, r6, r7, fp, pc}
   15f4c:	b	15f18 <__assert_fail@plt+0x349c>
   15f50:	movw	r1, #54804	; 0xd614
   15f54:	mov	r0, r5
   15f58:	mov	r2, r4
   15f5c:	movt	r1, #4
   15f60:	bl	12698 <fnmatch@plt>
   15f64:	clz	r0, r0
   15f68:	lsr	r0, r0, #5
   15f6c:	pop	{r4, r5, r6, r7, fp, pc}
   15f70:	ldr	r3, [r1, #36]	; 0x24
   15f74:	ldr	r2, [r1, #4]
   15f78:	mov	ip, r0
   15f7c:	cmp	r3, #0
   15f80:	beq	15f94 <__assert_fail@plt+0x3518>
   15f84:	movw	r1, #53498	; 0xd0fa
   15f88:	mov	r0, ip
   15f8c:	movt	r1, #4
   15f90:	b	127c4 <fprintf@plt>
   15f94:	mov	r0, r2
   15f98:	mov	r1, ip
   15f9c:	b	12a10 <fputs@plt>
   15fa0:	movw	r0, #13684	; 0x3574
   15fa4:	movt	r0, #6
   15fa8:	ldr	r0, [r0, #8]
   15fac:	bx	lr
   15fb0:	push	{r4, sl, fp, lr}
   15fb4:	add	fp, sp, #8
   15fb8:	cmp	r0, #0
   15fbc:	beq	1617c <__assert_fail@plt+0x3700>
   15fc0:	mov	r4, r0
   15fc4:	ldr	r0, [r0, #160]	; 0xa0
   15fc8:	cmp	r0, #0
   15fcc:	blne	15fb0 <__assert_fail@plt+0x3534>
   15fd0:	ldr	r0, [r4, #156]	; 0x9c
   15fd4:	cmp	r0, #0
   15fd8:	blne	15fb0 <__assert_fail@plt+0x3534>
   15fdc:	ldr	r0, [r4, #8]
   15fe0:	cmp	r0, #5
   15fe4:	bhi	1619c <__assert_fail@plt+0x3720>
   15fe8:	add	r1, pc, #0
   15fec:	ldr	pc, [r1, r0, lsl #2]
   15ff0:	andeq	r6, r1, r8
   15ff4:	strdeq	r6, [r1], -r4
   15ff8:	andeq	r6, r1, r4, asr #32
   15ffc:	muleq	r1, r8, r0
   16000:			; <UNDEFINED> instruction: 0x000161bc
   16004:	ldrdeq	r6, [r1], -ip
   16008:	ldr	r0, [r4, #160]	; 0xa0
   1600c:	cmp	r0, #0
   16010:	bne	161fc <__assert_fail@plt+0x3780>
   16014:	ldr	r0, [r4, #156]	; 0x9c
   16018:	cmp	r0, #0
   1601c:	vldreq	s0, [r4, #28]
   16020:	popeq	{r4, sl, fp, pc}
   16024:	movw	r0, #53642	; 0xd18a
   16028:	movw	r1, #53514	; 0xd10a
   1602c:	movw	r3, #53521	; 0xd111
   16030:	movw	r2, #1170	; 0x492
   16034:	movt	r0, #4
   16038:	movt	r1, #4
   1603c:	movt	r3, #4
   16040:	bl	12a7c <__assert_fail@plt>
   16044:	ldr	r0, [r4]
   16048:	movw	r1, #18028	; 0x466c
   1604c:	movt	r1, #1
   16050:	cmp	r0, r1
   16054:	bne	1621c <__assert_fail@plt+0x37a0>
   16058:	ldr	r0, [r4, #156]	; 0x9c
   1605c:	cmp	r0, #0
   16060:	ldreq	r0, [r4, #160]	; 0xa0
   16064:	vmoveq.f32	s2, #112	; 0x3f800000  1.0
   16068:	vldreq	s0, [r0, #28]
   1606c:	vsubeq.f32	s0, s2, s0
   16070:	vstreq	s0, [r4, #28]
   16074:	popeq	{r4, sl, fp, pc}
   16078:	movw	r0, #53642	; 0xd18a
   1607c:	movw	r1, #53514	; 0xd10a
   16080:	movw	r3, #53521	; 0xd111
   16084:	movw	r2, #1181	; 0x49d
   16088:	movt	r0, #4
   1608c:	movt	r1, #4
   16090:	movt	r3, #4
   16094:	bl	12a7c <__assert_fail@plt>
   16098:	ldr	r0, [r4]
   1609c:	movw	r1, #15584	; 0x3ce0
   160a0:	movt	r1, #1
   160a4:	cmp	r0, r1
   160a8:	beq	16130 <__assert_fail@plt+0x36b4>
   160ac:	movw	r1, #15976	; 0x3e68
   160b0:	movt	r1, #1
   160b4:	cmp	r0, r1
   160b8:	beq	16158 <__assert_fail@plt+0x36dc>
   160bc:	movw	r1, #18892	; 0x49cc
   160c0:	movt	r1, #1
   160c4:	cmp	r0, r1
   160c8:	bne	1625c <__assert_fail@plt+0x37e0>
   160cc:	ldr	r0, [r4, #160]	; 0xa0
   160d0:	vmov.f32	s0, #112	; 0x3f800000  1.0
   160d4:	vmov.f32	s2, s0
   160d8:	cmp	r0, #0
   160dc:	vldrne	s2, [r0, #28]
   160e0:	ldr	r0, [r4, #156]	; 0x9c
   160e4:	cmp	r0, #0
   160e8:	vldrne	s0, [r0, #28]
   160ec:	vadd.f32	s0, s2, s0
   160f0:	b	1615c <__assert_fail@plt+0x36e0>
   160f4:	ldr	r0, [r4, #160]	; 0xa0
   160f8:	cmp	r0, #0
   160fc:	bne	1623c <__assert_fail@plt+0x37c0>
   16100:	ldr	r0, [r4, #156]	; 0x9c
   16104:	cmp	r0, #0
   16108:	vldreq	s0, [r4, #28]
   1610c:	popeq	{r4, sl, fp, pc}
   16110:	movw	r0, #53642	; 0xd18a
   16114:	movw	r1, #53514	; 0xd10a
   16118:	movw	r3, #53521	; 0xd111
   1611c:	movw	r2, #1175	; 0x497
   16120:	movt	r0, #4
   16124:	movt	r1, #4
   16128:	movt	r3, #4
   1612c:	bl	12a7c <__assert_fail@plt>
   16130:	ldr	r0, [r4, #160]	; 0xa0
   16134:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16138:	vmov.f32	s2, s0
   1613c:	cmp	r0, #0
   16140:	vldrne	s2, [r0, #28]
   16144:	ldr	r0, [r4, #156]	; 0x9c
   16148:	cmp	r0, #0
   1614c:	vldrne	s0, [r0, #28]
   16150:	vmul.f32	s0, s2, s0
   16154:	b	1615c <__assert_fail@plt+0x36e0>
   16158:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1615c:	vldr	s2, [pc, #280]	; 1627c <__assert_fail@plt+0x3800>
   16160:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16164:	vcmpe.f32	s0, s4
   16168:	vmrs	APSR_nzcv, fpscr
   1616c:	vmax.f32	d1, d0, d1
   16170:	vselgt.f32	s0, s4, s2
   16174:	vstr	s0, [r4, #28]
   16178:	pop	{r4, sl, fp, pc}
   1617c:	movw	r0, #53504	; 0xd100
   16180:	movw	r1, #53514	; 0xd10a
   16184:	movw	r3, #53521	; 0xd111
   16188:	movw	r2, #1156	; 0x484
   1618c:	movt	r0, #4
   16190:	movt	r1, #4
   16194:	movt	r3, #4
   16198:	bl	12a7c <__assert_fail@plt>
   1619c:	movw	r0, #55401	; 0xd869
   161a0:	movw	r1, #53514	; 0xd10a
   161a4:	movw	r3, #53521	; 0xd111
   161a8:	mov	r2, #1216	; 0x4c0
   161ac:	movt	r0, #4
   161b0:	movt	r1, #4
   161b4:	movt	r3, #4
   161b8:	bl	12a7c <__assert_fail@plt>
   161bc:	movw	r0, #53596	; 0xd15c
   161c0:	movw	r1, #53514	; 0xd10a
   161c4:	movw	r3, #53521	; 0xd111
   161c8:	movw	r2, #1164	; 0x48c
   161cc:	movt	r0, #4
   161d0:	movt	r1, #4
   161d4:	movt	r3, #4
   161d8:	bl	12a7c <__assert_fail@plt>
   161dc:	movw	r0, #53571	; 0xd143
   161e0:	movw	r1, #53514	; 0xd10a
   161e4:	movw	r3, #53521	; 0xd111
   161e8:	movw	r2, #1163	; 0x48b
   161ec:	movt	r0, #4
   161f0:	movt	r1, #4
   161f4:	movt	r3, #4
   161f8:	bl	12a7c <__assert_fail@plt>
   161fc:	movw	r0, #53620	; 0xd174
   16200:	movw	r1, #53514	; 0xd10a
   16204:	movw	r3, #53521	; 0xd111
   16208:	movw	r2, #1169	; 0x491
   1620c:	movt	r0, #4
   16210:	movt	r1, #4
   16214:	movt	r3, #4
   16218:	bl	12a7c <__assert_fail@plt>
   1621c:	movw	r0, #53663	; 0xd19f
   16220:	movw	r1, #53514	; 0xd10a
   16224:	movw	r3, #53521	; 0xd111
   16228:	movw	r2, #1180	; 0x49c
   1622c:	movt	r0, #4
   16230:	movt	r1, #4
   16234:	movt	r3, #4
   16238:	bl	12a7c <__assert_fail@plt>
   1623c:	movw	r0, #53620	; 0xd174
   16240:	movw	r1, #53514	; 0xd10a
   16244:	movw	r3, #53521	; 0xd111
   16248:	movw	r2, #1174	; 0x496
   1624c:	movt	r0, #4
   16250:	movt	r1, #4
   16254:	movt	r3, #4
   16258:	bl	12a7c <__assert_fail@plt>
   1625c:	movw	r0, #55401	; 0xd869
   16260:	movw	r1, #53514	; 0xd10a
   16264:	movw	r3, #53521	; 0xd111
   16268:	movw	r2, #1204	; 0x4b4
   1626c:	movt	r0, #4
   16270:	movt	r1, #4
   16274:	movt	r3, #4
   16278:	bl	12a7c <__assert_fail@plt>
   1627c:	andeq	r0, r0, r0
   16280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16284:	add	fp, sp, #28
   16288:	sub	sp, sp, #28
   1628c:	mov	r6, r0
   16290:	str	r0, [sp, #24]
   16294:	mov	r4, r1
   16298:	add	r0, r1, r2, lsl #2
   1629c:	movw	r1, #13684	; 0x3574
   162a0:	str	r2, [sp, #16]
   162a4:	movt	r1, #6
   162a8:	cmp	r6, r2
   162ac:	str	r0, [r1, #4]
   162b0:	mov	r0, #0
   162b4:	str	r0, [r1, #12]
   162b8:	ble	162fc <__assert_fail@plt+0x3880>
   162bc:	mov	r5, r2
   162c0:	ldr	r0, [r4, r5, lsl #2]
   162c4:	mov	r1, #1
   162c8:	bl	19484 <__assert_fail@plt+0x6a08>
   162cc:	cmp	r0, #0
   162d0:	bne	162fc <__assert_fail@plt+0x3880>
   162d4:	movw	r0, #13684	; 0x3574
   162d8:	add	r5, r5, #1
   162dc:	movt	r0, #6
   162e0:	cmp	r5, r6
   162e4:	str	r5, [sp, #16]
   162e8:	mov	r1, r0
   162ec:	ldr	r0, [r0]
   162f0:	add	r0, r0, #1
   162f4:	str	r0, [r1]
   162f8:	blt	162c0 <__assert_fail@plt+0x3844>
   162fc:	movw	r5, #227	; 0xe3
   16300:	movt	r5, #5
   16304:	mov	r0, r5
   16308:	bl	1c454 <__assert_fail@plt+0x99d8>
   1630c:	mov	r6, r0
   16310:	movw	r0, #55481	; 0xd8b9
   16314:	movt	r0, #4
   16318:	bl	1c454 <__assert_fail@plt+0x99d8>
   1631c:	mov	r7, r0
   16320:	movw	r0, #53992	; 0xd2e8
   16324:	movt	r0, #4
   16328:	bl	1c454 <__assert_fail@plt+0x99d8>
   1632c:	cmp	r6, #0
   16330:	beq	167f0 <__assert_fail@plt+0x3d74>
   16334:	cmp	r7, #0
   16338:	beq	16810 <__assert_fail@plt+0x3d94>
   1633c:	cmp	r0, #0
   16340:	str	r7, [sp, #8]
   16344:	str	r0, [sp, #12]
   16348:	beq	16830 <__assert_fail@plt+0x3db4>
   1634c:	add	r2, sp, #24
   16350:	mov	r0, r6
   16354:	mov	r1, r4
   16358:	bl	1c60c <__assert_fail@plt+0x9b90>
   1635c:	movw	r0, #13684	; 0x3574
   16360:	movt	r0, #6
   16364:	ldr	r2, [r0, #16]
   16368:	str	r5, [r2, #4]
   1636c:	mov	r5, r0
   16370:	ldr	r3, [r0, #12]
   16374:	mov	r0, #1
   16378:	strb	r0, [r3, #33]	; 0x21
   1637c:	mov	r0, r4
   16380:	ldr	r1, [sp, #24]
   16384:	bl	1c43c <__assert_fail@plt+0x99c0>
   16388:	ldr	r0, [r5, #16]
   1638c:	bl	15538 <__assert_fail@plt+0x2abc>
   16390:	ldr	r1, [sp, #24]
   16394:	ldr	r0, [sp, #16]
   16398:	cmp	r0, r1
   1639c:	bge	16454 <__assert_fail@plt+0x39d8>
   163a0:	movw	r9, #15936	; 0x3e40
   163a4:	mov	sl, #0
   163a8:	add	r7, sp, #16
   163ac:	movt	r9, #6
   163b0:	strb	sl, [r9, #40]	; 0x28
   163b4:	mov	r1, #0
   163b8:	ldr	r0, [r4, r0, lsl #2]
   163bc:	bl	19484 <__assert_fail@plt+0x6a08>
   163c0:	cmp	r0, #0
   163c4:	beq	166e0 <__assert_fail@plt+0x3c64>
   163c8:	ldr	r0, [sp, #16]
   163cc:	ldr	r6, [r4, r0, lsl #2]
   163d0:	mov	r0, r6
   163d4:	bl	1c454 <__assert_fail@plt+0x99d8>
   163d8:	cmp	r0, #0
   163dc:	beq	1677c <__assert_fail@plt+0x3d00>
   163e0:	mov	r5, r0
   163e4:	ldr	r0, [r0]
   163e8:	ldr	r8, [sp, #16]
   163ec:	mov	r1, r4
   163f0:	mov	r2, r7
   163f4:	cmp	r0, #4
   163f8:	mov	r0, r5
   163fc:	addne	r8, r8, #1
   16400:	strne	r8, [sp, #16]
   16404:	ldr	r3, [r5, #8]
   16408:	blx	r3
   1640c:	cmp	r0, #0
   16410:	beq	16760 <__assert_fail@plt+0x3ce4>
   16414:	movw	r5, #13684	; 0x3574
   16418:	movt	r5, #6
   1641c:	ldr	r0, [r5, #16]
   16420:	str	r6, [r0, #4]
   16424:	ldr	r1, [sp, #16]
   16428:	cmp	r1, r8
   1642c:	streq	sl, [r0, #36]	; 0x24
   16430:	ldrne	r1, [r4, r8, lsl #2]
   16434:	strne	r1, [r0, #36]	; 0x24
   16438:	bl	15538 <__assert_fail@plt+0x2abc>
   1643c:	ldr	r0, [r5, #12]
   16440:	bl	15538 <__assert_fail@plt+0x2abc>
   16444:	ldr	r1, [sp, #24]
   16448:	ldr	r0, [sp, #16]
   1644c:	cmp	r0, r1
   16450:	blt	163b0 <__assert_fail@plt+0x3934>
   16454:	ldr	r3, [r5, #12]
   16458:	ldr	r2, [r5, #16]
   1645c:	mov	r0, r4
   16460:	bl	1c450 <__assert_fail@plt+0x99d4>
   16464:	ldr	r0, [r5, #12]
   16468:	ldr	r1, [r0, #152]	; 0x98
   1646c:	cmp	r1, #0
   16470:	beq	164e8 <__assert_fail@plt+0x3a6c>
   16474:	mov	r0, r1
   16478:	bl	19458 <__assert_fail@plt+0x69dc>
   1647c:	cmp	r0, #0
   16480:	beq	16528 <__assert_fail@plt+0x3aac>
   16484:	ldr	r0, [sp, #8]
   16488:	mov	r7, r5
   1648c:	add	r5, sp, #24
   16490:	mov	r1, r4
   16494:	mov	r2, r5
   16498:	bl	1c5dc <__assert_fail@plt+0x9b60>
   1649c:	ldr	r0, [r7, #16]
   164a0:	movw	r1, #55481	; 0xd8b9
   164a4:	mov	r6, #1
   164a8:	movt	r1, #4
   164ac:	strb	r6, [r0, #33]	; 0x21
   164b0:	str	r1, [r0, #4]
   164b4:	bl	15538 <__assert_fail@plt+0x2abc>
   164b8:	ldr	r0, [sp, #12]
   164bc:	mov	r1, r4
   164c0:	mov	r2, r5
   164c4:	bl	1c640 <__assert_fail@plt+0x9bc4>
   164c8:	ldr	r0, [r7, #16]
   164cc:	movw	r1, #53991	; 0xd2e7
   164d0:	movt	r1, #4
   164d4:	strb	r6, [r0, #33]	; 0x21
   164d8:	str	r1, [r0, #4]
   164dc:	bl	15538 <__assert_fail@plt+0x2abc>
   164e0:	ldr	r0, [r7, #12]
   164e4:	b	16520 <__assert_fail@plt+0x3aa4>
   164e8:	str	r1, [r5, #12]
   164ec:	str	r1, [r5, #16]
   164f0:	str	r0, [sp, #20]
   164f4:	bl	32c40 <__assert_fail@plt+0x201c4>
   164f8:	ldr	r0, [sp, #12]
   164fc:	add	r2, sp, #24
   16500:	mov	r1, r4
   16504:	bl	1c640 <__assert_fail@plt+0x9bc4>
   16508:	ldr	r0, [r5, #16]
   1650c:	movw	r1, #53991	; 0xd2e7
   16510:	movt	r1, #4
   16514:	str	r1, [r0, #4]
   16518:	bl	15538 <__assert_fail@plt+0x2abc>
   1651c:	ldr	r0, [r5, #12]
   16520:	bl	15538 <__assert_fail@plt+0x2abc>
   16524:	b	16544 <__assert_fail@plt+0x3ac8>
   16528:	ldr	r0, [r5, #12]
   1652c:	str	r0, [sp, #20]
   16530:	ldr	r0, [r0, #152]	; 0x98
   16534:	str	r0, [r5, #12]
   16538:	bl	15538 <__assert_fail@plt+0x2abc>
   1653c:	ldr	r0, [sp, #20]
   16540:	bl	32c40 <__assert_fail@plt+0x201c4>
   16544:	movw	r5, #15980	; 0x3e6c
   16548:	movt	r5, #6
   1654c:	ldrb	r0, [r5, #44]	; 0x2c
   16550:	tst	r0, #9
   16554:	bne	16600 <__assert_fail@plt+0x3b84>
   16558:	movw	r0, #13684	; 0x3574
   1655c:	movt	r0, #6
   16560:	mov	r4, r0
   16564:	ldr	r0, [r0, #12]
   16568:	bl	1c1b8 <__assert_fail@plt+0x973c>
   1656c:	ldr	r0, [r4, #12]
   16570:	bl	15538 <__assert_fail@plt+0x2abc>
   16574:	ldr	r0, [r4, #12]
   16578:	mov	r1, #0
   1657c:	mov	r2, #0
   16580:	str	r0, [sp, #20]
   16584:	add	r0, sp, #20
   16588:	bl	168cc <__assert_fail@plt+0x3e50>
   1658c:	str	r0, [r4, #8]
   16590:	bl	15fb0 <__assert_fail@plt+0x3534>
   16594:	ldr	r0, [sp, #20]
   16598:	cmp	r0, #0
   1659c:	bne	16850 <__assert_fail@plt+0x3dd4>
   165a0:	ldrb	r0, [r5, #44]	; 0x2c
   165a4:	tst	r0, #9
   165a8:	bne	16638 <__assert_fail@plt+0x3bbc>
   165ac:	movw	r6, #13684	; 0x3574
   165b0:	movt	r6, #6
   165b4:	mov	r4, r6
   165b8:	ldr	r0, [r4, #8]!
   165bc:	bl	16f9c <__assert_fail@plt+0x4520>
   165c0:	mov	r0, r4
   165c4:	bl	171f4 <__assert_fail@plt+0x4778>
   165c8:	ldr	r0, [r4]
   165cc:	mov	r1, #1
   165d0:	bl	17954 <__assert_fail@plt+0x4ed8>
   165d4:	ldr	r0, [r4]
   165d8:	bl	179f8 <__assert_fail@plt+0x4f7c>
   165dc:	ldr	r0, [r4]
   165e0:	mov	r1, #1
   165e4:	bl	17954 <__assert_fail@plt+0x4ed8>
   165e8:	ldrb	r0, [r5, #44]	; 0x2c
   165ec:	tst	r0, #9
   165f0:	bne	16674 <__assert_fail@plt+0x3bf8>
   165f4:	ldr	r0, [r6, #8]
   165f8:	sub	sp, fp, #28
   165fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16600:	movw	r4, #13640	; 0x3548
   16604:	movw	r0, #53998	; 0xd2ee
   16608:	mov	r1, #16
   1660c:	mov	r2, #1
   16610:	movt	r4, #6
   16614:	movt	r0, #4
   16618:	ldr	r3, [r4]
   1661c:	bl	125f0 <fwrite@plt>
   16620:	movw	r1, #13684	; 0x3574
   16624:	ldr	r0, [r4]
   16628:	movt	r1, #6
   1662c:	ldr	r1, [r1, #12]
   16630:	bl	15234 <__assert_fail@plt+0x27b8>
   16634:	b	16558 <__assert_fail@plt+0x3adc>
   16638:	movw	r4, #13640	; 0x3548
   1663c:	movw	r0, #55494	; 0xd8c6
   16640:	mov	r1, #11
   16644:	mov	r2, #1
   16648:	movt	r4, #6
   1664c:	movt	r0, #4
   16650:	ldr	r3, [r4]
   16654:	bl	125f0 <fwrite@plt>
   16658:	movw	r1, #13684	; 0x3574
   1665c:	ldr	r0, [r4]
   16660:	mov	r2, #0
   16664:	movt	r1, #6
   16668:	ldr	r1, [r1, #8]
   1666c:	bl	16b9c <__assert_fail@plt+0x4120>
   16670:	b	165ac <__assert_fail@plt+0x3b30>
   16674:	movw	r4, #13640	; 0x3548
   16678:	movw	r0, #54074	; 0xd33a
   1667c:	mov	r1, #21
   16680:	mov	r2, #1
   16684:	movt	r4, #6
   16688:	movt	r0, #4
   1668c:	ldr	r3, [r4]
   16690:	bl	125f0 <fwrite@plt>
   16694:	ldr	r0, [r4]
   16698:	ldr	r1, [r6, #8]
   1669c:	mov	r2, #0
   166a0:	bl	16b9c <__assert_fail@plt+0x4120>
   166a4:	ldr	r3, [r4]
   166a8:	movw	r0, #54096	; 0xd350
   166ac:	mov	r1, #24
   166b0:	mov	r2, #1
   166b4:	movt	r0, #4
   166b8:	bl	125f0 <fwrite@plt>
   166bc:	ldr	r0, [r4]
   166c0:	ldr	r1, [r6, #8]
   166c4:	bl	152f0 <__assert_fail@plt+0x2874>
   166c8:	ldr	r1, [r4]
   166cc:	mov	r0, #10
   166d0:	bl	12914 <fputc@plt>
   166d4:	ldr	r0, [r6, #8]
   166d8:	sub	sp, fp, #28
   166dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166e0:	movw	r1, #53806	; 0xd22e
   166e4:	mov	r0, #0
   166e8:	mov	r2, #5
   166ec:	movt	r1, #4
   166f0:	bl	1253c <dcgettext@plt>
   166f4:	mov	r2, r0
   166f8:	ldr	r0, [sp, #16]
   166fc:	mov	r1, #0
   16700:	ldr	r3, [r4, r0, lsl #2]
   16704:	mov	r0, #0
   16708:	bl	12674 <error@plt>
   1670c:	ldr	r0, [sp, #16]
   16710:	mov	r1, #0
   16714:	ldr	r0, [r4, r0, lsl #2]
   16718:	bl	12878 <access@plt>
   1671c:	cmp	r0, #0
   16720:	bne	16758 <__assert_fail@plt+0x3cdc>
   16724:	movw	r1, #53842	; 0xd252
   16728:	mov	r0, #0
   1672c:	mov	r2, #5
   16730:	movt	r1, #4
   16734:	bl	1253c <dcgettext@plt>
   16738:	mov	r2, r0
   1673c:	movw	r0, #13684	; 0x3574
   16740:	mov	r1, #0
   16744:	movt	r0, #6
   16748:	ldr	r0, [r0, #16]
   1674c:	ldr	r3, [r0, #4]
   16750:	mov	r0, #0
   16754:	bl	12674 <error@plt>
   16758:	mov	r0, #1
   1675c:	bl	12758 <exit@plt>
   16760:	ldr	r0, [sp, #16]
   16764:	ldr	r1, [r4, r0, lsl #2]
   16768:	cmp	r1, #0
   1676c:	bne	167a4 <__assert_fail@plt+0x3d28>
   16770:	movw	r1, #53966	; 0xd2ce
   16774:	movt	r1, #4
   16778:	b	16784 <__assert_fail@plt+0x3d08>
   1677c:	movw	r1, #53890	; 0xd282
   16780:	movt	r1, #4
   16784:	mov	r0, #0
   16788:	mov	r2, #5
   1678c:	bl	1253c <dcgettext@plt>
   16790:	mov	r2, r0
   16794:	mov	r0, #1
   16798:	mov	r1, #0
   1679c:	mov	r3, r6
   167a0:	bl	12674 <error@plt>
   167a4:	cmp	r0, r8
   167a8:	ldreq	r0, [r5]
   167ac:	cmpeq	r0, #4
   167b0:	beq	167e4 <__assert_fail@plt+0x3d68>
   167b4:	movw	r1, #53936	; 0xd2b0
   167b8:	mov	r0, #0
   167bc:	mov	r2, #5
   167c0:	movt	r1, #4
   167c4:	bl	1253c <dcgettext@plt>
   167c8:	mov	r2, r0
   167cc:	ldr	r0, [sp, #16]
   167d0:	ldr	r3, [r4, r0, lsl #2]
   167d4:	str	r6, [sp]
   167d8:	mov	r0, #1
   167dc:	mov	r1, #0
   167e0:	bl	12674 <error@plt>
   167e4:	movw	r1, #53913	; 0xd299
   167e8:	movt	r1, #4
   167ec:	b	16784 <__assert_fail@plt+0x3d08>
   167f0:	movw	r0, #53688	; 0xd1b8
   167f4:	movw	r1, #53514	; 0xd10a
   167f8:	movw	r3, #53707	; 0xd1cb
   167fc:	movw	r2, #1270	; 0x4f6
   16800:	movt	r0, #4
   16804:	movt	r1, #4
   16808:	movt	r3, #4
   1680c:	bl	12a7c <__assert_fail@plt>
   16810:	movw	r0, #53766	; 0xd206
   16814:	movw	r1, #53514	; 0xd10a
   16818:	movw	r3, #53707	; 0xd1cb
   1681c:	movw	r2, #1271	; 0x4f7
   16820:	movt	r0, #4
   16824:	movt	r1, #4
   16828:	movt	r3, #4
   1682c:	bl	12a7c <__assert_fail@plt>
   16830:	movw	r0, #53786	; 0xd21a
   16834:	movw	r1, #53514	; 0xd10a
   16838:	movw	r3, #53707	; 0xd1cb
   1683c:	movw	r2, #1272	; 0x4f8
   16840:	movt	r0, #4
   16844:	movt	r1, #4
   16848:	movt	r3, #4
   1684c:	bl	12a7c <__assert_fail@plt>
   16850:	ldr	r1, [r0]
   16854:	movw	r2, #15816	; 0x3dc8
   16858:	movt	r2, #1
   1685c:	cmp	r1, r2
   16860:	bne	16870 <__assert_fail@plt+0x3df4>
   16864:	movw	r1, #54904	; 0xd678
   16868:	movt	r1, #4
   1686c:	b	16884 <__assert_fail@plt+0x3e08>
   16870:	ldr	r0, [r0, #4]
   16874:	cmp	r0, #0
   16878:	bne	168a0 <__assert_fail@plt+0x3e24>
   1687c:	movw	r1, #54047	; 0xd31f
   16880:	movt	r1, #4
   16884:	mov	r0, #0
   16888:	mov	r2, #5
   1688c:	bl	1253c <dcgettext@plt>
   16890:	mov	r2, r0
   16894:	mov	r0, #1
   16898:	mov	r1, #0
   1689c:	bl	12674 <error@plt>
   168a0:	movw	r1, #54015	; 0xd2ff
   168a4:	mov	r0, #0
   168a8:	mov	r2, #5
   168ac:	movt	r1, #4
   168b0:	bl	1253c <dcgettext@plt>
   168b4:	mov	r2, r0
   168b8:	ldr	r0, [sp, #20]
   168bc:	ldr	r3, [r0, #4]
   168c0:	mov	r0, #1
   168c4:	mov	r1, #0
   168c8:	bl	12674 <error@plt>
   168cc:	push	{r4, r5, r6, r7, fp, lr}
   168d0:	add	fp, sp, #16
   168d4:	ldr	r4, [r0]
   168d8:	cmp	r4, #0
   168dc:	beq	169d4 <__assert_fail@plt+0x3f58>
   168e0:	mov	r5, r0
   168e4:	ldr	r0, [r4, #8]
   168e8:	cmp	r0, #5
   168ec:	bhi	16a64 <__assert_fail@plt+0x3fe8>
   168f0:	mov	r6, r1
   168f4:	add	r1, pc, #0
   168f8:	ldr	pc, [r1, r0, lsl #2]
   168fc:	ldrdeq	r6, [r1], -r4
   16900:	andeq	r6, r1, r4, lsl r9
   16904:	andeq	r6, r1, r8, lsr #18
   16908:	andeq	r6, r1, r8, lsl #21
   1690c:	strdeq	r6, [r1], -r8
   16910:	andeq	r6, r1, r0, ror sl
   16914:	ldr	r2, [r4, #152]	; 0x98
   16918:	str	r2, [r5]
   1691c:	cmp	r2, #0
   16920:	bne	16950 <__assert_fail@plt+0x3ed4>
   16924:	b	16a5c <__assert_fail@plt+0x3fe0>
   16928:	ldr	r0, [r4, #152]	; 0x98
   1692c:	mov	r1, #4
   16930:	mov	r2, r4
   16934:	str	r0, [r5]
   16938:	mov	r0, r5
   1693c:	bl	168cc <__assert_fail@plt+0x3e50>
   16940:	str	r0, [r4, #160]	; 0xa0
   16944:	ldr	r2, [r5]
   16948:	cmp	r2, #0
   1694c:	beq	16a5c <__assert_fail@plt+0x3fe0>
   16950:	ldr	r0, [r2, #12]
   16954:	cmp	r0, r6
   16958:	ble	16a5c <__assert_fail@plt+0x3fe0>
   1695c:	ldr	r0, [r2, #8]
   16960:	cmp	r0, #5
   16964:	beq	169d4 <__assert_fail@plt+0x3f58>
   16968:	ldr	r0, [r2, #12]
   1696c:	cmp	r0, r6
   16970:	ble	169cc <__assert_fail@plt+0x3f50>
   16974:	ldr	r0, [r2, #8]
   16978:	cmp	r0, #5
   1697c:	bhi	16ac8 <__assert_fail@plt+0x404c>
   16980:	add	r1, pc, #0
   16984:	ldr	pc, [r1, r0, lsl #2]
   16988:	ldrdeq	r6, [r1], -r4
   1698c:	ldrdeq	r6, [r1], -r4
   16990:	ldrdeq	r6, [r1], -r4
   16994:	andeq	r6, r1, r0, lsr #19
   16998:	ldrdeq	r6, [r1], -r4
   1699c:	andeq	r6, r1, ip, asr #19
   169a0:	str	r4, [r2, #156]	; 0x9c
   169a4:	ldr	r4, [r5]
   169a8:	ldr	r0, [r4, #152]	; 0x98
   169ac:	str	r0, [r5]
   169b0:	mov	r0, r5
   169b4:	ldrsh	r1, [r4, #12]
   169b8:	bl	168cc <__assert_fail@plt+0x3e50>
   169bc:	str	r0, [r4, #160]	; 0xa0
   169c0:	ldr	r2, [r5]
   169c4:	cmp	r2, #0
   169c8:	bne	16968 <__assert_fail@plt+0x3eec>
   169cc:	cmp	r4, #0
   169d0:	bne	16a5c <__assert_fail@plt+0x3fe0>
   169d4:	movw	r1, #54633	; 0xd569
   169d8:	movt	r1, #4
   169dc:	mov	r0, #0
   169e0:	mov	r2, #5
   169e4:	bl	1253c <dcgettext@plt>
   169e8:	mov	r2, r0
   169ec:	mov	r0, #1
   169f0:	mov	r1, #0
   169f4:	bl	12674 <error@plt>
   169f8:	ldr	r0, [r4, #152]	; 0x98
   169fc:	cmp	r0, #0
   16a00:	beq	16a94 <__assert_fail@plt+0x4018>
   16a04:	ldrb	r1, [r0, #33]	; 0x21
   16a08:	cmp	r1, #0
   16a0c:	bne	16a94 <__assert_fail@plt+0x4018>
   16a10:	str	r0, [r5]
   16a14:	ldr	r0, [r0, #8]
   16a18:	cmp	r0, #5
   16a1c:	beq	16b1c <__assert_fail@plt+0x40a0>
   16a20:	mov	r0, r5
   16a24:	mov	r1, #0
   16a28:	mov	r2, r4
   16a2c:	bl	168cc <__assert_fail@plt+0x3e50>
   16a30:	mov	r4, r0
   16a34:	ldr	r0, [r5]
   16a38:	cmp	r0, #0
   16a3c:	beq	16abc <__assert_fail@plt+0x4040>
   16a40:	ldr	r1, [r0, #8]
   16a44:	cmp	r1, #5
   16a48:	bne	16abc <__assert_fail@plt+0x4040>
   16a4c:	ldr	r2, [r0, #152]	; 0x98
   16a50:	str	r2, [r5]
   16a54:	cmp	r2, #0
   16a58:	bne	16950 <__assert_fail@plt+0x3ed4>
   16a5c:	mov	r0, r4
   16a60:	pop	{r4, r5, r6, r7, fp, pc}
   16a64:	movw	r1, #55172	; 0xd784
   16a68:	movt	r1, #4
   16a6c:	b	169dc <__assert_fail@plt+0x3f60>
   16a70:	mov	r7, r2
   16a74:	cmp	r2, #0
   16a78:	bne	16af4 <__assert_fail@plt+0x4078>
   16a7c:	movw	r1, #54733	; 0xd5cd
   16a80:	movt	r1, #4
   16a84:	b	16a9c <__assert_fail@plt+0x4020>
   16a88:	movw	r1, #54652	; 0xd57c
   16a8c:	movt	r1, #4
   16a90:	b	16a9c <__assert_fail@plt+0x4020>
   16a94:	movw	r1, #54926	; 0xd68e
   16a98:	movt	r1, #4
   16a9c:	mov	r0, #0
   16aa0:	mov	r2, #5
   16aa4:	bl	1253c <dcgettext@plt>
   16aa8:	ldr	r3, [r4, #4]
   16aac:	mov	r2, r0
   16ab0:	mov	r0, #1
   16ab4:	mov	r1, #0
   16ab8:	bl	12674 <error@plt>
   16abc:	movw	r1, #55091	; 0xd733
   16ac0:	movt	r1, #4
   16ac4:	b	169dc <__assert_fail@plt+0x3f60>
   16ac8:	movw	r1, #55205	; 0xd7a5
   16acc:	mov	r0, #0
   16ad0:	mov	r2, #5
   16ad4:	movt	r1, #4
   16ad8:	bl	1253c <dcgettext@plt>
   16adc:	mov	r2, r0
   16ae0:	ldr	r0, [r5]
   16ae4:	ldr	r3, [r0, #8]
   16ae8:	mov	r0, #1
   16aec:	mov	r1, #0
   16af0:	bl	12674 <error@plt>
   16af4:	ldr	r1, [r7, #8]
   16af8:	ldrb	r0, [r4, #33]	; 0x21
   16afc:	bic	r1, r1, #1
   16b00:	cmp	r1, #2
   16b04:	bne	16b34 <__assert_fail@plt+0x40b8>
   16b08:	cmp	r0, #0
   16b0c:	bne	16b48 <__assert_fail@plt+0x40cc>
   16b10:	movw	r1, #54806	; 0xd616
   16b14:	movt	r1, #4
   16b18:	b	16b50 <__assert_fail@plt+0x40d4>
   16b1c:	ldrb	r0, [r4, #33]	; 0x21
   16b20:	cmp	r0, #0
   16b24:	bne	16b70 <__assert_fail@plt+0x40f4>
   16b28:	movw	r1, #55036	; 0xd6fc
   16b2c:	movt	r1, #4
   16b30:	b	169dc <__assert_fail@plt+0x3f60>
   16b34:	cmp	r0, #0
   16b38:	bne	16b48 <__assert_fail@plt+0x40cc>
   16b3c:	movw	r1, #54884	; 0xd664
   16b40:	movt	r1, #4
   16b44:	b	169dc <__assert_fail@plt+0x3f60>
   16b48:	movw	r1, #54850	; 0xd642
   16b4c:	movt	r1, #4
   16b50:	mov	r0, #0
   16b54:	mov	r2, #5
   16b58:	bl	1253c <dcgettext@plt>
   16b5c:	ldr	r3, [r7, #4]
   16b60:	mov	r2, r0
   16b64:	mov	r0, #1
   16b68:	mov	r1, #0
   16b6c:	bl	12674 <error@plt>
   16b70:	movw	r1, #54733	; 0xd5cd
   16b74:	mov	r0, #0
   16b78:	mov	r2, #5
   16b7c:	movt	r1, #4
   16b80:	bl	1253c <dcgettext@plt>
   16b84:	mov	r2, r0
   16b88:	ldr	r0, [r5]
   16b8c:	ldr	r3, [r0, #4]
   16b90:	mov	r0, #1
   16b94:	mov	r1, #0
   16b98:	bl	12674 <error@plt>
   16b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ba0:	add	fp, sp, #28
   16ba4:	sub	sp, sp, #12
   16ba8:	cmp	r1, #0
   16bac:	beq	16f64 <__assert_fail@plt+0x44e8>
   16bb0:	movw	r7, #54477	; 0xd4cd
   16bb4:	movw	r9, #12948	; 0x3294
   16bb8:	mov	r5, r2
   16bbc:	mov	sl, r1
   16bc0:	mov	r4, r0
   16bc4:	movt	r7, #4
   16bc8:	movt	r9, #6
   16bcc:	cmp	r5, #1
   16bd0:	blt	16bf8 <__assert_fail@plt+0x417c>
   16bd4:	mov	r6, #0
   16bd8:	mov	r0, r7
   16bdc:	mov	r1, #4
   16be0:	mov	r2, #1
   16be4:	mov	r3, r4
   16be8:	bl	125f0 <fwrite@plt>
   16bec:	add	r6, r6, #1
   16bf0:	cmp	r5, r6
   16bf4:	bne	16bd8 <__assert_fail@plt+0x415c>
   16bf8:	movw	r0, #54482	; 0xd4d2
   16bfc:	mov	r1, #6
   16c00:	mov	r2, #1
   16c04:	mov	r3, r4
   16c08:	movt	r0, #4
   16c0c:	bl	125f0 <fwrite@plt>
   16c10:	ldr	r3, [sl, #36]	; 0x24
   16c14:	ldr	r2, [sl, #4]
   16c18:	cmp	r3, #0
   16c1c:	beq	16c34 <__assert_fail@plt+0x41b8>
   16c20:	movw	r1, #53498	; 0xd0fa
   16c24:	mov	r0, r4
   16c28:	movt	r1, #4
   16c2c:	bl	127c4 <fprintf@plt>
   16c30:	b	16c40 <__assert_fail@plt+0x41c4>
   16c34:	mov	r0, r2
   16c38:	mov	r1, r4
   16c3c:	bl	12a10 <fputs@plt>
   16c40:	ldrh	r0, [sl, #8]
   16c44:	movw	r2, #56192	; 0xdb80
   16c48:	mov	r1, #6
   16c4c:	movw	r6, #58175	; 0xe33f
   16c50:	movt	r2, #4
   16c54:	movt	r6, #4
   16c58:	cmp	r0, #6
   16c5c:	movcs	r0, r1
   16c60:	add	r0, r2, r0, lsl #3
   16c64:	ldr	r2, [r0, #4]
   16c68:	ldrh	r0, [sl, #12]
   16c6c:	cmp	r0, #6
   16c70:	movcs	r0, r1
   16c74:	movw	r1, #56248	; 0xdbb8
   16c78:	movt	r1, #4
   16c7c:	add	r0, r1, r0, lsl #3
   16c80:	movw	r1, #54489	; 0xd4d9
   16c84:	ldr	r3, [r0, #4]
   16c88:	mov	r0, r4
   16c8c:	movt	r1, #4
   16c90:	bl	127c4 <fprintf@plt>
   16c94:	ldr	r0, [sl, #24]
   16c98:	ldr	r2, [r9]
   16c9c:	mov	r1, #0
   16ca0:	cmp	r2, r0
   16ca4:	beq	16d50 <__assert_fail@plt+0x42d4>
   16ca8:	ldr	r2, [r9, #8]
   16cac:	mov	r1, #1
   16cb0:	cmp	r2, r0
   16cb4:	beq	16d50 <__assert_fail@plt+0x42d4>
   16cb8:	ldr	r2, [r9, #16]
   16cbc:	mov	r1, #2
   16cc0:	cmp	r2, r0
   16cc4:	beq	16d50 <__assert_fail@plt+0x42d4>
   16cc8:	ldr	r2, [r9, #24]
   16ccc:	mov	r1, #3
   16cd0:	cmp	r2, r0
   16cd4:	beq	16d50 <__assert_fail@plt+0x42d4>
   16cd8:	ldr	r2, [r9, #32]
   16cdc:	mov	r1, #4
   16ce0:	cmp	r2, r0
   16ce4:	beq	16d50 <__assert_fail@plt+0x42d4>
   16ce8:	ldr	r2, [r9, #40]	; 0x28
   16cec:	mov	r1, #5
   16cf0:	cmp	r2, r0
   16cf4:	beq	16d50 <__assert_fail@plt+0x42d4>
   16cf8:	ldr	r2, [r9, #48]	; 0x30
   16cfc:	mov	r1, #6
   16d00:	cmp	r2, r0
   16d04:	beq	16d50 <__assert_fail@plt+0x42d4>
   16d08:	ldr	r2, [r9, #56]	; 0x38
   16d0c:	mov	r1, #7
   16d10:	cmp	r2, r0
   16d14:	beq	16d50 <__assert_fail@plt+0x42d4>
   16d18:	ldr	r2, [r9, #64]	; 0x40
   16d1c:	mov	r1, #8
   16d20:	cmp	r2, r0
   16d24:	beq	16d50 <__assert_fail@plt+0x42d4>
   16d28:	ldr	r2, [r9, #72]	; 0x48
   16d2c:	mov	r1, #9
   16d30:	cmp	r2, r0
   16d34:	beq	16d50 <__assert_fail@plt+0x42d4>
   16d38:	ldr	r2, [r9, #80]	; 0x50
   16d3c:	mov	r1, #10
   16d40:	cmp	r2, r0
   16d44:	movw	r2, #56156	; 0xdb5c
   16d48:	movt	r2, #4
   16d4c:	bne	16d58 <__assert_fail@plt+0x42dc>
   16d50:	add	r0, r9, r1, lsl #3
   16d54:	ldr	r2, [r0, #4]
   16d58:	ldrb	r0, [sl, #16]
   16d5c:	vldr	s0, [sl, #28]
   16d60:	movw	r1, #54555	; 0xd51b
   16d64:	movt	r1, #4
   16d68:	cmp	r0, #0
   16d6c:	mov	r0, r6
   16d70:	vcvt.f64.f32	d16, s0
   16d74:	moveq	r0, r1
   16d78:	movw	r1, #54507	; 0xd4eb
   16d7c:	vstr	d16, [sp]
   16d80:	str	r0, [sp, #8]
   16d84:	mov	r0, r4
   16d88:	movt	r1, #4
   16d8c:	bl	127c4 <fprintf@plt>
   16d90:	ldrb	r0, [sl, #18]
   16d94:	cmp	r0, #0
   16d98:	bne	16db4 <__assert_fail@plt+0x4338>
   16d9c:	ldrb	r0, [sl, #19]
   16da0:	cmp	r0, #0
   16da4:	bne	16db4 <__assert_fail@plt+0x4338>
   16da8:	ldrb	r0, [sl, #20]
   16dac:	cmp	r0, #0
   16db0:	beq	16e50 <__assert_fail@plt+0x43d4>
   16db4:	movw	r0, #54559	; 0xd51f
   16db8:	mov	r1, #6
   16dbc:	mov	r2, #1
   16dc0:	mov	r3, r4
   16dc4:	movt	r0, #4
   16dc8:	bl	125f0 <fwrite@plt>
   16dcc:	ldrb	r0, [sl, #18]
   16dd0:	cmp	r0, #0
   16dd4:	beq	16f50 <__assert_fail@plt+0x44d4>
   16dd8:	movw	r0, #62308	; 0xf364
   16ddc:	mov	r1, #4
   16de0:	mov	r2, #1
   16de4:	mov	r3, r4
   16de8:	mov	r8, #1
   16dec:	movt	r0, #4
   16df0:	bl	125f0 <fwrite@plt>
   16df4:	ldrb	r0, [sl, #20]
   16df8:	cmp	r0, #0
   16dfc:	beq	16e24 <__assert_fail@plt+0x43a8>
   16e00:	movw	r2, #54574	; 0xd52e
   16e04:	movw	r1, #54566	; 0xd526
   16e08:	cmp	r8, #0
   16e0c:	mov	r0, r4
   16e10:	movt	r2, #4
   16e14:	movt	r1, #4
   16e18:	moveq	r2, r6
   16e1c:	bl	127c4 <fprintf@plt>
   16e20:	mov	r8, #1
   16e24:	ldrb	r0, [sl, #19]
   16e28:	cmp	r0, #0
   16e2c:	beq	16e50 <__assert_fail@plt+0x43d4>
   16e30:	movw	r2, #54574	; 0xd52e
   16e34:	movw	r1, #54576	; 0xd530
   16e38:	cmp	r8, #0
   16e3c:	mov	r0, r4
   16e40:	movt	r2, #4
   16e44:	movt	r1, #4
   16e48:	moveq	r2, r6
   16e4c:	bl	127c4 <fprintf@plt>
   16e50:	mov	r0, #10
   16e54:	mov	r1, r4
   16e58:	bl	12914 <fputc@plt>
   16e5c:	cmp	r5, #1
   16e60:	blt	16e88 <__assert_fail@plt+0x440c>
   16e64:	mov	r6, #0
   16e68:	mov	r0, r7
   16e6c:	mov	r1, #4
   16e70:	mov	r2, #1
   16e74:	mov	r3, r4
   16e78:	bl	125f0 <fwrite@plt>
   16e7c:	add	r6, r6, #1
   16e80:	cmp	r5, r6
   16e84:	bne	16e68 <__assert_fail@plt+0x43ec>
   16e88:	ldr	r0, [sl, #156]	; 0x9c
   16e8c:	cmp	r0, #0
   16e90:	beq	16ec8 <__assert_fail@plt+0x444c>
   16e94:	movw	r0, #54597	; 0xd545
   16e98:	mov	r1, #6
   16e9c:	mov	r2, #1
   16ea0:	mov	r3, r4
   16ea4:	movt	r0, #4
   16ea8:	bl	125f0 <fwrite@plt>
   16eac:	ldr	r1, [sl, #156]	; 0x9c
   16eb0:	add	r2, r5, #1
   16eb4:	mov	r0, r4
   16eb8:	bl	16b9c <__assert_fail@plt+0x4120>
   16ebc:	cmp	r5, #1
   16ec0:	bge	16ef4 <__assert_fail@plt+0x4478>
   16ec4:	b	16f18 <__assert_fail@plt+0x449c>
   16ec8:	ldr	r0, [sl, #160]	; 0xa0
   16ecc:	cmp	r0, #0
   16ed0:	beq	16f7c <__assert_fail@plt+0x4500>
   16ed4:	movw	r0, #54604	; 0xd54c
   16ed8:	mov	r1, #9
   16edc:	mov	r2, #1
   16ee0:	mov	r3, r4
   16ee4:	movt	r0, #4
   16ee8:	bl	125f0 <fwrite@plt>
   16eec:	cmp	r5, #1
   16ef0:	blt	16f18 <__assert_fail@plt+0x449c>
   16ef4:	mov	r6, #0
   16ef8:	mov	r0, r7
   16efc:	mov	r1, #4
   16f00:	mov	r2, #1
   16f04:	mov	r3, r4
   16f08:	bl	125f0 <fwrite@plt>
   16f0c:	add	r6, r6, #1
   16f10:	cmp	r5, r6
   16f14:	bne	16ef8 <__assert_fail@plt+0x447c>
   16f18:	ldr	r0, [sl, #160]	; 0xa0
   16f1c:	cmp	r0, #0
   16f20:	beq	16f6c <__assert_fail@plt+0x44f0>
   16f24:	movw	r0, #54614	; 0xd556
   16f28:	mov	r1, #7
   16f2c:	mov	r2, #1
   16f30:	mov	r3, r4
   16f34:	movt	r0, #4
   16f38:	bl	125f0 <fwrite@plt>
   16f3c:	ldr	sl, [sl, #160]	; 0xa0
   16f40:	add	r5, r5, #1
   16f44:	cmp	sl, #0
   16f48:	bne	16bcc <__assert_fail@plt+0x4150>
   16f4c:	b	16f64 <__assert_fail@plt+0x44e8>
   16f50:	mov	r8, #0
   16f54:	ldrb	r0, [sl, #20]
   16f58:	cmp	r0, #0
   16f5c:	bne	16e00 <__assert_fail@plt+0x4384>
   16f60:	b	16e24 <__assert_fail@plt+0x43a8>
   16f64:	sub	sp, fp, #28
   16f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f6c:	movw	r0, #54622	; 0xd55e
   16f70:	mov	r1, #10
   16f74:	movt	r0, #4
   16f78:	b	16f88 <__assert_fail@plt+0x450c>
   16f7c:	movw	r0, #54583	; 0xd537
   16f80:	mov	r1, #13
   16f84:	movt	r0, #4
   16f88:	mov	r2, #1
   16f8c:	mov	r3, r4
   16f90:	sub	sp, fp, #28
   16f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f98:	b	125f0 <fwrite@plt>
   16f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fa0:	add	fp, sp, #28
   16fa4:	sub	sp, sp, #20
   16fa8:	cmp	r0, #0
   16fac:	beq	171b8 <__assert_fail@plt+0x473c>
   16fb0:	mov	r4, r0
   16fb4:	ldr	r0, [r0, #160]	; 0xa0
   16fb8:	bl	16f9c <__assert_fail@plt+0x4520>
   16fbc:	ldr	r0, [r4, #156]	; 0x9c
   16fc0:	bl	16f9c <__assert_fail@plt+0x4520>
   16fc4:	ldrb	r0, [r4, #18]
   16fc8:	mov	r2, #3
   16fcc:	cmp	r0, #0
   16fd0:	bne	16ff0 <__assert_fail@plt+0x4574>
   16fd4:	ldrb	r0, [r4, #20]
   16fd8:	mov	r2, #1
   16fdc:	cmp	r0, #0
   16fe0:	bne	16ff0 <__assert_fail@plt+0x4574>
   16fe4:	ldrb	r2, [r4, #19]
   16fe8:	cmp	r2, #0
   16fec:	movwne	r2, #2
   16ff0:	ldr	r7, [r4]
   16ff4:	movw	r0, #16804	; 0x41a4
   16ff8:	movt	r0, #1
   16ffc:	cmp	r7, r0
   17000:	movwne	r0, #16808	; 0x41a8
   17004:	movtne	r0, #1
   17008:	cmpne	r7, r0
   1700c:	bne	17024 <__assert_fail@plt+0x45a8>
   17010:	ldrb	r1, [r4, #40]	; 0x28
   17014:	mov	r0, #7
   17018:	cmp	r1, #0
   1701c:	movweq	r0, #8
   17020:	b	171ac <__assert_fail@plt+0x4730>
   17024:	movw	r0, #43860	; 0xab54
   17028:	movt	r0, #1
   1702c:	cmp	r7, r0
   17030:	beq	17150 <__assert_fail@plt+0x46d4>
   17034:	movw	r9, #13680	; 0x3570
   17038:	stmib	sp, {r2, r4}
   1703c:	movt	r9, #6
   17040:	ldrb	r0, [r9]
   17044:	cmp	r0, #0
   17048:	bne	170e8 <__assert_fail@plt+0x466c>
   1704c:	movw	r8, #13036	; 0x32ec
   17050:	movw	r3, #32224	; 0x7de0
   17054:	mov	r1, #59	; 0x3b
   17058:	mov	r2, #8
   1705c:	movt	r8, #6
   17060:	movt	r3, #1
   17064:	mov	r0, r8
   17068:	bl	12998 <qsort@plt>
   1706c:	mov	r4, #0
   17070:	add	sl, sp, #16
   17074:	add	r7, sp, #12
   17078:	mov	r0, r8
   1707c:	mov	r1, r7
   17080:	mov	r2, #4
   17084:	ldr	r5, [r0, r4, lsl #3]!
   17088:	ldr	r6, [r0, #8]
   1708c:	mov	r0, sl
   17090:	str	r5, [sp, #12]
   17094:	str	r6, [sp, #16]
   17098:	bl	12518 <memcmp@plt>
   1709c:	cmp	r0, #0
   170a0:	blt	171c0 <__assert_fail@plt+0x4744>
   170a4:	mov	r0, sl
   170a8:	mov	r1, r7
   170ac:	mov	r2, #4
   170b0:	str	r6, [sp, #12]
   170b4:	str	r5, [sp, #16]
   170b8:	bl	12518 <memcmp@plt>
   170bc:	cmp	r0, #1
   170c0:	bge	171d4 <__assert_fail@plt+0x4758>
   170c4:	add	r1, r4, #2
   170c8:	add	r0, r4, #1
   170cc:	cmp	r1, #58	; 0x3a
   170d0:	mov	r4, r0
   170d4:	bls	17078 <__assert_fail@plt+0x45fc>
   170d8:	mov	r0, #1
   170dc:	strb	r0, [r9]
   170e0:	ldr	r0, [sp, #8]
   170e4:	ldr	r7, [r0]
   170e8:	mov	sl, #59	; 0x3b
   170ec:	mov	r8, #0
   170f0:	add	r5, sp, #16
   170f4:	add	r6, sp, #12
   170f8:	movw	r9, #13036	; 0x32ec
   170fc:	add	r0, sl, r8
   17100:	mov	r1, r6
   17104:	mov	r2, #4
   17108:	str	r7, [sp, #16]
   1710c:	lsr	r4, r0, #1
   17110:	movt	r9, #6
   17114:	ldr	r0, [r9, r4, lsl #3]!
   17118:	str	r0, [sp, #12]
   1711c:	mov	r0, r5
   17120:	bl	12518 <memcmp@plt>
   17124:	cmp	r0, #0
   17128:	bge	1713c <__assert_fail@plt+0x46c0>
   1712c:	mov	sl, r4
   17130:	cmp	r8, sl
   17134:	bcc	170f8 <__assert_fail@plt+0x467c>
   17138:	b	17178 <__assert_fail@plt+0x46fc>
   1713c:	beq	17158 <__assert_fail@plt+0x46dc>
   17140:	add	r8, r4, #1
   17144:	cmp	r8, sl
   17148:	bcc	170f8 <__assert_fail@plt+0x467c>
   1714c:	b	17178 <__assert_fail@plt+0x46fc>
   17150:	ldr	r0, [r4, #24]
   17154:	b	171ac <__assert_fail@plt+0x4730>
   17158:	cmp	r9, #0
   1715c:	beq	17178 <__assert_fail@plt+0x46fc>
   17160:	movw	r0, #13036	; 0x32ec
   17164:	movt	r0, #6
   17168:	add	r0, r0, r4, lsl #3
   1716c:	ldr	r4, [sp, #8]
   17170:	ldr	r0, [r0, #4]
   17174:	b	171a8 <__assert_fail@plt+0x472c>
   17178:	movw	r1, #55279	; 0xd7ef
   1717c:	mov	r0, #0
   17180:	mov	r2, #5
   17184:	movt	r1, #4
   17188:	bl	1253c <dcgettext@plt>
   1718c:	ldr	r4, [sp, #8]
   17190:	mov	r2, r0
   17194:	mov	r0, #0
   17198:	mov	r1, #0
   1719c:	ldr	r3, [r4, #4]
   171a0:	bl	12674 <error@plt>
   171a4:	mov	r0, #10
   171a8:	ldr	r2, [sp, #4]
   171ac:	cmp	r0, r2
   171b0:	movhi	r2, r0
   171b4:	str	r2, [r4, #24]
   171b8:	sub	sp, fp, #28
   171bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c0:	movw	r2, #55243	; 0xd7cb
   171c4:	mov	r0, #1
   171c8:	mov	r1, #0
   171cc:	movt	r2, #4
   171d0:	bl	12674 <error@plt>
   171d4:	movw	r0, #55391	; 0xd85f
   171d8:	movw	r1, #53514	; 0xd10a
   171dc:	movw	r3, #55403	; 0xd86b
   171e0:	movw	r2, #1013	; 0x3f5
   171e4:	movt	r0, #4
   171e8:	movt	r1, #4
   171ec:	movt	r3, #4
   171f0:	bl	12a7c <__assert_fail@plt>
   171f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171f8:	add	fp, sp, #28
   171fc:	sub	sp, sp, #4
   17200:	vpush	{d8-d9}
   17204:	sub	sp, sp, #112	; 0x70
   17208:	mov	r5, #0
   1720c:	cmp	r0, #0
   17210:	str	r5, [fp, #-52]	; 0xffffffcc
   17214:	str	r5, [fp, #-56]	; 0xffffffc8
   17218:	str	r5, [fp, #-60]	; 0xffffffc4
   1721c:	str	r5, [fp, #-64]	; 0xffffffc0
   17220:	beq	1791c <__assert_fail@plt+0x4ea0>
   17224:	ldr	r4, [r0]
   17228:	mov	r6, r0
   1722c:	cmp	r4, #0
   17230:	beq	1791c <__assert_fail@plt+0x4ea0>
   17234:	add	r2, sp, #8
   17238:	vmov.i32	q8, #0	; 0x00000000
   1723c:	mov	r0, #84	; 0x54
   17240:	mov	r1, r2
   17244:	vst1.64	{d16-d17}, [r1], r0
   17248:	mov	r0, #0
   1724c:	str	r0, [r1]
   17250:	add	r1, r2, #64	; 0x40
   17254:	str	r0, [sp, #88]	; 0x58
   17258:	mov	r0, r4
   1725c:	vst1.64	{d16-d17}, [r1]
   17260:	add	r1, r2, #48	; 0x30
   17264:	vst1.64	{d16-d17}, [r1]
   17268:	add	r1, r2, #32
   1726c:	vst1.64	{d16-d17}, [r1]
   17270:	add	r1, r2, #16
   17274:	vst1.64	{d16-d17}, [r1]
   17278:	ldr	r1, [r0, #156]!	; 0x9c
   1727c:	cmp	r1, #0
   17280:	beq	172b4 <__assert_fail@plt+0x4838>
   17284:	mov	r5, r0
   17288:	mov	r0, r1
   1728c:	mov	r2, r4
   17290:	mov	r4, r1
   17294:	ldr	r1, [r0, #156]!	; 0x9c
   17298:	cmp	r1, #0
   1729c:	bne	17284 <__assert_fail@plt+0x4808>
   172a0:	ldr	r7, [r2, #12]
   172a4:	ldr	r0, [r4, #8]
   172a8:	cmp	r0, #3
   172ac:	bne	172c8 <__assert_fail@plt+0x484c>
   172b0:	b	17370 <__assert_fail@plt+0x48f4>
   172b4:	mov	r7, #3
   172b8:	mov	r5, r6
   172bc:	ldr	r0, [r4, #8]
   172c0:	cmp	r0, #3
   172c4:	beq	17370 <__assert_fail@plt+0x48f4>
   172c8:	mov	r0, #176	; 0xb0
   172cc:	bl	30de4 <__assert_fail@plt+0x1e368>
   172d0:	mov	r2, #3
   172d4:	cmp	r7, #3
   172d8:	mov	r1, #0
   172dc:	str	r2, [r0, #8]
   172e0:	str	r7, [r0, #12]
   172e4:	str	r1, [r0, #24]
   172e8:	beq	1731c <__assert_fail@plt+0x48a0>
   172ec:	cmp	r7, #2
   172f0:	beq	17330 <__assert_fail@plt+0x48b4>
   172f4:	cmp	r7, #1
   172f8:	bne	17368 <__assert_fail@plt+0x48ec>
   172fc:	movw	r1, #54574	; 0xd52e
   17300:	movw	r2, #15976	; 0x3e68
   17304:	vmov.f32	s0, #112	; 0x3f800000  1.0
   17308:	movt	r2, #1
   1730c:	movt	r1, #4
   17310:	str	r2, [r0]
   17314:	str	r1, [r0, #4]
   17318:	b	17364 <__assert_fail@plt+0x48e8>
   1731c:	movw	r1, #54357	; 0xd455
   17320:	movw	r2, #15584	; 0x3ce0
   17324:	movt	r1, #4
   17328:	movt	r2, #1
   1732c:	b	17340 <__assert_fail@plt+0x48c4>
   17330:	movw	r1, #55601	; 0xd931
   17334:	movw	r2, #18892	; 0x49cc
   17338:	movt	r1, #4
   1733c:	movt	r2, #1
   17340:	str	r2, [r0]
   17344:	str	r1, [r0, #4]
   17348:	vldr	s0, [pc, #984]	; 17728 <__assert_fail@plt+0x4cac>
   1734c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   17350:	vldr	s2, [r4, #28]
   17354:	vcmpe.f32	s2, s4
   17358:	vmax.f32	d0, d1, d0
   1735c:	vmrs	APSR_nzcv, fpscr
   17360:	vselgt.f32	s0, s4, s0
   17364:	vstr	s0, [r0, #28]
   17368:	str	r4, [r0, #160]	; 0xa0
   1736c:	str	r0, [r5]
   17370:	movw	r0, #15980	; 0x3e6c
   17374:	movt	r0, #6
   17378:	ldrb	r0, [r0, #44]	; 0x2c
   1737c:	tst	r0, #9
   17380:	bne	178c4 <__assert_fail@plt+0x4e48>
   17384:	ldr	r5, [r6]
   17388:	add	r7, sp, #8
   1738c:	cmp	r5, #0
   17390:	beq	17904 <__assert_fail@plt+0x4e88>
   17394:	ldr	r0, [r5, #8]
   17398:	mov	r9, #0
   1739c:	vldr	s16, [pc, #900]	; 17728 <__assert_fail@plt+0x4cac>
   173a0:	vmov.f32	s18, #112	; 0x3f800000  1.0
   173a4:	mov	r4, #0
   173a8:	mov	sl, #0
   173ac:	cmp	r0, #3
   173b0:	mov	r0, #0
   173b4:	ldreq	r9, [r5, #12]
   173b8:	str	r0, [sp, #4]
   173bc:	b	173cc <__assert_fail@plt+0x4950>
   173c0:	ldr	r4, [fp, #-60]	; 0xffffffc4
   173c4:	ldr	sl, [fp, #-52]	; 0xffffffcc
   173c8:	mov	r6, r8
   173cc:	ldr	r0, [r5, #8]
   173d0:	cmp	r0, #3
   173d4:	bne	173e4 <__assert_fail@plt+0x4968>
   173d8:	ldr	r0, [r5, #12]
   173dc:	cmp	r0, r9
   173e0:	bne	173ec <__assert_fail@plt+0x4970>
   173e4:	mov	r8, r5
   173e8:	b	17490 <__assert_fail@plt+0x4a14>
   173ec:	mov	r0, #176	; 0xb0
   173f0:	bl	30de4 <__assert_fail@plt+0x1e368>
   173f4:	mov	r8, r0
   173f8:	mov	r0, #3
   173fc:	cmp	r9, #3
   17400:	str	r0, [r8, #8]
   17404:	mov	r0, #0
   17408:	str	r9, [r8, #12]
   1740c:	str	r0, [r8, #24]
   17410:	beq	17458 <__assert_fail@plt+0x49dc>
   17414:	cmp	r9, #2
   17418:	beq	17444 <__assert_fail@plt+0x49c8>
   1741c:	cmp	r9, #1
   17420:	bne	17488 <__assert_fail@plt+0x4a0c>
   17424:	movw	r0, #54574	; 0xd52e
   17428:	movw	r1, #15976	; 0x3e68
   1742c:	vmov.f32	s0, s18
   17430:	movt	r1, #1
   17434:	movt	r0, #4
   17438:	str	r1, [r8]
   1743c:	str	r0, [r8, #4]
   17440:	b	17484 <__assert_fail@plt+0x4a08>
   17444:	movw	r0, #55601	; 0xd931
   17448:	movw	r1, #18892	; 0x49cc
   1744c:	movt	r0, #4
   17450:	movt	r1, #1
   17454:	b	17468 <__assert_fail@plt+0x49ec>
   17458:	movw	r0, #54357	; 0xd455
   1745c:	movw	r1, #15584	; 0x3ce0
   17460:	movt	r0, #4
   17464:	movt	r1, #1
   17468:	str	r1, [r8]
   1746c:	str	r0, [r8, #4]
   17470:	vldr	s0, [r5, #28]
   17474:	vcmpe.f32	s0, s18
   17478:	vmax.f32	d1, d0, d8
   1747c:	vmrs	APSR_nzcv, fpscr
   17480:	vselgt.f32	s0, s18, s2
   17484:	vstr	s0, [r8, #28]
   17488:	str	r5, [r8, #160]	; 0xa0
   1748c:	str	r8, [r6]
   17490:	mov	r5, r8
   17494:	ldr	r1, [r5, #160]!	; 0xa0
   17498:	ldr	r0, [r1, #8]
   1749c:	cmp	r0, #2
   174a0:	bcc	174c0 <__assert_fail@plt+0x4a44>
   174a4:	beq	17550 <__assert_fail@plt+0x4ad4>
   174a8:	cmp	r0, #3
   174ac:	bne	17930 <__assert_fail@plt+0x4eb4>
   174b0:	str	r4, [fp, #-60]	; 0xffffffc4
   174b4:	str	sl, [fp, #-52]	; 0xffffffcc
   174b8:	mov	r0, r5
   174bc:	b	1755c <__assert_fail@plt+0x4ae0>
   174c0:	ldrb	r0, [r1, #16]
   174c4:	cmp	r9, #1
   174c8:	beq	17714 <__assert_fail@plt+0x4c98>
   174cc:	cmp	r0, #0
   174d0:	bne	17710 <__assert_fail@plt+0x4c94>
   174d4:	ldr	r0, [r1]
   174d8:	movw	r2, #17552	; 0x4490
   174dc:	movt	r2, #1
   174e0:	cmp	r0, r2
   174e4:	movwne	r2, #17352	; 0x43c8
   174e8:	movtne	r2, #1
   174ec:	cmpne	r0, r2
   174f0:	beq	17510 <__assert_fail@plt+0x4a94>
   174f4:	movw	r2, #17964	; 0x462c
   174f8:	movt	r2, #1
   174fc:	cmp	r0, r2
   17500:	movwne	r2, #18968	; 0x4a18
   17504:	movtne	r2, #1
   17508:	cmpne	r0, r2
   1750c:	bne	1759c <__assert_fail@plt+0x4b20>
   17510:	movw	r0, #15980	; 0x3e6c
   17514:	movt	r0, #6
   17518:	ldrb	r0, [r0, #44]	; 0x2c
   1751c:	tst	r0, #8
   17520:	bne	176c0 <__assert_fail@plt+0x4c44>
   17524:	ldr	r0, [r8, #156]	; 0x9c
   17528:	cmp	r4, #0
   1752c:	moveq	r4, r8
   17530:	str	r0, [r6]
   17534:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17538:	str	r0, [r8, #156]	; 0x9c
   1753c:	str	r8, [fp, #-64]	; 0xffffffc0
   17540:	ldr	r5, [r6]
   17544:	cmp	r5, #0
   17548:	bne	173cc <__assert_fail@plt+0x4950>
   1754c:	b	178b4 <__assert_fail@plt+0x4e38>
   17550:	add	r0, r1, #160	; 0xa0
   17554:	str	r4, [fp, #-60]	; 0xffffffc4
   17558:	str	sl, [fp, #-52]	; 0xffffffcc
   1755c:	bl	171f4 <__assert_fail@plt+0x4778>
   17560:	ldr	r1, [r5]
   17564:	strb	r0, [r1, #16]
   17568:	cmp	r0, #0
   1756c:	beq	1758c <__assert_fail@plt+0x4b10>
   17570:	mov	r0, r7
   17574:	sub	r1, fp, #64	; 0x40
   17578:	sub	r2, fp, #56	; 0x38
   1757c:	mov	r3, r6
   17580:	bl	17e14 <__assert_fail@plt+0x5398>
   17584:	mov	r0, #1
   17588:	str	r0, [sp, #4]
   1758c:	ldr	r5, [r8, #156]!	; 0x9c
   17590:	cmp	r5, #0
   17594:	bne	173c0 <__assert_fail@plt+0x4944>
   17598:	b	178a8 <__assert_fail@plt+0x4e2c>
   1759c:	movw	r2, #15980	; 0x3e6c
   175a0:	movt	r2, #6
   175a4:	ldrh	r2, [r2, #68]	; 0x44
   175a8:	cmp	r2, #0
   175ac:	beq	175f4 <__assert_fail@plt+0x4b78>
   175b0:	movw	r3, #18892	; 0x49cc
   175b4:	movt	r3, #1
   175b8:	cmp	r0, r3
   175bc:	movwne	r3, #15976	; 0x3e68
   175c0:	movtne	r3, #1
   175c4:	cmpne	r0, r3
   175c8:	beq	175f4 <__assert_fail@plt+0x4b78>
   175cc:	movw	r3, #15584	; 0x3ce0
   175d0:	movt	r3, #1
   175d4:	cmp	r0, r3
   175d8:	movwne	r3, #18028	; 0x466c
   175dc:	movtne	r3, #1
   175e0:	cmpne	r0, r3
   175e4:	beq	175f4 <__assert_fail@plt+0x4b78>
   175e8:	ldr	r3, [r1, #24]
   175ec:	cmp	r3, #0
   175f0:	beq	17510 <__assert_fail@plt+0x4a94>
   175f4:	movw	r3, #19524	; 0x4c44
   175f8:	movt	r3, #1
   175fc:	cmp	r0, r3
   17600:	beq	1763c <__assert_fail@plt+0x4bc0>
   17604:	mov	r0, #0
   17608:	cmp	r2, #2
   1760c:	bcc	17714 <__assert_fail@plt+0x4c98>
   17610:	ldr	r3, [r1, #24]
   17614:	sub	r7, r3, #1
   17618:	cmp	r7, #1
   1761c:	bhi	17668 <__assert_fail@plt+0x4bec>
   17620:	cmp	r2, #2
   17624:	add	r7, sp, #8
   17628:	bhi	17674 <__assert_fail@plt+0x4bf8>
   1762c:	ldrb	r1, [r1, #18]
   17630:	cmp	r1, #0
   17634:	beq	17674 <__assert_fail@plt+0x4bf8>
   17638:	b	17714 <__assert_fail@plt+0x4c98>
   1763c:	ldr	r0, [r8, #156]	; 0x9c
   17640:	cmp	sl, #0
   17644:	moveq	sl, r8
   17648:	str	r0, [r6]
   1764c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17650:	str	r0, [r8, #156]	; 0x9c
   17654:	str	r8, [fp, #-56]	; 0xffffffc8
   17658:	ldr	r5, [r6]
   1765c:	cmp	r5, #0
   17660:	bne	173cc <__assert_fail@plt+0x4950>
   17664:	b	178b4 <__assert_fail@plt+0x4e38>
   17668:	cmp	r2, #3
   1766c:	add	r7, sp, #8
   17670:	bcc	17714 <__assert_fail@plt+0x4c98>
   17674:	movw	r0, #15980	; 0x3e6c
   17678:	movt	r0, #6
   1767c:	ldrb	r0, [r0, #44]	; 0x2c
   17680:	tst	r0, #8
   17684:	bne	17760 <__assert_fail@plt+0x4ce4>
   17688:	ldr	r0, [r8, #156]	; 0x9c
   1768c:	str	r0, [r6]
   17690:	ldr	r0, [r7, r3, lsl #3]
   17694:	str	r0, [r8, #156]	; 0x9c
   17698:	str	r8, [r7, r3, lsl #3]
   1769c:	add	r0, r7, r3, lsl #3
   176a0:	ldr	r1, [r0, #4]
   176a4:	cmp	r1, #0
   176a8:	orreq	r0, r0, #4
   176ac:	streq	r8, [r0]
   176b0:	ldr	r5, [r6]
   176b4:	cmp	r5, #0
   176b8:	bne	173cc <__assert_fail@plt+0x4950>
   176bc:	b	178b4 <__assert_fail@plt+0x4e38>
   176c0:	movw	r0, #15980	; 0x3e6c
   176c4:	movw	r1, #55506	; 0xd8d2
   176c8:	movt	r0, #6
   176cc:	movt	r1, #4
   176d0:	ldrh	r2, [r0, #68]	; 0x44
   176d4:	movw	r0, #13640	; 0x3548
   176d8:	movt	r0, #6
   176dc:	ldr	r0, [r0]
   176e0:	bl	127c4 <fprintf@plt>
   176e4:	movw	r0, #13640	; 0x3548
   176e8:	movt	r0, #6
   176ec:	ldr	r1, [r0]
   176f0:	ldr	r0, [r5]
   176f4:	ldr	r3, [r0, #36]	; 0x24
   176f8:	ldr	r2, [r0, #4]
   176fc:	cmp	r3, #0
   17700:	bne	1772c <__assert_fail@plt+0x4cb0>
   17704:	mov	r0, r2
   17708:	bl	12a10 <fputs@plt>
   1770c:	b	1773c <__assert_fail@plt+0x4cc0>
   17710:	mov	r0, #1
   17714:	str	r4, [fp, #-60]	; 0xffffffc4
   17718:	str	sl, [fp, #-52]	; 0xffffffcc
   1771c:	cmp	r0, #0
   17720:	bne	17570 <__assert_fail@plt+0x4af4>
   17724:	b	1758c <__assert_fail@plt+0x4b10>
   17728:	andeq	r0, r0, r0
   1772c:	mov	r0, r1
   17730:	movw	r1, #53498	; 0xd0fa
   17734:	movt	r1, #4
   17738:	bl	127c4 <fprintf@plt>
   1773c:	movw	r0, #13640	; 0x3548
   17740:	mov	r1, #16
   17744:	mov	r2, #1
   17748:	movt	r0, #6
   1774c:	ldr	r3, [r0]
   17750:	movw	r0, #55539	; 0xd8f3
   17754:	movt	r0, #4
   17758:	bl	125f0 <fwrite@plt>
   1775c:	b	17524 <__assert_fail@plt+0x4aa8>
   17760:	movw	r0, #13640	; 0x3548
   17764:	movw	r1, #55556	; 0xd904
   17768:	movt	r0, #6
   1776c:	movt	r1, #4
   17770:	ldr	r0, [r0]
   17774:	bl	127c4 <fprintf@plt>
   17778:	movw	r0, #13640	; 0x3548
   1777c:	movt	r0, #6
   17780:	ldr	r1, [r0]
   17784:	ldr	r0, [r5]
   17788:	ldr	r3, [r0, #36]	; 0x24
   1778c:	ldr	r2, [r0, #4]
   17790:	cmp	r3, #0
   17794:	bne	177a4 <__assert_fail@plt+0x4d28>
   17798:	mov	r0, r2
   1779c:	bl	12a10 <fputs@plt>
   177a0:	b	177b4 <__assert_fail@plt+0x4d38>
   177a4:	mov	r0, r1
   177a8:	movw	r1, #53498	; 0xd0fa
   177ac:	movt	r1, #4
   177b0:	bl	127c4 <fprintf@plt>
   177b4:	ldr	r1, [r5]
   177b8:	movw	ip, #12948	; 0x3294
   177bc:	movw	r0, #13640	; 0x3548
   177c0:	mov	r3, #0
   177c4:	movt	ip, #6
   177c8:	movt	r0, #6
   177cc:	ldr	r2, [ip]
   177d0:	ldr	r0, [r0]
   177d4:	ldr	r1, [r1, #24]
   177d8:	cmp	r2, r1
   177dc:	beq	17888 <__assert_fail@plt+0x4e0c>
   177e0:	ldr	r2, [ip, #8]
   177e4:	mov	r3, #1
   177e8:	cmp	r2, r1
   177ec:	beq	17888 <__assert_fail@plt+0x4e0c>
   177f0:	ldr	r2, [ip, #16]
   177f4:	mov	r3, #2
   177f8:	cmp	r2, r1
   177fc:	beq	17888 <__assert_fail@plt+0x4e0c>
   17800:	ldr	r2, [ip, #24]
   17804:	mov	r3, #3
   17808:	cmp	r2, r1
   1780c:	beq	17888 <__assert_fail@plt+0x4e0c>
   17810:	ldr	r2, [ip, #32]
   17814:	mov	r3, #4
   17818:	cmp	r2, r1
   1781c:	beq	17888 <__assert_fail@plt+0x4e0c>
   17820:	ldr	r2, [ip, #40]	; 0x28
   17824:	mov	r3, #5
   17828:	cmp	r2, r1
   1782c:	beq	17888 <__assert_fail@plt+0x4e0c>
   17830:	ldr	r2, [ip, #48]	; 0x30
   17834:	mov	r3, #6
   17838:	cmp	r2, r1
   1783c:	beq	17888 <__assert_fail@plt+0x4e0c>
   17840:	ldr	r2, [ip, #56]	; 0x38
   17844:	mov	r3, #7
   17848:	cmp	r2, r1
   1784c:	beq	17888 <__assert_fail@plt+0x4e0c>
   17850:	ldr	r2, [ip, #64]	; 0x40
   17854:	mov	r3, #8
   17858:	cmp	r2, r1
   1785c:	beq	17888 <__assert_fail@plt+0x4e0c>
   17860:	ldr	r2, [ip, #72]	; 0x48
   17864:	mov	r3, #9
   17868:	cmp	r2, r1
   1786c:	beq	17888 <__assert_fail@plt+0x4e0c>
   17870:	ldr	r2, [ip, #80]	; 0x50
   17874:	mov	r3, #10
   17878:	cmp	r2, r1
   1787c:	movw	r2, #56156	; 0xdb5c
   17880:	movt	r2, #4
   17884:	bne	17890 <__assert_fail@plt+0x4e14>
   17888:	add	r1, ip, r3, lsl #3
   1788c:	ldr	r2, [r1, #4]
   17890:	movw	r1, #55586	; 0xd922
   17894:	movt	r1, #4
   17898:	bl	127c4 <fprintf@plt>
   1789c:	ldr	r0, [r5]
   178a0:	ldr	r3, [r0, #24]
   178a4:	b	17688 <__assert_fail@plt+0x4c0c>
   178a8:	ldr	r5, [sp, #4]
   178ac:	mov	r6, r8
   178b0:	b	17908 <__assert_fail@plt+0x4e8c>
   178b4:	ldr	r5, [sp, #4]
   178b8:	str	r4, [fp, #-60]	; 0xffffffc4
   178bc:	str	sl, [fp, #-52]	; 0xffffffcc
   178c0:	b	17908 <__assert_fail@plt+0x4e8c>
   178c4:	movw	r4, #13640	; 0x3548
   178c8:	movw	r0, #55483	; 0xd8bb
   178cc:	mov	r1, #22
   178d0:	mov	r2, #1
   178d4:	movt	r4, #6
   178d8:	movt	r0, #4
   178dc:	ldr	r3, [r4]
   178e0:	bl	125f0 <fwrite@plt>
   178e4:	ldr	r0, [r4]
   178e8:	ldr	r1, [r6]
   178ec:	mov	r2, #0
   178f0:	bl	16b9c <__assert_fail@plt+0x4120>
   178f4:	ldr	r5, [r6]
   178f8:	add	r7, sp, #8
   178fc:	cmp	r5, #0
   17900:	bne	17394 <__assert_fail@plt+0x4918>
   17904:	mov	r5, #0
   17908:	sub	r1, fp, #64	; 0x40
   1790c:	sub	r2, fp, #56	; 0x38
   17910:	mov	r0, r7
   17914:	mov	r3, r6
   17918:	bl	17e14 <__assert_fail@plt+0x5398>
   1791c:	and	r0, r5, #1
   17920:	sub	sp, fp, #48	; 0x30
   17924:	vpop	{d8-d9}
   17928:	add	sp, sp, #4
   1792c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17930:	movw	r1, #55172	; 0xd784
   17934:	mov	r0, #0
   17938:	mov	r2, #5
   1793c:	movt	r1, #4
   17940:	bl	1253c <dcgettext@plt>
   17944:	mov	r2, r0
   17948:	mov	r0, #1
   1794c:	mov	r1, #0
   17950:	bl	12674 <error@plt>
   17954:	push	{r4, sl, fp, lr}
   17958:	add	fp, sp, #8
   1795c:	mov	r4, r0
   17960:	tst	r1, #1
   17964:	ldrne	r0, [r4, #8]
   17968:	cmpne	r0, #3
   1796c:	beq	17994 <__assert_fail@plt+0x4f18>
   17970:	b	179b8 <__assert_fail@plt+0x4f3c>
   17974:	ldr	r4, [r4, #160]	; 0xa0
   17978:	mov	r1, #0
   1797c:	cmp	r4, #0
   17980:	popeq	{r4, sl, fp, pc}
   17984:	tst	r1, #1
   17988:	ldrne	r0, [r4, #8]
   1798c:	cmpne	r0, #3
   17990:	bne	179b8 <__assert_fail@plt+0x4f3c>
   17994:	ldr	r0, [r4, #156]	; 0x9c
   17998:	cmp	r0, #0
   1799c:	beq	17974 <__assert_fail@plt+0x4ef8>
   179a0:	ldr	r1, [r0, #8]
   179a4:	cmp	r1, #3
   179a8:	bne	179d8 <__assert_fail@plt+0x4f5c>
   179ac:	mov	r1, #0
   179b0:	bl	17954 <__assert_fail@plt+0x4ed8>
   179b4:	b	17974 <__assert_fail@plt+0x4ef8>
   179b8:	movw	r0, #55662	; 0xd96e
   179bc:	movw	r1, #53514	; 0xd10a
   179c0:	movw	r3, #55681	; 0xd981
   179c4:	movw	r2, #1230	; 0x4ce
   179c8:	movt	r0, #4
   179cc:	movt	r1, #4
   179d0:	movt	r3, #4
   179d4:	bl	12a7c <__assert_fail@plt>
   179d8:	movw	r0, #55733	; 0xd9b5
   179dc:	movw	r1, #53514	; 0xd10a
   179e0:	movw	r3, #55681	; 0xd981
   179e4:	movw	r2, #1235	; 0x4d3
   179e8:	movt	r0, #4
   179ec:	movt	r1, #4
   179f0:	movt	r3, #4
   179f4:	bl	12a7c <__assert_fail@plt>
   179f8:	push	{r4, sl, fp, lr}
   179fc:	add	fp, sp, #8
   17a00:	cmp	r0, #0
   17a04:	popeq	{r4, sl, fp, pc}
   17a08:	mov	r4, r0
   17a0c:	mov	r0, r4
   17a10:	bl	1809c <__assert_fail@plt+0x5620>
   17a14:	cmp	r0, #0
   17a18:	bne	17a0c <__assert_fail@plt+0x4f90>
   17a1c:	ldr	r0, [r4, #156]	; 0x9c
   17a20:	bl	179f8 <__assert_fail@plt+0x4f7c>
   17a24:	ldr	r4, [r4, #160]	; 0xa0
   17a28:	cmp	r4, #0
   17a2c:	bne	17a0c <__assert_fail@plt+0x4f90>
   17a30:	pop	{r4, sl, fp, pc}
   17a34:	push	{r4, r5, fp, lr}
   17a38:	add	fp, sp, #8
   17a3c:	mov	r4, r0
   17a40:	ldr	r0, [r0]
   17a44:	cmp	r0, #2
   17a48:	beq	17ac4 <__assert_fail@plt+0x5048>
   17a4c:	cmp	r0, #0
   17a50:	beq	17ae4 <__assert_fail@plt+0x5068>
   17a54:	mov	r0, #176	; 0xb0
   17a58:	bl	30de4 <__assert_fail@plt+0x1e368>
   17a5c:	movw	r1, #13684	; 0x3574
   17a60:	movw	r3, #15980	; 0x3e6c
   17a64:	mov	r5, #1065353216	; 0x3f800000
   17a68:	movt	r1, #6
   17a6c:	movt	r3, #6
   17a70:	ldr	r2, [r1, #12]
   17a74:	cmp	r2, #0
   17a78:	ldrne	r2, [r1, #16]
   17a7c:	strne	r0, [r2, #152]	; 0x98
   17a80:	streq	r0, [r1, #12]
   17a84:	str	r0, [r1, #16]
   17a88:	mov	r1, #0
   17a8c:	movw	r2, #257	; 0x101
   17a90:	str	r4, [r0, #172]	; 0xac
   17a94:	ldrb	r3, [r3, #15]
   17a98:	str	r1, [r0, #8]
   17a9c:	str	r1, [r0, #12]
   17aa0:	strh	r2, [r0, #18]
   17aa4:	mov	r2, #10
   17aa8:	str	r2, [r0, #24]
   17aac:	str	r5, [r0, #28]
   17ab0:	str	r1, [r0, #168]	; 0xa8
   17ab4:	str	r1, [r0, #164]	; 0xa4
   17ab8:	str	r1, [r0, #36]	; 0x24
   17abc:	strb	r3, [r0, #32]
   17ac0:	pop	{r4, r5, fp, pc}
   17ac4:	movw	r0, #52743	; 0xce07
   17ac8:	movw	r1, #53514	; 0xd10a
   17acc:	movw	r3, #54121	; 0xd369
   17ad0:	movw	r2, #1486	; 0x5ce
   17ad4:	movt	r0, #4
   17ad8:	movt	r1, #4
   17adc:	movt	r3, #4
   17ae0:	bl	12a7c <__assert_fail@plt>
   17ae4:	movw	r0, #52707	; 0xcde3
   17ae8:	movw	r1, #53514	; 0xd10a
   17aec:	movw	r3, #54121	; 0xd369
   17af0:	movw	r2, #1485	; 0x5cd
   17af4:	movt	r0, #4
   17af8:	movt	r1, #4
   17afc:	movt	r3, #4
   17b00:	bl	12a7c <__assert_fail@plt>
   17b04:	push	{r4, r5, fp, lr}
   17b08:	add	fp, sp, #8
   17b0c:	mov	r4, r0
   17b10:	ldr	r0, [r0]
   17b14:	cmp	r0, #2
   17b18:	beq	17b9c <__assert_fail@plt+0x5120>
   17b1c:	cmp	r0, #0
   17b20:	beq	17bbc <__assert_fail@plt+0x5140>
   17b24:	mov	r0, #176	; 0xb0
   17b28:	bl	30de4 <__assert_fail@plt+0x1e368>
   17b2c:	movw	r1, #13684	; 0x3574
   17b30:	movw	r3, #54181	; 0xd3a5
   17b34:	mov	r5, #1065353216	; 0x3f800000
   17b38:	movt	r1, #6
   17b3c:	movt	r3, #4
   17b40:	ldr	r2, [r1, #12]
   17b44:	cmp	r2, #0
   17b48:	ldrne	r2, [r1, #16]
   17b4c:	strne	r0, [r2, #152]	; 0x98
   17b50:	streq	r0, [r1, #12]
   17b54:	str	r0, [r1, #16]
   17b58:	mov	r1, #0
   17b5c:	movw	r2, #257	; 0x101
   17b60:	str	r4, [r0, #172]	; 0xac
   17b64:	str	r1, [r0, #8]
   17b68:	str	r1, [r0, #12]
   17b6c:	strh	r2, [r0, #18]
   17b70:	str	r3, [r0, #36]	; 0x24
   17b74:	movw	r3, #15980	; 0x3e6c
   17b78:	mov	r2, #10
   17b7c:	movt	r3, #6
   17b80:	ldrb	r3, [r3, #15]
   17b84:	str	r2, [r0, #24]
   17b88:	str	r5, [r0, #28]
   17b8c:	str	r1, [r0, #168]	; 0xa8
   17b90:	str	r1, [r0, #164]	; 0xa4
   17b94:	strb	r3, [r0, #32]
   17b98:	pop	{r4, r5, fp, pc}
   17b9c:	movw	r0, #52743	; 0xce07
   17ba0:	movw	r1, #53514	; 0xd10a
   17ba4:	movw	r3, #54121	; 0xd369
   17ba8:	movw	r2, #1486	; 0x5ce
   17bac:	movt	r0, #4
   17bb0:	movt	r1, #4
   17bb4:	movt	r3, #4
   17bb8:	bl	12a7c <__assert_fail@plt>
   17bbc:	movw	r0, #52707	; 0xcde3
   17bc0:	movw	r1, #53514	; 0xd10a
   17bc4:	movw	r3, #54121	; 0xd369
   17bc8:	movw	r2, #1485	; 0x5cd
   17bcc:	movt	r0, #4
   17bd0:	movt	r1, #4
   17bd4:	movt	r3, #4
   17bd8:	bl	12a7c <__assert_fail@plt>
   17bdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17be0:	add	fp, sp, #24
   17be4:	movw	r7, #13684	; 0x3574
   17be8:	mov	r8, r1
   17bec:	mov	r4, r0
   17bf0:	movt	r7, #6
   17bf4:	ldr	r6, [r7, #20]
   17bf8:	cmp	r6, #0
   17bfc:	bne	17c1c <__assert_fail@plt+0x51a0>
   17c00:	movw	r0, #54212	; 0xd3c4
   17c04:	movt	r0, #4
   17c08:	bl	1c454 <__assert_fail@plt+0x99d8>
   17c0c:	mov	r6, r0
   17c10:	cmp	r0, #0
   17c14:	str	r0, [r7, #20]
   17c18:	beq	17dc0 <__assert_fail@plt+0x5344>
   17c1c:	ldr	r0, [r7, #16]
   17c20:	cmp	r0, #0
   17c24:	beq	17ce0 <__assert_fail@plt+0x5264>
   17c28:	ldr	r0, [r0, #8]
   17c2c:	cmp	r0, #1
   17c30:	cmpne	r0, #5
   17c34:	bne	17cd8 <__assert_fail@plt+0x525c>
   17c38:	ldr	r0, [r6]
   17c3c:	cmp	r0, #2
   17c40:	beq	17d5c <__assert_fail@plt+0x52e0>
   17c44:	cmp	r0, #0
   17c48:	beq	17d7c <__assert_fail@plt+0x5300>
   17c4c:	mov	r0, #176	; 0xb0
   17c50:	bl	30de4 <__assert_fail@plt+0x1e368>
   17c54:	ldr	r1, [r7, #12]
   17c58:	mov	r2, #10
   17c5c:	mov	r3, #1065353216	; 0x3f800000
   17c60:	mov	r5, #3
   17c64:	cmp	r1, #0
   17c68:	ldrne	r1, [r7, #16]
   17c6c:	strne	r0, [r1, #152]	; 0x98
   17c70:	movw	r1, #15980	; 0x3e6c
   17c74:	str	r6, [r0, #172]	; 0xac
   17c78:	strd	r2, [r0, #24]
   17c7c:	movw	r3, #15584	; 0x3ce0
   17c80:	movw	r6, #54357	; 0xd455
   17c84:	mov	r2, #0
   17c88:	streq	r0, [r7, #12]
   17c8c:	str	r0, [r7, #16]
   17c90:	movt	r1, #6
   17c94:	movt	r3, #1
   17c98:	movt	r6, #4
   17c9c:	str	r2, [r0, #168]	; 0xa8
   17ca0:	str	r2, [r0, #164]	; 0xa4
   17ca4:	str	r2, [r0, #36]	; 0x24
   17ca8:	str	r2, [r0, #40]	; 0x28
   17cac:	strb	r2, [r0, #20]
   17cb0:	ldrb	r1, [r1, #15]
   17cb4:	stm	r0, {r3, r6}
   17cb8:	str	r5, [r0, #8]
   17cbc:	str	r5, [r0, #12]
   17cc0:	str	r2, [r0, #16]
   17cc4:	strb	r1, [r0, #32]
   17cc8:	ldr	r0, [r4]
   17ccc:	cmp	r0, #2
   17cd0:	bne	17cec <__assert_fail@plt+0x5270>
   17cd4:	b	17d5c <__assert_fail@plt+0x52e0>
   17cd8:	cmp	r0, #0
   17cdc:	beq	17d9c <__assert_fail@plt+0x5320>
   17ce0:	ldr	r0, [r4]
   17ce4:	cmp	r0, #2
   17ce8:	beq	17d5c <__assert_fail@plt+0x52e0>
   17cec:	cmp	r0, #0
   17cf0:	beq	17d7c <__assert_fail@plt+0x5300>
   17cf4:	mov	r0, #176	; 0xb0
   17cf8:	bl	30de4 <__assert_fail@plt+0x1e368>
   17cfc:	ldr	r1, [r7, #12]
   17d00:	movw	r3, #15980	; 0x3e6c
   17d04:	movw	r2, #257	; 0x101
   17d08:	mov	r5, #1065353216	; 0x3f800000
   17d0c:	movt	r3, #6
   17d10:	cmp	r1, #0
   17d14:	ldrne	r1, [r7, #16]
   17d18:	strne	r0, [r1, #152]	; 0x98
   17d1c:	mov	r1, #0
   17d20:	streq	r0, [r7, #12]
   17d24:	str	r0, [r7, #16]
   17d28:	ldrb	r3, [r3, #15]
   17d2c:	str	r1, [r0, #8]
   17d30:	str	r1, [r0, #12]
   17d34:	strh	r2, [r0, #18]
   17d38:	mov	r2, #10
   17d3c:	str	r2, [r0, #24]
   17d40:	str	r5, [r0, #28]
   17d44:	str	r8, [r0, #36]	; 0x24
   17d48:	str	r1, [r0, #164]	; 0xa4
   17d4c:	str	r1, [r0, #168]	; 0xa8
   17d50:	str	r4, [r0, #172]	; 0xac
   17d54:	strb	r3, [r0, #32]
   17d58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d5c:	movw	r0, #52743	; 0xce07
   17d60:	movw	r1, #53514	; 0xd10a
   17d64:	movw	r3, #54121	; 0xd369
   17d68:	movw	r2, #1486	; 0x5ce
   17d6c:	movt	r0, #4
   17d70:	movt	r1, #4
   17d74:	movt	r3, #4
   17d78:	bl	12a7c <__assert_fail@plt>
   17d7c:	movw	r0, #52707	; 0xcde3
   17d80:	movw	r1, #53514	; 0xd10a
   17d84:	movw	r3, #54121	; 0xd369
   17d88:	movw	r2, #1485	; 0x5cd
   17d8c:	movt	r0, #4
   17d90:	movt	r1, #4
   17d94:	movt	r3, #4
   17d98:	bl	12a7c <__assert_fail@plt>
   17d9c:	movw	r1, #54315	; 0xd42b
   17da0:	mov	r0, #0
   17da4:	mov	r2, #5
   17da8:	movt	r1, #4
   17dac:	bl	1253c <dcgettext@plt>
   17db0:	mov	r2, r0
   17db4:	mov	r0, #1
   17db8:	mov	r1, #0
   17dbc:	bl	12674 <error@plt>
   17dc0:	movw	r0, #54216	; 0xd3c8
   17dc4:	movw	r1, #53514	; 0xd10a
   17dc8:	movw	r3, #54234	; 0xd3da
   17dcc:	movw	r2, #1528	; 0x5f8
   17dd0:	movt	r0, #4
   17dd4:	movt	r1, #4
   17dd8:	movt	r3, #4
   17ddc:	bl	12a7c <__assert_fail@plt>
   17de0:	push	{fp, lr}
   17de4:	mov	fp, sp
   17de8:	sub	sp, sp, #8
   17dec:	ldr	r0, [r0]
   17df0:	mov	r2, #4
   17df4:	str	r0, [sp, #4]
   17df8:	ldr	r0, [r1]
   17dfc:	mov	r1, sp
   17e00:	str	r0, [sp]
   17e04:	add	r0, sp, #4
   17e08:	bl	12518 <memcmp@plt>
   17e0c:	mov	sp, fp
   17e10:	pop	{fp, pc}
   17e14:	push	{r4, r5, r6, sl, fp, lr}
   17e18:	add	fp, sp, #16
   17e1c:	mov	r5, r0
   17e20:	mov	r0, r1
   17e24:	mov	r1, r3
   17e28:	mov	r4, r3
   17e2c:	mov	r6, r2
   17e30:	bl	17ec8 <__assert_fail@plt+0x544c>
   17e34:	mov	r0, r6
   17e38:	mov	r1, r4
   17e3c:	bl	17ec8 <__assert_fail@plt+0x544c>
   17e40:	mov	r0, r5
   17e44:	mov	r1, r4
   17e48:	bl	17ec8 <__assert_fail@plt+0x544c>
   17e4c:	add	r0, r5, #8
   17e50:	mov	r1, r4
   17e54:	bl	17ec8 <__assert_fail@plt+0x544c>
   17e58:	add	r0, r5, #16
   17e5c:	mov	r1, r4
   17e60:	bl	17ec8 <__assert_fail@plt+0x544c>
   17e64:	add	r0, r5, #24
   17e68:	mov	r1, r4
   17e6c:	bl	17ec8 <__assert_fail@plt+0x544c>
   17e70:	add	r0, r5, #32
   17e74:	mov	r1, r4
   17e78:	bl	17ec8 <__assert_fail@plt+0x544c>
   17e7c:	add	r0, r5, #40	; 0x28
   17e80:	mov	r1, r4
   17e84:	bl	17ec8 <__assert_fail@plt+0x544c>
   17e88:	add	r0, r5, #48	; 0x30
   17e8c:	mov	r1, r4
   17e90:	bl	17ec8 <__assert_fail@plt+0x544c>
   17e94:	add	r0, r5, #56	; 0x38
   17e98:	mov	r1, r4
   17e9c:	bl	17ec8 <__assert_fail@plt+0x544c>
   17ea0:	add	r0, r5, #64	; 0x40
   17ea4:	mov	r1, r4
   17ea8:	bl	17ec8 <__assert_fail@plt+0x544c>
   17eac:	add	r0, r5, #72	; 0x48
   17eb0:	mov	r1, r4
   17eb4:	bl	17ec8 <__assert_fail@plt+0x544c>
   17eb8:	add	r0, r5, #80	; 0x50
   17ebc:	mov	r1, r4
   17ec0:	pop	{r4, r5, r6, sl, fp, lr}
   17ec4:	b	17ec8 <__assert_fail@plt+0x544c>
   17ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ecc:	add	fp, sp, #28
   17ed0:	sub	sp, sp, #4
   17ed4:	mov	sl, r0
   17ed8:	ldr	r0, [r0]
   17edc:	cmp	r0, #0
   17ee0:	beq	18008 <__assert_fail@plt+0x558c>
   17ee4:	movw	r5, #15980	; 0x3e6c
   17ee8:	mov	r9, r1
   17eec:	movt	r5, #6
   17ef0:	ldrb	r1, [r5, #44]	; 0x2c
   17ef4:	tst	r1, #8
   17ef8:	bne	18010 <__assert_fail@plt+0x5594>
   17efc:	bl	15fb0 <__assert_fail@plt+0x3534>
   17f00:	ldr	r1, [sl]
   17f04:	cmp	r1, #0
   17f08:	beq	18054 <__assert_fail@plt+0x55d8>
   17f0c:	mov	lr, r5
   17f10:	mov	ip, #0
   17f14:	mov	r6, #0
   17f18:	mov	r8, #0
   17f1c:	ldr	r2, [r1, #156]	; 0x9c
   17f20:	cmp	r6, #0
   17f24:	str	ip, [r1, #156]	; 0x9c
   17f28:	beq	17fb8 <__assert_fail@plt+0x553c>
   17f2c:	ldr	r5, [r1, #160]	; 0xa0
   17f30:	mov	r3, r6
   17f34:	ldr	r4, [r5, #24]
   17f38:	ldr	r0, [r3, #160]	; 0xa0
   17f3c:	ldr	r7, [r0, #24]
   17f40:	cmp	r7, r4
   17f44:	bne	17f84 <__assert_fail@plt+0x5508>
   17f48:	vldr	s0, [r5, #28]
   17f4c:	vldr	s2, [r0, #28]
   17f50:	vcmp.f32	s2, s0
   17f54:	vmrs	APSR_nzcv, fpscr
   17f58:	beq	17f94 <__assert_fail@plt+0x5518>
   17f5c:	ldr	r0, [r3, #12]
   17f60:	vcmpe.f32	s2, s0
   17f64:	cmp	r0, #2
   17f68:	bne	17f8c <__assert_fail@plt+0x5510>
   17f6c:	vmrs	APSR_nzcv, fpscr
   17f70:	bmi	17f94 <__assert_fail@plt+0x5518>
   17f74:	ldr	r3, [r3, #156]	; 0x9c
   17f78:	cmp	r3, #0
   17f7c:	bne	17f38 <__assert_fail@plt+0x54bc>
   17f80:	b	17fb8 <__assert_fail@plt+0x553c>
   17f84:	bcc	17f74 <__assert_fail@plt+0x54f8>
   17f88:	b	17f94 <__assert_fail@plt+0x5518>
   17f8c:	vmrs	APSR_nzcv, fpscr
   17f90:	bmi	17f74 <__assert_fail@plt+0x54f8>
   17f94:	ldr	r0, [r3, #156]	; 0x9c
   17f98:	cmp	r0, #0
   17f9c:	str	r0, [r1, #156]	; 0x9c
   17fa0:	str	r1, [r3, #156]	; 0x9c
   17fa4:	moveq	r8, r1
   17fa8:	cmp	r2, #0
   17fac:	mov	r1, r2
   17fb0:	bne	17f1c <__assert_fail@plt+0x54a0>
   17fb4:	b	17fd4 <__assert_fail@plt+0x5558>
   17fb8:	cmp	r8, #0
   17fbc:	str	r6, [r1, #156]	; 0x9c
   17fc0:	mov	r6, r1
   17fc4:	moveq	r8, r1
   17fc8:	cmp	r2, #0
   17fcc:	mov	r1, r2
   17fd0:	bne	17f1c <__assert_fail@plt+0x54a0>
   17fd4:	mov	r5, lr
   17fd8:	str	r2, [sl]
   17fdc:	ldrb	r0, [r5, #44]	; 0x2c
   17fe0:	tst	r0, #8
   17fe4:	bne	18068 <__assert_fail@plt+0x55ec>
   17fe8:	mov	r0, r6
   17fec:	bl	15fb0 <__assert_fail@plt+0x3534>
   17ff0:	ldr	r0, [r9]
   17ff4:	str	r0, [r8, #156]	; 0x9c
   17ff8:	mov	r0, #0
   17ffc:	str	r6, [r9]
   18000:	str	r0, [sl]
   18004:	str	r0, [sl, #4]
   18008:	sub	sp, fp, #28
   1800c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18010:	movw	r4, #13640	; 0x3548
   18014:	movw	r1, #55604	; 0xd934
   18018:	movw	r2, #55609	; 0xd939
   1801c:	movt	r4, #6
   18020:	movt	r1, #4
   18024:	movt	r2, #4
   18028:	ldr	r0, [r4]
   1802c:	bl	127c4 <fprintf@plt>
   18030:	ldr	r0, [r4]
   18034:	ldr	r1, [sl]
   18038:	mov	r2, #2
   1803c:	bl	16b9c <__assert_fail@plt+0x4120>
   18040:	ldr	r0, [sl]
   18044:	bl	15fb0 <__assert_fail@plt+0x3534>
   18048:	ldr	r1, [sl]
   1804c:	cmp	r1, #0
   18050:	bne	17f0c <__assert_fail@plt+0x5490>
   18054:	mov	r8, #0
   18058:	mov	r6, #0
   1805c:	ldrb	r0, [r5, #44]	; 0x2c
   18060:	tst	r0, #8
   18064:	beq	17fe8 <__assert_fail@plt+0x556c>
   18068:	movw	r4, #13640	; 0x3548
   1806c:	movw	r1, #55604	; 0xd934
   18070:	movw	r2, #55636	; 0xd954
   18074:	movt	r4, #6
   18078:	movt	r1, #4
   1807c:	movt	r2, #4
   18080:	ldr	r0, [r4]
   18084:	bl	127c4 <fprintf@plt>
   18088:	ldr	r0, [r4]
   1808c:	mov	r1, r6
   18090:	mov	r2, #2
   18094:	bl	16b9c <__assert_fail@plt+0x4120>
   18098:	b	17fe8 <__assert_fail@plt+0x556c>
   1809c:	push	{r4, r5, r6, r7, fp, lr}
   180a0:	add	fp, sp, #16
   180a4:	vpush	{d8-d9}
   180a8:	sub	sp, sp, #8
   180ac:	mov	r4, r0
   180b0:	ldr	r0, [r0, #8]
   180b4:	cmp	r0, #3
   180b8:	bne	18104 <__assert_fail@plt+0x5688>
   180bc:	ldr	r0, [r4, #156]	; 0x9c
   180c0:	movw	r2, #55786	; 0xd9ea
   180c4:	movt	r2, #4
   180c8:	cmp	r0, #0
   180cc:	ldrne	r0, [r4, #160]	; 0xa0
   180d0:	cmpne	r0, #0
   180d4:	beq	1810c <__assert_fail@plt+0x5690>
   180d8:	ldr	r6, [r4, #156]	; 0x9c
   180dc:	ldr	r0, [r6, #160]	; 0xa0
   180e0:	cmp	r0, #0
   180e4:	beq	18170 <__assert_fail@plt+0x56f4>
   180e8:	ldr	r0, [r6, #160]	; 0xa0
   180ec:	bl	182e4 <__assert_fail@plt+0x5868>
   180f0:	cmp	r0, #0
   180f4:	beq	1817c <__assert_fail@plt+0x5700>
   180f8:	movw	r2, #55837	; 0xda1d
   180fc:	movt	r2, #4
   18100:	b	1810c <__assert_fail@plt+0x5690>
   18104:	movw	r2, #55763	; 0xd9d3
   18108:	movt	r2, #4
   1810c:	movw	r0, #15980	; 0x3e6c
   18110:	mov	r5, #0
   18114:	movt	r0, #6
   18118:	ldrb	r0, [r0, #44]	; 0x2c
   1811c:	tst	r0, #8
   18120:	bne	18134 <__assert_fail@plt+0x56b8>
   18124:	mov	r0, r5
   18128:	sub	sp, fp, #32
   1812c:	vpop	{d8-d9}
   18130:	pop	{r4, r5, r6, r7, fp, pc}
   18134:	movw	r5, #13640	; 0x3548
   18138:	movw	r1, #56073	; 0xdb09
   1813c:	movt	r5, #6
   18140:	movt	r1, #4
   18144:	ldr	r0, [r5]
   18148:	bl	127c4 <fprintf@plt>
   1814c:	ldr	r0, [r5]
   18150:	mov	r1, r4
   18154:	mov	r2, #0
   18158:	mov	r5, #0
   1815c:	bl	16b9c <__assert_fail@plt+0x4120>
   18160:	mov	r0, r5
   18164:	sub	sp, fp, #32
   18168:	vpop	{d8-d9}
   1816c:	pop	{r4, r5, r6, r7, fp, pc}
   18170:	movw	r2, #55808	; 0xda00
   18174:	movt	r2, #4
   18178:	b	1810c <__assert_fail@plt+0x5690>
   1817c:	ldr	r5, [r4, #160]	; 0xa0
   18180:	mov	r0, r5
   18184:	bl	182e4 <__assert_fail@plt+0x5868>
   18188:	cmp	r0, #0
   1818c:	beq	1819c <__assert_fail@plt+0x5720>
   18190:	movw	r2, #55867	; 0xda3b
   18194:	movt	r2, #4
   18198:	b	1810c <__assert_fail@plt+0x5690>
   1819c:	ldr	r6, [r6, #160]	; 0xa0
   181a0:	mov	r0, r6
   181a4:	bl	18330 <__assert_fail@plt+0x58b4>
   181a8:	mov	r7, r0
   181ac:	mov	r0, r5
   181b0:	bl	18330 <__assert_fail@plt+0x58b4>
   181b4:	cmp	r7, r0
   181b8:	bge	181c8 <__assert_fail@plt+0x574c>
   181bc:	movw	r2, #55898	; 0xda5a
   181c0:	movt	r2, #4
   181c4:	b	1810c <__assert_fail@plt+0x5690>
   181c8:	bne	1823c <__assert_fail@plt+0x57c0>
   181cc:	movw	r0, #15980	; 0x3e6c
   181d0:	vldr	s16, [r5, #28]
   181d4:	vldr	s18, [r6, #28]
   181d8:	movt	r0, #6
   181dc:	ldrb	r0, [r0, #44]	; 0x2c
   181e0:	tst	r0, #8
   181e4:	bne	182b8 <__assert_fail@plt+0x583c>
   181e8:	ldr	r0, [r4]
   181ec:	movw	r1, #18892	; 0x49cc
   181f0:	movt	r1, #1
   181f4:	cmp	r0, r1
   181f8:	beq	18218 <__assert_fail@plt+0x579c>
   181fc:	movw	r1, #15584	; 0x3ce0
   18200:	movt	r1, #1
   18204:	cmp	r0, r1
   18208:	beq	18230 <__assert_fail@plt+0x57b4>
   1820c:	movw	r2, #56030	; 0xdade
   18210:	movt	r2, #4
   18214:	b	1810c <__assert_fail@plt+0x5690>
   18218:	vcmpe.f32	s16, s18
   1821c:	vmrs	APSR_nzcv, fpscr
   18220:	bmi	1823c <__assert_fail@plt+0x57c0>
   18224:	movw	r2, #55941	; 0xda85
   18228:	movt	r2, #4
   1822c:	b	1810c <__assert_fail@plt+0x5690>
   18230:	vcmpe.f32	s16, s18
   18234:	vmrs	APSR_nzcv, fpscr
   18238:	ble	18278 <__assert_fail@plt+0x57fc>
   1823c:	movw	r0, #15980	; 0x3e6c
   18240:	movt	r0, #6
   18244:	ldrb	r0, [r0, #44]	; 0x2c
   18248:	tst	r0, #8
   1824c:	bne	18284 <__assert_fail@plt+0x5808>
   18250:	ldr	r0, [r4, #156]	; 0x9c
   18254:	ldr	r1, [r4, #160]	; 0xa0
   18258:	mov	r5, #1
   1825c:	ldr	r2, [r0, #160]	; 0xa0
   18260:	str	r1, [r0, #160]	; 0xa0
   18264:	str	r2, [r4, #160]	; 0xa0
   18268:	mov	r0, r5
   1826c:	sub	sp, fp, #32
   18270:	vpop	{d8-d9}
   18274:	pop	{r4, r5, r6, r7, fp, pc}
   18278:	movw	r2, #55985	; 0xdab1
   1827c:	movt	r2, #4
   18280:	b	1810c <__assert_fail@plt+0x5690>
   18284:	movw	r5, #13640	; 0x3548
   18288:	movw	r0, #56048	; 0xdaf0
   1828c:	mov	r1, #24
   18290:	mov	r2, #1
   18294:	movt	r5, #6
   18298:	movt	r0, #4
   1829c:	ldr	r3, [r5]
   182a0:	bl	125f0 <fwrite@plt>
   182a4:	ldr	r0, [r5]
   182a8:	mov	r1, r4
   182ac:	mov	r2, #0
   182b0:	bl	16b9c <__assert_fail@plt+0x4120>
   182b4:	b	18250 <__assert_fail@plt+0x57d4>
   182b8:	movw	r0, #13640	; 0x3548
   182bc:	movw	r1, #55914	; 0xda6a
   182c0:	vcvt.f64.f32	d17, s18
   182c4:	vcvt.f64.f32	d16, s16
   182c8:	movt	r0, #6
   182cc:	vmov	r2, r3, d17
   182d0:	movt	r1, #4
   182d4:	vstr	d16, [sp]
   182d8:	ldr	r0, [r0]
   182dc:	bl	127c4 <fprintf@plt>
   182e0:	b	181e8 <__assert_fail@plt+0x576c>
   182e4:	push	{r4, r5, fp, lr}
   182e8:	add	fp, sp, #8
   182ec:	cmp	r0, #0
   182f0:	beq	18324 <__assert_fail@plt+0x58a8>
   182f4:	mov	r4, r0
   182f8:	mov	r5, #1
   182fc:	ldrb	r0, [r4, #16]
   18300:	cmp	r0, #0
   18304:	bne	18328 <__assert_fail@plt+0x58ac>
   18308:	ldr	r0, [r4, #156]	; 0x9c
   1830c:	bl	182e4 <__assert_fail@plt+0x5868>
   18310:	cmp	r0, #0
   18314:	bne	18328 <__assert_fail@plt+0x58ac>
   18318:	ldr	r4, [r4, #160]	; 0xa0
   1831c:	cmp	r4, #0
   18320:	bne	182fc <__assert_fail@plt+0x5880>
   18324:	mov	r5, #0
   18328:	mov	r0, r5
   1832c:	pop	{r4, r5, fp, pc}
   18330:	cmp	r0, #0
   18334:	moveq	r0, #0
   18338:	bxeq	lr
   1833c:	push	{r4, r5, fp, lr}
   18340:	add	fp, sp, #8
   18344:	mov	r4, r0
   18348:	ldr	r0, [r0, #156]	; 0x9c
   1834c:	bl	18330 <__assert_fail@plt+0x58b4>
   18350:	mov	r5, r0
   18354:	ldr	r0, [r4, #160]	; 0xa0
   18358:	bl	18330 <__assert_fail@plt+0x58b4>
   1835c:	ldr	r1, [r4, #24]
   18360:	cmp	r5, r0
   18364:	movhi	r0, r5
   18368:	cmp	r0, r1
   1836c:	movcc	r0, r1
   18370:	pop	{r4, r5, fp, pc}
   18374:	push	{r4, r5, fp, lr}
   18378:	add	fp, sp, #8
   1837c:	mov	r4, r1
   18380:	mov	r1, r2
   18384:	mov	r5, r0
   18388:	bl	17bdc <__assert_fail@plt+0x5160>
   1838c:	str	r4, [r0]
   18390:	mov	r2, #0
   18394:	mov	r3, #1
   18398:	ldr	r1, [r5, #4]
   1839c:	str	r2, [r0, #40]	; 0x28
   183a0:	str	r2, [r0, #12]
   183a4:	stmib	r0, {r1, r3}
   183a8:	pop	{r4, r5, fp, pc}
   183ac:	push	{r4, r5, fp, lr}
   183b0:	add	fp, sp, #8
   183b4:	ldr	r5, [r0, #12]
   183b8:	cmp	r5, #0
   183bc:	beq	183e8 <__assert_fail@plt+0x596c>
   183c0:	mov	r4, r0
   183c4:	bl	17bdc <__assert_fail@plt+0x5160>
   183c8:	str	r5, [r0]
   183cc:	mov	r2, #0
   183d0:	mov	r3, #1
   183d4:	ldr	r1, [r4, #4]
   183d8:	str	r2, [r0, #40]	; 0x28
   183dc:	str	r2, [r0, #12]
   183e0:	stmib	r0, {r1, r3}
   183e4:	pop	{r4, r5, fp, pc}
   183e8:	movw	r0, #56304	; 0xdbf0
   183ec:	movw	r1, #56329	; 0xdc09
   183f0:	movw	r3, #56336	; 0xdc10
   183f4:	mov	r2, #123	; 0x7b
   183f8:	movt	r0, #4
   183fc:	movt	r1, #4
   18400:	movt	r3, #4
   18404:	bl	12a7c <__assert_fail@plt>
   18408:	push	{r4, r5, r6, sl, fp, lr}
   1840c:	add	fp, sp, #16
   18410:	ldr	r5, [r0, #12]
   18414:	cmp	r5, #0
   18418:	beq	18444 <__assert_fail@plt+0x59c8>
   1841c:	mov	r1, #0
   18420:	mov	r4, r0
   18424:	mov	r6, #0
   18428:	bl	17bdc <__assert_fail@plt+0x5160>
   1842c:	str	r5, [r0]
   18430:	mov	r2, #1
   18434:	ldr	r1, [r4, #4]
   18438:	str	r6, [r0, #40]	; 0x28
   1843c:	stmib	r0, {r1, r2, r6}
   18440:	pop	{r4, r5, r6, sl, fp, pc}
   18444:	movw	r0, #56304	; 0xdbf0
   18448:	movw	r1, #56329	; 0xdc09
   1844c:	movw	r3, #56336	; 0xdc10
   18450:	mov	r2, #123	; 0x7b
   18454:	movt	r0, #4
   18458:	movt	r1, #4
   1845c:	movt	r3, #4
   18460:	bl	12a7c <__assert_fail@plt>
   18464:	push	{fp, lr}
   18468:	mov	fp, sp
   1846c:	cmp	r0, #0
   18470:	bne	185e0 <__assert_fail@plt+0x5b64>
   18474:	movw	r5, #13652	; 0x3554
   18478:	movw	r1, #56451	; 0xdc83
   1847c:	mov	r0, #0
   18480:	mov	r2, #5
   18484:	movt	r5, #6
   18488:	movt	r1, #4
   1848c:	ldr	r4, [r5]
   18490:	bl	1253c <dcgettext@plt>
   18494:	movw	r6, #15620	; 0x3d04
   18498:	mov	r1, r0
   1849c:	mov	r0, r4
   184a0:	movt	r6, #6
   184a4:	ldr	r2, [r6]
   184a8:	bl	127c4 <fprintf@plt>
   184ac:	movw	r1, #56525	; 0xdccd
   184b0:	mov	r0, #0
   184b4:	mov	r2, #5
   184b8:	movt	r1, #4
   184bc:	bl	1253c <dcgettext@plt>
   184c0:	ldr	r1, [r5]
   184c4:	bl	12a10 <fputs@plt>
   184c8:	movw	r1, #56663	; 0xdd57
   184cc:	mov	r0, #0
   184d0:	mov	r2, #5
   184d4:	movt	r1, #4
   184d8:	bl	1253c <dcgettext@plt>
   184dc:	ldr	r1, [r5]
   184e0:	bl	12a10 <fputs@plt>
   184e4:	movw	r1, #56871	; 0xde27
   184e8:	mov	r0, #0
   184ec:	mov	r2, #5
   184f0:	movt	r1, #4
   184f4:	bl	1253c <dcgettext@plt>
   184f8:	ldr	r1, [r5]
   184fc:	bl	12a10 <fputs@plt>
   18500:	movw	r1, #56956	; 0xde7c
   18504:	mov	r0, #0
   18508:	mov	r2, #5
   1850c:	movt	r1, #4
   18510:	bl	1253c <dcgettext@plt>
   18514:	ldr	r1, [r5]
   18518:	bl	12a10 <fputs@plt>
   1851c:	movw	r1, #57161	; 0xdf49
   18520:	mov	r0, #0
   18524:	mov	r2, #5
   18528:	movt	r1, #4
   1852c:	bl	1253c <dcgettext@plt>
   18530:	ldr	r1, [r5]
   18534:	bl	12a10 <fputs@plt>
   18538:	movw	r1, #57702	; 0xe166
   1853c:	mov	r0, #0
   18540:	mov	r2, #5
   18544:	movt	r1, #4
   18548:	bl	1253c <dcgettext@plt>
   1854c:	ldr	r1, [r5]
   18550:	bl	12a10 <fputs@plt>
   18554:	movw	r1, #57958	; 0xe266
   18558:	mov	r0, #0
   1855c:	mov	r2, #5
   18560:	movt	r1, #4
   18564:	bl	1253c <dcgettext@plt>
   18568:	ldr	r1, [r5]
   1856c:	bl	12a10 <fputs@plt>
   18570:	movw	r1, #57982	; 0xe27e
   18574:	mov	r0, #0
   18578:	mov	r2, #5
   1857c:	movt	r1, #4
   18580:	bl	1253c <dcgettext@plt>
   18584:	ldr	r1, [r5]
   18588:	bl	12a10 <fputs@plt>
   1858c:	movw	r1, #58041	; 0xe2b9
   18590:	mov	r0, #0
   18594:	mov	r2, #5
   18598:	movt	r1, #4
   1859c:	bl	1253c <dcgettext@plt>
   185a0:	ldr	r1, [r5]
   185a4:	bl	12a10 <fputs@plt>
   185a8:	mov	r0, #0
   185ac:	bl	18624 <__assert_fail@plt+0x5ba8>
   185b0:	movw	r1, #58110	; 0xe2fe
   185b4:	mov	r0, #0
   185b8:	mov	r2, #5
   185bc:	movt	r1, #4
   185c0:	bl	1253c <dcgettext@plt>
   185c4:	ldr	r1, [r5]
   185c8:	bl	12a10 <fputs@plt>
   185cc:	ldr	r0, [r5]
   185d0:	ldr	r1, [r6]
   185d4:	bl	230fc <__assert_fail@plt+0x10680>
   185d8:	mov	r0, #0
   185dc:	bl	12758 <exit@plt>
   185e0:	mov	r4, r0
   185e4:	movw	r0, #13640	; 0x3548
   185e8:	movw	r1, #56412	; 0xdc5c
   185ec:	mov	r2, #5
   185f0:	movt	r0, #6
   185f4:	movt	r1, #4
   185f8:	ldr	r5, [r0]
   185fc:	mov	r0, #0
   18600:	bl	1253c <dcgettext@plt>
   18604:	mov	r1, r0
   18608:	movw	r0, #15620	; 0x3d04
   1860c:	movt	r0, #6
   18610:	ldr	r2, [r0]
   18614:	mov	r0, r5
   18618:	bl	127c4 <fprintf@plt>
   1861c:	mov	r0, r4
   18620:	bl	12758 <exit@plt>
   18624:	push	{r4, r5, r6, sl, fp, lr}
   18628:	add	fp, sp, #16
   1862c:	movw	r1, #58759	; 0xe587
   18630:	mov	r4, r0
   18634:	mov	r0, #0
   18638:	mov	r2, #5
   1863c:	movt	r1, #4
   18640:	bl	1253c <dcgettext@plt>
   18644:	movw	r6, #13652	; 0x3554
   18648:	movt	r6, #6
   1864c:	ldr	r1, [r6]
   18650:	bl	12a10 <fputs@plt>
   18654:	ldr	r0, [r6]
   18658:	cmp	r4, #0
   1865c:	beq	18764 <__assert_fail@plt+0x5ce8>
   18660:	movw	r4, #58784	; 0xe5a0
   18664:	movw	r2, #63215	; 0xf6ef
   18668:	movw	r3, #58797	; 0xe5ad
   1866c:	movt	r4, #4
   18670:	movt	r2, #4
   18674:	movt	r3, #4
   18678:	mov	r1, r4
   1867c:	bl	127c4 <fprintf@plt>
   18680:	ldr	r0, [r6]
   18684:	movw	r2, #58869	; 0xe5f5
   18688:	movw	r3, #58873	; 0xe5f9
   1868c:	mov	r1, r4
   18690:	movt	r2, #4
   18694:	movt	r3, #4
   18698:	bl	127c4 <fprintf@plt>
   1869c:	ldr	r0, [r6]
   186a0:	movw	r2, #58926	; 0xe62e
   186a4:	movw	r3, #58932	; 0xe634
   186a8:	mov	r1, r4
   186ac:	movt	r2, #4
   186b0:	movt	r3, #4
   186b4:	bl	127c4 <fprintf@plt>
   186b8:	ldr	r0, [r6]
   186bc:	movw	r2, #58976	; 0xe660
   186c0:	movw	r3, #58983	; 0xe667
   186c4:	mov	r1, r4
   186c8:	movt	r2, #4
   186cc:	movt	r3, #4
   186d0:	bl	127c4 <fprintf@plt>
   186d4:	ldr	r0, [r6]
   186d8:	movw	r2, #62308	; 0xf364
   186dc:	movw	r3, #59021	; 0xe68d
   186e0:	mov	r1, r4
   186e4:	movt	r2, #4
   186e8:	movt	r3, #4
   186ec:	bl	127c4 <fprintf@plt>
   186f0:	ldr	r0, [r6]
   186f4:	movw	r2, #62224	; 0xf310
   186f8:	movw	r3, #59057	; 0xe6b1
   186fc:	mov	r1, r4
   18700:	movt	r2, #4
   18704:	movt	r3, #4
   18708:	bl	127c4 <fprintf@plt>
   1870c:	ldr	r0, [r6]
   18710:	movw	r2, #59158	; 0xe716
   18714:	movw	r3, #59135	; 0xe6ff
   18718:	mov	r1, r4
   1871c:	movt	r2, #4
   18720:	movt	r3, #4
   18724:	bl	127c4 <fprintf@plt>
   18728:	ldr	r0, [r6]
   1872c:	movw	r2, #60223	; 0xeb3f
   18730:	movw	r3, #59163	; 0xe71b
   18734:	mov	r1, r4
   18738:	movt	r2, #4
   1873c:	movt	r3, #4
   18740:	bl	127c4 <fprintf@plt>
   18744:	ldr	r0, [r6]
   18748:	movw	r2, #62687	; 0xf4df
   1874c:	movw	r3, #59201	; 0xe741
   18750:	mov	r1, r4
   18754:	movt	r2, #4
   18758:	movt	r3, #4
   1875c:	pop	{r4, r5, r6, sl, fp, lr}
   18760:	b	127c4 <fprintf@plt>
   18764:	movw	r4, #52407	; 0xccb7
   18768:	movw	r2, #58175	; 0xe33f
   1876c:	movw	r3, #63215	; 0xf6ef
   18770:	movt	r4, #4
   18774:	movt	r2, #4
   18778:	movt	r3, #4
   1877c:	mov	r1, r4
   18780:	bl	127c4 <fprintf@plt>
   18784:	ldr	r0, [r6]
   18788:	movw	r5, #58794	; 0xe5aa
   1878c:	movw	r3, #58869	; 0xe5f5
   18790:	mov	r1, r4
   18794:	movt	r5, #4
   18798:	movt	r3, #4
   1879c:	mov	r2, r5
   187a0:	bl	127c4 <fprintf@plt>
   187a4:	ldr	r0, [r6]
   187a8:	movw	r3, #58926	; 0xe62e
   187ac:	mov	r1, r4
   187b0:	mov	r2, r5
   187b4:	movt	r3, #4
   187b8:	bl	127c4 <fprintf@plt>
   187bc:	ldr	r0, [r6]
   187c0:	movw	r3, #58976	; 0xe660
   187c4:	mov	r1, r4
   187c8:	mov	r2, r5
   187cc:	movt	r3, #4
   187d0:	bl	127c4 <fprintf@plt>
   187d4:	ldr	r0, [r6]
   187d8:	movw	r3, #62308	; 0xf364
   187dc:	mov	r1, r4
   187e0:	mov	r2, r5
   187e4:	movt	r3, #4
   187e8:	bl	127c4 <fprintf@plt>
   187ec:	ldr	r0, [r6]
   187f0:	movw	r3, #62224	; 0xf310
   187f4:	mov	r1, r4
   187f8:	mov	r2, r5
   187fc:	movt	r3, #4
   18800:	bl	127c4 <fprintf@plt>
   18804:	ldr	r0, [r6]
   18808:	movw	r3, #59158	; 0xe716
   1880c:	mov	r1, r4
   18810:	mov	r2, r5
   18814:	movt	r3, #4
   18818:	bl	127c4 <fprintf@plt>
   1881c:	ldr	r0, [r6]
   18820:	movw	r3, #60223	; 0xeb3f
   18824:	mov	r1, r4
   18828:	mov	r2, r5
   1882c:	movt	r3, #4
   18830:	bl	127c4 <fprintf@plt>
   18834:	ldr	r0, [r6]
   18838:	movw	r3, #62687	; 0xf4df
   1883c:	mov	r1, r4
   18840:	mov	r2, r5
   18844:	movt	r3, #4
   18848:	pop	{r4, r5, r6, sl, fp, lr}
   1884c:	b	127c4 <fprintf@plt>
   18850:	bx	lr
   18854:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18858:	add	fp, sp, #24
   1885c:	movw	r7, #15936	; 0x3e40
   18860:	mov	r5, r0
   18864:	mov	r4, r2
   18868:	movt	r7, #6
   1886c:	ldrb	r0, [r7, #4]
   18870:	cmp	r0, #0
   18874:	beq	18894 <__assert_fail@plt+0x5e18>
   18878:	add	r4, r4, #16
   1887c:	movw	r0, #257	; 0x101
   18880:	strh	r0, [r7, #4]
   18884:	ldr	r0, [r4]
   18888:	str	r0, [r7, #8]
   1888c:	mov	r0, #0
   18890:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18894:	movw	r8, #15980	; 0x3e6c
   18898:	mov	r6, r1
   1889c:	mov	r0, r1
   188a0:	mov	r1, r4
   188a4:	movt	r8, #6
   188a8:	ldr	r2, [r8, #52]	; 0x34
   188ac:	blx	r2
   188b0:	cmp	r0, #0
   188b4:	beq	188f4 <__assert_fail@plt+0x5e78>
   188b8:	ldrb	r0, [r8, #14]
   188bc:	cmp	r0, #0
   188c0:	beq	188d8 <__assert_fail@plt+0x5e5c>
   188c4:	bl	127d0 <__errno_location@plt>
   188c8:	ldr	r1, [r0]
   188cc:	mvn	r0, #0
   188d0:	cmp	r1, #2
   188d4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   188d8:	ldrb	r0, [r7, #40]	; 0x28
   188dc:	cmp	r0, #0
   188e0:	beq	18948 <__assert_fail@plt+0x5ecc>
   188e4:	mov	r0, #1
   188e8:	strb	r0, [r7, #40]	; 0x28
   188ec:	mvn	r0, #0
   188f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   188f4:	ldr	r0, [r4, #16]!
   188f8:	cmp	r0, #0
   188fc:	bne	1887c <__assert_fail@plt+0x5e00>
   18900:	movw	r1, #51292	; 0xc85c
   18904:	mov	r0, #0
   18908:	mov	r2, #5
   1890c:	movt	r1, #4
   18910:	bl	1253c <dcgettext@plt>
   18914:	ldr	r1, [r8, #72]	; 0x48
   18918:	mov	r5, r0
   1891c:	mov	r0, #0
   18920:	mov	r2, r6
   18924:	bl	2f2ec <__assert_fail@plt+0x1c870>
   18928:	mov	r3, r0
   1892c:	mov	r0, #0
   18930:	mov	r1, #0
   18934:	mov	r2, r5
   18938:	bl	12674 <error@plt>
   1893c:	mov	r0, #1
   18940:	str	r0, [r7, #28]
   18944:	b	1887c <__assert_fail@plt+0x5e00>
   18948:	bl	127d0 <__errno_location@plt>
   1894c:	ldr	r1, [r8, #72]	; 0x48
   18950:	ldr	r4, [r0]
   18954:	mov	r0, #0
   18958:	mov	r2, r5
   1895c:	bl	2f2ec <__assert_fail@plt+0x1c870>
   18960:	movw	r2, #9967	; 0x26ef
   18964:	mov	r3, r0
   18968:	mov	r0, #0
   1896c:	mov	r1, r4
   18970:	movt	r2, #5
   18974:	bl	12674 <error@plt>
   18978:	mov	r0, #1
   1897c:	str	r0, [r7, #28]
   18980:	mov	r0, #1
   18984:	strb	r0, [r7, #40]	; 0x28
   18988:	mvn	r0, #0
   1898c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18990:	push	{r4, r5, fp, lr}
   18994:	add	fp, sp, #8
   18998:	movw	r5, #15936	; 0x3e40
   1899c:	mov	r4, r0
   189a0:	movt	r5, #6
   189a4:	ldrb	r0, [r5, #40]	; 0x28
   189a8:	cmp	r0, #0
   189ac:	beq	189bc <__assert_fail@plt+0x5f40>
   189b0:	mov	r0, #1
   189b4:	strb	r0, [r5, #40]	; 0x28
   189b8:	pop	{r4, r5, fp, pc}
   189bc:	movw	r0, #15980	; 0x3e6c
   189c0:	mov	r2, r1
   189c4:	movt	r0, #6
   189c8:	ldr	r1, [r0, #72]	; 0x48
   189cc:	mov	r0, #0
   189d0:	bl	2f2ec <__assert_fail@plt+0x1c870>
   189d4:	movw	r2, #9967	; 0x26ef
   189d8:	mov	r3, r0
   189dc:	mov	r0, #0
   189e0:	mov	r1, r4
   189e4:	movt	r2, #5
   189e8:	bl	12674 <error@plt>
   189ec:	mov	r0, #1
   189f0:	str	r0, [r5, #28]
   189f4:	mov	r0, #1
   189f8:	strb	r0, [r5, #40]	; 0x28
   189fc:	pop	{r4, r5, fp, pc}
   18a00:	push	{r4, r5, r6, r7, fp, lr}
   18a04:	add	fp, sp, #16
   18a08:	vpush	{d8}
   18a0c:	sub	sp, sp, #392	; 0x188
   18a10:	mov	r5, sp
   18a14:	mov	r0, r5
   18a18:	bl	12524 <uname@plt>
   18a1c:	cmp	r0, #0
   18a20:	beq	18a38 <__assert_fail@plt+0x5fbc>
   18a24:	mov	r4, #1
   18a28:	mov	r0, r4
   18a2c:	sub	sp, fp, #24
   18a30:	vpop	{d8}
   18a34:	pop	{r4, r5, r6, r7, fp, pc}
   18a38:	add	r0, r5, #130	; 0x82
   18a3c:	mov	r1, #0
   18a40:	mov	r4, #0
   18a44:	bl	1283c <strtod@plt>
   18a48:	movw	r0, #58176	; 0xe340
   18a4c:	mov	r1, r5
   18a50:	vcvt.f32.f64	s16, d0
   18a54:	movt	r0, #4
   18a58:	bl	123d4 <strcmp@plt>
   18a5c:	cmp	r0, #0
   18a60:	beq	18a9c <__assert_fail@plt+0x6020>
   18a64:	vldr	s0, [pc, #80]	; 18abc <__assert_fail@plt+0x6040>
   18a68:	movw	r0, #58182	; 0xe346
   18a6c:	mov	r1, sp
   18a70:	movt	r0, #4
   18a74:	vcmpe.f32	s16, s0
   18a78:	vmrs	APSR_nzcv, fpscr
   18a7c:	movwge	r4, #1
   18a80:	bl	123d4 <strcmp@plt>
   18a84:	cmp	r0, #0
   18a88:	movne	r4, #1
   18a8c:	mov	r0, r4
   18a90:	sub	sp, fp, #24
   18a94:	vpop	{d8}
   18a98:	pop	{r4, r5, r6, r7, fp, pc}
   18a9c:	vldr	s0, [pc, #28]	; 18ac0 <__assert_fail@plt+0x6044>
   18aa0:	vcmpe.f32	s16, s0
   18aa4:	vmrs	APSR_nzcv, fpscr
   18aa8:	movwge	r4, #1
   18aac:	mov	r0, r4
   18ab0:	sub	sp, fp, #24
   18ab4:	vpop	{d8}
   18ab8:	pop	{r4, r5, r6, r7, fp, pc}
   18abc:	submi	r6, r6, r6, ror #12
   18ac0:	andmi	ip, ip, sp, asr #25
   18ac4:	push	{r4, sl, fp, lr}
   18ac8:	add	fp, sp, #8
   18acc:	movw	r4, #15936	; 0x3e40
   18ad0:	movt	r4, #6
   18ad4:	ldrb	r0, [r4, #32]
   18ad8:	cmp	r0, #0
   18adc:	popeq	{r4, sl, fp, pc}
   18ae0:	bl	15fa0 <__assert_fail@plt+0x3524>
   18ae4:	bl	18af4 <__assert_fail@plt+0x6078>
   18ae8:	mov	r0, #0
   18aec:	strb	r0, [r4, #32]
   18af0:	pop	{r4, sl, fp, pc}
   18af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18af8:	add	fp, sp, #28
   18afc:	sub	sp, sp, #4
   18b00:	cmp	r0, #0
   18b04:	beq	18bbc <__assert_fail@plt+0x6140>
   18b08:	movw	r6, #15936	; 0x3e40
   18b0c:	movw	r7, #16808	; 0x41a8
   18b10:	movw	r8, #40496	; 0x9e30
   18b14:	movw	sl, #13672	; 0x3568
   18b18:	movw	r5, #18812	; 0x497c
   18b1c:	mov	r4, r0
   18b20:	mov	r9, #0
   18b24:	movt	r6, #6
   18b28:	movt	r7, #1
   18b2c:	movt	r8, #1
   18b30:	movt	sl, #6
   18b34:	movt	r5, #1
   18b38:	ldrb	r0, [r6, #32]
   18b3c:	cmp	r0, #0
   18b40:	beq	18bc4 <__assert_fail@plt+0x6148>
   18b44:	ldr	r0, [r4, #156]	; 0x9c
   18b48:	bl	18af4 <__assert_fail@plt+0x6078>
   18b4c:	ldr	r0, [r4]
   18b50:	cmp	r0, r7
   18b54:	cmpne	r0, r5
   18b58:	bne	18b74 <__assert_fail@plt+0x60f8>
   18b5c:	mov	r2, r4
   18b60:	ldrb	r0, [r2, #40]!	; 0x28
   18b64:	cmp	r0, #0
   18b68:	ldrne	r0, [r4, #116]	; 0x74
   18b6c:	cmpne	r0, #0
   18b70:	bne	18b84 <__assert_fail@plt+0x6108>
   18b74:	ldr	r4, [r4, #160]	; 0xa0
   18b78:	cmp	r4, #0
   18b7c:	bne	18b38 <__assert_fail@plt+0x60bc>
   18b80:	b	18bbc <__assert_fail@plt+0x6140>
   18b84:	ldr	r0, [r4, #144]	; 0x90
   18b88:	mov	r1, r8
   18b8c:	bl	211c8 <__assert_fail@plt+0xe74c>
   18b90:	ldr	r0, [r4, #144]	; 0x90
   18b94:	ldr	r1, [sl]
   18b98:	cmp	r0, r1
   18b9c:	beq	18b74 <__assert_fail@plt+0x60f8>
   18ba0:	bl	2f94c <__assert_fail@plt+0x1ced0>
   18ba4:	ldr	r0, [r4, #144]	; 0x90
   18ba8:	bl	32c40 <__assert_fail@plt+0x201c4>
   18bac:	str	r9, [r4, #144]	; 0x90
   18bb0:	ldr	r4, [r4, #160]	; 0xa0
   18bb4:	cmp	r4, #0
   18bb8:	bne	18b38 <__assert_fail@plt+0x60bc>
   18bbc:	sub	sp, fp, #28
   18bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bc4:	movw	r0, #59232	; 0xe760
   18bc8:	movw	r1, #56329	; 0xdc09
   18bcc:	movw	r3, #59259	; 0xe77b
   18bd0:	mov	r2, #396	; 0x18c
   18bd4:	movt	r0, #4
   18bd8:	movt	r1, #4
   18bdc:	movt	r3, #4
   18be0:	bl	12a7c <__assert_fail@plt>
   18be4:	push	{r4, r5, fp, lr}
   18be8:	add	fp, sp, #8
   18bec:	cmp	r0, #0
   18bf0:	popeq	{r4, r5, fp, pc}
   18bf4:	movw	r5, #16804	; 0x41a4
   18bf8:	mov	r4, r0
   18bfc:	movt	r5, #1
   18c00:	ldr	r0, [r4, #156]	; 0x9c
   18c04:	bl	18be4 <__assert_fail@plt+0x6168>
   18c08:	ldr	r0, [r4]
   18c0c:	cmp	r0, r5
   18c10:	bne	18c2c <__assert_fail@plt+0x61b0>
   18c14:	mov	r0, r4
   18c18:	ldrb	r1, [r0, #40]!	; 0x28
   18c1c:	cmp	r1, #0
   18c20:	ldrne	r1, [r4, #116]	; 0x74
   18c24:	cmpne	r1, #0
   18c28:	bne	18c3c <__assert_fail@plt+0x61c0>
   18c2c:	ldr	r4, [r4, #160]	; 0xa0
   18c30:	cmp	r4, #0
   18c34:	bne	18c00 <__assert_fail@plt+0x6184>
   18c38:	b	18c54 <__assert_fail@plt+0x61d8>
   18c3c:	add	r0, r0, #4
   18c40:	add	r1, r4, #88	; 0x58
   18c44:	bl	20a40 <__assert_fail@plt+0xdfc4>
   18c48:	ldr	r4, [r4, #160]	; 0xa0
   18c4c:	cmp	r4, #0
   18c50:	bne	18c00 <__assert_fail@plt+0x6184>
   18c54:	pop	{r4, r5, fp, pc}
   18c58:	push	{r4, r5, fp, lr}
   18c5c:	add	fp, sp, #8
   18c60:	sub	sp, sp, #8
   18c64:	mov	r0, #8
   18c68:	bl	309ec <__assert_fail@plt+0x1df70>
   18c6c:	movw	r5, #13672	; 0x3568
   18c70:	movt	r5, #6
   18c74:	str	r0, [r5]
   18c78:	bl	2f8d4 <__assert_fail@plt+0x1ce58>
   18c7c:	cmp	r0, #0
   18c80:	subeq	sp, fp, #8
   18c84:	popeq	{r4, r5, fp, pc}
   18c88:	bl	127d0 <__errno_location@plt>
   18c8c:	ldr	r4, [r0]
   18c90:	movw	r1, #58190	; 0xe34e
   18c94:	mov	r0, #0
   18c98:	mov	r2, #5
   18c9c:	movt	r1, #4
   18ca0:	bl	1253c <dcgettext@plt>
   18ca4:	mov	r2, r0
   18ca8:	ldr	r0, [r5]
   18cac:	ldr	r1, [r0]
   18cb0:	cmn	r1, #1
   18cb4:	bgt	18ce8 <__assert_fail@plt+0x626c>
   18cb8:	ldr	r0, [r0, #4]
   18cbc:	movw	r1, #58175	; 0xe33f
   18cc0:	movw	r3, #152	; 0x98
   18cc4:	movt	r1, #4
   18cc8:	movt	r3, #5
   18ccc:	cmp	r0, #0
   18cd0:	moveq	r3, r1
   18cd4:	moveq	r0, r1
   18cd8:	str	r0, [sp]
   18cdc:	mov	r0, #1
   18ce0:	mov	r1, r4
   18ce4:	bl	12674 <error@plt>
   18ce8:	movw	r3, #58175	; 0xe33f
   18cec:	movt	r3, #4
   18cf0:	mov	r0, r3
   18cf4:	str	r0, [sp]
   18cf8:	mov	r0, #1
   18cfc:	mov	r1, r4
   18d00:	bl	12674 <error@plt>
   18d04:	push	{r4, r5, fp, lr}
   18d08:	add	fp, sp, #8
   18d0c:	sub	sp, sp, #8
   18d10:	bl	15fa0 <__assert_fail@plt+0x3524>
   18d14:	cmp	r0, #0
   18d18:	beq	18d6c <__assert_fail@plt+0x62f0>
   18d1c:	movw	r1, #35812	; 0x8be4
   18d20:	mov	r4, r0
   18d24:	movt	r1, #1
   18d28:	bl	18eac <__assert_fail@plt+0x6430>
   18d2c:	movw	r5, #15936	; 0x3e40
   18d30:	movt	r5, #6
   18d34:	ldrb	r0, [r5, #32]
   18d38:	cmp	r0, #0
   18d3c:	beq	18d50 <__assert_fail@plt+0x62d4>
   18d40:	bl	15fa0 <__assert_fail@plt+0x3524>
   18d44:	bl	18af4 <__assert_fail@plt+0x6078>
   18d48:	mov	r0, #0
   18d4c:	strb	r0, [r5, #32]
   18d50:	ldr	r0, [r5, #36]	; 0x24
   18d54:	bl	19fb8 <__assert_fail@plt+0x753c>
   18d58:	movw	r1, #36580	; 0x8ee4
   18d5c:	mov	r0, r4
   18d60:	movt	r1, #1
   18d64:	bl	18eac <__assert_fail@plt+0x6430>
   18d68:	b	18d7c <__assert_fail@plt+0x6300>
   18d6c:	movw	r0, #15936	; 0x3e40
   18d70:	movt	r0, #6
   18d74:	ldr	r0, [r0, #36]	; 0x24
   18d78:	bl	19fb8 <__assert_fail@plt+0x753c>
   18d7c:	movw	r5, #13672	; 0x3568
   18d80:	movt	r5, #6
   18d84:	ldr	r0, [r5]
   18d88:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   18d8c:	cmp	r0, #0
   18d90:	bne	18e34 <__assert_fail@plt+0x63b8>
   18d94:	ldr	r0, [r5]
   18d98:	bl	2f94c <__assert_fail@plt+0x1ced0>
   18d9c:	ldr	r0, [r5]
   18da0:	bl	32c40 <__assert_fail@plt+0x201c4>
   18da4:	mov	r0, #0
   18da8:	str	r0, [r5]
   18dac:	bl	2181c <__assert_fail@plt+0xeda0>
   18db0:	cmp	r0, #0
   18db4:	beq	18dc0 <__assert_fail@plt+0x6344>
   18db8:	bl	2183c <__assert_fail@plt+0xedc0>
   18dbc:	bl	217f4 <__assert_fail@plt+0xed78>
   18dc0:	movw	r0, #13652	; 0x3554
   18dc4:	movt	r0, #6
   18dc8:	ldr	r0, [r0]
   18dcc:	bl	32bd8 <__assert_fail@plt+0x2015c>
   18dd0:	cmn	r0, #1
   18dd4:	beq	18de0 <__assert_fail@plt+0x6364>
   18dd8:	sub	sp, fp, #8
   18ddc:	pop	{r4, r5, fp, pc}
   18de0:	bl	127d0 <__errno_location@plt>
   18de4:	ldr	r4, [r0]
   18de8:	movw	r0, #15980	; 0x3e6c
   18dec:	movw	r2, #58235	; 0xe37b
   18df0:	movt	r0, #6
   18df4:	movt	r2, #4
   18df8:	ldr	r1, [r0, #72]	; 0x48
   18dfc:	mov	r0, #0
   18e00:	bl	2f2ec <__assert_fail@plt+0x1c870>
   18e04:	movw	r2, #9967	; 0x26ef
   18e08:	mov	r3, r0
   18e0c:	mov	r0, #0
   18e10:	mov	r1, r4
   18e14:	movt	r2, #5
   18e18:	bl	12674 <error@plt>
   18e1c:	movw	r0, #15936	; 0x3e40
   18e20:	mov	r1, #1
   18e24:	movt	r0, #6
   18e28:	str	r1, [r0, #28]
   18e2c:	sub	sp, fp, #8
   18e30:	pop	{r4, r5, fp, pc}
   18e34:	bl	127d0 <__errno_location@plt>
   18e38:	ldr	r4, [r0]
   18e3c:	movw	r1, #59313	; 0xe7b1
   18e40:	mov	r0, #0
   18e44:	mov	r2, #5
   18e48:	movt	r1, #4
   18e4c:	bl	1253c <dcgettext@plt>
   18e50:	mov	r2, r0
   18e54:	ldr	r0, [r5]
   18e58:	ldr	r1, [r0]
   18e5c:	cmn	r1, #1
   18e60:	bgt	18e88 <__assert_fail@plt+0x640c>
   18e64:	ldr	r0, [r0, #4]
   18e68:	movw	r1, #58175	; 0xe33f
   18e6c:	movw	r3, #152	; 0x98
   18e70:	movt	r1, #4
   18e74:	movt	r3, #5
   18e78:	cmp	r0, #0
   18e7c:	moveq	r3, r1
   18e80:	moveq	r0, r1
   18e84:	b	18e94 <__assert_fail@plt+0x6418>
   18e88:	movw	r3, #58175	; 0xe33f
   18e8c:	movt	r3, #4
   18e90:	mov	r0, r3
   18e94:	str	r0, [sp]
   18e98:	mov	r0, #0
   18e9c:	mov	r1, r4
   18ea0:	bl	12674 <error@plt>
   18ea4:	mov	r0, #1
   18ea8:	bl	124ac <_exit@plt>
   18eac:	push	{r4, r5, fp, lr}
   18eb0:	add	fp, sp, #8
   18eb4:	mov	r4, r1
   18eb8:	mov	r5, r0
   18ebc:	ldr	r0, [r5, #156]	; 0x9c
   18ec0:	cmp	r0, #0
   18ec4:	movne	r1, r4
   18ec8:	blne	18eac <__assert_fail@plt+0x6430>
   18ecc:	mov	r0, r5
   18ed0:	blx	r4
   18ed4:	ldr	r5, [r5, #160]	; 0xa0
   18ed8:	cmp	r5, #0
   18edc:	popeq	{r4, r5, fp, pc}
   18ee0:	b	18ebc <__assert_fail@plt+0x6440>
   18ee4:	ldr	r1, [r0]
   18ee8:	movw	r2, #16984	; 0x4258
   18eec:	movt	r2, #1
   18ef0:	cmp	r1, r2
   18ef4:	beq	18f14 <__assert_fail@plt+0x6498>
   18ef8:	movw	r2, #16832	; 0x41c0
   18efc:	movt	r2, #1
   18f00:	cmp	r1, r2
   18f04:	movwne	r2, #16924	; 0x421c
   18f08:	movtne	r2, #1
   18f0c:	cmpne	r1, r2
   18f10:	bne	18f20 <__assert_fail@plt+0x64a4>
   18f14:	mov	r1, #0
   18f18:	str	r1, [r0, #44]	; 0x2c
   18f1c:	bx	lr
   18f20:	movw	r2, #43860	; 0xab54
   18f24:	movt	r2, #1
   18f28:	cmp	r1, r2
   18f2c:	bxne	lr
   18f30:	mov	r1, #0
   18f34:	str	r1, [r0, #44]	; 0x2c
   18f38:	bx	lr
   18f3c:	push	{r4, sl, fp, lr}
   18f40:	add	fp, sp, #8
   18f44:	mov	r4, r0
   18f48:	movw	r0, #15980	; 0x3e6c
   18f4c:	mov	r2, r1
   18f50:	movt	r0, #6
   18f54:	ldr	r1, [r0, #72]	; 0x48
   18f58:	mov	r0, #0
   18f5c:	bl	2f2ec <__assert_fail@plt+0x1c870>
   18f60:	movw	r2, #9967	; 0x26ef
   18f64:	mov	r3, r0
   18f68:	mov	r0, #0
   18f6c:	mov	r1, r4
   18f70:	movt	r2, #5
   18f74:	bl	12674 <error@plt>
   18f78:	movw	r0, #15936	; 0x3e40
   18f7c:	mov	r1, #1
   18f80:	movt	r0, #6
   18f84:	str	r1, [r0, #28]
   18f88:	pop	{r4, sl, fp, pc}
   18f8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f90:	add	fp, sp, #24
   18f94:	sub	sp, sp, #8
   18f98:	movw	r8, #15936	; 0x3e40
   18f9c:	mov	r4, r1
   18fa0:	mov	r5, r0
   18fa4:	movt	r8, #6
   18fa8:	ldr	r1, [r8, #16]
   18fac:	cmn	r1, #100	; 0x64
   18fb0:	beq	18fbc <__assert_fail@plt+0x6540>
   18fb4:	cmn	r1, #1
   18fb8:	ble	19070 <__assert_fail@plt+0x65f4>
   18fbc:	ldr	r0, [r8]
   18fc0:	cmp	r0, #0
   18fc4:	beq	18fe8 <__assert_fail@plt+0x656c>
   18fc8:	mov	r0, #256	; 0x100
   18fcc:	mov	r2, r5
   18fd0:	mov	r3, r4
   18fd4:	str	r0, [sp]
   18fd8:	mov	r0, #3
   18fdc:	bl	125b4 <__fxstatat64@plt>
   18fe0:	sub	sp, fp, #24
   18fe4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18fe8:	mov	r6, #0
   18fec:	mov	r0, #3
   18ff0:	mov	r2, r5
   18ff4:	mov	r3, r4
   18ff8:	str	r6, [sp]
   18ffc:	bl	125b4 <__fxstatat64@plt>
   19000:	cmp	r0, #0
   19004:	beq	19044 <__assert_fail@plt+0x65c8>
   19008:	mov	r7, r0
   1900c:	bl	127d0 <__errno_location@plt>
   19010:	ldr	r0, [r0]
   19014:	cmp	r0, #20
   19018:	beq	19028 <__assert_fail@plt+0x65ac>
   1901c:	cmp	r0, #2
   19020:	mov	r6, r7
   19024:	bne	19044 <__assert_fail@plt+0x65c8>
   19028:	movw	r0, #15980	; 0x3e6c
   1902c:	movt	r0, #6
   19030:	ldrb	r0, [r0, #44]	; 0x2c
   19034:	tst	r0, #2
   19038:	bne	19050 <__assert_fail@plt+0x65d4>
   1903c:	ldr	r1, [r8, #16]
   19040:	b	18fc8 <__assert_fail@plt+0x654c>
   19044:	mov	r0, r6
   19048:	sub	sp, fp, #24
   1904c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19050:	movw	r0, #13640	; 0x3548
   19054:	movw	r1, #59361	; 0xe7e1
   19058:	mov	r2, r5
   1905c:	movt	r0, #6
   19060:	movt	r1, #4
   19064:	ldr	r0, [r0]
   19068:	bl	127c4 <fprintf@plt>
   1906c:	b	1903c <__assert_fail@plt+0x65c0>
   19070:	movw	r0, #58251	; 0xe38b
   19074:	movw	r1, #56329	; 0xdc09
   19078:	movw	r3, #58273	; 0xe3a1
   1907c:	movw	r2, #605	; 0x25d
   19080:	movt	r0, #4
   19084:	movt	r1, #4
   19088:	movt	r3, #4
   1908c:	bl	12a7c <__assert_fail@plt>
   19090:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19094:	add	fp, sp, #24
   19098:	sub	sp, sp, #8
   1909c:	movw	r8, #15936	; 0x3e40
   190a0:	mov	r4, r1
   190a4:	mov	r5, r0
   190a8:	movt	r8, #6
   190ac:	ldr	r1, [r8, #16]
   190b0:	cmn	r1, #100	; 0x64
   190b4:	beq	190c0 <__assert_fail@plt+0x6644>
   190b8:	cmn	r1, #1
   190bc:	ble	19164 <__assert_fail@plt+0x66e8>
   190c0:	mov	r6, #0
   190c4:	mov	r0, #3
   190c8:	mov	r2, r5
   190cc:	mov	r3, r4
   190d0:	str	r6, [sp]
   190d4:	bl	125b4 <__fxstatat64@plt>
   190d8:	cmp	r0, #0
   190dc:	beq	19138 <__assert_fail@plt+0x66bc>
   190e0:	mov	r7, r0
   190e4:	bl	127d0 <__errno_location@plt>
   190e8:	ldr	r0, [r0]
   190ec:	cmp	r0, #20
   190f0:	beq	19100 <__assert_fail@plt+0x6684>
   190f4:	cmp	r0, #2
   190f8:	mov	r6, r7
   190fc:	bne	19138 <__assert_fail@plt+0x66bc>
   19100:	movw	r0, #15980	; 0x3e6c
   19104:	movt	r0, #6
   19108:	ldrb	r0, [r0, #44]	; 0x2c
   1910c:	tst	r0, #2
   19110:	bne	19144 <__assert_fail@plt+0x66c8>
   19114:	ldr	r1, [r8, #16]
   19118:	mov	r0, #256	; 0x100
   1911c:	mov	r2, r5
   19120:	mov	r3, r4
   19124:	str	r0, [sp]
   19128:	mov	r0, #3
   1912c:	bl	125b4 <__fxstatat64@plt>
   19130:	sub	sp, fp, #24
   19134:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19138:	mov	r0, r6
   1913c:	sub	sp, fp, #24
   19140:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19144:	movw	r0, #13640	; 0x3548
   19148:	movw	r1, #59361	; 0xe7e1
   1914c:	mov	r2, r5
   19150:	movt	r0, #6
   19154:	movt	r1, #4
   19158:	ldr	r0, [r0]
   1915c:	bl	127c4 <fprintf@plt>
   19160:	b	19114 <__assert_fail@plt+0x6698>
   19164:	movw	r0, #58251	; 0xe38b
   19168:	movw	r1, #56329	; 0xdc09
   1916c:	movw	r3, #58319	; 0xe3cf
   19170:	mov	r2, #636	; 0x27c
   19174:	movt	r0, #4
   19178:	movt	r1, #4
   1917c:	movt	r3, #4
   19180:	bl	12a7c <__assert_fail@plt>
   19184:	push	{fp, lr}
   19188:	mov	fp, sp
   1918c:	sub	sp, sp, #8
   19190:	mov	r2, r0
   19194:	movw	r0, #15936	; 0x3e40
   19198:	mov	r3, r1
   1919c:	movt	r0, #6
   191a0:	ldr	r1, [r0, #16]
   191a4:	cmn	r1, #1
   191a8:	bgt	191b4 <__assert_fail@plt+0x6738>
   191ac:	cmn	r1, #100	; 0x64
   191b0:	bne	191cc <__assert_fail@plt+0x6750>
   191b4:	mov	r0, #256	; 0x100
   191b8:	str	r0, [sp]
   191bc:	mov	r0, #3
   191c0:	bl	125b4 <__fxstatat64@plt>
   191c4:	mov	sp, fp
   191c8:	pop	{fp, pc}
   191cc:	movw	r0, #58365	; 0xe3fd
   191d0:	movw	r1, #56329	; 0xdc09
   191d4:	movw	r3, #58421	; 0xe435
   191d8:	movw	r2, #653	; 0x28d
   191dc:	movt	r0, #4
   191e0:	movt	r1, #4
   191e4:	movt	r3, #4
   191e8:	bl	12a7c <__assert_fail@plt>
   191ec:	push	{r4, r5, fp, lr}
   191f0:	add	fp, sp, #8
   191f4:	sub	sp, sp, #8
   191f8:	mov	r5, r0
   191fc:	movw	r0, #13712	; 0x3590
   19200:	mov	r4, r1
   19204:	movw	r1, #58467	; 0xe463
   19208:	movt	r0, #6
   1920c:	movt	r1, #4
   19210:	ldrd	r2, [r0]
   19214:	adds	r2, r2, #1
   19218:	adc	r3, r3, #0
   1921c:	strd	r2, [r0]
   19220:	movw	r0, #13640	; 0x3548
   19224:	mov	r2, r5
   19228:	movt	r0, #6
   1922c:	ldr	r0, [r0]
   19230:	bl	127c4 <fprintf@plt>
   19234:	movw	r0, #15980	; 0x3e6c
   19238:	movt	r0, #6
   1923c:	ldr	r0, [r0, #48]	; 0x30
   19240:	cmp	r0, #0
   19244:	beq	19280 <__assert_fail@plt+0x6804>
   19248:	cmp	r0, #2
   1924c:	beq	1926c <__assert_fail@plt+0x67f0>
   19250:	cmp	r0, #1
   19254:	bne	192bc <__assert_fail@plt+0x6840>
   19258:	mov	r0, r5
   1925c:	mov	r1, r4
   19260:	sub	sp, fp, #8
   19264:	pop	{r4, r5, fp, lr}
   19268:	b	19090 <__assert_fail@plt+0x6614>
   1926c:	mov	r0, r5
   19270:	mov	r1, r4
   19274:	sub	sp, fp, #8
   19278:	pop	{r4, r5, fp, lr}
   1927c:	b	18f8c <__assert_fail@plt+0x6510>
   19280:	movw	r0, #15936	; 0x3e40
   19284:	movt	r0, #6
   19288:	ldr	r1, [r0, #16]
   1928c:	cmn	r1, #1
   19290:	bgt	1929c <__assert_fail@plt+0x6820>
   19294:	cmn	r1, #100	; 0x64
   19298:	bne	192dc <__assert_fail@plt+0x6860>
   1929c:	mov	r0, #256	; 0x100
   192a0:	mov	r2, r5
   192a4:	mov	r3, r4
   192a8:	str	r0, [sp]
   192ac:	mov	r0, #3
   192b0:	bl	125b4 <__fxstatat64@plt>
   192b4:	sub	sp, fp, #8
   192b8:	pop	{r4, r5, fp, pc}
   192bc:	movw	r0, #55401	; 0xd869
   192c0:	movw	r1, #56329	; 0xdc09
   192c4:	movw	r3, #58484	; 0xe474
   192c8:	movw	r2, #677	; 0x2a5
   192cc:	movt	r0, #4
   192d0:	movt	r1, #4
   192d4:	movt	r3, #4
   192d8:	bl	12a7c <__assert_fail@plt>
   192dc:	movw	r0, #58365	; 0xe3fd
   192e0:	movw	r1, #56329	; 0xdc09
   192e4:	movw	r3, #58421	; 0xe435
   192e8:	movw	r2, #653	; 0x28d
   192ec:	movt	r0, #4
   192f0:	movt	r1, #4
   192f4:	movt	r3, #4
   192f8:	bl	12a7c <__assert_fail@plt>
   192fc:	movw	r0, #15980	; 0x3e6c
   19300:	movt	r0, #6
   19304:	ldr	r0, [r0, #48]	; 0x30
   19308:	cmp	r0, #1
   1930c:	moveq	r0, #1
   19310:	bxeq	lr
   19314:	cmp	r0, #2
   19318:	movne	r0, #0
   1931c:	bxne	lr
   19320:	movw	r0, #15936	; 0x3e40
   19324:	movt	r0, #6
   19328:	ldr	r0, [r0]
   1932c:	clz	r0, r0
   19330:	lsr	r0, r0, #5
   19334:	bx	lr
   19338:	push	{r4, r5, fp, lr}
   1933c:	add	fp, sp, #8
   19340:	mov	r4, r3
   19344:	ldr	r3, [r0]
   19348:	mov	r5, r0
   1934c:	cmp	r3, #0
   19350:	beq	193ac <__assert_fail@plt+0x6930>
   19354:	and	r0, r3, #61440	; 0xf000
   19358:	cmp	r0, #40960	; 0xa000
   1935c:	bne	19390 <__assert_fail@plt+0x6914>
   19360:	movw	r0, #15980	; 0x3e6c
   19364:	movt	r0, #6
   19368:	ldr	r0, [r0, #48]	; 0x30
   1936c:	cmp	r0, #1
   19370:	beq	19414 <__assert_fail@plt+0x6998>
   19374:	cmp	r0, #2
   19378:	bne	19390 <__assert_fail@plt+0x6914>
   1937c:	movw	r0, #15936	; 0x3e40
   19380:	movt	r0, #6
   19384:	ldr	r0, [r0]
   19388:	cmp	r0, #0
   1938c:	beq	19414 <__assert_fail@plt+0x6998>
   19390:	movw	r1, #15936	; 0x3e40
   19394:	mov	r0, #1
   19398:	movt	r1, #6
   1939c:	str	r3, [r1, #8]
   193a0:	strb	r0, [r1, #5]
   193a4:	str	r3, [r4, #16]
   193a8:	pop	{r4, r5, fp, pc}
   193ac:	ldr	r0, [fp, #8]
   193b0:	cmp	r0, #0
   193b4:	beq	193d4 <__assert_fail@plt+0x6958>
   193b8:	movw	r0, #15936	; 0x3e40
   193bc:	mov	r1, #0
   193c0:	movt	r0, #6
   193c4:	str	r1, [r0, #8]
   193c8:	strh	r1, [r0, #4]
   193cc:	mov	r0, #1
   193d0:	pop	{r4, r5, fp, pc}
   193d4:	mov	r0, r1
   193d8:	mov	r1, r2
   193dc:	mov	r2, r4
   193e0:	bl	18854 <__assert_fail@plt+0x5dd8>
   193e4:	mov	r1, r0
   193e8:	mov	r0, #0
   193ec:	cmp	r1, #0
   193f0:	popne	{r4, r5, fp, pc}
   193f4:	ldr	r1, [r4, #16]
   193f8:	movw	r2, #15936	; 0x3e40
   193fc:	mov	r0, #1
   19400:	movt	r2, #6
   19404:	str	r1, [r5]
   19408:	strb	r0, [r2, #5]
   1940c:	str	r1, [r2, #8]
   19410:	pop	{r4, r5, fp, pc}
   19414:	mov	r0, r1
   19418:	mov	r1, r2
   1941c:	mov	r2, r4
   19420:	bl	18854 <__assert_fail@plt+0x5dd8>
   19424:	mov	r1, r0
   19428:	mov	r0, #0
   1942c:	cmp	r1, #0
   19430:	beq	19438 <__assert_fail@plt+0x69bc>
   19434:	pop	{r4, r5, fp, pc}
   19438:	ldr	r0, [r4, #16]
   1943c:	movw	r1, #15936	; 0x3e40
   19440:	movt	r1, #6
   19444:	str	r0, [r1, #8]
   19448:	str	r0, [r5]
   1944c:	mov	r0, #1
   19450:	strb	r0, [r1, #5]
   19454:	pop	{r4, r5, fp, pc}
   19458:	mov	r1, r0
   1945c:	mov	r0, #1
   19460:	b	19468 <__assert_fail@plt+0x69ec>
   19464:	ldr	r1, [r1, #152]	; 0x98
   19468:	cmp	r1, #0
   1946c:	bxeq	lr
   19470:	ldrb	r2, [r1, #17]
   19474:	cmp	r2, #0
   19478:	beq	19464 <__assert_fail@plt+0x69e8>
   1947c:	mov	r0, #0
   19480:	bx	lr
   19484:	mov	ip, r0
   19488:	ldrb	r0, [r0]
   1948c:	sub	r3, r0, #33	; 0x21
   19490:	mov	r0, #0
   19494:	cmp	r3, #12
   19498:	bxhi	lr
   1949c:	add	r2, pc, #0
   194a0:	ldr	pc, [r2, r3, lsl #2]
   194a4:	ldrdeq	r9, [r1], -r8
   194a8:	andeq	r9, r1, r4, ror #9
   194ac:	andeq	r9, r1, r4, ror #9
   194b0:	andeq	r9, r1, r4, ror #9
   194b4:	andeq	r9, r1, r4, ror #9
   194b8:	andeq	r9, r1, r4, ror #9
   194bc:	andeq	r9, r1, r4, ror #9
   194c0:	ldrdeq	r9, [r1], -r8
   194c4:	andeq	r9, r1, r8, ror #9
   194c8:	andeq	r9, r1, r4, ror #9
   194cc:	andeq	r9, r1, r4, ror #9
   194d0:	andeq	r9, r1, r8, ror #9
   194d4:	andeq	r9, r1, r0, lsl #10
   194d8:	ldrb	r0, [ip, #1]
   194dc:	clz	r0, r0
   194e0:	lsr	r0, r0, #5
   194e4:	bx	lr
   194e8:	eor	r0, r1, #1
   194ec:	ldrb	r1, [ip, #1]
   194f0:	clz	r1, r1
   194f4:	lsr	r1, r1, #5
   194f8:	and	r0, r1, r0
   194fc:	bx	lr
   19500:	ldrb	r0, [ip, #1]
   19504:	cmp	r0, #0
   19508:	movwne	r0, #1
   1950c:	bx	lr
   19510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19514:	add	fp, sp, #28
   19518:	sub	sp, sp, #20
   1951c:	mov	r4, #1
   19520:	cmp	r0, #2
   19524:	blt	198c4 <__assert_fail@plt+0x6e48>
   19528:	movw	r5, #58528	; 0xe4a0
   1952c:	movw	sl, #58531	; 0xe4a3
   19530:	movw	r8, #15980	; 0x3e6c
   19534:	mov	r9, r1
   19538:	mov	r6, r0
   1953c:	mov	r4, #1
   19540:	movt	r5, #4
   19544:	movt	sl, #4
   19548:	movt	r8, #6
   1954c:	ldr	r7, [r9, r4, lsl #2]
   19550:	mov	r0, r5
   19554:	mov	r1, r7
   19558:	bl	123d4 <strcmp@plt>
   1955c:	cmp	r0, #0
   19560:	beq	1968c <__assert_fail@plt+0x6c10>
   19564:	mov	r0, sl
   19568:	mov	r1, r7
   1956c:	bl	123d4 <strcmp@plt>
   19570:	cmp	r0, #0
   19574:	beq	196a4 <__assert_fail@plt+0x6c28>
   19578:	movw	r0, #58534	; 0xe4a6
   1957c:	mov	r1, r7
   19580:	movt	r0, #4
   19584:	bl	123d4 <strcmp@plt>
   19588:	cmp	r0, #0
   1958c:	beq	196bc <__assert_fail@plt+0x6c40>
   19590:	movw	r0, #58537	; 0xe4a9
   19594:	mov	r1, r7
   19598:	movt	r0, #4
   1959c:	bl	123d4 <strcmp@plt>
   195a0:	cmp	r0, #0
   195a4:	beq	198d0 <__assert_fail@plt+0x6e54>
   195a8:	movw	r0, #58540	; 0xe4ac
   195ac:	mov	r1, r7
   195b0:	movt	r0, #4
   195b4:	bl	123d4 <strcmp@plt>
   195b8:	cmp	r0, #0
   195bc:	beq	196d4 <__assert_fail@plt+0x6c58>
   195c0:	movw	r0, #59603	; 0xe8d3
   195c4:	mov	r1, r7
   195c8:	mov	r2, #2
   195cc:	movt	r0, #4
   195d0:	bl	12a1c <strncmp@plt>
   195d4:	cmp	r0, #0
   195d8:	bne	198c4 <__assert_fail@plt+0x6e48>
   195dc:	ldrb	r5, [r7, #2]!
   195e0:	cmp	r5, #0
   195e4:	beq	198ec <__assert_fail@plt+0x6e70>
   195e8:	mov	sl, r6
   195ec:	bl	12740 <__ctype_b_loc@plt>
   195f0:	ldr	r0, [r0]
   195f4:	add	r0, r0, r5, lsl #1
   195f8:	ldrb	r0, [r0, #1]
   195fc:	tst	r0, #8
   19600:	beq	198e0 <__assert_fail@plt+0x6e64>
   19604:	bl	127d0 <__errno_location@plt>
   19608:	mov	r6, r0
   1960c:	ldr	r0, [r0]
   19610:	add	r1, sp, #16
   19614:	mov	r2, #10
   19618:	str	r0, [sp, #4]
   1961c:	mov	r0, #0
   19620:	str	r0, [r6]
   19624:	mov	r0, r7
   19628:	bl	1277c <strtoul@plt>
   1962c:	mov	r5, r0
   19630:	ldr	r0, [sp, #16]
   19634:	cmp	r5, #0
   19638:	cmpeq	r0, r7
   1963c:	beq	198e0 <__assert_fail@plt+0x6e64>
   19640:	ldrb	r0, [r0]
   19644:	cmp	r0, #0
   19648:	bne	19910 <__assert_fail@plt+0x6e94>
   1964c:	cmn	r5, #1
   19650:	beq	19938 <__assert_fail@plt+0x6ebc>
   19654:	cmp	r5, #65536	; 0x10000
   19658:	bcs	19944 <__assert_fail@plt+0x6ec8>
   1965c:	ldr	r0, [sp, #4]
   19660:	strh	r5, [r8, #68]	; 0x44
   19664:	movw	r5, #58528	; 0xe4a0
   19668:	movt	r5, #4
   1966c:	str	r0, [r6]
   19670:	mov	r6, sl
   19674:	movw	sl, #58531	; 0xe4a3
   19678:	movt	sl, #4
   1967c:	add	r4, r4, #1
   19680:	cmp	r4, r6
   19684:	blt	1954c <__assert_fail@plt+0x6ad0>
   19688:	b	198c4 <__assert_fail@plt+0x6e48>
   1968c:	mov	r0, #2
   19690:	bl	1c258 <__assert_fail@plt+0x97dc>
   19694:	add	r4, r4, #1
   19698:	cmp	r4, r6
   1969c:	blt	1954c <__assert_fail@plt+0x6ad0>
   196a0:	b	198c4 <__assert_fail@plt+0x6e48>
   196a4:	mov	r0, #1
   196a8:	bl	1c258 <__assert_fail@plt+0x97dc>
   196ac:	add	r4, r4, #1
   196b0:	cmp	r4, r6
   196b4:	blt	1954c <__assert_fail@plt+0x6ad0>
   196b8:	b	198c4 <__assert_fail@plt+0x6e48>
   196bc:	mov	r0, #0
   196c0:	bl	1c258 <__assert_fail@plt+0x97dc>
   196c4:	add	r4, r4, #1
   196c8:	cmp	r4, r6
   196cc:	blt	1954c <__assert_fail@plt+0x6ad0>
   196d0:	b	198c4 <__assert_fail@plt+0x6e48>
   196d4:	add	r4, r4, #1
   196d8:	cmp	r4, r6
   196dc:	bge	19994 <__assert_fail@plt+0x6f18>
   196e0:	ldr	r1, [r9, r4, lsl #2]
   196e4:	mov	r0, #0
   196e8:	add	r2, sp, #12
   196ec:	str	r0, [sp, #12]
   196f0:	mov	r0, #44	; 0x2c
   196f4:	strh	r0, [sp, #10]
   196f8:	str	r1, [sp, #4]
   196fc:	mov	r0, r1
   19700:	add	r1, sp, #10
   19704:	bl	12668 <strtok_r@plt>
   19708:	cmp	r0, #0
   1970c:	beq	199a0 <__assert_fail@plt+0x6f24>
   19710:	mov	r7, r0
   19714:	movw	r0, #63215	; 0xf6ef
   19718:	mov	r1, r7
   1971c:	movt	r0, #4
   19720:	bl	123d4 <strcmp@plt>
   19724:	cmp	r0, #0
   19728:	beq	1982c <__assert_fail@plt+0x6db0>
   1972c:	movw	r0, #58869	; 0xe5f5
   19730:	mov	r1, r7
   19734:	movt	r0, #4
   19738:	bl	123d4 <strcmp@plt>
   1973c:	cmp	r0, #0
   19740:	beq	19834 <__assert_fail@plt+0x6db8>
   19744:	movw	r0, #58926	; 0xe62e
   19748:	mov	r1, r7
   1974c:	movt	r0, #4
   19750:	bl	123d4 <strcmp@plt>
   19754:	cmp	r0, #0
   19758:	beq	1983c <__assert_fail@plt+0x6dc0>
   1975c:	movw	r0, #58976	; 0xe660
   19760:	mov	r1, r7
   19764:	movt	r0, #4
   19768:	bl	123d4 <strcmp@plt>
   1976c:	cmp	r0, #0
   19770:	beq	19844 <__assert_fail@plt+0x6dc8>
   19774:	movw	r0, #62308	; 0xf364
   19778:	mov	r1, r7
   1977c:	movt	r0, #4
   19780:	bl	123d4 <strcmp@plt>
   19784:	cmp	r0, #0
   19788:	beq	1984c <__assert_fail@plt+0x6dd0>
   1978c:	movw	r0, #62224	; 0xf310
   19790:	mov	r1, r7
   19794:	movt	r0, #4
   19798:	bl	123d4 <strcmp@plt>
   1979c:	cmp	r0, #0
   197a0:	beq	19854 <__assert_fail@plt+0x6dd8>
   197a4:	movw	r0, #59158	; 0xe716
   197a8:	mov	r1, r7
   197ac:	movt	r0, #4
   197b0:	bl	123d4 <strcmp@plt>
   197b4:	cmp	r0, #0
   197b8:	beq	1985c <__assert_fail@plt+0x6de0>
   197bc:	movw	r0, #60223	; 0xeb3f
   197c0:	mov	r1, r7
   197c4:	movt	r0, #4
   197c8:	bl	123d4 <strcmp@plt>
   197cc:	cmp	r0, #0
   197d0:	beq	19864 <__assert_fail@plt+0x6de8>
   197d4:	movw	r0, #62687	; 0xf4df
   197d8:	mov	r1, r7
   197dc:	movt	r0, #4
   197e0:	bl	123d4 <strcmp@plt>
   197e4:	cmp	r0, #0
   197e8:	beq	1986c <__assert_fail@plt+0x6df0>
   197ec:	movw	r1, #59420	; 0xe81c
   197f0:	mov	r0, #0
   197f4:	mov	r2, #5
   197f8:	movt	r1, #4
   197fc:	bl	1253c <dcgettext@plt>
   19800:	ldr	r1, [r8, #72]	; 0x48
   19804:	ldr	r2, [sp, #4]
   19808:	mov	r7, r0
   1980c:	mov	r0, #0
   19810:	bl	2f2ec <__assert_fail@plt+0x1c870>
   19814:	mov	r3, r0
   19818:	mov	r0, #0
   1981c:	mov	r1, #0
   19820:	mov	r2, r7
   19824:	bl	12674 <error@plt>
   19828:	b	19890 <__assert_fail@plt+0x6e14>
   1982c:	mov	r0, #0
   19830:	b	19870 <__assert_fail@plt+0x6df4>
   19834:	mov	r0, #1
   19838:	b	19870 <__assert_fail@plt+0x6df4>
   1983c:	mov	r0, #2
   19840:	b	19870 <__assert_fail@plt+0x6df4>
   19844:	mov	r0, #3
   19848:	b	19870 <__assert_fail@plt+0x6df4>
   1984c:	mov	r0, #4
   19850:	b	19870 <__assert_fail@plt+0x6df4>
   19854:	mov	r0, #5
   19858:	b	19870 <__assert_fail@plt+0x6df4>
   1985c:	mov	r0, #6
   19860:	b	19870 <__assert_fail@plt+0x6df4>
   19864:	mov	r0, #7
   19868:	b	19870 <__assert_fail@plt+0x6df4>
   1986c:	mov	r0, #8
   19870:	movw	r1, #59784	; 0xe988
   19874:	add	r0, r0, r0, lsl #1
   19878:	movt	r1, #4
   1987c:	add	r0, r1, r0, lsl #2
   19880:	ldr	r1, [r8, #44]	; 0x2c
   19884:	ldr	r0, [r0, #4]
   19888:	orr	r0, r1, r0
   1988c:	str	r0, [r8, #44]	; 0x2c
   19890:	mov	r0, #0
   19894:	add	r1, sp, #10
   19898:	add	r2, sp, #12
   1989c:	bl	12668 <strtok_r@plt>
   198a0:	mov	r7, r0
   198a4:	cmp	r0, #0
   198a8:	bne	19714 <__assert_fail@plt+0x6c98>
   198ac:	ldrb	r0, [r8, #44]	; 0x2c
   198b0:	tst	r0, #16
   198b4:	bne	199cc <__assert_fail@plt+0x6f50>
   198b8:	add	r4, r4, #1
   198bc:	cmp	r4, r6
   198c0:	blt	1954c <__assert_fail@plt+0x6ad0>
   198c4:	mov	r0, r4
   198c8:	sub	sp, fp, #28
   198cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198d0:	add	r4, r4, #1
   198d4:	mov	r0, r4
   198d8:	sub	sp, fp, #28
   198dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198e0:	movw	r1, #59553	; 0xe8a1
   198e4:	movt	r1, #4
   198e8:	b	198f4 <__assert_fail@plt+0x6e78>
   198ec:	movw	r1, #59489	; 0xe861
   198f0:	movt	r1, #4
   198f4:	mov	r0, #0
   198f8:	mov	r2, #5
   198fc:	bl	1253c <dcgettext@plt>
   19900:	mov	r2, r0
   19904:	mov	r0, #1
   19908:	mov	r1, #0
   1990c:	bl	12674 <error@plt>
   19910:	movw	r1, #59606	; 0xe8d6
   19914:	mov	r0, #0
   19918:	mov	r2, #5
   1991c:	movt	r1, #4
   19920:	bl	1253c <dcgettext@plt>
   19924:	mov	r2, r0
   19928:	mov	r0, #1
   1992c:	mov	r1, #0
   19930:	mov	r3, r7
   19934:	bl	12674 <error@plt>
   19938:	ldr	r4, [r6]
   1993c:	cmp	r4, #0
   19940:	bne	1996c <__assert_fail@plt+0x6ef0>
   19944:	movw	r1, #59636	; 0xe8f4
   19948:	mov	r0, #0
   1994c:	mov	r2, #5
   19950:	movt	r1, #4
   19954:	bl	1253c <dcgettext@plt>
   19958:	mov	r2, r0
   1995c:	mov	r0, #1
   19960:	mov	r1, #0
   19964:	mov	r3, r5
   19968:	bl	12674 <error@plt>
   1996c:	movw	r1, #59606	; 0xe8d6
   19970:	mov	r0, #0
   19974:	mov	r2, #5
   19978:	movt	r1, #4
   1997c:	bl	1253c <dcgettext@plt>
   19980:	mov	r2, r0
   19984:	mov	r0, #1
   19988:	mov	r1, r4
   1998c:	mov	r3, r7
   19990:	bl	12674 <error@plt>
   19994:	movw	r1, #58543	; 0xe4af
   19998:	movt	r1, #4
   1999c:	b	199a8 <__assert_fail@plt+0x6f2c>
   199a0:	movw	r1, #59456	; 0xe840
   199a4:	movt	r1, #4
   199a8:	mov	r0, #0
   199ac:	mov	r2, #5
   199b0:	bl	1253c <dcgettext@plt>
   199b4:	mov	r2, r0
   199b8:	mov	r0, #0
   199bc:	mov	r1, #0
   199c0:	bl	12674 <error@plt>
   199c4:	mov	r0, #1
   199c8:	bl	18464 <__assert_fail@plt+0x59e8>
   199cc:	mov	r0, #1
   199d0:	bl	18624 <__assert_fail@plt+0x5ba8>
   199d4:	mov	r0, #0
   199d8:	bl	12758 <exit@plt>
   199dc:	push	{r4, r5, r6, sl, fp, lr}
   199e0:	add	fp, sp, #16
   199e4:	vpush	{d8}
   199e8:	sub	sp, sp, #392	; 0x188
   199ec:	mov	r4, r0
   199f0:	movw	r0, #58581	; 0xe4d5
   199f4:	movt	r0, #4
   199f8:	bl	126b0 <getenv@plt>
   199fc:	cmp	r0, #0
   19a00:	mov	r5, sp
   19a04:	movwne	r0, #1
   19a08:	strb	r0, [r4, #17]
   19a0c:	mov	r0, r5
   19a10:	bl	12524 <uname@plt>
   19a14:	cmp	r0, #0
   19a18:	beq	19a24 <__assert_fail@plt+0x6fa8>
   19a1c:	mov	r6, #1
   19a20:	b	19a8c <__assert_fail@plt+0x7010>
   19a24:	add	r0, r5, #130	; 0x82
   19a28:	mov	r1, #0
   19a2c:	mov	r6, #0
   19a30:	bl	1283c <strtod@plt>
   19a34:	movw	r0, #58176	; 0xe340
   19a38:	mov	r1, r5
   19a3c:	vcvt.f32.f64	s16, d0
   19a40:	movt	r0, #4
   19a44:	bl	123d4 <strcmp@plt>
   19a48:	cmp	r0, #0
   19a4c:	beq	19a7c <__assert_fail@plt+0x7000>
   19a50:	vldr	s0, [pc, #388]	; 19bdc <__assert_fail@plt+0x7160>
   19a54:	movw	r0, #58182	; 0xe346
   19a58:	mov	r1, sp
   19a5c:	movt	r0, #4
   19a60:	vcmpe.f32	s16, s0
   19a64:	vmrs	APSR_nzcv, fpscr
   19a68:	movwge	r6, #1
   19a6c:	bl	123d4 <strcmp@plt>
   19a70:	cmp	r0, #0
   19a74:	movne	r6, #1
   19a78:	b	19a8c <__assert_fail@plt+0x7010>
   19a7c:	vldr	s0, [pc, #348]	; 19be0 <__assert_fail@plt+0x7164>
   19a80:	vcmpe.f32	s16, s0
   19a84:	vmrs	APSR_nzcv, fpscr
   19a88:	movwge	r6, #1
   19a8c:	mov	r5, #0
   19a90:	mov	r0, #0
   19a94:	str	r5, [r4, #60]	; 0x3c
   19a98:	strb	r6, [r4, #56]	; 0x38
   19a9c:	bl	129ec <isatty@plt>
   19aa0:	cmp	r0, #0
   19aa4:	strb	r5, [r4, #15]
   19aa8:	mov	r1, #1
   19aac:	movwne	r0, #1
   19ab0:	strb	r0, [r4, #16]
   19ab4:	ldrb	r0, [r4, #17]
   19ab8:	cmp	r0, #0
   19abc:	mvn	r0, #0
   19ac0:	strbne	r5, [r4, #16]
   19ac4:	strh	r1, [r4]
   19ac8:	str	r0, [r4, #4]
   19acc:	str	r0, [r4, #8]
   19ad0:	mov	r0, sp
   19ad4:	mov	r1, #0
   19ad8:	mov	r5, #0
   19adc:	bl	12644 <gettimeofday@plt>
   19ae0:	cmp	r0, #0
   19ae4:	beq	19b00 <__assert_fail@plt+0x7084>
   19ae8:	mov	r0, #0
   19aec:	bl	1250c <time@plt>
   19af0:	cmn	r0, #1
   19af4:	beq	19bbc <__assert_fail@plt+0x7140>
   19af8:	mov	r1, #0
   19afc:	b	19b10 <__assert_fail@plt+0x7094>
   19b00:	ldm	sp, {r0, r1}
   19b04:	mov	r2, #1000	; 0x3e8
   19b08:	mov	r5, #0
   19b0c:	mul	r1, r1, r2
   19b10:	orr	r3, r5, r0
   19b14:	sub	r0, r0, #4480	; 0x1180
   19b18:	add	r2, r4, #20
   19b1c:	mov	r5, #0
   19b20:	sub	r0, r0, #81920	; 0x14000
   19b24:	str	r3, [r2]
   19b28:	str	r1, [r2, #4]
   19b2c:	str	r0, [r4, #28]
   19b30:	mov	r0, #2
   19b34:	str	r1, [r4, #32]
   19b38:	strb	r5, [r4, #36]	; 0x24
   19b3c:	strh	r5, [r4, #13]
   19b40:	mov	r1, #512	; 0x200
   19b44:	strh	r0, [r4, #68]	; 0x44
   19b48:	ldrb	r0, [r4, #17]
   19b4c:	cmp	r0, #0
   19b50:	movw	r0, #58597	; 0xe4e5
   19b54:	movweq	r1, #1024	; 0x400
   19b58:	movt	r0, #4
   19b5c:	str	r1, [r4, #40]	; 0x28
   19b60:	str	r5, [r4, #44]	; 0x2c
   19b64:	bl	126b0 <getenv@plt>
   19b68:	cmp	r0, #0
   19b6c:	bne	19b98 <__assert_fail@plt+0x711c>
   19b70:	mov	r0, #0
   19b74:	strb	r5, [r4, #12]
   19b78:	bl	1c258 <__assert_fail@plt+0x97dc>
   19b7c:	mov	r0, #8
   19b80:	str	r0, [r4, #72]	; 0x48
   19b84:	str	r5, [r4, #76]	; 0x4c
   19b88:	strb	r5, [r4, #80]	; 0x50
   19b8c:	sub	sp, fp, #24
   19b90:	vpop	{d8}
   19b94:	pop	{r4, r5, r6, sl, fp, pc}
   19b98:	movw	r1, #58613	; 0xe4f5
   19b9c:	mov	r0, #0
   19ba0:	mov	r2, #5
   19ba4:	movt	r1, #4
   19ba8:	bl	1253c <dcgettext@plt>
   19bac:	mov	r2, r0
   19bb0:	mov	r0, #1
   19bb4:	mov	r1, #0
   19bb8:	bl	12674 <error@plt>
   19bbc:	movw	r0, #59740	; 0xe95c
   19bc0:	movw	r1, #56329	; 0xdc09
   19bc4:	movw	r3, #59756	; 0xe96c
   19bc8:	movw	r2, #978	; 0x3d2
   19bcc:	movt	r0, #4
   19bd0:	movt	r1, #4
   19bd4:	movt	r3, #4
   19bd8:	bl	12a7c <__assert_fail@plt>
   19bdc:	submi	r6, r6, r6, ror #12
   19be0:	andmi	ip, ip, sp, asr #25
   19be4:	push	{r4, r5, r6, sl, fp, lr}
   19be8:	add	fp, sp, #16
   19bec:	mov	r6, r0
   19bf0:	ldr	r0, [r2, #164]	; 0xa4
   19bf4:	mov	r4, r2
   19bf8:	mov	r5, r1
   19bfc:	add	r0, r0, #1
   19c00:	str	r0, [r2, #164]	; 0xa4
   19c04:	ldrb	r0, [r2, #18]
   19c08:	cmp	r0, #0
   19c0c:	beq	19c34 <__assert_fail@plt+0x71b8>
   19c10:	movw	r0, #15936	; 0x3e40
   19c14:	movt	r0, #6
   19c18:	ldrb	r0, [r0, #4]
   19c1c:	cmp	r0, #0
   19c20:	beq	19c9c <__assert_fail@plt+0x7220>
   19c24:	ldrb	r1, [r4, #19]
   19c28:	cmp	r1, #0
   19c2c:	movwne	r1, #1
   19c30:	b	19c44 <__assert_fail@plt+0x71c8>
   19c34:	ldrb	r0, [r4, #19]
   19c38:	mov	r1, #1
   19c3c:	cmp	r0, #0
   19c40:	beq	19cf8 <__assert_fail@plt+0x727c>
   19c44:	movw	r0, #15936	; 0x3e40
   19c48:	cmp	r1, #0
   19c4c:	movt	r0, #6
   19c50:	ldrb	r2, [r0, #5]
   19c54:	clz	r0, r2
   19c58:	lsr	r0, r0, #5
   19c5c:	beq	19c68 <__assert_fail@plt+0x71ec>
   19c60:	cmp	r2, #0
   19c64:	beq	19c9c <__assert_fail@plt+0x7220>
   19c68:	ldrb	r1, [r4, #20]
   19c6c:	cmp	r1, #0
   19c70:	beq	19cc4 <__assert_fail@plt+0x7248>
   19c74:	ldrd	r2, [r5, #96]	; 0x60
   19c78:	orr	r1, r2, r3
   19c7c:	clz	r1, r1
   19c80:	lsr	r1, r1, #5
   19c84:	orrs	r0, r0, r1
   19c88:	bne	19c9c <__assert_fail@plt+0x7220>
   19c8c:	ldr	r0, [r5, #16]
   19c90:	and	r0, r0, #61440	; 0xf000
   19c94:	cmp	r0, #16384	; 0x4000
   19c98:	bne	19cc4 <__assert_fail@plt+0x7248>
   19c9c:	movw	r0, #15936	; 0x3e40
   19ca0:	mov	r2, r5
   19ca4:	movt	r0, #6
   19ca8:	ldr	r1, [r0, #12]
   19cac:	mov	r0, r6
   19cb0:	bl	18854 <__assert_fail@plt+0x5dd8>
   19cb4:	mov	r1, r0
   19cb8:	mov	r0, #0
   19cbc:	cmp	r1, #0
   19cc0:	popne	{r4, r5, r6, sl, fp, pc}
   19cc4:	ldr	r3, [r4]
   19cc8:	mov	r0, r6
   19ccc:	mov	r1, r5
   19cd0:	mov	r2, r4
   19cd4:	blx	r3
   19cd8:	mov	r1, r0
   19cdc:	mov	r0, #0
   19ce0:	cmp	r1, #0
   19ce4:	ldrne	r0, [r4, #168]	; 0xa8
   19ce8:	addne	r0, r0, #1
   19cec:	strne	r0, [r4, #168]	; 0xa8
   19cf0:	movne	r0, #1
   19cf4:	pop	{r4, r5, r6, sl, fp, pc}
   19cf8:	ldrb	r0, [r4, #20]
   19cfc:	cmp	r0, #0
   19d00:	beq	19cc4 <__assert_fail@plt+0x7248>
   19d04:	movw	r0, #15936	; 0x3e40
   19d08:	movt	r0, #6
   19d0c:	ldrb	r0, [r0, #5]
   19d10:	clz	r0, r0
   19d14:	lsr	r0, r0, #5
   19d18:	ldrb	r1, [r4, #20]
   19d1c:	cmp	r1, #0
   19d20:	bne	19c74 <__assert_fail@plt+0x71f8>
   19d24:	b	19cc4 <__assert_fail@plt+0x7248>
   19d28:	movw	r1, #18812	; 0x497c
   19d2c:	movw	r2, #16808	; 0x41a8
   19d30:	movt	r1, #1
   19d34:	movt	r2, #1
   19d38:	sub	r1, r0, r1
   19d3c:	sub	r0, r0, r2
   19d40:	clz	r1, r1
   19d44:	clz	r0, r0
   19d48:	lsr	r1, r1, #5
   19d4c:	lsr	r0, r0, #5
   19d50:	orr	r0, r0, r1
   19d54:	bx	lr
   19d58:	mov	r2, r1
   19d5c:	movw	r1, #15980	; 0x3e6c
   19d60:	movt	r1, #6
   19d64:	ldr	r1, [r1, #72]	; 0x48
   19d68:	b	2f2ec <__assert_fail@plt+0x1c870>
   19d6c:	push	{r4, r5, r6, r7, fp, lr}
   19d70:	add	fp, sp, #16
   19d74:	movw	r7, #15936	; 0x3e40
   19d78:	mov	r6, r0
   19d7c:	mov	r4, r2
   19d80:	mov	r5, r1
   19d84:	movt	r7, #6
   19d88:	ldrb	r0, [r7, #40]	; 0x28
   19d8c:	cmp	r0, #0
   19d90:	cmpne	r4, #0
   19d94:	bne	19dd0 <__assert_fail@plt+0x7354>
   19d98:	movw	r0, #15980	; 0x3e6c
   19d9c:	mov	r2, r3
   19da0:	movt	r0, #6
   19da4:	ldr	r1, [r0, #72]	; 0x48
   19da8:	mov	r0, #0
   19dac:	bl	2f2ec <__assert_fail@plt+0x1c870>
   19db0:	movw	r2, #9967	; 0x26ef
   19db4:	mov	r3, r0
   19db8:	mov	r0, r6
   19dbc:	mov	r1, r5
   19dc0:	movt	r2, #5
   19dc4:	bl	12674 <error@plt>
   19dc8:	mov	r0, #1
   19dcc:	str	r0, [r7, #28]
   19dd0:	cmp	r4, #0
   19dd4:	movne	r0, #1
   19dd8:	strbne	r0, [r7, #40]	; 0x28
   19ddc:	pop	{r4, r5, r6, r7, fp, pc}
   19de0:	push	{fp, lr}
   19de4:	mov	fp, sp
   19de8:	mov	r3, r1
   19dec:	mov	r1, r0
   19df0:	mov	r0, #1
   19df4:	mov	r2, #1
   19df8:	bl	19d6c <__assert_fail@plt+0x72f0>
   19dfc:	bl	12a28 <abort@plt>
   19e00:	push	{fp, lr}
   19e04:	mov	fp, sp
   19e08:	mov	r3, r1
   19e0c:	mov	r1, r0
   19e10:	movw	r0, #15936	; 0x3e40
   19e14:	mov	r2, #0
   19e18:	movt	r0, #6
   19e1c:	strb	r2, [r0, #40]	; 0x28
   19e20:	mov	r0, #1
   19e24:	mov	r2, #0
   19e28:	bl	19d6c <__assert_fail@plt+0x72f0>
   19e2c:	bl	12a28 <abort@plt>
   19e30:	push	{fp, lr}
   19e34:	mov	fp, sp
   19e38:	add	r2, r0, #4
   19e3c:	add	r1, r0, #48	; 0x30
   19e40:	mov	r0, r2
   19e44:	bl	20a40 <__assert_fail@plt+0xdfc4>
   19e48:	mov	r0, #0
   19e4c:	pop	{fp, pc}
   19e50:	push	{r4, r5, r6, sl, fp, lr}
   19e54:	add	fp, sp, #16
   19e58:	sub	sp, sp, #8
   19e5c:	mov	r6, r0
   19e60:	mov	r0, #8
   19e64:	bl	35608 <__assert_fail@plt+0x22b8c>
   19e68:	mov	r4, #0
   19e6c:	cmp	r0, #0
   19e70:	beq	19ec8 <__assert_fail@plt+0x744c>
   19e74:	mov	r5, r0
   19e78:	mov	r0, r6
   19e7c:	bl	12548 <strdup@plt>
   19e80:	cmp	r0, #0
   19e84:	str	r0, [r5]
   19e88:	beq	19edc <__assert_fail@plt+0x7460>
   19e8c:	movw	r0, #40816	; 0x9f70
   19e90:	movw	r2, #40688	; 0x9ef0
   19e94:	movw	r3, #40744	; 0x9f28
   19e98:	mov	r1, #0
   19e9c:	mov	r4, #0
   19ea0:	movt	r0, #1
   19ea4:	movt	r2, #1
   19ea8:	movt	r3, #1
   19eac:	str	r0, [sp]
   19eb0:	mov	r0, #11
   19eb4:	bl	23f90 <__assert_fail@plt+0x11514>
   19eb8:	cmp	r0, #0
   19ebc:	str	r0, [r5, #4]
   19ec0:	beq	19ed4 <__assert_fail@plt+0x7458>
   19ec4:	mov	r4, r5
   19ec8:	mov	r0, r4
   19ecc:	sub	sp, fp, #16
   19ed0:	pop	{r4, r5, r6, sl, fp, pc}
   19ed4:	ldr	r0, [r5]
   19ed8:	bl	32c40 <__assert_fail@plt+0x201c4>
   19edc:	mov	r0, r5
   19ee0:	bl	32c40 <__assert_fail@plt+0x201c4>
   19ee4:	mov	r0, r4
   19ee8:	sub	sp, fp, #16
   19eec:	pop	{r4, r5, r6, sl, fp, pc}
   19ef0:	push	{fp, lr}
   19ef4:	mov	fp, sp
   19ef8:	mov	ip, r1
   19efc:	ldr	lr, [r0]
   19f00:	ldr	r3, [r0, #4]
   19f04:	ldr	r1, [r0, #12]
   19f08:	ldr	r2, [r0, #8]
   19f0c:	eor	r0, r2, lr
   19f10:	eor	r1, r1, r3
   19f14:	mov	r2, ip
   19f18:	mov	r3, #0
   19f1c:	bl	4c218 <__assert_fail@plt+0x3979c>
   19f20:	mov	r0, r2
   19f24:	pop	{fp, pc}
   19f28:	push	{r4, r5, fp, lr}
   19f2c:	add	fp, sp, #8
   19f30:	ldrd	r2, [r1, #8]
   19f34:	ldrd	r4, [r0, #8]
   19f38:	eor	r3, r5, r3
   19f3c:	eor	r2, r4, r2
   19f40:	orrs	r2, r2, r3
   19f44:	mov	r2, #0
   19f48:	bne	19f68 <__assert_fail@plt+0x74ec>
   19f4c:	ldrd	r2, [r1]
   19f50:	ldrd	r0, [r0]
   19f54:	eor	r1, r1, r3
   19f58:	eor	r0, r0, r2
   19f5c:	orr	r0, r0, r1
   19f60:	clz	r0, r0
   19f64:	lsr	r2, r0, #5
   19f68:	mov	r0, r2
   19f6c:	pop	{r4, r5, fp, pc}
   19f70:	push	{r4, sl, fp, lr}
   19f74:	add	fp, sp, #8
   19f78:	mov	r4, r0
   19f7c:	ldr	r0, [r0, #20]
   19f80:	cmp	r0, #0
   19f84:	beq	19f94 <__assert_fail@plt+0x7518>
   19f88:	bl	12884 <fclose@plt>
   19f8c:	cmp	r0, #0
   19f90:	bne	19fa8 <__assert_fail@plt+0x752c>
   19f94:	ldr	r0, [r4, #16]
   19f98:	bl	32c40 <__assert_fail@plt+0x201c4>
   19f9c:	mov	r0, r4
   19fa0:	pop	{r4, sl, fp, lr}
   19fa4:	b	32c40 <__assert_fail@plt+0x201c4>
   19fa8:	bl	127d0 <__errno_location@plt>
   19fac:	ldr	r0, [r0]
   19fb0:	ldr	r1, [r4, #16]
   19fb4:	bl	19e00 <__assert_fail@plt+0x7384>
   19fb8:	push	{r4, sl, fp, lr}
   19fbc:	add	fp, sp, #8
   19fc0:	mov	r4, r0
   19fc4:	ldr	r0, [r0]
   19fc8:	bl	32c40 <__assert_fail@plt+0x201c4>
   19fcc:	ldr	r0, [r4, #4]
   19fd0:	pop	{r4, sl, fp, lr}
   19fd4:	b	242ac <__assert_fail@plt+0x11830>
   19fd8:	push	{r4, r5, r6, r7, fp, lr}
   19fdc:	add	fp, sp, #16
   19fe0:	sub	sp, sp, #104	; 0x68
   19fe4:	mov	r5, r0
   19fe8:	mov	r0, #24
   19fec:	mov	r7, r1
   19ff0:	bl	35608 <__assert_fail@plt+0x22b8c>
   19ff4:	mov	r6, #0
   19ff8:	cmp	r0, #0
   19ffc:	beq	1a0b4 <__assert_fail@plt+0x7638>
   1a000:	mov	r4, r0
   1a004:	mov	r0, r7
   1a008:	bl	12548 <strdup@plt>
   1a00c:	cmp	r0, #0
   1a010:	str	r0, [r4, #16]
   1a014:	beq	1a0c8 <__assert_fail@plt+0x764c>
   1a018:	ldr	r1, [r5]
   1a01c:	mov	r0, r7
   1a020:	bl	23a48 <__assert_fail@plt+0x10fcc>
   1a024:	cmp	r0, #0
   1a028:	str	r0, [r4, #20]
   1a02c:	beq	1a0c0 <__assert_fail@plt+0x7644>
   1a030:	bl	12848 <fileno@plt>
   1a034:	cmn	r0, #1
   1a038:	ble	1a180 <__assert_fail@plt+0x7704>
   1a03c:	mov	r1, #1
   1a040:	mov	r6, r0
   1a044:	bl	234fc <__assert_fail@plt+0x10a80>
   1a048:	mov	r2, sp
   1a04c:	mov	r0, #3
   1a050:	mov	r1, r6
   1a054:	bl	125e4 <__fxstat64@plt>
   1a058:	cmn	r0, #1
   1a05c:	ble	1a0dc <__assert_fail@plt+0x7660>
   1a060:	ldm	sp, {r0, r1}
   1a064:	ldr	r2, [sp, #96]	; 0x60
   1a068:	ldr	r3, [sp, #100]	; 0x64
   1a06c:	stm	r4, {r0, r1, r2, r3}
   1a070:	mov	r1, r4
   1a074:	ldr	r0, [r5, #4]
   1a078:	bl	23cc8 <__assert_fail@plt+0x1124c>
   1a07c:	cmp	r0, #0
   1a080:	beq	1a114 <__assert_fail@plt+0x7698>
   1a084:	mov	r6, r0
   1a088:	ldr	r0, [r4, #20]
   1a08c:	cmp	r0, #0
   1a090:	beq	1a0a0 <__assert_fail@plt+0x7624>
   1a094:	bl	12884 <fclose@plt>
   1a098:	cmp	r0, #0
   1a09c:	bne	1a1a0 <__assert_fail@plt+0x7724>
   1a0a0:	ldr	r0, [r4, #16]
   1a0a4:	bl	32c40 <__assert_fail@plt+0x201c4>
   1a0a8:	mov	r0, r4
   1a0ac:	bl	32c40 <__assert_fail@plt+0x201c4>
   1a0b0:	ldr	r6, [r6, #20]
   1a0b4:	mov	r0, r6
   1a0b8:	sub	sp, fp, #16
   1a0bc:	pop	{r4, r5, r6, r7, fp, pc}
   1a0c0:	ldr	r0, [r4, #16]
   1a0c4:	bl	32c40 <__assert_fail@plt+0x201c4>
   1a0c8:	mov	r0, r4
   1a0cc:	bl	32c40 <__assert_fail@plt+0x201c4>
   1a0d0:	mov	r0, r6
   1a0d4:	sub	sp, fp, #16
   1a0d8:	pop	{r4, r5, r6, r7, fp, pc}
   1a0dc:	ldr	r0, [r4, #20]
   1a0e0:	cmp	r0, #0
   1a0e4:	beq	1a0f4 <__assert_fail@plt+0x7678>
   1a0e8:	bl	12884 <fclose@plt>
   1a0ec:	cmp	r0, #0
   1a0f0:	bne	1a1a0 <__assert_fail@plt+0x7724>
   1a0f4:	ldr	r0, [r4, #16]
   1a0f8:	bl	32c40 <__assert_fail@plt+0x201c4>
   1a0fc:	mov	r0, r4
   1a100:	bl	32c40 <__assert_fail@plt+0x201c4>
   1a104:	mov	r6, #0
   1a108:	mov	r0, r6
   1a10c:	sub	sp, fp, #16
   1a110:	pop	{r4, r5, r6, r7, fp, pc}
   1a114:	ldr	r0, [r5, #4]
   1a118:	mov	r1, r4
   1a11c:	bl	24bc8 <__assert_fail@plt+0x1214c>
   1a120:	cmp	r0, #0
   1a124:	beq	1a138 <__assert_fail@plt+0x76bc>
   1a128:	ldr	r6, [r4, #20]
   1a12c:	mov	r0, r6
   1a130:	sub	sp, fp, #16
   1a134:	pop	{r4, r5, r6, r7, fp, pc}
   1a138:	bl	127d0 <__errno_location@plt>
   1a13c:	mov	r5, r0
   1a140:	ldr	r0, [r4, #20]
   1a144:	ldr	r6, [r5]
   1a148:	cmp	r0, #0
   1a14c:	beq	1a15c <__assert_fail@plt+0x76e0>
   1a150:	bl	12884 <fclose@plt>
   1a154:	cmp	r0, #0
   1a158:	bne	1a1b0 <__assert_fail@plt+0x7734>
   1a15c:	ldr	r0, [r4, #16]
   1a160:	bl	32c40 <__assert_fail@plt+0x201c4>
   1a164:	mov	r0, r4
   1a168:	bl	32c40 <__assert_fail@plt+0x201c4>
   1a16c:	str	r6, [r5]
   1a170:	mov	r6, #0
   1a174:	mov	r0, r6
   1a178:	sub	sp, fp, #16
   1a17c:	pop	{r4, r5, r6, r7, fp, pc}
   1a180:	movw	r0, #51078	; 0xc786
   1a184:	movw	r1, #59892	; 0xe9f4
   1a188:	movw	r3, #59904	; 0xea00
   1a18c:	mov	r2, #166	; 0xa6
   1a190:	movt	r0, #4
   1a194:	movt	r1, #4
   1a198:	movt	r3, #4
   1a19c:	bl	12a7c <__assert_fail@plt>
   1a1a0:	bl	127d0 <__errno_location@plt>
   1a1a4:	ldr	r0, [r0]
   1a1a8:	ldr	r1, [r4, #16]
   1a1ac:	bl	19e00 <__assert_fail@plt+0x7384>
   1a1b0:	ldr	r1, [r4, #16]
   1a1b4:	ldr	r0, [r5]
   1a1b8:	bl	19e00 <__assert_fail@plt+0x7384>
   1a1bc:	andeq	r0, r0, r0
   1a1c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1c4:	add	fp, sp, #28
   1a1c8:	sub	sp, sp, #4
   1a1cc:	ldr	r7, [fp, #8]
   1a1d0:	cmp	r7, #40	; 0x28
   1a1d4:	beq	1a4b4 <__assert_fail@plt+0x7a38>
   1a1d8:	cmp	r7, #91	; 0x5b
   1a1dc:	beq	1a4d4 <__assert_fail@plt+0x7a58>
   1a1e0:	cmp	r7, #123	; 0x7b
   1a1e4:	beq	1a4f4 <__assert_fail@plt+0x7a78>
   1a1e8:	ldr	sl, [fp, #12]
   1a1ec:	mov	r8, r0
   1a1f0:	mov	r0, #20
   1a1f4:	mov	r5, r3
   1a1f8:	mov	r6, r2
   1a1fc:	mov	r9, r1
   1a200:	bl	309ec <__assert_fail@plt+0x1df70>
   1a204:	mov	r1, #0
   1a208:	str	r0, [r8]
   1a20c:	str	r5, [r0]
   1a210:	str	r6, [r0, #12]
   1a214:	str	r1, [r0, #16]
   1a218:	strb	sl, [r0, #5]
   1a21c:	strb	r7, [r0, #4]
   1a220:	add	r0, r6, #2
   1a224:	bl	309ec <__assert_fail@plt+0x1df70>
   1a228:	mov	r4, r0
   1a22c:	ldr	r0, [r8]
   1a230:	mov	r1, r9
   1a234:	mov	r2, r6
   1a238:	str	r4, [r0, #8]
   1a23c:	mov	r0, r4
   1a240:	bl	12818 <strncpy@plt>
   1a244:	add	r0, r4, r6
   1a248:	cmp	r5, #1
   1a24c:	bhi	1a278 <__assert_fail@plt+0x77fc>
   1a250:	cmp	r7, #0
   1a254:	bne	1a514 <__assert_fail@plt+0x7a98>
   1a258:	cmp	sl, #0
   1a25c:	bne	1a534 <__assert_fail@plt+0x7ab8>
   1a260:	mov	r1, #0
   1a264:	strb	r1, [r0]
   1a268:	ldr	r0, [r8]
   1a26c:	add	r0, r0, #16
   1a270:	sub	sp, fp, #28
   1a274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a278:	cmp	r5, #2
   1a27c:	bne	1a554 <__assert_fail@plt+0x7ad8>
   1a280:	sub	r2, r7, #37	; 0x25
   1a284:	cmp	r2, #84	; 0x54
   1a288:	bhi	1a260 <__assert_fail@plt+0x77e4>
   1a28c:	ldr	r1, [fp, #16]
   1a290:	add	r3, pc, #0
   1a294:	ldr	pc, [r3, r2, lsl #2]
   1a298:	andeq	sl, r1, r8, lsr #8
   1a29c:	andeq	sl, r1, r0, ror #4
   1a2a0:	andeq	sl, r1, r0, ror #4
   1a2a4:	andeq	sl, r1, r0, ror #4
   1a2a8:	andeq	sl, r1, r0, ror #4
   1a2ac:	andeq	sl, r1, r0, ror #4
   1a2b0:	andeq	sl, r1, r0, ror #4
   1a2b4:	andeq	sl, r1, r0, ror #4
   1a2b8:	andeq	sl, r1, r0, ror #4
   1a2bc:	andeq	sl, r1, r0, ror #4
   1a2c0:	andeq	sl, r1, r0, ror #4
   1a2c4:	andeq	sl, r1, r0, ror #4
   1a2c8:	andeq	sl, r1, r0, ror #4
   1a2cc:	andeq	sl, r1, r0, ror #4
   1a2d0:	andeq	sl, r1, r0, ror #4
   1a2d4:	andeq	sl, r1, r0, ror #4
   1a2d8:	andeq	sl, r1, r0, ror #4
   1a2dc:	andeq	sl, r1, r0, ror #4
   1a2e0:	andeq	sl, r1, r0, ror #4
   1a2e4:	andeq	sl, r1, r0, ror #4
   1a2e8:	andeq	sl, r1, r0, ror #4
   1a2ec:	andeq	sl, r1, r0, ror #4
   1a2f0:	andeq	sl, r1, r0, ror #4
   1a2f4:	andeq	sl, r1, r0, ror #4
   1a2f8:	andeq	sl, r1, r0, ror #4
   1a2fc:	andeq	sl, r1, r0, ror #4
   1a300:	andeq	sl, r1, r0, ror #4
   1a304:	andeq	sl, r1, r0, ror #4
   1a308:	andeq	sl, r1, ip, ror #7
   1a30c:	andeq	sl, r1, ip, ror #7
   1a310:	andeq	sl, r1, ip, ror #7
   1a314:	andeq	sl, r1, ip, ror #7
   1a318:	andeq	sl, r1, r0, ror #4
   1a31c:	andeq	sl, r1, ip, ror #7
   1a320:	andeq	sl, r1, ip, ror #7
   1a324:	andeq	sl, r1, r4, lsr #8
   1a328:	andeq	sl, r1, r0, ror #4
   1a32c:	andeq	sl, r1, r0, ror #4
   1a330:	andeq	sl, r1, r0, ror #4
   1a334:	andeq	sl, r1, r0, ror #4
   1a338:	andeq	sl, r1, ip, ror #7
   1a33c:	andeq	sl, r1, r0, ror #4
   1a340:	andeq	sl, r1, r0, ror #4
   1a344:	andeq	sl, r1, r4, lsr #8
   1a348:	andeq	sl, r1, r0, ror #4
   1a34c:	andeq	sl, r1, r0, ror #4
   1a350:	andeq	sl, r1, ip, lsr r4
   1a354:	andeq	sl, r1, ip, ror #7
   1a358:	andeq	sl, r1, ip, ror #7
   1a35c:	andeq	sl, r1, r0, ror #4
   1a360:	andeq	sl, r1, r0, ror #4
   1a364:	andeq	sl, r1, r0, ror #4
   1a368:	andeq	sl, r1, r0, lsr r4
   1a36c:	andeq	sl, r1, r4, lsr #9
   1a370:	andeq	sl, r1, r0, ror #4
   1a374:	andeq	sl, r1, r0, ror #4
   1a378:	andeq	sl, r1, r0, ror #4
   1a37c:	andeq	sl, r1, r0, ror #4
   1a380:	andeq	sl, r1, r0, ror #4
   1a384:	andeq	sl, r1, r0, ror #4
   1a388:	andeq	sl, r1, ip, ror #7
   1a38c:	andeq	sl, r1, ip, ror #7
   1a390:	andeq	sl, r1, ip, ror #7
   1a394:	andeq	sl, r1, r8, lsr #8
   1a398:	andeq	sl, r1, r0, ror #4
   1a39c:	andeq	sl, r1, r4, lsr #8
   1a3a0:	andeq	sl, r1, ip, ror #7
   1a3a4:	andeq	sl, r1, r4, lsr #8
   1a3a8:	andeq	sl, r1, ip, asr #8
   1a3ac:	andeq	sl, r1, r0, ror #4
   1a3b0:	andeq	sl, r1, ip, ror #7
   1a3b4:	andeq	sl, r1, r0, ror #8
   1a3b8:	muleq	r1, r0, r4
   1a3bc:	andeq	sl, r1, ip, ror #7
   1a3c0:	andeq	sl, r1, r0, ror #4
   1a3c4:	andeq	sl, r1, r4, lsr #8
   1a3c8:	andeq	sl, r1, r0, ror #4
   1a3cc:	andeq	sl, r1, r0, ror #4
   1a3d0:	andeq	sl, r1, ip, ror #7
   1a3d4:	andeq	sl, r1, ip, ror #7
   1a3d8:	andeq	sl, r1, ip, ror #7
   1a3dc:	andeq	sl, r1, r0, ror #4
   1a3e0:	andeq	sl, r1, r0, ror #4
   1a3e4:	andeq	sl, r1, r0, ror #4
   1a3e8:	andeq	sl, r1, r8, ror r4
   1a3ec:	mov	r2, #1
   1a3f0:	strb	r2, [r1, #18]
   1a3f4:	mov	r2, #115	; 0x73
   1a3f8:	strb	r2, [r0]
   1a3fc:	mov	r2, #3
   1a400:	mov	r3, #0
   1a404:	strb	r3, [r0, #1]
   1a408:	ldr	r0, [r1, #24]
   1a40c:	cmp	r2, r0
   1a410:	strhi	r2, [r1, #24]
   1a414:	ldr	r0, [r8]
   1a418:	add	r0, r0, #16
   1a41c:	sub	sp, fp, #28
   1a420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a424:	mov	r7, #115	; 0x73
   1a428:	strb	r7, [r0], #1
   1a42c:	b	1a260 <__assert_fail@plt+0x77e4>
   1a430:	mov	r2, #1
   1a434:	strb	r2, [r1, #18]
   1a438:	b	1a480 <__assert_fail@plt+0x7a04>
   1a43c:	mov	r2, #1
   1a440:	strb	r2, [r1, #18]
   1a444:	mov	r2, #103	; 0x67
   1a448:	b	1a3f8 <__assert_fail@plt+0x797c>
   1a44c:	mov	r2, #1
   1a450:	mov	r3, #115	; 0x73
   1a454:	strb	r2, [r1, #20]
   1a458:	strb	r3, [r0]
   1a45c:	b	1a400 <__assert_fail@plt+0x7984>
   1a460:	mov	r2, #1
   1a464:	strb	r2, [r1, #18]
   1a468:	mov	r2, #115	; 0x73
   1a46c:	strb	r2, [r0]
   1a470:	mov	r2, #4
   1a474:	b	1a400 <__assert_fail@plt+0x7984>
   1a478:	mov	r2, #1
   1a47c:	strb	r2, [r1, #19]
   1a480:	mov	r2, #115	; 0x73
   1a484:	strb	r2, [r0]
   1a488:	mov	r2, #2
   1a48c:	b	1a400 <__assert_fail@plt+0x7984>
   1a490:	mov	r2, #111	; 0x6f
   1a494:	strb	r2, [r0]
   1a498:	mov	r2, #1
   1a49c:	strb	r2, [r1, #18]
   1a4a0:	b	1a3fc <__assert_fail@plt+0x7980>
   1a4a4:	mov	r2, #115	; 0x73
   1a4a8:	strb	r2, [r0]
   1a4ac:	mov	r2, #5
   1a4b0:	b	1a400 <__assert_fail@plt+0x7984>
   1a4b4:	movw	r0, #60103	; 0xeac7
   1a4b8:	movw	r1, #59977	; 0xea49
   1a4bc:	movw	r3, #59985	; 0xea51
   1a4c0:	mov	r2, #80	; 0x50
   1a4c4:	movt	r0, #4
   1a4c8:	movt	r1, #4
   1a4cc:	movt	r3, #4
   1a4d0:	bl	12a7c <__assert_fail@plt>
   1a4d4:	movw	r0, #60084	; 0xeab4
   1a4d8:	movw	r1, #59977	; 0xea49
   1a4dc:	movw	r3, #59985	; 0xea51
   1a4e0:	mov	r2, #79	; 0x4f
   1a4e4:	movt	r0, #4
   1a4e8:	movt	r1, #4
   1a4ec:	movt	r3, #4
   1a4f0:	bl	12a7c <__assert_fail@plt>
   1a4f4:	movw	r0, #59958	; 0xea36
   1a4f8:	movw	r1, #59977	; 0xea49
   1a4fc:	movw	r3, #59985	; 0xea51
   1a500:	mov	r2, #78	; 0x4e
   1a504:	movt	r0, #4
   1a508:	movt	r1, #4
   1a50c:	movt	r3, #4
   1a510:	bl	12a7c <__assert_fail@plt>
   1a514:	movw	r0, #60122	; 0xeada
   1a518:	movw	r1, #59977	; 0xea49
   1a51c:	movw	r3, #59985	; 0xea51
   1a520:	mov	r2, #97	; 0x61
   1a524:	movt	r0, #4
   1a528:	movt	r1, #4
   1a52c:	movt	r3, #4
   1a530:	bl	12a7c <__assert_fail@plt>
   1a534:	movw	r0, #60139	; 0xeaeb
   1a538:	movw	r1, #59977	; 0xea49
   1a53c:	movw	r3, #59985	; 0xea51
   1a540:	mov	r2, #98	; 0x62
   1a544:	movt	r0, #4
   1a548:	movt	r1, #4
   1a54c:	movt	r3, #4
   1a550:	bl	12a7c <__assert_fail@plt>
   1a554:	movw	r0, #60160	; 0xeb00
   1a558:	movw	r1, #59977	; 0xea49
   1a55c:	movw	r3, #59985	; 0xea51
   1a560:	mov	r2, #105	; 0x69
   1a564:	movt	r0, #4
   1a568:	movt	r1, #4
   1a56c:	movt	r3, #4
   1a570:	bl	12a7c <__assert_fail@plt>
   1a574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a578:	add	fp, sp, #28
   1a57c:	sub	sp, sp, #20
   1a580:	mov	r6, r2
   1a584:	mov	r2, r1
   1a588:	movw	r1, #43860	; 0xab54
   1a58c:	mov	r7, r0
   1a590:	mov	r0, r2
   1a594:	movt	r1, #1
   1a598:	mov	r2, r6
   1a59c:	bl	18374 <__assert_fail@plt+0x58f8>
   1a5a0:	movw	r1, #257	; 0x101
   1a5a4:	add	r8, r0, #40	; 0x28
   1a5a8:	movw	r5, #60549	; 0xec85
   1a5ac:	mov	r2, #0
   1a5b0:	mov	r9, r6
   1a5b4:	str	r0, [sp, #16]
   1a5b8:	strh	r1, [r0, #16]
   1a5bc:	movt	r5, #4
   1a5c0:	vld1.32	{d16-d17}, [r7]!
   1a5c4:	vst1.32	{d16-d17}, [r8]
   1a5c8:	ldr	r1, [r7]
   1a5cc:	strh	r2, [r0, #18]
   1a5d0:	str	r2, [r0, #24]
   1a5d4:	str	r2, [r0, #40]	; 0x28
   1a5d8:	str	r1, [r0, #56]	; 0x38
   1a5dc:	ldrb	r0, [r6]
   1a5e0:	cmp	r0, #37	; 0x25
   1a5e4:	bne	1a604 <__assert_fail@plt+0x7b88>
   1a5e8:	b	1a628 <__assert_fail@plt+0x7bac>
   1a5ec:	movw	r5, #60549	; 0xec85
   1a5f0:	add	r6, r4, #1
   1a5f4:	movt	r5, #4
   1a5f8:	ldrb	r0, [r6]
   1a5fc:	cmp	r0, #37	; 0x25
   1a600:	beq	1a628 <__assert_fail@plt+0x7bac>
   1a604:	cmp	r0, #92	; 0x5c
   1a608:	beq	1a6f8 <__assert_fail@plt+0x7c7c>
   1a60c:	cmp	r0, #0
   1a610:	beq	1aa28 <__assert_fail@plt+0x7fac>
   1a614:	mov	r4, r6
   1a618:	add	r6, r6, #1
   1a61c:	ldrb	r0, [r6]
   1a620:	cmp	r0, #37	; 0x25
   1a624:	bne	1a604 <__assert_fail@plt+0x7b88>
   1a628:	mov	r7, r6
   1a62c:	ldrb	sl, [r7, #1]!
   1a630:	cmp	sl, #37	; 0x25
   1a634:	beq	1a6c8 <__assert_fail@plt+0x7c4c>
   1a638:	cmp	sl, #0
   1a63c:	beq	1ab04 <__assert_fail@plt+0x8088>
   1a640:	mov	r1, #1
   1a644:	ldrb	sl, [r6, r1]
   1a648:	mov	r4, r1
   1a64c:	cmp	sl, #0
   1a650:	beq	1a670 <__assert_fail@plt+0x7bf4>
   1a654:	mov	r0, r5
   1a658:	mov	r1, sl
   1a65c:	mov	r2, #5
   1a660:	bl	12860 <memchr@plt>
   1a664:	add	r1, r4, #1
   1a668:	cmp	r0, #0
   1a66c:	bne	1a644 <__assert_fail@plt+0x7bc8>
   1a670:	bl	12740 <__ctype_b_loc@plt>
   1a674:	ldr	r0, [r0]
   1a678:	add	r1, r0, sl, lsl #1
   1a67c:	ldrb	r1, [r1, #1]
   1a680:	tst	r1, #8
   1a684:	beq	1a6a8 <__assert_fail@plt+0x7c2c>
   1a688:	add	r1, r4, #1
   1a68c:	ldrb	sl, [r6, r1]
   1a690:	add	r1, r1, #1
   1a694:	add	r2, r0, sl, lsl #1
   1a698:	ldrb	r2, [r2, #1]
   1a69c:	tst	r2, #8
   1a6a0:	bne	1a68c <__assert_fail@plt+0x7c10>
   1a6a4:	sub	r4, r1, #1
   1a6a8:	add	r7, r6, r4
   1a6ac:	cmp	sl, #46	; 0x2e
   1a6b0:	bne	1a6c8 <__assert_fail@plt+0x7c4c>
   1a6b4:	ldrb	sl, [r7, #1]!
   1a6b8:	add	r1, r0, sl, lsl #1
   1a6bc:	ldrb	r1, [r1, #1]
   1a6c0:	tst	r1, #8
   1a6c4:	bne	1a6b4 <__assert_fail@plt+0x7c38>
   1a6c8:	movw	r0, #60554	; 0xec8a
   1a6cc:	mov	r1, sl
   1a6d0:	mov	r2, #29
   1a6d4:	movt	r0, #4
   1a6d8:	bl	12860 <memchr@plt>
   1a6dc:	cmp	r0, #0
   1a6e0:	mov	r4, #1
   1a6e4:	mov	r0, sl
   1a6e8:	beq	1a78c <__assert_fail@plt+0x7d10>
   1a6ec:	cmp	r0, #0
   1a6f0:	bne	1a7b8 <__assert_fail@plt+0x7d3c>
   1a6f4:	b	1a88c <__assert_fail@plt+0x7e10>
   1a6f8:	mov	r4, r6
   1a6fc:	ldrb	r0, [r4, #1]!
   1a700:	cmp	r0, #0
   1a704:	beq	1a760 <__assert_fail@plt+0x7ce4>
   1a708:	cmp	r0, #99	; 0x63
   1a70c:	beq	1aa88 <__assert_fail@plt+0x800c>
   1a710:	and	r1, r0, #248	; 0xf8
   1a714:	cmp	r1, #48	; 0x30
   1a718:	bne	1a7fc <__assert_fail@plt+0x7d80>
   1a71c:	ldrb	r1, [r6, #2]
   1a720:	sub	r0, r0, #48	; 0x30
   1a724:	mov	sl, #1
   1a728:	and	r2, r1, #248	; 0xf8
   1a72c:	cmp	r2, #48	; 0x30
   1a730:	bne	1a758 <__assert_fail@plt+0x7cdc>
   1a734:	add	r0, r1, r0, lsl #3
   1a738:	ldrb	r1, [r6, #3]
   1a73c:	mov	sl, #2
   1a740:	sub	r0, r0, #48	; 0x30
   1a744:	and	r2, r1, #248	; 0xf8
   1a748:	cmp	r2, #48	; 0x30
   1a74c:	addeq	r0, r1, r0, lsl #3
   1a750:	moveq	sl, #3
   1a754:	subeq	r0, r0, #48	; 0x30
   1a758:	strb	r0, [r6]
   1a75c:	b	1a9c4 <__assert_fail@plt+0x7f48>
   1a760:	movw	r1, #60180	; 0xeb14
   1a764:	mov	r0, #0
   1a768:	mov	r2, #5
   1a76c:	mov	sl, #0
   1a770:	movt	r1, #4
   1a774:	bl	1253c <dcgettext@plt>
   1a778:	mov	r2, r0
   1a77c:	mov	r0, #0
   1a780:	mov	r1, #0
   1a784:	bl	12674 <error@plt>
   1a788:	b	1a9c4 <__assert_fail@plt+0x7f48>
   1a78c:	movw	r0, #60583	; 0xeca7
   1a790:	mov	r1, sl
   1a794:	mov	r2, #5
   1a798:	movt	r0, #4
   1a79c:	bl	12860 <memchr@plt>
   1a7a0:	cmp	r0, #0
   1a7a4:	beq	1a888 <__assert_fail@plt+0x7e0c>
   1a7a8:	ldrb	r0, [r7, #1]
   1a7ac:	mov	r4, #2
   1a7b0:	cmp	r0, #0
   1a7b4:	beq	1a88c <__assert_fail@plt+0x7e10>
   1a7b8:	mov	r0, #0
   1a7bc:	cmp	r4, #2
   1a7c0:	add	r5, r7, r4
   1a7c4:	sub	r2, r7, r9
   1a7c8:	mov	r1, r9
   1a7cc:	mov	r3, #2
   1a7d0:	ldrbeq	r0, [r7, #1]
   1a7d4:	sub	r4, r5, #1
   1a7d8:	str	sl, [sp]
   1a7dc:	str	r0, [sp, #4]
   1a7e0:	ldr	r0, [sp, #16]
   1a7e4:	str	r0, [sp, #8]
   1a7e8:	mov	r0, r8
   1a7ec:	bl	1a1c0 <__assert_fail@plt+0x7744>
   1a7f0:	mov	r8, r0
   1a7f4:	mov	r9, r5
   1a7f8:	b	1a5ec <__assert_fail@plt+0x7b70>
   1a7fc:	sub	r1, r0, #92	; 0x5c
   1a800:	cmp	r1, #26
   1a804:	bhi	1a954 <__assert_fail@plt+0x7ed8>
   1a808:	add	r2, pc, #4
   1a80c:	mov	r0, #7
   1a810:	ldr	pc, [r2, r1, lsl #2]
   1a814:	andeq	sl, r1, r0, lsl #17
   1a818:	andeq	sl, r1, r4, asr r9
   1a81c:	andeq	sl, r1, r4, asr r9
   1a820:	andeq	sl, r1, r4, asr r9
   1a824:	andeq	sl, r1, r4, asr r9
   1a828:			; <UNDEFINED> instruction: 0x0001a9bc
   1a82c:	muleq	r1, r8, r9
   1a830:	andeq	sl, r1, r4, asr r9
   1a834:	andeq	sl, r1, r4, asr r9
   1a838:	andeq	sl, r1, r4, asr r9
   1a83c:			; <UNDEFINED> instruction: 0x0001a9b0
   1a840:	andeq	sl, r1, r4, asr r9
   1a844:	andeq	sl, r1, r4, asr r9
   1a848:	andeq	sl, r1, r4, asr r9
   1a84c:	andeq	sl, r1, r4, asr r9
   1a850:	andeq	sl, r1, r4, asr r9
   1a854:	andeq	sl, r1, r4, asr r9
   1a858:	andeq	sl, r1, r4, asr r9
   1a85c:			; <UNDEFINED> instruction: 0x0001a9b8
   1a860:	andeq	sl, r1, r4, asr r9
   1a864:	andeq	sl, r1, r4, asr r9
   1a868:	andeq	sl, r1, r4, asr r9
   1a86c:	muleq	r1, r0, r9
   1a870:	andeq	sl, r1, r4, asr r9
   1a874:	andeq	sl, r1, r0, lsr #19
   1a878:	andeq	sl, r1, r4, asr r9
   1a87c:	andeq	sl, r1, r8, lsr #19
   1a880:	mov	r0, #92	; 0x5c
   1a884:	b	1a9bc <__assert_fail@plt+0x7f40>
   1a888:	mov	r4, #0
   1a88c:	movw	r0, #60296	; 0xeb88
   1a890:	mov	r1, sl
   1a894:	mov	r2, #4
   1a898:	movt	r0, #4
   1a89c:	bl	12860 <memchr@plt>
   1a8a0:	cmp	r0, #0
   1a8a4:	bne	1ab2c <__assert_fail@plt+0x80b0>
   1a8a8:	add	sl, r7, #1
   1a8ac:	cmp	r4, #2
   1a8b0:	ldrbeq	r0, [sl]
   1a8b4:	cmpeq	r0, #0
   1a8b8:	beq	1a944 <__assert_fail@plt+0x7ec8>
   1a8bc:	movw	r1, #60435	; 0xec13
   1a8c0:	mov	r0, #0
   1a8c4:	movt	r1, #4
   1a8c8:	mov	r2, #5
   1a8cc:	bl	1253c <dcgettext@plt>
   1a8d0:	ldrb	r3, [r7]
   1a8d4:	mov	r2, r0
   1a8d8:	mov	r0, #0
   1a8dc:	mov	r1, #0
   1a8e0:	bl	12674 <error@plt>
   1a8e4:	mov	r0, #20
   1a8e8:	bl	309ec <__assert_fail@plt+0x1df70>
   1a8ec:	mov	r5, #0
   1a8f0:	sub	r4, sl, r9
   1a8f4:	str	r0, [r8]
   1a8f8:	str	r5, [r0]
   1a8fc:	str	r4, [r0, #12]
   1a900:	str	r5, [r0, #16]
   1a904:	strh	r5, [r0, #4]
   1a908:	add	r0, r4, #2
   1a90c:	bl	309ec <__assert_fail@plt+0x1df70>
   1a910:	mov	r6, r0
   1a914:	ldr	r0, [r8]
   1a918:	mov	r1, r9
   1a91c:	mov	r2, r4
   1a920:	str	r6, [r0, #8]
   1a924:	mov	r0, r6
   1a928:	bl	12818 <strncpy@plt>
   1a92c:	strb	r5, [r6, r4]
   1a930:	mov	r4, r7
   1a934:	mov	r9, sl
   1a938:	ldr	r0, [r8]
   1a93c:	add	r8, r0, #16
   1a940:	b	1a5ec <__assert_fail@plt+0x7b70>
   1a944:	movw	r1, #60362	; 0xebca
   1a948:	mov	r0, #0
   1a94c:	movt	r1, #4
   1a950:	b	1a8c8 <__assert_fail@plt+0x7e4c>
   1a954:	movw	r1, #60227	; 0xeb43
   1a958:	mov	r0, #0
   1a95c:	mov	r2, #5
   1a960:	movt	r1, #4
   1a964:	bl	1253c <dcgettext@plt>
   1a968:	ldrb	r3, [r4]
   1a96c:	mov	r2, r0
   1a970:	mov	r0, #0
   1a974:	mov	r1, #0
   1a978:	bl	12674 <error@plt>
   1a97c:	add	r6, r4, #1
   1a980:	ldrb	r0, [r6]
   1a984:	cmp	r0, #37	; 0x25
   1a988:	bne	1a604 <__assert_fail@plt+0x7b88>
   1a98c:	b	1a628 <__assert_fail@plt+0x7bac>
   1a990:	mov	r0, #13
   1a994:	b	1a9bc <__assert_fail@plt+0x7f40>
   1a998:	mov	r0, #8
   1a99c:	b	1a9bc <__assert_fail@plt+0x7f40>
   1a9a0:	mov	r0, #9
   1a9a4:	b	1a9bc <__assert_fail@plt+0x7f40>
   1a9a8:	mov	r0, #11
   1a9ac:	b	1a9bc <__assert_fail@plt+0x7f40>
   1a9b0:	mov	r0, #12
   1a9b4:	b	1a9bc <__assert_fail@plt+0x7f40>
   1a9b8:	mov	r0, #10
   1a9bc:	strb	r0, [r6]
   1a9c0:	mov	sl, #1
   1a9c4:	mov	r0, #20
   1a9c8:	bl	309ec <__assert_fail@plt+0x1df70>
   1a9cc:	sub	r1, r6, r9
   1a9d0:	mov	r5, #0
   1a9d4:	str	r0, [r8]
   1a9d8:	add	r7, r1, #1
   1a9dc:	str	r5, [r0]
   1a9e0:	str	r7, [r0, #12]
   1a9e4:	str	r5, [r0, #16]
   1a9e8:	strh	r5, [r0, #4]
   1a9ec:	add	r0, r1, #3
   1a9f0:	bl	309ec <__assert_fail@plt+0x1df70>
   1a9f4:	mov	r4, r0
   1a9f8:	ldr	r0, [r8]
   1a9fc:	mov	r1, r9
   1aa00:	mov	r2, r7
   1aa04:	str	r4, [r0, #8]
   1aa08:	mov	r0, r4
   1aa0c:	bl	12818 <strncpy@plt>
   1aa10:	strb	r5, [r4, r7]
   1aa14:	add	r4, r6, sl
   1aa18:	ldr	r0, [r8]
   1aa1c:	add	r9, r4, #1
   1aa20:	add	r8, r0, #16
   1aa24:	b	1a5ec <__assert_fail@plt+0x7b70>
   1aa28:	cmp	r6, r9
   1aa2c:	bls	1aaf8 <__assert_fail@plt+0x807c>
   1aa30:	mov	r0, #20
   1aa34:	bl	309ec <__assert_fail@plt+0x1df70>
   1aa38:	mov	r5, #0
   1aa3c:	sub	r4, r6, r9
   1aa40:	str	r0, [r8]
   1aa44:	str	r5, [r0]
   1aa48:	str	r4, [r0, #12]
   1aa4c:	str	r5, [r0, #16]
   1aa50:	strh	r5, [r0, #4]
   1aa54:	add	r0, r4, #2
   1aa58:	bl	309ec <__assert_fail@plt+0x1df70>
   1aa5c:	mov	r6, r0
   1aa60:	ldr	r0, [r8]
   1aa64:	mov	r1, r9
   1aa68:	mov	r2, r4
   1aa6c:	str	r6, [r0, #8]
   1aa70:	mov	r0, r6
   1aa74:	bl	12818 <strncpy@plt>
   1aa78:	strb	r5, [r6, r4]
   1aa7c:	mov	r0, #1
   1aa80:	sub	sp, fp, #28
   1aa84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa88:	mov	r0, #20
   1aa8c:	bl	309ec <__assert_fail@plt+0x1df70>
   1aa90:	mov	r1, #1
   1aa94:	sub	r6, r6, r9
   1aa98:	mov	r4, #0
   1aa9c:	str	r0, [r8]
   1aaa0:	str	r1, [r0]
   1aaa4:	str	r6, [r0, #12]
   1aaa8:	str	r4, [r0, #16]
   1aaac:	strh	r4, [r0, #4]
   1aab0:	add	r0, r6, #2
   1aab4:	bl	309ec <__assert_fail@plt+0x1df70>
   1aab8:	mov	r7, r0
   1aabc:	ldr	r0, [r8]
   1aac0:	mov	r1, r9
   1aac4:	mov	r2, r6
   1aac8:	str	r7, [r0, #8]
   1aacc:	mov	r0, r7
   1aad0:	bl	12818 <strncpy@plt>
   1aad4:	ldr	r1, [sp, #16]
   1aad8:	strb	r4, [r7, r6]
   1aadc:	ldrb	r0, [r1, #18]
   1aae0:	cmp	r0, #0
   1aae4:	beq	1aaf8 <__assert_fail@plt+0x807c>
   1aae8:	ldr	r0, [r1, #24]
   1aaec:	cmp	r0, #2
   1aaf0:	movls	r0, #3
   1aaf4:	strls	r0, [r1, #24]
   1aaf8:	mov	r0, #1
   1aafc:	sub	sp, fp, #28
   1ab00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab04:	movw	r1, #60262	; 0xeb66
   1ab08:	mov	r0, #0
   1ab0c:	mov	r2, #5
   1ab10:	movt	r1, #4
   1ab14:	bl	1253c <dcgettext@plt>
   1ab18:	mov	r2, r0
   1ab1c:	mov	r0, #1
   1ab20:	mov	r1, #0
   1ab24:	mov	r3, r6
   1ab28:	bl	12674 <error@plt>
   1ab2c:	movw	r1, #60300	; 0xeb8c
   1ab30:	mov	r0, #0
   1ab34:	mov	r2, #5
   1ab38:	movt	r1, #4
   1ab3c:	bl	1253c <dcgettext@plt>
   1ab40:	ldrb	r3, [r7]
   1ab44:	mov	r2, r0
   1ab48:	mov	r0, #1
   1ab4c:	mov	r1, #0
   1ab50:	bl	12674 <error@plt>
   1ab54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab58:	add	fp, sp, #28
   1ab5c:	sub	sp, sp, #4
   1ab60:	mov	r4, r2
   1ab64:	ldr	r7, [r4, #40]!	; 0x28
   1ab68:	cmp	r7, #0
   1ab6c:	beq	1ac9c <__assert_fail@plt+0x8220>
   1ab70:	mov	r9, r0
   1ab74:	add	r0, r1, #80	; 0x50
   1ab78:	mov	r5, r1
   1ab7c:	add	r8, r1, #88	; 0x58
   1ab80:	add	sl, r1, #72	; 0x48
   1ab84:	str	r0, [sp]
   1ab88:	ldr	r0, [r7]
   1ab8c:	cmp	r0, #2
   1ab90:	bne	1ac10 <__assert_fail@plt+0x8194>
   1ab94:	ldrb	r2, [r7, #5]
   1ab98:	cmp	r2, #0
   1ab9c:	beq	1ac10 <__assert_fail@plt+0x8194>
   1aba0:	ldrb	r0, [r7, #4]
   1aba4:	sub	r0, r0, #65	; 0x41
   1aba8:	cmp	r0, #19
   1abac:	bhi	1aca8 <__assert_fail@plt+0x822c>
   1abb0:	add	r1, pc, #0
   1abb4:	ldr	pc, [r1, r0, lsl #2]
   1abb8:	andeq	sl, r1, r8, lsl #24
   1abbc:	andeq	sl, r1, r0, asr #24
   1abc0:	andeq	sl, r1, r4, ror ip
   1abc4:	andeq	sl, r1, r8, lsr #25
   1abc8:	andeq	sl, r1, r8, lsr #25
   1abcc:	andeq	sl, r1, r8, lsr #25
   1abd0:	andeq	sl, r1, r8, lsr #25
   1abd4:	andeq	sl, r1, r8, lsr #25
   1abd8:	andeq	sl, r1, r8, lsr #25
   1abdc:	andeq	sl, r1, r8, lsr #25
   1abe0:	andeq	sl, r1, r8, lsr #25
   1abe4:	andeq	sl, r1, r8, lsr #25
   1abe8:	andeq	sl, r1, r8, lsr #25
   1abec:	andeq	sl, r1, r8, lsr #25
   1abf0:	andeq	sl, r1, r8, lsr #25
   1abf4:	andeq	sl, r1, r8, lsr #25
   1abf8:	andeq	sl, r1, r8, lsr #25
   1abfc:	andeq	sl, r1, r8, lsr #25
   1ac00:	andeq	sl, r1, r8, lsr #25
   1ac04:	andeq	sl, r1, r4, lsr ip
   1ac08:	ldrd	r0, [sl]
   1ac0c:	b	1ac78 <__assert_fail@plt+0x81fc>
   1ac10:	mov	r0, r4
   1ac14:	mov	r1, r7
   1ac18:	mov	r2, r9
   1ac1c:	mov	r3, r5
   1ac20:	bl	1b260 <__assert_fail@plt+0x87e4>
   1ac24:	ldr	r7, [r7, #16]
   1ac28:	cmp	r7, #0
   1ac2c:	bne	1ab88 <__assert_fail@plt+0x810c>
   1ac30:	b	1ac9c <__assert_fail@plt+0x8220>
   1ac34:	ldr	r0, [sp]
   1ac38:	ldrd	r0, [r0]
   1ac3c:	b	1ac78 <__assert_fail@plt+0x81fc>
   1ac40:	mvn	r1, #0
   1ac44:	cmp	r2, #64	; 0x40
   1ac48:	mvn	r0, #0
   1ac4c:	beq	1ac78 <__assert_fail@plt+0x81fc>
   1ac50:	ldr	r1, [r7, #8]
   1ac54:	movw	r2, #58175	; 0xe33f
   1ac58:	mov	r0, r4
   1ac5c:	movt	r2, #4
   1ac60:	bl	1acc8 <__assert_fail@plt+0x824c>
   1ac64:	ldr	r7, [r7, #16]
   1ac68:	cmp	r7, #0
   1ac6c:	bne	1ab88 <__assert_fail@plt+0x810c>
   1ac70:	b	1ac9c <__assert_fail@plt+0x8220>
   1ac74:	ldrd	r0, [r8]
   1ac78:	ldr	r6, [r7, #8]
   1ac7c:	bl	1ad2c <__assert_fail@plt+0x82b0>
   1ac80:	mov	r2, r0
   1ac84:	mov	r0, r4
   1ac88:	mov	r1, r6
   1ac8c:	bl	1acc8 <__assert_fail@plt+0x824c>
   1ac90:	ldr	r7, [r7, #16]
   1ac94:	cmp	r7, #0
   1ac98:	bne	1ab88 <__assert_fail@plt+0x810c>
   1ac9c:	mov	r0, #1
   1aca0:	sub	sp, fp, #28
   1aca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aca8:	movw	r0, #55401	; 0xd869
   1acac:	movw	r1, #59977	; 0xea49
   1acb0:	movw	r3, #60481	; 0xec41
   1acb4:	movw	r2, #1304	; 0x518
   1acb8:	movt	r0, #4
   1acbc:	movt	r1, #4
   1acc0:	movt	r3, #4
   1acc4:	bl	12a7c <__assert_fail@plt>
   1acc8:	sub	sp, sp, #8
   1accc:	push	{r4, sl, fp, lr}
   1acd0:	add	fp, sp, #8
   1acd4:	sub	sp, sp, #8
   1acd8:	str	r2, [fp, #8]
   1acdc:	add	r2, fp, #8
   1ace0:	str	r3, [fp, #12]
   1ace4:	mov	r4, r0
   1ace8:	str	r2, [sp, #4]
   1acec:	ldr	r0, [r0, #4]
   1acf0:	bl	128fc <vfprintf@plt>
   1acf4:	cmn	r0, #1
   1acf8:	ble	1ad0c <__assert_fail@plt+0x8290>
   1acfc:	sub	sp, fp, #8
   1ad00:	pop	{r4, sl, fp, lr}
   1ad04:	add	sp, sp, #8
   1ad08:	bx	lr
   1ad0c:	bl	127d0 <__errno_location@plt>
   1ad10:	ldr	r0, [r0]
   1ad14:	ldr	r1, [r4, #8]
   1ad18:	bl	18f3c <__assert_fail@plt+0x64c0>
   1ad1c:	sub	sp, fp, #8
   1ad20:	pop	{r4, sl, fp, lr}
   1ad24:	add	sp, sp, #8
   1ad28:	bx	lr
   1ad2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad30:	add	fp, sp, #28
   1ad34:	sub	sp, sp, #148	; 0x94
   1ad38:	mov	r4, r2
   1ad3c:	mov	r3, r1
   1ad40:	cmp	r2, #43	; 0x2b
   1ad44:	str	r1, [fp, #-76]	; 0xffffffb4
   1ad48:	str	r0, [fp, #-80]	; 0xffffffb0
   1ad4c:	bne	1ad70 <__assert_fail@plt+0x82f4>
   1ad50:	movw	r0, #61232	; 0xef30
   1ad54:	movt	r0, #4
   1ad58:	vldr	d16, [r0]
   1ad5c:	movw	r0, #9515	; 0x252b
   1ad60:	movt	r0, #84	; 0x54
   1ad64:	str	r0, [sp, #56]	; 0x38
   1ad68:	vstr	d16, [sp, #48]	; 0x30
   1ad6c:	b	1ada4 <__assert_fail@plt+0x8328>
   1ad70:	mov	r0, #37	; 0x25
   1ad74:	strb	r4, [sp, #49]	; 0x31
   1ad78:	mov	r5, #0
   1ad7c:	strb	r0, [sp, #48]	; 0x30
   1ad80:	sub	r0, r4, #64	; 0x40
   1ad84:	strb	r5, [sp, #50]	; 0x32
   1ad88:	cmp	r0, #24
   1ad8c:	bhi	1aea0 <__assert_fail@plt+0x8424>
   1ad90:	movw	r2, #1
   1ad94:	mov	r1, #1
   1ad98:	movt	r2, #280	; 0x118
   1ad9c:	tst	r2, r1, lsl r0
   1ada0:	beq	1aea0 <__assert_fail@plt+0x8424>
   1ada4:	movw	r2, #60588	; 0xecac
   1ada8:	add	r0, sp, #64	; 0x40
   1adac:	mov	r1, #32
   1adb0:	movt	r2, #4
   1adb4:	bl	127e8 <snprintf@plt>
   1adb8:	cmp	r0, #32
   1adbc:	bge	1afa4 <__assert_fail@plt+0x8528>
   1adc0:	mov	r8, r0
   1adc4:	mov	r5, #1
   1adc8:	cmp	r4, #64	; 0x40
   1adcc:	beq	1aeb0 <__assert_fail@plt+0x8434>
   1add0:	sub	r0, fp, #80	; 0x50
   1add4:	bl	12704 <localtime@plt>
   1add8:	cmp	r0, #0
   1addc:	beq	1aeb0 <__assert_fail@plt+0x8434>
   1ade0:	add	r6, sp, #48	; 0x30
   1ade4:	mov	r4, r0
   1ade8:	mov	r0, r6
   1adec:	bl	12788 <strlen@plt>
   1adf0:	mov	r7, r0
   1adf4:	add	r0, r0, #2
   1adf8:	bl	309ec <__assert_fail@plt+0x1df70>
   1adfc:	mov	r1, #95	; 0x5f
   1ae00:	mov	r9, r0
   1ae04:	add	r2, r7, #1
   1ae08:	strb	r1, [r0], #1
   1ae0c:	mov	r1, r6
   1ae10:	bl	124b8 <memcpy@plt>
   1ae14:	mov	r1, #28
   1ae18:	mov	r2, r4
   1ae1c:	add	r0, r4, #16
   1ae20:	sub	r3, fp, #72	; 0x48
   1ae24:	movw	r5, #15536	; 0x3cb0
   1ae28:	vld1.32	{d16-d17}, [r2], r1
   1ae2c:	vld1.32	{d18-d19}, [r0]
   1ae30:	add	r0, r3, #16
   1ae34:	movt	r5, #6
   1ae38:	vld1.32	{d20-d21}, [r2]
   1ae3c:	vst1.64	{d16-d17}, [r3], r1
   1ae40:	vst1.64	{d18-d19}, [r0]
   1ae44:	mov	r1, #11
   1ae48:	vst1.32	{d20-d21}, [r3]
   1ae4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1ae50:	cmp	r0, #10
   1ae54:	mvngt	r1, #10
   1ae58:	add	r0, r1, r0
   1ae5c:	str	r0, [fp, #-72]	; 0xffffffb8
   1ae60:	ldr	r0, [r5]
   1ae64:	cmp	r0, #0
   1ae68:	bne	1ae80 <__assert_fail@plt+0x8404>
   1ae6c:	mov	r0, #1
   1ae70:	str	r0, [r5, #4]
   1ae74:	mov	r0, #1
   1ae78:	bl	309ec <__assert_fail@plt+0x1df70>
   1ae7c:	str	r0, [r5]
   1ae80:	ldr	r1, [r5, #4]
   1ae84:	mov	r2, r9
   1ae88:	mov	r3, r4
   1ae8c:	bl	126ec <strftime@plt>
   1ae90:	cmp	r0, #0
   1ae94:	beq	1b04c <__assert_fail@plt+0x85d0>
   1ae98:	ldr	r1, [r5, #4]
   1ae9c:	b	1b044 <__assert_fail@plt+0x85c8>
   1aea0:	mov	r8, #0
   1aea4:	strb	r5, [sp, #64]	; 0x40
   1aea8:	cmp	r4, #64	; 0x40
   1aeac:	bne	1add0 <__assert_fail@plt+0x8354>
   1aeb0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1aeb4:	mov	r2, #1
   1aeb8:	mov	r1, #0
   1aebc:	movw	r6, #13720	; 0x3598
   1aec0:	mov	r3, #0
   1aec4:	str	r2, [sp]
   1aec8:	stmib	sp, {r1, r2}
   1aecc:	str	r1, [sp, #12]
   1aed0:	movt	r6, #6
   1aed4:	asr	r1, r0, #31
   1aed8:	adds	r2, r0, r0, asr #31
   1aedc:	adc	r1, r1, r0, asr #31
   1aee0:	eor	r1, r1, r0, asr #31
   1aee4:	eor	r0, r2, r0, asr #31
   1aee8:	add	r2, r6, #1
   1aeec:	bl	24ec8 <__assert_fail@plt+0x1244c>
   1aef0:	cmp	r0, r6
   1aef4:	bls	1afc4 <__assert_fail@plt+0x8548>
   1aef8:	mov	r4, r0
   1aefc:	movw	r0, #791	; 0x317
   1af00:	add	r0, r6, r0
   1af04:	cmp	r4, r0
   1af08:	bcs	1afe4 <__assert_fail@plt+0x8568>
   1af0c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1af10:	cmn	r0, #1
   1af14:	movle	r0, #45	; 0x2d
   1af18:	strble	r0, [r4, #-1]!
   1af1c:	cmp	r5, #0
   1af20:	beq	1af98 <__assert_fail@plt+0x851c>
   1af24:	mov	r0, r4
   1af28:	sub	r5, r4, r6
   1af2c:	bl	12788 <strlen@plt>
   1af30:	add	r0, r0, r5
   1af34:	movw	r1, #791	; 0x317
   1af38:	cmp	r0, r1
   1af3c:	bcs	1b004 <__assert_fail@plt+0x8588>
   1af40:	movw	r1, #790	; 0x316
   1af44:	add	r5, sp, #64	; 0x40
   1af48:	sub	r6, r1, r0
   1af4c:	mov	r0, r5
   1af50:	bl	12788 <strlen@plt>
   1af54:	cmp	r0, r6
   1af58:	bcc	1af7c <__assert_fail@plt+0x8500>
   1af5c:	movw	r2, #60713	; 0xed29
   1af60:	mov	r0, #0
   1af64:	mov	r1, #0
   1af68:	mov	r3, r8
   1af6c:	str	r6, [sp]
   1af70:	str	r5, [sp, #4]
   1af74:	movt	r2, #4
   1af78:	bl	12674 <error@plt>
   1af7c:	add	r0, sp, #64	; 0x40
   1af80:	bl	12788 <strlen@plt>
   1af84:	cmp	r0, r6
   1af88:	bcs	1b024 <__assert_fail@plt+0x85a8>
   1af8c:	add	r1, sp, #64	; 0x40
   1af90:	mov	r0, r4
   1af94:	bl	125fc <strcat@plt>
   1af98:	mov	r0, r4
   1af9c:	sub	sp, fp, #28
   1afa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afa4:	movw	r0, #60596	; 0xecb4
   1afa8:	movw	r1, #59977	; 0xea49
   1afac:	movw	r3, #60622	; 0xecce
   1afb0:	movw	r2, #665	; 0x299
   1afb4:	movt	r0, #4
   1afb8:	movt	r1, #4
   1afbc:	movt	r3, #4
   1afc0:	bl	12a7c <__assert_fail@plt>
   1afc4:	movw	r0, #60662	; 0xecf6
   1afc8:	movw	r1, #59977	; 0xea49
   1afcc:	movw	r3, #60622	; 0xecce
   1afd0:	movw	r2, #697	; 0x2b9
   1afd4:	movt	r0, #4
   1afd8:	movt	r1, #4
   1afdc:	movt	r3, #4
   1afe0:	bl	12a7c <__assert_fail@plt>
   1afe4:	movw	r0, #60670	; 0xecfe
   1afe8:	movw	r1, #59977	; 0xea49
   1afec:	movw	r3, #60622	; 0xecce
   1aff0:	movw	r2, #698	; 0x2ba
   1aff4:	movt	r0, #4
   1aff8:	movt	r1, #4
   1affc:	movt	r3, #4
   1b000:	bl	12a7c <__assert_fail@plt>
   1b004:	movw	r0, #60695	; 0xed17
   1b008:	movw	r1, #59977	; 0xea49
   1b00c:	movw	r3, #60622	; 0xecce
   1b010:	movw	r2, #711	; 0x2c7
   1b014:	movt	r0, #4
   1b018:	movt	r1, #4
   1b01c:	movt	r3, #4
   1b020:	bl	12a7c <__assert_fail@plt>
   1b024:	movw	r0, #60759	; 0xed57
   1b028:	movw	r1, #59977	; 0xea49
   1b02c:	movw	r3, #60622	; 0xecce
   1b030:	mov	r2, #720	; 0x2d0
   1b034:	movt	r0, #4
   1b038:	movt	r1, #4
   1b03c:	movt	r3, #4
   1b040:	bl	12a7c <__assert_fail@plt>
   1b044:	cmp	r0, r1
   1b048:	bcc	1b084 <__assert_fail@plt+0x8608>
   1b04c:	mov	r7, r5
   1b050:	mov	r2, #1
   1b054:	ldr	r0, [r7], #4
   1b058:	mov	r1, r7
   1b05c:	bl	30b98 <__assert_fail@plt+0x1e11c>
   1b060:	str	r0, [r5]
   1b064:	mov	r2, r9
   1b068:	mov	r3, r4
   1b06c:	ldr	r1, [r7]
   1b070:	bl	126ec <strftime@plt>
   1b074:	ldr	r1, [r7]
   1b078:	cmp	r0, #0
   1b07c:	bne	1b044 <__assert_fail@plt+0x85c8>
   1b080:	b	1b04c <__assert_fail@plt+0x85d0>
   1b084:	str	r0, [sp, #20]
   1b088:	add	r0, r8, r0
   1b08c:	str	r8, [sp, #28]
   1b090:	add	r4, r0, #1
   1b094:	ldr	r0, [r5]
   1b098:	mov	r1, r4
   1b09c:	bl	30a34 <__assert_fail@plt+0x1dfb8>
   1b0a0:	stm	r5, {r0, r4}
   1b0a4:	mov	r0, r4
   1b0a8:	str	r4, [sp, #24]
   1b0ac:	bl	309ec <__assert_fail@plt+0x1df70>
   1b0b0:	ldr	r1, [r5, #4]
   1b0b4:	sub	r3, fp, #72	; 0x48
   1b0b8:	mov	r2, r9
   1b0bc:	str	r0, [sp, #40]	; 0x28
   1b0c0:	str	r9, [sp, #36]	; 0x24
   1b0c4:	bl	126ec <strftime@plt>
   1b0c8:	ldr	r0, [r5]
   1b0cc:	ldrb	r1, [r0]
   1b0d0:	str	r0, [sp, #32]
   1b0d4:	cmp	r1, #0
   1b0d8:	beq	1b19c <__assert_fail@plt+0x8720>
   1b0dc:	ldr	r2, [sp, #40]	; 0x28
   1b0e0:	ldr	r3, [sp, #32]
   1b0e4:	mov	r9, #0
   1b0e8:	mov	sl, #0
   1b0ec:	mov	r6, #0
   1b0f0:	ldrb	r0, [r2]
   1b0f4:	add	r8, r2, #1
   1b0f8:	add	r5, r3, #1
   1b0fc:	mov	r3, #0
   1b100:	str	r3, [sp, #44]	; 0x2c
   1b104:	clz	r2, r0
   1b108:	lsr	r2, r2, #5
   1b10c:	tst	r2, #1
   1b110:	bne	1b19c <__assert_fail@plt+0x8720>
   1b114:	uxtb	r4, r1
   1b118:	uxtb	r7, r0
   1b11c:	cmp	r4, r7
   1b120:	beq	1b174 <__assert_fail@plt+0x86f8>
   1b124:	bl	12740 <__ctype_b_loc@plt>
   1b128:	ldr	r0, [r0]
   1b12c:	add	r1, r0, r4, lsl #1
   1b130:	ldrb	r1, [r1, #1]
   1b134:	tst	r1, #8
   1b138:	addne	r0, r0, r7, lsl #1
   1b13c:	ldrbne	r0, [r0, #1]
   1b140:	tstne	r0, #8
   1b144:	beq	1b19c <__assert_fail@plt+0x8720>
   1b148:	tst	r6, #1
   1b14c:	beq	1b168 <__assert_fail@plt+0x86ec>
   1b150:	ldr	r0, [sp, #44]	; 0x2c
   1b154:	sub	r0, sl, r0
   1b158:	cmp	r0, r9
   1b15c:	bne	1b19c <__assert_fail@plt+0x8720>
   1b160:	add	r9, r9, #1
   1b164:	b	1b170 <__assert_fail@plt+0x86f4>
   1b168:	str	sl, [sp, #44]	; 0x2c
   1b16c:	mov	r9, #1
   1b170:	mov	r6, #1
   1b174:	ldrb	r0, [r8, sl]
   1b178:	ldrb	r1, [r5, sl]
   1b17c:	add	sl, sl, #1
   1b180:	clz	r2, r0
   1b184:	cmp	r1, #0
   1b188:	lsr	r2, r2, #5
   1b18c:	bne	1b10c <__assert_fail@plt+0x8690>
   1b190:	cmp	r9, #2
   1b194:	cmpeq	r0, #0
   1b198:	beq	1b1c8 <__assert_fail@plt+0x874c>
   1b19c:	ldr	r0, [sp, #36]	; 0x24
   1b1a0:	bl	32c40 <__assert_fail@plt+0x201c4>
   1b1a4:	ldr	r0, [sp, #40]	; 0x28
   1b1a8:	bl	32c40 <__assert_fail@plt+0x201c4>
   1b1ac:	movw	r0, #15536	; 0x3cb0
   1b1b0:	movt	r0, #6
   1b1b4:	ldr	r0, [r0]
   1b1b8:	add	r4, r0, #1
   1b1bc:	mov	r0, r4
   1b1c0:	sub	sp, fp, #28
   1b1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1c8:	ldr	r0, [sp, #44]	; 0x2c
   1b1cc:	add	r4, r0, #2
   1b1d0:	bl	12740 <__ctype_b_loc@plt>
   1b1d4:	ldr	r1, [sp, #32]
   1b1d8:	ldr	r0, [r0]
   1b1dc:	ldrb	r2, [r1, r4]!
   1b1e0:	add	r0, r0, r2, lsl #1
   1b1e4:	ldrb	r0, [r0, #1]
   1b1e8:	tst	r0, #8
   1b1ec:	bne	1b19c <__assert_fail@plt+0x8720>
   1b1f0:	ldr	r2, [sp, #20]
   1b1f4:	ldr	r7, [sp, #28]
   1b1f8:	ldr	r3, [sp, #24]
   1b1fc:	sub	r2, r2, r4
   1b200:	add	r0, r4, r7
   1b204:	add	r2, r2, #1
   1b208:	add	r0, r0, r2
   1b20c:	cmp	r0, r3
   1b210:	bne	1b23c <__assert_fail@plt+0x87c0>
   1b214:	add	r0, r1, r7
   1b218:	bl	1244c <memmove@plt>
   1b21c:	ldr	r0, [sp, #32]
   1b220:	ldr	r1, [sp, #44]	; 0x2c
   1b224:	mov	r2, r7
   1b228:	add	r0, r0, r1
   1b22c:	add	r1, sp, #64	; 0x40
   1b230:	add	r0, r0, #2
   1b234:	bl	124b8 <memcpy@plt>
   1b238:	b	1b19c <__assert_fail@plt+0x8720>
   1b23c:	movw	r0, #60787	; 0xed73
   1b240:	movw	r1, #59977	; 0xea49
   1b244:	movw	r3, #60838	; 0xeda6
   1b248:	movw	r2, #549	; 0x225
   1b24c:	movt	r0, #4
   1b250:	movt	r1, #4
   1b254:	movt	r3, #4
   1b258:	bl	12a7c <__assert_fail@plt>
   1b25c:	nop	{0}
   1b260:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b264:	add	fp, sp, #24
   1b268:	vpush	{d8-d9}
   1b26c:	sub	sp, sp, #672	; 0x2a0
   1b270:	mov	r4, r0
   1b274:	ldr	r0, [r1]
   1b278:	mov	r5, r1
   1b27c:	cmp	r0, #2
   1b280:	beq	1b314 <__assert_fail@plt+0x8898>
   1b284:	cmp	r0, #1
   1b288:	beq	1b2b8 <__assert_fail@plt+0x883c>
   1b28c:	cmp	r0, #0
   1b290:	bne	1b958 <__assert_fail@plt+0x8edc>
   1b294:	ldr	r0, [r5, #8]
   1b298:	ldr	r5, [r5, #12]
   1b29c:	ldr	r3, [r4, #4]
   1b2a0:	mov	r1, #1
   1b2a4:	mov	r2, r5
   1b2a8:	bl	125f0 <fwrite@plt>
   1b2ac:	cmp	r0, r5
   1b2b0:	bcc	1b2f8 <__assert_fail@plt+0x887c>
   1b2b4:	b	1b958 <__assert_fail@plt+0x8edc>
   1b2b8:	ldr	r0, [r5, #8]
   1b2bc:	ldr	r5, [r5, #12]
   1b2c0:	ldr	r3, [r4, #4]
   1b2c4:	mov	r1, #1
   1b2c8:	mov	r2, r5
   1b2cc:	bl	125f0 <fwrite@plt>
   1b2d0:	cmp	r0, r5
   1b2d4:	bcs	1b2e8 <__assert_fail@plt+0x886c>
   1b2d8:	bl	127d0 <__errno_location@plt>
   1b2dc:	ldr	r0, [r0]
   1b2e0:	ldr	r1, [r4, #8]
   1b2e4:	bl	18f3c <__assert_fail@plt+0x64c0>
   1b2e8:	ldr	r0, [r4, #4]
   1b2ec:	bl	32bd8 <__assert_fail@plt+0x2015c>
   1b2f0:	cmp	r0, #0
   1b2f4:	beq	1b958 <__assert_fail@plt+0x8edc>
   1b2f8:	bl	127d0 <__errno_location@plt>
   1b2fc:	ldr	r0, [r0]
   1b300:	ldr	r1, [r4, #8]
   1b304:	bl	18f3c <__assert_fail@plt+0x64c0>
   1b308:	sub	sp, fp, #40	; 0x28
   1b30c:	vpop	{d8-d9}
   1b310:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b314:	ldrb	r0, [r5, #4]
   1b318:	cmp	r0, #121	; 0x79
   1b31c:	bhi	1b958 <__assert_fail@plt+0x8edc>
   1b320:	add	r1, pc, #8
   1b324:	mov	r7, r3
   1b328:	mov	r6, r2
   1b32c:	ldr	pc, [r1, r0, lsl #2]
   1b330:	muleq	r1, r4, fp
   1b334:	andeq	fp, r1, r8, asr r9
   1b338:	andeq	fp, r1, r8, asr r9
   1b33c:	andeq	fp, r1, r8, asr r9
   1b340:	andeq	fp, r1, r8, asr r9
   1b344:	andeq	fp, r1, r8, asr r9
   1b348:	andeq	fp, r1, r8, asr r9
   1b34c:	andeq	fp, r1, r8, asr r9
   1b350:	andeq	fp, r1, r8, asr r9
   1b354:	andeq	fp, r1, r8, asr r9
   1b358:	andeq	fp, r1, r8, asr r9
   1b35c:	andeq	fp, r1, r8, asr r9
   1b360:	andeq	fp, r1, r8, asr r9
   1b364:	andeq	fp, r1, r8, asr r9
   1b368:	andeq	fp, r1, r8, asr r9
   1b36c:	andeq	fp, r1, r8, asr r9
   1b370:	andeq	fp, r1, r8, asr r9
   1b374:	andeq	fp, r1, r8, asr r9
   1b378:	andeq	fp, r1, r8, asr r9
   1b37c:	andeq	fp, r1, r8, asr r9
   1b380:	andeq	fp, r1, r8, asr r9
   1b384:	andeq	fp, r1, r8, asr r9
   1b388:	andeq	fp, r1, r8, asr r9
   1b38c:	andeq	fp, r1, r8, asr r9
   1b390:	andeq	fp, r1, r8, asr r9
   1b394:	andeq	fp, r1, r8, asr r9
   1b398:	andeq	fp, r1, r8, asr r9
   1b39c:	andeq	fp, r1, r8, asr r9
   1b3a0:	andeq	fp, r1, r8, asr r9
   1b3a4:	andeq	fp, r1, r8, asr r9
   1b3a8:	andeq	fp, r1, r8, asr r9
   1b3ac:	andeq	fp, r1, r8, asr r9
   1b3b0:	andeq	fp, r1, r8, asr r9
   1b3b4:	andeq	fp, r1, r8, asr r9
   1b3b8:	andeq	fp, r1, r8, asr r9
   1b3bc:	andeq	fp, r1, r8, asr r9
   1b3c0:	andeq	fp, r1, r8, asr r9
   1b3c4:	muleq	r1, r4, r2
   1b3c8:	andeq	fp, r1, r8, asr r9
   1b3cc:	andeq	fp, r1, r8, asr r9
   1b3d0:	andeq	fp, r1, r8, asr r9
   1b3d4:	andeq	fp, r1, r8, asr r9
   1b3d8:	andeq	fp, r1, r8, asr r9
   1b3dc:	andeq	fp, r1, r8, asr r9
   1b3e0:	andeq	fp, r1, r8, asr r9
   1b3e4:	andeq	fp, r1, r8, asr r9
   1b3e8:	andeq	fp, r1, r8, asr r9
   1b3ec:	andeq	fp, r1, r8, asr r9
   1b3f0:	andeq	fp, r1, r8, asr r9
   1b3f4:	andeq	fp, r1, r8, asr r9
   1b3f8:	andeq	fp, r1, r8, asr r9
   1b3fc:	andeq	fp, r1, r8, asr r9
   1b400:	andeq	fp, r1, r8, asr r9
   1b404:	andeq	fp, r1, r8, asr r9
   1b408:	andeq	fp, r1, r8, asr r9
   1b40c:	andeq	fp, r1, r8, asr r9
   1b410:	andeq	fp, r1, r8, asr r9
   1b414:	andeq	fp, r1, r8, asr r9
   1b418:	andeq	fp, r1, r8, asr r9
   1b41c:	andeq	fp, r1, r8, asr r9
   1b420:	andeq	fp, r1, r8, asr r9
   1b424:	andeq	fp, r1, r8, asr r9
   1b428:	andeq	fp, r1, r8, asr r9
   1b42c:	andeq	fp, r1, r8, asr r9
   1b430:	andeq	fp, r1, r8, asr r9
   1b434:	andeq	fp, r1, r8, asr r9
   1b438:	andeq	fp, r1, r8, asr r9
   1b43c:	andeq	fp, r1, r8, asr r9
   1b440:	andeq	fp, r1, r8, lsl r5
   1b444:	andeq	fp, r1, r8, asr r9
   1b448:	andeq	fp, r1, r8, lsr #13
   1b44c:	andeq	fp, r1, r0, ror #13
   1b450:	andeq	fp, r1, r8, ror #13
   1b454:	andeq	fp, r1, r8, asr r9
   1b458:	andeq	fp, r1, r8, asr r9
   1b45c:	andeq	fp, r1, r8, asr r9
   1b460:	andeq	fp, r1, r8, asr r9
   1b464:	andeq	fp, r1, r0, lsl #12
   1b468:	andeq	fp, r1, r8, asr r9
   1b46c:	andeq	fp, r1, r8, asr r9
   1b470:	ldrdeq	fp, [r1], -r8
   1b474:	andeq	fp, r1, r8, asr r9
   1b478:	andeq	fp, r1, r8, asr r9
   1b47c:	andeq	fp, r1, r8, lsr #12
   1b480:	andeq	fp, r1, r8, asr r9
   1b484:	andeq	fp, r1, r4, ror #12
   1b488:	andeq	fp, r1, r8, asr r9
   1b48c:	andeq	fp, r1, r8, asr r9
   1b490:	andeq	fp, r1, r8, asr r9
   1b494:	andeq	fp, r1, ip, lsr #14
   1b498:	andeq	fp, r1, r4, lsl #11
   1b49c:	andeq	fp, r1, r8, asr r9
   1b4a0:	andeq	fp, r1, r8, asr r9
   1b4a4:	andeq	fp, r1, r8, asr r9
   1b4a8:	andeq	fp, r1, r8, asr r9
   1b4ac:	andeq	fp, r1, r8, asr r9
   1b4b0:	andeq	fp, r1, r8, asr r9
   1b4b4:	ldrdeq	fp, [r1], -r4
   1b4b8:	andeq	fp, r1, r0, lsl #16
   1b4bc:	andeq	fp, r1, ip, ror #12
   1b4c0:	andeq	fp, r1, ip, ror r6
   1b4c4:	andeq	fp, r1, r8, asr r9
   1b4c8:	muleq	r1, r4, r7
   1b4cc:	andeq	fp, r1, r4, asr #15
   1b4d0:	andeq	fp, r1, r0, asr #16
   1b4d4:	andeq	fp, r1, r8, lsl #13
   1b4d8:	andeq	fp, r1, r8, asr r9
   1b4dc:	andeq	fp, r1, r4, lsr #16
   1b4e0:	andeq	fp, r1, r4, lsr #10
   1b4e4:	andeq	fp, r1, r0, ror #11
   1b4e8:	strdeq	fp, [r1], -r4
   1b4ec:	andeq	fp, r1, r8, asr r9
   1b4f0:	andeq	fp, r1, r0, asr sl
   1b4f4:	andeq	fp, r1, r8, asr r9
   1b4f8:	andeq	fp, r1, r8, asr r9
   1b4fc:	muleq	r1, r4, r6
   1b500:	andeq	fp, r1, r8, ror r5
   1b504:	andeq	fp, r1, ip, ror #17
   1b508:	andeq	fp, r1, r8, asr r9
   1b50c:	andeq	fp, r1, r8, asr r9
   1b510:	andeq	fp, r1, r8, asr r9
   1b514:	andeq	fp, r1, r4, ror #18
   1b518:	ldr	r5, [r5, #8]
   1b51c:	ldrd	r0, [r7]
   1b520:	b	1b69c <__assert_fail@plt+0x8c20>
   1b524:	ldr	r0, [r7, #16]
   1b528:	and	r0, r0, #61440	; 0xf000
   1b52c:	cmp	r0, #40960	; 0xa000
   1b530:	bne	1bab8 <__assert_fail@plt+0x903c>
   1b534:	movw	r8, #15936	; 0x3e40
   1b538:	movt	r8, #6
   1b53c:	ldr	r1, [r8, #12]
   1b540:	ldr	r0, [r8, #16]
   1b544:	bl	23168 <__assert_fail@plt+0x106ec>
   1b548:	cmp	r0, #0
   1b54c:	beq	1baa0 <__assert_fail@plt+0x9024>
   1b550:	mov	r7, r0
   1b554:	ldrb	r2, [r4, #12]
   1b558:	ldr	r1, [r4, #16]
   1b55c:	ldr	r0, [r4, #4]
   1b560:	ldr	r3, [r5, #8]
   1b564:	str	r7, [sp]
   1b568:	bl	22420 <__assert_fail@plt+0xf9a4>
   1b56c:	cmn	r0, #1
   1b570:	bgt	1baf4 <__assert_fail@plt+0x9078>
   1b574:	b	1bae4 <__assert_fail@plt+0x9068>
   1b578:	ldr	r5, [r5, #8]
   1b57c:	ldrd	r0, [r7, #80]	; 0x50
   1b580:	b	1b674 <__assert_fail@plt+0x8bf8>
   1b584:	movw	r7, #15936	; 0x3e40
   1b588:	movw	r2, #15980	; 0x3e6c
   1b58c:	movt	r7, #6
   1b590:	movt	r2, #6
   1b594:	ldr	r3, [r2, #64]	; 0x40
   1b598:	ldr	r1, [r7, #12]
   1b59c:	ldr	r0, [r7, #16]
   1b5a0:	add	r2, sp, #16
   1b5a4:	blx	r3
   1b5a8:	ldr	r1, [r5, #8]
   1b5ac:	cmn	r0, #1
   1b5b0:	ble	1b9bc <__assert_fail@plt+0x8f40>
   1b5b4:	ldr	r2, [sp, #16]
   1b5b8:	mov	r0, r4
   1b5bc:	bl	1acc8 <__assert_fail@plt+0x824c>
   1b5c0:	ldr	r0, [sp, #16]
   1b5c4:	bl	129a4 <freecon@plt>
   1b5c8:	sub	sp, fp, #40	; 0x28
   1b5cc:	vpop	{d8-d9}
   1b5d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b5d4:	ldr	r5, [r5, #8]
   1b5d8:	ldrd	r0, [r7, #72]	; 0x48
   1b5dc:	b	1b674 <__assert_fail@plt+0x8bf8>
   1b5e0:	ldr	r2, [r7, #16]
   1b5e4:	ldr	r1, [r5, #8]
   1b5e8:	mov	r0, r4
   1b5ec:	bfc	r2, #12, #20
   1b5f0:	b	1b954 <__assert_fail@plt+0x8ed8>
   1b5f4:	ldr	r5, [r5, #8]
   1b5f8:	ldr	r0, [r7, #20]
   1b5fc:	b	1b924 <__assert_fail@plt+0x8ea8>
   1b600:	add	r6, sp, #16
   1b604:	mov	r0, r7
   1b608:	mov	r1, r6
   1b60c:	bl	23a40 <__assert_fail@plt+0x10fc4>
   1b610:	mov	r0, #0
   1b614:	mov	r2, r6
   1b618:	strb	r0, [sp, #26]
   1b61c:	mov	r0, r4
   1b620:	ldr	r1, [r5, #8]
   1b624:	b	1b954 <__assert_fail@plt+0x8ed8>
   1b628:	ldrd	r8, [r7, #48]	; 0x30
   1b62c:	ldr	r5, [r5, #8]
   1b630:	ldrd	r0, [r7, #64]	; 0x40
   1b634:	orrs	r2, r8, r9
   1b638:	beq	1ba20 <__assert_fail@plt+0x8fa4>
   1b63c:	bl	4c0e4 <__assert_fail@plt+0x39668>
   1b640:	vldr	d8, [pc, #1016]	; 1ba40 <__assert_fail@plt+0x8fc4>
   1b644:	vmov	d9, r0, r1
   1b648:	mov	r0, r8
   1b64c:	mov	r1, r9
   1b650:	bl	4c0e4 <__assert_fail@plt+0x39668>
   1b654:	vmov	d16, r0, r1
   1b658:	vmul.f64	d17, d9, d8
   1b65c:	vdiv.f64	d16, d17, d16
   1b660:	b	1bb18 <__assert_fail@plt+0x909c>
   1b664:	add	r7, r7, #24
   1b668:	b	1b91c <__assert_fail@plt+0x8ea0>
   1b66c:	ldr	r5, [r5, #8]
   1b670:	ldrd	r0, [r7, #88]	; 0x58
   1b674:	bl	1bbd0 <__assert_fail@plt+0x9154>
   1b678:	b	1b948 <__assert_fail@plt+0x8ecc>
   1b67c:	movw	r0, #15936	; 0x3e40
   1b680:	movt	r0, #6
   1b684:	b	1b90c <__assert_fail@plt+0x8e90>
   1b688:	ldr	r5, [r5, #8]
   1b68c:	ldrd	r0, [r7, #96]	; 0x60
   1b690:	b	1b69c <__assert_fail@plt+0x8c20>
   1b694:	ldr	r5, [r5, #8]
   1b698:	ldrd	r0, [r7, #48]	; 0x30
   1b69c:	mov	r2, #0
   1b6a0:	mov	r3, #1
   1b6a4:	b	1b810 <__assert_fail@plt+0x8d94>
   1b6a8:	ldr	r5, [r5, #8]
   1b6ac:	mov	r0, r7
   1b6b0:	mov	r1, r6
   1b6b4:	bl	1be00 <__assert_fail@plt+0x9384>
   1b6b8:	ldr	r3, [r4, #4]
   1b6bc:	ldr	r1, [r4, #16]
   1b6c0:	ldrb	r2, [r4, #12]
   1b6c4:	str	r0, [sp]
   1b6c8:	mov	r0, r3
   1b6cc:	mov	r3, r5
   1b6d0:	bl	22420 <__assert_fail@plt+0xf9a4>
   1b6d4:	cmn	r0, #1
   1b6d8:	bgt	1b958 <__assert_fail@plt+0x8edc>
   1b6dc:	b	1b2f8 <__assert_fail@plt+0x887c>
   1b6e0:	add	r7, r7, #28
   1b6e4:	b	1b91c <__assert_fail@plt+0x8ea0>
   1b6e8:	movw	r8, #15936	; 0x3e40
   1b6ec:	movt	r8, #6
   1b6f0:	ldr	r0, [r8, #20]
   1b6f4:	add	r0, r0, #1
   1b6f8:	bl	309ec <__assert_fail@plt+0x1df70>
   1b6fc:	ldr	r8, [r8, #20]
   1b700:	mov	r1, r6
   1b704:	mov	r7, r0
   1b708:	mov	r2, r8
   1b70c:	bl	124b8 <memcpy@plt>
   1b710:	mov	r0, #0
   1b714:	mov	r2, r7
   1b718:	strb	r0, [r7, r8]
   1b71c:	mov	r0, r4
   1b720:	ldr	r1, [r5, #8]
   1b724:	bl	1acc8 <__assert_fail@plt+0x824c>
   1b728:	b	1baf4 <__assert_fail@plt+0x9078>
   1b72c:	ldr	r0, [r7, #16]
   1b730:	and	r0, r0, #61440	; 0xf000
   1b734:	cmp	r0, #40960	; 0xa000
   1b738:	bne	1b984 <__assert_fail@plt+0x8f08>
   1b73c:	movw	r0, #15936	; 0x3e40
   1b740:	add	r3, sp, #16
   1b744:	movt	r0, #6
   1b748:	ldr	r2, [r0, #12]
   1b74c:	ldr	r1, [r0, #16]
   1b750:	mov	r0, #0
   1b754:	str	r0, [sp]
   1b758:	mov	r0, #3
   1b75c:	bl	125b4 <__fxstatat64@plt>
   1b760:	cmp	r0, #0
   1b764:	beq	1bb08 <__assert_fail@plt+0x908c>
   1b768:	bl	127d0 <__errno_location@plt>
   1b76c:	mov	r7, r0
   1b770:	ldr	r0, [r0]
   1b774:	cmp	r0, #20
   1b778:	cmpne	r0, #2
   1b77c:	bne	1bb34 <__assert_fail@plt+0x90b8>
   1b780:	ldr	r1, [r5, #8]
   1b784:	movw	r2, #61147	; 0xeedb
   1b788:	mov	r0, r4
   1b78c:	movt	r2, #4
   1b790:	b	1b954 <__assert_fail@plt+0x8ed8>
   1b794:	mov	r0, r6
   1b798:	bl	23708 <__assert_fail@plt+0x10c8c>
   1b79c:	mov	r6, r0
   1b7a0:	ldr	r3, [r5, #8]
   1b7a4:	ldr	r0, [r4, #4]
   1b7a8:	ldr	r1, [r4, #16]
   1b7ac:	ldrb	r2, [r4, #12]
   1b7b0:	str	r6, [sp]
   1b7b4:	bl	22420 <__assert_fail@plt+0xf9a4>
   1b7b8:	cmn	r0, #1
   1b7bc:	bgt	1b8d8 <__assert_fail@plt+0x8e5c>
   1b7c0:	b	1b8c8 <__assert_fail@plt+0x8e4c>
   1b7c4:	ldr	r0, [r7, #28]!
   1b7c8:	bl	12a58 <getgrgid@plt>
   1b7cc:	cmp	r0, #0
   1b7d0:	bne	1b8fc <__assert_fail@plt+0x8e80>
   1b7d4:	b	1b91c <__assert_fail@plt+0x8ea0>
   1b7d8:	movw	r0, #15936	; 0x3e40
   1b7dc:	movt	r0, #6
   1b7e0:	ldr	r1, [r0]
   1b7e4:	cmp	r1, #1
   1b7e8:	blt	1ba48 <__assert_fail@plt+0x8fcc>
   1b7ec:	ldr	r0, [r0, #20]
   1b7f0:	ldrb	r0, [r6, r0]!
   1b7f4:	cmp	r0, #47	; 0x2f
   1b7f8:	addeq	r6, r6, #1
   1b7fc:	b	1ba50 <__assert_fail@plt+0x8fd4>
   1b800:	ldr	r5, [r5, #8]
   1b804:	ldrd	r0, [r7, #64]	; 0x40
   1b808:	mov	r2, #0
   1b80c:	mov	r3, #512	; 0x200
   1b810:	str	r3, [sp]
   1b814:	stmib	sp, {r2, r3}
   1b818:	str	r2, [sp, #12]
   1b81c:	add	r2, sp, #16
   1b820:	b	1b940 <__assert_fail@plt+0x8ec4>
   1b824:	ldrd	r0, [r7, #64]	; 0x40
   1b828:	ldr	r5, [r5, #8]
   1b82c:	mov	r7, #512	; 0x200
   1b830:	mov	r2, #0
   1b834:	mov	r3, #1024	; 0x400
   1b838:	str	r7, [sp]
   1b83c:	b	1b814 <__assert_fail@plt+0x8d98>
   1b840:	mov	r0, r6
   1b844:	bl	30f0c <__assert_fail@plt+0x1e490>
   1b848:	mov	r6, r0
   1b84c:	bl	12788 <strlen@plt>
   1b850:	add	r0, r6, r0
   1b854:	sub	r1, r0, #1
   1b858:	mov	r0, r1
   1b85c:	cmp	r6, r1
   1b860:	bhi	1b874 <__assert_fail@plt+0x8df8>
   1b864:	mov	r1, r0
   1b868:	ldrb	r2, [r1], #-1
   1b86c:	cmp	r2, #47	; 0x2f
   1b870:	beq	1b858 <__assert_fail@plt+0x8ddc>
   1b874:	cmp	r6, r0
   1b878:	bcs	1b88c <__assert_fail@plt+0x8e10>
   1b87c:	ldrb	r1, [r0, #1]
   1b880:	cmp	r1, #47	; 0x2f
   1b884:	moveq	r1, #0
   1b888:	strbeq	r1, [r0, #1]
   1b88c:	mov	r0, r6
   1b890:	mov	r1, #47	; 0x2f
   1b894:	bl	128f0 <strrchr@plt>
   1b898:	cmp	r0, #0
   1b89c:	beq	1ba74 <__assert_fail@plt+0x8ff8>
   1b8a0:	mov	r1, #0
   1b8a4:	strb	r1, [r0]
   1b8a8:	ldrb	r2, [r4, #12]
   1b8ac:	ldr	r1, [r4, #16]
   1b8b0:	ldr	r0, [r4, #4]
   1b8b4:	ldr	r3, [r5, #8]
   1b8b8:	str	r6, [sp]
   1b8bc:	bl	22420 <__assert_fail@plt+0xf9a4>
   1b8c0:	cmn	r0, #1
   1b8c4:	bgt	1b8d8 <__assert_fail@plt+0x8e5c>
   1b8c8:	bl	127d0 <__errno_location@plt>
   1b8cc:	ldr	r0, [r0]
   1b8d0:	ldr	r1, [r4, #8]
   1b8d4:	bl	18f3c <__assert_fail@plt+0x64c0>
   1b8d8:	mov	r0, r6
   1b8dc:	bl	32c40 <__assert_fail@plt+0x201c4>
   1b8e0:	sub	sp, fp, #40	; 0x28
   1b8e4:	vpop	{d8-d9}
   1b8e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b8ec:	ldr	r0, [r7, #24]!
   1b8f0:	bl	123ec <getpwuid@plt>
   1b8f4:	cmp	r0, #0
   1b8f8:	beq	1b91c <__assert_fail@plt+0x8ea0>
   1b8fc:	ldr	r1, [r5, #8]
   1b900:	ldr	r2, [r5, #12]
   1b904:	mov	r3, #115	; 0x73
   1b908:	strb	r3, [r1, r2]
   1b90c:	ldr	r2, [r0]
   1b910:	ldr	r1, [r5, #8]
   1b914:	mov	r0, r4
   1b918:	b	1b954 <__assert_fail@plt+0x8ed8>
   1b91c:	ldr	r5, [r5, #8]
   1b920:	ldr	r0, [r7]
   1b924:	mov	r2, #1
   1b928:	mov	r1, #0
   1b92c:	str	r2, [sp]
   1b930:	stmib	sp, {r1, r2}
   1b934:	str	r1, [sp, #12]
   1b938:	add	r2, sp, #16
   1b93c:	mov	r1, #0
   1b940:	mov	r3, #0
   1b944:	bl	24ec8 <__assert_fail@plt+0x1244c>
   1b948:	mov	r2, r0
   1b94c:	mov	r0, r4
   1b950:	mov	r1, r5
   1b954:	bl	1acc8 <__assert_fail@plt+0x824c>
   1b958:	sub	sp, fp, #40	; 0x28
   1b95c:	vpop	{d8-d9}
   1b960:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b964:	ldr	r1, [r5, #8]
   1b968:	ldr	r0, [r7, #16]
   1b96c:	and	r0, r0, #61440	; 0xf000
   1b970:	sub	r0, r0, #4096	; 0x1000
   1b974:	lsr	r2, r0, #12
   1b978:	cmp	r2, #11
   1b97c:	bls	1b998 <__assert_fail@plt+0x8f1c>
   1b980:	b	1b9ac <__assert_fail@plt+0x8f30>
   1b984:	ldr	r1, [r5, #8]
   1b988:	sub	r0, r0, #4096	; 0x1000
   1b98c:	lsr	r2, r0, #12
   1b990:	cmp	r2, #11
   1b994:	bhi	1b9ac <__assert_fail@plt+0x8f30>
   1b998:	movw	r2, #61328	; 0xef90
   1b99c:	movt	r2, #4
   1b9a0:	ldr	r2, [r2, r0, asr #10]
   1b9a4:	mov	r0, r4
   1b9a8:	b	1b954 <__assert_fail@plt+0x8ed8>
   1b9ac:	movw	r2, #61225	; 0xef29
   1b9b0:	mov	r0, r4
   1b9b4:	movt	r2, #4
   1b9b8:	b	1b954 <__assert_fail@plt+0x8ed8>
   1b9bc:	movw	r2, #58175	; 0xe33f
   1b9c0:	mov	r0, r4
   1b9c4:	movt	r2, #4
   1b9c8:	bl	1acc8 <__assert_fail@plt+0x824c>
   1b9cc:	bl	127d0 <__errno_location@plt>
   1b9d0:	ldr	r4, [r0]
   1b9d4:	movw	r1, #52377	; 0xcc99
   1b9d8:	mov	r0, #0
   1b9dc:	mov	r2, #5
   1b9e0:	movt	r1, #4
   1b9e4:	bl	1253c <dcgettext@plt>
   1b9e8:	mov	r5, r0
   1b9ec:	mov	r0, #0
   1b9f0:	mov	r1, r6
   1b9f4:	bl	19d58 <__assert_fail@plt+0x72dc>
   1b9f8:	mov	r3, r0
   1b9fc:	mov	r0, #0
   1ba00:	mov	r1, r4
   1ba04:	mov	r2, r5
   1ba08:	bl	12674 <error@plt>
   1ba0c:	mov	r0, #1
   1ba10:	str	r0, [r7, #28]
   1ba14:	sub	sp, fp, #40	; 0x28
   1ba18:	vpop	{d8-d9}
   1ba1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ba20:	orrs	r0, r0, r1
   1ba24:	beq	1bb14 <__assert_fail@plt+0x9098>
   1ba28:	add	r0, pc, #400	; 0x190
   1ba2c:	cmp	r1, #0
   1ba30:	addlt	r0, r0, #8
   1ba34:	vldr	d16, [r0]
   1ba38:	b	1bb18 <__assert_fail@plt+0x909c>
   1ba3c:	nop	{0}
   1ba40:	andeq	r0, r0, r0
   1ba44:	addmi	r0, r0, r0
   1ba48:	movw	r6, #58175	; 0xe33f
   1ba4c:	movt	r6, #4
   1ba50:	ldrb	r2, [r4, #12]
   1ba54:	ldr	r1, [r4, #16]
   1ba58:	ldr	r0, [r4, #4]
   1ba5c:	ldr	r3, [r5, #8]
   1ba60:	str	r6, [sp]
   1ba64:	bl	22420 <__assert_fail@plt+0xf9a4>
   1ba68:	cmn	r0, #1
   1ba6c:	bgt	1b958 <__assert_fail@plt+0x8edc>
   1ba70:	b	1b2f8 <__assert_fail@plt+0x887c>
   1ba74:	ldrb	r2, [r4, #12]
   1ba78:	ldr	r1, [r4, #16]
   1ba7c:	ldr	r0, [r4, #4]
   1ba80:	ldr	r3, [r5, #8]
   1ba84:	movw	r7, #54804	; 0xd614
   1ba88:	movt	r7, #4
   1ba8c:	str	r7, [sp]
   1ba90:	bl	22420 <__assert_fail@plt+0xf9a4>
   1ba94:	cmn	r0, #1
   1ba98:	bgt	1b8d8 <__assert_fail@plt+0x8e5c>
   1ba9c:	b	1b8c8 <__assert_fail@plt+0x8e4c>
   1baa0:	bl	127d0 <__errno_location@plt>
   1baa4:	ldr	r0, [r0]
   1baa8:	mov	r1, r6
   1baac:	bl	18990 <__assert_fail@plt+0x5f14>
   1bab0:	mov	r0, #1
   1bab4:	str	r0, [r8, #28]
   1bab8:	ldrb	r2, [r4, #12]
   1babc:	ldr	r1, [r4, #16]
   1bac0:	ldr	r0, [r4, #4]
   1bac4:	ldr	r3, [r5, #8]
   1bac8:	movw	r7, #58175	; 0xe33f
   1bacc:	movt	r7, #4
   1bad0:	str	r7, [sp]
   1bad4:	bl	22420 <__assert_fail@plt+0xf9a4>
   1bad8:	mov	r7, #0
   1badc:	cmn	r0, #1
   1bae0:	bgt	1baf4 <__assert_fail@plt+0x9078>
   1bae4:	bl	127d0 <__errno_location@plt>
   1bae8:	ldr	r0, [r0]
   1baec:	ldr	r1, [r4, #8]
   1baf0:	bl	18f3c <__assert_fail@plt+0x64c0>
   1baf4:	mov	r0, r7
   1baf8:	bl	32c40 <__assert_fail@plt+0x201c4>
   1bafc:	sub	sp, fp, #40	; 0x28
   1bb00:	vpop	{d8-d9}
   1bb04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bb08:	ldr	r1, [r5, #8]
   1bb0c:	ldr	r0, [sp, #32]
   1bb10:	b	1b96c <__assert_fail@plt+0x8ef0>
   1bb14:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1bb18:	vmov	r2, r3, d16
   1bb1c:	mov	r0, r4
   1bb20:	mov	r1, r5
   1bb24:	bl	1acc8 <__assert_fail@plt+0x824c>
   1bb28:	sub	sp, fp, #40	; 0x28
   1bb2c:	vpop	{d8-d9}
   1bb30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bb34:	ldr	r1, [r5, #8]
   1bb38:	cmp	r0, #40	; 0x28
   1bb3c:	bne	1bb50 <__assert_fail@plt+0x90d4>
   1bb40:	movw	r2, #58532	; 0xe4a4
   1bb44:	mov	r0, r4
   1bb48:	movt	r2, #4
   1bb4c:	b	1b954 <__assert_fail@plt+0x8ed8>
   1bb50:	movw	r2, #63018	; 0xf62a
   1bb54:	mov	r0, r4
   1bb58:	movt	r2, #4
   1bb5c:	bl	1acc8 <__assert_fail@plt+0x824c>
   1bb60:	ldr	r4, [r7]
   1bb64:	mov	r0, #0
   1bb68:	mov	r1, r6
   1bb6c:	bl	19d58 <__assert_fail@plt+0x72dc>
   1bb70:	movw	r2, #9967	; 0x26ef
   1bb74:	mov	r3, r0
   1bb78:	mov	r0, #0
   1bb7c:	mov	r1, r4
   1bb80:	movt	r2, #5
   1bb84:	bl	12674 <error@plt>
   1bb88:	sub	sp, fp, #40	; 0x28
   1bb8c:	vpop	{d8-d9}
   1bb90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bb94:	movw	r1, #60262	; 0xeb66
   1bb98:	mov	r0, #0
   1bb9c:	mov	r2, #5
   1bba0:	movt	r1, #4
   1bba4:	bl	1253c <dcgettext@plt>
   1bba8:	movw	r3, #60581	; 0xeca5
   1bbac:	mov	r2, r0
   1bbb0:	mov	r0, #1
   1bbb4:	mov	r1, #0
   1bbb8:	movt	r3, #4
   1bbbc:	bl	12674 <error@plt>
   1bbc0:	andeq	r0, r0, r0
   1bbc4:	svcvc	0x00f00000	; IMB
   1bbc8:	andeq	r0, r0, r0
   1bbcc:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1bbd0:	push	{r4, r5, fp, lr}
   1bbd4:	add	fp, sp, #8
   1bbd8:	sub	sp, sp, #40	; 0x28
   1bbdc:	str	r1, [fp, #-12]
   1bbe0:	str	r0, [fp, #-16]
   1bbe4:	sub	r0, fp, #16
   1bbe8:	bl	12704 <localtime@plt>
   1bbec:	cmp	r0, #0
   1bbf0:	beq	1bcc0 <__assert_fail@plt+0x9244>
   1bbf4:	ldr	ip, [r0, #24]
   1bbf8:	cmn	ip, #1
   1bbfc:	ble	1bce0 <__assert_fail@plt+0x9264>
   1bc00:	cmp	ip, #7
   1bc04:	bge	1bd00 <__assert_fail@plt+0x9284>
   1bc08:	ldr	r2, [r0, #16]
   1bc0c:	cmn	r2, #1
   1bc10:	ble	1bd20 <__assert_fail@plt+0x92a4>
   1bc14:	cmp	r2, #12
   1bc18:	bge	1bd40 <__assert_fail@plt+0x92c4>
   1bc1c:	ldr	r3, [r0, #8]
   1bc20:	cmn	r3, #1
   1bc24:	ble	1bd60 <__assert_fail@plt+0x92e4>
   1bc28:	cmp	r3, #24
   1bc2c:	bge	1bd80 <__assert_fail@plt+0x9304>
   1bc30:	ldr	r4, [r0, #4]
   1bc34:	cmp	r4, #60	; 0x3c
   1bc38:	bge	1bda0 <__assert_fail@plt+0x9324>
   1bc3c:	ldr	r1, [r0]
   1bc40:	cmp	r1, #62	; 0x3e
   1bc44:	bge	1bdc0 <__assert_fail@plt+0x9344>
   1bc48:	ldr	lr, [r0, #12]
   1bc4c:	ldr	r0, [r0, #20]
   1bc50:	str	r1, [sp, #16]
   1bc54:	movw	r1, #61276	; 0xef5c
   1bc58:	ldr	r5, [fp, #-12]
   1bc5c:	str	r3, [sp, #8]
   1bc60:	str	r4, [sp, #12]
   1bc64:	movw	r4, #14511	; 0x38af
   1bc68:	movt	r1, #4
   1bc6c:	movt	r4, #6
   1bc70:	ldr	r1, [r1, r2, lsl #2]
   1bc74:	movw	r2, #61090	; 0xeea2
   1bc78:	movt	r2, #4
   1bc7c:	str	r5, [sp, #20]
   1bc80:	str	lr, [sp, #4]
   1bc84:	str	r1, [sp]
   1bc88:	movw	r1, #1900	; 0x76c
   1bc8c:	add	r0, r0, r1
   1bc90:	mov	r1, #1024	; 0x400
   1bc94:	str	r0, [sp, #24]
   1bc98:	movw	r0, #61248	; 0xef40
   1bc9c:	movt	r0, #4
   1bca0:	ldr	r3, [r0, ip, lsl #2]
   1bca4:	mov	r0, r4
   1bca8:	bl	127e8 <snprintf@plt>
   1bcac:	cmp	r0, #1024	; 0x400
   1bcb0:	bge	1bde0 <__assert_fail@plt+0x9364>
   1bcb4:	mov	r0, r4
   1bcb8:	sub	sp, fp, #8
   1bcbc:	pop	{r4, r5, fp, pc}
   1bcc0:	ldr	r0, [fp, #-16]
   1bcc4:	ldr	r1, [fp, #-12]
   1bcc8:	mov	r2, #64	; 0x40
   1bccc:	bl	1ad2c <__assert_fail@plt+0x82b0>
   1bcd0:	mov	r4, r0
   1bcd4:	mov	r0, r4
   1bcd8:	sub	sp, fp, #8
   1bcdc:	pop	{r4, r5, fp, pc}
   1bce0:	movw	r0, #60914	; 0xedf2
   1bce4:	movw	r1, #59977	; 0xea49
   1bce8:	movw	r3, #60932	; 0xee04
   1bcec:	movw	r2, #749	; 0x2ed
   1bcf0:	movt	r0, #4
   1bcf4:	movt	r1, #4
   1bcf8:	movt	r3, #4
   1bcfc:	bl	12a7c <__assert_fail@plt>
   1bd00:	movw	r0, #60968	; 0xee28
   1bd04:	movw	r1, #59977	; 0xea49
   1bd08:	movw	r3, #60932	; 0xee04
   1bd0c:	movw	r2, #750	; 0x2ee
   1bd10:	movt	r0, #4
   1bd14:	movt	r1, #4
   1bd18:	movt	r3, #4
   1bd1c:	bl	12a7c <__assert_fail@plt>
   1bd20:	movw	r0, #60985	; 0xee39
   1bd24:	movw	r1, #59977	; 0xea49
   1bd28:	movw	r3, #60932	; 0xee04
   1bd2c:	movw	r2, #751	; 0x2ef
   1bd30:	movt	r0, #4
   1bd34:	movt	r1, #4
   1bd38:	movt	r3, #4
   1bd3c:	bl	12a7c <__assert_fail@plt>
   1bd40:	movw	r0, #61002	; 0xee4a
   1bd44:	movw	r1, #59977	; 0xea49
   1bd48:	movw	r3, #60932	; 0xee04
   1bd4c:	mov	r2, #752	; 0x2f0
   1bd50:	movt	r0, #4
   1bd54:	movt	r1, #4
   1bd58:	movt	r3, #4
   1bd5c:	bl	12a7c <__assert_fail@plt>
   1bd60:	movw	r0, #61019	; 0xee5b
   1bd64:	movw	r1, #59977	; 0xea49
   1bd68:	movw	r3, #60932	; 0xee04
   1bd6c:	movw	r2, #753	; 0x2f1
   1bd70:	movt	r0, #4
   1bd74:	movt	r1, #4
   1bd78:	movt	r3, #4
   1bd7c:	bl	12a7c <__assert_fail@plt>
   1bd80:	movw	r0, #61037	; 0xee6d
   1bd84:	movw	r1, #59977	; 0xea49
   1bd88:	movw	r3, #60932	; 0xee04
   1bd8c:	movw	r2, #754	; 0x2f2
   1bd90:	movt	r0, #4
   1bd94:	movt	r1, #4
   1bd98:	movt	r3, #4
   1bd9c:	bl	12a7c <__assert_fail@plt>
   1bda0:	movw	r0, #61055	; 0xee7f
   1bda4:	movw	r1, #59977	; 0xea49
   1bda8:	movw	r3, #60932	; 0xee04
   1bdac:	movw	r2, #755	; 0x2f3
   1bdb0:	movt	r0, #4
   1bdb4:	movt	r1, #4
   1bdb8:	movt	r3, #4
   1bdbc:	bl	12a7c <__assert_fail@plt>
   1bdc0:	movw	r0, #61072	; 0xee90
   1bdc4:	movw	r1, #59977	; 0xea49
   1bdc8:	movw	r3, #60932	; 0xee04
   1bdcc:	mov	r2, #756	; 0x2f4
   1bdd0:	movt	r0, #4
   1bdd4:	movt	r1, #4
   1bdd8:	movt	r3, #4
   1bddc:	bl	12a7c <__assert_fail@plt>
   1bde0:	movw	r0, #61129	; 0xeec9
   1bde4:	movw	r1, #59977	; 0xea49
   1bde8:	movw	r3, #60932	; 0xee04
   1bdec:	movw	r2, #770	; 0x302
   1bdf0:	movt	r0, #4
   1bdf4:	movt	r1, #4
   1bdf8:	movt	r3, #4
   1bdfc:	bl	12a7c <__assert_fail@plt>
   1be00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be04:	add	fp, sp, #28
   1be08:	sub	sp, sp, #108	; 0x6c
   1be0c:	movw	r8, #15544	; 0x3cb8
   1be10:	mov	r4, r0
   1be14:	movt	r8, #6
   1be18:	ldr	r0, [r8, #4]
   1be1c:	cmp	r0, #0
   1be20:	beq	1be4c <__assert_fail@plt+0x93d0>
   1be24:	ldrb	r1, [r8]
   1be28:	cmp	r1, #1
   1be2c:	bne	1be48 <__assert_fail@plt+0x93cc>
   1be30:	ldrd	r2, [r8, #16]
   1be34:	ldrd	r6, [r4]
   1be38:	eor	r1, r7, r3
   1be3c:	eor	r2, r6, r2
   1be40:	orrs	r1, r2, r1
   1be44:	beq	1bfb0 <__assert_fail@plt+0x9534>
   1be48:	bl	32c40 <__assert_fail@plt+0x201c4>
   1be4c:	ldrd	r0, [r4]
   1be50:	strd	r0, [r8, #16]
   1be54:	ldr	r5, [r8, #8]
   1be58:	cmp	r5, #0
   1be5c:	beq	1be90 <__assert_fail@plt+0x9414>
   1be60:	ldrb	r0, [r8, #1]
   1be64:	cmp	r0, #0
   1be68:	bne	1be90 <__assert_fail@plt+0x9414>
   1be6c:	ldr	r6, [r5, #28]
   1be70:	mov	r0, r5
   1be74:	bl	362e4 <__assert_fail@plt+0x23868>
   1be78:	cmp	r6, #0
   1be7c:	mov	r5, r6
   1be80:	bne	1be6c <__assert_fail@plt+0x93f0>
   1be84:	mov	r0, #0
   1be88:	str	r0, [r8, #8]
   1be8c:	b	1be98 <__assert_fail@plt+0x941c>
   1be90:	cmp	r5, #0
   1be94:	bne	1beb8 <__assert_fail@plt+0x943c>
   1be98:	mov	r0, #1
   1be9c:	mov	r6, #1
   1bea0:	bl	35698 <__assert_fail@plt+0x22c1c>
   1bea4:	mov	r5, r0
   1bea8:	cmp	r0, #0
   1beac:	str	r0, [r8, #8]
   1beb0:	strb	r6, [r8, #1]
   1beb4:	beq	1bfb8 <__assert_fail@plt+0x953c>
   1beb8:	movw	r6, #61417	; 0xefe9
   1bebc:	movw	sl, #15980	; 0x3e6c
   1bec0:	mov	r7, #0
   1bec4:	mov	r9, sp
   1bec8:	movt	r6, #4
   1becc:	movt	sl, #6
   1bed0:	b	1bee0 <__assert_fail@plt+0x9464>
   1bed4:	ldm	sp, {r0, r1}
   1bed8:	strd	r0, [r8]
   1bedc:	b	1bf0c <__assert_fail@plt+0x9490>
   1bee0:	ldr	r0, [r5, #12]
   1bee4:	mov	r1, r6
   1bee8:	bl	123d4 <strcmp@plt>
   1beec:	cmp	r0, #0
   1bef0:	beq	1bf54 <__assert_fail@plt+0x94d8>
   1bef4:	mov	r8, r5
   1bef8:	ldr	r0, [r8, #16]!
   1befc:	ldr	r1, [r8, #4]
   1bf00:	and	r0, r0, r1
   1bf04:	cmn	r0, #1
   1bf08:	beq	1bf34 <__assert_fail@plt+0x94b8>
   1bf0c:	ldrd	r0, [r4]
   1bf10:	ldrd	r2, [r8]
   1bf14:	eor	r1, r3, r1
   1bf18:	eor	r0, r2, r0
   1bf1c:	orrs	r0, r0, r1
   1bf20:	moveq	r7, r5
   1bf24:	ldr	r5, [r5, #28]
   1bf28:	cmp	r5, #0
   1bf2c:	bne	1bee0 <__assert_fail@plt+0x9464>
   1bf30:	b	1bf60 <__assert_fail@plt+0x94e4>
   1bf34:	mov	r0, r9
   1bf38:	bl	18850 <__assert_fail@plt+0x5dd4>
   1bf3c:	ldr	r0, [r5, #4]
   1bf40:	ldr	r2, [sl, #52]	; 0x34
   1bf44:	mov	r1, r9
   1bf48:	blx	r2
   1bf4c:	cmp	r0, #0
   1bf50:	beq	1bed4 <__assert_fail@plt+0x9458>
   1bf54:	ldr	r5, [r5, #28]
   1bf58:	cmp	r5, #0
   1bf5c:	bne	1bee0 <__assert_fail@plt+0x9464>
   1bf60:	cmp	r7, #0
   1bf64:	beq	1bf84 <__assert_fail@plt+0x9508>
   1bf68:	ldr	r0, [r7, #12]
   1bf6c:	bl	30f0c <__assert_fail@plt+0x1e490>
   1bf70:	movw	r4, #15544	; 0x3cb8
   1bf74:	mov	r1, #1
   1bf78:	movt	r4, #6
   1bf7c:	strb	r1, [r4]
   1bf80:	b	1bfac <__assert_fail@plt+0x9530>
   1bf84:	movw	r4, #15544	; 0x3cb8
   1bf88:	movw	r1, #56156	; 0xdb5c
   1bf8c:	mov	r0, #0
   1bf90:	mov	r2, #5
   1bf94:	movt	r4, #6
   1bf98:	movt	r1, #4
   1bf9c:	strb	r0, [r4]
   1bfa0:	mov	r0, #0
   1bfa4:	bl	1253c <dcgettext@plt>
   1bfa8:	bl	30f0c <__assert_fail@plt+0x1e490>
   1bfac:	str	r0, [r4, #4]
   1bfb0:	sub	sp, fp, #28
   1bfb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfb8:	movw	r1, #61380	; 0xefc4
   1bfbc:	mov	r0, #0
   1bfc0:	mov	r2, #5
   1bfc4:	movt	r1, #4
   1bfc8:	bl	1253c <dcgettext@plt>
   1bfcc:	mov	r2, r0
   1bfd0:	mov	r0, #1
   1bfd4:	mov	r1, #0
   1bfd8:	bl	12674 <error@plt>
   1bfdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bfe0:	add	fp, sp, #24
   1bfe4:	mov	r5, r0
   1bfe8:	movw	r0, #61376	; 0xefc0
   1bfec:	movt	r0, #4
   1bff0:	mov	r1, r5
   1bff4:	bl	123d4 <strcmp@plt>
   1bff8:	mov	r4, #1
   1bffc:	cmp	r0, #0
   1c000:	beq	1c05c <__assert_fail@plt+0x95e0>
   1c004:	movw	r7, #15544	; 0x3cb8
   1c008:	movt	r7, #6
   1c00c:	ldr	r6, [r7, #8]
   1c010:	cmp	r6, #0
   1c014:	bne	1c038 <__assert_fail@plt+0x95bc>
   1c018:	mov	r0, #0
   1c01c:	mov	r8, #0
   1c020:	bl	35698 <__assert_fail@plt+0x22c1c>
   1c024:	mov	r6, r0
   1c028:	cmp	r0, #0
   1c02c:	str	r0, [r7, #8]
   1c030:	strb	r8, [r7, #1]
   1c034:	beq	1c05c <__assert_fail@plt+0x95e0>
   1c038:	ldr	r1, [r6, #12]
   1c03c:	mov	r0, r5
   1c040:	bl	123d4 <strcmp@plt>
   1c044:	cmp	r0, #0
   1c048:	beq	1c05c <__assert_fail@plt+0x95e0>
   1c04c:	ldr	r6, [r6, #28]
   1c050:	cmp	r6, #0
   1c054:	bne	1c038 <__assert_fail@plt+0x95bc>
   1c058:	mov	r4, #0
   1c05c:	mov	r0, r4
   1c060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c068:	add	fp, sp, #28
   1c06c:	sub	sp, sp, #116	; 0x74
   1c070:	mov	r4, r0
   1c074:	mov	r7, #0
   1c078:	mov	r0, #0
   1c07c:	str	r7, [sp, #4]
   1c080:	bl	35698 <__assert_fail@plt+0x22c1c>
   1c084:	cmp	r0, #0
   1c088:	beq	1c1ac <__assert_fail@plt+0x9730>
   1c08c:	str	r4, [sp]
   1c090:	mov	r8, r0
   1c094:	mov	r9, #0
   1c098:	add	sl, sp, #4
   1c09c:	mov	r4, #0
   1c0a0:	mov	r5, r0
   1c0a4:	add	r6, r9, #1
   1c0a8:	mov	r0, r4
   1c0ac:	mov	r2, sl
   1c0b0:	mov	r7, r4
   1c0b4:	lsl	r1, r6, #3
   1c0b8:	bl	21350 <__assert_fail@plt+0xe8d4>
   1c0bc:	mov	r4, r0
   1c0c0:	cmp	r0, #0
   1c0c4:	beq	1c108 <__assert_fail@plt+0x968c>
   1c0c8:	mov	r7, r5
   1c0cc:	ldr	r0, [r7, #16]!
   1c0d0:	ldr	r1, [r7, #4]
   1c0d4:	and	r0, r0, r1
   1c0d8:	cmn	r0, #1
   1c0dc:	beq	1c124 <__assert_fail@plt+0x96a8>
   1c0e0:	ldrd	r0, [r7]
   1c0e4:	mov	r2, r4
   1c0e8:	mov	r7, r4
   1c0ec:	str	r0, [r2, r9, lsl #3]!
   1c0f0:	mov	r9, r6
   1c0f4:	str	r1, [r2, #4]
   1c0f8:	ldr	r5, [r5, #28]
   1c0fc:	cmp	r5, #0
   1c100:	bne	1c0a4 <__assert_fail@plt+0x9628>
   1c104:	b	1c17c <__assert_fail@plt+0x9700>
   1c108:	mov	r0, r7
   1c10c:	bl	32c40 <__assert_fail@plt+0x201c4>
   1c110:	mov	r7, #0
   1c114:	ldr	r5, [r5, #28]
   1c118:	cmp	r5, #0
   1c11c:	bne	1c0a4 <__assert_fail@plt+0x9628>
   1c120:	b	1c17c <__assert_fail@plt+0x9700>
   1c124:	add	sl, sp, #8
   1c128:	mov	r0, sl
   1c12c:	bl	18850 <__assert_fail@plt+0x5dd4>
   1c130:	movw	r1, #15980	; 0x3e6c
   1c134:	ldr	r0, [r5, #4]
   1c138:	movt	r1, #6
   1c13c:	ldr	r2, [r1, #52]	; 0x34
   1c140:	mov	r1, sl
   1c144:	blx	r2
   1c148:	cmp	r0, #0
   1c14c:	beq	1c168 <__assert_fail@plt+0x96ec>
   1c150:	mov	r7, r4
   1c154:	add	sl, sp, #4
   1c158:	ldr	r5, [r5, #28]
   1c15c:	cmp	r5, #0
   1c160:	bne	1c0a4 <__assert_fail@plt+0x9628>
   1c164:	b	1c17c <__assert_fail@plt+0x9700>
   1c168:	ldr	r0, [sp, #8]
   1c16c:	ldr	r1, [sp, #12]
   1c170:	add	sl, sp, #4
   1c174:	strd	r0, [r7]
   1c178:	b	1c0e0 <__assert_fail@plt+0x9664>
   1c17c:	cmp	r8, #0
   1c180:	beq	1c19c <__assert_fail@plt+0x9720>
   1c184:	ldr	r4, [r8, #28]
   1c188:	mov	r0, r8
   1c18c:	bl	362e4 <__assert_fail@plt+0x23868>
   1c190:	cmp	r4, #0
   1c194:	mov	r8, r4
   1c198:	bne	1c184 <__assert_fail@plt+0x9708>
   1c19c:	cmp	r7, #0
   1c1a0:	ldrne	r0, [sp]
   1c1a4:	moveq	r7, #0
   1c1a8:	strne	r9, [r0]
   1c1ac:	mov	r0, r7
   1c1b0:	sub	sp, fp, #28
   1c1b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1b8:	cmp	r0, #0
   1c1bc:	beq	1c228 <__assert_fail@plt+0x97ac>
   1c1c0:	movw	r2, #16056	; 0x3eb8
   1c1c4:	movw	ip, #19380	; 0x4bb4
   1c1c8:	mov	r1, #0
   1c1cc:	movt	r2, #1
   1c1d0:	movt	ip, #1
   1c1d4:	ldr	r3, [r0]
   1c1d8:	cmp	r3, r2
   1c1dc:	beq	1c1f8 <__assert_fail@plt+0x977c>
   1c1e0:	cmp	r3, ip
   1c1e4:	orreq	r1, r1, #2
   1c1e8:	ldr	r0, [r0, #152]	; 0x98
   1c1ec:	cmp	r0, #0
   1c1f0:	bne	1c1d4 <__assert_fail@plt+0x9758>
   1c1f4:	b	1c208 <__assert_fail@plt+0x978c>
   1c1f8:	orr	r1, r1, #1
   1c1fc:	ldr	r0, [r0, #152]	; 0x98
   1c200:	cmp	r0, #0
   1c204:	bne	1c1d4 <__assert_fail@plt+0x9758>
   1c208:	and	r0, r1, #3
   1c20c:	cmp	r0, #3
   1c210:	bxne	lr
   1c214:	movw	r0, #15980	; 0x3e6c
   1c218:	movt	r0, #6
   1c21c:	ldrb	r0, [r0, #1]
   1c220:	cmp	r0, #0
   1c224:	beq	1c22c <__assert_fail@plt+0x97b0>
   1c228:	bx	lr
   1c22c:	push	{fp, lr}
   1c230:	mov	fp, sp
   1c234:	movw	r1, #61424	; 0xeff0
   1c238:	mov	r0, #0
   1c23c:	mov	r2, #5
   1c240:	movt	r1, #4
   1c244:	bl	1253c <dcgettext@plt>
   1c248:	mov	r2, r0
   1c24c:	mov	r0, #1
   1c250:	mov	r1, #0
   1c254:	bl	12674 <error@plt>
   1c258:	cmp	r0, #0
   1c25c:	beq	1c290 <__assert_fail@plt+0x9814>
   1c260:	cmp	r0, #2
   1c264:	beq	1c2b4 <__assert_fail@plt+0x9838>
   1c268:	cmp	r0, #1
   1c26c:	bne	1c2dc <__assert_fail@plt+0x9860>
   1c270:	movw	r1, #15980	; 0x3e6c
   1c274:	movw	r2, #49920	; 0xc300
   1c278:	movt	r1, #6
   1c27c:	movt	r2, #1
   1c280:	str	r2, [r1, #64]	; 0x40
   1c284:	movw	r2, #37008	; 0x9090
   1c288:	movt	r2, #1
   1c28c:	b	1c2d0 <__assert_fail@plt+0x9854>
   1c290:	movw	r1, #15980	; 0x3e6c
   1c294:	movw	r2, #50060	; 0xc38c
   1c298:	movt	r1, #6
   1c29c:	movt	r2, #1
   1c2a0:	str	r2, [r1, #64]	; 0x40
   1c2a4:	movw	r2, #37252	; 0x9184
   1c2a8:	movt	r2, #1
   1c2ac:	str	r2, [r1, #52]	; 0x34
   1c2b0:	b	1c2dc <__assert_fail@plt+0x9860>
   1c2b4:	movw	r1, #15980	; 0x3e6c
   1c2b8:	movw	r2, #50064	; 0xc390
   1c2bc:	movt	r1, #6
   1c2c0:	movt	r2, #1
   1c2c4:	str	r2, [r1, #64]	; 0x40
   1c2c8:	movw	r2, #36748	; 0x8f8c
   1c2cc:	movt	r2, #1
   1c2d0:	str	r2, [r1, #52]	; 0x34
   1c2d4:	mov	r2, #1
   1c2d8:	strb	r2, [r1, #12]
   1c2dc:	movw	r1, #15980	; 0x3e6c
   1c2e0:	movt	r1, #6
   1c2e4:	str	r0, [r1, #48]	; 0x30
   1c2e8:	ldrb	r0, [r1, #44]	; 0x2c
   1c2ec:	tst	r0, #2
   1c2f0:	movwne	r0, #37356	; 0x91ec
   1c2f4:	movtne	r0, #1
   1c2f8:	strne	r0, [r1, #52]	; 0x34
   1c2fc:	bx	lr
   1c300:	push	{r4, r5, r6, r7, fp, lr}
   1c304:	add	fp, sp, #16
   1c308:	mov	r4, r2
   1c30c:	mov	r5, r1
   1c310:	mov	r6, r0
   1c314:	bl	2f974 <__assert_fail@plt+0x1cef8>
   1c318:	cmp	r0, #0
   1c31c:	beq	1c360 <__assert_fail@plt+0x98e4>
   1c320:	mov	r7, r0
   1c324:	bl	127d0 <__errno_location@plt>
   1c328:	ldr	r0, [r0]
   1c32c:	cmp	r0, #20
   1c330:	cmpne	r0, #2
   1c334:	bne	1c364 <__assert_fail@plt+0x98e8>
   1c338:	movw	r0, #15980	; 0x3e6c
   1c33c:	movt	r0, #6
   1c340:	ldrb	r0, [r0, #44]	; 0x2c
   1c344:	tst	r0, #2
   1c348:	bne	1c36c <__assert_fail@plt+0x98f0>
   1c34c:	mov	r0, r6
   1c350:	mov	r1, r5
   1c354:	mov	r2, r4
   1c358:	pop	{r4, r5, r6, r7, fp, lr}
   1c35c:	b	2fbc4 <__assert_fail@plt+0x1d148>
   1c360:	mov	r7, #0
   1c364:	mov	r0, r7
   1c368:	pop	{r4, r5, r6, r7, fp, pc}
   1c36c:	movw	r0, #13640	; 0x3548
   1c370:	movw	r1, #61603	; 0xf0a3
   1c374:	mov	r2, r5
   1c378:	movt	r0, #6
   1c37c:	movt	r1, #4
   1c380:	ldr	r0, [r0]
   1c384:	bl	127c4 <fprintf@plt>
   1c388:	b	1c34c <__assert_fail@plt+0x98d0>
   1c38c:	b	2fbc4 <__assert_fail@plt+0x1d148>
   1c390:	push	{r4, r5, r6, r7, fp, lr}
   1c394:	add	fp, sp, #16
   1c398:	mov	r6, r0
   1c39c:	movw	r0, #15936	; 0x3e40
   1c3a0:	mov	r4, r2
   1c3a4:	mov	r5, r1
   1c3a8:	movt	r0, #6
   1c3ac:	ldr	r0, [r0]
   1c3b0:	cmp	r0, #0
   1c3b4:	beq	1c3cc <__assert_fail@plt+0x9950>
   1c3b8:	mov	r0, r6
   1c3bc:	mov	r1, r5
   1c3c0:	mov	r2, r4
   1c3c4:	pop	{r4, r5, r6, r7, fp, lr}
   1c3c8:	b	2fbc4 <__assert_fail@plt+0x1d148>
   1c3cc:	mov	r0, r6
   1c3d0:	mov	r1, r5
   1c3d4:	mov	r2, r4
   1c3d8:	bl	2f974 <__assert_fail@plt+0x1cef8>
   1c3dc:	cmp	r0, #0
   1c3e0:	beq	1c430 <__assert_fail@plt+0x99b4>
   1c3e4:	mov	r7, r0
   1c3e8:	bl	127d0 <__errno_location@plt>
   1c3ec:	ldr	r0, [r0]
   1c3f0:	cmp	r0, #20
   1c3f4:	cmpne	r0, #2
   1c3f8:	bne	1c434 <__assert_fail@plt+0x99b8>
   1c3fc:	movw	r0, #15980	; 0x3e6c
   1c400:	movt	r0, #6
   1c404:	ldrb	r0, [r0, #44]	; 0x2c
   1c408:	tst	r0, #2
   1c40c:	beq	1c3b8 <__assert_fail@plt+0x993c>
   1c410:	movw	r0, #13640	; 0x3548
   1c414:	movw	r1, #61603	; 0xf0a3
   1c418:	mov	r2, r5
   1c41c:	movt	r0, #6
   1c420:	movt	r1, #4
   1c424:	ldr	r0, [r0]
   1c428:	bl	127c4 <fprintf@plt>
   1c42c:	b	1c3b8 <__assert_fail@plt+0x993c>
   1c430:	mov	r7, #0
   1c434:	mov	r0, r7
   1c438:	pop	{r4, r5, r6, r7, fp, pc}
   1c43c:	movw	r0, #15568	; 0x3cd0
   1c440:	mov	r1, #0
   1c444:	movt	r0, #6
   1c448:	str	r1, [r0]
   1c44c:	bx	lr
   1c450:	bx	lr
   1c454:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c458:	add	fp, sp, #24
   1c45c:	sub	sp, sp, #8
   1c460:	mov	r4, r0
   1c464:	movw	r0, #61596	; 0xf09c
   1c468:	mov	r2, #6
   1c46c:	movt	r0, #4
   1c470:	mov	r1, r4
   1c474:	bl	12a1c <strncmp@plt>
   1c478:	cmp	r0, #0
   1c47c:	bne	1c4b8 <__assert_fail@plt+0x9a3c>
   1c480:	mov	r0, r4
   1c484:	bl	12788 <strlen@plt>
   1c488:	cmp	r0, #8
   1c48c:	bne	1c4b8 <__assert_fail@plt+0x9a3c>
   1c490:	movw	r0, #15568	; 0x3cd0
   1c494:	movw	r8, #256	; 0x100
   1c498:	movt	r0, #6
   1c49c:	movt	r8, #5
   1c4a0:	ldr	r1, [r0]
   1c4a4:	cmp	r1, #0
   1c4a8:	streq	r4, [r0]
   1c4ac:	mov	r0, r8
   1c4b0:	sub	sp, fp, #24
   1c4b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c4b8:	mov	r6, r4
   1c4bc:	ldrb	r0, [r6], #1
   1c4c0:	cmp	r0, #45	; 0x2d
   1c4c4:	movw	r0, #55241	; 0xd7c9
   1c4c8:	movne	r6, r4
   1c4cc:	movt	r0, #4
   1c4d0:	mov	r1, r6
   1c4d4:	bl	123d4 <strcmp@plt>
   1c4d8:	cmp	r0, #0
   1c4dc:	beq	1c534 <__assert_fail@plt+0x9ab8>
   1c4e0:	movw	r7, #272	; 0x110
   1c4e4:	mov	r8, #0
   1c4e8:	mov	r5, #0
   1c4ec:	movt	r7, #5
   1c4f0:	cmn	r5, #1360	; 0x550
   1c4f4:	beq	1c56c <__assert_fail@plt+0x9af0>
   1c4f8:	sub	r0, r7, r5
   1c4fc:	mov	r1, r6
   1c500:	ldr	r0, [r0, #20]
   1c504:	bl	123d4 <strcmp@plt>
   1c508:	sub	r5, r5, #16
   1c50c:	cmp	r0, #0
   1c510:	bne	1c4f0 <__assert_fail@plt+0x9a74>
   1c514:	sub	r8, r7, r5
   1c518:	ldr	r0, [r8]
   1c51c:	cmp	r0, #1
   1c520:	bne	1c548 <__assert_fail@plt+0x9acc>
   1c524:	mov	r8, #0
   1c528:	mov	r0, r8
   1c52c:	sub	sp, fp, #24
   1c530:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c534:	movw	r8, #272	; 0x110
   1c538:	movt	r8, #5
   1c53c:	ldr	r0, [r8]
   1c540:	cmp	r0, #1
   1c544:	beq	1c524 <__assert_fail@plt+0x9aa8>
   1c548:	cmp	r0, #2
   1c54c:	beq	1c56c <__assert_fail@plt+0x9af0>
   1c550:	movw	r6, #15568	; 0x3cd0
   1c554:	cmp	r0, #0
   1c558:	movt	r6, #6
   1c55c:	ldr	r1, [r6]
   1c560:	beq	1c578 <__assert_fail@plt+0x9afc>
   1c564:	cmp	r1, #0
   1c568:	streq	r4, [r6]
   1c56c:	mov	r0, r8
   1c570:	sub	sp, fp, #24
   1c574:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c578:	cmp	r1, #0
   1c57c:	beq	1c56c <__assert_fail@plt+0x9af0>
   1c580:	movw	r0, #15980	; 0x3e6c
   1c584:	movt	r0, #6
   1c588:	ldrb	r1, [r0, #17]
   1c58c:	cmp	r1, #0
   1c590:	bne	1c56c <__assert_fail@plt+0x9af0>
   1c594:	ldrb	r0, [r0, #16]
   1c598:	cmp	r0, #0
   1c59c:	beq	1c56c <__assert_fail@plt+0x9af0>
   1c5a0:	movw	r1, #61680	; 0xf0f0
   1c5a4:	mov	r0, #0
   1c5a8:	mov	r2, #5
   1c5ac:	movt	r1, #4
   1c5b0:	bl	1253c <dcgettext@plt>
   1c5b4:	mov	r2, r0
   1c5b8:	ldr	r0, [r6]
   1c5bc:	mov	r1, #0
   1c5c0:	mov	r3, r4
   1c5c4:	stm	sp, {r0, r4}
   1c5c8:	mov	r0, #0
   1c5cc:	bl	12674 <error@plt>
   1c5d0:	mov	r0, r8
   1c5d4:	sub	sp, fp, #24
   1c5d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c5dc:	push	{fp, lr}
   1c5e0:	mov	fp, sp
   1c5e4:	bl	17a34 <__assert_fail@plt+0x4fb8>
   1c5e8:	movw	r1, #15816	; 0x3dc8
   1c5ec:	mov	r2, #5
   1c5f0:	mov	r3, #0
   1c5f4:	movt	r1, #1
   1c5f8:	str	r1, [r0]
   1c5fc:	strd	r2, [r0, #8]
   1c600:	strh	r3, [r0, #18]
   1c604:	mov	r0, #1
   1c608:	pop	{fp, pc}
   1c60c:	push	{r4, r5, fp, lr}
   1c610:	add	fp, sp, #8
   1c614:	mov	r1, #0
   1c618:	mov	r5, #0
   1c61c:	bl	17bdc <__assert_fail@plt+0x5160>
   1c620:	movw	r1, #18884	; 0x49c4
   1c624:	mov	r4, #4
   1c628:	movt	r1, #1
   1c62c:	str	r1, [r0]
   1c630:	strd	r4, [r0, #8]
   1c634:	strh	r5, [r0, #18]
   1c638:	mov	r0, #1
   1c63c:	pop	{r4, r5, fp, pc}
   1c640:	push	{fp, lr}
   1c644:	mov	fp, sp
   1c648:	bl	18408 <__assert_fail@plt+0x598c>
   1c64c:	movw	r1, #257	; 0x101
   1c650:	str	r1, [r0, #16]
   1c654:	add	r1, r0, #40	; 0x28
   1c658:	movw	r0, #64104	; 0xfa68
   1c65c:	movt	r0, #4
   1c660:	bl	1fb28 <__assert_fail@plt+0xd0ac>
   1c664:	mov	r0, #1
   1c668:	pop	{fp, pc}
   1c66c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c670:	add	fp, sp, #28
   1c674:	sub	sp, sp, #116	; 0x74
   1c678:	mov	r6, #0
   1c67c:	cmp	r1, #0
   1c680:	beq	1c71c <__assert_fail@plt+0x9ca0>
   1c684:	ldr	r8, [r2]
   1c688:	mov	sl, r2
   1c68c:	mov	r5, r1
   1c690:	ldr	r4, [r1, r8, lsl #2]
   1c694:	cmp	r4, #0
   1c698:	beq	1c71c <__assert_fail@plt+0x9ca0>
   1c69c:	mov	r7, r0
   1c6a0:	mov	r0, r4
   1c6a4:	bl	12788 <strlen@plt>
   1c6a8:	cmp	r0, #8
   1c6ac:	bne	1c71c <__assert_fail@plt+0x9ca0>
   1c6b0:	mov	r0, #116	; 0x74
   1c6b4:	mov	r1, r4
   1c6b8:	mov	r2, #6
   1c6bc:	strh	r0, [fp, #-32]	; 0xffffffe0
   1c6c0:	movw	r0, #16993	; 0x4261
   1c6c4:	movt	r0, #28003	; 0x6d63
   1c6c8:	str	r0, [fp, #-36]	; 0xffffffdc
   1c6cc:	movw	r0, #61596	; 0xf09c
   1c6d0:	movt	r0, #4
   1c6d4:	bl	12a1c <strncmp@plt>
   1c6d8:	cmp	r0, #0
   1c6dc:	bne	1c928 <__assert_fail@plt+0x9eac>
   1c6e0:	ldrb	r9, [r4, #6]
   1c6e4:	cmp	r9, #66	; 0x42
   1c6e8:	ldrbne	r4, [r4, #7]
   1c6ec:	cmpne	r4, #66	; 0x42
   1c6f0:	bne	1c728 <__assert_fail@plt+0x9cac>
   1c6f4:	movw	r1, #62049	; 0xf261
   1c6f8:	mov	r0, #0
   1c6fc:	mov	r2, #5
   1c700:	mov	r6, #0
   1c704:	movt	r1, #4
   1c708:	bl	1253c <dcgettext@plt>
   1c70c:	mov	r2, r0
   1c710:	mov	r0, #0
   1c714:	mov	r1, #0
   1c718:	bl	12674 <error@plt>
   1c71c:	mov	r0, r6
   1c720:	sub	sp, fp, #28
   1c724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c728:	mov	r6, #0
   1c72c:	cmp	r9, #116	; 0x74
   1c730:	beq	1c71c <__assert_fail@plt+0x9ca0>
   1c734:	sub	r0, fp, #36	; 0x24
   1c738:	mov	r1, r9
   1c73c:	bl	12794 <strchr@plt>
   1c740:	cmp	r0, #0
   1c744:	beq	1c71c <__assert_fail@plt+0x9ca0>
   1c748:	sub	r0, fp, #36	; 0x24
   1c74c:	mov	r1, r4
   1c750:	bl	12794 <strchr@plt>
   1c754:	cmp	r0, #0
   1c758:	beq	1c71c <__assert_fail@plt+0x9ca0>
   1c75c:	add	r0, r8, #1
   1c760:	ldr	r1, [r5, r0, lsl #2]
   1c764:	cmp	r1, #0
   1c768:	beq	1c948 <__assert_fail@plt+0x9ecc>
   1c76c:	str	r0, [sl]
   1c770:	mov	r0, r7
   1c774:	bl	183ac <__assert_fail@plt+0x5930>
   1c778:	mov	r6, r0
   1c77c:	cmp	r9, #97	; 0x61
   1c780:	beq	1c7bc <__assert_fail@plt+0x9d40>
   1c784:	cmp	r9, #109	; 0x6d
   1c788:	beq	1c7a8 <__assert_fail@plt+0x9d2c>
   1c78c:	cmp	r9, #99	; 0x63
   1c790:	bne	1c990 <__assert_fail@plt+0x9f14>
   1c794:	mov	r0, #2
   1c798:	cmp	r4, #116	; 0x74
   1c79c:	str	r0, [r6, #40]	; 0x28
   1c7a0:	beq	1c7cc <__assert_fail@plt+0x9d50>
   1c7a4:	b	1c81c <__assert_fail@plt+0x9da0>
   1c7a8:	mov	r0, #3
   1c7ac:	cmp	r4, #116	; 0x74
   1c7b0:	str	r0, [r6, #40]	; 0x28
   1c7b4:	beq	1c7cc <__assert_fail@plt+0x9d50>
   1c7b8:	b	1c81c <__assert_fail@plt+0x9da0>
   1c7bc:	mov	r0, #0
   1c7c0:	cmp	r4, #116	; 0x74
   1c7c4:	str	r0, [r6, #40]	; 0x28
   1c7c8:	bne	1c81c <__assert_fail@plt+0x9da0>
   1c7cc:	ldr	r0, [sl]
   1c7d0:	movw	r7, #15980	; 0x3e6c
   1c7d4:	add	r4, r6, #48	; 0x30
   1c7d8:	movt	r7, #6
   1c7dc:	add	r2, r7, #20
   1c7e0:	ldr	r1, [r5, r0, lsl #2]
   1c7e4:	mov	r0, r4
   1c7e8:	bl	2c704 <__assert_fail@plt+0x19c88>
   1c7ec:	cmp	r0, #0
   1c7f0:	bne	1c884 <__assert_fail@plt+0x9e08>
   1c7f4:	movw	r1, #62171	; 0xf2db
   1c7f8:	mov	r0, #0
   1c7fc:	mov	r2, #5
   1c800:	movt	r1, #4
   1c804:	bl	1253c <dcgettext@plt>
   1c808:	mov	r4, r0
   1c80c:	ldr	r0, [sl]
   1c810:	ldr	r1, [r7, #72]	; 0x48
   1c814:	ldr	r2, [r5, r0, lsl #2]
   1c818:	b	1c974 <__assert_fail@plt+0x9ef8>
   1c81c:	mov	r7, sp
   1c820:	mov	r0, r7
   1c824:	bl	18850 <__assert_fail@plt+0x5dd4>
   1c828:	ldr	r0, [sl]
   1c82c:	movw	r1, #15980	; 0x3e6c
   1c830:	movt	r1, #6
   1c834:	ldr	r2, [r1, #52]	; 0x34
   1c838:	mov	r1, r7
   1c83c:	ldr	r0, [r5, r0, lsl #2]
   1c840:	blx	r2
   1c844:	cmp	r0, #0
   1c848:	bne	1ca04 <__assert_fail@plt+0x9f88>
   1c84c:	cmp	r4, #109	; 0x6d
   1c850:	beq	1c874 <__assert_fail@plt+0x9df8>
   1c854:	cmp	r4, #99	; 0x63
   1c858:	beq	1c86c <__assert_fail@plt+0x9df0>
   1c85c:	cmp	r4, #97	; 0x61
   1c860:	bne	1ca18 <__assert_fail@plt+0x9f9c>
   1c864:	add	r0, r7, #72	; 0x48
   1c868:	b	1c878 <__assert_fail@plt+0x9dfc>
   1c86c:	add	r0, r7, #88	; 0x58
   1c870:	b	1c878 <__assert_fail@plt+0x9dfc>
   1c874:	add	r0, r7, #80	; 0x50
   1c878:	ldrd	r0, [r0]
   1c87c:	add	r4, r6, #48	; 0x30
   1c880:	stm	r4, {r0, r1}
   1c884:	movw	r1, #15980	; 0x3e6c
   1c888:	mov	r0, #0
   1c88c:	movw	r2, #10111	; 0x277f
   1c890:	vldr	s0, [pc, #456]	; 1ca60 <__assert_fail@plt+0x9fe4>
   1c894:	str	r0, [r6, #44]	; 0x2c
   1c898:	movt	r1, #6
   1c89c:	movt	r2, #133	; 0x85
   1c8a0:	ldr	r0, [r4]
   1c8a4:	ldr	r1, [r1, #28]
   1c8a8:	sub	r0, r1, r0
   1c8ac:	add	r1, pc, #420	; 0x1a4
   1c8b0:	cmp	r0, r2
   1c8b4:	addgt	r1, r1, #4
   1c8b8:	vldr	s2, [r1]
   1c8bc:	movw	r1, #20864	; 0x5180
   1c8c0:	movt	r1, #1
   1c8c4:	cmp	r0, r1
   1c8c8:	vselge.f32	s0, s2, s0
   1c8cc:	vstr	s0, [r6, #28]
   1c8d0:	ldr	r0, [sl]
   1c8d4:	add	r0, r0, #1
   1c8d8:	str	r0, [sl]
   1c8dc:	ldr	r0, [r6]
   1c8e0:	cmp	r0, #0
   1c8e4:	beq	1c9c4 <__assert_fail@plt+0x9f48>
   1c8e8:	movw	r1, #18192	; 0x4710
   1c8ec:	movt	r1, #1
   1c8f0:	cmp	r0, r1
   1c8f4:	bne	1c9e4 <__assert_fail@plt+0x9f68>
   1c8f8:	ldrb	r0, [r6, #18]
   1c8fc:	mov	r6, #1
   1c900:	cmp	r0, #0
   1c904:	bne	1c71c <__assert_fail@plt+0x9ca0>
   1c908:	movw	r0, #62293	; 0xf355
   1c90c:	movw	r1, #61975	; 0xf217
   1c910:	movw	r3, #61984	; 0xf220
   1c914:	movw	r2, #1649	; 0x671
   1c918:	movt	r0, #4
   1c91c:	movt	r1, #4
   1c920:	movt	r3, #4
   1c924:	bl	12a7c <__assert_fail@plt>
   1c928:	movw	r0, #61932	; 0xf1ec
   1c92c:	movw	r1, #61975	; 0xf217
   1c930:	movw	r3, #61984	; 0xf220
   1c934:	movw	r2, #1555	; 0x613
   1c938:	movt	r0, #4
   1c93c:	movt	r1, #4
   1c940:	movt	r3, #4
   1c944:	bl	12a7c <__assert_fail@plt>
   1c948:	movw	r1, #62118	; 0xf2a6
   1c94c:	mov	r0, #0
   1c950:	mov	r2, #5
   1c954:	movt	r1, #4
   1c958:	bl	1253c <dcgettext@plt>
   1c95c:	mov	r4, r0
   1c960:	ldr	r0, [sl]
   1c964:	ldr	r2, [r5, r0, lsl #2]
   1c968:	movw	r0, #15980	; 0x3e6c
   1c96c:	movt	r0, #6
   1c970:	ldr	r1, [r0, #72]	; 0x48
   1c974:	mov	r0, #0
   1c978:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1c97c:	mov	r3, r0
   1c980:	mov	r0, #1
   1c984:	mov	r1, #0
   1c988:	mov	r2, r4
   1c98c:	bl	12674 <error@plt>
   1c990:	sub	r0, fp, #36	; 0x24
   1c994:	mov	r1, r9
   1c998:	bl	12794 <strchr@plt>
   1c99c:	cmp	r0, #0
   1c9a0:	bne	1ca38 <__assert_fail@plt+0x9fbc>
   1c9a4:	movw	r0, #62148	; 0xf2c4
   1c9a8:	movw	r1, #61975	; 0xf217
   1c9ac:	movw	r3, #61984	; 0xf220
   1c9b0:	movw	r2, #1611	; 0x64b
   1c9b4:	movt	r0, #4
   1c9b8:	movt	r1, #4
   1c9bc:	movt	r3, #4
   1c9c0:	bl	12a7c <__assert_fail@plt>
   1c9c4:	movw	r0, #62229	; 0xf315
   1c9c8:	movw	r1, #61975	; 0xf217
   1c9cc:	movw	r3, #61984	; 0xf220
   1c9d0:	movw	r2, #1647	; 0x66f
   1c9d4:	movt	r0, #4
   1c9d8:	movt	r1, #4
   1c9dc:	movt	r3, #4
   1c9e0:	bl	12a7c <__assert_fail@plt>
   1c9e4:	movw	r0, #62257	; 0xf331
   1c9e8:	movw	r1, #61975	; 0xf217
   1c9ec:	movw	r3, #61984	; 0xf220
   1c9f0:	mov	r2, #1648	; 0x670
   1c9f4:	movt	r0, #4
   1c9f8:	movt	r1, #4
   1c9fc:	movt	r3, #4
   1ca00:	bl	12a7c <__assert_fail@plt>
   1ca04:	bl	127d0 <__errno_location@plt>
   1ca08:	ldr	r1, [sl]
   1ca0c:	ldr	r0, [r0]
   1ca10:	ldr	r1, [r5, r1, lsl #2]
   1ca14:	bl	19de0 <__assert_fail@plt+0x7364>
   1ca18:	movw	r0, #55401	; 0xd869
   1ca1c:	movw	r1, #61975	; 0xf217
   1ca20:	movw	r3, #62313	; 0xf369
   1ca24:	movw	r2, #498	; 0x1f2
   1ca28:	movt	r0, #4
   1ca2c:	movt	r1, #4
   1ca30:	movt	r3, #4
   1ca34:	bl	12a7c <__assert_fail@plt>
   1ca38:	movw	r0, #55401	; 0xd869
   1ca3c:	movw	r1, #61975	; 0xf217
   1ca40:	movw	r3, #61984	; 0xf220
   1ca44:	movw	r2, #1612	; 0x64c
   1ca48:	movt	r0, #4
   1ca4c:	movt	r1, #4
   1ca50:	movt	r3, #4
   1ca54:	bl	12a7c <__assert_fail@plt>
   1ca58:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1ca5c:			; <UNDEFINED> instruction: 0x3e99999a
   1ca60:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ca64:	push	{r4, sl, fp, lr}
   1ca68:	add	fp, sp, #8
   1ca6c:	mov	r1, #0
   1ca70:	mov	r4, #0
   1ca74:	bl	17bdc <__assert_fail@plt+0x5160>
   1ca78:	movw	r1, #18028	; 0x466c
   1ca7c:	mov	r2, #2
   1ca80:	mov	r3, #4
   1ca84:	movt	r1, #1
   1ca88:	str	r1, [r0]
   1ca8c:	strd	r2, [r0, #8]
   1ca90:	strh	r4, [r0, #18]
   1ca94:	mov	r0, #1
   1ca98:	pop	{r4, sl, fp, pc}
   1ca9c:	push	{fp, lr}
   1caa0:	mov	fp, sp
   1caa4:	bl	17a34 <__assert_fail@plt+0x4fb8>
   1caa8:	movw	r1, #15976	; 0x3e68
   1caac:	mov	r2, #3
   1cab0:	mov	r3, #1
   1cab4:	movt	r1, #1
   1cab8:	str	r1, [r0]
   1cabc:	mov	r1, #0
   1cac0:	strd	r2, [r0, #8]
   1cac4:	strh	r1, [r0, #18]
   1cac8:	mov	r1, #1065353216	; 0x3f800000
   1cacc:	str	r1, [r0, #28]
   1cad0:	mov	r0, #1
   1cad4:	pop	{fp, pc}
   1cad8:	push	{fp, lr}
   1cadc:	mov	fp, sp
   1cae0:	bl	17a34 <__assert_fail@plt+0x4fb8>
   1cae4:	movw	r1, #15584	; 0x3ce0
   1cae8:	movt	r1, #1
   1caec:	str	r1, [r0]
   1caf0:	mov	r1, #3
   1caf4:	str	r1, [r0, #8]
   1caf8:	str	r1, [r0, #12]
   1cafc:	mov	r1, #0
   1cb00:	strh	r1, [r0, #18]
   1cb04:	mov	r0, #1
   1cb08:	pop	{fp, pc}
   1cb0c:	nop	{0}
   1cb10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb14:	add	fp, sp, #28
   1cb18:	sub	sp, sp, #28
   1cb1c:	mov	r4, #0
   1cb20:	cmp	r1, #0
   1cb24:	beq	1cbf0 <__assert_fail@plt+0xa174>
   1cb28:	ldr	r9, [r2]
   1cb2c:	mov	r5, r2
   1cb30:	ldr	r7, [r1, r9, lsl #2]
   1cb34:	cmp	r7, #0
   1cb38:	beq	1cbf0 <__assert_fail@plt+0xa174>
   1cb3c:	movw	sl, #15980	; 0x3e6c
   1cb40:	mov	r8, r0
   1cb44:	add	r0, r9, #1
   1cb48:	movw	r1, #62701	; 0xf4ed
   1cb4c:	vldr	d0, [pc, #188]	; 1cc10 <__assert_fail@plt+0xa194>
   1cb50:	add	r6, sp, #8
   1cb54:	mov	r4, #0
   1cb58:	str	r0, [r5]
   1cb5c:	movt	sl, #6
   1cb60:	movt	r1, #4
   1cb64:	str	r4, [sp, #8]
   1cb68:	ldr	r0, [sl, #28]
   1cb6c:	ldr	r3, [sl, #32]
   1cb70:	str	r1, [sp]
   1cb74:	movw	r1, #20864	; 0x5180
   1cb78:	movt	r1, #1
   1cb7c:	add	r2, r0, r1
   1cb80:	mov	r0, r7
   1cb84:	mov	r1, r6
   1cb88:	bl	1f218 <__assert_fail@plt+0xc79c>
   1cb8c:	cmp	r0, #0
   1cb90:	beq	1cbfc <__assert_fail@plt+0xa180>
   1cb94:	mov	r0, r8
   1cb98:	mov	r1, r7
   1cb9c:	bl	183ac <__assert_fail@plt+0x5930>
   1cba0:	mov	r1, #8
   1cba4:	movw	r3, #10111	; 0x277f
   1cba8:	vldr	s0, [pc, #112]	; 1cc20 <__assert_fail@plt+0xa1a4>
   1cbac:	mov	r4, #1
   1cbb0:	vld1.64	{d16-d17}, [r6], r1
   1cbb4:	add	r1, r0, #40	; 0x28
   1cbb8:	movt	r3, #133	; 0x85
   1cbbc:	vst1.64	{d16-d17}, [r1]
   1cbc0:	ldr	r1, [r6]
   1cbc4:	ldr	r2, [sl, #28]
   1cbc8:	sub	r1, r2, r1
   1cbcc:	add	r2, pc, #68	; 0x44
   1cbd0:	cmp	r1, r3
   1cbd4:	addgt	r2, r2, #4
   1cbd8:	vldr	s2, [r2]
   1cbdc:	movw	r2, #20864	; 0x5180
   1cbe0:	movt	r2, #1
   1cbe4:	cmp	r1, r2
   1cbe8:	vselge.f32	s0, s2, s0
   1cbec:	vstr	s0, [r0, #28]
   1cbf0:	mov	r0, r4
   1cbf4:	sub	sp, fp, #28
   1cbf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbfc:	str	r9, [r5]
   1cc00:	mov	r0, r4
   1cc04:	sub	sp, fp, #28
   1cc08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc0c:	nop	{0}
   1cc10:	andeq	r0, r0, r0
   1cc14:	submi	r0, lr, r0
   1cc18:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1cc1c:			; <UNDEFINED> instruction: 0x3e99999a
   1cc20:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cc24:	push	{r4, r5, r6, sl, fp, lr}
   1cc28:	add	fp, sp, #16
   1cc2c:	sub	sp, sp, #104	; 0x68
   1cc30:	mov	r4, r0
   1cc34:	mov	r0, sp
   1cc38:	mov	r6, r2
   1cc3c:	mov	r5, r1
   1cc40:	bl	18850 <__assert_fail@plt+0x5dd4>
   1cc44:	mov	r0, #0
   1cc48:	cmp	r5, #0
   1cc4c:	beq	1ccec <__assert_fail@plt+0xa270>
   1cc50:	ldr	r1, [r6]
   1cc54:	ldr	r5, [r5, r1, lsl #2]
   1cc58:	cmp	r5, #0
   1cc5c:	beq	1ccec <__assert_fail@plt+0xa270>
   1cc60:	add	r0, r1, #1
   1cc64:	mov	r1, sp
   1cc68:	str	r0, [r6]
   1cc6c:	movw	r6, #15980	; 0x3e6c
   1cc70:	mov	r0, r5
   1cc74:	movt	r6, #6
   1cc78:	ldr	r2, [r6, #52]	; 0x34
   1cc7c:	blx	r2
   1cc80:	cmp	r0, #0
   1cc84:	bne	1ccf4 <__assert_fail@plt+0xa278>
   1cc88:	mov	r0, r4
   1cc8c:	mov	r1, r5
   1cc90:	bl	183ac <__assert_fail@plt+0x5930>
   1cc94:	mov	r1, #0
   1cc98:	add	ip, r0, #44	; 0x2c
   1cc9c:	vldr	s0, [pc, #104]	; 1cd0c <__assert_fail@plt+0xa290>
   1cca0:	str	r1, [r0, #40]	; 0x28
   1cca4:	ldr	r2, [sp, #80]	; 0x50
   1cca8:	ldr	r3, [sp, #84]	; 0x54
   1ccac:	stm	ip, {r1, r2, r3}
   1ccb0:	movw	r3, #10111	; 0x277f
   1ccb4:	ldr	r1, [r6, #28]
   1ccb8:	ldr	r2, [sp, #80]	; 0x50
   1ccbc:	movt	r3, #133	; 0x85
   1ccc0:	sub	r1, r1, r2
   1ccc4:	add	r2, pc, #56	; 0x38
   1ccc8:	cmp	r1, r3
   1cccc:	addgt	r2, r2, #4
   1ccd0:	vldr	s2, [r2]
   1ccd4:	movw	r2, #20864	; 0x5180
   1ccd8:	movt	r2, #1
   1ccdc:	cmp	r1, r2
   1cce0:	vselge.f32	s0, s2, s0
   1cce4:	vstr	s0, [r0, #28]
   1cce8:	mov	r0, #1
   1ccec:	sub	sp, fp, #16
   1ccf0:	pop	{r4, r5, r6, sl, fp, pc}
   1ccf4:	bl	127d0 <__errno_location@plt>
   1ccf8:	ldr	r0, [r0]
   1ccfc:	mov	r1, r5
   1cd00:	bl	19de0 <__assert_fail@plt+0x7364>
   1cd04:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1cd08:			; <UNDEFINED> instruction: 0x3e99999a
   1cd0c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cd10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd14:	add	fp, sp, #28
   1cd18:	sub	sp, sp, #28
   1cd1c:	mov	r4, r1
   1cd20:	movw	r1, #62899	; 0xf5b3
   1cd24:	mov	r5, r2
   1cd28:	mov	r6, r0
   1cd2c:	mov	r0, #0
   1cd30:	mov	r2, #5
   1cd34:	mov	r8, #0
   1cd38:	movt	r1, #4
   1cd3c:	bl	1253c <dcgettext@plt>
   1cd40:	cmp	r4, #0
   1cd44:	beq	1ce60 <__assert_fail@plt+0xa3e4>
   1cd48:	ldr	r9, [r5]
   1cd4c:	ldr	r7, [r4, r9, lsl #2]
   1cd50:	cmp	r7, #0
   1cd54:	beq	1ce60 <__assert_fail@plt+0xa3e4>
   1cd58:	movw	sl, #15980	; 0x3e6c
   1cd5c:	add	r1, r9, #1
   1cd60:	vldr	d0, [pc, #456]	; 1cf30 <__assert_fail@plt+0xa4b4>
   1cd64:	add	r4, sp, #8
   1cd68:	str	r1, [r5]
   1cd6c:	movt	sl, #6
   1cd70:	ldrb	r1, [r7]
   1cd74:	ldr	r2, [sl, #28]
   1cd78:	str	r0, [sp]
   1cd7c:	movw	r0, #20864	; 0x5180
   1cd80:	ldr	r3, [sl, #32]
   1cd84:	movt	r0, #1
   1cd88:	cmp	r1, #45	; 0x2d
   1cd8c:	add	r0, r2, r0
   1cd90:	mov	r1, r4
   1cd94:	subeq	r2, r0, #1
   1cd98:	mov	r0, r7
   1cd9c:	bl	1f218 <__assert_fail@plt+0xc79c>
   1cda0:	cmp	r0, #0
   1cda4:	beq	1ce5c <__assert_fail@plt+0xa3e0>
   1cda8:	mov	r0, r6
   1cdac:	mov	r1, r7
   1cdb0:	bl	183ac <__assert_fail@plt+0x5930>
   1cdb4:	mov	r5, r0
   1cdb8:	mov	r0, #8
   1cdbc:	movw	r2, #10111	; 0x277f
   1cdc0:	vldr	s0, [pc, #376]	; 1cf40 <__assert_fail@plt+0xa4c4>
   1cdc4:	movw	r7, #20864	; 0x5180
   1cdc8:	mov	r8, #1
   1cdcc:	vld1.64	{d16-d17}, [r4], r0
   1cdd0:	add	r0, r5, #40	; 0x28
   1cdd4:	movt	r2, #133	; 0x85
   1cdd8:	movt	r7, #1
   1cddc:	vst1.64	{d16-d17}, [r0]
   1cde0:	ldr	r0, [r4]
   1cde4:	ldr	r1, [sl, #28]
   1cde8:	sub	r0, r1, r0
   1cdec:	add	r1, pc, #324	; 0x144
   1cdf0:	cmp	r0, r2
   1cdf4:	addgt	r1, r1, #4
   1cdf8:	cmp	r0, r7
   1cdfc:	vldr	s2, [r1]
   1ce00:	vselge.f32	s0, s2, s0
   1ce04:	vstr	s0, [r5, #28]
   1ce08:	ldrb	r0, [sl, #44]	; 0x2c
   1ce0c:	tst	r0, #1
   1ce10:	beq	1ce60 <__assert_fail@plt+0xa3e4>
   1ce14:	movw	sl, #13640	; 0x3548
   1ce18:	ldr	r2, [r5, #4]
   1ce1c:	movw	r1, #62967	; 0xf5f7
   1ce20:	movt	sl, #6
   1ce24:	movt	r1, #4
   1ce28:	ldr	r0, [sl]
   1ce2c:	bl	127c4 <fprintf@plt>
   1ce30:	ldr	r9, [sp, #12]
   1ce34:	ldr	r0, [sl]
   1ce38:	cmp	r9, #0
   1ce3c:	beq	1ce6c <__assert_fail@plt+0xa3f0>
   1ce40:	cmp	r9, #1
   1ce44:	bne	1ce80 <__assert_fail@plt+0xa404>
   1ce48:	movw	r3, #63011	; 0xf623
   1ce4c:	movw	r2, #3339	; 0xd0b
   1ce50:	movt	r3, #4
   1ce54:	movt	r2, #5
   1ce58:	b	1ceac <__assert_fail@plt+0xa430>
   1ce5c:	str	r9, [r5]
   1ce60:	mov	r0, r8
   1ce64:	sub	sp, fp, #28
   1ce68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce6c:	movw	r3, #63008	; 0xf620
   1ce70:	movw	r2, #63002	; 0xf61a
   1ce74:	movt	r3, #4
   1ce78:	movt	r2, #4
   1ce7c:	b	1ceac <__assert_fail@plt+0xa430>
   1ce80:	movw	r1, #63014	; 0xf626
   1ce84:	movw	r3, #63017	; 0xf629
   1ce88:	cmp	r9, #2
   1ce8c:	movw	r2, #63018	; 0xf62a
   1ce90:	movt	r1, #4
   1ce94:	movt	r3, #4
   1ce98:	movt	r2, #4
   1ce9c:	moveq	r3, r1
   1cea0:	movw	r1, #63005	; 0xf61d
   1cea4:	movt	r1, #4
   1cea8:	moveq	r2, r1
   1ceac:	movw	r1, #62981	; 0xf605
   1ceb0:	movt	r1, #4
   1ceb4:	bl	127c4 <fprintf@plt>
   1ceb8:	ldr	r4, [r5, #48]	; 0x30
   1cebc:	ldr	r6, [sl]
   1cec0:	add	r0, sp, #4
   1cec4:	str	r4, [sp, #4]
   1cec8:	bl	12530 <ctime@plt>
   1cecc:	movw	r1, #63040	; 0xf640
   1ced0:	str	r0, [sp]
   1ced4:	asr	r3, r4, #31
   1ced8:	mov	r0, r6
   1cedc:	mov	r2, r4
   1cee0:	movt	r1, #4
   1cee4:	bl	127c4 <fprintf@plt>
   1cee8:	cmp	r9, #2
   1ceec:	bne	1ce60 <__assert_fail@plt+0xa3e4>
   1cef0:	ldr	r0, [r5, #48]	; 0x30
   1cef4:	ldr	r5, [sl]
   1cef8:	add	r4, r0, r7
   1cefc:	add	r0, sp, #4
   1cf00:	str	r4, [sp, #4]
   1cf04:	bl	12530 <ctime@plt>
   1cf08:	movw	r1, #63020	; 0xf62c
   1cf0c:	str	r0, [sp]
   1cf10:	asr	r3, r4, #31
   1cf14:	mov	r0, r5
   1cf18:	mov	r2, r4
   1cf1c:	movt	r1, #4
   1cf20:	bl	127c4 <fprintf@plt>
   1cf24:	mov	r0, r8
   1cf28:	sub	sp, fp, #28
   1cf2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf30:	andeq	r0, r0, r0
   1cf34:	rscsmi	r1, r5, r0, lsl #16
   1cf38:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1cf3c:			; <UNDEFINED> instruction: 0x3e99999a
   1cf40:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cf44:	nop	{0}
   1cf48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf4c:	add	fp, sp, #28
   1cf50:	sub	sp, sp, #28
   1cf54:	mov	r4, #0
   1cf58:	cmp	r1, #0
   1cf5c:	beq	1d028 <__assert_fail@plt+0xa5ac>
   1cf60:	ldr	r9, [r2]
   1cf64:	mov	r5, r2
   1cf68:	ldr	r7, [r1, r9, lsl #2]
   1cf6c:	cmp	r7, #0
   1cf70:	beq	1d028 <__assert_fail@plt+0xa5ac>
   1cf74:	movw	sl, #15980	; 0x3e6c
   1cf78:	mov	r8, r0
   1cf7c:	add	r0, r9, #1
   1cf80:	movw	r1, #62701	; 0xf4ed
   1cf84:	vldr	d0, [pc, #188]	; 1d048 <__assert_fail@plt+0xa5cc>
   1cf88:	add	r6, sp, #8
   1cf8c:	str	r0, [r5]
   1cf90:	mov	r0, #2
   1cf94:	movt	sl, #6
   1cf98:	movt	r1, #4
   1cf9c:	str	r0, [sp, #8]
   1cfa0:	ldr	r0, [sl, #28]
   1cfa4:	ldr	r3, [sl, #32]
   1cfa8:	str	r1, [sp]
   1cfac:	movw	r1, #20864	; 0x5180
   1cfb0:	movt	r1, #1
   1cfb4:	add	r2, r0, r1
   1cfb8:	mov	r0, r7
   1cfbc:	mov	r1, r6
   1cfc0:	bl	1f218 <__assert_fail@plt+0xc79c>
   1cfc4:	cmp	r0, #0
   1cfc8:	beq	1d034 <__assert_fail@plt+0xa5b8>
   1cfcc:	mov	r0, r8
   1cfd0:	mov	r1, r7
   1cfd4:	bl	183ac <__assert_fail@plt+0x5930>
   1cfd8:	mov	r1, #8
   1cfdc:	movw	r3, #10111	; 0x277f
   1cfe0:	vldr	s0, [pc, #112]	; 1d058 <__assert_fail@plt+0xa5dc>
   1cfe4:	mov	r4, #1
   1cfe8:	vld1.64	{d16-d17}, [r6], r1
   1cfec:	add	r1, r0, #40	; 0x28
   1cff0:	movt	r3, #133	; 0x85
   1cff4:	vst1.64	{d16-d17}, [r1]
   1cff8:	ldr	r1, [r6]
   1cffc:	ldr	r2, [sl, #28]
   1d000:	sub	r1, r2, r1
   1d004:	add	r2, pc, #68	; 0x44
   1d008:	cmp	r1, r3
   1d00c:	addgt	r2, r2, #4
   1d010:	vldr	s2, [r2]
   1d014:	movw	r2, #20864	; 0x5180
   1d018:	movt	r2, #1
   1d01c:	cmp	r1, r2
   1d020:	vselge.f32	s0, s2, s0
   1d024:	vstr	s0, [r0, #28]
   1d028:	mov	r0, r4
   1d02c:	sub	sp, fp, #28
   1d030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d034:	str	r9, [r5]
   1d038:	mov	r0, r4
   1d03c:	sub	sp, fp, #28
   1d040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d044:	nop	{0}
   1d048:	andeq	r0, r0, r0
   1d04c:	submi	r0, lr, r0
   1d050:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d054:			; <UNDEFINED> instruction: 0x3e99999a
   1d058:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d05c:	push	{r4, r5, r6, sl, fp, lr}
   1d060:	add	fp, sp, #16
   1d064:	sub	sp, sp, #104	; 0x68
   1d068:	mov	r4, r0
   1d06c:	mov	r0, sp
   1d070:	mov	r6, r2
   1d074:	mov	r5, r1
   1d078:	bl	18850 <__assert_fail@plt+0x5dd4>
   1d07c:	mov	r0, #0
   1d080:	cmp	r5, #0
   1d084:	beq	1d12c <__assert_fail@plt+0xa6b0>
   1d088:	ldr	r1, [r6]
   1d08c:	ldr	r5, [r5, r1, lsl #2]
   1d090:	cmp	r5, #0
   1d094:	beq	1d12c <__assert_fail@plt+0xa6b0>
   1d098:	add	r0, r1, #1
   1d09c:	mov	r1, sp
   1d0a0:	str	r0, [r6]
   1d0a4:	movw	r6, #15980	; 0x3e6c
   1d0a8:	mov	r0, r5
   1d0ac:	movt	r6, #6
   1d0b0:	ldr	r2, [r6, #52]	; 0x34
   1d0b4:	blx	r2
   1d0b8:	cmp	r0, #0
   1d0bc:	bne	1d134 <__assert_fail@plt+0xa6b8>
   1d0c0:	mov	r0, r4
   1d0c4:	mov	r1, r5
   1d0c8:	bl	183ac <__assert_fail@plt+0x5930>
   1d0cc:	mov	r1, #2
   1d0d0:	mov	r3, #0
   1d0d4:	vldr	s0, [pc, #112]	; 1d14c <__assert_fail@plt+0xa6d0>
   1d0d8:	str	r1, [r0, #40]	; 0x28
   1d0dc:	ldr	r1, [sp, #80]	; 0x50
   1d0e0:	ldr	r2, [sp, #84]	; 0x54
   1d0e4:	str	r3, [r0, #44]	; 0x2c
   1d0e8:	movw	r3, #10111	; 0x277f
   1d0ec:	movt	r3, #133	; 0x85
   1d0f0:	str	r2, [r0, #52]	; 0x34
   1d0f4:	str	r1, [r0, #48]	; 0x30
   1d0f8:	ldr	r1, [r6, #28]
   1d0fc:	ldr	r2, [sp, #80]	; 0x50
   1d100:	sub	r1, r1, r2
   1d104:	add	r2, pc, #56	; 0x38
   1d108:	cmp	r1, r3
   1d10c:	addgt	r2, r2, #4
   1d110:	vldr	s2, [r2]
   1d114:	movw	r2, #20864	; 0x5180
   1d118:	movt	r2, #1
   1d11c:	cmp	r1, r2
   1d120:	vselge.f32	s0, s2, s0
   1d124:	vstr	s0, [r0, #28]
   1d128:	mov	r0, #1
   1d12c:	sub	sp, fp, #16
   1d130:	pop	{r4, r5, r6, sl, fp, pc}
   1d134:	bl	127d0 <__errno_location@plt>
   1d138:	ldr	r0, [r0]
   1d13c:	mov	r1, r5
   1d140:	bl	19de0 <__assert_fail@plt+0x7364>
   1d144:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d148:			; <UNDEFINED> instruction: 0x3e99999a
   1d14c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d150:	push	{r4, r5, r6, r7, fp, lr}
   1d154:	add	fp, sp, #16
   1d158:	mov	r6, r0
   1d15c:	mov	r0, #0
   1d160:	cmp	r1, #0
   1d164:	beq	1d1c8 <__assert_fail@plt+0xa74c>
   1d168:	mov	r5, r1
   1d16c:	ldr	r1, [r2]
   1d170:	mov	r4, r2
   1d174:	ldr	r1, [r5, r1, lsl #2]
   1d178:	cmp	r1, #0
   1d17c:	popeq	{r4, r5, r6, r7, fp, pc}
   1d180:	bl	123bc <is_selinux_enabled@plt>
   1d184:	cmp	r0, #0
   1d188:	ble	1d1cc <__assert_fail@plt+0xa750>
   1d18c:	mov	r0, r6
   1d190:	mov	r1, #0
   1d194:	mov	r7, #0
   1d198:	bl	183ac <__assert_fail@plt+0x5930>
   1d19c:	movw	r1, #55050	; 0xd70a
   1d1a0:	movt	r1, #15395	; 0x3c23
   1d1a4:	str	r1, [r0, #28]
   1d1a8:	strb	r7, [r0, #18]
   1d1ac:	ldr	r1, [r4]
   1d1b0:	ldr	r1, [r5, r1, lsl #2]
   1d1b4:	str	r1, [r0, #40]	; 0x28
   1d1b8:	ldr	r0, [r4]
   1d1bc:	add	r0, r0, #1
   1d1c0:	str	r0, [r4]
   1d1c4:	mov	r0, #1
   1d1c8:	pop	{r4, r5, r6, r7, fp, pc}
   1d1cc:	movw	r1, #63048	; 0xf648
   1d1d0:	mov	r0, #0
   1d1d4:	mov	r2, #5
   1d1d8:	movt	r1, #4
   1d1dc:	bl	1253c <dcgettext@plt>
   1d1e0:	mov	r2, r0
   1d1e4:	mov	r0, #1
   1d1e8:	mov	r1, #0
   1d1ec:	bl	12674 <error@plt>
   1d1f0:	push	{r4, sl, fp, lr}
   1d1f4:	add	fp, sp, #8
   1d1f8:	movw	r4, #15980	; 0x3e6c
   1d1fc:	movt	r4, #6
   1d200:	ldrb	r0, [r4, #36]	; 0x24
   1d204:	cmp	r0, #0
   1d208:	beq	1d214 <__assert_fail@plt+0xa798>
   1d20c:	mov	r0, #1
   1d210:	pop	{r4, sl, fp, pc}
   1d214:	mov	r0, r4
   1d218:	mov	r2, #0
   1d21c:	ldr	r1, [r0, #28]!
   1d220:	add	r1, r1, #4480	; 0x1180
   1d224:	add	r1, r1, #81920	; 0x14000
   1d228:	stm	r0, {r1, r2}
   1d22c:	bl	12704 <localtime@plt>
   1d230:	cmp	r0, #0
   1d234:	beq	1d258 <__assert_fail@plt+0xa7dc>
   1d238:	ldm	r0, {r1, r2}
   1d23c:	ldr	r0, [r0, #8]
   1d240:	rsb	r2, r2, r2, lsl #4
   1d244:	add	r1, r1, r2, lsl #2
   1d248:	mov	r2, #3600	; 0xe10
   1d24c:	mla	r1, r0, r2, r1
   1d250:	ldr	r0, [r4, #28]
   1d254:	b	1d27c <__assert_fail@plt+0xa800>
   1d258:	ldr	r0, [r4, #28]
   1d25c:	movw	r1, #17671	; 0x4507
   1d260:	movt	r1, #49710	; 0xc22e
   1d264:	smmla	r1, r0, r1, r0
   1d268:	asr	r2, r1, #16
   1d26c:	add	r1, r2, r1, lsr #31
   1d270:	movw	r2, #675	; 0x2a3
   1d274:	mul	r1, r1, r2
   1d278:	sub	r1, r0, r1, lsl #7
   1d27c:	mov	r2, #1
   1d280:	sub	r0, r0, r1
   1d284:	strb	r2, [r4, #36]	; 0x24
   1d288:	str	r0, [r4, #28]
   1d28c:	mov	r0, #1
   1d290:	pop	{r4, sl, fp, pc}
   1d294:	push	{fp, lr}
   1d298:	mov	fp, sp
   1d29c:	bl	18408 <__assert_fail@plt+0x598c>
   1d2a0:	movw	r1, #257	; 0x101
   1d2a4:	mov	r2, #0
   1d2a8:	strh	r1, [r0, #16]
   1d2ac:	movw	r1, #15980	; 0x3e6c
   1d2b0:	movt	r1, #6
   1d2b4:	strb	r2, [r1]
   1d2b8:	mov	r1, #1065353216	; 0x3f800000
   1d2bc:	str	r1, [r0, #28]
   1d2c0:	strh	r2, [r0, #18]
   1d2c4:	mov	r0, #1
   1d2c8:	pop	{fp, pc}
   1d2cc:	push	{r4, sl, fp, lr}
   1d2d0:	add	fp, sp, #8
   1d2d4:	movw	r4, #15980	; 0x3e6c
   1d2d8:	movt	r4, #6
   1d2dc:	ldrb	r0, [r4, #17]
   1d2e0:	cmp	r0, #0
   1d2e4:	bne	1d318 <__assert_fail@plt+0xa89c>
   1d2e8:	ldrb	r0, [r4, #16]
   1d2ec:	cmp	r0, #0
   1d2f0:	beq	1d318 <__assert_fail@plt+0xa89c>
   1d2f4:	movw	r1, #63100	; 0xf67c
   1d2f8:	mov	r0, #0
   1d2fc:	mov	r2, #5
   1d300:	movt	r1, #4
   1d304:	bl	1253c <dcgettext@plt>
   1d308:	mov	r2, r0
   1d30c:	mov	r0, #0
   1d310:	mov	r1, #0
   1d314:	bl	12674 <error@plt>
   1d318:	movw	r1, #15572	; 0x3cd4
   1d31c:	mov	r0, #256	; 0x100
   1d320:	movt	r1, #6
   1d324:	strh	r0, [r4]
   1d328:	ldr	r0, [r1]
   1d32c:	cmp	r0, #0
   1d330:	bne	1d344 <__assert_fail@plt+0xa8c8>
   1d334:	movw	r0, #272	; 0x110
   1d338:	movt	r0, #5
   1d33c:	add	r0, r0, #1296	; 0x510
   1d340:	str	r0, [r1]
   1d344:	bl	18408 <__assert_fail@plt+0x598c>
   1d348:	mov	r1, #0
   1d34c:	strh	r1, [r0, #18]
   1d350:	mov	r1, #1065353216	; 0x3f800000
   1d354:	str	r1, [r0, #28]
   1d358:	mov	r0, #1
   1d35c:	pop	{r4, sl, fp, pc}
   1d360:	movw	r0, #15980	; 0x3e6c
   1d364:	mov	r1, #256	; 0x100
   1d368:	movt	r0, #6
   1d36c:	strh	r1, [r0]
   1d370:	movw	r1, #15572	; 0x3cd4
   1d374:	movt	r1, #6
   1d378:	ldr	r0, [r1]
   1d37c:	cmp	r0, #0
   1d380:	bne	1d394 <__assert_fail@plt+0xa918>
   1d384:	movw	r0, #272	; 0x110
   1d388:	movt	r0, #5
   1d38c:	add	r0, r0, #1296	; 0x510
   1d390:	str	r0, [r1]
   1d394:	push	{fp, lr}
   1d398:	mov	fp, sp
   1d39c:	bl	18408 <__assert_fail@plt+0x598c>
   1d3a0:	mov	r1, #0
   1d3a4:	strh	r1, [r0, #18]
   1d3a8:	mov	r1, #1065353216	; 0x3f800000
   1d3ac:	str	r1, [r0, #28]
   1d3b0:	mov	r0, #1
   1d3b4:	pop	{fp, pc}
   1d3b8:	push	{fp, lr}
   1d3bc:	mov	fp, sp
   1d3c0:	bl	18408 <__assert_fail@plt+0x598c>
   1d3c4:	movw	r1, #55050	; 0xd70a
   1d3c8:	movt	r1, #15395	; 0x3c23
   1d3cc:	str	r1, [r0, #28]
   1d3d0:	mov	r0, #1
   1d3d4:	pop	{fp, pc}
   1d3d8:	mov	r3, r2
   1d3dc:	mov	r2, r1
   1d3e0:	mov	r1, r0
   1d3e4:	movw	r0, #63214	; 0xf6ee
   1d3e8:	movt	r0, #4
   1d3ec:	b	1f388 <__assert_fail@plt+0xc90c>
   1d3f0:	push	{fp, lr}
   1d3f4:	mov	fp, sp
   1d3f8:	bl	18408 <__assert_fail@plt+0x598c>
   1d3fc:	ldr	r1, [r0]
   1d400:	movw	r3, #19136	; 0x4ac0
   1d404:	add	r2, pc, #32
   1d408:	movt	r3, #1
   1d40c:	cmp	r1, r3
   1d410:	mov	r1, #0
   1d414:	addeq	r2, r2, #4
   1d418:	str	r1, [r0, #16]
   1d41c:	vldr	s0, [r2]
   1d420:	vstr	s0, [r0, #28]
   1d424:	mov	r0, #1
   1d428:	pop	{fp, pc}
   1d42c:	svccc	0x00666666
   1d430:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d434:	mov	r3, r2
   1d438:	mov	r2, r1
   1d43c:	mov	r1, r0
   1d440:	movw	r0, #64068	; 0xfa44
   1d444:	movt	r0, #4
   1d448:	b	1f388 <__assert_fail@plt+0xc90c>
   1d44c:	mov	r0, #0
   1d450:	cmp	r1, #0
   1d454:	beq	1d480 <__assert_fail@plt+0xaa04>
   1d458:	ldr	r3, [r2]
   1d45c:	ldr	r1, [r1, r3, lsl #2]
   1d460:	cmp	r1, #0
   1d464:	bxeq	lr
   1d468:	add	r0, r3, #1
   1d46c:	str	r0, [r2]
   1d470:	movw	r0, #15980	; 0x3e6c
   1d474:	movt	r0, #6
   1d478:	str	r1, [r0, #76]	; 0x4c
   1d47c:	mov	r0, #1
   1d480:	bx	lr
   1d484:	push	{r4, r5, fp, lr}
   1d488:	add	fp, sp, #8
   1d48c:	mov	r3, r0
   1d490:	mov	r0, #0
   1d494:	cmp	r1, #0
   1d498:	beq	1d4e0 <__assert_fail@plt+0xaa64>
   1d49c:	ldr	r5, [r2]
   1d4a0:	ldr	r4, [r1, r5, lsl #2]
   1d4a4:	cmp	r4, #0
   1d4a8:	popeq	{r4, r5, fp, pc}
   1d4ac:	add	r0, r5, #1
   1d4b0:	str	r0, [r2]
   1d4b4:	mov	r0, r3
   1d4b8:	bl	18408 <__assert_fail@plt+0x598c>
   1d4bc:	mov	r5, r0
   1d4c0:	add	r1, r0, #40	; 0x28
   1d4c4:	mov	r0, r4
   1d4c8:	bl	1fb28 <__assert_fail@plt+0xd0ac>
   1d4cc:	mov	r0, #1065353216	; 0x3f800000
   1d4d0:	str	r0, [r5, #28]
   1d4d4:	movw	r0, #257	; 0x101
   1d4d8:	strh	r0, [r5, #16]
   1d4dc:	mov	r0, #1
   1d4e0:	pop	{r4, r5, fp, pc}
   1d4e4:	movw	r0, #15980	; 0x3e6c
   1d4e8:	movw	r1, #49920	; 0xc300
   1d4ec:	mov	r2, #1
   1d4f0:	movt	r0, #6
   1d4f4:	movt	r1, #1
   1d4f8:	str	r1, [r0, #64]	; 0x40
   1d4fc:	movw	r1, #37008	; 0x9090
   1d500:	strb	r2, [r0, #12]
   1d504:	str	r2, [r0, #48]	; 0x30
   1d508:	movt	r1, #1
   1d50c:	str	r1, [r0, #52]	; 0x34
   1d510:	ldrb	r1, [r0, #44]	; 0x2c
   1d514:	tst	r1, #2
   1d518:	movwne	r1, #37356	; 0x91ec
   1d51c:	movtne	r1, #1
   1d520:	strne	r1, [r0, #52]	; 0x34
   1d524:	movw	r1, #15572	; 0x3cd4
   1d528:	movt	r1, #6
   1d52c:	ldr	r0, [r1]
   1d530:	cmp	r0, #0
   1d534:	bne	1d548 <__assert_fail@plt+0xaacc>
   1d538:	movw	r0, #272	; 0x110
   1d53c:	movt	r0, #5
   1d540:	add	r0, r0, #1296	; 0x510
   1d544:	str	r0, [r1]
   1d548:	push	{fp, lr}
   1d54c:	mov	fp, sp
   1d550:	bl	18408 <__assert_fail@plt+0x598c>
   1d554:	mov	r1, #0
   1d558:	strh	r1, [r0, #18]
   1d55c:	mov	r1, #1065353216	; 0x3f800000
   1d560:	str	r1, [r0, #28]
   1d564:	mov	r0, #1
   1d568:	pop	{fp, pc}
   1d56c:	push	{r4, r5, fp, lr}
   1d570:	add	fp, sp, #8
   1d574:	mov	r3, r0
   1d578:	mov	r0, #0
   1d57c:	cmp	r1, #0
   1d580:	beq	1d5cc <__assert_fail@plt+0xab50>
   1d584:	ldr	r5, [r2]
   1d588:	ldr	r4, [r1, r5, lsl #2]
   1d58c:	cmp	r4, #0
   1d590:	popeq	{r4, r5, fp, pc}
   1d594:	add	r0, r5, #1
   1d598:	mov	r1, r4
   1d59c:	str	r0, [r2]
   1d5a0:	mov	r0, r3
   1d5a4:	bl	183ac <__assert_fail@plt+0x5930>
   1d5a8:	mov	r5, r0
   1d5ac:	add	r1, r0, #40	; 0x28
   1d5b0:	mov	r0, r4
   1d5b4:	bl	1fb28 <__assert_fail@plt+0xd0ac>
   1d5b8:	mov	r0, #1065353216	; 0x3f800000
   1d5bc:	str	r0, [r5, #28]
   1d5c0:	movw	r0, #257	; 0x101
   1d5c4:	str	r0, [r5, #16]
   1d5c8:	mov	r0, #1
   1d5cc:	pop	{r4, r5, fp, pc}
   1d5d0:	push	{r4, r5, fp, lr}
   1d5d4:	add	fp, sp, #8
   1d5d8:	mov	r3, r0
   1d5dc:	mov	r0, #0
   1d5e0:	cmp	r1, #0
   1d5e4:	beq	1d630 <__assert_fail@plt+0xabb4>
   1d5e8:	ldr	r5, [r2]
   1d5ec:	ldr	r4, [r1, r5, lsl #2]
   1d5f0:	cmp	r4, #0
   1d5f4:	popeq	{r4, r5, fp, pc}
   1d5f8:	add	r0, r5, #1
   1d5fc:	mov	r1, r4
   1d600:	str	r0, [r2]
   1d604:	mov	r0, r3
   1d608:	bl	183ac <__assert_fail@plt+0x5930>
   1d60c:	mov	r5, r0
   1d610:	add	r1, r0, #40	; 0x28
   1d614:	mov	r0, r4
   1d618:	bl	1fb28 <__assert_fail@plt+0xd0ac>
   1d61c:	mov	r0, #1065353216	; 0x3f800000
   1d620:	str	r0, [r5, #28]
   1d624:	movw	r0, #257	; 0x101
   1d628:	str	r0, [r5, #16]
   1d62c:	mov	r0, #1
   1d630:	pop	{r4, r5, fp, pc}
   1d634:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d638:	add	fp, sp, #24
   1d63c:	sub	sp, sp, #24
   1d640:	ldr	r7, [r2]
   1d644:	mov	r4, r2
   1d648:	cmp	r1, #0
   1d64c:	beq	1d6ac <__assert_fail@plt+0xac30>
   1d650:	mov	r5, r0
   1d654:	ldr	r0, [r1, r7, lsl #2]
   1d658:	cmp	r0, #0
   1d65c:	beq	1d6ac <__assert_fail@plt+0xac30>
   1d660:	add	r2, r7, #1
   1d664:	str	r2, [r4]
   1d668:	ldr	r6, [r1, r2, lsl #2]
   1d66c:	cmp	r6, #0
   1d670:	beq	1d6ac <__assert_fail@plt+0xac30>
   1d674:	add	r1, r7, #2
   1d678:	add	r8, sp, #4
   1d67c:	str	r1, [r4]
   1d680:	mov	r1, r8
   1d684:	bl	1fb28 <__assert_fail@plt+0xd0ac>
   1d688:	ldr	r7, [r4]
   1d68c:	mov	r0, r8
   1d690:	mov	r1, r5
   1d694:	mov	r2, r6
   1d698:	bl	1a574 <__assert_fail@plt+0x7af8>
   1d69c:	mov	r1, r0
   1d6a0:	mov	r0, #1
   1d6a4:	cmp	r1, #0
   1d6a8:	bne	1d6b4 <__assert_fail@plt+0xac38>
   1d6ac:	mov	r0, #0
   1d6b0:	str	r7, [r4]
   1d6b4:	sub	sp, fp, #24
   1d6b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d6bc:	push	{r4, r5, r6, sl, fp, lr}
   1d6c0:	add	fp, sp, #16
   1d6c4:	sub	sp, sp, #104	; 0x68
   1d6c8:	mov	r5, r0
   1d6cc:	mov	r0, #0
   1d6d0:	cmp	r1, #0
   1d6d4:	beq	1d7b0 <__assert_fail@plt+0xad34>
   1d6d8:	ldr	r3, [r2]
   1d6dc:	ldr	r4, [r1, r3, lsl #2]
   1d6e0:	cmp	r4, #0
   1d6e4:	beq	1d7b0 <__assert_fail@plt+0xad34>
   1d6e8:	movw	r6, #15980	; 0x3e6c
   1d6ec:	add	r0, r3, #1
   1d6f0:	str	r0, [r2]
   1d6f4:	movt	r6, #6
   1d6f8:	ldrh	r0, [r6, #68]	; 0x44
   1d6fc:	cmp	r0, #2
   1d700:	bcc	1d714 <__assert_fail@plt+0xac98>
   1d704:	mov	r0, r4
   1d708:	bl	1bfdc <__assert_fail@plt+0x9560>
   1d70c:	cmp	r0, #0
   1d710:	beq	1d784 <__assert_fail@plt+0xad08>
   1d714:	mov	r0, r5
   1d718:	mov	r1, r4
   1d71c:	bl	183ac <__assert_fail@plt+0x5930>
   1d720:	movw	r1, #53058	; 0xcf42
   1d724:	mov	r5, r0
   1d728:	str	r4, [r0, #40]	; 0x28
   1d72c:	mov	r2, sp
   1d730:	mov	r0, #3
   1d734:	movt	r1, #4
   1d738:	bl	129e0 <__xstat64@plt>
   1d73c:	cmp	r0, #0
   1d740:	beq	1d750 <__assert_fail@plt+0xacd4>
   1d744:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1d748:	vstr	s0, [r5, #28]
   1d74c:	b	1d7ac <__assert_fail@plt+0xad30>
   1d750:	movw	r1, #53058	; 0xcf42
   1d754:	mov	r0, sp
   1d758:	movt	r1, #4
   1d75c:	bl	1be00 <__assert_fail@plt+0x9384>
   1d760:	mov	r1, r0
   1d764:	mov	r0, r4
   1d768:	bl	123d4 <strcmp@plt>
   1d76c:	add	r1, pc, #100	; 0x64
   1d770:	cmp	r0, #0
   1d774:	addeq	r1, r1, #4
   1d778:	vldr	s0, [r1]
   1d77c:	vstr	s0, [r5, #28]
   1d780:	b	1d7ac <__assert_fail@plt+0xad30>
   1d784:	ldrb	r0, [r6, #44]	; 0x2c
   1d788:	tst	r0, #8
   1d78c:	bne	1d7b8 <__assert_fail@plt+0xad3c>
   1d790:	movw	r0, #62668	; 0xf4cc
   1d794:	movt	r0, #4
   1d798:	bl	1c454 <__assert_fail@plt+0x99d8>
   1d79c:	bl	18408 <__assert_fail@plt+0x598c>
   1d7a0:	mov	r1, #0
   1d7a4:	str	r1, [r0, #28]
   1d7a8:	str	r1, [r0, #16]
   1d7ac:	mov	r0, #1
   1d7b0:	sub	sp, fp, #16
   1d7b4:	pop	{r4, r5, r6, sl, fp, pc}
   1d7b8:	movw	r0, #13640	; 0x3548
   1d7bc:	movw	r1, #64116	; 0xfa74
   1d7c0:	mov	r2, r4
   1d7c4:	movt	r0, #6
   1d7c8:	movt	r1, #4
   1d7cc:	ldr	r0, [r0]
   1d7d0:	bl	127c4 <fprintf@plt>
   1d7d4:	b	1d790 <__assert_fail@plt+0xad14>
   1d7d8:			; <UNDEFINED> instruction: 0x3e99999a
   1d7dc:	svccc	0x00333333
   1d7e0:	push	{r4, sl, fp, lr}
   1d7e4:	add	fp, sp, #8
   1d7e8:	mov	r4, r2
   1d7ec:	mov	r2, r0
   1d7f0:	mov	r0, r1
   1d7f4:	mov	r1, r4
   1d7f8:	bl	1fc20 <__assert_fail@plt+0xd1a4>
   1d7fc:	cmp	r0, #0
   1d800:	beq	1d828 <__assert_fail@plt+0xadac>
   1d804:	add	r1, pc, #48	; 0x30
   1d808:	ldrd	r2, [r0, #48]	; 0x30
   1d80c:	subs	r2, r2, #100	; 0x64
   1d810:	sbcs	r2, r3, #0
   1d814:	addcc	r1, r1, #4
   1d818:	vldr	s0, [r1]
   1d81c:	vstr	s0, [r0, #28]
   1d820:	mov	r0, #1
   1d824:	pop	{r4, sl, fp, pc}
   1d828:	ldr	r0, [r4]
   1d82c:	sub	r0, r0, #1
   1d830:	str	r0, [r4]
   1d834:	mov	r0, #0
   1d838:	pop	{r4, sl, fp, pc}
   1d83c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d840:	svccc	0x007d70a4
   1d844:	push	{r4, r5, r6, r7, fp, lr}
   1d848:	add	fp, sp, #16
   1d84c:	sub	sp, sp, #8
   1d850:	mov	r5, r0
   1d854:	mov	r0, #0
   1d858:	cmp	r1, #0
   1d85c:	beq	1d908 <__assert_fail@plt+0xae8c>
   1d860:	ldr	r3, [r2]
   1d864:	ldr	r4, [r1, r3, lsl #2]
   1d868:	cmp	r4, #0
   1d86c:	beq	1d908 <__assert_fail@plt+0xae8c>
   1d870:	add	r0, r3, #1
   1d874:	str	r0, [r2]
   1d878:	mov	r0, r4
   1d87c:	bl	12a64 <getgrnam@plt>
   1d880:	mov	r6, r0
   1d884:	bl	12368 <endgrent@plt>
   1d888:	cmp	r6, #0
   1d88c:	beq	1d898 <__assert_fail@plt+0xae1c>
   1d890:	ldr	r6, [r6, #8]
   1d894:	b	1d8d8 <__assert_fail@plt+0xae5c>
   1d898:	movw	r1, #64176	; 0xfab0
   1d89c:	mov	r0, r4
   1d8a0:	movt	r1, #4
   1d8a4:	bl	12a70 <strspn@plt>
   1d8a8:	cmp	r0, #0
   1d8ac:	beq	1d910 <__assert_fail@plt+0xae94>
   1d8b0:	mov	r6, r4
   1d8b4:	ldrb	r0, [r6, r0]!
   1d8b8:	cmp	r0, #0
   1d8bc:	bne	1d940 <__assert_fail@plt+0xaec4>
   1d8c0:	movw	r0, #15980	; 0x3e6c
   1d8c4:	movt	r0, #6
   1d8c8:	ldr	r1, [r0, #72]	; 0x48
   1d8cc:	mov	r0, r4
   1d8d0:	bl	22f50 <__assert_fail@plt+0x104d4>
   1d8d4:	mov	r6, r0
   1d8d8:	mov	r0, r5
   1d8dc:	mov	r1, r4
   1d8e0:	bl	183ac <__assert_fail@plt+0x5930>
   1d8e4:	ldrd	r2, [r0, #48]	; 0x30
   1d8e8:	add	r1, pc, #240	; 0xf0
   1d8ec:	str	r6, [r0, #40]	; 0x28
   1d8f0:	subs	r2, r2, #100	; 0x64
   1d8f4:	sbcs	r2, r3, #0
   1d8f8:	addcc	r1, r1, #4
   1d8fc:	vldr	s0, [r1]
   1d900:	vstr	s0, [r0, #28]
   1d904:	mov	r0, #1
   1d908:	sub	sp, fp, #16
   1d90c:	pop	{r4, r5, r6, r7, fp, pc}
   1d910:	ldrb	r0, [r4]
   1d914:	cmp	r0, #0
   1d918:	bne	1d99c <__assert_fail@plt+0xaf20>
   1d91c:	movw	r1, #64352	; 0xfb60
   1d920:	mov	r0, #0
   1d924:	mov	r2, #5
   1d928:	movt	r1, #4
   1d92c:	bl	1253c <dcgettext@plt>
   1d930:	mov	r2, r0
   1d934:	mov	r0, #1
   1d938:	mov	r1, #0
   1d93c:	bl	12674 <error@plt>
   1d940:	movw	r1, #64187	; 0xfabb
   1d944:	mov	r0, #0
   1d948:	mov	r2, #5
   1d94c:	movt	r1, #4
   1d950:	bl	1253c <dcgettext@plt>
   1d954:	movw	r7, #15980	; 0x3e6c
   1d958:	mov	r5, r0
   1d95c:	mov	r0, #0
   1d960:	mov	r2, r4
   1d964:	movt	r7, #6
   1d968:	ldr	r1, [r7, #72]	; 0x48
   1d96c:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1d970:	ldr	r1, [r7, #72]	; 0x48
   1d974:	mov	r4, r0
   1d978:	mov	r0, #1
   1d97c:	mov	r2, r6
   1d980:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1d984:	str	r0, [sp]
   1d988:	mov	r0, #1
   1d98c:	mov	r1, #0
   1d990:	mov	r2, r5
   1d994:	mov	r3, r4
   1d998:	bl	12674 <error@plt>
   1d99c:	movw	r1, #64312	; 0xfb38
   1d9a0:	mov	r0, #0
   1d9a4:	mov	r2, #5
   1d9a8:	movt	r1, #4
   1d9ac:	bl	1253c <dcgettext@plt>
   1d9b0:	mov	r5, r0
   1d9b4:	movw	r0, #15980	; 0x3e6c
   1d9b8:	mov	r2, r4
   1d9bc:	movt	r0, #6
   1d9c0:	ldr	r1, [r0, #72]	; 0x48
   1d9c4:	mov	r0, #0
   1d9c8:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1d9cc:	mov	r3, r0
   1d9d0:	mov	r0, #1
   1d9d4:	mov	r1, #0
   1d9d8:	mov	r2, r5
   1d9dc:	bl	12674 <error@plt>
   1d9e0:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d9e4:	svccc	0x007d70a4
   1d9e8:	movw	r0, #15980	; 0x3e6c
   1d9ec:	mov	r1, #1
   1d9f0:	movt	r0, #6
   1d9f4:	strb	r1, [r0, #14]
   1d9f8:	movw	r1, #15572	; 0x3cd4
   1d9fc:	movt	r1, #6
   1da00:	ldr	r0, [r1]
   1da04:	cmp	r0, #0
   1da08:	bne	1da1c <__assert_fail@plt+0xafa0>
   1da0c:	movw	r0, #272	; 0x110
   1da10:	movt	r0, #5
   1da14:	add	r0, r0, #1296	; 0x510
   1da18:	str	r0, [r1]
   1da1c:	push	{fp, lr}
   1da20:	mov	fp, sp
   1da24:	bl	18408 <__assert_fail@plt+0x598c>
   1da28:	mov	r1, #0
   1da2c:	strh	r1, [r0, #18]
   1da30:	mov	r1, #1065353216	; 0x3f800000
   1da34:	str	r1, [r0, #28]
   1da38:	mov	r0, #1
   1da3c:	pop	{fp, pc}
   1da40:	push	{r4, r5, fp, lr}
   1da44:	add	fp, sp, #8
   1da48:	mov	r3, r0
   1da4c:	mov	r0, #0
   1da50:	cmp	r1, #0
   1da54:	beq	1daac <__assert_fail@plt+0xb030>
   1da58:	ldr	r5, [r2]
   1da5c:	ldr	r4, [r1, r5, lsl #2]
   1da60:	cmp	r4, #0
   1da64:	popeq	{r4, r5, fp, pc}
   1da68:	add	r0, r5, #1
   1da6c:	mov	r1, r4
   1da70:	str	r0, [r2]
   1da74:	mov	r0, r3
   1da78:	bl	183ac <__assert_fail@plt+0x5930>
   1da7c:	movw	r1, #64408	; 0xfb98
   1da80:	mov	r5, r0
   1da84:	str	r4, [r0, #40]	; 0x28
   1da88:	mov	r0, r4
   1da8c:	movt	r1, #4
   1da90:	bl	129b0 <strpbrk@plt>
   1da94:	cmp	r0, #0
   1da98:	add	r1, pc, #16
   1da9c:	mov	r0, #1
   1daa0:	addeq	r1, r1, #4
   1daa4:	vldr	s0, [r1]
   1daa8:	vstr	s0, [r5, #28]
   1daac:	pop	{r4, r5, fp, pc}
   1dab0:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1dab4:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1dab8:	push	{r4, r5, r6, r7, fp, lr}
   1dabc:	add	fp, sp, #16
   1dac0:	movw	r7, #15576	; 0x3cd8
   1dac4:	mov	r4, r0
   1dac8:	mov	r5, r2
   1dacc:	mov	r6, r1
   1dad0:	movt	r7, #6
   1dad4:	ldrb	r0, [r7]
   1dad8:	cmp	r0, #0
   1dadc:	bne	1db44 <__assert_fail@plt+0xb0c8>
   1dae0:	movw	r0, #64431	; 0xfbaf
   1dae4:	mov	r2, #0
   1dae8:	movt	r0, #4
   1daec:	mov	r1, r0
   1daf0:	bl	12698 <fnmatch@plt>
   1daf4:	cmp	r0, #0
   1daf8:	bne	1dbc8 <__assert_fail@plt+0xb14c>
   1dafc:	movw	r0, #64435	; 0xfbb3
   1db00:	movw	r1, #64431	; 0xfbaf
   1db04:	mov	r2, #0
   1db08:	movt	r0, #4
   1db0c:	movt	r1, #4
   1db10:	bl	12698 <fnmatch@plt>
   1db14:	cmp	r0, #0
   1db18:	beq	1dbc8 <__assert_fail@plt+0xb14c>
   1db1c:	movw	r0, #64435	; 0xfbb3
   1db20:	movw	r1, #64431	; 0xfbaf
   1db24:	mov	r2, #16
   1db28:	movt	r0, #4
   1db2c:	movt	r1, #4
   1db30:	bl	12698 <fnmatch@plt>
   1db34:	cmp	r0, #0
   1db38:	bne	1dbc8 <__assert_fail@plt+0xb14c>
   1db3c:	mov	r0, #1
   1db40:	strb	r0, [r7]
   1db44:	mov	r0, #0
   1db48:	cmp	r6, #0
   1db4c:	beq	1dbc4 <__assert_fail@plt+0xb148>
   1db50:	ldr	r1, [r5]
   1db54:	ldr	r6, [r6, r1, lsl #2]
   1db58:	cmp	r6, #0
   1db5c:	popeq	{r4, r5, r6, r7, fp, pc}
   1db60:	add	r0, r1, #1
   1db64:	movw	r1, #64419	; 0xfba3
   1db68:	mov	r2, r6
   1db6c:	str	r0, [r5]
   1db70:	movw	r0, #64412	; 0xfb9c
   1db74:	movt	r1, #4
   1db78:	movt	r0, #4
   1db7c:	bl	1fd7c <__assert_fail@plt+0xd300>
   1db80:	mov	r0, r4
   1db84:	mov	r1, r6
   1db88:	bl	183ac <__assert_fail@plt+0x5930>
   1db8c:	movw	r1, #64408	; 0xfb98
   1db90:	mov	r4, r0
   1db94:	mov	r0, #0
   1db98:	strh	r0, [r4, #18]
   1db9c:	movt	r1, #4
   1dba0:	mov	r0, r6
   1dba4:	str	r6, [r4, #40]	; 0x28
   1dba8:	bl	129b0 <strpbrk@plt>
   1dbac:	cmp	r0, #0
   1dbb0:	add	r1, pc, #52	; 0x34
   1dbb4:	mov	r0, #1
   1dbb8:	addeq	r1, r1, #4
   1dbbc:	vldr	s0, [r1]
   1dbc0:	vstr	s0, [r4, #28]
   1dbc4:	pop	{r4, r5, r6, r7, fp, pc}
   1dbc8:	movw	r1, #64439	; 0xfbb7
   1dbcc:	mov	r0, #0
   1dbd0:	mov	r2, #5
   1dbd4:	movt	r1, #4
   1dbd8:	bl	1253c <dcgettext@plt>
   1dbdc:	mov	r2, r0
   1dbe0:	mov	r0, #1
   1dbe4:	mov	r1, #0
   1dbe8:	bl	12674 <error@plt>
   1dbec:	svccc	0x004ccccd
   1dbf0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1dbf4:	push	{r4, sl, fp, lr}
   1dbf8:	add	fp, sp, #8
   1dbfc:	mov	r4, r2
   1dc00:	mov	r2, r0
   1dc04:	mov	r0, r1
   1dc08:	mov	r1, r4
   1dc0c:	bl	1fc20 <__assert_fail@plt+0xd1a4>
   1dc10:	cmp	r0, #0
   1dc14:	beq	1dc3c <__assert_fail@plt+0xb1c0>
   1dc18:	movw	r2, #14269	; 0x37bd
   1dc1c:	mov	r1, r0
   1dc20:	mov	r0, #1
   1dc24:	movt	r2, #13702	; 0x3586
   1dc28:	strb	r0, [r1, #20]
   1dc2c:	str	r2, [r1, #28]
   1dc30:	mov	r2, #0
   1dc34:	strh	r2, [r1, #18]
   1dc38:	pop	{r4, sl, fp, pc}
   1dc3c:	ldr	r0, [r4]
   1dc40:	sub	r0, r0, #1
   1dc44:	str	r0, [r4]
   1dc48:	mov	r0, #0
   1dc4c:	pop	{r4, sl, fp, pc}
   1dc50:	push	{fp, lr}
   1dc54:	mov	fp, sp
   1dc58:	sub	sp, sp, #8
   1dc5c:	movw	r3, #17552	; 0x4490
   1dc60:	movt	r3, #1
   1dc64:	str	r3, [sp]
   1dc68:	movw	r3, #62510	; 0xf42e
   1dc6c:	movt	r3, #4
   1dc70:	bl	1fe30 <__assert_fail@plt+0xd3b4>
   1dc74:	mov	sp, fp
   1dc78:	pop	{fp, pc}
   1dc7c:	mov	ip, r2
   1dc80:	mov	r2, r0
   1dc84:	movw	r0, #15980	; 0x3e6c
   1dc88:	movt	r0, #6
   1dc8c:	ldr	r0, [r0, #60]	; 0x3c
   1dc90:	orr	r3, r0, #4194304	; 0x400000
   1dc94:	mov	r0, r1
   1dc98:	mov	r1, ip
   1dc9c:	b	20008 <__assert_fail@plt+0xd58c>
   1dca0:	push	{fp, lr}
   1dca4:	mov	fp, sp
   1dca8:	sub	sp, sp, #8
   1dcac:	movw	r3, #17552	; 0x4490
   1dcb0:	movt	r3, #1
   1dcb4:	str	r3, [sp]
   1dcb8:	movw	r3, #64420	; 0xfba4
   1dcbc:	movt	r3, #4
   1dcc0:	bl	1fe30 <__assert_fail@plt+0xd3b4>
   1dcc4:	mov	sp, fp
   1dcc8:	pop	{fp, pc}
   1dccc:	push	{r4, sl, fp, lr}
   1dcd0:	add	fp, sp, #8
   1dcd4:	mov	r4, r2
   1dcd8:	mov	r2, r0
   1dcdc:	mov	r0, r1
   1dce0:	mov	r1, r4
   1dce4:	bl	1fc20 <__assert_fail@plt+0xd1a4>
   1dce8:	cmp	r0, #0
   1dcec:	beq	1dd18 <__assert_fail@plt+0xb29c>
   1dcf0:	ldr	r2, [r0, #48]	; 0x30
   1dcf4:	ldr	r1, [r0, #52]	; 0x34
   1dcf8:	eor	r3, r2, #1
   1dcfc:	orrs	r3, r3, r1
   1dd00:	bne	1dd2c <__assert_fail@plt+0xb2b0>
   1dd04:	movw	r1, #28836	; 0x70a4
   1dd08:	movt	r1, #16253	; 0x3f7d
   1dd0c:	str	r1, [r0, #28]
   1dd10:	mov	r0, #1
   1dd14:	pop	{r4, sl, fp, pc}
   1dd18:	ldr	r0, [r4]
   1dd1c:	sub	r0, r0, #1
   1dd20:	str	r0, [r4]
   1dd24:	mov	r0, #0
   1dd28:	pop	{r4, sl, fp, pc}
   1dd2c:	eor	r2, r2, #2
   1dd30:	orrs	r1, r2, r1
   1dd34:	bne	1dd4c <__assert_fail@plt+0xb2d0>
   1dd38:	movw	r1, #55050	; 0xd70a
   1dd3c:	movt	r1, #15395	; 0x3c23
   1dd40:	str	r1, [r0, #28]
   1dd44:	mov	r0, #1
   1dd48:	pop	{r4, sl, fp, pc}
   1dd4c:	movw	r1, #4719	; 0x126f
   1dd50:	movt	r1, #14979	; 0x3a83
   1dd54:	str	r1, [r0, #28]
   1dd58:	mov	r0, #1
   1dd5c:	pop	{r4, sl, fp, pc}
   1dd60:	push	{r4, r5, r6, r7, fp, lr}
   1dd64:	add	fp, sp, #16
   1dd68:	movw	r7, #15576	; 0x3cd8
   1dd6c:	mov	r4, r0
   1dd70:	mov	r5, r2
   1dd74:	mov	r6, r1
   1dd78:	movt	r7, #6
   1dd7c:	ldrb	r0, [r7]
   1dd80:	cmp	r0, #0
   1dd84:	bne	1ddec <__assert_fail@plt+0xb370>
   1dd88:	movw	r0, #64431	; 0xfbaf
   1dd8c:	mov	r2, #0
   1dd90:	movt	r0, #4
   1dd94:	mov	r1, r0
   1dd98:	bl	12698 <fnmatch@plt>
   1dd9c:	cmp	r0, #0
   1dda0:	bne	1de50 <__assert_fail@plt+0xb3d4>
   1dda4:	movw	r0, #64435	; 0xfbb3
   1dda8:	movw	r1, #64431	; 0xfbaf
   1ddac:	mov	r2, #0
   1ddb0:	movt	r0, #4
   1ddb4:	movt	r1, #4
   1ddb8:	bl	12698 <fnmatch@plt>
   1ddbc:	cmp	r0, #0
   1ddc0:	beq	1de50 <__assert_fail@plt+0xb3d4>
   1ddc4:	movw	r0, #64435	; 0xfbb3
   1ddc8:	movw	r1, #64431	; 0xfbaf
   1ddcc:	mov	r2, #16
   1ddd0:	movt	r0, #4
   1ddd4:	movt	r1, #4
   1ddd8:	bl	12698 <fnmatch@plt>
   1dddc:	cmp	r0, #0
   1dde0:	bne	1de50 <__assert_fail@plt+0xb3d4>
   1dde4:	mov	r0, #1
   1dde8:	strb	r0, [r7]
   1ddec:	mov	r0, #0
   1ddf0:	cmp	r6, #0
   1ddf4:	beq	1de4c <__assert_fail@plt+0xb3d0>
   1ddf8:	ldr	r1, [r5]
   1ddfc:	ldr	r6, [r6, r1, lsl #2]
   1de00:	cmp	r6, #0
   1de04:	popeq	{r4, r5, r6, r7, fp, pc}
   1de08:	add	r0, r1, #1
   1de0c:	mov	r1, r6
   1de10:	str	r0, [r5]
   1de14:	mov	r0, r4
   1de18:	bl	183ac <__assert_fail@plt+0x5930>
   1de1c:	movw	r1, #64408	; 0xfb98
   1de20:	mov	r4, r0
   1de24:	str	r6, [r0, #40]	; 0x28
   1de28:	mov	r0, r6
   1de2c:	movt	r1, #4
   1de30:	bl	129b0 <strpbrk@plt>
   1de34:	cmp	r0, #0
   1de38:	add	r1, pc, #52	; 0x34
   1de3c:	mov	r0, #1
   1de40:	addeq	r1, r1, #4
   1de44:	vldr	s0, [r1]
   1de48:	vstr	s0, [r4, #28]
   1de4c:	pop	{r4, r5, r6, r7, fp, pc}
   1de50:	movw	r1, #64439	; 0xfbb7
   1de54:	mov	r0, #0
   1de58:	mov	r2, #5
   1de5c:	movt	r1, #4
   1de60:	bl	1253c <dcgettext@plt>
   1de64:	mov	r2, r0
   1de68:	mov	r0, #1
   1de6c:	mov	r1, #0
   1de70:	bl	12674 <error@plt>
   1de74:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1de78:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1de7c:	push	{r4, sl, fp, lr}
   1de80:	add	fp, sp, #8
   1de84:	bl	18408 <__assert_fail@plt+0x598c>
   1de88:	mov	r4, r0
   1de8c:	add	r1, r0, #40	; 0x28
   1de90:	movw	r0, #64104	; 0xfa68
   1de94:	movt	r0, #4
   1de98:	bl	1fb28 <__assert_fail@plt+0xd0ac>
   1de9c:	mov	r0, #1065353216	; 0x3f800000
   1dea0:	str	r0, [r4, #28]
   1dea4:	movw	r0, #257	; 0x101
   1dea8:	strh	r0, [r4, #16]
   1deac:	mov	r0, #1
   1deb0:	pop	{r4, sl, fp, pc}
   1deb4:	mov	r0, r1
   1deb8:	movw	r1, #15980	; 0x3e6c
   1debc:	mov	r3, r2
   1dec0:	movt	r1, #6
   1dec4:	add	r2, r1, #4
   1dec8:	mov	r1, r3
   1decc:	b	20140 <__assert_fail@plt+0xd6c4>
   1ded0:	mov	r0, r1
   1ded4:	movw	r1, #15980	; 0x3e6c
   1ded8:	mov	r3, r2
   1dedc:	movt	r1, #6
   1dee0:	add	r2, r1, #8
   1dee4:	mov	r1, r3
   1dee8:	b	20140 <__assert_fail@plt+0xd6c4>
   1deec:	nop	{0}
   1def0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1def4:	add	fp, sp, #28
   1def8:	sub	sp, sp, #28
   1defc:	mov	r4, #0
   1df00:	cmp	r1, #0
   1df04:	beq	1dfd0 <__assert_fail@plt+0xb554>
   1df08:	ldr	r9, [r2]
   1df0c:	mov	r5, r2
   1df10:	ldr	r7, [r1, r9, lsl #2]
   1df14:	cmp	r7, #0
   1df18:	beq	1dfd0 <__assert_fail@plt+0xb554>
   1df1c:	movw	sl, #15980	; 0x3e6c
   1df20:	mov	r8, r0
   1df24:	add	r0, r9, #1
   1df28:	movw	r1, #62701	; 0xf4ed
   1df2c:	vldr	d0, [pc, #188]	; 1dff0 <__assert_fail@plt+0xb574>
   1df30:	add	r6, sp, #8
   1df34:	str	r0, [r5]
   1df38:	mov	r0, #3
   1df3c:	movt	sl, #6
   1df40:	movt	r1, #4
   1df44:	str	r0, [sp, #8]
   1df48:	ldr	r0, [sl, #28]
   1df4c:	ldr	r3, [sl, #32]
   1df50:	str	r1, [sp]
   1df54:	movw	r1, #20864	; 0x5180
   1df58:	movt	r1, #1
   1df5c:	add	r2, r0, r1
   1df60:	mov	r0, r7
   1df64:	mov	r1, r6
   1df68:	bl	1f218 <__assert_fail@plt+0xc79c>
   1df6c:	cmp	r0, #0
   1df70:	beq	1dfdc <__assert_fail@plt+0xb560>
   1df74:	mov	r0, r8
   1df78:	mov	r1, r7
   1df7c:	bl	183ac <__assert_fail@plt+0x5930>
   1df80:	mov	r1, #8
   1df84:	movw	r3, #10111	; 0x277f
   1df88:	vldr	s0, [pc, #112]	; 1e000 <__assert_fail@plt+0xb584>
   1df8c:	mov	r4, #1
   1df90:	vld1.64	{d16-d17}, [r6], r1
   1df94:	add	r1, r0, #40	; 0x28
   1df98:	movt	r3, #133	; 0x85
   1df9c:	vst1.64	{d16-d17}, [r1]
   1dfa0:	ldr	r1, [r6]
   1dfa4:	ldr	r2, [sl, #28]
   1dfa8:	sub	r1, r2, r1
   1dfac:	add	r2, pc, #68	; 0x44
   1dfb0:	cmp	r1, r3
   1dfb4:	addgt	r2, r2, #4
   1dfb8:	vldr	s2, [r2]
   1dfbc:	movw	r2, #20864	; 0x5180
   1dfc0:	movt	r2, #1
   1dfc4:	cmp	r1, r2
   1dfc8:	vselge.f32	s0, s2, s0
   1dfcc:	vstr	s0, [r0, #28]
   1dfd0:	mov	r0, r4
   1dfd4:	sub	sp, fp, #28
   1dfd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfdc:	str	r9, [r5]
   1dfe0:	mov	r0, r4
   1dfe4:	sub	sp, fp, #28
   1dfe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfec:	nop	{0}
   1dff0:	andeq	r0, r0, r0
   1dff4:	submi	r0, lr, r0
   1dff8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1dffc:			; <UNDEFINED> instruction: 0x3e99999a
   1e000:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e004:	movw	r0, #15980	; 0x3e6c
   1e008:	mov	r1, #1
   1e00c:	movt	r0, #6
   1e010:	strb	r1, [r0, #13]
   1e014:	movw	r1, #15572	; 0x3cd4
   1e018:	movt	r1, #6
   1e01c:	ldr	r0, [r1]
   1e020:	cmp	r0, #0
   1e024:	bne	1e038 <__assert_fail@plt+0xb5bc>
   1e028:	movw	r0, #272	; 0x110
   1e02c:	movt	r0, #5
   1e030:	add	r0, r0, #1296	; 0x510
   1e034:	str	r0, [r1]
   1e038:	push	{fp, lr}
   1e03c:	mov	fp, sp
   1e040:	bl	18408 <__assert_fail@plt+0x598c>
   1e044:	mov	r1, #0
   1e048:	strh	r1, [r0, #18]
   1e04c:	mov	r1, #1065353216	; 0x3f800000
   1e050:	str	r1, [r0, #28]
   1e054:	mov	r0, #1
   1e058:	pop	{fp, pc}
   1e05c:	push	{r4, r5, r6, sl, fp, lr}
   1e060:	add	fp, sp, #16
   1e064:	mov	r5, r0
   1e068:	mov	r0, #0
   1e06c:	cmp	r1, #0
   1e070:	beq	1e160 <__assert_fail@plt+0xb6e4>
   1e074:	ldr	r3, [r2]
   1e078:	ldr	r4, [r1, r3, lsl #2]
   1e07c:	cmp	r4, #0
   1e080:	popeq	{r4, r5, r6, sl, fp, pc}
   1e084:	movw	r6, #15576	; 0x3cd8
   1e088:	add	r0, r3, #1
   1e08c:	str	r0, [r2]
   1e090:	movt	r6, #6
   1e094:	ldrb	r0, [r6]
   1e098:	cmp	r0, #0
   1e09c:	bne	1e104 <__assert_fail@plt+0xb688>
   1e0a0:	movw	r0, #64431	; 0xfbaf
   1e0a4:	mov	r2, #0
   1e0a8:	movt	r0, #4
   1e0ac:	mov	r1, r0
   1e0b0:	bl	12698 <fnmatch@plt>
   1e0b4:	cmp	r0, #0
   1e0b8:	bne	1e164 <__assert_fail@plt+0xb6e8>
   1e0bc:	movw	r0, #64435	; 0xfbb3
   1e0c0:	movw	r1, #64431	; 0xfbaf
   1e0c4:	mov	r2, #0
   1e0c8:	movt	r0, #4
   1e0cc:	movt	r1, #4
   1e0d0:	bl	12698 <fnmatch@plt>
   1e0d4:	cmp	r0, #0
   1e0d8:	beq	1e164 <__assert_fail@plt+0xb6e8>
   1e0dc:	movw	r0, #64435	; 0xfbb3
   1e0e0:	movw	r1, #64431	; 0xfbaf
   1e0e4:	mov	r2, #16
   1e0e8:	movt	r0, #4
   1e0ec:	movt	r1, #4
   1e0f0:	bl	12698 <fnmatch@plt>
   1e0f4:	cmp	r0, #0
   1e0f8:	bne	1e164 <__assert_fail@plt+0xb6e8>
   1e0fc:	mov	r0, #1
   1e100:	strb	r0, [r6]
   1e104:	movw	r0, #64845	; 0xfd4d
   1e108:	movw	r1, #64851	; 0xfd53
   1e10c:	mov	r2, r4
   1e110:	movt	r0, #4
   1e114:	movt	r1, #4
   1e118:	bl	1fd7c <__assert_fail@plt+0xd300>
   1e11c:	mov	r0, r5
   1e120:	mov	r1, r4
   1e124:	bl	183ac <__assert_fail@plt+0x5930>
   1e128:	movw	r1, #64408	; 0xfb98
   1e12c:	mov	r5, r0
   1e130:	mov	r0, #0
   1e134:	strh	r0, [r5, #18]
   1e138:	movt	r1, #4
   1e13c:	mov	r0, r4
   1e140:	str	r4, [r5, #40]	; 0x28
   1e144:	bl	129b0 <strpbrk@plt>
   1e148:	cmp	r0, #0
   1e14c:	add	r1, pc, #52	; 0x34
   1e150:	mov	r0, #1
   1e154:	addeq	r1, r1, #4
   1e158:	vldr	s0, [r1]
   1e15c:	vstr	s0, [r5, #28]
   1e160:	pop	{r4, r5, r6, sl, fp, pc}
   1e164:	movw	r1, #64439	; 0xfbb7
   1e168:	mov	r0, #0
   1e16c:	mov	r2, #5
   1e170:	movt	r1, #4
   1e174:	bl	1253c <dcgettext@plt>
   1e178:	mov	r2, r0
   1e17c:	mov	r0, #1
   1e180:	mov	r1, #0
   1e184:	bl	12674 <error@plt>
   1e188:	svccc	0x004ccccd
   1e18c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e190:	push	{r4, r5, r6, sl, fp, lr}
   1e194:	add	fp, sp, #16
   1e198:	sub	sp, sp, #104	; 0x68
   1e19c:	mov	r4, r0
   1e1a0:	mov	r0, sp
   1e1a4:	mov	r6, r2
   1e1a8:	mov	r5, r1
   1e1ac:	bl	18850 <__assert_fail@plt+0x5dd4>
   1e1b0:	mov	r0, #0
   1e1b4:	cmp	r5, #0
   1e1b8:	beq	1e260 <__assert_fail@plt+0xb7e4>
   1e1bc:	ldr	r1, [r6]
   1e1c0:	ldr	r5, [r5, r1, lsl #2]
   1e1c4:	cmp	r5, #0
   1e1c8:	beq	1e260 <__assert_fail@plt+0xb7e4>
   1e1cc:	add	r0, r1, #1
   1e1d0:	mov	r1, sp
   1e1d4:	str	r0, [r6]
   1e1d8:	movw	r6, #15980	; 0x3e6c
   1e1dc:	mov	r0, r5
   1e1e0:	movt	r6, #6
   1e1e4:	ldr	r2, [r6, #52]	; 0x34
   1e1e8:	blx	r2
   1e1ec:	cmp	r0, #0
   1e1f0:	bne	1e268 <__assert_fail@plt+0xb7ec>
   1e1f4:	mov	r0, r4
   1e1f8:	mov	r1, r5
   1e1fc:	bl	183ac <__assert_fail@plt+0x5930>
   1e200:	ldr	r1, [sp, #80]	; 0x50
   1e204:	ldr	r2, [sp, #84]	; 0x54
   1e208:	mov	r3, #3
   1e20c:	mov	r5, #0
   1e210:	vldr	s0, [pc, #104]	; 1e280 <__assert_fail@plt+0xb804>
   1e214:	str	r3, [r0, #40]	; 0x28
   1e218:	str	r5, [r0, #44]	; 0x2c
   1e21c:	movw	r3, #10111	; 0x277f
   1e220:	movt	r3, #133	; 0x85
   1e224:	str	r1, [r0, #48]	; 0x30
   1e228:	str	r2, [r0, #52]	; 0x34
   1e22c:	ldr	r1, [r6, #28]
   1e230:	ldr	r2, [sp, #80]	; 0x50
   1e234:	sub	r1, r1, r2
   1e238:	add	r2, pc, #56	; 0x38
   1e23c:	cmp	r1, r3
   1e240:	addgt	r2, r2, #4
   1e244:	vldr	s2, [r2]
   1e248:	movw	r2, #20864	; 0x5180
   1e24c:	movt	r2, #1
   1e250:	cmp	r1, r2
   1e254:	vselge.f32	s0, s2, s0
   1e258:	vstr	s0, [r0, #28]
   1e25c:	mov	r0, #1
   1e260:	sub	sp, fp, #16
   1e264:	pop	{r4, r5, r6, sl, fp, pc}
   1e268:	bl	127d0 <__errno_location@plt>
   1e26c:	ldr	r0, [r0]
   1e270:	mov	r1, r5
   1e274:	bl	19de0 <__assert_fail@plt+0x7364>
   1e278:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e27c:			; <UNDEFINED> instruction: 0x3e99999a
   1e280:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e284:	movw	r0, #15980	; 0x3e6c
   1e288:	mov	r1, #1
   1e28c:	movt	r0, #6
   1e290:	strb	r1, [r0, #12]
   1e294:	movw	r1, #15572	; 0x3cd4
   1e298:	movt	r1, #6
   1e29c:	ldr	r0, [r1]
   1e2a0:	cmp	r0, #0
   1e2a4:	bne	1e2b8 <__assert_fail@plt+0xb83c>
   1e2a8:	movw	r0, #272	; 0x110
   1e2ac:	movt	r0, #5
   1e2b0:	add	r0, r0, #1296	; 0x510
   1e2b4:	str	r0, [r1]
   1e2b8:	push	{fp, lr}
   1e2bc:	mov	fp, sp
   1e2c0:	bl	18408 <__assert_fail@plt+0x598c>
   1e2c4:	mov	r1, #0
   1e2c8:	strh	r1, [r0, #18]
   1e2cc:	mov	r1, #1065353216	; 0x3f800000
   1e2d0:	str	r1, [r0, #28]
   1e2d4:	mov	r0, #1
   1e2d8:	pop	{fp, pc}
   1e2dc:	push	{fp, lr}
   1e2e0:	mov	fp, sp
   1e2e4:	mov	r1, #0
   1e2e8:	bl	183ac <__assert_fail@plt+0x5930>
   1e2ec:	movw	r1, #46871	; 0xb717
   1e2f0:	movt	r1, #14545	; 0x38d1
   1e2f4:	str	r1, [r0, #28]
   1e2f8:	mov	r0, #1
   1e2fc:	pop	{fp, pc}
   1e300:	push	{fp, lr}
   1e304:	mov	fp, sp
   1e308:	bl	18408 <__assert_fail@plt+0x598c>
   1e30c:	movw	r1, #4719	; 0x126f
   1e310:	movt	r1, #14979	; 0x3a83
   1e314:	str	r1, [r0, #28]
   1e318:	mov	r0, #1
   1e31c:	pop	{fp, pc}
   1e320:	push	{r4, sl, fp, lr}
   1e324:	add	fp, sp, #8
   1e328:	movw	r0, #15980	; 0x3e6c
   1e32c:	movw	r1, #15572	; 0x3cd4
   1e330:	mov	r4, #0
   1e334:	movt	r0, #6
   1e338:	movt	r1, #6
   1e33c:	strb	r4, [r0, #14]
   1e340:	ldr	r0, [r1]
   1e344:	cmp	r0, #0
   1e348:	bne	1e35c <__assert_fail@plt+0xb8e0>
   1e34c:	movw	r0, #272	; 0x110
   1e350:	movt	r0, #5
   1e354:	add	r0, r0, #1296	; 0x510
   1e358:	str	r0, [r1]
   1e35c:	bl	18408 <__assert_fail@plt+0x598c>
   1e360:	mov	r1, #1065353216	; 0x3f800000
   1e364:	strh	r4, [r0, #18]
   1e368:	str	r1, [r0, #28]
   1e36c:	mov	r0, #1
   1e370:	pop	{r4, sl, fp, pc}
   1e374:	push	{r4, sl, fp, lr}
   1e378:	add	fp, sp, #8
   1e37c:	movw	r0, #15980	; 0x3e6c
   1e380:	movw	r1, #15572	; 0x3cd4
   1e384:	mov	r4, #0
   1e388:	movt	r0, #6
   1e38c:	movt	r1, #6
   1e390:	strb	r4, [r0, #16]
   1e394:	ldr	r0, [r1]
   1e398:	cmp	r0, #0
   1e39c:	bne	1e3b0 <__assert_fail@plt+0xb934>
   1e3a0:	movw	r0, #272	; 0x110
   1e3a4:	movt	r0, #5
   1e3a8:	add	r0, r0, #1296	; 0x510
   1e3ac:	str	r0, [r1]
   1e3b0:	bl	18408 <__assert_fail@plt+0x598c>
   1e3b4:	mov	r1, #1065353216	; 0x3f800000
   1e3b8:	strh	r4, [r0, #18]
   1e3bc:	str	r1, [r0, #28]
   1e3c0:	mov	r0, #1
   1e3c4:	pop	{r4, sl, fp, pc}
   1e3c8:	movw	r0, #15980	; 0x3e6c
   1e3cc:	mov	r1, #1
   1e3d0:	movt	r0, #6
   1e3d4:	strb	r1, [r0, #16]
   1e3d8:	movw	r1, #15572	; 0x3cd4
   1e3dc:	movt	r1, #6
   1e3e0:	ldr	r0, [r1]
   1e3e4:	cmp	r0, #0
   1e3e8:	bne	1e3fc <__assert_fail@plt+0xb980>
   1e3ec:	movw	r0, #272	; 0x110
   1e3f0:	movt	r0, #5
   1e3f4:	add	r0, r0, #1296	; 0x510
   1e3f8:	str	r0, [r1]
   1e3fc:	push	{fp, lr}
   1e400:	mov	fp, sp
   1e404:	bl	18408 <__assert_fail@plt+0x598c>
   1e408:	mov	r1, #0
   1e40c:	strh	r1, [r0, #18]
   1e410:	mov	r1, #1065353216	; 0x3f800000
   1e414:	str	r1, [r0, #28]
   1e418:	mov	r0, #1
   1e41c:	pop	{fp, pc}
   1e420:	push	{fp, lr}
   1e424:	mov	fp, sp
   1e428:	bl	17a34 <__assert_fail@plt+0x4fb8>
   1e42c:	movw	r1, #18892	; 0x49cc
   1e430:	mov	r2, #3
   1e434:	mov	r3, #2
   1e438:	movt	r1, #1
   1e43c:	str	r1, [r0]
   1e440:	mov	r1, #0
   1e444:	strd	r2, [r0, #8]
   1e448:	strh	r1, [r0, #18]
   1e44c:	mov	r0, #1
   1e450:	pop	{fp, pc}
   1e454:	mov	r3, r2
   1e458:	mov	r2, r1
   1e45c:	mov	r1, r0
   1e460:	movw	r0, #52932	; 0xcec4
   1e464:	movt	r0, #4
   1e468:	b	1f388 <__assert_fail@plt+0xc90c>
   1e46c:	mov	r3, r2
   1e470:	mov	r2, r1
   1e474:	mov	r1, r0
   1e478:	movw	r0, #50548	; 0xc574
   1e47c:	movt	r0, #4
   1e480:	b	1f388 <__assert_fail@plt+0xc90c>
   1e484:	push	{fp, lr}
   1e488:	mov	fp, sp
   1e48c:	sub	sp, sp, #8
   1e490:	movw	r3, #18968	; 0x4a18
   1e494:	movt	r3, #1
   1e498:	str	r3, [sp]
   1e49c:	movw	r3, #62511	; 0xf42f
   1e4a0:	movt	r3, #4
   1e4a4:	bl	1fe30 <__assert_fail@plt+0xd3b4>
   1e4a8:	mov	sp, fp
   1e4ac:	pop	{fp, pc}
   1e4b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4b4:	add	fp, sp, #28
   1e4b8:	sub	sp, sp, #4
   1e4bc:	vpush	{d8}
   1e4c0:	sub	sp, sp, #8
   1e4c4:	mov	r6, #0
   1e4c8:	cmp	r1, #0
   1e4cc:	beq	1e620 <__assert_fail@plt+0xbba4>
   1e4d0:	mov	r8, r0
   1e4d4:	ldr	r0, [r2]
   1e4d8:	ldr	r4, [r1, r0, lsl #2]
   1e4dc:	cmp	r4, #0
   1e4e0:	beq	1e620 <__assert_fail@plt+0xbba4>
   1e4e4:	add	r0, r0, #1
   1e4e8:	str	r0, [r2]
   1e4ec:	ldrb	r0, [r4]
   1e4f0:	cmp	r0, #45	; 0x2d
   1e4f4:	beq	1e520 <__assert_fail@plt+0xbaa4>
   1e4f8:	cmp	r0, #47	; 0x2f
   1e4fc:	bne	1e540 <__assert_fail@plt+0xbac4>
   1e500:	vldr	s16, [pc, #372]	; 1e67c <__assert_fail@plt+0xbc00>
   1e504:	mov	r0, #1
   1e508:	mov	sl, #1
   1e50c:	add	r0, r4, r0
   1e510:	bl	271c4 <__assert_fail@plt+0x14748>
   1e514:	cmp	r0, #0
   1e518:	bne	1e55c <__assert_fail@plt+0xbae0>
   1e51c:	b	1e634 <__assert_fail@plt+0xbbb8>
   1e520:	vldr	s16, [pc, #336]	; 1e678 <__assert_fail@plt+0xbbfc>
   1e524:	mov	sl, #0
   1e528:	mov	r0, #1
   1e52c:	add	r0, r4, r0
   1e530:	bl	271c4 <__assert_fail@plt+0x14748>
   1e534:	cmp	r0, #0
   1e538:	bne	1e55c <__assert_fail@plt+0xbae0>
   1e53c:	b	1e634 <__assert_fail@plt+0xbbb8>
   1e540:	vldr	s16, [pc, #312]	; 1e680 <__assert_fail@plt+0xbc04>
   1e544:	mov	sl, #2
   1e548:	mov	r0, #0
   1e54c:	add	r0, r4, r0
   1e550:	bl	271c4 <__assert_fail@plt+0x14748>
   1e554:	cmp	r0, #0
   1e558:	beq	1e634 <__assert_fail@plt+0xbbb8>
   1e55c:	mov	r7, r0
   1e560:	ldrb	r0, [r4]
   1e564:	cmp	r0, #43	; 0x2b
   1e568:	bne	1e57c <__assert_fail@plt+0xbb00>
   1e56c:	ldrb	r0, [r4, #1]
   1e570:	and	r0, r0, #248	; 0xf8
   1e574:	cmp	r0, #48	; 0x30
   1e578:	beq	1e634 <__assert_fail@plt+0xbbb8>
   1e57c:	mov	r5, #0
   1e580:	mov	r0, #0
   1e584:	mov	r1, #0
   1e588:	mov	r2, #0
   1e58c:	mov	r3, r7
   1e590:	str	r5, [sp]
   1e594:	bl	27690 <__assert_fail@plt+0x14c14>
   1e598:	mov	r9, r0
   1e59c:	mov	r0, #0
   1e5a0:	mov	r1, #1
   1e5a4:	mov	r2, #0
   1e5a8:	mov	r3, r7
   1e5ac:	str	r5, [sp]
   1e5b0:	mov	r6, #1
   1e5b4:	bl	27690 <__assert_fail@plt+0x14c14>
   1e5b8:	mov	r5, r0
   1e5bc:	mov	r0, r7
   1e5c0:	bl	32c40 <__assert_fail@plt+0x201c4>
   1e5c4:	orrs	r0, r5, r9
   1e5c8:	ldrbeq	r0, [r4]
   1e5cc:	cmpeq	r0, #47	; 0x2f
   1e5d0:	bne	1e604 <__assert_fail@plt+0xbb88>
   1e5d4:	movw	r1, #64878	; 0xfd6e
   1e5d8:	mov	r0, #0
   1e5dc:	mov	r2, #5
   1e5e0:	mov	sl, #0
   1e5e4:	movt	r1, #4
   1e5e8:	bl	1253c <dcgettext@plt>
   1e5ec:	mov	r2, r0
   1e5f0:	mov	r0, #0
   1e5f4:	mov	r1, #0
   1e5f8:	mov	r3, r4
   1e5fc:	bl	12674 <error@plt>
   1e600:	vldr	s16, [pc, #124]	; 1e684 <__assert_fail@plt+0xbc08>
   1e604:	mov	r0, r8
   1e608:	mov	r1, r4
   1e60c:	bl	183ac <__assert_fail@plt+0x5930>
   1e610:	vstr	s16, [r0, #28]
   1e614:	str	sl, [r0, #40]	; 0x28
   1e618:	str	r9, [r0, #44]	; 0x2c
   1e61c:	str	r5, [r0, #48]	; 0x30
   1e620:	mov	r0, r6
   1e624:	sub	sp, fp, #40	; 0x28
   1e628:	vpop	{d8}
   1e62c:	add	sp, sp, #4
   1e630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e634:	movw	r1, #64862	; 0xfd5e
   1e638:	mov	r0, #0
   1e63c:	mov	r2, #5
   1e640:	movt	r1, #4
   1e644:	bl	1253c <dcgettext@plt>
   1e648:	mov	r5, r0
   1e64c:	movw	r0, #15980	; 0x3e6c
   1e650:	mov	r2, r4
   1e654:	movt	r0, #6
   1e658:	ldr	r1, [r0, #72]	; 0x48
   1e65c:	mov	r0, #0
   1e660:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1e664:	mov	r3, r0
   1e668:	mov	r0, #1
   1e66c:	mov	r1, #0
   1e670:	mov	r2, r5
   1e674:	bl	12674 <error@plt>
   1e678:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1e67c:			; <UNDEFINED> instruction: 0x3e99999a
   1e680:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e684:	svccc	0x007fa440
   1e688:	push	{r4, sl, fp, lr}
   1e68c:	add	fp, sp, #8
   1e690:	mov	r1, #0
   1e694:	bl	183ac <__assert_fail@plt+0x5930>
   1e698:	mov	r4, r0
   1e69c:	add	r1, r0, #40	; 0x28
   1e6a0:	movw	r0, #64104	; 0xfa68
   1e6a4:	movt	r0, #4
   1e6a8:	bl	1fb28 <__assert_fail@plt+0xd0ac>
   1e6ac:	mov	r0, #1065353216	; 0x3f800000
   1e6b0:	str	r0, [r4, #28]
   1e6b4:	movw	r0, #257	; 0x101
   1e6b8:	str	r0, [r4, #16]
   1e6bc:	mov	r0, #1
   1e6c0:	pop	{r4, sl, fp, pc}
   1e6c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e6c8:	add	fp, sp, #24
   1e6cc:	sub	sp, sp, #24
   1e6d0:	mov	r5, r0
   1e6d4:	mov	r0, #0
   1e6d8:	cmp	r1, #0
   1e6dc:	beq	1e734 <__assert_fail@plt+0xbcb8>
   1e6e0:	ldr	r7, [r2]
   1e6e4:	mov	r4, r2
   1e6e8:	ldr	r6, [r1, r7, lsl #2]
   1e6ec:	cmp	r6, #0
   1e6f0:	beq	1e734 <__assert_fail@plt+0xbcb8>
   1e6f4:	add	r0, r7, #1
   1e6f8:	add	r8, sp, #4
   1e6fc:	str	r0, [r4]
   1e700:	movw	r0, #64104	; 0xfa68
   1e704:	mov	r1, r8
   1e708:	movt	r0, #4
   1e70c:	bl	1fb28 <__assert_fail@plt+0xd0ac>
   1e710:	mov	r0, r8
   1e714:	mov	r1, r5
   1e718:	mov	r2, r6
   1e71c:	bl	1a574 <__assert_fail@plt+0x7af8>
   1e720:	mov	r1, r0
   1e724:	mov	r0, #1
   1e728:	cmp	r1, #0
   1e72c:	moveq	r0, #0
   1e730:	streq	r7, [r4]
   1e734:	sub	sp, fp, #24
   1e738:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e73c:	push	{fp, lr}
   1e740:	mov	fp, sp
   1e744:	bl	18408 <__assert_fail@plt+0x598c>
   1e748:	movw	r1, #15980	; 0x3e6c
   1e74c:	movt	r1, #6
   1e750:	ldrb	r1, [r1]
   1e754:	cmp	r1, #0
   1e758:	moveq	r1, #0
   1e75c:	strheq	r1, [r0, #18]
   1e760:	mov	r1, #1
   1e764:	strh	r1, [r0, #16]
   1e768:	mov	r0, #1
   1e76c:	pop	{fp, pc}
   1e770:	push	{fp, lr}
   1e774:	mov	fp, sp
   1e778:	bl	18408 <__assert_fail@plt+0x598c>
   1e77c:	mov	r1, #1
   1e780:	str	r1, [r0, #16]
   1e784:	mov	r1, #1065353216	; 0x3f800000
   1e788:	str	r1, [r0, #28]
   1e78c:	mov	r0, #1
   1e790:	pop	{fp, pc}
   1e794:	mov	ip, r2
   1e798:	mov	r2, r0
   1e79c:	movw	r0, #15980	; 0x3e6c
   1e7a0:	movt	r0, #6
   1e7a4:	ldr	r3, [r0, #60]	; 0x3c
   1e7a8:	mov	r0, r1
   1e7ac:	mov	r1, ip
   1e7b0:	b	20008 <__assert_fail@plt+0xd58c>
   1e7b4:	mov	r0, #0
   1e7b8:	cmp	r1, #0
   1e7bc:	beq	1e834 <__assert_fail@plt+0xbdb8>
   1e7c0:	ldr	r3, [r2]
   1e7c4:	ldr	r1, [r1, r3, lsl #2]
   1e7c8:	cmp	r1, #0
   1e7cc:	bxeq	lr
   1e7d0:	push	{fp, lr}
   1e7d4:	mov	fp, sp
   1e7d8:	add	r0, r3, #1
   1e7dc:	str	r0, [r2]
   1e7e0:	mov	r0, r1
   1e7e4:	bl	2285c <__assert_fail@plt+0xfde0>
   1e7e8:	movw	r1, #15980	; 0x3e6c
   1e7ec:	movt	r1, #6
   1e7f0:	str	r0, [r1, #60]	; 0x3c
   1e7f4:	movw	r1, #15572	; 0x3cd4
   1e7f8:	movt	r1, #6
   1e7fc:	ldr	r0, [r1]
   1e800:	cmp	r0, #0
   1e804:	bne	1e818 <__assert_fail@plt+0xbd9c>
   1e808:	movw	r0, #272	; 0x110
   1e80c:	movt	r0, #5
   1e810:	add	r0, r0, #1296	; 0x510
   1e814:	str	r0, [r1]
   1e818:	bl	18408 <__assert_fail@plt+0x598c>
   1e81c:	mov	r1, #0
   1e820:	strh	r1, [r0, #18]
   1e824:	mov	r1, #1065353216	; 0x3f800000
   1e828:	str	r1, [r0, #28]
   1e82c:	mov	r0, #1
   1e830:	pop	{fp, lr}
   1e834:	bx	lr
   1e838:	push	{r4, r5, r6, r7, fp, lr}
   1e83c:	add	fp, sp, #16
   1e840:	sub	sp, sp, #208	; 0xd0
   1e844:	mov	r5, r0
   1e848:	add	r0, sp, #104	; 0x68
   1e84c:	mov	r6, r2
   1e850:	mov	r4, r1
   1e854:	bl	18850 <__assert_fail@plt+0x5dd4>
   1e858:	mov	r0, #0
   1e85c:	cmp	r4, #0
   1e860:	beq	1e9e4 <__assert_fail@plt+0xbf68>
   1e864:	ldr	r1, [r6]
   1e868:	ldr	r4, [r4, r1, lsl #2]
   1e86c:	cmp	r4, #0
   1e870:	beq	1e9e4 <__assert_fail@plt+0xbf68>
   1e874:	add	r0, r1, #1
   1e878:	movw	r7, #15980	; 0x3e6c
   1e87c:	add	r1, sp, #104	; 0x68
   1e880:	str	r0, [r6]
   1e884:	movt	r7, #6
   1e888:	mov	r0, r4
   1e88c:	ldr	r2, [r7, #52]	; 0x34
   1e890:	blx	r2
   1e894:	cmp	r0, #0
   1e898:	bne	1e9ec <__assert_fail@plt+0xbf70>
   1e89c:	mov	r0, sp
   1e8a0:	bl	18850 <__assert_fail@plt+0x5dd4>
   1e8a4:	ldr	r0, [r7, #48]	; 0x30
   1e8a8:	mov	r1, #0
   1e8ac:	cmp	r0, #0
   1e8b0:	bne	1e8dc <__assert_fail@plt+0xbe60>
   1e8b4:	ldrb	r0, [r7, #56]	; 0x38
   1e8b8:	mov	r1, #32768	; 0x8000
   1e8bc:	cmp	r0, #0
   1e8c0:	bne	1e8dc <__assert_fail@plt+0xbe60>
   1e8c4:	ldr	r0, [sp, #120]	; 0x78
   1e8c8:	mvn	r6, #1
   1e8cc:	mov	r1, #0
   1e8d0:	and	r0, r0, #61440	; 0xf000
   1e8d4:	cmp	r0, #40960	; 0xa000
   1e8d8:	beq	1e9a0 <__assert_fail@plt+0xbf24>
   1e8dc:	mov	r0, r4
   1e8e0:	bl	21718 <__assert_fail@plt+0xec9c>
   1e8e4:	mov	r6, r0
   1e8e8:	cmp	r0, #0
   1e8ec:	blt	1e9a0 <__assert_fail@plt+0xbf24>
   1e8f0:	mov	r2, sp
   1e8f4:	mov	r0, #3
   1e8f8:	mov	r1, r6
   1e8fc:	bl	125e4 <__fxstat64@plt>
   1e900:	cmp	r0, #0
   1e904:	bne	1e9ec <__assert_fail@plt+0xbf70>
   1e908:	ldr	r2, [r7, #52]	; 0x34
   1e90c:	add	r1, sp, #104	; 0x68
   1e910:	mov	r0, r4
   1e914:	blx	r2
   1e918:	cmp	r0, #0
   1e91c:	bne	1e9ec <__assert_fail@plt+0xbf70>
   1e920:	ldr	r0, [r7, #48]	; 0x30
   1e924:	cmp	r0, #0
   1e928:	ldrbeq	r0, [r7, #56]	; 0x38
   1e92c:	cmpeq	r0, #0
   1e930:	beq	1e948 <__assert_fail@plt+0xbecc>
   1e934:	add	r0, sp, #104	; 0x68
   1e938:	mov	r1, sp
   1e93c:	mov	r2, #104	; 0x68
   1e940:	bl	124b8 <memcpy@plt>
   1e944:	b	1e9a0 <__assert_fail@plt+0xbf24>
   1e948:	ldr	r0, [sp, #120]	; 0x78
   1e94c:	and	r0, r0, #61440	; 0xf000
   1e950:	cmp	r0, #40960	; 0xa000
   1e954:	beq	1e994 <__assert_fail@plt+0xbf18>
   1e958:	ldm	sp, {r0, r1}
   1e95c:	ldr	r2, [sp, #104]	; 0x68
   1e960:	ldr	r3, [sp, #108]	; 0x6c
   1e964:	eor	r1, r3, r1
   1e968:	eor	r0, r2, r0
   1e96c:	orrs	r0, r0, r1
   1e970:	bne	1e994 <__assert_fail@plt+0xbf18>
   1e974:	ldr	r0, [sp, #96]	; 0x60
   1e978:	ldr	r2, [sp, #200]	; 0xc8
   1e97c:	ldr	r1, [sp, #100]	; 0x64
   1e980:	ldr	r3, [sp, #204]	; 0xcc
   1e984:	eor	r1, r3, r1
   1e988:	eor	r0, r2, r0
   1e98c:	orrs	r0, r0, r1
   1e990:	beq	1e9a0 <__assert_fail@plt+0xbf24>
   1e994:	mov	r0, r6
   1e998:	bl	12a34 <close@plt>
   1e99c:	mvn	r6, #0
   1e9a0:	mov	r0, r5
   1e9a4:	mov	r1, r4
   1e9a8:	bl	183ac <__assert_fail@plt+0x5930>
   1e9ac:	ldr	r2, [sp, #200]	; 0xc8
   1e9b0:	ldr	r3, [sp, #204]	; 0xcc
   1e9b4:	ldr	r7, [sp, #104]	; 0x68
   1e9b8:	ldr	r5, [sp, #108]	; 0x6c
   1e9bc:	mov	r1, r0
   1e9c0:	movw	r4, #55050	; 0xd70a
   1e9c4:	mov	r0, #1
   1e9c8:	movt	r4, #15395	; 0x3c23
   1e9cc:	add	ip, r1, #40	; 0x28
   1e9d0:	strh	r0, [r1, #18]
   1e9d4:	str	r4, [r1, #28]
   1e9d8:	stm	ip, {r2, r3, r7}
   1e9dc:	str	r5, [r1, #52]	; 0x34
   1e9e0:	str	r6, [r1, #56]	; 0x38
   1e9e4:	sub	sp, fp, #16
   1e9e8:	pop	{r4, r5, r6, r7, fp, pc}
   1e9ec:	bl	127d0 <__errno_location@plt>
   1e9f0:	ldr	r0, [r0]
   1e9f4:	mov	r1, r4
   1e9f8:	bl	19de0 <__assert_fail@plt+0x7364>
   1e9fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea00:	add	fp, sp, #28
   1ea04:	sub	sp, sp, #20
   1ea08:	mov	r8, r0
   1ea0c:	mov	r0, #0
   1ea10:	cmp	r1, #0
   1ea14:	beq	1ec74 <__assert_fail@plt+0xc1f8>
   1ea18:	mov	r7, r1
   1ea1c:	ldr	r1, [r2]
   1ea20:	mov	r4, r2
   1ea24:	ldr	r5, [r7, r1, lsl #2]
   1ea28:	cmp	r5, #0
   1ea2c:	beq	1ec74 <__assert_fail@plt+0xc1f8>
   1ea30:	mov	r0, r5
   1ea34:	bl	12788 <strlen@plt>
   1ea38:	cmp	r0, #0
   1ea3c:	beq	1ed48 <__assert_fail@plt+0xc2cc>
   1ea40:	sub	r6, r0, #1
   1ea44:	ldrb	r0, [r5, r6]
   1ea48:	sub	r0, r0, #48	; 0x30
   1ea4c:	cmp	r0, #71	; 0x47
   1ea50:	bhi	1ed18 <__assert_fail@plt+0xc29c>
   1ea54:	add	r1, pc, #8
   1ea58:	mov	sl, #512	; 0x200
   1ea5c:	mov	r9, #0
   1ea60:	ldr	pc, [r1, r0, lsl #2]
   1ea64:	andeq	lr, r1, r4, lsl #23
   1ea68:	andeq	lr, r1, r4, lsl #23
   1ea6c:	andeq	lr, r1, r4, lsl #23
   1ea70:	andeq	lr, r1, r4, lsl #23
   1ea74:	andeq	lr, r1, r4, lsl #23
   1ea78:	andeq	lr, r1, r4, lsl #23
   1ea7c:	andeq	lr, r1, r4, lsl #23
   1ea80:	andeq	lr, r1, r4, lsl #23
   1ea84:	andeq	lr, r1, r4, lsl #23
   1ea88:	andeq	lr, r1, r4, lsl #23
   1ea8c:	andeq	lr, r1, r8, lsl sp
   1ea90:	andeq	lr, r1, r8, lsl sp
   1ea94:	andeq	lr, r1, r8, lsl sp
   1ea98:	andeq	lr, r1, r8, lsl sp
   1ea9c:	andeq	lr, r1, r8, lsl sp
   1eaa0:	andeq	lr, r1, r8, lsl sp
   1eaa4:	andeq	lr, r1, r8, lsl sp
   1eaa8:	andeq	lr, r1, r8, lsl sp
   1eaac:	andeq	lr, r1, r8, lsl sp
   1eab0:	andeq	lr, r1, r8, lsl sp
   1eab4:	andeq	lr, r1, r8, lsl sp
   1eab8:	andeq	lr, r1, r8, lsl sp
   1eabc:	andeq	lr, r1, r8, lsl sp
   1eac0:			; <UNDEFINED> instruction: 0x0001ecb8
   1eac4:	andeq	lr, r1, r8, lsl sp
   1eac8:	andeq	lr, r1, r8, lsl sp
   1eacc:	andeq	lr, r1, r8, lsl sp
   1ead0:	andeq	lr, r1, r8, lsl sp
   1ead4:	andeq	lr, r1, r8, lsl sp
   1ead8:	andeq	lr, r1, r8, lsr #23
   1eadc:	andeq	lr, r1, r8, lsl sp
   1eae0:	andeq	lr, r1, r8, lsl sp
   1eae4:	andeq	lr, r1, r8, lsl sp
   1eae8:	andeq	lr, r1, r8, lsl sp
   1eaec:	andeq	lr, r1, r8, lsl sp
   1eaf0:	andeq	lr, r1, r8, lsl sp
   1eaf4:	andeq	lr, r1, r8, lsl sp
   1eaf8:	andeq	lr, r1, r8, lsl sp
   1eafc:	andeq	lr, r1, r8, lsl sp
   1eb00:	andeq	lr, r1, r8, lsl sp
   1eb04:	andeq	lr, r1, r8, lsl sp
   1eb08:	andeq	lr, r1, r8, lsl sp
   1eb0c:	andeq	lr, r1, r8, lsl sp
   1eb10:	andeq	lr, r1, r8, lsl sp
   1eb14:	andeq	lr, r1, r8, lsl sp
   1eb18:	andeq	lr, r1, r8, lsl sp
   1eb1c:	andeq	lr, r1, r8, lsl sp
   1eb20:	andeq	lr, r1, r8, lsl sp
   1eb24:	andeq	lr, r1, r8, lsl sp
   1eb28:	andeq	lr, r1, r8, lsl sp
   1eb2c:	andeq	lr, r1, ip, ror ip
   1eb30:	ldrdeq	lr, [r1], -r8
   1eb34:	andeq	lr, r1, r8, lsl sp
   1eb38:	andeq	lr, r1, r8, lsl sp
   1eb3c:	andeq	lr, r1, r8, lsl sp
   1eb40:	andeq	lr, r1, r8, lsl sp
   1eb44:	andeq	lr, r1, r8, lsl sp
   1eb48:	andeq	lr, r1, r8, lsl sp
   1eb4c:	andeq	lr, r1, r8, lsl sp
   1eb50:	strdeq	lr, [r1], -r8
   1eb54:	andeq	lr, r1, r8, lsl sp
   1eb58:	andeq	lr, r1, r8, lsl sp
   1eb5c:	andeq	lr, r1, r8, lsl sp
   1eb60:	andeq	lr, r1, r8, lsl sp
   1eb64:	andeq	lr, r1, r8, lsl sp
   1eb68:	andeq	lr, r1, r8, lsl sp
   1eb6c:	andeq	lr, r1, r8, lsl sp
   1eb70:	andeq	lr, r1, r8, lsl sp
   1eb74:	andeq	lr, r1, r8, lsl sp
   1eb78:	andeq	lr, r1, r8, lsl sp
   1eb7c:	andeq	lr, r1, r8, lsl sp
   1eb80:	muleq	r1, r8, ip
   1eb84:	ldrb	r0, [r5]
   1eb88:	cmp	r0, #45	; 0x2d
   1eb8c:	beq	1ebc4 <__assert_fail@plt+0xc148>
   1eb90:	cmp	r0, #43	; 0x2b
   1eb94:	mov	r7, #2
   1eb98:	mov	r0, r5
   1eb9c:	addeq	r0, r5, #1
   1eba0:	moveq	r7, #0
   1eba4:	b	1ebcc <__assert_fail@plt+0xc150>
   1eba8:	mov	r0, #0
   1ebac:	mov	sl, #1048576	; 0x100000
   1ebb0:	mov	r9, #77	; 0x4d
   1ebb4:	strb	r0, [r5, r6]
   1ebb8:	ldrb	r0, [r5]
   1ebbc:	cmp	r0, #45	; 0x2d
   1ebc0:	bne	1eb90 <__assert_fail@plt+0xc114>
   1ebc4:	add	r0, r5, #1
   1ebc8:	mov	r7, #1
   1ebcc:	movw	r1, #58175	; 0xe33f
   1ebd0:	add	r3, sp, #8
   1ebd4:	mov	r2, #10
   1ebd8:	movt	r1, #4
   1ebdc:	str	r1, [sp]
   1ebe0:	add	r1, sp, #16
   1ebe4:	bl	318b0 <__assert_fail@plt+0x1ee34>
   1ebe8:	cmp	r0, #0
   1ebec:	bne	1ed6c <__assert_fail@plt+0xc2f0>
   1ebf0:	mov	r0, r8
   1ebf4:	mov	r1, r5
   1ebf8:	bl	183ac <__assert_fail@plt+0x5930>
   1ebfc:	ldr	r2, [sp, #8]
   1ec00:	ldr	r1, [sp, #12]
   1ec04:	mov	r3, #1
   1ec08:	cmp	r7, #1
   1ec0c:	strh	r3, [r0, #18]
   1ec10:	str	r7, [r0, #40]	; 0x28
   1ec14:	str	sl, [r0, #44]	; 0x2c
   1ec18:	str	r2, [r0, #48]	; 0x30
   1ec1c:	str	r1, [r0, #52]	; 0x34
   1ec20:	beq	1ec3c <__assert_fail@plt+0xc1c0>
   1ec24:	cmp	r7, #0
   1ec28:	bne	1ec5c <__assert_fail@plt+0xc1e0>
   1ec2c:	umull	r2, r3, r2, sl
   1ec30:	mla	r1, r1, sl, r3
   1ec34:	add	r3, pc, #376	; 0x178
   1ec38:	b	1ec48 <__assert_fail@plt+0xc1cc>
   1ec3c:	umull	r2, r3, r2, sl
   1ec40:	mla	r1, r1, sl, r3
   1ec44:	add	r3, pc, #352	; 0x160
   1ec48:	rsbs	r2, r2, #20480	; 0x5000
   1ec4c:	rscs	r1, r1, #0
   1ec50:	addcc	r3, r3, #4
   1ec54:	vldr	s0, [r3]
   1ec58:	b	1ec60 <__assert_fail@plt+0xc1e4>
   1ec5c:	vldr	s0, [pc, #324]	; 1eda8 <__assert_fail@plt+0xc32c>
   1ec60:	vstr	s0, [r0, #28]
   1ec64:	ldr	r0, [r4]
   1ec68:	add	r0, r0, #1
   1ec6c:	str	r0, [r4]
   1ec70:	mov	r0, #1
   1ec74:	sub	sp, fp, #28
   1ec78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec7c:	mov	r0, #0
   1ec80:	mov	r9, #98	; 0x62
   1ec84:	strb	r0, [r5, r6]
   1ec88:	ldrb	r0, [r5]
   1ec8c:	cmp	r0, #45	; 0x2d
   1ec90:	bne	1eb90 <__assert_fail@plt+0xc114>
   1ec94:	b	1ebc4 <__assert_fail@plt+0xc148>
   1ec98:	mov	r0, #0
   1ec9c:	mov	sl, #2
   1eca0:	mov	r9, #119	; 0x77
   1eca4:	strb	r0, [r5, r6]
   1eca8:	ldrb	r0, [r5]
   1ecac:	cmp	r0, #45	; 0x2d
   1ecb0:	bne	1eb90 <__assert_fail@plt+0xc114>
   1ecb4:	b	1ebc4 <__assert_fail@plt+0xc148>
   1ecb8:	mov	r0, #0
   1ecbc:	mov	sl, #1073741824	; 0x40000000
   1ecc0:	mov	r9, #71	; 0x47
   1ecc4:	strb	r0, [r5, r6]
   1ecc8:	ldrb	r0, [r5]
   1eccc:	cmp	r0, #45	; 0x2d
   1ecd0:	bne	1eb90 <__assert_fail@plt+0xc114>
   1ecd4:	b	1ebc4 <__assert_fail@plt+0xc148>
   1ecd8:	mov	r0, #0
   1ecdc:	mov	sl, #1
   1ece0:	mov	r9, #99	; 0x63
   1ece4:	strb	r0, [r5, r6]
   1ece8:	ldrb	r0, [r5]
   1ecec:	cmp	r0, #45	; 0x2d
   1ecf0:	bne	1eb90 <__assert_fail@plt+0xc114>
   1ecf4:	b	1ebc4 <__assert_fail@plt+0xc148>
   1ecf8:	mov	r0, #0
   1ecfc:	mov	sl, #1024	; 0x400
   1ed00:	mov	r9, #107	; 0x6b
   1ed04:	strb	r0, [r5, r6]
   1ed08:	ldrb	r0, [r5]
   1ed0c:	cmp	r0, #45	; 0x2d
   1ed10:	bne	1eb90 <__assert_fail@plt+0xc114>
   1ed14:	b	1ebc4 <__assert_fail@plt+0xc148>
   1ed18:	movw	r1, #65135	; 0xfe6f
   1ed1c:	mov	r0, #0
   1ed20:	mov	r2, #5
   1ed24:	movt	r1, #4
   1ed28:	bl	1253c <dcgettext@plt>
   1ed2c:	mov	r2, r0
   1ed30:	ldr	r0, [r4]
   1ed34:	mov	r1, #0
   1ed38:	ldr	r0, [r7, r0, lsl #2]
   1ed3c:	ldrb	r3, [r0, r6]
   1ed40:	mov	r0, #1
   1ed44:	bl	12674 <error@plt>
   1ed48:	movw	r1, #65104	; 0xfe50
   1ed4c:	mov	r0, #0
   1ed50:	mov	r2, #5
   1ed54:	movt	r1, #4
   1ed58:	bl	1253c <dcgettext@plt>
   1ed5c:	mov	r2, r0
   1ed60:	mov	r0, #1
   1ed64:	mov	r1, #0
   1ed68:	bl	12674 <error@plt>
   1ed6c:	movw	r1, #65159	; 0xfe87
   1ed70:	mov	r0, #0
   1ed74:	mov	r2, #5
   1ed78:	strb	r0, [sp, #7]
   1ed7c:	movt	r1, #4
   1ed80:	mov	r0, #0
   1ed84:	strb	r9, [sp, #6]
   1ed88:	bl	1253c <dcgettext@plt>
   1ed8c:	mov	r2, r0
   1ed90:	add	r0, sp, #6
   1ed94:	mov	r1, #0
   1ed98:	mov	r3, r5
   1ed9c:	str	r0, [sp]
   1eda0:	mov	r0, #1
   1eda4:	bl	12674 <error@plt>
   1eda8:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1edac:	stclcc	12, cr12, [ip, #820]	; 0x334
   1edb0:	svccc	0x00666666
   1edb4:	svccc	0x00666666
   1edb8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1edbc:	movw	r3, #19976	; 0x4e08
   1edc0:	mov	ip, r2
   1edc4:	mov	r2, r0
   1edc8:	mov	r0, r1
   1edcc:	movt	r3, #1
   1edd0:	mov	r1, ip
   1edd4:	b	20250 <__assert_fail@plt+0xd7d4>
   1edd8:	push	{r4, sl, fp, lr}
   1eddc:	add	fp, sp, #8
   1ede0:	mov	r4, r2
   1ede4:	mov	r2, r0
   1ede8:	mov	r0, r1
   1edec:	mov	r1, r4
   1edf0:	bl	1fc20 <__assert_fail@plt+0xd1a4>
   1edf4:	cmp	r0, #0
   1edf8:	beq	1ee20 <__assert_fail@plt+0xc3a4>
   1edfc:	add	r1, pc, #48	; 0x30
   1ee00:	ldrd	r2, [r0, #48]	; 0x30
   1ee04:	subs	r2, r2, #100	; 0x64
   1ee08:	sbcs	r2, r3, #0
   1ee0c:	addcc	r1, r1, #4
   1ee10:	vldr	s0, [r1]
   1ee14:	vstr	s0, [r0, #28]
   1ee18:	mov	r0, #1
   1ee1c:	pop	{r4, sl, fp, pc}
   1ee20:	ldr	r0, [r4]
   1ee24:	sub	r0, r0, #1
   1ee28:	str	r0, [r4]
   1ee2c:	mov	r0, #0
   1ee30:	pop	{r4, sl, fp, pc}
   1ee34:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1ee38:	svccc	0x007d70a4
   1ee3c:	nop	{0}
   1ee40:	push	{r4, r5, r6, sl, fp, lr}
   1ee44:	add	fp, sp, #16
   1ee48:	sub	sp, sp, #24
   1ee4c:	mov	r5, r0
   1ee50:	mov	r0, #0
   1ee54:	cmp	r1, #0
   1ee58:	beq	1eef8 <__assert_fail@plt+0xc47c>
   1ee5c:	ldr	r3, [r2]
   1ee60:	ldr	r4, [r1, r3, lsl #2]
   1ee64:	cmp	r4, #0
   1ee68:	beq	1eef8 <__assert_fail@plt+0xc47c>
   1ee6c:	add	r0, r3, #1
   1ee70:	vldr	d0, [pc, #176]	; 1ef28 <__assert_fail@plt+0xc4ac>
   1ee74:	add	r6, sp, #8
   1ee78:	mov	r3, #0
   1ee7c:	str	r0, [r2]
   1ee80:	movw	r0, #62899	; 0xf5b3
   1ee84:	mov	r1, r6
   1ee88:	mov	r2, #0
   1ee8c:	movt	r0, #4
   1ee90:	str	r0, [sp]
   1ee94:	mov	r0, r4
   1ee98:	bl	1f218 <__assert_fail@plt+0xc79c>
   1ee9c:	cmp	r0, #0
   1eea0:	beq	1ef00 <__assert_fail@plt+0xc484>
   1eea4:	mov	r0, r5
   1eea8:	mov	r1, r4
   1eeac:	bl	183ac <__assert_fail@plt+0x5930>
   1eeb0:	mov	r1, #8
   1eeb4:	movw	r3, #10111	; 0x277f
   1eeb8:	vldr	s0, [pc, #120]	; 1ef38 <__assert_fail@plt+0xc4bc>
   1eebc:	vld1.64	{d16-d17}, [r6], r1
   1eec0:	add	r1, r0, #40	; 0x28
   1eec4:	movt	r3, #133	; 0x85
   1eec8:	vst1.64	{d16-d17}, [r1]
   1eecc:	ldr	r1, [r6]
   1eed0:	add	r2, pc, #88	; 0x58
   1eed4:	cmp	r1, r3
   1eed8:	addgt	r2, r2, #4
   1eedc:	vldr	s2, [r2]
   1eee0:	movw	r2, #20864	; 0x5180
   1eee4:	movt	r2, #1
   1eee8:	cmp	r1, r2
   1eeec:	vselge.f32	s0, s2, s0
   1eef0:	vstr	s0, [r0, #28]
   1eef4:	mov	r0, #1
   1eef8:	sub	sp, fp, #16
   1eefc:	pop	{r4, r5, r6, sl, fp, pc}
   1ef00:	movw	r1, #30
   1ef04:	mov	r0, #0
   1ef08:	mov	r2, #5
   1ef0c:	movt	r1, #5
   1ef10:	bl	1253c <dcgettext@plt>
   1ef14:	mov	r2, r0
   1ef18:	mov	r0, #1
   1ef1c:	mov	r1, #0
   1ef20:	mov	r3, r4
   1ef24:	bl	12674 <error@plt>
   1ef28:	andeq	r0, r0, r0
   1ef2c:	rscsmi	r1, r5, r0, lsl #16
   1ef30:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1ef34:			; <UNDEFINED> instruction: 0x3e99999a
   1ef38:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ef3c:	push	{r4, r5, r6, sl, fp, lr}
   1ef40:	add	fp, sp, #16
   1ef44:	vpush	{d8}
   1ef48:	mov	r5, r0
   1ef4c:	mov	r0, #0
   1ef50:	cmp	r1, #0
   1ef54:	beq	1eff4 <__assert_fail@plt+0xc578>
   1ef58:	ldr	r3, [r2]
   1ef5c:	ldr	r4, [r1, r3, lsl #2]
   1ef60:	cmp	r4, #0
   1ef64:	beq	1eff4 <__assert_fail@plt+0xc578>
   1ef68:	add	r0, r3, #1
   1ef6c:	str	r0, [r2]
   1ef70:	mov	r0, r4
   1ef74:	bl	123b0 <getpwnam@plt>
   1ef78:	mov	r6, r0
   1ef7c:	bl	128e4 <endpwent@plt>
   1ef80:	cmp	r6, #0
   1ef84:	beq	1ef90 <__assert_fail@plt+0xc514>
   1ef88:	ldr	r6, [r6, #8]
   1ef8c:	b	1efcc <__assert_fail@plt+0xc550>
   1ef90:	movw	r1, #64176	; 0xfab0
   1ef94:	mov	r0, r4
   1ef98:	movt	r1, #4
   1ef9c:	bl	12a70 <strspn@plt>
   1efa0:	cmp	r0, #0
   1efa4:	beq	1effc <__assert_fail@plt+0xc580>
   1efa8:	ldrb	r0, [r4, r0]
   1efac:	cmp	r0, #0
   1efb0:	bne	1effc <__assert_fail@plt+0xc580>
   1efb4:	movw	r0, #15980	; 0x3e6c
   1efb8:	movt	r0, #6
   1efbc:	ldr	r1, [r0, #72]	; 0x48
   1efc0:	mov	r0, r4
   1efc4:	bl	22f50 <__assert_fail@plt+0x104d4>
   1efc8:	mov	r6, r0
   1efcc:	add	r0, pc, #156	; 0x9c
   1efd0:	cmp	r6, #100	; 0x64
   1efd4:	mov	r1, r4
   1efd8:	addcc	r0, r0, #4
   1efdc:	vldr	s16, [r0]
   1efe0:	mov	r0, r5
   1efe4:	bl	183ac <__assert_fail@plt+0x5930>
   1efe8:	str	r6, [r0, #40]	; 0x28
   1efec:	vstr	s16, [r0, #28]
   1eff0:	mov	r0, #1
   1eff4:	vpop	{d8}
   1eff8:	pop	{r4, r5, r6, sl, fp, pc}
   1effc:	ldrb	r0, [r4]
   1f000:	cmp	r0, #0
   1f004:	bne	1f02c <__assert_fail@plt+0xc5b0>
   1f008:	movw	r1, #94	; 0x5e
   1f00c:	mov	r0, #0
   1f010:	mov	r2, #5
   1f014:	movt	r1, #5
   1f018:	bl	1253c <dcgettext@plt>
   1f01c:	mov	r2, r0
   1f020:	mov	r0, #1
   1f024:	mov	r1, #0
   1f028:	bl	12674 <error@plt>
   1f02c:	movw	r1, #59	; 0x3b
   1f030:	mov	r0, #0
   1f034:	mov	r2, #5
   1f038:	movt	r1, #5
   1f03c:	bl	1253c <dcgettext@plt>
   1f040:	mov	r5, r0
   1f044:	movw	r0, #15980	; 0x3e6c
   1f048:	mov	r2, r4
   1f04c:	movt	r0, #6
   1f050:	ldr	r1, [r0, #72]	; 0x48
   1f054:	mov	r0, #0
   1f058:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1f05c:	mov	r3, r0
   1f060:	mov	r0, #1
   1f064:	mov	r1, #0
   1f068:	mov	r2, r5
   1f06c:	bl	12674 <error@plt>
   1f070:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1f074:	svccc	0x007d70a4
   1f078:	push	{fp, lr}
   1f07c:	mov	fp, sp
   1f080:	sub	sp, sp, #8
   1f084:	movw	r3, #18968	; 0x4a18
   1f088:	movt	r3, #1
   1f08c:	str	r3, [sp]
   1f090:	movw	r3, #64852	; 0xfd54
   1f094:	movt	r3, #4
   1f098:	bl	1fe30 <__assert_fail@plt+0xd3b4>
   1f09c:	mov	sp, fp
   1f0a0:	pop	{fp, pc}
   1f0a4:	movw	r3, #20424	; 0x4fc8
   1f0a8:	mov	ip, r2
   1f0ac:	mov	r2, r0
   1f0b0:	mov	r0, r1
   1f0b4:	movt	r3, #1
   1f0b8:	mov	r1, ip
   1f0bc:	b	20250 <__assert_fail@plt+0xd7d4>
   1f0c0:	push	{fp, lr}
   1f0c4:	mov	fp, sp
   1f0c8:	movw	r0, #62668	; 0xf4cc
   1f0cc:	movt	r0, #4
   1f0d0:	bl	1c454 <__assert_fail@plt+0x99d8>
   1f0d4:	bl	18408 <__assert_fail@plt+0x598c>
   1f0d8:	mov	r1, #0
   1f0dc:	str	r1, [r0, #28]
   1f0e0:	str	r1, [r0, #16]
   1f0e4:	mov	r0, #1
   1f0e8:	pop	{fp, pc}
   1f0ec:	push	{fp, lr}
   1f0f0:	mov	fp, sp
   1f0f4:	bl	18408 <__assert_fail@plt+0x598c>
   1f0f8:	mov	r1, #0
   1f0fc:	strh	r1, [r0, #18]
   1f100:	mov	r1, #1065353216	; 0x3f800000
   1f104:	str	r1, [r0, #28]
   1f108:	mov	r0, #1
   1f10c:	pop	{fp, pc}
   1f110:	push	{fp, lr}
   1f114:	mov	fp, sp
   1f118:	mov	r0, #0
   1f11c:	bl	18464 <__assert_fail@plt+0x59e8>
   1f120:	push	{fp, lr}
   1f124:	mov	fp, sp
   1f128:	sub	sp, sp, #8
   1f12c:	movw	r0, #50276	; 0xc464
   1f130:	movt	r0, #4
   1f134:	bl	219d4 <__assert_fail@plt+0xef58>
   1f138:	movw	r1, #136	; 0x88
   1f13c:	mov	r0, #0
   1f140:	mov	r2, #5
   1f144:	mov	r5, #0
   1f148:	movt	r1, #5
   1f14c:	bl	1253c <dcgettext@plt>
   1f150:	bl	123f8 <printf@plt>
   1f154:	movw	r0, #155	; 0x9b
   1f158:	movt	r0, #5
   1f15c:	bl	123f8 <printf@plt>
   1f160:	movw	r4, #15980	; 0x3e6c
   1f164:	movw	r2, #187	; 0xbb
   1f168:	movw	r1, #179	; 0xb3
   1f16c:	movt	r4, #6
   1f170:	movt	r2, #5
   1f174:	movt	r1, #5
   1f178:	ldrb	r0, [r4, #56]	; 0x38
   1f17c:	cmp	r0, #0
   1f180:	movw	r0, #163	; 0xa3
   1f184:	moveq	r1, r2
   1f188:	movt	r0, #5
   1f18c:	bl	123f8 <printf@plt>
   1f190:	movw	r0, #196	; 0xc4
   1f194:	movt	r0, #5
   1f198:	bl	123f8 <printf@plt>
   1f19c:	bl	123bc <is_selinux_enabled@plt>
   1f1a0:	cmp	r0, #1
   1f1a4:	blt	1f1b4 <__assert_fail@plt+0xc738>
   1f1a8:	movw	r0, #215	; 0xd7
   1f1ac:	movt	r0, #5
   1f1b0:	bl	123f8 <printf@plt>
   1f1b4:	add	r0, sp, #4
   1f1b8:	str	r5, [sp, #4]
   1f1bc:	bl	131f0 <__assert_fail@plt+0x774>
   1f1c0:	cmp	r0, #0
   1f1c4:	beq	1f1f8 <__assert_fail@plt+0xc77c>
   1f1c8:	movw	r0, #224	; 0xe0
   1f1cc:	movt	r0, #5
   1f1d0:	bl	123f8 <printf@plt>
   1f1d4:	ldrb	r0, [sp, #5]
   1f1d8:	tst	r0, #2
   1f1dc:	beq	1f1ec <__assert_fail@plt+0xc770>
   1f1e0:	movw	r0, #229	; 0xe5
   1f1e4:	movt	r0, #5
   1f1e8:	bl	123f8 <printf@plt>
   1f1ec:	movw	r0, #52941	; 0xcecd
   1f1f0:	movt	r0, #4
   1f1f4:	bl	123f8 <printf@plt>
   1f1f8:	ldrh	r1, [r4, #68]	; 0x44
   1f1fc:	movw	r0, #239	; 0xef
   1f200:	movt	r0, #5
   1f204:	bl	123f8 <printf@plt>
   1f208:	mov	r0, #10
   1f20c:	bl	1280c <putchar@plt>
   1f210:	mov	r0, #0
   1f214:	bl	12758 <exit@plt>
   1f218:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f21c:	add	fp, sp, #24
   1f220:	vpush	{d8}
   1f224:	sub	sp, sp, #16
   1f228:	mov	r4, r1
   1f22c:	ldrb	r1, [r0]
   1f230:	vmov.f64	d8, d0
   1f234:	mov	r8, r3
   1f238:	mov	r7, r2
   1f23c:	mov	r5, r0
   1f240:	cmp	r1, #43	; 0x2b
   1f244:	beq	1f25c <__assert_fail@plt+0xc7e0>
   1f248:	cmp	r1, #45	; 0x2d
   1f24c:	mov	r0, #2
   1f250:	addeq	r5, r5, #1
   1f254:	moveq	r0, #0
   1f258:	b	1f264 <__assert_fail@plt+0xc7e8>
   1f25c:	add	r5, r5, #1
   1f260:	mov	r0, #1
   1f264:	movw	r3, #10300	; 0x283c
   1f268:	str	r0, [r4, #4]
   1f26c:	add	r2, sp, #8
   1f270:	mov	r0, r5
   1f274:	mov	r1, #0
   1f278:	mov	r6, #0
   1f27c:	movt	r3, #1
   1f280:	bl	30f90 <__assert_fail@plt+0x1e514>
   1f284:	cmp	r0, #0
   1f288:	beq	1f338 <__assert_fail@plt+0xc8bc>
   1f28c:	vldr	d16, [sp, #8]
   1f290:	mov	r0, sp
   1f294:	vmul.f64	d0, d16, d8
   1f298:	bl	1271c <modf@plt>
   1f29c:	vldr	d17, [pc, #220]	; 1f380 <__assert_fail@plt+0xc904>
   1f2a0:	vmul.f64	d16, d0, d17
   1f2a4:	vcmpe.f64	d16, d17
   1f2a8:	vmrs	APSR_nzcv, fpscr
   1f2ac:	bpl	1f348 <__assert_fail@plt+0xc8cc>
   1f2b0:	vldr	d17, [sp]
   1f2b4:	vmov	s0, r7
   1f2b8:	mov	r2, #0
   1f2bc:	mov	r1, #0
   1f2c0:	vcvt.f64.s32	d18, s0
   1f2c4:	vsub.f64	d18, d18, d17
   1f2c8:	vcmpe.f64	d17, #0.0
   1f2cc:	vcvt.s32.f64	s0, d18
   1f2d0:	vcvt.s32.f64	s2, d18
   1f2d4:	vmov	r0, s2
   1f2d8:	vstr	s0, [r4, #8]
   1f2dc:	cmp	r7, r0
   1f2e0:	movwlt	r2, #1
   1f2e4:	vmrs	APSR_nzcv, fpscr
   1f2e8:	movwmi	r1, #1
   1f2ec:	cmp	r1, r2
   1f2f0:	bne	1f368 <__assert_fail@plt+0xc8ec>
   1f2f4:	vmov	s0, r8
   1f2f8:	mov	r6, #1
   1f2fc:	vcvt.f64.s32	d17, s0
   1f300:	vsub.f64	d18, d17, d16
   1f304:	vcmpe.f64	d16, d17
   1f308:	vcvt.s32.f64	s2, d18
   1f30c:	vcvt.s32.f64	s0, d18
   1f310:	vmrs	APSR_nzcv, fpscr
   1f314:	vstr	s2, [r4, #12]
   1f318:	ble	1f338 <__assert_fail@plt+0xc8bc>
   1f31c:	movw	r2, #51712	; 0xca00
   1f320:	vmov	r1, s0
   1f324:	sub	r0, r0, #1
   1f328:	movt	r2, #15258	; 0x3b9a
   1f32c:	str	r0, [r4, #8]
   1f330:	add	r1, r1, r2
   1f334:	str	r1, [r4, #12]
   1f338:	mov	r0, r6
   1f33c:	sub	sp, fp, #32
   1f340:	vpop	{d8}
   1f344:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f348:	movw	r0, #62772	; 0xf534
   1f34c:	movw	r1, #61975	; 0xf217
   1f350:	movw	r3, #62798	; 0xf54e
   1f354:	movw	r2, #3149	; 0xc4d
   1f358:	movt	r0, #4
   1f35c:	movt	r1, #4
   1f360:	movt	r3, #4
   1f364:	bl	12a7c <__assert_fail@plt>
   1f368:	ldr	r2, [fp, #8]
   1f36c:	mov	r0, #1
   1f370:	mov	r1, #0
   1f374:	mov	r3, r5
   1f378:	bl	12674 <error@plt>
   1f37c:	nop	{0}
   1f380:	andeq	r0, r0, r0
   1f384:	bicmi	ip, sp, r5, ror #26
   1f388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f38c:	add	fp, sp, #28
   1f390:	sub	sp, sp, #60	; 0x3c
   1f394:	mov	r4, #0
   1f398:	cmp	r2, #0
   1f39c:	beq	1f8b8 <__assert_fail@plt+0xce3c>
   1f3a0:	mov	sl, r0
   1f3a4:	ldr	r0, [r3]
   1f3a8:	mov	r5, r3
   1f3ac:	mov	r6, r2
   1f3b0:	ldr	r0, [r2, r0, lsl #2]
   1f3b4:	cmp	r0, #0
   1f3b8:	beq	1f8b8 <__assert_fail@plt+0xce3c>
   1f3bc:	ldr	r4, [r1, #12]
   1f3c0:	movw	r2, #63220	; 0xf6f4
   1f3c4:	mov	r0, r1
   1f3c8:	movt	r2, #4
   1f3cc:	mov	r1, r4
   1f3d0:	bl	18374 <__assert_fail@plt+0x58f8>
   1f3d4:	movw	r3, #18812	; 0x497c
   1f3d8:	movw	r1, #257	; 0x101
   1f3dc:	movt	r3, #1
   1f3e0:	str	r1, [r0, #16]
   1f3e4:	mov	r1, #0
   1f3e8:	cmp	r4, r3
   1f3ec:	str	r1, [r0, #144]	; 0x90
   1f3f0:	movwne	r2, #18592	; 0x48a0
   1f3f4:	movne	r9, #1
   1f3f8:	movtne	r2, #1
   1f3fc:	cmpne	r4, r2
   1f400:	bne	1f418 <__assert_fail@plt+0xc99c>
   1f404:	movw	r2, #15980	; 0x3e6c
   1f408:	mov	r1, #1
   1f40c:	mov	r9, #0
   1f410:	movt	r2, #6
   1f414:	strb	r1, [r2, #80]	; 0x50
   1f418:	strb	r1, [r0, #140]	; 0x8c
   1f41c:	sub	r1, r4, r3
   1f420:	str	r5, [sp, #28]
   1f424:	str	r6, [sp, #20]
   1f428:	str	r0, [sp, #32]
   1f42c:	str	r4, [sp, #12]
   1f430:	clz	r1, r1
   1f434:	lsr	r2, r1, #5
   1f438:	movw	r1, #16808	; 0x41a8
   1f43c:	movt	r1, #1
   1f440:	sub	r1, r4, r1
   1f444:	clz	r1, r1
   1f448:	lsr	r1, r1, #5
   1f44c:	orr	r8, r1, r2
   1f450:	cmp	r8, #1
   1f454:	bne	1f520 <__assert_fail@plt+0xcaa4>
   1f458:	mov	r2, #0
   1f45c:	movw	r1, #15980	; 0x3e6c
   1f460:	str	r2, [r0, #144]	; 0x90
   1f464:	movw	r0, #64063	; 0xfa3f
   1f468:	movt	r1, #6
   1f46c:	movt	r0, #4
   1f470:	strb	r2, [r1, #14]
   1f474:	bl	126b0 <getenv@plt>
   1f478:	cmp	r0, #0
   1f47c:	beq	1f510 <__assert_fail@plt+0xca94>
   1f480:	movw	r5, #53216	; 0xcfe0
   1f484:	add	r7, sp, #36	; 0x24
   1f488:	sub	r6, fp, #32
   1f48c:	mov	r2, #1
   1f490:	mov	r4, r0
   1f494:	movt	r5, #4
   1f498:	mov	r3, r7
   1f49c:	str	r6, [sp]
   1f4a0:	mov	r1, r5
   1f4a4:	bl	2305c <__assert_fail@plt+0x105e0>
   1f4a8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1f4ac:	cmp	r1, #1
   1f4b0:	beq	1f4d4 <__assert_fail@plt+0xca58>
   1f4b4:	cmp	r1, #0
   1f4b8:	beq	1f980 <__assert_fail@plt+0xcf04>
   1f4bc:	ldr	r2, [sp, #36]	; 0x24
   1f4c0:	mov	r0, r4
   1f4c4:	ldrb	r2, [r0, r2]!
   1f4c8:	cmp	r2, #47	; 0x2f
   1f4cc:	beq	1f4f0 <__assert_fail@plt+0xca74>
   1f4d0:	b	1f9a8 <__assert_fail@plt+0xcf2c>
   1f4d4:	ldr	r2, [sp, #36]	; 0x24
   1f4d8:	mov	r0, r4
   1f4dc:	ldrb	r2, [r0, r2]!
   1f4e0:	cmp	r2, #46	; 0x2e
   1f4e4:	beq	1f980 <__assert_fail@plt+0xcf04>
   1f4e8:	cmp	r2, #47	; 0x2f
   1f4ec:	bne	1f9a8 <__assert_fail@plt+0xcf2c>
   1f4f0:	mov	r0, r4
   1f4f4:	mov	r1, r5
   1f4f8:	mov	r2, #0
   1f4fc:	mov	r3, r7
   1f500:	str	r6, [sp]
   1f504:	bl	2305c <__assert_fail@plt+0x105e0>
   1f508:	cmp	r0, #0
   1f50c:	bne	1f4a8 <__assert_fail@plt+0xca2c>
   1f510:	ldr	r5, [sp, #28]
   1f514:	ldr	r6, [sp, #20]
   1f518:	ldr	r0, [sp, #32]
   1f51c:	b	1f538 <__assert_fail@plt+0xcabc>
   1f520:	movw	r1, #13672	; 0x3568
   1f524:	movt	r1, #6
   1f528:	ldr	r1, [r1]
   1f52c:	cmp	r1, #0
   1f530:	beq	1fa1c <__assert_fail@plt+0xcfa0>
   1f534:	str	r1, [r0, #144]	; 0x90
   1f538:	add	r0, r0, #40	; 0x28
   1f53c:	mov	r4, #0
   1f540:	mov	sl, r6
   1f544:	strb	r4, [r0]
   1f548:	str	r0, [sp, #16]
   1f54c:	ldr	r0, [r5]
   1f550:	ldr	r7, [sl, r0, lsl #2]!
   1f554:	cmp	r7, #0
   1f558:	beq	1f62c <__assert_fail@plt+0xcbb0>
   1f55c:	cmp	r9, #0
   1f560:	str	r0, [sp, #24]
   1f564:	beq	1f634 <__assert_fail@plt+0xcbb8>
   1f568:	movw	r5, #63343	; 0xf76f
   1f56c:	mov	r0, #0
   1f570:	cmp	r8, #0
   1f574:	movt	r5, #4
   1f578:	beq	1f69c <__assert_fail@plt+0xcc20>
   1f57c:	ldr	r9, [sp, #24]
   1f580:	mov	r8, #0
   1f584:	mov	r6, #0
   1f588:	ldrb	r1, [r7]
   1f58c:	cmp	r1, #43	; 0x2b
   1f590:	beq	1f5ac <__assert_fail@plt+0xcb30>
   1f594:	cmp	r1, #59	; 0x3b
   1f598:	bne	1f5c0 <__assert_fail@plt+0xcb44>
   1f59c:	ldrb	r0, [r7, #1]
   1f5a0:	cmp	r0, #0
   1f5a4:	bne	1f5c0 <__assert_fail@plt+0xcb44>
   1f5a8:	b	1f764 <__assert_fail@plt+0xcce8>
   1f5ac:	cmp	r0, #0
   1f5b0:	beq	1f5c0 <__assert_fail@plt+0xcb44>
   1f5b4:	ldrb	r0, [r7, #1]
   1f5b8:	cmp	r0, #0
   1f5bc:	beq	1f964 <__assert_fail@plt+0xcee8>
   1f5c0:	mov	r0, r7
   1f5c4:	mov	r1, r5
   1f5c8:	bl	25d88 <__assert_fail@plt+0x1330c>
   1f5cc:	mov	r1, #0
   1f5d0:	cmp	r0, #0
   1f5d4:	beq	1f600 <__assert_fail@plt+0xcb84>
   1f5d8:	cmp	r9, #0
   1f5dc:	beq	1f9f8 <__assert_fail@plt+0xcf7c>
   1f5e0:	add	r6, r6, #1
   1f5e4:	mov	r0, #1
   1f5e8:	mov	r8, r7
   1f5ec:	ldr	r7, [sl, #4]!
   1f5f0:	add	r9, r9, #1
   1f5f4:	cmp	r7, #0
   1f5f8:	bne	1f588 <__assert_fail@plt+0xcb0c>
   1f5fc:	b	1f614 <__assert_fail@plt+0xcb98>
   1f600:	mov	r0, #0
   1f604:	ldr	r7, [sl, #4]!
   1f608:	add	r9, r9, #1
   1f60c:	cmp	r7, #0
   1f610:	bne	1f588 <__assert_fail@plt+0xcb0c>
   1f614:	ldr	r0, [sp, #24]
   1f618:	cmp	r9, r0
   1f61c:	bne	1f774 <__assert_fail@plt+0xccf8>
   1f620:	ldr	r5, [sp, #28]
   1f624:	ldr	r7, [sp, #32]
   1f628:	b	1f8a8 <__assert_fail@plt+0xce2c>
   1f62c:	ldr	r7, [sp, #32]
   1f630:	b	1f8ac <__assert_fail@plt+0xce30>
   1f634:	cmp	r8, #0
   1f638:	beq	1f710 <__assert_fail@plt+0xcc94>
   1f63c:	movw	r5, #63343	; 0xf76f
   1f640:	mov	r8, #0
   1f644:	mov	r9, r0
   1f648:	mov	r6, #0
   1f64c:	movt	r5, #4
   1f650:	ldrb	r0, [r7]
   1f654:	cmp	r0, #59	; 0x3b
   1f658:	ldrbeq	r0, [r7, #1]
   1f65c:	cmpeq	r0, #0
   1f660:	beq	1f764 <__assert_fail@plt+0xcce8>
   1f664:	mov	r0, r7
   1f668:	mov	r1, r5
   1f66c:	bl	25d88 <__assert_fail@plt+0x1330c>
   1f670:	cmp	r0, #0
   1f674:	beq	1f688 <__assert_fail@plt+0xcc0c>
   1f678:	cmp	r9, #0
   1f67c:	beq	1f9f8 <__assert_fail@plt+0xcf7c>
   1f680:	add	r6, r6, #1
   1f684:	mov	r8, r7
   1f688:	ldr	r7, [sl, #4]!
   1f68c:	add	r9, r9, #1
   1f690:	cmp	r7, #0
   1f694:	bne	1f650 <__assert_fail@plt+0xcbd4>
   1f698:	b	1f764 <__assert_fail@plt+0xcce8>
   1f69c:	ldr	r9, [sp, #24]
   1f6a0:	mov	r8, #0
   1f6a4:	mov	r6, #0
   1f6a8:	ldrb	r1, [r7]
   1f6ac:	cmp	r1, #43	; 0x2b
   1f6b0:	beq	1f6cc <__assert_fail@plt+0xcc50>
   1f6b4:	cmp	r1, #59	; 0x3b
   1f6b8:	bne	1f6e0 <__assert_fail@plt+0xcc64>
   1f6bc:	ldrb	r0, [r7, #1]
   1f6c0:	cmp	r0, #0
   1f6c4:	bne	1f6e0 <__assert_fail@plt+0xcc64>
   1f6c8:	b	1f764 <__assert_fail@plt+0xcce8>
   1f6cc:	cmp	r0, #0
   1f6d0:	beq	1f6e0 <__assert_fail@plt+0xcc64>
   1f6d4:	ldrb	r0, [r7, #1]
   1f6d8:	cmp	r0, #0
   1f6dc:	beq	1f964 <__assert_fail@plt+0xcee8>
   1f6e0:	mov	r0, r7
   1f6e4:	mov	r1, r5
   1f6e8:	bl	25d88 <__assert_fail@plt+0x1330c>
   1f6ec:	cmp	r0, #0
   1f6f0:	add	r9, r9, #1
   1f6f4:	movne	r8, r7
   1f6f8:	ldr	r7, [sl, #4]!
   1f6fc:	movwne	r0, #1
   1f700:	add	r6, r6, r0
   1f704:	cmp	r7, #0
   1f708:	bne	1f6a8 <__assert_fail@plt+0xcc2c>
   1f70c:	b	1f764 <__assert_fail@plt+0xcce8>
   1f710:	movw	r5, #63343	; 0xf76f
   1f714:	mov	r8, #0
   1f718:	mov	r9, r0
   1f71c:	mov	r6, #0
   1f720:	movt	r5, #4
   1f724:	ldrb	r0, [r7]
   1f728:	cmp	r0, #59	; 0x3b
   1f72c:	ldrbeq	r0, [r7, #1]
   1f730:	cmpeq	r0, #0
   1f734:	beq	1f764 <__assert_fail@plt+0xcce8>
   1f738:	mov	r0, r7
   1f73c:	mov	r1, r5
   1f740:	bl	25d88 <__assert_fail@plt+0x1330c>
   1f744:	cmp	r0, #0
   1f748:	add	r9, r9, #1
   1f74c:	movne	r8, r7
   1f750:	ldr	r7, [sl, #4]!
   1f754:	movwne	r0, #1
   1f758:	add	r6, r6, r0
   1f75c:	cmp	r7, #0
   1f760:	bne	1f724 <__assert_fail@plt+0xcca8>
   1f764:	mov	r1, #0
   1f768:	ldr	r0, [sp, #24]
   1f76c:	cmp	r9, r0
   1f770:	beq	1f620 <__assert_fail@plt+0xcba4>
   1f774:	ldr	r0, [sl]
   1f778:	ldr	r7, [sp, #32]
   1f77c:	cmp	r0, #0
   1f780:	beq	1f8a4 <__assert_fail@plt+0xce28>
   1f784:	cmp	r1, #0
   1f788:	beq	1f7c8 <__assert_fail@plt+0xcd4c>
   1f78c:	ldr	r1, [sp, #12]
   1f790:	movw	r2, #16808	; 0x41a8
   1f794:	movw	r0, #64073	; 0xfa49
   1f798:	movw	r4, #58175	; 0xe33f
   1f79c:	movt	r2, #1
   1f7a0:	movt	r0, #4
   1f7a4:	movt	r4, #4
   1f7a8:	cmp	r1, r2
   1f7ac:	moveq	r4, r0
   1f7b0:	cmp	r6, #2
   1f7b4:	bge	1fa48 <__assert_fail@plt+0xcfcc>
   1f7b8:	mov	r0, r8
   1f7bc:	bl	12788 <strlen@plt>
   1f7c0:	cmp	r0, #2
   1f7c4:	bne	1fa70 <__assert_fail@plt+0xcff4>
   1f7c8:	ldr	r4, [sp, #16]
   1f7cc:	mov	r1, #2048	; 0x800
   1f7d0:	add	r5, r4, #4
   1f7d4:	mov	r0, r5
   1f7d8:	bl	20ec8 <__assert_fail@plt+0xe44c>
   1f7dc:	sub	r0, r0, #1
   1f7e0:	cmp	r0, #1
   1f7e4:	bls	1fa3c <__assert_fail@plt+0xcfc0>
   1f7e8:	mov	r0, r5
   1f7ec:	bl	20fcc <__assert_fail@plt+0xe550>
   1f7f0:	movw	r0, #23132	; 0x5a5c
   1f7f4:	ldr	r8, [sp, #20]
   1f7f8:	mov	r2, r5
   1f7fc:	movt	r0, #1
   1f800:	str	r0, [r7, #76]	; 0x4c
   1f804:	ldrb	r0, [r7, #40]	; 0x28
   1f808:	cmp	r0, #0
   1f80c:	beq	1f8c4 <__assert_fail@plt+0xce48>
   1f810:	ldr	r6, [sp, #24]
   1f814:	mov	r3, #0
   1f818:	add	r5, r7, #88	; 0x58
   1f81c:	str	r3, [r7, #132]	; 0x84
   1f820:	str	r3, [r7, #80]	; 0x50
   1f824:	str	r3, [r7, #84]	; 0x54
   1f828:	str	r3, [r7, #64]	; 0x40
   1f82c:	str	r3, [r7, #68]	; 0x44
   1f830:	mov	r1, r5
   1f834:	mvn	r0, r6
   1f838:	add	r0, r9, r0
   1f83c:	str	r0, [r7, #72]	; 0x48
   1f840:	mov	r0, r2
   1f844:	mov	r7, r2
   1f848:	mov	r2, r4
   1f84c:	bl	20ff0 <__assert_fail@plt+0xe574>
   1f850:	sub	r0, r9, #1
   1f854:	cmp	r6, r0
   1f858:	bge	1f940 <__assert_fail@plt+0xcec4>
   1f85c:	add	r4, r8, r6, lsl #2
   1f860:	sub	r8, r0, r6
   1f864:	ldr	r6, [r4], #4
   1f868:	mov	r0, r6
   1f86c:	bl	12788 <strlen@plt>
   1f870:	mov	r1, #0
   1f874:	add	r3, r0, #1
   1f878:	mov	r0, r7
   1f87c:	mov	r2, r6
   1f880:	str	r1, [sp]
   1f884:	str	r1, [sp, #4]
   1f888:	mov	r1, #1
   1f88c:	str	r1, [sp, #8]
   1f890:	mov	r1, r5
   1f894:	bl	207c4 <__assert_fail@plt+0xdd48>
   1f898:	subs	r8, r8, #1
   1f89c:	bne	1f864 <__assert_fail@plt+0xcde8>
   1f8a0:	b	1f940 <__assert_fail@plt+0xcec4>
   1f8a4:	ldr	r5, [sp, #28]
   1f8a8:	mov	r0, r9
   1f8ac:	str	r0, [r5]
   1f8b0:	mov	r0, r7
   1f8b4:	bl	32c40 <__assert_fail@plt+0x201c4>
   1f8b8:	mov	r0, r4
   1f8bc:	sub	sp, fp, #28
   1f8c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8c4:	movw	r0, #63343	; 0xf76f
   1f8c8:	mov	r1, #2
   1f8cc:	mov	r5, #0
   1f8d0:	mov	r6, r8
   1f8d4:	mov	r8, r2
   1f8d8:	movt	r0, #4
   1f8dc:	str	r1, [r7, #64]	; 0x40
   1f8e0:	str	r0, [r7, #68]	; 0x44
   1f8e4:	ldr	r0, [sp, #24]
   1f8e8:	str	r5, [r7, #80]	; 0x50
   1f8ec:	str	r5, [r7, #84]	; 0x54
   1f8f0:	sub	r0, r9, r0
   1f8f4:	str	r0, [r7, #136]	; 0x88
   1f8f8:	lsl	r0, r0, #2
   1f8fc:	bl	309ec <__assert_fail@plt+0x1df70>
   1f900:	str	r0, [r7, #132]	; 0x84
   1f904:	add	r1, r7, #88	; 0x58
   1f908:	mov	r0, r8
   1f90c:	mov	r2, r4
   1f910:	bl	20ff0 <__assert_fail@plt+0xe574>
   1f914:	ldr	r0, [r7, #136]	; 0x88
   1f918:	cmp	r0, #1
   1f91c:	blt	1f940 <__assert_fail@plt+0xcec4>
   1f920:	ldr	r1, [sp, #24]
   1f924:	add	r1, r6, r1, lsl #2
   1f928:	ldr	r2, [r1, r5, lsl #2]
   1f92c:	ldr	r3, [r7, #132]	; 0x84
   1f930:	str	r2, [r3, r5, lsl #2]
   1f934:	add	r5, r5, #1
   1f938:	cmp	r5, r0
   1f93c:	blt	1f928 <__assert_fail@plt+0xceac>
   1f940:	ldr	r0, [sl]
   1f944:	mov	r4, #1
   1f948:	cmp	r0, #0
   1f94c:	ldr	r0, [sp, #28]
   1f950:	addne	r9, r9, #1
   1f954:	str	r9, [r0]
   1f958:	mov	r0, r4
   1f95c:	sub	sp, fp, #28
   1f960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f964:	ldr	r0, [sp, #16]
   1f968:	mov	r1, #1
   1f96c:	strb	r1, [r0]
   1f970:	ldr	r0, [sp, #24]
   1f974:	cmp	r9, r0
   1f978:	beq	1f620 <__assert_fail@plt+0xcba4>
   1f97c:	b	1f774 <__assert_fail@plt+0xccf8>
   1f980:	movw	r1, #63652	; 0xf8a4
   1f984:	mov	r0, #0
   1f988:	mov	r2, #5
   1f98c:	movt	r1, #4
   1f990:	bl	1253c <dcgettext@plt>
   1f994:	mov	r2, r0
   1f998:	mov	r0, #1
   1f99c:	mov	r1, #0
   1f9a0:	mov	r3, sl
   1f9a4:	bl	12674 <error@plt>
   1f9a8:	bl	12494 <strndup@plt>
   1f9ac:	movw	r1, #63903	; 0xf99f
   1f9b0:	mov	r5, r0
   1f9b4:	mov	r0, #0
   1f9b8:	mov	r2, #5
   1f9bc:	movt	r1, #4
   1f9c0:	bl	1253c <dcgettext@plt>
   1f9c4:	mov	r6, r0
   1f9c8:	ldr	r0, [sp, #36]	; 0x24
   1f9cc:	cmp	r5, #0
   1f9d0:	addeq	r5, r4, r0
   1f9d4:	mov	r0, #0
   1f9d8:	mov	r1, r5
   1f9dc:	bl	19d58 <__assert_fail@plt+0x72dc>
   1f9e0:	mov	r3, r0
   1f9e4:	mov	r0, #1
   1f9e8:	mov	r1, #0
   1f9ec:	mov	r2, r6
   1f9f0:	str	sl, [sp]
   1f9f4:	bl	12674 <error@plt>
   1f9f8:	movw	r1, #63346	; 0xf772
   1f9fc:	movt	r1, #4
   1fa00:	mov	r0, #0
   1fa04:	mov	r2, #5
   1fa08:	bl	1253c <dcgettext@plt>
   1fa0c:	mov	r2, r0
   1fa10:	mov	r0, #1
   1fa14:	mov	r1, #0
   1fa18:	bl	12674 <error@plt>
   1fa1c:	movw	r0, #63244	; 0xf70c
   1fa20:	movw	r1, #61975	; 0xf217
   1fa24:	movw	r3, #63263	; 0xf71f
   1fa28:	movw	r2, #2937	; 0xb79
   1fa2c:	movt	r0, #4
   1fa30:	movt	r1, #4
   1fa34:	movt	r3, #4
   1fa38:	bl	12a7c <__assert_fail@plt>
   1fa3c:	movw	r1, #63611	; 0xf87b
   1fa40:	movt	r1, #4
   1fa44:	b	1fa00 <__assert_fail@plt+0xcf84>
   1fa48:	movw	r1, #63460	; 0xf7e4
   1fa4c:	mov	r0, #0
   1fa50:	mov	r2, #5
   1fa54:	movt	r1, #4
   1fa58:	bl	1253c <dcgettext@plt>
   1fa5c:	mov	r2, r0
   1fa60:	mov	r0, #1
   1fa64:	mov	r1, #0
   1fa68:	mov	r3, r4
   1fa6c:	bl	12674 <error@plt>
   1fa70:	movw	r2, #63516	; 0xf81c
   1fa74:	add	r0, sp, #36	; 0x24
   1fa78:	mov	r1, #19
   1fa7c:	mov	r3, r4
   1fa80:	movt	r2, #4
   1fa84:	bl	127e8 <snprintf@plt>
   1fa88:	cmp	r0, #20
   1fa8c:	bcs	1fb08 <__assert_fail@plt+0xd08c>
   1fa90:	movw	r1, #63554	; 0xf842
   1fa94:	mov	r0, #0
   1fa98:	mov	r2, #5
   1fa9c:	movt	r1, #4
   1faa0:	bl	1253c <dcgettext@plt>
   1faa4:	movw	r7, #15980	; 0x3e6c
   1faa8:	mov	r4, r0
   1faac:	add	r2, sp, #36	; 0x24
   1fab0:	mov	r0, #0
   1fab4:	movt	r7, #6
   1fab8:	ldr	r1, [r7, #72]	; 0x48
   1fabc:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1fac0:	ldr	r1, [r7, #72]	; 0x48
   1fac4:	movw	r2, #63343	; 0xf76f
   1fac8:	mov	r5, r0
   1facc:	mov	r0, #1
   1fad0:	movt	r2, #4
   1fad4:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1fad8:	ldr	r1, [r7, #72]	; 0x48
   1fadc:	mov	r6, r0
   1fae0:	mov	r0, #2
   1fae4:	mov	r2, r8
   1fae8:	bl	2f2ec <__assert_fail@plt+0x1c870>
   1faec:	str	r0, [sp, #4]
   1faf0:	mov	r0, #1
   1faf4:	mov	r1, #0
   1faf8:	mov	r2, r4
   1fafc:	mov	r3, r5
   1fb00:	str	r6, [sp]
   1fb04:	bl	12674 <error@plt>
   1fb08:	movw	r0, #63533	; 0xf82d
   1fb0c:	movw	r1, #61975	; 0xf217
   1fb10:	movw	r3, #63263	; 0xf71f
   1fb14:	movw	r2, #3014	; 0xbc6
   1fb18:	movt	r0, #4
   1fb1c:	movt	r1, #4
   1fb20:	movt	r3, #4
   1fb24:	bl	12a7c <__assert_fail@plt>
   1fb28:	push	{r4, r5, r6, sl, fp, lr}
   1fb2c:	add	fp, sp, #16
   1fb30:	mov	r5, r0
   1fb34:	mov	r0, #0
   1fb38:	mov	r4, r1
   1fb3c:	str	r0, [r1]
   1fb40:	mov	r0, #0
   1fb44:	bl	2da04 <__assert_fail@plt+0x1af88>
   1fb48:	movw	r1, #64077	; 0xfa4d
   1fb4c:	str	r0, [r4, #16]
   1fb50:	mov	r0, r5
   1fb54:	movt	r1, #4
   1fb58:	bl	123d4 <strcmp@plt>
   1fb5c:	cmp	r0, #0
   1fb60:	beq	1fbb4 <__assert_fail@plt+0xd138>
   1fb64:	movw	r1, #64104	; 0xfa68
   1fb68:	mov	r0, r5
   1fb6c:	movt	r1, #4
   1fb70:	bl	123d4 <strcmp@plt>
   1fb74:	cmp	r0, #0
   1fb78:	beq	1fbc8 <__assert_fail@plt+0xd14c>
   1fb7c:	movw	r0, #15936	; 0x3e40
   1fb80:	mov	r1, r5
   1fb84:	movt	r0, #6
   1fb88:	ldr	r0, [r0, #36]	; 0x24
   1fb8c:	bl	19fd8 <__assert_fail@plt+0x755c>
   1fb90:	mov	r6, r4
   1fb94:	cmp	r0, #0
   1fb98:	str	r0, [r6, #4]!
   1fb9c:	str	r5, [r6, #4]
   1fba0:	bne	1fbf4 <__assert_fail@plt+0xd178>
   1fba4:	bl	127d0 <__errno_location@plt>
   1fba8:	ldr	r0, [r0]
   1fbac:	mov	r1, r5
   1fbb0:	bl	19e00 <__assert_fail@plt+0x7384>
   1fbb4:	movw	r1, #64089	; 0xfa59
   1fbb8:	movw	r0, #13640	; 0x3548
   1fbbc:	movt	r1, #4
   1fbc0:	movt	r0, #6
   1fbc4:	b	1fbd8 <__assert_fail@plt+0xd15c>
   1fbc8:	movw	r1, #58235	; 0xe37b
   1fbcc:	movw	r0, #13652	; 0x3554
   1fbd0:	movt	r1, #4
   1fbd4:	movt	r0, #6
   1fbd8:	ldr	r0, [r0]
   1fbdc:	mov	r6, r4
   1fbe0:	mov	r2, #5
   1fbe4:	str	r0, [r6, #4]!
   1fbe8:	mov	r0, #0
   1fbec:	bl	1253c <dcgettext@plt>
   1fbf0:	str	r0, [r6, #4]
   1fbf4:	ldr	r0, [r6]
   1fbf8:	bl	12848 <fileno@plt>
   1fbfc:	cmn	r0, #1
   1fc00:	moveq	r0, #0
   1fc04:	strbeq	r0, [r4, #12]
   1fc08:	popeq	{r4, r5, r6, sl, fp, pc}
   1fc0c:	bl	129ec <isatty@plt>
   1fc10:	cmp	r0, #0
   1fc14:	movwne	r0, #1
   1fc18:	strb	r0, [r4, #12]
   1fc1c:	pop	{r4, r5, r6, sl, fp, pc}
   1fc20:	push	{r4, r5, r6, r7, fp, lr}
   1fc24:	add	fp, sp, #16
   1fc28:	sub	sp, sp, #24
   1fc2c:	mov	r4, #0
   1fc30:	cmp	r0, #0
   1fc34:	beq	1fcd8 <__assert_fail@plt+0xd25c>
   1fc38:	mov	r5, r2
   1fc3c:	ldr	r2, [r1]
   1fc40:	ldr	r6, [r0, r2, lsl #2]
   1fc44:	cmp	r6, #0
   1fc48:	beq	1fcd8 <__assert_fail@plt+0xd25c>
   1fc4c:	add	r0, r2, #1
   1fc50:	str	r0, [r1]
   1fc54:	ldrb	r0, [r6]
   1fc58:	cmp	r0, #45	; 0x2d
   1fc5c:	beq	1fc78 <__assert_fail@plt+0xd1fc>
   1fc60:	cmp	r0, #43	; 0x2b
   1fc64:	mov	r7, #2
   1fc68:	mov	r0, r6
   1fc6c:	addeq	r0, r6, #1
   1fc70:	moveq	r7, #0
   1fc74:	b	1fc80 <__assert_fail@plt+0xd204>
   1fc78:	add	r0, r6, #1
   1fc7c:	mov	r7, #1
   1fc80:	movw	r1, #58175	; 0xe33f
   1fc84:	add	r3, sp, #8
   1fc88:	mov	r2, #10
   1fc8c:	movt	r1, #4
   1fc90:	str	r1, [sp]
   1fc94:	add	r1, sp, #20
   1fc98:	bl	318b0 <__assert_fail@plt+0x1ee34>
   1fc9c:	cmp	r0, #0
   1fca0:	bne	1fcd8 <__assert_fail@plt+0xd25c>
   1fca4:	mov	r0, r5
   1fca8:	mov	r1, r6
   1fcac:	bl	183ac <__assert_fail@plt+0x5930>
   1fcb0:	str	r7, [r0, #40]	; 0x28
   1fcb4:	mov	r4, r0
   1fcb8:	ldr	r0, [sp, #8]
   1fcbc:	ldr	r1, [sp, #12]
   1fcc0:	strd	r0, [r4, #48]	; 0x30
   1fcc4:	movw	r0, #15980	; 0x3e6c
   1fcc8:	movt	r0, #6
   1fccc:	ldrb	r0, [r0, #44]	; 0x2c
   1fcd0:	tst	r0, #1
   1fcd4:	bne	1fce4 <__assert_fail@plt+0xd268>
   1fcd8:	mov	r0, r4
   1fcdc:	sub	sp, fp, #16
   1fce0:	pop	{r4, r5, r6, r7, fp, pc}
   1fce4:	movw	r6, #13640	; 0x3548
   1fce8:	ldr	r2, [r4, #4]
   1fcec:	movw	r1, #62967	; 0xf5f7
   1fcf0:	add	r5, r4, #48	; 0x30
   1fcf4:	movt	r6, #6
   1fcf8:	movt	r1, #4
   1fcfc:	ldr	r0, [r6]
   1fd00:	bl	127c4 <fprintf@plt>
   1fd04:	ldr	r0, [r6]
   1fd08:	cmp	r7, #1
   1fd0c:	beq	1fd2c <__assert_fail@plt+0xd2b0>
   1fd10:	cmp	r7, #0
   1fd14:	bne	1fd40 <__assert_fail@plt+0xd2c4>
   1fd18:	movw	r3, #63008	; 0xf620
   1fd1c:	movw	r2, #63002	; 0xf61a
   1fd20:	movt	r3, #4
   1fd24:	movt	r2, #4
   1fd28:	b	1fd50 <__assert_fail@plt+0xd2d4>
   1fd2c:	movw	r3, #63011	; 0xf623
   1fd30:	movw	r2, #3339	; 0xd0b
   1fd34:	movt	r3, #4
   1fd38:	movt	r2, #5
   1fd3c:	b	1fd50 <__assert_fail@plt+0xd2d4>
   1fd40:	movw	r3, #64167	; 0xfaa7
   1fd44:	movw	r2, #63005	; 0xf61d
   1fd48:	movt	r3, #4
   1fd4c:	movt	r2, #4
   1fd50:	movw	r1, #62981	; 0xf605
   1fd54:	movt	r1, #4
   1fd58:	bl	127c4 <fprintf@plt>
   1fd5c:	ldrd	r2, [r5]
   1fd60:	ldr	r0, [r6]
   1fd64:	movw	r1, #64170	; 0xfaaa
   1fd68:	movt	r1, #4
   1fd6c:	bl	127c4 <fprintf@plt>
   1fd70:	mov	r0, r4
   1fd74:	sub	sp, fp, #16
   1fd78:	pop	{r4, r5, r6, r7, fp, pc}
   1fd7c:	push	{r4, r5, r6, r7, fp, lr}
   1fd80:	add	fp, sp, #16
   1fd84:	sub	sp, sp, #8
   1fd88:	mov	r5, r0
   1fd8c:	movw	r0, #15980	; 0x3e6c
   1fd90:	mov	r4, r1
   1fd94:	movt	r0, #6
   1fd98:	ldrb	r1, [r0, #17]
   1fd9c:	cmp	r1, #0
   1fda0:	bne	1fe28 <__assert_fail@plt+0xd3ac>
   1fda4:	ldrb	r0, [r0, #16]
   1fda8:	cmp	r0, #0
   1fdac:	beq	1fe28 <__assert_fail@plt+0xd3ac>
   1fdb0:	mov	r0, r2
   1fdb4:	mov	r1, #47	; 0x2f
   1fdb8:	bl	12794 <strchr@plt>
   1fdbc:	cmp	r0, #0
   1fdc0:	beq	1fe28 <__assert_fail@plt+0xd3ac>
   1fdc4:	movw	r1, #64494	; 0xfbee
   1fdc8:	mov	r0, #0
   1fdcc:	mov	r2, #5
   1fdd0:	movt	r1, #4
   1fdd4:	bl	1253c <dcgettext@plt>
   1fdd8:	mov	r6, r0
   1fddc:	mov	r0, #0
   1fde0:	mov	r1, r5
   1fde4:	bl	19d58 <__assert_fail@plt+0x72dc>
   1fde8:	movw	r1, #53058	; 0xcf42
   1fdec:	mov	r5, r0
   1fdf0:	mov	r0, #1
   1fdf4:	movt	r1, #4
   1fdf8:	bl	19d58 <__assert_fail@plt+0x72dc>
   1fdfc:	mov	r7, r0
   1fe00:	mov	r0, #2
   1fe04:	mov	r1, r4
   1fe08:	bl	19d58 <__assert_fail@plt+0x72dc>
   1fe0c:	str	r0, [sp, #4]
   1fe10:	mov	r0, #0
   1fe14:	mov	r1, #0
   1fe18:	mov	r2, r6
   1fe1c:	mov	r3, r5
   1fe20:	str	r7, [sp]
   1fe24:	bl	12674 <error@plt>
   1fe28:	sub	sp, fp, #16
   1fe2c:	pop	{r4, r5, r6, r7, fp, pc}
   1fe30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fe34:	add	fp, sp, #24
   1fe38:	sub	sp, sp, #8
   1fe3c:	movw	r5, #15576	; 0x3cd8
   1fe40:	mov	r7, r0
   1fe44:	mov	r8, r3
   1fe48:	mov	r4, r2
   1fe4c:	mov	r6, r1
   1fe50:	movt	r5, #6
   1fe54:	ldrb	r0, [r5]
   1fe58:	cmp	r0, #0
   1fe5c:	bne	1fec4 <__assert_fail@plt+0xd448>
   1fe60:	movw	r0, #64431	; 0xfbaf
   1fe64:	mov	r2, #0
   1fe68:	movt	r0, #4
   1fe6c:	mov	r1, r0
   1fe70:	bl	12698 <fnmatch@plt>
   1fe74:	cmp	r0, #0
   1fe78:	bne	1ffdc <__assert_fail@plt+0xd560>
   1fe7c:	movw	r0, #64435	; 0xfbb3
   1fe80:	movw	r1, #64431	; 0xfbaf
   1fe84:	mov	r2, #0
   1fe88:	movt	r0, #4
   1fe8c:	movt	r1, #4
   1fe90:	bl	12698 <fnmatch@plt>
   1fe94:	cmp	r0, #0
   1fe98:	beq	1ffdc <__assert_fail@plt+0xd560>
   1fe9c:	movw	r0, #64435	; 0xfbb3
   1fea0:	movw	r1, #64431	; 0xfbaf
   1fea4:	mov	r2, #16
   1fea8:	movt	r0, #4
   1feac:	movt	r1, #4
   1feb0:	bl	12698 <fnmatch@plt>
   1feb4:	cmp	r0, #0
   1feb8:	bne	1ffdc <__assert_fail@plt+0xd560>
   1febc:	mov	r0, #1
   1fec0:	strb	r0, [r5]
   1fec4:	mov	r5, #0
   1fec8:	cmp	r6, #0
   1fecc:	beq	1ff48 <__assert_fail@plt+0xd4cc>
   1fed0:	ldr	r0, [r4]
   1fed4:	ldr	r6, [r6, r0, lsl #2]
   1fed8:	cmp	r6, #0
   1fedc:	beq	1ff48 <__assert_fail@plt+0xd4cc>
   1fee0:	ldr	r9, [fp, #8]
   1fee4:	add	r0, r0, #1
   1fee8:	mov	r2, r6
   1feec:	str	r0, [r4]
   1fef0:	mov	r0, r7
   1fef4:	mov	r1, r9
   1fef8:	bl	18374 <__assert_fail@plt+0x58f8>
   1fefc:	movw	r1, #64408	; 0xfb98
   1ff00:	mov	r7, r0
   1ff04:	mov	r0, #0
   1ff08:	strh	r0, [r7, #18]
   1ff0c:	movt	r1, #4
   1ff10:	mov	r0, r6
   1ff14:	str	r6, [r7, #40]	; 0x28
   1ff18:	bl	129b0 <strpbrk@plt>
   1ff1c:	cmp	r0, #0
   1ff20:	add	r1, pc, #216	; 0xd8
   1ff24:	movw	r0, #15980	; 0x3e6c
   1ff28:	mov	r5, #1
   1ff2c:	addeq	r1, r1, #4
   1ff30:	movt	r0, #6
   1ff34:	vldr	s0, [r1]
   1ff38:	vstr	s0, [r7, #28]
   1ff3c:	ldrb	r0, [r0, #17]
   1ff40:	cmp	r0, #0
   1ff44:	beq	1ff54 <__assert_fail@plt+0xd4d8>
   1ff48:	mov	r0, r5
   1ff4c:	sub	sp, fp, #24
   1ff50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff54:	mov	r0, r6
   1ff58:	mov	r1, #47	; 0x2f
   1ff5c:	bl	128f0 <strrchr@plt>
   1ff60:	cmp	r0, #0
   1ff64:	beq	1ff48 <__assert_fail@plt+0xd4cc>
   1ff68:	ldrb	r0, [r0, #1]
   1ff6c:	cmp	r0, #0
   1ff70:	bne	1ff48 <__assert_fail@plt+0xd4cc>
   1ff74:	movw	r0, #17552	; 0x4490
   1ff78:	movt	r0, #1
   1ff7c:	sub	r0, r9, r0
   1ff80:	clz	r0, r0
   1ff84:	lsr	r1, r0, #5
   1ff88:	mov	r0, r6
   1ff8c:	bl	15ee8 <__assert_fail@plt+0x346c>
   1ff90:	cmp	r0, #0
   1ff94:	bne	1ff48 <__assert_fail@plt+0xd4cc>
   1ff98:	movw	r1, #64672	; 0xfca0
   1ff9c:	mov	r0, #0
   1ffa0:	mov	r2, #5
   1ffa4:	movt	r1, #4
   1ffa8:	bl	1253c <dcgettext@plt>
   1ffac:	mov	r2, r0
   1ffb0:	mov	r0, #0
   1ffb4:	mov	r1, #0
   1ffb8:	mov	r3, r8
   1ffbc:	str	r6, [sp]
   1ffc0:	bl	12674 <error@plt>
   1ffc4:	movw	r0, #52343	; 0xcc77
   1ffc8:	movt	r0, #12843	; 0x322b
   1ffcc:	str	r0, [r7, #28]
   1ffd0:	mov	r0, r5
   1ffd4:	sub	sp, fp, #24
   1ffd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ffdc:	movw	r1, #64439	; 0xfbb7
   1ffe0:	mov	r0, #0
   1ffe4:	mov	r2, #5
   1ffe8:	movt	r1, #4
   1ffec:	bl	1253c <dcgettext@plt>
   1fff0:	mov	r2, r0
   1fff4:	mov	r0, #1
   1fff8:	mov	r1, #0
   1fffc:	bl	12674 <error@plt>
   20000:	svccc	0x004ccccd
   20004:	stclcc	12, cr12, [ip, #820]	; 0x334
   20008:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2000c:	add	fp, sp, #24
   20010:	sub	sp, sp, #8
   20014:	mov	r6, r3
   20018:	mov	r3, r0
   2001c:	mov	r0, #0
   20020:	cmp	r3, #0
   20024:	beq	200fc <__assert_fail@plt+0xd680>
   20028:	ldr	r7, [r1]
   2002c:	ldr	r4, [r3, r7, lsl #2]
   20030:	cmp	r4, #0
   20034:	beq	200fc <__assert_fail@plt+0xd680>
   20038:	add	r0, r7, #1
   2003c:	str	r0, [r1]
   20040:	movw	r1, #19524	; 0x4c44
   20044:	mov	r0, r2
   20048:	mov	r2, r4
   2004c:	movt	r1, #1
   20050:	bl	18374 <__assert_fail@plt+0x58f8>
   20054:	mov	r8, #0
   20058:	mov	r5, r0
   2005c:	strh	r8, [r0, #18]
   20060:	mov	r0, #32
   20064:	bl	309ec <__assert_fail@plt+0x1df70>
   20068:	mov	r7, r0
   2006c:	str	r0, [r5, #40]	; 0x28
   20070:	mov	r0, #100	; 0x64
   20074:	str	r0, [r7, #4]
   20078:	mov	r0, #100	; 0x64
   2007c:	bl	309ec <__assert_fail@plt+0x1df70>
   20080:	str	r0, [r7]
   20084:	mov	r0, r6
   20088:	str	r8, [r7, #16]
   2008c:	bl	37b38 <__assert_fail@plt+0x250bc>
   20090:	mov	r0, r4
   20094:	str	r6, [r7, #12]
   20098:	str	r8, [r7, #20]
   2009c:	bl	12788 <strlen@plt>
   200a0:	mov	r1, r0
   200a4:	mov	r0, r4
   200a8:	mov	r2, r7
   200ac:	bl	363c0 <__assert_fail@plt+0x23944>
   200b0:	cmp	r0, #0
   200b4:	bne	20104 <__assert_fail@plt+0xd688>
   200b8:	movw	r1, #64408	; 0xfb98
   200bc:	mov	r0, r4
   200c0:	movt	r1, #4
   200c4:	bl	129b0 <strpbrk@plt>
   200c8:	cmp	r0, #0
   200cc:	beq	200d8 <__assert_fail@plt+0xd65c>
   200d0:	vldr	s0, [pc, #92]	; 20134 <__assert_fail@plt+0xd6b8>
   200d4:	b	200f4 <__assert_fail@plt+0xd678>
   200d8:	mov	r0, r4
   200dc:	mov	r1, #46	; 0x2e
   200e0:	bl	12794 <strchr@plt>
   200e4:	add	r1, pc, #76	; 0x4c
   200e8:	cmp	r0, #0
   200ec:	addeq	r1, r1, #4
   200f0:	vldr	s0, [r1]
   200f4:	mov	r0, #1
   200f8:	vstr	s0, [r5, #28]
   200fc:	sub	sp, fp, #24
   20100:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20104:	movw	r1, #64736	; 0xfce0
   20108:	mov	r6, r0
   2010c:	mov	r0, #0
   20110:	mov	r2, #5
   20114:	movt	r1, #4
   20118:	bl	1253c <dcgettext@plt>
   2011c:	mov	r2, r0
   20120:	mov	r0, #1
   20124:	mov	r1, #0
   20128:	mov	r3, r4
   2012c:	str	r6, [sp]
   20130:	bl	12674 <error@plt>
   20134:	svccc	0x004ccccd
   20138:	svccc	0x004ccccd
   2013c:	stclcc	12, cr12, [ip, #820]	; 0x334
   20140:	push	{r4, r5, r6, sl, fp, lr}
   20144:	add	fp, sp, #16
   20148:	sub	sp, sp, #8
   2014c:	mov	r6, r2
   20150:	mov	r2, r0
   20154:	mov	r0, #0
   20158:	cmp	r2, #0
   2015c:	beq	20200 <__assert_fail@plt+0xd784>
   20160:	ldr	r3, [r1]
   20164:	ldr	r5, [r2, r3, lsl #2]
   20168:	cmp	r5, #0
   2016c:	beq	20200 <__assert_fail@plt+0xd784>
   20170:	add	r0, r2, r3, lsl #2
   20174:	ldr	r4, [r0, #-4]
   20178:	add	r0, r3, #1
   2017c:	str	r0, [r1]
   20180:	movw	r1, #64176	; 0xfab0
   20184:	mov	r0, r5
   20188:	movt	r1, #4
   2018c:	bl	12a70 <strspn@plt>
   20190:	cmp	r0, #1
   20194:	blt	20208 <__assert_fail@plt+0xd78c>
   20198:	ldrb	r0, [r5, r0]
   2019c:	cmp	r0, #0
   201a0:	bne	20208 <__assert_fail@plt+0xd78c>
   201a4:	movw	r0, #15980	; 0x3e6c
   201a8:	movt	r0, #6
   201ac:	ldr	r1, [r0, #72]	; 0x48
   201b0:	mov	r0, r5
   201b4:	bl	22f50 <__assert_fail@plt+0x104d4>
   201b8:	cmp	r0, #0
   201bc:	str	r0, [r6]
   201c0:	blt	20208 <__assert_fail@plt+0xd78c>
   201c4:	movw	r1, #15572	; 0x3cd4
   201c8:	movt	r1, #6
   201cc:	ldr	r0, [r1]
   201d0:	cmp	r0, #0
   201d4:	bne	201e8 <__assert_fail@plt+0xd76c>
   201d8:	movw	r0, #272	; 0x110
   201dc:	movt	r0, #5
   201e0:	add	r0, r0, #1296	; 0x510
   201e4:	str	r0, [r1]
   201e8:	bl	18408 <__assert_fail@plt+0x598c>
   201ec:	mov	r1, #0
   201f0:	strh	r1, [r0, #18]
   201f4:	mov	r1, #1065353216	; 0x3f800000
   201f8:	str	r1, [r0, #28]
   201fc:	mov	r0, #1
   20200:	sub	sp, fp, #16
   20204:	pop	{r4, r5, r6, sl, fp, pc}
   20208:	movw	r1, #64782	; 0xfd0e
   2020c:	mov	r0, #0
   20210:	mov	r2, #5
   20214:	movt	r1, #4
   20218:	bl	1253c <dcgettext@plt>
   2021c:	mov	r6, r0
   20220:	movw	r0, #15980	; 0x3e6c
   20224:	mov	r2, r5
   20228:	movt	r0, #6
   2022c:	ldr	r1, [r0, #72]	; 0x48
   20230:	mov	r0, #0
   20234:	bl	2f2ec <__assert_fail@plt+0x1c870>
   20238:	str	r0, [sp]
   2023c:	mov	r0, #1
   20240:	mov	r1, #0
   20244:	mov	r2, r6
   20248:	mov	r3, r4
   2024c:	bl	12674 <error@plt>
   20250:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20254:	add	fp, sp, #24
   20258:	sub	sp, sp, #8
   2025c:	movw	r4, #20424	; 0x4fc8
   20260:	movw	r8, #65199	; 0xfeaf
   20264:	mov	r6, r3
   20268:	mov	r3, r0
   2026c:	movw	r0, #65192	; 0xfea8
   20270:	movt	r4, #1
   20274:	movt	r0, #4
   20278:	movt	r8, #4
   2027c:	cmp	r6, r4
   20280:	moveq	r8, r0
   20284:	mov	r0, #0
   20288:	cmp	r3, #0
   2028c:	beq	204d0 <__assert_fail@plt+0xda54>
   20290:	ldr	r7, [r1]
   20294:	ldr	r5, [r3, r7, lsl #2]
   20298:	cmp	r5, #0
   2029c:	beq	204d0 <__assert_fail@plt+0xda54>
   202a0:	add	r0, r7, #1
   202a4:	str	r0, [r1]
   202a8:	ldrb	r0, [r5]
   202ac:	cmp	r0, #0
   202b0:	beq	20568 <__assert_fail@plt+0xdaec>
   202b4:	mov	r0, r2
   202b8:	mov	r1, r6
   202bc:	mov	r2, r5
   202c0:	bl	18374 <__assert_fail@plt+0x58f8>
   202c4:	mov	r1, #0
   202c8:	vldr	s0, [pc, #676]	; 20574 <__assert_fail@plt+0xdaf8>
   202cc:	vldr	s2, [pc, #676]	; 20578 <__assert_fail@plt+0xdafc>
   202d0:	vldr	s4, [pc, #692]	; 2058c <__assert_fail@plt+0xdb10>
   202d4:	vldr	s6, [pc, #684]	; 20588 <__assert_fail@plt+0xdb0c>
   202d8:	vldr	s10, [pc, #676]	; 20584 <__assert_fail@plt+0xdb08>
   202dc:	vldr	s12, [pc, #668]	; 20580 <__assert_fail@plt+0xdb04>
   202e0:	vldr	s14, [pc, #660]	; 2057c <__assert_fail@plt+0xdb00>
   202e4:	mov	r3, #1
   202e8:	vmov.f32	s8, #108	; 0x3f600000  0.875
   202ec:	str	r1, [r0, #28]
   202f0:	subs	r1, r6, r4
   202f4:	clz	r2, r1
   202f8:	movwne	r1, #1
   202fc:	strb	r1, [r0, #19]
   20300:	lsr	r1, r2, #5
   20304:	mvn	r2, #67	; 0x43
   20308:	strb	r1, [r0, #18]
   2030c:	add	r1, r0, #40	; 0x28
   20310:	ldrb	r4, [r5]
   20314:	uxtab	r7, r2, r4
   20318:	mov	r6, r5
   2031c:	cmp	r7, #47	; 0x2f
   20320:	bhi	204c0 <__assert_fail@plt+0xda44>
   20324:	add	r4, pc, #8
   20328:	mov	r5, #0
   2032c:	vmov.f32	s1, s2
   20330:	ldr	pc, [r4, r7, lsl #2]
   20334:	andeq	r0, r2, r4, ror #9
   20338:	ldrdeq	r0, [r2], -r8
   2033c:	ldrdeq	r0, [r2], -r8
   20340:	ldrdeq	r0, [r2], -r8
   20344:	ldrdeq	r0, [r2], -r8
   20348:	ldrdeq	r0, [r2], -r8
   2034c:	ldrdeq	r0, [r2], -r8
   20350:	ldrdeq	r0, [r2], -r8
   20354:	ldrdeq	r0, [r2], -r8
   20358:	ldrdeq	r0, [r2], -r8
   2035c:	ldrdeq	r0, [r2], -r8
   20360:	ldrdeq	r0, [r2], -r8
   20364:	ldrdeq	r0, [r2], -r8
   20368:	ldrdeq	r0, [r2], -r8
   2036c:	ldrdeq	r0, [r2], -r8
   20370:	ldrdeq	r0, [r2], -r8
   20374:	ldrdeq	r0, [r2], -r8
   20378:	ldrdeq	r0, [r2], -r8
   2037c:	ldrdeq	r0, [r2], -r8
   20380:	ldrdeq	r0, [r2], -r8
   20384:	ldrdeq	r0, [r2], -r8
   20388:	ldrdeq	r0, [r2], -r8
   2038c:	ldrdeq	r0, [r2], -r8
   20390:	ldrdeq	r0, [r2], -r8
   20394:	ldrdeq	r0, [r2], -r8
   20398:	ldrdeq	r0, [r2], -r8
   2039c:	ldrdeq	r0, [r2], -r8
   203a0:	ldrdeq	r0, [r2], -r8
   203a4:	ldrdeq	r0, [r2], -r8
   203a8:	ldrdeq	r0, [r2], -r8
   203ac:	andeq	r0, r2, r4, ror r4
   203b0:	strdeq	r0, [r2], -r4
   203b4:	andeq	r0, r2, ip, lsr r4
   203b8:	ldrdeq	r0, [r2], -r8
   203bc:	andeq	r0, r2, ip, ror #8
   203c0:	ldrdeq	r0, [r2], -r8
   203c4:	ldrdeq	r0, [r2], -r8
   203c8:	ldrdeq	r0, [r2], -r8
   203cc:	ldrdeq	r0, [r2], -r8
   203d0:	ldrdeq	r0, [r2], -r8
   203d4:	andeq	r0, r2, r4, asr r4
   203d8:	ldrdeq	r0, [r2], -r8
   203dc:	ldrdeq	r0, [r2], -r8
   203e0:	ldrdeq	r0, [r2], -r8
   203e4:	andeq	r0, r2, ip, lsl #8
   203e8:	ldrdeq	r0, [r2], -r8
   203ec:	ldrdeq	r0, [r2], -r8
   203f0:	andeq	r0, r2, r4, lsr #8
   203f4:	mov	r5, #1
   203f8:	vmov.f32	s1, s4
   203fc:	ldrb	r7, [r1, r5]
   20400:	cmp	r7, #0
   20404:	beq	20480 <__assert_fail@plt+0xda04>
   20408:	b	20514 <__assert_fail@plt+0xda98>
   2040c:	mov	r5, #5
   20410:	vmov.f32	s1, s12
   20414:	ldrb	r7, [r1, r5]
   20418:	cmp	r7, #0
   2041c:	beq	20480 <__assert_fail@plt+0xda04>
   20420:	b	20514 <__assert_fail@plt+0xda98>
   20424:	mov	r5, #6
   20428:	vmov.f32	s1, s14
   2042c:	ldrb	r7, [r1, r5]
   20430:	cmp	r7, #0
   20434:	beq	20480 <__assert_fail@plt+0xda04>
   20438:	b	20514 <__assert_fail@plt+0xda98>
   2043c:	mov	r5, #2
   20440:	vmov.f32	s1, s6
   20444:	ldrb	r7, [r1, r5]
   20448:	cmp	r7, #0
   2044c:	beq	20480 <__assert_fail@plt+0xda04>
   20450:	b	20514 <__assert_fail@plt+0xda98>
   20454:	mov	r5, #4
   20458:	vmov.f32	s1, s10
   2045c:	ldrb	r7, [r1, r5]
   20460:	cmp	r7, #0
   20464:	beq	20480 <__assert_fail@plt+0xda04>
   20468:	b	20514 <__assert_fail@plt+0xda98>
   2046c:	mov	r5, #3
   20470:	vmov.f32	s1, s8
   20474:	ldrb	r7, [r1, r5]
   20478:	cmp	r7, #0
   2047c:	bne	20514 <__assert_fail@plt+0xda98>
   20480:	vadd.f32	s0, s1, s0
   20484:	vstr	s0, [r0, #28]
   20488:	strb	r3, [r1, r5]
   2048c:	mov	r5, r6
   20490:	ldrb	r4, [r5, #1]!
   20494:	cmp	r4, #0
   20498:	beq	20314 <__assert_fail@plt+0xd898>
   2049c:	cmp	r4, #44	; 0x2c
   204a0:	bne	20540 <__assert_fail@plt+0xdac4>
   204a4:	ldrb	r4, [r6, #2]!
   204a8:	cmp	r4, #0
   204ac:	mov	r5, r6
   204b0:	bne	20314 <__assert_fail@plt+0xd898>
   204b4:	movw	r1, #65487	; 0xffcf
   204b8:	movt	r1, #4
   204bc:	b	20548 <__assert_fail@plt+0xdacc>
   204c0:	uxtb	r0, r4
   204c4:	cmp	r0, #0
   204c8:	bne	204d8 <__assert_fail@plt+0xda5c>
   204cc:	mov	r0, #1
   204d0:	sub	sp, fp, #24
   204d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   204d8:	movw	r1, #65357	; 0xff4d
   204dc:	movt	r1, #4
   204e0:	b	204ec <__assert_fail@plt+0xda70>
   204e4:	movw	r1, #65256	; 0xfee8
   204e8:	movt	r1, #4
   204ec:	mov	r0, #0
   204f0:	mov	r2, #5
   204f4:	bl	1253c <dcgettext@plt>
   204f8:	mov	r2, r0
   204fc:	ldrb	r0, [r6]
   20500:	str	r0, [sp]
   20504:	mov	r0, #1
   20508:	mov	r1, #0
   2050c:	mov	r3, r8
   20510:	bl	12674 <error@plt>
   20514:	movw	r1, #65384	; 0xff68
   20518:	mov	r0, #0
   2051c:	mov	r2, #5
   20520:	movt	r1, #4
   20524:	bl	1253c <dcgettext@plt>
   20528:	ldrb	r3, [r6]
   2052c:	mov	r2, r0
   20530:	mov	r0, #1
   20534:	mov	r1, #0
   20538:	str	r8, [sp]
   2053c:	bl	12674 <error@plt>
   20540:	movw	r1, #65437	; 0xff9d
   20544:	movt	r1, #4
   20548:	mov	r0, #0
   2054c:	mov	r2, #5
   20550:	bl	1253c <dcgettext@plt>
   20554:	mov	r2, r0
   20558:	mov	r0, #1
   2055c:	mov	r1, #0
   20560:	mov	r3, r8
   20564:	bl	12674 <error@plt>
   20568:	movw	r1, #65205	; 0xfeb5
   2056c:	movt	r1, #4
   20570:	b	20548 <__assert_fail@plt+0xdacc>
   20574:	andeq	r0, r0, r0
   20578:	bcc	1a52830 <stdout@@GLIBC_2.4+0x19ef2dc>
   2057c:			; <UNDEFINED> instruction: 0x378560fd
   20580:	usatcc	r7, #29, lr, asr #16
   20584:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   20588:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   2058c:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   20590:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20594:	add	fp, sp, #28
   20598:	sub	sp, sp, #20
   2059c:	movw	r4, #15580	; 0x3cdc
   205a0:	mov	r6, r2
   205a4:	str	r1, [sp, #12]
   205a8:	mov	r8, r0
   205ac:	ldr	r5, [r0, #12]
   205b0:	ldr	r0, [fp, #20]
   205b4:	ldr	r1, [fp, #12]
   205b8:	ldr	r2, [fp, #8]
   205bc:	mov	sl, r3
   205c0:	movt	r4, #6
   205c4:	ldr	r7, [r4]
   205c8:	cmp	r7, #0
   205cc:	bne	205f4 <__assert_fail@plt+0xdb78>
   205d0:	add	r0, r5, #1
   205d4:	mov	r7, r1
   205d8:	mov	r9, r2
   205dc:	bl	309ec <__assert_fail@plt+0x1df70>
   205e0:	mov	r1, r7
   205e4:	mov	r7, r0
   205e8:	ldr	r0, [fp, #20]
   205ec:	mov	r2, r9
   205f0:	str	r7, [r4]
   205f4:	add	r0, r0, r1
   205f8:	sub	r9, r5, #1
   205fc:	cmp	r2, #0
   20600:	str	r0, [sp, #16]
   20604:	beq	206c8 <__assert_fail@plt+0xdc4c>
   20608:	ldr	r1, [r8, #24]
   2060c:	mov	r0, r6
   20610:	mov	r4, r8
   20614:	bl	25d88 <__assert_fail@plt+0x1330c>
   20618:	cmp	r0, #0
   2061c:	mov	r5, sl
   20620:	subne	r5, r0, r6
   20624:	cmp	r9, r5
   20628:	bls	20754 <__assert_fail@plt+0xdcd8>
   2062c:	mov	r8, r0
   20630:	mov	r0, r7
   20634:	mov	r1, r6
   20638:	mov	r2, r5
   2063c:	bl	12818 <strncpy@plt>
   20640:	sub	sl, sl, r5
   20644:	add	r6, r6, r5
   20648:	add	r7, r7, r5
   2064c:	sub	r9, r9, r5
   20650:	cmp	r8, #0
   20654:	beq	206b4 <__assert_fail@plt+0xdc38>
   20658:	ldr	r5, [sp, #16]
   2065c:	mov	r8, r4
   20660:	cmp	r9, r5
   20664:	bls	20758 <__assert_fail@plt+0xdcdc>
   20668:	ldr	r1, [fp, #8]
   2066c:	mov	r0, r7
   20670:	bl	12638 <strcpy@plt>
   20674:	ldr	r0, [fp, #12]
   20678:	ldr	r1, [fp, #16]
   2067c:	mov	r4, r5
   20680:	add	r5, r7, r0
   20684:	mov	r0, r5
   20688:	bl	12638 <strcpy@plt>
   2068c:	ldr	r0, [fp, #20]
   20690:	sub	r9, r9, r4
   20694:	add	r7, r5, r0
   20698:	ldr	r0, [r8, #20]
   2069c:	sub	sl, sl, r0
   206a0:	add	r6, r6, r0
   206a4:	ldrb	r0, [r6]
   206a8:	cmp	r0, #0
   206ac:	bne	20608 <__assert_fail@plt+0xdb8c>
   206b0:	b	20764 <__assert_fail@plt+0xdce8>
   206b4:	mov	r8, r4
   206b8:	ldrb	r0, [r6]
   206bc:	cmp	r0, #0
   206c0:	bne	20608 <__assert_fail@plt+0xdb8c>
   206c4:	b	20764 <__assert_fail@plt+0xdce8>
   206c8:	ldr	r1, [r8, #24]
   206cc:	mov	r0, r6
   206d0:	bl	25d88 <__assert_fail@plt+0x1330c>
   206d4:	cmp	r0, #0
   206d8:	mov	r4, sl
   206dc:	subne	r4, r0, r6
   206e0:	cmp	r9, r4
   206e4:	bls	20758 <__assert_fail@plt+0xdcdc>
   206e8:	mov	r5, r0
   206ec:	mov	r0, r7
   206f0:	mov	r1, r6
   206f4:	mov	r2, r4
   206f8:	bl	12818 <strncpy@plt>
   206fc:	sub	sl, sl, r4
   20700:	add	r6, r6, r4
   20704:	add	r7, r7, r4
   20708:	sub	r9, r9, r4
   2070c:	cmp	r5, #0
   20710:	beq	20744 <__assert_fail@plt+0xdcc8>
   20714:	ldr	r4, [sp, #16]
   20718:	cmp	r9, r4
   2071c:	bls	20758 <__assert_fail@plt+0xdcdc>
   20720:	ldr	r1, [fp, #16]
   20724:	mov	r0, r7
   20728:	bl	12638 <strcpy@plt>
   2072c:	ldr	r0, [fp, #20]
   20730:	sub	r9, r9, r4
   20734:	add	r7, r7, r0
   20738:	ldr	r0, [r8, #20]
   2073c:	sub	sl, sl, r0
   20740:	add	r6, r6, r0
   20744:	ldrb	r0, [r6]
   20748:	cmp	r0, #0
   2074c:	bne	206c8 <__assert_fail@plt+0xdc4c>
   20750:	b	20764 <__assert_fail@plt+0xdce8>
   20754:	mov	r8, r4
   20758:	ldrb	r0, [r6]
   2075c:	cmp	r0, #0
   20760:	bne	207a0 <__assert_fail@plt+0xdd24>
   20764:	movw	r2, #15580	; 0x3cdc
   20768:	mov	r1, #0
   2076c:	ldr	r0, [fp, #24]
   20770:	strb	r1, [r7], #1
   20774:	movt	r2, #6
   20778:	str	r1, [sp]
   2077c:	str	r1, [sp, #4]
   20780:	ldr	r1, [sp, #12]
   20784:	ldr	r2, [r2]
   20788:	str	r0, [sp, #8]
   2078c:	mov	r0, r8
   20790:	sub	r3, r7, r2
   20794:	bl	207c4 <__assert_fail@plt+0xdd48>
   20798:	sub	sp, fp, #28
   2079c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207a0:	movw	r1, #1664	; 0x680
   207a4:	mov	r0, #0
   207a8:	mov	r2, #5
   207ac:	movt	r1, #5
   207b0:	bl	1253c <dcgettext@plt>
   207b4:	mov	r2, r0
   207b8:	mov	r0, #1
   207bc:	mov	r1, #0
   207c0:	bl	12674 <error@plt>
   207c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207c8:	add	fp, sp, #28
   207cc:	sub	sp, sp, #4
   207d0:	cmp	r2, #0
   207d4:	beq	209f0 <__assert_fail@plt+0xdf74>
   207d8:	mov	r5, r0
   207dc:	ldr	r6, [fp, #16]
   207e0:	ldr	r0, [fp, #12]
   207e4:	movw	sl, #2503	; 0x9c7
   207e8:	mov	r9, r3
   207ec:	mov	r8, r2
   207f0:	mov	r4, r1
   207f4:	movt	sl, #5
   207f8:	cmp	r2, sl
   207fc:	beq	208bc <__assert_fail@plt+0xde40>
   20800:	ldr	r1, [r4, #16]
   20804:	add	r0, r0, r9
   20808:	add	r0, r0, r1
   2080c:	ldr	r1, [r5, #12]
   20810:	cmp	r0, r1
   20814:	bls	20878 <__assert_fail@plt+0xddfc>
   20818:	cmp	r6, #0
   2081c:	bne	20a10 <__assert_fail@plt+0xdf94>
   20820:	ldr	r0, [r5, #28]
   20824:	ldr	r1, [r4]
   20828:	cmp	r1, r0
   2082c:	beq	20a10 <__assert_fail@plt+0xdf94>
   20830:	ldr	r0, [r5, #24]
   20834:	cmp	r0, #0
   20838:	bne	20a1c <__assert_fail@plt+0xdfa0>
   2083c:	ldr	r0, [r5]
   20840:	cmp	r0, #0
   20844:	beq	2085c <__assert_fail@plt+0xdde0>
   20848:	ldr	r0, [r5, #36]	; 0x24
   2084c:	cmp	r0, #0
   20850:	ldreq	r0, [r5, #40]	; 0x28
   20854:	cmpeq	r0, #0
   20858:	bne	20a1c <__assert_fail@plt+0xdfa0>
   2085c:	mov	r0, r5
   20860:	mov	r1, r4
   20864:	bl	20a40 <__assert_fail@plt+0xdfc4>
   20868:	ldr	r0, [r5, #40]	; 0x28
   2086c:	cmp	r0, #0
   20870:	bne	2088c <__assert_fail@plt+0xde10>
   20874:	b	208a0 <__assert_fail@plt+0xde24>
   20878:	cmp	r6, #0
   2087c:	bne	208a0 <__assert_fail@plt+0xde24>
   20880:	ldr	r0, [r5, #40]	; 0x28
   20884:	cmp	r0, #0
   20888:	beq	208a0 <__assert_fail@plt+0xde24>
   2088c:	ldr	r1, [r5, #28]
   20890:	ldr	r2, [r4]
   20894:	sub	r1, r2, r1
   20898:	cmp	r1, r0
   2089c:	beq	208b0 <__assert_fail@plt+0xde34>
   208a0:	ldr	r0, [r5, #16]
   208a4:	ldr	r1, [r4]
   208a8:	cmp	r1, r0
   208ac:	bne	208bc <__assert_fail@plt+0xde40>
   208b0:	mov	r0, r5
   208b4:	mov	r1, r4
   208b8:	bl	20a40 <__assert_fail@plt+0xdfc4>
   208bc:	cmp	r6, #0
   208c0:	moveq	r0, #1
   208c4:	streq	r0, [r4, #28]
   208c8:	ldr	r0, [r4]
   208cc:	ldr	r1, [r4, #8]
   208d0:	cmp	r0, r1
   208d4:	bcc	2090c <__assert_fail@plt+0xde90>
   208d8:	ldr	r0, [r4, #4]
   208dc:	cmp	r0, #0
   208e0:	beq	208f8 <__assert_fail@plt+0xde7c>
   208e4:	lsl	r2, r1, #1
   208e8:	lsl	r1, r1, #3
   208ec:	str	r2, [r4, #8]
   208f0:	bl	30a34 <__assert_fail@plt+0x1dfb8>
   208f4:	b	20908 <__assert_fail@plt+0xde8c>
   208f8:	mov	r0, #64	; 0x40
   208fc:	str	r0, [r4, #8]
   20900:	mov	r0, #256	; 0x100
   20904:	bl	309ec <__assert_fail@plt+0x1df70>
   20908:	str	r0, [r4, #4]
   2090c:	cmp	r8, sl
   20910:	beq	20998 <__assert_fail@plt+0xdf1c>
   20914:	ldm	r4, {r2, r3}
   20918:	mov	sl, r6
   2091c:	ldr	r1, [fp, #8]
   20920:	ldr	r6, [r4, #12]
   20924:	ldr	r0, [r4, #16]
   20928:	add	r7, r2, #1
   2092c:	cmp	r1, #0
   20930:	str	r7, [r4]
   20934:	add	r7, r6, r0
   20938:	str	r7, [r3, r2, lsl #2]
   2093c:	beq	2095c <__assert_fail@plt+0xdee0>
   20940:	ldr	r2, [r4, #12]
   20944:	add	r0, r2, r0
   20948:	bl	12638 <strcpy@plt>
   2094c:	ldr	r0, [r4, #16]
   20950:	ldr	r1, [fp, #12]
   20954:	add	r0, r0, r1
   20958:	str	r0, [r4, #16]
   2095c:	ldr	r1, [r4, #12]
   20960:	mov	r6, sl
   20964:	add	r0, r1, r0
   20968:	mov	r1, r8
   2096c:	bl	12638 <strcpy@plt>
   20970:	ldr	r0, [r4, #16]
   20974:	cmp	sl, #0
   20978:	add	r0, r0, r9
   2097c:	str	r0, [r4, #16]
   20980:	beq	209b0 <__assert_fail@plt+0xdf34>
   20984:	ldr	r0, [r5, #16]
   20988:	ldr	r1, [r4]
   2098c:	cmp	r1, r0
   20990:	beq	209d0 <__assert_fail@plt+0xdf54>
   20994:	b	209dc <__assert_fail@plt+0xdf60>
   20998:	ldm	r4, {r0, r1}
   2099c:	add	r2, r0, #1
   209a0:	str	r2, [r4]
   209a4:	mov	r2, #0
   209a8:	str	r2, [r1, r0, lsl #2]
   209ac:	b	209dc <__assert_fail@plt+0xdf60>
   209b0:	ldr	r0, [r5, #40]	; 0x28
   209b4:	cmp	r0, #0
   209b8:	beq	20984 <__assert_fail@plt+0xdf08>
   209bc:	ldr	r1, [r5, #28]
   209c0:	ldr	r2, [r4]
   209c4:	sub	r1, r2, r1
   209c8:	cmp	r1, r0
   209cc:	bne	20984 <__assert_fail@plt+0xdf08>
   209d0:	mov	r0, r5
   209d4:	mov	r1, r4
   209d8:	bl	20a40 <__assert_fail@plt+0xdfc4>
   209dc:	cmp	r6, #0
   209e0:	ldrne	r0, [r4, #16]
   209e4:	strne	r0, [r4, #20]
   209e8:	sub	sp, fp, #28
   209ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209f0:	movw	r0, #1875	; 0x753
   209f4:	movw	r1, #1701	; 0x6a5
   209f8:	movw	r3, #1887	; 0x75f
   209fc:	movw	r2, #341	; 0x155
   20a00:	movt	r0, #5
   20a04:	movt	r1, #5
   20a08:	movt	r3, #5
   20a0c:	bl	12a7c <__assert_fail@plt>
   20a10:	movw	r1, #2005	; 0x7d5
   20a14:	movt	r1, #5
   20a18:	b	20a24 <__assert_fail@plt+0xdfa8>
   20a1c:	movw	r1, #2064	; 0x810
   20a20:	movt	r1, #5
   20a24:	mov	r0, #0
   20a28:	mov	r2, #5
   20a2c:	bl	1253c <dcgettext@plt>
   20a30:	mov	r2, r0
   20a34:	mov	r0, #1
   20a38:	mov	r1, #0
   20a3c:	bl	12674 <error@plt>
   20a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a44:	add	fp, sp, #28
   20a48:	sub	sp, sp, #12
   20a4c:	mov	r9, r0
   20a50:	mov	r0, #1
   20a54:	mov	r8, r1
   20a58:	str	r0, [r1, #28]
   20a5c:	ldr	r2, [r1]
   20a60:	ldmib	r1, {r0, r1}
   20a64:	cmp	r2, r1
   20a68:	bcc	20a9c <__assert_fail@plt+0xe020>
   20a6c:	cmp	r0, #0
   20a70:	beq	20a88 <__assert_fail@plt+0xe00c>
   20a74:	lsl	r2, r1, #1
   20a78:	lsl	r1, r1, #3
   20a7c:	str	r2, [r8, #8]
   20a80:	bl	30a34 <__assert_fail@plt+0x1dfb8>
   20a84:	b	20a98 <__assert_fail@plt+0xe01c>
   20a88:	mov	r0, #64	; 0x40
   20a8c:	str	r0, [r8, #8]
   20a90:	mov	r0, #256	; 0x100
   20a94:	bl	309ec <__assert_fail@plt+0x1df70>
   20a98:	str	r0, [r8, #4]
   20a9c:	ldr	r2, [r8]
   20aa0:	mov	r3, #0
   20aa4:	adds	r1, r2, #1
   20aa8:	str	r1, [r8]
   20aac:	str	r3, [r0, r2, lsl #2]
   20ab0:	beq	20df8 <__assert_fail@plt+0xe37c>
   20ab4:	ldr	r0, [r8, #4]
   20ab8:	ldr	r0, [r0, r2, lsl #2]
   20abc:	cmp	r0, #0
   20ac0:	bne	20e18 <__assert_fail@plt+0xe39c>
   20ac4:	mov	r0, #4
   20ac8:	add	r0, r0, r1, lsl #2
   20acc:	bl	309ec <__assert_fail@plt+0x1df70>
   20ad0:	ldr	r1, [r8]
   20ad4:	mov	sl, r0
   20ad8:	ldr	r0, [r9, #28]
   20adc:	mov	lr, #0
   20ae0:	str	r9, [sp, #4]
   20ae4:	mov	r5, r1
   20ae8:	cmp	r0, #0
   20aec:	beq	20b5c <__assert_fail@plt+0xe0e0>
   20af0:	ldr	ip, [r8, #4]
   20af4:	mov	r4, #0
   20af8:	cmp	r0, #4
   20afc:	bcc	20b40 <__assert_fail@plt+0xe0c4>
   20b00:	add	r2, ip, r0, lsl #2
   20b04:	cmp	sl, r2
   20b08:	bcs	20b18 <__assert_fail@plt+0xe09c>
   20b0c:	add	r2, sl, r0, lsl #2
   20b10:	cmp	r2, ip
   20b14:	bhi	20b40 <__assert_fail@plt+0xe0c4>
   20b18:	bic	r4, r0, #3
   20b1c:	mov	r6, sl
   20b20:	mov	r2, ip
   20b24:	mov	r3, r4
   20b28:	vld1.32	{d16-d17}, [r2]!
   20b2c:	subs	r3, r3, #4
   20b30:	vst1.32	{d16-d17}, [r6]!
   20b34:	bne	20b28 <__assert_fail@plt+0xe0ac>
   20b38:	cmp	r0, r4
   20b3c:	beq	20b5c <__assert_fail@plt+0xe0e0>
   20b40:	sub	r7, r0, r4
   20b44:	add	r2, ip, r4, lsl #2
   20b48:	add	r3, sl, r4, lsl #2
   20b4c:	ldr	r6, [r2], #4
   20b50:	subs	r7, r7, #1
   20b54:	str	r6, [r3], #4
   20b58:	bne	20b4c <__assert_fail@plt+0xe0d0>
   20b5c:	cmp	r0, r5
   20b60:	mov	r7, r0
   20b64:	str	lr, [sp, #8]
   20b68:	bcs	20c34 <__assert_fail@plt+0xe1b8>
   20b6c:	add	r2, r0, lr
   20b70:	mov	r7, r0
   20b74:	cmp	r2, r1
   20b78:	bcs	20c34 <__assert_fail@plt+0xe1b8>
   20b7c:	add	lr, r0, lr
   20b80:	sub	r7, r0, r5
   20b84:	sub	r4, lr, r1
   20b88:	mov	r3, r7
   20b8c:	cmp	r4, r7
   20b90:	movhi	r3, r4
   20b94:	rsb	ip, r3, #0
   20b98:	ldr	r3, [r8, #4]
   20b9c:	cmp	ip, #4
   20ba0:	bcs	20bac <__assert_fail@plt+0xe130>
   20ba4:	mov	r7, r0
   20ba8:	b	20c18 <__assert_fail@plt+0xe19c>
   20bac:	cmp	r4, r7
   20bb0:	movhi	r7, r4
   20bb4:	sub	r4, lr, r7
   20bb8:	add	r6, r3, r4, lsl #2
   20bbc:	add	r4, sl, r0, lsl #2
   20bc0:	cmp	r4, r6
   20bc4:	bcs	20be8 <__assert_fail@plt+0xe16c>
   20bc8:	lsl	r6, r0, #2
   20bcc:	sub	r6, r6, r7, lsl #2
   20bd0:	add	r7, r3, r2, lsl #2
   20bd4:	add	r6, sl, r6
   20bd8:	cmp	r6, r7
   20bdc:	bls	20be8 <__assert_fail@plt+0xe16c>
   20be0:	mov	r7, r0
   20be4:	b	20c18 <__assert_fail@plt+0xe19c>
   20be8:	bic	r6, ip, #3
   20bec:	add	r9, r3, lr, lsl #2
   20bf0:	add	r7, r0, r6
   20bf4:	add	r2, r2, r6
   20bf8:	mov	lr, r6
   20bfc:	vld1.32	{d16-d17}, [r9]!
   20c00:	subs	lr, lr, #4
   20c04:	vst1.32	{d16-d17}, [r4]!
   20c08:	bne	20bfc <__assert_fail@plt+0xe180>
   20c0c:	ldr	r9, [sp, #4]
   20c10:	cmp	r6, ip
   20c14:	beq	20c34 <__assert_fail@plt+0xe1b8>
   20c18:	ldr	r6, [r3, r2, lsl #2]
   20c1c:	add	r2, r2, #1
   20c20:	cmp	r2, r1
   20c24:	str	r6, [sl, r7, lsl #2]
   20c28:	add	r7, r7, #1
   20c2c:	cmpcc	r7, r5
   20c30:	bcc	20c18 <__assert_fail@plt+0xe19c>
   20c34:	cmp	r7, r0
   20c38:	bcc	20db4 <__assert_fail@plt+0xe338>
   20c3c:	mov	r0, #0
   20c40:	mov	r2, r7
   20c44:	mov	r3, sl
   20c48:	str	r0, [sl, r7, lsl #2]
   20c4c:	mov	r0, r9
   20c50:	ldr	r1, [r8, #24]
   20c54:	ldr	r6, [r9, #32]
   20c58:	blx	r6
   20c5c:	cmp	r0, #0
   20c60:	beq	20c8c <__assert_fail@plt+0xe210>
   20c64:	ldr	r0, [r8, #36]	; 0x24
   20c68:	cmp	r0, r5
   20c6c:	bcs	20ccc <__assert_fail@plt+0xe250>
   20c70:	ldr	r3, [sp, #8]
   20c74:	str	r5, [r8, #36]	; 0x24
   20c78:	mov	r0, r5
   20c7c:	ldr	r1, [r8, #40]	; 0x28
   20c80:	cmp	r1, r0
   20c84:	bhi	20ce4 <__assert_fail@plt+0xe268>
   20c88:	b	20d10 <__assert_fail@plt+0xe294>
   20c8c:	ldr	r0, [r9, #28]
   20c90:	add	r2, r0, #1
   20c94:	cmp	r5, r2
   20c98:	bls	20dd4 <__assert_fail@plt+0xe358>
   20c9c:	ldr	r1, [r8, #40]	; 0x28
   20ca0:	ldr	lr, [sp, #8]
   20ca4:	sub	r3, r1, #1
   20ca8:	cmp	r3, r5
   20cac:	strcs	r5, [r8, #40]	; 0x28
   20cb0:	movcs	r1, r5
   20cb4:	ldr	r3, [r8, #36]	; 0x24
   20cb8:	cmp	r3, #0
   20cbc:	cmpne	r1, r3
   20cc0:	bhi	20d3c <__assert_fail@plt+0xe2c0>
   20cc4:	lsr	r1, r5, #1
   20cc8:	b	20d54 <__assert_fail@plt+0xe2d8>
   20ccc:	ldr	r3, [sp, #8]
   20cd0:	cmp	r0, #0
   20cd4:	beq	20d10 <__assert_fail@plt+0xe294>
   20cd8:	ldr	r1, [r8, #40]	; 0x28
   20cdc:	cmp	r1, r0
   20ce0:	bls	20d10 <__assert_fail@plt+0xe294>
   20ce4:	sub	r0, r1, r0
   20ce8:	mov	r1, #0
   20cec:	cmp	r1, r0, lsr #1
   20cf0:	addeq	r5, r5, #1
   20cf4:	lsrne	r0, r0, #1
   20cf8:	addne	r5, r0, r5
   20cfc:	ldr	r0, [r9, #28]
   20d00:	cmp	r0, #0
   20d04:	bne	20d24 <__assert_fail@plt+0xe2a8>
   20d08:	mov	r2, r5
   20d0c:	b	20d30 <__assert_fail@plt+0xe2b4>
   20d10:	cmn	r5, #1
   20d14:	addne	r5, r5, #1
   20d18:	ldr	r0, [r9, #28]
   20d1c:	cmp	r0, #0
   20d20:	beq	20d08 <__assert_fail@plt+0xe28c>
   20d24:	add	r2, r0, #1
   20d28:	cmp	r5, r2
   20d2c:	movhi	r2, r5
   20d30:	add	r1, r7, r3
   20d34:	sub	lr, r1, r0
   20d38:	b	20d64 <__assert_fail@plt+0xe2e8>
   20d3c:	sub	r1, r1, r3
   20d40:	mov	r3, #0
   20d44:	cmp	r3, r1, lsr #1
   20d48:	subeq	r1, r5, #1
   20d4c:	lsrne	r1, r1, #1
   20d50:	subne	r1, r5, r1
   20d54:	cmp	r1, r2
   20d58:	movhi	r2, r1
   20d5c:	cmp	r0, #0
   20d60:	moveq	r2, r1
   20d64:	ldr	r1, [r8]
   20d68:	cmp	r2, #0
   20d6c:	add	r7, lr, #1
   20d70:	movweq	r2, #1
   20d74:	mov	r5, r2
   20d78:	sub	r3, r1, r0
   20d7c:	cmp	r7, r3
   20d80:	bcc	20ae8 <__assert_fail@plt+0xe06c>
   20d84:	mov	r0, sl
   20d88:	bl	32c40 <__assert_fail@plt+0x201c4>
   20d8c:	ldr	r0, [r9, #28]
   20d90:	mov	r1, #0
   20d94:	mvn	r2, #0
   20d98:	str	r1, [r8, #28]
   20d9c:	str	r2, [r8, #32]
   20da0:	str	r0, [r8]
   20da4:	ldr	r0, [r8, #20]
   20da8:	str	r0, [r8, #16]
   20dac:	sub	sp, fp, #28
   20db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20db4:	movw	r0, #2380	; 0x94c
   20db8:	movw	r1, #1701	; 0x6a5
   20dbc:	movw	r3, #2409	; 0x969
   20dc0:	mov	r2, #242	; 0xf2
   20dc4:	movt	r0, #5
   20dc8:	movt	r1, #5
   20dcc:	movt	r3, #5
   20dd0:	bl	12a7c <__assert_fail@plt>
   20dd4:	movw	r1, #1823	; 0x71f
   20dd8:	mov	r0, #0
   20ddc:	mov	r2, #5
   20de0:	movt	r1, #5
   20de4:	bl	1253c <dcgettext@plt>
   20de8:	mov	r2, r0
   20dec:	mov	r0, #1
   20df0:	mov	r1, #0
   20df4:	bl	12674 <error@plt>
   20df8:	movw	r0, #1681	; 0x691
   20dfc:	movw	r1, #1701	; 0x6a5
   20e00:	movw	r3, #1712	; 0x6b0
   20e04:	movw	r2, #261	; 0x105
   20e08:	movt	r0, #5
   20e0c:	movt	r1, #5
   20e10:	movt	r3, #5
   20e14:	bl	12a7c <__assert_fail@plt>
   20e18:	movw	r0, #1780	; 0x6f4
   20e1c:	movw	r1, #1701	; 0x6a5
   20e20:	movw	r3, #1712	; 0x6b0
   20e24:	movw	r2, #262	; 0x106
   20e28:	movt	r0, #5
   20e2c:	movt	r1, #5
   20e30:	movt	r3, #5
   20e34:	bl	12a7c <__assert_fail@plt>
   20e38:	ldr	r0, [r0, #28]
   20e3c:	mov	r2, #0
   20e40:	mvn	r3, #0
   20e44:	str	r2, [r1, #28]
   20e48:	str	r3, [r1, #32]
   20e4c:	str	r0, [r1]
   20e50:	ldr	r0, [r1, #20]
   20e54:	str	r0, [r1, #16]
   20e58:	bx	lr
   20e5c:	push	{fp, lr}
   20e60:	mov	fp, sp
   20e64:	mov	r0, #0
   20e68:	bl	12554 <sysconf@plt>
   20e6c:	cmp	r0, #0
   20e70:	mvnle	r0, #-2147483648	; 0x80000000
   20e74:	pop	{fp, pc}
   20e78:	push	{r4, r5, fp, lr}
   20e7c:	add	fp, sp, #8
   20e80:	movw	r0, #13628	; 0x353c
   20e84:	movt	r0, #6
   20e88:	ldr	r1, [r0]
   20e8c:	ldr	r0, [r1]
   20e90:	cmp	r0, #0
   20e94:	moveq	r4, #0
   20e98:	moveq	r0, r4
   20e9c:	popeq	{r4, r5, fp, pc}
   20ea0:	add	r5, r1, #4
   20ea4:	mov	r4, #0
   20ea8:	bl	12788 <strlen@plt>
   20eac:	add	r0, r4, r0
   20eb0:	add	r4, r0, #1
   20eb4:	ldr	r0, [r5], #4
   20eb8:	cmp	r0, #0
   20ebc:	bne	20ea8 <__assert_fail@plt+0xe42c>
   20ec0:	mov	r0, r4
   20ec4:	pop	{r4, r5, fp, pc}
   20ec8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20ecc:	add	fp, sp, #24
   20ed0:	mov	r4, r0
   20ed4:	movw	r0, #13628	; 0x353c
   20ed8:	mov	r5, r1
   20edc:	mov	r8, #0
   20ee0:	mov	r6, #0
   20ee4:	movt	r0, #6
   20ee8:	ldr	r1, [r0]
   20eec:	ldr	r0, [r1]
   20ef0:	cmp	r0, #0
   20ef4:	beq	20f18 <__assert_fail@plt+0xe49c>
   20ef8:	add	r7, r1, #4
   20efc:	mov	r6, #0
   20f00:	bl	12788 <strlen@plt>
   20f04:	add	r0, r6, r0
   20f08:	add	r6, r0, #1
   20f0c:	ldr	r0, [r7], #4
   20f10:	cmp	r0, #0
   20f14:	bne	20f00 <__assert_fail@plt+0xe484>
   20f18:	mov	r0, #4096	; 0x1000
   20f1c:	str	r0, [r4, #8]
   20f20:	mov	r0, #0
   20f24:	bl	12554 <sysconf@plt>
   20f28:	mov	r1, r0
   20f2c:	cmp	r0, #0
   20f30:	mov	r0, #1
   20f34:	str	r8, [r4]
   20f38:	mvnle	r1, #-2147483648	; 0x80000000
   20f3c:	cmp	r1, r6
   20f40:	str	r1, [r4, #4]
   20f44:	bcc	20fa0 <__assert_fail@plt+0xe524>
   20f48:	add	r2, r6, r5
   20f4c:	mov	r0, #2
   20f50:	cmp	r2, r1
   20f54:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   20f58:	sub	r0, r1, r6
   20f5c:	sub	r1, r0, r5
   20f60:	mvn	r0, #1
   20f64:	add	r0, r0, r1, lsr #2
   20f68:	str	r1, [r4, #4]
   20f6c:	cmp	r0, #0
   20f70:	str	r0, [r4, #16]
   20f74:	beq	20fa4 <__assert_fail@plt+0xe528>
   20f78:	movw	r2, #4036	; 0xfc4
   20f7c:	mov	r0, #0
   20f80:	movt	r2, #2
   20f84:	str	r0, [r4, #20]
   20f88:	str	r0, [r4, #24]
   20f8c:	str	r0, [r4, #28]
   20f90:	str	r2, [r4, #32]
   20f94:	str	r0, [r4, #36]	; 0x24
   20f98:	str	r0, [r4, #40]	; 0x28
   20f9c:	str	r1, [r4, #12]
   20fa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20fa4:	movw	r0, #2087	; 0x827
   20fa8:	movw	r1, #1701	; 0x6a5
   20fac:	movw	r3, #2110	; 0x83e
   20fb0:	movw	r2, #518	; 0x206
   20fb4:	movt	r0, #5
   20fb8:	movt	r1, #5
   20fbc:	movt	r3, #5
   20fc0:	bl	12a7c <__assert_fail@plt>
   20fc4:	mov	r0, #0
   20fc8:	bx	lr
   20fcc:	ldr	r1, [r0, #4]
   20fd0:	mov	r2, #0
   20fd4:	cmp	r2, r1, lsr #17
   20fd8:	beq	20fe8 <__assert_fail@plt+0xe56c>
   20fdc:	ldr	r1, [r0, #8]
   20fe0:	cmp	r1, #131072	; 0x20000
   20fe4:	movls	r1, #131072	; 0x20000
   20fe8:	str	r1, [r0, #12]
   20fec:	bx	lr
   20ff0:	push	{r4, r5, r6, sl, fp, lr}
   20ff4:	add	fp, sp, #16
   20ff8:	mov	r6, #0
   20ffc:	mov	r4, r1
   21000:	str	r6, [r1, #16]
   21004:	str	r6, [r1]
   21008:	str	r6, [r1, #4]
   2100c:	str	r6, [r1, #8]
   21010:	str	r6, [r1, #36]	; 0x24
   21014:	str	r6, [r1, #40]	; 0x28
   21018:	movw	r1, #63488	; 0xf800
   2101c:	ldr	r0, [r0, #12]
   21020:	movt	r1, #32767	; 0x7fff
   21024:	cmp	r0, r1
   21028:	bcs	21058 <__assert_fail@plt+0xe5dc>
   2102c:	add	r0, r0, #1
   21030:	mov	r5, r2
   21034:	bl	309ec <__assert_fail@plt+0x1df70>
   21038:	mvn	r1, #0
   2103c:	str	r0, [r4, #12]
   21040:	str	r6, [r4, #16]
   21044:	str	r6, [r4, #20]
   21048:	str	r5, [r4, #24]
   2104c:	str	r6, [r4, #28]
   21050:	str	r1, [r4, #32]
   21054:	pop	{r4, r5, r6, sl, fp, pc}
   21058:	movw	r0, #2185	; 0x889
   2105c:	movw	r1, #1701	; 0x6a5
   21060:	movw	r3, #2220	; 0x8ac
   21064:	mov	r2, #572	; 0x23c
   21068:	movt	r0, #5
   2106c:	movt	r1, #5
   21070:	movt	r3, #5
   21074:	bl	12a7c <__assert_fail@plt>
   21078:	push	{r4, r5, r6, sl, fp, lr}
   2107c:	add	fp, sp, #16
   21080:	sub	sp, sp, #16
   21084:	mov	r1, r0
   21088:	ldr	r0, [r0]
   2108c:	cmp	r0, #0
   21090:	beq	210bc <__assert_fail@plt+0xe640>
   21094:	add	r6, r1, #4
   21098:	mov	r5, #0
   2109c:	mov	r4, #0
   210a0:	bl	12788 <strlen@plt>
   210a4:	add	r4, r0, r4
   210a8:	ldr	r0, [r6, r5, lsl #2]
   210ac:	add	r5, r5, #1
   210b0:	cmp	r0, #0
   210b4:	bne	210a0 <__assert_fail@plt+0xe624>
   210b8:	b	210c4 <__assert_fail@plt+0xe648>
   210bc:	mov	r4, #0
   210c0:	mov	r5, #0
   210c4:	movw	r0, #2305	; 0x901
   210c8:	movt	r0, #5
   210cc:	bl	126b0 <getenv@plt>
   210d0:	cmp	r0, #0
   210d4:	beq	21108 <__assert_fail@plt+0xe68c>
   210d8:	mov	r1, #0
   210dc:	add	r3, sp, #8
   210e0:	mov	r2, #10
   210e4:	str	r1, [sp]
   210e8:	add	r1, sp, #12
   210ec:	bl	31034 <__assert_fail@plt+0x1e5b8>
   210f0:	cmp	r0, #0
   210f4:	bne	21160 <__assert_fail@plt+0xe6e4>
   210f8:	ldr	r1, [sp, #8]
   210fc:	mov	r0, #1
   21100:	cmp	r1, r5
   21104:	bcc	2114c <__assert_fail@plt+0xe6d0>
   21108:	movw	r0, #2342	; 0x926
   2110c:	movt	r0, #5
   21110:	bl	126b0 <getenv@plt>
   21114:	cmp	r0, #0
   21118:	beq	21154 <__assert_fail@plt+0xe6d8>
   2111c:	mov	r1, #0
   21120:	add	r3, sp, #8
   21124:	mov	r2, #10
   21128:	str	r1, [sp]
   2112c:	add	r1, sp, #12
   21130:	bl	31034 <__assert_fail@plt+0x1e5b8>
   21134:	cmp	r0, #0
   21138:	bne	21194 <__assert_fail@plt+0xe718>
   2113c:	ldr	r1, [sp, #8]
   21140:	mov	r0, #1
   21144:	cmp	r1, r4
   21148:	movcs	r0, #0
   2114c:	sub	sp, fp, #16
   21150:	pop	{r4, r5, r6, sl, fp, pc}
   21154:	mov	r0, #0
   21158:	sub	sp, fp, #16
   2115c:	pop	{r4, r5, r6, sl, fp, pc}
   21160:	bl	127d0 <__errno_location@plt>
   21164:	ldr	r4, [r0]
   21168:	movw	r1, #2515	; 0x9d3
   2116c:	mov	r0, #0
   21170:	mov	r2, #5
   21174:	movt	r1, #5
   21178:	bl	1253c <dcgettext@plt>
   2117c:	movw	r3, #2305	; 0x901
   21180:	mov	r2, r0
   21184:	movt	r3, #5
   21188:	mov	r0, #1
   2118c:	mov	r1, r4
   21190:	bl	12674 <error@plt>
   21194:	bl	127d0 <__errno_location@plt>
   21198:	ldr	r4, [r0]
   2119c:	movw	r1, #2515	; 0x9d3
   211a0:	mov	r0, #0
   211a4:	mov	r2, #5
   211a8:	movt	r1, #5
   211ac:	bl	1253c <dcgettext@plt>
   211b0:	movw	r3, #2342	; 0x926
   211b4:	mov	r2, r0
   211b8:	movt	r3, #5
   211bc:	mov	r0, #1
   211c0:	mov	r1, r4
   211c4:	bl	12674 <error@plt>
   211c8:	push	{r4, r5, r6, sl, fp, lr}
   211cc:	add	fp, sp, #16
   211d0:	sub	sp, sp, #8
   211d4:	mov	r6, r0
   211d8:	mov	r0, sp
   211dc:	mov	r5, r2
   211e0:	mov	r4, r1
   211e4:	bl	2f8d4 <__assert_fail@plt+0x1ce58>
   211e8:	cmp	r0, #0
   211ec:	bne	21260 <__assert_fail@plt+0xe7e4>
   211f0:	mov	r0, r6
   211f4:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   211f8:	cmp	r0, #0
   211fc:	bne	21254 <__assert_fail@plt+0xe7d8>
   21200:	mov	r0, r5
   21204:	blx	r4
   21208:	mov	r4, r0
   2120c:	mov	r5, #0
   21210:	cmn	r0, #1
   21214:	bgt	21220 <__assert_fail@plt+0xe7a4>
   21218:	bl	127d0 <__errno_location@plt>
   2121c:	ldr	r5, [r0]
   21220:	mov	r0, sp
   21224:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   21228:	cmp	r0, #0
   2122c:	bne	21254 <__assert_fail@plt+0xe7d8>
   21230:	mov	r0, sp
   21234:	bl	2f94c <__assert_fail@plt+0x1ced0>
   21238:	cmp	r5, #0
   2123c:	beq	21248 <__assert_fail@plt+0xe7cc>
   21240:	bl	127d0 <__errno_location@plt>
   21244:	str	r5, [r0]
   21248:	mov	r0, r4
   2124c:	sub	sp, fp, #16
   21250:	pop	{r4, r5, r6, sl, fp, pc}
   21254:	bl	127d0 <__errno_location@plt>
   21258:	ldr	r0, [r0]
   2125c:	bl	277e0 <__assert_fail@plt+0x14d64>
   21260:	bl	127d0 <__errno_location@plt>
   21264:	ldr	r0, [r0]
   21268:	bl	277a0 <__assert_fail@plt+0x14d24>
   2126c:	push	{r4, r5, r6, sl, fp, lr}
   21270:	add	fp, sp, #16
   21274:	sub	sp, sp, #8
   21278:	mov	r4, r2
   2127c:	cmn	r0, #100	; 0x64
   21280:	bne	21294 <__assert_fail@plt+0xe818>
   21284:	mov	r0, r4
   21288:	sub	sp, fp, #16
   2128c:	pop	{r4, r5, r6, sl, fp, lr}
   21290:	bx	r1
   21294:	mov	r5, r0
   21298:	mov	r0, sp
   2129c:	mov	r6, r1
   212a0:	bl	2f8d4 <__assert_fail@plt+0x1ce58>
   212a4:	cmp	r0, #0
   212a8:	bne	21338 <__assert_fail@plt+0xe8bc>
   212ac:	mov	r0, r5
   212b0:	bl	12980 <fchdir@plt>
   212b4:	cmp	r0, #0
   212b8:	beq	212e4 <__assert_fail@plt+0xe868>
   212bc:	bl	127d0 <__errno_location@plt>
   212c0:	ldr	r5, [r0]
   212c4:	mov	r4, r0
   212c8:	mov	r0, sp
   212cc:	bl	2f94c <__assert_fail@plt+0x1ced0>
   212d0:	str	r5, [r4]
   212d4:	mvn	r4, #0
   212d8:	mov	r0, r4
   212dc:	sub	sp, fp, #16
   212e0:	pop	{r4, r5, r6, sl, fp, pc}
   212e4:	mov	r0, r4
   212e8:	blx	r6
   212ec:	mov	r4, r0
   212f0:	mov	r5, #0
   212f4:	cmn	r0, #1
   212f8:	bgt	21304 <__assert_fail@plt+0xe888>
   212fc:	bl	127d0 <__errno_location@plt>
   21300:	ldr	r5, [r0]
   21304:	mov	r0, sp
   21308:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   2130c:	cmp	r0, #0
   21310:	bne	21344 <__assert_fail@plt+0xe8c8>
   21314:	mov	r0, sp
   21318:	bl	2f94c <__assert_fail@plt+0x1ced0>
   2131c:	cmp	r5, #0
   21320:	beq	2132c <__assert_fail@plt+0xe8b0>
   21324:	bl	127d0 <__errno_location@plt>
   21328:	str	r5, [r0]
   2132c:	mov	r0, r4
   21330:	sub	sp, fp, #16
   21334:	pop	{r4, r5, r6, sl, fp, pc}
   21338:	bl	127d0 <__errno_location@plt>
   2133c:	ldr	r0, [r0]
   21340:	bl	277a0 <__assert_fail@plt+0x14d24>
   21344:	bl	127d0 <__errno_location@plt>
   21348:	ldr	r0, [r0]
   2134c:	bl	277e0 <__assert_fail@plt+0x14d64>
   21350:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21354:	add	fp, sp, #24
   21358:	mov	r6, r2
   2135c:	mov	r7, r1
   21360:	mov	r4, r0
   21364:	bl	127d0 <__errno_location@plt>
   21368:	cmp	r7, #0
   2136c:	beq	21404 <__assert_fail@plt+0xe988>
   21370:	mov	r5, r0
   21374:	ldr	r8, [r0]
   21378:	ldr	r0, [r6]
   2137c:	cmp	r0, #0
   21380:	mov	r1, r0
   21384:	movweq	r1, #16
   21388:	cmp	r1, r7
   2138c:	bcs	213a4 <__assert_fail@plt+0xe928>
   21390:	lsl	r2, r1, #1
   21394:	cmp	r1, r1, lsl #1
   21398:	mov	r1, r2
   2139c:	bls	21388 <__assert_fail@plt+0xe90c>
   213a0:	mov	r1, r7
   213a4:	cmp	r0, #0
   213a8:	beq	213d8 <__assert_fail@plt+0xe95c>
   213ac:	cmp	r1, r0
   213b0:	beq	213f0 <__assert_fail@plt+0xe974>
   213b4:	mov	r0, r4
   213b8:	str	r1, [r6]
   213bc:	bl	36328 <__assert_fail@plt+0x238ac>
   213c0:	mov	r4, r0
   213c4:	cmp	r0, #0
   213c8:	bne	213f8 <__assert_fail@plt+0xe97c>
   213cc:	mov	r4, #0
   213d0:	mov	r0, r4
   213d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   213d8:	cmp	r4, #0
   213dc:	bne	21424 <__assert_fail@plt+0xe9a8>
   213e0:	mov	r0, r1
   213e4:	str	r1, [r6]
   213e8:	bl	35608 <__assert_fail@plt+0x22b8c>
   213ec:	mov	r4, r0
   213f0:	cmp	r4, #0
   213f4:	beq	213cc <__assert_fail@plt+0xe950>
   213f8:	mov	r0, r4
   213fc:	str	r8, [r5]
   21400:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21404:	movw	r0, #2576	; 0xa10
   21408:	movw	r1, #2588	; 0xa1c
   2140c:	movw	r3, #2600	; 0xa28
   21410:	mov	r2, #71	; 0x47
   21414:	movt	r0, #5
   21418:	movt	r1, #5
   2141c:	movt	r3, #5
   21420:	bl	12a7c <__assert_fail@plt>
   21424:	movw	r0, #2642	; 0xa52
   21428:	movw	r1, #2588	; 0xa1c
   2142c:	movw	r3, #2600	; 0xa28
   21430:	mov	r2, #79	; 0x4f
   21434:	movt	r0, #5
   21438:	movt	r1, #5
   2143c:	movt	r3, #5
   21440:	bl	12a7c <__assert_fail@plt>
   21444:	push	{r4, sl, fp, lr}
   21448:	add	fp, sp, #8
   2144c:	mov	r4, r0
   21450:	bl	21350 <__assert_fail@plt+0xe8d4>
   21454:	cmp	r0, #0
   21458:	popne	{r4, sl, fp, pc}
   2145c:	mov	r0, r4
   21460:	bl	32c40 <__assert_fail@plt+0x201c4>
   21464:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   21468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2146c:	add	fp, sp, #28
   21470:	sub	sp, sp, #540	; 0x21c
   21474:	bl	215b8 <__assert_fail@plt+0xeb3c>
   21478:	cmn	r0, #-2147483647	; 0x80000001
   2147c:	mov	r5, #0
   21480:	addne	r0, r0, #1
   21484:	str	r5, [sp, #20]
   21488:	str	r5, [sp, #12]
   2148c:	str	r5, [sp, #16]
   21490:	cmp	r0, #1
   21494:	str	r0, [sp, #4]
   21498:	blt	2159c <__assert_fail@plt+0xeb20>
   2149c:	add	r0, sp, #12
   214a0:	add	r6, sp, #24
   214a4:	mov	sl, #5
   214a8:	add	r0, r0, #8
   214ac:	str	r0, [sp, #8]
   214b0:	ldr	r0, [sp, #4]
   214b4:	sub	r4, r0, r5
   214b8:	cmp	r4, #64	; 0x40
   214bc:	mov	r7, r4
   214c0:	movge	r7, #64	; 0x40
   214c4:	cmp	r4, #1
   214c8:	blt	214f4 <__assert_fail@plt+0xea78>
   214cc:	mov	r0, #0
   214d0:	mov	r1, #0
   214d4:	add	r2, r6, r0
   214d8:	add	r0, r0, #8
   214dc:	str	sl, [r2, #4]
   214e0:	add	r2, r5, r1
   214e4:	str	r2, [r6, r1, lsl #3]
   214e8:	add	r1, r1, #1
   214ec:	cmp	r1, r7
   214f0:	blt	214d4 <__assert_fail@plt+0xea58>
   214f4:	mov	r0, r6
   214f8:	mov	r1, r7
   214fc:	mov	r2, #0
   21500:	bl	125d8 <poll@plt>
   21504:	cmn	r0, #1
   21508:	beq	2159c <__assert_fail@plt+0xeb20>
   2150c:	cmp	r4, #1
   21510:	blt	2158c <__assert_fail@plt+0xeb10>
   21514:	mov	r8, #0
   21518:	mov	r9, #6
   2151c:	add	r0, r6, r9
   21520:	ldrh	r0, [r0]
   21524:	cmp	r0, #32
   21528:	beq	2157c <__assert_fail@plt+0xeb00>
   2152c:	ldr	r4, [r6, r8, lsl #3]
   21530:	mov	r1, #1
   21534:	mov	r0, r4
   21538:	bl	329f8 <__assert_fail@plt+0x1ff7c>
   2153c:	tst	r0, #1
   21540:	bne	2157c <__assert_fail@plt+0xeb00>
   21544:	ldr	r1, [sp, #16]
   21548:	mov	r2, #4
   2154c:	ldr	r0, [sp, #12]
   21550:	add	r1, r2, r1, lsl #2
   21554:	ldr	r2, [sp, #8]
   21558:	bl	21350 <__assert_fail@plt+0xe8d4>
   2155c:	cmp	r0, #0
   21560:	beq	2159c <__assert_fail@plt+0xeb20>
   21564:	str	r0, [sp, #12]
   21568:	ldr	r1, [sp, #16]
   2156c:	str	r4, [r0, r1, lsl #2]
   21570:	ldr	r0, [sp, #16]
   21574:	add	r0, r0, #1
   21578:	str	r0, [sp, #16]
   2157c:	add	r8, r8, #1
   21580:	add	r9, r9, #8
   21584:	cmp	r8, r7
   21588:	blt	2151c <__assert_fail@plt+0xeaa0>
   2158c:	ldr	r0, [sp, #4]
   21590:	add	r5, r7, r5
   21594:	cmp	r5, r0
   21598:	blt	214b0 <__assert_fail@plt+0xea34>
   2159c:	ldr	r0, [sp, #12]
   215a0:	ldr	r1, [sp, #16]
   215a4:	movw	r2, #15584	; 0x3ce0
   215a8:	movt	r2, #6
   215ac:	stmib	r2, {r0, r1}
   215b0:	sub	sp, fp, #28
   215b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   215bc:	add	fp, sp, #24
   215c0:	sub	sp, sp, #16
   215c4:	movw	r0, #2893	; 0xb4d
   215c8:	movt	r0, #5
   215cc:	bl	23674 <__assert_fail@plt+0x10bf8>
   215d0:	cmp	r0, #0
   215d4:	beq	216a0 <__assert_fail@plt+0xec24>
   215d8:	mov	r4, r0
   215dc:	bl	127d0 <__errno_location@plt>
   215e0:	mov	r7, #0
   215e4:	mov	r6, r0
   215e8:	str	r7, [r0]
   215ec:	mov	r0, r4
   215f0:	bl	12944 <readdir64@plt>
   215f4:	cmp	r0, #0
   215f8:	beq	216e4 <__assert_fail@plt+0xec68>
   215fc:	mov	r8, #0
   21600:	mvn	r5, #0
   21604:	mov	r7, #0
   21608:	mov	r1, r0
   2160c:	ldrb	r2, [r1, #19]!
   21610:	cmp	r2, #46	; 0x2e
   21614:	bne	21634 <__assert_fail@plt+0xebb8>
   21618:	ldrb	r2, [r0, #20]
   2161c:	cmp	r2, #0
   21620:	beq	2164c <__assert_fail@plt+0xebd0>
   21624:	cmp	r2, #46	; 0x2e
   21628:	ldrbeq	r0, [r0, #21]
   2162c:	cmpeq	r0, #0
   21630:	beq	2164c <__assert_fail@plt+0xebd0>
   21634:	mov	r0, r1
   21638:	mov	r1, #0
   2163c:	bl	22f50 <__assert_fail@plt+0x104d4>
   21640:	cmp	r0, r5
   21644:	mov	r7, #1
   21648:	movgt	r5, r0
   2164c:	mov	r0, r4
   21650:	str	r8, [r6]
   21654:	bl	12944 <readdir64@plt>
   21658:	cmp	r0, #0
   2165c:	bne	21608 <__assert_fail@plt+0xeb8c>
   21660:	ldr	r6, [r6]
   21664:	cmp	r6, #0
   21668:	beq	216f4 <__assert_fail@plt+0xec78>
   2166c:	movw	r2, #2893	; 0xb4d
   21670:	mov	r0, #0
   21674:	mov	r1, #8
   21678:	movt	r2, #5
   2167c:	bl	2f2ec <__assert_fail@plt+0x1c870>
   21680:	movw	r2, #9967	; 0x26ef
   21684:	mov	r3, r0
   21688:	mov	r0, #0
   2168c:	mov	r1, r6
   21690:	movt	r2, #5
   21694:	bl	12674 <error@plt>
   21698:	mov	r0, r4
   2169c:	bl	12a4c <closedir@plt>
   216a0:	mov	r0, #4
   216a4:	bl	12554 <sysconf@plt>
   216a8:	mov	r5, r0
   216ac:	mov	r1, sp
   216b0:	mov	r0, #7
   216b4:	bl	12560 <getrlimit64@plt>
   216b8:	cmn	r5, #1
   216bc:	movweq	r5, #20
   216c0:	cmp	r0, #0
   216c4:	bne	2170c <__assert_fail@plt+0xec90>
   216c8:	ldm	sp, {r0, r1}
   216cc:	and	r1, r0, r1
   216d0:	cmn	r1, #1
   216d4:	movne	r5, r0
   216d8:	mov	r0, r5
   216dc:	sub	sp, fp, #24
   216e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   216e4:	mvn	r5, #0
   216e8:	ldr	r6, [r6]
   216ec:	cmp	r6, #0
   216f0:	bne	2166c <__assert_fail@plt+0xebf0>
   216f4:	mov	r0, r4
   216f8:	bl	12a4c <closedir@plt>
   216fc:	cmp	r7, #0
   21700:	beq	216a0 <__assert_fail@plt+0xec24>
   21704:	cmn	r5, #1
   21708:	ble	216a0 <__assert_fail@plt+0xec24>
   2170c:	mov	r0, r5
   21710:	sub	sp, fp, #24
   21714:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21718:	sub	sp, sp, #8
   2171c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21720:	add	fp, sp, #24
   21724:	sub	sp, sp, #8
   21728:	tst	r1, #64	; 0x40
   2172c:	movw	r9, #15584	; 0x3ce0
   21730:	mov	r4, r0
   21734:	str	r3, [fp, #12]
   21738:	str	r2, [fp, #8]
   2173c:	mov	r6, #0
   21740:	mov	r5, r1
   21744:	addne	r0, fp, #8
   21748:	movt	r9, #6
   2174c:	orrne	r0, r0, #4
   21750:	strne	r0, [sp, #4]
   21754:	ldrb	r0, [r9, #1]
   21758:	ldrne	r6, [fp, #8]
   2175c:	cmp	r0, #0
   21760:	bne	217ac <__assert_fail@plt+0xed30>
   21764:	movw	r0, #53058	; 0xcf42
   21768:	mov	r1, #524288	; 0x80000
   2176c:	movt	r0, #4
   21770:	bl	2389c <__assert_fail@plt+0x10e20>
   21774:	cmp	r0, #0
   21778:	blt	2179c <__assert_fail@plt+0xed20>
   2177c:	mov	r1, #1
   21780:	mov	r7, r0
   21784:	bl	329f8 <__assert_fail@plt+0x1ff7c>
   21788:	mov	r8, r0
   2178c:	mov	r0, r7
   21790:	bl	12a34 <close@plt>
   21794:	and	r0, r8, #1
   21798:	b	217a0 <__assert_fail@plt+0xed24>
   2179c:	mov	r0, #0
   217a0:	mov	r1, #1
   217a4:	strb	r1, [r9, #1]
   217a8:	strb	r0, [r9]
   217ac:	orr	r1, r5, #524288	; 0x80000
   217b0:	mov	r0, r4
   217b4:	mov	r2, r6
   217b8:	bl	2389c <__assert_fail@plt+0x10e20>
   217bc:	mov	r4, r0
   217c0:	cmp	r0, #0
   217c4:	blt	217e0 <__assert_fail@plt+0xed64>
   217c8:	ldrb	r0, [r9]
   217cc:	cmp	r0, #0
   217d0:	bne	217e0 <__assert_fail@plt+0xed64>
   217d4:	mov	r0, r4
   217d8:	mov	r1, #1
   217dc:	bl	234fc <__assert_fail@plt+0x10a80>
   217e0:	mov	r0, r4
   217e4:	sub	sp, fp, #24
   217e8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   217ec:	add	sp, sp, #8
   217f0:	bx	lr
   217f4:	push	{r4, sl, fp, lr}
   217f8:	add	fp, sp, #8
   217fc:	movw	r4, #15584	; 0x3ce0
   21800:	movt	r4, #6
   21804:	ldr	r0, [r4, #4]
   21808:	bl	32c40 <__assert_fail@plt+0x201c4>
   2180c:	mov	r0, #0
   21810:	str	r0, [r4, #4]
   21814:	str	r0, [r4, #8]
   21818:	pop	{r4, sl, fp, pc}
   2181c:	push	{fp, lr}
   21820:	mov	fp, sp
   21824:	movw	r0, #2659	; 0xa63
   21828:	movt	r0, #5
   2182c:	bl	126b0 <getenv@plt>
   21830:	cmp	r0, #0
   21834:	movwne	r0, #1
   21838:	pop	{fp, pc}
   2183c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21840:	add	fp, sp, #28
   21844:	sub	sp, sp, #524	; 0x20c
   21848:	movw	r0, #15584	; 0x3ce0
   2184c:	movt	r0, #6
   21850:	ldr	r1, [r0, #4]
   21854:	ldr	sl, [r0, #8]
   21858:	str	r1, [sp, #4]
   2185c:	bl	215b8 <__assert_fail@plt+0xeb3c>
   21860:	mov	r7, r0
   21864:	cmn	r0, #-2147483647	; 0x80000001
   21868:	addne	r7, r7, #1
   2186c:	cmp	r7, #1
   21870:	blt	21984 <__assert_fail@plt+0xef08>
   21874:	mov	r4, #0
   21878:	add	r5, sp, #8
   2187c:	mov	r3, #5
   21880:	mov	r8, #0
   21884:	str	r7, [sp]
   21888:	sub	r9, r7, r8
   2188c:	cmp	r9, #64	; 0x40
   21890:	mov	r6, r9
   21894:	movge	r6, #64	; 0x40
   21898:	cmp	r9, #1
   2189c:	blt	218c8 <__assert_fail@plt+0xee4c>
   218a0:	mov	r0, #0
   218a4:	mov	r1, #0
   218a8:	add	r2, r5, r0
   218ac:	add	r0, r0, #8
   218b0:	str	r3, [r2, #4]
   218b4:	add	r2, r8, r1
   218b8:	str	r2, [r5, r1, lsl #3]
   218bc:	add	r1, r1, #1
   218c0:	cmp	r1, r6
   218c4:	blt	218a8 <__assert_fail@plt+0xee2c>
   218c8:	mov	r0, r5
   218cc:	mov	r1, r6
   218d0:	mov	r2, #0
   218d4:	bl	125d8 <poll@plt>
   218d8:	mov	r3, #5
   218dc:	cmn	r0, #1
   218e0:	beq	21984 <__assert_fail@plt+0xef08>
   218e4:	cmp	r9, #1
   218e8:	blt	21968 <__assert_fail@plt+0xeeec>
   218ec:	mov	r9, #0
   218f0:	add	r0, r5, r9, lsl #3
   218f4:	ldrh	r0, [r0, #6]
   218f8:	cmp	r0, #32
   218fc:	beq	2195c <__assert_fail@plt+0xeee0>
   21900:	ldr	r7, [r5, r9, lsl #3]
   21904:	mov	r1, #1
   21908:	mov	r0, r7
   2190c:	bl	329f8 <__assert_fail@plt+0x1ff7c>
   21910:	tst	r0, #1
   21914:	bne	21944 <__assert_fail@plt+0xeec8>
   21918:	ldr	r1, [sp, #4]
   2191c:	cmp	r4, sl
   21920:	mov	r3, #5
   21924:	bcs	2197c <__assert_fail@plt+0xef00>
   21928:	ldr	r0, [r1, r4, lsl #2]
   2192c:	cmp	r0, r7
   21930:	bge	21958 <__assert_fail@plt+0xeedc>
   21934:	add	r4, r4, #1
   21938:	cmp	r4, sl
   2193c:	bcc	21928 <__assert_fail@plt+0xeeac>
   21940:	b	2197c <__assert_fail@plt+0xef00>
   21944:	mov	r3, #5
   21948:	add	r9, r9, #1
   2194c:	cmp	r9, r6
   21950:	blt	218f0 <__assert_fail@plt+0xee74>
   21954:	b	21968 <__assert_fail@plt+0xeeec>
   21958:	bne	2197c <__assert_fail@plt+0xef00>
   2195c:	add	r9, r9, #1
   21960:	cmp	r9, r6
   21964:	blt	218f0 <__assert_fail@plt+0xee74>
   21968:	ldr	r7, [sp]
   2196c:	add	r8, r6, r8
   21970:	cmp	r8, r7
   21974:	blt	21888 <__assert_fail@plt+0xee0c>
   21978:	b	21984 <__assert_fail@plt+0xef08>
   2197c:	cmp	r7, #0
   21980:	bge	2198c <__assert_fail@plt+0xef10>
   21984:	sub	sp, fp, #28
   21988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2198c:	movw	r1, #2687	; 0xa7f
   21990:	mov	r0, #0
   21994:	mov	r2, #5
   21998:	movt	r1, #5
   2199c:	bl	1253c <dcgettext@plt>
   219a0:	mov	r2, r0
   219a4:	mov	r0, #0
   219a8:	mov	r1, #0
   219ac:	mov	r3, r7
   219b0:	bl	12674 <error@plt>
   219b4:	movw	r0, #2839	; 0xb17
   219b8:	movw	r1, #2848	; 0xb20
   219bc:	movw	r3, #2857	; 0xb29
   219c0:	mov	r2, #396	; 0x18c
   219c4:	movt	r0, #5
   219c8:	movt	r1, #5
   219cc:	movt	r3, #5
   219d0:	bl	12a7c <__assert_fail@plt>
   219d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   219d8:	add	fp, sp, #24
   219dc:	sub	sp, sp, #16
   219e0:	mov	r8, r0
   219e4:	movw	r0, #13640	; 0x3548
   219e8:	movt	r0, #6
   219ec:	ldr	r0, [r0]
   219f0:	bl	32bd8 <__assert_fail@plt+0x2015c>
   219f4:	movw	r0, #13652	; 0x3554
   219f8:	movw	r1, #2935	; 0xb77
   219fc:	mov	r2, #5
   21a00:	mov	r9, #0
   21a04:	movt	r0, #6
   21a08:	movt	r1, #5
   21a0c:	ldr	r6, [r0]
   21a10:	movw	r0, #13508	; 0x34c4
   21a14:	movt	r0, #6
   21a18:	ldr	r5, [r0]
   21a1c:	mov	r0, #0
   21a20:	bl	1253c <dcgettext@plt>
   21a24:	movw	r1, #2950	; 0xb86
   21a28:	mov	r7, r0
   21a2c:	mov	r0, #0
   21a30:	mov	r2, #5
   21a34:	movt	r1, #5
   21a38:	bl	1253c <dcgettext@plt>
   21a3c:	movw	r1, #2965	; 0xb95
   21a40:	mov	r4, r0
   21a44:	mov	r0, #0
   21a48:	mov	r2, #5
   21a4c:	movt	r1, #5
   21a50:	bl	1253c <dcgettext@plt>
   21a54:	movw	r2, #2921	; 0xb69
   21a58:	str	r0, [sp, #8]
   21a5c:	mov	r0, r6
   21a60:	mov	r1, r8
   21a64:	mov	r3, r5
   21a68:	str	r7, [sp]
   21a6c:	str	r4, [sp, #4]
   21a70:	str	r9, [sp, #12]
   21a74:	movt	r2, #5
   21a78:	bl	307d4 <__assert_fail@plt+0x1dd58>
   21a7c:	sub	sp, fp, #24
   21a80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a88:	add	fp, sp, #28
   21a8c:	sub	sp, sp, #948	; 0x3b4
   21a90:	mov	sl, r0
   21a94:	ldr	r0, [r3, #16]
   21a98:	mov	r5, r1
   21a9c:	sub	r1, fp, #44	; 0x2c
   21aa0:	mov	r6, r3
   21aa4:	str	r2, [fp, #-964]	; 0xfffffc3c
   21aa8:	bl	238e4 <__assert_fail@plt+0x10e68>
   21aac:	movw	r9, #13512	; 0x34c8
   21ab0:	ldrd	r0, [r6, #96]	; 0x60
   21ab4:	movt	r9, #6
   21ab8:	ldr	r4, [r9]
   21abc:	sub	sp, sp, #16
   21ac0:	mov	r3, #1
   21ac4:	mov	r2, #0
   21ac8:	str	r3, [sp]
   21acc:	stmib	sp, {r2, r3}
   21ad0:	str	r2, [sp, #12]
   21ad4:	sub	r2, fp, #696	; 0x2b8
   21ad8:	mov	r3, #0
   21adc:	bl	24ec8 <__assert_fail@plt+0x1244c>
   21ae0:	add	sp, sp, #16
   21ae4:	ldr	r7, [fp, #20]
   21ae8:	movw	r1, #2978	; 0xba2
   21aec:	mov	r3, r0
   21af0:	mov	r2, r4
   21af4:	movt	r1, #5
   21af8:	mov	r0, r7
   21afc:	bl	127c4 <fprintf@plt>
   21b00:	cmp	r0, #0
   21b04:	blt	2216c <__assert_fail@plt+0xf6f0>
   21b08:	ldr	r1, [r9]
   21b0c:	ldr	r8, [fp, #12]
   21b10:	str	r5, [fp, #-972]	; 0xfffffc34
   21b14:	cmp	r0, r1
   21b18:	mov	r1, r7
   21b1c:	strgt	r0, [r9]
   21b20:	mov	r0, #32
   21b24:	bl	12968 <putc@plt>
   21b28:	str	r6, [fp, #-956]	; 0xfffffc44
   21b2c:	mov	r5, r0
   21b30:	ldr	r4, [r9, #4]
   21b34:	ldrd	r0, [r6, #64]	; 0x40
   21b38:	sub	sp, sp, #16
   21b3c:	asr	r2, r8, #31
   21b40:	mov	r6, #0
   21b44:	mov	r3, #512	; 0x200
   21b48:	stm	sp, {r3, r6, r8}
   21b4c:	str	r2, [sp, #12]
   21b50:	sub	r2, fp, #696	; 0x2b8
   21b54:	mov	r3, #0
   21b58:	bl	24ec8 <__assert_fail@plt+0x1244c>
   21b5c:	add	sp, sp, #16
   21b60:	movw	r1, #2978	; 0xba2
   21b64:	mov	r3, r0
   21b68:	mov	r2, r4
   21b6c:	mov	r0, r7
   21b70:	mov	r4, #0
   21b74:	movt	r1, #5
   21b78:	bl	127c4 <fprintf@plt>
   21b7c:	cmn	r5, #1
   21b80:	movweq	r4, #150	; 0x96
   21b84:	cmp	r0, #0
   21b88:	blt	22174 <__assert_fail@plt+0xf6f8>
   21b8c:	ldr	r1, [r9, #4]
   21b90:	cmp	r0, r1
   21b94:	ble	21bb0 <__assert_fail@plt+0xf134>
   21b98:	ldr	r6, [fp, #-956]	; 0xfffffc44
   21b9c:	cmn	r5, #1
   21ba0:	str	r0, [r9, #4]
   21ba4:	bne	21bbc <__assert_fail@plt+0xf140>
   21ba8:	mov	r4, #150	; 0x96
   21bac:	b	220b0 <__assert_fail@plt+0xf634>
   21bb0:	ldr	r6, [fp, #-956]	; 0xfffffc44
   21bb4:	cmn	r5, #1
   21bb8:	beq	21ba8 <__assert_fail@plt+0xf12c>
   21bbc:	mov	r0, #32
   21bc0:	mov	r1, r7
   21bc4:	bl	12968 <putc@plt>
   21bc8:	cmn	r0, #1
   21bcc:	beq	2217c <__assert_fail@plt+0xf700>
   21bd0:	sub	r0, fp, #44	; 0x2c
   21bd4:	mov	r1, r7
   21bd8:	bl	12a10 <fputs@plt>
   21bdc:	cmp	r0, #0
   21be0:	movwlt	r4, #275	; 0x113
   21be4:	blt	22184 <__assert_fail@plt+0xf708>
   21be8:	ldr	r3, [r6, #20]
   21bec:	ldr	r2, [r9, #8]
   21bf0:	movw	r1, #2982	; 0xba6
   21bf4:	mov	r0, r7
   21bf8:	movt	r1, #5
   21bfc:	bl	127c4 <fprintf@plt>
   21c00:	cmp	r0, #0
   21c04:	blt	2218c <__assert_fail@plt+0xf710>
   21c08:	ldr	r1, [r9, #8]
   21c0c:	cmp	r0, r1
   21c10:	mov	r1, r7
   21c14:	strgt	r0, [r9, #8]
   21c18:	mov	r0, #32
   21c1c:	bl	12968 <putc@plt>
   21c20:	cmn	r0, #1
   21c24:	ldr	r0, [r6, #24]
   21c28:	movweq	r4, #250	; 0xfa
   21c2c:	bl	25a50 <__assert_fail@plt+0x12fd4>
   21c30:	cmp	r0, #0
   21c34:	beq	21c78 <__assert_fail@plt+0xf1fc>
   21c38:	mov	r1, #0
   21c3c:	mov	r5, r0
   21c40:	bl	268c4 <__assert_fail@plt+0x13e48>
   21c44:	ldr	r2, [r9, #12]
   21c48:	movw	r1, #2987	; 0xbab
   21c4c:	mov	r3, r5
   21c50:	movt	r1, #5
   21c54:	cmp	r0, r2
   21c58:	strgt	r0, [r9, #12]
   21c5c:	movgt	r2, r0
   21c60:	mov	r0, r7
   21c64:	bl	127c4 <fprintf@plt>
   21c68:	cmn	r0, #1
   21c6c:	bgt	21ca0 <__assert_fail@plt+0xf224>
   21c70:	mov	r4, #400	; 0x190
   21c74:	b	220b0 <__assert_fail@plt+0xf634>
   21c78:	ldr	r2, [r6, #24]
   21c7c:	movw	r1, #2993	; 0xbb1
   21c80:	mov	r0, r7
   21c84:	movt	r1, #5
   21c88:	bl	127c4 <fprintf@plt>
   21c8c:	ldr	r1, [r9, #12]
   21c90:	cmp	r0, r1
   21c94:	strgt	r0, [r9, #12]
   21c98:	cmp	r0, #1
   21c9c:	blt	221bc <__assert_fail@plt+0xf740>
   21ca0:	ldr	r0, [r6, #28]
   21ca4:	bl	25bec <__assert_fail@plt+0x13170>
   21ca8:	cmp	r0, #0
   21cac:	str	sl, [fp, #-960]	; 0xfffffc40
   21cb0:	beq	21cf4 <__assert_fail@plt+0xf278>
   21cb4:	mov	r1, #0
   21cb8:	mov	r5, r0
   21cbc:	bl	268c4 <__assert_fail@plt+0x13e48>
   21cc0:	ldr	r2, [r9, #16]
   21cc4:	movw	r1, #2987	; 0xbab
   21cc8:	mov	r3, r5
   21ccc:	movt	r1, #5
   21cd0:	cmp	r0, r2
   21cd4:	strgt	r0, [r9, #16]
   21cd8:	movgt	r2, r0
   21cdc:	mov	r0, r7
   21ce0:	bl	127c4 <fprintf@plt>
   21ce4:	cmn	r0, #1
   21ce8:	bgt	21d34 <__assert_fail@plt+0xf2b8>
   21cec:	mov	r4, #500	; 0x1f4
   21cf0:	b	220b0 <__assert_fail@plt+0xf634>
   21cf4:	ldr	r3, [r6, #28]
   21cf8:	ldr	r2, [r9, #16]
   21cfc:	movw	r1, #3000	; 0xbb8
   21d00:	mov	r0, r7
   21d04:	movt	r1, #5
   21d08:	bl	127c4 <fprintf@plt>
   21d0c:	ldr	r1, [r9, #16]
   21d10:	cmp	r0, r1
   21d14:	strgt	r0, [r9, #16]
   21d18:	cmp	r0, #0
   21d1c:	blt	221c4 <__assert_fail@plt+0xf748>
   21d20:	mov	r0, #32
   21d24:	mov	r1, r7
   21d28:	bl	12968 <putc@plt>
   21d2c:	cmn	r0, #1
   21d30:	beq	221cc <__assert_fail@plt+0xf750>
   21d34:	ldr	r0, [r6, #16]
   21d38:	mov	sl, r4
   21d3c:	and	r0, r0, #45056	; 0xb000
   21d40:	orr	r0, r0, #16384	; 0x4000
   21d44:	cmp	r0, #24576	; 0x6000
   21d48:	bne	21de0 <__assert_fail@plt+0xf364>
   21d4c:	mov	r4, r6
   21d50:	ldr	r2, [r9, #20]
   21d54:	movw	r1, #2982	; 0xba6
   21d58:	ldr	r0, [r4, #32]!
   21d5c:	movt	r1, #5
   21d60:	lsr	r3, r0, #8
   21d64:	ldr	r0, [r4, #4]
   21d68:	lsr	r0, r0, #12
   21d6c:	bfi	r3, r0, #12, #20
   21d70:	mov	r0, r7
   21d74:	bl	127c4 <fprintf@plt>
   21d78:	cmp	r0, #0
   21d7c:	blt	221a4 <__assert_fail@plt+0xf728>
   21d80:	ldr	r1, [r9, #20]
   21d84:	cmp	r1, r0
   21d88:	movw	r1, #58794	; 0xe5aa
   21d8c:	strlt	r0, [r9, #20]
   21d90:	movt	r1, #4
   21d94:	mov	r0, r7
   21d98:	bl	127c4 <fprintf@plt>
   21d9c:	cmp	r0, #0
   21da0:	blt	221ac <__assert_fail@plt+0xf730>
   21da4:	ldrd	r0, [r4]
   21da8:	lsr	r2, r0, #12
   21dac:	orr	r3, r2, r1, lsl #20
   21db0:	ldr	r2, [r9, #24]
   21db4:	movw	r1, #2982	; 0xba6
   21db8:	bfi	r3, r0, #0, #8
   21dbc:	movt	r1, #5
   21dc0:	mov	r0, r7
   21dc4:	bl	127c4 <fprintf@plt>
   21dc8:	cmp	r0, #0
   21dcc:	blt	221b4 <__assert_fail@plt+0xf738>
   21dd0:	ldr	r1, [r9, #24]
   21dd4:	cmp	r1, r0
   21dd8:	strlt	r0, [r9, #24]
   21ddc:	b	21e50 <__assert_fail@plt+0xf3d4>
   21de0:	ldr	r4, [r9, #28]
   21de4:	ldr	r3, [r6, #48]	; 0x30
   21de8:	ldr	r5, [r6, #52]	; 0x34
   21dec:	mov	r0, #1
   21df0:	cmp	r8, #0
   21df4:	movge	r8, r0
   21df8:	asr	r1, r8, #31
   21dfc:	sub	sp, sp, #16
   21e00:	mov	r2, #0
   21e04:	stm	sp, {r0, r2, r8}
   21e08:	str	r1, [sp, #12]
   21e0c:	mov	r0, r3
   21e10:	sub	r2, fp, #696	; 0x2b8
   21e14:	mov	r1, r5
   21e18:	mov	r3, #0
   21e1c:	bl	24ec8 <__assert_fail@plt+0x1244c>
   21e20:	add	sp, sp, #16
   21e24:	movw	r1, #2978	; 0xba2
   21e28:	mov	r3, r0
   21e2c:	mov	r0, r7
   21e30:	mov	r2, r4
   21e34:	movt	r1, #5
   21e38:	bl	127c4 <fprintf@plt>
   21e3c:	cmp	r0, #0
   21e40:	blt	221d4 <__assert_fail@plt+0xf758>
   21e44:	ldr	r1, [r9, #28]
   21e48:	cmp	r0, r1
   21e4c:	strgt	r0, [r9, #28]
   21e50:	mov	r0, #32
   21e54:	mov	r1, r7
   21e58:	bl	12968 <putc@plt>
   21e5c:	cmn	r0, #1
   21e60:	add	r6, r0, #1
   21e64:	movwne	r6, #1
   21e68:	movweq	sl, #850	; 0x352
   21e6c:	str	sl, [fp, #-968]	; 0xfffffc38
   21e70:	beq	22194 <__assert_fail@plt+0xf718>
   21e74:	ldr	r0, [fp, #-956]	; 0xfffffc44
   21e78:	add	r4, r0, #80	; 0x50
   21e7c:	mov	r0, r4
   21e80:	bl	12704 <localtime@plt>
   21e84:	ldr	r8, [fp, #-960]	; 0xfffffc40
   21e88:	cmp	r0, #0
   21e8c:	beq	21eb8 <__assert_fail@plt+0xf43c>
   21e90:	mov	r5, r0
   21e94:	ldr	r0, [fp, #8]
   21e98:	sub	r1, r0, #19968	; 0x4e00
   21e9c:	sub	r2, r1, #15532032	; 0xed0000
   21ea0:	ldr	r1, [r4]
   21ea4:	cmp	r2, r1
   21ea8:	ble	21f34 <__assert_fail@plt+0xf4b8>
   21eac:	movw	r8, #3018	; 0xbca
   21eb0:	movt	r8, #5
   21eb4:	b	21f50 <__assert_fail@plt+0xf4d4>
   21eb8:	ldr	r0, [r4]
   21ebc:	sub	sp, sp, #16
   21ec0:	cmn	r0, #1
   21ec4:	ble	220e4 <__assert_fail@plt+0xf668>
   21ec8:	mov	r4, #0
   21ecc:	mov	r1, #1
   21ed0:	sub	r2, fp, #696	; 0x2b8
   21ed4:	mov	r3, #0
   21ed8:	stm	sp, {r1, r4}
   21edc:	str	r1, [sp, #8]
   21ee0:	asr	r1, r0, #31
   21ee4:	str	r4, [sp, #12]
   21ee8:	bl	24ec8 <__assert_fail@plt+0x1244c>
   21eec:	add	sp, sp, #16
   21ef0:	movw	r1, #3035	; 0xbdb
   21ef4:	mov	r3, r0
   21ef8:	mov	r0, r7
   21efc:	mov	r2, #12
   21f00:	movt	r1, #5
   21f04:	bl	127c4 <fprintf@plt>
   21f08:	ldr	r1, [fp, #-968]	; 0xfffffc38
   21f0c:	cmp	r0, #0
   21f10:	movwlt	r1, #1100	; 0x44c
   21f14:	cmn	r0, #1
   21f18:	movwgt	r4, #1
   21f1c:	and	r0, r6, r4
   21f20:	ldr	r6, [fp, #-964]	; 0xfffffc3c
   21f24:	mov	r4, r1
   21f28:	cmp	r0, #1
   21f2c:	beq	21fe4 <__assert_fail@plt+0xf568>
   21f30:	b	220b0 <__assert_fail@plt+0xf634>
   21f34:	movw	r2, #3018	; 0xbca
   21f38:	movw	r8, #3006	; 0xbbe
   21f3c:	add	r0, r0, #3600	; 0xe10
   21f40:	movt	r2, #5
   21f44:	movt	r8, #5
   21f48:	cmp	r1, r0
   21f4c:	movgt	r8, r2
   21f50:	sub	sl, fp, #952	; 0x3b8
   21f54:	mov	r1, #256	; 0x100
   21f58:	mov	r2, r8
   21f5c:	mov	r3, r5
   21f60:	mov	r9, #256	; 0x100
   21f64:	mov	r0, sl
   21f68:	bl	126ec <strftime@plt>
   21f6c:	cmp	r0, #0
   21f70:	bne	21fa8 <__assert_fail@plt+0xf52c>
   21f74:	mov	r4, #7
   21f78:	add	r0, r4, r9, lsl #1
   21f7c:	bic	r0, r0, #7
   21f80:	sub	sl, sp, r0
   21f84:	mov	sp, sl
   21f88:	lsl	r9, r9, #1
   21f8c:	mov	r0, sl
   21f90:	mov	r2, r8
   21f94:	mov	r3, r5
   21f98:	mov	r1, r9
   21f9c:	bl	126ec <strftime@plt>
   21fa0:	cmp	r0, #0
   21fa4:	beq	21f78 <__assert_fail@plt+0xf4fc>
   21fa8:	movw	r1, #3031	; 0xbd7
   21fac:	mov	r0, r7
   21fb0:	mov	r2, sl
   21fb4:	movt	r1, #5
   21fb8:	bl	127c4 <fprintf@plt>
   21fbc:	ldr	r4, [fp, #-968]	; 0xfffffc38
   21fc0:	cmp	r0, #0
   21fc4:	ldr	r8, [fp, #-960]	; 0xfffffc40
   21fc8:	mov	r1, #0
   21fcc:	movwlt	r4, #900	; 0x384
   21fd0:	cmn	r0, #1
   21fd4:	movwgt	r1, #1
   21fd8:	tst	r6, r1
   21fdc:	ldr	r6, [fp, #-964]	; 0xfffffc3c
   21fe0:	beq	220b0 <__assert_fail@plt+0xf634>
   21fe4:	ldr	r5, [fp, #16]
   21fe8:	mov	r0, r8
   21fec:	mov	r1, r7
   21ff0:	mov	r2, r5
   21ff4:	bl	221ec <__assert_fail@plt+0xf770>
   21ff8:	cmp	r0, #0
   21ffc:	ldr	r0, [fp, #-956]	; 0xfffffc44
   22000:	beq	2219c <__assert_fail@plt+0xf720>
   22004:	ldr	r0, [r0, #16]
   22008:	and	r0, r0, #61440	; 0xf000
   2200c:	cmp	r0, #40960	; 0xa000
   22010:	bne	22094 <__assert_fail@plt+0xf618>
   22014:	ldr	r0, [fp, #-972]	; 0xfffffc34
   22018:	mov	r1, r6
   2201c:	bl	23168 <__assert_fail@plt+0x106ec>
   22020:	cmp	r0, #0
   22024:	beq	22070 <__assert_fail@plt+0xf5f4>
   22028:	mov	r6, r0
   2202c:	movw	r0, #3040	; 0xbe0
   22030:	mov	r1, r7
   22034:	movt	r0, #5
   22038:	bl	12a10 <fputs@plt>
   2203c:	cmn	r0, #1
   22040:	ble	221dc <__assert_fail@plt+0xf760>
   22044:	mov	r0, r6
   22048:	mov	r1, r7
   2204c:	mov	r2, r5
   22050:	bl	221ec <__assert_fail@plt+0xf770>
   22054:	mov	r4, r0
   22058:	mov	r0, r6
   2205c:	bl	32c40 <__assert_fail@plt+0x201c4>
   22060:	cmp	r4, #0
   22064:	bne	22094 <__assert_fail@plt+0xf618>
   22068:	movw	r4, #1350	; 0x546
   2206c:	b	220b0 <__assert_fail@plt+0xf634>
   22070:	bl	127d0 <__errno_location@plt>
   22074:	ldr	r1, [r0]
   22078:	movw	r2, #9967	; 0x26ef
   2207c:	mov	r0, #0
   22080:	mov	r3, r8
   22084:	movt	r2, #5
   22088:	bl	12674 <error@plt>
   2208c:	mov	r0, #0
   22090:	bl	32c40 <__assert_fail@plt+0x201c4>
   22094:	mov	r0, #10
   22098:	mov	r1, r7
   2209c:	bl	12968 <putc@plt>
   220a0:	cmn	r0, #1
   220a4:	subne	sp, fp, #28
   220a8:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220ac:	movw	r4, #1400	; 0x578
   220b0:	bl	127d0 <__errno_location@plt>
   220b4:	mov	r5, r4
   220b8:	ldr	r4, [r0]
   220bc:	movw	r1, #3045	; 0xbe5
   220c0:	mov	r0, #0
   220c4:	mov	r2, #5
   220c8:	movt	r1, #5
   220cc:	bl	1253c <dcgettext@plt>
   220d0:	mov	r2, r0
   220d4:	mov	r0, #1
   220d8:	mov	r1, r4
   220dc:	mov	r3, r5
   220e0:	bl	12674 <error@plt>
   220e4:	mov	r5, #0
   220e8:	mov	r1, #1
   220ec:	rsbs	r3, r0, #0
   220f0:	sub	r2, fp, #696	; 0x2b8
   220f4:	stm	sp, {r1, r5}
   220f8:	str	r1, [sp, #8]
   220fc:	sbc	r1, r5, r0, asr #31
   22100:	mov	r0, r3
   22104:	mov	r3, #0
   22108:	str	r5, [sp, #12]
   2210c:	bl	24ec8 <__assert_fail@plt+0x1244c>
   22110:	add	sp, sp, #16
   22114:	mov	r4, r0
   22118:	bl	12788 <strlen@plt>
   2211c:	sub	sp, sp, #8
   22120:	movw	r1, #3028	; 0xbd4
   22124:	movw	r3, #58538	; 0xe4aa
   22128:	rsb	r0, r0, #12
   2212c:	str	r4, [sp]
   22130:	bic	r2, r0, r0, asr #31
   22134:	movt	r1, #5
   22138:	movt	r3, #4
   2213c:	mov	r0, r7
   22140:	bl	127c4 <fprintf@plt>
   22144:	add	sp, sp, #8
   22148:	ldr	r4, [fp, #-968]	; 0xfffffc38
   2214c:	cmp	r0, #0
   22150:	movwlt	r4, #1000	; 0x3e8
   22154:	cmn	r0, #1
   22158:	movwgt	r5, #1
   2215c:	tst	r6, r5
   22160:	ldr	r6, [fp, #-964]	; 0xfffffc3c
   22164:	bne	21fe4 <__assert_fail@plt+0xf568>
   22168:	b	220b0 <__assert_fail@plt+0xf634>
   2216c:	mov	r4, #100	; 0x64
   22170:	b	220b0 <__assert_fail@plt+0xf634>
   22174:	mov	r4, #200	; 0xc8
   22178:	b	220b0 <__assert_fail@plt+0xf634>
   2217c:	mov	r4, #250	; 0xfa
   22180:	b	220b0 <__assert_fail@plt+0xf634>
   22184:	movw	r4, #275	; 0x113
   22188:	b	220b0 <__assert_fail@plt+0xf634>
   2218c:	mov	r4, #300	; 0x12c
   22190:	b	220b0 <__assert_fail@plt+0xf634>
   22194:	movw	r4, #850	; 0x352
   22198:	b	220b0 <__assert_fail@plt+0xf634>
   2219c:	mov	r4, #1200	; 0x4b0
   221a0:	b	220b0 <__assert_fail@plt+0xf634>
   221a4:	mov	r4, #600	; 0x258
   221a8:	b	220b0 <__assert_fail@plt+0xf634>
   221ac:	movw	r4, #625	; 0x271
   221b0:	b	220b0 <__assert_fail@plt+0xf634>
   221b4:	movw	r4, #650	; 0x28a
   221b8:	b	220b0 <__assert_fail@plt+0xf634>
   221bc:	movw	r4, #450	; 0x1c2
   221c0:	b	220b0 <__assert_fail@plt+0xf634>
   221c4:	movw	r4, #550	; 0x226
   221c8:	b	220b0 <__assert_fail@plt+0xf634>
   221cc:	movw	r4, #525	; 0x20d
   221d0:	b	220b0 <__assert_fail@plt+0xf634>
   221d4:	mov	r4, #800	; 0x320
   221d8:	b	220b0 <__assert_fail@plt+0xf634>
   221dc:	mov	r0, r6
   221e0:	bl	32c40 <__assert_fail@plt+0x201c4>
   221e4:	movw	r4, #1300	; 0x514
   221e8:	b	220b0 <__assert_fail@plt+0xf634>
   221ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221f0:	add	fp, sp, #28
   221f4:	sub	sp, sp, #4
   221f8:	mov	r5, r1
   221fc:	mov	r4, r0
   22200:	cmp	r2, #0
   22204:	beq	22234 <__assert_fail@plt+0xf7b8>
   22208:	movw	r1, #9967	; 0x26ef
   2220c:	mov	r0, r5
   22210:	mov	r2, r4
   22214:	movt	r1, #5
   22218:	bl	127c4 <fprintf@plt>
   2221c:	mov	r1, r0
   22220:	mov	r0, #0
   22224:	cmn	r1, #1
   22228:	movwgt	r0, #1
   2222c:	sub	sp, fp, #28
   22230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22234:	movw	r7, #3085	; 0xc0d
   22238:	movw	r8, #3097	; 0xc19
   2223c:	movw	r9, #3091	; 0xc13
   22240:	movw	sl, #3100	; 0xc1c
   22244:	movw	r6, #3103	; 0xc1f
   22248:	movt	r7, #5
   2224c:	movt	r8, #5
   22250:	movt	r9, #5
   22254:	movt	sl, #5
   22258:	movt	r6, #5
   2225c:	ldrb	r2, [r4], #1
   22260:	cmp	r2, #34	; 0x22
   22264:	bhi	2231c <__assert_fail@plt+0xf8a0>
   22268:	add	r1, pc, #4
   2226c:	mov	r0, #1
   22270:	ldr	pc, [r1, r2, lsl #2]
   22274:	andeq	r2, r2, r8, lsl r4
   22278:	andeq	r2, r2, r0, asr #6
   2227c:	andeq	r2, r2, r0, asr #6
   22280:	andeq	r2, r2, r0, asr #6
   22284:	andeq	r2, r2, r0, asr #6
   22288:	andeq	r2, r2, r0, asr #6
   2228c:	andeq	r2, r2, r0, asr #6
   22290:	andeq	r2, r2, r0, asr #6
   22294:	andeq	r2, r2, r0, lsl #6
   22298:	andeq	r2, r2, r8, ror #6
   2229c:	andeq	r2, r2, r4, lsl #7
   222a0:	andeq	r2, r2, r0, asr #6
   222a4:	muleq	r2, ip, r3
   222a8:			; <UNDEFINED> instruction: 0x000223b4
   222ac:	andeq	r2, r2, r0, asr #6
   222b0:	andeq	r2, r2, r0, asr #6
   222b4:	andeq	r2, r2, r0, asr #6
   222b8:	andeq	r2, r2, r0, asr #6
   222bc:	andeq	r2, r2, r0, asr #6
   222c0:	andeq	r2, r2, r0, asr #6
   222c4:	andeq	r2, r2, r0, asr #6
   222c8:	andeq	r2, r2, r0, asr #6
   222cc:	andeq	r2, r2, r0, asr #6
   222d0:	andeq	r2, r2, r0, asr #6
   222d4:	andeq	r2, r2, r0, asr #6
   222d8:	andeq	r2, r2, r0, asr #6
   222dc:	andeq	r2, r2, r0, asr #6
   222e0:	andeq	r2, r2, r0, asr #6
   222e4:	andeq	r2, r2, r0, asr #6
   222e8:	andeq	r2, r2, r0, asr #6
   222ec:	andeq	r2, r2, r0, asr #6
   222f0:	andeq	r2, r2, r0, asr #6
   222f4:	andeq	r2, r2, ip, asr #7
   222f8:	andeq	r2, r2, r0, asr #6
   222fc:	andeq	r2, r2, r4, ror #7
   22300:	movw	r1, #3088	; 0xc10
   22304:	mov	r0, r5
   22308:	movt	r1, #5
   2230c:	bl	127c4 <fprintf@plt>
   22310:	cmn	r0, #1
   22314:	bgt	2225c <__assert_fail@plt+0xf7e0>
   22318:	b	22414 <__assert_fail@plt+0xf998>
   2231c:	cmp	r2, #92	; 0x5c
   22320:	bne	22340 <__assert_fail@plt+0xf8c4>
   22324:	movw	r1, #3082	; 0xc0a
   22328:	mov	r0, r5
   2232c:	movt	r1, #5
   22330:	bl	127c4 <fprintf@plt>
   22334:	cmn	r0, #1
   22338:	bgt	2225c <__assert_fail@plt+0xf7e0>
   2233c:	b	22414 <__assert_fail@plt+0xf998>
   22340:	sub	r0, r2, #33	; 0x21
   22344:	uxtb	r0, r0
   22348:	cmp	r0, #93	; 0x5d
   2234c:	bhi	223fc <__assert_fail@plt+0xf980>
   22350:	mov	r0, r2
   22354:	mov	r1, r5
   22358:	bl	12968 <putc@plt>
   2235c:	cmn	r0, #1
   22360:	bne	2225c <__assert_fail@plt+0xf7e0>
   22364:	b	22414 <__assert_fail@plt+0xf998>
   22368:	movw	r1, #3094	; 0xc16
   2236c:	mov	r0, r5
   22370:	movt	r1, #5
   22374:	bl	127c4 <fprintf@plt>
   22378:	cmn	r0, #1
   2237c:	bgt	2225c <__assert_fail@plt+0xf7e0>
   22380:	b	22414 <__assert_fail@plt+0xf998>
   22384:	mov	r0, r5
   22388:	mov	r1, r7
   2238c:	bl	127c4 <fprintf@plt>
   22390:	cmn	r0, #1
   22394:	bgt	2225c <__assert_fail@plt+0xf7e0>
   22398:	b	22414 <__assert_fail@plt+0xf998>
   2239c:	mov	r0, r5
   223a0:	mov	r1, r8
   223a4:	bl	127c4 <fprintf@plt>
   223a8:	cmn	r0, #1
   223ac:	bgt	2225c <__assert_fail@plt+0xf7e0>
   223b0:	b	22414 <__assert_fail@plt+0xf998>
   223b4:	mov	r0, r5
   223b8:	mov	r1, r9
   223bc:	bl	127c4 <fprintf@plt>
   223c0:	cmn	r0, #1
   223c4:	bgt	2225c <__assert_fail@plt+0xf7e0>
   223c8:	b	22414 <__assert_fail@plt+0xf998>
   223cc:	mov	r0, r5
   223d0:	mov	r1, sl
   223d4:	bl	127c4 <fprintf@plt>
   223d8:	cmn	r0, #1
   223dc:	bgt	2225c <__assert_fail@plt+0xf7e0>
   223e0:	b	22414 <__assert_fail@plt+0xf998>
   223e4:	mov	r0, r5
   223e8:	mov	r1, r6
   223ec:	bl	127c4 <fprintf@plt>
   223f0:	cmn	r0, #1
   223f4:	bgt	2225c <__assert_fail@plt+0xf7e0>
   223f8:	b	22414 <__assert_fail@plt+0xf998>
   223fc:	movw	r1, #3106	; 0xc22
   22400:	mov	r0, r5
   22404:	movt	r1, #5
   22408:	bl	127c4 <fprintf@plt>
   2240c:	cmn	r0, #1
   22410:	bgt	2225c <__assert_fail@plt+0xf7e0>
   22414:	mov	r0, #0
   22418:	sub	sp, fp, #28
   2241c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22424:	add	fp, sp, #28
   22428:	sub	sp, sp, #12
   2242c:	sub	sp, sp, #8192	; 0x2000
   22430:	ldr	r7, [fp, #8]
   22434:	mov	r9, r3
   22438:	mov	sl, r0
   2243c:	cmp	r2, #0
   22440:	beq	224e0 <__assert_fail@plt+0xfa64>
   22444:	add	r4, sp, #8
   22448:	mov	r8, r1
   2244c:	str	r1, [sp]
   22450:	mov	r1, #8192	; 0x2000
   22454:	mov	r2, r7
   22458:	mvn	r3, #0
   2245c:	mov	r0, r4
   22460:	bl	2db04 <__assert_fail@plt+0x1b088>
   22464:	mov	r5, r0
   22468:	cmp	r0, #8192	; 0x2000
   2246c:	mov	r6, r4
   22470:	bcc	2249c <__assert_fail@plt+0xfa20>
   22474:	add	r4, r5, #1
   22478:	mov	r0, r4
   2247c:	bl	309ec <__assert_fail@plt+0x1df70>
   22480:	mov	r1, r4
   22484:	mov	r2, r7
   22488:	mvn	r3, #0
   2248c:	mov	r6, r0
   22490:	str	r8, [sp]
   22494:	add	r4, sp, #8
   22498:	bl	2db04 <__assert_fail@plt+0x1b088>
   2249c:	mov	r0, r6
   224a0:	mov	r1, r5
   224a4:	bl	224f8 <__assert_fail@plt+0xfa7c>
   224a8:	mov	r1, #0
   224ac:	mov	r2, r6
   224b0:	strb	r1, [r6, r0]
   224b4:	mov	r0, sl
   224b8:	mov	r1, r9
   224bc:	bl	127c4 <fprintf@plt>
   224c0:	mov	r5, r0
   224c4:	cmp	r6, r4
   224c8:	beq	224d4 <__assert_fail@plt+0xfa58>
   224cc:	mov	r0, r6
   224d0:	bl	32c40 <__assert_fail@plt+0x201c4>
   224d4:	mov	r0, r5
   224d8:	sub	sp, fp, #28
   224dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224e0:	mov	r0, sl
   224e4:	mov	r1, r9
   224e8:	mov	r2, r7
   224ec:	sub	sp, fp, #28
   224f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224f4:	b	127c4 <fprintf@plt>
   224f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224fc:	add	fp, sp, #28
   22500:	sub	sp, sp, #20
   22504:	mov	r5, r1
   22508:	mov	r4, r0
   2250c:	add	sl, r0, r1
   22510:	bl	12620 <__ctype_get_mb_cur_max@plt>
   22514:	cmp	r0, #2
   22518:	bcs	2255c <__assert_fail@plt+0xfae0>
   2251c:	cmp	r5, #1
   22520:	blt	22550 <__assert_fail@plt+0xfad4>
   22524:	bl	12740 <__ctype_b_loc@plt>
   22528:	mov	r1, #63	; 0x3f
   2252c:	ldrb	r2, [r4]
   22530:	ldr	r3, [r0]
   22534:	add	r2, r3, r2, lsl #1
   22538:	ldrb	r2, [r2, #1]
   2253c:	tst	r2, #64	; 0x40
   22540:	strbeq	r1, [r4]
   22544:	add	r4, r4, #1
   22548:	cmp	r4, sl
   2254c:	bcc	2252c <__assert_fail@plt+0xfab0>
   22550:	mov	r0, r5
   22554:	sub	sp, fp, #28
   22558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2255c:	cmp	r5, #1
   22560:	mov	r9, r4
   22564:	blt	2284c <__assert_fail@plt+0xfdd0>
   22568:	mov	r3, #0
   2256c:	add	r6, sp, #4
   22570:	add	r5, sp, #8
   22574:	mov	r9, r4
   22578:	mov	r7, r4
   2257c:	ldrb	r0, [r7]
   22580:	sub	r1, r0, #32
   22584:	cmp	r1, #94	; 0x5e
   22588:	bhi	22724 <__assert_fail@plt+0xfca8>
   2258c:	add	r2, pc, #0
   22590:	ldr	pc, [r2, r1, lsl #2]
   22594:	andeq	r2, r2, r0, lsl r7
   22598:	andeq	r2, r2, r0, lsl r7
   2259c:	andeq	r2, r2, r0, lsl r7
   225a0:	andeq	r2, r2, r0, lsl r7
   225a4:	andeq	r2, r2, r4, lsr #14
   225a8:	andeq	r2, r2, r0, lsl r7
   225ac:	andeq	r2, r2, r0, lsl r7
   225b0:	andeq	r2, r2, r0, lsl r7
   225b4:	andeq	r2, r2, r0, lsl r7
   225b8:	andeq	r2, r2, r0, lsl r7
   225bc:	andeq	r2, r2, r0, lsl r7
   225c0:	andeq	r2, r2, r0, lsl r7
   225c4:	andeq	r2, r2, r0, lsl r7
   225c8:	andeq	r2, r2, r0, lsl r7
   225cc:	andeq	r2, r2, r0, lsl r7
   225d0:	andeq	r2, r2, r0, lsl r7
   225d4:	andeq	r2, r2, r0, lsl r7
   225d8:	andeq	r2, r2, r0, lsl r7
   225dc:	andeq	r2, r2, r0, lsl r7
   225e0:	andeq	r2, r2, r0, lsl r7
   225e4:	andeq	r2, r2, r0, lsl r7
   225e8:	andeq	r2, r2, r0, lsl r7
   225ec:	andeq	r2, r2, r0, lsl r7
   225f0:	andeq	r2, r2, r0, lsl r7
   225f4:	andeq	r2, r2, r0, lsl r7
   225f8:	andeq	r2, r2, r0, lsl r7
   225fc:	andeq	r2, r2, r0, lsl r7
   22600:	andeq	r2, r2, r0, lsl r7
   22604:	andeq	r2, r2, r0, lsl r7
   22608:	andeq	r2, r2, r0, lsl r7
   2260c:	andeq	r2, r2, r0, lsl r7
   22610:	andeq	r2, r2, r0, lsl r7
   22614:	andeq	r2, r2, r4, lsr #14
   22618:	andeq	r2, r2, r0, lsl r7
   2261c:	andeq	r2, r2, r0, lsl r7
   22620:	andeq	r2, r2, r0, lsl r7
   22624:	andeq	r2, r2, r0, lsl r7
   22628:	andeq	r2, r2, r0, lsl r7
   2262c:	andeq	r2, r2, r0, lsl r7
   22630:	andeq	r2, r2, r0, lsl r7
   22634:	andeq	r2, r2, r0, lsl r7
   22638:	andeq	r2, r2, r0, lsl r7
   2263c:	andeq	r2, r2, r0, lsl r7
   22640:	andeq	r2, r2, r0, lsl r7
   22644:	andeq	r2, r2, r0, lsl r7
   22648:	andeq	r2, r2, r0, lsl r7
   2264c:	andeq	r2, r2, r0, lsl r7
   22650:	andeq	r2, r2, r0, lsl r7
   22654:	andeq	r2, r2, r0, lsl r7
   22658:	andeq	r2, r2, r0, lsl r7
   2265c:	andeq	r2, r2, r0, lsl r7
   22660:	andeq	r2, r2, r0, lsl r7
   22664:	andeq	r2, r2, r0, lsl r7
   22668:	andeq	r2, r2, r0, lsl r7
   2266c:	andeq	r2, r2, r0, lsl r7
   22670:	andeq	r2, r2, r0, lsl r7
   22674:	andeq	r2, r2, r0, lsl r7
   22678:	andeq	r2, r2, r0, lsl r7
   2267c:	andeq	r2, r2, r0, lsl r7
   22680:	andeq	r2, r2, r0, lsl r7
   22684:	andeq	r2, r2, r0, lsl r7
   22688:	andeq	r2, r2, r0, lsl r7
   2268c:	andeq	r2, r2, r0, lsl r7
   22690:	andeq	r2, r2, r0, lsl r7
   22694:	andeq	r2, r2, r4, lsr #14
   22698:	andeq	r2, r2, r0, lsl r7
   2269c:	andeq	r2, r2, r0, lsl r7
   226a0:	andeq	r2, r2, r0, lsl r7
   226a4:	andeq	r2, r2, r0, lsl r7
   226a8:	andeq	r2, r2, r0, lsl r7
   226ac:	andeq	r2, r2, r0, lsl r7
   226b0:	andeq	r2, r2, r0, lsl r7
   226b4:	andeq	r2, r2, r0, lsl r7
   226b8:	andeq	r2, r2, r0, lsl r7
   226bc:	andeq	r2, r2, r0, lsl r7
   226c0:	andeq	r2, r2, r0, lsl r7
   226c4:	andeq	r2, r2, r0, lsl r7
   226c8:	andeq	r2, r2, r0, lsl r7
   226cc:	andeq	r2, r2, r0, lsl r7
   226d0:	andeq	r2, r2, r0, lsl r7
   226d4:	andeq	r2, r2, r0, lsl r7
   226d8:	andeq	r2, r2, r0, lsl r7
   226dc:	andeq	r2, r2, r0, lsl r7
   226e0:	andeq	r2, r2, r0, lsl r7
   226e4:	andeq	r2, r2, r0, lsl r7
   226e8:	andeq	r2, r2, r0, lsl r7
   226ec:	andeq	r2, r2, r0, lsl r7
   226f0:	andeq	r2, r2, r0, lsl r7
   226f4:	andeq	r2, r2, r0, lsl r7
   226f8:	andeq	r2, r2, r0, lsl r7
   226fc:	andeq	r2, r2, r0, lsl r7
   22700:	andeq	r2, r2, r0, lsl r7
   22704:	andeq	r2, r2, r0, lsl r7
   22708:	andeq	r2, r2, r0, lsl r7
   2270c:	andeq	r2, r2, r0, lsl r7
   22710:	strb	r0, [r9], #1
   22714:	add	r7, r7, #1
   22718:	cmp	r7, sl
   2271c:	bcc	2257c <__assert_fail@plt+0xfb00>
   22720:	b	2284c <__assert_fail@plt+0xfdd0>
   22724:	str	r3, [sp, #12]
   22728:	str	r3, [sp, #8]
   2272c:	sub	r2, sl, r7
   22730:	mov	r0, r6
   22734:	mov	r1, r7
   22738:	mov	r3, r5
   2273c:	bl	35638 <__assert_fail@plt+0x22bbc>
   22740:	cmp	r0, #0
   22744:	beq	22760 <__assert_fail@plt+0xfce4>
   22748:	mov	r5, r0
   2274c:	cmn	r0, #2
   22750:	beq	22824 <__assert_fail@plt+0xfda8>
   22754:	cmn	r5, #1
   22758:	bne	22764 <__assert_fail@plt+0xfce8>
   2275c:	b	2282c <__assert_fail@plt+0xfdb0>
   22760:	mov	r5, #1
   22764:	ldr	r0, [sp, #4]
   22768:	add	r8, r7, r5
   2276c:	bl	12434 <wcwidth@plt>
   22770:	cmp	r0, #0
   22774:	blt	227f0 <__assert_fail@plt+0xfd74>
   22778:	cmp	r5, #16
   2277c:	bcc	227cc <__assert_fail@plt+0xfd50>
   22780:	cmp	r9, r8
   22784:	addcc	r0, r9, r5
   22788:	cmpcc	r7, r0
   2278c:	bcc	227cc <__assert_fail@plt+0xfd50>
   22790:	bic	ip, r5, #15
   22794:	mov	lr, r6
   22798:	mov	r6, r9
   2279c:	add	r2, r7, ip
   227a0:	add	r1, r9, ip
   227a4:	sub	r0, r5, ip
   227a8:	mov	r3, ip
   227ac:	vld1.8	{d16-d17}, [r7]!
   227b0:	subs	r3, r3, #16
   227b4:	vst1.8	{d16-d17}, [r6]!
   227b8:	bne	227ac <__assert_fail@plt+0xfd30>
   227bc:	cmp	r5, ip
   227c0:	mov	r6, lr
   227c4:	bne	227d8 <__assert_fail@plt+0xfd5c>
   227c8:	b	227e8 <__assert_fail@plt+0xfd6c>
   227cc:	mov	r0, r5
   227d0:	mov	r1, r9
   227d4:	mov	r2, r7
   227d8:	ldrb	r3, [r2], #1
   227dc:	subs	r0, r0, #1
   227e0:	strb	r3, [r1], #1
   227e4:	bne	227d8 <__assert_fail@plt+0xfd5c>
   227e8:	add	r9, r9, r5
   227ec:	b	227f8 <__assert_fail@plt+0xfd7c>
   227f0:	mov	r0, #63	; 0x3f
   227f4:	strb	r0, [r9], #1
   227f8:	add	r5, sp, #8
   227fc:	mov	r0, r5
   22800:	bl	124f4 <mbsinit@plt>
   22804:	cmp	r0, #0
   22808:	mov	r7, r8
   2280c:	beq	2272c <__assert_fail@plt+0xfcb0>
   22810:	mov	r7, r8
   22814:	mov	r3, #0
   22818:	cmp	r7, sl
   2281c:	bcc	2257c <__assert_fail@plt+0xfb00>
   22820:	b	2284c <__assert_fail@plt+0xfdd0>
   22824:	mov	r8, sl
   22828:	b	22830 <__assert_fail@plt+0xfdb4>
   2282c:	add	r8, r7, #1
   22830:	mov	r0, #63	; 0x3f
   22834:	add	r5, sp, #8
   22838:	strb	r0, [r9], #1
   2283c:	mov	r7, r8
   22840:	mov	r3, #0
   22844:	cmp	r7, sl
   22848:	bcc	2257c <__assert_fail@plt+0xfb00>
   2284c:	sub	r5, r9, r4
   22850:	mov	r0, r5
   22854:	sub	sp, fp, #28
   22858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2285c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22860:	add	fp, sp, #28
   22864:	sub	sp, sp, #28
   22868:	mov	r4, r0
   2286c:	movw	r0, #3324	; 0xcfc
   22870:	movt	r0, #5
   22874:	mov	r1, r4
   22878:	bl	123d4 <strcmp@plt>
   2287c:	cmp	r0, #0
   22880:	beq	22dfc <__assert_fail@plt+0x10380>
   22884:	movw	r0, #3324	; 0xcfc
   22888:	movt	r0, #5
   2288c:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22890:	mov	r5, r0
   22894:	movw	r0, #61162	; 0xeeea
   22898:	mov	r1, r4
   2289c:	movt	r0, #4
   228a0:	bl	123d4 <strcmp@plt>
   228a4:	cmp	r0, #0
   228a8:	beq	22e04 <__assert_fail@plt+0x10388>
   228ac:	mov	r0, r5
   228b0:	bl	12788 <strlen@plt>
   228b4:	mov	r5, r0
   228b8:	movw	r0, #61162	; 0xeeea
   228bc:	movt	r0, #4
   228c0:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   228c4:	mov	r6, r0
   228c8:	movw	r0, #3342	; 0xd0e
   228cc:	mov	r1, r4
   228d0:	movt	r0, #5
   228d4:	bl	123d4 <strcmp@plt>
   228d8:	cmp	r0, #0
   228dc:	beq	22e0c <__assert_fail@plt+0x10390>
   228e0:	mov	r0, r6
   228e4:	bl	12788 <strlen@plt>
   228e8:	mov	r6, r0
   228ec:	movw	r0, #3342	; 0xd0e
   228f0:	movt	r0, #5
   228f4:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   228f8:	mov	r7, r0
   228fc:	movw	r0, #3348	; 0xd14
   22900:	mov	r1, r4
   22904:	movt	r0, #5
   22908:	bl	123d4 <strcmp@plt>
   2290c:	cmp	r0, #0
   22910:	beq	22e14 <__assert_fail@plt+0x10398>
   22914:	mov	r0, r7
   22918:	bl	12788 <strlen@plt>
   2291c:	mov	sl, r0
   22920:	movw	r0, #3348	; 0xd14
   22924:	movt	r0, #5
   22928:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   2292c:	mov	r7, r0
   22930:	movw	r0, #3385	; 0xd39
   22934:	mov	r1, r4
   22938:	movt	r0, #5
   2293c:	bl	123d4 <strcmp@plt>
   22940:	cmp	r0, #0
   22944:	beq	22e1c <__assert_fail@plt+0x103a0>
   22948:	mov	r0, r7
   2294c:	bl	12788 <strlen@plt>
   22950:	mov	r8, r0
   22954:	movw	r0, #3385	; 0xd39
   22958:	movt	r0, #5
   2295c:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22960:	mov	r7, r0
   22964:	movw	r0, #3356	; 0xd1c
   22968:	mov	r1, r4
   2296c:	movt	r0, #5
   22970:	bl	123d4 <strcmp@plt>
   22974:	cmp	r0, #0
   22978:	beq	22e24 <__assert_fail@plt+0x103a8>
   2297c:	mov	r0, r7
   22980:	bl	12788 <strlen@plt>
   22984:	mov	r9, r0
   22988:	movw	r0, #3356	; 0xd1c
   2298c:	movt	r0, #5
   22990:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22994:	mov	r7, r0
   22998:	movw	r0, #3352	; 0xd18
   2299c:	mov	r1, r4
   229a0:	movt	r0, #5
   229a4:	bl	123d4 <strcmp@plt>
   229a8:	cmp	r0, #0
   229ac:	beq	22e2c <__assert_fail@plt+0x103b0>
   229b0:	mov	r0, r7
   229b4:	bl	12788 <strlen@plt>
   229b8:	str	r0, [sp, #24]
   229bc:	movw	r0, #3352	; 0xd18
   229c0:	movt	r0, #5
   229c4:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   229c8:	mov	r7, r0
   229cc:	movw	r0, #3366	; 0xd26
   229d0:	mov	r1, r4
   229d4:	movt	r0, #5
   229d8:	bl	123d4 <strcmp@plt>
   229dc:	cmp	r0, #0
   229e0:	beq	22e34 <__assert_fail@plt+0x103b8>
   229e4:	mov	r0, r7
   229e8:	bl	12788 <strlen@plt>
   229ec:	str	r0, [sp, #20]
   229f0:	movw	r0, #3366	; 0xd26
   229f4:	movt	r0, #5
   229f8:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   229fc:	mov	r7, r0
   22a00:	movw	r0, #3378	; 0xd32
   22a04:	mov	r1, r4
   22a08:	movt	r0, #5
   22a0c:	bl	123d4 <strcmp@plt>
   22a10:	cmp	r0, #0
   22a14:	beq	22e3c <__assert_fail@plt+0x103c0>
   22a18:	mov	r0, r7
   22a1c:	bl	12788 <strlen@plt>
   22a20:	str	r0, [sp, #16]
   22a24:	movw	r0, #3378	; 0xd32
   22a28:	movt	r0, #5
   22a2c:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22a30:	mov	r7, r0
   22a34:	movw	r0, #3384	; 0xd38
   22a38:	mov	r1, r4
   22a3c:	movt	r0, #5
   22a40:	bl	123d4 <strcmp@plt>
   22a44:	cmp	r0, #0
   22a48:	beq	22e44 <__assert_fail@plt+0x103c8>
   22a4c:	mov	r0, r7
   22a50:	bl	12788 <strlen@plt>
   22a54:	str	r0, [sp, #12]
   22a58:	movw	r0, #3384	; 0xd38
   22a5c:	movt	r0, #5
   22a60:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22a64:	mov	r7, r0
   22a68:	movw	r0, #3390	; 0xd3e
   22a6c:	mov	r1, r4
   22a70:	movt	r0, #5
   22a74:	bl	123d4 <strcmp@plt>
   22a78:	cmp	r0, #0
   22a7c:	beq	22e4c <__assert_fail@plt+0x103d0>
   22a80:	mov	r0, r7
   22a84:	bl	12788 <strlen@plt>
   22a88:	str	r0, [sp, #8]
   22a8c:	movw	r0, #3390	; 0xd3e
   22a90:	movt	r0, #5
   22a94:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22a98:	mov	r7, r0
   22a9c:	movw	r0, #3405	; 0xd4d
   22aa0:	mov	r1, r4
   22aa4:	movt	r0, #5
   22aa8:	bl	123d4 <strcmp@plt>
   22aac:	cmp	r0, #0
   22ab0:	beq	22e54 <__assert_fail@plt+0x103d8>
   22ab4:	mov	r0, r7
   22ab8:	bl	12788 <strlen@plt>
   22abc:	mov	r7, r0
   22ac0:	movw	r0, #3405	; 0xd4d
   22ac4:	movt	r0, #5
   22ac8:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22acc:	str	r0, [sp, #4]
   22ad0:	movw	r0, #60709	; 0xed25
   22ad4:	mov	r1, r4
   22ad8:	movt	r0, #4
   22adc:	bl	123d4 <strcmp@plt>
   22ae0:	mov	r1, #12
   22ae4:	cmp	r0, #0
   22ae8:	beq	22e58 <__assert_fail@plt+0x103dc>
   22aec:	add	r0, r5, r6
   22af0:	ldr	r1, [sp, #24]
   22af4:	add	r0, r0, sl
   22af8:	add	r0, r0, r8
   22afc:	add	r0, r0, r9
   22b00:	add	r0, r0, r1
   22b04:	ldr	r1, [sp, #20]
   22b08:	add	r0, r0, r1
   22b0c:	ldr	r1, [sp, #16]
   22b10:	add	r0, r0, r1
   22b14:	ldr	r1, [sp, #12]
   22b18:	add	r0, r0, r1
   22b1c:	ldr	r1, [sp, #8]
   22b20:	add	r0, r0, r1
   22b24:	add	r5, r0, r7
   22b28:	ldr	r0, [sp, #4]
   22b2c:	bl	12788 <strlen@plt>
   22b30:	add	r5, r5, r0
   22b34:	movw	r0, #60709	; 0xed25
   22b38:	movt	r0, #4
   22b3c:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22b40:	bl	12788 <strlen@plt>
   22b44:	add	r0, r5, r0
   22b48:	add	r0, r0, #27
   22b4c:	bl	309ec <__assert_fail@plt+0x1df70>
   22b50:	mov	r9, r0
   22b54:	movw	r0, #3324	; 0xcfc
   22b58:	movt	r0, #5
   22b5c:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22b60:	mov	r7, r0
   22b64:	bl	12788 <strlen@plt>
   22b68:	mov	r6, r0
   22b6c:	add	r2, r0, #1
   22b70:	mov	r0, r9
   22b74:	mov	r1, r7
   22b78:	bl	124b8 <memcpy@plt>
   22b7c:	movw	r0, #61162	; 0xeeea
   22b80:	movw	sl, #8236	; 0x202c
   22b84:	mov	r7, r9
   22b88:	mov	r8, #0
   22b8c:	strh	sl, [r7, r6]!
   22b90:	movt	r0, #4
   22b94:	strb	r8, [r7, #2]!
   22b98:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22b9c:	mov	r6, r0
   22ba0:	bl	12788 <strlen@plt>
   22ba4:	mov	r5, r0
   22ba8:	add	r2, r0, #1
   22bac:	mov	r0, r7
   22bb0:	mov	r1, r6
   22bb4:	bl	124b8 <memcpy@plt>
   22bb8:	movw	r0, #3342	; 0xd0e
   22bbc:	strh	sl, [r7, r5]!
   22bc0:	movt	r0, #5
   22bc4:	strb	r8, [r7, #2]!
   22bc8:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22bcc:	mov	r5, r0
   22bd0:	bl	12788 <strlen@plt>
   22bd4:	mov	r6, r0
   22bd8:	add	r2, r0, #1
   22bdc:	mov	r0, r7
   22be0:	mov	r1, r5
   22be4:	bl	124b8 <memcpy@plt>
   22be8:	movw	r0, #3348	; 0xd14
   22bec:	strh	sl, [r7, r6]!
   22bf0:	movt	r0, #5
   22bf4:	strb	r8, [r7, #2]!
   22bf8:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22bfc:	mov	r5, r0
   22c00:	bl	12788 <strlen@plt>
   22c04:	mov	r6, r0
   22c08:	add	r2, r0, #1
   22c0c:	mov	r0, r7
   22c10:	mov	r1, r5
   22c14:	bl	124b8 <memcpy@plt>
   22c18:	movw	r0, #3385	; 0xd39
   22c1c:	strh	sl, [r7, r6]!
   22c20:	movt	r0, #5
   22c24:	strb	r8, [r7, #2]!
   22c28:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22c2c:	mov	r5, r0
   22c30:	bl	12788 <strlen@plt>
   22c34:	mov	r6, r0
   22c38:	add	r2, r0, #1
   22c3c:	mov	r0, r7
   22c40:	mov	r1, r5
   22c44:	bl	124b8 <memcpy@plt>
   22c48:	movw	r0, #3356	; 0xd1c
   22c4c:	strh	sl, [r7, r6]!
   22c50:	movt	r0, #5
   22c54:	strb	r8, [r7, #2]!
   22c58:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22c5c:	mov	r5, r0
   22c60:	bl	12788 <strlen@plt>
   22c64:	mov	r6, r0
   22c68:	add	r2, r0, #1
   22c6c:	mov	r0, r7
   22c70:	mov	r1, r5
   22c74:	bl	124b8 <memcpy@plt>
   22c78:	movw	r0, #3352	; 0xd18
   22c7c:	strh	sl, [r7, r6]!
   22c80:	movt	r0, #5
   22c84:	strb	r8, [r7, #2]!
   22c88:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22c8c:	mov	r5, r0
   22c90:	bl	12788 <strlen@plt>
   22c94:	mov	r6, r0
   22c98:	add	r2, r0, #1
   22c9c:	mov	r0, r7
   22ca0:	mov	r1, r5
   22ca4:	bl	124b8 <memcpy@plt>
   22ca8:	movw	r0, #3366	; 0xd26
   22cac:	strh	sl, [r7, r6]!
   22cb0:	movt	r0, #5
   22cb4:	strb	r8, [r7, #2]!
   22cb8:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22cbc:	mov	r5, r0
   22cc0:	bl	12788 <strlen@plt>
   22cc4:	mov	r6, r0
   22cc8:	add	r2, r0, #1
   22ccc:	mov	r0, r7
   22cd0:	mov	r1, r5
   22cd4:	bl	124b8 <memcpy@plt>
   22cd8:	movw	r0, #3378	; 0xd32
   22cdc:	strh	sl, [r7, r6]!
   22ce0:	movt	r0, #5
   22ce4:	strb	r8, [r7, #2]!
   22ce8:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22cec:	mov	r5, r0
   22cf0:	bl	12788 <strlen@plt>
   22cf4:	mov	r6, r0
   22cf8:	add	r2, r0, #1
   22cfc:	mov	r0, r7
   22d00:	mov	r1, r5
   22d04:	bl	124b8 <memcpy@plt>
   22d08:	movw	r0, #3384	; 0xd38
   22d0c:	strh	sl, [r7, r6]!
   22d10:	movt	r0, #5
   22d14:	strb	r8, [r7, #2]!
   22d18:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22d1c:	mov	r5, r0
   22d20:	bl	12788 <strlen@plt>
   22d24:	mov	r6, r0
   22d28:	add	r2, r0, #1
   22d2c:	mov	r0, r7
   22d30:	mov	r1, r5
   22d34:	bl	124b8 <memcpy@plt>
   22d38:	movw	r0, #3390	; 0xd3e
   22d3c:	strh	sl, [r7, r6]!
   22d40:	movt	r0, #5
   22d44:	strb	r8, [r7, #2]!
   22d48:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22d4c:	mov	r5, r0
   22d50:	bl	12788 <strlen@plt>
   22d54:	mov	r6, r0
   22d58:	add	r2, r0, #1
   22d5c:	mov	r0, r7
   22d60:	mov	r1, r5
   22d64:	bl	124b8 <memcpy@plt>
   22d68:	movw	r0, #3405	; 0xd4d
   22d6c:	strh	sl, [r7, r6]!
   22d70:	movt	r0, #5
   22d74:	strb	r8, [r7, #2]!
   22d78:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22d7c:	mov	r5, r0
   22d80:	bl	12788 <strlen@plt>
   22d84:	mov	r6, r0
   22d88:	add	r2, r0, #1
   22d8c:	mov	r0, r7
   22d90:	mov	r1, r5
   22d94:	bl	124b8 <memcpy@plt>
   22d98:	movw	r0, #60709	; 0xed25
   22d9c:	strh	sl, [r7, r6]!
   22da0:	movt	r0, #4
   22da4:	strb	r8, [r7, #2]!
   22da8:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22dac:	mov	r5, r0
   22db0:	bl	12788 <strlen@plt>
   22db4:	add	r2, r0, #1
   22db8:	mov	r0, r7
   22dbc:	mov	r1, r5
   22dc0:	bl	124b8 <memcpy@plt>
   22dc4:	movw	r1, #3268	; 0xcc4
   22dc8:	mov	r0, #0
   22dcc:	mov	r2, #5
   22dd0:	movt	r1, #5
   22dd4:	bl	1253c <dcgettext@plt>
   22dd8:	mov	r5, r0
   22ddc:	mov	r0, r4
   22de0:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   22de4:	mov	r3, r0
   22de8:	mov	r0, #1
   22dec:	mov	r1, #0
   22df0:	mov	r2, r5
   22df4:	str	r9, [sp]
   22df8:	bl	12674 <error@plt>
   22dfc:	mov	r1, #0
   22e00:	b	22e58 <__assert_fail@plt+0x103dc>
   22e04:	mov	r1, #1
   22e08:	b	22e58 <__assert_fail@plt+0x103dc>
   22e0c:	mov	r1, #2
   22e10:	b	22e58 <__assert_fail@plt+0x103dc>
   22e14:	mov	r1, #3
   22e18:	b	22e58 <__assert_fail@plt+0x103dc>
   22e1c:	mov	r1, #4
   22e20:	b	22e58 <__assert_fail@plt+0x103dc>
   22e24:	mov	r1, #5
   22e28:	b	22e58 <__assert_fail@plt+0x103dc>
   22e2c:	mov	r1, #6
   22e30:	b	22e58 <__assert_fail@plt+0x103dc>
   22e34:	mov	r1, #7
   22e38:	b	22e58 <__assert_fail@plt+0x103dc>
   22e3c:	mov	r1, #8
   22e40:	b	22e58 <__assert_fail@plt+0x103dc>
   22e44:	mov	r1, #9
   22e48:	b	22e58 <__assert_fail@plt+0x103dc>
   22e4c:	mov	r1, #10
   22e50:	b	22e58 <__assert_fail@plt+0x103dc>
   22e54:	mov	r1, #11
   22e58:	add	r0, r1, r1, lsl #1
   22e5c:	movw	r1, #3112	; 0xc28
   22e60:	movt	r1, #5
   22e64:	add	r0, r1, r0, lsl #2
   22e68:	ldr	r0, [r0, #8]
   22e6c:	sub	sp, fp, #28
   22e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e74:	mov	r1, r0
   22e78:	mov	r0, #0
   22e7c:	cmp	r1, #12
   22e80:	addls	r0, r1, r1, lsl #1
   22e84:	movwls	r1, #3112	; 0xc28
   22e88:	movtls	r1, #5
   22e8c:	ldrls	r0, [r1, r0, lsl #2]
   22e90:	bx	lr
   22e94:	mov	r1, r0
   22e98:	mvn	r0, #0
   22e9c:	cmp	r1, #12
   22ea0:	bxhi	lr
   22ea4:	add	r0, r1, r1, lsl #1
   22ea8:	movw	r1, #3112	; 0xc28
   22eac:	movt	r1, #5
   22eb0:	add	r0, r1, r0, lsl #2
   22eb4:	ldr	r0, [r0, #8]
   22eb8:	bx	lr
   22ebc:	mov	r1, r0
   22ec0:	mov	r0, #0
   22ec4:	cmp	r1, #12
   22ec8:	bxhi	lr
   22ecc:	add	r0, r1, r1, lsl #1
   22ed0:	movw	r1, #3112	; 0xc28
   22ed4:	movt	r1, #5
   22ed8:	add	r0, r1, r0, lsl #2
   22edc:	ldr	r0, [r0, #4]
   22ee0:	bx	lr
   22ee4:	push	{r4, sl, fp, lr}
   22ee8:	add	fp, sp, #8
   22eec:	mov	lr, r0
   22ef0:	mvn	r0, #0
   22ef4:	cmp	lr, #12
   22ef8:	bhi	22f4c <__assert_fail@plt+0x104d0>
   22efc:	cmp	lr, #0
   22f00:	popeq	{r4, sl, fp, pc}
   22f04:	movw	r3, #3112	; 0xc28
   22f08:	add	r2, lr, lr, lsl #1
   22f0c:	movt	r3, #5
   22f10:	add	r2, r3, r2, lsl #2
   22f14:	ldr	ip, [r2, #8]
   22f18:	add	r2, r3, #4
   22f1c:	mov	r3, #0
   22f20:	ldr	r4, [r2]
   22f24:	tst	r4, r1
   22f28:	beq	22f3c <__assert_fail@plt+0x104c0>
   22f2c:	ldr	r4, [r2, #4]
   22f30:	cmp	ip, r4
   22f34:	moveq	r0, r3
   22f38:	popeq	{r4, sl, fp, pc}
   22f3c:	add	r3, r3, #1
   22f40:	add	r2, r2, #12
   22f44:	cmp	r3, lr
   22f48:	bcc	22f20 <__assert_fail@plt+0x104a4>
   22f4c:	pop	{r4, sl, fp, pc}
   22f50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22f54:	add	fp, sp, #24
   22f58:	sub	sp, sp, #8
   22f5c:	mov	r5, r1
   22f60:	mov	r4, r0
   22f64:	bl	127d0 <__errno_location@plt>
   22f68:	mov	r6, r0
   22f6c:	mov	r0, #0
   22f70:	add	r1, sp, #4
   22f74:	mov	r2, #10
   22f78:	str	r0, [r6]
   22f7c:	mov	r0, r4
   22f80:	bl	123e0 <strtol@plt>
   22f84:	add	r1, r0, #-2147483647	; 0x80000001
   22f88:	cmp	r1, #1
   22f8c:	bls	22fec <__assert_fail@plt+0x10570>
   22f90:	ldr	r7, [sp, #4]
   22f94:	ldrb	r1, [r7]
   22f98:	cmp	r1, #0
   22f9c:	bne	23004 <__assert_fail@plt+0x10588>
   22fa0:	cmp	r7, r4
   22fa4:	subne	sp, fp, #24
   22fa8:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   22fac:	ldr	r6, [r6]
   22fb0:	movw	r1, #3452	; 0xd7c
   22fb4:	mov	r0, #0
   22fb8:	mov	r2, #5
   22fbc:	movt	r1, #5
   22fc0:	bl	1253c <dcgettext@plt>
   22fc4:	mov	r7, r0
   22fc8:	mov	r0, #0
   22fcc:	mov	r1, r5
   22fd0:	mov	r2, r4
   22fd4:	bl	2f2ec <__assert_fail@plt+0x1c870>
   22fd8:	mov	r3, r0
   22fdc:	mov	r0, #1
   22fe0:	mov	r1, r6
   22fe4:	mov	r2, r7
   22fe8:	bl	12674 <error@plt>
   22fec:	ldr	r1, [r6]
   22ff0:	movw	r2, #9967	; 0x26ef
   22ff4:	mov	r0, #1
   22ff8:	mov	r3, r4
   22ffc:	movt	r2, #5
   23000:	bl	12674 <error@plt>
   23004:	ldr	r8, [r6]
   23008:	movw	r1, #3425	; 0xd61
   2300c:	mov	r0, #0
   23010:	mov	r2, #5
   23014:	movt	r1, #5
   23018:	bl	1253c <dcgettext@plt>
   2301c:	mov	r6, r0
   23020:	mov	r0, #0
   23024:	mov	r1, r5
   23028:	mov	r2, r7
   2302c:	bl	2f2ec <__assert_fail@plt+0x1c870>
   23030:	mov	r7, r0
   23034:	mov	r0, #1
   23038:	mov	r1, r5
   2303c:	mov	r2, r4
   23040:	bl	2f2ec <__assert_fail@plt+0x1c870>
   23044:	str	r0, [sp]
   23048:	mov	r0, #1
   2304c:	mov	r1, r8
   23050:	mov	r2, r6
   23054:	mov	r3, r7
   23058:	bl	12674 <error@plt>
   2305c:	push	{r4, r5, fp, lr}
   23060:	add	fp, sp, #8
   23064:	ldr	r5, [fp, #8]
   23068:	cmp	r2, #0
   2306c:	beq	230b0 <__assert_fail@plt+0x10634>
   23070:	mov	r2, #0
   23074:	str	r2, [r3]
   23078:	str	r2, [r5]
   2307c:	ldr	r2, [r3]
   23080:	add	r4, r0, r2
   23084:	ldrb	r0, [r1]
   23088:	cmp	r0, #0
   2308c:	beq	230e8 <__assert_fail@plt+0x1066c>
   23090:	mov	r0, r4
   23094:	bl	129b0 <strpbrk@plt>
   23098:	cmp	r0, #0
   2309c:	beq	230e8 <__assert_fail@plt+0x1066c>
   230a0:	sub	r0, r0, r4
   230a4:	str	r0, [r5]
   230a8:	mov	r0, #1
   230ac:	pop	{r4, r5, fp, pc}
   230b0:	ldr	r2, [r5]
   230b4:	ldr	r4, [r3]
   230b8:	add	r2, r4, r2
   230bc:	str	r2, [r3]
   230c0:	ldrb	r4, [r0, r2]
   230c4:	cmp	r4, #0
   230c8:	moveq	r0, #0
   230cc:	popeq	{r4, r5, fp, pc}
   230d0:	add	r2, r2, #1
   230d4:	str	r2, [r3]
   230d8:	add	r4, r0, r2
   230dc:	ldrb	r0, [r1]
   230e0:	cmp	r0, #0
   230e4:	bne	23090 <__assert_fail@plt+0x10614>
   230e8:	mov	r0, r4
   230ec:	bl	12788 <strlen@plt>
   230f0:	str	r0, [r5]
   230f4:	mov	r0, #1
   230f8:	pop	{r4, r5, fp, pc}
   230fc:	push	{r4, r5, fp, lr}
   23100:	add	fp, sp, #8
   23104:	sub	sp, sp, #16
   23108:	mov	r4, r1
   2310c:	movw	r1, #3476	; 0xd94
   23110:	mov	r5, r0
   23114:	mov	r0, #0
   23118:	mov	r2, #5
   2311c:	movt	r1, #5
   23120:	bl	1253c <dcgettext@plt>
   23124:	movw	r2, #3721	; 0xe89
   23128:	movw	r3, #2921	; 0xb69
   2312c:	mov	r1, r0
   23130:	movw	r0, #3768	; 0xeb8
   23134:	movt	r2, #5
   23138:	movt	r0, #5
   2313c:	movt	r3, #5
   23140:	str	r2, [sp, #4]
   23144:	movw	r2, #3682	; 0xe62
   23148:	str	r3, [sp]
   2314c:	str	r0, [sp, #8]
   23150:	mov	r0, r5
   23154:	mov	r3, r4
   23158:	movt	r2, #5
   2315c:	bl	127c4 <fprintf@plt>
   23160:	sub	sp, fp, #8
   23164:	pop	{r4, r5, fp, pc}
   23168:	push	{fp, lr}
   2316c:	mov	fp, sp
   23170:	sub	sp, sp, #8
   23174:	movw	r2, #9952	; 0x26e0
   23178:	mov	r3, #0
   2317c:	movt	r2, #1
   23180:	str	r3, [sp]
   23184:	mov	r3, #0
   23188:	str	r2, [sp, #4]
   2318c:	mov	r2, #0
   23190:	bl	2330c <__assert_fail@plt+0x10890>
   23194:	mov	sp, fp
   23198:	pop	{fp, pc}
   2319c:	push	{r4, sl, fp, lr}
   231a0:	add	fp, sp, #8
   231a4:	mov	r4, r0
   231a8:	mov	r0, #24
   231ac:	bl	35608 <__assert_fail@plt+0x22b8c>
   231b0:	cmp	r0, #0
   231b4:	movne	r1, #0
   231b8:	strne	r1, [r0]
   231bc:	strne	r4, [r0, #16]
   231c0:	strne	r4, [r0, #20]
   231c4:	popne	{r4, sl, fp, pc}
   231c8:	mov	r0, #0
   231cc:	pop	{r4, sl, fp, pc}
   231d0:	push	{r4, sl, fp, lr}
   231d4:	add	fp, sp, #8
   231d8:	mov	r4, r0
   231dc:	mov	r0, #24
   231e0:	bl	35608 <__assert_fail@plt+0x22b8c>
   231e4:	cmp	r0, #0
   231e8:	moveq	r0, #0
   231ec:	popeq	{r4, sl, fp, pc}
   231f0:	mov	r1, r0
   231f4:	vmov.i32	q8, #0	; 0x00000000
   231f8:	str	r4, [r1], #4
   231fc:	vst1.32	{d16-d17}, [r1]
   23200:	pop	{r4, sl, fp, pc}
   23204:	push	{r4, r5, r6, sl, fp, lr}
   23208:	add	fp, sp, #16
   2320c:	ldr	r3, [r0]
   23210:	mov	r4, r1
   23214:	mov	r5, r0
   23218:	cmp	r3, #0
   2321c:	beq	23258 <__assert_fail@plt+0x107dc>
   23220:	add	r0, r5, #8
   23224:	add	r1, r5, #12
   23228:	mov	r2, #0
   2322c:	mov	r6, #0
   23230:	bl	129d4 <getdelim@plt>
   23234:	cmn	r0, #1
   23238:	ble	23288 <__assert_fail@plt+0x1080c>
   2323c:	mov	r0, #1
   23240:	str	r0, [r4]
   23244:	ldmib	r5, {r0, r6}
   23248:	add	r0, r0, #1
   2324c:	str	r0, [r5, #4]
   23250:	mov	r0, r6
   23254:	pop	{r4, r5, r6, sl, fp, pc}
   23258:	ldr	r0, [r5, #20]
   2325c:	ldr	r0, [r0]
   23260:	cmp	r0, #0
   23264:	beq	232a8 <__assert_fail@plt+0x1082c>
   23268:	mov	r0, #1
   2326c:	str	r0, [r4]
   23270:	ldr	r0, [r5, #20]
   23274:	add	r1, r0, #4
   23278:	str	r1, [r5, #20]
   2327c:	ldr	r6, [r0]
   23280:	mov	r0, r6
   23284:	pop	{r4, r5, r6, sl, fp, pc}
   23288:	ldr	r0, [r5]
   2328c:	bl	12764 <feof@plt>
   23290:	cmp	r0, #0
   23294:	mov	r1, #2
   23298:	mov	r0, r6
   2329c:	movweq	r1, #4
   232a0:	str	r1, [r4]
   232a4:	pop	{r4, r5, r6, sl, fp, pc}
   232a8:	mov	r0, #2
   232ac:	mov	r6, #0
   232b0:	str	r0, [r4]
   232b4:	mov	r0, r6
   232b8:	pop	{r4, r5, r6, sl, fp, pc}
   232bc:	ldr	r1, [r0]
   232c0:	cmp	r1, #0
   232c4:	ldrne	r0, [r0, #4]
   232c8:	bxne	lr
   232cc:	ldr	r1, [r0, #16]
   232d0:	ldr	r0, [r0, #20]
   232d4:	sub	r0, r0, r1
   232d8:	asr	r0, r0, #2
   232dc:	bx	lr
   232e0:	push	{r4, sl, fp, lr}
   232e4:	add	fp, sp, #8
   232e8:	mov	r4, r0
   232ec:	ldr	r0, [r0]
   232f0:	cmp	r0, #0
   232f4:	beq	23300 <__assert_fail@plt+0x10884>
   232f8:	ldr	r0, [r4, #8]
   232fc:	bl	32c40 <__assert_fail@plt+0x201c4>
   23300:	mov	r0, r4
   23304:	pop	{r4, sl, fp, lr}
   23308:	b	32c40 <__assert_fail@plt+0x201c4>
   2330c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23310:	add	fp, sp, #28
   23314:	sub	sp, sp, #4
   23318:	sub	sp, sp, #1024	; 0x400
   2331c:	mov	r9, r0
   23320:	mov	r5, r2
   23324:	mov	r0, sp
   23328:	cmp	r2, #0
   2332c:	mov	r4, r3
   23330:	ldr	sl, [fp, #12]
   23334:	movw	r7, #9864	; 0x2688
   23338:	mov	r8, r1
   2333c:	moveq	r5, r0
   23340:	ldr	r0, [fp, #8]
   23344:	movweq	r4, #1024	; 0x400
   23348:	movt	r7, #5
   2334c:	cmn	r4, #-2147483647	; 0x80000001
   23350:	mov	r6, r5
   23354:	mvncs	r4, #-2147483648	; 0x80000000
   23358:	cmp	r0, #0
   2335c:	movne	r7, r0
   23360:	mov	r0, r9
   23364:	mov	r1, r8
   23368:	mov	r2, r6
   2336c:	mov	r3, r4
   23370:	blx	sl
   23374:	cmn	r0, #1
   23378:	ble	233e0 <__assert_fail@plt+0x10964>
   2337c:	cmp	r0, r4
   23380:	blt	23414 <__assert_fail@plt+0x10998>
   23384:	cmp	r6, r5
   23388:	beq	23398 <__assert_fail@plt+0x1091c>
   2338c:	ldr	r1, [r7, #8]
   23390:	mov	r0, r6
   23394:	blx	r1
   23398:	cmn	r4, #-1073741823	; 0xc0000001
   2339c:	bge	2346c <__assert_fail@plt+0x109f0>
   233a0:	ldr	r1, [r7]
   233a4:	mov	r0, #1
   233a8:	orr	r4, r0, r4, lsl #1
   233ac:	mov	r0, r4
   233b0:	blx	r1
   233b4:	mov	r6, r0
   233b8:	cmp	r0, #0
   233bc:	bne	23360 <__assert_fail@plt+0x108e4>
   233c0:	ldr	r1, [r7, #12]
   233c4:	cmp	r1, #0
   233c8:	beq	233d4 <__assert_fail@plt+0x10958>
   233cc:	mov	r0, r4
   233d0:	blx	r1
   233d4:	bl	127d0 <__errno_location@plt>
   233d8:	mov	r1, #12
   233dc:	b	23474 <__assert_fail@plt+0x109f8>
   233e0:	mov	r4, #0
   233e4:	cmp	r6, r5
   233e8:	beq	23408 <__assert_fail@plt+0x1098c>
   233ec:	bl	127d0 <__errno_location@plt>
   233f0:	ldr	r1, [r7, #8]
   233f4:	ldr	r8, [r0]
   233f8:	mov	r5, r0
   233fc:	mov	r0, r6
   23400:	blx	r1
   23404:	str	r8, [r5]
   23408:	mov	r0, r4
   2340c:	sub	sp, fp, #28
   23410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23414:	mov	r1, #0
   23418:	add	r8, r0, #1
   2341c:	strb	r1, [r6, r0]
   23420:	mov	r0, sp
   23424:	cmp	r6, r0
   23428:	beq	23488 <__assert_fail@plt+0x10a0c>
   2342c:	cmp	r6, r5
   23430:	beq	234b8 <__assert_fail@plt+0x10a3c>
   23434:	cmp	r8, r4
   23438:	bge	234c8 <__assert_fail@plt+0x10a4c>
   2343c:	ldr	r2, [r7, #4]
   23440:	cmp	r2, #0
   23444:	beq	234ec <__assert_fail@plt+0x10a70>
   23448:	mov	r0, r6
   2344c:	mov	r1, r8
   23450:	blx	r2
   23454:	mov	r4, r0
   23458:	cmp	r0, #0
   2345c:	moveq	r4, r6
   23460:	mov	r0, r4
   23464:	sub	sp, fp, #28
   23468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2346c:	bl	127d0 <__errno_location@plt>
   23470:	mov	r1, #36	; 0x24
   23474:	mov	r4, #0
   23478:	str	r1, [r0]
   2347c:	mov	r0, r4
   23480:	sub	sp, fp, #28
   23484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23488:	ldr	r1, [r7]
   2348c:	mov	r0, r8
   23490:	blx	r1
   23494:	cmp	r0, #0
   23498:	beq	234d8 <__assert_fail@plt+0x10a5c>
   2349c:	mov	r1, sp
   234a0:	mov	r2, r8
   234a4:	mov	r4, r0
   234a8:	bl	124b8 <memcpy@plt>
   234ac:	mov	r0, r4
   234b0:	sub	sp, fp, #28
   234b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234b8:	mov	r4, r6
   234bc:	mov	r0, r4
   234c0:	sub	sp, fp, #28
   234c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234c8:	mov	r4, r6
   234cc:	mov	r0, r4
   234d0:	sub	sp, fp, #28
   234d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234d8:	mov	r4, r8
   234dc:	ldr	r1, [r7, #12]
   234e0:	cmp	r1, #0
   234e4:	bne	233cc <__assert_fail@plt+0x10950>
   234e8:	b	233d4 <__assert_fail@plt+0x10958>
   234ec:	mov	r4, r6
   234f0:	mov	r0, r4
   234f4:	sub	sp, fp, #28
   234f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234fc:	push	{r4, r5, r6, sl, fp, lr}
   23500:	add	fp, sp, #16
   23504:	mov	r6, r1
   23508:	mov	r1, #1
   2350c:	mov	r2, #0
   23510:	mov	r4, r0
   23514:	mov	r5, #0
   23518:	bl	329f8 <__assert_fail@plt+0x1ff7c>
   2351c:	cmp	r0, #0
   23520:	blt	23550 <__assert_fail@plt+0x10ad4>
   23524:	bic	r2, r0, #1
   23528:	cmp	r6, #0
   2352c:	orrne	r2, r0, #1
   23530:	cmp	r0, r2
   23534:	beq	23554 <__assert_fail@plt+0x10ad8>
   23538:	mov	r0, r4
   2353c:	mov	r1, #2
   23540:	bl	329f8 <__assert_fail@plt+0x1ff7c>
   23544:	cmn	r0, #1
   23548:	movwne	r0, #0
   2354c:	pop	{r4, r5, r6, sl, fp, pc}
   23550:	mvn	r5, #0
   23554:	mov	r0, r5
   23558:	pop	{r4, r5, r6, sl, fp, pc}
   2355c:	movw	r1, #1030	; 0x406
   23560:	mov	r2, #0
   23564:	b	329f8 <__assert_fail@plt+0x1ff7c>
   23568:	movw	r1, #15596	; 0x3cec
   2356c:	movt	r1, #6
   23570:	str	r0, [r1, #4]
   23574:	bx	lr
   23578:	movw	r1, #15596	; 0x3cec
   2357c:	movt	r1, #6
   23580:	strb	r0, [r1]
   23584:	bx	lr
   23588:	push	{r4, r5, r6, sl, fp, lr}
   2358c:	add	fp, sp, #16
   23590:	sub	sp, sp, #8
   23594:	movw	r0, #13652	; 0x3554
   23598:	movt	r0, #6
   2359c:	ldr	r0, [r0]
   235a0:	bl	4b6bc <__assert_fail@plt+0x38c40>
   235a4:	cmp	r0, #0
   235a8:	beq	235d0 <__assert_fail@plt+0x10b54>
   235ac:	movw	r5, #15596	; 0x3cec
   235b0:	movt	r5, #6
   235b4:	ldrb	r0, [r5]
   235b8:	cmp	r0, #0
   235bc:	beq	235fc <__assert_fail@plt+0x10b80>
   235c0:	bl	127d0 <__errno_location@plt>
   235c4:	ldr	r0, [r0]
   235c8:	cmp	r0, #32
   235cc:	bne	235fc <__assert_fail@plt+0x10b80>
   235d0:	movw	r0, #13640	; 0x3548
   235d4:	movt	r0, #6
   235d8:	ldr	r0, [r0]
   235dc:	bl	4b6bc <__assert_fail@plt+0x38c40>
   235e0:	cmp	r0, #0
   235e4:	subeq	sp, fp, #16
   235e8:	popeq	{r4, r5, r6, sl, fp, pc}
   235ec:	movw	r0, #13544	; 0x34e8
   235f0:	movt	r0, #6
   235f4:	ldr	r0, [r0]
   235f8:	bl	124ac <_exit@plt>
   235fc:	movw	r1, #3790	; 0xece
   23600:	mov	r0, #0
   23604:	mov	r2, #5
   23608:	movt	r1, #5
   2360c:	bl	1253c <dcgettext@plt>
   23610:	ldr	r6, [r5, #4]
   23614:	mov	r4, r0
   23618:	bl	127d0 <__errno_location@plt>
   2361c:	ldr	r5, [r0]
   23620:	cmp	r6, #0
   23624:	bne	23640 <__assert_fail@plt+0x10bc4>
   23628:	movw	r2, #9967	; 0x26ef
   2362c:	mov	r0, #0
   23630:	mov	r1, r5
   23634:	mov	r3, r4
   23638:	movt	r2, #5
   2363c:	b	23660 <__assert_fail@plt+0x10be4>
   23640:	mov	r0, r6
   23644:	bl	2f534 <__assert_fail@plt+0x1cab8>
   23648:	movw	r2, #3802	; 0xeda
   2364c:	mov	r3, r0
   23650:	str	r4, [sp]
   23654:	mov	r0, #0
   23658:	mov	r1, r5
   2365c:	movt	r2, #5
   23660:	bl	12674 <error@plt>
   23664:	movw	r0, #13544	; 0x34e8
   23668:	movt	r0, #6
   2366c:	ldr	r0, [r0]
   23670:	bl	124ac <_exit@plt>
   23674:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23678:	add	fp, sp, #24
   2367c:	bl	1268c <opendir@plt>
   23680:	cmp	r0, #0
   23684:	moveq	r5, #0
   23688:	moveq	r0, r5
   2368c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   23690:	mov	r4, r0
   23694:	bl	12974 <dirfd@plt>
   23698:	cmp	r0, #2
   2369c:	movhi	r0, r4
   236a0:	pophi	{r4, r5, r6, r7, r8, sl, fp, pc}
   236a4:	movw	r1, #1030	; 0x406
   236a8:	mov	r2, #3
   236ac:	bl	329f8 <__assert_fail@plt+0x1ff7c>
   236b0:	cmn	r0, #1
   236b4:	ble	236e4 <__assert_fail@plt+0x10c68>
   236b8:	mov	r7, r0
   236bc:	bl	12950 <fdopendir@plt>
   236c0:	mov	r5, r0
   236c4:	bl	127d0 <__errno_location@plt>
   236c8:	ldr	r8, [r0]
   236cc:	mov	r6, r0
   236d0:	cmp	r5, #0
   236d4:	bne	236f4 <__assert_fail@plt+0x10c78>
   236d8:	mov	r0, r7
   236dc:	bl	12a34 <close@plt>
   236e0:	b	236f0 <__assert_fail@plt+0x10c74>
   236e4:	bl	127d0 <__errno_location@plt>
   236e8:	ldr	r8, [r0]
   236ec:	mov	r6, r0
   236f0:	mov	r5, #0
   236f4:	mov	r0, r4
   236f8:	bl	12a4c <closedir@plt>
   236fc:	mov	r0, r5
   23700:	str	r8, [r6]
   23704:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23708:	push	{r4, r5, r6, sl, fp, lr}
   2370c:	add	fp, sp, #16
   23710:	mov	r6, r0
   23714:	bl	4b624 <__assert_fail@plt+0x38ba8>
   23718:	mov	r4, r0
   2371c:	ldrb	r0, [r0]
   23720:	cmp	r0, #0
   23724:	beq	23744 <__assert_fail@plt+0x10cc8>
   23728:	mov	r0, r4
   2372c:	bl	4b684 <__assert_fail@plt+0x38c08>
   23730:	mov	r5, r0
   23734:	ldrb	r0, [r4, r0]
   23738:	cmp	r0, #47	; 0x2f
   2373c:	addeq	r5, r5, #1
   23740:	b	23754 <__assert_fail@plt+0x10cd8>
   23744:	mov	r0, r6
   23748:	bl	4b684 <__assert_fail@plt+0x38c08>
   2374c:	mov	r5, r0
   23750:	mov	r4, r6
   23754:	add	r0, r5, #1
   23758:	bl	30a04 <__assert_fail@plt+0x1df88>
   2375c:	mov	r1, r4
   23760:	mov	r2, r5
   23764:	mov	r6, r0
   23768:	bl	124b8 <memcpy@plt>
   2376c:	mov	r0, #0
   23770:	strb	r0, [r6, r5]
   23774:	mov	r0, r6
   23778:	pop	{r4, r5, r6, sl, fp, pc}
   2377c:	push	{r4, r5, r6, sl, fp, lr}
   23780:	add	fp, sp, #16
   23784:	mov	r5, r0
   23788:	mov	r4, r0
   2378c:	ldrb	r6, [r5], #-1
   23790:	bl	4b624 <__assert_fail@plt+0x38ba8>
   23794:	sub	r2, r0, r4
   23798:	sub	r0, r6, #47	; 0x2f
   2379c:	clz	r0, r0
   237a0:	lsr	r1, r0, #5
   237a4:	mov	r0, r2
   237a8:	cmp	r2, r1
   237ac:	popls	{r4, r5, r6, sl, fp, pc}
   237b0:	ldrb	r3, [r5, r0]
   237b4:	sub	r2, r0, #1
   237b8:	cmp	r3, #47	; 0x2f
   237bc:	beq	237a4 <__assert_fail@plt+0x10d28>
   237c0:	pop	{r4, r5, r6, sl, fp, pc}
   237c4:	push	{r4, r5, r6, sl, fp, lr}
   237c8:	add	fp, sp, #16
   237cc:	mov	r6, r0
   237d0:	mov	r4, r0
   237d4:	ldrb	r5, [r6], #-1
   237d8:	bl	4b624 <__assert_fail@plt+0x38ba8>
   237dc:	sub	r1, r0, r4
   237e0:	sub	r0, r5, #47	; 0x2f
   237e4:	clz	r0, r0
   237e8:	lsr	r0, r0, #5
   237ec:	mov	r5, r1
   237f0:	cmp	r1, r0
   237f4:	bls	23808 <__assert_fail@plt+0x10d8c>
   237f8:	ldrb	r2, [r6, r5]
   237fc:	sub	r1, r5, #1
   23800:	cmp	r2, #47	; 0x2f
   23804:	beq	237ec <__assert_fail@plt+0x10d70>
   23808:	cmp	r5, #0
   2380c:	mov	r0, r5
   23810:	addeq	r0, r0, #1
   23814:	add	r0, r0, #1
   23818:	bl	35608 <__assert_fail@plt+0x22b8c>
   2381c:	mov	r6, r0
   23820:	cmp	r0, #0
   23824:	beq	23850 <__assert_fail@plt+0x10dd4>
   23828:	mov	r0, r6
   2382c:	mov	r1, r4
   23830:	mov	r2, r5
   23834:	bl	124b8 <memcpy@plt>
   23838:	cmp	r5, #0
   2383c:	moveq	r0, #46	; 0x2e
   23840:	moveq	r5, #1
   23844:	strbeq	r0, [r6]
   23848:	mov	r0, #0
   2384c:	strb	r0, [r6, r5]
   23850:	mov	r0, r6
   23854:	pop	{r4, r5, r6, sl, fp, pc}
   23858:	push	{r4, r5, fp, lr}
   2385c:	add	fp, sp, #8
   23860:	mov	r4, r0
   23864:	bl	4b624 <__assert_fail@plt+0x38ba8>
   23868:	mov	r5, r0
   2386c:	ldrb	r0, [r0]
   23870:	cmp	r0, #0
   23874:	moveq	r5, r4
   23878:	mov	r0, r5
   2387c:	bl	4b684 <__assert_fail@plt+0x38c08>
   23880:	ldrb	r1, [r5, r0]
   23884:	mov	r2, #0
   23888:	strb	r2, [r5, r0]
   2388c:	cmp	r1, #0
   23890:	movwne	r1, #1
   23894:	mov	r0, r1
   23898:	pop	{r4, r5, fp, pc}
   2389c:	sub	sp, sp, #8
   238a0:	push	{fp, lr}
   238a4:	mov	fp, sp
   238a8:	sub	sp, sp, #8
   238ac:	str	r2, [fp, #8]
   238b0:	mov	r2, #0
   238b4:	tst	r1, #64	; 0x40
   238b8:	str	r3, [fp, #12]
   238bc:	addne	r2, fp, #8
   238c0:	orrne	r2, r2, #4
   238c4:	strne	r2, [sp, #4]
   238c8:	ldrne	r2, [fp, #8]
   238cc:	bl	126a4 <open64@plt>
   238d0:	bl	302f0 <__assert_fail@plt+0x1d874>
   238d4:	mov	sp, fp
   238d8:	pop	{fp, lr}
   238dc:	add	sp, sp, #8
   238e0:	bx	lr
   238e4:	and	r2, r0, #61440	; 0xf000
   238e8:	sub	r2, r2, #4096	; 0x1000
   238ec:	lsr	r3, r2, #12
   238f0:	cmp	r3, #11
   238f4:	bhi	23944 <__assert_fail@plt+0x10ec8>
   238f8:	add	r2, pc, #4
   238fc:	mov	ip, #45	; 0x2d
   23900:	ldr	pc, [r2, r3, lsl #2]
   23904:	andeq	r3, r2, r4, lsr r9
   23908:	andeq	r3, r2, ip, lsr r9
   2390c:	andeq	r3, r2, r4, asr #18
   23910:	andeq	r3, r2, ip, asr #18
   23914:	andeq	r3, r2, r4, asr #18
   23918:	andeq	r3, r2, r4, ror #18
   2391c:	andeq	r3, r2, r4, asr #18
   23920:	andeq	r3, r2, r8, ror #18
   23924:	andeq	r3, r2, r4, asr #18
   23928:	andeq	r3, r2, r4, asr r9
   2392c:	andeq	r3, r2, r4, asr #18
   23930:	andeq	r3, r2, ip, asr r9
   23934:	mov	ip, #112	; 0x70
   23938:	b	23968 <__assert_fail@plt+0x10eec>
   2393c:	mov	ip, #99	; 0x63
   23940:	b	23968 <__assert_fail@plt+0x10eec>
   23944:	mov	ip, #63	; 0x3f
   23948:	b	23968 <__assert_fail@plt+0x10eec>
   2394c:	mov	ip, #100	; 0x64
   23950:	b	23968 <__assert_fail@plt+0x10eec>
   23954:	mov	ip, #108	; 0x6c
   23958:	b	23968 <__assert_fail@plt+0x10eec>
   2395c:	mov	ip, #115	; 0x73
   23960:	b	23968 <__assert_fail@plt+0x10eec>
   23964:	mov	ip, #98	; 0x62
   23968:	push	{fp, lr}
   2396c:	mov	fp, sp
   23970:	mov	r2, #32
   23974:	tst	r0, #256	; 0x100
   23978:	mov	r3, #114	; 0x72
   2397c:	strb	ip, [r1]
   23980:	mov	ip, #114	; 0x72
   23984:	mov	lr, #45	; 0x2d
   23988:	strh	r2, [r1, #10]
   2398c:	movweq	r3, #45	; 0x2d
   23990:	tst	r0, #128	; 0x80
   23994:	mov	r2, #119	; 0x77
   23998:	movweq	r2, #45	; 0x2d
   2399c:	strb	r3, [r1, #1]
   239a0:	tst	r0, #32
   239a4:	mov	r3, #119	; 0x77
   239a8:	strb	r2, [r1, #2]
   239ac:	mov	r2, #114	; 0x72
   239b0:	movweq	r2, #45	; 0x2d
   239b4:	tst	r0, #16
   239b8:	strb	r2, [r1, #4]
   239bc:	mov	r2, #119	; 0x77
   239c0:	movweq	r2, #45	; 0x2d
   239c4:	tst	r0, #4
   239c8:	movweq	ip, #45	; 0x2d
   239cc:	tst	r0, #2
   239d0:	strb	r2, [r1, #5]
   239d4:	movweq	r3, #45	; 0x2d
   239d8:	strb	ip, [r1, #7]
   239dc:	ands	r2, r0, #64	; 0x40
   239e0:	mov	ip, #45	; 0x2d
   239e4:	strb	r3, [r1, #8]
   239e8:	mov	r3, #83	; 0x53
   239ec:	movwne	lr, #120	; 0x78
   239f0:	mov	r2, #83	; 0x53
   239f4:	movwne	r3, #115	; 0x73
   239f8:	tst	r0, #2048	; 0x800
   239fc:	moveq	r3, lr
   23a00:	strb	r3, [r1, #3]
   23a04:	ands	r3, r0, #8
   23a08:	mov	r3, #45	; 0x2d
   23a0c:	movwne	r2, #115	; 0x73
   23a10:	movwne	r3, #120	; 0x78
   23a14:	tst	r0, #1024	; 0x400
   23a18:	moveq	r2, r3
   23a1c:	strb	r2, [r1, #6]
   23a20:	ands	r2, r0, #1
   23a24:	mov	r2, #84	; 0x54
   23a28:	movwne	ip, #120	; 0x78
   23a2c:	movwne	r2, #116	; 0x74
   23a30:	tst	r0, #512	; 0x200
   23a34:	moveq	r2, ip
   23a38:	strb	r2, [r1, #9]
   23a3c:	pop	{fp, pc}
   23a40:	ldr	r0, [r0, #16]
   23a44:	b	238e4 <__assert_fail@plt+0x10e68>
   23a48:	push	{r4, r5, r6, r7, fp, lr}
   23a4c:	add	fp, sp, #16
   23a50:	mov	r5, r1
   23a54:	bl	1298c <fopen64@plt>
   23a58:	mov	r4, #0
   23a5c:	cmp	r0, #0
   23a60:	beq	23ab0 <__assert_fail@plt+0x11034>
   23a64:	mov	r6, r0
   23a68:	bl	12848 <fileno@plt>
   23a6c:	cmp	r0, #2
   23a70:	movhi	r0, r6
   23a74:	pophi	{r4, r5, r6, r7, fp, pc}
   23a78:	bl	302e4 <__assert_fail@plt+0x1d868>
   23a7c:	cmn	r0, #1
   23a80:	ble	23adc <__assert_fail@plt+0x11060>
   23a84:	mov	r7, r0
   23a88:	mov	r0, r6
   23a8c:	bl	12884 <fclose@plt>
   23a90:	cmp	r0, #0
   23a94:	bne	23ab8 <__assert_fail@plt+0x1103c>
   23a98:	mov	r0, r7
   23a9c:	mov	r1, r5
   23aa0:	bl	12344 <fdopen@plt>
   23aa4:	mov	r4, r0
   23aa8:	cmp	r0, #0
   23aac:	beq	23ab8 <__assert_fail@plt+0x1103c>
   23ab0:	mov	r0, r4
   23ab4:	pop	{r4, r5, r6, r7, fp, pc}
   23ab8:	bl	127d0 <__errno_location@plt>
   23abc:	ldr	r5, [r0]
   23ac0:	mov	r4, r0
   23ac4:	mov	r0, r7
   23ac8:	bl	12a34 <close@plt>
   23acc:	str	r5, [r4]
   23ad0:	mov	r4, #0
   23ad4:	mov	r0, r4
   23ad8:	pop	{r4, r5, r6, r7, fp, pc}
   23adc:	bl	127d0 <__errno_location@plt>
   23ae0:	ldr	r7, [r0]
   23ae4:	mov	r5, r0
   23ae8:	mov	r0, r6
   23aec:	bl	12884 <fclose@plt>
   23af0:	mov	r0, r4
   23af4:	str	r7, [r5]
   23af8:	pop	{r4, r5, r6, r7, fp, pc}
   23afc:	andeq	r0, r0, r0
   23b00:	ldr	r0, [r0, #8]
   23b04:	bx	lr
   23b08:	ldr	r0, [r0, #12]
   23b0c:	bx	lr
   23b10:	ldr	r0, [r0, #16]
   23b14:	bx	lr
   23b18:	ldm	r0, {r2, ip}
   23b1c:	mov	r0, #0
   23b20:	cmp	r2, ip
   23b24:	bxcs	lr
   23b28:	mov	r0, #0
   23b2c:	ldr	r1, [r2]
   23b30:	cmp	r1, #0
   23b34:	beq	23b58 <__assert_fail@plt+0x110dc>
   23b38:	mov	r3, #0
   23b3c:	mov	r1, r2
   23b40:	ldr	r1, [r1, #4]
   23b44:	add	r3, r3, #1
   23b48:	cmp	r1, #0
   23b4c:	bne	23b40 <__assert_fail@plt+0x110c4>
   23b50:	cmp	r3, r0
   23b54:	movhi	r0, r3
   23b58:	add	r2, r2, #8
   23b5c:	cmp	r2, ip
   23b60:	bcc	23b2c <__assert_fail@plt+0x110b0>
   23b64:	bx	lr
   23b68:	push	{fp, lr}
   23b6c:	mov	fp, sp
   23b70:	ldm	r0, {r3, ip}
   23b74:	mov	lr, #0
   23b78:	mov	r1, #0
   23b7c:	cmp	r3, ip
   23b80:	bcs	23bbc <__assert_fail@plt+0x11140>
   23b84:	mov	r1, #0
   23b88:	mov	lr, #0
   23b8c:	ldr	r2, [r3]
   23b90:	cmp	r2, #0
   23b94:	beq	23bb0 <__assert_fail@plt+0x11134>
   23b98:	mov	r2, r3
   23b9c:	ldr	r2, [r2, #4]
   23ba0:	add	r1, r1, #1
   23ba4:	cmp	r2, #0
   23ba8:	bne	23b9c <__assert_fail@plt+0x11120>
   23bac:	add	lr, lr, #1
   23bb0:	add	r3, r3, #8
   23bb4:	cmp	r3, ip
   23bb8:	bcc	23b8c <__assert_fail@plt+0x11110>
   23bbc:	ldr	r2, [r0, #12]
   23bc0:	cmp	lr, r2
   23bc4:	bne	23bdc <__assert_fail@plt+0x11160>
   23bc8:	ldr	r2, [r0, #16]
   23bcc:	mov	r0, #1
   23bd0:	cmp	r1, r2
   23bd4:	movne	r0, #0
   23bd8:	pop	{fp, pc}
   23bdc:	mov	r0, #0
   23be0:	pop	{fp, pc}
   23be4:	nop	{0}
   23be8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23bec:	add	fp, sp, #24
   23bf0:	sub	sp, sp, #8
   23bf4:	ldr	r6, [r0]
   23bf8:	ldmib	r0, {r3, r7, r8}
   23bfc:	ldr	r2, [r0, #16]
   23c00:	mov	r4, r1
   23c04:	mov	r5, #0
   23c08:	cmp	r6, r3
   23c0c:	bcs	23c4c <__assert_fail@plt+0x111d0>
   23c10:	mov	r5, #0
   23c14:	ldr	r0, [r6]
   23c18:	cmp	r0, #0
   23c1c:	beq	23c40 <__assert_fail@plt+0x111c4>
   23c20:	mov	r0, #0
   23c24:	mov	r1, r6
   23c28:	ldr	r1, [r1, #4]
   23c2c:	add	r0, r0, #1
   23c30:	cmp	r1, #0
   23c34:	bne	23c28 <__assert_fail@plt+0x111ac>
   23c38:	cmp	r0, r5
   23c3c:	movhi	r5, r0
   23c40:	add	r6, r6, #8
   23c44:	cmp	r6, r3
   23c48:	bcc	23c14 <__assert_fail@plt+0x11198>
   23c4c:	movw	r1, #3809	; 0xee1
   23c50:	mov	r0, r4
   23c54:	movt	r1, #5
   23c58:	bl	127c4 <fprintf@plt>
   23c5c:	movw	r1, #3833	; 0xef9
   23c60:	mov	r0, r4
   23c64:	mov	r2, r7
   23c68:	movt	r1, #5
   23c6c:	bl	127c4 <fprintf@plt>
   23c70:	vldr	d16, [pc, #72]	; 23cc0 <__assert_fail@plt+0x11244>
   23c74:	vmov	s0, r8
   23c78:	movw	r1, #3857	; 0xf11
   23c7c:	mov	r0, r4
   23c80:	mov	r2, r8
   23c84:	vcvt.f64.u32	d17, s0
   23c88:	vmov	s0, r7
   23c8c:	movt	r1, #5
   23c90:	vcvt.f64.u32	d18, s0
   23c94:	vmul.f64	d16, d17, d16
   23c98:	vdiv.f64	d16, d16, d18
   23c9c:	vstr	d16, [sp]
   23ca0:	bl	127c4 <fprintf@plt>
   23ca4:	movw	r1, #3890	; 0xf32
   23ca8:	mov	r0, r4
   23cac:	mov	r2, r5
   23cb0:	movt	r1, #5
   23cb4:	sub	sp, fp, #24
   23cb8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   23cbc:	b	127c4 <fprintf@plt>
   23cc0:	andeq	r0, r0, r0
   23cc4:	subsmi	r0, r9, r0
   23cc8:	push	{r4, r5, r6, r7, fp, lr}
   23ccc:	add	fp, sp, #16
   23cd0:	mov	r4, r1
   23cd4:	ldr	r1, [r0, #8]
   23cd8:	ldr	r2, [r0, #24]
   23cdc:	mov	r5, r0
   23ce0:	mov	r0, r4
   23ce4:	blx	r2
   23ce8:	ldr	r1, [r5, #8]
   23cec:	cmp	r0, r1
   23cf0:	bcs	23d5c <__assert_fail@plt+0x112e0>
   23cf4:	ldr	r7, [r5]
   23cf8:	mov	r6, #0
   23cfc:	ldr	r1, [r7, r0, lsl #3]!
   23d00:	cmp	r1, #0
   23d04:	cmpne	r7, #0
   23d08:	bne	23d18 <__assert_fail@plt+0x1129c>
   23d0c:	mov	r0, r6
   23d10:	pop	{r4, r5, r6, r7, fp, pc}
   23d14:	ldr	r1, [r7]
   23d18:	cmp	r1, r4
   23d1c:	beq	23d44 <__assert_fail@plt+0x112c8>
   23d20:	ldr	r2, [r5, #28]
   23d24:	mov	r0, r4
   23d28:	blx	r2
   23d2c:	cmp	r0, #0
   23d30:	bne	23d50 <__assert_fail@plt+0x112d4>
   23d34:	ldr	r7, [r7, #4]
   23d38:	cmp	r7, #0
   23d3c:	bne	23d14 <__assert_fail@plt+0x11298>
   23d40:	b	23d0c <__assert_fail@plt+0x11290>
   23d44:	mov	r6, r4
   23d48:	mov	r0, r6
   23d4c:	pop	{r4, r5, r6, r7, fp, pc}
   23d50:	ldr	r6, [r7]
   23d54:	mov	r0, r6
   23d58:	pop	{r4, r5, r6, r7, fp, pc}
   23d5c:	bl	12a28 <abort@plt>
   23d60:	ldr	r1, [r0, #16]
   23d64:	cmp	r1, #0
   23d68:	moveq	r0, #0
   23d6c:	bxeq	lr
   23d70:	ldm	r0, {r1, r2}
   23d74:	cmp	r1, r2
   23d78:	bcs	23d90 <__assert_fail@plt+0x11314>
   23d7c:	ldr	r0, [r1], #8
   23d80:	cmp	r0, #0
   23d84:	bxne	lr
   23d88:	cmp	r1, r2
   23d8c:	bcc	23d7c <__assert_fail@plt+0x11300>
   23d90:	push	{fp, lr}
   23d94:	mov	fp, sp
   23d98:	bl	12a28 <abort@plt>
   23d9c:	push	{r4, r5, fp, lr}
   23da0:	add	fp, sp, #8
   23da4:	mov	r5, r1
   23da8:	ldr	r1, [r0, #8]
   23dac:	ldr	r2, [r0, #24]
   23db0:	mov	r4, r0
   23db4:	mov	r0, r5
   23db8:	blx	r2
   23dbc:	ldr	r1, [r4, #8]
   23dc0:	cmp	r0, r1
   23dc4:	bcs	23e20 <__assert_fail@plt+0x113a4>
   23dc8:	ldr	r1, [r4]
   23dcc:	add	r2, r1, r0, lsl #3
   23dd0:	ldr	r3, [r2]
   23dd4:	ldr	r2, [r2, #4]
   23dd8:	cmp	r3, r5
   23ddc:	beq	23dec <__assert_fail@plt+0x11370>
   23de0:	cmp	r2, #0
   23de4:	bne	23dd0 <__assert_fail@plt+0x11354>
   23de8:	b	23df8 <__assert_fail@plt+0x1137c>
   23dec:	cmp	r2, #0
   23df0:	ldrne	r0, [r2]
   23df4:	popne	{r4, r5, fp, pc}
   23df8:	ldr	r2, [r4, #4]
   23dfc:	add	r0, r1, r0, lsl #3
   23e00:	add	r1, r0, #8
   23e04:	cmp	r1, r2
   23e08:	movcs	r0, #0
   23e0c:	popcs	{r4, r5, fp, pc}
   23e10:	ldr	r0, [r1], #8
   23e14:	cmp	r0, #0
   23e18:	popne	{r4, r5, fp, pc}
   23e1c:	b	23e04 <__assert_fail@plt+0x11388>
   23e20:	bl	12a28 <abort@plt>
   23e24:	push	{r4, r5, fp, lr}
   23e28:	add	fp, sp, #8
   23e2c:	ldm	r0, {r5, lr}
   23e30:	mov	ip, r0
   23e34:	mov	r0, #0
   23e38:	cmp	r5, lr
   23e3c:	bcs	23e98 <__assert_fail@plt+0x1141c>
   23e40:	mov	r0, #0
   23e44:	ldr	r3, [r5]
   23e48:	cmp	r3, #0
   23e4c:	cmpne	r5, #0
   23e50:	bne	23e64 <__assert_fail@plt+0x113e8>
   23e54:	add	r5, r5, #8
   23e58:	cmp	r5, lr
   23e5c:	bcc	23e44 <__assert_fail@plt+0x113c8>
   23e60:	b	23e98 <__assert_fail@plt+0x1141c>
   23e64:	mov	r3, r5
   23e68:	cmp	r0, r2
   23e6c:	popcs	{r4, r5, fp, pc}
   23e70:	ldr	r4, [r3]
   23e74:	str	r4, [r1, r0, lsl #2]
   23e78:	add	r0, r0, #1
   23e7c:	ldr	r3, [r3, #4]
   23e80:	cmp	r3, #0
   23e84:	bne	23e68 <__assert_fail@plt+0x113ec>
   23e88:	ldr	lr, [ip, #4]
   23e8c:	add	r5, r5, #8
   23e90:	cmp	r5, lr
   23e94:	bcc	23e44 <__assert_fail@plt+0x113c8>
   23e98:	pop	{r4, r5, fp, pc}
   23e9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23ea0:	add	fp, sp, #24
   23ea4:	mov	r5, r1
   23ea8:	ldr	r4, [r0]
   23eac:	ldr	r1, [r0, #4]
   23eb0:	mov	r6, #0
   23eb4:	cmp	r4, r1
   23eb8:	bcs	23f34 <__assert_fail@plt+0x114b8>
   23ebc:	mov	r9, r2
   23ec0:	mov	r8, r0
   23ec4:	mov	r6, #0
   23ec8:	ldr	r0, [r4]
   23ecc:	cmp	r0, #0
   23ed0:	cmpne	r4, #0
   23ed4:	bne	23ee8 <__assert_fail@plt+0x1146c>
   23ed8:	add	r4, r4, #8
   23edc:	cmp	r4, r1
   23ee0:	bcc	23ec8 <__assert_fail@plt+0x1144c>
   23ee4:	b	23f34 <__assert_fail@plt+0x114b8>
   23ee8:	mov	r1, r9
   23eec:	blx	r5
   23ef0:	cmp	r0, #0
   23ef4:	beq	23f34 <__assert_fail@plt+0x114b8>
   23ef8:	mov	r7, r4
   23efc:	ldr	r7, [r7, #4]
   23f00:	add	r6, r6, #1
   23f04:	cmp	r7, #0
   23f08:	beq	23f24 <__assert_fail@plt+0x114a8>
   23f0c:	ldr	r0, [r7]
   23f10:	mov	r1, r9
   23f14:	blx	r5
   23f18:	cmp	r0, #0
   23f1c:	bne	23efc <__assert_fail@plt+0x11480>
   23f20:	b	23f34 <__assert_fail@plt+0x114b8>
   23f24:	ldr	r1, [r8, #4]
   23f28:	add	r4, r4, #8
   23f2c:	cmp	r4, r1
   23f30:	bcc	23ec8 <__assert_fail@plt+0x1144c>
   23f34:	mov	r0, r6
   23f38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23f3c:	ldrb	r2, [r0]
   23f40:	cmp	r2, #0
   23f44:	moveq	r0, #0
   23f48:	bxeq	lr
   23f4c:	add	r3, r0, #1
   23f50:	mov	r0, #0
   23f54:	rsb	r0, r0, r0, lsl #5
   23f58:	uxtab	r0, r0, r2
   23f5c:	udiv	r2, r0, r1
   23f60:	mls	r0, r2, r1, r0
   23f64:	ldrb	r2, [r3], #1
   23f68:	cmp	r2, #0
   23f6c:	bne	23f54 <__assert_fail@plt+0x114d8>
   23f70:	bx	lr
   23f74:	movw	r1, #3920	; 0xf50
   23f78:	movt	r1, #5
   23f7c:	vld1.32	{d16-d17}, [r1]!
   23f80:	ldr	r1, [r1]
   23f84:	vst1.32	{d16-d17}, [r0]!
   23f88:	str	r1, [r0]
   23f8c:	bx	lr
   23f90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23f94:	add	fp, sp, #24
   23f98:	movw	r9, #16860	; 0x41dc
   23f9c:	movw	r5, #16840	; 0x41c8
   23fa0:	cmp	r3, #0
   23fa4:	mov	r6, r0
   23fa8:	mov	r0, #40	; 0x28
   23fac:	mov	r7, r1
   23fb0:	movt	r9, #2
   23fb4:	movt	r5, #2
   23fb8:	movne	r9, r3
   23fbc:	cmp	r2, #0
   23fc0:	movne	r5, r2
   23fc4:	bl	35608 <__assert_fail@plt+0x22b8c>
   23fc8:	mov	r8, #0
   23fcc:	cmp	r0, #0
   23fd0:	beq	241b0 <__assert_fail@plt+0x11734>
   23fd4:	mov	r4, r0
   23fd8:	cmp	r7, #0
   23fdc:	beq	2408c <__assert_fail@plt+0x11610>
   23fe0:	movw	r0, #3920	; 0xf50
   23fe4:	str	r7, [r4, #20]
   23fe8:	movt	r0, #5
   23fec:	cmp	r7, r0
   23ff0:	beq	24098 <__assert_fail@plt+0x1161c>
   23ff4:	vldr	s2, [pc, #444]	; 241b8 <__assert_fail@plt+0x1173c>
   23ff8:	vldr	s0, [r7, #8]
   23ffc:	vcmpe.f32	s0, s2
   24000:	vmrs	APSR_nzcv, fpscr
   24004:	ble	24070 <__assert_fail@plt+0x115f4>
   24008:	vldr	s4, [pc, #428]	; 241bc <__assert_fail@plt+0x11740>
   2400c:	vcmpe.f32	s0, s4
   24010:	vmrs	APSR_nzcv, fpscr
   24014:	bpl	24070 <__assert_fail@plt+0x115f4>
   24018:	vldr	s4, [pc, #416]	; 241c0 <__assert_fail@plt+0x11744>
   2401c:	vldr	s6, [r7, #12]
   24020:	vcmpe.f32	s6, s4
   24024:	vmrs	APSR_nzcv, fpscr
   24028:	ble	24070 <__assert_fail@plt+0x115f4>
   2402c:	vldr	s4, [r7]
   24030:	vcmpe.f32	s4, #0.0
   24034:	vmrs	APSR_nzcv, fpscr
   24038:	blt	24070 <__assert_fail@plt+0x115f4>
   2403c:	vadd.f32	s2, s4, s2
   24040:	vcmpe.f32	s2, s0
   24044:	vmrs	APSR_nzcv, fpscr
   24048:	bpl	24070 <__assert_fail@plt+0x115f4>
   2404c:	vldr	s0, [r7, #4]
   24050:	vmov.f32	s4, #112	; 0x3f800000  1.0
   24054:	vcmpe.f32	s0, s4
   24058:	vmrs	APSR_nzcv, fpscr
   2405c:	bhi	24070 <__assert_fail@plt+0x115f4>
   24060:	vcmpe.f32	s2, s0
   24064:	mov	r0, r7
   24068:	vmrs	APSR_nzcv, fpscr
   2406c:	bmi	24098 <__assert_fail@plt+0x1161c>
   24070:	movw	r0, #3920	; 0xf50
   24074:	movt	r0, #5
   24078:	str	r0, [r4, #20]
   2407c:	mov	r0, r4
   24080:	bl	32c40 <__assert_fail@plt+0x201c4>
   24084:	mov	r0, r8
   24088:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2408c:	movw	r0, #3920	; 0xf50
   24090:	movt	r0, #5
   24094:	str	r0, [r4, #20]
   24098:	ldrb	r1, [r0, #16]
   2409c:	cmp	r1, #0
   240a0:	bne	240cc <__assert_fail@plt+0x11650>
   240a4:	vldr	s0, [r0, #8]
   240a8:	vldr	s4, [pc, #276]	; 241c4 <__assert_fail@plt+0x11748>
   240ac:	vmov	s2, r6
   240b0:	vcvt.f32.u32	s2, s2
   240b4:	vdiv.f32	s2, s2, s0
   240b8:	vcmpe.f32	s2, s4
   240bc:	vcvt.u32.f32	s0, s2
   240c0:	vmrs	APSR_nzcv, fpscr
   240c4:	bge	2414c <__assert_fail@plt+0x116d0>
   240c8:	vmov	r6, s0
   240cc:	cmp	r6, #10
   240d0:	movls	r6, #10
   240d4:	orr	r0, r6, #1
   240d8:	cmn	r0, #1
   240dc:	beq	2414c <__assert_fail@plt+0x116d0>
   240e0:	ldr	r6, [fp, #8]
   240e4:	mov	r1, #3
   240e8:	cmp	r0, #10
   240ec:	bcc	24124 <__assert_fail@plt+0x116a8>
   240f0:	mov	r1, #3
   240f4:	mov	r3, #9
   240f8:	mov	r2, #12
   240fc:	udiv	r7, r0, r1
   24100:	mls	r7, r7, r1, r0
   24104:	cmp	r7, #0
   24108:	beq	24124 <__assert_fail@plt+0x116a8>
   2410c:	add	r3, r3, r2
   24110:	add	r2, r2, #8
   24114:	add	r1, r1, #2
   24118:	add	r3, r3, #4
   2411c:	cmp	r3, r0
   24120:	bcc	240fc <__assert_fail@plt+0x11680>
   24124:	udiv	r2, r0, r1
   24128:	mls	r1, r2, r1, r0
   2412c:	cmp	r1, #0
   24130:	bne	24144 <__assert_fail@plt+0x116c8>
   24134:	add	r0, r0, #2
   24138:	cmn	r0, #1
   2413c:	bne	240e4 <__assert_fail@plt+0x11668>
   24140:	b	2414c <__assert_fail@plt+0x116d0>
   24144:	cmp	r0, #536870912	; 0x20000000
   24148:	bcc	24164 <__assert_fail@plt+0x116e8>
   2414c:	mov	r0, #0
   24150:	str	r0, [r4, #8]
   24154:	mov	r0, r4
   24158:	bl	32c40 <__assert_fail@plt+0x201c4>
   2415c:	mov	r0, r8
   24160:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24164:	cmp	r0, #0
   24168:	str	r0, [r4, #8]
   2416c:	beq	24154 <__assert_fail@plt+0x116d8>
   24170:	mov	r1, #8
   24174:	bl	325e0 <__assert_fail@plt+0x1fb64>
   24178:	cmp	r0, #0
   2417c:	str	r0, [r4]
   24180:	beq	24154 <__assert_fail@plt+0x116d8>
   24184:	mov	r1, #0
   24188:	mov	r8, r4
   2418c:	str	r1, [r4, #12]
   24190:	str	r1, [r4, #16]
   24194:	str	r5, [r4, #24]
   24198:	str	r9, [r4, #28]
   2419c:	str	r6, [r4, #32]
   241a0:	str	r1, [r4, #36]	; 0x24
   241a4:	ldr	r1, [r4, #8]
   241a8:	add	r0, r0, r1, lsl #3
   241ac:	str	r0, [r4, #4]
   241b0:	mov	r0, r8
   241b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   241b8:	stclcc	12, cr12, [ip, #820]	; 0x334
   241bc:	svccc	0x00666666
   241c0:	svccc	0x008ccccd
   241c4:	svcmi	0x00800000
   241c8:	ror	r2, r0, #3
   241cc:	udiv	r2, r2, r1
   241d0:	mul	r1, r2, r1
   241d4:	rsb	r0, r1, r0, ror #3
   241d8:	bx	lr
   241dc:	sub	r0, r0, r1
   241e0:	clz	r0, r0
   241e4:	lsr	r0, r0, #5
   241e8:	bx	lr
   241ec:	push	{r4, r5, r6, r7, fp, lr}
   241f0:	add	fp, sp, #16
   241f4:	mov	r4, r0
   241f8:	ldr	r5, [r0]
   241fc:	ldr	r0, [r0, #4]
   24200:	cmp	r5, r0
   24204:	bcs	2429c <__assert_fail@plt+0x11820>
   24208:	mov	r6, #0
   2420c:	ldr	r1, [r5]
   24210:	cmp	r1, #0
   24214:	beq	24290 <__assert_fail@plt+0x11814>
   24218:	ldr	r1, [r4, #32]
   2421c:	ldr	r7, [r5, #4]
   24220:	cmp	r1, #0
   24224:	mov	r0, r1
   24228:	movwne	r0, #1
   2422c:	cmp	r7, #0
   24230:	beq	24274 <__assert_fail@plt+0x117f8>
   24234:	tst	r0, #1
   24238:	beq	24248 <__assert_fail@plt+0x117cc>
   2423c:	ldr	r0, [r7]
   24240:	blx	r1
   24244:	ldr	r1, [r4, #32]
   24248:	str	r6, [r7]
   2424c:	cmp	r1, #0
   24250:	ldr	r0, [r4, #36]	; 0x24
   24254:	ldr	r2, [r7, #4]
   24258:	str	r0, [r7, #4]
   2425c:	mov	r0, r1
   24260:	str	r7, [r4, #36]	; 0x24
   24264:	mov	r7, r2
   24268:	movwne	r0, #1
   2426c:	cmp	r2, #0
   24270:	bne	24234 <__assert_fail@plt+0x117b8>
   24274:	cmp	r0, #0
   24278:	beq	24284 <__assert_fail@plt+0x11808>
   2427c:	ldr	r0, [r5]
   24280:	blx	r1
   24284:	str	r6, [r5]
   24288:	str	r6, [r5, #4]
   2428c:	ldr	r0, [r4, #4]
   24290:	add	r5, r5, #8
   24294:	cmp	r5, r0
   24298:	bcc	2420c <__assert_fail@plt+0x11790>
   2429c:	mov	r0, #0
   242a0:	str	r0, [r4, #12]
   242a4:	str	r0, [r4, #16]
   242a8:	pop	{r4, r5, r6, r7, fp, pc}
   242ac:	push	{r4, r5, r6, sl, fp, lr}
   242b0:	add	fp, sp, #16
   242b4:	mov	r4, r0
   242b8:	ldr	r0, [r0, #32]
   242bc:	cmp	r0, #0
   242c0:	ldrne	r0, [r4, #16]
   242c4:	cmpne	r0, #0
   242c8:	beq	24330 <__assert_fail@plt+0x118b4>
   242cc:	ldr	r5, [r4]
   242d0:	ldr	r1, [r4, #4]
   242d4:	cmp	r5, r1
   242d8:	bcc	242ec <__assert_fail@plt+0x11870>
   242dc:	b	24330 <__assert_fail@plt+0x118b4>
   242e0:	add	r5, r5, #8
   242e4:	cmp	r5, r1
   242e8:	bcs	24330 <__assert_fail@plt+0x118b4>
   242ec:	ldr	r0, [r5]
   242f0:	cmp	r0, #0
   242f4:	cmpne	r5, #0
   242f8:	beq	242e0 <__assert_fail@plt+0x11864>
   242fc:	ldr	r1, [r4, #32]
   24300:	blx	r1
   24304:	ldr	r6, [r5, #4]
   24308:	cmp	r6, #0
   2430c:	beq	24328 <__assert_fail@plt+0x118ac>
   24310:	ldr	r1, [r4, #32]
   24314:	ldr	r0, [r6]
   24318:	blx	r1
   2431c:	ldr	r6, [r6, #4]
   24320:	cmp	r6, #0
   24324:	bne	24310 <__assert_fail@plt+0x11894>
   24328:	ldr	r1, [r4, #4]
   2432c:	b	242e0 <__assert_fail@plt+0x11864>
   24330:	ldr	r5, [r4]
   24334:	ldr	r1, [r4, #4]
   24338:	cmp	r5, r1
   2433c:	bcc	24350 <__assert_fail@plt+0x118d4>
   24340:	b	24378 <__assert_fail@plt+0x118fc>
   24344:	add	r5, r5, #8
   24348:	cmp	r5, r1
   2434c:	bcs	24378 <__assert_fail@plt+0x118fc>
   24350:	ldr	r0, [r5, #4]
   24354:	cmp	r0, #0
   24358:	beq	24344 <__assert_fail@plt+0x118c8>
   2435c:	ldr	r6, [r0, #4]
   24360:	bl	32c40 <__assert_fail@plt+0x201c4>
   24364:	cmp	r6, #0
   24368:	mov	r0, r6
   2436c:	bne	2435c <__assert_fail@plt+0x118e0>
   24370:	ldr	r1, [r4, #4]
   24374:	b	24344 <__assert_fail@plt+0x118c8>
   24378:	ldr	r0, [r4, #36]	; 0x24
   2437c:	cmp	r0, #0
   24380:	beq	24398 <__assert_fail@plt+0x1191c>
   24384:	ldr	r5, [r0, #4]
   24388:	bl	32c40 <__assert_fail@plt+0x201c4>
   2438c:	cmp	r5, #0
   24390:	mov	r0, r5
   24394:	bne	24384 <__assert_fail@plt+0x11908>
   24398:	ldr	r0, [r4]
   2439c:	bl	32c40 <__assert_fail@plt+0x201c4>
   243a0:	mov	r0, r4
   243a4:	pop	{r4, r5, r6, sl, fp, lr}
   243a8:	b	32c40 <__assert_fail@plt+0x201c4>
   243ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243b0:	add	fp, sp, #28
   243b4:	sub	sp, sp, #44	; 0x2c
   243b8:	mov	r7, r0
   243bc:	mov	r4, r0
   243c0:	ldr	r0, [r7, #20]!
   243c4:	ldrb	r2, [r0, #16]
   243c8:	cmp	r2, #0
   243cc:	bne	243fc <__assert_fail@plt+0x11980>
   243d0:	vldr	s0, [r0, #8]
   243d4:	vldr	s4, [pc, #576]	; 2461c <__assert_fail@plt+0x11ba0>
   243d8:	vmov	s2, r1
   243dc:	mov	r5, #0
   243e0:	vcvt.f32.u32	s2, s2
   243e4:	vdiv.f32	s2, s2, s0
   243e8:	vcmpe.f32	s2, s4
   243ec:	vcvt.u32.f32	s0, s2
   243f0:	vmrs	APSR_nzcv, fpscr
   243f4:	bge	24520 <__assert_fail@plt+0x11aa4>
   243f8:	vmov	r1, s0
   243fc:	cmp	r1, #10
   24400:	mov	r5, #0
   24404:	movls	r1, #10
   24408:	orr	r6, r1, #1
   2440c:	cmn	r6, #1
   24410:	bne	24424 <__assert_fail@plt+0x119a8>
   24414:	b	24520 <__assert_fail@plt+0x11aa4>
   24418:	add	r6, r6, #2
   2441c:	cmn	r6, #1
   24420:	beq	24520 <__assert_fail@plt+0x11aa4>
   24424:	mov	r0, #3
   24428:	cmp	r6, #10
   2442c:	bcc	24464 <__assert_fail@plt+0x119e8>
   24430:	mov	r0, #3
   24434:	mov	r2, #9
   24438:	mov	r1, #12
   2443c:	udiv	r3, r6, r0
   24440:	mls	r3, r3, r0, r6
   24444:	cmp	r3, #0
   24448:	beq	24464 <__assert_fail@plt+0x119e8>
   2444c:	add	r2, r2, r1
   24450:	add	r1, r1, #8
   24454:	add	r0, r0, #2
   24458:	add	r2, r2, #4
   2445c:	cmp	r2, r6
   24460:	bcc	2443c <__assert_fail@plt+0x119c0>
   24464:	udiv	r1, r6, r0
   24468:	mls	r0, r1, r0, r6
   2446c:	cmp	r0, #0
   24470:	beq	24418 <__assert_fail@plt+0x1199c>
   24474:	sub	r0, r6, #1
   24478:	cmn	r0, #-536870910	; 0xe0000002
   2447c:	bhi	24520 <__assert_fail@plt+0x11aa4>
   24480:	ldr	r0, [r4, #8]
   24484:	cmp	r6, r0
   24488:	bne	2449c <__assert_fail@plt+0x11a20>
   2448c:	mov	r5, #1
   24490:	mov	r0, r5
   24494:	sub	sp, fp, #28
   24498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2449c:	mov	r0, r6
   244a0:	mov	r1, #8
   244a4:	bl	325e0 <__assert_fail@plt+0x1fb64>
   244a8:	cmp	r0, #0
   244ac:	str	r0, [sp, #4]
   244b0:	beq	24520 <__assert_fail@plt+0x11aa4>
   244b4:	mov	r1, #0
   244b8:	add	r0, r0, r6, lsl #3
   244bc:	str	r6, [sp, #12]
   244c0:	add	r5, sp, #4
   244c4:	mov	sl, r4
   244c8:	mov	r2, #0
   244cc:	str	r1, [sp, #16]
   244d0:	str	r1, [sp, #20]
   244d4:	str	r0, [sp, #8]
   244d8:	add	r0, r5, #20
   244dc:	mov	r1, r4
   244e0:	vld1.32	{d16-d17}, [r7]
   244e4:	vst1.32	{d16-d17}, [r0]
   244e8:	ldr	r0, [sl, #36]!	; 0x24
   244ec:	str	r0, [sp, #40]	; 0x28
   244f0:	mov	r0, r5
   244f4:	bl	24620 <__assert_fail@plt+0x11ba4>
   244f8:	cmp	r0, #0
   244fc:	beq	2452c <__assert_fail@plt+0x11ab0>
   24500:	ldr	r0, [r4]
   24504:	bl	32c40 <__assert_fail@plt+0x201c4>
   24508:	mov	r0, #36	; 0x24
   2450c:	vld1.32	{d16-d17}, [r5], r0
   24510:	vst1.32	{d16-d17}, [r4], r0
   24514:	ldr	r0, [r5]
   24518:	mov	r5, #1
   2451c:	str	r0, [r4]
   24520:	mov	r0, r5
   24524:	sub	sp, fp, #28
   24528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2452c:	ldr	r0, [sp, #40]	; 0x28
   24530:	str	r0, [sl]
   24534:	ldr	r0, [sp, #8]
   24538:	ldr	r8, [sp, #4]
   2453c:	cmp	r8, r0
   24540:	str	r0, [sp]
   24544:	bcs	245e8 <__assert_fail@plt+0x11b6c>
   24548:	mov	r9, #0
   2454c:	ldr	r0, [r8]
   24550:	cmp	r0, #0
   24554:	beq	245d8 <__assert_fail@plt+0x11b5c>
   24558:	ldr	r6, [r8, #4]
   2455c:	cmp	r6, #0
   24560:	beq	245d4 <__assert_fail@plt+0x11b58>
   24564:	ldr	r1, [r4, #8]
   24568:	ldr	r5, [r6]
   2456c:	ldr	r2, [r4, #24]
   24570:	mov	r0, r5
   24574:	blx	r2
   24578:	ldr	r1, [r4, #8]
   2457c:	cmp	r0, r1
   24580:	bcs	24618 <__assert_fail@plt+0x11b9c>
   24584:	ldr	r3, [r4]
   24588:	ldr	r2, [r6, #4]
   2458c:	ldr	r7, [r3, r0, lsl #3]
   24590:	cmp	r7, #0
   24594:	beq	245a4 <__assert_fail@plt+0x11b28>
   24598:	add	r0, r3, r0, lsl #3
   2459c:	add	r0, r0, #4
   245a0:	b	245bc <__assert_fail@plt+0x11b40>
   245a4:	str	r5, [r3, r0, lsl #3]
   245a8:	ldr	r0, [r4, #12]
   245ac:	add	r0, r0, #1
   245b0:	str	r0, [r4, #12]
   245b4:	mov	r0, sl
   245b8:	str	r9, [r6]
   245bc:	ldr	r3, [r0]
   245c0:	cmp	r2, #0
   245c4:	str	r3, [r6, #4]
   245c8:	str	r6, [r0]
   245cc:	mov	r6, r2
   245d0:	bne	24568 <__assert_fail@plt+0x11aec>
   245d4:	str	r9, [r8, #4]
   245d8:	ldr	r0, [sp]
   245dc:	add	r8, r8, #8
   245e0:	cmp	r8, r0
   245e4:	bcc	2454c <__assert_fail@plt+0x11ad0>
   245e8:	add	r1, sp, #4
   245ec:	mov	r0, r4
   245f0:	mov	r2, #0
   245f4:	mov	r5, #0
   245f8:	bl	24620 <__assert_fail@plt+0x11ba4>
   245fc:	cmp	r0, #0
   24600:	beq	24618 <__assert_fail@plt+0x11b9c>
   24604:	ldr	r0, [sp, #4]
   24608:	bl	32c40 <__assert_fail@plt+0x201c4>
   2460c:	mov	r0, r5
   24610:	sub	sp, fp, #28
   24614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24618:	bl	12a28 <abort@plt>
   2461c:	svcmi	0x00800000
   24620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24624:	add	fp, sp, #28
   24628:	sub	sp, sp, #4
   2462c:	ldr	r8, [r1]
   24630:	ldr	r3, [r1, #4]
   24634:	mov	r6, r0
   24638:	mov	r0, #1
   2463c:	str	r1, [sp]
   24640:	cmp	r8, r3
   24644:	bcs	24844 <__assert_fail@plt+0x11dc8>
   24648:	add	r9, r6, #36	; 0x24
   2464c:	cmp	r2, #0
   24650:	beq	246fc <__assert_fail@plt+0x11c80>
   24654:	mov	sl, #0
   24658:	ldr	r1, [r8]
   2465c:	cmp	r1, #0
   24660:	beq	246ec <__assert_fail@plt+0x11c70>
   24664:	ldr	r7, [r8, #4]
   24668:	cmp	r7, #0
   2466c:	beq	246e8 <__assert_fail@plt+0x11c6c>
   24670:	ldr	r1, [r6, #8]
   24674:	ldr	r4, [r7]
   24678:	ldr	r2, [r6, #24]
   2467c:	mov	r0, r4
   24680:	blx	r2
   24684:	ldr	r1, [r6, #8]
   24688:	cmp	r0, r1
   2468c:	bcs	24858 <__assert_fail@plt+0x11ddc>
   24690:	ldr	r3, [r6]
   24694:	ldr	r2, [r7, #4]
   24698:	ldr	r5, [r3, r0, lsl #3]
   2469c:	cmp	r5, #0
   246a0:	beq	246b0 <__assert_fail@plt+0x11c34>
   246a4:	add	r0, r3, r0, lsl #3
   246a8:	add	r0, r0, #4
   246ac:	b	246c8 <__assert_fail@plt+0x11c4c>
   246b0:	str	r4, [r3, r0, lsl #3]
   246b4:	ldr	r0, [r6, #12]
   246b8:	add	r0, r0, #1
   246bc:	str	r0, [r6, #12]
   246c0:	mov	r0, r9
   246c4:	str	sl, [r7]
   246c8:	ldr	r3, [r0]
   246cc:	cmp	r2, #0
   246d0:	str	r3, [r7, #4]
   246d4:	str	r7, [r0]
   246d8:	mov	r7, r2
   246dc:	bne	24674 <__assert_fail@plt+0x11bf8>
   246e0:	ldr	r0, [sp]
   246e4:	ldr	r3, [r0, #4]
   246e8:	str	sl, [r8, #4]
   246ec:	add	r8, r8, #8
   246f0:	cmp	r8, r3
   246f4:	bcc	24658 <__assert_fail@plt+0x11bdc>
   246f8:	b	24840 <__assert_fail@plt+0x11dc4>
   246fc:	mov	r5, #0
   24700:	ldr	sl, [r8]
   24704:	cmp	sl, #0
   24708:	beq	24834 <__assert_fail@plt+0x11db8>
   2470c:	ldr	r7, [r8, #4]
   24710:	ldr	r1, [r6, #8]
   24714:	cmp	r7, #0
   24718:	beq	24794 <__assert_fail@plt+0x11d18>
   2471c:	mov	sl, #0
   24720:	ldr	r4, [r7]
   24724:	ldr	r2, [r6, #24]
   24728:	mov	r0, r4
   2472c:	blx	r2
   24730:	ldr	r1, [r6, #8]
   24734:	cmp	r0, r1
   24738:	bcs	24858 <__assert_fail@plt+0x11ddc>
   2473c:	ldr	r3, [r6]
   24740:	ldr	r2, [r7, #4]
   24744:	ldr	r5, [r3, r0, lsl #3]
   24748:	cmp	r5, #0
   2474c:	beq	2475c <__assert_fail@plt+0x11ce0>
   24750:	add	r0, r3, r0, lsl #3
   24754:	add	r0, r0, #4
   24758:	b	24774 <__assert_fail@plt+0x11cf8>
   2475c:	str	r4, [r3, r0, lsl #3]
   24760:	ldr	r0, [r6, #12]
   24764:	add	r0, r0, #1
   24768:	str	r0, [r6, #12]
   2476c:	mov	r0, r9
   24770:	str	sl, [r7]
   24774:	ldr	r3, [r0]
   24778:	cmp	r2, #0
   2477c:	str	r3, [r7, #4]
   24780:	str	r7, [r0]
   24784:	mov	r7, r2
   24788:	bne	24720 <__assert_fail@plt+0x11ca4>
   2478c:	ldr	sl, [r8]
   24790:	mov	r5, #0
   24794:	str	r5, [r8, #4]
   24798:	mov	r0, sl
   2479c:	ldr	r2, [r6, #24]
   247a0:	blx	r2
   247a4:	mov	r4, r0
   247a8:	ldr	r0, [r6, #8]
   247ac:	cmp	r4, r0
   247b0:	bcs	24858 <__assert_fail@plt+0x11ddc>
   247b4:	ldr	r7, [r6]
   247b8:	ldr	r0, [r7, r4, lsl #3]
   247bc:	cmp	r0, #0
   247c0:	beq	247e0 <__assert_fail@plt+0x11d64>
   247c4:	ldr	r0, [r9]
   247c8:	cmp	r0, #0
   247cc:	beq	247f4 <__assert_fail@plt+0x11d78>
   247d0:	mov	r1, r0
   247d4:	ldr	r2, [r1, #4]!
   247d8:	str	r2, [r9]
   247dc:	b	24808 <__assert_fail@plt+0x11d8c>
   247e0:	str	sl, [r7, r4, lsl #3]
   247e4:	ldr	r0, [r6, #12]
   247e8:	add	r0, r0, #1
   247ec:	str	r0, [r6, #12]
   247f0:	b	2481c <__assert_fail@plt+0x11da0>
   247f4:	mov	r0, #8
   247f8:	bl	35608 <__assert_fail@plt+0x22b8c>
   247fc:	cmp	r0, #0
   24800:	beq	2484c <__assert_fail@plt+0x11dd0>
   24804:	add	r1, r0, #4
   24808:	str	sl, [r0]
   2480c:	add	r2, r7, r4, lsl #3
   24810:	ldr	r3, [r2, #4]
   24814:	str	r3, [r1]
   24818:	str	r0, [r2, #4]
   2481c:	ldr	r0, [sp]
   24820:	str	r5, [r8]
   24824:	ldr	r1, [r0, #12]
   24828:	ldr	r3, [r0, #4]
   2482c:	sub	r1, r1, #1
   24830:	str	r1, [r0, #12]
   24834:	add	r8, r8, #8
   24838:	cmp	r8, r3
   2483c:	bcc	24700 <__assert_fail@plt+0x11c84>
   24840:	mov	r0, #1
   24844:	sub	sp, fp, #28
   24848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2484c:	mov	r0, #0
   24850:	sub	sp, fp, #28
   24854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24858:	bl	12a28 <abort@plt>
   2485c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24860:	add	fp, sp, #28
   24864:	sub	sp, sp, #4
   24868:	cmp	r1, #0
   2486c:	beq	24bb0 <__assert_fail@plt+0x12134>
   24870:	mov	r8, r2
   24874:	mov	sl, r1
   24878:	ldr	r1, [r0, #8]
   2487c:	ldr	r2, [r0, #24]
   24880:	mov	r4, r0
   24884:	mov	r0, sl
   24888:	blx	r2
   2488c:	mov	r7, r0
   24890:	ldr	r0, [r4, #8]
   24894:	cmp	r7, r0
   24898:	bcs	24bb0 <__assert_fail@plt+0x12134>
   2489c:	ldr	r5, [r4]
   248a0:	mov	r9, r5
   248a4:	ldr	r1, [r9, r7, lsl #3]!
   248a8:	cmp	r1, #0
   248ac:	beq	24940 <__assert_fail@plt+0x11ec4>
   248b0:	cmp	r1, sl
   248b4:	beq	248e0 <__assert_fail@plt+0x11e64>
   248b8:	ldr	r2, [r4, #28]
   248bc:	mov	r0, sl
   248c0:	blx	r2
   248c4:	cmp	r0, #0
   248c8:	mov	r6, r9
   248cc:	beq	248fc <__assert_fail@plt+0x11e80>
   248d0:	ldr	r0, [r6]
   248d4:	cmp	r0, #0
   248d8:	bne	248e4 <__assert_fail@plt+0x11e68>
   248dc:	b	24940 <__assert_fail@plt+0x11ec4>
   248e0:	mov	r0, sl
   248e4:	cmp	r8, #0
   248e8:	mov	r7, #0
   248ec:	strne	r0, [r8]
   248f0:	mov	r0, r7
   248f4:	sub	sp, fp, #28
   248f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   248fc:	add	r6, r5, r7, lsl #3
   24900:	ldr	r0, [r6, #4]!
   24904:	cmp	r0, #0
   24908:	beq	24940 <__assert_fail@plt+0x11ec4>
   2490c:	ldr	r1, [r0]
   24910:	cmp	r1, sl
   24914:	beq	24934 <__assert_fail@plt+0x11eb8>
   24918:	ldr	r2, [r4, #28]
   2491c:	mov	r0, sl
   24920:	blx	r2
   24924:	ldr	r6, [r6]
   24928:	cmp	r0, #0
   2492c:	beq	24900 <__assert_fail@plt+0x11e84>
   24930:	b	248d0 <__assert_fail@plt+0x11e54>
   24934:	mov	r0, sl
   24938:	cmp	r0, #0
   2493c:	bne	248e4 <__assert_fail@plt+0x11e68>
   24940:	vldr	s0, [r4, #8]
   24944:	vldr	s2, [r4, #12]
   24948:	ldr	r0, [r4, #20]
   2494c:	vcvt.f32.u32	s0, s0
   24950:	vcvt.f32.u32	s4, s2
   24954:	vldr	s2, [r0, #8]
   24958:	vmul.f32	s6, s2, s0
   2495c:	vcmpe.f32	s6, s4
   24960:	vmrs	APSR_nzcv, fpscr
   24964:	bpl	24ac8 <__assert_fail@plt+0x1204c>
   24968:	movw	r1, #3920	; 0xf50
   2496c:	movt	r1, #5
   24970:	cmp	r0, r1
   24974:	beq	24a10 <__assert_fail@plt+0x11f94>
   24978:	vldr	s6, [pc, #564]	; 24bb4 <__assert_fail@plt+0x12138>
   2497c:	vcmpe.f32	s2, s6
   24980:	vmrs	APSR_nzcv, fpscr
   24984:	ble	249ec <__assert_fail@plt+0x11f70>
   24988:	vldr	s8, [pc, #552]	; 24bb8 <__assert_fail@plt+0x1213c>
   2498c:	vcmpe.f32	s2, s8
   24990:	vmrs	APSR_nzcv, fpscr
   24994:	bpl	249ec <__assert_fail@plt+0x11f70>
   24998:	vldr	s8, [pc, #540]	; 24bbc <__assert_fail@plt+0x12140>
   2499c:	vldr	s10, [r0, #12]
   249a0:	vcmpe.f32	s10, s8
   249a4:	vmrs	APSR_nzcv, fpscr
   249a8:	ble	249ec <__assert_fail@plt+0x11f70>
   249ac:	vldr	s8, [r0]
   249b0:	vcmpe.f32	s8, #0.0
   249b4:	vmrs	APSR_nzcv, fpscr
   249b8:	blt	249ec <__assert_fail@plt+0x11f70>
   249bc:	vadd.f32	s6, s8, s6
   249c0:	vcmpe.f32	s6, s2
   249c4:	vmrs	APSR_nzcv, fpscr
   249c8:	bpl	249ec <__assert_fail@plt+0x11f70>
   249cc:	vldr	s8, [r0, #4]
   249d0:	vmov.f32	s10, #112	; 0x3f800000  1.0
   249d4:	vcmpe.f32	s8, s10
   249d8:	vmrs	APSR_nzcv, fpscr
   249dc:	bhi	249ec <__assert_fail@plt+0x11f70>
   249e0:	vcmpe.f32	s6, s8
   249e4:	vmrs	APSR_nzcv, fpscr
   249e8:	bmi	249fc <__assert_fail@plt+0x11f80>
   249ec:	vldr	s2, [pc, #460]	; 24bc0 <__assert_fail@plt+0x12144>
   249f0:	movw	r0, #3920	; 0xf50
   249f4:	movt	r0, #5
   249f8:	str	r0, [r4, #20]
   249fc:	vmul.f32	s6, s2, s0
   24a00:	vcmpe.f32	s6, s4
   24a04:	vmrs	APSR_nzcv, fpscr
   24a08:	bmi	24a24 <__assert_fail@plt+0x11fa8>
   24a0c:	b	24ac8 <__assert_fail@plt+0x1204c>
   24a10:	mov	r0, r1
   24a14:	vmul.f32	s6, s2, s0
   24a18:	vcmpe.f32	s6, s4
   24a1c:	vmrs	APSR_nzcv, fpscr
   24a20:	bpl	24ac8 <__assert_fail@plt+0x1204c>
   24a24:	vldr	s4, [r0, #12]
   24a28:	ldrb	r0, [r0, #16]
   24a2c:	mvn	r7, #0
   24a30:	vmul.f32	s0, s4, s0
   24a34:	vldr	s4, [pc, #392]	; 24bc4 <__assert_fail@plt+0x12148>
   24a38:	cmp	r0, #0
   24a3c:	vmul.f32	s2, s2, s0
   24a40:	vseleq.f32	s0, s2, s0
   24a44:	vcmpe.f32	s0, s4
   24a48:	vmrs	APSR_nzcv, fpscr
   24a4c:	bge	24b44 <__assert_fail@plt+0x120c8>
   24a50:	vcvt.u32.f32	s0, s0
   24a54:	mov	r0, r4
   24a58:	vmov	r1, s0
   24a5c:	bl	243ac <__assert_fail@plt+0x11930>
   24a60:	cmp	r0, #0
   24a64:	beq	24b44 <__assert_fail@plt+0x120c8>
   24a68:	ldr	r1, [r4, #8]
   24a6c:	ldr	r2, [r4, #24]
   24a70:	mov	r0, sl
   24a74:	blx	r2
   24a78:	mov	r7, r0
   24a7c:	ldr	r0, [r4, #8]
   24a80:	cmp	r7, r0
   24a84:	bcs	24bb0 <__assert_fail@plt+0x12134>
   24a88:	ldr	r5, [r4]
   24a8c:	mov	r9, r5
   24a90:	ldr	r1, [r9, r7, lsl #3]!
   24a94:	cmp	r1, #0
   24a98:	beq	24af0 <__assert_fail@plt+0x12074>
   24a9c:	cmp	r1, sl
   24aa0:	mov	r0, sl
   24aa4:	beq	24ac0 <__assert_fail@plt+0x12044>
   24aa8:	ldr	r2, [r4, #28]
   24aac:	mov	r0, sl
   24ab0:	blx	r2
   24ab4:	cmp	r0, #0
   24ab8:	beq	24b60 <__assert_fail@plt+0x120e4>
   24abc:	ldr	r0, [r9]
   24ac0:	cmp	r0, #0
   24ac4:	bne	24bb0 <__assert_fail@plt+0x12134>
   24ac8:	ldr	r0, [r9]
   24acc:	cmp	r0, #0
   24ad0:	beq	24af0 <__assert_fail@plt+0x12074>
   24ad4:	ldr	r0, [r4, #36]	; 0x24
   24ad8:	cmp	r0, #0
   24adc:	beq	24b10 <__assert_fail@plt+0x12094>
   24ae0:	mov	r1, r0
   24ae4:	ldr	r2, [r1, #4]!
   24ae8:	str	r2, [r4, #36]	; 0x24
   24aec:	b	24b24 <__assert_fail@plt+0x120a8>
   24af0:	str	sl, [r9]
   24af4:	ldr	r0, [r4, #12]
   24af8:	ldr	r1, [r4, #16]
   24afc:	add	r0, r0, #1
   24b00:	add	r1, r1, #1
   24b04:	str	r0, [r4, #12]
   24b08:	str	r1, [r4, #16]
   24b0c:	b	24b40 <__assert_fail@plt+0x120c4>
   24b10:	mov	r0, #8
   24b14:	bl	35608 <__assert_fail@plt+0x22b8c>
   24b18:	cmp	r0, #0
   24b1c:	beq	24b50 <__assert_fail@plt+0x120d4>
   24b20:	add	r1, r0, #4
   24b24:	str	sl, [r0]
   24b28:	ldr	r2, [r9, #4]
   24b2c:	str	r2, [r1]
   24b30:	str	r0, [r9, #4]
   24b34:	ldr	r0, [r4, #16]
   24b38:	add	r0, r0, #1
   24b3c:	str	r0, [r4, #16]
   24b40:	mov	r7, #1
   24b44:	mov	r0, r7
   24b48:	sub	sp, fp, #28
   24b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b50:	mvn	r7, #0
   24b54:	mov	r0, r7
   24b58:	sub	sp, fp, #28
   24b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b60:	add	r6, r5, r7, lsl #3
   24b64:	ldr	r0, [r6, #4]!
   24b68:	cmp	r0, #0
   24b6c:	beq	24ac8 <__assert_fail@plt+0x1204c>
   24b70:	ldr	r1, [r0]
   24b74:	cmp	r1, sl
   24b78:	beq	24ba4 <__assert_fail@plt+0x12128>
   24b7c:	ldr	r2, [r4, #28]
   24b80:	mov	r0, sl
   24b84:	blx	r2
   24b88:	ldr	r6, [r6]
   24b8c:	cmp	r0, #0
   24b90:	beq	24b64 <__assert_fail@plt+0x120e8>
   24b94:	ldr	r0, [r6]
   24b98:	cmp	r0, #0
   24b9c:	beq	24ac8 <__assert_fail@plt+0x1204c>
   24ba0:	b	24bb0 <__assert_fail@plt+0x12134>
   24ba4:	mov	r0, sl
   24ba8:	cmp	r0, #0
   24bac:	beq	24ac8 <__assert_fail@plt+0x1204c>
   24bb0:	bl	12a28 <abort@plt>
   24bb4:	stclcc	12, cr12, [ip, #820]	; 0x334
   24bb8:	svccc	0x00666666
   24bbc:	svccc	0x008ccccd
   24bc0:	svccc	0x004ccccd
   24bc4:	svcmi	0x00800000
   24bc8:	push	{r4, sl, fp, lr}
   24bcc:	add	fp, sp, #8
   24bd0:	sub	sp, sp, #8
   24bd4:	add	r2, sp, #4
   24bd8:	mov	r4, r1
   24bdc:	bl	2485c <__assert_fail@plt+0x11de0>
   24be0:	cmn	r0, #1
   24be4:	beq	24c00 <__assert_fail@plt+0x12184>
   24be8:	ldr	r1, [sp, #4]
   24bec:	cmp	r0, #0
   24bf0:	moveq	r4, r1
   24bf4:	mov	r0, r4
   24bf8:	sub	sp, fp, #8
   24bfc:	pop	{r4, sl, fp, pc}
   24c00:	mov	r4, #0
   24c04:	mov	r0, r4
   24c08:	sub	sp, fp, #8
   24c0c:	pop	{r4, sl, fp, pc}
   24c10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24c14:	add	fp, sp, #24
   24c18:	mov	r9, r1
   24c1c:	ldr	r1, [r0, #8]
   24c20:	ldr	r2, [r0, #24]
   24c24:	mov	r5, r0
   24c28:	mov	r0, r9
   24c2c:	blx	r2
   24c30:	mov	r7, r0
   24c34:	ldr	r0, [r5, #8]
   24c38:	cmp	r7, r0
   24c3c:	bcs	24eac <__assert_fail@plt+0x12430>
   24c40:	ldr	r6, [r5]
   24c44:	mov	r8, #0
   24c48:	mov	r4, r6
   24c4c:	ldr	r1, [r4, r7, lsl #3]!
   24c50:	cmp	r1, #0
   24c54:	beq	24d08 <__assert_fail@plt+0x1228c>
   24c58:	cmp	r1, r9
   24c5c:	beq	24c78 <__assert_fail@plt+0x121fc>
   24c60:	ldr	r2, [r5, #28]
   24c64:	mov	r0, r9
   24c68:	blx	r2
   24c6c:	cmp	r0, #0
   24c70:	beq	24cb0 <__assert_fail@plt+0x12234>
   24c74:	ldr	r9, [r4]
   24c78:	add	r0, r6, r7, lsl #3
   24c7c:	ldr	r0, [r0, #4]
   24c80:	cmp	r0, #0
   24c84:	beq	24cf8 <__assert_fail@plt+0x1227c>
   24c88:	ldm	r0, {r1, r2}
   24c8c:	stm	r4, {r1, r2}
   24c90:	mov	r1, #0
   24c94:	str	r1, [r0]
   24c98:	ldr	r1, [r5, #36]	; 0x24
   24c9c:	str	r1, [r0, #4]
   24ca0:	str	r0, [r5, #36]	; 0x24
   24ca4:	cmp	r9, #0
   24ca8:	bne	24d40 <__assert_fail@plt+0x122c4>
   24cac:	b	24d08 <__assert_fail@plt+0x1228c>
   24cb0:	add	r7, r6, r7, lsl #3
   24cb4:	ldr	r0, [r7, #4]!
   24cb8:	cmp	r0, #0
   24cbc:	beq	24d08 <__assert_fail@plt+0x1228c>
   24cc0:	ldr	r1, [r0]
   24cc4:	cmp	r1, r9
   24cc8:	beq	24d10 <__assert_fail@plt+0x12294>
   24ccc:	ldr	r2, [r5, #28]
   24cd0:	mov	r0, r9
   24cd4:	blx	r2
   24cd8:	ldr	r1, [r7]
   24cdc:	cmp	r0, #0
   24ce0:	bne	24d18 <__assert_fail@plt+0x1229c>
   24ce4:	ldr	r0, [r1, #4]!
   24ce8:	cmp	r0, #0
   24cec:	mov	r7, r1
   24cf0:	bne	24cc0 <__assert_fail@plt+0x12244>
   24cf4:	b	24d08 <__assert_fail@plt+0x1228c>
   24cf8:	mov	r0, #0
   24cfc:	str	r0, [r4]
   24d00:	cmp	r9, #0
   24d04:	bne	24d40 <__assert_fail@plt+0x122c4>
   24d08:	mov	r0, r8
   24d0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24d10:	mov	r1, r0
   24d14:	b	24d1c <__assert_fail@plt+0x122a0>
   24d18:	ldr	r9, [r1]
   24d1c:	ldr	r0, [r1, #4]
   24d20:	str	r0, [r7]
   24d24:	mov	r0, #0
   24d28:	str	r0, [r1]
   24d2c:	ldr	r0, [r5, #36]	; 0x24
   24d30:	str	r0, [r1, #4]
   24d34:	str	r1, [r5, #36]	; 0x24
   24d38:	cmp	r9, #0
   24d3c:	beq	24d08 <__assert_fail@plt+0x1228c>
   24d40:	ldr	r0, [r5, #16]
   24d44:	sub	r0, r0, #1
   24d48:	str	r0, [r5, #16]
   24d4c:	ldr	r0, [r4]
   24d50:	cmp	r0, #0
   24d54:	bne	24e6c <__assert_fail@plt+0x123f0>
   24d58:	ldr	r0, [r5, #12]
   24d5c:	vldr	s0, [r5, #8]
   24d60:	sub	r1, r0, #1
   24d64:	str	r1, [r5, #12]
   24d68:	vmov	s2, r1
   24d6c:	ldr	r0, [r5, #20]
   24d70:	vcvt.f32.u32	s0, s0
   24d74:	vcvt.f32.u32	s2, s2
   24d78:	vldr	s4, [r0]
   24d7c:	vmul.f32	s6, s4, s0
   24d80:	vcmpe.f32	s6, s2
   24d84:	vmrs	APSR_nzcv, fpscr
   24d88:	ble	24e6c <__assert_fail@plt+0x123f0>
   24d8c:	movw	r1, #3920	; 0xf50
   24d90:	movt	r1, #5
   24d94:	cmp	r0, r1
   24d98:	beq	24e00 <__assert_fail@plt+0x12384>
   24d9c:	vldr	s8, [pc, #268]	; 24eb0 <__assert_fail@plt+0x12434>
   24da0:	vldr	s6, [r0, #8]
   24da4:	vcmpe.f32	s6, s8
   24da8:	vmrs	APSR_nzcv, fpscr
   24dac:	ble	24ddc <__assert_fail@plt+0x12360>
   24db0:	vldr	s10, [pc, #252]	; 24eb4 <__assert_fail@plt+0x12438>
   24db4:	vcmpe.f32	s6, s10
   24db8:	vmrs	APSR_nzcv, fpscr
   24dbc:	bpl	24ddc <__assert_fail@plt+0x12360>
   24dc0:	vcmpe.f32	s4, #0.0
   24dc4:	vmrs	APSR_nzcv, fpscr
   24dc8:	vldrge	s10, [r0, #12]
   24dcc:	vldrge	s12, [pc, #228]	; 24eb8 <__assert_fail@plt+0x1243c>
   24dd0:	vcmpege.f32	s10, s12
   24dd4:	vmrsge	APSR_nzcv, fpscr
   24dd8:	bgt	24e78 <__assert_fail@plt+0x123fc>
   24ddc:	vldr	s4, [pc, #216]	; 24ebc <__assert_fail@plt+0x12440>
   24de0:	movw	r0, #3920	; 0xf50
   24de4:	movt	r0, #5
   24de8:	str	r0, [r5, #20]
   24dec:	vmul.f32	s4, s4, s0
   24df0:	vcmpe.f32	s4, s2
   24df4:	vmrs	APSR_nzcv, fpscr
   24df8:	bgt	24e14 <__assert_fail@plt+0x12398>
   24dfc:	b	24e6c <__assert_fail@plt+0x123f0>
   24e00:	mov	r0, r1
   24e04:	vmul.f32	s4, s4, s0
   24e08:	vcmpe.f32	s4, s2
   24e0c:	vmrs	APSR_nzcv, fpscr
   24e10:	ble	24e6c <__assert_fail@plt+0x123f0>
   24e14:	ldrb	r1, [r0, #16]
   24e18:	vldr	s2, [r0, #4]
   24e1c:	cmp	r1, #0
   24e20:	vmul.f32	s0, s2, s0
   24e24:	vldreq	s2, [r0, #8]
   24e28:	mov	r0, r5
   24e2c:	vmuleq.f32	s0, s0, s2
   24e30:	vcvt.u32.f32	s0, s0
   24e34:	vmov	r1, s0
   24e38:	bl	243ac <__assert_fail@plt+0x11930>
   24e3c:	cmp	r0, #0
   24e40:	bne	24e6c <__assert_fail@plt+0x123f0>
   24e44:	ldr	r0, [r5, #36]	; 0x24
   24e48:	cmp	r0, #0
   24e4c:	beq	24e64 <__assert_fail@plt+0x123e8>
   24e50:	ldr	r4, [r0, #4]
   24e54:	bl	32c40 <__assert_fail@plt+0x201c4>
   24e58:	cmp	r4, #0
   24e5c:	mov	r0, r4
   24e60:	bne	24e50 <__assert_fail@plt+0x123d4>
   24e64:	mov	r0, #0
   24e68:	str	r0, [r5, #36]	; 0x24
   24e6c:	mov	r8, r9
   24e70:	mov	r0, r8
   24e74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24e78:	vadd.f32	s8, s4, s8
   24e7c:	vcmpe.f32	s8, s6
   24e80:	vmrs	APSR_nzcv, fpscr
   24e84:	bpl	24ddc <__assert_fail@plt+0x12360>
   24e88:	vldr	s6, [r0, #4]
   24e8c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   24e90:	vcmpe.f32	s6, s10
   24e94:	vmrs	APSR_nzcv, fpscr
   24e98:	bhi	24ddc <__assert_fail@plt+0x12360>
   24e9c:	vcmpe.f32	s8, s6
   24ea0:	vmrs	APSR_nzcv, fpscr
   24ea4:	bmi	24e04 <__assert_fail@plt+0x12388>
   24ea8:	b	24ddc <__assert_fail@plt+0x12360>
   24eac:	bl	12a28 <abort@plt>
   24eb0:	stclcc	12, cr12, [ip, #820]	; 0x334
   24eb4:	svccc	0x00666666
   24eb8:	svccc	0x008ccccd
   24ebc:	andeq	r0, r0, r0
   24ec0:	b	24c10 <__assert_fail@plt+0x12194>
   24ec4:	andeq	r0, r0, r0
   24ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ecc:	add	fp, sp, #28
   24ed0:	sub	sp, sp, #4
   24ed4:	vpush	{d8-d9}
   24ed8:	sub	sp, sp, #96	; 0x60
   24edc:	mov	r7, r3
   24ee0:	mov	r6, r2
   24ee4:	mov	r9, r1
   24ee8:	str	r0, [sp, #36]	; 0x24
   24eec:	bl	1292c <localeconv@plt>
   24ef0:	ldr	r5, [r0]
   24ef4:	mov	r4, r0
   24ef8:	mov	r0, r5
   24efc:	bl	12788 <strlen@plt>
   24f00:	movw	r2, #54804	; 0xd614
   24f04:	sub	r1, r0, #1
   24f08:	cmp	r1, #16
   24f0c:	movt	r2, #4
   24f10:	movcc	r2, r5
   24f14:	ldr	r5, [r4, #4]
   24f18:	ldr	r4, [r4, #8]
   24f1c:	movcs	r0, #1
   24f20:	str	r0, [sp, #8]
   24f24:	str	r2, [sp, #4]
   24f28:	mov	r0, r5
   24f2c:	bl	12788 <strlen@plt>
   24f30:	movw	r3, #58175	; 0xe33f
   24f34:	cmp	r0, #17
   24f38:	movw	r0, #647	; 0x287
   24f3c:	ldr	r2, [fp, #16]
   24f40:	ldr	sl, [fp, #8]
   24f44:	ldr	r8, [fp, #12]
   24f48:	str	r6, [sp, #20]
   24f4c:	str	r7, [sp, #28]
   24f50:	str	r4, [sp, #12]
   24f54:	movt	r3, #4
   24f58:	add	r1, r6, r0
   24f5c:	movcc	r3, r5
   24f60:	ands	r0, r7, #32
   24f64:	ldr	r5, [fp, #20]
   24f68:	str	r1, [sp, #24]
   24f6c:	str	r0, [sp, #16]
   24f70:	mov	r0, #1000	; 0x3e8
   24f74:	str	r3, [sp, #44]	; 0x2c
   24f78:	movwne	r0, #1024	; 0x400
   24f7c:	str	r0, [sp, #32]
   24f80:	and	r0, r7, #3
   24f84:	str	r0, [sp, #40]	; 0x28
   24f88:	subs	r0, sl, r2
   24f8c:	sbcs	r0, r8, r5
   24f90:	bcs	25084 <__assert_fail@plt+0x12608>
   24f94:	orrs	r0, sl, r8
   24f98:	mov	r4, r9
   24f9c:	beq	2516c <__assert_fail@plt+0x126f0>
   24fa0:	ldr	r5, [fp, #20]
   24fa4:	mov	r0, r2
   24fa8:	mov	r2, sl
   24fac:	mov	r3, r8
   24fb0:	mov	r1, r5
   24fb4:	bl	4c218 <__assert_fail@plt+0x3979c>
   24fb8:	ldr	r2, [fp, #16]
   24fbc:	mov	r6, r0
   24fc0:	mov	r3, r1
   24fc4:	umull	r0, r1, r0, sl
   24fc8:	mla	r1, r6, r8, r1
   24fcc:	mla	r1, r3, sl, r1
   24fd0:	subs	r0, r2, r0
   24fd4:	sbc	r1, r5, r1
   24fd8:	orrs	r0, r0, r1
   24fdc:	bne	2516c <__assert_fail@plt+0x126f0>
   24fe0:	ldr	r5, [sp, #36]	; 0x24
   24fe4:	mov	r1, r4
   24fe8:	mov	r2, r6
   24fec:	mov	r8, r3
   24ff0:	mov	r0, r5
   24ff4:	bl	4c218 <__assert_fail@plt+0x3979c>
   24ff8:	mov	r7, r0
   24ffc:	mov	r9, r1
   25000:	umull	r0, r1, r0, r6
   25004:	mov	r2, #10
   25008:	mov	r3, r8
   2500c:	mla	r1, r7, r8, r1
   25010:	subs	r0, r5, r0
   25014:	mla	r1, r9, r6, r1
   25018:	umull	sl, r0, r0, r2
   2501c:	mov	r2, r6
   25020:	sbc	r1, r4, r1
   25024:	add	r1, r1, r1, lsl #2
   25028:	add	r5, r0, r1, lsl #1
   2502c:	mov	r0, sl
   25030:	mov	r1, r5
   25034:	bl	4c218 <__assert_fail@plt+0x3979c>
   25038:	mov	r4, r0
   2503c:	umull	r0, r2, r0, r6
   25040:	mla	r2, r4, r8, r2
   25044:	subs	r0, sl, r0
   25048:	mla	r1, r1, r6, r2
   2504c:	mov	r2, #2
   25050:	sbc	r1, r5, r1
   25054:	subs	r3, r6, r0, lsl #1
   25058:	lsl	r1, r1, #1
   2505c:	orr	r1, r1, r0, lsr #31
   25060:	sbcs	r3, r8, r1
   25064:	orr	r5, r1, r0, lsl #1
   25068:	movwcc	r2, #3
   2506c:	cmp	r5, #0
   25070:	movwne	r5, #1
   25074:	rsbs	r0, r6, r0, lsl #1
   25078:	sbcs	r0, r1, r8
   2507c:	movcs	r5, r2
   25080:	b	250fc <__assert_fail@plt+0x12680>
   25084:	mov	r0, sl
   25088:	mov	r1, r8
   2508c:	mov	r3, r5
   25090:	bl	4c218 <__assert_fail@plt+0x3979c>
   25094:	ldr	r2, [fp, #16]
   25098:	mov	r6, r0
   2509c:	mov	r3, r1
   250a0:	mov	r4, r9
   250a4:	umull	r0, r1, r0, r2
   250a8:	mla	r1, r6, r5, r1
   250ac:	subs	r0, sl, r0
   250b0:	mla	r1, r3, r2, r1
   250b4:	sbc	r1, r8, r1
   250b8:	orrs	r0, r0, r1
   250bc:	bne	2516c <__assert_fail@plt+0x126f0>
   250c0:	ldr	r5, [sp, #36]	; 0x24
   250c4:	mov	r2, r6
   250c8:	umull	r7, r0, r6, r5
   250cc:	mla	r0, r6, r4, r0
   250d0:	mla	r9, r3, r5, r0
   250d4:	mov	r0, r7
   250d8:	mov	r1, r9
   250dc:	bl	4c218 <__assert_fail@plt+0x3979c>
   250e0:	ldr	r2, [fp, #16]
   250e4:	eor	r1, r1, r4
   250e8:	eor	r0, r0, r5
   250ec:	orrs	r0, r0, r1
   250f0:	bne	2516c <__assert_fail@plt+0x126f0>
   250f4:	mov	r5, #0
   250f8:	mov	r4, #0
   250fc:	ldr	r0, [sp, #28]
   25100:	ldr	r2, [sp, #32]
   25104:	mvn	r6, #0
   25108:	ands	r8, r0, #16
   2510c:	beq	25120 <__assert_fail@plt+0x126a4>
   25110:	subs	r0, r7, r2
   25114:	mov	r6, #0
   25118:	sbcs	r0, r9, #0
   2511c:	bcs	25478 <__assert_fail@plt+0x129fc>
   25120:	ldr	r0, [sp, #24]
   25124:	mov	sl, r7
   25128:	str	r0, [sp, #36]	; 0x24
   2512c:	ldr	r0, [sp, #40]	; 0x28
   25130:	cmp	r0, #0
   25134:	beq	255c4 <__assert_fail@plt+0x12b48>
   25138:	cmp	r0, #1
   2513c:	bne	2546c <__assert_fail@plt+0x129f0>
   25140:	rsbs	r1, r5, #0
   25144:	mov	r0, #0
   25148:	and	r3, sl, #1
   2514c:	ldr	r5, [sp, #36]	; 0x24
   25150:	sbc	r0, r0, #0
   25154:	eor	r1, r3, r1
   25158:	orrs	r0, r1, r0
   2515c:	addne	r4, r4, #1
   25160:	cmp	r4, #5
   25164:	bgt	255d4 <__assert_fail@plt+0x12b58>
   25168:	b	25628 <__assert_fail@plt+0x12bac>
   2516c:	ldr	r9, [fp, #20]
   25170:	mov	r0, r2
   25174:	mov	r1, r9
   25178:	bl	4c0d0 <__assert_fail@plt+0x39654>
   2517c:	vmov	d8, r0, r1
   25180:	ldr	r0, [sp, #36]	; 0x24
   25184:	mov	r1, r4
   25188:	bl	4c0d0 <__assert_fail@plt+0x39654>
   2518c:	mov	r6, r0
   25190:	mov	r7, r1
   25194:	mov	r0, sl
   25198:	mov	r1, r8
   2519c:	bl	4c0d0 <__assert_fail@plt+0x39654>
   251a0:	vmov	d17, r6, r7
   251a4:	ldr	r7, [sp, #28]
   251a8:	vmov	d16, r0, r1
   251ac:	vdiv.f64	d16, d16, d8
   251b0:	vmul.f64	d8, d16, d17
   251b4:	tst	r7, #16
   251b8:	bne	2522c <__assert_fail@plt+0x127b0>
   251bc:	ldr	r0, [sp, #40]	; 0x28
   251c0:	ldr	sl, [sp, #20]
   251c4:	cmp	r0, #1
   251c8:	beq	253cc <__assert_fail@plt+0x12950>
   251cc:	vldr	d16, [pc, #980]	; 255a8 <__assert_fail@plt+0x12b2c>
   251d0:	ldr	r8, [sp, #24]
   251d4:	vcmpe.f64	d8, d16
   251d8:	vmrs	APSR_nzcv, fpscr
   251dc:	bpl	253d0 <__assert_fail@plt+0x12954>
   251e0:	mov	r6, r0
   251e4:	vmov	r0, r1, d8
   251e8:	bl	4c268 <__assert_fail@plt+0x397ec>
   251ec:	mov	r4, r0
   251f0:	mov	r5, r1
   251f4:	bl	4c0d0 <__assert_fail@plt+0x39654>
   251f8:	vmov	d16, r0, r1
   251fc:	clz	r0, r6
   25200:	mov	r2, #0
   25204:	vcmp.f64	d8, d16
   25208:	lsr	r0, r0, #5
   2520c:	vmrs	APSR_nzcv, fpscr
   25210:	movwne	r2, #1
   25214:	and	r0, r0, r2
   25218:	adds	r0, r0, r4
   2521c:	adc	r1, r5, #0
   25220:	bl	4c0d0 <__assert_fail@plt+0x39654>
   25224:	vmov	d8, r0, r1
   25228:	b	253d0 <__assert_fail@plt+0x12954>
   2522c:	ldr	r0, [sp, #32]
   25230:	vmov.f64	d16, #112	; 0x3f800000  1.0
   25234:	mov	r6, #0
   25238:	vmov	s0, r0
   2523c:	vcvt.f64.u32	d17, s0
   25240:	ldr	sl, [sp, #20]
   25244:	add	r6, r6, #1
   25248:	vmul.f64	d16, d16, d17
   2524c:	cmp	r6, #7
   25250:	vmulls.f64	d18, d16, d17
   25254:	vcmpels.f64	d18, d8
   25258:	vmrsls	APSR_nzcv, fpscr
   2525c:	bls	25244 <__assert_fail@plt+0x127c8>
   25260:	ldr	r0, [sp, #40]	; 0x28
   25264:	ldr	r8, [sp, #24]
   25268:	ldr	r5, [sp, #8]
   2526c:	vdiv.f64	d8, d8, d16
   25270:	vmov.f64	d16, d8
   25274:	cmp	r0, #1
   25278:	beq	252dc <__assert_fail@plt+0x12860>
   2527c:	vldr	d16, [pc, #804]	; 255a8 <__assert_fail@plt+0x12b2c>
   25280:	vcmpe.f64	d8, d16
   25284:	vmov.f64	d16, d8
   25288:	vmrs	APSR_nzcv, fpscr
   2528c:	bpl	252dc <__assert_fail@plt+0x12860>
   25290:	vmov	r0, r1, d8
   25294:	bl	4c268 <__assert_fail@plt+0x397ec>
   25298:	mov	r4, r0
   2529c:	mov	r5, r1
   252a0:	bl	4c0d0 <__assert_fail@plt+0x39654>
   252a4:	vmov	d16, r0, r1
   252a8:	ldr	r0, [sp, #40]	; 0x28
   252ac:	mov	r2, #0
   252b0:	vcmp.f64	d8, d16
   252b4:	vmrs	APSR_nzcv, fpscr
   252b8:	movwne	r2, #1
   252bc:	clz	r0, r0
   252c0:	lsr	r0, r0, #5
   252c4:	and	r0, r0, r2
   252c8:	adds	r0, r0, r4
   252cc:	adc	r1, r5, #0
   252d0:	ldr	r5, [sp, #8]
   252d4:	bl	4c0d0 <__assert_fail@plt+0x39654>
   252d8:	vmov	d16, r0, r1
   252dc:	movw	r1, #3946	; 0xf6a
   252e0:	vmov	r2, r3, d16
   252e4:	mov	r0, sl
   252e8:	movt	r1, #5
   252ec:	bl	12938 <sprintf@plt>
   252f0:	ldr	r1, [sp, #16]
   252f4:	mov	r0, #3
   252f8:	cmp	r1, #0
   252fc:	movwne	r0, #2
   25300:	add	r4, r0, r5
   25304:	mov	r0, sl
   25308:	bl	12788 <strlen@plt>
   2530c:	cmp	r4, r0
   25310:	bcc	25334 <__assert_fail@plt+0x128b8>
   25314:	mov	r2, r0
   25318:	add	r5, r5, #1
   2531c:	tst	r7, #8
   25320:	beq	253f8 <__assert_fail@plt+0x1297c>
   25324:	add	r0, sl, r2
   25328:	ldrb	r0, [r0, #-1]
   2532c:	cmp	r0, #48	; 0x30
   25330:	bne	253f8 <__assert_fail@plt+0x1297c>
   25334:	ldr	r0, [sp, #40]	; 0x28
   25338:	vmov.f64	d9, #36	; 0x41200000  10.0
   2533c:	vmul.f64	d8, d8, d9
   25340:	cmp	r0, #1
   25344:	beq	253a0 <__assert_fail@plt+0x12924>
   25348:	vldr	d16, [pc, #600]	; 255a8 <__assert_fail@plt+0x12b2c>
   2534c:	vcmpe.f64	d8, d16
   25350:	vmrs	APSR_nzcv, fpscr
   25354:	bpl	253a0 <__assert_fail@plt+0x12924>
   25358:	vmov	r0, r1, d8
   2535c:	bl	4c268 <__assert_fail@plt+0x397ec>
   25360:	mov	r4, r0
   25364:	mov	r5, r1
   25368:	bl	4c0d0 <__assert_fail@plt+0x39654>
   2536c:	vmov	d16, r0, r1
   25370:	ldr	r0, [sp, #40]	; 0x28
   25374:	mov	r2, #0
   25378:	vcmp.f64	d8, d16
   2537c:	vmrs	APSR_nzcv, fpscr
   25380:	movwne	r2, #1
   25384:	clz	r0, r0
   25388:	lsr	r0, r0, #5
   2538c:	and	r0, r0, r2
   25390:	adds	r0, r0, r4
   25394:	adc	r1, r5, #0
   25398:	bl	4c0d0 <__assert_fail@plt+0x39654>
   2539c:	vmov	d8, r0, r1
   253a0:	movw	r1, #3940	; 0xf64
   253a4:	vdiv.f64	d16, d8, d9
   253a8:	mov	r0, sl
   253ac:	vmov	r2, r3, d16
   253b0:	movt	r1, #5
   253b4:	bl	12938 <sprintf@plt>
   253b8:	mov	r0, sl
   253bc:	bl	12788 <strlen@plt>
   253c0:	mov	r2, r0
   253c4:	mov	r5, #0
   253c8:	b	253f8 <__assert_fail@plt+0x1297c>
   253cc:	ldr	r8, [sp, #24]
   253d0:	movw	r1, #3940	; 0xf64
   253d4:	vmov	r2, r3, d8
   253d8:	mov	r0, sl
   253dc:	movt	r1, #5
   253e0:	bl	12938 <sprintf@plt>
   253e4:	mov	r0, sl
   253e8:	bl	12788 <strlen@plt>
   253ec:	mov	r2, r0
   253f0:	mov	r5, #0
   253f4:	mvn	r6, #0
   253f8:	sub	r4, r8, r2
   253fc:	mov	r1, sl
   25400:	mov	r0, r4
   25404:	bl	1244c <memmove@plt>
   25408:	sub	r5, r8, r5
   2540c:	tst	r7, #4
   25410:	bne	2567c <__assert_fail@plt+0x12c00>
   25414:	ldr	r3, [sp, #32]
   25418:	ldr	r5, [fp, #16]
   2541c:	tst	r7, #128	; 0x80
   25420:	beq	25798 <__assert_fail@plt+0x12d1c>
   25424:	cmn	r6, #1
   25428:	bgt	25538 <__assert_fail@plt+0x12abc>
   2542c:	subs	r0, r5, #2
   25430:	mov	r6, #0
   25434:	sbcs	r0, r9, #0
   25438:	bcc	25538 <__assert_fail@plt+0x12abc>
   2543c:	mov	r0, #0
   25440:	mov	r1, #1
   25444:	mov	r6, #0
   25448:	cmp	r6, #7
   2544c:	beq	25534 <__assert_fail@plt+0x12ab8>
   25450:	umull	r1, r2, r1, r3
   25454:	add	r6, r6, #1
   25458:	mla	r0, r0, r3, r2
   2545c:	subs	r2, r1, r5
   25460:	sbcs	r2, r0, r9
   25464:	bcc	25448 <__assert_fail@plt+0x129cc>
   25468:	b	25538 <__assert_fail@plt+0x12abc>
   2546c:	ldr	r8, [sp, #24]
   25470:	ldr	r5, [sp, #36]	; 0x24
   25474:	b	2562c <__assert_fail@plt+0x12bb0>
   25478:	mov	r6, #0
   2547c:	mov	r0, r7
   25480:	mov	r1, r9
   25484:	mov	r3, #0
   25488:	bl	4c218 <__assert_fail@plt+0x3979c>
   2548c:	ldr	r2, [sp, #32]
   25490:	mov	sl, r0
   25494:	mov	r9, r1
   25498:	mls	r0, r0, r2, r7
   2549c:	add	r0, r0, r0, lsl #2
   254a0:	add	r0, r4, r0, lsl #1
   254a4:	udiv	r4, r0, r2
   254a8:	mls	r0, r4, r2, r0
   254ac:	lsl	r0, r0, #1
   254b0:	add	r0, r0, r5, lsr #1
   254b4:	cmp	r0, r2
   254b8:	bcs	254dc <__assert_fail@plt+0x12a60>
   254bc:	add	r1, r0, r5
   254c0:	cmn	r0, r5
   254c4:	movwne	r1, #1
   254c8:	mov	r5, r1
   254cc:	add	r6, r6, #1
   254d0:	cmp	r6, #7
   254d4:	bls	254f8 <__assert_fail@plt+0x12a7c>
   254d8:	b	25508 <__assert_fail@plt+0x12a8c>
   254dc:	add	r0, r0, r5
   254e0:	mov	r5, #2
   254e4:	cmp	r2, r0
   254e8:	movwcc	r5, #3
   254ec:	add	r6, r6, #1
   254f0:	cmp	r6, #7
   254f4:	bhi	25508 <__assert_fail@plt+0x12a8c>
   254f8:	subs	r0, sl, r2
   254fc:	mov	r7, sl
   25500:	sbcs	r0, r9, #0
   25504:	bcs	2547c <__assert_fail@plt+0x12a00>
   25508:	rsbs	r0, sl, #9
   2550c:	rscs	r0, r9, #0
   25510:	bcc	255b0 <__assert_fail@plt+0x12b34>
   25514:	ldr	r0, [sp, #40]	; 0x28
   25518:	cmp	r0, #1
   2551c:	bne	257b4 <__assert_fail@plt+0x12d38>
   25520:	and	r0, r4, #1
   25524:	add	r0, r5, r0
   25528:	cmp	r0, #2
   2552c:	bhi	257c4 <__assert_fail@plt+0x12d48>
   25530:	b	257f8 <__assert_fail@plt+0x12d7c>
   25534:	mov	r6, #8
   25538:	and	r0, r7, #256	; 0x100
   2553c:	tst	r7, #64	; 0x40
   25540:	orrsne	r1, r6, r0
   25544:	movne	r1, #32
   25548:	addne	r8, sl, #648	; 0x288
   2554c:	strbne	r1, [sl, #647]	; 0x287
   25550:	cmp	r6, #0
   25554:	beq	2557c <__assert_fail@plt+0x12b00>
   25558:	ldr	r1, [sp, #16]
   2555c:	cmp	r1, #0
   25560:	moveq	r1, #107	; 0x6b
   25564:	cmpeq	r6, #1
   25568:	beq	25578 <__assert_fail@plt+0x12afc>
   2556c:	movw	r1, #4000	; 0xfa0
   25570:	movt	r1, #5
   25574:	ldrb	r1, [r1, r6]
   25578:	strb	r1, [r8], #1
   2557c:	cmp	r0, #0
   25580:	beq	25798 <__assert_fail@plt+0x12d1c>
   25584:	ldr	r0, [sp, #16]
   25588:	cmp	r0, #0
   2558c:	cmpne	r6, #0
   25590:	movne	r0, #105	; 0x69
   25594:	strbne	r0, [r8], #1
   25598:	mov	r0, #66	; 0x42
   2559c:	strb	r0, [r8], #1
   255a0:	b	25798 <__assert_fail@plt+0x12d1c>
   255a4:	nop	{0}
   255a8:	andeq	r0, r0, r0
   255ac:	mvnsmi	r0, #0
   255b0:	ldr	r0, [sp, #24]
   255b4:	str	r0, [sp, #36]	; 0x24
   255b8:	ldr	r0, [sp, #40]	; 0x28
   255bc:	cmp	r0, #0
   255c0:	bne	25138 <__assert_fail@plt+0x126bc>
   255c4:	add	r0, r4, r5
   255c8:	ldr	r5, [sp, #36]	; 0x24
   255cc:	cmp	r0, #1
   255d0:	blt	25628 <__assert_fail@plt+0x12bac>
   255d4:	adds	sl, sl, #1
   255d8:	adc	r9, r9, #0
   255dc:	cmp	r6, #7
   255e0:	bgt	25628 <__assert_fail@plt+0x12bac>
   255e4:	cmp	r8, #0
   255e8:	beq	25628 <__assert_fail@plt+0x12bac>
   255ec:	eor	r0, sl, r2
   255f0:	orrs	r0, r0, r9
   255f4:	ldreq	r0, [sp, #28]
   255f8:	addeq	r6, r6, #1
   255fc:	moveq	r9, #0
   25600:	moveq	sl, #1
   25604:	tsteq	r0, #8
   25608:	bne	25628 <__assert_fail@plt+0x12bac>
   2560c:	ldr	r2, [sp, #8]
   25610:	mov	r0, #48	; 0x30
   25614:	ldr	r1, [sp, #4]
   25618:	strb	r0, [r5, #-1]!
   2561c:	sub	r5, r5, r2
   25620:	mov	r0, r5
   25624:	bl	124b8 <memcpy@plt>
   25628:	ldr	r8, [sp, #24]
   2562c:	mov	r4, r5
   25630:	mov	r0, sl
   25634:	mov	r1, r9
   25638:	mov	r2, #10
   2563c:	mov	r3, #0
   25640:	bl	4c218 <__assert_fail@plt+0x3979c>
   25644:	add	r2, r0, r0, lsl #2
   25648:	sub	r2, sl, r2, lsl #1
   2564c:	orr	r2, r2, #48	; 0x30
   25650:	strb	r2, [r4, #-1]!
   25654:	rsbs	r2, sl, #9
   25658:	mov	sl, r0
   2565c:	rscs	r2, r9, #0
   25660:	mov	r9, r1
   25664:	bcc	25630 <__assert_fail@plt+0x12bb4>
   25668:	ldr	r7, [sp, #28]
   2566c:	ldr	r9, [fp, #20]
   25670:	ldr	sl, [sp, #20]
   25674:	tst	r7, #4
   25678:	beq	25414 <__assert_fail@plt+0x12998>
   2567c:	ldr	r0, [sp, #44]	; 0x2c
   25680:	mov	r7, r5
   25684:	str	r6, [sp, #8]
   25688:	sub	r5, r5, r4
   2568c:	bl	12788 <strlen@plt>
   25690:	add	r8, sp, #48	; 0x30
   25694:	str	r0, [sp, #40]	; 0x28
   25698:	mov	r1, r4
   2569c:	mov	r2, r5
   256a0:	mov	r0, r8
   256a4:	bl	124b8 <memcpy@plt>
   256a8:	ldr	r0, [sp, #12]
   256ac:	ldrb	r6, [r0]
   256b0:	cmp	r6, #255	; 0xff
   256b4:	mov	r9, r6
   256b8:	moveq	r9, r5
   256bc:	cmp	r6, #0
   256c0:	mvneq	r9, #0
   256c4:	cmp	r9, r5
   256c8:	movhi	r9, r5
   256cc:	sub	r4, r7, r9
   256d0:	sub	r7, r5, r9
   256d4:	mov	r2, r9
   256d8:	add	r1, r8, r7
   256dc:	mov	r0, r4
   256e0:	bl	124b8 <memcpy@plt>
   256e4:	cmp	r7, #0
   256e8:	beq	25774 <__assert_fail@plt+0x12cf8>
   256ec:	clz	r0, r6
   256f0:	ldr	r8, [sp, #12]
   256f4:	lsr	sl, r0, #5
   256f8:	ldr	r0, [sp, #40]	; 0x28
   256fc:	rsb	r0, r0, #0
   25700:	str	r0, [sp, #36]	; 0x24
   25704:	ldr	r0, [sp, #36]	; 0x24
   25708:	ldr	r1, [sp, #44]	; 0x2c
   2570c:	ldr	r2, [sp, #40]	; 0x28
   25710:	add	r4, r4, r0
   25714:	mov	r0, r4
   25718:	bl	124b8 <memcpy@plt>
   2571c:	tst	sl, #1
   25720:	add	r0, sp, #48	; 0x30
   25724:	addeq	r8, r8, #1
   25728:	ldrb	r6, [r8]
   2572c:	cmp	r6, #255	; 0xff
   25730:	mov	r5, r6
   25734:	moveq	r5, r7
   25738:	cmp	r6, #0
   2573c:	moveq	r5, r9
   25740:	cmp	r7, r5
   25744:	movcc	r5, r7
   25748:	sub	r7, r7, r5
   2574c:	sub	r4, r4, r5
   25750:	mov	r2, r5
   25754:	add	r1, r0, r7
   25758:	mov	r0, r4
   2575c:	bl	124b8 <memcpy@plt>
   25760:	clz	r0, r6
   25764:	cmp	r7, #0
   25768:	mov	r9, r5
   2576c:	lsr	sl, r0, #5
   25770:	bne	25704 <__assert_fail@plt+0x12c88>
   25774:	ldr	r8, [sp, #24]
   25778:	ldr	sl, [sp, #20]
   2577c:	ldr	r7, [sp, #28]
   25780:	ldr	r3, [sp, #32]
   25784:	ldr	r9, [fp, #20]
   25788:	ldr	r5, [fp, #16]
   2578c:	ldr	r6, [sp, #8]
   25790:	tst	r7, #128	; 0x80
   25794:	bne	25424 <__assert_fail@plt+0x129a8>
   25798:	mov	r0, #0
   2579c:	strb	r0, [r8]
   257a0:	mov	r0, r4
   257a4:	sub	sp, fp, #48	; 0x30
   257a8:	vpop	{d8-d9}
   257ac:	add	sp, sp, #4
   257b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   257b4:	cmp	r0, #0
   257b8:	bne	257f8 <__assert_fail@plt+0x12d7c>
   257bc:	cmp	r5, #0
   257c0:	beq	257f8 <__assert_fail@plt+0x12d7c>
   257c4:	adds	r0, sl, #1
   257c8:	add	r4, r4, #1
   257cc:	mov	r5, #0
   257d0:	adc	r1, r9, #0
   257d4:	cmp	r4, #10
   257d8:	bne	257f8 <__assert_fail@plt+0x12d7c>
   257dc:	rsbs	r3, r0, #9
   257e0:	mov	r4, #0
   257e4:	mov	sl, r0
   257e8:	mov	r9, r1
   257ec:	mov	r5, #0
   257f0:	rscs	r3, r1, #0
   257f4:	bcc	25864 <__assert_fail@plt+0x12de8>
   257f8:	ldr	r0, [sp, #28]
   257fc:	tst	r0, #8
   25800:	beq	25828 <__assert_fail@plt+0x12dac>
   25804:	cmp	r4, #0
   25808:	bne	25828 <__assert_fail@plt+0x12dac>
   2580c:	ldr	r0, [sp, #24]
   25810:	str	r0, [sp, #36]	; 0x24
   25814:	mov	r4, #0
   25818:	ldr	r0, [sp, #40]	; 0x28
   2581c:	cmp	r0, #0
   25820:	bne	25138 <__assert_fail@plt+0x126bc>
   25824:	b	255c4 <__assert_fail@plt+0x12b48>
   25828:	ldr	r1, [sp, #20]
   2582c:	ldr	r2, [sp, #8]
   25830:	add	r0, r4, #48	; 0x30
   25834:	strb	r0, [r1, #646]!	; 0x286
   25838:	sub	r0, r1, r2
   2583c:	ldr	r1, [sp, #4]
   25840:	str	r0, [sp, #36]	; 0x24
   25844:	bl	124b8 <memcpy@plt>
   25848:	ldr	r2, [sp, #32]
   2584c:	mov	r5, #0
   25850:	mov	r4, #0
   25854:	ldr	r0, [sp, #40]	; 0x28
   25858:	cmp	r0, #0
   2585c:	bne	25138 <__assert_fail@plt+0x126bc>
   25860:	b	255c4 <__assert_fail@plt+0x12b48>
   25864:	ldr	r0, [sp, #24]
   25868:	mov	r5, #0
   2586c:	mov	sl, #10
   25870:	mov	r9, #0
   25874:	str	r0, [sp, #36]	; 0x24
   25878:	ldr	r0, [sp, #40]	; 0x28
   2587c:	cmp	r0, #0
   25880:	bne	25138 <__assert_fail@plt+0x126bc>
   25884:	b	255c4 <__assert_fail@plt+0x12b48>
   25888:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2588c:	add	fp, sp, #24
   25890:	sub	sp, sp, #8
   25894:	mov	r4, r2
   25898:	mov	r8, r1
   2589c:	cmp	r0, #0
   258a0:	bne	258cc <__assert_fail@plt+0x12e50>
   258a4:	movw	r0, #58602	; 0xe4ea
   258a8:	movt	r0, #4
   258ac:	bl	126b0 <getenv@plt>
   258b0:	cmp	r0, #0
   258b4:	bne	258cc <__assert_fail@plt+0x12e50>
   258b8:	movw	r0, #3952	; 0xf70
   258bc:	movt	r0, #5
   258c0:	bl	126b0 <getenv@plt>
   258c4:	cmp	r0, #0
   258c8:	beq	259f8 <__assert_fail@plt+0x12f7c>
   258cc:	mov	r6, r0
   258d0:	movw	r7, #4024	; 0xfb8
   258d4:	movw	r1, #4012	; 0xfac
   258d8:	mov	r3, #4
   258dc:	ldrb	r5, [r6], #1
   258e0:	movt	r7, #5
   258e4:	movt	r1, #5
   258e8:	mov	r2, r7
   258ec:	cmp	r5, #39	; 0x27
   258f0:	movne	r6, r0
   258f4:	mov	r0, r6
   258f8:	bl	4b0e4 <__assert_fail@plt+0x38668>
   258fc:	sub	r1, r5, #39	; 0x27
   25900:	cmp	r0, #0
   25904:	clz	r1, r1
   25908:	lsr	r1, r1, #5
   2590c:	lsl	r5, r1, #2
   25910:	blt	25948 <__assert_fail@plt+0x12ecc>
   25914:	ldr	r0, [r7, r0, lsl #2]
   25918:	mov	r2, #1
   2591c:	mov	r1, #0
   25920:	str	r2, [r4]
   25924:	str	r1, [r4, #4]
   25928:	orr	r1, r0, r5
   2592c:	mov	r0, #0
   25930:	str	r1, [r8]
   25934:	ldrd	r2, [r4]
   25938:	orrs	r1, r2, r3
   2593c:	beq	25984 <__assert_fail@plt+0x12f08>
   25940:	sub	sp, fp, #24
   25944:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25948:	movw	r0, #3962	; 0xf7a
   2594c:	add	r1, sp, #4
   25950:	mov	r2, #0
   25954:	mov	r3, r4
   25958:	mov	r7, #0
   2595c:	movt	r0, #5
   25960:	str	r0, [sp]
   25964:	mov	r0, r6
   25968:	bl	318b0 <__assert_fail@plt+0x1ee34>
   2596c:	cmp	r0, #0
   25970:	beq	259b4 <__assert_fail@plt+0x12f38>
   25974:	str	r7, [r8]
   25978:	ldrd	r2, [r4]
   2597c:	orrs	r1, r2, r3
   25980:	bne	25940 <__assert_fail@plt+0x12ec4>
   25984:	movw	r0, #58581	; 0xe4d5
   25988:	movt	r0, #4
   2598c:	bl	126b0 <getenv@plt>
   25990:	cmp	r0, #0
   25994:	mov	r2, #512	; 0x200
   25998:	mov	r0, #4
   2599c:	mov	r1, #0
   259a0:	movweq	r2, #1024	; 0x400
   259a4:	str	r2, [r4]
   259a8:	str	r1, [r4, #4]
   259ac:	sub	sp, fp, #24
   259b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   259b4:	ldrb	r0, [r6]
   259b8:	sub	r0, r0, #48	; 0x30
   259bc:	uxtb	r0, r0
   259c0:	cmp	r0, #10
   259c4:	bcc	259f0 <__assert_fail@plt+0x12f74>
   259c8:	ldr	r0, [sp, #4]
   259cc:	cmp	r0, r6
   259d0:	beq	25a20 <__assert_fail@plt+0x12fa4>
   259d4:	ldrb	r2, [r6, #1]
   259d8:	add	r1, r6, #1
   259dc:	mov	r6, r1
   259e0:	sub	r2, r2, #48	; 0x30
   259e4:	uxtb	r2, r2
   259e8:	cmp	r2, #10
   259ec:	bcs	259cc <__assert_fail@plt+0x12f50>
   259f0:	mov	r1, r5
   259f4:	b	2592c <__assert_fail@plt+0x12eb0>
   259f8:	movw	r0, #58581	; 0xe4d5
   259fc:	movt	r0, #4
   25a00:	bl	126b0 <getenv@plt>
   25a04:	mov	r2, #512	; 0x200
   25a08:	cmp	r0, #0
   25a0c:	mov	r1, #0
   25a10:	movweq	r2, #1024	; 0x400
   25a14:	str	r2, [r4]
   25a18:	str	r1, [r4, #4]
   25a1c:	b	2592c <__assert_fail@plt+0x12eb0>
   25a20:	ldrb	r2, [r0, #-1]
   25a24:	orr	r1, r5, #384	; 0x180
   25a28:	cmp	r2, #66	; 0x42
   25a2c:	mov	r2, r1
   25a30:	orrne	r2, r5, #128	; 0x80
   25a34:	bne	25a48 <__assert_fail@plt+0x12fcc>
   25a38:	ldrb	r0, [r0, #-2]
   25a3c:	cmp	r0, #105	; 0x69
   25a40:	orreq	r1, r2, #32
   25a44:	b	2592c <__assert_fail@plt+0x12eb0>
   25a48:	orr	r1, r2, #32
   25a4c:	b	2592c <__assert_fail@plt+0x12eb0>
   25a50:	push	{r4, r5, r6, r7, fp, lr}
   25a54:	add	fp, sp, #16
   25a58:	movw	r7, #15604	; 0x3cf4
   25a5c:	mov	r4, r0
   25a60:	movt	r7, #6
   25a64:	ldr	r5, [r7]
   25a68:	cmp	r5, #0
   25a6c:	bne	25a80 <__assert_fail@plt+0x13004>
   25a70:	b	25a90 <__assert_fail@plt+0x13014>
   25a74:	ldr	r5, [r5, #4]
   25a78:	cmp	r5, #0
   25a7c:	beq	25a90 <__assert_fail@plt+0x13014>
   25a80:	ldr	r0, [r5]
   25a84:	cmp	r0, r4
   25a88:	bne	25a74 <__assert_fail@plt+0x12ff8>
   25a8c:	b	25ae4 <__assert_fail@plt+0x13068>
   25a90:	mov	r0, r4
   25a94:	bl	123ec <getpwuid@plt>
   25a98:	cmp	r0, #0
   25a9c:	beq	25aa8 <__assert_fail@plt+0x1302c>
   25aa0:	ldr	r6, [r0]
   25aa4:	b	25ab0 <__assert_fail@plt+0x13034>
   25aa8:	movw	r6, #58175	; 0xe33f
   25aac:	movt	r6, #4
   25ab0:	mov	r0, r6
   25ab4:	bl	12788 <strlen@plt>
   25ab8:	add	r0, r0, #12
   25abc:	bic	r0, r0, #3
   25ac0:	bl	309ec <__assert_fail@plt+0x1df70>
   25ac4:	mov	r5, r0
   25ac8:	str	r4, [r0]
   25acc:	add	r0, r0, #8
   25ad0:	mov	r1, r6
   25ad4:	bl	12638 <strcpy@plt>
   25ad8:	ldr	r0, [r7]
   25adc:	str	r5, [r7]
   25ae0:	str	r0, [r5, #4]
   25ae4:	ldrb	r0, [r5, #8]!
   25ae8:	cmp	r0, #0
   25aec:	moveq	r5, r0
   25af0:	mov	r0, r5
   25af4:	pop	{r4, r5, r6, r7, fp, pc}
   25af8:	push	{r4, r5, r6, r7, fp, lr}
   25afc:	add	fp, sp, #16
   25b00:	movw	r7, #15604	; 0x3cf4
   25b04:	mov	r4, r0
   25b08:	movt	r7, #6
   25b0c:	ldr	r5, [r7]
   25b10:	cmp	r5, #0
   25b14:	beq	25b48 <__assert_fail@plt+0x130cc>
   25b18:	ldrb	r6, [r4]
   25b1c:	mov	r0, r5
   25b20:	ldrb	r1, [r0, #8]!
   25b24:	cmp	r1, r6
   25b28:	bne	25b3c <__assert_fail@plt+0x130c0>
   25b2c:	mov	r1, r4
   25b30:	bl	123d4 <strcmp@plt>
   25b34:	cmp	r0, #0
   25b38:	beq	25be4 <__assert_fail@plt+0x13168>
   25b3c:	ldr	r5, [r5, #4]
   25b40:	cmp	r5, #0
   25b44:	bne	25b1c <__assert_fail@plt+0x130a0>
   25b48:	ldr	r5, [r7, #4]
   25b4c:	cmp	r5, #0
   25b50:	beq	25b84 <__assert_fail@plt+0x13108>
   25b54:	ldrb	r6, [r4]
   25b58:	mov	r0, r5
   25b5c:	ldrb	r1, [r0, #8]!
   25b60:	cmp	r1, r6
   25b64:	bne	25b78 <__assert_fail@plt+0x130fc>
   25b68:	mov	r1, r4
   25b6c:	bl	123d4 <strcmp@plt>
   25b70:	cmp	r0, #0
   25b74:	beq	25be0 <__assert_fail@plt+0x13164>
   25b78:	ldr	r5, [r5, #4]
   25b7c:	cmp	r5, #0
   25b80:	bne	25b58 <__assert_fail@plt+0x130dc>
   25b84:	mov	r0, r4
   25b88:	bl	123b0 <getpwnam@plt>
   25b8c:	mov	r6, r0
   25b90:	mov	r0, r4
   25b94:	bl	12788 <strlen@plt>
   25b98:	add	r0, r0, #12
   25b9c:	bic	r0, r0, #3
   25ba0:	bl	309ec <__assert_fail@plt+0x1df70>
   25ba4:	mov	r5, r0
   25ba8:	add	r0, r0, #8
   25bac:	mov	r1, r4
   25bb0:	bl	12638 <strcpy@plt>
   25bb4:	cmp	r6, #0
   25bb8:	beq	25bd4 <__assert_fail@plt+0x13158>
   25bbc:	ldr	r0, [r6, #8]
   25bc0:	ldr	r1, [r7]
   25bc4:	stm	r5, {r0, r1}
   25bc8:	mov	r0, r5
   25bcc:	str	r5, [r7]
   25bd0:	pop	{r4, r5, r6, r7, fp, pc}
   25bd4:	ldr	r0, [r7, #4]
   25bd8:	str	r5, [r7, #4]
   25bdc:	str	r0, [r5, #4]
   25be0:	mov	r5, #0
   25be4:	mov	r0, r5
   25be8:	pop	{r4, r5, r6, r7, fp, pc}
   25bec:	push	{r4, r5, r6, r7, fp, lr}
   25bf0:	add	fp, sp, #16
   25bf4:	movw	r7, #15604	; 0x3cf4
   25bf8:	mov	r4, r0
   25bfc:	movt	r7, #6
   25c00:	ldr	r5, [r7, #8]
   25c04:	cmp	r5, #0
   25c08:	bne	25c1c <__assert_fail@plt+0x131a0>
   25c0c:	b	25c2c <__assert_fail@plt+0x131b0>
   25c10:	ldr	r5, [r5, #4]
   25c14:	cmp	r5, #0
   25c18:	beq	25c2c <__assert_fail@plt+0x131b0>
   25c1c:	ldr	r0, [r5]
   25c20:	cmp	r0, r4
   25c24:	bne	25c10 <__assert_fail@plt+0x13194>
   25c28:	b	25c80 <__assert_fail@plt+0x13204>
   25c2c:	mov	r0, r4
   25c30:	bl	12a58 <getgrgid@plt>
   25c34:	cmp	r0, #0
   25c38:	beq	25c44 <__assert_fail@plt+0x131c8>
   25c3c:	ldr	r6, [r0]
   25c40:	b	25c4c <__assert_fail@plt+0x131d0>
   25c44:	movw	r6, #58175	; 0xe33f
   25c48:	movt	r6, #4
   25c4c:	mov	r0, r6
   25c50:	bl	12788 <strlen@plt>
   25c54:	add	r0, r0, #12
   25c58:	bic	r0, r0, #3
   25c5c:	bl	309ec <__assert_fail@plt+0x1df70>
   25c60:	mov	r5, r0
   25c64:	str	r4, [r0]
   25c68:	add	r0, r0, #8
   25c6c:	mov	r1, r6
   25c70:	bl	12638 <strcpy@plt>
   25c74:	ldr	r0, [r7, #8]
   25c78:	str	r5, [r7, #8]
   25c7c:	str	r0, [r5, #4]
   25c80:	ldrb	r0, [r5, #8]!
   25c84:	cmp	r0, #0
   25c88:	moveq	r5, r0
   25c8c:	mov	r0, r5
   25c90:	pop	{r4, r5, r6, r7, fp, pc}
   25c94:	push	{r4, r5, r6, r7, fp, lr}
   25c98:	add	fp, sp, #16
   25c9c:	movw	r7, #15604	; 0x3cf4
   25ca0:	mov	r4, r0
   25ca4:	movt	r7, #6
   25ca8:	ldr	r5, [r7, #8]
   25cac:	cmp	r5, #0
   25cb0:	beq	25ce4 <__assert_fail@plt+0x13268>
   25cb4:	ldrb	r6, [r4]
   25cb8:	mov	r0, r5
   25cbc:	ldrb	r1, [r0, #8]!
   25cc0:	cmp	r1, r6
   25cc4:	bne	25cd8 <__assert_fail@plt+0x1325c>
   25cc8:	mov	r1, r4
   25ccc:	bl	123d4 <strcmp@plt>
   25cd0:	cmp	r0, #0
   25cd4:	beq	25d80 <__assert_fail@plt+0x13304>
   25cd8:	ldr	r5, [r5, #4]
   25cdc:	cmp	r5, #0
   25ce0:	bne	25cb8 <__assert_fail@plt+0x1323c>
   25ce4:	ldr	r5, [r7, #12]
   25ce8:	cmp	r5, #0
   25cec:	beq	25d20 <__assert_fail@plt+0x132a4>
   25cf0:	ldrb	r6, [r4]
   25cf4:	mov	r0, r5
   25cf8:	ldrb	r1, [r0, #8]!
   25cfc:	cmp	r1, r6
   25d00:	bne	25d14 <__assert_fail@plt+0x13298>
   25d04:	mov	r1, r4
   25d08:	bl	123d4 <strcmp@plt>
   25d0c:	cmp	r0, #0
   25d10:	beq	25d7c <__assert_fail@plt+0x13300>
   25d14:	ldr	r5, [r5, #4]
   25d18:	cmp	r5, #0
   25d1c:	bne	25cf4 <__assert_fail@plt+0x13278>
   25d20:	mov	r0, r4
   25d24:	bl	12a64 <getgrnam@plt>
   25d28:	mov	r6, r0
   25d2c:	mov	r0, r4
   25d30:	bl	12788 <strlen@plt>
   25d34:	add	r0, r0, #12
   25d38:	bic	r0, r0, #3
   25d3c:	bl	309ec <__assert_fail@plt+0x1df70>
   25d40:	mov	r5, r0
   25d44:	add	r0, r0, #8
   25d48:	mov	r1, r4
   25d4c:	bl	12638 <strcpy@plt>
   25d50:	cmp	r6, #0
   25d54:	beq	25d70 <__assert_fail@plt+0x132f4>
   25d58:	ldr	r0, [r6, #8]
   25d5c:	ldr	r1, [r7, #8]
   25d60:	stm	r5, {r0, r1}
   25d64:	mov	r0, r5
   25d68:	str	r5, [r7, #8]
   25d6c:	pop	{r4, r5, r6, r7, fp, pc}
   25d70:	ldr	r0, [r7, #12]
   25d74:	str	r5, [r7, #12]
   25d78:	str	r0, [r5, #4]
   25d7c:	mov	r5, #0
   25d80:	mov	r0, r5
   25d84:	pop	{r4, r5, r6, r7, fp, pc}
   25d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d8c:	add	fp, sp, #28
   25d90:	sub	sp, sp, #308	; 0x134
   25d94:	mov	r5, r1
   25d98:	mov	r6, r0
   25d9c:	bl	12620 <__ctype_get_mb_cur_max@plt>
   25da0:	cmp	r0, #2
   25da4:	bcc	25df0 <__assert_fail@plt+0x13374>
   25da8:	mov	r4, #0
   25dac:	sub	r0, fp, #88	; 0x58
   25db0:	str	r4, [fp, #-80]	; 0xffffffb0
   25db4:	str	r4, [fp, #-84]	; 0xffffffac
   25db8:	strb	r4, [fp, #-88]	; 0xffffffa8
   25dbc:	str	r5, [fp, #-72]	; 0xffffffb8
   25dc0:	strb	r4, [fp, #-76]	; 0xffffffb4
   25dc4:	bl	26f70 <__assert_fail@plt+0x144f4>
   25dc8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   25dcc:	cmp	r0, #0
   25dd0:	beq	25f10 <__assert_fail@plt+0x13494>
   25dd4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   25dd8:	cmp	r0, #0
   25ddc:	bne	25f10 <__assert_fail@plt+0x13494>
   25de0:	mov	r4, r6
   25de4:	mov	r0, r4
   25de8:	sub	sp, fp, #28
   25dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25df0:	ldrb	r7, [r5]
   25df4:	cmp	r7, #0
   25df8:	beq	2627c <__assert_fail@plt+0x13800>
   25dfc:	ldrb	r9, [r6]
   25e00:	cmp	r9, #0
   25e04:	beq	2628c <__assert_fail@plt+0x13810>
   25e08:	mov	r3, #1
   25e0c:	mov	ip, #0
   25e10:	mov	lr, r5
   25e14:	mov	r8, #0
   25e18:	mov	sl, #0
   25e1c:	str	r7, [sp, #16]
   25e20:	add	r0, sl, sl, lsl #2
   25e24:	cmp	r8, r0
   25e28:	bcc	25eb8 <__assert_fail@plt+0x1343c>
   25e2c:	tst	r3, #1
   25e30:	beq	25eb8 <__assert_fail@plt+0x1343c>
   25e34:	cmp	sl, #10
   25e38:	bcc	25eb8 <__assert_fail@plt+0x1343c>
   25e3c:	cmp	lr, #0
   25e40:	str	r3, [sp, #20]
   25e44:	beq	25e78 <__assert_fail@plt+0x133fc>
   25e48:	sub	r1, r8, ip
   25e4c:	mov	r0, lr
   25e50:	mov	r7, lr
   25e54:	bl	12890 <strnlen@plt>
   25e58:	mov	lr, r7
   25e5c:	mov	ip, r8
   25e60:	ldrb	r0, [lr, r0]!
   25e64:	cmp	r0, #0
   25e68:	beq	25e78 <__assert_fail@plt+0x133fc>
   25e6c:	ldr	r3, [sp, #20]
   25e70:	mov	ip, r8
   25e74:	b	25eb4 <__assert_fail@plt+0x13438>
   25e78:	mov	r0, r5
   25e7c:	mov	r4, ip
   25e80:	bl	12788 <strlen@plt>
   25e84:	mov	r2, r0
   25e88:	mov	r0, r6
   25e8c:	mov	r1, r5
   25e90:	sub	r3, fp, #88	; 0x58
   25e94:	bl	2673c <__assert_fail@plt+0x13cc0>
   25e98:	cmp	r0, #0
   25e9c:	bne	262dc <__assert_fail@plt+0x13860>
   25ea0:	ldr	r3, [sp, #20]
   25ea4:	ldrb	r9, [r6]
   25ea8:	mov	lr, #0
   25eac:	mov	ip, r4
   25eb0:	and	r3, r3, r0
   25eb4:	ldr	r7, [sp, #16]
   25eb8:	uxtb	r0, r9
   25ebc:	cmp	r0, r7
   25ec0:	bne	25ef4 <__assert_fail@plt+0x13478>
   25ec4:	mov	r0, #1
   25ec8:	ldrb	r1, [r5, r0]
   25ecc:	cmp	r1, #0
   25ed0:	beq	2629c <__assert_fail@plt+0x13820>
   25ed4:	ldrb	r2, [r6, r0]
   25ed8:	cmp	r2, #0
   25edc:	beq	262ac <__assert_fail@plt+0x13830>
   25ee0:	add	r0, r0, #1
   25ee4:	cmp	r2, r1
   25ee8:	beq	25ec8 <__assert_fail@plt+0x1344c>
   25eec:	add	r8, r8, r0
   25ef0:	b	25ef8 <__assert_fail@plt+0x1347c>
   25ef4:	add	r8, r8, #1
   25ef8:	ldrb	r9, [r6, #1]!
   25efc:	add	sl, sl, #1
   25f00:	mov	r4, #0
   25f04:	cmp	r9, #0
   25f08:	bne	25e20 <__assert_fail@plt+0x133a4>
   25f0c:	b	26280 <__assert_fail@plt+0x13804>
   25f10:	add	r0, sp, #136	; 0x88
   25f14:	str	r4, [fp, #-136]	; 0xffffff78
   25f18:	str	r4, [fp, #-140]	; 0xffffff74
   25f1c:	strb	r4, [fp, #-144]	; 0xffffff70
   25f20:	str	r5, [fp, #-128]	; 0xffffff80
   25f24:	str	r4, [sp, #144]	; 0x90
   25f28:	str	r4, [sp, #140]	; 0x8c
   25f2c:	str	r6, [sp, #152]	; 0x98
   25f30:	strb	r4, [sp, #136]	; 0x88
   25f34:	str	r5, [sp, #16]
   25f38:	strb	r4, [fp, #-132]	; 0xffffff7c
   25f3c:	strb	r4, [sp, #148]	; 0x94
   25f40:	bl	26f70 <__assert_fail@plt+0x144f4>
   25f44:	ldrb	r0, [sp, #160]	; 0xa0
   25f48:	cmp	r0, #0
   25f4c:	beq	25f5c <__assert_fail@plt+0x134e0>
   25f50:	ldr	r0, [sp, #164]	; 0xa4
   25f54:	cmp	r0, #0
   25f58:	beq	26280 <__assert_fail@plt+0x13804>
   25f5c:	add	r0, sp, #24
   25f60:	mov	r8, #1
   25f64:	mov	sl, #0
   25f68:	sub	r5, fp, #144	; 0x90
   25f6c:	mov	r1, #0
   25f70:	mov	r7, #0
   25f74:	mov	r9, #0
   25f78:	add	r0, r0, #4
   25f7c:	str	r0, [sp, #12]
   25f80:	add	r0, sp, #136	; 0x88
   25f84:	add	r0, r0, #16
   25f88:	str	r0, [sp, #8]
   25f8c:	add	r0, r9, r9, lsl #2
   25f90:	mov	r4, r7
   25f94:	cmp	r7, r0
   25f98:	bcc	26040 <__assert_fail@plt+0x135c4>
   25f9c:	tst	r8, #1
   25fa0:	beq	26040 <__assert_fail@plt+0x135c4>
   25fa4:	cmp	r9, #10
   25fa8:	bcc	26040 <__assert_fail@plt+0x135c4>
   25fac:	subs	r0, r4, r1
   25fb0:	beq	25ff4 <__assert_fail@plt+0x13578>
   25fb4:	sub	r7, r1, r4
   25fb8:	mov	r0, r5
   25fbc:	bl	26f70 <__assert_fail@plt+0x144f4>
   25fc0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   25fc4:	cmp	r0, #0
   25fc8:	beq	25fd8 <__assert_fail@plt+0x1355c>
   25fcc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   25fd0:	cmp	r0, #0
   25fd4:	beq	25ff4 <__assert_fail@plt+0x13578>
   25fd8:	strb	sl, [fp, #-132]	; 0xffffff7c
   25fdc:	adds	r7, r7, #1
   25fe0:	ldr	r0, [fp, #-128]	; 0xffffff80
   25fe4:	ldr	r1, [fp, #-124]	; 0xffffff84
   25fe8:	add	r0, r0, r1
   25fec:	str	r0, [fp, #-128]	; 0xffffff80
   25ff0:	bne	25fb8 <__assert_fail@plt+0x1353c>
   25ff4:	mov	r0, r5
   25ff8:	bl	26f70 <__assert_fail@plt+0x144f4>
   25ffc:	ldrb	r0, [fp, #-120]	; 0xffffff88
   26000:	cmp	r0, #0
   26004:	beq	2603c <__assert_fail@plt+0x135c0>
   26008:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2600c:	mov	r1, r4
   26010:	cmp	r0, #0
   26014:	bne	26040 <__assert_fail@plt+0x135c4>
   26018:	ldr	r1, [sp, #16]
   2601c:	mov	r0, r6
   26020:	add	r2, sp, #80	; 0x50
   26024:	bl	26300 <__assert_fail@plt+0x13884>
   26028:	mov	r8, #0
   2602c:	cmp	r0, #0
   26030:	mov	r1, r4
   26034:	beq	26040 <__assert_fail@plt+0x135c4>
   26038:	b	262ec <__assert_fail@plt+0x13870>
   2603c:	mov	r1, r4
   26040:	ldrb	r0, [sp, #160]	; 0xa0
   26044:	add	r7, r4, #1
   26048:	str	r1, [sp, #20]
   2604c:	cmp	r0, #0
   26050:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   26054:	cmpne	r0, #0
   26058:	bne	26084 <__assert_fail@plt+0x13608>
   2605c:	ldr	r2, [sp, #156]	; 0x9c
   26060:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26064:	cmp	r2, r0
   26068:	bne	26238 <__assert_fail@plt+0x137bc>
   2606c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   26070:	ldr	r0, [sp, #152]	; 0x98
   26074:	bl	12518 <memcmp@plt>
   26078:	cmp	r0, #0
   2607c:	bne	26238 <__assert_fail@plt+0x137bc>
   26080:	b	26094 <__assert_fail@plt+0x13618>
   26084:	ldr	r0, [fp, #-60]	; 0xffffffc4
   26088:	ldr	r1, [sp, #164]	; 0xa4
   2608c:	cmp	r1, r0
   26090:	bne	26238 <__assert_fail@plt+0x137bc>
   26094:	add	r2, sp, #136	; 0x88
   26098:	mov	r1, #48	; 0x30
   2609c:	add	r3, sp, #80	; 0x50
   260a0:	str	r9, [sp]
   260a4:	str	r8, [sp, #4]
   260a8:	mov	r0, r2
   260ac:	add	r2, r2, #32
   260b0:	vld1.64	{d16-d17}, [r0], r1
   260b4:	ldr	r1, [sp, #8]
   260b8:	vld1.64	{d20-d21}, [r2]
   260bc:	vld1.64	{d18-d19}, [r1]
   260c0:	add	r1, r3, #16
   260c4:	vldr	d22, [r0]
   260c8:	add	r0, r3, #32
   260cc:	vst1.64	{d20-d21}, [r0]
   260d0:	mov	r0, r3
   260d4:	vst1.64	{d18-d19}, [r1]
   260d8:	mov	r1, #12
   260dc:	vst1.64	{d16-d17}, [r0], r1
   260e0:	strb	sl, [r0]
   260e4:	ldr	r0, [sp, #16]
   260e8:	vstr	d22, [sp, #128]	; 0x80
   260ec:	ldr	r1, [sp, #100]	; 0x64
   260f0:	str	r0, [sp, #40]	; 0x28
   260f4:	ldr	r0, [sp, #96]	; 0x60
   260f8:	strb	sl, [sp, #24]
   260fc:	add	r0, r0, r1
   26100:	str	r0, [sp, #96]	; 0x60
   26104:	ldr	r0, [sp, #12]
   26108:	str	sl, [r0]
   2610c:	str	sl, [r0, #4]
   26110:	add	r0, sp, #24
   26114:	strb	sl, [sp, #36]	; 0x24
   26118:	bl	26f70 <__assert_fail@plt+0x144f4>
   2611c:	ldrb	r0, [sp, #48]	; 0x30
   26120:	cmp	r0, #0
   26124:	beq	26134 <__assert_fail@plt+0x136b8>
   26128:	ldr	r0, [sp, #52]	; 0x34
   2612c:	cmp	r0, #0
   26130:	beq	262fc <__assert_fail@plt+0x13880>
   26134:	strb	sl, [sp, #36]	; 0x24
   26138:	ldr	r0, [sp, #40]	; 0x28
   2613c:	ldr	r1, [sp, #44]	; 0x2c
   26140:	add	r0, r0, r1
   26144:	str	r0, [sp, #40]	; 0x28
   26148:	add	r0, sp, #24
   2614c:	bl	26f70 <__assert_fail@plt+0x144f4>
   26150:	ldrb	r0, [sp, #48]	; 0x30
   26154:	cmp	r0, #0
   26158:	beq	26168 <__assert_fail@plt+0x136ec>
   2615c:	ldr	r0, [sp, #52]	; 0x34
   26160:	cmp	r0, #0
   26164:	beq	262bc <__assert_fail@plt+0x13840>
   26168:	add	r7, r4, #2
   2616c:	add	r0, sp, #80	; 0x50
   26170:	bl	26f70 <__assert_fail@plt+0x144f4>
   26174:	ldr	r0, [sp, #108]	; 0x6c
   26178:	ldrb	r1, [sp, #104]	; 0x68
   2617c:	cmp	r0, #0
   26180:	bne	2618c <__assert_fail@plt+0x13710>
   26184:	cmp	r1, #0
   26188:	bne	262cc <__assert_fail@plt+0x13850>
   2618c:	cmp	r1, #0
   26190:	ldrbne	r1, [sp, #48]	; 0x30
   26194:	cmpne	r1, #0
   26198:	bne	261d4 <__assert_fail@plt+0x13758>
   2619c:	ldr	r4, [sp, #100]	; 0x64
   261a0:	ldr	r0, [sp, #44]	; 0x2c
   261a4:	cmp	r4, r0
   261a8:	bne	26230 <__assert_fail@plt+0x137b4>
   261ac:	ldr	r8, [sp, #40]	; 0x28
   261b0:	ldr	r9, [sp, #96]	; 0x60
   261b4:	mov	r2, r4
   261b8:	mov	r0, r9
   261bc:	mov	r1, r8
   261c0:	bl	12518 <memcmp@plt>
   261c4:	cmp	r0, #0
   261c8:	mov	r0, r4
   261cc:	beq	261f0 <__assert_fail@plt+0x13774>
   261d0:	b	26230 <__assert_fail@plt+0x137b4>
   261d4:	ldr	r1, [sp, #52]	; 0x34
   261d8:	cmp	r0, r1
   261dc:	bne	26230 <__assert_fail@plt+0x137b4>
   261e0:	ldr	r8, [sp, #40]	; 0x28
   261e4:	ldr	r4, [sp, #44]	; 0x2c
   261e8:	ldr	r9, [sp, #96]	; 0x60
   261ec:	ldr	r0, [sp, #100]	; 0x64
   261f0:	add	r0, r9, r0
   261f4:	strb	sl, [sp, #92]	; 0x5c
   261f8:	strb	sl, [sp, #36]	; 0x24
   261fc:	str	r0, [sp, #96]	; 0x60
   26200:	add	r0, r8, r4
   26204:	str	r0, [sp, #40]	; 0x28
   26208:	add	r0, sp, #24
   2620c:	bl	26f70 <__assert_fail@plt+0x144f4>
   26210:	ldrb	r0, [sp, #48]	; 0x30
   26214:	add	r7, r7, #1
   26218:	cmp	r0, #0
   2621c:	beq	2616c <__assert_fail@plt+0x136f0>
   26220:	ldr	r0, [sp, #52]	; 0x34
   26224:	cmp	r0, #0
   26228:	bne	2616c <__assert_fail@plt+0x136f0>
   2622c:	b	262bc <__assert_fail@plt+0x13840>
   26230:	ldr	r8, [sp, #4]
   26234:	ldr	r9, [sp]
   26238:	mov	r4, #0
   2623c:	add	r9, r9, #1
   26240:	strb	r4, [sp, #148]	; 0x94
   26244:	ldr	r0, [sp, #152]	; 0x98
   26248:	ldr	r1, [sp, #156]	; 0x9c
   2624c:	add	r0, r0, r1
   26250:	str	r0, [sp, #152]	; 0x98
   26254:	add	r0, sp, #136	; 0x88
   26258:	bl	26f70 <__assert_fail@plt+0x144f4>
   2625c:	ldrb	r0, [sp, #160]	; 0xa0
   26260:	ldr	r1, [sp, #20]
   26264:	cmp	r0, #0
   26268:	beq	25f8c <__assert_fail@plt+0x13510>
   2626c:	ldr	r0, [sp, #164]	; 0xa4
   26270:	cmp	r0, #0
   26274:	bne	25f8c <__assert_fail@plt+0x13510>
   26278:	b	26280 <__assert_fail@plt+0x13804>
   2627c:	mov	r4, r6
   26280:	mov	r0, r4
   26284:	sub	sp, fp, #28
   26288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2628c:	mov	r4, #0
   26290:	mov	r0, r4
   26294:	sub	sp, fp, #28
   26298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2629c:	mov	r4, r6
   262a0:	mov	r0, r4
   262a4:	sub	sp, fp, #28
   262a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262ac:	mov	r4, #0
   262b0:	mov	r0, r4
   262b4:	sub	sp, fp, #28
   262b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262bc:	ldr	r4, [sp, #152]	; 0x98
   262c0:	mov	r0, r4
   262c4:	sub	sp, fp, #28
   262c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262cc:	mov	r4, #0
   262d0:	mov	r0, r4
   262d4:	sub	sp, fp, #28
   262d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262dc:	ldr	r4, [fp, #-88]	; 0xffffffa8
   262e0:	mov	r0, r4
   262e4:	sub	sp, fp, #28
   262e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262ec:	ldr	r4, [sp, #80]	; 0x50
   262f0:	mov	r0, r4
   262f4:	sub	sp, fp, #28
   262f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262fc:	bl	12a28 <abort@plt>
   26300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26304:	add	fp, sp, #28
   26308:	sub	sp, sp, #132	; 0x84
   2630c:	mov	r7, r0
   26310:	mov	r0, r1
   26314:	mov	r6, r2
   26318:	mov	r4, r1
   2631c:	bl	4bbd0 <__assert_fail@plt+0x39154>
   26320:	mov	sl, r0
   26324:	movw	r0, #47662	; 0xba2e
   26328:	mov	r5, #0
   2632c:	movt	r0, #744	; 0x2e8
   26330:	cmp	sl, r0
   26334:	bhi	26368 <__assert_fail@plt+0x138ec>
   26338:	mov	r0, #44	; 0x2c
   2633c:	mul	r0, sl, r0
   26340:	cmp	r0, #4016	; 0xfb0
   26344:	bhi	26374 <__assert_fail@plt+0x138f8>
   26348:	add	r0, r0, #22
   2634c:	bic	r0, r0, #7
   26350:	sub	r0, sp, r0
   26354:	add	r1, r0, #15
   26358:	bic	r9, r1, #15
   2635c:	mov	sp, r0
   26360:	cmp	r9, #0
   26364:	bne	26384 <__assert_fail@plt+0x13908>
   26368:	mov	r0, r5
   2636c:	sub	sp, fp, #28
   26370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26374:	bl	4ba88 <__assert_fail@plt+0x3900c>
   26378:	mov	r9, r0
   2637c:	cmp	r9, #0
   26380:	beq	26368 <__assert_fail@plt+0x138ec>
   26384:	str	r6, [fp, #-152]	; 0xffffff68
   26388:	mov	r6, #0
   2638c:	str	r7, [fp, #-156]	; 0xffffff64
   26390:	str	r6, [fp, #-80]	; 0xffffffb0
   26394:	str	r6, [fp, #-84]	; 0xffffffac
   26398:	strb	r6, [fp, #-88]	; 0xffffffa8
   2639c:	str	r4, [fp, #-72]	; 0xffffffb8
   263a0:	sub	r4, fp, #88	; 0x58
   263a4:	strb	r6, [fp, #-76]	; 0xffffffb4
   263a8:	mov	r0, r4
   263ac:	bl	26f70 <__assert_fail@plt+0x144f4>
   263b0:	add	r0, sl, sl, lsl #2
   263b4:	add	r8, r9, r0, lsl #3
   263b8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   263bc:	cmp	r0, #0
   263c0:	beq	263d0 <__assert_fail@plt+0x13954>
   263c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   263c8:	cmp	r0, #0
   263cc:	beq	26450 <__assert_fail@plt+0x139d4>
   263d0:	add	r7, r9, #16
   263d4:	add	r5, r4, #32
   263d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   263dc:	cmp	r0, r5
   263e0:	bne	263f8 <__assert_fail@plt+0x1397c>
   263e4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   263e8:	mov	r0, r7
   263ec:	mov	r1, r5
   263f0:	bl	124b8 <memcpy@plt>
   263f4:	mov	r0, r7
   263f8:	str	r0, [r7, #-16]
   263fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26400:	str	r0, [r7, #-12]
   26404:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   26408:	strb	r0, [r7, #-8]
   2640c:	cmp	r0, #0
   26410:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   26414:	strne	r0, [r7, #-4]
   26418:	strb	r6, [fp, #-76]	; 0xffffffb4
   2641c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26420:	ldr	r1, [fp, #-68]	; 0xffffffbc
   26424:	add	r0, r0, r1
   26428:	str	r0, [fp, #-72]	; 0xffffffb8
   2642c:	mov	r0, r4
   26430:	bl	26f70 <__assert_fail@plt+0x144f4>
   26434:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   26438:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2643c:	add	r7, r7, #40	; 0x28
   26440:	cmp	r1, #0
   26444:	beq	263d8 <__assert_fail@plt+0x1395c>
   26448:	cmp	r0, #0
   2644c:	bne	263d8 <__assert_fail@plt+0x1395c>
   26450:	mov	r0, #1
   26454:	cmp	sl, #3
   26458:	str	sl, [fp, #-148]	; 0xffffff6c
   2645c:	str	r0, [r8, #4]
   26460:	bcc	2655c <__assert_fail@plt+0x13ae0>
   26464:	mov	sl, #2
   26468:	mov	r7, #0
   2646c:	add	r0, sl, sl, lsl #2
   26470:	add	r0, r9, r0, lsl #3
   26474:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   26478:	sub	r6, r0, #40	; 0x28
   2647c:	sub	r4, r0, #36	; 0x24
   26480:	cmp	r1, #0
   26484:	beq	264f0 <__assert_fail@plt+0x13a74>
   26488:	sub	r5, r0, #28
   2648c:	b	26498 <__assert_fail@plt+0x13a1c>
   26490:	ldr	r0, [r8, r7, lsl #2]
   26494:	sub	r7, r7, r0
   26498:	add	r0, r7, r7, lsl #2
   2649c:	add	r1, r9, r0, lsl #3
   264a0:	ldrb	r2, [r1, #8]
   264a4:	cmp	r2, #0
   264a8:	beq	264c0 <__assert_fail@plt+0x13a44>
   264ac:	ldr	r0, [r1, #12]
   264b0:	ldr	r1, [r5]
   264b4:	cmp	r1, r0
   264b8:	bne	264e4 <__assert_fail@plt+0x13a68>
   264bc:	b	26540 <__assert_fail@plt+0x13ac4>
   264c0:	ldr	r1, [r1, #4]
   264c4:	ldr	r2, [r4]
   264c8:	cmp	r2, r1
   264cc:	bne	264e4 <__assert_fail@plt+0x13a68>
   264d0:	ldr	r1, [r9, r0, lsl #3]
   264d4:	ldr	r0, [r6]
   264d8:	bl	12518 <memcmp@plt>
   264dc:	cmp	r0, #0
   264e0:	beq	26540 <__assert_fail@plt+0x13ac4>
   264e4:	cmp	r7, #0
   264e8:	bne	26490 <__assert_fail@plt+0x13a14>
   264ec:	b	26534 <__assert_fail@plt+0x13ab8>
   264f0:	ldr	r4, [r4]
   264f4:	b	26500 <__assert_fail@plt+0x13a84>
   264f8:	ldr	r0, [r8, r7, lsl #2]
   264fc:	sub	r7, r7, r0
   26500:	add	r0, r7, r7, lsl #2
   26504:	add	r1, r9, r0, lsl #3
   26508:	ldr	r1, [r1, #4]
   2650c:	cmp	r4, r1
   26510:	bne	2652c <__assert_fail@plt+0x13ab0>
   26514:	ldr	r1, [r9, r0, lsl #3]
   26518:	ldr	r0, [r6]
   2651c:	mov	r2, r4
   26520:	bl	12518 <memcmp@plt>
   26524:	cmp	r0, #0
   26528:	beq	26540 <__assert_fail@plt+0x13ac4>
   2652c:	cmp	r7, #0
   26530:	bne	264f8 <__assert_fail@plt+0x13a7c>
   26534:	mov	r7, #0
   26538:	mov	r0, sl
   2653c:	b	26548 <__assert_fail@plt+0x13acc>
   26540:	add	r7, r7, #1
   26544:	sub	r0, sl, r7
   26548:	str	r0, [r8, sl, lsl #2]
   2654c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   26550:	add	sl, sl, #1
   26554:	cmp	sl, r0
   26558:	bne	2646c <__assert_fail@plt+0x139f0>
   2655c:	ldr	r0, [fp, #-152]	; 0xffffff68
   26560:	mov	r6, #0
   26564:	str	r6, [r0]
   26568:	ldr	r0, [fp, #-156]	; 0xffffff64
   2656c:	str	r6, [fp, #-80]	; 0xffffffb0
   26570:	str	r6, [fp, #-84]	; 0xffffffac
   26574:	strb	r6, [fp, #-88]	; 0xffffffa8
   26578:	str	r6, [fp, #-136]	; 0xffffff78
   2657c:	str	r6, [fp, #-140]	; 0xffffff74
   26580:	str	r0, [fp, #-72]	; 0xffffffb8
   26584:	str	r0, [fp, #-128]	; 0xffffff80
   26588:	sub	r0, fp, #144	; 0x90
   2658c:	strb	r6, [fp, #-144]	; 0xffffff70
   26590:	strb	r6, [fp, #-76]	; 0xffffffb4
   26594:	strb	r6, [fp, #-132]	; 0xffffff7c
   26598:	bl	26f70 <__assert_fail@plt+0x144f4>
   2659c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   265a0:	ldrb	r1, [fp, #-120]	; 0xffffff88
   265a4:	cmp	r0, #0
   265a8:	bne	265b4 <__assert_fail@plt+0x13b38>
   265ac:	cmp	r1, #0
   265b0:	bne	26720 <__assert_fail@plt+0x13ca4>
   265b4:	clz	r1, r1
   265b8:	sub	r4, fp, #88	; 0x58
   265bc:	mov	sl, #0
   265c0:	lsr	r1, r1, #5
   265c4:	add	r2, sl, sl, lsl #2
   265c8:	tst	r1, #1
   265cc:	add	r3, r9, r2, lsl #3
   265d0:	bne	265f8 <__assert_fail@plt+0x13b7c>
   265d4:	ldrb	r1, [r3, #8]
   265d8:	cmp	r1, #0
   265dc:	beq	265f8 <__assert_fail@plt+0x13b7c>
   265e0:	ldr	r1, [r3, #12]
   265e4:	cmp	r1, r0
   265e8:	bne	26624 <__assert_fail@plt+0x13ba8>
   265ec:	ldr	r7, [fp, #-128]	; 0xffffff80
   265f0:	ldr	r5, [fp, #-124]	; 0xffffff84
   265f4:	b	2667c <__assert_fail@plt+0x13c00>
   265f8:	ldr	r5, [r3, #4]
   265fc:	ldr	r0, [fp, #-124]	; 0xffffff84
   26600:	cmp	r5, r0
   26604:	bne	26624 <__assert_fail@plt+0x13ba8>
   26608:	ldr	r7, [fp, #-128]	; 0xffffff80
   2660c:	ldr	r0, [r9, r2, lsl #3]
   26610:	mov	r2, r5
   26614:	mov	r1, r7
   26618:	bl	12518 <memcmp@plt>
   2661c:	cmp	r0, #0
   26620:	beq	2667c <__assert_fail@plt+0x13c00>
   26624:	cmp	sl, #0
   26628:	beq	2669c <__assert_fail@plt+0x13c20>
   2662c:	ldr	r5, [r8, sl, lsl #2]
   26630:	sub	sl, sl, r5
   26634:	cmp	r5, #0
   26638:	beq	266e8 <__assert_fail@plt+0x13c6c>
   2663c:	mov	r0, r4
   26640:	bl	26f70 <__assert_fail@plt+0x144f4>
   26644:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   26648:	cmp	r0, #0
   2664c:	beq	2665c <__assert_fail@plt+0x13be0>
   26650:	ldr	r0, [fp, #-60]	; 0xffffffc4
   26654:	cmp	r0, #0
   26658:	beq	26738 <__assert_fail@plt+0x13cbc>
   2665c:	strb	r6, [fp, #-76]	; 0xffffffb4
   26660:	subs	r5, r5, #1
   26664:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26668:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2666c:	add	r0, r0, r1
   26670:	str	r0, [fp, #-72]	; 0xffffffb8
   26674:	bne	2663c <__assert_fail@plt+0x13bc0>
   26678:	b	266e8 <__assert_fail@plt+0x13c6c>
   2667c:	add	r0, r7, r5
   26680:	strb	r6, [fp, #-132]	; 0xffffff7c
   26684:	add	sl, sl, #1
   26688:	str	r0, [fp, #-128]	; 0xffffff80
   2668c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   26690:	cmp	sl, r0
   26694:	bne	266e8 <__assert_fail@plt+0x13c6c>
   26698:	b	26714 <__assert_fail@plt+0x13c98>
   2669c:	mov	r0, r4
   266a0:	bl	26f70 <__assert_fail@plt+0x144f4>
   266a4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   266a8:	cmp	r0, #0
   266ac:	beq	266bc <__assert_fail@plt+0x13c40>
   266b0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   266b4:	cmp	r0, #0
   266b8:	beq	26738 <__assert_fail@plt+0x13cbc>
   266bc:	mov	sl, #0
   266c0:	strb	sl, [fp, #-76]	; 0xffffffb4
   266c4:	strb	sl, [fp, #-132]	; 0xffffff7c
   266c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   266cc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   266d0:	add	r0, r0, r1
   266d4:	ldr	r1, [fp, #-124]	; 0xffffff84
   266d8:	str	r0, [fp, #-72]	; 0xffffffb8
   266dc:	ldr	r0, [fp, #-128]	; 0xffffff80
   266e0:	add	r0, r0, r1
   266e4:	str	r0, [fp, #-128]	; 0xffffff80
   266e8:	sub	r0, fp, #144	; 0x90
   266ec:	bl	26f70 <__assert_fail@plt+0x144f4>
   266f0:	ldrb	r2, [fp, #-120]	; 0xffffff88
   266f4:	clz	r0, r2
   266f8:	lsr	r1, r0, #5
   266fc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   26700:	cmp	r0, #0
   26704:	bne	265c4 <__assert_fail@plt+0x13b48>
   26708:	cmp	r2, #0
   2670c:	beq	265c4 <__assert_fail@plt+0x13b48>
   26710:	b	26720 <__assert_fail@plt+0x13ca4>
   26714:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26718:	ldr	r1, [fp, #-152]	; 0xffffff68
   2671c:	str	r0, [r1]
   26720:	mov	r0, r9
   26724:	bl	4baf8 <__assert_fail@plt+0x3907c>
   26728:	mov	r5, #1
   2672c:	mov	r0, r5
   26730:	sub	sp, fp, #28
   26734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26738:	bl	12a28 <abort@plt>
   2673c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   26740:	add	fp, sp, #24
   26744:	mov	r4, #0
   26748:	cmn	r2, #-536870911	; 0xe0000001
   2674c:	bhi	268a0 <__assert_fail@plt+0x13e24>
   26750:	mov	r7, r0
   26754:	lsl	r0, r2, #2
   26758:	mov	r8, r3
   2675c:	mov	r5, r2
   26760:	mov	r6, r1
   26764:	cmp	r0, #4016	; 0xfb0
   26768:	bhi	26894 <__assert_fail@plt+0x13e18>
   2676c:	add	r0, r0, #22
   26770:	bic	r0, r0, #7
   26774:	sub	r1, sp, r0
   26778:	add	r0, r1, #15
   2677c:	bic	r0, r0, #15
   26780:	mov	sp, r1
   26784:	cmp	r0, #0
   26788:	beq	268a0 <__assert_fail@plt+0x13e24>
   2678c:	mov	r1, #1
   26790:	cmp	r5, #3
   26794:	str	r1, [r0, #4]
   26798:	bcc	2680c <__assert_fail@plt+0x13d90>
   2679c:	mov	r1, #2
   267a0:	mov	r2, #0
   267a4:	add	r3, r6, r1
   267a8:	ldrb	r4, [r6, r2]
   267ac:	ldrb	r3, [r3, #-1]
   267b0:	cmp	r3, r4
   267b4:	bne	267d0 <__assert_fail@plt+0x13d54>
   267b8:	b	267f4 <__assert_fail@plt+0x13d78>
   267bc:	ldr	r4, [r0, r2, lsl #2]
   267c0:	sub	r2, r2, r4
   267c4:	ldrb	r4, [r6, r2]
   267c8:	cmp	r3, r4
   267cc:	beq	267f4 <__assert_fail@plt+0x13d78>
   267d0:	cmp	r2, #0
   267d4:	bne	267bc <__assert_fail@plt+0x13d40>
   267d8:	mov	r2, #0
   267dc:	mov	r3, r1
   267e0:	str	r3, [r0, r1, lsl #2]
   267e4:	add	r1, r1, #1
   267e8:	cmp	r1, r5
   267ec:	bne	267a4 <__assert_fail@plt+0x13d28>
   267f0:	b	2680c <__assert_fail@plt+0x13d90>
   267f4:	add	r2, r2, #1
   267f8:	sub	r3, r1, r2
   267fc:	str	r3, [r0, r1, lsl #2]
   26800:	add	r1, r1, #1
   26804:	cmp	r1, r5
   26808:	bne	267a4 <__assert_fail@plt+0x13d28>
   2680c:	mov	r1, #0
   26810:	str	r1, [r8]
   26814:	ldrb	r3, [r7]
   26818:	cmp	r3, #0
   2681c:	beq	268b0 <__assert_fail@plt+0x13e34>
   26820:	mov	r2, r7
   26824:	ldrb	r4, [r6, r1]
   26828:	uxtb	r3, r3
   2682c:	cmp	r4, r3
   26830:	bne	26854 <__assert_fail@plt+0x13dd8>
   26834:	add	r1, r1, #1
   26838:	cmp	r1, r5
   2683c:	beq	268ac <__assert_fail@plt+0x13e30>
   26840:	add	r7, r7, #1
   26844:	ldrb	r3, [r7]
   26848:	cmp	r3, #0
   2684c:	bne	26824 <__assert_fail@plt+0x13da8>
   26850:	b	268b0 <__assert_fail@plt+0x13e34>
   26854:	cmp	r1, #0
   26858:	beq	26878 <__assert_fail@plt+0x13dfc>
   2685c:	ldr	r3, [r0, r1, lsl #2]
   26860:	sub	r1, r1, r3
   26864:	add	r2, r2, r3
   26868:	ldrb	r3, [r7]
   2686c:	cmp	r3, #0
   26870:	bne	26824 <__assert_fail@plt+0x13da8>
   26874:	b	268b0 <__assert_fail@plt+0x13e34>
   26878:	add	r7, r7, #1
   2687c:	add	r2, r2, #1
   26880:	mov	r1, #0
   26884:	ldrb	r3, [r7]
   26888:	cmp	r3, #0
   2688c:	bne	26824 <__assert_fail@plt+0x13da8>
   26890:	b	268b0 <__assert_fail@plt+0x13e34>
   26894:	bl	4ba88 <__assert_fail@plt+0x3900c>
   26898:	cmp	r0, #0
   2689c:	bne	2678c <__assert_fail@plt+0x13d10>
   268a0:	mov	r0, r4
   268a4:	sub	sp, fp, #24
   268a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   268ac:	str	r2, [r8]
   268b0:	bl	4baf8 <__assert_fail@plt+0x3907c>
   268b4:	mov	r4, #1
   268b8:	mov	r0, r4
   268bc:	sub	sp, fp, #24
   268c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   268c4:	push	{r4, r5, fp, lr}
   268c8:	add	fp, sp, #8
   268cc:	mov	r4, r1
   268d0:	mov	r5, r0
   268d4:	bl	12788 <strlen@plt>
   268d8:	mov	r1, r0
   268dc:	mov	r0, r5
   268e0:	mov	r2, r4
   268e4:	pop	{r4, r5, fp, lr}
   268e8:	b	268ec <__assert_fail@plt+0x13e70>
   268ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   268f0:	add	fp, sp, #28
   268f4:	sub	sp, sp, #20
   268f8:	mov	r4, r2
   268fc:	mov	r6, r1
   26900:	mov	r5, r0
   26904:	add	r7, r0, r1
   26908:	bl	12620 <__ctype_get_mb_cur_max@plt>
   2690c:	cmp	r0, #1
   26910:	bls	26bf8 <__assert_fail@plt+0x1417c>
   26914:	cmp	r6, #1
   26918:	blt	26cb0 <__assert_fail@plt+0x14234>
   2691c:	and	sl, r4, #1
   26920:	mov	r3, #0
   26924:	add	r8, sp, #4
   26928:	add	r9, sp, #8
   2692c:	tst	r4, #2
   26930:	eor	r2, sl, #1
   26934:	bne	26cc0 <__assert_fail@plt+0x14244>
   26938:	mov	r4, #0
   2693c:	ldrb	r0, [r5]
   26940:	sub	r0, r0, #32
   26944:	cmp	r0, #94	; 0x5e
   26948:	bhi	26ae4 <__assert_fail@plt+0x14068>
   2694c:	add	r1, pc, #0
   26950:	ldr	pc, [r1, r0, lsl #2]
   26954:	ldrdeq	r6, [r2], -r0
   26958:	ldrdeq	r6, [r2], -r0
   2695c:	ldrdeq	r6, [r2], -r0
   26960:	ldrdeq	r6, [r2], -r0
   26964:	andeq	r6, r2, r4, ror #21
   26968:	ldrdeq	r6, [r2], -r0
   2696c:	ldrdeq	r6, [r2], -r0
   26970:	ldrdeq	r6, [r2], -r0
   26974:	ldrdeq	r6, [r2], -r0
   26978:	ldrdeq	r6, [r2], -r0
   2697c:	ldrdeq	r6, [r2], -r0
   26980:	ldrdeq	r6, [r2], -r0
   26984:	ldrdeq	r6, [r2], -r0
   26988:	ldrdeq	r6, [r2], -r0
   2698c:	ldrdeq	r6, [r2], -r0
   26990:	ldrdeq	r6, [r2], -r0
   26994:	ldrdeq	r6, [r2], -r0
   26998:	ldrdeq	r6, [r2], -r0
   2699c:	ldrdeq	r6, [r2], -r0
   269a0:	ldrdeq	r6, [r2], -r0
   269a4:	ldrdeq	r6, [r2], -r0
   269a8:	ldrdeq	r6, [r2], -r0
   269ac:	ldrdeq	r6, [r2], -r0
   269b0:	ldrdeq	r6, [r2], -r0
   269b4:	ldrdeq	r6, [r2], -r0
   269b8:	ldrdeq	r6, [r2], -r0
   269bc:	ldrdeq	r6, [r2], -r0
   269c0:	ldrdeq	r6, [r2], -r0
   269c4:	ldrdeq	r6, [r2], -r0
   269c8:	ldrdeq	r6, [r2], -r0
   269cc:	ldrdeq	r6, [r2], -r0
   269d0:	ldrdeq	r6, [r2], -r0
   269d4:	andeq	r6, r2, r4, ror #21
   269d8:	ldrdeq	r6, [r2], -r0
   269dc:	ldrdeq	r6, [r2], -r0
   269e0:	ldrdeq	r6, [r2], -r0
   269e4:	ldrdeq	r6, [r2], -r0
   269e8:	ldrdeq	r6, [r2], -r0
   269ec:	ldrdeq	r6, [r2], -r0
   269f0:	ldrdeq	r6, [r2], -r0
   269f4:	ldrdeq	r6, [r2], -r0
   269f8:	ldrdeq	r6, [r2], -r0
   269fc:	ldrdeq	r6, [r2], -r0
   26a00:	ldrdeq	r6, [r2], -r0
   26a04:	ldrdeq	r6, [r2], -r0
   26a08:	ldrdeq	r6, [r2], -r0
   26a0c:	ldrdeq	r6, [r2], -r0
   26a10:	ldrdeq	r6, [r2], -r0
   26a14:	ldrdeq	r6, [r2], -r0
   26a18:	ldrdeq	r6, [r2], -r0
   26a1c:	ldrdeq	r6, [r2], -r0
   26a20:	ldrdeq	r6, [r2], -r0
   26a24:	ldrdeq	r6, [r2], -r0
   26a28:	ldrdeq	r6, [r2], -r0
   26a2c:	ldrdeq	r6, [r2], -r0
   26a30:	ldrdeq	r6, [r2], -r0
   26a34:	ldrdeq	r6, [r2], -r0
   26a38:	ldrdeq	r6, [r2], -r0
   26a3c:	ldrdeq	r6, [r2], -r0
   26a40:	ldrdeq	r6, [r2], -r0
   26a44:	ldrdeq	r6, [r2], -r0
   26a48:	ldrdeq	r6, [r2], -r0
   26a4c:	ldrdeq	r6, [r2], -r0
   26a50:	ldrdeq	r6, [r2], -r0
   26a54:	andeq	r6, r2, r4, ror #21
   26a58:	ldrdeq	r6, [r2], -r0
   26a5c:	ldrdeq	r6, [r2], -r0
   26a60:	ldrdeq	r6, [r2], -r0
   26a64:	ldrdeq	r6, [r2], -r0
   26a68:	ldrdeq	r6, [r2], -r0
   26a6c:	ldrdeq	r6, [r2], -r0
   26a70:	ldrdeq	r6, [r2], -r0
   26a74:	ldrdeq	r6, [r2], -r0
   26a78:	ldrdeq	r6, [r2], -r0
   26a7c:	ldrdeq	r6, [r2], -r0
   26a80:	ldrdeq	r6, [r2], -r0
   26a84:	ldrdeq	r6, [r2], -r0
   26a88:	ldrdeq	r6, [r2], -r0
   26a8c:	ldrdeq	r6, [r2], -r0
   26a90:	ldrdeq	r6, [r2], -r0
   26a94:	ldrdeq	r6, [r2], -r0
   26a98:	ldrdeq	r6, [r2], -r0
   26a9c:	ldrdeq	r6, [r2], -r0
   26aa0:	ldrdeq	r6, [r2], -r0
   26aa4:	ldrdeq	r6, [r2], -r0
   26aa8:	ldrdeq	r6, [r2], -r0
   26aac:	ldrdeq	r6, [r2], -r0
   26ab0:	ldrdeq	r6, [r2], -r0
   26ab4:	ldrdeq	r6, [r2], -r0
   26ab8:	ldrdeq	r6, [r2], -r0
   26abc:	ldrdeq	r6, [r2], -r0
   26ac0:	ldrdeq	r6, [r2], -r0
   26ac4:	ldrdeq	r6, [r2], -r0
   26ac8:	ldrdeq	r6, [r2], -r0
   26acc:	ldrdeq	r6, [r2], -r0
   26ad0:	add	r4, r4, #1
   26ad4:	add	r5, r5, #1
   26ad8:	cmp	r5, r7
   26adc:	bcc	2693c <__assert_fail@plt+0x13ec0>
   26ae0:	b	26f64 <__assert_fail@plt+0x144e8>
   26ae4:	str	r2, [sp]
   26ae8:	str	r3, [sp, #12]
   26aec:	str	r3, [sp, #8]
   26af0:	sub	r2, r7, r5
   26af4:	mov	r0, r8
   26af8:	mov	r1, r5
   26afc:	mov	r3, r9
   26b00:	mov	r6, r5
   26b04:	bl	35638 <__assert_fail@plt+0x22bbc>
   26b08:	cmp	r0, #0
   26b0c:	beq	26b4c <__assert_fail@plt+0x140d0>
   26b10:	mov	r5, r0
   26b14:	cmn	r0, #2
   26b18:	beq	26b9c <__assert_fail@plt+0x14120>
   26b1c:	cmn	r5, #1
   26b20:	beq	26bb8 <__assert_fail@plt+0x1413c>
   26b24:	ldr	r0, [sp, #4]
   26b28:	bl	12434 <wcwidth@plt>
   26b2c:	cmn	r0, #1
   26b30:	ble	26b60 <__assert_fail@plt+0x140e4>
   26b34:	mvn	r1, #-2147483648	; 0x80000000
   26b38:	sub	r1, r1, r4
   26b3c:	cmp	r0, r1
   26b40:	bgt	26b94 <__assert_fail@plt+0x14118>
   26b44:	add	r4, r0, r4
   26b48:	b	26b7c <__assert_fail@plt+0x14100>
   26b4c:	mov	r5, #1
   26b50:	ldr	r0, [sp, #4]
   26b54:	bl	12434 <wcwidth@plt>
   26b58:	cmn	r0, #1
   26b5c:	bgt	26b34 <__assert_fail@plt+0x140b8>
   26b60:	ldr	r0, [sp, #4]
   26b64:	bl	1259c <iswcntrl@plt>
   26b68:	cmp	r0, #0
   26b6c:	bne	26b7c <__assert_fail@plt+0x14100>
   26b70:	cmn	r4, #-2147483647	; 0x80000001
   26b74:	beq	26b94 <__assert_fail@plt+0x14118>
   26b78:	add	r4, r4, #1
   26b7c:	mov	r0, r9
   26b80:	add	r5, r6, r5
   26b84:	bl	124f4 <mbsinit@plt>
   26b88:	cmp	r0, #0
   26b8c:	beq	26af0 <__assert_fail@plt+0x14074>
   26b90:	b	26bcc <__assert_fail@plt+0x14150>
   26b94:	mov	r0, #7
   26b98:	b	26be0 <__assert_fail@plt+0x14164>
   26b9c:	ldr	r0, [sp]
   26ba0:	cmp	sl, #0
   26ba4:	mov	r5, r7
   26ba8:	add	r4, r4, r0
   26bac:	mov	r0, #1
   26bb0:	beq	26bcc <__assert_fail@plt+0x14150>
   26bb4:	b	26be0 <__assert_fail@plt+0x14164>
   26bb8:	mov	r0, #1
   26bbc:	cmp	sl, #0
   26bc0:	bne	26be0 <__assert_fail@plt+0x14164>
   26bc4:	add	r4, r4, #1
   26bc8:	add	r5, r6, #1
   26bcc:	ldr	r2, [sp]
   26bd0:	mov	r3, #0
   26bd4:	cmp	r5, r7
   26bd8:	bcc	2693c <__assert_fail@plt+0x13ec0>
   26bdc:	b	26f64 <__assert_fail@plt+0x144e8>
   26be0:	ldr	r2, [sp]
   26be4:	cmp	r0, #0
   26be8:	mov	r5, r6
   26bec:	mov	r3, #0
   26bf0:	beq	26ad8 <__assert_fail@plt+0x1405c>
   26bf4:	b	26c4c <__assert_fail@plt+0x141d0>
   26bf8:	tst	r4, #2
   26bfc:	bne	26c54 <__assert_fail@plt+0x141d8>
   26c00:	mov	r4, #0
   26c04:	cmp	r5, r7
   26c08:	bcs	26f64 <__assert_fail@plt+0x144e8>
   26c0c:	ldrb	r6, [r5], #1
   26c10:	bl	12740 <__ctype_b_loc@plt>
   26c14:	ldr	r0, [r0]
   26c18:	add	r0, r0, r6, lsl #1
   26c1c:	ldrh	r1, [r0]
   26c20:	tst	r1, #16384	; 0x4000
   26c24:	bne	26c34 <__assert_fail@plt+0x141b8>
   26c28:	mov	r0, #0
   26c2c:	tst	r1, #2
   26c30:	bne	26c44 <__assert_fail@plt+0x141c8>
   26c34:	cmn	r4, #-2147483647	; 0x80000001
   26c38:	mov	r0, #0
   26c3c:	mvneq	r0, #0
   26c40:	addne	r4, r4, #1
   26c44:	ands	r0, r0, #7
   26c48:	beq	26c04 <__assert_fail@plt+0x14188>
   26c4c:	mvn	r4, #0
   26c50:	b	26c9c <__assert_fail@plt+0x14220>
   26c54:	mov	r6, #0
   26c58:	cmp	r5, r7
   26c5c:	bcs	26f60 <__assert_fail@plt+0x144e4>
   26c60:	ldrb	r4, [r5]
   26c64:	bl	12740 <__ctype_b_loc@plt>
   26c68:	ldr	r0, [r0]
   26c6c:	add	r0, r0, r4, lsl #1
   26c70:	mvn	r4, #0
   26c74:	ldrb	r0, [r0, #1]
   26c78:	tst	r0, #64	; 0x40
   26c7c:	beq	26f64 <__assert_fail@plt+0x144e8>
   26c80:	cmn	r6, #-2147483647	; 0x80000001
   26c84:	mov	r0, #0
   26c88:	add	r5, r5, #1
   26c8c:	movweq	r0, #7
   26c90:	addne	r6, r6, #1
   26c94:	cmp	r0, #0
   26c98:	beq	26c58 <__assert_fail@plt+0x141dc>
   26c9c:	cmp	r0, #7
   26ca0:	mvneq	r4, #-2147483648	; 0x80000000
   26ca4:	mov	r0, r4
   26ca8:	sub	sp, fp, #28
   26cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26cb0:	mov	r4, #0
   26cb4:	mov	r0, r4
   26cb8:	sub	sp, fp, #28
   26cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26cc0:	mov	r4, #0
   26cc4:	ldrb	r0, [r5]
   26cc8:	sub	r0, r0, #32
   26ccc:	cmp	r0, #94	; 0x5e
   26cd0:	bhi	26e6c <__assert_fail@plt+0x143f0>
   26cd4:	add	r1, pc, #0
   26cd8:	ldr	pc, [r1, r0, lsl #2]
   26cdc:	andeq	r6, r2, r8, asr lr
   26ce0:	andeq	r6, r2, r8, asr lr
   26ce4:	andeq	r6, r2, r8, asr lr
   26ce8:	andeq	r6, r2, r8, asr lr
   26cec:	andeq	r6, r2, ip, ror #28
   26cf0:	andeq	r6, r2, r8, asr lr
   26cf4:	andeq	r6, r2, r8, asr lr
   26cf8:	andeq	r6, r2, r8, asr lr
   26cfc:	andeq	r6, r2, r8, asr lr
   26d00:	andeq	r6, r2, r8, asr lr
   26d04:	andeq	r6, r2, r8, asr lr
   26d08:	andeq	r6, r2, r8, asr lr
   26d0c:	andeq	r6, r2, r8, asr lr
   26d10:	andeq	r6, r2, r8, asr lr
   26d14:	andeq	r6, r2, r8, asr lr
   26d18:	andeq	r6, r2, r8, asr lr
   26d1c:	andeq	r6, r2, r8, asr lr
   26d20:	andeq	r6, r2, r8, asr lr
   26d24:	andeq	r6, r2, r8, asr lr
   26d28:	andeq	r6, r2, r8, asr lr
   26d2c:	andeq	r6, r2, r8, asr lr
   26d30:	andeq	r6, r2, r8, asr lr
   26d34:	andeq	r6, r2, r8, asr lr
   26d38:	andeq	r6, r2, r8, asr lr
   26d3c:	andeq	r6, r2, r8, asr lr
   26d40:	andeq	r6, r2, r8, asr lr
   26d44:	andeq	r6, r2, r8, asr lr
   26d48:	andeq	r6, r2, r8, asr lr
   26d4c:	andeq	r6, r2, r8, asr lr
   26d50:	andeq	r6, r2, r8, asr lr
   26d54:	andeq	r6, r2, r8, asr lr
   26d58:	andeq	r6, r2, r8, asr lr
   26d5c:	andeq	r6, r2, ip, ror #28
   26d60:	andeq	r6, r2, r8, asr lr
   26d64:	andeq	r6, r2, r8, asr lr
   26d68:	andeq	r6, r2, r8, asr lr
   26d6c:	andeq	r6, r2, r8, asr lr
   26d70:	andeq	r6, r2, r8, asr lr
   26d74:	andeq	r6, r2, r8, asr lr
   26d78:	andeq	r6, r2, r8, asr lr
   26d7c:	andeq	r6, r2, r8, asr lr
   26d80:	andeq	r6, r2, r8, asr lr
   26d84:	andeq	r6, r2, r8, asr lr
   26d88:	andeq	r6, r2, r8, asr lr
   26d8c:	andeq	r6, r2, r8, asr lr
   26d90:	andeq	r6, r2, r8, asr lr
   26d94:	andeq	r6, r2, r8, asr lr
   26d98:	andeq	r6, r2, r8, asr lr
   26d9c:	andeq	r6, r2, r8, asr lr
   26da0:	andeq	r6, r2, r8, asr lr
   26da4:	andeq	r6, r2, r8, asr lr
   26da8:	andeq	r6, r2, r8, asr lr
   26dac:	andeq	r6, r2, r8, asr lr
   26db0:	andeq	r6, r2, r8, asr lr
   26db4:	andeq	r6, r2, r8, asr lr
   26db8:	andeq	r6, r2, r8, asr lr
   26dbc:	andeq	r6, r2, r8, asr lr
   26dc0:	andeq	r6, r2, r8, asr lr
   26dc4:	andeq	r6, r2, r8, asr lr
   26dc8:	andeq	r6, r2, r8, asr lr
   26dcc:	andeq	r6, r2, r8, asr lr
   26dd0:	andeq	r6, r2, r8, asr lr
   26dd4:	andeq	r6, r2, r8, asr lr
   26dd8:	andeq	r6, r2, r8, asr lr
   26ddc:	andeq	r6, r2, ip, ror #28
   26de0:	andeq	r6, r2, r8, asr lr
   26de4:	andeq	r6, r2, r8, asr lr
   26de8:	andeq	r6, r2, r8, asr lr
   26dec:	andeq	r6, r2, r8, asr lr
   26df0:	andeq	r6, r2, r8, asr lr
   26df4:	andeq	r6, r2, r8, asr lr
   26df8:	andeq	r6, r2, r8, asr lr
   26dfc:	andeq	r6, r2, r8, asr lr
   26e00:	andeq	r6, r2, r8, asr lr
   26e04:	andeq	r6, r2, r8, asr lr
   26e08:	andeq	r6, r2, r8, asr lr
   26e0c:	andeq	r6, r2, r8, asr lr
   26e10:	andeq	r6, r2, r8, asr lr
   26e14:	andeq	r6, r2, r8, asr lr
   26e18:	andeq	r6, r2, r8, asr lr
   26e1c:	andeq	r6, r2, r8, asr lr
   26e20:	andeq	r6, r2, r8, asr lr
   26e24:	andeq	r6, r2, r8, asr lr
   26e28:	andeq	r6, r2, r8, asr lr
   26e2c:	andeq	r6, r2, r8, asr lr
   26e30:	andeq	r6, r2, r8, asr lr
   26e34:	andeq	r6, r2, r8, asr lr
   26e38:	andeq	r6, r2, r8, asr lr
   26e3c:	andeq	r6, r2, r8, asr lr
   26e40:	andeq	r6, r2, r8, asr lr
   26e44:	andeq	r6, r2, r8, asr lr
   26e48:	andeq	r6, r2, r8, asr lr
   26e4c:	andeq	r6, r2, r8, asr lr
   26e50:	andeq	r6, r2, r8, asr lr
   26e54:	andeq	r6, r2, r8, asr lr
   26e58:	add	r4, r4, #1
   26e5c:	add	r5, r5, #1
   26e60:	cmp	r5, r7
   26e64:	bcc	26cc4 <__assert_fail@plt+0x14248>
   26e68:	b	26f64 <__assert_fail@plt+0x144e8>
   26e6c:	mov	r6, r5
   26e70:	str	r2, [sp]
   26e74:	str	r3, [sp, #12]
   26e78:	str	r3, [sp, #8]
   26e7c:	sub	r2, r7, r6
   26e80:	mov	r0, r8
   26e84:	mov	r1, r6
   26e88:	mov	r3, r9
   26e8c:	bl	35638 <__assert_fail@plt+0x22bbc>
   26e90:	cmp	r0, #0
   26e94:	beq	26eb0 <__assert_fail@plt+0x14434>
   26e98:	mov	r5, r0
   26e9c:	cmn	r0, #2
   26ea0:	beq	26f04 <__assert_fail@plt+0x14488>
   26ea4:	cmn	r5, #1
   26ea8:	bne	26eb4 <__assert_fail@plt+0x14438>
   26eac:	b	26f20 <__assert_fail@plt+0x144a4>
   26eb0:	mov	r5, #1
   26eb4:	ldr	r0, [sp, #4]
   26eb8:	bl	12434 <wcwidth@plt>
   26ebc:	cmp	r0, #0
   26ec0:	blt	26ef4 <__assert_fail@plt+0x14478>
   26ec4:	mvn	r1, #-2147483648	; 0x80000000
   26ec8:	sub	r1, r1, r4
   26ecc:	cmp	r0, r1
   26ed0:	bgt	26efc <__assert_fail@plt+0x14480>
   26ed4:	add	r4, r0, r4
   26ed8:	mov	r0, r9
   26edc:	add	r6, r6, r5
   26ee0:	bl	124f4 <mbsinit@plt>
   26ee4:	cmp	r0, #0
   26ee8:	mov	r5, r6
   26eec:	beq	26e7c <__assert_fail@plt+0x14400>
   26ef0:	b	26f34 <__assert_fail@plt+0x144b8>
   26ef4:	mov	r0, #1
   26ef8:	b	26f48 <__assert_fail@plt+0x144cc>
   26efc:	mov	r0, #7
   26f00:	b	26f48 <__assert_fail@plt+0x144cc>
   26f04:	ldr	r0, [sp]
   26f08:	cmp	sl, #0
   26f0c:	mov	r5, r7
   26f10:	add	r4, r4, r0
   26f14:	mov	r0, #1
   26f18:	bne	26f48 <__assert_fail@plt+0x144cc>
   26f1c:	b	26f34 <__assert_fail@plt+0x144b8>
   26f20:	mov	r0, #1
   26f24:	cmp	sl, #0
   26f28:	bne	26f48 <__assert_fail@plt+0x144cc>
   26f2c:	add	r4, r4, #1
   26f30:	add	r5, r6, #1
   26f34:	ldr	r2, [sp]
   26f38:	mov	r3, #0
   26f3c:	cmp	r5, r7
   26f40:	bcc	26cc4 <__assert_fail@plt+0x14248>
   26f44:	b	26f64 <__assert_fail@plt+0x144e8>
   26f48:	ldr	r2, [sp]
   26f4c:	cmp	r0, #0
   26f50:	mov	r5, r6
   26f54:	mov	r3, #0
   26f58:	beq	26e60 <__assert_fail@plt+0x143e4>
   26f5c:	b	26c4c <__assert_fail@plt+0x141d0>
   26f60:	mov	r4, r6
   26f64:	mov	r0, r4
   26f68:	sub	sp, fp, #28
   26f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f70:	push	{r4, r5, r6, r7, fp, lr}
   26f74:	add	fp, sp, #16
   26f78:	mov	r4, r0
   26f7c:	ldrb	r0, [r0, #12]
   26f80:	cmp	r0, #0
   26f84:	popne	{r4, r5, r6, r7, fp, pc}
   26f88:	ldrb	r0, [r4]
   26f8c:	ldr	r6, [r4, #16]
   26f90:	cmp	r0, #0
   26f94:	beq	26ffc <__assert_fail@plt+0x14580>
   26f98:	add	r5, r4, #4
   26f9c:	bl	12620 <__ctype_get_mb_cur_max@plt>
   26fa0:	mov	r1, r0
   26fa4:	mov	r0, r6
   26fa8:	bl	302b4 <__assert_fail@plt+0x1d838>
   26fac:	add	r7, r4, #28
   26fb0:	mov	r2, r0
   26fb4:	mov	r1, r6
   26fb8:	mov	r3, r5
   26fbc:	mov	r0, r7
   26fc0:	bl	35638 <__assert_fail@plt+0x22bbc>
   26fc4:	cmn	r0, #2
   26fc8:	str	r0, [r4, #20]
   26fcc:	beq	27088 <__assert_fail@plt+0x1460c>
   26fd0:	cmp	r0, #0
   26fd4:	beq	2703c <__assert_fail@plt+0x145c0>
   26fd8:	cmn	r0, #1
   26fdc:	bne	27060 <__assert_fail@plt+0x145e4>
   26fe0:	mov	r0, #0
   26fe4:	strb	r0, [r4, #24]
   26fe8:	mov	r0, #1
   26fec:	str	r0, [r4, #20]
   26ff0:	mov	r0, #1
   26ff4:	strb	r0, [r4, #12]
   26ff8:	pop	{r4, r5, r6, r7, fp, pc}
   26ffc:	ldrb	r0, [r6]
   27000:	movw	r2, #10128	; 0x2790
   27004:	movt	r2, #5
   27008:	ubfx	r1, r0, #5, #3
   2700c:	ldr	r1, [r2, r1, lsl #2]
   27010:	and	r2, r0, #31
   27014:	mov	r0, #1
   27018:	tst	r1, r0, lsl r2
   2701c:	beq	270a8 <__assert_fail@plt+0x1462c>
   27020:	str	r0, [r4, #20]
   27024:	ldrb	r1, [r6]
   27028:	strb	r0, [r4, #24]
   2702c:	str	r1, [r4, #28]
   27030:	mov	r0, #1
   27034:	strb	r0, [r4, #12]
   27038:	pop	{r4, r5, r6, r7, fp, pc}
   2703c:	mov	r0, #1
   27040:	str	r0, [r4, #20]
   27044:	ldr	r0, [r4, #16]
   27048:	ldrb	r0, [r0]
   2704c:	cmp	r0, #0
   27050:	bne	270c8 <__assert_fail@plt+0x1464c>
   27054:	ldr	r0, [r7]
   27058:	cmp	r0, #0
   2705c:	bne	270e8 <__assert_fail@plt+0x1466c>
   27060:	mov	r0, #1
   27064:	strb	r0, [r4, #24]
   27068:	mov	r0, r5
   2706c:	bl	124f4 <mbsinit@plt>
   27070:	cmp	r0, #0
   27074:	movne	r0, #0
   27078:	strbne	r0, [r4]
   2707c:	mov	r0, #1
   27080:	strb	r0, [r4, #12]
   27084:	pop	{r4, r5, r6, r7, fp, pc}
   27088:	ldr	r0, [r4, #16]
   2708c:	bl	12788 <strlen@plt>
   27090:	str	r0, [r4, #20]
   27094:	mov	r0, #0
   27098:	strb	r0, [r4, #24]
   2709c:	mov	r0, #1
   270a0:	strb	r0, [r4, #12]
   270a4:	pop	{r4, r5, r6, r7, fp, pc}
   270a8:	add	r5, r4, #4
   270ac:	mov	r0, r5
   270b0:	bl	124f4 <mbsinit@plt>
   270b4:	cmp	r0, #0
   270b8:	beq	27108 <__assert_fail@plt+0x1468c>
   270bc:	mov	r0, #1
   270c0:	strb	r0, [r4]
   270c4:	b	26f9c <__assert_fail@plt+0x14520>
   270c8:	movw	r0, #4115	; 0x1013
   270cc:	movw	r1, #4055	; 0xfd7
   270d0:	movw	r3, #4067	; 0xfe3
   270d4:	mov	r2, #171	; 0xab
   270d8:	movt	r0, #5
   270dc:	movt	r1, #5
   270e0:	movt	r3, #5
   270e4:	bl	12a7c <__assert_fail@plt>
   270e8:	movw	r0, #4138	; 0x102a
   270ec:	movw	r1, #4055	; 0xfd7
   270f0:	movw	r3, #4067	; 0xfe3
   270f4:	mov	r2, #172	; 0xac
   270f8:	movt	r0, #5
   270fc:	movt	r1, #5
   27100:	movt	r3, #5
   27104:	bl	12a7c <__assert_fail@plt>
   27108:	movw	r0, #4032	; 0xfc0
   2710c:	movw	r1, #4055	; 0xfd7
   27110:	movw	r3, #4067	; 0xfe3
   27114:	mov	r2, #143	; 0x8f
   27118:	movt	r0, #5
   2711c:	movt	r1, #5
   27120:	movt	r3, #5
   27124:	bl	12a7c <__assert_fail@plt>
   27128:	ldr	r2, [r0, #16]
   2712c:	add	r1, r2, r1
   27130:	str	r1, [r0, #16]
   27134:	bx	lr
   27138:	push	{r4, r5, r6, sl, fp, lr}
   2713c:	add	fp, sp, #16
   27140:	mov	r5, r1
   27144:	ldrb	r1, [r1]
   27148:	mov	r4, r0
   2714c:	strb	r1, [r0], #4
   27150:	cmp	r1, #0
   27154:	beq	27164 <__assert_fail@plt+0x146e8>
   27158:	ldmib	r5, {r1, r2}
   2715c:	stm	r0, {r1, r2}
   27160:	b	27170 <__assert_fail@plt+0x146f4>
   27164:	mov	r1, #0
   27168:	str	r1, [r0]
   2716c:	str	r1, [r0, #4]
   27170:	ldrb	r0, [r5, #12]
   27174:	strb	r0, [r4, #12]
   27178:	add	r0, r5, #32
   2717c:	ldr	r1, [r5, #16]
   27180:	cmp	r1, r0
   27184:	beq	27190 <__assert_fail@plt+0x14714>
   27188:	mov	r6, r1
   2718c:	b	271a0 <__assert_fail@plt+0x14724>
   27190:	ldr	r2, [r5, #20]
   27194:	add	r6, r4, #32
   27198:	mov	r0, r6
   2719c:	bl	124b8 <memcpy@plt>
   271a0:	str	r6, [r4, #16]
   271a4:	ldr	r0, [r5, #20]
   271a8:	str	r0, [r4, #20]
   271ac:	ldrb	r0, [r5, #24]
   271b0:	strb	r0, [r4, #24]
   271b4:	cmp	r0, #0
   271b8:	ldrne	r0, [r5, #28]
   271bc:	strne	r0, [r4, #28]
   271c0:	pop	{r4, r5, r6, sl, fp, pc}
   271c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271c8:	add	fp, sp, #28
   271cc:	sub	sp, sp, #4
   271d0:	ldrb	r1, [r0]
   271d4:	mov	r4, r0
   271d8:	and	r0, r1, #248	; 0xf8
   271dc:	cmp	r0, #48	; 0x30
   271e0:	bne	2722c <__assert_fail@plt+0x147b0>
   271e4:	mov	r0, #0
   271e8:	mov	r5, #0
   271ec:	mov	r2, r4
   271f0:	lsl	r3, r5, #3
   271f4:	uxtab	r1, r3, r1
   271f8:	sub	r5, r1, #48	; 0x30
   271fc:	cmp	r0, r5, lsr #12
   27200:	bne	27224 <__assert_fail@plt+0x147a8>
   27204:	ldrb	r1, [r2, #1]
   27208:	add	r6, r2, #1
   2720c:	and	r2, r1, #248	; 0xf8
   27210:	cmp	r2, #48	; 0x30
   27214:	mov	r2, r6
   27218:	beq	271f0 <__assert_fail@plt+0x14774>
   2721c:	cmp	r1, #0
   27220:	beq	272ac <__assert_fail@plt+0x14830>
   27224:	sub	sp, fp, #28
   27228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2722c:	movw	sl, #5
   27230:	mov	r2, #1
   27234:	mvn	r3, #42	; 0x2a
   27238:	mov	r7, #1
   2723c:	mov	r0, #1
   27240:	movt	sl, #4
   27244:	uxtab	r6, r3, r1
   27248:	uxtb	r1, r1
   2724c:	cmp	r6, #18
   27250:	bls	27274 <__assert_fail@plt+0x147f8>
   27254:	b	27280 <__assert_fail@plt+0x14804>
   27258:	ldrb	r1, [r4, r7]
   2725c:	add	r0, r6, r0
   27260:	add	r7, r7, #1
   27264:	uxtab	r6, r3, r1
   27268:	uxtb	r1, r1
   2726c:	cmp	r6, #18
   27270:	bhi	27280 <__assert_fail@plt+0x14804>
   27274:	tst	sl, r2, lsl r6
   27278:	mov	r6, #1
   2727c:	bne	27258 <__assert_fail@plt+0x147dc>
   27280:	cmp	r1, #0
   27284:	beq	27290 <__assert_fail@plt+0x14814>
   27288:	mov	r6, #0
   2728c:	b	27258 <__assert_fail@plt+0x147dc>
   27290:	mov	r1, #16
   27294:	bl	30abc <__assert_fail@plt+0x1e040>
   27298:	mov	r9, #0
   2729c:	mov	ip, #1
   272a0:	mvn	lr, #87	; 0x57
   272a4:	mov	r8, #0
   272a8:	b	272f8 <__assert_fail@plt+0x1487c>
   272ac:	mov	r0, #32
   272b0:	bl	309ec <__assert_fail@plt+0x1df70>
   272b4:	movw	r1, #317	; 0x13d
   272b8:	mov	r2, #0
   272bc:	and	r3, r5, #3072	; 0xc00
   272c0:	movw	r7, #1023	; 0x3ff
   272c4:	strh	r1, [r0]
   272c8:	strb	r2, [r0, #17]
   272cc:	sub	r2, r6, r4
   272d0:	movw	r1, #4095	; 0xfff
   272d4:	cmp	r2, #5
   272d8:	str	r1, [r0, #4]
   272dc:	str	r5, [r0, #8]
   272e0:	orrlt	r1, r3, r7
   272e4:	str	r1, [r0, #12]
   272e8:	sub	sp, fp, #28
   272ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272f0:	add	r4, r4, #1
   272f4:	mov	r8, r3
   272f8:	mov	r2, #0
   272fc:	ldrb	r6, [r4]
   27300:	sub	r3, r6, #97	; 0x61
   27304:	cmp	r3, #20
   27308:	bls	27328 <__assert_fail@plt+0x148ac>
   2730c:	b	273a0 <__assert_fail@plt+0x14924>
   27310:	orr	r2, r2, r1
   27314:	add	r4, r4, #1
   27318:	ldrb	r6, [r4]
   2731c:	sub	r3, r6, #97	; 0x61
   27320:	cmp	r3, #20
   27324:	bhi	273a0 <__assert_fail@plt+0x14924>
   27328:	add	r5, pc, #4
   2732c:	mov	r1, #2496	; 0x9c0
   27330:	ldr	pc, [r5, r3, lsl #2]
   27334:	andeq	r7, r2, r8, lsl #7
   27338:	andeq	r7, r2, ip, lsl r6
   2733c:	andeq	r7, r2, ip, lsl r6
   27340:	andeq	r7, r2, ip, lsl r6
   27344:	andeq	r7, r2, ip, lsl r6
   27348:	andeq	r7, r2, ip, lsl r6
   2734c:	muleq	r2, r0, r3
   27350:	andeq	r7, r2, ip, lsl r6
   27354:	andeq	r7, r2, ip, lsl r6
   27358:	andeq	r7, r2, ip, lsl r6
   2735c:	andeq	r7, r2, ip, lsl r6
   27360:	andeq	r7, r2, ip, lsl r6
   27364:	andeq	r7, r2, ip, lsl r6
   27368:	andeq	r7, r2, ip, lsl r6
   2736c:	muleq	r2, r8, r3
   27370:	andeq	r7, r2, ip, lsl r6
   27374:	andeq	r7, r2, ip, lsl r6
   27378:	andeq	r7, r2, ip, lsl r6
   2737c:	andeq	r7, r2, ip, lsl r6
   27380:	andeq	r7, r2, ip, lsl r6
   27384:	andeq	r7, r2, r0, lsl r3
   27388:	movw	r1, #4095	; 0xfff
   2738c:	b	27310 <__assert_fail@plt+0x14894>
   27390:	movw	r1, #1080	; 0x438
   27394:	b	27310 <__assert_fail@plt+0x14894>
   27398:	movw	r1, #519	; 0x207
   2739c:	b	27310 <__assert_fail@plt+0x14894>
   273a0:	sub	r1, r6, #43	; 0x2b
   273a4:	cmp	r1, #18
   273a8:	bhi	2761c <__assert_fail@plt+0x14ba0>
   273ac:	tst	sl, ip, lsl r1
   273b0:	beq	2761c <__assert_fail@plt+0x14ba0>
   273b4:	ldrb	r1, [r4, #1]
   273b8:	sub	r3, r1, #48	; 0x30
   273bc:	cmp	r3, #8
   273c0:	bcs	2741c <__assert_fail@plt+0x149a0>
   273c4:	add	r3, r4, #2
   273c8:	mov	r7, #0
   273cc:	lsl	r4, r7, #3
   273d0:	uxtab	r1, r4, r1
   273d4:	sub	r7, r1, #48	; 0x30
   273d8:	cmp	r9, r7, lsr #12
   273dc:	bne	2761c <__assert_fail@plt+0x14ba0>
   273e0:	ldrb	r1, [r3], #1
   273e4:	and	r4, r1, #248	; 0xf8
   273e8:	cmp	r4, #48	; 0x30
   273ec:	beq	273cc <__assert_fail@plt+0x14950>
   273f0:	cmp	r2, #0
   273f4:	bne	2761c <__assert_fail@plt+0x14ba0>
   273f8:	sub	r4, r3, #1
   273fc:	mov	r5, #1
   27400:	movw	r2, #4095	; 0xfff
   27404:	cmp	r1, #0
   27408:	beq	27448 <__assert_fail@plt+0x149cc>
   2740c:	cmp	r1, #44	; 0x2c
   27410:	movw	r1, #4095	; 0xfff
   27414:	beq	27568 <__assert_fail@plt+0x14aec>
   27418:	b	2761c <__assert_fail@plt+0x14ba0>
   2741c:	add	r4, r4, #2
   27420:	cmp	r1, #103	; 0x67
   27424:	beq	27450 <__assert_fail@plt+0x149d4>
   27428:	cmp	r1, #111	; 0x6f
   2742c:	beq	27460 <__assert_fail@plt+0x149e4>
   27430:	cmp	r1, #117	; 0x75
   27434:	bne	27470 <__assert_fail@plt+0x149f4>
   27438:	mov	r5, #3
   2743c:	mov	r1, #0
   27440:	mov	r7, #448	; 0x1c0
   27444:	b	27568 <__assert_fail@plt+0x14aec>
   27448:	movw	r1, #4095	; 0xfff
   2744c:	b	27568 <__assert_fail@plt+0x14aec>
   27450:	mov	r5, #3
   27454:	mov	r1, #0
   27458:	mov	r7, #56	; 0x38
   2745c:	b	27568 <__assert_fail@plt+0x14aec>
   27460:	mov	r5, #3
   27464:	mov	r1, #0
   27468:	mov	r7, #7
   2746c:	b	27568 <__assert_fail@plt+0x14aec>
   27470:	mov	r3, #1
   27474:	mov	r7, #0
   27478:	uxtab	r1, lr, r1
   2747c:	mov	r5, r3
   27480:	cmp	r1, #32
   27484:	bls	274a0 <__assert_fail@plt+0x14a24>
   27488:	b	2755c <__assert_fail@plt+0x14ae0>
   2748c:	ldrb	r1, [r4], #1
   27490:	uxtab	r1, lr, r1
   27494:	mov	r5, r3
   27498:	cmp	r1, #32
   2749c:	bhi	2755c <__assert_fail@plt+0x14ae0>
   274a0:	add	ip, pc, #4
   274a4:	mov	r3, #2
   274a8:	ldr	pc, [ip, r1, lsl #2]
   274ac:	andeq	r7, r2, ip, lsl #9
   274b0:	andeq	r7, r2, ip, asr r5
   274b4:	andeq	r7, r2, ip, asr r5
   274b8:	andeq	r7, r2, ip, asr r5
   274bc:	andeq	r7, r2, ip, asr r5
   274c0:	andeq	r7, r2, ip, asr r5
   274c4:	andeq	r7, r2, ip, asr r5
   274c8:	andeq	r7, r2, ip, asr r5
   274cc:	andeq	r7, r2, ip, asr r5
   274d0:	andeq	r7, r2, ip, asr r5
   274d4:	andeq	r7, r2, ip, asr r5
   274d8:	andeq	r7, r2, ip, asr r5
   274dc:	andeq	r7, r2, ip, asr r5
   274e0:	andeq	r7, r2, ip, asr r5
   274e4:	andeq	r7, r2, ip, asr r5
   274e8:	andeq	r7, r2, ip, asr r5
   274ec:	andeq	r7, r2, ip, asr r5
   274f0:	andeq	r7, r2, ip, asr r5
   274f4:	andeq	r7, r2, ip, asr r5
   274f8:	andeq	r7, r2, ip, asr r5
   274fc:	andeq	r7, r2, ip, asr r5
   27500:	andeq	r7, r2, ip, asr r5
   27504:	andeq	r7, r2, ip, asr r5
   27508:	andeq	r7, r2, ip, asr r5
   2750c:	andeq	r7, r2, ip, asr r5
   27510:	andeq	r7, r2, ip, asr r5
   27514:	andeq	r7, r2, r0, lsr r5
   27518:	andeq	r7, r2, r8, lsr r5
   2751c:	andeq	r7, r2, r0, asr #10
   27520:	andeq	r7, r2, ip, asr r5
   27524:	andeq	r7, r2, ip, asr r5
   27528:	andeq	r7, r2, r8, asr #10
   2752c:	andeq	r7, r2, r0, asr r5
   27530:	orr	r7, r7, #292	; 0x124
   27534:	b	27554 <__assert_fail@plt+0x14ad8>
   27538:	orr	r7, r7, #3072	; 0xc00
   2753c:	b	27554 <__assert_fail@plt+0x14ad8>
   27540:	orr	r7, r7, #512	; 0x200
   27544:	b	27554 <__assert_fail@plt+0x14ad8>
   27548:	orr	r7, r7, #146	; 0x92
   2754c:	b	27554 <__assert_fail@plt+0x14ad8>
   27550:	orr	r7, r7, #73	; 0x49
   27554:	mov	r3, r5
   27558:	b	2748c <__assert_fail@plt+0x14a10>
   2755c:	sub	r4, r4, #1
   27560:	mov	r1, #0
   27564:	mov	ip, #1
   27568:	mov	r3, r0
   2756c:	cmp	r1, #0
   27570:	strb	r6, [r3, r8, lsl #4]!
   27574:	strb	r5, [r3, #1]
   27578:	stmib	r3, {r2, r7}
   2757c:	bne	2758c <__assert_fail@plt+0x14b10>
   27580:	cmp	r2, #0
   27584:	andne	r7, r7, r2
   27588:	mov	r1, r7
   2758c:	add	r7, r0, r8, lsl #4
   27590:	add	r3, r8, #1
   27594:	str	r1, [r7, #12]
   27598:	ldrb	r6, [r4]
   2759c:	sub	r1, r6, #43	; 0x2b
   275a0:	cmp	r1, #18
   275a4:	bhi	27600 <__assert_fail@plt+0x14b84>
   275a8:	add	r7, pc, #4
   275ac:	mov	r8, r3
   275b0:	ldr	pc, [r7, r1, lsl #2]
   275b4:			; <UNDEFINED> instruction: 0x000273b4
   275b8:	strdeq	r7, [r2], -r0
   275bc:			; <UNDEFINED> instruction: 0x000273b4
   275c0:	andeq	r7, r2, ip, lsl r6
   275c4:	andeq	r7, r2, ip, lsl r6
   275c8:	andeq	r7, r2, ip, lsl r6
   275cc:	andeq	r7, r2, ip, lsl r6
   275d0:	andeq	r7, r2, ip, lsl r6
   275d4:	andeq	r7, r2, ip, lsl r6
   275d8:	andeq	r7, r2, ip, lsl r6
   275dc:	andeq	r7, r2, ip, lsl r6
   275e0:	andeq	r7, r2, ip, lsl r6
   275e4:	andeq	r7, r2, ip, lsl r6
   275e8:	andeq	r7, r2, ip, lsl r6
   275ec:	andeq	r7, r2, ip, lsl r6
   275f0:	andeq	r7, r2, ip, lsl r6
   275f4:	andeq	r7, r2, ip, lsl r6
   275f8:	andeq	r7, r2, ip, lsl r6
   275fc:			; <UNDEFINED> instruction: 0x000273b4
   27600:	cmp	r6, #0
   27604:	bne	2761c <__assert_fail@plt+0x14ba0>
   27608:	add	r1, r0, r3, lsl #4
   2760c:	mov	r2, #0
   27610:	strb	r2, [r1, #1]
   27614:	sub	sp, fp, #28
   27618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2761c:	bl	32c40 <__assert_fail@plt+0x201c4>
   27620:	mov	r0, #0
   27624:	sub	sp, fp, #28
   27628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2762c:	push	{r4, sl, fp, lr}
   27630:	add	fp, sp, #8
   27634:	sub	sp, sp, #104	; 0x68
   27638:	mov	r1, r0
   2763c:	mov	r2, sp
   27640:	mov	r0, #3
   27644:	bl	129e0 <__xstat64@plt>
   27648:	mov	r1, r0
   2764c:	mov	r0, #0
   27650:	cmp	r1, #0
   27654:	beq	27660 <__assert_fail@plt+0x14be4>
   27658:	sub	sp, fp, #8
   2765c:	pop	{r4, sl, fp, pc}
   27660:	ldr	r4, [sp, #16]
   27664:	mov	r0, #32
   27668:	bl	309ec <__assert_fail@plt+0x1df70>
   2766c:	movw	r1, #317	; 0x13d
   27670:	strh	r1, [r0]
   27674:	movw	r1, #4095	; 0xfff
   27678:	stmib	r0, {r1, r4}
   2767c:	str	r1, [r0, #12]
   27680:	mov	r1, #0
   27684:	strb	r1, [r0, #17]
   27688:	sub	sp, fp, #8
   2768c:	pop	{r4, sl, fp, pc}
   27690:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   27694:	add	fp, sp, #24
   27698:	ldrb	r4, [r3, #1]
   2769c:	ldr	ip, [fp, #8]
   276a0:	bfc	r0, #12, #20
   276a4:	cmp	r4, #0
   276a8:	beq	27790 <__assert_fail@plt+0x14d14>
   276ac:	cmp	r1, #0
   276b0:	mov	lr, r1
   276b4:	add	r3, r3, #8
   276b8:	mov	r9, #0
   276bc:	movw	r8, #4095	; 0xfff
   276c0:	movwne	lr, #3072	; 0xc00
   276c4:	mov	r5, r3
   276c8:	ldr	r7, [r3, #-4]
   276cc:	ldr	r3, [r3]
   276d0:	uxtb	r4, r4
   276d4:	ldr	r6, [r5, #4]
   276d8:	cmp	r4, #2
   276dc:	bic	r6, lr, r6
   276e0:	beq	2770c <__assert_fail@plt+0x14c90>
   276e4:	cmp	r4, #3
   276e8:	bne	27718 <__assert_fail@plt+0x14c9c>
   276ec:	and	r4, r3, r0
   276f0:	tst	r4, #146	; 0x92
   276f4:	mov	r3, r4
   276f8:	orrne	r3, r3, #146	; 0x92
   276fc:	tst	r4, #292	; 0x124
   27700:	orrne	r3, r3, #292	; 0x124
   27704:	tst	r4, #73	; 0x49
   27708:	b	27714 <__assert_fail@plt+0x14c98>
   2770c:	and	r4, r0, #73	; 0x49
   27710:	orrs	r4, r4, r1
   27714:	orrne	r3, r3, #73	; 0x49
   27718:	cmp	r7, #0
   2771c:	mov	r4, r7
   27720:	mvneq	r4, r2
   27724:	bic	r4, r4, r6
   27728:	and	r3, r4, r3
   2772c:	ldrb	r4, [r5, #-8]
   27730:	cmp	r4, #43	; 0x2b
   27734:	beq	27764 <__assert_fail@plt+0x14ce8>
   27738:	cmp	r4, #45	; 0x2d
   2773c:	beq	2776c <__assert_fail@plt+0x14cf0>
   27740:	cmp	r4, #61	; 0x3d
   27744:	bne	27774 <__assert_fail@plt+0x14cf8>
   27748:	mvn	r4, r7
   2774c:	cmp	r7, #0
   27750:	orrne	r6, r6, r4
   27754:	and	r0, r6, r0
   27758:	orr	r0, r3, r0
   2775c:	bic	r3, r8, r6
   27760:	b	27770 <__assert_fail@plt+0x14cf4>
   27764:	orr	r0, r3, r0
   27768:	b	27770 <__assert_fail@plt+0x14cf4>
   2776c:	bic	r0, r0, r3
   27770:	orr	r9, r3, r9
   27774:	ldrb	r4, [r5, #9]
   27778:	add	r3, r5, #16
   2777c:	cmp	r4, #0
   27780:	bne	276c4 <__assert_fail@plt+0x14c48>
   27784:	cmp	ip, #0
   27788:	strne	r9, [ip]
   2778c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27790:	mov	r9, #0
   27794:	cmp	ip, #0
   27798:	strne	r9, [ip]
   2779c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   277a0:	push	{fp, lr}
   277a4:	mov	fp, sp
   277a8:	mov	r4, r0
   277ac:	movw	r0, #13544	; 0x34e8
   277b0:	movw	r1, #4156	; 0x103c
   277b4:	mov	r2, #5
   277b8:	movt	r0, #6
   277bc:	movt	r1, #5
   277c0:	ldr	r5, [r0]
   277c4:	mov	r0, #0
   277c8:	bl	1253c <dcgettext@plt>
   277cc:	mov	r2, r0
   277d0:	mov	r0, r5
   277d4:	mov	r1, r4
   277d8:	bl	12674 <error@plt>
   277dc:	bl	12a28 <abort@plt>
   277e0:	push	{fp, lr}
   277e4:	mov	fp, sp
   277e8:	mov	r4, r0
   277ec:	movw	r0, #13544	; 0x34e8
   277f0:	movw	r1, #4199	; 0x1067
   277f4:	mov	r2, #5
   277f8:	movt	r0, #6
   277fc:	movt	r1, #5
   27800:	ldr	r5, [r0]
   27804:	mov	r0, #0
   27808:	bl	1253c <dcgettext@plt>
   2780c:	mov	r2, r0
   27810:	mov	r0, r5
   27814:	mov	r1, r4
   27818:	bl	12674 <error@plt>
   2781c:	bl	12a28 <abort@plt>
   27820:	sub	sp, sp, #4
   27824:	push	{fp, lr}
   27828:	mov	fp, sp
   2782c:	sub	sp, sp, #4
   27830:	str	r3, [fp, #8]
   27834:	mov	r3, #0
   27838:	tst	r2, #64	; 0x40
   2783c:	addne	r3, fp, #8
   27840:	addne	r3, r3, #4
   27844:	strne	r3, [sp]
   27848:	ldrne	r3, [fp, #8]
   2784c:	bl	127ac <openat64@plt>
   27850:	bl	302f0 <__assert_fail@plt+0x1d874>
   27854:	mov	sp, fp
   27858:	pop	{fp, lr}
   2785c:	add	sp, sp, #4
   27860:	bx	lr
   27864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27868:	add	fp, sp, #28
   2786c:	sub	sp, sp, #4
   27870:	vpush	{d8-d9}
   27874:	sub	sp, sp, #1424	; 0x590
   27878:	sub	r1, fp, #72	; 0x48
   2787c:	mov	r4, r0
   27880:	add	r5, sp, #240	; 0xf0
   27884:	vmov.i32	q4, #0	; 0x00000000
   27888:	mov	sl, #0
   2788c:	mov	r3, #0
   27890:	add	r0, r1, #1
   27894:	str	r0, [sp, #80]	; 0x50
   27898:	add	r0, r1, #19
   2789c:	str	r0, [sp, #192]	; 0xc0
   278a0:	add	r0, r4, #48	; 0x30
   278a4:	str	r0, [sp, #88]	; 0x58
   278a8:	add	r0, r4, #32
   278ac:	str	r0, [sp, #96]	; 0x60
   278b0:	add	r0, r4, #40	; 0x28
   278b4:	str	r0, [sp, #84]	; 0x54
   278b8:	add	r0, r4, #64	; 0x40
   278bc:	str	r0, [sp, #152]	; 0x98
   278c0:	add	r0, r4, #56	; 0x38
   278c4:	str	r0, [sp, #156]	; 0x9c
   278c8:	add	r0, r4, #8
   278cc:	str	r0, [sp, #92]	; 0x5c
   278d0:	add	r0, r4, #96	; 0x60
   278d4:	str	r0, [sp, #120]	; 0x78
   278d8:	add	r0, r4, #104	; 0x68
   278dc:	str	r0, [sp, #116]	; 0x74
   278e0:	add	r0, r4, #112	; 0x70
   278e4:	str	r0, [sp, #112]	; 0x70
   278e8:	add	r0, r4, #120	; 0x78
   278ec:	str	r0, [sp, #108]	; 0x6c
   278f0:	add	r0, r4, #128	; 0x80
   278f4:	str	r0, [sp, #104]	; 0x68
   278f8:	add	r0, r4, #136	; 0x88
   278fc:	str	r0, [sp, #100]	; 0x64
   27900:	add	r0, r4, #80	; 0x50
   27904:	str	r0, [sp, #140]	; 0x8c
   27908:	add	r0, r4, #72	; 0x48
   2790c:	str	r0, [sp, #136]	; 0x88
   27910:	add	r0, r4, #88	; 0x58
   27914:	str	r0, [sp, #76]	; 0x4c
   27918:	mov	r0, #0
   2791c:	strh	r0, [fp, #-112]	; 0xffffff90
   27920:	mvn	r0, #1
   27924:	str	r0, [sp, #196]	; 0xc4
   27928:	mov	r0, #0
   2792c:	str	r0, [sp, #124]	; 0x7c
   27930:	mov	r0, #0
   27934:	str	r0, [sp, #128]	; 0x80
   27938:	mov	r0, #0
   2793c:	str	r0, [sp, #132]	; 0x84
   27940:	mov	r0, #0
   27944:	str	r0, [sp, #148]	; 0x94
   27948:	mov	r0, #0
   2794c:	str	r0, [sp, #184]	; 0xb8
   27950:	mov	r0, #0
   27954:	str	r0, [sp, #144]	; 0x90
   27958:	cmp	sl, #12
   2795c:	beq	2c204 <__assert_fail@plt+0x19788>
   27960:	movw	r0, #4304	; 0x10d0
   27964:	movt	r0, #5
   27968:	add	r0, r0, sl
   2796c:	ldrsb	r9, [r0]
   27970:	cmn	r9, #93	; 0x5d
   27974:	beq	28e60 <__assert_fail@plt+0x163e4>
   27978:	ldr	r7, [sp, #196]	; 0xc4
   2797c:	cmn	r7, #2
   27980:	bne	28dcc <__assert_fail@plt+0x16350>
   27984:	ldr	r6, [r4]
   27988:	str	r3, [sp, #180]	; 0xb4
   2798c:	ldrb	r0, [r6]
   27990:	sub	r1, r0, #9
   27994:	cmp	r1, #5
   27998:	bcs	279b4 <__assert_fail@plt+0x14f38>
   2799c:	add	r6, r6, #1
   279a0:	str	r6, [r4]
   279a4:	ldrb	r0, [r6]
   279a8:	sub	r1, r0, #9
   279ac:	cmp	r1, #5
   279b0:	bcc	2799c <__assert_fail@plt+0x14f20>
   279b4:	cmp	r0, #32
   279b8:	beq	2799c <__assert_fail@plt+0x14f20>
   279bc:	sub	r1, r0, #48	; 0x30
   279c0:	cmp	r1, #10
   279c4:	bcs	279d8 <__assert_fail@plt+0x14f5c>
   279c8:	cmp	r0, #45	; 0x2d
   279cc:	cmpne	r0, #43	; 0x2b
   279d0:	beq	27b38 <__assert_fail@plt+0x150bc>
   279d4:	b	27e00 <__assert_fail@plt+0x15384>
   279d8:	sub	r1, r0, #40	; 0x28
   279dc:	cmp	r1, #82	; 0x52
   279e0:	bhi	28c60 <__assert_fail@plt+0x161e4>
   279e4:	add	r2, pc, #0
   279e8:	ldr	pc, [r2, r1, lsl #2]
   279ec:	andeq	r7, r2, ip, ror fp
   279f0:	andeq	r8, r2, r0, ror #24
   279f4:	andeq	r8, r2, r0, ror #24
   279f8:	andeq	r7, r2, r8, lsr fp
   279fc:	andeq	r8, r2, r0, ror #24
   27a00:	andeq	r7, r2, r8, lsr fp
   27a04:	andeq	r8, r2, r0, ror #24
   27a08:	andeq	r8, r2, r0, ror #24
   27a0c:	andeq	r8, r2, r0, ror #24
   27a10:	andeq	r8, r2, r0, ror #24
   27a14:	andeq	r8, r2, r0, ror #24
   27a18:	andeq	r8, r2, r0, ror #24
   27a1c:	andeq	r8, r2, r0, ror #24
   27a20:	andeq	r8, r2, r0, ror #24
   27a24:	andeq	r8, r2, r0, ror #24
   27a28:	andeq	r8, r2, r0, ror #24
   27a2c:	andeq	r8, r2, r0, ror #24
   27a30:	andeq	r8, r2, r0, ror #24
   27a34:	andeq	r8, r2, r0, ror #24
   27a38:	andeq	r8, r2, r0, ror #24
   27a3c:	andeq	r8, r2, r0, ror #24
   27a40:	andeq	r8, r2, r0, ror #24
   27a44:	andeq	r8, r2, r0, ror #24
   27a48:	andeq	r8, r2, r0, ror #24
   27a4c:	andeq	r8, r2, r0, ror #24
   27a50:	andeq	r7, r2, r0, lsl lr
   27a54:	andeq	r7, r2, r0, lsl lr
   27a58:	andeq	r7, r2, r0, lsl lr
   27a5c:	andeq	r7, r2, r0, lsl lr
   27a60:	andeq	r7, r2, r0, lsl lr
   27a64:	andeq	r7, r2, r0, lsl lr
   27a68:	andeq	r7, r2, r0, lsl lr
   27a6c:	andeq	r7, r2, r0, lsl lr
   27a70:	andeq	r7, r2, r0, lsl lr
   27a74:	andeq	r7, r2, r0, lsl lr
   27a78:	andeq	r7, r2, r0, lsl lr
   27a7c:	andeq	r7, r2, r0, lsl lr
   27a80:	andeq	r7, r2, r0, lsl lr
   27a84:	andeq	r7, r2, r0, lsl lr
   27a88:	andeq	r7, r2, r0, lsl lr
   27a8c:	andeq	r7, r2, r0, lsl lr
   27a90:	andeq	r7, r2, r0, lsl lr
   27a94:	andeq	r7, r2, r0, lsl lr
   27a98:	andeq	r7, r2, r0, lsl lr
   27a9c:	andeq	r7, r2, r0, lsl lr
   27aa0:	andeq	r7, r2, r0, lsl lr
   27aa4:	andeq	r7, r2, r0, lsl lr
   27aa8:	andeq	r7, r2, r0, lsl lr
   27aac:	andeq	r7, r2, r0, lsl lr
   27ab0:	andeq	r7, r2, r0, lsl lr
   27ab4:	andeq	r7, r2, r0, lsl lr
   27ab8:	andeq	r8, r2, r0, ror #24
   27abc:	andeq	r8, r2, r0, ror #24
   27ac0:	andeq	r8, r2, r0, ror #24
   27ac4:	andeq	r8, r2, r0, ror #24
   27ac8:	andeq	r8, r2, r0, ror #24
   27acc:	andeq	r8, r2, r0, ror #24
   27ad0:	andeq	r7, r2, r0, lsl lr
   27ad4:	andeq	r7, r2, r0, lsl lr
   27ad8:	andeq	r7, r2, r0, lsl lr
   27adc:	andeq	r7, r2, r0, lsl lr
   27ae0:	andeq	r7, r2, r0, lsl lr
   27ae4:	andeq	r7, r2, r0, lsl lr
   27ae8:	andeq	r7, r2, r0, lsl lr
   27aec:	andeq	r7, r2, r0, lsl lr
   27af0:	andeq	r7, r2, r0, lsl lr
   27af4:	andeq	r7, r2, r0, lsl lr
   27af8:	andeq	r7, r2, r0, lsl lr
   27afc:	andeq	r7, r2, r0, lsl lr
   27b00:	andeq	r7, r2, r0, lsl lr
   27b04:	andeq	r7, r2, r0, lsl lr
   27b08:	andeq	r7, r2, r0, lsl lr
   27b0c:	andeq	r7, r2, r0, lsl lr
   27b10:	andeq	r7, r2, r0, lsl lr
   27b14:	andeq	r7, r2, r0, lsl lr
   27b18:	andeq	r7, r2, r0, lsl lr
   27b1c:	andeq	r7, r2, r0, lsl lr
   27b20:	andeq	r7, r2, r0, lsl lr
   27b24:	andeq	r7, r2, r0, lsl lr
   27b28:	andeq	r7, r2, r0, lsl lr
   27b2c:	andeq	r7, r2, r0, lsl lr
   27b30:	andeq	r7, r2, r0, lsl lr
   27b34:	andeq	r7, r2, r0, lsl lr
   27b38:	add	r2, r6, #1
   27b3c:	mov	r3, r6
   27b40:	b	27b4c <__assert_fail@plt+0x150d0>
   27b44:	add	r3, r3, #1
   27b48:	add	r2, r2, #1
   27b4c:	str	r2, [r4]
   27b50:	ldrb	r1, [r2]
   27b54:	sub	r7, r1, #9
   27b58:	cmp	r7, #5
   27b5c:	bcc	27b44 <__assert_fail@plt+0x150c8>
   27b60:	cmp	r1, #32
   27b64:	beq	27b44 <__assert_fail@plt+0x150c8>
   27b68:	sub	r7, r1, #48	; 0x30
   27b6c:	mov	r6, r2
   27b70:	cmp	r7, #9
   27b74:	bhi	279a4 <__assert_fail@plt+0x14f28>
   27b78:	b	27bdc <__assert_fail@plt+0x15160>
   27b7c:	mov	r0, #0
   27b80:	mov	r1, r6
   27b84:	add	r6, r6, #1
   27b88:	str	r6, [r4]
   27b8c:	ldrb	r1, [r1]
   27b90:	cmp	r1, #40	; 0x28
   27b94:	beq	27bc4 <__assert_fail@plt+0x15148>
   27b98:	cmp	r1, #41	; 0x29
   27b9c:	beq	27bb4 <__assert_fail@plt+0x15138>
   27ba0:	cmp	r1, #0
   27ba4:	beq	27bd4 <__assert_fail@plt+0x15158>
   27ba8:	cmp	r0, #0
   27bac:	bne	27b80 <__assert_fail@plt+0x15104>
   27bb0:	b	279a4 <__assert_fail@plt+0x14f28>
   27bb4:	sub	r0, r0, #1
   27bb8:	cmp	r0, #0
   27bbc:	bne	27b80 <__assert_fail@plt+0x15104>
   27bc0:	b	279a4 <__assert_fail@plt+0x14f28>
   27bc4:	add	r0, r0, #1
   27bc8:	cmp	r0, #0
   27bcc:	bne	27b80 <__assert_fail@plt+0x15104>
   27bd0:	b	279a4 <__assert_fail@plt+0x14f28>
   27bd4:	ldr	r3, [sp, #180]	; 0xb4
   27bd8:	b	28e10 <__assert_fail@plt+0x16394>
   27bdc:	cmp	r0, #45	; 0x2d
   27be0:	bne	28800 <__assert_fail@plt+0x15d84>
   27be4:	mov	r0, #0
   27be8:	cmp	r0, #0
   27bec:	blt	27c04 <__assert_fail@plt+0x15188>
   27bf0:	movw	r7, #52428	; 0xcccc
   27bf4:	movt	r7, #3276	; 0xccc
   27bf8:	cmp	r0, r7
   27bfc:	ble	27c1c <__assert_fail@plt+0x151a0>
   27c00:	b	288b0 <__assert_fail@plt+0x15e34>
   27c04:	cmn	r0, #1
   27c08:	beq	27c1c <__assert_fail@plt+0x151a0>
   27c0c:	mov	r7, #-2147483648	; 0x80000000
   27c10:	sdiv	r7, r7, r0
   27c14:	cmp	r7, #10
   27c18:	blt	288b0 <__assert_fail@plt+0x15e34>
   27c1c:	add	r7, r0, r0, lsl #2
   27c20:	uxtb	r0, r1
   27c24:	rsb	r0, r0, #48	; 0x30
   27c28:	add	r0, r0, r7, lsl #1
   27c2c:	cmp	r0, r7, lsl #1
   27c30:	bvs	288b0 <__assert_fail@plt+0x15e34>
   27c34:	ldrb	r1, [r3, #2]
   27c38:	add	r7, r3, #1
   27c3c:	sub	r3, r1, #48	; 0x30
   27c40:	cmp	r3, #10
   27c44:	mov	r3, r7
   27c48:	bcc	27be8 <__assert_fail@plt+0x1516c>
   27c4c:	add	r6, r7, #1
   27c50:	mvn	ip, #0
   27c54:	mov	lr, #1
   27c58:	orr	r1, r1, #2
   27c5c:	cmp	r1, #46	; 0x2e
   27c60:	bne	28878 <__assert_fail@plt+0x15dfc>
   27c64:	ldrb	r1, [r7, #2]
   27c68:	sub	r3, r1, #48	; 0x30
   27c6c:	cmp	r3, #9
   27c70:	bhi	28878 <__assert_fail@plt+0x15dfc>
   27c74:	mov	r1, r7
   27c78:	str	lr, [sp, #232]	; 0xe8
   27c7c:	str	ip, [sp, #236]	; 0xec
   27c80:	add	r3, r3, r3, lsl #2
   27c84:	ldrb	r2, [r1, #3]!
   27c88:	sub	r2, r2, #48	; 0x30
   27c8c:	cmp	r2, #10
   27c90:	str	r2, [sp, #228]	; 0xe4
   27c94:	mov	r2, #3
   27c98:	movwcc	r2, #4
   27c9c:	addcc	r1, r7, #4
   27ca0:	ldrb	r2, [r7, r2]
   27ca4:	sub	r2, r2, #48	; 0x30
   27ca8:	cmp	r2, #10
   27cac:	str	r2, [sp, #224]	; 0xe0
   27cb0:	addcc	r1, r1, #1
   27cb4:	mov	r2, r1
   27cb8:	ldrb	r7, [r2], #1
   27cbc:	sub	r7, r7, #48	; 0x30
   27cc0:	cmp	r7, #10
   27cc4:	str	r7, [sp, #220]	; 0xdc
   27cc8:	movcs	r2, r1
   27ccc:	mov	r1, r2
   27cd0:	ldrb	r7, [r1], #1
   27cd4:	sub	r7, r7, #48	; 0x30
   27cd8:	cmp	r7, #10
   27cdc:	str	r7, [sp, #216]	; 0xd8
   27ce0:	movcs	r1, r2
   27ce4:	mov	r2, r1
   27ce8:	ldrb	r6, [r2], #1
   27cec:	sub	r6, r6, #48	; 0x30
   27cf0:	cmp	r6, #10
   27cf4:	movcs	r2, r1
   27cf8:	mov	r1, r2
   27cfc:	ldrb	r7, [r1], #1
   27d00:	sub	r8, r7, #48	; 0x30
   27d04:	cmp	r8, #10
   27d08:	movcs	r1, r2
   27d0c:	mov	r7, r1
   27d10:	ldrb	r2, [r7], #1
   27d14:	sub	lr, r2, #48	; 0x30
   27d18:	cmp	lr, #10
   27d1c:	movcs	r7, r1
   27d20:	mov	r1, r7
   27d24:	ldrb	r2, [r1], #1
   27d28:	sub	ip, r2, #48	; 0x30
   27d2c:	ldr	r2, [sp, #228]	; 0xe4
   27d30:	cmp	ip, #10
   27d34:	movcs	r1, r7
   27d38:	lsl	r7, r3, #1
   27d3c:	cmp	r2, #10
   27d40:	addcc	r7, r2, r3, lsl #1
   27d44:	ldr	r2, [sp, #224]	; 0xe0
   27d48:	add	r3, r7, r7, lsl #2
   27d4c:	lsl	r7, r3, #1
   27d50:	cmp	r2, #10
   27d54:	addcc	r7, r2, r3, lsl #1
   27d58:	ldr	r2, [sp, #220]	; 0xdc
   27d5c:	add	r3, r7, r7, lsl #2
   27d60:	lsl	r7, r3, #1
   27d64:	cmp	r2, #10
   27d68:	addcc	r7, r2, r3, lsl #1
   27d6c:	ldr	r2, [sp, #216]	; 0xd8
   27d70:	add	r3, r7, r7, lsl #2
   27d74:	lsl	r7, r3, #1
   27d78:	cmp	r2, #10
   27d7c:	addcc	r7, r2, r3, lsl #1
   27d80:	cmp	r6, #10
   27d84:	add	r3, r7, r7, lsl #2
   27d88:	lsl	r7, r3, #1
   27d8c:	addcc	r7, r6, r3, lsl #1
   27d90:	cmp	r8, #10
   27d94:	add	r3, r7, r7, lsl #2
   27d98:	lsl	r6, r3, #1
   27d9c:	addcc	r6, r8, r3, lsl #1
   27da0:	ldr	r8, [sp, #232]	; 0xe8
   27da4:	cmp	lr, #10
   27da8:	add	r3, r6, r6, lsl #2
   27dac:	lsl	r7, r3, #1
   27db0:	addcc	r7, lr, r3, lsl #1
   27db4:	cmp	ip, #10
   27db8:	add	r7, r7, r7, lsl #2
   27dbc:	lsl	r3, r7, #1
   27dc0:	addcc	r3, ip, r7, lsl #1
   27dc4:	cmp	r8, #0
   27dc8:	beq	288d0 <__assert_fail@plt+0x15e54>
   27dcc:	ldrb	r2, [r1]
   27dd0:	ldr	r6, [sp, #236]	; 0xec
   27dd4:	sub	r7, r2, #48	; 0x30
   27dd8:	cmp	r7, #9
   27ddc:	bhi	28bb8 <__assert_fail@plt+0x1613c>
   27de0:	uxtb	r2, r2
   27de4:	cmp	r2, #48	; 0x30
   27de8:	bne	28bb4 <__assert_fail@plt+0x16138>
   27dec:	ldrb	r2, [r1, #1]!
   27df0:	sub	r7, r2, #48	; 0x30
   27df4:	cmp	r7, #10
   27df8:	bcc	27de0 <__assert_fail@plt+0x15364>
   27dfc:	b	28bb8 <__assert_fail@plt+0x1613c>
   27e00:	mov	ip, #0
   27e04:	mov	r2, r6
   27e08:	mov	r1, r0
   27e0c:	b	28808 <__assert_fail@plt+0x15d8c>
   27e10:	sub	r1, fp, #72	; 0x48
   27e14:	ldr	r2, [sp, #192]	; 0xc0
   27e18:	cmp	r1, r2
   27e1c:	mov	r2, #1
   27e20:	strbcc	r0, [r1], #1
   27e24:	ldrcc	r0, [r4]
   27e28:	movcs	r0, r6
   27e2c:	add	r6, r0, #1
   27e30:	str	r6, [r4]
   27e34:	ldrb	r0, [r0, #1]
   27e38:	sub	r3, r0, #65	; 0x41
   27e3c:	cmp	r3, #26
   27e40:	subcs	r3, r0, #97	; 0x61
   27e44:	cmpcs	r3, #26
   27e48:	movcs	r2, #0
   27e4c:	cmp	r0, #46	; 0x2e
   27e50:	beq	27e14 <__assert_fail@plt+0x15398>
   27e54:	cmp	r2, #0
   27e58:	bne	27e14 <__assert_fail@plt+0x15398>
   27e5c:	mov	r0, #0
   27e60:	mvn	r3, #96	; 0x60
   27e64:	strb	r0, [r1]
   27e68:	ldrb	r0, [fp, #-72]	; 0xffffffb8
   27e6c:	cmp	r0, #0
   27e70:	beq	27e98 <__assert_fail@plt+0x1541c>
   27e74:	ldr	r1, [sp, #80]	; 0x50
   27e78:	uxtab	r2, r3, r0
   27e7c:	cmp	r2, #26
   27e80:	subcc	r0, r0, #32
   27e84:	strb	r0, [r1, #-1]
   27e88:	ldrb	r0, [r1]
   27e8c:	add	r1, r1, #1
   27e90:	cmp	r0, #0
   27e94:	bne	27e78 <__assert_fail@plt+0x153fc>
   27e98:	movw	r1, #7019	; 0x1b6b
   27e9c:	sub	r0, fp, #72	; 0x48
   27ea0:	movt	r1, #5
   27ea4:	bl	123d4 <strcmp@plt>
   27ea8:	cmp	r0, #0
   27eac:	movw	r0, #5272	; 0x1498
   27eb0:	movt	r0, #5
   27eb4:	beq	28dac <__assert_fail@plt+0x16330>
   27eb8:	movw	r1, #7022	; 0x1b6e
   27ebc:	sub	r6, fp, #72	; 0x48
   27ec0:	mov	r0, r6
   27ec4:	movt	r1, #5
   27ec8:	bl	123d4 <strcmp@plt>
   27ecc:	cmp	r0, #0
   27ed0:	beq	288c0 <__assert_fail@plt+0x15e44>
   27ed4:	movw	r1, #7027	; 0x1b73
   27ed8:	mov	r0, r6
   27edc:	movt	r1, #5
   27ee0:	bl	123d4 <strcmp@plt>
   27ee4:	cmp	r0, #0
   27ee8:	beq	288d8 <__assert_fail@plt+0x15e5c>
   27eec:	movw	r1, #7030	; 0x1b76
   27ef0:	mov	r0, r6
   27ef4:	movt	r1, #5
   27ef8:	bl	123d4 <strcmp@plt>
   27efc:	cmp	r0, #0
   27f00:	beq	288e8 <__assert_fail@plt+0x15e6c>
   27f04:	mov	r0, r6
   27f08:	bl	12788 <strlen@plt>
   27f0c:	mov	r8, r0
   27f10:	cmp	r0, #3
   27f14:	beq	288f8 <__assert_fail@plt+0x15e7c>
   27f18:	cmp	r8, #4
   27f1c:	ldrbeq	r0, [fp, #-69]	; 0xffffffbb
   27f20:	cmpeq	r0, #46	; 0x2e
   27f24:	beq	288f8 <__assert_fail@plt+0x15e7c>
   27f28:	movw	r1, #7035	; 0x1b7b
   27f2c:	sub	r0, fp, #72	; 0x48
   27f30:	movt	r1, #5
   27f34:	bl	123d4 <strcmp@plt>
   27f38:	cmp	r0, #0
   27f3c:	movw	r0, #5332	; 0x14d4
   27f40:	movt	r0, #5
   27f44:	beq	28dac <__assert_fail@plt+0x16330>
   27f48:	movw	r1, #7043	; 0x1b83
   27f4c:	sub	r6, fp, #72	; 0x48
   27f50:	mov	r0, r6
   27f54:	movt	r1, #5
   27f58:	bl	123d4 <strcmp@plt>
   27f5c:	cmp	r0, #0
   27f60:	beq	28c44 <__assert_fail@plt+0x161c8>
   27f64:	movw	r1, #7052	; 0x1b8c
   27f68:	mov	r0, r6
   27f6c:	movt	r1, #5
   27f70:	bl	123d4 <strcmp@plt>
   27f74:	cmp	r0, #0
   27f78:	beq	28c50 <__assert_fail@plt+0x161d4>
   27f7c:	movw	r1, #7058	; 0x1b92
   27f80:	mov	r0, r6
   27f84:	movt	r1, #5
   27f88:	bl	123d4 <strcmp@plt>
   27f8c:	cmp	r0, #0
   27f90:	beq	28c70 <__assert_fail@plt+0x161f4>
   27f94:	movw	r1, #7064	; 0x1b98
   27f98:	mov	r0, r6
   27f9c:	movt	r1, #5
   27fa0:	bl	123d4 <strcmp@plt>
   27fa4:	cmp	r0, #0
   27fa8:	beq	28c80 <__assert_fail@plt+0x16204>
   27fac:	movw	r1, #7068	; 0x1b9c
   27fb0:	mov	r0, r6
   27fb4:	movt	r1, #5
   27fb8:	bl	123d4 <strcmp@plt>
   27fbc:	cmp	r0, #0
   27fc0:	beq	28c90 <__assert_fail@plt+0x16214>
   27fc4:	movw	r1, #7073	; 0x1ba1
   27fc8:	mov	r0, r6
   27fcc:	movt	r1, #5
   27fd0:	bl	123d4 <strcmp@plt>
   27fd4:	cmp	r0, #0
   27fd8:	beq	28ca0 <__assert_fail@plt+0x16224>
   27fdc:	movw	r1, #7078	; 0x1ba6
   27fe0:	mov	r0, r6
   27fe4:	movt	r1, #5
   27fe8:	bl	123d4 <strcmp@plt>
   27fec:	cmp	r0, #0
   27ff0:	beq	28cb0 <__assert_fail@plt+0x16234>
   27ff4:	movw	r1, #7085	; 0x1bad
   27ff8:	mov	r0, r6
   27ffc:	movt	r1, #5
   28000:	bl	123d4 <strcmp@plt>
   28004:	cmp	r0, #0
   28008:	beq	28cc0 <__assert_fail@plt+0x16244>
   2800c:	movw	r1, #7095	; 0x1bb7
   28010:	mov	r0, r6
   28014:	movt	r1, #5
   28018:	bl	123d4 <strcmp@plt>
   2801c:	cmp	r0, #0
   28020:	beq	28cd0 <__assert_fail@plt+0x16254>
   28024:	movw	r1, #7100	; 0x1bbc
   28028:	mov	r0, r6
   2802c:	movt	r1, #5
   28030:	bl	123d4 <strcmp@plt>
   28034:	cmp	r0, #0
   28038:	beq	28ce0 <__assert_fail@plt+0x16264>
   2803c:	movw	r1, #7108	; 0x1bc4
   28040:	mov	r0, r6
   28044:	movt	r1, #5
   28048:	bl	123d4 <strcmp@plt>
   2804c:	cmp	r0, #0
   28050:	beq	28cf0 <__assert_fail@plt+0x16274>
   28054:	movw	r1, #7117	; 0x1bcd
   28058:	sub	r0, fp, #72	; 0x48
   2805c:	movt	r1, #5
   28060:	bl	123d4 <strcmp@plt>
   28064:	cmp	r0, #0
   28068:	beq	28d00 <__assert_fail@plt+0x16284>
   2806c:	movw	r1, #7126	; 0x1bd6
   28070:	sub	r0, fp, #72	; 0x48
   28074:	movt	r1, #5
   28078:	bl	123d4 <strcmp@plt>
   2807c:	cmp	r0, #0
   28080:	beq	28d10 <__assert_fail@plt+0x16294>
   28084:	movw	r1, #7133	; 0x1bdd
   28088:	sub	r0, fp, #72	; 0x48
   2808c:	movt	r1, #5
   28090:	bl	123d4 <strcmp@plt>
   28094:	cmp	r0, #0
   28098:	beq	28d20 <__assert_fail@plt+0x162a4>
   2809c:	movw	r1, #7140	; 0x1be4
   280a0:	sub	r0, fp, #72	; 0x48
   280a4:	movt	r1, #5
   280a8:	bl	123d4 <strcmp@plt>
   280ac:	cmp	r0, #0
   280b0:	beq	28d30 <__assert_fail@plt+0x162b4>
   280b4:	movw	r1, #7148	; 0x1bec
   280b8:	sub	r0, fp, #72	; 0x48
   280bc:	movt	r1, #5
   280c0:	bl	123d4 <strcmp@plt>
   280c4:	cmp	r0, #0
   280c8:	beq	28d40 <__assert_fail@plt+0x162c4>
   280cc:	movw	r1, #7153	; 0x1bf1
   280d0:	sub	r0, fp, #72	; 0x48
   280d4:	movt	r1, #5
   280d8:	bl	123d4 <strcmp@plt>
   280dc:	cmp	r0, #0
   280e0:	beq	28d50 <__assert_fail@plt+0x162d4>
   280e4:	movw	r1, #7163	; 0x1bfb
   280e8:	sub	r0, fp, #72	; 0x48
   280ec:	movt	r1, #5
   280f0:	bl	123d4 <strcmp@plt>
   280f4:	cmp	r0, #0
   280f8:	beq	28d60 <__assert_fail@plt+0x162e4>
   280fc:	movw	r1, #7170	; 0x1c02
   28100:	sub	r0, fp, #72	; 0x48
   28104:	movt	r1, #5
   28108:	bl	123d4 <strcmp@plt>
   2810c:	cmp	r0, #0
   28110:	beq	28d70 <__assert_fail@plt+0x162f4>
   28114:	movw	r1, #7179	; 0x1c0b
   28118:	sub	r0, fp, #72	; 0x48
   2811c:	movt	r1, #5
   28120:	bl	123d4 <strcmp@plt>
   28124:	cmp	r0, #0
   28128:	beq	28d80 <__assert_fail@plt+0x16304>
   2812c:	movw	r1, #7184	; 0x1c10
   28130:	sub	r0, fp, #72	; 0x48
   28134:	movt	r1, #5
   28138:	bl	123d4 <strcmp@plt>
   2813c:	cmp	r0, #0
   28140:	beq	28d90 <__assert_fail@plt+0x16314>
   28144:	movw	r1, #7190	; 0x1c16
   28148:	sub	r0, fp, #72	; 0x48
   2814c:	movt	r1, #5
   28150:	bl	123d4 <strcmp@plt>
   28154:	cmp	r0, #0
   28158:	beq	28da0 <__assert_fail@plt+0x16324>
   2815c:	movw	r1, #7197	; 0x1c1d
   28160:	sub	r0, fp, #72	; 0x48
   28164:	movt	r1, #5
   28168:	bl	123d4 <strcmp@plt>
   2816c:	cmp	r0, #0
   28170:	beq	28ba4 <__assert_fail@plt+0x16128>
   28174:	mov	r0, r4
   28178:	sub	r1, fp, #72	; 0x48
   2817c:	bl	2d850 <__assert_fail@plt+0x1add4>
   28180:	cmp	r0, #0
   28184:	bne	28dac <__assert_fail@plt+0x16330>
   28188:	movw	r1, #7403	; 0x1ceb
   2818c:	sub	r0, fp, #72	; 0x48
   28190:	movt	r1, #5
   28194:	bl	123d4 <strcmp@plt>
   28198:	cmp	r0, #0
   2819c:	movw	r0, #5632	; 0x1600
   281a0:	movt	r0, #5
   281a4:	beq	28dac <__assert_fail@plt+0x16330>
   281a8:	movw	r1, #7407	; 0x1cef
   281ac:	sub	r0, fp, #72	; 0x48
   281b0:	movt	r1, #5
   281b4:	bl	123d4 <strcmp@plt>
   281b8:	cmp	r0, #0
   281bc:	movw	r0, #5644	; 0x160c
   281c0:	movt	r0, #5
   281c4:	beq	28dac <__assert_fail@plt+0x16330>
   281c8:	movw	r1, #7412	; 0x1cf4
   281cc:	sub	r0, fp, #72	; 0x48
   281d0:	movt	r1, #5
   281d4:	bl	123d4 <strcmp@plt>
   281d8:	movw	r1, #5644	; 0x160c
   281dc:	cmp	r0, #0
   281e0:	movt	r1, #5
   281e4:	add	r6, r1, #12
   281e8:	beq	2be98 <__assert_fail@plt+0x1941c>
   281ec:	movw	r1, #7418	; 0x1cfa
   281f0:	sub	r0, fp, #72	; 0x48
   281f4:	movt	r1, #5
   281f8:	bl	123d4 <strcmp@plt>
   281fc:	movw	r1, #5644	; 0x160c
   28200:	cmp	r0, #0
   28204:	movt	r1, #5
   28208:	add	r1, r1, #24
   2820c:	str	r1, [sp, #236]	; 0xec
   28210:	beq	2bea0 <__assert_fail@plt+0x19424>
   28214:	movw	r1, #7428	; 0x1d04
   28218:	sub	r0, fp, #72	; 0x48
   2821c:	movt	r1, #5
   28220:	bl	123d4 <strcmp@plt>
   28224:	movw	r1, #5644	; 0x160c
   28228:	cmp	r0, #0
   2822c:	movt	r1, #5
   28230:	add	r1, r1, #36	; 0x24
   28234:	str	r1, [sp, #232]	; 0xe8
   28238:	beq	2bea8 <__assert_fail@plt+0x1942c>
   2823c:	movw	r1, #7193	; 0x1c19
   28240:	sub	r0, fp, #72	; 0x48
   28244:	movt	r1, #5
   28248:	bl	123d4 <strcmp@plt>
   2824c:	movw	r1, #5644	; 0x160c
   28250:	cmp	r0, #0
   28254:	movt	r1, #5
   28258:	add	r1, r1, #48	; 0x30
   2825c:	str	r1, [sp, #228]	; 0xe4
   28260:	beq	2beb0 <__assert_fail@plt+0x19434>
   28264:	movw	r1, #7433	; 0x1d09
   28268:	sub	r0, fp, #72	; 0x48
   2826c:	movt	r1, #5
   28270:	bl	123d4 <strcmp@plt>
   28274:	movw	r1, #5644	; 0x160c
   28278:	cmp	r0, #0
   2827c:	movt	r1, #5
   28280:	add	r1, r1, #60	; 0x3c
   28284:	str	r1, [sp, #224]	; 0xe0
   28288:	beq	2beb8 <__assert_fail@plt+0x1943c>
   2828c:	movw	r1, #7438	; 0x1d0e
   28290:	sub	r0, fp, #72	; 0x48
   28294:	movt	r1, #5
   28298:	bl	123d4 <strcmp@plt>
   2829c:	movw	r1, #5644	; 0x160c
   282a0:	cmp	r0, #0
   282a4:	movt	r1, #5
   282a8:	add	r1, r1, #72	; 0x48
   282ac:	str	r1, [sp, #220]	; 0xdc
   282b0:	beq	2bec0 <__assert_fail@plt+0x19444>
   282b4:	movw	r1, #7445	; 0x1d15
   282b8:	sub	r0, fp, #72	; 0x48
   282bc:	movt	r1, #5
   282c0:	bl	123d4 <strcmp@plt>
   282c4:	movw	r1, #5644	; 0x160c
   282c8:	cmp	r0, #0
   282cc:	movt	r1, #5
   282d0:	add	r1, r1, #84	; 0x54
   282d4:	str	r1, [sp, #216]	; 0xd8
   282d8:	beq	2bec8 <__assert_fail@plt+0x1944c>
   282dc:	movw	r1, #7449	; 0x1d19
   282e0:	sub	r0, fp, #72	; 0x48
   282e4:	movt	r1, #5
   282e8:	bl	123d4 <strcmp@plt>
   282ec:	movw	r1, #5644	; 0x160c
   282f0:	cmp	r0, #0
   282f4:	movt	r1, #5
   282f8:	add	r1, r1, #96	; 0x60
   282fc:	str	r1, [sp, #212]	; 0xd4
   28300:	beq	2bed0 <__assert_fail@plt+0x19454>
   28304:	movw	r1, #7456	; 0x1d20
   28308:	sub	r0, fp, #72	; 0x48
   2830c:	movt	r1, #5
   28310:	bl	123d4 <strcmp@plt>
   28314:	movw	r1, #5644	; 0x160c
   28318:	cmp	r0, #0
   2831c:	movt	r1, #5
   28320:	add	r7, r1, #108	; 0x6c
   28324:	beq	2bed8 <__assert_fail@plt+0x1945c>
   28328:	sub	r1, r8, #1
   2832c:	sub	r0, fp, #72	; 0x48
   28330:	ldrb	r0, [r0, r1]
   28334:	str	r1, [sp, #208]	; 0xd0
   28338:	cmp	r0, #83	; 0x53
   2833c:	bne	28478 <__assert_fail@plt+0x159fc>
   28340:	ldr	r2, [sp, #208]	; 0xd0
   28344:	sub	r0, fp, #72	; 0x48
   28348:	mov	r1, #0
   2834c:	strb	r1, [r0, r2]
   28350:	movw	r1, #7407	; 0x1cef
   28354:	movt	r1, #5
   28358:	bl	123d4 <strcmp@plt>
   2835c:	cmp	r0, #0
   28360:	movw	r0, #5644	; 0x160c
   28364:	movt	r0, #5
   28368:	beq	28dac <__assert_fail@plt+0x16330>
   2836c:	movw	r1, #7412	; 0x1cf4
   28370:	sub	r0, fp, #72	; 0x48
   28374:	movt	r1, #5
   28378:	bl	123d4 <strcmp@plt>
   2837c:	cmp	r0, #0
   28380:	mov	r0, r6
   28384:	beq	28dac <__assert_fail@plt+0x16330>
   28388:	movw	r1, #7418	; 0x1cfa
   2838c:	sub	r0, fp, #72	; 0x48
   28390:	movt	r1, #5
   28394:	bl	123d4 <strcmp@plt>
   28398:	cmp	r0, #0
   2839c:	ldr	r0, [sp, #236]	; 0xec
   283a0:	beq	28dac <__assert_fail@plt+0x16330>
   283a4:	movw	r1, #7428	; 0x1d04
   283a8:	sub	r0, fp, #72	; 0x48
   283ac:	movt	r1, #5
   283b0:	bl	123d4 <strcmp@plt>
   283b4:	cmp	r0, #0
   283b8:	ldr	r0, [sp, #232]	; 0xe8
   283bc:	beq	28dac <__assert_fail@plt+0x16330>
   283c0:	movw	r1, #7193	; 0x1c19
   283c4:	sub	r0, fp, #72	; 0x48
   283c8:	movt	r1, #5
   283cc:	bl	123d4 <strcmp@plt>
   283d0:	cmp	r0, #0
   283d4:	ldr	r0, [sp, #228]	; 0xe4
   283d8:	beq	28dac <__assert_fail@plt+0x16330>
   283dc:	movw	r1, #7433	; 0x1d09
   283e0:	sub	r0, fp, #72	; 0x48
   283e4:	movt	r1, #5
   283e8:	bl	123d4 <strcmp@plt>
   283ec:	cmp	r0, #0
   283f0:	ldr	r0, [sp, #224]	; 0xe0
   283f4:	beq	28dac <__assert_fail@plt+0x16330>
   283f8:	movw	r1, #7438	; 0x1d0e
   283fc:	sub	r0, fp, #72	; 0x48
   28400:	movt	r1, #5
   28404:	bl	123d4 <strcmp@plt>
   28408:	cmp	r0, #0
   2840c:	ldr	r0, [sp, #220]	; 0xdc
   28410:	beq	28dac <__assert_fail@plt+0x16330>
   28414:	movw	r1, #7445	; 0x1d15
   28418:	sub	r0, fp, #72	; 0x48
   2841c:	movt	r1, #5
   28420:	bl	123d4 <strcmp@plt>
   28424:	cmp	r0, #0
   28428:	ldr	r0, [sp, #216]	; 0xd8
   2842c:	beq	28dac <__assert_fail@plt+0x16330>
   28430:	movw	r1, #7449	; 0x1d19
   28434:	sub	r0, fp, #72	; 0x48
   28438:	movt	r1, #5
   2843c:	bl	123d4 <strcmp@plt>
   28440:	cmp	r0, #0
   28444:	ldr	r0, [sp, #212]	; 0xd4
   28448:	beq	28dac <__assert_fail@plt+0x16330>
   2844c:	movw	r1, #7456	; 0x1d20
   28450:	sub	r0, fp, #72	; 0x48
   28454:	movt	r1, #5
   28458:	bl	123d4 <strcmp@plt>
   2845c:	cmp	r0, #0
   28460:	mov	r0, r7
   28464:	beq	28dac <__assert_fail@plt+0x16330>
   28468:	ldr	r2, [sp, #208]	; 0xd0
   2846c:	sub	r0, fp, #72	; 0x48
   28470:	mov	r1, #83	; 0x53
   28474:	strb	r1, [r0, r2]
   28478:	movw	r1, #7460	; 0x1d24
   2847c:	sub	r0, fp, #72	; 0x48
   28480:	movt	r1, #5
   28484:	bl	123d4 <strcmp@plt>
   28488:	cmp	r0, #0
   2848c:	movw	r0, #5776	; 0x1690
   28490:	movt	r0, #5
   28494:	beq	28dac <__assert_fail@plt+0x16330>
   28498:	movw	r1, #7469	; 0x1d2d
   2849c:	sub	r0, fp, #72	; 0x48
   284a0:	movt	r1, #5
   284a4:	bl	123d4 <strcmp@plt>
   284a8:	cmp	r0, #0
   284ac:	beq	2bee0 <__assert_fail@plt+0x19464>
   284b0:	movw	r1, #7479	; 0x1d37
   284b4:	sub	r0, fp, #72	; 0x48
   284b8:	movt	r1, #5
   284bc:	bl	123d4 <strcmp@plt>
   284c0:	cmp	r0, #0
   284c4:	beq	2beec <__assert_fail@plt+0x19470>
   284c8:	movw	r1, #7485	; 0x1d3d
   284cc:	sub	r0, fp, #72	; 0x48
   284d0:	movt	r1, #5
   284d4:	bl	123d4 <strcmp@plt>
   284d8:	cmp	r0, #0
   284dc:	beq	2befc <__assert_fail@plt+0x19480>
   284e0:	movw	r1, #7489	; 0x1d41
   284e4:	sub	r0, fp, #72	; 0x48
   284e8:	movt	r1, #5
   284ec:	bl	123d4 <strcmp@plt>
   284f0:	cmp	r0, #0
   284f4:	beq	2bf0c <__assert_fail@plt+0x19490>
   284f8:	movw	r1, #7494	; 0x1d46
   284fc:	sub	r0, fp, #72	; 0x48
   28500:	movt	r1, #5
   28504:	bl	123d4 <strcmp@plt>
   28508:	cmp	r0, #0
   2850c:	beq	2bf1c <__assert_fail@plt+0x194a0>
   28510:	movw	r1, #7499	; 0x1d4b
   28514:	sub	r0, fp, #72	; 0x48
   28518:	movt	r1, #5
   2851c:	bl	123d4 <strcmp@plt>
   28520:	cmp	r0, #0
   28524:	beq	2bf2c <__assert_fail@plt+0x194b0>
   28528:	movw	r1, #7504	; 0x1d50
   2852c:	sub	r0, fp, #72	; 0x48
   28530:	movt	r1, #5
   28534:	bl	123d4 <strcmp@plt>
   28538:	cmp	r0, #0
   2853c:	beq	2bf3c <__assert_fail@plt+0x194c0>
   28540:	movw	r1, #7510	; 0x1d56
   28544:	sub	r0, fp, #72	; 0x48
   28548:	movt	r1, #5
   2854c:	bl	123d4 <strcmp@plt>
   28550:	cmp	r0, #0
   28554:	beq	2bf4c <__assert_fail@plt+0x194d0>
   28558:	movw	r1, #7516	; 0x1d5c
   2855c:	sub	r0, fp, #72	; 0x48
   28560:	movt	r1, #5
   28564:	bl	123d4 <strcmp@plt>
   28568:	cmp	r0, #0
   2856c:	beq	2bf5c <__assert_fail@plt+0x194e0>
   28570:	movw	r1, #7523	; 0x1d63
   28574:	sub	r0, fp, #72	; 0x48
   28578:	movt	r1, #5
   2857c:	bl	123d4 <strcmp@plt>
   28580:	cmp	r0, #0
   28584:	beq	2bf6c <__assert_fail@plt+0x194f0>
   28588:	movw	r1, #7529	; 0x1d69
   2858c:	sub	r0, fp, #72	; 0x48
   28590:	movt	r1, #5
   28594:	bl	123d4 <strcmp@plt>
   28598:	cmp	r0, #0
   2859c:	beq	2bf7c <__assert_fail@plt+0x19500>
   285a0:	movw	r1, #7535	; 0x1d6f
   285a4:	sub	r0, fp, #72	; 0x48
   285a8:	movt	r1, #5
   285ac:	bl	123d4 <strcmp@plt>
   285b0:	cmp	r0, #0
   285b4:	beq	2bf8c <__assert_fail@plt+0x19510>
   285b8:	movw	r1, #7543	; 0x1d77
   285bc:	sub	r0, fp, #72	; 0x48
   285c0:	movt	r1, #5
   285c4:	bl	123d4 <strcmp@plt>
   285c8:	cmp	r0, #0
   285cc:	beq	2bf9c <__assert_fail@plt+0x19520>
   285d0:	movw	r1, #7550	; 0x1d7e
   285d4:	sub	r0, fp, #72	; 0x48
   285d8:	movt	r1, #5
   285dc:	bl	123d4 <strcmp@plt>
   285e0:	cmp	r0, #0
   285e4:	beq	2bfac <__assert_fail@plt+0x19530>
   285e8:	movw	r1, #7556	; 0x1d84
   285ec:	sub	r0, fp, #72	; 0x48
   285f0:	movt	r1, #5
   285f4:	bl	123d4 <strcmp@plt>
   285f8:	cmp	r0, #0
   285fc:	beq	2bfbc <__assert_fail@plt+0x19540>
   28600:	movw	r1, #7562	; 0x1d8a
   28604:	sub	r0, fp, #72	; 0x48
   28608:	movt	r1, #5
   2860c:	bl	123d4 <strcmp@plt>
   28610:	cmp	r0, #0
   28614:	beq	2bfcc <__assert_fail@plt+0x19550>
   28618:	movw	r1, #7571	; 0x1d93
   2861c:	sub	r0, fp, #72	; 0x48
   28620:	movt	r1, #5
   28624:	bl	123d4 <strcmp@plt>
   28628:	cmp	r0, #0
   2862c:	beq	2bfdc <__assert_fail@plt+0x19560>
   28630:	movw	r1, #7579	; 0x1d9b
   28634:	sub	r0, fp, #72	; 0x48
   28638:	movt	r1, #5
   2863c:	bl	123d4 <strcmp@plt>
   28640:	cmp	r0, #0
   28644:	beq	2bfec <__assert_fail@plt+0x19570>
   28648:	movw	r1, #7583	; 0x1d9f
   2864c:	sub	r0, fp, #72	; 0x48
   28650:	movt	r1, #5
   28654:	bl	123d4 <strcmp@plt>
   28658:	cmp	r0, #0
   2865c:	beq	2bffc <__assert_fail@plt+0x19580>
   28660:	ldrb	r2, [fp, #-72]	; 0xffffffb8
   28664:	cmp	r8, #1
   28668:	bne	2c00c <__assert_fail@plt+0x19590>
   2866c:	cmp	r2, #90	; 0x5a
   28670:	bhi	2c014 <__assert_fail@plt+0x19598>
   28674:	movw	r0, #6028	; 0x178c
   28678:	add	r1, pc, #8
   2867c:	mov	r7, #63	; 0x3f
   28680:	movt	r0, #5
   28684:	ldr	pc, [r1, r2, lsl #2]
   28688:	andeq	r8, r2, r8, asr #27
   2868c:	andeq	ip, r2, r4, lsl r0
   28690:	andeq	ip, r2, r4, lsl r0
   28694:	andeq	ip, r2, r4, lsl r0
   28698:	andeq	ip, r2, r4, lsl r0
   2869c:	andeq	ip, r2, r4, lsl r0
   286a0:	andeq	ip, r2, r4, lsl r0
   286a4:	andeq	ip, r2, r4, lsl r0
   286a8:	andeq	ip, r2, r4, lsl r0
   286ac:	andeq	ip, r2, r4, lsl r0
   286b0:	andeq	ip, r2, r4, lsl r0
   286b4:	andeq	ip, r2, r4, lsl r0
   286b8:	andeq	ip, r2, r4, lsl r0
   286bc:	andeq	ip, r2, r4, lsl r0
   286c0:	andeq	ip, r2, r4, lsl r0
   286c4:	andeq	ip, r2, r4, lsl r0
   286c8:	andeq	ip, r2, r4, lsl r0
   286cc:	andeq	ip, r2, r4, lsl r0
   286d0:	andeq	ip, r2, r4, lsl r0
   286d4:	andeq	ip, r2, r4, lsl r0
   286d8:	andeq	ip, r2, r4, lsl r0
   286dc:	andeq	ip, r2, r4, lsl r0
   286e0:	andeq	ip, r2, r4, lsl r0
   286e4:	andeq	ip, r2, r4, lsl r0
   286e8:	andeq	ip, r2, r4, lsl r0
   286ec:	andeq	ip, r2, r4, lsl r0
   286f0:	andeq	ip, r2, r4, lsl r0
   286f4:	andeq	ip, r2, r4, lsl r0
   286f8:	andeq	ip, r2, r4, lsl r0
   286fc:	andeq	ip, r2, r4, lsl r0
   28700:	andeq	ip, r2, r4, lsl r0
   28704:	andeq	ip, r2, r4, lsl r0
   28708:	andeq	ip, r2, r4, lsl r0
   2870c:	andeq	ip, r2, r4, lsl r0
   28710:	andeq	ip, r2, r4, lsl r0
   28714:	andeq	ip, r2, r4, lsl r0
   28718:	andeq	ip, r2, r4, lsl r0
   2871c:	andeq	ip, r2, r4, lsl r0
   28720:	andeq	ip, r2, r4, lsl r0
   28724:	andeq	ip, r2, r4, lsl r0
   28728:	andeq	ip, r2, r4, lsl r0
   2872c:	andeq	ip, r2, r4, lsl r0
   28730:	andeq	ip, r2, r4, lsl r0
   28734:	andeq	ip, r2, r4, lsl r0
   28738:	andeq	ip, r2, r4, lsl r0
   2873c:	andeq	ip, r2, r4, lsl r0
   28740:	andeq	ip, r2, r4, lsl r0
   28744:	andeq	ip, r2, r4, lsl r0
   28748:	andeq	ip, r2, r4, lsl r0
   2874c:	andeq	ip, r2, r4, lsl r0
   28750:	andeq	ip, r2, r4, lsl r0
   28754:	andeq	ip, r2, r4, lsl r0
   28758:	andeq	ip, r2, r4, lsl r0
   2875c:	andeq	ip, r2, r4, lsl r0
   28760:	andeq	ip, r2, r4, lsl r0
   28764:	andeq	ip, r2, r4, lsl r0
   28768:	andeq	ip, r2, r4, lsl r0
   2876c:	andeq	ip, r2, r4, lsl r0
   28770:	andeq	ip, r2, r4, lsl r0
   28774:	andeq	ip, r2, r4, lsl r0
   28778:	andeq	ip, r2, r4, lsl r0
   2877c:	andeq	ip, r2, r4, lsl r0
   28780:	andeq	ip, r2, r4, lsl r0
   28784:	andeq	ip, r2, r4, lsl r0
   28788:	andeq	ip, r2, r4, lsl r0
   2878c:	andeq	r8, r2, ip, lsr #27
   28790:	strdeq	r8, [r2], -r4
   28794:	muleq	r2, ip, r0
   28798:	andeq	ip, r2, ip, lsr #1
   2879c:	strheq	ip, [r2], -ip	; <UNPREDICTABLE>
   287a0:	andeq	ip, r2, ip, asr #1
   287a4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   287a8:	andeq	ip, r2, ip, ror #1
   287ac:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   287b0:	andeq	ip, r2, r4, lsl r0
   287b4:	andeq	ip, r2, ip, lsl #2
   287b8:	andeq	ip, r2, ip, lsl r1
   287bc:	andeq	ip, r2, ip, lsr #2
   287c0:	andeq	ip, r2, ip, lsr r1
   287c4:	andeq	ip, r2, ip, asr #2
   287c8:	andeq	ip, r2, ip, asr r1
   287cc:	andeq	ip, r2, ip, ror #2
   287d0:	andeq	ip, r2, ip, ror r1
   287d4:	andeq	ip, r2, ip, lsl #3
   287d8:	muleq	r2, ip, r1
   287dc:	andeq	ip, r2, ip, lsr #3
   287e0:			; <UNDEFINED> instruction: 0x0002c1bc
   287e4:	andeq	ip, r2, ip, asr #3
   287e8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   287ec:	andeq	ip, r2, r8, ror #3
   287f0:	strdeq	ip, [r2], -r4
   287f4:	movw	r0, #6028	; 0x178c
   287f8:	movt	r0, #5
   287fc:	b	288c8 <__assert_fail@plt+0x15e4c>
   28800:	mov	ip, #1
   28804:	mov	r6, r2
   28808:	mov	r0, #0
   2880c:	cmn	r0, #1
   28810:	ble	28828 <__assert_fail@plt+0x15dac>
   28814:	movw	r3, #52428	; 0xcccc
   28818:	movt	r3, #3276	; 0xccc
   2881c:	cmp	r0, r3
   28820:	ble	2883c <__assert_fail@plt+0x15dc0>
   28824:	b	288b0 <__assert_fail@plt+0x15e34>
   28828:	beq	2883c <__assert_fail@plt+0x15dc0>
   2882c:	mov	r3, #-2147483648	; 0x80000000
   28830:	sdiv	r3, r3, r0
   28834:	cmp	r3, #10
   28838:	blt	288b0 <__assert_fail@plt+0x15e34>
   2883c:	add	r3, r0, r0, lsl #2
   28840:	lsl	r0, r3, #1
   28844:	uxtab	r0, r0, r1
   28848:	sub	r0, r0, #48	; 0x30
   2884c:	cmp	r0, r3, lsl #1
   28850:	bvs	288b0 <__assert_fail@plt+0x15e34>
   28854:	ldrb	r1, [r6, #1]!
   28858:	sub	r3, r1, #48	; 0x30
   2885c:	cmp	r3, #10
   28860:	bcc	2880c <__assert_fail@plt+0x15d90>
   28864:	sub	r7, r6, #1
   28868:	mov	lr, #0
   2886c:	orr	r1, r1, #2
   28870:	cmp	r1, #46	; 0x2e
   28874:	beq	27c64 <__assert_fail@plt+0x151e8>
   28878:	cmp	ip, #0
   2887c:	movw	r1, #274	; 0x112
   28880:	ldr	r3, [sp, #180]	; 0xb4
   28884:	str	r6, [r4]
   28888:	str	r0, [sp, #124]	; 0x7c
   2888c:	movweq	r1, #275	; 0x113
   28890:	str	r1, [sp, #196]	; 0xc4
   28894:	sub	r1, r6, r2
   28898:	str	r1, [sp, #132]	; 0x84
   2889c:	asr	r1, r0, #31
   288a0:	str	r1, [sp, #128]	; 0x80
   288a4:	lsr	r1, ip, #31
   288a8:	str	r1, [sp, #184]	; 0xb8
   288ac:	b	28df0 <__assert_fail@plt+0x16374>
   288b0:	ldr	r3, [sp, #180]	; 0xb4
   288b4:	mov	r0, #63	; 0x3f
   288b8:	str	r0, [sp, #196]	; 0xc4
   288bc:	b	28df0 <__assert_fail@plt+0x16374>
   288c0:	movw	r0, #5272	; 0x1498
   288c4:	movt	r0, #5
   288c8:	add	r0, r0, #12
   288cc:	b	28dac <__assert_fail@plt+0x16330>
   288d0:	ldr	r6, [sp, #236]	; 0xec
   288d4:	b	28bb8 <__assert_fail@plt+0x1613c>
   288d8:	movw	r0, #5272	; 0x1498
   288dc:	movt	r0, #5
   288e0:	add	r0, r0, #24
   288e4:	b	28dac <__assert_fail@plt+0x16330>
   288e8:	movw	r0, #5272	; 0x1498
   288ec:	movt	r0, #5
   288f0:	add	r0, r0, #36	; 0x24
   288f4:	b	28dac <__assert_fail@plt+0x16330>
   288f8:	movw	r1, #7035	; 0x1b7b
   288fc:	sub	r0, fp, #72	; 0x48
   28900:	mov	r2, #3
   28904:	movt	r1, #5
   28908:	bl	12a1c <strncmp@plt>
   2890c:	cmp	r0, #0
   28910:	movw	r0, #5332	; 0x14d4
   28914:	movt	r0, #5
   28918:	beq	28dac <__assert_fail@plt+0x16330>
   2891c:	movw	r1, #7043	; 0x1b83
   28920:	sub	r6, fp, #72	; 0x48
   28924:	mov	r2, #3
   28928:	mov	r0, r6
   2892c:	movt	r1, #5
   28930:	bl	12a1c <strncmp@plt>
   28934:	cmp	r0, #0
   28938:	beq	28c44 <__assert_fail@plt+0x161c8>
   2893c:	movw	r1, #7052	; 0x1b8c
   28940:	mov	r0, r6
   28944:	mov	r2, #3
   28948:	movt	r1, #5
   2894c:	bl	12a1c <strncmp@plt>
   28950:	cmp	r0, #0
   28954:	beq	28c50 <__assert_fail@plt+0x161d4>
   28958:	movw	r1, #7058	; 0x1b92
   2895c:	mov	r0, r6
   28960:	mov	r2, #3
   28964:	movt	r1, #5
   28968:	bl	12a1c <strncmp@plt>
   2896c:	cmp	r0, #0
   28970:	beq	28c70 <__assert_fail@plt+0x161f4>
   28974:	movw	r1, #7064	; 0x1b98
   28978:	mov	r0, r6
   2897c:	mov	r2, #3
   28980:	movt	r1, #5
   28984:	bl	12a1c <strncmp@plt>
   28988:	cmp	r0, #0
   2898c:	beq	28c80 <__assert_fail@plt+0x16204>
   28990:	movw	r1, #7068	; 0x1b9c
   28994:	mov	r0, r6
   28998:	mov	r2, #3
   2899c:	movt	r1, #5
   289a0:	bl	12a1c <strncmp@plt>
   289a4:	cmp	r0, #0
   289a8:	beq	28c90 <__assert_fail@plt+0x16214>
   289ac:	movw	r1, #7073	; 0x1ba1
   289b0:	mov	r0, r6
   289b4:	mov	r2, #3
   289b8:	movt	r1, #5
   289bc:	bl	12a1c <strncmp@plt>
   289c0:	cmp	r0, #0
   289c4:	beq	28ca0 <__assert_fail@plt+0x16224>
   289c8:	movw	r1, #7078	; 0x1ba6
   289cc:	mov	r0, r6
   289d0:	mov	r2, #3
   289d4:	movt	r1, #5
   289d8:	bl	12a1c <strncmp@plt>
   289dc:	cmp	r0, #0
   289e0:	beq	28cb0 <__assert_fail@plt+0x16234>
   289e4:	movw	r1, #7085	; 0x1bad
   289e8:	mov	r0, r6
   289ec:	mov	r2, #3
   289f0:	movt	r1, #5
   289f4:	bl	12a1c <strncmp@plt>
   289f8:	cmp	r0, #0
   289fc:	beq	28cc0 <__assert_fail@plt+0x16244>
   28a00:	movw	r1, #7095	; 0x1bb7
   28a04:	mov	r0, r6
   28a08:	mov	r2, #3
   28a0c:	movt	r1, #5
   28a10:	bl	12a1c <strncmp@plt>
   28a14:	cmp	r0, #0
   28a18:	beq	28cd0 <__assert_fail@plt+0x16254>
   28a1c:	movw	r1, #7100	; 0x1bbc
   28a20:	mov	r0, r6
   28a24:	mov	r2, #3
   28a28:	movt	r1, #5
   28a2c:	bl	12a1c <strncmp@plt>
   28a30:	cmp	r0, #0
   28a34:	beq	28ce0 <__assert_fail@plt+0x16264>
   28a38:	movw	r1, #7108	; 0x1bc4
   28a3c:	mov	r0, r6
   28a40:	mov	r2, #3
   28a44:	movt	r1, #5
   28a48:	bl	12a1c <strncmp@plt>
   28a4c:	cmp	r0, #0
   28a50:	beq	28cf0 <__assert_fail@plt+0x16274>
   28a54:	movw	r1, #7117	; 0x1bcd
   28a58:	sub	r0, fp, #72	; 0x48
   28a5c:	mov	r2, #3
   28a60:	movt	r1, #5
   28a64:	bl	12a1c <strncmp@plt>
   28a68:	cmp	r0, #0
   28a6c:	beq	28d00 <__assert_fail@plt+0x16284>
   28a70:	movw	r1, #7126	; 0x1bd6
   28a74:	sub	r0, fp, #72	; 0x48
   28a78:	mov	r2, #3
   28a7c:	movt	r1, #5
   28a80:	bl	12a1c <strncmp@plt>
   28a84:	cmp	r0, #0
   28a88:	beq	28d10 <__assert_fail@plt+0x16294>
   28a8c:	movw	r1, #7133	; 0x1bdd
   28a90:	sub	r0, fp, #72	; 0x48
   28a94:	mov	r2, #3
   28a98:	movt	r1, #5
   28a9c:	bl	12a1c <strncmp@plt>
   28aa0:	cmp	r0, #0
   28aa4:	beq	28d20 <__assert_fail@plt+0x162a4>
   28aa8:	movw	r1, #7140	; 0x1be4
   28aac:	sub	r0, fp, #72	; 0x48
   28ab0:	mov	r2, #3
   28ab4:	movt	r1, #5
   28ab8:	bl	12a1c <strncmp@plt>
   28abc:	cmp	r0, #0
   28ac0:	beq	28d30 <__assert_fail@plt+0x162b4>
   28ac4:	movw	r1, #7148	; 0x1bec
   28ac8:	sub	r0, fp, #72	; 0x48
   28acc:	mov	r2, #3
   28ad0:	movt	r1, #5
   28ad4:	bl	12a1c <strncmp@plt>
   28ad8:	cmp	r0, #0
   28adc:	beq	28d40 <__assert_fail@plt+0x162c4>
   28ae0:	movw	r1, #7153	; 0x1bf1
   28ae4:	sub	r0, fp, #72	; 0x48
   28ae8:	mov	r2, #3
   28aec:	movt	r1, #5
   28af0:	bl	12a1c <strncmp@plt>
   28af4:	cmp	r0, #0
   28af8:	beq	28d50 <__assert_fail@plt+0x162d4>
   28afc:	movw	r1, #7163	; 0x1bfb
   28b00:	sub	r0, fp, #72	; 0x48
   28b04:	mov	r2, #3
   28b08:	movt	r1, #5
   28b0c:	bl	12a1c <strncmp@plt>
   28b10:	cmp	r0, #0
   28b14:	beq	28d60 <__assert_fail@plt+0x162e4>
   28b18:	movw	r1, #7170	; 0x1c02
   28b1c:	sub	r0, fp, #72	; 0x48
   28b20:	mov	r2, #3
   28b24:	movt	r1, #5
   28b28:	bl	12a1c <strncmp@plt>
   28b2c:	cmp	r0, #0
   28b30:	beq	28d70 <__assert_fail@plt+0x162f4>
   28b34:	movw	r1, #7179	; 0x1c0b
   28b38:	sub	r0, fp, #72	; 0x48
   28b3c:	mov	r2, #3
   28b40:	movt	r1, #5
   28b44:	bl	12a1c <strncmp@plt>
   28b48:	cmp	r0, #0
   28b4c:	beq	28d80 <__assert_fail@plt+0x16304>
   28b50:	movw	r1, #7184	; 0x1c10
   28b54:	sub	r0, fp, #72	; 0x48
   28b58:	mov	r2, #3
   28b5c:	movt	r1, #5
   28b60:	bl	12a1c <strncmp@plt>
   28b64:	cmp	r0, #0
   28b68:	beq	28d90 <__assert_fail@plt+0x16314>
   28b6c:	movw	r1, #7190	; 0x1c16
   28b70:	sub	r0, fp, #72	; 0x48
   28b74:	mov	r2, #3
   28b78:	movt	r1, #5
   28b7c:	bl	12a1c <strncmp@plt>
   28b80:	cmp	r0, #0
   28b84:	beq	28da0 <__assert_fail@plt+0x16324>
   28b88:	movw	r1, #7197	; 0x1c1d
   28b8c:	sub	r0, fp, #72	; 0x48
   28b90:	mov	r2, #3
   28b94:	movt	r1, #5
   28b98:	bl	12a1c <strncmp@plt>
   28b9c:	cmp	r0, #0
   28ba0:	bne	28174 <__assert_fail@plt+0x156f8>
   28ba4:	movw	r0, #5332	; 0x14d4
   28ba8:	movt	r0, #5
   28bac:	add	r0, r0, #276	; 0x114
   28bb0:	b	28dac <__assert_fail@plt+0x16330>
   28bb4:	add	r3, r3, #1
   28bb8:	sub	r1, r1, #1
   28bbc:	ldrb	r2, [r1, #1]!
   28bc0:	sub	r2, r2, #48	; 0x30
   28bc4:	cmp	r2, #10
   28bc8:	bcc	28bbc <__assert_fail@plt+0x16140>
   28bcc:	clz	r7, r3
   28bd0:	eor	r2, r8, #1
   28bd4:	lsr	r7, r7, #5
   28bd8:	orrs	r2, r2, r7
   28bdc:	bne	28bf8 <__assert_fail@plt+0x1617c>
   28be0:	mov	r2, #63	; 0x3f
   28be4:	cmp	r0, #1
   28be8:	str	r2, [sp, #196]	; 0xc4
   28bec:	bvc	28c04 <__assert_fail@plt+0x16188>
   28bf0:	ldr	r3, [sp, #180]	; 0xb4
   28bf4:	b	28df0 <__assert_fail@plt+0x16374>
   28bf8:	mov	r2, r0
   28bfc:	str	r3, [sp, #148]	; 0x94
   28c00:	b	28c18 <__assert_fail@plt+0x1619c>
   28c04:	sub	r2, r0, #1
   28c08:	movw	r0, #51712	; 0xca00
   28c0c:	movt	r0, #15258	; 0x3b9a
   28c10:	sub	r0, r0, r3
   28c14:	str	r0, [sp, #148]	; 0x94
   28c18:	cmp	r6, #0
   28c1c:	mov	r0, #276	; 0x114
   28c20:	ldr	r3, [sp, #180]	; 0xb4
   28c24:	str	r1, [r4]
   28c28:	str	r2, [sp, #184]	; 0xb8
   28c2c:	movweq	r0, #277	; 0x115
   28c30:	str	r0, [sp, #196]	; 0xc4
   28c34:	mov	r0, r2
   28c38:	lsr	r0, r2, #8
   28c3c:	str	r0, [sp, #144]	; 0x90
   28c40:	b	28df0 <__assert_fail@plt+0x16374>
   28c44:	movw	r0, #5332	; 0x14d4
   28c48:	movt	r0, #5
   28c4c:	b	288c8 <__assert_fail@plt+0x15e4c>
   28c50:	movw	r0, #5332	; 0x14d4
   28c54:	movt	r0, #5
   28c58:	add	r0, r0, #24
   28c5c:	b	28dac <__assert_fail@plt+0x16330>
   28c60:	add	r0, r6, #1
   28c64:	str	r0, [r4]
   28c68:	ldrb	r7, [r6]
   28c6c:	b	28dc8 <__assert_fail@plt+0x1634c>
   28c70:	movw	r0, #5332	; 0x14d4
   28c74:	movt	r0, #5
   28c78:	add	r0, r0, #36	; 0x24
   28c7c:	b	28dac <__assert_fail@plt+0x16330>
   28c80:	movw	r0, #5332	; 0x14d4
   28c84:	movt	r0, #5
   28c88:	add	r0, r0, #48	; 0x30
   28c8c:	b	28dac <__assert_fail@plt+0x16330>
   28c90:	movw	r0, #5332	; 0x14d4
   28c94:	movt	r0, #5
   28c98:	add	r0, r0, #60	; 0x3c
   28c9c:	b	28dac <__assert_fail@plt+0x16330>
   28ca0:	movw	r0, #5332	; 0x14d4
   28ca4:	movt	r0, #5
   28ca8:	add	r0, r0, #72	; 0x48
   28cac:	b	28dac <__assert_fail@plt+0x16330>
   28cb0:	movw	r0, #5332	; 0x14d4
   28cb4:	movt	r0, #5
   28cb8:	add	r0, r0, #84	; 0x54
   28cbc:	b	28dac <__assert_fail@plt+0x16330>
   28cc0:	movw	r0, #5332	; 0x14d4
   28cc4:	movt	r0, #5
   28cc8:	add	r0, r0, #96	; 0x60
   28ccc:	b	28dac <__assert_fail@plt+0x16330>
   28cd0:	movw	r0, #5332	; 0x14d4
   28cd4:	movt	r0, #5
   28cd8:	add	r0, r0, #108	; 0x6c
   28cdc:	b	28dac <__assert_fail@plt+0x16330>
   28ce0:	movw	r0, #5332	; 0x14d4
   28ce4:	movt	r0, #5
   28ce8:	add	r0, r0, #120	; 0x78
   28cec:	b	28dac <__assert_fail@plt+0x16330>
   28cf0:	movw	r0, #5332	; 0x14d4
   28cf4:	movt	r0, #5
   28cf8:	add	r0, r0, #132	; 0x84
   28cfc:	b	28dac <__assert_fail@plt+0x16330>
   28d00:	movw	r0, #5332	; 0x14d4
   28d04:	movt	r0, #5
   28d08:	add	r0, r0, #144	; 0x90
   28d0c:	b	28dac <__assert_fail@plt+0x16330>
   28d10:	movw	r0, #5332	; 0x14d4
   28d14:	movt	r0, #5
   28d18:	add	r0, r0, #156	; 0x9c
   28d1c:	b	28dac <__assert_fail@plt+0x16330>
   28d20:	movw	r0, #5332	; 0x14d4
   28d24:	movt	r0, #5
   28d28:	add	r0, r0, #168	; 0xa8
   28d2c:	b	28dac <__assert_fail@plt+0x16330>
   28d30:	movw	r0, #5332	; 0x14d4
   28d34:	movt	r0, #5
   28d38:	add	r0, r0, #180	; 0xb4
   28d3c:	b	28dac <__assert_fail@plt+0x16330>
   28d40:	movw	r0, #5332	; 0x14d4
   28d44:	movt	r0, #5
   28d48:	add	r0, r0, #192	; 0xc0
   28d4c:	b	28dac <__assert_fail@plt+0x16330>
   28d50:	movw	r0, #5332	; 0x14d4
   28d54:	movt	r0, #5
   28d58:	add	r0, r0, #204	; 0xcc
   28d5c:	b	28dac <__assert_fail@plt+0x16330>
   28d60:	movw	r0, #5332	; 0x14d4
   28d64:	movt	r0, #5
   28d68:	add	r0, r0, #216	; 0xd8
   28d6c:	b	28dac <__assert_fail@plt+0x16330>
   28d70:	movw	r0, #5332	; 0x14d4
   28d74:	movt	r0, #5
   28d78:	add	r0, r0, #228	; 0xe4
   28d7c:	b	28dac <__assert_fail@plt+0x16330>
   28d80:	movw	r0, #5332	; 0x14d4
   28d84:	movt	r0, #5
   28d88:	add	r0, r0, #240	; 0xf0
   28d8c:	b	28dac <__assert_fail@plt+0x16330>
   28d90:	movw	r0, #5332	; 0x14d4
   28d94:	movt	r0, #5
   28d98:	add	r0, r0, #252	; 0xfc
   28d9c:	b	28dac <__assert_fail@plt+0x16330>
   28da0:	movw	r0, #5332	; 0x14d4
   28da4:	movt	r0, #5
   28da8:	add	r0, r0, #264	; 0x108
   28dac:	ldr	r1, [r0, #8]
   28db0:	ldr	r7, [r0, #4]
   28db4:	asr	r0, r1, #31
   28db8:	str	r1, [sp, #184]	; 0xb8
   28dbc:	str	r0, [sp, #148]	; 0x94
   28dc0:	lsr	r0, r1, #8
   28dc4:	str	r0, [sp, #144]	; 0x90
   28dc8:	ldr	r3, [sp, #180]	; 0xb4
   28dcc:	ldr	r0, [sp, #184]	; 0xb8
   28dd0:	cmp	r7, #1
   28dd4:	str	r0, [sp, #184]	; 0xb8
   28dd8:	blt	28e10 <__assert_fail@plt+0x16394>
   28ddc:	lsr	r1, r7, #1
   28de0:	mov	r0, #2
   28de4:	str	r7, [sp, #196]	; 0xc4
   28de8:	cmp	r1, #138	; 0x8a
   28dec:	bhi	28e00 <__assert_fail@plt+0x16384>
   28df0:	ldr	r1, [sp, #196]	; 0xc4
   28df4:	movw	r0, #4418	; 0x1142
   28df8:	movt	r0, #5
   28dfc:	ldrb	r0, [r0, r1]
   28e00:	add	r1, r0, r9
   28e04:	cmp	r1, #112	; 0x70
   28e08:	bhi	28e60 <__assert_fail@plt+0x163e4>
   28e0c:	b	28e28 <__assert_fail@plt+0x163ac>
   28e10:	mov	r1, #0
   28e14:	mov	r0, #0
   28e18:	str	r1, [sp, #196]	; 0xc4
   28e1c:	add	r1, r0, r9
   28e20:	cmp	r1, #112	; 0x70
   28e24:	bhi	28e60 <__assert_fail@plt+0x163e4>
   28e28:	movw	r2, #4696	; 0x1258
   28e2c:	movt	r2, #5
   28e30:	add	r2, r2, r1
   28e34:	ldrsb	r2, [r2]
   28e38:	cmp	r0, r2
   28e3c:	bne	28e60 <__assert_fail@plt+0x163e4>
   28e40:	movw	r0, #4809	; 0x12c9
   28e44:	movt	r0, #5
   28e48:	ldrb	sl, [r0, r1]
   28e4c:	orr	r0, r1, #4
   28e50:	cmp	r0, #111	; 0x6f
   28e54:	bne	2906c <__assert_fail@plt+0x165f0>
   28e58:	rsb	r7, sl, #0
   28e5c:	b	28e74 <__assert_fail@plt+0x163f8>
   28e60:	movw	r0, #4922	; 0x133a
   28e64:	movt	r0, #5
   28e68:	ldrb	r7, [r0, sl]
   28e6c:	cmp	r7, #0
   28e70:	beq	2c22c <__assert_fail@plt+0x197b0>
   28e74:	movw	r0, #5036	; 0x13ac
   28e78:	mov	r1, r5
   28e7c:	str	r7, [sp, #200]	; 0xc8
   28e80:	movt	r0, #5
   28e84:	ldrb	sl, [r0, r7]
   28e88:	rsb	r0, sl, #1
   28e8c:	rsb	r0, r0, r0, lsl #3
   28e90:	ldr	r0, [r1, r0, lsl #3]!
   28e94:	str	r0, [sp, #236]	; 0xec
   28e98:	ldr	r0, [r1, #44]	; 0x2c
   28e9c:	ldr	r9, [r1, #8]
   28ea0:	ldr	r8, [r1, #12]
   28ea4:	ldr	lr, [r1, #16]
   28ea8:	ldr	r6, [r1, #20]
   28eac:	ldr	r2, [r1, #24]
   28eb0:	str	r0, [sp, #212]	; 0xd4
   28eb4:	ldr	r0, [r1, #40]	; 0x28
   28eb8:	str	r0, [sp, #220]	; 0xdc
   28ebc:	ldr	r0, [r1, #36]	; 0x24
   28ec0:	str	r0, [sp, #216]	; 0xd8
   28ec4:	ldr	r0, [r1, #4]
   28ec8:	str	r0, [sp, #232]	; 0xe8
   28ecc:	ldr	r0, [r1, #28]
   28ed0:	str	r0, [sp, #228]	; 0xe4
   28ed4:	ldr	r0, [r1, #32]
   28ed8:	str	r0, [sp, #224]	; 0xe0
   28edc:	sub	r0, r7, #4
   28ee0:	ldr	r7, [r1, #52]	; 0x34
   28ee4:	ldr	r1, [r1, #48]	; 0x30
   28ee8:	cmp	r0, #87	; 0x57
   28eec:	str	r7, [sp, #204]	; 0xcc
   28ef0:	str	r1, [sp, #208]	; 0xd0
   28ef4:	bhi	2b0bc <__assert_fail@plt+0x18640>
   28ef8:	add	r1, pc, #4
   28efc:	mov	r7, r9
   28f00:	ldr	pc, [r1, r0, lsl #2]
   28f04:	andeq	sl, r2, ip, lsl #15
   28f08:	andeq	sl, r2, r0, asr #26
   28f0c:	andeq	sl, r2, r0, asr #26
   28f10:	andeq	sl, r2, r8, ror #15
   28f14:	andeq	sl, r2, r4, lsl r3
   28f18:	andeq	sl, r2, r0, asr r9
   28f1c:	andeq	sl, r2, r8, ror #18
   28f20:	andeq	sl, r2, r4, lsl #7
   28f24:	andeq	sl, r2, ip, lsl #16
   28f28:	andeq	sl, r2, r4, lsr #16
   28f2c:	andeq	sl, r2, r8, lsl #20
   28f30:			; <UNDEFINED> instruction: 0x0002a9bc
   28f34:	andeq	sl, r2, r0, asr #26
   28f38:	andeq	sl, r2, r0, asr #26
   28f3c:	strdeq	r9, [r2], -ip
   28f40:	muleq	r2, ip, r3
   28f44:	andeq	sl, r2, r0, lsr #5
   28f48:	andeq	sl, r2, r0, asr #26
   28f4c:	andeq	r9, r2, ip, lsr #20
   28f50:	andeq	sl, r2, r0, lsl #17
   28f54:	ldrdeq	sl, [r2], -r8
   28f58:	andeq	sl, r2, r0, asr #26
   28f5c:	andeq	sl, r2, r0, asr #26
   28f60:	andeq	sl, r2, r0, lsl #21
   28f64:	andeq	sl, r2, r0, asr sl
   28f68:	andeq	r9, r2, r0, asr #13
   28f6c:	andeq	sl, r2, r8, lsl #6
   28f70:	andeq	sl, r2, r4, lsl #23
   28f74:	ldrdeq	r9, [r2], -r8
   28f78:	strdeq	r9, [r2], -r4
   28f7c:	andeq	r9, r2, r8, asr sl
   28f80:	andeq	sl, r2, r8, lsl r4
   28f84:	andeq	r9, r2, r0, asr sl
   28f88:	andeq	sl, r2, r0, ror #28
   28f8c:	andeq	sl, r2, r4, asr #28
   28f90:	andeq	r9, r2, r0, lsr #23
   28f94:	andeq	sl, r2, ip, lsr #6
   28f98:	andeq	sl, r2, r8, asr #18
   28f9c:	andeq	sl, r2, r4, asr r3
   28fa0:	andeq	sl, r2, r8, lsl #29
   28fa4:	andeq	r9, r2, r0, lsr #22
   28fa8:	andeq	sl, r2, ip, asr sl
   28fac:	andeq	sl, r2, ip, ror lr
   28fb0:	muleq	r2, r4, r6
   28fb4:	andeq	sl, r2, r0, lsl #19
   28fb8:	andeq	sl, r2, r0, asr #26
   28fbc:	andeq	r9, r2, r4, lsl r6
   28fc0:			; <UNDEFINED> instruction: 0x000292b8
   28fc4:	andeq	r9, r2, r8, lsr #23
   28fc8:	andeq	sl, r2, r8, lsr #8
   28fcc:	andeq	sl, r2, r0, lsr fp
   28fd0:	andeq	r9, r2, r4, rrx
   28fd4:	andeq	sl, r2, r0, lsr r8
   28fd8:	muleq	r2, ip, r9
   28fdc:	ldrdeq	r9, [r2], -r8
   28fe0:	andeq	r9, r2, ip, lsr #5
   28fe4:	andeq	r9, r2, ip, asr #4
   28fe8:	andeq	sl, r2, r8, ror pc
   28fec:	andeq	r9, r2, r8, lsr #2
   28ff0:	ldrdeq	sl, [r2], -r8
   28ff4:	andeq	r9, r2, ip, lsr r1
   28ff8:	andeq	sl, r2, ip, lsr #28
   28ffc:	strdeq	sl, [r2], -r0
   29000:	andeq	r9, r2, r8, asr #1
   29004:	ldrdeq	sl, [r2], -r8
   29008:	muleq	r2, r4, fp
   2900c:	ldrdeq	r9, [r2], -r0
   29010:	andeq	r9, r2, r4, ror #1
   29014:	andeq	r9, r2, r4, ror #1
   29018:	andeq	sl, r2, r0, ror #29
   2901c:	andeq	sl, r2, r0, asr #26
   29020:	andeq	r9, r2, r4, rrx
   29024:	ldrdeq	r9, [r2], -r8
   29028:	andeq	sl, r2, r8, lsl pc
   2902c:	andeq	r9, r2, ip, lsr r1
   29030:	andeq	r9, r2, r8, asr #1
   29034:	ldrdeq	r9, [r2], -r0
   29038:	andeq	r9, r2, r8, lsr #2
   2903c:	andeq	sl, r2, r0, asr #26
   29040:	andeq	sl, r2, r0, asr #26
   29044:	andeq	sl, r2, r0, asr #26
   29048:	andeq	sl, r2, r0, lsl #8
   2904c:	andeq	sl, r2, r0, asr #26
   29050:	andeq	fp, r2, r0
   29054:	ldrdeq	sl, [r2], -r0
   29058:	andeq	r9, r2, r8, asr #2
   2905c:			; <UNDEFINED> instruction: 0x000296b0
   29060:	andeq	sl, r2, r8, asr #19
   29064:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   29068:	b	2ab34 <__assert_fail@plt+0x180b8>
   2906c:	ldr	r0, [sp, #184]	; 0xb8
   29070:	ldr	r1, [sp, #144]	; 0x90
   29074:	uxtb	r0, r0
   29078:	orr	r0, r0, r1, lsl #8
   2907c:	str	r0, [r5, #56]!	; 0x38
   29080:	ldr	r0, [sp, #148]	; 0x94
   29084:	str	r0, [r5, #4]
   29088:	ldr	r0, [sp, #124]	; 0x7c
   2908c:	str	r0, [r5, #8]
   29090:	ldr	r0, [sp, #128]	; 0x80
   29094:	str	r0, [r5, #12]
   29098:	ldr	r0, [sp, #132]	; 0x84
   2909c:	str	r0, [r5, #16]
   290a0:	mov	r0, #0
   290a4:	str	r0, [r5, #52]	; 0x34
   290a8:	add	r0, r5, #36	; 0x24
   290ac:	vst1.32	{d8-d9}, [r0]
   290b0:	add	r0, r5, #20
   290b4:	vst1.32	{d8-d9}, [r0]
   290b8:	mvn	r0, #1
   290bc:	str	r0, [sp, #196]	; 0xc4
   290c0:	mov	r0, r3
   290c4:	b	2ae10 <__assert_fail@plt+0x18394>
   290c8:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   290cc:	b	2acf4 <__assert_fail@plt+0x18278>
   290d0:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   290d4:	b	2ab98 <__assert_fail@plt+0x1811c>
   290d8:	ldr	r7, [r5, #-48]	; 0xffffffd0
   290dc:	ldr	r8, [r5, #-44]	; 0xffffffd4
   290e0:	b	2a9a4 <__assert_fail@plt+0x17f28>
   290e4:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   290e8:	mov	r7, #0
   290ec:	mov	r8, #0
   290f0:	mov	lr, #0
   290f4:	mov	r6, #0
   290f8:	mov	r2, #0
   290fc:	str	r0, [sp, #220]	; 0xdc
   29100:	asr	r0, r0, #31
   29104:	str	r1, [sp, #208]	; 0xd0
   29108:	str	r0, [sp, #212]	; 0xd4
   2910c:	mov	r0, #0
   29110:	str	r0, [sp, #228]	; 0xe4
   29114:	mov	r0, #0
   29118:	str	r0, [sp, #224]	; 0xe0
   2911c:	mov	r0, #0
   29120:	str	r0, [sp, #216]	; 0xd8
   29124:	b	2ad30 <__assert_fail@plt+0x182b4>
   29128:	ldr	lr, [r5]
   2912c:	ldr	r6, [r5, #4]
   29130:	mov	r7, #0
   29134:	mov	r8, #0
   29138:	b	2a9ac <__assert_fail@plt+0x17f30>
   2913c:	ldr	r2, [r5, #-48]	; 0xffffffd0
   29140:	ldr	r0, [r5, #-44]	; 0xffffffd4
   29144:	b	2a9e0 <__assert_fail@plt+0x17f64>
   29148:	ldr	r0, [r5, #-40]	; 0xffffffd8
   2914c:	sub	r1, r5, #56	; 0x38
   29150:	str	r3, [sp, #180]	; 0xb4
   29154:	str	sl, [sp, #160]	; 0xa0
   29158:	str	r9, [sp, #164]	; 0xa4
   2915c:	str	lr, [sp, #172]	; 0xac
   29160:	str	r8, [sp, #168]	; 0xa8
   29164:	str	r6, [sp, #176]	; 0xb0
   29168:	str	r2, [sp, #188]	; 0xbc
   2916c:	vld1.64	{d16-d17}, [r1]
   29170:	str	r0, [sp, #72]	; 0x48
   29174:	ldr	r0, [r4, #156]	; 0x9c
   29178:	cmp	r0, #0
   2917c:	beq	291b8 <__assert_fail@plt+0x1673c>
   29180:	ldr	r1, [sp, #88]	; 0x58
   29184:	ldr	r1, [r1]
   29188:	cmp	r1, #0
   2918c:	bne	291b8 <__assert_fail@plt+0x1673c>
   29190:	ldrb	r1, [r4, #153]	; 0x99
   29194:	cmp	r1, #0
   29198:	bne	291b8 <__assert_fail@plt+0x1673c>
   2919c:	ldr	r1, [sp, #72]	; 0x48
   291a0:	ldr	ip, [r5, #-36]	; 0xffffffdc
   291a4:	cmp	r1, #2
   291a8:	bgt	2be54 <__assert_fail@plt+0x193d8>
   291ac:	ldr	r2, [r4, #172]	; 0xac
   291b0:	cmp	r2, #0
   291b4:	bne	2be54 <__assert_fail@plt+0x193d8>
   291b8:	ldr	r1, [sp, #72]	; 0x48
   291bc:	cmp	r1, #5
   291c0:	blt	2b0c4 <__assert_fail@plt+0x18648>
   291c4:	add	r0, r0, #1
   291c8:	vmov.32	r6, d17[0]
   291cc:	vmov.32	r9, d17[1]
   291d0:	mov	r8, r1
   291d4:	mov	r2, #100	; 0x64
   291d8:	mov	r3, #0
   291dc:	mov	r7, #100	; 0x64
   291e0:	str	r0, [r4, #156]	; 0x9c
   291e4:	mov	r0, r6
   291e8:	mov	r1, r9
   291ec:	bl	4c144 <__assert_fail@plt+0x396c8>
   291f0:	umull	r2, r3, r0, r7
   291f4:	mla	r3, r1, r7, r3
   291f8:	ldr	r7, [sp, #152]	; 0x98
   291fc:	subs	r2, r6, r2
   29200:	sbc	r3, r9, r3
   29204:	strd	r2, [r7]
   29208:	mov	r2, #100	; 0x64
   2920c:	mov	r3, #0
   29210:	bl	4c144 <__assert_fail@plt+0x396c8>
   29214:	mov	r0, r2
   29218:	ldr	r2, [sp, #156]	; 0x9c
   2921c:	mov	r1, r3
   29220:	mov	r3, #0
   29224:	strd	r0, [r2]
   29228:	mov	r0, r6
   2922c:	mov	r1, r9
   29230:	movw	r2, #10000	; 0x2710
   29234:	bl	4c144 <__assert_fail@plt+0x396c8>
   29238:	ldr	r2, [sp, #84]	; 0x54
   2923c:	strd	r0, [r2]
   29240:	sub	r0, r8, #4
   29244:	str	r0, [r4, #48]	; 0x30
   29248:	b	2b5f4 <__assert_fail@plt+0x18b78>
   2924c:	str	sl, [sp, #160]	; 0xa0
   29250:	ldm	r5, {r2, sl}
   29254:	cmn	sl, #1
   29258:	ble	2b130 <__assert_fail@plt+0x186b4>
   2925c:	ldr	r9, [r5, #-56]	; 0xffffffc8
   29260:	ldr	r8, [r5, #-52]	; 0xffffffcc
   29264:	orrs	r0, r2, sl
   29268:	beq	2b018 <__assert_fail@plt+0x1859c>
   2926c:	cmn	r8, #1
   29270:	ble	2ba08 <__assert_fail@plt+0x18f8c>
   29274:	mov	r6, r3
   29278:	mvn	r0, #0
   2927c:	mvn	r1, #-2147483648	; 0x80000000
   29280:	mov	r3, sl
   29284:	mov	r7, r2
   29288:	bl	4c218 <__assert_fail@plt+0x3979c>
   2928c:	subs	r0, r0, r9
   29290:	mov	r2, r7
   29294:	mov	r3, r6
   29298:	mov	r6, r9
   2929c:	mov	r7, r8
   292a0:	sbcs	r0, r1, r8
   292a4:	bge	2b020 <__assert_fail@plt+0x185a4>
   292a8:	b	2c358 <__assert_fail@plt+0x198dc>
   292ac:	mov	r8, #0
   292b0:	mov	r7, #1
   292b4:	b	2a9a4 <__assert_fail@plt+0x17f28>
   292b8:	add	r0, sp, #164	; 0xa4
   292bc:	str	r2, [sp, #188]	; 0xbc
   292c0:	str	r6, [sp, #176]	; 0xb0
   292c4:	stm	r0, {r7, r8, lr}
   292c8:	str	sl, [sp, #160]	; 0xa0
   292cc:	str	r3, [sp, #180]	; 0xb4
   292d0:	ldr	r2, [r5, #-56]	; 0xffffffc8
   292d4:	ldr	r7, [r5]
   292d8:	ldr	r3, [r4, #144]	; 0x90
   292dc:	ldr	r0, [r5, #-12]
   292e0:	ldr	r1, [r5, #-16]
   292e4:	ldr	lr, [r5, #-20]	; 0xffffffec
   292e8:	ldr	ip, [r5, #-24]	; 0xffffffe8
   292ec:	ldr	sl, [r5, #-28]	; 0xffffffe4
   292f0:	ldr	r6, [r5, #-8]
   292f4:	str	r2, [sp, #56]	; 0x38
   292f8:	ldr	r2, [r5, #-52]	; 0xffffffcc
   292fc:	cmn	r7, #1
   29300:	str	r3, [sp, #60]	; 0x3c
   29304:	str	r2, [sp, #72]	; 0x48
   29308:	ldr	r2, [r5, #-48]	; 0xffffffd0
   2930c:	str	r2, [sp, #52]	; 0x34
   29310:	ldr	r2, [r5, #-44]	; 0xffffffd4
   29314:	str	r2, [sp, #64]	; 0x40
   29318:	ldr	r2, [r5, #-40]	; 0xffffffd8
   2931c:	str	r2, [sp, #48]	; 0x30
   29320:	ldr	r2, [r5, #-36]	; 0xffffffdc
   29324:	str	r2, [sp, #68]	; 0x44
   29328:	ldr	r2, [r5, #-32]	; 0xffffffe0
   2932c:	ble	2b178 <__assert_fail@plt+0x186fc>
   29330:	ldr	r7, [sp, #100]	; 0x64
   29334:	add	r6, r3, r6
   29338:	str	r6, [sp, #44]	; 0x2c
   2933c:	str	r6, [r4, #144]	; 0x90
   29340:	ldr	r8, [r7]
   29344:	ldr	r3, [r7, #4]
   29348:	str	r0, [sp, #20]
   2934c:	adds	r8, r8, r1
   29350:	adc	r9, r3, r0
   29354:	strd	r8, [r7]
   29358:	ldr	r6, [sp, #104]	; 0x68
   2935c:	ldr	r8, [r6]
   29360:	ldr	r7, [r6, #4]
   29364:	str	lr, [sp, #28]
   29368:	adds	r8, r8, ip
   2936c:	adc	lr, r7, lr
   29370:	stm	r6, {r8, lr}
   29374:	ldr	r6, [sp, #108]	; 0x6c
   29378:	ldr	r8, [r6]
   2937c:	ldr	r0, [r6, #4]
   29380:	str	sl, [sp, #32]
   29384:	adds	r8, r8, r2
   29388:	str	r0, [sp, #24]
   2938c:	adc	ip, r0, sl
   29390:	stm	r6, {r8, ip}
   29394:	ldr	sl, [sp, #112]	; 0x70
   29398:	ldr	r8, [sl]
   2939c:	ldr	r2, [sl, #4]
   293a0:	ldr	r0, [sp, #48]	; 0x30
   293a4:	adds	r6, r8, r0
   293a8:	ldr	r0, [sp, #68]	; 0x44
   293ac:	adc	r0, r2, r0
   293b0:	str	r0, [sp, #36]	; 0x24
   293b4:	str	r6, [sl]
   293b8:	str	r0, [sl, #4]
   293bc:	ldr	r8, [sp, #116]	; 0x74
   293c0:	ldr	r6, [r8]
   293c4:	ldr	r0, [r8, #4]
   293c8:	ldr	r1, [sp, #52]	; 0x34
   293cc:	ldr	sl, [sp, #64]	; 0x40
   293d0:	adds	r6, r6, r1
   293d4:	str	r0, [sp, #40]	; 0x28
   293d8:	adc	r0, r0, sl
   293dc:	str	r0, [sp, #48]	; 0x30
   293e0:	str	r6, [r8]
   293e4:	str	r0, [r8, #4]
   293e8:	ldr	r8, [sp, #120]	; 0x78
   293ec:	ldr	r6, [r8]
   293f0:	ldr	r1, [r8, #4]
   293f4:	ldr	r0, [sp, #56]	; 0x38
   293f8:	adds	r6, r6, r0
   293fc:	ldr	r0, [sp, #72]	; 0x48
   29400:	str	r1, [sp, #52]	; 0x34
   29404:	adc	r0, r1, r0
   29408:	cmn	r3, #1
   2940c:	mov	r1, #0
   29410:	mov	r3, #0
   29414:	str	r0, [sp, #56]	; 0x38
   29418:	str	r6, [r8]
   2941c:	str	r0, [r8, #4]
   29420:	mov	r0, #0
   29424:	mov	r8, #0
   29428:	mov	r6, #0
   2942c:	movwgt	r0, #1
   29430:	cmn	r9, #1
   29434:	movwgt	r1, #1
   29438:	str	r0, [sp, #16]
   2943c:	subs	r0, r0, r1
   29440:	mov	r1, #0
   29444:	movwne	r0, #1
   29448:	str	r0, [sp, #12]
   2944c:	ldr	r0, [sp, #20]
   29450:	cmn	r0, #1
   29454:	mov	r0, #0
   29458:	movwgt	r0, #1
   2945c:	cmn	r7, #1
   29460:	movwgt	r1, #1
   29464:	str	r0, [sp, #20]
   29468:	cmn	lr, #1
   2946c:	mov	r0, #0
   29470:	mov	lr, #0
   29474:	movwgt	r0, #1
   29478:	str	r1, [sp, #8]
   2947c:	subs	r0, r1, r0
   29480:	mov	r1, #0
   29484:	movwne	r0, #1
   29488:	str	r0, [sp, #4]
   2948c:	ldr	r0, [sp, #28]
   29490:	cmn	r0, #1
   29494:	mov	r0, #0
   29498:	movwgt	r0, #1
   2949c:	str	r0, [sp, #28]
   294a0:	ldr	r0, [sp, #24]
   294a4:	cmn	r0, #1
   294a8:	mov	r0, #0
   294ac:	movwgt	r1, #1
   294b0:	cmn	ip, #1
   294b4:	mov	ip, #0
   294b8:	movwgt	r0, #1
   294bc:	str	r1, [sp, #24]
   294c0:	subs	r0, r1, r0
   294c4:	mov	r1, #0
   294c8:	movwne	r0, #1
   294cc:	str	r0, [sp]
   294d0:	ldr	r0, [sp, #32]
   294d4:	cmn	r0, #1
   294d8:	ldr	r0, [sp, #36]	; 0x24
   294dc:	movwgt	lr, #1
   294e0:	cmn	r2, #1
   294e4:	mov	r2, #0
   294e8:	movwgt	r8, #1
   294ec:	cmn	r0, #1
   294f0:	mov	r0, #0
   294f4:	movwgt	r0, #1
   294f8:	subs	r0, r8, r0
   294fc:	movwne	r0, #1
   29500:	str	r0, [sp, #36]	; 0x24
   29504:	ldr	r0, [sp, #68]	; 0x44
   29508:	cmn	r0, #1
   2950c:	ldr	r0, [sp, #40]	; 0x28
   29510:	movwgt	r3, #1
   29514:	cmn	r0, #1
   29518:	ldr	r0, [sp, #48]	; 0x30
   2951c:	movwgt	ip, #1
   29520:	cmn	r0, #1
   29524:	ldr	r0, [sp, #52]	; 0x34
   29528:	movwgt	r1, #1
   2952c:	subs	r7, ip, r1
   29530:	mov	r1, #0
   29534:	movwne	r7, #1
   29538:	cmn	sl, #1
   2953c:	mov	sl, #0
   29540:	movwgt	sl, #1
   29544:	cmn	r0, #1
   29548:	ldr	r0, [sp, #56]	; 0x38
   2954c:	movwgt	r2, #1
   29550:	cmn	r0, #1
   29554:	ldr	r0, [sp, #72]	; 0x48
   29558:	movwgt	r1, #1
   2955c:	subs	r1, r2, r1
   29560:	movwne	r1, #1
   29564:	cmn	r0, #1
   29568:	ldr	r0, [sp, #44]	; 0x2c
   2956c:	movwgt	r6, #1
   29570:	str	r6, [sp, #72]	; 0x48
   29574:	ldr	r6, [sp, #60]	; 0x3c
   29578:	cmp	r0, r6
   2957c:	bvs	2c6b4 <__assert_fail@plt+0x19c38>
   29580:	ldr	r0, [sp, #16]
   29584:	ldr	r6, [sp, #20]
   29588:	sub	r0, r0, r6
   2958c:	ldr	r6, [sp, #12]
   29590:	clz	r0, r0
   29594:	lsr	r0, r0, #5
   29598:	ands	r0, r0, r6
   2959c:	bne	2c6c8 <__assert_fail@plt+0x19c4c>
   295a0:	ldr	r0, [sp, #8]
   295a4:	ldr	r6, [sp, #28]
   295a8:	sub	r0, r0, r6
   295ac:	ldr	r6, [sp, #4]
   295b0:	clz	r0, r0
   295b4:	lsr	r0, r0, #5
   295b8:	ands	r0, r0, r6
   295bc:	bne	2c5c4 <__assert_fail@plt+0x19b48>
   295c0:	ldr	r0, [sp, #24]
   295c4:	ldr	r6, [sp]
   295c8:	sub	r0, r0, lr
   295cc:	clz	r0, r0
   295d0:	lsr	r0, r0, #5
   295d4:	ands	r0, r0, r6
   295d8:	bne	2c538 <__assert_fail@plt+0x19abc>
   295dc:	sub	r0, r8, r3
   295e0:	ldr	r3, [sp, #36]	; 0x24
   295e4:	clz	r0, r0
   295e8:	lsr	r0, r0, #5
   295ec:	ands	r0, r0, r3
   295f0:	bne	2c470 <__assert_fail@plt+0x199f4>
   295f4:	sub	r0, ip, sl
   295f8:	clz	r0, r0
   295fc:	lsr	r0, r0, #5
   29600:	ands	r0, r0, r7
   29604:	bne	2c36c <__assert_fail@plt+0x198f0>
   29608:	ldr	r0, [sp, #72]	; 0x48
   2960c:	sub	r0, r2, r0
   29610:	b	2a778 <__assert_fail@plt+0x17cfc>
   29614:	sub	r0, r5, #112	; 0x70
   29618:	vldr	d18, [r5, #-96]	; 0xffffffa0
   2961c:	str	r2, [sp, #188]	; 0xbc
   29620:	ldr	r2, [sp, #156]	; 0x9c
   29624:	mov	r7, r3
   29628:	str	r6, [sp, #176]	; 0xb0
   2962c:	vld1.64	{d16-d17}, [r0]
   29630:	ldr	r0, [sp, #96]	; 0x60
   29634:	vst1.64	{d16-d17}, [r0]!
   29638:	vstr	d18, [r0]
   2963c:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   29640:	rsbs	r0, r0, #0
   29644:	rsc	r3, r1, #0
   29648:	and	r1, r1, r3
   2964c:	stm	r2, {r0, r3}
   29650:	mov	r0, #1
   29654:	cmp	r1, #0
   29658:	blt	2c208 <__assert_fail@plt+0x1978c>
   2965c:	ldrd	r0, [r5, #8]
   29660:	ldr	r2, [sp, #152]	; 0x98
   29664:	rsbs	r0, r0, #0
   29668:	rsc	r3, r1, #0
   2966c:	stm	r2, {r0, r3}
   29670:	and	r1, r1, r3
   29674:	mov	r3, r7
   29678:	mov	r0, #1
   2967c:	mov	r7, r9
   29680:	ldr	r6, [sp, #176]	; 0xb0
   29684:	ldr	r2, [sp, #188]	; 0xbc
   29688:	cmp	r1, #0
   2968c:	bge	2ad40 <__assert_fail@plt+0x182c4>
   29690:	b	2c208 <__assert_fail@plt+0x1978c>
   29694:	str	r2, [sp, #188]	; 0xbc
   29698:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   2969c:	ldr	r2, [sp, #152]	; 0x98
   296a0:	strd	r0, [r2]
   296a4:	ldrd	r0, [r5]
   296a8:	ldr	r2, [sp, #156]	; 0x9c
   296ac:	b	2aa74 <__assert_fail@plt+0x17ff8>
   296b0:	mvn	r0, #0
   296b4:	str	r0, [sp, #236]	; 0xec
   296b8:	mvn	r0, #0
   296bc:	b	2ad3c <__assert_fail@plt+0x182c0>
   296c0:	mov	r0, #1
   296c4:	str	r0, [r4, #20]
   296c8:	ldr	r0, [r4, #168]	; 0xa8
   296cc:	add	r0, r0, #1
   296d0:	str	r0, [r4, #168]	; 0xa8
   296d4:	b	2ad40 <__assert_fail@plt+0x182c4>
   296d8:	add	r0, sp, #164	; 0xa4
   296dc:	str	r2, [sp, #188]	; 0xbc
   296e0:	str	r6, [sp, #176]	; 0xb0
   296e4:	stm	r0, {r7, r8, lr}
   296e8:	str	sl, [sp, #160]	; 0xa0
   296ec:	str	r3, [sp, #180]	; 0xb4
   296f0:	ldr	r0, [r5, #-56]	; 0xffffffc8
   296f4:	str	r0, [r4, #24]
   296f8:	ldr	r1, [r4, #144]	; 0x90
   296fc:	ldr	r0, [r5, #48]	; 0x30
   29700:	ldr	sl, [r5, #4]
   29704:	ldr	lr, [r5, #12]
   29708:	ldr	ip, [r5, #20]
   2970c:	ldr	r6, [r5, #36]	; 0x24
   29710:	ldr	r2, [r5, #44]	; 0x2c
   29714:	ldr	r8, [r5, #32]
   29718:	ldr	r9, [r5, #40]	; 0x28
   2971c:	add	r0, r1, r0
   29720:	str	r1, [sp, #72]	; 0x48
   29724:	ldr	r1, [r5]
   29728:	str	sl, [sp, #64]	; 0x40
   2972c:	str	lr, [sp, #56]	; 0x38
   29730:	str	ip, [sp, #44]	; 0x2c
   29734:	str	r6, [sp, #24]
   29738:	str	r2, [sp, #20]
   2973c:	str	r0, [sp, #68]	; 0x44
   29740:	str	r1, [sp, #60]	; 0x3c
   29744:	ldr	r1, [r5, #8]
   29748:	str	r1, [sp, #52]	; 0x34
   2974c:	ldr	r1, [r5, #16]
   29750:	str	r1, [sp, #48]	; 0x30
   29754:	ldr	r1, [r5, #24]
   29758:	str	r1, [sp, #40]	; 0x28
   2975c:	ldr	r1, [r5, #28]
   29760:	str	r0, [r4, #144]	; 0x90
   29764:	ldr	r0, [sp, #100]	; 0x64
   29768:	str	r1, [sp, #32]
   2976c:	ldm	r0, {r3, r7}
   29770:	adds	r9, r3, r9
   29774:	adc	r3, r7, r2
   29778:	str	r9, [r0]
   2977c:	str	r3, [r0, #4]
   29780:	ldr	r9, [sp, #104]	; 0x68
   29784:	ldm	r9, {r0, r2}
   29788:	adds	r0, r0, r8
   2978c:	str	r2, [sp, #16]
   29790:	adc	r6, r2, r6
   29794:	stm	r9, {r0, r6}
   29798:	ldr	r0, [sp, #108]	; 0x6c
   2979c:	ldr	r2, [sp, #40]	; 0x28
   297a0:	ldrd	r8, [r0]
   297a4:	adds	r8, r8, r2
   297a8:	adc	r1, r9, r1
   297ac:	str	r1, [sp, #28]
   297b0:	str	r8, [r0]
   297b4:	str	r1, [r0, #4]
   297b8:	ldr	r0, [sp, #112]	; 0x70
   297bc:	ldr	r8, [r0]
   297c0:	ldr	r2, [r0, #4]
   297c4:	ldr	r1, [sp, #48]	; 0x30
   297c8:	adds	r8, r8, r1
   297cc:	adc	r1, r2, ip
   297d0:	str	r1, [sp, #36]	; 0x24
   297d4:	str	r8, [r0]
   297d8:	str	r1, [r0, #4]
   297dc:	ldr	ip, [sp, #116]	; 0x74
   297e0:	ldr	r8, [ip]
   297e4:	ldr	r0, [ip, #4]
   297e8:	ldr	r1, [sp, #52]	; 0x34
   297ec:	adds	r8, r8, r1
   297f0:	str	r0, [sp, #40]	; 0x28
   297f4:	adc	r1, r0, lr
   297f8:	mov	lr, #0
   297fc:	str	r1, [sp, #48]	; 0x30
   29800:	str	r8, [ip]
   29804:	str	r1, [ip, #4]
   29808:	ldr	ip, [sp, #120]	; 0x78
   2980c:	ldr	r8, [ip]
   29810:	ldr	r0, [ip, #4]
   29814:	ldr	r1, [sp, #60]	; 0x3c
   29818:	adds	r8, r8, r1
   2981c:	str	r0, [sp, #52]	; 0x34
   29820:	mov	r1, #0
   29824:	adc	r0, r0, sl
   29828:	cmn	r7, #1
   2982c:	mov	sl, #0
   29830:	str	r0, [sp, #60]	; 0x3c
   29834:	str	r8, [ip]
   29838:	str	r0, [ip, #4]
   2983c:	mov	r0, #0
   29840:	mov	r8, #0
   29844:	mov	ip, #0
   29848:	movwgt	r0, #1
   2984c:	cmn	r3, #1
   29850:	mov	r3, #0
   29854:	movwgt	r3, #1
   29858:	str	r0, [sp, #12]
   2985c:	subs	r0, r0, r3
   29860:	mov	r3, #0
   29864:	movwne	r0, #1
   29868:	str	r0, [sp, #8]
   2986c:	ldr	r0, [sp, #20]
   29870:	cmn	r0, #1
   29874:	mov	r0, #0
   29878:	movwgt	r0, #1
   2987c:	str	r0, [sp, #20]
   29880:	ldr	r0, [sp, #16]
   29884:	cmn	r0, #1
   29888:	mov	r0, #0
   2988c:	movwgt	r1, #1
   29890:	cmn	r6, #1
   29894:	ldr	r6, [sp, #68]	; 0x44
   29898:	movwgt	r0, #1
   2989c:	str	r1, [sp, #16]
   298a0:	subs	r0, r1, r0
   298a4:	mov	r1, #0
   298a8:	movwne	r0, #1
   298ac:	str	r0, [sp, #4]
   298b0:	ldr	r0, [sp, #24]
   298b4:	cmn	r0, #1
   298b8:	mov	r0, #0
   298bc:	movwgt	r0, #1
   298c0:	cmn	r9, #1
   298c4:	str	r0, [sp, #24]
   298c8:	ldr	r0, [sp, #28]
   298cc:	movwgt	r1, #1
   298d0:	str	r1, [sp, #28]
   298d4:	cmn	r0, #1
   298d8:	mov	r0, #0
   298dc:	movwgt	r0, #1
   298e0:	subs	r0, r1, r0
   298e4:	mov	r1, #0
   298e8:	movwne	r0, #1
   298ec:	str	r0, [sp]
   298f0:	ldr	r0, [sp, #32]
   298f4:	cmn	r0, #1
   298f8:	ldr	r0, [sp, #36]	; 0x24
   298fc:	movwgt	lr, #1
   29900:	cmn	r2, #1
   29904:	mov	r2, #0
   29908:	movwgt	r8, #1
   2990c:	cmn	r0, #1
   29910:	mov	r0, #0
   29914:	movwgt	r0, #1
   29918:	subs	r0, r8, r0
   2991c:	movwne	r0, #1
   29920:	str	r0, [sp, #36]	; 0x24
   29924:	ldr	r0, [sp, #44]	; 0x2c
   29928:	cmn	r0, #1
   2992c:	ldr	r0, [sp, #40]	; 0x28
   29930:	movwgt	ip, #1
   29934:	cmn	r0, #1
   29938:	ldr	r0, [sp, #48]	; 0x30
   2993c:	movwgt	r2, #1
   29940:	cmn	r0, #1
   29944:	ldr	r0, [sp, #56]	; 0x38
   29948:	movwgt	r1, #1
   2994c:	subs	r7, r2, r1
   29950:	mov	r1, #0
   29954:	movwne	r7, #1
   29958:	cmn	r0, #1
   2995c:	ldr	r0, [sp, #52]	; 0x34
   29960:	movwgt	sl, #1
   29964:	cmn	r0, #1
   29968:	ldr	r0, [sp, #60]	; 0x3c
   2996c:	movwgt	r3, #1
   29970:	cmn	r0, #1
   29974:	ldr	r0, [sp, #64]	; 0x40
   29978:	movwgt	r1, #1
   2997c:	subs	r1, r3, r1
   29980:	movwne	r1, #1
   29984:	cmn	r0, #1
   29988:	mov	r0, #0
   2998c:	movwgt	r0, #1
   29990:	str	r0, [sp, #64]	; 0x40
   29994:	ldr	r0, [sp, #72]	; 0x48
   29998:	cmp	r6, r0
   2999c:	bvs	2c68c <__assert_fail@plt+0x19c10>
   299a0:	ldr	r0, [sp, #12]
   299a4:	ldr	r6, [sp, #20]
   299a8:	sub	r0, r0, r6
   299ac:	ldr	r6, [sp, #8]
   299b0:	clz	r0, r0
   299b4:	lsr	r0, r0, #5
   299b8:	ands	r0, r0, r6
   299bc:	bne	2c5ec <__assert_fail@plt+0x19b70>
   299c0:	ldr	r0, [sp, #16]
   299c4:	ldr	r6, [sp, #24]
   299c8:	sub	r0, r0, r6
   299cc:	ldr	r6, [sp, #4]
   299d0:	clz	r0, r0
   299d4:	lsr	r0, r0, #5
   299d8:	ands	r0, r0, r6
   299dc:	bne	2c59c <__assert_fail@plt+0x19b20>
   299e0:	ldr	r0, [sp, #28]
   299e4:	ldr	r6, [sp]
   299e8:	sub	r0, r0, lr
   299ec:	clz	r0, r0
   299f0:	lsr	r0, r0, #5
   299f4:	ands	r0, r0, r6
   299f8:	bne	2c4d4 <__assert_fail@plt+0x19a58>
   299fc:	ldr	r6, [sp, #36]	; 0x24
   29a00:	sub	r0, r8, ip
   29a04:	clz	r0, r0
   29a08:	lsr	r0, r0, #5
   29a0c:	ands	r0, r0, r6
   29a10:	bne	2c3bc <__assert_fail@plt+0x19940>
   29a14:	sub	r0, r2, sl
   29a18:	clz	r0, r0
   29a1c:	lsr	r0, r0, #5
   29a20:	ands	r0, r0, r7
   29a24:	beq	2a248 <__assert_fail@plt+0x177cc>
   29a28:	b	2c308 <__assert_fail@plt+0x1988c>
   29a2c:	str	r2, [sp, #188]	; 0xbc
   29a30:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   29a34:	ldr	r2, [sp, #136]	; 0x88
   29a38:	vmov.i32	q8, #0	; 0x00000000
   29a3c:	strd	r0, [r2]
   29a40:	ldr	r2, [sp, #188]	; 0xbc
   29a44:	ldr	r0, [sp, #140]	; 0x8c
   29a48:	vst1.64	{d16-d17}, [r0]
   29a4c:	b	2a93c <__assert_fail@plt+0x17ec0>
   29a50:	ldr	r0, [r5, #-56]	; 0xffffffc8
   29a54:	b	2a41c <__assert_fail@plt+0x179a0>
   29a58:	ldr	r1, [r5, #-40]	; 0xffffffd8
   29a5c:	ldr	r7, [r5, #4]
   29a60:	str	r6, [sp, #176]	; 0xb0
   29a64:	ldr	r0, [r5, #-48]	; 0xffffffd0
   29a68:	ldr	r6, [r5, #-44]	; 0xffffffd4
   29a6c:	str	r2, [sp, #188]	; 0xbc
   29a70:	mov	r2, #0
   29a74:	str	r8, [sp, #168]	; 0xa8
   29a78:	mov	r8, #100	; 0x64
   29a7c:	str	r3, [sp, #180]	; 0xb4
   29a80:	str	lr, [sp, #172]	; 0xac
   29a84:	cmp	r1, #3
   29a88:	mov	r1, #0
   29a8c:	movwlt	r1, #1
   29a90:	cmp	r7, #0
   29a94:	movwlt	r2, #1
   29a98:	ands	r1, r2, r1
   29a9c:	mov	r2, r6
   29aa0:	umull	r6, r1, r0, r8
   29aa4:	mlane	r2, r2, r8, r1
   29aa8:	moveq	r6, r0
   29aac:	cmn	r7, #1
   29ab0:	ble	2b464 <__assert_fail@plt+0x189e8>
   29ab4:	ldr	r0, [r5, #-56]	; 0xffffffc8
   29ab8:	ldr	ip, [r5]
   29abc:	cmn	r2, #1
   29ac0:	str	r7, [sp, #72]	; 0x48
   29ac4:	str	sl, [sp, #160]	; 0xa0
   29ac8:	str	r9, [sp, #164]	; 0xa4
   29acc:	str	r0, [sp, #68]	; 0x44
   29ad0:	ble	2b9d8 <__assert_fail@plt+0x18f5c>
   29ad4:	movw	r1, #8738	; 0x2222
   29ad8:	movw	r0, #8738	; 0x2222
   29adc:	mov	r3, #1
   29ae0:	mov	r7, r6
   29ae4:	movt	r1, #8738	; 0x2222
   29ae8:	movt	r0, #546	; 0x222
   29aec:	subs	r1, r1, r6
   29af0:	sbcs	r0, r0, r2
   29af4:	bge	2b9e8 <__assert_fail@plt+0x18f6c>
   29af8:	b	2bbbc <__assert_fail@plt+0x19140>
   29afc:	str	r2, [sp, #188]	; 0xbc
   29b00:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   29b04:	ldr	r2, [sp, #136]	; 0x88
   29b08:	vmov.i32	q8, #0	; 0x00000000
   29b0c:	strd	r0, [r2]
   29b10:	ldr	r2, [sp, #188]	; 0xbc
   29b14:	ldr	r0, [sp, #140]	; 0x8c
   29b18:	vst1.64	{d16-d17}, [r0]
   29b1c:	b	2a3f4 <__assert_fail@plt+0x17978>
   29b20:	str	r2, [sp, #188]	; 0xbc
   29b24:	ldrd	r0, [r5, #-112]	; 0xffffff90
   29b28:	ldr	r2, [sp, #156]	; 0x9c
   29b2c:	str	r6, [sp, #176]	; 0xb0
   29b30:	mov	r7, r3
   29b34:	strd	r0, [r2]
   29b38:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   29b3c:	ldr	r2, [sp, #152]	; 0x98
   29b40:	rsbs	r0, r0, #0
   29b44:	rsc	r3, r1, #0
   29b48:	and	r1, r1, r3
   29b4c:	stm	r2, {r0, r3}
   29b50:	mov	r0, #1
   29b54:	cmp	r1, #0
   29b58:	blt	2c208 <__assert_fail@plt+0x1978c>
   29b5c:	ldrd	r0, [r5, #8]
   29b60:	ldr	r2, [sp, #84]	; 0x54
   29b64:	rsbs	r0, r0, #0
   29b68:	rsc	r3, r1, #0
   29b6c:	stm	r2, {r0, r3}
   29b70:	and	r1, r1, r3
   29b74:	mov	r0, #1
   29b78:	ldr	r6, [sp, #176]	; 0xb0
   29b7c:	ldr	r2, [sp, #188]	; 0xbc
   29b80:	cmp	r1, #0
   29b84:	blt	2c208 <__assert_fail@plt+0x1978c>
   29b88:	ldr	r0, [r5, #16]
   29b8c:	ldr	r1, [sp, #88]	; 0x58
   29b90:	mov	r3, r7
   29b94:	mov	r7, r9
   29b98:	str	r0, [r1]
   29b9c:	b	2ad40 <__assert_fail@plt+0x182c4>
   29ba0:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   29ba4:	b	2a330 <__assert_fail@plt+0x178b4>
   29ba8:	add	r0, sp, #164	; 0xa4
   29bac:	str	r2, [sp, #188]	; 0xbc
   29bb0:	str	r6, [sp, #176]	; 0xb0
   29bb4:	stm	r0, {r7, r8, lr}
   29bb8:	str	sl, [sp, #160]	; 0xa0
   29bbc:	str	r3, [sp, #180]	; 0xb4
   29bc0:	ldr	r1, [r4, #144]	; 0x90
   29bc4:	ldr	r0, [r5, #48]	; 0x30
   29bc8:	ldr	sl, [r5, #4]
   29bcc:	ldr	lr, [r5, #12]
   29bd0:	ldr	ip, [r5, #20]
   29bd4:	ldr	r6, [r5, #36]	; 0x24
   29bd8:	ldr	r2, [r5, #44]	; 0x2c
   29bdc:	ldr	r8, [r5, #32]
   29be0:	ldr	r9, [r5, #40]	; 0x28
   29be4:	add	r0, r1, r0
   29be8:	str	r1, [sp, #72]	; 0x48
   29bec:	ldr	r1, [r5]
   29bf0:	str	sl, [sp, #64]	; 0x40
   29bf4:	str	lr, [sp, #56]	; 0x38
   29bf8:	str	ip, [sp, #44]	; 0x2c
   29bfc:	str	r6, [sp, #24]
   29c00:	str	r2, [sp, #20]
   29c04:	str	r0, [sp, #68]	; 0x44
   29c08:	str	r1, [sp, #60]	; 0x3c
   29c0c:	ldr	r1, [r5, #8]
   29c10:	str	r1, [sp, #52]	; 0x34
   29c14:	ldr	r1, [r5, #16]
   29c18:	str	r1, [sp, #48]	; 0x30
   29c1c:	ldr	r1, [r5, #24]
   29c20:	str	r1, [sp, #40]	; 0x28
   29c24:	ldr	r1, [r5, #28]
   29c28:	str	r0, [r4, #144]	; 0x90
   29c2c:	ldr	r0, [sp, #100]	; 0x64
   29c30:	str	r1, [sp, #32]
   29c34:	ldm	r0, {r3, r7}
   29c38:	adds	r9, r3, r9
   29c3c:	adc	r3, r7, r2
   29c40:	str	r9, [r0]
   29c44:	str	r3, [r0, #4]
   29c48:	ldr	r9, [sp, #104]	; 0x68
   29c4c:	ldm	r9, {r0, r2}
   29c50:	adds	r0, r0, r8
   29c54:	str	r2, [sp, #16]
   29c58:	adc	r6, r2, r6
   29c5c:	stm	r9, {r0, r6}
   29c60:	ldr	r0, [sp, #108]	; 0x6c
   29c64:	ldr	r2, [sp, #40]	; 0x28
   29c68:	ldrd	r8, [r0]
   29c6c:	adds	r8, r8, r2
   29c70:	adc	r1, r9, r1
   29c74:	str	r1, [sp, #28]
   29c78:	str	r8, [r0]
   29c7c:	str	r1, [r0, #4]
   29c80:	ldr	r0, [sp, #112]	; 0x70
   29c84:	ldr	r8, [r0]
   29c88:	ldr	r2, [r0, #4]
   29c8c:	ldr	r1, [sp, #48]	; 0x30
   29c90:	adds	r8, r8, r1
   29c94:	adc	r1, r2, ip
   29c98:	str	r1, [sp, #36]	; 0x24
   29c9c:	str	r8, [r0]
   29ca0:	str	r1, [r0, #4]
   29ca4:	ldr	ip, [sp, #116]	; 0x74
   29ca8:	ldr	r8, [ip]
   29cac:	ldr	r0, [ip, #4]
   29cb0:	ldr	r1, [sp, #52]	; 0x34
   29cb4:	adds	r8, r8, r1
   29cb8:	str	r0, [sp, #40]	; 0x28
   29cbc:	adc	r1, r0, lr
   29cc0:	mov	lr, #0
   29cc4:	str	r1, [sp, #48]	; 0x30
   29cc8:	str	r8, [ip]
   29ccc:	str	r1, [ip, #4]
   29cd0:	ldr	ip, [sp, #120]	; 0x78
   29cd4:	ldr	r8, [ip]
   29cd8:	ldr	r0, [ip, #4]
   29cdc:	ldr	r1, [sp, #60]	; 0x3c
   29ce0:	adds	r8, r8, r1
   29ce4:	str	r0, [sp, #52]	; 0x34
   29ce8:	mov	r1, #0
   29cec:	adc	r0, r0, sl
   29cf0:	cmn	r7, #1
   29cf4:	mov	sl, #0
   29cf8:	str	r0, [sp, #60]	; 0x3c
   29cfc:	str	r8, [ip]
   29d00:	str	r0, [ip, #4]
   29d04:	mov	r0, #0
   29d08:	mov	r8, #0
   29d0c:	mov	ip, #0
   29d10:	movwgt	r0, #1
   29d14:	cmn	r3, #1
   29d18:	mov	r3, #0
   29d1c:	movwgt	r3, #1
   29d20:	str	r0, [sp, #12]
   29d24:	subs	r0, r0, r3
   29d28:	mov	r3, #0
   29d2c:	movwne	r0, #1
   29d30:	str	r0, [sp, #8]
   29d34:	ldr	r0, [sp, #20]
   29d38:	cmn	r0, #1
   29d3c:	mov	r0, #0
   29d40:	movwgt	r0, #1
   29d44:	str	r0, [sp, #20]
   29d48:	ldr	r0, [sp, #16]
   29d4c:	cmn	r0, #1
   29d50:	mov	r0, #0
   29d54:	movwgt	r1, #1
   29d58:	cmn	r6, #1
   29d5c:	ldr	r6, [sp, #68]	; 0x44
   29d60:	movwgt	r0, #1
   29d64:	str	r1, [sp, #16]
   29d68:	subs	r0, r1, r0
   29d6c:	mov	r1, #0
   29d70:	movwne	r0, #1
   29d74:	str	r0, [sp, #4]
   29d78:	ldr	r0, [sp, #24]
   29d7c:	cmn	r0, #1
   29d80:	mov	r0, #0
   29d84:	movwgt	r0, #1
   29d88:	cmn	r9, #1
   29d8c:	str	r0, [sp, #24]
   29d90:	ldr	r0, [sp, #28]
   29d94:	movwgt	r1, #1
   29d98:	str	r1, [sp, #28]
   29d9c:	cmn	r0, #1
   29da0:	mov	r0, #0
   29da4:	movwgt	r0, #1
   29da8:	subs	r0, r1, r0
   29dac:	mov	r1, #0
   29db0:	movwne	r0, #1
   29db4:	str	r0, [sp]
   29db8:	ldr	r0, [sp, #32]
   29dbc:	cmn	r0, #1
   29dc0:	ldr	r0, [sp, #36]	; 0x24
   29dc4:	movwgt	lr, #1
   29dc8:	cmn	r2, #1
   29dcc:	mov	r2, #0
   29dd0:	movwgt	r8, #1
   29dd4:	cmn	r0, #1
   29dd8:	mov	r0, #0
   29ddc:	movwgt	r0, #1
   29de0:	subs	r0, r8, r0
   29de4:	movwne	r0, #1
   29de8:	str	r0, [sp, #36]	; 0x24
   29dec:	ldr	r0, [sp, #44]	; 0x2c
   29df0:	cmn	r0, #1
   29df4:	ldr	r0, [sp, #40]	; 0x28
   29df8:	movwgt	ip, #1
   29dfc:	cmn	r0, #1
   29e00:	ldr	r0, [sp, #48]	; 0x30
   29e04:	movwgt	r2, #1
   29e08:	cmn	r0, #1
   29e0c:	ldr	r0, [sp, #56]	; 0x38
   29e10:	movwgt	r1, #1
   29e14:	subs	r7, r2, r1
   29e18:	mov	r1, #0
   29e1c:	movwne	r7, #1
   29e20:	cmn	r0, #1
   29e24:	ldr	r0, [sp, #52]	; 0x34
   29e28:	movwgt	sl, #1
   29e2c:	cmn	r0, #1
   29e30:	ldr	r0, [sp, #60]	; 0x3c
   29e34:	movwgt	r3, #1
   29e38:	cmn	r0, #1
   29e3c:	ldr	r0, [sp, #64]	; 0x40
   29e40:	movwgt	r1, #1
   29e44:	subs	r1, r3, r1
   29e48:	movwne	r1, #1
   29e4c:	cmn	r0, #1
   29e50:	mov	r0, #0
   29e54:	movwgt	r0, #1
   29e58:	str	r0, [sp, #64]	; 0x40
   29e5c:	ldr	r0, [sp, #72]	; 0x48
   29e60:	cmp	r6, r0
   29e64:	bvs	2c664 <__assert_fail@plt+0x19be8>
   29e68:	ldr	r0, [sp, #12]
   29e6c:	ldr	r6, [sp, #20]
   29e70:	sub	r0, r0, r6
   29e74:	ldr	r6, [sp, #8]
   29e78:	clz	r0, r0
   29e7c:	lsr	r0, r0, #5
   29e80:	ands	r0, r0, r6
   29e84:	bne	2c614 <__assert_fail@plt+0x19b98>
   29e88:	ldr	r0, [sp, #16]
   29e8c:	ldr	r6, [sp, #24]
   29e90:	sub	r0, r0, r6
   29e94:	ldr	r6, [sp, #4]
   29e98:	clz	r0, r0
   29e9c:	lsr	r0, r0, #5
   29ea0:	ands	r0, r0, r6
   29ea4:	bne	2c560 <__assert_fail@plt+0x19ae4>
   29ea8:	ldr	r0, [sp, #28]
   29eac:	ldr	r6, [sp]
   29eb0:	sub	r0, r0, lr
   29eb4:	clz	r0, r0
   29eb8:	lsr	r0, r0, #5
   29ebc:	ands	r0, r0, r6
   29ec0:	bne	2c4c0 <__assert_fail@plt+0x19a44>
   29ec4:	ldr	r6, [sp, #36]	; 0x24
   29ec8:	sub	r0, r8, ip
   29ecc:	clz	r0, r0
   29ed0:	lsr	r0, r0, #5
   29ed4:	ands	r0, r0, r6
   29ed8:	bne	2c40c <__assert_fail@plt+0x19990>
   29edc:	sub	r0, r2, sl
   29ee0:	clz	r0, r0
   29ee4:	lsr	r0, r0, #5
   29ee8:	ands	r0, r0, r7
   29eec:	beq	2a770 <__assert_fail@plt+0x17cf4>
   29ef0:	b	2c2cc <__assert_fail@plt+0x19850>
   29ef4:	add	r0, sp, #164	; 0xa4
   29ef8:	str	r2, [sp, #188]	; 0xbc
   29efc:	str	r6, [sp, #176]	; 0xb0
   29f00:	stm	r0, {r7, r8, lr}
   29f04:	movw	r0, #40336	; 0x9d90
   29f08:	str	sl, [sp, #160]	; 0xa0
   29f0c:	str	r3, [sp, #180]	; 0xb4
   29f10:	movt	r0, #65535	; 0xffff
   29f14:	str	r0, [r4, #24]
   29f18:	ldr	r1, [r4, #144]	; 0x90
   29f1c:	ldr	r0, [r5, #48]	; 0x30
   29f20:	ldr	sl, [r5, #4]
   29f24:	ldr	lr, [r5, #12]
   29f28:	ldr	ip, [r5, #20]
   29f2c:	ldr	r6, [r5, #36]	; 0x24
   29f30:	ldr	r2, [r5, #44]	; 0x2c
   29f34:	ldr	r8, [r5, #32]
   29f38:	ldr	r9, [r5, #40]	; 0x28
   29f3c:	add	r0, r1, r0
   29f40:	str	r1, [sp, #72]	; 0x48
   29f44:	ldr	r1, [r5]
   29f48:	str	sl, [sp, #64]	; 0x40
   29f4c:	str	lr, [sp, #56]	; 0x38
   29f50:	str	ip, [sp, #44]	; 0x2c
   29f54:	str	r6, [sp, #24]
   29f58:	str	r2, [sp, #20]
   29f5c:	str	r0, [sp, #68]	; 0x44
   29f60:	str	r1, [sp, #60]	; 0x3c
   29f64:	ldr	r1, [r5, #8]
   29f68:	str	r1, [sp, #52]	; 0x34
   29f6c:	ldr	r1, [r5, #16]
   29f70:	str	r1, [sp, #48]	; 0x30
   29f74:	ldr	r1, [r5, #24]
   29f78:	str	r1, [sp, #40]	; 0x28
   29f7c:	ldr	r1, [r5, #28]
   29f80:	str	r0, [r4, #144]	; 0x90
   29f84:	ldr	r0, [sp, #100]	; 0x64
   29f88:	str	r1, [sp, #32]
   29f8c:	ldm	r0, {r3, r7}
   29f90:	adds	r9, r3, r9
   29f94:	adc	r3, r7, r2
   29f98:	str	r9, [r0]
   29f9c:	str	r3, [r0, #4]
   29fa0:	ldr	r9, [sp, #104]	; 0x68
   29fa4:	ldm	r9, {r0, r2}
   29fa8:	adds	r0, r0, r8
   29fac:	str	r2, [sp, #16]
   29fb0:	adc	r6, r2, r6
   29fb4:	stm	r9, {r0, r6}
   29fb8:	ldr	r0, [sp, #108]	; 0x6c
   29fbc:	ldr	r2, [sp, #40]	; 0x28
   29fc0:	ldrd	r8, [r0]
   29fc4:	adds	r8, r8, r2
   29fc8:	adc	r1, r9, r1
   29fcc:	str	r1, [sp, #28]
   29fd0:	str	r8, [r0]
   29fd4:	str	r1, [r0, #4]
   29fd8:	ldr	r0, [sp, #112]	; 0x70
   29fdc:	ldr	r8, [r0]
   29fe0:	ldr	r2, [r0, #4]
   29fe4:	ldr	r1, [sp, #48]	; 0x30
   29fe8:	adds	r8, r8, r1
   29fec:	adc	r1, r2, ip
   29ff0:	str	r1, [sp, #36]	; 0x24
   29ff4:	str	r8, [r0]
   29ff8:	str	r1, [r0, #4]
   29ffc:	ldr	ip, [sp, #116]	; 0x74
   2a000:	ldr	r8, [ip]
   2a004:	ldr	r0, [ip, #4]
   2a008:	ldr	r1, [sp, #52]	; 0x34
   2a00c:	adds	r8, r8, r1
   2a010:	str	r0, [sp, #40]	; 0x28
   2a014:	adc	r1, r0, lr
   2a018:	mov	lr, #0
   2a01c:	str	r1, [sp, #48]	; 0x30
   2a020:	str	r8, [ip]
   2a024:	str	r1, [ip, #4]
   2a028:	ldr	ip, [sp, #120]	; 0x78
   2a02c:	ldr	r8, [ip]
   2a030:	ldr	r0, [ip, #4]
   2a034:	ldr	r1, [sp, #60]	; 0x3c
   2a038:	adds	r8, r8, r1
   2a03c:	str	r0, [sp, #52]	; 0x34
   2a040:	mov	r1, #0
   2a044:	adc	r0, r0, sl
   2a048:	cmn	r7, #1
   2a04c:	mov	sl, #0
   2a050:	str	r0, [sp, #60]	; 0x3c
   2a054:	str	r8, [ip]
   2a058:	str	r0, [ip, #4]
   2a05c:	mov	r0, #0
   2a060:	mov	r8, #0
   2a064:	mov	ip, #0
   2a068:	movwgt	r0, #1
   2a06c:	cmn	r3, #1
   2a070:	mov	r3, #0
   2a074:	movwgt	r3, #1
   2a078:	str	r0, [sp, #12]
   2a07c:	subs	r0, r0, r3
   2a080:	mov	r3, #0
   2a084:	movwne	r0, #1
   2a088:	str	r0, [sp, #8]
   2a08c:	ldr	r0, [sp, #20]
   2a090:	cmn	r0, #1
   2a094:	mov	r0, #0
   2a098:	movwgt	r0, #1
   2a09c:	str	r0, [sp, #20]
   2a0a0:	ldr	r0, [sp, #16]
   2a0a4:	cmn	r0, #1
   2a0a8:	mov	r0, #0
   2a0ac:	movwgt	r1, #1
   2a0b0:	cmn	r6, #1
   2a0b4:	ldr	r6, [sp, #68]	; 0x44
   2a0b8:	movwgt	r0, #1
   2a0bc:	str	r1, [sp, #16]
   2a0c0:	subs	r0, r1, r0
   2a0c4:	mov	r1, #0
   2a0c8:	movwne	r0, #1
   2a0cc:	str	r0, [sp, #4]
   2a0d0:	ldr	r0, [sp, #24]
   2a0d4:	cmn	r0, #1
   2a0d8:	mov	r0, #0
   2a0dc:	movwgt	r0, #1
   2a0e0:	cmn	r9, #1
   2a0e4:	str	r0, [sp, #24]
   2a0e8:	ldr	r0, [sp, #28]
   2a0ec:	movwgt	r1, #1
   2a0f0:	str	r1, [sp, #28]
   2a0f4:	cmn	r0, #1
   2a0f8:	mov	r0, #0
   2a0fc:	movwgt	r0, #1
   2a100:	subs	r0, r1, r0
   2a104:	mov	r1, #0
   2a108:	movwne	r0, #1
   2a10c:	str	r0, [sp]
   2a110:	ldr	r0, [sp, #32]
   2a114:	cmn	r0, #1
   2a118:	ldr	r0, [sp, #36]	; 0x24
   2a11c:	movwgt	lr, #1
   2a120:	cmn	r2, #1
   2a124:	mov	r2, #0
   2a128:	movwgt	r8, #1
   2a12c:	cmn	r0, #1
   2a130:	mov	r0, #0
   2a134:	movwgt	r0, #1
   2a138:	subs	r0, r8, r0
   2a13c:	movwne	r0, #1
   2a140:	str	r0, [sp, #36]	; 0x24
   2a144:	ldr	r0, [sp, #44]	; 0x2c
   2a148:	cmn	r0, #1
   2a14c:	ldr	r0, [sp, #40]	; 0x28
   2a150:	movwgt	ip, #1
   2a154:	cmn	r0, #1
   2a158:	ldr	r0, [sp, #48]	; 0x30
   2a15c:	movwgt	r2, #1
   2a160:	cmn	r0, #1
   2a164:	ldr	r0, [sp, #56]	; 0x38
   2a168:	movwgt	r1, #1
   2a16c:	subs	r7, r2, r1
   2a170:	mov	r1, #0
   2a174:	movwne	r7, #1
   2a178:	cmn	r0, #1
   2a17c:	ldr	r0, [sp, #52]	; 0x34
   2a180:	movwgt	sl, #1
   2a184:	cmn	r0, #1
   2a188:	ldr	r0, [sp, #60]	; 0x3c
   2a18c:	movwgt	r3, #1
   2a190:	cmn	r0, #1
   2a194:	ldr	r0, [sp, #64]	; 0x40
   2a198:	movwgt	r1, #1
   2a19c:	subs	r1, r3, r1
   2a1a0:	movwne	r1, #1
   2a1a4:	cmn	r0, #1
   2a1a8:	mov	r0, #0
   2a1ac:	movwgt	r0, #1
   2a1b0:	str	r0, [sp, #64]	; 0x40
   2a1b4:	ldr	r0, [sp, #72]	; 0x48
   2a1b8:	cmp	r6, r0
   2a1bc:	bvs	2c600 <__assert_fail@plt+0x19b84>
   2a1c0:	ldr	r0, [sp, #12]
   2a1c4:	ldr	r6, [sp, #20]
   2a1c8:	sub	r0, r0, r6
   2a1cc:	ldr	r6, [sp, #8]
   2a1d0:	clz	r0, r0
   2a1d4:	lsr	r0, r0, #5
   2a1d8:	ands	r0, r0, r6
   2a1dc:	bne	2c5d8 <__assert_fail@plt+0x19b5c>
   2a1e0:	ldr	r0, [sp, #16]
   2a1e4:	ldr	r6, [sp, #24]
   2a1e8:	sub	r0, r0, r6
   2a1ec:	ldr	r6, [sp, #4]
   2a1f0:	clz	r0, r0
   2a1f4:	lsr	r0, r0, #5
   2a1f8:	ands	r0, r0, r6
   2a1fc:	bne	2c54c <__assert_fail@plt+0x19ad0>
   2a200:	ldr	r0, [sp, #28]
   2a204:	ldr	r6, [sp]
   2a208:	sub	r0, r0, lr
   2a20c:	clz	r0, r0
   2a210:	lsr	r0, r0, #5
   2a214:	ands	r0, r0, r6
   2a218:	bne	2c4fc <__assert_fail@plt+0x19a80>
   2a21c:	ldr	r6, [sp, #36]	; 0x24
   2a220:	sub	r0, r8, ip
   2a224:	clz	r0, r0
   2a228:	lsr	r0, r0, #5
   2a22c:	ands	r0, r0, r6
   2a230:	bne	2c3f8 <__assert_fail@plt+0x1997c>
   2a234:	sub	r0, r2, sl
   2a238:	clz	r0, r0
   2a23c:	lsr	r0, r0, #5
   2a240:	ands	r0, r0, r7
   2a244:	bne	2c2f4 <__assert_fail@plt+0x19878>
   2a248:	ldr	r0, [sp, #64]	; 0x40
   2a24c:	ldr	sl, [sp, #160]	; 0xa0
   2a250:	ldr	r7, [sp, #164]	; 0xa4
   2a254:	ldr	r8, [sp, #168]	; 0xa8
   2a258:	ldr	r6, [sp, #176]	; 0xb0
   2a25c:	sub	r0, r3, r0
   2a260:	clz	r0, r0
   2a264:	lsr	r0, r0, #5
   2a268:	ands	r0, r0, r1
   2a26c:	mov	r0, #1
   2a270:	bne	2c208 <__assert_fail@plt+0x1978c>
   2a274:	movw	r1, #6993	; 0x1b51
   2a278:	mov	r0, #1
   2a27c:	mov	r2, #5
   2a280:	strb	r0, [r4, #153]	; 0x99
   2a284:	movt	r1, #5
   2a288:	mov	r0, #0
   2a28c:	bl	1253c <dcgettext@plt>
   2a290:	ldr	r2, [sp, #188]	; 0xbc
   2a294:	ldr	r3, [sp, #180]	; 0xb4
   2a298:	ldr	lr, [sp, #172]	; 0xac
   2a29c:	b	2ad40 <__assert_fail@plt+0x182c4>
   2a2a0:	str	sl, [sp, #160]	; 0xa0
   2a2a4:	mov	r1, r3
   2a2a8:	mov	sl, r6
   2a2ac:	ldr	r0, [r5, #-56]	; 0xffffffc8
   2a2b0:	ldr	r9, [r5, #-52]	; 0xffffffcc
   2a2b4:	str	r2, [sp, #188]	; 0xbc
   2a2b8:	ldr	r2, [r5, #-272]	; 0xfffffef0
   2a2bc:	ldr	r3, [r5, #-268]	; 0xfffffef4
   2a2c0:	str	lr, [sp, #172]	; 0xac
   2a2c4:	mov	lr, r7
   2a2c8:	ldrd	r6, [r5, #-160]	; 0xffffff60
   2a2cc:	str	r0, [sp, #72]	; 0x48
   2a2d0:	ldr	r0, [sp, #136]	; 0x88
   2a2d4:	strd	r2, [r0]
   2a2d8:	mov	r3, r1
   2a2dc:	ldr	r2, [sp, #140]	; 0x8c
   2a2e0:	strd	r6, [r2]
   2a2e4:	mov	r6, sl
   2a2e8:	mov	r7, lr
   2a2ec:	ldr	r0, [sp, #72]	; 0x48
   2a2f0:	ldr	r2, [sp, #188]	; 0xbc
   2a2f4:	str	r0, [r4, #88]	; 0x58
   2a2f8:	str	r9, [r4, #92]	; 0x5c
   2a2fc:	ldr	sl, [sp, #160]	; 0xa0
   2a300:	ldr	lr, [sp, #172]	; 0xac
   2a304:	b	2a3f4 <__assert_fail@plt+0x17978>
   2a308:	ldr	r0, [r5]
   2a30c:	str	r0, [r4, #24]
   2a310:	b	2ad40 <__assert_fail@plt+0x182c4>
   2a314:	ldr	r0, [r4, #172]	; 0xac
   2a318:	movw	r1, #62224	; 0xf310
   2a31c:	movt	r1, #4
   2a320:	add	r0, r0, #1
   2a324:	str	r0, [r4, #172]	; 0xac
   2a328:	b	2aa10 <__assert_fail@plt+0x17f94>
   2a32c:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   2a330:	str	r2, [sp, #188]	; 0xbc
   2a334:	ldr	r2, [sp, #92]	; 0x5c
   2a338:	strd	r0, [r2]
   2a33c:	mov	r1, #1
   2a340:	ldr	r0, [r5]
   2a344:	ldr	r2, [sp, #188]	; 0xbc
   2a348:	strb	r1, [r4, #187]	; 0xbb
   2a34c:	str	r0, [r4, #16]
   2a350:	b	2ad40 <__assert_fail@plt+0x182c4>
   2a354:	ldr	r0, [r5, #-208]	; 0xffffff30
   2a358:	str	r2, [sp, #188]	; 0xbc
   2a35c:	cmp	r0, #4
   2a360:	blt	2b084 <__assert_fail@plt+0x18608>
   2a364:	sub	r0, r5, #224	; 0xe0
   2a368:	vldr	d18, [r5, #-208]	; 0xffffff30
   2a36c:	vld1.64	{d16-d17}, [r0]
   2a370:	ldr	r0, [sp, #96]	; 0x60
   2a374:	vst1.64	{d16-d17}, [r0]!
   2a378:	vstr	d18, [r0]
   2a37c:	ldrd	r0, [r5, #-104]	; 0xffffff98
   2a380:	b	2aa64 <__assert_fail@plt+0x17fe8>
   2a384:	ldr	r0, [r4, #156]	; 0x9c
   2a388:	movw	r1, #6984	; 0x1b48
   2a38c:	movt	r1, #5
   2a390:	add	r0, r0, #1
   2a394:	str	r0, [r4, #156]	; 0x9c
   2a398:	b	2aa10 <__assert_fail@plt+0x17f94>
   2a39c:	str	r6, [sp, #176]	; 0xb0
   2a3a0:	mov	ip, r3
   2a3a4:	ldr	r6, [r5, #-160]	; 0xffffff60
   2a3a8:	ldr	r1, [r5, #-156]	; 0xffffff64
   2a3ac:	ldr	r7, [sp, #136]	; 0x88
   2a3b0:	str	lr, [sp, #172]	; 0xac
   2a3b4:	mov	lr, r2
   2a3b8:	str	sl, [sp, #160]	; 0xa0
   2a3bc:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   2a3c0:	str	r6, [r7]
   2a3c4:	str	r1, [r7, #4]
   2a3c8:	mov	r7, r9
   2a3cc:	ldr	r0, [sp, #140]	; 0x8c
   2a3d0:	ldr	r6, [sp, #176]	; 0xb0
   2a3d4:	strd	r2, [r0]
   2a3d8:	mov	r2, lr
   2a3dc:	mov	r0, #0
   2a3e0:	mov	r3, ip
   2a3e4:	ldr	sl, [sp, #160]	; 0xa0
   2a3e8:	ldr	lr, [sp, #172]	; 0xac
   2a3ec:	str	r0, [r4, #88]	; 0x58
   2a3f0:	str	r0, [r4, #92]	; 0x5c
   2a3f4:	ldr	r0, [r5]
   2a3f8:	str	r0, [r4, #28]
   2a3fc:	b	2ad40 <__assert_fail@plt+0x182c4>
   2a400:	ldrd	r0, [r5, #8]
   2a404:	str	r0, [sp, #236]	; 0xec
   2a408:	adds	r0, r0, #-2147483648	; 0x80000000
   2a40c:	adcs	r0, r1, #0
   2a410:	beq	2ad38 <__assert_fail@plt+0x182bc>
   2a414:	b	2c254 <__assert_fail@plt+0x197d8>
   2a418:	ldr	r0, [r5]
   2a41c:	add	r0, r0, #3600	; 0xe10
   2a420:	str	r0, [r4, #24]
   2a424:	b	2ad40 <__assert_fail@plt+0x182c4>
   2a428:	add	r0, sp, #164	; 0xa4
   2a42c:	str	r2, [sp, #188]	; 0xbc
   2a430:	str	r6, [sp, #176]	; 0xb0
   2a434:	stm	r0, {r7, r8, lr}
   2a438:	str	sl, [sp, #160]	; 0xa0
   2a43c:	str	r3, [sp, #180]	; 0xb4
   2a440:	ldr	r1, [r4, #144]	; 0x90
   2a444:	ldr	r0, [r5, #48]	; 0x30
   2a448:	ldr	sl, [r5, #4]
   2a44c:	ldr	lr, [r5, #12]
   2a450:	ldr	ip, [r5, #20]
   2a454:	ldr	r6, [r5, #36]	; 0x24
   2a458:	ldr	r2, [r5, #44]	; 0x2c
   2a45c:	ldr	r8, [r5, #32]
   2a460:	ldr	r9, [r5, #40]	; 0x28
   2a464:	add	r0, r1, r0
   2a468:	str	r1, [sp, #72]	; 0x48
   2a46c:	ldr	r1, [r5]
   2a470:	str	sl, [sp, #64]	; 0x40
   2a474:	str	lr, [sp, #56]	; 0x38
   2a478:	str	ip, [sp, #44]	; 0x2c
   2a47c:	str	r6, [sp, #24]
   2a480:	str	r2, [sp, #20]
   2a484:	str	r0, [sp, #68]	; 0x44
   2a488:	str	r1, [sp, #60]	; 0x3c
   2a48c:	ldr	r1, [r5, #8]
   2a490:	str	r1, [sp, #52]	; 0x34
   2a494:	ldr	r1, [r5, #16]
   2a498:	str	r1, [sp, #48]	; 0x30
   2a49c:	ldr	r1, [r5, #24]
   2a4a0:	str	r1, [sp, #40]	; 0x28
   2a4a4:	ldr	r1, [r5, #28]
   2a4a8:	str	r0, [r4, #144]	; 0x90
   2a4ac:	ldr	r0, [sp, #100]	; 0x64
   2a4b0:	str	r1, [sp, #32]
   2a4b4:	ldm	r0, {r3, r7}
   2a4b8:	adds	r9, r3, r9
   2a4bc:	adc	r3, r7, r2
   2a4c0:	str	r9, [r0]
   2a4c4:	str	r3, [r0, #4]
   2a4c8:	ldr	r9, [sp, #104]	; 0x68
   2a4cc:	ldm	r9, {r0, r2}
   2a4d0:	adds	r0, r0, r8
   2a4d4:	str	r2, [sp, #16]
   2a4d8:	adc	r6, r2, r6
   2a4dc:	stm	r9, {r0, r6}
   2a4e0:	ldr	r0, [sp, #108]	; 0x6c
   2a4e4:	ldr	r2, [sp, #40]	; 0x28
   2a4e8:	ldrd	r8, [r0]
   2a4ec:	adds	r8, r8, r2
   2a4f0:	adc	r1, r9, r1
   2a4f4:	str	r1, [sp, #28]
   2a4f8:	str	r8, [r0]
   2a4fc:	str	r1, [r0, #4]
   2a500:	ldr	r0, [sp, #112]	; 0x70
   2a504:	ldr	r8, [r0]
   2a508:	ldr	r2, [r0, #4]
   2a50c:	ldr	r1, [sp, #48]	; 0x30
   2a510:	adds	r8, r8, r1
   2a514:	adc	r1, r2, ip
   2a518:	str	r1, [sp, #36]	; 0x24
   2a51c:	str	r8, [r0]
   2a520:	str	r1, [r0, #4]
   2a524:	ldr	ip, [sp, #116]	; 0x74
   2a528:	ldr	r8, [ip]
   2a52c:	ldr	r0, [ip, #4]
   2a530:	ldr	r1, [sp, #52]	; 0x34
   2a534:	adds	r8, r8, r1
   2a538:	str	r0, [sp, #40]	; 0x28
   2a53c:	adc	r1, r0, lr
   2a540:	mov	lr, #0
   2a544:	str	r1, [sp, #48]	; 0x30
   2a548:	str	r8, [ip]
   2a54c:	str	r1, [ip, #4]
   2a550:	ldr	ip, [sp, #120]	; 0x78
   2a554:	ldr	r8, [ip]
   2a558:	ldr	r0, [ip, #4]
   2a55c:	ldr	r1, [sp, #60]	; 0x3c
   2a560:	adds	r8, r8, r1
   2a564:	str	r0, [sp, #52]	; 0x34
   2a568:	mov	r1, #0
   2a56c:	adc	r0, r0, sl
   2a570:	cmn	r7, #1
   2a574:	mov	sl, #0
   2a578:	str	r0, [sp, #60]	; 0x3c
   2a57c:	str	r8, [ip]
   2a580:	str	r0, [ip, #4]
   2a584:	mov	r0, #0
   2a588:	mov	r8, #0
   2a58c:	mov	ip, #0
   2a590:	movwgt	r0, #1
   2a594:	cmn	r3, #1
   2a598:	mov	r3, #0
   2a59c:	movwgt	r3, #1
   2a5a0:	str	r0, [sp, #12]
   2a5a4:	subs	r0, r0, r3
   2a5a8:	mov	r3, #0
   2a5ac:	movwne	r0, #1
   2a5b0:	str	r0, [sp, #8]
   2a5b4:	ldr	r0, [sp, #20]
   2a5b8:	cmn	r0, #1
   2a5bc:	mov	r0, #0
   2a5c0:	movwgt	r0, #1
   2a5c4:	str	r0, [sp, #20]
   2a5c8:	ldr	r0, [sp, #16]
   2a5cc:	cmn	r0, #1
   2a5d0:	mov	r0, #0
   2a5d4:	movwgt	r1, #1
   2a5d8:	cmn	r6, #1
   2a5dc:	ldr	r6, [sp, #68]	; 0x44
   2a5e0:	movwgt	r0, #1
   2a5e4:	str	r1, [sp, #16]
   2a5e8:	subs	r0, r1, r0
   2a5ec:	mov	r1, #0
   2a5f0:	movwne	r0, #1
   2a5f4:	str	r0, [sp, #4]
   2a5f8:	ldr	r0, [sp, #24]
   2a5fc:	cmn	r0, #1
   2a600:	mov	r0, #0
   2a604:	movwgt	r0, #1
   2a608:	cmn	r9, #1
   2a60c:	str	r0, [sp, #24]
   2a610:	ldr	r0, [sp, #28]
   2a614:	movwgt	r1, #1
   2a618:	str	r1, [sp, #28]
   2a61c:	cmn	r0, #1
   2a620:	mov	r0, #0
   2a624:	movwgt	r0, #1
   2a628:	subs	r0, r1, r0
   2a62c:	mov	r1, #0
   2a630:	movwne	r0, #1
   2a634:	str	r0, [sp]
   2a638:	ldr	r0, [sp, #32]
   2a63c:	cmn	r0, #1
   2a640:	ldr	r0, [sp, #36]	; 0x24
   2a644:	movwgt	lr, #1
   2a648:	cmn	r2, #1
   2a64c:	mov	r2, #0
   2a650:	movwgt	r8, #1
   2a654:	cmn	r0, #1
   2a658:	mov	r0, #0
   2a65c:	movwgt	r0, #1
   2a660:	subs	r0, r8, r0
   2a664:	movwne	r0, #1
   2a668:	str	r0, [sp, #36]	; 0x24
   2a66c:	ldr	r0, [sp, #44]	; 0x2c
   2a670:	cmn	r0, #1
   2a674:	ldr	r0, [sp, #40]	; 0x28
   2a678:	movwgt	ip, #1
   2a67c:	cmn	r0, #1
   2a680:	ldr	r0, [sp, #48]	; 0x30
   2a684:	movwgt	r2, #1
   2a688:	cmn	r0, #1
   2a68c:	ldr	r0, [sp, #56]	; 0x38
   2a690:	movwgt	r1, #1
   2a694:	subs	r7, r2, r1
   2a698:	mov	r1, #0
   2a69c:	movwne	r7, #1
   2a6a0:	cmn	r0, #1
   2a6a4:	ldr	r0, [sp, #52]	; 0x34
   2a6a8:	movwgt	sl, #1
   2a6ac:	cmn	r0, #1
   2a6b0:	ldr	r0, [sp, #60]	; 0x3c
   2a6b4:	movwgt	r3, #1
   2a6b8:	cmn	r0, #1
   2a6bc:	ldr	r0, [sp, #64]	; 0x40
   2a6c0:	movwgt	r1, #1
   2a6c4:	subs	r1, r3, r1
   2a6c8:	movwne	r1, #1
   2a6cc:	cmn	r0, #1
   2a6d0:	mov	r0, #0
   2a6d4:	movwgt	r0, #1
   2a6d8:	str	r0, [sp, #64]	; 0x40
   2a6dc:	ldr	r0, [sp, #72]	; 0x48
   2a6e0:	cmp	r6, r0
   2a6e4:	bvs	2c678 <__assert_fail@plt+0x19bfc>
   2a6e8:	ldr	r0, [sp, #12]
   2a6ec:	ldr	r6, [sp, #20]
   2a6f0:	sub	r0, r0, r6
   2a6f4:	ldr	r6, [sp, #8]
   2a6f8:	clz	r0, r0
   2a6fc:	lsr	r0, r0, #5
   2a700:	ands	r0, r0, r6
   2a704:	bne	2c650 <__assert_fail@plt+0x19bd4>
   2a708:	ldr	r0, [sp, #16]
   2a70c:	ldr	r6, [sp, #24]
   2a710:	sub	r0, r0, r6
   2a714:	ldr	r6, [sp, #4]
   2a718:	clz	r0, r0
   2a71c:	lsr	r0, r0, #5
   2a720:	ands	r0, r0, r6
   2a724:	bne	2c574 <__assert_fail@plt+0x19af8>
   2a728:	ldr	r0, [sp, #28]
   2a72c:	ldr	r6, [sp]
   2a730:	sub	r0, r0, lr
   2a734:	clz	r0, r0
   2a738:	lsr	r0, r0, #5
   2a73c:	ands	r0, r0, r6
   2a740:	bne	2c4e8 <__assert_fail@plt+0x19a6c>
   2a744:	ldr	r6, [sp, #36]	; 0x24
   2a748:	sub	r0, r8, ip
   2a74c:	clz	r0, r0
   2a750:	lsr	r0, r0, #5
   2a754:	ands	r0, r0, r6
   2a758:	bne	2c3e4 <__assert_fail@plt+0x19968>
   2a75c:	sub	r0, r2, sl
   2a760:	clz	r0, r0
   2a764:	lsr	r0, r0, #5
   2a768:	ands	r0, r0, r7
   2a76c:	bne	2c2e0 <__assert_fail@plt+0x19864>
   2a770:	ldr	r0, [sp, #64]	; 0x40
   2a774:	sub	r0, r3, r0
   2a778:	ldr	r3, [sp, #180]	; 0xb4
   2a77c:	ldr	sl, [sp, #160]	; 0xa0
   2a780:	ldr	r7, [sp, #164]	; 0xa4
   2a784:	ldr	lr, [sp, #172]	; 0xac
   2a788:	b	2b93c <__assert_fail@plt+0x18ec0>
   2a78c:	str	r2, [sp, #188]	; 0xbc
   2a790:	ldrd	r0, [r5]
   2a794:	ldr	r2, [sp, #76]	; 0x4c
   2a798:	strd	r0, [r2]
   2a79c:	movw	r1, #62754	; 0xf522
   2a7a0:	mov	r0, #1
   2a7a4:	mov	r2, #5
   2a7a8:	str	r6, [sp, #176]	; 0xb0
   2a7ac:	str	r8, [sp, #168]	; 0xa8
   2a7b0:	mov	r6, r3
   2a7b4:	str	r7, [sp, #164]	; 0xa4
   2a7b8:	str	lr, [sp, #172]	; 0xac
   2a7bc:	strb	r0, [r4, #152]	; 0x98
   2a7c0:	movt	r1, #4
   2a7c4:	mov	r0, #0
   2a7c8:	bl	1253c <dcgettext@plt>
   2a7cc:	mov	r3, r6
   2a7d0:	ldr	r2, [sp, #188]	; 0xbc
   2a7d4:	ldr	r7, [sp, #164]	; 0xa4
   2a7d8:	ldr	r6, [sp, #176]	; 0xb0
   2a7dc:	ldr	r8, [sp, #168]	; 0xa8
   2a7e0:	ldr	lr, [sp, #172]	; 0xac
   2a7e4:	b	2ad40 <__assert_fail@plt+0x182c4>
   2a7e8:	ldr	r1, [r4, #172]	; 0xac
   2a7ec:	ldr	r0, [r4, #156]	; 0x9c
   2a7f0:	add	r1, r1, #1
   2a7f4:	add	r0, r0, #1
   2a7f8:	str	r1, [r4, #172]	; 0xac
   2a7fc:	movw	r1, #6964	; 0x1b34
   2a800:	str	r0, [r4, #156]	; 0x9c
   2a804:	movt	r1, #5
   2a808:	b	2aa10 <__assert_fail@plt+0x17f94>
   2a80c:	ldr	r0, [r4, #160]	; 0xa0
   2a810:	movw	r1, #6989	; 0x1b4d
   2a814:	movt	r1, #5
   2a818:	add	r0, r0, #1
   2a81c:	str	r0, [r4, #160]	; 0xa0
   2a820:	b	2aa10 <__assert_fail@plt+0x17f94>
   2a824:	movw	r1, #6993	; 0x1b51
   2a828:	movt	r1, #5
   2a82c:	b	2aa10 <__assert_fail@plt+0x17f94>
   2a830:	mov	r0, #1
   2a834:	mov	r7, #0
   2a838:	mov	r8, #0
   2a83c:	mov	lr, #0
   2a840:	mov	r6, #0
   2a844:	mov	r2, #0
   2a848:	str	r0, [sp, #236]	; 0xec
   2a84c:	mov	r0, #0
   2a850:	str	r0, [sp, #228]	; 0xe4
   2a854:	mov	r0, #0
   2a858:	str	r0, [sp, #224]	; 0xe0
   2a85c:	mov	r0, #0
   2a860:	str	r0, [sp, #216]	; 0xd8
   2a864:	mov	r0, #0
   2a868:	str	r0, [sp, #220]	; 0xdc
   2a86c:	mov	r0, #0
   2a870:	str	r0, [sp, #212]	; 0xd4
   2a874:	mov	r0, #0
   2a878:	str	r0, [sp, #208]	; 0xd0
   2a87c:	b	2ad38 <__assert_fail@plt+0x182bc>
   2a880:	str	r6, [sp, #176]	; 0xb0
   2a884:	mov	ip, r3
   2a888:	ldr	r6, [r5, #-160]	; 0xffffff60
   2a88c:	ldr	r1, [r5, #-156]	; 0xffffff64
   2a890:	str	r7, [sp, #164]	; 0xa4
   2a894:	ldr	r7, [sp, #136]	; 0x88
   2a898:	str	lr, [sp, #172]	; 0xac
   2a89c:	mov	lr, r2
   2a8a0:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   2a8a4:	str	r6, [r7]
   2a8a8:	str	r1, [r7, #4]
   2a8ac:	ldr	r0, [sp, #140]	; 0x8c
   2a8b0:	ldr	r6, [sp, #176]	; 0xb0
   2a8b4:	strd	r2, [r0]
   2a8b8:	mov	r2, lr
   2a8bc:	mov	r0, #0
   2a8c0:	mov	r3, ip
   2a8c4:	ldr	r7, [sp, #164]	; 0xa4
   2a8c8:	ldr	lr, [sp, #172]	; 0xac
   2a8cc:	str	r0, [r4, #88]	; 0x58
   2a8d0:	str	r0, [r4, #92]	; 0x5c
   2a8d4:	b	2a93c <__assert_fail@plt+0x17ec0>
   2a8d8:	str	sl, [sp, #160]	; 0xa0
   2a8dc:	mov	r1, r3
   2a8e0:	mov	sl, r6
   2a8e4:	ldr	r0, [r5, #-56]	; 0xffffffc8
   2a8e8:	ldr	r9, [r5, #-52]	; 0xffffffcc
   2a8ec:	str	r2, [sp, #188]	; 0xbc
   2a8f0:	ldr	r2, [r5, #-272]	; 0xfffffef0
   2a8f4:	ldr	r3, [r5, #-268]	; 0xfffffef4
   2a8f8:	str	lr, [sp, #172]	; 0xac
   2a8fc:	mov	lr, r7
   2a900:	ldrd	r6, [r5, #-160]	; 0xffffff60
   2a904:	str	r0, [sp, #72]	; 0x48
   2a908:	ldr	r0, [sp, #136]	; 0x88
   2a90c:	strd	r2, [r0]
   2a910:	mov	r3, r1
   2a914:	ldr	r2, [sp, #140]	; 0x8c
   2a918:	strd	r6, [r2]
   2a91c:	mov	r6, sl
   2a920:	mov	r7, lr
   2a924:	ldr	r0, [sp, #72]	; 0x48
   2a928:	ldr	r2, [sp, #188]	; 0xbc
   2a92c:	str	r0, [r4, #88]	; 0x58
   2a930:	str	r9, [r4, #92]	; 0x5c
   2a934:	ldr	sl, [sp, #160]	; 0xa0
   2a938:	ldr	lr, [sp, #172]	; 0xac
   2a93c:	mov	r0, #2
   2a940:	str	r0, [r4, #28]
   2a944:	b	2ad40 <__assert_fail@plt+0x182c4>
   2a948:	ldrd	r0, [r5, #-104]	; 0xffffff98
   2a94c:	b	2aa60 <__assert_fail@plt+0x17fe4>
   2a950:	ldr	r0, [r4, #164]	; 0xa4
   2a954:	movw	r1, #6973	; 0x1b3d
   2a958:	movt	r1, #5
   2a95c:	add	r0, r0, #1
   2a960:	str	r0, [r4, #164]	; 0xa4
   2a964:	b	2aa10 <__assert_fail@plt+0x17f94>
   2a968:	ldr	r0, [r4, #176]	; 0xb0
   2a96c:	movw	r1, #6979	; 0x1b43
   2a970:	movt	r1, #5
   2a974:	add	r0, r0, #1
   2a978:	str	r0, [r4, #176]	; 0xb0
   2a97c:	b	2aa10 <__assert_fail@plt+0x17f94>
   2a980:	str	r2, [sp, #188]	; 0xbc
   2a984:	ldrd	r0, [r5, #-104]	; 0xffffff98
   2a988:	ldr	r2, [sp, #152]	; 0x98
   2a98c:	strd	r0, [r2]
   2a990:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   2a994:	ldr	r2, [sp, #156]	; 0x9c
   2a998:	b	2b098 <__assert_fail@plt+0x1861c>
   2a99c:	ldr	r7, [r5, #-56]	; 0xffffffc8
   2a9a0:	ldr	r8, [r5, #-52]	; 0xffffffcc
   2a9a4:	mov	lr, #0
   2a9a8:	mov	r6, #0
   2a9ac:	mov	r2, #0
   2a9b0:	mov	r0, #0
   2a9b4:	str	r0, [sp, #228]	; 0xe4
   2a9b8:	b	2a9f4 <__assert_fail@plt+0x17f78>
   2a9bc:	movw	r1, #7002	; 0x1b5a
   2a9c0:	movt	r1, #5
   2a9c4:	b	2aa10 <__assert_fail@plt+0x17f94>
   2a9c8:	ldrd	r0, [r5, #8]
   2a9cc:	str	r1, [sp, #232]	; 0xe8
   2a9d0:	str	r0, [sp, #236]	; 0xec
   2a9d4:	b	2ad40 <__assert_fail@plt+0x182c4>
   2a9d8:	ldr	r2, [r5, #-56]	; 0xffffffc8
   2a9dc:	ldr	r0, [r5, #-52]	; 0xffffffcc
   2a9e0:	str	r0, [sp, #228]	; 0xe4
   2a9e4:	mov	r7, #0
   2a9e8:	mov	r8, #0
   2a9ec:	mov	lr, #0
   2a9f0:	mov	r6, #0
   2a9f4:	mov	r0, #0
   2a9f8:	str	r0, [sp, #224]	; 0xe0
   2a9fc:	mov	r0, #0
   2aa00:	str	r0, [sp, #216]	; 0xd8
   2aa04:	b	2ad18 <__assert_fail@plt+0x1829c>
   2aa08:	movw	r1, #2569	; 0xa09
   2aa0c:	movt	r1, #5
   2aa10:	str	r2, [sp, #188]	; 0xbc
   2aa14:	mov	r0, #0
   2aa18:	mov	r2, #5
   2aa1c:	str	r6, [sp, #176]	; 0xb0
   2aa20:	str	r7, [sp, #164]	; 0xa4
   2aa24:	mov	r6, r3
   2aa28:	str	r8, [sp, #168]	; 0xa8
   2aa2c:	str	lr, [sp, #172]	; 0xac
   2aa30:	bl	1253c <dcgettext@plt>
   2aa34:	mov	r3, r6
   2aa38:	ldr	r2, [sp, #188]	; 0xbc
   2aa3c:	ldr	r8, [sp, #168]	; 0xa8
   2aa40:	ldr	r6, [sp, #176]	; 0xb0
   2aa44:	ldr	r7, [sp, #164]	; 0xa4
   2aa48:	ldr	lr, [sp, #172]	; 0xac
   2aa4c:	b	2ad40 <__assert_fail@plt+0x182c4>
   2aa50:	ldr	r0, [r5]
   2aa54:	str	r0, [r4, #20]
   2aa58:	b	2ad40 <__assert_fail@plt+0x182c4>
   2aa5c:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   2aa60:	str	r2, [sp, #188]	; 0xbc
   2aa64:	ldr	r2, [sp, #156]	; 0x9c
   2aa68:	strd	r0, [r2]
   2aa6c:	ldrd	r0, [r5, #8]
   2aa70:	ldr	r2, [sp, #152]	; 0x98
   2aa74:	strd	r0, [r2]
   2aa78:	ldr	r2, [sp, #188]	; 0xbc
   2aa7c:	b	2ad40 <__assert_fail@plt+0x182c4>
   2aa80:	ldr	r0, [r4, #176]	; 0xb0
   2aa84:	str	r6, [sp, #176]	; 0xb0
   2aa88:	str	r2, [sp, #188]	; 0xbc
   2aa8c:	mov	r2, #0
   2aa90:	str	r8, [sp, #168]	; 0xa8
   2aa94:	mov	r8, #100	; 0x64
   2aa98:	str	r3, [sp, #180]	; 0xb4
   2aa9c:	str	lr, [sp, #172]	; 0xac
   2aaa0:	add	r0, r0, #1
   2aaa4:	str	r0, [r4, #176]	; 0xb0
   2aaa8:	ldr	r1, [r5, #-40]	; 0xffffffd8
   2aaac:	ldr	r7, [r5, #4]
   2aab0:	ldr	r0, [r5, #-48]	; 0xffffffd0
   2aab4:	ldr	r6, [r5, #-44]	; 0xffffffd4
   2aab8:	cmp	r1, #3
   2aabc:	mov	r1, #0
   2aac0:	movwlt	r1, #1
   2aac4:	cmp	r7, #0
   2aac8:	movwlt	r2, #1
   2aacc:	ands	r1, r2, r1
   2aad0:	mov	r2, r6
   2aad4:	umull	r6, r1, r0, r8
   2aad8:	mlane	r2, r2, r8, r1
   2aadc:	moveq	r6, r0
   2aae0:	cmn	r7, #1
   2aae4:	ble	2b4bc <__assert_fail@plt+0x18a40>
   2aae8:	ldr	r0, [r5, #-56]	; 0xffffffc8
   2aaec:	ldr	lr, [r5]
   2aaf0:	cmn	r2, #1
   2aaf4:	str	r7, [sp, #72]	; 0x48
   2aaf8:	str	sl, [sp, #160]	; 0xa0
   2aafc:	str	r9, [sp, #164]	; 0xa4
   2ab00:	str	r0, [sp, #68]	; 0x44
   2ab04:	ble	2b9f0 <__assert_fail@plt+0x18f74>
   2ab08:	movw	r1, #8738	; 0x2222
   2ab0c:	movw	r0, #8738	; 0x2222
   2ab10:	mov	r3, #1
   2ab14:	mov	r7, r6
   2ab18:	movt	r1, #8738	; 0x2222
   2ab1c:	movt	r0, #546	; 0x222
   2ab20:	subs	r1, r1, r6
   2ab24:	sbcs	r0, r0, r2
   2ab28:	bge	2ba00 <__assert_fail@plt+0x18f84>
   2ab2c:	b	2bd54 <__assert_fail@plt+0x192d8>
   2ab30:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   2ab34:	str	r0, [sp, #236]	; 0xec
   2ab38:	mov	r0, #0
   2ab3c:	str	r1, [sp, #232]	; 0xe8
   2ab40:	mov	r7, #0
   2ab44:	mov	r8, #0
   2ab48:	mov	lr, #0
   2ab4c:	mov	r6, #0
   2ab50:	mov	r2, #0
   2ab54:	str	r0, [sp, #228]	; 0xe4
   2ab58:	mov	r0, #0
   2ab5c:	str	r0, [sp, #224]	; 0xe0
   2ab60:	mov	r0, #0
   2ab64:	str	r0, [sp, #216]	; 0xd8
   2ab68:	mov	r0, #0
   2ab6c:	str	r0, [sp, #220]	; 0xdc
   2ab70:	mov	r0, #0
   2ab74:	str	r0, [sp, #212]	; 0xd4
   2ab78:	mov	r0, #0
   2ab7c:	str	r0, [sp, #208]	; 0xd0
   2ab80:	b	2ad40 <__assert_fail@plt+0x182c4>
   2ab84:	movw	r0, #40336	; 0x9d90
   2ab88:	movt	r0, #65535	; 0xffff
   2ab8c:	str	r0, [r4, #24]
   2ab90:	b	2ad40 <__assert_fail@plt+0x182c4>
   2ab94:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   2ab98:	str	r0, [sp, #220]	; 0xdc
   2ab9c:	mov	r0, #0
   2aba0:	str	r1, [sp, #212]	; 0xd4
   2aba4:	mov	r7, #0
   2aba8:	mov	r8, #0
   2abac:	mov	lr, #0
   2abb0:	mov	r6, #0
   2abb4:	mov	r2, #0
   2abb8:	str	r0, [sp, #228]	; 0xe4
   2abbc:	mov	r0, #0
   2abc0:	str	r0, [sp, #224]	; 0xe0
   2abc4:	mov	r0, #0
   2abc8:	str	r0, [sp, #216]	; 0xd8
   2abcc:	b	2ad28 <__assert_fail@plt+0x182ac>
   2abd0:	mov	r1, r5
   2abd4:	ldr	ip, [r4, #156]	; 0x9c
   2abd8:	str	r2, [sp, #188]	; 0xbc
   2abdc:	vld1.64	{d16-d17}, [r1]!
   2abe0:	cmp	ip, #0
   2abe4:	ldr	r0, [r1]
   2abe8:	str	r0, [sp, #72]	; 0x48
   2abec:	beq	2ac30 <__assert_fail@plt+0x181b4>
   2abf0:	ldr	r2, [sp, #88]	; 0x58
   2abf4:	ldr	r2, [r2]
   2abf8:	cmp	r2, #0
   2abfc:	bne	2ac30 <__assert_fail@plt+0x181b4>
   2ac00:	ldrb	r2, [r4, #153]	; 0x99
   2ac04:	cmp	r2, #0
   2ac08:	ldr	r2, [sp, #188]	; 0xbc
   2ac0c:	bne	2ac30 <__assert_fail@plt+0x181b4>
   2ac10:	ldr	r0, [sp, #72]	; 0x48
   2ac14:	ldr	r1, [r1, #4]
   2ac18:	cmp	r0, #2
   2ac1c:	bgt	2be74 <__assert_fail@plt+0x193f8>
   2ac20:	ldr	r2, [r4, #172]	; 0xac
   2ac24:	cmp	r2, #0
   2ac28:	ldr	r2, [sp, #188]	; 0xbc
   2ac2c:	bne	2be74 <__assert_fail@plt+0x193f8>
   2ac30:	ldr	r1, [sp, #72]	; 0x48
   2ac34:	str	sl, [sp, #160]	; 0xa0
   2ac38:	str	r3, [sp, #180]	; 0xb4
   2ac3c:	str	r6, [sp, #176]	; 0xb0
   2ac40:	cmp	r1, #5
   2ac44:	blt	2b0f8 <__assert_fail@plt+0x1867c>
   2ac48:	vmov.32	r7, d17[1]
   2ac4c:	add	r0, ip, #1
   2ac50:	vmov.32	sl, d17[0]
   2ac54:	mov	r2, #100	; 0x64
   2ac58:	mov	r3, #0
   2ac5c:	mov	r6, #100	; 0x64
   2ac60:	str	lr, [sp, #172]	; 0xac
   2ac64:	str	r0, [r4, #156]	; 0x9c
   2ac68:	mov	r0, sl
   2ac6c:	mov	r1, r7
   2ac70:	str	r7, [sp, #68]	; 0x44
   2ac74:	bl	4c144 <__assert_fail@plt+0x396c8>
   2ac78:	umull	r2, r3, r0, r6
   2ac7c:	mla	r3, r1, r6, r3
   2ac80:	subs	r2, sl, r2
   2ac84:	sbc	r3, r7, r3
   2ac88:	ldr	r7, [sp, #152]	; 0x98
   2ac8c:	strd	r2, [r7]
   2ac90:	mov	r2, #100	; 0x64
   2ac94:	mov	r3, #0
   2ac98:	mov	r7, r9
   2ac9c:	bl	4c144 <__assert_fail@plt+0x396c8>
   2aca0:	mov	r0, r2
   2aca4:	ldr	r2, [sp, #156]	; 0x9c
   2aca8:	mov	r1, r3
   2acac:	mov	r3, #0
   2acb0:	strd	r0, [r2]
   2acb4:	mov	r0, sl
   2acb8:	movw	r2, #10000	; 0x2710
   2acbc:	ldr	r1, [sp, #68]	; 0x44
   2acc0:	bl	4c144 <__assert_fail@plt+0x396c8>
   2acc4:	ldr	r2, [sp, #84]	; 0x54
   2acc8:	ldr	r3, [sp, #180]	; 0xb4
   2accc:	ldr	lr, [sp, #172]	; 0xac
   2acd0:	strd	r0, [r2]
   2acd4:	ldr	r0, [sp, #72]	; 0x48
   2acd8:	ldr	r2, [sp, #188]	; 0xbc
   2acdc:	ldr	r6, [sp, #176]	; 0xb0
   2ace0:	ldr	sl, [sp, #160]	; 0xa0
   2ace4:	sub	r0, r0, #4
   2ace8:	str	r0, [r4, #48]	; 0x30
   2acec:	b	2ad40 <__assert_fail@plt+0x182c4>
   2acf0:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   2acf4:	str	r0, [sp, #224]	; 0xe0
   2acf8:	mov	r0, #0
   2acfc:	str	r1, [sp, #216]	; 0xd8
   2ad00:	mov	r7, #0
   2ad04:	mov	r8, #0
   2ad08:	mov	lr, #0
   2ad0c:	mov	r6, #0
   2ad10:	mov	r2, #0
   2ad14:	str	r0, [sp, #228]	; 0xe4
   2ad18:	mov	r0, #0
   2ad1c:	str	r0, [sp, #220]	; 0xdc
   2ad20:	mov	r0, #0
   2ad24:	str	r0, [sp, #212]	; 0xd4
   2ad28:	mov	r0, #0
   2ad2c:	str	r0, [sp, #208]	; 0xd0
   2ad30:	mov	r0, #0
   2ad34:	str	r0, [sp, #236]	; 0xec
   2ad38:	mov	r0, #0
   2ad3c:	str	r0, [sp, #232]	; 0xe8
   2ad40:	sub	r0, sl, sl, lsl #3
   2ad44:	sub	r1, fp, #112	; 0x70
   2ad48:	add	r5, r5, r0, lsl #3
   2ad4c:	ldr	r0, [sp, #236]	; 0xec
   2ad50:	str	r0, [r5, #56]!	; 0x38
   2ad54:	ldr	r0, [sp, #232]	; 0xe8
   2ad58:	stmib	r5, {r0, r7, r8, lr}
   2ad5c:	str	r6, [r5, #20]
   2ad60:	str	r2, [r5, #24]
   2ad64:	ldr	r0, [sp, #228]	; 0xe4
   2ad68:	str	r0, [r5, #28]
   2ad6c:	ldr	r0, [sp, #224]	; 0xe0
   2ad70:	str	r0, [r5, #32]
   2ad74:	ldr	r0, [sp, #216]	; 0xd8
   2ad78:	str	r0, [r5, #36]	; 0x24
   2ad7c:	ldr	r0, [sp, #220]	; 0xdc
   2ad80:	str	r0, [r5, #40]	; 0x28
   2ad84:	ldr	r0, [sp, #212]	; 0xd4
   2ad88:	str	r0, [r5, #44]	; 0x2c
   2ad8c:	ldr	r0, [sp, #208]	; 0xd0
   2ad90:	str	r0, [r5, #48]	; 0x30
   2ad94:	ldr	r0, [sp, #204]	; 0xcc
   2ad98:	str	r0, [r5, #52]	; 0x34
   2ad9c:	sub	r0, r3, sl
   2ada0:	ldr	r3, [sp, #200]	; 0xc8
   2ada4:	add	r1, r1, r0, lsl #1
   2ada8:	ldrsh	r2, [r1]
   2adac:	movw	r1, #5128	; 0x1408
   2adb0:	movt	r1, #5
   2adb4:	ldrb	r1, [r1, r3]
   2adb8:	movw	r3, #5220	; 0x1464
   2adbc:	movt	r3, #5
   2adc0:	sub	r1, r1, #28
   2adc4:	add	r3, r3, r1
   2adc8:	ldrsb	r3, [r3]
   2adcc:	add	r3, r2, r3
   2add0:	cmp	r3, #112	; 0x70
   2add4:	bhi	2ae00 <__assert_fail@plt+0x18384>
   2add8:	movw	r7, #4696	; 0x1258
   2addc:	movt	r7, #5
   2ade0:	add	r7, r7, r3
   2ade4:	ldrsb	r7, [r7]
   2ade8:	cmp	r7, r2
   2adec:	bne	2ae00 <__assert_fail@plt+0x18384>
   2adf0:	movw	r1, #4809	; 0x12c9
   2adf4:	movt	r1, #5
   2adf8:	ldrb	sl, [r1, r3]
   2adfc:	b	2ae10 <__assert_fail@plt+0x18394>
   2ae00:	movw	r2, #5246	; 0x147e
   2ae04:	movt	r2, #5
   2ae08:	add	r1, r2, r1
   2ae0c:	ldrsb	sl, [r1]
   2ae10:	add	r3, r0, #1
   2ae14:	sub	r1, fp, #112	; 0x70
   2ae18:	cmp	r0, #17
   2ae1c:	add	r1, r1, r3, lsl #1
   2ae20:	strh	sl, [r1]
   2ae24:	ble	27958 <__assert_fail@plt+0x14edc>
   2ae28:	b	2c218 <__assert_fail@plt+0x1979c>
   2ae2c:	mov	r7, #0
   2ae30:	mov	r2, #1
   2ae34:	mov	r8, #0
   2ae38:	mov	lr, #0
   2ae3c:	mov	r6, #0
   2ae40:	b	2a9b0 <__assert_fail@plt+0x17f34>
   2ae44:	ldr	r1, [sp, #92]	; 0x5c
   2ae48:	mov	r0, #0
   2ae4c:	str	r0, [r1]
   2ae50:	str	r0, [r1, #4]
   2ae54:	ldr	r0, [r5, #-56]	; 0xffffffc8
   2ae58:	str	r0, [r4, #16]
   2ae5c:	b	2ad40 <__assert_fail@plt+0x182c4>
   2ae60:	ldr	r1, [sp, #92]	; 0x5c
   2ae64:	mov	r0, #0
   2ae68:	str	r0, [r1]
   2ae6c:	str	r0, [r1, #4]
   2ae70:	ldr	r0, [r5]
   2ae74:	str	r0, [r4, #16]
   2ae78:	b	2ad40 <__assert_fail@plt+0x182c4>
   2ae7c:	str	r2, [sp, #188]	; 0xbc
   2ae80:	ldrd	r0, [r5, #-168]	; 0xffffff58
   2ae84:	b	2b088 <__assert_fail@plt+0x1860c>
   2ae88:	str	r2, [sp, #188]	; 0xbc
   2ae8c:	ldrd	r0, [r5, #-104]	; 0xffffff98
   2ae90:	ldr	r2, [sp, #152]	; 0x98
   2ae94:	str	r6, [sp, #176]	; 0xb0
   2ae98:	mov	r7, r3
   2ae9c:	strd	r0, [r2]
   2aea0:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   2aea4:	ldr	r2, [sp, #156]	; 0x9c
   2aea8:	strd	r0, [r2]
   2aeac:	ldrd	r0, [r5, #8]
   2aeb0:	ldr	r2, [sp, #84]	; 0x54
   2aeb4:	rsbs	r0, r0, #0
   2aeb8:	rsc	r3, r1, #0
   2aebc:	stm	r2, {r0, r3}
   2aec0:	and	r0, r1, r3
   2aec4:	cmp	r0, #0
   2aec8:	blt	2c268 <__assert_fail@plt+0x197ec>
   2aecc:	ldr	r0, [r5, #16]
   2aed0:	ldr	r1, [sp, #88]	; 0x58
   2aed4:	mov	r3, r7
   2aed8:	str	r0, [r1]
   2aedc:	b	2b9c8 <__assert_fail@plt+0x18f4c>
   2aee0:	mov	r0, #1
   2aee4:	mov	r7, #0
   2aee8:	mov	r8, #0
   2aeec:	mov	lr, #0
   2aef0:	mov	r6, #0
   2aef4:	mov	r2, #0
   2aef8:	str	r0, [sp, #220]	; 0xdc
   2aefc:	mov	r0, #0
   2af00:	str	r0, [sp, #228]	; 0xe4
   2af04:	mov	r0, #0
   2af08:	str	r0, [sp, #224]	; 0xe0
   2af0c:	mov	r0, #0
   2af10:	str	r0, [sp, #216]	; 0xd8
   2af14:	b	2ad20 <__assert_fail@plt+0x182a4>
   2af18:	str	sl, [sp, #160]	; 0xa0
   2af1c:	ldm	r5, {r2, sl}
   2af20:	cmn	sl, #1
   2af24:	ble	2b514 <__assert_fail@plt+0x18a98>
   2af28:	ldr	r9, [r5, #-48]	; 0xffffffd0
   2af2c:	ldr	r8, [r5, #-44]	; 0xffffffd4
   2af30:	orrs	r0, r2, sl
   2af34:	beq	2b018 <__assert_fail@plt+0x1859c>
   2af38:	cmn	r8, #1
   2af3c:	ble	2ba58 <__assert_fail@plt+0x18fdc>
   2af40:	mov	r6, r3
   2af44:	mvn	r0, #0
   2af48:	mvn	r1, #-2147483648	; 0x80000000
   2af4c:	mov	r3, sl
   2af50:	mov	r7, r2
   2af54:	bl	4c218 <__assert_fail@plt+0x3979c>
   2af58:	subs	r0, r0, r9
   2af5c:	mov	r2, r7
   2af60:	mov	r3, r6
   2af64:	mov	r6, r9
   2af68:	mov	r7, r8
   2af6c:	sbcs	r0, r1, r8
   2af70:	bge	2b020 <__assert_fail@plt+0x185a4>
   2af74:	b	2c330 <__assert_fail@plt+0x198b4>
   2af78:	str	sl, [sp, #160]	; 0xa0
   2af7c:	ldm	r5, {r2, sl}
   2af80:	cmn	sl, #1
   2af84:	ble	2b55c <__assert_fail@plt+0x18ae0>
   2af88:	ldr	r9, [r5, #-48]	; 0xffffffd0
   2af8c:	ldr	r8, [r5, #-44]	; 0xffffffd4
   2af90:	orrs	r0, r2, sl
   2af94:	beq	2b018 <__assert_fail@plt+0x1859c>
   2af98:	cmn	r8, #1
   2af9c:	ble	2baa8 <__assert_fail@plt+0x1902c>
   2afa0:	mov	r6, r3
   2afa4:	mvn	r0, #0
   2afa8:	mvn	r1, #-2147483648	; 0x80000000
   2afac:	mov	r3, sl
   2afb0:	mov	r7, r2
   2afb4:	bl	4c218 <__assert_fail@plt+0x3979c>
   2afb8:	subs	r0, r0, r9
   2afbc:	mov	r2, r7
   2afc0:	mov	r3, r6
   2afc4:	mov	r6, r9
   2afc8:	mov	r7, r8
   2afcc:	sbcs	r0, r1, r8
   2afd0:	bge	2b020 <__assert_fail@plt+0x185a4>
   2afd4:	b	2c344 <__assert_fail@plt+0x198c8>
   2afd8:	mov	r0, #1
   2afdc:	mov	r7, #0
   2afe0:	mov	r8, #0
   2afe4:	mov	lr, #0
   2afe8:	mov	r6, #0
   2afec:	mov	r2, #0
   2aff0:	str	r0, [sp, #224]	; 0xe0
   2aff4:	mov	r0, #0
   2aff8:	str	r0, [sp, #228]	; 0xe4
   2affc:	b	2a9fc <__assert_fail@plt+0x17f80>
   2b000:	ldrd	r0, [r5, #8]
   2b004:	str	r0, [sp, #236]	; 0xec
   2b008:	adds	r0, r0, #-2147483648	; 0x80000000
   2b00c:	adcs	r0, r1, #0
   2b010:	beq	2ad38 <__assert_fail@plt+0x182bc>
   2b014:	b	2c240 <__assert_fail@plt+0x197c4>
   2b018:	mov	r6, r9
   2b01c:	mov	r7, r8
   2b020:	mov	r1, #0
   2b024:	umull	lr, r0, r6, r2
   2b028:	mov	r8, #0
   2b02c:	str	r1, [sp, #228]	; 0xe4
   2b030:	mov	r1, #0
   2b034:	mla	r0, r6, sl, r0
   2b038:	ldr	sl, [sp, #160]	; 0xa0
   2b03c:	str	r1, [sp, #224]	; 0xe0
   2b040:	mov	r1, #0
   2b044:	mla	r0, r7, r2, r0
   2b048:	mov	r2, #0
   2b04c:	mov	r7, #0
   2b050:	str	r1, [sp, #216]	; 0xd8
   2b054:	mov	r1, #0
   2b058:	mov	r6, r0
   2b05c:	str	r1, [sp, #220]	; 0xdc
   2b060:	mov	r1, #0
   2b064:	str	r1, [sp, #212]	; 0xd4
   2b068:	mov	r1, #0
   2b06c:	str	r1, [sp, #208]	; 0xd0
   2b070:	mov	r1, #0
   2b074:	str	r1, [sp, #236]	; 0xec
   2b078:	mov	r1, #0
   2b07c:	str	r1, [sp, #232]	; 0xe8
   2b080:	b	2ad40 <__assert_fail@plt+0x182c4>
   2b084:	ldrd	r0, [r5, #-216]	; 0xffffff28
   2b088:	ldr	r2, [sp, #156]	; 0x9c
   2b08c:	strd	r0, [r2]
   2b090:	ldrd	r0, [r5, #-104]	; 0xffffff98
   2b094:	ldr	r2, [sp, #152]	; 0x98
   2b098:	strd	r0, [r2]
   2b09c:	mov	r0, r5
   2b0a0:	vld1.64	{d16-d17}, [r0]!
   2b0a4:	ldr	r2, [sp, #188]	; 0xbc
   2b0a8:	vldr	d18, [r0]
   2b0ac:	ldr	r0, [sp, #96]	; 0x60
   2b0b0:	vst1.64	{d16-d17}, [r0]!
   2b0b4:	vstr	d18, [r0]
   2b0b8:	b	2ad40 <__assert_fail@plt+0x182c4>
   2b0bc:	mov	r7, r9
   2b0c0:	b	2ad40 <__assert_fail@plt+0x182c4>
   2b0c4:	ldr	r0, [r4, #172]	; 0xac
   2b0c8:	vmov.32	r6, d17[1]
   2b0cc:	vmov.32	r8, d17[0]
   2b0d0:	mov	r2, #0
   2b0d4:	cmp	r1, #3
   2b0d8:	add	r0, r0, #1
   2b0dc:	str	r0, [r4, #172]	; 0xac
   2b0e0:	bge	2b5a4 <__assert_fail@plt+0x18b28>
   2b0e4:	mov	r0, r8
   2b0e8:	mov	r1, r6
   2b0ec:	mov	r8, #0
   2b0f0:	mov	r3, #0
   2b0f4:	b	2b5d0 <__assert_fail@plt+0x18b54>
   2b0f8:	ldr	r0, [r4, #172]	; 0xac
   2b0fc:	str	r8, [sp, #168]	; 0xa8
   2b100:	vmov.32	r8, d17[1]
   2b104:	vmov.32	sl, d17[0]
   2b108:	mov	r6, #0
   2b10c:	cmp	r1, #3
   2b110:	add	r0, r0, #1
   2b114:	str	r0, [r4, #172]	; 0xac
   2b118:	bge	2b968 <__assert_fail@plt+0x18eec>
   2b11c:	mov	r0, sl
   2b120:	mov	r1, r8
   2b124:	mov	r2, #0
   2b128:	mov	r3, #0
   2b12c:	b	2b99c <__assert_fail@plt+0x18f20>
   2b130:	ldrd	r6, [r5, #-56]	; 0xffffffc8
   2b134:	cmn	r7, #1
   2b138:	ble	2baf8 <__assert_fail@plt+0x1907c>
   2b13c:	and	r0, r2, sl
   2b140:	cmn	r0, #1
   2b144:	beq	2b020 <__assert_fail@plt+0x185a4>
   2b148:	str	r3, [sp, #180]	; 0xb4
   2b14c:	mov	r0, #0
   2b150:	mov	r1, #-2147483648	; 0x80000000
   2b154:	mov	r3, sl
   2b158:	mov	r8, r2
   2b15c:	bl	4c144 <__assert_fail@plt+0x396c8>
   2b160:	ldr	r3, [sp, #180]	; 0xb4
   2b164:	subs	r0, r0, r6
   2b168:	mov	r2, r8
   2b16c:	sbcs	r0, r1, r7
   2b170:	bge	2b020 <__assert_fail@plt+0x185a4>
   2b174:	b	2c420 <__assert_fail@plt+0x199a4>
   2b178:	ldr	r9, [sp, #100]	; 0x64
   2b17c:	sub	r7, r3, r6
   2b180:	str	r7, [r4, #144]	; 0x90
   2b184:	mov	r7, r0
   2b188:	ldr	r8, [r9]
   2b18c:	ldr	r3, [r9, #4]
   2b190:	subs	r8, r8, r1
   2b194:	str	r3, [sp, #4]
   2b198:	sbc	r0, r3, r0
   2b19c:	mov	r3, lr
   2b1a0:	str	r0, [sp, #8]
   2b1a4:	str	r8, [r9]
   2b1a8:	str	r0, [r9, #4]
   2b1ac:	str	r6, [sp, #44]	; 0x2c
   2b1b0:	ldr	r6, [sp, #104]	; 0x68
   2b1b4:	ldrd	r8, [r6]
   2b1b8:	subs	r8, r8, ip
   2b1bc:	sbc	r0, r9, lr
   2b1c0:	str	r0, [sp, #12]
   2b1c4:	str	r8, [r6]
   2b1c8:	str	r0, [r6, #4]
   2b1cc:	ldr	r0, [sp, #108]	; 0x6c
   2b1d0:	ldr	r8, [r0]
   2b1d4:	ldr	r6, [r0, #4]
   2b1d8:	subs	r2, r8, r2
   2b1dc:	mov	r8, r6
   2b1e0:	sbc	r1, r6, sl
   2b1e4:	str	r1, [sp, #16]
   2b1e8:	str	r2, [r0]
   2b1ec:	str	r1, [r0, #4]
   2b1f0:	ldr	r0, [sp, #112]	; 0x70
   2b1f4:	ldr	r2, [r0]
   2b1f8:	ldr	r1, [r0, #4]
   2b1fc:	ldr	r6, [sp, #48]	; 0x30
   2b200:	ldr	lr, [sp, #68]	; 0x44
   2b204:	subs	r2, r2, r6
   2b208:	str	r1, [sp, #24]
   2b20c:	sbc	r1, r1, lr
   2b210:	str	r1, [sp, #36]	; 0x24
   2b214:	str	r2, [r0]
   2b218:	str	r1, [r0, #4]
   2b21c:	ldr	r0, [sp, #116]	; 0x74
   2b220:	ldr	r2, [r0]
   2b224:	ldr	r1, [r0, #4]
   2b228:	ldr	r6, [sp, #52]	; 0x34
   2b22c:	subs	r2, r2, r6
   2b230:	ldr	r6, [sp, #64]	; 0x40
   2b234:	str	r1, [sp, #40]	; 0x28
   2b238:	sbc	r1, r1, r6
   2b23c:	str	r1, [sp, #48]	; 0x30
   2b240:	str	r2, [r0]
   2b244:	str	r1, [r0, #4]
   2b248:	ldr	r1, [sp, #120]	; 0x78
   2b24c:	ldr	r2, [r1]
   2b250:	ldr	r0, [r1, #4]
   2b254:	ldr	r6, [sp, #56]	; 0x38
   2b258:	subs	ip, r2, r6
   2b25c:	ldr	r6, [sp, #72]	; 0x48
   2b260:	str	r0, [sp, #52]	; 0x34
   2b264:	sbc	r2, r0, r6
   2b268:	cmn	r7, #1
   2b26c:	mov	r0, #0
   2b270:	mov	r7, #0
   2b274:	str	r2, [sp, #56]	; 0x38
   2b278:	str	ip, [r1]
   2b27c:	str	r2, [r1, #4]
   2b280:	movwgt	r0, #1
   2b284:	mov	r2, #0
   2b288:	ldr	r1, [sp, #4]
   2b28c:	cmn	r1, #1
   2b290:	mov	r1, #0
   2b294:	movwgt	r2, #1
   2b298:	subs	r0, r2, r0
   2b29c:	movwne	r0, #1
   2b2a0:	str	r0, [sp, #20]
   2b2a4:	ldr	r0, [sp, #8]
   2b2a8:	cmn	r0, #1
   2b2ac:	mov	r0, #0
   2b2b0:	movwgt	r0, #1
   2b2b4:	subs	r0, r2, r0
   2b2b8:	ldr	r2, [sp, #36]	; 0x24
   2b2bc:	movwne	r0, #1
   2b2c0:	cmn	r3, #1
   2b2c4:	ldr	r3, [sp, #40]	; 0x28
   2b2c8:	str	r0, [sp, #8]
   2b2cc:	mov	r0, #0
   2b2d0:	movwgt	r0, #1
   2b2d4:	cmn	r9, #1
   2b2d8:	movwgt	r1, #1
   2b2dc:	subs	r0, r1, r0
   2b2e0:	movwne	r0, #1
   2b2e4:	str	r0, [sp, #28]
   2b2e8:	ldr	r0, [sp, #12]
   2b2ec:	cmn	r0, #1
   2b2f0:	mov	r0, #0
   2b2f4:	movwgt	r0, #1
   2b2f8:	subs	r0, r1, r0
   2b2fc:	mov	r1, #0
   2b300:	movwne	r0, #1
   2b304:	cmn	sl, #1
   2b308:	str	r0, [sp, #12]
   2b30c:	mov	r0, #0
   2b310:	movwgt	r0, #1
   2b314:	cmn	r8, #1
   2b318:	movwgt	r1, #1
   2b31c:	subs	sl, r1, r0
   2b320:	ldr	r0, [sp, #16]
   2b324:	movwne	sl, #1
   2b328:	cmn	r0, #1
   2b32c:	mov	r0, #0
   2b330:	movwgt	r0, #1
   2b334:	subs	r8, r1, r0
   2b338:	ldr	r1, [sp, #24]
   2b33c:	mov	r0, #0
   2b340:	movwne	r8, #1
   2b344:	cmn	lr, #1
   2b348:	movwgt	r0, #1
   2b34c:	cmn	r1, #1
   2b350:	mov	r1, #0
   2b354:	movwgt	r1, #1
   2b358:	subs	r0, r1, r0
   2b35c:	movwne	r0, #1
   2b360:	cmn	r2, #1
   2b364:	mov	r2, #0
   2b368:	movwgt	r2, #1
   2b36c:	subs	r2, r1, r2
   2b370:	ldr	r1, [sp, #64]	; 0x40
   2b374:	movwne	r2, #1
   2b378:	cmn	r1, #1
   2b37c:	mov	r1, #0
   2b380:	movwgt	r1, #1
   2b384:	cmn	r3, #1
   2b388:	movwgt	r7, #1
   2b38c:	subs	r3, r7, r1
   2b390:	ldr	r1, [sp, #48]	; 0x30
   2b394:	movwne	r3, #1
   2b398:	cmn	r1, #1
   2b39c:	mov	r1, #0
   2b3a0:	movwgt	r1, #1
   2b3a4:	subs	r1, r7, r1
   2b3a8:	mov	r7, #0
   2b3ac:	movwne	r1, #1
   2b3b0:	cmn	r6, #1
   2b3b4:	ldr	r6, [sp, #52]	; 0x34
   2b3b8:	movwgt	r7, #1
   2b3bc:	cmn	r6, #1
   2b3c0:	mov	r6, #0
   2b3c4:	movwgt	r6, #1
   2b3c8:	subs	ip, r6, r7
   2b3cc:	ldr	r7, [sp, #56]	; 0x38
   2b3d0:	movwne	ip, #1
   2b3d4:	cmn	r7, #1
   2b3d8:	mov	r7, #0
   2b3dc:	movwgt	r7, #1
   2b3e0:	subs	lr, r6, r7
   2b3e4:	ldr	r6, [sp, #60]	; 0x3c
   2b3e8:	ldr	r7, [sp, #44]	; 0x2c
   2b3ec:	movwne	lr, #1
   2b3f0:	cmp	r6, r7
   2b3f4:	bvs	2c6f0 <__assert_fail@plt+0x19c74>
   2b3f8:	ldr	r6, [sp, #20]
   2b3fc:	ldr	r7, [sp, #8]
   2b400:	ands	r6, r6, r7
   2b404:	bne	2c6dc <__assert_fail@plt+0x19c60>
   2b408:	ldr	r6, [sp, #28]
   2b40c:	ldr	r7, [sp, #12]
   2b410:	ands	r6, r6, r7
   2b414:	bne	2c6a0 <__assert_fail@plt+0x19c24>
   2b418:	ands	r7, sl, r8
   2b41c:	bne	2c5b0 <__assert_fail@plt+0x19b34>
   2b420:	ands	r0, r0, r2
   2b424:	ldr	sl, [sp, #160]	; 0xa0
   2b428:	ldr	r8, [sp, #168]	; 0xa8
   2b42c:	ldr	r6, [sp, #176]	; 0xb0
   2b430:	ldr	r0, [sp, #184]	; 0xb8
   2b434:	bne	2c524 <__assert_fail@plt+0x19aa8>
   2b438:	str	r0, [sp, #184]	; 0xb8
   2b43c:	ands	r0, r3, r1
   2b440:	bne	2c45c <__assert_fail@plt+0x199e0>
   2b444:	ands	r0, ip, lr
   2b448:	ldr	r3, [sp, #180]	; 0xb4
   2b44c:	ldr	r7, [sp, #164]	; 0xa4
   2b450:	ldr	lr, [sp, #172]	; 0xac
   2b454:	ldr	r2, [sp, #188]	; 0xbc
   2b458:	mov	r0, #1
   2b45c:	beq	2b95c <__assert_fail@plt+0x18ee0>
   2b460:	b	2c208 <__assert_fail@plt+0x1978c>
   2b464:	mov	r0, r6
   2b468:	mov	r1, r2
   2b46c:	mov	r7, r2
   2b470:	mov	r2, #100	; 0x64
   2b474:	mov	r3, #0
   2b478:	bl	4c144 <__assert_fail@plt+0x396c8>
   2b47c:	umull	r2, r3, r0, r8
   2b480:	mla	r3, r1, r8, r3
   2b484:	subs	r2, r6, r2
   2b488:	rsb	r1, r1, r1, lsl #4
   2b48c:	sbc	r3, r7, r3
   2b490:	mov	r7, #60	; 0x3c
   2b494:	umull	r0, r7, r0, r7
   2b498:	adds	r0, r0, r2
   2b49c:	add	r1, r7, r1, lsl #2
   2b4a0:	mov	r2, #1
   2b4a4:	adc	r7, r1, r3
   2b4a8:	adds	r1, r0, #1440	; 0x5a0
   2b4ac:	adc	r3, r7, #0
   2b4b0:	cmp	r2, #0
   2b4b4:	bne	2bc80 <__assert_fail@plt+0x19204>
   2b4b8:	b	2c290 <__assert_fail@plt+0x19814>
   2b4bc:	mov	r0, r6
   2b4c0:	mov	r1, r2
   2b4c4:	mov	r7, r2
   2b4c8:	mov	r2, #100	; 0x64
   2b4cc:	mov	r3, #0
   2b4d0:	bl	4c144 <__assert_fail@plt+0x396c8>
   2b4d4:	umull	r2, r3, r0, r8
   2b4d8:	mla	r3, r1, r8, r3
   2b4dc:	subs	r2, r6, r2
   2b4e0:	rsb	r1, r1, r1, lsl #4
   2b4e4:	sbc	r3, r7, r3
   2b4e8:	mov	r7, #60	; 0x3c
   2b4ec:	umull	r0, r7, r0, r7
   2b4f0:	adds	ip, r0, r2
   2b4f4:	add	r1, r7, r1, lsl #2
   2b4f8:	mov	r2, #1
   2b4fc:	adc	r7, r1, r3
   2b500:	adds	r1, ip, #1440	; 0x5a0
   2b504:	adc	r3, r7, #0
   2b508:	cmp	r2, #0
   2b50c:	bne	2be1c <__assert_fail@plt+0x193a0>
   2b510:	b	2c2a4 <__assert_fail@plt+0x19828>
   2b514:	ldrd	r6, [r5, #-48]	; 0xffffffd0
   2b518:	cmn	r7, #1
   2b51c:	ble	2bb28 <__assert_fail@plt+0x190ac>
   2b520:	and	r0, r2, sl
   2b524:	cmn	r0, #1
   2b528:	beq	2b020 <__assert_fail@plt+0x185a4>
   2b52c:	str	r3, [sp, #180]	; 0xb4
   2b530:	mov	r0, #0
   2b534:	mov	r1, #-2147483648	; 0x80000000
   2b538:	mov	r3, sl
   2b53c:	mov	r8, r2
   2b540:	bl	4c144 <__assert_fail@plt+0x396c8>
   2b544:	ldr	r3, [sp, #180]	; 0xb4
   2b548:	subs	r0, r0, r6
   2b54c:	mov	r2, r8
   2b550:	sbcs	r0, r1, r7
   2b554:	bge	2b020 <__assert_fail@plt+0x185a4>
   2b558:	b	2c448 <__assert_fail@plt+0x199cc>
   2b55c:	ldrd	r6, [r5, #-48]	; 0xffffffd0
   2b560:	cmn	r7, #1
   2b564:	ble	2bb58 <__assert_fail@plt+0x190dc>
   2b568:	and	r0, r2, sl
   2b56c:	cmn	r0, #1
   2b570:	beq	2b020 <__assert_fail@plt+0x185a4>
   2b574:	str	r3, [sp, #180]	; 0xb4
   2b578:	mov	r0, #0
   2b57c:	mov	r1, #-2147483648	; 0x80000000
   2b580:	mov	r3, sl
   2b584:	mov	r8, r2
   2b588:	bl	4c144 <__assert_fail@plt+0x396c8>
   2b58c:	ldr	r3, [sp, #180]	; 0xb4
   2b590:	subs	r0, r0, r6
   2b594:	mov	r2, r8
   2b598:	sbcs	r0, r1, r7
   2b59c:	bge	2b020 <__assert_fail@plt+0x185a4>
   2b5a0:	b	2c434 <__assert_fail@plt+0x199b8>
   2b5a4:	mov	r0, r8
   2b5a8:	mov	r1, r6
   2b5ac:	mov	r2, #100	; 0x64
   2b5b0:	mov	r3, #0
   2b5b4:	mov	r7, #100	; 0x64
   2b5b8:	bl	4c144 <__assert_fail@plt+0x396c8>
   2b5bc:	umull	ip, r3, r0, r7
   2b5c0:	mov	r2, #0
   2b5c4:	mla	r3, r1, r7, r3
   2b5c8:	subs	r8, r8, ip
   2b5cc:	sbc	r3, r6, r3
   2b5d0:	ldr	r7, [sp, #136]	; 0x88
   2b5d4:	strd	r0, [r7]
   2b5d8:	ldr	r0, [sp, #140]	; 0x8c
   2b5dc:	str	r8, [r0]
   2b5e0:	str	r3, [r0, #4]
   2b5e4:	mov	r0, #2
   2b5e8:	str	r2, [r4, #88]	; 0x58
   2b5ec:	str	r2, [r4, #92]	; 0x5c
   2b5f0:	str	r0, [r4, #28]
   2b5f4:	ldr	r1, [r4, #144]	; 0x90
   2b5f8:	ldr	r0, [r5, #48]	; 0x30
   2b5fc:	ldr	sl, [r5, #12]
   2b600:	ldr	ip, [r5, #20]
   2b604:	ldr	r3, [r5, #28]
   2b608:	ldr	r2, [r5, #44]	; 0x2c
   2b60c:	ldr	r8, [r5, #24]
   2b610:	ldr	r9, [r5, #32]
   2b614:	ldr	lr, [r5, #40]	; 0x28
   2b618:	add	r0, r1, r0
   2b61c:	str	r1, [sp, #68]	; 0x44
   2b620:	ldr	r1, [r5]
   2b624:	str	sl, [sp, #56]	; 0x38
   2b628:	str	ip, [sp, #44]	; 0x2c
   2b62c:	str	r3, [sp, #32]
   2b630:	str	r2, [sp, #24]
   2b634:	str	r0, [sp, #64]	; 0x40
   2b638:	str	r1, [sp, #60]	; 0x3c
   2b63c:	ldr	r1, [r5, #4]
   2b640:	str	r1, [sp, #72]	; 0x48
   2b644:	ldr	r1, [r5, #8]
   2b648:	str	r1, [sp, #52]	; 0x34
   2b64c:	ldr	r1, [r5, #16]
   2b650:	str	r1, [sp, #48]	; 0x30
   2b654:	ldr	r1, [r5, #36]	; 0x24
   2b658:	str	r0, [r4, #144]	; 0x90
   2b65c:	ldr	r0, [sp, #100]	; 0x64
   2b660:	str	r1, [sp, #28]
   2b664:	ldrd	r6, [r0]
   2b668:	adds	r6, r6, lr
   2b66c:	adc	lr, r7, r2
   2b670:	stm	r0, {r6, lr}
   2b674:	ldr	r6, [sp, #104]	; 0x68
   2b678:	ldm	r6, {r0, r2}
   2b67c:	adds	r9, r0, r9
   2b680:	str	r2, [sp, #16]
   2b684:	adc	r0, r2, r1
   2b688:	str	r0, [sp, #20]
   2b68c:	str	r9, [r6]
   2b690:	str	r0, [r6, #4]
   2b694:	ldr	r0, [sp, #108]	; 0x6c
   2b698:	ldm	r0, {r2, r6}
   2b69c:	adds	r8, r2, r8
   2b6a0:	adc	r2, r6, r3
   2b6a4:	str	r8, [r0]
   2b6a8:	str	r2, [r0, #4]
   2b6ac:	ldr	r0, [sp, #112]	; 0x70
   2b6b0:	ldr	r1, [sp, #48]	; 0x30
   2b6b4:	ldrd	r8, [r0]
   2b6b8:	adds	r8, r8, r1
   2b6bc:	adc	r1, r9, ip
   2b6c0:	str	r1, [sp, #36]	; 0x24
   2b6c4:	str	r8, [r0]
   2b6c8:	str	r1, [r0, #4]
   2b6cc:	ldr	r0, [sp, #116]	; 0x74
   2b6d0:	ldr	r8, [r0]
   2b6d4:	ldr	r1, [r0, #4]
   2b6d8:	ldr	r3, [sp, #52]	; 0x34
   2b6dc:	adds	r8, r8, r3
   2b6e0:	str	r1, [sp, #40]	; 0x28
   2b6e4:	adc	r1, r1, sl
   2b6e8:	mov	sl, #0
   2b6ec:	str	r1, [sp, #48]	; 0x30
   2b6f0:	str	r8, [r0]
   2b6f4:	str	r1, [r0, #4]
   2b6f8:	ldr	ip, [sp, #120]	; 0x78
   2b6fc:	ldr	r8, [ip]
   2b700:	ldr	r0, [ip, #4]
   2b704:	ldr	r1, [sp, #60]	; 0x3c
   2b708:	adds	r8, r8, r1
   2b70c:	ldr	r1, [sp, #72]	; 0x48
   2b710:	str	r0, [sp, #52]	; 0x34
   2b714:	adc	r3, r0, r1
   2b718:	cmn	r7, #1
   2b71c:	mov	r0, #0
   2b720:	mov	r1, #0
   2b724:	movwgt	r0, #1
   2b728:	cmn	lr, #1
   2b72c:	str	r3, [sp, #60]	; 0x3c
   2b730:	str	r8, [ip]
   2b734:	str	r3, [ip, #4]
   2b738:	mov	r8, #0
   2b73c:	mov	ip, #0
   2b740:	mov	r3, #0
   2b744:	movwgt	r1, #1
   2b748:	str	r0, [sp, #12]
   2b74c:	subs	r0, r0, r1
   2b750:	mov	r1, #0
   2b754:	movwne	r0, #1
   2b758:	str	r0, [sp, #8]
   2b75c:	ldr	r0, [sp, #24]
   2b760:	cmn	r0, #1
   2b764:	mov	r0, #0
   2b768:	movwgt	r0, #1
   2b76c:	str	r0, [sp, #24]
   2b770:	ldr	r0, [sp, #16]
   2b774:	cmn	r0, #1
   2b778:	ldr	r0, [sp, #20]
   2b77c:	movwgt	r1, #1
   2b780:	str	r1, [sp, #20]
   2b784:	cmn	r0, #1
   2b788:	mov	r0, #0
   2b78c:	movwgt	r0, #1
   2b790:	subs	r0, r1, r0
   2b794:	mov	r1, #0
   2b798:	movwne	r0, #1
   2b79c:	str	r0, [sp, #16]
   2b7a0:	ldr	r0, [sp, #28]
   2b7a4:	cmn	r0, #1
   2b7a8:	mov	r0, #0
   2b7ac:	movwgt	r0, #1
   2b7b0:	cmn	r6, #1
   2b7b4:	ldr	r6, [sp, #68]	; 0x44
   2b7b8:	movwgt	r1, #1
   2b7bc:	str	r0, [sp, #28]
   2b7c0:	cmn	r2, #1
   2b7c4:	mov	r0, #0
   2b7c8:	mov	r2, #0
   2b7cc:	movwgt	r0, #1
   2b7d0:	str	r1, [sp, #4]
   2b7d4:	subs	r0, r1, r0
   2b7d8:	mov	r1, #0
   2b7dc:	movwne	r0, #1
   2b7e0:	str	r0, [sp]
   2b7e4:	ldr	r0, [sp, #32]
   2b7e8:	cmn	r0, #1
   2b7ec:	mov	r0, #0
   2b7f0:	movwgt	r0, #1
   2b7f4:	cmn	r9, #1
   2b7f8:	str	r0, [sp, #32]
   2b7fc:	ldr	r0, [sp, #36]	; 0x24
   2b800:	movwgt	r8, #1
   2b804:	cmn	r0, #1
   2b808:	movwgt	r1, #1
   2b80c:	subs	r0, r8, r1
   2b810:	mov	r1, #0
   2b814:	movwne	r0, #1
   2b818:	str	r0, [sp, #36]	; 0x24
   2b81c:	ldr	r0, [sp, #44]	; 0x2c
   2b820:	cmn	r0, #1
   2b824:	ldr	r0, [sp, #40]	; 0x28
   2b828:	movwgt	ip, #1
   2b82c:	cmn	r0, #1
   2b830:	ldr	r0, [sp, #48]	; 0x30
   2b834:	movwgt	r2, #1
   2b838:	cmn	r0, #1
   2b83c:	ldr	r0, [sp, #56]	; 0x38
   2b840:	movwgt	r1, #1
   2b844:	subs	r7, r2, r1
   2b848:	mov	r1, #0
   2b84c:	movwne	r7, #1
   2b850:	cmn	r0, #1
   2b854:	ldr	r0, [sp, #52]	; 0x34
   2b858:	movwgt	r3, #1
   2b85c:	cmn	r0, #1
   2b860:	ldr	r0, [sp, #60]	; 0x3c
   2b864:	movwgt	sl, #1
   2b868:	cmn	r0, #1
   2b86c:	ldr	r0, [sp, #72]	; 0x48
   2b870:	movwgt	r1, #1
   2b874:	subs	r1, sl, r1
   2b878:	movwne	r1, #1
   2b87c:	cmn	r0, #1
   2b880:	mov	r0, #0
   2b884:	movwgt	r0, #1
   2b888:	str	r0, [sp, #72]	; 0x48
   2b88c:	ldr	r0, [sp, #64]	; 0x40
   2b890:	cmp	r0, r6
   2b894:	bvs	2c628 <__assert_fail@plt+0x19bac>
   2b898:	ldr	r0, [sp, #12]
   2b89c:	ldr	r6, [sp, #24]
   2b8a0:	sub	lr, r0, r6
   2b8a4:	ldr	r0, [sp, #8]
   2b8a8:	clz	r6, lr
   2b8ac:	lsr	r6, r6, #5
   2b8b0:	ands	r6, r6, r0
   2b8b4:	bne	2c63c <__assert_fail@plt+0x19bc0>
   2b8b8:	ldr	r0, [sp, #20]
   2b8bc:	ldr	r6, [sp, #28]
   2b8c0:	sub	r6, r0, r6
   2b8c4:	ldr	r0, [sp, #16]
   2b8c8:	clz	r6, r6
   2b8cc:	lsr	r6, r6, #5
   2b8d0:	ands	r6, r6, r0
   2b8d4:	bne	2c588 <__assert_fail@plt+0x19b0c>
   2b8d8:	ldr	r0, [sp, #4]
   2b8dc:	ldr	r6, [sp, #32]
   2b8e0:	ldr	lr, [sp, #172]	; 0xac
   2b8e4:	sub	r0, r0, r6
   2b8e8:	ldr	r6, [sp]
   2b8ec:	clz	r0, r0
   2b8f0:	lsr	r0, r0, #5
   2b8f4:	ands	r0, r0, r6
   2b8f8:	bne	2c510 <__assert_fail@plt+0x19a94>
   2b8fc:	ldr	r6, [sp, #36]	; 0x24
   2b900:	sub	r0, r8, ip
   2b904:	clz	r0, r0
   2b908:	lsr	r0, r0, #5
   2b90c:	ands	r0, r0, r6
   2b910:	bne	2c3d0 <__assert_fail@plt+0x19954>
   2b914:	sub	r0, r2, r3
   2b918:	clz	r0, r0
   2b91c:	lsr	r0, r0, #5
   2b920:	ands	r0, r0, r7
   2b924:	bne	2c31c <__assert_fail@plt+0x198a0>
   2b928:	ldr	r0, [sp, #72]	; 0x48
   2b92c:	ldr	r3, [sp, #180]	; 0xb4
   2b930:	ldr	r7, [sp, #164]	; 0xa4
   2b934:	sub	r0, sl, r0
   2b938:	ldr	sl, [sp, #160]	; 0xa0
   2b93c:	clz	r0, r0
   2b940:	lsr	r0, r0, #5
   2b944:	ands	r0, r0, r1
   2b948:	ldr	r8, [sp, #168]	; 0xa8
   2b94c:	ldr	r6, [sp, #176]	; 0xb0
   2b950:	ldr	r2, [sp, #188]	; 0xbc
   2b954:	mov	r0, #1
   2b958:	bne	2c208 <__assert_fail@plt+0x1978c>
   2b95c:	mov	r0, #1
   2b960:	strb	r0, [r4, #153]	; 0x99
   2b964:	b	2ad40 <__assert_fail@plt+0x182c4>
   2b968:	mov	r0, sl
   2b96c:	mov	r1, r8
   2b970:	mov	r2, #100	; 0x64
   2b974:	mov	r3, #0
   2b978:	mov	r7, lr
   2b97c:	bl	4c144 <__assert_fail@plt+0x396c8>
   2b980:	mov	lr, r7
   2b984:	mov	r7, #100	; 0x64
   2b988:	mov	r6, #0
   2b98c:	umull	r2, r3, r0, r7
   2b990:	mla	r3, r1, r7, r3
   2b994:	subs	r2, sl, r2
   2b998:	sbc	r3, r8, r3
   2b99c:	ldr	r7, [sp, #136]	; 0x88
   2b9a0:	strd	r0, [r7]
   2b9a4:	ldr	r0, [sp, #140]	; 0x8c
   2b9a8:	strd	r2, [r0]
   2b9ac:	mov	r0, #2
   2b9b0:	str	r6, [r4, #88]	; 0x58
   2b9b4:	str	r6, [r4, #92]	; 0x5c
   2b9b8:	ldr	r3, [sp, #180]	; 0xb4
   2b9bc:	ldr	sl, [sp, #160]	; 0xa0
   2b9c0:	ldr	r8, [sp, #168]	; 0xa8
   2b9c4:	str	r0, [r4, #28]
   2b9c8:	ldr	r6, [sp, #176]	; 0xb0
   2b9cc:	ldr	r2, [sp, #188]	; 0xbc
   2b9d0:	mov	r7, r9
   2b9d4:	b	2ad40 <__assert_fail@plt+0x182c4>
   2b9d8:	and	r0, r6, r2
   2b9dc:	mov	r7, r6
   2b9e0:	cmn	r0, #1
   2b9e4:	bne	2bb88 <__assert_fail@plt+0x1910c>
   2b9e8:	mov	r3, #0
   2b9ec:	b	2bbbc <__assert_fail@plt+0x19140>
   2b9f0:	and	r0, r6, r2
   2b9f4:	mov	r7, r6
   2b9f8:	cmn	r0, #1
   2b9fc:	bne	2bd20 <__assert_fail@plt+0x192a4>
   2ba00:	mov	r3, #0
   2ba04:	b	2bd54 <__assert_fail@plt+0x192d8>
   2ba08:	and	r0, r9, r8
   2ba0c:	mvn	r6, #0
   2ba10:	mvn	r7, #0
   2ba14:	cmn	r0, #1
   2ba18:	beq	2b020 <__assert_fail@plt+0x185a4>
   2ba1c:	str	r2, [sp, #236]	; 0xec
   2ba20:	mov	r6, r3
   2ba24:	mov	r0, #0
   2ba28:	mov	r1, #-2147483648	; 0x80000000
   2ba2c:	mov	r2, r9
   2ba30:	mov	r3, r8
   2ba34:	bl	4c144 <__assert_fail@plt+0x396c8>
   2ba38:	ldr	r2, [sp, #236]	; 0xec
   2ba3c:	mov	r3, r6
   2ba40:	mov	r6, r9
   2ba44:	mov	r7, r8
   2ba48:	subs	r0, r0, r2
   2ba4c:	sbcs	r0, r1, sl
   2ba50:	bge	2b020 <__assert_fail@plt+0x185a4>
   2ba54:	b	2c498 <__assert_fail@plt+0x19a1c>
   2ba58:	and	r0, r9, r8
   2ba5c:	mvn	r6, #0
   2ba60:	mvn	r7, #0
   2ba64:	cmn	r0, #1
   2ba68:	beq	2b020 <__assert_fail@plt+0x185a4>
   2ba6c:	str	r2, [sp, #236]	; 0xec
   2ba70:	mov	r6, r3
   2ba74:	mov	r0, #0
   2ba78:	mov	r1, #-2147483648	; 0x80000000
   2ba7c:	mov	r2, r9
   2ba80:	mov	r3, r8
   2ba84:	bl	4c144 <__assert_fail@plt+0x396c8>
   2ba88:	ldr	r2, [sp, #236]	; 0xec
   2ba8c:	mov	r3, r6
   2ba90:	mov	r6, r9
   2ba94:	mov	r7, r8
   2ba98:	subs	r0, r0, r2
   2ba9c:	sbcs	r0, r1, sl
   2baa0:	bge	2b020 <__assert_fail@plt+0x185a4>
   2baa4:	b	2c484 <__assert_fail@plt+0x19a08>
   2baa8:	and	r0, r9, r8
   2baac:	mvn	r6, #0
   2bab0:	mvn	r7, #0
   2bab4:	cmn	r0, #1
   2bab8:	beq	2b020 <__assert_fail@plt+0x185a4>
   2babc:	str	r2, [sp, #236]	; 0xec
   2bac0:	mov	r6, r3
   2bac4:	mov	r0, #0
   2bac8:	mov	r1, #-2147483648	; 0x80000000
   2bacc:	mov	r2, r9
   2bad0:	mov	r3, r8
   2bad4:	bl	4c144 <__assert_fail@plt+0x396c8>
   2bad8:	ldr	r2, [sp, #236]	; 0xec
   2badc:	mov	r3, r6
   2bae0:	mov	r6, r9
   2bae4:	mov	r7, r8
   2bae8:	subs	r0, r0, r2
   2baec:	sbcs	r0, r1, sl
   2baf0:	bge	2b020 <__assert_fail@plt+0x185a4>
   2baf4:	b	2c4ac <__assert_fail@plt+0x19a30>
   2baf8:	str	r3, [sp, #180]	; 0xb4
   2bafc:	mvn	r0, #0
   2bb00:	mvn	r1, #-2147483648	; 0x80000000
   2bb04:	mov	r3, sl
   2bb08:	mov	r8, r2
   2bb0c:	bl	4c144 <__assert_fail@plt+0x396c8>
   2bb10:	ldr	r3, [sp, #180]	; 0xb4
   2bb14:	subs	r0, r6, r0
   2bb18:	mov	r2, r8
   2bb1c:	sbcs	r0, r7, r1
   2bb20:	bge	2b020 <__assert_fail@plt+0x185a4>
   2bb24:	b	2c380 <__assert_fail@plt+0x19904>
   2bb28:	str	r3, [sp, #180]	; 0xb4
   2bb2c:	mvn	r0, #0
   2bb30:	mvn	r1, #-2147483648	; 0x80000000
   2bb34:	mov	r3, sl
   2bb38:	mov	r8, r2
   2bb3c:	bl	4c144 <__assert_fail@plt+0x396c8>
   2bb40:	ldr	r3, [sp, #180]	; 0xb4
   2bb44:	subs	r0, r6, r0
   2bb48:	mov	r2, r8
   2bb4c:	sbcs	r0, r7, r1
   2bb50:	bge	2b020 <__assert_fail@plt+0x185a4>
   2bb54:	b	2c394 <__assert_fail@plt+0x19918>
   2bb58:	str	r3, [sp, #180]	; 0xb4
   2bb5c:	mvn	r0, #0
   2bb60:	mvn	r1, #-2147483648	; 0x80000000
   2bb64:	mov	r3, sl
   2bb68:	mov	r8, r2
   2bb6c:	bl	4c144 <__assert_fail@plt+0x396c8>
   2bb70:	ldr	r3, [sp, #180]	; 0xb4
   2bb74:	subs	r0, r6, r0
   2bb78:	mov	r2, r8
   2bb7c:	sbcs	r0, r7, r1
   2bb80:	bge	2b020 <__assert_fail@plt+0x185a4>
   2bb84:	b	2c3a8 <__assert_fail@plt+0x1992c>
   2bb88:	mov	r6, r2
   2bb8c:	mov	r0, #0
   2bb90:	mov	r1, #-2147483648	; 0x80000000
   2bb94:	mov	r2, r7
   2bb98:	mov	r8, ip
   2bb9c:	mov	r3, r6
   2bba0:	bl	4c144 <__assert_fail@plt+0x396c8>
   2bba4:	subs	r0, r0, #60	; 0x3c
   2bba8:	mov	r3, #1
   2bbac:	mov	ip, r8
   2bbb0:	mov	r2, r6
   2bbb4:	sbcs	r0, r1, #0
   2bbb8:	movge	r3, #0
   2bbbc:	mov	r0, #60	; 0x3c
   2bbc0:	str	r3, [sp, #64]	; 0x40
   2bbc4:	rsb	r3, r2, r2, lsl #4
   2bbc8:	mov	r2, #0
   2bbcc:	umull	r8, r1, r7, r0
   2bbd0:	ldr	r7, [sp, #72]	; 0x48
   2bbd4:	add	r6, r1, r3, lsl #2
   2bbd8:	adds	r0, r8, ip
   2bbdc:	mov	r1, #0
   2bbe0:	mov	r3, #0
   2bbe4:	str	r0, [sp, #60]	; 0x3c
   2bbe8:	mov	r0, ip
   2bbec:	adc	r9, r6, r7
   2bbf0:	cmn	r9, #1
   2bbf4:	movwgt	r1, #1
   2bbf8:	cmn	r6, #1
   2bbfc:	movwgt	r3, #1
   2bc00:	subs	sl, r3, r1
   2bc04:	mov	r1, #0
   2bc08:	movwne	sl, #1
   2bc0c:	cmn	r7, #1
   2bc10:	movwgt	r1, #1
   2bc14:	subs	r0, r8, r0
   2bc18:	sbc	r7, r6, r7
   2bc1c:	sub	ip, r3, r1
   2bc20:	cmn	r7, #1
   2bc24:	clz	lr, ip
   2bc28:	movwgt	r2, #1
   2bc2c:	lsr	lr, lr, #5
   2bc30:	subs	r2, r3, r2
   2bc34:	movwne	r2, #1
   2bc38:	cmp	r3, r1
   2bc3c:	movwne	ip, #1
   2bc40:	and	r1, ip, r2
   2bc44:	ldr	r2, [sp, #68]	; 0x44
   2bc48:	ands	r2, r2, #1
   2bc4c:	ldr	r2, [sp, #64]	; 0x40
   2bc50:	andeq	r1, lr, sl
   2bc54:	moveq	r7, r9
   2bc58:	ldr	sl, [sp, #160]	; 0xa0
   2bc5c:	ldr	r9, [sp, #164]	; 0xa4
   2bc60:	orr	r1, r2, r1
   2bc64:	eor	r2, r1, #1
   2bc68:	ldr	r1, [sp, #60]	; 0x3c
   2bc6c:	moveq	r0, r1
   2bc70:	adds	r1, r0, #1440	; 0x5a0
   2bc74:	adc	r3, r7, #0
   2bc78:	cmp	r2, #0
   2bc7c:	beq	2c290 <__assert_fail@plt+0x19814>
   2bc80:	rsbs	r1, r1, #2880	; 0xb40
   2bc84:	rscs	r1, r3, #0
   2bc88:	bcc	2c27c <__assert_fail@plt+0x19800>
   2bc8c:	rsb	r0, r0, r0, lsl #4
   2bc90:	mov	r3, #0
   2bc94:	mov	r2, #0
   2bc98:	lsl	r1, r0, #2
   2bc9c:	str	r1, [r4, #24]
   2bca0:	sbfx	r1, r0, #29, #1
   2bca4:	ldrd	r6, [r5, #-112]	; 0xffffff90
   2bca8:	cmn	r1, #1
   2bcac:	movwgt	r3, #1
   2bcb0:	adds	r0, r6, r0, lsl #2
   2bcb4:	mov	r6, #0
   2bcb8:	adc	r1, r1, r7
   2bcbc:	str	r0, [r4, #24]
   2bcc0:	cmn	r1, #1
   2bcc4:	movwgt	r6, #1
   2bcc8:	subs	r6, r3, r6
   2bccc:	movwne	r6, #1
   2bcd0:	cmn	r7, #1
   2bcd4:	movwgt	r2, #1
   2bcd8:	sub	r2, r3, r2
   2bcdc:	clz	r2, r2
   2bce0:	lsr	r2, r2, #5
   2bce4:	tst	r2, r6
   2bce8:	bne	2c2b8 <__assert_fail@plt+0x1983c>
   2bcec:	asr	r2, r0, #31
   2bcf0:	ldr	r3, [sp, #180]	; 0xb4
   2bcf4:	ldr	lr, [sp, #172]	; 0xac
   2bcf8:	ldr	r8, [sp, #168]	; 0xa8
   2bcfc:	ldr	r6, [sp, #176]	; 0xb0
   2bd00:	eor	r0, r0, r0
   2bd04:	mov	r7, r9
   2bd08:	eor	r1, r1, r2
   2bd0c:	ldr	r2, [sp, #188]	; 0xbc
   2bd10:	orrs	r0, r0, r1
   2bd14:	mov	r0, #1
   2bd18:	beq	2ad40 <__assert_fail@plt+0x182c4>
   2bd1c:	b	2c208 <__assert_fail@plt+0x1978c>
   2bd20:	mov	r6, r2
   2bd24:	mov	r0, #0
   2bd28:	mov	r1, #-2147483648	; 0x80000000
   2bd2c:	mov	r2, r7
   2bd30:	mov	r8, lr
   2bd34:	mov	r3, r6
   2bd38:	bl	4c144 <__assert_fail@plt+0x396c8>
   2bd3c:	subs	r0, r0, #60	; 0x3c
   2bd40:	mov	r3, #1
   2bd44:	mov	lr, r8
   2bd48:	mov	r2, r6
   2bd4c:	sbcs	r0, r1, #0
   2bd50:	movge	r3, #0
   2bd54:	mov	r0, #60	; 0x3c
   2bd58:	str	r3, [sp, #64]	; 0x40
   2bd5c:	rsb	r3, r2, r2, lsl #4
   2bd60:	mov	r2, #0
   2bd64:	umull	r8, r1, r7, r0
   2bd68:	ldr	r7, [sp, #72]	; 0x48
   2bd6c:	add	r6, r1, r3, lsl #2
   2bd70:	adds	r0, r8, lr
   2bd74:	mov	r1, #0
   2bd78:	mov	r3, #0
   2bd7c:	str	r0, [sp, #60]	; 0x3c
   2bd80:	mov	r0, lr
   2bd84:	adc	r9, r6, r7
   2bd88:	cmn	r9, #1
   2bd8c:	movwgt	r1, #1
   2bd90:	cmn	r6, #1
   2bd94:	movwgt	r3, #1
   2bd98:	subs	sl, r3, r1
   2bd9c:	mov	r1, #0
   2bda0:	movwne	sl, #1
   2bda4:	cmn	r7, #1
   2bda8:	movwgt	r1, #1
   2bdac:	subs	r8, r8, r0
   2bdb0:	ldr	r0, [sp, #68]	; 0x44
   2bdb4:	sbc	r7, r6, r7
   2bdb8:	sub	ip, r3, r1
   2bdbc:	cmn	r7, #1
   2bdc0:	clz	lr, ip
   2bdc4:	movwgt	r2, #1
   2bdc8:	lsr	lr, lr, #5
   2bdcc:	subs	r2, r3, r2
   2bdd0:	movwne	r2, #1
   2bdd4:	cmp	r3, r1
   2bdd8:	movwne	ip, #1
   2bddc:	and	r1, ip, r2
   2bde0:	ands	r2, r0, #1
   2bde4:	mov	ip, r8
   2bde8:	ldr	r2, [sp, #64]	; 0x40
   2bdec:	andeq	r1, lr, sl
   2bdf0:	moveq	r7, r9
   2bdf4:	ldr	sl, [sp, #160]	; 0xa0
   2bdf8:	ldr	r9, [sp, #164]	; 0xa4
   2bdfc:	orr	r1, r2, r1
   2be00:	eor	r2, r1, #1
   2be04:	ldr	r1, [sp, #60]	; 0x3c
   2be08:	moveq	ip, r1
   2be0c:	adds	r1, ip, #1440	; 0x5a0
   2be10:	adc	r3, r7, #0
   2be14:	cmp	r2, #0
   2be18:	beq	2c2a4 <__assert_fail@plt+0x19828>
   2be1c:	rsbs	r1, r1, #2880	; 0xb40
   2be20:	ldr	lr, [sp, #172]	; 0xac
   2be24:	ldr	r8, [sp, #168]	; 0xa8
   2be28:	ldr	r6, [sp, #176]	; 0xb0
   2be2c:	ldr	r2, [sp, #188]	; 0xbc
   2be30:	mov	r0, #1
   2be34:	rscs	r1, r3, #0
   2be38:	ldr	r3, [sp, #180]	; 0xb4
   2be3c:	bcc	2c208 <__assert_fail@plt+0x1978c>
   2be40:	rsb	r0, ip, ip, lsl #4
   2be44:	mov	r7, r9
   2be48:	lsl	r0, r0, #2
   2be4c:	str	r0, [r4, #24]
   2be50:	b	2ad40 <__assert_fail@plt+0x182c4>
   2be54:	mov	r0, #1
   2be58:	ldr	r1, [sp, #72]	; 0x48
   2be5c:	strb	r0, [r4, #180]	; 0xb4
   2be60:	ldr	r0, [sp, #96]	; 0x60
   2be64:	vst1.64	{d16-d17}, [r0]
   2be68:	ldr	r0, [sp, #88]	; 0x58
   2be6c:	stm	r0, {r1, ip}
   2be70:	b	2b5f4 <__assert_fail@plt+0x18b78>
   2be74:	mov	r0, #1
   2be78:	mov	ip, r1
   2be7c:	ldr	r1, [sp, #72]	; 0x48
   2be80:	strb	r0, [r4, #180]	; 0xb4
   2be84:	ldr	r0, [sp, #96]	; 0x60
   2be88:	vst1.64	{d16-d17}, [r0]
   2be8c:	ldr	r0, [sp, #88]	; 0x58
   2be90:	stm	r0, {r1, ip}
   2be94:	b	2ad40 <__assert_fail@plt+0x182c4>
   2be98:	mov	r0, r6
   2be9c:	b	28dac <__assert_fail@plt+0x16330>
   2bea0:	ldr	r0, [sp, #236]	; 0xec
   2bea4:	b	28dac <__assert_fail@plt+0x16330>
   2bea8:	ldr	r0, [sp, #232]	; 0xe8
   2beac:	b	28dac <__assert_fail@plt+0x16330>
   2beb0:	ldr	r0, [sp, #228]	; 0xe4
   2beb4:	b	28dac <__assert_fail@plt+0x16330>
   2beb8:	ldr	r0, [sp, #224]	; 0xe0
   2bebc:	b	28dac <__assert_fail@plt+0x16330>
   2bec0:	ldr	r0, [sp, #220]	; 0xdc
   2bec4:	b	28dac <__assert_fail@plt+0x16330>
   2bec8:	ldr	r0, [sp, #216]	; 0xd8
   2becc:	b	28dac <__assert_fail@plt+0x16330>
   2bed0:	ldr	r0, [sp, #212]	; 0xd4
   2bed4:	b	28dac <__assert_fail@plt+0x16330>
   2bed8:	mov	r0, r7
   2bedc:	b	28dac <__assert_fail@plt+0x16330>
   2bee0:	movw	r0, #5776	; 0x1690
   2bee4:	movt	r0, #5
   2bee8:	b	288c8 <__assert_fail@plt+0x15e4c>
   2beec:	movw	r0, #5776	; 0x1690
   2bef0:	movt	r0, #5
   2bef4:	add	r0, r0, #24
   2bef8:	b	28dac <__assert_fail@plt+0x16330>
   2befc:	movw	r0, #5776	; 0x1690
   2bf00:	movt	r0, #5
   2bf04:	add	r0, r0, #36	; 0x24
   2bf08:	b	28dac <__assert_fail@plt+0x16330>
   2bf0c:	movw	r0, #5776	; 0x1690
   2bf10:	movt	r0, #5
   2bf14:	add	r0, r0, #48	; 0x30
   2bf18:	b	28dac <__assert_fail@plt+0x16330>
   2bf1c:	movw	r0, #5776	; 0x1690
   2bf20:	movt	r0, #5
   2bf24:	add	r0, r0, #60	; 0x3c
   2bf28:	b	28dac <__assert_fail@plt+0x16330>
   2bf2c:	movw	r0, #5776	; 0x1690
   2bf30:	movt	r0, #5
   2bf34:	add	r0, r0, #72	; 0x48
   2bf38:	b	28dac <__assert_fail@plt+0x16330>
   2bf3c:	movw	r0, #5776	; 0x1690
   2bf40:	movt	r0, #5
   2bf44:	add	r0, r0, #84	; 0x54
   2bf48:	b	28dac <__assert_fail@plt+0x16330>
   2bf4c:	movw	r0, #5776	; 0x1690
   2bf50:	movt	r0, #5
   2bf54:	add	r0, r0, #96	; 0x60
   2bf58:	b	28dac <__assert_fail@plt+0x16330>
   2bf5c:	movw	r0, #5776	; 0x1690
   2bf60:	movt	r0, #5
   2bf64:	add	r0, r0, #108	; 0x6c
   2bf68:	b	28dac <__assert_fail@plt+0x16330>
   2bf6c:	movw	r0, #5776	; 0x1690
   2bf70:	movt	r0, #5
   2bf74:	add	r0, r0, #120	; 0x78
   2bf78:	b	28dac <__assert_fail@plt+0x16330>
   2bf7c:	movw	r0, #5776	; 0x1690
   2bf80:	movt	r0, #5
   2bf84:	add	r0, r0, #132	; 0x84
   2bf88:	b	28dac <__assert_fail@plt+0x16330>
   2bf8c:	movw	r0, #5776	; 0x1690
   2bf90:	movt	r0, #5
   2bf94:	add	r0, r0, #144	; 0x90
   2bf98:	b	28dac <__assert_fail@plt+0x16330>
   2bf9c:	movw	r0, #5776	; 0x1690
   2bfa0:	movt	r0, #5
   2bfa4:	add	r0, r0, #156	; 0x9c
   2bfa8:	b	28dac <__assert_fail@plt+0x16330>
   2bfac:	movw	r0, #5776	; 0x1690
   2bfb0:	movt	r0, #5
   2bfb4:	add	r0, r0, #168	; 0xa8
   2bfb8:	b	28dac <__assert_fail@plt+0x16330>
   2bfbc:	movw	r0, #5776	; 0x1690
   2bfc0:	movt	r0, #5
   2bfc4:	add	r0, r0, #180	; 0xb4
   2bfc8:	b	28dac <__assert_fail@plt+0x16330>
   2bfcc:	movw	r0, #5776	; 0x1690
   2bfd0:	movt	r0, #5
   2bfd4:	add	r0, r0, #192	; 0xc0
   2bfd8:	b	28dac <__assert_fail@plt+0x16330>
   2bfdc:	movw	r0, #5776	; 0x1690
   2bfe0:	movt	r0, #5
   2bfe4:	add	r0, r0, #204	; 0xcc
   2bfe8:	b	28dac <__assert_fail@plt+0x16330>
   2bfec:	movw	r0, #5776	; 0x1690
   2bff0:	movt	r0, #5
   2bff4:	add	r0, r0, #216	; 0xd8
   2bff8:	b	28dac <__assert_fail@plt+0x16330>
   2bffc:	movw	r0, #5776	; 0x1690
   2c000:	movt	r0, #5
   2c004:	add	r0, r0, #228	; 0xe4
   2c008:	b	28dac <__assert_fail@plt+0x16330>
   2c00c:	cmp	r2, #0
   2c010:	beq	2c094 <__assert_fail@plt+0x19618>
   2c014:	ldr	r1, [sp, #80]	; 0x50
   2c018:	ldrb	r3, [fp, #-71]	; 0xffffffb9
   2c01c:	cmp	r2, #46	; 0x2e
   2c020:	sub	r0, fp, #72	; 0x48
   2c024:	moveq	r1, r0
   2c028:	sub	r0, r2, #46	; 0x2e
   2c02c:	cmp	r3, #0
   2c030:	clz	r0, r0
   2c034:	strb	r3, [r1]
   2c038:	lsr	r0, r0, #5
   2c03c:	beq	2c070 <__assert_fail@plt+0x195f4>
   2c040:	ldr	r2, [sp, #80]	; 0x50
   2c044:	ldrb	r3, [r2]
   2c048:	ldrb	r7, [r2, #1]!
   2c04c:	cmp	r3, #46	; 0x2e
   2c050:	sub	r3, r3, #46	; 0x2e
   2c054:	clz	r3, r3
   2c058:	addne	r1, r1, #1
   2c05c:	cmp	r7, #0
   2c060:	lsr	r3, r3, #5
   2c064:	strb	r7, [r1]
   2c068:	orr	r0, r0, r3
   2c06c:	bne	2c044 <__assert_fail@plt+0x195c8>
   2c070:	mov	r7, #63	; 0x3f
   2c074:	tst	r0, #1
   2c078:	beq	28dc8 <__assert_fail@plt+0x1634c>
   2c07c:	mov	r0, r4
   2c080:	sub	r1, fp, #72	; 0x48
   2c084:	bl	2d850 <__assert_fail@plt+0x1add4>
   2c088:	cmp	r0, #0
   2c08c:	bne	28dac <__assert_fail@plt+0x16330>
   2c090:	b	28dc8 <__assert_fail@plt+0x1634c>
   2c094:	mov	r7, #63	; 0x3f
   2c098:	b	28dc8 <__assert_fail@plt+0x1634c>
   2c09c:	movw	r0, #6028	; 0x178c
   2c0a0:	movt	r0, #5
   2c0a4:	add	r0, r0, #24
   2c0a8:	b	28dac <__assert_fail@plt+0x16330>
   2c0ac:	movw	r0, #6028	; 0x178c
   2c0b0:	movt	r0, #5
   2c0b4:	add	r0, r0, #36	; 0x24
   2c0b8:	b	28dac <__assert_fail@plt+0x16330>
   2c0bc:	movw	r0, #6028	; 0x178c
   2c0c0:	movt	r0, #5
   2c0c4:	add	r0, r0, #48	; 0x30
   2c0c8:	b	28dac <__assert_fail@plt+0x16330>
   2c0cc:	movw	r0, #6028	; 0x178c
   2c0d0:	movt	r0, #5
   2c0d4:	add	r0, r0, #60	; 0x3c
   2c0d8:	b	28dac <__assert_fail@plt+0x16330>
   2c0dc:	movw	r0, #6028	; 0x178c
   2c0e0:	movt	r0, #5
   2c0e4:	add	r0, r0, #72	; 0x48
   2c0e8:	b	28dac <__assert_fail@plt+0x16330>
   2c0ec:	movw	r0, #6028	; 0x178c
   2c0f0:	movt	r0, #5
   2c0f4:	add	r0, r0, #84	; 0x54
   2c0f8:	b	28dac <__assert_fail@plt+0x16330>
   2c0fc:	movw	r0, #6028	; 0x178c
   2c100:	movt	r0, #5
   2c104:	add	r0, r0, #96	; 0x60
   2c108:	b	28dac <__assert_fail@plt+0x16330>
   2c10c:	movw	r0, #6028	; 0x178c
   2c110:	movt	r0, #5
   2c114:	add	r0, r0, #108	; 0x6c
   2c118:	b	28dac <__assert_fail@plt+0x16330>
   2c11c:	movw	r0, #6028	; 0x178c
   2c120:	movt	r0, #5
   2c124:	add	r0, r0, #120	; 0x78
   2c128:	b	28dac <__assert_fail@plt+0x16330>
   2c12c:	movw	r0, #6028	; 0x178c
   2c130:	movt	r0, #5
   2c134:	add	r0, r0, #132	; 0x84
   2c138:	b	28dac <__assert_fail@plt+0x16330>
   2c13c:	movw	r0, #6028	; 0x178c
   2c140:	movt	r0, #5
   2c144:	add	r0, r0, #144	; 0x90
   2c148:	b	28dac <__assert_fail@plt+0x16330>
   2c14c:	movw	r0, #6028	; 0x178c
   2c150:	movt	r0, #5
   2c154:	add	r0, r0, #156	; 0x9c
   2c158:	b	28dac <__assert_fail@plt+0x16330>
   2c15c:	movw	r0, #6028	; 0x178c
   2c160:	movt	r0, #5
   2c164:	add	r0, r0, #168	; 0xa8
   2c168:	b	28dac <__assert_fail@plt+0x16330>
   2c16c:	movw	r0, #6028	; 0x178c
   2c170:	movt	r0, #5
   2c174:	add	r0, r0, #180	; 0xb4
   2c178:	b	28dac <__assert_fail@plt+0x16330>
   2c17c:	movw	r0, #6028	; 0x178c
   2c180:	movt	r0, #5
   2c184:	add	r0, r0, #192	; 0xc0
   2c188:	b	28dac <__assert_fail@plt+0x16330>
   2c18c:	movw	r0, #6028	; 0x178c
   2c190:	movt	r0, #5
   2c194:	add	r0, r0, #204	; 0xcc
   2c198:	b	28dac <__assert_fail@plt+0x16330>
   2c19c:	movw	r0, #6028	; 0x178c
   2c1a0:	movt	r0, #5
   2c1a4:	add	r0, r0, #216	; 0xd8
   2c1a8:	b	28dac <__assert_fail@plt+0x16330>
   2c1ac:	movw	r0, #6028	; 0x178c
   2c1b0:	movt	r0, #5
   2c1b4:	add	r0, r0, #228	; 0xe4
   2c1b8:	b	28dac <__assert_fail@plt+0x16330>
   2c1bc:	movw	r0, #6028	; 0x178c
   2c1c0:	movt	r0, #5
   2c1c4:	add	r0, r0, #240	; 0xf0
   2c1c8:	b	28dac <__assert_fail@plt+0x16330>
   2c1cc:	movw	r0, #6028	; 0x178c
   2c1d0:	movt	r0, #5
   2c1d4:	add	r0, r0, #252	; 0xfc
   2c1d8:	b	28dac <__assert_fail@plt+0x16330>
   2c1dc:	movw	r0, #6028	; 0x178c
   2c1e0:	movt	r0, #5
   2c1e4:	b	28da8 <__assert_fail@plt+0x1632c>
   2c1e8:	movw	r0, #6028	; 0x178c
   2c1ec:	movt	r0, #5
   2c1f0:	b	28bac <__assert_fail@plt+0x16130>
   2c1f4:	movw	r0, #6028	; 0x178c
   2c1f8:	movt	r0, #5
   2c1fc:	add	r0, r0, #288	; 0x120
   2c200:	b	28dac <__assert_fail@plt+0x16330>
   2c204:	mov	r0, #0
   2c208:	sub	sp, fp, #48	; 0x30
   2c20c:	vpop	{d8-d9}
   2c210:	add	sp, sp, #4
   2c214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c218:	mov	r0, #2
   2c21c:	sub	sp, fp, #48	; 0x30
   2c220:	vpop	{d8-d9}
   2c224:	add	sp, sp, #4
   2c228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c22c:	mov	r0, #1
   2c230:	sub	sp, fp, #48	; 0x30
   2c234:	vpop	{d8-d9}
   2c238:	add	sp, sp, #4
   2c23c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c240:	mov	r0, #1
   2c244:	sub	sp, fp, #48	; 0x30
   2c248:	vpop	{d8-d9}
   2c24c:	add	sp, sp, #4
   2c250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c254:	mov	r0, #1
   2c258:	sub	sp, fp, #48	; 0x30
   2c25c:	vpop	{d8-d9}
   2c260:	add	sp, sp, #4
   2c264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c268:	mov	r0, #1
   2c26c:	sub	sp, fp, #48	; 0x30
   2c270:	vpop	{d8-d9}
   2c274:	add	sp, sp, #4
   2c278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c27c:	mov	r0, #1
   2c280:	sub	sp, fp, #48	; 0x30
   2c284:	vpop	{d8-d9}
   2c288:	add	sp, sp, #4
   2c28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c290:	mov	r0, #1
   2c294:	sub	sp, fp, #48	; 0x30
   2c298:	vpop	{d8-d9}
   2c29c:	add	sp, sp, #4
   2c2a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c2a4:	mov	r0, #1
   2c2a8:	sub	sp, fp, #48	; 0x30
   2c2ac:	vpop	{d8-d9}
   2c2b0:	add	sp, sp, #4
   2c2b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c2b8:	mov	r0, #1
   2c2bc:	sub	sp, fp, #48	; 0x30
   2c2c0:	vpop	{d8-d9}
   2c2c4:	add	sp, sp, #4
   2c2c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c2cc:	mov	r0, #1
   2c2d0:	sub	sp, fp, #48	; 0x30
   2c2d4:	vpop	{d8-d9}
   2c2d8:	add	sp, sp, #4
   2c2dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c2e0:	mov	r0, #1
   2c2e4:	sub	sp, fp, #48	; 0x30
   2c2e8:	vpop	{d8-d9}
   2c2ec:	add	sp, sp, #4
   2c2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c2f4:	mov	r0, #1
   2c2f8:	sub	sp, fp, #48	; 0x30
   2c2fc:	vpop	{d8-d9}
   2c300:	add	sp, sp, #4
   2c304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c308:	mov	r0, #1
   2c30c:	sub	sp, fp, #48	; 0x30
   2c310:	vpop	{d8-d9}
   2c314:	add	sp, sp, #4
   2c318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c31c:	mov	r0, #1
   2c320:	sub	sp, fp, #48	; 0x30
   2c324:	vpop	{d8-d9}
   2c328:	add	sp, sp, #4
   2c32c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c330:	mov	r0, #1
   2c334:	sub	sp, fp, #48	; 0x30
   2c338:	vpop	{d8-d9}
   2c33c:	add	sp, sp, #4
   2c340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c344:	mov	r0, #1
   2c348:	sub	sp, fp, #48	; 0x30
   2c34c:	vpop	{d8-d9}
   2c350:	add	sp, sp, #4
   2c354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c358:	mov	r0, #1
   2c35c:	sub	sp, fp, #48	; 0x30
   2c360:	vpop	{d8-d9}
   2c364:	add	sp, sp, #4
   2c368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c36c:	mov	r0, #1
   2c370:	sub	sp, fp, #48	; 0x30
   2c374:	vpop	{d8-d9}
   2c378:	add	sp, sp, #4
   2c37c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c380:	mov	r0, #1
   2c384:	sub	sp, fp, #48	; 0x30
   2c388:	vpop	{d8-d9}
   2c38c:	add	sp, sp, #4
   2c390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c394:	mov	r0, #1
   2c398:	sub	sp, fp, #48	; 0x30
   2c39c:	vpop	{d8-d9}
   2c3a0:	add	sp, sp, #4
   2c3a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3a8:	mov	r0, #1
   2c3ac:	sub	sp, fp, #48	; 0x30
   2c3b0:	vpop	{d8-d9}
   2c3b4:	add	sp, sp, #4
   2c3b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3bc:	mov	r0, #1
   2c3c0:	sub	sp, fp, #48	; 0x30
   2c3c4:	vpop	{d8-d9}
   2c3c8:	add	sp, sp, #4
   2c3cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3d0:	mov	r0, #1
   2c3d4:	sub	sp, fp, #48	; 0x30
   2c3d8:	vpop	{d8-d9}
   2c3dc:	add	sp, sp, #4
   2c3e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3e4:	mov	r0, #1
   2c3e8:	sub	sp, fp, #48	; 0x30
   2c3ec:	vpop	{d8-d9}
   2c3f0:	add	sp, sp, #4
   2c3f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3f8:	mov	r0, #1
   2c3fc:	sub	sp, fp, #48	; 0x30
   2c400:	vpop	{d8-d9}
   2c404:	add	sp, sp, #4
   2c408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c40c:	mov	r0, #1
   2c410:	sub	sp, fp, #48	; 0x30
   2c414:	vpop	{d8-d9}
   2c418:	add	sp, sp, #4
   2c41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c420:	mov	r0, #1
   2c424:	sub	sp, fp, #48	; 0x30
   2c428:	vpop	{d8-d9}
   2c42c:	add	sp, sp, #4
   2c430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c434:	mov	r0, #1
   2c438:	sub	sp, fp, #48	; 0x30
   2c43c:	vpop	{d8-d9}
   2c440:	add	sp, sp, #4
   2c444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c448:	mov	r0, #1
   2c44c:	sub	sp, fp, #48	; 0x30
   2c450:	vpop	{d8-d9}
   2c454:	add	sp, sp, #4
   2c458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c45c:	mov	r0, #1
   2c460:	sub	sp, fp, #48	; 0x30
   2c464:	vpop	{d8-d9}
   2c468:	add	sp, sp, #4
   2c46c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c470:	mov	r0, #1
   2c474:	sub	sp, fp, #48	; 0x30
   2c478:	vpop	{d8-d9}
   2c47c:	add	sp, sp, #4
   2c480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c484:	mov	r0, #1
   2c488:	sub	sp, fp, #48	; 0x30
   2c48c:	vpop	{d8-d9}
   2c490:	add	sp, sp, #4
   2c494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c498:	mov	r0, #1
   2c49c:	sub	sp, fp, #48	; 0x30
   2c4a0:	vpop	{d8-d9}
   2c4a4:	add	sp, sp, #4
   2c4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4ac:	mov	r0, #1
   2c4b0:	sub	sp, fp, #48	; 0x30
   2c4b4:	vpop	{d8-d9}
   2c4b8:	add	sp, sp, #4
   2c4bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4c0:	mov	r0, #1
   2c4c4:	sub	sp, fp, #48	; 0x30
   2c4c8:	vpop	{d8-d9}
   2c4cc:	add	sp, sp, #4
   2c4d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4d4:	mov	r0, #1
   2c4d8:	sub	sp, fp, #48	; 0x30
   2c4dc:	vpop	{d8-d9}
   2c4e0:	add	sp, sp, #4
   2c4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4e8:	mov	r0, #1
   2c4ec:	sub	sp, fp, #48	; 0x30
   2c4f0:	vpop	{d8-d9}
   2c4f4:	add	sp, sp, #4
   2c4f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4fc:	mov	r0, #1
   2c500:	sub	sp, fp, #48	; 0x30
   2c504:	vpop	{d8-d9}
   2c508:	add	sp, sp, #4
   2c50c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c510:	mov	r0, #1
   2c514:	sub	sp, fp, #48	; 0x30
   2c518:	vpop	{d8-d9}
   2c51c:	add	sp, sp, #4
   2c520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c524:	mov	r0, #1
   2c528:	sub	sp, fp, #48	; 0x30
   2c52c:	vpop	{d8-d9}
   2c530:	add	sp, sp, #4
   2c534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c538:	mov	r0, #1
   2c53c:	sub	sp, fp, #48	; 0x30
   2c540:	vpop	{d8-d9}
   2c544:	add	sp, sp, #4
   2c548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c54c:	mov	r0, #1
   2c550:	sub	sp, fp, #48	; 0x30
   2c554:	vpop	{d8-d9}
   2c558:	add	sp, sp, #4
   2c55c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c560:	mov	r0, #1
   2c564:	sub	sp, fp, #48	; 0x30
   2c568:	vpop	{d8-d9}
   2c56c:	add	sp, sp, #4
   2c570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c574:	mov	r0, #1
   2c578:	sub	sp, fp, #48	; 0x30
   2c57c:	vpop	{d8-d9}
   2c580:	add	sp, sp, #4
   2c584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c588:	mov	r0, #1
   2c58c:	sub	sp, fp, #48	; 0x30
   2c590:	vpop	{d8-d9}
   2c594:	add	sp, sp, #4
   2c598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c59c:	mov	r0, #1
   2c5a0:	sub	sp, fp, #48	; 0x30
   2c5a4:	vpop	{d8-d9}
   2c5a8:	add	sp, sp, #4
   2c5ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5b0:	mov	r0, #1
   2c5b4:	sub	sp, fp, #48	; 0x30
   2c5b8:	vpop	{d8-d9}
   2c5bc:	add	sp, sp, #4
   2c5c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5c4:	mov	r0, #1
   2c5c8:	sub	sp, fp, #48	; 0x30
   2c5cc:	vpop	{d8-d9}
   2c5d0:	add	sp, sp, #4
   2c5d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5d8:	mov	r0, #1
   2c5dc:	sub	sp, fp, #48	; 0x30
   2c5e0:	vpop	{d8-d9}
   2c5e4:	add	sp, sp, #4
   2c5e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5ec:	mov	r0, #1
   2c5f0:	sub	sp, fp, #48	; 0x30
   2c5f4:	vpop	{d8-d9}
   2c5f8:	add	sp, sp, #4
   2c5fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c600:	mov	r0, #1
   2c604:	sub	sp, fp, #48	; 0x30
   2c608:	vpop	{d8-d9}
   2c60c:	add	sp, sp, #4
   2c610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c614:	mov	r0, #1
   2c618:	sub	sp, fp, #48	; 0x30
   2c61c:	vpop	{d8-d9}
   2c620:	add	sp, sp, #4
   2c624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c628:	mov	r0, #1
   2c62c:	sub	sp, fp, #48	; 0x30
   2c630:	vpop	{d8-d9}
   2c634:	add	sp, sp, #4
   2c638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c63c:	mov	r0, #1
   2c640:	sub	sp, fp, #48	; 0x30
   2c644:	vpop	{d8-d9}
   2c648:	add	sp, sp, #4
   2c64c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c650:	mov	r0, #1
   2c654:	sub	sp, fp, #48	; 0x30
   2c658:	vpop	{d8-d9}
   2c65c:	add	sp, sp, #4
   2c660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c664:	mov	r0, #1
   2c668:	sub	sp, fp, #48	; 0x30
   2c66c:	vpop	{d8-d9}
   2c670:	add	sp, sp, #4
   2c674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c678:	mov	r0, #1
   2c67c:	sub	sp, fp, #48	; 0x30
   2c680:	vpop	{d8-d9}
   2c684:	add	sp, sp, #4
   2c688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c68c:	mov	r0, #1
   2c690:	sub	sp, fp, #48	; 0x30
   2c694:	vpop	{d8-d9}
   2c698:	add	sp, sp, #4
   2c69c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6a0:	mov	r0, #1
   2c6a4:	sub	sp, fp, #48	; 0x30
   2c6a8:	vpop	{d8-d9}
   2c6ac:	add	sp, sp, #4
   2c6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6b4:	mov	r0, #1
   2c6b8:	sub	sp, fp, #48	; 0x30
   2c6bc:	vpop	{d8-d9}
   2c6c0:	add	sp, sp, #4
   2c6c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6c8:	mov	r0, #1
   2c6cc:	sub	sp, fp, #48	; 0x30
   2c6d0:	vpop	{d8-d9}
   2c6d4:	add	sp, sp, #4
   2c6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6dc:	mov	r0, #1
   2c6e0:	sub	sp, fp, #48	; 0x30
   2c6e4:	vpop	{d8-d9}
   2c6e8:	add	sp, sp, #4
   2c6ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6f0:	mov	r0, #1
   2c6f4:	sub	sp, fp, #48	; 0x30
   2c6f8:	vpop	{d8-d9}
   2c6fc:	add	sp, sp, #4
   2c700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c708:	add	fp, sp, #28
   2c70c:	sub	sp, sp, #596	; 0x254
   2c710:	mov	r7, r0
   2c714:	movw	r0, #7009	; 0x1b61
   2c718:	mov	r6, r2
   2c71c:	mov	r5, r1
   2c720:	movt	r0, #5
   2c724:	bl	126b0 <getenv@plt>
   2c728:	bl	4a7b0 <__assert_fail@plt+0x37d34>
   2c72c:	cmp	r0, #0
   2c730:	beq	2c9d0 <__assert_fail@plt+0x19f54>
   2c734:	mov	r4, r0
   2c738:	cmp	r6, #0
   2c73c:	bne	2c74c <__assert_fail@plt+0x19cd0>
   2c740:	sub	r6, fp, #184	; 0xb8
   2c744:	mov	r0, r6
   2c748:	bl	4b8f8 <__assert_fail@plt+0x38e7c>
   2c74c:	add	r9, r5, #4
   2c750:	ldr	r5, [r6]
   2c754:	ldr	r0, [r6, #4]
   2c758:	str	r0, [sp, #48]	; 0x30
   2c75c:	ldrb	r0, [r9, #-4]
   2c760:	sub	r1, r0, #9
   2c764:	cmp	r1, #5
   2c768:	bcs	2c780 <__assert_fail@plt+0x19d04>
   2c76c:	add	r9, r9, #1
   2c770:	ldrb	r0, [r9, #-4]
   2c774:	sub	r1, r0, #9
   2c778:	cmp	r1, #5
   2c77c:	bcc	2c76c <__assert_fail@plt+0x19cf0>
   2c780:	cmp	r0, #32
   2c784:	beq	2c76c <__assert_fail@plt+0x19cf0>
   2c788:	sub	sl, fp, #240	; 0xf0
   2c78c:	vmov.i32	q8, #0	; 0x00000000
   2c790:	mov	r0, #52	; 0x34
   2c794:	mov	r2, #0
   2c798:	str	r7, [sp, #40]	; 0x28
   2c79c:	sub	r7, r9, #4
   2c7a0:	mov	r1, sl
   2c7a4:	add	r8, sl, #16
   2c7a8:	str	r2, [fp, #-192]	; 0xffffff40
   2c7ac:	vst1.64	{d16-d17}, [r1], r0
   2c7b0:	add	r0, sl, #32
   2c7b4:	vst1.64	{d16-d17}, [r8]
   2c7b8:	str	r2, [r1]
   2c7bc:	movw	r1, #7599	; 0x1daf
   2c7c0:	str	r0, [sp, #44]	; 0x2c
   2c7c4:	vst1.64	{d16-d17}, [r0]
   2c7c8:	mov	r0, #0
   2c7cc:	mov	r2, #4
   2c7d0:	str	r0, [sp, #60]	; 0x3c
   2c7d4:	movt	r1, #5
   2c7d8:	mov	r0, r7
   2c7dc:	bl	12a1c <strncmp@plt>
   2c7e0:	cmp	r0, #0
   2c7e4:	str	r4, [sp, #56]	; 0x38
   2c7e8:	beq	2c9e0 <__assert_fail@plt+0x19f64>
   2c7ec:	mov	r0, #0
   2c7f0:	mov	r3, r4
   2c7f4:	str	r0, [sp, #52]	; 0x34
   2c7f8:	sub	r2, fp, #284	; 0x11c
   2c7fc:	mov	r0, r3
   2c800:	mov	r1, r6
   2c804:	mov	r9, r3
   2c808:	bl	4a874 <__assert_fail@plt+0x37df8>
   2c80c:	cmp	r0, #0
   2c810:	beq	2cba8 <__assert_fail@plt+0x1a12c>
   2c814:	sub	r6, fp, #284	; 0x11c
   2c818:	ldrb	ip, [r7]
   2c81c:	mov	r1, r5
   2c820:	vmov.i32	q12, #0	; 0x00000000
   2c824:	add	lr, sp, #256	; 0x100
   2c828:	ldm	r6, {r0, r2, r3, r6}
   2c82c:	ldr	r4, [fp, #-264]	; 0xfffffef8
   2c830:	vld1.64	{d18-d19}, [r8]
   2c834:	str	r6, [sp, #176]	; 0xb0
   2c838:	str	r3, [sp, #184]	; 0xb8
   2c83c:	str	r2, [sp, #192]	; 0xc0
   2c840:	str	r0, [sp, #200]	; 0xc8
   2c844:	asr	r0, r6, #31
   2c848:	asr	r3, r3, #31
   2c84c:	asr	r2, r2, #31
   2c850:	str	r0, [sp, #180]	; 0xb4
   2c854:	ldr	r0, [fp, #-268]	; 0xfffffef4
   2c858:	add	r6, r0, #1
   2c85c:	movw	r0, #1900	; 0x76c
   2c860:	adds	r5, r4, r0
   2c864:	mov	r0, #0
   2c868:	str	r0, [sp, #160]	; 0xa0
   2c86c:	str	r5, [sp, #152]	; 0x98
   2c870:	str	r6, [sp, #168]	; 0xa8
   2c874:	str	r3, [sp, #188]	; 0xbc
   2c878:	str	r2, [sp, #196]	; 0xc4
   2c87c:	asr	r2, r4, #31
   2c880:	mov	r5, r1
   2c884:	ldr	r1, [sp, #48]	; 0x30
   2c888:	adc	r2, r2, #0
   2c88c:	cmp	ip, #0
   2c890:	str	r2, [sp, #156]	; 0x9c
   2c894:	asr	r2, r6, #31
   2c898:	add	r6, sp, #112	; 0x70
   2c89c:	str	r2, [sp, #172]	; 0xac
   2c8a0:	movw	r2, #55401	; 0xd869
   2c8a4:	movt	r2, #4
   2c8a8:	movne	r2, r7
   2c8ac:	add	r7, r6, #96	; 0x60
   2c8b0:	str	r2, [sp, #112]	; 0x70
   2c8b4:	mov	r2, #48	; 0x30
   2c8b8:	str	r1, [sp, #204]	; 0xcc
   2c8bc:	mov	r1, #2
   2c8c0:	vld1.64	{d16-d17}, [sl], r2
   2c8c4:	ldr	r2, [sp, #44]	; 0x2c
   2c8c8:	str	r1, [sp, #140]	; 0x8c
   2c8cc:	ldr	r1, [fp, #-252]	; 0xffffff04
   2c8d0:	vld1.64	{d20-d21}, [r2]
   2c8d4:	add	r2, r6, #112	; 0x70
   2c8d8:	vst1.64	{d16-d17}, [r7]
   2c8dc:	vldr	d22, [sl]
   2c8e0:	str	r1, [fp, #-44]	; 0xffffffd4
   2c8e4:	vst1.64	{d18-d19}, [r2]
   2c8e8:	add	r2, r6, #128	; 0x80
   2c8ec:	vst1.64	{d20-d21}, [r2]
   2c8f0:	add	r2, r6, #172	; 0xac
   2c8f4:	vst1.32	{d24-d25}, [r2]
   2c8f8:	add	r2, r6, #156	; 0x9c
   2c8fc:	vst1.32	{d24-d25}, [r2]
   2c900:	ldr	r2, [fp, #-244]	; 0xffffff0c
   2c904:	strh	r0, [lr, #8]
   2c908:	str	r2, [sp, #300]	; 0x12c
   2c90c:	movw	r2, #269	; 0x10d
   2c910:	str	r2, [sp, #304]	; 0x130
   2c914:	str	r1, [sp, #308]	; 0x134
   2c918:	str	r0, [sp, #312]	; 0x138
   2c91c:	add	r0, r5, #42752	; 0xa700
   2c920:	vstr	d22, [sp, #256]	; 0x100
   2c924:	add	r0, r0, #7733248	; 0x760000
   2c928:	cmp	r0, r5
   2c92c:	str	r0, [sp, #108]	; 0x6c
   2c930:	bvs	2cb2c <__assert_fail@plt+0x1a0b0>
   2c934:	add	r1, sp, #108	; 0x6c
   2c938:	add	r2, sp, #64	; 0x40
   2c93c:	mov	r0, r9
   2c940:	bl	4a874 <__assert_fail@plt+0x37df8>
   2c944:	cmp	r0, #0
   2c948:	ldrne	r0, [sp, #104]	; 0x68
   2c94c:	cmpne	r0, #0
   2c950:	bne	2ca5c <__assert_fail@plt+0x19fe0>
   2c954:	add	r0, r5, #19968	; 0x4e00
   2c958:	add	r0, r0, #15532032	; 0xed0000
   2c95c:	cmp	r0, r5
   2c960:	str	r0, [sp, #108]	; 0x6c
   2c964:	bvs	2cb2c <__assert_fail@plt+0x1a0b0>
   2c968:	add	r1, sp, #108	; 0x6c
   2c96c:	add	r2, sp, #64	; 0x40
   2c970:	mov	r0, r9
   2c974:	bl	4a874 <__assert_fail@plt+0x37df8>
   2c978:	cmp	r0, #0
   2c97c:	ldrne	r0, [sp, #104]	; 0x68
   2c980:	cmpne	r0, #0
   2c984:	bne	2cb04 <__assert_fail@plt+0x1a088>
   2c988:	movw	r0, #62720	; 0xf500
   2c98c:	movt	r0, #355	; 0x163
   2c990:	adds	r0, r5, r0
   2c994:	str	r0, [sp, #108]	; 0x6c
   2c998:	bvs	2cb2c <__assert_fail@plt+0x1a0b0>
   2c99c:	add	r1, sp, #108	; 0x6c
   2c9a0:	add	r2, sp, #64	; 0x40
   2c9a4:	mov	r0, r9
   2c9a8:	bl	4a874 <__assert_fail@plt+0x37df8>
   2c9ac:	cmp	r0, #0
   2c9b0:	ldrne	r0, [sp, #104]	; 0x68
   2c9b4:	cmpne	r0, #0
   2c9b8:	beq	2cb2c <__assert_fail@plt+0x1a0b0>
   2c9bc:	ldr	r1, [sp, #96]	; 0x60
   2c9c0:	ldr	r2, [sp, #308]	; 0x134
   2c9c4:	cmp	r1, r2
   2c9c8:	bne	2cb14 <__assert_fail@plt+0x1a098>
   2c9cc:	b	2cb2c <__assert_fail@plt+0x1a0b0>
   2c9d0:	mov	r6, #0
   2c9d4:	mov	r0, r6
   2c9d8:	sub	sp, fp, #28
   2c9dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c9e0:	mov	r0, #1
   2c9e4:	mov	r1, r9
   2c9e8:	ldrb	r2, [r1]
   2c9ec:	cmp	r2, #92	; 0x5c
   2c9f0:	bne	2ca0c <__assert_fail@plt+0x19f90>
   2c9f4:	b	2ca20 <__assert_fail@plt+0x19fa4>
   2c9f8:	add	r0, r0, #1
   2c9fc:	add	r1, r1, #1
   2ca00:	ldrb	r2, [r1]
   2ca04:	cmp	r2, #92	; 0x5c
   2ca08:	beq	2ca20 <__assert_fail@plt+0x19fa4>
   2ca0c:	cmp	r2, #0
   2ca10:	beq	2c7ec <__assert_fail@plt+0x19d70>
   2ca14:	cmp	r2, #34	; 0x22
   2ca18:	bne	2c9f8 <__assert_fail@plt+0x19f7c>
   2ca1c:	b	2ca34 <__assert_fail@plt+0x19fb8>
   2ca20:	ldrb	r2, [r1, #1]!
   2ca24:	cmp	r2, #34	; 0x22
   2ca28:	cmpne	r2, #92	; 0x5c
   2ca2c:	beq	2c9f8 <__assert_fail@plt+0x19f7c>
   2ca30:	b	2c7ec <__assert_fail@plt+0x19d70>
   2ca34:	cmp	r0, #101	; 0x65
   2ca38:	str	r5, [sp, #36]	; 0x24
   2ca3c:	bcc	2ca70 <__assert_fail@plt+0x19ff4>
   2ca40:	bl	35608 <__assert_fail@plt+0x22b8c>
   2ca44:	cmp	r0, #0
   2ca48:	mov	r5, r0
   2ca4c:	bne	2ca78 <__assert_fail@plt+0x19ffc>
   2ca50:	mov	r6, #0
   2ca54:	mov	r5, #0
   2ca58:	b	2cbc4 <__assert_fail@plt+0x1a148>
   2ca5c:	ldr	r1, [sp, #96]	; 0x60
   2ca60:	ldr	r2, [sp, #308]	; 0x134
   2ca64:	cmp	r1, r2
   2ca68:	beq	2c954 <__assert_fail@plt+0x19ed8>
   2ca6c:	b	2cb14 <__assert_fail@plt+0x1a098>
   2ca70:	mov	r5, #0
   2ca74:	sub	r0, fp, #176	; 0xb0
   2ca78:	ldrb	r2, [r9]
   2ca7c:	mov	r1, r0
   2ca80:	cmp	r2, #34	; 0x22
   2ca84:	beq	2caa8 <__assert_fail@plt+0x1a02c>
   2ca88:	uxtb	r2, r2
   2ca8c:	cmp	r2, #92	; 0x5c
   2ca90:	addeq	r9, r9, #1
   2ca94:	ldrb	r2, [r9]
   2ca98:	strb	r2, [r1], #1
   2ca9c:	ldrb	r2, [r9, #1]!
   2caa0:	cmp	r2, #34	; 0x22
   2caa4:	bne	2ca88 <__assert_fail@plt+0x1a00c>
   2caa8:	mov	r2, #0
   2caac:	strb	r2, [r1]
   2cab0:	bl	4a7b0 <__assert_fail@plt+0x37d34>
   2cab4:	cmp	r0, #0
   2cab8:	beq	2cafc <__assert_fail@plt+0x1a080>
   2cabc:	mov	r3, r0
   2cac0:	add	r7, r9, #1
   2cac4:	ldrb	r0, [r7]
   2cac8:	sub	r1, r0, #9
   2cacc:	cmp	r1, #5
   2cad0:	bcs	2cae8 <__assert_fail@plt+0x1a06c>
   2cad4:	add	r7, r7, #1
   2cad8:	ldrb	r0, [r7]
   2cadc:	sub	r1, r0, #9
   2cae0:	cmp	r1, #5
   2cae4:	bcc	2cad4 <__assert_fail@plt+0x1a058>
   2cae8:	cmp	r0, #32
   2caec:	beq	2cad4 <__assert_fail@plt+0x1a058>
   2caf0:	str	r5, [sp, #52]	; 0x34
   2caf4:	ldr	r5, [sp, #36]	; 0x24
   2caf8:	b	2c7f8 <__assert_fail@plt+0x19d7c>
   2cafc:	mov	r6, #0
   2cb00:	b	2cbc4 <__assert_fail@plt+0x1a148>
   2cb04:	ldr	r1, [sp, #96]	; 0x60
   2cb08:	ldr	r2, [sp, #308]	; 0x134
   2cb0c:	cmp	r1, r2
   2cb10:	beq	2c988 <__assert_fail@plt+0x19f0c>
   2cb14:	movw	r2, #269	; 0x10d
   2cb18:	str	r2, [sp, #316]	; 0x13c
   2cb1c:	str	r0, [sp, #312]	; 0x138
   2cb20:	mov	r0, #0
   2cb24:	str	r1, [sp, #320]	; 0x140
   2cb28:	str	r0, [sp, #324]	; 0x144
   2cb2c:	ldr	r0, [sp, #300]	; 0x12c
   2cb30:	cmp	r0, #0
   2cb34:	ldrne	r1, [sp, #312]	; 0x138
   2cb38:	cmpne	r1, #0
   2cb3c:	bne	2cb58 <__assert_fail@plt+0x1a0dc>
   2cb40:	add	r0, sp, #112	; 0x70
   2cb44:	bl	27864 <__assert_fail@plt+0x14de8>
   2cb48:	cmp	r0, #0
   2cb4c:	beq	2cb84 <__assert_fail@plt+0x1a108>
   2cb50:	mov	r0, #0
   2cb54:	b	2cba4 <__assert_fail@plt+0x1a128>
   2cb58:	bl	123d4 <strcmp@plt>
   2cb5c:	cmp	r0, #0
   2cb60:	bne	2cb40 <__assert_fail@plt+0x1a0c4>
   2cb64:	mov	r0, #0
   2cb68:	str	r0, [sp, #312]	; 0x138
   2cb6c:	mvn	r0, #0
   2cb70:	str	r0, [sp, #308]	; 0x134
   2cb74:	add	r0, sp, #112	; 0x70
   2cb78:	bl	27864 <__assert_fail@plt+0x14de8>
   2cb7c:	cmp	r0, #0
   2cb80:	bne	2cb50 <__assert_fail@plt+0x1a0d4>
   2cb84:	ldrb	r0, [sp, #264]	; 0x108
   2cb88:	cmp	r0, #0
   2cb8c:	beq	2cbe0 <__assert_fail@plt+0x1a164>
   2cb90:	add	r0, r6, #88	; 0x58
   2cb94:	ldr	r2, [sp, #40]	; 0x28
   2cb98:	ldrd	r0, [r0]
   2cb9c:	stm	r2, {r0, r1}
   2cba0:	mov	r0, #1
   2cba4:	str	r0, [sp, #60]	; 0x3c
   2cba8:	ldr	r4, [sp, #56]	; 0x38
   2cbac:	cmp	r9, r4
   2cbb0:	beq	2cbbc <__assert_fail@plt+0x1a140>
   2cbb4:	mov	r0, r9
   2cbb8:	bl	4a84c <__assert_fail@plt+0x37dd0>
   2cbbc:	ldr	r5, [sp, #52]	; 0x34
   2cbc0:	ldr	r6, [sp, #60]	; 0x3c
   2cbc4:	mov	r0, r5
   2cbc8:	bl	32c40 <__assert_fail@plt+0x201c4>
   2cbcc:	mov	r0, r4
   2cbd0:	bl	4a84c <__assert_fail@plt+0x37dd0>
   2cbd4:	mov	r0, r6
   2cbd8:	sub	sp, fp, #28
   2cbdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbe0:	mov	r0, #0
   2cbe4:	add	ip, sp, #268	; 0x10c
   2cbe8:	str	r0, [sp, #60]	; 0x3c
   2cbec:	ldm	ip, {r1, r2, ip}
   2cbf0:	ldr	r3, [sp, #288]	; 0x120
   2cbf4:	ldr	r5, [sp, #280]	; 0x118
   2cbf8:	add	r4, r3, ip
   2cbfc:	ldr	r3, [sp, #284]	; 0x11c
   2cc00:	orr	r2, r2, r1
   2cc04:	orr	lr, r2, r3
   2cc08:	orr	r5, lr, r5
   2cc0c:	orr	r5, r5, r4
   2cc10:	cmp	r5, #1
   2cc14:	bgt	2cba8 <__assert_fail@plt+0x1a12c>
   2cc18:	add	r5, r6, #40	; 0x28
   2cc1c:	mvn	sl, #0
   2cc20:	ldrd	r4, [r5]
   2cc24:	cmp	r5, #0
   2cc28:	blt	2cc84 <__assert_fail@plt+0x1a208>
   2cc2c:	add	r0, r6, #48	; 0x30
   2cc30:	ldr	r0, [r0]
   2cc34:	cmp	r0, #2
   2cc38:	bne	2cc68 <__assert_fail@plt+0x1a1ec>
   2cc3c:	subs	r1, r4, #69	; 0x45
   2cc40:	mov	r0, #0
   2cc44:	sbcs	r1, r5, #0
   2cc48:	movwlt	r0, #1
   2cc4c:	movw	r1, #1900	; 0x76c
   2cc50:	cmp	r0, #0
   2cc54:	movwne	r1, #2000	; 0x7d0
   2cc58:	adds	r4, r1, r4
   2cc5c:	adc	r5, r5, #0
   2cc60:	cmn	r5, #1
   2cc64:	ble	2cc84 <__assert_fail@plt+0x1a208>
   2cc68:	movw	r0, #1900	; 0x76c
   2cc6c:	subs	r8, r4, r0
   2cc70:	sbc	r0, r5, #0
   2cc74:	str	r8, [fp, #-56]	; 0xffffffc8
   2cc78:	teq	r0, r8, asr #31
   2cc7c:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2cc80:	b	2cca0 <__assert_fail@plt+0x1a224>
   2cc84:	movw	r0, #63636	; 0xf894
   2cc88:	movt	r0, #65535	; 0xffff
   2cc8c:	subs	r8, r0, r4
   2cc90:	str	r8, [fp, #-56]	; 0xffffffc8
   2cc94:	sbc	r0, sl, r5
   2cc98:	teq	r0, r8, asr #31
   2cc9c:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2cca0:	add	r0, r6, #56	; 0x38
   2cca4:	mov	r4, #0
   2cca8:	ldrd	r0, [r0]
   2ccac:	str	r4, [sp, #60]	; 0x3c
   2ccb0:	mov	r4, #0
   2ccb4:	cmn	r1, #1
   2ccb8:	movwgt	r4, #1
   2ccbc:	subs	sl, r0, #1
   2ccc0:	mov	r0, #0
   2ccc4:	sbc	r5, r1, #0
   2ccc8:	str	sl, [fp, #-60]	; 0xffffffc4
   2cccc:	cmn	r5, #1
   2ccd0:	movwgt	r0, #1
   2ccd4:	subs	r0, r4, r0
   2ccd8:	movwne	r0, #1
   2ccdc:	cmp	r1, #0
   2cce0:	mov	r1, #0
   2cce4:	movwlt	r1, #1
   2cce8:	tst	r1, r0
   2ccec:	asreq	r0, sl, #31
   2ccf0:	eoreq	r1, sl, sl
   2ccf4:	eoreq	r0, r5, r0
   2ccf8:	orrseq	r0, r1, r0
   2ccfc:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2cd00:	add	r0, r6, #64	; 0x40
   2cd04:	ldr	r5, [r0]
   2cd08:	ldr	r1, [r0, #4]
   2cd0c:	teq	r1, r5, asr #31
   2cd10:	str	r5, [fp, #-64]	; 0xffffffc0
   2cd14:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2cd18:	cmp	r3, #0
   2cd1c:	str	sl, [sp, #48]	; 0x30
   2cd20:	bne	2cd38 <__assert_fail@plt+0x1a2bc>
   2cd24:	cmp	r2, #0
   2cd28:	bne	2cdf8 <__assert_fail@plt+0x1a37c>
   2cd2c:	ldrb	r0, [sp, #265]	; 0x109
   2cd30:	cmp	r0, #0
   2cd34:	beq	2cdf8 <__assert_fail@plt+0x1a37c>
   2cd38:	add	r0, r6, #72	; 0x48
   2cd3c:	mvn	sl, #0
   2cd40:	ldr	r4, [r0]
   2cd44:	ldr	r3, [r0, #4]
   2cd48:	ldr	r2, [sp, #140]	; 0x8c
   2cd4c:	cmp	r2, #0
   2cd50:	beq	2cd94 <__assert_fail@plt+0x1a318>
   2cd54:	cmp	r2, #1
   2cd58:	bne	2cdc4 <__assert_fail@plt+0x1a348>
   2cd5c:	eor	r0, r4, #12
   2cd60:	orrs	r0, r0, r3
   2cd64:	mvn	r0, #0
   2cd68:	movweq	r0, #12
   2cd6c:	subs	r1, r4, #1
   2cd70:	sbc	r2, r3, #0
   2cd74:	subs	r1, r1, #11
   2cd78:	sbcs	r1, r2, #0
   2cd7c:	addcc	r0, r4, #12
   2cd80:	mov	r4, r0
   2cd84:	cmp	r4, #0
   2cd88:	str	r4, [fp, #-68]	; 0xffffffbc
   2cd8c:	bge	2cddc <__assert_fail@plt+0x1a360>
   2cd90:	b	2cba8 <__assert_fail@plt+0x1a12c>
   2cd94:	eor	r0, r4, #12
   2cd98:	orrs	r0, r0, r3
   2cd9c:	mvnne	r0, #0
   2cda0:	subs	r1, r4, #1
   2cda4:	sbc	r2, r3, #0
   2cda8:	subs	r1, r1, #11
   2cdac:	sbcs	r1, r2, #0
   2cdb0:	movcs	r4, r0
   2cdb4:	cmp	r4, #0
   2cdb8:	str	r4, [fp, #-68]	; 0xffffffbc
   2cdbc:	bge	2cddc <__assert_fail@plt+0x1a360>
   2cdc0:	b	2cba8 <__assert_fail@plt+0x1a12c>
   2cdc4:	subs	r0, r4, #24
   2cdc8:	sbcs	r0, r3, #0
   2cdcc:	mvncs	r4, #0
   2cdd0:	cmp	r4, #0
   2cdd4:	str	r4, [fp, #-68]	; 0xffffffbc
   2cdd8:	blt	2cba8 <__assert_fail@plt+0x1a12c>
   2cddc:	add	r0, r6, #80	; 0x50
   2cde0:	str	r5, [sp, #44]	; 0x2c
   2cde4:	ldr	r6, [sp, #200]	; 0xc8
   2cde8:	ldr	r5, [r0]
   2cdec:	str	r6, [fp, #-76]	; 0xffffffb4
   2cdf0:	str	r5, [fp, #-72]	; 0xffffffb8
   2cdf4:	b	2ce1c <__assert_fail@plt+0x1a3a0>
   2cdf8:	mov	r4, #0
   2cdfc:	str	r5, [sp, #44]	; 0x2c
   2ce00:	mov	r5, #0
   2ce04:	mov	r6, #0
   2ce08:	mvn	sl, #0
   2ce0c:	str	r4, [fp, #-72]	; 0xffffffb8
   2ce10:	str	r4, [fp, #-76]	; 0xffffffb4
   2ce14:	str	r4, [fp, #-68]	; 0xffffffbc
   2ce18:	str	r4, [sp, #204]	; 0xcc
   2ce1c:	cmp	lr, #0
   2ce20:	mvnne	r0, #0
   2ce24:	strne	r0, [fp, #-44]	; 0xffffffd4
   2ce28:	cmp	ip, #0
   2ce2c:	beq	2ce40 <__assert_fail@plt+0x1a3c4>
   2ce30:	ldr	r0, [sp, #132]	; 0x84
   2ce34:	str	r0, [sp, #32]
   2ce38:	str	r0, [fp, #-44]	; 0xffffffd4
   2ce3c:	b	2ce48 <__assert_fail@plt+0x1a3cc>
   2ce40:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2ce44:	str	r0, [sp, #32]
   2ce48:	mvn	r1, #0
   2ce4c:	mov	r0, r9
   2ce50:	str	r1, [fp, #-52]	; 0xffffffcc
   2ce54:	sub	r1, fp, #76	; 0x4c
   2ce58:	bl	4ad20 <__assert_fail@plt+0x382a4>
   2ce5c:	mov	lr, r0
   2ce60:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2ce64:	str	r4, [sp, #36]	; 0x24
   2ce68:	cmp	r0, #0
   2ce6c:	blt	2ceb8 <__assert_fail@plt+0x1a43c>
   2ce70:	sub	r3, fp, #76	; 0x4c
   2ce74:	ldm	r3, {r0, r1, r2, r3}
   2ce78:	eor	r0, r0, r6
   2ce7c:	eor	r1, r1, r5
   2ce80:	orr	r0, r1, r0
   2ce84:	eor	r1, r2, r4
   2ce88:	ldr	r2, [sp, #48]	; 0x30
   2ce8c:	orr	r0, r0, r1
   2ce90:	ldr	r1, [sp, #44]	; 0x2c
   2ce94:	eor	r1, r3, r1
   2ce98:	orr	r0, r0, r1
   2ce9c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2cea0:	eor	r1, r1, r2
   2cea4:	orr	r0, r0, r1
   2cea8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2ceac:	eor	r1, r1, r8
   2ceb0:	orrs	r0, r0, r1
   2ceb4:	beq	2d0dc <__assert_fail@plt+0x1a660>
   2ceb8:	ldr	r0, [sp, #288]	; 0x120
   2cebc:	cmp	r0, #0
   2cec0:	beq	2cba8 <__assert_fail@plt+0x1a12c>
   2cec4:	mov	r0, #88	; 0x58
   2cec8:	ldr	r4, [sp, #136]	; 0x88
   2cecc:	mov	sl, r5
   2ced0:	str	r6, [sp, #28]
   2ced4:	mov	r2, #43	; 0x2b
   2ced8:	strb	r0, [sp, #66]	; 0x42
   2cedc:	movw	r0, #22616	; 0x5858
   2cee0:	strh	r0, [sp, #64]	; 0x40
   2cee4:	movw	r0, #46021	; 0xb3c5
   2cee8:	movt	r0, #37282	; 0x91a2
   2ceec:	smmla	r0, r4, r0, r4
   2cef0:	asr	r1, r0, #11
   2cef4:	add	r5, r1, r0, lsr #31
   2cef8:	add	r0, sp, #64	; 0x40
   2cefc:	movw	r1, #7012	; 0x1b64
   2cf00:	cmp	r5, #0
   2cf04:	mov	r3, r5
   2cf08:	add	r6, r0, #3
   2cf0c:	movt	r1, #5
   2cf10:	rsbmi	r3, r5, #0
   2cf14:	cmp	r4, #0
   2cf18:	mov	r0, r6
   2cf1c:	movwlt	r2, #45	; 0x2d
   2cf20:	bl	12938 <sprintf@plt>
   2cf24:	mov	r1, #3600	; 0xe10
   2cf28:	mls	r2, r5, r1, r4
   2cf2c:	ldr	r4, [sp, #36]	; 0x24
   2cf30:	cmp	r2, #0
   2cf34:	mov	r1, r2
   2cf38:	rsbmi	r1, r2, #0
   2cf3c:	cmp	r2, #0
   2cf40:	beq	2cfe4 <__assert_fail@plt+0x1a568>
   2cf44:	movw	r2, #33205	; 0x81b5
   2cf48:	mov	lr, #48	; 0x30
   2cf4c:	add	r5, r6, r0
   2cf50:	mov	ip, #58	; 0x3a
   2cf54:	movt	r2, #6990	; 0x1b4e
   2cf58:	strb	ip, [r5]
   2cf5c:	umull	r2, r3, r1, r2
   2cf60:	add	r3, lr, r3, lsr #6
   2cf64:	strb	r3, [r5, #1]
   2cf68:	movw	r3, #34953	; 0x8889
   2cf6c:	movt	r3, #34952	; 0x8888
   2cf70:	umull	r3, r6, r1, r3
   2cf74:	movw	r3, #52429	; 0xcccd
   2cf78:	lsr	r4, r6, #5
   2cf7c:	movt	r3, #52428	; 0xcccc
   2cf80:	umull	r0, r2, r4, r3
   2cf84:	lsr	r0, r2, #3
   2cf88:	add	r0, r0, r0, lsl #2
   2cf8c:	sub	r0, r4, r0, lsl #1
   2cf90:	orr	r0, r0, #48	; 0x30
   2cf94:	strb	r0, [r5, #2]
   2cf98:	lsl	r0, r4, #4
   2cf9c:	sub	r0, r0, r6, lsr #5
   2cfa0:	sub	r6, r1, r0, lsl #2
   2cfa4:	add	r1, r5, #3
   2cfa8:	cmp	r6, #0
   2cfac:	beq	2cfd8 <__assert_fail@plt+0x1a55c>
   2cfb0:	umull	r0, r2, r6, r3
   2cfb4:	strb	ip, [r1]
   2cfb8:	orr	r0, lr, r2, lsr #3
   2cfbc:	strb	r0, [r1, #1]
   2cfc0:	lsr	r0, r2, #3
   2cfc4:	add	r0, r0, r0, lsl #2
   2cfc8:	sub	r0, r6, r0, lsl #1
   2cfcc:	orr	r0, r0, #48	; 0x30
   2cfd0:	strb	r0, [r1, #2]
   2cfd4:	add	r1, r1, #3
   2cfd8:	ldr	r4, [sp, #36]	; 0x24
   2cfdc:	mov	r0, #0
   2cfe0:	strb	r0, [r1]
   2cfe4:	add	r0, sp, #64	; 0x40
   2cfe8:	bl	4a7b0 <__assert_fail@plt+0x37d34>
   2cfec:	cmp	r0, #0
   2cff0:	beq	2cba8 <__assert_fail@plt+0x1a12c>
   2cff4:	mov	r6, r0
   2cff8:	mov	r5, sl
   2cffc:	str	sl, [fp, #-72]	; 0xffffffb8
   2d000:	ldr	sl, [sp, #28]
   2d004:	ldr	r0, [sp, #44]	; 0x2c
   2d008:	sub	r1, fp, #76	; 0x4c
   2d00c:	str	sl, [fp, #-76]	; 0xffffffb4
   2d010:	str	r4, [fp, #-68]	; 0xffffffbc
   2d014:	str	r0, [fp, #-64]	; 0xffffffc0
   2d018:	ldr	r4, [sp, #48]	; 0x30
   2d01c:	ldr	r0, [sp, #32]
   2d020:	str	r4, [fp, #-60]	; 0xffffffc4
   2d024:	str	r8, [fp, #-56]	; 0xffffffc8
   2d028:	str	r0, [fp, #-44]	; 0xffffffd4
   2d02c:	mvn	r0, #0
   2d030:	str	r0, [fp, #-52]	; 0xffffffcc
   2d034:	mov	r0, r6
   2d038:	bl	4ad20 <__assert_fail@plt+0x382a4>
   2d03c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2d040:	cmn	r1, #1
   2d044:	ble	2d130 <__assert_fail@plt+0x1a6b4>
   2d048:	str	r0, [sp, #4]
   2d04c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   2d050:	ldr	r4, [fp, #-76]	; 0xffffffb4
   2d054:	str	r0, [sp, #24]
   2d058:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2d05c:	str	r0, [sp, #20]
   2d060:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2d064:	str	r0, [sp, #8]
   2d068:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2d06c:	str	r0, [sp, #12]
   2d070:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2d074:	str	r0, [sp, #16]
   2d078:	mov	r0, r6
   2d07c:	bl	4a84c <__assert_fail@plt+0x37dd0>
   2d080:	ldr	r1, [sp, #8]
   2d084:	eor	r0, r4, sl
   2d088:	ldr	r2, [sp, #12]
   2d08c:	eor	r1, r1, r5
   2d090:	orr	r0, r1, r0
   2d094:	ldr	r1, [sp, #36]	; 0x24
   2d098:	eor	r1, r2, r1
   2d09c:	ldr	r2, [sp, #16]
   2d0a0:	orr	r0, r0, r1
   2d0a4:	ldr	r1, [sp, #44]	; 0x2c
   2d0a8:	eor	r1, r2, r1
   2d0ac:	ldr	r2, [sp, #48]	; 0x30
   2d0b0:	orr	r0, r0, r1
   2d0b4:	ldr	r1, [sp, #20]
   2d0b8:	eor	r1, r1, r2
   2d0bc:	orr	r0, r0, r1
   2d0c0:	ldr	r1, [sp, #24]
   2d0c4:	eor	r1, r1, r8
   2d0c8:	orrs	r0, r0, r1
   2d0cc:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d0d0:	ldr	lr, [sp, #4]
   2d0d4:	mov	r6, sl
   2d0d8:	mvn	sl, #0
   2d0dc:	ldr	r0, [sp, #272]	; 0x110
   2d0e0:	mov	r8, r5
   2d0e4:	str	r6, [sp, #28]
   2d0e8:	cmp	r0, #0
   2d0ec:	beq	2d388 <__assert_fail@plt+0x1a90c>
   2d0f0:	ldr	r0, [sp, #268]	; 0x10c
   2d0f4:	cmp	r0, #0
   2d0f8:	bne	2d388 <__assert_fail@plt+0x1a90c>
   2d0fc:	ldr	r5, [sp, #120]	; 0x78
   2d100:	ldr	r4, [sp, #124]	; 0x7c
   2d104:	subs	r0, r5, #1
   2d108:	sbcs	r0, r4, #0
   2d10c:	blt	2d148 <__assert_fail@plt+0x1a6cc>
   2d110:	ldr	r0, [sp, #128]	; 0x80
   2d114:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2d118:	subs	r0, r1, r0
   2d11c:	movwne	r0, #1
   2d120:	subs	r0, r5, r0
   2d124:	sbcs	r0, r4, #0
   2d128:	blt	2d158 <__assert_fail@plt+0x1a6dc>
   2d12c:	b	2d178 <__assert_fail@plt+0x1a6fc>
   2d130:	mov	r0, r6
   2d134:	bl	4a84c <__assert_fail@plt+0x37dd0>
   2d138:	ldr	r4, [sp, #56]	; 0x38
   2d13c:	cmp	r9, r4
   2d140:	bne	2cbb4 <__assert_fail@plt+0x1a138>
   2d144:	b	2cbbc <__assert_fail@plt+0x1a140>
   2d148:	mov	r0, #0
   2d14c:	subs	r0, r5, r0
   2d150:	sbcs	r0, r4, #0
   2d154:	bge	2d178 <__assert_fail@plt+0x1a6fc>
   2d158:	subs	r0, r5, #1
   2d15c:	sbcs	r0, r4, #0
   2d160:	blt	2d19c <__assert_fail@plt+0x1a720>
   2d164:	ldr	r0, [sp, #128]	; 0x80
   2d168:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2d16c:	subs	r0, r1, r0
   2d170:	movwne	r0, #1
   2d174:	b	2d1a0 <__assert_fail@plt+0x1a724>
   2d178:	subs	r0, r5, #1
   2d17c:	mov	r2, #0
   2d180:	sbcs	r0, r4, #0
   2d184:	blt	2d1e0 <__assert_fail@plt+0x1a764>
   2d188:	ldr	r0, [sp, #128]	; 0x80
   2d18c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2d190:	subs	r0, r1, r0
   2d194:	movwne	r0, #1
   2d198:	b	2d1e4 <__assert_fail@plt+0x1a768>
   2d19c:	mov	r0, #0
   2d1a0:	subs	r0, r5, r0
   2d1a4:	sbc	r1, r4, #0
   2d1a8:	eor	r0, r0, sl
   2d1ac:	eor	r1, r1, sl
   2d1b0:	orrs	r0, r0, r1
   2d1b4:	beq	2d238 <__assert_fail@plt+0x1a7bc>
   2d1b8:	mov	r0, #0
   2d1bc:	str	r0, [sp, #60]	; 0x3c
   2d1c0:	subs	r0, r5, #1
   2d1c4:	sbcs	r0, r4, #0
   2d1c8:	blt	2d210 <__assert_fail@plt+0x1a794>
   2d1cc:	ldr	r0, [sp, #128]	; 0x80
   2d1d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2d1d4:	subs	r0, r1, r0
   2d1d8:	movwne	r0, #1
   2d1dc:	b	2d214 <__assert_fail@plt+0x1a798>
   2d1e0:	mov	r0, #0
   2d1e4:	movw	r3, #37449	; 0x9249
   2d1e8:	subs	r0, r5, r0
   2d1ec:	str	r2, [sp, #60]	; 0x3c
   2d1f0:	sbc	r1, r4, r2
   2d1f4:	movw	r2, #9362	; 0x2492
   2d1f8:	movt	r3, #18724	; 0x4924
   2d1fc:	movt	r2, #4681	; 0x1249
   2d200:	subs	r0, r3, r0
   2d204:	sbcs	r0, r2, r1
   2d208:	blt	2cba8 <__assert_fail@plt+0x1a12c>
   2d20c:	b	2d238 <__assert_fail@plt+0x1a7bc>
   2d210:	mov	r0, #0
   2d214:	subs	r2, r5, r0
   2d218:	ldr	r0, [sp, #60]	; 0x3c
   2d21c:	mov	r1, #-2147483648	; 0x80000000
   2d220:	sbc	r3, r4, r0
   2d224:	mov	r0, #0
   2d228:	bl	4c144 <__assert_fail@plt+0x396c8>
   2d22c:	subs	r0, r0, #7
   2d230:	sbcs	r0, r1, #0
   2d234:	blt	2cba8 <__assert_fail@plt+0x1a12c>
   2d238:	rsbs	r0, r5, #0
   2d23c:	rscs	r0, r4, #0
   2d240:	bge	2d258 <__assert_fail@plt+0x1a7dc>
   2d244:	ldr	r0, [sp, #128]	; 0x80
   2d248:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2d24c:	subs	r2, r1, r0
   2d250:	movwne	r2, #1
   2d254:	b	2d264 <__assert_fail@plt+0x1a7e8>
   2d258:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2d25c:	ldr	r0, [sp, #128]	; 0x80
   2d260:	mov	r2, #0
   2d264:	rsb	r1, r1, #7
   2d268:	mov	r3, #0
   2d26c:	subs	r2, r5, r2
   2d270:	mov	r6, #7
   2d274:	add	r0, r1, r0
   2d278:	movw	r1, #9363	; 0x2493
   2d27c:	sbc	r3, r4, r3
   2d280:	umull	r2, r6, r2, r6
   2d284:	movt	r1, #37449	; 0x9249
   2d288:	rsb	r3, r3, r3, lsl #3
   2d28c:	smmla	r1, r0, r1, r0
   2d290:	add	r3, r6, r3
   2d294:	asr	r6, r1, #2
   2d298:	add	r1, r6, r1, lsr #31
   2d29c:	sub	r1, r1, r1, lsl #3
   2d2a0:	add	r0, r0, r1
   2d2a4:	adds	r1, r0, r2
   2d2a8:	asr	r6, r0, #31
   2d2ac:	mov	r2, #0
   2d2b0:	adc	r0, r6, r3
   2d2b4:	str	r2, [sp, #60]	; 0x3c
   2d2b8:	mov	r2, #0
   2d2bc:	cmn	r0, #1
   2d2c0:	movwgt	r2, #1
   2d2c4:	cmn	r6, #1
   2d2c8:	mov	r6, #0
   2d2cc:	movwgt	r6, #1
   2d2d0:	subs	r2, r6, r2
   2d2d4:	movwne	r2, #1
   2d2d8:	cmn	r3, #1
   2d2dc:	mov	r3, #0
   2d2e0:	movwgt	r3, #1
   2d2e4:	sub	r3, r6, r3
   2d2e8:	clz	r3, r3
   2d2ec:	lsr	r3, r3, #5
   2d2f0:	ands	r2, r3, r2
   2d2f4:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d2f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2d2fc:	mov	r2, #0
   2d300:	cmn	r0, #1
   2d304:	mov	r6, #0
   2d308:	str	r2, [sp, #60]	; 0x3c
   2d30c:	mov	r2, #0
   2d310:	movwgt	r2, #1
   2d314:	adds	r1, r1, r3
   2d318:	adc	r0, r0, r3, asr #31
   2d31c:	asr	r3, r3, #31
   2d320:	str	r1, [fp, #-64]	; 0xffffffc0
   2d324:	cmn	r0, #1
   2d328:	movwgt	r6, #1
   2d32c:	subs	r6, r2, r6
   2d330:	movwne	r6, #1
   2d334:	cmn	r3, #1
   2d338:	mov	r3, #0
   2d33c:	movwgt	r3, #1
   2d340:	sub	r2, r2, r3
   2d344:	clz	r2, r2
   2d348:	lsr	r2, r2, #5
   2d34c:	tst	r2, r6
   2d350:	asreq	r2, r1, #31
   2d354:	eoreq	r1, r1, r1
   2d358:	eoreq	r0, r0, r2
   2d35c:	orrseq	r0, r1, r0
   2d360:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d364:	mvn	r0, #0
   2d368:	sub	r1, fp, #76	; 0x4c
   2d36c:	str	r0, [fp, #-44]	; 0xffffffd4
   2d370:	mov	r0, r9
   2d374:	bl	4ad20 <__assert_fail@plt+0x382a4>
   2d378:	mov	lr, r0
   2d37c:	cmn	r0, #1
   2d380:	mvn	sl, #0
   2d384:	beq	2cba8 <__assert_fail@plt+0x1a12c>
   2d388:	ldrd	r4, [r7]
   2d38c:	ldr	r7, [sp, #216]	; 0xd8
   2d390:	ldr	r3, [sp, #220]	; 0xdc
   2d394:	ldr	ip, [sp, #224]	; 0xe0
   2d398:	ldr	r0, [sp, #228]	; 0xe4
   2d39c:	orr	r1, r3, r5
   2d3a0:	orr	r6, r7, r4
   2d3a4:	orr	r1, r1, r0
   2d3a8:	orr	r6, r6, ip
   2d3ac:	orrs	r1, r6, r1
   2d3b0:	beq	2d530 <__assert_fail@plt+0x1aab4>
   2d3b4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2d3b8:	mov	r2, #0
   2d3bc:	str	r2, [sp, #60]	; 0x3c
   2d3c0:	mov	r2, #0
   2d3c4:	asr	r6, r1, #31
   2d3c8:	cmn	r6, #1
   2d3cc:	movwgt	r2, #1
   2d3d0:	adds	r1, r1, r4
   2d3d4:	mov	r4, #0
   2d3d8:	adc	r6, r6, r5
   2d3dc:	cmn	r6, #1
   2d3e0:	movwgt	r4, #1
   2d3e4:	subs	r4, r2, r4
   2d3e8:	movwne	r4, #1
   2d3ec:	cmn	r5, #1
   2d3f0:	mov	r5, #0
   2d3f4:	movwgt	r5, #1
   2d3f8:	sub	r2, r2, r5
   2d3fc:	clz	r2, r2
   2d400:	lsr	r2, r2, #5
   2d404:	tst	r2, r4
   2d408:	asreq	r2, r1, #31
   2d40c:	eoreq	r5, r1, r1
   2d410:	eoreq	r2, r6, r2
   2d414:	orrseq	r2, r5, r2
   2d418:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d41c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   2d420:	mov	r5, #0
   2d424:	str	r5, [sp, #60]	; 0x3c
   2d428:	mov	r5, #0
   2d42c:	asr	r6, r2, #31
   2d430:	cmn	r6, #1
   2d434:	movwgt	r5, #1
   2d438:	adds	r7, r2, r7
   2d43c:	mov	r2, #0
   2d440:	adc	r6, r6, r3
   2d444:	cmn	r6, #1
   2d448:	movwgt	r2, #1
   2d44c:	subs	r2, r5, r2
   2d450:	movwne	r2, #1
   2d454:	cmn	r3, #1
   2d458:	mov	r3, #0
   2d45c:	movwgt	r3, #1
   2d460:	sub	r3, r5, r3
   2d464:	clz	r3, r3
   2d468:	lsr	r3, r3, #5
   2d46c:	tst	r3, r2
   2d470:	asreq	r2, r7, #31
   2d474:	eoreq	r3, r7, r7
   2d478:	eoreq	r2, r6, r2
   2d47c:	orrseq	r2, r3, r2
   2d480:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d484:	ldr	r2, [fp, #-64]	; 0xffffffc0
   2d488:	mov	r6, #0
   2d48c:	mov	r5, #0
   2d490:	str	r6, [sp, #60]	; 0x3c
   2d494:	mov	r6, #0
   2d498:	asr	r3, r2, #31
   2d49c:	cmn	r3, #1
   2d4a0:	movwgt	r6, #1
   2d4a4:	adds	r2, r2, ip
   2d4a8:	adc	r3, r3, r0
   2d4ac:	cmn	r3, #1
   2d4b0:	movwgt	r5, #1
   2d4b4:	subs	r5, r6, r5
   2d4b8:	movwne	r5, #1
   2d4bc:	cmn	r0, #1
   2d4c0:	mov	r0, #0
   2d4c4:	movwgt	r0, #1
   2d4c8:	sub	r0, r6, r0
   2d4cc:	clz	r0, r0
   2d4d0:	lsr	r0, r0, #5
   2d4d4:	tst	r0, r5
   2d4d8:	asreq	r0, r2, #31
   2d4dc:	eoreq	r6, r2, r2
   2d4e0:	eoreq	r0, r3, r0
   2d4e4:	orrseq	r0, r6, r0
   2d4e8:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d4ec:	ldr	r0, [sp, #36]	; 0x24
   2d4f0:	str	r7, [fp, #-60]	; 0xffffffc4
   2d4f4:	str	r1, [fp, #-56]	; 0xffffffc8
   2d4f8:	str	r2, [fp, #-64]	; 0xffffffc0
   2d4fc:	sub	r1, fp, #76	; 0x4c
   2d500:	str	r0, [fp, #-68]	; 0xffffffbc
   2d504:	ldr	r0, [sp, #28]
   2d508:	str	r8, [fp, #-72]	; 0xffffffb8
   2d50c:	str	r0, [fp, #-76]	; 0xffffffb4
   2d510:	ldr	r0, [sp, #32]
   2d514:	str	r0, [fp, #-44]	; 0xffffffd4
   2d518:	mov	r0, r9
   2d51c:	bl	4ad20 <__assert_fail@plt+0x382a4>
   2d520:	mov	lr, r0
   2d524:	cmn	r0, #1
   2d528:	mvn	sl, #0
   2d52c:	beq	2cba8 <__assert_fail@plt+0x1a12c>
   2d530:	ldr	r0, [sp, #288]	; 0x120
   2d534:	cmp	r0, #0
   2d538:	beq	2d56c <__assert_fail@plt+0x1aaf0>
   2d53c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2d540:	ldr	r2, [sp, #136]	; 0x88
   2d544:	asr	r1, r0, #31
   2d548:	subs	r0, r0, r2
   2d54c:	sbc	r1, r1, r2, asr #31
   2d550:	adds	r4, r0, lr
   2d554:	adc	r0, r1, lr, asr #31
   2d558:	teq	r0, r4, asr #31
   2d55c:	mov	r0, #0
   2d560:	str	r0, [sp, #60]	; 0x3c
   2d564:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d568:	b	2d570 <__assert_fail@plt+0x1aaf4>
   2d56c:	mov	r4, lr
   2d570:	ldr	r1, [sp, #232]	; 0xe8
   2d574:	ldr	r0, [sp, #204]	; 0xcc
   2d578:	movw	r8, #51712	; 0xca00
   2d57c:	ldr	r5, [sp, #236]	; 0xec
   2d580:	mov	r3, #0
   2d584:	movt	r8, #15258	; 0x3b9a
   2d588:	str	r1, [sp, #48]	; 0x30
   2d58c:	ldr	r1, [sp, #256]	; 0x100
   2d590:	asr	r2, r1, #31
   2d594:	adds	r7, r1, r0
   2d598:	adc	r6, r2, r0, asr #31
   2d59c:	mov	r0, #0
   2d5a0:	mov	r2, r8
   2d5a4:	str	r0, [sp, #60]	; 0x3c
   2d5a8:	mov	r0, r7
   2d5ac:	mov	r1, r6
   2d5b0:	bl	4c144 <__assert_fail@plt+0x396c8>
   2d5b4:	adds	r0, r2, r8
   2d5b8:	mov	r2, r8
   2d5bc:	adc	r1, r3, #0
   2d5c0:	mov	r3, #0
   2d5c4:	bl	4c144 <__assert_fail@plt+0x396c8>
   2d5c8:	subs	r0, r7, r2
   2d5cc:	str	r2, [sp, #32]
   2d5d0:	mov	r3, #0
   2d5d4:	sbc	r1, r6, r2, asr #31
   2d5d8:	mov	r2, r8
   2d5dc:	bl	4c144 <__assert_fail@plt+0x396c8>
   2d5e0:	cmn	r5, #1
   2d5e4:	str	r0, [sp, #36]	; 0x24
   2d5e8:	str	r1, [sp, #44]	; 0x2c
   2d5ec:	ble	2d614 <__assert_fail@plt+0x1ab98>
   2d5f0:	ldr	r6, [sp, #48]	; 0x30
   2d5f4:	movw	r1, #24175	; 0x5e6f
   2d5f8:	movw	r0, #6699	; 0x1a2b
   2d5fc:	movt	r1, #15437	; 0x3c4d
   2d600:	movt	r0, #9
   2d604:	subs	r1, r1, r6
   2d608:	sbcs	r0, r0, r5
   2d60c:	blt	2cba8 <__assert_fail@plt+0x1a12c>
   2d610:	b	2d650 <__assert_fail@plt+0x1abd4>
   2d614:	ldr	r6, [sp, #48]	; 0x30
   2d618:	eor	r1, r5, sl
   2d61c:	eor	r0, r6, sl
   2d620:	orrs	r0, r0, r1
   2d624:	beq	2d650 <__assert_fail@plt+0x1abd4>
   2d628:	mov	r0, #0
   2d62c:	mov	r1, #-2147483648	; 0x80000000
   2d630:	mov	r2, r6
   2d634:	mov	r3, r5
   2d638:	str	r0, [sp, #60]	; 0x3c
   2d63c:	mov	r0, #0
   2d640:	bl	4c144 <__assert_fail@plt+0x396c8>
   2d644:	subs	r0, r0, #3600	; 0xe10
   2d648:	sbcs	r0, r1, #0
   2d64c:	blt	2cba8 <__assert_fail@plt+0x1a12c>
   2d650:	mov	r0, #3600	; 0xe10
   2d654:	umull	r1, r2, r6, r0
   2d658:	mla	r0, r5, r0, r2
   2d65c:	adds	r8, r4, r1
   2d660:	asr	r2, r4, #31
   2d664:	mov	r1, #0
   2d668:	adc	r4, r2, r0
   2d66c:	str	r1, [sp, #60]	; 0x3c
   2d670:	mov	r1, #0
   2d674:	cmn	r4, #1
   2d678:	movwgt	r1, #1
   2d67c:	cmn	r2, #1
   2d680:	mov	r2, #0
   2d684:	movwgt	r2, #1
   2d688:	subs	r1, r2, r1
   2d68c:	movwne	r1, #1
   2d690:	cmn	r0, #1
   2d694:	mov	r0, #0
   2d698:	movwgt	r0, #1
   2d69c:	sub	r0, r2, r0
   2d6a0:	clz	r0, r0
   2d6a4:	lsr	r0, r0, #5
   2d6a8:	tst	r0, r1
   2d6ac:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d6b0:	ldr	r7, [sp, #244]	; 0xf4
   2d6b4:	ldr	r6, [sp, #240]	; 0xf0
   2d6b8:	cmn	r7, #1
   2d6bc:	ble	2d6e0 <__assert_fail@plt+0x1ac64>
   2d6c0:	movw	r1, #8738	; 0x2222
   2d6c4:	movw	r0, #8738	; 0x2222
   2d6c8:	movt	r1, #8738	; 0x2222
   2d6cc:	movt	r0, #546	; 0x222
   2d6d0:	subs	r1, r1, r6
   2d6d4:	sbcs	r0, r0, r7
   2d6d8:	blt	2cba8 <__assert_fail@plt+0x1a12c>
   2d6dc:	b	2d71c <__assert_fail@plt+0x1aca0>
   2d6e0:	mvn	r1, #0
   2d6e4:	eor	r0, r6, r1
   2d6e8:	eor	r1, r7, r1
   2d6ec:	orrs	r0, r0, r1
   2d6f0:	beq	2d71c <__assert_fail@plt+0x1aca0>
   2d6f4:	mov	r0, #0
   2d6f8:	mov	r1, #-2147483648	; 0x80000000
   2d6fc:	mov	r2, r6
   2d700:	mov	r3, r7
   2d704:	str	r0, [sp, #60]	; 0x3c
   2d708:	mov	r0, #0
   2d70c:	bl	4c144 <__assert_fail@plt+0x396c8>
   2d710:	subs	r0, r0, #60	; 0x3c
   2d714:	sbcs	r0, r1, #0
   2d718:	blt	2cba8 <__assert_fail@plt+0x1a12c>
   2d71c:	mov	r0, #60	; 0x3c
   2d720:	rsb	r2, r7, r7, lsl #4
   2d724:	mov	r3, #0
   2d728:	mov	r7, #0
   2d72c:	umull	r0, r1, r6, r0
   2d730:	str	r3, [sp, #60]	; 0x3c
   2d734:	mov	r3, #0
   2d738:	add	r2, r1, r2, lsl #2
   2d73c:	adds	r0, r8, r0
   2d740:	adc	r1, r4, r2
   2d744:	cmn	r1, #1
   2d748:	movwgt	r3, #1
   2d74c:	cmn	r4, #1
   2d750:	movwgt	r7, #1
   2d754:	subs	r3, r7, r3
   2d758:	movwne	r3, #1
   2d75c:	cmn	r2, #1
   2d760:	mov	r2, #0
   2d764:	movwgt	r2, #1
   2d768:	sub	r2, r7, r2
   2d76c:	clz	r2, r2
   2d770:	lsr	r2, r2, #5
   2d774:	ands	r2, r2, r3
   2d778:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d77c:	ldr	r3, [sp, #248]	; 0xf8
   2d780:	ldr	r7, [sp, #252]	; 0xfc
   2d784:	mov	r2, #0
   2d788:	cmn	r1, #1
   2d78c:	str	r2, [sp, #60]	; 0x3c
   2d790:	mov	r2, #0
   2d794:	movwgt	r2, #1
   2d798:	adds	r0, r0, r3
   2d79c:	mov	r3, #0
   2d7a0:	adc	r1, r1, r7
   2d7a4:	cmn	r1, #1
   2d7a8:	movwgt	r3, #1
   2d7ac:	subs	r3, r2, r3
   2d7b0:	movwne	r3, #1
   2d7b4:	cmn	r7, #1
   2d7b8:	mov	r7, #0
   2d7bc:	movwgt	r7, #1
   2d7c0:	sub	r2, r2, r7
   2d7c4:	clz	r2, r2
   2d7c8:	lsr	r2, r2, #5
   2d7cc:	ands	r2, r2, r3
   2d7d0:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d7d4:	ldr	r3, [sp, #36]	; 0x24
   2d7d8:	ldr	r7, [sp, #44]	; 0x2c
   2d7dc:	mov	r2, #0
   2d7e0:	cmn	r1, #1
   2d7e4:	str	r2, [sp, #60]	; 0x3c
   2d7e8:	mov	r2, #0
   2d7ec:	movwgt	r2, #1
   2d7f0:	adds	r0, r0, r3
   2d7f4:	mov	r3, #0
   2d7f8:	adc	r1, r1, r7
   2d7fc:	cmn	r1, #1
   2d800:	movwgt	r3, #1
   2d804:	subs	r3, r2, r3
   2d808:	movwne	r3, #1
   2d80c:	cmn	r7, #1
   2d810:	mov	r7, #0
   2d814:	movwgt	r7, #1
   2d818:	sub	r2, r2, r7
   2d81c:	clz	r2, r2
   2d820:	lsr	r2, r2, #5
   2d824:	tst	r2, r3
   2d828:	asreq	r2, r0, #31
   2d82c:	eoreq	r3, r0, r0
   2d830:	eoreq	r1, r1, r2
   2d834:	orrseq	r1, r3, r1
   2d838:	bne	2cba8 <__assert_fail@plt+0x1a12c>
   2d83c:	ldr	r1, [sp, #40]	; 0x28
   2d840:	str	r0, [r1]
   2d844:	ldr	r0, [sp, #32]
   2d848:	str	r0, [r1, #4]
   2d84c:	b	2cba0 <__assert_fail@plt+0x1a124>
   2d850:	push	{r4, r5, r6, sl, fp, lr}
   2d854:	add	fp, sp, #16
   2d858:	mov	r4, r1
   2d85c:	movw	r1, #7206	; 0x1c26
   2d860:	mov	r5, r0
   2d864:	movt	r1, #5
   2d868:	mov	r0, r4
   2d86c:	bl	123d4 <strcmp@plt>
   2d870:	cmp	r0, #0
   2d874:	beq	2d924 <__assert_fail@plt+0x1aea8>
   2d878:	movw	r1, #7210	; 0x1c2a
   2d87c:	mov	r0, r4
   2d880:	movt	r1, #5
   2d884:	bl	123d4 <strcmp@plt>
   2d888:	movw	r6, #6340	; 0x18c4
   2d88c:	cmp	r0, #0
   2d890:	movt	r6, #5
   2d894:	addeq	r5, r6, #12
   2d898:	moveq	r0, r5
   2d89c:	popeq	{r4, r5, r6, sl, fp, pc}
   2d8a0:	movw	r1, #7213	; 0x1c2d
   2d8a4:	mov	r0, r4
   2d8a8:	movt	r1, #5
   2d8ac:	bl	123d4 <strcmp@plt>
   2d8b0:	cmp	r0, #0
   2d8b4:	addeq	r5, r6, #24
   2d8b8:	moveq	r0, r5
   2d8bc:	popeq	{r4, r5, r6, sl, fp, pc}
   2d8c0:	ldr	r1, [r5, #188]	; 0xbc
   2d8c4:	cmp	r1, #0
   2d8c8:	beq	2d8ec <__assert_fail@plt+0x1ae70>
   2d8cc:	add	r5, r5, #200	; 0xc8
   2d8d0:	mov	r0, r4
   2d8d4:	bl	123d4 <strcmp@plt>
   2d8d8:	cmp	r0, #0
   2d8dc:	beq	2d934 <__assert_fail@plt+0x1aeb8>
   2d8e0:	ldr	r1, [r5], #12
   2d8e4:	cmp	r1, #0
   2d8e8:	bne	2d8d0 <__assert_fail@plt+0x1ae54>
   2d8ec:	movw	r5, #6388	; 0x18f4
   2d8f0:	movw	r1, #7217	; 0x1c31
   2d8f4:	movt	r5, #5
   2d8f8:	movt	r1, #5
   2d8fc:	mov	r0, r4
   2d900:	bl	123d4 <strcmp@plt>
   2d904:	cmp	r0, #0
   2d908:	beq	2d938 <__assert_fail@plt+0x1aebc>
   2d90c:	ldr	r1, [r5, #12]!
   2d910:	cmp	r1, #0
   2d914:	bne	2d8fc <__assert_fail@plt+0x1ae80>
   2d918:	mov	r5, #0
   2d91c:	mov	r0, r5
   2d920:	pop	{r4, r5, r6, sl, fp, pc}
   2d924:	movw	r5, #6340	; 0x18c4
   2d928:	movt	r5, #5
   2d92c:	mov	r0, r5
   2d930:	pop	{r4, r5, r6, sl, fp, pc}
   2d934:	sub	r5, r5, #12
   2d938:	mov	r0, r5
   2d93c:	pop	{r4, r5, r6, sl, fp, pc}
   2d940:	push	{r4, r5, fp, lr}
   2d944:	add	fp, sp, #8
   2d948:	cmp	r0, #0
   2d94c:	beq	2d9e0 <__assert_fail@plt+0x1af64>
   2d950:	mov	r1, #47	; 0x2f
   2d954:	mov	r4, r0
   2d958:	bl	128f0 <strrchr@plt>
   2d95c:	cmp	r0, #0
   2d960:	mov	r5, r4
   2d964:	addne	r5, r0, #1
   2d968:	sub	r0, r5, r4
   2d96c:	cmp	r0, #7
   2d970:	blt	2d9c4 <__assert_fail@plt+0x1af48>
   2d974:	movw	r1, #7660	; 0x1dec
   2d978:	sub	r0, r5, #7
   2d97c:	mov	r2, #7
   2d980:	movt	r1, #5
   2d984:	bl	12a1c <strncmp@plt>
   2d988:	cmp	r0, #0
   2d98c:	bne	2d9c4 <__assert_fail@plt+0x1af48>
   2d990:	movw	r1, #7668	; 0x1df4
   2d994:	mov	r0, r5
   2d998:	mov	r2, #3
   2d99c:	movt	r1, #5
   2d9a0:	bl	12a1c <strncmp@plt>
   2d9a4:	cmp	r0, #0
   2d9a8:	beq	2d9b4 <__assert_fail@plt+0x1af38>
   2d9ac:	mov	r4, r5
   2d9b0:	b	2d9c4 <__assert_fail@plt+0x1af48>
   2d9b4:	movw	r0, #13624	; 0x3538
   2d9b8:	add	r4, r5, #3
   2d9bc:	movt	r0, #6
   2d9c0:	str	r4, [r0]
   2d9c4:	movw	r0, #13632	; 0x3540
   2d9c8:	movt	r0, #6
   2d9cc:	str	r4, [r0]
   2d9d0:	movw	r0, #15620	; 0x3d04
   2d9d4:	movt	r0, #6
   2d9d8:	str	r4, [r0]
   2d9dc:	pop	{r4, r5, fp, pc}
   2d9e0:	movw	r0, #13640	; 0x3548
   2d9e4:	mov	r1, #55	; 0x37
   2d9e8:	mov	r2, #1
   2d9ec:	movt	r0, #6
   2d9f0:	ldr	r3, [r0]
   2d9f4:	movw	r0, #7604	; 0x1db4
   2d9f8:	movt	r0, #5
   2d9fc:	bl	125f0 <fwrite@plt>
   2da00:	bl	12a28 <abort@plt>
   2da04:	push	{r4, r5, r6, sl, fp, lr}
   2da08:	add	fp, sp, #16
   2da0c:	mov	r4, r0
   2da10:	movw	r0, #15624	; 0x3d08
   2da14:	movt	r0, #6
   2da18:	cmp	r4, #0
   2da1c:	moveq	r4, r0
   2da20:	bl	127d0 <__errno_location@plt>
   2da24:	ldr	r6, [r0]
   2da28:	mov	r5, r0
   2da2c:	mov	r0, r4
   2da30:	mov	r1, #48	; 0x30
   2da34:	bl	30e4c <__assert_fail@plt+0x1e3d0>
   2da38:	str	r6, [r5]
   2da3c:	pop	{r4, r5, r6, sl, fp, pc}
   2da40:	movw	r1, #15624	; 0x3d08
   2da44:	cmp	r0, #0
   2da48:	movt	r1, #6
   2da4c:	movne	r1, r0
   2da50:	ldr	r0, [r1]
   2da54:	bx	lr
   2da58:	movw	r2, #15624	; 0x3d08
   2da5c:	cmp	r0, #0
   2da60:	movt	r2, #6
   2da64:	movne	r2, r0
   2da68:	str	r1, [r2]
   2da6c:	bx	lr
   2da70:	movw	r3, #15624	; 0x3d08
   2da74:	cmp	r0, #0
   2da78:	movt	r3, #6
   2da7c:	movne	r3, r0
   2da80:	ubfx	r0, r1, #5, #3
   2da84:	and	r1, r1, #31
   2da88:	add	r0, r3, r0, lsl #2
   2da8c:	ldr	r3, [r0, #8]
   2da90:	eor	r2, r2, r3, lsr r1
   2da94:	and	r2, r2, #1
   2da98:	eor	r2, r3, r2, lsl r1
   2da9c:	str	r2, [r0, #8]
   2daa0:	mov	r0, #1
   2daa4:	and	r0, r0, r3, lsr r1
   2daa8:	bx	lr
   2daac:	movw	r2, #15624	; 0x3d08
   2dab0:	cmp	r0, #0
   2dab4:	movt	r2, #6
   2dab8:	movne	r2, r0
   2dabc:	ldr	r0, [r2, #4]
   2dac0:	str	r1, [r2, #4]
   2dac4:	bx	lr
   2dac8:	movw	r3, #15624	; 0x3d08
   2dacc:	cmp	r0, #0
   2dad0:	movt	r3, #6
   2dad4:	movne	r3, r0
   2dad8:	cmp	r1, #0
   2dadc:	mov	r0, #10
   2dae0:	cmpne	r2, #0
   2dae4:	str	r0, [r3]
   2dae8:	bne	2daf8 <__assert_fail@plt+0x1b07c>
   2daec:	push	{fp, lr}
   2daf0:	mov	fp, sp
   2daf4:	bl	12a28 <abort@plt>
   2daf8:	str	r1, [r3, #40]	; 0x28
   2dafc:	str	r2, [r3, #44]	; 0x2c
   2db00:	bx	lr
   2db04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db08:	add	fp, sp, #28
   2db0c:	sub	sp, sp, #20
   2db10:	mov	r7, r0
   2db14:	ldr	r0, [fp, #8]
   2db18:	movw	r5, #15624	; 0x3d08
   2db1c:	mov	r8, r3
   2db20:	mov	r9, r2
   2db24:	mov	sl, r1
   2db28:	movt	r5, #6
   2db2c:	cmp	r0, #0
   2db30:	movne	r5, r0
   2db34:	bl	127d0 <__errno_location@plt>
   2db38:	mov	r4, r0
   2db3c:	ldm	r5, {r0, r1}
   2db40:	ldr	r2, [r5, #40]	; 0x28
   2db44:	ldr	r3, [r5, #44]	; 0x2c
   2db48:	add	r5, r5, #8
   2db4c:	ldr	r6, [r4]
   2db50:	stm	sp, {r0, r1, r5}
   2db54:	str	r2, [sp, #12]
   2db58:	str	r3, [sp, #16]
   2db5c:	mov	r0, r7
   2db60:	mov	r1, sl
   2db64:	mov	r2, r9
   2db68:	mov	r3, r8
   2db6c:	bl	2db7c <__assert_fail@plt+0x1b100>
   2db70:	str	r6, [r4]
   2db74:	sub	sp, fp, #28
   2db78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db80:	add	fp, sp, #28
   2db84:	sub	sp, sp, #156	; 0x9c
   2db88:	str	r0, [sp, #76]	; 0x4c
   2db8c:	ldr	r0, [fp, #12]
   2db90:	mov	r6, r1
   2db94:	str	r3, [sp, #84]	; 0x54
   2db98:	str	r2, [fp, #-84]	; 0xffffffac
   2db9c:	and	r1, r0, #4
   2dba0:	str	r1, [sp, #24]
   2dba4:	and	r1, r0, #1
   2dba8:	str	r1, [sp, #28]
   2dbac:	ubfx	r8, r0, #1, #1
   2dbb0:	bl	12620 <__ctype_get_mb_cur_max@plt>
   2dbb4:	str	r0, [sp, #32]
   2dbb8:	ldr	r0, [fp, #24]
   2dbbc:	ldr	r7, [fp, #8]
   2dbc0:	mov	r1, #0
   2dbc4:	mov	r2, #0
   2dbc8:	mov	r4, #1
   2dbcc:	str	r1, [sp, #52]	; 0x34
   2dbd0:	str	r0, [sp, #72]	; 0x48
   2dbd4:	ldr	r0, [fp, #20]
   2dbd8:	str	r0, [sp, #68]	; 0x44
   2dbdc:	mov	r0, #0
   2dbe0:	str	r0, [sp, #48]	; 0x30
   2dbe4:	mov	r0, #0
   2dbe8:	str	r0, [sp, #92]	; 0x5c
   2dbec:	mov	r0, #0
   2dbf0:	str	r0, [fp, #-76]	; 0xffffffb4
   2dbf4:	mov	r0, #0
   2dbf8:	cmp	r7, #10
   2dbfc:	bhi	2eee4 <__assert_fail@plt+0x1c468>
   2dc00:	add	r1, pc, #28
   2dc04:	mov	sl, r6
   2dc08:	ldr	r6, [sp, #76]	; 0x4c
   2dc0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   2dc10:	ldr	lr, [sp, #84]	; 0x54
   2dc14:	mov	r9, #0
   2dc18:	mov	r3, #1
   2dc1c:	mov	r5, #0
   2dc20:	ldr	pc, [r1, r7, lsl #2]
   2dc24:	strdeq	sp, [r2], -r4
   2dc28:	andeq	sp, r2, r0, lsr sp
   2dc2c:	andeq	sp, r2, r4, lsl #26
   2dc30:	andeq	sp, r2, ip, ror #25
   2dc34:	andeq	sp, r2, r4, lsr #26
   2dc38:	andeq	sp, r2, r8, asr sp
   2dc3c:	andeq	sp, r2, r4, lsl sp
   2dc40:	andeq	sp, r2, r4, ror #30
   2dc44:	andeq	sp, r2, r0, asr ip
   2dc48:	andeq	sp, r2, r0, asr ip
   2dc4c:	strdeq	sp, [r2], -r8
   2dc50:	mov	r9, r4
   2dc54:	movw	r4, #7748	; 0x1e44
   2dc58:	mov	r5, r8
   2dc5c:	mov	r8, r2
   2dc60:	mov	r0, #0
   2dc64:	mov	r2, #5
   2dc68:	movt	r4, #5
   2dc6c:	mov	r1, r4
   2dc70:	bl	1253c <dcgettext@plt>
   2dc74:	cmp	r0, r4
   2dc78:	str	r0, [sp, #68]	; 0x44
   2dc7c:	bne	2de0c <__assert_fail@plt+0x1b390>
   2dc80:	bl	4ba50 <__assert_fail@plt+0x38fd4>
   2dc84:	ldrb	r1, [r0]
   2dc88:	and	r1, r1, #223	; 0xdf
   2dc8c:	cmp	r1, #71	; 0x47
   2dc90:	beq	2ddd8 <__assert_fail@plt+0x1b35c>
   2dc94:	cmp	r1, #85	; 0x55
   2dc98:	bne	2ddf0 <__assert_fail@plt+0x1b374>
   2dc9c:	ldrb	r1, [r0, #1]
   2dca0:	and	r1, r1, #223	; 0xdf
   2dca4:	cmp	r1, #84	; 0x54
   2dca8:	bne	2ddf0 <__assert_fail@plt+0x1b374>
   2dcac:	ldrb	r1, [r0, #2]
   2dcb0:	and	r1, r1, #223	; 0xdf
   2dcb4:	cmp	r1, #70	; 0x46
   2dcb8:	bne	2ddf0 <__assert_fail@plt+0x1b374>
   2dcbc:	ldrb	r1, [r0, #3]
   2dcc0:	cmp	r1, #45	; 0x2d
   2dcc4:	ldrbeq	r1, [r0, #4]
   2dcc8:	cmpeq	r1, #56	; 0x38
   2dccc:	bne	2ddf0 <__assert_fail@plt+0x1b374>
   2dcd0:	ldrb	r0, [r0, #5]
   2dcd4:	cmp	r0, #0
   2dcd8:	movw	r0, #7750	; 0x1e46
   2dcdc:	movt	r0, #5
   2dce0:	str	r0, [sp, #68]	; 0x44
   2dce4:	bne	2ddf0 <__assert_fail@plt+0x1b374>
   2dce8:	b	2de0c <__assert_fail@plt+0x1b390>
   2dcec:	mov	r0, #1
   2dcf0:	b	2dd30 <__assert_fail@plt+0x1b2b4>
   2dcf4:	mov	r7, #0
   2dcf8:	mov	r9, #0
   2dcfc:	mov	r3, r0
   2dd00:	b	2ddd0 <__assert_fail@plt+0x1b354>
   2dd04:	tst	r8, #1
   2dd08:	bne	2dd30 <__assert_fail@plt+0x1b2b4>
   2dd0c:	mov	r3, r0
   2dd10:	b	2dd88 <__assert_fail@plt+0x1b30c>
   2dd14:	mov	r0, #1
   2dd18:	mov	r9, #0
   2dd1c:	mov	r7, #5
   2dd20:	b	2dd6c <__assert_fail@plt+0x1b2f0>
   2dd24:	mov	r3, #1
   2dd28:	tst	r8, #1
   2dd2c:	beq	2dd88 <__assert_fail@plt+0x1b30c>
   2dd30:	mov	r1, #1
   2dd34:	mov	r9, #0
   2dd38:	mov	r7, #2
   2dd3c:	mov	r3, r0
   2dd40:	mov	r5, #1
   2dd44:	str	r1, [fp, #-76]	; 0xffffffb4
   2dd48:	movw	r1, #60120	; 0xead8
   2dd4c:	movt	r1, #4
   2dd50:	str	r1, [sp, #92]	; 0x5c
   2dd54:	b	2df64 <__assert_fail@plt+0x1b4e8>
   2dd58:	mov	r7, #5
   2dd5c:	tst	r8, #1
   2dd60:	beq	2dda8 <__assert_fail@plt+0x1b32c>
   2dd64:	mov	r0, #1
   2dd68:	mov	r9, #0
   2dd6c:	str	r0, [fp, #-76]	; 0xffffffb4
   2dd70:	movw	r0, #7602	; 0x1db2
   2dd74:	mov	r3, #1
   2dd78:	mov	r5, #1
   2dd7c:	movt	r0, #5
   2dd80:	str	r0, [sp, #92]	; 0x5c
   2dd84:	b	2df64 <__assert_fail@plt+0x1b4e8>
   2dd88:	cmp	sl, #0
   2dd8c:	mov	r9, #1
   2dd90:	mov	r7, #2
   2dd94:	movne	r0, #39	; 0x27
   2dd98:	strbne	r0, [r6]
   2dd9c:	movw	r0, #60120	; 0xead8
   2dda0:	movt	r0, #4
   2dda4:	b	2ddc4 <__assert_fail@plt+0x1b348>
   2dda8:	cmp	sl, #0
   2ddac:	mov	r9, #1
   2ddb0:	mov	r3, #1
   2ddb4:	movne	r0, #34	; 0x22
   2ddb8:	strbne	r0, [r6]
   2ddbc:	movw	r0, #7602	; 0x1db2
   2ddc0:	movt	r0, #5
   2ddc4:	str	r0, [sp, #92]	; 0x5c
   2ddc8:	mov	r0, #1
   2ddcc:	str	r0, [fp, #-76]	; 0xffffffb4
   2ddd0:	mov	r5, #0
   2ddd4:	b	2df64 <__assert_fail@plt+0x1b4e8>
   2ddd8:	ldrb	r1, [r0, #1]
   2dddc:	and	r1, r1, #223	; 0xdf
   2dde0:	cmp	r1, #66	; 0x42
   2dde4:	ldrbeq	r1, [r0, #2]
   2dde8:	cmpeq	r1, #49	; 0x31
   2ddec:	beq	2ed0c <__assert_fail@plt+0x1c290>
   2ddf0:	movw	r0, #60120	; 0xead8
   2ddf4:	movw	r1, #7602	; 0x1db2
   2ddf8:	cmp	r7, #9
   2ddfc:	movt	r0, #4
   2de00:	movt	r1, #5
   2de04:	moveq	r0, r1
   2de08:	str	r0, [sp, #68]	; 0x44
   2de0c:	movw	r4, #60120	; 0xead8
   2de10:	mov	r0, #0
   2de14:	mov	r2, #5
   2de18:	movt	r4, #4
   2de1c:	mov	r1, r4
   2de20:	bl	1253c <dcgettext@plt>
   2de24:	cmp	r0, r4
   2de28:	str	r0, [sp, #72]	; 0x48
   2de2c:	beq	2de3c <__assert_fail@plt+0x1b3c0>
   2de30:	mov	r4, r9
   2de34:	mov	r2, r8
   2de38:	b	2def4 <__assert_fail@plt+0x1b478>
   2de3c:	bl	4ba50 <__assert_fail@plt+0x38fd4>
   2de40:	ldrb	r1, [r0]
   2de44:	mov	r4, r9
   2de48:	and	r1, r1, #223	; 0xdf
   2de4c:	cmp	r1, #71	; 0x47
   2de50:	beq	2deac <__assert_fail@plt+0x1b430>
   2de54:	cmp	r1, #85	; 0x55
   2de58:	mov	r2, r8
   2de5c:	bne	2ded4 <__assert_fail@plt+0x1b458>
   2de60:	ldrb	r1, [r0, #1]
   2de64:	and	r1, r1, #223	; 0xdf
   2de68:	cmp	r1, #84	; 0x54
   2de6c:	bne	2ded4 <__assert_fail@plt+0x1b458>
   2de70:	ldrb	r1, [r0, #2]
   2de74:	and	r1, r1, #223	; 0xdf
   2de78:	cmp	r1, #70	; 0x46
   2de7c:	ldrbeq	r1, [r0, #3]
   2de80:	cmpeq	r1, #45	; 0x2d
   2de84:	bne	2ded4 <__assert_fail@plt+0x1b458>
   2de88:	ldrb	r1, [r0, #4]
   2de8c:	cmp	r1, #56	; 0x38
   2de90:	ldrbeq	r0, [r0, #5]
   2de94:	cmpeq	r0, #0
   2de98:	bne	2ded4 <__assert_fail@plt+0x1b458>
   2de9c:	movw	r0, #7754	; 0x1e4a
   2dea0:	movt	r0, #5
   2dea4:	str	r0, [sp, #72]	; 0x48
   2dea8:	b	2def4 <__assert_fail@plt+0x1b478>
   2deac:	ldrb	r1, [r0, #1]
   2deb0:	mov	r2, r8
   2deb4:	and	r1, r1, #223	; 0xdf
   2deb8:	cmp	r1, #66	; 0x42
   2debc:	bne	2ded4 <__assert_fail@plt+0x1b458>
   2dec0:	ldrb	r1, [r0, #2]
   2dec4:	cmp	r1, #49	; 0x31
   2dec8:	ldrbeq	r1, [r0, #3]
   2decc:	cmpeq	r1, #56	; 0x38
   2ded0:	beq	2ed50 <__assert_fail@plt+0x1c2d4>
   2ded4:	movw	r0, #60120	; 0xead8
   2ded8:	cmp	r7, #9
   2dedc:	movt	r0, #4
   2dee0:	mov	r1, r0
   2dee4:	movw	r0, #7602	; 0x1db2
   2dee8:	movt	r0, #5
   2deec:	moveq	r1, r0
   2def0:	str	r1, [sp, #72]	; 0x48
   2def4:	mov	r8, r5
   2def8:	mov	r9, #0
   2defc:	tst	r8, #1
   2df00:	mov	r5, r8
   2df04:	str	r2, [fp, #-48]	; 0xffffffd0
   2df08:	bne	2df40 <__assert_fail@plt+0x1b4c4>
   2df0c:	ldr	r0, [sp, #68]	; 0x44
   2df10:	ldrb	r0, [r0]
   2df14:	cmp	r0, #0
   2df18:	beq	2df40 <__assert_fail@plt+0x1b4c4>
   2df1c:	ldr	r1, [sp, #68]	; 0x44
   2df20:	mov	r9, #0
   2df24:	add	r1, r1, #1
   2df28:	cmp	r9, sl
   2df2c:	strbcc	r0, [r6, r9]
   2df30:	ldrb	r0, [r1, r9]
   2df34:	add	r9, r9, #1
   2df38:	cmp	r0, #0
   2df3c:	bne	2df28 <__assert_fail@plt+0x1b4ac>
   2df40:	ldr	r8, [sp, #72]	; 0x48
   2df44:	mov	r0, r8
   2df48:	bl	12788 <strlen@plt>
   2df4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   2df50:	ldr	lr, [sp, #84]	; 0x54
   2df54:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2df58:	str	r0, [fp, #-76]	; 0xffffffb4
   2df5c:	str	r8, [sp, #92]	; 0x5c
   2df60:	mov	r3, #1
   2df64:	ldr	r0, [fp, #16]
   2df68:	str	r7, [fp, #-64]	; 0xffffffc0
   2df6c:	str	r5, [fp, #-72]	; 0xffffffb8
   2df70:	str	r3, [sp, #80]	; 0x50
   2df74:	cmp	r0, #0
   2df78:	movwne	r0, #1
   2df7c:	and	r0, r0, r5
   2df80:	str	r0, [fp, #-88]	; 0xffffffa8
   2df84:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2df88:	cmp	r0, #0
   2df8c:	movwne	r0, #1
   2df90:	subs	r7, r7, #2
   2df94:	and	r1, r0, r5
   2df98:	str	r7, [fp, #-80]	; 0xffffffb0
   2df9c:	and	r1, r3, r1
   2dfa0:	str	r1, [sp, #40]	; 0x28
   2dfa4:	clz	r1, r7
   2dfa8:	lsr	r1, r1, #5
   2dfac:	and	r1, r1, r5
   2dfb0:	eor	r5, r5, #1
   2dfb4:	str	r1, [sp, #36]	; 0x24
   2dfb8:	mov	r1, r7
   2dfbc:	str	r5, [sp, #88]	; 0x58
   2dfc0:	mov	r7, #0
   2dfc4:	movwne	r1, #1
   2dfc8:	orr	r5, r1, r5
   2dfcc:	and	r1, r1, r3
   2dfd0:	and	r0, r0, r1
   2dfd4:	str	r5, [sp, #60]	; 0x3c
   2dfd8:	str	r1, [fp, #-68]	; 0xffffffbc
   2dfdc:	str	r0, [fp, #-60]	; 0xffffffc4
   2dfe0:	eor	r0, r3, #1
   2dfe4:	str	r0, [sp, #44]	; 0x2c
   2dfe8:	cmn	lr, #1
   2dfec:	beq	2dffc <__assert_fail@plt+0x1b580>
   2dff0:	cmp	r7, lr
   2dff4:	bne	2e008 <__assert_fail@plt+0x1b58c>
   2dff8:	b	2ec80 <__assert_fail@plt+0x1c204>
   2dffc:	ldrb	r0, [ip, r7]
   2e000:	cmp	r0, #0
   2e004:	beq	2ec88 <__assert_fail@plt+0x1c20c>
   2e008:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2e00c:	mov	r8, #0
   2e010:	str	r4, [fp, #-52]	; 0xffffffcc
   2e014:	str	r2, [fp, #-48]	; 0xffffffd0
   2e018:	cmp	r0, #0
   2e01c:	beq	2e050 <__assert_fail@plt+0x1b5d4>
   2e020:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2e024:	add	r4, r7, r0
   2e028:	cmp	r0, #2
   2e02c:	bcc	2e048 <__assert_fail@plt+0x1b5cc>
   2e030:	cmn	lr, #1
   2e034:	bne	2e048 <__assert_fail@plt+0x1b5cc>
   2e038:	mov	r0, ip
   2e03c:	bl	12788 <strlen@plt>
   2e040:	ldr	ip, [fp, #-84]	; 0xffffffac
   2e044:	mov	lr, r0
   2e048:	cmp	r4, lr
   2e04c:	bls	2e068 <__assert_fail@plt+0x1b5ec>
   2e050:	mov	r0, #0
   2e054:	str	r0, [fp, #-56]	; 0xffffffc8
   2e058:	ldrb	r5, [ip, r7]
   2e05c:	cmp	r5, #126	; 0x7e
   2e060:	bls	2e0b8 <__assert_fail@plt+0x1b63c>
   2e064:	b	2e4c0 <__assert_fail@plt+0x1ba44>
   2e068:	ldr	r1, [sp, #92]	; 0x5c
   2e06c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2e070:	add	r0, ip, r7
   2e074:	mov	r4, lr
   2e078:	bl	12518 <memcmp@plt>
   2e07c:	ldr	r2, [sp, #88]	; 0x58
   2e080:	cmp	r0, #0
   2e084:	mov	r1, r0
   2e088:	movwne	r1, #1
   2e08c:	orr	r1, r1, r2
   2e090:	tst	r1, #1
   2e094:	beq	2ed94 <__assert_fail@plt+0x1c318>
   2e098:	ldr	ip, [fp, #-84]	; 0xffffffac
   2e09c:	clz	r0, r0
   2e0a0:	mov	lr, r4
   2e0a4:	lsr	r0, r0, #5
   2e0a8:	str	r0, [fp, #-56]	; 0xffffffc8
   2e0ac:	ldrb	r5, [ip, r7]
   2e0b0:	cmp	r5, #126	; 0x7e
   2e0b4:	bhi	2e4c0 <__assert_fail@plt+0x1ba44>
   2e0b8:	add	r3, pc, #16
   2e0bc:	mov	r4, #1
   2e0c0:	mov	r2, #110	; 0x6e
   2e0c4:	mov	r0, #97	; 0x61
   2e0c8:	mov	r1, #0
   2e0cc:	ldr	pc, [r3, r5, lsl #2]
   2e0d0:	andeq	lr, r2, r0, lsr #7
   2e0d4:	andeq	lr, r2, r0, asr #9
   2e0d8:	andeq	lr, r2, r0, asr #9
   2e0dc:	andeq	lr, r2, r0, asr #9
   2e0e0:	andeq	lr, r2, r0, asr #9
   2e0e4:	andeq	lr, r2, r0, asr #9
   2e0e8:	andeq	lr, r2, r0, asr #9
   2e0ec:	muleq	r2, ip, r5
   2e0f0:	andeq	lr, r2, r0, lsl #7
   2e0f4:	andeq	lr, r2, r8, ror #6
   2e0f8:	andeq	lr, r2, ip, lsl #7
   2e0fc:	andeq	lr, r2, ip, lsl r4
   2e100:	andeq	lr, r2, r0, ror #6
   2e104:	andeq	lr, r2, r8, lsl #7
   2e108:	andeq	lr, r2, r0, asr #9
   2e10c:	andeq	lr, r2, r0, asr #9
   2e110:	andeq	lr, r2, r0, asr #9
   2e114:	andeq	lr, r2, r0, asr #9
   2e118:	andeq	lr, r2, r0, asr #9
   2e11c:	andeq	lr, r2, r0, asr #9
   2e120:	andeq	lr, r2, r0, asr #9
   2e124:	andeq	lr, r2, r0, asr #9
   2e128:	andeq	lr, r2, r0, asr #9
   2e12c:	andeq	lr, r2, r0, asr #9
   2e130:	andeq	lr, r2, r0, asr #9
   2e134:	andeq	lr, r2, r0, asr #9
   2e138:	andeq	lr, r2, r0, asr #9
   2e13c:	andeq	lr, r2, r0, asr #9
   2e140:	andeq	lr, r2, r0, asr #9
   2e144:	andeq	lr, r2, r0, asr #9
   2e148:	andeq	lr, r2, r0, asr #9
   2e14c:	andeq	lr, r2, r0, asr #9
   2e150:	andeq	lr, r2, r8, lsl r5
   2e154:	andeq	lr, r2, ip, lsl r5
   2e158:	andeq	lr, r2, ip, lsl r5
   2e15c:	andeq	lr, r2, ip, ror #5
   2e160:	andeq	lr, r2, ip, lsl r5
   2e164:	andeq	lr, r2, ip, asr #5
   2e168:	andeq	lr, r2, ip, lsl r5
   2e16c:	andeq	lr, r2, r4, lsr #8
   2e170:	andeq	lr, r2, ip, lsl r5
   2e174:	andeq	lr, r2, ip, lsl r5
   2e178:	andeq	lr, r2, ip, lsl r5
   2e17c:	andeq	lr, r2, ip, asr #5
   2e180:	andeq	lr, r2, ip, asr #5
   2e184:	andeq	lr, r2, ip, asr #5
   2e188:	andeq	lr, r2, ip, asr #5
   2e18c:	andeq	lr, r2, ip, asr #5
   2e190:	andeq	lr, r2, ip, asr #5
   2e194:	andeq	lr, r2, ip, asr #5
   2e198:	andeq	lr, r2, ip, asr #5
   2e19c:	andeq	lr, r2, ip, asr #5
   2e1a0:	andeq	lr, r2, ip, asr #5
   2e1a4:	andeq	lr, r2, ip, asr #5
   2e1a8:	andeq	lr, r2, ip, asr #5
   2e1ac:	andeq	lr, r2, ip, asr #5
   2e1b0:	andeq	lr, r2, ip, asr #5
   2e1b4:	andeq	lr, r2, ip, asr #5
   2e1b8:	andeq	lr, r2, ip, asr #5
   2e1bc:	andeq	lr, r2, ip, lsl r5
   2e1c0:	andeq	lr, r2, ip, lsl r5
   2e1c4:	andeq	lr, r2, ip, lsl r5
   2e1c8:	andeq	lr, r2, ip, lsl r5
   2e1cc:	andeq	lr, r2, r0, ror #7
   2e1d0:	andeq	lr, r2, r0, asr #9
   2e1d4:	andeq	lr, r2, ip, asr #5
   2e1d8:	andeq	lr, r2, ip, asr #5
   2e1dc:	andeq	lr, r2, ip, asr #5
   2e1e0:	andeq	lr, r2, ip, asr #5
   2e1e4:	andeq	lr, r2, ip, asr #5
   2e1e8:	andeq	lr, r2, ip, asr #5
   2e1ec:	andeq	lr, r2, ip, asr #5
   2e1f0:	andeq	lr, r2, ip, asr #5
   2e1f4:	andeq	lr, r2, ip, asr #5
   2e1f8:	andeq	lr, r2, ip, asr #5
   2e1fc:	andeq	lr, r2, ip, asr #5
   2e200:	andeq	lr, r2, ip, asr #5
   2e204:	andeq	lr, r2, ip, asr #5
   2e208:	andeq	lr, r2, ip, asr #5
   2e20c:	andeq	lr, r2, ip, asr #5
   2e210:	andeq	lr, r2, ip, asr #5
   2e214:	andeq	lr, r2, ip, asr #5
   2e218:	andeq	lr, r2, ip, asr #5
   2e21c:	andeq	lr, r2, ip, asr #5
   2e220:	andeq	lr, r2, ip, asr #5
   2e224:	andeq	lr, r2, ip, asr #5
   2e228:	andeq	lr, r2, ip, asr #5
   2e22c:	andeq	lr, r2, ip, asr #5
   2e230:	andeq	lr, r2, ip, asr #5
   2e234:	andeq	lr, r2, ip, asr #5
   2e238:	andeq	lr, r2, ip, asr #5
   2e23c:	andeq	lr, r2, ip, lsl r5
   2e240:	andeq	lr, r2, ip, lsr #6
   2e244:	andeq	lr, r2, ip, asr #5
   2e248:	andeq	lr, r2, ip, lsl r5
   2e24c:	andeq	lr, r2, ip, asr #5
   2e250:	andeq	lr, r2, ip, lsl r5
   2e254:	andeq	lr, r2, ip, asr #5
   2e258:	andeq	lr, r2, ip, asr #5
   2e25c:	andeq	lr, r2, ip, asr #5
   2e260:	andeq	lr, r2, ip, asr #5
   2e264:	andeq	lr, r2, ip, asr #5
   2e268:	andeq	lr, r2, ip, asr #5
   2e26c:	andeq	lr, r2, ip, asr #5
   2e270:	andeq	lr, r2, ip, asr #5
   2e274:	andeq	lr, r2, ip, asr #5
   2e278:	andeq	lr, r2, ip, asr #5
   2e27c:	andeq	lr, r2, ip, asr #5
   2e280:	andeq	lr, r2, ip, asr #5
   2e284:	andeq	lr, r2, ip, asr #5
   2e288:	andeq	lr, r2, ip, asr #5
   2e28c:	andeq	lr, r2, ip, asr #5
   2e290:	andeq	lr, r2, ip, asr #5
   2e294:	andeq	lr, r2, ip, asr #5
   2e298:	andeq	lr, r2, ip, asr #5
   2e29c:	andeq	lr, r2, ip, asr #5
   2e2a0:	andeq	lr, r2, ip, asr #5
   2e2a4:	andeq	lr, r2, ip, asr #5
   2e2a8:	andeq	lr, r2, ip, asr #5
   2e2ac:	andeq	lr, r2, ip, asr #5
   2e2b0:	andeq	lr, r2, ip, asr #5
   2e2b4:	andeq	lr, r2, ip, asr #5
   2e2b8:	andeq	lr, r2, ip, asr #5
   2e2bc:	andeq	lr, r2, ip, lsl #6
   2e2c0:	andeq	lr, r2, ip, lsl r5
   2e2c4:	andeq	lr, r2, ip, lsl #6
   2e2c8:	andeq	lr, r2, ip, ror #5
   2e2cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e2d0:	cmp	r0, #0
   2e2d4:	beq	2e5b0 <__assert_fail@plt+0x1bb34>
   2e2d8:	ldr	r0, [fp, #16]
   2e2dc:	cmp	r0, #0
   2e2e0:	mov	r0, r5
   2e2e4:	bne	2e5c0 <__assert_fail@plt+0x1bb44>
   2e2e8:	b	2e5e0 <__assert_fail@plt+0x1bb64>
   2e2ec:	mov	r4, #0
   2e2f0:	cmp	r7, #0
   2e2f4:	beq	2e518 <__assert_fail@plt+0x1ba9c>
   2e2f8:	mov	r8, #0
   2e2fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e300:	cmp	r0, #0
   2e304:	bne	2e2d8 <__assert_fail@plt+0x1b85c>
   2e308:	b	2e5b0 <__assert_fail@plt+0x1bb34>
   2e30c:	mov	r4, #0
   2e310:	cmn	lr, #1
   2e314:	beq	2e4f0 <__assert_fail@plt+0x1ba74>
   2e318:	cmp	r7, #0
   2e31c:	bne	2e2f8 <__assert_fail@plt+0x1b87c>
   2e320:	cmp	lr, #1
   2e324:	beq	2e518 <__assert_fail@plt+0x1ba9c>
   2e328:	b	2e2f8 <__assert_fail@plt+0x1b87c>
   2e32c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e330:	cmp	r0, #2
   2e334:	bne	2e548 <__assert_fail@plt+0x1bacc>
   2e338:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2e33c:	tst	r0, #1
   2e340:	bne	2eda8 <__assert_fail@plt+0x1c32c>
   2e344:	mov	r8, #0
   2e348:	mov	r0, #92	; 0x5c
   2e34c:	mov	r4, #0
   2e350:	cmp	r8, #0
   2e354:	beq	2e568 <__assert_fail@plt+0x1baec>
   2e358:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2e35c:	b	2e65c <__assert_fail@plt+0x1bbe0>
   2e360:	mov	r0, #102	; 0x66
   2e364:	b	2e59c <__assert_fail@plt+0x1bb20>
   2e368:	mov	r2, #116	; 0x74
   2e36c:	ldr	r0, [sp, #60]	; 0x3c
   2e370:	tst	r0, #1
   2e374:	mov	r0, r2
   2e378:	bne	2e59c <__assert_fail@plt+0x1bb20>
   2e37c:	b	2eda8 <__assert_fail@plt+0x1c32c>
   2e380:	mov	r0, #98	; 0x62
   2e384:	b	2e59c <__assert_fail@plt+0x1bb20>
   2e388:	mov	r2, #114	; 0x72
   2e38c:	ldr	r0, [sp, #60]	; 0x3c
   2e390:	tst	r0, #1
   2e394:	mov	r0, r2
   2e398:	bne	2e59c <__assert_fail@plt+0x1bb20>
   2e39c:	b	2eda8 <__assert_fail@plt+0x1c32c>
   2e3a0:	ldr	r0, [sp, #80]	; 0x50
   2e3a4:	tst	r0, #1
   2e3a8:	beq	2e684 <__assert_fail@plt+0x1bc08>
   2e3ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2e3b0:	tst	r0, #1
   2e3b4:	bne	2eed0 <__assert_fail@plt+0x1c454>
   2e3b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e3bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2e3c0:	cmp	r0, #2
   2e3c4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2e3c8:	movwne	r0, #1
   2e3cc:	orr	r0, r0, r2
   2e3d0:	tst	r0, #1
   2e3d4:	beq	2e97c <__assert_fail@plt+0x1bf00>
   2e3d8:	mov	r0, r9
   2e3dc:	b	2e9b0 <__assert_fail@plt+0x1bf34>
   2e3e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e3e4:	mov	r8, #0
   2e3e8:	mov	r5, #63	; 0x3f
   2e3ec:	cmp	r0, #5
   2e3f0:	beq	2e838 <__assert_fail@plt+0x1bdbc>
   2e3f4:	cmp	r0, #2
   2e3f8:	bne	2e8e8 <__assert_fail@plt+0x1be6c>
   2e3fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2e400:	tst	r0, #1
   2e404:	bne	2eda8 <__assert_fail@plt+0x1c32c>
   2e408:	mov	r4, #0
   2e40c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e410:	cmp	r0, #0
   2e414:	bne	2e2d8 <__assert_fail@plt+0x1b85c>
   2e418:	b	2e5b0 <__assert_fail@plt+0x1bb34>
   2e41c:	mov	r0, #118	; 0x76
   2e420:	b	2e59c <__assert_fail@plt+0x1bb20>
   2e424:	mov	r0, #1
   2e428:	mov	r5, #39	; 0x27
   2e42c:	str	r0, [sp, #52]	; 0x34
   2e430:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e434:	cmp	r0, #2
   2e438:	bne	2e4ac <__assert_fail@plt+0x1ba30>
   2e43c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2e440:	tst	r0, #1
   2e444:	bne	2eda8 <__assert_fail@plt+0x1c32c>
   2e448:	ldr	r2, [sp, #48]	; 0x30
   2e44c:	clz	r1, sl
   2e450:	mov	r8, #0
   2e454:	lsr	r1, r1, #5
   2e458:	cmp	r2, #0
   2e45c:	mov	r0, r2
   2e460:	movwne	r0, #1
   2e464:	orrs	r0, r0, r1
   2e468:	moveq	r2, sl
   2e46c:	moveq	sl, r0
   2e470:	cmp	r9, sl
   2e474:	str	r2, [sp, #48]	; 0x30
   2e478:	movcc	r0, #39	; 0x27
   2e47c:	strbcc	r0, [r6, r9]
   2e480:	add	r0, r9, #1
   2e484:	cmp	r0, sl
   2e488:	movcc	r1, #92	; 0x5c
   2e48c:	strbcc	r1, [r6, r0]
   2e490:	add	r0, r9, #2
   2e494:	add	r9, r9, #3
   2e498:	cmp	r0, sl
   2e49c:	movcc	r1, #39	; 0x27
   2e4a0:	strbcc	r1, [r6, r0]
   2e4a4:	mov	r0, #0
   2e4a8:	str	r0, [fp, #-48]	; 0xffffffd0
   2e4ac:	mov	r4, #1
   2e4b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e4b4:	cmp	r0, #0
   2e4b8:	bne	2e2d8 <__assert_fail@plt+0x1b85c>
   2e4bc:	b	2e5b0 <__assert_fail@plt+0x1bb34>
   2e4c0:	ldr	r0, [sp, #32]
   2e4c4:	cmp	r0, #1
   2e4c8:	bne	2e6b4 <__assert_fail@plt+0x1bc38>
   2e4cc:	str	lr, [sp, #84]	; 0x54
   2e4d0:	bl	12740 <__ctype_b_loc@plt>
   2e4d4:	ldr	r0, [r0]
   2e4d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   2e4dc:	mov	r1, #1
   2e4e0:	add	r0, r0, r5, lsl #1
   2e4e4:	ldrb	r0, [r0, #1]
   2e4e8:	ubfx	r4, r0, #6, #1
   2e4ec:	b	2eaac <__assert_fail@plt+0x1c030>
   2e4f0:	cmp	r7, #0
   2e4f4:	ldrbeq	r0, [ip, #1]
   2e4f8:	cmpeq	r0, #0
   2e4fc:	beq	2e518 <__assert_fail@plt+0x1ba9c>
   2e500:	mvn	lr, #0
   2e504:	mov	r8, #0
   2e508:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e50c:	cmp	r0, #0
   2e510:	bne	2e2d8 <__assert_fail@plt+0x1b85c>
   2e514:	b	2e5b0 <__assert_fail@plt+0x1bb34>
   2e518:	mov	r1, #1
   2e51c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e520:	cmp	r0, #2
   2e524:	bne	2e534 <__assert_fail@plt+0x1bab8>
   2e528:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2e52c:	tst	r0, #1
   2e530:	bne	2eda8 <__assert_fail@plt+0x1c32c>
   2e534:	mov	r4, r1
   2e538:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e53c:	cmp	r0, #0
   2e540:	bne	2e2d8 <__assert_fail@plt+0x1b85c>
   2e544:	b	2e5b0 <__assert_fail@plt+0x1bb34>
   2e548:	ldr	r1, [sp, #40]	; 0x28
   2e54c:	mov	r8, #0
   2e550:	mov	r0, #92	; 0x5c
   2e554:	cmp	r1, #0
   2e558:	beq	2e59c <__assert_fail@plt+0x1bb20>
   2e55c:	mov	r4, #0
   2e560:	cmp	r8, #0
   2e564:	bne	2e358 <__assert_fail@plt+0x1b8dc>
   2e568:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2e56c:	tst	r2, #1
   2e570:	beq	2e65c <__assert_fail@plt+0x1bbe0>
   2e574:	cmp	r9, sl
   2e578:	movcc	r1, #39	; 0x27
   2e57c:	strbcc	r1, [r6, r9]
   2e580:	add	r1, r9, #1
   2e584:	add	r9, r9, #2
   2e588:	cmp	r1, sl
   2e58c:	movcc	r2, #39	; 0x27
   2e590:	strbcc	r2, [r6, r1]
   2e594:	mov	r2, #0
   2e598:	b	2e65c <__assert_fail@plt+0x1bbe0>
   2e59c:	ldr	r1, [sp, #80]	; 0x50
   2e5a0:	mov	r4, #0
   2e5a4:	mov	r8, #0
   2e5a8:	tst	r1, #1
   2e5ac:	bne	2e5ec <__assert_fail@plt+0x1bb70>
   2e5b0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   2e5b4:	cmp	r0, #0
   2e5b8:	mov	r0, r5
   2e5bc:	beq	2e5e0 <__assert_fail@plt+0x1bb64>
   2e5c0:	ldr	r1, [fp, #16]
   2e5c4:	ubfx	r0, r5, #5, #3
   2e5c8:	mov	r2, #1
   2e5cc:	ldr	r0, [r1, r0, lsl #2]
   2e5d0:	and	r1, r5, #31
   2e5d4:	tst	r0, r2, lsl r1
   2e5d8:	mov	r0, r5
   2e5dc:	bne	2e5ec <__assert_fail@plt+0x1bb70>
   2e5e0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2e5e4:	cmp	r1, #0
   2e5e8:	beq	2ea44 <__assert_fail@plt+0x1bfc8>
   2e5ec:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2e5f0:	tst	r1, #1
   2e5f4:	bne	2ed88 <__assert_fail@plt+0x1c30c>
   2e5f8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2e5fc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2e600:	cmp	r1, #2
   2e604:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2e608:	movwne	r1, #1
   2e60c:	orr	r1, r1, r2
   2e610:	tst	r1, #1
   2e614:	bne	2e64c <__assert_fail@plt+0x1bbd0>
   2e618:	cmp	r9, sl
   2e61c:	movcc	r1, #39	; 0x27
   2e620:	strbcc	r1, [r6, r9]
   2e624:	add	r1, r9, #1
   2e628:	cmp	r1, sl
   2e62c:	movcc	r2, #36	; 0x24
   2e630:	strbcc	r2, [r6, r1]
   2e634:	add	r1, r9, #2
   2e638:	add	r9, r9, #3
   2e63c:	cmp	r1, sl
   2e640:	movcc	r2, #39	; 0x27
   2e644:	strbcc	r2, [r6, r1]
   2e648:	mov	r2, #1
   2e64c:	cmp	r9, sl
   2e650:	movcc	r1, #92	; 0x5c
   2e654:	strbcc	r1, [r6, r9]
   2e658:	add	r9, r9, #1
   2e65c:	cmp	r9, sl
   2e660:	add	r7, r7, #1
   2e664:	strbcc	r0, [r6, r9]
   2e668:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2e66c:	add	r9, r9, #1
   2e670:	and	r0, r0, r4
   2e674:	mov	r4, r0
   2e678:	cmn	lr, #1
   2e67c:	bne	2dff0 <__assert_fail@plt+0x1b574>
   2e680:	b	2dffc <__assert_fail@plt+0x1b580>
   2e684:	ldr	r0, [sp, #28]
   2e688:	mov	r4, #0
   2e68c:	mov	r8, #0
   2e690:	mov	r5, #0
   2e694:	cmp	r0, #0
   2e698:	beq	2e5b0 <__assert_fail@plt+0x1bb34>
   2e69c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   2e6a0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2e6a4:	add	r7, r7, #1
   2e6a8:	cmn	lr, #1
   2e6ac:	bne	2dff0 <__assert_fail@plt+0x1b574>
   2e6b0:	b	2dffc <__assert_fail@plt+0x1b580>
   2e6b4:	mov	r0, #0
   2e6b8:	cmn	lr, #1
   2e6bc:	str	r0, [fp, #-36]	; 0xffffffdc
   2e6c0:	str	r0, [fp, #-40]	; 0xffffffd8
   2e6c4:	bne	2e6d8 <__assert_fail@plt+0x1bc5c>
   2e6c8:	mov	r0, ip
   2e6cc:	bl	12788 <strlen@plt>
   2e6d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   2e6d4:	mov	lr, r0
   2e6d8:	ldr	r0, [sp, #36]	; 0x24
   2e6dc:	str	sl, [sp, #56]	; 0x38
   2e6e0:	str	lr, [sp, #84]	; 0x54
   2e6e4:	cmp	r0, #0
   2e6e8:	beq	2e900 <__assert_fail@plt+0x1be84>
   2e6ec:	add	r0, ip, r7
   2e6f0:	mov	r4, #1
   2e6f4:	mov	r6, #0
   2e6f8:	sub	sl, fp, #40	; 0x28
   2e6fc:	str	r0, [sp, #20]
   2e700:	str	r6, [sp, #64]	; 0x40
   2e704:	add	r6, r6, r7
   2e708:	sub	r0, fp, #44	; 0x2c
   2e70c:	mov	r3, sl
   2e710:	add	r1, ip, r6
   2e714:	sub	r2, lr, r6
   2e718:	bl	35638 <__assert_fail@plt+0x22bbc>
   2e71c:	cmn	r0, #2
   2e720:	beq	2ea5c <__assert_fail@plt+0x1bfe0>
   2e724:	ldr	sl, [sp, #56]	; 0x38
   2e728:	cmn	r0, #1
   2e72c:	beq	2ea50 <__assert_fail@plt+0x1bfd4>
   2e730:	cmp	r0, #0
   2e734:	beq	2ea54 <__assert_fail@plt+0x1bfd8>
   2e738:	cmp	r0, #2
   2e73c:	bcc	2e7fc <__assert_fail@plt+0x1bd80>
   2e740:	ldr	r1, [sp, #64]	; 0x40
   2e744:	ldr	r2, [sp, #20]
   2e748:	add	r1, r2, r1
   2e74c:	mov	r2, #1
   2e750:	ldrb	r3, [r1, r2]
   2e754:	sub	r3, r3, #91	; 0x5b
   2e758:	cmp	r3, #33	; 0x21
   2e75c:	bhi	2e7f0 <__assert_fail@plt+0x1bd74>
   2e760:	add	r6, pc, #0
   2e764:	ldr	pc, [r6, r3, lsl #2]
   2e768:			; <UNDEFINED> instruction: 0x0002edb4
   2e76c:			; <UNDEFINED> instruction: 0x0002edb4
   2e770:	strdeq	lr, [r2], -r0
   2e774:			; <UNDEFINED> instruction: 0x0002edb4
   2e778:	strdeq	lr, [r2], -r0
   2e77c:			; <UNDEFINED> instruction: 0x0002edb4
   2e780:	strdeq	lr, [r2], -r0
   2e784:	strdeq	lr, [r2], -r0
   2e788:	strdeq	lr, [r2], -r0
   2e78c:	strdeq	lr, [r2], -r0
   2e790:	strdeq	lr, [r2], -r0
   2e794:	strdeq	lr, [r2], -r0
   2e798:	strdeq	lr, [r2], -r0
   2e79c:	strdeq	lr, [r2], -r0
   2e7a0:	strdeq	lr, [r2], -r0
   2e7a4:	strdeq	lr, [r2], -r0
   2e7a8:	strdeq	lr, [r2], -r0
   2e7ac:	strdeq	lr, [r2], -r0
   2e7b0:	strdeq	lr, [r2], -r0
   2e7b4:	strdeq	lr, [r2], -r0
   2e7b8:	strdeq	lr, [r2], -r0
   2e7bc:	strdeq	lr, [r2], -r0
   2e7c0:	strdeq	lr, [r2], -r0
   2e7c4:	strdeq	lr, [r2], -r0
   2e7c8:	strdeq	lr, [r2], -r0
   2e7cc:	strdeq	lr, [r2], -r0
   2e7d0:	strdeq	lr, [r2], -r0
   2e7d4:	strdeq	lr, [r2], -r0
   2e7d8:	strdeq	lr, [r2], -r0
   2e7dc:	strdeq	lr, [r2], -r0
   2e7e0:	strdeq	lr, [r2], -r0
   2e7e4:	strdeq	lr, [r2], -r0
   2e7e8:	strdeq	lr, [r2], -r0
   2e7ec:			; <UNDEFINED> instruction: 0x0002edb4
   2e7f0:	add	r2, r2, #1
   2e7f4:	cmp	r2, r0
   2e7f8:	bcc	2e750 <__assert_fail@plt+0x1bcd4>
   2e7fc:	ldr	r6, [sp, #64]	; 0x40
   2e800:	add	r6, r0, r6
   2e804:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2e808:	bl	125c0 <iswprint@plt>
   2e80c:	cmp	r0, #0
   2e810:	sub	sl, fp, #40	; 0x28
   2e814:	movwne	r0, #1
   2e818:	and	r4, r4, r0
   2e81c:	mov	r0, sl
   2e820:	bl	124f4 <mbsinit@plt>
   2e824:	ldr	ip, [fp, #-84]	; 0xffffffac
   2e828:	ldr	lr, [sp, #84]	; 0x54
   2e82c:	cmp	r0, #0
   2e830:	beq	2e700 <__assert_fail@plt+0x1bc84>
   2e834:	b	2eaa0 <__assert_fail@plt+0x1c024>
   2e838:	ldr	r0, [sp, #24]
   2e83c:	cmp	r0, #0
   2e840:	beq	2e8e8 <__assert_fail@plt+0x1be6c>
   2e844:	add	r0, r7, #2
   2e848:	cmp	r0, lr
   2e84c:	bcs	2e8e8 <__assert_fail@plt+0x1be6c>
   2e850:	add	r1, ip, r7
   2e854:	ldrb	r1, [r1, #1]
   2e858:	cmp	r1, #63	; 0x3f
   2e85c:	bne	2e8e8 <__assert_fail@plt+0x1be6c>
   2e860:	ldrb	r5, [ip, r0]
   2e864:	sub	r1, r5, #33	; 0x21
   2e868:	cmp	r1, #29
   2e86c:	bhi	2e8e8 <__assert_fail@plt+0x1be6c>
   2e870:	movw	r3, #20929	; 0x51c1
   2e874:	mov	r2, #1
   2e878:	movt	r3, #14336	; 0x3800
   2e87c:	tst	r3, r2, lsl r1
   2e880:	beq	2e8e8 <__assert_fail@plt+0x1be6c>
   2e884:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2e888:	tst	r1, #1
   2e88c:	bne	2eed8 <__assert_fail@plt+0x1c45c>
   2e890:	cmp	r9, sl
   2e894:	mov	r7, r0
   2e898:	mov	r4, #0
   2e89c:	movcc	r1, #63	; 0x3f
   2e8a0:	strbcc	r1, [r6, r9]
   2e8a4:	add	r1, r9, #1
   2e8a8:	cmp	r1, sl
   2e8ac:	movcc	r2, #34	; 0x22
   2e8b0:	strbcc	r2, [r6, r1]
   2e8b4:	add	r1, r9, #2
   2e8b8:	cmp	r1, sl
   2e8bc:	movcc	r2, #34	; 0x22
   2e8c0:	strbcc	r2, [r6, r1]
   2e8c4:	add	r1, r9, #3
   2e8c8:	add	r9, r9, #4
   2e8cc:	cmp	r1, sl
   2e8d0:	movcc	r2, #63	; 0x3f
   2e8d4:	strbcc	r2, [r6, r1]
   2e8d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e8dc:	cmp	r0, #0
   2e8e0:	bne	2e2d8 <__assert_fail@plt+0x1b85c>
   2e8e4:	b	2e5b0 <__assert_fail@plt+0x1bb34>
   2e8e8:	mov	r5, #63	; 0x3f
   2e8ec:	mov	r4, #0
   2e8f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e8f4:	cmp	r0, #0
   2e8f8:	bne	2e2d8 <__assert_fail@plt+0x1b85c>
   2e8fc:	b	2e5b0 <__assert_fail@plt+0x1bb34>
   2e900:	mov	r4, #1
   2e904:	mov	r6, #0
   2e908:	sub	sl, fp, #40	; 0x28
   2e90c:	str	r6, [sp, #64]	; 0x40
   2e910:	add	r6, r6, r7
   2e914:	sub	r0, fp, #44	; 0x2c
   2e918:	mov	r3, sl
   2e91c:	add	r1, ip, r6
   2e920:	sub	r2, lr, r6
   2e924:	bl	35638 <__assert_fail@plt+0x22bbc>
   2e928:	cmn	r0, #2
   2e92c:	beq	2ea5c <__assert_fail@plt+0x1bfe0>
   2e930:	cmn	r0, #1
   2e934:	beq	2ea50 <__assert_fail@plt+0x1bfd4>
   2e938:	ldr	r6, [sp, #64]	; 0x40
   2e93c:	cmp	r0, #0
   2e940:	beq	2ea9c <__assert_fail@plt+0x1c020>
   2e944:	add	r6, r0, r6
   2e948:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2e94c:	bl	125c0 <iswprint@plt>
   2e950:	cmp	r0, #0
   2e954:	sub	sl, fp, #40	; 0x28
   2e958:	movwne	r0, #1
   2e95c:	and	r4, r4, r0
   2e960:	mov	r0, sl
   2e964:	bl	124f4 <mbsinit@plt>
   2e968:	ldr	ip, [fp, #-84]	; 0xffffffac
   2e96c:	ldr	lr, [sp, #84]	; 0x54
   2e970:	cmp	r0, #0
   2e974:	beq	2e90c <__assert_fail@plt+0x1be90>
   2e978:	b	2eaa0 <__assert_fail@plt+0x1c024>
   2e97c:	cmp	r9, sl
   2e980:	mov	r2, #1
   2e984:	movcc	r0, #39	; 0x27
   2e988:	strbcc	r0, [r6, r9]
   2e98c:	add	r0, r9, #1
   2e990:	cmp	r0, sl
   2e994:	movcc	r1, #36	; 0x24
   2e998:	strbcc	r1, [r6, r0]
   2e99c:	add	r0, r9, #2
   2e9a0:	cmp	r0, sl
   2e9a4:	movcc	r1, #39	; 0x27
   2e9a8:	strbcc	r1, [r6, r0]
   2e9ac:	add	r0, r9, #3
   2e9b0:	cmp	r0, sl
   2e9b4:	add	r9, r0, #1
   2e9b8:	str	r2, [fp, #-48]	; 0xffffffd0
   2e9bc:	movcc	r1, #92	; 0x5c
   2e9c0:	strbcc	r1, [r6, r0]
   2e9c4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2e9c8:	cmp	r1, #2
   2e9cc:	beq	2ea2c <__assert_fail@plt+0x1bfb0>
   2e9d0:	add	r1, r7, #1
   2e9d4:	mov	r4, #0
   2e9d8:	mov	r8, #1
   2e9dc:	mov	r5, #48	; 0x30
   2e9e0:	cmp	r1, lr
   2e9e4:	bcs	2e2cc <__assert_fail@plt+0x1b850>
   2e9e8:	ldrb	r1, [ip, r1]
   2e9ec:	sub	r1, r1, #48	; 0x30
   2e9f0:	uxtb	r1, r1
   2e9f4:	cmp	r1, #9
   2e9f8:	bhi	2e2cc <__assert_fail@plt+0x1b850>
   2e9fc:	cmp	r9, sl
   2ea00:	movcc	r1, #48	; 0x30
   2ea04:	strbcc	r1, [r6, r9]
   2ea08:	add	r1, r0, #2
   2ea0c:	add	r9, r0, #3
   2ea10:	cmp	r1, sl
   2ea14:	movcc	r2, #48	; 0x30
   2ea18:	strbcc	r2, [r6, r1]
   2ea1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2ea20:	cmp	r0, #0
   2ea24:	bne	2e2d8 <__assert_fail@plt+0x1b85c>
   2ea28:	b	2e5b0 <__assert_fail@plt+0x1bb34>
   2ea2c:	mov	r0, #48	; 0x30
   2ea30:	mov	r8, #1
   2ea34:	mov	r4, #0
   2ea38:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2ea3c:	cmp	r1, #0
   2ea40:	bne	2e5ec <__assert_fail@plt+0x1bb70>
   2ea44:	cmp	r8, #0
   2ea48:	beq	2e568 <__assert_fail@plt+0x1baec>
   2ea4c:	b	2e358 <__assert_fail@plt+0x1b8dc>
   2ea50:	mov	r4, #0
   2ea54:	ldr	ip, [fp, #-84]	; 0xffffffac
   2ea58:	b	2ea94 <__assert_fail@plt+0x1c018>
   2ea5c:	ldr	r1, [sp, #84]	; 0x54
   2ea60:	ldr	ip, [fp, #-84]	; 0xffffffac
   2ea64:	mov	r4, #0
   2ea68:	cmp	r6, r1
   2ea6c:	bcs	2ea94 <__assert_fail@plt+0x1c018>
   2ea70:	ldrb	r0, [ip, r6]
   2ea74:	cmp	r0, #0
   2ea78:	beq	2ea94 <__assert_fail@plt+0x1c018>
   2ea7c:	ldr	r0, [sp, #64]	; 0x40
   2ea80:	add	r0, r0, #1
   2ea84:	add	r6, r0, r7
   2ea88:	str	r0, [sp, #64]	; 0x40
   2ea8c:	cmp	r6, r1
   2ea90:	bcc	2ea70 <__assert_fail@plt+0x1bff4>
   2ea94:	ldr	r6, [sp, #64]	; 0x40
   2ea98:	b	2eaa0 <__assert_fail@plt+0x1c024>
   2ea9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   2eaa0:	mov	r1, r6
   2eaa4:	ldr	r6, [sp, #76]	; 0x4c
   2eaa8:	ldr	sl, [sp, #56]	; 0x38
   2eaac:	ldr	r0, [sp, #44]	; 0x2c
   2eab0:	cmp	r1, #1
   2eab4:	orr	r2, r4, r0
   2eab8:	mov	r0, r1
   2eabc:	bhi	2eadc <__assert_fail@plt+0x1c060>
   2eac0:	tst	r2, #1
   2eac4:	beq	2eadc <__assert_fail@plt+0x1c060>
   2eac8:	ldr	lr, [sp, #84]	; 0x54
   2eacc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2ead0:	cmp	r0, #0
   2ead4:	bne	2e2d8 <__assert_fail@plt+0x1b85c>
   2ead8:	b	2e5b0 <__assert_fail@plt+0x1bb34>
   2eadc:	str	r2, [sp, #64]	; 0x40
   2eae0:	add	r0, r0, r7
   2eae4:	add	r1, r7, #1
   2eae8:	ldr	lr, [sp, #84]	; 0x54
   2eaec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2eaf0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2eaf4:	mov	r3, #0
   2eaf8:	str	r0, [sp, #56]	; 0x38
   2eafc:	ldr	r0, [sp, #64]	; 0x40
   2eb00:	tst	r0, #1
   2eb04:	bne	2ebec <__assert_fail@plt+0x1c170>
   2eb08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2eb0c:	tst	r0, #1
   2eb10:	bne	2ed8c <__assert_fail@plt+0x1c310>
   2eb14:	ldr	r3, [fp, #-80]	; 0xffffffb0
   2eb18:	cmp	r7, #2
   2eb1c:	movwne	r3, #1
   2eb20:	orr	r3, r3, r2
   2eb24:	tst	r3, #1
   2eb28:	bne	2eb60 <__assert_fail@plt+0x1c0e4>
   2eb2c:	cmp	r9, sl
   2eb30:	add	r3, r9, #1
   2eb34:	movcc	r2, #39	; 0x27
   2eb38:	strbcc	r2, [r6, r9]
   2eb3c:	cmp	r3, sl
   2eb40:	movcc	r2, #36	; 0x24
   2eb44:	strbcc	r2, [r6, r3]
   2eb48:	add	r3, r9, #2
   2eb4c:	add	r9, r9, #3
   2eb50:	cmp	r3, sl
   2eb54:	movcc	r2, #39	; 0x27
   2eb58:	strbcc	r2, [r6, r3]
   2eb5c:	mov	r2, #1
   2eb60:	cmp	r9, sl
   2eb64:	mov	r0, r2
   2eb68:	movcc	r3, #92	; 0x5c
   2eb6c:	strbcc	r3, [r6, r9]
   2eb70:	add	r3, r9, #1
   2eb74:	cmp	r3, sl
   2eb78:	andcc	r7, r5, #192	; 0xc0
   2eb7c:	movcc	r2, #48	; 0x30
   2eb80:	orrcc	r7, r2, r7, lsr #6
   2eb84:	strbcc	r7, [r6, r3]
   2eb88:	add	r3, r9, #2
   2eb8c:	add	r9, r9, #3
   2eb90:	cmp	r3, sl
   2eb94:	lsrcc	r7, r5, #3
   2eb98:	movcc	r2, #6
   2eb9c:	bficc	r7, r2, #3, #29
   2eba0:	mov	r2, #6
   2eba4:	strbcc	r7, [r6, r3]
   2eba8:	bfi	r5, r2, #3, #29
   2ebac:	mov	r3, #1
   2ebb0:	mov	r2, r0
   2ebb4:	ldr	r0, [sp, #56]	; 0x38
   2ebb8:	and	r8, r3, #1
   2ebbc:	cmp	r0, r1
   2ebc0:	bhi	2ec20 <__assert_fail@plt+0x1c1a4>
   2ebc4:	b	2ec60 <__assert_fail@plt+0x1c1e4>
   2ebc8:	cmp	r9, sl
   2ebcc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2ebd0:	strbcc	r5, [r6, r9]
   2ebd4:	add	r9, r9, #1
   2ebd8:	ldrb	r5, [ip, r1]
   2ebdc:	add	r1, r1, #1
   2ebe0:	ldr	r0, [sp, #64]	; 0x40
   2ebe4:	tst	r0, #1
   2ebe8:	beq	2eb08 <__assert_fail@plt+0x1c08c>
   2ebec:	ldr	r7, [fp, #-56]	; 0xffffffc8
   2ebf0:	tst	r7, #1
   2ebf4:	beq	2ec08 <__assert_fail@plt+0x1c18c>
   2ebf8:	cmp	r9, sl
   2ebfc:	movcc	r7, #92	; 0x5c
   2ec00:	strbcc	r7, [r6, r9]
   2ec04:	add	r9, r9, #1
   2ec08:	mov	r7, #0
   2ec0c:	str	r7, [fp, #-56]	; 0xffffffc8
   2ec10:	ldr	r0, [sp, #56]	; 0x38
   2ec14:	and	r8, r3, #1
   2ec18:	cmp	r0, r1
   2ec1c:	bls	2ec60 <__assert_fail@plt+0x1c1e4>
   2ec20:	cmp	r8, #0
   2ec24:	mvn	r7, r2
   2ec28:	movwne	r8, #1
   2ec2c:	orr	r7, r7, r8
   2ec30:	tst	r7, #1
   2ec34:	bne	2ebc8 <__assert_fail@plt+0x1c14c>
   2ec38:	cmp	r9, sl
   2ec3c:	movcc	r7, #39	; 0x27
   2ec40:	strbcc	r7, [r6, r9]
   2ec44:	add	r7, r9, #1
   2ec48:	add	r9, r9, #2
   2ec4c:	cmp	r7, sl
   2ec50:	movcc	r2, #39	; 0x27
   2ec54:	strbcc	r2, [r6, r7]
   2ec58:	mov	r2, #0
   2ec5c:	b	2ebc8 <__assert_fail@plt+0x1c14c>
   2ec60:	cmp	r8, #0
   2ec64:	sub	r7, r1, #1
   2ec68:	mov	r0, r5
   2ec6c:	str	r2, [fp, #-48]	; 0xffffffd0
   2ec70:	movwne	r8, #1
   2ec74:	cmp	r8, #0
   2ec78:	beq	2e568 <__assert_fail@plt+0x1baec>
   2ec7c:	b	2e358 <__assert_fail@plt+0x1b8dc>
   2ec80:	mov	lr, r7
   2ec84:	b	2ec8c <__assert_fail@plt+0x1c210>
   2ec88:	mvn	lr, #0
   2ec8c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2ec90:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2ec94:	eor	r0, r7, #2
   2ec98:	orr	r0, r0, r9
   2ec9c:	clz	r0, r0
   2eca0:	lsr	r0, r0, #5
   2eca4:	tst	r1, r0
   2eca8:	bne	2eda8 <__assert_fail@plt+0x1c32c>
   2ecac:	mov	r0, r1
   2ecb0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2ecb4:	cmp	r7, #2
   2ecb8:	movwne	r1, #1
   2ecbc:	orr	r0, r0, r1
   2ecc0:	tst	r0, #1
   2ecc4:	ldreq	r0, [sp, #52]	; 0x34
   2ecc8:	streq	lr, [sp, #84]	; 0x54
   2eccc:	eoreq	r0, r0, #1
   2ecd0:	tsteq	r0, #1
   2ecd4:	bne	2ee6c <__assert_fail@plt+0x1c3f0>
   2ecd8:	tst	r4, #1
   2ecdc:	bne	2ee28 <__assert_fail@plt+0x1c3ac>
   2ece0:	ldr	r6, [sp, #48]	; 0x30
   2ece4:	mov	r8, #0
   2ece8:	cmp	r6, #0
   2ecec:	beq	2ee64 <__assert_fail@plt+0x1c3e8>
   2ecf0:	ldr	r0, [sp, #80]	; 0x50
   2ecf4:	mov	r1, #0
   2ecf8:	cmp	sl, #0
   2ecfc:	mov	r4, #0
   2ed00:	str	r1, [fp, #-72]	; 0xffffffb8
   2ed04:	beq	2dbf8 <__assert_fail@plt+0x1b17c>
   2ed08:	b	2ee6c <__assert_fail@plt+0x1c3f0>
   2ed0c:	ldrb	r1, [r0, #3]
   2ed10:	cmp	r1, #56	; 0x38
   2ed14:	ldrbeq	r1, [r0, #4]
   2ed18:	cmpeq	r1, #48	; 0x30
   2ed1c:	bne	2ddf0 <__assert_fail@plt+0x1b374>
   2ed20:	ldrb	r1, [r0, #5]
   2ed24:	cmp	r1, #51	; 0x33
   2ed28:	ldrbeq	r1, [r0, #6]
   2ed2c:	cmpeq	r1, #48	; 0x30
   2ed30:	bne	2ddf0 <__assert_fail@plt+0x1b374>
   2ed34:	ldrb	r0, [r0, #7]
   2ed38:	cmp	r0, #0
   2ed3c:	movw	r0, #7758	; 0x1e4e
   2ed40:	movt	r0, #5
   2ed44:	str	r0, [sp, #68]	; 0x44
   2ed48:	bne	2ddf0 <__assert_fail@plt+0x1b374>
   2ed4c:	b	2de0c <__assert_fail@plt+0x1b390>
   2ed50:	ldrb	r1, [r0, #4]
   2ed54:	cmp	r1, #48	; 0x30
   2ed58:	ldrbeq	r1, [r0, #5]
   2ed5c:	cmpeq	r1, #51	; 0x33
   2ed60:	bne	2ded4 <__assert_fail@plt+0x1b458>
   2ed64:	ldrb	r1, [r0, #6]
   2ed68:	cmp	r1, #48	; 0x30
   2ed6c:	ldrbeq	r0, [r0, #7]
   2ed70:	cmpeq	r0, #0
   2ed74:	bne	2ded4 <__assert_fail@plt+0x1b458>
   2ed78:	movw	r0, #7762	; 0x1e52
   2ed7c:	movt	r0, #5
   2ed80:	str	r0, [sp, #72]	; 0x48
   2ed84:	b	2def4 <__assert_fail@plt+0x1b478>
   2ed88:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2ed8c:	ldr	r2, [sp, #80]	; 0x50
   2ed90:	b	2edc8 <__assert_fail@plt+0x1c34c>
   2ed94:	ldr	ip, [fp, #-84]	; 0xffffffac
   2ed98:	mov	r2, #1
   2ed9c:	mov	lr, r4
   2eda0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2eda4:	b	2edc8 <__assert_fail@plt+0x1c34c>
   2eda8:	ldr	r2, [sp, #80]	; 0x50
   2edac:	mov	r7, #2
   2edb0:	b	2edc8 <__assert_fail@plt+0x1c34c>
   2edb4:	ldr	r6, [sp, #76]	; 0x4c
   2edb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   2edbc:	ldr	lr, [sp, #84]	; 0x54
   2edc0:	ldr	r2, [sp, #80]	; 0x50
   2edc4:	mov	r7, #2
   2edc8:	mov	r0, #0
   2edcc:	ldr	r1, [fp, #12]
   2edd0:	tst	r2, #1
   2edd4:	mov	r2, r7
   2edd8:	mov	r3, lr
   2eddc:	str	r0, [sp, #8]
   2ede0:	ldr	r0, [sp, #68]	; 0x44
   2ede4:	movwne	r2, #4
   2ede8:	cmp	r7, #2
   2edec:	movne	r2, r7
   2edf0:	str	r2, [sp]
   2edf4:	mov	r2, ip
   2edf8:	bic	r1, r1, #2
   2edfc:	str	r0, [sp, #12]
   2ee00:	ldr	r0, [sp, #72]	; 0x48
   2ee04:	str	r1, [sp, #4]
   2ee08:	mov	r1, sl
   2ee0c:	str	r0, [sp, #16]
   2ee10:	mov	r0, r6
   2ee14:	bl	2db7c <__assert_fail@plt+0x1b100>
   2ee18:	mov	r9, r0
   2ee1c:	mov	r0, r9
   2ee20:	sub	sp, fp, #28
   2ee24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ee28:	mov	r0, #5
   2ee2c:	ldr	r1, [sp, #48]	; 0x30
   2ee30:	ldr	r2, [fp, #-84]	; 0xffffffac
   2ee34:	ldr	r3, [sp, #84]	; 0x54
   2ee38:	str	r0, [sp]
   2ee3c:	ldr	r0, [fp, #12]
   2ee40:	str	r0, [sp, #4]
   2ee44:	ldr	r0, [fp, #16]
   2ee48:	str	r0, [sp, #8]
   2ee4c:	ldr	r0, [sp, #68]	; 0x44
   2ee50:	str	r0, [sp, #12]
   2ee54:	ldr	r0, [sp, #72]	; 0x48
   2ee58:	str	r0, [sp, #16]
   2ee5c:	ldr	r0, [sp, #76]	; 0x4c
   2ee60:	b	2ee14 <__assert_fail@plt+0x1c398>
   2ee64:	mov	r0, #0
   2ee68:	str	r0, [fp, #-72]	; 0xffffffb8
   2ee6c:	ldr	r1, [sp, #92]	; 0x5c
   2ee70:	cmp	r1, #0
   2ee74:	beq	2eeb4 <__assert_fail@plt+0x1c438>
   2ee78:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2ee7c:	ldr	r2, [sp, #76]	; 0x4c
   2ee80:	tst	r0, #1
   2ee84:	bne	2eeb8 <__assert_fail@plt+0x1c43c>
   2ee88:	ldrb	r0, [r1]
   2ee8c:	cmp	r0, #0
   2ee90:	beq	2eeb8 <__assert_fail@plt+0x1c43c>
   2ee94:	add	r1, r1, #1
   2ee98:	cmp	r9, sl
   2ee9c:	strbcc	r0, [r2, r9]
   2eea0:	add	r9, r9, #1
   2eea4:	ldrb	r0, [r1], #1
   2eea8:	cmp	r0, #0
   2eeac:	bne	2ee98 <__assert_fail@plt+0x1c41c>
   2eeb0:	b	2eeb8 <__assert_fail@plt+0x1c43c>
   2eeb4:	ldr	r2, [sp, #76]	; 0x4c
   2eeb8:	cmp	r9, sl
   2eebc:	movcc	r0, #0
   2eec0:	strbcc	r0, [r2, r9]
   2eec4:	mov	r0, r9
   2eec8:	sub	sp, fp, #28
   2eecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eed0:	mov	r2, #1
   2eed4:	b	2eda0 <__assert_fail@plt+0x1c324>
   2eed8:	ldr	r2, [sp, #80]	; 0x50
   2eedc:	mov	r7, #5
   2eee0:	b	2edc8 <__assert_fail@plt+0x1c34c>
   2eee4:	bl	12a28 <abort@plt>
   2eee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eeec:	add	fp, sp, #28
   2eef0:	sub	sp, sp, #28
   2eef4:	movw	r5, #15624	; 0x3d08
   2eef8:	cmp	r2, #0
   2eefc:	mov	r4, r1
   2ef00:	mov	r7, r0
   2ef04:	str	r0, [sp, #20]
   2ef08:	movt	r5, #6
   2ef0c:	movne	r5, r2
   2ef10:	bl	127d0 <__errno_location@plt>
   2ef14:	mov	sl, r0
   2ef18:	ldm	r5, {r0, r1}
   2ef1c:	ldr	r2, [r5, #40]	; 0x28
   2ef20:	ldr	r3, [r5, #44]	; 0x2c
   2ef24:	add	r9, r5, #8
   2ef28:	ldr	r6, [sl]
   2ef2c:	orr	r8, r1, #1
   2ef30:	mov	r1, #0
   2ef34:	str	r6, [sp, #24]
   2ef38:	stm	sp, {r0, r8, r9}
   2ef3c:	str	r2, [sp, #12]
   2ef40:	str	r3, [sp, #16]
   2ef44:	mov	r0, #0
   2ef48:	mov	r2, r7
   2ef4c:	mov	r3, r4
   2ef50:	mov	r6, r4
   2ef54:	bl	2db7c <__assert_fail@plt+0x1b100>
   2ef58:	add	r7, r0, #1
   2ef5c:	mov	r0, r7
   2ef60:	bl	30a1c <__assert_fail@plt+0x1dfa0>
   2ef64:	mov	r4, r0
   2ef68:	ldr	r0, [r5]
   2ef6c:	ldr	r2, [r5, #44]	; 0x2c
   2ef70:	ldr	r1, [r5, #40]	; 0x28
   2ef74:	mov	r3, r6
   2ef78:	stm	sp, {r0, r8, r9}
   2ef7c:	str	r2, [sp, #16]
   2ef80:	str	r1, [sp, #12]
   2ef84:	mov	r0, r4
   2ef88:	mov	r1, r7
   2ef8c:	ldr	r2, [sp, #20]
   2ef90:	bl	2db7c <__assert_fail@plt+0x1b100>
   2ef94:	ldr	r0, [sp, #24]
   2ef98:	str	r0, [sl]
   2ef9c:	mov	r0, r4
   2efa0:	sub	sp, fp, #28
   2efa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2efa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efac:	add	fp, sp, #28
   2efb0:	sub	sp, sp, #36	; 0x24
   2efb4:	movw	r8, #15624	; 0x3d08
   2efb8:	cmp	r3, #0
   2efbc:	mov	r4, r2
   2efc0:	str	r2, [sp, #24]
   2efc4:	mov	r5, r1
   2efc8:	mov	r6, r0
   2efcc:	str	r0, [sp, #20]
   2efd0:	movt	r8, #6
   2efd4:	movne	r8, r3
   2efd8:	bl	127d0 <__errno_location@plt>
   2efdc:	str	r0, [sp, #28]
   2efe0:	cmp	r4, #0
   2efe4:	add	sl, r8, #8
   2efe8:	ldm	r8, {r3, r9}
   2efec:	ldr	r7, [r0]
   2eff0:	ldr	r1, [r8, #40]	; 0x28
   2eff4:	ldr	r2, [r8, #44]	; 0x2c
   2eff8:	mov	r0, #0
   2effc:	orreq	r9, r9, #1
   2f000:	str	r7, [sp, #32]
   2f004:	mov	r7, r5
   2f008:	stm	sp, {r3, r9, sl}
   2f00c:	str	r1, [sp, #12]
   2f010:	str	r2, [sp, #16]
   2f014:	mov	r1, #0
   2f018:	mov	r2, r6
   2f01c:	mov	r3, r5
   2f020:	bl	2db7c <__assert_fail@plt+0x1b100>
   2f024:	add	r4, r0, #1
   2f028:	mov	r5, r0
   2f02c:	mov	r0, r4
   2f030:	bl	30a1c <__assert_fail@plt+0x1dfa0>
   2f034:	mov	r6, r0
   2f038:	ldr	r0, [r8]
   2f03c:	ldr	r2, [r8, #44]	; 0x2c
   2f040:	ldr	r1, [r8, #40]	; 0x28
   2f044:	mov	r3, r7
   2f048:	stm	sp, {r0, r9, sl}
   2f04c:	str	r2, [sp, #16]
   2f050:	str	r1, [sp, #12]
   2f054:	mov	r0, r6
   2f058:	mov	r1, r4
   2f05c:	ldr	r2, [sp, #20]
   2f060:	bl	2db7c <__assert_fail@plt+0x1b100>
   2f064:	ldr	r0, [sp, #24]
   2f068:	ldr	r1, [sp, #32]
   2f06c:	ldr	r2, [sp, #28]
   2f070:	cmp	r0, #0
   2f074:	str	r1, [r2]
   2f078:	strne	r5, [r0]
   2f07c:	mov	r0, r6
   2f080:	sub	sp, fp, #28
   2f084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f088:	push	{r4, r5, r6, r7, fp, lr}
   2f08c:	add	fp, sp, #16
   2f090:	movw	r4, #13600	; 0x3520
   2f094:	movt	r4, #6
   2f098:	ldrd	r6, [r4]
   2f09c:	cmp	r7, #2
   2f0a0:	blt	2f0cc <__assert_fail@plt+0x1c650>
   2f0a4:	add	r5, r6, #12
   2f0a8:	mov	r7, #0
   2f0ac:	ldr	r0, [r5, r7, lsl #3]
   2f0b0:	bl	32c40 <__assert_fail@plt+0x201c4>
   2f0b4:	ldr	r1, [r4, #4]
   2f0b8:	add	r2, r7, #2
   2f0bc:	add	r0, r7, #1
   2f0c0:	mov	r7, r0
   2f0c4:	cmp	r2, r1
   2f0c8:	blt	2f0ac <__assert_fail@plt+0x1c630>
   2f0cc:	ldr	r0, [r6, #4]
   2f0d0:	movw	r5, #15672	; 0x3d38
   2f0d4:	movt	r5, #6
   2f0d8:	cmp	r0, r5
   2f0dc:	beq	2f0f0 <__assert_fail@plt+0x1c674>
   2f0e0:	bl	32c40 <__assert_fail@plt+0x201c4>
   2f0e4:	mov	r0, #256	; 0x100
   2f0e8:	str	r0, [r4, #8]
   2f0ec:	str	r5, [r4, #12]
   2f0f0:	add	r5, r4, #8
   2f0f4:	cmp	r6, r5
   2f0f8:	beq	2f108 <__assert_fail@plt+0x1c68c>
   2f0fc:	mov	r0, r6
   2f100:	bl	32c40 <__assert_fail@plt+0x201c4>
   2f104:	str	r5, [r4]
   2f108:	mov	r0, #1
   2f10c:	str	r0, [r4, #4]
   2f110:	pop	{r4, r5, r6, r7, fp, pc}
   2f114:	movw	r3, #15624	; 0x3d08
   2f118:	mvn	r2, #0
   2f11c:	movt	r3, #6
   2f120:	b	2f124 <__assert_fail@plt+0x1c6a8>
   2f124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f128:	add	fp, sp, #28
   2f12c:	sub	sp, sp, #44	; 0x2c
   2f130:	mov	r7, r3
   2f134:	str	r2, [sp, #36]	; 0x24
   2f138:	str	r1, [sp, #32]
   2f13c:	mov	r5, r0
   2f140:	bl	127d0 <__errno_location@plt>
   2f144:	cmp	r5, #0
   2f148:	blt	2f2ac <__assert_fail@plt+0x1c830>
   2f14c:	cmn	r5, #-2147483647	; 0x80000001
   2f150:	beq	2f2ac <__assert_fail@plt+0x1c830>
   2f154:	movw	r8, #13600	; 0x3520
   2f158:	mov	r4, r0
   2f15c:	movt	r8, #6
   2f160:	ldr	r6, [r8]
   2f164:	ldr	r1, [r8, #4]
   2f168:	ldr	r0, [r0]
   2f16c:	str	r4, [sp, #28]
   2f170:	cmp	r1, r5
   2f174:	str	r0, [sp, #24]
   2f178:	ble	2f184 <__assert_fail@plt+0x1c708>
   2f17c:	mov	sl, r6
   2f180:	b	2f1e8 <__assert_fail@plt+0x1c76c>
   2f184:	mov	r0, #8
   2f188:	add	r9, r8, #8
   2f18c:	add	r2, r5, #1
   2f190:	str	r1, [fp, #-32]	; 0xffffffe0
   2f194:	mvn	r3, #-2147483648	; 0x80000000
   2f198:	str	r0, [sp]
   2f19c:	subs	r0, r6, r9
   2f1a0:	sub	r2, r2, r1
   2f1a4:	sub	r1, fp, #32
   2f1a8:	movne	r0, r6
   2f1ac:	bl	30c1c <__assert_fail@plt+0x1e1a0>
   2f1b0:	str	r0, [r8]
   2f1b4:	cmp	r6, r9
   2f1b8:	mov	sl, r0
   2f1bc:	ldrdeq	r0, [r8, #8]
   2f1c0:	stmeq	sl, {r0, r1}
   2f1c4:	ldr	r1, [r8, #4]
   2f1c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f1cc:	add	r0, sl, r1, lsl #3
   2f1d0:	sub	r1, r2, r1
   2f1d4:	lsl	r2, r1, #3
   2f1d8:	mov	r1, #0
   2f1dc:	bl	12800 <memset@plt>
   2f1e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f1e4:	str	r0, [r8, #4]
   2f1e8:	mov	r9, sl
   2f1ec:	ldr	r6, [r9, r5, lsl #3]!
   2f1f0:	ldr	r4, [r9, #4]!
   2f1f4:	ldm	r7, {r0, r1}
   2f1f8:	ldr	r2, [r7, #40]	; 0x28
   2f1fc:	ldr	r3, [r7, #44]	; 0x2c
   2f200:	orr	r8, r1, #1
   2f204:	add	r1, r7, #8
   2f208:	stm	sp, {r0, r8}
   2f20c:	add	r0, sp, #8
   2f210:	str	r1, [sp, #20]
   2f214:	stm	r0, {r1, r2, r3}
   2f218:	mov	r0, r4
   2f21c:	mov	r1, r6
   2f220:	ldr	r2, [sp, #32]
   2f224:	ldr	r3, [sp, #36]	; 0x24
   2f228:	bl	2db7c <__assert_fail@plt+0x1b100>
   2f22c:	cmp	r6, r0
   2f230:	bhi	2f294 <__assert_fail@plt+0x1c818>
   2f234:	add	r6, r0, #1
   2f238:	movw	r0, #15672	; 0x3d38
   2f23c:	movt	r0, #6
   2f240:	str	r6, [sl, r5, lsl #3]
   2f244:	cmp	r4, r0
   2f248:	beq	2f254 <__assert_fail@plt+0x1c7d8>
   2f24c:	mov	r0, r4
   2f250:	bl	32c40 <__assert_fail@plt+0x201c4>
   2f254:	mov	r0, r6
   2f258:	bl	30a1c <__assert_fail@plt+0x1dfa0>
   2f25c:	str	r0, [r9]
   2f260:	mov	r4, r0
   2f264:	add	r3, sp, #8
   2f268:	ldr	r0, [r7]
   2f26c:	ldr	r1, [r7, #40]	; 0x28
   2f270:	ldr	r2, [r7, #44]	; 0x2c
   2f274:	stm	sp, {r0, r8}
   2f278:	ldr	r0, [sp, #20]
   2f27c:	stm	r3, {r0, r1, r2}
   2f280:	mov	r0, r4
   2f284:	mov	r1, r6
   2f288:	ldr	r2, [sp, #32]
   2f28c:	ldr	r3, [sp, #36]	; 0x24
   2f290:	bl	2db7c <__assert_fail@plt+0x1b100>
   2f294:	ldr	r1, [sp, #24]
   2f298:	ldr	r0, [sp, #28]
   2f29c:	str	r1, [r0]
   2f2a0:	mov	r0, r4
   2f2a4:	sub	sp, fp, #28
   2f2a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f2ac:	bl	12a28 <abort@plt>
   2f2b0:	movw	r3, #15624	; 0x3d08
   2f2b4:	movt	r3, #6
   2f2b8:	b	2f124 <__assert_fail@plt+0x1c6a8>
   2f2bc:	movw	r3, #15624	; 0x3d08
   2f2c0:	mov	r1, r0
   2f2c4:	mov	r0, #0
   2f2c8:	mvn	r2, #0
   2f2cc:	movt	r3, #6
   2f2d0:	b	2f124 <__assert_fail@plt+0x1c6a8>
   2f2d4:	movw	r3, #15624	; 0x3d08
   2f2d8:	mov	r2, r1
   2f2dc:	mov	r1, r0
   2f2e0:	mov	r0, #0
   2f2e4:	movt	r3, #6
   2f2e8:	b	2f124 <__assert_fail@plt+0x1c6a8>
   2f2ec:	push	{fp, lr}
   2f2f0:	mov	fp, sp
   2f2f4:	sub	sp, sp, #48	; 0x30
   2f2f8:	vmov.i32	q8, #0	; 0x00000000
   2f2fc:	mov	ip, #32
   2f300:	mov	r3, sp
   2f304:	mov	lr, r2
   2f308:	cmp	r1, #10
   2f30c:	add	r2, r3, #16
   2f310:	vst1.64	{d16-d17}, [r3], ip
   2f314:	vst1.64	{d16-d17}, [r3]
   2f318:	vst1.64	{d16-d17}, [r2]
   2f31c:	beq	2f33c <__assert_fail@plt+0x1c8c0>
   2f320:	str	r1, [sp]
   2f324:	mov	r3, sp
   2f328:	mov	r1, lr
   2f32c:	mvn	r2, #0
   2f330:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f334:	mov	sp, fp
   2f338:	pop	{fp, pc}
   2f33c:	bl	12a28 <abort@plt>
   2f340:	push	{r4, sl, fp, lr}
   2f344:	add	fp, sp, #8
   2f348:	sub	sp, sp, #48	; 0x30
   2f34c:	mov	ip, r3
   2f350:	mov	r3, sp
   2f354:	vmov.i32	q8, #0	; 0x00000000
   2f358:	mov	lr, #32
   2f35c:	cmp	r1, #10
   2f360:	add	r4, r3, #16
   2f364:	vst1.64	{d16-d17}, [r3], lr
   2f368:	vst1.64	{d16-d17}, [r3]
   2f36c:	vst1.64	{d16-d17}, [r4]
   2f370:	beq	2f390 <__assert_fail@plt+0x1c914>
   2f374:	str	r1, [sp]
   2f378:	mov	r1, r2
   2f37c:	mov	r3, sp
   2f380:	mov	r2, ip
   2f384:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f388:	sub	sp, fp, #8
   2f38c:	pop	{r4, sl, fp, pc}
   2f390:	bl	12a28 <abort@plt>
   2f394:	push	{fp, lr}
   2f398:	mov	fp, sp
   2f39c:	sub	sp, sp, #48	; 0x30
   2f3a0:	mov	r3, sp
   2f3a4:	vmov.i32	q8, #0	; 0x00000000
   2f3a8:	mov	ip, #32
   2f3ac:	cmp	r0, #10
   2f3b0:	add	r2, r3, #16
   2f3b4:	vst1.64	{d16-d17}, [r3], ip
   2f3b8:	vst1.64	{d16-d17}, [r3]
   2f3bc:	vst1.64	{d16-d17}, [r2]
   2f3c0:	beq	2f3e0 <__assert_fail@plt+0x1c964>
   2f3c4:	str	r0, [sp]
   2f3c8:	mov	r3, sp
   2f3cc:	mov	r0, #0
   2f3d0:	mvn	r2, #0
   2f3d4:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f3d8:	mov	sp, fp
   2f3dc:	pop	{fp, pc}
   2f3e0:	bl	12a28 <abort@plt>
   2f3e4:	push	{fp, lr}
   2f3e8:	mov	fp, sp
   2f3ec:	sub	sp, sp, #48	; 0x30
   2f3f0:	mov	r3, sp
   2f3f4:	vmov.i32	q8, #0	; 0x00000000
   2f3f8:	mov	ip, #32
   2f3fc:	cmp	r0, #10
   2f400:	add	lr, r3, #16
   2f404:	vst1.64	{d16-d17}, [r3], ip
   2f408:	vst1.64	{d16-d17}, [r3]
   2f40c:	vst1.64	{d16-d17}, [lr]
   2f410:	beq	2f42c <__assert_fail@plt+0x1c9b0>
   2f414:	str	r0, [sp]
   2f418:	mov	r3, sp
   2f41c:	mov	r0, #0
   2f420:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f424:	mov	sp, fp
   2f428:	pop	{fp, pc}
   2f42c:	bl	12a28 <abort@plt>
   2f430:	push	{r4, sl, fp, lr}
   2f434:	add	fp, sp, #8
   2f438:	sub	sp, sp, #48	; 0x30
   2f43c:	mov	lr, r0
   2f440:	movw	r0, #15624	; 0x3d08
   2f444:	mov	r3, #32
   2f448:	mov	ip, r1
   2f44c:	mov	r4, #1
   2f450:	movt	r0, #6
   2f454:	add	r1, r0, #16
   2f458:	vld1.64	{d16-d17}, [r0], r3
   2f45c:	mov	r3, sp
   2f460:	vld1.64	{d18-d19}, [r1]
   2f464:	add	r1, r3, #16
   2f468:	vld1.64	{d20-d21}, [r0]
   2f46c:	add	r0, r3, #32
   2f470:	vst1.64	{d18-d19}, [r1]
   2f474:	mov	r1, r3
   2f478:	vst1.64	{d20-d21}, [r0]
   2f47c:	mov	r0, #28
   2f480:	and	r0, r0, r2, lsr #3
   2f484:	and	r2, r2, #31
   2f488:	vst1.64	{d16-d17}, [r1], r0
   2f48c:	ldr	r0, [r1, #8]
   2f490:	bic	r4, r4, r0, lsr r2
   2f494:	eor	r0, r0, r4, lsl r2
   2f498:	mov	r2, ip
   2f49c:	str	r0, [r1, #8]
   2f4a0:	mov	r0, #0
   2f4a4:	mov	r1, lr
   2f4a8:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f4ac:	sub	sp, fp, #8
   2f4b0:	pop	{r4, sl, fp, pc}
   2f4b4:	push	{fp, lr}
   2f4b8:	mov	fp, sp
   2f4bc:	sub	sp, sp, #48	; 0x30
   2f4c0:	mov	ip, r0
   2f4c4:	movw	r0, #15624	; 0x3d08
   2f4c8:	mov	r3, #32
   2f4cc:	movt	r0, #6
   2f4d0:	add	r2, r0, #16
   2f4d4:	vld1.64	{d16-d17}, [r0], r3
   2f4d8:	mov	r3, sp
   2f4dc:	vld1.64	{d18-d19}, [r2]
   2f4e0:	add	r2, r3, #16
   2f4e4:	vld1.64	{d20-d21}, [r0]
   2f4e8:	add	r0, r3, #32
   2f4ec:	vst1.64	{d18-d19}, [r2]
   2f4f0:	mov	r2, r3
   2f4f4:	vst1.64	{d20-d21}, [r0]
   2f4f8:	mov	r0, #28
   2f4fc:	and	r0, r0, r1, lsr #3
   2f500:	and	r1, r1, #31
   2f504:	vst1.64	{d16-d17}, [r2], r0
   2f508:	mov	r0, #1
   2f50c:	ldr	lr, [r2, #8]
   2f510:	bic	r0, r0, lr, lsr r1
   2f514:	eor	r0, lr, r0, lsl r1
   2f518:	mov	r1, ip
   2f51c:	str	r0, [r2, #8]
   2f520:	mov	r0, #0
   2f524:	mvn	r2, #0
   2f528:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f52c:	mov	sp, fp
   2f530:	pop	{fp, pc}
   2f534:	push	{fp, lr}
   2f538:	mov	fp, sp
   2f53c:	sub	sp, sp, #48	; 0x30
   2f540:	movw	r2, #15624	; 0x3d08
   2f544:	mov	r3, #32
   2f548:	mov	r1, r0
   2f54c:	movt	r2, #6
   2f550:	add	r0, r2, #16
   2f554:	vld1.64	{d16-d17}, [r2], r3
   2f558:	mov	r3, sp
   2f55c:	vld1.64	{d18-d19}, [r0]
   2f560:	add	r0, r3, #16
   2f564:	vld1.64	{d20-d21}, [r2]
   2f568:	mov	r2, r3
   2f56c:	vst1.64	{d18-d19}, [r0]
   2f570:	add	r0, r3, #32
   2f574:	vst1.64	{d20-d21}, [r0]
   2f578:	mov	r0, #12
   2f57c:	vst1.64	{d16-d17}, [r2], r0
   2f580:	ldr	r0, [r2]
   2f584:	orr	r0, r0, #67108864	; 0x4000000
   2f588:	str	r0, [r2]
   2f58c:	mov	r0, #0
   2f590:	mvn	r2, #0
   2f594:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f598:	mov	sp, fp
   2f59c:	pop	{fp, pc}
   2f5a0:	push	{fp, lr}
   2f5a4:	mov	fp, sp
   2f5a8:	sub	sp, sp, #48	; 0x30
   2f5ac:	mov	ip, r1
   2f5b0:	mov	r1, r0
   2f5b4:	movw	r0, #15624	; 0x3d08
   2f5b8:	mov	r3, #32
   2f5bc:	movt	r0, #6
   2f5c0:	add	r2, r0, #16
   2f5c4:	vld1.64	{d16-d17}, [r0], r3
   2f5c8:	mov	r3, sp
   2f5cc:	vld1.64	{d18-d19}, [r2]
   2f5d0:	add	r2, r3, #16
   2f5d4:	vld1.64	{d20-d21}, [r0]
   2f5d8:	add	r0, r3, #32
   2f5dc:	vst1.64	{d18-d19}, [r2]
   2f5e0:	mov	r2, r3
   2f5e4:	vst1.64	{d20-d21}, [r0]
   2f5e8:	mov	r0, #12
   2f5ec:	vst1.64	{d16-d17}, [r2], r0
   2f5f0:	ldr	r0, [r2]
   2f5f4:	orr	r0, r0, #67108864	; 0x4000000
   2f5f8:	str	r0, [r2]
   2f5fc:	mov	r0, #0
   2f600:	mov	r2, ip
   2f604:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f608:	mov	sp, fp
   2f60c:	pop	{fp, pc}
   2f610:	push	{r4, sl, fp, lr}
   2f614:	add	fp, sp, #8
   2f618:	sub	sp, sp, #96	; 0x60
   2f61c:	mov	ip, r2
   2f620:	mov	r2, sp
   2f624:	vmov.i32	q8, #0	; 0x00000000
   2f628:	mov	r4, #28
   2f62c:	cmp	r1, #10
   2f630:	mov	r3, r2
   2f634:	add	lr, r2, #16
   2f638:	vst1.64	{d16-d17}, [r3], r4
   2f63c:	vst1.64	{d16-d17}, [lr]
   2f640:	vst1.32	{d16-d17}, [r3]
   2f644:	beq	2f694 <__assert_fail@plt+0x1cc18>
   2f648:	vld1.64	{d16-d17}, [r2], r4
   2f64c:	vld1.64	{d18-d19}, [lr]
   2f650:	add	r3, sp, #48	; 0x30
   2f654:	add	r4, r3, #4
   2f658:	vld1.32	{d20-d21}, [r2]
   2f65c:	add	r2, r3, #20
   2f660:	vst1.32	{d16-d17}, [r4]
   2f664:	vst1.32	{d18-d19}, [r2]
   2f668:	add	r2, r3, #32
   2f66c:	vst1.32	{d20-d21}, [r2]
   2f670:	str	r1, [sp, #48]	; 0x30
   2f674:	mvn	r2, #0
   2f678:	ldr	r1, [sp, #60]	; 0x3c
   2f67c:	orr	r1, r1, #67108864	; 0x4000000
   2f680:	str	r1, [sp, #60]	; 0x3c
   2f684:	mov	r1, ip
   2f688:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f68c:	sub	sp, fp, #8
   2f690:	pop	{r4, sl, fp, pc}
   2f694:	bl	12a28 <abort@plt>
   2f698:	push	{r4, r5, fp, lr}
   2f69c:	add	fp, sp, #8
   2f6a0:	sub	sp, sp, #48	; 0x30
   2f6a4:	mov	ip, r3
   2f6a8:	movw	r3, #15624	; 0x3d08
   2f6ac:	mov	lr, #32
   2f6b0:	cmp	r1, #0
   2f6b4:	mov	r5, sp
   2f6b8:	movt	r3, #6
   2f6bc:	cmpne	r2, #0
   2f6c0:	add	r4, r3, #16
   2f6c4:	vld1.64	{d16-d17}, [r3], lr
   2f6c8:	vld1.64	{d18-d19}, [r4]
   2f6cc:	add	r4, r5, #16
   2f6d0:	vld1.64	{d20-d21}, [r3]
   2f6d4:	vst1.64	{d16-d17}, [r5], lr
   2f6d8:	mov	r3, #10
   2f6dc:	vst1.64	{d18-d19}, [r4]
   2f6e0:	vst1.64	{d20-d21}, [r5]
   2f6e4:	str	r3, [sp]
   2f6e8:	bne	2f6f0 <__assert_fail@plt+0x1cc74>
   2f6ec:	bl	12a28 <abort@plt>
   2f6f0:	str	r2, [sp, #44]	; 0x2c
   2f6f4:	str	r1, [sp, #40]	; 0x28
   2f6f8:	mov	r3, sp
   2f6fc:	mov	r1, ip
   2f700:	mvn	r2, #0
   2f704:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f708:	sub	sp, fp, #8
   2f70c:	pop	{r4, r5, fp, pc}
   2f710:	push	{r4, r5, fp, lr}
   2f714:	add	fp, sp, #8
   2f718:	sub	sp, sp, #48	; 0x30
   2f71c:	mov	lr, r3
   2f720:	movw	r3, #15624	; 0x3d08
   2f724:	mov	ip, #32
   2f728:	cmp	r1, #0
   2f72c:	mov	r5, sp
   2f730:	movt	r3, #6
   2f734:	cmpne	r2, #0
   2f738:	add	r4, r3, #16
   2f73c:	vld1.64	{d16-d17}, [r3], ip
   2f740:	vld1.64	{d18-d19}, [r4]
   2f744:	add	r4, r5, #16
   2f748:	vld1.64	{d20-d21}, [r3]
   2f74c:	vst1.64	{d16-d17}, [r5], ip
   2f750:	mov	r3, #10
   2f754:	vst1.64	{d18-d19}, [r4]
   2f758:	vst1.64	{d20-d21}, [r5]
   2f75c:	str	r3, [sp]
   2f760:	bne	2f768 <__assert_fail@plt+0x1ccec>
   2f764:	bl	12a28 <abort@plt>
   2f768:	ldr	ip, [fp, #8]
   2f76c:	str	r2, [sp, #44]	; 0x2c
   2f770:	str	r1, [sp, #40]	; 0x28
   2f774:	mov	r3, sp
   2f778:	mov	r1, lr
   2f77c:	mov	r2, ip
   2f780:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f784:	sub	sp, fp, #8
   2f788:	pop	{r4, r5, fp, pc}
   2f78c:	push	{r4, sl, fp, lr}
   2f790:	add	fp, sp, #8
   2f794:	sub	sp, sp, #48	; 0x30
   2f798:	mov	ip, r2
   2f79c:	movw	r2, #15624	; 0x3d08
   2f7a0:	mov	lr, #32
   2f7a4:	cmp	r0, #0
   2f7a8:	mov	r4, sp
   2f7ac:	movt	r2, #6
   2f7b0:	cmpne	r1, #0
   2f7b4:	add	r3, r2, #16
   2f7b8:	vld1.64	{d16-d17}, [r2], lr
   2f7bc:	vld1.64	{d18-d19}, [r3]
   2f7c0:	add	r3, r4, #16
   2f7c4:	vld1.64	{d20-d21}, [r2]
   2f7c8:	vst1.64	{d16-d17}, [r4], lr
   2f7cc:	mov	r2, #10
   2f7d0:	vst1.64	{d18-d19}, [r3]
   2f7d4:	vst1.64	{d20-d21}, [r4]
   2f7d8:	str	r2, [sp]
   2f7dc:	bne	2f7e4 <__assert_fail@plt+0x1cd68>
   2f7e0:	bl	12a28 <abort@plt>
   2f7e4:	str	r1, [sp, #44]	; 0x2c
   2f7e8:	str	r0, [sp, #40]	; 0x28
   2f7ec:	mov	r3, sp
   2f7f0:	mov	r0, #0
   2f7f4:	mov	r1, ip
   2f7f8:	mvn	r2, #0
   2f7fc:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f800:	sub	sp, fp, #8
   2f804:	pop	{r4, sl, fp, pc}
   2f808:	push	{r4, r5, fp, lr}
   2f80c:	add	fp, sp, #8
   2f810:	sub	sp, sp, #48	; 0x30
   2f814:	mov	lr, r2
   2f818:	movw	r2, #15624	; 0x3d08
   2f81c:	mov	ip, r3
   2f820:	mov	r3, #32
   2f824:	cmp	r0, #0
   2f828:	mov	r5, sp
   2f82c:	movt	r2, #6
   2f830:	cmpne	r1, #0
   2f834:	add	r4, r2, #16
   2f838:	vld1.64	{d16-d17}, [r2], r3
   2f83c:	vld1.64	{d18-d19}, [r4]
   2f840:	add	r4, r5, #16
   2f844:	vld1.64	{d20-d21}, [r2]
   2f848:	vst1.64	{d16-d17}, [r5], r3
   2f84c:	mov	r2, #10
   2f850:	vst1.64	{d18-d19}, [r4]
   2f854:	vst1.64	{d20-d21}, [r5]
   2f858:	str	r2, [sp]
   2f85c:	bne	2f864 <__assert_fail@plt+0x1cde8>
   2f860:	bl	12a28 <abort@plt>
   2f864:	str	r1, [sp, #44]	; 0x2c
   2f868:	str	r0, [sp, #40]	; 0x28
   2f86c:	mov	r3, sp
   2f870:	mov	r0, #0
   2f874:	mov	r1, lr
   2f878:	mov	r2, ip
   2f87c:	bl	2f124 <__assert_fail@plt+0x1c6a8>
   2f880:	sub	sp, fp, #8
   2f884:	pop	{r4, r5, fp, pc}
   2f888:	movw	r3, #13552	; 0x34f0
   2f88c:	movt	r3, #6
   2f890:	b	2f124 <__assert_fail@plt+0x1c6a8>
   2f894:	movw	r3, #13552	; 0x34f0
   2f898:	mov	r2, r1
   2f89c:	mov	r1, r0
   2f8a0:	mov	r0, #0
   2f8a4:	movt	r3, #6
   2f8a8:	b	2f124 <__assert_fail@plt+0x1c6a8>
   2f8ac:	movw	r3, #13552	; 0x34f0
   2f8b0:	mvn	r2, #0
   2f8b4:	movt	r3, #6
   2f8b8:	b	2f124 <__assert_fail@plt+0x1c6a8>
   2f8bc:	movw	r3, #13552	; 0x34f0
   2f8c0:	mov	r1, r0
   2f8c4:	mov	r0, #0
   2f8c8:	mvn	r2, #0
   2f8cc:	movt	r3, #6
   2f8d0:	b	2f124 <__assert_fail@plt+0x1c6a8>
   2f8d4:	push	{r4, r5, fp, lr}
   2f8d8:	add	fp, sp, #8
   2f8dc:	mov	r4, #0
   2f8e0:	mov	r5, r0
   2f8e4:	mov	r1, #524288	; 0x80000
   2f8e8:	str	r4, [r0, #4]
   2f8ec:	movw	r0, #54804	; 0xd614
   2f8f0:	movt	r0, #4
   2f8f4:	bl	2389c <__assert_fail@plt+0x10e20>
   2f8f8:	cmn	r0, #1
   2f8fc:	str	r0, [r5]
   2f900:	ble	2f90c <__assert_fail@plt+0x1ce90>
   2f904:	mov	r0, r4
   2f908:	pop	{r4, r5, fp, pc}
   2f90c:	mov	r0, #0
   2f910:	mov	r1, #0
   2f914:	mov	r4, #0
   2f918:	bl	1274c <getcwd@plt>
   2f91c:	cmp	r0, #0
   2f920:	str	r0, [r5, #4]
   2f924:	mvneq	r4, #0
   2f928:	mov	r0, r4
   2f92c:	pop	{r4, r5, fp, pc}
   2f930:	ldr	r1, [r0]
   2f934:	cmp	r1, #0
   2f938:	blt	2f944 <__assert_fail@plt+0x1cec8>
   2f93c:	mov	r0, r1
   2f940:	b	12980 <fchdir@plt>
   2f944:	ldr	r0, [r0, #4]
   2f948:	b	32634 <__assert_fail@plt+0x1fbb8>
   2f94c:	push	{r4, sl, fp, lr}
   2f950:	add	fp, sp, #8
   2f954:	mov	r4, r0
   2f958:	ldr	r0, [r0]
   2f95c:	cmp	r0, #0
   2f960:	blt	2f968 <__assert_fail@plt+0x1ceec>
   2f964:	bl	12a34 <close@plt>
   2f968:	ldr	r0, [r4, #4]
   2f96c:	pop	{r4, sl, fp, lr}
   2f970:	b	32c40 <__assert_fail@plt+0x201c4>
   2f974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f978:	add	fp, sp, #28
   2f97c:	sub	sp, sp, #964	; 0x3c4
   2f980:	sub	sp, sp, #3072	; 0xc00
   2f984:	mov	r4, r2
   2f988:	mov	r5, r1
   2f98c:	cmn	r0, #100	; 0x64
   2f990:	beq	2f9a4 <__assert_fail@plt+0x1cf28>
   2f994:	mov	r7, r0
   2f998:	ldrb	r0, [r5]
   2f99c:	cmp	r0, #47	; 0x2f
   2f9a0:	bne	2f9b8 <__assert_fail@plt+0x1cf3c>
   2f9a4:	mov	r0, r5
   2f9a8:	mov	r1, r4
   2f9ac:	sub	sp, fp, #28
   2f9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f9b4:	b	354ac <__assert_fail@plt+0x22a30>
   2f9b8:	mov	sl, sp
   2f9bc:	mov	r1, r7
   2f9c0:	mov	r2, r5
   2f9c4:	mov	r0, sl
   2f9c8:	bl	4b4f8 <__assert_fail@plt+0x38a7c>
   2f9cc:	cmp	r0, #0
   2f9d0:	beq	2fabc <__assert_fail@plt+0x1d040>
   2f9d4:	mov	r1, r4
   2f9d8:	mov	r6, r0
   2f9dc:	bl	354ac <__assert_fail@plt+0x22a30>
   2f9e0:	mov	r9, r0
   2f9e4:	bl	127d0 <__errno_location@plt>
   2f9e8:	ldr	r2, [r0]
   2f9ec:	mov	r8, r0
   2f9f0:	cmp	r6, sl
   2f9f4:	beq	2fa08 <__assert_fail@plt+0x1cf8c>
   2f9f8:	mov	r0, r6
   2f9fc:	mov	r6, r2
   2fa00:	bl	32c40 <__assert_fail@plt+0x201c4>
   2fa04:	mov	r2, r6
   2fa08:	cmn	r9, #1
   2fa0c:	bne	2fb88 <__assert_fail@plt+0x1d10c>
   2fa10:	sub	r0, r2, #1
   2fa14:	cmp	r0, #37	; 0x25
   2fa18:	bhi	2fb94 <__assert_fail@plt+0x1d118>
   2fa1c:	add	r1, pc, #0
   2fa20:	ldr	pc, [r1, r0, lsl #2]
   2fa24:			; <UNDEFINED> instruction: 0x0002fabc
   2fa28:			; <UNDEFINED> instruction: 0x0002fabc
   2fa2c:	muleq	r2, ip, fp
   2fa30:	muleq	r2, ip, fp
   2fa34:	muleq	r2, ip, fp
   2fa38:	muleq	r2, ip, fp
   2fa3c:	muleq	r2, ip, fp
   2fa40:	muleq	r2, ip, fp
   2fa44:	muleq	r2, ip, fp
   2fa48:	muleq	r2, ip, fp
   2fa4c:	muleq	r2, ip, fp
   2fa50:	muleq	r2, ip, fp
   2fa54:			; <UNDEFINED> instruction: 0x0002fabc
   2fa58:	muleq	r2, ip, fp
   2fa5c:	muleq	r2, ip, fp
   2fa60:	muleq	r2, ip, fp
   2fa64:	muleq	r2, ip, fp
   2fa68:	muleq	r2, ip, fp
   2fa6c:	muleq	r2, ip, fp
   2fa70:			; <UNDEFINED> instruction: 0x0002fabc
   2fa74:	muleq	r2, ip, fp
   2fa78:	muleq	r2, ip, fp
   2fa7c:	muleq	r2, ip, fp
   2fa80:	muleq	r2, ip, fp
   2fa84:	muleq	r2, ip, fp
   2fa88:	muleq	r2, ip, fp
   2fa8c:	muleq	r2, ip, fp
   2fa90:	muleq	r2, ip, fp
   2fa94:	muleq	r2, ip, fp
   2fa98:	muleq	r2, ip, fp
   2fa9c:	muleq	r2, ip, fp
   2faa0:	muleq	r2, ip, fp
   2faa4:	muleq	r2, ip, fp
   2faa8:	muleq	r2, ip, fp
   2faac:	muleq	r2, ip, fp
   2fab0:	muleq	r2, ip, fp
   2fab4:	muleq	r2, ip, fp
   2fab8:			; <UNDEFINED> instruction: 0x0002fabc
   2fabc:	mov	r0, sp
   2fac0:	bl	2f8d4 <__assert_fail@plt+0x1ce58>
   2fac4:	cmp	r0, #0
   2fac8:	bne	2fbac <__assert_fail@plt+0x1d130>
   2facc:	cmp	r7, #0
   2fad0:	blt	2fb04 <__assert_fail@plt+0x1d088>
   2fad4:	ldr	r0, [sp]
   2fad8:	cmp	r0, r7
   2fadc:	bne	2fb04 <__assert_fail@plt+0x1d088>
   2fae0:	mov	r0, sp
   2fae4:	bl	2f94c <__assert_fail@plt+0x1ced0>
   2fae8:	bl	127d0 <__errno_location@plt>
   2faec:	mov	r1, #9
   2faf0:	mvn	r9, #0
   2faf4:	str	r1, [r0]
   2faf8:	mov	r0, r9
   2fafc:	sub	sp, fp, #28
   2fb00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb04:	mov	r0, r7
   2fb08:	bl	12980 <fchdir@plt>
   2fb0c:	cmp	r0, #0
   2fb10:	beq	2fb3c <__assert_fail@plt+0x1d0c0>
   2fb14:	bl	127d0 <__errno_location@plt>
   2fb18:	ldr	r5, [r0]
   2fb1c:	mov	r4, r0
   2fb20:	mov	r0, sp
   2fb24:	bl	2f94c <__assert_fail@plt+0x1ced0>
   2fb28:	str	r5, [r4]
   2fb2c:	mvn	r9, #0
   2fb30:	mov	r0, r9
   2fb34:	sub	sp, fp, #28
   2fb38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb3c:	mov	r0, r5
   2fb40:	mov	r1, r4
   2fb44:	bl	354ac <__assert_fail@plt+0x22a30>
   2fb48:	mov	r9, r0
   2fb4c:	mov	r4, #0
   2fb50:	cmn	r0, #1
   2fb54:	bne	2fb60 <__assert_fail@plt+0x1d0e4>
   2fb58:	bl	127d0 <__errno_location@plt>
   2fb5c:	ldr	r4, [r0]
   2fb60:	mov	r0, sp
   2fb64:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   2fb68:	cmp	r0, #0
   2fb6c:	bne	2fbb8 <__assert_fail@plt+0x1d13c>
   2fb70:	mov	r0, sp
   2fb74:	bl	2f94c <__assert_fail@plt+0x1ced0>
   2fb78:	cmp	r4, #0
   2fb7c:	beq	2fb88 <__assert_fail@plt+0x1d10c>
   2fb80:	bl	127d0 <__errno_location@plt>
   2fb84:	str	r4, [r0]
   2fb88:	mov	r0, r9
   2fb8c:	sub	sp, fp, #28
   2fb90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb94:	cmp	r2, #95	; 0x5f
   2fb98:	beq	2fabc <__assert_fail@plt+0x1d040>
   2fb9c:	str	r2, [r8]
   2fba0:	mov	r0, r9
   2fba4:	sub	sp, fp, #28
   2fba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fbac:	bl	127d0 <__errno_location@plt>
   2fbb0:	ldr	r0, [r0]
   2fbb4:	bl	277a0 <__assert_fail@plt+0x14d24>
   2fbb8:	bl	127d0 <__errno_location@plt>
   2fbbc:	ldr	r0, [r0]
   2fbc0:	bl	277e0 <__assert_fail@plt+0x14d64>
   2fbc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbc8:	add	fp, sp, #28
   2fbcc:	sub	sp, sp, #964	; 0x3c4
   2fbd0:	sub	sp, sp, #3072	; 0xc00
   2fbd4:	mov	r4, r2
   2fbd8:	mov	r5, r1
   2fbdc:	cmn	r0, #100	; 0x64
   2fbe0:	beq	2fbf4 <__assert_fail@plt+0x1d178>
   2fbe4:	mov	r7, r0
   2fbe8:	ldrb	r0, [r5]
   2fbec:	cmp	r0, #47	; 0x2f
   2fbf0:	bne	2fc08 <__assert_fail@plt+0x1d18c>
   2fbf4:	mov	r0, r5
   2fbf8:	mov	r1, r4
   2fbfc:	sub	sp, fp, #28
   2fc00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc04:	b	35520 <__assert_fail@plt+0x22aa4>
   2fc08:	mov	sl, sp
   2fc0c:	mov	r1, r7
   2fc10:	mov	r2, r5
   2fc14:	mov	r0, sl
   2fc18:	bl	4b4f8 <__assert_fail@plt+0x38a7c>
   2fc1c:	cmp	r0, #0
   2fc20:	beq	2fd0c <__assert_fail@plt+0x1d290>
   2fc24:	mov	r1, r4
   2fc28:	mov	r6, r0
   2fc2c:	bl	35520 <__assert_fail@plt+0x22aa4>
   2fc30:	mov	r9, r0
   2fc34:	bl	127d0 <__errno_location@plt>
   2fc38:	ldr	r2, [r0]
   2fc3c:	mov	r8, r0
   2fc40:	cmp	r6, sl
   2fc44:	beq	2fc58 <__assert_fail@plt+0x1d1dc>
   2fc48:	mov	r0, r6
   2fc4c:	mov	r6, r2
   2fc50:	bl	32c40 <__assert_fail@plt+0x201c4>
   2fc54:	mov	r2, r6
   2fc58:	cmn	r9, #1
   2fc5c:	bne	2fdd8 <__assert_fail@plt+0x1d35c>
   2fc60:	sub	r0, r2, #1
   2fc64:	cmp	r0, #37	; 0x25
   2fc68:	bhi	2fde4 <__assert_fail@plt+0x1d368>
   2fc6c:	add	r1, pc, #0
   2fc70:	ldr	pc, [r1, r0, lsl #2]
   2fc74:	andeq	pc, r2, ip, lsl #26
   2fc78:	andeq	pc, r2, ip, lsl #26
   2fc7c:	andeq	pc, r2, ip, ror #27
   2fc80:	andeq	pc, r2, ip, ror #27
   2fc84:	andeq	pc, r2, ip, ror #27
   2fc88:	andeq	pc, r2, ip, ror #27
   2fc8c:	andeq	pc, r2, ip, ror #27
   2fc90:	andeq	pc, r2, ip, ror #27
   2fc94:	andeq	pc, r2, ip, ror #27
   2fc98:	andeq	pc, r2, ip, ror #27
   2fc9c:	andeq	pc, r2, ip, ror #27
   2fca0:	andeq	pc, r2, ip, ror #27
   2fca4:	andeq	pc, r2, ip, lsl #26
   2fca8:	andeq	pc, r2, ip, ror #27
   2fcac:	andeq	pc, r2, ip, ror #27
   2fcb0:	andeq	pc, r2, ip, ror #27
   2fcb4:	andeq	pc, r2, ip, ror #27
   2fcb8:	andeq	pc, r2, ip, ror #27
   2fcbc:	andeq	pc, r2, ip, ror #27
   2fcc0:	andeq	pc, r2, ip, lsl #26
   2fcc4:	andeq	pc, r2, ip, ror #27
   2fcc8:	andeq	pc, r2, ip, ror #27
   2fccc:	andeq	pc, r2, ip, ror #27
   2fcd0:	andeq	pc, r2, ip, ror #27
   2fcd4:	andeq	pc, r2, ip, ror #27
   2fcd8:	andeq	pc, r2, ip, ror #27
   2fcdc:	andeq	pc, r2, ip, ror #27
   2fce0:	andeq	pc, r2, ip, ror #27
   2fce4:	andeq	pc, r2, ip, ror #27
   2fce8:	andeq	pc, r2, ip, ror #27
   2fcec:	andeq	pc, r2, ip, ror #27
   2fcf0:	andeq	pc, r2, ip, ror #27
   2fcf4:	andeq	pc, r2, ip, ror #27
   2fcf8:	andeq	pc, r2, ip, ror #27
   2fcfc:	andeq	pc, r2, ip, ror #27
   2fd00:	andeq	pc, r2, ip, ror #27
   2fd04:	andeq	pc, r2, ip, ror #27
   2fd08:	andeq	pc, r2, ip, lsl #26
   2fd0c:	mov	r0, sp
   2fd10:	bl	2f8d4 <__assert_fail@plt+0x1ce58>
   2fd14:	cmp	r0, #0
   2fd18:	bne	2fdfc <__assert_fail@plt+0x1d380>
   2fd1c:	cmp	r7, #0
   2fd20:	blt	2fd54 <__assert_fail@plt+0x1d2d8>
   2fd24:	ldr	r0, [sp]
   2fd28:	cmp	r0, r7
   2fd2c:	bne	2fd54 <__assert_fail@plt+0x1d2d8>
   2fd30:	mov	r0, sp
   2fd34:	bl	2f94c <__assert_fail@plt+0x1ced0>
   2fd38:	bl	127d0 <__errno_location@plt>
   2fd3c:	mov	r1, #9
   2fd40:	mvn	r9, #0
   2fd44:	str	r1, [r0]
   2fd48:	mov	r0, r9
   2fd4c:	sub	sp, fp, #28
   2fd50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd54:	mov	r0, r7
   2fd58:	bl	12980 <fchdir@plt>
   2fd5c:	cmp	r0, #0
   2fd60:	beq	2fd8c <__assert_fail@plt+0x1d310>
   2fd64:	bl	127d0 <__errno_location@plt>
   2fd68:	ldr	r5, [r0]
   2fd6c:	mov	r4, r0
   2fd70:	mov	r0, sp
   2fd74:	bl	2f94c <__assert_fail@plt+0x1ced0>
   2fd78:	str	r5, [r4]
   2fd7c:	mvn	r9, #0
   2fd80:	mov	r0, r9
   2fd84:	sub	sp, fp, #28
   2fd88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd8c:	mov	r0, r5
   2fd90:	mov	r1, r4
   2fd94:	bl	35520 <__assert_fail@plt+0x22aa4>
   2fd98:	mov	r9, r0
   2fd9c:	mov	r4, #0
   2fda0:	cmn	r0, #1
   2fda4:	bne	2fdb0 <__assert_fail@plt+0x1d334>
   2fda8:	bl	127d0 <__errno_location@plt>
   2fdac:	ldr	r4, [r0]
   2fdb0:	mov	r0, sp
   2fdb4:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   2fdb8:	cmp	r0, #0
   2fdbc:	bne	2fe08 <__assert_fail@plt+0x1d38c>
   2fdc0:	mov	r0, sp
   2fdc4:	bl	2f94c <__assert_fail@plt+0x1ced0>
   2fdc8:	cmp	r4, #0
   2fdcc:	beq	2fdd8 <__assert_fail@plt+0x1d35c>
   2fdd0:	bl	127d0 <__errno_location@plt>
   2fdd4:	str	r4, [r0]
   2fdd8:	mov	r0, r9
   2fddc:	sub	sp, fp, #28
   2fde0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fde4:	cmp	r2, #95	; 0x5f
   2fde8:	beq	2fd0c <__assert_fail@plt+0x1d290>
   2fdec:	str	r2, [r8]
   2fdf0:	mov	r0, r9
   2fdf4:	sub	sp, fp, #28
   2fdf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fdfc:	bl	127d0 <__errno_location@plt>
   2fe00:	ldr	r0, [r0]
   2fe04:	bl	277a0 <__assert_fail@plt+0x14d24>
   2fe08:	bl	127d0 <__errno_location@plt>
   2fe0c:	ldr	r0, [r0]
   2fe10:	bl	277e0 <__assert_fail@plt+0x14d64>
   2fe14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe18:	add	fp, sp, #28
   2fe1c:	sub	sp, sp, #964	; 0x3c4
   2fe20:	sub	sp, sp, #3072	; 0xc00
   2fe24:	mov	r4, r2
   2fe28:	mov	r5, r1
   2fe2c:	cmn	r0, #100	; 0x64
   2fe30:	beq	2fe44 <__assert_fail@plt+0x1d3c8>
   2fe34:	mov	r7, r0
   2fe38:	ldrb	r0, [r5]
   2fe3c:	cmp	r0, #47	; 0x2f
   2fe40:	bne	2fe58 <__assert_fail@plt+0x1d3dc>
   2fe44:	mov	r0, r5
   2fe48:	mov	r1, r4
   2fe4c:	sub	sp, fp, #28
   2fe50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe54:	b	1286c <setfilecon@plt>
   2fe58:	mov	sl, sp
   2fe5c:	mov	r1, r7
   2fe60:	mov	r2, r5
   2fe64:	mov	r0, sl
   2fe68:	bl	4b4f8 <__assert_fail@plt+0x38a7c>
   2fe6c:	cmp	r0, #0
   2fe70:	beq	2ff5c <__assert_fail@plt+0x1d4e0>
   2fe74:	mov	r1, r4
   2fe78:	mov	r6, r0
   2fe7c:	bl	1286c <setfilecon@plt>
   2fe80:	mov	r9, r0
   2fe84:	bl	127d0 <__errno_location@plt>
   2fe88:	ldr	r2, [r0]
   2fe8c:	mov	r8, r0
   2fe90:	cmp	r6, sl
   2fe94:	beq	2fea8 <__assert_fail@plt+0x1d42c>
   2fe98:	mov	r0, r6
   2fe9c:	mov	r6, r2
   2fea0:	bl	32c40 <__assert_fail@plt+0x201c4>
   2fea4:	mov	r2, r6
   2fea8:	cmn	r9, #1
   2feac:	bne	30028 <__assert_fail@plt+0x1d5ac>
   2feb0:	sub	r0, r2, #1
   2feb4:	cmp	r0, #37	; 0x25
   2feb8:	bhi	30034 <__assert_fail@plt+0x1d5b8>
   2febc:	add	r1, pc, #0
   2fec0:	ldr	pc, [r1, r0, lsl #2]
   2fec4:	andeq	pc, r2, ip, asr pc	; <UNPREDICTABLE>
   2fec8:	andeq	pc, r2, ip, asr pc	; <UNPREDICTABLE>
   2fecc:	andeq	r0, r3, ip, lsr r0
   2fed0:	andeq	r0, r3, ip, lsr r0
   2fed4:	andeq	r0, r3, ip, lsr r0
   2fed8:	andeq	r0, r3, ip, lsr r0
   2fedc:	andeq	r0, r3, ip, lsr r0
   2fee0:	andeq	r0, r3, ip, lsr r0
   2fee4:	andeq	r0, r3, ip, lsr r0
   2fee8:	andeq	r0, r3, ip, lsr r0
   2feec:	andeq	r0, r3, ip, lsr r0
   2fef0:	andeq	r0, r3, ip, lsr r0
   2fef4:	andeq	pc, r2, ip, asr pc	; <UNPREDICTABLE>
   2fef8:	andeq	r0, r3, ip, lsr r0
   2fefc:	andeq	r0, r3, ip, lsr r0
   2ff00:	andeq	r0, r3, ip, lsr r0
   2ff04:	andeq	r0, r3, ip, lsr r0
   2ff08:	andeq	r0, r3, ip, lsr r0
   2ff0c:	andeq	r0, r3, ip, lsr r0
   2ff10:	andeq	pc, r2, ip, asr pc	; <UNPREDICTABLE>
   2ff14:	andeq	r0, r3, ip, lsr r0
   2ff18:	andeq	r0, r3, ip, lsr r0
   2ff1c:	andeq	r0, r3, ip, lsr r0
   2ff20:	andeq	r0, r3, ip, lsr r0
   2ff24:	andeq	r0, r3, ip, lsr r0
   2ff28:	andeq	r0, r3, ip, lsr r0
   2ff2c:	andeq	r0, r3, ip, lsr r0
   2ff30:	andeq	r0, r3, ip, lsr r0
   2ff34:	andeq	r0, r3, ip, lsr r0
   2ff38:	andeq	r0, r3, ip, lsr r0
   2ff3c:	andeq	r0, r3, ip, lsr r0
   2ff40:	andeq	r0, r3, ip, lsr r0
   2ff44:	andeq	r0, r3, ip, lsr r0
   2ff48:	andeq	r0, r3, ip, lsr r0
   2ff4c:	andeq	r0, r3, ip, lsr r0
   2ff50:	andeq	r0, r3, ip, lsr r0
   2ff54:	andeq	r0, r3, ip, lsr r0
   2ff58:	andeq	pc, r2, ip, asr pc	; <UNPREDICTABLE>
   2ff5c:	mov	r0, sp
   2ff60:	bl	2f8d4 <__assert_fail@plt+0x1ce58>
   2ff64:	cmp	r0, #0
   2ff68:	bne	3004c <__assert_fail@plt+0x1d5d0>
   2ff6c:	cmp	r7, #0
   2ff70:	blt	2ffa4 <__assert_fail@plt+0x1d528>
   2ff74:	ldr	r0, [sp]
   2ff78:	cmp	r0, r7
   2ff7c:	bne	2ffa4 <__assert_fail@plt+0x1d528>
   2ff80:	mov	r0, sp
   2ff84:	bl	2f94c <__assert_fail@plt+0x1ced0>
   2ff88:	bl	127d0 <__errno_location@plt>
   2ff8c:	mov	r1, #9
   2ff90:	mvn	r9, #0
   2ff94:	str	r1, [r0]
   2ff98:	mov	r0, r9
   2ff9c:	sub	sp, fp, #28
   2ffa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ffa4:	mov	r0, r7
   2ffa8:	bl	12980 <fchdir@plt>
   2ffac:	cmp	r0, #0
   2ffb0:	beq	2ffdc <__assert_fail@plt+0x1d560>
   2ffb4:	bl	127d0 <__errno_location@plt>
   2ffb8:	ldr	r5, [r0]
   2ffbc:	mov	r4, r0
   2ffc0:	mov	r0, sp
   2ffc4:	bl	2f94c <__assert_fail@plt+0x1ced0>
   2ffc8:	str	r5, [r4]
   2ffcc:	mvn	r9, #0
   2ffd0:	mov	r0, r9
   2ffd4:	sub	sp, fp, #28
   2ffd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ffdc:	mov	r0, r5
   2ffe0:	mov	r1, r4
   2ffe4:	bl	1286c <setfilecon@plt>
   2ffe8:	mov	r9, r0
   2ffec:	mov	r4, #0
   2fff0:	cmn	r0, #1
   2fff4:	bne	30000 <__assert_fail@plt+0x1d584>
   2fff8:	bl	127d0 <__errno_location@plt>
   2fffc:	ldr	r4, [r0]
   30000:	mov	r0, sp
   30004:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   30008:	cmp	r0, #0
   3000c:	bne	30058 <__assert_fail@plt+0x1d5dc>
   30010:	mov	r0, sp
   30014:	bl	2f94c <__assert_fail@plt+0x1ced0>
   30018:	cmp	r4, #0
   3001c:	beq	30028 <__assert_fail@plt+0x1d5ac>
   30020:	bl	127d0 <__errno_location@plt>
   30024:	str	r4, [r0]
   30028:	mov	r0, r9
   3002c:	sub	sp, fp, #28
   30030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30034:	cmp	r2, #95	; 0x5f
   30038:	beq	2ff5c <__assert_fail@plt+0x1d4e0>
   3003c:	str	r2, [r8]
   30040:	mov	r0, r9
   30044:	sub	sp, fp, #28
   30048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3004c:	bl	127d0 <__errno_location@plt>
   30050:	ldr	r0, [r0]
   30054:	bl	277a0 <__assert_fail@plt+0x14d24>
   30058:	bl	127d0 <__errno_location@plt>
   3005c:	ldr	r0, [r0]
   30060:	bl	277e0 <__assert_fail@plt+0x14d64>
   30064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30068:	add	fp, sp, #28
   3006c:	sub	sp, sp, #964	; 0x3c4
   30070:	sub	sp, sp, #3072	; 0xc00
   30074:	mov	r4, r2
   30078:	mov	r5, r1
   3007c:	cmn	r0, #100	; 0x64
   30080:	beq	30094 <__assert_fail@plt+0x1d618>
   30084:	mov	r7, r0
   30088:	ldrb	r0, [r5]
   3008c:	cmp	r0, #47	; 0x2f
   30090:	bne	300a8 <__assert_fail@plt+0x1d62c>
   30094:	mov	r0, r5
   30098:	mov	r1, r4
   3009c:	sub	sp, fp, #28
   300a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   300a4:	b	12440 <lsetfilecon@plt>
   300a8:	mov	sl, sp
   300ac:	mov	r1, r7
   300b0:	mov	r2, r5
   300b4:	mov	r0, sl
   300b8:	bl	4b4f8 <__assert_fail@plt+0x38a7c>
   300bc:	cmp	r0, #0
   300c0:	beq	301ac <__assert_fail@plt+0x1d730>
   300c4:	mov	r1, r4
   300c8:	mov	r6, r0
   300cc:	bl	12440 <lsetfilecon@plt>
   300d0:	mov	r9, r0
   300d4:	bl	127d0 <__errno_location@plt>
   300d8:	ldr	r2, [r0]
   300dc:	mov	r8, r0
   300e0:	cmp	r6, sl
   300e4:	beq	300f8 <__assert_fail@plt+0x1d67c>
   300e8:	mov	r0, r6
   300ec:	mov	r6, r2
   300f0:	bl	32c40 <__assert_fail@plt+0x201c4>
   300f4:	mov	r2, r6
   300f8:	cmn	r9, #1
   300fc:	bne	30278 <__assert_fail@plt+0x1d7fc>
   30100:	sub	r0, r2, #1
   30104:	cmp	r0, #37	; 0x25
   30108:	bhi	30284 <__assert_fail@plt+0x1d808>
   3010c:	add	r1, pc, #0
   30110:	ldr	pc, [r1, r0, lsl #2]
   30114:	andeq	r0, r3, ip, lsr #3
   30118:	andeq	r0, r3, ip, lsr #3
   3011c:	andeq	r0, r3, ip, lsl #5
   30120:	andeq	r0, r3, ip, lsl #5
   30124:	andeq	r0, r3, ip, lsl #5
   30128:	andeq	r0, r3, ip, lsl #5
   3012c:	andeq	r0, r3, ip, lsl #5
   30130:	andeq	r0, r3, ip, lsl #5
   30134:	andeq	r0, r3, ip, lsl #5
   30138:	andeq	r0, r3, ip, lsl #5
   3013c:	andeq	r0, r3, ip, lsl #5
   30140:	andeq	r0, r3, ip, lsl #5
   30144:	andeq	r0, r3, ip, lsr #3
   30148:	andeq	r0, r3, ip, lsl #5
   3014c:	andeq	r0, r3, ip, lsl #5
   30150:	andeq	r0, r3, ip, lsl #5
   30154:	andeq	r0, r3, ip, lsl #5
   30158:	andeq	r0, r3, ip, lsl #5
   3015c:	andeq	r0, r3, ip, lsl #5
   30160:	andeq	r0, r3, ip, lsr #3
   30164:	andeq	r0, r3, ip, lsl #5
   30168:	andeq	r0, r3, ip, lsl #5
   3016c:	andeq	r0, r3, ip, lsl #5
   30170:	andeq	r0, r3, ip, lsl #5
   30174:	andeq	r0, r3, ip, lsl #5
   30178:	andeq	r0, r3, ip, lsl #5
   3017c:	andeq	r0, r3, ip, lsl #5
   30180:	andeq	r0, r3, ip, lsl #5
   30184:	andeq	r0, r3, ip, lsl #5
   30188:	andeq	r0, r3, ip, lsl #5
   3018c:	andeq	r0, r3, ip, lsl #5
   30190:	andeq	r0, r3, ip, lsl #5
   30194:	andeq	r0, r3, ip, lsl #5
   30198:	andeq	r0, r3, ip, lsl #5
   3019c:	andeq	r0, r3, ip, lsl #5
   301a0:	andeq	r0, r3, ip, lsl #5
   301a4:	andeq	r0, r3, ip, lsl #5
   301a8:	andeq	r0, r3, ip, lsr #3
   301ac:	mov	r0, sp
   301b0:	bl	2f8d4 <__assert_fail@plt+0x1ce58>
   301b4:	cmp	r0, #0
   301b8:	bne	3029c <__assert_fail@plt+0x1d820>
   301bc:	cmp	r7, #0
   301c0:	blt	301f4 <__assert_fail@plt+0x1d778>
   301c4:	ldr	r0, [sp]
   301c8:	cmp	r0, r7
   301cc:	bne	301f4 <__assert_fail@plt+0x1d778>
   301d0:	mov	r0, sp
   301d4:	bl	2f94c <__assert_fail@plt+0x1ced0>
   301d8:	bl	127d0 <__errno_location@plt>
   301dc:	mov	r1, #9
   301e0:	mvn	r9, #0
   301e4:	str	r1, [r0]
   301e8:	mov	r0, r9
   301ec:	sub	sp, fp, #28
   301f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   301f4:	mov	r0, r7
   301f8:	bl	12980 <fchdir@plt>
   301fc:	cmp	r0, #0
   30200:	beq	3022c <__assert_fail@plt+0x1d7b0>
   30204:	bl	127d0 <__errno_location@plt>
   30208:	ldr	r5, [r0]
   3020c:	mov	r4, r0
   30210:	mov	r0, sp
   30214:	bl	2f94c <__assert_fail@plt+0x1ced0>
   30218:	str	r5, [r4]
   3021c:	mvn	r9, #0
   30220:	mov	r0, r9
   30224:	sub	sp, fp, #28
   30228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3022c:	mov	r0, r5
   30230:	mov	r1, r4
   30234:	bl	12440 <lsetfilecon@plt>
   30238:	mov	r9, r0
   3023c:	mov	r4, #0
   30240:	cmn	r0, #1
   30244:	bne	30250 <__assert_fail@plt+0x1d7d4>
   30248:	bl	127d0 <__errno_location@plt>
   3024c:	ldr	r4, [r0]
   30250:	mov	r0, sp
   30254:	bl	2f930 <__assert_fail@plt+0x1ceb4>
   30258:	cmp	r0, #0
   3025c:	bne	302a8 <__assert_fail@plt+0x1d82c>
   30260:	mov	r0, sp
   30264:	bl	2f94c <__assert_fail@plt+0x1ced0>
   30268:	cmp	r4, #0
   3026c:	beq	30278 <__assert_fail@plt+0x1d7fc>
   30270:	bl	127d0 <__errno_location@plt>
   30274:	str	r4, [r0]
   30278:	mov	r0, r9
   3027c:	sub	sp, fp, #28
   30280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30284:	cmp	r2, #95	; 0x5f
   30288:	beq	301ac <__assert_fail@plt+0x1d730>
   3028c:	str	r2, [r8]
   30290:	mov	r0, r9
   30294:	sub	sp, fp, #28
   30298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3029c:	bl	127d0 <__errno_location@plt>
   302a0:	ldr	r0, [r0]
   302a4:	bl	277a0 <__assert_fail@plt+0x14d24>
   302a8:	bl	127d0 <__errno_location@plt>
   302ac:	ldr	r0, [r0]
   302b0:	bl	277e0 <__assert_fail@plt+0x14d64>
   302b4:	push	{r4, r5, fp, lr}
   302b8:	add	fp, sp, #8
   302bc:	mov	r4, r1
   302c0:	mov	r1, #0
   302c4:	mov	r5, r0
   302c8:	mov	r2, r4
   302cc:	bl	12860 <memchr@plt>
   302d0:	rsb	r1, r5, #1
   302d4:	cmp	r0, #0
   302d8:	addne	r4, r1, r0
   302dc:	mov	r0, r4
   302e0:	pop	{r4, r5, fp, pc}
   302e4:	mov	r1, #0
   302e8:	mov	r2, #3
   302ec:	b	329f8 <__assert_fail@plt+0x1ff7c>
   302f0:	push	{r4, r5, r6, r7, fp, lr}
   302f4:	add	fp, sp, #16
   302f8:	mov	r4, r0
   302fc:	cmp	r0, #2
   30300:	movhi	r0, r4
   30304:	pophi	{r4, r5, r6, r7, fp, pc}
   30308:	mov	r0, r4
   3030c:	bl	302e4 <__assert_fail@plt+0x1d868>
   30310:	mov	r5, r0
   30314:	bl	127d0 <__errno_location@plt>
   30318:	ldr	r7, [r0]
   3031c:	mov	r6, r0
   30320:	mov	r0, r4
   30324:	bl	12a34 <close@plt>
   30328:	mov	r0, r5
   3032c:	str	r7, [r6]
   30330:	pop	{r4, r5, r6, r7, fp, pc}
   30334:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   30338:	add	fp, sp, #24
   3033c:	sub	sp, sp, #32
   30340:	ldr	r7, [fp, #12]
   30344:	ldr	r6, [fp, #8]
   30348:	mov	r4, r2
   3034c:	mov	r5, r0
   30350:	cmp	r1, #0
   30354:	beq	30374 <__assert_fail@plt+0x1d8f8>
   30358:	mov	r2, r1
   3035c:	movw	r1, #7852	; 0x1eac
   30360:	str	r3, [sp]
   30364:	mov	r0, r5
   30368:	mov	r3, r4
   3036c:	movt	r1, #5
   30370:	b	30384 <__assert_fail@plt+0x1d908>
   30374:	movw	r1, #7864	; 0x1eb8
   30378:	mov	r0, r5
   3037c:	mov	r2, r4
   30380:	movt	r1, #5
   30384:	bl	127c4 <fprintf@plt>
   30388:	movw	r1, #7871	; 0x1ebf
   3038c:	mov	r0, #0
   30390:	mov	r2, #5
   30394:	movt	r1, #5
   30398:	bl	1253c <dcgettext@plt>
   3039c:	movw	r1, #8567	; 0x2177
   303a0:	mov	r2, r0
   303a4:	mov	r0, r5
   303a8:	movw	r3, #2022	; 0x7e6
   303ac:	movt	r1, #5
   303b0:	bl	127c4 <fprintf@plt>
   303b4:	mov	r0, #10
   303b8:	mov	r1, r5
   303bc:	bl	12914 <fputc@plt>
   303c0:	movw	r1, #7875	; 0x1ec3
   303c4:	mov	r0, #0
   303c8:	mov	r2, #5
   303cc:	movt	r1, #5
   303d0:	bl	1253c <dcgettext@plt>
   303d4:	movw	r2, #8046	; 0x1f6e
   303d8:	mov	r1, r0
   303dc:	mov	r0, r5
   303e0:	movt	r2, #5
   303e4:	bl	127c4 <fprintf@plt>
   303e8:	mov	r0, #10
   303ec:	mov	r1, r5
   303f0:	bl	12914 <fputc@plt>
   303f4:	cmp	r7, #9
   303f8:	bhi	30434 <__assert_fail@plt+0x1d9b8>
   303fc:	add	r0, pc, #0
   30400:	ldr	pc, [r0, r7, lsl #2]
   30404:	andeq	r0, r3, ip, lsr #8
   30408:	andeq	r0, r3, r0, asr #8
   3040c:	andeq	r0, r3, ip, ror #8
   30410:	muleq	r3, r8, r4
   30414:	andeq	r0, r3, ip, asr #9
   30418:	andeq	r0, r3, r4, lsl #10
   3041c:	andeq	r0, r3, r4, asr #10
   30420:	andeq	r0, r3, ip, lsl #11
   30424:	andeq	r0, r3, r8, lsr #12
   30428:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3042c:	sub	sp, fp, #24
   30430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30434:	movw	r1, #8399	; 0x20cf
   30438:	movt	r1, #5
   3043c:	b	305d8 <__assert_fail@plt+0x1db5c>
   30440:	movw	r1, #8080	; 0x1f90
   30444:	mov	r0, #0
   30448:	mov	r2, #5
   3044c:	movt	r1, #5
   30450:	bl	1253c <dcgettext@plt>
   30454:	ldr	r2, [r6]
   30458:	mov	r1, r0
   3045c:	mov	r0, r5
   30460:	sub	sp, fp, #24
   30464:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   30468:	b	127c4 <fprintf@plt>
   3046c:	movw	r1, #8096	; 0x1fa0
   30470:	mov	r0, #0
   30474:	mov	r2, #5
   30478:	movt	r1, #5
   3047c:	bl	1253c <dcgettext@plt>
   30480:	ldm	r6, {r2, r3}
   30484:	mov	r1, r0
   30488:	mov	r0, r5
   3048c:	sub	sp, fp, #24
   30490:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   30494:	b	127c4 <fprintf@plt>
   30498:	movw	r1, #8119	; 0x1fb7
   3049c:	mov	r0, #0
   304a0:	mov	r2, #5
   304a4:	movt	r1, #5
   304a8:	bl	1253c <dcgettext@plt>
   304ac:	mov	r1, r0
   304b0:	ldm	r6, {r2, r3}
   304b4:	ldr	r0, [r6, #8]
   304b8:	str	r0, [sp]
   304bc:	mov	r0, r5
   304c0:	bl	127c4 <fprintf@plt>
   304c4:	sub	sp, fp, #24
   304c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   304cc:	movw	r1, #8147	; 0x1fd3
   304d0:	mov	r0, #0
   304d4:	mov	r2, #5
   304d8:	movt	r1, #5
   304dc:	bl	1253c <dcgettext@plt>
   304e0:	ldm	r6, {r2, r3}
   304e4:	mov	r1, r0
   304e8:	ldr	r0, [r6, #8]
   304ec:	ldr	r7, [r6, #12]
   304f0:	stm	sp, {r0, r7}
   304f4:	mov	r0, r5
   304f8:	bl	127c4 <fprintf@plt>
   304fc:	sub	sp, fp, #24
   30500:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30504:	movw	r1, #8179	; 0x1ff3
   30508:	mov	r0, #0
   3050c:	mov	r2, #5
   30510:	movt	r1, #5
   30514:	bl	1253c <dcgettext@plt>
   30518:	ldm	r6, {r2, r3}
   3051c:	mov	r1, r0
   30520:	ldr	r0, [r6, #8]
   30524:	ldr	r7, [r6, #12]
   30528:	ldr	r6, [r6, #16]
   3052c:	stm	sp, {r0, r7}
   30530:	str	r6, [sp, #8]
   30534:	mov	r0, r5
   30538:	bl	127c4 <fprintf@plt>
   3053c:	sub	sp, fp, #24
   30540:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30544:	movw	r1, #8215	; 0x2017
   30548:	mov	r0, #0
   3054c:	mov	r2, #5
   30550:	movt	r1, #5
   30554:	bl	1253c <dcgettext@plt>
   30558:	ldm	r6, {r2, r3}
   3055c:	mov	r1, r0
   30560:	ldr	r0, [r6, #8]
   30564:	ldr	r7, [r6, #12]
   30568:	ldr	r4, [r6, #16]
   3056c:	ldr	r6, [r6, #20]
   30570:	stm	sp, {r0, r7}
   30574:	str	r4, [sp, #8]
   30578:	str	r6, [sp, #12]
   3057c:	mov	r0, r5
   30580:	bl	127c4 <fprintf@plt>
   30584:	sub	sp, fp, #24
   30588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3058c:	movw	r1, #8255	; 0x203f
   30590:	mov	r0, #0
   30594:	mov	r2, #5
   30598:	movt	r1, #5
   3059c:	bl	1253c <dcgettext@plt>
   305a0:	ldm	r6, {r2, r3}
   305a4:	mov	ip, r0
   305a8:	ldr	r0, [r6, #8]
   305ac:	ldr	r7, [r6, #12]
   305b0:	ldr	r4, [r6, #16]
   305b4:	ldr	r1, [r6, #20]
   305b8:	ldr	r6, [r6, #24]
   305bc:	stm	sp, {r0, r7}
   305c0:	str	r4, [sp, #8]
   305c4:	str	r1, [sp, #12]
   305c8:	str	r6, [sp, #16]
   305cc:	b	30670 <__assert_fail@plt+0x1dbf4>
   305d0:	movw	r1, #8347	; 0x209b
   305d4:	movt	r1, #5
   305d8:	mov	r0, #0
   305dc:	mov	r2, #5
   305e0:	bl	1253c <dcgettext@plt>
   305e4:	mov	ip, r0
   305e8:	ldr	r2, [r6]
   305ec:	ldr	r3, [r6, #4]
   305f0:	ldr	r0, [r6, #8]
   305f4:	ldr	r7, [r6, #12]
   305f8:	ldr	r4, [r6, #16]
   305fc:	ldr	r1, [r6, #20]
   30600:	ldr	lr, [r6, #24]
   30604:	ldr	r8, [r6, #28]
   30608:	ldr	r6, [r6, #32]
   3060c:	stm	sp, {r0, r7}
   30610:	str	r4, [sp, #8]
   30614:	str	r1, [sp, #12]
   30618:	str	lr, [sp, #16]
   3061c:	str	r8, [sp, #20]
   30620:	str	r6, [sp, #24]
   30624:	b	30670 <__assert_fail@plt+0x1dbf4>
   30628:	movw	r1, #8299	; 0x206b
   3062c:	mov	r0, #0
   30630:	mov	r2, #5
   30634:	movt	r1, #5
   30638:	bl	1253c <dcgettext@plt>
   3063c:	ldm	r6, {r2, r3}
   30640:	mov	ip, r0
   30644:	ldr	r0, [r6, #8]
   30648:	ldr	r7, [r6, #12]
   3064c:	ldr	r4, [r6, #16]
   30650:	ldr	r1, [r6, #20]
   30654:	ldr	lr, [r6, #24]
   30658:	ldr	r6, [r6, #28]
   3065c:	stm	sp, {r0, r7}
   30660:	str	r4, [sp, #8]
   30664:	str	r1, [sp, #12]
   30668:	str	lr, [sp, #16]
   3066c:	str	r6, [sp, #20]
   30670:	mov	r0, r5
   30674:	mov	r1, ip
   30678:	bl	127c4 <fprintf@plt>
   3067c:	sub	sp, fp, #24
   30680:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30684:	push	{r4, sl, fp, lr}
   30688:	add	fp, sp, #8
   3068c:	sub	sp, sp, #8
   30690:	ldr	ip, [fp, #8]
   30694:	mov	lr, #0
   30698:	ldr	r4, [ip, lr, lsl #2]
   3069c:	add	lr, lr, #1
   306a0:	cmp	r4, #0
   306a4:	bne	30698 <__assert_fail@plt+0x1dc1c>
   306a8:	sub	r4, lr, #1
   306ac:	str	ip, [sp]
   306b0:	str	r4, [sp, #4]
   306b4:	bl	30334 <__assert_fail@plt+0x1d8b8>
   306b8:	sub	sp, fp, #8
   306bc:	pop	{r4, sl, fp, pc}
   306c0:	push	{fp, lr}
   306c4:	mov	fp, sp
   306c8:	sub	sp, sp, #48	; 0x30
   306cc:	ldr	ip, [fp, #8]
   306d0:	ldr	lr, [ip]
   306d4:	cmp	lr, #0
   306d8:	str	lr, [sp, #8]
   306dc:	beq	30778 <__assert_fail@plt+0x1dcfc>
   306e0:	ldr	lr, [ip, #4]
   306e4:	cmp	lr, #0
   306e8:	str	lr, [sp, #12]
   306ec:	beq	30780 <__assert_fail@plt+0x1dd04>
   306f0:	ldr	lr, [ip, #8]
   306f4:	cmp	lr, #0
   306f8:	str	lr, [sp, #16]
   306fc:	beq	30788 <__assert_fail@plt+0x1dd0c>
   30700:	ldr	lr, [ip, #12]
   30704:	cmp	lr, #0
   30708:	str	lr, [sp, #20]
   3070c:	beq	30790 <__assert_fail@plt+0x1dd14>
   30710:	ldr	lr, [ip, #16]
   30714:	cmp	lr, #0
   30718:	str	lr, [sp, #24]
   3071c:	beq	30798 <__assert_fail@plt+0x1dd1c>
   30720:	ldr	lr, [ip, #20]
   30724:	cmp	lr, #0
   30728:	str	lr, [sp, #28]
   3072c:	beq	307a0 <__assert_fail@plt+0x1dd24>
   30730:	ldr	lr, [ip, #24]
   30734:	cmp	lr, #0
   30738:	str	lr, [sp, #32]
   3073c:	beq	307a8 <__assert_fail@plt+0x1dd2c>
   30740:	ldr	lr, [ip, #28]
   30744:	cmp	lr, #0
   30748:	str	lr, [sp, #36]	; 0x24
   3074c:	beq	307b0 <__assert_fail@plt+0x1dd34>
   30750:	ldr	lr, [ip, #32]
   30754:	cmp	lr, #0
   30758:	str	lr, [sp, #40]	; 0x28
   3075c:	beq	307b8 <__assert_fail@plt+0x1dd3c>
   30760:	ldr	lr, [ip, #36]	; 0x24
   30764:	mov	ip, #10
   30768:	cmp	lr, #0
   3076c:	str	lr, [sp, #44]	; 0x2c
   30770:	movweq	ip, #9
   30774:	b	307bc <__assert_fail@plt+0x1dd40>
   30778:	mov	ip, #0
   3077c:	b	307bc <__assert_fail@plt+0x1dd40>
   30780:	mov	ip, #1
   30784:	b	307bc <__assert_fail@plt+0x1dd40>
   30788:	mov	ip, #2
   3078c:	b	307bc <__assert_fail@plt+0x1dd40>
   30790:	mov	ip, #3
   30794:	b	307bc <__assert_fail@plt+0x1dd40>
   30798:	mov	ip, #4
   3079c:	b	307bc <__assert_fail@plt+0x1dd40>
   307a0:	mov	ip, #5
   307a4:	b	307bc <__assert_fail@plt+0x1dd40>
   307a8:	mov	ip, #6
   307ac:	b	307bc <__assert_fail@plt+0x1dd40>
   307b0:	mov	ip, #7
   307b4:	b	307bc <__assert_fail@plt+0x1dd40>
   307b8:	mov	ip, #8
   307bc:	add	lr, sp, #8
   307c0:	str	ip, [sp, #4]
   307c4:	str	lr, [sp]
   307c8:	bl	30334 <__assert_fail@plt+0x1d8b8>
   307cc:	mov	sp, fp
   307d0:	pop	{fp, pc}
   307d4:	push	{fp, lr}
   307d8:	mov	fp, sp
   307dc:	sub	sp, sp, #56	; 0x38
   307e0:	add	ip, fp, #8
   307e4:	str	ip, [sp, #12]
   307e8:	ldr	lr, [fp, #8]
   307ec:	cmp	lr, #0
   307f0:	str	lr, [sp, #16]
   307f4:	beq	30890 <__assert_fail@plt+0x1de14>
   307f8:	ldr	lr, [ip, #4]
   307fc:	cmp	lr, #0
   30800:	str	lr, [sp, #20]
   30804:	beq	30898 <__assert_fail@plt+0x1de1c>
   30808:	ldr	lr, [ip, #8]
   3080c:	cmp	lr, #0
   30810:	str	lr, [sp, #24]
   30814:	beq	308a0 <__assert_fail@plt+0x1de24>
   30818:	ldr	lr, [ip, #12]
   3081c:	cmp	lr, #0
   30820:	str	lr, [sp, #28]
   30824:	beq	308a8 <__assert_fail@plt+0x1de2c>
   30828:	ldr	lr, [ip, #16]
   3082c:	cmp	lr, #0
   30830:	str	lr, [sp, #32]
   30834:	beq	308b0 <__assert_fail@plt+0x1de34>
   30838:	ldr	lr, [ip, #20]
   3083c:	cmp	lr, #0
   30840:	str	lr, [sp, #36]	; 0x24
   30844:	beq	308b8 <__assert_fail@plt+0x1de3c>
   30848:	ldr	lr, [ip, #24]
   3084c:	cmp	lr, #0
   30850:	str	lr, [sp, #40]	; 0x28
   30854:	beq	308c0 <__assert_fail@plt+0x1de44>
   30858:	ldr	lr, [ip, #28]
   3085c:	cmp	lr, #0
   30860:	str	lr, [sp, #44]	; 0x2c
   30864:	beq	308c8 <__assert_fail@plt+0x1de4c>
   30868:	ldr	lr, [ip, #32]
   3086c:	cmp	lr, #0
   30870:	str	lr, [sp, #48]	; 0x30
   30874:	beq	308d0 <__assert_fail@plt+0x1de54>
   30878:	ldr	lr, [ip, #36]	; 0x24
   3087c:	mov	ip, #10
   30880:	cmp	lr, #0
   30884:	str	lr, [sp, #52]	; 0x34
   30888:	movweq	ip, #9
   3088c:	b	308d4 <__assert_fail@plt+0x1de58>
   30890:	mov	ip, #0
   30894:	b	308d4 <__assert_fail@plt+0x1de58>
   30898:	mov	ip, #1
   3089c:	b	308d4 <__assert_fail@plt+0x1de58>
   308a0:	mov	ip, #2
   308a4:	b	308d4 <__assert_fail@plt+0x1de58>
   308a8:	mov	ip, #3
   308ac:	b	308d4 <__assert_fail@plt+0x1de58>
   308b0:	mov	ip, #4
   308b4:	b	308d4 <__assert_fail@plt+0x1de58>
   308b8:	mov	ip, #5
   308bc:	b	308d4 <__assert_fail@plt+0x1de58>
   308c0:	mov	ip, #6
   308c4:	b	308d4 <__assert_fail@plt+0x1de58>
   308c8:	mov	ip, #7
   308cc:	b	308d4 <__assert_fail@plt+0x1de58>
   308d0:	mov	ip, #8
   308d4:	add	lr, sp, #16
   308d8:	str	ip, [sp, #4]
   308dc:	str	lr, [sp]
   308e0:	bl	30334 <__assert_fail@plt+0x1d8b8>
   308e4:	mov	sp, fp
   308e8:	pop	{fp, pc}
   308ec:	push	{fp, lr}
   308f0:	mov	fp, sp
   308f4:	movw	r0, #13652	; 0x3554
   308f8:	movt	r0, #6
   308fc:	ldr	r1, [r0]
   30900:	mov	r0, #10
   30904:	bl	12914 <fputc@plt>
   30908:	movw	r1, #8459	; 0x210b
   3090c:	mov	r0, #0
   30910:	mov	r2, #5
   30914:	movt	r1, #5
   30918:	bl	1253c <dcgettext@plt>
   3091c:	movw	r1, #3768	; 0xeb8
   30920:	movt	r1, #5
   30924:	bl	123f8 <printf@plt>
   30928:	movw	r1, #8479	; 0x211f
   3092c:	mov	r0, #0
   30930:	mov	r2, #5
   30934:	movt	r1, #5
   30938:	bl	1253c <dcgettext@plt>
   3093c:	movw	r1, #2921	; 0xb69
   30940:	movw	r2, #3682	; 0xe62
   30944:	movt	r1, #5
   30948:	movt	r2, #5
   3094c:	bl	123f8 <printf@plt>
   30950:	movw	r1, #8499	; 0x2133
   30954:	mov	r0, #0
   30958:	mov	r2, #5
   3095c:	movt	r1, #5
   30960:	bl	1253c <dcgettext@plt>
   30964:	movw	r1, #8538	; 0x215a
   30968:	movt	r1, #5
   3096c:	pop	{fp, lr}
   30970:	b	123f8 <printf@plt>
   30974:	push	{r4, r5, r6, sl, fp, lr}
   30978:	add	fp, sp, #16
   3097c:	mov	r4, r2
   30980:	mov	r5, r1
   30984:	mov	r6, r0
   30988:	bl	3637c <__assert_fail@plt+0x23900>
   3098c:	cmp	r0, #0
   30990:	popne	{r4, r5, r6, sl, fp, pc}
   30994:	cmp	r6, #0
   30998:	beq	309ac <__assert_fail@plt+0x1df30>
   3099c:	cmp	r5, #0
   309a0:	cmpne	r4, #0
   309a4:	bne	309ac <__assert_fail@plt+0x1df30>
   309a8:	pop	{r4, r5, r6, sl, fp, pc}
   309ac:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   309b0:	push	{r4, r5, r6, sl, fp, lr}
   309b4:	add	fp, sp, #16
   309b8:	mov	r4, r2
   309bc:	mov	r5, r1
   309c0:	mov	r6, r0
   309c4:	bl	3637c <__assert_fail@plt+0x23900>
   309c8:	cmp	r0, #0
   309cc:	popne	{r4, r5, r6, sl, fp, pc}
   309d0:	cmp	r6, #0
   309d4:	beq	309e8 <__assert_fail@plt+0x1df6c>
   309d8:	cmp	r5, #0
   309dc:	cmpne	r4, #0
   309e0:	bne	309e8 <__assert_fail@plt+0x1df6c>
   309e4:	pop	{r4, r5, r6, sl, fp, pc}
   309e8:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   309ec:	push	{fp, lr}
   309f0:	mov	fp, sp
   309f4:	bl	35608 <__assert_fail@plt+0x22b8c>
   309f8:	cmp	r0, #0
   309fc:	popne	{fp, pc}
   30a00:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30a04:	push	{fp, lr}
   30a08:	mov	fp, sp
   30a0c:	bl	35608 <__assert_fail@plt+0x22b8c>
   30a10:	cmp	r0, #0
   30a14:	popne	{fp, pc}
   30a18:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30a1c:	push	{fp, lr}
   30a20:	mov	fp, sp
   30a24:	bl	35608 <__assert_fail@plt+0x22b8c>
   30a28:	cmp	r0, #0
   30a2c:	popne	{fp, pc}
   30a30:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30a34:	push	{r4, r5, fp, lr}
   30a38:	add	fp, sp, #8
   30a3c:	mov	r4, r1
   30a40:	mov	r5, r0
   30a44:	bl	36328 <__assert_fail@plt+0x238ac>
   30a48:	cmp	r0, #0
   30a4c:	popne	{r4, r5, fp, pc}
   30a50:	cmp	r5, #0
   30a54:	beq	30a64 <__assert_fail@plt+0x1dfe8>
   30a58:	cmp	r4, #0
   30a5c:	bne	30a64 <__assert_fail@plt+0x1dfe8>
   30a60:	pop	{r4, r5, fp, pc}
   30a64:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30a68:	push	{fp, lr}
   30a6c:	mov	fp, sp
   30a70:	cmp	r1, #0
   30a74:	orreq	r1, r1, #1
   30a78:	bl	36328 <__assert_fail@plt+0x238ac>
   30a7c:	cmp	r0, #0
   30a80:	popne	{fp, pc}
   30a84:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30a88:	push	{fp, lr}
   30a8c:	mov	fp, sp
   30a90:	clz	r3, r2
   30a94:	lsr	ip, r3, #5
   30a98:	clz	r3, r1
   30a9c:	lsr	r3, r3, #5
   30aa0:	orrs	r3, r3, ip
   30aa4:	movwne	r1, #1
   30aa8:	movwne	r2, #1
   30aac:	bl	3637c <__assert_fail@plt+0x23900>
   30ab0:	cmp	r0, #0
   30ab4:	popne	{fp, pc}
   30ab8:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30abc:	push	{fp, lr}
   30ac0:	mov	fp, sp
   30ac4:	mov	r2, r1
   30ac8:	mov	r1, r0
   30acc:	mov	r0, #0
   30ad0:	bl	3637c <__assert_fail@plt+0x23900>
   30ad4:	cmp	r0, #0
   30ad8:	popne	{fp, pc}
   30adc:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30ae0:	push	{fp, lr}
   30ae4:	mov	fp, sp
   30ae8:	mov	r2, r1
   30aec:	mov	r1, r0
   30af0:	clz	r0, r2
   30af4:	clz	r3, r1
   30af8:	lsr	r0, r0, #5
   30afc:	lsr	r3, r3, #5
   30b00:	orrs	r0, r3, r0
   30b04:	movwne	r1, #1
   30b08:	movwne	r2, #1
   30b0c:	mov	r0, #0
   30b10:	bl	3637c <__assert_fail@plt+0x23900>
   30b14:	cmp	r0, #0
   30b18:	popne	{fp, pc}
   30b1c:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30b20:	push	{r4, r5, r6, sl, fp, lr}
   30b24:	add	fp, sp, #16
   30b28:	ldr	r5, [r1]
   30b2c:	mov	r4, r1
   30b30:	mov	r6, r0
   30b34:	cmp	r0, #0
   30b38:	beq	30b50 <__assert_fail@plt+0x1e0d4>
   30b3c:	mov	r0, #1
   30b40:	add	r0, r0, r5, lsr #1
   30b44:	adds	r5, r5, r0
   30b48:	bcc	30b58 <__assert_fail@plt+0x1e0dc>
   30b4c:	b	30b94 <__assert_fail@plt+0x1e118>
   30b50:	cmp	r5, #0
   30b54:	movweq	r5, #64	; 0x40
   30b58:	mov	r0, r6
   30b5c:	mov	r1, r5
   30b60:	mov	r2, #1
   30b64:	bl	3637c <__assert_fail@plt+0x23900>
   30b68:	cmp	r5, #0
   30b6c:	mov	r1, r5
   30b70:	movwne	r1, #1
   30b74:	cmp	r0, #0
   30b78:	bne	30b8c <__assert_fail@plt+0x1e110>
   30b7c:	clz	r2, r6
   30b80:	lsr	r2, r2, #5
   30b84:	orrs	r1, r2, r1
   30b88:	bne	30b94 <__assert_fail@plt+0x1e118>
   30b8c:	str	r5, [r4]
   30b90:	pop	{r4, r5, r6, sl, fp, pc}
   30b94:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30b98:	push	{r4, r5, r6, r7, fp, lr}
   30b9c:	add	fp, sp, #16
   30ba0:	ldr	r5, [r1]
   30ba4:	mov	r6, r2
   30ba8:	mov	r4, r1
   30bac:	mov	r7, r0
   30bb0:	cmp	r0, #0
   30bb4:	beq	30bcc <__assert_fail@plt+0x1e150>
   30bb8:	mov	r0, #1
   30bbc:	add	r0, r0, r5, lsr #1
   30bc0:	adds	r5, r5, r0
   30bc4:	bcc	30be4 <__assert_fail@plt+0x1e168>
   30bc8:	b	30c18 <__assert_fail@plt+0x1e19c>
   30bcc:	cmp	r5, #0
   30bd0:	bne	30be4 <__assert_fail@plt+0x1e168>
   30bd4:	mov	r0, #64	; 0x40
   30bd8:	cmp	r6, #64	; 0x40
   30bdc:	udiv	r5, r0, r6
   30be0:	addhi	r5, r5, #1
   30be4:	mov	r0, r7
   30be8:	mov	r1, r5
   30bec:	mov	r2, r6
   30bf0:	bl	3637c <__assert_fail@plt+0x23900>
   30bf4:	cmp	r0, #0
   30bf8:	bne	30c10 <__assert_fail@plt+0x1e194>
   30bfc:	cmp	r7, #0
   30c00:	beq	30c18 <__assert_fail@plt+0x1e19c>
   30c04:	cmp	r6, #0
   30c08:	cmpne	r5, #0
   30c0c:	bne	30c18 <__assert_fail@plt+0x1e19c>
   30c10:	str	r5, [r4]
   30c14:	pop	{r4, r5, r6, r7, fp, pc}
   30c18:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30c1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   30c20:	add	fp, sp, #24
   30c24:	mov	r8, r1
   30c28:	ldr	r1, [r1]
   30c2c:	mov	r5, r0
   30c30:	add	r0, r1, r1, asr #1
   30c34:	cmp	r0, r1
   30c38:	mvnvs	r0, #-2147483648	; 0x80000000
   30c3c:	cmp	r0, r3
   30c40:	mov	r7, r0
   30c44:	movgt	r7, r3
   30c48:	cmn	r3, #1
   30c4c:	movle	r7, r0
   30c50:	ldr	r0, [fp, #8]
   30c54:	cmn	r0, #1
   30c58:	ble	30c80 <__assert_fail@plt+0x1e204>
   30c5c:	cmp	r0, #0
   30c60:	beq	30cd4 <__assert_fail@plt+0x1e258>
   30c64:	cmn	r7, #1
   30c68:	ble	30ca8 <__assert_fail@plt+0x1e22c>
   30c6c:	mvn	r4, #-2147483648	; 0x80000000
   30c70:	udiv	r6, r4, r0
   30c74:	cmp	r6, r7
   30c78:	bge	30cd4 <__assert_fail@plt+0x1e258>
   30c7c:	b	30ce4 <__assert_fail@plt+0x1e268>
   30c80:	cmn	r7, #1
   30c84:	ble	30cc4 <__assert_fail@plt+0x1e248>
   30c88:	cmn	r0, #1
   30c8c:	beq	30cd4 <__assert_fail@plt+0x1e258>
   30c90:	mov	r6, #-2147483648	; 0x80000000
   30c94:	mvn	r4, #-2147483648	; 0x80000000
   30c98:	sdiv	r6, r6, r0
   30c9c:	cmp	r6, r7
   30ca0:	bge	30cd4 <__assert_fail@plt+0x1e258>
   30ca4:	b	30ce4 <__assert_fail@plt+0x1e268>
   30ca8:	beq	30cd4 <__assert_fail@plt+0x1e258>
   30cac:	mov	r6, #-2147483648	; 0x80000000
   30cb0:	mvn	r4, #-2147483648	; 0x80000000
   30cb4:	sdiv	r6, r6, r7
   30cb8:	cmp	r6, r0
   30cbc:	bge	30cd4 <__assert_fail@plt+0x1e258>
   30cc0:	b	30ce4 <__assert_fail@plt+0x1e268>
   30cc4:	mvn	r4, #-2147483648	; 0x80000000
   30cc8:	sdiv	r6, r4, r0
   30ccc:	cmp	r7, r6
   30cd0:	blt	30ce4 <__assert_fail@plt+0x1e268>
   30cd4:	mul	r6, r7, r0
   30cd8:	mov	r4, #64	; 0x40
   30cdc:	cmp	r6, #63	; 0x3f
   30ce0:	bgt	30cec <__assert_fail@plt+0x1e270>
   30ce4:	sdiv	r7, r4, r0
   30ce8:	mul	r6, r7, r0
   30cec:	cmp	r5, #0
   30cf0:	moveq	r4, #0
   30cf4:	streq	r4, [r8]
   30cf8:	sub	r4, r7, r1
   30cfc:	cmp	r4, r2
   30d00:	bge	30dac <__assert_fail@plt+0x1e330>
   30d04:	add	r7, r1, r2
   30d08:	mov	r6, #0
   30d0c:	mov	r2, #0
   30d10:	cmp	r7, r3
   30d14:	movwgt	r6, #1
   30d18:	cmn	r3, #1
   30d1c:	movwgt	r2, #1
   30d20:	cmp	r7, r1
   30d24:	bvs	30de0 <__assert_fail@plt+0x1e364>
   30d28:	ands	r1, r2, r6
   30d2c:	bne	30de0 <__assert_fail@plt+0x1e364>
   30d30:	cmn	r0, #1
   30d34:	ble	30d5c <__assert_fail@plt+0x1e2e0>
   30d38:	cmp	r0, #0
   30d3c:	beq	30da8 <__assert_fail@plt+0x1e32c>
   30d40:	cmn	r7, #1
   30d44:	ble	30d80 <__assert_fail@plt+0x1e304>
   30d48:	mvn	r1, #-2147483648	; 0x80000000
   30d4c:	udiv	r1, r1, r0
   30d50:	cmp	r1, r7
   30d54:	bge	30da8 <__assert_fail@plt+0x1e32c>
   30d58:	b	30de0 <__assert_fail@plt+0x1e364>
   30d5c:	cmn	r7, #1
   30d60:	ble	30d98 <__assert_fail@plt+0x1e31c>
   30d64:	cmn	r0, #1
   30d68:	beq	30da8 <__assert_fail@plt+0x1e32c>
   30d6c:	mov	r1, #-2147483648	; 0x80000000
   30d70:	sdiv	r1, r1, r0
   30d74:	cmp	r1, r7
   30d78:	bge	30da8 <__assert_fail@plt+0x1e32c>
   30d7c:	b	30de0 <__assert_fail@plt+0x1e364>
   30d80:	beq	30da8 <__assert_fail@plt+0x1e32c>
   30d84:	mov	r1, #-2147483648	; 0x80000000
   30d88:	sdiv	r1, r1, r7
   30d8c:	cmp	r1, r0
   30d90:	bge	30da8 <__assert_fail@plt+0x1e32c>
   30d94:	b	30de0 <__assert_fail@plt+0x1e364>
   30d98:	mvn	r1, #-2147483648	; 0x80000000
   30d9c:	sdiv	r1, r1, r0
   30da0:	cmp	r7, r1
   30da4:	blt	30de0 <__assert_fail@plt+0x1e364>
   30da8:	mul	r6, r7, r0
   30dac:	mov	r0, r5
   30db0:	mov	r1, r6
   30db4:	bl	36328 <__assert_fail@plt+0x238ac>
   30db8:	cmp	r6, #0
   30dbc:	movwne	r6, #1
   30dc0:	cmp	r0, #0
   30dc4:	bne	30dd8 <__assert_fail@plt+0x1e35c>
   30dc8:	clz	r1, r5
   30dcc:	lsr	r1, r1, #5
   30dd0:	orrs	r1, r1, r6
   30dd4:	bne	30de0 <__assert_fail@plt+0x1e364>
   30dd8:	str	r7, [r8]
   30ddc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30de0:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30de4:	push	{fp, lr}
   30de8:	mov	fp, sp
   30dec:	mov	r1, #1
   30df0:	bl	325e0 <__assert_fail@plt+0x1fb64>
   30df4:	cmp	r0, #0
   30df8:	popne	{fp, pc}
   30dfc:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30e00:	push	{fp, lr}
   30e04:	mov	fp, sp
   30e08:	bl	325e0 <__assert_fail@plt+0x1fb64>
   30e0c:	cmp	r0, #0
   30e10:	popne	{fp, pc}
   30e14:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30e18:	push	{fp, lr}
   30e1c:	mov	fp, sp
   30e20:	mov	r1, #1
   30e24:	bl	325e0 <__assert_fail@plt+0x1fb64>
   30e28:	cmp	r0, #0
   30e2c:	popne	{fp, pc}
   30e30:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30e34:	push	{fp, lr}
   30e38:	mov	fp, sp
   30e3c:	bl	325e0 <__assert_fail@plt+0x1fb64>
   30e40:	cmp	r0, #0
   30e44:	popne	{fp, pc}
   30e48:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30e4c:	push	{r4, r5, r6, sl, fp, lr}
   30e50:	add	fp, sp, #16
   30e54:	mov	r5, r0
   30e58:	mov	r0, r1
   30e5c:	mov	r4, r1
   30e60:	bl	35608 <__assert_fail@plt+0x22b8c>
   30e64:	cmp	r0, #0
   30e68:	beq	30e84 <__assert_fail@plt+0x1e408>
   30e6c:	mov	r1, r5
   30e70:	mov	r2, r4
   30e74:	mov	r6, r0
   30e78:	bl	124b8 <memcpy@plt>
   30e7c:	mov	r0, r6
   30e80:	pop	{r4, r5, r6, sl, fp, pc}
   30e84:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30e88:	push	{r4, r5, r6, sl, fp, lr}
   30e8c:	add	fp, sp, #16
   30e90:	mov	r5, r0
   30e94:	mov	r0, r1
   30e98:	mov	r4, r1
   30e9c:	bl	35608 <__assert_fail@plt+0x22b8c>
   30ea0:	cmp	r0, #0
   30ea4:	beq	30ec0 <__assert_fail@plt+0x1e444>
   30ea8:	mov	r1, r5
   30eac:	mov	r2, r4
   30eb0:	mov	r6, r0
   30eb4:	bl	124b8 <memcpy@plt>
   30eb8:	mov	r0, r6
   30ebc:	pop	{r4, r5, r6, sl, fp, pc}
   30ec0:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30ec4:	push	{r4, r5, r6, sl, fp, lr}
   30ec8:	add	fp, sp, #16
   30ecc:	mov	r5, r0
   30ed0:	add	r0, r1, #1
   30ed4:	mov	r4, r1
   30ed8:	bl	35608 <__assert_fail@plt+0x22b8c>
   30edc:	cmp	r0, #0
   30ee0:	beq	30f08 <__assert_fail@plt+0x1e48c>
   30ee4:	mov	r6, r0
   30ee8:	mov	r0, #0
   30eec:	mov	r1, r5
   30ef0:	mov	r2, r4
   30ef4:	strb	r0, [r6, r4]
   30ef8:	mov	r0, r6
   30efc:	bl	124b8 <memcpy@plt>
   30f00:	mov	r0, r6
   30f04:	pop	{r4, r5, r6, sl, fp, pc}
   30f08:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30f0c:	push	{r4, r5, r6, sl, fp, lr}
   30f10:	add	fp, sp, #16
   30f14:	mov	r4, r0
   30f18:	bl	12788 <strlen@plt>
   30f1c:	add	r5, r0, #1
   30f20:	mov	r0, r5
   30f24:	bl	35608 <__assert_fail@plt+0x22b8c>
   30f28:	cmp	r0, #0
   30f2c:	beq	30f48 <__assert_fail@plt+0x1e4cc>
   30f30:	mov	r1, r4
   30f34:	mov	r2, r5
   30f38:	mov	r6, r0
   30f3c:	bl	124b8 <memcpy@plt>
   30f40:	mov	r0, r6
   30f44:	pop	{r4, r5, r6, sl, fp, pc}
   30f48:	bl	30f4c <__assert_fail@plt+0x1e4d0>
   30f4c:	push	{fp, lr}
   30f50:	mov	fp, sp
   30f54:	movw	r0, #13544	; 0x34e8
   30f58:	movw	r1, #8614	; 0x21a6
   30f5c:	mov	r2, #5
   30f60:	movt	r0, #6
   30f64:	movt	r1, #5
   30f68:	ldr	r4, [r0]
   30f6c:	mov	r0, #0
   30f70:	bl	1253c <dcgettext@plt>
   30f74:	movw	r2, #9967	; 0x26ef
   30f78:	mov	r3, r0
   30f7c:	mov	r0, r4
   30f80:	mov	r1, #0
   30f84:	movt	r2, #5
   30f88:	bl	12674 <error@plt>
   30f8c:	bl	12a28 <abort@plt>
   30f90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   30f94:	add	fp, sp, #24
   30f98:	sub	sp, sp, #8
   30f9c:	mov	r4, r3
   30fa0:	mov	r8, r2
   30fa4:	mov	r9, r1
   30fa8:	mov	r5, r0
   30fac:	bl	127d0 <__errno_location@plt>
   30fb0:	mov	r6, #0
   30fb4:	mov	r7, r0
   30fb8:	add	r1, sp, #4
   30fbc:	str	r6, [r0]
   30fc0:	mov	r0, r5
   30fc4:	blx	r4
   30fc8:	ldr	r0, [sp, #4]
   30fcc:	cmp	r0, r5
   30fd0:	beq	3101c <__assert_fail@plt+0x1e5a0>
   30fd4:	cmp	r9, #0
   30fd8:	beq	30ff8 <__assert_fail@plt+0x1e57c>
   30fdc:	vcmp.f64	d0, #0.0
   30fe0:	vmrs	APSR_nzcv, fpscr
   30fe4:	beq	31018 <__assert_fail@plt+0x1e59c>
   30fe8:	ldr	r1, [r7]
   30fec:	subs	r6, r1, #34	; 0x22
   30ff0:	movwne	r6, #1
   30ff4:	b	3101c <__assert_fail@plt+0x1e5a0>
   30ff8:	ldrb	r1, [r0]
   30ffc:	mov	r6, #0
   31000:	cmp	r1, #0
   31004:	beq	30fdc <__assert_fail@plt+0x1e560>
   31008:	vstr	d0, [r8]
   3100c:	mov	r0, r6
   31010:	sub	sp, fp, #24
   31014:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31018:	mov	r6, #1
   3101c:	cmp	r9, #0
   31020:	strne	r0, [r9]
   31024:	vstr	d0, [r8]
   31028:	mov	r0, r6
   3102c:	sub	sp, fp, #24
   31030:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31038:	add	fp, sp, #28
   3103c:	sub	sp, sp, #20
   31040:	cmp	r2, #37	; 0x25
   31044:	bcs	31890 <__assert_fail@plt+0x1ee14>
   31048:	ldr	r9, [fp, #8]
   3104c:	mov	r5, r2
   31050:	mov	r4, r1
   31054:	mov	r7, r0
   31058:	str	r3, [sp, #12]
   3105c:	bl	127d0 <__errno_location@plt>
   31060:	mov	r8, r0
   31064:	mov	r0, #0
   31068:	str	r0, [r8]
   3106c:	bl	12740 <__ctype_b_loc@plt>
   31070:	ldr	r1, [r0]
   31074:	mov	r2, r7
   31078:	ldrb	r0, [r2], #1
   3107c:	add	r3, r1, r0, lsl #1
   31080:	ldrb	r3, [r3, #1]
   31084:	tst	r3, #32
   31088:	bne	31078 <__assert_fail@plt+0x1e5fc>
   3108c:	add	r6, sp, #16
   31090:	cmp	r4, #0
   31094:	mov	sl, #4
   31098:	movne	r6, r4
   3109c:	cmp	r0, #45	; 0x2d
   310a0:	beq	3122c <__assert_fail@plt+0x1e7b0>
   310a4:	mov	r0, r7
   310a8:	mov	r1, r6
   310ac:	mov	r2, r5
   310b0:	bl	1277c <strtoul@plt>
   310b4:	ldr	r5, [r6]
   310b8:	cmp	r5, r7
   310bc:	beq	3121c <__assert_fail@plt+0x1e7a0>
   310c0:	mov	r4, r0
   310c4:	ldr	r0, [r8]
   310c8:	cmp	r0, #0
   310cc:	beq	31238 <__assert_fail@plt+0x1e7bc>
   310d0:	cmp	r0, #34	; 0x22
   310d4:	bne	3122c <__assert_fail@plt+0x1e7b0>
   310d8:	mov	sl, #1
   310dc:	cmp	r9, #0
   310e0:	beq	3187c <__assert_fail@plt+0x1ee00>
   310e4:	ldrb	r7, [r5]
   310e8:	cmp	r7, #0
   310ec:	beq	3187c <__assert_fail@plt+0x1ee00>
   310f0:	mov	r0, r9
   310f4:	mov	r1, r7
   310f8:	bl	12794 <strchr@plt>
   310fc:	cmp	r0, #0
   31100:	beq	313fc <__assert_fail@plt+0x1e980>
   31104:	sub	r0, r7, #69	; 0x45
   31108:	mov	lr, #1
   3110c:	mov	r8, #1024	; 0x400
   31110:	cmp	r0, #47	; 0x2f
   31114:	bhi	312b0 <__assert_fail@plt+0x1e834>
   31118:	add	r1, pc, #0
   3111c:	ldr	pc, [r1, r0, lsl #2]
   31120:	andeq	r1, r3, r0, ror #3
   31124:			; <UNDEFINED> instruction: 0x000312b0
   31128:	andeq	r1, r3, r0, ror #3
   3112c:			; <UNDEFINED> instruction: 0x000312b0
   31130:			; <UNDEFINED> instruction: 0x000312b0
   31134:			; <UNDEFINED> instruction: 0x000312b0
   31138:	andeq	r1, r3, r0, ror #3
   3113c:			; <UNDEFINED> instruction: 0x000312b0
   31140:	andeq	r1, r3, r0, ror #3
   31144:			; <UNDEFINED> instruction: 0x000312b0
   31148:			; <UNDEFINED> instruction: 0x000312b0
   3114c:	andeq	r1, r3, r0, ror #3
   31150:			; <UNDEFINED> instruction: 0x000312b0
   31154:			; <UNDEFINED> instruction: 0x000312b0
   31158:			; <UNDEFINED> instruction: 0x000312b0
   3115c:	andeq	r1, r3, r0, ror #3
   31160:			; <UNDEFINED> instruction: 0x000312b0
   31164:			; <UNDEFINED> instruction: 0x000312b0
   31168:			; <UNDEFINED> instruction: 0x000312b0
   3116c:			; <UNDEFINED> instruction: 0x000312b0
   31170:	andeq	r1, r3, r0, ror #3
   31174:	andeq	r1, r3, r0, ror #3
   31178:			; <UNDEFINED> instruction: 0x000312b0
   3117c:			; <UNDEFINED> instruction: 0x000312b0
   31180:			; <UNDEFINED> instruction: 0x000312b0
   31184:			; <UNDEFINED> instruction: 0x000312b0
   31188:			; <UNDEFINED> instruction: 0x000312b0
   3118c:			; <UNDEFINED> instruction: 0x000312b0
   31190:			; <UNDEFINED> instruction: 0x000312b0
   31194:			; <UNDEFINED> instruction: 0x000312b0
   31198:			; <UNDEFINED> instruction: 0x000312b0
   3119c:			; <UNDEFINED> instruction: 0x000312b0
   311a0:			; <UNDEFINED> instruction: 0x000312b0
   311a4:			; <UNDEFINED> instruction: 0x000312b0
   311a8:	andeq	r1, r3, r0, ror #3
   311ac:			; <UNDEFINED> instruction: 0x000312b0
   311b0:			; <UNDEFINED> instruction: 0x000312b0
   311b4:			; <UNDEFINED> instruction: 0x000312b0
   311b8:	andeq	r1, r3, r0, ror #3
   311bc:			; <UNDEFINED> instruction: 0x000312b0
   311c0:	andeq	r1, r3, r0, ror #3
   311c4:			; <UNDEFINED> instruction: 0x000312b0
   311c8:			; <UNDEFINED> instruction: 0x000312b0
   311cc:			; <UNDEFINED> instruction: 0x000312b0
   311d0:			; <UNDEFINED> instruction: 0x000312b0
   311d4:			; <UNDEFINED> instruction: 0x000312b0
   311d8:			; <UNDEFINED> instruction: 0x000312b0
   311dc:	andeq	r1, r3, r0, ror #3
   311e0:	mov	r0, r9
   311e4:	mov	r1, #48	; 0x30
   311e8:	bl	12794 <strchr@plt>
   311ec:	cmp	r0, #0
   311f0:	beq	31270 <__assert_fail@plt+0x1e7f4>
   311f4:	ldrb	r0, [r5, #1]
   311f8:	cmp	r0, #66	; 0x42
   311fc:	cmpne	r0, #68	; 0x44
   31200:	bne	31284 <__assert_fail@plt+0x1e808>
   31204:	mov	lr, #2
   31208:	mov	r8, #1000	; 0x3e8
   3120c:	sub	r1, r7, #66	; 0x42
   31210:	cmp	r1, #53	; 0x35
   31214:	bls	312bc <__assert_fail@plt+0x1e840>
   31218:	b	313fc <__assert_fail@plt+0x1e980>
   3121c:	cmp	r9, #0
   31220:	ldrbne	r1, [r7]
   31224:	cmpne	r1, #0
   31228:	bne	31248 <__assert_fail@plt+0x1e7cc>
   3122c:	mov	r0, sl
   31230:	sub	sp, fp, #28
   31234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31238:	mov	sl, r0
   3123c:	cmp	r9, #0
   31240:	bne	310e4 <__assert_fail@plt+0x1e668>
   31244:	b	3187c <__assert_fail@plt+0x1ee00>
   31248:	mov	r0, r9
   3124c:	bl	12794 <strchr@plt>
   31250:	cmp	r0, #0
   31254:	beq	3122c <__assert_fail@plt+0x1e7b0>
   31258:	mov	r4, #1
   3125c:	mov	sl, #0
   31260:	ldrb	r7, [r5]
   31264:	cmp	r7, #0
   31268:	bne	310f0 <__assert_fail@plt+0x1e674>
   3126c:	b	3187c <__assert_fail@plt+0x1ee00>
   31270:	mov	lr, #1
   31274:	sub	r1, r7, #66	; 0x42
   31278:	cmp	r1, #53	; 0x35
   3127c:	bls	312bc <__assert_fail@plt+0x1e840>
   31280:	b	313fc <__assert_fail@plt+0x1e980>
   31284:	cmp	r0, #105	; 0x69
   31288:	bne	312ac <__assert_fail@plt+0x1e830>
   3128c:	ldrb	r0, [r5, #2]
   31290:	mov	lr, #1
   31294:	cmp	r0, #66	; 0x42
   31298:	movweq	lr, #3
   3129c:	sub	r1, r7, #66	; 0x42
   312a0:	cmp	r1, #53	; 0x35
   312a4:	bls	312bc <__assert_fail@plt+0x1e840>
   312a8:	b	313fc <__assert_fail@plt+0x1e980>
   312ac:	mov	lr, #1
   312b0:	sub	r1, r7, #66	; 0x42
   312b4:	cmp	r1, #53	; 0x35
   312b8:	bhi	313fc <__assert_fail@plt+0x1e980>
   312bc:	add	r2, pc, #4
   312c0:	mov	r0, #0
   312c4:	ldr	pc, [r2, r1, lsl #2]
   312c8:	andeq	r1, r3, r4, asr #11
   312cc:	strdeq	r1, [r3], -ip
   312d0:	strdeq	r1, [r3], -ip
   312d4:	andeq	r1, r3, r0, ror #11
   312d8:	strdeq	r1, [r3], -ip
   312dc:	andeq	r1, r3, r0, lsr #7
   312e0:	strdeq	r1, [r3], -ip
   312e4:	strdeq	r1, [r3], -ip
   312e8:	strdeq	r1, [r3], -ip
   312ec:	andeq	r1, r3, r4, lsl r4
   312f0:	strdeq	r1, [r3], -ip
   312f4:	andeq	r1, r3, r4, lsr r4
   312f8:	strdeq	r1, [r3], -ip
   312fc:	strdeq	r1, [r3], -ip
   31300:	muleq	r3, r8, r6
   31304:	strdeq	r1, [r3], -ip
   31308:	strdeq	r1, [r3], -ip
   3130c:	strdeq	r1, [r3], -ip
   31310:	andeq	r1, r3, r4, ror r4
   31314:	strdeq	r1, [r3], -ip
   31318:	strdeq	r1, [r3], -ip
   3131c:	strdeq	r1, [r3], -ip
   31320:	strdeq	r1, [r3], -ip
   31324:	andeq	r1, r3, r4, lsr r7
   31328:	andeq	r1, r3, ip, ror #9
   3132c:	strdeq	r1, [r3], -ip
   31330:	strdeq	r1, [r3], -ip
   31334:	strdeq	r1, [r3], -ip
   31338:	strdeq	r1, [r3], -ip
   3133c:	strdeq	r1, [r3], -ip
   31340:	strdeq	r1, [r3], -ip
   31344:	strdeq	r1, [r3], -ip
   31348:	andeq	r1, r3, ip, lsr #16
   3134c:	andeq	r1, r3, r4, ror #16
   31350:	strdeq	r1, [r3], -ip
   31354:	strdeq	r1, [r3], -ip
   31358:	strdeq	r1, [r3], -ip
   3135c:	andeq	r1, r3, r0, lsr #7
   31360:	strdeq	r1, [r3], -ip
   31364:	strdeq	r1, [r3], -ip
   31368:	strdeq	r1, [r3], -ip
   3136c:	andeq	r1, r3, r4, lsl r4
   31370:	strdeq	r1, [r3], -ip
   31374:	andeq	r1, r3, r4, lsr r4
   31378:	strdeq	r1, [r3], -ip
   3137c:	strdeq	r1, [r3], -ip
   31380:	strdeq	r1, [r3], -ip
   31384:	strdeq	r1, [r3], -ip
   31388:	strdeq	r1, [r3], -ip
   3138c:	strdeq	r1, [r3], -ip
   31390:	andeq	r1, r3, r4, ror r4
   31394:	strdeq	r1, [r3], -ip
   31398:	strdeq	r1, [r3], -ip
   3139c:	andeq	r1, r3, r0, asr r8
   313a0:	mvn	r0, #0
   313a4:	mul	r1, r4, r8
   313a8:	mov	r7, #0
   313ac:	udiv	r0, r0, r8
   313b0:	cmp	r0, r4
   313b4:	mvncc	r1, #0
   313b8:	mul	r2, r1, r8
   313bc:	cmp	r0, r1
   313c0:	mvncc	r2, #0
   313c4:	cmp	r0, r2
   313c8:	mul	r3, r2, r8
   313cc:	mov	r2, #0
   313d0:	mvncc	r3, #0
   313d4:	movwcc	r7, #1
   313d8:	cmp	r0, r1
   313dc:	mov	r1, #0
   313e0:	movwcc	r1, #1
   313e4:	cmp	r0, r4
   313e8:	mov	r4, r3
   313ec:	movwcc	r2, #1
   313f0:	orr	r0, r2, r1
   313f4:	orr	r0, r0, r7
   313f8:	b	31864 <__assert_fail@plt+0x1ede8>
   313fc:	ldr	r0, [sp, #12]
   31400:	orr	sl, sl, #2
   31404:	str	r4, [r0]
   31408:	mov	r0, sl
   3140c:	sub	sp, fp, #28
   31410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31414:	mvn	r0, #0
   31418:	mul	r1, r4, r8
   3141c:	udiv	r0, r0, r8
   31420:	cmp	r0, r4
   31424:	mov	r0, #0
   31428:	mvncc	r1, #0
   3142c:	movwcc	r0, #1
   31430:	b	31860 <__assert_fail@plt+0x1ede4>
   31434:	mvn	r0, #0
   31438:	mul	r1, r4, r8
   3143c:	mov	r3, #0
   31440:	udiv	r0, r0, r8
   31444:	cmp	r0, r4
   31448:	mvncc	r1, #0
   3144c:	cmp	r0, r1
   31450:	mul	r2, r1, r8
   31454:	mov	r1, #0
   31458:	mvncc	r2, #0
   3145c:	movwcc	r3, #1
   31460:	cmp	r0, r4
   31464:	movwcc	r1, #1
   31468:	mov	r4, r2
   3146c:	orr	r0, r1, r3
   31470:	b	31864 <__assert_fail@plt+0x1ede8>
   31474:	mvn	r0, #0
   31478:	mul	r1, r4, r8
   3147c:	mov	r7, #0
   31480:	udiv	r0, r0, r8
   31484:	cmp	r0, r4
   31488:	mvncc	r1, #0
   3148c:	mul	r2, r1, r8
   31490:	cmp	r0, r1
   31494:	mvncc	r2, #0
   31498:	mul	r3, r2, r8
   3149c:	cmp	r0, r2
   314a0:	mvncc	r3, #0
   314a4:	cmp	r0, r3
   314a8:	mul	ip, r3, r8
   314ac:	mov	r3, #0
   314b0:	mvncc	ip, #0
   314b4:	movwcc	r7, #1
   314b8:	cmp	r0, r2
   314bc:	mov	r2, #0
   314c0:	movwcc	r2, #1
   314c4:	cmp	r0, r1
   314c8:	mov	r1, #0
   314cc:	movwcc	r1, #1
   314d0:	cmp	r0, r4
   314d4:	mov	r4, ip
   314d8:	movwcc	r3, #1
   314dc:	orr	r0, r3, r1
   314e0:	orr	r0, r0, r2
   314e4:	orr	r0, r0, r7
   314e8:	b	31864 <__assert_fail@plt+0x1ede8>
   314ec:	mvn	r0, #0
   314f0:	str	lr, [sp, #8]
   314f4:	mul	lr, r4, r8
   314f8:	udiv	r0, r0, r8
   314fc:	cmp	r0, r4
   31500:	mvncc	lr, #0
   31504:	mul	r9, lr, r8
   31508:	cmp	r0, lr
   3150c:	mvncc	r9, #0
   31510:	mul	r7, r9, r8
   31514:	cmp	r0, r9
   31518:	mvncc	r7, #0
   3151c:	mul	r3, r7, r8
   31520:	cmp	r0, r7
   31524:	mvncc	r3, #0
   31528:	mul	r1, r3, r8
   3152c:	cmp	r0, r3
   31530:	mvncc	r1, #0
   31534:	mul	r2, r1, r8
   31538:	cmp	r0, r1
   3153c:	mvncc	r2, #0
   31540:	mul	ip, r2, r8
   31544:	cmp	r0, r2
   31548:	mov	r8, #0
   3154c:	mov	r2, #0
   31550:	mvncc	ip, #0
   31554:	movwcc	r8, #1
   31558:	cmp	r0, r1
   3155c:	mov	r1, #0
   31560:	movwcc	r1, #1
   31564:	cmp	r0, r3
   31568:	mov	r3, #0
   3156c:	movwcc	r3, #1
   31570:	cmp	r0, r7
   31574:	mov	r7, #0
   31578:	movwcc	r7, #1
   3157c:	cmp	r0, r9
   31580:	mov	r9, #0
   31584:	movwcc	r9, #1
   31588:	cmp	r0, lr
   3158c:	mov	lr, #0
   31590:	movwcc	lr, #1
   31594:	cmp	r0, r4
   31598:	mov	r4, ip
   3159c:	movwcc	r2, #1
   315a0:	orr	r0, r2, lr
   315a4:	ldr	lr, [sp, #8]
   315a8:	orr	r0, r0, r9
   315ac:	orr	r0, r0, r7
   315b0:	orr	r0, r0, r3
   315b4:	orr	r0, r0, r1
   315b8:	orr	r0, r0, r8
   315bc:	and	r0, r0, #1
   315c0:	b	31864 <__assert_fail@plt+0x1ede8>
   315c4:	mov	r1, #0
   315c8:	lsr	r0, r4, #22
   315cc:	cmp	r1, r4, lsr #22
   315d0:	lsl	r4, r4, #10
   315d4:	movwne	r0, #1
   315d8:	mvnne	r4, #0
   315dc:	b	31864 <__assert_fail@plt+0x1ede8>
   315e0:	mvn	r0, #0
   315e4:	mul	ip, r4, r8
   315e8:	str	lr, [sp, #8]
   315ec:	mov	r9, #0
   315f0:	udiv	r0, r0, r8
   315f4:	cmp	r0, r4
   315f8:	mvncc	ip, #0
   315fc:	mul	r2, ip, r8
   31600:	cmp	r0, ip
   31604:	mvncc	r2, #0
   31608:	mul	r3, r2, r8
   3160c:	cmp	r0, r2
   31610:	mvncc	r3, #0
   31614:	mul	r7, r3, r8
   31618:	cmp	r0, r3
   3161c:	mvncc	r7, #0
   31620:	mul	r1, r7, r8
   31624:	cmp	r0, r7
   31628:	mvncc	r1, #0
   3162c:	mul	lr, r1, r8
   31630:	cmp	r0, r1
   31634:	mov	r8, #0
   31638:	mov	r1, #0
   3163c:	mvncc	lr, #0
   31640:	movwcc	r8, #1
   31644:	cmp	r0, r7
   31648:	mov	r7, #0
   3164c:	movwcc	r7, #1
   31650:	cmp	r0, r3
   31654:	mov	r3, #0
   31658:	movwcc	r3, #1
   3165c:	cmp	r0, r2
   31660:	mov	r2, #0
   31664:	movwcc	r2, #1
   31668:	cmp	r0, ip
   3166c:	movwcc	r1, #1
   31670:	cmp	r0, r4
   31674:	mov	r4, lr
   31678:	ldr	lr, [sp, #8]
   3167c:	movwcc	r9, #1
   31680:	orr	r0, r9, r1
   31684:	orr	r0, r0, r2
   31688:	orr	r0, r0, r3
   3168c:	orr	r0, r0, r7
   31690:	orr	r0, r0, r8
   31694:	b	31864 <__assert_fail@plt+0x1ede8>
   31698:	mvn	r0, #0
   3169c:	mul	r1, r4, r8
   316a0:	udiv	r0, r0, r8
   316a4:	cmp	r0, r4
   316a8:	mvncc	r1, #0
   316ac:	mul	r2, r1, r8
   316b0:	cmp	r0, r1
   316b4:	mvncc	r2, #0
   316b8:	mul	r3, r2, r8
   316bc:	cmp	r0, r2
   316c0:	mvncc	r3, #0
   316c4:	mul	r7, r3, r8
   316c8:	cmp	r0, r3
   316cc:	mvncc	r7, #0
   316d0:	mul	ip, r7, r8
   316d4:	cmp	r0, r7
   316d8:	mov	r8, lr
   316dc:	mov	lr, #0
   316e0:	mov	r7, #0
   316e4:	mvncc	ip, #0
   316e8:	movwcc	lr, #1
   316ec:	cmp	r0, r3
   316f0:	mov	r3, #0
   316f4:	movwcc	r3, #1
   316f8:	cmp	r0, r2
   316fc:	mov	r2, #0
   31700:	movwcc	r2, #1
   31704:	cmp	r0, r1
   31708:	mov	r1, #0
   3170c:	movwcc	r1, #1
   31710:	cmp	r0, r4
   31714:	mov	r4, ip
   31718:	movwcc	r7, #1
   3171c:	orr	r0, r7, r1
   31720:	orr	r0, r0, r2
   31724:	orr	r0, r0, r3
   31728:	orr	r0, r0, lr
   3172c:	mov	lr, r8
   31730:	b	31864 <__assert_fail@plt+0x1ede8>
   31734:	mvn	r0, #0
   31738:	str	lr, [sp, #8]
   3173c:	mul	lr, r4, r8
   31740:	udiv	r0, r0, r8
   31744:	cmp	r0, r4
   31748:	mvncc	lr, #0
   3174c:	mul	r9, lr, r8
   31750:	cmp	r0, lr
   31754:	mvncc	r9, #0
   31758:	mul	r7, r9, r8
   3175c:	cmp	r0, r9
   31760:	mvncc	r7, #0
   31764:	mul	r3, r7, r8
   31768:	cmp	r0, r7
   3176c:	mvncc	r3, #0
   31770:	mul	r1, r3, r8
   31774:	cmp	r0, r3
   31778:	mvncc	r1, #0
   3177c:	mul	r2, r1, r8
   31780:	cmp	r0, r1
   31784:	mvncc	r2, #0
   31788:	mul	ip, r2, r8
   3178c:	cmp	r0, r2
   31790:	mvncc	ip, #0
   31794:	mul	r8, ip, r8
   31798:	cmp	r0, ip
   3179c:	mov	ip, #0
   317a0:	mvncc	r8, #0
   317a4:	str	r8, [sp, #4]
   317a8:	mov	r8, #0
   317ac:	movwcc	r8, #1
   317b0:	cmp	r0, r2
   317b4:	mov	r2, #0
   317b8:	movwcc	r2, #1
   317bc:	cmp	r0, r1
   317c0:	mov	r1, #0
   317c4:	movwcc	r1, #1
   317c8:	cmp	r0, r3
   317cc:	mov	r3, #0
   317d0:	movwcc	r3, #1
   317d4:	cmp	r0, r7
   317d8:	mov	r7, #0
   317dc:	movwcc	r7, #1
   317e0:	cmp	r0, r9
   317e4:	mov	r9, #0
   317e8:	movwcc	r9, #1
   317ec:	cmp	r0, lr
   317f0:	mov	lr, #0
   317f4:	movwcc	lr, #1
   317f8:	cmp	r0, r4
   317fc:	ldr	r4, [sp, #4]
   31800:	movwcc	ip, #1
   31804:	orr	r0, ip, lr
   31808:	ldr	lr, [sp, #8]
   3180c:	orr	r0, r0, r9
   31810:	orr	r0, r0, r7
   31814:	orr	r0, r0, r3
   31818:	orr	r0, r0, r1
   3181c:	orr	r0, r0, r2
   31820:	orr	r0, r0, r8
   31824:	and	r0, r0, #1
   31828:	b	31864 <__assert_fail@plt+0x1ede8>
   3182c:	movw	r0, #65535	; 0xffff
   31830:	movt	r0, #63	; 0x3f
   31834:	add	r1, r0, #4194304	; 0x400000
   31838:	mov	r0, #0
   3183c:	cmp	r4, r1
   31840:	lsl	r4, r4, #9
   31844:	movwhi	r0, #1
   31848:	mvnhi	r4, #0
   3184c:	b	31864 <__assert_fail@plt+0x1ede8>
   31850:	lsl	r1, r4, #1
   31854:	cmp	r4, #0
   31858:	lsr	r0, r4, #31
   3185c:	mvnlt	r1, #0
   31860:	mov	r4, r1
   31864:	add	r1, r5, lr
   31868:	orr	sl, r0, sl
   3186c:	str	r1, [r6]
   31870:	ldrb	r1, [r5, lr]
   31874:	cmp	r1, #0
   31878:	orrne	sl, sl, #2
   3187c:	ldr	r0, [sp, #12]
   31880:	str	r4, [r0]
   31884:	mov	r0, sl
   31888:	sub	sp, fp, #28
   3188c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31890:	movw	r0, #8631	; 0x21b7
   31894:	movw	r1, #8669	; 0x21dd
   31898:	movw	r3, #8681	; 0x21e9
   3189c:	mov	r2, #84	; 0x54
   318a0:	movt	r0, #5
   318a4:	movt	r1, #5
   318a8:	movt	r3, #5
   318ac:	bl	12a7c <__assert_fail@plt>
   318b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   318b4:	add	fp, sp, #28
   318b8:	sub	sp, sp, #44	; 0x2c
   318bc:	cmp	r2, #37	; 0x25
   318c0:	bcs	32544 <__assert_fail@plt+0x1fac8>
   318c4:	ldr	sl, [fp, #8]
   318c8:	mov	r6, r2
   318cc:	mov	r7, r1
   318d0:	mov	r4, r0
   318d4:	str	r3, [sp, #36]	; 0x24
   318d8:	bl	127d0 <__errno_location@plt>
   318dc:	mov	r5, r0
   318e0:	mov	r0, #0
   318e4:	str	r0, [r5]
   318e8:	bl	12740 <__ctype_b_loc@plt>
   318ec:	ldr	r1, [r0]
   318f0:	mov	r2, r4
   318f4:	ldrb	r0, [r2], #1
   318f8:	add	r3, r1, r0, lsl #1
   318fc:	ldrb	r3, [r3, #1]
   31900:	tst	r3, #32
   31904:	bne	318f4 <__assert_fail@plt+0x1ee78>
   31908:	sub	r9, fp, #32
   3190c:	cmp	r7, #0
   31910:	mov	r8, #4
   31914:	movne	r9, r7
   31918:	cmp	r0, #45	; 0x2d
   3191c:	beq	31cdc <__assert_fail@plt+0x1f260>
   31920:	mov	r0, r4
   31924:	mov	r1, r9
   31928:	mov	r2, r6
   3192c:	mov	r3, #0
   31930:	bl	124dc <__strtoull_internal@plt>
   31934:	mov	r7, r1
   31938:	ldr	r1, [r9]
   3193c:	cmp	r1, r4
   31940:	beq	31978 <__assert_fail@plt+0x1eefc>
   31944:	mov	r6, r0
   31948:	ldr	r0, [r5]
   3194c:	cmp	r0, #0
   31950:	beq	31c94 <__assert_fail@plt+0x1f218>
   31954:	cmp	r0, #34	; 0x22
   31958:	bne	31cdc <__assert_fail@plt+0x1f260>
   3195c:	mov	r8, #1
   31960:	cmp	sl, #0
   31964:	beq	32530 <__assert_fail@plt+0x1fab4>
   31968:	ldrb	r4, [r1]
   3196c:	cmp	r4, #0
   31970:	bne	319bc <__assert_fail@plt+0x1ef40>
   31974:	b	32530 <__assert_fail@plt+0x1fab4>
   31978:	cmp	sl, #0
   3197c:	beq	31cdc <__assert_fail@plt+0x1f260>
   31980:	mov	r5, r1
   31984:	ldrb	r1, [r4]
   31988:	cmp	r1, #0
   3198c:	beq	31cdc <__assert_fail@plt+0x1f260>
   31990:	mov	r0, sl
   31994:	bl	12794 <strchr@plt>
   31998:	cmp	r0, #0
   3199c:	beq	31cdc <__assert_fail@plt+0x1f260>
   319a0:	mov	r1, r5
   319a4:	mov	r8, #0
   319a8:	mov	r6, #1
   319ac:	mov	r7, #0
   319b0:	ldrb	r4, [r1]
   319b4:	cmp	r4, #0
   319b8:	beq	32530 <__assert_fail@plt+0x1fab4>
   319bc:	str	r1, [sp, #32]
   319c0:	mov	r0, sl
   319c4:	mov	r1, r4
   319c8:	bl	12794 <strchr@plt>
   319cc:	cmp	r0, #0
   319d0:	beq	31cd0 <__assert_fail@plt+0x1f254>
   319d4:	sub	r0, r4, #69	; 0x45
   319d8:	mov	r1, #1
   319dc:	mov	r3, #0
   319e0:	mov	r5, #1024	; 0x400
   319e4:	cmp	r0, #47	; 0x2f
   319e8:	str	r1, [sp, #28]
   319ec:	bhi	31af0 <__assert_fail@plt+0x1f074>
   319f0:	add	r1, pc, #0
   319f4:	ldr	pc, [r1, r0, lsl #2]
   319f8:			; <UNDEFINED> instruction: 0x00031ab8
   319fc:	strdeq	r1, [r3], -r0
   31a00:			; <UNDEFINED> instruction: 0x00031ab8
   31a04:	strdeq	r1, [r3], -r0
   31a08:	strdeq	r1, [r3], -r0
   31a0c:	strdeq	r1, [r3], -r0
   31a10:			; <UNDEFINED> instruction: 0x00031ab8
   31a14:	strdeq	r1, [r3], -r0
   31a18:			; <UNDEFINED> instruction: 0x00031ab8
   31a1c:	strdeq	r1, [r3], -r0
   31a20:	strdeq	r1, [r3], -r0
   31a24:			; <UNDEFINED> instruction: 0x00031ab8
   31a28:	strdeq	r1, [r3], -r0
   31a2c:	strdeq	r1, [r3], -r0
   31a30:	strdeq	r1, [r3], -r0
   31a34:			; <UNDEFINED> instruction: 0x00031ab8
   31a38:	strdeq	r1, [r3], -r0
   31a3c:	strdeq	r1, [r3], -r0
   31a40:	strdeq	r1, [r3], -r0
   31a44:	strdeq	r1, [r3], -r0
   31a48:			; <UNDEFINED> instruction: 0x00031ab8
   31a4c:			; <UNDEFINED> instruction: 0x00031ab8
   31a50:	strdeq	r1, [r3], -r0
   31a54:	strdeq	r1, [r3], -r0
   31a58:	strdeq	r1, [r3], -r0
   31a5c:	strdeq	r1, [r3], -r0
   31a60:	strdeq	r1, [r3], -r0
   31a64:	strdeq	r1, [r3], -r0
   31a68:	strdeq	r1, [r3], -r0
   31a6c:	strdeq	r1, [r3], -r0
   31a70:	strdeq	r1, [r3], -r0
   31a74:	strdeq	r1, [r3], -r0
   31a78:	strdeq	r1, [r3], -r0
   31a7c:	strdeq	r1, [r3], -r0
   31a80:			; <UNDEFINED> instruction: 0x00031ab8
   31a84:	strdeq	r1, [r3], -r0
   31a88:	strdeq	r1, [r3], -r0
   31a8c:	strdeq	r1, [r3], -r0
   31a90:			; <UNDEFINED> instruction: 0x00031ab8
   31a94:	strdeq	r1, [r3], -r0
   31a98:			; <UNDEFINED> instruction: 0x00031ab8
   31a9c:	strdeq	r1, [r3], -r0
   31aa0:	strdeq	r1, [r3], -r0
   31aa4:	strdeq	r1, [r3], -r0
   31aa8:	strdeq	r1, [r3], -r0
   31aac:	strdeq	r1, [r3], -r0
   31ab0:	strdeq	r1, [r3], -r0
   31ab4:			; <UNDEFINED> instruction: 0x00031ab8
   31ab8:	mov	r0, sl
   31abc:	mov	r1, #48	; 0x30
   31ac0:	bl	12794 <strchr@plt>
   31ac4:	cmp	r0, #0
   31ac8:	beq	31aec <__assert_fail@plt+0x1f070>
   31acc:	ldr	r1, [sp, #32]
   31ad0:	ldrb	r0, [r1, #1]
   31ad4:	cmp	r0, #66	; 0x42
   31ad8:	cmpne	r0, #68	; 0x44
   31adc:	bne	31ca4 <__assert_fail@plt+0x1f228>
   31ae0:	mov	r5, #1000	; 0x3e8
   31ae4:	mov	r0, #2
   31ae8:	str	r0, [sp, #28]
   31aec:	mov	r3, #0
   31af0:	sub	r0, r4, #66	; 0x42
   31af4:	cmp	r0, #53	; 0x35
   31af8:	bhi	31cd0 <__assert_fail@plt+0x1f254>
   31afc:	add	r1, pc, #0
   31b00:	ldr	pc, [r1, r0, lsl #2]
   31b04:	andeq	r2, r3, r0, asr #32
   31b08:	ldrdeq	r1, [r3], -r0
   31b0c:	ldrdeq	r1, [r3], -r0
   31b10:	andeq	r2, r3, r8, rrx
   31b14:	ldrdeq	r1, [r3], -r0
   31b18:	ldrdeq	r1, [r3], -ip
   31b1c:	ldrdeq	r1, [r3], -r0
   31b20:	ldrdeq	r1, [r3], -r0
   31b24:	ldrdeq	r1, [r3], -r0
   31b28:	andeq	r1, r3, r8, ror #25
   31b2c:	ldrdeq	r1, [r3], -r0
   31b30:	andeq	r1, r3, r0, lsr sp
   31b34:	ldrdeq	r1, [r3], -r0
   31b38:	ldrdeq	r1, [r3], -r0
   31b3c:			; <UNDEFINED> instruction: 0x000321bc
   31b40:	ldrdeq	r1, [r3], -r0
   31b44:	ldrdeq	r1, [r3], -r0
   31b48:	ldrdeq	r1, [r3], -r0
   31b4c:			; <UNDEFINED> instruction: 0x00031dbc
   31b50:	ldrdeq	r1, [r3], -r0
   31b54:	ldrdeq	r1, [r3], -r0
   31b58:	ldrdeq	r1, [r3], -r0
   31b5c:	ldrdeq	r1, [r3], -r0
   31b60:	andeq	r2, r3, r4, ror #5
   31b64:	andeq	r1, r3, r4, lsr #29
   31b68:	ldrdeq	r1, [r3], -r0
   31b6c:	ldrdeq	r1, [r3], -r0
   31b70:	ldrdeq	r1, [r3], -r0
   31b74:	ldrdeq	r1, [r3], -r0
   31b78:	ldrdeq	r1, [r3], -r0
   31b7c:	ldrdeq	r1, [r3], -r0
   31b80:	ldrdeq	r1, [r3], -r0
   31b84:			; <UNDEFINED> instruction: 0x000324b8
   31b88:	andeq	r2, r3, r0, lsl r5
   31b8c:	ldrdeq	r1, [r3], -r0
   31b90:	ldrdeq	r1, [r3], -r0
   31b94:	ldrdeq	r1, [r3], -r0
   31b98:	ldrdeq	r1, [r3], -ip
   31b9c:	ldrdeq	r1, [r3], -r0
   31ba0:	ldrdeq	r1, [r3], -r0
   31ba4:	ldrdeq	r1, [r3], -r0
   31ba8:	andeq	r1, r3, r8, ror #25
   31bac:	ldrdeq	r1, [r3], -r0
   31bb0:	andeq	r1, r3, r0, lsr sp
   31bb4:	ldrdeq	r1, [r3], -r0
   31bb8:	ldrdeq	r1, [r3], -r0
   31bbc:	ldrdeq	r1, [r3], -r0
   31bc0:	ldrdeq	r1, [r3], -r0
   31bc4:	ldrdeq	r1, [r3], -r0
   31bc8:	ldrdeq	r1, [r3], -r0
   31bcc:			; <UNDEFINED> instruction: 0x00031dbc
   31bd0:	ldrdeq	r1, [r3], -r0
   31bd4:	ldrdeq	r1, [r3], -r0
   31bd8:	andeq	r2, r3, ip, ror #9
   31bdc:	mvn	r0, #0
   31be0:	mvn	r1, #0
   31be4:	mov	r2, r5
   31be8:	mov	sl, r3
   31bec:	bl	4c218 <__assert_fail@plt+0x3979c>
   31bf0:	subs	r3, r0, r6
   31bf4:	mov	lr, #0
   31bf8:	umull	r4, r2, r6, r5
   31bfc:	str	r1, [sp, #20]
   31c00:	sbcs	r3, r1, r7
   31c04:	mla	ip, r6, sl, r2
   31c08:	mov	r2, r1
   31c0c:	movwcc	lr, #1
   31c10:	mla	r7, r7, r5, ip
   31c14:	mov	r2, #0
   31c18:	cmp	lr, #0
   31c1c:	mvnne	r4, #0
   31c20:	mvnne	r7, #0
   31c24:	subs	r6, r0, r4
   31c28:	sbcs	r6, r1, r7
   31c2c:	movwcc	r2, #1
   31c30:	umull	r3, r6, r4, r5
   31c34:	cmp	r2, #0
   31c38:	str	r6, [sp, #16]
   31c3c:	mvnne	r3, #0
   31c40:	cmp	r2, #0
   31c44:	umull	r6, ip, r3, r5
   31c48:	mla	r1, r3, sl, ip
   31c4c:	ldr	ip, [sp, #16]
   31c50:	str	r1, [sp, #12]
   31c54:	mla	r4, r4, sl, ip
   31c58:	mla	r4, r7, r5, r4
   31c5c:	ldr	r7, [sp, #12]
   31c60:	mvnne	r4, #0
   31c64:	subs	r0, r0, r3
   31c68:	ldr	r0, [sp, #20]
   31c6c:	mla	r7, r4, r5, r7
   31c70:	sbcs	r0, r0, r4
   31c74:	mov	r0, #0
   31c78:	movwcc	r0, #1
   31c7c:	cmp	r0, #0
   31c80:	mov	r1, r0
   31c84:	orr	r0, lr, r2
   31c88:	mvnne	r7, #0
   31c8c:	mvnne	r6, #0
   31c90:	b	322dc <__assert_fail@plt+0x1f860>
   31c94:	mov	r8, r0
   31c98:	cmp	sl, #0
   31c9c:	bne	31968 <__assert_fail@plt+0x1eeec>
   31ca0:	b	32530 <__assert_fail@plt+0x1fab4>
   31ca4:	cmp	r0, #105	; 0x69
   31ca8:	mov	r3, #0
   31cac:	bne	31af0 <__assert_fail@plt+0x1f074>
   31cb0:	ldrb	r0, [r1, #2]
   31cb4:	mov	r1, #1
   31cb8:	cmp	r0, #66	; 0x42
   31cbc:	movweq	r1, #3
   31cc0:	str	r1, [sp, #28]
   31cc4:	sub	r0, r4, #66	; 0x42
   31cc8:	cmp	r0, #53	; 0x35
   31ccc:	bls	31afc <__assert_fail@plt+0x1f080>
   31cd0:	ldr	r0, [sp, #36]	; 0x24
   31cd4:	orr	r8, r8, #2
   31cd8:	strd	r6, [r0]
   31cdc:	mov	r0, r8
   31ce0:	sub	sp, fp, #28
   31ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ce8:	mvn	r0, #0
   31cec:	mvn	r1, #0
   31cf0:	mov	r2, r5
   31cf4:	mov	r4, r3
   31cf8:	bl	4c218 <__assert_fail@plt+0x3979c>
   31cfc:	subs	r0, r0, r6
   31d00:	mov	r2, #0
   31d04:	sbcs	r0, r1, r7
   31d08:	movwcc	r2, #1
   31d0c:	umull	r0, r1, r6, r5
   31d10:	mla	r1, r6, r4, r1
   31d14:	cmp	r2, #0
   31d18:	mov	r3, r2
   31d1c:	mla	r7, r7, r5, r1
   31d20:	mvnne	r0, #0
   31d24:	mvnne	r7, #0
   31d28:	mov	r6, r0
   31d2c:	b	32510 <__assert_fail@plt+0x1fa94>
   31d30:	mvn	r0, #0
   31d34:	mvn	r1, #0
   31d38:	mov	r2, r5
   31d3c:	str	r3, [sp, #24]
   31d40:	bl	4c218 <__assert_fail@plt+0x3979c>
   31d44:	subs	r3, r0, r6
   31d48:	mov	ip, r0
   31d4c:	umull	r4, r0, r6, r5
   31d50:	mov	sl, #0
   31d54:	sbcs	r3, r1, r7
   31d58:	str	r0, [sp, #20]
   31d5c:	ldr	r0, [sp, #24]
   31d60:	mov	r3, #0
   31d64:	movwcc	r3, #1
   31d68:	cmp	r3, #0
   31d6c:	mvnne	r4, #0
   31d70:	cmp	r3, #0
   31d74:	umull	lr, r2, r4, r5
   31d78:	mla	r2, r4, r0, r2
   31d7c:	str	r2, [sp, #16]
   31d80:	ldr	r2, [sp, #20]
   31d84:	mla	r6, r6, r0, r2
   31d88:	ldr	r0, [sp, #16]
   31d8c:	mla	r6, r7, r5, r6
   31d90:	mvnne	r6, #0
   31d94:	mla	r7, r6, r5, r0
   31d98:	subs	r0, ip, r4
   31d9c:	sbcs	r0, r1, r6
   31da0:	movwcc	sl, #1
   31da4:	cmp	sl, #0
   31da8:	orr	r3, r3, sl
   31dac:	mvnne	lr, #0
   31db0:	mvnne	r7, #0
   31db4:	mov	r6, lr
   31db8:	b	32510 <__assert_fail@plt+0x1fa94>
   31dbc:	mvn	r0, #0
   31dc0:	mvn	r1, #0
   31dc4:	mov	r2, r5
   31dc8:	mov	sl, r3
   31dcc:	bl	4c218 <__assert_fail@plt+0x3979c>
   31dd0:	subs	r3, r0, r6
   31dd4:	mov	ip, r1
   31dd8:	umull	r2, lr, r6, r5
   31ddc:	str	r0, [sp, #20]
   31de0:	sbcs	r3, r1, r7
   31de4:	mov	r1, #0
   31de8:	mla	r6, r6, sl, lr
   31dec:	mov	lr, #0
   31df0:	str	ip, [sp, #16]
   31df4:	movwcc	r1, #1
   31df8:	mla	r7, r7, r5, r6
   31dfc:	cmp	r1, #0
   31e00:	mvnne	r2, #0
   31e04:	cmp	r1, #0
   31e08:	umull	r3, r4, r2, r5
   31e0c:	mvnne	r7, #0
   31e10:	mla	r4, r2, sl, r4
   31e14:	subs	r2, r0, r2
   31e18:	sbcs	r2, ip, r7
   31e1c:	mla	r4, r7, r5, r4
   31e20:	movwcc	lr, #1
   31e24:	mov	r2, #0
   31e28:	cmp	lr, #0
   31e2c:	mvnne	r3, #0
   31e30:	mvnne	r4, #0
   31e34:	subs	r7, r0, r3
   31e38:	mov	r0, r5
   31e3c:	sbcs	r7, ip, r4
   31e40:	movwcc	r2, #1
   31e44:	umull	r5, r7, r3, r5
   31e48:	cmp	r2, #0
   31e4c:	mla	r3, r3, sl, r7
   31e50:	mvnne	r5, #0
   31e54:	mla	r3, r4, r0, r3
   31e58:	cmp	r2, #0
   31e5c:	umull	r6, ip, r5, r0
   31e60:	mvnne	r3, #0
   31e64:	mla	ip, r5, sl, ip
   31e68:	mla	r7, r3, r0, ip
   31e6c:	ldr	r0, [sp, #20]
   31e70:	subs	r0, r0, r5
   31e74:	ldr	r0, [sp, #16]
   31e78:	sbcs	r0, r0, r3
   31e7c:	mov	r0, #0
   31e80:	movwcc	r0, #1
   31e84:	cmp	r0, #0
   31e88:	mov	r3, r0
   31e8c:	orr	r0, r1, lr
   31e90:	orr	r0, r0, r2
   31e94:	mvnne	r7, #0
   31e98:	mvnne	r6, #0
   31e9c:	orr	r3, r0, r3
   31ea0:	b	32510 <__assert_fail@plt+0x1fa94>
   31ea4:	mvn	r0, #0
   31ea8:	mvn	r1, #0
   31eac:	mov	r2, r5
   31eb0:	mov	r4, r3
   31eb4:	str	r3, [sp, #24]
   31eb8:	bl	4c218 <__assert_fail@plt+0x3979c>
   31ebc:	umull	r3, r2, r6, r5
   31ec0:	mla	r2, r6, r4, r2
   31ec4:	subs	r6, r0, r6
   31ec8:	sbcs	r6, r1, r7
   31ecc:	mla	r2, r7, r5, r2
   31ed0:	mov	r7, #0
   31ed4:	mov	r6, #0
   31ed8:	movwcc	r6, #1
   31edc:	cmp	r6, #0
   31ee0:	str	r6, [sp, #20]
   31ee4:	mvnne	r3, #0
   31ee8:	mvnne	r2, #0
   31eec:	subs	r4, r0, r3
   31ef0:	umull	r6, ip, r3, r5
   31ef4:	sbcs	r4, r1, r2
   31ef8:	ldr	r4, [sp, #24]
   31efc:	movwcc	r7, #1
   31f00:	cmp	r7, #0
   31f04:	mov	lr, r7
   31f08:	str	r7, [sp, #16]
   31f0c:	mvnne	r6, #0
   31f10:	cmp	lr, #0
   31f14:	mov	lr, #0
   31f18:	umull	sl, r7, r6, r5
   31f1c:	mla	r3, r3, r4, ip
   31f20:	mla	r7, r6, r4, r7
   31f24:	mov	r4, r0
   31f28:	mla	r2, r2, r5, r3
   31f2c:	mvnne	r2, #0
   31f30:	subs	r3, r0, r6
   31f34:	mov	r0, #0
   31f38:	mla	r7, r2, r5, r7
   31f3c:	sbcs	r2, r1, r2
   31f40:	mov	r3, r4
   31f44:	movwcc	r0, #1
   31f48:	str	r3, [sp, #4]
   31f4c:	cmp	r0, #0
   31f50:	str	r0, [sp, #12]
   31f54:	mov	r0, r1
   31f58:	mvnne	sl, #0
   31f5c:	mvnne	r7, #0
   31f60:	str	r0, [sp, #8]
   31f64:	subs	r2, r4, sl
   31f68:	ldr	r4, [sp, #24]
   31f6c:	sbcs	r2, r1, r7
   31f70:	movwcc	lr, #1
   31f74:	umull	r6, r2, sl, r5
   31f78:	cmp	lr, #0
   31f7c:	mvnne	r6, #0
   31f80:	mla	r2, sl, r4, r2
   31f84:	cmp	lr, #0
   31f88:	umull	r1, ip, r6, r5
   31f8c:	mla	r2, r7, r5, r2
   31f90:	mla	ip, r6, r4, ip
   31f94:	mvnne	r2, #0
   31f98:	subs	r6, r3, r6
   31f9c:	mla	r7, r2, r5, ip
   31fa0:	sbcs	r2, r0, r2
   31fa4:	mov	ip, #0
   31fa8:	movwcc	ip, #1
   31fac:	mov	r2, #0
   31fb0:	cmp	ip, #0
   31fb4:	mvnne	r1, #0
   31fb8:	mvnne	r7, #0
   31fbc:	subs	r6, r3, r1
   31fc0:	ldr	r3, [sp, #24]
   31fc4:	sbcs	r6, r0, r7
   31fc8:	umull	r0, sl, r1, r5
   31fcc:	movwcc	r2, #1
   31fd0:	cmp	r2, #0
   31fd4:	mvnne	r0, #0
   31fd8:	mla	r1, r1, r3, sl
   31fdc:	cmp	r2, #0
   31fe0:	umull	r6, r4, r0, r5
   31fe4:	mla	r1, r7, r5, r1
   31fe8:	mla	r4, r0, r3, r4
   31fec:	ldr	r3, [sp, #4]
   31ff0:	mvnne	r1, #0
   31ff4:	mla	r7, r1, r5, r4
   31ff8:	ldr	r5, [sp, #16]
   31ffc:	subs	r0, r3, r0
   32000:	ldr	r0, [sp, #8]
   32004:	sbcs	r0, r0, r1
   32008:	mov	r0, #0
   3200c:	movwcc	r0, #1
   32010:	cmp	r0, #0
   32014:	mov	r1, r0
   32018:	ldr	r0, [sp, #20]
   3201c:	mvnne	r7, #0
   32020:	mvnne	r6, #0
   32024:	orr	r0, r0, r5
   32028:	ldr	r5, [sp, #12]
   3202c:	orr	r0, r0, r5
   32030:	orr	r0, r0, lr
   32034:	orr	r0, r0, ip
   32038:	orr	r0, r0, r2
   3203c:	b	324ac <__assert_fail@plt+0x1fa30>
   32040:	mov	r1, #0
   32044:	lsl	r2, r7, #10
   32048:	lsl	r0, r6, #10
   3204c:	lsr	r3, r7, #22
   32050:	cmp	r1, r7, lsr #22
   32054:	orr	r2, r2, r6, lsr #22
   32058:	mvnne	r0, #0
   3205c:	movwne	r3, #1
   32060:	cmp	r1, r7, lsr #22
   32064:	b	324dc <__assert_fail@plt+0x1fa60>
   32068:	mvn	r0, #0
   3206c:	mvn	r1, #0
   32070:	mov	r2, r5
   32074:	mov	sl, r3
   32078:	bl	4c218 <__assert_fail@plt+0x3979c>
   3207c:	subs	r2, r0, r6
   32080:	mov	ip, r0
   32084:	mov	r0, #0
   32088:	sbcs	r2, r1, r7
   3208c:	movwcc	r0, #1
   32090:	umull	r4, r2, r6, r5
   32094:	cmp	r0, #0
   32098:	mla	r2, r6, sl, r2
   3209c:	str	r0, [sp, #20]
   320a0:	mvnne	r4, #0
   320a4:	cmp	r0, #0
   320a8:	mla	r2, r7, r5, r2
   320ac:	mov	r0, #0
   320b0:	umull	lr, r3, r4, r5
   320b4:	mvnne	r2, #0
   320b8:	mla	r3, r4, sl, r3
   320bc:	mla	r6, r2, r5, r3
   320c0:	subs	r3, ip, r4
   320c4:	sbcs	r2, r1, r2
   320c8:	mov	r3, r1
   320cc:	movwcc	r0, #1
   320d0:	str	r3, [sp, #8]
   320d4:	cmp	r0, #0
   320d8:	str	r0, [sp, #16]
   320dc:	mov	r0, ip
   320e0:	mvnne	lr, #0
   320e4:	mvnne	r6, #0
   320e8:	str	r0, [sp, #12]
   320ec:	subs	r2, ip, lr
   320f0:	umull	r7, r4, lr, r5
   320f4:	sbcs	r2, r1, r6
   320f8:	mla	r4, lr, sl, r4
   320fc:	mov	r2, #0
   32100:	mla	r6, r6, r5, r4
   32104:	mov	r4, #0
   32108:	movwcc	r2, #1
   3210c:	cmp	r2, #0
   32110:	mvnne	r7, #0
   32114:	cmp	r2, #0
   32118:	umull	r1, ip, r7, r5
   3211c:	mvnne	r6, #0
   32120:	mla	ip, r7, sl, ip
   32124:	subs	r7, r0, r7
   32128:	mla	lr, r6, r5, ip
   3212c:	sbcs	r7, r3, r6
   32130:	mov	ip, #0
   32134:	movwcc	ip, #1
   32138:	cmp	ip, #0
   3213c:	mvnne	r1, #0
   32140:	mvnne	lr, #0
   32144:	subs	r7, r0, r1
   32148:	sbcs	r7, r3, lr
   3214c:	movwcc	r4, #1
   32150:	umull	r0, r7, r1, r5
   32154:	cmp	r4, #0
   32158:	mla	r1, r1, sl, r7
   3215c:	mvnne	r0, #0
   32160:	mla	r1, lr, r5, r1
   32164:	cmp	r4, #0
   32168:	umull	r6, r3, r0, r5
   3216c:	mvnne	r1, #0
   32170:	mla	r3, r0, sl, r3
   32174:	mla	r7, r1, r5, r3
   32178:	ldr	r3, [sp, #12]
   3217c:	subs	r0, r3, r0
   32180:	ldr	r3, [sp, #16]
   32184:	ldr	r0, [sp, #8]
   32188:	sbcs	r0, r0, r1
   3218c:	mov	r0, #0
   32190:	movwcc	r0, #1
   32194:	cmp	r0, #0
   32198:	mov	r1, r0
   3219c:	ldr	r0, [sp, #20]
   321a0:	mvnne	r7, #0
   321a4:	mvnne	r6, #0
   321a8:	orr	r0, r0, r3
   321ac:	orr	r0, r0, r2
   321b0:	orr	r0, r0, ip
   321b4:	orr	r0, r0, r4
   321b8:	b	322dc <__assert_fail@plt+0x1f860>
   321bc:	mvn	r0, #0
   321c0:	mvn	r1, #0
   321c4:	mov	r2, r5
   321c8:	mov	sl, r3
   321cc:	bl	4c218 <__assert_fail@plt+0x3979c>
   321d0:	umull	r3, r2, r6, r5
   321d4:	mov	lr, r1
   321d8:	mov	r1, r0
   321dc:	mla	r2, r6, sl, r2
   321e0:	subs	r6, r0, r6
   321e4:	mov	r0, #0
   321e8:	sbcs	r6, lr, r7
   321ec:	mla	r2, r7, r5, r2
   321f0:	movwcc	r0, #1
   321f4:	cmp	r0, #0
   321f8:	str	r0, [sp, #20]
   321fc:	mov	r0, r1
   32200:	mvnne	r3, #0
   32204:	mvnne	r2, #0
   32208:	str	r0, [sp, #16]
   3220c:	subs	r4, r1, r3
   32210:	umull	r7, ip, r3, r5
   32214:	sbcs	r4, lr, r2
   32218:	mla	r3, r3, sl, ip
   3221c:	mov	ip, #0
   32220:	mov	r4, #0
   32224:	mla	r2, r2, r5, r3
   32228:	movwcc	r4, #1
   3222c:	cmp	r4, #0
   32230:	mvnne	r7, #0
   32234:	cmp	r4, #0
   32238:	umull	r1, r6, r7, r5
   3223c:	mvnne	r2, #0
   32240:	mla	r6, r7, sl, r6
   32244:	mla	r3, r2, r5, r6
   32248:	subs	r6, r0, r7
   3224c:	sbcs	r2, lr, r2
   32250:	movwcc	ip, #1
   32254:	mov	r2, #0
   32258:	cmp	ip, #0
   3225c:	mvnne	r1, #0
   32260:	mvnne	r3, #0
   32264:	subs	r6, r0, r1
   32268:	sbcs	r6, lr, r3
   3226c:	movwcc	r2, #1
   32270:	umull	r0, r6, r1, r5
   32274:	cmp	r2, #0
   32278:	str	r6, [sp, #12]
   3227c:	mvnne	r0, #0
   32280:	cmp	r2, #0
   32284:	umull	r6, r7, r0, r5
   32288:	mla	r7, r0, sl, r7
   3228c:	str	r7, [sp, #8]
   32290:	ldr	r7, [sp, #12]
   32294:	mla	r1, r1, sl, r7
   32298:	mla	r1, r3, r5, r1
   3229c:	ldr	r3, [sp, #8]
   322a0:	mvnne	r1, #0
   322a4:	mla	r7, r1, r5, r3
   322a8:	ldr	r3, [sp, #16]
   322ac:	subs	r0, r3, r0
   322b0:	sbcs	r0, lr, r1
   322b4:	mov	r0, #0
   322b8:	movwcc	r0, #1
   322bc:	cmp	r0, #0
   322c0:	mov	r1, r0
   322c4:	ldr	r0, [sp, #20]
   322c8:	mvnne	r7, #0
   322cc:	mvnne	r6, #0
   322d0:	orr	r0, r0, r4
   322d4:	orr	r0, r0, ip
   322d8:	orr	r0, r0, r2
   322dc:	orr	r3, r0, r1
   322e0:	b	32510 <__assert_fail@plt+0x1fa94>
   322e4:	mvn	r0, #0
   322e8:	mvn	r1, #0
   322ec:	mov	r2, r5
   322f0:	mov	sl, r3
   322f4:	bl	4c218 <__assert_fail@plt+0x3979c>
   322f8:	mov	ip, r1
   322fc:	subs	r1, r0, r6
   32300:	umull	r3, lr, r6, r5
   32304:	mov	r2, r5
   32308:	sbcs	r1, ip, r7
   3230c:	mla	r6, r6, sl, lr
   32310:	str	ip, [sp, #4]
   32314:	mov	r1, #0
   32318:	mla	r7, r7, r2, r6
   3231c:	movwcc	r1, #1
   32320:	cmp	r1, #0
   32324:	str	r1, [sp, #20]
   32328:	mvnne	r3, #0
   3232c:	cmp	r1, #0
   32330:	mov	r1, r0
   32334:	umull	r4, r5, r3, r5
   32338:	mvnne	r7, #0
   3233c:	mov	lr, r1
   32340:	mla	r5, r3, sl, r5
   32344:	subs	r3, r0, r3
   32348:	sbcs	r0, ip, r7
   3234c:	mla	r5, r7, r2, r5
   32350:	mov	r0, #0
   32354:	movwcc	r0, #1
   32358:	cmp	r0, #0
   3235c:	str	r0, [sp, #16]
   32360:	mvnne	r4, #0
   32364:	mvnne	r5, #0
   32368:	subs	r0, r1, r4
   3236c:	mov	r1, #0
   32370:	sbcs	r0, ip, r5
   32374:	movwcc	r1, #1
   32378:	umull	r3, r0, r4, r2
   3237c:	cmp	r1, #0
   32380:	mla	r0, r4, sl, r0
   32384:	mov	r4, lr
   32388:	str	r1, [sp, #12]
   3238c:	mvnne	r3, #0
   32390:	mla	r0, r5, r2, r0
   32394:	cmp	r1, #0
   32398:	str	r4, [sp]
   3239c:	umull	r7, r6, r3, r2
   323a0:	mvnne	r0, #0
   323a4:	mla	r6, r3, sl, r6
   323a8:	subs	r3, lr, r3
   323ac:	mla	r5, r0, r2, r6
   323b0:	sbcs	r0, ip, r0
   323b4:	mov	r3, #0
   323b8:	mov	r0, #0
   323bc:	movwcc	r0, #1
   323c0:	cmp	r0, #0
   323c4:	str	r0, [sp, #8]
   323c8:	mvnne	r7, #0
   323cc:	mvnne	r5, #0
   323d0:	subs	r0, lr, r7
   323d4:	sbcs	r0, ip, r5
   323d8:	movwcc	r3, #1
   323dc:	umull	r6, r0, r7, r2
   323e0:	cmp	r3, #0
   323e4:	mla	r7, r7, sl, r0
   323e8:	mov	r0, ip
   323ec:	mvnne	r6, #0
   323f0:	mla	r7, r5, r2, r7
   323f4:	cmp	r3, #0
   323f8:	mov	r5, #0
   323fc:	umull	r1, lr, r6, r2
   32400:	mvnne	r7, #0
   32404:	mla	lr, r6, sl, lr
   32408:	subs	r6, r4, r6
   3240c:	mla	lr, r7, r2, lr
   32410:	sbcs	r7, ip, r7
   32414:	mov	ip, #0
   32418:	movwcc	ip, #1
   3241c:	cmp	ip, #0
   32420:	mvnne	r1, #0
   32424:	mvnne	lr, #0
   32428:	subs	r7, r4, r1
   3242c:	sbcs	r7, r0, lr
   32430:	movwcc	r5, #1
   32434:	umull	r0, r7, r1, r2
   32438:	cmp	r5, #0
   3243c:	mla	r1, r1, sl, r7
   32440:	mvnne	r0, #0
   32444:	mla	r1, lr, r2, r1
   32448:	cmp	r5, #0
   3244c:	umull	r6, r4, r0, r2
   32450:	mvnne	r1, #0
   32454:	mla	r4, r0, sl, r4
   32458:	mla	r7, r1, r2, r4
   3245c:	ldr	r2, [sp]
   32460:	subs	r0, r2, r0
   32464:	ldr	r2, [sp, #16]
   32468:	ldr	r0, [sp, #4]
   3246c:	sbcs	r0, r0, r1
   32470:	mov	r0, #0
   32474:	movwcc	r0, #1
   32478:	cmp	r0, #0
   3247c:	mov	r1, r0
   32480:	ldr	r0, [sp, #20]
   32484:	mvnne	r7, #0
   32488:	mvnne	r6, #0
   3248c:	orr	r0, r0, r2
   32490:	ldr	r2, [sp, #12]
   32494:	orr	r0, r0, r2
   32498:	ldr	r2, [sp, #8]
   3249c:	orr	r0, r0, r2
   324a0:	orr	r0, r0, r3
   324a4:	orr	r0, r0, ip
   324a8:	orr	r0, r0, r5
   324ac:	orr	r0, r0, r1
   324b0:	and	r3, r0, #1
   324b4:	b	32510 <__assert_fail@plt+0x1fa94>
   324b8:	mov	r1, #0
   324bc:	lsl	r2, r7, #9
   324c0:	lsl	r0, r6, #9
   324c4:	lsr	r3, r7, #23
   324c8:	cmp	r1, r7, lsr #23
   324cc:	orr	r2, r2, r6, lsr #23
   324d0:	mvnne	r0, #0
   324d4:	movwne	r3, #1
   324d8:	cmp	r1, r7, lsr #23
   324dc:	mvnne	r2, #0
   324e0:	mov	r6, r0
   324e4:	mov	r7, r2
   324e8:	b	32510 <__assert_fail@plt+0x1fa94>
   324ec:	lsl	r1, r7, #1
   324f0:	lsl	r0, r6, #1
   324f4:	cmp	r7, #0
   324f8:	lsr	r3, r7, #31
   324fc:	orr	r1, r1, r6, lsr #31
   32500:	mvnlt	r0, #0
   32504:	mvnlt	r1, #0
   32508:	mov	r6, r0
   3250c:	mov	r7, r1
   32510:	ldr	r1, [sp, #32]
   32514:	ldr	r2, [sp, #28]
   32518:	orr	r8, r3, r8
   3251c:	add	r0, r1, r2
   32520:	str	r0, [r9]
   32524:	ldrb	r0, [r1, r2]
   32528:	cmp	r0, #0
   3252c:	orrne	r8, r8, #2
   32530:	ldr	r0, [sp, #36]	; 0x24
   32534:	strd	r6, [r0]
   32538:	mov	r0, r8
   3253c:	sub	sp, fp, #28
   32540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32544:	movw	r0, #8631	; 0x21b7
   32548:	movw	r1, #8669	; 0x21dd
   3254c:	movw	r3, #8762	; 0x223a
   32550:	mov	r2, #84	; 0x54
   32554:	movt	r0, #5
   32558:	movt	r1, #5
   3255c:	movt	r3, #5
   32560:	bl	12a7c <__assert_fail@plt>
   32564:	push	{r4, sl, fp, lr}
   32568:	add	fp, sp, #8
   3256c:	sub	sp, sp, #8
   32570:	movw	r0, #13648	; 0x3550
   32574:	mov	r4, #0
   32578:	mov	r1, sp
   3257c:	mov	r2, #10
   32580:	movt	r0, #6
   32584:	str	r4, [sp, #4]
   32588:	str	r4, [sp]
   3258c:	ldr	r3, [r0]
   32590:	add	r0, sp, #4
   32594:	bl	123a4 <__getdelim@plt>
   32598:	cmp	r0, #1
   3259c:	blt	325cc <__assert_fail@plt+0x1fb50>
   325a0:	sub	r1, r0, #1
   325a4:	ldr	r0, [sp, #4]
   325a8:	ldrb	r2, [r0, r1]
   325ac:	cmp	r2, #10
   325b0:	moveq	r2, #0
   325b4:	strbeq	r2, [r0, r1]
   325b8:	ldreq	r0, [sp, #4]
   325bc:	bl	128c0 <rpmatch@plt>
   325c0:	mov	r4, #0
   325c4:	cmp	r0, #0
   325c8:	movwgt	r4, #1
   325cc:	ldr	r0, [sp, #4]
   325d0:	bl	32c40 <__assert_fail@plt+0x201c4>
   325d4:	mov	r0, r4
   325d8:	sub	sp, fp, #8
   325dc:	pop	{r4, sl, fp, pc}
   325e0:	clz	r2, r1
   325e4:	clz	r3, r0
   325e8:	lsr	r2, r2, #5
   325ec:	lsr	r3, r3, #5
   325f0:	orrs	r2, r3, r2
   325f4:	movwne	r1, #1
   325f8:	movwne	r0, #1
   325fc:	cmp	r1, #0
   32600:	beq	32630 <__assert_fail@plt+0x1fbb4>
   32604:	mvn	r2, #-2147483648	; 0x80000000
   32608:	udiv	r2, r2, r1
   3260c:	cmp	r2, r0
   32610:	bcs	32630 <__assert_fail@plt+0x1fbb4>
   32614:	push	{fp, lr}
   32618:	mov	fp, sp
   3261c:	bl	127d0 <__errno_location@plt>
   32620:	mov	r1, #12
   32624:	str	r1, [r0]
   32628:	mov	r0, #0
   3262c:	pop	{fp, pc}
   32630:	b	1235c <calloc@plt>
   32634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32638:	add	fp, sp, #28
   3263c:	sub	sp, sp, #4
   32640:	mov	r4, r0
   32644:	bl	125a8 <chdir@plt>
   32648:	cmp	r0, #0
   3264c:	beq	3271c <__assert_fail@plt+0x1fca0>
   32650:	mov	r6, r0
   32654:	bl	127d0 <__errno_location@plt>
   32658:	mov	r9, r0
   3265c:	ldr	r0, [r0]
   32660:	cmp	r0, #36	; 0x24
   32664:	bne	32870 <__assert_fail@plt+0x1fdf4>
   32668:	mov	r0, r4
   3266c:	bl	12788 <strlen@plt>
   32670:	cmp	r0, #0
   32674:	beq	32998 <__assert_fail@plt+0x1ff1c>
   32678:	mov	r7, r0
   3267c:	mov	r0, #0
   32680:	cmp	r0, r7, lsr #12
   32684:	beq	329b8 <__assert_fail@plt+0x1ff3c>
   32688:	movw	r1, #53058	; 0xcf42
   3268c:	mov	r0, r4
   32690:	movt	r1, #4
   32694:	bl	12a70 <strspn@plt>
   32698:	cmp	r0, #0
   3269c:	beq	3272c <__assert_fail@plt+0x1fcb0>
   326a0:	mov	r6, r0
   326a4:	cmp	r0, #2
   326a8:	bne	3287c <__assert_fail@plt+0x1fe00>
   326ac:	add	r0, r4, #3
   326b0:	sub	r2, r7, #3
   326b4:	mov	r1, #47	; 0x2f
   326b8:	mov	r8, #47	; 0x2f
   326bc:	bl	12860 <memchr@plt>
   326c0:	cmp	r0, #0
   326c4:	beq	328d4 <__assert_fail@plt+0x1fe58>
   326c8:	mov	r6, r0
   326cc:	mov	r0, #0
   326d0:	mov	r1, r4
   326d4:	mov	r2, #18688	; 0x4900
   326d8:	strb	r0, [r6]
   326dc:	mvn	r0, #99	; 0x63
   326e0:	bl	127ac <openat64@plt>
   326e4:	cmp	r0, #0
   326e8:	strb	r8, [r6]
   326ec:	blt	328cc <__assert_fail@plt+0x1fe50>
   326f0:	movw	r1, #53058	; 0xcf42
   326f4:	add	r6, r6, #1
   326f8:	mov	r5, r0
   326fc:	movt	r1, #4
   32700:	mov	r0, r6
   32704:	bl	12a70 <strspn@plt>
   32708:	add	r6, r6, r0
   3270c:	ldrb	r0, [r6]
   32710:	cmp	r0, #47	; 0x2f
   32714:	bne	32740 <__assert_fail@plt+0x1fcc4>
   32718:	b	328ac <__assert_fail@plt+0x1fe30>
   3271c:	mov	r6, #0
   32720:	mov	r0, r6
   32724:	sub	sp, fp, #28
   32728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3272c:	mvn	r5, #99	; 0x63
   32730:	mov	r6, r4
   32734:	ldrb	r0, [r6]
   32738:	cmp	r0, #47	; 0x2f
   3273c:	beq	328ac <__assert_fail@plt+0x1fe30>
   32740:	add	sl, r4, r7
   32744:	cmp	r6, sl
   32748:	bhi	329d8 <__assert_fail@plt+0x1ff5c>
   3274c:	sub	r0, sl, r6
   32750:	str	r9, [sp]
   32754:	cmp	r0, #4096	; 0x1000
   32758:	blt	32830 <__assert_fail@plt+0x1fdb4>
   3275c:	movw	r9, #53058	; 0xcf42
   32760:	mov	r8, #0
   32764:	movt	r9, #4
   32768:	mov	r0, r6
   3276c:	mov	r1, #47	; 0x2f
   32770:	mov	r2, #4096	; 0x1000
   32774:	bl	127b8 <memrchr@plt>
   32778:	cmp	r0, #0
   3277c:	beq	328ec <__assert_fail@plt+0x1fe70>
   32780:	mov	r4, r0
   32784:	strb	r8, [r0], -r6
   32788:	cmp	r0, #4096	; 0x1000
   3278c:	bge	32958 <__assert_fail@plt+0x1fedc>
   32790:	mov	r0, r5
   32794:	mov	r1, r6
   32798:	mov	r2, #18688	; 0x4900
   3279c:	bl	127ac <openat64@plt>
   327a0:	cmp	r0, #0
   327a4:	blt	32908 <__assert_fail@plt+0x1fe8c>
   327a8:	mov	r7, r0
   327ac:	cmp	r5, #0
   327b0:	blt	327c4 <__assert_fail@plt+0x1fd48>
   327b4:	mov	r0, r5
   327b8:	bl	12a34 <close@plt>
   327bc:	cmp	r0, #0
   327c0:	bne	32978 <__assert_fail@plt+0x1fefc>
   327c4:	mov	r0, #47	; 0x2f
   327c8:	mov	r1, r9
   327cc:	strb	r0, [r4], #1
   327d0:	mov	r0, r4
   327d4:	bl	12a70 <strspn@plt>
   327d8:	add	r6, r4, r0
   327dc:	mov	r5, r7
   327e0:	sub	r0, sl, r6
   327e4:	cmp	r0, #4096	; 0x1000
   327e8:	bge	32768 <__assert_fail@plt+0x1fcec>
   327ec:	cmp	r6, sl
   327f0:	bcs	3283c <__assert_fail@plt+0x1fdc0>
   327f4:	mov	r0, r7
   327f8:	mov	r1, r6
   327fc:	mov	r2, #18688	; 0x4900
   32800:	bl	127ac <openat64@plt>
   32804:	ldr	r9, [sp]
   32808:	cmp	r0, #0
   3280c:	blt	32944 <__assert_fail@plt+0x1fec8>
   32810:	mov	r5, r0
   32814:	cmp	r7, #0
   32818:	blt	32844 <__assert_fail@plt+0x1fdc8>
   3281c:	mov	r0, r7
   32820:	bl	12a34 <close@plt>
   32824:	cmp	r0, #0
   32828:	beq	32844 <__assert_fail@plt+0x1fdc8>
   3282c:	b	32978 <__assert_fail@plt+0x1fefc>
   32830:	mov	r7, r5
   32834:	cmp	r6, sl
   32838:	bcc	327f4 <__assert_fail@plt+0x1fd78>
   3283c:	ldr	r9, [sp]
   32840:	mov	r5, r7
   32844:	mov	r0, r5
   32848:	bl	12980 <fchdir@plt>
   3284c:	cmp	r0, #0
   32850:	bne	32914 <__assert_fail@plt+0x1fe98>
   32854:	mov	r6, #0
   32858:	cmp	r5, #0
   3285c:	blt	32870 <__assert_fail@plt+0x1fdf4>
   32860:	mov	r0, r5
   32864:	bl	12a34 <close@plt>
   32868:	cmp	r0, #0
   3286c:	bne	32978 <__assert_fail@plt+0x1fefc>
   32870:	mov	r0, r6
   32874:	sub	sp, fp, #28
   32878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3287c:	movw	r1, #53058	; 0xcf42
   32880:	mvn	r0, #99	; 0x63
   32884:	mov	r2, #18688	; 0x4900
   32888:	movt	r1, #4
   3288c:	bl	127ac <openat64@plt>
   32890:	cmp	r0, #0
   32894:	blt	328cc <__assert_fail@plt+0x1fe50>
   32898:	mov	r5, r0
   3289c:	add	r6, r4, r6
   328a0:	ldrb	r0, [r6]
   328a4:	cmp	r0, #47	; 0x2f
   328a8:	bne	32740 <__assert_fail@plt+0x1fcc4>
   328ac:	movw	r0, #8897	; 0x22c1
   328b0:	movw	r1, #8849	; 0x2291
   328b4:	movw	r3, #8862	; 0x229e
   328b8:	mov	r2, #162	; 0xa2
   328bc:	movt	r0, #5
   328c0:	movt	r1, #5
   328c4:	movt	r3, #5
   328c8:	bl	12a7c <__assert_fail@plt>
   328cc:	ldr	r4, [r9]
   328d0:	b	32930 <__assert_fail@plt+0x1feb4>
   328d4:	mov	r0, #36	; 0x24
   328d8:	str	r0, [r9]
   328dc:	mvn	r6, #0
   328e0:	mov	r0, r6
   328e4:	sub	sp, fp, #28
   328e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   328ec:	ldr	r1, [sp]
   328f0:	mov	r0, #36	; 0x24
   328f4:	str	r0, [r1]
   328f8:	mvn	r6, #0
   328fc:	mov	r0, r6
   32900:	sub	sp, fp, #28
   32904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32908:	ldr	r9, [sp]
   3290c:	mov	r0, #47	; 0x2f
   32910:	strb	r0, [r4]
   32914:	ldr	r4, [r9]
   32918:	cmp	r5, #0
   3291c:	blt	32930 <__assert_fail@plt+0x1feb4>
   32920:	mov	r0, r5
   32924:	bl	12a34 <close@plt>
   32928:	cmp	r0, #0
   3292c:	bne	32978 <__assert_fail@plt+0x1fefc>
   32930:	str	r4, [r9]
   32934:	mvn	r6, #0
   32938:	mov	r0, r6
   3293c:	sub	sp, fp, #28
   32940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32944:	mov	r5, r7
   32948:	ldr	r4, [r9]
   3294c:	cmp	r5, #0
   32950:	bge	32920 <__assert_fail@plt+0x1fea4>
   32954:	b	32930 <__assert_fail@plt+0x1feb4>
   32958:	movw	r0, #8924	; 0x22dc
   3295c:	movw	r1, #8849	; 0x2291
   32960:	movw	r3, #8862	; 0x229e
   32964:	mov	r2, #179	; 0xb3
   32968:	movt	r0, #5
   3296c:	movt	r1, #5
   32970:	movt	r3, #5
   32974:	bl	12a7c <__assert_fail@plt>
   32978:	movw	r0, #8943	; 0x22ef
   3297c:	movw	r1, #8849	; 0x2291
   32980:	movw	r3, #8956	; 0x22fc
   32984:	mov	r2, #64	; 0x40
   32988:	movt	r0, #5
   3298c:	movt	r1, #5
   32990:	movt	r3, #5
   32994:	bl	12a7c <__assert_fail@plt>
   32998:	movw	r0, #8841	; 0x2289
   3299c:	movw	r1, #8849	; 0x2291
   329a0:	movw	r3, #8862	; 0x229e
   329a4:	mov	r2, #126	; 0x7e
   329a8:	movt	r0, #5
   329ac:	movt	r1, #5
   329b0:	movt	r3, #5
   329b4:	bl	12a7c <__assert_fail@plt>
   329b8:	movw	r0, #8885	; 0x22b5
   329bc:	movw	r1, #8849	; 0x2291
   329c0:	movw	r3, #8862	; 0x229e
   329c4:	mov	r2, #127	; 0x7f
   329c8:	movt	r0, #5
   329cc:	movt	r1, #5
   329d0:	movt	r3, #5
   329d4:	bl	12a7c <__assert_fail@plt>
   329d8:	movw	r0, #8909	; 0x22cd
   329dc:	movw	r1, #8849	; 0x2291
   329e0:	movw	r3, #8862	; 0x229e
   329e4:	mov	r2, #163	; 0xa3
   329e8:	movt	r0, #5
   329ec:	movt	r1, #5
   329f0:	movt	r3, #5
   329f4:	bl	12a7c <__assert_fail@plt>
   329f8:	sub	sp, sp, #8
   329fc:	push	{r4, r5, r6, r7, fp, lr}
   32a00:	add	fp, sp, #16
   32a04:	sub	sp, sp, #8
   32a08:	mov	r5, r0
   32a0c:	add	r0, fp, #8
   32a10:	cmp	r1, #11
   32a14:	str	r3, [fp, #12]
   32a18:	str	r2, [fp, #8]
   32a1c:	str	r0, [sp, #4]
   32a20:	bhi	32a5c <__assert_fail@plt+0x1ffe0>
   32a24:	mov	r0, #1
   32a28:	movw	r2, #1300	; 0x514
   32a2c:	tst	r2, r0, lsl r1
   32a30:	bne	32b1c <__assert_fail@plt+0x200a0>
   32a34:	movw	r2, #2570	; 0xa0a
   32a38:	tst	r2, r0, lsl r1
   32a3c:	bne	32a84 <__assert_fail@plt+0x20008>
   32a40:	cmp	r1, #0
   32a44:	bne	32a5c <__assert_fail@plt+0x1ffe0>
   32a48:	ldr	r0, [sp, #4]
   32a4c:	add	r1, r0, #4
   32a50:	str	r1, [sp, #4]
   32a54:	mov	r1, #0
   32a58:	b	32b28 <__assert_fail@plt+0x200ac>
   32a5c:	sub	r0, r1, #1024	; 0x400
   32a60:	cmp	r0, #10
   32a64:	bhi	32b1c <__assert_fail@plt+0x200a0>
   32a68:	mov	r2, #1
   32a6c:	movw	r3, #645	; 0x285
   32a70:	tst	r3, r2, lsl r0
   32a74:	bne	32b1c <__assert_fail@plt+0x200a0>
   32a78:	movw	r3, #1282	; 0x502
   32a7c:	tst	r3, r2, lsl r0
   32a80:	beq	32a90 <__assert_fail@plt+0x20014>
   32a84:	mov	r0, r5
   32a88:	bl	128b4 <fcntl64@plt>
   32a8c:	b	32b34 <__assert_fail@plt+0x200b8>
   32a90:	cmp	r0, #6
   32a94:	bne	32b1c <__assert_fail@plt+0x200a0>
   32a98:	ldr	r0, [sp, #4]
   32a9c:	movw	r7, #15928	; 0x3e38
   32aa0:	movt	r7, #6
   32aa4:	add	r1, r0, #4
   32aa8:	str	r1, [sp, #4]
   32aac:	ldr	r6, [r0]
   32ab0:	ldr	r0, [r7]
   32ab4:	cmp	r0, #0
   32ab8:	blt	32b58 <__assert_fail@plt+0x200dc>
   32abc:	mov	r0, r5
   32ac0:	movw	r1, #1030	; 0x406
   32ac4:	mov	r2, r6
   32ac8:	bl	128b4 <fcntl64@plt>
   32acc:	mov	r4, r0
   32ad0:	cmn	r0, #1
   32ad4:	bgt	32b4c <__assert_fail@plt+0x200d0>
   32ad8:	bl	127d0 <__errno_location@plt>
   32adc:	ldr	r0, [r0]
   32ae0:	cmp	r0, #22
   32ae4:	bne	32b4c <__assert_fail@plt+0x200d0>
   32ae8:	mov	r0, r5
   32aec:	mov	r1, #0
   32af0:	mov	r2, r6
   32af4:	bl	128b4 <fcntl64@plt>
   32af8:	mov	r4, r0
   32afc:	cmp	r0, #0
   32b00:	blt	32b38 <__assert_fail@plt+0x200bc>
   32b04:	mvn	r0, #0
   32b08:	str	r0, [r7]
   32b0c:	mov	r0, #1
   32b10:	cmp	r0, #0
   32b14:	bne	32b84 <__assert_fail@plt+0x20108>
   32b18:	b	32b38 <__assert_fail@plt+0x200bc>
   32b1c:	ldr	r0, [sp, #4]
   32b20:	add	r2, r0, #4
   32b24:	str	r2, [sp, #4]
   32b28:	ldr	r2, [r0]
   32b2c:	mov	r0, r5
   32b30:	bl	128b4 <fcntl64@plt>
   32b34:	mov	r4, r0
   32b38:	mov	r0, r4
   32b3c:	sub	sp, fp, #16
   32b40:	pop	{r4, r5, r6, r7, fp, lr}
   32b44:	add	sp, sp, #8
   32b48:	bx	lr
   32b4c:	mov	r0, #1
   32b50:	str	r0, [r7]
   32b54:	b	32b38 <__assert_fail@plt+0x200bc>
   32b58:	mov	r0, r5
   32b5c:	mov	r1, #0
   32b60:	mov	r2, r6
   32b64:	bl	128b4 <fcntl64@plt>
   32b68:	mov	r4, r0
   32b6c:	ldr	r0, [r7]
   32b70:	add	r0, r0, #1
   32b74:	clz	r0, r0
   32b78:	lsr	r0, r0, #5
   32b7c:	cmp	r0, #0
   32b80:	beq	32b38 <__assert_fail@plt+0x200bc>
   32b84:	cmp	r4, #0
   32b88:	blt	32b38 <__assert_fail@plt+0x200bc>
   32b8c:	mov	r0, r4
   32b90:	mov	r1, #1
   32b94:	bl	128b4 <fcntl64@plt>
   32b98:	cmp	r0, #0
   32b9c:	blt	32bb8 <__assert_fail@plt+0x2013c>
   32ba0:	orr	r2, r0, #1
   32ba4:	mov	r0, r4
   32ba8:	mov	r1, #2
   32bac:	bl	128b4 <fcntl64@plt>
   32bb0:	cmn	r0, #1
   32bb4:	bne	32b38 <__assert_fail@plt+0x200bc>
   32bb8:	bl	127d0 <__errno_location@plt>
   32bbc:	ldr	r6, [r0]
   32bc0:	mov	r5, r0
   32bc4:	mov	r0, r4
   32bc8:	bl	12a34 <close@plt>
   32bcc:	str	r6, [r5]
   32bd0:	mvn	r4, #0
   32bd4:	b	32b38 <__assert_fail@plt+0x200bc>
   32bd8:	push	{r4, sl, fp, lr}
   32bdc:	add	fp, sp, #8
   32be0:	sub	sp, sp, #8
   32be4:	mov	r4, r0
   32be8:	cmp	r0, #0
   32bec:	beq	32c08 <__assert_fail@plt+0x2018c>
   32bf0:	mov	r0, r4
   32bf4:	bl	126f8 <__freading@plt>
   32bf8:	cmp	r0, #0
   32bfc:	ldrbne	r0, [r4, #1]
   32c00:	tstne	r0, #1
   32c04:	bne	32c18 <__assert_fail@plt+0x2019c>
   32c08:	mov	r0, r4
   32c0c:	sub	sp, fp, #8
   32c10:	pop	{r4, sl, fp, lr}
   32c14:	b	1241c <fflush@plt>
   32c18:	mov	r0, #1
   32c1c:	mov	r2, #0
   32c20:	mov	r3, #0
   32c24:	str	r0, [sp]
   32c28:	mov	r0, r4
   32c2c:	bl	32c68 <__assert_fail@plt+0x201ec>
   32c30:	mov	r0, r4
   32c34:	sub	sp, fp, #8
   32c38:	pop	{r4, sl, fp, lr}
   32c3c:	b	1241c <fflush@plt>
   32c40:	push	{r4, r5, r6, sl, fp, lr}
   32c44:	add	fp, sp, #16
   32c48:	mov	r4, r0
   32c4c:	bl	127d0 <__errno_location@plt>
   32c50:	ldr	r6, [r0]
   32c54:	mov	r5, r0
   32c58:	mov	r0, r4
   32c5c:	bl	12458 <free@plt>
   32c60:	str	r6, [r5]
   32c64:	pop	{r4, r5, r6, sl, fp, pc}
   32c68:	push	{r4, r5, r6, r7, fp, lr}
   32c6c:	add	fp, sp, #16
   32c70:	sub	sp, sp, #8
   32c74:	mov	r4, r0
   32c78:	ldr	r0, [r0, #4]
   32c7c:	mov	r5, r3
   32c80:	mov	r6, r2
   32c84:	ldr	r1, [r4, #8]
   32c88:	cmp	r1, r0
   32c8c:	bne	32ca8 <__assert_fail@plt+0x2022c>
   32c90:	ldrd	r0, [r4, #16]
   32c94:	cmp	r1, r0
   32c98:	bne	32ca8 <__assert_fail@plt+0x2022c>
   32c9c:	ldr	r0, [r4, #36]	; 0x24
   32ca0:	cmp	r0, #0
   32ca4:	beq	32cc0 <__assert_fail@plt+0x20244>
   32ca8:	mov	r0, r4
   32cac:	mov	r2, r6
   32cb0:	mov	r3, r5
   32cb4:	sub	sp, fp, #16
   32cb8:	pop	{r4, r5, r6, r7, fp, lr}
   32cbc:	b	1289c <fseeko64@plt>
   32cc0:	ldr	r7, [fp, #8]
   32cc4:	mov	r0, r4
   32cc8:	bl	12848 <fileno@plt>
   32ccc:	mov	r2, r6
   32cd0:	mov	r3, r5
   32cd4:	str	r7, [sp]
   32cd8:	bl	12608 <lseek64@plt>
   32cdc:	and	r2, r0, r1
   32ce0:	cmn	r2, #1
   32ce4:	mvneq	r0, #0
   32ce8:	subeq	sp, fp, #16
   32cec:	popeq	{r4, r5, r6, r7, fp, pc}
   32cf0:	strd	r0, [r4, #80]	; 0x50
   32cf4:	ldr	r0, [r4]
   32cf8:	bic	r0, r0, #16
   32cfc:	str	r0, [r4]
   32d00:	mov	r0, #0
   32d04:	sub	sp, fp, #16
   32d08:	pop	{r4, r5, r6, r7, fp, pc}
   32d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32d10:	add	fp, sp, #28
   32d14:	sub	sp, sp, #28
   32d18:	cmp	r1, #4096	; 0x1000
   32d1c:	bcs	32d38 <__assert_fail@plt+0x202bc>
   32d20:	mov	sl, r0
   32d24:	and	r0, r1, #516	; 0x204
   32d28:	mov	r6, r1
   32d2c:	cmp	r0, #516	; 0x204
   32d30:	tstne	r6, #18
   32d34:	bne	32d54 <__assert_fail@plt+0x202d8>
   32d38:	bl	127d0 <__errno_location@plt>
   32d3c:	mov	r1, #22
   32d40:	mov	r4, #0
   32d44:	str	r1, [r0]
   32d48:	mov	r0, r4
   32d4c:	sub	sp, fp, #28
   32d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d54:	mov	r0, #1
   32d58:	mov	r1, #96	; 0x60
   32d5c:	mov	r5, r2
   32d60:	bl	325e0 <__assert_fail@plt+0x1fb64>
   32d64:	cmp	r0, #0
   32d68:	beq	33324 <__assert_fail@plt+0x208a8>
   32d6c:	mov	r4, r0
   32d70:	mvn	r0, #99	; 0x63
   32d74:	tst	r6, #2
   32d78:	mov	r1, r6
   32d7c:	str	r0, [r4, #32]
   32d80:	bic	r0, r6, #516	; 0x204
   32d84:	str	r5, [r4, #44]	; 0x2c
   32d88:	str	r4, [sp, #24]
   32d8c:	orrne	r1, r0, #4
   32d90:	str	r1, [r4, #48]	; 0x30
   32d94:	ldr	r0, [sl]
   32d98:	cmp	r0, #0
   32d9c:	beq	32e00 <__assert_fail@plt+0x20384>
   32da0:	add	r7, sl, #4
   32da4:	mov	r4, #0
   32da8:	bl	12788 <strlen@plt>
   32dac:	cmp	r0, r4
   32db0:	movhi	r4, r0
   32db4:	ldr	r0, [r7], #4
   32db8:	cmp	r0, #0
   32dbc:	bne	32da8 <__assert_fail@plt+0x2032c>
   32dc0:	add	r0, r4, #1
   32dc4:	ldr	r4, [sp, #24]
   32dc8:	cmp	r0, #4096	; 0x1000
   32dcc:	movls	r0, #4096	; 0x1000
   32dd0:	ldr	r1, [r4, #36]	; 0x24
   32dd4:	add	r0, r0, #256	; 0x100
   32dd8:	adds	r1, r0, r1
   32ddc:	bcc	32e14 <__assert_fail@plt+0x20398>
   32de0:	ldr	r0, [r4, #24]
   32de4:	bl	32c40 <__assert_fail@plt+0x201c4>
   32de8:	mov	r0, #0
   32dec:	str	r0, [r4, #24]
   32df0:	bl	127d0 <__errno_location@plt>
   32df4:	mov	r1, #36	; 0x24
   32df8:	str	r1, [r0]
   32dfc:	b	3331c <__assert_fail@plt+0x208a0>
   32e00:	mov	r0, #4096	; 0x1000
   32e04:	ldr	r1, [r4, #36]	; 0x24
   32e08:	add	r0, r0, #256	; 0x100
   32e0c:	adds	r1, r0, r1
   32e10:	bcs	32de0 <__assert_fail@plt+0x20364>
   32e14:	str	r1, [r4, #36]	; 0x24
   32e18:	ldr	r0, [r4, #24]
   32e1c:	bl	36328 <__assert_fail@plt+0x238ac>
   32e20:	cmp	r0, #0
   32e24:	beq	32e88 <__assert_fail@plt+0x2040c>
   32e28:	str	r0, [r4, #24]
   32e2c:	ldr	r0, [sl]
   32e30:	cmp	r0, #0
   32e34:	beq	32e9c <__assert_fail@plt+0x20420>
   32e38:	mov	r0, #176	; 0xb0
   32e3c:	bl	35608 <__assert_fail@plt+0x22b8c>
   32e40:	cmp	r0, #0
   32e44:	beq	33314 <__assert_fail@plt+0x20898>
   32e48:	ldr	r1, [r4, #24]
   32e4c:	mov	r7, r0
   32e50:	mov	r0, #0
   32e54:	mov	r2, #196608	; 0x30000
   32e58:	strb	r0, [r7, #168]	; 0xa8
   32e5c:	str	r2, [r7, #58]	; 0x3a
   32e60:	mvn	r2, #0
   32e64:	str	r0, [r7, #12]
   32e68:	str	r0, [r7, #16]
   32e6c:	str	r0, [r7, #20]
   32e70:	str	r4, [r7, #44]	; 0x2c
   32e74:	str	r2, [r7, #48]	; 0x30
   32e78:	str	r0, [r7, #52]	; 0x34
   32e7c:	str	r1, [r7, #28]
   32e80:	str	r0, [r7, #32]
   32e84:	b	32ea0 <__assert_fail@plt+0x20424>
   32e88:	ldr	r0, [r4, #24]
   32e8c:	bl	32c40 <__assert_fail@plt+0x201c4>
   32e90:	mov	r0, #0
   32e94:	str	r0, [r4, #24]
   32e98:	b	3331c <__assert_fail@plt+0x208a0>
   32e9c:	mov	r7, #0
   32ea0:	cmp	r5, #0
   32ea4:	ldrbne	r0, [r4, #49]	; 0x31
   32ea8:	ubfxne	r0, r0, #2, #1
   32eac:	ldr	r4, [sl]
   32eb0:	moveq	r0, #1
   32eb4:	str	r0, [sp, #12]
   32eb8:	cmp	r4, #0
   32ebc:	beq	33024 <__assert_fail@plt+0x205a8>
   32ec0:	tst	r6, #2048	; 0x800
   32ec4:	str	r7, [sp, #20]
   32ec8:	str	r5, [sp, #16]
   32ecc:	bne	33048 <__assert_fail@plt+0x205cc>
   32ed0:	mov	r0, #0
   32ed4:	mov	r8, #0
   32ed8:	mov	r5, #0
   32edc:	str	r0, [sp, #8]
   32ee0:	mov	r0, r4
   32ee4:	bl	12788 <strlen@plt>
   32ee8:	mov	r9, r0
   32eec:	cmp	r0, #3
   32ef0:	bcc	32f20 <__assert_fail@plt+0x204a4>
   32ef4:	add	r0, r4, r9
   32ef8:	ldrb	r0, [r0, #-1]
   32efc:	cmp	r0, #47	; 0x2f
   32f00:	bne	32f20 <__assert_fail@plt+0x204a4>
   32f04:	sub	r0, r4, #2
   32f08:	ldrb	r1, [r0, r9]
   32f0c:	cmp	r1, #47	; 0x2f
   32f10:	bne	32f20 <__assert_fail@plt+0x204a4>
   32f14:	sub	r9, r9, #1
   32f18:	cmp	r9, #1
   32f1c:	bhi	32f08 <__assert_fail@plt+0x2048c>
   32f20:	add	r0, r9, #176	; 0xb0
   32f24:	bic	r0, r0, #7
   32f28:	bl	35608 <__assert_fail@plt+0x22b8c>
   32f2c:	cmp	r0, #0
   32f30:	beq	33188 <__assert_fail@plt+0x2070c>
   32f34:	add	r6, r0, #168	; 0xa8
   32f38:	mov	r7, r0
   32f3c:	mov	r1, r4
   32f40:	mov	r2, r9
   32f44:	mov	r0, r6
   32f48:	bl	124b8 <memcpy@plt>
   32f4c:	ldr	r0, [sp, #24]
   32f50:	mov	r4, #0
   32f54:	mov	r1, #196608	; 0x30000
   32f58:	cmp	r8, #0
   32f5c:	strb	r4, [r6, r9]
   32f60:	str	r1, [r7, #58]	; 0x3a
   32f64:	add	r1, r7, #44	; 0x2c
   32f68:	ldr	r2, [r0, #24]
   32f6c:	stm	r1, {r0, r4, r9}
   32f70:	ldr	r1, [sp, #20]
   32f74:	str	r1, [r7, #4]
   32f78:	str	r4, [r7, #12]
   32f7c:	str	r4, [r7, #16]
   32f80:	str	r4, [r7, #20]
   32f84:	str	r6, [r7, #24]
   32f88:	str	r2, [r7, #28]
   32f8c:	ldr	r2, [sp, #12]
   32f90:	mov	r1, r8
   32f94:	str	r4, [r7, #32]
   32f98:	movwne	r1, #1
   32f9c:	tst	r2, r1
   32fa0:	beq	32fd0 <__assert_fail@plt+0x20554>
   32fa4:	mov	r0, #2
   32fa8:	str	r0, [r7, #112]	; 0x70
   32fac:	mov	r0, #11
   32fb0:	str	r4, [r7, #116]	; 0x74
   32fb4:	strh	r0, [r7, #56]	; 0x38
   32fb8:	ldr	r0, [sp, #16]
   32fbc:	cmp	r0, #0
   32fc0:	beq	32fec <__assert_fail@plt+0x20570>
   32fc4:	str	r8, [r7, #8]
   32fc8:	mov	r8, r7
   32fcc:	b	33004 <__assert_fail@plt+0x20588>
   32fd0:	mov	r1, r7
   32fd4:	mov	r2, #0
   32fd8:	bl	33370 <__assert_fail@plt+0x208f4>
   32fdc:	strh	r0, [r7, #56]	; 0x38
   32fe0:	ldr	r0, [sp, #16]
   32fe4:	cmp	r0, #0
   32fe8:	bne	32fc4 <__assert_fail@plt+0x20548>
   32fec:	cmp	r8, #0
   32ff0:	str	r4, [r7, #8]
   32ff4:	beq	33018 <__assert_fail@plt+0x2059c>
   32ff8:	ldr	r0, [sp, #8]
   32ffc:	str	r7, [sp, #8]
   33000:	str	r7, [r0, #8]
   33004:	ldr	r4, [sl, #4]!
   33008:	add	r5, r5, #1
   3300c:	cmp	r4, #0
   33010:	bne	32ee0 <__assert_fail@plt+0x20464>
   33014:	b	33198 <__assert_fail@plt+0x2071c>
   33018:	mov	r0, r7
   3301c:	str	r7, [sp, #8]
   33020:	b	32fc8 <__assert_fail@plt+0x2054c>
   33024:	ldr	r4, [sp, #24]
   33028:	mov	r8, #0
   3302c:	mov	r0, #176	; 0xb0
   33030:	bl	35608 <__assert_fail@plt+0x22b8c>
   33034:	cmp	r0, #0
   33038:	bne	331f4 <__assert_fail@plt+0x20778>
   3303c:	mov	r0, #0
   33040:	str	r0, [r4]
   33044:	b	332d8 <__assert_fail@plt+0x2085c>
   33048:	add	r0, sl, #4
   3304c:	mov	r9, #0
   33050:	mov	r8, #0
   33054:	mov	r5, #0
   33058:	str	r0, [sp, #8]
   3305c:	ldr	r0, [sp, #12]
   33060:	eor	r0, r0, #1
   33064:	str	r0, [sp, #12]
   33068:	mov	r0, #0
   3306c:	str	r0, [sp, #4]
   33070:	mov	r0, r4
   33074:	mov	sl, r5
   33078:	bl	12788 <strlen@plt>
   3307c:	mov	r7, r0
   33080:	add	r0, r0, #176	; 0xb0
   33084:	bic	r0, r0, #7
   33088:	bl	35608 <__assert_fail@plt+0x22b8c>
   3308c:	cmp	r0, #0
   33090:	beq	33188 <__assert_fail@plt+0x2070c>
   33094:	add	r6, r0, #168	; 0xa8
   33098:	mov	r5, r0
   3309c:	mov	r1, r4
   330a0:	mov	r2, r7
   330a4:	mov	r0, r6
   330a8:	bl	124b8 <memcpy@plt>
   330ac:	ldr	r0, [sp, #24]
   330b0:	mov	r1, #196608	; 0x30000
   330b4:	strb	r9, [r6, r7]
   330b8:	str	r1, [r5, #58]	; 0x3a
   330bc:	ldr	r1, [sp, #20]
   330c0:	ldr	r2, [r0, #24]
   330c4:	str	r0, [r5, #44]	; 0x2c
   330c8:	str	r9, [r5, #48]	; 0x30
   330cc:	str	r7, [r5, #52]	; 0x34
   330d0:	str	r1, [r5, #4]
   330d4:	str	r9, [r5, #12]
   330d8:	str	r9, [r5, #16]
   330dc:	str	r9, [r5, #20]
   330e0:	str	r6, [r5, #24]
   330e4:	clz	r1, r8
   330e8:	lsr	r1, r1, #5
   330ec:	str	r2, [r5, #28]
   330f0:	ldr	r2, [sp, #12]
   330f4:	str	r9, [r5, #32]
   330f8:	orrs	r1, r2, r1
   330fc:	bne	3312c <__assert_fail@plt+0x206b0>
   33100:	mov	r0, #2
   33104:	str	r0, [r5, #112]	; 0x70
   33108:	str	r9, [r5, #116]	; 0x74
   3310c:	mov	r0, #11
   33110:	strh	r0, [r5, #56]	; 0x38
   33114:	ldr	r0, [sp, #16]
   33118:	cmp	r0, #0
   3311c:	beq	33148 <__assert_fail@plt+0x206cc>
   33120:	str	r8, [r5, #8]
   33124:	mov	r8, r5
   33128:	b	33160 <__assert_fail@plt+0x206e4>
   3312c:	mov	r1, r5
   33130:	mov	r2, #0
   33134:	bl	33370 <__assert_fail@plt+0x208f4>
   33138:	strh	r0, [r5, #56]	; 0x38
   3313c:	ldr	r0, [sp, #16]
   33140:	cmp	r0, #0
   33144:	bne	33120 <__assert_fail@plt+0x206a4>
   33148:	cmp	r8, #0
   3314c:	str	r9, [r5, #8]
   33150:	beq	3317c <__assert_fail@plt+0x20700>
   33154:	ldr	r0, [sp, #4]
   33158:	str	r5, [sp, #4]
   3315c:	str	r5, [r0, #8]
   33160:	ldr	r0, [sp, #8]
   33164:	mov	r5, sl
   33168:	add	r5, sl, #1
   3316c:	ldr	r4, [r0, sl, lsl #2]
   33170:	cmp	r4, #0
   33174:	bne	33070 <__assert_fail@plt+0x205f4>
   33178:	b	33198 <__assert_fail@plt+0x2071c>
   3317c:	mov	r0, r5
   33180:	str	r5, [sp, #4]
   33184:	b	33124 <__assert_fail@plt+0x206a8>
   33188:	ldr	r7, [sp, #20]
   3318c:	cmp	r8, #0
   33190:	bne	332e0 <__assert_fail@plt+0x20864>
   33194:	b	33308 <__assert_fail@plt+0x2088c>
   33198:	ldr	r0, [sp, #16]
   3319c:	cmp	r0, #0
   331a0:	beq	331dc <__assert_fail@plt+0x20760>
   331a4:	ldr	r7, [sp, #20]
   331a8:	ldr	r4, [sp, #24]
   331ac:	cmp	r5, #2
   331b0:	bcc	331e4 <__assert_fail@plt+0x20768>
   331b4:	mov	r0, r4
   331b8:	mov	r1, r8
   331bc:	mov	r2, r5
   331c0:	bl	33508 <__assert_fail@plt+0x20a8c>
   331c4:	mov	r8, r0
   331c8:	mov	r0, #176	; 0xb0
   331cc:	bl	35608 <__assert_fail@plt+0x22b8c>
   331d0:	cmp	r0, #0
   331d4:	bne	331f4 <__assert_fail@plt+0x20778>
   331d8:	b	3303c <__assert_fail@plt+0x205c0>
   331dc:	ldr	r7, [sp, #20]
   331e0:	ldr	r4, [sp, #24]
   331e4:	mov	r0, #176	; 0xb0
   331e8:	bl	35608 <__assert_fail@plt+0x22b8c>
   331ec:	cmp	r0, #0
   331f0:	beq	3303c <__assert_fail@plt+0x205c0>
   331f4:	ldr	r2, [r4, #24]
   331f8:	mov	r1, #0
   331fc:	mov	r3, #196608	; 0x30000
   33200:	str	r0, [r4]
   33204:	str	r1, [r0, #52]	; 0x34
   33208:	strb	r1, [r0, #168]	; 0xa8
   3320c:	str	r4, [r0, #44]	; 0x2c
   33210:	str	r3, [r0, #58]	; 0x3a
   33214:	str	r2, [r0, #28]
   33218:	mov	r2, #9
   3321c:	str	r1, [r0, #32]
   33220:	strh	r2, [r0, #56]	; 0x38
   33224:	str	r8, [r0, #8]
   33228:	str	r1, [r0, #12]
   3322c:	str	r1, [r0, #16]
   33230:	str	r1, [r0, #20]
   33234:	mov	r1, #1
   33238:	str	r1, [r0, #48]	; 0x30
   3323c:	ldrh	r0, [r4, #48]	; 0x30
   33240:	movw	r1, #258	; 0x102
   33244:	tst	r0, r1
   33248:	beq	33284 <__assert_fail@plt+0x20808>
   3324c:	movw	r0, #11328	; 0x2c40
   33250:	movw	r2, #21136	; 0x5290
   33254:	movw	r3, #21168	; 0x52b0
   33258:	mov	r1, #0
   3325c:	movt	r0, #3
   33260:	movt	r2, #3
   33264:	movt	r3, #3
   33268:	str	r0, [sp]
   3326c:	mov	r0, #31
   33270:	bl	23f90 <__assert_fail@plt+0x11514>
   33274:	cmp	r0, #0
   33278:	str	r0, [r4, #56]	; 0x38
   3327c:	bne	3329c <__assert_fail@plt+0x20820>
   33280:	b	332d8 <__assert_fail@plt+0x2085c>
   33284:	mov	r0, #32
   33288:	bl	35608 <__assert_fail@plt+0x22b8c>
   3328c:	cmp	r0, #0
   33290:	str	r0, [r4, #56]	; 0x38
   33294:	beq	332d8 <__assert_fail@plt+0x2085c>
   33298:	bl	4b744 <__assert_fail@plt+0x38cc8>
   3329c:	ldr	r4, [sp, #24]
   332a0:	ldr	r0, [r4, #48]	; 0x30
   332a4:	tst	r0, #516	; 0x204
   332a8:	bne	33358 <__assert_fail@plt+0x208dc>
   332ac:	mov	r1, #32768	; 0x8000
   332b0:	tst	r0, #512	; 0x200
   332b4:	and	r1, r1, r0, lsl #11
   332b8:	orr	r1, r1, #18688	; 0x4900
   332bc:	orr	r2, r1, #524288	; 0x80000
   332c0:	bne	33334 <__assert_fail@plt+0x208b8>
   332c4:	movw	r0, #54804	; 0xd614
   332c8:	mov	r1, r2
   332cc:	movt	r0, #4
   332d0:	bl	2389c <__assert_fail@plt+0x10e20>
   332d4:	b	33344 <__assert_fail@plt+0x208c8>
   332d8:	cmp	r8, #0
   332dc:	beq	33308 <__assert_fail@plt+0x2088c>
   332e0:	ldrd	r4, [r8, #8]
   332e4:	cmp	r5, #0
   332e8:	beq	332f4 <__assert_fail@plt+0x20878>
   332ec:	mov	r0, r5
   332f0:	bl	12a4c <closedir@plt>
   332f4:	mov	r0, r8
   332f8:	bl	32c40 <__assert_fail@plt+0x201c4>
   332fc:	cmp	r4, #0
   33300:	mov	r8, r4
   33304:	bne	332e0 <__assert_fail@plt+0x20864>
   33308:	mov	r0, r7
   3330c:	bl	32c40 <__assert_fail@plt+0x201c4>
   33310:	ldr	r4, [sp, #24]
   33314:	ldr	r0, [r4, #24]
   33318:	bl	32c40 <__assert_fail@plt+0x201c4>
   3331c:	mov	r0, r4
   33320:	bl	32c40 <__assert_fail@plt+0x201c4>
   33324:	mov	r4, #0
   33328:	mov	r0, r4
   3332c:	sub	sp, fp, #28
   33330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33334:	ldr	r0, [r4, #32]
   33338:	movw	r1, #54804	; 0xd614
   3333c:	movt	r1, #4
   33340:	bl	27820 <__assert_fail@plt+0x14da4>
   33344:	str	r0, [r4, #28]
   33348:	cmn	r0, #1
   3334c:	ldrle	r0, [r4, #48]	; 0x30
   33350:	orrle	r0, r0, #4
   33354:	strle	r0, [r4, #48]	; 0x30
   33358:	add	r0, r4, #60	; 0x3c
   3335c:	mvn	r1, #0
   33360:	bl	4b980 <__assert_fail@plt+0x38f04>
   33364:	mov	r0, r4
   33368:	sub	sp, fp, #28
   3336c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33370:	push	{r4, r5, r6, sl, fp, lr}
   33374:	add	fp, sp, #16
   33378:	sub	sp, sp, #8
   3337c:	mov	r4, r1
   33380:	ldr	r1, [r0, #48]	; 0x30
   33384:	ldr	r3, [r4, #48]	; 0x30
   33388:	add	r5, r4, #64	; 0x40
   3338c:	cmp	r3, #0
   33390:	andeq	r3, r1, #1
   33394:	orreq	r2, r3, r2
   33398:	cmp	r2, #0
   3339c:	andseq	r1, r1, #2
   333a0:	beq	333fc <__assert_fail@plt+0x20980>
   333a4:	ldr	r1, [r4, #24]
   333a8:	mov	r0, #3
   333ac:	mov	r2, r5
   333b0:	bl	129e0 <__xstat64@plt>
   333b4:	cmp	r0, #0
   333b8:	beq	3347c <__assert_fail@plt+0x20a00>
   333bc:	bl	127d0 <__errno_location@plt>
   333c0:	mov	r6, r0
   333c4:	ldr	r0, [r0]
   333c8:	cmp	r0, #2
   333cc:	bne	3342c <__assert_fail@plt+0x209b0>
   333d0:	ldr	r1, [r4, #24]
   333d4:	mov	r0, #3
   333d8:	mov	r2, r5
   333dc:	bl	12a40 <__lxstat64@plt>
   333e0:	cmp	r0, #0
   333e4:	bne	33428 <__assert_fail@plt+0x209ac>
   333e8:	mov	r0, #0
   333ec:	str	r0, [r6]
   333f0:	mov	r0, #13
   333f4:	sub	sp, fp, #16
   333f8:	pop	{r4, r5, r6, sl, fp, pc}
   333fc:	ldr	r1, [r0, #32]
   33400:	ldr	r2, [r4, #24]
   33404:	mov	r0, #256	; 0x100
   33408:	mov	r3, r5
   3340c:	str	r0, [sp]
   33410:	mov	r0, #3
   33414:	bl	125b4 <__fxstatat64@plt>
   33418:	cmp	r0, #0
   3341c:	beq	3347c <__assert_fail@plt+0x20a00>
   33420:	bl	127d0 <__errno_location@plt>
   33424:	mov	r6, r0
   33428:	ldr	r0, [r6]
   3342c:	vmov.i32	q8, #0	; 0x00000000
   33430:	add	r1, r5, #80	; 0x50
   33434:	str	r0, [r4, #32]
   33438:	mov	r0, #0
   3343c:	vst1.64	{d16-d17}, [r1]
   33440:	add	r1, r5, #64	; 0x40
   33444:	str	r0, [r5, #96]	; 0x60
   33448:	vst1.64	{d16-d17}, [r1]
   3344c:	add	r1, r5, #48	; 0x30
   33450:	vst1.64	{d16-d17}, [r1]
   33454:	add	r1, r5, #32
   33458:	vst1.64	{d16-d17}, [r1]
   3345c:	add	r1, r5, #16
   33460:	vst1.64	{d16-d17}, [r1]
   33464:	mov	r1, #100	; 0x64
   33468:	vst1.64	{d16-d17}, [r5], r1
   3346c:	str	r0, [r5]
   33470:	mov	r0, #10
   33474:	sub	sp, fp, #16
   33478:	pop	{r4, r5, r6, sl, fp, pc}
   3347c:	ldr	r0, [r4, #80]	; 0x50
   33480:	and	r0, r0, #61440	; 0xf000
   33484:	cmp	r0, #40960	; 0xa000
   33488:	beq	334e4 <__assert_fail@plt+0x20a68>
   3348c:	cmp	r0, #32768	; 0x8000
   33490:	moveq	r0, #8
   33494:	subeq	sp, fp, #16
   33498:	popeq	{r4, r5, r6, sl, fp, pc}
   3349c:	cmp	r0, #16384	; 0x4000
   334a0:	bne	334d8 <__assert_fail@plt+0x20a5c>
   334a4:	ldrb	r1, [r4, #168]	; 0xa8
   334a8:	mov	r0, #1
   334ac:	cmp	r1, #46	; 0x2e
   334b0:	bne	334d0 <__assert_fail@plt+0x20a54>
   334b4:	ldrb	r1, [r4, #169]	; 0xa9
   334b8:	cmp	r1, #0
   334bc:	beq	334f0 <__assert_fail@plt+0x20a74>
   334c0:	cmp	r1, #46	; 0x2e
   334c4:	ldrbeq	r1, [r4, #170]	; 0xaa
   334c8:	cmpeq	r1, #0
   334cc:	beq	334f0 <__assert_fail@plt+0x20a74>
   334d0:	sub	sp, fp, #16
   334d4:	pop	{r4, r5, r6, sl, fp, pc}
   334d8:	mov	r0, #3
   334dc:	sub	sp, fp, #16
   334e0:	pop	{r4, r5, r6, sl, fp, pc}
   334e4:	mov	r0, #12
   334e8:	sub	sp, fp, #16
   334ec:	pop	{r4, r5, r6, sl, fp, pc}
   334f0:	ldr	r1, [r4, #48]	; 0x30
   334f4:	mov	r0, #5
   334f8:	cmp	r1, #0
   334fc:	movweq	r0, #1
   33500:	sub	sp, fp, #16
   33504:	pop	{r4, r5, r6, sl, fp, pc}
   33508:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3350c:	add	fp, sp, #24
   33510:	ldrd	r8, [r0, #40]	; 0x28
   33514:	mov	r5, r2
   33518:	mov	r4, r1
   3351c:	mov	r6, r0
   33520:	cmp	r8, r2
   33524:	bcs	33564 <__assert_fail@plt+0x20ae8>
   33528:	add	r1, r5, #40	; 0x28
   3352c:	cmn	r1, #-1073741823	; 0xc0000001
   33530:	str	r1, [r6, #40]	; 0x28
   33534:	bhi	335f0 <__assert_fail@plt+0x20b74>
   33538:	add	r7, r6, #8
   3353c:	lsl	r1, r1, #2
   33540:	ldr	r0, [r7]
   33544:	bl	36328 <__assert_fail@plt+0x238ac>
   33548:	cmp	r0, #0
   3354c:	beq	335f0 <__assert_fail@plt+0x20b74>
   33550:	mov	r6, r7
   33554:	str	r0, [r7]
   33558:	cmp	r4, #0
   3355c:	bne	33570 <__assert_fail@plt+0x20af4>
   33560:	b	33584 <__assert_fail@plt+0x20b08>
   33564:	ldr	r0, [r6, #8]!
   33568:	cmp	r4, #0
   3356c:	beq	33584 <__assert_fail@plt+0x20b08>
   33570:	str	r4, [r0], #4
   33574:	ldr	r4, [r4, #8]
   33578:	cmp	r4, #0
   3357c:	bne	33570 <__assert_fail@plt+0x20af4>
   33580:	ldr	r0, [r6]
   33584:	mov	r1, r5
   33588:	mov	r2, #4
   3358c:	mov	r3, r9
   33590:	bl	12998 <qsort@plt>
   33594:	ldr	r7, [r6]
   33598:	subs	r0, r5, #1
   3359c:	ldr	r4, [r7]
   335a0:	mov	r1, r4
   335a4:	beq	335e0 <__assert_fail@plt+0x20b64>
   335a8:	mov	r1, r7
   335ac:	cmp	r5, #2
   335b0:	ldr	r2, [r1, #4]!
   335b4:	str	r2, [r4, #8]
   335b8:	beq	335dc <__assert_fail@plt+0x20b60>
   335bc:	rsb	r3, r5, #2
   335c0:	mov	r2, r1
   335c4:	ldr	r6, [r2, #4]!
   335c8:	ldr	r1, [r1]
   335cc:	adds	r3, r3, #1
   335d0:	str	r6, [r1, #8]
   335d4:	mov	r1, r2
   335d8:	bne	335c4 <__assert_fail@plt+0x20b48>
   335dc:	ldr	r1, [r7, r0, lsl #2]
   335e0:	mov	r0, #0
   335e4:	str	r0, [r1, #8]
   335e8:	mov	r0, r4
   335ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   335f0:	ldr	r0, [r6, #8]
   335f4:	bl	32c40 <__assert_fail@plt+0x201c4>
   335f8:	mov	r0, #0
   335fc:	str	r0, [r6, #40]	; 0x28
   33600:	str	r0, [r6, #8]
   33604:	mov	r0, r4
   33608:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3360c:	push	{r4, r5, r6, r7, fp, lr}
   33610:	add	fp, sp, #16
   33614:	mov	r4, r0
   33618:	ldr	r0, [r0]
   3361c:	cmp	r0, #0
   33620:	beq	33660 <__assert_fail@plt+0x20be4>
   33624:	ldr	r1, [r0, #48]	; 0x30
   33628:	cmp	r1, #0
   3362c:	blt	33654 <__assert_fail@plt+0x20bd8>
   33630:	ldr	r5, [r0, #8]
   33634:	cmp	r5, #0
   33638:	ldreq	r5, [r0, #4]
   3363c:	bl	32c40 <__assert_fail@plt+0x201c4>
   33640:	ldr	r0, [r5, #48]	; 0x30
   33644:	cmn	r0, #1
   33648:	mov	r0, r5
   3364c:	bgt	33630 <__assert_fail@plt+0x20bb4>
   33650:	b	33658 <__assert_fail@plt+0x20bdc>
   33654:	mov	r5, r0
   33658:	mov	r0, r5
   3365c:	bl	32c40 <__assert_fail@plt+0x201c4>
   33660:	ldr	r5, [r4, #4]
   33664:	cmp	r5, #0
   33668:	beq	33694 <__assert_fail@plt+0x20c18>
   3366c:	ldrd	r6, [r5, #8]
   33670:	cmp	r7, #0
   33674:	beq	33680 <__assert_fail@plt+0x20c04>
   33678:	mov	r0, r7
   3367c:	bl	12a4c <closedir@plt>
   33680:	mov	r0, r5
   33684:	bl	32c40 <__assert_fail@plt+0x201c4>
   33688:	cmp	r6, #0
   3368c:	mov	r5, r6
   33690:	bne	3366c <__assert_fail@plt+0x20bf0>
   33694:	ldr	r0, [r4, #8]
   33698:	bl	32c40 <__assert_fail@plt+0x201c4>
   3369c:	ldr	r0, [r4, #24]
   336a0:	bl	32c40 <__assert_fail@plt+0x201c4>
   336a4:	ldr	r0, [r4, #48]	; 0x30
   336a8:	tst	r0, #512	; 0x200
   336ac:	bne	336e8 <__assert_fail@plt+0x20c6c>
   336b0:	mov	r6, #0
   336b4:	tst	r0, #4
   336b8:	bne	3370c <__assert_fail@plt+0x20c90>
   336bc:	ldr	r0, [r4, #28]
   336c0:	bl	12980 <fchdir@plt>
   336c4:	cmp	r0, #0
   336c8:	beq	3379c <__assert_fail@plt+0x20d20>
   336cc:	bl	127d0 <__errno_location@plt>
   336d0:	ldr	r6, [r0]
   336d4:	ldr	r0, [r4, #28]
   336d8:	bl	12a34 <close@plt>
   336dc:	cmp	r6, #0
   336e0:	beq	336fc <__assert_fail@plt+0x20c80>
   336e4:	b	3370c <__assert_fail@plt+0x20c90>
   336e8:	ldr	r0, [r4, #32]
   336ec:	mov	r6, #0
   336f0:	cmp	r0, #0
   336f4:	blt	3370c <__assert_fail@plt+0x20c90>
   336f8:	bl	12a34 <close@plt>
   336fc:	cmp	r0, #0
   33700:	beq	3370c <__assert_fail@plt+0x20c90>
   33704:	bl	127d0 <__errno_location@plt>
   33708:	ldr	r6, [r0]
   3370c:	add	r5, r4, #60	; 0x3c
   33710:	b	33718 <__assert_fail@plt+0x20c9c>
   33714:	bl	12a34 <close@plt>
   33718:	mov	r0, r5
   3371c:	bl	4b9a4 <__assert_fail@plt+0x38f28>
   33720:	cmp	r0, #0
   33724:	bne	3373c <__assert_fail@plt+0x20cc0>
   33728:	mov	r0, r5
   3372c:	bl	4b9f8 <__assert_fail@plt+0x38f7c>
   33730:	cmp	r0, #0
   33734:	bge	33714 <__assert_fail@plt+0x20c98>
   33738:	b	33718 <__assert_fail@plt+0x20c9c>
   3373c:	ldr	r0, [r4, #52]	; 0x34
   33740:	cmp	r0, #0
   33744:	beq	3374c <__assert_fail@plt+0x20cd0>
   33748:	bl	242ac <__assert_fail@plt+0x11830>
   3374c:	ldrh	r0, [r4, #48]	; 0x30
   33750:	movw	r1, #258	; 0x102
   33754:	tst	r0, r1
   33758:	beq	33770 <__assert_fail@plt+0x20cf4>
   3375c:	ldr	r0, [r4, #56]	; 0x38
   33760:	cmp	r0, #0
   33764:	beq	33778 <__assert_fail@plt+0x20cfc>
   33768:	bl	242ac <__assert_fail@plt+0x11830>
   3376c:	b	33778 <__assert_fail@plt+0x20cfc>
   33770:	ldr	r0, [r4, #56]	; 0x38
   33774:	bl	32c40 <__assert_fail@plt+0x201c4>
   33778:	mov	r0, r4
   3377c:	bl	32c40 <__assert_fail@plt+0x201c4>
   33780:	cmp	r6, #0
   33784:	moveq	r0, #0
   33788:	popeq	{r4, r5, r6, r7, fp, pc}
   3378c:	bl	127d0 <__errno_location@plt>
   33790:	str	r6, [r0]
   33794:	mvn	r0, #0
   33798:	pop	{r4, r5, r6, r7, fp, pc}
   3379c:	mov	r6, #0
   337a0:	ldr	r0, [r4, #28]
   337a4:	bl	12a34 <close@plt>
   337a8:	cmp	r6, #0
   337ac:	beq	336fc <__assert_fail@plt+0x20c80>
   337b0:	b	3370c <__assert_fail@plt+0x20c90>
   337b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   337b8:	add	fp, sp, #28
   337bc:	sub	sp, sp, #4
   337c0:	ldr	r6, [r0]
   337c4:	mov	sl, #0
   337c8:	cmp	r6, #0
   337cc:	beq	34054 <__assert_fail@plt+0x215d8>
   337d0:	mov	r4, r0
   337d4:	ldr	r0, [r0, #48]	; 0x30
   337d8:	tst	r0, #8192	; 0x2000
   337dc:	bne	34054 <__assert_fail@plt+0x215d8>
   337e0:	ldrh	r1, [r6, #60]	; 0x3c
   337e4:	mov	r2, #3
   337e8:	strh	r2, [r6, #60]	; 0x3c
   337ec:	cmp	r1, #1
   337f0:	beq	33870 <__assert_fail@plt+0x20df4>
   337f4:	mov	r5, r6
   337f8:	cmp	r1, #2
   337fc:	bne	33894 <__assert_fail@plt+0x20e18>
   33800:	ldrh	r2, [r5, #56]!	; 0x38
   33804:	movw	r3, #65534	; 0xfffe
   33808:	and	r3, r2, r3
   3380c:	cmp	r3, #12
   33810:	bne	33898 <__assert_fail@plt+0x20e1c>
   33814:	mov	r0, r4
   33818:	mov	r1, r6
   3381c:	mov	r2, #1
   33820:	bl	33370 <__assert_fail@plt+0x208f4>
   33824:	strh	r0, [r6, #56]	; 0x38
   33828:	cmp	r0, #1
   3382c:	ldreq	r0, [r4, #48]	; 0x30
   33830:	tsteq	r0, #4
   33834:	bne	33b4c <__assert_fail@plt+0x210d0>
   33838:	mov	r1, #32768	; 0x8000
   3383c:	tst	r0, #512	; 0x200
   33840:	and	r1, r1, r0, lsl #11
   33844:	orr	r1, r1, #18688	; 0x4900
   33848:	orr	r2, r1, #524288	; 0x80000
   3384c:	bne	33d60 <__assert_fail@plt+0x212e4>
   33850:	movw	r0, #54804	; 0xd614
   33854:	mov	r1, r2
   33858:	movt	r0, #4
   3385c:	bl	2389c <__assert_fail@plt+0x10e20>
   33860:	cmn	r0, #1
   33864:	str	r0, [r6, #36]	; 0x24
   33868:	bgt	33d7c <__assert_fail@plt+0x21300>
   3386c:	b	33dc0 <__assert_fail@plt+0x21344>
   33870:	mov	r0, r4
   33874:	mov	r1, r6
   33878:	mov	r2, #0
   3387c:	bl	33370 <__assert_fail@plt+0x208f4>
   33880:	strh	r0, [r6, #56]	; 0x38
   33884:	mov	sl, r6
   33888:	mov	r0, sl
   3388c:	sub	sp, fp, #28
   33890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33894:	ldrh	r2, [r5, #56]!	; 0x38
   33898:	cmp	r2, #1
   3389c:	bne	3391c <__assert_fail@plt+0x20ea0>
   338a0:	cmp	r1, #4
   338a4:	bne	3398c <__assert_fail@plt+0x20f10>
   338a8:	ldrb	r0, [r6, #58]	; 0x3a
   338ac:	tst	r0, #2
   338b0:	beq	338bc <__assert_fail@plt+0x20e40>
   338b4:	ldr	r0, [r6, #36]	; 0x24
   338b8:	bl	12a34 <close@plt>
   338bc:	ldr	r5, [r4, #4]
   338c0:	cmp	r5, #0
   338c4:	beq	338f8 <__assert_fail@plt+0x20e7c>
   338c8:	ldrd	r8, [r5, #8]
   338cc:	cmp	r9, #0
   338d0:	beq	338dc <__assert_fail@plt+0x20e60>
   338d4:	mov	r0, r9
   338d8:	bl	12a4c <closedir@plt>
   338dc:	mov	r0, r5
   338e0:	bl	32c40 <__assert_fail@plt+0x201c4>
   338e4:	cmp	r8, #0
   338e8:	mov	r5, r8
   338ec:	bne	338c8 <__assert_fail@plt+0x20e4c>
   338f0:	mov	r0, #0
   338f4:	str	r0, [r4, #4]
   338f8:	mov	r0, #6
   338fc:	strh	r0, [r6, #56]	; 0x38
   33900:	mov	r0, r4
   33904:	mov	r1, r6
   33908:	bl	34064 <__assert_fail@plt+0x215e8>
   3390c:	mov	sl, r6
   33910:	mov	r0, sl
   33914:	sub	sp, fp, #28
   33918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3391c:	mov	r7, r6
   33920:	ldr	r6, [r7, #8]
   33924:	cmp	r6, #0
   33928:	beq	33a1c <__assert_fail@plt+0x20fa0>
   3392c:	mov	r0, r7
   33930:	str	r6, [r4]
   33934:	bl	32c40 <__assert_fail@plt+0x201c4>
   33938:	ldr	r0, [r6, #48]	; 0x30
   3393c:	cmp	r0, #0
   33940:	beq	33a64 <__assert_fail@plt+0x20fe8>
   33944:	ldrh	r0, [r6, #60]	; 0x3c
   33948:	mov	r7, r6
   3394c:	cmp	r0, #4
   33950:	beq	33920 <__assert_fail@plt+0x20ea4>
   33954:	cmp	r0, #2
   33958:	bne	33b10 <__assert_fail@plt+0x21094>
   3395c:	mov	r0, r4
   33960:	mov	r1, r6
   33964:	mov	r2, #1
   33968:	bl	33370 <__assert_fail@plt+0x208f4>
   3396c:	strh	r0, [r6, #56]	; 0x38
   33970:	cmp	r0, #1
   33974:	ldreq	r0, [r4, #48]	; 0x30
   33978:	tsteq	r0, #4
   3397c:	beq	33f60 <__assert_fail@plt+0x214e4>
   33980:	mov	r0, #3
   33984:	strh	r0, [r6, #60]	; 0x3c
   33988:	b	33b10 <__assert_fail@plt+0x21094>
   3398c:	tst	r0, #64	; 0x40
   33990:	beq	339ac <__assert_fail@plt+0x20f30>
   33994:	ldrd	r2, [r4, #16]
   33998:	ldrd	r8, [r6, #64]	; 0x40
   3399c:	eor	r1, r9, r3
   339a0:	eor	r2, r8, r2
   339a4:	orrs	r1, r2, r1
   339a8:	bne	338a8 <__assert_fail@plt+0x20e2c>
   339ac:	ldr	r7, [r4, #4]
   339b0:	cmp	r7, #0
   339b4:	beq	33aec <__assert_fail@plt+0x21070>
   339b8:	tst	r0, #4096	; 0x1000
   339bc:	bne	33ab4 <__assert_fail@plt+0x21038>
   339c0:	ldr	r3, [r6, #24]
   339c4:	mov	r0, r4
   339c8:	mov	r1, r6
   339cc:	mvn	r2, #0
   339d0:	bl	34134 <__assert_fail@plt+0x216b8>
   339d4:	cmp	r0, #0
   339d8:	beq	33b04 <__assert_fail@plt+0x21088>
   339dc:	bl	127d0 <__errno_location@plt>
   339e0:	ldr	r0, [r0]
   339e4:	str	r0, [r6, #32]
   339e8:	ldrh	r0, [r6, #58]	; 0x3a
   339ec:	orr	r0, r0, #1
   339f0:	strh	r0, [r6, #58]	; 0x3a
   339f4:	ldr	r0, [r4, #4]
   339f8:	cmp	r0, #0
   339fc:	beq	33b04 <__assert_fail@plt+0x21088>
   33a00:	ldmib	r0, {r1, r2}
   33a04:	ldr	r1, [r1, #24]
   33a08:	cmp	r2, #0
   33a0c:	str	r1, [r0, #24]
   33a10:	mov	r0, r2
   33a14:	bne	33a00 <__assert_fail@plt+0x20f84>
   33a18:	b	33b04 <__assert_fail@plt+0x21088>
   33a1c:	ldr	r0, [r7, #4]
   33a20:	ldr	r1, [r0, #12]
   33a24:	cmp	r1, #0
   33a28:	beq	33a8c <__assert_fail@plt+0x21010>
   33a2c:	str	r0, [r4]
   33a30:	mov	r2, #0
   33a34:	ldr	r1, [r4, #24]
   33a38:	ldr	r0, [r0, #40]	; 0x28
   33a3c:	strb	r2, [r1, r0]
   33a40:	mov	r0, r4
   33a44:	mov	r1, #3
   33a48:	bl	343dc <__assert_fail@plt+0x21960>
   33a4c:	cmp	r0, #0
   33a50:	beq	33cd4 <__assert_fail@plt+0x21258>
   33a54:	mov	r6, r0
   33a58:	mov	r0, r7
   33a5c:	bl	32c40 <__assert_fail@plt+0x201c4>
   33a60:	b	33b10 <__assert_fail@plt+0x21094>
   33a64:	mov	r0, r4
   33a68:	bl	34fb8 <__assert_fail@plt+0x2253c>
   33a6c:	ldr	r1, [r4, #48]	; 0x30
   33a70:	cmp	r0, #0
   33a74:	beq	33a94 <__assert_fail@plt+0x21018>
   33a78:	orr	r0, r1, #8192	; 0x2000
   33a7c:	str	r0, [r4, #48]	; 0x30
   33a80:	mov	r0, sl
   33a84:	sub	sp, fp, #28
   33a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33a8c:	mov	sl, r0
   33a90:	b	33ce8 <__assert_fail@plt+0x2126c>
   33a94:	movw	r0, #258	; 0x102
   33a98:	tst	r1, r0
   33a9c:	beq	33de8 <__assert_fail@plt+0x2136c>
   33aa0:	ldr	r0, [r4, #56]	; 0x38
   33aa4:	cmp	r0, #0
   33aa8:	beq	33df0 <__assert_fail@plt+0x21374>
   33aac:	bl	242ac <__assert_fail@plt+0x11830>
   33ab0:	b	33df0 <__assert_fail@plt+0x21374>
   33ab4:	bic	r0, r0, #4096	; 0x1000
   33ab8:	str	r0, [r4, #48]	; 0x30
   33abc:	ldrd	r8, [r7, #8]
   33ac0:	cmp	r9, #0
   33ac4:	beq	33ad0 <__assert_fail@plt+0x21054>
   33ac8:	mov	r0, r9
   33acc:	bl	12a4c <closedir@plt>
   33ad0:	mov	r0, r7
   33ad4:	bl	32c40 <__assert_fail@plt+0x201c4>
   33ad8:	cmp	r8, #0
   33adc:	mov	r7, r8
   33ae0:	bne	33abc <__assert_fail@plt+0x21040>
   33ae4:	mov	r0, #0
   33ae8:	str	r0, [r4, #4]
   33aec:	mov	r0, r4
   33af0:	mov	r1, #3
   33af4:	bl	343dc <__assert_fail@plt+0x21960>
   33af8:	cmp	r0, #0
   33afc:	str	r0, [r4, #4]
   33b00:	beq	33c9c <__assert_fail@plt+0x21220>
   33b04:	ldr	r6, [r4, #4]
   33b08:	mov	r0, #0
   33b0c:	str	r0, [r4, #4]
   33b10:	ldr	r0, [r6, #4]
   33b14:	ldr	r1, [r0, #28]
   33b18:	ldr	r0, [r0, #40]	; 0x28
   33b1c:	sub	r2, r0, #1
   33b20:	ldrb	r1, [r1, r2]
   33b24:	cmp	r1, #47	; 0x2f
   33b28:	ldr	r1, [r4, #24]
   33b2c:	moveq	r0, r2
   33b30:	mov	r2, #47	; 0x2f
   33b34:	strb	r2, [r1, r0]!
   33b38:	ldr	r2, [r6, #52]	; 0x34
   33b3c:	add	r0, r1, #1
   33b40:	add	r1, r6, #168	; 0xa8
   33b44:	add	r2, r2, #1
   33b48:	bl	1244c <memmove@plt>
   33b4c:	str	r6, [r4]
   33b50:	ldrh	r0, [r6, #56]	; 0x38
   33b54:	cmp	r0, #11
   33b58:	bne	33b8c <__assert_fail@plt+0x21110>
   33b5c:	ldrd	r0, [r6, #112]	; 0x70
   33b60:	eor	r2, r0, #1
   33b64:	orrs	r2, r2, r1
   33b68:	beq	33c34 <__assert_fail@plt+0x211b8>
   33b6c:	eor	r0, r0, #2
   33b70:	orrs	r0, r0, r1
   33b74:	bne	34060 <__assert_fail@plt+0x215e4>
   33b78:	mov	r0, r4
   33b7c:	mov	r1, r6
   33b80:	mov	r2, #0
   33b84:	bl	33370 <__assert_fail@plt+0x208f4>
   33b88:	strh	r0, [r6, #56]	; 0x38
   33b8c:	cmp	r0, #1
   33b90:	bne	33c24 <__assert_fail@plt+0x211a8>
   33b94:	ldr	r0, [r6, #48]	; 0x30
   33b98:	cmp	r0, #0
   33b9c:	ldrdeq	r0, [r6, #64]	; 0x40
   33ba0:	strdeq	r0, [r4, #16]
   33ba4:	movw	r1, #258	; 0x102
   33ba8:	ldrh	r0, [r4, #48]	; 0x30
   33bac:	tst	r0, r1
   33bb0:	beq	33c44 <__assert_fail@plt+0x211c8>
   33bb4:	mov	r0, #24
   33bb8:	bl	35608 <__assert_fail@plt+0x22b8c>
   33bbc:	cmp	r0, #0
   33bc0:	beq	33c74 <__assert_fail@plt+0x211f8>
   33bc4:	mov	r7, r0
   33bc8:	ldrd	r0, [r6, #64]	; 0x40
   33bcc:	add	r2, r7, #8
   33bd0:	stm	r7, {r0, r1}
   33bd4:	ldrd	r0, [r6, #160]	; 0xa0
   33bd8:	stm	r2, {r0, r1, r6}
   33bdc:	mov	r1, r7
   33be0:	ldr	r0, [r4, #56]	; 0x38
   33be4:	bl	24bc8 <__assert_fail@plt+0x1214c>
   33be8:	cmp	r0, r7
   33bec:	beq	33cc4 <__assert_fail@plt+0x21248>
   33bf0:	mov	r4, r0
   33bf4:	mov	r0, r7
   33bf8:	bl	32c40 <__assert_fail@plt+0x201c4>
   33bfc:	cmp	r4, #0
   33c00:	beq	33c74 <__assert_fail@plt+0x211f8>
   33c04:	ldr	r0, [r4, #16]
   33c08:	mov	r1, #2
   33c0c:	mov	sl, r6
   33c10:	strh	r1, [r6, #56]	; 0x38
   33c14:	str	r0, [r6]
   33c18:	mov	r0, sl
   33c1c:	sub	sp, fp, #28
   33c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c24:	mov	sl, r6
   33c28:	mov	r0, sl
   33c2c:	sub	sp, fp, #28
   33c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c34:	mov	sl, r6
   33c38:	mov	r0, sl
   33c3c:	sub	sp, fp, #28
   33c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c44:	ldr	r0, [r4, #56]	; 0x38
   33c48:	add	r1, r6, #64	; 0x40
   33c4c:	bl	4b760 <__assert_fail@plt+0x38ce4>
   33c50:	cmp	r0, #0
   33c54:	beq	33c8c <__assert_fail@plt+0x21210>
   33c58:	mov	r0, #2
   33c5c:	mov	sl, r6
   33c60:	strh	r0, [r6, #56]	; 0x38
   33c64:	str	r6, [r6]
   33c68:	mov	r0, sl
   33c6c:	sub	sp, fp, #28
   33c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c74:	bl	127d0 <__errno_location@plt>
   33c78:	mov	r1, #12
   33c7c:	str	r1, [r0]
   33c80:	mov	r0, sl
   33c84:	sub	sp, fp, #28
   33c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c8c:	mov	sl, r6
   33c90:	mov	r0, sl
   33c94:	sub	sp, fp, #28
   33c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c9c:	ldrb	r0, [r4, #49]	; 0x31
   33ca0:	tst	r0, #32
   33ca4:	bne	34054 <__assert_fail@plt+0x215d8>
   33ca8:	ldr	r0, [r6, #32]
   33cac:	cmp	r0, #0
   33cb0:	ldrhne	r0, [r5]
   33cb4:	cmpne	r0, #4
   33cb8:	movne	r0, #7
   33cbc:	strhne	r0, [r5]
   33cc0:	b	33900 <__assert_fail@plt+0x20e84>
   33cc4:	mov	sl, r6
   33cc8:	mov	r0, sl
   33ccc:	sub	sp, fp, #28
   33cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33cd4:	ldrb	r0, [r4, #49]	; 0x31
   33cd8:	mov	sl, #0
   33cdc:	tst	r0, #32
   33ce0:	bne	34054 <__assert_fail@plt+0x215d8>
   33ce4:	ldr	sl, [r7, #4]
   33ce8:	mov	r0, r7
   33cec:	str	sl, [r4]
   33cf0:	bl	32c40 <__assert_fail@plt+0x201c4>
   33cf4:	ldr	r0, [sl, #48]	; 0x30
   33cf8:	cmn	r0, #1
   33cfc:	beq	33d9c <__assert_fail@plt+0x21320>
   33d00:	ldrh	r0, [sl, #56]	; 0x38
   33d04:	cmp	r0, #11
   33d08:	beq	34060 <__assert_fail@plt+0x215e4>
   33d0c:	ldr	r0, [sl, #40]	; 0x28
   33d10:	ldr	r1, [r4, #24]
   33d14:	mov	r2, #0
   33d18:	strb	r2, [r1, r0]
   33d1c:	ldr	r0, [sl, #48]	; 0x30
   33d20:	cmp	r0, #0
   33d24:	beq	33ee0 <__assert_fail@plt+0x21464>
   33d28:	ldrh	r0, [sl, #58]	; 0x3a
   33d2c:	tst	r0, #2
   33d30:	bne	33f18 <__assert_fail@plt+0x2149c>
   33d34:	tst	r0, #1
   33d38:	bne	34018 <__assert_fail@plt+0x2159c>
   33d3c:	ldr	r1, [sl, #4]
   33d40:	movw	r3, #8993	; 0x2321
   33d44:	mov	r0, r4
   33d48:	mvn	r2, #0
   33d4c:	movt	r3, #5
   33d50:	bl	34134 <__assert_fail@plt+0x216b8>
   33d54:	cmp	r0, #0
   33d58:	bne	33ef0 <__assert_fail@plt+0x21474>
   33d5c:	b	34018 <__assert_fail@plt+0x2159c>
   33d60:	ldr	r0, [r4, #32]
   33d64:	movw	r1, #54804	; 0xd614
   33d68:	movt	r1, #4
   33d6c:	bl	27820 <__assert_fail@plt+0x14da4>
   33d70:	cmn	r0, #1
   33d74:	str	r0, [r6, #36]	; 0x24
   33d78:	ble	33dc0 <__assert_fail@plt+0x21344>
   33d7c:	ldrh	r0, [r6, #58]	; 0x3a
   33d80:	orr	r0, r0, #2
   33d84:	strh	r0, [r6, #58]	; 0x3a
   33d88:	str	r6, [r4]
   33d8c:	ldrh	r0, [r6, #56]	; 0x38
   33d90:	cmp	r0, #11
   33d94:	beq	33b5c <__assert_fail@plt+0x210e0>
   33d98:	b	33b8c <__assert_fail@plt+0x21110>
   33d9c:	mov	r0, sl
   33da0:	bl	32c40 <__assert_fail@plt+0x201c4>
   33da4:	bl	127d0 <__errno_location@plt>
   33da8:	mov	sl, #0
   33dac:	str	sl, [r0]
   33db0:	str	sl, [r4]
   33db4:	mov	r0, sl
   33db8:	sub	sp, fp, #28
   33dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33dc0:	bl	127d0 <__errno_location@plt>
   33dc4:	ldr	r0, [r0]
   33dc8:	mov	r1, #7
   33dcc:	strh	r1, [r6, #56]	; 0x38
   33dd0:	str	r0, [r6, #32]
   33dd4:	str	r6, [r4]
   33dd8:	ldrh	r0, [r6, #56]	; 0x38
   33ddc:	cmp	r0, #11
   33de0:	beq	33b5c <__assert_fail@plt+0x210e0>
   33de4:	b	33b8c <__assert_fail@plt+0x21110>
   33de8:	ldr	r0, [r4, #56]	; 0x38
   33dec:	bl	32c40 <__assert_fail@plt+0x201c4>
   33df0:	ldr	r1, [r6, #52]	; 0x34
   33df4:	add	r7, r6, #168	; 0xa8
   33df8:	str	r1, [r6, #40]	; 0x28
   33dfc:	add	r2, r1, #1
   33e00:	mov	r1, r7
   33e04:	ldr	r0, [r4, #24]
   33e08:	bl	1244c <memmove@plt>
   33e0c:	mov	r0, r7
   33e10:	mov	r1, #47	; 0x2f
   33e14:	bl	128f0 <strrchr@plt>
   33e18:	cmp	r0, #0
   33e1c:	beq	33e58 <__assert_fail@plt+0x213dc>
   33e20:	cmp	r0, r7
   33e24:	bne	33e34 <__assert_fail@plt+0x213b8>
   33e28:	ldrb	r1, [r6, #169]	; 0xa9
   33e2c:	cmp	r1, #0
   33e30:	beq	33e58 <__assert_fail@plt+0x213dc>
   33e34:	add	r8, r0, #1
   33e38:	mov	r0, r8
   33e3c:	bl	12788 <strlen@plt>
   33e40:	mov	r9, r0
   33e44:	add	r2, r0, #1
   33e48:	mov	r0, r7
   33e4c:	mov	r1, r8
   33e50:	bl	1244c <memmove@plt>
   33e54:	str	r9, [r6, #52]	; 0x34
   33e58:	ldr	r0, [r4, #24]
   33e5c:	movw	r1, #258	; 0x102
   33e60:	str	r0, [r6, #24]
   33e64:	str	r0, [r6, #28]
   33e68:	ldrh	r0, [r4, #48]	; 0x30
   33e6c:	tst	r0, r1
   33e70:	beq	33eb4 <__assert_fail@plt+0x21438>
   33e74:	movw	r0, #11328	; 0x2c40
   33e78:	movw	r2, #21136	; 0x5290
   33e7c:	movw	r3, #21168	; 0x52b0
   33e80:	mov	r1, #0
   33e84:	movt	r0, #3
   33e88:	movt	r2, #3
   33e8c:	movt	r3, #3
   33e90:	str	r0, [sp]
   33e94:	mov	r0, #31
   33e98:	bl	23f90 <__assert_fail@plt+0x11514>
   33e9c:	str	r0, [r4, #56]	; 0x38
   33ea0:	str	r6, [r4]
   33ea4:	ldrh	r0, [r6, #56]	; 0x38
   33ea8:	cmp	r0, #11
   33eac:	beq	33b5c <__assert_fail@plt+0x210e0>
   33eb0:	b	33b8c <__assert_fail@plt+0x21110>
   33eb4:	mov	r0, #32
   33eb8:	bl	35608 <__assert_fail@plt+0x22b8c>
   33ebc:	cmp	r0, #0
   33ec0:	str	r0, [r4, #56]	; 0x38
   33ec4:	beq	33b4c <__assert_fail@plt+0x210d0>
   33ec8:	bl	4b744 <__assert_fail@plt+0x38cc8>
   33ecc:	str	r6, [r4]
   33ed0:	ldrh	r0, [r6, #56]	; 0x38
   33ed4:	cmp	r0, #11
   33ed8:	beq	33b5c <__assert_fail@plt+0x210e0>
   33edc:	b	33b8c <__assert_fail@plt+0x21110>
   33ee0:	mov	r0, r4
   33ee4:	bl	34fb8 <__assert_fail@plt+0x2253c>
   33ee8:	cmp	r0, #0
   33eec:	beq	34018 <__assert_fail@plt+0x2159c>
   33ef0:	bl	127d0 <__errno_location@plt>
   33ef4:	ldr	r0, [r0]
   33ef8:	str	r0, [sl, #32]
   33efc:	ldr	r0, [r4, #48]	; 0x30
   33f00:	orr	r0, r0, #8192	; 0x2000
   33f04:	str	r0, [r4, #48]	; 0x30
   33f08:	ldrh	r0, [sl, #56]	; 0x38
   33f0c:	cmp	r0, #2
   33f10:	bne	34024 <__assert_fail@plt+0x215a8>
   33f14:	b	34048 <__assert_fail@plt+0x215cc>
   33f18:	ldr	r0, [r4, #48]	; 0x30
   33f1c:	tst	r0, #4
   33f20:	bne	33f98 <__assert_fail@plt+0x2151c>
   33f24:	mov	r5, sl
   33f28:	tst	r0, #512	; 0x200
   33f2c:	ldr	r6, [r5, #36]!	; 0x24
   33f30:	bne	33fe4 <__assert_fail@plt+0x21568>
   33f34:	mov	r0, r6
   33f38:	bl	12980 <fchdir@plt>
   33f3c:	cmp	r0, #0
   33f40:	beq	34010 <__assert_fail@plt+0x21594>
   33f44:	bl	127d0 <__errno_location@plt>
   33f48:	ldr	r0, [r0]
   33f4c:	str	r0, [sl, #32]
   33f50:	ldr	r0, [r4, #48]	; 0x30
   33f54:	orr	r0, r0, #8192	; 0x2000
   33f58:	str	r0, [r4, #48]	; 0x30
   33f5c:	b	34010 <__assert_fail@plt+0x21594>
   33f60:	mov	r1, #32768	; 0x8000
   33f64:	tst	r0, #512	; 0x200
   33f68:	and	r1, r1, r0, lsl #11
   33f6c:	orr	r1, r1, #18688	; 0x4900
   33f70:	orr	r2, r1, #524288	; 0x80000
   33f74:	bne	33fa0 <__assert_fail@plt+0x21524>
   33f78:	movw	r0, #54804	; 0xd614
   33f7c:	mov	r1, r2
   33f80:	movt	r0, #4
   33f84:	bl	2389c <__assert_fail@plt+0x10e20>
   33f88:	cmn	r0, #1
   33f8c:	str	r0, [r6, #36]	; 0x24
   33f90:	bgt	33fbc <__assert_fail@plt+0x21540>
   33f94:	b	33fcc <__assert_fail@plt+0x21550>
   33f98:	add	r5, sl, #36	; 0x24
   33f9c:	b	34010 <__assert_fail@plt+0x21594>
   33fa0:	ldr	r0, [r4, #32]
   33fa4:	movw	r1, #54804	; 0xd614
   33fa8:	movt	r1, #4
   33fac:	bl	27820 <__assert_fail@plt+0x14da4>
   33fb0:	cmn	r0, #1
   33fb4:	str	r0, [r6, #36]	; 0x24
   33fb8:	ble	33fcc <__assert_fail@plt+0x21550>
   33fbc:	ldrh	r0, [r6, #58]	; 0x3a
   33fc0:	orr	r0, r0, #2
   33fc4:	strh	r0, [r6, #58]	; 0x3a
   33fc8:	b	33980 <__assert_fail@plt+0x20f04>
   33fcc:	bl	127d0 <__errno_location@plt>
   33fd0:	ldr	r0, [r0]
   33fd4:	mov	r1, #7
   33fd8:	strh	r1, [r6, #56]	; 0x38
   33fdc:	str	r0, [r6, #32]
   33fe0:	b	33980 <__assert_fail@plt+0x20f04>
   33fe4:	ldr	r1, [r4, #32]
   33fe8:	cmp	r1, r6
   33fec:	bne	33ff8 <__assert_fail@plt+0x2157c>
   33ff0:	cmn	r1, #100	; 0x64
   33ff4:	bne	34060 <__assert_fail@plt+0x215e4>
   33ff8:	add	r0, r4, #60	; 0x3c
   33ffc:	bl	4b9ac <__assert_fail@plt+0x38f30>
   34000:	cmp	r0, #0
   34004:	blt	3400c <__assert_fail@plt+0x21590>
   34008:	bl	12a34 <close@plt>
   3400c:	str	r6, [r4, #32]
   34010:	ldr	r0, [r5]
   34014:	bl	12a34 <close@plt>
   34018:	ldrh	r0, [sl, #56]	; 0x38
   3401c:	cmp	r0, #2
   34020:	beq	34048 <__assert_fail@plt+0x215cc>
   34024:	ldr	r0, [sl, #32]
   34028:	mov	r1, #7
   3402c:	cmp	r0, #0
   34030:	movweq	r1, #6
   34034:	strh	r1, [sl, #56]	; 0x38
   34038:	bne	34048 <__assert_fail@plt+0x215cc>
   3403c:	mov	r0, r4
   34040:	mov	r1, sl
   34044:	bl	34064 <__assert_fail@plt+0x215e8>
   34048:	ldrb	r0, [r4, #49]	; 0x31
   3404c:	tst	r0, #32
   34050:	movne	sl, #0
   34054:	mov	r0, sl
   34058:	sub	sp, fp, #28
   3405c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34060:	bl	12a28 <abort@plt>
   34064:	push	{r4, r5, r6, r7, fp, lr}
   34068:	add	fp, sp, #16
   3406c:	sub	sp, sp, #24
   34070:	ldrh	r2, [r0, #48]	; 0x30
   34074:	movw	r3, #258	; 0x102
   34078:	add	lr, r1, #64	; 0x40
   3407c:	tst	r2, r3
   34080:	beq	340b8 <__assert_fail@plt+0x2163c>
   34084:	ldrd	r2, [lr]
   34088:	stm	sp, {r2, r3}
   3408c:	ldrd	r2, [r1, #160]	; 0xa0
   34090:	mov	r1, sp
   34094:	str	r3, [sp, #12]
   34098:	str	r2, [sp, #8]
   3409c:	ldr	r0, [r0, #56]	; 0x38
   340a0:	bl	24c10 <__assert_fail@plt+0x12194>
   340a4:	cmp	r0, #0
   340a8:	beq	34130 <__assert_fail@plt+0x216b4>
   340ac:	bl	32c40 <__assert_fail@plt+0x201c4>
   340b0:	sub	sp, fp, #16
   340b4:	pop	{r4, r5, r6, r7, fp, pc}
   340b8:	ldr	r2, [r1, #4]
   340bc:	cmp	r2, #0
   340c0:	beq	34128 <__assert_fail@plt+0x216ac>
   340c4:	ldr	r3, [r2, #48]	; 0x30
   340c8:	cmp	r3, #0
   340cc:	blt	34128 <__assert_fail@plt+0x216ac>
   340d0:	ldr	ip, [r0, #56]	; 0x38
   340d4:	ldrd	r4, [ip, #16]
   340d8:	orrs	r3, r4, r5
   340dc:	beq	34130 <__assert_fail@plt+0x216b4>
   340e0:	ldrd	r4, [r1, #160]	; 0xa0
   340e4:	ldrd	r6, [ip]
   340e8:	eor	r1, r7, r5
   340ec:	eor	r3, r6, r4
   340f0:	orrs	r1, r3, r1
   340f4:	bne	34128 <__assert_fail@plt+0x216ac>
   340f8:	ldr	r1, [ip, #8]!
   340fc:	ldrd	r4, [lr]
   34100:	ldr	r3, [ip, #4]
   34104:	eor	r1, r1, r4
   34108:	eor	r3, r3, r5
   3410c:	orrs	r1, r1, r3
   34110:	bne	34128 <__assert_fail@plt+0x216ac>
   34114:	ldrd	r4, [r2, #64]	; 0x40
   34118:	strd	r4, [ip]
   3411c:	ldr	r0, [r0, #56]	; 0x38
   34120:	ldrd	r2, [r2, #160]	; 0xa0
   34124:	strd	r2, [r0]
   34128:	sub	sp, fp, #16
   3412c:	pop	{r4, r5, r6, r7, fp, pc}
   34130:	bl	12a28 <abort@plt>
   34134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34138:	add	fp, sp, #28
   3413c:	sub	sp, sp, #108	; 0x6c
   34140:	mov	r7, r3
   34144:	mov	r4, r2
   34148:	mov	r8, r1
   3414c:	mov	sl, r0
   34150:	cmp	r3, #0
   34154:	beq	341e0 <__assert_fail@plt+0x21764>
   34158:	movw	r1, #8993	; 0x2321
   3415c:	mov	r0, r7
   34160:	movt	r1, #5
   34164:	bl	123d4 <strcmp@plt>
   34168:	mov	r6, r0
   3416c:	cmp	r0, #0
   34170:	movwne	r6, #1
   34174:	ldr	r0, [sl, #48]	; 0x30
   34178:	tst	r0, #4
   3417c:	bne	341f0 <__assert_fail@plt+0x21774>
   34180:	cmn	r4, #1
   34184:	mov	r1, #0
   34188:	mov	r9, #0
   3418c:	movwgt	r1, #1
   34190:	orrs	r1, r1, r6
   34194:	bne	34218 <__assert_fail@plt+0x2179c>
   34198:	ands	r0, r0, #512	; 0x200
   3419c:	beq	34218 <__assert_fail@plt+0x2179c>
   341a0:	add	r4, sl, #60	; 0x3c
   341a4:	mov	r0, r4
   341a8:	bl	4b9a4 <__assert_fail@plt+0x38f28>
   341ac:	cmp	r0, #0
   341b0:	bne	34220 <__assert_fail@plt+0x217a4>
   341b4:	mov	r0, r4
   341b8:	bl	4b9f8 <__assert_fail@plt+0x38f7c>
   341bc:	cmn	r0, #1
   341c0:	ble	34220 <__assert_fail@plt+0x217a4>
   341c4:	mov	r4, r0
   341c8:	mov	r9, #0
   341cc:	mov	r7, #0
   341d0:	ldr	r5, [sl, #48]	; 0x30
   341d4:	tst	r5, #2
   341d8:	beq	34264 <__assert_fail@plt+0x217e8>
   341dc:	b	342ac <__assert_fail@plt+0x21830>
   341e0:	mov	r6, #1
   341e4:	ldr	r0, [sl, #48]	; 0x30
   341e8:	tst	r0, #4
   341ec:	beq	34180 <__assert_fail@plt+0x21704>
   341f0:	mov	r5, #0
   341f4:	cmp	r4, #0
   341f8:	blt	342a0 <__assert_fail@plt+0x21824>
   341fc:	ands	r0, r0, #512	; 0x200
   34200:	beq	342a0 <__assert_fail@plt+0x21824>
   34204:	mov	r0, r4
   34208:	bl	12a34 <close@plt>
   3420c:	mov	r0, r5
   34210:	sub	sp, fp, #28
   34214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34218:	cmn	r4, #1
   3421c:	bgt	34258 <__assert_fail@plt+0x217dc>
   34220:	ldr	r0, [sl, #48]	; 0x30
   34224:	mov	r1, #32768	; 0x8000
   34228:	and	r1, r1, r0, lsl #11
   3422c:	tst	r0, #512	; 0x200
   34230:	orr	r1, r1, #18688	; 0x4900
   34234:	orr	r2, r1, #524288	; 0x80000
   34238:	bne	342d4 <__assert_fail@plt+0x21858>
   3423c:	mov	r0, r7
   34240:	mov	r1, r2
   34244:	bl	2389c <__assert_fail@plt+0x10e20>
   34248:	mov	r4, r0
   3424c:	mov	r9, #1
   34250:	cmp	r0, #0
   34254:	blt	342f0 <__assert_fail@plt+0x21874>
   34258:	ldr	r5, [sl, #48]	; 0x30
   3425c:	tst	r5, #2
   34260:	bne	342ac <__assert_fail@plt+0x21830>
   34264:	cmp	r7, #0
   34268:	beq	34284 <__assert_fail@plt+0x21808>
   3426c:	movw	r1, #8993	; 0x2321
   34270:	mov	r0, r7
   34274:	movt	r1, #5
   34278:	bl	123d4 <strcmp@plt>
   3427c:	cmp	r0, #0
   34280:	beq	342ac <__assert_fail@plt+0x21830>
   34284:	tst	r5, #512	; 0x200
   34288:	bne	34340 <__assert_fail@plt+0x218c4>
   3428c:	mov	r0, r4
   34290:	bl	12980 <fchdir@plt>
   34294:	mov	r5, r0
   34298:	cmp	r9, #0
   3429c:	bne	34388 <__assert_fail@plt+0x2190c>
   342a0:	mov	r0, r5
   342a4:	sub	sp, fp, #28
   342a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   342ac:	mov	r2, sp
   342b0:	mov	r0, #3
   342b4:	mov	r1, r4
   342b8:	bl	125e4 <__fxstat64@plt>
   342bc:	cmp	r0, #0
   342c0:	beq	34300 <__assert_fail@plt+0x21884>
   342c4:	mvn	r5, #0
   342c8:	cmp	r9, #0
   342cc:	beq	342a0 <__assert_fail@plt+0x21824>
   342d0:	b	34388 <__assert_fail@plt+0x2190c>
   342d4:	ldr	r0, [sl, #32]
   342d8:	mov	r1, r7
   342dc:	bl	27820 <__assert_fail@plt+0x14da4>
   342e0:	mov	r4, r0
   342e4:	mov	r9, #1
   342e8:	cmp	r0, #0
   342ec:	bge	34258 <__assert_fail@plt+0x217dc>
   342f0:	mvn	r5, #0
   342f4:	mov	r0, r5
   342f8:	sub	sp, fp, #28
   342fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34300:	ldrd	r0, [r8, #64]	; 0x40
   34304:	ldm	sp, {r2, r3}
   34308:	eor	r1, r1, r3
   3430c:	eor	r0, r0, r2
   34310:	orrs	r0, r0, r1
   34314:	bne	34370 <__assert_fail@plt+0x218f4>
   34318:	ldrd	r0, [r8, #160]	; 0xa0
   3431c:	ldr	r2, [sp, #96]	; 0x60
   34320:	ldr	r3, [sp, #100]	; 0x64
   34324:	eor	r1, r1, r3
   34328:	eor	r0, r0, r2
   3432c:	orrs	r0, r0, r1
   34330:	bne	34370 <__assert_fail@plt+0x218f4>
   34334:	ldr	r5, [sl, #48]	; 0x30
   34338:	tst	r5, #512	; 0x200
   3433c:	beq	3428c <__assert_fail@plt+0x21810>
   34340:	ldr	r1, [sl, #32]
   34344:	cmp	r1, r4
   34348:	bne	34354 <__assert_fail@plt+0x218d8>
   3434c:	cmn	r1, #100	; 0x64
   34350:	bne	343d8 <__assert_fail@plt+0x2195c>
   34354:	cmp	r6, #0
   34358:	beq	343ac <__assert_fail@plt+0x21930>
   3435c:	add	r0, sl, #60	; 0x3c
   34360:	bl	4b9ac <__assert_fail@plt+0x38f30>
   34364:	cmp	r0, #0
   34368:	bge	343c0 <__assert_fail@plt+0x21944>
   3436c:	b	343c4 <__assert_fail@plt+0x21948>
   34370:	bl	127d0 <__errno_location@plt>
   34374:	mov	r1, #2
   34378:	str	r1, [r0]
   3437c:	mvn	r5, #0
   34380:	cmp	r9, #0
   34384:	beq	342a0 <__assert_fail@plt+0x21824>
   34388:	bl	127d0 <__errno_location@plt>
   3438c:	ldr	r7, [r0]
   34390:	mov	r6, r0
   34394:	mov	r0, r4
   34398:	bl	12a34 <close@plt>
   3439c:	str	r7, [r6]
   343a0:	mov	r0, r5
   343a4:	sub	sp, fp, #28
   343a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   343ac:	tst	r5, #4
   343b0:	bne	343c4 <__assert_fail@plt+0x21948>
   343b4:	cmp	r1, #0
   343b8:	blt	343c4 <__assert_fail@plt+0x21948>
   343bc:	mov	r0, r1
   343c0:	bl	12a34 <close@plt>
   343c4:	str	r4, [sl, #32]
   343c8:	mov	r5, #0
   343cc:	mov	r0, r5
   343d0:	sub	sp, fp, #28
   343d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   343d8:	bl	12a28 <abort@plt>
   343dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   343e0:	add	fp, sp, #28
   343e4:	sub	sp, sp, #76	; 0x4c
   343e8:	ldr	r8, [r0]
   343ec:	mov	r9, r1
   343f0:	mov	r5, r0
   343f4:	str	r0, [sp, #52]	; 0x34
   343f8:	ldr	r4, [r8, #12]
   343fc:	cmp	r4, #0
   34400:	beq	3444c <__assert_fail@plt+0x219d0>
   34404:	mov	r0, r4
   34408:	bl	12974 <dirfd@plt>
   3440c:	cmn	r0, #1
   34410:	str	r0, [fp, #-32]	; 0xffffffe0
   34414:	ble	34484 <__assert_fail@plt+0x21a08>
   34418:	mov	r1, r5
   3441c:	mvn	r2, #0
   34420:	str	r4, [sp, #12]
   34424:	str	r9, [sp, #4]
   34428:	mov	ip, #0
   3442c:	ldr	r0, [r1, #44]!	; 0x2c
   34430:	cmp	r0, #0
   34434:	str	r1, [fp, #-48]	; 0xffffffd0
   34438:	add	sl, r1, #4
   3443c:	movweq	r2, #34464	; 0x86a0
   34440:	movteq	r2, #1
   34444:	str	r2, [sp, #28]
   34448:	b	34714 <__assert_fail@plt+0x21c98>
   3444c:	mov	sl, r5
   34450:	mvn	r0, #99	; 0x63
   34454:	mov	r2, #0
   34458:	ldr	r3, [sl, #48]!	; 0x30
   3445c:	and	r1, r3, #516	; 0x204
   34460:	cmp	r1, #512	; 0x200
   34464:	ldr	r1, [r8, #24]
   34468:	ldreq	r0, [r5, #32]
   3446c:	tst	r3, #16
   34470:	beq	344ac <__assert_fail@plt+0x21a30>
   34474:	tst	r3, #1
   34478:	bne	344a0 <__assert_fail@plt+0x21a24>
   3447c:	mov	r2, #32768	; 0x8000
   34480:	b	344ac <__assert_fail@plt+0x21a30>
   34484:	ldr	r0, [r8, #12]
   34488:	bl	12a4c <closedir@plt>
   3448c:	mov	r6, #0
   34490:	str	r6, [r8, #12]
   34494:	cmp	r9, #3
   34498:	beq	344f8 <__assert_fail@plt+0x21a7c>
   3449c:	b	34dc8 <__assert_fail@plt+0x2234c>
   344a0:	ldr	r3, [r8, #48]	; 0x30
   344a4:	cmp	r3, #0
   344a8:	movne	r2, #32768	; 0x8000
   344ac:	sub	r3, fp, #32
   344b0:	bl	4bc84 <__assert_fail@plt+0x39208>
   344b4:	cmp	r0, #0
   344b8:	str	r0, [r8, #12]
   344bc:	beq	344ec <__assert_fail@plt+0x21a70>
   344c0:	ldrh	r0, [r8, #56]	; 0x38
   344c4:	cmp	r0, #11
   344c8:	bne	34518 <__assert_fail@plt+0x21a9c>
   344cc:	mov	r0, r5
   344d0:	mov	r1, r8
   344d4:	mov	r2, #0
   344d8:	bl	33370 <__assert_fail@plt+0x208f4>
   344dc:	mov	r7, r8
   344e0:	strh	r0, [r8, #56]	; 0x38
   344e4:	mov	r6, r5
   344e8:	b	345ec <__assert_fail@plt+0x21b70>
   344ec:	mov	r6, #0
   344f0:	cmp	r9, #3
   344f4:	bne	34dc8 <__assert_fail@plt+0x2234c>
   344f8:	mov	r0, #4
   344fc:	strh	r0, [r8, #56]	; 0x38
   34500:	bl	127d0 <__errno_location@plt>
   34504:	ldr	r0, [r0]
   34508:	str	r0, [r8, #32]
   3450c:	mov	r0, r6
   34510:	sub	sp, fp, #28
   34514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34518:	ldrb	r0, [sl, #1]
   3451c:	mov	r7, r8
   34520:	mov	r6, r5
   34524:	tst	r0, #1
   34528:	beq	345ec <__assert_fail@plt+0x21b70>
   3452c:	mov	r0, r6
   34530:	mov	r1, r7
   34534:	mov	r5, r7
   34538:	bl	34064 <__assert_fail@plt+0x215e8>
   3453c:	mov	r0, r6
   34540:	mov	r1, r7
   34544:	mov	r2, #0
   34548:	bl	33370 <__assert_fail@plt+0x208f4>
   3454c:	ldrh	r0, [r6, #48]	; 0x30
   34550:	movw	r1, #258	; 0x102
   34554:	tst	r0, r1
   34558:	beq	345cc <__assert_fail@plt+0x21b50>
   3455c:	mov	r0, #24
   34560:	bl	35608 <__assert_fail@plt+0x22b8c>
   34564:	cmp	r0, #0
   34568:	beq	34f84 <__assert_fail@plt+0x22508>
   3456c:	mov	r5, r0
   34570:	ldrd	r0, [r7, #64]	; 0x40
   34574:	add	r2, r5, #8
   34578:	stm	r5, {r0, r1}
   3457c:	ldrd	r0, [r7, #160]	; 0xa0
   34580:	stm	r2, {r0, r1, r7}
   34584:	mov	r1, r5
   34588:	ldr	r6, [sp, #52]	; 0x34
   3458c:	ldr	r0, [r6, #56]	; 0x38
   34590:	bl	24bc8 <__assert_fail@plt+0x1214c>
   34594:	cmp	r0, r5
   34598:	beq	345ec <__assert_fail@plt+0x21b70>
   3459c:	mov	r8, r0
   345a0:	mov	r0, r5
   345a4:	bl	32c40 <__assert_fail@plt+0x201c4>
   345a8:	cmp	r8, #0
   345ac:	beq	34f84 <__assert_fail@plt+0x22508>
   345b0:	ldr	r0, [r8, #16]
   345b4:	ldr	r6, [sp, #52]	; 0x34
   345b8:	mov	r1, #2
   345bc:	mov	r2, r7
   345c0:	strh	r1, [r7, #56]	; 0x38
   345c4:	str	r0, [r7]
   345c8:	b	345ec <__assert_fail@plt+0x21b70>
   345cc:	ldr	r0, [r6, #56]	; 0x38
   345d0:	add	r1, r5, #64	; 0x40
   345d4:	bl	4b760 <__assert_fail@plt+0x38ce4>
   345d8:	cmp	r0, #0
   345dc:	movne	r0, #2
   345e0:	movne	r1, r7
   345e4:	strhne	r0, [r7, #56]	; 0x38
   345e8:	strne	r7, [r7]
   345ec:	mov	r1, r6
   345f0:	mov	r5, r6
   345f4:	mov	r8, r7
   345f8:	str	r9, [sp, #4]
   345fc:	str	r4, [sp, #12]
   34600:	ldr	r0, [r1, #44]!	; 0x2c
   34604:	str	r1, [fp, #-48]	; 0xffffffd0
   34608:	mvn	r1, #0
   3460c:	cmp	r0, #0
   34610:	movweq	r1, #34464	; 0x86a0
   34614:	movteq	r1, #1
   34618:	cmp	r9, #2
   3461c:	str	r1, [sp, #28]
   34620:	bne	3463c <__assert_fail@plt+0x21bc0>
   34624:	mov	ip, #1
   34628:	cmp	r9, #3
   3462c:	bne	34714 <__assert_fail@plt+0x21c98>
   34630:	sub	r0, r9, #3
   34634:	mov	r5, #0
   34638:	b	3465c <__assert_fail@plt+0x21be0>
   3463c:	ldr	r0, [sl]
   34640:	and	r0, r0, #56	; 0x38
   34644:	cmp	r0, #24
   34648:	ldreq	r0, [r8, #84]	; 0x54
   3464c:	cmpeq	r0, #2
   34650:	beq	34f44 <__assert_fail@plt+0x224c8>
   34654:	sub	r0, r9, #3
   34658:	mov	r5, #1
   3465c:	clz	r0, r0
   34660:	lsr	r6, r0, #5
   34664:	ldrb	r0, [sl, #1]
   34668:	ldr	r2, [fp, #-32]	; 0xffffffe0
   3466c:	tst	r0, #2
   34670:	beq	3468c <__assert_fail@plt+0x21c10>
   34674:	mov	r0, r2
   34678:	movw	r1, #1030	; 0x406
   3467c:	mov	r2, #3
   34680:	bl	329f8 <__assert_fail@plt+0x1ff7c>
   34684:	mov	r2, r0
   34688:	str	r0, [fp, #-32]	; 0xffffffe0
   3468c:	cmp	r2, #0
   34690:	blt	346ac <__assert_fail@plt+0x21c30>
   34694:	ldr	r0, [sp, #52]	; 0x34
   34698:	mov	r1, r8
   3469c:	mov	r3, #0
   346a0:	bl	34134 <__assert_fail@plt+0x216b8>
   346a4:	cmp	r0, #0
   346a8:	beq	3470c <__assert_fail@plt+0x21c90>
   346ac:	and	r0, r6, r5
   346b0:	cmp	r0, #1
   346b4:	bne	346c4 <__assert_fail@plt+0x21c48>
   346b8:	bl	127d0 <__errno_location@plt>
   346bc:	ldr	r0, [r0]
   346c0:	str	r0, [r8, #32]
   346c4:	ldrh	r0, [r8, #58]	; 0x3a
   346c8:	orr	r0, r0, #1
   346cc:	strh	r0, [r8, #58]	; 0x3a
   346d0:	ldr	r0, [r8, #12]
   346d4:	bl	12a4c <closedir@plt>
   346d8:	mov	r4, #0
   346dc:	ldr	r5, [sp, #52]	; 0x34
   346e0:	str	r4, [r8, #12]
   346e4:	ldr	r0, [sl]
   346e8:	tst	r0, #512	; 0x200
   346ec:	beq	34700 <__assert_fail@plt+0x21c84>
   346f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   346f4:	cmp	r0, #0
   346f8:	blt	34700 <__assert_fail@plt+0x21c84>
   346fc:	bl	12a34 <close@plt>
   34700:	mov	ip, #1
   34704:	str	r4, [r8, #12]
   34708:	b	34714 <__assert_fail@plt+0x21c98>
   3470c:	ldr	r5, [sp, #52]	; 0x34
   34710:	mov	ip, #0
   34714:	ldr	r0, [r8, #40]	; 0x28
   34718:	ldr	r1, [r8, #28]
   3471c:	mov	r7, #0
   34720:	sub	r2, r0, #1
   34724:	ldrb	r1, [r1, r2]
   34728:	cmp	r1, #47	; 0x2f
   3472c:	ldrb	r1, [sl]
   34730:	moveq	r0, r2
   34734:	tst	r1, #4
   34738:	mov	r1, #0
   3473c:	str	r1, [sp, #40]	; 0x28
   34740:	beq	34758 <__assert_fail@plt+0x21cdc>
   34744:	ldr	r1, [r5, #24]
   34748:	mov	r2, #47	; 0x2f
   3474c:	strb	r2, [r1, r0]!
   34750:	add	r1, r1, #1
   34754:	str	r1, [sp, #40]	; 0x28
   34758:	ldr	r6, [r8, #12]
   3475c:	add	r1, r0, #1
   34760:	str	r1, [fp, #-44]	; 0xffffffd4
   34764:	cmp	r6, #0
   34768:	beq	34b08 <__assert_fail@plt+0x2208c>
   3476c:	ldr	r0, [r8, #48]	; 0x30
   34770:	str	ip, [sp]
   34774:	add	r0, r0, #1
   34778:	str	r0, [sp, #20]
   3477c:	ldr	r0, [r5, #36]	; 0x24
   34780:	mov	r5, #0
   34784:	sub	r0, r0, r1
   34788:	str	r0, [sp, #44]	; 0x2c
   3478c:	bl	127d0 <__errno_location@plt>
   34790:	str	r0, [sp, #36]	; 0x24
   34794:	mov	r0, #0
   34798:	mov	r7, #0
   3479c:	mov	r4, #0
   347a0:	str	r8, [sp, #24]
   347a4:	str	sl, [sp, #32]
   347a8:	str	r0, [sp, #48]	; 0x30
   347ac:	mov	r0, #0
   347b0:	str	r0, [sp, #8]
   347b4:	mov	r0, #0
   347b8:	str	r0, [sp, #16]
   347bc:	ldr	r0, [sp, #36]	; 0x24
   347c0:	str	r7, [fp, #-36]	; 0xffffffdc
   347c4:	str	r5, [r0]
   347c8:	mov	r0, r6
   347cc:	bl	12944 <readdir64@plt>
   347d0:	cmp	r0, #0
   347d4:	beq	34c6c <__assert_fail@plt+0x221f0>
   347d8:	mov	r9, r0
   347dc:	ldrb	r0, [sl]
   347e0:	str	r4, [fp, #-40]	; 0xffffffd8
   347e4:	mov	r1, sl
   347e8:	add	r4, r9, #19
   347ec:	tst	r0, #32
   347f0:	ldrbeq	r0, [r4]
   347f4:	cmpeq	r0, #46	; 0x2e
   347f8:	beq	348f4 <__assert_fail@plt+0x21e78>
   347fc:	mov	r0, r4
   34800:	bl	12788 <strlen@plt>
   34804:	mov	r5, r0
   34808:	add	r0, r0, #176	; 0xb0
   3480c:	bic	r0, r0, #7
   34810:	bl	35608 <__assert_fail@plt+0x22b8c>
   34814:	mov	r6, r0
   34818:	cmp	r0, #0
   3481c:	beq	34e28 <__assert_fail@plt+0x223ac>
   34820:	add	sl, r6, #168	; 0xa8
   34824:	mov	r1, r4
   34828:	mov	r2, r5
   3482c:	mov	r0, sl
   34830:	bl	124b8 <memcpy@plt>
   34834:	ldr	r2, [sp, #52]	; 0x34
   34838:	mov	r0, #0
   3483c:	mov	r1, #196608	; 0x30000
   34840:	ldr	r3, [fp, #-44]	; 0xffffffd4
   34844:	strb	r0, [sl, r5]
   34848:	str	r5, [r6, #52]	; 0x34
   3484c:	str	r2, [r6, #44]	; 0x2c
   34850:	add	r7, r5, r3
   34854:	ldr	r4, [r2, #24]
   34858:	str	r1, [r6, #58]	; 0x3a
   3485c:	str	r0, [r6, #12]
   34860:	str	r0, [r6, #16]
   34864:	str	r0, [r6, #20]
   34868:	str	r4, [r6, #28]
   3486c:	str	r0, [r6, #32]
   34870:	ldr	r0, [sp, #44]	; 0x2c
   34874:	cmp	r5, r0
   34878:	bcs	34890 <__assert_fail@plt+0x21e14>
   3487c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   34880:	mov	r5, r2
   34884:	cmp	r7, r3
   34888:	bcs	34948 <__assert_fail@plt+0x21ecc>
   3488c:	b	34ccc <__assert_fail@plt+0x22250>
   34890:	ldr	r1, [r2, #36]	; 0x24
   34894:	movw	r0, #257	; 0x101
   34898:	mov	r5, r2
   3489c:	add	r0, r7, r0
   348a0:	adds	r1, r0, r1
   348a4:	bcs	34dd4 <__assert_fail@plt+0x22358>
   348a8:	mov	r0, r4
   348ac:	str	r1, [r5, #36]	; 0x24
   348b0:	bl	36328 <__assert_fail@plt+0x238ac>
   348b4:	cmp	r0, #0
   348b8:	beq	34e14 <__assert_fail@plt+0x22398>
   348bc:	cmp	r0, r4
   348c0:	str	r0, [r5, #24]
   348c4:	beq	3492c <__assert_fail@plt+0x21eb0>
   348c8:	ldr	r1, [sp, #32]
   348cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   348d0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   348d4:	ldrb	r1, [r1]
   348d8:	tst	r1, #4
   348dc:	ldr	r1, [sp, #40]	; 0x28
   348e0:	addne	r1, r0, r3
   348e4:	mov	r0, #1
   348e8:	str	r1, [sp, #40]	; 0x28
   348ec:	str	r0, [sp, #16]
   348f0:	b	34934 <__assert_fail@plt+0x21eb8>
   348f4:	ldrb	r0, [r9, #20]
   348f8:	cmp	r0, #0
   348fc:	beq	34910 <__assert_fail@plt+0x21e94>
   34900:	cmp	r0, #46	; 0x2e
   34904:	ldrbeq	r0, [r9, #21]
   34908:	cmpeq	r0, #0
   3490c:	bne	347fc <__assert_fail@plt+0x21d80>
   34910:	ldr	r4, [fp, #-40]	; 0xffffffd8
   34914:	ldr	r7, [fp, #-36]	; 0xffffffdc
   34918:	mov	r5, #0
   3491c:	ldr	r6, [r8, #12]
   34920:	cmp	r6, #0
   34924:	bne	347bc <__assert_fail@plt+0x21d40>
   34928:	b	34aec <__assert_fail@plt+0x22070>
   3492c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   34930:	ldr	r3, [fp, #-44]	; 0xffffffd4
   34934:	ldr	r0, [r5, #36]	; 0x24
   34938:	sub	r0, r0, r3
   3493c:	str	r0, [sp, #44]	; 0x2c
   34940:	cmp	r7, r3
   34944:	bcc	34ccc <__assert_fail@plt+0x22250>
   34948:	ldr	r0, [sp, #20]
   3494c:	str	r0, [r6, #48]	; 0x30
   34950:	ldr	r0, [r5]
   34954:	str	r7, [r6, #40]	; 0x28
   34958:	str	r0, [r6, #4]
   3495c:	ldrd	r0, [r9]
   34960:	strd	r0, [r6, #160]	; 0xa0
   34964:	ldrb	r0, [r5, #48]	; 0x30
   34968:	tst	r0, #4
   3496c:	bne	34978 <__assert_fail@plt+0x21efc>
   34970:	str	sl, [r6, #24]
   34974:	b	34994 <__assert_fail@plt+0x21f18>
   34978:	ldr	r0, [r6, #28]
   3497c:	ldr	r1, [r6, #52]	; 0x34
   34980:	str	r0, [r6, #24]
   34984:	ldr	r0, [sp, #40]	; 0x28
   34988:	add	r2, r1, #1
   3498c:	mov	r1, sl
   34990:	bl	1244c <memmove@plt>
   34994:	ldr	r0, [fp, #-48]	; 0xffffffd0
   34998:	ldr	sl, [sp, #32]
   3499c:	ldr	r8, [sp, #24]
   349a0:	ldr	r0, [r0]
   349a4:	ldr	r2, [sl]
   349a8:	cmp	r0, #0
   349ac:	beq	349d8 <__assert_fail@plt+0x21f5c>
   349b0:	ands	r0, r2, #1024	; 0x400
   349b4:	bne	349d8 <__assert_fail@plt+0x21f5c>
   349b8:	mov	r0, r5
   349bc:	mov	r1, r6
   349c0:	mov	r2, #0
   349c4:	bl	33370 <__assert_fail@plt+0x208f4>
   349c8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   349cc:	mov	r5, #0
   349d0:	strh	r0, [r6, #56]	; 0x38
   349d4:	b	34a50 <__assert_fail@plt+0x21fd4>
   349d8:	ldrb	r3, [r9, #18]
   349dc:	mov	r0, #0
   349e0:	tst	r2, #8
   349e4:	mov	r1, #0
   349e8:	beq	34a0c <__assert_fail@plt+0x21f90>
   349ec:	orr	r1, r3, #4
   349f0:	cmp	r1, #4
   349f4:	mov	r1, #0
   349f8:	beq	34a0c <__assert_fail@plt+0x21f90>
   349fc:	eor	r1, r3, #10
   34a00:	and	r2, r2, #16
   34a04:	orrs	r1, r2, r1
   34a08:	movwne	r1, #1
   34a0c:	mov	r2, #11
   34a10:	ldr	r7, [fp, #-36]	; 0xffffffdc
   34a14:	mov	r5, #0
   34a18:	strh	r2, [r6, #56]	; 0x38
   34a1c:	sub	r2, r3, #1
   34a20:	uxtb	r3, r2
   34a24:	cmp	r3, #11
   34a28:	sxtbls	r0, r2
   34a2c:	movwls	r2, #9008	; 0x2330
   34a30:	movtls	r2, #5
   34a34:	ldrls	r0, [r2, r0, lsl #2]
   34a38:	cmp	r1, #0
   34a3c:	str	r0, [r6, #80]	; 0x50
   34a40:	mov	r0, #2
   34a44:	movwne	r0, #1
   34a48:	str	r0, [r6, #112]	; 0x70
   34a4c:	str	r5, [r6, #116]	; 0x74
   34a50:	cmp	r7, #0
   34a54:	str	r5, [r6, #8]
   34a58:	ldrne	r0, [sp, #48]	; 0x30
   34a5c:	moveq	r7, r6
   34a60:	strne	r6, [r0, #8]
   34a64:	movw	r0, #10000	; 0x2710
   34a68:	cmp	r4, r0
   34a6c:	bne	34ac0 <__assert_fail@plt+0x22044>
   34a70:	ldr	r0, [fp, #-48]	; 0xffffffd0
   34a74:	ldr	r0, [r0]
   34a78:	cmp	r0, #0
   34a7c:	bne	34ac0 <__assert_fail@plt+0x22044>
   34a80:	ldr	r1, [fp, #-32]	; 0xffffffe0
   34a84:	mov	r0, r8
   34a88:	bl	35330 <__assert_fail@plt+0x228b4>
   34a8c:	mov	r1, #0
   34a90:	str	r1, [sp, #8]
   34a94:	movw	r1, #19778	; 0x4d42
   34a98:	movt	r1, #65363	; 0xff53
   34a9c:	cmp	r0, r1
   34aa0:	movwne	r1, #26985	; 0x6969
   34aa4:	cmpne	r0, r1
   34aa8:	beq	34ac0 <__assert_fail@plt+0x22044>
   34aac:	movw	r1, #6548	; 0x1994
   34ab0:	movt	r1, #258	; 0x102
   34ab4:	cmp	r0, r1
   34ab8:	movne	r0, #1
   34abc:	strne	r0, [sp, #8]
   34ac0:	ldr	r0, [sp, #28]
   34ac4:	add	r4, r4, #1
   34ac8:	cmp	r0, r4
   34acc:	mov	r0, #0
   34ad0:	movwls	r0, #15
   34ad4:	cmp	r0, #0
   34ad8:	bne	34d4c <__assert_fail@plt+0x222d0>
   34adc:	str	r6, [sp, #48]	; 0x30
   34ae0:	ldr	r6, [r8, #12]
   34ae4:	cmp	r6, #0
   34ae8:	bne	347bc <__assert_fail@plt+0x21d40>
   34aec:	ldr	r0, [sp, #16]
   34af0:	ldr	ip, [sp]
   34af4:	ldr	r6, [sp, #8]
   34af8:	ldr	r5, [sp, #52]	; 0x34
   34afc:	tst	r0, #1
   34b00:	beq	34b10 <__assert_fail@plt+0x22094>
   34b04:	b	34eb8 <__assert_fail@plt+0x2243c>
   34b08:	mov	r4, #0
   34b0c:	mov	r6, #0
   34b10:	ldrb	r0, [sl]
   34b14:	tst	r0, #4
   34b18:	beq	34b44 <__assert_fail@plt+0x220c8>
   34b1c:	ldr	r2, [sp, #40]	; 0x28
   34b20:	ldr	r0, [r5, #36]	; 0x24
   34b24:	ldr	r3, [fp, #-44]	; 0xffffffd4
   34b28:	cmp	r3, r0
   34b2c:	sub	r1, r2, #1
   34b30:	mov	r0, #0
   34b34:	moveq	r2, r1
   34b38:	cmp	r4, #0
   34b3c:	moveq	r2, r1
   34b40:	strb	r0, [r2]
   34b44:	ldr	r0, [sp, #12]
   34b48:	cmp	r0, #0
   34b4c:	movwne	r0, #1
   34b50:	orrs	r0, r0, ip
   34b54:	beq	34bb8 <__assert_fail@plt+0x2213c>
   34b58:	cmp	r4, #0
   34b5c:	bne	34bf8 <__assert_fail@plt+0x2217c>
   34b60:	ldr	r0, [sp, #4]
   34b64:	cmp	r0, #3
   34b68:	bne	34b80 <__assert_fail@plt+0x22104>
   34b6c:	ldrh	r0, [r8, #56]	; 0x38
   34b70:	cmp	r0, #4
   34b74:	cmpne	r0, #7
   34b78:	movne	r0, #6
   34b7c:	strhne	r0, [r8, #56]	; 0x38
   34b80:	mov	r6, #0
   34b84:	cmp	r7, #0
   34b88:	beq	34dc8 <__assert_fail@plt+0x2234c>
   34b8c:	ldrd	r4, [r7, #8]
   34b90:	cmp	r5, #0
   34b94:	beq	34ba0 <__assert_fail@plt+0x22124>
   34b98:	mov	r0, r5
   34b9c:	bl	12a4c <closedir@plt>
   34ba0:	mov	r0, r7
   34ba4:	bl	32c40 <__assert_fail@plt+0x201c4>
   34ba8:	cmp	r4, #0
   34bac:	mov	r7, r4
   34bb0:	bne	34b8c <__assert_fail@plt+0x22110>
   34bb4:	b	34dc8 <__assert_fail@plt+0x2234c>
   34bb8:	ldr	r0, [sp, #4]
   34bbc:	cmp	r0, #1
   34bc0:	cmpne	r4, #0
   34bc4:	bne	34bf8 <__assert_fail@plt+0x2217c>
   34bc8:	ldr	r0, [r8, #48]	; 0x30
   34bcc:	cmp	r0, #0
   34bd0:	beq	34d70 <__assert_fail@plt+0x222f4>
   34bd4:	ldr	r1, [r8, #4]
   34bd8:	movw	r3, #8993	; 0x2321
   34bdc:	mov	r0, r5
   34be0:	mvn	r2, #0
   34be4:	movt	r3, #5
   34be8:	bl	34134 <__assert_fail@plt+0x216b8>
   34bec:	cmp	r0, #0
   34bf0:	bne	34d80 <__assert_fail@plt+0x22304>
   34bf4:	b	34b58 <__assert_fail@plt+0x220dc>
   34bf8:	tst	r6, #1
   34bfc:	beq	34c34 <__assert_fail@plt+0x221b8>
   34c00:	movw	r0, #21240	; 0x52f8
   34c04:	mov	r1, r7
   34c08:	mov	r2, r4
   34c0c:	movt	r0, #3
   34c10:	str	r0, [r5, #44]	; 0x2c
   34c14:	mov	r0, r5
   34c18:	bl	33508 <__assert_fail@plt+0x20a8c>
   34c1c:	mov	r6, r0
   34c20:	mov	r0, #0
   34c24:	str	r0, [r5, #44]	; 0x2c
   34c28:	mov	r0, r6
   34c2c:	sub	sp, fp, #28
   34c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c34:	cmp	r4, #2
   34c38:	bcc	34df4 <__assert_fail@plt+0x22378>
   34c3c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   34c40:	ldr	r0, [r0]
   34c44:	cmp	r0, #0
   34c48:	beq	34e04 <__assert_fail@plt+0x22388>
   34c4c:	mov	r0, r5
   34c50:	mov	r1, r7
   34c54:	mov	r2, r4
   34c58:	bl	33508 <__assert_fail@plt+0x20a8c>
   34c5c:	mov	r6, r0
   34c60:	mov	r0, r6
   34c64:	sub	sp, fp, #28
   34c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c6c:	ldr	r0, [sp, #36]	; 0x24
   34c70:	ldr	r0, [r0]
   34c74:	cmp	r0, #0
   34c78:	beq	34c94 <__assert_fail@plt+0x22218>
   34c7c:	str	r0, [r8, #32]
   34c80:	ldr	r0, [sp, #12]
   34c84:	orrs	r0, r0, r4
   34c88:	mov	r0, #4
   34c8c:	movwne	r0, #7
   34c90:	strh	r0, [r8, #56]	; 0x38
   34c94:	ldr	r0, [r8, #12]
   34c98:	ldr	r6, [sp, #8]
   34c9c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   34ca0:	ldr	r5, [sp, #52]	; 0x34
   34ca4:	cmp	r0, #0
   34ca8:	beq	34ea8 <__assert_fail@plt+0x2242c>
   34cac:	bl	12a4c <closedir@plt>
   34cb0:	mov	r0, #0
   34cb4:	ldr	ip, [sp]
   34cb8:	str	r0, [r8, #12]
   34cbc:	ldr	r0, [sp, #16]
   34cc0:	tst	r0, #1
   34cc4:	beq	34b10 <__assert_fail@plt+0x22094>
   34cc8:	b	34eb8 <__assert_fail@plt+0x2243c>
   34ccc:	mov	r0, r6
   34cd0:	bl	32c40 <__assert_fail@plt+0x201c4>
   34cd4:	ldr	r6, [fp, #-36]	; 0xffffffdc
   34cd8:	ldr	r7, [sp, #24]
   34cdc:	cmp	r6, #0
   34ce0:	beq	34d0c <__assert_fail@plt+0x22290>
   34ce4:	ldrd	r4, [r6, #8]
   34ce8:	cmp	r5, #0
   34cec:	beq	34cf8 <__assert_fail@plt+0x2227c>
   34cf0:	mov	r0, r5
   34cf4:	bl	12a4c <closedir@plt>
   34cf8:	mov	r0, r6
   34cfc:	bl	32c40 <__assert_fail@plt+0x201c4>
   34d00:	cmp	r4, #0
   34d04:	mov	r6, r4
   34d08:	bne	34ce4 <__assert_fail@plt+0x22268>
   34d0c:	ldr	r0, [r7, #12]
   34d10:	bl	12a4c <closedir@plt>
   34d14:	ldr	r1, [sp, #32]
   34d18:	mov	r6, #0
   34d1c:	mov	r0, #7
   34d20:	str	r6, [r7, #12]
   34d24:	strh	r0, [r7, #56]	; 0x38
   34d28:	ldr	r0, [r1]
   34d2c:	orr	r0, r0, #8192	; 0x2000
   34d30:	str	r0, [r1]
   34d34:	ldr	r1, [sp, #36]	; 0x24
   34d38:	mov	r0, #36	; 0x24
   34d3c:	str	r0, [r1]
   34d40:	mov	r0, r6
   34d44:	sub	sp, fp, #28
   34d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34d4c:	ldr	ip, [sp]
   34d50:	cmp	r0, #15
   34d54:	bne	34f90 <__assert_fail@plt+0x22514>
   34d58:	ldr	r6, [sp, #8]
   34d5c:	ldr	r5, [sp, #52]	; 0x34
   34d60:	ldr	r0, [sp, #16]
   34d64:	tst	r0, #1
   34d68:	beq	34b10 <__assert_fail@plt+0x22094>
   34d6c:	b	34eb8 <__assert_fail@plt+0x2243c>
   34d70:	mov	r0, r5
   34d74:	bl	34fb8 <__assert_fail@plt+0x2253c>
   34d78:	cmp	r0, #0
   34d7c:	beq	34b58 <__assert_fail@plt+0x220dc>
   34d80:	mov	r0, #7
   34d84:	mov	r6, #0
   34d88:	cmp	r7, #0
   34d8c:	strh	r0, [r8, #56]	; 0x38
   34d90:	ldr	r0, [sl]
   34d94:	orr	r0, r0, #8192	; 0x2000
   34d98:	str	r0, [sl]
   34d9c:	beq	34dc8 <__assert_fail@plt+0x2234c>
   34da0:	ldrd	r4, [r7, #8]
   34da4:	cmp	r5, #0
   34da8:	beq	34db4 <__assert_fail@plt+0x22338>
   34dac:	mov	r0, r5
   34db0:	bl	12a4c <closedir@plt>
   34db4:	mov	r0, r7
   34db8:	bl	32c40 <__assert_fail@plt+0x201c4>
   34dbc:	cmp	r4, #0
   34dc0:	mov	r7, r4
   34dc4:	bne	34da0 <__assert_fail@plt+0x22324>
   34dc8:	mov	r0, r6
   34dcc:	sub	sp, fp, #28
   34dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34dd4:	mov	r0, r4
   34dd8:	bl	32c40 <__assert_fail@plt+0x201c4>
   34ddc:	ldr	r1, [sp, #36]	; 0x24
   34de0:	mov	r0, #0
   34de4:	str	r0, [r5, #24]
   34de8:	mov	r0, #36	; 0x24
   34dec:	str	r0, [r1]
   34df0:	b	34e24 <__assert_fail@plt+0x223a8>
   34df4:	mov	r6, r7
   34df8:	mov	r0, r6
   34dfc:	sub	sp, fp, #28
   34e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e04:	mov	r6, r7
   34e08:	mov	r0, r6
   34e0c:	sub	sp, fp, #28
   34e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e14:	ldr	r0, [r5, #24]
   34e18:	bl	32c40 <__assert_fail@plt+0x201c4>
   34e1c:	mov	r0, #0
   34e20:	str	r0, [r5, #24]
   34e24:	ldr	r8, [sp, #24]
   34e28:	ldr	r0, [sp, #36]	; 0x24
   34e2c:	ldr	r4, [r0]
   34e30:	mov	r0, r6
   34e34:	bl	32c40 <__assert_fail@plt+0x201c4>
   34e38:	ldr	r5, [fp, #-36]	; 0xffffffdc
   34e3c:	cmp	r5, #0
   34e40:	beq	34e6c <__assert_fail@plt+0x223f0>
   34e44:	ldrd	r6, [r5, #8]
   34e48:	cmp	r7, #0
   34e4c:	beq	34e58 <__assert_fail@plt+0x223dc>
   34e50:	mov	r0, r7
   34e54:	bl	12a4c <closedir@plt>
   34e58:	mov	r0, r5
   34e5c:	bl	32c40 <__assert_fail@plt+0x201c4>
   34e60:	cmp	r6, #0
   34e64:	mov	r5, r6
   34e68:	bne	34e44 <__assert_fail@plt+0x223c8>
   34e6c:	ldr	r0, [r8, #12]
   34e70:	bl	12a4c <closedir@plt>
   34e74:	ldr	r1, [sp, #32]
   34e78:	mov	r6, #0
   34e7c:	mov	r0, #7
   34e80:	str	r6, [r8, #12]
   34e84:	strh	r0, [r8, #56]	; 0x38
   34e88:	ldr	r0, [r1]
   34e8c:	orr	r0, r0, #8192	; 0x2000
   34e90:	str	r0, [r1]
   34e94:	ldr	r0, [sp, #36]	; 0x24
   34e98:	str	r4, [r0]
   34e9c:	mov	r0, r6
   34ea0:	sub	sp, fp, #28
   34ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ea8:	ldr	ip, [sp]
   34eac:	ldr	r0, [sp, #16]
   34eb0:	tst	r0, #1
   34eb4:	beq	34b10 <__assert_fail@plt+0x22094>
   34eb8:	ldr	r1, [r5, #4]
   34ebc:	ldr	r0, [r5, #24]
   34ec0:	cmp	r1, #0
   34ec4:	beq	34ef4 <__assert_fail@plt+0x22478>
   34ec8:	ldr	r2, [r1, #24]
   34ecc:	add	r3, r1, #168	; 0xa8
   34ed0:	cmp	r2, r3
   34ed4:	ldrne	r3, [r1, #28]
   34ed8:	subne	r2, r2, r3
   34edc:	addne	r2, r0, r2
   34ee0:	strne	r2, [r1, #24]
   34ee4:	str	r0, [r1, #28]
   34ee8:	ldr	r1, [r1, #8]
   34eec:	cmp	r1, #0
   34ef0:	bne	34ec8 <__assert_fail@plt+0x2244c>
   34ef4:	ldr	r1, [r7, #48]	; 0x30
   34ef8:	cmp	r1, #0
   34efc:	blt	34b10 <__assert_fail@plt+0x22094>
   34f00:	mov	r1, r7
   34f04:	ldr	r2, [r1, #24]
   34f08:	add	r3, r1, #168	; 0xa8
   34f0c:	cmp	r2, r3
   34f10:	ldrne	r3, [r1, #28]
   34f14:	subne	r2, r2, r3
   34f18:	addne	r2, r0, r2
   34f1c:	strne	r2, [r1, #24]
   34f20:	str	r0, [r1, #28]
   34f24:	ldr	r2, [r1, #8]
   34f28:	cmp	r2, #0
   34f2c:	ldreq	r2, [r1, #4]
   34f30:	ldr	r1, [r2, #48]	; 0x30
   34f34:	cmn	r1, #1
   34f38:	mov	r1, r2
   34f3c:	bgt	34f04 <__assert_fail@plt+0x22488>
   34f40:	b	34b10 <__assert_fail@plt+0x22094>
   34f44:	ldr	r1, [fp, #-32]	; 0xffffffe0
   34f48:	mov	r0, r8
   34f4c:	bl	35330 <__assert_fail@plt+0x228b4>
   34f50:	movw	r1, #26984	; 0x6968
   34f54:	cmp	r0, r1
   34f58:	ble	34fa0 <__assert_fail@plt+0x22524>
   34f5c:	movw	r1, #26985	; 0x6969
   34f60:	cmp	r0, r1
   34f64:	movwne	r1, #16719	; 0x414f
   34f68:	movtne	r1, #21318	; 0x5346
   34f6c:	cmpne	r0, r1
   34f70:	beq	34654 <__assert_fail@plt+0x21bd8>
   34f74:	movw	r1, #40864	; 0x9fa0
   34f78:	cmp	r0, r1
   34f7c:	beq	34654 <__assert_fail@plt+0x21bd8>
   34f80:	b	34624 <__assert_fail@plt+0x21ba8>
   34f84:	bl	127d0 <__errno_location@plt>
   34f88:	mov	r1, #12
   34f8c:	str	r1, [r0]
   34f90:	mov	r6, #0
   34f94:	mov	r0, r6
   34f98:	sub	sp, fp, #28
   34f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34fa0:	movw	r1, #19778	; 0x4d42
   34fa4:	movt	r1, #65363	; 0xff53
   34fa8:	cmp	r0, r1
   34fac:	cmpne	r0, #0
   34fb0:	beq	34654 <__assert_fail@plt+0x21bd8>
   34fb4:	b	34624 <__assert_fail@plt+0x21ba8>
   34fb8:	push	{r4, r5, fp, lr}
   34fbc:	add	fp, sp, #8
   34fc0:	mov	r5, r0
   34fc4:	ldr	r0, [r0, #48]	; 0x30
   34fc8:	mov	r4, #0
   34fcc:	tst	r0, #4
   34fd0:	bne	35014 <__assert_fail@plt+0x22598>
   34fd4:	tst	r0, #512	; 0x200
   34fd8:	bne	34ff4 <__assert_fail@plt+0x22578>
   34fdc:	ldr	r0, [r5, #28]
   34fe0:	bl	12980 <fchdir@plt>
   34fe4:	mov	r4, r0
   34fe8:	cmp	r0, #0
   34fec:	movwne	r4, #1
   34ff0:	b	35014 <__assert_fail@plt+0x22598>
   34ff4:	ldr	r1, [r5, #32]
   34ff8:	add	r0, r5, #60	; 0x3c
   34ffc:	bl	4b9ac <__assert_fail@plt+0x38f30>
   35000:	cmp	r0, #0
   35004:	blt	3500c <__assert_fail@plt+0x22590>
   35008:	bl	12a34 <close@plt>
   3500c:	mvn	r0, #99	; 0x63
   35010:	str	r0, [r5, #32]
   35014:	add	r5, r5, #60	; 0x3c
   35018:	b	35020 <__assert_fail@plt+0x225a4>
   3501c:	bl	12a34 <close@plt>
   35020:	mov	r0, r5
   35024:	bl	4b9a4 <__assert_fail@plt+0x38f28>
   35028:	cmp	r0, #0
   3502c:	movne	r0, r4
   35030:	popne	{r4, r5, fp, pc}
   35034:	mov	r0, r5
   35038:	bl	4b9f8 <__assert_fail@plt+0x38f7c>
   3503c:	cmp	r0, #0
   35040:	bge	3501c <__assert_fail@plt+0x225a0>
   35044:	b	35020 <__assert_fail@plt+0x225a4>
   35048:	cmp	r2, #5
   3504c:	movcc	r0, #0
   35050:	strhcc	r2, [r1, #60]	; 0x3c
   35054:	bxcc	lr
   35058:	push	{fp, lr}
   3505c:	mov	fp, sp
   35060:	bl	127d0 <__errno_location@plt>
   35064:	mov	r1, #22
   35068:	str	r1, [r0]
   3506c:	mov	r0, #1
   35070:	pop	{fp, pc}
   35074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35078:	add	fp, sp, #28
   3507c:	sub	sp, sp, #4
   35080:	mov	r9, r0
   35084:	orr	r0, r1, #4096	; 0x1000
   35088:	cmp	r0, #4096	; 0x1000
   3508c:	bne	350d4 <__assert_fail@plt+0x22658>
   35090:	ldr	r8, [r9]
   35094:	mov	r7, r1
   35098:	bl	127d0 <__errno_location@plt>
   3509c:	mov	r5, #0
   350a0:	mov	sl, r0
   350a4:	str	r5, [r0]
   350a8:	ldrb	r0, [r9, #49]	; 0x31
   350ac:	tst	r0, #32
   350b0:	bne	350c8 <__assert_fail@plt+0x2264c>
   350b4:	ldrh	r0, [r8, #56]	; 0x38
   350b8:	cmp	r0, #1
   350bc:	beq	350f0 <__assert_fail@plt+0x22674>
   350c0:	cmp	r0, #9
   350c4:	ldreq	r5, [r8, #8]
   350c8:	mov	r0, r5
   350cc:	sub	sp, fp, #28
   350d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350d4:	bl	127d0 <__errno_location@plt>
   350d8:	mov	r1, #22
   350dc:	mov	r5, #0
   350e0:	str	r1, [r0]
   350e4:	mov	r0, r5
   350e8:	sub	sp, fp, #28
   350ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350f0:	ldr	r6, [r9, #4]
   350f4:	cmp	r6, #0
   350f8:	beq	35128 <__assert_fail@plt+0x226ac>
   350fc:	ldr	r4, [r6, #8]
   35100:	ldr	r1, [r6, #12]
   35104:	cmp	r1, #0
   35108:	beq	35114 <__assert_fail@plt+0x22698>
   3510c:	mov	r0, r1
   35110:	bl	12a4c <closedir@plt>
   35114:	mov	r0, r6
   35118:	bl	32c40 <__assert_fail@plt+0x201c4>
   3511c:	cmp	r4, #0
   35120:	mov	r6, r4
   35124:	bne	350fc <__assert_fail@plt+0x22680>
   35128:	cmp	r7, #4096	; 0x1000
   3512c:	mov	r4, #1
   35130:	ldreq	r0, [r9, #48]	; 0x30
   35134:	moveq	r4, #2
   35138:	orreq	r0, r0, #4096	; 0x1000
   3513c:	streq	r0, [r9, #48]	; 0x30
   35140:	ldr	r0, [r8, #48]	; 0x30
   35144:	cmp	r0, #0
   35148:	bne	351a0 <__assert_fail@plt+0x22724>
   3514c:	ldr	r0, [r8, #24]
   35150:	ldrb	r0, [r0]
   35154:	cmp	r0, #47	; 0x2f
   35158:	beq	351a0 <__assert_fail@plt+0x22724>
   3515c:	ldr	r0, [r9, #48]	; 0x30
   35160:	tst	r0, #4
   35164:	bne	351a0 <__assert_fail@plt+0x22724>
   35168:	mov	r1, #32768	; 0x8000
   3516c:	tst	r0, #512	; 0x200
   35170:	and	r1, r1, r0, lsl #11
   35174:	orr	r1, r1, #18688	; 0x4900
   35178:	orr	r2, r1, #524288	; 0x80000
   3517c:	bne	351c0 <__assert_fail@plt+0x22744>
   35180:	movw	r0, #54804	; 0xd614
   35184:	mov	r1, r2
   35188:	movt	r0, #4
   3518c:	bl	2389c <__assert_fail@plt+0x10e20>
   35190:	mov	r8, r0
   35194:	cmn	r0, #1
   35198:	bgt	351dc <__assert_fail@plt+0x22760>
   3519c:	b	35224 <__assert_fail@plt+0x227a8>
   351a0:	mov	r0, r9
   351a4:	mov	r1, r4
   351a8:	bl	343dc <__assert_fail@plt+0x21960>
   351ac:	mov	r5, r0
   351b0:	str	r0, [r9, #4]
   351b4:	mov	r0, r5
   351b8:	sub	sp, fp, #28
   351bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   351c0:	ldr	r0, [r9, #32]
   351c4:	movw	r1, #54804	; 0xd614
   351c8:	movt	r1, #4
   351cc:	bl	27820 <__assert_fail@plt+0x14da4>
   351d0:	mov	r8, r0
   351d4:	cmn	r0, #1
   351d8:	ble	35224 <__assert_fail@plt+0x227a8>
   351dc:	mov	r0, r9
   351e0:	mov	r1, r4
   351e4:	bl	343dc <__assert_fail@plt+0x21960>
   351e8:	str	r0, [r9, #4]
   351ec:	ldrb	r0, [r9, #49]	; 0x31
   351f0:	tst	r0, #2
   351f4:	bne	35238 <__assert_fail@plt+0x227bc>
   351f8:	mov	r0, r8
   351fc:	bl	12980 <fchdir@plt>
   35200:	cmp	r0, #0
   35204:	beq	35274 <__assert_fail@plt+0x227f8>
   35208:	ldr	r4, [sl]
   3520c:	mov	r0, r8
   35210:	bl	12a34 <close@plt>
   35214:	str	r4, [sl]
   35218:	mov	r0, r5
   3521c:	sub	sp, fp, #28
   35220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35224:	mov	r5, #0
   35228:	str	r5, [r9, #4]
   3522c:	mov	r0, r5
   35230:	sub	sp, fp, #28
   35234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35238:	ldr	r1, [r9, #32]
   3523c:	cmp	r1, r8
   35240:	bne	3524c <__assert_fail@plt+0x227d0>
   35244:	cmn	r1, #100	; 0x64
   35248:	bne	3528c <__assert_fail@plt+0x22810>
   3524c:	add	r0, r9, #60	; 0x3c
   35250:	bl	4b9ac <__assert_fail@plt+0x38f30>
   35254:	cmp	r0, #0
   35258:	blt	35260 <__assert_fail@plt+0x227e4>
   3525c:	bl	12a34 <close@plt>
   35260:	str	r8, [r9, #32]
   35264:	ldr	r5, [r9, #4]
   35268:	mov	r0, r5
   3526c:	sub	sp, fp, #28
   35270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35274:	mov	r0, r8
   35278:	bl	12a34 <close@plt>
   3527c:	ldr	r5, [r9, #4]
   35280:	mov	r0, r5
   35284:	sub	sp, fp, #28
   35288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3528c:	bl	12a28 <abort@plt>
   35290:	push	{fp, lr}
   35294:	mov	fp, sp
   35298:	mov	r2, r1
   3529c:	ldrd	r0, [r0, #8]
   352a0:	mov	r3, #0
   352a4:	bl	4c218 <__assert_fail@plt+0x3979c>
   352a8:	mov	r0, r2
   352ac:	pop	{fp, pc}
   352b0:	push	{r4, r5, fp, lr}
   352b4:	add	fp, sp, #8
   352b8:	ldrd	r2, [r1, #8]
   352bc:	ldrd	r4, [r0, #8]
   352c0:	eor	r3, r5, r3
   352c4:	eor	r2, r4, r2
   352c8:	orrs	r2, r2, r3
   352cc:	mov	r2, #0
   352d0:	bne	352f0 <__assert_fail@plt+0x22874>
   352d4:	ldrd	r2, [r1]
   352d8:	ldrd	r0, [r0]
   352dc:	eor	r1, r1, r3
   352e0:	eor	r0, r0, r2
   352e4:	orr	r0, r0, r1
   352e8:	clz	r0, r0
   352ec:	lsr	r2, r0, #5
   352f0:	mov	r0, r2
   352f4:	pop	{r4, r5, fp, pc}
   352f8:	push	{r4, r5, fp, lr}
   352fc:	add	fp, sp, #8
   35300:	ldr	r0, [r0]
   35304:	ldrd	r2, [r0, #160]	; 0xa0
   35308:	ldr	r0, [r1]
   3530c:	ldrd	r4, [r0, #160]	; 0xa0
   35310:	mov	r0, #0
   35314:	subs	r1, r4, r2
   35318:	sbcs	r1, r5, r3
   3531c:	movwcc	r0, #1
   35320:	subs	r1, r2, r4
   35324:	sbcs	r1, r3, r5
   35328:	subcc	r0, r0, #1
   3532c:	pop	{r4, r5, fp, pc}
   35330:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   35334:	add	fp, sp, #24
   35338:	sub	sp, sp, #96	; 0x60
   3533c:	ldr	r7, [r0, #44]	; 0x2c
   35340:	mov	r4, r0
   35344:	mov	r5, #0
   35348:	ldrb	r0, [r7, #49]	; 0x31
   3534c:	tst	r0, #2
   35350:	beq	35400 <__assert_fail@plt+0x22984>
   35354:	ldr	r6, [r7, #52]	; 0x34
   35358:	mov	r9, r1
   3535c:	cmp	r6, #0
   35360:	bne	353a0 <__assert_fail@plt+0x22924>
   35364:	movw	r0, #11328	; 0x2c40
   35368:	movw	r2, #21612	; 0x546c
   3536c:	movw	r3, #21644	; 0x548c
   35370:	mov	r1, #0
   35374:	mov	r8, #0
   35378:	movt	r0, #3
   3537c:	movt	r2, #3
   35380:	movt	r3, #3
   35384:	str	r0, [sp]
   35388:	mov	r0, #13
   3538c:	bl	23f90 <__assert_fail@plt+0x11514>
   35390:	mov	r6, r0
   35394:	cmp	r0, #0
   35398:	str	r0, [r7, #52]	; 0x34
   3539c:	beq	353e0 <__assert_fail@plt+0x22964>
   353a0:	ldrd	r0, [r4, #64]	; 0x40
   353a4:	str	r1, [sp, #12]
   353a8:	str	r0, [sp, #8]
   353ac:	add	r1, sp, #8
   353b0:	mov	r0, r6
   353b4:	bl	23cc8 <__assert_fail@plt+0x1124c>
   353b8:	cmp	r0, #0
   353bc:	beq	353d0 <__assert_fail@plt+0x22954>
   353c0:	ldr	r5, [r0, #8]
   353c4:	mov	r0, r5
   353c8:	sub	sp, fp, #24
   353cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   353d0:	mov	r8, #1
   353d4:	cmp	r9, #0
   353d8:	bge	353ec <__assert_fail@plt+0x22970>
   353dc:	b	35400 <__assert_fail@plt+0x22984>
   353e0:	mov	r6, #0
   353e4:	cmp	r9, #0
   353e8:	blt	35400 <__assert_fail@plt+0x22984>
   353ec:	add	r1, sp, #8
   353f0:	mov	r0, r9
   353f4:	bl	12350 <fstatfs64@plt>
   353f8:	cmp	r0, #0
   353fc:	beq	3540c <__assert_fail@plt+0x22990>
   35400:	mov	r0, r5
   35404:	sub	sp, fp, #24
   35408:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3540c:	cmp	r8, #0
   35410:	beq	3545c <__assert_fail@plt+0x229e0>
   35414:	mov	r0, #16
   35418:	bl	35608 <__assert_fail@plt+0x22b8c>
   3541c:	cmp	r0, #0
   35420:	beq	3545c <__assert_fail@plt+0x229e0>
   35424:	mov	r5, r0
   35428:	ldrd	r0, [r4, #64]	; 0x40
   3542c:	ldr	r2, [sp, #8]
   35430:	stm	r5, {r0, r1, r2}
   35434:	mov	r0, r6
   35438:	mov	r1, r5
   3543c:	bl	24bc8 <__assert_fail@plt+0x1214c>
   35440:	cmp	r0, #0
   35444:	beq	35454 <__assert_fail@plt+0x229d8>
   35448:	cmp	r0, r5
   3544c:	beq	3545c <__assert_fail@plt+0x229e0>
   35450:	bl	12a28 <abort@plt>
   35454:	mov	r0, r5
   35458:	bl	32c40 <__assert_fail@plt+0x201c4>
   3545c:	ldr	r5, [sp, #8]
   35460:	mov	r0, r5
   35464:	sub	sp, fp, #24
   35468:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3546c:	push	{fp, lr}
   35470:	mov	fp, sp
   35474:	mov	r2, r1
   35478:	ldrd	r0, [r0]
   3547c:	mov	r3, #0
   35480:	bl	4c218 <__assert_fail@plt+0x3979c>
   35484:	mov	r0, r2
   35488:	pop	{fp, pc}
   3548c:	ldrd	r2, [r1]
   35490:	ldrd	r0, [r0]
   35494:	eor	r1, r1, r3
   35498:	eor	r0, r0, r2
   3549c:	orr	r0, r0, r1
   354a0:	clz	r0, r0
   354a4:	lsr	r0, r0, #5
   354a8:	bx	lr
   354ac:	push	{r4, r5, fp, lr}
   354b0:	add	fp, sp, #8
   354b4:	mov	r4, r1
   354b8:	bl	12770 <getfilecon@plt>
   354bc:	cmp	r0, #10
   354c0:	beq	354d8 <__assert_fail@plt+0x22a5c>
   354c4:	cmp	r0, #0
   354c8:	bne	3551c <__assert_fail@plt+0x22aa0>
   354cc:	bl	127d0 <__errno_location@plt>
   354d0:	mov	r1, #95	; 0x5f
   354d4:	b	35514 <__assert_fail@plt+0x22a98>
   354d8:	ldr	r5, [r4]
   354dc:	movw	r1, #9056	; 0x2360
   354e0:	movt	r1, #5
   354e4:	mov	r0, r5
   354e8:	bl	123d4 <strcmp@plt>
   354ec:	mov	r1, r0
   354f0:	mov	r0, #10
   354f4:	cmp	r1, #0
   354f8:	popne	{r4, r5, fp, pc}
   354fc:	mov	r0, r5
   35500:	bl	129a4 <freecon@plt>
   35504:	mov	r0, #0
   35508:	str	r0, [r4]
   3550c:	bl	127d0 <__errno_location@plt>
   35510:	mov	r1, #61	; 0x3d
   35514:	str	r1, [r0]
   35518:	mvn	r0, #0
   3551c:	pop	{r4, r5, fp, pc}
   35520:	push	{r4, r5, fp, lr}
   35524:	add	fp, sp, #8
   35528:	mov	r4, r1
   3552c:	bl	126bc <lgetfilecon@plt>
   35530:	cmp	r0, #10
   35534:	beq	3554c <__assert_fail@plt+0x22ad0>
   35538:	cmp	r0, #0
   3553c:	bne	35590 <__assert_fail@plt+0x22b14>
   35540:	bl	127d0 <__errno_location@plt>
   35544:	mov	r1, #95	; 0x5f
   35548:	b	35588 <__assert_fail@plt+0x22b0c>
   3554c:	ldr	r5, [r4]
   35550:	movw	r1, #9056	; 0x2360
   35554:	movt	r1, #5
   35558:	mov	r0, r5
   3555c:	bl	123d4 <strcmp@plt>
   35560:	mov	r1, r0
   35564:	mov	r0, #10
   35568:	cmp	r1, #0
   3556c:	popne	{r4, r5, fp, pc}
   35570:	mov	r0, r5
   35574:	bl	129a4 <freecon@plt>
   35578:	mov	r0, #0
   3557c:	str	r0, [r4]
   35580:	bl	127d0 <__errno_location@plt>
   35584:	mov	r1, #61	; 0x3d
   35588:	str	r1, [r0]
   3558c:	mvn	r0, #0
   35590:	pop	{r4, r5, fp, pc}
   35594:	push	{r4, r5, fp, lr}
   35598:	add	fp, sp, #8
   3559c:	mov	r4, r1
   355a0:	bl	12578 <fgetfilecon@plt>
   355a4:	cmp	r0, #10
   355a8:	beq	355c0 <__assert_fail@plt+0x22b44>
   355ac:	cmp	r0, #0
   355b0:	bne	35604 <__assert_fail@plt+0x22b88>
   355b4:	bl	127d0 <__errno_location@plt>
   355b8:	mov	r1, #95	; 0x5f
   355bc:	b	355fc <__assert_fail@plt+0x22b80>
   355c0:	ldr	r5, [r4]
   355c4:	movw	r1, #9056	; 0x2360
   355c8:	movt	r1, #5
   355cc:	mov	r0, r5
   355d0:	bl	123d4 <strcmp@plt>
   355d4:	mov	r1, r0
   355d8:	mov	r0, #10
   355dc:	cmp	r1, #0
   355e0:	popne	{r4, r5, fp, pc}
   355e4:	mov	r0, r5
   355e8:	bl	129a4 <freecon@plt>
   355ec:	mov	r0, #0
   355f0:	str	r0, [r4]
   355f4:	bl	127d0 <__errno_location@plt>
   355f8:	mov	r1, #61	; 0x3d
   355fc:	str	r1, [r0]
   35600:	mvn	r0, #0
   35604:	pop	{r4, r5, fp, pc}
   35608:	cmp	r0, #0
   3560c:	movweq	r0, #1
   35610:	cmn	r0, #1
   35614:	ble	3561c <__assert_fail@plt+0x22ba0>
   35618:	b	126c8 <malloc@plt>
   3561c:	push	{fp, lr}
   35620:	mov	fp, sp
   35624:	bl	127d0 <__errno_location@plt>
   35628:	mov	r1, #12
   3562c:	str	r1, [r0]
   35630:	mov	r0, #0
   35634:	pop	{fp, pc}
   35638:	push	{r4, r5, r6, r7, fp, lr}
   3563c:	add	fp, sp, #16
   35640:	sub	sp, sp, #8
   35644:	add	r5, sp, #4
   35648:	cmp	r0, #0
   3564c:	mov	r7, r2
   35650:	mov	r4, r1
   35654:	movne	r5, r0
   35658:	mov	r0, r5
   3565c:	bl	1265c <mbrtowc@plt>
   35660:	mov	r6, r0
   35664:	cmp	r7, #0
   35668:	beq	3568c <__assert_fail@plt+0x22c10>
   3566c:	cmn	r6, #2
   35670:	bcc	3568c <__assert_fail@plt+0x22c10>
   35674:	mov	r0, #0
   35678:	bl	4b91c <__assert_fail@plt+0x38ea0>
   3567c:	cmp	r0, #0
   35680:	ldrbeq	r0, [r4]
   35684:	moveq	r6, #1
   35688:	streq	r0, [r5]
   3568c:	mov	r0, r6
   35690:	sub	sp, fp, #16
   35694:	pop	{r4, r5, r6, r7, fp, pc}
   35698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3569c:	add	fp, sp, #28
   356a0:	sub	sp, sp, #36	; 0x24
   356a4:	movw	r0, #9066	; 0x236a
   356a8:	movw	r1, #2512	; 0x9d0
   356ac:	movt	r0, #5
   356b0:	movt	r1, #5
   356b4:	bl	1298c <fopen64@plt>
   356b8:	cmp	r0, #0
   356bc:	beq	35dfc <__assert_fail@plt+0x23380>
   356c0:	mov	sl, r0
   356c4:	mov	r0, #0
   356c8:	add	r1, sp, #24
   356cc:	mov	r2, #10
   356d0:	str	r0, [sp, #28]
   356d4:	str	r0, [sp, #24]
   356d8:	add	r0, sp, #28
   356dc:	mov	r3, sl
   356e0:	bl	123a4 <__getdelim@plt>
   356e4:	cmn	r0, #1
   356e8:	beq	361e0 <__assert_fail@plt+0x23764>
   356ec:	movw	r8, #9087	; 0x237f
   356f0:	add	r0, sp, #32
   356f4:	add	r9, sp, #12
   356f8:	add	r6, sp, #20
   356fc:	add	r7, sp, #16
   35700:	add	r5, sp, #28
   35704:	add	r4, sp, #24
   35708:	str	sl, [sp, #4]
   3570c:	movt	r8, #5
   35710:	str	r0, [sp, #8]
   35714:	b	35888 <__assert_fail@plt+0x22e0c>
   35718:	ldr	sl, [sp, #4]
   3571c:	movw	r8, #9087	; 0x237f
   35720:	add	r9, sp, #12
   35724:	add	r6, sp, #20
   35728:	movt	r8, #5
   3572c:	b	35dd0 <__assert_fail@plt+0x23354>
   35730:	ldrb	r0, [r4]
   35734:	cmp	r0, #47	; 0x2f
   35738:	ldrbeq	r0, [r4, #1]
   3573c:	cmpeq	r0, #47	; 0x2f
   35740:	beq	3583c <__assert_fail@plt+0x22dc0>
   35744:	movw	r1, #9219	; 0x2403
   35748:	mov	r0, r6
   3574c:	movt	r1, #5
   35750:	bl	123d4 <strcmp@plt>
   35754:	cmp	r0, #0
   35758:	beq	35d9c <__assert_fail@plt+0x23320>
   3575c:	movw	r1, #61376	; 0xefc0
   35760:	mov	r0, r6
   35764:	movt	r1, #4
   35768:	bl	123d4 <strcmp@plt>
   3576c:	cmp	r0, #0
   35770:	beq	35d9c <__assert_fail@plt+0x23320>
   35774:	movw	r1, #9224	; 0x2408
   35778:	mov	r0, r6
   3577c:	movt	r1, #5
   35780:	bl	123d4 <strcmp@plt>
   35784:	cmp	r0, #0
   35788:	beq	35d9c <__assert_fail@plt+0x23320>
   3578c:	movw	r1, #9229	; 0x240d
   35790:	mov	r0, r6
   35794:	movt	r1, #5
   35798:	bl	123d4 <strcmp@plt>
   3579c:	cmp	r0, #0
   357a0:	beq	35d9c <__assert_fail@plt+0x23320>
   357a4:	movw	r1, #9240	; 0x2418
   357a8:	mov	r0, r6
   357ac:	movt	r1, #5
   357b0:	bl	123d4 <strcmp@plt>
   357b4:	cmp	r0, #0
   357b8:	beq	35d9c <__assert_fail@plt+0x23320>
   357bc:	movw	r1, #9246	; 0x241e
   357c0:	mov	r0, r6
   357c4:	movt	r1, #5
   357c8:	bl	123d4 <strcmp@plt>
   357cc:	cmp	r0, #0
   357d0:	beq	35d9c <__assert_fail@plt+0x23320>
   357d4:	movw	r1, #9251	; 0x2423
   357d8:	mov	r0, r6
   357dc:	movt	r1, #5
   357e0:	bl	123d4 <strcmp@plt>
   357e4:	cmp	r0, #0
   357e8:	beq	35d9c <__assert_fail@plt+0x23320>
   357ec:	movw	r1, #9257	; 0x2429
   357f0:	mov	r0, r6
   357f4:	movt	r1, #5
   357f8:	bl	123d4 <strcmp@plt>
   357fc:	cmp	r0, #0
   35800:	beq	35d9c <__assert_fail@plt+0x23320>
   35804:	movw	r1, #9263	; 0x242f
   35808:	mov	r0, r6
   3580c:	movt	r1, #5
   35810:	bl	123d4 <strcmp@plt>
   35814:	cmp	r0, #0
   35818:	add	r6, sp, #20
   3581c:	beq	35da0 <__assert_fail@plt+0x23324>
   35820:	movw	r0, #9268	; 0x2434
   35824:	mov	r1, r4
   35828:	movt	r0, #5
   3582c:	bl	123d4 <strcmp@plt>
   35830:	clz	r0, r0
   35834:	lsr	r8, r0, #5
   35838:	b	35da0 <__assert_fail@plt+0x23324>
   3583c:	movw	r1, #9203	; 0x23f3
   35840:	mov	r0, r6
   35844:	movt	r1, #5
   35848:	bl	123d4 <strcmp@plt>
   3584c:	cmp	r0, #0
   35850:	beq	35d9c <__assert_fail@plt+0x23320>
   35854:	movw	r1, #9209	; 0x23f9
   35858:	mov	r0, r6
   3585c:	movt	r1, #5
   35860:	bl	123d4 <strcmp@plt>
   35864:	cmp	r0, #0
   35868:	beq	35d9c <__assert_fail@plt+0x23320>
   3586c:	movw	r1, #9214	; 0x23fe
   35870:	mov	r0, r6
   35874:	movt	r1, #5
   35878:	bl	123d4 <strcmp@plt>
   3587c:	cmp	r0, #0
   35880:	bne	35744 <__assert_fail@plt+0x22cc8>
   35884:	b	35d9c <__assert_fail@plt+0x23320>
   35888:	ldr	r0, [sp, #28]
   3588c:	mov	r1, r8
   35890:	mov	r2, r6
   35894:	mov	r3, r7
   35898:	str	r9, [sp]
   3589c:	bl	12920 <sscanf@plt>
   358a0:	orr	r0, r0, #1
   358a4:	cmp	r0, #3
   358a8:	bne	35ddc <__assert_fail@plt+0x23360>
   358ac:	ldr	r0, [sp, #12]
   358b0:	ldr	r1, [sp, #28]
   358b4:	add	r0, r1, r0
   358b8:	mov	r1, #32
   358bc:	mov	r5, r0
   358c0:	bl	12794 <strchr@plt>
   358c4:	cmp	r0, #0
   358c8:	beq	35dcc <__assert_fail@plt+0x23350>
   358cc:	mov	r6, r0
   358d0:	mov	r4, #0
   358d4:	mov	r1, #32
   358d8:	strb	r4, [r6], #1
   358dc:	mov	r0, r6
   358e0:	bl	12794 <strchr@plt>
   358e4:	cmp	r0, #0
   358e8:	beq	35dcc <__assert_fail@plt+0x23350>
   358ec:	movw	r1, #9104	; 0x2390
   358f0:	strb	r4, [r0], #1
   358f4:	movt	r1, #5
   358f8:	bl	49bf8 <__assert_fail@plt+0x3717c>
   358fc:	cmp	r0, #0
   35900:	beq	35dcc <__assert_fail@plt+0x23350>
   35904:	add	sl, r0, #3
   35908:	mov	r1, #32
   3590c:	mov	r0, sl
   35910:	bl	12794 <strchr@plt>
   35914:	cmp	r0, #0
   35918:	beq	35718 <__assert_fail@plt+0x22c9c>
   3591c:	mov	r9, r0
   35920:	mov	r4, #0
   35924:	mov	r1, #32
   35928:	strb	r4, [r9], #1
   3592c:	mov	r0, r9
   35930:	bl	12794 <strchr@plt>
   35934:	cmp	r0, #0
   35938:	beq	35718 <__assert_fail@plt+0x22c9c>
   3593c:	strb	r4, [r0]
   35940:	mov	r0, r9
   35944:	bl	12788 <strlen@plt>
   35948:	adds	r0, r0, #1
   3594c:	mov	r8, r5
   35950:	beq	359d0 <__assert_fail@plt+0x22f54>
   35954:	mov	r2, #0
   35958:	mov	r1, r9
   3595c:	ldrb	r3, [r9, r2]
   35960:	add	r7, r2, #4
   35964:	cmp	r7, r0
   35968:	bcs	359c0 <__assert_fail@plt+0x22f44>
   3596c:	cmp	r3, #92	; 0x5c
   35970:	bne	359c0 <__assert_fail@plt+0x22f44>
   35974:	add	r7, r9, r2
   35978:	ldrb	r5, [r7, #1]
   3597c:	and	r4, r5, #252	; 0xfc
   35980:	cmp	r4, #48	; 0x30
   35984:	bne	359c0 <__assert_fail@plt+0x22f44>
   35988:	ldrb	r4, [r7, #2]
   3598c:	and	r7, r4, #248	; 0xf8
   35990:	cmp	r7, #48	; 0x30
   35994:	bne	359c0 <__assert_fail@plt+0x22f44>
   35998:	add	ip, r2, #3
   3599c:	ldrb	lr, [r9, ip]
   359a0:	and	r7, lr, #248	; 0xf8
   359a4:	cmp	r7, #48	; 0x30
   359a8:	bne	359c0 <__assert_fail@plt+0x22f44>
   359ac:	lsl	r2, r5, #6
   359b0:	add	r2, r2, r4, lsl #3
   359b4:	add	r2, r2, lr
   359b8:	add	r3, r2, #80	; 0x50
   359bc:	mov	r2, ip
   359c0:	add	r2, r2, #1
   359c4:	strb	r3, [r1], #1
   359c8:	cmp	r2, r0
   359cc:	bcc	3595c <__assert_fail@plt+0x22ee0>
   359d0:	mov	r0, r6
   359d4:	bl	12788 <strlen@plt>
   359d8:	adds	r0, r0, #1
   359dc:	beq	35a5c <__assert_fail@plt+0x22fe0>
   359e0:	mov	r2, #0
   359e4:	mov	r1, r6
   359e8:	ldrb	r3, [r6, r2]
   359ec:	add	r7, r2, #4
   359f0:	cmp	r7, r0
   359f4:	bcs	35a4c <__assert_fail@plt+0x22fd0>
   359f8:	cmp	r3, #92	; 0x5c
   359fc:	bne	35a4c <__assert_fail@plt+0x22fd0>
   35a00:	add	r7, r6, r2
   35a04:	ldrb	r5, [r7, #1]
   35a08:	and	r4, r5, #252	; 0xfc
   35a0c:	cmp	r4, #48	; 0x30
   35a10:	bne	35a4c <__assert_fail@plt+0x22fd0>
   35a14:	ldrb	r4, [r7, #2]
   35a18:	and	r7, r4, #248	; 0xf8
   35a1c:	cmp	r7, #48	; 0x30
   35a20:	bne	35a4c <__assert_fail@plt+0x22fd0>
   35a24:	add	ip, r2, #3
   35a28:	ldrb	lr, [r6, ip]
   35a2c:	and	r7, lr, #248	; 0xf8
   35a30:	cmp	r7, #48	; 0x30
   35a34:	bne	35a4c <__assert_fail@plt+0x22fd0>
   35a38:	lsl	r2, r5, #6
   35a3c:	add	r2, r2, r4, lsl #3
   35a40:	add	r2, r2, lr
   35a44:	add	r3, r2, #80	; 0x50
   35a48:	mov	r2, ip
   35a4c:	add	r2, r2, #1
   35a50:	strb	r3, [r1], #1
   35a54:	cmp	r2, r0
   35a58:	bcc	359e8 <__assert_fail@plt+0x22f6c>
   35a5c:	mov	r0, r8
   35a60:	bl	12788 <strlen@plt>
   35a64:	adds	r0, r0, #1
   35a68:	beq	35ae8 <__assert_fail@plt+0x2306c>
   35a6c:	mov	r2, #0
   35a70:	mov	r1, r8
   35a74:	ldrb	r3, [r8, r2]
   35a78:	add	r7, r2, #4
   35a7c:	cmp	r7, r0
   35a80:	bcs	35ad8 <__assert_fail@plt+0x2305c>
   35a84:	cmp	r3, #92	; 0x5c
   35a88:	bne	35ad8 <__assert_fail@plt+0x2305c>
   35a8c:	add	r7, r8, r2
   35a90:	ldrb	r5, [r7, #1]
   35a94:	and	r4, r5, #252	; 0xfc
   35a98:	cmp	r4, #48	; 0x30
   35a9c:	bne	35ad8 <__assert_fail@plt+0x2305c>
   35aa0:	ldrb	r4, [r7, #2]
   35aa4:	and	r7, r4, #248	; 0xf8
   35aa8:	cmp	r7, #48	; 0x30
   35aac:	bne	35ad8 <__assert_fail@plt+0x2305c>
   35ab0:	add	ip, r2, #3
   35ab4:	ldrb	lr, [r8, ip]
   35ab8:	and	r7, lr, #248	; 0xf8
   35abc:	cmp	r7, #48	; 0x30
   35ac0:	bne	35ad8 <__assert_fail@plt+0x2305c>
   35ac4:	lsl	r2, r5, #6
   35ac8:	add	r2, r2, r4, lsl #3
   35acc:	add	r2, r2, lr
   35ad0:	add	r3, r2, #80	; 0x50
   35ad4:	mov	r2, ip
   35ad8:	add	r2, r2, #1
   35adc:	strb	r3, [r1], #1
   35ae0:	cmp	r2, r0
   35ae4:	bcc	35a74 <__assert_fail@plt+0x22ff8>
   35ae8:	mov	r0, sl
   35aec:	bl	12788 <strlen@plt>
   35af0:	adds	r0, r0, #1
   35af4:	beq	35b74 <__assert_fail@plt+0x230f8>
   35af8:	mov	r2, #0
   35afc:	mov	r1, sl
   35b00:	ldrb	r3, [sl, r2]
   35b04:	add	r7, r2, #4
   35b08:	cmp	r7, r0
   35b0c:	bcs	35b64 <__assert_fail@plt+0x230e8>
   35b10:	cmp	r3, #92	; 0x5c
   35b14:	bne	35b64 <__assert_fail@plt+0x230e8>
   35b18:	add	r7, sl, r2
   35b1c:	ldrb	r5, [r7, #1]
   35b20:	and	r4, r5, #252	; 0xfc
   35b24:	cmp	r4, #48	; 0x30
   35b28:	bne	35b64 <__assert_fail@plt+0x230e8>
   35b2c:	ldrb	r4, [r7, #2]
   35b30:	and	r7, r4, #248	; 0xf8
   35b34:	cmp	r7, #48	; 0x30
   35b38:	bne	35b64 <__assert_fail@plt+0x230e8>
   35b3c:	add	ip, r2, #3
   35b40:	ldrb	lr, [sl, ip]
   35b44:	and	r7, lr, #248	; 0xf8
   35b48:	cmp	r7, #48	; 0x30
   35b4c:	bne	35b64 <__assert_fail@plt+0x230e8>
   35b50:	lsl	r2, r5, #6
   35b54:	add	r2, r2, r4, lsl #3
   35b58:	add	r2, r2, lr
   35b5c:	add	r3, r2, #80	; 0x50
   35b60:	mov	r2, ip
   35b64:	add	r2, r2, #1
   35b68:	strb	r3, [r1], #1
   35b6c:	cmp	r2, r0
   35b70:	bcc	35b00 <__assert_fail@plt+0x23084>
   35b74:	mov	r0, #32
   35b78:	bl	309ec <__assert_fail@plt+0x1df70>
   35b7c:	mov	r7, r0
   35b80:	mov	r0, r9
   35b84:	bl	30f0c <__assert_fail@plt+0x1e490>
   35b88:	str	r0, [r7]
   35b8c:	mov	r0, r6
   35b90:	bl	30f0c <__assert_fail@plt+0x1e490>
   35b94:	str	r0, [r7, #4]
   35b98:	mov	r0, r8
   35b9c:	bl	30f0c <__assert_fail@plt+0x1e490>
   35ba0:	str	r0, [r7, #8]
   35ba4:	mov	r0, sl
   35ba8:	bl	30f0c <__assert_fail@plt+0x1e490>
   35bac:	str	r0, [r7, #12]
   35bb0:	mov	r6, r0
   35bb4:	ldr	r2, [sp, #20]
   35bb8:	ldrb	r0, [r7, #24]
   35bbc:	mov	r3, r2
   35bc0:	orr	r4, r0, #4
   35bc4:	ldr	r0, [sp, #16]
   35bc8:	bfc	r3, #0, #12
   35bcc:	strb	r4, [r7, #24]
   35bd0:	bic	r1, r0, #255	; 0xff
   35bd4:	uxtb	r0, r0
   35bd8:	bfi	r0, r2, #8, #12
   35bdc:	orr	r3, r3, r1, lsr #20
   35be0:	orr	r0, r0, r1, lsl #12
   35be4:	movw	r1, #9108	; 0x2394
   35be8:	str	r3, [r7, #20]
   35bec:	str	r0, [r7, #16]
   35bf0:	mov	r0, r6
   35bf4:	movt	r1, #5
   35bf8:	bl	123d4 <strcmp@plt>
   35bfc:	cmp	r0, #0
   35c00:	mov	r8, #1
   35c04:	mov	r0, #1
   35c08:	beq	35d74 <__assert_fail@plt+0x232f8>
   35c0c:	movw	r1, #9115	; 0x239b
   35c10:	mov	r0, r6
   35c14:	movt	r1, #5
   35c18:	bl	123d4 <strcmp@plt>
   35c1c:	cmp	r0, #0
   35c20:	mov	r0, #1
   35c24:	beq	35d74 <__assert_fail@plt+0x232f8>
   35c28:	movw	r1, #9120	; 0x23a0
   35c2c:	mov	r0, r6
   35c30:	movt	r1, #5
   35c34:	bl	123d4 <strcmp@plt>
   35c38:	cmp	r0, #0
   35c3c:	mov	r0, #1
   35c40:	beq	35d74 <__assert_fail@plt+0x232f8>
   35c44:	movw	r1, #9126	; 0x23a6
   35c48:	mov	r0, r6
   35c4c:	movt	r1, #5
   35c50:	bl	123d4 <strcmp@plt>
   35c54:	cmp	r0, #0
   35c58:	mov	r0, #1
   35c5c:	beq	35d74 <__assert_fail@plt+0x232f8>
   35c60:	movw	r1, #9134	; 0x23ae
   35c64:	mov	r0, r6
   35c68:	movt	r1, #5
   35c6c:	bl	123d4 <strcmp@plt>
   35c70:	cmp	r0, #0
   35c74:	mov	r0, #1
   35c78:	beq	35d74 <__assert_fail@plt+0x232f8>
   35c7c:	movw	r1, #9141	; 0x23b5
   35c80:	mov	r0, r6
   35c84:	movt	r1, #5
   35c88:	bl	123d4 <strcmp@plt>
   35c8c:	cmp	r0, #0
   35c90:	mov	r0, #1
   35c94:	beq	35d74 <__assert_fail@plt+0x232f8>
   35c98:	movw	r1, #9149	; 0x23bd
   35c9c:	mov	r0, r6
   35ca0:	movt	r1, #5
   35ca4:	bl	123d4 <strcmp@plt>
   35ca8:	cmp	r0, #0
   35cac:	mov	r0, #1
   35cb0:	beq	35d74 <__assert_fail@plt+0x232f8>
   35cb4:	movw	r1, #9161	; 0x23c9
   35cb8:	mov	r0, r6
   35cbc:	movt	r1, #5
   35cc0:	bl	123d4 <strcmp@plt>
   35cc4:	cmp	r0, #0
   35cc8:	mov	r0, #1
   35ccc:	beq	35d74 <__assert_fail@plt+0x232f8>
   35cd0:	movw	r1, #9168	; 0x23d0
   35cd4:	mov	r0, r6
   35cd8:	movt	r1, #5
   35cdc:	bl	123d4 <strcmp@plt>
   35ce0:	cmp	r0, #0
   35ce4:	mov	r0, #1
   35ce8:	beq	35d74 <__assert_fail@plt+0x232f8>
   35cec:	movw	r1, #9179	; 0x23db
   35cf0:	mov	r0, r6
   35cf4:	movt	r1, #5
   35cf8:	bl	123d4 <strcmp@plt>
   35cfc:	cmp	r0, #0
   35d00:	mov	r0, #1
   35d04:	beq	35d74 <__assert_fail@plt+0x232f8>
   35d08:	movw	r1, #9185	; 0x23e1
   35d0c:	mov	r0, r6
   35d10:	movt	r1, #5
   35d14:	bl	123d4 <strcmp@plt>
   35d18:	cmp	r0, #0
   35d1c:	mov	r0, #1
   35d20:	beq	35d74 <__assert_fail@plt+0x232f8>
   35d24:	movw	r1, #9191	; 0x23e7
   35d28:	mov	r0, r6
   35d2c:	movt	r1, #5
   35d30:	bl	123d4 <strcmp@plt>
   35d34:	cmp	r0, #0
   35d38:	mov	r0, #1
   35d3c:	beq	35d74 <__assert_fail@plt+0x232f8>
   35d40:	movw	r1, #61417	; 0xefe9
   35d44:	mov	r0, r6
   35d48:	movt	r1, #4
   35d4c:	bl	123d4 <strcmp@plt>
   35d50:	cmp	r0, #0
   35d54:	mov	r0, #1
   35d58:	beq	35d74 <__assert_fail@plt+0x232f8>
   35d5c:	movw	r1, #9198	; 0x23ee
   35d60:	mov	r0, r6
   35d64:	movt	r1, #5
   35d68:	bl	123d4 <strcmp@plt>
   35d6c:	clz	r0, r0
   35d70:	lsr	r0, r0, #5
   35d74:	bic	r1, r4, #1
   35d78:	orr	r5, r1, r0
   35d7c:	mov	r1, #58	; 0x3a
   35d80:	strb	r5, [r7, #24]
   35d84:	ldr	r4, [r7]
   35d88:	mov	r0, r4
   35d8c:	bl	12794 <strchr@plt>
   35d90:	ldr	sl, [sp, #4]
   35d94:	cmp	r0, #0
   35d98:	beq	35730 <__assert_fail@plt+0x22cb4>
   35d9c:	add	r6, sp, #20
   35da0:	and	r0, r5, #253	; 0xfd
   35da4:	add	r9, sp, #12
   35da8:	orr	r0, r0, r8, lsl #1
   35dac:	movw	r8, #9087	; 0x237f
   35db0:	strb	r0, [r7, #24]
   35db4:	ldr	r0, [sp, #8]
   35db8:	movt	r8, #5
   35dbc:	str	r7, [r0]
   35dc0:	add	r0, r7, #28
   35dc4:	str	r0, [sp, #8]
   35dc8:	b	35dd0 <__assert_fail@plt+0x23354>
   35dcc:	add	r6, sp, #20
   35dd0:	add	r7, sp, #16
   35dd4:	add	r5, sp, #28
   35dd8:	add	r4, sp, #24
   35ddc:	mov	r0, r5
   35de0:	mov	r1, r4
   35de4:	mov	r2, #10
   35de8:	mov	r3, sl
   35dec:	bl	123a4 <__getdelim@plt>
   35df0:	cmn	r0, #1
   35df4:	bne	35888 <__assert_fail@plt+0x22e0c>
   35df8:	b	361e8 <__assert_fail@plt+0x2376c>
   35dfc:	movw	r0, #9275	; 0x243b
   35e00:	movw	r1, #3092	; 0xc14
   35e04:	movt	r0, #5
   35e08:	movt	r1, #5
   35e0c:	bl	129bc <setmntent@plt>
   35e10:	cmp	r0, #0
   35e14:	beq	362a8 <__assert_fail@plt+0x2382c>
   35e18:	mov	r8, r0
   35e1c:	bl	12680 <getmntent@plt>
   35e20:	cmp	r0, #0
   35e24:	beq	362b8 <__assert_fail@plt+0x2383c>
   35e28:	mov	r5, r0
   35e2c:	add	sl, sp, #32
   35e30:	b	35f88 <__assert_fail@plt+0x2350c>
   35e34:	ldrb	r0, [r5]
   35e38:	cmp	r0, #47	; 0x2f
   35e3c:	ldrbeq	r0, [r5, #1]
   35e40:	cmpeq	r0, #47	; 0x2f
   35e44:	beq	35f3c <__assert_fail@plt+0x234c0>
   35e48:	movw	r1, #9219	; 0x2403
   35e4c:	mov	r0, r7
   35e50:	movt	r1, #5
   35e54:	bl	123d4 <strcmp@plt>
   35e58:	cmp	r0, #0
   35e5c:	beq	36198 <__assert_fail@plt+0x2371c>
   35e60:	movw	r1, #61376	; 0xefc0
   35e64:	mov	r0, r7
   35e68:	movt	r1, #4
   35e6c:	bl	123d4 <strcmp@plt>
   35e70:	cmp	r0, #0
   35e74:	beq	36198 <__assert_fail@plt+0x2371c>
   35e78:	movw	r1, #9224	; 0x2408
   35e7c:	mov	r0, r7
   35e80:	movt	r1, #5
   35e84:	bl	123d4 <strcmp@plt>
   35e88:	cmp	r0, #0
   35e8c:	beq	36198 <__assert_fail@plt+0x2371c>
   35e90:	movw	r1, #9229	; 0x240d
   35e94:	mov	r0, r7
   35e98:	movt	r1, #5
   35e9c:	bl	123d4 <strcmp@plt>
   35ea0:	cmp	r0, #0
   35ea4:	beq	36198 <__assert_fail@plt+0x2371c>
   35ea8:	movw	r1, #9240	; 0x2418
   35eac:	mov	r0, r7
   35eb0:	movt	r1, #5
   35eb4:	bl	123d4 <strcmp@plt>
   35eb8:	cmp	r0, #0
   35ebc:	beq	36198 <__assert_fail@plt+0x2371c>
   35ec0:	movw	r1, #9246	; 0x241e
   35ec4:	mov	r0, r7
   35ec8:	movt	r1, #5
   35ecc:	bl	123d4 <strcmp@plt>
   35ed0:	cmp	r0, #0
   35ed4:	beq	36198 <__assert_fail@plt+0x2371c>
   35ed8:	movw	r1, #9251	; 0x2423
   35edc:	mov	r0, r7
   35ee0:	movt	r1, #5
   35ee4:	bl	123d4 <strcmp@plt>
   35ee8:	cmp	r0, #0
   35eec:	beq	36198 <__assert_fail@plt+0x2371c>
   35ef0:	movw	r1, #9257	; 0x2429
   35ef4:	mov	r0, r7
   35ef8:	movt	r1, #5
   35efc:	bl	123d4 <strcmp@plt>
   35f00:	cmp	r0, #0
   35f04:	beq	36198 <__assert_fail@plt+0x2371c>
   35f08:	movw	r1, #9263	; 0x242f
   35f0c:	mov	r0, r7
   35f10:	movt	r1, #5
   35f14:	bl	123d4 <strcmp@plt>
   35f18:	cmp	r0, #0
   35f1c:	beq	36198 <__assert_fail@plt+0x2371c>
   35f20:	movw	r0, #9268	; 0x2434
   35f24:	mov	r1, r5
   35f28:	movt	r0, #5
   35f2c:	bl	123d4 <strcmp@plt>
   35f30:	clz	r0, r0
   35f34:	lsr	r6, r0, #5
   35f38:	b	36198 <__assert_fail@plt+0x2371c>
   35f3c:	movw	r1, #9203	; 0x23f3
   35f40:	mov	r0, r7
   35f44:	movt	r1, #5
   35f48:	bl	123d4 <strcmp@plt>
   35f4c:	cmp	r0, #0
   35f50:	beq	36198 <__assert_fail@plt+0x2371c>
   35f54:	movw	r1, #9209	; 0x23f9
   35f58:	mov	r0, r7
   35f5c:	movt	r1, #5
   35f60:	bl	123d4 <strcmp@plt>
   35f64:	cmp	r0, #0
   35f68:	beq	36198 <__assert_fail@plt+0x2371c>
   35f6c:	movw	r1, #9214	; 0x23fe
   35f70:	mov	r0, r7
   35f74:	movt	r1, #5
   35f78:	bl	123d4 <strcmp@plt>
   35f7c:	cmp	r0, #0
   35f80:	bne	35e48 <__assert_fail@plt+0x233cc>
   35f84:	b	36198 <__assert_fail@plt+0x2371c>
   35f88:	movw	r1, #9285	; 0x2445
   35f8c:	mov	r0, r5
   35f90:	movt	r1, #5
   35f94:	bl	1262c <hasmntopt@plt>
   35f98:	str	r0, [sp, #8]
   35f9c:	mov	r0, #32
   35fa0:	bl	309ec <__assert_fail@plt+0x1df70>
   35fa4:	mov	r9, r0
   35fa8:	ldr	r0, [r5]
   35fac:	bl	30f0c <__assert_fail@plt+0x1e490>
   35fb0:	str	r0, [r9]
   35fb4:	ldr	r0, [r5, #4]
   35fb8:	bl	30f0c <__assert_fail@plt+0x1e490>
   35fbc:	str	r0, [r9, #4]
   35fc0:	mov	r0, #0
   35fc4:	str	r0, [r9, #8]
   35fc8:	ldr	r0, [r5, #8]
   35fcc:	bl	30f0c <__assert_fail@plt+0x1e490>
   35fd0:	str	r0, [r9, #12]
   35fd4:	mov	r7, r0
   35fd8:	movw	r1, #9108	; 0x2394
   35fdc:	ldrb	r0, [r9, #24]
   35fe0:	movt	r1, #5
   35fe4:	orr	r4, r0, #4
   35fe8:	mov	r0, r7
   35fec:	strb	r4, [r9, #24]
   35ff0:	bl	123d4 <strcmp@plt>
   35ff4:	cmp	r0, #0
   35ff8:	mov	r6, #1
   35ffc:	mov	r0, #1
   36000:	beq	36174 <__assert_fail@plt+0x236f8>
   36004:	movw	r1, #9115	; 0x239b
   36008:	mov	r0, r7
   3600c:	movt	r1, #5
   36010:	bl	123d4 <strcmp@plt>
   36014:	cmp	r0, #0
   36018:	mov	r0, #1
   3601c:	beq	36174 <__assert_fail@plt+0x236f8>
   36020:	movw	r1, #9120	; 0x23a0
   36024:	mov	r0, r7
   36028:	movt	r1, #5
   3602c:	bl	123d4 <strcmp@plt>
   36030:	cmp	r0, #0
   36034:	mov	r0, #1
   36038:	beq	36174 <__assert_fail@plt+0x236f8>
   3603c:	movw	r1, #9126	; 0x23a6
   36040:	mov	r0, r7
   36044:	movt	r1, #5
   36048:	bl	123d4 <strcmp@plt>
   3604c:	cmp	r0, #0
   36050:	mov	r0, #1
   36054:	beq	36174 <__assert_fail@plt+0x236f8>
   36058:	movw	r1, #9134	; 0x23ae
   3605c:	mov	r0, r7
   36060:	movt	r1, #5
   36064:	bl	123d4 <strcmp@plt>
   36068:	cmp	r0, #0
   3606c:	mov	r0, #1
   36070:	beq	36174 <__assert_fail@plt+0x236f8>
   36074:	movw	r1, #9141	; 0x23b5
   36078:	mov	r0, r7
   3607c:	movt	r1, #5
   36080:	bl	123d4 <strcmp@plt>
   36084:	cmp	r0, #0
   36088:	mov	r0, #1
   3608c:	beq	36174 <__assert_fail@plt+0x236f8>
   36090:	movw	r1, #9149	; 0x23bd
   36094:	mov	r0, r7
   36098:	movt	r1, #5
   3609c:	bl	123d4 <strcmp@plt>
   360a0:	cmp	r0, #0
   360a4:	mov	r0, #1
   360a8:	beq	36174 <__assert_fail@plt+0x236f8>
   360ac:	movw	r1, #9161	; 0x23c9
   360b0:	mov	r0, r7
   360b4:	movt	r1, #5
   360b8:	bl	123d4 <strcmp@plt>
   360bc:	cmp	r0, #0
   360c0:	mov	r0, #1
   360c4:	beq	36174 <__assert_fail@plt+0x236f8>
   360c8:	movw	r1, #9168	; 0x23d0
   360cc:	mov	r0, r7
   360d0:	movt	r1, #5
   360d4:	bl	123d4 <strcmp@plt>
   360d8:	cmp	r0, #0
   360dc:	mov	r0, #1
   360e0:	beq	36174 <__assert_fail@plt+0x236f8>
   360e4:	movw	r1, #9179	; 0x23db
   360e8:	mov	r0, r7
   360ec:	movt	r1, #5
   360f0:	bl	123d4 <strcmp@plt>
   360f4:	cmp	r0, #0
   360f8:	mov	r0, #1
   360fc:	beq	36174 <__assert_fail@plt+0x236f8>
   36100:	movw	r1, #9185	; 0x23e1
   36104:	mov	r0, r7
   36108:	movt	r1, #5
   3610c:	bl	123d4 <strcmp@plt>
   36110:	cmp	r0, #0
   36114:	mov	r0, #1
   36118:	beq	36174 <__assert_fail@plt+0x236f8>
   3611c:	movw	r1, #9191	; 0x23e7
   36120:	mov	r0, r7
   36124:	movt	r1, #5
   36128:	bl	123d4 <strcmp@plt>
   3612c:	cmp	r0, #0
   36130:	mov	r0, #1
   36134:	beq	36174 <__assert_fail@plt+0x236f8>
   36138:	movw	r1, #61417	; 0xefe9
   3613c:	mov	r0, r7
   36140:	movt	r1, #4
   36144:	bl	123d4 <strcmp@plt>
   36148:	cmp	r0, #0
   3614c:	mov	r0, #1
   36150:	beq	36174 <__assert_fail@plt+0x236f8>
   36154:	movw	r1, #9198	; 0x23ee
   36158:	mov	r0, r7
   3615c:	movt	r1, #5
   36160:	bl	123d4 <strcmp@plt>
   36164:	ldr	r1, [sp, #8]
   36168:	orr	r0, r1, r0
   3616c:	clz	r0, r0
   36170:	lsr	r0, r0, #5
   36174:	bic	r1, r4, #1
   36178:	orr	r4, r1, r0
   3617c:	mov	r1, #58	; 0x3a
   36180:	strb	r4, [r9, #24]
   36184:	ldr	r5, [r9]
   36188:	mov	r0, r5
   3618c:	bl	12794 <strchr@plt>
   36190:	cmp	r0, #0
   36194:	beq	35e34 <__assert_fail@plt+0x233b8>
   36198:	mvn	r0, #0
   3619c:	str	r0, [r9, #16]
   361a0:	str	r0, [r9, #20]
   361a4:	and	r0, r4, #253	; 0xfd
   361a8:	orr	r0, r0, r6, lsl #1
   361ac:	strb	r0, [r9, #24]
   361b0:	mov	r0, r8
   361b4:	str	r9, [sl]
   361b8:	add	sl, r9, #28
   361bc:	bl	12680 <getmntent@plt>
   361c0:	mov	r5, r0
   361c4:	cmp	r0, #0
   361c8:	bne	35f88 <__assert_fail@plt+0x2350c>
   361cc:	mov	r0, r8
   361d0:	bl	128a8 <endmntent@plt>
   361d4:	cmp	r0, #0
   361d8:	bne	362cc <__assert_fail@plt+0x23850>
   361dc:	b	36230 <__assert_fail@plt+0x237b4>
   361e0:	add	r0, sp, #32
   361e4:	str	r0, [sp, #8]
   361e8:	ldr	r0, [sp, #28]
   361ec:	bl	32c40 <__assert_fail@plt+0x201c4>
   361f0:	ldrb	r0, [sl]
   361f4:	tst	r0, #32
   361f8:	bne	36214 <__assert_fail@plt+0x23798>
   361fc:	mov	r0, sl
   36200:	bl	12884 <fclose@plt>
   36204:	ldr	sl, [sp, #8]
   36208:	cmn	r0, #1
   3620c:	bne	362cc <__assert_fail@plt+0x23850>
   36210:	b	36230 <__assert_fail@plt+0x237b4>
   36214:	bl	127d0 <__errno_location@plt>
   36218:	ldr	r6, [r0]
   3621c:	mov	r5, r0
   36220:	mov	r0, sl
   36224:	bl	12884 <fclose@plt>
   36228:	ldr	sl, [sp, #8]
   3622c:	str	r6, [r5]
   36230:	bl	127d0 <__errno_location@plt>
   36234:	mov	r4, #0
   36238:	ldr	r8, [r0]
   3623c:	mov	r5, r0
   36240:	str	r4, [sl]
   36244:	ldr	r6, [sp, #32]
   36248:	cmp	r6, #0
   3624c:	beq	36298 <__assert_fail@plt+0x2381c>
   36250:	ldr	r0, [r6]
   36254:	ldr	r7, [r6, #28]
   36258:	bl	32c40 <__assert_fail@plt+0x201c4>
   3625c:	ldr	r0, [r6, #4]
   36260:	bl	32c40 <__assert_fail@plt+0x201c4>
   36264:	ldr	r0, [r6, #8]
   36268:	bl	32c40 <__assert_fail@plt+0x201c4>
   3626c:	ldrb	r0, [r6, #24]
   36270:	tst	r0, #4
   36274:	beq	36280 <__assert_fail@plt+0x23804>
   36278:	ldr	r0, [r6, #12]
   3627c:	bl	32c40 <__assert_fail@plt+0x201c4>
   36280:	mov	r0, r6
   36284:	bl	32c40 <__assert_fail@plt+0x201c4>
   36288:	cmp	r7, #0
   3628c:	mov	r6, r7
   36290:	str	r7, [sp, #32]
   36294:	bne	36250 <__assert_fail@plt+0x237d4>
   36298:	str	r8, [r5]
   3629c:	mov	r0, r4
   362a0:	sub	sp, fp, #28
   362a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   362a8:	mov	r4, #0
   362ac:	mov	r0, r4
   362b0:	sub	sp, fp, #28
   362b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   362b8:	add	sl, sp, #32
   362bc:	mov	r0, r8
   362c0:	bl	128a8 <endmntent@plt>
   362c4:	cmp	r0, #0
   362c8:	beq	36230 <__assert_fail@plt+0x237b4>
   362cc:	mov	r0, #0
   362d0:	str	r0, [sl]
   362d4:	ldr	r4, [sp, #32]
   362d8:	mov	r0, r4
   362dc:	sub	sp, fp, #28
   362e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   362e4:	push	{r4, sl, fp, lr}
   362e8:	add	fp, sp, #8
   362ec:	mov	r4, r0
   362f0:	ldr	r0, [r0]
   362f4:	bl	32c40 <__assert_fail@plt+0x201c4>
   362f8:	ldr	r0, [r4, #4]
   362fc:	bl	32c40 <__assert_fail@plt+0x201c4>
   36300:	ldr	r0, [r4, #8]
   36304:	bl	32c40 <__assert_fail@plt+0x201c4>
   36308:	ldrb	r0, [r4, #24]
   3630c:	tst	r0, #4
   36310:	beq	3631c <__assert_fail@plt+0x238a0>
   36314:	ldr	r0, [r4, #12]
   36318:	bl	32c40 <__assert_fail@plt+0x201c4>
   3631c:	mov	r0, r4
   36320:	pop	{r4, sl, fp, lr}
   36324:	b	32c40 <__assert_fail@plt+0x201c4>
   36328:	push	{fp, lr}
   3632c:	mov	fp, sp
   36330:	cmp	r0, #0
   36334:	beq	36350 <__assert_fail@plt+0x238d4>
   36338:	cmp	r1, #0
   3633c:	beq	3635c <__assert_fail@plt+0x238e0>
   36340:	cmn	r1, #1
   36344:	ble	36368 <__assert_fail@plt+0x238ec>
   36348:	pop	{fp, lr}
   3634c:	b	1256c <realloc@plt>
   36350:	mov	r0, r1
   36354:	pop	{fp, lr}
   36358:	b	35608 <__assert_fail@plt+0x22b8c>
   3635c:	bl	32c40 <__assert_fail@plt+0x201c4>
   36360:	mov	r0, #0
   36364:	pop	{fp, pc}
   36368:	bl	127d0 <__errno_location@plt>
   3636c:	mov	r1, #12
   36370:	str	r1, [r0]
   36374:	mov	r0, #0
   36378:	pop	{fp, pc}
   3637c:	cmp	r2, #0
   36380:	beq	363b0 <__assert_fail@plt+0x23934>
   36384:	mvn	r3, #0
   36388:	udiv	r3, r3, r2
   3638c:	cmp	r3, r1
   36390:	bcs	363b0 <__assert_fail@plt+0x23934>
   36394:	push	{fp, lr}
   36398:	mov	fp, sp
   3639c:	bl	127d0 <__errno_location@plt>
   363a0:	mov	r1, #12
   363a4:	str	r1, [r0]
   363a8:	mov	r0, #0
   363ac:	pop	{fp, pc}
   363b0:	mul	r1, r2, r1
   363b4:	b	36328 <__assert_fail@plt+0x238ac>
	...
   363c0:	push	{fp, lr}
   363c4:	mov	fp, sp
   363c8:	mov	lr, r0
   363cc:	movw	r0, #16064	; 0x3ec0
   363d0:	mov	ip, r1
   363d4:	ldrb	r1, [r2, #28]
   363d8:	movt	r0, #6
   363dc:	ldr	r3, [r0]
   363e0:	mov	r0, #16
   363e4:	and	r1, r1, #111	; 0x6f
   363e8:	and	r0, r0, r3, lsr #21
   363ec:	orr	r0, r1, r0
   363f0:	mov	r1, lr
   363f4:	orr	r0, r0, #128	; 0x80
   363f8:	strb	r0, [r2, #28]
   363fc:	mov	r0, r2
   36400:	mov	r2, ip
   36404:	bl	36440 <__assert_fail@plt+0x239c4>
   36408:	cmp	r0, #0
   3640c:	moveq	r0, #0
   36410:	popeq	{fp, pc}
   36414:	movw	r1, #9680	; 0x25d0
   36418:	mov	r2, #5
   3641c:	movt	r1, #5
   36420:	ldr	r0, [r1, r0, lsl #2]
   36424:	movw	r1, #9296	; 0x2450
   36428:	movt	r1, #5
   3642c:	add	r1, r1, r0
   36430:	mov	r0, #0
   36434:	pop	{fp, lr}
   36438:	b	1253c <dcgettext@plt>
   3643c:	nop	{0}
   36440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36444:	add	fp, sp, #28
   36448:	sub	sp, sp, #140	; 0x8c
   3644c:	mov	r9, r0
   36450:	mov	r0, #0
   36454:	mov	sl, r3
   36458:	mov	r7, r2
   3645c:	mov	r8, r1
   36460:	str	r0, [fp, #-52]	; 0xffffffcc
   36464:	str	r0, [r9, #8]
   36468:	str	r3, [r9, #12]
   3646c:	str	r0, [r9, #24]
   36470:	ldrb	r0, [r9, #28]
   36474:	and	r0, r0, #144	; 0x90
   36478:	strb	r0, [r9, #28]
   3647c:	ldr	r0, [r9, #4]
   36480:	ldr	r6, [r9]
   36484:	cmp	r0, #159	; 0x9f
   36488:	bls	36e18 <__assert_fail@plt+0x2439c>
   3648c:	mov	r0, #160	; 0xa0
   36490:	mov	r1, #0
   36494:	mov	r2, #160	; 0xa0
   36498:	str	r0, [r9, #8]
   3649c:	mov	r0, r6
   364a0:	bl	12800 <memset@plt>
   364a4:	mov	r0, #31
   364a8:	str	r0, [r6, #64]	; 0x40
   364ac:	movw	r0, #43689	; 0xaaa9
   364b0:	movt	r0, #2730	; 0xaaa
   364b4:	cmp	r7, r0
   364b8:	bhi	367d8 <__assert_fail@plt+0x23d5c>
   364bc:	add	r0, r7, #1
   364c0:	str	r0, [r6, #4]
   364c4:	str	r0, [sp, #28]
   364c8:	lsl	r0, r0, #3
   364cc:	bl	35608 <__assert_fail@plt+0x22b8c>
   364d0:	str	r0, [r6]
   364d4:	mov	r0, #1
   364d8:	mov	r4, r0
   364dc:	lsl	r0, r0, #1
   364e0:	cmp	r4, r7
   364e4:	bls	364d8 <__assert_fail@plt+0x23a5c>
   364e8:	mov	r0, #12
   364ec:	mov	r1, r4
   364f0:	bl	325e0 <__assert_fail@plt+0x1fb64>
   364f4:	str	r0, [r6, #32]
   364f8:	sub	r0, r4, #1
   364fc:	str	r0, [r6, #68]	; 0x44
   36500:	bl	12620 <__ctype_get_mb_cur_max@plt>
   36504:	str	r0, [r6, #92]	; 0x5c
   36508:	mov	r0, #14
   3650c:	bl	12908 <nl_langinfo@plt>
   36510:	ldrb	r1, [r0]
   36514:	orr	r1, r1, #32
   36518:	cmp	r1, #117	; 0x75
   3651c:	bne	36568 <__assert_fail@plt+0x23aec>
   36520:	ldrb	r1, [r0, #1]
   36524:	orr	r1, r1, #32
   36528:	cmp	r1, #116	; 0x74
   3652c:	bne	36568 <__assert_fail@plt+0x23aec>
   36530:	ldrb	r1, [r0, #2]
   36534:	orr	r1, r1, #32
   36538:	cmp	r1, #102	; 0x66
   3653c:	bne	36568 <__assert_fail@plt+0x23aec>
   36540:	ldrb	r1, [r0, #3]!
   36544:	cmp	r1, #45	; 0x2d
   36548:	movw	r1, #9796	; 0x2644
   3654c:	addeq	r0, r0, #1
   36550:	movt	r1, #5
   36554:	bl	123d4 <strcmp@plt>
   36558:	cmp	r0, #0
   3655c:	ldrbeq	r0, [r6, #88]	; 0x58
   36560:	orreq	r0, r0, #4
   36564:	strbeq	r0, [r6, #88]	; 0x58
   36568:	ldrb	r0, [r6, #88]	; 0x58
   3656c:	and	r1, r0, #247	; 0xf7
   36570:	strb	r1, [r6, #88]	; 0x58
   36574:	ldr	r1, [r6, #92]	; 0x5c
   36578:	cmp	r1, #2
   3657c:	blt	367c4 <__assert_fail@plt+0x23d48>
   36580:	tst	r0, #4
   36584:	bne	367b8 <__assert_fail@plt+0x23d3c>
   36588:	mov	r0, #32
   3658c:	mov	r1, #1
   36590:	mov	r5, #1
   36594:	bl	325e0 <__assert_fail@plt+0x1fb64>
   36598:	cmp	r0, #0
   3659c:	str	r0, [r6, #60]	; 0x3c
   365a0:	beq	367d8 <__assert_fail@plt+0x23d5c>
   365a4:	mov	r4, #0
   365a8:	mov	r0, r4
   365ac:	bl	12830 <btowc@plt>
   365b0:	cmn	r0, #1
   365b4:	ldrne	r1, [r6, #60]	; 0x3c
   365b8:	ldrne	r2, [r1]
   365bc:	orrne	r2, r2, r5, lsl r4
   365c0:	strne	r2, [r1]
   365c4:	cmp	r4, r0
   365c8:	add	r4, r4, #1
   365cc:	ldrbne	r0, [r6, #88]	; 0x58
   365d0:	orrne	r0, r0, #8
   365d4:	strbne	r0, [r6, #88]	; 0x58
   365d8:	cmp	r4, #32
   365dc:	bne	365a8 <__assert_fail@plt+0x23b2c>
   365e0:	mov	r4, #32
   365e4:	mov	r5, #1
   365e8:	mov	r0, r4
   365ec:	bl	12830 <btowc@plt>
   365f0:	cmn	r0, #1
   365f4:	ldrne	r2, [r6, #60]	; 0x3c
   365f8:	subne	r1, r4, #32
   365fc:	ldrne	r3, [r2, #4]
   36600:	orrne	r1, r3, r5, lsl r1
   36604:	strne	r1, [r2, #4]
   36608:	cmp	r0, r4
   3660c:	sub	r1, r4, #31
   36610:	ldrbne	r0, [r6, #88]	; 0x58
   36614:	orrne	r0, r0, #8
   36618:	strbne	r0, [r6, #88]	; 0x58
   3661c:	add	r0, r4, #1
   36620:	cmp	r1, #32
   36624:	mov	r4, r0
   36628:	bne	365e8 <__assert_fail@plt+0x23b6c>
   3662c:	mov	r4, #64	; 0x40
   36630:	mov	r5, #1
   36634:	mov	r0, r4
   36638:	bl	12830 <btowc@plt>
   3663c:	cmn	r0, #1
   36640:	ldrne	r2, [r6, #60]	; 0x3c
   36644:	subne	r1, r4, #64	; 0x40
   36648:	ldrne	r3, [r2, #8]
   3664c:	orrne	r1, r3, r5, lsl r1
   36650:	strne	r1, [r2, #8]
   36654:	cmp	r0, r4
   36658:	sub	r1, r4, #63	; 0x3f
   3665c:	ldrbne	r0, [r6, #88]	; 0x58
   36660:	orrne	r0, r0, #8
   36664:	strbne	r0, [r6, #88]	; 0x58
   36668:	add	r0, r4, #1
   3666c:	cmp	r1, #32
   36670:	mov	r4, r0
   36674:	bne	36634 <__assert_fail@plt+0x23bb8>
   36678:	mov	r4, #96	; 0x60
   3667c:	mov	r5, #1
   36680:	mov	r0, r4
   36684:	bl	12830 <btowc@plt>
   36688:	cmn	r0, #1
   3668c:	ldrne	r2, [r6, #60]	; 0x3c
   36690:	subne	r1, r4, #96	; 0x60
   36694:	ldrne	r3, [r2, #12]
   36698:	orrne	r1, r3, r5, lsl r1
   3669c:	strne	r1, [r2, #12]
   366a0:	cmp	r0, r4
   366a4:	sub	r1, r4, #95	; 0x5f
   366a8:	ldrbne	r0, [r6, #88]	; 0x58
   366ac:	orrne	r0, r0, #8
   366b0:	strbne	r0, [r6, #88]	; 0x58
   366b4:	add	r0, r4, #1
   366b8:	cmp	r1, #32
   366bc:	mov	r4, r0
   366c0:	bne	36680 <__assert_fail@plt+0x23c04>
   366c4:	mov	r4, #128	; 0x80
   366c8:	mov	r5, #1
   366cc:	mov	r0, r4
   366d0:	bl	12830 <btowc@plt>
   366d4:	cmn	r0, #1
   366d8:	ldrne	r1, [r6, #60]	; 0x3c
   366dc:	subne	r0, r4, #128	; 0x80
   366e0:	ldrne	r2, [r1, #16]
   366e4:	orrne	r0, r2, r5, lsl r0
   366e8:	strne	r0, [r1, #16]
   366ec:	sub	r1, r4, #127	; 0x7f
   366f0:	add	r0, r4, #1
   366f4:	cmp	r1, #32
   366f8:	mov	r4, r0
   366fc:	bne	366cc <__assert_fail@plt+0x23c50>
   36700:	mov	r4, #160	; 0xa0
   36704:	mov	r5, #1
   36708:	mov	r0, r4
   3670c:	bl	12830 <btowc@plt>
   36710:	cmn	r0, #1
   36714:	ldrne	r1, [r6, #60]	; 0x3c
   36718:	subne	r0, r4, #160	; 0xa0
   3671c:	ldrne	r2, [r1, #20]
   36720:	orrne	r0, r2, r5, lsl r0
   36724:	strne	r0, [r1, #20]
   36728:	sub	r1, r4, #159	; 0x9f
   3672c:	add	r0, r4, #1
   36730:	cmp	r1, #32
   36734:	mov	r4, r0
   36738:	bne	36708 <__assert_fail@plt+0x23c8c>
   3673c:	mov	r4, #192	; 0xc0
   36740:	mov	r5, #1
   36744:	mov	r0, r4
   36748:	bl	12830 <btowc@plt>
   3674c:	cmn	r0, #1
   36750:	ldrne	r1, [r6, #60]	; 0x3c
   36754:	subne	r0, r4, #192	; 0xc0
   36758:	ldrne	r2, [r1, #24]
   3675c:	orrne	r0, r2, r5, lsl r0
   36760:	strne	r0, [r1, #24]
   36764:	sub	r1, r4, #191	; 0xbf
   36768:	add	r0, r4, #1
   3676c:	cmp	r1, #32
   36770:	mov	r4, r0
   36774:	bne	36744 <__assert_fail@plt+0x23cc8>
   36778:	mov	r4, #224	; 0xe0
   3677c:	mov	r5, #1
   36780:	mov	r0, r4
   36784:	bl	12830 <btowc@plt>
   36788:	cmn	r0, #1
   3678c:	ldrne	r1, [r6, #60]	; 0x3c
   36790:	subne	r0, r4, #224	; 0xe0
   36794:	ldrne	r2, [r1, #28]
   36798:	orrne	r0, r2, r5, lsl r0
   3679c:	strne	r0, [r1, #28]
   367a0:	sub	r1, r4, #223	; 0xdf
   367a4:	add	r0, r4, #1
   367a8:	cmp	r1, #32
   367ac:	mov	r4, r0
   367b0:	bne	36780 <__assert_fail@plt+0x23d04>
   367b4:	b	367c4 <__assert_fail@plt+0x23d48>
   367b8:	movw	r0, #9748	; 0x2614
   367bc:	movt	r0, #5
   367c0:	str	r0, [r6, #60]	; 0x3c
   367c4:	ldr	r0, [r6]
   367c8:	cmp	r0, #0
   367cc:	ldrne	r0, [r6, #32]
   367d0:	cmpne	r0, #0
   367d4:	bne	36800 <__assert_fail@plt+0x23d84>
   367d8:	mov	r4, #12
   367dc:	mov	r0, r6
   367e0:	str	r4, [fp, #-52]	; 0xffffffcc
   367e4:	bl	3868c <__assert_fail@plt+0x25c10>
   367e8:	mov	r0, #0
   367ec:	str	r0, [r9]
   367f0:	str	r0, [r9, #4]
   367f4:	mov	r0, r4
   367f8:	sub	sp, fp, #28
   367fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36800:	movw	r0, #9352	; 0x2488
   36804:	movw	r1, #10276	; 0x2824
   36808:	mov	r4, #0
   3680c:	movt	r0, #1
   36810:	movt	r1, #1
   36814:	str	r4, [fp, #-52]	; 0xffffffcc
   36818:	orrs	r0, r1, r0
   3681c:	str	r0, [sp, #8]
   36820:	beq	36838 <__assert_fail@plt+0x23dbc>
   36824:	add	r0, r6, #136	; 0x88
   36828:	mov	r1, #0
   3682c:	bl	124d0 <pthread_mutex_init@plt>
   36830:	cmp	r0, #0
   36834:	bne	367d8 <__assert_fail@plt+0x23d5c>
   36838:	add	r1, sp, #32
   3683c:	vmov.i32	q8, #0	; 0x00000000
   36840:	str	r9, [sp, #16]
   36844:	ldr	r9, [r9, #20]
   36848:	mov	r5, r8
   3684c:	add	r0, r1, #64	; 0x40
   36850:	vst1.32	{d16-d17}, [r0]
   36854:	add	r0, r1, #52	; 0x34
   36858:	vst1.32	{d16-d17}, [r0]
   3685c:	add	r0, r1, #36	; 0x24
   36860:	vst1.32	{d16-d17}, [r0]
   36864:	add	r0, r1, #20
   36868:	vst1.32	{d16-d17}, [r0]
   3686c:	add	r0, r1, #4
   36870:	add	r1, r1, #44	; 0x2c
   36874:	vst1.32	{d16-d17}, [r0]
   36878:	str	r8, [sp, #32]
   3687c:	ubfx	r0, sl, #22, #1
   36880:	str	sl, [sp, #24]
   36884:	vdup.32	q8, r7
   36888:	str	r6, [sp, #20]
   3688c:	strb	r0, [sp, #104]	; 0x68
   36890:	and	r0, sl, #4194304	; 0x400000
   36894:	str	r9, [sp, #96]	; 0x60
   36898:	orrs	sl, r0, r9
   3689c:	str	r0, [sp, #12]
   368a0:	movwne	sl, #1
   368a4:	cmp	r7, #1
   368a8:	strb	sl, [sp, #107]	; 0x6b
   368ac:	ldr	r0, [r6, #92]	; 0x5c
   368b0:	str	r0, [sp, #112]	; 0x70
   368b4:	ldrb	r2, [r6, #88]	; 0x58
   368b8:	vst1.32	{d16-d17}, [r1]
   368bc:	ubfx	r1, r2, #3, #1
   368c0:	strb	r1, [sp, #106]	; 0x6a
   368c4:	ubfx	r1, r2, #2, #1
   368c8:	strb	r1, [sp, #105]	; 0x69
   368cc:	blt	36940 <__assert_fail@plt+0x23ec4>
   368d0:	ldr	r6, [sp, #28]
   368d4:	cmp	r0, #2
   368d8:	blt	36900 <__assert_fail@plt+0x23e84>
   368dc:	mov	r8, #12
   368e0:	cmn	r6, #-1073741823	; 0xc0000001
   368e4:	bhi	36e0c <__assert_fail@plt+0x24390>
   368e8:	lsl	r1, r6, #2
   368ec:	mov	r0, #0
   368f0:	bl	36328 <__assert_fail@plt+0x238ac>
   368f4:	cmp	r0, #0
   368f8:	beq	36e0c <__assert_fail@plt+0x24390>
   368fc:	str	r0, [sp, #40]	; 0x28
   36900:	cmp	sl, #0
   36904:	mov	r4, #0
   36908:	mov	sl, #0
   3690c:	beq	36930 <__assert_fail@plt+0x23eb4>
   36910:	mov	r0, #0
   36914:	mov	r1, r6
   36918:	bl	36328 <__assert_fail@plt+0x238ac>
   3691c:	cmp	r0, #0
   36920:	beq	36e08 <__assert_fail@plt+0x2438c>
   36924:	mov	r4, r0
   36928:	mov	sl, #1
   3692c:	str	r0, [sp, #36]	; 0x24
   36930:	ldr	r0, [sp, #20]
   36934:	str	r6, [sp, #68]	; 0x44
   36938:	ldr	r0, [r0, #92]	; 0x5c
   3693c:	b	36944 <__assert_fail@plt+0x23ec8>
   36940:	mov	r6, #0
   36944:	ldr	r1, [sp, #12]
   36948:	cmp	sl, #0
   3694c:	moveq	r4, r5
   36950:	str	r4, [sp, #36]	; 0x24
   36954:	cmp	r1, #0
   36958:	beq	36a3c <__assert_fail@plt+0x23fc0>
   3695c:	cmp	r0, #2
   36960:	blt	36a54 <__assert_fail@plt+0x23fd8>
   36964:	add	r0, sp, #32
   36968:	bl	3b830 <__assert_fail@plt+0x28db4>
   3696c:	ldr	r9, [sp, #20]
   36970:	cmp	r0, #0
   36974:	bne	36a34 <__assert_fail@plt+0x23fb8>
   36978:	add	sl, sp, #32
   3697c:	ldr	r0, [sp, #64]	; 0x40
   36980:	cmp	r0, r7
   36984:	bge	36b50 <__assert_fail@plt+0x240d4>
   36988:	ldr	r0, [r9, #92]	; 0x5c
   3698c:	ldr	r2, [sp, #60]	; 0x3c
   36990:	ldr	r1, [sp, #68]	; 0x44
   36994:	add	r0, r0, r2
   36998:	cmp	r1, r0
   3699c:	bgt	36b50 <__assert_fail@plt+0x240d4>
   369a0:	ldr	r0, [sp, #112]	; 0x70
   369a4:	lsl	r6, r1, #1
   369a8:	cmp	r0, #2
   369ac:	blt	369fc <__assert_fail@plt+0x23f80>
   369b0:	mov	r8, #12
   369b4:	cmn	r6, #-1073741823	; 0xc0000001
   369b8:	bhi	36e0c <__assert_fail@plt+0x24390>
   369bc:	ldr	r0, [sp, #40]	; 0x28
   369c0:	lsl	r4, r1, #3
   369c4:	mov	r1, r4
   369c8:	bl	36328 <__assert_fail@plt+0x238ac>
   369cc:	cmp	r0, #0
   369d0:	beq	36e0c <__assert_fail@plt+0x24390>
   369d4:	str	r0, [sp, #40]	; 0x28
   369d8:	ldr	r0, [sp, #44]	; 0x2c
   369dc:	cmp	r0, #0
   369e0:	beq	369fc <__assert_fail@plt+0x23f80>
   369e4:	mov	r1, r4
   369e8:	bl	36328 <__assert_fail@plt+0x238ac>
   369ec:	cmp	r0, #0
   369f0:	beq	36e0c <__assert_fail@plt+0x24390>
   369f4:	ldr	r9, [sp, #20]
   369f8:	str	r0, [sp, #44]	; 0x2c
   369fc:	ldrb	r0, [sp, #107]	; 0x6b
   36a00:	cmp	r0, #0
   36a04:	beq	36a20 <__assert_fail@plt+0x23fa4>
   36a08:	ldr	r0, [sp, #36]	; 0x24
   36a0c:	mov	r1, r6
   36a10:	bl	36328 <__assert_fail@plt+0x238ac>
   36a14:	cmp	r0, #0
   36a18:	beq	36e08 <__assert_fail@plt+0x2438c>
   36a1c:	str	r0, [sp, #36]	; 0x24
   36a20:	mov	r0, sl
   36a24:	str	r6, [sp, #68]	; 0x44
   36a28:	bl	3b830 <__assert_fail@plt+0x28db4>
   36a2c:	cmp	r0, #0
   36a30:	beq	3697c <__assert_fail@plt+0x23f00>
   36a34:	mov	r8, r0
   36a38:	b	36e0c <__assert_fail@plt+0x24390>
   36a3c:	cmp	r0, #2
   36a40:	blt	36ac0 <__assert_fail@plt+0x24044>
   36a44:	add	r0, sp, #32
   36a48:	bl	3bef0 <__assert_fail@plt+0x29474>
   36a4c:	ldr	r9, [sp, #20]
   36a50:	b	36b50 <__assert_fail@plt+0x240d4>
   36a54:	cmp	r6, r7
   36a58:	movgt	r6, r7
   36a5c:	cmp	r6, #1
   36a60:	blt	36b2c <__assert_fail@plt+0x240b0>
   36a64:	mov	r0, #0
   36a68:	mov	r4, #0
   36a6c:	b	36a7c <__assert_fail@plt+0x24000>
   36a70:	ldr	r5, [sp, #32]
   36a74:	ldr	r0, [sp, #56]	; 0x38
   36a78:	ldr	r9, [sp, #96]	; 0x60
   36a7c:	add	r0, r5, r0
   36a80:	cmp	r9, #0
   36a84:	ldrb	r5, [r0, r4]
   36a88:	ldrbne	r5, [r9, r5]
   36a8c:	add	r0, r5, #128	; 0x80
   36a90:	lsr	r0, r0, #7
   36a94:	cmp	r0, #2
   36a98:	bhi	36aa8 <__assert_fail@plt+0x2402c>
   36a9c:	bl	12728 <__ctype_toupper_loc@plt>
   36aa0:	ldr	r0, [r0]
   36aa4:	ldr	r5, [r0, r5, lsl #2]
   36aa8:	ldr	r0, [sp, #36]	; 0x24
   36aac:	strb	r5, [r0, r4]
   36ab0:	add	r4, r4, #1
   36ab4:	cmp	r4, r6
   36ab8:	blt	36a70 <__assert_fail@plt+0x23ff4>
   36abc:	b	36b30 <__assert_fail@plt+0x240b4>
   36ac0:	cmp	r9, #0
   36ac4:	beq	36b30 <__assert_fail@plt+0x240b4>
   36ac8:	cmp	r6, r7
   36acc:	movgt	r6, r7
   36ad0:	cmp	r6, #1
   36ad4:	blt	36b40 <__assert_fail@plt+0x240c4>
   36ad8:	ldrb	r0, [r5]
   36adc:	cmp	r6, #1
   36ae0:	ldrb	r0, [r9, r0]
   36ae4:	ldr	r9, [sp, #20]
   36ae8:	strb	r0, [r4]
   36aec:	mov	r0, #1
   36af0:	beq	36b48 <__assert_fail@plt+0x240cc>
   36af4:	mov	r0, #1
   36af8:	ldr	r1, [sp, #32]
   36afc:	ldr	r3, [sp, #56]	; 0x38
   36b00:	ldr	r7, [sp, #96]	; 0x60
   36b04:	ldr	r2, [sp, #36]	; 0x24
   36b08:	add	r1, r1, r3
   36b0c:	ldrb	r1, [r1, r0]
   36b10:	ldrb	r1, [r7, r1]
   36b14:	strb	r1, [r2, r0]
   36b18:	add	r0, r0, #1
   36b1c:	cmp	r0, r6
   36b20:	blt	36af8 <__assert_fail@plt+0x2407c>
   36b24:	mov	r0, r6
   36b28:	b	36b48 <__assert_fail@plt+0x240cc>
   36b2c:	mov	r6, #0
   36b30:	ldr	r9, [sp, #20]
   36b34:	str	r6, [sp, #64]	; 0x40
   36b38:	str	r6, [sp, #60]	; 0x3c
   36b3c:	b	36b50 <__assert_fail@plt+0x240d4>
   36b40:	ldr	r9, [sp, #20]
   36b44:	mov	r0, #0
   36b48:	str	r0, [sp, #64]	; 0x40
   36b4c:	str	r0, [sp, #60]	; 0x3c
   36b50:	ldr	sl, [sp, #16]
   36b54:	mov	r5, #0
   36b58:	ldr	r4, [sp, #24]
   36b5c:	sub	r8, fp, #48	; 0x30
   36b60:	add	r6, sp, #32
   36b64:	str	r5, [fp, #-52]	; 0xffffffcc
   36b68:	mov	r0, r8
   36b6c:	mov	r1, r6
   36b70:	str	r5, [sl, #24]
   36b74:	orr	r2, r4, #8388608	; 0x800000
   36b78:	ldr	r7, [sl]
   36b7c:	str	r4, [r7, #128]	; 0x80
   36b80:	bl	3c468 <__assert_fail@plt+0x299ec>
   36b84:	ldr	r1, [sp, #72]	; 0x48
   36b88:	mov	r2, r8
   36b8c:	mov	r3, r4
   36b90:	str	r5, [sp]
   36b94:	add	r0, r1, r0
   36b98:	mov	r1, sl
   36b9c:	str	r0, [sp, #72]	; 0x48
   36ba0:	sub	r0, fp, #52	; 0x34
   36ba4:	str	r0, [sp, #4]
   36ba8:	mov	r0, r6
   36bac:	bl	3c0e0 <__assert_fail@plt+0x29664>
   36bb0:	mov	r4, r0
   36bb4:	cmp	r0, #0
   36bb8:	bne	36bc8 <__assert_fail@plt+0x2414c>
   36bbc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   36bc0:	cmp	r0, #0
   36bc4:	bne	36ea4 <__assert_fail@plt+0x24428>
   36bc8:	ldr	r1, [r7, #64]	; 0x40
   36bcc:	cmp	r1, #31
   36bd0:	beq	36e3c <__assert_fail@plt+0x243c0>
   36bd4:	ldr	r0, [r7, #56]	; 0x38
   36bd8:	add	r2, r1, #1
   36bdc:	add	r0, r0, r1, lsl #5
   36be0:	mov	r1, #0
   36be4:	vmov.i32	q8, #0	; 0x00000000
   36be8:	str	r2, [r7, #64]	; 0x40
   36bec:	add	r6, r0, #4
   36bf0:	mov	r2, #2
   36bf4:	str	r1, [r0, #20]
   36bf8:	str	r1, [r0, #24]
   36bfc:	str	r2, [r0, #28]
   36c00:	mov	r0, #28
   36c04:	mov	r1, r6
   36c08:	vst1.32	{d16-d17}, [r1], r0
   36c0c:	mvn	r0, #0
   36c10:	str	r0, [r1]
   36c14:	cmp	r4, #0
   36c18:	mov	r0, r6
   36c1c:	beq	36c70 <__assert_fail@plt+0x241f4>
   36c20:	ldr	r1, [r7, #64]	; 0x40
   36c24:	cmp	r1, #31
   36c28:	beq	36e74 <__assert_fail@plt+0x243f8>
   36c2c:	ldr	r0, [r7, #56]	; 0x38
   36c30:	add	r2, r1, #1
   36c34:	add	r0, r0, r1, lsl #5
   36c38:	mov	r1, #0
   36c3c:	mvn	r3, #0
   36c40:	cmp	r6, #0
   36c44:	str	r2, [r7, #64]	; 0x40
   36c48:	str	r1, [r0, #4]!
   36c4c:	mov	r2, #16
   36c50:	add	ip, r0, #20
   36c54:	stmib	r0, {r4, r6}
   36c58:	str	r1, [r0, #12]
   36c5c:	str	r1, [r0, #16]
   36c60:	stm	ip, {r1, r2, r3}
   36c64:	str	r0, [r4]
   36c68:	beq	36e9c <__assert_fail@plt+0x24420>
   36c6c:	str	r0, [r6]
   36c70:	cmp	r6, #0
   36c74:	cmpne	r0, #0
   36c78:	beq	36e9c <__assert_fail@plt+0x24420>
   36c7c:	str	r0, [r9, #52]	; 0x34
   36c80:	ldr	r8, [sl]
   36c84:	ldr	r0, [r8, #4]
   36c88:	lsl	r0, r0, #2
   36c8c:	bl	35608 <__assert_fail@plt+0x22b8c>
   36c90:	str	r0, [r8, #12]
   36c94:	ldr	r0, [r8, #4]
   36c98:	lsl	r0, r0, #2
   36c9c:	bl	35608 <__assert_fail@plt+0x22b8c>
   36ca0:	str	r0, [r8, #16]
   36ca4:	ldr	r0, [r8, #4]
   36ca8:	add	r0, r0, r0, lsl #1
   36cac:	lsl	r0, r0, #2
   36cb0:	bl	35608 <__assert_fail@plt+0x22b8c>
   36cb4:	str	r0, [r8, #20]
   36cb8:	ldr	r0, [r8, #4]
   36cbc:	add	r0, r0, r0, lsl #1
   36cc0:	lsl	r0, r0, #2
   36cc4:	bl	35608 <__assert_fail@plt+0x22b8c>
   36cc8:	str	r0, [r8, #24]
   36ccc:	ldr	r1, [r8, #12]
   36cd0:	cmp	r1, #0
   36cd4:	ldrne	r1, [r8, #16]
   36cd8:	cmpne	r1, #0
   36cdc:	beq	36cf0 <__assert_fail@plt+0x24274>
   36ce0:	cmp	r0, #0
   36ce4:	ldrne	r0, [r8, #20]
   36ce8:	cmpne	r0, #0
   36cec:	bne	36d9c <__assert_fail@plt+0x24320>
   36cf0:	mov	r0, #12
   36cf4:	str	r0, [fp, #-52]	; 0xffffffcc
   36cf8:	ldr	r9, [sp, #20]
   36cfc:	ldr	r4, [sl]
   36d00:	ldr	r0, [r4, #56]	; 0x38
   36d04:	cmp	r0, #0
   36d08:	beq	36d20 <__assert_fail@plt+0x242a4>
   36d0c:	ldr	r5, [r0]
   36d10:	bl	32c40 <__assert_fail@plt+0x201c4>
   36d14:	cmp	r5, #0
   36d18:	mov	r0, r5
   36d1c:	bne	36d0c <__assert_fail@plt+0x24290>
   36d20:	mov	r0, #31
   36d24:	mov	r5, #0
   36d28:	str	r0, [r4, #64]	; 0x40
   36d2c:	str	r5, [r4, #52]	; 0x34
   36d30:	str	r5, [r4, #56]	; 0x38
   36d34:	ldr	r0, [r4, #16]
   36d38:	bl	32c40 <__assert_fail@plt+0x201c4>
   36d3c:	str	r5, [r4, #16]
   36d40:	ldr	r0, [sp, #40]	; 0x28
   36d44:	bl	32c40 <__assert_fail@plt+0x201c4>
   36d48:	ldr	r0, [sp, #44]	; 0x2c
   36d4c:	bl	32c40 <__assert_fail@plt+0x201c4>
   36d50:	ldrb	r0, [sp, #107]	; 0x6b
   36d54:	cmp	r0, #0
   36d58:	beq	36d64 <__assert_fail@plt+0x242e8>
   36d5c:	ldr	r0, [sp, #36]	; 0x24
   36d60:	bl	32c40 <__assert_fail@plt+0x201c4>
   36d64:	ldr	r0, [sp, #8]
   36d68:	cmp	r0, #0
   36d6c:	beq	36d78 <__assert_fail@plt+0x242fc>
   36d70:	add	r0, r9, #136	; 0x88
   36d74:	bl	12404 <pthread_mutex_destroy@plt>
   36d78:	mov	r0, r9
   36d7c:	bl	3868c <__assert_fail@plt+0x25c10>
   36d80:	mov	r0, #0
   36d84:	str	r0, [sl]
   36d88:	str	r0, [sl, #4]
   36d8c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   36d90:	mov	r0, r4
   36d94:	sub	sp, fp, #28
   36d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36d9c:	ldr	r0, [sl, #24]
   36da0:	lsl	r0, r0, #2
   36da4:	bl	35608 <__assert_fail@plt+0x22b8c>
   36da8:	cmp	r0, #0
   36dac:	str	r0, [r8, #132]	; 0x84
   36db0:	str	r8, [sp, #28]
   36db4:	beq	36e00 <__assert_fail@plt+0x24384>
   36db8:	ldr	r1, [sl, #24]
   36dbc:	cmp	r1, #0
   36dc0:	beq	36ee4 <__assert_fail@plt+0x24468>
   36dc4:	mov	r2, #0
   36dc8:	cmp	r1, #4
   36dcc:	bcc	36ed4 <__assert_fail@plt+0x24458>
   36dd0:	add	r3, pc, #984	; 0x3d8
   36dd4:	bic	r2, r1, #3
   36dd8:	vmov.i32	q8, #4	; 0x00000004
   36ddc:	mov	r7, r0
   36de0:	vld1.64	{d18-d19}, [r3 :128]
   36de4:	mov	r3, r2
   36de8:	vadd.i32	q10, q9, q8
   36dec:	vst1.32	{d18-d19}, [r7]!
   36df0:	subs	r3, r3, #4
   36df4:	vorr	q9, q10, q10
   36df8:	bne	36de8 <__assert_fail@plt+0x2436c>
   36dfc:	b	36edc <__assert_fail@plt+0x24460>
   36e00:	add	r8, r8, #52	; 0x34
   36e04:	b	370c4 <__assert_fail@plt+0x24648>
   36e08:	mov	r8, #12
   36e0c:	ldr	sl, [sp, #16]
   36e10:	str	r8, [fp, #-52]	; 0xffffffcc
   36e14:	b	36cf8 <__assert_fail@plt+0x2427c>
   36e18:	mov	r0, r6
   36e1c:	mov	r1, #160	; 0xa0
   36e20:	mov	r4, #160	; 0xa0
   36e24:	bl	36328 <__assert_fail@plt+0x238ac>
   36e28:	cmp	r0, #0
   36e2c:	beq	36e64 <__assert_fail@plt+0x243e8>
   36e30:	mov	r6, r0
   36e34:	stm	r9, {r0, r4}
   36e38:	b	3648c <__assert_fail@plt+0x23a10>
   36e3c:	mov	r0, #996	; 0x3e4
   36e40:	bl	35608 <__assert_fail@plt+0x22b8c>
   36e44:	cmp	r0, #0
   36e48:	beq	36ec0 <__assert_fail@plt+0x24444>
   36e4c:	ldr	r1, [r7, #56]	; 0x38
   36e50:	str	r1, [r0]
   36e54:	mov	r1, #0
   36e58:	str	r1, [r7, #64]	; 0x40
   36e5c:	str	r0, [r7, #56]	; 0x38
   36e60:	b	36bd8 <__assert_fail@plt+0x2415c>
   36e64:	mov	r4, #12
   36e68:	mov	r0, r4
   36e6c:	sub	sp, fp, #28
   36e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36e74:	mov	r0, #996	; 0x3e4
   36e78:	bl	35608 <__assert_fail@plt+0x22b8c>
   36e7c:	cmp	r0, #0
   36e80:	beq	36e9c <__assert_fail@plt+0x24420>
   36e84:	ldr	r1, [r7, #56]	; 0x38
   36e88:	str	r1, [r0]
   36e8c:	mov	r1, #0
   36e90:	str	r1, [r7, #64]	; 0x40
   36e94:	str	r0, [r7, #56]	; 0x38
   36e98:	b	36c30 <__assert_fail@plt+0x241b4>
   36e9c:	mov	r0, #12
   36ea0:	str	r0, [fp, #-52]	; 0xffffffcc
   36ea4:	mov	r0, #0
   36ea8:	str	r0, [r9, #52]	; 0x34
   36eac:	ldr	r4, [sl]
   36eb0:	ldr	r0, [r4, #56]	; 0x38
   36eb4:	cmp	r0, #0
   36eb8:	bne	36d0c <__assert_fail@plt+0x24290>
   36ebc:	b	36d20 <__assert_fail@plt+0x242a4>
   36ec0:	mov	r6, #0
   36ec4:	cmp	r4, #0
   36ec8:	mov	r0, r6
   36ecc:	bne	36c20 <__assert_fail@plt+0x241a4>
   36ed0:	b	36c70 <__assert_fail@plt+0x241f4>
   36ed4:	str	r2, [r0, r2, lsl #2]
   36ed8:	add	r2, r2, #1
   36edc:	cmp	r1, r2
   36ee0:	bne	36ed4 <__assert_fail@plt+0x24458>
   36ee4:	ldr	r2, [r8, #52]!	; 0x34
   36ee8:	ldrb	r1, [r2, #24]
   36eec:	cmp	r1, #17
   36ef0:	beq	36f20 <__assert_fail@plt+0x244a4>
   36ef4:	cmp	r1, #4
   36ef8:	bne	36f74 <__assert_fail@plt+0x244f8>
   36efc:	ldr	r1, [r2, #20]
   36f00:	ldr	r7, [sp, #28]
   36f04:	mov	r3, #1
   36f08:	ldr	r0, [r0, r1, lsl #2]
   36f0c:	str	r0, [r2, #20]
   36f10:	ldr	r1, [r7, #80]	; 0x50
   36f14:	orr	r0, r1, r3, lsl r0
   36f18:	str	r0, [r7, #80]	; 0x50
   36f1c:	b	36f74 <__assert_fail@plt+0x244f8>
   36f20:	ldr	r1, [r2, #4]
   36f24:	cmp	r1, #0
   36f28:	beq	36f74 <__assert_fail@plt+0x244f8>
   36f2c:	ldrb	r3, [r1, #24]
   36f30:	cmp	r3, #17
   36f34:	bne	36f74 <__assert_fail@plt+0x244f8>
   36f38:	ldr	r3, [r1, #4]
   36f3c:	ldr	r1, [r1, #20]
   36f40:	cmp	r3, #0
   36f44:	str	r3, [r2, #4]
   36f48:	strne	r2, [r3]
   36f4c:	cmp	r1, #31
   36f50:	ldr	r3, [r2, #20]
   36f54:	ldr	r3, [r0, r3, lsl #2]
   36f58:	str	r3, [r0, r1, lsl #2]
   36f5c:	bgt	36f74 <__assert_fail@plt+0x244f8>
   36f60:	ldr	r7, [sp, #28]
   36f64:	mov	r3, #1
   36f68:	ldr	r0, [r7, #80]	; 0x50
   36f6c:	bic	r0, r0, r3, lsl r1
   36f70:	b	36f18 <__assert_fail@plt+0x2449c>
   36f74:	mov	r0, #1
   36f78:	b	36f9c <__assert_fail@plt+0x24520>
   36f7c:	ldr	r2, [r7, #20]
   36f80:	ldr	r3, [sp, #28]
   36f84:	ldr	r1, [r1, r2, lsl #2]
   36f88:	str	r1, [r7, #20]
   36f8c:	ldr	r2, [r3, #80]	; 0x50
   36f90:	orr	r1, r2, r0, lsl r1
   36f94:	mov	r2, r7
   36f98:	str	r1, [r3, #80]	; 0x50
   36f9c:	ldr	r7, [r2, #4]
   36fa0:	cmp	r7, #0
   36fa4:	bne	36fd4 <__assert_fail@plt+0x24558>
   36fa8:	mov	r3, #0
   36fac:	ldr	r7, [r2, #8]
   36fb0:	mov	r1, r2
   36fb4:	cmp	r7, r3
   36fb8:	cmpne	r7, #0
   36fbc:	bne	36fd4 <__assert_fail@plt+0x24558>
   36fc0:	ldr	r2, [r1]
   36fc4:	mov	r3, r1
   36fc8:	cmp	r2, #0
   36fcc:	bne	36fac <__assert_fail@plt+0x24530>
   36fd0:	b	37070 <__assert_fail@plt+0x245f4>
   36fd4:	ldrb	r1, [r7, #24]
   36fd8:	cmp	r1, #17
   36fdc:	beq	37004 <__assert_fail@plt+0x24588>
   36fe0:	cmp	r1, #4
   36fe4:	mov	r2, r7
   36fe8:	bne	36f9c <__assert_fail@plt+0x24520>
   36fec:	ldr	r1, [sp, #28]
   36ff0:	mov	r2, r7
   36ff4:	ldr	r1, [r1, #132]	; 0x84
   36ff8:	cmp	r1, #0
   36ffc:	beq	36f9c <__assert_fail@plt+0x24520>
   37000:	b	36f7c <__assert_fail@plt+0x24500>
   37004:	ldr	r3, [r7, #4]
   37008:	mov	r2, r7
   3700c:	cmp	r3, #0
   37010:	beq	36f9c <__assert_fail@plt+0x24520>
   37014:	ldrb	r1, [r3, #24]
   37018:	mov	r2, r7
   3701c:	cmp	r1, #17
   37020:	bne	36f9c <__assert_fail@plt+0x24520>
   37024:	ldr	r1, [r3, #4]
   37028:	ldr	r2, [sp, #28]
   3702c:	ldr	r3, [r3, #20]
   37030:	cmp	r1, #0
   37034:	str	r1, [r7, #4]
   37038:	strne	r7, [r1]
   3703c:	cmp	r3, #31
   37040:	ldr	r1, [r7, #20]
   37044:	ldr	r2, [r2, #132]	; 0x84
   37048:	ldr	r1, [r2, r1, lsl #2]
   3704c:	str	r1, [r2, r3, lsl #2]
   37050:	mov	r2, r7
   37054:	bgt	36f9c <__assert_fail@plt+0x24520>
   37058:	ldr	r2, [sp, #28]
   3705c:	ldr	r1, [r2, #80]	; 0x50
   37060:	bic	r1, r1, r0, lsl r3
   37064:	str	r1, [r2, #80]	; 0x50
   37068:	mov	r2, r7
   3706c:	b	36f9c <__assert_fail@plt+0x24520>
   37070:	ldr	r1, [sl, #24]
   37074:	cmp	r1, #0
   37078:	beq	370ac <__assert_fail@plt+0x24630>
   3707c:	ldr	r0, [sp, #28]
   37080:	mov	r2, #0
   37084:	ldr	r0, [r0, #132]	; 0x84
   37088:	ldr	r3, [r0, r2, lsl #2]
   3708c:	cmp	r2, r3
   37090:	bne	370a0 <__assert_fail@plt+0x24624>
   37094:	add	r2, r2, #1
   37098:	cmp	r2, r1
   3709c:	bcc	37088 <__assert_fail@plt+0x2460c>
   370a0:	cmp	r2, r1
   370a4:	beq	370b4 <__assert_fail@plt+0x24638>
   370a8:	b	370c4 <__assert_fail@plt+0x24648>
   370ac:	ldr	r0, [sp, #28]
   370b0:	ldr	r0, [r0, #132]	; 0x84
   370b4:	bl	32c40 <__assert_fail@plt+0x201c4>
   370b8:	ldr	r1, [sp, #28]
   370bc:	mov	r0, #0
   370c0:	str	r0, [r1, #132]	; 0x84
   370c4:	ldr	r0, [r8]
   370c8:	mov	r7, #0
   370cc:	sub	r9, fp, #48	; 0x30
   370d0:	mov	r4, r0
   370d4:	ldr	r0, [r0, #4]
   370d8:	cmp	r0, #0
   370dc:	bne	370d0 <__assert_fail@plt+0x24654>
   370e0:	ldr	r0, [r4, #8]
   370e4:	cmp	r0, #0
   370e8:	bne	370d0 <__assert_fail@plt+0x24654>
   370ec:	mov	r3, #0
   370f0:	cmp	r3, #0
   370f4:	str	r7, [fp, #-48]	; 0xffffffd0
   370f8:	beq	37148 <__assert_fail@plt+0x246cc>
   370fc:	ldrb	r0, [r3, #24]
   37100:	cmp	r0, #17
   37104:	bne	37148 <__assert_fail@plt+0x246cc>
   37108:	ldrb	r2, [sl, #28]
   3710c:	ldr	r1, [sl]
   37110:	mov	r0, r9
   37114:	bl	409e8 <__assert_fail@plt+0x2df6c>
   37118:	cmp	r0, #0
   3711c:	str	r0, [r4, #4]
   37120:	strne	r4, [r0]
   37124:	ldr	r3, [r4, #8]
   37128:	cmp	r3, #0
   3712c:	bne	37154 <__assert_fail@plt+0x246d8>
   37130:	b	3717c <__assert_fail@plt+0x24700>
   37134:	ldr	r3, [r1, #4]
   37138:	mov	r4, r1
   3713c:	cmp	r3, #0
   37140:	str	r7, [fp, #-48]	; 0xffffffd0
   37144:	bne	370fc <__assert_fail@plt+0x24680>
   37148:	ldr	r3, [r4, #8]
   3714c:	cmp	r3, #0
   37150:	beq	3717c <__assert_fail@plt+0x24700>
   37154:	ldrb	r0, [r3, #24]
   37158:	cmp	r0, #17
   3715c:	bne	3717c <__assert_fail@plt+0x24700>
   37160:	ldrb	r2, [sl, #28]
   37164:	ldr	r1, [sl]
   37168:	mov	r0, r9
   3716c:	bl	409e8 <__assert_fail@plt+0x2df6c>
   37170:	cmp	r0, #0
   37174:	str	r0, [r4, #8]
   37178:	strne	r4, [r0]
   3717c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   37180:	cmp	r0, #0
   37184:	bne	36cf4 <__assert_fail@plt+0x24278>
   37188:	ldr	r1, [r4]
   3718c:	cmp	r1, #0
   37190:	beq	371c0 <__assert_fail@plt+0x24744>
   37194:	ldr	r0, [r1, #8]
   37198:	cmp	r0, r4
   3719c:	cmpne	r0, #0
   371a0:	beq	37134 <__assert_fail@plt+0x246b8>
   371a4:	b	370d0 <__assert_fail@plt+0x24654>
   371a8:	nop	{0}
   371ac:	nop	{0}
   371b0:	andeq	r0, r0, r0
   371b4:	andeq	r0, r0, r1
   371b8:	andeq	r0, r0, r2
   371bc:	andeq	r0, r0, r3
   371c0:	ldr	r0, [sp, #28]
   371c4:	ldr	r0, [r0, #52]	; 0x34
   371c8:	mov	r4, r0
   371cc:	ldr	r0, [r0, #4]
   371d0:	cmp	r0, #0
   371d4:	bne	371c8 <__assert_fail@plt+0x2474c>
   371d8:	ldr	r0, [r4, #8]
   371dc:	cmp	r0, #0
   371e0:	bne	371c8 <__assert_fail@plt+0x2474c>
   371e4:	ldr	r2, [r4, #24]
   371e8:	uxtb	r0, r2
   371ec:	cmp	r0, #16
   371f0:	bne	37234 <__assert_fail@plt+0x247b8>
   371f4:	ldr	r0, [r4, #4]
   371f8:	ldr	r1, [r0, #12]
   371fc:	str	r1, [r4, #12]
   37200:	ldr	r0, [r0, #28]
   37204:	str	r0, [r4, #28]
   37208:	ldr	r1, [r4]
   3720c:	cmp	r1, #0
   37210:	beq	37284 <__assert_fail@plt+0x24808>
   37214:	ldr	r0, [r1, #8]
   37218:	cmp	r0, r4
   3721c:	mov	r4, r1
   37220:	beq	371e4 <__assert_fail@plt+0x24768>
   37224:	cmp	r0, #0
   37228:	mov	r4, r1
   3722c:	beq	371e4 <__assert_fail@plt+0x24768>
   37230:	b	371c8 <__assert_fail@plt+0x2474c>
   37234:	str	r4, [r4, #12]
   37238:	ldr	r0, [sp, #28]
   3723c:	ldr	r1, [r4, #20]
   37240:	bl	40cd0 <__assert_fail@plt+0x2e254>
   37244:	cmn	r0, #1
   37248:	str	r0, [r4, #28]
   3724c:	beq	36cf0 <__assert_fail@plt+0x24274>
   37250:	ldrb	r1, [r4, #24]
   37254:	cmp	r1, #12
   37258:	bne	37278 <__assert_fail@plt+0x247fc>
   3725c:	ldr	r1, [sp, #28]
   37260:	ldr	r2, [r4, #20]
   37264:	ldr	r1, [r1]
   37268:	add	r0, r1, r0, lsl #3
   3726c:	ldr	r1, [r0, #4]
   37270:	bfi	r1, r2, #8, #10
   37274:	str	r1, [r0, #4]
   37278:	ldr	r1, [r4]
   3727c:	cmp	r1, #0
   37280:	bne	37214 <__assert_fail@plt+0x24798>
   37284:	ldr	r4, [r8]
   37288:	ldrb	r0, [r4, #24]
   3728c:	cmp	r0, #16
   37290:	beq	372ac <__assert_fail@plt+0x24830>
   37294:	ldr	r8, [sp, #28]
   37298:	cmp	r0, #11
   3729c:	bne	372c8 <__assert_fail@plt+0x2484c>
   372a0:	ldr	r0, [r4, #4]
   372a4:	str	r4, [r0, #16]
   372a8:	b	372e8 <__assert_fail@plt+0x2486c>
   372ac:	ldmib	r4, {r0, r1}
   372b0:	ldr	r8, [sp, #28]
   372b4:	ldr	r2, [r1, #12]
   372b8:	str	r2, [r0, #16]
   372bc:	ldr	r2, [r4, #16]
   372c0:	str	r2, [r1, #16]
   372c4:	b	372e8 <__assert_fail@plt+0x2486c>
   372c8:	ldr	r0, [r4, #4]
   372cc:	cmp	r0, #0
   372d0:	ldrne	r1, [r4, #16]
   372d4:	strne	r1, [r0, #16]
   372d8:	ldr	r1, [r4, #8]
   372dc:	cmp	r1, #0
   372e0:	ldrne	r2, [r4, #16]
   372e4:	strne	r2, [r1, #16]
   372e8:	mov	r1, r4
   372ec:	b	3730c <__assert_fail@plt+0x24890>
   372f0:	ldr	r3, [r1, #16]
   372f4:	str	r3, [r2, #16]
   372f8:	b	3730c <__assert_fail@plt+0x24890>
   372fc:	ldmib	r1, {r0, r2}
   37300:	ldr	r3, [r2, #12]
   37304:	str	r3, [r0, #16]
   37308:	b	372f0 <__assert_fail@plt+0x24874>
   3730c:	cmp	r0, #0
   37310:	bne	37340 <__assert_fail@plt+0x248c4>
   37314:	mov	r3, #0
   37318:	ldr	r0, [r1, #8]
   3731c:	mov	r2, r1
   37320:	cmp	r0, r3
   37324:	cmpne	r0, #0
   37328:	bne	37340 <__assert_fail@plt+0x248c4>
   3732c:	ldr	r1, [r2]
   37330:	mov	r3, r2
   37334:	cmp	r1, #0
   37338:	bne	37318 <__assert_fail@plt+0x2489c>
   3733c:	b	37384 <__assert_fail@plt+0x24908>
   37340:	mov	r1, r0
   37344:	ldrb	r0, [r0, #24]
   37348:	cmp	r0, #16
   3734c:	beq	372fc <__assert_fail@plt+0x24880>
   37350:	cmp	r0, #11
   37354:	bne	37364 <__assert_fail@plt+0x248e8>
   37358:	ldr	r0, [r1, #4]
   3735c:	str	r1, [r0, #16]
   37360:	b	3730c <__assert_fail@plt+0x24890>
   37364:	ldr	r0, [r1, #4]
   37368:	cmp	r0, #0
   3736c:	ldrne	r2, [r1, #16]
   37370:	strne	r2, [r0, #16]
   37374:	ldr	r2, [r1, #8]
   37378:	cmp	r2, #0
   3737c:	beq	3730c <__assert_fail@plt+0x24890>
   37380:	b	372f0 <__assert_fail@plt+0x24874>
   37384:	mov	r0, r8
   37388:	mov	r1, r4
   3738c:	bl	40850 <__assert_fail@plt+0x2ddd4>
   37390:	cmp	r0, #0
   37394:	bne	36cf4 <__assert_fail@plt+0x24278>
   37398:	ldr	r7, [r4, #4]
   3739c:	cmp	r7, #0
   373a0:	bne	373d0 <__assert_fail@plt+0x24954>
   373a4:	mov	r1, #0
   373a8:	ldr	r7, [r4, #8]
   373ac:	mov	r0, r4
   373b0:	cmp	r7, r1
   373b4:	cmpne	r7, #0
   373b8:	bne	373d0 <__assert_fail@plt+0x24954>
   373bc:	ldr	r4, [r0]
   373c0:	mov	r1, r0
   373c4:	cmp	r4, #0
   373c8:	bne	373a8 <__assert_fail@plt+0x2492c>
   373cc:	b	373ec <__assert_fail@plt+0x24970>
   373d0:	mov	r0, r8
   373d4:	mov	r1, r7
   373d8:	bl	40850 <__assert_fail@plt+0x2ddd4>
   373dc:	cmp	r0, #0
   373e0:	mov	r4, r7
   373e4:	beq	37398 <__assert_fail@plt+0x2491c>
   373e8:	b	36cf4 <__assert_fail@plt+0x24278>
   373ec:	ldr	r0, [r8, #8]
   373f0:	cmp	r0, #0
   373f4:	beq	374a4 <__assert_fail@plt+0x24a28>
   373f8:	mov	r5, #0
   373fc:	sub	r4, fp, #48	; 0x30
   37400:	mov	r7, #0
   37404:	ldr	r0, [r8, #24]
   37408:	add	r6, r7, r7, lsl #1
   3740c:	add	r0, r0, r6, lsl #2
   37410:	ldr	r0, [r0, #4]
   37414:	cmp	r0, #0
   37418:	beq	37424 <__assert_fail@plt+0x249a8>
   3741c:	mov	r1, r5
   37420:	b	37464 <__assert_fail@plt+0x249e8>
   37424:	mov	r0, r4
   37428:	mov	r1, r8
   3742c:	mov	r2, r7
   37430:	mov	r3, #1
   37434:	bl	40ea8 <__assert_fail@plt+0x2e42c>
   37438:	cmp	r0, #0
   3743c:	bne	36cf4 <__assert_fail@plt+0x24278>
   37440:	ldr	r0, [r8, #24]
   37444:	mov	r1, r5
   37448:	add	r0, r0, r6, lsl #2
   3744c:	ldr	r0, [r0, #4]
   37450:	cmp	r0, #0
   37454:	bne	37464 <__assert_fail@plt+0x249e8>
   37458:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3745c:	bl	32c40 <__assert_fail@plt+0x201c4>
   37460:	mov	r1, #1
   37464:	ldr	r2, [r8, #8]
   37468:	add	r0, r7, #1
   3746c:	subs	r3, r0, r2
   37470:	mov	r7, r3
   37474:	movwne	r3, #1
   37478:	movne	r7, r0
   3747c:	tst	r1, #1
   37480:	and	r5, r1, r3
   37484:	cmpeq	r0, r2
   37488:	bne	37404 <__assert_fail@plt+0x24988>
   3748c:	add	r0, r0, r0, lsl #1
   37490:	lsl	r0, r0, #2
   37494:	ldrb	r1, [sl, #28]
   37498:	tst	r1, #16
   3749c:	beq	374b4 <__assert_fail@plt+0x24a38>
   374a0:	b	374cc <__assert_fail@plt+0x24a50>
   374a4:	mov	r0, #0
   374a8:	ldrb	r1, [sl, #28]
   374ac:	tst	r1, #16
   374b0:	bne	374cc <__assert_fail@plt+0x24a50>
   374b4:	ldr	r1, [sp, #16]
   374b8:	ldr	r1, [r1, #24]
   374bc:	cmp	r1, #0
   374c0:	ldrbne	r1, [r8, #88]	; 0x58
   374c4:	tstne	r1, #1
   374c8:	bne	374d8 <__assert_fail@plt+0x24a5c>
   374cc:	ldr	r1, [r8, #76]	; 0x4c
   374d0:	cmp	r1, #0
   374d4:	beq	37604 <__assert_fail@plt+0x24b88>
   374d8:	bl	35608 <__assert_fail@plt+0x22b8c>
   374dc:	cmp	r0, #0
   374e0:	str	r0, [r8, #28]
   374e4:	beq	37acc <__assert_fail@plt+0x25050>
   374e8:	ldr	r1, [r8, #8]
   374ec:	cmp	r1, #0
   374f0:	beq	37604 <__assert_fail@plt+0x24b88>
   374f4:	mov	r1, #0
   374f8:	str	r1, [r0]
   374fc:	str	r1, [r0, #4]
   37500:	str	r1, [r0, #8]
   37504:	ldr	r0, [r8, #8]
   37508:	cmp	r0, #2
   3750c:	bcc	3753c <__assert_fail@plt+0x24ac0>
   37510:	mov	r2, #1
   37514:	mov	r3, #12
   37518:	ldr	r0, [r8, #28]
   3751c:	add	r2, r2, #1
   37520:	str	r1, [r0, r3]!
   37524:	add	r3, r3, #12
   37528:	str	r1, [r0, #4]
   3752c:	str	r1, [r0, #8]
   37530:	ldr	r0, [r8, #8]
   37534:	cmp	r2, r0
   37538:	bcc	37518 <__assert_fail@plt+0x24a9c>
   3753c:	cmp	r0, #0
   37540:	beq	37604 <__assert_fail@plt+0x24b88>
   37544:	ldr	ip, [r8, #24]
   37548:	mov	sl, #0
   3754c:	add	r9, sl, sl, lsl #1
   37550:	add	r2, ip, r9, lsl #2
   37554:	ldr	r3, [r2, #4]
   37558:	cmp	r3, #1
   3755c:	blt	375f8 <__assert_fail@plt+0x24b7c>
   37560:	ldr	r1, [r2, #8]
   37564:	mov	r6, #0
   37568:	str	r1, [sp, #24]
   3756c:	ldr	r0, [r1, r6, lsl #2]
   37570:	ldr	r5, [r8, #28]
   37574:	add	r0, r0, r0, lsl #1
   37578:	mov	r3, r5
   3757c:	ldr	r7, [r3, r0, lsl #2]!
   37580:	mov	r4, r3
   37584:	ldr	r2, [r4, #4]!
   37588:	cmp	r7, r2
   3758c:	bne	375cc <__assert_fail@plt+0x24b50>
   37590:	mov	r1, #2
   37594:	add	r8, r5, r0, lsl #2
   37598:	add	r1, r1, r7, lsl #1
   3759c:	str	r1, [r3]
   375a0:	lsl	r1, r1, #2
   375a4:	ldr	r0, [r8, #8]!
   375a8:	bl	36328 <__assert_fail@plt+0x238ac>
   375ac:	cmp	r0, #0
   375b0:	beq	37acc <__assert_fail@plt+0x25050>
   375b4:	str	r0, [r8]
   375b8:	ldr	r8, [sp, #28]
   375bc:	ldr	r1, [sp, #24]
   375c0:	ldr	r2, [r4]
   375c4:	ldr	ip, [r8, #24]
   375c8:	b	375d4 <__assert_fail@plt+0x24b58>
   375cc:	add	r0, r5, r0, lsl #2
   375d0:	ldr	r0, [r0, #8]
   375d4:	add	r3, r2, #1
   375d8:	add	r6, r6, #1
   375dc:	str	r3, [r4]
   375e0:	str	sl, [r0, r2, lsl #2]
   375e4:	add	r0, ip, r9, lsl #2
   375e8:	ldr	r0, [r0, #4]
   375ec:	cmp	r6, r0
   375f0:	blt	3756c <__assert_fail@plt+0x24af0>
   375f4:	ldr	r0, [r8, #8]
   375f8:	add	sl, sl, #1
   375fc:	cmp	sl, r0
   37600:	bcc	3754c <__assert_fail@plt+0x24ad0>
   37604:	mov	r0, #0
   37608:	ldr	r1, [sp, #16]
   3760c:	str	r0, [fp, #-52]	; 0xffffffcc
   37610:	ldr	r0, [sp, #12]
   37614:	cmp	r0, #0
   37618:	bne	377e8 <__assert_fail@plt+0x24d6c>
   3761c:	ldr	r0, [sp, #20]
   37620:	ldrb	r2, [r0, #88]	; 0x58
   37624:	ands	r0, r2, #4
   37628:	beq	377e8 <__assert_fail@plt+0x24d6c>
   3762c:	ldr	r0, [r1, #20]
   37630:	cmp	r0, #0
   37634:	bne	377e8 <__assert_fail@plt+0x24d6c>
   37638:	ldr	r0, [sp, #20]
   3763c:	mov	r9, #0
   37640:	ldr	r7, [r0, #8]
   37644:	cmp	r7, #0
   37648:	beq	377b8 <__assert_fail@plt+0x24d3c>
   3764c:	ldr	r3, [r0]
   37650:	mov	r8, #0
   37654:	mov	ip, #1
   37658:	mov	lr, #139	; 0x8b
   3765c:	mov	r6, #0
   37660:	mov	r4, #0
   37664:	add	r5, r3, r4, lsl #3
   37668:	ldrb	r1, [r5, #4]
   3766c:	sub	r1, r1, #1
   37670:	cmp	r1, #11
   37674:	bhi	37b34 <__assert_fail@plt+0x250b8>
   37678:	add	r0, pc, #0
   3767c:	ldr	pc, [r0, r1, lsl #2]
   37680:	andeq	r7, r3, r4, lsl r7
   37684:			; <UNDEFINED> instruction: 0x000376b0
   37688:	andeq	r7, r3, r0, asr #13
   3768c:			; <UNDEFINED> instruction: 0x000376b0
   37690:	andeq	r7, r3, r8, lsr r7
   37694:	andeq	r7, r3, r8, ror #15
   37698:	andeq	r7, r3, r4, lsr fp
   3769c:			; <UNDEFINED> instruction: 0x000376b0
   376a0:			; <UNDEFINED> instruction: 0x000376b0
   376a4:			; <UNDEFINED> instruction: 0x000376b0
   376a8:			; <UNDEFINED> instruction: 0x000376b0
   376ac:	strdeq	r7, [r3], -r4
   376b0:	add	r4, r4, #1
   376b4:	cmp	r4, r7
   376b8:	bcc	37664 <__assert_fail@plt+0x24be8>
   376bc:	b	37748 <__assert_fail@plt+0x24ccc>
   376c0:	ldr	r5, [r3, r4, lsl #3]
   376c4:	ldr	r0, [r5, #16]
   376c8:	cmp	r0, #0
   376cc:	bne	377e8 <__assert_fail@plt+0x24d6c>
   376d0:	ldr	r0, [r5, #20]
   376d4:	cmp	r0, #0
   376d8:	ldreq	r0, [r5, #24]
   376dc:	cmpeq	r0, #0
   376e0:	bne	377e8 <__assert_fail@plt+0x24d6c>
   376e4:	ldr	r0, [r5, #28]
   376e8:	cmp	r0, #0
   376ec:	beq	376b0 <__assert_fail@plt+0x24c34>
   376f0:	b	377e8 <__assert_fail@plt+0x24d6c>
   376f4:	ldr	r0, [r3, r4, lsl #3]
   376f8:	sub	r0, r0, #16
   376fc:	ror	r1, r0, #4
   37700:	cmp	r1, #7
   37704:	bhi	377e8 <__assert_fail@plt+0x24d6c>
   37708:	tst	lr, ip, lsl r1
   3770c:	bne	376b0 <__assert_fail@plt+0x24c34>
   37710:	b	377e8 <__assert_fail@plt+0x24d6c>
   37714:	ldrsb	r0, [r5]
   37718:	cmp	r0, #0
   3771c:	mov	r0, #0
   37720:	movwlt	r0, #1
   37724:	orr	r6, r6, r0
   37728:	add	r4, r4, #1
   3772c:	cmp	r4, r7
   37730:	bcc	37664 <__assert_fail@plt+0x24be8>
   37734:	b	37748 <__assert_fail@plt+0x24ccc>
   37738:	mov	r8, #1
   3773c:	add	r4, r4, #1
   37740:	cmp	r4, r7
   37744:	bcc	37664 <__assert_fail@plt+0x24be8>
   37748:	orr	r0, r6, r8
   3774c:	tst	r0, #1
   37750:	beq	377bc <__assert_fail@plt+0x24d40>
   37754:	mov	r2, #0
   37758:	mov	r7, #7
   3775c:	b	37764 <__assert_fail@plt+0x24ce8>
   37760:	ldr	r3, [r1]
   37764:	add	r3, r3, r2, lsl #3
   37768:	ldr	r6, [r3, #4]
   3776c:	uxtb	r1, r6
   37770:	cmp	r1, #5
   37774:	beq	37794 <__assert_fail@plt+0x24d18>
   37778:	cmp	r1, #1
   3777c:	bne	3779c <__assert_fail@plt+0x24d20>
   37780:	ldrsb	r0, [r3]
   37784:	cmn	r0, #1
   37788:	bicle	r0, r6, #2097152	; 0x200000
   3778c:	strle	r0, [r3, #4]
   37790:	b	3779c <__assert_fail@plt+0x24d20>
   37794:	bfi	r6, r7, #0, #8
   37798:	str	r6, [r3, #4]
   3779c:	ldr	r1, [sp, #20]
   377a0:	add	r2, r2, #1
   377a4:	ldr	r0, [r1, #8]
   377a8:	cmp	r2, r0
   377ac:	bcc	37760 <__assert_fail@plt+0x24ce4>
   377b0:	ldrb	r2, [r1, #88]	; 0x58
   377b4:	b	377bc <__assert_fail@plt+0x24d40>
   377b8:	mov	r8, #0
   377bc:	ldr	r3, [sp, #20]
   377c0:	mov	r0, #1
   377c4:	and	r1, r2, #249	; 0xf9
   377c8:	str	r0, [r3, #92]	; 0x5c
   377cc:	ldr	r0, [r3, #76]	; 0x4c
   377d0:	cmp	r0, #0
   377d4:	movwgt	r9, #1
   377d8:	orr	r0, r8, r9
   377dc:	and	r0, r0, #1
   377e0:	orr	r0, r1, r0, lsl #1
   377e4:	strb	r0, [r3, #88]	; 0x58
   377e8:	ldr	r7, [sp, #20]
   377ec:	ldr	r1, [r7, #52]	; 0x34
   377f0:	ldr	r0, [r7, #24]
   377f4:	ldr	r1, [r1, #12]
   377f8:	ldr	r1, [r1, #28]
   377fc:	str	r1, [r7, #72]	; 0x48
   37800:	add	r1, r1, r1, lsl #1
   37804:	add	r5, r0, r1, lsl #2
   37808:	mov	r4, r5
   3780c:	ldr	sl, [r4, #4]!
   37810:	str	sl, [fp, #-44]	; 0xffffffd4
   37814:	ldr	r0, [r4]
   37818:	cmp	r0, #1
   3781c:	blt	37970 <__assert_fail@plt+0x24ef4>
   37820:	lsl	r0, sl, #2
   37824:	str	sl, [fp, #-48]	; 0xffffffd0
   37828:	bl	35608 <__assert_fail@plt+0x22b8c>
   3782c:	cmp	r0, #0
   37830:	str	r0, [fp, #-40]	; 0xffffffd8
   37834:	beq	37b18 <__assert_fail@plt+0x2509c>
   37838:	mov	r6, r0
   3783c:	ldr	r0, [r4]
   37840:	ldr	r1, [r5, #8]
   37844:	lsl	r2, r0, #2
   37848:	mov	r0, r6
   3784c:	bl	124b8 <memcpy@plt>
   37850:	mov	r0, #0
   37854:	cmp	sl, #1
   37858:	str	r0, [fp, #-32]	; 0xffffffe0
   3785c:	ldrge	r0, [sp, #20]
   37860:	ldrge	r0, [r0, #76]	; 0x4c
   37864:	cmpge	r0, #1
   37868:	blt	37984 <__assert_fail@plt+0x24f08>
   3786c:	mov	r0, #0
   37870:	sub	r8, fp, #48	; 0x30
   37874:	mov	r9, #1
   37878:	b	37880 <__assert_fail@plt+0x24e04>
   3787c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   37880:	ldr	r2, [sp, #20]
   37884:	ldr	r1, [r6, r0, lsl #2]
   37888:	ldr	r2, [r2]
   3788c:	add	r3, r2, r1, lsl #3
   37890:	ldrb	r3, [r3, #4]
   37894:	cmp	r3, #4
   37898:	bne	37960 <__assert_fail@plt+0x24ee4>
   3789c:	mov	r3, #0
   378a0:	cmp	sl, #1
   378a4:	blt	378d8 <__assert_fail@plt+0x24e5c>
   378a8:	ldr	r5, [r6, r3, lsl #2]
   378ac:	add	r4, r2, r5, lsl #3
   378b0:	ldrb	r4, [r4, #4]
   378b4:	cmp	r4, #9
   378b8:	bne	378cc <__assert_fail@plt+0x24e50>
   378bc:	ldr	r4, [r2, r1, lsl #3]
   378c0:	ldr	r5, [r2, r5, lsl #3]
   378c4:	cmp	r5, r4
   378c8:	beq	378d8 <__assert_fail@plt+0x24e5c>
   378cc:	add	r3, r3, #1
   378d0:	cmp	r3, sl
   378d4:	blt	378a8 <__assert_fail@plt+0x24e2c>
   378d8:	cmp	r3, sl
   378dc:	beq	37960 <__assert_fail@plt+0x24ee4>
   378e0:	ldr	r2, [sp, #20]
   378e4:	add	r1, r1, r1, lsl #1
   378e8:	cmp	sl, #1
   378ec:	ldr	r2, [r2, #20]
   378f0:	add	r1, r2, r1, lsl #2
   378f4:	ldr	r1, [r1, #8]
   378f8:	ldr	r1, [r1]
   378fc:	blt	37938 <__assert_fail@plt+0x24ebc>
   37900:	mov	r2, #0
   37904:	subs	r3, sl, #1
   37908:	beq	3792c <__assert_fail@plt+0x24eb0>
   3790c:	add	r5, r2, r3
   37910:	lsr	r4, r5, #1
   37914:	ldr	r7, [r6, r4, lsl #2]
   37918:	cmp	r7, r1
   3791c:	movge	r3, r4
   37920:	addlt	r2, r9, r5, lsr #1
   37924:	cmp	r2, r3
   37928:	bcc	3790c <__assert_fail@plt+0x24e90>
   3792c:	ldr	r2, [r6, r2, lsl #2]
   37930:	cmp	r2, r1
   37934:	beq	37960 <__assert_fail@plt+0x24ee4>
   37938:	ldr	r0, [sp, #20]
   3793c:	add	r1, r1, r1, lsl #1
   37940:	ldr	r0, [r0, #24]
   37944:	add	r1, r0, r1, lsl #2
   37948:	mov	r0, r8
   3794c:	bl	4158c <__assert_fail@plt+0x2eb10>
   37950:	cmp	r0, #0
   37954:	bne	37ad4 <__assert_fail@plt+0x25058>
   37958:	ldr	sl, [fp, #-44]	; 0xffffffd4
   3795c:	mov	r0, #0
   37960:	add	r0, r0, #1
   37964:	cmp	r0, sl
   37968:	blt	3787c <__assert_fail@plt+0x24e00>
   3796c:	b	37984 <__assert_fail@plt+0x24f08>
   37970:	mov	r0, #0
   37974:	str	r0, [fp, #-44]	; 0xffffffd4
   37978:	str	r0, [fp, #-48]	; 0xffffffd0
   3797c:	str	r0, [fp, #-40]	; 0xffffffd8
   37980:	str	r0, [fp, #-32]	; 0xffffffe0
   37984:	ldr	r7, [sp, #20]
   37988:	sub	r0, fp, #32
   3798c:	sub	r2, fp, #48	; 0x30
   37990:	mov	r3, #0
   37994:	mov	r1, r7
   37998:	bl	4187c <__assert_fail@plt+0x2ee00>
   3799c:	ldr	r8, [sp, #16]
   379a0:	cmp	r0, #0
   379a4:	str	r0, [r7, #36]	; 0x24
   379a8:	beq	37a28 <__assert_fail@plt+0x24fac>
   379ac:	ldrsb	r1, [r0, #52]	; 0x34
   379b0:	cmn	r1, #1
   379b4:	ble	379c8 <__assert_fail@plt+0x24f4c>
   379b8:	str	r0, [r7, #40]	; 0x28
   379bc:	str	r0, [r7, #44]	; 0x2c
   379c0:	str	r0, [r7, #48]	; 0x30
   379c4:	b	37a3c <__assert_fail@plt+0x24fc0>
   379c8:	sub	r4, fp, #32
   379cc:	sub	r6, fp, #48	; 0x30
   379d0:	mov	r1, r7
   379d4:	mov	r3, #1
   379d8:	mov	r0, r4
   379dc:	mov	r2, r6
   379e0:	bl	4187c <__assert_fail@plt+0x2ee00>
   379e4:	str	r0, [r7, #40]	; 0x28
   379e8:	mov	r0, r4
   379ec:	mov	r1, r7
   379f0:	mov	r2, r6
   379f4:	mov	r3, #2
   379f8:	bl	4187c <__assert_fail@plt+0x2ee00>
   379fc:	str	r0, [r7, #44]	; 0x2c
   37a00:	mov	r0, r4
   37a04:	mov	r1, r7
   37a08:	mov	r2, r6
   37a0c:	mov	r3, #6
   37a10:	bl	4187c <__assert_fail@plt+0x2ee00>
   37a14:	str	r0, [r7, #48]	; 0x30
   37a18:	ldr	r1, [r7, #40]	; 0x28
   37a1c:	cmp	r1, #0
   37a20:	cmpne	r0, #0
   37a24:	bne	37a30 <__assert_fail@plt+0x24fb4>
   37a28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   37a2c:	b	37a48 <__assert_fail@plt+0x24fcc>
   37a30:	ldr	r0, [r7, #44]	; 0x2c
   37a34:	cmp	r0, #0
   37a38:	beq	37a28 <__assert_fail@plt+0x24fac>
   37a3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   37a40:	bl	32c40 <__assert_fail@plt+0x201c4>
   37a44:	mov	r0, #0
   37a48:	str	r0, [fp, #-52]	; 0xffffffcc
   37a4c:	ldr	r5, [r8]
   37a50:	ldr	r0, [r5, #56]	; 0x38
   37a54:	cmp	r0, #0
   37a58:	beq	37a70 <__assert_fail@plt+0x24ff4>
   37a5c:	ldr	r4, [r0]
   37a60:	bl	32c40 <__assert_fail@plt+0x201c4>
   37a64:	cmp	r4, #0
   37a68:	mov	r0, r4
   37a6c:	bne	37a5c <__assert_fail@plt+0x24fe0>
   37a70:	mov	r0, #31
   37a74:	mov	r4, #0
   37a78:	str	r0, [r5, #64]	; 0x40
   37a7c:	str	r4, [r5, #52]	; 0x34
   37a80:	str	r4, [r5, #56]	; 0x38
   37a84:	ldr	r0, [r5, #16]
   37a88:	bl	32c40 <__assert_fail@plt+0x201c4>
   37a8c:	str	r4, [r5, #16]
   37a90:	ldr	r0, [sp, #40]	; 0x28
   37a94:	bl	32c40 <__assert_fail@plt+0x201c4>
   37a98:	ldr	r0, [sp, #44]	; 0x2c
   37a9c:	bl	32c40 <__assert_fail@plt+0x201c4>
   37aa0:	ldrb	r0, [sp, #107]	; 0x6b
   37aa4:	cmp	r0, #0
   37aa8:	beq	37ab4 <__assert_fail@plt+0x25038>
   37aac:	ldr	r0, [sp, #36]	; 0x24
   37ab0:	bl	32c40 <__assert_fail@plt+0x201c4>
   37ab4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   37ab8:	cmp	r0, #0
   37abc:	bne	37ae0 <__assert_fail@plt+0x25064>
   37ac0:	mov	r0, r4
   37ac4:	sub	sp, fp, #28
   37ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37acc:	ldr	sl, [sp, #16]
   37ad0:	b	36cf0 <__assert_fail@plt+0x24274>
   37ad4:	ldr	r8, [sp, #16]
   37ad8:	ldr	r7, [sp, #20]
   37adc:	b	37a48 <__assert_fail@plt+0x24fcc>
   37ae0:	ldr	r0, [sp, #8]
   37ae4:	cmp	r0, #0
   37ae8:	beq	37af4 <__assert_fail@plt+0x25078>
   37aec:	add	r0, r7, #136	; 0x88
   37af0:	bl	12404 <pthread_mutex_destroy@plt>
   37af4:	mov	r0, r7
   37af8:	bl	3868c <__assert_fail@plt+0x25c10>
   37afc:	mov	r0, #0
   37b00:	str	r0, [r8]
   37b04:	str	r0, [r8, #4]
   37b08:	ldr	r4, [fp, #-52]	; 0xffffffcc
   37b0c:	mov	r0, r4
   37b10:	sub	sp, fp, #28
   37b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37b18:	ldr	r8, [sp, #16]
   37b1c:	mov	r0, #0
   37b20:	str	r0, [fp, #-48]	; 0xffffffd0
   37b24:	str	r0, [fp, #-44]	; 0xffffffd4
   37b28:	mov	r0, #12
   37b2c:	str	r0, [fp, #-32]	; 0xffffffe0
   37b30:	b	37a48 <__assert_fail@plt+0x24fcc>
   37b34:	bl	12a28 <abort@plt>
   37b38:	movw	r2, #16064	; 0x3ec0
   37b3c:	movt	r2, #6
   37b40:	ldr	r1, [r2]
   37b44:	str	r0, [r2]
   37b48:	mov	r0, r1
   37b4c:	bx	lr
   37b50:	push	{r4, r5, r6, sl, fp, lr}
   37b54:	add	fp, sp, #16
   37b58:	ldr	r5, [r0, #16]
   37b5c:	ldr	r6, [r0]
   37b60:	mov	r4, r0
   37b64:	mov	r1, #0
   37b68:	mov	r2, #256	; 0x100
   37b6c:	mov	r0, r5
   37b70:	bl	12800 <memset@plt>
   37b74:	ldr	r1, [r6, #36]	; 0x24
   37b78:	mov	r0, r4
   37b7c:	mov	r2, r5
   37b80:	bl	37bec <__assert_fail@plt+0x25170>
   37b84:	ldr	r0, [r6, #36]	; 0x24
   37b88:	ldr	r1, [r6, #40]	; 0x28
   37b8c:	cmp	r0, r1
   37b90:	beq	37ba4 <__assert_fail@plt+0x25128>
   37b94:	mov	r0, r4
   37b98:	mov	r2, r5
   37b9c:	bl	37bec <__assert_fail@plt+0x25170>
   37ba0:	ldr	r0, [r6, #36]	; 0x24
   37ba4:	ldr	r1, [r6, #44]	; 0x2c
   37ba8:	cmp	r0, r1
   37bac:	beq	37bc0 <__assert_fail@plt+0x25144>
   37bb0:	mov	r0, r4
   37bb4:	mov	r2, r5
   37bb8:	bl	37bec <__assert_fail@plt+0x25170>
   37bbc:	ldr	r0, [r6, #36]	; 0x24
   37bc0:	ldr	r1, [r6, #48]	; 0x30
   37bc4:	cmp	r0, r1
   37bc8:	beq	37bd8 <__assert_fail@plt+0x2515c>
   37bcc:	mov	r0, r4
   37bd0:	mov	r2, r5
   37bd4:	bl	37bec <__assert_fail@plt+0x25170>
   37bd8:	ldrb	r0, [r4, #28]
   37bdc:	orr	r0, r0, #8
   37be0:	strb	r0, [r4, #28]
   37be4:	mov	r0, #0
   37be8:	pop	{r4, r5, r6, sl, fp, pc}
   37bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37bf0:	add	fp, sp, #28
   37bf4:	sub	sp, sp, #332	; 0x14c
   37bf8:	ldr	r8, [r0]
   37bfc:	mov	r9, r0
   37c00:	mov	r5, r2
   37c04:	mov	r2, #0
   37c08:	str	r2, [sp, #20]
   37c0c:	ldr	r0, [r8, #92]	; 0x5c
   37c10:	cmp	r0, #1
   37c14:	ldrbeq	r0, [r9, #14]
   37c18:	ubfxeq	r0, r0, #6, #1
   37c1c:	streq	r0, [sp, #20]
   37c20:	ldr	r0, [r1, #8]
   37c24:	cmp	r0, #1
   37c28:	blt	383e4 <__assert_fail@plt+0x25968>
   37c2c:	add	r0, r5, #224	; 0xe0
   37c30:	mov	sl, #1
   37c34:	mov	r2, #0
   37c38:	str	r9, [sp, #16]
   37c3c:	str	r1, [sp, #24]
   37c40:	str	r0, [sp, #52]	; 0x34
   37c44:	add	r0, r5, #192	; 0xc0
   37c48:	str	r0, [sp, #48]	; 0x30
   37c4c:	add	r0, r5, #160	; 0xa0
   37c50:	str	r0, [sp, #44]	; 0x2c
   37c54:	add	r0, r5, #128	; 0x80
   37c58:	str	r0, [sp, #40]	; 0x28
   37c5c:	add	r0, r5, #96	; 0x60
   37c60:	str	r0, [sp, #36]	; 0x24
   37c64:	add	r0, r5, #64	; 0x40
   37c68:	str	r0, [sp, #32]
   37c6c:	add	r0, r5, #32
   37c70:	str	r0, [sp, #12]
   37c74:	add	r0, r5, #31
   37c78:	str	r0, [sp, #8]
   37c7c:	add	r0, sp, #56	; 0x38
   37c80:	add	r0, r0, #1
   37c84:	str	r0, [sp, #4]
   37c88:	ldr	r0, [r1, #12]
   37c8c:	str	r2, [sp, #28]
   37c90:	ldr	r4, [r0, r2, lsl #2]
   37c94:	ldr	r2, [r8]
   37c98:	add	r0, r2, r4, lsl #3
   37c9c:	ldrb	r6, [r0, #4]
   37ca0:	sub	r0, r6, #1
   37ca4:	cmp	r0, #6
   37ca8:	bhi	383cc <__assert_fail@plt+0x25950>
   37cac:	add	r1, pc, #0
   37cb0:	ldr	pc, [r1, r0, lsl #2]
   37cb4:	ldrdeq	r7, [r3], -r0
   37cb8:	andeq	r8, r3, ip, ror #7
   37cbc:	ldrdeq	r7, [r3], -r0
   37cc0:	andeq	r8, r3, ip, asr #7
   37cc4:	andeq	r8, r3, ip, ror #7
   37cc8:	andeq	r8, r3, r0, lsl #1
   37ccc:	andeq	r8, r3, ip, ror #7
   37cd0:	ldr	r0, [sp, #20]
   37cd4:	ldrb	r6, [r2, r4, lsl #3]
   37cd8:	cmp	r0, #0
   37cdc:	strb	sl, [r5, r6]
   37ce0:	beq	37cf4 <__assert_fail@plt+0x25278>
   37ce4:	bl	12710 <__ctype_tolower_loc@plt>
   37ce8:	ldr	r0, [r0]
   37cec:	ldr	r0, [r0, r6, lsl #2]
   37cf0:	strb	sl, [r5, r0]
   37cf4:	ldrb	r0, [r9, #14]
   37cf8:	tst	r0, #64	; 0x40
   37cfc:	beq	383cc <__assert_fail@plt+0x25950>
   37d00:	ldr	r0, [r8, #92]	; 0x5c
   37d04:	cmp	r0, #2
   37d08:	blt	383cc <__assert_fail@plt+0x25950>
   37d0c:	ldr	r0, [r8]
   37d10:	add	r1, r4, #1
   37d14:	movw	r7, #1
   37d18:	add	r6, sp, #56	; 0x38
   37d1c:	movt	r7, #32
   37d20:	ldrb	r0, [r0, r4, lsl #3]
   37d24:	strb	r0, [sp, #56]	; 0x38
   37d28:	ldr	r0, [r8, #8]
   37d2c:	cmp	r1, r0
   37d30:	ldr	r0, [sp, #4]
   37d34:	bcs	37d78 <__assert_fail@plt+0x252fc>
   37d38:	ldr	r0, [sp, #4]
   37d3c:	ldr	r1, [r8]
   37d40:	add	r3, r7, #254	; 0xfe
   37d44:	add	r1, r1, r4, lsl #3
   37d48:	ldr	r2, [r1, #12]
   37d4c:	and	r2, r2, r3
   37d50:	cmp	r2, r7
   37d54:	bne	37d78 <__assert_fail@plt+0x252fc>
   37d58:	ldrb	r1, [r1, #8]
   37d5c:	add	r3, r4, #2
   37d60:	strb	r1, [r0], #1
   37d64:	add	r1, r4, #1
   37d68:	ldr	r2, [r8, #8]
   37d6c:	mov	r4, r1
   37d70:	cmp	r3, r2
   37d74:	bcc	37d3c <__assert_fail@plt+0x252c0>
   37d78:	mov	r1, #0
   37d7c:	sub	r4, r0, r6
   37d80:	sub	r7, fp, #48	; 0x30
   37d84:	sub	r0, fp, #36	; 0x24
   37d88:	str	r1, [fp, #-44]	; 0xffffffd4
   37d8c:	str	r1, [fp, #-48]	; 0xffffffd0
   37d90:	mov	r1, r6
   37d94:	mov	r2, r4
   37d98:	mov	r3, r7
   37d9c:	bl	35638 <__assert_fail@plt+0x22bbc>
   37da0:	cmp	r0, r4
   37da4:	bne	383cc <__assert_fail@plt+0x25950>
   37da8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   37dac:	bl	124e8 <towlower@plt>
   37db0:	mov	r1, r0
   37db4:	mov	r0, r6
   37db8:	mov	r2, r7
   37dbc:	bl	1238c <wcrtomb@plt>
   37dc0:	cmn	r0, #1
   37dc4:	ldrbne	r0, [sp, #56]	; 0x38
   37dc8:	strbne	sl, [r5, r0]
   37dcc:	b	383cc <__assert_fail@plt+0x25950>
   37dd0:	ldr	r0, [sp, #20]
   37dd4:	cmp	r0, #0
   37dd8:	beq	3822c <__assert_fail@plt+0x257b0>
   37ddc:	ldr	r0, [r2, r4, lsl #3]
   37de0:	mov	r6, #0
   37de4:	ldr	r7, [r0]
   37de8:	tst	r7, sl, lsl r6
   37dec:	beq	37e1c <__assert_fail@plt+0x253a0>
   37df0:	add	r1, r6, #128	; 0x80
   37df4:	mov	r0, r5
   37df8:	lsr	r1, r1, #7
   37dfc:	strb	sl, [r0, r6]!
   37e00:	cmp	r1, #2
   37e04:	bhi	37e18 <__assert_fail@plt+0x2539c>
   37e08:	bl	12710 <__ctype_tolower_loc@plt>
   37e0c:	ldr	r0, [r0]
   37e10:	ldr	r0, [r0, r6, lsl #2]
   37e14:	add	r0, r5, r0
   37e18:	strb	sl, [r0]
   37e1c:	add	r6, r6, #1
   37e20:	cmp	r6, #32
   37e24:	bne	37de8 <__assert_fail@plt+0x2536c>
   37e28:	ldr	r0, [r8]
   37e2c:	ldr	r6, [sp, #12]
   37e30:	mov	r9, #0
   37e34:	ldr	r0, [r0, r4, lsl #3]
   37e38:	ldr	r7, [r0, #4]
   37e3c:	tst	r7, sl, lsl r9
   37e40:	beq	37e74 <__assert_fail@plt+0x253f8>
   37e44:	add	r1, r9, #160	; 0xa0
   37e48:	mov	r0, r6
   37e4c:	lsr	r1, r1, #7
   37e50:	strb	sl, [r0, r9]!
   37e54:	cmp	r1, #2
   37e58:	bhi	37e70 <__assert_fail@plt+0x253f4>
   37e5c:	bl	12710 <__ctype_tolower_loc@plt>
   37e60:	ldr	r0, [r0]
   37e64:	add	r0, r0, r9, lsl #2
   37e68:	ldr	r0, [r0, #128]	; 0x80
   37e6c:	add	r0, r5, r0
   37e70:	strb	sl, [r0]
   37e74:	add	r9, r9, #1
   37e78:	cmp	r9, #32
   37e7c:	bne	37e3c <__assert_fail@plt+0x253c0>
   37e80:	ldr	r0, [r8]
   37e84:	ldr	r9, [sp, #16]
   37e88:	mov	r6, #0
   37e8c:	ldr	r0, [r0, r4, lsl #3]
   37e90:	ldr	r7, [r0, #8]
   37e94:	tst	r7, sl, lsl r6
   37e98:	beq	37ecc <__assert_fail@plt+0x25450>
   37e9c:	ldr	r0, [sp, #32]
   37ea0:	add	r1, r6, #192	; 0xc0
   37ea4:	lsr	r1, r1, #7
   37ea8:	cmp	r1, #2
   37eac:	strb	sl, [r0, r6]!
   37eb0:	bhi	37ec8 <__assert_fail@plt+0x2544c>
   37eb4:	bl	12710 <__ctype_tolower_loc@plt>
   37eb8:	ldr	r0, [r0]
   37ebc:	add	r0, r0, r6, lsl #2
   37ec0:	ldr	r0, [r0, #256]	; 0x100
   37ec4:	add	r0, r5, r0
   37ec8:	strb	sl, [r0]
   37ecc:	add	r6, r6, #1
   37ed0:	cmp	r6, #32
   37ed4:	bne	37e94 <__assert_fail@plt+0x25418>
   37ed8:	ldr	r0, [r8]
   37edc:	mov	r6, #0
   37ee0:	ldr	r0, [r0, r4, lsl #3]
   37ee4:	ldr	r7, [r0, #12]
   37ee8:	tst	r7, sl, lsl r6
   37eec:	beq	37f20 <__assert_fail@plt+0x254a4>
   37ef0:	ldr	r0, [sp, #36]	; 0x24
   37ef4:	add	r1, r6, #224	; 0xe0
   37ef8:	lsr	r1, r1, #7
   37efc:	cmp	r1, #2
   37f00:	strb	sl, [r0, r6]!
   37f04:	bhi	37f1c <__assert_fail@plt+0x254a0>
   37f08:	bl	12710 <__ctype_tolower_loc@plt>
   37f0c:	ldr	r0, [r0]
   37f10:	add	r0, r0, r6, lsl #2
   37f14:	ldr	r0, [r0, #384]	; 0x180
   37f18:	add	r0, r5, r0
   37f1c:	strb	sl, [r0]
   37f20:	add	r6, r6, #1
   37f24:	cmp	r6, #32
   37f28:	bne	37ee8 <__assert_fail@plt+0x2546c>
   37f2c:	ldr	r0, [r8]
   37f30:	mov	r6, #0
   37f34:	ldr	r0, [r0, r4, lsl #3]
   37f38:	ldr	r7, [r0, #16]
   37f3c:	tst	r7, sl, lsl r6
   37f40:	beq	37f74 <__assert_fail@plt+0x254f8>
   37f44:	ldr	r0, [sp, #40]	; 0x28
   37f48:	add	r1, r6, #256	; 0x100
   37f4c:	lsr	r1, r1, #7
   37f50:	cmp	r1, #2
   37f54:	strb	sl, [r0, r6]!
   37f58:	bhi	37f70 <__assert_fail@plt+0x254f4>
   37f5c:	bl	12710 <__ctype_tolower_loc@plt>
   37f60:	ldr	r0, [r0]
   37f64:	add	r0, r0, r6, lsl #2
   37f68:	ldr	r0, [r0, #512]	; 0x200
   37f6c:	add	r0, r5, r0
   37f70:	strb	sl, [r0]
   37f74:	add	r6, r6, #1
   37f78:	cmp	r6, #32
   37f7c:	bne	37f3c <__assert_fail@plt+0x254c0>
   37f80:	ldr	r0, [r8]
   37f84:	mov	r6, #0
   37f88:	ldr	r0, [r0, r4, lsl #3]
   37f8c:	ldr	r7, [r0, #20]
   37f90:	tst	r7, sl, lsl r6
   37f94:	beq	37fc8 <__assert_fail@plt+0x2554c>
   37f98:	ldr	r0, [sp, #44]	; 0x2c
   37f9c:	add	r1, r6, #288	; 0x120
   37fa0:	lsr	r1, r1, #7
   37fa4:	cmp	r1, #2
   37fa8:	strb	sl, [r0, r6]!
   37fac:	bhi	37fc4 <__assert_fail@plt+0x25548>
   37fb0:	bl	12710 <__ctype_tolower_loc@plt>
   37fb4:	ldr	r0, [r0]
   37fb8:	add	r0, r0, r6, lsl #2
   37fbc:	ldr	r0, [r0, #640]	; 0x280
   37fc0:	add	r0, r5, r0
   37fc4:	strb	sl, [r0]
   37fc8:	add	r6, r6, #1
   37fcc:	cmp	r6, #32
   37fd0:	bne	37f90 <__assert_fail@plt+0x25514>
   37fd4:	ldr	r0, [r8]
   37fd8:	mov	r6, #0
   37fdc:	ldr	r0, [r0, r4, lsl #3]
   37fe0:	ldr	r7, [r0, #24]
   37fe4:	tst	r7, sl, lsl r6
   37fe8:	beq	3801c <__assert_fail@plt+0x255a0>
   37fec:	ldr	r0, [sp, #48]	; 0x30
   37ff0:	add	r1, r6, #320	; 0x140
   37ff4:	lsr	r1, r1, #7
   37ff8:	cmp	r1, #2
   37ffc:	strb	sl, [r0, r6]!
   38000:	bhi	38018 <__assert_fail@plt+0x2559c>
   38004:	bl	12710 <__ctype_tolower_loc@plt>
   38008:	ldr	r0, [r0]
   3800c:	add	r0, r0, r6, lsl #2
   38010:	ldr	r0, [r0, #768]	; 0x300
   38014:	add	r0, r5, r0
   38018:	strb	sl, [r0]
   3801c:	add	r6, r6, #1
   38020:	cmp	r6, #32
   38024:	bne	37fe4 <__assert_fail@plt+0x25568>
   38028:	ldr	r0, [r8]
   3802c:	mov	r6, #0
   38030:	ldr	r0, [r0, r4, lsl #3]
   38034:	ldr	r4, [r0, #28]
   38038:	tst	r4, sl, lsl r6
   3803c:	beq	38070 <__assert_fail@plt+0x255f4>
   38040:	ldr	r0, [sp, #52]	; 0x34
   38044:	add	r1, r6, #352	; 0x160
   38048:	lsr	r1, r1, #7
   3804c:	cmp	r1, #2
   38050:	strb	sl, [r0, r6]!
   38054:	bhi	3806c <__assert_fail@plt+0x255f0>
   38058:	bl	12710 <__ctype_tolower_loc@plt>
   3805c:	ldr	r0, [r0]
   38060:	add	r0, r0, r6, lsl #2
   38064:	ldr	r0, [r0, #896]	; 0x380
   38068:	add	r0, r5, r0
   3806c:	strb	sl, [r0]
   38070:	add	r6, r6, #1
   38074:	cmp	r6, #32
   38078:	bne	38038 <__assert_fail@plt+0x255bc>
   3807c:	b	383cc <__assert_fail@plt+0x25950>
   38080:	ldr	r0, [r8, #92]	; 0x5c
   38084:	ldr	r4, [r2, r4, lsl #3]
   38088:	cmp	r0, #2
   3808c:	blt	380fc <__assert_fail@plt+0x25680>
   38090:	ldr	r0, [r4, #36]	; 0x24
   38094:	cmp	r0, #0
   38098:	bne	380b0 <__assert_fail@plt+0x25634>
   3809c:	ldrb	r0, [r4, #16]
   380a0:	tst	r0, #1
   380a4:	ldreq	r0, [r4, #32]
   380a8:	cmpeq	r0, #0
   380ac:	beq	380fc <__assert_fail@plt+0x25680>
   380b0:	mov	r6, #0
   380b4:	add	r4, sp, #56	; 0x38
   380b8:	sub	r7, fp, #48	; 0x30
   380bc:	strb	r6, [fp, #-48]	; 0xffffffd0
   380c0:	mov	r0, #0
   380c4:	mov	r1, r7
   380c8:	mov	r2, #1
   380cc:	mov	r3, r4
   380d0:	str	r6, [sp, #60]	; 0x3c
   380d4:	str	r6, [sp, #56]	; 0x38
   380d8:	bl	35638 <__assert_fail@plt+0x22bbc>
   380dc:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   380e0:	cmn	r0, #2
   380e4:	add	r0, r1, #1
   380e8:	strbeq	sl, [r5, r1]
   380ec:	tst	r0, #255	; 0xff
   380f0:	strb	r0, [fp, #-48]	; 0xffffffd0
   380f4:	bne	380c0 <__assert_fail@plt+0x25644>
   380f8:	b	383cc <__assert_fail@plt+0x25950>
   380fc:	ldr	r0, [r4, #20]
   38100:	cmp	r0, #1
   38104:	blt	383cc <__assert_fail@plt+0x25950>
   38108:	ldr	r0, [sp, #20]
   3810c:	mov	r7, #0
   38110:	cmp	r0, #0
   38114:	beq	381ac <__assert_fail@plt+0x25730>
   38118:	mov	r0, #0
   3811c:	sub	r2, fp, #48	; 0x30
   38120:	str	r0, [fp, #-44]	; 0xffffffd4
   38124:	str	r0, [fp, #-48]	; 0xffffffd0
   38128:	ldr	r0, [r4]
   3812c:	ldr	r1, [r0, r7, lsl #2]
   38130:	add	r0, sp, #56	; 0x38
   38134:	bl	1238c <wcrtomb@plt>
   38138:	cmn	r0, #1
   3813c:	beq	38158 <__assert_fail@plt+0x256dc>
   38140:	ldrb	r6, [sp, #56]	; 0x38
   38144:	strb	sl, [r5, r6]
   38148:	bl	12710 <__ctype_tolower_loc@plt>
   3814c:	ldr	r0, [r0]
   38150:	ldr	r0, [r0, r6, lsl #2]
   38154:	strb	sl, [r5, r0]
   38158:	ldrb	r0, [r9, #14]
   3815c:	tst	r0, #64	; 0x40
   38160:	beq	38198 <__assert_fail@plt+0x2571c>
   38164:	ldr	r0, [r8, #92]	; 0x5c
   38168:	cmp	r0, #2
   3816c:	blt	38198 <__assert_fail@plt+0x2571c>
   38170:	ldr	r0, [r4]
   38174:	ldr	r0, [r0, r7, lsl #2]
   38178:	bl	124e8 <towlower@plt>
   3817c:	mov	r1, r0
   38180:	add	r0, sp, #56	; 0x38
   38184:	sub	r2, fp, #48	; 0x30
   38188:	bl	1238c <wcrtomb@plt>
   3818c:	cmn	r0, #1
   38190:	ldrbne	r0, [sp, #56]	; 0x38
   38194:	strbne	sl, [r5, r0]
   38198:	ldr	r0, [r4, #20]
   3819c:	add	r7, r7, #1
   381a0:	cmp	r7, r0
   381a4:	blt	38118 <__assert_fail@plt+0x2569c>
   381a8:	b	383cc <__assert_fail@plt+0x25950>
   381ac:	mov	r0, #0
   381b0:	sub	r2, fp, #48	; 0x30
   381b4:	str	r0, [fp, #-44]	; 0xffffffd4
   381b8:	str	r0, [fp, #-48]	; 0xffffffd0
   381bc:	ldr	r0, [r4]
   381c0:	ldr	r1, [r0, r7, lsl #2]
   381c4:	add	r0, sp, #56	; 0x38
   381c8:	bl	1238c <wcrtomb@plt>
   381cc:	cmn	r0, #1
   381d0:	ldrbne	r0, [sp, #56]	; 0x38
   381d4:	strbne	sl, [r5, r0]
   381d8:	ldrb	r0, [r9, #14]
   381dc:	tst	r0, #64	; 0x40
   381e0:	beq	38218 <__assert_fail@plt+0x2579c>
   381e4:	ldr	r0, [r8, #92]	; 0x5c
   381e8:	cmp	r0, #2
   381ec:	blt	38218 <__assert_fail@plt+0x2579c>
   381f0:	ldr	r0, [r4]
   381f4:	ldr	r0, [r0, r7, lsl #2]
   381f8:	bl	124e8 <towlower@plt>
   381fc:	mov	r1, r0
   38200:	add	r0, sp, #56	; 0x38
   38204:	sub	r2, fp, #48	; 0x30
   38208:	bl	1238c <wcrtomb@plt>
   3820c:	cmn	r0, #1
   38210:	ldrbne	r0, [sp, #56]	; 0x38
   38214:	strbne	sl, [r5, r0]
   38218:	ldr	r0, [r4, #20]
   3821c:	add	r7, r7, #1
   38220:	cmp	r7, r0
   38224:	blt	381ac <__assert_fail@plt+0x25730>
   38228:	b	383cc <__assert_fail@plt+0x25950>
   3822c:	ldr	r1, [sp, #8]
   38230:	mov	r0, #0
   38234:	b	38244 <__assert_fail@plt+0x257c8>
   38238:	ldr	r2, [r8]
   3823c:	add	r0, r0, #4
   38240:	add	r1, r1, #32
   38244:	ldr	r2, [r2, r4, lsl #3]
   38248:	ldr	r2, [r2, r0]
   3824c:	tst	r2, #1
   38250:	strbne	sl, [r1, #-31]	; 0xffffffe1
   38254:	tst	r2, #2
   38258:	addne	r3, r5, r0, lsl #3
   3825c:	strbne	sl, [r3, #1]
   38260:	tst	r2, #4
   38264:	addne	r3, r5, r0, lsl #3
   38268:	strbne	sl, [r3, #2]
   3826c:	tst	r2, #8
   38270:	addne	r3, r5, r0, lsl #3
   38274:	strbne	sl, [r3, #3]
   38278:	tst	r2, #16
   3827c:	addne	r3, r5, r0, lsl #3
   38280:	strbne	sl, [r3, #4]
   38284:	tst	r2, #32
   38288:	addne	r3, r5, r0, lsl #3
   3828c:	strbne	sl, [r3, #5]
   38290:	tst	r2, #64	; 0x40
   38294:	addne	r3, r5, r0, lsl #3
   38298:	strbne	sl, [r3, #6]
   3829c:	tst	r2, #128	; 0x80
   382a0:	addne	r3, r5, r0, lsl #3
   382a4:	strbne	sl, [r3, #7]
   382a8:	tst	r2, #256	; 0x100
   382ac:	addne	r3, r5, r0, lsl #3
   382b0:	strbne	sl, [r3, #8]
   382b4:	tst	r2, #512	; 0x200
   382b8:	addne	r3, r5, r0, lsl #3
   382bc:	strbne	sl, [r3, #9]
   382c0:	tst	r2, #1024	; 0x400
   382c4:	addne	r3, r5, r0, lsl #3
   382c8:	strbne	sl, [r3, #10]
   382cc:	tst	r2, #2048	; 0x800
   382d0:	addne	r3, r5, r0, lsl #3
   382d4:	strbne	sl, [r3, #11]
   382d8:	tst	r2, #4096	; 0x1000
   382dc:	addne	r3, r5, r0, lsl #3
   382e0:	strbne	sl, [r3, #12]
   382e4:	tst	r2, #8192	; 0x2000
   382e8:	addne	r3, r5, r0, lsl #3
   382ec:	strbne	sl, [r3, #13]
   382f0:	tst	r2, #16384	; 0x4000
   382f4:	addne	r3, r5, r0, lsl #3
   382f8:	strbne	sl, [r3, #14]
   382fc:	tst	r2, #32768	; 0x8000
   38300:	addne	r3, r5, r0, lsl #3
   38304:	strbne	sl, [r3, #15]
   38308:	tst	r2, #65536	; 0x10000
   3830c:	addne	r3, r5, r0, lsl #3
   38310:	strbne	sl, [r3, #16]
   38314:	tst	r2, #131072	; 0x20000
   38318:	addne	r3, r5, r0, lsl #3
   3831c:	strbne	sl, [r3, #17]
   38320:	tst	r2, #262144	; 0x40000
   38324:	addne	r3, r5, r0, lsl #3
   38328:	strbne	sl, [r3, #18]
   3832c:	tst	r2, #524288	; 0x80000
   38330:	addne	r3, r5, r0, lsl #3
   38334:	strbne	sl, [r3, #19]
   38338:	tst	r2, #1048576	; 0x100000
   3833c:	addne	r3, r5, r0, lsl #3
   38340:	strbne	sl, [r3, #20]
   38344:	tst	r2, #2097152	; 0x200000
   38348:	addne	r3, r5, r0, lsl #3
   3834c:	strbne	sl, [r3, #21]
   38350:	tst	r2, #4194304	; 0x400000
   38354:	addne	r3, r5, r0, lsl #3
   38358:	strbne	sl, [r3, #22]
   3835c:	tst	r2, #8388608	; 0x800000
   38360:	addne	r3, r5, r0, lsl #3
   38364:	strbne	sl, [r3, #23]
   38368:	tst	r2, #16777216	; 0x1000000
   3836c:	addne	r3, r5, r0, lsl #3
   38370:	strbne	sl, [r3, #24]
   38374:	tst	r2, #33554432	; 0x2000000
   38378:	addne	r3, r5, r0, lsl #3
   3837c:	strbne	sl, [r3, #25]
   38380:	tst	r2, #67108864	; 0x4000000
   38384:	addne	r3, r5, r0, lsl #3
   38388:	strbne	sl, [r3, #26]
   3838c:	tst	r2, #134217728	; 0x8000000
   38390:	addne	r3, r5, r0, lsl #3
   38394:	strbne	sl, [r3, #27]
   38398:	tst	r2, #268435456	; 0x10000000
   3839c:	addne	r3, r5, r0, lsl #3
   383a0:	strbne	sl, [r3, #28]
   383a4:	tst	r2, #536870912	; 0x20000000
   383a8:	addne	r3, r5, r0, lsl #3
   383ac:	strbne	sl, [r3, #29]
   383b0:	tst	r2, #1073741824	; 0x40000000
   383b4:	addne	r3, r5, r0, lsl #3
   383b8:	strbne	sl, [r3, #30]
   383bc:	cmn	r2, #1
   383c0:	strble	sl, [r1]
   383c4:	cmp	r0, #28
   383c8:	bne	38238 <__assert_fail@plt+0x257bc>
   383cc:	ldr	r1, [sp, #24]
   383d0:	ldr	r2, [sp, #28]
   383d4:	ldr	r0, [r1, #8]
   383d8:	add	r2, r2, #1
   383dc:	cmp	r2, r0
   383e0:	blt	37c88 <__assert_fail@plt+0x2520c>
   383e4:	sub	sp, fp, #28
   383e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   383ec:	mov	r0, r5
   383f0:	mov	r1, #1
   383f4:	mov	r2, #256	; 0x100
   383f8:	bl	12800 <memset@plt>
   383fc:	cmp	r6, #2
   38400:	ldrbeq	r0, [r9, #28]
   38404:	orreq	r0, r0, #1
   38408:	strbeq	r0, [r9, #28]
   3840c:	sub	sp, fp, #28
   38410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38414:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   38418:	add	fp, sp, #24
   3841c:	mov	r4, r0
   38420:	mov	r0, #0
   38424:	mov	r6, r2
   38428:	mov	r5, r1
   3842c:	str	r0, [r4]
   38430:	str	r0, [r4, #4]
   38434:	str	r0, [r4, #8]
   38438:	mov	r0, #256	; 0x100
   3843c:	bl	35608 <__assert_fail@plt+0x22b8c>
   38440:	cmp	r0, #0
   38444:	str	r0, [r4, #16]
   38448:	beq	38580 <__assert_fail@plt+0x25b04>
   3844c:	movw	r0, #45820	; 0xb2fc
   38450:	tst	r6, #1
   38454:	and	r1, r6, #2
   38458:	mov	r8, r4
   3845c:	movt	r0, #3
   38460:	movweq	r0, #710	; 0x2c6
   38464:	movteq	r0, #257	; 0x101
   38468:	tst	r6, #4
   3846c:	orr	r7, r0, r1, lsl #21
   38470:	bne	38484 <__assert_fail@plt+0x25a08>
   38474:	ldrb	r0, [r8, #28]!
   38478:	and	r0, r0, #127	; 0x7f
   3847c:	strb	r0, [r8]
   38480:	b	384a4 <__assert_fail@plt+0x25a28>
   38484:	ldrb	r0, [r8, #28]!
   38488:	mvn	r1, #127	; 0x7f
   3848c:	orr	r0, r0, r1
   38490:	movw	r1, #45758	; 0xb2be
   38494:	movt	r1, #323	; 0x143
   38498:	strb	r0, [r8]
   3849c:	and	r1, r7, r1
   384a0:	orr	r7, r1, #256	; 0x100
   384a4:	and	r1, r6, #8
   384a8:	and	r0, r0, #239	; 0xef
   384ac:	mov	r9, #0
   384b0:	orr	r0, r0, r1, lsl #1
   384b4:	str	r9, [r4, #20]
   384b8:	strb	r0, [r4, #28]
   384bc:	mov	r0, r5
   384c0:	bl	12788 <strlen@plt>
   384c4:	mov	r2, r0
   384c8:	mov	r0, r4
   384cc:	mov	r1, r5
   384d0:	mov	r3, r7
   384d4:	bl	36440 <__assert_fail@plt+0x239c4>
   384d8:	mov	r5, r0
   384dc:	cmp	r0, #16
   384e0:	movweq	r5, #8
   384e4:	cmp	r5, #0
   384e8:	bne	3858c <__assert_fail@plt+0x25b10>
   384ec:	ldr	r5, [r4, #16]
   384f0:	ldr	r6, [r4]
   384f4:	mov	r1, #0
   384f8:	mov	r2, #256	; 0x100
   384fc:	mov	r0, r5
   38500:	bl	12800 <memset@plt>
   38504:	ldr	r1, [r6, #36]	; 0x24
   38508:	mov	r0, r4
   3850c:	mov	r2, r5
   38510:	bl	37bec <__assert_fail@plt+0x25170>
   38514:	ldr	r0, [r6, #36]	; 0x24
   38518:	ldr	r1, [r6, #40]	; 0x28
   3851c:	cmp	r0, r1
   38520:	beq	38534 <__assert_fail@plt+0x25ab8>
   38524:	mov	r0, r4
   38528:	mov	r2, r5
   3852c:	bl	37bec <__assert_fail@plt+0x25170>
   38530:	ldr	r0, [r6, #36]	; 0x24
   38534:	ldr	r1, [r6, #44]	; 0x2c
   38538:	cmp	r0, r1
   3853c:	beq	38550 <__assert_fail@plt+0x25ad4>
   38540:	mov	r0, r4
   38544:	mov	r2, r5
   38548:	bl	37bec <__assert_fail@plt+0x25170>
   3854c:	ldr	r0, [r6, #36]	; 0x24
   38550:	ldr	r1, [r6, #48]	; 0x30
   38554:	cmp	r0, r1
   38558:	beq	38568 <__assert_fail@plt+0x25aec>
   3855c:	mov	r0, r4
   38560:	mov	r2, r5
   38564:	bl	37bec <__assert_fail@plt+0x25170>
   38568:	ldrb	r0, [r8]
   3856c:	mov	r5, #0
   38570:	orr	r0, r0, #8
   38574:	strb	r0, [r8]
   38578:	mov	r0, r5
   3857c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   38580:	mov	r5, #12
   38584:	mov	r0, r5
   38588:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3858c:	ldr	r0, [r4, #16]
   38590:	bl	32c40 <__assert_fail@plt+0x201c4>
   38594:	mov	r0, r5
   38598:	str	r9, [r4, #16]
   3859c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   385a0:	push	{r4, r5, r6, r7, fp, lr}
   385a4:	add	fp, sp, #16
   385a8:	cmp	r0, #17
   385ac:	bcs	38620 <__assert_fail@plt+0x25ba4>
   385b0:	movw	r1, #9680	; 0x25d0
   385b4:	mov	r4, r2
   385b8:	mov	r2, #5
   385bc:	mov	r5, r3
   385c0:	movt	r1, #5
   385c4:	ldr	r0, [r1, r0, lsl #2]
   385c8:	movw	r1, #9296	; 0x2450
   385cc:	movt	r1, #5
   385d0:	add	r1, r1, r0
   385d4:	mov	r0, #0
   385d8:	bl	1253c <dcgettext@plt>
   385dc:	mov	r6, r0
   385e0:	bl	12788 <strlen@plt>
   385e4:	add	r7, r0, #1
   385e8:	cmp	r5, #0
   385ec:	beq	38608 <__assert_fail@plt+0x25b8c>
   385f0:	cmp	r7, r5
   385f4:	mov	r2, r7
   385f8:	bhi	38610 <__assert_fail@plt+0x25b94>
   385fc:	mov	r0, r4
   38600:	mov	r1, r6
   38604:	bl	124b8 <memcpy@plt>
   38608:	mov	r0, r7
   3860c:	pop	{r4, r5, r6, r7, fp, pc}
   38610:	sub	r2, r5, #1
   38614:	mov	r0, #0
   38618:	strb	r0, [r4, r2]
   3861c:	b	385fc <__assert_fail@plt+0x25b80>
   38620:	bl	12a28 <abort@plt>
   38624:	push	{r4, r5, fp, lr}
   38628:	add	fp, sp, #8
   3862c:	ldr	r5, [r0]
   38630:	mov	r4, r0
   38634:	cmp	r5, #0
   38638:	beq	38664 <__assert_fail@plt+0x25be8>
   3863c:	movw	r0, #9352	; 0x2488
   38640:	movw	r1, #10276	; 0x2824
   38644:	movt	r0, #1
   38648:	movt	r1, #1
   3864c:	orrs	r0, r1, r0
   38650:	beq	3865c <__assert_fail@plt+0x25be0>
   38654:	add	r0, r5, #136	; 0x88
   38658:	bl	12404 <pthread_mutex_destroy@plt>
   3865c:	mov	r0, r5
   38660:	bl	3868c <__assert_fail@plt+0x25c10>
   38664:	mov	r5, #0
   38668:	str	r5, [r4]
   3866c:	str	r5, [r4, #4]
   38670:	ldr	r0, [r4, #16]
   38674:	bl	32c40 <__assert_fail@plt+0x201c4>
   38678:	str	r5, [r4, #16]
   3867c:	ldr	r0, [r4, #20]
   38680:	bl	32c40 <__assert_fail@plt+0x201c4>
   38684:	str	r5, [r4, #20]
   38688:	pop	{r4, r5, fp, pc}
   3868c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38690:	add	fp, sp, #28
   38694:	sub	sp, sp, #4
   38698:	mov	sl, r0
   3869c:	ldr	r0, [r0]
   386a0:	cmp	r0, #0
   386a4:	ldrne	r1, [sl, #8]
   386a8:	cmpne	r1, #0
   386ac:	beq	38724 <__assert_fail@plt+0x25ca8>
   386b0:	movw	r7, #255	; 0xff
   386b4:	mov	r6, #0
   386b8:	movt	r7, #4
   386bc:	b	386c4 <__assert_fail@plt+0x25c48>
   386c0:	ldr	r0, [sl]
   386c4:	add	r1, r0, r6, lsl #3
   386c8:	ldr	r1, [r1, #4]
   386cc:	and	r1, r1, r7
   386d0:	cmp	r1, #3
   386d4:	beq	3870c <__assert_fail@plt+0x25c90>
   386d8:	cmp	r1, #6
   386dc:	bne	38714 <__assert_fail@plt+0x25c98>
   386e0:	ldr	r5, [r0, r6, lsl #3]
   386e4:	ldr	r0, [r5]
   386e8:	bl	32c40 <__assert_fail@plt+0x201c4>
   386ec:	ldr	r0, [r5, #4]
   386f0:	bl	32c40 <__assert_fail@plt+0x201c4>
   386f4:	ldr	r0, [r5, #8]
   386f8:	bl	32c40 <__assert_fail@plt+0x201c4>
   386fc:	ldr	r0, [r5, #12]
   38700:	bl	32c40 <__assert_fail@plt+0x201c4>
   38704:	mov	r0, r5
   38708:	b	38710 <__assert_fail@plt+0x25c94>
   3870c:	ldr	r0, [r0, r6, lsl #3]
   38710:	bl	32c40 <__assert_fail@plt+0x201c4>
   38714:	ldr	r0, [sl, #8]
   38718:	add	r6, r6, #1
   3871c:	cmp	r6, r0
   38720:	bcc	386c0 <__assert_fail@plt+0x25c44>
   38724:	ldr	r0, [sl, #12]
   38728:	bl	32c40 <__assert_fail@plt+0x201c4>
   3872c:	ldr	r0, [sl, #8]
   38730:	cmp	r0, #0
   38734:	beq	387a0 <__assert_fail@plt+0x25d24>
   38738:	add	r7, sl, #20
   3873c:	add	r8, sl, #28
   38740:	add	r9, sl, #24
   38744:	mov	r5, #0
   38748:	mov	r6, #8
   3874c:	ldr	r0, [r9]
   38750:	cmp	r0, #0
   38754:	beq	38760 <__assert_fail@plt+0x25ce4>
   38758:	ldr	r0, [r0, r6]
   3875c:	bl	32c40 <__assert_fail@plt+0x201c4>
   38760:	ldr	r0, [r8]
   38764:	cmp	r0, #0
   38768:	beq	38774 <__assert_fail@plt+0x25cf8>
   3876c:	ldr	r0, [r0, r6]
   38770:	bl	32c40 <__assert_fail@plt+0x201c4>
   38774:	ldr	r0, [r7]
   38778:	cmp	r0, #0
   3877c:	beq	38788 <__assert_fail@plt+0x25d0c>
   38780:	ldr	r0, [r0, r6]
   38784:	bl	32c40 <__assert_fail@plt+0x201c4>
   38788:	ldr	r0, [sl, #8]
   3878c:	add	r5, r5, #1
   38790:	add	r6, r6, #12
   38794:	cmp	r5, r0
   38798:	bcc	3874c <__assert_fail@plt+0x25cd0>
   3879c:	b	387ac <__assert_fail@plt+0x25d30>
   387a0:	add	r8, sl, #28
   387a4:	add	r9, sl, #24
   387a8:	add	r7, sl, #20
   387ac:	ldr	r0, [r7]
   387b0:	bl	32c40 <__assert_fail@plt+0x201c4>
   387b4:	ldr	r0, [r9]
   387b8:	bl	32c40 <__assert_fail@plt+0x201c4>
   387bc:	ldr	r0, [r8]
   387c0:	bl	32c40 <__assert_fail@plt+0x201c4>
   387c4:	ldr	r0, [sl]
   387c8:	bl	32c40 <__assert_fail@plt+0x201c4>
   387cc:	ldr	r5, [sl, #32]
   387d0:	cmp	r5, #0
   387d4:	beq	38834 <__assert_fail@plt+0x25db8>
   387d8:	mov	r6, #0
   387dc:	b	387e8 <__assert_fail@plt+0x25d6c>
   387e0:	ldr	r5, [sl, #32]
   387e4:	add	r6, r6, #1
   387e8:	add	r0, r6, r6, lsl #1
   387ec:	ldr	r0, [r5, r0, lsl #2]!
   387f0:	add	r7, r5, #8
   387f4:	cmp	r0, #1
   387f8:	blt	3881c <__assert_fail@plt+0x25da0>
   387fc:	mov	r4, #0
   38800:	ldr	r0, [r7]
   38804:	ldr	r0, [r0, r4, lsl #2]
   38808:	bl	3b7d0 <__assert_fail@plt+0x28d54>
   3880c:	ldr	r0, [r5]
   38810:	add	r4, r4, #1
   38814:	cmp	r4, r0
   38818:	blt	38800 <__assert_fail@plt+0x25d84>
   3881c:	ldr	r0, [r7]
   38820:	bl	32c40 <__assert_fail@plt+0x201c4>
   38824:	ldr	r0, [sl, #68]	; 0x44
   38828:	cmp	r6, r0
   3882c:	bcc	387e0 <__assert_fail@plt+0x25d64>
   38830:	ldr	r5, [sl, #32]
   38834:	mov	r0, r5
   38838:	bl	32c40 <__assert_fail@plt+0x201c4>
   3883c:	ldr	r0, [sl, #60]	; 0x3c
   38840:	movw	r1, #9748	; 0x2614
   38844:	movt	r1, #5
   38848:	cmp	r0, r1
   3884c:	beq	38854 <__assert_fail@plt+0x25dd8>
   38850:	bl	32c40 <__assert_fail@plt+0x201c4>
   38854:	ldr	r0, [sl, #132]	; 0x84
   38858:	bl	32c40 <__assert_fail@plt+0x201c4>
   3885c:	mov	r0, sl
   38860:	sub	sp, fp, #28
   38864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38868:	b	32c40 <__assert_fail@plt+0x201c4>
   3886c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38870:	add	fp, sp, #28
   38874:	sub	sp, sp, #28
   38878:	ldr	sl, [fp, #8]
   3887c:	mov	r7, #2
   38880:	cmp	sl, #7
   38884:	bhi	38958 <__assert_fail@plt+0x25edc>
   38888:	mov	r5, r0
   3888c:	ldr	r0, [r0]
   38890:	mov	r6, r3
   38894:	mov	r9, r2
   38898:	mov	r4, r1
   3889c:	tst	sl, #4
   388a0:	str	r0, [sp, #24]
   388a4:	bne	388bc <__assert_fail@plt+0x25e40>
   388a8:	mov	r0, r4
   388ac:	bl	12788 <strlen@plt>
   388b0:	mov	r7, r0
   388b4:	mov	r8, #0
   388b8:	b	388c4 <__assert_fail@plt+0x25e48>
   388bc:	ldr	r8, [r6]
   388c0:	ldr	r7, [r6, #4]
   388c4:	movw	r0, #9352	; 0x2488
   388c8:	movw	r1, #10276	; 0x2824
   388cc:	movt	r0, #1
   388d0:	movt	r1, #1
   388d4:	orrs	r0, r1, r0
   388d8:	str	r0, [sp, #20]
   388dc:	beq	388ec <__assert_fail@plt+0x25e70>
   388e0:	ldr	r0, [sp, #24]
   388e4:	add	r0, r0, #136	; 0x88
   388e8:	bl	12464 <pthread_mutex_lock@plt>
   388ec:	ldrb	r0, [r5, #28]
   388f0:	tst	r0, #16
   388f4:	bne	38908 <__assert_fail@plt+0x25e8c>
   388f8:	str	r7, [sp]
   388fc:	stmib	sp, {r7, r9}
   38900:	str	r6, [sp, #12]
   38904:	b	3891c <__assert_fail@plt+0x25ea0>
   38908:	mov	r0, #0
   3890c:	str	r7, [sp]
   38910:	str	r7, [sp, #4]
   38914:	str	r0, [sp, #8]
   38918:	str	r0, [sp, #12]
   3891c:	mov	r0, r5
   38920:	mov	r1, r4
   38924:	mov	r2, r7
   38928:	mov	r3, r8
   3892c:	str	sl, [sp, #16]
   38930:	bl	38964 <__assert_fail@plt+0x25ee8>
   38934:	mov	r7, r0
   38938:	ldr	r0, [sp, #20]
   3893c:	cmp	r0, #0
   38940:	beq	38950 <__assert_fail@plt+0x25ed4>
   38944:	ldr	r0, [sp, #24]
   38948:	add	r0, r0, #136	; 0x88
   3894c:	bl	12338 <pthread_mutex_unlock@plt>
   38950:	cmp	r7, #0
   38954:	movwne	r7, #1
   38958:	mov	r0, r7
   3895c:	sub	sp, fp, #28
   38960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38968:	add	fp, sp, #28
   3896c:	sub	sp, sp, #412	; 0x19c
   38970:	ldr	r8, [r0]
   38974:	str	r2, [sp, #76]	; 0x4c
   38978:	str	r1, [sp, #100]	; 0x64
   3897c:	mov	r7, r0
   38980:	add	r0, sp, #104	; 0x68
   38984:	mov	r1, #0
   38988:	mov	r2, #136	; 0x88
   3898c:	mov	r6, r3
   38990:	mov	r4, #0
   38994:	bl	12800 <memset@plt>
   38998:	str	r8, [sp, #188]	; 0xbc
   3899c:	ldr	sl, [fp, #16]
   389a0:	ldr	ip, [fp, #8]
   389a4:	mov	r5, #0
   389a8:	ldr	r1, [r7, #16]
   389ac:	cmp	r1, #0
   389b0:	beq	389cc <__assert_fail@plt+0x25f50>
   389b4:	ldrb	r2, [r7, #28]
   389b8:	and	r2, r2, #9
   389bc:	cmp	r2, #8
   389c0:	movne	r1, #0
   389c4:	subs	r5, r6, ip
   389c8:	movne	r5, r1
   389cc:	ldr	r2, [r7, #24]
   389d0:	ldr	r1, [r7, #8]
   389d4:	mov	r9, #1
   389d8:	mvn	r3, r2
   389dc:	cmp	r2, sl
   389e0:	addcc	r4, r3, sl
   389e4:	cmp	r1, #0
   389e8:	beq	3af80 <__assert_fail@plt+0x28504>
   389ec:	ldr	r1, [r8, #36]	; 0x24
   389f0:	cmp	r1, #0
   389f4:	ldrne	r2, [r8, #40]	; 0x28
   389f8:	cmpne	r2, #0
   389fc:	beq	3af80 <__assert_fail@plt+0x28504>
   38a00:	ldr	r3, [r8, #44]	; 0x2c
   38a04:	cmp	r3, #0
   38a08:	movne	r0, r7
   38a0c:	ldrne	r7, [r8, #48]	; 0x30
   38a10:	cmpne	r7, #0
   38a14:	beq	3af80 <__assert_fail@plt+0x28504>
   38a18:	ldr	r1, [r1, #8]
   38a1c:	ldr	lr, [r0, #20]
   38a20:	mov	r7, r0
   38a24:	cmp	r1, #0
   38a28:	bne	38a38 <__assert_fail@plt+0x25fbc>
   38a2c:	ldr	r1, [r2, #8]
   38a30:	cmp	r1, #0
   38a34:	beq	3a124 <__assert_fail@plt+0x276a8>
   38a38:	mov	r1, ip
   38a3c:	subs	r0, sl, r4
   38a40:	str	r1, [sp, #80]	; 0x50
   38a44:	str	r4, [sp, #28]
   38a48:	str	r0, [sp, #68]	; 0x44
   38a4c:	mov	r0, #1
   38a50:	str	r0, [sp, #52]	; 0x34
   38a54:	bne	38a68 <__assert_fail@plt+0x25fec>
   38a58:	ldr	r0, [r8, #76]	; 0x4c
   38a5c:	cmp	r0, #0
   38a60:	movwne	r0, #1
   38a64:	str	r0, [sp, #52]	; 0x34
   38a68:	ldr	r0, [r7, #12]
   38a6c:	ldr	r2, [r8, #92]	; 0x5c
   38a70:	ldr	r3, [sp, #100]	; 0x64
   38a74:	ldr	r1, [r8, #8]
   38a78:	str	lr, [sp, #168]	; 0xa8
   38a7c:	str	r3, [sp, #104]	; 0x68
   38a80:	str	r2, [sp, #184]	; 0xb8
   38a84:	ubfx	r3, r0, #22, #1
   38a88:	and	r0, r0, #4194304	; 0x400000
   38a8c:	ldr	r4, [sp, #76]	; 0x4c
   38a90:	str	r8, [sp, #96]	; 0x60
   38a94:	orrs	sl, lr, r0
   38a98:	strb	r3, [sp, #176]	; 0xb0
   38a9c:	add	r3, sp, #104	; 0x68
   38aa0:	movwne	sl, #1
   38aa4:	add	r3, r3, #44	; 0x2c
   38aa8:	strb	sl, [sp, #179]	; 0xb3
   38aac:	ldrb	r0, [r8, #88]	; 0x58
   38ab0:	vdup.32	q8, r4
   38ab4:	add	r8, r1, #1
   38ab8:	vst1.32	{d16-d17}, [r3]
   38abc:	cmp	r2, r8
   38ac0:	movgt	r8, r2
   38ac4:	ubfx	r3, r0, #3, #1
   38ac8:	strb	r3, [sp, #178]	; 0xb2
   38acc:	ubfx	r0, r0, #2, #1
   38ad0:	str	r7, [sp, #64]	; 0x40
   38ad4:	str	r5, [sp, #92]	; 0x5c
   38ad8:	str	lr, [sp, #88]	; 0x58
   38adc:	strb	r0, [sp, #177]	; 0xb1
   38ae0:	add	r0, r4, #1
   38ae4:	cmp	r0, r8
   38ae8:	movlt	r8, r0
   38aec:	cmp	r2, #2
   38af0:	blt	38b24 <__assert_fail@plt+0x260a8>
   38af4:	mov	r9, #12
   38af8:	cmn	r8, #-1073741823	; 0xc0000001
   38afc:	bhi	3af2c <__assert_fail@plt+0x284b0>
   38b00:	lsl	r1, r8, #2
   38b04:	mov	r0, #0
   38b08:	bl	36328 <__assert_fail@plt+0x238ac>
   38b0c:	ldr	lr, [sp, #88]	; 0x58
   38b10:	ldr	r5, [sp, #92]	; 0x5c
   38b14:	cmp	r0, #0
   38b18:	beq	3af2c <__assert_fail@plt+0x284b0>
   38b1c:	ldr	r7, [sp, #64]	; 0x40
   38b20:	str	r0, [sp, #112]	; 0x70
   38b24:	ldr	r4, [sp, #96]	; 0x60
   38b28:	mov	r9, r7
   38b2c:	mov	r7, #1
   38b30:	cmp	sl, #0
   38b34:	beq	38b5c <__assert_fail@plt+0x260e0>
   38b38:	mov	r0, #0
   38b3c:	mov	r1, r8
   38b40:	mov	r7, #0
   38b44:	bl	36328 <__assert_fail@plt+0x238ac>
   38b48:	cmp	r0, #0
   38b4c:	beq	3ad24 <__assert_fail@plt+0x282a8>
   38b50:	ldr	r5, [sp, #92]	; 0x5c
   38b54:	ldr	lr, [sp, #88]	; 0x58
   38b58:	str	r0, [sp, #108]	; 0x6c
   38b5c:	add	r1, r4, #96	; 0x60
   38b60:	str	r8, [sp, #140]	; 0x8c
   38b64:	ldr	r0, [fp, #12]
   38b68:	cmp	r7, #0
   38b6c:	str	r1, [sp, #172]	; 0xac
   38b70:	ldrb	r1, [r4, #88]	; 0x58
   38b74:	ubfx	r1, r1, #4, #1
   38b78:	strb	r1, [sp, #182]	; 0xb6
   38b7c:	mov	r1, #0
   38b80:	beq	38b9c <__assert_fail@plt+0x26120>
   38b84:	ldr	r1, [sp, #100]	; 0x64
   38b88:	str	r1, [sp, #108]	; 0x6c
   38b8c:	ldr	r1, [r4, #92]	; 0x5c
   38b90:	cmp	r1, #1
   38b94:	ldr	r1, [sp, #76]	; 0x4c
   38b98:	movwgt	r1, #0
   38b9c:	str	r1, [sp, #136]	; 0x88
   38ba0:	str	r1, [sp, #132]	; 0x84
   38ba4:	str	r0, [sp, #160]	; 0xa0
   38ba8:	str	r0, [sp, #156]	; 0x9c
   38bac:	ldrb	r0, [r9, #28]
   38bb0:	lsr	r0, r0, #7
   38bb4:	strb	r0, [sp, #181]	; 0xb5
   38bb8:	mvn	r0, #0
   38bbc:	ldr	r4, [r4, #76]	; 0x4c
   38bc0:	str	r0, [sp, #196]	; 0xc4
   38bc4:	ldr	r0, [fp, #24]
   38bc8:	lsl	sl, r4, #1
   38bcc:	cmp	r4, #1
   38bd0:	str	r0, [sp, #192]	; 0xc0
   38bd4:	blt	38c24 <__assert_fail@plt+0x261a8>
   38bd8:	movw	r0, #43690	; 0xaaaa
   38bdc:	mov	r9, #12
   38be0:	movt	r0, #2730	; 0xaaa
   38be4:	cmp	sl, r0
   38be8:	bhi	3af2c <__assert_fail@plt+0x284b0>
   38bec:	add	r0, r4, r4, lsl #1
   38bf0:	lsl	r0, r0, #4
   38bf4:	bl	35608 <__assert_fail@plt+0x22b8c>
   38bf8:	mov	r7, r0
   38bfc:	str	r0, [sp, #220]	; 0xdc
   38c00:	lsl	r0, r4, #3
   38c04:	bl	35608 <__assert_fail@plt+0x22b8c>
   38c08:	cmp	r0, #0
   38c0c:	str	r0, [sp, #236]	; 0xec
   38c10:	beq	3af2c <__assert_fail@plt+0x284b0>
   38c14:	ldr	r5, [sp, #92]	; 0x5c
   38c18:	ldr	lr, [sp, #88]	; 0x58
   38c1c:	cmp	r7, #0
   38c20:	beq	3af2c <__assert_fail@plt+0x284b0>
   38c24:	mov	r0, #1
   38c28:	str	r0, [sp, #224]	; 0xe0
   38c2c:	ldr	r0, [sp, #68]	; 0x44
   38c30:	str	sl, [sp, #216]	; 0xd8
   38c34:	str	sl, [sp, #232]	; 0xe8
   38c38:	cmp	r0, #1
   38c3c:	bhi	38c50 <__assert_fail@plt+0x261d4>
   38c40:	ldr	r0, [sp, #96]	; 0x60
   38c44:	ldrb	r0, [r0, #88]	; 0x58
   38c48:	tst	r0, #2
   38c4c:	beq	38c7c <__assert_fail@plt+0x26200>
   38c50:	mov	r9, #12
   38c54:	cmn	r8, #-1073741822	; 0xc0000002
   38c58:	bhi	3af2c <__assert_fail@plt+0x284b0>
   38c5c:	mov	r0, #4
   38c60:	add	r0, r0, r8, lsl #2
   38c64:	bl	35608 <__assert_fail@plt+0x22b8c>
   38c68:	ldr	lr, [sp, #88]	; 0x58
   38c6c:	ldr	r5, [sp, #92]	; 0x5c
   38c70:	cmp	r0, #0
   38c74:	str	r0, [sp, #204]	; 0xcc
   38c78:	beq	3af2c <__assert_fail@plt+0x284b0>
   38c7c:	ldr	r1, [fp, #24]
   38c80:	ldr	r2, [sp, #80]	; 0x50
   38c84:	str	r6, [fp, #-200]	; 0xffffff38
   38c88:	mov	r8, #1
   38c8c:	mov	r4, r6
   38c90:	mov	r0, #4
   38c94:	tst	r1, #1
   38c98:	mov	r1, #4
   38c9c:	mov	r7, r2
   38ca0:	movweq	r1, #6
   38ca4:	cmp	r2, r6
   38ca8:	str	r1, [sp, #164]	; 0xa4
   38cac:	ldr	r1, [sp, #96]	; 0x60
   38cb0:	mvnlt	r8, #0
   38cb4:	movlt	r7, r6
   38cb8:	movlt	r4, r2
   38cbc:	cmp	r5, #0
   38cc0:	ldr	r1, [r1, #92]	; 0x5c
   38cc4:	str	r1, [sp, #60]	; 0x3c
   38cc8:	beq	38d0c <__assert_fail@plt+0x26290>
   38ccc:	cmp	r1, #1
   38cd0:	beq	38cf0 <__assert_fail@plt+0x26274>
   38cd4:	ldr	r0, [sp, #64]	; 0x40
   38cd8:	ldr	r0, [r0, #12]
   38cdc:	and	r0, r0, #4194304	; 0x400000
   38ce0:	orr	r0, lr, r0
   38ce4:	clz	r0, r0
   38ce8:	lsr	r0, r0, #5
   38cec:	lsl	r0, r0, #2
   38cf0:	cmp	lr, #0
   38cf4:	mov	r1, lr
   38cf8:	movwne	r1, #1
   38cfc:	cmp	r2, r6
   38d00:	orrge	r1, r1, #2
   38d04:	orr	r0, r1, r0
   38d08:	b	38d10 <__assert_fail@plt+0x26294>
   38d0c:	mov	r0, #8
   38d10:	add	r1, sp, #104	; 0x68
   38d14:	cmp	r2, r6
   38d18:	sub	r0, r0, #4
   38d1c:	str	r7, [sp, #48]	; 0x30
   38d20:	str	r4, [sp, #44]	; 0x2c
   38d24:	str	r8, [sp, #84]	; 0x54
   38d28:	add	r1, r1, #32
   38d2c:	str	r0, [sp, #80]	; 0x50
   38d30:	str	r1, [sp, #24]
   38d34:	sub	r1, fp, #200	; 0xc8
   38d38:	movwlt	r1, #0
   38d3c:	cmp	r1, #0
   38d40:	str	r1, [sp, #36]	; 0x24
   38d44:	movwne	r1, #1
   38d48:	str	r1, [sp, #40]	; 0x28
   38d4c:	sub	r1, fp, #192	; 0xc0
   38d50:	add	r1, r1, #16
   38d54:	str	r1, [sp, #32]
   38d58:	b	39208 <__assert_fail@plt+0x2678c>
   38d5c:	mov	r1, #0
   38d60:	sub	r0, fp, #188	; 0xbc
   38d64:	str	r6, [fp, #-192]	; 0xffffff40
   38d68:	stm	r0, {r1, r5, r8}
   38d6c:	ldr	r0, [sp, #32]
   38d70:	str	r1, [r0]
   38d74:	str	r1, [r0, #4]
   38d78:	str	r1, [r0, #8]
   38d7c:	add	r0, sp, #104	; 0x68
   38d80:	sub	r1, fp, #192	; 0xc0
   38d84:	bl	47ca0 <__assert_fail@plt+0x35224>
   38d88:	mov	r9, r0
   38d8c:	mov	r0, #0
   38d90:	bl	32c40 <__assert_fail@plt+0x201c4>
   38d94:	cmp	r9, #0
   38d98:	bne	39098 <__assert_fail@plt+0x2661c>
   38d9c:	ldr	r0, [r6]
   38da0:	mov	r7, #0
   38da4:	cmp	r0, #0
   38da8:	beq	38e88 <__assert_fail@plt+0x2640c>
   38dac:	b	39f68 <__assert_fail@plt+0x274ec>
   38db0:	ldr	r1, [r7]
   38db4:	cmp	r1, #0
   38db8:	bne	39ea8 <__assert_fail@plt+0x2742c>
   38dbc:	cmp	r3, #1
   38dc0:	blt	38e88 <__assert_fail@plt+0x2640c>
   38dc4:	ldr	r0, [sp, #204]	; 0xcc
   38dc8:	lsl	r4, r3, #2
   38dcc:	add	sl, r3, #1
   38dd0:	sub	r0, r0, #4
   38dd4:	ldr	r1, [r0, r4]
   38dd8:	cmp	r1, #0
   38ddc:	ldrbne	r2, [r1, #52]	; 0x34
   38de0:	tstne	r2, #16
   38de4:	bne	38dfc <__assert_fail@plt+0x26380>
   38de8:	sub	sl, sl, #1
   38dec:	sub	r4, r4, #4
   38df0:	cmp	sl, #2
   38df4:	bge	38dd4 <__assert_fail@plt+0x26358>
   38df8:	b	38e88 <__assert_fail@plt+0x2640c>
   38dfc:	sub	r5, sl, #2
   38e00:	add	r9, sp, #104	; 0x68
   38e04:	mov	r0, r9
   38e08:	mov	r2, r5
   38e0c:	bl	42dec <__assert_fail@plt+0x30370>
   38e10:	mov	r8, r0
   38e14:	mov	r0, r7
   38e18:	mov	r1, #0
   38e1c:	mov	r2, r4
   38e20:	bl	12800 <memset@plt>
   38e24:	ldr	r0, [sp, #32]
   38e28:	mov	r1, #0
   38e2c:	str	r6, [fp, #-192]	; 0xffffff40
   38e30:	str	r7, [fp, #-188]	; 0xffffff44
   38e34:	str	r8, [fp, #-184]	; 0xffffff48
   38e38:	str	r5, [fp, #-180]	; 0xffffff4c
   38e3c:	str	r8, [sp, #56]	; 0x38
   38e40:	mov	r4, r5
   38e44:	str	r1, [r0]
   38e48:	str	r1, [r0, #4]
   38e4c:	str	r1, [r0, #8]
   38e50:	mov	r0, r9
   38e54:	sub	r1, fp, #192	; 0xc0
   38e58:	bl	47ca0 <__assert_fail@plt+0x35224>
   38e5c:	mov	r9, r0
   38e60:	mov	r0, #0
   38e64:	bl	32c40 <__assert_fail@plt+0x201c4>
   38e68:	cmp	r9, #0
   38e6c:	bne	39090 <__assert_fail@plt+0x26614>
   38e70:	ldr	r0, [r6]
   38e74:	mov	r3, r4
   38e78:	cmp	r0, #0
   38e7c:	beq	38db0 <__assert_fail@plt+0x26334>
   38e80:	sub	r3, sl, #2
   38e84:	b	39ea8 <__assert_fail@plt+0x2742c>
   38e88:	mov	r0, r6
   38e8c:	bl	32c40 <__assert_fail@plt+0x201c4>
   38e90:	mov	r0, r7
   38e94:	bl	32c40 <__assert_fail@plt+0x201c4>
   38e98:	ldr	r8, [sp, #84]	; 0x54
   38e9c:	add	r0, sp, #104	; 0x68
   38ea0:	bl	42f90 <__assert_fail@plt+0x30514>
   38ea4:	ldr	r0, [fp, #-200]	; 0xffffff38
   38ea8:	ldr	r4, [sp, #44]	; 0x2c
   38eac:	ldr	r7, [sp, #48]	; 0x30
   38eb0:	mov	r9, #1
   38eb4:	add	r6, r0, r8
   38eb8:	cmp	r6, r4
   38ebc:	str	r6, [fp, #-200]	; 0xffffff38
   38ec0:	blt	3af2c <__assert_fail@plt+0x284b0>
   38ec4:	ldr	r5, [sp, #92]	; 0x5c
   38ec8:	ldr	lr, [sp, #88]	; 0x58
   38ecc:	cmp	r7, r6
   38ed0:	bge	39208 <__assert_fail@plt+0x2678c>
   38ed4:	b	3af2c <__assert_fail@plt+0x284b0>
   38ed8:	ldrb	r0, [sp, #182]	; 0xb6
   38edc:	cmp	r0, #0
   38ee0:	bne	390d0 <__assert_fail@plt+0x26654>
   38ee4:	cmp	r7, #10
   38ee8:	bne	39030 <__assert_fail@plt+0x265b4>
   38eec:	ldrb	r3, [sp, #181]	; 0xb5
   38ef0:	cmp	r3, #0
   38ef4:	movwne	r3, #2
   38ef8:	tst	r3, #1
   38efc:	bne	3902c <__assert_fail@plt+0x265b0>
   38f00:	cmp	r3, #0
   38f04:	beq	39030 <__assert_fail@plt+0x265b4>
   38f08:	ands	r1, r3, #2
   38f0c:	and	r0, r3, #4
   38f10:	cmpne	r0, #0
   38f14:	bne	38f60 <__assert_fail@plt+0x264e4>
   38f18:	cmp	r1, #0
   38f1c:	bne	38f70 <__assert_fail@plt+0x264f4>
   38f20:	ldr	r6, [r4, #36]	; 0x24
   38f24:	cmp	r0, #0
   38f28:	beq	39030 <__assert_fail@plt+0x265b4>
   38f2c:	ldr	r2, [r6, #40]	; 0x28
   38f30:	sub	r0, fp, #196	; 0xc4
   38f34:	mov	r1, r4
   38f38:	mov	r6, lr
   38f3c:	bl	4187c <__assert_fail@plt+0x2ee00>
   38f40:	mov	lr, r6
   38f44:	mov	r6, r0
   38f48:	cmp	r6, #0
   38f4c:	bne	393d4 <__assert_fail@plt+0x26958>
   38f50:	b	3ad24 <__assert_fail@plt+0x282a8>
   38f54:	ldr	r8, [sp, #84]	; 0x54
   38f58:	ldr	r1, [sp, #72]	; 0x48
   38f5c:	b	39c58 <__assert_fail@plt+0x271dc>
   38f60:	ldr	r6, [r4, #48]	; 0x30
   38f64:	cmp	r6, #0
   38f68:	bne	393d4 <__assert_fail@plt+0x26958>
   38f6c:	b	3ad24 <__assert_fail@plt+0x282a8>
   38f70:	ldr	r6, [r4, #44]	; 0x2c
   38f74:	cmp	r6, #0
   38f78:	bne	393d4 <__assert_fail@plt+0x26958>
   38f7c:	b	3ad24 <__assert_fail@plt+0x282a8>
   38f80:	mov	ip, r4
   38f84:	cmn	ip, #1
   38f88:	beq	38e9c <__assert_fail@plt+0x26420>
   38f8c:	b	39c70 <__assert_fail@plt+0x271f4>
   38f90:	mov	r9, r0
   38f94:	mov	r0, r7
   38f98:	bl	32c40 <__assert_fail@plt+0x201c4>
   38f9c:	cmp	r9, #0
   38fa0:	beq	39f68 <__assert_fail@plt+0x274ec>
   38fa4:	b	390a0 <__assert_fail@plt+0x26624>
   38fa8:	ldr	r8, [sp, #84]	; 0x54
   38fac:	cmn	r7, #1
   38fb0:	ble	3903c <__assert_fail@plt+0x265c0>
   38fb4:	mov	r0, #1
   38fb8:	mov	ip, lr
   38fbc:	str	r0, [sp, #56]	; 0x38
   38fc0:	ldr	r0, [sp, #52]	; 0x34
   38fc4:	cmp	r0, #0
   38fc8:	beq	39080 <__assert_fail@plt+0x26604>
   38fcc:	b	39418 <__assert_fail@plt+0x2699c>
   38fd0:	ldr	r0, [r6, #8]
   38fd4:	cmp	r0, #1
   38fd8:	blt	391b4 <__assert_fail@plt+0x26738>
   38fdc:	ldr	r4, [sp, #188]	; 0xbc
   38fe0:	mov	r7, #0
   38fe4:	b	39118 <__assert_fail@plt+0x2669c>
   38fe8:	ldr	r1, [sp, #76]	; 0x4c
   38fec:	mov	r0, #0
   38ff0:	mov	r6, r7
   38ff4:	cmp	r7, r1
   38ff8:	ldr	r1, [sp, #100]	; 0x64
   38ffc:	ldrblt	r0, [r1, r7]
   39000:	cmp	lr, #0
   39004:	ldrbne	r0, [lr, r0]
   39008:	ldrb	r0, [r5, r0]
   3900c:	cmp	r0, #0
   39010:	bne	39370 <__assert_fail@plt+0x268f4>
   39014:	b	3b014 <__assert_fail@plt+0x28598>
   39018:	ldr	r0, [sp, #192]	; 0xc0
   3901c:	and	r0, r0, #2
   39020:	eor	r3, r0, #10
   39024:	tst	r3, #1
   39028:	beq	38f00 <__assert_fail@plt+0x26484>
   3902c:	ldr	r6, [r4, #40]	; 0x28
   39030:	cmp	r6, #0
   39034:	bne	393d4 <__assert_fail@plt+0x26958>
   39038:	b	3ad24 <__assert_fail@plt+0x282a8>
   3903c:	add	r0, sp, #104	; 0x68
   39040:	mov	r1, r6
   39044:	mov	r2, lr
   39048:	mov	r4, lr
   3904c:	bl	42dec <__assert_fail@plt+0x30370>
   39050:	clz	r1, r0
   39054:	cmp	r0, #0
   39058:	mov	ip, r4
   3905c:	mov	lr, r4
   39060:	lsr	r2, r1, #5
   39064:	ldr	r1, [sp, #52]	; 0x34
   39068:	movwne	r0, #1
   3906c:	mvneq	ip, #0
   39070:	str	r0, [sp, #56]	; 0x38
   39074:	orr	r1, r1, r2
   39078:	cmp	r1, #0
   3907c:	bne	39418 <__assert_fail@plt+0x2699c>
   39080:	mov	ip, lr
   39084:	cmn	ip, #1
   39088:	beq	38e9c <__assert_fail@plt+0x26420>
   3908c:	b	39c70 <__assert_fail@plt+0x271f4>
   39090:	str	r7, [sp, #20]
   39094:	b	390a0 <__assert_fail@plt+0x26624>
   39098:	mov	r0, #0
   3909c:	str	r0, [sp, #20]
   390a0:	mov	r0, r6
   390a4:	bl	32c40 <__assert_fail@plt+0x201c4>
   390a8:	ldr	r0, [sp, #20]
   390ac:	bl	32c40 <__assert_fail@plt+0x201c4>
   390b0:	ldr	r7, [sp, #68]	; 0x44
   390b4:	ldr	r6, [sp, #64]	; 0x40
   390b8:	ldr	r8, [sp, #84]	; 0x54
   390bc:	cmp	r9, #0
   390c0:	beq	39f98 <__assert_fail@plt+0x2751c>
   390c4:	cmp	r9, #1
   390c8:	beq	38e9c <__assert_fail@plt+0x26420>
   390cc:	b	3af2c <__assert_fail@plt+0x284b0>
   390d0:	mov	r0, r7
   390d4:	mov	r9, lr
   390d8:	bl	127dc <iswalnum@plt>
   390dc:	mov	lr, r9
   390e0:	cmp	r7, #95	; 0x5f
   390e4:	beq	3902c <__assert_fail@plt+0x265b0>
   390e8:	cmp	r0, #0
   390ec:	beq	38ee4 <__assert_fail@plt+0x26468>
   390f0:	b	3902c <__assert_fail@plt+0x265b0>
   390f4:	ldr	r0, [sp, #236]	; 0xec
   390f8:	lsl	r1, r9, #3
   390fc:	bl	36328 <__assert_fail@plt+0x238ac>
   39100:	cmp	r0, #0
   39104:	beq	39200 <__assert_fail@plt+0x26784>
   39108:	str	r0, [sp, #236]	; 0xec
   3910c:	lsl	r0, r9, #1
   39110:	str	r0, [sp, #232]	; 0xe8
   39114:	b	39164 <__assert_fail@plt+0x266e8>
   39118:	ldr	r1, [r6, #12]
   3911c:	ldr	r5, [r1, r7, lsl #2]
   39120:	ldr	r1, [r4]
   39124:	add	r2, r1, r5, lsl #3
   39128:	ldrb	r2, [r2, #4]
   3912c:	cmp	r2, #8
   39130:	bne	391a8 <__assert_fail@plt+0x2672c>
   39134:	ldr	r1, [r1, r5, lsl #3]
   39138:	cmp	r1, #31
   3913c:	bgt	391a8 <__assert_fail@plt+0x2672c>
   39140:	ldr	r2, [r4, #80]	; 0x50
   39144:	mov	r3, #1
   39148:	tst	r2, r3, lsl r1
   3914c:	beq	391a8 <__assert_fail@plt+0x2672c>
   39150:	ldr	r9, [sp, #228]	; 0xe4
   39154:	ldr	r0, [sp, #232]	; 0xe8
   39158:	mov	r8, lr
   3915c:	cmp	r9, r0
   39160:	beq	390f4 <__assert_fail@plt+0x26678>
   39164:	mov	r0, #1
   39168:	mov	r1, #24
   3916c:	bl	325e0 <__assert_fail@plt+0x1fb64>
   39170:	ldr	r1, [sp, #228]	; 0xe4
   39174:	ldr	r2, [sp, #236]	; 0xec
   39178:	str	r0, [r2, r1, lsl #2]
   3917c:	ldr	r0, [sp, #236]	; 0xec
   39180:	ldr	r0, [r0, r1, lsl #2]
   39184:	cmp	r0, #0
   39188:	beq	39200 <__assert_fail@plt+0x26784>
   3918c:	add	r1, r1, #1
   39190:	str	r5, [r0, #4]
   39194:	mov	lr, r8
   39198:	str	r1, [sp, #228]	; 0xe4
   3919c:	mov	r1, #0
   391a0:	str	r1, [r0]
   391a4:	ldr	r0, [r6, #8]
   391a8:	add	r7, r7, #1
   391ac:	cmp	r7, r0
   391b0:	blt	39118 <__assert_fail@plt+0x2669c>
   391b4:	mov	sl, #0
   391b8:	str	sl, [fp, #-196]	; 0xffffff3c
   391bc:	ldrb	r0, [r6, #52]	; 0x34
   391c0:	tst	r0, #64	; 0x40
   391c4:	beq	393f8 <__assert_fail@plt+0x2697c>
   391c8:	add	r1, r6, #4
   391cc:	add	r0, sp, #104	; 0x68
   391d0:	mov	r4, lr
   391d4:	bl	43220 <__assert_fail@plt+0x307a4>
   391d8:	mov	sl, #0
   391dc:	mov	lr, r4
   391e0:	cmp	r0, #0
   391e4:	str	r0, [fp, #-196]	; 0xffffff3c
   391e8:	beq	393f8 <__assert_fail@plt+0x2697c>
   391ec:	ldr	r8, [sp, #84]	; 0x54
   391f0:	mov	ip, r0
   391f4:	cmn	ip, #1
   391f8:	beq	38e9c <__assert_fail@plt+0x26420>
   391fc:	b	39c70 <__assert_fail@plt+0x271f4>
   39200:	mov	ip, #12
   39204:	b	39c78 <__assert_fail@plt+0x271fc>
   39208:	ldr	r1, [sp, #80]	; 0x50
   3920c:	cmp	r1, #4
   39210:	bhi	39280 <__assert_fail@plt+0x26804>
   39214:	add	r0, pc, #0
   39218:	ldr	pc, [r0, r1, lsl #2]
   3921c:	andeq	r9, r3, r0, lsr r2
   39220:	andeq	r9, r3, r0, lsr r2
   39224:	andeq	r9, r3, r8, lsl #6
   39228:	andeq	r9, r3, r8, lsr r3
   3922c:	andeq	r9, r3, r0, ror r3
   39230:	mov	r9, #1
   39234:	cmp	r6, r4
   39238:	blt	3af2c <__assert_fail@plt+0x284b0>
   3923c:	cmp	lr, #0
   39240:	beq	39db8 <__assert_fail@plt+0x2733c>
   39244:	ldr	r1, [sp, #76]	; 0x4c
   39248:	mov	r0, #0
   3924c:	cmp	r6, r1
   39250:	ldrlt	r0, [sp, #100]	; 0x64
   39254:	ldrblt	r0, [r0, r6]
   39258:	ldrb	r0, [lr, r0]
   3925c:	ldrb	r0, [r5, r0]
   39260:	cmp	r0, #0
   39264:	bne	39370 <__assert_fail@plt+0x268f4>
   39268:	sub	r0, r6, #1
   3926c:	cmp	r6, r4
   39270:	mov	r6, r0
   39274:	str	r0, [fp, #-200]	; 0xffffff38
   39278:	bgt	39248 <__assert_fail@plt+0x267cc>
   3927c:	b	3af2c <__assert_fail@plt+0x284b0>
   39280:	ldr	r0, [sp, #128]	; 0x80
   39284:	ldr	r2, [sp, #136]	; 0x88
   39288:	sub	r1, r6, r0
   3928c:	cmp	r1, r2
   39290:	bcs	392d4 <__assert_fail@plt+0x26858>
   39294:	ldr	r3, [sp, #132]	; 0x84
   39298:	mov	r2, #0
   3929c:	cmp	r1, r3
   392a0:	ldrcc	r2, [sp, #108]	; 0x6c
   392a4:	ldrbcc	r2, [r2, r1]
   392a8:	ldrb	r1, [r5, r2]
   392ac:	cmp	r1, #0
   392b0:	bne	39370 <__assert_fail@plt+0x268f4>
   392b4:	add	r6, r6, r8
   392b8:	mov	r9, #1
   392bc:	cmp	r6, r4
   392c0:	str	r6, [fp, #-200]	; 0xffffff38
   392c4:	blt	3af2c <__assert_fail@plt+0x284b0>
   392c8:	cmp	r6, r7
   392cc:	ble	39284 <__assert_fail@plt+0x26808>
   392d0:	b	3af2c <__assert_fail@plt+0x284b0>
   392d4:	ldr	r2, [fp, #24]
   392d8:	add	r0, sp, #104	; 0x68
   392dc:	mov	r1, r6
   392e0:	bl	4237c <__assert_fail@plt+0x2f900>
   392e4:	cmp	r0, #0
   392e8:	bne	3ad34 <__assert_fail@plt+0x282b8>
   392ec:	ldr	r0, [sp, #128]	; 0x80
   392f0:	ldr	r6, [fp, #-200]	; 0xffffff38
   392f4:	ldr	r5, [sp, #92]	; 0x5c
   392f8:	ldr	r7, [sp, #48]	; 0x30
   392fc:	ldr	r4, [sp, #44]	; 0x2c
   39300:	sub	r1, r6, r0
   39304:	b	39294 <__assert_fail@plt+0x26818>
   39308:	ldr	r1, [sp, #100]	; 0x64
   3930c:	cmp	r6, r7
   39310:	bge	39368 <__assert_fail@plt+0x268ec>
   39314:	ldrb	r0, [r1, r6]
   39318:	ldrb	r0, [r5, r0]
   3931c:	cmp	r0, #0
   39320:	bne	39368 <__assert_fail@plt+0x268ec>
   39324:	add	r6, r6, #1
   39328:	cmp	r6, r7
   3932c:	str	r6, [fp, #-200]	; 0xffffff38
   39330:	blt	39314 <__assert_fail@plt+0x26898>
   39334:	b	39368 <__assert_fail@plt+0x268ec>
   39338:	cmp	r6, r7
   3933c:	bge	39368 <__assert_fail@plt+0x268ec>
   39340:	ldr	r1, [sp, #100]	; 0x64
   39344:	ldrb	r0, [r1, r6]
   39348:	ldrb	r0, [lr, r0]
   3934c:	ldrb	r0, [r5, r0]
   39350:	cmp	r0, #0
   39354:	bne	39368 <__assert_fail@plt+0x268ec>
   39358:	add	r6, r6, #1
   3935c:	cmp	r6, r7
   39360:	str	r6, [fp, #-200]	; 0xffffff38
   39364:	blt	39344 <__assert_fail@plt+0x268c8>
   39368:	cmp	r6, r7
   3936c:	beq	38fe8 <__assert_fail@plt+0x2656c>
   39370:	ldr	r2, [fp, #24]
   39374:	add	r0, sp, #104	; 0x68
   39378:	mov	r1, r6
   3937c:	bl	4237c <__assert_fail@plt+0x2f900>
   39380:	cmp	r0, #0
   39384:	bne	3ad34 <__assert_fail@plt+0x282b8>
   39388:	ldr	r0, [sp, #60]	; 0x3c
   3938c:	cmp	r0, #1
   39390:	ldrne	r0, [sp, #132]	; 0x84
   39394:	cmpne	r0, #0
   39398:	bne	39cdc <__assert_fail@plt+0x27260>
   3939c:	mov	r0, #0
   393a0:	str	r0, [sp, #212]	; 0xd4
   393a4:	str	r0, [sp, #224]	; 0xe0
   393a8:	str	r0, [sp, #208]	; 0xd0
   393ac:	str	r0, [fp, #-196]	; 0xffffff3c
   393b0:	ldr	r4, [sp, #188]	; 0xbc
   393b4:	ldr	lr, [sp, #144]	; 0x90
   393b8:	ldr	r6, [r4, #36]	; 0x24
   393bc:	ldrsb	r0, [r6, #52]	; 0x34
   393c0:	cmn	r0, #1
   393c4:	ble	39cf0 <__assert_fail@plt+0x27274>
   393c8:	ldr	r5, [sp, #40]	; 0x28
   393cc:	cmp	r6, #0
   393d0:	beq	3ad24 <__assert_fail@plt+0x282a8>
   393d4:	ldr	r0, [sp, #204]	; 0xcc
   393d8:	mov	sl, r5
   393dc:	cmp	r0, #0
   393e0:	beq	393f8 <__assert_fail@plt+0x2697c>
   393e4:	str	r6, [r0, lr, lsl #2]
   393e8:	mov	sl, r5
   393ec:	ldr	r0, [r4, #76]	; 0x4c
   393f0:	cmp	r0, #0
   393f4:	bne	38fd0 <__assert_fail@plt+0x26554>
   393f8:	ldrb	r0, [r6, #52]	; 0x34
   393fc:	sxtb	r7, r0
   39400:	tst	r0, #16
   39404:	bne	38fa8 <__assert_fail@plt+0x2652c>
   39408:	ldr	r8, [sp, #84]	; 0x54
   3940c:	mov	r0, #0
   39410:	mvn	ip, #0
   39414:	str	r0, [sp, #56]	; 0x38
   39418:	ldr	r4, [sp, #144]	; 0x90
   3941c:	ldr	r0, [sp, #160]	; 0xa0
   39420:	cmp	r0, r4
   39424:	ble	39c44 <__assert_fail@plt+0x271c8>
   39428:	ldr	r1, [sp, #36]	; 0x24
   3942c:	b	39b1c <__assert_fail@plt+0x270a0>
   39430:	ldr	r0, [fp, #-196]	; 0xffffff3c
   39434:	cmp	r0, #0
   39438:	bne	3ad24 <__assert_fail@plt+0x282a8>
   3943c:	ldr	r0, [sp, #56]	; 0x38
   39440:	ldr	r1, [sp, #52]	; 0x34
   39444:	clz	r0, r0
   39448:	lsr	r0, r0, #5
   3944c:	orr	r0, r1, r0
   39450:	cmp	r0, #1
   39454:	bne	38f54 <__assert_fail@plt+0x264d8>
   39458:	ldr	r0, [sp, #204]	; 0xcc
   3945c:	cmp	r0, #0
   39460:	beq	38f54 <__assert_fail@plt+0x264d8>
   39464:	mov	r5, lr
   39468:	b	394d4 <__assert_fail@plt+0x26a58>
   3946c:	ldr	r4, [sp, #144]	; 0x90
   39470:	ldr	r8, [sp, #84]	; 0x54
   39474:	cmn	r7, #1
   39478:	bgt	394a0 <__assert_fail@plt+0x26a24>
   3947c:	add	r0, sp, #104	; 0x68
   39480:	mov	r1, r6
   39484:	mov	r2, r4
   39488:	mov	r9, ip
   3948c:	mov	r5, lr
   39490:	bl	42dec <__assert_fail@plt+0x30370>
   39494:	mov	lr, r5
   39498:	cmp	r0, #0
   3949c:	beq	3953c <__assert_fail@plt+0x26ac0>
   394a0:	ldr	r0, [sp, #52]	; 0x34
   394a4:	cmp	r0, #0
   394a8:	beq	38f80 <__assert_fail@plt+0x26504>
   394ac:	mov	r0, #1
   394b0:	mov	r1, #0
   394b4:	mov	ip, r4
   394b8:	str	r0, [sp, #56]	; 0x38
   394bc:	ldr	r0, [sp, #160]	; 0xa0
   394c0:	cmp	r0, r4
   394c4:	bgt	39b1c <__assert_fail@plt+0x270a0>
   394c8:	b	39c58 <__assert_fail@plt+0x271dc>
   394cc:	ldr	r0, [sp, #204]	; 0xcc
   394d0:	mov	ip, r4
   394d4:	ldr	r2, [sp, #144]	; 0x90
   394d8:	ldr	r1, [sp, #208]	; 0xd0
   394dc:	add	r2, r2, #1
   394e0:	sub	r3, r2, #1
   394e4:	cmp	r3, r1
   394e8:	bge	39c4c <__assert_fail@plt+0x271d0>
   394ec:	str	r2, [sp, #144]	; 0x90
   394f0:	ldr	r3, [r0, r2, lsl #2]
   394f4:	add	r2, r2, #1
   394f8:	cmp	r3, #0
   394fc:	beq	394e0 <__assert_fail@plt+0x26a64>
   39500:	sub	r0, fp, #196	; 0xc4
   39504:	add	r1, sp, #104	; 0x68
   39508:	mov	r2, #0
   3950c:	mov	r4, ip
   39510:	bl	43e68 <__assert_fail@plt+0x313ec>
   39514:	cmp	r0, #0
   39518:	mov	r6, r0
   3951c:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   39520:	cmpeq	r0, #0
   39524:	beq	394cc <__assert_fail@plt+0x26a50>
   39528:	cmp	r6, #0
   3952c:	mov	ip, r4
   39530:	mov	lr, r5
   39534:	bne	39c04 <__assert_fail@plt+0x27188>
   39538:	b	38f54 <__assert_fail@plt+0x264d8>
   3953c:	ldr	r1, [sp, #72]	; 0x48
   39540:	mov	ip, r9
   39544:	ldr	r0, [sp, #160]	; 0xa0
   39548:	cmp	r0, r4
   3954c:	bgt	39b1c <__assert_fail@plt+0x270a0>
   39550:	b	39c58 <__assert_fail@plt+0x271dc>
   39554:	add	r1, r4, #2
   39558:	add	r0, sp, #104	; 0x68
   3955c:	mov	r4, ip
   39560:	mov	r5, lr
   39564:	bl	43c58 <__assert_fail@plt+0x311dc>
   39568:	cmp	r0, #0
   3956c:	str	r0, [fp, #-196]	; 0xffffff3c
   39570:	bne	3ad24 <__assert_fail@plt+0x282a8>
   39574:	ldrb	r7, [r8, #52]	; 0x34
   39578:	mov	lr, r5
   3957c:	mov	ip, r4
   39580:	tst	r7, #32
   39584:	beq	39b5c <__assert_fail@plt+0x270e0>
   39588:	ldr	r0, [r8, #8]
   3958c:	cmp	r0, #1
   39590:	blt	399c4 <__assert_fail@plt+0x26f48>
   39594:	ldr	r0, [sp, #188]	; 0xbc
   39598:	mov	r6, #0
   3959c:	str	r0, [sp, #20]
   395a0:	stmib	sp, {sl, lr}
   395a4:	str	r8, [sp, #12]
   395a8:	b	39988 <__assert_fail@plt+0x26f0c>
   395ac:	movw	r0, #65280	; 0xff00
   395b0:	movt	r0, #3
   395b4:	tst	r7, r0
   395b8:	beq	396dc <__assert_fail@plt+0x26c60>
   395bc:	ldr	r0, [sp, #144]	; 0x90
   395c0:	cmn	r0, #1
   395c4:	ble	39608 <__assert_fail@plt+0x26b8c>
   395c8:	ldr	r1, [sp, #152]	; 0x98
   395cc:	mov	r8, sl
   395d0:	cmp	r1, r0
   395d4:	beq	398f0 <__assert_fail@plt+0x26e74>
   395d8:	ldr	r1, [sp, #184]	; 0xb8
   395dc:	cmp	r1, #2
   395e0:	blt	39620 <__assert_fail@plt+0x26ba4>
   395e4:	ldr	r1, [sp, #112]	; 0x70
   395e8:	mov	sl, r8
   395ec:	ldr	r4, [r1, r0, lsl #2]
   395f0:	cmn	r4, #1
   395f4:	bne	3965c <__assert_fail@plt+0x26be0>
   395f8:	sub	r2, r0, #1
   395fc:	cmp	r0, #0
   39600:	mov	r0, r2
   39604:	bgt	395ec <__assert_fail@plt+0x26b70>
   39608:	ldr	r1, [sp, #164]	; 0xa4
   3960c:	and	r0, r1, #1
   39610:	tst	r7, #1024	; 0x400
   39614:	eor	r2, r0, #1
   39618:	bne	39690 <__assert_fail@plt+0x26c14>
   3961c:	b	39698 <__assert_fail@plt+0x26c1c>
   39620:	ldr	r1, [sp, #108]	; 0x6c
   39624:	ldr	r2, [sp, #172]	; 0xac
   39628:	mov	sl, r8
   3962c:	ldrb	r0, [r1, r0]
   39630:	ubfx	r1, r0, #5, #3
   39634:	and	r5, r0, #31
   39638:	ldr	r3, [r2, r1, lsl #2]
   3963c:	mov	r1, #1
   39640:	mov	r2, #0
   39644:	tst	r3, r1, lsl r5
   39648:	bne	39698 <__assert_fail@plt+0x26c1c>
   3964c:	mov	r1, #0
   39650:	cmp	r0, #10
   39654:	beq	39674 <__assert_fail@plt+0x26bf8>
   39658:	b	39680 <__assert_fail@plt+0x26c04>
   3965c:	ldrb	r0, [sp, #182]	; 0xb6
   39660:	cmp	r0, #0
   39664:	bne	39924 <__assert_fail@plt+0x26ea8>
   39668:	mov	r1, #0
   3966c:	cmp	r4, #10
   39670:	bne	39680 <__assert_fail@plt+0x26c04>
   39674:	ldrb	r1, [sp, #181]	; 0xb5
   39678:	cmp	r1, #0
   3967c:	movwne	r1, #2
   39680:	and	r0, r1, #1
   39684:	tst	r7, #1024	; 0x400
   39688:	eor	r2, r0, #1
   3968c:	beq	39698 <__assert_fail@plt+0x26c1c>
   39690:	cmp	r0, #0
   39694:	beq	399b0 <__assert_fail@plt+0x26f34>
   39698:	ldr	r0, [sp, #20]
   3969c:	ldr	r4, [sp, #16]
   396a0:	cmp	r2, #0
   396a4:	ldr	r0, [r0]
   396a8:	add	r0, r0, r4, lsl #3
   396ac:	ldr	r0, [r0, #4]
   396b0:	bne	396bc <__assert_fail@plt+0x26c40>
   396b4:	ands	r2, r0, #2048	; 0x800
   396b8:	bne	399b0 <__assert_fail@plt+0x26f34>
   396bc:	tst	r1, #2
   396c0:	bne	396cc <__assert_fail@plt+0x26c50>
   396c4:	ands	r2, r0, #8192	; 0x2000
   396c8:	bne	399b0 <__assert_fail@plt+0x26f34>
   396cc:	tst	r1, #8
   396d0:	bne	396dc <__assert_fail@plt+0x26c60>
   396d4:	ands	r0, r0, #32768	; 0x8000
   396d8:	bne	399b0 <__assert_fail@plt+0x26f34>
   396dc:	ldr	r3, [sp, #144]	; 0x90
   396e0:	ldr	r0, [sp, #20]
   396e4:	ldr	r1, [sp, #16]
   396e8:	add	r2, sp, #104	; 0x68
   396ec:	mov	r5, ip
   396f0:	bl	459d0 <__assert_fail@plt+0x32f54>
   396f4:	ldmib	sp, {sl, lr}
   396f8:	mov	ip, r5
   396fc:	cmp	r0, #0
   39700:	beq	399b0 <__assert_fail@plt+0x26f34>
   39704:	ldr	r1, [sp, #224]	; 0xe0
   39708:	cmp	r1, r0
   3970c:	movlt	r1, r0
   39710:	str	r1, [sp, #224]	; 0xe0
   39714:	ldr	r3, [sp, #144]	; 0x90
   39718:	ldr	r2, [sp, #140]	; 0x8c
   3971c:	ldr	r1, [sp, #152]	; 0x98
   39720:	ldr	r4, [sp, #208]	; 0xd0
   39724:	add	r3, r3, r0
   39728:	cmp	r2, r3
   3972c:	mov	r8, r3
   39730:	cmple	r2, r1
   39734:	blt	39748 <__assert_fail@plt+0x26ccc>
   39738:	ldr	r0, [sp, #132]	; 0x84
   3973c:	cmp	r0, r3
   39740:	cmple	r0, r1
   39744:	bge	39760 <__assert_fail@plt+0x26ce4>
   39748:	add	r1, r3, #1
   3974c:	add	r0, sp, #104	; 0x68
   39750:	bl	43c58 <__assert_fail@plt+0x311dc>
   39754:	mov	r3, r8
   39758:	cmp	r0, #0
   3975c:	bne	39aa4 <__assert_fail@plt+0x27028>
   39760:	cmp	r3, r4
   39764:	ble	3978c <__assert_fail@plt+0x26d10>
   39768:	sub	r0, r3, r4
   3976c:	mov	r1, #0
   39770:	lsl	r2, r0, #2
   39774:	ldr	r0, [sp, #204]	; 0xcc
   39778:	add	r0, r0, r4, lsl #2
   3977c:	add	r0, r0, #4
   39780:	bl	12800 <memset@plt>
   39784:	mov	r3, r8
   39788:	str	r8, [sp, #208]	; 0xd0
   3978c:	mov	r0, #0
   39790:	ldr	r1, [sp, #20]
   39794:	ldr	r2, [sp, #16]
   39798:	str	r0, [fp, #-48]	; 0xffffffd0
   3979c:	ldr	r0, [sp, #204]	; 0xcc
   397a0:	ldr	r7, [r0, r3, lsl #2]
   397a4:	ldr	r0, [r1, #12]
   397a8:	ldr	r1, [r1, #24]
   397ac:	ldr	r0, [r0, r2, lsl #2]
   397b0:	cmp	r7, #0
   397b4:	add	r0, r0, r0, lsl #1
   397b8:	add	r2, r1, r0, lsl #2
   397bc:	beq	397e0 <__assert_fail@plt+0x26d64>
   397c0:	ldr	r1, [r7, #40]	; 0x28
   397c4:	sub	r0, fp, #192	; 0xc0
   397c8:	bl	440bc <__assert_fail@plt+0x31640>
   397cc:	mov	r3, r8
   397d0:	cmp	r0, #0
   397d4:	str	r0, [fp, #-48]	; 0xffffffd0
   397d8:	beq	397f0 <__assert_fail@plt+0x26d74>
   397dc:	b	39aa8 <__assert_fail@plt+0x2702c>
   397e0:	vldr	d16, [r2]
   397e4:	ldr	r0, [r2, #8]
   397e8:	str	r0, [fp, #-184]	; 0xffffff48
   397ec:	vstr	d16, [fp, #-192]	; 0xffffff40
   397f0:	cmp	r3, #0
   397f4:	ble	39838 <__assert_fail@plt+0x26dbc>
   397f8:	ldr	r1, [sp, #152]	; 0x98
   397fc:	sub	r0, r3, #1
   39800:	cmp	r1, r0
   39804:	beq	39914 <__assert_fail@plt+0x26e98>
   39808:	ldr	r1, [sp, #184]	; 0xb8
   3980c:	cmp	r1, #2
   39810:	blt	39840 <__assert_fail@plt+0x26dc4>
   39814:	ldr	r0, [sp, #112]	; 0x70
   39818:	mov	r1, r3
   3981c:	sub	r0, r0, #4
   39820:	ldr	r4, [r0, r1, lsl #2]
   39824:	cmn	r4, #1
   39828:	bne	39874 <__assert_fail@plt+0x26df8>
   3982c:	sub	r1, r1, #1
   39830:	cmp	r1, #0
   39834:	bgt	39820 <__assert_fail@plt+0x26da4>
   39838:	ldr	r3, [sp, #164]	; 0xa4
   3983c:	b	39898 <__assert_fail@plt+0x26e1c>
   39840:	ldr	r1, [sp, #108]	; 0x6c
   39844:	ldr	r2, [sp, #172]	; 0xac
   39848:	mov	r3, #1
   3984c:	ldrb	r0, [r1, r0]
   39850:	ubfx	r1, r0, #5, #3
   39854:	ldr	r1, [r2, r1, lsl #2]
   39858:	and	r2, r0, #31
   3985c:	tst	r1, r3, lsl r2
   39860:	bne	39898 <__assert_fail@plt+0x26e1c>
   39864:	mov	r3, #0
   39868:	cmp	r0, #10
   3986c:	beq	3988c <__assert_fail@plt+0x26e10>
   39870:	b	39898 <__assert_fail@plt+0x26e1c>
   39874:	ldrb	r0, [sp, #182]	; 0xb6
   39878:	cmp	r0, #0
   3987c:	bne	39958 <__assert_fail@plt+0x26edc>
   39880:	mov	r3, #0
   39884:	cmp	r4, #10
   39888:	bne	39898 <__assert_fail@plt+0x26e1c>
   3988c:	ldrb	r3, [sp, #181]	; 0xb5
   39890:	cmp	r3, #0
   39894:	movwne	r3, #2
   39898:	ldr	r1, [sp, #20]
   3989c:	sub	r0, fp, #48	; 0x30
   398a0:	sub	r2, fp, #192	; 0xc0
   398a4:	bl	4187c <__assert_fail@plt+0x2ee00>
   398a8:	ldr	r1, [sp, #204]	; 0xcc
   398ac:	mov	r2, r8
   398b0:	cmp	r7, #0
   398b4:	str	r0, [r1, r8, lsl #2]
   398b8:	beq	398c8 <__assert_fail@plt+0x26e4c>
   398bc:	ldr	r0, [fp, #-184]	; 0xffffff48
   398c0:	bl	32c40 <__assert_fail@plt+0x201c4>
   398c4:	mov	r2, r8
   398c8:	ldr	r0, [sp, #204]	; 0xcc
   398cc:	mov	ip, r5
   398d0:	ldr	r0, [r0, r2, lsl #2]
   398d4:	ldmib	sp, {sl, lr}
   398d8:	cmp	r0, #0
   398dc:	bne	399b0 <__assert_fail@plt+0x26f34>
   398e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   398e4:	cmp	r0, #0
   398e8:	beq	399b0 <__assert_fail@plt+0x26f34>
   398ec:	b	39ab0 <__assert_fail@plt+0x27034>
   398f0:	ldr	r0, [sp, #192]	; 0xc0
   398f4:	mov	sl, r8
   398f8:	and	r0, r0, #2
   398fc:	eor	r1, r0, #10
   39900:	and	r0, r1, #1
   39904:	tst	r7, #1024	; 0x400
   39908:	eor	r2, r0, #1
   3990c:	bne	39690 <__assert_fail@plt+0x26c14>
   39910:	b	39698 <__assert_fail@plt+0x26c1c>
   39914:	ldr	r0, [sp, #192]	; 0xc0
   39918:	and	r0, r0, #2
   3991c:	eor	r3, r0, #10
   39920:	b	39898 <__assert_fail@plt+0x26e1c>
   39924:	mov	r0, r4
   39928:	mov	r5, ip
   3992c:	bl	127dc <iswalnum@plt>
   39930:	mov	r1, #1
   39934:	mov	r2, #0
   39938:	cmp	r4, #95	; 0x5f
   3993c:	beq	39978 <__assert_fail@plt+0x26efc>
   39940:	ldr	lr, [sp, #8]
   39944:	cmp	r0, #0
   39948:	mov	ip, r5
   3994c:	mov	sl, r8
   39950:	beq	39668 <__assert_fail@plt+0x26bec>
   39954:	b	39698 <__assert_fail@plt+0x26c1c>
   39958:	mov	r0, r4
   3995c:	bl	127dc <iswalnum@plt>
   39960:	mov	r3, #1
   39964:	cmp	r4, #95	; 0x5f
   39968:	beq	39898 <__assert_fail@plt+0x26e1c>
   3996c:	cmp	r0, #0
   39970:	beq	39880 <__assert_fail@plt+0x26e04>
   39974:	b	39898 <__assert_fail@plt+0x26e1c>
   39978:	ldr	lr, [sp, #8]
   3997c:	mov	ip, r5
   39980:	mov	sl, r8
   39984:	b	39698 <__assert_fail@plt+0x26c1c>
   39988:	ldr	r0, [r8, #12]
   3998c:	ldr	r2, [r0, r6, lsl #2]
   39990:	ldr	r0, [sp, #20]
   39994:	ldr	r0, [r0]
   39998:	mov	r1, r2
   3999c:	str	r2, [sp, #16]
   399a0:	add	r0, r0, r2, lsl #3
   399a4:	ldr	r7, [r0, #4]
   399a8:	tst	r7, #1048576	; 0x100000
   399ac:	bne	395ac <__assert_fail@plt+0x26b30>
   399b0:	ldr	r8, [sp, #12]
   399b4:	add	r6, r6, #1
   399b8:	ldr	r0, [r8, #8]
   399bc:	cmp	r6, r0
   399c0:	blt	39988 <__assert_fail@plt+0x26f0c>
   399c4:	mov	r0, #0
   399c8:	str	r0, [fp, #-196]	; 0xffffff3c
   399cc:	b	39b5c <__assert_fail@plt+0x270e0>
   399d0:	ldr	r0, [sp, #144]	; 0x90
   399d4:	mov	r5, r8
   399d8:	cmp	r0, #0
   399dc:	ble	39a24 <__assert_fail@plt+0x26fa8>
   399e0:	ldr	r2, [sp, #152]	; 0x98
   399e4:	sub	r1, r0, #1
   399e8:	mov	r8, sl
   399ec:	cmp	r2, r1
   399f0:	beq	39acc <__assert_fail@plt+0x27050>
   399f4:	ldr	r2, [sp, #184]	; 0xb8
   399f8:	cmp	r2, #2
   399fc:	blt	39a2c <__assert_fail@plt+0x26fb0>
   39a00:	ldr	r1, [sp, #112]	; 0x70
   39a04:	mov	sl, r8
   39a08:	sub	r1, r1, #4
   39a0c:	ldr	r4, [r1, r0, lsl #2]
   39a10:	cmn	r4, #1
   39a14:	bne	39a64 <__assert_fail@plt+0x26fe8>
   39a18:	sub	r0, r0, #1
   39a1c:	cmp	r0, #0
   39a20:	bgt	39a0c <__assert_fail@plt+0x26f90>
   39a24:	ldr	r1, [sp, #164]	; 0xa4
   39a28:	b	39a88 <__assert_fail@plt+0x2700c>
   39a2c:	ldr	r0, [sp, #108]	; 0x6c
   39a30:	ldr	r2, [sp, #172]	; 0xac
   39a34:	mov	sl, r8
   39a38:	ldrb	r0, [r0, r1]
   39a3c:	ubfx	r1, r0, #5, #3
   39a40:	and	r3, r0, #31
   39a44:	ldr	r2, [r2, r1, lsl #2]
   39a48:	mov	r1, #1
   39a4c:	tst	r2, r1, lsl r3
   39a50:	bne	39a88 <__assert_fail@plt+0x2700c>
   39a54:	mov	r1, #0
   39a58:	cmp	r0, #10
   39a5c:	beq	39a7c <__assert_fail@plt+0x27000>
   39a60:	b	39a88 <__assert_fail@plt+0x2700c>
   39a64:	ldrb	r0, [sp, #182]	; 0xb6
   39a68:	cmp	r0, #0
   39a6c:	bne	39ad8 <__assert_fail@plt+0x2705c>
   39a70:	mov	r1, #0
   39a74:	cmp	r4, #10
   39a78:	bne	39a88 <__assert_fail@plt+0x2700c>
   39a7c:	ldrb	r1, [sp, #181]	; 0xb5
   39a80:	cmp	r1, #0
   39a84:	movwne	r1, #2
   39a88:	bfi	r6, r1, #8, #1
   39a8c:	mov	r8, r5
   39a90:	ldr	r6, [r7, r6, lsl #2]
   39a94:	ldr	r0, [sp, #204]	; 0xcc
   39a98:	cmp	r0, #0
   39a9c:	bne	39bd8 <__assert_fail@plt+0x2715c>
   39aa0:	b	39bfc <__assert_fail@plt+0x27180>
   39aa4:	str	r0, [fp, #-48]	; 0xffffffd0
   39aa8:	ldmib	sp, {sl, lr}
   39aac:	mov	ip, r5
   39ab0:	ldr	r8, [sp, #12]
   39ab4:	str	r0, [fp, #-196]	; 0xffffff3c
   39ab8:	mov	r6, #0
   39abc:	ldr	r0, [sp, #204]	; 0xcc
   39ac0:	cmp	r0, #0
   39ac4:	bne	39bd8 <__assert_fail@plt+0x2715c>
   39ac8:	b	39bfc <__assert_fail@plt+0x27180>
   39acc:	mov	r1, #10
   39ad0:	mov	sl, r8
   39ad4:	b	39a88 <__assert_fail@plt+0x2700c>
   39ad8:	mov	r0, r4
   39adc:	str	lr, [sp, #8]
   39ae0:	str	ip, [sp, #20]
   39ae4:	bl	127dc <iswalnum@plt>
   39ae8:	mov	r1, #1
   39aec:	cmp	r4, #95	; 0x5f
   39af0:	beq	39b0c <__assert_fail@plt+0x27090>
   39af4:	ldr	ip, [sp, #20]
   39af8:	ldr	lr, [sp, #8]
   39afc:	cmp	r0, #0
   39b00:	mov	sl, r8
   39b04:	beq	39a70 <__assert_fail@plt+0x26ff4>
   39b08:	b	39a88 <__assert_fail@plt+0x2700c>
   39b0c:	ldr	ip, [sp, #20]
   39b10:	ldr	lr, [sp, #8]
   39b14:	mov	sl, r8
   39b18:	b	39a88 <__assert_fail@plt+0x2700c>
   39b1c:	str	r1, [sp, #72]	; 0x48
   39b20:	ldr	r1, [sp, #140]	; 0x8c
   39b24:	ldr	r0, [sp, #152]	; 0x98
   39b28:	add	r9, r4, #1
   39b2c:	mov	r8, r6
   39b30:	cmp	r9, r1
   39b34:	blt	39b40 <__assert_fail@plt+0x270c4>
   39b38:	cmp	r1, r0
   39b3c:	blt	39554 <__assert_fail@plt+0x26ad8>
   39b40:	ldr	r1, [sp, #132]	; 0x84
   39b44:	cmp	r9, r1
   39b48:	blt	39b54 <__assert_fail@plt+0x270d8>
   39b4c:	cmp	r1, r0
   39b50:	blt	39554 <__assert_fail@plt+0x26ad8>
   39b54:	tst	r7, #32
   39b58:	bne	39588 <__assert_fail@plt+0x26b0c>
   39b5c:	ldr	r1, [sp, #144]	; 0x90
   39b60:	ldr	r0, [sp, #108]	; 0x6c
   39b64:	add	r2, r1, #1
   39b68:	str	r2, [sp, #144]	; 0x90
   39b6c:	ldrb	r6, [r0, r1]
   39b70:	ldr	r0, [r8, #44]	; 0x2c
   39b74:	cmp	r0, #0
   39b78:	bne	39bc8 <__assert_fail@plt+0x2714c>
   39b7c:	ldr	r7, [r8, #48]	; 0x30
   39b80:	cmp	r7, #0
   39b84:	bne	399d0 <__assert_fail@plt+0x26f54>
   39b88:	ldr	r0, [sp, #188]	; 0xbc
   39b8c:	mov	r1, r8
   39b90:	mov	r4, ip
   39b94:	mov	r5, lr
   39b98:	bl	45f18 <__assert_fail@plt+0x3349c>
   39b9c:	mov	lr, r5
   39ba0:	mov	ip, r4
   39ba4:	cmp	r0, #0
   39ba8:	bne	39b70 <__assert_fail@plt+0x270f4>
   39bac:	mov	r0, #12
   39bb0:	mov	r6, #0
   39bb4:	str	r0, [fp, #-196]	; 0xffffff3c
   39bb8:	ldr	r0, [sp, #204]	; 0xcc
   39bbc:	cmp	r0, #0
   39bc0:	bne	39bd8 <__assert_fail@plt+0x2715c>
   39bc4:	b	39bfc <__assert_fail@plt+0x27180>
   39bc8:	ldr	r6, [r0, r6, lsl #2]
   39bcc:	ldr	r0, [sp, #204]	; 0xcc
   39bd0:	cmp	r0, #0
   39bd4:	beq	39bfc <__assert_fail@plt+0x27180>
   39bd8:	sub	r0, fp, #196	; 0xc4
   39bdc:	add	r1, sp, #104	; 0x68
   39be0:	mov	r2, r6
   39be4:	mov	r4, ip
   39be8:	mov	r5, lr
   39bec:	bl	43e68 <__assert_fail@plt+0x313ec>
   39bf0:	mov	lr, r5
   39bf4:	mov	ip, r4
   39bf8:	mov	r6, r0
   39bfc:	cmp	r6, #0
   39c00:	beq	39430 <__assert_fail@plt+0x269b4>
   39c04:	sub	r0, r8, r6
   39c08:	clz	r0, r0
   39c0c:	lsr	r0, r0, #5
   39c10:	ands	sl, sl, r0
   39c14:	ldrb	r0, [r6, #52]	; 0x34
   39c18:	movne	lr, r9
   39c1c:	sxtb	r7, r0
   39c20:	tst	r0, #16
   39c24:	bne	3946c <__assert_fail@plt+0x269f0>
   39c28:	ldr	r4, [sp, #144]	; 0x90
   39c2c:	ldr	r8, [sp, #84]	; 0x54
   39c30:	ldr	r1, [sp, #72]	; 0x48
   39c34:	ldr	r0, [sp, #160]	; 0xa0
   39c38:	cmp	r0, r4
   39c3c:	bgt	39b1c <__assert_fail@plt+0x270a0>
   39c40:	b	39c58 <__assert_fail@plt+0x271dc>
   39c44:	ldr	r1, [sp, #36]	; 0x24
   39c48:	b	39c58 <__assert_fail@plt+0x271dc>
   39c4c:	ldr	r8, [sp, #84]	; 0x54
   39c50:	ldr	r1, [sp, #72]	; 0x48
   39c54:	mov	lr, r5
   39c58:	cmp	r1, #0
   39c5c:	ldrne	r0, [r1]
   39c60:	addne	r0, r0, lr
   39c64:	strne	r0, [r1]
   39c68:	cmn	ip, #1
   39c6c:	beq	38e9c <__assert_fail@plt+0x26420>
   39c70:	cmn	ip, #2
   39c74:	beq	3ad24 <__assert_fail@plt+0x282a8>
   39c78:	ldr	r7, [sp, #68]	; 0x44
   39c7c:	ldr	r6, [sp, #64]	; 0x40
   39c80:	mov	r8, ip
   39c84:	str	ip, [sp, #196]	; 0xc4
   39c88:	cmp	r7, #2
   39c8c:	bcc	39d4c <__assert_fail@plt+0x272d0>
   39c90:	ldrb	r0, [r6, #28]
   39c94:	ands	r0, r0, #16
   39c98:	bne	39d4c <__assert_fail@plt+0x272d0>
   39c9c:	ldr	r0, [sp, #204]	; 0xcc
   39ca0:	mov	r2, ip
   39ca4:	ldr	r1, [r0, ip, lsl #2]
   39ca8:	add	r0, sp, #104	; 0x68
   39cac:	bl	42dec <__assert_fail@plt+0x30370>
   39cb0:	ldr	sl, [sp, #96]	; 0x60
   39cb4:	str	r0, [sp, #200]	; 0xc8
   39cb8:	mov	r5, r0
   39cbc:	ldrb	r0, [sl, #88]	; 0x58
   39cc0:	tst	r0, #1
   39cc4:	bne	39df0 <__assert_fail@plt+0x27374>
   39cc8:	ldr	r0, [sl, #76]	; 0x4c
   39ccc:	mov	r1, r8
   39cd0:	cmp	r0, #0
   39cd4:	bne	39d7c <__assert_fail@plt+0x27300>
   39cd8:	b	39f98 <__assert_fail@plt+0x2751c>
   39cdc:	ldr	r0, [sp, #112]	; 0x70
   39ce0:	ldr	r0, [r0]
   39ce4:	cmn	r0, #1
   39ce8:	bne	3939c <__assert_fail@plt+0x26920>
   39cec:	b	38ea4 <__assert_fail@plt+0x26428>
   39cf0:	ldr	r5, [sp, #40]	; 0x28
   39cf4:	cmp	lr, #0
   39cf8:	ble	39d3c <__assert_fail@plt+0x272c0>
   39cfc:	ldr	r1, [sp, #152]	; 0x98
   39d00:	sub	r0, lr, #1
   39d04:	cmp	r1, r0
   39d08:	beq	39018 <__assert_fail@plt+0x2659c>
   39d0c:	ldr	r1, [sp, #184]	; 0xb8
   39d10:	cmp	r1, #2
   39d14:	blt	39d88 <__assert_fail@plt+0x2730c>
   39d18:	ldr	r0, [sp, #112]	; 0x70
   39d1c:	mov	r1, lr
   39d20:	sub	r0, r0, #4
   39d24:	ldr	r7, [r0, r1, lsl #2]
   39d28:	cmn	r7, #1
   39d2c:	bne	38ed8 <__assert_fail@plt+0x2645c>
   39d30:	sub	r1, r1, #1
   39d34:	cmp	r1, #0
   39d38:	bgt	39d24 <__assert_fail@plt+0x272a8>
   39d3c:	ldr	r3, [sp, #164]	; 0xa4
   39d40:	tst	r3, #1
   39d44:	beq	38f00 <__assert_fail@plt+0x26484>
   39d48:	b	3902c <__assert_fail@plt+0x265b0>
   39d4c:	ldr	sl, [sp, #96]	; 0x60
   39d50:	ldr	r0, [sl, #76]	; 0x4c
   39d54:	cmp	r0, #0
   39d58:	beq	39f98 <__assert_fail@plt+0x2751c>
   39d5c:	ldr	r0, [sp, #204]	; 0xcc
   39d60:	mov	r2, ip
   39d64:	ldr	r1, [r0, ip, lsl #2]
   39d68:	add	r0, sp, #104	; 0x68
   39d6c:	bl	42dec <__assert_fail@plt+0x30370>
   39d70:	mov	r1, r8
   39d74:	mov	r5, r0
   39d78:	str	r0, [sp, #200]	; 0xc8
   39d7c:	cmn	r1, #-1073741823	; 0xc0000001
   39d80:	bcc	39dfc <__assert_fail@plt+0x27380>
   39d84:	b	3ad24 <__assert_fail@plt+0x282a8>
   39d88:	ldr	r1, [sp, #108]	; 0x6c
   39d8c:	ldr	r2, [sp, #172]	; 0xac
   39d90:	mov	r3, #1
   39d94:	ldrb	r0, [r1, r0]
   39d98:	ubfx	r1, r0, #5, #3
   39d9c:	ldr	r1, [r2, r1, lsl #2]
   39da0:	and	r2, r0, #31
   39da4:	tst	r1, r3, lsl r2
   39da8:	bne	3902c <__assert_fail@plt+0x265b0>
   39dac:	cmp	r0, #10
   39db0:	beq	38eec <__assert_fail@plt+0x26470>
   39db4:	b	39030 <__assert_fail@plt+0x265b4>
   39db8:	ldr	r1, [sp, #76]	; 0x4c
   39dbc:	mov	r0, #0
   39dc0:	cmp	r6, r1
   39dc4:	ldrlt	r0, [sp, #100]	; 0x64
   39dc8:	ldrblt	r0, [r0, r6]
   39dcc:	ldrb	r0, [r5, r0]
   39dd0:	cmp	r0, #0
   39dd4:	bne	39370 <__assert_fail@plt+0x268f4>
   39dd8:	sub	r0, r6, #1
   39ddc:	cmp	r6, r4
   39de0:	mov	r6, r0
   39de4:	str	r0, [fp, #-200]	; 0xffffff38
   39de8:	bgt	39dbc <__assert_fail@plt+0x27340>
   39dec:	b	3af2c <__assert_fail@plt+0x284b0>
   39df0:	mov	r1, r8
   39df4:	cmn	r1, #-1073741823	; 0xc0000001
   39df8:	bcs	3ad24 <__assert_fail@plt+0x282a8>
   39dfc:	ldr	r0, [sp, #188]	; 0xbc
   39e00:	str	r0, [sp, #72]	; 0x48
   39e04:	mov	r0, #4
   39e08:	add	r4, r0, r1, lsl #2
   39e0c:	mov	r0, r4
   39e10:	bl	35608 <__assert_fail@plt+0x22b8c>
   39e14:	mov	r6, r0
   39e18:	cmp	r0, #0
   39e1c:	beq	3af8c <__assert_fail@plt+0x28510>
   39e20:	ldr	r0, [sp, #72]	; 0x48
   39e24:	str	r5, [sp, #56]	; 0x38
   39e28:	ldr	r0, [r0, #76]	; 0x4c
   39e2c:	cmp	r0, #0
   39e30:	beq	38d5c <__assert_fail@plt+0x262e0>
   39e34:	mov	r0, r4
   39e38:	bl	35608 <__assert_fail@plt+0x22b8c>
   39e3c:	cmp	r0, #0
   39e40:	beq	3af8c <__assert_fail@plt+0x28510>
   39e44:	mov	r1, #0
   39e48:	mov	r2, r4
   39e4c:	mov	r7, r0
   39e50:	bl	12800 <memset@plt>
   39e54:	ldr	r0, [sp, #32]
   39e58:	mov	r1, #0
   39e5c:	str	r6, [fp, #-192]	; 0xffffff40
   39e60:	str	r7, [fp, #-188]	; 0xffffff44
   39e64:	str	r5, [fp, #-184]	; 0xffffff48
   39e68:	str	r8, [fp, #-180]	; 0xffffff4c
   39e6c:	str	r1, [r0]
   39e70:	str	r1, [r0, #4]
   39e74:	str	r1, [r0, #8]
   39e78:	add	r0, sp, #104	; 0x68
   39e7c:	sub	r1, fp, #192	; 0xc0
   39e80:	bl	47ca0 <__assert_fail@plt+0x35224>
   39e84:	mov	r9, r0
   39e88:	mov	r0, #0
   39e8c:	bl	32c40 <__assert_fail@plt+0x201c4>
   39e90:	cmp	r9, #0
   39e94:	bne	39090 <__assert_fail@plt+0x26614>
   39e98:	ldr	r0, [r6]
   39e9c:	mov	r3, r8
   39ea0:	cmp	r0, #0
   39ea4:	beq	38db0 <__assert_fail@plt+0x26334>
   39ea8:	mov	r1, #0
   39eac:	cmp	r3, #0
   39eb0:	mov	r9, #0
   39eb4:	mov	r8, r3
   39eb8:	str	r1, [sp, #20]
   39ebc:	blt	39f58 <__assert_fail@plt+0x274dc>
   39ec0:	mov	r5, #0
   39ec4:	ldr	r2, [r7, r5, lsl #2]
   39ec8:	cmp	r0, #0
   39ecc:	bne	39ef8 <__assert_fail@plt+0x2747c>
   39ed0:	str	r2, [r6, r5, lsl #2]
   39ed4:	cmp	r5, r3
   39ed8:	bge	39f54 <__assert_fail@plt+0x274d8>
   39edc:	add	r0, r6, r5, lsl #2
   39ee0:	add	r1, r5, #1
   39ee4:	ldr	r0, [r0, #4]
   39ee8:	mov	r5, r1
   39eec:	ldr	r2, [r7, r5, lsl #2]
   39ef0:	cmp	r0, #0
   39ef4:	beq	39ed0 <__assert_fail@plt+0x27454>
   39ef8:	cmp	r2, #0
   39efc:	beq	39f4c <__assert_fail@plt+0x274d0>
   39f00:	sub	sl, fp, #48	; 0x30
   39f04:	add	r1, r0, #4
   39f08:	add	r2, r2, #4
   39f0c:	mov	r0, sl
   39f10:	bl	440bc <__assert_fail@plt+0x31640>
   39f14:	cmp	r0, #0
   39f18:	str	r0, [fp, #-196]	; 0xffffff3c
   39f1c:	bne	38f90 <__assert_fail@plt+0x26514>
   39f20:	ldr	r1, [sp, #72]	; 0x48
   39f24:	sub	r0, fp, #196	; 0xc4
   39f28:	mov	r2, sl
   39f2c:	bl	45730 <__assert_fail@plt+0x32cb4>
   39f30:	str	r0, [r6, r5, lsl #2]
   39f34:	ldr	r0, [fp, #-40]	; 0xffffffd8
   39f38:	bl	32c40 <__assert_fail@plt+0x201c4>
   39f3c:	ldr	r9, [fp, #-196]	; 0xffffff3c
   39f40:	mov	r3, r8
   39f44:	cmp	r9, #0
   39f48:	bne	39f58 <__assert_fail@plt+0x274dc>
   39f4c:	cmp	r5, r3
   39f50:	blt	39edc <__assert_fail@plt+0x27460>
   39f54:	mov	r9, #0
   39f58:	mov	r0, r7
   39f5c:	bl	32c40 <__assert_fail@plt+0x201c4>
   39f60:	cmp	r9, #0
   39f64:	bne	390a0 <__assert_fail@plt+0x26624>
   39f68:	ldr	r0, [sp, #204]	; 0xcc
   39f6c:	bl	32c40 <__assert_fail@plt+0x201c4>
   39f70:	ldr	r0, [sp, #56]	; 0x38
   39f74:	str	r0, [sp, #200]	; 0xc8
   39f78:	mov	r0, #0
   39f7c:	str	r6, [sp, #204]	; 0xcc
   39f80:	str	r8, [sp, #196]	; 0xc4
   39f84:	bl	32c40 <__assert_fail@plt+0x201c4>
   39f88:	mov	r0, #0
   39f8c:	bl	32c40 <__assert_fail@plt+0x201c4>
   39f90:	ldr	r7, [sp, #68]	; 0x44
   39f94:	ldr	r6, [sp, #64]	; 0x40
   39f98:	cmp	r7, #0
   39f9c:	beq	3af28 <__assert_fail@plt+0x284ac>
   39fa0:	ldr	r1, [fp, #16]
   39fa4:	ldr	r5, [fp, #20]
   39fa8:	cmp	r7, #1
   39fac:	beq	39fcc <__assert_fail@plt+0x27550>
   39fb0:	ldr	r0, [sp, #28]
   39fb4:	mvn	r0, r0
   39fb8:	add	r0, r0, r1
   39fbc:	mov	r1, #255	; 0xff
   39fc0:	lsl	r2, r0, #3
   39fc4:	add	r0, r5, #8
   39fc8:	bl	12800 <memset@plt>
   39fcc:	ldr	r1, [sp, #196]	; 0xc4
   39fd0:	mov	r0, #0
   39fd4:	cmp	r7, #2
   39fd8:	sub	r4, fp, #48	; 0x30
   39fdc:	stm	r5, {r0, r1}
   39fe0:	bcc	3ae60 <__assert_fail@plt+0x283e4>
   39fe4:	ldrb	r0, [r6, #28]
   39fe8:	ands	r0, r0, #16
   39fec:	bne	3ae60 <__assert_fail@plt+0x283e4>
   39ff0:	ldr	r0, [sp, #96]	; 0x60
   39ff4:	ldrb	r1, [r0, #88]	; 0x58
   39ff8:	mov	r0, #0
   39ffc:	tst	r1, #1
   3a000:	mov	r1, #0
   3a004:	beq	3a01c <__assert_fail@plt+0x275a0>
   3a008:	ldr	r1, [sp, #96]	; 0x60
   3a00c:	ldr	r2, [r1, #76]	; 0x4c
   3a010:	mov	r1, #0
   3a014:	cmp	r2, #0
   3a018:	movwgt	r1, #1
   3a01c:	movw	r2, #9784	; 0x2638
   3a020:	ldr	r6, [r6]
   3a024:	cmp	r1, #0
   3a028:	mov	r8, #0
   3a02c:	movt	r2, #5
   3a030:	vldr	d16, [r2]
   3a034:	ldr	r2, [r2, #8]
   3a038:	str	r2, [fp, #-40]	; 0xffffffd8
   3a03c:	mov	r2, #16
   3a040:	vstr	d16, [fp, #-48]	; 0xffffffd0
   3a044:	str	r2, [fp, #-188]	; 0xffffff44
   3a048:	sub	r2, fp, #192	; 0xc0
   3a04c:	str	r0, [fp, #-192]	; 0xffffff40
   3a050:	add	r9, r2, #12
   3a054:	str	r9, [fp, #-184]	; 0xffffff48
   3a058:	beq	3a078 <__assert_fail@plt+0x275fc>
   3a05c:	mov	r0, #48	; 0x30
   3a060:	bl	35608 <__assert_fail@plt+0x22b8c>
   3a064:	cmp	r0, #0
   3a068:	str	r0, [fp, #-40]	; 0xffffffd8
   3a06c:	beq	3ad24 <__assert_fail@plt+0x282a8>
   3a070:	ldr	r0, [fp, #-192]	; 0xffffff40
   3a074:	mov	r8, r4
   3a078:	ldr	r4, [r6, #72]	; 0x48
   3a07c:	cmp	r0, r7
   3a080:	bcs	3a158 <__assert_fail@plt+0x276dc>
   3a084:	sub	r0, fp, #192	; 0xc0
   3a088:	mov	r1, r7
   3a08c:	mov	r2, r9
   3a090:	mov	r3, #8
   3a094:	bl	4b838 <__assert_fail@plt+0x38dbc>
   3a098:	cmp	r0, #0
   3a09c:	bne	3a15c <__assert_fail@plt+0x276e0>
   3a0a0:	ldr	r0, [fp, #-184]	; 0xffffff48
   3a0a4:	mov	r4, r9
   3a0a8:	cmp	r0, r9
   3a0ac:	beq	3a0b4 <__assert_fail@plt+0x27638>
   3a0b0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a0b4:	mov	r0, #16
   3a0b8:	mov	r9, #12
   3a0bc:	cmp	r8, #0
   3a0c0:	str	r0, [fp, #-188]	; 0xffffff44
   3a0c4:	mov	r0, #0
   3a0c8:	str	r0, [fp, #-192]	; 0xffffff40
   3a0cc:	str	r4, [fp, #-184]	; 0xffffff48
   3a0d0:	beq	3af2c <__assert_fail@plt+0x284b0>
   3a0d4:	ldr	r1, [r8]
   3a0d8:	ldr	r0, [r8, #8]
   3a0dc:	cmp	r1, #1
   3a0e0:	blt	3adc4 <__assert_fail@plt+0x28348>
   3a0e4:	mov	r5, #0
   3a0e8:	mov	r6, #0
   3a0ec:	add	r0, r0, r5
   3a0f0:	ldr	r0, [r0, #20]
   3a0f4:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a0f8:	ldr	r0, [r8, #8]
   3a0fc:	add	r0, r0, r5
   3a100:	ldr	r0, [r0, #8]
   3a104:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a108:	ldr	r1, [r8]
   3a10c:	ldr	r0, [r8, #8]
   3a110:	add	r6, r6, #1
   3a114:	add	r5, r5, #24
   3a118:	cmp	r6, r1
   3a11c:	blt	3a0ec <__assert_fail@plt+0x27670>
   3a120:	b	3adc4 <__assert_fail@plt+0x28348>
   3a124:	ldr	r1, [r3, #8]
   3a128:	cmp	r1, #0
   3a12c:	beq	3a13c <__assert_fail@plt+0x276c0>
   3a130:	ldrsb	r1, [r7, #28]
   3a134:	cmp	r1, #0
   3a138:	blt	38a38 <__assert_fail@plt+0x25fbc>
   3a13c:	mov	r1, #0
   3a140:	cmp	r6, #0
   3a144:	beq	3ad1c <__assert_fail@plt+0x282a0>
   3a148:	cmp	ip, #0
   3a14c:	mov	r6, #0
   3a150:	bne	3af80 <__assert_fail@plt+0x28504>
   3a154:	b	38a3c <__assert_fail@plt+0x25fc0>
   3a158:	str	r7, [fp, #-192]	; 0xffffff40
   3a15c:	ldr	r0, [fp, #-184]	; 0xffffff48
   3a160:	lsl	r2, r7, #3
   3a164:	mov	r1, r5
   3a168:	str	r2, [sp, #76]	; 0x4c
   3a16c:	str	r0, [sp, #80]	; 0x50
   3a170:	bl	124b8 <memcpy@plt>
   3a174:	ldr	r3, [r5]
   3a178:	ldr	r0, [r5, #4]
   3a17c:	mov	sl, #0
   3a180:	cmp	r3, r0
   3a184:	ble	3a210 <__assert_fail@plt+0x27794>
   3a188:	mov	r0, sl
   3a18c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a190:	ldr	r0, [fp, #-184]	; 0xffffff48
   3a194:	cmp	r0, r9
   3a198:	beq	3a1a0 <__assert_fail@plt+0x27724>
   3a19c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a1a0:	mov	r0, #16
   3a1a4:	cmp	r8, #0
   3a1a8:	str	r0, [fp, #-188]	; 0xffffff44
   3a1ac:	mov	r0, #0
   3a1b0:	str	r0, [fp, #-192]	; 0xffffff40
   3a1b4:	str	r9, [fp, #-184]	; 0xffffff48
   3a1b8:	beq	3ae60 <__assert_fail@plt+0x283e4>
   3a1bc:	ldr	r1, [r8]
   3a1c0:	ldr	r0, [r8, #8]
   3a1c4:	mov	r6, r5
   3a1c8:	cmp	r1, #1
   3a1cc:	blt	3ae58 <__assert_fail@plt+0x283dc>
   3a1d0:	mov	r4, #0
   3a1d4:	mov	r5, #0
   3a1d8:	add	r0, r0, r4
   3a1dc:	ldr	r0, [r0, #20]
   3a1e0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a1e4:	ldr	r0, [r8, #8]
   3a1e8:	add	r0, r0, r4
   3a1ec:	ldr	r0, [r0, #8]
   3a1f0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a1f4:	ldr	r1, [r8]
   3a1f8:	ldr	r0, [r8, #8]
   3a1fc:	add	r5, r5, #1
   3a200:	add	r4, r4, #24
   3a204:	cmp	r5, r1
   3a208:	blt	3a1d8 <__assert_fail@plt+0x2775c>
   3a20c:	b	3ae58 <__assert_fail@plt+0x283dc>
   3a210:	lsl	r0, r7, #4
   3a214:	mov	lr, #1
   3a218:	mov	sl, #0
   3a21c:	str	r6, [sp, #64]	; 0x40
   3a220:	str	r0, [sp, #56]	; 0x38
   3a224:	mov	r0, #0
   3a228:	str	r0, [sp, #72]	; 0x48
   3a22c:	mov	r0, #0
   3a230:	str	r0, [sp, #92]	; 0x5c
   3a234:	ldr	r0, [r6]
   3a238:	add	r1, r0, r4, lsl #3
   3a23c:	ldr	r1, [r1, #4]
   3a240:	uxtb	r2, r1
   3a244:	cmp	r2, #9
   3a248:	beq	3a278 <__assert_fail@plt+0x277fc>
   3a24c:	cmp	r2, #8
   3a250:	bne	3a2e8 <__assert_fail@plt+0x2786c>
   3a254:	ldr	r0, [r0, r4, lsl #3]
   3a258:	add	r0, r0, #1
   3a25c:	cmp	r0, r7
   3a260:	bge	3a2e8 <__assert_fail@plt+0x2786c>
   3a264:	mov	r1, r5
   3a268:	str	r3, [r1, r0, lsl #3]!
   3a26c:	mvn	r0, #0
   3a270:	str	r0, [r1, #4]
   3a274:	b	3a2e8 <__assert_fail@plt+0x2786c>
   3a278:	ldr	r0, [r0, r4, lsl #3]
   3a27c:	add	r0, r0, #1
   3a280:	cmp	r0, r7
   3a284:	bge	3a2e8 <__assert_fail@plt+0x2786c>
   3a288:	ldr	r2, [r5, r0, lsl #3]
   3a28c:	cmp	r2, r3
   3a290:	bge	3a2a8 <__assert_fail@plt+0x2782c>
   3a294:	add	r0, r5, r0, lsl #3
   3a298:	mov	r1, r5
   3a29c:	str	r3, [r0, #4]
   3a2a0:	ldr	r0, [sp, #80]	; 0x50
   3a2a4:	b	3a2c8 <__assert_fail@plt+0x2784c>
   3a2a8:	tst	r1, #524288	; 0x80000
   3a2ac:	beq	3a2e0 <__assert_fail@plt+0x27864>
   3a2b0:	ldr	r1, [sp, #80]	; 0x50
   3a2b4:	ldr	r1, [r1, r0, lsl #3]
   3a2b8:	cmn	r1, #1
   3a2bc:	beq	3a2e0 <__assert_fail@plt+0x27864>
   3a2c0:	ldr	r1, [sp, #80]	; 0x50
   3a2c4:	mov	r0, r5
   3a2c8:	ldr	r2, [sp, #76]	; 0x4c
   3a2cc:	mov	r6, r3
   3a2d0:	bl	124b8 <memcpy@plt>
   3a2d4:	mov	r3, r6
   3a2d8:	mov	lr, #1
   3a2dc:	b	3a2e8 <__assert_fail@plt+0x2786c>
   3a2e0:	add	r0, r5, r0, lsl #3
   3a2e4:	str	r3, [r0, #4]
   3a2e8:	ldr	r0, [r5, #4]
   3a2ec:	cmp	r3, r0
   3a2f0:	ldreq	r0, [sp, #200]	; 0xc8
   3a2f4:	cmpeq	r4, r0
   3a2f8:	beq	3a358 <__assert_fail@plt+0x278dc>
   3a2fc:	cmp	r8, #0
   3a300:	beq	3a430 <__assert_fail@plt+0x279b4>
   3a304:	ldr	r0, [sp, #92]	; 0x5c
   3a308:	cmp	r0, #1
   3a30c:	blt	3a430 <__assert_fail@plt+0x279b4>
   3a310:	mov	r6, r3
   3a314:	subs	r1, r0, #1
   3a318:	beq	3a344 <__assert_fail@plt+0x278c8>
   3a31c:	mov	r0, #0
   3a320:	add	r2, r0, r1
   3a324:	lsr	r3, r2, #1
   3a328:	ldr	r7, [sl, r3, lsl #2]
   3a32c:	cmp	r7, r4
   3a330:	movge	r1, r3
   3a334:	addlt	r0, lr, r2, lsr #1
   3a338:	cmp	r0, r1
   3a33c:	bcc	3a320 <__assert_fail@plt+0x278a4>
   3a340:	b	3a348 <__assert_fail@plt+0x278cc>
   3a344:	mov	r0, #0
   3a348:	ldr	r0, [sl, r0, lsl #2]
   3a34c:	ldr	r7, [sp, #68]	; 0x44
   3a350:	cmp	r0, r4
   3a354:	bne	3a42c <__assert_fail@plt+0x279b0>
   3a358:	cmp	r8, #0
   3a35c:	beq	3add4 <__assert_fail@plt+0x28358>
   3a360:	mov	r0, #0
   3a364:	ldr	r1, [r5, r0, lsl #3]
   3a368:	cmp	r1, #0
   3a36c:	blt	3a380 <__assert_fail@plt+0x27904>
   3a370:	add	r1, r5, r0, lsl #3
   3a374:	ldr	r1, [r1, #4]
   3a378:	cmn	r1, #1
   3a37c:	beq	3a390 <__assert_fail@plt+0x27914>
   3a380:	add	r0, r0, #1
   3a384:	cmp	r0, r7
   3a388:	bcc	3a364 <__assert_fail@plt+0x278e8>
   3a38c:	b	3add4 <__assert_fail@plt+0x28358>
   3a390:	ldr	r0, [r8]
   3a394:	cmp	r0, #0
   3a398:	beq	3add4 <__assert_fail@plt+0x28358>
   3a39c:	sub	r1, r0, #1
   3a3a0:	mov	r0, r5
   3a3a4:	str	r9, [sp, #60]	; 0x3c
   3a3a8:	ldr	r6, [sp, #76]	; 0x4c
   3a3ac:	str	r1, [r8]
   3a3b0:	add	r5, r1, r1, lsl #1
   3a3b4:	ldr	r4, [r8, #8]
   3a3b8:	mov	r2, r6
   3a3bc:	ldr	r9, [r4, r5, lsl #3]!
   3a3c0:	ldr	r1, [r4, #8]
   3a3c4:	bl	124b8 <memcpy@plt>
   3a3c8:	ldr	r0, [r4, #8]
   3a3cc:	mov	r2, r6
   3a3d0:	add	r1, r0, r7, lsl #3
   3a3d4:	ldr	r0, [sp, #80]	; 0x50
   3a3d8:	bl	124b8 <memcpy@plt>
   3a3dc:	mov	r0, sl
   3a3e0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a3e4:	ldr	r0, [r8, #8]
   3a3e8:	add	r0, r0, r5, lsl #3
   3a3ec:	ldr	r0, [r0, #8]
   3a3f0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a3f4:	ldr	r0, [r8, #8]
   3a3f8:	add	r0, r0, r5, lsl #3
   3a3fc:	ldr	r4, [r0, #4]
   3a400:	ldr	sl, [r0, #20]
   3a404:	cmn	r4, #1
   3a408:	ble	3adcc <__assert_fail@plt+0x28350>
   3a40c:	ldr	r1, [r0, #12]
   3a410:	ldr	r0, [r0, #16]
   3a414:	mov	r3, r9
   3a418:	ldr	r9, [sp, #60]	; 0x3c
   3a41c:	mov	lr, #1
   3a420:	str	r1, [sp, #72]	; 0x48
   3a424:	str	r0, [sp, #92]	; 0x5c
   3a428:	b	3a430 <__assert_fail@plt+0x279b4>
   3a42c:	mov	r3, r6
   3a430:	ldr	r5, [sp, #188]	; 0xbc
   3a434:	str	r3, [sp, #84]	; 0x54
   3a438:	ldr	r0, [r5]
   3a43c:	add	r1, r0, r4, lsl #3
   3a440:	ldr	r1, [r1, #4]
   3a444:	tst	r1, #8
   3a448:	bne	3a508 <__assert_fail@plt+0x27a8c>
   3a44c:	tst	r1, #1048576	; 0x100000
   3a450:	str	sl, [sp, #88]	; 0x58
   3a454:	bne	3a58c <__assert_fail@plt+0x27b10>
   3a458:	uxtb	r1, r1
   3a45c:	cmp	r1, #4
   3a460:	bne	3a5b0 <__assert_fail@plt+0x27b34>
   3a464:	ldr	r0, [r0, r4, lsl #3]
   3a468:	mov	r6, #0
   3a46c:	add	r0, r0, #1
   3a470:	cmp	r0, r7
   3a474:	ldrlt	r1, [fp, #20]
   3a478:	ldrlt	r2, [r1, r0, lsl #3]!
   3a47c:	ldrlt	r1, [r1, #4]
   3a480:	sublt	r6, r1, r2
   3a484:	cmp	r8, #0
   3a488:	beq	3a860 <__assert_fail@plt+0x27de4>
   3a48c:	cmp	r0, r7
   3a490:	bge	3a6b4 <__assert_fail@plt+0x27c38>
   3a494:	ldr	r2, [fp, #20]
   3a498:	ldr	r1, [r2, r0, lsl #3]
   3a49c:	cmn	r1, #1
   3a4a0:	beq	3a6b4 <__assert_fail@plt+0x27c38>
   3a4a4:	add	r0, r2, r0, lsl #3
   3a4a8:	ldr	r0, [r0, #4]
   3a4ac:	cmn	r0, #1
   3a4b0:	beq	3a6b4 <__assert_fail@plt+0x27c38>
   3a4b4:	cmp	r6, #0
   3a4b8:	beq	3a890 <__assert_fail@plt+0x27e14>
   3a4bc:	ldr	r0, [sp, #132]	; 0x84
   3a4c0:	sub	r0, r0, r3
   3a4c4:	cmp	r0, r6
   3a4c8:	blt	3a6b4 <__assert_fail@plt+0x27c38>
   3a4cc:	ldr	r2, [sp, #108]	; 0x6c
   3a4d0:	str	r9, [sp, #60]	; 0x3c
   3a4d4:	mov	r9, r3
   3a4d8:	add	r0, r2, r1
   3a4dc:	add	r1, r2, r3
   3a4e0:	mov	r2, r6
   3a4e4:	bl	12518 <memcmp@plt>
   3a4e8:	cmp	r0, #0
   3a4ec:	beq	3ab20 <__assert_fail@plt+0x280a4>
   3a4f0:	ldr	sl, [sp, #60]	; 0x3c
   3a4f4:	ldr	r0, [r8]
   3a4f8:	mov	r5, #0
   3a4fc:	cmp	r0, #0
   3a500:	bne	3a6c8 <__assert_fail@plt+0x27c4c>
   3a504:	b	3ad2c <__assert_fail@plt+0x282b0>
   3a508:	ldr	r0, [sp, #204]	; 0xcc
   3a50c:	ldr	r5, [r5, #20]
   3a510:	ldr	r6, [r0, r3, lsl #2]
   3a514:	ldr	r3, [sp, #92]	; 0x5c
   3a518:	cmp	r3, #1
   3a51c:	blt	3a568 <__assert_fail@plt+0x27aec>
   3a520:	mov	r0, #0
   3a524:	subs	r1, r3, #1
   3a528:	beq	3a54c <__assert_fail@plt+0x27ad0>
   3a52c:	add	r2, r0, r1
   3a530:	lsr	r3, r2, #1
   3a534:	ldr	r7, [sl, r3, lsl #2]
   3a538:	cmp	r7, r4
   3a53c:	movge	r1, r3
   3a540:	addlt	r0, lr, r2, lsr #1
   3a544:	cmp	r0, r1
   3a548:	bcc	3a52c <__assert_fail@plt+0x27ab0>
   3a54c:	ldr	r0, [sl, r0, lsl #2]
   3a550:	ldr	r7, [sp, #68]	; 0x44
   3a554:	ldr	r3, [sp, #92]	; 0x5c
   3a558:	cmp	r0, r4
   3a55c:	bne	3a568 <__assert_fail@plt+0x27aec>
   3a560:	str	sl, [sp, #88]	; 0x58
   3a564:	b	3a690 <__assert_fail@plt+0x27c14>
   3a568:	ldr	r0, [sp, #72]	; 0x48
   3a56c:	cmp	r0, #0
   3a570:	beq	3a66c <__assert_fail@plt+0x27bf0>
   3a574:	cmp	r3, #0
   3a578:	str	sl, [sp, #88]	; 0x58
   3a57c:	bne	3ab48 <__assert_fail@plt+0x280cc>
   3a580:	str	r4, [sl]
   3a584:	mov	r3, #1
   3a588:	b	3a690 <__assert_fail@plt+0x27c14>
   3a58c:	mov	r0, r5
   3a590:	mov	r1, r4
   3a594:	add	r2, sp, #104	; 0x68
   3a598:	bl	459d0 <__assert_fail@plt+0x32f54>
   3a59c:	mov	lr, #1
   3a5a0:	mov	r1, r0
   3a5a4:	ldr	r3, [sp, #84]	; 0x54
   3a5a8:	cmp	r1, #0
   3a5ac:	bne	3a5d8 <__assert_fail@plt+0x27b5c>
   3a5b0:	ldr	r0, [r5]
   3a5b4:	mov	r2, r3
   3a5b8:	add	r1, r0, r4, lsl #3
   3a5bc:	add	r0, sp, #104	; 0x68
   3a5c0:	bl	45ce8 <__assert_fail@plt+0x3326c>
   3a5c4:	ldr	r3, [sp, #84]	; 0x54
   3a5c8:	mov	lr, #1
   3a5cc:	mov	r1, #1
   3a5d0:	cmp	r0, #0
   3a5d4:	beq	3a6ac <__assert_fail@plt+0x27c30>
   3a5d8:	ldr	r0, [r5, #12]
   3a5dc:	add	r3, r1, r3
   3a5e0:	cmp	r8, #0
   3a5e4:	ldr	r6, [r0, r4, lsl #2]
   3a5e8:	beq	3a874 <__assert_fail@plt+0x27df8>
   3a5ec:	ldr	r0, [sp, #196]	; 0xc4
   3a5f0:	cmp	r3, r0
   3a5f4:	bgt	3a6b4 <__assert_fail@plt+0x27c38>
   3a5f8:	ldr	r0, [sp, #204]	; 0xcc
   3a5fc:	ldr	r0, [r0, r3, lsl #2]
   3a600:	cmp	r0, #0
   3a604:	beq	3a6b4 <__assert_fail@plt+0x27c38>
   3a608:	ldr	r1, [r0, #8]
   3a60c:	cmp	r1, #1
   3a610:	blt	3a6b4 <__assert_fail@plt+0x27c38>
   3a614:	ldr	r0, [r0, #12]
   3a618:	mov	r2, #0
   3a61c:	mov	r4, r3
   3a620:	subs	r1, r1, #1
   3a624:	str	r2, [sp, #92]	; 0x5c
   3a628:	mov	r2, #0
   3a62c:	beq	3a654 <__assert_fail@plt+0x27bd8>
   3a630:	mov	r2, #0
   3a634:	add	r3, r2, r1
   3a638:	lsr	r7, r3, #1
   3a63c:	ldr	r5, [r0, r7, lsl #2]
   3a640:	cmp	r5, r6
   3a644:	movge	r1, r7
   3a648:	addlt	r2, lr, r3, lsr #1
   3a64c:	cmp	r2, r1
   3a650:	bcc	3a634 <__assert_fail@plt+0x27bb8>
   3a654:	ldr	r0, [r0, r2, lsl #2]
   3a658:	ldr	r7, [sp, #68]	; 0x44
   3a65c:	mov	r3, r4
   3a660:	cmp	r0, r6
   3a664:	bne	3a6ac <__assert_fail@plt+0x27c30>
   3a668:	b	3aaf8 <__assert_fail@plt+0x2807c>
   3a66c:	mov	r0, #4
   3a670:	bl	35608 <__assert_fail@plt+0x22b8c>
   3a674:	cmp	r0, #0
   3a678:	beq	3b01c <__assert_fail@plt+0x285a0>
   3a67c:	str	r0, [sp, #88]	; 0x58
   3a680:	str	r4, [r0]
   3a684:	mov	r0, #1
   3a688:	mov	r3, #1
   3a68c:	str	r0, [sp, #72]	; 0x48
   3a690:	add	r0, r4, r4, lsl #1
   3a694:	add	r1, r5, r0, lsl #2
   3a698:	ldr	sl, [r1, #4]
   3a69c:	cmp	sl, #1
   3a6a0:	ldrge	r2, [r6, #8]
   3a6a4:	subsge	r2, r2, #1
   3a6a8:	bge	3a774 <__assert_fail@plt+0x27cf8>
   3a6ac:	cmp	r8, #0
   3a6b0:	beq	3ad3c <__assert_fail@plt+0x282c0>
   3a6b4:	mov	sl, r9
   3a6b8:	ldr	r0, [r8]
   3a6bc:	mov	r5, #0
   3a6c0:	cmp	r0, #0
   3a6c4:	beq	3ad2c <__assert_fail@plt+0x282b0>
   3a6c8:	sub	r0, r0, #1
   3a6cc:	ldr	r9, [sp, #76]	; 0x4c
   3a6d0:	str	r0, [r8]
   3a6d4:	add	r6, r0, r0, lsl #1
   3a6d8:	ldr	r4, [r8, #8]
   3a6dc:	mov	r2, r9
   3a6e0:	ldr	r0, [r4, r6, lsl #3]!
   3a6e4:	str	r0, [sp, #84]	; 0x54
   3a6e8:	ldr	r1, [r4, #8]
   3a6ec:	ldr	r0, [fp, #20]
   3a6f0:	bl	124b8 <memcpy@plt>
   3a6f4:	ldr	r0, [r4, #8]
   3a6f8:	mov	r2, r9
   3a6fc:	add	r1, r0, r7, lsl #3
   3a700:	ldr	r0, [sp, #80]	; 0x50
   3a704:	bl	124b8 <memcpy@plt>
   3a708:	ldr	r0, [sp, #88]	; 0x58
   3a70c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a710:	ldr	r0, [r8, #8]
   3a714:	add	r0, r0, r6, lsl #3
   3a718:	ldr	r0, [r0, #8]
   3a71c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3a720:	ldr	r0, [r8, #8]
   3a724:	add	r0, r0, r6, lsl #3
   3a728:	ldr	r4, [r0, #4]
   3a72c:	ldr	r1, [r0, #20]
   3a730:	cmn	r4, #1
   3a734:	str	r1, [sp, #88]	; 0x58
   3a738:	ble	3ad2c <__assert_fail@plt+0x282b0>
   3a73c:	ldr	r1, [r0, #12]
   3a740:	ldr	r0, [r0, #16]
   3a744:	mov	r9, sl
   3a748:	ldr	r5, [fp, #20]
   3a74c:	ldr	sl, [sp, #88]	; 0x58
   3a750:	ldr	r3, [sp, #84]	; 0x54
   3a754:	mov	lr, #1
   3a758:	str	r1, [sp, #72]	; 0x48
   3a75c:	str	r0, [sp, #92]	; 0x5c
   3a760:	ldr	r0, [r5, #4]
   3a764:	ldr	r6, [sp, #64]	; 0x40
   3a768:	cmp	r3, r0
   3a76c:	ble	3a234 <__assert_fail@plt+0x277b8>
   3a770:	b	3a188 <__assert_fail@plt+0x2770c>
   3a774:	str	r3, [sp, #92]	; 0x5c
   3a778:	ldr	r0, [r1, #8]
   3a77c:	ldr	r3, [r6, #12]
   3a780:	cmp	r2, #0
   3a784:	str	r0, [sp, #100]	; 0x64
   3a788:	beq	3a818 <__assert_fail@plt+0x27d9c>
   3a78c:	mov	r7, #0
   3a790:	mvn	r5, #0
   3a794:	str	r9, [sp, #60]	; 0x3c
   3a798:	ldr	r0, [sp, #100]	; 0x64
   3a79c:	mov	lr, r2
   3a7a0:	mov	r6, #0
   3a7a4:	mov	r9, #1
   3a7a8:	ldr	r4, [r0, r7, lsl #2]
   3a7ac:	add	r1, r6, r2
   3a7b0:	lsr	r0, r1, #1
   3a7b4:	ldr	ip, [r3, r0, lsl #2]
   3a7b8:	cmp	ip, r4
   3a7bc:	movge	r2, r0
   3a7c0:	addlt	r6, r9, r1, lsr #1
   3a7c4:	cmp	r6, r2
   3a7c8:	bcc	3a7ac <__assert_fail@plt+0x27d30>
   3a7cc:	ldr	r0, [r3, r6, lsl #2]
   3a7d0:	cmp	r0, r4
   3a7d4:	bne	3a7e8 <__assert_fail@plt+0x27d6c>
   3a7d8:	cmn	r5, #1
   3a7dc:	mov	r6, r5
   3a7e0:	mov	r5, r4
   3a7e4:	bne	3a8c0 <__assert_fail@plt+0x27e44>
   3a7e8:	add	r7, r7, #1
   3a7ec:	mov	r2, lr
   3a7f0:	cmp	r7, sl
   3a7f4:	blt	3a798 <__assert_fail@plt+0x27d1c>
   3a7f8:	ldr	r7, [sp, #68]	; 0x44
   3a7fc:	ldr	r9, [sp, #60]	; 0x3c
   3a800:	ldr	r3, [sp, #84]	; 0x54
   3a804:	mov	r6, r5
   3a808:	mov	lr, #1
   3a80c:	cmn	r6, #1
   3a810:	bgt	3ab00 <__assert_fail@plt+0x28084>
   3a814:	b	3a884 <__assert_fail@plt+0x27e08>
   3a818:	ldr	r4, [r3]
   3a81c:	mov	r2, #0
   3a820:	mvn	r6, #0
   3a824:	ldr	r0, [sp, #100]	; 0x64
   3a828:	ldr	r3, [r0, r2, lsl #2]
   3a82c:	cmp	r4, r3
   3a830:	bne	3a844 <__assert_fail@plt+0x27dc8>
   3a834:	cmn	r6, #1
   3a838:	mov	r3, r4
   3a83c:	beq	3a848 <__assert_fail@plt+0x27dcc>
   3a840:	b	3a8bc <__assert_fail@plt+0x27e40>
   3a844:	mov	r3, r6
   3a848:	add	r2, r2, #1
   3a84c:	mov	r6, r3
   3a850:	cmp	r2, sl
   3a854:	blt	3a824 <__assert_fail@plt+0x27da8>
   3a858:	mov	r6, r3
   3a85c:	b	3aaf0 <__assert_fail@plt+0x28074>
   3a860:	cmp	r6, #0
   3a864:	beq	3a890 <__assert_fail@plt+0x27e14>
   3a868:	ldr	r0, [r5, #12]
   3a86c:	add	r3, r6, r3
   3a870:	ldr	r6, [r0, r4, lsl #2]
   3a874:	mov	r0, #0
   3a878:	str	r0, [sp, #92]	; 0x5c
   3a87c:	cmn	r6, #1
   3a880:	bgt	3ab00 <__assert_fail@plt+0x28084>
   3a884:	cmn	r6, #2
   3a888:	bne	3a6ac <__assert_fail@plt+0x27c30>
   3a88c:	b	3b024 <__assert_fail@plt+0x285a8>
   3a890:	ldr	r0, [sp, #72]	; 0x48
   3a894:	str	r6, [sp, #100]	; 0x64
   3a898:	cmp	r0, #0
   3a89c:	beq	3aa2c <__assert_fail@plt+0x27fb0>
   3a8a0:	ldr	r1, [sp, #92]	; 0x5c
   3a8a4:	cmp	r1, #0
   3a8a8:	bne	3ac34 <__assert_fail@plt+0x281b8>
   3a8ac:	mov	r0, #1
   3a8b0:	str	r4, [sl]
   3a8b4:	str	r0, [sp, #92]	; 0x5c
   3a8b8:	b	3aa5c <__assert_fail@plt+0x27fe0>
   3a8bc:	str	r9, [sp, #60]	; 0x3c
   3a8c0:	ldr	r0, [sp, #92]	; 0x5c
   3a8c4:	ldr	r5, [sp, #88]	; 0x58
   3a8c8:	ldr	r9, [sp, #60]	; 0x3c
   3a8cc:	mov	lr, #1
   3a8d0:	cmp	r0, #1
   3a8d4:	blt	3a934 <__assert_fail@plt+0x27eb8>
   3a8d8:	ldr	r0, [sp, #92]	; 0x5c
   3a8dc:	subs	r1, r0, #1
   3a8e0:	beq	3a90c <__assert_fail@plt+0x27e90>
   3a8e4:	mov	r0, #0
   3a8e8:	add	r2, r0, r1
   3a8ec:	lsr	r3, r2, #1
   3a8f0:	ldr	r7, [r5, r3, lsl #2]
   3a8f4:	cmp	r7, r6
   3a8f8:	movge	r1, r3
   3a8fc:	addlt	r0, lr, r2, lsr #1
   3a900:	cmp	r0, r1
   3a904:	bcc	3a8e8 <__assert_fail@plt+0x27e6c>
   3a908:	b	3a910 <__assert_fail@plt+0x27e94>
   3a90c:	mov	r0, #0
   3a910:	ldr	r0, [r5, r0, lsl #2]
   3a914:	cmp	r0, r6
   3a918:	bne	3a934 <__assert_fail@plt+0x27eb8>
   3a91c:	ldr	r7, [sp, #68]	; 0x44
   3a920:	ldr	r3, [sp, #84]	; 0x54
   3a924:	mov	r6, r4
   3a928:	cmn	r6, #1
   3a92c:	bgt	3ab00 <__assert_fail@plt+0x28084>
   3a930:	b	3a884 <__assert_fail@plt+0x27e08>
   3a934:	ldr	r7, [sp, #68]	; 0x44
   3a938:	ldr	r3, [sp, #84]	; 0x54
   3a93c:	cmp	r8, #0
   3a940:	beq	3aaf8 <__assert_fail@plt+0x2807c>
   3a944:	ldr	r5, [r8]
   3a948:	ldr	r0, [r8, #4]
   3a94c:	add	r1, r5, #1
   3a950:	cmp	r1, r0
   3a954:	str	r1, [r8]
   3a958:	bne	3a98c <__assert_fail@plt+0x27f10>
   3a95c:	ldr	r0, [r8, #8]
   3a960:	add	r1, r1, r1, lsl #1
   3a964:	lsl	r1, r1, #4
   3a968:	bl	36328 <__assert_fail@plt+0x238ac>
   3a96c:	cmp	r0, #0
   3a970:	beq	3b024 <__assert_fail@plt+0x285a8>
   3a974:	str	r0, [r8, #8]
   3a978:	ldr	r3, [sp, #84]	; 0x54
   3a97c:	ldr	r1, [r8, #4]
   3a980:	lsl	r1, r1, #1
   3a984:	str	r1, [r8, #4]
   3a988:	b	3a990 <__assert_fail@plt+0x27f14>
   3a98c:	ldr	r0, [r8, #8]
   3a990:	add	r5, r5, r5, lsl #1
   3a994:	str	r3, [r0, r5, lsl #3]!
   3a998:	str	r4, [r0, #4]
   3a99c:	ldr	r0, [sp, #56]	; 0x38
   3a9a0:	bl	35608 <__assert_fail@plt+0x22b8c>
   3a9a4:	ldr	r1, [r8, #8]
   3a9a8:	cmp	r0, #0
   3a9ac:	add	r4, r1, r5, lsl #3
   3a9b0:	str	r0, [r4, #8]!
   3a9b4:	beq	3b024 <__assert_fail@plt+0x285a8>
   3a9b8:	ldr	sl, [sp, #76]	; 0x4c
   3a9bc:	ldr	r1, [fp, #20]
   3a9c0:	mov	r2, sl
   3a9c4:	bl	124b8 <memcpy@plt>
   3a9c8:	ldr	r0, [r4]
   3a9cc:	ldr	r1, [sp, #80]	; 0x50
   3a9d0:	mov	r2, sl
   3a9d4:	add	r0, r0, r7, lsl #3
   3a9d8:	bl	124b8 <memcpy@plt>
   3a9dc:	ldr	r0, [r8, #8]
   3a9e0:	add	r5, r0, r5, lsl #3
   3a9e4:	ldr	r0, [sp, #92]	; 0x5c
   3a9e8:	mov	r7, r5
   3a9ec:	str	r0, [r7, #16]!
   3a9f0:	cmp	r0, #1
   3a9f4:	sub	sl, r7, #4
   3a9f8:	blt	3aadc <__assert_fail@plt+0x28060>
   3a9fc:	lsl	r4, r0, #2
   3aa00:	str	r0, [sl]
   3aa04:	mov	r0, r4
   3aa08:	bl	35608 <__assert_fail@plt+0x22b8c>
   3aa0c:	cmp	r0, #0
   3aa10:	str	r0, [r5, #20]
   3aa14:	beq	3b0ac <__assert_fail@plt+0x28630>
   3aa18:	ldr	r1, [sp, #88]	; 0x58
   3aa1c:	mov	r2, r4
   3aa20:	bl	124b8 <memcpy@plt>
   3aa24:	ldr	r7, [sp, #68]	; 0x44
   3aa28:	b	3aaf0 <__assert_fail@plt+0x28074>
   3aa2c:	mov	r0, #4
   3aa30:	bl	35608 <__assert_fail@plt+0x22b8c>
   3aa34:	cmp	r0, #0
   3aa38:	beq	3b01c <__assert_fail@plt+0x285a0>
   3aa3c:	mov	sl, r0
   3aa40:	str	r4, [r0]
   3aa44:	mov	r0, #1
   3aa48:	str	r0, [sp, #92]	; 0x5c
   3aa4c:	mov	r0, #1
   3aa50:	str	r0, [sp, #72]	; 0x48
   3aa54:	ldr	r3, [sp, #84]	; 0x54
   3aa58:	mov	lr, #1
   3aa5c:	ldr	r0, [sp, #204]	; 0xcc
   3aa60:	str	sl, [sp, #88]	; 0x58
   3aa64:	ldr	r0, [r0, r3, lsl #2]
   3aa68:	ldr	r1, [r0, #8]
   3aa6c:	cmp	r1, #1
   3aa70:	blt	3a5b0 <__assert_fail@plt+0x27b34>
   3aa74:	ldr	r2, [r5, #20]
   3aa78:	add	r3, r4, r4, lsl #1
   3aa7c:	ldr	ip, [r0, #12]
   3aa80:	add	r2, r2, r3, lsl #2
   3aa84:	ldr	r2, [r2, #8]
   3aa88:	ldr	r6, [r2]
   3aa8c:	subs	r2, r1, #1
   3aa90:	mov	r1, #0
   3aa94:	beq	3aab8 <__assert_fail@plt+0x2803c>
   3aa98:	add	r3, r1, r2
   3aa9c:	lsr	r7, r3, #1
   3aaa0:	ldr	r0, [ip, r7, lsl #2]
   3aaa4:	cmp	r0, r6
   3aaa8:	movge	r2, r7
   3aaac:	addlt	r1, lr, r3, lsr #1
   3aab0:	cmp	r1, r2
   3aab4:	bcc	3aa98 <__assert_fail@plt+0x2801c>
   3aab8:	ldr	r0, [ip, r1, lsl #2]
   3aabc:	ldr	r7, [sp, #68]	; 0x44
   3aac0:	ldr	r1, [sp, #100]	; 0x64
   3aac4:	cmp	r0, r6
   3aac8:	bne	3a5a4 <__assert_fail@plt+0x27b28>
   3aacc:	ldr	r3, [sp, #84]	; 0x54
   3aad0:	cmn	r6, #1
   3aad4:	bgt	3ab00 <__assert_fail@plt+0x28084>
   3aad8:	b	3a884 <__assert_fail@plt+0x27e08>
   3aadc:	ldr	r7, [sp, #68]	; 0x44
   3aae0:	mov	r0, #0
   3aae4:	str	r0, [sl]
   3aae8:	str	r0, [sl, #4]
   3aaec:	str	r0, [sl, #8]
   3aaf0:	ldr	r3, [sp, #84]	; 0x54
   3aaf4:	mov	lr, #1
   3aaf8:	cmn	r6, #1
   3aafc:	ble	3a884 <__assert_fail@plt+0x27e08>
   3ab00:	ldr	r5, [fp, #20]
   3ab04:	ldr	sl, [sp, #88]	; 0x58
   3ab08:	mov	r4, r6
   3ab0c:	ldr	r0, [r5, #4]
   3ab10:	ldr	r6, [sp, #64]	; 0x40
   3ab14:	cmp	r3, r0
   3ab18:	ble	3a234 <__assert_fail@plt+0x277b8>
   3ab1c:	b	3a188 <__assert_fail@plt+0x2770c>
   3ab20:	ldr	r0, [r5, #12]
   3ab24:	add	r9, r6, r9
   3ab28:	mov	lr, #1
   3ab2c:	mov	r3, r9
   3ab30:	ldr	r9, [sp, #60]	; 0x3c
   3ab34:	ldr	r6, [r0, r4, lsl #2]
   3ab38:	ldr	r0, [sp, #196]	; 0xc4
   3ab3c:	cmp	r3, r0
   3ab40:	ble	3a5f8 <__assert_fail@plt+0x27b7c>
   3ab44:	b	3a6b4 <__assert_fail@plt+0x27c38>
   3ab48:	ldr	r0, [sp, #72]	; 0x48
   3ab4c:	str	r6, [sp, #100]	; 0x64
   3ab50:	mov	r6, r9
   3ab54:	cmp	r0, r3
   3ab58:	bne	3ab88 <__assert_fail@plt+0x2810c>
   3ab5c:	ldr	r0, [sp, #92]	; 0x5c
   3ab60:	lsl	r1, r0, #3
   3ab64:	ldr	r0, [sp, #88]	; 0x58
   3ab68:	bl	36328 <__assert_fail@plt+0x238ac>
   3ab6c:	cmp	r0, #0
   3ab70:	mov	r9, r6
   3ab74:	beq	3b024 <__assert_fail@plt+0x285a8>
   3ab78:	ldr	r1, [sp, #92]	; 0x5c
   3ab7c:	str	r0, [sp, #88]	; 0x58
   3ab80:	lsl	r1, r1, #1
   3ab84:	str	r1, [sp, #72]	; 0x48
   3ab88:	ldr	r0, [sp, #88]	; 0x58
   3ab8c:	ldr	r0, [r0]
   3ab90:	cmp	r0, r4
   3ab94:	ble	3abd8 <__assert_fail@plt+0x2815c>
   3ab98:	ldr	r2, [sp, #92]	; 0x5c
   3ab9c:	cmp	r2, #1
   3aba0:	blt	3ac14 <__assert_fail@plt+0x28198>
   3aba4:	ldr	r0, [sp, #88]	; 0x58
   3aba8:	ldr	r2, [sp, #92]	; 0x5c
   3abac:	add	r1, r0, r2, lsl #2
   3abb0:	add	r0, r2, #1
   3abb4:	mov	r2, r1
   3abb8:	ldr	r3, [r2, #-4]!
   3abbc:	sub	r0, r0, #1
   3abc0:	cmp	r0, #1
   3abc4:	str	r3, [r1]
   3abc8:	mov	r1, r2
   3abcc:	bgt	3abb8 <__assert_fail@plt+0x2813c>
   3abd0:	sub	r2, r0, #1
   3abd4:	b	3ac14 <__assert_fail@plt+0x28198>
   3abd8:	ldr	r0, [sp, #88]	; 0x58
   3abdc:	ldr	r2, [sp, #92]	; 0x5c
   3abe0:	add	r0, r0, r2, lsl #2
   3abe4:	ldr	r1, [r0, #-4]
   3abe8:	cmp	r1, r4
   3abec:	ble	3ac14 <__assert_fail@plt+0x28198>
   3abf0:	ldr	r2, [sp, #92]	; 0x5c
   3abf4:	sub	r2, r2, #2
   3abf8:	str	r1, [r0]
   3abfc:	sub	r2, r2, #1
   3ac00:	ldr	r1, [r0, #-8]
   3ac04:	sub	r0, r0, #4
   3ac08:	cmp	r1, r4
   3ac0c:	bgt	3abf8 <__assert_fail@plt+0x2817c>
   3ac10:	add	r2, r2, #2
   3ac14:	ldr	r3, [sp, #92]	; 0x5c
   3ac18:	ldr	r0, [sp, #88]	; 0x58
   3ac1c:	mov	r9, r6
   3ac20:	ldr	r7, [sp, #68]	; 0x44
   3ac24:	ldr	r6, [sp, #100]	; 0x64
   3ac28:	add	r3, r3, #1
   3ac2c:	str	r4, [r0, r2, lsl #2]
   3ac30:	b	3a690 <__assert_fail@plt+0x27c14>
   3ac34:	ldr	r0, [sp, #72]	; 0x48
   3ac38:	mov	r6, r9
   3ac3c:	cmp	r0, r1
   3ac40:	bne	3ac70 <__assert_fail@plt+0x281f4>
   3ac44:	ldr	r0, [sp, #92]	; 0x5c
   3ac48:	lsl	r1, r0, #3
   3ac4c:	ldr	r0, [sp, #88]	; 0x58
   3ac50:	bl	36328 <__assert_fail@plt+0x238ac>
   3ac54:	cmp	r0, #0
   3ac58:	mov	r9, r6
   3ac5c:	beq	3b024 <__assert_fail@plt+0x285a8>
   3ac60:	ldr	r1, [sp, #92]	; 0x5c
   3ac64:	str	r0, [sp, #88]	; 0x58
   3ac68:	lsl	r1, r1, #1
   3ac6c:	str	r1, [sp, #72]	; 0x48
   3ac70:	ldr	r0, [sp, #88]	; 0x58
   3ac74:	ldr	r0, [r0]
   3ac78:	cmp	r0, r4
   3ac7c:	ble	3acc0 <__assert_fail@plt+0x28244>
   3ac80:	ldr	r2, [sp, #92]	; 0x5c
   3ac84:	cmp	r2, #1
   3ac88:	blt	3acfc <__assert_fail@plt+0x28280>
   3ac8c:	ldr	r0, [sp, #88]	; 0x58
   3ac90:	ldr	r2, [sp, #92]	; 0x5c
   3ac94:	add	r1, r0, r2, lsl #2
   3ac98:	add	r0, r2, #1
   3ac9c:	mov	r2, r1
   3aca0:	ldr	r3, [r2, #-4]!
   3aca4:	sub	r0, r0, #1
   3aca8:	cmp	r0, #1
   3acac:	str	r3, [r1]
   3acb0:	mov	r1, r2
   3acb4:	bgt	3aca0 <__assert_fail@plt+0x28224>
   3acb8:	sub	r2, r0, #1
   3acbc:	b	3acfc <__assert_fail@plt+0x28280>
   3acc0:	ldr	r0, [sp, #88]	; 0x58
   3acc4:	ldr	r2, [sp, #92]	; 0x5c
   3acc8:	add	r0, r0, r2, lsl #2
   3accc:	ldr	r1, [r0, #-4]
   3acd0:	cmp	r1, r4
   3acd4:	ble	3acfc <__assert_fail@plt+0x28280>
   3acd8:	ldr	r2, [sp, #92]	; 0x5c
   3acdc:	sub	r2, r2, #2
   3ace0:	str	r1, [r0]
   3ace4:	sub	r2, r2, #1
   3ace8:	ldr	r1, [r0, #-8]
   3acec:	sub	r0, r0, #4
   3acf0:	cmp	r1, r4
   3acf4:	bgt	3ace0 <__assert_fail@plt+0x28264>
   3acf8:	add	r2, r2, #2
   3acfc:	ldr	r1, [sp, #92]	; 0x5c
   3ad00:	ldr	sl, [sp, #88]	; 0x58
   3ad04:	ldr	r7, [sp, #68]	; 0x44
   3ad08:	mov	r9, r6
   3ad0c:	add	r1, r1, #1
   3ad10:	str	r4, [sl, r2, lsl #2]
   3ad14:	str	r1, [sp, #92]	; 0x5c
   3ad18:	b	3aa54 <__assert_fail@plt+0x27fd8>
   3ad1c:	mov	r6, #0
   3ad20:	b	38a3c <__assert_fail@plt+0x25fc0>
   3ad24:	mov	r9, #12
   3ad28:	b	3af2c <__assert_fail@plt+0x284b0>
   3ad2c:	mov	r9, sl
   3ad30:	b	3ad40 <__assert_fail@plt+0x282c4>
   3ad34:	mov	r9, r0
   3ad38:	b	3af2c <__assert_fail@plt+0x284b0>
   3ad3c:	mov	r5, #1
   3ad40:	ldr	r0, [sp, #88]	; 0x58
   3ad44:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ad48:	ldr	r0, [fp, #-184]	; 0xffffff48
   3ad4c:	cmp	r0, r9
   3ad50:	beq	3ad58 <__assert_fail@plt+0x282dc>
   3ad54:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ad58:	mov	r0, #16
   3ad5c:	cmp	r5, #0
   3ad60:	str	r0, [fp, #-188]	; 0xffffff44
   3ad64:	mov	r0, #0
   3ad68:	str	r0, [fp, #-192]	; 0xffffff40
   3ad6c:	str	r9, [fp, #-184]	; 0xffffff48
   3ad70:	mov	r9, #1
   3ad74:	bne	3af2c <__assert_fail@plt+0x284b0>
   3ad78:	ldr	r1, [r8]
   3ad7c:	ldr	r0, [r8, #8]
   3ad80:	cmp	r1, #1
   3ad84:	blt	3adc4 <__assert_fail@plt+0x28348>
   3ad88:	mov	r5, #0
   3ad8c:	mov	r6, #0
   3ad90:	add	r0, r0, r5
   3ad94:	ldr	r0, [r0, #20]
   3ad98:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ad9c:	ldr	r0, [r8, #8]
   3ada0:	add	r0, r0, r5
   3ada4:	ldr	r0, [r0, #8]
   3ada8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3adac:	ldr	r1, [r8]
   3adb0:	ldr	r0, [r8, #8]
   3adb4:	add	r6, r6, #1
   3adb8:	add	r5, r5, #24
   3adbc:	cmp	r6, r1
   3adc0:	blt	3ad90 <__assert_fail@plt+0x28314>
   3adc4:	bl	32c40 <__assert_fail@plt+0x201c4>
   3adc8:	b	3af2c <__assert_fail@plt+0x284b0>
   3adcc:	ldr	r5, [fp, #20]
   3add0:	ldr	r9, [sp, #60]	; 0x3c
   3add4:	mov	r0, sl
   3add8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3addc:	ldr	r0, [fp, #-184]	; 0xffffff48
   3ade0:	cmp	r0, r9
   3ade4:	beq	3adec <__assert_fail@plt+0x28370>
   3ade8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3adec:	mov	r0, #16
   3adf0:	cmp	r8, #0
   3adf4:	str	r0, [fp, #-188]	; 0xffffff44
   3adf8:	mov	r0, #0
   3adfc:	str	r0, [fp, #-192]	; 0xffffff40
   3ae00:	str	r9, [fp, #-184]	; 0xffffff48
   3ae04:	beq	3ae60 <__assert_fail@plt+0x283e4>
   3ae08:	ldr	r1, [r8]
   3ae0c:	ldr	r0, [r8, #8]
   3ae10:	mov	r6, r5
   3ae14:	cmp	r1, #1
   3ae18:	blt	3ae58 <__assert_fail@plt+0x283dc>
   3ae1c:	mov	r4, #0
   3ae20:	mov	r5, #0
   3ae24:	add	r0, r0, r4
   3ae28:	ldr	r0, [r0, #20]
   3ae2c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ae30:	ldr	r0, [r8, #8]
   3ae34:	add	r0, r0, r4
   3ae38:	ldr	r0, [r0, #8]
   3ae3c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ae40:	ldr	r1, [r8]
   3ae44:	ldr	r0, [r8, #8]
   3ae48:	add	r5, r5, #1
   3ae4c:	add	r4, r4, #24
   3ae50:	cmp	r5, r1
   3ae54:	blt	3ae24 <__assert_fail@plt+0x283a8>
   3ae58:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ae5c:	mov	r5, r6
   3ae60:	ldrb	r0, [sp, #180]	; 0xb4
   3ae64:	cmp	r0, #0
   3ae68:	bne	3afa4 <__assert_fail@plt+0x28528>
   3ae6c:	ldr	r1, [fp, #-200]	; 0xffffff38
   3ae70:	ldr	r4, [sp, #28]
   3ae74:	add	r0, r5, #4
   3ae78:	mov	r2, r7
   3ae7c:	ldr	r3, [r0, #-4]
   3ae80:	cmn	r3, #1
   3ae84:	addne	r3, r3, r1
   3ae88:	strne	r3, [r0, #-4]
   3ae8c:	ldrne	r3, [r0]
   3ae90:	addne	r3, r3, r1
   3ae94:	strne	r3, [r0]
   3ae98:	add	r0, r0, #8
   3ae9c:	subs	r2, r2, #1
   3aea0:	bne	3ae7c <__assert_fail@plt+0x28400>
   3aea4:	cmp	r4, #1
   3aea8:	blt	3aebc <__assert_fail@plt+0x28440>
   3aeac:	add	r0, r5, r7, lsl #3
   3aeb0:	lsl	r2, r4, #3
   3aeb4:	mov	r1, #255	; 0xff
   3aeb8:	bl	12800 <memset@plt>
   3aebc:	ldr	r0, [sp, #96]	; 0x60
   3aec0:	mov	r9, #0
   3aec4:	ldr	r0, [r0, #132]	; 0x84
   3aec8:	cmp	r0, #0
   3aecc:	beq	3af2c <__assert_fail@plt+0x284b0>
   3aed0:	cmp	r7, #2
   3aed4:	bcc	3af2c <__assert_fail@plt+0x284b0>
   3aed8:	ldr	r1, [fp, #16]
   3aedc:	ldr	r2, [sp, #28]
   3aee0:	mov	r6, r5
   3aee4:	sub	r1, r1, #1
   3aee8:	sub	r1, r1, r2
   3aeec:	mov	r2, #0
   3aef0:	ldr	r3, [r0, r2, lsl #2]
   3aef4:	cmp	r2, r3
   3aef8:	beq	3af1c <__assert_fail@plt+0x284a0>
   3aefc:	add	r3, r6, r3, lsl #3
   3af00:	add	r7, r6, r2, lsl #3
   3af04:	ldr	r3, [r3, #8]
   3af08:	str	r3, [r7, #8]
   3af0c:	ldr	r3, [r0, r2, lsl #2]
   3af10:	add	r3, r6, r3, lsl #3
   3af14:	ldr	r3, [r3, #12]
   3af18:	str	r3, [r7, #12]
   3af1c:	add	r2, r2, #1
   3af20:	cmp	r1, r2
   3af24:	bne	3aef0 <__assert_fail@plt+0x28474>
   3af28:	mov	r9, #0
   3af2c:	ldr	r0, [sp, #204]	; 0xcc
   3af30:	bl	32c40 <__assert_fail@plt+0x201c4>
   3af34:	ldr	r0, [sp, #96]	; 0x60
   3af38:	ldr	r0, [r0, #76]	; 0x4c
   3af3c:	cmp	r0, #0
   3af40:	beq	3af5c <__assert_fail@plt+0x284e0>
   3af44:	add	r0, sp, #104	; 0x68
   3af48:	bl	42f90 <__assert_fail@plt+0x30514>
   3af4c:	ldr	r0, [sp, #236]	; 0xec
   3af50:	bl	32c40 <__assert_fail@plt+0x201c4>
   3af54:	ldr	r0, [sp, #220]	; 0xdc
   3af58:	bl	32c40 <__assert_fail@plt+0x201c4>
   3af5c:	ldr	r0, [sp, #112]	; 0x70
   3af60:	bl	32c40 <__assert_fail@plt+0x201c4>
   3af64:	ldr	r0, [sp, #116]	; 0x74
   3af68:	bl	32c40 <__assert_fail@plt+0x201c4>
   3af6c:	ldrb	r0, [sp, #179]	; 0xb3
   3af70:	cmp	r0, #0
   3af74:	beq	3af80 <__assert_fail@plt+0x28504>
   3af78:	ldr	r0, [sp, #108]	; 0x6c
   3af7c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3af80:	mov	r0, r9
   3af84:	sub	sp, fp, #28
   3af88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3af8c:	mov	r0, r6
   3af90:	bl	32c40 <__assert_fail@plt+0x201c4>
   3af94:	mov	r0, #0
   3af98:	bl	32c40 <__assert_fail@plt+0x201c4>
   3af9c:	mov	r9, #12
   3afa0:	b	3af2c <__assert_fail@plt+0x284b0>
   3afa4:	ldr	ip, [sp, #24]
   3afa8:	ldr	r4, [sp, #28]
   3afac:	add	r0, r5, #4
   3afb0:	mov	r1, r7
   3afb4:	ldr	r2, [r0, #-4]
   3afb8:	cmn	r2, #1
   3afbc:	beq	3b004 <__assert_fail@plt+0x28588>
   3afc0:	ldr	r7, [sp, #132]	; 0x84
   3afc4:	ldr	r3, [sp, #116]	; 0x74
   3afc8:	mov	r6, ip
   3afcc:	cmp	r2, r7
   3afd0:	addne	r6, r3, r2, lsl #2
   3afd4:	ldr	r2, [r6]
   3afd8:	str	r2, [r0, #-4]
   3afdc:	ldr	r6, [r0]
   3afe0:	cmp	r6, r7
   3afe4:	mov	r7, ip
   3afe8:	addne	r7, r3, r6, lsl #2
   3afec:	ldr	r3, [r7]
   3aff0:	ldr	r7, [fp, #-200]	; 0xffffff38
   3aff4:	add	r2, r2, r7
   3aff8:	add	r3, r3, r7
   3affc:	ldr	r7, [sp, #68]	; 0x44
   3b000:	stmda	r0, {r2, r3}
   3b004:	add	r0, r0, #8
   3b008:	subs	r1, r1, #1
   3b00c:	bne	3afb4 <__assert_fail@plt+0x28538>
   3b010:	b	3aea4 <__assert_fail@plt+0x28428>
   3b014:	mov	r9, #1
   3b018:	b	3af2c <__assert_fail@plt+0x284b0>
   3b01c:	mov	r0, #0
   3b020:	str	r0, [sp, #88]	; 0x58
   3b024:	ldr	r0, [sp, #88]	; 0x58
   3b028:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b02c:	ldr	r0, [fp, #-184]	; 0xffffff48
   3b030:	cmp	r0, r9
   3b034:	beq	3b03c <__assert_fail@plt+0x285c0>
   3b038:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b03c:	mov	r0, #16
   3b040:	cmp	r8, #0
   3b044:	str	r0, [fp, #-188]	; 0xffffff44
   3b048:	mov	r0, #0
   3b04c:	str	r0, [fp, #-192]	; 0xffffff40
   3b050:	str	r9, [fp, #-184]	; 0xffffff48
   3b054:	mov	r9, #12
   3b058:	beq	3af2c <__assert_fail@plt+0x284b0>
   3b05c:	ldr	r1, [r8]
   3b060:	ldr	r0, [r8, #8]
   3b064:	cmp	r1, #1
   3b068:	blt	3adc4 <__assert_fail@plt+0x28348>
   3b06c:	mov	r5, #0
   3b070:	mov	r6, #0
   3b074:	add	r0, r0, r5
   3b078:	ldr	r0, [r0, #20]
   3b07c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b080:	ldr	r0, [r8, #8]
   3b084:	add	r0, r0, r5
   3b088:	ldr	r0, [r0, #8]
   3b08c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b090:	ldr	r1, [r8]
   3b094:	ldr	r0, [r8, #8]
   3b098:	add	r6, r6, #1
   3b09c:	add	r5, r5, #24
   3b0a0:	cmp	r6, r1
   3b0a4:	blt	3b074 <__assert_fail@plt+0x285f8>
   3b0a8:	b	3adc4 <__assert_fail@plt+0x28348>
   3b0ac:	mov	r0, #0
   3b0b0:	str	r0, [r7]
   3b0b4:	str	r0, [sl]
   3b0b8:	b	3b024 <__assert_fail@plt+0x285a8>
   3b0bc:	push	{fp, lr}
   3b0c0:	mov	fp, sp
   3b0c4:	sub	sp, sp, #16
   3b0c8:	mov	ip, #1
   3b0cc:	str	r2, [sp, #4]
   3b0d0:	str	ip, [sp, #12]
   3b0d4:	mov	ip, #0
   3b0d8:	str	ip, [sp]
   3b0dc:	ldr	ip, [fp, #8]
   3b0e0:	str	ip, [sp, #8]
   3b0e4:	bl	3b0f0 <__assert_fail@plt+0x28674>
   3b0e8:	mov	sp, fp
   3b0ec:	pop	{fp, pc}
   3b0f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b0f4:	add	fp, sp, #28
   3b0f8:	sub	sp, sp, #44	; 0x2c
   3b0fc:	mvn	r4, #0
   3b100:	cmp	r3, #0
   3b104:	blt	3b454 <__assert_fail@plt+0x289d8>
   3b108:	mov	r6, r3
   3b10c:	mov	r8, r2
   3b110:	cmp	r3, r2
   3b114:	bgt	3b454 <__assert_fail@plt+0x289d8>
   3b118:	mov	r5, r0
   3b11c:	ldr	r0, [fp, #8]
   3b120:	mov	r7, r8
   3b124:	str	r1, [sp, #24]
   3b128:	movw	r1, #10276	; 0x2824
   3b12c:	ldr	sl, [r5]
   3b130:	movt	r1, #1
   3b134:	add	r0, r0, r6
   3b138:	cmp	r0, r8
   3b13c:	bicle	r7, r0, r0, asr #31
   3b140:	movw	r0, #9352	; 0x2488
   3b144:	movt	r0, #1
   3b148:	orrs	r4, r1, r0
   3b14c:	beq	3b158 <__assert_fail@plt+0x286dc>
   3b150:	add	r0, sl, #136	; 0x88
   3b154:	bl	12464 <pthread_mutex_lock@plt>
   3b158:	ldrb	r0, [r5, #28]
   3b15c:	ldr	r9, [fp, #16]
   3b160:	cmp	r7, r6
   3b164:	ubfx	r1, r0, #5, #2
   3b168:	str	r4, [sp, #28]
   3b16c:	str	r6, [sp, #36]	; 0x24
   3b170:	str	r1, [sp, #20]
   3b174:	ble	3b210 <__assert_fail@plt+0x28794>
   3b178:	tst	r0, #8
   3b17c:	bne	3b210 <__assert_fail@plt+0x28794>
   3b180:	ldr	r6, [r5, #16]
   3b184:	cmp	r6, #0
   3b188:	beq	3b210 <__assert_fail@plt+0x28794>
   3b18c:	ldr	r4, [r5]
   3b190:	mov	r0, r6
   3b194:	mov	r1, #0
   3b198:	mov	r2, #256	; 0x100
   3b19c:	bl	12800 <memset@plt>
   3b1a0:	ldr	r1, [r4, #36]	; 0x24
   3b1a4:	mov	r0, r5
   3b1a8:	mov	r2, r6
   3b1ac:	bl	37bec <__assert_fail@plt+0x25170>
   3b1b0:	ldr	r0, [r4, #36]	; 0x24
   3b1b4:	ldr	r1, [r4, #40]	; 0x28
   3b1b8:	cmp	r0, r1
   3b1bc:	beq	3b1d0 <__assert_fail@plt+0x28754>
   3b1c0:	mov	r0, r5
   3b1c4:	mov	r2, r6
   3b1c8:	bl	37bec <__assert_fail@plt+0x25170>
   3b1cc:	ldr	r0, [r4, #36]	; 0x24
   3b1d0:	ldr	r1, [r4, #44]	; 0x2c
   3b1d4:	cmp	r0, r1
   3b1d8:	beq	3b1ec <__assert_fail@plt+0x28770>
   3b1dc:	mov	r0, r5
   3b1e0:	mov	r2, r6
   3b1e4:	bl	37bec <__assert_fail@plt+0x25170>
   3b1e8:	ldr	r0, [r4, #36]	; 0x24
   3b1ec:	ldr	r1, [r4, #48]	; 0x30
   3b1f0:	cmp	r0, r1
   3b1f4:	beq	3b204 <__assert_fail@plt+0x28788>
   3b1f8:	mov	r0, r5
   3b1fc:	mov	r2, r6
   3b200:	bl	37bec <__assert_fail@plt+0x25170>
   3b204:	ldrb	r0, [r5, #28]
   3b208:	orr	r0, r0, #8
   3b20c:	strb	r0, [r5, #28]
   3b210:	str	sl, [sp, #32]
   3b214:	mov	sl, #1
   3b218:	mov	r4, #0
   3b21c:	cmp	r9, #0
   3b220:	str	r5, [fp, #-32]	; 0xffffffe0
   3b224:	beq	3b264 <__assert_fail@plt+0x287e8>
   3b228:	ldr	r6, [sp, #36]	; 0x24
   3b22c:	ands	r1, r0, #16
   3b230:	bne	3b2a0 <__assert_fail@plt+0x28824>
   3b234:	and	r0, r0, #6
   3b238:	cmp	r0, #4
   3b23c:	bne	3b290 <__assert_fail@plt+0x28814>
   3b240:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3b244:	ldr	sl, [r9]
   3b248:	ldr	r0, [r0, #24]
   3b24c:	cmp	sl, r0
   3b250:	bhi	3b298 <__assert_fail@plt+0x2881c>
   3b254:	cmp	sl, #1
   3b258:	movwlt	r9, #0
   3b25c:	movwlt	sl, #1
   3b260:	b	3b29c <__assert_fail@plt+0x28820>
   3b264:	ldr	r6, [sp, #36]	; 0x24
   3b268:	lsl	r0, sl, #3
   3b26c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3b270:	cmp	r0, #0
   3b274:	bne	3b2b0 <__assert_fail@plt+0x28834>
   3b278:	ldr	r5, [sp, #32]
   3b27c:	mvn	r4, #1
   3b280:	ldr	r0, [sp, #28]
   3b284:	cmp	r0, #0
   3b288:	bne	3b44c <__assert_fail@plt+0x289d0>
   3b28c:	b	3b454 <__assert_fail@plt+0x289d8>
   3b290:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3b294:	ldr	r0, [r0, #24]
   3b298:	add	sl, r0, #1
   3b29c:	mov	r4, r9
   3b2a0:	lsl	r0, sl, #3
   3b2a4:	bl	35608 <__assert_fail@plt+0x22b8c>
   3b2a8:	cmp	r0, #0
   3b2ac:	beq	3b278 <__assert_fail@plt+0x287fc>
   3b2b0:	mov	r9, r0
   3b2b4:	ldr	r0, [fp, #12]
   3b2b8:	str	r7, [sp]
   3b2bc:	mov	r2, r8
   3b2c0:	mov	r3, r6
   3b2c4:	stmib	sp, {r0, sl}
   3b2c8:	str	r9, [sp, #12]
   3b2cc:	ldr	r0, [sp, #20]
   3b2d0:	ldr	r1, [sp, #24]
   3b2d4:	str	r0, [sp, #16]
   3b2d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3b2dc:	bl	38964 <__assert_fail@plt+0x25ee8>
   3b2e0:	cmp	r0, #0
   3b2e4:	beq	3b2f8 <__assert_fail@plt+0x2887c>
   3b2e8:	mvn	r4, #1
   3b2ec:	cmp	r0, #1
   3b2f0:	mvneq	r4, #0
   3b2f4:	b	3b434 <__assert_fail@plt+0x289b8>
   3b2f8:	cmp	r4, #0
   3b2fc:	beq	3b418 <__assert_fail@plt+0x2899c>
   3b300:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3b304:	add	r6, sl, #1
   3b308:	ldrb	r0, [r0, #28]
   3b30c:	ubfx	r0, r0, #1, #2
   3b310:	cmp	r0, #1
   3b314:	beq	3b37c <__assert_fail@plt+0x28900>
   3b318:	mov	r8, #2
   3b31c:	cmp	r0, #0
   3b320:	bne	3b38c <__assert_fail@plt+0x28910>
   3b324:	lsl	r7, r6, #2
   3b328:	mov	r0, r7
   3b32c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3b330:	mov	r8, #0
   3b334:	cmp	r0, #0
   3b338:	str	r0, [r4, #4]
   3b33c:	beq	3b56c <__assert_fail@plt+0x28af0>
   3b340:	mov	r0, r7
   3b344:	bl	35608 <__assert_fail@plt+0x22b8c>
   3b348:	cmp	r0, #0
   3b34c:	str	r0, [r4, #8]
   3b350:	beq	3b564 <__assert_fail@plt+0x28ae8>
   3b354:	str	r6, [r4]
   3b358:	mov	r8, #1
   3b35c:	cmp	sl, #1
   3b360:	bge	3b394 <__assert_fail@plt+0x28918>
   3b364:	mov	sl, #0
   3b368:	ldr	r0, [r4]
   3b36c:	ldr	r6, [sp, #36]	; 0x24
   3b370:	cmp	sl, r0
   3b374:	bcs	3b3fc <__assert_fail@plt+0x28980>
   3b378:	b	3b3dc <__assert_fail@plt+0x28960>
   3b37c:	ldr	r0, [r4]
   3b380:	mov	r8, #1
   3b384:	cmp	r6, r0
   3b388:	bhi	3b514 <__assert_fail@plt+0x28a98>
   3b38c:	cmp	sl, #1
   3b390:	blt	3b364 <__assert_fail@plt+0x288e8>
   3b394:	ldmib	r4, {r6, r7}
   3b398:	mov	r2, #0
   3b39c:	cmp	sl, #3
   3b3a0:	bhi	3b460 <__assert_fail@plt+0x289e4>
   3b3a4:	add	r0, r9, r2, lsl #3
   3b3a8:	add	r0, r0, #4
   3b3ac:	ldr	r1, [r0, #-4]
   3b3b0:	str	r1, [r6, r2, lsl #2]
   3b3b4:	ldr	r1, [r0]
   3b3b8:	add	r0, r0, #8
   3b3bc:	str	r1, [r7, r2, lsl #2]
   3b3c0:	add	r2, r2, #1
   3b3c4:	cmp	sl, r2
   3b3c8:	bne	3b3ac <__assert_fail@plt+0x28930>
   3b3cc:	ldr	r0, [r4]
   3b3d0:	ldr	r6, [sp, #36]	; 0x24
   3b3d4:	cmp	sl, r0
   3b3d8:	bcs	3b3fc <__assert_fail@plt+0x28980>
   3b3dc:	ldmib	r4, {r0, r1}
   3b3e0:	mvn	r2, #0
   3b3e4:	str	r2, [r1, sl, lsl #2]
   3b3e8:	str	r2, [r0, sl, lsl #2]
   3b3ec:	add	sl, sl, #1
   3b3f0:	ldr	r3, [r4]
   3b3f4:	cmp	sl, r3
   3b3f8:	bcc	3b3e4 <__assert_fail@plt+0x28968>
   3b3fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   3b400:	cmp	r8, #0
   3b404:	ldrb	r0, [r1, #28]
   3b408:	and	r0, r0, #249	; 0xf9
   3b40c:	orr	r0, r0, r8, lsl #1
   3b410:	strb	r0, [r1, #28]
   3b414:	beq	3b430 <__assert_fail@plt+0x289b4>
   3b418:	ldr	r0, [fp, #20]
   3b41c:	cmp	r0, #0
   3b420:	ldreq	r4, [r9]
   3b424:	ldrne	r0, [r9, #4]
   3b428:	subne	r4, r0, r6
   3b42c:	b	3b434 <__assert_fail@plt+0x289b8>
   3b430:	mvn	r4, #1
   3b434:	ldr	r5, [sp, #32]
   3b438:	mov	r0, r9
   3b43c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b440:	ldr	r0, [sp, #28]
   3b444:	cmp	r0, #0
   3b448:	beq	3b454 <__assert_fail@plt+0x289d8>
   3b44c:	add	r0, r5, #136	; 0x88
   3b450:	bl	12338 <pthread_mutex_unlock@plt>
   3b454:	mov	r0, r4
   3b458:	sub	sp, fp, #28
   3b45c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b460:	add	ip, r7, sl, lsl #2
   3b464:	mov	lr, #0
   3b468:	add	r5, r9, sl, lsl #3
   3b46c:	str	r8, [sp, #24]
   3b470:	mov	r8, #0
   3b474:	add	r3, r6, sl, lsl #2
   3b478:	mov	r1, #0
   3b47c:	mov	r0, #0
   3b480:	mov	r2, #0
   3b484:	cmp	r9, ip
   3b488:	movwcc	lr, #1
   3b48c:	cmp	r5, r7
   3b490:	movwhi	r8, #1
   3b494:	cmp	r9, r3
   3b498:	movwcc	r1, #1
   3b49c:	cmp	r5, r6
   3b4a0:	mov	r5, #0
   3b4a4:	movwhi	r5, #1
   3b4a8:	cmp	r7, r3
   3b4ac:	mov	r3, #0
   3b4b0:	movwcc	r3, #1
   3b4b4:	cmp	r6, ip
   3b4b8:	movwcc	r0, #1
   3b4bc:	tst	r0, r3
   3b4c0:	bne	3b50c <__assert_fail@plt+0x28a90>
   3b4c4:	ands	r0, r5, r1
   3b4c8:	bne	3b50c <__assert_fail@plt+0x28a90>
   3b4cc:	ands	r0, r8, lr
   3b4d0:	ldr	r8, [sp, #24]
   3b4d4:	bne	3b3a4 <__assert_fail@plt+0x28928>
   3b4d8:	bic	r2, sl, #3
   3b4dc:	mov	r1, r7
   3b4e0:	mov	r0, r6
   3b4e4:	mov	r5, r9
   3b4e8:	mov	r3, r2
   3b4ec:	vld2.32	{d16-d19}, [r5]!
   3b4f0:	subs	r3, r3, #4
   3b4f4:	vst1.32	{d16-d17}, [r0]!
   3b4f8:	vst1.32	{d18-d19}, [r1]!
   3b4fc:	bne	3b4ec <__assert_fail@plt+0x28a70>
   3b500:	cmp	sl, r2
   3b504:	bne	3b3a4 <__assert_fail@plt+0x28928>
   3b508:	b	3b3cc <__assert_fail@plt+0x28950>
   3b50c:	ldr	r8, [sp, #24]
   3b510:	b	3b3a4 <__assert_fail@plt+0x28928>
   3b514:	ldr	r0, [r4, #4]
   3b518:	lsl	r7, r6, #2
   3b51c:	mov	r1, r7
   3b520:	bl	36328 <__assert_fail@plt+0x238ac>
   3b524:	mov	r8, #0
   3b528:	cmp	r0, #0
   3b52c:	beq	3b56c <__assert_fail@plt+0x28af0>
   3b530:	mov	r5, r0
   3b534:	ldr	r0, [r4, #8]
   3b538:	mov	r1, r7
   3b53c:	bl	36328 <__assert_fail@plt+0x238ac>
   3b540:	cmp	r0, #0
   3b544:	beq	3b574 <__assert_fail@plt+0x28af8>
   3b548:	str	r6, [r4]
   3b54c:	str	r5, [r4, #4]
   3b550:	str	r0, [r4, #8]
   3b554:	mov	r8, #1
   3b558:	cmp	sl, #1
   3b55c:	bge	3b394 <__assert_fail@plt+0x28918>
   3b560:	b	3b364 <__assert_fail@plt+0x288e8>
   3b564:	ldr	r0, [r4, #4]
   3b568:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b56c:	ldr	r6, [sp, #36]	; 0x24
   3b570:	b	3b3fc <__assert_fail@plt+0x28980>
   3b574:	mov	r0, r5
   3b578:	b	3b568 <__assert_fail@plt+0x28aec>
   3b57c:	push	{fp, lr}
   3b580:	mov	fp, sp
   3b584:	sub	sp, sp, #16
   3b588:	mov	ip, #0
   3b58c:	str	r2, [sp, #4]
   3b590:	str	ip, [sp, #12]
   3b594:	ldr	ip, [fp, #12]
   3b598:	str	ip, [sp, #8]
   3b59c:	ldr	ip, [fp, #8]
   3b5a0:	str	ip, [sp]
   3b5a4:	bl	3b0f0 <__assert_fail@plt+0x28674>
   3b5a8:	mov	sp, fp
   3b5ac:	pop	{fp, pc}
   3b5b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b5b4:	add	fp, sp, #28
   3b5b8:	sub	sp, sp, #20
   3b5bc:	ldr	r4, [fp, #8]
   3b5c0:	mov	r8, r1
   3b5c4:	mov	r1, r0
   3b5c8:	mov	r6, r2
   3b5cc:	orr	r0, r4, r2
   3b5d0:	ldr	r2, [fp, #20]
   3b5d4:	orr	r0, r0, r2
   3b5d8:	cmp	r0, #0
   3b5dc:	blt	3b69c <__assert_fail@plt+0x28c20>
   3b5e0:	adds	sl, r6, r4
   3b5e4:	bvs	3b69c <__assert_fail@plt+0x28c20>
   3b5e8:	mov	r5, #0
   3b5ec:	cmp	r4, #1
   3b5f0:	blt	3b648 <__assert_fail@plt+0x28bcc>
   3b5f4:	mov	r9, r3
   3b5f8:	cmp	r6, #1
   3b5fc:	blt	3b650 <__assert_fail@plt+0x28bd4>
   3b600:	mov	r0, sl
   3b604:	mov	r5, r1
   3b608:	bl	35608 <__assert_fail@plt+0x22b8c>
   3b60c:	cmp	r0, #0
   3b610:	beq	3b69c <__assert_fail@plt+0x28c20>
   3b614:	mov	r1, r8
   3b618:	mov	r2, r6
   3b61c:	mov	r7, r0
   3b620:	bl	124b8 <memcpy@plt>
   3b624:	add	r0, r7, r6
   3b628:	mov	r1, r9
   3b62c:	mov	r2, r4
   3b630:	bl	124b8 <memcpy@plt>
   3b634:	ldr	r2, [fp, #20]
   3b638:	mov	r1, r5
   3b63c:	mov	r4, r7
   3b640:	mov	r5, #0
   3b644:	b	3b658 <__assert_fail@plt+0x28bdc>
   3b648:	mov	r7, r8
   3b64c:	b	3b654 <__assert_fail@plt+0x28bd8>
   3b650:	mov	r7, r9
   3b654:	mov	r4, #0
   3b658:	ldr	r0, [fp, #16]
   3b65c:	ldr	r3, [fp, #12]
   3b660:	mov	r6, #1
   3b664:	str	r2, [sp, #4]
   3b668:	mov	r2, sl
   3b66c:	str	r5, [sp]
   3b670:	str	r6, [sp, #12]
   3b674:	str	r0, [sp, #8]
   3b678:	mov	r0, r1
   3b67c:	mov	r1, r7
   3b680:	bl	3b0f0 <__assert_fail@plt+0x28674>
   3b684:	mov	r5, r0
   3b688:	mov	r0, r4
   3b68c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b690:	mov	r0, r5
   3b694:	sub	sp, fp, #28
   3b698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b69c:	mvn	r0, #1
   3b6a0:	sub	sp, fp, #28
   3b6a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b6a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b6ac:	add	fp, sp, #28
   3b6b0:	sub	sp, sp, #20
   3b6b4:	ldr	r4, [fp, #8]
   3b6b8:	mov	r8, r1
   3b6bc:	mov	r1, r0
   3b6c0:	mov	r6, r2
   3b6c4:	orr	r0, r4, r2
   3b6c8:	ldr	r2, [fp, #24]
   3b6cc:	orr	r0, r0, r2
   3b6d0:	cmp	r0, #0
   3b6d4:	blt	3b794 <__assert_fail@plt+0x28d18>
   3b6d8:	adds	sl, r6, r4
   3b6dc:	bvs	3b794 <__assert_fail@plt+0x28d18>
   3b6e0:	mov	r5, #0
   3b6e4:	cmp	r4, #1
   3b6e8:	blt	3b740 <__assert_fail@plt+0x28cc4>
   3b6ec:	mov	r9, r3
   3b6f0:	cmp	r6, #1
   3b6f4:	blt	3b748 <__assert_fail@plt+0x28ccc>
   3b6f8:	mov	r0, sl
   3b6fc:	mov	r5, r1
   3b700:	bl	35608 <__assert_fail@plt+0x22b8c>
   3b704:	cmp	r0, #0
   3b708:	beq	3b794 <__assert_fail@plt+0x28d18>
   3b70c:	mov	r1, r8
   3b710:	mov	r2, r6
   3b714:	mov	r7, r0
   3b718:	bl	124b8 <memcpy@plt>
   3b71c:	add	r0, r7, r6
   3b720:	mov	r1, r9
   3b724:	mov	r2, r4
   3b728:	bl	124b8 <memcpy@plt>
   3b72c:	ldr	r2, [fp, #24]
   3b730:	mov	r1, r5
   3b734:	mov	r4, r7
   3b738:	mov	r5, #0
   3b73c:	b	3b750 <__assert_fail@plt+0x28cd4>
   3b740:	mov	r7, r8
   3b744:	b	3b74c <__assert_fail@plt+0x28cd0>
   3b748:	mov	r7, r9
   3b74c:	mov	r4, #0
   3b750:	ldr	r0, [fp, #20]
   3b754:	ldr	r6, [fp, #16]
   3b758:	ldr	r3, [fp, #12]
   3b75c:	str	r2, [sp, #4]
   3b760:	mov	r2, sl
   3b764:	str	r5, [sp, #12]
   3b768:	str	r0, [sp, #8]
   3b76c:	mov	r0, r1
   3b770:	mov	r1, r7
   3b774:	str	r6, [sp]
   3b778:	bl	3b0f0 <__assert_fail@plt+0x28674>
   3b77c:	mov	r5, r0
   3b780:	mov	r0, r4
   3b784:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b788:	mov	r0, r5
   3b78c:	sub	sp, fp, #28
   3b790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b794:	mvn	r0, #1
   3b798:	sub	sp, fp, #28
   3b79c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b7a0:	ldrb	ip, [r0, #28]
   3b7a4:	cmp	r2, #0
   3b7a8:	bic	ip, ip, #6
   3b7ac:	orrne	ip, ip, #2
   3b7b0:	strb	ip, [r0, #28]
   3b7b4:	ldr	r0, [sp]
   3b7b8:	moveq	r0, r2
   3b7bc:	cmp	r2, #0
   3b7c0:	moveq	r3, r2
   3b7c4:	stm	r1, {r2, r3}
   3b7c8:	str	r0, [r1, #8]
   3b7cc:	bx	lr
   3b7d0:	push	{r4, sl, fp, lr}
   3b7d4:	add	fp, sp, #8
   3b7d8:	mov	r4, r0
   3b7dc:	ldr	r0, [r0, #24]
   3b7e0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b7e4:	ldr	r0, [r4, #36]	; 0x24
   3b7e8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b7ec:	ldr	r0, [r4, #40]	; 0x28
   3b7f0:	add	r1, r4, #4
   3b7f4:	cmp	r0, r1
   3b7f8:	beq	3b80c <__assert_fail@plt+0x28d90>
   3b7fc:	ldr	r0, [r0, #8]
   3b800:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b804:	ldr	r0, [r4, #40]	; 0x28
   3b808:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b80c:	ldr	r0, [r4, #12]
   3b810:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b814:	ldr	r0, [r4, #48]	; 0x30
   3b818:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b81c:	ldr	r0, [r4, #44]	; 0x2c
   3b820:	bl	32c40 <__assert_fail@plt+0x201c4>
   3b824:	mov	r0, r4
   3b828:	pop	{r4, sl, fp, lr}
   3b82c:	b	32c40 <__assert_fail@plt+0x201c4>
   3b830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b834:	add	fp, sp, #28
   3b838:	sub	sp, sp, #92	; 0x5c
   3b83c:	mov	r9, r0
   3b840:	ldrb	r0, [r0, #74]	; 0x4a
   3b844:	ldr	r2, [r9, #36]	; 0x24
   3b848:	ldr	r1, [r9, #48]	; 0x30
   3b84c:	ldr	r4, [r9, #28]
   3b850:	cmp	r2, r1
   3b854:	movgt	r2, r1
   3b858:	cmp	r0, #0
   3b85c:	str	r2, [sp]
   3b860:	bne	3b880 <__assert_fail@plt+0x28e04>
   3b864:	mov	r7, r9
   3b868:	ldr	r0, [r7, #64]!	; 0x40
   3b86c:	cmp	r0, #0
   3b870:	bne	3b880 <__assert_fail@plt+0x28e04>
   3b874:	ldrb	r0, [r9, #76]	; 0x4c
   3b878:	cmp	r0, #0
   3b87c:	beq	3b888 <__assert_fail@plt+0x28e0c>
   3b880:	ldr	r6, [r9, #32]
   3b884:	b	3ba64 <__assert_fail@plt+0x28fe8>
   3b888:	ldr	r0, [sp]
   3b88c:	cmp	r0, r4
   3b890:	ble	3b8a0 <__assert_fail@plt+0x28e24>
   3b894:	add	r8, r9, #16
   3b898:	mov	sl, r4
   3b89c:	b	3b8f8 <__assert_fail@plt+0x28e7c>
   3b8a0:	mov	sl, r4
   3b8a4:	str	r4, [sp, #4]
   3b8a8:	b	3bb74 <__assert_fail@plt+0x290f8>
   3b8ac:	add	r0, r4, #1
   3b8b0:	cmp	r0, #2
   3b8b4:	bcc	3b8c8 <__assert_fail@plt+0x28e4c>
   3b8b8:	ldr	r0, [r9, #36]	; 0x24
   3b8bc:	ldr	r1, [r9, #48]	; 0x30
   3b8c0:	cmp	r0, r1
   3b8c4:	blt	3ba50 <__assert_fail@plt+0x28fd4>
   3b8c8:	ldr	r0, [r9, #4]
   3b8cc:	ldr	r1, [sp, #4]
   3b8d0:	cmn	r4, #1
   3b8d4:	strb	sl, [r0, r1]
   3b8d8:	ldr	r0, [r9, #8]
   3b8dc:	str	sl, [r0, r1, lsl #2]
   3b8e0:	add	sl, r1, #1
   3b8e4:	bne	3ba30 <__assert_fail@plt+0x28fb4>
   3b8e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3b8ec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3b8f0:	stm	r8, {r0, r1}
   3b8f4:	b	3ba30 <__assert_fail@plt+0x28fb4>
   3b8f8:	ldr	r5, [r9, #24]
   3b8fc:	ldr	r4, [r9]
   3b900:	str	sl, [sp, #4]
   3b904:	add	r0, r5, sl
   3b908:	ldrb	sl, [r4, r0]
   3b90c:	tst	sl, #128	; 0x80
   3b910:	bne	3b958 <__assert_fail@plt+0x28edc>
   3b914:	mov	r0, r8
   3b918:	bl	124f4 <mbsinit@plt>
   3b91c:	cmp	r0, #0
   3b920:	beq	3b958 <__assert_fail@plt+0x28edc>
   3b924:	mov	r0, sl
   3b928:	bl	12a04 <towupper@plt>
   3b92c:	cmp	r0, #128	; 0x80
   3b930:	bcs	3b950 <__assert_fail@plt+0x28ed4>
   3b934:	ldr	r2, [sp, #4]
   3b938:	ldr	r1, [r9, #4]
   3b93c:	strb	r0, [r1, r2]
   3b940:	add	sl, r2, #1
   3b944:	ldr	r1, [r9, #8]
   3b948:	str	r0, [r1, r2, lsl #2]
   3b94c:	b	3ba30 <__assert_fail@plt+0x28fb4>
   3b950:	ldr	r4, [r9]
   3b954:	ldr	r5, [r9, #24]
   3b958:	ldm	r8, {r0, r1}
   3b95c:	mov	r3, r8
   3b960:	str	r1, [fp, #-36]	; 0xffffffdc
   3b964:	str	r0, [fp, #-40]	; 0xffffffd8
   3b968:	ldm	sp, {r0, r1}
   3b96c:	sub	r2, r0, r1
   3b970:	add	r0, r4, r5
   3b974:	add	r1, r0, r1
   3b978:	add	r0, sp, #12
   3b97c:	bl	35638 <__assert_fail@plt+0x22bbc>
   3b980:	mov	r4, r0
   3b984:	sub	r0, r0, #1
   3b988:	cmn	r0, #4
   3b98c:	bhi	3b8ac <__assert_fail@plt+0x28e30>
   3b990:	ldr	r0, [sp, #12]
   3b994:	bl	12a04 <towupper@plt>
   3b998:	mov	r5, r0
   3b99c:	ldr	r0, [sp, #12]
   3b9a0:	cmp	r5, r0
   3b9a4:	bne	3b9c8 <__assert_fail@plt+0x28f4c>
   3b9a8:	ldr	r1, [r9]
   3b9ac:	ldr	r2, [r9, #24]
   3b9b0:	ldr	r0, [r9, #4]
   3b9b4:	ldr	r6, [sp, #4]
   3b9b8:	add	r1, r1, r2
   3b9bc:	add	r0, r0, r6
   3b9c0:	add	r1, r1, r6
   3b9c4:	b	3b9f4 <__assert_fail@plt+0x28f78>
   3b9c8:	add	sl, sp, #16
   3b9cc:	mov	r1, r5
   3b9d0:	sub	r2, fp, #40	; 0x28
   3b9d4:	mov	r0, sl
   3b9d8:	bl	1238c <wcrtomb@plt>
   3b9dc:	cmp	r4, r0
   3b9e0:	bne	3ba44 <__assert_fail@plt+0x28fc8>
   3b9e4:	ldr	r0, [r9, #4]
   3b9e8:	ldr	r6, [sp, #4]
   3b9ec:	mov	r1, sl
   3b9f0:	add	r0, r0, r6
   3b9f4:	mov	r2, r4
   3b9f8:	bl	124b8 <memcpy@plt>
   3b9fc:	ldr	r0, [r9, #8]
   3ba00:	add	sl, r6, #1
   3ba04:	str	r5, [r0, r6, lsl #2]
   3ba08:	add	r5, r4, r6
   3ba0c:	cmp	sl, r5
   3ba10:	bge	3ba30 <__assert_fail@plt+0x28fb4>
   3ba14:	add	r0, r0, r6, lsl #2
   3ba18:	mvn	r1, #3
   3ba1c:	add	r2, r1, r4, lsl #2
   3ba20:	add	r0, r0, #4
   3ba24:	mov	r1, #255	; 0xff
   3ba28:	bl	12800 <memset@plt>
   3ba2c:	mov	sl, r5
   3ba30:	ldr	r0, [sp]
   3ba34:	str	sl, [sp, #4]
   3ba38:	cmp	r0, sl
   3ba3c:	bgt	3b8f8 <__assert_fail@plt+0x28e7c>
   3ba40:	b	3bb74 <__assert_fail@plt+0x290f8>
   3ba44:	ldr	r6, [sp, #4]
   3ba48:	mov	sl, r6
   3ba4c:	b	3ba7c <__assert_fail@plt+0x29000>
   3ba50:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3ba54:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3ba58:	stm	r8, {r0, r1}
   3ba5c:	ldr	sl, [sp, #4]
   3ba60:	b	3bb74 <__assert_fail@plt+0x290f8>
   3ba64:	ldr	r0, [sp]
   3ba68:	cmp	r4, r0
   3ba6c:	bge	3bb6c <__assert_fail@plt+0x290f0>
   3ba70:	add	r7, r9, #64	; 0x40
   3ba74:	add	r8, r9, #16
   3ba78:	mov	sl, r4
   3ba7c:	ldm	r8, {r0, r1}
   3ba80:	str	r6, [sp, #4]
   3ba84:	str	r0, [fp, #-40]	; 0xffffffd8
   3ba88:	ldr	r0, [sp]
   3ba8c:	str	r1, [fp, #-36]	; 0xffffffdc
   3ba90:	sub	r2, r0, sl
   3ba94:	ldr	r0, [r7]
   3ba98:	cmp	r0, #0
   3ba9c:	bne	3bb8c <__assert_fail@plt+0x29110>
   3baa0:	ldr	r0, [r9]
   3baa4:	ldr	r1, [r9, #24]
   3baa8:	add	r0, r0, r1
   3baac:	add	r4, r0, r6
   3bab0:	add	r0, sp, #8
   3bab4:	mov	r1, r4
   3bab8:	mov	r3, r8
   3babc:	bl	35638 <__assert_fail@plt+0x22bbc>
   3bac0:	sub	r6, r0, #1
   3bac4:	mov	r5, r0
   3bac8:	cmn	r6, #4
   3bacc:	bhi	3bbdc <__assert_fail@plt+0x29160>
   3bad0:	ldr	r0, [sp, #8]
   3bad4:	bl	12a04 <towupper@plt>
   3bad8:	mov	r7, r0
   3badc:	ldr	r0, [sp, #8]
   3bae0:	cmp	r7, r0
   3bae4:	bne	3baf4 <__assert_fail@plt+0x29078>
   3bae8:	ldr	r0, [r9, #4]
   3baec:	mov	r1, r4
   3baf0:	b	3bb14 <__assert_fail@plt+0x29098>
   3baf4:	add	r0, sp, #16
   3baf8:	sub	r2, fp, #40	; 0x28
   3bafc:	mov	r1, r7
   3bb00:	bl	1238c <wcrtomb@plt>
   3bb04:	cmp	r0, r5
   3bb08:	bne	3bc58 <__assert_fail@plt+0x291dc>
   3bb0c:	ldr	r0, [r9, #4]
   3bb10:	add	r1, sp, #16
   3bb14:	add	r0, r0, sl
   3bb18:	mov	r2, r5
   3bb1c:	bl	124b8 <memcpy@plt>
   3bb20:	ldrb	r0, [r9, #76]	; 0x4c
   3bb24:	ldr	r6, [sp, #4]
   3bb28:	cmp	r0, #0
   3bb2c:	bne	3bcec <__assert_fail@plt+0x29270>
   3bb30:	ldr	r0, [r9, #8]
   3bb34:	add	r4, r5, sl
   3bb38:	add	r1, sl, #1
   3bb3c:	add	r6, r5, r6
   3bb40:	cmp	r1, r4
   3bb44:	str	r7, [r0, sl, lsl #2]
   3bb48:	bge	3bb64 <__assert_fail@plt+0x290e8>
   3bb4c:	add	r0, r0, r1, lsl #2
   3bb50:	mvn	r1, #3
   3bb54:	add	r2, r1, r5, lsl #2
   3bb58:	mov	r1, #255	; 0xff
   3bb5c:	bl	12800 <memset@plt>
   3bb60:	b	3ba64 <__assert_fail@plt+0x28fe8>
   3bb64:	mov	r4, r1
   3bb68:	b	3ba64 <__assert_fail@plt+0x28fe8>
   3bb6c:	str	r6, [sp, #4]
   3bb70:	mov	sl, r4
   3bb74:	ldr	r0, [sp, #4]
   3bb78:	str	sl, [r9, #28]
   3bb7c:	str	r0, [r9, #32]
   3bb80:	mov	r0, #0
   3bb84:	sub	sp, fp, #28
   3bb88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bb8c:	cmp	r2, #1
   3bb90:	add	r4, sp, #16
   3bb94:	ldrge	r1, [r9, #80]	; 0x50
   3bb98:	cmpge	r1, #1
   3bb9c:	blt	3bab0 <__assert_fail@plt+0x29034>
   3bba0:	ldr	r7, [r9, #24]
   3bba4:	ldr	r3, [r9]
   3bba8:	add	r4, sp, #16
   3bbac:	add	r7, r6, r7
   3bbb0:	add	r3, r3, r7
   3bbb4:	mov	r7, #0
   3bbb8:	ldrb	r5, [r3, r7]
   3bbbc:	ldrb	r5, [r0, r5]
   3bbc0:	strb	r5, [r4, r7]
   3bbc4:	add	r7, r7, #1
   3bbc8:	cmp	r7, r2
   3bbcc:	bge	3bab0 <__assert_fail@plt+0x29034>
   3bbd0:	cmp	r7, r1
   3bbd4:	blt	3bbb8 <__assert_fail@plt+0x2913c>
   3bbd8:	b	3bab0 <__assert_fail@plt+0x29034>
   3bbdc:	add	r0, r5, #1
   3bbe0:	cmp	r0, #2
   3bbe4:	bcc	3bbf8 <__assert_fail@plt+0x2917c>
   3bbe8:	ldr	r0, [r9, #36]	; 0x24
   3bbec:	ldr	r1, [r9, #48]	; 0x30
   3bbf0:	cmp	r0, r1
   3bbf4:	blt	3bd58 <__assert_fail@plt+0x292dc>
   3bbf8:	ldr	r2, [r9, #24]
   3bbfc:	ldr	r6, [sp, #4]
   3bc00:	ldr	r0, [r9]
   3bc04:	ldr	r1, [r9, #64]	; 0x40
   3bc08:	add	r4, sl, #1
   3bc0c:	add	r2, r2, r6
   3bc10:	cmp	r1, #0
   3bc14:	ldrb	r0, [r0, r2]
   3bc18:	ldrbne	r0, [r1, r0]
   3bc1c:	ldr	r1, [r9, #4]
   3bc20:	strb	r0, [r1, sl]
   3bc24:	ldrb	r1, [r9, #76]	; 0x4c
   3bc28:	cmp	r1, #0
   3bc2c:	ldrne	r1, [r9, #12]
   3bc30:	strne	r6, [r1, sl, lsl #2]
   3bc34:	add	r6, r6, #1
   3bc38:	cmn	r5, #1
   3bc3c:	ldr	r1, [r9, #8]
   3bc40:	str	r0, [r1, sl, lsl #2]
   3bc44:	bne	3ba64 <__assert_fail@plt+0x28fe8>
   3bc48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3bc4c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3bc50:	stm	r8, {r0, r1}
   3bc54:	b	3ba64 <__assert_fail@plt+0x28fe8>
   3bc58:	mov	r3, r0
   3bc5c:	cmn	r0, #1
   3bc60:	beq	3bae8 <__assert_fail@plt+0x2906c>
   3bc64:	ldr	r1, [r9, #36]	; 0x24
   3bc68:	add	r4, r3, sl
   3bc6c:	cmp	r4, r1
   3bc70:	bhi	3bd58 <__assert_fail@plt+0x292dc>
   3bc74:	ldr	r0, [r9, #12]
   3bc78:	cmp	r0, #0
   3bc7c:	bne	3bc9c <__assert_fail@plt+0x29220>
   3bc80:	lsl	r0, r1, #2
   3bc84:	mov	r8, r3
   3bc88:	bl	35608 <__assert_fail@plt+0x22b8c>
   3bc8c:	mov	r3, r8
   3bc90:	cmp	r0, #0
   3bc94:	str	r0, [r9, #12]
   3bc98:	beq	3bd68 <__assert_fail@plt+0x292ec>
   3bc9c:	ldrb	r1, [r9, #76]	; 0x4c
   3bca0:	cmp	r1, #0
   3bca4:	bne	3bd8c <__assert_fail@plt+0x29310>
   3bca8:	cmp	sl, #0
   3bcac:	beq	3bd84 <__assert_fail@plt+0x29308>
   3bcb0:	mov	r1, #0
   3bcb4:	cmp	sl, #4
   3bcb8:	bcc	3bd74 <__assert_fail@plt+0x292f8>
   3bcbc:	add	r2, pc, #524	; 0x20c
   3bcc0:	bic	r1, sl, #3
   3bcc4:	vmov.i32	q8, #4	; 0x00000004
   3bcc8:	vld1.64	{d18-d19}, [r2 :128]
   3bccc:	mov	ip, r1
   3bcd0:	mov	r2, r0
   3bcd4:	vadd.i32	q10, q9, q8
   3bcd8:	vst1.32	{d18-d19}, [r2]!
   3bcdc:	subs	ip, ip, #4
   3bce0:	vorr	q9, q10, q10
   3bce4:	bne	3bcd4 <__assert_fail@plt+0x29258>
   3bce8:	b	3bd7c <__assert_fail@plt+0x29300>
   3bcec:	ldr	r0, [r9, #12]
   3bcf0:	mov	r1, #0
   3bcf4:	cmp	r5, #4
   3bcf8:	bcc	3bd34 <__assert_fail@plt+0x292b8>
   3bcfc:	add	r3, pc, #460	; 0x1cc
   3bd00:	bic	r1, r5, #3
   3bd04:	add	r2, r0, sl, lsl #2
   3bd08:	vdup.32	q8, r6
   3bd0c:	vmov.i32	q10, #4	; 0x00000004
   3bd10:	vld1.64	{d18-d19}, [r3 :128]
   3bd14:	mov	r3, r1
   3bd18:	vadd.i32	q11, q9, q8
   3bd1c:	vadd.i32	q9, q9, q10
   3bd20:	subs	r3, r3, #4
   3bd24:	vst1.32	{d22-d23}, [r2]!
   3bd28:	bne	3bd18 <__assert_fail@plt+0x2929c>
   3bd2c:	cmp	r5, r1
   3bd30:	beq	3bb30 <__assert_fail@plt+0x290b4>
   3bd34:	add	r2, r6, r1
   3bd38:	sub	r3, r5, r1
   3bd3c:	add	r1, sl, r1
   3bd40:	add	r0, r0, r1, lsl #2
   3bd44:	str	r2, [r0], #4
   3bd48:	add	r2, r2, #1
   3bd4c:	subs	r3, r3, #1
   3bd50:	bne	3bd44 <__assert_fail@plt+0x292c8>
   3bd54:	b	3bb30 <__assert_fail@plt+0x290b4>
   3bd58:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3bd5c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3bd60:	stm	r8, {r0, r1}
   3bd64:	b	3bb74 <__assert_fail@plt+0x290f8>
   3bd68:	mov	r0, #12
   3bd6c:	sub	sp, fp, #28
   3bd70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bd74:	str	r1, [r0, r1, lsl #2]
   3bd78:	add	r1, r1, #1
   3bd7c:	cmp	sl, r1
   3bd80:	bne	3bd74 <__assert_fail@plt+0x292f8>
   3bd84:	mov	r0, #1
   3bd88:	strb	r0, [r9, #76]	; 0x4c
   3bd8c:	ldr	r0, [r9, #4]
   3bd90:	add	r1, sp, #16
   3bd94:	mov	r2, r3
   3bd98:	mov	r8, r3
   3bd9c:	add	r0, r0, sl
   3bda0:	bl	124b8 <memcpy@plt>
   3bda4:	ldr	lr, [r9, #8]
   3bda8:	ldr	ip, [sp, #4]
   3bdac:	cmp	r8, #2
   3bdb0:	str	r7, [lr, sl, lsl #2]
   3bdb4:	ldr	r2, [r9, #12]
   3bdb8:	str	ip, [r2, sl, lsl #2]
   3bdbc:	bcc	3be90 <__assert_fail@plt+0x29414>
   3bdc0:	sub	r0, r8, #1
   3bdc4:	mov	r1, #1
   3bdc8:	cmp	r0, #4
   3bdcc:	bcs	3bdd8 <__assert_fail@plt+0x2935c>
   3bdd0:	ldr	ip, [sp, #4]
   3bdd4:	b	3be60 <__assert_fail@plt+0x293e4>
   3bdd8:	str	r0, [sp]
   3bddc:	add	r3, r8, sl
   3bde0:	add	r0, sl, #1
   3bde4:	add	r7, lr, r0, lsl #2
   3bde8:	add	ip, lr, r3, lsl #2
   3bdec:	add	r0, r2, r0, lsl #2
   3bdf0:	cmp	r0, ip
   3bdf4:	ldr	ip, [sp, #4]
   3bdf8:	addcc	r3, r2, r3, lsl #2
   3bdfc:	cmpcc	r7, r3
   3be00:	bcc	3be60 <__assert_fail@plt+0x293e4>
   3be04:	add	r1, pc, #212	; 0xd4
   3be08:	vdup.32	q8, ip
   3be0c:	vdup.32	q9, r6
   3be10:	vdup.32	q10, r5
   3be14:	vmov.i32	q12, #4	; 0x00000004
   3be18:	vmov.i8	q13, #255	; 0xff
   3be1c:	vld1.64	{d22-d23}, [r1 :128]
   3be20:	ldr	r1, [sp]
   3be24:	bic	ip, r1, #3
   3be28:	orr	r1, ip, #1
   3be2c:	mov	r3, ip
   3be30:	vcgt.u32	q14, q10, q11
   3be34:	subs	r3, r3, #4
   3be38:	vbsl	q14, q11, q9
   3be3c:	vadd.i32	q11, q11, q12
   3be40:	vadd.i32	q14, q14, q8
   3be44:	vst1.32	{d28-d29}, [r0]!
   3be48:	vst1.32	{d26-d27}, [r7]!
   3be4c:	bne	3be30 <__assert_fail@plt+0x293b4>
   3be50:	ldr	r0, [sp]
   3be54:	cmp	r0, ip
   3be58:	ldr	ip, [sp, #4]
   3be5c:	beq	3be90 <__assert_fail@plt+0x29414>
   3be60:	add	r2, r2, sl, lsl #2
   3be64:	add	r0, lr, sl, lsl #2
   3be68:	mvn	r3, #0
   3be6c:	cmp	r1, r5
   3be70:	mov	r7, r6
   3be74:	movcc	r7, r1
   3be78:	add	r7, r7, ip
   3be7c:	str	r7, [r2, r1, lsl #2]
   3be80:	str	r3, [r0, r1, lsl #2]
   3be84:	add	r1, r1, #1
   3be88:	cmp	r8, r1
   3be8c:	bne	3be6c <__assert_fail@plt+0x293f0>
   3be90:	ldr	r0, [r9, #48]	; 0x30
   3be94:	ldr	r2, [r9, #52]	; 0x34
   3be98:	sub	r1, r8, r5
   3be9c:	mov	r6, ip
   3bea0:	add	r6, r5, r6
   3bea4:	add	r0, r0, r1
   3bea8:	cmp	r2, ip
   3beac:	str	r0, [r9, #48]	; 0x30
   3beb0:	ldrgt	r2, [r9, #56]	; 0x38
   3beb4:	addgt	r1, r2, r1
   3beb8:	strgt	r1, [r9, #56]	; 0x38
   3bebc:	ldr	r1, [r9, #36]	; 0x24
   3bec0:	cmp	r1, r0
   3bec4:	movgt	r1, r0
   3bec8:	str	r1, [sp]
   3becc:	b	3ba64 <__assert_fail@plt+0x28fe8>
   3bed0:	andeq	r0, r0, r0
   3bed4:	andeq	r0, r0, r1
   3bed8:	andeq	r0, r0, r2
   3bedc:	andeq	r0, r0, r3
   3bee0:	andeq	r0, r0, r1
   3bee4:	andeq	r0, r0, r2
   3bee8:	andeq	r0, r0, r3
   3beec:	andeq	r0, r0, r4
   3bef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bef4:	add	fp, sp, #28
   3bef8:	sub	sp, sp, #68	; 0x44
   3befc:	mov	r4, r0
   3bf00:	ldr	r6, [r0, #28]
   3bf04:	ldr	r7, [r0, #36]	; 0x24
   3bf08:	ldr	r0, [r0, #48]	; 0x30
   3bf0c:	cmp	r7, r0
   3bf10:	movgt	r7, r0
   3bf14:	cmp	r7, r6
   3bf18:	ble	3c0b4 <__assert_fail@plt+0x29638>
   3bf1c:	add	r8, r4, #16
   3bf20:	mov	r5, sp
   3bf24:	ldm	r8, {r9, sl}
   3bf28:	ldr	r0, [r4, #64]	; 0x40
   3bf2c:	sub	r2, r7, r6
   3bf30:	cmp	r0, #0
   3bf34:	bne	3c004 <__assert_fail@plt+0x29588>
   3bf38:	ldr	r0, [r4]
   3bf3c:	ldr	r1, [r4, #24]
   3bf40:	add	r0, r0, r1
   3bf44:	add	r1, r0, r6
   3bf48:	mov	r0, r5
   3bf4c:	mov	r3, r8
   3bf50:	bl	35638 <__assert_fail@plt+0x22bbc>
   3bf54:	add	r1, r0, #1
   3bf58:	cmp	r1, #2
   3bf5c:	bcc	3bf78 <__assert_fail@plt+0x294fc>
   3bf60:	cmn	r0, #2
   3bf64:	bne	3bfb4 <__assert_fail@plt+0x29538>
   3bf68:	ldr	r0, [r4, #36]	; 0x24
   3bf6c:	ldr	r1, [r4, #48]	; 0x30
   3bf70:	cmp	r0, r1
   3bf74:	blt	3c0c8 <__assert_fail@plt+0x2964c>
   3bf78:	ldr	r1, [r4, #24]
   3bf7c:	ldr	r0, [r4]
   3bf80:	mov	r2, sl
   3bf84:	mov	sl, r5
   3bf88:	add	r1, r1, r6
   3bf8c:	ldrb	r1, [r0, r1]
   3bf90:	str	r1, [sp]
   3bf94:	ldr	r0, [r4, #64]	; 0x40
   3bf98:	cmp	r0, #0
   3bf9c:	ldrbne	r1, [r0, r1]
   3bfa0:	mov	r0, #1
   3bfa4:	strne	r1, [sp]
   3bfa8:	str	r9, [r8]
   3bfac:	str	r2, [r8, #4]
   3bfb0:	b	3bfbc <__assert_fail@plt+0x29540>
   3bfb4:	ldr	r1, [sp]
   3bfb8:	mov	sl, r5
   3bfbc:	ldr	r3, [r4, #8]
   3bfc0:	add	r5, r0, r6
   3bfc4:	str	r1, [r3, r6, lsl #2]
   3bfc8:	add	r1, r6, #1
   3bfcc:	cmp	r1, r5
   3bfd0:	bge	3bff0 <__assert_fail@plt+0x29574>
   3bfd4:	mvn	r1, #3
   3bfd8:	add	r2, r1, r0, lsl #2
   3bfdc:	add	r0, r3, r6, lsl #2
   3bfe0:	mov	r1, #255	; 0xff
   3bfe4:	add	r0, r0, #4
   3bfe8:	bl	12800 <memset@plt>
   3bfec:	mov	r1, r5
   3bff0:	cmp	r7, r1
   3bff4:	mov	r6, r1
   3bff8:	mov	r5, sl
   3bffc:	bgt	3bf24 <__assert_fail@plt+0x294a8>
   3c000:	b	3c0b8 <__assert_fail@plt+0x2963c>
   3c004:	cmp	r2, #1
   3c008:	add	r1, sp, #4
   3c00c:	blt	3bf48 <__assert_fail@plt+0x294cc>
   3c010:	ldr	r1, [r4, #80]	; 0x50
   3c014:	cmp	r1, #1
   3c018:	add	r1, sp, #4
   3c01c:	blt	3bf48 <__assert_fail@plt+0x294cc>
   3c020:	ldm	r4, {r1, r3}
   3c024:	mov	lr, r5
   3c028:	ldr	r5, [r4, #24]
   3c02c:	cmp	r2, #2
   3c030:	add	r5, r6, r5
   3c034:	ldrb	r1, [r1, r5]
   3c038:	mov	r5, lr
   3c03c:	ldrb	r0, [r0, r1]
   3c040:	add	r1, sp, #4
   3c044:	strb	r0, [r3, r6]
   3c048:	strb	r0, [sp, #4]
   3c04c:	blt	3bf48 <__assert_fail@plt+0x294cc>
   3c050:	ldr	r0, [r4, #80]	; 0x50
   3c054:	add	r1, sp, #4
   3c058:	cmp	r0, #2
   3c05c:	blt	3bf48 <__assert_fail@plt+0x294cc>
   3c060:	mov	r0, #1
   3c064:	ldm	r4, {r1, ip}
   3c068:	ldr	r5, [r4, #24]
   3c06c:	ldr	r3, [r4, #64]	; 0x40
   3c070:	add	r1, r1, r5
   3c074:	add	r1, r1, r6
   3c078:	ldrb	r1, [r1, r0]
   3c07c:	ldrb	r1, [r3, r1]
   3c080:	add	r3, ip, r6
   3c084:	strb	r1, [r3, r0]
   3c088:	add	r3, sp, #4
   3c08c:	strb	r1, [r3, r0]
   3c090:	add	r0, r0, #1
   3c094:	cmp	r0, r2
   3c098:	bge	3c0a8 <__assert_fail@plt+0x2962c>
   3c09c:	ldr	r1, [r4, #80]	; 0x50
   3c0a0:	cmp	r0, r1
   3c0a4:	blt	3c064 <__assert_fail@plt+0x295e8>
   3c0a8:	add	r1, sp, #4
   3c0ac:	mov	r5, lr
   3c0b0:	b	3bf48 <__assert_fail@plt+0x294cc>
   3c0b4:	mov	r1, r6
   3c0b8:	str	r1, [r4, #28]
   3c0bc:	str	r1, [r4, #32]
   3c0c0:	sub	sp, fp, #28
   3c0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c0c8:	stm	r8, {r9, sl}
   3c0cc:	mov	r1, r6
   3c0d0:	str	r1, [r4, #28]
   3c0d4:	str	r1, [r4, #32]
   3c0d8:	sub	sp, fp, #28
   3c0dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c0e4:	add	fp, sp, #28
   3c0e8:	sub	sp, sp, #28
   3c0ec:	ldr	r8, [r1]
   3c0f0:	mov	r7, r0
   3c0f4:	ldr	r6, [fp, #12]
   3c0f8:	mov	r5, r2
   3c0fc:	str	r1, [sp, #20]
   3c100:	str	r3, [sp, #24]
   3c104:	ldr	r0, [r8, #84]	; 0x54
   3c108:	str	r6, [sp, #4]
   3c10c:	str	r0, [sp, #16]
   3c110:	ldr	r0, [fp, #8]
   3c114:	str	r0, [sp]
   3c118:	mov	r0, r7
   3c11c:	bl	3ccb8 <__assert_fail@plt+0x2a23c>
   3c120:	mov	r4, r0
   3c124:	cmp	r0, #0
   3c128:	bne	3c138 <__assert_fail@plt+0x296bc>
   3c12c:	ldr	r0, [r6]
   3c130:	cmp	r0, #0
   3c134:	bne	3c45c <__assert_fail@plt+0x299e0>
   3c138:	ldrb	r0, [r5, #4]
   3c13c:	cmp	r0, #10
   3c140:	movne	r0, r4
   3c144:	subne	sp, fp, #28
   3c148:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c14c:	ldr	r0, [sp, #24]
   3c150:	mov	r9, #0
   3c154:	orr	sl, r0, #8388608	; 0x800000
   3c158:	ldr	r0, [fp, #8]
   3c15c:	str	sl, [sp, #12]
   3c160:	cmp	r0, #0
   3c164:	bne	3c208 <__assert_fail@plt+0x2978c>
   3c168:	b	3c2c0 <__assert_fail@plt+0x29844>
   3c16c:	cmp	r0, #9
   3c170:	mov	r6, #0
   3c174:	beq	3c238 <__assert_fail@plt+0x297bc>
   3c178:	ldr	r0, [sp, #16]
   3c17c:	ldr	sl, [r8, #84]	; 0x54
   3c180:	ldr	r1, [sp, #20]
   3c184:	ldr	r3, [sp, #24]
   3c188:	mov	r2, r5
   3c18c:	str	r0, [r8, #84]	; 0x54
   3c190:	ldr	r0, [fp, #8]
   3c194:	str	r0, [sp]
   3c198:	ldr	r0, [fp, #12]
   3c19c:	str	r0, [sp, #4]
   3c1a0:	mov	r0, r7
   3c1a4:	bl	3ccb8 <__assert_fail@plt+0x2a23c>
   3c1a8:	mov	r6, r0
   3c1ac:	cmp	r0, #0
   3c1b0:	bne	3c1c4 <__assert_fail@plt+0x29748>
   3c1b4:	ldr	r0, [fp, #12]
   3c1b8:	ldr	r0, [r0]
   3c1bc:	cmp	r0, #0
   3c1c0:	bne	3c3ac <__assert_fail@plt+0x29930>
   3c1c4:	ldr	r0, [r8, #84]	; 0x54
   3c1c8:	orr	r0, r0, sl
   3c1cc:	ldr	sl, [sp, #12]
   3c1d0:	str	r0, [r8, #84]	; 0x54
   3c1d4:	ldr	r1, [r8, #64]	; 0x40
   3c1d8:	cmp	r1, #31
   3c1dc:	bne	3c244 <__assert_fail@plt+0x297c8>
   3c1e0:	mov	r0, #996	; 0x3e4
   3c1e4:	bl	35608 <__assert_fail@plt+0x22b8c>
   3c1e8:	cmp	r0, #0
   3c1ec:	beq	3c450 <__assert_fail@plt+0x299d4>
   3c1f0:	ldr	r1, [r8, #56]	; 0x38
   3c1f4:	str	r1, [r0]
   3c1f8:	mov	r1, #0
   3c1fc:	str	r1, [r8, #64]	; 0x40
   3c200:	str	r0, [r8, #56]	; 0x38
   3c204:	b	3c248 <__assert_fail@plt+0x297cc>
   3c208:	mov	r0, r5
   3c20c:	mov	r1, r7
   3c210:	mov	r2, sl
   3c214:	bl	3c468 <__assert_fail@plt+0x299ec>
   3c218:	ldr	r1, [r7, #40]	; 0x28
   3c21c:	mov	r6, #0
   3c220:	add	r0, r1, r0
   3c224:	str	r0, [r7, #40]	; 0x28
   3c228:	ldrb	r0, [r5, #4]
   3c22c:	orr	r1, r0, #8
   3c230:	cmp	r1, #10
   3c234:	bne	3c16c <__assert_fail@plt+0x296f0>
   3c238:	ldr	r1, [r8, #64]	; 0x40
   3c23c:	cmp	r1, #31
   3c240:	beq	3c1e0 <__assert_fail@plt+0x29764>
   3c244:	ldr	r0, [r8, #56]	; 0x38
   3c248:	add	r2, r1, #1
   3c24c:	add	r0, r0, r1, lsl #5
   3c250:	mov	r1, #10
   3c254:	cmp	r4, #0
   3c258:	str	r2, [r8, #64]	; 0x40
   3c25c:	str	r9, [r0, #4]!
   3c260:	stmib	r0, {r4, r6, r9}
   3c264:	str	r9, [r0, #16]
   3c268:	str	r9, [r0, #20]
   3c26c:	str	r1, [r0, #24]
   3c270:	mvn	r1, #0
   3c274:	str	r1, [r0, #28]
   3c278:	strne	r0, [r4]
   3c27c:	cmp	r6, #0
   3c280:	mov	r4, r0
   3c284:	strne	r0, [r6]
   3c288:	ldrb	r1, [r5, #4]
   3c28c:	cmp	r1, #10
   3c290:	beq	3c208 <__assert_fail@plt+0x2978c>
   3c294:	b	3c3a4 <__assert_fail@plt+0x29928>
   3c298:	mov	r0, #996	; 0x3e4
   3c29c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3c2a0:	cmp	r0, #0
   3c2a4:	beq	3c450 <__assert_fail@plt+0x299d4>
   3c2a8:	ldr	r1, [r8, #56]	; 0x38
   3c2ac:	str	r1, [r0]
   3c2b0:	mov	r1, #0
   3c2b4:	str	r1, [r8, #64]	; 0x40
   3c2b8:	str	r0, [r8, #56]	; 0x38
   3c2bc:	b	3c358 <__assert_fail@plt+0x298dc>
   3c2c0:	mov	r0, r5
   3c2c4:	mov	r1, r7
   3c2c8:	mov	r2, sl
   3c2cc:	bl	3c468 <__assert_fail@plt+0x299ec>
   3c2d0:	ldr	r1, [r7, #40]	; 0x28
   3c2d4:	mov	r6, #0
   3c2d8:	add	r0, r1, r0
   3c2dc:	str	r0, [r7, #40]	; 0x28
   3c2e0:	ldrb	r0, [r5, #4]
   3c2e4:	orr	r0, r0, #8
   3c2e8:	cmp	r0, #10
   3c2ec:	beq	3c348 <__assert_fail@plt+0x298cc>
   3c2f0:	ldr	r0, [sp, #16]
   3c2f4:	ldr	sl, [r8, #84]	; 0x54
   3c2f8:	ldr	r1, [sp, #20]
   3c2fc:	ldr	r3, [sp, #24]
   3c300:	mov	r2, r5
   3c304:	str	r0, [r8, #84]	; 0x54
   3c308:	ldr	r0, [fp, #12]
   3c30c:	str	r9, [sp]
   3c310:	str	r0, [sp, #4]
   3c314:	mov	r0, r7
   3c318:	bl	3ccb8 <__assert_fail@plt+0x2a23c>
   3c31c:	mov	r6, r0
   3c320:	cmp	r0, #0
   3c324:	bne	3c338 <__assert_fail@plt+0x298bc>
   3c328:	ldr	r0, [fp, #12]
   3c32c:	ldr	r0, [r0]
   3c330:	cmp	r0, #0
   3c334:	bne	3c3ac <__assert_fail@plt+0x29930>
   3c338:	ldr	r0, [r8, #84]	; 0x54
   3c33c:	orr	r0, r0, sl
   3c340:	ldr	sl, [sp, #12]
   3c344:	str	r0, [r8, #84]	; 0x54
   3c348:	ldr	r1, [r8, #64]	; 0x40
   3c34c:	cmp	r1, #31
   3c350:	beq	3c298 <__assert_fail@plt+0x2981c>
   3c354:	ldr	r0, [r8, #56]	; 0x38
   3c358:	add	r2, r1, #1
   3c35c:	add	r0, r0, r1, lsl #5
   3c360:	mov	r1, #10
   3c364:	cmp	r4, #0
   3c368:	str	r2, [r8, #64]	; 0x40
   3c36c:	str	r9, [r0, #4]!
   3c370:	stmib	r0, {r4, r6, r9}
   3c374:	str	r9, [r0, #16]
   3c378:	str	r9, [r0, #20]
   3c37c:	str	r1, [r0, #24]
   3c380:	mvn	r1, #0
   3c384:	str	r1, [r0, #28]
   3c388:	strne	r0, [r4]
   3c38c:	cmp	r6, #0
   3c390:	mov	r4, r0
   3c394:	strne	r0, [r6]
   3c398:	ldrb	r1, [r5, #4]
   3c39c:	cmp	r1, #10
   3c3a0:	beq	3c2c0 <__assert_fail@plt+0x29844>
   3c3a4:	sub	sp, fp, #28
   3c3a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c3ac:	cmp	r4, #0
   3c3b0:	beq	3c45c <__assert_fail@plt+0x299e0>
   3c3b4:	movw	r5, #255	; 0xff
   3c3b8:	movt	r5, #4
   3c3bc:	mov	r6, r4
   3c3c0:	ldr	r4, [r4, #4]
   3c3c4:	cmp	r4, #0
   3c3c8:	bne	3c3bc <__assert_fail@plt+0x29940>
   3c3cc:	ldr	r4, [r6, #8]
   3c3d0:	cmp	r4, #0
   3c3d4:	bne	3c3bc <__assert_fail@plt+0x29940>
   3c3d8:	ldr	r0, [r6, #24]
   3c3dc:	and	r0, r0, r5
   3c3e0:	cmp	r0, #3
   3c3e4:	beq	3c41c <__assert_fail@plt+0x299a0>
   3c3e8:	cmp	r0, #6
   3c3ec:	bne	3c424 <__assert_fail@plt+0x299a8>
   3c3f0:	ldr	r4, [r6, #20]
   3c3f4:	ldr	r0, [r4]
   3c3f8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3c3fc:	ldr	r0, [r4, #4]
   3c400:	bl	32c40 <__assert_fail@plt+0x201c4>
   3c404:	ldr	r0, [r4, #8]
   3c408:	bl	32c40 <__assert_fail@plt+0x201c4>
   3c40c:	ldr	r0, [r4, #12]
   3c410:	bl	32c40 <__assert_fail@plt+0x201c4>
   3c414:	mov	r0, r4
   3c418:	b	3c420 <__assert_fail@plt+0x299a4>
   3c41c:	ldr	r0, [r6, #20]
   3c420:	bl	32c40 <__assert_fail@plt+0x201c4>
   3c424:	ldr	r0, [r6]
   3c428:	cmp	r0, #0
   3c42c:	beq	3c45c <__assert_fail@plt+0x299e0>
   3c430:	ldr	r4, [r0, #8]
   3c434:	cmp	r4, r6
   3c438:	mov	r6, r0
   3c43c:	beq	3c3d8 <__assert_fail@plt+0x2995c>
   3c440:	cmp	r4, #0
   3c444:	mov	r6, r0
   3c448:	beq	3c3d8 <__assert_fail@plt+0x2995c>
   3c44c:	b	3c3bc <__assert_fail@plt+0x29940>
   3c450:	ldr	r1, [fp, #12]
   3c454:	mov	r0, #12
   3c458:	str	r0, [r1]
   3c45c:	mov	r0, #0
   3c460:	sub	sp, fp, #28
   3c464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c468:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c46c:	add	fp, sp, #24
   3c470:	sub	sp, sp, #8
   3c474:	mov	r9, r0
   3c478:	mov	r7, r1
   3c47c:	ldr	r0, [r1, #40]	; 0x28
   3c480:	ldr	r1, [r1, #56]	; 0x38
   3c484:	cmp	r1, r0
   3c488:	ble	3c570 <__assert_fail@plt+0x29af4>
   3c48c:	ldr	r1, [r7, #4]
   3c490:	mov	r5, r9
   3c494:	mov	r8, r2
   3c498:	ldrb	r6, [r1, r0]
   3c49c:	strb	r6, [r5], #4
   3c4a0:	ldr	r0, [r5]
   3c4a4:	bic	r1, r0, #6291456	; 0x600000
   3c4a8:	str	r1, [r5]
   3c4ac:	ldr	r3, [r7, #80]	; 0x50
   3c4b0:	cmp	r3, #2
   3c4b4:	blt	3c4d8 <__assert_fail@plt+0x29a5c>
   3c4b8:	ldr	r2, [r7, #28]
   3c4bc:	ldr	r1, [r7, #40]	; 0x28
   3c4c0:	cmp	r1, r2
   3c4c4:	beq	3c4d8 <__assert_fail@plt+0x29a5c>
   3c4c8:	ldr	r2, [r7, #8]
   3c4cc:	ldr	r1, [r2, r1, lsl #2]
   3c4d0:	cmn	r1, #1
   3c4d4:	beq	3c9b4 <__assert_fail@plt+0x29f38>
   3c4d8:	movw	r1, #65280	; 0xff00
   3c4dc:	cmp	r6, #92	; 0x5c
   3c4e0:	movt	r1, #65439	; 0xff9f
   3c4e4:	bne	3c588 <__assert_fail@plt+0x29b0c>
   3c4e8:	ldr	r6, [r7, #40]	; 0x28
   3c4ec:	ldr	r4, [r7, #48]	; 0x30
   3c4f0:	add	r2, r6, #1
   3c4f4:	cmp	r2, r4
   3c4f8:	bge	3c5dc <__assert_fail@plt+0x29b60>
   3c4fc:	ldrb	r4, [r7, #75]	; 0x4b
   3c500:	cmp	r4, #0
   3c504:	bne	3cc48 <__assert_fail@plt+0x2a1cc>
   3c508:	ldr	r3, [r7, #4]
   3c50c:	ldrb	r6, [r3, r2]
   3c510:	and	r0, r0, r1
   3c514:	strb	r6, [r9]
   3c518:	orr	r4, r0, #1
   3c51c:	str	r4, [r9, #4]
   3c520:	ldr	r0, [r7, #80]	; 0x50
   3c524:	cmp	r0, #2
   3c528:	blt	3c800 <__assert_fail@plt+0x29d84>
   3c52c:	ldr	r0, [r7, #8]
   3c530:	ldr	r1, [r7, #40]	; 0x28
   3c534:	add	r0, r0, r1, lsl #2
   3c538:	ldr	r4, [r0, #4]
   3c53c:	mov	r0, r4
   3c540:	bl	127dc <iswalnum@plt>
   3c544:	sub	r1, r4, #95	; 0x5f
   3c548:	cmp	r0, #0
   3c54c:	clz	r1, r1
   3c550:	movwne	r0, #1
   3c554:	lsr	r1, r1, #5
   3c558:	orr	r0, r1, r0
   3c55c:	ldr	r1, [r5]
   3c560:	bic	r1, r1, #4194304	; 0x400000
   3c564:	orr	r0, r1, r0, lsl #22
   3c568:	uxtb	r1, r6
   3c56c:	b	3c824 <__assert_fail@plt+0x29da8>
   3c570:	mov	r0, #2
   3c574:	mov	r4, #0
   3c578:	strb	r0, [r9, #4]
   3c57c:	mov	r0, r4
   3c580:	sub	sp, fp, #24
   3c584:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c588:	and	r0, r0, r1
   3c58c:	orr	r4, r0, #1
   3c590:	str	r4, [r5]
   3c594:	ldr	r0, [r7, #80]	; 0x50
   3c598:	cmp	r0, #2
   3c59c:	blt	3c5e8 <__assert_fail@plt+0x29b6c>
   3c5a0:	ldr	r0, [r7, #8]
   3c5a4:	ldr	r1, [r7, #40]	; 0x28
   3c5a8:	ldr	r4, [r0, r1, lsl #2]
   3c5ac:	mov	r0, r4
   3c5b0:	bl	127dc <iswalnum@plt>
   3c5b4:	sub	r1, r4, #95	; 0x5f
   3c5b8:	cmp	r0, #0
   3c5bc:	clz	r1, r1
   3c5c0:	movwne	r0, #1
   3c5c4:	lsr	r1, r1, #5
   3c5c8:	orr	r0, r1, r0
   3c5cc:	ldr	r1, [r5]
   3c5d0:	bic	r1, r1, #4194304	; 0x400000
   3c5d4:	orr	r0, r1, r0, lsl #22
   3c5d8:	b	3c608 <__assert_fail@plt+0x29b8c>
   3c5dc:	and	r0, r0, r1
   3c5e0:	orr	r0, r0, #36	; 0x24
   3c5e4:	b	3c9c8 <__assert_fail@plt+0x29f4c>
   3c5e8:	bl	12740 <__ctype_b_loc@plt>
   3c5ec:	ldr	r0, [r0]
   3c5f0:	cmp	r6, #95	; 0x5f
   3c5f4:	add	r0, r0, r6, lsl #1
   3c5f8:	ldrh	r0, [r0]
   3c5fc:	ubfx	r0, r0, #3, #1
   3c600:	movweq	r0, #1
   3c604:	orr	r0, r4, r0, lsl #22
   3c608:	sub	r1, r6, #10
   3c60c:	mov	r4, #1
   3c610:	str	r0, [r5]
   3c614:	cmp	r1, #115	; 0x73
   3c618:	bhi	3cc3c <__assert_fail@plt+0x2a1c0>
   3c61c:	add	r2, pc, #0
   3c620:	ldr	pc, [r2, r1, lsl #2]
   3c624:	strdeq	ip, [r3], -r4
   3c628:	andeq	ip, r3, ip, lsr ip
   3c62c:	andeq	ip, r3, ip, lsr ip
   3c630:	andeq	ip, r3, ip, lsr ip
   3c634:	andeq	ip, r3, ip, lsr ip
   3c638:	andeq	ip, r3, ip, lsr ip
   3c63c:	andeq	ip, r3, ip, lsr ip
   3c640:	andeq	ip, r3, ip, lsr ip
   3c644:	andeq	ip, r3, ip, lsr ip
   3c648:	andeq	ip, r3, ip, lsr ip
   3c64c:	andeq	ip, r3, ip, lsr ip
   3c650:	andeq	ip, r3, ip, lsr ip
   3c654:	andeq	ip, r3, ip, lsr ip
   3c658:	andeq	ip, r3, ip, lsr ip
   3c65c:	andeq	ip, r3, ip, lsr ip
   3c660:	andeq	ip, r3, ip, lsr ip
   3c664:	andeq	ip, r3, ip, lsr ip
   3c668:	andeq	ip, r3, ip, lsr ip
   3c66c:	andeq	ip, r3, ip, lsr ip
   3c670:	andeq	ip, r3, ip, lsr ip
   3c674:	andeq	ip, r3, ip, lsr ip
   3c678:	andeq	ip, r3, ip, lsr ip
   3c67c:	andeq	ip, r3, ip, lsr ip
   3c680:	andeq	ip, r3, ip, lsr ip
   3c684:	andeq	ip, r3, ip, lsr ip
   3c688:	andeq	ip, r3, ip, lsr ip
   3c68c:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   3c690:	andeq	ip, r3, ip, lsr ip
   3c694:	andeq	ip, r3, ip, lsr ip
   3c698:	andeq	ip, r3, ip, lsr ip
   3c69c:	andeq	ip, r3, r4, lsr sl
   3c6a0:	andeq	ip, r3, r0, asr #20
   3c6a4:	andeq	ip, r3, ip, asr #20
   3c6a8:	andeq	ip, r3, r4, asr sl
   3c6ac:	andeq	ip, r3, ip, lsr ip
   3c6b0:	andeq	ip, r3, ip, lsr ip
   3c6b4:	andeq	ip, r3, r4, ror #20
   3c6b8:	andeq	ip, r3, ip, lsr ip
   3c6bc:	andeq	ip, r3, ip, lsr ip
   3c6c0:	andeq	ip, r3, ip, lsr ip
   3c6c4:	andeq	ip, r3, ip, lsr ip
   3c6c8:	andeq	ip, r3, ip, lsr ip
   3c6cc:	andeq	ip, r3, ip, lsr ip
   3c6d0:	andeq	ip, r3, ip, lsr ip
   3c6d4:	andeq	ip, r3, ip, lsr ip
   3c6d8:	andeq	ip, r3, ip, lsr ip
   3c6dc:	andeq	ip, r3, ip, lsr ip
   3c6e0:	andeq	ip, r3, ip, lsr ip
   3c6e4:	andeq	ip, r3, ip, lsr ip
   3c6e8:	andeq	ip, r3, ip, lsr ip
   3c6ec:	andeq	ip, r3, ip, lsr ip
   3c6f0:	andeq	ip, r3, ip, lsr ip
   3c6f4:	andeq	ip, r3, ip, lsr ip
   3c6f8:	andeq	ip, r3, ip, ror #20
   3c6fc:	andeq	ip, r3, ip, lsr ip
   3c700:	andeq	ip, r3, ip, lsr ip
   3c704:	andeq	ip, r3, ip, lsr ip
   3c708:	andeq	ip, r3, ip, lsr ip
   3c70c:	andeq	ip, r3, ip, lsr ip
   3c710:	andeq	ip, r3, ip, lsr ip
   3c714:	andeq	ip, r3, ip, lsr ip
   3c718:	andeq	ip, r3, ip, lsr ip
   3c71c:	andeq	ip, r3, ip, lsr ip
   3c720:	andeq	ip, r3, ip, lsr ip
   3c724:	andeq	ip, r3, ip, lsr ip
   3c728:	andeq	ip, r3, ip, lsr ip
   3c72c:	andeq	ip, r3, ip, lsr ip
   3c730:	andeq	ip, r3, ip, lsr ip
   3c734:	andeq	ip, r3, ip, lsr ip
   3c738:	andeq	ip, r3, ip, lsr ip
   3c73c:	andeq	ip, r3, ip, lsr ip
   3c740:	andeq	ip, r3, ip, lsr ip
   3c744:	andeq	ip, r3, ip, lsr ip
   3c748:	andeq	ip, r3, ip, lsr ip
   3c74c:	andeq	ip, r3, ip, lsr ip
   3c750:	andeq	ip, r3, ip, lsr ip
   3c754:	andeq	ip, r3, ip, lsr ip
   3c758:	andeq	ip, r3, ip, lsr ip
   3c75c:	andeq	ip, r3, ip, lsr ip
   3c760:	andeq	ip, r3, ip, lsr ip
   3c764:	andeq	ip, r3, ip, lsr ip
   3c768:	andeq	ip, r3, ip, ror sl
   3c76c:	andeq	ip, r3, ip, lsr ip
   3c770:	andeq	ip, r3, ip, lsr ip
   3c774:	andeq	ip, r3, r4, lsl #21
   3c778:	andeq	ip, r3, ip, lsr ip
   3c77c:	andeq	ip, r3, ip, lsr ip
   3c780:	andeq	ip, r3, ip, lsr ip
   3c784:	andeq	ip, r3, ip, lsr ip
   3c788:	andeq	ip, r3, ip, lsr ip
   3c78c:	andeq	ip, r3, ip, lsr ip
   3c790:	andeq	ip, r3, ip, lsr ip
   3c794:	andeq	ip, r3, ip, lsr ip
   3c798:	andeq	ip, r3, ip, lsr ip
   3c79c:	andeq	ip, r3, ip, lsr ip
   3c7a0:	andeq	ip, r3, ip, lsr ip
   3c7a4:	andeq	ip, r3, ip, lsr ip
   3c7a8:	andeq	ip, r3, ip, lsr ip
   3c7ac:	andeq	ip, r3, ip, lsr ip
   3c7b0:	andeq	ip, r3, ip, lsr ip
   3c7b4:	andeq	ip, r3, ip, lsr ip
   3c7b8:	andeq	ip, r3, ip, lsr ip
   3c7bc:	andeq	ip, r3, ip, lsr ip
   3c7c0:	andeq	ip, r3, ip, lsr ip
   3c7c4:	andeq	ip, r3, ip, lsr ip
   3c7c8:	andeq	ip, r3, ip, lsr ip
   3c7cc:	andeq	ip, r3, ip, lsr ip
   3c7d0:	andeq	ip, r3, ip, lsr ip
   3c7d4:	andeq	ip, r3, ip, lsr ip
   3c7d8:	andeq	ip, r3, ip, lsr ip
   3c7dc:	andeq	ip, r3, ip, lsr ip
   3c7e0:	andeq	ip, r3, ip, lsr ip
   3c7e4:	andeq	ip, r3, ip, lsr ip
   3c7e8:			; <UNDEFINED> instruction: 0x0003cab4
   3c7ec:	andeq	ip, r3, r4, asr #21
   3c7f0:	ldrdeq	ip, [r3], -r8
   3c7f4:	tst	r8, #2048	; 0x800
   3c7f8:	bne	3cad0 <__assert_fail@plt+0x2a054>
   3c7fc:	b	3cc3c <__assert_fail@plt+0x2a1c0>
   3c800:	bl	12740 <__ctype_b_loc@plt>
   3c804:	ldr	r0, [r0]
   3c808:	uxtb	r1, r6
   3c80c:	cmp	r1, #95	; 0x5f
   3c810:	add	r0, r0, r1, lsl #1
   3c814:	ldrh	r0, [r0]
   3c818:	ubfx	r0, r0, #3, #1
   3c81c:	movweq	r0, #1
   3c820:	orr	r0, r4, r0, lsl #22
   3c824:	mvn	r2, #38	; 0x26
   3c828:	mov	r4, #2
   3c82c:	str	r0, [r5]
   3c830:	uxtab	r2, r2, r6
   3c834:	cmp	r2, #86	; 0x56
   3c838:	bhi	3cc3c <__assert_fail@plt+0x2a1c0>
   3c83c:	add	r3, pc, #0
   3c840:	ldr	pc, [r3, r2, lsl #2]
   3c844:	andeq	ip, r3, r4, lsl fp
   3c848:	andeq	ip, r3, r4, lsr #22
   3c84c:	andeq	ip, r3, r4, lsr fp
   3c850:	andeq	ip, r3, ip, lsr ip
   3c854:	andeq	ip, r3, r4, asr #22
   3c858:	andeq	ip, r3, ip, lsr ip
   3c85c:	andeq	ip, r3, ip, lsr ip
   3c860:	andeq	ip, r3, ip, lsr ip
   3c864:	andeq	ip, r3, ip, lsr ip
   3c868:	andeq	ip, r3, ip, lsr ip
   3c86c:	andeq	ip, r3, r0, lsr #19
   3c870:	andeq	ip, r3, r0, lsr #19
   3c874:	andeq	ip, r3, r0, lsr #19
   3c878:	andeq	ip, r3, r0, lsr #19
   3c87c:	andeq	ip, r3, r0, lsr #19
   3c880:	andeq	ip, r3, r0, lsr #19
   3c884:	andeq	ip, r3, r0, lsr #19
   3c888:	andeq	ip, r3, r0, lsr #19
   3c88c:	andeq	ip, r3, r0, lsr #19
   3c890:	andeq	ip, r3, ip, lsr ip
   3c894:	andeq	ip, r3, ip, lsr ip
   3c898:	andeq	ip, r3, ip, asr fp
   3c89c:	andeq	ip, r3, ip, lsr ip
   3c8a0:	andeq	ip, r3, ip, ror #22
   3c8a4:	andeq	ip, r3, ip, ror fp
   3c8a8:	andeq	ip, r3, ip, lsr ip
   3c8ac:	andeq	ip, r3, ip, lsr ip
   3c8b0:	muleq	r3, r4, fp
   3c8b4:	andeq	ip, r3, ip, lsr ip
   3c8b8:	andeq	ip, r3, ip, lsr ip
   3c8bc:	andeq	ip, r3, ip, lsr ip
   3c8c0:	andeq	ip, r3, ip, lsr ip
   3c8c4:	andeq	ip, r3, ip, lsr ip
   3c8c8:	andeq	ip, r3, ip, lsr ip
   3c8cc:	andeq	ip, r3, ip, lsr ip
   3c8d0:	andeq	ip, r3, ip, lsr ip
   3c8d4:	andeq	ip, r3, ip, lsr ip
   3c8d8:	andeq	ip, r3, ip, lsr ip
   3c8dc:	andeq	ip, r3, ip, lsr ip
   3c8e0:	andeq	ip, r3, ip, lsr ip
   3c8e4:	andeq	ip, r3, ip, lsr ip
   3c8e8:	andeq	ip, r3, ip, lsr ip
   3c8ec:	andeq	ip, r3, ip, lsr ip
   3c8f0:	andeq	ip, r3, ip, lsr ip
   3c8f4:	andeq	ip, r3, r4, lsr #23
   3c8f8:	andeq	ip, r3, ip, lsr ip
   3c8fc:	andeq	ip, r3, ip, lsr ip
   3c900:	andeq	ip, r3, ip, lsr ip
   3c904:			; <UNDEFINED> instruction: 0x0003cbb4
   3c908:	andeq	ip, r3, ip, lsr ip
   3c90c:	andeq	ip, r3, ip, lsr ip
   3c910:	andeq	ip, r3, ip, lsr ip
   3c914:	andeq	ip, r3, ip, lsr ip
   3c918:	andeq	ip, r3, ip, lsr ip
   3c91c:	andeq	ip, r3, ip, lsr ip
   3c920:	andeq	ip, r3, ip, lsr ip
   3c924:	andeq	ip, r3, ip, lsr ip
   3c928:	andeq	ip, r3, r4, asr #23
   3c92c:	andeq	ip, r3, ip, lsr ip
   3c930:	ldrdeq	ip, [r3], -r4
   3c934:	andeq	ip, r3, ip, lsr ip
   3c938:	andeq	ip, r3, ip, lsr ip
   3c93c:	andeq	ip, r3, ip, lsr ip
   3c940:	andeq	ip, r3, ip, lsr ip
   3c944:	andeq	ip, r3, ip, lsr ip
   3c948:	andeq	ip, r3, ip, lsr ip
   3c94c:	andeq	ip, r3, ip, lsr ip
   3c950:	andeq	ip, r3, ip, lsr ip
   3c954:	andeq	ip, r3, ip, lsr ip
   3c958:	andeq	ip, r3, ip, lsr ip
   3c95c:	andeq	ip, r3, ip, lsr ip
   3c960:	andeq	ip, r3, ip, lsr ip
   3c964:	andeq	ip, r3, ip, lsr ip
   3c968:	andeq	ip, r3, ip, lsr ip
   3c96c:	andeq	ip, r3, ip, lsr ip
   3c970:	andeq	ip, r3, ip, lsr ip
   3c974:	andeq	ip, r3, r4, ror #23
   3c978:	andeq	ip, r3, ip, lsr ip
   3c97c:	andeq	ip, r3, ip, lsr ip
   3c980:	andeq	ip, r3, ip, lsr ip
   3c984:	strdeq	ip, [r3], -r4
   3c988:	andeq	ip, r3, ip, lsr ip
   3c98c:	andeq	ip, r3, ip, lsr ip
   3c990:	andeq	ip, r3, ip, lsr ip
   3c994:	andeq	ip, r3, r4, lsl #24
   3c998:	andeq	ip, r3, r8, lsl ip
   3c99c:	andeq	ip, r3, r4, lsr #24
   3c9a0:	tst	r8, #16384	; 0x4000
   3c9a4:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3c9a8:	sub	r1, r1, #49	; 0x31
   3c9ac:	mov	r2, #4
   3c9b0:	b	3ca9c <__assert_fail@plt+0x2a020>
   3c9b4:	movw	r1, #65280	; 0xff00
   3c9b8:	movt	r1, #65439	; 0xff9f
   3c9bc:	and	r0, r0, r1
   3c9c0:	orr	r0, r0, #1
   3c9c4:	orr	r0, r0, #2097152	; 0x200000
   3c9c8:	str	r0, [r5]
   3c9cc:	mov	r4, #1
   3c9d0:	mov	r0, r4
   3c9d4:	sub	sp, fp, #24
   3c9d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c9dc:	tst	r8, #8
   3c9e0:	bne	3ca2c <__assert_fail@plt+0x29fb0>
   3c9e4:	ldr	r1, [r7, #40]	; 0x28
   3c9e8:	ldr	r2, [r7, #48]	; 0x30
   3c9ec:	add	r1, r1, #1
   3c9f0:	cmp	r1, r2
   3c9f4:	beq	3ca2c <__assert_fail@plt+0x29fb0>
   3c9f8:	str	r1, [r7, #40]	; 0x28
   3c9fc:	mov	r0, sp
   3ca00:	mov	r1, r7
   3ca04:	mov	r2, r8
   3ca08:	bl	3c468 <__assert_fail@plt+0x299ec>
   3ca0c:	ldr	r0, [r7, #40]	; 0x28
   3ca10:	sub	r0, r0, #1
   3ca14:	str	r0, [r7, #40]	; 0x28
   3ca18:	ldrb	r0, [sp, #4]
   3ca1c:	sub	r0, r0, #9
   3ca20:	cmp	r0, #1
   3ca24:	bhi	3cc3c <__assert_fail@plt+0x2a1c0>
   3ca28:	ldr	r0, [r5]
   3ca2c:	mov	r1, #32
   3ca30:	b	3ca98 <__assert_fail@plt+0x2a01c>
   3ca34:	tst	r8, #8192	; 0x2000
   3ca38:	bne	3cb2c <__assert_fail@plt+0x2a0b0>
   3ca3c:	b	3cc3c <__assert_fail@plt+0x2a1c0>
   3ca40:	tst	r8, #8192	; 0x2000
   3ca44:	bne	3cb3c <__assert_fail@plt+0x2a0c0>
   3ca48:	b	3cc3c <__assert_fail@plt+0x2a1c0>
   3ca4c:	mov	r1, #11
   3ca50:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3ca54:	movw	r1, #1026	; 0x402
   3ca58:	tst	r8, r1
   3ca5c:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3ca60:	b	3cb54 <__assert_fail@plt+0x2a0d8>
   3ca64:	mov	r1, #5
   3ca68:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3ca6c:	movw	r1, #1026	; 0x402
   3ca70:	tst	r8, r1
   3ca74:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3ca78:	b	3cb8c <__assert_fail@plt+0x2a110>
   3ca7c:	mov	r1, #20
   3ca80:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3ca84:	movw	r1, #8
   3ca88:	movt	r1, #128	; 0x80
   3ca8c:	tst	r8, r1
   3ca90:	beq	3cae8 <__assert_fail@plt+0x2a06c>
   3ca94:	mov	r1, #16
   3ca98:	mov	r2, #12
   3ca9c:	bfi	r0, r2, #0, #8
   3caa0:	str	r1, [r9]
   3caa4:	str	r0, [r9, #4]
   3caa8:	mov	r0, r4
   3caac:	sub	sp, fp, #24
   3cab0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cab4:	and	r1, r8, #4608	; 0x1200
   3cab8:	cmp	r1, #4608	; 0x1200
   3cabc:	beq	3cc10 <__assert_fail@plt+0x2a194>
   3cac0:	b	3cc3c <__assert_fail@plt+0x2a1c0>
   3cac4:	and	r1, r8, #33792	; 0x8400
   3cac8:	cmp	r1, #32768	; 0x8000
   3cacc:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cad0:	mov	r1, #10
   3cad4:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cad8:	and	r1, r8, #4608	; 0x1200
   3cadc:	cmp	r1, #4608	; 0x1200
   3cae0:	beq	3cc30 <__assert_fail@plt+0x2a1b4>
   3cae4:	b	3cc3c <__assert_fail@plt+0x2a1c0>
   3cae8:	ldr	r1, [r7, #40]	; 0x28
   3caec:	cmp	r1, #0
   3caf0:	beq	3ca94 <__assert_fail@plt+0x2a018>
   3caf4:	tst	r8, #2048	; 0x800
   3caf8:	beq	3cc3c <__assert_fail@plt+0x2a1c0>
   3cafc:	ldr	r2, [r7, #4]
   3cb00:	add	r1, r2, r1
   3cb04:	ldrb	r1, [r1, #-1]
   3cb08:	cmp	r1, #10
   3cb0c:	beq	3ca94 <__assert_fail@plt+0x2a018>
   3cb10:	b	3cc3c <__assert_fail@plt+0x2a1c0>
   3cb14:	tst	r8, #524288	; 0x80000
   3cb18:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cb1c:	mov	r1, #128	; 0x80
   3cb20:	b	3ca98 <__assert_fail@plt+0x2a01c>
   3cb24:	tst	r8, #8192	; 0x2000
   3cb28:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cb2c:	mov	r1, #8
   3cb30:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cb34:	tst	r8, #8192	; 0x2000
   3cb38:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cb3c:	mov	r1, #9
   3cb40:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cb44:	movw	r1, #1026	; 0x402
   3cb48:	and	r1, r8, r1
   3cb4c:	cmp	r1, #2
   3cb50:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cb54:	mov	r1, #18
   3cb58:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cb5c:	tst	r8, #524288	; 0x80000
   3cb60:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cb64:	mov	r1, #6
   3cb68:	b	3ca98 <__assert_fail@plt+0x2a01c>
   3cb6c:	tst	r8, #524288	; 0x80000
   3cb70:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cb74:	mov	r1, #9
   3cb78:	b	3ca98 <__assert_fail@plt+0x2a01c>
   3cb7c:	movw	r1, #1026	; 0x402
   3cb80:	and	r1, r8, r1
   3cb84:	cmp	r1, #2
   3cb88:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cb8c:	mov	r1, #19
   3cb90:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cb94:	tst	r8, #524288	; 0x80000
   3cb98:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cb9c:	mov	r1, #512	; 0x200
   3cba0:	b	3ca98 <__assert_fail@plt+0x2a01c>
   3cba4:	tst	r8, #524288	; 0x80000
   3cba8:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cbac:	mov	r1, #35	; 0x23
   3cbb0:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cbb4:	tst	r8, #524288	; 0x80000
   3cbb8:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cbbc:	mov	r1, #33	; 0x21
   3cbc0:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cbc4:	tst	r8, #524288	; 0x80000
   3cbc8:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cbcc:	mov	r1, #64	; 0x40
   3cbd0:	b	3ca98 <__assert_fail@plt+0x2a01c>
   3cbd4:	tst	r8, #524288	; 0x80000
   3cbd8:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cbdc:	mov	r1, #256	; 0x100
   3cbe0:	b	3ca98 <__assert_fail@plt+0x2a01c>
   3cbe4:	tst	r8, #524288	; 0x80000
   3cbe8:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cbec:	mov	r1, #34	; 0x22
   3cbf0:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cbf4:	tst	r8, #524288	; 0x80000
   3cbf8:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cbfc:	mov	r1, #32
   3cc00:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cc04:	and	r1, r8, #4608	; 0x1200
   3cc08:	cmp	r1, #512	; 0x200
   3cc0c:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cc10:	mov	r1, #23
   3cc14:	b	3cc34 <__assert_fail@plt+0x2a1b8>
   3cc18:	tst	r8, #33792	; 0x8400
   3cc1c:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cc20:	b	3cad0 <__assert_fail@plt+0x2a054>
   3cc24:	and	r1, r8, #4608	; 0x1200
   3cc28:	cmp	r1, #512	; 0x200
   3cc2c:	bne	3cc3c <__assert_fail@plt+0x2a1c0>
   3cc30:	mov	r1, #24
   3cc34:	bfi	r0, r1, #0, #8
   3cc38:	str	r0, [r5]
   3cc3c:	mov	r0, r4
   3cc40:	sub	sp, fp, #24
   3cc44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cc48:	cmp	r3, #2
   3cc4c:	blt	3cc7c <__assert_fail@plt+0x2a200>
   3cc50:	ldr	r3, [r7, #8]
   3cc54:	ldr	r4, [r3, r2, lsl #2]
   3cc58:	cmn	r4, #1
   3cc5c:	beq	3c508 <__assert_fail@plt+0x29a8c>
   3cc60:	ldr	r4, [r7, #28]
   3cc64:	add	r6, r6, #2
   3cc68:	cmp	r4, r6
   3cc6c:	beq	3cc7c <__assert_fail@plt+0x2a200>
   3cc70:	ldr	r3, [r3, r6, lsl #2]
   3cc74:	cmn	r3, #1
   3cc78:	beq	3c508 <__assert_fail@plt+0x29a8c>
   3cc7c:	ldrb	r3, [r7, #76]	; 0x4c
   3cc80:	mov	r6, r2
   3cc84:	ldr	r4, [r7, #24]
   3cc88:	ldr	ip, [r7]
   3cc8c:	cmp	r3, #0
   3cc90:	ldrne	r6, [r7, #12]
   3cc94:	ldrne	r6, [r6, r2, lsl #2]
   3cc98:	cmp	r3, #0
   3cc9c:	add	r6, r4, r6
   3cca0:	add	r6, ip, r6
   3cca4:	ldrsb	r6, [r6]
   3cca8:	beq	3c510 <__assert_fail@plt+0x29a94>
   3ccac:	cmn	r6, #1
   3ccb0:	ble	3c508 <__assert_fail@plt+0x29a8c>
   3ccb4:	b	3c510 <__assert_fail@plt+0x29a94>
   3ccb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ccbc:	add	fp, sp, #28
   3ccc0:	sub	sp, sp, #12
   3ccc4:	mov	r4, r1
   3ccc8:	ldr	r8, [r1]
   3cccc:	ldr	r1, [fp, #8]
   3ccd0:	ldr	r5, [fp, #12]
   3ccd4:	mov	r7, r2
   3ccd8:	str	r0, [sp, #8]
   3ccdc:	mov	sl, r3
   3cce0:	mov	r9, r1
   3cce4:	str	r1, [sp]
   3cce8:	mov	r1, r4
   3ccec:	str	r5, [sp, #4]
   3ccf0:	bl	3d120 <__assert_fail@plt+0x2a6a4>
   3ccf4:	mov	r3, r5
   3ccf8:	mov	r5, r0
   3ccfc:	mov	r0, #0
   3cd00:	cmp	r5, #0
   3cd04:	bne	3cd14 <__assert_fail@plt+0x2a298>
   3cd08:	ldr	r1, [r3]
   3cd0c:	cmp	r1, #0
   3cd10:	bne	3cf14 <__assert_fail@plt+0x2a498>
   3cd14:	cmp	r9, #0
   3cd18:	bne	3ce2c <__assert_fail@plt+0x2a3b0>
   3cd1c:	mov	r9, #0
   3cd20:	ldrb	r0, [r7, #4]
   3cd24:	orr	r0, r0, #8
   3cd28:	cmp	r0, #10
   3cd2c:	bne	3cd4c <__assert_fail@plt+0x2a2d0>
   3cd30:	b	3cf10 <__assert_fail@plt+0x2a494>
   3cd34:	cmp	r5, #0
   3cd38:	moveq	r5, r6
   3cd3c:	ldrb	r0, [r7, #4]
   3cd40:	orr	r0, r0, #8
   3cd44:	cmp	r0, #10
   3cd48:	beq	3cf10 <__assert_fail@plt+0x2a494>
   3cd4c:	ldr	r0, [sp, #8]
   3cd50:	str	r3, [sp, #4]
   3cd54:	mov	r1, r4
   3cd58:	mov	r2, r7
   3cd5c:	mov	r3, sl
   3cd60:	str	r9, [sp]
   3cd64:	bl	3d120 <__assert_fail@plt+0x2a6a4>
   3cd68:	ldr	r3, [fp, #12]
   3cd6c:	cmp	r5, #0
   3cd70:	mov	r2, r5
   3cd74:	mov	r6, r0
   3cd78:	movwne	r2, #1
   3cd7c:	cmp	r0, #0
   3cd80:	bne	3cd90 <__assert_fail@plt+0x2a314>
   3cd84:	ldr	r1, [r3]
   3cd88:	cmp	r1, #0
   3cd8c:	bne	3cf1c <__assert_fail@plt+0x2a4a0>
   3cd90:	cmp	r5, #0
   3cd94:	cmpne	r6, #0
   3cd98:	beq	3cd34 <__assert_fail@plt+0x2a2b8>
   3cd9c:	ldr	r1, [r8, #64]	; 0x40
   3cda0:	cmp	r1, #31
   3cda4:	beq	3cdf8 <__assert_fail@plt+0x2a37c>
   3cda8:	ldr	r0, [r8, #56]	; 0x38
   3cdac:	add	r2, r1, #1
   3cdb0:	add	r0, r0, r1, lsl #5
   3cdb4:	mov	r1, #16
   3cdb8:	str	r2, [r8, #64]	; 0x40
   3cdbc:	str	r9, [r0, #4]!
   3cdc0:	stmib	r0, {r5, r6, r9}
   3cdc4:	str	r9, [r0, #16]
   3cdc8:	str	r9, [r0, #20]
   3cdcc:	str	r1, [r0, #24]
   3cdd0:	mvn	r1, #0
   3cdd4:	str	r1, [r0, #28]
   3cdd8:	str	r0, [r5]
   3cddc:	str	r0, [r6]
   3cde0:	mov	r5, r0
   3cde4:	ldrb	r0, [r7, #4]
   3cde8:	orr	r0, r0, #8
   3cdec:	cmp	r0, #10
   3cdf0:	bne	3cd4c <__assert_fail@plt+0x2a2d0>
   3cdf4:	b	3cf10 <__assert_fail@plt+0x2a494>
   3cdf8:	mov	r0, #996	; 0x3e4
   3cdfc:	bl	35608 <__assert_fail@plt+0x22b8c>
   3ce00:	cmp	r0, #0
   3ce04:	beq	3cfc8 <__assert_fail@plt+0x2a54c>
   3ce08:	ldr	r1, [r8, #56]	; 0x38
   3ce0c:	ldr	r3, [fp, #12]
   3ce10:	str	r1, [r0]
   3ce14:	mov	r1, #0
   3ce18:	str	r1, [r8, #64]	; 0x40
   3ce1c:	str	r0, [r8, #56]	; 0x38
   3ce20:	b	3cdac <__assert_fail@plt+0x2a330>
   3ce24:	cmp	r5, #0
   3ce28:	moveq	r5, r6
   3ce2c:	ldrb	r0, [r7, #4]
   3ce30:	orr	r1, r0, #8
   3ce34:	cmp	r1, #10
   3ce38:	cmpne	r0, #9
   3ce3c:	beq	3cf10 <__assert_fail@plt+0x2a494>
   3ce40:	ldr	r0, [sp, #8]
   3ce44:	str	r3, [sp, #4]
   3ce48:	mov	r1, r4
   3ce4c:	mov	r2, r7
   3ce50:	mov	r3, sl
   3ce54:	str	r9, [sp]
   3ce58:	bl	3d120 <__assert_fail@plt+0x2a6a4>
   3ce5c:	ldr	r3, [fp, #12]
   3ce60:	cmp	r5, #0
   3ce64:	mov	r2, r5
   3ce68:	mov	r6, r0
   3ce6c:	movwne	r2, #1
   3ce70:	cmp	r0, #0
   3ce74:	bne	3ce84 <__assert_fail@plt+0x2a408>
   3ce78:	ldr	r1, [r3]
   3ce7c:	cmp	r1, #0
   3ce80:	bne	3cf1c <__assert_fail@plt+0x2a4a0>
   3ce84:	cmp	r5, #0
   3ce88:	cmpne	r6, #0
   3ce8c:	beq	3ce24 <__assert_fail@plt+0x2a3a8>
   3ce90:	ldr	r1, [r8, #64]	; 0x40
   3ce94:	cmp	r1, #31
   3ce98:	beq	3cee4 <__assert_fail@plt+0x2a468>
   3ce9c:	ldr	r0, [r8, #56]	; 0x38
   3cea0:	add	r2, r1, #1
   3cea4:	add	r0, r0, r1, lsl #5
   3cea8:	mov	r1, #0
   3ceac:	str	r2, [r8, #64]	; 0x40
   3ceb0:	str	r1, [r0, #4]!
   3ceb4:	stmib	r0, {r5, r6}
   3ceb8:	str	r1, [r0, #12]
   3cebc:	str	r1, [r0, #16]
   3cec0:	str	r1, [r0, #20]
   3cec4:	mov	r1, #16
   3cec8:	str	r1, [r0, #24]
   3cecc:	mvn	r1, #0
   3ced0:	str	r1, [r0, #28]
   3ced4:	str	r0, [r5]
   3ced8:	str	r0, [r6]
   3cedc:	mov	r5, r0
   3cee0:	b	3ce2c <__assert_fail@plt+0x2a3b0>
   3cee4:	mov	r0, #996	; 0x3e4
   3cee8:	bl	35608 <__assert_fail@plt+0x22b8c>
   3ceec:	cmp	r0, #0
   3cef0:	beq	3cfc8 <__assert_fail@plt+0x2a54c>
   3cef4:	ldr	r1, [r8, #56]	; 0x38
   3cef8:	ldr	r3, [fp, #12]
   3cefc:	str	r1, [r0]
   3cf00:	mov	r1, #0
   3cf04:	str	r1, [r8, #64]	; 0x40
   3cf08:	str	r0, [r8, #56]	; 0x38
   3cf0c:	b	3cea0 <__assert_fail@plt+0x2a424>
   3cf10:	mov	r0, r5
   3cf14:	sub	sp, fp, #28
   3cf18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cf1c:	mov	r0, #0
   3cf20:	cmp	r2, #0
   3cf24:	beq	3cf14 <__assert_fail@plt+0x2a498>
   3cf28:	movw	r6, #255	; 0xff
   3cf2c:	movt	r6, #4
   3cf30:	mov	r7, r5
   3cf34:	ldr	r5, [r5, #4]
   3cf38:	cmp	r5, #0
   3cf3c:	bne	3cf30 <__assert_fail@plt+0x2a4b4>
   3cf40:	ldr	r5, [r7, #8]
   3cf44:	cmp	r5, #0
   3cf48:	bne	3cf30 <__assert_fail@plt+0x2a4b4>
   3cf4c:	ldr	r1, [r7, #24]
   3cf50:	and	r1, r1, r6
   3cf54:	cmp	r1, #3
   3cf58:	beq	3cf90 <__assert_fail@plt+0x2a514>
   3cf5c:	cmp	r1, #6
   3cf60:	bne	3cf9c <__assert_fail@plt+0x2a520>
   3cf64:	ldr	r4, [r7, #20]
   3cf68:	ldr	r0, [r4]
   3cf6c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3cf70:	ldr	r0, [r4, #4]
   3cf74:	bl	32c40 <__assert_fail@plt+0x201c4>
   3cf78:	ldr	r0, [r4, #8]
   3cf7c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3cf80:	ldr	r0, [r4, #12]
   3cf84:	bl	32c40 <__assert_fail@plt+0x201c4>
   3cf88:	mov	r0, r4
   3cf8c:	b	3cf94 <__assert_fail@plt+0x2a518>
   3cf90:	ldr	r0, [r7, #20]
   3cf94:	bl	32c40 <__assert_fail@plt+0x201c4>
   3cf98:	mov	r0, #0
   3cf9c:	ldr	r1, [r7]
   3cfa0:	cmp	r1, #0
   3cfa4:	beq	3cf14 <__assert_fail@plt+0x2a498>
   3cfa8:	ldr	r5, [r1, #8]
   3cfac:	cmp	r5, r7
   3cfb0:	mov	r7, r1
   3cfb4:	beq	3cf4c <__assert_fail@plt+0x2a4d0>
   3cfb8:	cmp	r5, #0
   3cfbc:	mov	r7, r1
   3cfc0:	beq	3cf4c <__assert_fail@plt+0x2a4d0>
   3cfc4:	b	3cf30 <__assert_fail@plt+0x2a4b4>
   3cfc8:	ldr	r1, [fp, #12]
   3cfcc:	movw	r8, #255	; 0xff
   3cfd0:	movt	r8, #4
   3cfd4:	mov	r7, r6
   3cfd8:	ldr	r6, [r6, #4]
   3cfdc:	cmp	r6, #0
   3cfe0:	bne	3cfd4 <__assert_fail@plt+0x2a558>
   3cfe4:	ldr	r6, [r7, #8]
   3cfe8:	cmp	r6, #0
   3cfec:	bne	3cfd4 <__assert_fail@plt+0x2a558>
   3cff0:	ldr	r0, [r7, #24]
   3cff4:	and	r0, r0, r8
   3cff8:	cmp	r0, #3
   3cffc:	beq	3d034 <__assert_fail@plt+0x2a5b8>
   3d000:	cmp	r0, #6
   3d004:	bne	3d040 <__assert_fail@plt+0x2a5c4>
   3d008:	ldr	r4, [r7, #20]
   3d00c:	ldr	r0, [r4]
   3d010:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d014:	ldr	r0, [r4, #4]
   3d018:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d01c:	ldr	r0, [r4, #8]
   3d020:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d024:	ldr	r0, [r4, #12]
   3d028:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d02c:	mov	r0, r4
   3d030:	b	3d038 <__assert_fail@plt+0x2a5bc>
   3d034:	ldr	r0, [r7, #20]
   3d038:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d03c:	ldr	r1, [fp, #12]
   3d040:	ldr	r0, [r7]
   3d044:	cmp	r0, #0
   3d048:	beq	3d06c <__assert_fail@plt+0x2a5f0>
   3d04c:	ldr	r6, [r0, #8]
   3d050:	cmp	r6, r7
   3d054:	mov	r7, r0
   3d058:	beq	3cff0 <__assert_fail@plt+0x2a574>
   3d05c:	cmp	r6, #0
   3d060:	mov	r7, r0
   3d064:	beq	3cff0 <__assert_fail@plt+0x2a574>
   3d068:	b	3cfd4 <__assert_fail@plt+0x2a558>
   3d06c:	mov	r6, r5
   3d070:	ldr	r5, [r5, #4]
   3d074:	cmp	r5, #0
   3d078:	bne	3d06c <__assert_fail@plt+0x2a5f0>
   3d07c:	ldr	r5, [r6, #8]
   3d080:	cmp	r5, #0
   3d084:	bne	3d06c <__assert_fail@plt+0x2a5f0>
   3d088:	ldr	r0, [r6, #24]
   3d08c:	and	r0, r0, r8
   3d090:	cmp	r0, #3
   3d094:	beq	3d0cc <__assert_fail@plt+0x2a650>
   3d098:	cmp	r0, #6
   3d09c:	bne	3d0d8 <__assert_fail@plt+0x2a65c>
   3d0a0:	ldr	r4, [r6, #20]
   3d0a4:	ldr	r0, [r4]
   3d0a8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d0ac:	ldr	r0, [r4, #4]
   3d0b0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d0b4:	ldr	r0, [r4, #8]
   3d0b8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d0bc:	ldr	r0, [r4, #12]
   3d0c0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d0c4:	mov	r0, r4
   3d0c8:	b	3d0d0 <__assert_fail@plt+0x2a654>
   3d0cc:	ldr	r0, [r6, #20]
   3d0d0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3d0d4:	ldr	r1, [fp, #12]
   3d0d8:	ldr	r0, [r6]
   3d0dc:	cmp	r0, #0
   3d0e0:	beq	3d104 <__assert_fail@plt+0x2a688>
   3d0e4:	ldr	r5, [r0, #8]
   3d0e8:	cmp	r5, r6
   3d0ec:	mov	r6, r0
   3d0f0:	beq	3d088 <__assert_fail@plt+0x2a60c>
   3d0f4:	cmp	r5, #0
   3d0f8:	mov	r6, r0
   3d0fc:	beq	3d088 <__assert_fail@plt+0x2a60c>
   3d100:	b	3d06c <__assert_fail@plt+0x2a5f0>
   3d104:	mov	r0, #12
   3d108:	str	r0, [r1]
   3d10c:	mov	r0, #0
   3d110:	sub	sp, fp, #28
   3d114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d118:	nop	{0}
   3d11c:	nop	{0}
   3d120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d124:	add	fp, sp, #28
   3d128:	sub	sp, sp, #148	; 0x94
   3d12c:	str	r0, [sp, #24]
   3d130:	ldr	r0, [r2, #4]
   3d134:	mov	r7, r1
   3d138:	mov	lr, r2
   3d13c:	mvn	r1, #0
   3d140:	mov	r6, r3
   3d144:	mov	sl, #0
   3d148:	ldr	r2, [fp, #12]
   3d14c:	ldr	r8, [r7]
   3d150:	uxtab	r1, r1, r0
   3d154:	cmp	r1, #35	; 0x23
   3d158:	str	r2, [sp, #16]
   3d15c:	str	lr, [sp, #44]	; 0x2c
   3d160:	bhi	3d28c <__assert_fail@plt+0x2a810>
   3d164:	add	r2, pc, #0
   3d168:	ldr	pc, [r2, r1, lsl #2]
   3d16c:	andeq	sp, r3, r0, asr r5
   3d170:	andeq	pc, r3, r4, lsr r0	; <UNPREDICTABLE>
   3d174:	andeq	sp, r3, ip, lsl #5
   3d178:	andeq	sp, r3, r0, lsl r3
   3d17c:	muleq	r3, r0, r3
   3d180:	andeq	sp, r3, ip, lsl #5
   3d184:	andeq	sp, r3, ip, lsl #5
   3d188:	strdeq	sp, [r3], -r8
   3d18c:	muleq	r3, ip, r2
   3d190:	andeq	pc, r3, r4, lsr r0	; <UNPREDICTABLE>
   3d194:	andeq	sp, r3, ip, lsl #5
   3d198:	andeq	sp, r3, r8, lsl #9
   3d19c:	andeq	sp, r3, ip, lsl #5
   3d1a0:	andeq	sp, r3, ip, lsl #5
   3d1a4:	andeq	sp, r3, ip, lsl #5
   3d1a8:	andeq	sp, r3, ip, lsl #5
   3d1ac:	andeq	sp, r3, ip, lsl #5
   3d1b0:	andeq	sp, r3, ip, lsl #5
   3d1b4:	andeq	sp, r3, ip, lsl #5
   3d1b8:	andeq	sp, r3, r8, lsr #14
   3d1bc:	andeq	sp, r3, ip, lsl #5
   3d1c0:	andeq	sp, r3, ip, lsl #5
   3d1c4:	andeq	sp, r3, r4, lsl #5
   3d1c8:	andeq	sp, r3, ip, lsr #5
   3d1cc:	andeq	sp, r3, ip, lsl #5
   3d1d0:	andeq	sp, r3, ip, lsl #5
   3d1d4:	andeq	sp, r3, ip, lsl #5
   3d1d8:	andeq	sp, r3, ip, lsl #5
   3d1dc:	andeq	sp, r3, ip, lsl #5
   3d1e0:	andeq	sp, r3, ip, lsl #5
   3d1e4:	andeq	sp, r3, ip, lsl #5
   3d1e8:	strdeq	sp, [r3], -ip
   3d1ec:	strdeq	sp, [r3], -ip
   3d1f0:	andeq	sp, r3, r0, lsr #4
   3d1f4:	andeq	sp, r3, r0, lsr #4
   3d1f8:	andeq	sp, r3, r0, lsr #14
   3d1fc:	ldr	r1, [sp, #24]
   3d200:	mvn	r2, #32
   3d204:	movw	r3, #9804	; 0x264c
   3d208:	uxtab	r0, r2, r0
   3d20c:	movw	r2, #9798	; 0x2646
   3d210:	movt	r3, #5
   3d214:	clz	r0, r0
   3d218:	movt	r2, #5
   3d21c:	b	3d240 <__assert_fail@plt+0x2a7c4>
   3d220:	ldr	r1, [sp, #24]
   3d224:	mvn	r2, #34	; 0x22
   3d228:	movw	r3, #58175	; 0xe33f
   3d22c:	uxtab	r0, r2, r0
   3d230:	movw	r2, #9806	; 0x264e
   3d234:	movt	r3, #4
   3d238:	clz	r0, r0
   3d23c:	movt	r2, #5
   3d240:	lsr	r0, r0, #5
   3d244:	ldr	r1, [r1, #64]	; 0x40
   3d248:	str	r0, [sp]
   3d24c:	ldr	r4, [sp, #16]
   3d250:	str	r4, [sp, #4]
   3d254:	mov	r0, r8
   3d258:	bl	3f6b4 <__assert_fail@plt+0x2cc38>
   3d25c:	mov	r7, r0
   3d260:	cmp	r0, #0
   3d264:	bne	3d27c <__assert_fail@plt+0x2a800>
   3d268:	ldr	r0, [r4]
   3d26c:	cmp	r0, #0
   3d270:	ldr	lr, [sp, #44]	; 0x2c
   3d274:	beq	3e240 <__assert_fail@plt+0x2b7c4>
   3d278:	b	3f034 <__assert_fail@plt+0x2c5b8>
   3d27c:	ldr	lr, [sp, #44]	; 0x2c
   3d280:	b	3e240 <__assert_fail@plt+0x2b7c4>
   3d284:	tst	r6, #16777216	; 0x1000000
   3d288:	bne	3d308 <__assert_fail@plt+0x2a88c>
   3d28c:	tst	r6, #32
   3d290:	bne	3d308 <__assert_fail@plt+0x2a88c>
   3d294:	tst	r6, #16
   3d298:	bne	3d7a4 <__assert_fail@plt+0x2ad28>
   3d29c:	tst	r6, #131072	; 0x20000
   3d2a0:	uxtbeq	r1, r0
   3d2a4:	cmpeq	r1, #9
   3d2a8:	beq	3d7ec <__assert_fail@plt+0x2ad70>
   3d2ac:	mov	r1, #1
   3d2b0:	bfi	r0, r1, #0, #8
   3d2b4:	str	r0, [lr, #4]
   3d2b8:	ldr	r1, [r8, #64]	; 0x40
   3d2bc:	cmp	r1, #31
   3d2c0:	beq	3f1ac <__assert_fail@plt+0x2c730>
   3d2c4:	ldr	r0, [r8, #56]	; 0x38
   3d2c8:	add	r2, r1, #1
   3d2cc:	add	r7, r0, r1, lsl #5
   3d2d0:	mov	r0, #0
   3d2d4:	str	r2, [r8, #64]	; 0x40
   3d2d8:	str	r0, [r7, #4]!
   3d2dc:	str	r0, [r7, #4]
   3d2e0:	str	r0, [r7, #8]
   3d2e4:	ldm	lr, {r1, r2}
   3d2e8:	str	r0, [r7, #12]
   3d2ec:	str	r0, [r7, #16]
   3d2f0:	mvn	r0, #0
   3d2f4:	str	r0, [r7, #28]
   3d2f8:	bic	r0, r2, #786432	; 0xc0000
   3d2fc:	str	r1, [r7, #20]
   3d300:	str	r0, [r7, #24]
   3d304:	b	3e240 <__assert_fail@plt+0x2b7c4>
   3d308:	mov	r0, #13
   3d30c:	b	3e134 <__assert_fail@plt+0x2b6b8>
   3d310:	ldr	r0, [lr]
   3d314:	ldr	r2, [r8, #84]	; 0x54
   3d318:	mov	r1, #1
   3d31c:	tst	r2, r1, lsl r0
   3d320:	beq	3f1f0 <__assert_fail@plt+0x2c774>
   3d324:	lsl	r0, r1, r0
   3d328:	ldr	r1, [r8, #64]	; 0x40
   3d32c:	ldr	r2, [r8, #80]	; 0x50
   3d330:	orr	r0, r2, r0
   3d334:	cmp	r1, #31
   3d338:	str	r0, [r8, #80]	; 0x50
   3d33c:	beq	3f268 <__assert_fail@plt+0x2c7ec>
   3d340:	ldr	r0, [r8, #56]	; 0x38
   3d344:	add	r2, r1, #1
   3d348:	add	r7, r0, r1, lsl #5
   3d34c:	mov	r0, #0
   3d350:	str	r2, [r8, #64]	; 0x40
   3d354:	str	r0, [r7, #4]!
   3d358:	str	r0, [r7, #4]
   3d35c:	str	r0, [r7, #8]
   3d360:	ldm	lr, {r1, r2}
   3d364:	str	r0, [r7, #12]
   3d368:	str	r0, [r7, #16]
   3d36c:	mvn	r0, #0
   3d370:	str	r0, [r7, #28]
   3d374:	bic	r0, r2, #786432	; 0xc0000
   3d378:	str	r1, [r7, #20]
   3d37c:	str	r0, [r7, #24]
   3d380:	ldr	r0, [r8, #76]	; 0x4c
   3d384:	add	r0, r0, #1
   3d388:	str	r0, [r8, #76]	; 0x4c
   3d38c:	b	3d3e8 <__assert_fail@plt+0x2a96c>
   3d390:	ldr	r1, [r8, #64]	; 0x40
   3d394:	cmp	r1, #31
   3d398:	beq	3f1f8 <__assert_fail@plt+0x2c77c>
   3d39c:	ldr	r0, [r8, #56]	; 0x38
   3d3a0:	add	r2, r1, #1
   3d3a4:	add	r7, r0, r1, lsl #5
   3d3a8:	mov	r0, #0
   3d3ac:	str	r2, [r8, #64]	; 0x40
   3d3b0:	str	r0, [r7, #4]!
   3d3b4:	str	r0, [r7, #4]
   3d3b8:	str	r0, [r7, #8]
   3d3bc:	ldm	lr, {r1, r2}
   3d3c0:	str	r0, [r7, #12]
   3d3c4:	str	r0, [r7, #16]
   3d3c8:	mvn	r0, #0
   3d3cc:	str	r0, [r7, #28]
   3d3d0:	bic	r0, r2, #786432	; 0xc0000
   3d3d4:	str	r1, [r7, #20]
   3d3d8:	str	r0, [r7, #24]
   3d3dc:	ldr	r0, [r8, #92]	; 0x5c
   3d3e0:	cmp	r0, #2
   3d3e4:	blt	3e240 <__assert_fail@plt+0x2b7c4>
   3d3e8:	ldrb	r0, [r8, #88]	; 0x58
   3d3ec:	orr	r0, r0, #2
   3d3f0:	strb	r0, [r8, #88]	; 0x58
   3d3f4:	b	3e240 <__assert_fail@plt+0x2b7c4>
   3d3f8:	ldr	r4, [r7, #24]
   3d3fc:	mov	sl, r6
   3d400:	orr	r2, r6, #8388608	; 0x800000
   3d404:	ldr	r6, [sp, #24]
   3d408:	ldr	r5, [fp, #8]
   3d40c:	add	r0, r4, #1
   3d410:	mov	r1, r6
   3d414:	str	r0, [r7, #24]
   3d418:	mov	r0, lr
   3d41c:	bl	3c468 <__assert_fail@plt+0x299ec>
   3d420:	ldr	r1, [r6, #40]	; 0x28
   3d424:	ldr	lr, [sp, #44]	; 0x2c
   3d428:	mov	r9, #0
   3d42c:	add	r0, r1, r0
   3d430:	str	r0, [r6, #40]	; 0x28
   3d434:	ldrb	r0, [lr, #4]
   3d438:	cmp	r0, #9
   3d43c:	beq	3e1d4 <__assert_fail@plt+0x2b758>
   3d440:	add	r0, r5, #1
   3d444:	mov	r1, r7
   3d448:	mov	r2, lr
   3d44c:	mov	r3, sl
   3d450:	mov	r6, lr
   3d454:	str	r0, [sp]
   3d458:	ldr	r5, [sp, #16]
   3d45c:	str	r5, [sp, #4]
   3d460:	ldr	r0, [sp, #24]
   3d464:	bl	3c0e0 <__assert_fail@plt+0x29664>
   3d468:	mov	r9, r0
   3d46c:	ldr	r0, [r5]
   3d470:	cmp	r0, #0
   3d474:	beq	3e1c4 <__assert_fail@plt+0x2b748>
   3d478:	mov	sl, #0
   3d47c:	mov	r0, sl
   3d480:	sub	sp, fp, #28
   3d484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d488:	ldr	r0, [lr]
   3d48c:	ldr	r7, [sp, #24]
   3d490:	movw	r1, #783	; 0x30f
   3d494:	tst	r0, r1
   3d498:	beq	3d4e0 <__assert_fail@plt+0x2aa64>
   3d49c:	ldrb	r0, [r8, #88]	; 0x58
   3d4a0:	tst	r0, #16
   3d4a4:	bne	3d4dc <__assert_fail@plt+0x2aa60>
   3d4a8:	orr	r1, r0, #16
   3d4ac:	tst	r0, #8
   3d4b0:	strb	r1, [r8, #88]	; 0x58
   3d4b4:	bne	3f4ac <__assert_fail@plt+0x2ca30>
   3d4b8:	add	r1, pc, #832	; 0x340
   3d4bc:	tst	r0, #4
   3d4c0:	vld1.64	{d16-d17}, [r1 :128]
   3d4c4:	add	r1, r8, #96	; 0x60
   3d4c8:	vst1.32	{d16-d17}, [r1]
   3d4cc:	beq	3f4b8 <__assert_fail@plt+0x2ca3c>
   3d4d0:	vmov.i32	q8, #0	; 0x00000000
   3d4d4:	add	r0, r8, #112	; 0x70
   3d4d8:	vst1.32	{d16-d17}, [r0]
   3d4dc:	ldr	r0, [lr]
   3d4e0:	cmp	r0, #512	; 0x200
   3d4e4:	beq	3e028 <__assert_fail@plt+0x2b5ac>
   3d4e8:	cmp	r0, #256	; 0x100
   3d4ec:	bne	3e148 <__assert_fail@plt+0x2b6cc>
   3d4f0:	mov	r0, #6
   3d4f4:	mov	r4, r8
   3d4f8:	str	r0, [lr]
   3d4fc:	ldr	r1, [r4, #64]!	; 0x40
   3d500:	cmp	r1, #31
   3d504:	beq	3f3f8 <__assert_fail@plt+0x2c97c>
   3d508:	ldr	r0, [r8, #56]	; 0x38
   3d50c:	add	r2, r1, #1
   3d510:	add	r5, r0, r1, lsl #5
   3d514:	mov	r0, #0
   3d518:	str	r2, [r4]
   3d51c:	str	r0, [r5, #4]!
   3d520:	str	r0, [r5, #4]
   3d524:	str	r0, [r5, #8]
   3d528:	ldm	lr, {r1, r2}
   3d52c:	str	r0, [r5, #12]
   3d530:	str	r0, [r5, #16]
   3d534:	mvn	r0, #0
   3d538:	str	r0, [r5, #28]
   3d53c:	bic	r0, r2, #786432	; 0xc0000
   3d540:	str	r1, [r5, #20]
   3d544:	str	r0, [r5, #24]
   3d548:	mov	r0, #9
   3d54c:	b	3e084 <__assert_fail@plt+0x2b608>
   3d550:	ldr	r1, [r8, #64]	; 0x40
   3d554:	cmp	r1, #31
   3d558:	beq	3f224 <__assert_fail@plt+0x2c7a8>
   3d55c:	ldr	r0, [r8, #56]	; 0x38
   3d560:	ldr	r3, [sp, #24]
   3d564:	add	r2, r1, #1
   3d568:	add	r4, r0, r1, lsl #5
   3d56c:	mov	r0, #0
   3d570:	str	r2, [r8, #64]	; 0x40
   3d574:	str	r0, [r4, #4]!
   3d578:	str	r0, [r4, #4]
   3d57c:	str	r0, [r4, #8]
   3d580:	ldm	lr, {r1, r2}
   3d584:	str	r0, [r4, #12]
   3d588:	str	r0, [r4, #16]
   3d58c:	mvn	r0, #0
   3d590:	str	r0, [r4, #28]
   3d594:	bic	r0, r2, #786432	; 0xc0000
   3d598:	str	r1, [r4, #20]
   3d59c:	str	r0, [r4, #24]
   3d5a0:	ldr	r0, [r8, #92]	; 0x5c
   3d5a4:	cmp	r0, #2
   3d5a8:	blt	3d7e4 <__assert_fail@plt+0x2ad68>
   3d5ac:	ldr	r0, [r3, #40]	; 0x28
   3d5b0:	ldr	r1, [r3, #56]	; 0x38
   3d5b4:	cmp	r1, r0
   3d5b8:	ble	3d7e4 <__assert_fail@plt+0x2ad68>
   3d5bc:	mov	r5, #0
   3d5c0:	mvn	sl, #0
   3d5c4:	mov	r9, r6
   3d5c8:	ldr	r6, [sp, #24]
   3d5cc:	ldr	r1, [r6, #28]
   3d5d0:	cmp	r0, r1
   3d5d4:	beq	3f040 <__assert_fail@plt+0x2c5c4>
   3d5d8:	ldr	r1, [r6, #8]
   3d5dc:	ldr	r0, [r1, r0, lsl #2]
   3d5e0:	cmn	r0, #1
   3d5e4:	bne	3f040 <__assert_fail@plt+0x2c5c4>
   3d5e8:	mov	r0, lr
   3d5ec:	mov	r1, r6
   3d5f0:	mov	r2, r9
   3d5f4:	bl	3c468 <__assert_fail@plt+0x299ec>
   3d5f8:	ldr	r1, [r6, #40]	; 0x28
   3d5fc:	add	r0, r1, r0
   3d600:	str	r0, [r6, #40]	; 0x28
   3d604:	ldr	r1, [r8, #64]	; 0x40
   3d608:	cmp	r1, #31
   3d60c:	beq	3d6b8 <__assert_fail@plt+0x2ac3c>
   3d610:	ldr	r0, [r8, #56]	; 0x38
   3d614:	ldr	lr, [sp, #44]	; 0x2c
   3d618:	add	r2, r1, #1
   3d61c:	add	r6, r0, r1, lsl #5
   3d620:	str	r2, [r8, #64]	; 0x40
   3d624:	str	r5, [r6, #4]!
   3d628:	str	r5, [r6, #4]
   3d62c:	str	r5, [r6, #8]
   3d630:	ldm	lr, {r0, r1}
   3d634:	str	r5, [r6, #12]
   3d638:	str	r5, [r6, #16]
   3d63c:	str	sl, [r6, #28]
   3d640:	str	r0, [r6, #20]
   3d644:	bic	r0, r1, #786432	; 0xc0000
   3d648:	str	r0, [r6, #24]
   3d64c:	ldr	r1, [r8, #64]	; 0x40
   3d650:	cmp	r1, #31
   3d654:	beq	3d6f4 <__assert_fail@plt+0x2ac78>
   3d658:	ldr	r0, [r8, #56]	; 0x38
   3d65c:	add	r2, r1, #1
   3d660:	add	r7, r0, r1, lsl #5
   3d664:	mov	r0, #16
   3d668:	cmp	r6, #0
   3d66c:	str	r2, [r8, #64]	; 0x40
   3d670:	str	r5, [r7, #4]!
   3d674:	stmib	r7, {r4, r6}
   3d678:	str	r5, [r7, #12]
   3d67c:	str	r5, [r7, #16]
   3d680:	str	r5, [r7, #20]
   3d684:	str	r0, [r7, #24]
   3d688:	str	sl, [r7, #28]
   3d68c:	str	r7, [r4]
   3d690:	beq	3f490 <__assert_fail@plt+0x2ca14>
   3d694:	ldr	r1, [sp, #24]
   3d698:	str	r7, [r6]
   3d69c:	mov	r4, r7
   3d6a0:	mov	r6, r9
   3d6a4:	ldr	r0, [r1, #40]	; 0x28
   3d6a8:	ldr	r1, [r1, #56]	; 0x38
   3d6ac:	cmp	r1, r0
   3d6b0:	bgt	3d5c4 <__assert_fail@plt+0x2ab48>
   3d6b4:	b	3e240 <__assert_fail@plt+0x2b7c4>
   3d6b8:	mov	r0, #996	; 0x3e4
   3d6bc:	bl	35608 <__assert_fail@plt+0x22b8c>
   3d6c0:	cmp	r0, #0
   3d6c4:	beq	3d6e0 <__assert_fail@plt+0x2ac64>
   3d6c8:	ldr	r1, [r8, #56]	; 0x38
   3d6cc:	str	r1, [r0]
   3d6d0:	mov	r1, #0
   3d6d4:	str	r1, [r8, #64]	; 0x40
   3d6d8:	str	r0, [r8, #56]	; 0x38
   3d6dc:	b	3d614 <__assert_fail@plt+0x2ab98>
   3d6e0:	ldr	lr, [sp, #44]	; 0x2c
   3d6e4:	mov	r6, #0
   3d6e8:	ldr	r1, [r8, #64]	; 0x40
   3d6ec:	cmp	r1, #31
   3d6f0:	bne	3d658 <__assert_fail@plt+0x2abdc>
   3d6f4:	mov	r0, #996	; 0x3e4
   3d6f8:	bl	35608 <__assert_fail@plt+0x22b8c>
   3d6fc:	ldr	lr, [sp, #44]	; 0x2c
   3d700:	cmp	r0, #0
   3d704:	beq	3f490 <__assert_fail@plt+0x2ca14>
   3d708:	ldr	r1, [r8, #56]	; 0x38
   3d70c:	str	r1, [r0]
   3d710:	mov	r1, #0
   3d714:	str	r1, [r8, #64]	; 0x40
   3d718:	str	r0, [r8, #56]	; 0x38
   3d71c:	b	3d65c <__assert_fail@plt+0x2abe0>
   3d720:	mov	r0, #5
   3d724:	b	3e134 <__assert_fail@plt+0x2b6b8>
   3d728:	mov	sl, #0
   3d72c:	mov	r0, #32
   3d730:	mov	r1, #1
   3d734:	str	sl, [fp, #-32]	; 0xffffffe0
   3d738:	bl	325e0 <__assert_fail@plt+0x1fb64>
   3d73c:	mov	r4, r0
   3d740:	mov	r0, #40	; 0x28
   3d744:	mov	r1, #1
   3d748:	bl	325e0 <__assert_fail@plt+0x1fb64>
   3d74c:	mov	r5, r0
   3d750:	cmp	r4, #0
   3d754:	cmpne	r5, #0
   3d758:	beq	3f254 <__assert_fail@plt+0x2c7d8>
   3d75c:	str	r5, [sp, #48]	; 0x30
   3d760:	mov	r2, r6
   3d764:	ldr	r5, [sp, #44]	; 0x2c
   3d768:	ldr	r7, [sp, #24]
   3d76c:	mov	r0, r5
   3d770:	mov	r1, r7
   3d774:	bl	3fabc <__assert_fail@plt+0x2d040>
   3d778:	mov	r3, r0
   3d77c:	ldr	r0, [r5, #4]
   3d780:	mov	r2, r5
   3d784:	uxtb	r1, r0
   3d788:	cmp	r1, #25
   3d78c:	beq	3d810 <__assert_fail@plt+0x2ad94>
   3d790:	ldr	sl, [sp, #48]	; 0x30
   3d794:	cmp	r1, #2
   3d798:	beq	3f1e8 <__assert_fail@plt+0x2c76c>
   3d79c:	mov	r1, #0
   3d7a0:	b	3d868 <__assert_fail@plt+0x2adec>
   3d7a4:	ldr	r4, [sp, #24]
   3d7a8:	mov	r0, lr
   3d7ac:	mov	r2, r6
   3d7b0:	mov	r5, lr
   3d7b4:	mov	r1, r4
   3d7b8:	bl	3c468 <__assert_fail@plt+0x299ec>
   3d7bc:	ldr	r1, [r4, #40]	; 0x28
   3d7c0:	mov	r2, r5
   3d7c4:	mov	r3, r6
   3d7c8:	add	r0, r1, r0
   3d7cc:	mov	r1, r7
   3d7d0:	str	r0, [r4, #40]	; 0x28
   3d7d4:	mov	r0, r4
   3d7d8:	sub	sp, fp, #28
   3d7dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d7e0:	b	3d120 <__assert_fail@plt+0x2a6a4>
   3d7e4:	mov	r7, r4
   3d7e8:	b	3e240 <__assert_fail@plt+0x2b7c4>
   3d7ec:	mov	r0, #16
   3d7f0:	b	3e134 <__assert_fail@plt+0x2b6b8>
   3d7f4:	nop	{0}
   3d7f8:	nop	{0}
   3d7fc:	nop	{0}
   3d800:	andeq	r0, r0, r0
   3d804:	mvnseq	r0, #0
   3d808:			; <UNDEFINED> instruction: 0x87fffffe
   3d80c:			; <UNDEFINED> instruction: 0x07fffffe
   3d810:	ldr	sl, [sp, #48]	; 0x30
   3d814:	tst	r6, #256	; 0x100
   3d818:	mov	r1, r7
   3d81c:	ldrb	r0, [sl, #16]
   3d820:	orr	r0, r0, #1
   3d824:	strb	r0, [sl, #16]
   3d828:	ldrne	r0, [r4]
   3d82c:	orrne	r0, r0, #1024	; 0x400
   3d830:	strne	r0, [r4]
   3d834:	ldr	r0, [r7, #40]	; 0x28
   3d838:	add	r0, r0, r3
   3d83c:	str	r0, [r7, #40]	; 0x28
   3d840:	mov	r0, r2
   3d844:	mov	r2, r6
   3d848:	bl	3fabc <__assert_fail@plt+0x2d040>
   3d84c:	ldr	r2, [sp, #44]	; 0x2c
   3d850:	mov	r3, r0
   3d854:	ldr	r0, [r2, #4]
   3d858:	uxtb	r1, r0
   3d85c:	cmp	r1, #2
   3d860:	beq	3f1e8 <__assert_fail@plt+0x2c76c>
   3d864:	mov	r1, #1
   3d868:	str	r1, [sp, #36]	; 0x24
   3d86c:	uxtb	r1, r0
   3d870:	str	r4, [sp, #52]	; 0x34
   3d874:	str	r6, [sp, #40]	; 0x28
   3d878:	cmp	r1, #21
   3d87c:	ldr	r5, [sp, #40]	; 0x28
   3d880:	moveq	r1, #1
   3d884:	bfieq	r0, r1, #0, #8
   3d888:	mov	r1, r7
   3d88c:	streq	r0, [r2, #4]
   3d890:	mov	r0, #3
   3d894:	str	r0, [fp, #-40]	; 0xffffffd8
   3d898:	sub	r0, fp, #80	; 0x50
   3d89c:	str	r0, [fp, #-36]	; 0xffffffdc
   3d8a0:	mov	r0, #1
   3d8a4:	str	r5, [sp]
   3d8a8:	str	r0, [sp, #4]
   3d8ac:	sub	r0, fp, #40	; 0x28
   3d8b0:	bl	3fc64 <__assert_fail@plt+0x2d1e8>
   3d8b4:	cmp	r0, #0
   3d8b8:	bne	3f1d8 <__assert_fail@plt+0x2c75c>
   3d8bc:	and	r0, r5, #65536	; 0x10000
   3d8c0:	str	r0, [sp, #32]
   3d8c4:	mov	r0, #0
   3d8c8:	str	r0, [sp, #28]
   3d8cc:	mov	r0, #0
   3d8d0:	str	r0, [sp, #20]
   3d8d4:	ldr	r6, [sp, #24]
   3d8d8:	ldr	r7, [sp, #44]	; 0x2c
   3d8dc:	mov	r0, r7
   3d8e0:	mov	r1, r6
   3d8e4:	mov	r2, r5
   3d8e8:	bl	3fabc <__assert_fail@plt+0x2d040>
   3d8ec:	ldr	r5, [fp, #-40]	; 0xffffffd8
   3d8f0:	ldr	r4, [sp, #52]	; 0x34
   3d8f4:	mov	r9, r0
   3d8f8:	cmp	r5, #2
   3d8fc:	beq	3db00 <__assert_fail@plt+0x2b084>
   3d900:	cmp	r5, #4
   3d904:	bne	3d944 <__assert_fail@plt+0x2aec8>
   3d908:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3d90c:	ldr	r0, [r6, #64]	; 0x40
   3d910:	mov	r2, sl
   3d914:	sub	r3, fp, #32
   3d918:	str	r1, [sp]
   3d91c:	ldr	r1, [sp, #40]	; 0x28
   3d920:	str	r1, [sp, #4]
   3d924:	mov	r1, r4
   3d928:	bl	3ff68 <__assert_fail@plt+0x2d4ec>
   3d92c:	ldr	r1, [sp, #16]
   3d930:	ldr	lr, [sp, #44]	; 0x2c
   3d934:	cmp	r0, #0
   3d938:	str	r0, [r1]
   3d93c:	beq	3db40 <__assert_fail@plt+0x2b0c4>
   3d940:	b	3f2a8 <__assert_fail@plt+0x2c82c>
   3d944:	ldr	lr, [sp, #44]	; 0x2c
   3d948:	mov	r7, r9
   3d94c:	mov	r9, #7
   3d950:	ldrb	r0, [lr, #4]
   3d954:	cmp	r0, #22
   3d958:	beq	3d968 <__assert_fail@plt+0x2aeec>
   3d95c:	cmp	r0, #2
   3d960:	bne	3dab8 <__assert_fail@plt+0x2b03c>
   3d964:	b	3f298 <__assert_fail@plt+0x2c81c>
   3d968:	ldr	r4, [sp, #24]
   3d96c:	ldr	r2, [sp, #40]	; 0x28
   3d970:	mov	r6, r7
   3d974:	ldr	r0, [r4, #40]	; 0x28
   3d978:	mov	r1, r4
   3d97c:	add	r0, r0, r7
   3d980:	str	r0, [r4, #40]	; 0x28
   3d984:	add	r0, sp, #56	; 0x38
   3d988:	bl	3fabc <__assert_fail@plt+0x2d040>
   3d98c:	mov	r3, r0
   3d990:	ldrb	r0, [sp, #60]	; 0x3c
   3d994:	cmp	r0, #21
   3d998:	beq	3daa0 <__assert_fail@plt+0x2b024>
   3d99c:	cmp	r0, #2
   3d9a0:	beq	3f298 <__assert_fail@plt+0x2c81c>
   3d9a4:	ldr	r7, [sp, #40]	; 0x28
   3d9a8:	mov	r0, #3
   3d9ac:	add	r2, sp, #56	; 0x38
   3d9b0:	str	r0, [fp, #-48]	; 0xffffffd0
   3d9b4:	add	r0, sp, #64	; 0x40
   3d9b8:	str	r0, [fp, #-44]	; 0xffffffd4
   3d9bc:	mov	r0, #1
   3d9c0:	str	r0, [sp, #4]
   3d9c4:	sub	r0, fp, #48	; 0x30
   3d9c8:	str	r7, [sp]
   3d9cc:	ldr	r4, [sp, #24]
   3d9d0:	mov	r1, r4
   3d9d4:	bl	3fc64 <__assert_fail@plt+0x2d1e8>
   3d9d8:	cmp	r0, #0
   3d9dc:	bne	3f1d8 <__assert_fail@plt+0x2c75c>
   3d9e0:	ldr	r0, [sp, #44]	; 0x2c
   3d9e4:	mov	r1, r4
   3d9e8:	mov	r2, r7
   3d9ec:	bl	3fabc <__assert_fail@plt+0x2d040>
   3d9f0:	ldr	r4, [fp, #-48]	; 0xffffffd0
   3d9f4:	mov	r9, #11
   3d9f8:	str	r0, [sp, #12]
   3d9fc:	cmp	r4, #2
   3da00:	cmpne	r4, #4
   3da04:	beq	3f298 <__assert_fail@plt+0x2c81c>
   3da08:	cmp	r5, #3
   3da0c:	bne	3da20 <__assert_fail@plt+0x2afa4>
   3da10:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3da14:	bl	12788 <strlen@plt>
   3da18:	cmp	r0, #1
   3da1c:	bhi	3f294 <__assert_fail@plt+0x2c818>
   3da20:	cmp	r4, #3
   3da24:	bne	3da38 <__assert_fail@plt+0x2afbc>
   3da28:	ldr	r0, [fp, #-44]	; 0xffffffd4
   3da2c:	bl	12788 <strlen@plt>
   3da30:	cmp	r0, #1
   3da34:	bhi	3f294 <__assert_fail@plt+0x2c818>
   3da38:	ldr	lr, [sp, #44]	; 0x2c
   3da3c:	cmp	r5, #3
   3da40:	beq	3dc0c <__assert_fail@plt+0x2b190>
   3da44:	mov	r7, #0
   3da48:	cmp	r5, #0
   3da4c:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   3da50:	cmp	r4, #3
   3da54:	beq	3dc1c <__assert_fail@plt+0x2b1a0>
   3da58:	mov	sl, #0
   3da5c:	cmp	r4, #0
   3da60:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   3da64:	cmp	r5, #3
   3da68:	cmpne	r5, #0
   3da6c:	bne	3dc30 <__assert_fail@plt+0x2b1b4>
   3da70:	ldr	r0, [r8, #92]	; 0x5c
   3da74:	cmp	r0, #2
   3da78:	blt	3dc34 <__assert_fail@plt+0x2b1b8>
   3da7c:	mov	r0, r7
   3da80:	bl	12830 <btowc@plt>
   3da84:	ldr	lr, [sp, #44]	; 0x2c
   3da88:	mov	r7, r0
   3da8c:	cmp	r4, #3
   3da90:	cmpne	r4, #0
   3da94:	beq	3dc40 <__assert_fail@plt+0x2b1c4>
   3da98:	ldr	sl, [fp, #-44]	; 0xffffffd4
   3da9c:	b	3dc70 <__assert_fail@plt+0x2b1f4>
   3daa0:	ldr	r0, [r4, #40]	; 0x28
   3daa4:	ldr	lr, [sp, #44]	; 0x2c
   3daa8:	sub	r0, r0, r6
   3daac:	str	r0, [r4, #40]	; 0x28
   3dab0:	mov	r0, #1
   3dab4:	strb	r0, [lr, #4]
   3dab8:	cmp	r5, #1
   3dabc:	beq	3db98 <__assert_fail@plt+0x2b11c>
   3dac0:	ldr	r6, [sp, #24]
   3dac4:	ldr	r4, [sp, #52]	; 0x34
   3dac8:	ldr	sl, [sp, #48]	; 0x30
   3dacc:	cmp	r5, #2
   3dad0:	mov	r9, r7
   3dad4:	beq	3db00 <__assert_fail@plt+0x2b084>
   3dad8:	cmp	r5, #3
   3dadc:	bne	3dbdc <__assert_fail@plt+0x2b160>
   3dae0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3dae4:	mov	r0, r7
   3dae8:	bl	12788 <strlen@plt>
   3daec:	cmp	r0, #1
   3daf0:	mov	r3, #1
   3daf4:	bne	3f294 <__assert_fail@plt+0x2c818>
   3daf8:	ldrb	r0, [r7]
   3dafc:	b	3db1c <__assert_fail@plt+0x2b0a0>
   3db00:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3db04:	mov	r0, r7
   3db08:	bl	12788 <strlen@plt>
   3db0c:	cmp	r0, #1
   3db10:	bne	3f294 <__assert_fail@plt+0x2c818>
   3db14:	ldrb	r0, [r7]
   3db18:	mov	r3, #1
   3db1c:	ubfx	r1, r0, #5, #3
   3db20:	and	r0, r0, #31
   3db24:	ldr	r2, [r4, r1, lsl #2]
   3db28:	orr	r0, r2, r3, lsl r0
   3db2c:	str	r0, [r4, r1, lsl #2]
   3db30:	mov	r1, #0
   3db34:	ldr	r0, [sp, #16]
   3db38:	ldr	lr, [sp, #44]	; 0x2c
   3db3c:	str	r1, [r0]
   3db40:	ldrb	r0, [lr, #4]
   3db44:	cmp	r0, #21
   3db48:	beq	3ddcc <__assert_fail@plt+0x2b350>
   3db4c:	cmp	r0, #2
   3db50:	beq	3f1e0 <__assert_fail@plt+0x2c764>
   3db54:	mov	r0, #3
   3db58:	ldr	r5, [sp, #40]	; 0x28
   3db5c:	mov	r1, r6
   3db60:	mov	r2, lr
   3db64:	mov	r3, r9
   3db68:	mov	r7, lr
   3db6c:	str	r0, [fp, #-40]	; 0xffffffd8
   3db70:	sub	r0, fp, #80	; 0x50
   3db74:	str	r0, [fp, #-36]	; 0xffffffdc
   3db78:	mov	r0, #0
   3db7c:	str	r0, [sp, #4]
   3db80:	sub	r0, fp, #40	; 0x28
   3db84:	str	r5, [sp]
   3db88:	bl	3fc64 <__assert_fail@plt+0x2d1e8>
   3db8c:	cmp	r0, #0
   3db90:	beq	3d8dc <__assert_fail@plt+0x2ae60>
   3db94:	b	3f1d8 <__assert_fail@plt+0x2c75c>
   3db98:	ldr	sl, [sp, #48]	; 0x30
   3db9c:	ldr	r0, [sp, #28]
   3dba0:	ldr	r4, [sp, #52]	; 0x34
   3dba4:	ldr	r1, [sl, #20]
   3dba8:	cmp	r0, r1
   3dbac:	beq	3dd38 <__assert_fail@plt+0x2b2bc>
   3dbb0:	ldr	r0, [sl]
   3dbb4:	ldr	r6, [sp, #24]
   3dbb8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   3dbbc:	add	r2, r1, #1
   3dbc0:	mov	r9, r7
   3dbc4:	str	r2, [sl, #20]
   3dbc8:	str	r3, [r0, r1, lsl #2]
   3dbcc:	ldrb	r0, [lr, #4]
   3dbd0:	cmp	r0, #21
   3dbd4:	bne	3db4c <__assert_fail@plt+0x2b0d0>
   3dbd8:	b	3ddcc <__assert_fail@plt+0x2b350>
   3dbdc:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   3dbe0:	mov	r3, #1
   3dbe4:	ubfx	r1, r0, #5, #3
   3dbe8:	ldr	lr, [sp, #44]	; 0x2c
   3dbec:	and	r0, r0, #31
   3dbf0:	ldr	r2, [r4, r1, lsl #2]
   3dbf4:	orr	r0, r2, r3, lsl r0
   3dbf8:	str	r0, [r4, r1, lsl #2]
   3dbfc:	ldrb	r0, [lr, #4]
   3dc00:	cmp	r0, #21
   3dc04:	bne	3db4c <__assert_fail@plt+0x2b0d0>
   3dc08:	b	3ddcc <__assert_fail@plt+0x2b350>
   3dc0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3dc10:	ldrb	r7, [r0]
   3dc14:	cmp	r4, #3
   3dc18:	bne	3da58 <__assert_fail@plt+0x2afdc>
   3dc1c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   3dc20:	ldrb	sl, [r0]
   3dc24:	cmp	r5, #3
   3dc28:	cmpne	r5, #0
   3dc2c:	beq	3da70 <__assert_fail@plt+0x2aff4>
   3dc30:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3dc34:	cmp	r4, #3
   3dc38:	cmpne	r4, #0
   3dc3c:	bne	3da98 <__assert_fail@plt+0x2b01c>
   3dc40:	ldr	r0, [r8, #92]	; 0x5c
   3dc44:	cmp	r0, #2
   3dc48:	blt	3dc70 <__assert_fail@plt+0x2b1f4>
   3dc4c:	mov	r0, sl
   3dc50:	bl	12830 <btowc@plt>
   3dc54:	ldr	lr, [sp, #44]	; 0x2c
   3dc58:	mov	sl, r0
   3dc5c:	cmn	r7, #1
   3dc60:	mov	r9, #3
   3dc64:	cmnne	sl, #1
   3dc68:	beq	3f298 <__assert_fail@plt+0x2c81c>
   3dc6c:	b	3dc80 <__assert_fail@plt+0x2b204>
   3dc70:	cmn	r7, #1
   3dc74:	mov	r9, #3
   3dc78:	cmnne	sl, #1
   3dc7c:	beq	3f298 <__assert_fail@plt+0x2c81c>
   3dc80:	ldr	r0, [sp, #32]
   3dc84:	cmp	r0, #0
   3dc88:	beq	3dc98 <__assert_fail@plt+0x2b21c>
   3dc8c:	cmp	r7, sl
   3dc90:	mov	r9, #11
   3dc94:	bhi	3f298 <__assert_fail@plt+0x2c81c>
   3dc98:	ldr	r0, [r8, #92]	; 0x5c
   3dc9c:	cmp	r0, #2
   3dca0:	blt	3dcdc <__assert_fail@plt+0x2b260>
   3dca4:	ldr	r4, [sp, #48]	; 0x30
   3dca8:	ldr	r1, [sp, #20]
   3dcac:	mov	r5, #1
   3dcb0:	ldr	r0, [r4, #32]
   3dcb4:	cmp	r1, r0
   3dcb8:	beq	3dd78 <__assert_fail@plt+0x2b2fc>
   3dcbc:	ldmib	r4, {r6, r9}
   3dcc0:	str	r7, [r6, r0, lsl #2]
   3dcc4:	ldr	r0, [r4, #32]
   3dcc8:	add	r1, r0, #1
   3dccc:	str	r1, [r4, #32]
   3dcd0:	ldr	r4, [sp, #52]	; 0x34
   3dcd4:	str	sl, [r9, r0, lsl #2]
   3dcd8:	b	3dce4 <__assert_fail@plt+0x2b268>
   3dcdc:	ldr	r4, [sp, #52]	; 0x34
   3dce0:	mov	r5, #1
   3dce4:	ldr	r6, [sp, #24]
   3dce8:	ldr	r9, [sp, #12]
   3dcec:	mov	r0, #0
   3dcf0:	cmp	r7, r0
   3dcf4:	cmpls	r0, sl
   3dcf8:	ubfxls	r1, r0, #5, #3
   3dcfc:	andls	r3, r0, #31
   3dd00:	add	r0, r0, #1
   3dd04:	ldrls	r2, [r4, r1, lsl #2]
   3dd08:	orrls	r2, r2, r5, lsl r3
   3dd0c:	strls	r2, [r4, r1, lsl #2]
   3dd10:	cmp	r0, #256	; 0x100
   3dd14:	bne	3dcf0 <__assert_fail@plt+0x2b274>
   3dd18:	ldr	r0, [sp, #16]
   3dd1c:	ldr	sl, [sp, #48]	; 0x30
   3dd20:	mov	r1, #0
   3dd24:	str	r1, [r0]
   3dd28:	ldrb	r0, [lr, #4]
   3dd2c:	cmp	r0, #21
   3dd30:	bne	3db4c <__assert_fail@plt+0x2b0d0>
   3dd34:	b	3ddcc <__assert_fail@plt+0x2b350>
   3dd38:	ldr	r1, [sp, #28]
   3dd3c:	mov	r0, #1
   3dd40:	orr	r1, r0, r1, lsl #1
   3dd44:	ldr	r0, [sl]
   3dd48:	str	r1, [sp, #28]
   3dd4c:	lsl	r1, r1, #2
   3dd50:	bl	36328 <__assert_fail@plt+0x238ac>
   3dd54:	cmp	r0, #0
   3dd58:	beq	3f680 <__assert_fail@plt+0x2cc04>
   3dd5c:	ldr	sl, [sp, #48]	; 0x30
   3dd60:	ldr	r6, [sp, #24]
   3dd64:	ldr	lr, [sp, #44]	; 0x2c
   3dd68:	ldr	r4, [sp, #52]	; 0x34
   3dd6c:	str	r0, [sl]
   3dd70:	ldr	r1, [sl, #20]
   3dd74:	b	3dbb8 <__assert_fail@plt+0x2b13c>
   3dd78:	ldr	r0, [sp, #20]
   3dd7c:	orr	r0, r5, r0, lsl #1
   3dd80:	lsl	r9, r0, #2
   3dd84:	str	r0, [sp, #20]
   3dd88:	ldr	r0, [r4, #4]
   3dd8c:	mov	r1, r9
   3dd90:	bl	36328 <__assert_fail@plt+0x238ac>
   3dd94:	mov	r6, r0
   3dd98:	ldr	r0, [r4, #8]
   3dd9c:	mov	r1, r9
   3dda0:	bl	36328 <__assert_fail@plt+0x238ac>
   3dda4:	mov	r9, r0
   3dda8:	cmp	r6, #0
   3ddac:	cmpne	r9, #0
   3ddb0:	beq	3f69c <__assert_fail@plt+0x2cc20>
   3ddb4:	ldr	r4, [sp, #48]	; 0x30
   3ddb8:	mov	r5, #1
   3ddbc:	stmib	r4, {r6, r9}
   3ddc0:	ldr	r0, [r4, #32]
   3ddc4:	ldr	lr, [sp, #44]	; 0x2c
   3ddc8:	b	3dcc0 <__assert_fail@plt+0x2b244>
   3ddcc:	ldr	r0, [r6, #40]	; 0x28
   3ddd0:	add	r0, r0, r9
   3ddd4:	str	r0, [r6, #40]	; 0x28
   3ddd8:	ldr	r0, [sp, #36]	; 0x24
   3dddc:	cmp	r0, #0
   3dde0:	beq	3de20 <__assert_fail@plt+0x2b3a4>
   3dde4:	vld1.32	{d16-d17}, [r4]
   3dde8:	mov	r0, r4
   3ddec:	vmvn	q8, q8
   3ddf0:	vst1.32	{d16-d17}, [r0]!
   3ddf4:	vld1.32	{d16-d17}, [r0]
   3ddf8:	vmvn	q8, q8
   3ddfc:	vst1.32	{d16-d17}, [r0]
   3de00:	ldr	r0, [r8, #92]	; 0x5c
   3de04:	cmp	r0, #2
   3de08:	bge	3de2c <__assert_fail@plt+0x2b3b0>
   3de0c:	ldr	r1, [sl, #20]
   3de10:	ldr	r6, [sp, #40]	; 0x28
   3de14:	cmp	r1, #0
   3de18:	bne	3ded8 <__assert_fail@plt+0x2b45c>
   3de1c:	b	3deb4 <__assert_fail@plt+0x2b438>
   3de20:	ldr	r0, [r8, #92]	; 0x5c
   3de24:	cmp	r0, #2
   3de28:	blt	3de0c <__assert_fail@plt+0x2b390>
   3de2c:	ldm	r4, {r1, r2, r3, r7}
   3de30:	ldr	r6, [r8, #60]	; 0x3c
   3de34:	ldr	r5, [r6]
   3de38:	and	r1, r1, r5
   3de3c:	str	r1, [r4]
   3de40:	ldr	r1, [r6, #4]
   3de44:	and	r1, r2, r1
   3de48:	str	r1, [r4, #4]
   3de4c:	ldr	r1, [r6, #8]
   3de50:	and	r1, r3, r1
   3de54:	str	r1, [r4, #8]
   3de58:	ldr	r1, [r6, #12]
   3de5c:	and	r1, r7, r1
   3de60:	str	r1, [r4, #12]
   3de64:	ldr	r1, [r4, #16]
   3de68:	ldr	r2, [r6, #16]
   3de6c:	and	r1, r1, r2
   3de70:	str	r1, [r4, #16]
   3de74:	ldr	r1, [r6, #20]
   3de78:	ldr	r2, [r4, #20]
   3de7c:	and	r1, r2, r1
   3de80:	str	r1, [r4, #20]
   3de84:	ldr	r1, [r6, #24]
   3de88:	ldr	r2, [r4, #24]
   3de8c:	and	r1, r2, r1
   3de90:	str	r1, [r4, #24]
   3de94:	ldr	r1, [r6, #28]
   3de98:	ldr	r2, [r4, #28]
   3de9c:	and	r1, r2, r1
   3dea0:	str	r1, [r4, #28]
   3dea4:	ldr	r1, [sl, #20]
   3dea8:	ldr	r6, [sp, #40]	; 0x28
   3deac:	cmp	r1, #0
   3deb0:	bne	3ded8 <__assert_fail@plt+0x2b45c>
   3deb4:	ldr	r1, [sl, #24]
   3deb8:	cmp	r1, #0
   3debc:	bne	3ded8 <__assert_fail@plt+0x2b45c>
   3dec0:	ldr	r1, [sl, #28]
   3dec4:	cmp	r1, #0
   3dec8:	bne	3ded8 <__assert_fail@plt+0x2b45c>
   3decc:	ldr	r1, [sl, #32]
   3ded0:	cmp	r1, #0
   3ded4:	beq	3f110 <__assert_fail@plt+0x2c694>
   3ded8:	ldrb	r0, [r8, #88]	; 0x58
   3dedc:	orr	r0, r0, #2
   3dee0:	strb	r0, [r8, #88]	; 0x58
   3dee4:	ldr	r1, [r8, #64]	; 0x40
   3dee8:	cmp	r1, #31
   3deec:	beq	3f2fc <__assert_fail@plt+0x2c880>
   3def0:	ldr	r0, [r8, #56]	; 0x38
   3def4:	add	r2, r1, #1
   3def8:	add	r0, r0, r1, lsl #5
   3defc:	mov	r1, #6
   3df00:	vmov.i32	q8, #0	; 0x00000000
   3df04:	str	r2, [r8, #64]	; 0x40
   3df08:	mov	r2, #0
   3df0c:	add	r9, r0, #4
   3df10:	str	r2, [r0, #20]
   3df14:	str	sl, [r0, #24]
   3df18:	str	r1, [r0, #28]
   3df1c:	mov	r0, #28
   3df20:	mov	r1, r9
   3df24:	vst1.32	{d16-d17}, [r1], r0
   3df28:	mvn	r0, #0
   3df2c:	str	r0, [r1]
   3df30:	ldr	r0, [r4]
   3df34:	cmp	r0, #0
   3df38:	bne	3df90 <__assert_fail@plt+0x2b514>
   3df3c:	ldr	r0, [r4, #4]
   3df40:	cmp	r0, #0
   3df44:	bne	3df90 <__assert_fail@plt+0x2b514>
   3df48:	ldr	r0, [r4, #8]
   3df4c:	cmp	r0, #0
   3df50:	bne	3df90 <__assert_fail@plt+0x2b514>
   3df54:	ldr	r0, [r4, #12]
   3df58:	cmp	r0, #0
   3df5c:	bne	3df90 <__assert_fail@plt+0x2b514>
   3df60:	ldr	r0, [r4, #16]
   3df64:	cmp	r0, #0
   3df68:	bne	3df90 <__assert_fail@plt+0x2b514>
   3df6c:	ldr	r0, [r4, #20]
   3df70:	cmp	r0, #0
   3df74:	bne	3df90 <__assert_fail@plt+0x2b514>
   3df78:	ldr	r0, [r4, #24]
   3df7c:	cmp	r0, #0
   3df80:	bne	3df90 <__assert_fail@plt+0x2b514>
   3df84:	ldr	r0, [r4, #28]
   3df88:	cmp	r0, #0
   3df8c:	beq	3f3b0 <__assert_fail@plt+0x2c934>
   3df90:	ldr	r1, [r8, #64]	; 0x40
   3df94:	cmp	r1, #31
   3df98:	beq	3f328 <__assert_fail@plt+0x2c8ac>
   3df9c:	ldr	r0, [r8, #56]	; 0x38
   3dfa0:	add	r2, r1, #1
   3dfa4:	add	r0, r0, r1, lsl #5
   3dfa8:	mov	r1, #3
   3dfac:	vmov.i32	q8, #0	; 0x00000000
   3dfb0:	str	r2, [r8, #64]	; 0x40
   3dfb4:	mov	r2, #0
   3dfb8:	add	r5, r0, #4
   3dfbc:	str	r2, [r0, #20]
   3dfc0:	str	r4, [r0, #24]
   3dfc4:	str	r1, [r0, #28]
   3dfc8:	mov	r0, #28
   3dfcc:	mov	r1, r5
   3dfd0:	vst1.32	{d16-d17}, [r1], r0
   3dfd4:	mvn	r0, #0
   3dfd8:	str	r0, [r1]
   3dfdc:	ldr	r1, [r8, #64]	; 0x40
   3dfe0:	cmp	r1, #31
   3dfe4:	beq	3f354 <__assert_fail@plt+0x2c8d8>
   3dfe8:	ldr	r0, [r8, #56]	; 0x38
   3dfec:	add	r2, r1, #1
   3dff0:	add	r7, r0, r1, lsl #5
   3dff4:	mov	r0, #0
   3dff8:	mov	r1, #10
   3dffc:	str	r2, [r8, #64]	; 0x40
   3e000:	str	r0, [r7, #4]!
   3e004:	mvn	r2, #0
   3e008:	add	r3, r7, #20
   3e00c:	stmib	r7, {r5, r9}
   3e010:	str	r0, [r7, #12]
   3e014:	str	r0, [r7, #16]
   3e018:	stm	r3, {r0, r1, r2}
   3e01c:	str	r7, [r5]
   3e020:	str	r7, [r9]
   3e024:	b	3e240 <__assert_fail@plt+0x2b7c4>
   3e028:	mov	r0, #5
   3e02c:	mov	r4, r8
   3e030:	str	r0, [lr]
   3e034:	ldr	r1, [r4, #64]!	; 0x40
   3e038:	cmp	r1, #31
   3e03c:	beq	3f42c <__assert_fail@plt+0x2c9b0>
   3e040:	ldr	r0, [r8, #56]	; 0x38
   3e044:	add	r2, r1, #1
   3e048:	add	r5, r0, r1, lsl #5
   3e04c:	mov	r0, #0
   3e050:	str	r2, [r4]
   3e054:	str	r0, [r5, #4]!
   3e058:	str	r0, [r5, #4]
   3e05c:	str	r0, [r5, #8]
   3e060:	ldm	lr, {r1, r2}
   3e064:	str	r0, [r5, #12]
   3e068:	str	r0, [r5, #16]
   3e06c:	mvn	r0, #0
   3e070:	str	r0, [r5, #28]
   3e074:	bic	r0, r2, #786432	; 0xc0000
   3e078:	str	r1, [r5, #20]
   3e07c:	str	r0, [r5, #24]
   3e080:	mov	r0, #10
   3e084:	str	r0, [lr]
   3e088:	mov	r9, r6
   3e08c:	ldr	r1, [r4]
   3e090:	cmp	r1, #31
   3e094:	beq	3f3c4 <__assert_fail@plt+0x2c948>
   3e098:	ldr	r0, [r8, #56]	; 0x38
   3e09c:	add	r2, r1, #1
   3e0a0:	add	r6, r0, r1, lsl #5
   3e0a4:	mov	r0, #0
   3e0a8:	str	r2, [r4]
   3e0ac:	str	r0, [r6, #4]!
   3e0b0:	str	r0, [r6, #4]
   3e0b4:	str	r0, [r6, #8]
   3e0b8:	ldm	lr, {r1, r2}
   3e0bc:	str	r0, [r6, #12]
   3e0c0:	str	r0, [r6, #16]
   3e0c4:	mvn	r0, #0
   3e0c8:	str	r0, [r6, #28]
   3e0cc:	bic	r0, r2, #786432	; 0xc0000
   3e0d0:	str	r1, [r6, #20]
   3e0d4:	str	r0, [r6, #24]
   3e0d8:	ldr	r1, [r4]
   3e0dc:	cmp	r1, #31
   3e0e0:	beq	3f55c <__assert_fail@plt+0x2cae0>
   3e0e4:	ldr	r0, [r8, #56]	; 0x38
   3e0e8:	add	r2, r1, #1
   3e0ec:	cmp	r5, #0
   3e0f0:	str	r2, [r4]
   3e0f4:	add	r4, r0, r1, lsl #5
   3e0f8:	mov	r0, #0
   3e0fc:	mov	r1, #10
   3e100:	mvn	r2, #0
   3e104:	str	r0, [r4, #4]!
   3e108:	add	r3, r4, #20
   3e10c:	stmib	r4, {r5, r6}
   3e110:	str	r0, [r4, #12]
   3e114:	str	r0, [r4, #16]
   3e118:	stm	r3, {r0, r1, r2}
   3e11c:	strne	r4, [r5]
   3e120:	cmp	r6, #0
   3e124:	strne	r4, [r6]
   3e128:	cmpne	r5, #0
   3e12c:	bne	3e198 <__assert_fail@plt+0x2b71c>
   3e130:	mov	r0, #12
   3e134:	ldr	r1, [sp, #16]
   3e138:	str	r0, [r1]
   3e13c:	mov	r0, sl
   3e140:	sub	sp, fp, #28
   3e144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e148:	ldr	r1, [r8, #64]	; 0x40
   3e14c:	mov	r9, r6
   3e150:	cmp	r1, #31
   3e154:	beq	3f460 <__assert_fail@plt+0x2c9e4>
   3e158:	ldr	r0, [r8, #56]	; 0x38
   3e15c:	add	r2, r1, #1
   3e160:	add	r4, r0, r1, lsl #5
   3e164:	mov	r0, #0
   3e168:	str	r2, [r8, #64]	; 0x40
   3e16c:	str	r0, [r4, #4]!
   3e170:	str	r0, [r4, #4]
   3e174:	str	r0, [r4, #8]
   3e178:	ldm	lr, {r1, r2}
   3e17c:	str	r0, [r4, #12]
   3e180:	str	r0, [r4, #16]
   3e184:	mvn	r0, #0
   3e188:	str	r0, [r4, #28]
   3e18c:	bic	r0, r2, #786432	; 0xc0000
   3e190:	str	r1, [r4, #20]
   3e194:	str	r0, [r4, #24]
   3e198:	mov	r0, lr
   3e19c:	mov	r1, r7
   3e1a0:	mov	r2, r9
   3e1a4:	bl	3c468 <__assert_fail@plt+0x299ec>
   3e1a8:	ldr	r1, [r7, #40]	; 0x28
   3e1ac:	mov	sl, r4
   3e1b0:	add	r0, r1, r0
   3e1b4:	str	r0, [r7, #40]	; 0x28
   3e1b8:	mov	r0, sl
   3e1bc:	sub	sp, fp, #28
   3e1c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e1c4:	ldrb	r0, [r6, #4]
   3e1c8:	cmp	r0, #9
   3e1cc:	bne	3f588 <__assert_fail@plt+0x2cb0c>
   3e1d0:	mov	lr, r6
   3e1d4:	cmp	r4, #8
   3e1d8:	ldrls	r0, [r8, #84]	; 0x54
   3e1dc:	movls	r1, #1
   3e1e0:	orrls	r0, r0, r1, lsl r4
   3e1e4:	strls	r0, [r8, #84]	; 0x54
   3e1e8:	ldr	r1, [r8, #64]	; 0x40
   3e1ec:	cmp	r1, #31
   3e1f0:	beq	3f380 <__assert_fail@plt+0x2c904>
   3e1f4:	ldr	r0, [r8, #56]	; 0x38
   3e1f8:	mov	r6, sl
   3e1fc:	add	r0, r0, r1, lsl #5
   3e200:	add	r2, r1, #1
   3e204:	mov	r1, #0
   3e208:	mvn	r3, #0
   3e20c:	cmp	r9, #0
   3e210:	mov	r7, r0
   3e214:	str	r2, [r8, #64]	; 0x40
   3e218:	mov	r2, #17
   3e21c:	str	r1, [r7, #4]!
   3e220:	add	ip, r7, #20
   3e224:	str	r9, [r7, #4]
   3e228:	str	r1, [r7, #8]
   3e22c:	str	r1, [r7, #12]
   3e230:	str	r1, [r7, #16]
   3e234:	stm	ip, {r1, r2, r3}
   3e238:	strne	r7, [r9]
   3e23c:	str	r4, [r0, #24]
   3e240:	mov	r4, r6
   3e244:	ldr	r6, [sp, #24]
   3e248:	mov	r0, lr
   3e24c:	mov	r2, r4
   3e250:	mov	r1, r6
   3e254:	bl	3c468 <__assert_fail@plt+0x299ec>
   3e258:	ldr	r1, [r6, #40]	; 0x28
   3e25c:	ldr	ip, [sp, #44]	; 0x2c
   3e260:	add	r0, r1, r0
   3e264:	str	r0, [r6, #40]	; 0x28
   3e268:	add	r0, r8, #56	; 0x38
   3e26c:	add	r8, r8, #64	; 0x40
   3e270:	str	r0, [sp, #20]
   3e274:	and	r0, r4, #2097152	; 0x200000
   3e278:	str	r0, [sp, #12]
   3e27c:	str	r4, [sp, #40]	; 0x28
   3e280:	and	r0, r4, #16777216	; 0x1000000
   3e284:	mov	r4, #0
   3e288:	str	r0, [sp, #28]
   3e28c:	b	3ef6c <__assert_fail@plt+0x2c4f0>
   3e290:	movw	r2, #2048	; 0x800
   3e294:	mov	r1, #1
   3e298:	movt	r2, #140	; 0x8c
   3e29c:	tst	r2, r1, lsl r0
   3e2a0:	beq	3f034 <__assert_fail@plt+0x2c5b8>
   3e2a4:	cmp	r0, #23
   3e2a8:	str	sl, [sp, #36]	; 0x24
   3e2ac:	bne	3e2c0 <__assert_fail@plt+0x2b844>
   3e2b0:	ldm	ip, {r5, sl}
   3e2b4:	ldr	r7, [r6, #40]	; 0x28
   3e2b8:	mvn	r2, #0
   3e2bc:	b	3e2f4 <__assert_fail@plt+0x2b878>
   3e2c0:	cmp	r0, #19
   3e2c4:	sub	r0, r0, #18
   3e2c8:	mvn	r5, #0
   3e2cc:	clz	r0, r0
   3e2d0:	movweq	r5, #1
   3e2d4:	lsr	r9, r0, #5
   3e2d8:	b	3e508 <__assert_fail@plt+0x2ba8c>
   3e2dc:	add	r0, r9, r9, lsl #2
   3e2e0:	add	r0, r1, r0, lsl #1
   3e2e4:	movw	r1, #32816	; 0x8030
   3e2e8:	sub	r2, r0, #48	; 0x30
   3e2ec:	cmp	r0, r1
   3e2f0:	movwgt	r2, #32768	; 0x8000
   3e2f4:	mov	r9, r2
   3e2f8:	ldr	r2, [sp, #40]	; 0x28
   3e2fc:	mov	r0, ip
   3e300:	mov	r1, r6
   3e304:	bl	3c468 <__assert_fail@plt+0x299ec>
   3e308:	ldr	r1, [r6, #40]	; 0x28
   3e30c:	ldr	ip, [sp, #44]	; 0x2c
   3e310:	add	r0, r1, r0
   3e314:	str	r0, [r6, #40]	; 0x28
   3e318:	ldrb	r0, [ip, #4]
   3e31c:	ldrb	r1, [ip]
   3e320:	cmp	r0, #24
   3e324:	beq	3e36c <__assert_fail@plt+0x2b8f0>
   3e328:	cmp	r0, #2
   3e32c:	beq	3e3dc <__assert_fail@plt+0x2b960>
   3e330:	cmp	r1, #44	; 0x2c
   3e334:	beq	3e36c <__assert_fail@plt+0x2b8f0>
   3e338:	mvn	r2, #1
   3e33c:	cmp	r1, #48	; 0x30
   3e340:	bcc	3e2f4 <__assert_fail@plt+0x2b878>
   3e344:	cmp	r0, #1
   3e348:	bne	3e2f4 <__assert_fail@plt+0x2b878>
   3e34c:	cmn	r9, #2
   3e350:	beq	3e2f4 <__assert_fail@plt+0x2b878>
   3e354:	cmp	r1, #57	; 0x39
   3e358:	bhi	3e2f4 <__assert_fail@plt+0x2b878>
   3e35c:	cmn	r9, #1
   3e360:	bne	3e2dc <__assert_fail@plt+0x2b860>
   3e364:	sub	r2, r1, #48	; 0x30
   3e368:	b	3e2f4 <__assert_fail@plt+0x2b878>
   3e36c:	cmn	r9, #1
   3e370:	bne	3e3bc <__assert_fail@plt+0x2b940>
   3e374:	cmp	r1, #44	; 0x2c
   3e378:	moveq	r9, #0
   3e37c:	cmpeq	r0, #1
   3e380:	beq	3e414 <__assert_fail@plt+0x2b998>
   3e384:	ldr	r0, [sp, #16]
   3e388:	mov	r1, #10
   3e38c:	str	r1, [r0]
   3e390:	ldr	sl, [sp, #36]	; 0x24
   3e394:	mov	r7, #0
   3e398:	clz	r0, r7
   3e39c:	cmp	r7, #0
   3e3a0:	lsr	r0, r0, #5
   3e3a4:	bne	3ef60 <__assert_fail@plt+0x2c4e4>
   3e3a8:	ldr	r1, [sp, #16]
   3e3ac:	ldr	r1, [r1]
   3e3b0:	cmp	r1, #0
   3e3b4:	beq	3ef60 <__assert_fail@plt+0x2c4e4>
   3e3b8:	b	3f04c <__assert_fail@plt+0x2c5d0>
   3e3bc:	cmn	r9, #2
   3e3c0:	mov	r2, r9
   3e3c4:	beq	3e3dc <__assert_fail@plt+0x2b960>
   3e3c8:	cmp	r0, #24
   3e3cc:	beq	3e420 <__assert_fail@plt+0x2b9a4>
   3e3d0:	cmp	r0, #1
   3e3d4:	cmpeq	r1, #44	; 0x2c
   3e3d8:	beq	3e414 <__assert_fail@plt+0x2b998>
   3e3dc:	ldr	r1, [sp, #12]
   3e3e0:	cmp	r1, #0
   3e3e4:	beq	3eabc <__assert_fail@plt+0x2c040>
   3e3e8:	mov	r0, #1
   3e3ec:	str	r7, [r6, #40]	; 0x28
   3e3f0:	bfi	sl, r0, #0, #8
   3e3f4:	stm	ip, {r5, sl}
   3e3f8:	ldr	sl, [sp, #36]	; 0x24
   3e3fc:	mov	r7, sl
   3e400:	clz	r0, r7
   3e404:	cmp	r7, #0
   3e408:	lsr	r0, r0, #5
   3e40c:	beq	3e3a8 <__assert_fail@plt+0x2b92c>
   3e410:	b	3ef60 <__assert_fail@plt+0x2c4e4>
   3e414:	mvn	r2, #0
   3e418:	str	sl, [sp, #52]	; 0x34
   3e41c:	b	3e44c <__assert_fail@plt+0x2b9d0>
   3e420:	ldr	sl, [sp, #36]	; 0x24
   3e424:	mov	r5, r9
   3e428:	cmp	r0, #24
   3e42c:	beq	3e4f4 <__assert_fail@plt+0x2ba78>
   3e430:	b	3eb04 <__assert_fail@plt+0x2c088>
   3e434:	add	r0, sl, sl, lsl #2
   3e438:	add	r0, r1, r0, lsl #1
   3e43c:	movw	r1, #32816	; 0x8030
   3e440:	sub	r2, r0, #48	; 0x30
   3e444:	cmp	r0, r1
   3e448:	movwgt	r2, #32768	; 0x8000
   3e44c:	mov	sl, r2
   3e450:	ldr	r2, [sp, #40]	; 0x28
   3e454:	mov	r0, ip
   3e458:	mov	r1, r6
   3e45c:	bl	3c468 <__assert_fail@plt+0x299ec>
   3e460:	ldr	r1, [r6, #40]	; 0x28
   3e464:	ldr	ip, [sp, #44]	; 0x2c
   3e468:	add	r0, r1, r0
   3e46c:	str	r0, [r6, #40]	; 0x28
   3e470:	ldrb	r0, [ip, #4]
   3e474:	cmp	r0, #24
   3e478:	beq	3e4c4 <__assert_fail@plt+0x2ba48>
   3e47c:	cmp	r0, #2
   3e480:	beq	3eaac <__assert_fail@plt+0x2c030>
   3e484:	ldrb	r1, [ip]
   3e488:	cmp	r1, #44	; 0x2c
   3e48c:	beq	3e4c4 <__assert_fail@plt+0x2ba48>
   3e490:	mvn	r2, #1
   3e494:	cmp	r1, #48	; 0x30
   3e498:	bcc	3e44c <__assert_fail@plt+0x2b9d0>
   3e49c:	cmp	r0, #1
   3e4a0:	bne	3e44c <__assert_fail@plt+0x2b9d0>
   3e4a4:	cmn	sl, #2
   3e4a8:	beq	3e44c <__assert_fail@plt+0x2b9d0>
   3e4ac:	cmp	r1, #57	; 0x39
   3e4b0:	bhi	3e44c <__assert_fail@plt+0x2b9d0>
   3e4b4:	cmn	sl, #1
   3e4b8:	bne	3e434 <__assert_fail@plt+0x2b9b8>
   3e4bc:	sub	r2, r1, #48	; 0x30
   3e4c0:	b	3e44c <__assert_fail@plt+0x2b9d0>
   3e4c4:	cmn	sl, #2
   3e4c8:	beq	3eaac <__assert_fail@plt+0x2c030>
   3e4cc:	cmn	sl, #1
   3e4d0:	mov	r5, sl
   3e4d4:	beq	3e4e8 <__assert_fail@plt+0x2ba6c>
   3e4d8:	ldr	sl, [sp, #36]	; 0x24
   3e4dc:	cmp	r9, r5
   3e4e0:	ble	3e4ec <__assert_fail@plt+0x2ba70>
   3e4e4:	b	3eb04 <__assert_fail@plt+0x2c088>
   3e4e8:	ldr	sl, [sp, #36]	; 0x24
   3e4ec:	cmp	r0, #24
   3e4f0:	bne	3eb04 <__assert_fail@plt+0x2c088>
   3e4f4:	cmn	r5, #1
   3e4f8:	mov	r0, r5
   3e4fc:	moveq	r0, r9
   3e500:	cmp	r0, #32768	; 0x8000
   3e504:	bge	3eb10 <__assert_fail@plt+0x2c094>
   3e508:	ldr	r2, [sp, #40]	; 0x28
   3e50c:	mov	r0, ip
   3e510:	mov	r1, r6
   3e514:	bl	3c468 <__assert_fail@plt+0x299ec>
   3e518:	ldr	r1, [r6, #40]	; 0x28
   3e51c:	mov	r7, #0
   3e520:	cmp	sl, #0
   3e524:	add	r0, r1, r0
   3e528:	str	r0, [r6, #40]	; 0x28
   3e52c:	beq	3e998 <__assert_fail@plt+0x2bf1c>
   3e530:	ldr	lr, [sp, #20]
   3e534:	orrs	r0, r5, r9
   3e538:	beq	3e9b0 <__assert_fail@plt+0x2bf34>
   3e53c:	mov	r0, #0
   3e540:	cmp	r9, #1
   3e544:	mov	r7, sl
   3e548:	str	r0, [sp, #32]
   3e54c:	ldr	ip, [sp, #44]	; 0x2c
   3e550:	str	r5, [sp, #48]	; 0x30
   3e554:	bge	3ea58 <__assert_fail@plt+0x2bfdc>
   3e558:	ldrb	r0, [r7, #24]
   3e55c:	cmp	r0, #17
   3e560:	bne	3e5d0 <__assert_fail@plt+0x2bb54>
   3e564:	ldr	r0, [r7, #20]
   3e568:	mov	r2, r7
   3e56c:	mov	r1, r2
   3e570:	ldr	r2, [r2, #4]
   3e574:	cmp	r2, #0
   3e578:	bne	3e56c <__assert_fail@plt+0x2baf0>
   3e57c:	ldr	r2, [r1, #8]
   3e580:	cmp	r2, #0
   3e584:	bne	3e56c <__assert_fail@plt+0x2baf0>
   3e588:	ldr	r2, [r1, #24]
   3e58c:	uxtb	r3, r2
   3e590:	cmp	r3, #17
   3e594:	ldreq	r3, [r1, #20]
   3e598:	cmpeq	r3, r0
   3e59c:	orreq	r2, r2, #524288	; 0x80000
   3e5a0:	streq	r2, [r1, #24]
   3e5a4:	ldr	r3, [r1]
   3e5a8:	cmp	r3, #0
   3e5ac:	beq	3e5d0 <__assert_fail@plt+0x2bb54>
   3e5b0:	ldr	r2, [r3, #8]
   3e5b4:	cmp	r2, r1
   3e5b8:	mov	r1, r3
   3e5bc:	beq	3e588 <__assert_fail@plt+0x2bb0c>
   3e5c0:	cmp	r2, #0
   3e5c4:	mov	r1, r3
   3e5c8:	beq	3e588 <__assert_fail@plt+0x2bb0c>
   3e5cc:	b	3e56c <__assert_fail@plt+0x2baf0>
   3e5d0:	ldr	r1, [r8]
   3e5d4:	cmn	r5, #1
   3e5d8:	mov	r6, #10
   3e5dc:	movweq	r6, #11
   3e5e0:	cmp	r1, #31
   3e5e4:	beq	3ea78 <__assert_fail@plt+0x2bffc>
   3e5e8:	ldr	r0, [lr]
   3e5ec:	add	r2, r1, #1
   3e5f0:	add	sl, r0, r1, lsl #5
   3e5f4:	mvn	r0, #0
   3e5f8:	str	r2, [r8]
   3e5fc:	str	r4, [sl, #4]!
   3e600:	str	r7, [sl, #4]
   3e604:	str	r4, [sl, #8]
   3e608:	str	r4, [sl, #12]
   3e60c:	str	r4, [sl, #16]
   3e610:	str	r4, [sl, #20]
   3e614:	str	r6, [sl, #24]
   3e618:	str	r0, [sl, #28]
   3e61c:	add	r0, r9, #2
   3e620:	str	sl, [r7]
   3e624:	cmp	r0, r5
   3e628:	bgt	3e904 <__assert_fail@plt+0x2be88>
   3e62c:	mov	r6, sl
   3e630:	ldr	r1, [r8]
   3e634:	str	r0, [sp, #52]	; 0x34
   3e638:	cmp	r1, #31
   3e63c:	beq	3e848 <__assert_fail@plt+0x2bdcc>
   3e640:	ldr	r0, [lr]
   3e644:	add	r3, r1, #1
   3e648:	add	r9, r0, r1, lsl #5
   3e64c:	add	r2, r7, #20
   3e650:	sub	r5, fp, #80	; 0x50
   3e654:	str	r3, [r8]
   3e658:	str	r4, [r9, #4]!
   3e65c:	str	r4, [r9, #4]
   3e660:	str	r4, [r9, #8]
   3e664:	ldm	r2, {r0, r1}
   3e668:	mvn	r2, #0
   3e66c:	str	r4, [r9, #12]
   3e670:	str	r4, [r9, #16]
   3e674:	str	r2, [r9, #28]
   3e678:	str	r0, [r9, #20]
   3e67c:	bic	r0, r1, #786432	; 0xc0000
   3e680:	str	r0, [r9, #24]
   3e684:	mov	r0, r9
   3e688:	str	r9, [fp, #-80]	; 0xffffffb0
   3e68c:	b	3e6d0 <__assert_fail@plt+0x2bc54>
   3e690:	add	r3, r1, #1
   3e694:	add	r0, r0, r1, lsl #5
   3e698:	add	r2, r7, #20
   3e69c:	str	r3, [r8]
   3e6a0:	str	r4, [r0, #4]!
   3e6a4:	mvn	r3, #0
   3e6a8:	str	r4, [r0, #4]
   3e6ac:	str	r4, [r0, #8]
   3e6b0:	ldm	r2, {r1, r2}
   3e6b4:	str	r4, [r0, #12]
   3e6b8:	str	r4, [r0, #16]
   3e6bc:	str	r3, [r0, #28]
   3e6c0:	str	r1, [r0, #20]
   3e6c4:	bic	r1, r2, #786432	; 0xc0000
   3e6c8:	str	r1, [r0, #24]
   3e6cc:	str	r0, [r5]
   3e6d0:	str	sl, [r0]
   3e6d4:	ldr	r0, [r5]
   3e6d8:	ldr	r1, [r0, #24]
   3e6dc:	orr	r1, r1, #262144	; 0x40000
   3e6e0:	str	r1, [r0, #24]
   3e6e4:	ldr	r0, [r7, #4]
   3e6e8:	ldr	sl, [r5]
   3e6ec:	cmp	r0, #0
   3e6f0:	beq	3e710 <__assert_fail@plt+0x2bc94>
   3e6f4:	add	r5, sl, #4
   3e6f8:	mov	r7, r0
   3e6fc:	ldr	r1, [r8]
   3e700:	cmp	r1, #31
   3e704:	beq	3e750 <__assert_fail@plt+0x2bcd4>
   3e708:	ldr	r0, [lr]
   3e70c:	b	3e690 <__assert_fail@plt+0x2bc14>
   3e710:	mov	r1, #0
   3e714:	mov	r0, r7
   3e718:	ldr	r7, [r7, #8]
   3e71c:	cmp	r7, r1
   3e720:	cmpne	r7, #0
   3e724:	bne	3e740 <__assert_fail@plt+0x2bcc4>
   3e728:	ldr	r7, [r0]
   3e72c:	ldr	sl, [sl]
   3e730:	mov	r1, r0
   3e734:	cmp	r7, #0
   3e738:	bne	3e714 <__assert_fail@plt+0x2bc98>
   3e73c:	b	3e780 <__assert_fail@plt+0x2bd04>
   3e740:	add	r5, sl, #8
   3e744:	ldr	r1, [r8]
   3e748:	cmp	r1, #31
   3e74c:	bne	3e708 <__assert_fail@plt+0x2bc8c>
   3e750:	mov	r0, #996	; 0x3e4
   3e754:	bl	35608 <__assert_fail@plt+0x22b8c>
   3e758:	cmp	r0, #0
   3e75c:	beq	3e8b4 <__assert_fail@plt+0x2be38>
   3e760:	ldr	lr, [sp, #20]
   3e764:	ldr	ip, [sp, #44]	; 0x2c
   3e768:	ldr	r1, [lr]
   3e76c:	str	r1, [r0]
   3e770:	mov	r1, #0
   3e774:	str	r0, [lr]
   3e778:	str	r1, [r8]
   3e77c:	b	3e690 <__assert_fail@plt+0x2bc14>
   3e780:	mov	r7, r9
   3e784:	ldr	r1, [r8]
   3e788:	cmp	r1, #31
   3e78c:	beq	3e8d0 <__assert_fail@plt+0x2be54>
   3e790:	ldr	r0, [lr]
   3e794:	add	r2, r1, #1
   3e798:	add	r5, r0, r1, lsl #5
   3e79c:	mov	r0, #16
   3e7a0:	cmp	r7, #0
   3e7a4:	str	r2, [r8]
   3e7a8:	str	r4, [r5, #4]!
   3e7ac:	stmib	r5, {r6, r7}
   3e7b0:	str	r4, [r5, #12]
   3e7b4:	str	r4, [r5, #16]
   3e7b8:	str	r4, [r5, #20]
   3e7bc:	str	r0, [r5, #24]
   3e7c0:	mvn	r0, #0
   3e7c4:	str	r0, [r5, #28]
   3e7c8:	str	r5, [r6]
   3e7cc:	beq	3ef38 <__assert_fail@plt+0x2c4bc>
   3e7d0:	str	r5, [r7]
   3e7d4:	ldr	r1, [r8]
   3e7d8:	cmp	r1, #31
   3e7dc:	beq	3e878 <__assert_fail@plt+0x2bdfc>
   3e7e0:	ldr	r0, [lr]
   3e7e4:	add	r2, r1, #1
   3e7e8:	add	r6, r0, r1, lsl #5
   3e7ec:	mov	r0, #10
   3e7f0:	ldr	r1, [sp, #52]	; 0x34
   3e7f4:	str	r2, [r8]
   3e7f8:	str	r4, [r6, #4]!
   3e7fc:	str	r5, [r6, #4]
   3e800:	str	r4, [r6, #8]
   3e804:	str	r4, [r6, #12]
   3e808:	str	r4, [r6, #16]
   3e80c:	str	r4, [r6, #20]
   3e810:	str	r0, [r6, #24]
   3e814:	mvn	r0, #0
   3e818:	str	r0, [r6, #28]
   3e81c:	ldr	r0, [sp, #48]	; 0x30
   3e820:	str	r6, [r5]
   3e824:	cmp	r1, r0
   3e828:	bge	3e900 <__assert_fail@plt+0x2be84>
   3e82c:	ldr	sl, [r7]
   3e830:	mov	r0, r1
   3e834:	add	r0, r1, #1
   3e838:	ldr	r1, [r8]
   3e83c:	str	r0, [sp, #52]	; 0x34
   3e840:	cmp	r1, #31
   3e844:	bne	3e640 <__assert_fail@plt+0x2bbc4>
   3e848:	mov	r0, #996	; 0x3e4
   3e84c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3e850:	cmp	r0, #0
   3e854:	beq	3e8a8 <__assert_fail@plt+0x2be2c>
   3e858:	ldr	lr, [sp, #20]
   3e85c:	ldr	ip, [sp, #44]	; 0x2c
   3e860:	ldr	r1, [lr]
   3e864:	str	r1, [r0]
   3e868:	mov	r1, #0
   3e86c:	str	r0, [lr]
   3e870:	str	r1, [r8]
   3e874:	b	3e644 <__assert_fail@plt+0x2bbc8>
   3e878:	mov	r0, #996	; 0x3e4
   3e87c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3e880:	ldr	lr, [sp, #20]
   3e884:	ldr	ip, [sp, #44]	; 0x2c
   3e888:	cmp	r0, #0
   3e88c:	beq	3ef38 <__assert_fail@plt+0x2c4bc>
   3e890:	ldr	r1, [lr]
   3e894:	str	r1, [r0]
   3e898:	mov	r1, #0
   3e89c:	str	r0, [lr]
   3e8a0:	str	r1, [r8]
   3e8a4:	b	3e7e4 <__assert_fail@plt+0x2bd68>
   3e8a8:	mov	r7, #0
   3e8ac:	str	r7, [fp, #-80]	; 0xffffffb0
   3e8b0:	b	3e8bc <__assert_fail@plt+0x2be40>
   3e8b4:	mov	r7, #0
   3e8b8:	str	r7, [r5]
   3e8bc:	ldr	ip, [sp, #44]	; 0x2c
   3e8c0:	ldr	lr, [sp, #20]
   3e8c4:	ldr	r1, [r8]
   3e8c8:	cmp	r1, #31
   3e8cc:	bne	3e790 <__assert_fail@plt+0x2bd14>
   3e8d0:	mov	r0, #996	; 0x3e4
   3e8d4:	bl	35608 <__assert_fail@plt+0x22b8c>
   3e8d8:	ldr	lr, [sp, #20]
   3e8dc:	ldr	ip, [sp, #44]	; 0x2c
   3e8e0:	cmp	r0, #0
   3e8e4:	beq	3ef38 <__assert_fail@plt+0x2c4bc>
   3e8e8:	ldr	r1, [lr]
   3e8ec:	str	r1, [r0]
   3e8f0:	mov	r1, #0
   3e8f4:	str	r0, [lr]
   3e8f8:	str	r1, [r8]
   3e8fc:	b	3e794 <__assert_fail@plt+0x2bd18>
   3e900:	mov	sl, r6
   3e904:	ldr	r5, [sp, #32]
   3e908:	ldr	r6, [sp, #24]
   3e90c:	cmp	r5, #0
   3e910:	beq	3e980 <__assert_fail@plt+0x2bf04>
   3e914:	ldr	r1, [r8]
   3e918:	cmp	r1, #31
   3e91c:	beq	3ead4 <__assert_fail@plt+0x2c058>
   3e920:	ldr	r0, [lr]
   3e924:	add	r2, r1, #1
   3e928:	add	r7, r0, r1, lsl #5
   3e92c:	mov	r0, #0
   3e930:	mov	r1, #16
   3e934:	str	r2, [r8]
   3e938:	str	r0, [r7, #4]!
   3e93c:	stmib	r7, {r5, sl}
   3e940:	str	r0, [r7, #12]
   3e944:	str	r0, [r7, #16]
   3e948:	str	r0, [r7, #20]
   3e94c:	str	r1, [r7, #24]
   3e950:	mvn	r1, #0
   3e954:	str	r1, [r7, #28]
   3e958:	str	r7, [r5]
   3e95c:	str	r7, [sl]
   3e960:	ldr	r1, [sp, #28]
   3e964:	cmp	r1, #0
   3e968:	beq	3ef6c <__assert_fail@plt+0x2c4f0>
   3e96c:	ldrb	r1, [ip, #4]
   3e970:	cmp	r1, #23
   3e974:	cmpne	r1, #11
   3e978:	bne	3ef6c <__assert_fail@plt+0x2c4f0>
   3e97c:	b	3ef80 <__assert_fail@plt+0x2c504>
   3e980:	mov	r0, #0
   3e984:	mov	r7, sl
   3e988:	ldr	r1, [sp, #28]
   3e98c:	cmp	r1, #0
   3e990:	beq	3ef6c <__assert_fail@plt+0x2c4f0>
   3e994:	b	3e96c <__assert_fail@plt+0x2bef0>
   3e998:	ldr	ip, [sp, #44]	; 0x2c
   3e99c:	clz	r0, r7
   3e9a0:	cmp	r7, #0
   3e9a4:	lsr	r0, r0, #5
   3e9a8:	beq	3e3a8 <__assert_fail@plt+0x2b92c>
   3e9ac:	b	3ef60 <__assert_fail@plt+0x2c4e4>
   3e9b0:	ldr	ip, [sp, #44]	; 0x2c
   3e9b4:	mov	r0, sl
   3e9b8:	mov	r5, r0
   3e9bc:	ldr	r0, [r0, #4]
   3e9c0:	cmp	r0, #0
   3e9c4:	bne	3e9b8 <__assert_fail@plt+0x2bf3c>
   3e9c8:	ldr	r0, [r5, #8]
   3e9cc:	cmp	r0, #0
   3e9d0:	bne	3e9b8 <__assert_fail@plt+0x2bf3c>
   3e9d4:	ldr	r0, [r5, #24]
   3e9d8:	movw	r1, #255	; 0xff
   3e9dc:	movt	r1, #4
   3e9e0:	and	r0, r0, r1
   3e9e4:	cmp	r0, #3
   3e9e8:	beq	3ea20 <__assert_fail@plt+0x2bfa4>
   3e9ec:	cmp	r0, #6
   3e9f0:	bne	3ea2c <__assert_fail@plt+0x2bfb0>
   3e9f4:	ldr	r9, [r5, #20]
   3e9f8:	ldr	r0, [r9]
   3e9fc:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ea00:	ldr	r0, [r9, #4]
   3ea04:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ea08:	ldr	r0, [r9, #8]
   3ea0c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ea10:	ldr	r0, [r9, #12]
   3ea14:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ea18:	mov	r0, r9
   3ea1c:	b	3ea24 <__assert_fail@plt+0x2bfa8>
   3ea20:	ldr	r0, [r5, #20]
   3ea24:	bl	32c40 <__assert_fail@plt+0x201c4>
   3ea28:	ldr	ip, [sp, #44]	; 0x2c
   3ea2c:	ldr	r1, [r5]
   3ea30:	cmp	r1, #0
   3ea34:	beq	3ef50 <__assert_fail@plt+0x2c4d4>
   3ea38:	ldr	r0, [r1, #8]
   3ea3c:	cmp	r0, r5
   3ea40:	mov	r5, r1
   3ea44:	beq	3e9d4 <__assert_fail@plt+0x2bf58>
   3ea48:	cmp	r0, #0
   3ea4c:	mov	r5, r1
   3ea50:	beq	3e9d4 <__assert_fail@plt+0x2bf58>
   3ea54:	b	3e9b8 <__assert_fail@plt+0x2bf3c>
   3ea58:	mov	r5, sl
   3ea5c:	str	r9, [sp, #8]
   3ea60:	beq	3ed70 <__assert_fail@plt+0x2c2f4>
   3ea64:	ldr	r9, [sp, #36]	; 0x24
   3ea68:	mov	r0, #2
   3ea6c:	ldr	r5, [r9]
   3ea70:	mov	sl, r9
   3ea74:	b	3ebb0 <__assert_fail@plt+0x2c134>
   3ea78:	mov	r0, #996	; 0x3e4
   3ea7c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3ea80:	ldr	lr, [sp, #20]
   3ea84:	ldr	ip, [sp, #44]	; 0x2c
   3ea88:	cmp	r0, #0
   3ea8c:	beq	3ef38 <__assert_fail@plt+0x2c4bc>
   3ea90:	ldr	r1, [lr]
   3ea94:	ldr	r5, [sp, #48]	; 0x30
   3ea98:	str	r1, [r0]
   3ea9c:	mov	r1, #0
   3eaa0:	str	r0, [lr]
   3eaa4:	str	r1, [r8]
   3eaa8:	b	3e5ec <__assert_fail@plt+0x2bb70>
   3eaac:	ldr	sl, [sp, #52]	; 0x34
   3eab0:	ldr	r1, [sp, #12]
   3eab4:	cmp	r1, #0
   3eab8:	bne	3e3e8 <__assert_fail@plt+0x2b96c>
   3eabc:	ldr	r1, [sp, #16]
   3eac0:	cmp	r0, #2
   3eac4:	mov	r0, #10
   3eac8:	movweq	r0, #9
   3eacc:	str	r0, [r1]
   3ead0:	b	3e390 <__assert_fail@plt+0x2b914>
   3ead4:	mov	r0, #996	; 0x3e4
   3ead8:	bl	35608 <__assert_fail@plt+0x22b8c>
   3eadc:	cmp	r0, #0
   3eae0:	beq	3eb20 <__assert_fail@plt+0x2c0a4>
   3eae4:	ldr	r2, [sp, #20]
   3eae8:	ldr	ip, [sp, #44]	; 0x2c
   3eaec:	ldr	r1, [r2]
   3eaf0:	str	r1, [r0]
   3eaf4:	mov	r1, #0
   3eaf8:	str	r0, [r2]
   3eafc:	str	r1, [r8]
   3eb00:	b	3e924 <__assert_fail@plt+0x2bea8>
   3eb04:	ldr	r0, [sp, #16]
   3eb08:	mov	r1, #10
   3eb0c:	b	3eb18 <__assert_fail@plt+0x2c09c>
   3eb10:	ldr	r0, [sp, #16]
   3eb14:	mov	r1, #15
   3eb18:	str	r1, [r0]
   3eb1c:	b	3e394 <__assert_fail@plt+0x2b918>
   3eb20:	ldr	ip, [sp, #44]	; 0x2c
   3eb24:	b	3e390 <__assert_fail@plt+0x2b914>
   3eb28:	mov	r0, #996	; 0x3e4
   3eb2c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3eb30:	cmp	r0, #0
   3eb34:	beq	3eb58 <__assert_fail@plt+0x2c0dc>
   3eb38:	ldr	lr, [sp, #20]
   3eb3c:	ldr	ip, [sp, #44]	; 0x2c
   3eb40:	ldr	r1, [lr]
   3eb44:	str	r1, [r0]
   3eb48:	mov	r1, #0
   3eb4c:	str	r0, [lr]
   3eb50:	str	r1, [r8]
   3eb54:	b	3ebc4 <__assert_fail@plt+0x2c148>
   3eb58:	mov	sl, #0
   3eb5c:	str	sl, [fp, #-80]	; 0xffffffb0
   3eb60:	b	3eb6c <__assert_fail@plt+0x2c0f0>
   3eb64:	mov	sl, #0
   3eb68:	str	sl, [r6]
   3eb6c:	ldr	ip, [sp, #44]	; 0x2c
   3eb70:	ldr	lr, [sp, #20]
   3eb74:	ldr	r1, [r8]
   3eb78:	cmp	r1, #31
   3eb7c:	bne	3ed10 <__assert_fail@plt+0x2c294>
   3eb80:	mov	r0, #996	; 0x3e4
   3eb84:	bl	35608 <__assert_fail@plt+0x22b8c>
   3eb88:	ldr	lr, [sp, #20]
   3eb8c:	ldr	ip, [sp, #44]	; 0x2c
   3eb90:	cmp	r0, #0
   3eb94:	beq	3ef38 <__assert_fail@plt+0x2c4bc>
   3eb98:	ldr	r1, [lr]
   3eb9c:	str	r1, [r0]
   3eba0:	mov	r1, #0
   3eba4:	str	r0, [lr]
   3eba8:	str	r1, [r8]
   3ebac:	b	3ed14 <__assert_fail@plt+0x2c298>
   3ebb0:	ldr	r1, [r8]
   3ebb4:	str	r0, [sp, #52]	; 0x34
   3ebb8:	cmp	r1, #31
   3ebbc:	beq	3eb28 <__assert_fail@plt+0x2c0ac>
   3ebc0:	ldr	r0, [lr]
   3ebc4:	add	r3, r1, #1
   3ebc8:	add	r7, r0, r1, lsl #5
   3ebcc:	add	r2, sl, #20
   3ebd0:	sub	r6, fp, #80	; 0x50
   3ebd4:	str	r3, [r8]
   3ebd8:	str	r4, [r7, #4]!
   3ebdc:	str	r4, [r7, #4]
   3ebe0:	str	r4, [r7, #8]
   3ebe4:	ldm	r2, {r0, r1}
   3ebe8:	mvn	r2, #0
   3ebec:	str	r4, [r7, #12]
   3ebf0:	str	r4, [r7, #16]
   3ebf4:	str	r2, [r7, #28]
   3ebf8:	str	r0, [r7, #20]
   3ebfc:	bic	r0, r1, #786432	; 0xc0000
   3ec00:	str	r0, [r7, #24]
   3ec04:	mov	r0, r7
   3ec08:	str	r7, [fp, #-80]	; 0xffffffb0
   3ec0c:	b	3ec50 <__assert_fail@plt+0x2c1d4>
   3ec10:	add	r3, r1, #1
   3ec14:	add	r0, r0, r1, lsl #5
   3ec18:	add	r2, sl, #20
   3ec1c:	str	r3, [r8]
   3ec20:	str	r4, [r0, #4]!
   3ec24:	mvn	r3, #0
   3ec28:	str	r4, [r0, #4]
   3ec2c:	str	r4, [r0, #8]
   3ec30:	ldm	r2, {r1, r2}
   3ec34:	str	r4, [r0, #12]
   3ec38:	str	r4, [r0, #16]
   3ec3c:	str	r3, [r0, #28]
   3ec40:	str	r1, [r0, #20]
   3ec44:	bic	r1, r2, #786432	; 0xc0000
   3ec48:	str	r1, [r0, #24]
   3ec4c:	str	r0, [r6]
   3ec50:	str	r5, [r0]
   3ec54:	ldr	r0, [r6]
   3ec58:	ldr	r1, [r0, #24]
   3ec5c:	orr	r1, r1, #262144	; 0x40000
   3ec60:	str	r1, [r0, #24]
   3ec64:	ldr	r0, [sl, #4]
   3ec68:	ldr	r5, [r6]
   3ec6c:	cmp	r0, #0
   3ec70:	beq	3ec90 <__assert_fail@plt+0x2c214>
   3ec74:	add	r6, r5, #4
   3ec78:	mov	sl, r0
   3ec7c:	ldr	r1, [r8]
   3ec80:	cmp	r1, #31
   3ec84:	beq	3ecd0 <__assert_fail@plt+0x2c254>
   3ec88:	ldr	r0, [lr]
   3ec8c:	b	3ec10 <__assert_fail@plt+0x2c194>
   3ec90:	mov	r1, #0
   3ec94:	mov	r0, sl
   3ec98:	ldr	sl, [sl, #8]
   3ec9c:	cmp	sl, r1
   3eca0:	cmpne	sl, #0
   3eca4:	bne	3ecc0 <__assert_fail@plt+0x2c244>
   3eca8:	ldr	sl, [r0]
   3ecac:	ldr	r5, [r5]
   3ecb0:	mov	r1, r0
   3ecb4:	cmp	sl, #0
   3ecb8:	bne	3ec94 <__assert_fail@plt+0x2c218>
   3ecbc:	b	3ed00 <__assert_fail@plt+0x2c284>
   3ecc0:	add	r6, r5, #8
   3ecc4:	ldr	r1, [r8]
   3ecc8:	cmp	r1, #31
   3eccc:	bne	3ec88 <__assert_fail@plt+0x2c20c>
   3ecd0:	mov	r0, #996	; 0x3e4
   3ecd4:	bl	35608 <__assert_fail@plt+0x22b8c>
   3ecd8:	cmp	r0, #0
   3ecdc:	beq	3eb64 <__assert_fail@plt+0x2c0e8>
   3ece0:	ldr	lr, [sp, #20]
   3ece4:	ldr	ip, [sp, #44]	; 0x2c
   3ece8:	ldr	r1, [lr]
   3ecec:	str	r1, [r0]
   3ecf0:	mov	r1, #0
   3ecf4:	str	r0, [lr]
   3ecf8:	str	r1, [r8]
   3ecfc:	b	3ec10 <__assert_fail@plt+0x2c194>
   3ed00:	mov	sl, r7
   3ed04:	ldr	r1, [r8]
   3ed08:	cmp	r1, #31
   3ed0c:	beq	3eb80 <__assert_fail@plt+0x2c104>
   3ed10:	ldr	r0, [lr]
   3ed14:	add	r2, r1, #1
   3ed18:	add	r1, r0, r1, lsl #5
   3ed1c:	mov	r0, #16
   3ed20:	cmp	sl, #0
   3ed24:	str	r2, [r8]
   3ed28:	str	r4, [r1, #4]!
   3ed2c:	stmib	r1, {r9, sl}
   3ed30:	str	r4, [r1, #12]
   3ed34:	str	r4, [r1, #16]
   3ed38:	str	r4, [r1, #20]
   3ed3c:	str	r0, [r1, #24]
   3ed40:	mvn	r0, #0
   3ed44:	str	r0, [r1, #28]
   3ed48:	str	r1, [r9]
   3ed4c:	beq	3ef38 <__assert_fail@plt+0x2c4bc>
   3ed50:	mov	r5, r1
   3ed54:	str	r1, [sl]
   3ed58:	ldr	r2, [sp, #52]	; 0x34
   3ed5c:	ldr	r1, [sp, #8]
   3ed60:	mov	r9, r5
   3ed64:	add	r0, r2, #1
   3ed68:	cmp	r2, r1
   3ed6c:	blt	3ebb0 <__assert_fail@plt+0x2c134>
   3ed70:	ldr	r1, [sp, #48]	; 0x30
   3ed74:	ldr	r2, [sp, #8]
   3ed78:	mov	r0, #0
   3ed7c:	cmp	r2, r1
   3ed80:	bne	3ed9c <__assert_fail@plt+0x2c320>
   3ed84:	ldr	r6, [sp, #24]
   3ed88:	mov	r7, r5
   3ed8c:	ldr	r1, [sp, #28]
   3ed90:	cmp	r1, #0
   3ed94:	beq	3ef6c <__assert_fail@plt+0x2c4f0>
   3ed98:	b	3e96c <__assert_fail@plt+0x2bef0>
   3ed9c:	mov	r9, sl
   3eda0:	ldr	r1, [r8]
   3eda4:	str	r5, [sp, #32]
   3eda8:	ldr	r6, [r9], #20
   3edac:	cmp	r1, #31
   3edb0:	beq	3eef8 <__assert_fail@plt+0x2c47c>
   3edb4:	ldr	r0, [lr]
   3edb8:	add	r2, r1, #1
   3edbc:	add	r7, r0, r1, lsl #5
   3edc0:	str	r2, [r8]
   3edc4:	str	r4, [r7, #4]!
   3edc8:	mvn	r2, #0
   3edcc:	str	r4, [r7, #4]
   3edd0:	str	r4, [r7, #8]
   3edd4:	ldm	r9, {r0, r1}
   3edd8:	str	r4, [r7, #12]
   3eddc:	str	r4, [r7, #16]
   3ede0:	str	r2, [r7, #28]
   3ede4:	sub	r9, fp, #80	; 0x50
   3ede8:	str	r0, [r7, #20]
   3edec:	bic	r0, r1, #786432	; 0xc0000
   3edf0:	str	r0, [r7, #24]
   3edf4:	mov	r0, r7
   3edf8:	str	r7, [fp, #-80]	; 0xffffffb0
   3edfc:	b	3ee40 <__assert_fail@plt+0x2c3c4>
   3ee00:	add	r3, r1, #1
   3ee04:	add	r0, r0, r1, lsl #5
   3ee08:	add	r2, sl, #20
   3ee0c:	str	r3, [r8]
   3ee10:	str	r4, [r0, #4]!
   3ee14:	mvn	r3, #0
   3ee18:	str	r4, [r0, #4]
   3ee1c:	str	r4, [r0, #8]
   3ee20:	ldm	r2, {r1, r2}
   3ee24:	str	r4, [r0, #12]
   3ee28:	str	r4, [r0, #16]
   3ee2c:	str	r3, [r0, #28]
   3ee30:	str	r1, [r0, #20]
   3ee34:	bic	r1, r2, #786432	; 0xc0000
   3ee38:	str	r1, [r0, #24]
   3ee3c:	str	r0, [r9]
   3ee40:	str	r6, [r0]
   3ee44:	ldr	r0, [r9]
   3ee48:	ldr	r1, [r0, #24]
   3ee4c:	orr	r1, r1, #262144	; 0x40000
   3ee50:	str	r1, [r0, #24]
   3ee54:	ldr	r0, [sl, #4]
   3ee58:	ldr	r6, [r9]
   3ee5c:	cmp	r0, #0
   3ee60:	beq	3ee80 <__assert_fail@plt+0x2c404>
   3ee64:	add	r9, r6, #4
   3ee68:	mov	sl, r0
   3ee6c:	ldr	r1, [r8]
   3ee70:	cmp	r1, #31
   3ee74:	beq	3eec8 <__assert_fail@plt+0x2c44c>
   3ee78:	ldr	r0, [lr]
   3ee7c:	b	3ee00 <__assert_fail@plt+0x2c384>
   3ee80:	ldr	r5, [sp, #48]	; 0x30
   3ee84:	ldr	r9, [sp, #8]
   3ee88:	mov	r1, #0
   3ee8c:	mov	r0, sl
   3ee90:	ldr	sl, [sl, #8]
   3ee94:	cmp	sl, r1
   3ee98:	cmpne	sl, #0
   3ee9c:	bne	3eeb8 <__assert_fail@plt+0x2c43c>
   3eea0:	ldr	sl, [r0]
   3eea4:	ldr	r6, [r6]
   3eea8:	mov	r1, r0
   3eeac:	cmp	sl, #0
   3eeb0:	bne	3ee8c <__assert_fail@plt+0x2c410>
   3eeb4:	b	3e558 <__assert_fail@plt+0x2badc>
   3eeb8:	add	r9, r6, #8
   3eebc:	ldr	r1, [r8]
   3eec0:	cmp	r1, #31
   3eec4:	bne	3ee78 <__assert_fail@plt+0x2c3fc>
   3eec8:	mov	r0, #996	; 0x3e4
   3eecc:	bl	35608 <__assert_fail@plt+0x22b8c>
   3eed0:	cmp	r0, #0
   3eed4:	beq	3ef30 <__assert_fail@plt+0x2c4b4>
   3eed8:	ldr	lr, [sp, #20]
   3eedc:	ldr	ip, [sp, #44]	; 0x2c
   3eee0:	ldr	r1, [lr]
   3eee4:	str	r1, [r0]
   3eee8:	mov	r1, #0
   3eeec:	str	r0, [lr]
   3eef0:	str	r1, [r8]
   3eef4:	b	3ee00 <__assert_fail@plt+0x2c384>
   3eef8:	mov	r0, #996	; 0x3e4
   3eefc:	bl	35608 <__assert_fail@plt+0x22b8c>
   3ef00:	cmp	r0, #0
   3ef04:	beq	3ef28 <__assert_fail@plt+0x2c4ac>
   3ef08:	ldr	lr, [sp, #20]
   3ef0c:	ldr	ip, [sp, #44]	; 0x2c
   3ef10:	ldr	r1, [lr]
   3ef14:	str	r1, [r0]
   3ef18:	mov	r1, #0
   3ef1c:	str	r0, [lr]
   3ef20:	str	r1, [r8]
   3ef24:	b	3edb8 <__assert_fail@plt+0x2c33c>
   3ef28:	str	r4, [fp, #-80]	; 0xffffffb0
   3ef2c:	b	3ef34 <__assert_fail@plt+0x2c4b8>
   3ef30:	str	r4, [r9]
   3ef34:	ldr	ip, [sp, #44]	; 0x2c
   3ef38:	ldr	r0, [sp, #16]
   3ef3c:	ldr	r6, [sp, #24]
   3ef40:	ldr	sl, [sp, #36]	; 0x24
   3ef44:	mov	r1, #12
   3ef48:	mov	r7, #0
   3ef4c:	str	r1, [r0]
   3ef50:	clz	r0, r7
   3ef54:	cmp	r7, #0
   3ef58:	lsr	r0, r0, #5
   3ef5c:	beq	3e3a8 <__assert_fail@plt+0x2b92c>
   3ef60:	ldr	r1, [sp, #28]
   3ef64:	cmp	r1, #0
   3ef68:	bne	3e96c <__assert_fail@plt+0x2bef0>
   3ef6c:	ldrb	r0, [ip, #4]
   3ef70:	mov	sl, r7
   3ef74:	cmp	r0, #23
   3ef78:	bls	3e290 <__assert_fail@plt+0x2b814>
   3ef7c:	b	3f034 <__assert_fail@plt+0x2c5b8>
   3ef80:	ldr	r8, [sp, #16]
   3ef84:	movw	r6, #255	; 0xff
   3ef88:	cmp	r0, #0
   3ef8c:	movt	r6, #4
   3ef90:	bne	3f028 <__assert_fail@plt+0x2c5ac>
   3ef94:	mov	r5, r7
   3ef98:	ldr	r7, [r7, #4]
   3ef9c:	cmp	r7, #0
   3efa0:	bne	3ef94 <__assert_fail@plt+0x2c518>
   3efa4:	ldr	r7, [r5, #8]
   3efa8:	cmp	r7, #0
   3efac:	bne	3ef94 <__assert_fail@plt+0x2c518>
   3efb0:	ldr	r0, [r5, #24]
   3efb4:	and	r0, r0, r6
   3efb8:	cmp	r0, #3
   3efbc:	beq	3eff4 <__assert_fail@plt+0x2c578>
   3efc0:	cmp	r0, #6
   3efc4:	bne	3effc <__assert_fail@plt+0x2c580>
   3efc8:	ldr	r4, [r5, #20]
   3efcc:	ldr	r0, [r4]
   3efd0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3efd4:	ldr	r0, [r4, #4]
   3efd8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3efdc:	ldr	r0, [r4, #8]
   3efe0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3efe4:	ldr	r0, [r4, #12]
   3efe8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3efec:	mov	r0, r4
   3eff0:	b	3eff8 <__assert_fail@plt+0x2c57c>
   3eff4:	ldr	r0, [r5, #20]
   3eff8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3effc:	ldr	r0, [r5]
   3f000:	cmp	r0, #0
   3f004:	beq	3f028 <__assert_fail@plt+0x2c5ac>
   3f008:	ldr	r7, [r0, #8]
   3f00c:	cmp	r7, r5
   3f010:	mov	r5, r0
   3f014:	beq	3efb0 <__assert_fail@plt+0x2c534>
   3f018:	cmp	r7, #0
   3f01c:	mov	r5, r0
   3f020:	beq	3efb0 <__assert_fail@plt+0x2c534>
   3f024:	b	3ef94 <__assert_fail@plt+0x2c518>
   3f028:	mov	r0, #13
   3f02c:	mov	sl, #0
   3f030:	str	r0, [r8]
   3f034:	mov	r0, sl
   3f038:	sub	sp, fp, #28
   3f03c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f040:	mov	r7, r4
   3f044:	mov	r6, r9
   3f048:	b	3e240 <__assert_fail@plt+0x2b7c4>
   3f04c:	cmp	sl, #0
   3f050:	beq	3f100 <__assert_fail@plt+0x2c684>
   3f054:	movw	r6, #255	; 0xff
   3f058:	movt	r6, #4
   3f05c:	mov	r5, sl
   3f060:	ldr	sl, [sl, #4]
   3f064:	cmp	sl, #0
   3f068:	bne	3f05c <__assert_fail@plt+0x2c5e0>
   3f06c:	ldr	sl, [r5, #8]
   3f070:	cmp	sl, #0
   3f074:	bne	3f05c <__assert_fail@plt+0x2c5e0>
   3f078:	ldr	r0, [r5, #24]
   3f07c:	and	r0, r0, r6
   3f080:	cmp	r0, #3
   3f084:	beq	3f0bc <__assert_fail@plt+0x2c640>
   3f088:	cmp	r0, #6
   3f08c:	bne	3f0c4 <__assert_fail@plt+0x2c648>
   3f090:	ldr	r4, [r5, #20]
   3f094:	ldr	r0, [r4]
   3f098:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f09c:	ldr	r0, [r4, #4]
   3f0a0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f0a4:	ldr	r0, [r4, #8]
   3f0a8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f0ac:	ldr	r0, [r4, #12]
   3f0b0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f0b4:	mov	r0, r4
   3f0b8:	b	3f0c0 <__assert_fail@plt+0x2c644>
   3f0bc:	ldr	r0, [r5, #20]
   3f0c0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f0c4:	ldr	r0, [r5]
   3f0c8:	cmp	r0, #0
   3f0cc:	beq	3f0f0 <__assert_fail@plt+0x2c674>
   3f0d0:	ldr	sl, [r0, #8]
   3f0d4:	cmp	sl, r5
   3f0d8:	mov	r5, r0
   3f0dc:	beq	3f078 <__assert_fail@plt+0x2c5fc>
   3f0e0:	cmp	sl, #0
   3f0e4:	mov	r5, r0
   3f0e8:	beq	3f078 <__assert_fail@plt+0x2c5fc>
   3f0ec:	b	3f05c <__assert_fail@plt+0x2c5e0>
   3f0f0:	mov	sl, #0
   3f0f4:	mov	r0, sl
   3f0f8:	sub	sp, fp, #28
   3f0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f100:	mov	sl, #0
   3f104:	mov	r0, sl
   3f108:	sub	sp, fp, #28
   3f10c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f110:	cmp	r0, #2
   3f114:	blt	3f130 <__assert_fail@plt+0x2c6b4>
   3f118:	ldr	r0, [sl, #36]	; 0x24
   3f11c:	cmp	r0, #0
   3f120:	bne	3ded8 <__assert_fail@plt+0x2b45c>
   3f124:	ldrb	r0, [sl, #16]
   3f128:	tst	r0, #1
   3f12c:	bne	3ded8 <__assert_fail@plt+0x2b45c>
   3f130:	ldr	r0, [sl]
   3f134:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f138:	ldr	r0, [sl, #4]
   3f13c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f140:	ldr	r0, [sl, #8]
   3f144:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f148:	ldr	r0, [sl, #12]
   3f14c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f150:	mov	r0, sl
   3f154:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f158:	ldr	r1, [r8, #64]	; 0x40
   3f15c:	cmp	r1, #31
   3f160:	beq	3f658 <__assert_fail@plt+0x2cbdc>
   3f164:	ldr	r0, [r8, #56]	; 0x38
   3f168:	add	r2, r1, #1
   3f16c:	add	r0, r0, r1, lsl #5
   3f170:	ldr	lr, [sp, #44]	; 0x2c
   3f174:	mov	r1, #3
   3f178:	vmov.i32	q8, #0	; 0x00000000
   3f17c:	str	r2, [r8, #64]	; 0x40
   3f180:	mov	r2, #0
   3f184:	add	r7, r0, #4
   3f188:	str	r2, [r0, #20]
   3f18c:	str	r4, [r0, #24]
   3f190:	str	r1, [r0, #28]
   3f194:	mov	r0, #28
   3f198:	mov	r1, r7
   3f19c:	vst1.32	{d16-d17}, [r1], r0
   3f1a0:	mvn	r0, #0
   3f1a4:	str	r0, [r1]
   3f1a8:	b	3e240 <__assert_fail@plt+0x2b7c4>
   3f1ac:	mov	r0, #996	; 0x3e4
   3f1b0:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f1b4:	cmp	r0, #0
   3f1b8:	beq	3f490 <__assert_fail@plt+0x2ca14>
   3f1bc:	ldr	r1, [r8, #56]	; 0x38
   3f1c0:	ldr	lr, [sp, #44]	; 0x2c
   3f1c4:	str	r1, [r0]
   3f1c8:	mov	r1, #0
   3f1cc:	str	r1, [r8, #64]	; 0x40
   3f1d0:	str	r0, [r8, #56]	; 0x38
   3f1d4:	b	3d2c8 <__assert_fail@plt+0x2a84c>
   3f1d8:	mov	r9, r0
   3f1dc:	b	3f298 <__assert_fail@plt+0x2c81c>
   3f1e0:	mov	r9, #7
   3f1e4:	b	3f298 <__assert_fail@plt+0x2c81c>
   3f1e8:	mov	r0, #2
   3f1ec:	b	3f690 <__assert_fail@plt+0x2cc14>
   3f1f0:	mov	r0, #6
   3f1f4:	b	3e134 <__assert_fail@plt+0x2b6b8>
   3f1f8:	mov	r0, #996	; 0x3e4
   3f1fc:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f200:	cmp	r0, #0
   3f204:	beq	3f490 <__assert_fail@plt+0x2ca14>
   3f208:	ldr	r1, [r8, #56]	; 0x38
   3f20c:	ldr	lr, [sp, #44]	; 0x2c
   3f210:	str	r1, [r0]
   3f214:	mov	r1, #0
   3f218:	str	r1, [r8, #64]	; 0x40
   3f21c:	str	r0, [r8, #56]	; 0x38
   3f220:	b	3d3a0 <__assert_fail@plt+0x2a924>
   3f224:	mov	r0, #996	; 0x3e4
   3f228:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f22c:	cmp	r0, #0
   3f230:	beq	3f490 <__assert_fail@plt+0x2ca14>
   3f234:	ldr	r1, [r8, #56]	; 0x38
   3f238:	ldr	r3, [sp, #24]
   3f23c:	ldr	lr, [sp, #44]	; 0x2c
   3f240:	str	r1, [r0]
   3f244:	mov	r1, #0
   3f248:	str	r1, [r8, #64]	; 0x40
   3f24c:	str	r0, [r8, #56]	; 0x38
   3f250:	b	3d564 <__assert_fail@plt+0x2aae8>
   3f254:	mov	r0, r4
   3f258:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f25c:	mov	r0, r5
   3f260:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f264:	b	3e130 <__assert_fail@plt+0x2b6b4>
   3f268:	mov	r0, #996	; 0x3e4
   3f26c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f270:	cmp	r0, #0
   3f274:	beq	3f490 <__assert_fail@plt+0x2ca14>
   3f278:	ldr	r1, [r8, #56]	; 0x38
   3f27c:	ldr	lr, [sp, #44]	; 0x2c
   3f280:	str	r1, [r0]
   3f284:	mov	r1, #0
   3f288:	str	r1, [r8, #64]	; 0x40
   3f28c:	str	r0, [r8, #56]	; 0x38
   3f290:	b	3d344 <__assert_fail@plt+0x2a8c8>
   3f294:	mov	r9, #3
   3f298:	ldr	r0, [sp, #16]
   3f29c:	ldr	r4, [sp, #52]	; 0x34
   3f2a0:	ldr	sl, [sp, #48]	; 0x30
   3f2a4:	str	r9, [r0]
   3f2a8:	ldr	r6, [sp, #40]	; 0x28
   3f2ac:	mov	r0, r4
   3f2b0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f2b4:	ldr	r0, [sl]
   3f2b8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f2bc:	ldr	r0, [sl, #4]
   3f2c0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f2c4:	ldr	r0, [sl, #8]
   3f2c8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f2cc:	ldr	r0, [sl, #12]
   3f2d0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f2d4:	mov	r0, sl
   3f2d8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f2dc:	ldr	r0, [sp, #16]
   3f2e0:	mov	r7, #0
   3f2e4:	mov	sl, #0
   3f2e8:	ldr	r0, [r0]
   3f2ec:	cmp	r0, #0
   3f2f0:	ldr	lr, [sp, #44]	; 0x2c
   3f2f4:	beq	3e240 <__assert_fail@plt+0x2b7c4>
   3f2f8:	b	3f034 <__assert_fail@plt+0x2c5b8>
   3f2fc:	mov	r0, #996	; 0x3e4
   3f300:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f304:	cmp	r0, #0
   3f308:	beq	3f68c <__assert_fail@plt+0x2cc10>
   3f30c:	ldr	r1, [r8, #56]	; 0x38
   3f310:	ldr	lr, [sp, #44]	; 0x2c
   3f314:	str	r1, [r0]
   3f318:	mov	r1, #0
   3f31c:	str	r1, [r8, #64]	; 0x40
   3f320:	str	r0, [r8, #56]	; 0x38
   3f324:	b	3def4 <__assert_fail@plt+0x2b478>
   3f328:	mov	r0, #996	; 0x3e4
   3f32c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f330:	cmp	r0, #0
   3f334:	beq	3f68c <__assert_fail@plt+0x2cc10>
   3f338:	ldr	r1, [r8, #56]	; 0x38
   3f33c:	ldr	lr, [sp, #44]	; 0x2c
   3f340:	str	r1, [r0]
   3f344:	mov	r1, #0
   3f348:	str	r1, [r8, #64]	; 0x40
   3f34c:	str	r0, [r8, #56]	; 0x38
   3f350:	b	3dfa0 <__assert_fail@plt+0x2b524>
   3f354:	mov	r0, #996	; 0x3e4
   3f358:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f35c:	cmp	r0, #0
   3f360:	beq	3f68c <__assert_fail@plt+0x2cc10>
   3f364:	ldr	r1, [r8, #56]	; 0x38
   3f368:	ldr	lr, [sp, #44]	; 0x2c
   3f36c:	str	r1, [r0]
   3f370:	mov	r1, #0
   3f374:	str	r1, [r8, #64]	; 0x40
   3f378:	str	r0, [r8, #56]	; 0x38
   3f37c:	b	3dfec <__assert_fail@plt+0x2b570>
   3f380:	mov	r0, #996	; 0x3e4
   3f384:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f388:	cmp	r0, #0
   3f38c:	beq	3f490 <__assert_fail@plt+0x2ca14>
   3f390:	ldr	r1, [r8, #56]	; 0x38
   3f394:	ldr	lr, [sp, #44]	; 0x2c
   3f398:	mov	r6, sl
   3f39c:	str	r1, [r0]
   3f3a0:	mov	r1, #0
   3f3a4:	str	r1, [r8, #64]	; 0x40
   3f3a8:	str	r0, [r8, #56]	; 0x38
   3f3ac:	b	3e1fc <__assert_fail@plt+0x2b780>
   3f3b0:	mov	r0, r4
   3f3b4:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f3b8:	ldr	lr, [sp, #44]	; 0x2c
   3f3bc:	mov	r7, r9
   3f3c0:	b	3e240 <__assert_fail@plt+0x2b7c4>
   3f3c4:	mov	r0, #996	; 0x3e4
   3f3c8:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f3cc:	cmp	r0, #0
   3f3d0:	beq	3f540 <__assert_fail@plt+0x2cac4>
   3f3d4:	ldr	r1, [r8, #56]	; 0x38
   3f3d8:	ldr	r7, [sp, #24]
   3f3dc:	ldr	lr, [sp, #44]	; 0x2c
   3f3e0:	mov	sl, #0
   3f3e4:	str	r1, [r0]
   3f3e8:	mov	r1, #0
   3f3ec:	str	r1, [r8, #64]	; 0x40
   3f3f0:	str	r0, [r8, #56]	; 0x38
   3f3f4:	b	3e09c <__assert_fail@plt+0x2b620>
   3f3f8:	mov	r0, #996	; 0x3e4
   3f3fc:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f400:	cmp	r0, #0
   3f404:	beq	3f634 <__assert_fail@plt+0x2cbb8>
   3f408:	ldr	r1, [r8, #56]	; 0x38
   3f40c:	ldr	r7, [sp, #24]
   3f410:	ldr	lr, [sp, #44]	; 0x2c
   3f414:	mov	sl, #0
   3f418:	str	r1, [r0]
   3f41c:	mov	r1, #0
   3f420:	str	r1, [r8, #64]	; 0x40
   3f424:	str	r0, [r8, #56]	; 0x38
   3f428:	b	3d50c <__assert_fail@plt+0x2aa90>
   3f42c:	mov	r0, #996	; 0x3e4
   3f430:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f434:	cmp	r0, #0
   3f438:	beq	3f640 <__assert_fail@plt+0x2cbc4>
   3f43c:	ldr	r1, [r8, #56]	; 0x38
   3f440:	ldr	r7, [sp, #24]
   3f444:	ldr	lr, [sp, #44]	; 0x2c
   3f448:	mov	sl, #0
   3f44c:	str	r1, [r0]
   3f450:	mov	r1, #0
   3f454:	str	r1, [r8, #64]	; 0x40
   3f458:	str	r0, [r8, #56]	; 0x38
   3f45c:	b	3e044 <__assert_fail@plt+0x2b5c8>
   3f460:	mov	r0, #996	; 0x3e4
   3f464:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f468:	cmp	r0, #0
   3f46c:	beq	3f490 <__assert_fail@plt+0x2ca14>
   3f470:	ldr	r1, [r8, #56]	; 0x38
   3f474:	ldr	r7, [sp, #24]
   3f478:	ldr	lr, [sp, #44]	; 0x2c
   3f47c:	str	r1, [r0]
   3f480:	mov	r1, #0
   3f484:	str	r1, [r8, #64]	; 0x40
   3f488:	str	r0, [r8, #56]	; 0x38
   3f48c:	b	3e15c <__assert_fail@plt+0x2b6e0>
   3f490:	mov	r0, #12
   3f494:	ldr	r1, [sp, #16]
   3f498:	mov	sl, #0
   3f49c:	str	r0, [r1]
   3f4a0:	mov	r0, sl
   3f4a4:	sub	sp, fp, #28
   3f4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f4ac:	mov	r4, #0
   3f4b0:	mov	r9, #0
   3f4b4:	b	3f4c0 <__assert_fail@plt+0x2ca44>
   3f4b8:	mov	r9, #4
   3f4bc:	mov	r4, #128	; 0x80
   3f4c0:	bl	12740 <__ctype_b_loc@plt>
   3f4c4:	ldr	r0, [r0]
   3f4c8:	ldr	r7, [sp, #24]
   3f4cc:	ldr	lr, [sp, #44]	; 0x2c
   3f4d0:	mov	r1, #1
   3f4d4:	mov	sl, #0
   3f4d8:	add	r5, r0, r4, lsl #1
   3f4dc:	add	r0, r8, r9, lsl #2
   3f4e0:	mov	ip, r6
   3f4e4:	mov	r3, #0
   3f4e8:	add	r2, r0, #96	; 0x60
   3f4ec:	mov	r0, r5
   3f4f0:	add	r6, r4, r3
   3f4f4:	cmp	r6, #95	; 0x5f
   3f4f8:	beq	3f508 <__assert_fail@plt+0x2ca8c>
   3f4fc:	ldrh	r6, [r0]
   3f500:	ands	r6, r6, #8
   3f504:	beq	3f514 <__assert_fail@plt+0x2ca98>
   3f508:	ldr	r6, [r2]
   3f50c:	orr	r6, r6, r1, lsl r3
   3f510:	str	r6, [r2]
   3f514:	add	r3, r3, #1
   3f518:	add	r0, r0, #2
   3f51c:	cmp	r3, #32
   3f520:	bne	3f4f0 <__assert_fail@plt+0x2ca74>
   3f524:	add	r9, r9, #1
   3f528:	add	r5, r5, #64	; 0x40
   3f52c:	add	r4, r4, #32
   3f530:	mov	r6, ip
   3f534:	cmp	r9, #8
   3f538:	bne	3f4dc <__assert_fail@plt+0x2ca60>
   3f53c:	b	3d4dc <__assert_fail@plt+0x2aa60>
   3f540:	ldr	r7, [sp, #24]
   3f544:	ldr	lr, [sp, #44]	; 0x2c
   3f548:	mov	r6, #0
   3f54c:	mov	sl, #0
   3f550:	ldr	r1, [r4]
   3f554:	cmp	r1, #31
   3f558:	bne	3e0e4 <__assert_fail@plt+0x2b668>
   3f55c:	mov	r0, #996	; 0x3e4
   3f560:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f564:	ldr	lr, [sp, #44]	; 0x2c
   3f568:	cmp	r0, #0
   3f56c:	beq	3e130 <__assert_fail@plt+0x2b6b4>
   3f570:	ldr	r1, [r8, #56]	; 0x38
   3f574:	str	r1, [r0]
   3f578:	mov	r1, #0
   3f57c:	str	r1, [r8, #64]	; 0x40
   3f580:	str	r0, [r8, #56]	; 0x38
   3f584:	b	3e0e8 <__assert_fail@plt+0x2b66c>
   3f588:	cmp	r9, #0
   3f58c:	beq	3f62c <__assert_fail@plt+0x2cbb0>
   3f590:	movw	r5, #255	; 0xff
   3f594:	movt	r5, #4
   3f598:	mov	r6, r9
   3f59c:	ldr	r9, [r9, #4]
   3f5a0:	cmp	r9, #0
   3f5a4:	bne	3f598 <__assert_fail@plt+0x2cb1c>
   3f5a8:	ldr	r9, [r6, #8]
   3f5ac:	cmp	r9, #0
   3f5b0:	bne	3f598 <__assert_fail@plt+0x2cb1c>
   3f5b4:	ldr	r0, [r6, #24]
   3f5b8:	and	r0, r0, r5
   3f5bc:	cmp	r0, #3
   3f5c0:	beq	3f5f8 <__assert_fail@plt+0x2cb7c>
   3f5c4:	cmp	r0, #6
   3f5c8:	bne	3f600 <__assert_fail@plt+0x2cb84>
   3f5cc:	ldr	r4, [r6, #20]
   3f5d0:	ldr	r0, [r4]
   3f5d4:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f5d8:	ldr	r0, [r4, #4]
   3f5dc:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f5e0:	ldr	r0, [r4, #8]
   3f5e4:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f5e8:	ldr	r0, [r4, #12]
   3f5ec:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f5f0:	mov	r0, r4
   3f5f4:	b	3f5fc <__assert_fail@plt+0x2cb80>
   3f5f8:	ldr	r0, [r6, #20]
   3f5fc:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f600:	ldr	r0, [r6]
   3f604:	cmp	r0, #0
   3f608:	beq	3f62c <__assert_fail@plt+0x2cbb0>
   3f60c:	ldr	r9, [r0, #8]
   3f610:	cmp	r9, r6
   3f614:	mov	r6, r0
   3f618:	beq	3f5b4 <__assert_fail@plt+0x2cb38>
   3f61c:	cmp	r9, #0
   3f620:	mov	r6, r0
   3f624:	beq	3f5b4 <__assert_fail@plt+0x2cb38>
   3f628:	b	3f598 <__assert_fail@plt+0x2cb1c>
   3f62c:	mov	r0, #8
   3f630:	b	3f494 <__assert_fail@plt+0x2ca18>
   3f634:	mov	r5, #0
   3f638:	mov	r0, #9
   3f63c:	b	3f648 <__assert_fail@plt+0x2cbcc>
   3f640:	mov	r5, #0
   3f644:	mov	r0, #10
   3f648:	ldr	r7, [sp, #24]
   3f64c:	ldr	lr, [sp, #44]	; 0x2c
   3f650:	mov	sl, #0
   3f654:	b	3e084 <__assert_fail@plt+0x2b608>
   3f658:	mov	r0, #996	; 0x3e4
   3f65c:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f660:	cmp	r0, #0
   3f664:	beq	3f68c <__assert_fail@plt+0x2cc10>
   3f668:	ldr	r1, [r8, #56]	; 0x38
   3f66c:	str	r1, [r0]
   3f670:	mov	r1, #0
   3f674:	str	r1, [r8, #64]	; 0x40
   3f678:	str	r0, [r8, #56]	; 0x38
   3f67c:	b	3f168 <__assert_fail@plt+0x2c6ec>
   3f680:	ldr	r6, [sp, #40]	; 0x28
   3f684:	ldr	r4, [sp, #52]	; 0x34
   3f688:	ldr	sl, [sp, #48]	; 0x30
   3f68c:	mov	r0, #12
   3f690:	ldr	r1, [sp, #16]
   3f694:	str	r0, [r1]
   3f698:	b	3f2ac <__assert_fail@plt+0x2c830>
   3f69c:	mov	r0, r6
   3f6a0:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f6a4:	mov	r0, r9
   3f6a8:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f6ac:	mov	r9, #12
   3f6b0:	b	3f298 <__assert_fail@plt+0x2c81c>
   3f6b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f6b8:	add	fp, sp, #28
   3f6bc:	sub	sp, sp, #12
   3f6c0:	mov	r9, r1
   3f6c4:	mov	r6, r0
   3f6c8:	mov	r4, #0
   3f6cc:	mov	r0, #32
   3f6d0:	mov	r1, #1
   3f6d4:	mov	sl, r3
   3f6d8:	mov	r5, r2
   3f6dc:	str	r4, [sp, #8]
   3f6e0:	bl	325e0 <__assert_fail@plt+0x1fb64>
   3f6e4:	ldr	r1, [fp, #12]
   3f6e8:	cmp	r0, #0
   3f6ec:	beq	3f9a4 <__assert_fail@plt+0x2cf28>
   3f6f0:	mov	r7, r0
   3f6f4:	mov	r0, #40	; 0x28
   3f6f8:	mov	r1, #1
   3f6fc:	bl	325e0 <__assert_fail@plt+0x1fb64>
   3f700:	cmp	r0, #0
   3f704:	beq	3f9b8 <__assert_fail@plt+0x2cf3c>
   3f708:	mov	r8, r0
   3f70c:	ldrb	r0, [r0, #16]
   3f710:	ldr	r1, [fp, #8]
   3f714:	mov	r4, #0
   3f718:	add	r3, sp, #8
   3f71c:	str	r5, [sp]
   3f720:	mov	r2, r8
   3f724:	str	r4, [sp, #4]
   3f728:	and	r0, r0, #254	; 0xfe
   3f72c:	orr	r0, r0, r1
   3f730:	mov	r1, r7
   3f734:	strb	r0, [r8, #16]
   3f738:	mov	r0, r9
   3f73c:	bl	3ff68 <__assert_fail@plt+0x2d4ec>
   3f740:	cmp	r0, #0
   3f744:	bne	3f9dc <__assert_fail@plt+0x2cf60>
   3f748:	ldrb	r0, [sl]
   3f74c:	cmp	r0, #0
   3f750:	beq	3f77c <__assert_fail@plt+0x2cd00>
   3f754:	add	r1, sl, #1
   3f758:	mov	r2, #1
   3f75c:	ubfx	r3, r0, #5, #3
   3f760:	and	r0, r0, #31
   3f764:	ldr	r5, [r7, r3, lsl #2]
   3f768:	orr	r0, r5, r2, lsl r0
   3f76c:	str	r0, [r7, r3, lsl #2]
   3f770:	ldrb	r0, [r1], #1
   3f774:	cmp	r0, #0
   3f778:	bne	3f75c <__assert_fail@plt+0x2cce0>
   3f77c:	ldr	r0, [fp, #8]
   3f780:	cmp	r0, #0
   3f784:	bne	3f898 <__assert_fail@plt+0x2ce1c>
   3f788:	ldr	r0, [r6, #92]	; 0x5c
   3f78c:	cmp	r0, #2
   3f790:	bge	3f8c0 <__assert_fail@plt+0x2ce44>
   3f794:	ldr	r1, [r6, #64]	; 0x40
   3f798:	cmp	r1, #31
   3f79c:	beq	3f944 <__assert_fail@plt+0x2cec8>
   3f7a0:	ldr	r0, [r6, #56]	; 0x38
   3f7a4:	add	r2, r1, #1
   3f7a8:	add	r0, r0, r1, lsl #5
   3f7ac:	mov	r1, #3
   3f7b0:	vmov.i32	q8, #0	; 0x00000000
   3f7b4:	str	r2, [r6, #64]	; 0x40
   3f7b8:	mov	r2, #0
   3f7bc:	add	r5, r0, #4
   3f7c0:	str	r2, [r0, #20]
   3f7c4:	str	r7, [r0, #24]
   3f7c8:	str	r1, [r0, #28]
   3f7cc:	mov	r0, #28
   3f7d0:	mov	r1, r5
   3f7d4:	vst1.32	{d16-d17}, [r1], r0
   3f7d8:	mvn	r0, #0
   3f7dc:	str	r0, [r1]
   3f7e0:	ldr	r0, [r6, #92]	; 0x5c
   3f7e4:	cmp	r0, #2
   3f7e8:	blt	3f96c <__assert_fail@plt+0x2cef0>
   3f7ec:	ldrb	r0, [r6, #88]	; 0x58
   3f7f0:	orr	r0, r0, #2
   3f7f4:	strb	r0, [r6, #88]	; 0x58
   3f7f8:	ldr	r1, [r6, #64]	; 0x40
   3f7fc:	cmp	r1, #31
   3f800:	beq	3fa24 <__assert_fail@plt+0x2cfa8>
   3f804:	ldr	r0, [r6, #56]	; 0x38
   3f808:	add	r0, r0, r1, lsl #5
   3f80c:	add	r2, r1, #1
   3f810:	mov	r1, #6
   3f814:	mov	r4, #0
   3f818:	vmov.i32	q8, #0	; 0x00000000
   3f81c:	add	r7, r0, #4
   3f820:	str	r2, [r6, #64]	; 0x40
   3f824:	str	r4, [r0, #20]
   3f828:	str	r8, [r0, #24]
   3f82c:	str	r1, [r0, #28]
   3f830:	mov	r0, #28
   3f834:	mov	r1, r7
   3f838:	vst1.32	{d16-d17}, [r1], r0
   3f83c:	mvn	r0, #0
   3f840:	str	r0, [r1]
   3f844:	ldr	r1, [r6, #64]	; 0x40
   3f848:	cmp	r1, #31
   3f84c:	beq	3fa94 <__assert_fail@plt+0x2d018>
   3f850:	ldr	r0, [r6, #56]	; 0x38
   3f854:	add	r2, r1, #1
   3f858:	add	r4, r0, r1, lsl #5
   3f85c:	mov	r0, #0
   3f860:	mov	r1, #10
   3f864:	str	r2, [r6, #64]	; 0x40
   3f868:	str	r0, [r4, #4]!
   3f86c:	mvn	r2, #0
   3f870:	add	r3, r4, #20
   3f874:	stmib	r4, {r5, r7}
   3f878:	str	r0, [r4, #12]
   3f87c:	str	r0, [r4, #16]
   3f880:	stm	r3, {r0, r1, r2}
   3f884:	str	r4, [r5]
   3f888:	str	r4, [r7]
   3f88c:	mov	r0, r4
   3f890:	sub	sp, fp, #28
   3f894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f898:	vld1.32	{d16-d17}, [r7]
   3f89c:	mov	r0, r7
   3f8a0:	vmvn	q8, q8
   3f8a4:	vst1.32	{d16-d17}, [r0]!
   3f8a8:	vld1.32	{d16-d17}, [r0]
   3f8ac:	vmvn	q8, q8
   3f8b0:	vst1.32	{d16-d17}, [r0]
   3f8b4:	ldr	r0, [r6, #92]	; 0x5c
   3f8b8:	cmp	r0, #2
   3f8bc:	blt	3f794 <__assert_fail@plt+0x2cd18>
   3f8c0:	ldm	r7, {r0, r1, r2, ip}
   3f8c4:	ldr	r5, [r6, #60]	; 0x3c
   3f8c8:	ldr	r3, [r5]
   3f8cc:	and	r0, r0, r3
   3f8d0:	str	r0, [r7]
   3f8d4:	ldr	r0, [r5, #4]
   3f8d8:	and	r0, r1, r0
   3f8dc:	str	r0, [r7, #4]
   3f8e0:	ldr	r0, [r5, #8]
   3f8e4:	and	r0, r2, r0
   3f8e8:	str	r0, [r7, #8]
   3f8ec:	ldr	r0, [r5, #12]
   3f8f0:	and	r0, ip, r0
   3f8f4:	str	r0, [r7, #12]
   3f8f8:	ldr	r0, [r7, #16]
   3f8fc:	ldr	r1, [r5, #16]
   3f900:	and	r0, r0, r1
   3f904:	str	r0, [r7, #16]
   3f908:	ldr	r0, [r5, #20]
   3f90c:	ldr	r1, [r7, #20]
   3f910:	and	r0, r1, r0
   3f914:	str	r0, [r7, #20]
   3f918:	ldr	r0, [r5, #24]
   3f91c:	ldr	r1, [r7, #24]
   3f920:	and	r0, r1, r0
   3f924:	str	r0, [r7, #24]
   3f928:	ldr	r0, [r5, #28]
   3f92c:	ldr	r1, [r7, #28]
   3f930:	and	r0, r1, r0
   3f934:	str	r0, [r7, #28]
   3f938:	ldr	r1, [r6, #64]	; 0x40
   3f93c:	cmp	r1, #31
   3f940:	bne	3f7a0 <__assert_fail@plt+0x2cd24>
   3f944:	mov	r0, #996	; 0x3e4
   3f948:	bl	35608 <__assert_fail@plt+0x22b8c>
   3f94c:	cmp	r0, #0
   3f950:	beq	3fa4c <__assert_fail@plt+0x2cfd0>
   3f954:	ldr	r1, [r6, #56]	; 0x38
   3f958:	str	r1, [r0]
   3f95c:	mov	r1, #0
   3f960:	str	r1, [r6, #64]	; 0x40
   3f964:	str	r0, [r6, #56]	; 0x38
   3f968:	b	3f7a4 <__assert_fail@plt+0x2cd28>
   3f96c:	ldr	r0, [r8]
   3f970:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f974:	ldr	r0, [r8, #4]
   3f978:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f97c:	ldr	r0, [r8, #8]
   3f980:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f984:	ldr	r0, [r8, #12]
   3f988:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f98c:	mov	r0, r8
   3f990:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f994:	mov	r4, r5
   3f998:	mov	r0, r4
   3f99c:	sub	sp, fp, #28
   3f9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f9a4:	mov	r0, #12
   3f9a8:	str	r0, [r1]
   3f9ac:	mov	r0, r4
   3f9b0:	sub	sp, fp, #28
   3f9b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f9b8:	mov	r0, r7
   3f9bc:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f9c0:	ldr	r1, [fp, #12]
   3f9c4:	mov	r0, #12
   3f9c8:	mov	r4, #0
   3f9cc:	str	r0, [r1]
   3f9d0:	mov	r0, r4
   3f9d4:	sub	sp, fp, #28
   3f9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f9dc:	mov	r5, r0
   3f9e0:	mov	r0, r7
   3f9e4:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f9e8:	ldr	r0, [r8]
   3f9ec:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f9f0:	ldr	r0, [r8, #4]
   3f9f4:	bl	32c40 <__assert_fail@plt+0x201c4>
   3f9f8:	ldr	r0, [r8, #8]
   3f9fc:	bl	32c40 <__assert_fail@plt+0x201c4>
   3fa00:	ldr	r0, [r8, #12]
   3fa04:	bl	32c40 <__assert_fail@plt+0x201c4>
   3fa08:	mov	r0, r8
   3fa0c:	bl	32c40 <__assert_fail@plt+0x201c4>
   3fa10:	ldr	r0, [fp, #12]
   3fa14:	str	r5, [r0]
   3fa18:	mov	r0, r4
   3fa1c:	sub	sp, fp, #28
   3fa20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fa24:	mov	r0, #996	; 0x3e4
   3fa28:	bl	35608 <__assert_fail@plt+0x22b8c>
   3fa2c:	cmp	r0, #0
   3fa30:	beq	3fa4c <__assert_fail@plt+0x2cfd0>
   3fa34:	ldr	r1, [r6, #56]	; 0x38
   3fa38:	str	r1, [r0]
   3fa3c:	mov	r1, #0
   3fa40:	str	r1, [r6, #64]	; 0x40
   3fa44:	str	r0, [r6, #56]	; 0x38
   3fa48:	b	3f808 <__assert_fail@plt+0x2cd8c>
   3fa4c:	mov	r0, r7
   3fa50:	bl	32c40 <__assert_fail@plt+0x201c4>
   3fa54:	ldr	r0, [r8]
   3fa58:	bl	32c40 <__assert_fail@plt+0x201c4>
   3fa5c:	ldr	r0, [r8, #4]
   3fa60:	bl	32c40 <__assert_fail@plt+0x201c4>
   3fa64:	ldr	r0, [r8, #8]
   3fa68:	bl	32c40 <__assert_fail@plt+0x201c4>
   3fa6c:	ldr	r0, [r8, #12]
   3fa70:	bl	32c40 <__assert_fail@plt+0x201c4>
   3fa74:	mov	r0, r8
   3fa78:	bl	32c40 <__assert_fail@plt+0x201c4>
   3fa7c:	ldr	r1, [fp, #12]
   3fa80:	mov	r0, #12
   3fa84:	str	r0, [r1]
   3fa88:	mov	r0, r4
   3fa8c:	sub	sp, fp, #28
   3fa90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fa94:	mov	r0, #996	; 0x3e4
   3fa98:	bl	35608 <__assert_fail@plt+0x22b8c>
   3fa9c:	cmp	r0, #0
   3faa0:	beq	3f998 <__assert_fail@plt+0x2cf1c>
   3faa4:	ldr	r1, [r6, #56]	; 0x38
   3faa8:	str	r1, [r0]
   3faac:	mov	r1, #0
   3fab0:	str	r1, [r6, #64]	; 0x40
   3fab4:	str	r0, [r6, #56]	; 0x38
   3fab8:	b	3f854 <__assert_fail@plt+0x2cdd8>
   3fabc:	push	{fp, lr}
   3fac0:	mov	fp, sp
   3fac4:	ldr	ip, [r1, #40]	; 0x28
   3fac8:	ldr	r3, [r1, #56]	; 0x38
   3facc:	cmp	r3, ip
   3fad0:	ble	3fb50 <__assert_fail@plt+0x2d0d4>
   3fad4:	ldr	r3, [r1, #4]
   3fad8:	ldrb	lr, [r3, ip]
   3fadc:	strb	lr, [r0]
   3fae0:	ldr	r3, [r1, #80]	; 0x50
   3fae4:	cmp	r3, #2
   3fae8:	blt	3fb0c <__assert_fail@plt+0x2d090>
   3faec:	ldr	r3, [r1, #28]
   3faf0:	ldr	ip, [r1, #40]	; 0x28
   3faf4:	cmp	ip, r3
   3faf8:	beq	3fb0c <__assert_fail@plt+0x2d090>
   3fafc:	ldr	r3, [r1, #8]
   3fb00:	ldr	r3, [r3, ip, lsl #2]
   3fb04:	cmn	r3, #1
   3fb08:	beq	3fc24 <__assert_fail@plt+0x2d1a8>
   3fb0c:	tst	r2, #1
   3fb10:	beq	3fb64 <__assert_fail@plt+0x2d0e8>
   3fb14:	cmp	lr, #92	; 0x5c
   3fb18:	bne	3fb64 <__assert_fail@plt+0x2d0e8>
   3fb1c:	ldr	r2, [r1, #40]	; 0x28
   3fb20:	ldr	r3, [r1, #48]	; 0x30
   3fb24:	add	r2, r2, #1
   3fb28:	cmp	r2, r3
   3fb2c:	bge	3fc24 <__assert_fail@plt+0x2d1a8>
   3fb30:	str	r2, [r1, #40]	; 0x28
   3fb34:	ldr	r1, [r1, #4]
   3fb38:	ldrb	r2, [r1, r2]
   3fb3c:	mov	r1, #1
   3fb40:	strb	r1, [r0, #4]
   3fb44:	strb	r2, [r0]
   3fb48:	mov	r0, r1
   3fb4c:	pop	{fp, pc}
   3fb50:	mov	r1, #2
   3fb54:	strb	r1, [r0, #4]
   3fb58:	mov	r1, #0
   3fb5c:	mov	r0, r1
   3fb60:	pop	{fp, pc}
   3fb64:	cmp	lr, #92	; 0x5c
   3fb68:	bgt	3fbc8 <__assert_fail@plt+0x2d14c>
   3fb6c:	cmp	lr, #45	; 0x2d
   3fb70:	beq	3fbec <__assert_fail@plt+0x2d170>
   3fb74:	cmp	lr, #91	; 0x5b
   3fb78:	bne	3fc24 <__assert_fail@plt+0x2d1a8>
   3fb7c:	ldr	r3, [r1, #40]	; 0x28
   3fb80:	ldr	ip, [r1, #48]	; 0x30
   3fb84:	add	r3, r3, #1
   3fb88:	cmp	r3, ip
   3fb8c:	bge	3fc14 <__assert_fail@plt+0x2d198>
   3fb90:	ldr	r1, [r1, #4]
   3fb94:	ldrb	r1, [r1, r3]
   3fb98:	cmp	r1, #61	; 0x3d
   3fb9c:	strb	r1, [r0]
   3fba0:	beq	3fc34 <__assert_fail@plt+0x2d1b8>
   3fba4:	cmp	r1, #58	; 0x3a
   3fba8:	beq	3fc48 <__assert_fail@plt+0x2d1cc>
   3fbac:	cmp	r1, #46	; 0x2e
   3fbb0:	bne	3fc1c <__assert_fail@plt+0x2d1a0>
   3fbb4:	mov	r1, #26
   3fbb8:	strb	r1, [r0, #4]
   3fbbc:	mov	r1, #2
   3fbc0:	mov	r0, r1
   3fbc4:	pop	{fp, pc}
   3fbc8:	cmp	lr, #93	; 0x5d
   3fbcc:	beq	3fc00 <__assert_fail@plt+0x2d184>
   3fbd0:	cmp	lr, #94	; 0x5e
   3fbd4:	bne	3fc24 <__assert_fail@plt+0x2d1a8>
   3fbd8:	mov	r1, #25
   3fbdc:	strb	r1, [r0, #4]
   3fbe0:	mov	r1, #1
   3fbe4:	mov	r0, r1
   3fbe8:	pop	{fp, pc}
   3fbec:	mov	r1, #22
   3fbf0:	strb	r1, [r0, #4]
   3fbf4:	mov	r1, #1
   3fbf8:	mov	r0, r1
   3fbfc:	pop	{fp, pc}
   3fc00:	mov	r1, #21
   3fc04:	strb	r1, [r0, #4]
   3fc08:	mov	r1, #1
   3fc0c:	mov	r0, r1
   3fc10:	pop	{fp, pc}
   3fc14:	mov	r1, #0
   3fc18:	strb	r1, [r0]
   3fc1c:	mov	r1, #91	; 0x5b
   3fc20:	strb	r1, [r0]
   3fc24:	mov	r1, #1
   3fc28:	strb	r1, [r0, #4]
   3fc2c:	mov	r0, r1
   3fc30:	pop	{fp, pc}
   3fc34:	mov	r1, #28
   3fc38:	strb	r1, [r0, #4]
   3fc3c:	mov	r1, #2
   3fc40:	mov	r0, r1
   3fc44:	pop	{fp, pc}
   3fc48:	tst	r2, #4
   3fc4c:	beq	3fc1c <__assert_fail@plt+0x2d1a0>
   3fc50:	mov	r1, #30
   3fc54:	strb	r1, [r0, #4]
   3fc58:	mov	r1, #2
   3fc5c:	mov	r0, r1
   3fc60:	pop	{fp, pc}
   3fc64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3fc68:	add	fp, sp, #24
   3fc6c:	sub	sp, sp, #8
   3fc70:	mov	r5, r2
   3fc74:	ldr	r2, [r1, #80]	; 0x50
   3fc78:	mov	r9, r0
   3fc7c:	ldr	r0, [r1, #40]	; 0x28
   3fc80:	cmp	r2, #1
   3fc84:	beq	3fcf4 <__assert_fail@plt+0x2d278>
   3fc88:	ldr	r4, [r1, #28]
   3fc8c:	add	r2, r0, #1
   3fc90:	cmp	r2, r4
   3fc94:	bge	3fcf4 <__assert_fail@plt+0x2d278>
   3fc98:	ldr	ip, [r1, #8]
   3fc9c:	mov	r2, #1
   3fca0:	add	r6, ip, r0, lsl #2
   3fca4:	ldr	r7, [r6, r2, lsl #2]
   3fca8:	cmn	r7, #1
   3fcac:	bne	3fcc4 <__assert_fail@plt+0x2d248>
   3fcb0:	add	r2, r2, #1
   3fcb4:	add	r7, r0, r2
   3fcb8:	cmp	r7, r4
   3fcbc:	blt	3fca4 <__assert_fail@plt+0x2d228>
   3fcc0:	b	3fccc <__assert_fail@plt+0x2d250>
   3fcc4:	cmp	r2, #2
   3fcc8:	bcc	3fcf4 <__assert_fail@plt+0x2d278>
   3fccc:	mov	r3, #1
   3fcd0:	str	r3, [r9]
   3fcd4:	ldr	r0, [ip, r0, lsl #2]
   3fcd8:	str	r0, [r9, #4]
   3fcdc:	ldr	r0, [r1, #40]	; 0x28
   3fce0:	add	r0, r0, r2
   3fce4:	str	r0, [r1, #40]	; 0x28
   3fce8:	mov	r0, #0
   3fcec:	sub	sp, fp, #24
   3fcf0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3fcf4:	add	r2, r0, r3
   3fcf8:	str	r2, [r1, #40]	; 0x28
   3fcfc:	ldrb	r6, [r5, #4]
   3fd00:	sub	r0, r6, #22
   3fd04:	cmp	r0, #8
   3fd08:	bhi	3ff50 <__assert_fail@plt+0x2d4d4>
   3fd0c:	add	r3, pc, #0
   3fd10:	ldr	pc, [r3, r0, lsl #2]
   3fd14:	andeq	pc, r3, r8, lsr #30
   3fd18:	andeq	pc, r3, r0, asr pc	; <UNPREDICTABLE>
   3fd1c:	andeq	pc, r3, r0, asr pc	; <UNPREDICTABLE>
   3fd20:	andeq	pc, r3, r0, asr pc	; <UNPREDICTABLE>
   3fd24:	andeq	pc, r3, r8, lsr sp	; <UNPREDICTABLE>
   3fd28:	andeq	pc, r3, r0, asr pc	; <UNPREDICTABLE>
   3fd2c:	andeq	pc, r3, r8, lsr sp	; <UNPREDICTABLE>
   3fd30:	andeq	pc, r3, r0, asr pc	; <UNPREDICTABLE>
   3fd34:	andeq	pc, r3, r8, lsr sp	; <UNPREDICTABLE>
   3fd38:	ldr	r3, [r1, #56]	; 0x38
   3fd3c:	mov	r0, #7
   3fd40:	cmp	r3, r2
   3fd44:	ble	3ff60 <__assert_fail@plt+0x2d4e4>
   3fd48:	ldrb	r3, [r5]
   3fd4c:	mov	r2, #0
   3fd50:	uxtb	r7, r6
   3fd54:	cmp	r7, #30
   3fd58:	bne	3fd80 <__assert_fail@plt+0x2d304>
   3fd5c:	b	3fd74 <__assert_fail@plt+0x2d2f8>
   3fd60:	ldrb	r6, [r5, #4]
   3fd64:	add	r2, r2, #1
   3fd68:	uxtb	r7, r6
   3fd6c:	cmp	r7, #30
   3fd70:	bne	3fd80 <__assert_fail@plt+0x2d304>
   3fd74:	ldrb	r7, [r1, #75]	; 0x4b
   3fd78:	cmp	r7, #0
   3fd7c:	bne	3fdd0 <__assert_fail@plt+0x2d354>
   3fd80:	ldr	r4, [r1, #40]	; 0x28
   3fd84:	ldr	r7, [r1, #4]
   3fd88:	add	r6, r4, #1
   3fd8c:	str	r6, [r1, #40]	; 0x28
   3fd90:	ldrb	r4, [r7, r4]
   3fd94:	ldr	r7, [r1, #56]	; 0x38
   3fd98:	cmp	r7, r6
   3fd9c:	ble	3ff60 <__assert_fail@plt+0x2d4e4>
   3fda0:	uxtb	r7, r4
   3fda4:	cmp	r7, r3
   3fda8:	bne	3fdbc <__assert_fail@plt+0x2d340>
   3fdac:	ldr	r7, [r1, #4]
   3fdb0:	ldrb	r7, [r7, r6]
   3fdb4:	cmp	r7, #93	; 0x5d
   3fdb8:	beq	3fec8 <__assert_fail@plt+0x2d44c>
   3fdbc:	ldr	r7, [r9, #4]
   3fdc0:	cmp	r2, #30
   3fdc4:	strb	r4, [r7, r2]
   3fdc8:	bls	3fd60 <__assert_fail@plt+0x2d2e4>
   3fdcc:	b	3ff60 <__assert_fail@plt+0x2d4e4>
   3fdd0:	ldrb	r7, [r1, #76]	; 0x4c
   3fdd4:	cmp	r7, #0
   3fdd8:	beq	3fe7c <__assert_fail@plt+0x2d400>
   3fddc:	ldr	lr, [r1, #28]
   3fde0:	ldr	ip, [r1, #40]	; 0x28
   3fde4:	cmp	ip, lr
   3fde8:	beq	3fdfc <__assert_fail@plt+0x2d380>
   3fdec:	ldr	r4, [r1, #8]
   3fdf0:	ldr	r4, [r4, ip, lsl #2]
   3fdf4:	cmn	r4, #1
   3fdf8:	beq	3fea8 <__assert_fail@plt+0x2d42c>
   3fdfc:	ldr	r6, [r1, #12]
   3fe00:	ldr	r7, [r1, #24]
   3fe04:	ldr	r4, [r1]
   3fe08:	ldr	r6, [r6, ip, lsl #2]
   3fe0c:	add	r6, r7, r6
   3fe10:	add	r4, r4, r6
   3fe14:	ldrsb	r4, [r4]
   3fe18:	cmn	r4, #1
   3fe1c:	ble	3fea8 <__assert_fail@plt+0x2d42c>
   3fe20:	ldr	r7, [r1, #80]	; 0x50
   3fe24:	mov	r6, #1
   3fe28:	cmp	r7, #1
   3fe2c:	beq	3fe64 <__assert_fail@plt+0x2d3e8>
   3fe30:	add	r7, ip, #1
   3fe34:	cmp	r7, lr
   3fe38:	bge	3fe64 <__assert_fail@plt+0x2d3e8>
   3fe3c:	ldr	r6, [r1, #8]
   3fe40:	add	r8, r6, ip, lsl #2
   3fe44:	mov	r6, #1
   3fe48:	ldr	r7, [r8, r6, lsl #2]
   3fe4c:	cmn	r7, #1
   3fe50:	bne	3fe64 <__assert_fail@plt+0x2d3e8>
   3fe54:	add	r6, r6, #1
   3fe58:	add	r7, ip, r6
   3fe5c:	cmp	r7, lr
   3fe60:	blt	3fe48 <__assert_fail@plt+0x2d3cc>
   3fe64:	add	r6, r6, ip
   3fe68:	str	r6, [r1, #40]	; 0x28
   3fe6c:	ldr	r7, [r1, #56]	; 0x38
   3fe70:	cmp	r7, r6
   3fe74:	bgt	3fda0 <__assert_fail@plt+0x2d324>
   3fe78:	b	3ff60 <__assert_fail@plt+0x2d4e4>
   3fe7c:	ldr	r7, [r1, #40]	; 0x28
   3fe80:	ldr	r4, [r1, #24]
   3fe84:	ldr	ip, [r1]
   3fe88:	add	r6, r7, #1
   3fe8c:	add	r7, r7, r4
   3fe90:	str	r6, [r1, #40]	; 0x28
   3fe94:	ldrb	r4, [ip, r7]
   3fe98:	ldr	r7, [r1, #56]	; 0x38
   3fe9c:	cmp	r7, r6
   3fea0:	bgt	3fda0 <__assert_fail@plt+0x2d324>
   3fea4:	b	3ff60 <__assert_fail@plt+0x2d4e4>
   3fea8:	add	r6, ip, #1
   3feac:	str	r6, [r1, #40]	; 0x28
   3feb0:	ldr	r7, [r1, #4]
   3feb4:	ldrb	r4, [r7, ip]
   3feb8:	ldr	r7, [r1, #56]	; 0x38
   3febc:	cmp	r7, r6
   3fec0:	bgt	3fda0 <__assert_fail@plt+0x2d324>
   3fec4:	b	3ff60 <__assert_fail@plt+0x2d4e4>
   3fec8:	add	r0, r6, #1
   3fecc:	str	r0, [r1, #40]	; 0x28
   3fed0:	mov	r0, #0
   3fed4:	ldr	r1, [r9, #4]
   3fed8:	strb	r0, [r1, r2]
   3fedc:	ldrb	r1, [r5, #4]
   3fee0:	cmp	r1, #30
   3fee4:	beq	3ff08 <__assert_fail@plt+0x2d48c>
   3fee8:	cmp	r1, #28
   3feec:	beq	3ff18 <__assert_fail@plt+0x2d49c>
   3fef0:	cmp	r1, #26
   3fef4:	bne	3ff60 <__assert_fail@plt+0x2d4e4>
   3fef8:	mov	r1, #3
   3fefc:	str	r1, [r9]
   3ff00:	sub	sp, fp, #24
   3ff04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3ff08:	mov	r1, #4
   3ff0c:	str	r1, [r9]
   3ff10:	sub	sp, fp, #24
   3ff14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3ff18:	mov	r1, #2
   3ff1c:	str	r1, [r9]
   3ff20:	sub	sp, fp, #24
   3ff24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3ff28:	ldr	r0, [fp, #12]
   3ff2c:	cmp	r0, #0
   3ff30:	bne	3ff50 <__assert_fail@plt+0x2d4d4>
   3ff34:	ldr	r2, [fp, #8]
   3ff38:	mov	r0, sp
   3ff3c:	bl	3fabc <__assert_fail@plt+0x2d040>
   3ff40:	ldrb	r1, [sp, #4]
   3ff44:	mov	r0, #11
   3ff48:	cmp	r1, #21
   3ff4c:	bne	3ff60 <__assert_fail@plt+0x2d4e4>
   3ff50:	mov	r0, #0
   3ff54:	str	r0, [r9]
   3ff58:	ldrb	r1, [r5]
   3ff5c:	strb	r1, [r9, #4]
   3ff60:	sub	sp, fp, #24
   3ff64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3ff68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3ff6c:	add	fp, sp, #24
   3ff70:	mov	r8, r0
   3ff74:	ldrb	r0, [fp, #14]
   3ff78:	ldr	r6, [fp, #8]
   3ff7c:	mov	r5, r3
   3ff80:	mov	r7, r2
   3ff84:	mov	r4, r1
   3ff88:	tst	r0, #64	; 0x40
   3ff8c:	beq	3ffc8 <__assert_fail@plt+0x2d54c>
   3ff90:	movw	r1, #9812	; 0x2654
   3ff94:	mov	r0, r6
   3ff98:	movt	r1, #5
   3ff9c:	bl	123d4 <strcmp@plt>
   3ffa0:	cmp	r0, #0
   3ffa4:	beq	3ffc0 <__assert_fail@plt+0x2d544>
   3ffa8:	movw	r1, #9818	; 0x265a
   3ffac:	mov	r0, r6
   3ffb0:	movt	r1, #5
   3ffb4:	bl	123d4 <strcmp@plt>
   3ffb8:	cmp	r0, #0
   3ffbc:	bne	3ffc8 <__assert_fail@plt+0x2d54c>
   3ffc0:	movw	r6, #9824	; 0x2660
   3ffc4:	movt	r6, #5
   3ffc8:	ldr	r0, [r5]
   3ffcc:	ldr	r1, [r7, #36]	; 0x24
   3ffd0:	cmp	r0, r1
   3ffd4:	beq	40524 <__assert_fail@plt+0x2daa8>
   3ffd8:	mov	r0, r6
   3ffdc:	bl	12374 <wctype@plt>
   3ffe0:	ldr	r2, [r7, #36]	; 0x24
   3ffe4:	ldr	r1, [r7, #12]
   3ffe8:	add	r3, r2, #1
   3ffec:	str	r3, [r7, #36]	; 0x24
   3fff0:	str	r0, [r1, r2, lsl #2]
   3fff4:	movw	r1, #9798	; 0x2646
   3fff8:	mov	r0, r6
   3fffc:	movt	r1, #5
   40000:	bl	123d4 <strcmp@plt>
   40004:	cmp	r0, #0
   40008:	beq	4016c <__assert_fail@plt+0x2d6f0>
   4000c:	movw	r1, #9830	; 0x2666
   40010:	mov	r0, r6
   40014:	movt	r1, #5
   40018:	bl	123d4 <strcmp@plt>
   4001c:	cmp	r0, #0
   40020:	beq	401c8 <__assert_fail@plt+0x2d74c>
   40024:	movw	r1, #9818	; 0x265a
   40028:	mov	r0, r6
   4002c:	movt	r1, #5
   40030:	bl	123d4 <strcmp@plt>
   40034:	cmp	r0, #0
   40038:	beq	40224 <__assert_fail@plt+0x2d7a8>
   4003c:	movw	r1, #9806	; 0x264e
   40040:	mov	r0, r6
   40044:	movt	r1, #5
   40048:	bl	123d4 <strcmp@plt>
   4004c:	cmp	r0, #0
   40050:	beq	40280 <__assert_fail@plt+0x2d804>
   40054:	movw	r1, #9824	; 0x2660
   40058:	mov	r0, r6
   4005c:	movt	r1, #5
   40060:	bl	123d4 <strcmp@plt>
   40064:	cmp	r0, #0
   40068:	beq	402dc <__assert_fail@plt+0x2d860>
   4006c:	movw	r1, #9855	; 0x267f
   40070:	mov	r0, r6
   40074:	movt	r1, #5
   40078:	bl	123d4 <strcmp@plt>
   4007c:	cmp	r0, #0
   40080:	beq	40338 <__assert_fail@plt+0x2d8bc>
   40084:	movw	r1, #53992	; 0xd2e8
   40088:	mov	r0, r6
   4008c:	movt	r1, #4
   40090:	bl	123d4 <strcmp@plt>
   40094:	cmp	r0, #0
   40098:	beq	40394 <__assert_fail@plt+0x2d918>
   4009c:	movw	r1, #9812	; 0x2654
   400a0:	mov	r0, r6
   400a4:	movt	r1, #5
   400a8:	bl	123d4 <strcmp@plt>
   400ac:	cmp	r0, #0
   400b0:	beq	403e4 <__assert_fail@plt+0x2d968>
   400b4:	movw	r1, #9836	; 0x266c
   400b8:	mov	r0, r6
   400bc:	movt	r1, #5
   400c0:	bl	123d4 <strcmp@plt>
   400c4:	cmp	r0, #0
   400c8:	beq	40434 <__assert_fail@plt+0x2d9b8>
   400cc:	movw	r1, #9842	; 0x2672
   400d0:	mov	r0, r6
   400d4:	movt	r1, #5
   400d8:	bl	123d4 <strcmp@plt>
   400dc:	cmp	r0, #0
   400e0:	beq	40484 <__assert_fail@plt+0x2da08>
   400e4:	movw	r1, #9848	; 0x2678
   400e8:	mov	r0, r6
   400ec:	movt	r1, #5
   400f0:	bl	123d4 <strcmp@plt>
   400f4:	cmp	r0, #0
   400f8:	beq	404d4 <__assert_fail@plt+0x2da58>
   400fc:	movw	r1, #9854	; 0x267e
   40100:	mov	r0, r6
   40104:	movt	r1, #5
   40108:	bl	123d4 <strcmp@plt>
   4010c:	mov	r1, r0
   40110:	mov	r0, #4
   40114:	cmp	r1, #0
   40118:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   4011c:	bl	12740 <__ctype_b_loc@plt>
   40120:	ldr	r1, [r0]
   40124:	mov	r2, #0
   40128:	mov	r3, #1
   4012c:	cmp	r8, #0
   40130:	bne	4068c <__assert_fail@plt+0x2dc10>
   40134:	ldrb	r0, [r1, #1]
   40138:	tst	r0, #16
   4013c:	beq	40154 <__assert_fail@plt+0x2d6d8>
   40140:	ubfx	r0, r2, #5, #3
   40144:	and	r6, r2, #31
   40148:	ldr	r7, [r4, r0, lsl #2]
   4014c:	orr	r7, r7, r3, lsl r6
   40150:	str	r7, [r4, r0, lsl #2]
   40154:	add	r2, r2, #1
   40158:	add	r1, r1, #2
   4015c:	mov	r0, #0
   40160:	cmp	r2, #256	; 0x100
   40164:	bne	40134 <__assert_fail@plt+0x2d6b8>
   40168:	b	40520 <__assert_fail@plt+0x2daa4>
   4016c:	bl	12740 <__ctype_b_loc@plt>
   40170:	ldr	r1, [r0]
   40174:	cmp	r8, #0
   40178:	bne	405c8 <__assert_fail@plt+0x2db4c>
   4017c:	mov	r0, #0
   40180:	mov	r2, #1
   40184:	ldrb	r3, [r1]
   40188:	tst	r3, #8
   4018c:	bne	401b0 <__assert_fail@plt+0x2d734>
   40190:	add	r0, r0, #1
   40194:	add	r1, r1, #2
   40198:	cmp	r0, #256	; 0x100
   4019c:	moveq	r0, #0
   401a0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   401a4:	ldrb	r3, [r1]
   401a8:	tst	r3, #8
   401ac:	beq	40190 <__assert_fail@plt+0x2d714>
   401b0:	ubfx	r3, r0, #5, #3
   401b4:	and	r6, r0, #31
   401b8:	ldr	r7, [r4, r3, lsl #2]
   401bc:	orr	r7, r7, r2, lsl r6
   401c0:	str	r7, [r4, r3, lsl #2]
   401c4:	b	40190 <__assert_fail@plt+0x2d714>
   401c8:	bl	12740 <__ctype_b_loc@plt>
   401cc:	ldr	r1, [r0]
   401d0:	cmp	r8, #0
   401d4:	bne	40648 <__assert_fail@plt+0x2dbcc>
   401d8:	mov	r0, #0
   401dc:	mov	r2, #1
   401e0:	ldrb	r3, [r1]
   401e4:	tst	r3, #2
   401e8:	bne	4020c <__assert_fail@plt+0x2d790>
   401ec:	add	r0, r0, #1
   401f0:	add	r1, r1, #2
   401f4:	cmp	r0, #256	; 0x100
   401f8:	moveq	r0, #0
   401fc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   40200:	ldrb	r3, [r1]
   40204:	tst	r3, #2
   40208:	beq	401ec <__assert_fail@plt+0x2d770>
   4020c:	ubfx	r3, r0, #5, #3
   40210:	and	r6, r0, #31
   40214:	ldr	r7, [r4, r3, lsl #2]
   40218:	orr	r7, r7, r2, lsl r6
   4021c:	str	r7, [r4, r3, lsl #2]
   40220:	b	401ec <__assert_fail@plt+0x2d770>
   40224:	bl	12740 <__ctype_b_loc@plt>
   40228:	ldr	r1, [r0]
   4022c:	cmp	r8, #0
   40230:	bne	40704 <__assert_fail@plt+0x2dc88>
   40234:	mov	r0, #0
   40238:	mov	r2, #1
   4023c:	ldrb	r3, [r1, #1]
   40240:	tst	r3, #2
   40244:	bne	40268 <__assert_fail@plt+0x2d7ec>
   40248:	add	r0, r0, #1
   4024c:	add	r1, r1, #2
   40250:	cmp	r0, #256	; 0x100
   40254:	moveq	r0, #0
   40258:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   4025c:	ldrb	r3, [r1, #1]
   40260:	tst	r3, #2
   40264:	beq	40248 <__assert_fail@plt+0x2d7cc>
   40268:	ubfx	r3, r0, #5, #3
   4026c:	and	r6, r0, #31
   40270:	ldr	r7, [r4, r3, lsl #2]
   40274:	orr	r7, r7, r2, lsl r6
   40278:	str	r7, [r4, r3, lsl #2]
   4027c:	b	40248 <__assert_fail@plt+0x2d7cc>
   40280:	bl	12740 <__ctype_b_loc@plt>
   40284:	ldr	r1, [r0]
   40288:	cmp	r8, #0
   4028c:	bne	40784 <__assert_fail@plt+0x2dd08>
   40290:	mov	r0, #0
   40294:	mov	r2, #1
   40298:	ldrb	r3, [r1, #1]
   4029c:	tst	r3, #32
   402a0:	bne	402c4 <__assert_fail@plt+0x2d848>
   402a4:	add	r0, r0, #1
   402a8:	add	r1, r1, #2
   402ac:	cmp	r0, #256	; 0x100
   402b0:	moveq	r0, #0
   402b4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   402b8:	ldrb	r3, [r1, #1]
   402bc:	tst	r3, #32
   402c0:	beq	402a4 <__assert_fail@plt+0x2d828>
   402c4:	ubfx	r3, r0, #5, #3
   402c8:	and	r6, r0, #31
   402cc:	ldr	r7, [r4, r3, lsl #2]
   402d0:	orr	r7, r7, r2, lsl r6
   402d4:	str	r7, [r4, r3, lsl #2]
   402d8:	b	402a4 <__assert_fail@plt+0x2d828>
   402dc:	bl	12740 <__ctype_b_loc@plt>
   402e0:	ldr	r1, [r0]
   402e4:	cmp	r8, #0
   402e8:	bne	407c8 <__assert_fail@plt+0x2dd4c>
   402ec:	mov	r0, #0
   402f0:	mov	r2, #1
   402f4:	ldrb	r3, [r1, #1]
   402f8:	tst	r3, #4
   402fc:	bne	40320 <__assert_fail@plt+0x2d8a4>
   40300:	add	r0, r0, #1
   40304:	add	r1, r1, #2
   40308:	cmp	r0, #256	; 0x100
   4030c:	moveq	r0, #0
   40310:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   40314:	ldrb	r3, [r1, #1]
   40318:	tst	r3, #4
   4031c:	beq	40300 <__assert_fail@plt+0x2d884>
   40320:	ubfx	r3, r0, #5, #3
   40324:	and	r6, r0, #31
   40328:	ldr	r7, [r4, r3, lsl #2]
   4032c:	orr	r7, r7, r2, lsl r6
   40330:	str	r7, [r4, r3, lsl #2]
   40334:	b	40300 <__assert_fail@plt+0x2d884>
   40338:	bl	12740 <__ctype_b_loc@plt>
   4033c:	ldr	r1, [r0]
   40340:	cmp	r8, #0
   40344:	bne	4080c <__assert_fail@plt+0x2dd90>
   40348:	mov	r0, #0
   4034c:	mov	r2, #1
   40350:	ldrb	r3, [r1, #1]
   40354:	tst	r3, #8
   40358:	bne	4037c <__assert_fail@plt+0x2d900>
   4035c:	add	r0, r0, #1
   40360:	add	r1, r1, #2
   40364:	cmp	r0, #256	; 0x100
   40368:	moveq	r0, #0
   4036c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   40370:	ldrb	r3, [r1, #1]
   40374:	tst	r3, #8
   40378:	beq	4035c <__assert_fail@plt+0x2d8e0>
   4037c:	ubfx	r3, r0, #5, #3
   40380:	and	r6, r0, #31
   40384:	ldr	r7, [r4, r3, lsl #2]
   40388:	orr	r7, r7, r2, lsl r6
   4038c:	str	r7, [r4, r3, lsl #2]
   40390:	b	4035c <__assert_fail@plt+0x2d8e0>
   40394:	bl	12740 <__ctype_b_loc@plt>
   40398:	ldr	r1, [r0]
   4039c:	mov	r2, #0
   403a0:	mov	r3, #1
   403a4:	cmp	r8, #0
   403a8:	bne	40550 <__assert_fail@plt+0x2dad4>
   403ac:	ldrb	r0, [r1, #1]
   403b0:	tst	r0, #64	; 0x40
   403b4:	beq	403cc <__assert_fail@plt+0x2d950>
   403b8:	ubfx	r0, r2, #5, #3
   403bc:	and	r6, r2, #31
   403c0:	ldr	r7, [r4, r0, lsl #2]
   403c4:	orr	r7, r7, r3, lsl r6
   403c8:	str	r7, [r4, r0, lsl #2]
   403cc:	add	r2, r2, #1
   403d0:	add	r1, r1, #2
   403d4:	mov	r0, #0
   403d8:	cmp	r2, #256	; 0x100
   403dc:	bne	403ac <__assert_fail@plt+0x2d930>
   403e0:	b	40520 <__assert_fail@plt+0x2daa4>
   403e4:	bl	12740 <__ctype_b_loc@plt>
   403e8:	ldr	r1, [r0]
   403ec:	mov	r2, #0
   403f0:	mov	r3, #1
   403f4:	cmp	r8, #0
   403f8:	bne	4058c <__assert_fail@plt+0x2db10>
   403fc:	ldrb	r0, [r1, #1]
   40400:	tst	r0, #1
   40404:	beq	4041c <__assert_fail@plt+0x2d9a0>
   40408:	ubfx	r0, r2, #5, #3
   4040c:	and	r6, r2, #31
   40410:	ldr	r7, [r4, r0, lsl #2]
   40414:	orr	r7, r7, r3, lsl r6
   40418:	str	r7, [r4, r0, lsl #2]
   4041c:	add	r2, r2, #1
   40420:	add	r1, r1, #2
   40424:	mov	r0, #0
   40428:	cmp	r2, #256	; 0x100
   4042c:	bne	403fc <__assert_fail@plt+0x2d980>
   40430:	b	40520 <__assert_fail@plt+0x2daa4>
   40434:	bl	12740 <__ctype_b_loc@plt>
   40438:	ldr	r1, [r0]
   4043c:	mov	r2, #0
   40440:	mov	r3, #1
   40444:	cmp	r8, #0
   40448:	bne	4060c <__assert_fail@plt+0x2db90>
   4044c:	ldrb	r0, [r1]
   40450:	tst	r0, #1
   40454:	beq	4046c <__assert_fail@plt+0x2d9f0>
   40458:	ubfx	r0, r2, #5, #3
   4045c:	and	r6, r2, #31
   40460:	ldr	r7, [r4, r0, lsl #2]
   40464:	orr	r7, r7, r3, lsl r6
   40468:	str	r7, [r4, r0, lsl #2]
   4046c:	add	r2, r2, #1
   40470:	add	r1, r1, #2
   40474:	mov	r0, #0
   40478:	cmp	r2, #256	; 0x100
   4047c:	bne	4044c <__assert_fail@plt+0x2d9d0>
   40480:	b	40520 <__assert_fail@plt+0x2daa4>
   40484:	bl	12740 <__ctype_b_loc@plt>
   40488:	ldr	r1, [r0]
   4048c:	mov	r2, #0
   40490:	mov	r3, #1
   40494:	cmp	r8, #0
   40498:	bne	406c8 <__assert_fail@plt+0x2dc4c>
   4049c:	ldrsh	r0, [r1]
   404a0:	cmn	r0, #1
   404a4:	bgt	404bc <__assert_fail@plt+0x2da40>
   404a8:	ubfx	r0, r2, #5, #3
   404ac:	and	r6, r2, #31
   404b0:	ldr	r7, [r4, r0, lsl #2]
   404b4:	orr	r7, r7, r3, lsl r6
   404b8:	str	r7, [r4, r0, lsl #2]
   404bc:	add	r2, r2, #1
   404c0:	add	r1, r1, #2
   404c4:	mov	r0, #0
   404c8:	cmp	r2, #256	; 0x100
   404cc:	bne	4049c <__assert_fail@plt+0x2da20>
   404d0:	b	40520 <__assert_fail@plt+0x2daa4>
   404d4:	bl	12740 <__ctype_b_loc@plt>
   404d8:	ldr	r1, [r0]
   404dc:	mov	r2, #0
   404e0:	mov	r3, #1
   404e4:	cmp	r8, #0
   404e8:	bne	40748 <__assert_fail@plt+0x2dccc>
   404ec:	ldrb	r0, [r1]
   404f0:	tst	r0, #4
   404f4:	beq	4050c <__assert_fail@plt+0x2da90>
   404f8:	ubfx	r0, r2, #5, #3
   404fc:	and	r6, r2, #31
   40500:	ldr	r7, [r4, r0, lsl #2]
   40504:	orr	r7, r7, r3, lsl r6
   40508:	str	r7, [r4, r0, lsl #2]
   4050c:	add	r2, r2, #1
   40510:	add	r1, r1, #2
   40514:	mov	r0, #0
   40518:	cmp	r2, #256	; 0x100
   4051c:	bne	404ec <__assert_fail@plt+0x2da70>
   40520:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40524:	mov	r1, #1
   40528:	orr	r9, r1, r0, lsl #1
   4052c:	ldr	r0, [r7, #12]
   40530:	lsl	r1, r9, #2
   40534:	bl	36328 <__assert_fail@plt+0x238ac>
   40538:	cmp	r0, #0
   4053c:	moveq	r0, #12
   40540:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   40544:	str	r0, [r7, #12]
   40548:	str	r9, [r5]
   4054c:	b	3ffd8 <__assert_fail@plt+0x2d55c>
   40550:	ldrb	r0, [r1, #1]
   40554:	tst	r0, #64	; 0x40
   40558:	beq	40574 <__assert_fail@plt+0x2daf8>
   4055c:	ldrb	r0, [r8, r2]
   40560:	ubfx	r7, r0, #5, #3
   40564:	and	r0, r0, #31
   40568:	ldr	r6, [r4, r7, lsl #2]
   4056c:	orr	r0, r6, r3, lsl r0
   40570:	str	r0, [r4, r7, lsl #2]
   40574:	add	r2, r2, #1
   40578:	add	r1, r1, #2
   4057c:	mov	r0, #0
   40580:	cmp	r2, #256	; 0x100
   40584:	bne	40550 <__assert_fail@plt+0x2dad4>
   40588:	b	40520 <__assert_fail@plt+0x2daa4>
   4058c:	ldrb	r0, [r1, #1]
   40590:	tst	r0, #1
   40594:	beq	405b0 <__assert_fail@plt+0x2db34>
   40598:	ldrb	r0, [r8, r2]
   4059c:	ubfx	r7, r0, #5, #3
   405a0:	and	r0, r0, #31
   405a4:	ldr	r6, [r4, r7, lsl #2]
   405a8:	orr	r0, r6, r3, lsl r0
   405ac:	str	r0, [r4, r7, lsl #2]
   405b0:	add	r2, r2, #1
   405b4:	add	r1, r1, #2
   405b8:	mov	r0, #0
   405bc:	cmp	r2, #256	; 0x100
   405c0:	bne	4058c <__assert_fail@plt+0x2db10>
   405c4:	b	40520 <__assert_fail@plt+0x2daa4>
   405c8:	mov	r2, #0
   405cc:	mov	r3, #1
   405d0:	ldrb	r0, [r1]
   405d4:	tst	r0, #8
   405d8:	beq	405f4 <__assert_fail@plt+0x2db78>
   405dc:	ldrb	r0, [r8, r2]
   405e0:	ubfx	r7, r0, #5, #3
   405e4:	and	r0, r0, #31
   405e8:	ldr	r6, [r4, r7, lsl #2]
   405ec:	orr	r0, r6, r3, lsl r0
   405f0:	str	r0, [r4, r7, lsl #2]
   405f4:	add	r2, r2, #1
   405f8:	add	r1, r1, #2
   405fc:	mov	r0, #0
   40600:	cmp	r2, #256	; 0x100
   40604:	bne	405d0 <__assert_fail@plt+0x2db54>
   40608:	b	40520 <__assert_fail@plt+0x2daa4>
   4060c:	ldrb	r0, [r1]
   40610:	tst	r0, #1
   40614:	beq	40630 <__assert_fail@plt+0x2dbb4>
   40618:	ldrb	r0, [r8, r2]
   4061c:	ubfx	r7, r0, #5, #3
   40620:	and	r0, r0, #31
   40624:	ldr	r6, [r4, r7, lsl #2]
   40628:	orr	r0, r6, r3, lsl r0
   4062c:	str	r0, [r4, r7, lsl #2]
   40630:	add	r2, r2, #1
   40634:	add	r1, r1, #2
   40638:	mov	r0, #0
   4063c:	cmp	r2, #256	; 0x100
   40640:	bne	4060c <__assert_fail@plt+0x2db90>
   40644:	b	40520 <__assert_fail@plt+0x2daa4>
   40648:	mov	r2, #0
   4064c:	mov	r3, #1
   40650:	ldrb	r0, [r1]
   40654:	tst	r0, #2
   40658:	beq	40674 <__assert_fail@plt+0x2dbf8>
   4065c:	ldrb	r0, [r8, r2]
   40660:	ubfx	r7, r0, #5, #3
   40664:	and	r0, r0, #31
   40668:	ldr	r6, [r4, r7, lsl #2]
   4066c:	orr	r0, r6, r3, lsl r0
   40670:	str	r0, [r4, r7, lsl #2]
   40674:	add	r2, r2, #1
   40678:	add	r1, r1, #2
   4067c:	mov	r0, #0
   40680:	cmp	r2, #256	; 0x100
   40684:	bne	40650 <__assert_fail@plt+0x2dbd4>
   40688:	b	40520 <__assert_fail@plt+0x2daa4>
   4068c:	ldrb	r0, [r1, #1]
   40690:	tst	r0, #16
   40694:	beq	406b0 <__assert_fail@plt+0x2dc34>
   40698:	ldrb	r0, [r8, r2]
   4069c:	ubfx	r7, r0, #5, #3
   406a0:	and	r0, r0, #31
   406a4:	ldr	r6, [r4, r7, lsl #2]
   406a8:	orr	r0, r6, r3, lsl r0
   406ac:	str	r0, [r4, r7, lsl #2]
   406b0:	add	r2, r2, #1
   406b4:	add	r1, r1, #2
   406b8:	mov	r0, #0
   406bc:	cmp	r2, #256	; 0x100
   406c0:	bne	4068c <__assert_fail@plt+0x2dc10>
   406c4:	b	40520 <__assert_fail@plt+0x2daa4>
   406c8:	ldrsh	r0, [r1]
   406cc:	cmn	r0, #1
   406d0:	bgt	406ec <__assert_fail@plt+0x2dc70>
   406d4:	ldrb	r0, [r8, r2]
   406d8:	ubfx	r7, r0, #5, #3
   406dc:	and	r0, r0, #31
   406e0:	ldr	r6, [r4, r7, lsl #2]
   406e4:	orr	r0, r6, r3, lsl r0
   406e8:	str	r0, [r4, r7, lsl #2]
   406ec:	add	r2, r2, #1
   406f0:	add	r1, r1, #2
   406f4:	mov	r0, #0
   406f8:	cmp	r2, #256	; 0x100
   406fc:	bne	406c8 <__assert_fail@plt+0x2dc4c>
   40700:	b	40520 <__assert_fail@plt+0x2daa4>
   40704:	mov	r2, #0
   40708:	mov	r3, #1
   4070c:	ldrb	r0, [r1, #1]
   40710:	tst	r0, #2
   40714:	beq	40730 <__assert_fail@plt+0x2dcb4>
   40718:	ldrb	r0, [r8, r2]
   4071c:	ubfx	r7, r0, #5, #3
   40720:	and	r0, r0, #31
   40724:	ldr	r6, [r4, r7, lsl #2]
   40728:	orr	r0, r6, r3, lsl r0
   4072c:	str	r0, [r4, r7, lsl #2]
   40730:	add	r2, r2, #1
   40734:	add	r1, r1, #2
   40738:	mov	r0, #0
   4073c:	cmp	r2, #256	; 0x100
   40740:	bne	4070c <__assert_fail@plt+0x2dc90>
   40744:	b	40520 <__assert_fail@plt+0x2daa4>
   40748:	ldrb	r0, [r1]
   4074c:	tst	r0, #4
   40750:	beq	4076c <__assert_fail@plt+0x2dcf0>
   40754:	ldrb	r0, [r8, r2]
   40758:	ubfx	r7, r0, #5, #3
   4075c:	and	r0, r0, #31
   40760:	ldr	r6, [r4, r7, lsl #2]
   40764:	orr	r0, r6, r3, lsl r0
   40768:	str	r0, [r4, r7, lsl #2]
   4076c:	add	r2, r2, #1
   40770:	add	r1, r1, #2
   40774:	mov	r0, #0
   40778:	cmp	r2, #256	; 0x100
   4077c:	bne	40748 <__assert_fail@plt+0x2dccc>
   40780:	b	40520 <__assert_fail@plt+0x2daa4>
   40784:	mov	r2, #0
   40788:	mov	r3, #1
   4078c:	ldrb	r0, [r1, #1]
   40790:	tst	r0, #32
   40794:	beq	407b0 <__assert_fail@plt+0x2dd34>
   40798:	ldrb	r0, [r8, r2]
   4079c:	ubfx	r7, r0, #5, #3
   407a0:	and	r0, r0, #31
   407a4:	ldr	r6, [r4, r7, lsl #2]
   407a8:	orr	r0, r6, r3, lsl r0
   407ac:	str	r0, [r4, r7, lsl #2]
   407b0:	add	r2, r2, #1
   407b4:	add	r1, r1, #2
   407b8:	mov	r0, #0
   407bc:	cmp	r2, #256	; 0x100
   407c0:	bne	4078c <__assert_fail@plt+0x2dd10>
   407c4:	b	40520 <__assert_fail@plt+0x2daa4>
   407c8:	mov	r2, #0
   407cc:	mov	r3, #1
   407d0:	ldrb	r0, [r1, #1]
   407d4:	tst	r0, #4
   407d8:	beq	407f4 <__assert_fail@plt+0x2dd78>
   407dc:	ldrb	r0, [r8, r2]
   407e0:	ubfx	r7, r0, #5, #3
   407e4:	and	r0, r0, #31
   407e8:	ldr	r6, [r4, r7, lsl #2]
   407ec:	orr	r0, r6, r3, lsl r0
   407f0:	str	r0, [r4, r7, lsl #2]
   407f4:	add	r2, r2, #1
   407f8:	add	r1, r1, #2
   407fc:	mov	r0, #0
   40800:	cmp	r2, #256	; 0x100
   40804:	bne	407d0 <__assert_fail@plt+0x2dd54>
   40808:	b	40520 <__assert_fail@plt+0x2daa4>
   4080c:	mov	r2, #0
   40810:	mov	r3, #1
   40814:	ldrb	r0, [r1, #1]
   40818:	tst	r0, #8
   4081c:	beq	40838 <__assert_fail@plt+0x2ddbc>
   40820:	ldrb	r0, [r8, r2]
   40824:	ubfx	r7, r0, #5, #3
   40828:	and	r0, r0, #31
   4082c:	ldr	r6, [r4, r7, lsl #2]
   40830:	orr	r0, r6, r3, lsl r0
   40834:	str	r0, [r4, r7, lsl #2]
   40838:	add	r2, r2, #1
   4083c:	add	r1, r1, #2
   40840:	mov	r0, #0
   40844:	cmp	r2, #256	; 0x100
   40848:	bne	40814 <__assert_fail@plt+0x2dd98>
   4084c:	b	40520 <__assert_fail@plt+0x2daa4>
   40850:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   40854:	add	fp, sp, #24
   40858:	ldrb	r3, [r1, #24]
   4085c:	ldr	r2, [r1, #28]
   40860:	mov	r4, #0
   40864:	sub	r3, r3, #2
   40868:	cmp	r3, #14
   4086c:	bhi	40990 <__assert_fail@plt+0x2df14>
   40870:	add	r7, pc, #0
   40874:	ldr	pc, [r7, r3, lsl #2]
   40878:	andeq	r0, r4, r4, asr #19
   4087c:	muleq	r4, r0, r9
   40880:	andeq	r0, r4, r8, lsr #19
   40884:	muleq	r4, r0, r9
   40888:	muleq	r4, r0, r9
   4088c:	muleq	r4, r0, r9
   40890:			; <UNDEFINED> instruction: 0x000408b4
   40894:			; <UNDEFINED> instruction: 0x000408b4
   40898:	andeq	r0, r4, r8, lsl #18
   4089c:	andeq	r0, r4, r8, lsl #18
   408a0:			; <UNDEFINED> instruction: 0x000408b4
   408a4:	muleq	r4, r0, r9
   408a8:	muleq	r4, r0, r9
   408ac:	muleq	r4, r0, r9
   408b0:	andeq	r0, r4, r4, asr #19
   408b4:	ldr	r1, [r1, #16]
   408b8:	ldr	r5, [r1, #28]
   408bc:	ldr	r6, [r0, #20]
   408c0:	add	r0, r2, r2, lsl #1
   408c4:	mov	r1, #1
   408c8:	str	r1, [r6, r0, lsl #2]!
   408cc:	mov	r0, #4
   408d0:	mov	r7, r6
   408d4:	str	r1, [r7, #4]!
   408d8:	bl	35608 <__assert_fail@plt+0x22b8c>
   408dc:	cmp	r0, #0
   408e0:	str	r0, [r6, #8]
   408e4:	strne	r5, [r0]
   408e8:	movne	r0, r4
   408ec:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   408f0:	mov	r0, #0
   408f4:	str	r0, [r7]
   408f8:	str	r0, [r6]
   408fc:	mov	r4, #12
   40900:	mov	r0, r4
   40904:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40908:	ldrb	r3, [r0, #88]	; 0x58
   4090c:	add	r6, r1, #16
   40910:	add	r5, r2, r2, lsl #1
   40914:	orr	r3, r3, #1
   40918:	strb	r3, [r0, #88]	; 0x58
   4091c:	mov	r3, r6
   40920:	ldr	r7, [r1, #4]
   40924:	ldr	r1, [r1, #8]
   40928:	cmp	r1, #0
   4092c:	addne	r3, r1, #12
   40930:	cmp	r7, #0
   40934:	ldr	r1, [r3]
   40938:	addne	r6, r7, #12
   4093c:	ldr	r8, [r1, #28]
   40940:	ldr	r1, [r6]
   40944:	ldr	r6, [r0, #20]
   40948:	mov	r0, #2
   4094c:	ldr	r9, [r1, #28]
   40950:	mov	r7, r6
   40954:	str	r0, [r7, r5, lsl #2]!
   40958:	mov	r0, #8
   4095c:	bl	35608 <__assert_fail@plt+0x22b8c>
   40960:	cmp	r0, #0
   40964:	str	r0, [r7, #8]
   40968:	beq	408fc <__assert_fail@plt+0x2de80>
   4096c:	add	r1, r6, r5, lsl #2
   40970:	cmp	r9, r8
   40974:	add	r1, r1, #4
   40978:	bne	409cc <__assert_fail@plt+0x2df50>
   4097c:	mov	r2, #1
   40980:	str	r2, [r1]
   40984:	str	r9, [r0]
   40988:	mov	r0, r4
   4098c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40990:	ldr	r1, [r1, #16]
   40994:	ldr	r0, [r0, #12]
   40998:	ldr	r1, [r1, #28]
   4099c:	str	r1, [r0, r2, lsl #2]
   409a0:	mov	r0, r4
   409a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   409a8:	ldr	r7, [r1, #16]
   409ac:	ldr	r3, [r0, #12]
   409b0:	ldr	r5, [r7, #28]
   409b4:	str	r5, [r3, r2, lsl #2]
   409b8:	ldrb	r1, [r1, #24]
   409bc:	cmp	r1, #4
   409c0:	beq	408bc <__assert_fail@plt+0x2de40>
   409c4:	mov	r0, r4
   409c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   409cc:	mov	r2, #2
   409d0:	str	r2, [r1]
   409d4:	stmge	r0, {r8, r9}
   409d8:	strlt	r9, [r0]
   409dc:	strlt	r8, [r0, #4]
   409e0:	mov	r0, r4
   409e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   409e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   409ec:	add	fp, sp, #28
   409f0:	sub	sp, sp, #4
   409f4:	ldr	r6, [r3, #4]
   409f8:	tst	r2, #16
   409fc:	mov	r9, r3
   40a00:	mov	r7, r1
   40a04:	mov	r8, r0
   40a08:	cmpne	r6, #0
   40a0c:	bne	40bc4 <__assert_fail@plt+0x2e148>
   40a10:	ldr	r1, [r7, #64]	; 0x40
   40a14:	cmp	r1, #31
   40a18:	beq	40bec <__assert_fail@plt+0x2e170>
   40a1c:	ldr	r0, [r7, #56]	; 0x38
   40a20:	add	r2, r1, #1
   40a24:	add	r0, r0, r1, lsl #5
   40a28:	mov	r1, #0
   40a2c:	vmov.i32	q8, #0	; 0x00000000
   40a30:	str	r2, [r7, #64]	; 0x40
   40a34:	add	sl, r0, #4
   40a38:	mov	r2, #8
   40a3c:	str	r1, [r0, #20]
   40a40:	str	r1, [r0, #24]
   40a44:	str	r2, [r0, #28]
   40a48:	mov	r0, #28
   40a4c:	mov	r1, sl
   40a50:	vst1.32	{d16-d17}, [r1], r0
   40a54:	mvn	r0, #0
   40a58:	str	r0, [r1]
   40a5c:	ldr	r1, [r7, #64]	; 0x40
   40a60:	cmp	r1, #31
   40a64:	beq	40c4c <__assert_fail@plt+0x2e1d0>
   40a68:	ldr	r0, [r7, #56]	; 0x38
   40a6c:	add	r2, r1, #1
   40a70:	add	r0, r0, r1, lsl #5
   40a74:	mov	r1, #0
   40a78:	vmov.i32	q8, #0	; 0x00000000
   40a7c:	str	r2, [r7, #64]	; 0x40
   40a80:	add	r5, r0, #4
   40a84:	mov	r2, #9
   40a88:	str	r1, [r0, #20]
   40a8c:	str	r1, [r0, #24]
   40a90:	str	r2, [r0, #28]
   40a94:	mov	r0, #28
   40a98:	mov	r1, r5
   40a9c:	vst1.32	{d16-d17}, [r1], r0
   40aa0:	mvn	r0, #0
   40aa4:	str	r0, [r1]
   40aa8:	cmp	r6, #0
   40aac:	mov	r4, r5
   40ab0:	beq	40b04 <__assert_fail@plt+0x2e088>
   40ab4:	ldr	r1, [r7, #64]	; 0x40
   40ab8:	cmp	r1, #31
   40abc:	beq	40c14 <__assert_fail@plt+0x2e198>
   40ac0:	ldr	r0, [r7, #56]	; 0x38
   40ac4:	add	r2, r1, #1
   40ac8:	add	r4, r0, r1, lsl #5
   40acc:	mov	r0, #0
   40ad0:	mov	r1, #16
   40ad4:	cmp	r5, #0
   40ad8:	str	r2, [r7, #64]	; 0x40
   40adc:	str	r0, [r4, #4]!
   40ae0:	mvn	r2, #0
   40ae4:	add	r3, r4, #20
   40ae8:	str	r6, [r4, #4]
   40aec:	str	r5, [r4, #8]
   40af0:	str	r0, [r4, #12]
   40af4:	str	r0, [r4, #16]
   40af8:	stm	r3, {r0, r1, r2}
   40afc:	str	r4, [r6]
   40b00:	strne	r4, [r5]
   40b04:	ldr	r1, [r7, #64]	; 0x40
   40b08:	cmp	r1, #31
   40b0c:	beq	40c98 <__assert_fail@plt+0x2e21c>
   40b10:	ldr	r0, [r7, #56]	; 0x38
   40b14:	add	r2, r1, #1
   40b18:	add	r6, r0, r1, lsl #5
   40b1c:	mov	r0, #0
   40b20:	mov	r1, #16
   40b24:	cmp	sl, #0
   40b28:	str	r2, [r7, #64]	; 0x40
   40b2c:	str	r0, [r6, #4]!
   40b30:	mvn	r2, #0
   40b34:	add	r3, r6, #20
   40b38:	str	sl, [r6, #4]
   40b3c:	str	r4, [r6, #8]
   40b40:	str	r0, [r6, #12]
   40b44:	str	r0, [r6, #16]
   40b48:	stm	r3, {r0, r1, r2}
   40b4c:	strne	r6, [sl]
   40b50:	cmp	r4, #0
   40b54:	strne	r6, [r4]
   40b58:	cmp	r5, #0
   40b5c:	beq	40b6c <__assert_fail@plt+0x2e0f0>
   40b60:	cmp	sl, #0
   40b64:	cmpne	r4, #0
   40b68:	bne	40b84 <__assert_fail@plt+0x2e108>
   40b6c:	mov	r0, #12
   40b70:	mov	r6, #0
   40b74:	str	r0, [r8]
   40b78:	mov	r0, r6
   40b7c:	sub	sp, fp, #28
   40b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40b84:	cmp	r6, #0
   40b88:	beq	40b6c <__assert_fail@plt+0x2e0f0>
   40b8c:	ldr	r0, [r9, #20]
   40b90:	str	r0, [r5, #20]
   40b94:	str	r0, [sl, #20]
   40b98:	ldr	r1, [r9, #24]
   40b9c:	ldr	r0, [r5, #24]
   40ba0:	lsr	r1, r1, #19
   40ba4:	bfi	r0, r1, #19, #1
   40ba8:	str	r0, [r5, #24]
   40bac:	ldr	r0, [sl, #24]
   40bb0:	bfi	r0, r1, #19, #1
   40bb4:	str	r0, [sl, #24]
   40bb8:	mov	r0, r6
   40bbc:	sub	sp, fp, #28
   40bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40bc4:	ldr	r0, [r9, #20]
   40bc8:	cmp	r0, #31
   40bcc:	bgt	40be0 <__assert_fail@plt+0x2e164>
   40bd0:	ldr	r1, [r7, #80]	; 0x50
   40bd4:	mov	r2, #1
   40bd8:	tst	r1, r2, lsl r0
   40bdc:	bne	40a10 <__assert_fail@plt+0x2df94>
   40be0:	mov	r0, r6
   40be4:	sub	sp, fp, #28
   40be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40bec:	mov	r0, #996	; 0x3e4
   40bf0:	bl	35608 <__assert_fail@plt+0x22b8c>
   40bf4:	cmp	r0, #0
   40bf8:	beq	40c3c <__assert_fail@plt+0x2e1c0>
   40bfc:	ldr	r1, [r7, #56]	; 0x38
   40c00:	str	r1, [r0]
   40c04:	mov	r1, #0
   40c08:	str	r1, [r7, #64]	; 0x40
   40c0c:	str	r0, [r7, #56]	; 0x38
   40c10:	b	40a20 <__assert_fail@plt+0x2dfa4>
   40c14:	mov	r0, #996	; 0x3e4
   40c18:	bl	35608 <__assert_fail@plt+0x22b8c>
   40c1c:	cmp	r0, #0
   40c20:	beq	40c88 <__assert_fail@plt+0x2e20c>
   40c24:	ldr	r1, [r7, #56]	; 0x38
   40c28:	str	r1, [r0]
   40c2c:	mov	r1, #0
   40c30:	str	r1, [r7, #64]	; 0x40
   40c34:	str	r0, [r7, #56]	; 0x38
   40c38:	b	40ac4 <__assert_fail@plt+0x2e048>
   40c3c:	mov	sl, #0
   40c40:	ldr	r1, [r7, #64]	; 0x40
   40c44:	cmp	r1, #31
   40c48:	bne	40a68 <__assert_fail@plt+0x2dfec>
   40c4c:	mov	r0, #996	; 0x3e4
   40c50:	bl	35608 <__assert_fail@plt+0x22b8c>
   40c54:	cmp	r0, #0
   40c58:	beq	40c74 <__assert_fail@plt+0x2e1f8>
   40c5c:	ldr	r1, [r7, #56]	; 0x38
   40c60:	str	r1, [r0]
   40c64:	mov	r1, #0
   40c68:	str	r1, [r7, #64]	; 0x40
   40c6c:	str	r0, [r7, #56]	; 0x38
   40c70:	b	40a6c <__assert_fail@plt+0x2dff0>
   40c74:	mov	r5, #0
   40c78:	cmp	r6, #0
   40c7c:	mov	r4, r5
   40c80:	bne	40ab4 <__assert_fail@plt+0x2e038>
   40c84:	b	40b04 <__assert_fail@plt+0x2e088>
   40c88:	mov	r4, #0
   40c8c:	ldr	r1, [r7, #64]	; 0x40
   40c90:	cmp	r1, #31
   40c94:	bne	40b10 <__assert_fail@plt+0x2e094>
   40c98:	mov	r0, #996	; 0x3e4
   40c9c:	bl	35608 <__assert_fail@plt+0x22b8c>
   40ca0:	cmp	r0, #0
   40ca4:	beq	40cc0 <__assert_fail@plt+0x2e244>
   40ca8:	ldr	r1, [r7, #56]	; 0x38
   40cac:	str	r1, [r0]
   40cb0:	mov	r1, #0
   40cb4:	str	r1, [r7, #64]	; 0x40
   40cb8:	str	r0, [r7, #56]	; 0x38
   40cbc:	b	40b14 <__assert_fail@plt+0x2e098>
   40cc0:	mov	r6, #0
   40cc4:	cmp	r5, #0
   40cc8:	bne	40b60 <__assert_fail@plt+0x2e0e4>
   40ccc:	b	40b6c <__assert_fail@plt+0x2e0f0>
   40cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40cd4:	add	fp, sp, #28
   40cd8:	sub	sp, sp, #12
   40cdc:	mov	r4, r0
   40ce0:	ldr	r7, [r0, #4]
   40ce4:	ldr	r0, [r0, #8]
   40ce8:	mov	r5, r2
   40cec:	mov	r9, r1
   40cf0:	cmp	r0, r7
   40cf4:	bcs	40dc0 <__assert_fail@plt+0x2e344>
   40cf8:	ldr	r1, [r4]
   40cfc:	str	r9, [r1, r0, lsl #3]!
   40d00:	str	r5, [r1, #4]
   40d04:	ldr	r0, [r4]
   40d08:	ldr	r1, [r4, #8]
   40d0c:	add	r0, r0, r1, lsl #3
   40d10:	ldr	r1, [r0, #4]
   40d14:	bfc	r1, #8, #10
   40d18:	str	r1, [r0, #4]
   40d1c:	uxtb	r1, r5
   40d20:	cmp	r1, #5
   40d24:	bne	40d38 <__assert_fail@plt+0x2e2bc>
   40d28:	ldr	r2, [r4, #92]	; 0x5c
   40d2c:	mov	r0, #1048576	; 0x100000
   40d30:	cmp	r2, #1
   40d34:	bgt	40d48 <__assert_fail@plt+0x2e2cc>
   40d38:	sub	r0, r1, #6
   40d3c:	clz	r0, r0
   40d40:	lsr	r0, r0, #5
   40d44:	lsl	r0, r0, #20
   40d48:	ldr	r1, [r4]
   40d4c:	ldr	r2, [r4, #8]
   40d50:	add	r1, r1, r2, lsl #3
   40d54:	ldr	r2, [r1, #4]
   40d58:	bic	r2, r2, #1048576	; 0x100000
   40d5c:	orr	r0, r2, r0
   40d60:	mvn	r2, #0
   40d64:	str	r0, [r1, #4]
   40d68:	ldr	r0, [r4, #8]
   40d6c:	ldr	r1, [r4, #12]
   40d70:	str	r2, [r1, r0, lsl #2]
   40d74:	mov	r2, #0
   40d78:	ldr	r0, [r4, #8]
   40d7c:	ldr	r1, [r4, #20]
   40d80:	add	r0, r0, r0, lsl #1
   40d84:	str	r2, [r1, r0, lsl #2]!
   40d88:	str	r2, [r1, #4]
   40d8c:	str	r2, [r1, #8]
   40d90:	ldr	r0, [r4, #8]
   40d94:	ldr	r1, [r4, #24]
   40d98:	add	r0, r0, r0, lsl #1
   40d9c:	str	r2, [r1, r0, lsl #2]!
   40da0:	str	r2, [r1, #4]
   40da4:	str	r2, [r1, #8]
   40da8:	ldr	r6, [r4, #8]
   40dac:	add	r0, r6, #1
   40db0:	str	r0, [r4, #8]
   40db4:	mov	r0, r6
   40db8:	sub	sp, fp, #28
   40dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40dc0:	movw	r0, #21845	; 0x5555
   40dc4:	lsl	r1, r7, #1
   40dc8:	mvn	r6, #0
   40dcc:	movt	r0, #5461	; 0x1555
   40dd0:	cmp	r1, r0
   40dd4:	bhi	40db4 <__assert_fail@plt+0x2e338>
   40dd8:	ldr	r0, [r4]
   40ddc:	str	r1, [sp, #8]
   40de0:	lsl	r1, r7, #4
   40de4:	bl	36328 <__assert_fail@plt+0x238ac>
   40de8:	cmp	r0, #0
   40dec:	beq	40db4 <__assert_fail@plt+0x2e338>
   40df0:	str	r0, [r4]
   40df4:	lsl	r8, r7, #3
   40df8:	ldr	r0, [r4, #12]
   40dfc:	mov	r1, r8
   40e00:	bl	36328 <__assert_fail@plt+0x238ac>
   40e04:	str	r0, [sp, #4]
   40e08:	ldr	r0, [r4, #16]
   40e0c:	mov	r1, r8
   40e10:	bl	36328 <__assert_fail@plt+0x238ac>
   40e14:	mov	r2, r0
   40e18:	ldr	r0, [r4, #20]
   40e1c:	add	r1, r7, r7, lsl #1
   40e20:	lsl	r8, r1, #3
   40e24:	mov	r7, r2
   40e28:	mov	r1, r8
   40e2c:	bl	36328 <__assert_fail@plt+0x238ac>
   40e30:	mov	sl, r0
   40e34:	ldr	r0, [r4, #24]
   40e38:	mov	r1, r8
   40e3c:	bl	36328 <__assert_fail@plt+0x238ac>
   40e40:	mov	r8, r0
   40e44:	ldr	r0, [sp, #4]
   40e48:	cmp	r0, #0
   40e4c:	beq	40e5c <__assert_fail@plt+0x2e3e0>
   40e50:	cmp	r7, #0
   40e54:	cmpne	sl, #0
   40e58:	bne	40e84 <__assert_fail@plt+0x2e408>
   40e5c:	bl	32c40 <__assert_fail@plt+0x201c4>
   40e60:	mov	r0, r7
   40e64:	bl	32c40 <__assert_fail@plt+0x201c4>
   40e68:	mov	r0, sl
   40e6c:	bl	32c40 <__assert_fail@plt+0x201c4>
   40e70:	mov	r0, r8
   40e74:	bl	32c40 <__assert_fail@plt+0x201c4>
   40e78:	mov	r0, r6
   40e7c:	sub	sp, fp, #28
   40e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40e84:	cmp	r8, #0
   40e88:	beq	40e5c <__assert_fail@plt+0x2e3e0>
   40e8c:	add	r1, r4, #12
   40e90:	stm	r1, {r0, r7, sl}
   40e94:	str	r8, [r4, #24]
   40e98:	ldr	r0, [sp, #8]
   40e9c:	str	r0, [r4, #4]
   40ea0:	ldr	r0, [r4, #8]
   40ea4:	b	40cf8 <__assert_fail@plt+0x2e27c>
   40ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40eac:	add	fp, sp, #28
   40eb0:	sub	sp, sp, #44	; 0x2c
   40eb4:	mov	r8, r0
   40eb8:	ldr	r0, [r1, #20]
   40ebc:	add	r4, r2, r2, lsl #1
   40ec0:	mov	r5, r1
   40ec4:	mov	r1, #0
   40ec8:	mov	r9, r3
   40ecc:	mov	r6, r2
   40ed0:	add	r0, r0, r4, lsl #2
   40ed4:	ldr	r0, [r0, #4]
   40ed8:	str	r1, [sp, #36]	; 0x24
   40edc:	add	r0, r0, #1
   40ee0:	str	r0, [sp, #32]
   40ee4:	lsl	r0, r0, #2
   40ee8:	bl	35608 <__assert_fail@plt+0x22b8c>
   40eec:	cmp	r0, #0
   40ef0:	str	r0, [sp, #40]	; 0x28
   40ef4:	beq	410bc <__assert_fail@plt+0x2e640>
   40ef8:	mov	r1, #1
   40efc:	str	r6, [r0]
   40f00:	str	r1, [sp, #36]	; 0x24
   40f04:	mvn	r1, #0
   40f08:	ldr	r0, [r5, #24]
   40f0c:	add	r0, r0, r4, lsl #2
   40f10:	str	r1, [r0, #4]
   40f14:	ldr	r2, [r5]
   40f18:	add	r0, r2, r6, lsl #3
   40f1c:	ldr	r0, [r0, #4]
   40f20:	ubfx	r1, r0, #8, #10
   40f24:	cmp	r1, #0
   40f28:	beq	40f84 <__assert_fail@plt+0x2e508>
   40f2c:	ldr	r3, [r5, #20]
   40f30:	add	r3, r3, r4, lsl #2
   40f34:	ldr	r7, [r3, #4]
   40f38:	cmp	r7, #0
   40f3c:	beq	40f84 <__assert_fail@plt+0x2e508>
   40f40:	ldr	r3, [r3, #8]
   40f44:	ldr	r3, [r3]
   40f48:	add	r2, r2, r3, lsl #3
   40f4c:	ldrb	r2, [r2, #6]
   40f50:	tst	r2, #4
   40f54:	bne	40f84 <__assert_fail@plt+0x2e508>
   40f58:	str	r1, [sp]
   40f5c:	mov	r0, r5
   40f60:	mov	r1, r6
   40f64:	mov	r2, r6
   40f68:	mov	r3, r6
   40f6c:	bl	410c8 <__assert_fail@plt+0x2e64c>
   40f70:	cmp	r0, #0
   40f74:	bne	410b4 <__assert_fail@plt+0x2e638>
   40f78:	ldr	r0, [r5]
   40f7c:	add	r0, r0, r6, lsl #3
   40f80:	ldr	r0, [r0, #4]
   40f84:	tst	r0, #8
   40f88:	beq	41088 <__assert_fail@plt+0x2e60c>
   40f8c:	ldr	r0, [r5, #20]
   40f90:	add	r1, r0, r4, lsl #2
   40f94:	ldr	r1, [r1, #4]
   40f98:	cmp	r1, #1
   40f9c:	blt	41088 <__assert_fail@plt+0x2e60c>
   40fa0:	str	r8, [sp, #12]
   40fa4:	mov	r8, #0
   40fa8:	add	r7, sp, #16
   40fac:	add	sl, sp, #32
   40fb0:	mov	r6, #0
   40fb4:	str	r9, [sp, #8]
   40fb8:	add	r0, r0, r4, lsl #2
   40fbc:	ldr	r0, [r0, #8]
   40fc0:	ldr	r2, [r0, r6, lsl #2]
   40fc4:	ldr	r0, [r5, #24]
   40fc8:	add	r9, r2, r2, lsl #1
   40fcc:	add	r0, r0, r9, lsl #2
   40fd0:	ldr	r1, [r0, #4]
   40fd4:	cmn	r1, #1
   40fd8:	beq	41040 <__assert_fail@plt+0x2e5c4>
   40fdc:	cmp	r1, #0
   40fe0:	bne	41000 <__assert_fail@plt+0x2e584>
   40fe4:	mov	r0, r7
   40fe8:	mov	r1, r5
   40fec:	mov	r3, #0
   40ff0:	bl	40ea8 <__assert_fail@plt+0x2e42c>
   40ff4:	cmp	r0, #0
   40ff8:	beq	41010 <__assert_fail@plt+0x2e594>
   40ffc:	b	410b4 <__assert_fail@plt+0x2e638>
   41000:	vldr	d16, [r0]
   41004:	ldr	r0, [r0, #8]
   41008:	str	r0, [sp, #24]
   4100c:	vstr	d16, [sp, #16]
   41010:	mov	r0, sl
   41014:	mov	r1, r7
   41018:	bl	4158c <__assert_fail@plt+0x2eb10>
   4101c:	cmp	r0, #0
   41020:	bne	410b4 <__assert_fail@plt+0x2e638>
   41024:	ldr	r0, [r5, #24]
   41028:	add	r0, r0, r9, lsl #2
   4102c:	ldr	r0, [r0, #4]
   41030:	cmp	r0, #0
   41034:	bne	41044 <__assert_fail@plt+0x2e5c8>
   41038:	ldr	r0, [sp, #24]
   4103c:	bl	32c40 <__assert_fail@plt+0x201c4>
   41040:	mov	r8, #1
   41044:	ldr	r0, [r5, #20]
   41048:	add	r6, r6, #1
   4104c:	add	r1, r0, r4, lsl #2
   41050:	ldr	r1, [r1, #4]
   41054:	cmp	r6, r1
   41058:	blt	40fb8 <__assert_fail@plt+0x2e53c>
   4105c:	tst	r8, #1
   41060:	ldr	r8, [sp, #12]
   41064:	ldr	r0, [sp, #8]
   41068:	beq	41088 <__assert_fail@plt+0x2e60c>
   4106c:	cmp	r0, #0
   41070:	bne	41088 <__assert_fail@plt+0x2e60c>
   41074:	ldr	r0, [r5, #24]
   41078:	mov	r1, #0
   4107c:	add	r0, r0, r4, lsl #2
   41080:	str	r1, [r0, #4]
   41084:	b	410a0 <__assert_fail@plt+0x2e624>
   41088:	ldr	r0, [r5, #24]
   4108c:	vldr	d16, [sp, #32]
   41090:	ldr	r1, [sp, #40]	; 0x28
   41094:	add	r0, r0, r4, lsl #2
   41098:	str	r1, [r0, #8]
   4109c:	vstr	d16, [r0]
   410a0:	ldr	r0, [sp, #40]	; 0x28
   410a4:	vldr	d16, [sp, #32]
   410a8:	str	r0, [r8, #8]
   410ac:	mov	r0, #0
   410b0:	vstr	d16, [r8]
   410b4:	sub	sp, fp, #28
   410b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   410bc:	mov	r0, #12
   410c0:	sub	sp, fp, #28
   410c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   410c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   410cc:	add	fp, sp, #28
   410d0:	sub	sp, sp, #20
   410d4:	mov	r9, r0
   410d8:	ldr	r0, [fp, #8]
   410dc:	mov	sl, r2
   410e0:	mov	r8, r1
   410e4:	str	r3, [sp, #8]
   410e8:	str	r0, [sp, #16]
   410ec:	ldr	r2, [r9]
   410f0:	add	r3, r2, r8, lsl #3
   410f4:	ldrb	r0, [r3, #4]!
   410f8:	cmp	r0, #4
   410fc:	bne	411ec <__assert_fail@plt+0x2e770>
   41100:	ldr	r0, [r9, #12]
   41104:	ldr	r1, [r9, #20]
   41108:	add	r6, sl, sl, lsl #1
   4110c:	ldr	r4, [r0, r8, lsl #2]
   41110:	add	r0, r1, r6, lsl #2
   41114:	mov	r1, #0
   41118:	str	r1, [r0, #4]
   4111c:	mov	r0, r9
   41120:	ldr	r1, [r2, r4, lsl #3]!
   41124:	ldr	r2, [r2, #4]
   41128:	bl	40cd0 <__assert_fail@plt+0x2e254>
   4112c:	mov	r7, r0
   41130:	mov	r0, #12
   41134:	cmn	r7, #1
   41138:	str	r0, [sp, #12]
   4113c:	beq	41560 <__assert_fail@plt+0x2eae4>
   41140:	ldr	r1, [r9]
   41144:	movw	r0, #65280	; 0xff00
   41148:	movw	r3, #255	; 0xff
   4114c:	movt	r0, #3
   41150:	movt	r3, #65532	; 0xfffc
   41154:	mov	ip, r0
   41158:	ldr	r0, [sp, #16]
   4115c:	add	r1, r1, r7, lsl #3
   41160:	ldr	r2, [r1, #4]
   41164:	and	r0, ip, r0, lsl #8
   41168:	and	r2, r2, r3
   4116c:	orr	r0, r2, r0
   41170:	str	r0, [r1, #4]
   41174:	ldr	r0, [r9]
   41178:	add	r1, r0, r4, lsl #3
   4117c:	add	r0, r0, r7, lsl #3
   41180:	ldr	r1, [r1, #4]
   41184:	ldr	r2, [r0, #4]
   41188:	and	r1, r1, ip
   4118c:	orr	r1, r1, r2
   41190:	str	r1, [r0, #4]
   41194:	ldr	r0, [r9]
   41198:	add	r0, r0, r7, lsl #3
   4119c:	ldr	r1, [r0, #4]
   411a0:	orr	r1, r1, #262144	; 0x40000
   411a4:	str	r1, [r0, #4]
   411a8:	ldr	r0, [r9, #16]
   411ac:	str	r4, [r0, r7, lsl #2]
   411b0:	ldr	r0, [r9, #12]
   411b4:	ldr	r1, [r0, r8, lsl #2]
   411b8:	str	r1, [r0, sl, lsl #2]
   411bc:	mov	r1, r7
   411c0:	ldr	r0, [r9, #20]
   411c4:	add	r0, r0, r6, lsl #2
   411c8:	bl	41734 <__assert_fail@plt+0x2ecb8>
   411cc:	mov	r1, #0
   411d0:	cmp	r0, #0
   411d4:	mov	r8, r4
   411d8:	mov	sl, r7
   411dc:	beq	41560 <__assert_fail@plt+0x2eae4>
   411e0:	cmp	r1, #0
   411e4:	beq	410ec <__assert_fail@plt+0x2e670>
   411e8:	b	41550 <__assert_fail@plt+0x2ead4>
   411ec:	ldr	r0, [r9, #20]
   411f0:	add	ip, r8, r8, lsl #1
   411f4:	add	r7, r0, ip, lsl #2
   411f8:	ldr	r1, [r7, #4]
   411fc:	cmp	r1, #0
   41200:	beq	4156c <__assert_fail@plt+0x2eaf0>
   41204:	ldr	r7, [r7, #8]
   41208:	add	r6, sl, sl, lsl #1
   4120c:	cmp	r1, #1
   41210:	add	r0, r0, r6, lsl #2
   41214:	ldr	r5, [r7]
   41218:	mov	r7, #0
   4121c:	str	r7, [r0, #4]
   41220:	bne	4125c <__assert_fail@plt+0x2e7e0>
   41224:	ldr	r1, [sp, #8]
   41228:	cmp	r8, r1
   4122c:	bne	4145c <__assert_fail@plt+0x2e9e0>
   41230:	cmp	sl, r8
   41234:	beq	4145c <__assert_fail@plt+0x2e9e0>
   41238:	mov	r1, r5
   4123c:	bl	41734 <__assert_fail@plt+0x2ecb8>
   41240:	ldr	r8, [sp, #8]
   41244:	cmp	r0, #0
   41248:	mov	r1, #1
   4124c:	movwne	r1, #2
   41250:	cmp	r1, #0
   41254:	beq	410ec <__assert_fail@plt+0x2e670>
   41258:	b	41550 <__assert_fail@plt+0x2ead4>
   4125c:	ldr	r1, [r9, #8]
   41260:	ldr	r8, [sp, #16]
   41264:	str	r6, [sp, #4]
   41268:	sub	r3, r1, #1
   4126c:	cmp	r3, #1
   41270:	blt	412c0 <__assert_fail@plt+0x2e844>
   41274:	add	r3, r2, r3, lsl #3
   41278:	ldr	r6, [r3, #4]
   4127c:	ands	r3, r6, #262144	; 0x40000
   41280:	beq	412c0 <__assert_fail@plt+0x2e844>
   41284:	ldr	r4, [r9, #16]
   41288:	sub	r3, r2, #12
   4128c:	sub	r4, r4, #4
   41290:	ldr	r7, [r4, r1, lsl #2]
   41294:	cmp	r7, r5
   41298:	ubfxeq	r7, r6, #8, #10
   4129c:	cmpeq	r7, r8
   412a0:	beq	41524 <__assert_fail@plt+0x2eaa8>
   412a4:	sub	r7, r1, #2
   412a8:	cmp	r7, #1
   412ac:	blt	412c0 <__assert_fail@plt+0x2e844>
   412b0:	ldr	r6, [r3, r1, lsl #3]
   412b4:	sub	r1, r1, #1
   412b8:	ands	r7, r6, #262144	; 0x40000
   412bc:	bne	41290 <__assert_fail@plt+0x2e814>
   412c0:	ldr	r1, [r2, r5, lsl #3]!
   412c4:	mov	r0, r9
   412c8:	mov	sl, ip
   412cc:	ldr	r2, [r2, #4]
   412d0:	bl	40cd0 <__assert_fail@plt+0x2e254>
   412d4:	mov	r4, r0
   412d8:	mov	r0, #12
   412dc:	cmn	r4, #1
   412e0:	str	r0, [sp, #12]
   412e4:	beq	41560 <__assert_fail@plt+0x2eae4>
   412e8:	ldr	r1, [r9]
   412ec:	movw	r0, #65280	; 0xff00
   412f0:	movw	r7, #255	; 0xff
   412f4:	ldr	r6, [sp, #4]
   412f8:	movt	r0, #3
   412fc:	movt	r7, #65532	; 0xfffc
   41300:	mov	r3, r0
   41304:	and	r0, r0, r8, lsl #8
   41308:	add	r1, r1, r4, lsl #3
   4130c:	ldr	r2, [r1, #4]
   41310:	and	r2, r2, r7
   41314:	orr	r0, r2, r0
   41318:	str	r0, [r1, #4]
   4131c:	ldr	r0, [r9]
   41320:	add	r1, r0, r5, lsl #3
   41324:	add	r0, r0, r4, lsl #3
   41328:	ldr	r1, [r1, #4]
   4132c:	ldr	r2, [r0, #4]
   41330:	and	r1, r1, r3
   41334:	orr	r1, r1, r2
   41338:	str	r1, [r0, #4]
   4133c:	ldr	r0, [r9]
   41340:	add	r0, r0, r4, lsl #3
   41344:	ldr	r1, [r0, #4]
   41348:	orr	r1, r1, #262144	; 0x40000
   4134c:	str	r1, [r0, #4]
   41350:	mov	r1, r4
   41354:	ldr	r0, [r9, #16]
   41358:	str	r5, [r0, r4, lsl #2]
   4135c:	ldr	r0, [r9, #20]
   41360:	add	r0, r0, r6, lsl #2
   41364:	bl	41734 <__assert_fail@plt+0x2ecb8>
   41368:	cmp	r0, #0
   4136c:	beq	41560 <__assert_fail@plt+0x2eae4>
   41370:	ldr	r0, [sp, #16]
   41374:	ldr	r3, [sp, #8]
   41378:	mov	r1, r5
   4137c:	mov	r2, r4
   41380:	str	r0, [sp]
   41384:	mov	r0, r9
   41388:	bl	410c8 <__assert_fail@plt+0x2e64c>
   4138c:	cmp	r0, #0
   41390:	bne	4157c <__assert_fail@plt+0x2eb00>
   41394:	ldr	r1, [r9, #20]
   41398:	ldr	r0, [r9]
   4139c:	add	r1, r1, sl, lsl #2
   413a0:	ldr	r1, [r1, #8]
   413a4:	ldr	r8, [r1, #4]
   413a8:	ldr	r1, [r0, r8, lsl #3]!
   413ac:	ldr	r2, [r0, #4]
   413b0:	mov	r0, r9
   413b4:	bl	40cd0 <__assert_fail@plt+0x2e254>
   413b8:	mov	sl, r0
   413bc:	mov	r0, #12
   413c0:	cmn	sl, #1
   413c4:	str	r0, [sp, #12]
   413c8:	beq	41560 <__assert_fail@plt+0x2eae4>
   413cc:	ldr	r1, [r9]
   413d0:	movw	r0, #65280	; 0xff00
   413d4:	movw	r7, #255	; 0xff
   413d8:	movt	r0, #3
   413dc:	movt	r7, #65532	; 0xfffc
   413e0:	mov	r3, r0
   413e4:	ldr	r0, [sp, #16]
   413e8:	add	r1, r1, sl, lsl #3
   413ec:	ldr	r2, [r1, #4]
   413f0:	and	r0, r3, r0, lsl #8
   413f4:	and	r2, r2, r7
   413f8:	orr	r0, r2, r0
   413fc:	str	r0, [r1, #4]
   41400:	ldr	r0, [r9]
   41404:	add	r1, r0, r8, lsl #3
   41408:	add	r0, r0, sl, lsl #3
   4140c:	ldr	r1, [r1, #4]
   41410:	ldr	r2, [r0, #4]
   41414:	and	r1, r1, r3
   41418:	orr	r1, r1, r2
   4141c:	str	r1, [r0, #4]
   41420:	ldr	r0, [r9]
   41424:	add	r0, r0, sl, lsl #3
   41428:	ldr	r1, [r0, #4]
   4142c:	orr	r1, r1, #262144	; 0x40000
   41430:	str	r1, [r0, #4]
   41434:	mov	r1, sl
   41438:	ldr	r0, [r9, #16]
   4143c:	str	r8, [r0, sl, lsl #2]
   41440:	ldr	r0, [r9, #20]
   41444:	add	r0, r0, r6, lsl #2
   41448:	bl	41734 <__assert_fail@plt+0x2ecb8>
   4144c:	mov	r1, #0
   41450:	cmp	r0, #0
   41454:	bne	411e0 <__assert_fail@plt+0x2e764>
   41458:	b	41560 <__assert_fail@plt+0x2eae4>
   4145c:	ldr	r1, [r2, r5, lsl #3]!
   41460:	ldr	r4, [r3]
   41464:	mov	r0, r9
   41468:	ldr	r2, [r2, #4]
   4146c:	bl	40cd0 <__assert_fail@plt+0x2e254>
   41470:	mov	sl, r0
   41474:	ubfx	r0, r4, #8, #10
   41478:	mov	r1, #12
   4147c:	cmn	sl, #1
   41480:	str	r1, [sp, #12]
   41484:	beq	41560 <__assert_fail@plt+0x2eae4>
   41488:	ldr	r1, [sp, #16]
   4148c:	movw	r7, #255	; 0xff
   41490:	movt	r7, #65532	; 0xfffc
   41494:	orr	r1, r0, r1
   41498:	movw	r0, #65280	; 0xff00
   4149c:	movt	r0, #3
   414a0:	str	r1, [sp, #16]
   414a4:	mov	r3, r0
   414a8:	and	r0, r0, r1, lsl #8
   414ac:	ldr	r1, [r9]
   414b0:	add	r1, r1, sl, lsl #3
   414b4:	ldr	r2, [r1, #4]
   414b8:	and	r2, r2, r7
   414bc:	orr	r0, r2, r0
   414c0:	str	r0, [r1, #4]
   414c4:	ldr	r0, [r9]
   414c8:	add	r1, r0, r5, lsl #3
   414cc:	add	r0, r0, sl, lsl #3
   414d0:	ldr	r1, [r1, #4]
   414d4:	ldr	r2, [r0, #4]
   414d8:	and	r1, r1, r3
   414dc:	orr	r1, r1, r2
   414e0:	str	r1, [r0, #4]
   414e4:	ldr	r0, [r9]
   414e8:	add	r0, r0, sl, lsl #3
   414ec:	ldr	r1, [r0, #4]
   414f0:	orr	r1, r1, #262144	; 0x40000
   414f4:	str	r1, [r0, #4]
   414f8:	mov	r1, sl
   414fc:	ldr	r0, [r9, #16]
   41500:	str	r5, [r0, sl, lsl #2]
   41504:	ldr	r0, [r9, #20]
   41508:	add	r0, r0, r6, lsl #2
   4150c:	bl	41734 <__assert_fail@plt+0x2ecb8>
   41510:	mov	r1, #0
   41514:	cmp	r0, #0
   41518:	mov	r8, r5
   4151c:	bne	411e0 <__assert_fail@plt+0x2e764>
   41520:	b	41560 <__assert_fail@plt+0x2eae4>
   41524:	sub	r1, r1, #1
   41528:	mov	sl, ip
   4152c:	bl	41734 <__assert_fail@plt+0x2ecb8>
   41530:	ldr	r6, [sp, #4]
   41534:	cmp	r0, #0
   41538:	bne	41394 <__assert_fail@plt+0x2e918>
   4153c:	mov	r0, #12
   41540:	str	r0, [sp, #12]
   41544:	ldr	r0, [sp, #12]
   41548:	sub	sp, fp, #28
   4154c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41550:	mov	r0, #12
   41554:	cmp	r1, #2
   41558:	str	r0, [sp, #12]
   4155c:	beq	41578 <__assert_fail@plt+0x2eafc>
   41560:	ldr	r0, [sp, #12]
   41564:	sub	sp, fp, #28
   41568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4156c:	ldr	r0, [r9, #12]
   41570:	ldr	r1, [r0, r8, lsl #2]
   41574:	str	r1, [r0, sl, lsl #2]
   41578:	mov	r0, #0
   4157c:	str	r0, [sp, #12]
   41580:	ldr	r0, [sp, #12]
   41584:	sub	sp, fp, #28
   41588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4158c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   41590:	add	fp, sp, #24
   41594:	mov	r8, #0
   41598:	cmp	r1, #0
   4159c:	beq	4170c <__assert_fail@plt+0x2ec90>
   415a0:	mov	r5, r0
   415a4:	ldr	r0, [r1, #4]
   415a8:	mov	r9, r1
   415ac:	cmp	r0, #0
   415b0:	beq	4170c <__assert_fail@plt+0x2ec90>
   415b4:	ldr	r1, [r5, #4]
   415b8:	ldr	r2, [r5]
   415bc:	add	r3, r1, r0, lsl #1
   415c0:	cmp	r2, r3
   415c4:	bge	415f4 <__assert_fail@plt+0x2eb78>
   415c8:	add	r7, r2, r0
   415cc:	ldr	r0, [r5, #8]
   415d0:	lsl	r1, r7, #3
   415d4:	bl	36328 <__assert_fail@plt+0x238ac>
   415d8:	cmp	r0, #0
   415dc:	beq	41728 <__assert_fail@plt+0x2ecac>
   415e0:	str	r0, [r5, #8]
   415e4:	lsl	r0, r7, #1
   415e8:	str	r0, [r5]
   415ec:	ldr	r1, [r5, #4]
   415f0:	ldr	r0, [r9, #4]
   415f4:	cmp	r1, #0
   415f8:	beq	41714 <__assert_fail@plt+0x2ec98>
   415fc:	add	r7, r1, r0, lsl #1
   41600:	sub	r1, r1, #1
   41604:	sub	r0, r0, #1
   41608:	orr	r2, r0, r1
   4160c:	cmp	r2, #0
   41610:	blt	41674 <__assert_fail@plt+0x2ebf8>
   41614:	ldr	r2, [r9, #8]
   41618:	ldr	r3, [r5, #8]
   4161c:	ldr	r4, [r2, r0, lsl #2]
   41620:	ldr	r6, [r3, r1, lsl #2]
   41624:	cmp	r6, r4
   41628:	bne	41644 <__assert_fail@plt+0x2ebc8>
   4162c:	sub	r1, r1, #1
   41630:	sub	r0, r0, #1
   41634:	orr	r6, r0, r1
   41638:	cmn	r6, #1
   4163c:	bgt	4161c <__assert_fail@plt+0x2eba0>
   41640:	b	41674 <__assert_fail@plt+0x2ebf8>
   41644:	bge	41664 <__assert_fail@plt+0x2ebe8>
   41648:	sub	r7, r7, #1
   4164c:	sub	r0, r0, #1
   41650:	str	r4, [r3, r7, lsl #2]
   41654:	orr	r6, r0, r1
   41658:	cmn	r6, #1
   4165c:	bgt	4161c <__assert_fail@plt+0x2eba0>
   41660:	b	41674 <__assert_fail@plt+0x2ebf8>
   41664:	sub	r1, r1, #1
   41668:	orr	r6, r0, r1
   4166c:	cmn	r6, #1
   41670:	bgt	4161c <__assert_fail@plt+0x2eba0>
   41674:	cmp	r0, #0
   41678:	blt	41698 <__assert_fail@plt+0x2ec1c>
   4167c:	add	r2, r0, #1
   41680:	ldr	r0, [r5, #8]
   41684:	ldr	r1, [r9, #8]
   41688:	sub	r7, r7, r2
   4168c:	lsl	r2, r2, #2
   41690:	add	r0, r0, r7, lsl #2
   41694:	bl	124b8 <memcpy@plt>
   41698:	ldr	r0, [r5, #4]
   4169c:	ldr	r2, [r9, #4]
   416a0:	sub	r1, r0, #1
   416a4:	add	r3, r1, r2, lsl #1
   416a8:	sub	r2, r3, r7
   416ac:	adds	r2, r2, #1
   416b0:	beq	4170c <__assert_fail@plt+0x2ec90>
   416b4:	add	r0, r2, r0
   416b8:	str	r0, [r5, #4]
   416bc:	ldr	r0, [r5, #8]
   416c0:	ldr	r6, [r0, r1, lsl #2]
   416c4:	ldr	r5, [r0, r3, lsl #2]
   416c8:	cmp	r5, r6
   416cc:	ble	416e8 <__assert_fail@plt+0x2ec6c>
   416d0:	add	r6, r2, r1
   416d4:	subs	r2, r2, #1
   416d8:	sub	r3, r3, #1
   416dc:	str	r5, [r0, r6, lsl #2]
   416e0:	bne	416c0 <__assert_fail@plt+0x2ec44>
   416e4:	b	4170c <__assert_fail@plt+0x2ec90>
   416e8:	add	r5, r2, r1
   416ec:	cmp	r1, #0
   416f0:	str	r6, [r0, r5, lsl #2]
   416f4:	sub	r6, r1, #1
   416f8:	mov	r1, r6
   416fc:	bgt	416c0 <__assert_fail@plt+0x2ec44>
   41700:	add	r1, r0, r7, lsl #2
   41704:	lsl	r2, r2, #2
   41708:	bl	124b8 <memcpy@plt>
   4170c:	mov	r0, r8
   41710:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   41714:	str	r0, [r5, #4]
   41718:	ldr	r0, [r5, #8]
   4171c:	ldr	r2, [r9, #4]
   41720:	ldr	r1, [r9, #8]
   41724:	b	41704 <__assert_fail@plt+0x2ec88>
   41728:	mov	r8, #12
   4172c:	mov	r0, r8
   41730:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   41734:	push	{r4, r5, r6, sl, fp, lr}
   41738:	add	fp, sp, #16
   4173c:	ldr	r2, [r0]
   41740:	mov	r5, r1
   41744:	mov	r4, r0
   41748:	cmp	r2, #0
   4174c:	beq	4177c <__assert_fail@plt+0x2ed00>
   41750:	ldr	r1, [r4, #4]
   41754:	cmp	r1, #0
   41758:	bne	417b8 <__assert_fail@plt+0x2ed3c>
   4175c:	ldr	r0, [r4, #8]
   41760:	str	r5, [r0]
   41764:	ldr	r0, [r4, #4]
   41768:	mov	r6, #1
   4176c:	add	r0, r0, #1
   41770:	str	r0, [r4, #4]
   41774:	mov	r0, r6
   41778:	pop	{r4, r5, r6, sl, fp, pc}
   4177c:	mov	r6, #1
   41780:	mov	r0, #4
   41784:	str	r6, [r4]
   41788:	str	r6, [r4, #4]
   4178c:	bl	35608 <__assert_fail@plt+0x22b8c>
   41790:	cmp	r0, #0
   41794:	str	r0, [r4, #8]
   41798:	strne	r5, [r0]
   4179c:	movne	r0, r6
   417a0:	popne	{r4, r5, r6, sl, fp, pc}
   417a4:	mov	r6, #0
   417a8:	mov	r0, r6
   417ac:	str	r6, [r4]
   417b0:	str	r6, [r4, #4]
   417b4:	pop	{r4, r5, r6, sl, fp, pc}
   417b8:	cmp	r2, r1
   417bc:	bne	417f4 <__assert_fail@plt+0x2ed78>
   417c0:	lsl	r0, r2, #1
   417c4:	lsl	r1, r2, #3
   417c8:	str	r0, [r4]
   417cc:	ldr	r0, [r4, #8]
   417d0:	bl	36328 <__assert_fail@plt+0x238ac>
   417d4:	cmp	r0, #0
   417d8:	beq	41870 <__assert_fail@plt+0x2edf4>
   417dc:	str	r0, [r4, #8]
   417e0:	ldr	r1, [r4, #4]
   417e4:	ldr	r2, [r0]
   417e8:	cmp	r2, r5
   417ec:	bgt	41804 <__assert_fail@plt+0x2ed88>
   417f0:	b	41838 <__assert_fail@plt+0x2edbc>
   417f4:	ldr	r0, [r4, #8]
   417f8:	ldr	r2, [r0]
   417fc:	cmp	r2, r5
   41800:	ble	41838 <__assert_fail@plt+0x2edbc>
   41804:	cmp	r1, #1
   41808:	blt	41868 <__assert_fail@plt+0x2edec>
   4180c:	add	r2, r0, r1, lsl #2
   41810:	add	r1, r1, #1
   41814:	mov	r3, r2
   41818:	ldr	r6, [r3, #-4]!
   4181c:	sub	r1, r1, #1
   41820:	cmp	r1, #1
   41824:	str	r6, [r2]
   41828:	mov	r2, r3
   4182c:	bgt	41818 <__assert_fail@plt+0x2ed9c>
   41830:	sub	r1, r1, #1
   41834:	b	41868 <__assert_fail@plt+0x2edec>
   41838:	add	r2, r0, r1, lsl #2
   4183c:	ldr	r3, [r2, #-4]
   41840:	cmp	r3, r5
   41844:	ble	41868 <__assert_fail@plt+0x2edec>
   41848:	sub	r1, r1, #2
   4184c:	str	r3, [r2]
   41850:	sub	r1, r1, #1
   41854:	ldr	r3, [r2, #-8]
   41858:	sub	r2, r2, #4
   4185c:	cmp	r3, r5
   41860:	bgt	4184c <__assert_fail@plt+0x2edd0>
   41864:	add	r1, r1, #2
   41868:	str	r5, [r0, r1, lsl #2]
   4186c:	b	41764 <__assert_fail@plt+0x2ece8>
   41870:	mov	r6, #0
   41874:	mov	r0, r6
   41878:	pop	{r4, r5, r6, sl, fp, pc}
   4187c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41880:	add	fp, sp, #28
   41884:	sub	sp, sp, #28
   41888:	ldr	lr, [r2, #4]
   4188c:	mov	sl, r0
   41890:	cmp	lr, #0
   41894:	beq	41a38 <__assert_fail@plt+0x2efbc>
   41898:	mov	r9, r3
   4189c:	add	r7, lr, r3
   418a0:	cmp	lr, #1
   418a4:	str	r2, [sp, #20]
   418a8:	blt	41918 <__assert_fail@plt+0x2ee9c>
   418ac:	ldr	r6, [r2, #8]
   418b0:	mov	r2, #0
   418b4:	cmp	lr, #4
   418b8:	bcc	41900 <__assert_fail@plt+0x2ee84>
   418bc:	mov	r0, #0
   418c0:	bic	r2, lr, #3
   418c4:	vdup.32	q8, r0
   418c8:	mov	r3, r2
   418cc:	mov	r0, r6
   418d0:	vmov.32	d16[0], r7
   418d4:	vld1.32	{d18-d19}, [r0]!
   418d8:	subs	r3, r3, #4
   418dc:	vadd.i32	q8, q9, q8
   418e0:	bne	418d4 <__assert_fail@plt+0x2ee58>
   418e4:	vext.8	q9, q8, q8, #8
   418e8:	cmp	lr, r2
   418ec:	vadd.i32	q8, q8, q9
   418f0:	vdup.32	q9, d16[1]
   418f4:	vadd.i32	q8, q8, q9
   418f8:	vmov.32	r7, d16[0]
   418fc:	beq	41918 <__assert_fail@plt+0x2ee9c>
   41900:	add	r0, r6, r2, lsl #2
   41904:	sub	r2, lr, r2
   41908:	ldr	r3, [r0], #4
   4190c:	subs	r2, r2, #1
   41910:	add	r7, r3, r7
   41914:	bne	41908 <__assert_fail@plt+0x2ee8c>
   41918:	ldr	r2, [r1, #32]
   4191c:	str	r1, [sp, #12]
   41920:	ldr	r1, [r1, #68]	; 0x44
   41924:	and	r1, r1, r7
   41928:	add	r3, r1, r1, lsl #1
   4192c:	ldr	r1, [r2, r3, lsl #2]
   41930:	cmp	r1, #1
   41934:	blt	419c8 <__assert_fail@plt+0x2ef4c>
   41938:	ldr	r0, [sp, #20]
   4193c:	cmp	r0, #0
   41940:	beq	419c8 <__assert_fail@plt+0x2ef4c>
   41944:	add	r2, r2, r3, lsl #2
   41948:	sub	ip, lr, #1
   4194c:	mov	r6, #0
   41950:	ldr	r2, [r2, #8]
   41954:	ldr	r8, [r2, r6, lsl #2]
   41958:	ldr	r3, [r8]
   4195c:	cmp	r3, r7
   41960:	bne	419bc <__assert_fail@plt+0x2ef40>
   41964:	ldrb	r3, [r8, #52]	; 0x34
   41968:	and	r3, r3, #15
   4196c:	cmp	r3, r9
   41970:	bne	419bc <__assert_fail@plt+0x2ef40>
   41974:	ldr	r4, [r8, #40]	; 0x28
   41978:	cmp	r4, #0
   4197c:	beq	419bc <__assert_fail@plt+0x2ef40>
   41980:	ldr	r3, [r4, #4]
   41984:	cmp	r3, lr
   41988:	bne	419bc <__assert_fail@plt+0x2ef40>
   4198c:	mov	r3, ip
   41990:	add	r5, r3, #1
   41994:	cmp	r5, #1
   41998:	blt	421d8 <__assert_fail@plt+0x2f75c>
   4199c:	ldr	r0, [sp, #20]
   419a0:	ldr	r5, [r0, #8]
   419a4:	ldr	r0, [r4, #8]
   419a8:	ldr	r5, [r5, r3, lsl #2]
   419ac:	ldr	r0, [r0, r3, lsl #2]
   419b0:	sub	r3, r3, #1
   419b4:	cmp	r0, r5
   419b8:	beq	41990 <__assert_fail@plt+0x2ef14>
   419bc:	add	r6, r6, #1
   419c0:	cmp	r6, r1
   419c4:	blt	41954 <__assert_fail@plt+0x2eed8>
   419c8:	mov	r0, #56	; 0x38
   419cc:	mov	r1, #1
   419d0:	bl	325e0 <__assert_fail@plt+0x1fb64>
   419d4:	cmp	r0, #0
   419d8:	beq	42210 <__assert_fail@plt+0x2f794>
   419dc:	ldr	ip, [sp, #20]
   419e0:	str	sl, [sp]
   419e4:	add	lr, r0, #4
   419e8:	mov	r8, r0
   419ec:	str	lr, [sp, #8]
   419f0:	ldr	sl, [ip, #4]
   419f4:	cmp	sl, #1
   419f8:	str	sl, [r0, #8]
   419fc:	blt	41a4c <__assert_fail@plt+0x2efd0>
   41a00:	lsl	r0, sl, #2
   41a04:	str	sl, [r8, #4]
   41a08:	bl	35608 <__assert_fail@plt+0x22b8c>
   41a0c:	cmp	r0, #0
   41a10:	str	r0, [r8, #12]
   41a14:	beq	42228 <__assert_fail@plt+0x2f7ac>
   41a18:	ldr	r4, [sp, #20]
   41a1c:	ldr	sl, [r4, #4]
   41a20:	ldr	r1, [r4, #8]
   41a24:	lsl	r2, sl, #2
   41a28:	bl	124b8 <memcpy@plt>
   41a2c:	ldr	lr, [sp, #8]
   41a30:	mov	ip, r4
   41a34:	b	41a5c <__assert_fail@plt+0x2efe0>
   41a38:	mov	r8, #0
   41a3c:	str	r8, [sl]
   41a40:	mov	r0, r8
   41a44:	sub	sp, fp, #28
   41a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41a4c:	mov	r0, #0
   41a50:	str	r0, [lr]
   41a54:	str	r0, [lr, #4]
   41a58:	str	r0, [lr, #8]
   41a5c:	mov	r2, r8
   41a60:	and	r1, r9, #15
   41a64:	cmp	sl, #1
   41a68:	ldrb	r0, [r2, #52]!	; 0x34
   41a6c:	and	r0, r0, #240	; 0xf0
   41a70:	str	lr, [r2, #-12]
   41a74:	str	r2, [sp, #24]
   41a78:	orr	r0, r0, r1
   41a7c:	strb	r0, [r2]
   41a80:	ldr	r0, [sp, #12]
   41a84:	blt	421c4 <__assert_fail@plt+0x2f748>
   41a88:	and	r1, r9, #4
   41a8c:	tst	r9, #1
   41a90:	str	r1, [sp, #4]
   41a94:	and	r1, r9, #2
   41a98:	bne	41c68 <__assert_fail@plt+0x2f1ec>
   41a9c:	cmp	r1, #0
   41aa0:	bne	41e34 <__assert_fail@plt+0x2f3b8>
   41aa4:	movw	r1, #65280	; 0xff00
   41aa8:	mov	r6, #0
   41aac:	mov	r9, #0
   41ab0:	movt	r1, #3
   41ab4:	add	r1, r1, #255	; 0xff
   41ab8:	str	r1, [sp, #16]
   41abc:	b	41bb4 <__assert_fail@plt+0x2f138>
   41ac0:	mov	r0, #12
   41ac4:	bl	35608 <__assert_fail@plt+0x22b8c>
   41ac8:	cmp	r0, #0
   41acc:	beq	421e4 <__assert_fail@plt+0x2f768>
   41ad0:	ldr	ip, [sp, #20]
   41ad4:	str	r0, [r8, #40]	; 0x28
   41ad8:	mov	r5, r0
   41adc:	ldr	sl, [ip, #4]
   41ae0:	cmp	sl, #0
   41ae4:	str	sl, [r0, #4]
   41ae8:	ble	41b20 <__assert_fail@plt+0x2f0a4>
   41aec:	lsl	r0, sl, #2
   41af0:	str	sl, [r5]
   41af4:	bl	35608 <__assert_fail@plt+0x22b8c>
   41af8:	cmp	r0, #0
   41afc:	str	r0, [r5, #8]
   41b00:	beq	421f4 <__assert_fail@plt+0x2f778>
   41b04:	ldr	r5, [sp, #20]
   41b08:	ldr	sl, [r5, #4]
   41b0c:	ldr	r1, [r5, #8]
   41b10:	lsl	r2, sl, #2
   41b14:	bl	124b8 <memcpy@plt>
   41b18:	mov	ip, r5
   41b1c:	b	41b30 <__assert_fail@plt+0x2f0b4>
   41b20:	mov	r0, #0
   41b24:	str	r0, [r5]
   41b28:	str	r0, [r5, #4]
   41b2c:	str	r0, [r5, #8]
   41b30:	ldr	r1, [sp, #24]
   41b34:	ldr	lr, [sp, #8]
   41b38:	mov	r9, #0
   41b3c:	ldrb	r0, [r1]
   41b40:	orr	r0, r0, #128	; 0x80
   41b44:	strb	r0, [r1]
   41b48:	ldr	r0, [sp, #12]
   41b4c:	tst	r4, #4352	; 0x1100
   41b50:	beq	41c44 <__assert_fail@plt+0x2f1c8>
   41b54:	sub	r1, r6, r9
   41b58:	cmp	r1, #0
   41b5c:	ldrge	r2, [r8, #8]
   41b60:	cmpge	r2, r1
   41b64:	bgt	41b7c <__assert_fail@plt+0x2f100>
   41b68:	add	r9, r9, #1
   41b6c:	add	r6, r6, #1
   41b70:	cmp	r6, sl
   41b74:	blt	41bb4 <__assert_fail@plt+0x2f138>
   41b78:	b	421c4 <__assert_fail@plt+0x2f748>
   41b7c:	sub	r2, r2, #1
   41b80:	cmp	r2, r1
   41b84:	str	r2, [r8, #8]
   41b88:	ble	41b68 <__assert_fail@plt+0x2f0ec>
   41b8c:	ldr	r2, [r8, #12]
   41b90:	add	r3, r2, r1, lsl #2
   41b94:	ldr	r3, [r3, #4]
   41b98:	str	r3, [r2, r1, lsl #2]
   41b9c:	add	r1, r1, #1
   41ba0:	ldr	r3, [r8, #8]
   41ba4:	cmp	r1, r3
   41ba8:	blt	41b90 <__assert_fail@plt+0x2f114>
   41bac:	ldr	sl, [ip, #4]
   41bb0:	b	41b68 <__assert_fail@plt+0x2f0ec>
   41bb4:	ldr	r1, [ip, #8]
   41bb8:	ldr	r2, [r0]
   41bbc:	ldr	r1, [r1, r6, lsl #2]
   41bc0:	add	r1, r2, r1, lsl #3
   41bc4:	ldr	r4, [r1, #4]
   41bc8:	ldr	r1, [sp, #16]
   41bcc:	and	r1, r4, r1
   41bd0:	cmp	r1, #1
   41bd4:	beq	41c58 <__assert_fail@plt+0x2f1dc>
   41bd8:	ldr	r5, [sp, #24]
   41bdc:	mov	r2, #32
   41be0:	movw	r1, #65280	; 0xff00
   41be4:	and	r2, r2, r4, lsr #15
   41be8:	movt	r1, #3
   41bec:	and	r1, r4, r1
   41bf0:	ldrb	r3, [r5]
   41bf4:	orr	r2, r3, r2
   41bf8:	uxtb	r3, r4
   41bfc:	cmp	r3, #4
   41c00:	strb	r2, [r5]
   41c04:	beq	41c18 <__assert_fail@plt+0x2f19c>
   41c08:	cmp	r3, #2
   41c0c:	bne	41c28 <__assert_fail@plt+0x2f1ac>
   41c10:	mov	r3, #16
   41c14:	b	41c1c <__assert_fail@plt+0x2f1a0>
   41c18:	mov	r3, #64	; 0x40
   41c1c:	orr	r2, r2, r3
   41c20:	ldr	r3, [sp, #24]
   41c24:	strb	r2, [r3]
   41c28:	cmp	r1, #0
   41c2c:	beq	41c58 <__assert_fail@plt+0x2f1dc>
   41c30:	ldr	r1, [r8, #40]	; 0x28
   41c34:	cmp	r1, lr
   41c38:	beq	41ac0 <__assert_fail@plt+0x2f044>
   41c3c:	tst	r4, #4352	; 0x1100
   41c40:	bne	41b54 <__assert_fail@plt+0x2f0d8>
   41c44:	ldr	r1, [sp, #4]
   41c48:	cmp	r1, #0
   41c4c:	bne	41c58 <__assert_fail@plt+0x2f1dc>
   41c50:	ands	r1, r4, #16384	; 0x4000
   41c54:	bne	41b54 <__assert_fail@plt+0x2f0d8>
   41c58:	add	r6, r6, #1
   41c5c:	cmp	r6, sl
   41c60:	blt	41bb4 <__assert_fail@plt+0x2f138>
   41c64:	b	421c4 <__assert_fail@plt+0x2f748>
   41c68:	cmp	r1, #0
   41c6c:	bne	41ff8 <__assert_fail@plt+0x2f57c>
   41c70:	movw	r1, #65280	; 0xff00
   41c74:	mov	r6, #0
   41c78:	mov	r9, #0
   41c7c:	movt	r1, #3
   41c80:	add	r1, r1, #255	; 0xff
   41c84:	str	r1, [sp, #16]
   41c88:	b	41d80 <__assert_fail@plt+0x2f304>
   41c8c:	mov	r0, #12
   41c90:	bl	35608 <__assert_fail@plt+0x22b8c>
   41c94:	cmp	r0, #0
   41c98:	beq	421e4 <__assert_fail@plt+0x2f768>
   41c9c:	ldr	ip, [sp, #20]
   41ca0:	str	r0, [r8, #40]	; 0x28
   41ca4:	mov	r5, r0
   41ca8:	ldr	sl, [ip, #4]
   41cac:	cmp	sl, #0
   41cb0:	str	sl, [r0, #4]
   41cb4:	ble	41cec <__assert_fail@plt+0x2f270>
   41cb8:	lsl	r0, sl, #2
   41cbc:	str	sl, [r5]
   41cc0:	bl	35608 <__assert_fail@plt+0x22b8c>
   41cc4:	cmp	r0, #0
   41cc8:	str	r0, [r5, #8]
   41ccc:	beq	421f4 <__assert_fail@plt+0x2f778>
   41cd0:	ldr	r5, [sp, #20]
   41cd4:	ldr	sl, [r5, #4]
   41cd8:	ldr	r1, [r5, #8]
   41cdc:	lsl	r2, sl, #2
   41ce0:	bl	124b8 <memcpy@plt>
   41ce4:	mov	ip, r5
   41ce8:	b	41cfc <__assert_fail@plt+0x2f280>
   41cec:	mov	r0, #0
   41cf0:	str	r0, [r5]
   41cf4:	str	r0, [r5, #4]
   41cf8:	str	r0, [r5, #8]
   41cfc:	ldr	r1, [sp, #24]
   41d00:	ldr	lr, [sp, #8]
   41d04:	mov	r9, #0
   41d08:	ldrb	r0, [r1]
   41d0c:	orr	r0, r0, #128	; 0x80
   41d10:	strb	r0, [r1]
   41d14:	ldr	r0, [sp, #12]
   41d18:	tst	r4, #4608	; 0x1200
   41d1c:	beq	41e10 <__assert_fail@plt+0x2f394>
   41d20:	sub	r1, r6, r9
   41d24:	cmp	r1, #0
   41d28:	ldrge	r2, [r8, #8]
   41d2c:	cmpge	r2, r1
   41d30:	bgt	41d48 <__assert_fail@plt+0x2f2cc>
   41d34:	add	r9, r9, #1
   41d38:	add	r6, r6, #1
   41d3c:	cmp	r6, sl
   41d40:	blt	41d80 <__assert_fail@plt+0x2f304>
   41d44:	b	421c4 <__assert_fail@plt+0x2f748>
   41d48:	sub	r2, r2, #1
   41d4c:	cmp	r2, r1
   41d50:	str	r2, [r8, #8]
   41d54:	ble	41d34 <__assert_fail@plt+0x2f2b8>
   41d58:	ldr	r2, [r8, #12]
   41d5c:	add	r3, r2, r1, lsl #2
   41d60:	ldr	r3, [r3, #4]
   41d64:	str	r3, [r2, r1, lsl #2]
   41d68:	add	r1, r1, #1
   41d6c:	ldr	r3, [r8, #8]
   41d70:	cmp	r1, r3
   41d74:	blt	41d5c <__assert_fail@plt+0x2f2e0>
   41d78:	ldr	sl, [ip, #4]
   41d7c:	b	41d34 <__assert_fail@plt+0x2f2b8>
   41d80:	ldr	r1, [ip, #8]
   41d84:	ldr	r2, [r0]
   41d88:	ldr	r1, [r1, r6, lsl #2]
   41d8c:	add	r1, r2, r1, lsl #3
   41d90:	ldr	r4, [r1, #4]
   41d94:	ldr	r1, [sp, #16]
   41d98:	and	r1, r4, r1
   41d9c:	cmp	r1, #1
   41da0:	beq	41e24 <__assert_fail@plt+0x2f3a8>
   41da4:	ldr	r5, [sp, #24]
   41da8:	mov	r2, #32
   41dac:	movw	r1, #65280	; 0xff00
   41db0:	and	r2, r2, r4, lsr #15
   41db4:	movt	r1, #3
   41db8:	and	r1, r4, r1
   41dbc:	ldrb	r3, [r5]
   41dc0:	orr	r2, r3, r2
   41dc4:	uxtb	r3, r4
   41dc8:	cmp	r3, #4
   41dcc:	strb	r2, [r5]
   41dd0:	beq	41de4 <__assert_fail@plt+0x2f368>
   41dd4:	cmp	r3, #2
   41dd8:	bne	41df4 <__assert_fail@plt+0x2f378>
   41ddc:	mov	r3, #16
   41de0:	b	41de8 <__assert_fail@plt+0x2f36c>
   41de4:	mov	r3, #64	; 0x40
   41de8:	orr	r2, r2, r3
   41dec:	ldr	r3, [sp, #24]
   41df0:	strb	r2, [r3]
   41df4:	cmp	r1, #0
   41df8:	beq	41e24 <__assert_fail@plt+0x2f3a8>
   41dfc:	ldr	r1, [r8, #40]	; 0x28
   41e00:	cmp	r1, lr
   41e04:	beq	41c8c <__assert_fail@plt+0x2f210>
   41e08:	tst	r4, #4608	; 0x1200
   41e0c:	bne	41d20 <__assert_fail@plt+0x2f2a4>
   41e10:	ldr	r1, [sp, #4]
   41e14:	cmp	r1, #0
   41e18:	bne	41e24 <__assert_fail@plt+0x2f3a8>
   41e1c:	ands	r1, r4, #16384	; 0x4000
   41e20:	bne	41d20 <__assert_fail@plt+0x2f2a4>
   41e24:	add	r6, r6, #1
   41e28:	cmp	r6, sl
   41e2c:	blt	41d80 <__assert_fail@plt+0x2f304>
   41e30:	b	421c4 <__assert_fail@plt+0x2f748>
   41e34:	movw	r1, #65280	; 0xff00
   41e38:	mov	r6, #0
   41e3c:	mov	r9, #0
   41e40:	movt	r1, #3
   41e44:	add	r1, r1, #255	; 0xff
   41e48:	str	r1, [sp, #16]
   41e4c:	b	41f44 <__assert_fail@plt+0x2f4c8>
   41e50:	mov	r0, #12
   41e54:	bl	35608 <__assert_fail@plt+0x22b8c>
   41e58:	cmp	r0, #0
   41e5c:	beq	421e4 <__assert_fail@plt+0x2f768>
   41e60:	ldr	ip, [sp, #20]
   41e64:	str	r0, [r8, #40]	; 0x28
   41e68:	mov	r5, r0
   41e6c:	ldr	sl, [ip, #4]
   41e70:	cmp	sl, #0
   41e74:	str	sl, [r0, #4]
   41e78:	ble	41eb0 <__assert_fail@plt+0x2f434>
   41e7c:	lsl	r0, sl, #2
   41e80:	str	sl, [r5]
   41e84:	bl	35608 <__assert_fail@plt+0x22b8c>
   41e88:	cmp	r0, #0
   41e8c:	str	r0, [r5, #8]
   41e90:	beq	421f4 <__assert_fail@plt+0x2f778>
   41e94:	ldr	r5, [sp, #20]
   41e98:	ldr	sl, [r5, #4]
   41e9c:	ldr	r1, [r5, #8]
   41ea0:	lsl	r2, sl, #2
   41ea4:	bl	124b8 <memcpy@plt>
   41ea8:	mov	ip, r5
   41eac:	b	41ec0 <__assert_fail@plt+0x2f444>
   41eb0:	mov	r0, #0
   41eb4:	str	r0, [r5]
   41eb8:	str	r0, [r5, #4]
   41ebc:	str	r0, [r5, #8]
   41ec0:	ldr	r1, [sp, #24]
   41ec4:	ldr	lr, [sp, #8]
   41ec8:	mov	r9, #0
   41ecc:	ldrb	r0, [r1]
   41ed0:	orr	r0, r0, #128	; 0x80
   41ed4:	strb	r0, [r1]
   41ed8:	ldr	r0, [sp, #12]
   41edc:	tst	r4, #256	; 0x100
   41ee0:	beq	41fd4 <__assert_fail@plt+0x2f558>
   41ee4:	sub	r1, r6, r9
   41ee8:	cmp	r1, #0
   41eec:	ldrge	r2, [r8, #8]
   41ef0:	cmpge	r2, r1
   41ef4:	bgt	41f0c <__assert_fail@plt+0x2f490>
   41ef8:	add	r9, r9, #1
   41efc:	add	r6, r6, #1
   41f00:	cmp	r6, sl
   41f04:	blt	41f44 <__assert_fail@plt+0x2f4c8>
   41f08:	b	421c4 <__assert_fail@plt+0x2f748>
   41f0c:	sub	r2, r2, #1
   41f10:	cmp	r2, r1
   41f14:	str	r2, [r8, #8]
   41f18:	ble	41ef8 <__assert_fail@plt+0x2f47c>
   41f1c:	ldr	r2, [r8, #12]
   41f20:	add	r3, r2, r1, lsl #2
   41f24:	ldr	r3, [r3, #4]
   41f28:	str	r3, [r2, r1, lsl #2]
   41f2c:	add	r1, r1, #1
   41f30:	ldr	r3, [r8, #8]
   41f34:	cmp	r1, r3
   41f38:	blt	41f20 <__assert_fail@plt+0x2f4a4>
   41f3c:	ldr	sl, [ip, #4]
   41f40:	b	41ef8 <__assert_fail@plt+0x2f47c>
   41f44:	ldr	r1, [ip, #8]
   41f48:	ldr	r2, [r0]
   41f4c:	ldr	r1, [r1, r6, lsl #2]
   41f50:	add	r1, r2, r1, lsl #3
   41f54:	ldr	r4, [r1, #4]
   41f58:	ldr	r1, [sp, #16]
   41f5c:	and	r1, r4, r1
   41f60:	cmp	r1, #1
   41f64:	beq	41fe8 <__assert_fail@plt+0x2f56c>
   41f68:	ldr	r5, [sp, #24]
   41f6c:	mov	r2, #32
   41f70:	movw	r1, #65280	; 0xff00
   41f74:	and	r2, r2, r4, lsr #15
   41f78:	movt	r1, #3
   41f7c:	and	r1, r4, r1
   41f80:	ldrb	r3, [r5]
   41f84:	orr	r2, r3, r2
   41f88:	uxtb	r3, r4
   41f8c:	cmp	r3, #4
   41f90:	strb	r2, [r5]
   41f94:	beq	41fa8 <__assert_fail@plt+0x2f52c>
   41f98:	cmp	r3, #2
   41f9c:	bne	41fb8 <__assert_fail@plt+0x2f53c>
   41fa0:	mov	r3, #16
   41fa4:	b	41fac <__assert_fail@plt+0x2f530>
   41fa8:	mov	r3, #64	; 0x40
   41fac:	orr	r2, r2, r3
   41fb0:	ldr	r3, [sp, #24]
   41fb4:	strb	r2, [r3]
   41fb8:	cmp	r1, #0
   41fbc:	beq	41fe8 <__assert_fail@plt+0x2f56c>
   41fc0:	ldr	r1, [r8, #40]	; 0x28
   41fc4:	cmp	r1, lr
   41fc8:	beq	41e50 <__assert_fail@plt+0x2f3d4>
   41fcc:	tst	r4, #256	; 0x100
   41fd0:	bne	41ee4 <__assert_fail@plt+0x2f468>
   41fd4:	ldr	r1, [sp, #4]
   41fd8:	cmp	r1, #0
   41fdc:	bne	41fe8 <__assert_fail@plt+0x2f56c>
   41fe0:	ands	r1, r4, #16384	; 0x4000
   41fe4:	bne	41ee4 <__assert_fail@plt+0x2f468>
   41fe8:	add	r6, r6, #1
   41fec:	cmp	r6, sl
   41ff0:	blt	41f44 <__assert_fail@plt+0x2f4c8>
   41ff4:	b	421c4 <__assert_fail@plt+0x2f748>
   41ff8:	movw	r1, #65280	; 0xff00
   41ffc:	mov	r9, #0
   42000:	mov	r5, #0
   42004:	movt	r1, #3
   42008:	add	r1, r1, #255	; 0xff
   4200c:	str	r1, [sp, #16]
   42010:	ldr	r1, [ip, #8]
   42014:	ldr	r2, [r0]
   42018:	ldr	r1, [r1, r9, lsl #2]
   4201c:	add	r1, r2, r1, lsl #3
   42020:	ldr	r6, [r1, #4]
   42024:	ldr	r1, [sp, #16]
   42028:	and	r1, r6, r1
   4202c:	cmp	r1, #1
   42030:	beq	420b4 <__assert_fail@plt+0x2f638>
   42034:	ldr	r4, [sp, #24]
   42038:	mov	r2, #32
   4203c:	movw	r1, #65280	; 0xff00
   42040:	and	r2, r2, r6, lsr #15
   42044:	movt	r1, #3
   42048:	and	r1, r6, r1
   4204c:	ldrb	r3, [r4]
   42050:	orr	r2, r3, r2
   42054:	uxtb	r3, r6
   42058:	cmp	r3, #2
   4205c:	strb	r2, [r4]
   42060:	beq	42074 <__assert_fail@plt+0x2f5f8>
   42064:	cmp	r3, #4
   42068:	bne	42084 <__assert_fail@plt+0x2f608>
   4206c:	mov	r3, #64	; 0x40
   42070:	b	42078 <__assert_fail@plt+0x2f5fc>
   42074:	mov	r3, #16
   42078:	orr	r2, r2, r3
   4207c:	ldr	r3, [sp, #24]
   42080:	strb	r2, [r3]
   42084:	cmp	r1, #0
   42088:	beq	420b4 <__assert_fail@plt+0x2f638>
   4208c:	ldr	r1, [r8, #40]	; 0x28
   42090:	cmp	r1, lr
   42094:	beq	420c4 <__assert_fail@plt+0x2f648>
   42098:	tst	r6, #512	; 0x200
   4209c:	bne	42158 <__assert_fail@plt+0x2f6dc>
   420a0:	ldr	r1, [sp, #4]
   420a4:	cmp	r1, #0
   420a8:	bne	420b4 <__assert_fail@plt+0x2f638>
   420ac:	ands	r1, r6, #16384	; 0x4000
   420b0:	bne	42158 <__assert_fail@plt+0x2f6dc>
   420b4:	add	r9, r9, #1
   420b8:	cmp	r9, sl
   420bc:	blt	42010 <__assert_fail@plt+0x2f594>
   420c0:	b	421c4 <__assert_fail@plt+0x2f748>
   420c4:	mov	r0, #12
   420c8:	bl	35608 <__assert_fail@plt+0x22b8c>
   420cc:	cmp	r0, #0
   420d0:	beq	421e4 <__assert_fail@plt+0x2f768>
   420d4:	ldr	ip, [sp, #20]
   420d8:	str	r0, [r8, #40]	; 0x28
   420dc:	mov	r5, r0
   420e0:	ldr	sl, [ip, #4]
   420e4:	cmp	sl, #1
   420e8:	str	sl, [r0, #4]
   420ec:	blt	42124 <__assert_fail@plt+0x2f6a8>
   420f0:	lsl	r0, sl, #2
   420f4:	str	sl, [r5]
   420f8:	bl	35608 <__assert_fail@plt+0x22b8c>
   420fc:	cmp	r0, #0
   42100:	str	r0, [r5, #8]
   42104:	beq	421f4 <__assert_fail@plt+0x2f778>
   42108:	ldr	r4, [sp, #20]
   4210c:	ldr	sl, [r4, #4]
   42110:	ldr	r1, [r4, #8]
   42114:	lsl	r2, sl, #2
   42118:	bl	124b8 <memcpy@plt>
   4211c:	mov	ip, r4
   42120:	b	42134 <__assert_fail@plt+0x2f6b8>
   42124:	mov	r0, #0
   42128:	str	r0, [r5]
   4212c:	str	r0, [r5, #4]
   42130:	str	r0, [r5, #8]
   42134:	ldr	r1, [sp, #24]
   42138:	ldr	lr, [sp, #8]
   4213c:	mov	r5, #0
   42140:	ldrb	r0, [r1]
   42144:	orr	r0, r0, #128	; 0x80
   42148:	strb	r0, [r1]
   4214c:	ldr	r0, [sp, #12]
   42150:	tst	r6, #512	; 0x200
   42154:	beq	420a0 <__assert_fail@plt+0x2f624>
   42158:	sub	r1, r9, r5
   4215c:	cmp	r1, #0
   42160:	ldrge	r2, [r8, #8]
   42164:	cmpge	r2, r1
   42168:	bgt	42180 <__assert_fail@plt+0x2f704>
   4216c:	add	r5, r5, #1
   42170:	add	r9, r9, #1
   42174:	cmp	r9, sl
   42178:	blt	42010 <__assert_fail@plt+0x2f594>
   4217c:	b	421c4 <__assert_fail@plt+0x2f748>
   42180:	sub	r2, r2, #1
   42184:	cmp	r2, r1
   42188:	str	r2, [r8, #8]
   4218c:	ble	4216c <__assert_fail@plt+0x2f6f0>
   42190:	ldr	r2, [r8, #12]
   42194:	add	r3, r2, r1, lsl #2
   42198:	ldr	r3, [r3, #4]
   4219c:	str	r3, [r2, r1, lsl #2]
   421a0:	add	r1, r1, #1
   421a4:	ldr	r3, [r8, #8]
   421a8:	cmp	r1, r3
   421ac:	blt	42194 <__assert_fail@plt+0x2f718>
   421b0:	ldr	sl, [ip, #4]
   421b4:	add	r5, r5, #1
   421b8:	add	r9, r9, #1
   421bc:	cmp	r9, sl
   421c0:	blt	42010 <__assert_fail@plt+0x2f594>
   421c4:	mov	r1, r8
   421c8:	mov	r2, r7
   421cc:	bl	42240 <__assert_fail@plt+0x2f7c4>
   421d0:	cmp	r0, #0
   421d4:	bne	421e4 <__assert_fail@plt+0x2f768>
   421d8:	mov	r0, r8
   421dc:	sub	sp, fp, #28
   421e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   421e4:	mov	r0, r8
   421e8:	bl	3b7d0 <__assert_fail@plt+0x28d54>
   421ec:	ldr	sl, [sp]
   421f0:	b	42210 <__assert_fail@plt+0x2f794>
   421f4:	ldr	sl, [sp]
   421f8:	add	r0, r5, #4
   421fc:	mov	r1, #0
   42200:	str	r1, [r0]
   42204:	mov	r0, r8
   42208:	str	r1, [r5]
   4220c:	bl	3b7d0 <__assert_fail@plt+0x28d54>
   42210:	mov	r0, #12
   42214:	mov	r8, #0
   42218:	str	r0, [sl]
   4221c:	mov	r0, r8
   42220:	sub	sp, fp, #28
   42224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42228:	mov	r0, #0
   4222c:	str	r0, [r8, #4]
   42230:	str	r0, [r8, #8]
   42234:	mov	r0, r8
   42238:	bl	32c40 <__assert_fail@plt+0x201c4>
   4223c:	b	421ec <__assert_fail@plt+0x2f770>
   42240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42244:	add	fp, sp, #28
   42248:	sub	sp, sp, #4
   4224c:	str	r2, [r1]
   42250:	mov	r4, r1
   42254:	mov	r7, r0
   42258:	mov	r0, #0
   4225c:	mov	r9, r2
   42260:	ldr	r1, [r1, #8]
   42264:	str	r1, [r4, #16]
   42268:	str	r0, [r4, #20]
   4226c:	lsl	r0, r1, #2
   42270:	bl	35608 <__assert_fail@plt+0x22b8c>
   42274:	mov	r8, #12
   42278:	cmp	r0, #0
   4227c:	str	r0, [r4, #24]
   42280:	beq	42340 <__assert_fail@plt+0x2f8c4>
   42284:	ldr	r1, [r4, #8]
   42288:	cmp	r1, #1
   4228c:	blt	42300 <__assert_fail@plt+0x2f884>
   42290:	mov	r5, #0
   42294:	mov	sl, #2
   42298:	ldr	r2, [r4, #12]
   4229c:	ldr	r6, [r2, r5, lsl #2]
   422a0:	ldr	r2, [r7]
   422a4:	add	r2, r2, r6, lsl #3
   422a8:	ldrb	r2, [r2, #4]
   422ac:	tst	r2, #8
   422b0:	bne	422f4 <__assert_fail@plt+0x2f878>
   422b4:	ldr	r2, [r4, #16]
   422b8:	ldr	r1, [r4, #20]
   422bc:	cmp	r2, r1
   422c0:	bne	422e4 <__assert_fail@plt+0x2f868>
   422c4:	add	r1, sl, r2, lsl #1
   422c8:	str	r1, [r4, #16]
   422cc:	lsl	r1, r1, #2
   422d0:	bl	36328 <__assert_fail@plt+0x238ac>
   422d4:	cmp	r0, #0
   422d8:	beq	42340 <__assert_fail@plt+0x2f8c4>
   422dc:	str	r0, [r4, #24]
   422e0:	ldr	r1, [r4, #20]
   422e4:	add	r2, r1, #1
   422e8:	str	r2, [r4, #20]
   422ec:	str	r6, [r0, r1, lsl #2]
   422f0:	ldr	r1, [r4, #8]
   422f4:	add	r5, r5, #1
   422f8:	cmp	r5, r1
   422fc:	blt	42298 <__assert_fail@plt+0x2f81c>
   42300:	ldr	r1, [r7, #68]	; 0x44
   42304:	ldr	r0, [r7, #32]
   42308:	and	r1, r1, r9
   4230c:	mov	r5, r0
   42310:	add	r2, r1, r1, lsl #1
   42314:	ldr	r1, [r5, r2, lsl #2]!
   42318:	mov	r6, r5
   4231c:	ldr	r3, [r6, #4]!
   42320:	cmp	r3, r1
   42324:	ble	4234c <__assert_fail@plt+0x2f8d0>
   42328:	add	r0, r0, r2, lsl #2
   4232c:	ldr	r0, [r0, #8]
   42330:	add	r2, r1, #1
   42334:	mov	r8, #0
   42338:	str	r2, [r5]
   4233c:	str	r4, [r0, r1, lsl #2]
   42340:	mov	r0, r8
   42344:	sub	sp, fp, #28
   42348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4234c:	add	r7, r0, r2, lsl #2
   42350:	mov	r2, #2
   42354:	ldr	r0, [r7, #8]!
   42358:	add	r9, r2, r1, lsl #1
   4235c:	lsl	r1, r9, #2
   42360:	bl	36328 <__assert_fail@plt+0x238ac>
   42364:	cmp	r0, #0
   42368:	beq	42340 <__assert_fail@plt+0x2f8c4>
   4236c:	str	r0, [r7]
   42370:	str	r9, [r6]
   42374:	ldr	r1, [r5]
   42378:	b	42330 <__assert_fail@plt+0x2f8b4>
   4237c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42380:	add	fp, sp, #28
   42384:	sub	sp, sp, #36	; 0x24
   42388:	mov	r4, r0
   4238c:	ldr	r0, [r0, #24]
   42390:	mov	r6, r2
   42394:	mov	r9, r1
   42398:	cmp	r0, r1
   4239c:	ble	425b8 <__assert_fail@plt+0x2fb3c>
   423a0:	ldr	r0, [r4, #80]	; 0x50
   423a4:	mov	r1, #4
   423a8:	mov	r5, r9
   423ac:	cmp	r0, #2
   423b0:	movge	r0, #0
   423b4:	strge	r0, [r4, #16]
   423b8:	strge	r0, [r4, #20]
   423bc:	mov	r0, #0
   423c0:	tst	r6, #1
   423c4:	str	r0, [r4, #24]
   423c8:	str	r0, [r4, #28]
   423cc:	str	r0, [r4, #32]
   423d0:	strb	r0, [r4, #76]	; 0x4c
   423d4:	movweq	r1, #6
   423d8:	ldr	r2, [r4, #44]	; 0x2c
   423dc:	ldr	r3, [r4, #52]	; 0x34
   423e0:	str	r2, [r4, #48]	; 0x30
   423e4:	str	r3, [r4, #56]	; 0x38
   423e8:	str	r1, [r4, #60]	; 0x3c
   423ec:	ldrb	r1, [r4, #75]	; 0x4b
   423f0:	cmp	r1, #0
   423f4:	ldreq	r1, [r4]
   423f8:	streq	r1, [r4, #4]
   423fc:	cmp	r5, #0
   42400:	beq	42534 <__assert_fail@plt+0x2fab8>
   42404:	ldr	r1, [r4, #32]
   42408:	cmp	r5, r1
   4240c:	bge	425c8 <__assert_fail@plt+0x2fb4c>
   42410:	ldrb	r0, [r4, #76]	; 0x4c
   42414:	cmp	r0, #0
   42418:	bne	42778 <__assert_fail@plt+0x2fcfc>
   4241c:	cmp	r5, #0
   42420:	ble	42464 <__assert_fail@plt+0x2f9e8>
   42424:	ldr	r1, [r4, #48]	; 0x30
   42428:	sub	r0, r5, #1
   4242c:	cmp	r1, r0
   42430:	beq	42840 <__assert_fail@plt+0x2fdc4>
   42434:	ldr	r1, [r4, #80]	; 0x50
   42438:	cmp	r1, #2
   4243c:	blt	4247c <__assert_fail@plt+0x2fa00>
   42440:	ldr	r0, [r4, #8]
   42444:	mov	r1, r5
   42448:	sub	r0, r0, #4
   4244c:	ldr	r6, [r0, r1, lsl #2]
   42450:	cmn	r6, #1
   42454:	bne	424b0 <__assert_fail@plt+0x2fa34>
   42458:	sub	r1, r1, #1
   4245c:	cmp	r1, #0
   42460:	bgt	4244c <__assert_fail@plt+0x2f9d0>
   42464:	ldr	r1, [r4, #60]	; 0x3c
   42468:	str	r1, [r4, #60]	; 0x3c
   4246c:	ldr	r0, [r4, #80]	; 0x50
   42470:	cmp	r0, #2
   42474:	bge	424e4 <__assert_fail@plt+0x2fa68>
   42478:	b	424fc <__assert_fail@plt+0x2fa80>
   4247c:	ldr	r1, [r4, #4]
   42480:	ldr	r2, [r4, #68]	; 0x44
   42484:	ldrb	r0, [r1, r0]
   42488:	ubfx	r1, r0, #5, #3
   4248c:	and	r3, r0, #31
   42490:	ldr	r2, [r2, r1, lsl #2]
   42494:	mov	r1, #1
   42498:	tst	r2, r1, lsl r3
   4249c:	bne	424d4 <__assert_fail@plt+0x2fa58>
   424a0:	mov	r1, #0
   424a4:	cmp	r0, #10
   424a8:	beq	424c8 <__assert_fail@plt+0x2fa4c>
   424ac:	b	424d4 <__assert_fail@plt+0x2fa58>
   424b0:	ldrb	r0, [r4, #78]	; 0x4e
   424b4:	cmp	r0, #0
   424b8:	bne	42a3c <__assert_fail@plt+0x2ffc0>
   424bc:	mov	r1, #0
   424c0:	cmp	r6, #10
   424c4:	bne	424d4 <__assert_fail@plt+0x2fa58>
   424c8:	ldrb	r1, [r4, #77]	; 0x4d
   424cc:	cmp	r1, #0
   424d0:	movwne	r1, #2
   424d4:	str	r1, [r4, #60]	; 0x3c
   424d8:	ldr	r0, [r4, #80]	; 0x50
   424dc:	cmp	r0, #2
   424e0:	blt	424fc <__assert_fail@plt+0x2fa80>
   424e4:	ldr	r2, [r4, #28]
   424e8:	ldr	r0, [r4, #8]
   424ec:	sub	r2, r2, r5
   424f0:	add	r1, r0, r5, lsl #2
   424f4:	lsl	r2, r2, #2
   424f8:	bl	1244c <memmove@plt>
   424fc:	ldrb	r0, [r4, #75]	; 0x4b
   42500:	cmp	r0, #0
   42504:	bne	42828 <__assert_fail@plt+0x2fdac>
   42508:	ldr	r0, [r4, #28]
   4250c:	ldr	r1, [r4, #32]
   42510:	sub	r0, r0, r5
   42514:	sub	r1, r1, r5
   42518:	str	r0, [r4, #28]
   4251c:	str	r1, [r4, #32]
   42520:	ldrb	r0, [r4, #75]	; 0x4b
   42524:	cmp	r0, #0
   42528:	ldreq	r0, [r4, #4]
   4252c:	addeq	r0, r0, r5
   42530:	streq	r0, [r4, #4]
   42534:	str	r9, [r4, #24]
   42538:	ldr	r0, [r4, #48]	; 0x30
   4253c:	ldr	r3, [r4, #80]	; 0x50
   42540:	ldr	r2, [r4, #56]	; 0x38
   42544:	sub	r1, r0, r5
   42548:	cmp	r3, #2
   4254c:	sub	r0, r2, r5
   42550:	str	r1, [r4, #48]	; 0x30
   42554:	str	r0, [r4, #56]	; 0x38
   42558:	blt	42580 <__assert_fail@plt+0x2fb04>
   4255c:	ldrb	r0, [r4, #72]	; 0x48
   42560:	cmp	r0, #0
   42564:	beq	425a0 <__assert_fail@plt+0x2fb24>
   42568:	mov	r0, r4
   4256c:	bl	3b830 <__assert_fail@plt+0x28db4>
   42570:	cmp	r0, #0
   42574:	beq	425a8 <__assert_fail@plt+0x2fb2c>
   42578:	sub	sp, fp, #28
   4257c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42580:	ldrb	r0, [r4, #75]	; 0x4b
   42584:	cmp	r0, #0
   42588:	bne	4285c <__assert_fail@plt+0x2fde0>
   4258c:	str	r1, [r4, #28]
   42590:	mov	r0, #0
   42594:	str	r0, [r4, #40]	; 0x28
   42598:	sub	sp, fp, #28
   4259c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   425a0:	mov	r0, r4
   425a4:	bl	3bef0 <__assert_fail@plt+0x29474>
   425a8:	mov	r0, #0
   425ac:	str	r0, [r4, #40]	; 0x28
   425b0:	sub	sp, fp, #28
   425b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   425b8:	sub	r5, r9, r0
   425bc:	cmp	r5, #0
   425c0:	bne	42404 <__assert_fail@plt+0x2f988>
   425c4:	b	42534 <__assert_fail@plt+0x2fab8>
   425c8:	ldrb	r2, [r4, #76]	; 0x4c
   425cc:	ldr	lr, [r4, #28]
   425d0:	cmp	r2, #0
   425d4:	bne	42bb0 <__assert_fail@plt+0x30134>
   425d8:	mov	r2, #0
   425dc:	str	r2, [r4, #28]
   425e0:	ldr	r3, [r4, #80]	; 0x50
   425e4:	cmp	r3, #2
   425e8:	blt	428ec <__assert_fail@plt+0x2fe70>
   425ec:	ldrb	r2, [r4, #73]	; 0x49
   425f0:	cmp	r2, #0
   425f4:	beq	426b0 <__assert_fail@plt+0x2fc34>
   425f8:	ldr	r7, [r4]
   425fc:	sub	r3, r5, r3
   42600:	add	ip, r7, r0
   42604:	add	r3, ip, r3
   42608:	add	r8, ip, r5
   4260c:	cmp	r3, r7
   42610:	movcc	r3, r7
   42614:	mov	r7, r8
   42618:	sub	r7, r7, #1
   4261c:	cmp	r7, r3
   42620:	bcc	426b0 <__assert_fail@plt+0x2fc34>
   42624:	ldrb	r2, [r7]
   42628:	and	r2, r2, #192	; 0xc0
   4262c:	cmp	r2, #128	; 0x80
   42630:	beq	42618 <__assert_fail@plt+0x2fb9c>
   42634:	ldr	r0, [r4, #48]	; 0x30
   42638:	mov	sl, lr
   4263c:	mov	r1, r7
   42640:	add	r3, ip, r0
   42644:	ldr	r0, [r4, #64]	; 0x40
   42648:	sub	r2, r3, r7
   4264c:	cmp	r0, #0
   42650:	bne	42d7c <__assert_fail@plt+0x30300>
   42654:	mov	r0, #0
   42658:	add	r3, sp, #24
   4265c:	str	r0, [sp, #28]
   42660:	str	r0, [sp, #24]
   42664:	add	r0, sp, #20
   42668:	bl	35638 <__assert_fail@plt+0x22bbc>
   4266c:	sub	r1, r8, r7
   42670:	mvn	r7, #0
   42674:	cmp	r0, r1
   42678:	bcc	4269c <__assert_fail@plt+0x2fc20>
   4267c:	cmn	r0, #3
   42680:	bhi	4269c <__assert_fail@plt+0x2fc20>
   42684:	mov	r2, #0
   42688:	sub	r0, r0, r1
   4268c:	str	r2, [r4, #16]
   42690:	str	r2, [r4, #20]
   42694:	str	r0, [r4, #28]
   42698:	ldr	r7, [sp, #20]
   4269c:	cmn	r7, #1
   426a0:	bne	4275c <__assert_fail@plt+0x2fce0>
   426a4:	ldr	r0, [r4, #24]
   426a8:	ldr	r1, [r4, #32]
   426ac:	mov	lr, sl
   426b0:	add	r8, r1, r0
   426b4:	cmp	r8, r9
   426b8:	bge	42a5c <__assert_fail@plt+0x2ffe0>
   426bc:	add	sl, r4, #16
   426c0:	str	lr, [sp]
   426c4:	ldr	r0, [r4]
   426c8:	ldr	r2, [r4, #44]	; 0x2c
   426cc:	mov	r3, sl
   426d0:	add	r1, r0, r8
   426d4:	ldr	r0, [sl]
   426d8:	sub	r7, r2, r8
   426dc:	mov	r2, r7
   426e0:	str	r0, [sp, #8]
   426e4:	ldr	r0, [sl, #4]
   426e8:	str	r0, [sp, #4]
   426ec:	add	r0, sp, #24
   426f0:	bl	35638 <__assert_fail@plt+0x22bbc>
   426f4:	sub	r1, r0, #1
   426f8:	cmn	r1, #3
   426fc:	bcs	42714 <__assert_fail@plt+0x2fc98>
   42700:	ldr	r7, [sp, #24]
   42704:	add	r8, r0, r8
   42708:	cmp	r8, r9
   4270c:	blt	426c4 <__assert_fail@plt+0x2fc48>
   42710:	b	42748 <__assert_fail@plt+0x2fccc>
   42714:	cmp	r7, #0
   42718:	mov	r1, #0
   4271c:	ldr	r3, [sp, #4]
   42720:	ldr	r2, [sp, #8]
   42724:	cmpne	r0, #0
   42728:	ldrne	r0, [r4]
   4272c:	ldrbne	r1, [r0, r8]
   42730:	stm	sl, {r2, r3}
   42734:	mov	r0, #1
   42738:	mov	r7, r1
   4273c:	add	r8, r0, r8
   42740:	cmp	r8, r9
   42744:	blt	426c4 <__assert_fail@plt+0x2fc48>
   42748:	ldr	lr, [sp]
   4274c:	sub	r0, r8, r9
   42750:	cmn	r7, #1
   42754:	str	r0, [r4, #28]
   42758:	beq	42a64 <__assert_fail@plt+0x2ffe8>
   4275c:	ldrb	r0, [r4, #78]	; 0x4e
   42760:	cmp	r0, #0
   42764:	bne	42d4c <__assert_fail@plt+0x302d0>
   42768:	mov	r1, #0
   4276c:	cmp	r7, #10
   42770:	beq	42b88 <__assert_fail@plt+0x3010c>
   42774:	b	42b94 <__assert_fail@plt+0x30118>
   42778:	ldr	ip, [r4, #12]
   4277c:	ldr	r0, [r4, #28]
   42780:	mov	r1, #0
   42784:	add	r2, r1, r0
   42788:	add	r2, r2, r2, lsr #31
   4278c:	asr	r7, r2, #1
   42790:	ldr	r3, [ip, r7, lsl #2]
   42794:	mov	r2, r7
   42798:	cmp	r3, r5
   4279c:	bgt	427ac <__assert_fail@plt+0x2fd30>
   427a0:	bge	427b8 <__assert_fail@plt+0x2fd3c>
   427a4:	add	r1, r7, #1
   427a8:	mov	r2, r0
   427ac:	cmp	r1, r2
   427b0:	mov	r0, r2
   427b4:	blt	42784 <__assert_fail@plt+0x2fd08>
   427b8:	mov	r8, #0
   427bc:	cmp	r3, r5
   427c0:	movwlt	r8, #1
   427c4:	add	sl, r7, r8
   427c8:	cmp	sl, #0
   427cc:	ble	42810 <__assert_fail@plt+0x2fd94>
   427d0:	ldr	r1, [r4, #48]	; 0x30
   427d4:	sub	r0, sl, #1
   427d8:	cmp	r1, r0
   427dc:	beq	42bd8 <__assert_fail@plt+0x3015c>
   427e0:	ldr	r1, [r4, #80]	; 0x50
   427e4:	cmp	r1, #2
   427e8:	blt	42948 <__assert_fail@plt+0x2fecc>
   427ec:	ldr	r0, [r4, #8]
   427f0:	mov	r1, sl
   427f4:	sub	r0, r0, #4
   427f8:	ldr	r6, [r0, r1, lsl #2]
   427fc:	cmn	r6, #1
   42800:	bne	4297c <__assert_fail@plt+0x2ff00>
   42804:	sub	r1, r1, #1
   42808:	cmp	r1, #0
   4280c:	bgt	427f8 <__assert_fail@plt+0x2fd7c>
   42810:	ldr	r1, [r4, #60]	; 0x3c
   42814:	str	r1, [r4, #60]	; 0x3c
   42818:	cmp	sl, r5
   4281c:	ldr	r2, [r4, #28]
   42820:	beq	429b0 <__assert_fail@plt+0x2ff34>
   42824:	b	42bf0 <__assert_fail@plt+0x30174>
   42828:	ldr	r2, [r4, #28]
   4282c:	ldr	r0, [r4, #4]
   42830:	add	r1, r0, r5
   42834:	sub	r2, r2, r5
   42838:	bl	1244c <memmove@plt>
   4283c:	b	42508 <__assert_fail@plt+0x2fa8c>
   42840:	and	r0, r6, #2
   42844:	eor	r1, r0, #10
   42848:	str	r1, [r4, #60]	; 0x3c
   4284c:	ldr	r0, [r4, #80]	; 0x50
   42850:	cmp	r0, #2
   42854:	bge	424e4 <__assert_fail@plt+0x2fa68>
   42858:	b	424fc <__assert_fail@plt+0x2fa80>
   4285c:	ldrb	r0, [r4, #72]	; 0x48
   42860:	cmp	r0, #0
   42864:	beq	42ab0 <__assert_fail@plt+0x30034>
   42868:	ldr	r6, [r4, #36]	; 0x24
   4286c:	ldr	r5, [r4, #28]
   42870:	cmp	r6, r1
   42874:	movgt	r6, r1
   42878:	cmp	r5, r6
   4287c:	blt	42888 <__assert_fail@plt+0x2fe0c>
   42880:	b	428d4 <__assert_fail@plt+0x2fe58>
   42884:	ldr	r9, [r4, #24]
   42888:	ldr	r1, [r4]
   4288c:	ldr	r0, [r4, #64]	; 0x40
   42890:	add	r1, r1, r9
   42894:	cmp	r0, #0
   42898:	ldrb	r7, [r1, r5]
   4289c:	ldrbne	r7, [r0, r7]
   428a0:	add	r0, r7, #128	; 0x80
   428a4:	lsr	r0, r0, #7
   428a8:	cmp	r0, #2
   428ac:	bhi	428bc <__assert_fail@plt+0x2fe40>
   428b0:	bl	12728 <__ctype_toupper_loc@plt>
   428b4:	ldr	r0, [r0]
   428b8:	ldr	r7, [r0, r7, lsl #2]
   428bc:	ldr	r0, [r4, #4]
   428c0:	strb	r7, [r0, r5]
   428c4:	add	r5, r5, #1
   428c8:	cmp	r5, r6
   428cc:	blt	42884 <__assert_fail@plt+0x2fe08>
   428d0:	mov	r5, r6
   428d4:	str	r5, [r4, #28]
   428d8:	str	r5, [r4, #32]
   428dc:	mov	r0, #0
   428e0:	str	r0, [r4, #40]	; 0x28
   428e4:	sub	sp, fp, #28
   428e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   428ec:	ldr	r3, [r4]
   428f0:	add	r0, r5, r0
   428f4:	ldr	r1, [r4, #64]	; 0x40
   428f8:	add	r0, r3, r0
   428fc:	cmp	r1, #0
   42900:	ldrb	r0, [r0, #-1]
   42904:	str	r2, [r4, #32]
   42908:	ldrbne	r0, [r1, r0]
   4290c:	ldr	r1, [r4, #68]	; 0x44
   42910:	ubfx	r2, r0, #5, #3
   42914:	and	r3, r0, #31
   42918:	ldr	r2, [r1, r2, lsl #2]
   4291c:	mov	r1, #1
   42920:	tst	r2, r1, lsl r3
   42924:	bne	42940 <__assert_fail@plt+0x2fec4>
   42928:	mov	r1, #0
   4292c:	cmp	r0, #10
   42930:	bne	42940 <__assert_fail@plt+0x2fec4>
   42934:	ldrb	r1, [r4, #77]	; 0x4d
   42938:	cmp	r1, #0
   4293c:	movwne	r1, #2
   42940:	str	r1, [r4, #60]	; 0x3c
   42944:	b	42520 <__assert_fail@plt+0x2faa4>
   42948:	ldr	r1, [r4, #4]
   4294c:	ldr	r2, [r4, #68]	; 0x44
   42950:	ldrb	r0, [r1, r0]
   42954:	ubfx	r1, r0, #5, #3
   42958:	and	r3, r0, #31
   4295c:	ldr	r2, [r2, r1, lsl #2]
   42960:	mov	r1, #1
   42964:	tst	r2, r1, lsl r3
   42968:	bne	429a0 <__assert_fail@plt+0x2ff24>
   4296c:	mov	r1, #0
   42970:	cmp	r0, #10
   42974:	beq	42994 <__assert_fail@plt+0x2ff18>
   42978:	b	429a0 <__assert_fail@plt+0x2ff24>
   4297c:	ldrb	r0, [r4, #78]	; 0x4e
   42980:	cmp	r0, #0
   42984:	bne	42d2c <__assert_fail@plt+0x302b0>
   42988:	mov	r1, #0
   4298c:	cmp	r6, #10
   42990:	bne	429a0 <__assert_fail@plt+0x2ff24>
   42994:	ldrb	r1, [r4, #77]	; 0x4d
   42998:	cmp	r1, #0
   4299c:	movwne	r1, #2
   429a0:	str	r1, [r4, #60]	; 0x3c
   429a4:	cmp	sl, r5
   429a8:	ldr	r2, [r4, #28]
   429ac:	bne	42bf0 <__assert_fail@plt+0x30174>
   429b0:	cmp	r2, r5
   429b4:	ble	42bf0 <__assert_fail@plt+0x30174>
   429b8:	ldr	r0, [r4, #12]
   429bc:	ldr	r0, [r0, r5, lsl #2]
   429c0:	cmp	r0, r5
   429c4:	bne	42bf0 <__assert_fail@plt+0x30174>
   429c8:	ldr	r0, [r4, #8]
   429cc:	sub	r2, r2, r5
   429d0:	lsl	r2, r2, #2
   429d4:	add	r1, r0, r5, lsl #2
   429d8:	bl	1244c <memmove@plt>
   429dc:	ldr	r2, [r4, #28]
   429e0:	ldr	r0, [r4, #4]
   429e4:	add	r1, r0, r5
   429e8:	sub	r2, r2, r5
   429ec:	bl	1244c <memmove@plt>
   429f0:	ldr	r0, [r4, #28]
   429f4:	ldr	r1, [r4, #32]
   429f8:	sub	r0, r0, r5
   429fc:	sub	r1, r1, r5
   42a00:	cmp	r0, #1
   42a04:	str	r0, [r4, #28]
   42a08:	str	r1, [r4, #32]
   42a0c:	blt	42520 <__assert_fail@plt+0x2faa4>
   42a10:	ldr	r0, [r4, #12]
   42a14:	mov	r2, #0
   42a18:	add	r1, r0, r5, lsl #2
   42a1c:	ldr	r3, [r1, r2, lsl #2]
   42a20:	sub	r3, r3, r5
   42a24:	str	r3, [r0, r2, lsl #2]
   42a28:	add	r2, r2, #1
   42a2c:	ldr	r3, [r4, #28]
   42a30:	cmp	r2, r3
   42a34:	blt	42a1c <__assert_fail@plt+0x2ffa0>
   42a38:	b	42520 <__assert_fail@plt+0x2faa4>
   42a3c:	mov	r0, r6
   42a40:	bl	127dc <iswalnum@plt>
   42a44:	mov	r1, #1
   42a48:	cmp	r6, #95	; 0x5f
   42a4c:	beq	424d4 <__assert_fail@plt+0x2fa58>
   42a50:	cmp	r0, #0
   42a54:	beq	424bc <__assert_fail@plt+0x2fa40>
   42a58:	b	424d4 <__assert_fail@plt+0x2fa58>
   42a5c:	sub	r0, r8, r9
   42a60:	str	r0, [r4, #28]
   42a64:	cmp	lr, #0
   42a68:	ble	42aa8 <__assert_fail@plt+0x3002c>
   42a6c:	ldr	r1, [r4, #48]	; 0x30
   42a70:	sub	r0, lr, #1
   42a74:	cmp	r1, r0
   42a78:	beq	42d20 <__assert_fail@plt+0x302a4>
   42a7c:	ldr	r1, [r4, #80]	; 0x50
   42a80:	cmp	r1, #2
   42a84:	blt	42b3c <__assert_fail@plt+0x300c0>
   42a88:	ldr	r0, [r4, #8]
   42a8c:	sub	r0, r0, #4
   42a90:	ldr	r6, [r0, lr, lsl #2]
   42a94:	cmn	r6, #1
   42a98:	bne	42b70 <__assert_fail@plt+0x300f4>
   42a9c:	sub	lr, lr, #1
   42aa0:	cmp	lr, #0
   42aa4:	bgt	42a90 <__assert_fail@plt+0x30014>
   42aa8:	ldr	r1, [r4, #60]	; 0x3c
   42aac:	b	42b94 <__assert_fail@plt+0x30118>
   42ab0:	ldr	r3, [r4, #64]	; 0x40
   42ab4:	cmp	r3, #0
   42ab8:	beq	425a8 <__assert_fail@plt+0x2fb2c>
   42abc:	ldr	r0, [r4, #36]	; 0x24
   42ac0:	ldr	r2, [r4, #28]
   42ac4:	cmp	r0, r1
   42ac8:	movgt	r0, r1
   42acc:	cmp	r2, r0
   42ad0:	bge	42b24 <__assert_fail@plt+0x300a8>
   42ad4:	ldr	r7, [r4]
   42ad8:	add	r1, r2, r9
   42adc:	ldr	r6, [r4, #4]
   42ae0:	ldrb	r1, [r7, r1]
   42ae4:	ldrb	r1, [r3, r1]
   42ae8:	strb	r1, [r6, r2]
   42aec:	add	r1, r2, #1
   42af0:	cmp	r1, r0
   42af4:	bge	42b20 <__assert_fail@plt+0x300a4>
   42af8:	ldm	r4, {r2, r3}
   42afc:	ldr	r7, [r4, #24]
   42b00:	ldr	r6, [r4, #64]	; 0x40
   42b04:	add	r2, r2, r7
   42b08:	ldrb	r2, [r2, r1]
   42b0c:	ldrb	r2, [r6, r2]
   42b10:	strb	r2, [r3, r1]
   42b14:	add	r1, r1, #1
   42b18:	cmp	r1, r0
   42b1c:	blt	42af8 <__assert_fail@plt+0x3007c>
   42b20:	mov	r2, r0
   42b24:	str	r2, [r4, #28]
   42b28:	str	r2, [r4, #32]
   42b2c:	mov	r0, #0
   42b30:	str	r0, [r4, #40]	; 0x28
   42b34:	sub	sp, fp, #28
   42b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42b3c:	ldr	r1, [r4, #4]
   42b40:	ldr	r2, [r4, #68]	; 0x44
   42b44:	ldrb	r0, [r1, r0]
   42b48:	ubfx	r1, r0, #5, #3
   42b4c:	and	r3, r0, #31
   42b50:	ldr	r2, [r2, r1, lsl #2]
   42b54:	mov	r1, #1
   42b58:	tst	r2, r1, lsl r3
   42b5c:	bne	42b94 <__assert_fail@plt+0x30118>
   42b60:	mov	r1, #0
   42b64:	cmp	r0, #10
   42b68:	beq	42b88 <__assert_fail@plt+0x3010c>
   42b6c:	b	42b94 <__assert_fail@plt+0x30118>
   42b70:	ldrb	r0, [r4, #78]	; 0x4e
   42b74:	cmp	r0, #0
   42b78:	bne	42dc4 <__assert_fail@plt+0x30348>
   42b7c:	mov	r1, #0
   42b80:	cmp	r6, #10
   42b84:	bne	42b94 <__assert_fail@plt+0x30118>
   42b88:	ldrb	r1, [r4, #77]	; 0x4d
   42b8c:	cmp	r1, #0
   42b90:	movwne	r1, #2
   42b94:	str	r1, [r4, #60]	; 0x3c
   42b98:	mov	r0, #0
   42b9c:	ldr	r2, [r4, #28]
   42ba0:	cmp	r2, #0
   42ba4:	bne	42cd8 <__assert_fail@plt+0x3025c>
   42ba8:	str	r0, [r4, #32]
   42bac:	b	42520 <__assert_fail@plt+0x2faa4>
   42bb0:	mov	r2, #0
   42bb4:	strb	r2, [r4, #76]	; 0x4c
   42bb8:	sub	r2, r5, r9
   42bbc:	ldr	r3, [r4, #44]	; 0x2c
   42bc0:	ldr	r7, [r4, #52]	; 0x34
   42bc4:	add	r3, r2, r3
   42bc8:	add	r2, r2, r7
   42bcc:	str	r3, [r4, #48]	; 0x30
   42bd0:	str	r2, [r4, #56]	; 0x38
   42bd4:	b	425d8 <__assert_fail@plt+0x2fb5c>
   42bd8:	and	r0, r6, #2
   42bdc:	eor	r1, r0, #10
   42be0:	str	r1, [r4, #60]	; 0x3c
   42be4:	cmp	sl, r5
   42be8:	ldr	r2, [r4, #28]
   42bec:	beq	429b0 <__assert_fail@plt+0x2ff34>
   42bf0:	mov	r0, #0
   42bf4:	strb	r0, [r4, #76]	; 0x4c
   42bf8:	sub	r0, r5, r9
   42bfc:	ldr	r1, [r4, #44]	; 0x2c
   42c00:	ldr	r3, [r4, #52]	; 0x34
   42c04:	add	r1, r0, r1
   42c08:	add	r0, r0, r3
   42c0c:	str	r1, [r4, #48]	; 0x30
   42c10:	str	r0, [r4, #56]	; 0x38
   42c14:	add	r0, r7, r8
   42c18:	sub	r1, r0, #1
   42c1c:	add	r0, r1, #1
   42c20:	cmp	r0, #1
   42c24:	blt	42c3c <__assert_fail@plt+0x301c0>
   42c28:	ldr	r3, [r4, #12]
   42c2c:	ldr	r3, [r3, r1, lsl #2]
   42c30:	sub	r1, r1, #1
   42c34:	cmp	r3, r5
   42c38:	beq	42c1c <__assert_fail@plt+0x301a0>
   42c3c:	cmp	r0, r2
   42c40:	bge	42c60 <__assert_fail@plt+0x301e4>
   42c44:	ldr	r1, [r4, #8]
   42c48:	ldr	r3, [r1, r0, lsl #2]
   42c4c:	cmn	r3, #1
   42c50:	bne	42c60 <__assert_fail@plt+0x301e4>
   42c54:	add	r0, r0, #1
   42c58:	cmp	r0, r2
   42c5c:	blt	42c48 <__assert_fail@plt+0x301cc>
   42c60:	cmp	r0, r2
   42c64:	bne	42c78 <__assert_fail@plt+0x301fc>
   42c68:	mov	r0, #0
   42c6c:	str	r0, [r4, #28]
   42c70:	str	r0, [r4, #32]
   42c74:	b	42520 <__assert_fail@plt+0x2faa4>
   42c78:	ldr	r1, [r4, #12]
   42c7c:	ldr	r0, [r1, r0, lsl #2]
   42c80:	subs	r2, r0, r5
   42c84:	str	r2, [r4, #28]
   42c88:	beq	42ccc <__assert_fail@plt+0x30250>
   42c8c:	cmp	r2, #1
   42c90:	blt	42cb4 <__assert_fail@plt+0x30238>
   42c94:	ldr	r0, [r4, #8]
   42c98:	mov	r1, #0
   42c9c:	mvn	r3, #0
   42ca0:	str	r3, [r0, r1, lsl #2]
   42ca4:	add	r1, r1, #1
   42ca8:	ldr	r2, [r4, #28]
   42cac:	cmp	r1, r2
   42cb0:	blt	42ca0 <__assert_fail@plt+0x30224>
   42cb4:	ldr	r0, [r4, #4]
   42cb8:	mov	r1, #255	; 0xff
   42cbc:	bl	12800 <memset@plt>
   42cc0:	ldr	r0, [r4, #28]
   42cc4:	str	r0, [r4, #32]
   42cc8:	b	42520 <__assert_fail@plt+0x2faa4>
   42ccc:	mov	r0, #0
   42cd0:	str	r0, [r4, #32]
   42cd4:	b	42520 <__assert_fail@plt+0x2faa4>
   42cd8:	cmp	r2, #1
   42cdc:	blt	42d00 <__assert_fail@plt+0x30284>
   42ce0:	ldr	r0, [r4, #8]
   42ce4:	mov	r1, #0
   42ce8:	mvn	r3, #0
   42cec:	str	r3, [r0, r1, lsl #2]
   42cf0:	add	r1, r1, #1
   42cf4:	ldr	r2, [r4, #28]
   42cf8:	cmp	r1, r2
   42cfc:	blt	42cec <__assert_fail@plt+0x30270>
   42d00:	ldrb	r0, [r4, #75]	; 0x4b
   42d04:	cmp	r0, #0
   42d08:	beq	42d70 <__assert_fail@plt+0x302f4>
   42d0c:	ldr	r0, [r4, #4]
   42d10:	mov	r1, #255	; 0xff
   42d14:	bl	12800 <memset@plt>
   42d18:	ldr	r0, [r4, #28]
   42d1c:	b	42ba8 <__assert_fail@plt+0x3012c>
   42d20:	and	r0, r6, #2
   42d24:	eor	r1, r0, #10
   42d28:	b	42b94 <__assert_fail@plt+0x30118>
   42d2c:	mov	r0, r6
   42d30:	bl	127dc <iswalnum@plt>
   42d34:	mov	r1, #1
   42d38:	cmp	r6, #95	; 0x5f
   42d3c:	beq	429a0 <__assert_fail@plt+0x2ff24>
   42d40:	cmp	r0, #0
   42d44:	beq	42988 <__assert_fail@plt+0x2ff0c>
   42d48:	b	429a0 <__assert_fail@plt+0x2ff24>
   42d4c:	mov	r0, r7
   42d50:	bl	127dc <iswalnum@plt>
   42d54:	mov	r1, #1
   42d58:	cmp	r7, #95	; 0x5f
   42d5c:	beq	42b94 <__assert_fail@plt+0x30118>
   42d60:	cmp	r0, #0
   42d64:	mov	r2, r7
   42d68:	beq	42768 <__assert_fail@plt+0x2fcec>
   42d6c:	b	42b94 <__assert_fail@plt+0x30118>
   42d70:	mov	r0, r2
   42d74:	str	r2, [r4, #32]
   42d78:	b	42520 <__assert_fail@plt+0x2faa4>
   42d7c:	cmp	r2, #1
   42d80:	blt	42de4 <__assert_fail@plt+0x30368>
   42d84:	sub	r1, r7, #1
   42d88:	sub	r1, r1, r3
   42d8c:	mvn	r3, #1
   42d90:	cmn	r1, #7
   42d94:	mvnle	r1, #6
   42d98:	sub	ip, r3, r1
   42d9c:	add	r1, sp, #14
   42da0:	ldrb	r3, [r7, ip]
   42da4:	sub	lr, ip, #1
   42da8:	ldrb	r3, [r0, r3]
   42dac:	strb	r3, [r1, ip]
   42db0:	add	r3, ip, #1
   42db4:	mov	ip, lr
   42db8:	cmp	r3, #1
   42dbc:	bgt	42da0 <__assert_fail@plt+0x30324>
   42dc0:	b	42654 <__assert_fail@plt+0x2fbd8>
   42dc4:	mov	r0, r6
   42dc8:	bl	127dc <iswalnum@plt>
   42dcc:	mov	r1, #1
   42dd0:	cmp	r6, #95	; 0x5f
   42dd4:	beq	42b94 <__assert_fail@plt+0x30118>
   42dd8:	cmp	r0, #0
   42ddc:	beq	42b7c <__assert_fail@plt+0x30100>
   42de0:	b	42b94 <__assert_fail@plt+0x30118>
   42de4:	add	r1, sp, #14
   42de8:	b	42654 <__assert_fail@plt+0x2fbd8>
   42dec:	push	{r4, r5, r6, sl, fp, lr}
   42df0:	add	fp, sp, #16
   42df4:	mov	r3, r2
   42df8:	ldr	r2, [r0, #88]	; 0x58
   42dfc:	mov	r5, r1
   42e00:	mov	r4, r0
   42e04:	mov	r1, r3
   42e08:	bl	43038 <__assert_fail@plt+0x305bc>
   42e0c:	ldr	r1, [r5, #8]
   42e10:	cmp	r1, #1
   42e14:	blt	42f88 <__assert_fail@plt+0x3050c>
   42e18:	ldr	r3, [r5, #12]
   42e1c:	ldr	r5, [r4, #84]	; 0x54
   42e20:	movw	lr, #65280	; 0xff00
   42e24:	and	ip, r0, #8
   42e28:	and	r2, r0, #2
   42e2c:	tst	r0, #1
   42e30:	movt	lr, #3
   42e34:	ldr	r5, [r5]
   42e38:	bne	42e90 <__assert_fail@plt+0x30414>
   42e3c:	cmp	r2, #0
   42e40:	bne	42ef4 <__assert_fail@plt+0x30478>
   42e44:	mov	r2, #0
   42e48:	ldr	r0, [r3, r2, lsl #2]
   42e4c:	add	r4, r5, r0, lsl #3
   42e50:	ldr	r4, [r4, #4]
   42e54:	uxtb	r6, r4
   42e58:	cmp	r6, #2
   42e5c:	bne	42e80 <__assert_fail@plt+0x30404>
   42e60:	tst	r4, lr
   42e64:	beq	42f8c <__assert_fail@plt+0x30510>
   42e68:	tst	r4, #9216	; 0x2400
   42e6c:	bne	42e80 <__assert_fail@plt+0x30404>
   42e70:	cmp	ip, #0
   42e74:	bne	42f8c <__assert_fail@plt+0x30510>
   42e78:	ands	r4, r4, #32768	; 0x8000
   42e7c:	beq	42f8c <__assert_fail@plt+0x30510>
   42e80:	add	r2, r2, #1
   42e84:	cmp	r2, r1
   42e88:	blt	42e48 <__assert_fail@plt+0x303cc>
   42e8c:	b	42f88 <__assert_fail@plt+0x3050c>
   42e90:	cmp	r2, #0
   42e94:	bne	42f40 <__assert_fail@plt+0x304c4>
   42e98:	mov	r2, #0
   42e9c:	ldr	r0, [r3, r2, lsl #2]
   42ea0:	add	r4, r5, r0, lsl #3
   42ea4:	ldr	r4, [r4, #4]
   42ea8:	uxtb	r6, r4
   42eac:	cmp	r6, #2
   42eb0:	bne	42ec4 <__assert_fail@plt+0x30448>
   42eb4:	tst	r4, lr
   42eb8:	beq	42f8c <__assert_fail@plt+0x30510>
   42ebc:	tst	r4, #10240	; 0x2800
   42ec0:	beq	42ed4 <__assert_fail@plt+0x30458>
   42ec4:	add	r2, r2, #1
   42ec8:	cmp	r2, r1
   42ecc:	blt	42e9c <__assert_fail@plt+0x30420>
   42ed0:	b	42f88 <__assert_fail@plt+0x3050c>
   42ed4:	cmp	ip, #0
   42ed8:	bne	42f8c <__assert_fail@plt+0x30510>
   42edc:	ands	r4, r4, #32768	; 0x8000
   42ee0:	popeq	{r4, r5, r6, sl, fp, pc}
   42ee4:	add	r2, r2, #1
   42ee8:	cmp	r2, r1
   42eec:	blt	42e9c <__assert_fail@plt+0x30420>
   42ef0:	b	42f88 <__assert_fail@plt+0x3050c>
   42ef4:	mov	r2, #0
   42ef8:	ldr	r0, [r3, r2, lsl #2]
   42efc:	add	r4, r5, r0, lsl #3
   42f00:	ldr	r4, [r4, #4]
   42f04:	uxtb	r6, r4
   42f08:	cmp	r6, #2
   42f0c:	bne	42f30 <__assert_fail@plt+0x304b4>
   42f10:	tst	r4, lr
   42f14:	beq	42f8c <__assert_fail@plt+0x30510>
   42f18:	tst	r4, #1024	; 0x400
   42f1c:	bne	42f30 <__assert_fail@plt+0x304b4>
   42f20:	cmp	ip, #0
   42f24:	bne	42f8c <__assert_fail@plt+0x30510>
   42f28:	ands	r4, r4, #32768	; 0x8000
   42f2c:	beq	42f8c <__assert_fail@plt+0x30510>
   42f30:	add	r2, r2, #1
   42f34:	cmp	r2, r1
   42f38:	blt	42ef8 <__assert_fail@plt+0x3047c>
   42f3c:	b	42f88 <__assert_fail@plt+0x3050c>
   42f40:	mov	r2, #0
   42f44:	ldr	r0, [r3, r2, lsl #2]
   42f48:	add	r4, r5, r0, lsl #3
   42f4c:	ldr	r4, [r4, #4]
   42f50:	uxtb	r6, r4
   42f54:	cmp	r6, #2
   42f58:	bne	42f7c <__assert_fail@plt+0x30500>
   42f5c:	tst	r4, lr
   42f60:	beq	42f8c <__assert_fail@plt+0x30510>
   42f64:	tst	r4, #2048	; 0x800
   42f68:	bne	42f7c <__assert_fail@plt+0x30500>
   42f6c:	cmp	ip, #0
   42f70:	bne	42f8c <__assert_fail@plt+0x30510>
   42f74:	ands	r4, r4, #32768	; 0x8000
   42f78:	beq	42f8c <__assert_fail@plt+0x30510>
   42f7c:	add	r2, r2, #1
   42f80:	cmp	r2, r1
   42f84:	blt	42f44 <__assert_fail@plt+0x304c8>
   42f88:	mov	r0, #0
   42f8c:	pop	{r4, r5, r6, sl, fp, pc}
   42f90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   42f94:	add	fp, sp, #24
   42f98:	mov	r8, r0
   42f9c:	ldr	r0, [r0, #124]	; 0x7c
   42fa0:	cmp	r0, #1
   42fa4:	blt	43028 <__assert_fail@plt+0x305ac>
   42fa8:	mov	r7, #0
   42fac:	ldr	r0, [r8, #132]	; 0x84
   42fb0:	ldr	r5, [r0, r7, lsl #2]
   42fb4:	ldr	r0, [r5, #16]
   42fb8:	cmp	r0, #1
   42fbc:	blt	42fec <__assert_fail@plt+0x30570>
   42fc0:	mov	r4, #0
   42fc4:	ldr	r0, [r5, #20]
   42fc8:	ldr	r6, [r0, r4, lsl #2]
   42fcc:	ldr	r0, [r6, #16]
   42fd0:	bl	32c40 <__assert_fail@plt+0x201c4>
   42fd4:	mov	r0, r6
   42fd8:	bl	32c40 <__assert_fail@plt+0x201c4>
   42fdc:	ldr	r0, [r5, #16]
   42fe0:	add	r4, r4, #1
   42fe4:	cmp	r4, r0
   42fe8:	blt	42fc4 <__assert_fail@plt+0x30548>
   42fec:	ldr	r0, [r5, #20]
   42ff0:	bl	32c40 <__assert_fail@plt+0x201c4>
   42ff4:	ldr	r0, [r5, #8]
   42ff8:	cmp	r0, #0
   42ffc:	beq	43010 <__assert_fail@plt+0x30594>
   43000:	ldr	r0, [r0, #8]
   43004:	bl	32c40 <__assert_fail@plt+0x201c4>
   43008:	ldr	r0, [r5, #8]
   4300c:	bl	32c40 <__assert_fail@plt+0x201c4>
   43010:	mov	r0, r5
   43014:	bl	32c40 <__assert_fail@plt+0x201c4>
   43018:	ldr	r0, [r8, #124]	; 0x7c
   4301c:	add	r7, r7, #1
   43020:	cmp	r7, r0
   43024:	blt	42fac <__assert_fail@plt+0x30530>
   43028:	mov	r0, #0
   4302c:	str	r0, [r8, #108]	; 0x6c
   43030:	str	r0, [r8, #124]	; 0x7c
   43034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   43038:	push	{r4, r5, fp, lr}
   4303c:	add	fp, sp, #8
   43040:	mov	r4, r0
   43044:	cmn	r1, #1
   43048:	ldrle	r0, [r4, #60]	; 0x3c
   4304c:	pople	{r4, r5, fp, pc}
   43050:	ldr	r0, [r4, #48]	; 0x30
   43054:	cmp	r0, r1
   43058:	beq	430f4 <__assert_fail@plt+0x30678>
   4305c:	ldr	r0, [r4, #80]	; 0x50
   43060:	cmp	r0, #2
   43064:	blt	430b4 <__assert_fail@plt+0x30638>
   43068:	ldr	r0, [r4, #8]
   4306c:	ldr	r5, [r0, r1, lsl #2]
   43070:	cmn	r5, #1
   43074:	bne	43098 <__assert_fail@plt+0x3061c>
   43078:	cmp	r1, #0
   4307c:	sub	r2, r1, #1
   43080:	ldrle	r0, [r4, #60]	; 0x3c
   43084:	mov	r1, r2
   43088:	pople	{r4, r5, fp, pc}
   4308c:	ldr	r5, [r0, r1, lsl #2]
   43090:	cmn	r5, #1
   43094:	beq	43078 <__assert_fail@plt+0x305fc>
   43098:	ldrb	r0, [r4, #78]	; 0x4e
   4309c:	cmp	r0, #0
   430a0:	bne	43100 <__assert_fail@plt+0x30684>
   430a4:	mov	r0, #0
   430a8:	cmp	r5, #10
   430ac:	beq	430e4 <__assert_fail@plt+0x30668>
   430b0:	b	430f0 <__assert_fail@plt+0x30674>
   430b4:	ldr	r0, [r4, #4]
   430b8:	ldr	r2, [r4, #68]	; 0x44
   430bc:	ldrb	r1, [r0, r1]
   430c0:	ubfx	r0, r1, #5, #3
   430c4:	and	r3, r1, #31
   430c8:	ldr	r2, [r2, r0, lsl #2]
   430cc:	mov	r0, #1
   430d0:	tst	r2, r0, lsl r3
   430d4:	bne	430f0 <__assert_fail@plt+0x30674>
   430d8:	mov	r0, #0
   430dc:	cmp	r1, #10
   430e0:	popne	{r4, r5, fp, pc}
   430e4:	ldrb	r0, [r4, #77]	; 0x4d
   430e8:	cmp	r0, #0
   430ec:	movwne	r0, #2
   430f0:	pop	{r4, r5, fp, pc}
   430f4:	and	r0, r2, #2
   430f8:	eor	r0, r0, #10
   430fc:	pop	{r4, r5, fp, pc}
   43100:	mov	r0, r5
   43104:	bl	127dc <iswalnum@plt>
   43108:	mov	r1, r0
   4310c:	mov	r0, #1
   43110:	cmp	r5, #95	; 0x5f
   43114:	beq	430f0 <__assert_fail@plt+0x30674>
   43118:	cmp	r1, #0
   4311c:	beq	430a4 <__assert_fail@plt+0x30628>
   43120:	b	430f0 <__assert_fail@plt+0x30674>
   43124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43128:	add	fp, sp, #28
   4312c:	sub	sp, sp, #4
   43130:	mov	sl, r0
   43134:	ldr	r0, [r1, #4]
   43138:	cmp	r0, #1
   4313c:	blt	43208 <__assert_fail@plt+0x3078c>
   43140:	ldr	r7, [sl, #84]	; 0x54
   43144:	mov	r8, r2
   43148:	mov	r5, r1
   4314c:	mov	r4, #0
   43150:	b	43178 <__assert_fail@plt+0x306fc>
   43154:	ldr	r0, [sl, #132]	; 0x84
   43158:	lsl	r1, r9, #3
   4315c:	bl	36328 <__assert_fail@plt+0x238ac>
   43160:	cmp	r0, #0
   43164:	beq	43214 <__assert_fail@plt+0x30798>
   43168:	lsl	r1, r9, #1
   4316c:	str	r1, [sl, #128]	; 0x80
   43170:	str	r0, [sl, #132]	; 0x84
   43174:	b	431c0 <__assert_fail@plt+0x30744>
   43178:	ldr	r1, [r5, #8]
   4317c:	ldr	r6, [r1, r4, lsl #2]
   43180:	ldr	r1, [r7]
   43184:	add	r2, r1, r6, lsl #3
   43188:	ldrb	r2, [r2, #4]
   4318c:	cmp	r2, #8
   43190:	bne	431fc <__assert_fail@plt+0x30780>
   43194:	ldr	r1, [r1, r6, lsl #3]
   43198:	cmp	r1, #31
   4319c:	bgt	431fc <__assert_fail@plt+0x30780>
   431a0:	ldr	r2, [r7, #80]	; 0x50
   431a4:	mov	r3, #1
   431a8:	tst	r2, r3, lsl r1
   431ac:	beq	431fc <__assert_fail@plt+0x30780>
   431b0:	ldr	r9, [sl, #124]	; 0x7c
   431b4:	ldr	r0, [sl, #128]	; 0x80
   431b8:	cmp	r9, r0
   431bc:	beq	43154 <__assert_fail@plt+0x306d8>
   431c0:	mov	r0, #1
   431c4:	mov	r1, #24
   431c8:	bl	325e0 <__assert_fail@plt+0x1fb64>
   431cc:	ldr	r1, [sl, #124]	; 0x7c
   431d0:	ldr	r2, [sl, #132]	; 0x84
   431d4:	str	r0, [r2, r1, lsl #2]
   431d8:	ldr	r0, [sl, #132]	; 0x84
   431dc:	ldr	r0, [r0, r1, lsl #2]
   431e0:	cmp	r0, #0
   431e4:	beq	43214 <__assert_fail@plt+0x30798>
   431e8:	add	r1, r1, #1
   431ec:	str	r6, [r0, #4]
   431f0:	str	r1, [sl, #124]	; 0x7c
   431f4:	str	r8, [r0]
   431f8:	ldr	r0, [r5, #4]
   431fc:	add	r4, r4, #1
   43200:	cmp	r4, r0
   43204:	blt	43178 <__assert_fail@plt+0x306fc>
   43208:	mov	r0, #0
   4320c:	sub	sp, fp, #28
   43210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43214:	mov	r0, #12
   43218:	sub	sp, fp, #28
   4321c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43224:	add	fp, sp, #28
   43228:	sub	sp, sp, #76	; 0x4c
   4322c:	mov	r9, r0
   43230:	ldr	r0, [r1, #4]
   43234:	cmp	r0, #1
   43238:	blt	43bfc <__assert_fail@plt+0x31180>
   4323c:	ldr	r2, [r9, #84]	; 0x54
   43240:	ldr	r5, [r9, #40]	; 0x28
   43244:	mov	r3, #0
   43248:	str	r9, [sp, #40]	; 0x28
   4324c:	str	r1, [sp, #16]
   43250:	str	r5, [sp, #52]	; 0x34
   43254:	str	r2, [sp, #20]
   43258:	b	432a0 <__assert_fail@plt+0x30824>
   4325c:	ldr	r0, [r9, #88]	; 0x58
   43260:	and	r0, r0, #2
   43264:	eor	r1, r0, #10
   43268:	and	r0, r1, #1
   4326c:	tst	r6, #1024	; 0x400
   43270:	eor	r2, r0, #1
   43274:	bne	43334 <__assert_fail@plt+0x308b8>
   43278:	b	433ac <__assert_fail@plt+0x30930>
   4327c:	mov	r0, r4
   43280:	bl	127dc <iswalnum@plt>
   43284:	mov	r1, #1
   43288:	mov	r2, #0
   4328c:	cmp	r4, #95	; 0x5f
   43290:	beq	433ac <__assert_fail@plt+0x30930>
   43294:	cmp	r0, #0
   43298:	beq	43384 <__assert_fail@plt+0x30908>
   4329c:	b	433ac <__assert_fail@plt+0x30930>
   432a0:	ldr	r0, [r1, #8]
   432a4:	str	r3, [sp, #24]
   432a8:	ldr	r3, [r0, r3, lsl #2]
   432ac:	ldr	r0, [r2]
   432b0:	add	r7, r0, r3, lsl #3
   432b4:	mov	r1, r3
   432b8:	str	r3, [sp, #48]	; 0x30
   432bc:	ldr	r6, [r7, #4]!
   432c0:	uxtb	r0, r6
   432c4:	cmp	r0, #4
   432c8:	bne	43be0 <__assert_fail@plt+0x31164>
   432cc:	movw	r0, #65280	; 0xff00
   432d0:	movt	r0, #3
   432d4:	tst	r6, r0
   432d8:	beq	433e0 <__assert_fail@plt+0x30964>
   432dc:	cmn	r5, #1
   432e0:	ble	43320 <__assert_fail@plt+0x308a4>
   432e4:	ldr	r0, [r9, #48]	; 0x30
   432e8:	cmp	r0, r5
   432ec:	beq	4325c <__assert_fail@plt+0x307e0>
   432f0:	ldr	r0, [r9, #80]	; 0x50
   432f4:	cmp	r0, #2
   432f8:	blt	43340 <__assert_fail@plt+0x308c4>
   432fc:	ldr	r0, [r9, #8]
   43300:	mov	r1, r5
   43304:	ldr	r4, [r0, r1, lsl #2]
   43308:	cmn	r4, #1
   4330c:	bne	43378 <__assert_fail@plt+0x308fc>
   43310:	sub	r2, r1, #1
   43314:	cmp	r1, #0
   43318:	mov	r1, r2
   4331c:	bgt	43304 <__assert_fail@plt+0x30888>
   43320:	ldr	r1, [r9, #60]	; 0x3c
   43324:	and	r0, r1, #1
   43328:	tst	r6, #1024	; 0x400
   4332c:	eor	r2, r0, #1
   43330:	beq	433ac <__assert_fail@plt+0x30930>
   43334:	cmp	r0, #0
   43338:	beq	43be0 <__assert_fail@plt+0x31164>
   4333c:	b	433ac <__assert_fail@plt+0x30930>
   43340:	ldr	r0, [r9, #4]
   43344:	ldr	r1, [r9, #68]	; 0x44
   43348:	ldrb	r0, [r0, r5]
   4334c:	ubfx	r2, r0, #5, #3
   43350:	and	r4, r0, #31
   43354:	ldr	r3, [r1, r2, lsl #2]
   43358:	mov	r1, #1
   4335c:	mov	r2, #0
   43360:	tst	r3, r1, lsl r4
   43364:	bne	433ac <__assert_fail@plt+0x30930>
   43368:	mov	r1, #0
   4336c:	cmp	r0, #10
   43370:	beq	43390 <__assert_fail@plt+0x30914>
   43374:	b	4339c <__assert_fail@plt+0x30920>
   43378:	ldrb	r0, [r9, #78]	; 0x4e
   4337c:	cmp	r0, #0
   43380:	bne	4327c <__assert_fail@plt+0x30800>
   43384:	mov	r1, #0
   43388:	cmp	r4, #10
   4338c:	bne	4339c <__assert_fail@plt+0x30920>
   43390:	ldrb	r1, [r9, #77]	; 0x4d
   43394:	cmp	r1, #0
   43398:	movwne	r1, #2
   4339c:	and	r0, r1, #1
   433a0:	tst	r6, #1024	; 0x400
   433a4:	eor	r2, r0, #1
   433a8:	bne	43334 <__assert_fail@plt+0x308b8>
   433ac:	ldr	r0, [r7]
   433b0:	cmp	r2, #0
   433b4:	bne	433c0 <__assert_fail@plt+0x30944>
   433b8:	ands	r2, r0, #2048	; 0x800
   433bc:	bne	43be0 <__assert_fail@plt+0x31164>
   433c0:	tst	r1, #2
   433c4:	bne	433d0 <__assert_fail@plt+0x30954>
   433c8:	ands	r2, r0, #8192	; 0x2000
   433cc:	bne	43be0 <__assert_fail@plt+0x31164>
   433d0:	tst	r1, #8
   433d4:	bne	433e0 <__assert_fail@plt+0x30964>
   433d8:	ands	r0, r0, #32768	; 0x8000
   433dc:	bne	43be0 <__assert_fail@plt+0x31164>
   433e0:	ldr	r2, [r9, #108]	; 0x6c
   433e4:	ldr	r0, [r9, #84]	; 0x54
   433e8:	ldr	ip, [r9, #4]
   433ec:	cmp	r2, #1
   433f0:	str	r0, [sp, #28]
   433f4:	str	r2, [sp, #12]
   433f8:	blt	43488 <__assert_fail@plt+0x30a0c>
   433fc:	ldr	r1, [r9, #116]	; 0x74
   43400:	mov	r0, #0
   43404:	mov	r4, #1
   43408:	add	r3, r2, r0
   4340c:	add	r3, r3, r3, lsr #31
   43410:	asr	r7, r3, #1
   43414:	add	r6, r7, r7, lsl #1
   43418:	add	r6, r1, r6, lsl #3
   4341c:	ldr	r6, [r6, #4]
   43420:	cmp	r6, r5
   43424:	addlt	r0, r4, r3, asr #1
   43428:	movge	r2, r7
   4342c:	cmp	r0, r2
   43430:	blt	43408 <__assert_fail@plt+0x3098c>
   43434:	ldr	r1, [sp, #12]
   43438:	ldr	r7, [sp, #28]
   4343c:	cmp	r0, r1
   43440:	bge	4349c <__assert_fail@plt+0x30a20>
   43444:	cmn	r0, #1
   43448:	beq	4349c <__assert_fail@plt+0x30a20>
   4344c:	ldr	r1, [r9, #116]	; 0x74
   43450:	add	r0, r0, r0, lsl #1
   43454:	add	r0, r1, r0, lsl #3
   43458:	ldr	r1, [r0, #4]
   4345c:	cmp	r1, r5
   43460:	bne	4349c <__assert_fail@plt+0x30a20>
   43464:	ldr	r1, [r0]
   43468:	ldr	r2, [sp, #48]	; 0x30
   4346c:	cmp	r1, r2
   43470:	beq	43908 <__assert_fail@plt+0x30e8c>
   43474:	ldrb	r1, [r0, #20]
   43478:	add	r0, r0, #24
   4347c:	cmp	r1, #0
   43480:	bne	43464 <__assert_fail@plt+0x309e8>
   43484:	b	4349c <__assert_fail@plt+0x30a20>
   43488:	mov	r0, #0
   4348c:	ldr	r1, [sp, #12]
   43490:	ldr	r7, [sp, #28]
   43494:	cmp	r0, r1
   43498:	blt	43444 <__assert_fail@plt+0x309c8>
   4349c:	ldr	r0, [r9, #124]	; 0x7c
   434a0:	cmp	r0, #1
   434a4:	blt	43908 <__assert_fail@plt+0x30e8c>
   434a8:	ldr	r0, [r7]
   434ac:	ldr	r1, [sp, #48]	; 0x30
   434b0:	mov	r2, #0
   434b4:	ldr	r1, [r0, r1, lsl #3]
   434b8:	str	r1, [sp, #36]	; 0x24
   434bc:	b	434c4 <__assert_fail@plt+0x30a48>
   434c0:	ldr	r0, [r7]
   434c4:	ldr	r1, [r9, #132]	; 0x84
   434c8:	str	r2, [sp, #32]
   434cc:	ldr	lr, [r1, r2, lsl #2]
   434d0:	ldr	r1, [lr, #4]
   434d4:	ldr	r0, [r0, r1, lsl #3]
   434d8:	ldr	r1, [sp, #36]	; 0x24
   434dc:	cmp	r0, r1
   434e0:	bne	438a4 <__assert_fail@plt+0x30e28>
   434e4:	ldr	r0, [lr, #16]
   434e8:	ldr	r2, [lr]
   434ec:	mov	r8, #0
   434f0:	str	lr, [sp, #44]	; 0x2c
   434f4:	cmp	r0, #1
   434f8:	blt	43508 <__assert_fail@plt+0x30a8c>
   434fc:	ldr	r6, [sp, #52]	; 0x34
   43500:	mov	r7, r2
   43504:	b	437f8 <__assert_fail@plt+0x30d7c>
   43508:	ldr	r6, [sp, #52]	; 0x34
   4350c:	ldr	r7, [sp, #28]
   43510:	cmp	r8, r0
   43514:	blt	438a0 <__assert_fail@plt+0x30e24>
   43518:	ldr	r5, [sp, #52]	; 0x34
   4351c:	cmp	r8, #0
   43520:	addne	r2, r2, #1
   43524:	cmp	r2, r5
   43528:	bgt	438a4 <__assert_fail@plt+0x30e28>
   4352c:	b	436c8 <__assert_fail@plt+0x30c4c>
   43530:	ldr	r0, [sp, #40]	; 0x28
   43534:	cmn	r4, #1
   43538:	beq	43760 <__assert_fail@plt+0x30ce4>
   4353c:	ldr	r1, [lr, #8]
   43540:	str	r6, [fp, #-48]	; 0xffffffd0
   43544:	mov	r6, ip
   43548:	cmp	r1, #0
   4354c:	beq	43568 <__assert_fail@plt+0x30aec>
   43550:	ldr	r3, [lr]
   43554:	ldr	r2, [lr, #4]
   43558:	mov	r7, #9
   4355c:	stm	sp, {r4, sl}
   43560:	str	r7, [sp, #8]
   43564:	b	435ac <__assert_fail@plt+0x30b30>
   43568:	ldr	r0, [lr]
   4356c:	add	r1, sl, #1
   43570:	mov	r9, #12
   43574:	sub	r1, r1, r0
   43578:	mov	r0, #12
   4357c:	bl	325e0 <__assert_fail@plt+0x1fb64>
   43580:	ldr	r2, [sp, #44]	; 0x2c
   43584:	cmp	r0, #0
   43588:	str	r0, [r2, #8]
   4358c:	beq	43c00 <__assert_fail@plt+0x31184>
   43590:	mov	r1, r0
   43594:	ldr	r3, [r2]
   43598:	ldr	r2, [r2, #4]
   4359c:	stm	sp, {r4, sl}
   435a0:	mov	r0, #9
   435a4:	str	r0, [sp, #8]
   435a8:	ldr	r0, [sp, #40]	; 0x28
   435ac:	bl	4451c <__assert_fail@plt+0x31aa0>
   435b0:	mov	ip, r6
   435b4:	ldr	lr, [sp, #44]	; 0x2c
   435b8:	ldr	r6, [fp, #-48]	; 0xffffffd0
   435bc:	ldr	r5, [sp, #52]	; 0x34
   435c0:	mov	r9, r0
   435c4:	cmp	r0, #1
   435c8:	mov	r7, r8
   435cc:	beq	43768 <__assert_fail@plt+0x30cec>
   435d0:	cmp	r9, #0
   435d4:	bne	43c00 <__assert_fail@plt+0x31184>
   435d8:	ldr	r1, [lr, #12]
   435dc:	ldr	r0, [lr, #16]
   435e0:	ldr	r5, [sp, #52]	; 0x34
   435e4:	cmp	r0, r1
   435e8:	beq	4369c <__assert_fail@plt+0x30c20>
   435ec:	mov	r0, #1
   435f0:	mov	r1, #20
   435f4:	bl	325e0 <__assert_fail@plt+0x1fb64>
   435f8:	ldr	r6, [sp, #40]	; 0x28
   435fc:	cmp	r0, #0
   43600:	beq	43c18 <__assert_fail@plt+0x3119c>
   43604:	ldr	r1, [sp, #44]	; 0x2c
   43608:	mov	r2, r0
   4360c:	ldr	r0, [r1, #16]
   43610:	ldr	r3, [r1, #20]
   43614:	str	r2, [r3, r0, lsl #2]
   43618:	stm	r2, {r4, sl}
   4361c:	add	r0, r0, #1
   43620:	ldr	r3, [sp, #48]	; 0x30
   43624:	str	r0, [r1, #16]
   43628:	mov	r0, r6
   4362c:	str	r5, [sp]
   43630:	bl	44348 <__assert_fail@plt+0x318cc>
   43634:	cmp	r0, #1
   43638:	bhi	43c10 <__assert_fail@plt+0x31194>
   4363c:	ldr	ip, [r6, #4]
   43640:	ldr	r7, [sp, #28]
   43644:	ldr	lr, [sp, #44]	; 0x2c
   43648:	ldr	r6, [fp, #-48]	; 0xffffffd0
   4364c:	ldr	r9, [sp, #40]	; 0x28
   43650:	add	r2, sl, #1
   43654:	cmp	sl, r5
   43658:	blt	436c8 <__assert_fail@plt+0x30c4c>
   4365c:	b	438a4 <__assert_fail@plt+0x30e28>
   43660:	ldr	r0, [r9, #48]	; 0x30
   43664:	cmp	r6, r0
   43668:	bge	438a4 <__assert_fail@plt+0x30e28>
   4366c:	add	r4, r6, #1
   43670:	mov	r0, r9
   43674:	mov	r8, r6
   43678:	mov	r1, r4
   4367c:	bl	43c58 <__assert_fail@plt+0x311dc>
   43680:	cmp	r0, #0
   43684:	bne	43c10 <__assert_fail@plt+0x31194>
   43688:	ldr	ip, [r9, #4]
   4368c:	ldr	lr, [sp, #44]	; 0x2c
   43690:	mov	r6, r8
   43694:	mov	r1, r9
   43698:	b	436e8 <__assert_fail@plt+0x30c6c>
   4369c:	mov	r1, #1
   436a0:	mov	r7, lr
   436a4:	orr	r6, r1, r0, lsl #1
   436a8:	ldr	r0, [lr, #20]
   436ac:	lsl	r1, r6, #2
   436b0:	bl	36328 <__assert_fail@plt+0x238ac>
   436b4:	cmp	r0, #0
   436b8:	beq	43c18 <__assert_fail@plt+0x3119c>
   436bc:	str	r6, [r7, #12]
   436c0:	str	r0, [r7, #20]
   436c4:	b	435ec <__assert_fail@plt+0x30b70>
   436c8:	ldr	r0, [lr]
   436cc:	mov	sl, r2
   436d0:	cmp	r2, r0
   436d4:	ble	43700 <__assert_fail@plt+0x30c84>
   436d8:	ldr	r0, [r9, #28]
   436dc:	cmp	r6, r0
   436e0:	bge	43660 <__assert_fail@plt+0x30be4>
   436e4:	add	r4, r6, #1
   436e8:	add	r1, ip, sl
   436ec:	ldrb	r0, [ip, r6]
   436f0:	ldrb	r1, [r1, #-1]
   436f4:	cmp	r0, r1
   436f8:	beq	43704 <__assert_fail@plt+0x30c88>
   436fc:	b	438a4 <__assert_fail@plt+0x30e28>
   43700:	mov	r4, r6
   43704:	ldr	r0, [r9, #100]	; 0x64
   43708:	mov	r6, r4
   4370c:	ldr	r2, [r0, sl, lsl #2]
   43710:	cmp	r2, #0
   43714:	beq	43768 <__assert_fail@plt+0x30cec>
   43718:	ldr	r0, [r2, #8]
   4371c:	cmp	r0, #1
   43720:	blt	43768 <__assert_fail@plt+0x30cec>
   43724:	ldr	r1, [r7]
   43728:	ldr	r2, [r2, #12]
   4372c:	ldr	r5, [sp, #36]	; 0x24
   43730:	mov	r8, r7
   43734:	mov	r3, #0
   43738:	ldr	r4, [r2, r3, lsl #2]
   4373c:	add	r7, r1, r4, lsl #3
   43740:	ldrb	r7, [r7, #4]
   43744:	cmp	r7, #9
   43748:	ldreq	r7, [r1, r4, lsl #3]
   4374c:	cmpeq	r7, r5
   43750:	beq	43530 <__assert_fail@plt+0x30ab4>
   43754:	add	r3, r3, #1
   43758:	cmp	r3, r0
   4375c:	blt	43738 <__assert_fail@plt+0x30cbc>
   43760:	ldr	r5, [sp, #52]	; 0x34
   43764:	mov	r7, r8
   43768:	ldr	r9, [sp, #40]	; 0x28
   4376c:	add	r2, sl, #1
   43770:	cmp	sl, r5
   43774:	blt	436c8 <__assert_fail@plt+0x30c4c>
   43778:	b	438a4 <__assert_fail@plt+0x30e28>
   4377c:	ldr	r2, [r9, #48]	; 0x30
   43780:	cmp	r5, r2
   43784:	bgt	438d8 <__assert_fail@plt+0x30e5c>
   43788:	ldr	r0, [r9, #36]	; 0x24
   4378c:	ldr	r3, [r9, #104]	; 0x68
   43790:	cmp	r0, r5
   43794:	cmple	r0, r2
   43798:	blt	437a8 <__assert_fail@plt+0x30d2c>
   4379c:	cmp	r1, r5
   437a0:	cmple	r1, r2
   437a4:	bge	437c4 <__assert_fail@plt+0x30d48>
   437a8:	ldr	r0, [sp, #40]	; 0x28
   437ac:	add	r1, r5, #1
   437b0:	mov	r9, r3
   437b4:	bl	43c58 <__assert_fail@plt+0x311dc>
   437b8:	mov	r3, r9
   437bc:	cmp	r0, #0
   437c0:	bne	43c10 <__assert_fail@plt+0x31194>
   437c4:	ldr	r9, [sp, #40]	; 0x28
   437c8:	cmp	r5, r3
   437cc:	ble	437f0 <__assert_fail@plt+0x30d74>
   437d0:	sub	r0, r5, r3
   437d4:	mov	r1, #0
   437d8:	lsl	r2, r0, #2
   437dc:	ldr	r0, [r9, #100]	; 0x64
   437e0:	add	r0, r0, r3, lsl #2
   437e4:	add	r0, r0, #4
   437e8:	bl	12800 <memset@plt>
   437ec:	str	r5, [r9, #104]	; 0x68
   437f0:	ldr	ip, [r9, #4]
   437f4:	b	43824 <__assert_fail@plt+0x30da8>
   437f8:	ldr	r1, [lr, #20]
   437fc:	ldr	sl, [r1, r8, lsl #2]
   43800:	ldr	r1, [sl, #4]
   43804:	sub	r4, r1, r7
   43808:	str	r1, [fp, #-48]	; 0xffffffd0
   4380c:	cmp	r4, #1
   43810:	blt	43844 <__assert_fail@plt+0x30dc8>
   43814:	ldr	r1, [r9, #28]
   43818:	add	r5, r4, r6
   4381c:	cmp	r5, r1
   43820:	bgt	4377c <__assert_fail@plt+0x30d00>
   43824:	add	r0, ip, r6
   43828:	add	r1, ip, r7
   4382c:	mov	r2, r4
   43830:	mov	r5, ip
   43834:	bl	12518 <memcmp@plt>
   43838:	ldr	lr, [sp, #44]	; 0x2c
   4383c:	cmp	r0, #0
   43840:	bne	438bc <__assert_fail@plt+0x30e40>
   43844:	ldr	r0, [sp, #52]	; 0x34
   43848:	ldr	r3, [sp, #48]	; 0x30
   4384c:	mov	r1, lr
   43850:	mov	r2, sl
   43854:	mov	r5, lr
   43858:	str	r0, [sp]
   4385c:	mov	r0, r9
   43860:	bl	44348 <__assert_fail@plt+0x318cc>
   43864:	cmp	r0, #1
   43868:	bhi	43c10 <__assert_fail@plt+0x31194>
   4386c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   43870:	ldr	r0, [r5, #16]
   43874:	ldr	ip, [r9, #4]
   43878:	add	r8, r8, #1
   4387c:	add	r6, r4, r6
   43880:	mov	lr, r5
   43884:	mov	r1, r9
   43888:	cmp	r8, r0
   4388c:	mov	r7, r2
   43890:	blt	437f8 <__assert_fail@plt+0x30d7c>
   43894:	ldr	r7, [sp, #28]
   43898:	cmp	r8, r0
   4389c:	bge	43518 <__assert_fail@plt+0x30a9c>
   438a0:	ldr	r5, [sp, #52]	; 0x34
   438a4:	ldr	r2, [sp, #32]
   438a8:	ldr	r0, [r9, #124]	; 0x7c
   438ac:	add	r2, r2, #1
   438b0:	cmp	r2, r0
   438b4:	blt	434c0 <__assert_fail@plt+0x30a44>
   438b8:	b	438ec <__assert_fail@plt+0x30e70>
   438bc:	ldr	r0, [lr, #16]
   438c0:	mov	ip, r5
   438c4:	mov	r2, r7
   438c8:	ldr	r7, [sp, #28]
   438cc:	cmp	r8, r0
   438d0:	blt	438a0 <__assert_fail@plt+0x30e24>
   438d4:	b	43518 <__assert_fail@plt+0x30a9c>
   438d8:	mov	r2, r7
   438dc:	ldr	r7, [sp, #28]
   438e0:	cmp	r8, r0
   438e4:	blt	438a0 <__assert_fail@plt+0x30e24>
   438e8:	b	43518 <__assert_fail@plt+0x30a9c>
   438ec:	mov	r1, #0
   438f0:	ldr	r0, [r9, #108]	; 0x6c
   438f4:	str	r1, [fp, #-32]	; 0xffffffe0
   438f8:	ldr	r1, [sp, #12]
   438fc:	cmp	r1, r0
   43900:	bge	43be0 <__assert_fail@plt+0x31164>
   43904:	b	43950 <__assert_fail@plt+0x30ed4>
   43908:	mov	r0, #0
   4390c:	str	r0, [fp, #-32]	; 0xffffffe0
   43910:	b	43be0 <__assert_fail@plt+0x31164>
   43914:	ldr	r0, [r3, #88]	; 0x58
   43918:	and	r0, r0, #2
   4391c:	eor	sl, r0, #10
   43920:	b	43a84 <__assert_fail@plt+0x31008>
   43924:	mov	r0, r4
   43928:	bl	127dc <iswalnum@plt>
   4392c:	mov	sl, #1
   43930:	cmp	r4, #95	; 0x5f
   43934:	beq	43948 <__assert_fail@plt+0x30ecc>
   43938:	ldr	r3, [sp, #40]	; 0x28
   4393c:	cmp	r0, #0
   43940:	beq	43a6c <__assert_fail@plt+0x30ff0>
   43944:	b	43a84 <__assert_fail@plt+0x31008>
   43948:	ldr	r3, [sp, #40]	; 0x28
   4394c:	b	43a84 <__assert_fail@plt+0x31008>
   43950:	ldr	r0, [r9, #116]	; 0x74
   43954:	mov	r5, r1
   43958:	add	r1, r1, r1, lsl #1
   4395c:	ldr	r3, [sp, #48]	; 0x30
   43960:	ldr	r2, [r0, r1, lsl #3]
   43964:	cmp	r2, r3
   43968:	bne	43bc4 <__assert_fail@plt+0x31148>
   4396c:	add	r0, r0, r1, lsl #3
   43970:	ldr	r2, [sp, #52]	; 0x34
   43974:	ldr	r1, [r0, #4]
   43978:	cmp	r1, r2
   4397c:	bne	43bc4 <__assert_fail@plt+0x31148>
   43980:	ldr	r2, [r0, #8]
   43984:	ldr	r6, [r0, #12]
   43988:	ldr	r0, [sp, #20]
   4398c:	ldr	r8, [r0, #24]
   43990:	cmp	r6, r2
   43994:	bne	439b0 <__assert_fail@plt+0x30f34>
   43998:	ldr	r1, [sp, #48]	; 0x30
   4399c:	ldr	r0, [r0, #20]
   439a0:	add	r1, r1, r1, lsl #1
   439a4:	add	r0, r0, r1, lsl #2
   439a8:	ldr	r0, [r0, #8]
   439ac:	b	439bc <__assert_fail@plt+0x30f40>
   439b0:	ldr	r0, [r0, #12]
   439b4:	ldr	r1, [sp, #48]	; 0x30
   439b8:	add	r0, r0, r1, lsl #2
   439bc:	ldr	r9, [r0]
   439c0:	ldr	r0, [sp, #52]	; 0x34
   439c4:	str	r2, [fp, #-48]	; 0xffffffd0
   439c8:	add	r0, r6, r0
   439cc:	sub	r7, r0, r2
   439d0:	cmp	r7, #0
   439d4:	ble	43a1c <__assert_fail@plt+0x30fa0>
   439d8:	ldr	r3, [sp, #40]	; 0x28
   439dc:	sub	r0, r7, #1
   439e0:	ldr	r1, [r3, #48]	; 0x30
   439e4:	cmp	r1, r0
   439e8:	beq	43914 <__assert_fail@plt+0x30e98>
   439ec:	ldr	r1, [r3, #80]	; 0x50
   439f0:	cmp	r1, #2
   439f4:	blt	43a28 <__assert_fail@plt+0x30fac>
   439f8:	ldr	r0, [r3, #8]
   439fc:	mov	r1, r7
   43a00:	sub	r0, r0, #4
   43a04:	ldr	r4, [r0, r1, lsl #2]
   43a08:	cmn	r4, #1
   43a0c:	bne	43a5c <__assert_fail@plt+0x30fe0>
   43a10:	sub	r1, r1, #1
   43a14:	cmp	r1, #0
   43a18:	bgt	43a04 <__assert_fail@plt+0x30f88>
   43a1c:	ldr	r3, [sp, #40]	; 0x28
   43a20:	ldr	sl, [r3, #60]	; 0x3c
   43a24:	b	43a84 <__assert_fail@plt+0x31008>
   43a28:	ldr	r1, [r3, #4]
   43a2c:	ldr	r2, [r3, #68]	; 0x44
   43a30:	mov	sl, #1
   43a34:	ldrb	r0, [r1, r0]
   43a38:	ubfx	r1, r0, #5, #3
   43a3c:	ldr	r1, [r2, r1, lsl #2]
   43a40:	and	r2, r0, #31
   43a44:	tst	r1, sl, lsl r2
   43a48:	bne	43a84 <__assert_fail@plt+0x31008>
   43a4c:	mov	sl, #0
   43a50:	cmp	r0, #10
   43a54:	beq	43a78 <__assert_fail@plt+0x30ffc>
   43a58:	b	43a84 <__assert_fail@plt+0x31008>
   43a5c:	ldr	r3, [sp, #40]	; 0x28
   43a60:	ldrb	r0, [r3, #78]	; 0x4e
   43a64:	cmp	r0, #0
   43a68:	bne	43924 <__assert_fail@plt+0x30ea8>
   43a6c:	mov	sl, #0
   43a70:	cmp	r4, #10
   43a74:	bne	43a84 <__assert_fail@plt+0x31008>
   43a78:	ldrb	sl, [r3, #77]	; 0x4d
   43a7c:	cmp	sl, #0
   43a80:	movwne	sl, #2
   43a84:	ldr	r0, [r3, #100]	; 0x64
   43a88:	ldr	r2, [sp, #52]	; 0x34
   43a8c:	add	r1, r9, r9, lsl #1
   43a90:	mov	r4, r3
   43a94:	add	r8, r8, r1, lsl #2
   43a98:	ldr	r2, [r0, r2, lsl #2]
   43a9c:	ldr	r0, [r0, r7, lsl #2]
   43aa0:	cmp	r2, #0
   43aa4:	ldrne	r2, [r2, #8]
   43aa8:	moveq	r2, #0
   43aac:	cmp	r0, #0
   43ab0:	str	r2, [sp, #44]	; 0x2c
   43ab4:	beq	43b20 <__assert_fail@plt+0x310a4>
   43ab8:	ldr	r1, [r0, #40]	; 0x28
   43abc:	sub	r4, fp, #44	; 0x2c
   43ac0:	mov	r2, r8
   43ac4:	mov	r0, r4
   43ac8:	bl	440bc <__assert_fail@plt+0x31640>
   43acc:	cmp	r0, #0
   43ad0:	str	r0, [fp, #-32]	; 0xffffffe0
   43ad4:	bne	43c20 <__assert_fail@plt+0x311a4>
   43ad8:	ldr	r1, [sp, #20]
   43adc:	sub	r0, fp, #32
   43ae0:	mov	r2, r4
   43ae4:	mov	r3, sl
   43ae8:	bl	4187c <__assert_fail@plt+0x2ee00>
   43aec:	ldr	r4, [sp, #40]	; 0x28
   43af0:	ldr	r1, [r4, #100]	; 0x64
   43af4:	str	r0, [r1, r7, lsl #2]
   43af8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   43afc:	bl	32c40 <__assert_fail@plt+0x201c4>
   43b00:	ldr	r0, [r4, #100]	; 0x64
   43b04:	ldr	r1, [r0, r7, lsl #2]
   43b08:	cmp	r1, #0
   43b0c:	bne	43b68 <__assert_fail@plt+0x310ec>
   43b10:	ldr	r9, [fp, #-32]	; 0xffffffe0
   43b14:	cmp	r9, #0
   43b18:	beq	43b68 <__assert_fail@plt+0x310ec>
   43b1c:	b	43c04 <__assert_fail@plt+0x31188>
   43b20:	ldr	r1, [sp, #20]
   43b24:	sub	r0, fp, #32
   43b28:	mov	r2, r8
   43b2c:	mov	r3, sl
   43b30:	bl	4187c <__assert_fail@plt+0x2ee00>
   43b34:	ldr	r1, [r4, #100]	; 0x64
   43b38:	str	r0, [r1, r7, lsl #2]
   43b3c:	ldr	r0, [r4, #100]	; 0x64
   43b40:	ldr	r1, [r0, r7, lsl #2]
   43b44:	cmp	r1, #0
   43b48:	bne	43b68 <__assert_fail@plt+0x310ec>
   43b4c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   43b50:	ldr	r1, [fp, #-48]	; 0xffffffd0
   43b54:	cmp	r9, #0
   43b58:	bne	43c04 <__assert_fail@plt+0x31188>
   43b5c:	cmp	r6, r1
   43b60:	bne	43bc4 <__assert_fail@plt+0x31148>
   43b64:	b	43b74 <__assert_fail@plt+0x310f8>
   43b68:	ldr	r1, [fp, #-48]	; 0xffffffd0
   43b6c:	cmp	r6, r1
   43b70:	bne	43bc4 <__assert_fail@plt+0x31148>
   43b74:	ldr	r1, [sp, #52]	; 0x34
   43b78:	ldr	r0, [r0, r1, lsl #2]
   43b7c:	ldr	r1, [sp, #44]	; 0x2c
   43b80:	ldr	r0, [r0, #8]
   43b84:	cmp	r0, r1
   43b88:	ble	43bc4 <__assert_fail@plt+0x31148>
   43b8c:	ldr	r4, [sp, #40]	; 0x28
   43b90:	ldr	r2, [sp, #52]	; 0x34
   43b94:	mov	r1, r8
   43b98:	mov	r0, r4
   43b9c:	bl	43124 <__assert_fail@plt+0x306a8>
   43ba0:	cmp	r0, #0
   43ba4:	str	r0, [fp, #-32]	; 0xffffffe0
   43ba8:	bne	43c38 <__assert_fail@plt+0x311bc>
   43bac:	mov	r0, r4
   43bb0:	mov	r1, r8
   43bb4:	bl	43220 <__assert_fail@plt+0x307a4>
   43bb8:	cmp	r0, #0
   43bbc:	str	r0, [fp, #-32]	; 0xffffffe0
   43bc0:	bne	43c48 <__assert_fail@plt+0x311cc>
   43bc4:	ldr	r9, [sp, #40]	; 0x28
   43bc8:	mov	r1, r5
   43bcc:	add	r1, r5, #1
   43bd0:	ldr	r5, [sp, #52]	; 0x34
   43bd4:	ldr	r0, [r9, #108]	; 0x6c
   43bd8:	cmp	r1, r0
   43bdc:	blt	43950 <__assert_fail@plt+0x30ed4>
   43be0:	ldr	r1, [sp, #16]
   43be4:	ldr	r3, [sp, #24]
   43be8:	ldr	r2, [sp, #20]
   43bec:	ldr	r0, [r1, #4]
   43bf0:	add	r3, r3, #1
   43bf4:	cmp	r3, r0
   43bf8:	blt	432a0 <__assert_fail@plt+0x30824>
   43bfc:	mov	r9, #0
   43c00:	str	r9, [fp, #-32]	; 0xffffffe0
   43c04:	mov	r0, r9
   43c08:	sub	sp, fp, #28
   43c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43c10:	mov	r9, r0
   43c14:	b	43c00 <__assert_fail@plt+0x31184>
   43c18:	mov	r9, #12
   43c1c:	b	43c00 <__assert_fail@plt+0x31184>
   43c20:	mov	r9, r0
   43c24:	ldr	r0, [fp, #-36]	; 0xffffffdc
   43c28:	bl	32c40 <__assert_fail@plt+0x201c4>
   43c2c:	mov	r0, r9
   43c30:	sub	sp, fp, #28
   43c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43c38:	mov	r9, r0
   43c3c:	mov	r0, r9
   43c40:	sub	sp, fp, #28
   43c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43c48:	mov	r9, r0
   43c4c:	mov	r0, r9
   43c50:	sub	sp, fp, #28
   43c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43c58:	push	{r4, r5, r6, r7, fp, lr}
   43c5c:	add	fp, sp, #16
   43c60:	mov	r4, r0
   43c64:	ldr	r0, [r0, #36]	; 0x24
   43c68:	mov	r5, #12
   43c6c:	cmn	r0, #-536870910	; 0xe0000002
   43c70:	bhi	43e60 <__assert_fail@plt+0x313e4>
   43c74:	ldr	r6, [r4, #48]	; 0x30
   43c78:	ldr	r2, [r4, #80]	; 0x50
   43c7c:	cmp	r6, r0, lsl #1
   43c80:	lslge	r6, r0, #1
   43c84:	cmp	r6, r1
   43c88:	movle	r6, r1
   43c8c:	cmp	r2, #2
   43c90:	blt	43cd8 <__assert_fail@plt+0x3125c>
   43c94:	cmn	r6, #-1073741823	; 0xc0000001
   43c98:	bhi	43e60 <__assert_fail@plt+0x313e4>
   43c9c:	ldr	r0, [r4, #8]
   43ca0:	lsl	r7, r6, #2
   43ca4:	mov	r1, r7
   43ca8:	bl	36328 <__assert_fail@plt+0x238ac>
   43cac:	cmp	r0, #0
   43cb0:	beq	43e60 <__assert_fail@plt+0x313e4>
   43cb4:	str	r0, [r4, #8]
   43cb8:	ldr	r0, [r4, #12]
   43cbc:	cmp	r0, #0
   43cc0:	beq	43cd8 <__assert_fail@plt+0x3125c>
   43cc4:	mov	r1, r7
   43cc8:	bl	36328 <__assert_fail@plt+0x238ac>
   43ccc:	cmp	r0, #0
   43cd0:	beq	43e60 <__assert_fail@plt+0x313e4>
   43cd4:	str	r0, [r4, #12]
   43cd8:	ldrb	r0, [r4, #75]	; 0x4b
   43cdc:	cmp	r0, #0
   43ce0:	beq	43cfc <__assert_fail@plt+0x31280>
   43ce4:	ldr	r0, [r4, #4]
   43ce8:	mov	r1, r6
   43cec:	bl	36328 <__assert_fail@plt+0x238ac>
   43cf0:	cmp	r0, #0
   43cf4:	beq	43e60 <__assert_fail@plt+0x313e4>
   43cf8:	str	r0, [r4, #4]
   43cfc:	str	r6, [r4, #36]	; 0x24
   43d00:	ldr	r0, [r4, #100]	; 0x64
   43d04:	cmp	r0, #0
   43d08:	beq	43d24 <__assert_fail@plt+0x312a8>
   43d0c:	mov	r1, #4
   43d10:	add	r1, r1, r6, lsl #2
   43d14:	bl	36328 <__assert_fail@plt+0x238ac>
   43d18:	cmp	r0, #0
   43d1c:	beq	43e60 <__assert_fail@plt+0x313e4>
   43d20:	str	r0, [r4, #100]	; 0x64
   43d24:	ldrb	r1, [r4, #72]	; 0x48
   43d28:	ldr	r0, [r4, #80]	; 0x50
   43d2c:	cmp	r1, #0
   43d30:	beq	43d50 <__assert_fail@plt+0x312d4>
   43d34:	cmp	r0, #2
   43d38:	blt	43d64 <__assert_fail@plt+0x312e8>
   43d3c:	mov	r0, r4
   43d40:	bl	3b830 <__assert_fail@plt+0x28db4>
   43d44:	cmp	r0, #0
   43d48:	popne	{r4, r5, r6, r7, fp, pc}
   43d4c:	b	43e5c <__assert_fail@plt+0x313e0>
   43d50:	cmp	r0, #2
   43d54:	blt	43ddc <__assert_fail@plt+0x31360>
   43d58:	mov	r0, r4
   43d5c:	bl	3bef0 <__assert_fail@plt+0x29474>
   43d60:	b	43e5c <__assert_fail@plt+0x313e0>
   43d64:	ldr	r6, [r4, #36]	; 0x24
   43d68:	ldr	r0, [r4, #48]	; 0x30
   43d6c:	ldr	r5, [r4, #28]
   43d70:	cmp	r6, r0
   43d74:	movgt	r6, r0
   43d78:	cmp	r5, r6
   43d7c:	bge	43dd0 <__assert_fail@plt+0x31354>
   43d80:	ldr	r1, [r4]
   43d84:	ldr	r2, [r4, #24]
   43d88:	ldr	r0, [r4, #64]	; 0x40
   43d8c:	add	r1, r1, r2
   43d90:	cmp	r0, #0
   43d94:	ldrb	r7, [r1, r5]
   43d98:	ldrbne	r7, [r0, r7]
   43d9c:	add	r0, r7, #128	; 0x80
   43da0:	lsr	r0, r0, #7
   43da4:	cmp	r0, #2
   43da8:	bhi	43db8 <__assert_fail@plt+0x3133c>
   43dac:	bl	12728 <__ctype_toupper_loc@plt>
   43db0:	ldr	r0, [r0]
   43db4:	ldr	r7, [r0, r7, lsl #2]
   43db8:	ldr	r0, [r4, #4]
   43dbc:	strb	r7, [r0, r5]
   43dc0:	add	r5, r5, #1
   43dc4:	cmp	r5, r6
   43dc8:	blt	43d80 <__assert_fail@plt+0x31304>
   43dcc:	mov	r5, r6
   43dd0:	str	r5, [r4, #28]
   43dd4:	str	r5, [r4, #32]
   43dd8:	b	43e5c <__assert_fail@plt+0x313e0>
   43ddc:	ldr	r2, [r4, #64]	; 0x40
   43de0:	cmp	r2, #0
   43de4:	beq	43e5c <__assert_fail@plt+0x313e0>
   43de8:	ldr	r0, [r4, #36]	; 0x24
   43dec:	ldr	r3, [r4, #48]	; 0x30
   43df0:	ldr	r1, [r4, #28]
   43df4:	cmp	r0, r3
   43df8:	movgt	r0, r3
   43dfc:	cmp	r1, r0
   43e00:	bge	43e54 <__assert_fail@plt+0x313d8>
   43e04:	ldm	r4, {r3, r7}
   43e08:	ldr	r6, [r4, #24]
   43e0c:	add	r6, r6, r1
   43e10:	ldrb	r3, [r3, r6]
   43e14:	ldrb	r2, [r2, r3]
   43e18:	strb	r2, [r7, r1]
   43e1c:	add	r1, r1, #1
   43e20:	cmp	r1, r0
   43e24:	bge	43e50 <__assert_fail@plt+0x313d4>
   43e28:	ldm	r4, {r2, r3}
   43e2c:	ldr	r7, [r4, #24]
   43e30:	ldr	r6, [r4, #64]	; 0x40
   43e34:	add	r2, r2, r7
   43e38:	ldrb	r2, [r2, r1]
   43e3c:	ldrb	r2, [r6, r2]
   43e40:	strb	r2, [r3, r1]
   43e44:	add	r1, r1, #1
   43e48:	cmp	r1, r0
   43e4c:	blt	43e28 <__assert_fail@plt+0x313ac>
   43e50:	mov	r1, r0
   43e54:	str	r1, [r4, #28]
   43e58:	str	r1, [r4, #32]
   43e5c:	mov	r5, #0
   43e60:	mov	r0, r5
   43e64:	pop	{r4, r5, r6, r7, fp, pc}
   43e68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   43e6c:	add	fp, sp, #24
   43e70:	sub	sp, sp, #16
   43e74:	mov	r9, r0
   43e78:	mov	r4, r1
   43e7c:	ldr	r5, [r1, #40]	; 0x28
   43e80:	ldr	r7, [r1, #84]	; 0x54
   43e84:	ldr	r0, [r1, #100]	; 0x64
   43e88:	ldr	r1, [r1, #104]	; 0x68
   43e8c:	mov	r6, r2
   43e90:	cmp	r5, r1
   43e94:	ble	43eb4 <__assert_fail@plt+0x31438>
   43e98:	str	r6, [r0, r5, lsl #2]
   43e9c:	str	r5, [r4, #104]	; 0x68
   43ea0:	cmp	r6, #0
   43ea4:	ldrne	r0, [r7, #76]	; 0x4c
   43ea8:	cmpne	r0, #0
   43eac:	beq	44008 <__assert_fail@plt+0x3158c>
   43eb0:	b	44014 <__assert_fail@plt+0x31598>
   43eb4:	ldr	r1, [r0, r5, lsl #2]
   43eb8:	cmp	r1, #0
   43ebc:	beq	43f38 <__assert_fail@plt+0x314bc>
   43ec0:	ldr	r2, [r1, #40]	; 0x28
   43ec4:	cmp	r6, #0
   43ec8:	beq	43f84 <__assert_fail@plt+0x31508>
   43ecc:	ldr	r8, [r6, #40]	; 0x28
   43ed0:	mov	r0, sp
   43ed4:	mov	r1, r8
   43ed8:	bl	440bc <__assert_fail@plt+0x31640>
   43edc:	cmp	r0, #0
   43ee0:	str	r0, [r9]
   43ee4:	bne	4408c <__assert_fail@plt+0x31610>
   43ee8:	ldr	r0, [r4, #40]	; 0x28
   43eec:	cmp	r0, #0
   43ef0:	ble	43f30 <__assert_fail@plt+0x314b4>
   43ef4:	ldr	r2, [r4, #48]	; 0x30
   43ef8:	sub	r1, r0, #1
   43efc:	cmp	r2, r1
   43f00:	beq	4407c <__assert_fail@plt+0x31600>
   43f04:	ldr	r2, [r4, #80]	; 0x50
   43f08:	cmp	r2, #2
   43f0c:	blt	43f50 <__assert_fail@plt+0x314d4>
   43f10:	ldr	r1, [r4, #8]
   43f14:	sub	r1, r1, #4
   43f18:	ldr	r6, [r1, r0, lsl #2]
   43f1c:	cmn	r6, #1
   43f20:	bne	43fa8 <__assert_fail@plt+0x3152c>
   43f24:	sub	r0, r0, #1
   43f28:	cmp	r0, #0
   43f2c:	bgt	43f18 <__assert_fail@plt+0x3149c>
   43f30:	ldr	r3, [r4, #60]	; 0x3c
   43f34:	b	43fcc <__assert_fail@plt+0x31550>
   43f38:	str	r6, [r0, r5, lsl #2]
   43f3c:	cmp	r6, #0
   43f40:	ldrne	r0, [r7, #76]	; 0x4c
   43f44:	cmpne	r0, #0
   43f48:	beq	44008 <__assert_fail@plt+0x3158c>
   43f4c:	b	44014 <__assert_fail@plt+0x31598>
   43f50:	ldr	r0, [r4, #4]
   43f54:	ldr	r2, [r4, #68]	; 0x44
   43f58:	mov	r3, #1
   43f5c:	ldrb	r0, [r0, r1]
   43f60:	ubfx	r1, r0, #5, #3
   43f64:	ldr	r1, [r2, r1, lsl #2]
   43f68:	and	r2, r0, #31
   43f6c:	tst	r1, r3, lsl r2
   43f70:	bne	43fcc <__assert_fail@plt+0x31550>
   43f74:	mov	r3, #0
   43f78:	cmp	r0, #10
   43f7c:	beq	43fc0 <__assert_fail@plt+0x31544>
   43f80:	b	43fcc <__assert_fail@plt+0x31550>
   43f84:	ldr	r0, [r2, #8]
   43f88:	vldr	d16, [r2]
   43f8c:	mov	r8, #0
   43f90:	str	r0, [sp, #8]
   43f94:	mov	r0, r5
   43f98:	vstr	d16, [sp]
   43f9c:	cmp	r0, #0
   43fa0:	bgt	43ef4 <__assert_fail@plt+0x31478>
   43fa4:	b	43f30 <__assert_fail@plt+0x314b4>
   43fa8:	ldrb	r0, [r4, #78]	; 0x4e
   43fac:	cmp	r0, #0
   43fb0:	bne	4409c <__assert_fail@plt+0x31620>
   43fb4:	mov	r3, #0
   43fb8:	cmp	r6, #10
   43fbc:	bne	43fcc <__assert_fail@plt+0x31550>
   43fc0:	ldrb	r3, [r4, #77]	; 0x4d
   43fc4:	cmp	r3, #0
   43fc8:	movwne	r3, #2
   43fcc:	mov	r2, sp
   43fd0:	mov	r0, r9
   43fd4:	mov	r1, r7
   43fd8:	bl	4187c <__assert_fail@plt+0x2ee00>
   43fdc:	mov	r6, r0
   43fe0:	ldr	r0, [r4, #100]	; 0x64
   43fe4:	cmp	r8, #0
   43fe8:	str	r6, [r0, r5, lsl #2]
   43fec:	beq	43ff8 <__assert_fail@plt+0x3157c>
   43ff0:	ldr	r0, [sp, #8]
   43ff4:	bl	32c40 <__assert_fail@plt+0x201c4>
   43ff8:	cmp	r6, #0
   43ffc:	ldrne	r0, [r7, #76]	; 0x4c
   44000:	cmpne	r0, #0
   44004:	bne	44014 <__assert_fail@plt+0x31598>
   44008:	mov	r0, r6
   4400c:	sub	sp, fp, #24
   44010:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   44014:	add	r7, r6, #4
   44018:	mov	r0, r4
   4401c:	mov	r2, r5
   44020:	mov	r1, r7
   44024:	bl	43124 <__assert_fail@plt+0x306a8>
   44028:	cmp	r0, #0
   4402c:	str	r0, [r9]
   44030:	bne	4406c <__assert_fail@plt+0x315f0>
   44034:	ldrb	r0, [r6, #52]	; 0x34
   44038:	tst	r0, #64	; 0x40
   4403c:	beq	44008 <__assert_fail@plt+0x3158c>
   44040:	mov	r0, r4
   44044:	mov	r1, r7
   44048:	bl	43220 <__assert_fail@plt+0x307a4>
   4404c:	str	r0, [r9]
   44050:	cmp	r0, #0
   44054:	mov	r6, #0
   44058:	ldreq	r0, [r4, #100]	; 0x64
   4405c:	ldreq	r6, [r0, r5, lsl #2]
   44060:	mov	r0, r6
   44064:	sub	sp, fp, #24
   44068:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4406c:	mov	r6, #0
   44070:	mov	r0, r6
   44074:	sub	sp, fp, #24
   44078:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4407c:	ldr	r0, [r4, #88]	; 0x58
   44080:	and	r0, r0, #2
   44084:	eor	r3, r0, #10
   44088:	b	43fcc <__assert_fail@plt+0x31550>
   4408c:	mov	r6, #0
   44090:	mov	r0, r6
   44094:	sub	sp, fp, #24
   44098:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4409c:	mov	r0, r6
   440a0:	bl	127dc <iswalnum@plt>
   440a4:	mov	r3, #1
   440a8:	cmp	r6, #95	; 0x5f
   440ac:	beq	43fcc <__assert_fail@plt+0x31550>
   440b0:	cmp	r0, #0
   440b4:	beq	43fb4 <__assert_fail@plt+0x31538>
   440b8:	b	43fcc <__assert_fail@plt+0x31550>
   440bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   440c0:	add	fp, sp, #28
   440c4:	sub	sp, sp, #20
   440c8:	mov	sl, r2
   440cc:	cmp	r1, #0
   440d0:	str	r0, [sp, #16]
   440d4:	beq	4413c <__assert_fail@plt+0x316c0>
   440d8:	ldr	r0, [r1, #4]
   440dc:	mov	r8, r1
   440e0:	cmp	sl, #0
   440e4:	beq	440f8 <__assert_fail@plt+0x3167c>
   440e8:	cmp	r0, #1
   440ec:	ldrge	r1, [sl, #4]
   440f0:	cmpge	r1, #1
   440f4:	bge	441b8 <__assert_fail@plt+0x3173c>
   440f8:	cmp	r0, #1
   440fc:	blt	4413c <__assert_fail@plt+0x316c0>
   44100:	ldr	r1, [sp, #16]
   44104:	str	r0, [r1, #4]
   44108:	ldr	r1, [r8, #4]
   4410c:	cmp	r1, #1
   44110:	blt	4419c <__assert_fail@plt+0x31720>
   44114:	ldr	r4, [sp, #16]
   44118:	str	r0, [r4]
   4411c:	lsl	r0, r0, #2
   44120:	bl	35608 <__assert_fail@plt+0x22b8c>
   44124:	cmp	r0, #0
   44128:	str	r0, [r4, #8]
   4412c:	beq	4432c <__assert_fail@plt+0x318b0>
   44130:	ldr	r2, [r8, #4]
   44134:	ldr	r1, [r8, #8]
   44138:	b	44188 <__assert_fail@plt+0x3170c>
   4413c:	cmp	sl, #0
   44140:	beq	4419c <__assert_fail@plt+0x31720>
   44144:	ldr	r0, [sl, #4]
   44148:	cmp	r0, #1
   4414c:	blt	4419c <__assert_fail@plt+0x31720>
   44150:	ldr	r1, [sp, #16]
   44154:	str	r0, [r1, #4]
   44158:	ldr	r1, [sl, #4]
   4415c:	cmp	r1, #1
   44160:	blt	4419c <__assert_fail@plt+0x31720>
   44164:	ldr	r4, [sp, #16]
   44168:	str	r0, [r4]
   4416c:	lsl	r0, r0, #2
   44170:	bl	35608 <__assert_fail@plt+0x22b8c>
   44174:	cmp	r0, #0
   44178:	str	r0, [r4, #8]
   4417c:	beq	4432c <__assert_fail@plt+0x318b0>
   44180:	ldr	r2, [sl, #4]
   44184:	ldr	r1, [sl, #8]
   44188:	lsl	r2, r2, #2
   4418c:	bl	124b8 <memcpy@plt>
   44190:	mov	r0, #0
   44194:	sub	sp, fp, #28
   44198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4419c:	ldr	r1, [sp, #16]
   441a0:	mov	r0, #0
   441a4:	str	r0, [r1]
   441a8:	str	r0, [r1, #4]
   441ac:	str	r0, [r1, #8]
   441b0:	sub	sp, fp, #28
   441b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   441b8:	ldr	r4, [sp, #16]
   441bc:	add	r0, r1, r0
   441c0:	str	r0, [r4]
   441c4:	lsl	r0, r0, #2
   441c8:	bl	35608 <__assert_fail@plt+0x22b8c>
   441cc:	cmp	r0, #0
   441d0:	str	r0, [r4, #8]
   441d4:	beq	4433c <__assert_fail@plt+0x318c0>
   441d8:	ldr	r9, [sl, #4]
   441dc:	ldr	lr, [r8, #4]
   441e0:	mov	r1, #0
   441e4:	mov	r7, #0
   441e8:	cmp	r9, #0
   441ec:	movwgt	r1, #1
   441f0:	cmp	lr, #1
   441f4:	blt	442c0 <__assert_fail@plt+0x31844>
   441f8:	mov	r2, #0
   441fc:	mov	ip, #0
   44200:	str	r2, [sp, #8]
   44204:	mov	r2, #0
   44208:	str	r2, [sp, #12]
   4420c:	mov	r2, #0
   44210:	ldr	r4, [sp, #12]
   44214:	mov	r7, ip
   44218:	tst	r1, #1
   4421c:	beq	442f0 <__assert_fail@plt+0x31874>
   44220:	ldr	r1, [sl, #8]
   44224:	ldr	r5, [r1, r7, lsl #2]
   44228:	ldr	r1, [r8, #8]
   4422c:	ldr	r3, [r1, r2, lsl #2]
   44230:	cmp	r3, r5
   44234:	ble	4425c <__assert_fail@plt+0x317e0>
   44238:	add	r7, r7, #1
   4423c:	mov	r1, #0
   44240:	str	r5, [r0, r4, lsl #2]
   44244:	add	r4, r4, #1
   44248:	cmp	r9, r7
   4424c:	movwgt	r1, #1
   44250:	cmp	lr, r2
   44254:	bgt	44218 <__assert_fail@plt+0x3179c>
   44258:	b	442c4 <__assert_fail@plt+0x31848>
   4425c:	str	r3, [r0, r4, lsl #2]
   44260:	ldr	r6, [sp, #8]
   44264:	add	r1, r7, #1
   44268:	mov	ip, r7
   4426c:	add	r2, r2, #1
   44270:	ldr	r9, [sl, #4]
   44274:	ldr	lr, [r8, #4]
   44278:	moveq	ip, r1
   4427c:	str	r1, [sp, #4]
   44280:	mov	r1, #0
   44284:	sub	r6, r6, #1
   44288:	cmp	r9, ip
   4428c:	str	r6, [sp, #8]
   44290:	add	r6, r4, #1
   44294:	movwgt	r1, #1
   44298:	cmp	lr, r2
   4429c:	str	r6, [sp, #12]
   442a0:	bgt	44210 <__assert_fail@plt+0x31794>
   442a4:	ldr	r2, [sp, #4]
   442a8:	cmp	r3, r5
   442ac:	add	r4, r4, #1
   442b0:	moveq	r7, r2
   442b4:	cmp	r1, #0
   442b8:	bne	442cc <__assert_fail@plt+0x31850>
   442bc:	b	44318 <__assert_fail@plt+0x3189c>
   442c0:	mov	r4, #0
   442c4:	cmp	r1, #0
   442c8:	beq	44318 <__assert_fail@plt+0x3189c>
   442cc:	ldr	r1, [sl, #8]
   442d0:	sub	r2, r9, r7
   442d4:	add	r0, r0, r4, lsl #2
   442d8:	lsl	r2, r2, #2
   442dc:	add	r1, r1, r7, lsl #2
   442e0:	bl	124b8 <memcpy@plt>
   442e4:	sub	r0, r4, r7
   442e8:	add	r4, r0, r9
   442ec:	b	44318 <__assert_fail@plt+0x3189c>
   442f0:	ldr	r1, [r8, #8]
   442f4:	add	r0, r0, r4, lsl #2
   442f8:	add	r1, r1, r2, lsl #2
   442fc:	sub	r2, lr, r2
   44300:	lsl	r2, r2, #2
   44304:	bl	124b8 <memcpy@plt>
   44308:	ldr	r0, [r8, #4]
   4430c:	ldr	r1, [sp, #8]
   44310:	add	r0, r0, r1
   44314:	add	r4, r0, r4
   44318:	ldr	r0, [sp, #16]
   4431c:	str	r4, [r0, #4]
   44320:	mov	r0, #0
   44324:	sub	sp, fp, #28
   44328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4432c:	ldr	r1, [sp, #16]
   44330:	mov	r0, #0
   44334:	str	r0, [r1]
   44338:	str	r0, [r1, #4]
   4433c:	mov	r0, #12
   44340:	sub	sp, fp, #28
   44344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4434c:	add	fp, sp, #28
   44350:	sub	sp, sp, #12
   44354:	mov	r6, r2
   44358:	mov	r7, r3
   4435c:	ldr	r2, [r2]
   44360:	ldr	r9, [fp, #8]
   44364:	mov	r4, r0
   44368:	mov	r0, #8
   4436c:	mov	r8, r1
   44370:	ldr	r3, [r6, #4]
   44374:	str	r0, [sp, #8]
   44378:	add	r1, r6, #8
   4437c:	mov	r0, r4
   44380:	stm	sp, {r7, r9}
   44384:	bl	4451c <__assert_fail@plt+0x31aa0>
   44388:	mov	r5, r0
   4438c:	cmp	r0, #0
   44390:	beq	443a0 <__assert_fail@plt+0x31924>
   44394:	mov	r0, r5
   44398:	sub	sp, fp, #28
   4439c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   443a0:	ldr	r0, [r4, #108]	; 0x6c
   443a4:	ldr	r1, [r4, #112]	; 0x70
   443a8:	ldr	sl, [r6, #4]
   443ac:	ldr	r5, [r8]
   443b0:	cmp	r0, r1
   443b4:	blt	44404 <__assert_fail@plt+0x31988>
   443b8:	ldr	r0, [r4, #116]	; 0x74
   443bc:	add	r1, r1, r1, lsl #1
   443c0:	lsl	r1, r1, #4
   443c4:	bl	36328 <__assert_fail@plt+0x238ac>
   443c8:	cmp	r0, #0
   443cc:	beq	44504 <__assert_fail@plt+0x31a88>
   443d0:	str	r0, [r4, #116]	; 0x74
   443d4:	ldr	r1, [r4, #108]	; 0x6c
   443d8:	ldr	r2, [r4, #112]	; 0x70
   443dc:	add	r1, r1, r1, lsl #1
   443e0:	add	r0, r0, r1, lsl #3
   443e4:	add	r1, r2, r2, lsl #1
   443e8:	lsl	r2, r1, #3
   443ec:	mov	r1, #0
   443f0:	bl	12800 <memset@plt>
   443f4:	ldr	r1, [r4, #112]	; 0x70
   443f8:	ldr	r0, [r4, #108]	; 0x6c
   443fc:	lsl	r1, r1, #1
   44400:	str	r1, [r4, #112]	; 0x70
   44404:	ldr	r1, [r4, #116]	; 0x74
   44408:	cmp	r0, #1
   4440c:	blt	4442c <__assert_fail@plt+0x319b0>
   44410:	sub	r2, r0, #1
   44414:	add	r2, r2, r2, lsl #1
   44418:	add	r2, r1, r2, lsl #3
   4441c:	ldr	r3, [r2, #4]
   44420:	cmp	r3, r9
   44424:	moveq	r3, #1
   44428:	strbeq	r3, [r2, #20]
   4442c:	add	r2, r0, r0, lsl #1
   44430:	cmp	sl, r5
   44434:	mov	r3, #0
   44438:	add	r0, r0, #1
   4443c:	str	r7, [r1, r2, lsl #3]!
   44440:	mov	r2, #0
   44444:	mvneq	r3, #0
   44448:	str	r9, [r1, #4]
   4444c:	str	r5, [r1, #8]
   44450:	str	sl, [r1, #12]
   44454:	str	r3, [r1, #16]
   44458:	str	r0, [r4, #108]	; 0x6c
   4445c:	strb	r2, [r1, #20]
   44460:	sub	r0, sl, r5
   44464:	ldr	r1, [r4, #120]	; 0x78
   44468:	cmp	r1, r0
   4446c:	strlt	r0, [r4, #120]	; 0x78
   44470:	ldr	r0, [r6, #4]
   44474:	ldr	r1, [r8]
   44478:	ldr	r7, [r4, #104]	; 0x68
   4447c:	add	r0, r0, r9
   44480:	sub	r6, r0, r1
   44484:	ldr	r0, [r4, #36]	; 0x24
   44488:	cmp	r0, r6
   4448c:	ldrle	r1, [r4, #48]	; 0x30
   44490:	cmple	r0, r1
   44494:	blt	444e8 <__assert_fail@plt+0x31a6c>
   44498:	ldr	r0, [r4, #28]
   4449c:	cmp	r0, r6
   444a0:	ldrle	r1, [r4, #48]	; 0x30
   444a4:	cmple	r0, r1
   444a8:	blt	444e8 <__assert_fail@plt+0x31a6c>
   444ac:	mov	r5, #0
   444b0:	cmp	r6, r7
   444b4:	ble	44394 <__assert_fail@plt+0x31918>
   444b8:	sub	r0, r6, r7
   444bc:	mov	r1, #0
   444c0:	mov	r5, #0
   444c4:	lsl	r2, r0, #2
   444c8:	ldr	r0, [r4, #100]	; 0x64
   444cc:	add	r0, r0, r7, lsl #2
   444d0:	add	r0, r0, #4
   444d4:	bl	12800 <memset@plt>
   444d8:	str	r6, [r4, #104]	; 0x68
   444dc:	mov	r0, r5
   444e0:	sub	sp, fp, #28
   444e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   444e8:	add	r1, r6, #1
   444ec:	mov	r0, r4
   444f0:	bl	43c58 <__assert_fail@plt+0x311dc>
   444f4:	mov	r5, r0
   444f8:	cmp	r0, #0
   444fc:	bne	44394 <__assert_fail@plt+0x31918>
   44500:	b	444ac <__assert_fail@plt+0x31a30>
   44504:	ldr	r0, [r4, #116]	; 0x74
   44508:	bl	32c40 <__assert_fail@plt+0x201c4>
   4450c:	mov	r5, #12
   44510:	mov	r0, r5
   44514:	sub	sp, fp, #28
   44518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4451c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44520:	add	fp, sp, #28
   44524:	sub	sp, sp, #84	; 0x54
   44528:	ldr	sl, [r0, #84]	; 0x54
   4452c:	mov	r8, r2
   44530:	mov	r2, #0
   44534:	mov	r9, r3
   44538:	ldr	r3, [fp, #12]
   4453c:	str	r0, [sp, #40]	; 0x28
   44540:	str	r2, [fp, #-52]	; 0xffffffcc
   44544:	ldr	r5, [r1, #4]
   44548:	ldr	r2, [sl]
   4454c:	str	sl, [sp, #20]
   44550:	ldr	r2, [r2, r8, lsl #3]
   44554:	str	r2, [sp, #24]
   44558:	ldr	r2, [r0, #120]	; 0x78
   4455c:	add	r2, r2, r3
   44560:	cmp	r5, r2
   44564:	ble	44e68 <__assert_fail@plt+0x323ec>
   44568:	add	r4, r1, #8
   4456c:	ldr	r2, [r0, #40]	; 0x28
   44570:	ldr	r5, [r1]
   44574:	ldr	r3, [r0, #88]	; 0x58
   44578:	str	r1, [sp, #16]
   4457c:	str	r2, [sp, #12]
   44580:	ldr	r2, [r0, #100]	; 0x64
   44584:	cmp	r5, #0
   44588:	moveq	r5, r9
   4458c:	cmp	r5, #0
   44590:	str	r2, [sp, #8]
   44594:	ldr	r2, [r4]
   44598:	str	r2, [r0, #100]	; 0x64
   4459c:	str	r5, [r0, #40]	; 0x28
   445a0:	ble	445e4 <__assert_fail@plt+0x31b68>
   445a4:	ldr	r2, [r0, #48]	; 0x30
   445a8:	sub	r7, r5, #1
   445ac:	cmp	r2, r7
   445b0:	beq	44ed8 <__assert_fail@plt+0x3245c>
   445b4:	ldr	r2, [r0, #80]	; 0x50
   445b8:	cmp	r2, #2
   445bc:	blt	44628 <__assert_fail@plt+0x31bac>
   445c0:	ldr	r2, [r0, #8]
   445c4:	mov	r3, r5
   445c8:	sub	r2, r2, #4
   445cc:	ldr	r6, [r2, r3, lsl #2]
   445d0:	cmn	r6, #1
   445d4:	bne	4465c <__assert_fail@plt+0x31be0>
   445d8:	sub	r3, r3, #1
   445dc:	cmp	r3, #0
   445e0:	bgt	445cc <__assert_fail@plt+0x31b50>
   445e4:	ldr	r7, [r0, #60]	; 0x3c
   445e8:	cmp	r5, r9
   445ec:	beq	4468c <__assert_fail@plt+0x31c10>
   445f0:	ldr	r0, [sp, #40]	; 0x28
   445f4:	ldr	r0, [r0, #100]	; 0x64
   445f8:	ldr	r4, [r0, r5, lsl #2]
   445fc:	cmp	r4, #0
   44600:	beq	44748 <__assert_fail@plt+0x31ccc>
   44604:	ldrb	r0, [r4, #52]	; 0x34
   44608:	ldr	r8, [fp, #16]
   4460c:	tst	r0, #64	; 0x40
   44610:	bne	44760 <__assert_fail@plt+0x31ce4>
   44614:	mov	r0, #0
   44618:	str	r0, [sp, #52]	; 0x34
   4461c:	str	r0, [sp, #48]	; 0x30
   44620:	str	r0, [sp, #56]	; 0x38
   44624:	b	447ac <__assert_fail@plt+0x31d30>
   44628:	ldr	r3, [r0, #4]
   4462c:	ldr	r2, [r0, #68]	; 0x44
   44630:	ldrb	r0, [r3, r7]
   44634:	mov	r7, #1
   44638:	ubfx	r1, r0, #5, #3
   4463c:	ldr	r1, [r2, r1, lsl #2]
   44640:	and	r2, r0, #31
   44644:	tst	r1, r7, lsl r2
   44648:	bne	44684 <__assert_fail@plt+0x31c08>
   4464c:	mov	r7, #0
   44650:	cmp	r0, #10
   44654:	beq	44674 <__assert_fail@plt+0x31bf8>
   44658:	b	44684 <__assert_fail@plt+0x31c08>
   4465c:	ldrb	r0, [r0, #78]	; 0x4e
   44660:	cmp	r0, #0
   44664:	bne	44f24 <__assert_fail@plt+0x324a8>
   44668:	mov	r7, #0
   4466c:	cmp	r6, #10
   44670:	bne	44684 <__assert_fail@plt+0x31c08>
   44674:	ldr	r0, [sp, #40]	; 0x28
   44678:	ldrb	r7, [r0, #77]	; 0x4d
   4467c:	cmp	r7, #0
   44680:	movwne	r7, #2
   44684:	cmp	r5, r9
   44688:	bne	445f0 <__assert_fail@plt+0x31b74>
   4468c:	mov	r0, #1
   44690:	str	r0, [sp, #52]	; 0x34
   44694:	str	r0, [sp, #48]	; 0x30
   44698:	mov	r0, #4
   4469c:	bl	35608 <__assert_fail@plt+0x22b8c>
   446a0:	cmp	r0, #0
   446a4:	str	r0, [sp, #56]	; 0x38
   446a8:	beq	44f04 <__assert_fail@plt+0x32488>
   446ac:	str	r8, [r0]
   446b0:	ldr	r8, [fp, #16]
   446b4:	ldr	r2, [sp, #24]
   446b8:	mov	r0, #0
   446bc:	add	r1, sp, #48	; 0x30
   446c0:	str	r0, [fp, #-52]	; 0xffffffcc
   446c4:	mov	r0, sl
   446c8:	mov	r3, r8
   446cc:	bl	44f44 <__assert_fail@plt+0x324c8>
   446d0:	cmp	r0, #0
   446d4:	str	r0, [fp, #-52]	; 0xffffffcc
   446d8:	bne	44eec <__assert_fail@plt+0x32470>
   446dc:	ldr	r0, [sp, #52]	; 0x34
   446e0:	cmp	r0, #0
   446e4:	beq	4470c <__assert_fail@plt+0x31c90>
   446e8:	ldr	r0, [sp, #40]	; 0x28
   446ec:	ldr	r3, [sp, #24]
   446f0:	add	r1, sp, #48	; 0x30
   446f4:	mov	r2, r5
   446f8:	str	r8, [sp]
   446fc:	bl	45090 <__assert_fail@plt+0x32614>
   44700:	cmp	r0, #0
   44704:	str	r0, [fp, #-52]	; 0xffffffcc
   44708:	bne	44eec <__assert_fail@plt+0x32470>
   4470c:	ldr	r1, [sp, #20]
   44710:	sub	r0, fp, #52	; 0x34
   44714:	add	r2, sp, #48	; 0x30
   44718:	mov	r3, r7
   4471c:	bl	4187c <__assert_fail@plt+0x2ee00>
   44720:	mov	r4, r0
   44724:	cmp	r0, #0
   44728:	bne	44738 <__assert_fail@plt+0x31cbc>
   4472c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   44730:	cmp	r0, #0
   44734:	bne	44e50 <__assert_fail@plt+0x323d4>
   44738:	ldr	r0, [sp, #40]	; 0x28
   4473c:	ldr	r0, [r0, #100]	; 0x64
   44740:	str	r4, [r0, r5, lsl #2]
   44744:	b	447ac <__assert_fail@plt+0x31d30>
   44748:	ldr	r8, [fp, #16]
   4474c:	mov	r4, #0
   44750:	str	r4, [sp, #52]	; 0x34
   44754:	str	r4, [sp, #48]	; 0x30
   44758:	str	r4, [sp, #56]	; 0x38
   4475c:	b	447ac <__assert_fail@plt+0x31d30>
   44760:	ldr	r0, [r4, #8]
   44764:	cmp	r0, #1
   44768:	str	r0, [sp, #52]	; 0x34
   4476c:	blt	44dfc <__assert_fail@plt+0x32380>
   44770:	str	r0, [sp, #48]	; 0x30
   44774:	lsl	r0, r0, #2
   44778:	bl	35608 <__assert_fail@plt+0x22b8c>
   4477c:	cmp	r0, #0
   44780:	str	r0, [sp, #56]	; 0x38
   44784:	beq	44f04 <__assert_fail@plt+0x32488>
   44788:	ldr	r2, [r4, #8]
   4478c:	ldr	r1, [r4, #12]
   44790:	lsl	r2, r2, #2
   44794:	bl	124b8 <memcpy@plt>
   44798:	ldrb	r0, [r4, #52]	; 0x34
   4479c:	mov	r1, #0
   447a0:	str	r1, [fp, #-52]	; 0xffffffcc
   447a4:	tst	r0, #64	; 0x40
   447a8:	bne	446e8 <__assert_fail@plt+0x31c6c>
   447ac:	str	r4, [sp, #36]	; 0x24
   447b0:	ldr	r4, [fp, #12]
   447b4:	mov	r9, r4
   447b8:	cmp	r5, r4
   447bc:	bge	44d44 <__assert_fail@plt+0x322c8>
   447c0:	ldr	r7, [sp, #40]	; 0x28
   447c4:	ldr	r4, [sp, #20]
   447c8:	ldr	sl, [sp, #24]
   447cc:	mov	r0, #0
   447d0:	str	r0, [sp, #32]
   447d4:	ldr	r0, [r7, #120]	; 0x78
   447d8:	ldr	r1, [sp, #32]
   447dc:	cmp	r1, r0
   447e0:	bgt	44d48 <__assert_fail@plt+0x322cc>
   447e4:	mov	r0, #0
   447e8:	add	r1, r5, #1
   447ec:	str	r0, [sp, #52]	; 0x34
   447f0:	str	r1, [sp, #28]
   447f4:	ldr	r0, [r7, #100]	; 0x64
   447f8:	ldr	r0, [r0, r1, lsl #2]
   447fc:	cmp	r0, #0
   44800:	beq	4481c <__assert_fail@plt+0x31da0>
   44804:	add	r1, r0, #4
   44808:	add	r0, sp, #48	; 0x30
   4480c:	bl	4158c <__assert_fail@plt+0x2eb10>
   44810:	cmp	r0, #0
   44814:	str	r0, [fp, #-52]	; 0xffffffcc
   44818:	bne	44e50 <__assert_fail@plt+0x323d4>
   4481c:	ldr	r1, [sp, #36]	; 0x24
   44820:	cmp	r1, #0
   44824:	beq	44bb8 <__assert_fail@plt+0x3213c>
   44828:	mov	r0, #0
   4482c:	ldr	r8, [r7, #84]	; 0x54
   44830:	str	r0, [fp, #-32]	; 0xffffffe0
   44834:	str	r0, [fp, #-44]	; 0xffffffd4
   44838:	str	r0, [fp, #-48]	; 0xffffffd0
   4483c:	str	r0, [fp, #-40]	; 0xffffffd8
   44840:	ldr	r1, [r1, #20]
   44844:	cmp	r1, #1
   44848:	blt	44ba8 <__assert_fail@plt+0x3212c>
   4484c:	str	r5, [sp, #44]	; 0x2c
   44850:	ldr	r5, [sp, #36]	; 0x24
   44854:	mov	r4, #0
   44858:	b	44a14 <__assert_fail@plt+0x31f98>
   4485c:	mov	r0, #1
   44860:	str	r0, [sp, #52]	; 0x34
   44864:	str	r0, [sp, #48]	; 0x30
   44868:	mov	r0, #4
   4486c:	bl	35608 <__assert_fail@plt+0x22b8c>
   44870:	cmp	r0, #0
   44874:	str	r0, [sp, #56]	; 0x38
   44878:	beq	44e14 <__assert_fail@plt+0x32398>
   4487c:	str	r6, [r0]
   44880:	ldr	r0, [r5, #20]
   44884:	add	r4, r4, #1
   44888:	cmp	r4, r0
   4488c:	blt	44a14 <__assert_fail@plt+0x31f98>
   44890:	b	44b90 <__assert_fail@plt+0x32114>
   44894:	cmp	r2, r1
   44898:	bne	44904 <__assert_fail@plt+0x31e88>
   4489c:	lsl	r0, r2, #1
   448a0:	lsl	r1, r2, #3
   448a4:	str	r0, [sp, #48]	; 0x30
   448a8:	ldr	r0, [sp, #56]	; 0x38
   448ac:	bl	36328 <__assert_fail@plt+0x238ac>
   448b0:	cmp	r0, #0
   448b4:	beq	44e20 <__assert_fail@plt+0x323a4>
   448b8:	str	r0, [sp, #56]	; 0x38
   448bc:	ldr	r1, [sp, #52]	; 0x34
   448c0:	ldr	r2, [r0]
   448c4:	cmp	r2, r6
   448c8:	ble	44914 <__assert_fail@plt+0x31e98>
   448cc:	cmp	r1, #1
   448d0:	blt	44944 <__assert_fail@plt+0x31ec8>
   448d4:	add	r2, r0, r1, lsl #2
   448d8:	add	r1, r1, #1
   448dc:	mov	r3, r2
   448e0:	ldr	r7, [r3, #-4]!
   448e4:	sub	r1, r1, #1
   448e8:	cmp	r1, #1
   448ec:	str	r7, [r2]
   448f0:	mov	r2, r3
   448f4:	bgt	448e0 <__assert_fail@plt+0x31e64>
   448f8:	ldr	r7, [sp, #40]	; 0x28
   448fc:	sub	r1, r1, #1
   44900:	b	44944 <__assert_fail@plt+0x31ec8>
   44904:	ldr	r0, [sp, #56]	; 0x38
   44908:	ldr	r2, [r0]
   4490c:	cmp	r2, r6
   44910:	bgt	448cc <__assert_fail@plt+0x31e50>
   44914:	add	r2, r0, r1, lsl #2
   44918:	ldr	r3, [r2, #-4]
   4491c:	cmp	r3, r6
   44920:	ble	44944 <__assert_fail@plt+0x31ec8>
   44924:	sub	r1, r1, #2
   44928:	str	r3, [r2]
   4492c:	sub	r1, r1, #1
   44930:	ldr	r3, [r2, #-8]
   44934:	sub	r2, r2, #4
   44938:	cmp	r3, r6
   4493c:	bgt	44928 <__assert_fail@plt+0x31eac>
   44940:	add	r1, r1, #2
   44944:	str	r6, [r0, r1, lsl #2]
   44948:	b	44b74 <__assert_fail@plt+0x320f8>
   4494c:	cmp	r2, r1
   44950:	bne	449bc <__assert_fail@plt+0x31f40>
   44954:	lsl	r0, r2, #1
   44958:	lsl	r1, r2, #3
   4495c:	str	r0, [fp, #-48]	; 0xffffffd0
   44960:	ldr	r0, [fp, #-40]	; 0xffffffd8
   44964:	bl	36328 <__assert_fail@plt+0x238ac>
   44968:	cmp	r0, #0
   4496c:	beq	44e20 <__assert_fail@plt+0x323a4>
   44970:	str	r0, [fp, #-40]	; 0xffffffd8
   44974:	ldr	r1, [fp, #-44]	; 0xffffffd4
   44978:	ldr	r2, [r0]
   4497c:	cmp	r2, r5
   44980:	bgt	449cc <__assert_fail@plt+0x31f50>
   44984:	add	r2, r0, r1, lsl #2
   44988:	ldr	r7, [sp, #40]	; 0x28
   4498c:	ldr	r3, [r2, #-4]
   44990:	cmp	r3, r5
   44994:	ble	44a00 <__assert_fail@plt+0x31f84>
   44998:	sub	r1, r1, #2
   4499c:	str	r3, [r2]
   449a0:	sub	r1, r1, #1
   449a4:	ldr	r3, [r2, #-8]
   449a8:	sub	r2, r2, #4
   449ac:	cmp	r3, r5
   449b0:	bgt	4499c <__assert_fail@plt+0x31f20>
   449b4:	add	r1, r1, #2
   449b8:	b	44a00 <__assert_fail@plt+0x31f84>
   449bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   449c0:	ldr	r2, [r0]
   449c4:	cmp	r2, r5
   449c8:	ble	44984 <__assert_fail@plt+0x31f08>
   449cc:	cmp	r1, #1
   449d0:	blt	449fc <__assert_fail@plt+0x31f80>
   449d4:	add	r2, r0, r1, lsl #2
   449d8:	add	r1, r1, #1
   449dc:	mov	r3, r2
   449e0:	ldr	r7, [r3, #-4]!
   449e4:	sub	r1, r1, #1
   449e8:	cmp	r1, #1
   449ec:	str	r7, [r2]
   449f0:	mov	r2, r3
   449f4:	bgt	449e0 <__assert_fail@plt+0x31f64>
   449f8:	sub	r1, r1, #1
   449fc:	ldr	r7, [sp, #40]	; 0x28
   44a00:	str	r5, [r0, r1, lsl #2]
   44a04:	ldr	r0, [fp, #-44]	; 0xffffffd4
   44a08:	add	r0, r0, #1
   44a0c:	str	r0, [fp, #-44]	; 0xffffffd4
   44a10:	b	44aec <__assert_fail@plt+0x32070>
   44a14:	ldr	r0, [r5, #24]
   44a18:	ldr	sl, [r0, r4, lsl #2]
   44a1c:	ldr	r0, [r8]
   44a20:	add	r1, r0, sl, lsl #3
   44a24:	ldrb	r1, [r1, #6]
   44a28:	tst	r1, #16
   44a2c:	beq	44b34 <__assert_fail@plt+0x320b8>
   44a30:	ldr	r5, [sp, #44]	; 0x2c
   44a34:	mov	r0, r8
   44a38:	mov	r1, sl
   44a3c:	mov	r2, r7
   44a40:	mov	r3, r5
   44a44:	bl	459d0 <__assert_fail@plt+0x32f54>
   44a48:	mov	r9, r0
   44a4c:	cmp	r0, #2
   44a50:	blt	44b20 <__assert_fail@plt+0x320a4>
   44a54:	ldr	r0, [sp, #40]	; 0x28
   44a58:	ldr	r1, [r8, #12]
   44a5c:	add	r6, r9, r5
   44a60:	ldr	r0, [r0, #100]	; 0x64
   44a64:	ldr	r5, [r1, sl, lsl #2]
   44a68:	mov	r1, #0
   44a6c:	ldr	r0, [r0, r6, lsl #2]
   44a70:	str	r1, [fp, #-44]	; 0xffffffd4
   44a74:	cmp	r0, #0
   44a78:	beq	44a94 <__assert_fail@plt+0x32018>
   44a7c:	add	r1, r0, #4
   44a80:	sub	r0, fp, #48	; 0x30
   44a84:	bl	4158c <__assert_fail@plt+0x2eb10>
   44a88:	cmp	r0, #0
   44a8c:	str	r0, [fp, #-32]	; 0xffffffe0
   44a90:	bne	44e28 <__assert_fail@plt+0x323ac>
   44a94:	ldr	r2, [fp, #-48]	; 0xffffffd0
   44a98:	cmp	r2, #0
   44a9c:	beq	44ac4 <__assert_fail@plt+0x32048>
   44aa0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   44aa4:	cmp	r1, #0
   44aa8:	bne	4494c <__assert_fail@plt+0x31ed0>
   44aac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   44ab0:	str	r5, [r0]
   44ab4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   44ab8:	add	r0, r0, #1
   44abc:	str	r0, [fp, #-44]	; 0xffffffd4
   44ac0:	b	44ae8 <__assert_fail@plt+0x3206c>
   44ac4:	mov	r0, #1
   44ac8:	str	r0, [fp, #-44]	; 0xffffffd4
   44acc:	str	r0, [fp, #-48]	; 0xffffffd0
   44ad0:	mov	r0, #4
   44ad4:	bl	35608 <__assert_fail@plt+0x22b8c>
   44ad8:	cmp	r0, #0
   44adc:	str	r0, [fp, #-40]	; 0xffffffd8
   44ae0:	beq	44e38 <__assert_fail@plt+0x323bc>
   44ae4:	str	r5, [r0]
   44ae8:	ldr	r7, [sp, #40]	; 0x28
   44aec:	sub	r0, fp, #32
   44af0:	mov	r1, r8
   44af4:	sub	r2, fp, #48	; 0x30
   44af8:	bl	45730 <__assert_fail@plt+0x32cb4>
   44afc:	ldr	r1, [r7, #100]	; 0x64
   44b00:	str	r0, [r1, r6, lsl #2]
   44b04:	ldr	r0, [r7, #100]	; 0x64
   44b08:	ldr	r0, [r0, r6, lsl #2]
   44b0c:	cmp	r0, #0
   44b10:	bne	44b20 <__assert_fail@plt+0x320a4>
   44b14:	ldr	r7, [fp, #-32]	; 0xffffffe0
   44b18:	cmp	r7, #0
   44b1c:	bne	44e2c <__assert_fail@plt+0x323b0>
   44b20:	ldr	r7, [sp, #40]	; 0x28
   44b24:	ldr	r5, [sp, #36]	; 0x24
   44b28:	cmp	r9, #0
   44b2c:	bne	44b4c <__assert_fail@plt+0x320d0>
   44b30:	ldr	r0, [r8]
   44b34:	ldr	r2, [sp, #44]	; 0x2c
   44b38:	add	r1, r0, sl, lsl #3
   44b3c:	mov	r0, r7
   44b40:	bl	45ce8 <__assert_fail@plt+0x3326c>
   44b44:	cmp	r0, #0
   44b48:	beq	44b80 <__assert_fail@plt+0x32104>
   44b4c:	ldr	r0, [r8, #12]
   44b50:	ldr	r2, [sp, #48]	; 0x30
   44b54:	ldr	r6, [r0, sl, lsl #2]
   44b58:	cmp	r2, #0
   44b5c:	beq	4485c <__assert_fail@plt+0x31de0>
   44b60:	ldr	r1, [sp, #52]	; 0x34
   44b64:	cmp	r1, #0
   44b68:	bne	44894 <__assert_fail@plt+0x31e18>
   44b6c:	ldr	r0, [sp, #56]	; 0x38
   44b70:	str	r6, [r0]
   44b74:	ldr	r0, [sp, #52]	; 0x34
   44b78:	add	r0, r0, #1
   44b7c:	str	r0, [sp, #52]	; 0x34
   44b80:	ldr	r0, [r5, #20]
   44b84:	add	r4, r4, #1
   44b88:	cmp	r4, r0
   44b8c:	blt	44a14 <__assert_fail@plt+0x31f98>
   44b90:	ldr	r4, [fp, #12]
   44b94:	ldr	r0, [fp, #-40]	; 0xffffffd8
   44b98:	ldr	sl, [sp, #24]
   44b9c:	ldr	r5, [sp, #44]	; 0x2c
   44ba0:	mov	r9, r4
   44ba4:	ldr	r4, [sp, #20]
   44ba8:	bl	32c40 <__assert_fail@plt+0x201c4>
   44bac:	ldr	r8, [fp, #16]
   44bb0:	mov	r0, #0
   44bb4:	str	r0, [fp, #-52]	; 0xffffffcc
   44bb8:	ldr	r0, [sp, #52]	; 0x34
   44bbc:	cmp	r0, #0
   44bc0:	beq	44c0c <__assert_fail@plt+0x32190>
   44bc4:	add	r6, sp, #48	; 0x30
   44bc8:	mov	r0, r4
   44bcc:	mov	r2, sl
   44bd0:	mov	r3, r8
   44bd4:	mov	r1, r6
   44bd8:	bl	44f44 <__assert_fail@plt+0x324c8>
   44bdc:	cmp	r0, #0
   44be0:	str	r0, [fp, #-52]	; 0xffffffcc
   44be4:	bne	44e50 <__assert_fail@plt+0x323d4>
   44be8:	ldr	r2, [sp, #28]
   44bec:	mov	r0, r7
   44bf0:	mov	r1, r6
   44bf4:	mov	r3, sl
   44bf8:	str	r8, [sp]
   44bfc:	bl	45090 <__assert_fail@plt+0x32614>
   44c00:	cmp	r0, #0
   44c04:	str	r0, [fp, #-52]	; 0xffffffcc
   44c08:	bne	44e50 <__assert_fail@plt+0x323d4>
   44c0c:	cmn	r5, #1
   44c10:	ble	44c4c <__assert_fail@plt+0x321d0>
   44c14:	ldr	r0, [r7, #48]	; 0x30
   44c18:	cmp	r0, r5
   44c1c:	beq	44d10 <__assert_fail@plt+0x32294>
   44c20:	ldr	r0, [r7, #80]	; 0x50
   44c24:	cmp	r0, #2
   44c28:	blt	44c58 <__assert_fail@plt+0x321dc>
   44c2c:	ldr	r0, [r7, #8]
   44c30:	ldr	r6, [r0, r5, lsl #2]
   44c34:	cmn	r6, #1
   44c38:	bne	44c90 <__assert_fail@plt+0x32214>
   44c3c:	sub	r1, r5, #1
   44c40:	cmp	r5, #0
   44c44:	mov	r5, r1
   44c48:	bgt	44c30 <__assert_fail@plt+0x321b4>
   44c4c:	ldr	r3, [r7, #60]	; 0x3c
   44c50:	add	r5, sp, #48	; 0x30
   44c54:	b	44cb8 <__assert_fail@plt+0x3223c>
   44c58:	ldr	r0, [r7, #4]
   44c5c:	ldr	r1, [r7, #68]	; 0x44
   44c60:	mov	r3, #1
   44c64:	ldrb	r0, [r0, r5]
   44c68:	add	r5, sp, #48	; 0x30
   44c6c:	ubfx	r2, r0, #5, #3
   44c70:	ldr	r1, [r1, r2, lsl #2]
   44c74:	and	r2, r0, #31
   44c78:	tst	r1, r3, lsl r2
   44c7c:	bne	44cb8 <__assert_fail@plt+0x3223c>
   44c80:	mov	r3, #0
   44c84:	cmp	r0, #10
   44c88:	beq	44cac <__assert_fail@plt+0x32230>
   44c8c:	b	44cb8 <__assert_fail@plt+0x3223c>
   44c90:	ldrb	r0, [r7, #78]	; 0x4e
   44c94:	add	r5, sp, #48	; 0x30
   44c98:	cmp	r0, #0
   44c9c:	bne	44d24 <__assert_fail@plt+0x322a8>
   44ca0:	mov	r3, #0
   44ca4:	cmp	r6, #10
   44ca8:	bne	44cb8 <__assert_fail@plt+0x3223c>
   44cac:	ldrb	r3, [r7, #77]	; 0x4d
   44cb0:	cmp	r3, #0
   44cb4:	movwne	r3, #2
   44cb8:	sub	r0, fp, #52	; 0x34
   44cbc:	mov	r1, r4
   44cc0:	mov	r2, r5
   44cc4:	bl	4187c <__assert_fail@plt+0x2ee00>
   44cc8:	cmp	r0, #0
   44ccc:	str	r0, [sp, #36]	; 0x24
   44cd0:	bne	44ce0 <__assert_fail@plt+0x32264>
   44cd4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   44cd8:	cmp	r0, #0
   44cdc:	bne	44e50 <__assert_fail@plt+0x323d4>
   44ce0:	ldr	r1, [sp, #28]
   44ce4:	ldr	r2, [sp, #36]	; 0x24
   44ce8:	ldr	r0, [r7, #100]	; 0x64
   44cec:	str	r2, [r0, r1, lsl #2]
   44cf0:	cmp	r2, #0
   44cf4:	ldr	r2, [sp, #32]
   44cf8:	mov	r0, #0
   44cfc:	mov	r5, r1
   44d00:	addeq	r0, r2, #1
   44d04:	cmp	r1, r9
   44d08:	blt	447d0 <__assert_fail@plt+0x31d54>
   44d0c:	b	44d4c <__assert_fail@plt+0x322d0>
   44d10:	ldr	r0, [r7, #88]	; 0x58
   44d14:	add	r5, sp, #48	; 0x30
   44d18:	and	r0, r0, #2
   44d1c:	eor	r3, r0, #10
   44d20:	b	44cb8 <__assert_fail@plt+0x3223c>
   44d24:	mov	r0, r6
   44d28:	bl	127dc <iswalnum@plt>
   44d2c:	mov	r3, #1
   44d30:	cmp	r6, #95	; 0x5f
   44d34:	beq	44cb8 <__assert_fail@plt+0x3223c>
   44d38:	cmp	r0, #0
   44d3c:	beq	44ca0 <__assert_fail@plt+0x32224>
   44d40:	b	44cb8 <__assert_fail@plt+0x3223c>
   44d44:	ldr	r7, [sp, #40]	; 0x28
   44d48:	mov	r1, r5
   44d4c:	ldr	r0, [sp, #56]	; 0x38
   44d50:	mov	r4, r1
   44d54:	bl	32c40 <__assert_fail@plt+0x201c4>
   44d58:	ldr	r0, [r7, #100]	; 0x64
   44d5c:	mov	sl, #1
   44d60:	ldr	r1, [r0, r9, lsl #2]
   44d64:	ldr	r0, [sp, #16]
   44d68:	str	r4, [r0]
   44d6c:	ldr	r0, [sp, #12]
   44d70:	cmp	r1, #0
   44d74:	addne	r1, r1, #4
   44d78:	str	r0, [r7, #40]	; 0x28
   44d7c:	ldr	r0, [sp, #8]
   44d80:	str	r0, [r7, #100]	; 0x64
   44d84:	beq	44de0 <__assert_fail@plt+0x32364>
   44d88:	ldr	r2, [r1, #4]
   44d8c:	cmp	r2, #1
   44d90:	blt	44dec <__assert_fail@plt+0x32370>
   44d94:	ldr	r0, [fp, #8]
   44d98:	ldr	r1, [r1, #8]
   44d9c:	subs	r2, r2, #1
   44da0:	mov	sl, #0
   44da4:	mov	r3, #0
   44da8:	beq	44dd4 <__assert_fail@plt+0x32358>
   44dac:	mov	r3, #0
   44db0:	mov	r7, #1
   44db4:	add	r5, r3, r2
   44db8:	lsr	r4, r5, #1
   44dbc:	ldr	r6, [r1, r4, lsl #2]
   44dc0:	cmp	r6, r0
   44dc4:	movge	r2, r4
   44dc8:	addlt	r3, r7, r5, lsr #1
   44dcc:	cmp	r3, r2
   44dd0:	bcc	44db4 <__assert_fail@plt+0x32338>
   44dd4:	ldr	r1, [r1, r3, lsl #2]
   44dd8:	cmp	r1, r0
   44ddc:	movne	sl, #1
   44de0:	mov	r0, sl
   44de4:	sub	sp, fp, #28
   44de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44dec:	mov	sl, #1
   44df0:	mov	r0, sl
   44df4:	sub	sp, fp, #28
   44df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44dfc:	mov	r0, #0
   44e00:	str	r0, [sp, #52]	; 0x34
   44e04:	str	r0, [sp, #48]	; 0x30
   44e08:	str	r0, [sp, #56]	; 0x38
   44e0c:	str	r0, [fp, #-52]	; 0xffffffcc
   44e10:	b	4470c <__assert_fail@plt+0x31c90>
   44e14:	mov	r0, #0
   44e18:	str	r0, [sp, #48]	; 0x30
   44e1c:	str	r0, [sp, #52]	; 0x34
   44e20:	ldr	r0, [fp, #-40]	; 0xffffffd8
   44e24:	b	44e44 <__assert_fail@plt+0x323c8>
   44e28:	mov	r7, r0
   44e2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   44e30:	bl	32c40 <__assert_fail@plt+0x201c4>
   44e34:	b	44e4c <__assert_fail@plt+0x323d0>
   44e38:	mov	r0, #0
   44e3c:	str	r0, [fp, #-48]	; 0xffffffd0
   44e40:	str	r0, [fp, #-44]	; 0xffffffd4
   44e44:	bl	32c40 <__assert_fail@plt+0x201c4>
   44e48:	mov	r7, #12
   44e4c:	str	r7, [fp, #-52]	; 0xffffffcc
   44e50:	ldr	r0, [sp, #56]	; 0x38
   44e54:	bl	32c40 <__assert_fail@plt+0x201c4>
   44e58:	ldr	sl, [fp, #-52]	; 0xffffffcc
   44e5c:	mov	r0, sl
   44e60:	sub	sp, fp, #28
   44e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44e68:	mov	r6, r1
   44e6c:	mvn	r1, #-2147483648	; 0x80000000
   44e70:	mov	sl, #12
   44e74:	sub	r1, r1, r5
   44e78:	cmp	r1, r2
   44e7c:	ble	44de0 <__assert_fail@plt+0x32364>
   44e80:	add	r0, r2, #1
   44e84:	add	r7, r0, r5
   44e88:	str	r0, [sp, #44]	; 0x2c
   44e8c:	cmn	r7, #-1073741823	; 0xc0000001
   44e90:	bhi	44de0 <__assert_fail@plt+0x32364>
   44e94:	mov	r4, r6
   44e98:	lsl	r1, r7, #2
   44e9c:	ldr	r0, [r4, #8]!
   44ea0:	bl	36328 <__assert_fail@plt+0x238ac>
   44ea4:	cmp	r0, #0
   44ea8:	beq	44de0 <__assert_fail@plt+0x32364>
   44eac:	ldr	r1, [sp, #44]	; 0x2c
   44eb0:	str	r7, [r6, #4]
   44eb4:	str	r0, [r6, #8]
   44eb8:	add	r0, r0, r5, lsl #2
   44ebc:	lsl	r2, r1, #2
   44ec0:	mov	r1, #0
   44ec4:	bl	12800 <memset@plt>
   44ec8:	ldr	r0, [sp, #40]	; 0x28
   44ecc:	ldr	sl, [sp, #20]
   44ed0:	mov	r1, r6
   44ed4:	b	4456c <__assert_fail@plt+0x31af0>
   44ed8:	and	r0, r3, #2
   44edc:	eor	r7, r0, #10
   44ee0:	cmp	r5, r9
   44ee4:	beq	4468c <__assert_fail@plt+0x31c10>
   44ee8:	b	445f0 <__assert_fail@plt+0x31b74>
   44eec:	mov	sl, r0
   44ef0:	ldr	r0, [sp, #56]	; 0x38
   44ef4:	bl	32c40 <__assert_fail@plt+0x201c4>
   44ef8:	mov	r0, sl
   44efc:	sub	sp, fp, #28
   44f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44f04:	mov	r0, #0
   44f08:	mov	sl, #12
   44f0c:	str	r0, [sp, #48]	; 0x30
   44f10:	str	r0, [sp, #52]	; 0x34
   44f14:	str	sl, [fp, #-52]	; 0xffffffcc
   44f18:	mov	r0, sl
   44f1c:	sub	sp, fp, #28
   44f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44f24:	mov	r0, r6
   44f28:	bl	127dc <iswalnum@plt>
   44f2c:	mov	r7, #1
   44f30:	cmp	r6, #95	; 0x5f
   44f34:	beq	44684 <__assert_fail@plt+0x31c08>
   44f38:	cmp	r0, #0
   44f3c:	beq	44668 <__assert_fail@plt+0x31bec>
   44f40:	b	44684 <__assert_fail@plt+0x31c08>
   44f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44f48:	add	fp, sp, #28
   44f4c:	sub	sp, sp, #28
   44f50:	str	r0, [sp, #12]
   44f54:	ldr	r0, [r1, #4]
   44f58:	mov	r4, r1
   44f5c:	mov	r1, #0
   44f60:	mov	sl, r3
   44f64:	mov	r8, r2
   44f68:	str	r1, [sp, #20]
   44f6c:	str	r0, [sp, #16]
   44f70:	lsl	r0, r0, #2
   44f74:	bl	35608 <__assert_fail@plt+0x22b8c>
   44f78:	cmp	r0, #0
   44f7c:	str	r0, [sp, #24]
   44f80:	beq	45080 <__assert_fail@plt+0x32604>
   44f84:	ldr	r0, [r4, #4]
   44f88:	cmp	r0, #1
   44f8c:	blt	45058 <__assert_fail@plt+0x325dc>
   44f90:	mov	r9, #0
   44f94:	str	r4, [sp, #8]
   44f98:	ldr	r0, [r4, #8]
   44f9c:	ldr	r1, [sp, #12]
   44fa0:	ldr	r2, [r0, r9, lsl #2]
   44fa4:	ldr	r1, [r1, #24]
   44fa8:	add	r0, r2, r2, lsl #1
   44fac:	add	r1, r1, r0, lsl #2
   44fb0:	ldr	r0, [r1, #4]
   44fb4:	cmp	r0, #1
   44fb8:	blt	44ff4 <__assert_fail@plt+0x32578>
   44fbc:	ldr	r7, [sp, #12]
   44fc0:	ldr	r3, [r1, #8]
   44fc4:	mov	r6, #0
   44fc8:	ldr	r7, [r7]
   44fcc:	ldr	r4, [r3, r6, lsl #2]
   44fd0:	add	r5, r7, r4, lsl #3
   44fd4:	ldrb	r5, [r5, #4]
   44fd8:	cmp	r5, sl
   44fdc:	ldreq	r5, [r7, r4, lsl #3]
   44fe0:	cmpeq	r5, r8
   44fe4:	beq	4501c <__assert_fail@plt+0x325a0>
   44fe8:	add	r6, r6, #1
   44fec:	cmp	r6, r0
   44ff0:	blt	44fcc <__assert_fail@plt+0x32550>
   44ff4:	add	r0, sp, #16
   44ff8:	bl	4158c <__assert_fail@plt+0x2eb10>
   44ffc:	cmp	r0, #0
   45000:	bne	45040 <__assert_fail@plt+0x325c4>
   45004:	ldr	r4, [sp, #8]
   45008:	add	r9, r9, #1
   4500c:	ldr	r0, [r4, #4]
   45010:	cmp	r9, r0
   45014:	blt	44f98 <__assert_fail@plt+0x3251c>
   45018:	b	45058 <__assert_fail@plt+0x325dc>
   4501c:	cmn	r4, #1
   45020:	beq	44ff4 <__assert_fail@plt+0x32578>
   45024:	ldr	r0, [sp, #12]
   45028:	add	r1, sp, #16
   4502c:	mov	r3, r8
   45030:	str	sl, [sp]
   45034:	bl	455ec <__assert_fail@plt+0x32b70>
   45038:	cmp	r0, #0
   4503c:	beq	45004 <__assert_fail@plt+0x32588>
   45040:	mov	r7, r0
   45044:	ldr	r0, [sp, #24]
   45048:	bl	32c40 <__assert_fail@plt+0x201c4>
   4504c:	mov	r0, r7
   45050:	sub	sp, fp, #28
   45054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45058:	ldr	r0, [r4, #8]
   4505c:	bl	32c40 <__assert_fail@plt+0x201c4>
   45060:	vldr	d16, [sp, #16]
   45064:	ldr	r0, [sp, #24]
   45068:	mov	r7, #0
   4506c:	str	r0, [r4, #8]
   45070:	vstr	d16, [r4]
   45074:	mov	r0, r7
   45078:	sub	sp, fp, #28
   4507c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45080:	mov	r7, #12
   45084:	mov	r0, r7
   45088:	sub	sp, fp, #28
   4508c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45094:	add	fp, sp, #28
   45098:	sub	sp, sp, #52	; 0x34
   4509c:	ldr	ip, [r0, #108]	; 0x6c
   450a0:	mov	lr, r1
   450a4:	ldr	r1, [r0, #84]	; 0x54
   450a8:	str	r0, [sp, #24]
   450ac:	mov	sl, r2
   450b0:	mov	r8, #0
   450b4:	mov	r0, #0
   450b8:	cmp	ip, #1
   450bc:	str	r1, [sp, #28]
   450c0:	blt	45104 <__assert_fail@plt+0x32688>
   450c4:	ldr	r0, [sp, #24]
   450c8:	mov	r7, #1
   450cc:	mov	r1, ip
   450d0:	ldr	r2, [r0, #116]	; 0x74
   450d4:	mov	r0, #0
   450d8:	add	r6, r1, r0
   450dc:	add	r6, r6, r6, lsr #31
   450e0:	asr	r4, r6, #1
   450e4:	add	r5, r4, r4, lsl #1
   450e8:	add	r5, r2, r5, lsl #3
   450ec:	ldr	r5, [r5, #4]
   450f0:	cmp	r5, sl
   450f4:	addlt	r0, r7, r6, asr #1
   450f8:	movge	r1, r4
   450fc:	cmp	r0, r1
   45100:	blt	450d8 <__assert_fail@plt+0x3265c>
   45104:	cmp	r0, ip
   45108:	bge	455d0 <__assert_fail@plt+0x32b54>
   4510c:	cmn	r0, #1
   45110:	beq	455d0 <__assert_fail@plt+0x32b54>
   45114:	ldr	r1, [sp, #24]
   45118:	add	r0, r0, r0, lsl #1
   4511c:	str	r0, [sp, #8]
   45120:	ldr	r1, [r1, #116]	; 0x74
   45124:	add	r0, r1, r0, lsl #3
   45128:	ldr	r0, [r0, #4]
   4512c:	cmp	r0, sl
   45130:	bne	455d0 <__assert_fail@plt+0x32b54>
   45134:	str	r3, [sp, #12]
   45138:	mov	r9, #1
   4513c:	str	lr, [sp, #16]
   45140:	b	4514c <__assert_fail@plt+0x326d0>
   45144:	ldr	r0, [sp, #24]
   45148:	ldr	r1, [r0, #116]	; 0x74
   4514c:	ldr	r0, [sp, #8]
   45150:	add	r0, r1, r0, lsl #3
   45154:	mov	r8, r0
   45158:	ldr	r0, [lr, #4]
   4515c:	cmp	r0, #1
   45160:	blt	45468 <__assert_fail@plt+0x329ec>
   45164:	subs	r6, r0, #1
   45168:	ldr	r2, [r8]
   4516c:	ldr	r0, [lr, #8]
   45170:	mov	r3, #0
   45174:	beq	4519c <__assert_fail@plt+0x32720>
   45178:	mov	r1, r6
   4517c:	add	r7, r3, r1
   45180:	lsr	r5, r7, #1
   45184:	ldr	r4, [r0, r5, lsl #2]
   45188:	cmp	r4, r2
   4518c:	movge	r1, r5
   45190:	addlt	r3, r9, r7, lsr #1
   45194:	cmp	r3, r1
   45198:	bcc	4517c <__assert_fail@plt+0x32700>
   4519c:	ldr	r1, [r0, r3, lsl #2]
   451a0:	cmp	r1, r2
   451a4:	bne	45468 <__assert_fail@plt+0x329ec>
   451a8:	ldr	r3, [r8, #12]
   451ac:	ldr	r1, [r8, #8]
   451b0:	add	r3, r3, sl
   451b4:	sub	r7, r3, r1
   451b8:	cmp	r7, sl
   451bc:	bne	452b4 <__assert_fail@plt+0x32838>
   451c0:	ldr	r1, [sp, #28]
   451c4:	add	r2, r2, r2, lsl #1
   451c8:	cmp	r6, #0
   451cc:	ldr	r1, [r1, #20]
   451d0:	add	r1, r1, r2, lsl #2
   451d4:	mov	r2, #0
   451d8:	ldr	r1, [r1, #8]
   451dc:	ldr	r4, [r1]
   451e0:	beq	45204 <__assert_fail@plt+0x32788>
   451e4:	add	r1, r2, r6
   451e8:	lsr	r3, r1, #1
   451ec:	ldr	r7, [r0, r3, lsl #2]
   451f0:	cmp	r7, r4
   451f4:	movge	r6, r3
   451f8:	addlt	r2, r9, r1, lsr #1
   451fc:	cmp	r2, r6
   45200:	bcc	451e4 <__assert_fail@plt+0x32768>
   45204:	ldr	r1, [r0, r2, lsl #2]
   45208:	mov	r0, #4
   4520c:	cmp	r1, r4
   45210:	beq	4545c <__assert_fail@plt+0x329e0>
   45214:	mov	r0, #4
   45218:	str	r9, [sp, #36]	; 0x24
   4521c:	str	r9, [sp, #32]
   45220:	bl	35608 <__assert_fail@plt+0x22b8c>
   45224:	cmp	r0, #0
   45228:	str	r0, [sp, #40]	; 0x28
   4522c:	beq	4547c <__assert_fail@plt+0x32a00>
   45230:	mov	r6, #0
   45234:	str	r4, [r0]
   45238:	ldr	r0, [sp, #28]
   4523c:	ldr	r2, [sp, #12]
   45240:	ldr	r3, [fp, #8]
   45244:	add	r4, sp, #32
   45248:	str	r6, [fp, #-32]	; 0xffffffe0
   4524c:	mov	r1, r4
   45250:	bl	44f44 <__assert_fail@plt+0x324c8>
   45254:	ldr	r5, [sp, #16]
   45258:	mov	r7, r0
   4525c:	mov	r1, r4
   45260:	mov	r0, r5
   45264:	bl	4158c <__assert_fail@plt+0x2eb10>
   45268:	mov	r4, r0
   4526c:	ldr	r0, [sp, #40]	; 0x28
   45270:	bl	32c40 <__assert_fail@plt+0x201c4>
   45274:	orr	r0, r7, r6
   45278:	mov	lr, r5
   4527c:	orrs	r0, r0, r4
   45280:	mov	r0, #2
   45284:	beq	4545c <__assert_fail@plt+0x329e0>
   45288:	cmp	r7, #0
   4528c:	mov	r0, #1
   45290:	movne	r4, r7
   45294:	cmp	r6, #0
   45298:	movne	r4, r6
   4529c:	str	r4, [fp, #-32]	; 0xffffffe0
   452a0:	str	r4, [sp, #20]
   452a4:	cmp	r0, #0
   452a8:	cmpne	r0, #4
   452ac:	beq	45468 <__assert_fail@plt+0x329ec>
   452b0:	b	455c4 <__assert_fail@plt+0x32b48>
   452b4:	ldr	r0, [sp, #24]
   452b8:	ldr	r0, [r0, #100]	; 0x64
   452bc:	ldr	r5, [r0, r7, lsl #2]
   452c0:	ldr	r0, [sp, #28]
   452c4:	ldr	r0, [r0, #12]
   452c8:	cmp	r5, #0
   452cc:	ldr	r4, [r0, r2, lsl #2]
   452d0:	beq	45398 <__assert_fail@plt+0x3291c>
   452d4:	ldr	ip, [r5, #8]
   452d8:	cmp	ip, #0
   452dc:	ble	453c4 <__assert_fail@plt+0x32948>
   452e0:	ldr	r0, [r5, #12]
   452e4:	subs	r3, ip, #1
   452e8:	mov	r2, #0
   452ec:	str	r7, [sp, #4]
   452f0:	beq	45314 <__assert_fail@plt+0x32898>
   452f4:	add	r6, r2, r3
   452f8:	lsr	r7, r6, #1
   452fc:	ldr	r1, [r0, r7, lsl #2]
   45300:	cmp	r1, r4
   45304:	movge	r3, r7
   45308:	addlt	r2, r9, r6, lsr #1
   4530c:	cmp	r2, r3
   45310:	bcc	452f4 <__assert_fail@plt+0x32878>
   45314:	ldr	r1, [r0, r2, lsl #2]
   45318:	mov	r0, #4
   4531c:	cmp	r1, r4
   45320:	beq	4545c <__assert_fail@plt+0x329e0>
   45324:	ldr	r7, [sp, #4]
   45328:	cmp	ip, #1
   4532c:	str	ip, [sp, #36]	; 0x24
   45330:	blt	453c8 <__assert_fail@plt+0x3294c>
   45334:	lsl	r0, ip, #2
   45338:	str	ip, [sp, #32]
   4533c:	bl	35608 <__assert_fail@plt+0x22b8c>
   45340:	cmp	r0, #0
   45344:	str	r0, [sp, #40]	; 0x28
   45348:	beq	454e4 <__assert_fail@plt+0x32a68>
   4534c:	ldr	r2, [r5, #8]
   45350:	ldr	r1, [r5, #12]
   45354:	mov	r5, r0
   45358:	lsl	r2, r2, #2
   4535c:	bl	124b8 <memcpy@plt>
   45360:	ldr	r1, [sp, #32]
   45364:	mov	r6, #0
   45368:	str	r6, [fp, #-32]	; 0xffffffe0
   4536c:	cmp	r1, #0
   45370:	beq	453dc <__assert_fail@plt+0x32960>
   45374:	ldr	r0, [sp, #36]	; 0x24
   45378:	cmp	r0, #0
   4537c:	bne	454f8 <__assert_fail@plt+0x32a7c>
   45380:	str	r4, [r5]
   45384:	str	r9, [sp, #36]	; 0x24
   45388:	mov	r6, #0
   4538c:	cmp	r6, #0
   45390:	beq	45404 <__assert_fail@plt+0x32988>
   45394:	b	454bc <__assert_fail@plt+0x32a40>
   45398:	mov	r0, #4
   4539c:	str	r9, [sp, #36]	; 0x24
   453a0:	str	r9, [sp, #32]
   453a4:	bl	35608 <__assert_fail@plt+0x22b8c>
   453a8:	cmp	r0, #0
   453ac:	str	r0, [sp, #40]	; 0x28
   453b0:	beq	45490 <__assert_fail@plt+0x32a14>
   453b4:	str	r4, [r0]
   453b8:	mov	r0, #0
   453bc:	str	r0, [fp, #-32]	; 0xffffffe0
   453c0:	b	45404 <__assert_fail@plt+0x32988>
   453c4:	str	ip, [sp, #36]	; 0x24
   453c8:	mov	r6, #0
   453cc:	str	r6, [sp, #36]	; 0x24
   453d0:	str	r6, [sp, #32]
   453d4:	str	r6, [sp, #40]	; 0x28
   453d8:	str	r6, [fp, #-32]	; 0xffffffe0
   453dc:	mov	r0, #4
   453e0:	str	r9, [sp, #36]	; 0x24
   453e4:	str	r9, [sp, #32]
   453e8:	bl	35608 <__assert_fail@plt+0x22b8c>
   453ec:	cmp	r0, #0
   453f0:	str	r0, [sp, #40]	; 0x28
   453f4:	beq	454b0 <__assert_fail@plt+0x32a34>
   453f8:	str	r4, [r0]
   453fc:	cmp	r6, #0
   45400:	bne	454bc <__assert_fail@plt+0x32a40>
   45404:	ldr	r1, [sp, #28]
   45408:	sub	r0, fp, #32
   4540c:	add	r2, sp, #32
   45410:	bl	45730 <__assert_fail@plt+0x32cb4>
   45414:	ldr	r4, [sp, #24]
   45418:	ldr	r1, [r4, #100]	; 0x64
   4541c:	str	r0, [r1, r7, lsl #2]
   45420:	ldr	r0, [sp, #40]	; 0x28
   45424:	bl	32c40 <__assert_fail@plt+0x201c4>
   45428:	ldr	r0, [r4, #100]	; 0x64
   4542c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   45430:	ldr	r0, [r0, r7, lsl #2]
   45434:	cmp	r1, #0
   45438:	mov	r2, r1
   4543c:	movwne	r2, #1
   45440:	clz	r0, r0
   45444:	lsr	r0, r0, #5
   45448:	ands	r0, r0, r2
   4544c:	ldr	r2, [sp, #20]
   45450:	movne	r2, r1
   45454:	str	r2, [sp, #20]
   45458:	ldr	lr, [sp, #16]
   4545c:	cmp	r0, #0
   45460:	cmpne	r0, #4
   45464:	bne	455c4 <__assert_fail@plt+0x32b48>
   45468:	ldrb	r1, [r8, #20]
   4546c:	add	r0, r8, #24
   45470:	cmp	r1, #0
   45474:	bne	45154 <__assert_fail@plt+0x326d8>
   45478:	b	455dc <__assert_fail@plt+0x32b60>
   4547c:	mov	r0, #0
   45480:	mov	r6, #12
   45484:	str	r0, [sp, #32]
   45488:	str	r0, [sp, #36]	; 0x24
   4548c:	b	45238 <__assert_fail@plt+0x327bc>
   45490:	mov	r0, #0
   45494:	mov	r1, #12
   45498:	str	r0, [sp, #32]
   4549c:	str	r0, [sp, #36]	; 0x24
   454a0:	mov	r0, #12
   454a4:	str	r1, [fp, #-32]	; 0xffffffe0
   454a8:	str	r0, [sp, #20]
   454ac:	b	454dc <__assert_fail@plt+0x32a60>
   454b0:	mov	r0, #0
   454b4:	str	r0, [sp, #32]
   454b8:	str	r0, [sp, #36]	; 0x24
   454bc:	clz	r0, r6
   454c0:	lsr	r4, r0, #5
   454c4:	ldr	r0, [sp, #40]	; 0x28
   454c8:	bl	32c40 <__assert_fail@plt+0x201c4>
   454cc:	cmp	r4, #0
   454d0:	movwne	r6, #12
   454d4:	str	r6, [sp, #20]
   454d8:	str	r6, [fp, #-32]	; 0xffffffe0
   454dc:	mov	r0, #1
   454e0:	b	45458 <__assert_fail@plt+0x329dc>
   454e4:	mov	r0, #0
   454e8:	mov	r6, #12
   454ec:	str	r0, [sp, #32]
   454f0:	str	r0, [sp, #36]	; 0x24
   454f4:	b	453d8 <__assert_fail@plt+0x3295c>
   454f8:	cmp	r1, r0
   454fc:	bne	45528 <__assert_fail@plt+0x32aac>
   45500:	lsl	r0, r1, #1
   45504:	lsl	r1, r1, #3
   45508:	str	r0, [sp, #32]
   4550c:	mov	r0, r5
   45510:	bl	36328 <__assert_fail@plt+0x238ac>
   45514:	cmp	r0, #0
   45518:	beq	455bc <__assert_fail@plt+0x32b40>
   4551c:	str	r0, [sp, #40]	; 0x28
   45520:	mov	r5, r0
   45524:	ldr	r0, [sp, #36]	; 0x24
   45528:	ldr	r1, [r5]
   4552c:	cmp	r1, r4
   45530:	ble	45568 <__assert_fail@plt+0x32aec>
   45534:	cmp	r0, #1
   45538:	blt	45598 <__assert_fail@plt+0x32b1c>
   4553c:	add	r1, r5, r0, lsl #2
   45540:	add	r0, r0, #1
   45544:	mov	r2, r1
   45548:	ldr	r3, [r2, #-4]!
   4554c:	sub	r0, r0, #1
   45550:	cmp	r0, #1
   45554:	str	r3, [r1]
   45558:	mov	r1, r2
   4555c:	bgt	45548 <__assert_fail@plt+0x32acc>
   45560:	sub	r0, r0, #1
   45564:	b	45598 <__assert_fail@plt+0x32b1c>
   45568:	add	r1, r5, r0, lsl #2
   4556c:	ldr	r2, [r1, #-4]
   45570:	cmp	r2, r4
   45574:	ble	45598 <__assert_fail@plt+0x32b1c>
   45578:	sub	r0, r0, #2
   4557c:	str	r2, [r1]
   45580:	sub	r0, r0, #1
   45584:	ldr	r2, [r1, #-8]
   45588:	sub	r1, r1, #4
   4558c:	cmp	r2, r4
   45590:	bgt	4557c <__assert_fail@plt+0x32b00>
   45594:	add	r0, r0, #2
   45598:	str	r4, [r5, r0, lsl #2]
   4559c:	ldr	r7, [sp, #4]
   455a0:	mov	r6, #0
   455a4:	ldr	r0, [sp, #36]	; 0x24
   455a8:	add	r0, r0, #1
   455ac:	str	r0, [sp, #36]	; 0x24
   455b0:	cmp	r6, #0
   455b4:	beq	45404 <__assert_fail@plt+0x32988>
   455b8:	b	454bc <__assert_fail@plt+0x32a40>
   455bc:	mov	r6, #0
   455c0:	b	454bc <__assert_fail@plt+0x32a40>
   455c4:	cmp	r0, #2
   455c8:	beq	45144 <__assert_fail@plt+0x326c8>
   455cc:	ldr	r8, [sp, #20]
   455d0:	mov	r0, r8
   455d4:	sub	sp, fp, #28
   455d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   455dc:	mov	r8, #0
   455e0:	mov	r0, r8
   455e4:	sub	sp, fp, #28
   455e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   455ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   455f0:	add	fp, sp, #28
   455f4:	sub	sp, sp, #4
   455f8:	ldr	r4, [fp, #8]
   455fc:	mov	r9, r3
   45600:	mov	r7, r2
   45604:	mov	r8, r1
   45608:	mov	sl, r0
   4560c:	mov	r5, #1
   45610:	ldr	r0, [r8, #4]
   45614:	cmp	r0, #1
   45618:	bge	45638 <__assert_fail@plt+0x32bbc>
   4561c:	b	4567c <__assert_fail@plt+0x32c00>
   45620:	add	r0, r0, r7, lsl #2
   45624:	ldr	r0, [r0, #8]
   45628:	ldr	r7, [r0]
   4562c:	ldr	r0, [r8, #4]
   45630:	cmp	r0, #1
   45634:	blt	4567c <__assert_fail@plt+0x32c00>
   45638:	subs	r2, r0, #1
   4563c:	ldr	r0, [r8, #8]
   45640:	mov	ip, r4
   45644:	mov	r1, #0
   45648:	beq	4566c <__assert_fail@plt+0x32bf0>
   4564c:	add	r3, r1, r2
   45650:	lsr	r6, r3, #1
   45654:	ldr	r4, [r0, r6, lsl #2]
   45658:	cmp	r4, r7
   4565c:	movge	r2, r6
   45660:	addlt	r1, r5, r3, lsr #1
   45664:	cmp	r1, r2
   45668:	bcc	4564c <__assert_fail@plt+0x32bd0>
   4566c:	ldr	r0, [r0, r1, lsl #2]
   45670:	mov	r4, ip
   45674:	cmp	r0, r7
   45678:	beq	45718 <__assert_fail@plt+0x32c9c>
   4567c:	ldr	r0, [sl]
   45680:	add	r1, r0, r7, lsl #3
   45684:	ldrb	r1, [r1, #4]
   45688:	cmp	r1, r4
   4568c:	ldreq	r0, [r0, r7, lsl #3]
   45690:	cmpeq	r0, r9
   45694:	beq	456fc <__assert_fail@plt+0x32c80>
   45698:	mov	r0, r8
   4569c:	mov	r1, r7
   456a0:	bl	41734 <__assert_fail@plt+0x2ecb8>
   456a4:	cmp	r0, #0
   456a8:	beq	45724 <__assert_fail@plt+0x32ca8>
   456ac:	ldr	r0, [sl, #20]
   456b0:	add	r7, r7, r7, lsl #1
   456b4:	add	r1, r0, r7, lsl #2
   456b8:	ldr	r2, [r1, #4]
   456bc:	cmp	r2, #2
   456c0:	beq	456d0 <__assert_fail@plt+0x32c54>
   456c4:	cmp	r2, #0
   456c8:	bne	45620 <__assert_fail@plt+0x32ba4>
   456cc:	b	45718 <__assert_fail@plt+0x32c9c>
   456d0:	ldr	r0, [r1, #8]
   456d4:	mov	r1, r8
   456d8:	mov	r3, r9
   456dc:	ldr	r2, [r0, #4]
   456e0:	mov	r0, sl
   456e4:	str	r4, [sp]
   456e8:	bl	455ec <__assert_fail@plt+0x32b70>
   456ec:	cmp	r0, #0
   456f0:	bne	4571c <__assert_fail@plt+0x32ca0>
   456f4:	ldr	r0, [sl, #20]
   456f8:	b	45620 <__assert_fail@plt+0x32ba4>
   456fc:	cmp	r4, #9
   45700:	bne	45718 <__assert_fail@plt+0x32c9c>
   45704:	mov	r0, r8
   45708:	mov	r1, r7
   4570c:	bl	41734 <__assert_fail@plt+0x2ecb8>
   45710:	cmp	r0, #0
   45714:	beq	45724 <__assert_fail@plt+0x32ca8>
   45718:	mov	r0, #0
   4571c:	sub	sp, fp, #28
   45720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45724:	mov	r0, #12
   45728:	sub	sp, fp, #28
   4572c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45734:	add	fp, sp, #28
   45738:	sub	sp, sp, #4
   4573c:	ldr	sl, [r2, #4]
   45740:	cmp	sl, #0
   45744:	beq	45980 <__assert_fail@plt+0x32f04>
   45748:	mov	r7, r2
   4574c:	mov	r9, r1
   45750:	cmp	sl, #1
   45754:	mov	r6, sl
   45758:	blt	457cc <__assert_fail@plt+0x32d50>
   4575c:	ldr	r5, [r7, #8]
   45760:	mov	r2, #0
   45764:	cmp	sl, #4
   45768:	mov	r6, sl
   4576c:	bcc	457b4 <__assert_fail@plt+0x32d38>
   45770:	mov	r1, #0
   45774:	bic	r2, sl, #3
   45778:	vdup.32	q8, r1
   4577c:	mov	r3, r2
   45780:	mov	r1, r5
   45784:	vmov.32	d16[0], sl
   45788:	vld1.32	{d18-d19}, [r1]!
   4578c:	subs	r3, r3, #4
   45790:	vadd.i32	q8, q9, q8
   45794:	bne	45788 <__assert_fail@plt+0x32d0c>
   45798:	vext.8	q9, q8, q8, #8
   4579c:	cmp	sl, r2
   457a0:	vadd.i32	q8, q8, q9
   457a4:	vdup.32	q9, d16[1]
   457a8:	vadd.i32	q8, q8, q9
   457ac:	vmov.32	r6, d16[0]
   457b0:	beq	457cc <__assert_fail@plt+0x32d50>
   457b4:	add	r1, r5, r2, lsl #2
   457b8:	sub	r2, sl, r2
   457bc:	ldr	r3, [r1], #4
   457c0:	subs	r2, r2, #1
   457c4:	add	r6, r3, r6
   457c8:	bne	457bc <__assert_fail@plt+0x32d40>
   457cc:	ldr	r1, [r9, #68]	; 0x44
   457d0:	ldr	r2, [r9, #32]
   457d4:	str	r0, [sp]
   457d8:	and	r1, r1, r6
   457dc:	add	r3, r1, r1, lsl #1
   457e0:	ldr	r1, [r2, r3, lsl #2]
   457e4:	cmp	r1, #1
   457e8:	blt	4585c <__assert_fail@plt+0x32de0>
   457ec:	cmp	r7, #0
   457f0:	beq	4585c <__assert_fail@plt+0x32de0>
   457f4:	add	r2, r2, r3, lsl #2
   457f8:	sub	ip, sl, #1
   457fc:	mov	r5, #0
   45800:	ldr	lr, [r2, #8]
   45804:	b	45838 <__assert_fail@plt+0x32dbc>
   45808:	mov	r3, ip
   4580c:	add	r2, r3, #1
   45810:	cmp	r2, #1
   45814:	blt	45974 <__assert_fail@plt+0x32ef8>
   45818:	ldr	r2, [r7, #8]
   4581c:	ldr	r0, [r4, #12]
   45820:	ldr	r2, [r2, r3, lsl #2]
   45824:	ldr	r0, [r0, r3, lsl #2]
   45828:	sub	r3, r3, #1
   4582c:	cmp	r0, r2
   45830:	beq	4580c <__assert_fail@plt+0x32d90>
   45834:	b	45850 <__assert_fail@plt+0x32dd4>
   45838:	ldr	r4, [lr, r5, lsl #2]
   4583c:	ldr	r3, [r4]
   45840:	cmp	r6, r3
   45844:	ldreq	r3, [r4, #8]
   45848:	cmpeq	r3, sl
   4584c:	beq	45808 <__assert_fail@plt+0x32d8c>
   45850:	add	r5, r5, #1
   45854:	cmp	r5, r1
   45858:	blt	45838 <__assert_fail@plt+0x32dbc>
   4585c:	mov	r0, #56	; 0x38
   45860:	mov	r1, #1
   45864:	bl	325e0 <__assert_fail@plt+0x1fb64>
   45868:	cmp	r0, #0
   4586c:	beq	459b4 <__assert_fail@plt+0x32f38>
   45870:	mov	r4, r0
   45874:	ldr	r0, [r7, #4]
   45878:	add	sl, r4, #4
   4587c:	cmp	r0, #1
   45880:	str	r0, [r4, #8]
   45884:	blt	45948 <__assert_fail@plt+0x32ecc>
   45888:	str	r0, [r4, #4]
   4588c:	lsl	r0, r0, #2
   45890:	bl	35608 <__assert_fail@plt+0x22b8c>
   45894:	cmp	r0, #0
   45898:	str	r0, [r4, #12]
   4589c:	beq	459a0 <__assert_fail@plt+0x32f24>
   458a0:	ldmib	r7, {r5, r7}
   458a4:	lsl	r2, r5, #2
   458a8:	mov	r1, r7
   458ac:	bl	124b8 <memcpy@plt>
   458b0:	cmp	r5, #1
   458b4:	str	sl, [r4, #40]	; 0x28
   458b8:	blt	4595c <__assert_fail@plt+0x32ee0>
   458bc:	ldr	sl, [r9]
   458c0:	movw	ip, #65280	; 0xff00
   458c4:	mov	lr, #32
   458c8:	movt	ip, #3
   458cc:	add	r2, ip, #255	; 0xff
   458d0:	ldr	r0, [r7]
   458d4:	add	r1, sl, r0, lsl #3
   458d8:	ldr	r0, [r1, #4]!
   458dc:	and	r3, r0, r2
   458e0:	cmp	r3, #1
   458e4:	beq	45938 <__assert_fail@plt+0x32ebc>
   458e8:	ldrb	r8, [r4, #52]	; 0x34
   458ec:	and	r3, lr, r0, lsr #15
   458f0:	uxtb	r0, r0
   458f4:	cmp	r0, #12
   458f8:	orr	r3, r8, r3
   458fc:	strb	r3, [r4, #52]	; 0x34
   45900:	beq	45930 <__assert_fail@plt+0x32eb4>
   45904:	cmp	r0, #4
   45908:	beq	4591c <__assert_fail@plt+0x32ea0>
   4590c:	cmp	r0, #2
   45910:	bne	45924 <__assert_fail@plt+0x32ea8>
   45914:	orr	r0, r3, #16
   45918:	b	45934 <__assert_fail@plt+0x32eb8>
   4591c:	orr	r0, r3, #64	; 0x40
   45920:	b	45934 <__assert_fail@plt+0x32eb8>
   45924:	ldr	r0, [r1]
   45928:	tst	r0, ip
   4592c:	beq	45938 <__assert_fail@plt+0x32ebc>
   45930:	orr	r0, r3, #128	; 0x80
   45934:	strb	r0, [r4, #52]	; 0x34
   45938:	add	r7, r7, #4
   4593c:	subs	r5, r5, #1
   45940:	bne	458d0 <__assert_fail@plt+0x32e54>
   45944:	b	4595c <__assert_fail@plt+0x32ee0>
   45948:	mov	r0, #0
   4594c:	str	r0, [sl]
   45950:	str	r0, [sl, #4]
   45954:	str	r0, [sl, #8]
   45958:	str	sl, [r4, #40]	; 0x28
   4595c:	mov	r0, r9
   45960:	mov	r1, r4
   45964:	mov	r2, r6
   45968:	bl	42240 <__assert_fail@plt+0x2f7c4>
   4596c:	cmp	r0, #0
   45970:	bne	45994 <__assert_fail@plt+0x32f18>
   45974:	mov	r0, r4
   45978:	sub	sp, fp, #28
   4597c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45980:	mov	r4, #0
   45984:	str	r4, [r0]
   45988:	mov	r0, r4
   4598c:	sub	sp, fp, #28
   45990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45994:	mov	r0, r4
   45998:	bl	3b7d0 <__assert_fail@plt+0x28d54>
   4599c:	b	459b4 <__assert_fail@plt+0x32f38>
   459a0:	mov	r0, #0
   459a4:	str	r0, [r4, #4]
   459a8:	str	r0, [r4, #8]
   459ac:	mov	r0, r4
   459b0:	bl	32c40 <__assert_fail@plt+0x201c4>
   459b4:	ldr	r1, [sp]
   459b8:	mov	r0, #12
   459bc:	mov	r4, #0
   459c0:	str	r0, [r1]
   459c4:	mov	r0, r4
   459c8:	sub	sp, fp, #28
   459cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   459d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   459d4:	add	fp, sp, #24
   459d8:	ldr	lr, [r0]
   459dc:	add	r7, lr, r1, lsl #3
   459e0:	ldrb	r9, [r7, #4]
   459e4:	cmp	r9, #7
   459e8:	beq	45bcc <__assert_fail@plt+0x33150>
   459ec:	ldr	ip, [r2, #80]	; 0x50
   459f0:	mov	r6, #1
   459f4:	cmp	ip, #1
   459f8:	beq	45a34 <__assert_fail@plt+0x32fb8>
   459fc:	ldr	r5, [r2, #28]
   45a00:	add	r7, r3, #1
   45a04:	cmp	r7, r5
   45a08:	bge	45a34 <__assert_fail@plt+0x32fb8>
   45a0c:	ldr	r6, [r2, #8]
   45a10:	add	r7, r6, r3, lsl #2
   45a14:	mov	r6, #1
   45a18:	ldr	r4, [r7, r6, lsl #2]
   45a1c:	cmn	r4, #1
   45a20:	bne	45a34 <__assert_fail@plt+0x32fb8>
   45a24:	add	r6, r6, #1
   45a28:	add	r4, r3, r6
   45a2c:	cmp	r4, r5
   45a30:	blt	45a18 <__assert_fail@plt+0x32f9c>
   45a34:	mov	r8, #0
   45a38:	cmp	r9, #5
   45a3c:	bne	45a84 <__assert_fail@plt+0x33008>
   45a40:	cmp	r6, #2
   45a44:	blt	45bb0 <__assert_fail@plt+0x33134>
   45a48:	ldr	r0, [r0, #128]	; 0x80
   45a4c:	tst	r0, #64	; 0x40
   45a50:	bne	45a64 <__assert_fail@plt+0x32fe8>
   45a54:	ldr	r1, [r2, #4]
   45a58:	ldrb	r1, [r1, r3]
   45a5c:	cmp	r1, #10
   45a60:	beq	45bb0 <__assert_fail@plt+0x33134>
   45a64:	tst	r0, #128	; 0x80
   45a68:	beq	45bac <__assert_fail@plt+0x33130>
   45a6c:	ldr	r0, [r2, #4]
   45a70:	ldrb	r0, [r0, r3]
   45a74:	cmp	r0, #0
   45a78:	movne	r8, r6
   45a7c:	mov	r0, r8
   45a80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   45a84:	cmp	r9, #6
   45a88:	bne	45bb0 <__assert_fail@plt+0x33134>
   45a8c:	cmp	r6, #2
   45a90:	blt	45bb0 <__assert_fail@plt+0x33134>
   45a94:	ldr	r7, [lr, r1, lsl #3]
   45a98:	ldr	r0, [r7, #32]
   45a9c:	cmp	r0, #0
   45aa0:	bne	45abc <__assert_fail@plt+0x33040>
   45aa4:	ldr	r1, [r7, #36]	; 0x24
   45aa8:	cmp	r1, #0
   45aac:	bne	45abc <__assert_fail@plt+0x33040>
   45ab0:	ldr	r1, [r7, #20]
   45ab4:	cmp	r1, #0
   45ab8:	beq	45bb8 <__assert_fail@plt+0x3313c>
   45abc:	cmp	ip, #1
   45ac0:	bne	45adc <__assert_fail@plt+0x33060>
   45ac4:	ldr	r1, [r2, #4]
   45ac8:	ldrb	r5, [r1, r3]
   45acc:	ldr	r1, [r7, #20]
   45ad0:	cmp	r1, #1
   45ad4:	bge	45af0 <__assert_fail@plt+0x33074>
   45ad8:	b	45b10 <__assert_fail@plt+0x33094>
   45adc:	ldr	r1, [r2, #8]
   45ae0:	ldr	r5, [r1, r3, lsl #2]
   45ae4:	ldr	r1, [r7, #20]
   45ae8:	cmp	r1, #1
   45aec:	blt	45b10 <__assert_fail@plt+0x33094>
   45af0:	ldr	r2, [r7]
   45af4:	mov	r3, #0
   45af8:	ldr	r4, [r2, r3, lsl #2]
   45afc:	cmp	r5, r4
   45b00:	beq	45b8c <__assert_fail@plt+0x33110>
   45b04:	add	r3, r3, #1
   45b08:	cmp	r3, r1
   45b0c:	blt	45af8 <__assert_fail@plt+0x3307c>
   45b10:	ldr	r1, [r7, #36]	; 0x24
   45b14:	cmp	r1, #1
   45b18:	blt	45b4c <__assert_fail@plt+0x330d0>
   45b1c:	mov	r4, #0
   45b20:	ldr	r0, [r7, #12]
   45b24:	ldr	r1, [r0, r4, lsl #2]
   45b28:	mov	r0, r5
   45b2c:	bl	123c8 <iswctype@plt>
   45b30:	cmp	r0, #0
   45b34:	bne	45b8c <__assert_fail@plt+0x33110>
   45b38:	ldr	r0, [r7, #36]	; 0x24
   45b3c:	add	r4, r4, #1
   45b40:	cmp	r4, r0
   45b44:	blt	45b20 <__assert_fail@plt+0x330a4>
   45b48:	ldr	r0, [r7, #32]
   45b4c:	cmp	r0, #1
   45b50:	blt	45b84 <__assert_fail@plt+0x33108>
   45b54:	ldr	r1, [r7, #4]
   45b58:	mov	r2, #0
   45b5c:	ldr	r3, [r1, r2, lsl #2]
   45b60:	cmp	r3, r5
   45b64:	bhi	45b78 <__assert_fail@plt+0x330fc>
   45b68:	ldr	r3, [r7, #8]
   45b6c:	ldr	r3, [r3, r2, lsl #2]
   45b70:	cmp	r5, r3
   45b74:	bls	45b8c <__assert_fail@plt+0x33110>
   45b78:	add	r2, r2, #1
   45b7c:	cmp	r2, r0
   45b80:	blt	45b5c <__assert_fail@plt+0x330e0>
   45b84:	mov	r0, #0
   45b88:	b	45b90 <__assert_fail@plt+0x33114>
   45b8c:	mov	r0, r6
   45b90:	ldrb	r1, [r7, #16]
   45b94:	tst	r1, #1
   45b98:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   45b9c:	cmp	r0, #0
   45ba0:	bgt	45bb0 <__assert_fail@plt+0x33134>
   45ba4:	cmp	r6, #1
   45ba8:	movle	r6, #1
   45bac:	mov	r8, r6
   45bb0:	mov	r0, r8
   45bb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   45bb8:	mov	r5, #0
   45bbc:	ldr	r1, [r7, #20]
   45bc0:	cmp	r1, #1
   45bc4:	bge	45af0 <__assert_fail@plt+0x33074>
   45bc8:	b	45b10 <__assert_fail@plt+0x33094>
   45bcc:	ldr	r0, [r2, #4]
   45bd0:	mov	r8, #0
   45bd4:	ldrb	r6, [r0, r3]
   45bd8:	cmp	r6, #194	; 0xc2
   45bdc:	bcc	45bb0 <__assert_fail@plt+0x33134>
   45be0:	ldr	r1, [r2, #48]	; 0x30
   45be4:	add	r2, r3, #2
   45be8:	cmp	r2, r1
   45bec:	bgt	45bb0 <__assert_fail@plt+0x33134>
   45bf0:	add	r0, r0, r3
   45bf4:	cmp	r6, #223	; 0xdf
   45bf8:	ldrb	r7, [r0, #1]
   45bfc:	bhi	45c20 <__assert_fail@plt+0x331a4>
   45c00:	mov	r8, #2
   45c04:	cmp	r7, #191	; 0xbf
   45c08:	sxtb	r0, r7
   45c0c:	movwhi	r8, #0
   45c10:	cmn	r0, #1
   45c14:	movwgt	r8, #0
   45c18:	mov	r0, r8
   45c1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   45c20:	cmp	r6, #239	; 0xef
   45c24:	bhi	45c40 <__assert_fail@plt+0x331c4>
   45c28:	mov	r2, #3
   45c2c:	cmp	r6, #224	; 0xe0
   45c30:	bne	45c9c <__assert_fail@plt+0x33220>
   45c34:	cmp	r7, #160	; 0xa0
   45c38:	bcc	45bb0 <__assert_fail@plt+0x33134>
   45c3c:	b	45c9c <__assert_fail@plt+0x33220>
   45c40:	cmp	r6, #247	; 0xf7
   45c44:	bhi	45c60 <__assert_fail@plt+0x331e4>
   45c48:	mov	r2, #4
   45c4c:	cmp	r6, #240	; 0xf0
   45c50:	bne	45c9c <__assert_fail@plt+0x33220>
   45c54:	cmp	r7, #144	; 0x90
   45c58:	bcc	45bb0 <__assert_fail@plt+0x33134>
   45c5c:	b	45c9c <__assert_fail@plt+0x33220>
   45c60:	cmp	r6, #251	; 0xfb
   45c64:	bhi	45c80 <__assert_fail@plt+0x33204>
   45c68:	mov	r2, #5
   45c6c:	cmp	r6, #248	; 0xf8
   45c70:	bne	45c9c <__assert_fail@plt+0x33220>
   45c74:	cmp	r7, #136	; 0x88
   45c78:	bcc	45bb0 <__assert_fail@plt+0x33134>
   45c7c:	b	45c9c <__assert_fail@plt+0x33220>
   45c80:	cmp	r6, #253	; 0xfd
   45c84:	bhi	45bb0 <__assert_fail@plt+0x33134>
   45c88:	mov	r2, #6
   45c8c:	cmp	r6, #252	; 0xfc
   45c90:	bne	45c9c <__assert_fail@plt+0x33220>
   45c94:	cmp	r7, #132	; 0x84
   45c98:	bcc	45bb0 <__assert_fail@plt+0x33134>
   45c9c:	add	r3, r2, r3
   45ca0:	cmp	r3, r1
   45ca4:	bgt	45bb0 <__assert_fail@plt+0x33134>
   45ca8:	mov	r1, #1
   45cac:	ldrb	r3, [r0, r1]
   45cb0:	sxtb	r7, r3
   45cb4:	cmn	r7, #1
   45cb8:	bgt	45bb0 <__assert_fail@plt+0x33134>
   45cbc:	cmp	r3, #191	; 0xbf
   45cc0:	bhi	45bb0 <__assert_fail@plt+0x33134>
   45cc4:	add	r1, r1, #1
   45cc8:	cmp	r1, r2
   45ccc:	movcs	r0, r2
   45cd0:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   45cd4:	ldrb	r3, [r0, r1]
   45cd8:	sxtb	r7, r3
   45cdc:	cmn	r7, #1
   45ce0:	ble	45cbc <__assert_fail@plt+0x33240>
   45ce4:	b	45bb0 <__assert_fail@plt+0x33134>
   45ce8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   45cec:	add	fp, sp, #24
   45cf0:	ldr	r4, [r1, #4]
   45cf4:	mov	r6, r0
   45cf8:	mvn	r0, #0
   45cfc:	mov	r8, #0
   45d00:	uxtab	r3, r0, r4
   45d04:	cmp	r3, #6
   45d08:	bhi	45eb4 <__assert_fail@plt+0x33438>
   45d0c:	ldr	r0, [r6, #4]
   45d10:	mov	r9, r1
   45d14:	ldrb	r1, [r0, r2]
   45d18:	add	r7, pc, #4
   45d1c:	sxtb	r0, r1
   45d20:	ldr	pc, [r7, r3, lsl #2]
   45d24:	andeq	r5, r4, r0, asr #26
   45d28:			; <UNDEFINED> instruction: 0x00045eb4
   45d2c:	andeq	r5, r4, r4, asr sp
   45d30:			; <UNDEFINED> instruction: 0x00045eb4
   45d34:	andeq	r5, r4, ip, ror sp
   45d38:			; <UNDEFINED> instruction: 0x00045eb4
   45d3c:	andeq	r5, r4, r4, ror sp
   45d40:	ldrb	r3, [r9]
   45d44:	uxtb	r7, r0
   45d48:	cmp	r3, r7
   45d4c:	beq	45d9c <__assert_fail@plt+0x33320>
   45d50:	b	45eb4 <__assert_fail@plt+0x33438>
   45d54:	ldr	r3, [r9]
   45d58:	ubfx	r7, r1, #5, #3
   45d5c:	mov	r5, #1
   45d60:	ldr	r3, [r3, r7, lsl #2]
   45d64:	and	r7, r1, #31
   45d68:	tst	r3, r5, lsl r7
   45d6c:	bne	45d9c <__assert_fail@plt+0x33320>
   45d70:	b	45eb4 <__assert_fail@plt+0x33438>
   45d74:	cmp	r0, #0
   45d78:	blt	45eb4 <__assert_fail@plt+0x33438>
   45d7c:	cmp	r1, #0
   45d80:	beq	45e48 <__assert_fail@plt+0x333cc>
   45d84:	cmp	r1, #10
   45d88:	bne	45d9c <__assert_fail@plt+0x33320>
   45d8c:	ldr	r3, [r6, #84]	; 0x54
   45d90:	ldrb	r3, [r3, #128]	; 0x80
   45d94:	tst	r3, #64	; 0x40
   45d98:	beq	45eb4 <__assert_fail@plt+0x33438>
   45d9c:	movw	r3, #65280	; 0xff00
   45da0:	movt	r3, #3
   45da4:	tst	r4, r3
   45da8:	beq	45e0c <__assert_fail@plt+0x33390>
   45dac:	cmn	r2, #1
   45db0:	ble	45dec <__assert_fail@plt+0x33370>
   45db4:	ldr	r3, [r6, #48]	; 0x30
   45db8:	cmp	r3, r2
   45dbc:	beq	45ed4 <__assert_fail@plt+0x33458>
   45dc0:	ldr	r3, [r6, #80]	; 0x50
   45dc4:	cmp	r3, #2
   45dc8:	blt	45e18 <__assert_fail@plt+0x3339c>
   45dcc:	ldr	r0, [r6, #8]
   45dd0:	ldr	r7, [r0, r2, lsl #2]
   45dd4:	cmn	r7, #1
   45dd8:	bne	45e5c <__assert_fail@plt+0x333e0>
   45ddc:	sub	r1, r2, #1
   45de0:	cmp	r2, #0
   45de4:	mov	r2, r1
   45de8:	bgt	45dd0 <__assert_fail@plt+0x33354>
   45dec:	ldr	r1, [r6, #60]	; 0x3c
   45df0:	and	r0, r1, #1
   45df4:	tst	r4, #1024	; 0x400
   45df8:	eor	r2, r0, #1
   45dfc:	beq	45e90 <__assert_fail@plt+0x33414>
   45e00:	cmp	r0, #0
   45e04:	beq	45eb4 <__assert_fail@plt+0x33438>
   45e08:	b	45e90 <__assert_fail@plt+0x33414>
   45e0c:	mov	r8, #1
   45e10:	mov	r0, r8
   45e14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   45e18:	ldr	r2, [r6, #68]	; 0x44
   45e1c:	ubfx	r3, r1, #5, #3
   45e20:	and	r7, r1, #31
   45e24:	mov	r1, #1
   45e28:	ldr	r3, [r2, r3, lsl #2]
   45e2c:	mov	r2, #0
   45e30:	tst	r3, r1, lsl r7
   45e34:	bne	45e90 <__assert_fail@plt+0x33414>
   45e38:	mov	r1, #0
   45e3c:	cmp	r0, #10
   45e40:	beq	45e74 <__assert_fail@plt+0x333f8>
   45e44:	b	45e80 <__assert_fail@plt+0x33404>
   45e48:	ldr	r3, [r6, #84]	; 0x54
   45e4c:	ldrb	r3, [r3, #128]	; 0x80
   45e50:	tst	r3, #128	; 0x80
   45e54:	bne	45eb4 <__assert_fail@plt+0x33438>
   45e58:	b	45d9c <__assert_fail@plt+0x33320>
   45e5c:	ldrb	r0, [r6, #78]	; 0x4e
   45e60:	cmp	r0, #0
   45e64:	bne	45ef4 <__assert_fail@plt+0x33478>
   45e68:	mov	r1, #0
   45e6c:	cmp	r7, #10
   45e70:	bne	45e80 <__assert_fail@plt+0x33404>
   45e74:	ldrb	r1, [r6, #77]	; 0x4d
   45e78:	cmp	r1, #0
   45e7c:	movwne	r1, #2
   45e80:	and	r0, r1, #1
   45e84:	tst	r4, #1024	; 0x400
   45e88:	eor	r2, r0, #1
   45e8c:	bne	45e00 <__assert_fail@plt+0x33384>
   45e90:	ldr	r0, [r9, #4]
   45e94:	cmp	r2, #0
   45e98:	bne	45ea4 <__assert_fail@plt+0x33428>
   45e9c:	ands	r2, r0, #2048	; 0x800
   45ea0:	bne	45eb4 <__assert_fail@plt+0x33438>
   45ea4:	tst	r1, #2
   45ea8:	bne	45ebc <__assert_fail@plt+0x33440>
   45eac:	ands	r2, r0, #8192	; 0x2000
   45eb0:	beq	45ebc <__assert_fail@plt+0x33440>
   45eb4:	mov	r0, r8
   45eb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   45ebc:	and	r0, r0, #32768	; 0x8000
   45ec0:	mov	r2, #1
   45ec4:	and	r1, r1, #8
   45ec8:	eor	r0, r2, r0, lsr #15
   45ecc:	orr	r0, r0, r1, lsr #3
   45ed0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   45ed4:	ldr	r0, [r6, #88]	; 0x58
   45ed8:	and	r0, r0, #2
   45edc:	eor	r1, r0, #10
   45ee0:	and	r0, r1, #1
   45ee4:	tst	r4, #1024	; 0x400
   45ee8:	eor	r2, r0, #1
   45eec:	bne	45e00 <__assert_fail@plt+0x33384>
   45ef0:	b	45e90 <__assert_fail@plt+0x33414>
   45ef4:	mov	r0, r7
   45ef8:	bl	127dc <iswalnum@plt>
   45efc:	mov	r1, #1
   45f00:	mov	r2, #0
   45f04:	cmp	r7, #95	; 0x5f
   45f08:	beq	45e90 <__assert_fail@plt+0x33414>
   45f0c:	cmp	r0, #0
   45f10:	beq	45e68 <__assert_fail@plt+0x333ec>
   45f14:	b	45e90 <__assert_fail@plt+0x33414>
   45f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45f1c:	add	fp, sp, #28
   45f20:	sub	sp, sp, #4
   45f24:	vpush	{d8-d9}
   45f28:	sub	sp, sp, #216	; 0xd8
   45f2c:	sub	sp, sp, #14336	; 0x3800
   45f30:	sub	lr, fp, #1024	; 0x400
   45f34:	mov	r5, #0
   45f38:	mov	sl, r0
   45f3c:	vmov.i32	q4, #0	; 0x00000000
   45f40:	str	r1, [sp, #88]	; 0x58
   45f44:	sub	r2, lr, #56	; 0x38
   45f48:	str	r5, [r1, #44]	; 0x2c
   45f4c:	str	r5, [r1, #48]	; 0x30
   45f50:	mov	r0, r2
   45f54:	vst1.64	{d8-d9}, [r0]!
   45f58:	vst1.64	{d8-d9}, [r0]
   45f5c:	ldr	r0, [r1, #8]
   45f60:	cmp	r0, #1
   45f64:	blt	47740 <__assert_fail@plt+0x34cc4>
   45f68:	add	r0, sp, #160	; 0xa0
   45f6c:	mov	r5, #0
   45f70:	str	sl, [sp, #16]
   45f74:	add	r0, r0, #28
   45f78:	str	r0, [sp, #12]
   45f7c:	add	r0, sl, #112	; 0x70
   45f80:	str	r0, [sp, #4]
   45f84:	add	r0, sl, #96	; 0x60
   45f88:	str	r0, [sp]
   45f8c:	add	r0, r2, #16
   45f90:	str	r0, [sp, #8]
   45f94:	mov	r0, #0
   45f98:	str	r0, [sp, #112]	; 0x70
   45f9c:	ldr	r0, [sp, #88]	; 0x58
   45fa0:	ldr	r1, [sp, #112]	; 0x70
   45fa4:	ldr	r3, [sl]
   45fa8:	ldr	r0, [r0, #12]
   45fac:	ldr	r2, [r0, r1, lsl #2]
   45fb0:	add	r0, r3, r2, lsl #3
   45fb4:	ldr	r1, [r0, #4]
   45fb8:	uxtb	ip, r1
   45fbc:	cmp	ip, #1
   45fc0:	bne	460c8 <__assert_fail@plt+0x3364c>
   45fc4:	mov	r8, r2
   45fc8:	ldrb	r2, [r3, r2, lsl #3]
   45fcc:	sub	lr, fp, #1024	; 0x400
   45fd0:	mov	r0, r3
   45fd4:	mov	r4, r5
   45fd8:	mov	r5, #1
   45fdc:	sub	r7, lr, #56	; 0x38
   45fe0:	mov	r6, r7
   45fe4:	ubfx	r3, r2, #5, #3
   45fe8:	ldr	sl, [sp, #16]
   45fec:	and	r2, r2, #31
   45ff0:	ldr	r7, [r7, r3, lsl #2]
   45ff4:	orr	r2, r7, r5, lsl r2
   45ff8:	mov	r5, r4
   45ffc:	str	r2, [r6, r3, lsl #2]
   46000:	movw	r2, #65280	; 0xff00
   46004:	movt	r2, #3
   46008:	ands	r2, r1, r2
   4600c:	mov	r2, r0
   46010:	beq	46420 <__assert_fail@plt+0x339a4>
   46014:	tst	r1, #8192	; 0x2000
   46018:	beq	46048 <__assert_fail@plt+0x335cc>
   4601c:	mov	r0, r2
   46020:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   46024:	sub	lr, fp, #1024	; 0x400
   46028:	sub	r3, lr, #56	; 0x38
   4602c:	vst1.64	{d8-d9}, [r3]!
   46030:	vst1.64	{d8-d9}, [r3]
   46034:	tst	r2, #1024	; 0x400
   46038:	beq	46cf4 <__assert_fail@plt+0x34278>
   4603c:	mov	r2, #1024	; 0x400
   46040:	str	r2, [fp, #-1080]	; 0xfffffbc8
   46044:	mov	r2, r0
   46048:	tst	r1, #32768	; 0x8000
   4604c:	bne	461c4 <__assert_fail@plt+0x33748>
   46050:	tst	r1, #1024	; 0x400
   46054:	bne	461ac <__assert_fail@plt+0x33730>
   46058:	tst	r1, #2048	; 0x800
   4605c:	beq	46420 <__assert_fail@plt+0x339a4>
   46060:	tst	r1, #4194304	; 0x400000
   46064:	beq	46070 <__assert_fail@plt+0x335f4>
   46068:	cmp	ip, #1
   4606c:	beq	461c4 <__assert_fail@plt+0x33748>
   46070:	ldr	r1, [sl, #92]	; 0x5c
   46074:	mov	r0, r2
   46078:	cmp	r1, #1
   4607c:	ble	463a8 <__assert_fail@plt+0x3392c>
   46080:	ldr	r1, [sl, #60]	; 0x3c
   46084:	ldr	r2, [sp]
   46088:	sub	lr, fp, #1024	; 0x400
   4608c:	vld1.32	{d16-d17}, [r2]
   46090:	vld1.32	{d18-d19}, [r1]!
   46094:	sub	r2, lr, #56	; 0x38
   46098:	vld1.64	{d20-d21}, [r2]
   4609c:	vand	q8, q9, q8
   460a0:	vbic	q9, q10, q8
   460a4:	vst1.64	{d18-d19}, [r2]
   460a8:	ldr	r2, [sp, #4]
   460ac:	vld1.32	{d20-d21}, [r1]
   460b0:	ldr	r1, [sp, #8]
   460b4:	vld1.32	{d16-d17}, [r2]
   460b8:	vld1.32	{d22-d23}, [r1]
   460bc:	vand	q8, q10, q8
   460c0:	vbic	q8, q11, q8
   460c4:	b	463d8 <__assert_fail@plt+0x3395c>
   460c8:	mov	r0, r3
   460cc:	mov	r8, r2
   460d0:	cmp	ip, #7
   460d4:	beq	4611c <__assert_fail@plt+0x336a0>
   460d8:	cmp	ip, #5
   460dc:	beq	46168 <__assert_fail@plt+0x336ec>
   460e0:	cmp	ip, #3
   460e4:	bne	46cf4 <__assert_fail@plt+0x34278>
   460e8:	ldr	r2, [r0, r8, lsl #3]
   460ec:	sub	lr, fp, #1024	; 0x400
   460f0:	sub	r3, lr, #56	; 0x38
   460f4:	vld1.64	{d16-d17}, [r3]
   460f8:	vld1.32	{d18-d19}, [r2]!
   460fc:	vorr	q8, q8, q9
   46100:	vst1.64	{d16-d17}, [r3]
   46104:	vld1.32	{d16-d17}, [r2]
   46108:	ldr	r2, [sp, #8]
   4610c:	vld1.32	{d18-d19}, [r2]
   46110:	vorr	q8, q9, q8
   46114:	vst1.32	{d16-d17}, [r2]
   46118:	b	46000 <__assert_fail@plt+0x33584>
   4611c:	mvn	r2, #0
   46120:	str	r2, [fp, #-1068]	; 0xfffffbd4
   46124:	str	r2, [fp, #-1072]	; 0xfffffbd0
   46128:	str	r2, [fp, #-1076]	; 0xfffffbcc
   4612c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   46130:	ldr	r3, [sl, #128]	; 0x80
   46134:	and	r2, r3, #128	; 0x80
   46138:	ands	r3, r3, #64	; 0x40
   4613c:	beq	46148 <__assert_fail@plt+0x336cc>
   46140:	cmp	r2, #0
   46144:	beq	46000 <__assert_fail@plt+0x33584>
   46148:	cmp	r3, #0
   4614c:	mvn	r3, #1
   46150:	movweq	r3, #64510	; 0xfbfe
   46154:	movteq	r3, #65535	; 0xffff
   46158:	cmp	r2, #0
   4615c:	mvneq	r3, #1024	; 0x400
   46160:	str	r3, [fp, #-1080]	; 0xfffffbc8
   46164:	b	46000 <__assert_fail@plt+0x33584>
   46168:	ldr	r2, [sl, #92]	; 0x5c
   4616c:	cmp	r2, #2
   46170:	blt	461d0 <__assert_fail@plt+0x33754>
   46174:	ldr	r2, [sl, #60]	; 0x3c
   46178:	sub	lr, fp, #1024	; 0x400
   4617c:	sub	r3, lr, #56	; 0x38
   46180:	vld1.64	{d16-d17}, [r3]
   46184:	vld1.32	{d18-d19}, [r2]!
   46188:	vorr	q8, q8, q9
   4618c:	vst1.64	{d16-d17}, [r3]
   46190:	vld1.32	{d18-d19}, [r2]
   46194:	ldr	r2, [sp, #8]
   46198:	vld1.32	{d20-d21}, [r2]
   4619c:	vorr	q9, q10, q9
   461a0:	vst1.32	{d18-d19}, [r2]
   461a4:	vmov.32	r2, d16[0]
   461a8:	b	461f4 <__assert_fail@plt+0x33778>
   461ac:	mov	r0, r2
   461b0:	movw	r2, #255	; 0xff
   461b4:	movt	r2, #64	; 0x40
   461b8:	and	r2, r1, r2
   461bc:	cmp	r2, #1
   461c0:	bne	46220 <__assert_fail@plt+0x337a4>
   461c4:	sub	lr, fp, #1024	; 0x400
   461c8:	sub	r0, lr, #56	; 0x38
   461cc:	b	46cec <__assert_fail@plt+0x34270>
   461d0:	mvn	r2, #0
   461d4:	str	r2, [fp, #-1052]	; 0xfffffbe4
   461d8:	str	r2, [fp, #-1056]	; 0xfffffbe0
   461dc:	str	r2, [fp, #-1060]	; 0xfffffbdc
   461e0:	str	r2, [fp, #-1064]	; 0xfffffbd8
   461e4:	str	r2, [fp, #-1068]	; 0xfffffbd4
   461e8:	str	r2, [fp, #-1072]	; 0xfffffbd0
   461ec:	str	r2, [fp, #-1076]	; 0xfffffbcc
   461f0:	str	r2, [fp, #-1080]	; 0xfffffbc8
   461f4:	ldr	r3, [sl, #128]	; 0x80
   461f8:	ands	r7, r3, #64	; 0x40
   461fc:	and	r3, r3, #128	; 0x80
   46200:	biceq	r2, r2, #1024	; 0x400
   46204:	beq	46210 <__assert_fail@plt+0x33794>
   46208:	cmp	r3, #0
   4620c:	beq	46000 <__assert_fail@plt+0x33584>
   46210:	cmp	r3, #0
   46214:	bicne	r2, r2, #1
   46218:	str	r2, [fp, #-1080]	; 0xfffffbc8
   4621c:	b	46000 <__assert_fail@plt+0x33584>
   46220:	ldr	r2, [sl, #92]	; 0x5c
   46224:	cmp	r2, #1
   46228:	ble	462c0 <__assert_fail@plt+0x33844>
   4622c:	ldr	r2, [sl, #60]	; 0x3c
   46230:	ldr	r3, [sp]
   46234:	sub	lr, fp, #1024	; 0x400
   46238:	vld1.32	{d16-d17}, [r3]
   4623c:	vld1.32	{d18-d19}, [r2]!
   46240:	sub	r3, lr, #56	; 0x38
   46244:	vld1.64	{d20-d21}, [r3]
   46248:	vorn	q8, q8, q9
   4624c:	vand	q8, q10, q8
   46250:	vst1.64	{d16-d17}, [r3]
   46254:	vmov.32	r3, d16[1]
   46258:	vld1.32	{d18-d19}, [r2]
   4625c:	ldr	r2, [sp, #4]
   46260:	vld1.32	{d20-d21}, [r2]
   46264:	ldr	r2, [sp, #8]
   46268:	vld1.32	{d22-d23}, [r2]
   4626c:	vorn	q9, q10, q9
   46270:	vand	q9, q11, q9
   46274:	vst1.32	{d18-d19}, [r2]
   46278:	vmov.32	r2, d16[0]
   4627c:	orr	r2, r3, r2
   46280:	vmov.32	r3, d17[0]
   46284:	orr	r2, r2, r3
   46288:	vmov.32	r3, d17[1]
   4628c:	orr	r2, r2, r3
   46290:	vmov.32	r3, d18[0]
   46294:	orr	r2, r2, r3
   46298:	vmov.32	r3, d18[1]
   4629c:	orr	r2, r2, r3
   462a0:	vmov.32	r3, d19[0]
   462a4:	orr	r2, r2, r3
   462a8:	vmov.32	r3, d19[1]
   462ac:	orr	r2, r2, r3
   462b0:	cmp	r2, #0
   462b4:	mov	r2, r0
   462b8:	bne	46058 <__assert_fail@plt+0x335dc>
   462bc:	b	46cf4 <__assert_fail@plt+0x34278>
   462c0:	ldr	r2, [sl, #112]	; 0x70
   462c4:	str	r0, [sp, #24]
   462c8:	str	r8, [sp, #28]
   462cc:	str	r5, [sp, #156]	; 0x9c
   462d0:	ldr	r3, [sl, #96]	; 0x60
   462d4:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   462d8:	ldr	r0, [sl, #100]	; 0x64
   462dc:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   462e0:	ldr	r8, [sl, #104]	; 0x68
   462e4:	ldr	r9, [sl, #108]	; 0x6c
   462e8:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   462ec:	str	r2, [sp, #140]	; 0x8c
   462f0:	ldr	r2, [sl, #116]	; 0x74
   462f4:	and	lr, r5, r0
   462f8:	and	r7, r4, r3
   462fc:	ldr	r0, [sp, #140]	; 0x8c
   46300:	str	r2, [sp, #144]	; 0x90
   46304:	ldr	r2, [sl, #120]	; 0x78
   46308:	str	r2, [sp, #148]	; 0x94
   4630c:	ldr	r2, [sl, #124]	; 0x7c
   46310:	and	sl, r6, r8
   46314:	ldr	r8, [sp, #28]
   46318:	str	r2, [sp, #152]	; 0x98
   4631c:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   46320:	str	r7, [fp, #-1080]	; 0xfffffbc8
   46324:	str	lr, [fp, #-1076]	; 0xfffffbcc
   46328:	str	sl, [fp, #-1072]	; 0xfffffbd0
   4632c:	orr	r7, lr, r7
   46330:	orr	r7, r7, sl
   46334:	ldr	sl, [sp, #16]
   46338:	and	r2, r2, r9
   4633c:	str	r2, [fp, #-1068]	; 0xfffffbd4
   46340:	orr	r2, r7, r2
   46344:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   46348:	and	r9, r6, r0
   4634c:	ldr	r0, [sp, #144]	; 0x90
   46350:	str	r9, [fp, #-1064]	; 0xfffffbd8
   46354:	orr	r2, r2, r9
   46358:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   4635c:	and	r4, r4, r0
   46360:	ldr	r0, [sp, #148]	; 0x94
   46364:	str	r4, [fp, #-1060]	; 0xfffffbdc
   46368:	orr	r2, r2, r4
   4636c:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   46370:	and	r3, r3, r0
   46374:	ldr	r0, [sp, #152]	; 0x98
   46378:	str	r3, [fp, #-1056]	; 0xfffffbe0
   4637c:	orr	r2, r2, r3
   46380:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   46384:	and	r6, r5, r0
   46388:	ldr	r0, [sp, #24]
   4638c:	ldr	r5, [sp, #156]	; 0x9c
   46390:	str	r6, [fp, #-1052]	; 0xfffffbe4
   46394:	orr	r2, r2, r6
   46398:	cmp	r2, #0
   4639c:	mov	r2, r0
   463a0:	bne	46058 <__assert_fail@plt+0x335dc>
   463a4:	b	46cf4 <__assert_fail@plt+0x34278>
   463a8:	ldr	r1, [sp]
   463ac:	sub	lr, fp, #1024	; 0x400
   463b0:	vld1.32	{d16-d17}, [r1]
   463b4:	sub	r1, lr, #56	; 0x38
   463b8:	vld1.64	{d18-d19}, [r1]
   463bc:	vbic	q9, q9, q8
   463c0:	vst1.64	{d18-d19}, [r1]
   463c4:	ldr	r1, [sp, #4]
   463c8:	vld1.32	{d16-d17}, [r1]
   463cc:	ldr	r1, [sp, #8]
   463d0:	vld1.32	{d20-d21}, [r1]
   463d4:	vbic	q8, q10, q8
   463d8:	vst1.32	{d16-d17}, [r1]
   463dc:	vmov.32	r1, d18[0]
   463e0:	vmov.32	r2, d18[1]
   463e4:	orr	r1, r2, r1
   463e8:	vmov.32	r2, d19[0]
   463ec:	orr	r1, r1, r2
   463f0:	vmov.32	r2, d19[1]
   463f4:	orr	r1, r1, r2
   463f8:	vmov.32	r2, d16[0]
   463fc:	orr	r1, r1, r2
   46400:	vmov.32	r2, d16[1]
   46404:	orr	r1, r1, r2
   46408:	vmov.32	r2, d17[0]
   4640c:	orr	r1, r1, r2
   46410:	vmov.32	r2, d17[1]
   46414:	orrs	r1, r1, r2
   46418:	mov	r2, r0
   4641c:	beq	46cf4 <__assert_fail@plt+0x34278>
   46420:	cmp	r5, #1
   46424:	blt	46830 <__assert_fail@plt+0x33db4>
   46428:	ldr	r6, [sp, #12]
   4642c:	cmp	ip, #1
   46430:	bne	46840 <__assert_fail@plt+0x33dc4>
   46434:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   46438:	ldr	r7, [fp, #-1080]	; 0xfffffbc8
   4643c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   46440:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   46444:	ldr	lr, [fp, #-1068]	; 0xfffffbd4
   46448:	str	r5, [sp, #156]	; 0x9c
   4644c:	mov	r4, #0
   46450:	str	r6, [sp, #148]	; 0x94
   46454:	add	r5, sp, #160	; 0xa0
   46458:	mov	ip, r8
   4645c:	str	r8, [sp, #28]
   46460:	str	r2, [sp, #24]
   46464:	str	r0, [sp, #140]	; 0x8c
   46468:	sub	r0, fp, #6144	; 0x1800
   4646c:	sub	r6, r0, #104	; 0x68
   46470:	ldrb	r0, [r2, ip, lsl #3]
   46474:	mov	r8, r2
   46478:	mov	r2, #1
   4647c:	ubfx	r1, r0, #5, #3
   46480:	and	r0, r0, #31
   46484:	add	r1, r5, r1, lsl #2
   46488:	ldr	r1, [r1, r4, lsl #5]
   4648c:	tst	r1, r2, lsl r0
   46490:	beq	46704 <__assert_fail@plt+0x33c88>
   46494:	add	r0, r5, r4, lsl #5
   46498:	str	r6, [sp, #116]	; 0x74
   4649c:	str	r4, [sp, #152]	; 0x98
   464a0:	add	ip, r0, #8
   464a4:	ldr	r6, [r0, #4]
   464a8:	ldm	ip, {r1, r3, ip}
   464ac:	ldr	r5, [sp, #148]	; 0x94
   464b0:	str	lr, [sp, #136]	; 0x88
   464b4:	str	sl, [sp, #132]	; 0x84
   464b8:	ldr	r8, [fp, #-1052]	; 0xfffffbe4
   464bc:	str	r6, [sp, #124]	; 0x7c
   464c0:	and	r6, r6, sl
   464c4:	ldr	sl, [fp, #-1056]	; 0xfffffbe0
   464c8:	ldr	r2, [r5, #-28]	; 0xffffffe4
   464cc:	and	r4, r1, r9
   464d0:	str	r6, [sp, #84]	; 0x54
   464d4:	str	r1, [sp, #104]	; 0x68
   464d8:	ldr	r1, [r5]
   464dc:	str	ip, [sp, #144]	; 0x90
   464e0:	str	r3, [sp, #108]	; 0x6c
   464e4:	str	r8, [sp, #100]	; 0x64
   464e8:	str	r4, [sp, #96]	; 0x60
   464ec:	str	r2, [sp, #120]	; 0x78
   464f0:	and	r2, r2, r7
   464f4:	str	r1, [sp, #128]	; 0x80
   464f8:	and	r1, r1, r8
   464fc:	str	r2, [sp, #92]	; 0x5c
   46500:	orr	r2, r6, r2
   46504:	and	r6, r3, lr
   46508:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   4650c:	orr	r2, r2, r4
   46510:	str	r6, [sp, #80]	; 0x50
   46514:	orr	r2, r2, r6
   46518:	ldr	r6, [sp, #140]	; 0x8c
   4651c:	and	r4, ip, r6
   46520:	str	r4, [sp, #76]	; 0x4c
   46524:	orr	r4, r2, r4
   46528:	ldr	r2, [r0, #20]
   4652c:	and	r6, r2, lr
   46530:	str	r6, [sp, #72]	; 0x48
   46534:	orr	r6, r4, r6
   46538:	ldr	r4, [r0, #24]
   4653c:	and	ip, r4, sl
   46540:	orr	r6, r6, ip
   46544:	str	ip, [sp, #68]	; 0x44
   46548:	orrs	r6, r6, r1
   4654c:	beq	46710 <__assert_fail@plt+0x33c94>
   46550:	str	r1, [sp, #20]
   46554:	ldr	r1, [sp, #120]	; 0x78
   46558:	mov	r8, r2
   4655c:	str	r2, [sp, #44]	; 0x2c
   46560:	ldr	r2, [sp, #132]	; 0x84
   46564:	ldr	ip, [sp, #104]	; 0x68
   46568:	ldr	r3, [sp, #140]	; 0x8c
   4656c:	bic	r6, r7, r1
   46570:	ldr	r1, [sp, #124]	; 0x7c
   46574:	str	r6, [sp, #64]	; 0x40
   46578:	bic	r6, r2, r1
   4657c:	ldr	r2, [sp, #108]	; 0x6c
   46580:	ldr	r1, [sp, #136]	; 0x88
   46584:	str	r6, [sp, #48]	; 0x30
   46588:	bic	r6, r9, ip
   4658c:	str	r6, [sp, #60]	; 0x3c
   46590:	bic	r6, r1, r2
   46594:	ldr	r1, [sp, #144]	; 0x90
   46598:	str	r6, [sp, #56]	; 0x38
   4659c:	bic	r6, r3, r1
   465a0:	ldr	r1, [sp, #128]	; 0x80
   465a4:	ldr	r3, [sp, #120]	; 0x78
   465a8:	str	r6, [sp, #52]	; 0x34
   465ac:	bic	r6, lr, r8
   465b0:	ldr	r8, [sp, #100]	; 0x64
   465b4:	str	r6, [sp, #40]	; 0x28
   465b8:	str	r6, [fp, #-1060]	; 0xfffffbdc
   465bc:	bic	r6, sl, r4
   465c0:	str	r6, [sp, #36]	; 0x24
   465c4:	str	r6, [fp, #-1056]	; 0xfffffbe0
   465c8:	bic	r7, r3, r7
   465cc:	ldr	r3, [sp, #124]	; 0x7c
   465d0:	bic	r6, r8, r1
   465d4:	bic	r1, ip, r9
   465d8:	str	r6, [sp, #32]
   465dc:	str	r6, [fp, #-1052]	; 0xfffffbe4
   465e0:	ldr	r6, [sp, #132]	; 0x84
   465e4:	bic	r3, r3, r6
   465e8:	orr	r6, r3, r7
   465ec:	str	r3, [sp, #132]	; 0x84
   465f0:	mov	r3, r7
   465f4:	ldr	r7, [sp, #136]	; 0x88
   465f8:	orr	r6, r6, r1
   465fc:	bic	r2, r2, r7
   46600:	ldr	r7, [sp, #140]	; 0x8c
   46604:	str	r2, [sp, #136]	; 0x88
   46608:	orr	r6, r6, r2
   4660c:	ldr	r2, [sp, #144]	; 0x90
   46610:	bic	ip, r2, r7
   46614:	ldr	r2, [sp, #44]	; 0x2c
   46618:	orr	r6, r6, ip
   4661c:	bic	lr, r2, lr
   46620:	bic	r2, r4, sl
   46624:	ldr	r4, [sp, #128]	; 0x80
   46628:	orr	r6, r6, lr
   4662c:	orr	r6, r6, r2
   46630:	bic	r7, r4, r8
   46634:	orrs	r6, r6, r7
   46638:	beq	46730 <__assert_fail@plt+0x33cb4>
   4663c:	ldr	r4, [sp, #156]	; 0x9c
   46640:	add	r6, sp, #160	; 0xa0
   46644:	str	r3, [r6, r4, lsl #5]
   46648:	ldr	r3, [sp, #132]	; 0x84
   4664c:	add	r6, r6, r4, lsl #5
   46650:	str	r3, [r6, #4]
   46654:	str	r1, [r6, #8]
   46658:	ldr	r1, [sp, #136]	; 0x88
   4665c:	add	r3, r6, #12
   46660:	stm	r3, {r1, ip, lr}
   46664:	str	r2, [r6, #24]
   46668:	str	r7, [r6, #28]
   4666c:	sub	lr, fp, #6144	; 0x1800
   46670:	str	r4, [sp, #156]	; 0x9c
   46674:	ldr	r1, [sp, #92]	; 0x5c
   46678:	ldr	r6, [sp, #116]	; 0x74
   4667c:	str	r1, [r5, #-28]	; 0xffffffe4
   46680:	ldr	r1, [sp, #84]	; 0x54
   46684:	str	r1, [r0, #4]
   46688:	ldr	r1, [sp, #96]	; 0x60
   4668c:	str	r1, [r0, #8]
   46690:	ldr	r1, [sp, #80]	; 0x50
   46694:	str	r1, [r0, #12]
   46698:	ldr	r1, [sp, #76]	; 0x4c
   4669c:	str	r1, [r0, #16]
   466a0:	ldr	r1, [sp, #72]	; 0x48
   466a4:	str	r1, [r0, #20]
   466a8:	ldr	r1, [sp, #68]	; 0x44
   466ac:	str	r1, [r0, #24]
   466b0:	ldr	r0, [sp, #20]
   466b4:	sub	r1, lr, #104	; 0x68
   466b8:	str	r0, [r5]
   466bc:	add	r0, r4, r4, lsl #1
   466c0:	add	r5, r1, r0, lsl #2
   466c4:	ldr	r0, [r6, #4]
   466c8:	mov	r4, r5
   466cc:	str	r0, [r4, #4]!
   466d0:	ldr	r8, [r6, #4]
   466d4:	cmp	r8, #0
   466d8:	ble	4673c <__assert_fail@plt+0x33cc0>
   466dc:	str	r0, [r5]
   466e0:	lsl	r0, r0, #2
   466e4:	bl	35608 <__assert_fail@plt+0x22b8c>
   466e8:	cmp	r0, #0
   466ec:	str	r0, [r5, #8]
   466f0:	beq	476d4 <__assert_fail@plt+0x34c58>
   466f4:	ldr	r1, [r6, #8]
   466f8:	lsl	r2, r8, #2
   466fc:	bl	124b8 <memcpy@plt>
   46700:	b	4674c <__assert_fail@plt+0x33cd0>
   46704:	str	r9, [sp, #144]	; 0x90
   46708:	mov	r2, r8
   4670c:	b	467dc <__assert_fail@plt+0x33d60>
   46710:	ldr	r4, [sp, #152]	; 0x98
   46714:	ldr	ip, [sp, #28]
   46718:	ldr	r2, [sp, #24]
   4671c:	ldr	r6, [sp, #116]	; 0x74
   46720:	ldr	lr, [sp, #136]	; 0x88
   46724:	ldr	sl, [sp, #132]	; 0x84
   46728:	str	r9, [sp, #144]	; 0x90
   4672c:	b	467e0 <__assert_fail@plt+0x33d64>
   46730:	ldr	r4, [sp, #152]	; 0x98
   46734:	ldr	r6, [sp, #116]	; 0x74
   46738:	b	4675c <__assert_fail@plt+0x33ce0>
   4673c:	mov	r0, #0
   46740:	str	r0, [r5]
   46744:	str	r0, [r5, #4]
   46748:	str	r0, [r5, #8]
   4674c:	ldr	r0, [sp, #156]	; 0x9c
   46750:	ldr	r4, [sp, #152]	; 0x98
   46754:	add	r0, r0, #1
   46758:	str	r0, [sp, #156]	; 0x9c
   4675c:	ldr	r0, [sp, #88]	; 0x58
   46760:	ldr	r1, [sp, #112]	; 0x70
   46764:	ldr	r0, [r0, #12]
   46768:	ldr	r1, [r0, r1, lsl #2]
   4676c:	mov	r0, r6
   46770:	bl	41734 <__assert_fail@plt+0x2ecb8>
   46774:	cmp	r0, #0
   46778:	beq	471c4 <__assert_fail@plt+0x34748>
   4677c:	ldr	r2, [sp, #64]	; 0x40
   46780:	ldr	sl, [sp, #48]	; 0x30
   46784:	ldr	r9, [sp, #60]	; 0x3c
   46788:	ldr	lr, [sp, #56]	; 0x38
   4678c:	ldr	r1, [sp, #52]	; 0x34
   46790:	ldr	r5, [sp, #40]	; 0x28
   46794:	orr	r0, sl, r2
   46798:	orr	r0, r0, r9
   4679c:	orr	r0, r0, lr
   467a0:	orr	r0, r0, r1
   467a4:	orr	r0, r0, r5
   467a8:	ldr	r5, [sp, #36]	; 0x24
   467ac:	orr	r0, r0, r5
   467b0:	ldr	r5, [sp, #32]
   467b4:	orrs	r0, r0, r5
   467b8:	mov	r0, #0
   467bc:	movweq	r0, #17
   467c0:	cmp	r0, #0
   467c4:	bne	46d1c <__assert_fail@plt+0x342a0>
   467c8:	mov	r7, r2
   467cc:	ldr	ip, [sp, #28]
   467d0:	ldr	r2, [sp, #24]
   467d4:	str	r1, [sp, #140]	; 0x8c
   467d8:	str	r9, [sp, #144]	; 0x90
   467dc:	ldr	r5, [sp, #148]	; 0x94
   467e0:	ldr	r3, [sp, #156]	; 0x9c
   467e4:	ldr	r9, [sp, #144]	; 0x90
   467e8:	add	r5, r5, #32
   467ec:	add	r4, r4, #1
   467f0:	add	r6, r6, #12
   467f4:	str	r5, [sp, #148]	; 0x94
   467f8:	add	r5, sp, #160	; 0xa0
   467fc:	cmp	r4, r3
   46800:	blt	46470 <__assert_fail@plt+0x339f4>
   46804:	ldr	r5, [sp, #156]	; 0x9c
   46808:	ldr	r0, [sp, #140]	; 0x8c
   4680c:	str	sl, [fp, #-1076]	; 0xfffffbcc
   46810:	str	r7, [fp, #-1080]	; 0xfffffbc8
   46814:	str	r9, [fp, #-1072]	; 0xfffffbd0
   46818:	str	lr, [fp, #-1068]	; 0xfffffbd4
   4681c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   46820:	ldr	sl, [sp, #16]
   46824:	cmp	r4, r5
   46828:	beq	46c70 <__assert_fail@plt+0x341f4>
   4682c:	b	46cf4 <__assert_fail@plt+0x34278>
   46830:	mov	r4, #0
   46834:	cmp	r4, r5
   46838:	beq	46c70 <__assert_fail@plt+0x341f4>
   4683c:	b	46cf4 <__assert_fail@plt+0x34278>
   46840:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   46844:	ldr	r9, [fp, #-1080]	; 0xfffffbc8
   46848:	ldr	ip, [fp, #-1072]	; 0xfffffbd0
   4684c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   46850:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   46854:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   46858:	sub	lr, fp, #6144	; 0x1800
   4685c:	mov	r4, #0
   46860:	str	r0, [sp, #144]	; 0x90
   46864:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   46868:	mov	r3, ip
   4686c:	mov	r7, r9
   46870:	str	r2, [sp, #80]	; 0x50
   46874:	str	sl, [sp, #76]	; 0x4c
   46878:	str	r0, [sp, #140]	; 0x8c
   4687c:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   46880:	str	r0, [sp, #84]	; 0x54
   46884:	sub	r0, lr, #104	; 0x68
   46888:	str	r0, [sp, #148]	; 0x94
   4688c:	mov	r0, r6
   46890:	add	r1, sp, #160	; 0xa0
   46894:	str	r9, [sp, #136]	; 0x88
   46898:	str	r7, [sp, #120]	; 0x78
   4689c:	str	r3, [sp, #92]	; 0x5c
   468a0:	str	r8, [sp, #96]	; 0x60
   468a4:	str	ip, [sp, #124]	; 0x7c
   468a8:	str	sl, [sp, #128]	; 0x80
   468ac:	str	r2, [sp, #132]	; 0x84
   468b0:	str	r5, [sp, #156]	; 0x9c
   468b4:	str	r4, [sp, #152]	; 0x98
   468b8:	add	r9, r1, r4, lsl #5
   468bc:	ldmib	r9, {sl, ip}
   468c0:	ldr	lr, [r0, #-28]	; 0xffffffe4
   468c4:	ldr	r5, [r0]
   468c8:	str	r0, [sp, #116]	; 0x74
   468cc:	ldr	r4, [r9, #12]
   468d0:	ldr	r6, [r9, #16]
   468d4:	and	r0, lr, r7
   468d8:	ldr	r7, [sp, #76]	; 0x4c
   468dc:	and	r1, ip, r3
   468e0:	str	r4, [sp, #108]	; 0x6c
   468e4:	str	r6, [sp, #104]	; 0x68
   468e8:	str	r5, [sp, #100]	; 0x64
   468ec:	str	r0, [sp, #68]	; 0x44
   468f0:	str	r1, [sp, #72]	; 0x48
   468f4:	and	r2, sl, r7
   468f8:	orr	r0, r2, r0
   468fc:	str	r2, [sp, #64]	; 0x40
   46900:	orr	r0, r0, r1
   46904:	ldr	r1, [sp, #80]	; 0x50
   46908:	and	r2, r4, r1
   4690c:	ldr	r4, [sp, #140]	; 0x8c
   46910:	str	r2, [sp, #60]	; 0x3c
   46914:	orr	r0, r0, r2
   46918:	and	r2, r6, r8
   4691c:	ldr	r8, [sp, #84]	; 0x54
   46920:	str	r2, [sp, #56]	; 0x38
   46924:	orr	r0, r0, r2
   46928:	ldr	r2, [r9, #20]
   4692c:	and	r3, r2, r8
   46930:	str	r3, [sp, #52]	; 0x34
   46934:	orr	r0, r0, r3
   46938:	ldr	r3, [r9, #24]
   4693c:	and	r6, r3, r4
   46940:	str	r6, [sp, #48]	; 0x30
   46944:	orr	r0, r0, r6
   46948:	ldr	r6, [sp, #144]	; 0x90
   4694c:	and	r6, r5, r6
   46950:	orrs	r0, r0, r6
   46954:	beq	46b08 <__assert_fail@plt+0x3408c>
   46958:	ldr	r0, [sp, #120]	; 0x78
   4695c:	ldr	r5, [sp, #92]	; 0x5c
   46960:	str	sl, [sp, #24]
   46964:	str	r6, [sp, #20]
   46968:	ldr	r6, [sp, #144]	; 0x90
   4696c:	str	ip, [sp, #28]
   46970:	str	r4, [sp, #140]	; 0x8c
   46974:	bic	r0, r0, lr
   46978:	str	r0, [sp, #136]	; 0x88
   4697c:	bic	r0, r7, sl
   46980:	ldr	sl, [sp, #96]	; 0x60
   46984:	str	r0, [sp, #128]	; 0x80
   46988:	bic	r0, r5, ip
   4698c:	str	r0, [sp, #124]	; 0x7c
   46990:	ldr	r0, [sp, #108]	; 0x6c
   46994:	bic	r0, r1, r0
   46998:	str	r0, [sp, #132]	; 0x84
   4699c:	ldr	r0, [sp, #104]	; 0x68
   469a0:	bic	r0, sl, r0
   469a4:	str	r0, [sp, #44]	; 0x2c
   469a8:	bic	r0, r8, r2
   469ac:	bic	r2, r2, r8
   469b0:	str	r0, [sp, #40]	; 0x28
   469b4:	bic	r0, r4, r3
   469b8:	str	r0, [sp, #36]	; 0x24
   469bc:	ldr	r0, [sp, #100]	; 0x64
   469c0:	bic	r0, r6, r0
   469c4:	str	r0, [sp, #32]
   469c8:	ldr	r0, [sp, #28]
   469cc:	bic	r0, r0, r5
   469d0:	ldr	r5, [sp, #120]	; 0x78
   469d4:	str	r0, [sp, #120]	; 0x78
   469d8:	bic	ip, lr, r5
   469dc:	ldr	r5, [sp, #24]
   469e0:	bic	r7, r5, r7
   469e4:	mov	r5, r6
   469e8:	str	r7, [sp, #92]	; 0x5c
   469ec:	orr	r7, r7, ip
   469f0:	orr	r4, r7, r0
   469f4:	ldr	r0, [sp, #108]	; 0x6c
   469f8:	bic	lr, r0, r1
   469fc:	ldr	r0, [sp, #104]	; 0x68
   46a00:	orr	r4, r4, lr
   46a04:	bic	r6, r0, sl
   46a08:	ldr	r0, [sp, #140]	; 0x8c
   46a0c:	orr	r4, r4, r6
   46a10:	orr	r4, r4, r2
   46a14:	bic	r3, r3, r0
   46a18:	ldr	r0, [sp, #100]	; 0x64
   46a1c:	orr	r4, r4, r3
   46a20:	bic	r1, r0, r5
   46a24:	orrs	r4, r4, r1
   46a28:	beq	46b34 <__assert_fail@plt+0x340b8>
   46a2c:	ldr	r7, [sp, #156]	; 0x9c
   46a30:	ldr	r5, [sp, #92]	; 0x5c
   46a34:	add	r4, sp, #160	; 0xa0
   46a38:	add	r0, r4, r7, lsl #5
   46a3c:	str	ip, [r4, r7, lsl #5]
   46a40:	mov	r8, r7
   46a44:	str	r5, [r0, #4]
   46a48:	ldr	r5, [sp, #120]	; 0x78
   46a4c:	str	r5, [r0, #8]
   46a50:	str	lr, [r0, #12]
   46a54:	str	r6, [r0, #16]
   46a58:	str	r2, [r0, #20]
   46a5c:	str	r3, [r0, #24]
   46a60:	str	r1, [r0, #28]
   46a64:	ldr	r0, [sp, #116]	; 0x74
   46a68:	ldr	r1, [sp, #68]	; 0x44
   46a6c:	sub	lr, fp, #6144	; 0x1800
   46a70:	str	r1, [r0, #-28]	; 0xffffffe4
   46a74:	ldr	r1, [sp, #64]	; 0x40
   46a78:	str	r1, [r9, #4]
   46a7c:	ldr	r1, [sp, #72]	; 0x48
   46a80:	str	r1, [r9, #8]
   46a84:	ldr	r1, [sp, #60]	; 0x3c
   46a88:	str	r1, [r9, #12]
   46a8c:	ldr	r1, [sp, #56]	; 0x38
   46a90:	str	r1, [r9, #16]
   46a94:	ldr	r1, [sp, #52]	; 0x34
   46a98:	str	r1, [r9, #20]
   46a9c:	ldr	r1, [sp, #48]	; 0x30
   46aa0:	str	r1, [r9, #24]
   46aa4:	ldr	r1, [sp, #20]
   46aa8:	str	r1, [r0]
   46aac:	add	r0, r7, r7, lsl #1
   46ab0:	sub	r1, lr, #104	; 0x68
   46ab4:	add	r6, r1, r0, lsl #2
   46ab8:	ldr	r1, [sp, #148]	; 0x94
   46abc:	mov	r4, r6
   46ac0:	ldr	r0, [r1, #4]
   46ac4:	str	r0, [r4, #4]!
   46ac8:	ldr	r5, [r1, #4]
   46acc:	cmp	r5, #1
   46ad0:	blt	46b44 <__assert_fail@plt+0x340c8>
   46ad4:	str	r0, [r6]
   46ad8:	lsl	r0, r0, #2
   46adc:	bl	35608 <__assert_fail@plt+0x22b8c>
   46ae0:	ldr	r7, [sp, #40]	; 0x28
   46ae4:	cmp	r0, #0
   46ae8:	str	r0, [r6, #8]
   46aec:	beq	471fc <__assert_fail@plt+0x34780>
   46af0:	ldr	r1, [sp, #148]	; 0x94
   46af4:	lsl	r2, r5, #2
   46af8:	ldr	r1, [r1, #8]
   46afc:	bl	124b8 <memcpy@plt>
   46b00:	mov	r5, r8
   46b04:	b	46b5c <__assert_fail@plt+0x340e0>
   46b08:	ldr	r6, [sp, #120]	; 0x78
   46b0c:	ldr	r1, [sp, #92]	; 0x5c
   46b10:	ldr	r0, [sp, #144]	; 0x90
   46b14:	ldr	r5, [sp, #156]	; 0x9c
   46b18:	ldr	r4, [sp, #152]	; 0x98
   46b1c:	ldr	r9, [sp, #136]	; 0x88
   46b20:	ldr	r2, [sp, #132]	; 0x84
   46b24:	ldr	sl, [sp, #128]	; 0x80
   46b28:	ldr	ip, [sp, #124]	; 0x7c
   46b2c:	ldr	r8, [sp, #96]	; 0x60
   46b30:	b	46bec <__assert_fail@plt+0x34170>
   46b34:	ldr	r5, [sp, #156]	; 0x9c
   46b38:	ldr	r4, [sp, #152]	; 0x98
   46b3c:	ldr	r7, [sp, #40]	; 0x28
   46b40:	b	46b64 <__assert_fail@plt+0x340e8>
   46b44:	ldr	r7, [sp, #40]	; 0x28
   46b48:	mov	r0, #0
   46b4c:	mov	r5, r8
   46b50:	str	r0, [r6]
   46b54:	str	r0, [r6, #4]
   46b58:	str	r0, [r6, #8]
   46b5c:	ldr	r4, [sp, #152]	; 0x98
   46b60:	add	r5, r5, #1
   46b64:	ldr	r0, [sp, #88]	; 0x58
   46b68:	ldr	r1, [sp, #112]	; 0x70
   46b6c:	ldr	r0, [r0, #12]
   46b70:	ldr	r1, [r0, r1, lsl #2]
   46b74:	ldr	r0, [sp, #148]	; 0x94
   46b78:	bl	41734 <__assert_fail@plt+0x2ecb8>
   46b7c:	cmp	r0, #0
   46b80:	beq	47140 <__assert_fail@plt+0x346c4>
   46b84:	ldr	r9, [sp, #136]	; 0x88
   46b88:	ldr	sl, [sp, #128]	; 0x80
   46b8c:	ldr	ip, [sp, #124]	; 0x7c
   46b90:	ldr	r2, [sp, #132]	; 0x84
   46b94:	ldr	r6, [sp, #44]	; 0x2c
   46b98:	ldr	r1, [sp, #36]	; 0x24
   46b9c:	ldr	lr, [sp, #32]
   46ba0:	orr	r0, sl, r9
   46ba4:	orr	r0, r0, ip
   46ba8:	orr	r0, r0, r2
   46bac:	orr	r0, r0, r6
   46bb0:	orr	r0, r0, r7
   46bb4:	orr	r0, r0, r1
   46bb8:	orrs	r0, r0, lr
   46bbc:	mov	r0, #0
   46bc0:	movweq	r0, #17
   46bc4:	cmp	r0, #0
   46bc8:	bne	46c1c <__assert_fail@plt+0x341a0>
   46bcc:	str	r1, [sp, #140]	; 0x8c
   46bd0:	mov	r8, r6
   46bd4:	mov	r0, lr
   46bd8:	mov	r1, ip
   46bdc:	mov	r6, r9
   46be0:	str	r7, [sp, #84]	; 0x54
   46be4:	str	r2, [sp, #80]	; 0x50
   46be8:	str	sl, [sp, #76]	; 0x4c
   46bec:	ldr	r7, [sp, #148]	; 0x94
   46bf0:	str	r0, [sp, #144]	; 0x90
   46bf4:	ldr	r0, [sp, #116]	; 0x74
   46bf8:	add	r4, r4, #1
   46bfc:	mov	r3, r1
   46c00:	cmp	r4, r5
   46c04:	add	r7, r7, #12
   46c08:	add	r0, r0, #32
   46c0c:	str	r7, [sp, #148]	; 0x94
   46c10:	mov	r7, r6
   46c14:	blt	46890 <__assert_fail@plt+0x33e14>
   46c18:	b	46c38 <__assert_fail@plt+0x341bc>
   46c1c:	cmp	r0, #17
   46c20:	bne	46d30 <__assert_fail@plt+0x342b4>
   46c24:	mov	r8, r6
   46c28:	mov	r0, r7
   46c2c:	str	lr, [sp, #144]	; 0x90
   46c30:	str	r1, [sp, #140]	; 0x8c
   46c34:	str	r7, [sp, #84]	; 0x54
   46c38:	ldr	r0, [sp, #84]	; 0x54
   46c3c:	str	ip, [fp, #-1072]	; 0xfffffbd0
   46c40:	str	sl, [fp, #-1076]	; 0xfffffbcc
   46c44:	str	r2, [fp, #-1068]	; 0xfffffbd4
   46c48:	str	r8, [fp, #-1064]	; 0xfffffbd8
   46c4c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   46c50:	ldr	r0, [sp, #140]	; 0x8c
   46c54:	str	r0, [fp, #-1056]	; 0xfffffbe0
   46c58:	ldr	r0, [sp, #144]	; 0x90
   46c5c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   46c60:	str	r9, [fp, #-1080]	; 0xfffffbc8
   46c64:	ldr	sl, [sp, #16]
   46c68:	cmp	r4, r5
   46c6c:	bne	46cf4 <__assert_fail@plt+0x34278>
   46c70:	sub	lr, fp, #1024	; 0x400
   46c74:	ldr	r1, [sp, #112]	; 0x70
   46c78:	sub	r7, lr, #56	; 0x38
   46c7c:	sub	lr, fp, #6144	; 0x1800
   46c80:	mov	r0, r7
   46c84:	mov	r9, r7
   46c88:	sub	r2, lr, #104	; 0x68
   46c8c:	vld1.32	{d16-d17}, [r0]!
   46c90:	vld1.64	{d18-d19}, [r0]
   46c94:	add	r0, sp, #160	; 0xa0
   46c98:	add	r0, r0, r4, lsl #5
   46c9c:	vst1.32	{d16-d17}, [r0]!
   46ca0:	vst1.32	{d18-d19}, [r0]
   46ca4:	ldr	r0, [sp, #88]	; 0x58
   46ca8:	ldr	r0, [r0, #12]
   46cac:	ldr	r7, [r0, r1, lsl #2]
   46cb0:	add	r0, r4, r4, lsl #1
   46cb4:	mov	r1, #1
   46cb8:	add	r5, r2, r0, lsl #2
   46cbc:	str	r1, [r2, r0, lsl #2]
   46cc0:	mov	r0, #4
   46cc4:	mov	r6, r5
   46cc8:	str	r1, [r6, #4]!
   46ccc:	bl	35608 <__assert_fail@plt+0x22b8c>
   46cd0:	cmp	r0, #0
   46cd4:	str	r0, [r5, #8]
   46cd8:	beq	47788 <__assert_fail@plt+0x34d0c>
   46cdc:	ldr	sl, [sp, #16]
   46ce0:	str	r7, [r0]
   46ce4:	mov	r0, r9
   46ce8:	add	r5, r4, #1
   46cec:	vst1.64	{d8-d9}, [r0]!
   46cf0:	vst1.64	{d8-d9}, [r0]
   46cf4:	ldr	r0, [sp, #88]	; 0x58
   46cf8:	ldr	r1, [sp, #112]	; 0x70
   46cfc:	ldr	r0, [r0, #8]
   46d00:	mov	r2, r1
   46d04:	add	r2, r1, #1
   46d08:	mov	r1, r2
   46d0c:	str	r2, [sp, #112]	; 0x70
   46d10:	cmp	r2, r0
   46d14:	blt	45f9c <__assert_fail@plt+0x33520>
   46d18:	b	46d88 <__assert_fail@plt+0x3430c>
   46d1c:	cmp	r0, #17
   46d20:	bne	46d60 <__assert_fail@plt+0x342e4>
   46d24:	mov	r7, r2
   46d28:	str	r1, [sp, #140]	; 0x8c
   46d2c:	b	46804 <__assert_fail@plt+0x33d88>
   46d30:	str	ip, [fp, #-1072]	; 0xfffffbd0
   46d34:	str	sl, [fp, #-1076]	; 0xfffffbcc
   46d38:	str	r2, [fp, #-1068]	; 0xfffffbd4
   46d3c:	str	r6, [fp, #-1064]	; 0xfffffbd8
   46d40:	str	r7, [fp, #-1060]	; 0xfffffbdc
   46d44:	str	r1, [fp, #-1056]	; 0xfffffbe0
   46d48:	str	lr, [fp, #-1052]	; 0xfffffbe4
   46d4c:	str	r9, [fp, #-1080]	; 0xfffffbc8
   46d50:	ldr	sl, [sp, #16]
   46d54:	cmp	r0, #0
   46d58:	beq	46cf4 <__assert_fail@plt+0x34278>
   46d5c:	b	46d84 <__assert_fail@plt+0x34308>
   46d60:	ldr	r5, [sp, #156]	; 0x9c
   46d64:	str	sl, [fp, #-1076]	; 0xfffffbcc
   46d68:	str	r2, [fp, #-1080]	; 0xfffffbc8
   46d6c:	str	r9, [fp, #-1072]	; 0xfffffbd0
   46d70:	str	lr, [fp, #-1068]	; 0xfffffbd4
   46d74:	str	r1, [fp, #-1064]	; 0xfffffbd8
   46d78:	ldr	sl, [sp, #16]
   46d7c:	cmp	r0, #0
   46d80:	beq	46cf4 <__assert_fail@plt+0x34278>
   46d84:	b	46d90 <__assert_fail@plt+0x34314>
   46d88:	cmp	r5, #0
   46d8c:	ble	47740 <__assert_fail@plt+0x34cc4>
   46d90:	mov	r0, #0
   46d94:	str	r0, [fp, #-3136]	; 0xfffff3c0
   46d98:	add	r0, r5, #1
   46d9c:	str	r0, [fp, #-3140]	; 0xfffff3bc
   46da0:	lsl	r0, r0, #2
   46da4:	bl	35608 <__assert_fail@plt+0x22b8c>
   46da8:	cmp	r0, #0
   46dac:	str	r0, [fp, #-3132]	; 0xfffff3c4
   46db0:	mov	r0, #0
   46db4:	movweq	r0, #12
   46db8:	str	r0, [fp, #-56]	; 0xffffffc8
   46dbc:	beq	477a4 <__assert_fail@plt+0x34d28>
   46dc0:	sub	lr, fp, #3072	; 0xc00
   46dc4:	vmov.i32	q8, #0	; 0x00000000
   46dc8:	mov	r1, #0
   46dcc:	mov	r9, #0
   46dd0:	mov	r6, #0
   46dd4:	mov	r2, #0
   46dd8:	mov	r7, #0
   46ddc:	mov	r3, #0
   46de0:	mov	r8, #0
   46de4:	add	r4, sp, #160	; 0xa0
   46de8:	str	r5, [sp, #156]	; 0x9c
   46dec:	sub	r0, lr, #104	; 0x68
   46df0:	vst1.64	{d16-d17}, [r0]!
   46df4:	vst1.64	{d16-d17}, [r0]
   46df8:	mov	r0, #0
   46dfc:	str	r0, [sp, #152]	; 0x98
   46e00:	mov	r0, #0
   46e04:	str	r0, [sp, #144]	; 0x90
   46e08:	mov	r0, #0
   46e0c:	str	r0, [sp, #148]	; 0x94
   46e10:	mov	r0, #0
   46e14:	str	r0, [sp, #124]	; 0x7c
   46e18:	mov	r0, #0
   46e1c:	sub	lr, fp, #6144	; 0x1800
   46e20:	str	r2, [sp, #140]	; 0x8c
   46e24:	str	r7, [sp, #136]	; 0x88
   46e28:	str	r3, [sp, #132]	; 0x84
   46e2c:	str	r0, [fp, #-3136]	; 0xfffff3c0
   46e30:	add	r0, r8, r8, lsl #1
   46e34:	sub	r2, lr, #104	; 0x68
   46e38:	add	r2, r2, r0, lsl #2
   46e3c:	mov	r7, r2
   46e40:	ldr	r0, [r7, #4]!
   46e44:	cmp	r0, #1
   46e48:	blt	46eac <__assert_fail@plt+0x34430>
   46e4c:	str	r9, [sp, #128]	; 0x80
   46e50:	add	r9, r2, #8
   46e54:	mov	r5, #0
   46e58:	ldr	r2, [r9]
   46e5c:	ldr	r3, [sl, #12]
   46e60:	ldr	r2, [r2, r5, lsl #2]
   46e64:	ldr	r2, [r3, r2, lsl #2]
   46e68:	cmn	r2, #1
   46e6c:	beq	46e98 <__assert_fail@plt+0x3441c>
   46e70:	ldr	r0, [sl, #24]
   46e74:	add	r1, r2, r2, lsl #1
   46e78:	sub	lr, fp, #3072	; 0xc00
   46e7c:	add	r1, r0, r1, lsl #2
   46e80:	sub	r0, lr, #68	; 0x44
   46e84:	bl	4158c <__assert_fail@plt+0x2eb10>
   46e88:	cmp	r0, #0
   46e8c:	bne	470a8 <__assert_fail@plt+0x3462c>
   46e90:	ldr	r0, [r7]
   46e94:	mov	r1, #0
   46e98:	add	r5, r5, #1
   46e9c:	cmp	r5, r0
   46ea0:	blt	46e58 <__assert_fail@plt+0x343dc>
   46ea4:	ldr	r9, [sp, #128]	; 0x80
   46ea8:	str	r1, [fp, #-56]	; 0xffffffc8
   46eac:	sub	lr, fp, #3072	; 0xc00
   46eb0:	sub	r0, fp, #56	; 0x38
   46eb4:	mov	r1, sl
   46eb8:	mov	r3, #0
   46ebc:	sub	r2, lr, #68	; 0x44
   46ec0:	bl	4187c <__assert_fail@plt+0x2ee00>
   46ec4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   46ec8:	mov	r7, r0
   46ecc:	sub	lr, fp, #1024	; 0x400
   46ed0:	sub	r0, lr, #56	; 0x38
   46ed4:	cmp	r7, #0
   46ed8:	str	r7, [r0, r8, lsl #2]
   46edc:	bne	46ee8 <__assert_fail@plt+0x3446c>
   46ee0:	cmp	r1, #0
   46ee4:	bne	47188 <__assert_fail@plt+0x3470c>
   46ee8:	ldrsb	r0, [r7, #52]	; 0x34
   46eec:	cmn	r0, #1
   46ef0:	ble	46f10 <__assert_fail@plt+0x34494>
   46ef4:	sub	lr, fp, #3072	; 0xc00
   46ef8:	sub	r0, lr, #56	; 0x38
   46efc:	sub	lr, fp, #2048	; 0x800
   46f00:	str	r7, [r0, r8, lsl #2]
   46f04:	sub	r0, lr, #56	; 0x38
   46f08:	str	r7, [r0, r8, lsl #2]
   46f0c:	b	46fa4 <__assert_fail@plt+0x34528>
   46f10:	sub	lr, fp, #3072	; 0xc00
   46f14:	sub	r0, fp, #56	; 0x38
   46f18:	mov	r1, sl
   46f1c:	mov	r3, #1
   46f20:	sub	r2, lr, #68	; 0x44
   46f24:	bl	4187c <__assert_fail@plt+0x2ee00>
   46f28:	sub	lr, fp, #2048	; 0x800
   46f2c:	cmp	r0, #0
   46f30:	sub	r1, lr, #56	; 0x38
   46f34:	str	r0, [r1, r8, lsl #2]
   46f38:	bne	46f48 <__assert_fail@plt+0x344cc>
   46f3c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   46f40:	cmp	r1, #0
   46f44:	bne	47188 <__assert_fail@plt+0x3470c>
   46f48:	cmp	r7, r0
   46f4c:	beq	46f6c <__assert_fail@plt+0x344f0>
   46f50:	ldr	r0, [sl, #92]	; 0x5c
   46f54:	ldr	r1, [sp, #124]	; 0x7c
   46f58:	cmp	r0, #1
   46f5c:	mov	r0, #0
   46f60:	movwgt	r0, #1
   46f64:	orr	r1, r1, r0
   46f68:	str	r1, [sp, #124]	; 0x7c
   46f6c:	sub	lr, fp, #3072	; 0xc00
   46f70:	sub	r0, fp, #56	; 0x38
   46f74:	mov	r1, sl
   46f78:	mov	r3, #2
   46f7c:	sub	r2, lr, #68	; 0x44
   46f80:	bl	4187c <__assert_fail@plt+0x2ee00>
   46f84:	sub	lr, fp, #3072	; 0xc00
   46f88:	cmp	r0, #0
   46f8c:	sub	r1, lr, #56	; 0x38
   46f90:	str	r0, [r1, r8, lsl #2]
   46f94:	ldr	r1, [fp, #-56]	; 0xffffffc8
   46f98:	bne	46fa4 <__assert_fail@plt+0x34528>
   46f9c:	cmp	r1, #0
   46fa0:	bne	47188 <__assert_fail@plt+0x3470c>
   46fa4:	ldr	r0, [r4, r8, lsl #5]
   46fa8:	ldr	r2, [sp, #148]	; 0x94
   46fac:	ldr	sl, [sp, #16]
   46fb0:	orr	r2, r2, r0
   46fb4:	add	r0, r4, r8, lsl #5
   46fb8:	add	r8, r8, #1
   46fbc:	str	r2, [sp, #148]	; 0x94
   46fc0:	ldr	r2, [r0, #24]
   46fc4:	ldr	ip, [r0, #4]
   46fc8:	ldr	r3, [r0, #8]
   46fcc:	ldr	r7, [r0, #12]
   46fd0:	ldr	r5, [r0, #16]
   46fd4:	ldr	r4, [r0, #20]
   46fd8:	ldr	r0, [r0, #28]
   46fdc:	orr	r9, r9, r0
   46fe0:	ldr	r0, [sp, #152]	; 0x98
   46fe4:	orr	r6, r6, r2
   46fe8:	ldr	r2, [sp, #140]	; 0x8c
   46fec:	orr	r0, r0, r5
   46ff0:	orr	r2, r2, r4
   46ff4:	add	r4, sp, #160	; 0xa0
   46ff8:	str	r0, [sp, #152]	; 0x98
   46ffc:	ldr	r0, [sp, #136]	; 0x88
   47000:	orr	r0, r0, r7
   47004:	mov	r7, r0
   47008:	ldr	r0, [sp, #132]	; 0x84
   4700c:	orr	r0, r0, r3
   47010:	mov	r3, r0
   47014:	ldr	r0, [sp, #144]	; 0x90
   47018:	orr	r0, r0, ip
   4701c:	str	r0, [sp, #144]	; 0x90
   47020:	ldr	r0, [sp, #156]	; 0x9c
   47024:	cmp	r8, r0
   47028:	blt	46e18 <__assert_fail@plt+0x3439c>
   4702c:	ldr	r0, [sp, #144]	; 0x90
   47030:	ldr	r8, [sp, #124]	; 0x7c
   47034:	str	r0, [fp, #-3172]	; 0xfffff39c
   47038:	ldr	r0, [sp, #148]	; 0x94
   4703c:	tst	r8, #1
   47040:	str	r0, [fp, #-3176]	; 0xfffff398
   47044:	ldr	r0, [sp, #152]	; 0x98
   47048:	str	r3, [fp, #-3168]	; 0xfffff3a0
   4704c:	str	r7, [fp, #-3164]	; 0xfffff3a4
   47050:	str	r0, [fp, #-3160]	; 0xfffff3a8
   47054:	mov	r0, #4
   47058:	str	r2, [fp, #-3156]	; 0xfffff3ac
   4705c:	str	r6, [fp, #-3152]	; 0xfffff3b0
   47060:	str	r9, [fp, #-3148]	; 0xfffff3b4
   47064:	bne	477b0 <__assert_fail@plt+0x34d34>
   47068:	mov	r1, #256	; 0x100
   4706c:	bl	325e0 <__assert_fail@plt+0x1fb64>
   47070:	ldr	r1, [sp, #88]	; 0x58
   47074:	ldr	r5, [sp, #156]	; 0x9c
   47078:	cmp	r0, #0
   4707c:	str	r0, [r1, #44]	; 0x2c
   47080:	beq	470ec <__assert_fail@plt+0x34670>
   47084:	ldr	ip, [fp, #-3176]	; 0xfffff398
   47088:	mov	r9, r5
   4708c:	cmp	ip, #0
   47090:	beq	472a4 <__assert_fail@plt+0x34828>
   47094:	mov	r2, #0
   47098:	mov	r3, #1
   4709c:	mov	r1, ip
   470a0:	mov	r7, #0
   470a4:	b	47284 <__assert_fail@plt+0x34808>
   470a8:	ldr	r1, [sp, #144]	; 0x90
   470ac:	str	r0, [fp, #-56]	; 0xffffffc8
   470b0:	str	r1, [fp, #-3172]	; 0xfffff39c
   470b4:	ldr	r1, [sp, #148]	; 0x94
   470b8:	str	r1, [fp, #-3176]	; 0xfffff398
   470bc:	ldr	r1, [sp, #132]	; 0x84
   470c0:	str	r1, [fp, #-3168]	; 0xfffff3a0
   470c4:	ldr	r1, [sp, #136]	; 0x88
   470c8:	str	r1, [fp, #-3164]	; 0xfffff3a4
   470cc:	ldr	r1, [sp, #152]	; 0x98
   470d0:	str	r1, [fp, #-3160]	; 0xfffff3a8
   470d4:	ldr	r1, [sp, #140]	; 0x8c
   470d8:	str	r1, [fp, #-3156]	; 0xfffff3ac
   470dc:	ldr	r1, [sp, #128]	; 0x80
   470e0:	str	r6, [fp, #-3152]	; 0xfffff3b0
   470e4:	str	r1, [fp, #-3148]	; 0xfffff3b4
   470e8:	ldr	r5, [sp, #156]	; 0x9c
   470ec:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   470f0:	bl	32c40 <__assert_fail@plt+0x201c4>
   470f4:	cmp	r5, #1
   470f8:	blt	4712c <__assert_fail@plt+0x346b0>
   470fc:	sub	lr, fp, #6144	; 0x1800
   47100:	sub	r0, lr, #104	; 0x68
   47104:	add	r4, r0, #8
   47108:	ldr	r0, [r4], #12
   4710c:	bl	32c40 <__assert_fail@plt+0x201c4>
   47110:	subs	r5, r5, #1
   47114:	bne	47108 <__assert_fail@plt+0x3468c>
   47118:	mov	r0, #0
   4711c:	sub	sp, fp, #48	; 0x30
   47120:	vpop	{d8-d9}
   47124:	add	sp, sp, #4
   47128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4712c:	mov	r0, #0
   47130:	sub	sp, fp, #48	; 0x30
   47134:	vpop	{d8-d9}
   47138:	add	sp, sp, #4
   4713c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47140:	ldr	r0, [sp, #124]	; 0x7c
   47144:	str	r0, [fp, #-1072]	; 0xfffffbd0
   47148:	ldr	r0, [sp, #128]	; 0x80
   4714c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   47150:	ldr	r0, [sp, #132]	; 0x84
   47154:	str	r0, [fp, #-1068]	; 0xfffffbd4
   47158:	ldr	r0, [sp, #44]	; 0x2c
   4715c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   47160:	ldr	r0, [sp, #36]	; 0x24
   47164:	str	r7, [fp, #-1060]	; 0xfffffbdc
   47168:	str	r0, [fp, #-1056]	; 0xfffffbe0
   4716c:	ldr	r0, [sp, #32]
   47170:	str	r0, [fp, #-1052]	; 0xfffffbe4
   47174:	ldr	r0, [sp, #136]	; 0x88
   47178:	str	r0, [fp, #-1080]	; 0xfffffbc8
   4717c:	cmp	r5, #1
   47180:	bge	47720 <__assert_fail@plt+0x34ca4>
   47184:	b	4773c <__assert_fail@plt+0x34cc0>
   47188:	ldr	r0, [sp, #144]	; 0x90
   4718c:	str	r0, [fp, #-3172]	; 0xfffff39c
   47190:	ldr	r0, [sp, #148]	; 0x94
   47194:	str	r0, [fp, #-3176]	; 0xfffff398
   47198:	ldr	r0, [sp, #132]	; 0x84
   4719c:	str	r0, [fp, #-3168]	; 0xfffff3a0
   471a0:	ldr	r0, [sp, #136]	; 0x88
   471a4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   471a8:	ldr	r0, [sp, #152]	; 0x98
   471ac:	str	r0, [fp, #-3160]	; 0xfffff3a8
   471b0:	ldr	r0, [sp, #140]	; 0x8c
   471b4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   471b8:	str	r6, [fp, #-3152]	; 0xfffff3b0
   471bc:	str	r9, [fp, #-3148]	; 0xfffff3b4
   471c0:	b	470e8 <__assert_fail@plt+0x3466c>
   471c4:	ldr	r0, [sp, #48]	; 0x30
   471c8:	ldr	r5, [sp, #156]	; 0x9c
   471cc:	str	r0, [fp, #-1076]	; 0xfffffbcc
   471d0:	ldr	r0, [sp, #64]	; 0x40
   471d4:	str	r0, [fp, #-1080]	; 0xfffffbc8
   471d8:	ldr	r0, [sp, #60]	; 0x3c
   471dc:	str	r0, [fp, #-1072]	; 0xfffffbd0
   471e0:	ldr	r0, [sp, #56]	; 0x38
   471e4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   471e8:	ldr	r0, [sp, #52]	; 0x34
   471ec:	str	r0, [fp, #-1064]	; 0xfffffbd8
   471f0:	cmp	r5, #1
   471f4:	bge	47720 <__assert_fail@plt+0x34ca4>
   471f8:	b	4773c <__assert_fail@plt+0x34cc0>
   471fc:	ldr	r0, [sp, #124]	; 0x7c
   47200:	mov	r5, r8
   47204:	str	r0, [fp, #-1072]	; 0xfffffbd0
   47208:	ldr	r0, [sp, #128]	; 0x80
   4720c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   47210:	ldr	r0, [sp, #132]	; 0x84
   47214:	str	r0, [fp, #-1068]	; 0xfffffbd4
   47218:	ldr	r0, [sp, #44]	; 0x2c
   4721c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   47220:	ldr	r0, [sp, #36]	; 0x24
   47224:	str	r7, [fp, #-1060]	; 0xfffffbdc
   47228:	str	r0, [fp, #-1056]	; 0xfffffbe0
   4722c:	ldr	r0, [sp, #32]
   47230:	str	r0, [fp, #-1052]	; 0xfffffbe4
   47234:	ldr	r0, [sp, #136]	; 0x88
   47238:	str	r0, [fp, #-1080]	; 0xfffffbc8
   4723c:	b	47700 <__assert_fail@plt+0x34c84>
   47240:	mov	lr, #0
   47244:	ldr	r5, [r4, lr, lsl #3]
   47248:	add	lr, lr, #4
   4724c:	tst	r5, r3
   47250:	beq	47244 <__assert_fail@plt+0x347c8>
   47254:	ldr	r5, [sp]
   47258:	sub	r6, fp, #1024	; 0x400
   4725c:	sub	r6, r6, #56	; 0x38
   47260:	ldr	r5, [r5]
   47264:	tst	r5, r3
   47268:	sub	r5, fp, #2048	; 0x800
   4726c:	sub	r5, r5, #56	; 0x38
   47270:	moveq	r5, r6
   47274:	add	r6, r5, lr
   47278:	ldr	r6, [r6, #-4]
   4727c:	str	r6, [r0, r7, lsl #2]
   47280:	b	4728c <__assert_fail@plt+0x34810>
   47284:	tst	r1, #1
   47288:	bne	47240 <__assert_fail@plt+0x347c4>
   4728c:	lsr	r6, r1, #1
   47290:	cmp	r2, r1, lsr #1
   47294:	add	r7, r7, #1
   47298:	lsl	r3, r3, #1
   4729c:	mov	r1, r6
   472a0:	bne	47284 <__assert_fail@plt+0x34808>
   472a4:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   472a8:	cmp	r2, #0
   472ac:	beq	4732c <__assert_fail@plt+0x348b0>
   472b0:	add	lr, r4, #4
   472b4:	mov	r7, #32
   472b8:	mov	r6, #1
   472bc:	mov	r5, #0
   472c0:	b	4730c <__assert_fail@plt+0x34890>
   472c4:	mov	r1, #0
   472c8:	ldr	r4, [lr, r1, lsl #3]
   472cc:	add	r1, r1, #4
   472d0:	tst	r4, r6
   472d4:	beq	472c8 <__assert_fail@plt+0x3484c>
   472d8:	ldr	r3, [sp, #16]
   472dc:	ldr	r4, [r3, #100]	; 0x64
   472e0:	sub	r3, fp, #2048	; 0x800
   472e4:	tst	r4, r6
   472e8:	sub	r4, r3, #56	; 0x38
   472ec:	sub	r3, fp, #1024	; 0x400
   472f0:	sub	r3, r3, #56	; 0x38
   472f4:	moveq	r4, r3
   472f8:	add	r1, r4, r1
   472fc:	add	r4, sp, #160	; 0xa0
   47300:	ldr	r1, [r1, #-4]
   47304:	str	r1, [r0, r7, lsl #2]
   47308:	b	47314 <__assert_fail@plt+0x34898>
   4730c:	tst	r2, #1
   47310:	bne	472c4 <__assert_fail@plt+0x34848>
   47314:	lsr	r1, r2, #1
   47318:	cmp	r5, r2, lsr #1
   4731c:	add	r7, r7, #1
   47320:	lsl	r6, r6, #1
   47324:	mov	r2, r1
   47328:	bne	4730c <__assert_fail@plt+0x34890>
   4732c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   47330:	cmp	r2, #0
   47334:	beq	473b4 <__assert_fail@plt+0x34938>
   47338:	add	lr, r4, #8
   4733c:	mov	r7, #64	; 0x40
   47340:	mov	r6, #1
   47344:	mov	r5, #0
   47348:	b	47394 <__assert_fail@plt+0x34918>
   4734c:	mov	r1, #0
   47350:	ldr	r4, [lr, r1, lsl #3]
   47354:	add	r1, r1, #4
   47358:	tst	r4, r6
   4735c:	beq	47350 <__assert_fail@plt+0x348d4>
   47360:	ldr	r3, [sp, #16]
   47364:	ldr	r4, [r3, #104]	; 0x68
   47368:	sub	r3, fp, #2048	; 0x800
   4736c:	tst	r4, r6
   47370:	sub	r4, r3, #56	; 0x38
   47374:	sub	r3, fp, #1024	; 0x400
   47378:	sub	r3, r3, #56	; 0x38
   4737c:	moveq	r4, r3
   47380:	add	r1, r4, r1
   47384:	add	r4, sp, #160	; 0xa0
   47388:	ldr	r1, [r1, #-4]
   4738c:	str	r1, [r0, r7, lsl #2]
   47390:	b	4739c <__assert_fail@plt+0x34920>
   47394:	tst	r2, #1
   47398:	bne	4734c <__assert_fail@plt+0x348d0>
   4739c:	lsr	r1, r2, #1
   473a0:	cmp	r5, r2, lsr #1
   473a4:	add	r7, r7, #1
   473a8:	lsl	r6, r6, #1
   473ac:	mov	r2, r1
   473b0:	bne	47394 <__assert_fail@plt+0x34918>
   473b4:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   473b8:	cmp	r2, #0
   473bc:	beq	4743c <__assert_fail@plt+0x349c0>
   473c0:	add	lr, r4, #12
   473c4:	mov	r7, #96	; 0x60
   473c8:	mov	r6, #1
   473cc:	mov	r5, #0
   473d0:	b	4741c <__assert_fail@plt+0x349a0>
   473d4:	mov	r1, #0
   473d8:	ldr	r4, [lr, r1, lsl #3]
   473dc:	add	r1, r1, #4
   473e0:	tst	r4, r6
   473e4:	beq	473d8 <__assert_fail@plt+0x3495c>
   473e8:	ldr	r3, [sp, #16]
   473ec:	ldr	r4, [r3, #108]	; 0x6c
   473f0:	sub	r3, fp, #2048	; 0x800
   473f4:	tst	r4, r6
   473f8:	sub	r4, r3, #56	; 0x38
   473fc:	sub	r3, fp, #1024	; 0x400
   47400:	sub	r3, r3, #56	; 0x38
   47404:	moveq	r4, r3
   47408:	add	r1, r4, r1
   4740c:	add	r4, sp, #160	; 0xa0
   47410:	ldr	r1, [r1, #-4]
   47414:	str	r1, [r0, r7, lsl #2]
   47418:	b	47424 <__assert_fail@plt+0x349a8>
   4741c:	tst	r2, #1
   47420:	bne	473d4 <__assert_fail@plt+0x34958>
   47424:	lsr	r1, r2, #1
   47428:	cmp	r5, r2, lsr #1
   4742c:	add	r7, r7, #1
   47430:	lsl	r6, r6, #1
   47434:	mov	r2, r1
   47438:	bne	4741c <__assert_fail@plt+0x349a0>
   4743c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   47440:	cmp	r2, #0
   47444:	beq	474c4 <__assert_fail@plt+0x34a48>
   47448:	add	lr, r4, #16
   4744c:	mov	r7, #128	; 0x80
   47450:	mov	r6, #1
   47454:	mov	r5, #0
   47458:	b	474a4 <__assert_fail@plt+0x34a28>
   4745c:	mov	r1, #0
   47460:	ldr	r4, [lr, r1, lsl #3]
   47464:	add	r1, r1, #4
   47468:	tst	r4, r6
   4746c:	beq	47460 <__assert_fail@plt+0x349e4>
   47470:	ldr	r3, [sp, #4]
   47474:	ldr	r4, [r3]
   47478:	sub	r3, fp, #2048	; 0x800
   4747c:	tst	r4, r6
   47480:	sub	r4, r3, #56	; 0x38
   47484:	sub	r3, fp, #1024	; 0x400
   47488:	sub	r3, r3, #56	; 0x38
   4748c:	moveq	r4, r3
   47490:	add	r1, r4, r1
   47494:	add	r4, sp, #160	; 0xa0
   47498:	ldr	r1, [r1, #-4]
   4749c:	str	r1, [r0, r7, lsl #2]
   474a0:	b	474ac <__assert_fail@plt+0x34a30>
   474a4:	tst	r2, #1
   474a8:	bne	4745c <__assert_fail@plt+0x349e0>
   474ac:	lsr	r1, r2, #1
   474b0:	cmp	r5, r2, lsr #1
   474b4:	add	r7, r7, #1
   474b8:	lsl	r6, r6, #1
   474bc:	mov	r2, r1
   474c0:	bne	474a4 <__assert_fail@plt+0x34a28>
   474c4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   474c8:	cmp	r2, #0
   474cc:	beq	4754c <__assert_fail@plt+0x34ad0>
   474d0:	add	lr, r4, #20
   474d4:	mov	r7, #160	; 0xa0
   474d8:	mov	r6, #1
   474dc:	mov	r5, #0
   474e0:	b	4752c <__assert_fail@plt+0x34ab0>
   474e4:	mov	r1, #0
   474e8:	ldr	r4, [lr, r1, lsl #3]
   474ec:	add	r1, r1, #4
   474f0:	tst	r4, r6
   474f4:	beq	474e8 <__assert_fail@plt+0x34a6c>
   474f8:	ldr	r3, [sp, #16]
   474fc:	ldr	r4, [r3, #116]	; 0x74
   47500:	sub	r3, fp, #2048	; 0x800
   47504:	tst	r4, r6
   47508:	sub	r4, r3, #56	; 0x38
   4750c:	sub	r3, fp, #1024	; 0x400
   47510:	sub	r3, r3, #56	; 0x38
   47514:	moveq	r4, r3
   47518:	add	r1, r4, r1
   4751c:	add	r4, sp, #160	; 0xa0
   47520:	ldr	r1, [r1, #-4]
   47524:	str	r1, [r0, r7, lsl #2]
   47528:	b	47534 <__assert_fail@plt+0x34ab8>
   4752c:	tst	r2, #1
   47530:	bne	474e4 <__assert_fail@plt+0x34a68>
   47534:	lsr	r1, r2, #1
   47538:	cmp	r5, r2, lsr #1
   4753c:	add	r7, r7, #1
   47540:	lsl	r6, r6, #1
   47544:	mov	r2, r1
   47548:	bne	4752c <__assert_fail@plt+0x34ab0>
   4754c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   47550:	cmp	r2, #0
   47554:	beq	475d4 <__assert_fail@plt+0x34b58>
   47558:	add	lr, r4, #24
   4755c:	mov	r7, #192	; 0xc0
   47560:	mov	r6, #1
   47564:	mov	r5, #0
   47568:	b	475b4 <__assert_fail@plt+0x34b38>
   4756c:	mov	r1, #0
   47570:	ldr	r4, [lr, r1, lsl #3]
   47574:	add	r1, r1, #4
   47578:	tst	r4, r6
   4757c:	beq	47570 <__assert_fail@plt+0x34af4>
   47580:	ldr	r3, [sp, #16]
   47584:	ldr	r4, [r3, #120]	; 0x78
   47588:	sub	r3, fp, #2048	; 0x800
   4758c:	tst	r4, r6
   47590:	sub	r4, r3, #56	; 0x38
   47594:	sub	r3, fp, #1024	; 0x400
   47598:	sub	r3, r3, #56	; 0x38
   4759c:	moveq	r4, r3
   475a0:	add	r1, r4, r1
   475a4:	add	r4, sp, #160	; 0xa0
   475a8:	ldr	r1, [r1, #-4]
   475ac:	str	r1, [r0, r7, lsl #2]
   475b0:	b	475bc <__assert_fail@plt+0x34b40>
   475b4:	tst	r2, #1
   475b8:	bne	4756c <__assert_fail@plt+0x34af0>
   475bc:	lsr	r1, r2, #1
   475c0:	cmp	r5, r2, lsr #1
   475c4:	add	r7, r7, #1
   475c8:	lsl	r6, r6, #1
   475cc:	mov	r2, r1
   475d0:	bne	475b4 <__assert_fail@plt+0x34b38>
   475d4:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   475d8:	cmp	r2, #0
   475dc:	beq	47658 <__assert_fail@plt+0x34bdc>
   475e0:	mov	r3, #224	; 0xe0
   475e4:	mov	r7, #1
   475e8:	mov	r6, #0
   475ec:	b	47638 <__assert_fail@plt+0x34bbc>
   475f0:	ldr	r1, [sp, #12]
   475f4:	mov	lr, #0
   475f8:	ldr	r5, [r1, lr, lsl #3]
   475fc:	add	lr, lr, #4
   47600:	tst	r5, r7
   47604:	beq	475f8 <__assert_fail@plt+0x34b7c>
   47608:	ldr	r1, [sp, #16]
   4760c:	ldr	r5, [r1, #124]	; 0x7c
   47610:	sub	r1, fp, #2048	; 0x800
   47614:	tst	r5, r7
   47618:	sub	r5, r1, #56	; 0x38
   4761c:	sub	r1, fp, #1024	; 0x400
   47620:	sub	r1, r1, #56	; 0x38
   47624:	moveq	r5, r1
   47628:	add	r1, r5, lr
   4762c:	ldr	r1, [r1, #-4]
   47630:	str	r1, [r0, r3, lsl #2]
   47634:	b	47640 <__assert_fail@plt+0x34bc4>
   47638:	tst	r2, #1
   4763c:	bne	475f0 <__assert_fail@plt+0x34b74>
   47640:	lsr	r1, r2, #1
   47644:	cmp	r6, r2, lsr #1
   47648:	add	r3, r3, #1
   4764c:	lsl	r7, r7, #1
   47650:	mov	r2, r1
   47654:	bne	47638 <__assert_fail@plt+0x34bbc>
   47658:	tst	ip, #1024	; 0x400
   4765c:	beq	4769c <__assert_fail@plt+0x34c20>
   47660:	mov	r1, #0
   47664:	add	r2, r4, r1, lsl #5
   47668:	ldrb	r2, [r2, #1]
   4766c:	tst	r2, #4
   47670:	bne	47684 <__assert_fail@plt+0x34c08>
   47674:	add	r1, r1, #1
   47678:	cmp	r1, r9
   4767c:	blt	47664 <__assert_fail@plt+0x34be8>
   47680:	b	4769c <__assert_fail@plt+0x34c20>
   47684:	sub	lr, fp, #3072	; 0xc00
   47688:	tst	r8, #1
   4768c:	sub	r2, lr, #56	; 0x38
   47690:	ldr	r1, [r2, r1, lsl #2]
   47694:	str	r1, [r0, #40]	; 0x28
   47698:	strne	r1, [r0, #1064]	; 0x428
   4769c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   476a0:	bl	32c40 <__assert_fail@plt+0x201c4>
   476a4:	sub	lr, fp, #6144	; 0x1800
   476a8:	sub	r0, lr, #104	; 0x68
   476ac:	add	r4, r0, #8
   476b0:	ldr	r0, [r4], #12
   476b4:	bl	32c40 <__assert_fail@plt+0x201c4>
   476b8:	subs	r9, r9, #1
   476bc:	bne	476b0 <__assert_fail@plt+0x34c34>
   476c0:	mov	r0, #1
   476c4:	sub	sp, fp, #48	; 0x30
   476c8:	vpop	{d8-d9}
   476cc:	add	sp, sp, #4
   476d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   476d4:	ldr	r0, [sp, #48]	; 0x30
   476d8:	ldr	r5, [sp, #156]	; 0x9c
   476dc:	str	r0, [fp, #-1076]	; 0xfffffbcc
   476e0:	ldr	r0, [sp, #64]	; 0x40
   476e4:	str	r0, [fp, #-1080]	; 0xfffffbc8
   476e8:	ldr	r0, [sp, #60]	; 0x3c
   476ec:	str	r0, [fp, #-1072]	; 0xfffffbd0
   476f0:	ldr	r0, [sp, #56]	; 0x38
   476f4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   476f8:	ldr	r0, [sp, #52]	; 0x34
   476fc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   47700:	sub	lr, fp, #6144	; 0x1800
   47704:	mov	r0, #0
   47708:	add	r1, r5, r5, lsl #1
   4770c:	sub	r2, lr, #104	; 0x68
   47710:	str	r0, [r4]
   47714:	str	r0, [r2, r1, lsl #2]
   47718:	cmp	r5, #1
   4771c:	blt	4773c <__assert_fail@plt+0x34cc0>
   47720:	sub	lr, fp, #6144	; 0x1800
   47724:	sub	r0, lr, #104	; 0x68
   47728:	add	r4, r0, #8
   4772c:	ldr	r0, [r4], #12
   47730:	bl	32c40 <__assert_fail@plt+0x201c4>
   47734:	subs	r5, r5, #1
   47738:	bne	4772c <__assert_fail@plt+0x34cb0>
   4773c:	mvn	r5, #0
   47740:	mov	r0, #0
   47744:	cmp	r5, #0
   47748:	beq	4775c <__assert_fail@plt+0x34ce0>
   4774c:	sub	sp, fp, #48	; 0x30
   47750:	vpop	{d8-d9}
   47754:	add	sp, sp, #4
   47758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4775c:	mov	r0, #4
   47760:	mov	r1, #256	; 0x100
   47764:	bl	325e0 <__assert_fail@plt+0x1fb64>
   47768:	ldr	r1, [sp, #88]	; 0x58
   4776c:	cmp	r0, #0
   47770:	str	r0, [r1, #44]	; 0x2c
   47774:	movwne	r0, #1
   47778:	sub	sp, fp, #48	; 0x30
   4777c:	vpop	{d8-d9}
   47780:	add	sp, sp, #4
   47784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47788:	mov	r0, #0
   4778c:	str	r0, [r6]
   47790:	str	r0, [r5]
   47794:	mov	r5, r4
   47798:	cmp	r5, #1
   4779c:	bge	47720 <__assert_fail@plt+0x34ca4>
   477a0:	b	4773c <__assert_fail@plt+0x34cc0>
   477a4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   477a8:	bl	32c40 <__assert_fail@plt+0x201c4>
   477ac:	b	470fc <__assert_fail@plt+0x34680>
   477b0:	mov	r1, #512	; 0x200
   477b4:	bl	325e0 <__assert_fail@plt+0x1fb64>
   477b8:	ldr	r1, [sp, #88]	; 0x58
   477bc:	ldr	r5, [sp, #156]	; 0x9c
   477c0:	cmp	r0, #0
   477c4:	str	r0, [r1, #48]	; 0x30
   477c8:	beq	470ec <__assert_fail@plt+0x34670>
   477cc:	ldr	ip, [fp, #-3176]	; 0xfffff398
   477d0:	mov	r9, r5
   477d4:	cmp	ip, #0
   477d8:	beq	47864 <__assert_fail@plt+0x34de8>
   477dc:	sub	lr, fp, #1024	; 0x400
   477e0:	mov	r7, #0
   477e4:	mov	r6, #1
   477e8:	mov	r5, #0
   477ec:	sub	r1, lr, #56	; 0x38
   477f0:	sub	lr, fp, #2048	; 0x800
   477f4:	sub	r4, r1, #4
   477f8:	sub	r1, lr, #56	; 0x38
   477fc:	sub	lr, r1, #4
   47800:	mov	r1, ip
   47804:	b	47844 <__assert_fail@plt+0x34dc8>
   47808:	add	r3, sp, #160	; 0xa0
   4780c:	mov	r9, r4
   47810:	mov	r8, lr
   47814:	ldr	r2, [r3], #32
   47818:	add	r9, r9, #4
   4781c:	add	r8, r8, #4
   47820:	tst	r2, r6
   47824:	beq	47814 <__assert_fail@plt+0x34d98>
   47828:	ldr	r2, [r9]
   4782c:	mov	r3, r0
   47830:	str	r2, [r3, r5, lsl #2]!
   47834:	ldr	r2, [r8]
   47838:	ldr	r9, [sp, #156]	; 0x9c
   4783c:	str	r2, [r3, #1024]	; 0x400
   47840:	b	4784c <__assert_fail@plt+0x34dd0>
   47844:	tst	r1, #1
   47848:	bne	47808 <__assert_fail@plt+0x34d8c>
   4784c:	lsr	r2, r1, #1
   47850:	cmp	r7, r1, lsr #1
   47854:	add	r5, r5, #1
   47858:	lsl	r6, r6, #1
   4785c:	mov	r1, r2
   47860:	bne	47844 <__assert_fail@plt+0x34dc8>
   47864:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   47868:	cmp	r2, #0
   4786c:	beq	478fc <__assert_fail@plt+0x34e80>
   47870:	add	r1, sp, #160	; 0xa0
   47874:	sub	lr, fp, #2048	; 0x800
   47878:	mov	r5, #32
   4787c:	mov	r3, #0
   47880:	add	r4, r1, #4
   47884:	sub	r1, lr, #56	; 0x38
   47888:	sub	lr, r1, #4
   4788c:	sub	r1, fp, #1024	; 0x400
   47890:	sub	r1, r1, #56	; 0x38
   47894:	sub	r8, r1, #4
   47898:	mov	r1, #1
   4789c:	b	478dc <__assert_fail@plt+0x34e60>
   478a0:	mov	r7, r4
   478a4:	mov	r9, lr
   478a8:	mov	sl, r8
   478ac:	ldr	r6, [r7], #32
   478b0:	add	r9, r9, #4
   478b4:	add	sl, sl, #4
   478b8:	tst	r6, r1
   478bc:	beq	478ac <__assert_fail@plt+0x34e30>
   478c0:	ldr	r6, [sl]
   478c4:	mov	r7, r0
   478c8:	str	r6, [r7, r5, lsl #2]!
   478cc:	ldr	r6, [r9]
   478d0:	ldr	r9, [sp, #156]	; 0x9c
   478d4:	str	r6, [r7, #1024]	; 0x400
   478d8:	b	478e4 <__assert_fail@plt+0x34e68>
   478dc:	tst	r2, #1
   478e0:	bne	478a0 <__assert_fail@plt+0x34e24>
   478e4:	lsr	r6, r2, #1
   478e8:	cmp	r3, r2, lsr #1
   478ec:	add	r5, r5, #1
   478f0:	lsl	r1, r1, #1
   478f4:	mov	r2, r6
   478f8:	bne	478dc <__assert_fail@plt+0x34e60>
   478fc:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   47900:	cmp	r2, #0
   47904:	beq	47994 <__assert_fail@plt+0x34f18>
   47908:	add	r1, sp, #160	; 0xa0
   4790c:	sub	lr, fp, #2048	; 0x800
   47910:	mov	r5, #64	; 0x40
   47914:	mov	r3, #0
   47918:	add	r4, r1, #8
   4791c:	sub	r1, lr, #56	; 0x38
   47920:	sub	lr, r1, #4
   47924:	sub	r1, fp, #1024	; 0x400
   47928:	sub	r1, r1, #56	; 0x38
   4792c:	sub	r8, r1, #4
   47930:	mov	r1, #1
   47934:	b	47974 <__assert_fail@plt+0x34ef8>
   47938:	mov	r7, r4
   4793c:	mov	r9, lr
   47940:	mov	sl, r8
   47944:	ldr	r6, [r7], #32
   47948:	add	r9, r9, #4
   4794c:	add	sl, sl, #4
   47950:	tst	r6, r1
   47954:	beq	47944 <__assert_fail@plt+0x34ec8>
   47958:	ldr	r6, [sl]
   4795c:	mov	r7, r0
   47960:	str	r6, [r7, r5, lsl #2]!
   47964:	ldr	r6, [r9]
   47968:	ldr	r9, [sp, #156]	; 0x9c
   4796c:	str	r6, [r7, #1024]	; 0x400
   47970:	b	4797c <__assert_fail@plt+0x34f00>
   47974:	tst	r2, #1
   47978:	bne	47938 <__assert_fail@plt+0x34ebc>
   4797c:	lsr	r6, r2, #1
   47980:	cmp	r3, r2, lsr #1
   47984:	add	r5, r5, #1
   47988:	lsl	r1, r1, #1
   4798c:	mov	r2, r6
   47990:	bne	47974 <__assert_fail@plt+0x34ef8>
   47994:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   47998:	cmp	r2, #0
   4799c:	beq	47a2c <__assert_fail@plt+0x34fb0>
   479a0:	add	r1, sp, #160	; 0xa0
   479a4:	sub	lr, fp, #2048	; 0x800
   479a8:	mov	r5, #96	; 0x60
   479ac:	mov	r3, #0
   479b0:	add	r4, r1, #12
   479b4:	sub	r1, lr, #56	; 0x38
   479b8:	sub	lr, r1, #4
   479bc:	sub	r1, fp, #1024	; 0x400
   479c0:	sub	r1, r1, #56	; 0x38
   479c4:	sub	r8, r1, #4
   479c8:	mov	r1, #1
   479cc:	b	47a0c <__assert_fail@plt+0x34f90>
   479d0:	mov	r7, r4
   479d4:	mov	r9, lr
   479d8:	mov	sl, r8
   479dc:	ldr	r6, [r7], #32
   479e0:	add	r9, r9, #4
   479e4:	add	sl, sl, #4
   479e8:	tst	r6, r1
   479ec:	beq	479dc <__assert_fail@plt+0x34f60>
   479f0:	ldr	r6, [sl]
   479f4:	mov	r7, r0
   479f8:	str	r6, [r7, r5, lsl #2]!
   479fc:	ldr	r6, [r9]
   47a00:	ldr	r9, [sp, #156]	; 0x9c
   47a04:	str	r6, [r7, #1024]	; 0x400
   47a08:	b	47a14 <__assert_fail@plt+0x34f98>
   47a0c:	tst	r2, #1
   47a10:	bne	479d0 <__assert_fail@plt+0x34f54>
   47a14:	lsr	r6, r2, #1
   47a18:	cmp	r3, r2, lsr #1
   47a1c:	add	r5, r5, #1
   47a20:	lsl	r1, r1, #1
   47a24:	mov	r2, r6
   47a28:	bne	47a0c <__assert_fail@plt+0x34f90>
   47a2c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   47a30:	cmp	r2, #0
   47a34:	beq	47ac4 <__assert_fail@plt+0x35048>
   47a38:	add	r1, sp, #160	; 0xa0
   47a3c:	sub	lr, fp, #2048	; 0x800
   47a40:	mov	r5, #128	; 0x80
   47a44:	mov	r3, #0
   47a48:	add	r4, r1, #16
   47a4c:	sub	r1, lr, #56	; 0x38
   47a50:	sub	lr, r1, #4
   47a54:	sub	r1, fp, #1024	; 0x400
   47a58:	sub	r1, r1, #56	; 0x38
   47a5c:	sub	r8, r1, #4
   47a60:	mov	r1, #1
   47a64:	b	47aa4 <__assert_fail@plt+0x35028>
   47a68:	mov	r7, r4
   47a6c:	mov	r9, lr
   47a70:	mov	sl, r8
   47a74:	ldr	r6, [r7], #32
   47a78:	add	r9, r9, #4
   47a7c:	add	sl, sl, #4
   47a80:	tst	r6, r1
   47a84:	beq	47a74 <__assert_fail@plt+0x34ff8>
   47a88:	ldr	r6, [sl]
   47a8c:	mov	r7, r0
   47a90:	str	r6, [r7, r5, lsl #2]!
   47a94:	ldr	r6, [r9]
   47a98:	ldr	r9, [sp, #156]	; 0x9c
   47a9c:	str	r6, [r7, #1024]	; 0x400
   47aa0:	b	47aac <__assert_fail@plt+0x35030>
   47aa4:	tst	r2, #1
   47aa8:	bne	47a68 <__assert_fail@plt+0x34fec>
   47aac:	lsr	r6, r2, #1
   47ab0:	cmp	r3, r2, lsr #1
   47ab4:	add	r5, r5, #1
   47ab8:	lsl	r1, r1, #1
   47abc:	mov	r2, r6
   47ac0:	bne	47aa4 <__assert_fail@plt+0x35028>
   47ac4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   47ac8:	cmp	r2, #0
   47acc:	beq	47b5c <__assert_fail@plt+0x350e0>
   47ad0:	add	r1, sp, #160	; 0xa0
   47ad4:	sub	lr, fp, #2048	; 0x800
   47ad8:	mov	r5, #160	; 0xa0
   47adc:	mov	r3, #0
   47ae0:	add	r4, r1, #20
   47ae4:	sub	r1, lr, #56	; 0x38
   47ae8:	sub	lr, r1, #4
   47aec:	sub	r1, fp, #1024	; 0x400
   47af0:	sub	r1, r1, #56	; 0x38
   47af4:	sub	r8, r1, #4
   47af8:	mov	r1, #1
   47afc:	b	47b3c <__assert_fail@plt+0x350c0>
   47b00:	mov	r7, r4
   47b04:	mov	r9, lr
   47b08:	mov	sl, r8
   47b0c:	ldr	r6, [r7], #32
   47b10:	add	r9, r9, #4
   47b14:	add	sl, sl, #4
   47b18:	tst	r6, r1
   47b1c:	beq	47b0c <__assert_fail@plt+0x35090>
   47b20:	ldr	r6, [sl]
   47b24:	mov	r7, r0
   47b28:	str	r6, [r7, r5, lsl #2]!
   47b2c:	ldr	r6, [r9]
   47b30:	ldr	r9, [sp, #156]	; 0x9c
   47b34:	str	r6, [r7, #1024]	; 0x400
   47b38:	b	47b44 <__assert_fail@plt+0x350c8>
   47b3c:	tst	r2, #1
   47b40:	bne	47b00 <__assert_fail@plt+0x35084>
   47b44:	lsr	r6, r2, #1
   47b48:	cmp	r3, r2, lsr #1
   47b4c:	add	r5, r5, #1
   47b50:	lsl	r1, r1, #1
   47b54:	mov	r2, r6
   47b58:	bne	47b3c <__assert_fail@plt+0x350c0>
   47b5c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   47b60:	cmp	r2, #0
   47b64:	beq	47bf4 <__assert_fail@plt+0x35178>
   47b68:	add	r1, sp, #160	; 0xa0
   47b6c:	sub	lr, fp, #2048	; 0x800
   47b70:	mov	r5, #192	; 0xc0
   47b74:	mov	r3, #0
   47b78:	add	r4, r1, #24
   47b7c:	sub	r1, lr, #56	; 0x38
   47b80:	sub	lr, r1, #4
   47b84:	sub	r1, fp, #1024	; 0x400
   47b88:	sub	r1, r1, #56	; 0x38
   47b8c:	sub	r8, r1, #4
   47b90:	mov	r1, #1
   47b94:	b	47bd4 <__assert_fail@plt+0x35158>
   47b98:	mov	r7, r4
   47b9c:	mov	r9, lr
   47ba0:	mov	sl, r8
   47ba4:	ldr	r6, [r7], #32
   47ba8:	add	r9, r9, #4
   47bac:	add	sl, sl, #4
   47bb0:	tst	r6, r1
   47bb4:	beq	47ba4 <__assert_fail@plt+0x35128>
   47bb8:	ldr	r6, [sl]
   47bbc:	mov	r7, r0
   47bc0:	str	r6, [r7, r5, lsl #2]!
   47bc4:	ldr	r6, [r9]
   47bc8:	ldr	r9, [sp, #156]	; 0x9c
   47bcc:	str	r6, [r7, #1024]	; 0x400
   47bd0:	b	47bdc <__assert_fail@plt+0x35160>
   47bd4:	tst	r2, #1
   47bd8:	bne	47b98 <__assert_fail@plt+0x3511c>
   47bdc:	lsr	r6, r2, #1
   47be0:	cmp	r3, r2, lsr #1
   47be4:	add	r5, r5, #1
   47be8:	lsl	r1, r1, #1
   47bec:	mov	r2, r6
   47bf0:	bne	47bd4 <__assert_fail@plt+0x35158>
   47bf4:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   47bf8:	cmp	r2, #0
   47bfc:	beq	47c8c <__assert_fail@plt+0x35210>
   47c00:	add	r1, sp, #160	; 0xa0
   47c04:	sub	lr, fp, #2048	; 0x800
   47c08:	mov	r5, #224	; 0xe0
   47c0c:	mov	r3, #0
   47c10:	add	r4, r1, #28
   47c14:	sub	r1, lr, #56	; 0x38
   47c18:	sub	lr, r1, #4
   47c1c:	sub	r1, fp, #1024	; 0x400
   47c20:	sub	r1, r1, #56	; 0x38
   47c24:	sub	r8, r1, #4
   47c28:	mov	r1, #1
   47c2c:	b	47c6c <__assert_fail@plt+0x351f0>
   47c30:	mov	r7, r4
   47c34:	mov	r9, lr
   47c38:	mov	sl, r8
   47c3c:	ldr	r6, [r7], #32
   47c40:	add	r9, r9, #4
   47c44:	add	sl, sl, #4
   47c48:	tst	r6, r1
   47c4c:	beq	47c3c <__assert_fail@plt+0x351c0>
   47c50:	ldr	r6, [sl]
   47c54:	mov	r7, r0
   47c58:	str	r6, [r7, r5, lsl #2]!
   47c5c:	ldr	r6, [r9]
   47c60:	ldr	r9, [sp, #156]	; 0x9c
   47c64:	str	r6, [r7, #1024]	; 0x400
   47c68:	b	47c74 <__assert_fail@plt+0x351f8>
   47c6c:	tst	r2, #1
   47c70:	bne	47c30 <__assert_fail@plt+0x351b4>
   47c74:	lsr	r6, r2, #1
   47c78:	cmp	r3, r2, lsr #1
   47c7c:	add	r5, r5, #1
   47c80:	lsl	r1, r1, #1
   47c84:	mov	r2, r6
   47c88:	bne	47c6c <__assert_fail@plt+0x351f0>
   47c8c:	ldr	r8, [sp, #124]	; 0x7c
   47c90:	add	r4, sp, #160	; 0xa0
   47c94:	tst	ip, #1024	; 0x400
   47c98:	bne	47660 <__assert_fail@plt+0x34be4>
   47c9c:	b	4769c <__assert_fail@plt+0x34c20>
   47ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47ca4:	add	fp, sp, #28
   47ca8:	sub	sp, sp, #68	; 0x44
   47cac:	ldr	r4, [r1, #8]
   47cb0:	ldr	r6, [r1, #12]
   47cb4:	mov	r8, r0
   47cb8:	mov	r0, #1
   47cbc:	mov	r5, r1
   47cc0:	str	r0, [fp, #-36]	; 0xffffffdc
   47cc4:	str	r0, [fp, #-40]	; 0xffffffd8
   47cc8:	mov	r0, #4
   47ccc:	bl	35608 <__assert_fail@plt+0x22b8c>
   47cd0:	cmp	r0, #0
   47cd4:	str	r0, [fp, #-32]	; 0xffffffe0
   47cd8:	beq	4836c <__assert_fail@plt+0x358f0>
   47cdc:	str	r4, [r0]
   47ce0:	sub	r3, fp, #40	; 0x28
   47ce4:	mov	r0, r8
   47ce8:	mov	r1, r5
   47cec:	mov	r2, r6
   47cf0:	str	r5, [sp, #28]
   47cf4:	bl	48390 <__assert_fail@plt+0x35914>
   47cf8:	cmp	r0, #0
   47cfc:	bne	48324 <__assert_fail@plt+0x358a8>
   47d00:	mov	r4, r6
   47d04:	mov	r9, #1
   47d08:	mov	r1, #0
   47d0c:	str	r8, [sp, #48]	; 0x30
   47d10:	cmp	r4, #1
   47d14:	blt	4832c <__assert_fail@plt+0x358b0>
   47d18:	ldr	lr, [sp, #28]
   47d1c:	ldr	r0, [lr]
   47d20:	ldr	r2, [r0, r4, lsl #2]
   47d24:	cmp	r2, #0
   47d28:	mov	r2, #0
   47d2c:	addeq	r2, r1, #1
   47d30:	ldr	r1, [r8, #120]	; 0x78
   47d34:	cmp	r2, r1
   47d38:	bgt	48334 <__assert_fail@plt+0x358b8>
   47d3c:	mov	r0, #0
   47d40:	str	r4, [sp, #36]	; 0x24
   47d44:	sub	r4, r4, #1
   47d48:	str	r2, [sp, #4]
   47d4c:	str	r0, [fp, #-36]	; 0xffffffdc
   47d50:	ldr	r0, [r8, #100]	; 0x64
   47d54:	ldr	r1, [r0, r4, lsl #2]
   47d58:	cmp	r1, #0
   47d5c:	beq	48304 <__assert_fail@plt+0x35888>
   47d60:	ldr	r0, [r1, #20]
   47d64:	cmp	r0, #1
   47d68:	blt	48304 <__assert_fail@plt+0x35888>
   47d6c:	ldr	r0, [r8, #84]	; 0x54
   47d70:	mov	r2, #0
   47d74:	str	r4, [sp, #32]
   47d78:	str	r1, [sp, #16]
   47d7c:	str	r0, [sp, #24]
   47d80:	b	47e40 <__assert_fail@plt+0x353c4>
   47d84:	cmp	r2, r1
   47d88:	bne	47dc4 <__assert_fail@plt+0x35348>
   47d8c:	lsl	r0, r2, #1
   47d90:	lsl	r1, r2, #3
   47d94:	str	r0, [fp, #-40]	; 0xffffffd8
   47d98:	ldr	r0, [fp, #-32]	; 0xffffffe0
   47d9c:	bl	36328 <__assert_fail@plt+0x238ac>
   47da0:	cmp	r0, #0
   47da4:	beq	48388 <__assert_fail@plt+0x3590c>
   47da8:	str	r0, [fp, #-32]	; 0xffffffe0
   47dac:	ldr	lr, [sp, #28]
   47db0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   47db4:	ldr	r2, [r0]
   47db8:	cmp	r2, r5
   47dbc:	bgt	47dd4 <__assert_fail@plt+0x35358>
   47dc0:	b	47e08 <__assert_fail@plt+0x3538c>
   47dc4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   47dc8:	ldr	r2, [r0]
   47dcc:	cmp	r2, r5
   47dd0:	ble	47e08 <__assert_fail@plt+0x3538c>
   47dd4:	cmp	r1, #1
   47dd8:	blt	47e38 <__assert_fail@plt+0x353bc>
   47ddc:	add	r2, r0, r1, lsl #2
   47de0:	add	r1, r1, #1
   47de4:	mov	r3, r2
   47de8:	ldr	r7, [r3, #-4]!
   47dec:	sub	r1, r1, #1
   47df0:	cmp	r1, #1
   47df4:	str	r7, [r2]
   47df8:	mov	r2, r3
   47dfc:	bgt	47de8 <__assert_fail@plt+0x3536c>
   47e00:	sub	r1, r1, #1
   47e04:	b	47e38 <__assert_fail@plt+0x353bc>
   47e08:	add	r2, r0, r1, lsl #2
   47e0c:	ldr	r3, [r2, #-4]
   47e10:	cmp	r3, r5
   47e14:	ble	47e38 <__assert_fail@plt+0x353bc>
   47e18:	sub	r1, r1, #2
   47e1c:	str	r3, [r2]
   47e20:	sub	r1, r1, #1
   47e24:	ldr	r3, [r2, #-8]
   47e28:	sub	r2, r2, #4
   47e2c:	cmp	r3, r5
   47e30:	bgt	47e1c <__assert_fail@plt+0x353a0>
   47e34:	add	r1, r1, #2
   47e38:	str	r5, [r0, r1, lsl #2]
   47e3c:	b	482b4 <__assert_fail@plt+0x35838>
   47e40:	ldr	r0, [r1, #24]
   47e44:	str	r2, [sp, #20]
   47e48:	ldr	r2, [r0, r2, lsl #2]
   47e4c:	ldr	r0, [sp, #24]
   47e50:	ldr	r0, [r0]
   47e54:	mov	r1, r2
   47e58:	str	r2, [fp, #-44]	; 0xffffffd4
   47e5c:	add	r0, r0, r2, lsl #3
   47e60:	ldrb	r0, [r0, #6]
   47e64:	tst	r0, #16
   47e68:	bne	47f08 <__assert_fail@plt+0x3548c>
   47e6c:	ldr	r0, [sp, #24]
   47e70:	ldr	r1, [fp, #-44]	; 0xffffffd4
   47e74:	mov	r2, r4
   47e78:	ldr	r0, [r0]
   47e7c:	add	r1, r0, r1, lsl #3
   47e80:	mov	r0, r8
   47e84:	bl	45ce8 <__assert_fail@plt+0x3326c>
   47e88:	ldr	lr, [sp, #28]
   47e8c:	cmp	r0, #0
   47e90:	beq	482ec <__assert_fail@plt+0x35870>
   47e94:	ldr	r0, [lr]
   47e98:	ldr	r1, [sp, #36]	; 0x24
   47e9c:	ldr	r0, [r0, r1, lsl #2]
   47ea0:	cmp	r0, #0
   47ea4:	beq	482ec <__assert_fail@plt+0x35870>
   47ea8:	ldr	r2, [r0, #8]
   47eac:	cmp	r2, #1
   47eb0:	blt	482ec <__assert_fail@plt+0x35870>
   47eb4:	ldr	r1, [sp, #24]
   47eb8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   47ebc:	ldr	r0, [r0, #12]
   47ec0:	ldr	r1, [r1, #12]
   47ec4:	ldr	r1, [r1, r3, lsl #2]
   47ec8:	subs	r3, r2, #1
   47ecc:	mov	r2, #0
   47ed0:	beq	47ef4 <__assert_fail@plt+0x35478>
   47ed4:	add	r7, r2, r3
   47ed8:	lsr	r6, r7, #1
   47edc:	ldr	r5, [r0, r6, lsl #2]
   47ee0:	cmp	r5, r1
   47ee4:	movge	r3, r6
   47ee8:	addlt	r2, r9, r7, lsr #1
   47eec:	cmp	r2, r3
   47ef0:	bcc	47ed4 <__assert_fail@plt+0x35458>
   47ef4:	ldr	r2, [r0, r2, lsl #2]
   47ef8:	mov	r0, #1
   47efc:	cmp	r2, r1
   47f00:	beq	47f64 <__assert_fail@plt+0x354e8>
   47f04:	b	482ec <__assert_fail@plt+0x35870>
   47f08:	ldr	r7, [r8, #84]	; 0x54
   47f0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   47f10:	mov	r5, r4
   47f14:	ldr	r4, [lr, #12]
   47f18:	mov	r2, r8
   47f1c:	mov	r3, r5
   47f20:	mov	r0, r7
   47f24:	bl	459d0 <__assert_fail@plt+0x32f54>
   47f28:	cmp	r0, #1
   47f2c:	blt	47f54 <__assert_fail@plt+0x354d8>
   47f30:	add	r1, r0, r5
   47f34:	cmp	r1, r4
   47f38:	ble	4800c <__assert_fail@plt+0x35590>
   47f3c:	ldr	lr, [sp, #28]
   47f40:	ldr	r4, [sp, #32]
   47f44:	ldr	ip, [lr, #20]
   47f48:	cmp	ip, #0
   47f4c:	bne	47f70 <__assert_fail@plt+0x354f4>
   47f50:	b	48290 <__assert_fail@plt+0x35814>
   47f54:	ldr	lr, [sp, #28]
   47f58:	cmp	r0, #0
   47f5c:	mov	r4, r5
   47f60:	beq	47e6c <__assert_fail@plt+0x353f0>
   47f64:	ldr	ip, [lr, #20]
   47f68:	cmp	ip, #0
   47f6c:	beq	48290 <__assert_fail@plt+0x35814>
   47f70:	add	r0, r0, r4
   47f74:	ldr	r1, [fp, #-44]	; 0xffffffd4
   47f78:	str	r0, [sp, #40]	; 0x28
   47f7c:	ldr	r0, [sp, #24]
   47f80:	ldr	r0, [r0, #12]
   47f84:	ldr	r0, [r0, r1, lsl #2]
   47f88:	str	r0, [sp, #8]
   47f8c:	ldr	r0, [r8, #108]	; 0x6c
   47f90:	cmp	r0, #1
   47f94:	blt	48088 <__assert_fail@plt+0x3560c>
   47f98:	ldr	r2, [r8, #116]	; 0x74
   47f9c:	ldr	r1, [sp, #40]	; 0x28
   47fa0:	mov	sl, #0
   47fa4:	mov	r3, r0
   47fa8:	add	r7, r3, sl
   47fac:	add	r7, r7, r7, lsr #31
   47fb0:	asr	r6, r7, #1
   47fb4:	add	r5, r6, r6, lsl #1
   47fb8:	add	r5, r2, r5, lsl #3
   47fbc:	ldr	r5, [r5, #4]
   47fc0:	cmp	r5, r1
   47fc4:	addlt	sl, r9, r7, asr #1
   47fc8:	movge	r3, r6
   47fcc:	cmp	sl, r3
   47fd0:	blt	47fa8 <__assert_fail@plt+0x3552c>
   47fd4:	cmp	sl, r0
   47fd8:	bge	48098 <__assert_fail@plt+0x3561c>
   47fdc:	ldr	r2, [r8, #116]	; 0x74
   47fe0:	add	r3, sl, sl, lsl #1
   47fe4:	add	r2, r2, r3, lsl #3
   47fe8:	ldr	r2, [r2, #4]
   47fec:	cmp	r2, r1
   47ff0:	mvnne	sl, #0
   47ff4:	cmp	r0, #1
   47ff8:	bge	480a4 <__assert_fail@plt+0x35628>
   47ffc:	mov	r5, #0
   48000:	cmp	r5, r0
   48004:	blt	480e4 <__assert_fail@plt+0x35668>
   48008:	b	48108 <__assert_fail@plt+0x3568c>
   4800c:	ldr	lr, [sp, #28]
   48010:	ldr	r4, [sp, #32]
   48014:	ldr	r2, [lr]
   48018:	ldr	r2, [r2, r1, lsl #2]
   4801c:	cmp	r2, #0
   48020:	beq	47e6c <__assert_fail@plt+0x353f0>
   48024:	ldr	r3, [r2, #8]
   48028:	cmp	r3, #1
   4802c:	blt	47e6c <__assert_fail@plt+0x353f0>
   48030:	ldr	r1, [r7, #12]
   48034:	ldr	r7, [fp, #-44]	; 0xffffffd4
   48038:	ldr	r2, [r2, #12]
   4803c:	ldr	r1, [r1, r7, lsl #2]
   48040:	subs	r7, r3, #1
   48044:	mov	r3, #0
   48048:	beq	4806c <__assert_fail@plt+0x355f0>
   4804c:	add	r6, r3, r7
   48050:	lsr	r5, r6, #1
   48054:	ldr	r4, [r2, r5, lsl #2]
   48058:	cmp	r4, r1
   4805c:	movge	r7, r5
   48060:	addlt	r3, r9, r6, lsr #1
   48064:	cmp	r3, r7
   48068:	bcc	4804c <__assert_fail@plt+0x355d0>
   4806c:	ldr	r4, [sp, #32]
   48070:	cmp	r0, #0
   48074:	beq	47e6c <__assert_fail@plt+0x353f0>
   48078:	ldr	r2, [r2, r3, lsl #2]
   4807c:	cmp	r2, r1
   48080:	beq	47f64 <__assert_fail@plt+0x354e8>
   48084:	b	47e6c <__assert_fail@plt+0x353f0>
   48088:	ldr	r1, [sp, #40]	; 0x28
   4808c:	mov	sl, #0
   48090:	cmp	sl, r0
   48094:	blt	47fdc <__assert_fail@plt+0x35560>
   48098:	mvn	sl, #0
   4809c:	cmp	r0, #1
   480a0:	blt	47ffc <__assert_fail@plt+0x35580>
   480a4:	ldr	r2, [r8, #116]	; 0x74
   480a8:	mov	r5, #0
   480ac:	mov	r3, r0
   480b0:	add	r7, r3, r5
   480b4:	add	r7, r7, r7, lsr #31
   480b8:	asr	r6, r7, #1
   480bc:	add	r1, r6, r6, lsl #1
   480c0:	add	r1, r2, r1, lsl #3
   480c4:	ldr	r1, [r1, #4]
   480c8:	cmp	r1, r4
   480cc:	addlt	r5, r9, r7, asr #1
   480d0:	movge	r3, r6
   480d4:	cmp	r5, r3
   480d8:	blt	480b0 <__assert_fail@plt+0x35634>
   480dc:	cmp	r5, r0
   480e0:	bge	48108 <__assert_fail@plt+0x3568c>
   480e4:	ldr	r0, [r8, #116]	; 0x74
   480e8:	add	r1, r5, r5, lsl #1
   480ec:	add	r0, r0, r1, lsl #3
   480f0:	ldr	r0, [r0, #4]
   480f4:	cmp	r0, r4
   480f8:	mvnne	r5, #0
   480fc:	cmp	ip, #1
   48100:	bge	48114 <__assert_fail@plt+0x35698>
   48104:	b	48290 <__assert_fail@plt+0x35814>
   48108:	mvn	r5, #0
   4810c:	cmp	ip, #1
   48110:	blt	48290 <__assert_fail@plt+0x35814>
   48114:	ldr	ip, [r8, #84]	; 0x54
   48118:	mov	r6, #0
   4811c:	str	ip, [sp, #12]
   48120:	ldr	r0, [lr, #24]
   48124:	ldr	r3, [r8, #116]	; 0x74
   48128:	ldr	r4, [ip]
   4812c:	mvn	r8, #0
   48130:	ldr	r2, [r0, r6, lsl #2]
   48134:	mov	r0, r3
   48138:	add	r1, r2, r2, lsl #1
   4813c:	ldr	r7, [r0, r1, lsl #3]!
   48140:	ldr	r4, [r4, r7, lsl #3]
   48144:	ldr	r0, [r0, #8]
   48148:	ldr	r7, [sp, #40]	; 0x28
   4814c:	cmp	r0, r7
   48150:	str	r4, [sp, #44]	; 0x2c
   48154:	ble	48170 <__assert_fail@plt+0x356f4>
   48158:	mvn	r9, #0
   4815c:	ldr	r1, [sp, #36]	; 0x24
   48160:	ldr	r4, [sp, #32]
   48164:	cmp	r0, r1
   48168:	blt	481f4 <__assert_fail@plt+0x35778>
   4816c:	b	48270 <__assert_fail@plt+0x357f4>
   48170:	add	r1, r3, r1, lsl #3
   48174:	mov	r9, #1
   48178:	ldr	r1, [r1, #12]
   4817c:	cmp	r1, r7
   48180:	blt	481e4 <__assert_fail@plt+0x35768>
   48184:	sub	r1, r1, r7
   48188:	cmp	r0, r7
   4818c:	mov	r7, #1
   48190:	clz	r1, r1
   48194:	lsr	r4, r1, #5
   48198:	lsl	r1, r4, #1
   4819c:	orreq	r1, r7, r4, lsl #1
   481a0:	cmp	r1, #0
   481a4:	beq	48254 <__assert_fail@plt+0x357d8>
   481a8:	ldr	r4, [sp, #48]	; 0x30
   481ac:	ldr	r2, [sp, #44]	; 0x2c
   481b0:	ldr	r3, [sp, #8]
   481b4:	str	sl, [sp]
   481b8:	mov	r0, r4
   481bc:	bl	498d0 <__assert_fail@plt+0x36e54>
   481c0:	ldr	lr, [sp, #28]
   481c4:	mov	r9, r0
   481c8:	ldr	r3, [r4, #116]	; 0x74
   481cc:	ldr	ip, [sp, #12]
   481d0:	ldr	r0, [lr, #24]
   481d4:	ldr	r2, [r0, r6, lsl #2]
   481d8:	add	r0, r2, r2, lsl #1
   481dc:	add	r0, r3, r0, lsl #3
   481e0:	ldr	r0, [r0, #8]
   481e4:	ldr	r1, [sp, #36]	; 0x24
   481e8:	ldr	r4, [sp, #32]
   481ec:	cmp	r0, r1
   481f0:	bge	48270 <__assert_fail@plt+0x357f4>
   481f4:	add	r1, r2, r2, lsl #1
   481f8:	mov	r8, #1
   481fc:	add	r1, r3, r1, lsl #3
   48200:	ldr	r1, [r1, #12]
   48204:	cmp	r1, r4
   48208:	blt	48270 <__assert_fail@plt+0x357f4>
   4820c:	sub	r1, r1, r4
   48210:	cmp	r0, r4
   48214:	mov	r0, #1
   48218:	clz	r1, r1
   4821c:	lsr	r2, r1, #5
   48220:	lsl	r1, r2, #1
   48224:	orreq	r1, r0, r2, lsl #1
   48228:	cmp	r1, #0
   4822c:	beq	4826c <__assert_fail@plt+0x357f0>
   48230:	ldr	r0, [sp, #48]	; 0x30
   48234:	ldr	r2, [sp, #44]	; 0x2c
   48238:	ldr	r3, [fp, #-44]	; 0xffffffd4
   4823c:	str	r5, [sp]
   48240:	bl	498d0 <__assert_fail@plt+0x36e54>
   48244:	ldr	ip, [sp, #12]
   48248:	ldr	lr, [sp, #28]
   4824c:	mov	r8, r0
   48250:	b	48270 <__assert_fail@plt+0x357f4>
   48254:	mov	r9, #0
   48258:	ldr	r1, [sp, #36]	; 0x24
   4825c:	ldr	r4, [sp, #32]
   48260:	cmp	r0, r1
   48264:	blt	481f4 <__assert_fail@plt+0x35778>
   48268:	b	48270 <__assert_fail@plt+0x357f4>
   4826c:	mov	r8, #0
   48270:	cmp	r8, r9
   48274:	ldr	r8, [sp, #48]	; 0x30
   48278:	mov	r9, #1
   4827c:	bne	482ec <__assert_fail@plt+0x35870>
   48280:	ldr	r0, [lr, #20]
   48284:	add	r6, r6, #1
   48288:	cmp	r6, r0
   4828c:	blt	48120 <__assert_fail@plt+0x356a4>
   48290:	ldr	r2, [fp, #-40]	; 0xffffffd8
   48294:	cmp	r2, #0
   48298:	beq	482c4 <__assert_fail@plt+0x35848>
   4829c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   482a0:	ldr	r5, [fp, #-44]	; 0xffffffd4
   482a4:	cmp	r1, #0
   482a8:	bne	47d84 <__assert_fail@plt+0x35308>
   482ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   482b0:	str	r5, [r0]
   482b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   482b8:	add	r0, r0, #1
   482bc:	str	r0, [fp, #-36]	; 0xffffffdc
   482c0:	b	482ec <__assert_fail@plt+0x35870>
   482c4:	mov	r0, #4
   482c8:	str	r9, [fp, #-36]	; 0xffffffdc
   482cc:	str	r9, [fp, #-40]	; 0xffffffd8
   482d0:	bl	35608 <__assert_fail@plt+0x22b8c>
   482d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   482d8:	cmp	r0, #0
   482dc:	str	r0, [fp, #-32]	; 0xffffffe0
   482e0:	beq	48358 <__assert_fail@plt+0x358dc>
   482e4:	ldr	lr, [sp, #28]
   482e8:	str	r1, [r0]
   482ec:	ldr	r1, [sp, #16]
   482f0:	ldr	r2, [sp, #20]
   482f4:	ldr	r0, [r1, #20]
   482f8:	add	r2, r2, #1
   482fc:	cmp	r2, r0
   48300:	blt	47e40 <__assert_fail@plt+0x353c4>
   48304:	mov	r0, r8
   48308:	mov	r1, lr
   4830c:	mov	r2, r4
   48310:	sub	r3, fp, #40	; 0x28
   48314:	bl	48390 <__assert_fail@plt+0x35914>
   48318:	ldr	r1, [sp, #4]
   4831c:	cmp	r0, #0
   48320:	beq	47d10 <__assert_fail@plt+0x35294>
   48324:	mov	r7, r0
   48328:	b	48344 <__assert_fail@plt+0x358c8>
   4832c:	mov	r7, #0
   48330:	b	48344 <__assert_fail@plt+0x358c8>
   48334:	lsl	r2, r4, #2
   48338:	mov	r1, #0
   4833c:	mov	r7, #0
   48340:	bl	12800 <memset@plt>
   48344:	ldr	r0, [fp, #-32]	; 0xffffffe0
   48348:	bl	32c40 <__assert_fail@plt+0x201c4>
   4834c:	mov	r0, r7
   48350:	sub	sp, fp, #28
   48354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48358:	mov	r0, #0
   4835c:	mov	r7, #12
   48360:	str	r0, [fp, #-40]	; 0xffffffd8
   48364:	str	r0, [fp, #-36]	; 0xffffffdc
   48368:	b	48344 <__assert_fail@plt+0x358c8>
   4836c:	mov	r0, #0
   48370:	mov	r7, #12
   48374:	str	r0, [fp, #-40]	; 0xffffffd8
   48378:	str	r0, [fp, #-36]	; 0xffffffdc
   4837c:	mov	r0, r7
   48380:	sub	sp, fp, #28
   48384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48388:	mov	r7, #12
   4838c:	b	48344 <__assert_fail@plt+0x358c8>
   48390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48394:	add	fp, sp, #28
   48398:	sub	sp, sp, #140	; 0x8c
   4839c:	mov	r9, r3
   483a0:	mov	r3, #0
   483a4:	ldr	r6, [r0, #84]	; 0x54
   483a8:	mov	r4, r1
   483ac:	str	r2, [fp, #-80]	; 0xffffffb0
   483b0:	str	r0, [sp, #64]	; 0x40
   483b4:	str	r3, [fp, #-76]	; 0xffffffb4
   483b8:	str	r4, [sp, #80]	; 0x50
   483bc:	ldr	r1, [r0, #100]	; 0x64
   483c0:	ldr	r7, [r1, r2, lsl #2]
   483c4:	cmp	r7, #0
   483c8:	mov	r1, r7
   483cc:	addne	r1, r1, #4
   483d0:	str	r1, [sp, #68]	; 0x44
   483d4:	ldr	r1, [r9, #4]
   483d8:	cmp	r1, #0
   483dc:	beq	487f4 <__assert_fail@plt+0x35d78>
   483e0:	cmp	r7, #0
   483e4:	beq	487bc <__assert_fail@plt+0x35d40>
   483e8:	mov	r0, #0
   483ec:	mov	r1, r6
   483f0:	mov	r2, r9
   483f4:	str	r9, [sp, #60]	; 0x3c
   483f8:	str	r0, [fp, #-72]	; 0xffffffb8
   483fc:	sub	r0, fp, #72	; 0x48
   48400:	bl	45730 <__assert_fail@plt+0x32cb4>
   48404:	ldr	r9, [fp, #-72]	; 0xffffffb8
   48408:	cmp	r9, #0
   4840c:	bne	4920c <__assert_fail@plt+0x36790>
   48410:	mov	r4, r0
   48414:	mov	r5, r0
   48418:	str	r6, [sp, #76]	; 0x4c
   4841c:	ldr	r0, [r4, #28]!
   48420:	cmp	r0, #0
   48424:	bne	484b8 <__assert_fail@plt+0x35a3c>
   48428:	ldr	r8, [sp, #60]	; 0x3c
   4842c:	mov	r6, #0
   48430:	ldr	r0, [r8, #4]
   48434:	str	r0, [r5, #28]
   48438:	lsl	r0, r0, #2
   4843c:	str	r6, [r5, #32]
   48440:	bl	35608 <__assert_fail@plt+0x22b8c>
   48444:	cmp	r0, #0
   48448:	mov	r9, #12
   4844c:	str	r0, [r5, #36]	; 0x24
   48450:	movweq	r6, #12
   48454:	str	r6, [fp, #-72]	; 0xffffffb8
   48458:	beq	4920c <__assert_fail@plt+0x36790>
   4845c:	ldr	r0, [r8, #4]
   48460:	ldr	r6, [sp, #76]	; 0x4c
   48464:	cmp	r0, #1
   48468:	blt	484b8 <__assert_fail@plt+0x35a3c>
   4846c:	ldr	r6, [sp, #60]	; 0x3c
   48470:	mov	r5, #0
   48474:	ldr	r0, [r6, #8]
   48478:	ldr	r1, [sp, #76]	; 0x4c
   4847c:	ldr	r0, [r0, r5, lsl #2]
   48480:	ldr	r1, [r1, #28]
   48484:	add	r0, r0, r0, lsl #1
   48488:	add	r1, r1, r0, lsl #2
   4848c:	mov	r0, r4
   48490:	bl	4158c <__assert_fail@plt+0x2eb10>
   48494:	cmp	r0, #0
   48498:	bne	49208 <__assert_fail@plt+0x3678c>
   4849c:	ldr	r0, [r6, #4]
   484a0:	add	r5, r5, #1
   484a4:	cmp	r5, r0
   484a8:	blt	48474 <__assert_fail@plt+0x359f8>
   484ac:	ldr	r6, [sp, #76]	; 0x4c
   484b0:	mov	r0, #0
   484b4:	str	r0, [fp, #-72]	; 0xffffffb8
   484b8:	ldr	r5, [sp, #68]	; 0x44
   484bc:	ldr	r0, [sp, #60]	; 0x3c
   484c0:	mov	r2, r4
   484c4:	mov	r1, r5
   484c8:	bl	49274 <__assert_fail@plt+0x367f8>
   484cc:	cmp	r0, #0
   484d0:	str	r0, [fp, #-76]	; 0xffffffb4
   484d4:	bne	49230 <__assert_fail@plt+0x367b4>
   484d8:	ldr	r4, [sp, #80]	; 0x50
   484dc:	ldr	r9, [sp, #60]	; 0x3c
   484e0:	ldr	r0, [r4, #20]
   484e4:	cmp	r0, #0
   484e8:	beq	487bc <__assert_fail@plt+0x35d40>
   484ec:	ldr	lr, [fp, #-80]	; 0xffffffb0
   484f0:	cmp	r0, #1
   484f4:	str	r7, [sp, #56]	; 0x38
   484f8:	blt	487b0 <__assert_fail@plt+0x35d34>
   484fc:	ldr	r0, [sp, #64]	; 0x40
   48500:	mov	r1, #0
   48504:	ldr	r0, [r0, #116]	; 0x74
   48508:	str	r0, [sp, #72]	; 0x48
   4850c:	ldr	r0, [r4, #24]
   48510:	str	r1, [sp, #84]	; 0x54
   48514:	ldr	r0, [r0, r1, lsl #2]
   48518:	ldr	r1, [sp, #72]	; 0x48
   4851c:	add	r0, r0, r0, lsl #1
   48520:	add	r1, r1, r0, lsl #3
   48524:	ldr	r2, [r1, #8]
   48528:	cmp	r2, lr
   4852c:	bge	4879c <__assert_fail@plt+0x35d20>
   48530:	ldr	r1, [r1, #4]
   48534:	cmp	r1, lr
   48538:	blt	4879c <__assert_fail@plt+0x35d20>
   4853c:	ldr	r1, [sp, #72]	; 0x48
   48540:	ldr	r2, [r6]
   48544:	ldr	r0, [r1, r0, lsl #3]!
   48548:	ldr	r1, [r1, #12]
   4854c:	ldr	sl, [r2, r0, lsl #3]
   48550:	ldr	r0, [r9, #4]
   48554:	cmp	r1, lr
   48558:	bne	48720 <__assert_fail@plt+0x35ca4>
   4855c:	cmp	r0, #1
   48560:	blt	4879c <__assert_fail@plt+0x35d20>
   48564:	ldr	r3, [r9, #8]
   48568:	mvn	r8, #0
   4856c:	mvn	r1, #0
   48570:	ldr	r7, [r3]
   48574:	add	r6, r2, r7, lsl #3
   48578:	ldrb	r6, [r6, #4]
   4857c:	cmp	r6, #9
   48580:	beq	485a8 <__assert_fail@plt+0x35b2c>
   48584:	cmp	r6, #8
   48588:	bne	48598 <__assert_fail@plt+0x35b1c>
   4858c:	ldr	r6, [r2, r7, lsl #3]
   48590:	cmp	sl, r6
   48594:	moveq	r1, r7
   48598:	add	r3, r3, #4
   4859c:	subs	r0, r0, #1
   485a0:	bne	48570 <__assert_fail@plt+0x35af4>
   485a4:	b	485c0 <__assert_fail@plt+0x35b44>
   485a8:	ldr	r6, [r2, r7, lsl #3]
   485ac:	cmp	sl, r6
   485b0:	moveq	r8, r7
   485b4:	add	r3, r3, #4
   485b8:	subs	r0, r0, #1
   485bc:	bne	48570 <__assert_fail@plt+0x35af4>
   485c0:	ldr	r6, [sp, #76]	; 0x4c
   485c4:	cmp	r1, #0
   485c8:	blt	485e8 <__assert_fail@plt+0x35b6c>
   485cc:	ldr	r2, [sp, #60]	; 0x3c
   485d0:	mov	r0, r6
   485d4:	mov	r3, r5
   485d8:	bl	49490 <__assert_fail@plt+0x36a14>
   485dc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   485e0:	cmp	r0, #0
   485e4:	bne	491e0 <__assert_fail@plt+0x36764>
   485e8:	ldr	r9, [sp, #60]	; 0x3c
   485ec:	cmp	r8, #0
   485f0:	ldrge	ip, [r9, #4]
   485f4:	cmpge	ip, #1
   485f8:	blt	4879c <__assert_fail@plt+0x35d20>
   485fc:	mov	sl, #0
   48600:	ldr	r1, [r9, #8]
   48604:	ldr	r3, [r6, #28]
   48608:	ldr	r1, [r1, sl, lsl #2]
   4860c:	add	r2, r1, r1, lsl #1
   48610:	add	r3, r3, r2, lsl #2
   48614:	ldr	r7, [r3, #4]
   48618:	cmp	r7, #1
   4861c:	blt	48680 <__assert_fail@plt+0x35c04>
   48620:	ldr	r3, [r3, #8]
   48624:	mov	lr, ip
   48628:	subs	r6, r7, #1
   4862c:	beq	4865c <__assert_fail@plt+0x35be0>
   48630:	mov	r7, #0
   48634:	mov	ip, #1
   48638:	add	r0, r7, r6
   4863c:	lsr	r4, r0, #1
   48640:	ldr	r5, [r3, r4, lsl #2]
   48644:	cmp	r5, r8
   48648:	movge	r6, r4
   4864c:	addlt	r7, ip, r0, lsr #1
   48650:	cmp	r7, r6
   48654:	bcc	48638 <__assert_fail@plt+0x35bbc>
   48658:	b	48660 <__assert_fail@plt+0x35be4>
   4865c:	mov	r7, #0
   48660:	ldr	r0, [r3, r7, lsl #2]
   48664:	mov	ip, lr
   48668:	ldr	r4, [sp, #80]	; 0x50
   4866c:	ldr	r5, [sp, #68]	; 0x44
   48670:	ldr	r6, [sp, #76]	; 0x4c
   48674:	ldr	lr, [fp, #-80]	; 0xffffffb0
   48678:	cmp	r0, r8
   4867c:	beq	48710 <__assert_fail@plt+0x35c94>
   48680:	ldr	r0, [r6, #24]
   48684:	add	r2, r0, r2, lsl #2
   48688:	ldr	r3, [r2, #4]
   4868c:	cmp	r3, #1
   48690:	blt	486e8 <__assert_fail@plt+0x35c6c>
   48694:	ldr	r2, [r2, #8]
   48698:	subs	r7, r3, #1
   4869c:	beq	486cc <__assert_fail@plt+0x35c50>
   486a0:	mov	r3, #0
   486a4:	mov	r4, #1
   486a8:	add	r0, r3, r7
   486ac:	lsr	r6, r0, #1
   486b0:	ldr	r5, [r2, r6, lsl #2]
   486b4:	cmp	r5, r8
   486b8:	movge	r7, r6
   486bc:	addlt	r3, r4, r0, lsr #1
   486c0:	cmp	r3, r7
   486c4:	bcc	486a8 <__assert_fail@plt+0x35c2c>
   486c8:	b	486d0 <__assert_fail@plt+0x35c54>
   486cc:	mov	r3, #0
   486d0:	ldr	r0, [r2, r3, lsl #2]
   486d4:	ldr	r4, [sp, #80]	; 0x50
   486d8:	ldr	r5, [sp, #68]	; 0x44
   486dc:	ldr	r6, [sp, #76]	; 0x4c
   486e0:	cmp	r0, r8
   486e4:	beq	48710 <__assert_fail@plt+0x35c94>
   486e8:	mov	r0, r6
   486ec:	mov	r2, r9
   486f0:	mov	r3, r5
   486f4:	bl	49490 <__assert_fail@plt+0x36a14>
   486f8:	cmp	r0, #0
   486fc:	bne	491e0 <__assert_fail@plt+0x36764>
   48700:	ldr	ip, [r9, #4]
   48704:	ldr	lr, [fp, #-80]	; 0xffffffb0
   48708:	sub	sl, sl, #1
   4870c:	mov	r1, r9
   48710:	add	sl, sl, #1
   48714:	cmp	sl, ip
   48718:	blt	48600 <__assert_fail@plt+0x35b84>
   4871c:	b	4879c <__assert_fail@plt+0x35d20>
   48720:	cmp	r0, #1
   48724:	blt	4879c <__assert_fail@plt+0x35d20>
   48728:	mov	r7, #0
   4872c:	b	48734 <__assert_fail@plt+0x35cb8>
   48730:	ldr	r2, [r6]
   48734:	ldr	r1, [r9, #8]
   48738:	ldr	r1, [r1, r7, lsl #2]
   4873c:	add	r3, r2, r1, lsl #3
   48740:	ldr	r3, [r3, #4]
   48744:	and	r3, r3, #254	; 0xfe
   48748:	orr	r3, r3, #1
   4874c:	cmp	r3, #9
   48750:	ldreq	r2, [r2, r1, lsl #3]
   48754:	cmpeq	sl, r2
   48758:	beq	4876c <__assert_fail@plt+0x35cf0>
   4875c:	add	r7, r7, #1
   48760:	cmp	r7, r0
   48764:	blt	48730 <__assert_fail@plt+0x35cb4>
   48768:	b	4879c <__assert_fail@plt+0x35d20>
   4876c:	mov	r0, r6
   48770:	mov	r2, r9
   48774:	mov	r3, r5
   48778:	bl	49490 <__assert_fail@plt+0x36a14>
   4877c:	cmp	r0, #0
   48780:	bne	491e0 <__assert_fail@plt+0x36764>
   48784:	ldr	r0, [r9, #4]
   48788:	ldr	lr, [fp, #-80]	; 0xffffffb0
   4878c:	mov	r1, r9
   48790:	add	r7, r7, #1
   48794:	cmp	r7, r0
   48798:	blt	48730 <__assert_fail@plt+0x35cb4>
   4879c:	ldr	r1, [sp, #84]	; 0x54
   487a0:	ldr	r0, [r4, #20]
   487a4:	add	r1, r1, #1
   487a8:	cmp	r1, r0
   487ac:	blt	4850c <__assert_fail@plt+0x35a90>
   487b0:	ldr	r7, [sp, #56]	; 0x38
   487b4:	mov	r0, #0
   487b8:	str	r0, [fp, #-76]	; 0xffffffb4
   487bc:	sub	r0, fp, #76	; 0x4c
   487c0:	mov	r1, r6
   487c4:	mov	r2, r9
   487c8:	bl	45730 <__assert_fail@plt+0x32cb4>
   487cc:	ldr	r1, [r4]
   487d0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   487d4:	str	r0, [r1, r4, lsl #2]
   487d8:	ldr	r0, [sp, #64]	; 0x40
   487dc:	ldr	r9, [fp, #-76]	; 0xffffffb4
   487e0:	cmp	r9, #0
   487e4:	bne	491b0 <__assert_fail@plt+0x36734>
   487e8:	cmp	r7, #0
   487ec:	bne	48808 <__assert_fail@plt+0x35d8c>
   487f0:	b	491d0 <__assert_fail@plt+0x36754>
   487f4:	ldr	r1, [r4]
   487f8:	mov	r4, r2
   487fc:	str	r3, [r1, r2, lsl #2]
   48800:	cmp	r7, #0
   48804:	beq	491d0 <__assert_fail@plt+0x36754>
   48808:	ldr	r1, [r0, #100]	; 0x64
   4880c:	ldr	r1, [r1, r4, lsl #2]
   48810:	ldrb	r1, [r1, #52]	; 0x34
   48814:	tst	r1, #64	; 0x40
   48818:	beq	491d0 <__assert_fail@plt+0x36754>
   4881c:	ldr	lr, [r0, #108]	; 0x6c
   48820:	ldr	r8, [r0, #84]	; 0x54
   48824:	cmp	lr, #1
   48828:	blt	491bc <__assert_fail@plt+0x36740>
   4882c:	ldr	r1, [r0, #116]	; 0x74
   48830:	mov	ip, #0
   48834:	mov	r2, #1
   48838:	mov	r3, lr
   4883c:	add	r7, r3, ip
   48840:	add	r7, r7, r7, lsr #31
   48844:	asr	r6, r7, #1
   48848:	add	r5, r6, r6, lsl #1
   4884c:	add	r5, r1, r5, lsl #3
   48850:	ldr	r5, [r5, #4]
   48854:	cmp	r5, r4
   48858:	addlt	ip, r2, r7, asr #1
   4885c:	movge	r3, r6
   48860:	cmp	ip, r3
   48864:	blt	4883c <__assert_fail@plt+0x35dc0>
   48868:	cmp	ip, lr
   4886c:	bge	491c8 <__assert_fail@plt+0x3674c>
   48870:	cmn	ip, #1
   48874:	beq	491c8 <__assert_fail@plt+0x3674c>
   48878:	ldr	r2, [r0, #116]	; 0x74
   4887c:	add	r1, ip, ip, lsl #1
   48880:	str	r1, [sp, #20]
   48884:	add	r1, r2, r1, lsl #3
   48888:	ldr	r1, [r1, #4]
   4888c:	cmp	r1, r4
   48890:	bne	491c8 <__assert_fail@plt+0x3674c>
   48894:	ldr	r1, [sp, #68]	; 0x44
   48898:	mov	r2, #0
   4889c:	str	r2, [fp, #-72]	; 0xffffffb8
   488a0:	ldr	r3, [r1, #4]
   488a4:	cmp	r3, #0
   488a8:	ble	491f4 <__assert_fail@plt+0x36778>
   488ac:	sub	r0, fp, #72	; 0x48
   488b0:	ldr	r5, [sp, #80]	; 0x50
   488b4:	mov	r9, #1
   488b8:	mov	lr, #0
   488bc:	mov	r7, r8
   488c0:	str	r8, [sp, #60]	; 0x3c
   488c4:	str	ip, [sp, #24]
   488c8:	add	r0, r0, #16
   488cc:	str	r0, [sp, #8]
   488d0:	mov	r0, #0
   488d4:	str	r0, [sp, #32]
   488d8:	ldr	r0, [r1, #8]
   488dc:	ldr	r1, [r5, #8]
   488e0:	str	sl, [sp, #48]	; 0x30
   488e4:	ldr	r8, [r0, lr, lsl #2]
   488e8:	ldr	r0, [r7]
   488ec:	add	r0, r0, r8, lsl #3
   488f0:	cmp	r8, r1
   488f4:	ldrb	r0, [r0, #4]
   488f8:	bne	48914 <__assert_fail@plt+0x35e98>
   488fc:	cmp	r0, #4
   48900:	bne	49170 <__assert_fail@plt+0x366f4>
   48904:	ldr	r0, [r5, #12]
   48908:	cmp	r0, r4
   4890c:	bne	4891c <__assert_fail@plt+0x35ea0>
   48910:	b	49170 <__assert_fail@plt+0x366f4>
   48914:	cmp	r0, #4
   48918:	bne	49170 <__assert_fail@plt+0x366f4>
   4891c:	ldr	r0, [sp, #64]	; 0x40
   48920:	ldr	r1, [sp, #20]
   48924:	mov	r4, ip
   48928:	str	lr, [sp, #36]	; 0x24
   4892c:	str	r8, [sp, #56]	; 0x38
   48930:	ldr	r0, [r0, #116]	; 0x74
   48934:	add	sl, r0, r1, lsl #3
   48938:	b	48fe4 <__assert_fail@plt+0x36568>
   4893c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   48940:	mov	r9, #0
   48944:	cmp	r9, r0
   48948:	blt	490e0 <__assert_fail@plt+0x36664>
   4894c:	mvn	r9, #0
   48950:	cmp	r0, #1
   48954:	blt	49100 <__assert_fail@plt+0x36684>
   48958:	ldr	r1, [r7, #116]	; 0x74
   4895c:	ldr	r4, [sp, #84]	; 0x54
   48960:	mov	r8, #0
   48964:	mov	r2, r0
   48968:	mov	lr, #1
   4896c:	add	r3, r2, r8
   48970:	add	r3, r3, r3, lsr #31
   48974:	asr	r6, r3, #1
   48978:	add	r5, r6, r6, lsl #1
   4897c:	add	r5, r1, r5, lsl #3
   48980:	ldr	r5, [r5, #4]
   48984:	cmp	r5, r4
   48988:	addlt	r8, lr, r3, asr #1
   4898c:	movge	r2, r6
   48990:	cmp	r8, r2
   48994:	blt	4896c <__assert_fail@plt+0x35ef0>
   48998:	ldr	lr, [sp, #64]	; 0x40
   4899c:	cmp	r8, r0
   489a0:	bge	49114 <__assert_fail@plt+0x36698>
   489a4:	ldr	r0, [lr, #116]	; 0x74
   489a8:	add	r1, r8, r8, lsl #1
   489ac:	add	r0, r0, r1, lsl #3
   489b0:	ldr	r0, [r0, #4]
   489b4:	cmp	r0, r4
   489b8:	mvnne	r8, #0
   489bc:	ldr	r5, [sp, #80]	; 0x50
   489c0:	ldr	r4, [r5, #20]
   489c4:	cmp	r4, #1
   489c8:	blt	48b40 <__assert_fail@plt+0x360c4>
   489cc:	ldr	ip, [lr, #84]	; 0x54
   489d0:	mov	r6, #0
   489d4:	str	ip, [sp, #52]	; 0x34
   489d8:	ldr	r0, [r5, #24]
   489dc:	ldr	r3, [lr, #116]	; 0x74
   489e0:	ldr	r4, [ip]
   489e4:	ldr	r7, [fp, #-80]	; 0xffffffb0
   489e8:	ldr	r2, [r0, r6, lsl #2]
   489ec:	mov	r0, r3
   489f0:	add	r1, r2, r2, lsl #1
   489f4:	ldr	r5, [r0, r1, lsl #3]!
   489f8:	ldr	r0, [r0, #8]
   489fc:	ldr	r4, [r4, r5, lsl #3]
   48a00:	mvn	r5, #0
   48a04:	cmp	r0, r7
   48a08:	str	r4, [sp, #76]	; 0x4c
   48a0c:	ble	48a24 <__assert_fail@plt+0x35fa8>
   48a10:	mvn	r4, #0
   48a14:	ldr	r7, [sp, #84]	; 0x54
   48a18:	cmp	r0, r7
   48a1c:	ble	48aa4 <__assert_fail@plt+0x36028>
   48a20:	b	48b24 <__assert_fail@plt+0x360a8>
   48a24:	add	r1, r3, r1, lsl #3
   48a28:	mov	r4, #1
   48a2c:	ldr	r1, [r1, #12]
   48a30:	cmp	r1, r7
   48a34:	blt	48a98 <__assert_fail@plt+0x3601c>
   48a38:	sub	r1, r1, r7
   48a3c:	cmp	r0, r7
   48a40:	mov	r7, #1
   48a44:	clz	r1, r1
   48a48:	lsr	r4, r1, #5
   48a4c:	lsl	r1, r4, #1
   48a50:	orreq	r1, r7, r4, lsl #1
   48a54:	cmp	r1, #0
   48a58:	beq	48b0c <__assert_fail@plt+0x36090>
   48a5c:	ldr	r2, [sp, #76]	; 0x4c
   48a60:	ldr	r3, [sp, #56]	; 0x38
   48a64:	mov	r0, lr
   48a68:	str	r9, [sp]
   48a6c:	bl	498d0 <__assert_fail@plt+0x36e54>
   48a70:	mov	r4, r0
   48a74:	ldr	r0, [sp, #80]	; 0x50
   48a78:	ldr	lr, [sp, #64]	; 0x40
   48a7c:	ldr	ip, [sp, #52]	; 0x34
   48a80:	ldr	r0, [r0, #24]
   48a84:	ldr	r3, [lr, #116]	; 0x74
   48a88:	ldr	r2, [r0, r6, lsl #2]
   48a8c:	add	r0, r2, r2, lsl #1
   48a90:	add	r0, r3, r0, lsl #3
   48a94:	ldr	r0, [r0, #8]
   48a98:	ldr	r7, [sp, #84]	; 0x54
   48a9c:	cmp	r0, r7
   48aa0:	bgt	48b24 <__assert_fail@plt+0x360a8>
   48aa4:	add	r1, r2, r2, lsl #1
   48aa8:	mov	r5, #1
   48aac:	add	r1, r3, r1, lsl #3
   48ab0:	ldr	r1, [r1, #12]
   48ab4:	cmp	r1, r7
   48ab8:	blt	48b24 <__assert_fail@plt+0x360a8>
   48abc:	sub	r1, r1, r7
   48ac0:	cmp	r0, r7
   48ac4:	mov	r0, #1
   48ac8:	clz	r1, r1
   48acc:	lsr	r2, r1, #5
   48ad0:	lsl	r1, r2, #1
   48ad4:	orreq	r1, r0, r2, lsl #1
   48ad8:	cmp	r1, #0
   48adc:	beq	48b20 <__assert_fail@plt+0x360a4>
   48ae0:	ldr	r2, [sp, #76]	; 0x4c
   48ae4:	ldr	r3, [sp, #44]	; 0x2c
   48ae8:	mov	r0, lr
   48aec:	str	r8, [sp]
   48af0:	bl	498d0 <__assert_fail@plt+0x36e54>
   48af4:	ldr	ip, [sp, #52]	; 0x34
   48af8:	ldr	lr, [sp, #64]	; 0x40
   48afc:	mov	r5, r0
   48b00:	cmp	r5, r4
   48b04:	beq	48b2c <__assert_fail@plt+0x360b0>
   48b08:	b	48b9c <__assert_fail@plt+0x36120>
   48b0c:	mov	r4, #0
   48b10:	ldr	r7, [sp, #84]	; 0x54
   48b14:	cmp	r0, r7
   48b18:	ble	48aa4 <__assert_fail@plt+0x36028>
   48b1c:	b	48b24 <__assert_fail@plt+0x360a8>
   48b20:	mov	r5, #0
   48b24:	cmp	r5, r4
   48b28:	bne	48b9c <__assert_fail@plt+0x36120>
   48b2c:	ldr	r5, [sp, #80]	; 0x50
   48b30:	add	r6, r6, #1
   48b34:	ldr	r4, [r5, #20]
   48b38:	cmp	r6, r4
   48b3c:	blt	489d8 <__assert_fail@plt+0x35f5c>
   48b40:	ldr	r0, [sp, #32]
   48b44:	cmp	r0, #0
   48b48:	beq	48bc0 <__assert_fail@plt+0x36144>
   48b4c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   48b50:	mov	r2, #1
   48b54:	str	r0, [fp, #-60]	; 0xffffffc4
   48b58:	ldr	r0, [sp, #56]	; 0x38
   48b5c:	str	r0, [fp, #-64]	; 0xffffffc0
   48b60:	ldr	r0, [sp, #16]
   48b64:	cmp	r0, #0
   48b68:	beq	48cdc <__assert_fail@plt+0x36260>
   48b6c:	ldr	r4, [sp, #40]	; 0x28
   48b70:	cmp	r4, #0
   48b74:	bne	48fcc <__assert_fail@plt+0x36550>
   48b78:	ldr	sl, [sp, #48]	; 0x30
   48b7c:	ldr	r0, [sp, #72]	; 0x48
   48b80:	mov	r1, #1
   48b84:	str	r0, [sl]
   48b88:	mov	r0, #1
   48b8c:	str	r1, [fp, #-52]	; 0xffffffcc
   48b90:	str	sl, [sp, #28]
   48b94:	str	r0, [sp, #40]	; 0x28
   48b98:	b	48d78 <__assert_fail@plt+0x362fc>
   48b9c:	ldr	r5, [sp, #80]	; 0x50
   48ba0:	ldr	r7, [sp, #60]	; 0x3c
   48ba4:	ldr	ip, [sp, #24]
   48ba8:	ldr	lr, [sp, #36]	; 0x24
   48bac:	ldr	r8, [sp, #56]	; 0x38
   48bb0:	ldr	r4, [sp, #72]	; 0x48
   48bb4:	mov	r0, sl
   48bb8:	mov	r9, #1
   48bbc:	b	4915c <__assert_fail@plt+0x366e0>
   48bc0:	mov	r0, r5
   48bc4:	mov	r1, #12
   48bc8:	cmp	r4, #1
   48bcc:	mov	r2, #1
   48bd0:	vld1.32	{d16-d17}, [r0], r1
   48bd4:	sub	r1, fp, #72	; 0x48
   48bd8:	vld1.32	{d18-d19}, [r0]
   48bdc:	add	r0, r1, #12
   48be0:	vst1.32	{d18-d19}, [r0]
   48be4:	mov	r0, r1
   48be8:	mov	r1, #20
   48bec:	vst1.64	{d16-d17}, [r0], r1
   48bf0:	str	r4, [r0]
   48bf4:	blt	48cb8 <__assert_fail@plt+0x3623c>
   48bf8:	lsl	r0, r4, #2
   48bfc:	str	r4, [fp, #-56]	; 0xffffffc8
   48c00:	bl	35608 <__assert_fail@plt+0x22b8c>
   48c04:	cmp	r0, #0
   48c08:	str	r0, [fp, #-48]	; 0xffffffd0
   48c0c:	beq	49240 <__assert_fail@plt+0x367c4>
   48c10:	mov	r6, r0
   48c14:	ldr	r0, [r5, #20]
   48c18:	ldr	r1, [r5, #24]
   48c1c:	lsl	r2, r0, #2
   48c20:	mov	r0, r6
   48c24:	bl	124b8 <memcpy@plt>
   48c28:	ldr	r0, [sp, #56]	; 0x38
   48c2c:	mov	sl, r6
   48c30:	str	r0, [fp, #-64]	; 0xffffffc0
   48c34:	ldr	r0, [fp, #-80]	; 0xffffffb0
   48c38:	str	r0, [fp, #-60]	; 0xffffffc4
   48c3c:	lsl	r0, r4, #1
   48c40:	lsl	r1, r4, #3
   48c44:	str	r0, [sp, #16]
   48c48:	str	r0, [fp, #-56]	; 0xffffffc8
   48c4c:	mov	r0, r6
   48c50:	bl	36328 <__assert_fail@plt+0x238ac>
   48c54:	cmp	r0, #0
   48c58:	beq	49260 <__assert_fail@plt+0x367e4>
   48c5c:	mov	sl, r0
   48c60:	mov	r6, r0
   48c64:	str	r0, [fp, #-48]	; 0xffffffd0
   48c68:	str	r0, [sp, #12]
   48c6c:	ldr	r0, [sl]
   48c70:	ldr	r2, [sp, #72]	; 0x48
   48c74:	cmp	r0, r2
   48c78:	ble	48d24 <__assert_fail@plt+0x362a8>
   48c7c:	ldr	lr, [sp, #64]	; 0x40
   48c80:	cmp	r4, #1
   48c84:	mov	r2, r4
   48c88:	blt	48d60 <__assert_fail@plt+0x362e4>
   48c8c:	add	r1, sl, r4, lsl #2
   48c90:	add	r0, r4, #1
   48c94:	mov	r2, r1
   48c98:	ldr	r3, [r2, #-4]!
   48c9c:	sub	r0, r0, #1
   48ca0:	cmp	r0, #1
   48ca4:	str	r3, [r1]
   48ca8:	mov	r1, r2
   48cac:	bgt	48c98 <__assert_fail@plt+0x3621c>
   48cb0:	sub	r2, r0, #1
   48cb4:	b	48d60 <__assert_fail@plt+0x362e4>
   48cb8:	ldr	r1, [sp, #8]
   48cbc:	mov	r0, #0
   48cc0:	str	r0, [r1]
   48cc4:	str	r0, [r1, #4]
   48cc8:	str	r0, [r1, #8]
   48ccc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   48cd0:	str	r0, [fp, #-60]	; 0xffffffc4
   48cd4:	ldr	r0, [sp, #56]	; 0x38
   48cd8:	str	r0, [fp, #-64]	; 0xffffffc0
   48cdc:	mov	r0, #4
   48ce0:	str	r2, [fp, #-52]	; 0xffffffcc
   48ce4:	str	r2, [fp, #-56]	; 0xffffffc8
   48ce8:	bl	35608 <__assert_fail@plt+0x22b8c>
   48cec:	cmp	r0, #0
   48cf0:	str	r0, [fp, #-48]	; 0xffffffd0
   48cf4:	beq	49240 <__assert_fail@plt+0x367c4>
   48cf8:	mov	sl, r0
   48cfc:	ldr	r0, [sp, #72]	; 0x48
   48d00:	ldr	lr, [sp, #64]	; 0x40
   48d04:	str	sl, [sp, #12]
   48d08:	str	sl, [sp, #28]
   48d0c:	str	r0, [sl]
   48d10:	mov	r0, #1
   48d14:	str	r0, [sp, #40]	; 0x28
   48d18:	mov	r0, #1
   48d1c:	str	r0, [sp, #16]
   48d20:	b	48d78 <__assert_fail@plt+0x362fc>
   48d24:	add	r0, sl, r4, lsl #2
   48d28:	ldr	lr, [sp, #64]	; 0x40
   48d2c:	ldr	r1, [r0, #-4]
   48d30:	cmp	r1, r2
   48d34:	mov	r2, r4
   48d38:	ble	48d60 <__assert_fail@plt+0x362e4>
   48d3c:	ldr	r3, [sp, #72]	; 0x48
   48d40:	sub	r2, r4, #2
   48d44:	str	r1, [r0]
   48d48:	sub	r2, r2, #1
   48d4c:	ldr	r1, [r0, #-8]
   48d50:	sub	r0, r0, #4
   48d54:	cmp	r1, r3
   48d58:	bgt	48d44 <__assert_fail@plt+0x362c8>
   48d5c:	add	r2, r2, #2
   48d60:	ldr	r0, [sp, #72]	; 0x48
   48d64:	add	r4, r4, #1
   48d68:	str	r6, [sp, #28]
   48d6c:	str	r4, [sp, #40]	; 0x28
   48d70:	str	r0, [sl, r2, lsl #2]
   48d74:	str	r4, [fp, #-52]	; 0xffffffcc
   48d78:	ldr	r0, [fp, #-80]	; 0xffffffb0
   48d7c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   48d80:	ldr	r6, [r1, r0, lsl #2]
   48d84:	mov	r8, r1
   48d88:	mov	r0, lr
   48d8c:	sub	r1, fp, #72	; 0x48
   48d90:	bl	47ca0 <__assert_fail@plt+0x35224>
   48d94:	cmp	r0, #0
   48d98:	bne	4921c <__assert_fail@plt+0x367a0>
   48d9c:	ldr	r5, [r5, #4]
   48da0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   48da4:	ldr	r4, [sp, #72]	; 0x48
   48da8:	mov	r7, r8
   48dac:	cmp	r5, #0
   48db0:	beq	48e60 <__assert_fail@plt+0x363e4>
   48db4:	mov	r3, r0
   48db8:	cmp	r0, #0
   48dbc:	str	r6, [sp, #84]	; 0x54
   48dc0:	blt	48e58 <__assert_fail@plt+0x363dc>
   48dc4:	mov	r0, #0
   48dc8:	mov	r6, r0
   48dcc:	ldr	r0, [r7, r0, lsl #2]
   48dd0:	ldr	r1, [r5, r6, lsl #2]
   48dd4:	cmp	r1, #0
   48dd8:	beq	48e48 <__assert_fail@plt+0x363cc>
   48ddc:	cmp	r0, #0
   48de0:	beq	48e38 <__assert_fail@plt+0x363bc>
   48de4:	sub	r4, fp, #44	; 0x2c
   48de8:	add	r2, r0, #4
   48dec:	add	r1, r1, #4
   48df0:	mov	r0, r4
   48df4:	bl	440bc <__assert_fail@plt+0x31640>
   48df8:	cmp	r0, #0
   48dfc:	str	r0, [fp, #-32]	; 0xffffffe0
   48e00:	bne	4921c <__assert_fail@plt+0x367a0>
   48e04:	ldr	r1, [sp, #60]	; 0x3c
   48e08:	sub	r0, fp, #32
   48e0c:	mov	r2, r4
   48e10:	bl	45730 <__assert_fail@plt+0x32cb4>
   48e14:	str	r0, [r5, r6, lsl #2]
   48e18:	ldr	r0, [fp, #-36]	; 0xffffffdc
   48e1c:	bl	32c40 <__assert_fail@plt+0x201c4>
   48e20:	ldr	r9, [fp, #-32]	; 0xffffffe0
   48e24:	ldr	r3, [fp, #-80]	; 0xffffffb0
   48e28:	ldr	r4, [sp, #72]	; 0x48
   48e2c:	mov	r7, r8
   48e30:	cmp	r9, #0
   48e34:	bne	49190 <__assert_fail@plt+0x36714>
   48e38:	add	r0, r6, #1
   48e3c:	cmp	r6, r3
   48e40:	blt	48dc8 <__assert_fail@plt+0x3634c>
   48e44:	b	48e58 <__assert_fail@plt+0x363dc>
   48e48:	str	r0, [r5, r6, lsl #2]
   48e4c:	add	r0, r6, #1
   48e50:	cmp	r6, r3
   48e54:	blt	48dc8 <__assert_fail@plt+0x3634c>
   48e58:	ldr	r6, [sp, #84]	; 0x54
   48e5c:	mov	r0, r3
   48e60:	str	r6, [r7, r0, lsl #2]
   48e64:	ldr	r0, [sp, #40]	; 0x28
   48e68:	str	r7, [sp, #32]
   48e6c:	str	sl, [sp, #48]	; 0x30
   48e70:	cmp	r0, #1
   48e74:	blt	48f08 <__assert_fail@plt+0x3648c>
   48e78:	ldr	r5, [sp, #80]	; 0x50
   48e7c:	ldr	ip, [sp, #24]
   48e80:	ldr	r8, [sp, #56]	; 0x38
   48e84:	subs	r0, r0, #1
   48e88:	mov	r9, #1
   48e8c:	mov	r1, #0
   48e90:	beq	48eb8 <__assert_fail@plt+0x3643c>
   48e94:	mov	r2, r0
   48e98:	add	r3, r1, r2
   48e9c:	lsr	r7, r3, #1
   48ea0:	ldr	r6, [sl, r7, lsl #2]
   48ea4:	cmp	r6, r4
   48ea8:	movge	r2, r7
   48eac:	addlt	r1, r9, r3, lsr #1
   48eb0:	cmp	r1, r2
   48eb4:	bcc	48e98 <__assert_fail@plt+0x3641c>
   48eb8:	ldr	r2, [sl, r1, lsl #2]
   48ebc:	cmp	r2, r4
   48ec0:	mov	r2, r1
   48ec4:	mvnne	r2, #0
   48ec8:	cmp	r2, #0
   48ecc:	blt	48f24 <__assert_fail@plt+0x364a8>
   48ed0:	ldr	r3, [sp, #40]	; 0x28
   48ed4:	ldr	r7, [sp, #60]	; 0x3c
   48ed8:	cmp	r3, r2
   48edc:	ble	48f34 <__assert_fail@plt+0x364b8>
   48ee0:	cmp	r0, r2
   48ee4:	str	r0, [fp, #-52]	; 0xffffffcc
   48ee8:	ble	48f40 <__assert_fail@plt+0x364c4>
   48eec:	ldr	r3, [sp, #40]	; 0x28
   48ef0:	mvn	r2, r1
   48ef4:	add	r3, r3, r2
   48ef8:	cmp	r3, #4
   48efc:	bcs	48f4c <__assert_fail@plt+0x364d0>
   48f00:	mov	r2, r1
   48f04:	b	48fa4 <__assert_fail@plt+0x36528>
   48f08:	ldr	r5, [sp, #80]	; 0x50
   48f0c:	ldr	ip, [sp, #24]
   48f10:	ldr	lr, [sp, #36]	; 0x24
   48f14:	ldr	r8, [sp, #56]	; 0x38
   48f18:	ldr	r7, [sp, #60]	; 0x3c
   48f1c:	mov	r9, #1
   48f20:	b	48f90 <__assert_fail@plt+0x36514>
   48f24:	ldr	r0, [sp, #12]
   48f28:	ldr	r7, [sp, #60]	; 0x3c
   48f2c:	str	r0, [sp, #28]
   48f30:	b	48f8c <__assert_fail@plt+0x36510>
   48f34:	ldr	r0, [sp, #12]
   48f38:	str	r0, [sp, #28]
   48f3c:	b	48f8c <__assert_fail@plt+0x36510>
   48f40:	ldr	r1, [sp, #12]
   48f44:	str	r1, [sp, #28]
   48f48:	b	48f88 <__assert_fail@plt+0x3650c>
   48f4c:	bic	r6, r3, #3
   48f50:	add	r2, r1, r6
   48f54:	add	r1, sl, r1, lsl #2
   48f58:	mov	r7, r6
   48f5c:	add	r1, r1, #4
   48f60:	sub	r5, r1, #4
   48f64:	vld1.32	{d16-d17}, [r1]!
   48f68:	subs	r7, r7, #4
   48f6c:	vst1.32	{d16-d17}, [r5]
   48f70:	bne	48f60 <__assert_fail@plt+0x364e4>
   48f74:	ldr	r5, [sp, #80]	; 0x50
   48f78:	ldr	r7, [sp, #60]	; 0x3c
   48f7c:	cmp	r3, r6
   48f80:	bne	48fa4 <__assert_fail@plt+0x36528>
   48f84:	str	sl, [sp, #28]
   48f88:	str	r0, [sp, #40]	; 0x28
   48f8c:	ldr	lr, [sp, #36]	; 0x24
   48f90:	ldr	r0, [sp, #64]	; 0x40
   48f94:	add	r1, r4, r4, lsl #1
   48f98:	ldr	r0, [r0, #116]	; 0x74
   48f9c:	add	r0, r0, r1, lsl #3
   48fa0:	b	4915c <__assert_fail@plt+0x366e0>
   48fa4:	ldr	lr, [sp, #36]	; 0x24
   48fa8:	add	r1, sl, r2, lsl #2
   48fac:	ldr	r1, [r1, #4]
   48fb0:	str	r1, [sl, r2, lsl #2]
   48fb4:	add	r2, r2, #1
   48fb8:	cmp	r0, r2
   48fbc:	bne	48fa8 <__assert_fail@plt+0x3652c>
   48fc0:	str	sl, [sp, #28]
   48fc4:	str	r0, [sp, #40]	; 0x28
   48fc8:	b	48f90 <__assert_fail@plt+0x36514>
   48fcc:	ldr	r0, [sp, #16]
   48fd0:	ldr	sl, [sp, #48]	; 0x30
   48fd4:	ldr	r6, [sp, #28]
   48fd8:	cmp	r0, r4
   48fdc:	beq	48c3c <__assert_fail@plt+0x361c0>
   48fe0:	b	48c6c <__assert_fail@plt+0x361f0>
   48fe4:	ldr	r0, [sl]
   48fe8:	cmp	r0, r8
   48fec:	bne	49158 <__assert_fail@plt+0x366dc>
   48ff0:	ldr	r0, [sl, #8]
   48ff4:	ldr	r1, [sl, #12]
   48ff8:	subs	r0, r1, r0
   48ffc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   49000:	add	r0, r0, r1
   49004:	str	r0, [sp, #84]	; 0x54
   49008:	beq	4912c <__assert_fail@plt+0x366b0>
   4900c:	ldr	r0, [r7, #12]
   49010:	add	r0, r0, r8, lsl #2
   49014:	ldr	r1, [r5, #12]
   49018:	ldr	r2, [sp, #84]	; 0x54
   4901c:	cmp	r2, r1
   49020:	bgt	49158 <__assert_fail@plt+0x366dc>
   49024:	ldr	r1, [r5]
   49028:	ldr	r1, [r1, r2, lsl #2]
   4902c:	cmp	r1, #0
   49030:	beq	49158 <__assert_fail@plt+0x366dc>
   49034:	ldr	r2, [r1, #8]
   49038:	cmp	r2, #1
   4903c:	blt	49158 <__assert_fail@plt+0x366dc>
   49040:	ldr	r7, [r0]
   49044:	ldr	r0, [r1, #12]
   49048:	subs	r2, r2, #1
   4904c:	mov	r1, #0
   49050:	beq	49074 <__assert_fail@plt+0x365f8>
   49054:	add	r3, r1, r2
   49058:	lsr	r6, r3, #1
   4905c:	ldr	r5, [r0, r6, lsl #2]
   49060:	cmp	r5, r7
   49064:	movge	r2, r6
   49068:	addlt	r1, r9, r3, lsr #1
   4906c:	cmp	r1, r2
   49070:	bcc	49054 <__assert_fail@plt+0x365d8>
   49074:	ldr	r0, [r0, r1, lsl #2]
   49078:	cmp	r0, r7
   4907c:	bne	49150 <__assert_fail@plt+0x366d4>
   49080:	str	r7, [sp, #44]	; 0x2c
   49084:	ldr	r7, [sp, #64]	; 0x40
   49088:	str	r4, [sp, #72]	; 0x48
   4908c:	ldr	r0, [r7, #108]	; 0x6c
   49090:	cmp	r0, #1
   49094:	blt	4893c <__assert_fail@plt+0x35ec0>
   49098:	ldr	r1, [r7, #116]	; 0x74
   4909c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   490a0:	mov	r9, #0
   490a4:	mov	r2, r0
   490a8:	mov	r8, #1
   490ac:	add	r3, r2, r9
   490b0:	add	r3, r3, r3, lsr #31
   490b4:	asr	r6, r3, #1
   490b8:	add	r5, r6, r6, lsl #1
   490bc:	add	r5, r1, r5, lsl #3
   490c0:	ldr	r5, [r5, #4]
   490c4:	cmp	r5, r4
   490c8:	addlt	r9, r8, r3, asr #1
   490cc:	movge	r2, r6
   490d0:	cmp	r9, r2
   490d4:	blt	490ac <__assert_fail@plt+0x36630>
   490d8:	cmp	r9, r0
   490dc:	bge	4894c <__assert_fail@plt+0x35ed0>
   490e0:	ldr	r1, [r7, #116]	; 0x74
   490e4:	add	r2, r9, r9, lsl #1
   490e8:	add	r1, r1, r2, lsl #3
   490ec:	ldr	r1, [r1, #4]
   490f0:	cmp	r1, r4
   490f4:	mvnne	r9, #0
   490f8:	cmp	r0, #1
   490fc:	bge	48958 <__assert_fail@plt+0x35edc>
   49100:	ldr	r4, [sp, #84]	; 0x54
   49104:	mov	r8, #0
   49108:	ldr	lr, [sp, #64]	; 0x40
   4910c:	cmp	r8, r0
   49110:	blt	489a4 <__assert_fail@plt+0x35f28>
   49114:	mvn	r8, #0
   49118:	ldr	r5, [sp, #80]	; 0x50
   4911c:	ldr	r4, [r5, #20]
   49120:	cmp	r4, #1
   49124:	bge	489cc <__assert_fail@plt+0x35f50>
   49128:	b	48b40 <__assert_fail@plt+0x360c4>
   4912c:	ldr	r0, [r7, #20]
   49130:	add	r1, r8, r8, lsl #1
   49134:	add	r0, r0, r1, lsl #2
   49138:	ldr	r0, [r0, #8]
   4913c:	ldr	r1, [r5, #12]
   49140:	ldr	r2, [sp, #84]	; 0x54
   49144:	cmp	r2, r1
   49148:	bgt	49158 <__assert_fail@plt+0x366dc>
   4914c:	b	49024 <__assert_fail@plt+0x365a8>
   49150:	ldr	r5, [sp, #80]	; 0x50
   49154:	ldr	r7, [sp, #60]	; 0x3c
   49158:	mov	r0, sl
   4915c:	add	sl, r0, #24
   49160:	ldrb	r0, [r0, #20]
   49164:	add	r4, r4, #1
   49168:	cmp	r0, #0
   4916c:	bne	48fe4 <__assert_fail@plt+0x36568>
   49170:	ldr	r1, [sp, #68]	; 0x44
   49174:	ldr	sl, [sp, #48]	; 0x30
   49178:	ldr	r4, [fp, #-80]	; 0xffffffb0
   4917c:	add	lr, lr, #1
   49180:	ldr	r0, [r1, #4]
   49184:	cmp	lr, r0
   49188:	blt	488d8 <__assert_fail@plt+0x35e5c>
   4918c:	mov	r9, #0
   49190:	ldr	r0, [fp, #-72]	; 0xffffffb8
   49194:	cmp	r0, #0
   49198:	beq	491a4 <__assert_fail@plt+0x36728>
   4919c:	mov	r0, sl
   491a0:	bl	32c40 <__assert_fail@plt+0x201c4>
   491a4:	cmp	r9, #0
   491a8:	str	r9, [fp, #-76]	; 0xffffffb4
   491ac:	moveq	r9, #0
   491b0:	mov	r0, r9
   491b4:	sub	sp, fp, #28
   491b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   491bc:	mov	ip, #0
   491c0:	cmp	ip, lr
   491c4:	blt	48870 <__assert_fail@plt+0x35df4>
   491c8:	mov	r0, #0
   491cc:	str	r0, [fp, #-76]	; 0xffffffb4
   491d0:	mov	r9, #0
   491d4:	mov	r0, r9
   491d8:	sub	sp, fp, #28
   491dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   491e0:	mov	r9, r0
   491e4:	str	r0, [fp, #-76]	; 0xffffffb4
   491e8:	mov	r0, r9
   491ec:	sub	sp, fp, #28
   491f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   491f4:	str	r2, [fp, #-76]	; 0xffffffb4
   491f8:	mov	r9, #0
   491fc:	mov	r0, r9
   49200:	sub	sp, fp, #28
   49204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49208:	str	r0, [fp, #-72]	; 0xffffffb8
   4920c:	str	r9, [fp, #-76]	; 0xffffffb4
   49210:	mov	r0, r9
   49214:	sub	sp, fp, #28
   49218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4921c:	mov	r9, r0
   49220:	ldr	r0, [fp, #-72]	; 0xffffffb8
   49224:	cmp	r0, #0
   49228:	bne	4919c <__assert_fail@plt+0x36720>
   4922c:	b	491a4 <__assert_fail@plt+0x36728>
   49230:	mov	r9, r0
   49234:	mov	r0, r9
   49238:	sub	sp, fp, #28
   4923c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49240:	mov	sl, #0
   49244:	mov	r9, #12
   49248:	str	sl, [fp, #-56]	; 0xffffffc8
   4924c:	str	sl, [fp, #-52]	; 0xffffffcc
   49250:	ldr	r0, [fp, #-72]	; 0xffffffb8
   49254:	cmp	r0, #0
   49258:	bne	4919c <__assert_fail@plt+0x36720>
   4925c:	b	491a4 <__assert_fail@plt+0x36728>
   49260:	mov	r9, #12
   49264:	ldr	r0, [fp, #-72]	; 0xffffffb8
   49268:	cmp	r0, #0
   4926c:	bne	4919c <__assert_fail@plt+0x36720>
   49270:	b	491a4 <__assert_fail@plt+0x36728>
   49274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49278:	add	fp, sp, #28
   4927c:	sub	sp, sp, #12
   49280:	ldr	ip, [r1, #4]
   49284:	mov	sl, r0
   49288:	mov	r0, #0
   4928c:	cmp	ip, #0
   49290:	ldrne	lr, [r2, #4]
   49294:	cmpne	lr, #0
   49298:	bne	492a4 <__assert_fail@plt+0x36828>
   4929c:	sub	sp, fp, #28
   492a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   492a4:	mov	r7, r1
   492a8:	ldr	r1, [sl, #4]
   492ac:	ldr	r6, [sl]
   492b0:	add	r3, lr, ip
   492b4:	add	r4, r1, r3
   492b8:	cmp	r4, r6
   492bc:	ble	49300 <__assert_fail@plt+0x36884>
   492c0:	mov	r5, r2
   492c4:	mov	r2, sl
   492c8:	add	r4, r6, r3
   492cc:	ldr	r0, [r2, #8]!
   492d0:	lsl	r1, r4, #2
   492d4:	str	r2, [sp, #8]
   492d8:	bl	36328 <__assert_fail@plt+0x238ac>
   492dc:	cmp	r0, #0
   492e0:	beq	49484 <__assert_fail@plt+0x36a08>
   492e4:	str	r4, [sl]
   492e8:	str	r0, [sl, #8]
   492ec:	mov	r2, r5
   492f0:	ldr	r1, [sl, #4]
   492f4:	ldr	lr, [r5, #4]
   492f8:	ldr	ip, [r7, #4]
   492fc:	b	49308 <__assert_fail@plt+0x3688c>
   49300:	add	r0, sl, #8
   49304:	str	r0, [sp, #8]
   49308:	str	r2, [sp, #4]
   4930c:	ldr	r2, [r2, #8]
   49310:	ldr	r4, [r7, #8]
   49314:	add	r3, ip, r1
   49318:	sub	r8, r1, #1
   4931c:	add	r9, r3, lr
   49320:	sub	ip, ip, #1
   49324:	sub	r3, lr, #1
   49328:	ldr	r1, [r2, r3, lsl #2]
   4932c:	ldr	r6, [r4, ip, lsl #2]
   49330:	cmp	r6, r1
   49334:	beq	49360 <__assert_fail@plt+0x368e4>
   49338:	blt	49350 <__assert_fail@plt+0x368d4>
   4933c:	sub	r5, ip, #1
   49340:	cmp	ip, #0
   49344:	mov	ip, r5
   49348:	bgt	4932c <__assert_fail@plt+0x368b0>
   4934c:	b	493dc <__assert_fail@plt+0x36960>
   49350:	cmp	lr, #2
   49354:	mov	lr, r3
   49358:	bge	49324 <__assert_fail@plt+0x368a8>
   4935c:	b	493dc <__assert_fail@plt+0x36960>
   49360:	mov	r0, r9
   49364:	cmp	r8, #0
   49368:	blt	493b4 <__assert_fail@plt+0x36938>
   4936c:	ldr	r1, [sp, #8]
   49370:	ldr	r9, [r1]
   49374:	mov	r1, r8
   49378:	ldr	r5, [r9, r1, lsl #2]
   4937c:	cmp	r5, r6
   49380:	ble	49398 <__assert_fail@plt+0x3691c>
   49384:	sub	r8, r1, #1
   49388:	cmp	r1, #0
   4938c:	mov	r1, r8
   49390:	bgt	49378 <__assert_fail@plt+0x368fc>
   49394:	b	493b4 <__assert_fail@plt+0x36938>
   49398:	mov	r8, r1
   4939c:	bne	493b4 <__assert_fail@plt+0x36938>
   493a0:	mov	r8, r1
   493a4:	mov	r9, r0
   493a8:	cmp	ip, #1
   493ac:	bge	493d0 <__assert_fail@plt+0x36954>
   493b0:	b	493dc <__assert_fail@plt+0x36960>
   493b4:	ldr	r1, [sp, #8]
   493b8:	mov	r9, r0
   493bc:	sub	r9, r0, #1
   493c0:	ldr	r1, [r1]
   493c4:	str	r6, [r1, r9, lsl #2]
   493c8:	cmp	ip, #1
   493cc:	blt	493dc <__assert_fail@plt+0x36960>
   493d0:	cmp	lr, #2
   493d4:	mov	lr, r3
   493d8:	bge	49320 <__assert_fail@plt+0x368a4>
   493dc:	ldr	lr, [r7, #4]
   493e0:	ldr	r7, [sp, #4]
   493e4:	ldr	r2, [sl, #4]
   493e8:	ldr	r0, [sl, #8]
   493ec:	ldr	r4, [r7, #4]
   493f0:	subs	r1, r2, #1
   493f4:	add	r3, r1, lr
   493f8:	add	r3, r3, r4
   493fc:	sub	r5, r3, r9
   49400:	add	r6, r5, #1
   49404:	cmpge	r5, #0
   49408:	add	r7, r6, r2
   4940c:	str	r7, [sl, #4]
   49410:	blt	49468 <__assert_fail@plt+0x369ec>
   49414:	add	r2, r2, r4
   49418:	add	r2, r2, lr
   4941c:	sub	r2, r2, r9
   49420:	add	r7, r0, r2, lsl #2
   49424:	ldr	r2, [r0, r1, lsl #2]
   49428:	ldr	r5, [r0, r3, lsl #2]
   4942c:	cmp	r5, r2
   49430:	bgt	4944c <__assert_fail@plt+0x369d0>
   49434:	str	r2, [r7, r1, lsl #2]
   49438:	sub	r2, r1, #1
   4943c:	cmp	r1, #0
   49440:	mov	r1, r2
   49444:	bgt	49424 <__assert_fail@plt+0x369a8>
   49448:	b	49468 <__assert_fail@plt+0x369ec>
   4944c:	str	r5, [r7, r1, lsl #2]
   49450:	sub	r7, r7, #4
   49454:	subs	r6, r6, #1
   49458:	sub	r3, r3, #1
   4945c:	mov	r2, #0
   49460:	bne	49424 <__assert_fail@plt+0x369a8>
   49464:	b	4946c <__assert_fail@plt+0x369f0>
   49468:	mov	r2, r6
   4946c:	add	r1, r0, r9, lsl #2
   49470:	lsl	r2, r2, #2
   49474:	bl	124b8 <memcpy@plt>
   49478:	mov	r0, #0
   4947c:	sub	sp, fp, #28
   49480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49484:	mov	r0, #12
   49488:	sub	sp, fp, #28
   4948c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49494:	add	fp, sp, #28
   49498:	sub	sp, sp, #44	; 0x2c
   4949c:	mov	ip, r0
   494a0:	ldr	r0, [r0, #28]
   494a4:	str	r3, [sp, #4]
   494a8:	add	r3, r1, r1, lsl #1
   494ac:	mov	r9, #0
   494b0:	str	r9, [sp, #36]	; 0x24
   494b4:	str	r9, [sp, #32]
   494b8:	str	r9, [sp, #40]	; 0x28
   494bc:	add	r3, r0, r3, lsl #2
   494c0:	mov	r0, r3
   494c4:	ldr	lr, [r0, #4]!
   494c8:	cmp	lr, #1
   494cc:	str	r0, [sp, #24]
   494d0:	blt	497e0 <__assert_fail@plt+0x36d64>
   494d4:	add	r4, r3, #8
   494d8:	mov	sl, #1
   494dc:	str	r2, [sp, #28]
   494e0:	str	r3, [sp]
   494e4:	str	r1, [sp, #12]
   494e8:	str	ip, [sp, #8]
   494ec:	str	r4, [sp, #20]
   494f0:	ldr	r3, [r4]
   494f4:	ldr	r0, [r3, r9, lsl #2]
   494f8:	cmp	r0, r1
   494fc:	beq	496a4 <__assert_fail@plt+0x36c28>
   49500:	ldr	r2, [ip]
   49504:	add	r2, r2, r0, lsl #3
   49508:	ldrb	r2, [r2, #4]
   4950c:	tst	r2, #8
   49510:	beq	496a4 <__assert_fail@plt+0x36c28>
   49514:	ldr	r2, [ip, #20]
   49518:	add	r0, r0, r0, lsl #1
   4951c:	mvn	r8, #0
   49520:	str	r0, [sp, #16]
   49524:	add	r0, r2, r0, lsl #2
   49528:	ldr	r7, [r0, #4]
   4952c:	ldr	r0, [r0, #8]
   49530:	cmp	r7, #2
   49534:	ldr	r5, [r0]
   49538:	ldrge	r8, [r0, #4]
   4953c:	cmp	lr, #1
   49540:	blt	49580 <__assert_fail@plt+0x36b04>
   49544:	mov	r2, #0
   49548:	subs	r7, lr, #1
   4954c:	beq	49570 <__assert_fail@plt+0x36af4>
   49550:	add	r6, r2, r7
   49554:	lsr	r4, r6, #1
   49558:	ldr	r0, [r3, r4, lsl #2]
   4955c:	cmp	r0, r5
   49560:	movge	r7, r4
   49564:	addlt	r2, sl, r6, lsr #1
   49568:	cmp	r2, r7
   4956c:	bcc	49550 <__assert_fail@plt+0x36ad4>
   49570:	ldr	r0, [r3, r2, lsl #2]
   49574:	ldr	r4, [sp, #20]
   49578:	cmp	r0, r5
   4957c:	beq	495dc <__assert_fail@plt+0x36b60>
   49580:	ldr	r0, [sp, #28]
   49584:	ldr	r0, [r0, #4]
   49588:	cmp	r0, #1
   4958c:	blt	495dc <__assert_fail@plt+0x36b60>
   49590:	subs	r6, r0, #1
   49594:	ldr	r0, [sp, #28]
   49598:	mov	r7, #0
   4959c:	ldr	r1, [r0, #8]
   495a0:	beq	495c4 <__assert_fail@plt+0x36b48>
   495a4:	add	r0, r7, r6
   495a8:	lsr	r4, r0, #1
   495ac:	ldr	ip, [r1, r4, lsl #2]
   495b0:	cmp	ip, r5
   495b4:	movge	r6, r4
   495b8:	addlt	r7, sl, r0, lsr #1
   495bc:	cmp	r7, r6
   495c0:	bcc	495a4 <__assert_fail@plt+0x36b28>
   495c4:	ldr	r0, [r1, r7, lsl #2]
   495c8:	ldr	r1, [sp, #12]
   495cc:	ldr	ip, [sp, #8]
   495d0:	ldr	r4, [sp, #20]
   495d4:	cmp	r0, r5
   495d8:	beq	49674 <__assert_fail@plt+0x36bf8>
   495dc:	cmp	r8, #1
   495e0:	blt	496a4 <__assert_fail@plt+0x36c28>
   495e4:	cmp	lr, #1
   495e8:	blt	49624 <__assert_fail@plt+0x36ba8>
   495ec:	mov	r2, #0
   495f0:	subs	r7, lr, #1
   495f4:	beq	49618 <__assert_fail@plt+0x36b9c>
   495f8:	add	r0, r2, r7
   495fc:	lsr	r6, r0, #1
   49600:	ldr	r5, [r3, r6, lsl #2]
   49604:	cmp	r5, r8
   49608:	movge	r7, r6
   4960c:	addlt	r2, sl, r0, lsr #1
   49610:	cmp	r2, r7
   49614:	bcc	495f8 <__assert_fail@plt+0x36b7c>
   49618:	ldr	r0, [r3, r2, lsl #2]
   4961c:	cmp	r0, r8
   49620:	beq	496a4 <__assert_fail@plt+0x36c28>
   49624:	ldr	r2, [sp, #28]
   49628:	ldr	r0, [r2, #4]
   4962c:	cmp	r0, #1
   49630:	blt	496a4 <__assert_fail@plt+0x36c28>
   49634:	ldr	r4, [r2, #8]
   49638:	subs	r7, r0, #1
   4963c:	mov	r3, #0
   49640:	beq	49664 <__assert_fail@plt+0x36be8>
   49644:	add	r0, r3, r7
   49648:	lsr	r6, r0, #1
   4964c:	ldr	r5, [r4, r6, lsl #2]
   49650:	cmp	r5, r8
   49654:	movge	r7, r6
   49658:	addlt	r3, sl, r0, lsr #1
   4965c:	cmp	r3, r7
   49660:	bcc	49644 <__assert_fail@plt+0x36bc8>
   49664:	ldr	r0, [r4, r3, lsl #2]
   49668:	ldr	r4, [sp, #20]
   4966c:	cmp	r0, r8
   49670:	bne	496a4 <__assert_fail@plt+0x36c28>
   49674:	ldr	r0, [ip, #28]
   49678:	ldr	r1, [sp, #16]
   4967c:	add	r2, r0, r1, lsl #2
   49680:	ldr	r1, [sp, #4]
   49684:	add	r0, sp, #32
   49688:	bl	49274 <__assert_fail@plt+0x367f8>
   4968c:	cmp	r0, #0
   49690:	bne	498b8 <__assert_fail@plt+0x36e3c>
   49694:	ldr	r0, [sp, #24]
   49698:	ldr	r1, [sp, #12]
   4969c:	ldr	ip, [sp, #8]
   496a0:	ldr	lr, [r0]
   496a4:	add	r9, r9, #1
   496a8:	cmp	r9, lr
   496ac:	blt	494f0 <__assert_fail@plt+0x36a74>
   496b0:	ldr	r2, [sp, #28]
   496b4:	ldr	r0, [sp]
   496b8:	cmp	lr, #0
   496bc:	ble	497e0 <__assert_fail@plt+0x36d64>
   496c0:	ldr	r1, [sp, #36]	; 0x24
   496c4:	ldr	r9, [r0, #8]
   496c8:	ldr	r0, [sp, #40]	; 0x28
   496cc:	subs	lr, r1, #1
   496d0:	str	r9, [sp, #20]
   496d4:	blt	497f8 <__assert_fail@plt+0x36d7c>
   496d8:	mov	ip, #0
   496dc:	mov	r7, #1
   496e0:	b	49704 <__assert_fail@plt+0x36c88>
   496e4:	add	r2, r5, r1, lsl #2
   496e8:	ldr	r2, [r2, #4]
   496ec:	str	r2, [r5, r1, lsl #2]
   496f0:	add	r1, r1, #1
   496f4:	ldr	r2, [r3, #4]
   496f8:	cmp	r1, r2
   496fc:	blt	496e4 <__assert_fail@plt+0x36c68>
   49700:	b	497c8 <__assert_fail@plt+0x36d4c>
   49704:	ldr	r6, [r9, ip, lsl #2]
   49708:	cmp	lr, #0
   4970c:	mov	r1, #0
   49710:	beq	4973c <__assert_fail@plt+0x36cc0>
   49714:	mov	r1, #0
   49718:	mov	r2, lr
   4971c:	add	r5, r1, r2
   49720:	lsr	r4, r5, #1
   49724:	ldr	r3, [r0, r4, lsl #2]
   49728:	cmp	r3, r6
   4972c:	movge	r2, r4
   49730:	addlt	r1, r7, r5, lsr #1
   49734:	cmp	r1, r2
   49738:	bcc	4971c <__assert_fail@plt+0x36ca0>
   4973c:	ldr	r1, [r0, r1, lsl #2]
   49740:	cmp	r1, r6
   49744:	ldr	r1, [sp, #28]
   49748:	beq	497c8 <__assert_fail@plt+0x36d4c>
   4974c:	ldr	sl, [r1, #4]
   49750:	cmp	sl, #1
   49754:	blt	497c8 <__assert_fail@plt+0x36d4c>
   49758:	ldr	r5, [r1, #8]
   4975c:	subs	r4, sl, #1
   49760:	beq	49790 <__assert_fail@plt+0x36d14>
   49764:	mov	r1, #0
   49768:	mov	r8, r4
   4976c:	add	r3, r1, r4
   49770:	lsr	r2, r3, #1
   49774:	ldr	r9, [r5, r2, lsl #2]
   49778:	cmp	r9, r6
   4977c:	movge	r4, r2
   49780:	addlt	r1, r7, r3, lsr #1
   49784:	cmp	r1, r4
   49788:	bcc	4976c <__assert_fail@plt+0x36cf0>
   4978c:	b	49798 <__assert_fail@plt+0x36d1c>
   49790:	mov	r8, r4
   49794:	mov	r1, #0
   49798:	ldr	r2, [r5, r1, lsl #2]
   4979c:	ldr	r3, [sp, #28]
   497a0:	ldr	r9, [sp, #20]
   497a4:	mov	r4, r1
   497a8:	cmp	r2, r6
   497ac:	mvnne	r4, #0
   497b0:	cmp	r4, #0
   497b4:	blt	497c8 <__assert_fail@plt+0x36d4c>
   497b8:	cmp	sl, r4
   497bc:	strgt	r8, [r3, #4]
   497c0:	cmpgt	r8, r4
   497c4:	bgt	496e4 <__assert_fail@plt+0x36c68>
   497c8:	ldr	r1, [sp, #24]
   497cc:	add	ip, ip, #1
   497d0:	ldr	r1, [r1]
   497d4:	cmp	ip, r1
   497d8:	blt	49704 <__assert_fail@plt+0x36c88>
   497dc:	b	497e4 <__assert_fail@plt+0x36d68>
   497e0:	ldr	r0, [sp, #40]	; 0x28
   497e4:	bl	32c40 <__assert_fail@plt+0x201c4>
   497e8:	mov	r5, #0
   497ec:	mov	r0, r5
   497f0:	sub	sp, fp, #28
   497f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   497f8:	ldr	r7, [r2, #4]
   497fc:	mov	sl, #0
   49800:	mov	r9, #1
   49804:	cmp	r7, #1
   49808:	blt	498a0 <__assert_fail@plt+0x36e24>
   4980c:	ldr	r1, [sp, #20]
   49810:	ldr	r6, [r2, #8]
   49814:	subs	lr, r7, #1
   49818:	mov	r5, #0
   4981c:	ldr	r1, [r1, sl, lsl #2]
   49820:	beq	49848 <__assert_fail@plt+0x36dcc>
   49824:	mov	r4, lr
   49828:	add	r3, r5, r4
   4982c:	lsr	r2, r3, #1
   49830:	ldr	ip, [r6, r2, lsl #2]
   49834:	cmp	ip, r1
   49838:	movge	r4, r2
   4983c:	addlt	r5, r9, r3, lsr #1
   49840:	cmp	r5, r4
   49844:	bcc	49828 <__assert_fail@plt+0x36dac>
   49848:	ldr	r2, [r6, r5, lsl #2]
   4984c:	cmp	r2, r1
   49850:	mov	r1, r5
   49854:	mvnne	r1, #0
   49858:	cmp	r1, #0
   4985c:	blt	4989c <__assert_fail@plt+0x36e20>
   49860:	ldr	r2, [sp, #28]
   49864:	cmp	r7, r1
   49868:	ble	498a0 <__assert_fail@plt+0x36e24>
   4986c:	cmp	lr, r1
   49870:	mov	r7, lr
   49874:	str	lr, [r2, #4]
   49878:	ble	498a0 <__assert_fail@plt+0x36e24>
   4987c:	add	r1, r6, r5, lsl #2
   49880:	ldr	r1, [r1, #4]
   49884:	str	r1, [r6, r5, lsl #2]
   49888:	add	r5, r5, #1
   4988c:	ldr	r7, [r2, #4]
   49890:	cmp	r5, r7
   49894:	blt	4987c <__assert_fail@plt+0x36e00>
   49898:	b	498a0 <__assert_fail@plt+0x36e24>
   4989c:	ldr	r2, [sp, #28]
   498a0:	ldr	r1, [sp, #24]
   498a4:	add	sl, sl, #1
   498a8:	ldr	r1, [r1]
   498ac:	cmp	sl, r1
   498b0:	blt	49804 <__assert_fail@plt+0x36d88>
   498b4:	b	497e4 <__assert_fail@plt+0x36d68>
   498b8:	mov	r5, r0
   498bc:	ldr	r0, [sp, #40]	; 0x28
   498c0:	bl	32c40 <__assert_fail@plt+0x201c4>
   498c4:	mov	r0, r5
   498c8:	sub	sp, fp, #28
   498cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   498d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   498d4:	add	fp, sp, #28
   498d8:	sub	sp, sp, #44	; 0x2c
   498dc:	ldr	r4, [r0, #84]	; 0x54
   498e0:	mov	r7, r0
   498e4:	str	r1, [fp, #-32]	; 0xffffffe0
   498e8:	add	r1, r3, r3, lsl #1
   498ec:	mov	r6, r2
   498f0:	str	r3, [sp, #36]	; 0x24
   498f4:	ldr	r0, [r4, #24]
   498f8:	add	r0, r0, r1, lsl #2
   498fc:	mov	r2, r0
   49900:	ldr	r1, [r2, #4]!
   49904:	cmp	r1, #1
   49908:	str	r2, [sp, #28]
   4990c:	blt	49bc0 <__assert_fail@plt+0x37144>
   49910:	mov	r1, #1
   49914:	cmp	r6, #31
   49918:	add	r0, r0, #8
   4991c:	mov	sl, #0
   49920:	mvn	r2, r1, lsl r6
   49924:	lsl	r1, r1, r6
   49928:	str	r0, [sp, #32]
   4992c:	str	r2, [sp, #16]
   49930:	ldr	r2, [fp, #-32]	; 0xffffffe0
   49934:	str	r1, [sp, #24]
   49938:	mov	r1, #0
   4993c:	movwgt	r1, #1
   49940:	and	r3, r2, #2
   49944:	and	r0, r2, #1
   49948:	orr	r1, r1, r3, lsr #1
   4994c:	str	r3, [sp, #20]
   49950:	str	r0, [sp, #8]
   49954:	str	r1, [sp, #12]
   49958:	b	49a78 <__assert_fail@plt+0x36ffc>
   4995c:	ldr	r2, [sp, #12]
   49960:	cmp	r2, #0
   49964:	beq	499e4 <__assert_fail@plt+0x36f68>
   49968:	add	r5, r0, r1, lsl #3
   4996c:	ldr	r0, [r5]
   49970:	cmp	r0, r8
   49974:	bne	499d0 <__assert_fail@plt+0x36f54>
   49978:	ldr	r0, [r4, #20]
   4997c:	add	r1, r8, r8, lsl #1
   49980:	add	r0, r0, r1, lsl #2
   49984:	ldr	r0, [r0, #8]
   49988:	ldr	r3, [r0]
   4998c:	ldr	r0, [sp, #36]	; 0x24
   49990:	cmp	r3, r0
   49994:	beq	49bd0 <__assert_fail@plt+0x37154>
   49998:	ldr	r0, [fp, #8]
   4999c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   499a0:	mov	r2, r6
   499a4:	str	r0, [sp]
   499a8:	mov	r0, r7
   499ac:	bl	498d0 <__assert_fail@plt+0x36e54>
   499b0:	cmp	r0, #0
   499b4:	beq	499c4 <__assert_fail@plt+0x36f48>
   499b8:	cmn	r0, #1
   499bc:	bne	499d0 <__assert_fail@plt+0x36f54>
   499c0:	b	49be4 <__assert_fail@plt+0x37168>
   499c4:	ldr	r0, [sp, #20]
   499c8:	cmp	r0, #0
   499cc:	bne	49be0 <__assert_fail@plt+0x37164>
   499d0:	ldrb	r0, [r5, #20]
   499d4:	add	r5, r5, #24
   499d8:	cmp	r0, #0
   499dc:	bne	4996c <__assert_fail@plt+0x36ef0>
   499e0:	b	49bac <__assert_fail@plt+0x37130>
   499e4:	add	r0, r0, r1, lsl #3
   499e8:	add	r5, r0, #16
   499ec:	ldr	r0, [r5, #-16]
   499f0:	cmp	r0, r8
   499f4:	bne	49a40 <__assert_fail@plt+0x36fc4>
   499f8:	ldr	r0, [r4, #20]
   499fc:	add	r1, r8, r8, lsl #1
   49a00:	add	r0, r0, r1, lsl #2
   49a04:	ldr	r0, [r0, #8]
   49a08:	ldr	r3, [r0]
   49a0c:	ldr	r0, [sp, #36]	; 0x24
   49a10:	cmp	r3, r0
   49a14:	beq	49bd0 <__assert_fail@plt+0x37154>
   49a18:	ldr	r0, [fp, #8]
   49a1c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   49a20:	mov	r2, r6
   49a24:	str	r0, [sp]
   49a28:	mov	r0, r7
   49a2c:	bl	498d0 <__assert_fail@plt+0x36e54>
   49a30:	cmp	r0, #0
   49a34:	beq	49a54 <__assert_fail@plt+0x36fd8>
   49a38:	cmn	r0, #1
   49a3c:	beq	49be4 <__assert_fail@plt+0x37168>
   49a40:	ldrb	r0, [r5, #4]
   49a44:	add	r5, r5, #24
   49a48:	cmp	r0, #0
   49a4c:	bne	499ec <__assert_fail@plt+0x36f70>
   49a50:	b	49bac <__assert_fail@plt+0x37130>
   49a54:	ldr	r0, [r5]
   49a58:	ldr	r1, [sp, #16]
   49a5c:	and	r0, r0, r1
   49a60:	str	r0, [r5]
   49a64:	ldrb	r0, [r5, #4]
   49a68:	add	r5, r5, #24
   49a6c:	cmp	r0, #0
   49a70:	bne	499ec <__assert_fail@plt+0x36f70>
   49a74:	b	49bac <__assert_fail@plt+0x37130>
   49a78:	ldr	r0, [sp, #32]
   49a7c:	ldr	r0, [r0]
   49a80:	ldr	r8, [r0, sl, lsl #2]
   49a84:	ldr	r0, [r4]
   49a88:	add	r1, r0, r8, lsl #3
   49a8c:	ldrb	r1, [r1, #4]
   49a90:	cmp	r1, #9
   49a94:	beq	49b78 <__assert_fail@plt+0x370fc>
   49a98:	cmp	r1, #8
   49a9c:	beq	49b94 <__assert_fail@plt+0x37118>
   49aa0:	cmp	r1, #4
   49aa4:	bne	49bac <__assert_fail@plt+0x37130>
   49aa8:	ldr	r0, [fp, #8]
   49aac:	cmn	r0, #1
   49ab0:	beq	49bac <__assert_fail@plt+0x37130>
   49ab4:	ldr	r1, [fp, #8]
   49ab8:	ldr	r0, [r7, #116]	; 0x74
   49abc:	cmp	r6, #31
   49ac0:	add	r1, r1, r1, lsl #1
   49ac4:	bgt	4995c <__assert_fail@plt+0x36ee0>
   49ac8:	add	r0, r0, r1, lsl #3
   49acc:	add	r9, r0, #16
   49ad0:	ldr	r0, [r9, #-16]
   49ad4:	cmp	r0, r8
   49ad8:	bne	49b64 <__assert_fail@plt+0x370e8>
   49adc:	ldr	r0, [r9]
   49ae0:	ldr	r1, [sp, #24]
   49ae4:	tst	r0, r1
   49ae8:	beq	49b64 <__assert_fail@plt+0x370e8>
   49aec:	ldr	r0, [r4, #20]
   49af0:	add	r1, r8, r8, lsl #1
   49af4:	add	r0, r0, r1, lsl #2
   49af8:	ldr	r0, [r0, #8]
   49afc:	ldr	r3, [r0]
   49b00:	ldr	r0, [sp, #36]	; 0x24
   49b04:	cmp	r3, r0
   49b08:	beq	49bd0 <__assert_fail@plt+0x37154>
   49b0c:	ldr	r0, [fp, #8]
   49b10:	ldr	r1, [fp, #-32]	; 0xffffffe0
   49b14:	mov	r2, r6
   49b18:	str	r0, [sp]
   49b1c:	mov	r0, r7
   49b20:	bl	498d0 <__assert_fail@plt+0x36e54>
   49b24:	cmp	r0, #0
   49b28:	beq	49b38 <__assert_fail@plt+0x370bc>
   49b2c:	cmn	r0, #1
   49b30:	bne	49b54 <__assert_fail@plt+0x370d8>
   49b34:	b	49be4 <__assert_fail@plt+0x37168>
   49b38:	ldr	r0, [sp, #12]
   49b3c:	cmp	r0, #0
   49b40:	beq	49b54 <__assert_fail@plt+0x370d8>
   49b44:	ldr	r0, [sp, #20]
   49b48:	cmp	r0, #0
   49b4c:	beq	49b64 <__assert_fail@plt+0x370e8>
   49b50:	b	49be0 <__assert_fail@plt+0x37164>
   49b54:	ldr	r0, [r9]
   49b58:	ldr	r1, [sp, #16]
   49b5c:	and	r0, r0, r1
   49b60:	str	r0, [r9]
   49b64:	ldrb	r0, [r9, #4]
   49b68:	add	r9, r9, #24
   49b6c:	cmp	r0, #0
   49b70:	bne	49ad0 <__assert_fail@plt+0x37054>
   49b74:	b	49bac <__assert_fail@plt+0x37130>
   49b78:	ldr	r1, [sp, #20]
   49b7c:	cmp	r1, #0
   49b80:	beq	49bac <__assert_fail@plt+0x37130>
   49b84:	ldr	r0, [r0, r8, lsl #3]
   49b88:	cmp	r0, r6
   49b8c:	bne	49bac <__assert_fail@plt+0x37130>
   49b90:	b	49be0 <__assert_fail@plt+0x37164>
   49b94:	ldr	r1, [sp, #8]
   49b98:	cmp	r1, #0
   49b9c:	beq	49bac <__assert_fail@plt+0x37130>
   49ba0:	ldr	r0, [r0, r8, lsl #3]
   49ba4:	cmp	r0, r6
   49ba8:	beq	49bec <__assert_fail@plt+0x37170>
   49bac:	ldr	r0, [sp, #28]
   49bb0:	add	sl, sl, #1
   49bb4:	ldr	r0, [r0]
   49bb8:	cmp	sl, r0
   49bbc:	blt	49a78 <__assert_fail@plt+0x36ffc>
   49bc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   49bc4:	ubfx	r0, r0, #1, #1
   49bc8:	sub	sp, fp, #28
   49bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49bd0:	ldr	r0, [sp, #8]
   49bd4:	rsb	r0, r0, #0
   49bd8:	sub	sp, fp, #28
   49bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49be0:	mov	r0, #0
   49be4:	sub	sp, fp, #28
   49be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49bec:	mvn	r0, #0
   49bf0:	sub	sp, fp, #28
   49bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49bf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49bfc:	add	fp, sp, #28
   49c00:	sub	sp, sp, #28
   49c04:	sub	sp, sp, #1024	; 0x400
   49c08:	ldrb	r3, [r0]
   49c0c:	mov	r5, r0
   49c10:	cmp	r3, #0
   49c14:	beq	49cc0 <__assert_fail@plt+0x37244>
   49c18:	mov	r0, #1
   49c1c:	mov	r2, #0
   49c20:	ldrb	r7, [r1, r2]
   49c24:	cmp	r7, #0
   49c28:	uxtbne	r3, r3
   49c2c:	subne	r3, r3, r7
   49c30:	clzne	r3, r3
   49c34:	lsrne	r3, r3, #5
   49c38:	andne	r0, r0, r3
   49c3c:	addne	r3, r5, r2
   49c40:	addne	r2, r2, #1
   49c44:	ldrbne	r3, [r3, #1]
   49c48:	cmpne	r3, #0
   49c4c:	bne	49c20 <__assert_fail@plt+0x371a4>
   49c50:	add	r4, r1, r2
   49c54:	mov	r6, r5
   49c58:	ldrb	r2, [r4]
   49c5c:	cmp	r2, #0
   49c60:	movwne	r6, #0
   49c64:	tst	r0, #1
   49c68:	cmpeq	r2, #0
   49c6c:	bne	49cd0 <__assert_fail@plt+0x37254>
   49c70:	sub	r8, r4, r1
   49c74:	ldrb	r1, [r1]
   49c78:	add	r0, r5, #1
   49c7c:	bl	12794 <strchr@plt>
   49c80:	mov	r6, r0
   49c84:	cmp	r8, #1
   49c88:	cmpne	r6, #0
   49c8c:	beq	49cd0 <__assert_fail@plt+0x37254>
   49c90:	add	r0, r5, r8
   49c94:	sub	r9, r4, r8
   49c98:	str	r6, [sp, #20]
   49c9c:	subs	r5, r0, r6
   49ca0:	movwcc	r5, #1
   49ca4:	cmp	r8, #31
   49ca8:	bhi	49cdc <__assert_fail@plt+0x37260>
   49cac:	cmp	r8, #3
   49cb0:	bcs	49e24 <__assert_fail@plt+0x373a8>
   49cb4:	sub	r2, r8, #1
   49cb8:	mov	sl, #1
   49cbc:	b	4a464 <__assert_fail@plt+0x379e8>
   49cc0:	ldrb	r0, [r1]
   49cc4:	cmp	r0, #0
   49cc8:	movne	r5, #0
   49ccc:	mov	r6, r5
   49cd0:	mov	r0, r6
   49cd4:	sub	sp, fp, #28
   49cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49cdc:	mvn	r1, #0
   49ce0:	mov	r0, #0
   49ce4:	mov	r2, #1
   49ce8:	mov	ip, #1
   49cec:	mov	r3, #1
   49cf0:	add	r6, r1, r3
   49cf4:	ldrb	r7, [r9, r2]
   49cf8:	ldrb	r6, [r9, r6]
   49cfc:	cmp	r7, r6
   49d00:	bcs	49d20 <__assert_fail@plt+0x372a4>
   49d04:	sub	ip, r2, r1
   49d08:	mov	r3, #1
   49d0c:	mov	r0, r2
   49d10:	add	r2, r3, r0
   49d14:	cmp	r2, r8
   49d18:	bcc	49cf0 <__assert_fail@plt+0x37274>
   49d1c:	b	49d78 <__assert_fail@plt+0x372fc>
   49d20:	bne	49d44 <__assert_fail@plt+0x372c8>
   49d24:	cmp	r3, ip
   49d28:	bne	49d68 <__assert_fail@plt+0x372ec>
   49d2c:	add	r0, r0, ip
   49d30:	mov	r3, #1
   49d34:	add	r2, r3, r0
   49d38:	cmp	r2, r8
   49d3c:	bcc	49cf0 <__assert_fail@plt+0x37274>
   49d40:	b	49d78 <__assert_fail@plt+0x372fc>
   49d44:	add	r2, r0, #1
   49d48:	mov	r1, r0
   49d4c:	mov	r3, #1
   49d50:	mov	ip, #1
   49d54:	mov	r0, r2
   49d58:	add	r2, r3, r0
   49d5c:	cmp	r2, r8
   49d60:	bcc	49cf0 <__assert_fail@plt+0x37274>
   49d64:	b	49d78 <__assert_fail@plt+0x372fc>
   49d68:	add	r3, r3, #1
   49d6c:	add	r2, r3, r0
   49d70:	cmp	r2, r8
   49d74:	bcc	49cf0 <__assert_fail@plt+0x37274>
   49d78:	cmp	r8, #2
   49d7c:	bcc	49f6c <__assert_fail@plt+0x374f0>
   49d80:	mvn	lr, #0
   49d84:	mov	r2, #0
   49d88:	mov	r3, #1
   49d8c:	mov	sl, #1
   49d90:	mov	r7, #1
   49d94:	add	r6, lr, r7
   49d98:	ldrb	r0, [r9, r3]
   49d9c:	ldrb	r6, [r9, r6]
   49da0:	cmp	r6, r0
   49da4:	bcs	49dc4 <__assert_fail@plt+0x37348>
   49da8:	sub	sl, r3, lr
   49dac:	mov	r7, #1
   49db0:	mov	r2, r3
   49db4:	add	r3, r7, r2
   49db8:	cmp	r3, r8
   49dbc:	bcc	49d94 <__assert_fail@plt+0x37318>
   49dc0:	b	49f74 <__assert_fail@plt+0x374f8>
   49dc4:	cmp	r0, r6
   49dc8:	bne	49dec <__assert_fail@plt+0x37370>
   49dcc:	cmp	r7, sl
   49dd0:	bne	49e10 <__assert_fail@plt+0x37394>
   49dd4:	add	r2, r2, sl
   49dd8:	mov	r7, #1
   49ddc:	add	r3, r7, r2
   49de0:	cmp	r3, r8
   49de4:	bcc	49d94 <__assert_fail@plt+0x37318>
   49de8:	b	49f74 <__assert_fail@plt+0x374f8>
   49dec:	add	r0, r2, #1
   49df0:	mov	lr, r2
   49df4:	mov	r7, #1
   49df8:	mov	sl, #1
   49dfc:	mov	r2, r0
   49e00:	add	r3, r7, r2
   49e04:	cmp	r3, r8
   49e08:	bcc	49d94 <__assert_fail@plt+0x37318>
   49e0c:	b	49f74 <__assert_fail@plt+0x374f8>
   49e10:	add	r7, r7, #1
   49e14:	add	r3, r7, r2
   49e18:	cmp	r3, r8
   49e1c:	bcc	49d94 <__assert_fail@plt+0x37318>
   49e20:	b	49f74 <__assert_fail@plt+0x374f8>
   49e24:	mvn	r1, #0
   49e28:	mov	r0, #0
   49e2c:	mov	r2, #1
   49e30:	mov	ip, #1
   49e34:	mov	r3, #1
   49e38:	add	r6, r1, r3
   49e3c:	ldrb	r7, [r9, r2]
   49e40:	ldrb	r6, [r9, r6]
   49e44:	cmp	r7, r6
   49e48:	bcs	49e68 <__assert_fail@plt+0x373ec>
   49e4c:	sub	ip, r2, r1
   49e50:	mov	r3, #1
   49e54:	mov	r0, r2
   49e58:	add	r2, r3, r0
   49e5c:	cmp	r2, r8
   49e60:	bcc	49e38 <__assert_fail@plt+0x373bc>
   49e64:	b	49ec0 <__assert_fail@plt+0x37444>
   49e68:	bne	49e8c <__assert_fail@plt+0x37410>
   49e6c:	cmp	r3, ip
   49e70:	bne	49eb0 <__assert_fail@plt+0x37434>
   49e74:	add	r0, r0, ip
   49e78:	mov	r3, #1
   49e7c:	add	r2, r3, r0
   49e80:	cmp	r2, r8
   49e84:	bcc	49e38 <__assert_fail@plt+0x373bc>
   49e88:	b	49ec0 <__assert_fail@plt+0x37444>
   49e8c:	add	r2, r0, #1
   49e90:	mov	r1, r0
   49e94:	mov	r3, #1
   49e98:	mov	ip, #1
   49e9c:	mov	r0, r2
   49ea0:	add	r2, r3, r0
   49ea4:	cmp	r2, r8
   49ea8:	bcc	49e38 <__assert_fail@plt+0x373bc>
   49eac:	b	49ec0 <__assert_fail@plt+0x37444>
   49eb0:	add	r3, r3, #1
   49eb4:	add	r2, r3, r0
   49eb8:	cmp	r2, r8
   49ebc:	bcc	49e38 <__assert_fail@plt+0x373bc>
   49ec0:	cmp	r8, #2
   49ec4:	bcc	4a448 <__assert_fail@plt+0x379cc>
   49ec8:	mvn	r7, #0
   49ecc:	mov	r2, #0
   49ed0:	mov	r3, #1
   49ed4:	mov	sl, #1
   49ed8:	mov	r6, #1
   49edc:	add	r4, r7, r6
   49ee0:	ldrb	r0, [r9, r3]
   49ee4:	ldrb	r4, [r9, r4]
   49ee8:	cmp	r4, r0
   49eec:	bcs	49f0c <__assert_fail@plt+0x37490>
   49ef0:	sub	sl, r3, r7
   49ef4:	mov	r6, #1
   49ef8:	mov	r2, r3
   49efc:	add	r3, r6, r2
   49f00:	cmp	r3, r8
   49f04:	bcc	49edc <__assert_fail@plt+0x37460>
   49f08:	b	4a450 <__assert_fail@plt+0x379d4>
   49f0c:	cmp	r0, r4
   49f10:	bne	49f34 <__assert_fail@plt+0x374b8>
   49f14:	cmp	r6, sl
   49f18:	bne	49f58 <__assert_fail@plt+0x374dc>
   49f1c:	add	r2, r2, sl
   49f20:	mov	r6, #1
   49f24:	add	r3, r6, r2
   49f28:	cmp	r3, r8
   49f2c:	bcc	49edc <__assert_fail@plt+0x37460>
   49f30:	b	4a450 <__assert_fail@plt+0x379d4>
   49f34:	add	r0, r2, #1
   49f38:	mov	r7, r2
   49f3c:	mov	r6, #1
   49f40:	mov	sl, #1
   49f44:	mov	r2, r0
   49f48:	add	r3, r6, r2
   49f4c:	cmp	r3, r8
   49f50:	bcc	49edc <__assert_fail@plt+0x37460>
   49f54:	b	4a450 <__assert_fail@plt+0x379d4>
   49f58:	add	r6, r6, #1
   49f5c:	add	r3, r6, r2
   49f60:	cmp	r3, r8
   49f64:	bcc	49edc <__assert_fail@plt+0x37460>
   49f68:	b	4a450 <__assert_fail@plt+0x379d4>
   49f6c:	mov	sl, #1
   49f70:	mvn	lr, #0
   49f74:	add	r6, sp, #24
   49f78:	vdup.32	q8, r8
   49f7c:	add	r2, lr, #1
   49f80:	add	r0, r6, #16
   49f84:	mov	r3, r6
   49f88:	vst1.32	{d16-d17}, [r0]
   49f8c:	add	r0, r6, #32
   49f90:	vst1.32	{d16-d17}, [r0]
   49f94:	add	r0, r6, #48	; 0x30
   49f98:	vst1.32	{d16-d17}, [r0]
   49f9c:	add	r0, r6, #64	; 0x40
   49fa0:	vst1.32	{d16-d17}, [r0]
   49fa4:	add	r0, r6, #80	; 0x50
   49fa8:	vst1.32	{d16-d17}, [r0]
   49fac:	add	r0, r6, #96	; 0x60
   49fb0:	vst1.32	{d16-d17}, [r0]
   49fb4:	add	r0, r6, #112	; 0x70
   49fb8:	vst1.32	{d16-d17}, [r0]
   49fbc:	add	r0, r6, #128	; 0x80
   49fc0:	vst1.32	{d16-d17}, [r0]
   49fc4:	add	r0, r6, #144	; 0x90
   49fc8:	vst1.32	{d16-d17}, [r0]
   49fcc:	add	r0, r6, #160	; 0xa0
   49fd0:	vst1.32	{d16-d17}, [r0]
   49fd4:	add	r0, r6, #176	; 0xb0
   49fd8:	vst1.32	{d16-d17}, [r0]
   49fdc:	add	r0, r6, #192	; 0xc0
   49fe0:	vst1.32	{d16-d17}, [r0]
   49fe4:	add	r0, r6, #208	; 0xd0
   49fe8:	vst1.32	{d16-d17}, [r0]
   49fec:	add	r0, r6, #224	; 0xe0
   49ff0:	vst1.32	{d16-d17}, [r0]
   49ff4:	add	r0, r6, #240	; 0xf0
   49ff8:	vst1.32	{d16-d17}, [r0]
   49ffc:	add	r0, r6, #256	; 0x100
   4a000:	vst1.32	{d16-d17}, [r0]
   4a004:	add	r0, r6, #272	; 0x110
   4a008:	vst1.32	{d16-d17}, [r0]
   4a00c:	add	r0, r6, #288	; 0x120
   4a010:	vst1.32	{d16-d17}, [r0]
   4a014:	mov	r0, #1008	; 0x3f0
   4a018:	vst1.32	{d16-d17}, [r3], r0
   4a01c:	add	r0, r6, #320	; 0x140
   4a020:	vst1.32	{d16-d17}, [r0]
   4a024:	add	r0, r6, #304	; 0x130
   4a028:	vst1.32	{d16-d17}, [r0]
   4a02c:	add	r0, r6, #336	; 0x150
   4a030:	vst1.32	{d16-d17}, [r0]
   4a034:	add	r0, r6, #352	; 0x160
   4a038:	vst1.32	{d16-d17}, [r0]
   4a03c:	add	r0, r6, #368	; 0x170
   4a040:	vst1.32	{d16-d17}, [r0]
   4a044:	add	r0, r6, #384	; 0x180
   4a048:	vst1.32	{d16-d17}, [r0]
   4a04c:	add	r0, r6, #400	; 0x190
   4a050:	vst1.32	{d16-d17}, [r0]
   4a054:	add	r0, r6, #416	; 0x1a0
   4a058:	vst1.32	{d16-d17}, [r0]
   4a05c:	add	r0, r6, #432	; 0x1b0
   4a060:	vst1.32	{d16-d17}, [r0]
   4a064:	add	r0, r6, #448	; 0x1c0
   4a068:	vst1.32	{d16-d17}, [r0]
   4a06c:	add	r0, r6, #464	; 0x1d0
   4a070:	vst1.32	{d16-d17}, [r0]
   4a074:	add	r0, r6, #480	; 0x1e0
   4a078:	vst1.32	{d16-d17}, [r0]
   4a07c:	add	r0, r6, #496	; 0x1f0
   4a080:	vst1.32	{d16-d17}, [r0]
   4a084:	add	r0, r6, #512	; 0x200
   4a088:	vst1.32	{d16-d17}, [r0]
   4a08c:	add	r0, r6, #528	; 0x210
   4a090:	vst1.32	{d16-d17}, [r0]
   4a094:	add	r0, r6, #544	; 0x220
   4a098:	vst1.32	{d16-d17}, [r0]
   4a09c:	add	r0, r6, #560	; 0x230
   4a0a0:	vst1.32	{d16-d17}, [r0]
   4a0a4:	add	r0, r6, #576	; 0x240
   4a0a8:	vst1.32	{d16-d17}, [r0]
   4a0ac:	add	r0, r6, #592	; 0x250
   4a0b0:	vst1.32	{d16-d17}, [r0]
   4a0b4:	add	r0, r6, #624	; 0x270
   4a0b8:	vst1.32	{d16-d17}, [r0]
   4a0bc:	add	r0, r6, #608	; 0x260
   4a0c0:	vst1.32	{d16-d17}, [r0]
   4a0c4:	add	r0, r6, #640	; 0x280
   4a0c8:	vst1.32	{d16-d17}, [r0]
   4a0cc:	add	r0, r6, #656	; 0x290
   4a0d0:	vst1.32	{d16-d17}, [r0]
   4a0d4:	add	r0, r6, #672	; 0x2a0
   4a0d8:	vst1.32	{d16-d17}, [r0]
   4a0dc:	add	r0, r6, #688	; 0x2b0
   4a0e0:	vst1.32	{d16-d17}, [r0]
   4a0e4:	add	r0, r6, #704	; 0x2c0
   4a0e8:	vst1.32	{d16-d17}, [r0]
   4a0ec:	add	r0, r6, #720	; 0x2d0
   4a0f0:	vst1.32	{d16-d17}, [r0]
   4a0f4:	add	r0, r6, #736	; 0x2e0
   4a0f8:	vst1.32	{d16-d17}, [r0]
   4a0fc:	add	r0, r6, #752	; 0x2f0
   4a100:	vst1.32	{d16-d17}, [r0]
   4a104:	add	r0, r6, #768	; 0x300
   4a108:	vst1.32	{d16-d17}, [r0]
   4a10c:	add	r0, r6, #784	; 0x310
   4a110:	vst1.32	{d16-d17}, [r0]
   4a114:	add	r0, r6, #800	; 0x320
   4a118:	vst1.32	{d16-d17}, [r0]
   4a11c:	add	r0, r6, #816	; 0x330
   4a120:	vst1.32	{d16-d17}, [r0]
   4a124:	add	r0, r6, #832	; 0x340
   4a128:	vst1.32	{d16-d17}, [r0]
   4a12c:	add	r0, r6, #848	; 0x350
   4a130:	vst1.32	{d16-d17}, [r0]
   4a134:	add	r0, r6, #864	; 0x360
   4a138:	vst1.32	{d16-d17}, [r0]
   4a13c:	add	r0, r6, #880	; 0x370
   4a140:	vst1.32	{d16-d17}, [r0]
   4a144:	add	r0, r6, #896	; 0x380
   4a148:	vst1.32	{d16-d17}, [r0]
   4a14c:	add	r0, r6, #928	; 0x3a0
   4a150:	vst1.32	{d16-d17}, [r0]
   4a154:	add	r0, r6, #912	; 0x390
   4a158:	vst1.32	{d16-d17}, [r0]
   4a15c:	add	r0, r6, #944	; 0x3b0
   4a160:	vst1.32	{d16-d17}, [r0]
   4a164:	add	r0, r6, #960	; 0x3c0
   4a168:	vst1.32	{d16-d17}, [r0]
   4a16c:	add	r0, r6, #976	; 0x3d0
   4a170:	vst1.32	{d16-d17}, [r0]
   4a174:	add	r0, r6, #992	; 0x3e0
   4a178:	vst1.32	{d16-d17}, [r0]
   4a17c:	add	r0, r1, #1
   4a180:	vst1.32	{d16-d17}, [r3]
   4a184:	cmp	r2, r0
   4a188:	movcc	sl, ip
   4a18c:	movcc	r2, r0
   4a190:	cmp	r8, #0
   4a194:	beq	4a1ac <__assert_fail@plt+0x37730>
   4a198:	mov	r0, r8
   4a19c:	ldrb	r1, [r4, -r0]
   4a1a0:	subs	r0, r0, #1
   4a1a4:	str	r0, [r6, r1, lsl #2]
   4a1a8:	bne	4a19c <__assert_fail@plt+0x37720>
   4a1ac:	add	r1, r9, sl
   4a1b0:	mov	r0, r9
   4a1b4:	mov	r4, r2
   4a1b8:	bl	12518 <memcmp@plt>
   4a1bc:	cmp	r0, #0
   4a1c0:	str	r4, [sp, #16]
   4a1c4:	beq	4a2ec <__assert_fail@plt+0x37870>
   4a1c8:	ldr	r0, [sp, #20]
   4a1cc:	sub	r2, r8, r5
   4a1d0:	mov	r1, #0
   4a1d4:	mov	r6, #0
   4a1d8:	add	r0, r0, r5
   4a1dc:	bl	12860 <memchr@plt>
   4a1e0:	sub	r2, r8, r4
   4a1e4:	cmp	r4, r2
   4a1e8:	movcs	r2, r4
   4a1ec:	cmp	r8, #0
   4a1f0:	beq	49cd0 <__assert_fail@plt+0x37254>
   4a1f4:	ldr	lr, [sp, #20]
   4a1f8:	cmp	r0, #0
   4a1fc:	str	r2, [sp, #12]
   4a200:	bne	49cd0 <__assert_fail@plt+0x37254>
   4a204:	sub	r5, r8, #1
   4a208:	mov	r1, r4
   4a20c:	cmp	r4, r5
   4a210:	bcs	4a688 <__assert_fail@plt+0x37c0c>
   4a214:	add	r0, lr, r1
   4a218:	add	sl, r9, r1
   4a21c:	mov	ip, #0
   4a220:	mov	r7, r8
   4a224:	str	r0, [sp, #8]
   4a228:	rsb	r0, r1, #1
   4a22c:	str	r0, [sp, #4]
   4a230:	add	r0, lr, r7
   4a234:	add	r3, sp, #24
   4a238:	mov	r4, r7
   4a23c:	ldrb	r2, [r0, #-1]
   4a240:	ldr	r2, [r3, r2, lsl #2]
   4a244:	cmp	r2, #0
   4a248:	beq	4a254 <__assert_fail@plt+0x377d8>
   4a24c:	add	ip, r2, ip
   4a250:	b	4a2b0 <__assert_fail@plt+0x37834>
   4a254:	ldr	r2, [sp, #8]
   4a258:	add	r3, r2, ip
   4a25c:	mov	r2, #0
   4a260:	ldrb	r7, [r3, r2]
   4a264:	ldrb	r6, [sl, r2]
   4a268:	cmp	r6, r7
   4a26c:	bne	4a2a8 <__assert_fail@plt+0x3782c>
   4a270:	add	r2, r2, #1
   4a274:	add	r7, r1, r2
   4a278:	cmp	r7, r5
   4a27c:	bcc	4a260 <__assert_fail@plt+0x377e4>
   4a280:	ldr	r3, [sp, #4]
   4a284:	add	r2, lr, ip
   4a288:	cmp	r3, #1
   4a28c:	beq	4a718 <__assert_fail@plt+0x37c9c>
   4a290:	ldrb	r7, [r2, -r3]
   4a294:	ldrb	r6, [r9, -r3]
   4a298:	add	r3, r3, #1
   4a29c:	cmp	r6, r7
   4a2a0:	beq	4a288 <__assert_fail@plt+0x3780c>
   4a2a4:	ldr	r2, [sp, #12]
   4a2a8:	add	r2, ip, r2
   4a2ac:	add	ip, r2, #1
   4a2b0:	mov	r1, r4
   4a2b4:	add	r7, ip, r8
   4a2b8:	mov	r4, ip
   4a2bc:	mov	r6, #0
   4a2c0:	sub	r2, r7, r1
   4a2c4:	mov	r1, #0
   4a2c8:	bl	12860 <memchr@plt>
   4a2cc:	cmp	r7, #0
   4a2d0:	beq	49cd0 <__assert_fail@plt+0x37254>
   4a2d4:	ldr	lr, [sp, #20]
   4a2d8:	ldr	r1, [sp, #16]
   4a2dc:	cmp	r0, #0
   4a2e0:	mov	ip, r4
   4a2e4:	beq	4a230 <__assert_fail@plt+0x377b4>
   4a2e8:	b	49cd0 <__assert_fail@plt+0x37254>
   4a2ec:	ldr	r0, [sp, #20]
   4a2f0:	sub	r2, r8, r5
   4a2f4:	mov	r1, #0
   4a2f8:	mov	r6, #0
   4a2fc:	add	r0, r0, r5
   4a300:	bl	12860 <memchr@plt>
   4a304:	cmp	r8, #0
   4a308:	beq	49cd0 <__assert_fail@plt+0x37254>
   4a30c:	ldr	lr, [sp, #20]
   4a310:	ldr	r7, [sp, #16]
   4a314:	cmp	r0, #0
   4a318:	str	sl, [sp, #12]
   4a31c:	bne	49cd0 <__assert_fail@plt+0x37254>
   4a320:	ldr	r0, [sp, #12]
   4a324:	sub	r5, r8, #1
   4a328:	mov	sl, #0
   4a32c:	mov	ip, r8
   4a330:	mov	r1, #0
   4a334:	sub	r0, r8, r0
   4a338:	str	r0, [sp, #8]
   4a33c:	sub	r0, r7, #1
   4a340:	str	r0, [sp, #4]
   4a344:	rsb	r0, r7, #0
   4a348:	str	r0, [sp]
   4a34c:	add	r0, lr, ip
   4a350:	add	r3, sp, #24
   4a354:	ldrb	r2, [r0, #-1]
   4a358:	ldr	r3, [r3, r2, lsl #2]
   4a35c:	cmp	r3, #0
   4a360:	beq	4a388 <__assert_fail@plt+0x3790c>
   4a364:	ldr	r2, [sp, #12]
   4a368:	ldr	r7, [sp, #8]
   4a36c:	cmp	r3, r2
   4a370:	mov	r2, r3
   4a374:	movcc	r2, r7
   4a378:	cmp	sl, #0
   4a37c:	moveq	r2, r3
   4a380:	mov	sl, #0
   4a384:	b	4a3f8 <__assert_fail@plt+0x3797c>
   4a388:	cmp	r7, sl
   4a38c:	mov	r2, r7
   4a390:	movcc	r2, sl
   4a394:	cmp	r2, r5
   4a398:	bcs	4a3bc <__assert_fail@plt+0x37940>
   4a39c:	add	r3, lr, r1
   4a3a0:	ldrb	r7, [r3, r2]
   4a3a4:	ldrb	r6, [r9, r2]
   4a3a8:	cmp	r6, r7
   4a3ac:	bne	4a438 <__assert_fail@plt+0x379bc>
   4a3b0:	add	r2, r2, #1
   4a3b4:	cmp	r2, r5
   4a3b8:	bcc	4a3a0 <__assert_fail@plt+0x37924>
   4a3bc:	ldr	r2, [sp, #4]
   4a3c0:	add	r6, lr, r1
   4a3c4:	add	r3, r2, #1
   4a3c8:	cmp	sl, r3
   4a3cc:	bcs	4a3e4 <__assert_fail@plt+0x37968>
   4a3d0:	ldrb	r7, [r6, r2]
   4a3d4:	ldrb	r4, [r9, r2]
   4a3d8:	sub	r2, r2, #1
   4a3dc:	cmp	r4, r7
   4a3e0:	beq	4a3c4 <__assert_fail@plt+0x37948>
   4a3e4:	add	r2, sl, #1
   4a3e8:	ldr	sl, [sp, #8]
   4a3ec:	cmp	r3, r2
   4a3f0:	ldr	r2, [sp, #12]
   4a3f4:	bcc	49cd0 <__assert_fail@plt+0x37254>
   4a3f8:	add	r1, r2, r1
   4a3fc:	mov	r6, #0
   4a400:	add	r7, r1, r8
   4a404:	mov	r4, r1
   4a408:	mov	r1, #0
   4a40c:	sub	r2, r7, ip
   4a410:	bl	12860 <memchr@plt>
   4a414:	cmp	r7, #0
   4a418:	beq	49cd0 <__assert_fail@plt+0x37254>
   4a41c:	mov	ip, r7
   4a420:	ldr	lr, [sp, #20]
   4a424:	ldr	r7, [sp, #16]
   4a428:	cmp	r0, #0
   4a42c:	mov	r1, r4
   4a430:	beq	4a34c <__assert_fail@plt+0x378d0>
   4a434:	b	49cd0 <__assert_fail@plt+0x37254>
   4a438:	ldr	r3, [sp]
   4a43c:	add	r2, r3, r2
   4a440:	add	r2, r2, #1
   4a444:	b	4a380 <__assert_fail@plt+0x37904>
   4a448:	mov	sl, #1
   4a44c:	mvn	r7, #0
   4a450:	add	r0, r1, #1
   4a454:	add	r2, r7, #1
   4a458:	cmp	r2, r0
   4a45c:	movcc	sl, ip
   4a460:	movcc	r2, r0
   4a464:	add	r1, r9, sl
   4a468:	mov	r0, r9
   4a46c:	mov	r4, r2
   4a470:	bl	12518 <memcmp@plt>
   4a474:	cmp	r0, #0
   4a478:	str	r4, [sp, #16]
   4a47c:	beq	4a570 <__assert_fail@plt+0x37af4>
   4a480:	ldr	r0, [sp, #20]
   4a484:	sub	r2, r8, r5
   4a488:	mov	r1, #0
   4a48c:	mov	r6, #0
   4a490:	add	r0, r0, r5
   4a494:	bl	12860 <memchr@plt>
   4a498:	sub	r5, r8, r4
   4a49c:	cmp	r4, r5
   4a4a0:	movcs	r5, r4
   4a4a4:	cmp	r8, #0
   4a4a8:	beq	49cd0 <__assert_fail@plt+0x37254>
   4a4ac:	ldr	ip, [sp, #20]
   4a4b0:	cmp	r0, #0
   4a4b4:	bne	49cd0 <__assert_fail@plt+0x37254>
   4a4b8:	cmp	r8, r4
   4a4bc:	bls	4a728 <__assert_fail@plt+0x37cac>
   4a4c0:	add	r0, ip, r4
   4a4c4:	add	r7, r9, r4
   4a4c8:	mov	sl, #0
   4a4cc:	mov	r1, r8
   4a4d0:	str	r0, [sp, #12]
   4a4d4:	rsb	r0, r4, #1
   4a4d8:	str	r0, [sp, #8]
   4a4dc:	ldr	r0, [sp, #12]
   4a4e0:	mov	r2, #0
   4a4e4:	add	r0, r0, sl
   4a4e8:	ldrb	r3, [r0, r2]
   4a4ec:	ldrb	r6, [r7, r2]
   4a4f0:	cmp	r6, r3
   4a4f4:	bne	4a530 <__assert_fail@plt+0x37ab4>
   4a4f8:	add	r2, r2, #1
   4a4fc:	add	r3, r4, r2
   4a500:	cmp	r3, r8
   4a504:	bcc	4a4e8 <__assert_fail@plt+0x37a6c>
   4a508:	ldr	r2, [sp, #8]
   4a50c:	add	r0, ip, sl
   4a510:	cmp	r2, #1
   4a514:	beq	4a7a0 <__assert_fail@plt+0x37d24>
   4a518:	ldrb	r3, [r0, -r2]
   4a51c:	ldrb	r6, [r9, -r2]
   4a520:	add	r2, r2, #1
   4a524:	cmp	r6, r3
   4a528:	beq	4a510 <__assert_fail@plt+0x37a94>
   4a52c:	mov	r2, r5
   4a530:	add	r2, sl, r2
   4a534:	add	r0, ip, r1
   4a538:	mov	r6, #0
   4a53c:	add	sl, r2, #1
   4a540:	add	r4, sl, r8
   4a544:	sub	r2, r4, r1
   4a548:	mov	r1, #0
   4a54c:	bl	12860 <memchr@plt>
   4a550:	cmp	r0, #0
   4a554:	bne	49cd0 <__assert_fail@plt+0x37254>
   4a558:	cmp	r4, #0
   4a55c:	mov	r1, r4
   4a560:	ldr	ip, [sp, #20]
   4a564:	ldr	r4, [sp, #16]
   4a568:	bne	4a4dc <__assert_fail@plt+0x37a60>
   4a56c:	b	49cd0 <__assert_fail@plt+0x37254>
   4a570:	ldr	r0, [sp, #20]
   4a574:	sub	r2, r8, r5
   4a578:	mov	r1, #0
   4a57c:	mov	r6, #0
   4a580:	add	r0, r0, r5
   4a584:	bl	12860 <memchr@plt>
   4a588:	cmp	r8, #0
   4a58c:	beq	49cd0 <__assert_fail@plt+0x37254>
   4a590:	cmp	r0, #0
   4a594:	ldr	r4, [sp, #20]
   4a598:	ldr	r0, [sp, #16]
   4a59c:	str	sl, [sp, #12]
   4a5a0:	bne	49cd0 <__assert_fail@plt+0x37254>
   4a5a4:	ldr	r1, [sp, #12]
   4a5a8:	mov	sl, #0
   4a5ac:	mov	r5, #0
   4a5b0:	sub	r1, r8, r1
   4a5b4:	str	r1, [sp, #8]
   4a5b8:	sub	r1, r0, #1
   4a5bc:	str	r1, [sp, #4]
   4a5c0:	rsb	r1, r0, #0
   4a5c4:	str	r1, [sp]
   4a5c8:	mov	r1, r8
   4a5cc:	cmp	r0, sl
   4a5d0:	movcc	r0, sl
   4a5d4:	cmp	r0, r8
   4a5d8:	bcs	4a5fc <__assert_fail@plt+0x37b80>
   4a5dc:	add	r2, r4, r5
   4a5e0:	ldrb	r3, [r2, r0]
   4a5e4:	ldrb	r7, [r9, r0]
   4a5e8:	cmp	r7, r3
   4a5ec:	bne	4a63c <__assert_fail@plt+0x37bc0>
   4a5f0:	add	r0, r0, #1
   4a5f4:	cmp	r0, r8
   4a5f8:	bcc	4a5e0 <__assert_fail@plt+0x37b64>
   4a5fc:	ldr	r0, [sp, #4]
   4a600:	add	r6, r4, r5
   4a604:	add	r2, r0, #1
   4a608:	cmp	sl, r2
   4a60c:	bcs	4a624 <__assert_fail@plt+0x37ba8>
   4a610:	ldrb	r3, [r6, r0]
   4a614:	ldrb	r7, [r9, r0]
   4a618:	sub	r0, r0, #1
   4a61c:	cmp	r7, r3
   4a620:	beq	4a604 <__assert_fail@plt+0x37b88>
   4a624:	add	r0, sl, #1
   4a628:	ldr	sl, [sp, #8]
   4a62c:	cmp	r2, r0
   4a630:	ldr	r2, [sp, #12]
   4a634:	bcs	4a64c <__assert_fail@plt+0x37bd0>
   4a638:	b	49cd0 <__assert_fail@plt+0x37254>
   4a63c:	ldr	r2, [sp]
   4a640:	mov	sl, #0
   4a644:	add	r0, r2, r0
   4a648:	add	r2, r0, #1
   4a64c:	add	r5, r2, r5
   4a650:	add	r0, r4, r1
   4a654:	mov	r6, #0
   4a658:	add	r7, r5, r8
   4a65c:	sub	r2, r7, r1
   4a660:	mov	r1, #0
   4a664:	bl	12860 <memchr@plt>
   4a668:	cmp	r7, #0
   4a66c:	beq	49cd0 <__assert_fail@plt+0x37254>
   4a670:	cmp	r0, #0
   4a674:	ldr	r4, [sp, #20]
   4a678:	ldr	r0, [sp, #16]
   4a67c:	mov	r1, r7
   4a680:	beq	4a5cc <__assert_fail@plt+0x37b50>
   4a684:	b	49cd0 <__assert_fail@plt+0x37254>
   4a688:	ldr	r0, [sp, #12]
   4a68c:	rsb	r5, r1, #1
   4a690:	mov	ip, #0
   4a694:	mov	r1, r8
   4a698:	add	sl, r0, #1
   4a69c:	add	r0, lr, r1
   4a6a0:	add	r3, sp, #24
   4a6a4:	ldrb	r2, [r0, #-1]
   4a6a8:	ldr	r2, [r3, r2, lsl #2]
   4a6ac:	cmp	r2, #0
   4a6b0:	bne	4a6dc <__assert_fail@plt+0x37c60>
   4a6b4:	add	r2, lr, ip
   4a6b8:	mov	r3, r5
   4a6bc:	cmp	r3, #1
   4a6c0:	beq	4a718 <__assert_fail@plt+0x37c9c>
   4a6c4:	ldrb	r7, [r2, -r3]
   4a6c8:	ldrb	r6, [r9, -r3]
   4a6cc:	add	r3, r3, #1
   4a6d0:	cmp	r6, r7
   4a6d4:	beq	4a6bc <__assert_fail@plt+0x37c40>
   4a6d8:	mov	r2, sl
   4a6dc:	add	ip, r2, ip
   4a6e0:	mov	r6, #0
   4a6e4:	add	r7, ip, r8
   4a6e8:	mov	r4, ip
   4a6ec:	sub	r2, r7, r1
   4a6f0:	mov	r1, #0
   4a6f4:	bl	12860 <memchr@plt>
   4a6f8:	cmp	r7, #0
   4a6fc:	beq	49cd0 <__assert_fail@plt+0x37254>
   4a700:	ldr	lr, [sp, #20]
   4a704:	cmp	r0, #0
   4a708:	mov	r1, r7
   4a70c:	mov	ip, r4
   4a710:	beq	4a69c <__assert_fail@plt+0x37c20>
   4a714:	b	49cd0 <__assert_fail@plt+0x37254>
   4a718:	add	r6, lr, ip
   4a71c:	mov	r0, r6
   4a720:	sub	sp, fp, #28
   4a724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a728:	rsb	r4, r4, #1
   4a72c:	add	r5, r5, #1
   4a730:	mov	sl, #0
   4a734:	mov	r7, ip
   4a738:	mov	r0, r8
   4a73c:	mov	r1, r4
   4a740:	cmp	r1, #1
   4a744:	beq	4a7a0 <__assert_fail@plt+0x37d24>
   4a748:	ldrb	r6, [r7, -r1]
   4a74c:	ldrb	r3, [r9, -r1]
   4a750:	add	r1, r1, #1
   4a754:	cmp	r3, r6
   4a758:	beq	4a740 <__assert_fail@plt+0x37cc4>
   4a75c:	add	sl, r5, sl
   4a760:	add	r0, ip, r0
   4a764:	mov	r1, #0
   4a768:	mov	r2, r5
   4a76c:	str	r4, [sp, #16]
   4a770:	mov	r6, #0
   4a774:	add	r4, sl, r8
   4a778:	bl	12860 <memchr@plt>
   4a77c:	cmp	r4, #0
   4a780:	beq	49cd0 <__assert_fail@plt+0x37254>
   4a784:	cmp	r0, #0
   4a788:	mov	r0, r4
   4a78c:	ldr	ip, [sp, #20]
   4a790:	ldr	r4, [sp, #16]
   4a794:	add	r7, r7, r5
   4a798:	beq	4a73c <__assert_fail@plt+0x37cc0>
   4a79c:	b	49cd0 <__assert_fail@plt+0x37254>
   4a7a0:	add	r6, ip, sl
   4a7a4:	mov	r0, r6
   4a7a8:	sub	sp, fp, #28
   4a7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a7b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   4a7b4:	add	fp, sp, #24
   4a7b8:	mov	r4, r0
   4a7bc:	cmp	r0, #0
   4a7c0:	beq	4a7f4 <__assert_fail@plt+0x37d78>
   4a7c4:	mov	r0, r4
   4a7c8:	bl	12788 <strlen@plt>
   4a7cc:	add	r5, r0, #1
   4a7d0:	cmp	r5, #58	; 0x3a
   4a7d4:	bls	4a7f8 <__assert_fail@plt+0x37d7c>
   4a7d8:	add	r0, r0, #10
   4a7dc:	bic	r0, r0, #3
   4a7e0:	bl	35608 <__assert_fail@plt+0x22b8c>
   4a7e4:	mov	r6, r0
   4a7e8:	cmp	r0, #0
   4a7ec:	bne	4a80c <__assert_fail@plt+0x37d90>
   4a7f0:	b	4a844 <__assert_fail@plt+0x37dc8>
   4a7f4:	mov	r5, #0
   4a7f8:	mov	r0, #64	; 0x40
   4a7fc:	bl	35608 <__assert_fail@plt+0x22b8c>
   4a800:	mov	r6, r0
   4a804:	cmp	r0, #0
   4a808:	beq	4a844 <__assert_fail@plt+0x37dc8>
   4a80c:	cmp	r4, #0
   4a810:	mov	r0, r4
   4a814:	mov	r8, #0
   4a818:	mov	r7, r6
   4a81c:	movwne	r0, #1
   4a820:	str	r8, [r6]
   4a824:	strb	r0, [r6, #4]
   4a828:	strb	r8, [r7, #5]!
   4a82c:	beq	4a844 <__assert_fail@plt+0x37dc8>
   4a830:	mov	r0, r7
   4a834:	mov	r1, r4
   4a838:	mov	r2, r5
   4a83c:	bl	124b8 <memcpy@plt>
   4a840:	strb	r8, [r7, r5]
   4a844:	mov	r0, r6
   4a848:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   4a84c:	push	{r4, sl, fp, lr}
   4a850:	add	fp, sp, #8
   4a854:	cmp	r0, #2
   4a858:	popcc	{r4, sl, fp, pc}
   4a85c:	ldr	r4, [r0]
   4a860:	bl	32c40 <__assert_fail@plt+0x201c4>
   4a864:	cmp	r4, #0
   4a868:	mov	r0, r4
   4a86c:	bne	4a85c <__assert_fail@plt+0x37de0>
   4a870:	pop	{r4, sl, fp, pc}
   4a874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a878:	add	fp, sp, #28
   4a87c:	sub	sp, sp, #4
   4a880:	mov	r9, r2
   4a884:	mov	r7, r1
   4a888:	cmp	r0, #0
   4a88c:	beq	4a904 <__assert_fail@plt+0x37e88>
   4a890:	mov	r6, r0
   4a894:	movw	r0, #7009	; 0x1b61
   4a898:	movt	r0, #5
   4a89c:	bl	126b0 <getenv@plt>
   4a8a0:	mov	r4, r0
   4a8a4:	ldrb	r0, [r6, #4]
   4a8a8:	cmp	r4, #0
   4a8ac:	beq	4a918 <__assert_fail@plt+0x37e9c>
   4a8b0:	cmp	r0, #0
   4a8b4:	beq	4a8cc <__assert_fail@plt+0x37e50>
   4a8b8:	add	r0, r6, #5
   4a8bc:	mov	r1, r4
   4a8c0:	bl	123d4 <strcmp@plt>
   4a8c4:	cmp	r0, #0
   4a8c8:	beq	4a9dc <__assert_fail@plt+0x37f60>
   4a8cc:	mov	r0, r4
   4a8d0:	bl	12788 <strlen@plt>
   4a8d4:	add	sl, r0, #1
   4a8d8:	mov	r8, #1
   4a8dc:	cmp	sl, #58	; 0x3a
   4a8e0:	bls	4a928 <__assert_fail@plt+0x37eac>
   4a8e4:	add	r0, r0, #10
   4a8e8:	bic	r0, r0, #3
   4a8ec:	bl	35608 <__assert_fail@plt+0x22b8c>
   4a8f0:	cmp	r0, #0
   4a8f4:	bne	4a938 <__assert_fail@plt+0x37ebc>
   4a8f8:	mov	r0, #0
   4a8fc:	sub	sp, fp, #28
   4a900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a904:	mov	r0, r7
   4a908:	mov	r1, r9
   4a90c:	sub	sp, fp, #28
   4a910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a914:	b	12398 <gmtime_r@plt>
   4a918:	mov	r8, #0
   4a91c:	cmp	r0, #0
   4a920:	mov	sl, #0
   4a924:	beq	4a9dc <__assert_fail@plt+0x37f60>
   4a928:	mov	r0, #64	; 0x40
   4a92c:	bl	35608 <__assert_fail@plt+0x22b8c>
   4a930:	cmp	r0, #0
   4a934:	beq	4a8f8 <__assert_fail@plt+0x37e7c>
   4a938:	mov	r5, r0
   4a93c:	str	r7, [sp]
   4a940:	strb	r8, [r0, #4]
   4a944:	mov	r0, #0
   4a948:	cmp	r8, #0
   4a94c:	mov	r7, r5
   4a950:	str	r0, [r5]
   4a954:	strb	r0, [r7, #5]!
   4a958:	beq	4a974 <__assert_fail@plt+0x37ef8>
   4a95c:	mov	r0, r7
   4a960:	mov	r1, r4
   4a964:	mov	r2, sl
   4a968:	mov	r8, #0
   4a96c:	bl	124b8 <memcpy@plt>
   4a970:	strb	r8, [r7, sl]
   4a974:	ldrb	r0, [r6, #4]
   4a978:	cmp	r0, #0
   4a97c:	beq	4a9e4 <__assert_fail@plt+0x37f68>
   4a980:	movw	r0, #7009	; 0x1b61
   4a984:	add	r1, r6, #5
   4a988:	mov	r2, #1
   4a98c:	movt	r0, #5
   4a990:	bl	127a0 <setenv@plt>
   4a994:	ldr	r7, [sp]
   4a998:	cmp	r0, #0
   4a99c:	beq	4a9fc <__assert_fail@plt+0x37f80>
   4a9a0:	bl	127d0 <__errno_location@plt>
   4a9a4:	ldr	r6, [r0]
   4a9a8:	mov	r4, r0
   4a9ac:	cmp	r5, #2
   4a9b0:	bcc	4a9cc <__assert_fail@plt+0x37f50>
   4a9b4:	ldr	r7, [r5]
   4a9b8:	mov	r0, r5
   4a9bc:	bl	32c40 <__assert_fail@plt+0x201c4>
   4a9c0:	cmp	r7, #0
   4a9c4:	mov	r5, r7
   4a9c8:	bne	4a9b4 <__assert_fail@plt+0x37f38>
   4a9cc:	str	r6, [r4]
   4a9d0:	mov	r0, #0
   4a9d4:	sub	sp, fp, #28
   4a9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a9dc:	mov	r5, #1
   4a9e0:	b	4aa00 <__assert_fail@plt+0x37f84>
   4a9e4:	movw	r0, #7009	; 0x1b61
   4a9e8:	movt	r0, #5
   4a9ec:	bl	129f8 <unsetenv@plt>
   4a9f0:	ldr	r7, [sp]
   4a9f4:	cmp	r0, #0
   4a9f8:	bne	4a9a0 <__assert_fail@plt+0x37f24>
   4a9fc:	bl	125cc <tzset@plt>
   4aa00:	mov	r0, r7
   4aa04:	mov	r1, r9
   4aa08:	bl	12584 <localtime_r@plt>
   4aa0c:	cmp	r0, #0
   4aa10:	beq	4aa8c <__assert_fail@plt+0x38010>
   4aa14:	mov	r0, r6
   4aa18:	mov	r1, r9
   4aa1c:	bl	4ab9c <__assert_fail@plt+0x38120>
   4aa20:	mov	r6, r0
   4aa24:	cmp	r5, #1
   4aa28:	beq	4aaf8 <__assert_fail@plt+0x3807c>
   4aa2c:	bl	127d0 <__errno_location@plt>
   4aa30:	mov	r8, r0
   4aa34:	ldr	sl, [r0]
   4aa38:	ldrb	r0, [r5, #4]
   4aa3c:	cmp	r0, #0
   4aa40:	beq	4ab00 <__assert_fail@plt+0x38084>
   4aa44:	movw	r0, #7009	; 0x1b61
   4aa48:	add	r1, r5, #5
   4aa4c:	mov	r2, #1
   4aa50:	movt	r0, #5
   4aa54:	bl	127a0 <setenv@plt>
   4aa58:	cmp	r0, #0
   4aa5c:	beq	4ab14 <__assert_fail@plt+0x38098>
   4aa60:	ldr	sl, [r8]
   4aa64:	mov	r4, #0
   4aa68:	cmp	r5, #2
   4aa6c:	bcc	4ab7c <__assert_fail@plt+0x38100>
   4aa70:	ldr	r7, [r5]
   4aa74:	mov	r0, r5
   4aa78:	bl	32c40 <__assert_fail@plt+0x201c4>
   4aa7c:	cmp	r7, #0
   4aa80:	mov	r5, r7
   4aa84:	bne	4aa70 <__assert_fail@plt+0x37ff4>
   4aa88:	b	4ab7c <__assert_fail@plt+0x38100>
   4aa8c:	mov	r6, #0
   4aa90:	cmp	r5, #1
   4aa94:	beq	4aaf8 <__assert_fail@plt+0x3807c>
   4aa98:	bl	127d0 <__errno_location@plt>
   4aa9c:	mov	r8, r0
   4aaa0:	ldr	sl, [r0]
   4aaa4:	ldrb	r0, [r5, #4]
   4aaa8:	cmp	r0, #0
   4aaac:	beq	4ab40 <__assert_fail@plt+0x380c4>
   4aab0:	movw	r0, #7009	; 0x1b61
   4aab4:	add	r1, r5, #5
   4aab8:	mov	r2, #1
   4aabc:	movt	r0, #5
   4aac0:	bl	127a0 <setenv@plt>
   4aac4:	cmp	r0, #0
   4aac8:	beq	4ab54 <__assert_fail@plt+0x380d8>
   4aacc:	ldr	sl, [r8]
   4aad0:	mov	r4, #0
   4aad4:	cmp	r5, #2
   4aad8:	bcc	4ab7c <__assert_fail@plt+0x38100>
   4aadc:	ldr	r7, [r5]
   4aae0:	mov	r0, r5
   4aae4:	bl	32c40 <__assert_fail@plt+0x201c4>
   4aae8:	cmp	r7, #0
   4aaec:	mov	r5, r7
   4aaf0:	bne	4aadc <__assert_fail@plt+0x38060>
   4aaf4:	b	4ab7c <__assert_fail@plt+0x38100>
   4aaf8:	mov	r4, #1
   4aafc:	b	4ab80 <__assert_fail@plt+0x38104>
   4ab00:	movw	r0, #7009	; 0x1b61
   4ab04:	movt	r0, #5
   4ab08:	bl	129f8 <unsetenv@plt>
   4ab0c:	cmp	r0, #0
   4ab10:	bne	4aa60 <__assert_fail@plt+0x37fe4>
   4ab14:	bl	125cc <tzset@plt>
   4ab18:	mov	r4, #1
   4ab1c:	cmp	r5, #2
   4ab20:	bcc	4ab7c <__assert_fail@plt+0x38100>
   4ab24:	ldr	r7, [r5]
   4ab28:	mov	r0, r5
   4ab2c:	bl	32c40 <__assert_fail@plt+0x201c4>
   4ab30:	cmp	r7, #0
   4ab34:	mov	r5, r7
   4ab38:	bne	4ab24 <__assert_fail@plt+0x380a8>
   4ab3c:	b	4ab7c <__assert_fail@plt+0x38100>
   4ab40:	movw	r0, #7009	; 0x1b61
   4ab44:	movt	r0, #5
   4ab48:	bl	129f8 <unsetenv@plt>
   4ab4c:	cmp	r0, #0
   4ab50:	bne	4aacc <__assert_fail@plt+0x38050>
   4ab54:	bl	125cc <tzset@plt>
   4ab58:	mov	r4, #1
   4ab5c:	cmp	r5, #2
   4ab60:	bcc	4ab7c <__assert_fail@plt+0x38100>
   4ab64:	ldr	r7, [r5]
   4ab68:	mov	r0, r5
   4ab6c:	bl	32c40 <__assert_fail@plt+0x201c4>
   4ab70:	cmp	r7, #0
   4ab74:	mov	r5, r7
   4ab78:	bne	4ab64 <__assert_fail@plt+0x380e8>
   4ab7c:	str	sl, [r8]
   4ab80:	cmp	r6, #0
   4ab84:	moveq	r9, r6
   4ab88:	cmp	r4, #0
   4ab8c:	moveq	r9, r4
   4ab90:	mov	r0, r9
   4ab94:	sub	sp, fp, #28
   4ab98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4ab9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4aba0:	add	fp, sp, #28
   4aba4:	sub	sp, sp, #4
   4aba8:	ldr	r7, [r1, #40]	; 0x28
   4abac:	mov	r8, #1
   4abb0:	cmp	r7, #0
   4abb4:	beq	4ac58 <__assert_fail@plt+0x381dc>
   4abb8:	mov	r5, r1
   4abbc:	mov	r6, r0
   4abc0:	cmp	r7, r1
   4abc4:	bcc	4abd4 <__assert_fail@plt+0x38158>
   4abc8:	add	r0, r5, #44	; 0x2c
   4abcc:	cmp	r7, r0
   4abd0:	bcc	4ac58 <__assert_fail@plt+0x381dc>
   4abd4:	ldrb	r0, [r7]
   4abd8:	cmp	r0, #0
   4abdc:	beq	4ac4c <__assert_fail@plt+0x381d0>
   4abe0:	add	r4, r6, #5
   4abe4:	b	4abf8 <__assert_fail@plt+0x3817c>
   4abe8:	ldr	r0, [r6]
   4abec:	cmp	r0, #0
   4abf0:	addne	r4, r0, #5
   4abf4:	movne	r6, r0
   4abf8:	mov	r0, r4
   4abfc:	mov	r1, r7
   4ac00:	bl	123d4 <strcmp@plt>
   4ac04:	cmp	r0, #0
   4ac08:	beq	4acfc <__assert_fail@plt+0x38280>
   4ac0c:	ldrb	r0, [r4]
   4ac10:	cmp	r0, #0
   4ac14:	bne	4ac30 <__assert_fail@plt+0x381b4>
   4ac18:	add	r0, r6, #5
   4ac1c:	cmp	r4, r0
   4ac20:	bne	4ac64 <__assert_fail@plt+0x381e8>
   4ac24:	ldrb	r0, [r6, #4]
   4ac28:	cmp	r0, #0
   4ac2c:	beq	4ac64 <__assert_fail@plt+0x381e8>
   4ac30:	mov	r0, r4
   4ac34:	bl	12788 <strlen@plt>
   4ac38:	add	r4, r4, r0
   4ac3c:	ldrb	r0, [r4, #1]!
   4ac40:	cmp	r0, #0
   4ac44:	bne	4abf8 <__assert_fail@plt+0x3817c>
   4ac48:	b	4abe8 <__assert_fail@plt+0x3816c>
   4ac4c:	movw	r4, #58175	; 0xe33f
   4ac50:	movt	r4, #4
   4ac54:	str	r4, [r5, #40]	; 0x28
   4ac58:	mov	r0, r8
   4ac5c:	sub	sp, fp, #28
   4ac60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4ac64:	add	r0, r6, #64	; 0x40
   4ac68:	sub	sl, r0, r4
   4ac6c:	mov	r0, r7
   4ac70:	bl	12788 <strlen@plt>
   4ac74:	add	r9, r0, #1
   4ac78:	cmp	r9, sl
   4ac7c:	bge	4aca8 <__assert_fail@plt+0x3822c>
   4ac80:	mov	r0, r4
   4ac84:	mov	r1, r7
   4ac88:	mov	r2, r9
   4ac8c:	bl	124b8 <memcpy@plt>
   4ac90:	mov	r0, #0
   4ac94:	strb	r0, [r4, r9]
   4ac98:	str	r4, [r5, #40]	; 0x28
   4ac9c:	mov	r0, r8
   4aca0:	sub	sp, fp, #28
   4aca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4aca8:	add	r0, r0, #10
   4acac:	cmp	r9, #59	; 0x3b
   4acb0:	bic	r0, r0, #3
   4acb4:	movwcc	r0, #64	; 0x40
   4acb8:	bl	35608 <__assert_fail@plt+0x22b8c>
   4acbc:	cmp	r0, #0
   4acc0:	beq	4ad0c <__assert_fail@plt+0x38290>
   4acc4:	mov	sl, r0
   4acc8:	mov	r0, #0
   4accc:	mov	r1, r7
   4acd0:	mov	r2, r9
   4acd4:	str	r0, [sl]
   4acd8:	mov	r0, #1
   4acdc:	add	r4, sl, #5
   4ace0:	strh	r0, [sl, #4]
   4ace4:	mov	r0, r4
   4ace8:	bl	124b8 <memcpy@plt>
   4acec:	mov	r0, #0
   4acf0:	strb	r0, [r4, r9]
   4acf4:	str	sl, [r6]
   4acf8:	strb	r0, [sl, #4]
   4acfc:	str	r4, [r5, #40]	; 0x28
   4ad00:	mov	r0, r8
   4ad04:	sub	sp, fp, #28
   4ad08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4ad0c:	mov	r8, #0
   4ad10:	str	r8, [r6]
   4ad14:	mov	r0, r8
   4ad18:	sub	sp, fp, #28
   4ad1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4ad20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ad24:	add	fp, sp, #28
   4ad28:	sub	sp, sp, #52	; 0x34
   4ad2c:	mov	r9, r1
   4ad30:	cmp	r0, #0
   4ad34:	beq	4adb0 <__assert_fail@plt+0x38334>
   4ad38:	mov	r7, r0
   4ad3c:	movw	r0, #7009	; 0x1b61
   4ad40:	movt	r0, #5
   4ad44:	bl	126b0 <getenv@plt>
   4ad48:	mov	r6, r0
   4ad4c:	ldrb	r0, [r7, #4]
   4ad50:	cmp	r6, #0
   4ad54:	beq	4adc0 <__assert_fail@plt+0x38344>
   4ad58:	cmp	r0, #0
   4ad5c:	beq	4ad74 <__assert_fail@plt+0x382f8>
   4ad60:	add	r0, r7, #5
   4ad64:	mov	r1, r6
   4ad68:	bl	123d4 <strcmp@plt>
   4ad6c:	cmp	r0, #0
   4ad70:	beq	4ae84 <__assert_fail@plt+0x38408>
   4ad74:	mov	r0, r6
   4ad78:	bl	12788 <strlen@plt>
   4ad7c:	add	r8, r0, #1
   4ad80:	mov	sl, #1
   4ad84:	cmp	r8, #58	; 0x3a
   4ad88:	bls	4add0 <__assert_fail@plt+0x38354>
   4ad8c:	add	r0, r0, #10
   4ad90:	bic	r0, r0, #3
   4ad94:	bl	35608 <__assert_fail@plt+0x22b8c>
   4ad98:	mvn	r4, #0
   4ad9c:	cmp	r0, #0
   4ada0:	bne	4ade4 <__assert_fail@plt+0x38368>
   4ada4:	mov	r0, r4
   4ada8:	sub	sp, fp, #28
   4adac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4adb0:	mov	r0, r9
   4adb4:	sub	sp, fp, #28
   4adb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4adbc:	b	1295c <timegm@plt>
   4adc0:	mov	sl, #0
   4adc4:	cmp	r0, #0
   4adc8:	mov	r8, #0
   4adcc:	beq	4ae84 <__assert_fail@plt+0x38408>
   4add0:	mov	r0, #64	; 0x40
   4add4:	bl	35608 <__assert_fail@plt+0x22b8c>
   4add8:	mvn	r4, #0
   4addc:	cmp	r0, #0
   4ade0:	beq	4ada4 <__assert_fail@plt+0x38328>
   4ade4:	mov	r5, r0
   4ade8:	strb	sl, [r0, #4]
   4adec:	mov	r0, #0
   4adf0:	cmp	sl, #0
   4adf4:	mov	r4, r5
   4adf8:	str	r0, [r5]
   4adfc:	strb	r0, [r4, #5]!
   4ae00:	beq	4ae1c <__assert_fail@plt+0x383a0>
   4ae04:	mov	r0, r4
   4ae08:	mov	r1, r6
   4ae0c:	mov	r2, r8
   4ae10:	mov	sl, #0
   4ae14:	bl	124b8 <memcpy@plt>
   4ae18:	strb	sl, [r4, r8]
   4ae1c:	ldrb	r0, [r7, #4]
   4ae20:	cmp	r0, #0
   4ae24:	beq	4ae8c <__assert_fail@plt+0x38410>
   4ae28:	movw	r0, #7009	; 0x1b61
   4ae2c:	add	r1, r7, #5
   4ae30:	mov	r2, #1
   4ae34:	movt	r0, #5
   4ae38:	bl	127a0 <setenv@plt>
   4ae3c:	mvn	r4, #0
   4ae40:	cmp	r0, #0
   4ae44:	beq	4aea4 <__assert_fail@plt+0x38428>
   4ae48:	bl	127d0 <__errno_location@plt>
   4ae4c:	ldr	r8, [r0]
   4ae50:	mov	r6, r0
   4ae54:	cmp	r5, #2
   4ae58:	bcc	4ae74 <__assert_fail@plt+0x383f8>
   4ae5c:	ldr	r7, [r5]
   4ae60:	mov	r0, r5
   4ae64:	bl	32c40 <__assert_fail@plt+0x201c4>
   4ae68:	cmp	r7, #0
   4ae6c:	mov	r5, r7
   4ae70:	bne	4ae5c <__assert_fail@plt+0x383e0>
   4ae74:	str	r8, [r6]
   4ae78:	mov	r0, r4
   4ae7c:	sub	sp, fp, #28
   4ae80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4ae84:	mov	r5, #1
   4ae88:	b	4aea8 <__assert_fail@plt+0x3842c>
   4ae8c:	movw	r0, #7009	; 0x1b61
   4ae90:	movt	r0, #5
   4ae94:	bl	129f8 <unsetenv@plt>
   4ae98:	mvn	r4, #0
   4ae9c:	cmp	r0, #0
   4aea0:	bne	4ae48 <__assert_fail@plt+0x383cc>
   4aea4:	bl	125cc <tzset@plt>
   4aea8:	mov	r1, #32
   4aeac:	mov	r2, r9
   4aeb0:	add	r0, sp, #8
   4aeb4:	vld1.32	{d16-d17}, [r2], r1
   4aeb8:	mov	r3, r0
   4aebc:	vst1.32	{d16-d17}, [r3], r1
   4aec0:	ldr	r1, [r9, #16]
   4aec4:	ldr	r6, [r9, #20]
   4aec8:	str	r1, [sp, #24]
   4aecc:	mvn	r1, #0
   4aed0:	str	r1, [sp, #36]	; 0x24
   4aed4:	str	r6, [sp, #28]
   4aed8:	ldr	r1, [r2]
   4aedc:	str	r1, [r3]
   4aee0:	bl	12410 <mktime@plt>
   4aee4:	ldr	r1, [sp, #36]	; 0x24
   4aee8:	cmn	r1, #1
   4aeec:	ble	4af74 <__assert_fail@plt+0x384f8>
   4aef0:	add	r8, sp, #8
   4aef4:	str	r0, [sp, #4]
   4aef8:	mov	r0, r7
   4aefc:	mov	r1, r8
   4af00:	bl	4ab9c <__assert_fail@plt+0x38120>
   4af04:	mov	sl, r0
   4af08:	cmp	r5, #1
   4af0c:	beq	4afd8 <__assert_fail@plt+0x3855c>
   4af10:	bl	127d0 <__errno_location@plt>
   4af14:	mov	r7, r0
   4af18:	ldr	r4, [r0]
   4af1c:	ldrb	r0, [r5, #4]
   4af20:	cmp	r0, #0
   4af24:	beq	4aff8 <__assert_fail@plt+0x3857c>
   4af28:	movw	r0, #7009	; 0x1b61
   4af2c:	add	r1, r5, #5
   4af30:	mov	r2, #1
   4af34:	movt	r0, #5
   4af38:	bl	127a0 <setenv@plt>
   4af3c:	cmp	r0, #0
   4af40:	beq	4b00c <__assert_fail@plt+0x38590>
   4af44:	ldr	r4, [r7]
   4af48:	mov	r6, #0
   4af4c:	cmp	r5, #2
   4af50:	bcc	4b03c <__assert_fail@plt+0x385c0>
   4af54:	str	r4, [sp]
   4af58:	ldr	r4, [r5]
   4af5c:	mov	r0, r5
   4af60:	bl	32c40 <__assert_fail@plt+0x201c4>
   4af64:	cmp	r4, #0
   4af68:	mov	r5, r4
   4af6c:	bne	4af58 <__assert_fail@plt+0x384dc>
   4af70:	b	4b038 <__assert_fail@plt+0x385bc>
   4af74:	cmp	r5, #1
   4af78:	beq	4afe8 <__assert_fail@plt+0x3856c>
   4af7c:	bl	127d0 <__errno_location@plt>
   4af80:	mov	r4, r0
   4af84:	ldr	r6, [r0]
   4af88:	ldrb	r0, [r5, #4]
   4af8c:	cmp	r0, #0
   4af90:	beq	4b080 <__assert_fail@plt+0x38604>
   4af94:	movw	r0, #7009	; 0x1b61
   4af98:	add	r1, r5, #5
   4af9c:	mov	r2, #1
   4afa0:	movt	r0, #5
   4afa4:	bl	127a0 <setenv@plt>
   4afa8:	cmp	r0, #0
   4afac:	beq	4b094 <__assert_fail@plt+0x38618>
   4afb0:	ldr	r6, [r4]
   4afb4:	cmp	r5, #2
   4afb8:	bcc	4b0b8 <__assert_fail@plt+0x3863c>
   4afbc:	ldr	r7, [r5]
   4afc0:	mov	r0, r5
   4afc4:	bl	32c40 <__assert_fail@plt+0x201c4>
   4afc8:	cmp	r7, #0
   4afcc:	mov	r5, r7
   4afd0:	bne	4afbc <__assert_fail@plt+0x38540>
   4afd4:	b	4b0b8 <__assert_fail@plt+0x3863c>
   4afd8:	mov	r6, #1
   4afdc:	and	r0, sl, r6
   4afe0:	cmp	r0, #1
   4afe4:	beq	4b04c <__assert_fail@plt+0x385d0>
   4afe8:	mvn	r4, #0
   4afec:	mov	r0, r4
   4aff0:	sub	sp, fp, #28
   4aff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4aff8:	movw	r0, #7009	; 0x1b61
   4affc:	movt	r0, #5
   4b000:	bl	129f8 <unsetenv@plt>
   4b004:	cmp	r0, #0
   4b008:	bne	4af44 <__assert_fail@plt+0x384c8>
   4b00c:	bl	125cc <tzset@plt>
   4b010:	mov	r6, #1
   4b014:	cmp	r5, #2
   4b018:	bcc	4b03c <__assert_fail@plt+0x385c0>
   4b01c:	str	r4, [sp]
   4b020:	ldr	r4, [r5]
   4b024:	mov	r0, r5
   4b028:	bl	32c40 <__assert_fail@plt+0x201c4>
   4b02c:	cmp	r4, #0
   4b030:	mov	r5, r4
   4b034:	bne	4b020 <__assert_fail@plt+0x385a4>
   4b038:	ldr	r4, [sp]
   4b03c:	str	r4, [r7]
   4b040:	and	r0, sl, r6
   4b044:	cmp	r0, #1
   4b048:	bne	4afe8 <__assert_fail@plt+0x3856c>
   4b04c:	mov	r0, #28
   4b050:	add	r1, r8, #16
   4b054:	ldr	r4, [sp, #4]
   4b058:	vld1.32	{d16-d17}, [r8], r0
   4b05c:	vld1.64	{d18-d19}, [r1]
   4b060:	add	r1, r9, #16
   4b064:	vld1.32	{d20-d21}, [r8]
   4b068:	vst1.32	{d16-d17}, [r9], r0
   4b06c:	vst1.32	{d18-d19}, [r1]
   4b070:	vst1.32	{d20-d21}, [r9]
   4b074:	mov	r0, r4
   4b078:	sub	sp, fp, #28
   4b07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b080:	movw	r0, #7009	; 0x1b61
   4b084:	movt	r0, #5
   4b088:	bl	129f8 <unsetenv@plt>
   4b08c:	cmp	r0, #0
   4b090:	bne	4afb0 <__assert_fail@plt+0x38534>
   4b094:	bl	125cc <tzset@plt>
   4b098:	cmp	r5, #2
   4b09c:	bcc	4b0b8 <__assert_fail@plt+0x3863c>
   4b0a0:	ldr	r7, [r5]
   4b0a4:	mov	r0, r5
   4b0a8:	bl	32c40 <__assert_fail@plt+0x201c4>
   4b0ac:	cmp	r7, #0
   4b0b0:	mov	r5, r7
   4b0b4:	bne	4b0a0 <__assert_fail@plt+0x38624>
   4b0b8:	str	r6, [r4]
   4b0bc:	mvn	r4, #0
   4b0c0:	mov	r0, r4
   4b0c4:	sub	sp, fp, #28
   4b0c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b0cc:	push	{fp, lr}
   4b0d0:	mov	fp, sp
   4b0d4:	movw	r0, #13544	; 0x34e8
   4b0d8:	movt	r0, #6
   4b0dc:	ldr	r0, [r0]
   4b0e0:	bl	12758 <exit@plt>
   4b0e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b0e8:	add	fp, sp, #28
   4b0ec:	sub	sp, sp, #12
   4b0f0:	mov	r4, r3
   4b0f4:	mov	r9, r2
   4b0f8:	mov	r7, r1
   4b0fc:	mov	r8, r0
   4b100:	bl	12788 <strlen@plt>
   4b104:	ldr	r6, [r7]
   4b108:	cmp	r6, #0
   4b10c:	beq	4b1b8 <__assert_fail@plt+0x3873c>
   4b110:	mov	r5, r0
   4b114:	cmp	r9, #0
   4b118:	beq	4b1c8 <__assert_fail@plt+0x3874c>
   4b11c:	add	r0, r7, #4
   4b120:	mvn	sl, #0
   4b124:	mov	r7, #0
   4b128:	str	r9, [sp]
   4b12c:	str	r0, [sp, #8]
   4b130:	mov	r0, #0
   4b134:	str	r0, [sp, #4]
   4b138:	mov	r0, r9
   4b13c:	mov	r0, r6
   4b140:	mov	r1, r8
   4b144:	mov	r2, r5
   4b148:	bl	12a1c <strncmp@plt>
   4b14c:	cmp	r0, #0
   4b150:	bne	4b19c <__assert_fail@plt+0x38720>
   4b154:	mov	r0, r6
   4b158:	bl	12788 <strlen@plt>
   4b15c:	cmp	r0, r5
   4b160:	beq	4b1bc <__assert_fail@plt+0x38740>
   4b164:	cmn	sl, #1
   4b168:	beq	4b198 <__assert_fail@plt+0x3871c>
   4b16c:	ldr	r0, [sp]
   4b170:	mov	r1, r9
   4b174:	mov	r2, r4
   4b178:	mla	r0, sl, r4, r0
   4b17c:	bl	12518 <memcmp@plt>
   4b180:	ldr	r1, [sp, #4]
   4b184:	cmp	r0, #0
   4b188:	movwne	r0, #1
   4b18c:	orr	r1, r1, r0
   4b190:	str	r1, [sp, #4]
   4b194:	b	4b19c <__assert_fail@plt+0x38720>
   4b198:	mov	sl, r7
   4b19c:	ldr	r0, [sp, #8]
   4b1a0:	add	r9, r9, r4
   4b1a4:	ldr	r6, [r0, r7, lsl #2]
   4b1a8:	add	r7, r7, #1
   4b1ac:	cmp	r6, #0
   4b1b0:	bne	4b13c <__assert_fail@plt+0x386c0>
   4b1b4:	b	4b230 <__assert_fail@plt+0x387b4>
   4b1b8:	mvn	r7, #0
   4b1bc:	mov	r0, r7
   4b1c0:	sub	sp, fp, #28
   4b1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b1c8:	add	r4, r7, #4
   4b1cc:	mov	r0, #0
   4b1d0:	mvn	sl, #0
   4b1d4:	mov	r7, #0
   4b1d8:	str	r0, [sp, #4]
   4b1dc:	mov	r0, r6
   4b1e0:	mov	r1, r8
   4b1e4:	mov	r2, r5
   4b1e8:	bl	12a1c <strncmp@plt>
   4b1ec:	cmp	r0, #0
   4b1f0:	bne	4b220 <__assert_fail@plt+0x387a4>
   4b1f4:	mov	r0, r6
   4b1f8:	bl	12788 <strlen@plt>
   4b1fc:	cmp	r0, r5
   4b200:	beq	4b1bc <__assert_fail@plt+0x38740>
   4b204:	ldr	r1, [sp, #4]
   4b208:	cmn	sl, #1
   4b20c:	add	r0, sl, #1
   4b210:	movwne	r0, #1
   4b214:	moveq	sl, r7
   4b218:	orr	r1, r1, r0
   4b21c:	str	r1, [sp, #4]
   4b220:	ldr	r6, [r4, r7, lsl #2]
   4b224:	add	r7, r7, #1
   4b228:	cmp	r6, #0
   4b22c:	bne	4b1dc <__assert_fail@plt+0x38760>
   4b230:	ldr	r0, [sp, #4]
   4b234:	tst	r0, #1
   4b238:	mvnne	sl, #1
   4b23c:	mov	r0, sl
   4b240:	sub	sp, fp, #28
   4b244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b248:	push	{r4, r5, r6, sl, fp, lr}
   4b24c:	add	fp, sp, #16
   4b250:	sub	sp, sp, #8
   4b254:	mov	r4, r1
   4b258:	movw	r1, #9907	; 0x26b3
   4b25c:	mov	r5, r0
   4b260:	movw	r0, #9880	; 0x2698
   4b264:	cmn	r2, #1
   4b268:	mov	r2, #5
   4b26c:	movt	r0, #5
   4b270:	movt	r1, #5
   4b274:	moveq	r1, r0
   4b278:	mov	r0, #0
   4b27c:	bl	1253c <dcgettext@plt>
   4b280:	mov	r6, r0
   4b284:	mov	r0, #0
   4b288:	mov	r1, #8
   4b28c:	mov	r2, r4
   4b290:	bl	2f2ec <__assert_fail@plt+0x1c870>
   4b294:	mov	r4, r0
   4b298:	mov	r0, #1
   4b29c:	mov	r1, r5
   4b2a0:	bl	2f8ac <__assert_fail@plt+0x1ce30>
   4b2a4:	str	r0, [sp]
   4b2a8:	mov	r0, #0
   4b2ac:	mov	r1, #0
   4b2b0:	mov	r2, r6
   4b2b4:	mov	r3, r4
   4b2b8:	bl	12674 <error@plt>
   4b2bc:	sub	sp, fp, #16
   4b2c0:	pop	{r4, r5, r6, sl, fp, pc}
   4b2c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b2c8:	add	fp, sp, #28
   4b2cc:	sub	sp, sp, #4
   4b2d0:	mov	r5, r1
   4b2d4:	movw	r1, #9936	; 0x26d0
   4b2d8:	mov	r9, r2
   4b2dc:	mov	r7, r0
   4b2e0:	mov	r0, #0
   4b2e4:	mov	r2, #5
   4b2e8:	mov	r8, #0
   4b2ec:	movt	r1, #5
   4b2f0:	bl	1253c <dcgettext@plt>
   4b2f4:	movw	sl, #13640	; 0x3548
   4b2f8:	movt	sl, #6
   4b2fc:	ldr	r1, [sl]
   4b300:	bl	12a10 <fputs@plt>
   4b304:	ldr	r6, [r7]
   4b308:	cmp	r6, #0
   4b30c:	bne	4b324 <__assert_fail@plt+0x388a8>
   4b310:	ldr	r1, [sl]
   4b314:	mov	r0, #10
   4b318:	sub	sp, fp, #28
   4b31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b320:	b	12968 <putc@plt>
   4b324:	add	r4, r7, #4
   4b328:	mov	r7, #0
   4b32c:	str	r4, [sp]
   4b330:	cmp	r8, #0
   4b334:	beq	4b378 <__assert_fail@plt+0x388fc>
   4b338:	mov	r0, r7
   4b33c:	mov	r1, r5
   4b340:	mov	r2, r9
   4b344:	bl	12518 <memcmp@plt>
   4b348:	cmp	r0, #0
   4b34c:	bne	4b378 <__assert_fail@plt+0x388fc>
   4b350:	ldr	r4, [sl]
   4b354:	mov	r0, r6
   4b358:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   4b35c:	mov	r2, r0
   4b360:	mov	r0, r4
   4b364:	ldr	r4, [sp]
   4b368:	movw	r1, #9965	; 0x26ed
   4b36c:	movt	r1, #5
   4b370:	bl	127c4 <fprintf@plt>
   4b374:	b	4b39c <__assert_fail@plt+0x38920>
   4b378:	ldr	r7, [sl]
   4b37c:	mov	r0, r6
   4b380:	bl	2f8bc <__assert_fail@plt+0x1ce40>
   4b384:	movw	r1, #9957	; 0x26e5
   4b388:	mov	r2, r0
   4b38c:	mov	r0, r7
   4b390:	movt	r1, #5
   4b394:	bl	127c4 <fprintf@plt>
   4b398:	mov	r7, r5
   4b39c:	ldr	r6, [r4, -r8, lsl #2]
   4b3a0:	add	r5, r5, r9
   4b3a4:	sub	r8, r8, #1
   4b3a8:	cmp	r6, #0
   4b3ac:	bne	4b330 <__assert_fail@plt+0x388b4>
   4b3b0:	b	4b310 <__assert_fail@plt+0x38894>
   4b3b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b3b8:	add	fp, sp, #28
   4b3bc:	sub	sp, sp, #4
   4b3c0:	ldr	r8, [fp, #8]
   4b3c4:	mov	r7, r0
   4b3c8:	mov	r4, r3
   4b3cc:	mov	r5, r2
   4b3d0:	mov	r6, r1
   4b3d4:	mov	r0, r1
   4b3d8:	mov	r1, r2
   4b3dc:	mov	r2, r3
   4b3e0:	mov	r3, r8
   4b3e4:	bl	4b0e4 <__assert_fail@plt+0x38668>
   4b3e8:	cmn	r0, #1
   4b3ec:	ble	4b3f8 <__assert_fail@plt+0x3897c>
   4b3f0:	sub	sp, fp, #28
   4b3f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b3f8:	movw	r0, #9880	; 0x2698
   4b3fc:	movw	r1, #9907	; 0x26b3
   4b400:	ldr	sl, [fp, #12]
   4b404:	mov	r2, #5
   4b408:	movt	r0, #5
   4b40c:	movt	r1, #5
   4b410:	moveq	r1, r0
   4b414:	mov	r0, #0
   4b418:	bl	1253c <dcgettext@plt>
   4b41c:	mov	r9, r0
   4b420:	mov	r0, #0
   4b424:	mov	r1, #8
   4b428:	mov	r2, r6
   4b42c:	bl	2f2ec <__assert_fail@plt+0x1c870>
   4b430:	mov	r6, r0
   4b434:	mov	r0, #1
   4b438:	mov	r1, r7
   4b43c:	bl	2f8ac <__assert_fail@plt+0x1ce30>
   4b440:	str	r0, [sp]
   4b444:	mov	r0, #0
   4b448:	mov	r1, #0
   4b44c:	mov	r2, r9
   4b450:	mov	r3, r6
   4b454:	bl	12674 <error@plt>
   4b458:	mov	r0, r5
   4b45c:	mov	r1, r4
   4b460:	mov	r2, r8
   4b464:	bl	4b2c4 <__assert_fail@plt+0x38848>
   4b468:	blx	sl
   4b46c:	mvn	r0, #0
   4b470:	sub	sp, fp, #28
   4b474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b478:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4b47c:	add	fp, sp, #24
   4b480:	ldr	r6, [r1]
   4b484:	cmp	r6, #0
   4b488:	beq	4b4ec <__assert_fail@plt+0x38a70>
   4b48c:	mov	r8, r1
   4b490:	mov	r7, r2
   4b494:	mov	r1, r2
   4b498:	mov	r2, r3
   4b49c:	mov	r4, r3
   4b4a0:	mov	r9, r0
   4b4a4:	bl	12518 <memcmp@plt>
   4b4a8:	cmp	r0, #0
   4b4ac:	beq	4b4e4 <__assert_fail@plt+0x38a68>
   4b4b0:	add	r7, r7, r4
   4b4b4:	add	r5, r8, #4
   4b4b8:	ldr	r6, [r5]
   4b4bc:	cmp	r6, #0
   4b4c0:	beq	4b4ec <__assert_fail@plt+0x38a70>
   4b4c4:	mov	r0, r9
   4b4c8:	mov	r1, r7
   4b4cc:	mov	r2, r4
   4b4d0:	bl	12518 <memcmp@plt>
   4b4d4:	add	r7, r7, r4
   4b4d8:	add	r5, r5, #4
   4b4dc:	cmp	r0, #0
   4b4e0:	bne	4b4b8 <__assert_fail@plt+0x38a3c>
   4b4e4:	mov	r0, r6
   4b4e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4b4ec:	mov	r6, #0
   4b4f0:	mov	r0, r6
   4b4f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4b4f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4b4fc:	add	fp, sp, #24
   4b500:	sub	sp, sp, #32
   4b504:	mov	r5, r0
   4b508:	ldrb	r0, [r2]
   4b50c:	cmp	r0, #0
   4b510:	beq	4b540 <__assert_fail@plt+0x38ac4>
   4b514:	movw	r9, #15932	; 0x3e3c
   4b518:	mov	r4, r2
   4b51c:	mov	r6, r1
   4b520:	movt	r9, #6
   4b524:	ldr	r0, [r9]
   4b528:	cmp	r0, #0
   4b52c:	beq	4b54c <__assert_fail@plt+0x38ad0>
   4b530:	mov	r7, #0
   4b534:	cmp	r0, #0
   4b538:	bge	4b5b8 <__assert_fail@plt+0x38b3c>
   4b53c:	b	4b600 <__assert_fail@plt+0x38b84>
   4b540:	mov	r0, #0
   4b544:	strb	r0, [r5]
   4b548:	b	4b5fc <__assert_fail@plt+0x38b80>
   4b54c:	movw	r0, #2893	; 0xb4d
   4b550:	movw	r1, #18688	; 0x4900
   4b554:	movt	r0, #5
   4b558:	movt	r1, #8
   4b55c:	bl	126a4 <open64@plt>
   4b560:	cmn	r0, #1
   4b564:	ble	4b60c <__assert_fail@plt+0x38b90>
   4b568:	movw	r1, #9970	; 0x26f2
   4b56c:	mov	r7, r0
   4b570:	mov	r8, sp
   4b574:	movt	r1, #5
   4b578:	mov	r0, r8
   4b57c:	mov	r2, r7
   4b580:	bl	12938 <sprintf@plt>
   4b584:	mov	r0, r8
   4b588:	mov	r1, #0
   4b58c:	bl	12878 <access@plt>
   4b590:	cmp	r0, #0
   4b594:	mvn	r1, #0
   4b598:	mov	r0, r7
   4b59c:	movweq	r1, #1
   4b5a0:	str	r1, [r9]
   4b5a4:	bl	12a34 <close@plt>
   4b5a8:	ldr	r0, [r9]
   4b5ac:	mov	r7, #0
   4b5b0:	cmp	r0, #0
   4b5b4:	blt	4b600 <__assert_fail@plt+0x38b84>
   4b5b8:	mov	r0, r4
   4b5bc:	bl	12788 <strlen@plt>
   4b5c0:	add	r0, r0, #27
   4b5c4:	cmp	r0, #4032	; 0xfc0
   4b5c8:	bls	4b5dc <__assert_fail@plt+0x38b60>
   4b5cc:	bl	35608 <__assert_fail@plt+0x22b8c>
   4b5d0:	mov	r5, r0
   4b5d4:	cmp	r0, #0
   4b5d8:	beq	4b600 <__assert_fail@plt+0x38b84>
   4b5dc:	movw	r1, #9993	; 0x2709
   4b5e0:	mov	r0, r5
   4b5e4:	mov	r2, r6
   4b5e8:	movt	r1, #5
   4b5ec:	bl	12938 <sprintf@plt>
   4b5f0:	add	r0, r5, r0
   4b5f4:	mov	r1, r4
   4b5f8:	bl	12638 <strcpy@plt>
   4b5fc:	mov	r7, r5
   4b600:	mov	r0, r7
   4b604:	sub	sp, fp, #24
   4b608:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4b60c:	mvn	r0, #0
   4b610:	mov	r7, #0
   4b614:	str	r0, [r9]
   4b618:	mov	r0, r7
   4b61c:	sub	sp, fp, #24
   4b620:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4b624:	sub	r0, r0, #1
   4b628:	ldrb	r3, [r0, #1]!
   4b62c:	cmp	r3, #47	; 0x2f
   4b630:	beq	4b628 <__assert_fail@plt+0x38bac>
   4b634:	mov	r2, #0
   4b638:	mov	r1, r0
   4b63c:	uxtb	r3, r3
   4b640:	cmp	r3, #47	; 0x2f
   4b644:	beq	4b66c <__assert_fail@plt+0x38bf0>
   4b648:	cmp	r3, #0
   4b64c:	bxeq	lr
   4b650:	tst	r2, #1
   4b654:	mov	r2, #0
   4b658:	movne	r0, r1
   4b65c:	ldrb	r3, [r1, #1]!
   4b660:	uxtb	r3, r3
   4b664:	cmp	r3, #47	; 0x2f
   4b668:	bne	4b648 <__assert_fail@plt+0x38bcc>
   4b66c:	ldrb	r3, [r1, #1]!
   4b670:	mov	r2, #1
   4b674:	uxtb	r3, r3
   4b678:	cmp	r3, #47	; 0x2f
   4b67c:	bne	4b648 <__assert_fail@plt+0x38bcc>
   4b680:	b	4b66c <__assert_fail@plt+0x38bf0>
   4b684:	push	{r4, sl, fp, lr}
   4b688:	add	fp, sp, #8
   4b68c:	mov	r4, r0
   4b690:	bl	12788 <strlen@plt>
   4b694:	mov	r1, r0
   4b698:	sub	r2, r4, #1
   4b69c:	mov	r0, r1
   4b6a0:	cmp	r1, #2
   4b6a4:	popcc	{r4, sl, fp, pc}
   4b6a8:	ldrb	r3, [r2, r0]
   4b6ac:	sub	r1, r0, #1
   4b6b0:	cmp	r3, #47	; 0x2f
   4b6b4:	beq	4b69c <__assert_fail@plt+0x38c20>
   4b6b8:	pop	{r4, sl, fp, pc}
   4b6bc:	push	{r4, r5, r6, sl, fp, lr}
   4b6c0:	add	fp, sp, #16
   4b6c4:	mov	r4, r0
   4b6c8:	bl	12650 <__fpending@plt>
   4b6cc:	mov	r5, r0
   4b6d0:	mov	r0, r4
   4b6d4:	bl	1247c <ferror@plt>
   4b6d8:	mov	r6, r0
   4b6dc:	mov	r0, r4
   4b6e0:	bl	12884 <fclose@plt>
   4b6e4:	cmp	r6, #0
   4b6e8:	beq	4b708 <__assert_fail@plt+0x38c8c>
   4b6ec:	mvn	r4, #0
   4b6f0:	cmp	r0, #0
   4b6f4:	bne	4b73c <__assert_fail@plt+0x38cc0>
   4b6f8:	bl	127d0 <__errno_location@plt>
   4b6fc:	mov	r1, #0
   4b700:	str	r1, [r0]
   4b704:	b	4b73c <__assert_fail@plt+0x38cc0>
   4b708:	cmp	r0, #0
   4b70c:	mov	r4, r0
   4b710:	mvnne	r4, #0
   4b714:	cmp	r5, #0
   4b718:	bne	4b73c <__assert_fail@plt+0x38cc0>
   4b71c:	cmp	r0, #0
   4b720:	beq	4b73c <__assert_fail@plt+0x38cc0>
   4b724:	bl	127d0 <__errno_location@plt>
   4b728:	ldr	r0, [r0]
   4b72c:	subs	r4, r0, #9
   4b730:	mvnne	r4, #0
   4b734:	mov	r0, r4
   4b738:	pop	{r4, r5, r6, sl, fp, pc}
   4b73c:	mov	r0, r4
   4b740:	pop	{r4, r5, r6, sl, fp, pc}
   4b744:	movw	r2, #62998	; 0xf616
   4b748:	mov	r1, #0
   4b74c:	movt	r2, #149	; 0x95
   4b750:	str	r1, [r0, #16]
   4b754:	str	r1, [r0, #20]
   4b758:	str	r2, [r0, #24]
   4b75c:	bx	lr
   4b760:	push	{r4, r5, r6, r7, fp, lr}
   4b764:	add	fp, sp, #16
   4b768:	ldr	r2, [r0, #24]
   4b76c:	movw	r3, #62998	; 0xf616
   4b770:	movt	r3, #149	; 0x95
   4b774:	cmp	r2, r3
   4b778:	bne	4b818 <__assert_fail@plt+0x38d9c>
   4b77c:	mov	r3, r0
   4b780:	ldr	r2, [r3, #16]!
   4b784:	ldr	lr, [r3, #4]
   4b788:	orrs	r5, r2, lr
   4b78c:	beq	4b7c4 <__assert_fail@plt+0x38d48>
   4b790:	ldrd	r4, [r0]
   4b794:	ldrd	r6, [r1, #96]	; 0x60
   4b798:	eor	r7, r7, r5
   4b79c:	eor	r6, r6, r4
   4b7a0:	orrs	r7, r6, r7
   4b7a4:	bne	4b7c4 <__assert_fail@plt+0x38d48>
   4b7a8:	ldrd	r4, [r0, #8]
   4b7ac:	ldrd	r6, [r1]
   4b7b0:	mov	ip, #1
   4b7b4:	eor	r7, r7, r5
   4b7b8:	eor	r6, r6, r4
   4b7bc:	orrs	r7, r6, r7
   4b7c0:	beq	4b7e4 <__assert_fail@plt+0x38d68>
   4b7c4:	adds	r4, r2, #1
   4b7c8:	mov	ip, #0
   4b7cc:	adc	r5, lr, #0
   4b7d0:	and	r2, r4, r2
   4b7d4:	strd	r4, [r3]
   4b7d8:	and	r3, r5, lr
   4b7dc:	orrs	r2, r2, r3
   4b7e0:	beq	4b7ec <__assert_fail@plt+0x38d70>
   4b7e4:	mov	r0, ip
   4b7e8:	pop	{r4, r5, r6, r7, fp, pc}
   4b7ec:	orrs	r2, r4, r5
   4b7f0:	moveq	ip, #1
   4b7f4:	moveq	r0, ip
   4b7f8:	popeq	{r4, r5, r6, r7, fp, pc}
   4b7fc:	ldrd	r2, [r1]
   4b800:	str	r3, [r0, #12]
   4b804:	str	r2, [r0, #8]
   4b808:	ldrd	r2, [r1, #96]	; 0x60
   4b80c:	stm	r0, {r2, r3}
   4b810:	mov	r0, ip
   4b814:	pop	{r4, r5, r6, r7, fp, pc}
   4b818:	movw	r0, #10011	; 0x271b
   4b81c:	movw	r1, #10035	; 0x2733
   4b820:	movw	r3, #10049	; 0x2741
   4b824:	mov	r2, #60	; 0x3c
   4b828:	movt	r0, #5
   4b82c:	movt	r1, #5
   4b830:	movt	r3, #5
   4b834:	bl	12a7c <__assert_fail@plt>
   4b838:	push	{r4, r5, r6, r7, fp, lr}
   4b83c:	add	fp, sp, #16
   4b840:	mov	r4, r0
   4b844:	ldr	r0, [r0, #4]
   4b848:	mov	r5, r1
   4b84c:	cmp	r0, r1
   4b850:	movcs	r0, #1
   4b854:	strcs	r5, [r4]
   4b858:	popcs	{r4, r5, r6, r7, fp, pc}
   4b85c:	mov	r6, r3
   4b860:	cmp	r3, #0
   4b864:	beq	4b88c <__assert_fail@plt+0x38e10>
   4b868:	mvn	r0, #0
   4b86c:	udiv	r0, r0, r6
   4b870:	cmp	r0, r5
   4b874:	bcs	4b88c <__assert_fail@plt+0x38e10>
   4b878:	bl	127d0 <__errno_location@plt>
   4b87c:	mov	r1, #12
   4b880:	str	r1, [r0]
   4b884:	mov	r0, #0
   4b888:	pop	{r4, r5, r6, r7, fp, pc}
   4b88c:	ldr	r0, [r4, #8]
   4b890:	mul	r1, r6, r5
   4b894:	cmp	r0, r2
   4b898:	beq	4b8b0 <__assert_fail@plt+0x38e34>
   4b89c:	bl	36328 <__assert_fail@plt+0x238ac>
   4b8a0:	mov	r7, r0
   4b8a4:	cmp	r0, #0
   4b8a8:	bne	4b8e0 <__assert_fail@plt+0x38e64>
   4b8ac:	b	4b8f0 <__assert_fail@plt+0x38e74>
   4b8b0:	mov	r0, r1
   4b8b4:	bl	35608 <__assert_fail@plt+0x22b8c>
   4b8b8:	cmp	r0, #0
   4b8bc:	beq	4b8f0 <__assert_fail@plt+0x38e74>
   4b8c0:	ldr	r1, [r4, #8]
   4b8c4:	mov	r7, r0
   4b8c8:	cmp	r1, #0
   4b8cc:	beq	4b8e0 <__assert_fail@plt+0x38e64>
   4b8d0:	ldr	r0, [r4]
   4b8d4:	mul	r2, r0, r6
   4b8d8:	mov	r0, r7
   4b8dc:	bl	124b8 <memcpy@plt>
   4b8e0:	mov	r0, #1
   4b8e4:	str	r5, [r4]
   4b8e8:	stmib	r4, {r5, r7}
   4b8ec:	pop	{r4, r5, r6, r7, fp, pc}
   4b8f0:	mov	r0, #0
   4b8f4:	pop	{r4, r5, r6, r7, fp, pc}
   4b8f8:	mov	r1, r0
   4b8fc:	mov	r0, #0
   4b900:	b	124a0 <clock_gettime@plt>
   4b904:	push	{fp, lr}
   4b908:	mov	fp, sp
   4b90c:	mov	r1, r0
   4b910:	mov	r0, #0
   4b914:	bl	124a0 <clock_gettime@plt>
   4b918:	pop	{fp, pc}
   4b91c:	push	{r4, sl, fp, lr}
   4b920:	add	fp, sp, #8
   4b924:	sub	sp, sp, #264	; 0x108
   4b928:	add	r1, sp, #7
   4b92c:	movw	r2, #257	; 0x101
   4b930:	bl	4bce0 <__assert_fail@plt+0x39264>
   4b934:	mov	r4, #0
   4b938:	cmp	r0, #0
   4b93c:	bne	4b974 <__assert_fail@plt+0x38ef8>
   4b940:	movw	r1, #51438	; 0xc8ee
   4b944:	add	r0, sp, #7
   4b948:	movt	r1, #4
   4b94c:	bl	123d4 <strcmp@plt>
   4b950:	cmp	r0, #0
   4b954:	beq	4b974 <__assert_fail@plt+0x38ef8>
   4b958:	movw	r1, #10116	; 0x2784
   4b95c:	add	r0, sp, #7
   4b960:	movt	r1, #5
   4b964:	bl	123d4 <strcmp@plt>
   4b968:	mov	r4, r0
   4b96c:	cmp	r0, #0
   4b970:	movwne	r4, #1
   4b974:	mov	r0, r4
   4b978:	sub	sp, fp, #8
   4b97c:	pop	{r4, sl, fp, pc}
   4b980:	mov	r3, #1
   4b984:	mov	r2, #0
   4b988:	vdup.32	q8, r1
   4b98c:	strb	r3, [r0, #28]
   4b990:	str	r2, [r0, #20]
   4b994:	str	r2, [r0, #24]
   4b998:	vst1.32	{d16-d17}, [r0]!
   4b99c:	str	r1, [r0]
   4b9a0:	bx	lr
   4b9a4:	ldrb	r0, [r0, #28]
   4b9a8:	bx	lr
   4b9ac:	push	{fp, lr}
   4b9b0:	mov	fp, sp
   4b9b4:	ldrb	r3, [r0, #28]
   4b9b8:	ldr	r2, [r0, #20]
   4b9bc:	eor	lr, r3, #1
   4b9c0:	add	r2, r2, lr
   4b9c4:	and	r3, r2, #3
   4b9c8:	ldr	ip, [r0, r3, lsl #2]
   4b9cc:	str	r1, [r0, r3, lsl #2]
   4b9d0:	str	r3, [r0, #20]
   4b9d4:	ldr	r1, [r0, #24]
   4b9d8:	cmp	r3, r1
   4b9dc:	addeq	r1, r2, lr
   4b9e0:	andeq	r1, r1, #3
   4b9e4:	streq	r1, [r0, #24]
   4b9e8:	mov	r1, #0
   4b9ec:	strb	r1, [r0, #28]
   4b9f0:	mov	r0, ip
   4b9f4:	pop	{fp, pc}
   4b9f8:	ldrb	r1, [r0, #28]
   4b9fc:	cmp	r1, #0
   4ba00:	bne	4ba44 <__assert_fail@plt+0x38fc8>
   4ba04:	ldr	r3, [r0, #20]
   4ba08:	ldr	r2, [r0, #16]
   4ba0c:	ldr	r1, [r0, r3, lsl #2]
   4ba10:	str	r2, [r0, r3, lsl #2]
   4ba14:	ldr	r2, [r0, #20]
   4ba18:	ldr	r3, [r0, #24]
   4ba1c:	cmp	r2, r3
   4ba20:	moveq	r2, #1
   4ba24:	strbeq	r2, [r0, #28]
   4ba28:	moveq	r0, r1
   4ba2c:	bxeq	lr
   4ba30:	sub	r2, r2, #1
   4ba34:	and	r2, r2, #3
   4ba38:	str	r2, [r0, #20]
   4ba3c:	mov	r0, r1
   4ba40:	bx	lr
   4ba44:	push	{fp, lr}
   4ba48:	mov	fp, sp
   4ba4c:	bl	12a28 <abort@plt>
   4ba50:	push	{fp, lr}
   4ba54:	mov	fp, sp
   4ba58:	mov	r0, #14
   4ba5c:	bl	12908 <nl_langinfo@plt>
   4ba60:	movw	r1, #58175	; 0xe33f
   4ba64:	cmp	r0, #0
   4ba68:	movt	r1, #4
   4ba6c:	movne	r1, r0
   4ba70:	movw	r0, #10122	; 0x278a
   4ba74:	ldrb	r2, [r1]
   4ba78:	movt	r0, #5
   4ba7c:	cmp	r2, #0
   4ba80:	movne	r0, r1
   4ba84:	pop	{fp, pc}
   4ba88:	push	{r4, sl, fp, lr}
   4ba8c:	add	fp, sp, #8
   4ba90:	mov	r4, #0
   4ba94:	adds	r0, r0, #16
   4ba98:	adc	r1, r4, #0
   4ba9c:	rsb	r2, r1, #0
   4baa0:	eors	r2, r2, r1
   4baa4:	movwne	r2, #1
   4baa8:	cmp	r0, #0
   4baac:	blt	4bacc <__assert_fail@plt+0x39050>
   4bab0:	cmp	r2, #0
   4bab4:	asreq	r2, r0, #31
   4bab8:	eoreq	r3, r0, r0
   4babc:	andeq	r2, r2, #1
   4bac0:	eoreq	r1, r1, r2
   4bac4:	orrseq	r1, r3, r1
   4bac8:	beq	4bad4 <__assert_fail@plt+0x39058>
   4bacc:	mov	r0, r4
   4bad0:	pop	{r4, sl, fp, pc}
   4bad4:	bl	126c8 <malloc@plt>
   4bad8:	cmp	r0, #0
   4badc:	addne	r4, r0, #8
   4bae0:	movne	r1, #8
   4bae4:	bfine	r4, r1, #0, #4
   4bae8:	subne	r0, r4, r0
   4baec:	strbne	r0, [r4, #-1]
   4baf0:	mov	r0, r4
   4baf4:	pop	{r4, sl, fp, pc}
   4baf8:	tst	r0, #7
   4bafc:	bne	4bb14 <__assert_fail@plt+0x39098>
   4bb00:	tst	r0, #8
   4bb04:	bxeq	lr
   4bb08:	ldrb	r1, [r0, #-1]
   4bb0c:	sub	r0, r0, r1
   4bb10:	b	32c40 <__assert_fail@plt+0x201c4>
   4bb14:	push	{fp, lr}
   4bb18:	mov	fp, sp
   4bb1c:	bl	12a28 <abort@plt>
   4bb20:	push	{r4, sl, fp, lr}
   4bb24:	add	fp, sp, #8
   4bb28:	mov	r4, r0
   4bb2c:	bl	12434 <wcwidth@plt>
   4bb30:	cmn	r0, #1
   4bb34:	popgt	{r4, sl, fp, pc}
   4bb38:	mov	r0, r4
   4bb3c:	bl	1259c <iswcntrl@plt>
   4bb40:	clz	r0, r0
   4bb44:	lsr	r0, r0, #5
   4bb48:	pop	{r4, sl, fp, pc}
   4bb4c:	push	{r4, r5, r6, sl, fp, lr}
   4bb50:	add	fp, sp, #16
   4bb54:	mov	r4, r0
   4bb58:	mov	r0, r1
   4bb5c:	mov	r5, r1
   4bb60:	ldr	r1, [r0], #16
   4bb64:	cmp	r1, r0
   4bb68:	beq	4bb74 <__assert_fail@plt+0x390f8>
   4bb6c:	mov	r6, r1
   4bb70:	b	4bb84 <__assert_fail@plt+0x39108>
   4bb74:	ldr	r2, [r5, #4]
   4bb78:	add	r6, r4, #16
   4bb7c:	mov	r0, r6
   4bb80:	bl	124b8 <memcpy@plt>
   4bb84:	str	r6, [r4]
   4bb88:	ldr	r0, [r5, #4]
   4bb8c:	str	r0, [r4, #4]
   4bb90:	ldrb	r0, [r5, #8]
   4bb94:	strb	r0, [r4, #8]
   4bb98:	cmp	r0, #0
   4bb9c:	ldrne	r0, [r5, #12]
   4bba0:	strne	r0, [r4, #12]
   4bba4:	pop	{r4, r5, r6, sl, fp, pc}
   4bba8:	movw	r2, #10128	; 0x2790
   4bbac:	ubfx	r1, r0, #5, #3
   4bbb0:	and	r0, r0, #31
   4bbb4:	movt	r2, #5
   4bbb8:	ldr	r1, [r2, r1, lsl #2]
   4bbbc:	mov	r2, #1
   4bbc0:	and	r0, r1, r2, lsl r0
   4bbc4:	cmp	r0, #0
   4bbc8:	movwne	r0, #1
   4bbcc:	bx	lr
   4bbd0:	push	{r4, r5, r6, sl, fp, lr}
   4bbd4:	add	fp, sp, #16
   4bbd8:	sub	sp, sp, #56	; 0x38
   4bbdc:	mov	r5, r0
   4bbe0:	bl	12620 <__ctype_get_mb_cur_max@plt>
   4bbe4:	cmp	r0, #2
   4bbe8:	bcc	4bc74 <__assert_fail@plt+0x391f8>
   4bbec:	mov	r4, #0
   4bbf0:	mov	r0, sp
   4bbf4:	str	r4, [sp, #8]
   4bbf8:	str	r4, [sp, #4]
   4bbfc:	strb	r4, [sp]
   4bc00:	str	r5, [sp, #16]
   4bc04:	strb	r4, [sp, #12]
   4bc08:	bl	26f70 <__assert_fail@plt+0x144f4>
   4bc0c:	ldrb	r0, [sp, #24]
   4bc10:	cmp	r0, #0
   4bc14:	beq	4bc24 <__assert_fail@plt+0x391a8>
   4bc18:	ldr	r0, [sp, #28]
   4bc1c:	cmp	r0, #0
   4bc20:	beq	4bc68 <__assert_fail@plt+0x391ec>
   4bc24:	mov	r6, #0
   4bc28:	mov	r5, sp
   4bc2c:	mov	r4, #0
   4bc30:	strb	r6, [sp, #12]
   4bc34:	ldr	r0, [sp, #16]
   4bc38:	ldr	r1, [sp, #20]
   4bc3c:	add	r0, r0, r1
   4bc40:	str	r0, [sp, #16]
   4bc44:	mov	r0, r5
   4bc48:	bl	26f70 <__assert_fail@plt+0x144f4>
   4bc4c:	ldrb	r1, [sp, #24]
   4bc50:	ldr	r0, [sp, #28]
   4bc54:	add	r4, r4, #1
   4bc58:	cmp	r1, #0
   4bc5c:	beq	4bc30 <__assert_fail@plt+0x391b4>
   4bc60:	cmp	r0, #0
   4bc64:	bne	4bc30 <__assert_fail@plt+0x391b4>
   4bc68:	mov	r0, r4
   4bc6c:	sub	sp, fp, #16
   4bc70:	pop	{r4, r5, r6, sl, fp, pc}
   4bc74:	mov	r0, r5
   4bc78:	sub	sp, fp, #16
   4bc7c:	pop	{r4, r5, r6, sl, fp, lr}
   4bc80:	b	12788 <strlen@plt>
   4bc84:	push	{r4, r5, r6, sl, fp, lr}
   4bc88:	add	fp, sp, #16
   4bc8c:	orr	r2, r2, #18688	; 0x4900
   4bc90:	mov	r4, r3
   4bc94:	orr	r2, r2, #524288	; 0x80000
   4bc98:	bl	27820 <__assert_fail@plt+0x14da4>
   4bc9c:	mov	r5, r0
   4bca0:	mov	r0, #0
   4bca4:	cmp	r5, #0
   4bca8:	poplt	{r4, r5, r6, sl, fp, pc}
   4bcac:	mov	r0, r5
   4bcb0:	bl	12950 <fdopendir@plt>
   4bcb4:	cmp	r0, #0
   4bcb8:	strne	r5, [r4]
   4bcbc:	popne	{r4, r5, r6, sl, fp, pc}
   4bcc0:	bl	127d0 <__errno_location@plt>
   4bcc4:	ldr	r6, [r0]
   4bcc8:	mov	r4, r0
   4bccc:	mov	r0, r5
   4bcd0:	bl	12a34 <close@plt>
   4bcd4:	mov	r0, #0
   4bcd8:	str	r6, [r4]
   4bcdc:	pop	{r4, r5, r6, sl, fp, pc}
   4bce0:	push	{r4, r5, r6, r7, fp, lr}
   4bce4:	add	fp, sp, #16
   4bce8:	mov	r4, r1
   4bcec:	mov	r1, #0
   4bcf0:	mov	r6, r2
   4bcf4:	bl	128cc <setlocale@plt>
   4bcf8:	cmp	r0, #0
   4bcfc:	beq	4bd2c <__assert_fail@plt+0x392b0>
   4bd00:	mov	r7, r0
   4bd04:	bl	12788 <strlen@plt>
   4bd08:	cmp	r0, r6
   4bd0c:	bcs	4bd4c <__assert_fail@plt+0x392d0>
   4bd10:	add	r2, r0, #1
   4bd14:	mov	r0, r4
   4bd18:	mov	r1, r7
   4bd1c:	bl	124b8 <memcpy@plt>
   4bd20:	mov	r5, #0
   4bd24:	mov	r0, r5
   4bd28:	pop	{r4, r5, r6, r7, fp, pc}
   4bd2c:	cmp	r6, #0
   4bd30:	mov	r5, #22
   4bd34:	movne	r0, #0
   4bd38:	strbne	r0, [r4]
   4bd3c:	movne	r0, r5
   4bd40:	popne	{r4, r5, r6, r7, fp, pc}
   4bd44:	mov	r0, r5
   4bd48:	pop	{r4, r5, r6, r7, fp, pc}
   4bd4c:	mov	r5, #34	; 0x22
   4bd50:	cmp	r6, #0
   4bd54:	beq	4bd74 <__assert_fail@plt+0x392f8>
   4bd58:	sub	r6, r6, #1
   4bd5c:	mov	r0, r4
   4bd60:	mov	r1, r7
   4bd64:	mov	r2, r6
   4bd68:	bl	124b8 <memcpy@plt>
   4bd6c:	mov	r0, #0
   4bd70:	strb	r0, [r4, r6]
   4bd74:	mov	r0, r5
   4bd78:	pop	{r4, r5, r6, r7, fp, pc}
   4bd7c:	mov	r1, #0
   4bd80:	b	128cc <setlocale@plt>
   4bd84:	eor	r1, r1, #-2147483648	; 0x80000000
   4bd88:	b	4bd90 <__assert_fail@plt+0x39314>
   4bd8c:	eor	r3, r3, #-2147483648	; 0x80000000
   4bd90:	push	{r4, r5, lr}
   4bd94:	lsl	r4, r1, #1
   4bd98:	lsl	r5, r3, #1
   4bd9c:	teq	r4, r5
   4bda0:	teqeq	r0, r2
   4bda4:	orrsne	ip, r4, r0
   4bda8:	orrsne	ip, r5, r2
   4bdac:	mvnsne	ip, r4, asr #21
   4bdb0:	mvnsne	ip, r5, asr #21
   4bdb4:	beq	4bfa0 <__assert_fail@plt+0x39524>
   4bdb8:	lsr	r4, r4, #21
   4bdbc:	rsbs	r5, r4, r5, lsr #21
   4bdc0:	rsblt	r5, r5, #0
   4bdc4:	ble	4bde4 <__assert_fail@plt+0x39368>
   4bdc8:	add	r4, r4, r5
   4bdcc:	eor	r2, r0, r2
   4bdd0:	eor	r3, r1, r3
   4bdd4:	eor	r0, r2, r0
   4bdd8:	eor	r1, r3, r1
   4bddc:	eor	r2, r0, r2
   4bde0:	eor	r3, r1, r3
   4bde4:	cmp	r5, #54	; 0x36
   4bde8:	pophi	{r4, r5, pc}
   4bdec:	tst	r1, #-2147483648	; 0x80000000
   4bdf0:	lsl	r1, r1, #12
   4bdf4:	mov	ip, #1048576	; 0x100000
   4bdf8:	orr	r1, ip, r1, lsr #12
   4bdfc:	beq	4be08 <__assert_fail@plt+0x3938c>
   4be00:	rsbs	r0, r0, #0
   4be04:	rsc	r1, r1, #0
   4be08:	tst	r3, #-2147483648	; 0x80000000
   4be0c:	lsl	r3, r3, #12
   4be10:	orr	r3, ip, r3, lsr #12
   4be14:	beq	4be20 <__assert_fail@plt+0x393a4>
   4be18:	rsbs	r2, r2, #0
   4be1c:	rsc	r3, r3, #0
   4be20:	teq	r4, r5
   4be24:	beq	4bf88 <__assert_fail@plt+0x3950c>
   4be28:	sub	r4, r4, #1
   4be2c:	rsbs	lr, r5, #32
   4be30:	blt	4be4c <__assert_fail@plt+0x393d0>
   4be34:	lsl	ip, r2, lr
   4be38:	adds	r0, r0, r2, lsr r5
   4be3c:	adc	r1, r1, #0
   4be40:	adds	r0, r0, r3, lsl lr
   4be44:	adcs	r1, r1, r3, asr r5
   4be48:	b	4be68 <__assert_fail@plt+0x393ec>
   4be4c:	sub	r5, r5, #32
   4be50:	add	lr, lr, #32
   4be54:	cmp	r2, #1
   4be58:	lsl	ip, r3, lr
   4be5c:	orrcs	ip, ip, #2
   4be60:	adds	r0, r0, r3, asr r5
   4be64:	adcs	r1, r1, r3, asr #31
   4be68:	and	r5, r1, #-2147483648	; 0x80000000
   4be6c:	bpl	4be7c <__assert_fail@plt+0x39400>
   4be70:	rsbs	ip, ip, #0
   4be74:	rscs	r0, r0, #0
   4be78:	rsc	r1, r1, #0
   4be7c:	cmp	r1, #1048576	; 0x100000
   4be80:	bcc	4bec0 <__assert_fail@plt+0x39444>
   4be84:	cmp	r1, #2097152	; 0x200000
   4be88:	bcc	4bea8 <__assert_fail@plt+0x3942c>
   4be8c:	lsrs	r1, r1, #1
   4be90:	rrxs	r0, r0
   4be94:	rrx	ip, ip
   4be98:	add	r4, r4, #1
   4be9c:	lsl	r2, r4, #21
   4bea0:	cmn	r2, #4194304	; 0x400000
   4bea4:	bcs	4c000 <__assert_fail@plt+0x39584>
   4bea8:	cmp	ip, #-2147483648	; 0x80000000
   4beac:	lsrseq	ip, r0, #1
   4beb0:	adcs	r0, r0, #0
   4beb4:	adc	r1, r1, r4, lsl #20
   4beb8:	orr	r1, r1, r5
   4bebc:	pop	{r4, r5, pc}
   4bec0:	lsls	ip, ip, #1
   4bec4:	adcs	r0, r0, r0
   4bec8:	adc	r1, r1, r1
   4becc:	tst	r1, #1048576	; 0x100000
   4bed0:	sub	r4, r4, #1
   4bed4:	bne	4bea8 <__assert_fail@plt+0x3942c>
   4bed8:	teq	r1, #0
   4bedc:	moveq	r1, r0
   4bee0:	moveq	r0, #0
   4bee4:	clz	r3, r1
   4bee8:	addeq	r3, r3, #32
   4beec:	sub	r3, r3, #11
   4bef0:	subs	r2, r3, #32
   4bef4:	bge	4bf18 <__assert_fail@plt+0x3949c>
   4bef8:	adds	r2, r2, #12
   4befc:	ble	4bf14 <__assert_fail@plt+0x39498>
   4bf00:	add	ip, r2, #20
   4bf04:	rsb	r2, r2, #12
   4bf08:	lsl	r0, r1, ip
   4bf0c:	lsr	r1, r1, r2
   4bf10:	b	4bf28 <__assert_fail@plt+0x394ac>
   4bf14:	add	r2, r2, #20
   4bf18:	rsble	ip, r2, #32
   4bf1c:	lsl	r1, r1, r2
   4bf20:	orrle	r1, r1, r0, lsr ip
   4bf24:	lslle	r0, r0, r2
   4bf28:	subs	r4, r4, r3
   4bf2c:	addge	r1, r1, r4, lsl #20
   4bf30:	orrge	r1, r1, r5
   4bf34:	popge	{r4, r5, pc}
   4bf38:	mvn	r4, r4
   4bf3c:	subs	r4, r4, #31
   4bf40:	bge	4bf7c <__assert_fail@plt+0x39500>
   4bf44:	adds	r4, r4, #12
   4bf48:	bgt	4bf64 <__assert_fail@plt+0x394e8>
   4bf4c:	add	r4, r4, #20
   4bf50:	rsb	r2, r4, #32
   4bf54:	lsr	r0, r0, r4
   4bf58:	orr	r0, r0, r1, lsl r2
   4bf5c:	orr	r1, r5, r1, lsr r4
   4bf60:	pop	{r4, r5, pc}
   4bf64:	rsb	r4, r4, #12
   4bf68:	rsb	r2, r4, #32
   4bf6c:	lsr	r0, r0, r2
   4bf70:	orr	r0, r0, r1, lsl r4
   4bf74:	mov	r1, r5
   4bf78:	pop	{r4, r5, pc}
   4bf7c:	lsr	r0, r1, r4
   4bf80:	mov	r1, r5
   4bf84:	pop	{r4, r5, pc}
   4bf88:	teq	r4, #0
   4bf8c:	eor	r3, r3, #1048576	; 0x100000
   4bf90:	eoreq	r1, r1, #1048576	; 0x100000
   4bf94:	addeq	r4, r4, #1
   4bf98:	subne	r5, r5, #1
   4bf9c:	b	4be28 <__assert_fail@plt+0x393ac>
   4bfa0:	mvns	ip, r4, asr #21
   4bfa4:	mvnsne	ip, r5, asr #21
   4bfa8:	beq	4c010 <__assert_fail@plt+0x39594>
   4bfac:	teq	r4, r5
   4bfb0:	teqeq	r0, r2
   4bfb4:	beq	4bfc8 <__assert_fail@plt+0x3954c>
   4bfb8:	orrs	ip, r4, r0
   4bfbc:	moveq	r1, r3
   4bfc0:	moveq	r0, r2
   4bfc4:	pop	{r4, r5, pc}
   4bfc8:	teq	r1, r3
   4bfcc:	movne	r1, #0
   4bfd0:	movne	r0, #0
   4bfd4:	popne	{r4, r5, pc}
   4bfd8:	lsrs	ip, r4, #21
   4bfdc:	bne	4bff0 <__assert_fail@plt+0x39574>
   4bfe0:	lsls	r0, r0, #1
   4bfe4:	adcs	r1, r1, r1
   4bfe8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   4bfec:	pop	{r4, r5, pc}
   4bff0:	adds	r4, r4, #4194304	; 0x400000
   4bff4:	addcc	r1, r1, #1048576	; 0x100000
   4bff8:	popcc	{r4, r5, pc}
   4bffc:	and	r5, r1, #-2147483648	; 0x80000000
   4c000:	orr	r1, r5, #2130706432	; 0x7f000000
   4c004:	orr	r1, r1, #15728640	; 0xf00000
   4c008:	mov	r0, #0
   4c00c:	pop	{r4, r5, pc}
   4c010:	mvns	ip, r4, asr #21
   4c014:	movne	r1, r3
   4c018:	movne	r0, r2
   4c01c:	mvnseq	ip, r5, asr #21
   4c020:	movne	r3, r1
   4c024:	movne	r2, r0
   4c028:	orrs	r4, r0, r1, lsl #12
   4c02c:	orrseq	r5, r2, r3, lsl #12
   4c030:	teqeq	r1, r3
   4c034:	orrne	r1, r1, #524288	; 0x80000
   4c038:	pop	{r4, r5, pc}
   4c03c:	teq	r0, #0
   4c040:	moveq	r1, #0
   4c044:	bxeq	lr
   4c048:	push	{r4, r5, lr}
   4c04c:	mov	r4, #1024	; 0x400
   4c050:	add	r4, r4, #50	; 0x32
   4c054:	mov	r5, #0
   4c058:	mov	r1, #0
   4c05c:	b	4bed8 <__assert_fail@plt+0x3945c>
   4c060:	teq	r0, #0
   4c064:	moveq	r1, #0
   4c068:	bxeq	lr
   4c06c:	push	{r4, r5, lr}
   4c070:	mov	r4, #1024	; 0x400
   4c074:	add	r4, r4, #50	; 0x32
   4c078:	ands	r5, r0, #-2147483648	; 0x80000000
   4c07c:	rsbmi	r0, r0, #0
   4c080:	mov	r1, #0
   4c084:	b	4bed8 <__assert_fail@plt+0x3945c>
   4c088:	lsls	r2, r0, #1
   4c08c:	asr	r1, r2, #3
   4c090:	rrx	r1, r1
   4c094:	lsl	r0, r2, #28
   4c098:	andsne	r3, r2, #-16777216	; 0xff000000
   4c09c:	teqne	r3, #-16777216	; 0xff000000
   4c0a0:	eorne	r1, r1, #939524096	; 0x38000000
   4c0a4:	bxne	lr
   4c0a8:	bics	r2, r2, #-16777216	; 0xff000000
   4c0ac:	bxeq	lr
   4c0b0:	teq	r3, #-16777216	; 0xff000000
   4c0b4:	orreq	r1, r1, #524288	; 0x80000
   4c0b8:	bxeq	lr
   4c0bc:	push	{r4, r5, lr}
   4c0c0:	mov	r4, #896	; 0x380
   4c0c4:	and	r5, r1, #-2147483648	; 0x80000000
   4c0c8:	bic	r1, r1, #-2147483648	; 0x80000000
   4c0cc:	b	4bed8 <__assert_fail@plt+0x3945c>
   4c0d0:	orrs	r2, r0, r1
   4c0d4:	bxeq	lr
   4c0d8:	push	{r4, r5, lr}
   4c0dc:	mov	r5, #0
   4c0e0:	b	4c100 <__assert_fail@plt+0x39684>
   4c0e4:	orrs	r2, r0, r1
   4c0e8:	bxeq	lr
   4c0ec:	push	{r4, r5, lr}
   4c0f0:	ands	r5, r1, #-2147483648	; 0x80000000
   4c0f4:	bpl	4c100 <__assert_fail@plt+0x39684>
   4c0f8:	rsbs	r0, r0, #0
   4c0fc:	rsc	r1, r1, #0
   4c100:	mov	r4, #1024	; 0x400
   4c104:	add	r4, r4, #50	; 0x32
   4c108:	lsrs	ip, r1, #22
   4c10c:	beq	4be7c <__assert_fail@plt+0x39400>
   4c110:	mov	r2, #3
   4c114:	lsrs	ip, ip, #3
   4c118:	addne	r2, r2, #3
   4c11c:	lsrs	ip, ip, #3
   4c120:	addne	r2, r2, #3
   4c124:	add	r2, r2, ip, lsr #3
   4c128:	rsb	r3, r2, #32
   4c12c:	lsl	ip, r0, r3
   4c130:	lsr	r0, r0, r2
   4c134:	orr	r0, r0, r1, lsl r3
   4c138:	lsr	r1, r1, r2
   4c13c:	add	r4, r4, r2
   4c140:	b	4be7c <__assert_fail@plt+0x39400>
   4c144:	cmp	r3, #0
   4c148:	cmpeq	r2, #0
   4c14c:	bne	4c170 <__assert_fail@plt+0x396f4>
   4c150:	cmp	r1, #0
   4c154:	movlt	r1, #-2147483648	; 0x80000000
   4c158:	movlt	r0, #0
   4c15c:	blt	4c16c <__assert_fail@plt+0x396f0>
   4c160:	cmpeq	r0, #0
   4c164:	mvnne	r1, #-2147483648	; 0x80000000
   4c168:	mvnne	r0, #0
   4c16c:	b	4c254 <__assert_fail@plt+0x397d8>
   4c170:	sub	sp, sp, #8
   4c174:	push	{sp, lr}
   4c178:	cmp	r1, #0
   4c17c:	blt	4c19c <__assert_fail@plt+0x39720>
   4c180:	cmp	r3, #0
   4c184:	blt	4c1d0 <__assert_fail@plt+0x39754>
   4c188:	bl	4c2a8 <__assert_fail@plt+0x3982c>
   4c18c:	ldr	lr, [sp, #4]
   4c190:	add	sp, sp, #8
   4c194:	pop	{r2, r3}
   4c198:	bx	lr
   4c19c:	rsbs	r0, r0, #0
   4c1a0:	sbc	r1, r1, r1, lsl #1
   4c1a4:	cmp	r3, #0
   4c1a8:	blt	4c1f4 <__assert_fail@plt+0x39778>
   4c1ac:	bl	4c2a8 <__assert_fail@plt+0x3982c>
   4c1b0:	ldr	lr, [sp, #4]
   4c1b4:	add	sp, sp, #8
   4c1b8:	pop	{r2, r3}
   4c1bc:	rsbs	r0, r0, #0
   4c1c0:	sbc	r1, r1, r1, lsl #1
   4c1c4:	rsbs	r2, r2, #0
   4c1c8:	sbc	r3, r3, r3, lsl #1
   4c1cc:	bx	lr
   4c1d0:	rsbs	r2, r2, #0
   4c1d4:	sbc	r3, r3, r3, lsl #1
   4c1d8:	bl	4c2a8 <__assert_fail@plt+0x3982c>
   4c1dc:	ldr	lr, [sp, #4]
   4c1e0:	add	sp, sp, #8
   4c1e4:	pop	{r2, r3}
   4c1e8:	rsbs	r0, r0, #0
   4c1ec:	sbc	r1, r1, r1, lsl #1
   4c1f0:	bx	lr
   4c1f4:	rsbs	r2, r2, #0
   4c1f8:	sbc	r3, r3, r3, lsl #1
   4c1fc:	bl	4c2a8 <__assert_fail@plt+0x3982c>
   4c200:	ldr	lr, [sp, #4]
   4c204:	add	sp, sp, #8
   4c208:	pop	{r2, r3}
   4c20c:	rsbs	r2, r2, #0
   4c210:	sbc	r3, r3, r3, lsl #1
   4c214:	bx	lr
   4c218:	cmp	r3, #0
   4c21c:	cmpeq	r2, #0
   4c220:	bne	4c238 <__assert_fail@plt+0x397bc>
   4c224:	cmp	r1, #0
   4c228:	cmpeq	r0, #0
   4c22c:	mvnne	r1, #0
   4c230:	mvnne	r0, #0
   4c234:	b	4c254 <__assert_fail@plt+0x397d8>
   4c238:	sub	sp, sp, #8
   4c23c:	push	{sp, lr}
   4c240:	bl	4c2a8 <__assert_fail@plt+0x3982c>
   4c244:	ldr	lr, [sp, #4]
   4c248:	add	sp, sp, #8
   4c24c:	pop	{r2, r3}
   4c250:	bx	lr
   4c254:	push	{r1, lr}
   4c258:	mov	r0, #8
   4c25c:	bl	12380 <raise@plt>
   4c260:	pop	{r1, pc}
   4c264:	andeq	r0, r0, r0
   4c268:	vmov	d6, r0, r1
   4c26c:	vldr	d7, [pc, #36]	; 4c298 <__assert_fail@plt+0x3981c>
   4c270:	vldr	d5, [pc, #40]	; 4c2a0 <__assert_fail@plt+0x39824>
   4c274:	vmul.f64	d7, d6, d7
   4c278:	vcvt.u32.f64	s14, d7
   4c27c:	vcvt.f64.u32	d4, s14
   4c280:	vmov	r1, s14
   4c284:	vmls.f64	d6, d4, d5
   4c288:	vcvt.u32.f64	s15, d6
   4c28c:	vmov	r0, s15
   4c290:	bx	lr
   4c294:	nop			; (mov r0, r0)
   4c298:	andeq	r0, r0, r0
   4c29c:	ldclcc	0, cr0, [r0]
   4c2a0:	andeq	r0, r0, r0
   4c2a4:	mvnsmi	r0, r0
   4c2a8:	cmp	r1, r3
   4c2ac:	cmpeq	r0, r2
   4c2b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c2b4:	mov	r4, r0
   4c2b8:	movcc	r0, #0
   4c2bc:	mov	r5, r1
   4c2c0:	ldr	lr, [sp, #36]	; 0x24
   4c2c4:	movcc	r1, r0
   4c2c8:	bcc	4c3c4 <__assert_fail@plt+0x39948>
   4c2cc:	cmp	r3, #0
   4c2d0:	clzeq	ip, r2
   4c2d4:	clzne	ip, r3
   4c2d8:	addeq	ip, ip, #32
   4c2dc:	cmp	r5, #0
   4c2e0:	clzeq	r1, r4
   4c2e4:	addeq	r1, r1, #32
   4c2e8:	clzne	r1, r5
   4c2ec:	sub	ip, ip, r1
   4c2f0:	sub	sl, ip, #32
   4c2f4:	lsl	r9, r3, ip
   4c2f8:	rsb	fp, ip, #32
   4c2fc:	orr	r9, r9, r2, lsl sl
   4c300:	orr	r9, r9, r2, lsr fp
   4c304:	lsl	r8, r2, ip
   4c308:	cmp	r5, r9
   4c30c:	cmpeq	r4, r8
   4c310:	movcc	r0, #0
   4c314:	movcc	r1, r0
   4c318:	bcc	4c334 <__assert_fail@plt+0x398b8>
   4c31c:	mov	r0, #1
   4c320:	subs	r4, r4, r8
   4c324:	lsl	r1, r0, sl
   4c328:	orr	r1, r1, r0, lsr fp
   4c32c:	lsl	r0, r0, ip
   4c330:	sbc	r5, r5, r9
   4c334:	cmp	ip, #0
   4c338:	beq	4c3c4 <__assert_fail@plt+0x39948>
   4c33c:	lsr	r6, r8, #1
   4c340:	orr	r6, r6, r9, lsl #31
   4c344:	lsr	r7, r9, #1
   4c348:	mov	r2, ip
   4c34c:	b	4c370 <__assert_fail@plt+0x398f4>
   4c350:	subs	r3, r4, r6
   4c354:	sbc	r8, r5, r7
   4c358:	adds	r3, r3, r3
   4c35c:	adc	r8, r8, r8
   4c360:	adds	r4, r3, #1
   4c364:	adc	r5, r8, #0
   4c368:	subs	r2, r2, #1
   4c36c:	beq	4c38c <__assert_fail@plt+0x39910>
   4c370:	cmp	r5, r7
   4c374:	cmpeq	r4, r6
   4c378:	bcs	4c350 <__assert_fail@plt+0x398d4>
   4c37c:	adds	r4, r4, r4
   4c380:	adc	r5, r5, r5
   4c384:	subs	r2, r2, #1
   4c388:	bne	4c370 <__assert_fail@plt+0x398f4>
   4c38c:	lsr	r3, r4, ip
   4c390:	orr	r3, r3, r5, lsl fp
   4c394:	lsr	r2, r5, ip
   4c398:	orr	r3, r3, r5, lsr sl
   4c39c:	adds	r0, r0, r4
   4c3a0:	mov	r4, r3
   4c3a4:	lsl	r3, r2, ip
   4c3a8:	orr	r3, r3, r4, lsl sl
   4c3ac:	lsl	ip, r4, ip
   4c3b0:	orr	r3, r3, r4, lsr fp
   4c3b4:	adc	r1, r1, r5
   4c3b8:	subs	r0, r0, ip
   4c3bc:	mov	r5, r2
   4c3c0:	sbc	r1, r1, r3
   4c3c4:	cmp	lr, #0
   4c3c8:	strdne	r4, [lr]
   4c3cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4c3d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4c3d4:	mov	r7, r0
   4c3d8:	ldr	r6, [pc, #72]	; 4c428 <__assert_fail@plt+0x399ac>
   4c3dc:	ldr	r5, [pc, #72]	; 4c42c <__assert_fail@plt+0x399b0>
   4c3e0:	add	r6, pc, r6
   4c3e4:	add	r5, pc, r5
   4c3e8:	sub	r6, r6, r5
   4c3ec:	mov	r8, r1
   4c3f0:	mov	r9, r2
   4c3f4:	bl	12318 <pthread_mutex_unlock@plt-0x20>
   4c3f8:	asrs	r6, r6, #2
   4c3fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   4c400:	mov	r4, #0
   4c404:	add	r4, r4, #1
   4c408:	ldr	r3, [r5], #4
   4c40c:	mov	r2, r9
   4c410:	mov	r1, r8
   4c414:	mov	r0, r7
   4c418:	blx	r3
   4c41c:	cmp	r6, r4
   4c420:	bne	4c404 <__assert_fail@plt+0x39988>
   4c424:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4c428:	andeq	r6, r1, r4, lsl fp
   4c42c:	andeq	r6, r1, ip, lsl #22
   4c430:	bx	lr
   4c434:	ldr	r3, [pc, #12]	; 4c448 <__assert_fail@plt+0x399cc>
   4c438:	mov	r1, #0
   4c43c:	add	r3, pc, r3
   4c440:	ldr	r2, [r3]
   4c444:	b	127f4 <__cxa_atexit@plt>
   4c448:	andeq	r6, r1, r0, asr #28

Disassembly of section .fini:

0004c44c <.fini>:
   4c44c:	push	{r3, lr}
   4c450:	pop	{r3, pc}
