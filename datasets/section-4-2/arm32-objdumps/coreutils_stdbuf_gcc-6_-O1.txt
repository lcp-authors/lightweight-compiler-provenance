
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010d00 <.init>:
   10d00:	push	{r3, lr}
   10d04:	bl	10ffc <__assert_fail@plt+0x48>
   10d08:	pop	{r3, pc}

Disassembly of section .plt:

00010d0c <calloc@plt-0x14>:
   10d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d10:	ldr	lr, [pc, #4]	; 10d1c <calloc@plt-0x4>
   10d14:	add	lr, pc, lr
   10d18:	ldr	pc, [lr, #8]!
   10d1c:	andeq	r6, r1, r4, ror #5

00010d20 <calloc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #740]!	; 0x2e4

00010d2c <fputs_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #732]!	; 0x2dc

00010d38 <raise@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #724]!	; 0x2d4

00010d44 <strcmp@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d50 <fflush@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #708]!	; 0x2c4

00010d5c <free@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #700]!	; 0x2bc

00010d68 <_exit@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #692]!	; 0x2b4

00010d74 <memcpy@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #684]!	; 0x2ac

00010d80 <execvp@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #676]!	; 0x2a4

00010d8c <__strtoull_internal@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #668]!	; 0x29c

00010d98 <mbsinit@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #660]!	; 0x294

00010da4 <memcmp@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #652]!	; 0x28c

00010db0 <fputc_unlocked@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #644]!	; 0x284

00010dbc <dcgettext@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #636]!	; 0x27c

00010dc8 <realloc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #628]!	; 0x274

00010dd4 <textdomain@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #620]!	; 0x26c

00010de0 <iswprint@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #612]!	; 0x264

00010dec <readlink@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #604]!	; 0x25c

00010df8 <fwrite@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #596]!	; 0x254

00010e04 <lseek64@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #588]!	; 0x24c

00010e10 <__ctype_get_mb_cur_max@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #580]!	; 0x244

00010e1c <__fpending@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #572]!	; 0x23c

00010e28 <mbrtowc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #564]!	; 0x234

00010e34 <error@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #556]!	; 0x22c

00010e40 <__asprintf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #548]!	; 0x224

00010e4c <getenv@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #540]!	; 0x21c

00010e58 <malloc@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #532]!	; 0x214

00010e64 <__libc_start_main@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #524]!	; 0x20c

00010e70 <__freading@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #516]!	; 0x204

00010e7c <__ctype_toupper_loc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #508]!	; 0x1fc

00010e88 <__gmon_start__@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #500]!	; 0x1f4

00010e94 <mempcpy@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #492]!	; 0x1ec

00010ea0 <getopt_long@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #484]!	; 0x1e4

00010eac <__ctype_b_loc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #476]!	; 0x1dc

00010eb8 <exit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ec4 <strlen@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #460]!	; 0x1cc

00010ed0 <strchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #452]!	; 0x1c4

00010edc <__errno_location@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #444]!	; 0x1bc

00010ee8 <__cxa_atexit@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #436]!	; 0x1b4

00010ef4 <memset@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #428]!	; 0x1ac

00010f00 <__printf_chk@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #420]!	; 0x1a4

00010f0c <fileno@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #412]!	; 0x19c

00010f18 <__fprintf_chk@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #404]!	; 0x194

00010f24 <access@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #396]!	; 0x18c

00010f30 <fclose@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #388]!	; 0x184

00010f3c <fseeko64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #380]!	; 0x17c

00010f48 <strtok@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #372]!	; 0x174

00010f54 <setlocale@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #364]!	; 0x16c

00010f60 <putenv@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #356]!	; 0x164

00010f6c <strrchr@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #348]!	; 0x15c

00010f78 <nl_langinfo@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #340]!	; 0x154

00010f84 <bindtextdomain@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #332]!	; 0x14c

00010f90 <__xstat64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #324]!	; 0x144

00010f9c <strncmp@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #316]!	; 0x13c

00010fa8 <abort@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #308]!	; 0x134

00010fb4 <__assert_fail@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #300]!	; 0x12c

Disassembly of section .text:

00010fc0 <.text>:
   10fc0:	mov	fp, #0
   10fc4:	mov	lr, #0
   10fc8:	pop	{r1}		; (ldr r1, [sp], #4)
   10fcc:	mov	r2, sp
   10fd0:	push	{r2}		; (str r2, [sp, #-4]!)
   10fd4:	push	{r0}		; (str r0, [sp, #-4]!)
   10fd8:	ldr	ip, [pc, #16]	; 10ff0 <__assert_fail@plt+0x3c>
   10fdc:	push	{ip}		; (str ip, [sp, #-4]!)
   10fe0:	ldr	r0, [pc, #12]	; 10ff4 <__assert_fail@plt+0x40>
   10fe4:	ldr	r3, [pc, #12]	; 10ff8 <__assert_fail@plt+0x44>
   10fe8:	bl	10e64 <__libc_start_main@plt>
   10fec:	bl	10fa8 <abort@plt>
   10ff0:	andeq	r5, r1, r8, ror r9
   10ff4:	muleq	r1, ip, r4
   10ff8:	andeq	r5, r1, r8, lsl r9
   10ffc:	ldr	r3, [pc, #20]	; 11018 <__assert_fail@plt+0x64>
   11000:	ldr	r2, [pc, #20]	; 1101c <__assert_fail@plt+0x68>
   11004:	add	r3, pc, r3
   11008:	ldr	r2, [r3, r2]
   1100c:	cmp	r2, #0
   11010:	bxeq	lr
   11014:	b	10e88 <__gmon_start__@plt>
   11018:	strdeq	r5, [r1], -r4
   1101c:	andeq	r0, r0, ip, ror #1
   11020:	ldr	r3, [pc, #28]	; 11044 <__assert_fail@plt+0x90>
   11024:	ldr	r0, [pc, #28]	; 11048 <__assert_fail@plt+0x94>
   11028:	sub	r3, r3, r0
   1102c:	cmp	r3, #6
   11030:	bxls	lr
   11034:	ldr	r3, [pc, #16]	; 1104c <__assert_fail@plt+0x98>
   11038:	cmp	r3, #0
   1103c:	bxeq	lr
   11040:	bx	r3
   11044:	andeq	r7, r2, r3, asr #2
   11048:	andeq	r7, r2, r0, asr #2
   1104c:	andeq	r0, r0, r0
   11050:	ldr	r1, [pc, #36]	; 1107c <__assert_fail@plt+0xc8>
   11054:	ldr	r0, [pc, #36]	; 11080 <__assert_fail@plt+0xcc>
   11058:	sub	r1, r1, r0
   1105c:	asr	r1, r1, #2
   11060:	add	r1, r1, r1, lsr #31
   11064:	asrs	r1, r1, #1
   11068:	bxeq	lr
   1106c:	ldr	r3, [pc, #16]	; 11084 <__assert_fail@plt+0xd0>
   11070:	cmp	r3, #0
   11074:	bxeq	lr
   11078:	bx	r3
   1107c:	andeq	r7, r2, r0, asr #2
   11080:	andeq	r7, r2, r0, asr #2
   11084:	andeq	r0, r0, r0
   11088:	push	{r4, lr}
   1108c:	ldr	r4, [pc, #24]	; 110ac <__assert_fail@plt+0xf8>
   11090:	ldrb	r3, [r4]
   11094:	cmp	r3, #0
   11098:	popne	{r4, pc}
   1109c:	bl	11020 <__assert_fail@plt+0x6c>
   110a0:	mov	r3, #1
   110a4:	strb	r3, [r4]
   110a8:	pop	{r4, pc}
   110ac:	andeq	r7, r2, ip, asr r1
   110b0:	ldr	r0, [pc, #40]	; 110e0 <__assert_fail@plt+0x12c>
   110b4:	ldr	r3, [r0]
   110b8:	cmp	r3, #0
   110bc:	bne	110c4 <__assert_fail@plt+0x110>
   110c0:	b	11050 <__assert_fail@plt+0x9c>
   110c4:	ldr	r3, [pc, #24]	; 110e4 <__assert_fail@plt+0x130>
   110c8:	cmp	r3, #0
   110cc:	beq	110c0 <__assert_fail@plt+0x10c>
   110d0:	push	{r4, lr}
   110d4:	blx	r3
   110d8:	pop	{r4, lr}
   110dc:	b	11050 <__assert_fail@plt+0x9c>
   110e0:	andeq	r6, r2, r4, lsl pc
   110e4:	andeq	r0, r0, r0
   110e8:	push	{lr}		; (str lr, [sp, #-4]!)
   110ec:	sub	sp, sp, #60	; 0x3c
   110f0:	subs	r6, r0, #0
   110f4:	beq	11130 <__assert_fail@plt+0x17c>
   110f8:	ldr	r3, [pc, #824]	; 11438 <__assert_fail@plt+0x484>
   110fc:	ldr	r4, [r3]
   11100:	mov	r2, #5
   11104:	ldr	r1, [pc, #816]	; 1143c <__assert_fail@plt+0x488>
   11108:	mov	r0, #0
   1110c:	bl	10dbc <dcgettext@plt>
   11110:	ldr	r3, [pc, #808]	; 11440 <__assert_fail@plt+0x48c>
   11114:	ldr	r3, [r3]
   11118:	mov	r2, r0
   1111c:	mov	r1, #1
   11120:	mov	r0, r4
   11124:	bl	10f18 <__fprintf_chk@plt>
   11128:	mov	r0, r6
   1112c:	bl	10eb8 <exit@plt>
   11130:	mov	r2, #5
   11134:	ldr	r1, [pc, #776]	; 11444 <__assert_fail@plt+0x490>
   11138:	mov	r0, #0
   1113c:	bl	10dbc <dcgettext@plt>
   11140:	ldr	r3, [pc, #760]	; 11440 <__assert_fail@plt+0x48c>
   11144:	ldr	r2, [r3]
   11148:	mov	r1, r0
   1114c:	mov	r0, #1
   11150:	bl	10f00 <__printf_chk@plt>
   11154:	mov	r2, #5
   11158:	ldr	r1, [pc, #744]	; 11448 <__assert_fail@plt+0x494>
   1115c:	mov	r0, #0
   11160:	bl	10dbc <dcgettext@plt>
   11164:	ldr	r4, [pc, #736]	; 1144c <__assert_fail@plt+0x498>
   11168:	ldr	r1, [r4]
   1116c:	bl	10d2c <fputs_unlocked@plt>
   11170:	mov	r2, #5
   11174:	ldr	r1, [pc, #724]	; 11450 <__assert_fail@plt+0x49c>
   11178:	mov	r0, #0
   1117c:	bl	10dbc <dcgettext@plt>
   11180:	ldr	r1, [r4]
   11184:	bl	10d2c <fputs_unlocked@plt>
   11188:	mov	r2, #5
   1118c:	ldr	r1, [pc, #704]	; 11454 <__assert_fail@plt+0x4a0>
   11190:	mov	r0, #0
   11194:	bl	10dbc <dcgettext@plt>
   11198:	ldr	r1, [r4]
   1119c:	bl	10d2c <fputs_unlocked@plt>
   111a0:	mov	r2, #5
   111a4:	ldr	r1, [pc, #684]	; 11458 <__assert_fail@plt+0x4a4>
   111a8:	mov	r0, #0
   111ac:	bl	10dbc <dcgettext@plt>
   111b0:	ldr	r1, [r4]
   111b4:	bl	10d2c <fputs_unlocked@plt>
   111b8:	mov	r2, #5
   111bc:	ldr	r1, [pc, #664]	; 1145c <__assert_fail@plt+0x4a8>
   111c0:	mov	r0, #0
   111c4:	bl	10dbc <dcgettext@plt>
   111c8:	ldr	r1, [r4]
   111cc:	bl	10d2c <fputs_unlocked@plt>
   111d0:	mov	r2, #5
   111d4:	ldr	r1, [pc, #644]	; 11460 <__assert_fail@plt+0x4ac>
   111d8:	mov	r0, #0
   111dc:	bl	10dbc <dcgettext@plt>
   111e0:	ldr	r1, [r4]
   111e4:	bl	10d2c <fputs_unlocked@plt>
   111e8:	mov	r2, #5
   111ec:	ldr	r1, [pc, #624]	; 11464 <__assert_fail@plt+0x4b0>
   111f0:	mov	r0, #0
   111f4:	bl	10dbc <dcgettext@plt>
   111f8:	ldr	r1, [r4]
   111fc:	bl	10d2c <fputs_unlocked@plt>
   11200:	mov	r2, #5
   11204:	ldr	r1, [pc, #604]	; 11468 <__assert_fail@plt+0x4b4>
   11208:	mov	r0, #0
   1120c:	bl	10dbc <dcgettext@plt>
   11210:	ldr	r1, [r4]
   11214:	bl	10d2c <fputs_unlocked@plt>
   11218:	mov	r2, #5
   1121c:	ldr	r1, [pc, #584]	; 1146c <__assert_fail@plt+0x4b8>
   11220:	mov	r0, #0
   11224:	bl	10dbc <dcgettext@plt>
   11228:	ldr	r1, [r4]
   1122c:	bl	10d2c <fputs_unlocked@plt>
   11230:	mov	ip, sp
   11234:	ldr	lr, [pc, #564]	; 11470 <__assert_fail@plt+0x4bc>
   11238:	ldm	lr!, {r0, r1, r2, r3}
   1123c:	stmia	ip!, {r0, r1, r2, r3}
   11240:	ldm	lr!, {r0, r1, r2, r3}
   11244:	stmia	ip!, {r0, r1, r2, r3}
   11248:	ldm	lr!, {r0, r1, r2, r3}
   1124c:	stmia	ip!, {r0, r1, r2, r3}
   11250:	ldm	lr, {r0, r1}
   11254:	stm	ip, {r0, r1}
   11258:	ldr	r1, [sp]
   1125c:	cmp	r1, #0
   11260:	moveq	r4, sp
   11264:	beq	1128c <__assert_fail@plt+0x2d8>
   11268:	mov	r4, sp
   1126c:	ldr	r5, [pc, #512]	; 11474 <__assert_fail@plt+0x4c0>
   11270:	mov	r0, r5
   11274:	bl	10d44 <strcmp@plt>
   11278:	cmp	r0, #0
   1127c:	beq	1128c <__assert_fail@plt+0x2d8>
   11280:	ldr	r1, [r4, #8]!
   11284:	cmp	r1, #0
   11288:	bne	11270 <__assert_fail@plt+0x2bc>
   1128c:	ldr	r4, [r4, #4]
   11290:	cmp	r4, #0
   11294:	beq	113a8 <__assert_fail@plt+0x3f4>
   11298:	mov	r2, #5
   1129c:	ldr	r1, [pc, #468]	; 11478 <__assert_fail@plt+0x4c4>
   112a0:	mov	r0, #0
   112a4:	bl	10dbc <dcgettext@plt>
   112a8:	ldr	r3, [pc, #460]	; 1147c <__assert_fail@plt+0x4c8>
   112ac:	ldr	r2, [pc, #460]	; 11480 <__assert_fail@plt+0x4cc>
   112b0:	mov	r1, r0
   112b4:	mov	r0, #1
   112b8:	bl	10f00 <__printf_chk@plt>
   112bc:	mov	r1, #0
   112c0:	mov	r0, #5
   112c4:	bl	10f54 <setlocale@plt>
   112c8:	cmp	r0, #0
   112cc:	beq	112e4 <__assert_fail@plt+0x330>
   112d0:	mov	r2, #3
   112d4:	ldr	r1, [pc, #424]	; 11484 <__assert_fail@plt+0x4d0>
   112d8:	bl	10f9c <strncmp@plt>
   112dc:	cmp	r0, #0
   112e0:	bne	11344 <__assert_fail@plt+0x390>
   112e4:	mov	r2, #5
   112e8:	ldr	r1, [pc, #408]	; 11488 <__assert_fail@plt+0x4d4>
   112ec:	mov	r0, #0
   112f0:	bl	10dbc <dcgettext@plt>
   112f4:	ldr	r5, [pc, #376]	; 11474 <__assert_fail@plt+0x4c0>
   112f8:	mov	r3, r5
   112fc:	ldr	r2, [pc, #376]	; 1147c <__assert_fail@plt+0x4c8>
   11300:	mov	r1, r0
   11304:	mov	r0, #1
   11308:	bl	10f00 <__printf_chk@plt>
   1130c:	mov	r2, #5
   11310:	ldr	r1, [pc, #372]	; 1148c <__assert_fail@plt+0x4d8>
   11314:	mov	r0, #0
   11318:	bl	10dbc <dcgettext@plt>
   1131c:	mov	r1, r0
   11320:	ldr	r2, [pc, #360]	; 11490 <__assert_fail@plt+0x4dc>
   11324:	ldr	r3, [pc, #360]	; 11494 <__assert_fail@plt+0x4e0>
   11328:	cmp	r4, r5
   1132c:	movne	r3, r2
   11330:	mov	r2, r4
   11334:	mov	r0, #1
   11338:	bl	10f00 <__printf_chk@plt>
   1133c:	b	11128 <__assert_fail@plt+0x174>
   11340:	ldr	r4, [pc, #300]	; 11474 <__assert_fail@plt+0x4c0>
   11344:	mov	r2, #5
   11348:	ldr	r1, [pc, #328]	; 11498 <__assert_fail@plt+0x4e4>
   1134c:	mov	r0, #0
   11350:	bl	10dbc <dcgettext@plt>
   11354:	ldr	r3, [pc, #240]	; 1144c <__assert_fail@plt+0x498>
   11358:	ldr	r1, [r3]
   1135c:	bl	10d2c <fputs_unlocked@plt>
   11360:	b	112e4 <__assert_fail@plt+0x330>
   11364:	mov	r2, #5
   11368:	ldr	r1, [pc, #280]	; 11488 <__assert_fail@plt+0x4d4>
   1136c:	mov	r0, #0
   11370:	bl	10dbc <dcgettext@plt>
   11374:	ldr	r4, [pc, #248]	; 11474 <__assert_fail@plt+0x4c0>
   11378:	mov	r3, r4
   1137c:	ldr	r2, [pc, #248]	; 1147c <__assert_fail@plt+0x4c8>
   11380:	mov	r1, r0
   11384:	mov	r0, #1
   11388:	bl	10f00 <__printf_chk@plt>
   1138c:	mov	r2, #5
   11390:	ldr	r1, [pc, #244]	; 1148c <__assert_fail@plt+0x4d8>
   11394:	mov	r0, #0
   11398:	bl	10dbc <dcgettext@plt>
   1139c:	mov	r1, r0
   113a0:	ldr	r3, [pc, #236]	; 11494 <__assert_fail@plt+0x4e0>
   113a4:	b	11330 <__assert_fail@plt+0x37c>
   113a8:	mov	r2, #5
   113ac:	ldr	r1, [pc, #196]	; 11478 <__assert_fail@plt+0x4c4>
   113b0:	mov	r0, #0
   113b4:	bl	10dbc <dcgettext@plt>
   113b8:	ldr	r3, [pc, #188]	; 1147c <__assert_fail@plt+0x4c8>
   113bc:	ldr	r2, [pc, #188]	; 11480 <__assert_fail@plt+0x4cc>
   113c0:	mov	r1, r0
   113c4:	mov	r0, #1
   113c8:	bl	10f00 <__printf_chk@plt>
   113cc:	mov	r1, #0
   113d0:	mov	r0, #5
   113d4:	bl	10f54 <setlocale@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	11364 <__assert_fail@plt+0x3b0>
   113e0:	mov	r2, #3
   113e4:	ldr	r1, [pc, #152]	; 11484 <__assert_fail@plt+0x4d0>
   113e8:	bl	10f9c <strncmp@plt>
   113ec:	cmp	r0, #0
   113f0:	bne	11340 <__assert_fail@plt+0x38c>
   113f4:	mov	r2, #5
   113f8:	ldr	r1, [pc, #136]	; 11488 <__assert_fail@plt+0x4d4>
   113fc:	mov	r0, #0
   11400:	bl	10dbc <dcgettext@plt>
   11404:	ldr	r4, [pc, #104]	; 11474 <__assert_fail@plt+0x4c0>
   11408:	mov	r3, r4
   1140c:	ldr	r2, [pc, #104]	; 1147c <__assert_fail@plt+0x4c8>
   11410:	mov	r1, r0
   11414:	mov	r0, #1
   11418:	bl	10f00 <__printf_chk@plt>
   1141c:	mov	r2, #5
   11420:	ldr	r1, [pc, #100]	; 1148c <__assert_fail@plt+0x4d8>
   11424:	mov	r0, #0
   11428:	bl	10dbc <dcgettext@plt>
   1142c:	mov	r1, r0
   11430:	ldr	r3, [pc, #92]	; 11494 <__assert_fail@plt+0x4e0>
   11434:	b	11330 <__assert_fail@plt+0x37c>
   11438:	andeq	r7, r2, r0, asr r1
   1143c:	andeq	r5, r1, r8, asr #20
   11440:	muleq	r2, r0, r1
   11444:	andeq	r5, r1, r0, ror sl
   11448:	muleq	r1, r0, sl
   1144c:	andeq	r7, r2, r4, asr r1
   11450:	ldrdeq	r5, [r1], -ip
   11454:	andeq	r5, r1, r8, lsr #22
   11458:	andeq	r5, r1, r0, ror #23
   1145c:	andeq	r5, r1, r0, lsl ip
   11460:	andeq	r5, r1, r8, asr #24
   11464:			; <UNDEFINED> instruction: 0x00015cb8
   11468:	strdeq	r5, [r1], -r8
   1146c:	andeq	r5, r1, r0, lsr lr
   11470:	andeq	r5, r1, r0, lsr #19
   11474:	andeq	r5, r1, r0, asr #20
   11478:	andeq	r5, r1, ip, lsr pc
   1147c:	andeq	r5, r1, r4, asr pc
   11480:	andeq	r5, r1, ip, ror pc
   11484:	andeq	r5, r1, ip, lsl #31
   11488:	ldrdeq	r5, [r1], -r8
   1148c:	strdeq	r5, [r1], -r4
   11490:			; <UNDEFINED> instruction: 0x00015cb4
   11494:	andeq	r6, r1, r8, lsr r2
   11498:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1149c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a0:	sub	sp, sp, #148	; 0x94
   114a4:	str	r0, [sp, #16]
   114a8:	mov	sl, r1
   114ac:	ldr	r0, [r1]
   114b0:	bl	11f70 <__assert_fail@plt+0xfbc>
   114b4:	ldr	r1, [pc, #1752]	; 11b94 <__assert_fail@plt+0xbe0>
   114b8:	mov	r0, #6
   114bc:	bl	10f54 <setlocale@plt>
   114c0:	ldr	r4, [pc, #1744]	; 11b98 <__assert_fail@plt+0xbe4>
   114c4:	ldr	r1, [pc, #1744]	; 11b9c <__assert_fail@plt+0xbe8>
   114c8:	mov	r0, r4
   114cc:	bl	10f84 <bindtextdomain@plt>
   114d0:	mov	r0, r4
   114d4:	bl	10dd4 <textdomain@plt>
   114d8:	mov	r2, #125	; 0x7d
   114dc:	ldr	r3, [pc, #1724]	; 11ba0 <__assert_fail@plt+0xbec>
   114e0:	str	r2, [r3]
   114e4:	ldr	r0, [pc, #1720]	; 11ba4 <__assert_fail@plt+0xbf0>
   114e8:	bl	1597c <__assert_fail@plt+0x49c8>
   114ec:	ldr	r7, [pc, #1716]	; 11ba8 <__assert_fail@plt+0xbf4>
   114f0:	ldr	r6, [pc, #1716]	; 11bac <__assert_fail@plt+0xbf8>
   114f4:	ldr	r9, [pc, #1716]	; 11bb0 <__assert_fail@plt+0xbfc>
   114f8:	ldr	r8, [pc, #1716]	; 11bb4 <__assert_fail@plt+0xc00>
   114fc:	ldr	r5, [pc, #1716]	; 11bb8 <__assert_fail@plt+0xc04>
   11500:	mov	r3, #0
   11504:	str	r3, [sp]
   11508:	mov	r3, r7
   1150c:	mov	r2, r6
   11510:	mov	r1, sl
   11514:	ldr	r0, [sp, #16]
   11518:	bl	10ea0 <getopt_long@plt>
   1151c:	cmn	r0, #1
   11520:	beq	116b0 <__assert_fail@plt+0x6fc>
   11524:	cmp	r0, #101	; 0x65
   11528:	beq	11560 <__assert_fail@plt+0x5ac>
   1152c:	bgt	11548 <__assert_fail@plt+0x594>
   11530:	cmn	r0, #3
   11534:	beq	1167c <__assert_fail@plt+0x6c8>
   11538:	cmn	r0, #2
   1153c:	bne	11558 <__assert_fail@plt+0x5a4>
   11540:	mov	r0, #0
   11544:	bl	110e8 <__assert_fail@plt+0x134>
   11548:	cmp	r0, #105	; 0x69
   1154c:	beq	11560 <__assert_fail@plt+0x5ac>
   11550:	cmp	r0, #111	; 0x6f
   11554:	beq	11560 <__assert_fail@plt+0x5ac>
   11558:	mov	r0, #125	; 0x7d
   1155c:	bl	110e8 <__assert_fail@plt+0x134>
   11560:	cmp	r0, #105	; 0x69
   11564:	beq	1158c <__assert_fail@plt+0x5d8>
   11568:	cmp	r0, #111	; 0x6f
   1156c:	beq	11b34 <__assert_fail@plt+0xb80>
   11570:	cmp	r0, #101	; 0x65
   11574:	beq	11b2c <__assert_fail@plt+0xb78>
   11578:	ldr	r3, [pc, #1596]	; 11bbc <__assert_fail@plt+0xc08>
   1157c:	mov	r2, #336	; 0x150
   11580:	ldr	r1, [pc, #1592]	; 11bc0 <__assert_fail@plt+0xc0c>
   11584:	ldr	r0, [pc, #1592]	; 11bc4 <__assert_fail@plt+0xc10>
   11588:	bl	10fb4 <__assert_fail@plt>
   1158c:	mov	fp, #0
   11590:	mov	r3, #12
   11594:	mla	r3, r3, fp, r9
   11598:	str	r0, [r3, #4]
   1159c:	b	115a8 <__assert_fail@plt+0x5f4>
   115a0:	add	r4, r4, #1
   115a4:	str	r4, [r8]
   115a8:	ldr	r4, [r8]
   115ac:	ldrb	r3, [r4]
   115b0:	cmp	r3, #9
   115b4:	bcc	115c8 <__assert_fail@plt+0x614>
   115b8:	cmp	r3, #13
   115bc:	bls	115a0 <__assert_fail@plt+0x5ec>
   115c0:	cmp	r3, #32
   115c4:	beq	115a0 <__assert_fail@plt+0x5ec>
   115c8:	mov	r3, #12
   115cc:	mla	r3, r3, fp, r9
   115d0:	str	r4, [r3, #8]
   115d4:	cmp	r0, #105	; 0x69
   115d8:	beq	11648 <__assert_fail@plt+0x694>
   115dc:	mov	r1, r5
   115e0:	mov	r0, r4
   115e4:	bl	10d44 <strcmp@plt>
   115e8:	cmp	r0, #0
   115ec:	beq	11500 <__assert_fail@plt+0x54c>
   115f0:	ldr	r3, [pc, #1488]	; 11bc8 <__assert_fail@plt+0xc14>
   115f4:	str	r3, [sp]
   115f8:	add	r3, sp, #40	; 0x28
   115fc:	mov	r2, #10
   11600:	mov	r1, #0
   11604:	mov	r0, r4
   11608:	bl	14750 <__assert_fail@plt+0x379c>
   1160c:	cmp	r0, #0
   11610:	bne	11b3c <__assert_fail@plt+0xb88>
   11614:	ldrd	r4, [sp, #40]	; 0x28
   11618:	mvn	r2, #0
   1161c:	mov	r3, #0
   11620:	cmp	r5, r3
   11624:	cmpeq	r4, r2
   11628:	bhi	11b54 <__assert_fail@plt+0xba0>
   1162c:	bl	10edc <__errno_location@plt>
   11630:	mov	r3, #0
   11634:	str	r3, [r0]
   11638:	mov	r3, #12
   1163c:	mul	fp, r3, fp
   11640:	str	r4, [r9, fp]
   11644:	b	114fc <__assert_fail@plt+0x548>
   11648:	ldrb	r3, [r4]
   1164c:	cmp	r3, #76	; 0x4c
   11650:	bne	115dc <__assert_fail@plt+0x628>
   11654:	mov	r2, #5
   11658:	ldr	r1, [pc, #1388]	; 11bcc <__assert_fail@plt+0xc18>
   1165c:	mov	r0, #0
   11660:	bl	10dbc <dcgettext@plt>
   11664:	mov	r2, r0
   11668:	mov	r1, #0
   1166c:	mov	r0, r1
   11670:	bl	10e34 <error@plt>
   11674:	mov	r0, #125	; 0x7d
   11678:	bl	110e8 <__assert_fail@plt+0x134>
   1167c:	mov	r4, #0
   11680:	str	r4, [sp, #4]
   11684:	ldr	r3, [pc, #1348]	; 11bd0 <__assert_fail@plt+0xc1c>
   11688:	str	r3, [sp]
   1168c:	ldr	r3, [pc, #1344]	; 11bd4 <__assert_fail@plt+0xc20>
   11690:	ldr	r3, [r3]
   11694:	ldr	r2, [pc, #1340]	; 11bd8 <__assert_fail@plt+0xc24>
   11698:	ldr	r1, [pc, #1340]	; 11bdc <__assert_fail@plt+0xc28>
   1169c:	ldr	r0, [pc, #1340]	; 11be0 <__assert_fail@plt+0xc2c>
   116a0:	ldr	r0, [r0]
   116a4:	bl	13f8c <__assert_fail@plt+0x2fd8>
   116a8:	mov	r0, r4
   116ac:	bl	10eb8 <exit@plt>
   116b0:	ldr	r3, [pc, #1324]	; 11be4 <__assert_fail@plt+0xc30>
   116b4:	ldr	r9, [r3]
   116b8:	add	r3, sl, r9, lsl #2
   116bc:	str	r3, [sp, #20]
   116c0:	ldr	r3, [sp, #16]
   116c4:	sub	r5, r3, r9
   116c8:	cmp	r5, #0
   116cc:	ble	116e8 <__assert_fail@plt+0x734>
   116d0:	ldr	r4, [pc, #1240]	; 11bb0 <__assert_fail@plt+0xbfc>
   116d4:	mov	r2, #0
   116d8:	mov	r5, r2
   116dc:	mov	fp, #1
   116e0:	ldr	r8, [pc, #1280]	; 11be8 <__assert_fail@plt+0xc34>
   116e4:	b	1179c <__assert_fail@plt+0x7e8>
   116e8:	mov	r2, #5
   116ec:	ldr	r1, [pc, #1272]	; 11bec <__assert_fail@plt+0xc38>
   116f0:	mov	r0, #0
   116f4:	bl	10dbc <dcgettext@plt>
   116f8:	mov	r2, r0
   116fc:	mov	r1, #0
   11700:	mov	r0, r1
   11704:	bl	10e34 <error@plt>
   11708:	mov	r0, #125	; 0x7d
   1170c:	bl	110e8 <__assert_fail@plt+0x134>
   11710:	ldr	r6, [r4, #4]
   11714:	add	r3, r6, #128	; 0x80
   11718:	cmp	r3, r8
   1171c:	bhi	1172c <__assert_fail@plt+0x778>
   11720:	bl	10e7c <__ctype_toupper_loc@plt>
   11724:	ldr	r3, [r0]
   11728:	ldr	r6, [r3, r6, lsl #2]
   1172c:	str	r6, [sp]
   11730:	ldr	r3, [pc, #1208]	; 11bf0 <__assert_fail@plt+0xc3c>
   11734:	ldr	r2, [pc, #1208]	; 11bf4 <__assert_fail@plt+0xc40>
   11738:	mov	r1, fp
   1173c:	add	r0, sp, #40	; 0x28
   11740:	bl	10e40 <__asprintf_chk@plt>
   11744:	b	11770 <__assert_fail@plt+0x7bc>
   11748:	ldr	r3, [r6]
   1174c:	str	r3, [sp, #8]
   11750:	mov	r3, #0
   11754:	str	r3, [sp, #12]
   11758:	str	r7, [sp]
   1175c:	ldr	r3, [pc, #1164]	; 11bf0 <__assert_fail@plt+0xc3c>
   11760:	ldr	r2, [pc, #1168]	; 11bf8 <__assert_fail@plt+0xc44>
   11764:	mov	r1, fp
   11768:	add	r0, sp, #40	; 0x28
   1176c:	bl	10e40 <__asprintf_chk@plt>
   11770:	cmp	r0, #0
   11774:	blt	117d8 <__assert_fail@plt+0x824>
   11778:	ldr	r0, [sp, #40]	; 0x28
   1177c:	bl	10f60 <putenv@plt>
   11780:	cmp	r0, #0
   11784:	bne	117dc <__assert_fail@plt+0x828>
   11788:	mov	r2, fp
   1178c:	add	r5, r5, #1
   11790:	add	r4, r4, #12
   11794:	cmp	r5, #3
   11798:	beq	11814 <__assert_fail@plt+0x860>
   1179c:	mov	r6, r4
   117a0:	ldr	r3, [r4, #8]
   117a4:	cmp	r3, #0
   117a8:	beq	1178c <__assert_fail@plt+0x7d8>
   117ac:	ldrb	r3, [r3]
   117b0:	cmp	r3, #76	; 0x4c
   117b4:	beq	11710 <__assert_fail@plt+0x75c>
   117b8:	ldr	r7, [r4, #4]
   117bc:	add	r3, r7, #128	; 0x80
   117c0:	cmp	r3, r8
   117c4:	bhi	11748 <__assert_fail@plt+0x794>
   117c8:	bl	10e7c <__ctype_toupper_loc@plt>
   117cc:	ldr	r3, [r0]
   117d0:	ldr	r7, [r3, r7, lsl #2]
   117d4:	b	11748 <__assert_fail@plt+0x794>
   117d8:	bl	145fc <__assert_fail@plt+0x3648>
   117dc:	bl	10edc <__errno_location@plt>
   117e0:	ldr	r4, [r0]
   117e4:	mov	r2, #5
   117e8:	ldr	r1, [pc, #1036]	; 11bfc <__assert_fail@plt+0xc48>
   117ec:	mov	r0, #0
   117f0:	bl	10dbc <dcgettext@plt>
   117f4:	mov	r5, r0
   117f8:	ldr	r0, [sp, #40]	; 0x28
   117fc:	bl	13ac0 <__assert_fail@plt+0x2b0c>
   11800:	mov	r3, r0
   11804:	mov	r2, r5
   11808:	mov	r1, r4
   1180c:	mov	r0, #125	; 0x7d
   11810:	bl	10e34 <error@plt>
   11814:	cmp	r2, #0
   11818:	beq	1191c <__assert_fail@plt+0x968>
   1181c:	ldr	r3, [pc, #988]	; 11c00 <__assert_fail@plt+0xc4c>
   11820:	ldr	r4, [r3]
   11824:	mov	r1, #47	; 0x2f
   11828:	mov	r0, r4
   1182c:	bl	10ed0 <strchr@plt>
   11830:	cmp	r0, #0
   11834:	beq	11944 <__assert_fail@plt+0x990>
   11838:	mov	r0, r4
   1183c:	bl	11d50 <__assert_fail@plt+0xd9c>
   11840:	ldr	r3, [pc, #872]	; 11bb0 <__assert_fail@plt+0xbfc>
   11844:	str	r0, [r3, #36]	; 0x24
   11848:	ldr	r3, [pc, #864]	; 11bb0 <__assert_fail@plt+0xbfc>
   1184c:	ldr	r3, [r3, #36]	; 0x24
   11850:	cmp	r3, #0
   11854:	beq	119fc <__assert_fail@plt+0xa48>
   11858:	ldr	r0, [pc, #932]	; 11c04 <__assert_fail@plt+0xc50>
   1185c:	bl	10e4c <getenv@plt>
   11860:	mov	fp, r0
   11864:	ldr	r3, [pc, #836]	; 11bb0 <__assert_fail@plt+0xbfc>
   11868:	ldr	r3, [r3, #36]	; 0x24
   1186c:	str	r3, [sp, #28]
   11870:	ldr	r3, [pc, #912]	; 11c08 <__assert_fail@plt+0xc54>
   11874:	str	r3, [sp, #32]
   11878:	mov	r3, #0
   1187c:	str	r3, [sp, #36]	; 0x24
   11880:	add	r4, sp, #28
   11884:	ldr	r8, [pc, #896]	; 11c0c <__assert_fail@plt+0xc58>
   11888:	ldr	r7, [pc, #896]	; 11c10 <__assert_fail@plt+0xc5c>
   1188c:	mov	r6, #1
   11890:	mov	r5, #3
   11894:	ldr	r3, [r4]
   11898:	ldrb	r2, [r3]
   1189c:	cmp	r2, #0
   118a0:	beq	11a10 <__assert_fail@plt+0xa5c>
   118a4:	str	r7, [sp]
   118a8:	mov	r2, r8
   118ac:	mov	r1, r6
   118b0:	add	r0, sp, #24
   118b4:	bl	10e40 <__asprintf_chk@plt>
   118b8:	cmp	r0, #0
   118bc:	blt	11acc <__assert_fail@plt+0xb18>
   118c0:	add	r2, sp, #40	; 0x28
   118c4:	ldr	r1, [sp, #24]
   118c8:	mov	r0, r5
   118cc:	bl	10f90 <__xstat64@plt>
   118d0:	cmp	r0, #0
   118d4:	beq	11a1c <__assert_fail@plt+0xa68>
   118d8:	ldr	r0, [sp, #24]
   118dc:	bl	11f18 <__assert_fail@plt+0xf64>
   118e0:	ldr	r3, [r4, #4]!
   118e4:	cmp	r3, #0
   118e8:	bne	11894 <__assert_fail@plt+0x8e0>
   118ec:	mov	r2, #5
   118f0:	ldr	r1, [pc, #796]	; 11c14 <__assert_fail@plt+0xc60>
   118f4:	mov	r0, #0
   118f8:	bl	10dbc <dcgettext@plt>
   118fc:	mov	r4, r0
   11900:	ldr	r0, [pc, #776]	; 11c10 <__assert_fail@plt+0xc5c>
   11904:	bl	13ac0 <__assert_fail@plt+0x2b0c>
   11908:	mov	r3, r0
   1190c:	mov	r2, r4
   11910:	mov	r1, #0
   11914:	mov	r0, #125	; 0x7d
   11918:	bl	10e34 <error@plt>
   1191c:	mov	r2, #5
   11920:	ldr	r1, [pc, #752]	; 11c18 <__assert_fail@plt+0xc64>
   11924:	mov	r0, #0
   11928:	bl	10dbc <dcgettext@plt>
   1192c:	mov	r2, r0
   11930:	mov	r1, #0
   11934:	mov	r0, r1
   11938:	bl	10e34 <error@plt>
   1193c:	mov	r0, #125	; 0x7d
   11940:	bl	110e8 <__assert_fail@plt+0x134>
   11944:	ldr	r0, [pc, #720]	; 11c1c <__assert_fail@plt+0xc68>
   11948:	bl	1463c <__assert_fail@plt+0x3688>
   1194c:	subs	r5, r0, #0
   11950:	beq	11970 <__assert_fail@plt+0x9bc>
   11954:	mov	r0, r5
   11958:	bl	11d50 <__assert_fail@plt+0xd9c>
   1195c:	ldr	r3, [pc, #588]	; 11bb0 <__assert_fail@plt+0xbfc>
   11960:	str	r0, [r3, #36]	; 0x24
   11964:	mov	r0, r5
   11968:	bl	11f18 <__assert_fail@plt+0xf64>
   1196c:	b	11848 <__assert_fail@plt+0x894>
   11970:	ldr	r0, [pc, #680]	; 11c20 <__assert_fail@plt+0xc6c>
   11974:	bl	10e4c <getenv@plt>
   11978:	subs	r5, r0, #0
   1197c:	beq	11964 <__assert_fail@plt+0x9b0>
   11980:	mov	r0, r5
   11984:	bl	145e0 <__assert_fail@plt+0x362c>
   11988:	mov	r5, r0
   1198c:	ldr	r1, [pc, #656]	; 11c24 <__assert_fail@plt+0xc70>
   11990:	bl	10f48 <strtok@plt>
   11994:	mov	r7, #0
   11998:	mov	r8, #1
   1199c:	ldr	fp, [pc, #640]	; 11c24 <__assert_fail@plt+0xc70>
   119a0:	cmp	r0, #0
   119a4:	beq	11964 <__assert_fail@plt+0x9b0>
   119a8:	mov	r2, r7
   119ac:	mov	r1, r4
   119b0:	bl	11e38 <__assert_fail@plt+0xe84>
   119b4:	mov	r6, r0
   119b8:	mov	r1, r8
   119bc:	bl	10f24 <access@plt>
   119c0:	cmp	r0, #0
   119c4:	beq	119e0 <__assert_fail@plt+0xa2c>
   119c8:	mov	r0, r6
   119cc:	bl	11f18 <__assert_fail@plt+0xf64>
   119d0:	mov	r1, fp
   119d4:	mov	r0, r7
   119d8:	bl	10f48 <strtok@plt>
   119dc:	b	119a0 <__assert_fail@plt+0x9ec>
   119e0:	mov	r0, r6
   119e4:	bl	11d50 <__assert_fail@plt+0xd9c>
   119e8:	ldr	r3, [pc, #448]	; 11bb0 <__assert_fail@plt+0xbfc>
   119ec:	str	r0, [r3, #36]	; 0x24
   119f0:	mov	r0, r6
   119f4:	bl	11f18 <__assert_fail@plt+0xf64>
   119f8:	b	11964 <__assert_fail@plt+0x9b0>
   119fc:	ldr	r0, [pc, #548]	; 11c28 <__assert_fail@plt+0xc74>
   11a00:	bl	145e0 <__assert_fail@plt+0x362c>
   11a04:	ldr	r3, [pc, #420]	; 11bb0 <__assert_fail@plt+0xbfc>
   11a08:	str	r0, [r3, #36]	; 0x24
   11a0c:	b	11858 <__assert_fail@plt+0x8a4>
   11a10:	ldr	r0, [pc, #504]	; 11c10 <__assert_fail@plt+0xc5c>
   11a14:	bl	145e0 <__assert_fail@plt+0x362c>
   11a18:	str	r0, [sp, #24]
   11a1c:	cmp	fp, #0
   11a20:	beq	11ad0 <__assert_fail@plt+0xb1c>
   11a24:	ldr	r3, [sp, #24]
   11a28:	str	r3, [sp, #4]
   11a2c:	str	fp, [sp]
   11a30:	ldr	r3, [pc, #460]	; 11c04 <__assert_fail@plt+0xc50>
   11a34:	ldr	r2, [pc, #496]	; 11c2c <__assert_fail@plt+0xc78>
   11a38:	mov	r1, #1
   11a3c:	add	r0, sp, #40	; 0x28
   11a40:	bl	10e40 <__asprintf_chk@plt>
   11a44:	cmp	r0, #0
   11a48:	blt	11af0 <__assert_fail@plt+0xb3c>
   11a4c:	ldr	r0, [sp, #24]
   11a50:	bl	11f18 <__assert_fail@plt+0xf64>
   11a54:	ldr	r0, [sp, #40]	; 0x28
   11a58:	bl	10f60 <putenv@plt>
   11a5c:	cmp	r0, #0
   11a60:	bne	11af4 <__assert_fail@plt+0xb40>
   11a64:	ldr	r3, [pc, #324]	; 11bb0 <__assert_fail@plt+0xbfc>
   11a68:	ldr	r0, [r3, #36]	; 0x24
   11a6c:	bl	11f18 <__assert_fail@plt+0xf64>
   11a70:	ldr	r1, [sp, #20]
   11a74:	ldr	r0, [sl, r9, lsl #2]
   11a78:	bl	10d80 <execvp@plt>
   11a7c:	bl	10edc <__errno_location@plt>
   11a80:	ldr	r5, [r0]
   11a84:	cmp	r5, #2
   11a88:	moveq	r4, #127	; 0x7f
   11a8c:	movne	r4, #126	; 0x7e
   11a90:	mov	r2, #5
   11a94:	ldr	r1, [pc, #404]	; 11c30 <__assert_fail@plt+0xc7c>
   11a98:	mov	r0, #0
   11a9c:	bl	10dbc <dcgettext@plt>
   11aa0:	mov	r6, r0
   11aa4:	ldr	r0, [sl, r9, lsl #2]
   11aa8:	bl	13ac0 <__assert_fail@plt+0x2b0c>
   11aac:	mov	r3, r0
   11ab0:	mov	r2, r6
   11ab4:	mov	r1, r5
   11ab8:	mov	r0, #0
   11abc:	bl	10e34 <error@plt>
   11ac0:	mov	r0, r4
   11ac4:	add	sp, sp, #148	; 0x94
   11ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11acc:	bl	145fc <__assert_fail@plt+0x3648>
   11ad0:	ldr	r3, [sp, #24]
   11ad4:	str	r3, [sp]
   11ad8:	ldr	r3, [pc, #292]	; 11c04 <__assert_fail@plt+0xc50>
   11adc:	ldr	r2, [pc, #336]	; 11c34 <__assert_fail@plt+0xc80>
   11ae0:	mov	r1, #1
   11ae4:	add	r0, sp, #40	; 0x28
   11ae8:	bl	10e40 <__asprintf_chk@plt>
   11aec:	b	11a44 <__assert_fail@plt+0xa90>
   11af0:	bl	145fc <__assert_fail@plt+0x3648>
   11af4:	bl	10edc <__errno_location@plt>
   11af8:	ldr	r4, [r0]
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #244]	; 11bfc <__assert_fail@plt+0xc48>
   11b04:	mov	r0, #0
   11b08:	bl	10dbc <dcgettext@plt>
   11b0c:	mov	r5, r0
   11b10:	ldr	r0, [sp, #40]	; 0x28
   11b14:	bl	13ac0 <__assert_fail@plt+0x2b0c>
   11b18:	mov	r3, r0
   11b1c:	mov	r2, r5
   11b20:	mov	r1, r4
   11b24:	mov	r0, #125	; 0x7d
   11b28:	bl	10e34 <error@plt>
   11b2c:	mov	fp, #2
   11b30:	b	11590 <__assert_fail@plt+0x5dc>
   11b34:	mov	fp, #1
   11b38:	b	11590 <__assert_fail@plt+0x5dc>
   11b3c:	mov	r4, r0
   11b40:	bl	10edc <__errno_location@plt>
   11b44:	cmp	r4, #1
   11b48:	moveq	r4, #75	; 0x4b
   11b4c:	ldrne	r4, [r0]
   11b50:	b	11b5c <__assert_fail@plt+0xba8>
   11b54:	bl	10edc <__errno_location@plt>
   11b58:	mov	r4, #75	; 0x4b
   11b5c:	str	r4, [r0]
   11b60:	mov	r2, #5
   11b64:	ldr	r1, [pc, #204]	; 11c38 <__assert_fail@plt+0xc84>
   11b68:	mov	r0, #0
   11b6c:	bl	10dbc <dcgettext@plt>
   11b70:	mov	r5, r0
   11b74:	ldr	r3, [pc, #56]	; 11bb4 <__assert_fail@plt+0xc00>
   11b78:	ldr	r0, [r3]
   11b7c:	bl	13ac0 <__assert_fail@plt+0x2b0c>
   11b80:	mov	r3, r0
   11b84:	mov	r2, r5
   11b88:	mov	r1, r4
   11b8c:	mov	r0, #125	; 0x7d
   11b90:	bl	10e34 <error@plt>
   11b94:			; <UNDEFINED> instruction: 0x00015cb4
   11b98:	andeq	r5, r1, r0, lsl #31
   11b9c:	andeq	r6, r1, r8, lsr #32
   11ba0:	strdeq	r7, [r2], -ip
   11ba4:	andeq	r1, r1, ip, asr ip
   11ba8:	andeq	r5, r1, r0, ror #19
   11bac:	andeq	r6, r1, r0, ror #1
   11bb0:	andeq	r7, r2, r0, ror #2
   11bb4:	andeq	r7, r2, r8, asr r1
   11bb8:	strheq	r6, [r1], -r0
   11bbc:	ldrdeq	r5, [r1], -r8
   11bc0:	andeq	r6, r1, r0, asr #32
   11bc4:	andeq	r6, r1, r0, asr r0
   11bc8:	strheq	r6, [r1], -r4
   11bcc:	andeq	r6, r1, ip, lsl #1
   11bd0:	ldrdeq	r6, [r1], -r0
   11bd4:	strdeq	r7, [r2], -r8
   11bd8:	andeq	r5, r1, ip, ror pc
   11bdc:	andeq	r5, r1, r0, asr #20
   11be0:	andeq	r7, r2, r4, asr r1
   11be4:	andeq	r7, r2, r8, asr #2
   11be8:	andeq	r0, r0, pc, ror r1
   11bec:	andeq	r6, r1, r8, ror #1
   11bf0:	strdeq	r6, [r1], -r8
   11bf4:	andeq	r6, r1, r4, lsl #2
   11bf8:	andeq	r6, r1, ip, lsl #2
   11bfc:	andeq	r6, r1, r8, lsl r1
   11c00:	muleq	r2, r0, r1
   11c04:	andeq	r6, r1, r8, lsr #3
   11c08:			; <UNDEFINED> instruction: 0x000161b4
   11c0c:	andeq	r6, r1, r4, ror #3
   11c10:	ldrdeq	r6, [r1], -r4
   11c14:	andeq	r6, r1, ip, ror #3
   11c18:	andeq	r6, r1, r4, asr #2
   11c1c:	andeq	r6, r1, r0, ror r1
   11c20:	andeq	r6, r1, r0, lsl #3
   11c24:	andeq	r6, r1, r8, lsl #3
   11c28:	andeq	r6, r1, ip, lsl #3
   11c2c:	andeq	r6, r1, r0, lsl #4
   11c30:	andeq	r6, r1, r4, lsl r2
   11c34:	andeq	r6, r1, ip, lsl #4
   11c38:	andeq	r6, r1, r0, asr #1
   11c3c:	ldr	r3, [pc, #4]	; 11c48 <__assert_fail@plt+0xc94>
   11c40:	str	r0, [r3]
   11c44:	bx	lr
   11c48:	andeq	r7, r2, r8, lsl #3
   11c4c:	ldr	r3, [pc, #4]	; 11c58 <__assert_fail@plt+0xca4>
   11c50:	strb	r0, [r3, #4]
   11c54:	bx	lr
   11c58:	andeq	r7, r2, r8, lsl #3
   11c5c:	push	{r4, r5, r6, lr}
   11c60:	sub	sp, sp, #8
   11c64:	ldr	r3, [pc, #200]	; 11d34 <__assert_fail@plt+0xd80>
   11c68:	ldr	r0, [r3]
   11c6c:	bl	14f4c <__assert_fail@plt+0x3f98>
   11c70:	cmp	r0, #0
   11c74:	beq	11c98 <__assert_fail@plt+0xce4>
   11c78:	ldr	r3, [pc, #184]	; 11d38 <__assert_fail@plt+0xd84>
   11c7c:	ldrb	r3, [r3, #4]
   11c80:	cmp	r3, #0
   11c84:	beq	11cb4 <__assert_fail@plt+0xd00>
   11c88:	bl	10edc <__errno_location@plt>
   11c8c:	ldr	r3, [r0]
   11c90:	cmp	r3, #32
   11c94:	bne	11cb4 <__assert_fail@plt+0xd00>
   11c98:	ldr	r3, [pc, #156]	; 11d3c <__assert_fail@plt+0xd88>
   11c9c:	ldr	r0, [r3]
   11ca0:	bl	14f4c <__assert_fail@plt+0x3f98>
   11ca4:	cmp	r0, #0
   11ca8:	bne	11d28 <__assert_fail@plt+0xd74>
   11cac:	add	sp, sp, #8
   11cb0:	pop	{r4, r5, r6, pc}
   11cb4:	mov	r2, #5
   11cb8:	ldr	r1, [pc, #128]	; 11d40 <__assert_fail@plt+0xd8c>
   11cbc:	mov	r0, #0
   11cc0:	bl	10dbc <dcgettext@plt>
   11cc4:	mov	r4, r0
   11cc8:	ldr	r3, [pc, #104]	; 11d38 <__assert_fail@plt+0xd84>
   11ccc:	ldr	r5, [r3]
   11cd0:	cmp	r5, #0
   11cd4:	beq	11d0c <__assert_fail@plt+0xd58>
   11cd8:	bl	10edc <__errno_location@plt>
   11cdc:	ldr	r6, [r0]
   11ce0:	mov	r0, r5
   11ce4:	bl	13938 <__assert_fail@plt+0x2984>
   11ce8:	str	r4, [sp]
   11cec:	mov	r3, r0
   11cf0:	ldr	r2, [pc, #76]	; 11d44 <__assert_fail@plt+0xd90>
   11cf4:	mov	r1, r6
   11cf8:	mov	r0, #0
   11cfc:	bl	10e34 <error@plt>
   11d00:	ldr	r3, [pc, #64]	; 11d48 <__assert_fail@plt+0xd94>
   11d04:	ldr	r0, [r3]
   11d08:	bl	10d68 <_exit@plt>
   11d0c:	bl	10edc <__errno_location@plt>
   11d10:	mov	r3, r4
   11d14:	ldr	r2, [pc, #48]	; 11d4c <__assert_fail@plt+0xd98>
   11d18:	ldr	r1, [r0]
   11d1c:	mov	r0, #0
   11d20:	bl	10e34 <error@plt>
   11d24:	b	11d00 <__assert_fail@plt+0xd4c>
   11d28:	ldr	r3, [pc, #24]	; 11d48 <__assert_fail@plt+0xd94>
   11d2c:	ldr	r0, [r3]
   11d30:	bl	10d68 <_exit@plt>
   11d34:	andeq	r7, r2, r4, asr r1
   11d38:	andeq	r7, r2, r8, lsl #3
   11d3c:	andeq	r7, r2, r0, asr r1
   11d40:	ldrdeq	r6, [r1], -r4
   11d44:	andeq	r6, r1, r0, ror #5
   11d48:	strdeq	r7, [r2], -ip
   11d4c:	andeq	r6, r1, r4, ror #5
   11d50:	push	{r4, lr}
   11d54:	bl	11ddc <__assert_fail@plt+0xe28>
   11d58:	cmp	r0, #0
   11d5c:	popne	{r4, pc}
   11d60:	bl	145fc <__assert_fail@plt+0x3648>
   11d64:	push	{r4, r5, r6, lr}
   11d68:	mov	r5, r0
   11d6c:	ldrb	r4, [r0]
   11d70:	cmp	r4, #47	; 0x2f
   11d74:	movne	r4, #0
   11d78:	moveq	r4, #1
   11d7c:	bl	14cfc <__assert_fail@plt+0x3d48>
   11d80:	sub	r0, r0, r5
   11d84:	cmp	r0, r4
   11d88:	bls	11dc0 <__assert_fail@plt+0xe0c>
   11d8c:	sub	r3, r0, #1
   11d90:	add	r2, r5, r3
   11d94:	ldrb	r1, [r5, r3]
   11d98:	cmp	r1, #47	; 0x2f
   11d9c:	bne	11dc8 <__assert_fail@plt+0xe14>
   11da0:	cmp	r4, r3
   11da4:	beq	11dd4 <__assert_fail@plt+0xe20>
   11da8:	sub	r0, r3, #1
   11dac:	ldrb	r1, [r2, #-1]!
   11db0:	cmp	r1, #47	; 0x2f
   11db4:	bne	11dd0 <__assert_fail@plt+0xe1c>
   11db8:	mov	r3, r0
   11dbc:	b	11da0 <__assert_fail@plt+0xdec>
   11dc0:	mov	r4, r0
   11dc4:	b	11dd4 <__assert_fail@plt+0xe20>
   11dc8:	mov	r4, r0
   11dcc:	b	11dd4 <__assert_fail@plt+0xe20>
   11dd0:	mov	r4, r3
   11dd4:	mov	r0, r4
   11dd8:	pop	{r4, r5, r6, pc}
   11ddc:	push	{r4, r5, r6, r7, r8, lr}
   11de0:	mov	r7, r0
   11de4:	bl	11d64 <__assert_fail@plt+0xdb0>
   11de8:	mov	r4, r0
   11dec:	add	r6, r0, #1
   11df0:	cmp	r0, #0
   11df4:	movne	r0, r6
   11df8:	addeq	r0, r6, #1
   11dfc:	bl	14c20 <__assert_fail@plt+0x3c6c>
   11e00:	subs	r5, r0, #0
   11e04:	beq	11e30 <__assert_fail@plt+0xe7c>
   11e08:	mov	r2, r4
   11e0c:	mov	r1, r7
   11e10:	mov	r0, r5
   11e14:	bl	10d74 <memcpy@plt>
   11e18:	cmp	r4, #0
   11e1c:	moveq	r3, #46	; 0x2e
   11e20:	strbeq	r3, [r5, r4]
   11e24:	moveq	r4, r6
   11e28:	mov	r3, #0
   11e2c:	strb	r3, [r5, r4]
   11e30:	mov	r0, r5
   11e34:	pop	{r4, r5, r6, r7, r8, pc}
   11e38:	push	{r4, lr}
   11e3c:	bl	11e4c <__assert_fail@plt+0xe98>
   11e40:	cmp	r0, #0
   11e44:	popne	{r4, pc}
   11e48:	bl	145fc <__assert_fail@plt+0x3648>
   11e4c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e50:	mov	fp, r0
   11e54:	mov	r6, r1
   11e58:	mov	r9, r2
   11e5c:	bl	14cfc <__assert_fail@plt+0x3d48>
   11e60:	mov	r4, r0
   11e64:	bl	14d64 <__assert_fail@plt+0x3db0>
   11e68:	mov	r5, r0
   11e6c:	sub	r4, r4, fp
   11e70:	add	r4, r4, r0
   11e74:	mov	r0, r6
   11e78:	bl	10ec4 <strlen@plt>
   11e7c:	mov	r8, r0
   11e80:	cmp	r5, #0
   11e84:	beq	11eb0 <__assert_fail@plt+0xefc>
   11e88:	add	r3, fp, r4
   11e8c:	ldrb	r3, [r3, #-1]
   11e90:	cmp	r3, #47	; 0x2f
   11e94:	moveq	r5, #0
   11e98:	beq	11ec0 <__assert_fail@plt+0xf0c>
   11e9c:	ldrb	r5, [r6]
   11ea0:	cmp	r5, #47	; 0x2f
   11ea4:	movne	r5, #47	; 0x2f
   11ea8:	moveq	r5, #0
   11eac:	b	11ec0 <__assert_fail@plt+0xf0c>
   11eb0:	ldrb	r5, [r6]
   11eb4:	cmp	r5, #47	; 0x2f
   11eb8:	moveq	r5, #46	; 0x2e
   11ebc:	movne	r5, #0
   11ec0:	adds	sl, r5, #0
   11ec4:	movne	sl, #1
   11ec8:	add	r0, r8, #1
   11ecc:	add	r0, r0, r4
   11ed0:	add	r0, r0, sl
   11ed4:	bl	14c20 <__assert_fail@plt+0x3c6c>
   11ed8:	subs	r7, r0, #0
   11edc:	beq	11f10 <__assert_fail@plt+0xf5c>
   11ee0:	mov	r2, r4
   11ee4:	mov	r1, fp
   11ee8:	mov	r0, r7
   11eec:	bl	10e94 <mempcpy@plt>
   11ef0:	strb	r5, [r0], sl
   11ef4:	cmp	r9, #0
   11ef8:	strne	r0, [r9]
   11efc:	mov	r2, r8
   11f00:	mov	r1, r6
   11f04:	bl	10e94 <mempcpy@plt>
   11f08:	mov	r3, #0
   11f0c:	strb	r3, [r0]
   11f10:	mov	r0, r7
   11f14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f18:	push	{r4, r5, lr}
   11f1c:	sub	sp, sp, #12
   11f20:	mov	r5, r0
   11f24:	bl	10edc <__errno_location@plt>
   11f28:	mov	r4, r0
   11f2c:	ldr	r3, [r0]
   11f30:	str	r3, [sp]
   11f34:	str	r3, [sp, #4]
   11f38:	mov	r3, #0
   11f3c:	str	r3, [r0]
   11f40:	mov	r0, r5
   11f44:	bl	10d5c <free@plt>
   11f48:	ldr	r3, [r4]
   11f4c:	cmp	r3, #0
   11f50:	moveq	r3, #4
   11f54:	movne	r3, #0
   11f58:	add	r2, sp, #8
   11f5c:	add	r3, r2, r3
   11f60:	ldr	r3, [r3, #-8]
   11f64:	str	r3, [r4]
   11f68:	add	sp, sp, #12
   11f6c:	pop	{r4, r5, pc}
   11f70:	push	{r4, r5, r6, lr}
   11f74:	subs	r4, r0, #0
   11f78:	beq	11ff0 <__assert_fail@plt+0x103c>
   11f7c:	mov	r1, #47	; 0x2f
   11f80:	mov	r0, r4
   11f84:	bl	10f6c <strrchr@plt>
   11f88:	cmp	r0, #0
   11f8c:	addne	r5, r0, #1
   11f90:	moveq	r5, r4
   11f94:	sub	r3, r5, r4
   11f98:	cmp	r3, #6
   11f9c:	ble	11fdc <__assert_fail@plt+0x1028>
   11fa0:	mov	r2, #7
   11fa4:	ldr	r1, [pc, #96]	; 1200c <__assert_fail@plt+0x1058>
   11fa8:	sub	r0, r5, #7
   11fac:	bl	10f9c <strncmp@plt>
   11fb0:	cmp	r0, #0
   11fb4:	bne	11fdc <__assert_fail@plt+0x1028>
   11fb8:	mov	r2, #3
   11fbc:	ldr	r1, [pc, #76]	; 12010 <__assert_fail@plt+0x105c>
   11fc0:	mov	r0, r5
   11fc4:	bl	10f9c <strncmp@plt>
   11fc8:	cmp	r0, #0
   11fcc:	addeq	r4, r5, #3
   11fd0:	ldreq	r3, [pc, #60]	; 12014 <__assert_fail@plt+0x1060>
   11fd4:	streq	r4, [r3]
   11fd8:	movne	r4, r5
   11fdc:	ldr	r3, [pc, #52]	; 12018 <__assert_fail@plt+0x1064>
   11fe0:	str	r4, [r3]
   11fe4:	ldr	r3, [pc, #48]	; 1201c <__assert_fail@plt+0x1068>
   11fe8:	str	r4, [r3]
   11fec:	pop	{r4, r5, r6, pc}
   11ff0:	ldr	r3, [pc, #40]	; 12020 <__assert_fail@plt+0x106c>
   11ff4:	ldr	r3, [r3]
   11ff8:	mov	r2, #55	; 0x37
   11ffc:	mov	r1, #1
   12000:	ldr	r0, [pc, #28]	; 12024 <__assert_fail@plt+0x1070>
   12004:	bl	10df8 <fwrite@plt>
   12008:	bl	10fa8 <abort@plt>
   1200c:	andeq	r6, r1, r0, lsr #6
   12010:	andeq	r6, r1, r8, lsr #6
   12014:	andeq	r7, r2, r0, asr #2
   12018:	muleq	r2, r0, r1
   1201c:	andeq	r7, r2, r4, asr #2
   12020:	andeq	r7, r2, r0, asr r1
   12024:	andeq	r6, r1, r8, ror #5
   12028:	push	{r4, r5, r6, lr}
   1202c:	mov	r5, r0
   12030:	mov	r4, r1
   12034:	mov	r2, #48	; 0x30
   12038:	mov	r1, #0
   1203c:	bl	10ef4 <memset@plt>
   12040:	cmp	r4, #10
   12044:	beq	12054 <__assert_fail@plt+0x10a0>
   12048:	str	r4, [r5]
   1204c:	mov	r0, r5
   12050:	pop	{r4, r5, r6, pc}
   12054:	bl	10fa8 <abort@plt>
   12058:	push	{r4, r5, r6, lr}
   1205c:	mov	r4, r0
   12060:	mov	r5, r1
   12064:	mov	r2, #5
   12068:	mov	r1, r0
   1206c:	mov	r0, #0
   12070:	bl	10dbc <dcgettext@plt>
   12074:	cmp	r4, r0
   12078:	popne	{r4, r5, r6, pc}
   1207c:	bl	15178 <__assert_fail@plt+0x41c4>
   12080:	ldrb	r3, [r0]
   12084:	bic	r3, r3, #32
   12088:	cmp	r3, #85	; 0x55
   1208c:	beq	12108 <__assert_fail@plt+0x1154>
   12090:	cmp	r3, #71	; 0x47
   12094:	bne	12164 <__assert_fail@plt+0x11b0>
   12098:	ldrb	r3, [r0, #1]
   1209c:	bic	r3, r3, #32
   120a0:	cmp	r3, #66	; 0x42
   120a4:	bne	12164 <__assert_fail@plt+0x11b0>
   120a8:	ldrb	r3, [r0, #2]
   120ac:	cmp	r3, #49	; 0x31
   120b0:	bne	12164 <__assert_fail@plt+0x11b0>
   120b4:	ldrb	r3, [r0, #3]
   120b8:	cmp	r3, #56	; 0x38
   120bc:	bne	12164 <__assert_fail@plt+0x11b0>
   120c0:	ldrb	r3, [r0, #4]
   120c4:	cmp	r3, #48	; 0x30
   120c8:	bne	12164 <__assert_fail@plt+0x11b0>
   120cc:	ldrb	r3, [r0, #5]
   120d0:	cmp	r3, #51	; 0x33
   120d4:	bne	12164 <__assert_fail@plt+0x11b0>
   120d8:	ldrb	r3, [r0, #6]
   120dc:	cmp	r3, #48	; 0x30
   120e0:	bne	12164 <__assert_fail@plt+0x11b0>
   120e4:	ldrb	r3, [r0, #7]
   120e8:	cmp	r3, #0
   120ec:	bne	12164 <__assert_fail@plt+0x11b0>
   120f0:	ldrb	r2, [r4]
   120f4:	ldr	r3, [pc, #124]	; 12178 <__assert_fail@plt+0x11c4>
   120f8:	ldr	r0, [pc, #124]	; 1217c <__assert_fail@plt+0x11c8>
   120fc:	cmp	r2, #96	; 0x60
   12100:	movne	r0, r3
   12104:	pop	{r4, r5, r6, pc}
   12108:	ldrb	r3, [r0, #1]
   1210c:	bic	r3, r3, #32
   12110:	cmp	r3, #84	; 0x54
   12114:	bne	12164 <__assert_fail@plt+0x11b0>
   12118:	ldrb	r3, [r0, #2]
   1211c:	bic	r3, r3, #32
   12120:	cmp	r3, #70	; 0x46
   12124:	bne	12164 <__assert_fail@plt+0x11b0>
   12128:	ldrb	r3, [r0, #3]
   1212c:	cmp	r3, #45	; 0x2d
   12130:	bne	12164 <__assert_fail@plt+0x11b0>
   12134:	ldrb	r3, [r0, #4]
   12138:	cmp	r3, #56	; 0x38
   1213c:	bne	12164 <__assert_fail@plt+0x11b0>
   12140:	ldrb	r3, [r0, #5]
   12144:	cmp	r3, #0
   12148:	bne	12164 <__assert_fail@plt+0x11b0>
   1214c:	ldrb	r2, [r4]
   12150:	ldr	r3, [pc, #40]	; 12180 <__assert_fail@plt+0x11cc>
   12154:	ldr	r0, [pc, #40]	; 12184 <__assert_fail@plt+0x11d0>
   12158:	cmp	r2, #96	; 0x60
   1215c:	movne	r0, r3
   12160:	pop	{r4, r5, r6, pc}
   12164:	ldr	r3, [pc, #28]	; 12188 <__assert_fail@plt+0x11d4>
   12168:	ldr	r0, [pc, #28]	; 1218c <__assert_fail@plt+0x11d8>
   1216c:	cmp	r5, #9
   12170:	movne	r0, r3
   12174:	pop	{r4, r5, r6, pc}
   12178:	andeq	r6, r1, r4, lsl #7
   1217c:	muleq	r1, r0, r3
   12180:	andeq	r6, r1, r0, lsl #7
   12184:	muleq	r1, r4, r3
   12188:	andeq	r6, r1, r8, lsl #7
   1218c:	andeq	r6, r1, ip, lsl #7
   12190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12194:	sub	sp, sp, #116	; 0x74
   12198:	str	r0, [sp, #36]	; 0x24
   1219c:	mov	sl, r1
   121a0:	str	r2, [sp, #52]	; 0x34
   121a4:	str	r3, [sp, #28]
   121a8:	ldr	r8, [sp, #152]	; 0x98
   121ac:	bl	10e10 <__ctype_get_mb_cur_max@plt>
   121b0:	str	r0, [sp, #84]	; 0x54
   121b4:	ldr	r3, [sp, #156]	; 0x9c
   121b8:	lsr	r3, r3, #1
   121bc:	and	r3, r3, #1
   121c0:	str	r3, [sp, #32]
   121c4:	mov	r3, #1
   121c8:	str	r3, [sp, #40]	; 0x28
   121cc:	mov	r3, #0
   121d0:	str	r3, [sp, #80]	; 0x50
   121d4:	str	r3, [sp, #44]	; 0x2c
   121d8:	str	r3, [sp, #48]	; 0x30
   121dc:	str	r3, [sp, #60]	; 0x3c
   121e0:	str	r3, [sp, #72]	; 0x48
   121e4:	str	r3, [sp, #76]	; 0x4c
   121e8:	mov	r7, sl
   121ec:	mov	sl, r8
   121f0:	cmp	sl, #10
   121f4:	ldrls	pc, [pc, sl, lsl #2]
   121f8:	b	123b0 <__assert_fail@plt+0x13fc>
   121fc:	andeq	r2, r1, r0, ror #4
   12200:	andeq	r2, r1, r0, lsr r2
   12204:	andeq	r2, r1, ip, lsl #7
   12208:	andeq	r2, r1, r8, lsr #4
   1220c:	andeq	r2, r1, r0, asr #6
   12210:	andeq	r2, r1, r0, ror r2
   12214:	ldrdeq	r3, [r1], -ip
   12218:			; <UNDEFINED> instruction: 0x000123b4
   1221c:	andeq	r2, r1, ip, lsr #5
   12220:	andeq	r2, r1, ip, lsr #5
   12224:	andeq	r2, r1, ip, lsr #5
   12228:	mov	r3, #1
   1222c:	str	r3, [sp, #48]	; 0x30
   12230:	mov	r3, #1
   12234:	str	r3, [sp, #32]
   12238:	str	r3, [sp, #60]	; 0x3c
   1223c:	ldr	r3, [pc, #4068]	; 13228 <__assert_fail@plt+0x2274>
   12240:	str	r3, [sp, #72]	; 0x48
   12244:	mov	fp, #0
   12248:	mov	sl, #2
   1224c:	mov	r6, #0
   12250:	ldr	r3, [sp, #48]	; 0x30
   12254:	eor	r3, r3, #1
   12258:	str	r3, [sp, #68]	; 0x44
   1225c:	b	12b44 <__assert_fail@plt+0x1b90>
   12260:	mov	r3, #0
   12264:	str	r3, [sp, #32]
   12268:	mov	fp, r3
   1226c:	b	1224c <__assert_fail@plt+0x1298>
   12270:	ldr	r3, [sp, #32]
   12274:	cmp	r3, #0
   12278:	bne	123cc <__assert_fail@plt+0x1418>
   1227c:	cmp	r7, #0
   12280:	beq	123ec <__assert_fail@plt+0x1438>
   12284:	ldr	r3, [sp, #36]	; 0x24
   12288:	mov	r2, #34	; 0x22
   1228c:	strb	r2, [r3]
   12290:	mov	r3, #1
   12294:	str	r3, [sp, #48]	; 0x30
   12298:	str	r3, [sp, #60]	; 0x3c
   1229c:	ldr	r3, [pc, #3980]	; 13230 <__assert_fail@plt+0x227c>
   122a0:	str	r3, [sp, #72]	; 0x48
   122a4:	mov	fp, #1
   122a8:	b	1224c <__assert_fail@plt+0x1298>
   122ac:	cmp	sl, #10
   122b0:	beq	122d4 <__assert_fail@plt+0x1320>
   122b4:	mov	r1, sl
   122b8:	ldr	r0, [pc, #3948]	; 1322c <__assert_fail@plt+0x2278>
   122bc:	bl	12058 <__assert_fail@plt+0x10a4>
   122c0:	str	r0, [sp, #164]	; 0xa4
   122c4:	mov	r1, sl
   122c8:	ldr	r0, [pc, #3928]	; 13228 <__assert_fail@plt+0x2274>
   122cc:	bl	12058 <__assert_fail@plt+0x10a4>
   122d0:	str	r0, [sp, #168]	; 0xa8
   122d4:	ldr	r3, [sp, #32]
   122d8:	cmp	r3, #0
   122dc:	movne	fp, #0
   122e0:	bne	12318 <__assert_fail@plt+0x1364>
   122e4:	ldr	r3, [sp, #164]	; 0xa4
   122e8:	ldrb	r3, [r3]
   122ec:	cmp	r3, #0
   122f0:	beq	12338 <__assert_fail@plt+0x1384>
   122f4:	ldr	r2, [sp, #164]	; 0xa4
   122f8:	mov	fp, #0
   122fc:	ldr	r1, [sp, #36]	; 0x24
   12300:	cmp	r7, fp
   12304:	strbhi	r3, [r1, fp]
   12308:	add	fp, fp, #1
   1230c:	ldrb	r3, [r2, #1]!
   12310:	cmp	r3, #0
   12314:	bne	12300 <__assert_fail@plt+0x134c>
   12318:	ldr	r0, [sp, #168]	; 0xa8
   1231c:	bl	10ec4 <strlen@plt>
   12320:	str	r0, [sp, #60]	; 0x3c
   12324:	ldr	r3, [sp, #168]	; 0xa8
   12328:	str	r3, [sp, #72]	; 0x48
   1232c:	mov	r3, #1
   12330:	str	r3, [sp, #48]	; 0x30
   12334:	b	1224c <__assert_fail@plt+0x1298>
   12338:	mov	fp, #0
   1233c:	b	12318 <__assert_fail@plt+0x1364>
   12340:	ldr	r3, [sp, #32]
   12344:	cmp	r3, #0
   12348:	bne	12408 <__assert_fail@plt+0x1454>
   1234c:	mov	r3, #1
   12350:	str	r3, [sp, #48]	; 0x30
   12354:	cmp	r7, #0
   12358:	beq	12424 <__assert_fail@plt+0x1470>
   1235c:	ldr	r3, [sp, #36]	; 0x24
   12360:	mov	r2, #39	; 0x27
   12364:	strb	r2, [r3]
   12368:	mov	r3, #0
   1236c:	str	r3, [sp, #32]
   12370:	mov	r3, #1
   12374:	str	r3, [sp, #60]	; 0x3c
   12378:	ldr	r3, [pc, #3752]	; 13228 <__assert_fail@plt+0x2274>
   1237c:	str	r3, [sp, #72]	; 0x48
   12380:	mov	fp, #1
   12384:	mov	sl, #2
   12388:	b	1224c <__assert_fail@plt+0x1298>
   1238c:	ldr	r3, [sp, #32]
   12390:	cmp	r3, #0
   12394:	beq	12354 <__assert_fail@plt+0x13a0>
   12398:	mov	r3, #1
   1239c:	str	r3, [sp, #60]	; 0x3c
   123a0:	ldr	r3, [pc, #3712]	; 13228 <__assert_fail@plt+0x2274>
   123a4:	str	r3, [sp, #72]	; 0x48
   123a8:	mov	fp, #0
   123ac:	b	1224c <__assert_fail@plt+0x1298>
   123b0:	bl	10fa8 <abort@plt>
   123b4:	mov	r3, #0
   123b8:	str	r3, [sp, #32]
   123bc:	mov	r3, #1
   123c0:	str	r3, [sp, #48]	; 0x30
   123c4:	mov	fp, #0
   123c8:	b	1224c <__assert_fail@plt+0x1298>
   123cc:	ldr	r3, [sp, #32]
   123d0:	str	r3, [sp, #48]	; 0x30
   123d4:	mov	r3, #1
   123d8:	str	r3, [sp, #60]	; 0x3c
   123dc:	ldr	r3, [pc, #3660]	; 13230 <__assert_fail@plt+0x227c>
   123e0:	str	r3, [sp, #72]	; 0x48
   123e4:	mov	fp, #0
   123e8:	b	1224c <__assert_fail@plt+0x1298>
   123ec:	mov	r3, #1
   123f0:	str	r3, [sp, #48]	; 0x30
   123f4:	str	r3, [sp, #60]	; 0x3c
   123f8:	ldr	r3, [pc, #3632]	; 13230 <__assert_fail@plt+0x227c>
   123fc:	str	r3, [sp, #72]	; 0x48
   12400:	mov	fp, #1
   12404:	b	1224c <__assert_fail@plt+0x1298>
   12408:	mov	r3, #1
   1240c:	str	r3, [sp, #60]	; 0x3c
   12410:	ldr	r3, [pc, #3600]	; 13228 <__assert_fail@plt+0x2274>
   12414:	str	r3, [sp, #72]	; 0x48
   12418:	mov	fp, #0
   1241c:	mov	sl, #2
   12420:	b	1224c <__assert_fail@plt+0x1298>
   12424:	mov	r3, #0
   12428:	str	r3, [sp, #32]
   1242c:	mov	r3, #1
   12430:	str	r3, [sp, #60]	; 0x3c
   12434:	ldr	r3, [pc, #3564]	; 13228 <__assert_fail@plt+0x2274>
   12438:	str	r3, [sp, #72]	; 0x48
   1243c:	mov	fp, #1
   12440:	mov	sl, #2
   12444:	b	1224c <__assert_fail@plt+0x1298>
   12448:	mov	r3, #0
   1244c:	str	r3, [sp, #56]	; 0x38
   12450:	ldr	r3, [sp, #52]	; 0x34
   12454:	add	r2, r3, r6
   12458:	str	r2, [sp, #64]	; 0x40
   1245c:	ldrb	r4, [r3, r6]
   12460:	cmp	r4, #126	; 0x7e
   12464:	ldrls	pc, [pc, r4, lsl #2]
   12468:	b	12ca4 <__assert_fail@plt+0x1cf0>
   1246c:	andeq	r2, r1, r4, lsl #13
   12470:	andeq	r2, r1, r4, lsr #25
   12474:	andeq	r2, r1, r4, lsr #25
   12478:	andeq	r2, r1, r4, lsr #25
   1247c:	andeq	r2, r1, r4, lsr #25
   12480:	andeq	r2, r1, r4, lsr #25
   12484:	andeq	r2, r1, r4, lsr #25
   12488:	andeq	r2, r1, r0, ror #19
   1248c:	andeq	r2, r1, ip, ror r6
   12490:	muleq	r1, r8, r9
   12494:	muleq	r1, r0, r9
   12498:	andeq	r2, r1, r0, lsl #18
   1249c:	strdeq	r2, [r1], -r8
   124a0:	andeq	r2, r1, r4, ror r6
   124a4:	andeq	r2, r1, r4, lsr #25
   124a8:	andeq	r2, r1, r4, lsr #25
   124ac:	andeq	r2, r1, r4, lsr #25
   124b0:	andeq	r2, r1, r4, lsr #25
   124b4:	andeq	r2, r1, r4, lsr #25
   124b8:	andeq	r2, r1, r4, lsr #25
   124bc:	andeq	r2, r1, r4, lsr #25
   124c0:	andeq	r2, r1, r4, lsr #25
   124c4:	andeq	r2, r1, r4, lsr #25
   124c8:	andeq	r2, r1, r4, lsr #25
   124cc:	andeq	r2, r1, r4, lsr #25
   124d0:	andeq	r2, r1, r4, lsr #25
   124d4:	andeq	r2, r1, r4, lsr #25
   124d8:	andeq	r2, r1, r4, lsr #25
   124dc:	andeq	r2, r1, r4, lsr #25
   124e0:	andeq	r2, r1, r4, lsr #25
   124e4:	andeq	r2, r1, r4, lsr #25
   124e8:	andeq	r2, r1, r4, lsr #25
   124ec:	andeq	r2, r1, r4, lsr sl
   124f0:	andeq	r2, r1, r0, lsr sl
   124f4:	andeq	r2, r1, r0, lsr sl
   124f8:	andeq	r2, r1, r8, lsl #20
   124fc:	andeq	r2, r1, r0, lsr sl
   12500:	andeq	r3, r1, r8, ror r0
   12504:	andeq	r2, r1, r0, lsr sl
   12508:	andeq	r2, r1, r8, lsl #24
   1250c:	andeq	r2, r1, r0, lsr sl
   12510:	andeq	r2, r1, r0, lsr sl
   12514:	andeq	r2, r1, r0, lsr sl
   12518:	andeq	r3, r1, r8, ror r0
   1251c:	andeq	r3, r1, r8, ror r0
   12520:	andeq	r3, r1, r8, ror r0
   12524:	andeq	r3, r1, r8, ror r0
   12528:	andeq	r3, r1, r8, ror r0
   1252c:	andeq	r3, r1, r8, ror r0
   12530:	andeq	r3, r1, r8, ror r0
   12534:	andeq	r3, r1, r8, ror r0
   12538:	andeq	r3, r1, r8, ror r0
   1253c:	andeq	r3, r1, r8, ror r0
   12540:	andeq	r3, r1, r8, ror r0
   12544:	andeq	r3, r1, r8, ror r0
   12548:	andeq	r3, r1, r8, ror r0
   1254c:	andeq	r3, r1, r8, ror r0
   12550:	andeq	r3, r1, r8, ror r0
   12554:	andeq	r3, r1, r8, ror r0
   12558:	andeq	r2, r1, r0, lsr sl
   1255c:	andeq	r2, r1, r0, lsr sl
   12560:	andeq	r2, r1, r0, lsr sl
   12564:	andeq	r2, r1, r0, lsr sl
   12568:	andeq	r2, r1, ip, lsl #15
   1256c:	andeq	r2, r1, r4, lsr #25
   12570:	andeq	r3, r1, r8, ror r0
   12574:	andeq	r3, r1, r8, ror r0
   12578:	andeq	r3, r1, r8, ror r0
   1257c:	andeq	r3, r1, r8, ror r0
   12580:	andeq	r3, r1, r8, ror r0
   12584:	andeq	r3, r1, r8, ror r0
   12588:	andeq	r3, r1, r8, ror r0
   1258c:	andeq	r3, r1, r8, ror r0
   12590:	andeq	r3, r1, r8, ror r0
   12594:	andeq	r3, r1, r8, ror r0
   12598:	andeq	r3, r1, r8, ror r0
   1259c:	andeq	r3, r1, r8, ror r0
   125a0:	andeq	r3, r1, r8, ror r0
   125a4:	andeq	r3, r1, r8, ror r0
   125a8:	andeq	r3, r1, r8, ror r0
   125ac:	andeq	r3, r1, r8, ror r0
   125b0:	andeq	r3, r1, r8, ror r0
   125b4:	andeq	r3, r1, r8, ror r0
   125b8:	andeq	r3, r1, r8, ror r0
   125bc:	andeq	r3, r1, r8, ror r0
   125c0:	andeq	r3, r1, r8, ror r0
   125c4:	andeq	r3, r1, r8, ror r0
   125c8:	andeq	r3, r1, r8, ror r0
   125cc:	andeq	r3, r1, r8, ror r0
   125d0:	andeq	r3, r1, r8, ror r0
   125d4:	andeq	r3, r1, r8, ror r0
   125d8:	andeq	r2, r1, r0, lsr sl
   125dc:	andeq	r2, r1, r8, lsl #18
   125e0:	andeq	r3, r1, r8, ror r0
   125e4:	andeq	r2, r1, r0, lsr sl
   125e8:	andeq	r3, r1, r8, ror r0
   125ec:	andeq	r2, r1, r0, lsr sl
   125f0:	andeq	r3, r1, r8, ror r0
   125f4:	andeq	r3, r1, r8, ror r0
   125f8:	andeq	r3, r1, r8, ror r0
   125fc:	andeq	r3, r1, r8, ror r0
   12600:	andeq	r3, r1, r8, ror r0
   12604:	andeq	r3, r1, r8, ror r0
   12608:	andeq	r3, r1, r8, ror r0
   1260c:	andeq	r3, r1, r8, ror r0
   12610:	andeq	r3, r1, r8, ror r0
   12614:	andeq	r3, r1, r8, ror r0
   12618:	andeq	r3, r1, r8, ror r0
   1261c:	andeq	r3, r1, r8, ror r0
   12620:	andeq	r3, r1, r8, ror r0
   12624:	andeq	r3, r1, r8, ror r0
   12628:	andeq	r3, r1, r8, ror r0
   1262c:	andeq	r3, r1, r8, ror r0
   12630:	andeq	r3, r1, r8, ror r0
   12634:	andeq	r3, r1, r8, ror r0
   12638:	andeq	r3, r1, r8, ror r0
   1263c:	andeq	r3, r1, r8, ror r0
   12640:	andeq	r3, r1, r8, ror r0
   12644:	andeq	r3, r1, r8, ror r0
   12648:	andeq	r3, r1, r8, ror r0
   1264c:	andeq	r3, r1, r8, ror r0
   12650:	andeq	r3, r1, r8, ror r0
   12654:	andeq	r3, r1, r8, ror r0
   12658:	andeq	r2, r1, r8, ror #19
   1265c:	andeq	r2, r1, r0, lsr sl
   12660:	andeq	r2, r1, r8, ror #19
   12664:	andeq	r2, r1, r8, lsl #20
   12668:	mov	r3, #0
   1266c:	str	r3, [sp, #56]	; 0x38
   12670:	b	12450 <__assert_fail@plt+0x149c>
   12674:	mov	r3, #114	; 0x72
   12678:	b	1299c <__assert_fail@plt+0x19e8>
   1267c:	mov	r3, #98	; 0x62
   12680:	b	129b4 <__assert_fail@plt+0x1a00>
   12684:	ldr	r3, [sp, #48]	; 0x30
   12688:	cmp	r3, #0
   1268c:	beq	12774 <__assert_fail@plt+0x17c0>
   12690:	ldr	r3, [sp, #32]
   12694:	cmp	r3, #0
   12698:	bne	131fc <__assert_fail@plt+0x2248>
   1269c:	ldr	r3, [sp, #44]	; 0x2c
   126a0:	eor	r3, r3, #1
   126a4:	cmp	sl, #2
   126a8:	movne	r3, #0
   126ac:	andeq	r3, r3, #1
   126b0:	cmp	r3, #0
   126b4:	moveq	r2, fp
   126b8:	beq	126fc <__assert_fail@plt+0x1748>
   126bc:	cmp	r7, fp
   126c0:	ldrhi	r2, [sp, #36]	; 0x24
   126c4:	movhi	r1, #39	; 0x27
   126c8:	strbhi	r1, [r2, fp]
   126cc:	add	r2, fp, #1
   126d0:	cmp	r7, r2
   126d4:	ldrhi	r1, [sp, #36]	; 0x24
   126d8:	movhi	r0, #36	; 0x24
   126dc:	strbhi	r0, [r1, r2]
   126e0:	add	r2, fp, #2
   126e4:	cmp	r7, r2
   126e8:	ldrhi	r1, [sp, #36]	; 0x24
   126ec:	movhi	r0, #39	; 0x27
   126f0:	strbhi	r0, [r1, r2]
   126f4:	add	r2, fp, #3
   126f8:	str	r3, [sp, #44]	; 0x2c
   126fc:	cmp	r7, r2
   12700:	ldrhi	r3, [sp, #36]	; 0x24
   12704:	movhi	r1, #92	; 0x5c
   12708:	strbhi	r1, [r3, r2]
   1270c:	add	fp, r2, #1
   12710:	cmp	r5, #0
   12714:	beq	13080 <__assert_fail@plt+0x20cc>
   12718:	add	r3, r6, #1
   1271c:	ldr	r1, [sp, #28]
   12720:	cmp	r1, r3
   12724:	bls	13090 <__assert_fail@plt+0x20dc>
   12728:	ldr	r1, [sp, #52]	; 0x34
   1272c:	ldrb	r3, [r1, r3]
   12730:	sub	r3, r3, #48	; 0x30
   12734:	uxtb	r3, r3
   12738:	cmp	r3, #9
   1273c:	bhi	1309c <__assert_fail@plt+0x20e8>
   12740:	cmp	r7, fp
   12744:	movhi	r3, #48	; 0x30
   12748:	ldrhi	r1, [sp, #36]	; 0x24
   1274c:	strbhi	r3, [r1, fp]
   12750:	add	r3, r2, #2
   12754:	cmp	r7, r3
   12758:	movhi	r1, #48	; 0x30
   1275c:	ldrhi	r0, [sp, #36]	; 0x24
   12760:	strbhi	r1, [r0, r3]
   12764:	add	fp, r2, #3
   12768:	ldr	r8, [sp, #32]
   1276c:	mov	r4, #48	; 0x30
   12770:	b	12a4c <__assert_fail@plt+0x1a98>
   12774:	ldr	r3, [sp, #156]	; 0x9c
   12778:	tst	r3, #1
   1277c:	bne	12b40 <__assert_fail@plt+0x1b8c>
   12780:	ldr	r5, [sp, #48]	; 0x30
   12784:	mov	r8, r5
   12788:	b	12a4c <__assert_fail@plt+0x1a98>
   1278c:	cmp	sl, #2
   12790:	beq	127a8 <__assert_fail@plt+0x17f4>
   12794:	cmp	sl, #5
   12798:	beq	127c0 <__assert_fail@plt+0x180c>
   1279c:	mov	r8, #0
   127a0:	mov	r5, r8
   127a4:	b	12a4c <__assert_fail@plt+0x1a98>
   127a8:	ldr	r3, [sp, #32]
   127ac:	cmp	r3, #0
   127b0:	bne	13210 <__assert_fail@plt+0x225c>
   127b4:	mov	r8, r3
   127b8:	mov	r5, r3
   127bc:	b	12a4c <__assert_fail@plt+0x1a98>
   127c0:	ldr	r3, [sp, #156]	; 0x9c
   127c4:	tst	r3, #4
   127c8:	beq	130a8 <__assert_fail@plt+0x20f4>
   127cc:	add	r3, r6, #2
   127d0:	ldr	r2, [sp, #28]
   127d4:	cmp	r2, r3
   127d8:	bls	130b4 <__assert_fail@plt+0x2100>
   127dc:	ldr	r2, [sp, #52]	; 0x34
   127e0:	add	r2, r2, r6
   127e4:	ldrb	r2, [r2, #1]
   127e8:	cmp	r2, #63	; 0x3f
   127ec:	movne	r8, #0
   127f0:	movne	r5, r8
   127f4:	bne	12a4c <__assert_fail@plt+0x1a98>
   127f8:	ldr	r2, [sp, #52]	; 0x34
   127fc:	ldrb	r2, [r2, r3]
   12800:	sub	r1, r2, #33	; 0x21
   12804:	cmp	r1, #29
   12808:	ldrls	pc, [pc, r1, lsl #2]
   1280c:	b	130c0 <__assert_fail@plt+0x210c>
   12810:	andeq	r2, r1, r8, lsl #17
   12814:	andeq	r3, r1, r0, asr #1
   12818:	andeq	r3, r1, r0, asr #1
   1281c:	andeq	r3, r1, r0, asr #1
   12820:	andeq	r3, r1, r0, asr #1
   12824:	andeq	r3, r1, r0, asr #1
   12828:	andeq	r2, r1, r8, lsl #17
   1282c:	andeq	r2, r1, r8, lsl #17
   12830:	andeq	r2, r1, r8, lsl #17
   12834:	andeq	r3, r1, r0, asr #1
   12838:	andeq	r3, r1, r0, asr #1
   1283c:	andeq	r3, r1, r0, asr #1
   12840:	andeq	r2, r1, r8, lsl #17
   12844:	andeq	r3, r1, r0, asr #1
   12848:	andeq	r2, r1, r8, lsl #17
   1284c:	andeq	r3, r1, r0, asr #1
   12850:	andeq	r3, r1, r0, asr #1
   12854:	andeq	r3, r1, r0, asr #1
   12858:	andeq	r3, r1, r0, asr #1
   1285c:	andeq	r3, r1, r0, asr #1
   12860:	andeq	r3, r1, r0, asr #1
   12864:	andeq	r3, r1, r0, asr #1
   12868:	andeq	r3, r1, r0, asr #1
   1286c:	andeq	r3, r1, r0, asr #1
   12870:	andeq	r3, r1, r0, asr #1
   12874:	andeq	r3, r1, r0, asr #1
   12878:	andeq	r3, r1, r0, asr #1
   1287c:	andeq	r2, r1, r8, lsl #17
   12880:	andeq	r2, r1, r8, lsl #17
   12884:	andeq	r2, r1, r8, lsl #17
   12888:	ldr	r1, [sp, #32]
   1288c:	cmp	r1, #0
   12890:	bne	132d0 <__assert_fail@plt+0x231c>
   12894:	cmp	r7, fp
   12898:	movhi	r1, #63	; 0x3f
   1289c:	ldrhi	r0, [sp, #36]	; 0x24
   128a0:	strbhi	r1, [r0, fp]
   128a4:	add	r1, fp, #1
   128a8:	cmp	r7, r1
   128ac:	ldrhi	r0, [sp, #36]	; 0x24
   128b0:	movhi	ip, #34	; 0x22
   128b4:	strbhi	ip, [r0, r1]
   128b8:	add	r1, fp, #2
   128bc:	cmp	r7, r1
   128c0:	ldrhi	r0, [sp, #36]	; 0x24
   128c4:	movhi	ip, #34	; 0x22
   128c8:	strbhi	ip, [r0, r1]
   128cc:	add	r1, fp, #3
   128d0:	cmp	r7, r1
   128d4:	movhi	r0, #63	; 0x3f
   128d8:	ldrhi	ip, [sp, #36]	; 0x24
   128dc:	strbhi	r0, [ip, r1]
   128e0:	add	fp, fp, #4
   128e4:	ldr	r5, [sp, #32]
   128e8:	mov	r8, r5
   128ec:	mov	r4, r2
   128f0:	mov	r6, r3
   128f4:	b	12a4c <__assert_fail@plt+0x1a98>
   128f8:	mov	r3, #102	; 0x66
   128fc:	b	129b4 <__assert_fail@plt+0x1a00>
   12900:	mov	r3, #118	; 0x76
   12904:	b	129b4 <__assert_fail@plt+0x1a00>
   12908:	cmp	sl, #2
   1290c:	beq	12978 <__assert_fail@plt+0x19c4>
   12910:	ldr	r3, [sp, #48]	; 0x30
   12914:	ldr	r2, [sp, #32]
   12918:	and	r3, r3, r2
   1291c:	tst	r9, r3
   12920:	moveq	r3, r4
   12924:	beq	129b4 <__assert_fail@plt+0x1a00>
   12928:	mov	r8, #0
   1292c:	mov	r5, r8
   12930:	eor	r5, r5, #1
   12934:	ldr	r3, [sp, #44]	; 0x2c
   12938:	and	r5, r5, r3
   1293c:	tst	r5, #255	; 0xff
   12940:	beq	12b20 <__assert_fail@plt+0x1b6c>
   12944:	cmp	r7, fp
   12948:	ldrhi	r3, [sp, #36]	; 0x24
   1294c:	movhi	r2, #39	; 0x27
   12950:	strbhi	r2, [r3, fp]
   12954:	add	r3, fp, #1
   12958:	cmp	r7, r3
   1295c:	ldrhi	r2, [sp, #36]	; 0x24
   12960:	movhi	r1, #39	; 0x27
   12964:	strbhi	r1, [r2, r3]
   12968:	add	fp, fp, #2
   1296c:	mov	r3, #0
   12970:	str	r3, [sp, #44]	; 0x2c
   12974:	b	12b20 <__assert_fail@plt+0x1b6c>
   12978:	ldr	r3, [sp, #32]
   1297c:	cmp	r3, #0
   12980:	bne	1321c <__assert_fail@plt+0x2268>
   12984:	mov	r8, r3
   12988:	mov	r5, r3
   1298c:	b	12930 <__assert_fail@plt+0x197c>
   12990:	mov	r3, #110	; 0x6e
   12994:	b	1299c <__assert_fail@plt+0x19e8>
   12998:	mov	r3, #116	; 0x74
   1299c:	ldr	r2, [sp, #32]
   129a0:	cmp	sl, #2
   129a4:	movne	r2, #0
   129a8:	andeq	r2, r2, #1
   129ac:	cmp	r2, #0
   129b0:	bne	129d4 <__assert_fail@plt+0x1a20>
   129b4:	ldr	r2, [sp, #48]	; 0x30
   129b8:	cmp	r2, #0
   129bc:	moveq	r8, r2
   129c0:	moveq	r5, r2
   129c4:	beq	12a4c <__assert_fail@plt+0x1a98>
   129c8:	mov	r4, r3
   129cc:	mov	r8, #0
   129d0:	b	12aa4 <__assert_fail@plt+0x1af0>
   129d4:	mov	r8, sl
   129d8:	mov	sl, r7
   129dc:	b	13248 <__assert_fail@plt+0x2294>
   129e0:	mov	r3, #97	; 0x61
   129e4:	b	129b4 <__assert_fail@plt+0x1a00>
   129e8:	ldr	r3, [sp, #28]
   129ec:	cmn	r3, #1
   129f0:	beq	12a1c <__assert_fail@plt+0x1a68>
   129f4:	ldr	r3, [sp, #28]
   129f8:	subs	r3, r3, #1
   129fc:	movne	r3, #1
   12a00:	cmp	r3, #0
   12a04:	bne	130cc <__assert_fail@plt+0x2118>
   12a08:	cmp	r6, #0
   12a0c:	beq	12a34 <__assert_fail@plt+0x1a80>
   12a10:	mov	r8, #0
   12a14:	mov	r5, r8
   12a18:	b	12a4c <__assert_fail@plt+0x1a98>
   12a1c:	ldr	r3, [sp, #52]	; 0x34
   12a20:	ldrb	r3, [r3, #1]
   12a24:	adds	r3, r3, #0
   12a28:	movne	r3, #1
   12a2c:	b	12a00 <__assert_fail@plt+0x1a4c>
   12a30:	mov	r8, #0
   12a34:	ldr	r5, [sp, #32]
   12a38:	cmp	sl, #2
   12a3c:	movne	r5, #0
   12a40:	andeq	r5, r5, #1
   12a44:	cmp	r5, #0
   12a48:	bne	12bfc <__assert_fail@plt+0x1c48>
   12a4c:	ldr	r3, [sp, #68]	; 0x44
   12a50:	cmp	sl, #2
   12a54:	orreq	r3, r3, #1
   12a58:	eor	r3, r3, #1
   12a5c:	ldr	r2, [sp, #32]
   12a60:	orr	r3, r2, r3
   12a64:	tst	r3, #255	; 0xff
   12a68:	beq	12a98 <__assert_fail@plt+0x1ae4>
   12a6c:	ldr	r3, [sp, #160]	; 0xa0
   12a70:	cmp	r3, #0
   12a74:	beq	12a98 <__assert_fail@plt+0x1ae4>
   12a78:	lsr	r2, r4, #5
   12a7c:	uxtb	r2, r2
   12a80:	and	r3, r4, #31
   12a84:	ldr	r1, [sp, #160]	; 0xa0
   12a88:	ldr	r2, [r1, r2, lsl #2]
   12a8c:	lsr	r3, r2, r3
   12a90:	tst	r3, #1
   12a94:	bne	12aa4 <__assert_fail@plt+0x1af0>
   12a98:	ldr	r3, [sp, #56]	; 0x38
   12a9c:	cmp	r3, #0
   12aa0:	beq	12930 <__assert_fail@plt+0x197c>
   12aa4:	ldr	r3, [sp, #32]
   12aa8:	cmp	r3, #0
   12aac:	bne	132b8 <__assert_fail@plt+0x2304>
   12ab0:	ldr	r3, [sp, #44]	; 0x2c
   12ab4:	eor	r3, r3, #1
   12ab8:	cmp	sl, #2
   12abc:	movne	r3, #0
   12ac0:	andeq	r3, r3, #1
   12ac4:	cmp	r3, #0
   12ac8:	beq	12b0c <__assert_fail@plt+0x1b58>
   12acc:	cmp	r7, fp
   12ad0:	ldrhi	r2, [sp, #36]	; 0x24
   12ad4:	movhi	r1, #39	; 0x27
   12ad8:	strbhi	r1, [r2, fp]
   12adc:	add	r2, fp, #1
   12ae0:	cmp	r7, r2
   12ae4:	ldrhi	r1, [sp, #36]	; 0x24
   12ae8:	movhi	r0, #36	; 0x24
   12aec:	strbhi	r0, [r1, r2]
   12af0:	add	r2, fp, #2
   12af4:	cmp	r7, r2
   12af8:	ldrhi	r1, [sp, #36]	; 0x24
   12afc:	movhi	r0, #39	; 0x27
   12b00:	strbhi	r0, [r1, r2]
   12b04:	add	fp, fp, #3
   12b08:	str	r3, [sp, #44]	; 0x2c
   12b0c:	cmp	r7, fp
   12b10:	ldrhi	r3, [sp, #36]	; 0x24
   12b14:	movhi	r2, #92	; 0x5c
   12b18:	strbhi	r2, [r3, fp]
   12b1c:	add	fp, fp, #1
   12b20:	cmp	fp, r7
   12b24:	ldrcc	r3, [sp, #36]	; 0x24
   12b28:	strbcc	r4, [r3, fp]
   12b2c:	add	fp, fp, #1
   12b30:	ldr	r3, [sp, #40]	; 0x28
   12b34:	cmp	r8, #0
   12b38:	moveq	r3, #0
   12b3c:	str	r3, [sp, #40]	; 0x28
   12b40:	add	r6, r6, #1
   12b44:	ldr	r3, [sp, #28]
   12b48:	cmn	r3, #1
   12b4c:	beq	130d8 <__assert_fail@plt+0x2124>
   12b50:	ldr	r3, [sp, #28]
   12b54:	subs	r8, r3, r6
   12b58:	movne	r8, #1
   12b5c:	cmp	r8, #0
   12b60:	beq	130ec <__assert_fail@plt+0x2138>
   12b64:	ldr	r5, [sp, #48]	; 0x30
   12b68:	cmp	sl, #2
   12b6c:	moveq	r5, #0
   12b70:	andne	r5, r5, #1
   12b74:	ldr	r3, [sp, #60]	; 0x3c
   12b78:	adds	r9, r3, #0
   12b7c:	movne	r9, #1
   12b80:	ands	r2, r5, r9
   12b84:	str	r2, [sp, #56]	; 0x38
   12b88:	beq	12450 <__assert_fail@plt+0x149c>
   12b8c:	add	r4, r6, r3
   12b90:	ldr	r2, [sp, #28]
   12b94:	cmp	r3, #1
   12b98:	movls	r3, #0
   12b9c:	movhi	r3, #1
   12ba0:	cmn	r2, #1
   12ba4:	movne	r3, #0
   12ba8:	cmp	r3, #0
   12bac:	beq	12bbc <__assert_fail@plt+0x1c08>
   12bb0:	ldr	r0, [sp, #52]	; 0x34
   12bb4:	bl	10ec4 <strlen@plt>
   12bb8:	str	r0, [sp, #28]
   12bbc:	ldr	r3, [sp, #28]
   12bc0:	cmp	r3, r4
   12bc4:	bcc	12448 <__assert_fail@plt+0x1494>
   12bc8:	ldr	r2, [sp, #60]	; 0x3c
   12bcc:	ldr	r1, [sp, #72]	; 0x48
   12bd0:	ldr	r3, [sp, #52]	; 0x34
   12bd4:	add	r0, r3, r6
   12bd8:	bl	10da4 <memcmp@plt>
   12bdc:	cmp	r0, #0
   12be0:	bne	12668 <__assert_fail@plt+0x16b4>
   12be4:	ldr	r3, [sp, #32]
   12be8:	cmp	r3, #0
   12bec:	beq	12450 <__assert_fail@plt+0x149c>
   12bf0:	mov	r8, sl
   12bf4:	mov	sl, r7
   12bf8:	b	13248 <__assert_fail@plt+0x2294>
   12bfc:	mov	r8, sl
   12c00:	mov	sl, r7
   12c04:	b	13248 <__assert_fail@plt+0x2294>
   12c08:	cmp	sl, #2
   12c0c:	strne	r8, [sp, #80]	; 0x50
   12c10:	movne	r5, #0
   12c14:	bne	12a4c <__assert_fail@plt+0x1a98>
   12c18:	ldr	r3, [sp, #32]
   12c1c:	cmp	r3, #0
   12c20:	bne	13234 <__assert_fail@plt+0x2280>
   12c24:	ldr	r2, [sp, #76]	; 0x4c
   12c28:	adds	r3, r7, #0
   12c2c:	movne	r3, #1
   12c30:	cmp	r2, #0
   12c34:	movne	r3, #0
   12c38:	cmp	r3, #0
   12c3c:	movne	r3, #0
   12c40:	bne	12c70 <__assert_fail@plt+0x1cbc>
   12c44:	cmp	r7, fp
   12c48:	ldrhi	r3, [sp, #36]	; 0x24
   12c4c:	movhi	r2, #39	; 0x27
   12c50:	strbhi	r2, [r3, fp]
   12c54:	add	r3, fp, #1
   12c58:	cmp	r7, r3
   12c5c:	ldrhi	r2, [sp, #36]	; 0x24
   12c60:	movhi	r1, #92	; 0x5c
   12c64:	strbhi	r1, [r2, r3]
   12c68:	mov	r3, r7
   12c6c:	ldr	r7, [sp, #76]	; 0x4c
   12c70:	add	r2, fp, #2
   12c74:	cmp	r2, r3
   12c78:	ldrcc	r1, [sp, #36]	; 0x24
   12c7c:	movcc	r0, #39	; 0x27
   12c80:	strbcc	r0, [r1, r2]
   12c84:	add	fp, fp, #3
   12c88:	ldr	r2, [sp, #32]
   12c8c:	mov	r5, r2
   12c90:	str	r8, [sp, #80]	; 0x50
   12c94:	str	r2, [sp, #44]	; 0x2c
   12c98:	str	r7, [sp, #76]	; 0x4c
   12c9c:	mov	r7, r3
   12ca0:	b	12a4c <__assert_fail@plt+0x1a98>
   12ca4:	ldr	r5, [sp, #84]	; 0x54
   12ca8:	cmp	r5, #1
   12cac:	beq	12cdc <__assert_fail@plt+0x1d28>
   12cb0:	mov	r3, #0
   12cb4:	str	r3, [sp, #104]	; 0x68
   12cb8:	str	r3, [sp, #108]	; 0x6c
   12cbc:	ldr	r3, [sp, #28]
   12cc0:	cmn	r3, #1
   12cc4:	beq	12d10 <__assert_fail@plt+0x1d5c>
   12cc8:	mov	r3, #0
   12ccc:	str	r4, [sp, #88]	; 0x58
   12cd0:	str	fp, [sp, #92]	; 0x5c
   12cd4:	mov	fp, r3
   12cd8:	b	12e38 <__assert_fail@plt+0x1e84>
   12cdc:	bl	10eac <__ctype_b_loc@plt>
   12ce0:	ldr	r2, [r0]
   12ce4:	lsl	r3, r4, #1
   12ce8:	ldrh	r8, [r2, r3]
   12cec:	lsr	r8, r8, #14
   12cf0:	and	r8, r8, #1
   12cf4:	mov	r2, r5
   12cf8:	eor	r5, r8, #1
   12cfc:	ldr	r3, [sp, #48]	; 0x30
   12d00:	and	r5, r5, r3
   12d04:	ands	r5, r5, #255	; 0xff
   12d08:	beq	12a4c <__assert_fail@plt+0x1a98>
   12d0c:	b	12ed0 <__assert_fail@plt+0x1f1c>
   12d10:	ldr	r0, [sp, #52]	; 0x34
   12d14:	bl	10ec4 <strlen@plt>
   12d18:	str	r0, [sp, #28]
   12d1c:	b	12cc8 <__assert_fail@plt+0x1d14>
   12d20:	mov	r2, fp
   12d24:	mov	r1, r4
   12d28:	ldr	r4, [sp, #88]	; 0x58
   12d2c:	ldr	fp, [sp, #92]	; 0x5c
   12d30:	ldr	r0, [sp, #28]
   12d34:	cmp	r0, r5
   12d38:	bls	12f04 <__assert_fail@plt+0x1f50>
   12d3c:	ldrb	r3, [r1]
   12d40:	cmp	r3, #0
   12d44:	beq	12f0c <__assert_fail@plt+0x1f58>
   12d48:	mov	r3, r1
   12d4c:	add	r2, r2, #1
   12d50:	add	r1, r6, r2
   12d54:	cmp	r0, r1
   12d58:	bls	12f14 <__assert_fail@plt+0x1f60>
   12d5c:	ldrb	r1, [r3, #1]!
   12d60:	cmp	r1, #0
   12d64:	bne	12d4c <__assert_fail@plt+0x1d98>
   12d68:	mov	r8, #0
   12d6c:	b	12ec8 <__assert_fail@plt+0x1f14>
   12d70:	cmp	r4, r5
   12d74:	beq	12e14 <__assert_fail@plt+0x1e60>
   12d78:	ldrb	r3, [r4, #1]!
   12d7c:	sub	r3, r3, #91	; 0x5b
   12d80:	cmp	r3, #33	; 0x21
   12d84:	ldrls	pc, [pc, r3, lsl #2]
   12d88:	b	12d70 <__assert_fail@plt+0x1dbc>
   12d8c:	andeq	r3, r1, r0, asr #4
   12d90:	andeq	r3, r1, r0, asr #4
   12d94:	andeq	r2, r1, r0, ror sp
   12d98:	andeq	r3, r1, r0, asr #4
   12d9c:	andeq	r2, r1, r0, ror sp
   12da0:	andeq	r3, r1, r0, asr #4
   12da4:	andeq	r2, r1, r0, ror sp
   12da8:	andeq	r2, r1, r0, ror sp
   12dac:	andeq	r2, r1, r0, ror sp
   12db0:	andeq	r2, r1, r0, ror sp
   12db4:	andeq	r2, r1, r0, ror sp
   12db8:	andeq	r2, r1, r0, ror sp
   12dbc:	andeq	r2, r1, r0, ror sp
   12dc0:	andeq	r2, r1, r0, ror sp
   12dc4:	andeq	r2, r1, r0, ror sp
   12dc8:	andeq	r2, r1, r0, ror sp
   12dcc:	andeq	r2, r1, r0, ror sp
   12dd0:	andeq	r2, r1, r0, ror sp
   12dd4:	andeq	r2, r1, r0, ror sp
   12dd8:	andeq	r2, r1, r0, ror sp
   12ddc:	andeq	r2, r1, r0, ror sp
   12de0:	andeq	r2, r1, r0, ror sp
   12de4:	andeq	r2, r1, r0, ror sp
   12de8:	andeq	r2, r1, r0, ror sp
   12dec:	andeq	r2, r1, r0, ror sp
   12df0:	andeq	r2, r1, r0, ror sp
   12df4:	andeq	r2, r1, r0, ror sp
   12df8:	andeq	r2, r1, r0, ror sp
   12dfc:	andeq	r2, r1, r0, ror sp
   12e00:	andeq	r2, r1, r0, ror sp
   12e04:	andeq	r2, r1, r0, ror sp
   12e08:	andeq	r2, r1, r0, ror sp
   12e0c:	andeq	r2, r1, r0, ror sp
   12e10:	andeq	r3, r1, r0, asr #4
   12e14:	ldr	r0, [sp, #100]	; 0x64
   12e18:	bl	10de0 <iswprint@plt>
   12e1c:	cmp	r0, #0
   12e20:	moveq	r8, #0
   12e24:	add	fp, fp, r9
   12e28:	add	r0, sp, #104	; 0x68
   12e2c:	bl	10d98 <mbsinit@plt>
   12e30:	cmp	r0, #0
   12e34:	bne	12ea8 <__assert_fail@plt+0x1ef4>
   12e38:	add	r5, r6, fp
   12e3c:	ldr	r3, [sp, #52]	; 0x34
   12e40:	add	r4, r3, r5
   12e44:	add	r3, sp, #104	; 0x68
   12e48:	ldr	r2, [sp, #28]
   12e4c:	sub	r2, r2, r5
   12e50:	mov	r1, r4
   12e54:	add	r0, sp, #100	; 0x64
   12e58:	bl	151ac <__assert_fail@plt+0x41f8>
   12e5c:	subs	r9, r0, #0
   12e60:	beq	12f1c <__assert_fail@plt+0x1f68>
   12e64:	cmn	r9, #1
   12e68:	beq	12eb8 <__assert_fail@plt+0x1f04>
   12e6c:	cmn	r9, #2
   12e70:	beq	12d20 <__assert_fail@plt+0x1d6c>
   12e74:	ldr	r3, [sp, #32]
   12e78:	cmp	sl, #2
   12e7c:	movne	r3, #0
   12e80:	andeq	r3, r3, #1
   12e84:	cmp	r3, #0
   12e88:	beq	12e14 <__assert_fail@plt+0x1e60>
   12e8c:	cmp	r9, #1
   12e90:	bls	12e14 <__assert_fail@plt+0x1e60>
   12e94:	sub	r3, r9, #1
   12e98:	add	r5, r3, r5
   12e9c:	ldr	r3, [sp, #52]	; 0x34
   12ea0:	add	r5, r3, r5
   12ea4:	b	12d78 <__assert_fail@plt+0x1dc4>
   12ea8:	ldr	r4, [sp, #88]	; 0x58
   12eac:	mov	r2, fp
   12eb0:	ldr	fp, [sp, #92]	; 0x5c
   12eb4:	b	12ec8 <__assert_fail@plt+0x1f14>
   12eb8:	ldr	r4, [sp, #88]	; 0x58
   12ebc:	mov	r2, fp
   12ec0:	ldr	fp, [sp, #92]	; 0x5c
   12ec4:	mov	r8, #0
   12ec8:	cmp	r2, #1
   12ecc:	bls	12cf8 <__assert_fail@plt+0x1d44>
   12ed0:	add	r1, r6, r2
   12ed4:	ldr	ip, [sp, #64]	; 0x40
   12ed8:	mov	r5, #0
   12edc:	eor	r3, r8, #1
   12ee0:	ldr	r2, [sp, #48]	; 0x30
   12ee4:	and	r3, r3, r2
   12ee8:	uxtb	r3, r3
   12eec:	ldr	r9, [sp, #32]
   12ef0:	ldr	lr, [sp, #44]	; 0x2c
   12ef4:	ldr	r2, [sp, #56]	; 0x38
   12ef8:	str	r8, [sp, #56]	; 0x38
   12efc:	ldr	r0, [sp, #36]	; 0x24
   12f00:	b	12f9c <__assert_fail@plt+0x1fe8>
   12f04:	mov	r8, #0
   12f08:	b	12ec8 <__assert_fail@plt+0x1f14>
   12f0c:	mov	r8, #0
   12f10:	b	12ec8 <__assert_fail@plt+0x1f14>
   12f14:	mov	r8, #0
   12f18:	b	12ec8 <__assert_fail@plt+0x1f14>
   12f1c:	ldr	r4, [sp, #88]	; 0x58
   12f20:	mov	r2, fp
   12f24:	ldr	fp, [sp, #92]	; 0x5c
   12f28:	b	12ec8 <__assert_fail@plt+0x1f14>
   12f2c:	cmp	r2, #0
   12f30:	beq	12f44 <__assert_fail@plt+0x1f90>
   12f34:	cmp	r7, fp
   12f38:	movhi	r2, #92	; 0x5c
   12f3c:	strbhi	r2, [r0, fp]
   12f40:	add	fp, fp, #1
   12f44:	add	r8, r6, #1
   12f48:	cmp	r1, r8
   12f4c:	bls	13054 <__assert_fail@plt+0x20a0>
   12f50:	eor	r2, r5, #1
   12f54:	and	r2, r2, lr
   12f58:	ands	r2, r2, #255	; 0xff
   12f5c:	beq	13070 <__assert_fail@plt+0x20bc>
   12f60:	cmp	r7, fp
   12f64:	movhi	r2, #39	; 0x27
   12f68:	strbhi	r2, [r0, fp]
   12f6c:	add	r2, fp, #1
   12f70:	cmp	r7, r2
   12f74:	movhi	lr, #39	; 0x27
   12f78:	strbhi	lr, [r0, r2]
   12f7c:	add	fp, fp, #2
   12f80:	mov	r6, r8
   12f84:	mov	r2, r3
   12f88:	mov	lr, r3
   12f8c:	cmp	r7, fp
   12f90:	strbhi	r4, [r0, fp]
   12f94:	add	fp, fp, #1
   12f98:	ldrb	r4, [ip, #1]!
   12f9c:	cmp	r3, #0
   12fa0:	beq	12f2c <__assert_fail@plt+0x1f78>
   12fa4:	cmp	r9, #0
   12fa8:	bne	132ac <__assert_fail@plt+0x22f8>
   12fac:	eor	r5, lr, #1
   12fb0:	cmp	sl, #2
   12fb4:	movne	r5, #0
   12fb8:	andeq	r5, r5, #1
   12fbc:	cmp	r5, #0
   12fc0:	beq	12ff8 <__assert_fail@plt+0x2044>
   12fc4:	cmp	r7, fp
   12fc8:	movhi	lr, #39	; 0x27
   12fcc:	strbhi	lr, [r0, fp]
   12fd0:	add	lr, fp, #1
   12fd4:	cmp	r7, lr
   12fd8:	movhi	r8, #36	; 0x24
   12fdc:	strbhi	r8, [r0, lr]
   12fe0:	add	lr, fp, #2
   12fe4:	cmp	r7, lr
   12fe8:	movhi	r8, #39	; 0x27
   12fec:	strbhi	r8, [r0, lr]
   12ff0:	add	fp, fp, #3
   12ff4:	mov	lr, r5
   12ff8:	cmp	r7, fp
   12ffc:	movhi	r5, #92	; 0x5c
   13000:	strbhi	r5, [r0, fp]
   13004:	add	r5, fp, #1
   13008:	cmp	r7, r5
   1300c:	lsrhi	r8, r4, #6
   13010:	addhi	r8, r8, #48	; 0x30
   13014:	strbhi	r8, [r0, r5]
   13018:	add	r8, fp, #2
   1301c:	cmp	r7, r8
   13020:	lsrhi	r5, r4, #3
   13024:	andhi	r5, r5, #7
   13028:	addhi	r5, r5, #48	; 0x30
   1302c:	strbhi	r5, [r0, r8]
   13030:	add	fp, fp, #3
   13034:	and	r4, r4, #7
   13038:	add	r4, r4, #48	; 0x30
   1303c:	add	r5, r6, #1
   13040:	cmp	r1, r5
   13044:	bls	13060 <__assert_fail@plt+0x20ac>
   13048:	mov	r6, r5
   1304c:	mov	r5, r3
   13050:	b	12f8c <__assert_fail@plt+0x1fd8>
   13054:	str	lr, [sp, #44]	; 0x2c
   13058:	ldr	r8, [sp, #56]	; 0x38
   1305c:	b	12930 <__assert_fail@plt+0x197c>
   13060:	str	lr, [sp, #44]	; 0x2c
   13064:	ldr	r8, [sp, #56]	; 0x38
   13068:	mov	r5, r3
   1306c:	b	12930 <__assert_fail@plt+0x197c>
   13070:	mov	r6, r8
   13074:	b	12f8c <__assert_fail@plt+0x1fd8>
   13078:	mov	r5, #0
   1307c:	b	12a4c <__assert_fail@plt+0x1a98>
   13080:	mov	r8, r5
   13084:	ldr	r5, [sp, #48]	; 0x30
   13088:	mov	r4, #48	; 0x30
   1308c:	b	12a4c <__assert_fail@plt+0x1a98>
   13090:	ldr	r8, [sp, #32]
   13094:	mov	r4, #48	; 0x30
   13098:	b	12a4c <__assert_fail@plt+0x1a98>
   1309c:	ldr	r8, [sp, #32]
   130a0:	mov	r4, #48	; 0x30
   130a4:	b	12a4c <__assert_fail@plt+0x1a98>
   130a8:	mov	r8, #0
   130ac:	mov	r5, r8
   130b0:	b	12a4c <__assert_fail@plt+0x1a98>
   130b4:	mov	r8, #0
   130b8:	mov	r5, r8
   130bc:	b	12a4c <__assert_fail@plt+0x1a98>
   130c0:	mov	r8, #0
   130c4:	mov	r5, r8
   130c8:	b	12a4c <__assert_fail@plt+0x1a98>
   130cc:	mov	r8, #0
   130d0:	mov	r5, r8
   130d4:	b	12a4c <__assert_fail@plt+0x1a98>
   130d8:	ldr	r3, [sp, #52]	; 0x34
   130dc:	ldrb	r8, [r3, r6]
   130e0:	adds	r8, r8, #0
   130e4:	movne	r8, #1
   130e8:	b	12b5c <__assert_fail@plt+0x1ba8>
   130ec:	cmp	sl, #2
   130f0:	movne	r3, #0
   130f4:	moveq	r3, #1
   130f8:	ldr	r1, [sp, #32]
   130fc:	mov	r2, r1
   13100:	and	r2, r2, r3
   13104:	cmp	fp, #0
   13108:	movne	r2, #0
   1310c:	andeq	r2, r2, #1
   13110:	cmp	r2, #0
   13114:	bne	132c4 <__assert_fail@plt+0x2310>
   13118:	eor	r2, r1, #1
   1311c:	and	r3, r3, r2
   13120:	ldr	r1, [sp, #80]	; 0x50
   13124:	tst	r1, r3
   13128:	beq	131a0 <__assert_fail@plt+0x21ec>
   1312c:	ldr	r3, [sp, #40]	; 0x28
   13130:	cmp	r3, #0
   13134:	bne	1315c <__assert_fail@plt+0x21a8>
   13138:	ldr	r1, [sp, #76]	; 0x4c
   1313c:	clz	r3, r7
   13140:	lsr	r3, r3, #5
   13144:	cmp	r1, #0
   13148:	moveq	r3, #0
   1314c:	cmp	r3, #0
   13150:	beq	131a0 <__assert_fail@plt+0x21ec>
   13154:	ldr	r7, [sp, #76]	; 0x4c
   13158:	b	121f0 <__assert_fail@plt+0x123c>
   1315c:	ldr	r3, [sp, #168]	; 0xa8
   13160:	str	r3, [sp, #16]
   13164:	ldr	r3, [sp, #164]	; 0xa4
   13168:	str	r3, [sp, #12]
   1316c:	ldr	r3, [sp, #160]	; 0xa0
   13170:	str	r3, [sp, #8]
   13174:	ldr	r3, [sp, #156]	; 0x9c
   13178:	str	r3, [sp, #4]
   1317c:	mov	r3, #5
   13180:	str	r3, [sp]
   13184:	ldr	r3, [sp, #28]
   13188:	ldr	r2, [sp, #52]	; 0x34
   1318c:	ldr	r1, [sp, #76]	; 0x4c
   13190:	ldr	r0, [sp, #36]	; 0x24
   13194:	bl	12190 <__assert_fail@plt+0x11dc>
   13198:	mov	fp, r0
   1319c:	b	132a0 <__assert_fail@plt+0x22ec>
   131a0:	mov	sl, r7
   131a4:	ldr	r3, [sp, #72]	; 0x48
   131a8:	cmp	r3, #0
   131ac:	moveq	r2, #0
   131b0:	andne	r2, r2, #1
   131b4:	cmp	r2, #0
   131b8:	beq	131e8 <__assert_fail@plt+0x2234>
   131bc:	mov	r2, r3
   131c0:	ldrb	r3, [r3]
   131c4:	cmp	r3, #0
   131c8:	beq	131e8 <__assert_fail@plt+0x2234>
   131cc:	ldr	r1, [sp, #36]	; 0x24
   131d0:	cmp	sl, fp
   131d4:	strbhi	r3, [r1, fp]
   131d8:	add	fp, fp, #1
   131dc:	ldrb	r3, [r2, #1]!
   131e0:	cmp	r3, #0
   131e4:	bne	131d0 <__assert_fail@plt+0x221c>
   131e8:	cmp	sl, fp
   131ec:	movhi	r3, #0
   131f0:	ldrhi	r2, [sp, #36]	; 0x24
   131f4:	strbhi	r3, [r2, fp]
   131f8:	b	132a0 <__assert_fail@plt+0x22ec>
   131fc:	mov	r8, sl
   13200:	mov	sl, r7
   13204:	ldr	r3, [sp, #32]
   13208:	str	r3, [sp, #48]	; 0x30
   1320c:	b	13248 <__assert_fail@plt+0x2294>
   13210:	mov	r8, sl
   13214:	mov	sl, r7
   13218:	b	13248 <__assert_fail@plt+0x2294>
   1321c:	mov	r8, sl
   13220:	mov	sl, r7
   13224:	b	13248 <__assert_fail@plt+0x2294>
   13228:	andeq	r6, r1, r8, lsl #7
   1322c:	muleq	r1, r8, r3
   13230:	andeq	r6, r1, ip, lsl #7
   13234:	mov	r8, sl
   13238:	mov	sl, r7
   1323c:	b	13248 <__assert_fail@plt+0x2294>
   13240:	mov	r8, sl
   13244:	mov	sl, r7
   13248:	ldr	r3, [sp, #48]	; 0x30
   1324c:	cmp	r8, #2
   13250:	movne	r3, #0
   13254:	andeq	r3, r3, #1
   13258:	cmp	r3, #0
   1325c:	movne	r8, #4
   13260:	ldr	r3, [sp, #168]	; 0xa8
   13264:	str	r3, [sp, #16]
   13268:	ldr	r3, [sp, #164]	; 0xa4
   1326c:	str	r3, [sp, #12]
   13270:	mov	r3, #0
   13274:	str	r3, [sp, #8]
   13278:	ldr	r3, [sp, #156]	; 0x9c
   1327c:	bic	r3, r3, #2
   13280:	str	r3, [sp, #4]
   13284:	str	r8, [sp]
   13288:	ldr	r3, [sp, #28]
   1328c:	ldr	r2, [sp, #52]	; 0x34
   13290:	mov	r1, sl
   13294:	ldr	r0, [sp, #36]	; 0x24
   13298:	bl	12190 <__assert_fail@plt+0x11dc>
   1329c:	mov	fp, r0
   132a0:	mov	r0, fp
   132a4:	add	sp, sp, #116	; 0x74
   132a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132ac:	mov	r8, sl
   132b0:	mov	sl, r7
   132b4:	b	13248 <__assert_fail@plt+0x2294>
   132b8:	mov	r8, sl
   132bc:	mov	sl, r7
   132c0:	b	13248 <__assert_fail@plt+0x2294>
   132c4:	mov	r8, sl
   132c8:	mov	sl, r7
   132cc:	b	13248 <__assert_fail@plt+0x2294>
   132d0:	mov	r8, sl
   132d4:	mov	sl, r7
   132d8:	b	13260 <__assert_fail@plt+0x22ac>
   132dc:	mov	r3, #1
   132e0:	str	r3, [sp, #32]
   132e4:	str	r3, [sp, #48]	; 0x30
   132e8:	str	r3, [sp, #60]	; 0x3c
   132ec:	ldr	r3, [pc, #-196]	; 13230 <__assert_fail@plt+0x227c>
   132f0:	str	r3, [sp, #72]	; 0x48
   132f4:	mov	fp, #0
   132f8:	mov	sl, #5
   132fc:	b	1224c <__assert_fail@plt+0x1298>
   13300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13304:	sub	sp, sp, #52	; 0x34
   13308:	mov	r5, r0
   1330c:	str	r1, [sp, #24]
   13310:	str	r2, [sp, #28]
   13314:	mov	r4, r3
   13318:	bl	10edc <__errno_location@plt>
   1331c:	str	r0, [sp, #32]
   13320:	ldr	r3, [r0]
   13324:	str	r3, [sp, #36]	; 0x24
   13328:	ldr	r3, [pc, #396]	; 134bc <__assert_fail@plt+0x2508>
   1332c:	ldr	r6, [r3]
   13330:	cmn	r5, #-2147483647	; 0x80000001
   13334:	movne	r3, #0
   13338:	moveq	r3, #1
   1333c:	orrs	r3, r3, r5, lsr #31
   13340:	bne	13480 <__assert_fail@plt+0x24cc>
   13344:	ldr	r3, [pc, #368]	; 134bc <__assert_fail@plt+0x2508>
   13348:	ldr	r2, [r3, #4]
   1334c:	cmp	r5, r2
   13350:	blt	133b8 <__assert_fail@plt+0x2404>
   13354:	str	r2, [sp, #44]	; 0x2c
   13358:	add	r3, r3, #8
   1335c:	cmp	r6, r3
   13360:	beq	13484 <__assert_fail@plt+0x24d0>
   13364:	sub	r2, r5, r2
   13368:	mov	r3, #8
   1336c:	str	r3, [sp]
   13370:	mvn	r3, #-2147483648	; 0x80000000
   13374:	add	r2, r2, #1
   13378:	add	r1, sp, #44	; 0x2c
   1337c:	mov	r0, r6
   13380:	bl	14204 <__assert_fail@plt+0x3250>
   13384:	mov	r6, r0
   13388:	ldr	r3, [pc, #300]	; 134bc <__assert_fail@plt+0x2508>
   1338c:	str	r0, [r3]
   13390:	ldr	r7, [pc, #292]	; 134bc <__assert_fail@plt+0x2508>
   13394:	ldr	r0, [r7, #4]
   13398:	ldr	r2, [sp, #44]	; 0x2c
   1339c:	sub	r2, r2, r0
   133a0:	lsl	r2, r2, #3
   133a4:	mov	r1, #0
   133a8:	add	r0, r6, r0, lsl #3
   133ac:	bl	10ef4 <memset@plt>
   133b0:	ldr	r3, [sp, #44]	; 0x2c
   133b4:	str	r3, [r7, #4]
   133b8:	add	fp, r6, r5, lsl #3
   133bc:	ldr	r8, [r6, r5, lsl #3]
   133c0:	ldr	r7, [fp, #4]
   133c4:	ldr	r9, [r4, #4]
   133c8:	orr	r9, r9, #1
   133cc:	add	sl, r4, #8
   133d0:	ldr	r3, [r4, #44]	; 0x2c
   133d4:	str	r3, [sp, #16]
   133d8:	ldr	r3, [r4, #40]	; 0x28
   133dc:	str	r3, [sp, #12]
   133e0:	str	sl, [sp, #8]
   133e4:	str	r9, [sp, #4]
   133e8:	ldr	r3, [r4]
   133ec:	str	r3, [sp]
   133f0:	ldr	r3, [sp, #28]
   133f4:	ldr	r2, [sp, #24]
   133f8:	mov	r1, r8
   133fc:	mov	r0, r7
   13400:	bl	12190 <__assert_fail@plt+0x11dc>
   13404:	cmp	r8, r0
   13408:	bhi	13468 <__assert_fail@plt+0x24b4>
   1340c:	add	r8, r0, #1
   13410:	str	r8, [r6, r5, lsl #3]
   13414:	ldr	r3, [pc, #164]	; 134c0 <__assert_fail@plt+0x250c>
   13418:	cmp	r7, r3
   1341c:	beq	13428 <__assert_fail@plt+0x2474>
   13420:	mov	r0, r7
   13424:	bl	11f18 <__assert_fail@plt+0xf64>
   13428:	mov	r0, r8
   1342c:	bl	14080 <__assert_fail@plt+0x30cc>
   13430:	mov	r7, r0
   13434:	str	r0, [fp, #4]
   13438:	ldr	r3, [r4, #44]	; 0x2c
   1343c:	str	r3, [sp, #16]
   13440:	ldr	r3, [r4, #40]	; 0x28
   13444:	str	r3, [sp, #12]
   13448:	str	sl, [sp, #8]
   1344c:	str	r9, [sp, #4]
   13450:	ldr	r3, [r4]
   13454:	str	r3, [sp]
   13458:	ldr	r3, [sp, #28]
   1345c:	ldr	r2, [sp, #24]
   13460:	mov	r1, r8
   13464:	bl	12190 <__assert_fail@plt+0x11dc>
   13468:	ldr	r3, [sp, #32]
   1346c:	ldr	r2, [sp, #36]	; 0x24
   13470:	str	r2, [r3]
   13474:	mov	r0, r7
   13478:	add	sp, sp, #52	; 0x34
   1347c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13480:	bl	10fa8 <abort@plt>
   13484:	sub	r2, r5, r2
   13488:	mov	r3, #8
   1348c:	str	r3, [sp]
   13490:	mvn	r3, #-2147483648	; 0x80000000
   13494:	add	r2, r2, #1
   13498:	add	r1, sp, #44	; 0x2c
   1349c:	mov	r0, #0
   134a0:	bl	14204 <__assert_fail@plt+0x3250>
   134a4:	mov	r6, r0
   134a8:	ldr	r3, [pc, #12]	; 134bc <__assert_fail@plt+0x2508>
   134ac:	str	r0, [r3], #8
   134b0:	ldm	r3, {r0, r1}
   134b4:	stm	r6, {r0, r1}
   134b8:	b	13390 <__assert_fail@plt+0x23dc>
   134bc:	andeq	r7, r2, r0, lsl #2
   134c0:	muleq	r2, r4, r1
   134c4:	push	{r4, r5, r6, lr}
   134c8:	mov	r4, r0
   134cc:	bl	10edc <__errno_location@plt>
   134d0:	mov	r5, r0
   134d4:	ldr	r6, [r0]
   134d8:	cmp	r4, #0
   134dc:	ldr	r3, [pc, #20]	; 134f8 <__assert_fail@plt+0x2544>
   134e0:	moveq	r4, r3
   134e4:	mov	r1, #48	; 0x30
   134e8:	mov	r0, r4
   134ec:	bl	1456c <__assert_fail@plt+0x35b8>
   134f0:	str	r6, [r5]
   134f4:	pop	{r4, r5, r6, pc}
   134f8:	muleq	r2, r4, r2
   134fc:	subs	r3, r0, #0
   13500:	ldr	r2, [pc, #8]	; 13510 <__assert_fail@plt+0x255c>
   13504:	moveq	r3, r2
   13508:	ldr	r0, [r3]
   1350c:	bx	lr
   13510:	muleq	r2, r4, r2
   13514:	subs	r3, r0, #0
   13518:	ldr	r2, [pc, #8]	; 13528 <__assert_fail@plt+0x2574>
   1351c:	moveq	r3, r2
   13520:	str	r1, [r3]
   13524:	bx	lr
   13528:	muleq	r2, r4, r2
   1352c:	push	{lr}		; (str lr, [sp, #-4]!)
   13530:	subs	r3, r0, #0
   13534:	ldr	r0, [pc, #44]	; 13568 <__assert_fail@plt+0x25b4>
   13538:	moveq	r3, r0
   1353c:	add	r3, r3, #8
   13540:	lsr	lr, r1, #5
   13544:	and	r1, r1, #31
   13548:	ldr	ip, [r3, lr, lsl #2]
   1354c:	lsr	r0, ip, r1
   13550:	eor	r2, r2, r0
   13554:	and	r2, r2, #1
   13558:	eor	r1, ip, r2, lsl r1
   1355c:	str	r1, [r3, lr, lsl #2]
   13560:	and	r0, r0, #1
   13564:	pop	{pc}		; (ldr pc, [sp], #4)
   13568:	muleq	r2, r4, r2
   1356c:	subs	r3, r0, #0
   13570:	ldr	r2, [pc, #12]	; 13584 <__assert_fail@plt+0x25d0>
   13574:	moveq	r3, r2
   13578:	ldr	r0, [r3, #4]
   1357c:	str	r1, [r3, #4]
   13580:	bx	lr
   13584:	muleq	r2, r4, r2
   13588:	subs	r3, r0, #0
   1358c:	ldr	r0, [pc, #40]	; 135bc <__assert_fail@plt+0x2608>
   13590:	moveq	r3, r0
   13594:	mov	r0, #10
   13598:	str	r0, [r3]
   1359c:	cmp	r2, #0
   135a0:	cmpne	r1, #0
   135a4:	beq	135b4 <__assert_fail@plt+0x2600>
   135a8:	str	r1, [r3, #40]	; 0x28
   135ac:	str	r2, [r3, #44]	; 0x2c
   135b0:	bx	lr
   135b4:	push	{r4, lr}
   135b8:	bl	10fa8 <abort@plt>
   135bc:	muleq	r2, r4, r2
   135c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135c4:	sub	sp, sp, #24
   135c8:	mov	r7, r0
   135cc:	mov	r8, r1
   135d0:	mov	r9, r2
   135d4:	mov	sl, r3
   135d8:	ldr	r4, [sp, #56]	; 0x38
   135dc:	cmp	r4, #0
   135e0:	ldr	r3, [pc, #84]	; 1363c <__assert_fail@plt+0x2688>
   135e4:	moveq	r4, r3
   135e8:	bl	10edc <__errno_location@plt>
   135ec:	mov	r5, r0
   135f0:	ldr	r6, [r0]
   135f4:	ldr	r3, [r4, #44]	; 0x2c
   135f8:	str	r3, [sp, #16]
   135fc:	ldr	r3, [r4, #40]	; 0x28
   13600:	str	r3, [sp, #12]
   13604:	add	r3, r4, #8
   13608:	str	r3, [sp, #8]
   1360c:	ldr	r3, [r4, #4]
   13610:	str	r3, [sp, #4]
   13614:	ldr	r3, [r4]
   13618:	str	r3, [sp]
   1361c:	mov	r3, sl
   13620:	mov	r2, r9
   13624:	mov	r1, r8
   13628:	mov	r0, r7
   1362c:	bl	12190 <__assert_fail@plt+0x11dc>
   13630:	str	r6, [r5]
   13634:	add	sp, sp, #24
   13638:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1363c:	muleq	r2, r4, r2
   13640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13644:	sub	sp, sp, #44	; 0x2c
   13648:	str	r0, [sp, #28]
   1364c:	str	r1, [sp, #32]
   13650:	mov	r6, r2
   13654:	subs	r4, r3, #0
   13658:	ldr	r3, [pc, #172]	; 1370c <__assert_fail@plt+0x2758>
   1365c:	moveq	r4, r3
   13660:	bl	10edc <__errno_location@plt>
   13664:	mov	r7, r0
   13668:	ldr	fp, [r0]
   1366c:	ldr	r5, [r4, #4]
   13670:	cmp	r6, #0
   13674:	orreq	r5, r5, #1
   13678:	add	r9, r4, #8
   1367c:	ldr	r3, [r4, #44]	; 0x2c
   13680:	str	r3, [sp, #16]
   13684:	ldr	r3, [r4, #40]	; 0x28
   13688:	str	r3, [sp, #12]
   1368c:	str	r9, [sp, #8]
   13690:	str	r5, [sp, #4]
   13694:	ldr	r3, [r4]
   13698:	str	r3, [sp]
   1369c:	ldr	r3, [sp, #32]
   136a0:	ldr	r2, [sp, #28]
   136a4:	mov	r1, #0
   136a8:	mov	r0, r1
   136ac:	bl	12190 <__assert_fail@plt+0x11dc>
   136b0:	mov	sl, r0
   136b4:	add	r8, r0, #1
   136b8:	mov	r0, r8
   136bc:	bl	14080 <__assert_fail@plt+0x30cc>
   136c0:	str	r0, [sp, #36]	; 0x24
   136c4:	ldr	r3, [r4, #44]	; 0x2c
   136c8:	str	r3, [sp, #16]
   136cc:	ldr	r3, [r4, #40]	; 0x28
   136d0:	str	r3, [sp, #12]
   136d4:	str	r9, [sp, #8]
   136d8:	str	r5, [sp, #4]
   136dc:	ldr	r3, [r4]
   136e0:	str	r3, [sp]
   136e4:	ldr	r3, [sp, #32]
   136e8:	ldr	r2, [sp, #28]
   136ec:	mov	r1, r8
   136f0:	bl	12190 <__assert_fail@plt+0x11dc>
   136f4:	str	fp, [r7]
   136f8:	cmp	r6, #0
   136fc:	strne	sl, [r6]
   13700:	ldr	r0, [sp, #36]	; 0x24
   13704:	add	sp, sp, #44	; 0x2c
   13708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1370c:	muleq	r2, r4, r2
   13710:	push	{r4, lr}
   13714:	mov	r3, r2
   13718:	mov	r2, #0
   1371c:	bl	13640 <__assert_fail@plt+0x268c>
   13720:	pop	{r4, pc}
   13724:	push	{r4, r5, r6, r7, r8, lr}
   13728:	ldr	r3, [pc, #140]	; 137bc <__assert_fail@plt+0x2808>
   1372c:	ldr	r7, [r3]
   13730:	ldr	r3, [r3, #4]
   13734:	cmp	r3, #1
   13738:	ble	13764 <__assert_fail@plt+0x27b0>
   1373c:	mov	r5, r7
   13740:	mov	r4, #1
   13744:	ldr	r6, [pc, #112]	; 137bc <__assert_fail@plt+0x2808>
   13748:	ldr	r0, [r5, #12]
   1374c:	bl	11f18 <__assert_fail@plt+0xf64>
   13750:	add	r4, r4, #1
   13754:	add	r5, r5, #8
   13758:	ldr	r3, [r6, #4]
   1375c:	cmp	r3, r4
   13760:	bgt	13748 <__assert_fail@plt+0x2794>
   13764:	ldr	r0, [r7, #4]
   13768:	ldr	r3, [pc, #80]	; 137c0 <__assert_fail@plt+0x280c>
   1376c:	cmp	r0, r3
   13770:	beq	1378c <__assert_fail@plt+0x27d8>
   13774:	bl	11f18 <__assert_fail@plt+0xf64>
   13778:	ldr	r3, [pc, #60]	; 137bc <__assert_fail@plt+0x2808>
   1377c:	mov	r2, #256	; 0x100
   13780:	str	r2, [r3, #8]
   13784:	ldr	r2, [pc, #52]	; 137c0 <__assert_fail@plt+0x280c>
   13788:	str	r2, [r3, #12]
   1378c:	ldr	r3, [pc, #48]	; 137c4 <__assert_fail@plt+0x2810>
   13790:	cmp	r7, r3
   13794:	beq	137ac <__assert_fail@plt+0x27f8>
   13798:	mov	r0, r7
   1379c:	bl	11f18 <__assert_fail@plt+0xf64>
   137a0:	ldr	r3, [pc, #20]	; 137bc <__assert_fail@plt+0x2808>
   137a4:	add	r2, r3, #8
   137a8:	str	r2, [r3]
   137ac:	mov	r2, #1
   137b0:	ldr	r3, [pc, #4]	; 137bc <__assert_fail@plt+0x2808>
   137b4:	str	r2, [r3, #4]
   137b8:	pop	{r4, r5, r6, r7, r8, pc}
   137bc:	andeq	r7, r2, r0, lsl #2
   137c0:	muleq	r2, r4, r1
   137c4:	andeq	r7, r2, r8, lsl #2
   137c8:	push	{r4, lr}
   137cc:	ldr	r3, [pc, #8]	; 137dc <__assert_fail@plt+0x2828>
   137d0:	mvn	r2, #0
   137d4:	bl	13300 <__assert_fail@plt+0x234c>
   137d8:	pop	{r4, pc}
   137dc:	muleq	r2, r4, r2
   137e0:	push	{r4, lr}
   137e4:	ldr	r3, [pc, #4]	; 137f0 <__assert_fail@plt+0x283c>
   137e8:	bl	13300 <__assert_fail@plt+0x234c>
   137ec:	pop	{r4, pc}
   137f0:	muleq	r2, r4, r2
   137f4:	push	{r4, lr}
   137f8:	mov	r1, r0
   137fc:	mov	r0, #0
   13800:	bl	137c8 <__assert_fail@plt+0x2814>
   13804:	pop	{r4, pc}
   13808:	push	{r4, lr}
   1380c:	mov	r2, r1
   13810:	mov	r1, r0
   13814:	mov	r0, #0
   13818:	bl	137e0 <__assert_fail@plt+0x282c>
   1381c:	pop	{r4, pc}
   13820:	push	{r4, r5, lr}
   13824:	sub	sp, sp, #52	; 0x34
   13828:	mov	r4, r0
   1382c:	mov	r5, r2
   13830:	mov	r0, sp
   13834:	bl	12028 <__assert_fail@plt+0x1074>
   13838:	mov	r3, sp
   1383c:	mvn	r2, #0
   13840:	mov	r1, r5
   13844:	mov	r0, r4
   13848:	bl	13300 <__assert_fail@plt+0x234c>
   1384c:	add	sp, sp, #52	; 0x34
   13850:	pop	{r4, r5, pc}
   13854:	push	{r4, r5, r6, lr}
   13858:	sub	sp, sp, #48	; 0x30
   1385c:	mov	r4, r0
   13860:	mov	r5, r2
   13864:	mov	r6, r3
   13868:	mov	r0, sp
   1386c:	bl	12028 <__assert_fail@plt+0x1074>
   13870:	mov	r3, sp
   13874:	mov	r2, r6
   13878:	mov	r1, r5
   1387c:	mov	r0, r4
   13880:	bl	13300 <__assert_fail@plt+0x234c>
   13884:	add	sp, sp, #48	; 0x30
   13888:	pop	{r4, r5, r6, pc}
   1388c:	push	{r4, lr}
   13890:	mov	r2, r1
   13894:	mov	r1, r0
   13898:	mov	r0, #0
   1389c:	bl	13820 <__assert_fail@plt+0x286c>
   138a0:	pop	{r4, pc}
   138a4:	push	{r4, lr}
   138a8:	mov	r3, r2
   138ac:	mov	r2, r1
   138b0:	mov	r1, r0
   138b4:	mov	r0, #0
   138b8:	bl	13854 <__assert_fail@plt+0x28a0>
   138bc:	pop	{r4, pc}
   138c0:	push	{r4, r5, r6, lr}
   138c4:	sub	sp, sp, #48	; 0x30
   138c8:	mov	r4, r0
   138cc:	mov	r5, r1
   138d0:	mov	r6, r2
   138d4:	mov	ip, sp
   138d8:	ldr	lr, [pc, #64]	; 13920 <__assert_fail@plt+0x296c>
   138dc:	ldm	lr!, {r0, r1, r2, r3}
   138e0:	stmia	ip!, {r0, r1, r2, r3}
   138e4:	ldm	lr!, {r0, r1, r2, r3}
   138e8:	stmia	ip!, {r0, r1, r2, r3}
   138ec:	ldm	lr, {r0, r1, r2, r3}
   138f0:	stm	ip, {r0, r1, r2, r3}
   138f4:	mov	r2, #1
   138f8:	mov	r1, r6
   138fc:	mov	r0, sp
   13900:	bl	1352c <__assert_fail@plt+0x2578>
   13904:	mov	r3, sp
   13908:	mov	r2, r5
   1390c:	mov	r1, r4
   13910:	mov	r0, #0
   13914:	bl	13300 <__assert_fail@plt+0x234c>
   13918:	add	sp, sp, #48	; 0x30
   1391c:	pop	{r4, r5, r6, pc}
   13920:	muleq	r2, r4, r2
   13924:	push	{r4, lr}
   13928:	mov	r2, r1
   1392c:	mvn	r1, #0
   13930:	bl	138c0 <__assert_fail@plt+0x290c>
   13934:	pop	{r4, pc}
   13938:	push	{r4, lr}
   1393c:	mov	r1, #58	; 0x3a
   13940:	bl	13924 <__assert_fail@plt+0x2970>
   13944:	pop	{r4, pc}
   13948:	push	{r4, lr}
   1394c:	mov	r2, #58	; 0x3a
   13950:	bl	138c0 <__assert_fail@plt+0x290c>
   13954:	pop	{r4, pc}
   13958:	push	{r4, r5, lr}
   1395c:	sub	sp, sp, #100	; 0x64
   13960:	mov	r4, r0
   13964:	mov	r5, r2
   13968:	mov	r0, sp
   1396c:	bl	12028 <__assert_fail@plt+0x1074>
   13970:	add	lr, sp, #48	; 0x30
   13974:	mov	ip, sp
   13978:	ldm	ip!, {r0, r1, r2, r3}
   1397c:	stmia	lr!, {r0, r1, r2, r3}
   13980:	ldm	ip!, {r0, r1, r2, r3}
   13984:	stmia	lr!, {r0, r1, r2, r3}
   13988:	ldm	ip, {r0, r1, r2, r3}
   1398c:	stm	lr, {r0, r1, r2, r3}
   13990:	mov	r2, #1
   13994:	mov	r1, #58	; 0x3a
   13998:	add	r0, sp, #48	; 0x30
   1399c:	bl	1352c <__assert_fail@plt+0x2578>
   139a0:	add	r3, sp, #48	; 0x30
   139a4:	mvn	r2, #0
   139a8:	mov	r1, r5
   139ac:	mov	r0, r4
   139b0:	bl	13300 <__assert_fail@plt+0x234c>
   139b4:	add	sp, sp, #100	; 0x64
   139b8:	pop	{r4, r5, pc}
   139bc:	push	{r4, r5, r6, r7, lr}
   139c0:	sub	sp, sp, #52	; 0x34
   139c4:	mov	r4, r0
   139c8:	mov	r6, r1
   139cc:	mov	r7, r2
   139d0:	mov	r5, r3
   139d4:	mov	ip, sp
   139d8:	ldr	lr, [pc, #64]	; 13a20 <__assert_fail@plt+0x2a6c>
   139dc:	ldm	lr!, {r0, r1, r2, r3}
   139e0:	stmia	ip!, {r0, r1, r2, r3}
   139e4:	ldm	lr!, {r0, r1, r2, r3}
   139e8:	stmia	ip!, {r0, r1, r2, r3}
   139ec:	ldm	lr, {r0, r1, r2, r3}
   139f0:	stm	ip, {r0, r1, r2, r3}
   139f4:	mov	r2, r7
   139f8:	mov	r1, r6
   139fc:	mov	r0, sp
   13a00:	bl	13588 <__assert_fail@plt+0x25d4>
   13a04:	mov	r3, sp
   13a08:	ldr	r2, [sp, #72]	; 0x48
   13a0c:	mov	r1, r5
   13a10:	mov	r0, r4
   13a14:	bl	13300 <__assert_fail@plt+0x234c>
   13a18:	add	sp, sp, #52	; 0x34
   13a1c:	pop	{r4, r5, r6, r7, pc}
   13a20:	muleq	r2, r4, r2
   13a24:	push	{lr}		; (str lr, [sp, #-4]!)
   13a28:	sub	sp, sp, #12
   13a2c:	mvn	ip, #0
   13a30:	str	ip, [sp]
   13a34:	bl	139bc <__assert_fail@plt+0x2a08>
   13a38:	add	sp, sp, #12
   13a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a40:	push	{r4, lr}
   13a44:	mov	r3, r2
   13a48:	mov	r2, r1
   13a4c:	mov	r1, r0
   13a50:	mov	r0, #0
   13a54:	bl	13a24 <__assert_fail@plt+0x2a70>
   13a58:	pop	{r4, pc}
   13a5c:	push	{lr}		; (str lr, [sp, #-4]!)
   13a60:	sub	sp, sp, #12
   13a64:	str	r3, [sp]
   13a68:	mov	r3, r2
   13a6c:	mov	r2, r1
   13a70:	mov	r1, r0
   13a74:	mov	r0, #0
   13a78:	bl	139bc <__assert_fail@plt+0x2a08>
   13a7c:	add	sp, sp, #12
   13a80:	pop	{pc}		; (ldr pc, [sp], #4)
   13a84:	push	{r4, lr}
   13a88:	ldr	r3, [pc, #4]	; 13a94 <__assert_fail@plt+0x2ae0>
   13a8c:	bl	13300 <__assert_fail@plt+0x234c>
   13a90:	pop	{r4, pc}
   13a94:	andeq	r7, r2, r0, lsl r1
   13a98:	push	{r4, lr}
   13a9c:	mov	r2, r1
   13aa0:	mov	r1, r0
   13aa4:	mov	r0, #0
   13aa8:	bl	13a84 <__assert_fail@plt+0x2ad0>
   13aac:	pop	{r4, pc}
   13ab0:	push	{r4, lr}
   13ab4:	mvn	r2, #0
   13ab8:	bl	13a84 <__assert_fail@plt+0x2ad0>
   13abc:	pop	{r4, pc}
   13ac0:	push	{r4, lr}
   13ac4:	mov	r1, r0
   13ac8:	mov	r0, #0
   13acc:	bl	13ab0 <__assert_fail@plt+0x2afc>
   13ad0:	pop	{r4, pc}
   13ad4:	push	{r4, r5, r6, lr}
   13ad8:	sub	sp, sp, #32
   13adc:	mov	r4, r0
   13ae0:	ldr	r5, [sp, #48]	; 0x30
   13ae4:	ldr	r6, [sp, #52]	; 0x34
   13ae8:	cmp	r1, #0
   13aec:	beq	13ba4 <__assert_fail@plt+0x2bf0>
   13af0:	str	r3, [sp, #4]
   13af4:	str	r2, [sp]
   13af8:	mov	r3, r1
   13afc:	ldr	r2, [pc, #940]	; 13eb0 <__assert_fail@plt+0x2efc>
   13b00:	mov	r1, #1
   13b04:	bl	10f18 <__fprintf_chk@plt>
   13b08:	mov	r2, #5
   13b0c:	ldr	r1, [pc, #928]	; 13eb4 <__assert_fail@plt+0x2f00>
   13b10:	mov	r0, #0
   13b14:	bl	10dbc <dcgettext@plt>
   13b18:	ldr	r3, [pc, #920]	; 13eb8 <__assert_fail@plt+0x2f04>
   13b1c:	str	r3, [sp]
   13b20:	mov	r3, r0
   13b24:	ldr	r2, [pc, #912]	; 13ebc <__assert_fail@plt+0x2f08>
   13b28:	mov	r1, #1
   13b2c:	mov	r0, r4
   13b30:	bl	10f18 <__fprintf_chk@plt>
   13b34:	mov	r1, r4
   13b38:	mov	r0, #10
   13b3c:	bl	10db0 <fputc_unlocked@plt>
   13b40:	mov	r2, #5
   13b44:	ldr	r1, [pc, #884]	; 13ec0 <__assert_fail@plt+0x2f0c>
   13b48:	mov	r0, #0
   13b4c:	bl	10dbc <dcgettext@plt>
   13b50:	ldr	r3, [pc, #876]	; 13ec4 <__assert_fail@plt+0x2f10>
   13b54:	mov	r2, r0
   13b58:	mov	r1, #1
   13b5c:	mov	r0, r4
   13b60:	bl	10f18 <__fprintf_chk@plt>
   13b64:	mov	r1, r4
   13b68:	mov	r0, #10
   13b6c:	bl	10db0 <fputc_unlocked@plt>
   13b70:	cmp	r6, #9
   13b74:	ldrls	pc, [pc, r6, lsl #2]
   13b78:	b	13e48 <__assert_fail@plt+0x2e94>
   13b7c:	andeq	r3, r1, r0, ror #23
   13b80:			; <UNDEFINED> instruction: 0x00013bbc
   13b84:	andeq	r3, r1, r8, ror #23
   13b88:	andeq	r3, r1, r8, lsl ip
   13b8c:	andeq	r3, r1, r0, asr ip
   13b90:	muleq	r1, r0, ip
   13b94:	ldrdeq	r3, [r1], -r8
   13b98:	andeq	r3, r1, r8, lsr #26
   13b9c:	andeq	r3, r1, r0, lsl #27
   13ba0:	andeq	r3, r1, r0, ror #27
   13ba4:	str	r3, [sp]
   13ba8:	mov	r3, r2
   13bac:	ldr	r2, [pc, #788]	; 13ec8 <__assert_fail@plt+0x2f14>
   13bb0:	mov	r1, #1
   13bb4:	bl	10f18 <__fprintf_chk@plt>
   13bb8:	b	13b08 <__assert_fail@plt+0x2b54>
   13bbc:	mov	r2, #5
   13bc0:	ldr	r1, [pc, #772]	; 13ecc <__assert_fail@plt+0x2f18>
   13bc4:	mov	r0, #0
   13bc8:	bl	10dbc <dcgettext@plt>
   13bcc:	ldr	r3, [r5]
   13bd0:	mov	r2, r0
   13bd4:	mov	r1, #1
   13bd8:	mov	r0, r4
   13bdc:	bl	10f18 <__fprintf_chk@plt>
   13be0:	add	sp, sp, #32
   13be4:	pop	{r4, r5, r6, pc}
   13be8:	mov	r2, #5
   13bec:	ldr	r1, [pc, #732]	; 13ed0 <__assert_fail@plt+0x2f1c>
   13bf0:	mov	r0, #0
   13bf4:	bl	10dbc <dcgettext@plt>
   13bf8:	ldr	r3, [r5]
   13bfc:	ldr	r2, [r5, #4]
   13c00:	str	r2, [sp]
   13c04:	mov	r2, r0
   13c08:	mov	r1, #1
   13c0c:	mov	r0, r4
   13c10:	bl	10f18 <__fprintf_chk@plt>
   13c14:	b	13be0 <__assert_fail@plt+0x2c2c>
   13c18:	mov	r2, #5
   13c1c:	ldr	r1, [pc, #688]	; 13ed4 <__assert_fail@plt+0x2f20>
   13c20:	mov	r0, #0
   13c24:	bl	10dbc <dcgettext@plt>
   13c28:	ldr	r3, [r5]
   13c2c:	ldr	r2, [r5, #8]
   13c30:	str	r2, [sp, #4]
   13c34:	ldr	r2, [r5, #4]
   13c38:	str	r2, [sp]
   13c3c:	mov	r2, r0
   13c40:	mov	r1, #1
   13c44:	mov	r0, r4
   13c48:	bl	10f18 <__fprintf_chk@plt>
   13c4c:	b	13be0 <__assert_fail@plt+0x2c2c>
   13c50:	mov	r2, #5
   13c54:	ldr	r1, [pc, #636]	; 13ed8 <__assert_fail@plt+0x2f24>
   13c58:	mov	r0, #0
   13c5c:	bl	10dbc <dcgettext@plt>
   13c60:	ldr	r3, [r5]
   13c64:	ldr	r2, [r5, #12]
   13c68:	str	r2, [sp, #8]
   13c6c:	ldr	r2, [r5, #8]
   13c70:	str	r2, [sp, #4]
   13c74:	ldr	r2, [r5, #4]
   13c78:	str	r2, [sp]
   13c7c:	mov	r2, r0
   13c80:	mov	r1, #1
   13c84:	mov	r0, r4
   13c88:	bl	10f18 <__fprintf_chk@plt>
   13c8c:	b	13be0 <__assert_fail@plt+0x2c2c>
   13c90:	mov	r2, #5
   13c94:	ldr	r1, [pc, #576]	; 13edc <__assert_fail@plt+0x2f28>
   13c98:	mov	r0, #0
   13c9c:	bl	10dbc <dcgettext@plt>
   13ca0:	ldr	r3, [r5]
   13ca4:	ldr	r2, [r5, #16]
   13ca8:	str	r2, [sp, #12]
   13cac:	ldr	r2, [r5, #12]
   13cb0:	str	r2, [sp, #8]
   13cb4:	ldr	r2, [r5, #8]
   13cb8:	str	r2, [sp, #4]
   13cbc:	ldr	r2, [r5, #4]
   13cc0:	str	r2, [sp]
   13cc4:	mov	r2, r0
   13cc8:	mov	r1, #1
   13ccc:	mov	r0, r4
   13cd0:	bl	10f18 <__fprintf_chk@plt>
   13cd4:	b	13be0 <__assert_fail@plt+0x2c2c>
   13cd8:	mov	r2, #5
   13cdc:	ldr	r1, [pc, #508]	; 13ee0 <__assert_fail@plt+0x2f2c>
   13ce0:	mov	r0, #0
   13ce4:	bl	10dbc <dcgettext@plt>
   13ce8:	ldr	r3, [r5]
   13cec:	ldr	r2, [r5, #20]
   13cf0:	str	r2, [sp, #16]
   13cf4:	ldr	r2, [r5, #16]
   13cf8:	str	r2, [sp, #12]
   13cfc:	ldr	r2, [r5, #12]
   13d00:	str	r2, [sp, #8]
   13d04:	ldr	r2, [r5, #8]
   13d08:	str	r2, [sp, #4]
   13d0c:	ldr	r2, [r5, #4]
   13d10:	str	r2, [sp]
   13d14:	mov	r2, r0
   13d18:	mov	r1, #1
   13d1c:	mov	r0, r4
   13d20:	bl	10f18 <__fprintf_chk@plt>
   13d24:	b	13be0 <__assert_fail@plt+0x2c2c>
   13d28:	mov	r2, #5
   13d2c:	ldr	r1, [pc, #432]	; 13ee4 <__assert_fail@plt+0x2f30>
   13d30:	mov	r0, #0
   13d34:	bl	10dbc <dcgettext@plt>
   13d38:	ldr	r3, [r5]
   13d3c:	ldr	r2, [r5, #24]
   13d40:	str	r2, [sp, #20]
   13d44:	ldr	r2, [r5, #20]
   13d48:	str	r2, [sp, #16]
   13d4c:	ldr	r2, [r5, #16]
   13d50:	str	r2, [sp, #12]
   13d54:	ldr	r2, [r5, #12]
   13d58:	str	r2, [sp, #8]
   13d5c:	ldr	r2, [r5, #8]
   13d60:	str	r2, [sp, #4]
   13d64:	ldr	r2, [r5, #4]
   13d68:	str	r2, [sp]
   13d6c:	mov	r2, r0
   13d70:	mov	r1, #1
   13d74:	mov	r0, r4
   13d78:	bl	10f18 <__fprintf_chk@plt>
   13d7c:	b	13be0 <__assert_fail@plt+0x2c2c>
   13d80:	mov	r2, #5
   13d84:	ldr	r1, [pc, #348]	; 13ee8 <__assert_fail@plt+0x2f34>
   13d88:	mov	r0, #0
   13d8c:	bl	10dbc <dcgettext@plt>
   13d90:	ldr	r3, [r5]
   13d94:	ldr	r2, [r5, #28]
   13d98:	str	r2, [sp, #24]
   13d9c:	ldr	r2, [r5, #24]
   13da0:	str	r2, [sp, #20]
   13da4:	ldr	r2, [r5, #20]
   13da8:	str	r2, [sp, #16]
   13dac:	ldr	r2, [r5, #16]
   13db0:	str	r2, [sp, #12]
   13db4:	ldr	r2, [r5, #12]
   13db8:	str	r2, [sp, #8]
   13dbc:	ldr	r2, [r5, #8]
   13dc0:	str	r2, [sp, #4]
   13dc4:	ldr	r2, [r5, #4]
   13dc8:	str	r2, [sp]
   13dcc:	mov	r2, r0
   13dd0:	mov	r1, #1
   13dd4:	mov	r0, r4
   13dd8:	bl	10f18 <__fprintf_chk@plt>
   13ddc:	b	13be0 <__assert_fail@plt+0x2c2c>
   13de0:	mov	r2, #5
   13de4:	ldr	r1, [pc, #256]	; 13eec <__assert_fail@plt+0x2f38>
   13de8:	mov	r0, #0
   13dec:	bl	10dbc <dcgettext@plt>
   13df0:	ldr	r3, [r5]
   13df4:	ldr	r2, [r5, #32]
   13df8:	str	r2, [sp, #28]
   13dfc:	ldr	r2, [r5, #28]
   13e00:	str	r2, [sp, #24]
   13e04:	ldr	r2, [r5, #24]
   13e08:	str	r2, [sp, #20]
   13e0c:	ldr	r2, [r5, #20]
   13e10:	str	r2, [sp, #16]
   13e14:	ldr	r2, [r5, #16]
   13e18:	str	r2, [sp, #12]
   13e1c:	ldr	r2, [r5, #12]
   13e20:	str	r2, [sp, #8]
   13e24:	ldr	r2, [r5, #8]
   13e28:	str	r2, [sp, #4]
   13e2c:	ldr	r2, [r5, #4]
   13e30:	str	r2, [sp]
   13e34:	mov	r2, r0
   13e38:	mov	r1, #1
   13e3c:	mov	r0, r4
   13e40:	bl	10f18 <__fprintf_chk@plt>
   13e44:	b	13be0 <__assert_fail@plt+0x2c2c>
   13e48:	mov	r2, #5
   13e4c:	ldr	r1, [pc, #156]	; 13ef0 <__assert_fail@plt+0x2f3c>
   13e50:	mov	r0, #0
   13e54:	bl	10dbc <dcgettext@plt>
   13e58:	ldr	r3, [r5]
   13e5c:	ldr	r2, [r5, #32]
   13e60:	str	r2, [sp, #28]
   13e64:	ldr	r2, [r5, #28]
   13e68:	str	r2, [sp, #24]
   13e6c:	ldr	r2, [r5, #24]
   13e70:	str	r2, [sp, #20]
   13e74:	ldr	r2, [r5, #20]
   13e78:	str	r2, [sp, #16]
   13e7c:	ldr	r2, [r5, #16]
   13e80:	str	r2, [sp, #12]
   13e84:	ldr	r2, [r5, #12]
   13e88:	str	r2, [sp, #8]
   13e8c:	ldr	r2, [r5, #8]
   13e90:	str	r2, [sp, #4]
   13e94:	ldr	r2, [r5, #4]
   13e98:	str	r2, [sp]
   13e9c:	mov	r2, r0
   13ea0:	mov	r1, #1
   13ea4:	mov	r0, r4
   13ea8:	bl	10f18 <__fprintf_chk@plt>
   13eac:	b	13be0 <__assert_fail@plt+0x2c2c>
   13eb0:	andeq	r6, r1, r0, lsl #8
   13eb4:	andeq	r6, r1, r4, lsl r4
   13eb8:	andeq	r0, r0, r6, ror #15
   13ebc:	andeq	r6, r1, ip, ror #13
   13ec0:	andeq	r6, r1, r8, lsl r4
   13ec4:	andeq	r6, r1, r4, asr #9
   13ec8:	andeq	r6, r1, ip, lsl #8
   13ecc:	andeq	r6, r1, r8, ror #9
   13ed0:	strdeq	r6, [r1], -r8
   13ed4:	andeq	r6, r1, r0, lsl r5
   13ed8:	andeq	r6, r1, ip, lsr #10
   13edc:	andeq	r6, r1, ip, asr #10
   13ee0:	andeq	r6, r1, r0, ror r5
   13ee4:	muleq	r1, r8, r5
   13ee8:	andeq	r6, r1, r4, asr #11
   13eec:	strdeq	r6, [r1], -r4
   13ef0:	andeq	r6, r1, r8, lsr #12
   13ef4:	push	{r4, r5, lr}
   13ef8:	sub	sp, sp, #12
   13efc:	ldr	r5, [sp, #24]
   13f00:	ldr	ip, [r5]
   13f04:	cmp	ip, #0
   13f08:	beq	13f38 <__assert_fail@plt+0x2f84>
   13f0c:	mov	lr, r5
   13f10:	mov	ip, #0
   13f14:	add	ip, ip, #1
   13f18:	ldr	r4, [lr, #4]!
   13f1c:	cmp	r4, #0
   13f20:	bne	13f14 <__assert_fail@plt+0x2f60>
   13f24:	str	ip, [sp, #4]
   13f28:	str	r5, [sp]
   13f2c:	bl	13ad4 <__assert_fail@plt+0x2b20>
   13f30:	add	sp, sp, #12
   13f34:	pop	{r4, r5, pc}
   13f38:	mov	ip, #0
   13f3c:	b	13f24 <__assert_fail@plt+0x2f70>
   13f40:	push	{r4, r5, lr}
   13f44:	sub	sp, sp, #52	; 0x34
   13f48:	ldr	r4, [sp, #64]	; 0x40
   13f4c:	sub	r4, r4, #4
   13f50:	add	r5, sp, #4
   13f54:	mov	ip, #0
   13f58:	ldr	lr, [r4, #4]!
   13f5c:	str	lr, [r5, #4]!
   13f60:	cmp	lr, #0
   13f64:	beq	13f74 <__assert_fail@plt+0x2fc0>
   13f68:	add	ip, ip, #1
   13f6c:	cmp	ip, #10
   13f70:	bne	13f58 <__assert_fail@plt+0x2fa4>
   13f74:	str	ip, [sp, #4]
   13f78:	add	ip, sp, #8
   13f7c:	str	ip, [sp]
   13f80:	bl	13ad4 <__assert_fail@plt+0x2b20>
   13f84:	add	sp, sp, #52	; 0x34
   13f88:	pop	{r4, r5, pc}
   13f8c:	push	{r3}		; (str r3, [sp, #-4]!)
   13f90:	push	{lr}		; (str lr, [sp, #-4]!)
   13f94:	sub	sp, sp, #16
   13f98:	add	r3, sp, #24
   13f9c:	str	r3, [sp, #12]
   13fa0:	str	r3, [sp]
   13fa4:	ldr	r3, [sp, #20]
   13fa8:	bl	13f40 <__assert_fail@plt+0x2f8c>
   13fac:	add	sp, sp, #16
   13fb0:	pop	{lr}		; (ldr lr, [sp], #4)
   13fb4:	add	sp, sp, #4
   13fb8:	bx	lr
   13fbc:	push	{r4, lr}
   13fc0:	ldr	r3, [pc, #112]	; 14038 <__assert_fail@plt+0x3084>
   13fc4:	ldr	r1, [r3]
   13fc8:	mov	r0, #10
   13fcc:	bl	10db0 <fputc_unlocked@plt>
   13fd0:	mov	r2, #5
   13fd4:	ldr	r1, [pc, #96]	; 1403c <__assert_fail@plt+0x3088>
   13fd8:	mov	r0, #0
   13fdc:	bl	10dbc <dcgettext@plt>
   13fe0:	ldr	r2, [pc, #88]	; 14040 <__assert_fail@plt+0x308c>
   13fe4:	mov	r1, r0
   13fe8:	mov	r0, #1
   13fec:	bl	10f00 <__printf_chk@plt>
   13ff0:	mov	r2, #5
   13ff4:	ldr	r1, [pc, #72]	; 14044 <__assert_fail@plt+0x3090>
   13ff8:	mov	r0, #0
   13ffc:	bl	10dbc <dcgettext@plt>
   14000:	ldr	r3, [pc, #64]	; 14048 <__assert_fail@plt+0x3094>
   14004:	ldr	r2, [pc, #64]	; 1404c <__assert_fail@plt+0x3098>
   14008:	mov	r1, r0
   1400c:	mov	r0, #1
   14010:	bl	10f00 <__printf_chk@plt>
   14014:	mov	r2, #5
   14018:	ldr	r1, [pc, #48]	; 14050 <__assert_fail@plt+0x309c>
   1401c:	mov	r0, #0
   14020:	bl	10dbc <dcgettext@plt>
   14024:	ldr	r2, [pc, #40]	; 14054 <__assert_fail@plt+0x30a0>
   14028:	mov	r1, r0
   1402c:	mov	r0, #1
   14030:	bl	10f00 <__printf_chk@plt>
   14034:	pop	{r4, pc}
   14038:	andeq	r7, r2, r4, asr r1
   1403c:	andeq	r6, r1, r4, ror #12
   14040:	andeq	r6, r1, r8, ror r6
   14044:	muleq	r1, r0, r6
   14048:	andeq	r5, r1, r4, asr pc
   1404c:	andeq	r5, r1, ip, ror pc
   14050:	andeq	r6, r1, r4, lsr #13
   14054:	andeq	r6, r1, ip, asr #13
   14058:	push	{r4, lr}
   1405c:	bl	14c20 <__assert_fail@plt+0x3c6c>
   14060:	cmp	r0, #0
   14064:	popne	{r4, pc}
   14068:	bl	145fc <__assert_fail@plt+0x3648>
   1406c:	push	{r4, lr}
   14070:	bl	14c20 <__assert_fail@plt+0x3c6c>
   14074:	cmp	r0, #0
   14078:	popne	{r4, pc}
   1407c:	bl	145fc <__assert_fail@plt+0x3648>
   14080:	push	{r4, lr}
   14084:	bl	14058 <__assert_fail@plt+0x30a4>
   14088:	pop	{r4, pc}
   1408c:	push	{r4, r5, r6, lr}
   14090:	mov	r5, r0
   14094:	mov	r4, r1
   14098:	bl	14c50 <__assert_fail@plt+0x3c9c>
   1409c:	cmp	r0, #0
   140a0:	popne	{r4, r5, r6, pc}
   140a4:	adds	r4, r4, #0
   140a8:	movne	r4, #1
   140ac:	cmp	r5, #0
   140b0:	orreq	r4, r4, #1
   140b4:	cmp	r4, #0
   140b8:	popeq	{r4, r5, r6, pc}
   140bc:	bl	145fc <__assert_fail@plt+0x3648>
   140c0:	push	{r4, lr}
   140c4:	cmp	r1, #0
   140c8:	orreq	r1, r1, #1
   140cc:	bl	14c50 <__assert_fail@plt+0x3c9c>
   140d0:	cmp	r0, #0
   140d4:	popne	{r4, pc}
   140d8:	bl	145fc <__assert_fail@plt+0x3648>
   140dc:	push	{r4, r5, r6, lr}
   140e0:	mov	r6, r0
   140e4:	mov	r5, r1
   140e8:	mov	r4, r2
   140ec:	bl	15204 <__assert_fail@plt+0x4250>
   140f0:	cmp	r0, #0
   140f4:	popne	{r4, r5, r6, pc}
   140f8:	cmp	r6, #0
   140fc:	beq	1410c <__assert_fail@plt+0x3158>
   14100:	cmp	r5, #0
   14104:	cmpne	r4, #0
   14108:	popeq	{r4, r5, r6, pc}
   1410c:	bl	145fc <__assert_fail@plt+0x3648>
   14110:	push	{r4, lr}
   14114:	bl	140dc <__assert_fail@plt+0x3128>
   14118:	pop	{r4, pc}
   1411c:	push	{r4, lr}
   14120:	mov	ip, r1
   14124:	mov	r3, r2
   14128:	cmp	r2, #0
   1412c:	cmpne	r1, #0
   14130:	moveq	r3, #1
   14134:	moveq	ip, r3
   14138:	mov	r2, r3
   1413c:	mov	r1, ip
   14140:	bl	15204 <__assert_fail@plt+0x4250>
   14144:	cmp	r0, #0
   14148:	popne	{r4, pc}
   1414c:	bl	145fc <__assert_fail@plt+0x3648>
   14150:	push	{r4, lr}
   14154:	mov	r2, r1
   14158:	mov	r1, r0
   1415c:	mov	r0, #0
   14160:	bl	140dc <__assert_fail@plt+0x3128>
   14164:	pop	{r4, pc}
   14168:	push	{r4, lr}
   1416c:	mov	r2, r1
   14170:	mov	r1, r0
   14174:	mov	r0, #0
   14178:	bl	1411c <__assert_fail@plt+0x3168>
   1417c:	pop	{r4, pc}
   14180:	push	{r4, r5, r6, r7, r8, lr}
   14184:	mov	r5, r1
   14188:	mov	r6, r2
   1418c:	ldr	r4, [r1]
   14190:	subs	r7, r0, #0
   14194:	beq	141b0 <__assert_fail@plt+0x31fc>
   14198:	lsr	r2, r4, #1
   1419c:	add	r3, r2, #1
   141a0:	mvn	r3, r3
   141a4:	cmp	r4, r3
   141a8:	bls	141d4 <__assert_fail@plt+0x3220>
   141ac:	bl	145fc <__assert_fail@plt+0x3648>
   141b0:	cmp	r4, #0
   141b4:	bne	141dc <__assert_fail@plt+0x3228>
   141b8:	mov	r1, r2
   141bc:	mov	r0, #64	; 0x40
   141c0:	bl	15358 <__assert_fail@plt+0x43a4>
   141c4:	cmp	r0, #0
   141c8:	movne	r4, r0
   141cc:	addeq	r4, r0, #1
   141d0:	b	141dc <__assert_fail@plt+0x3228>
   141d4:	add	r4, r4, #1
   141d8:	add	r4, r4, r2
   141dc:	mov	r2, r6
   141e0:	mov	r1, r4
   141e4:	mov	r0, r7
   141e8:	bl	140dc <__assert_fail@plt+0x3128>
   141ec:	str	r4, [r5]
   141f0:	pop	{r4, r5, r6, r7, r8, pc}
   141f4:	push	{r4, lr}
   141f8:	mov	r2, #1
   141fc:	bl	14180 <__assert_fail@plt+0x31cc>
   14200:	pop	{r4, pc}
   14204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14208:	sub	sp, sp, #12
   1420c:	mov	fp, r0
   14210:	mov	sl, r1
   14214:	mov	r9, r2
   14218:	mov	r7, r3
   1421c:	ldr	r6, [sp, #48]	; 0x30
   14220:	ldr	r5, [r1]
   14224:	asrs	r4, r5, #1
   14228:	bmi	14384 <__assert_fail@plt+0x33d0>
   1422c:	cmp	r5, #0
   14230:	blt	14398 <__assert_fail@plt+0x33e4>
   14234:	mvn	r3, #-2147483648	; 0x80000000
   14238:	sub	r3, r3, r4
   1423c:	cmp	r5, r3
   14240:	movle	r3, #0
   14244:	movgt	r3, #1
   14248:	cmp	r3, #0
   1424c:	addeq	r4, r4, r5
   14250:	mvnne	r4, #-2147483648	; 0x80000000
   14254:	mvn	r8, r7
   14258:	lsr	r8, r8, #31
   1425c:	cmp	r7, r4
   14260:	movge	r3, #0
   14264:	andlt	r3, r8, #1
   14268:	cmp	r3, #0
   1426c:	movne	r4, r7
   14270:	cmp	r6, #0
   14274:	blt	143ac <__assert_fail@plt+0x33f8>
   14278:	cmp	r6, #0
   1427c:	beq	14458 <__assert_fail@plt+0x34a4>
   14280:	cmp	r4, #0
   14284:	blt	14408 <__assert_fail@plt+0x3454>
   14288:	mov	r1, r6
   1428c:	mvn	r0, #-2147483648	; 0x80000000
   14290:	bl	15564 <__assert_fail@plt+0x45b0>
   14294:	cmp	r0, r4
   14298:	movge	r0, #0
   1429c:	movlt	r0, #1
   142a0:	cmp	r0, #0
   142a4:	mvnne	r3, #-2147483648	; 0x80000000
   142a8:	strne	r3, [sp, #4]
   142ac:	beq	14440 <__assert_fail@plt+0x348c>
   142b0:	mov	r1, r6
   142b4:	ldr	r0, [sp, #4]
   142b8:	bl	15564 <__assert_fail@plt+0x45b0>
   142bc:	mov	r4, r0
   142c0:	mov	r1, r6
   142c4:	ldr	r0, [sp, #4]
   142c8:	bl	15784 <__assert_fail@plt+0x47d0>
   142cc:	ldr	r3, [sp, #4]
   142d0:	sub	r1, r3, r1
   142d4:	cmp	fp, #0
   142d8:	moveq	r3, #0
   142dc:	streq	r3, [sl]
   142e0:	sub	r3, r4, r5
   142e4:	cmp	r3, r9
   142e8:	bge	14370 <__assert_fail@plt+0x33bc>
   142ec:	cmp	r9, #0
   142f0:	blt	14464 <__assert_fail@plt+0x34b0>
   142f4:	cmp	r5, #0
   142f8:	blt	14478 <__assert_fail@plt+0x34c4>
   142fc:	mvn	r3, #-2147483648	; 0x80000000
   14300:	sub	r3, r3, r9
   14304:	cmp	r5, r3
   14308:	movle	r3, #0
   1430c:	movgt	r3, #1
   14310:	cmp	r3, #0
   14314:	bne	14520 <__assert_fail@plt+0x356c>
   14318:	add	r5, r5, r9
   1431c:	mov	r4, r5
   14320:	cmp	r7, r5
   14324:	movge	r7, #0
   14328:	andlt	r7, r8, #1
   1432c:	cmp	r7, #0
   14330:	bne	14520 <__assert_fail@plt+0x356c>
   14334:	cmp	r6, #0
   14338:	blt	1448c <__assert_fail@plt+0x34d8>
   1433c:	cmp	r6, #0
   14340:	beq	1436c <__assert_fail@plt+0x33b8>
   14344:	cmp	r5, #0
   14348:	blt	144e8 <__assert_fail@plt+0x3534>
   1434c:	mov	r1, r6
   14350:	mvn	r0, #-2147483648	; 0x80000000
   14354:	bl	15564 <__assert_fail@plt+0x45b0>
   14358:	cmp	r5, r0
   1435c:	movle	r0, #0
   14360:	movgt	r0, #1
   14364:	cmp	r0, #0
   14368:	bne	14520 <__assert_fail@plt+0x356c>
   1436c:	mul	r1, r5, r6
   14370:	mov	r0, fp
   14374:	bl	1408c <__assert_fail@plt+0x30d8>
   14378:	str	r4, [sl]
   1437c:	add	sp, sp, #12
   14380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14384:	rsb	r3, r4, #-2147483648	; 0x80000000
   14388:	cmp	r5, r3
   1438c:	movge	r3, #0
   14390:	movlt	r3, #1
   14394:	b	14248 <__assert_fail@plt+0x3294>
   14398:	rsb	r3, r5, #-2147483648	; 0x80000000
   1439c:	cmp	r4, r3
   143a0:	movge	r3, #0
   143a4:	movlt	r3, #1
   143a8:	b	14248 <__assert_fail@plt+0x3294>
   143ac:	cmp	r4, #0
   143b0:	blt	143d8 <__assert_fail@plt+0x3424>
   143b4:	cmn	r6, #1
   143b8:	beq	143f4 <__assert_fail@plt+0x3440>
   143bc:	mov	r1, r6
   143c0:	mov	r0, #-2147483648	; 0x80000000
   143c4:	bl	15564 <__assert_fail@plt+0x45b0>
   143c8:	cmp	r0, r4
   143cc:	movge	r0, #0
   143d0:	movlt	r0, #1
   143d4:	b	142a0 <__assert_fail@plt+0x32ec>
   143d8:	mov	r1, r6
   143dc:	mvn	r0, #-2147483648	; 0x80000000
   143e0:	bl	15564 <__assert_fail@plt+0x45b0>
   143e4:	cmp	r0, r4
   143e8:	movle	r0, #0
   143ec:	movgt	r0, #1
   143f0:	b	142a0 <__assert_fail@plt+0x32ec>
   143f4:	add	r0, r4, #-2147483648	; 0x80000000
   143f8:	cmp	r0, #0
   143fc:	movle	r0, #0
   14400:	movgt	r0, #1
   14404:	b	142a0 <__assert_fail@plt+0x32ec>
   14408:	cmn	r4, #1
   1440c:	beq	1442c <__assert_fail@plt+0x3478>
   14410:	mov	r1, r4
   14414:	mov	r0, #-2147483648	; 0x80000000
   14418:	bl	15564 <__assert_fail@plt+0x45b0>
   1441c:	cmp	r6, r0
   14420:	movle	r0, #0
   14424:	movgt	r0, #1
   14428:	b	142a0 <__assert_fail@plt+0x32ec>
   1442c:	add	r0, r6, #-2147483648	; 0x80000000
   14430:	cmp	r0, #0
   14434:	movle	r0, #0
   14438:	movgt	r0, #1
   1443c:	b	142a0 <__assert_fail@plt+0x32ec>
   14440:	mul	r1, r6, r4
   14444:	cmp	r1, #63	; 0x3f
   14448:	movle	r3, #64	; 0x40
   1444c:	strle	r3, [sp, #4]
   14450:	bgt	142d4 <__assert_fail@plt+0x3320>
   14454:	b	142b0 <__assert_fail@plt+0x32fc>
   14458:	mov	r3, #64	; 0x40
   1445c:	str	r3, [sp, #4]
   14460:	b	142b0 <__assert_fail@plt+0x32fc>
   14464:	rsb	r3, r9, #-2147483648	; 0x80000000
   14468:	cmp	r5, r3
   1446c:	movge	r3, #0
   14470:	movlt	r3, #1
   14474:	b	14310 <__assert_fail@plt+0x335c>
   14478:	rsb	r3, r5, #-2147483648	; 0x80000000
   1447c:	cmp	r9, r3
   14480:	movge	r3, #0
   14484:	movlt	r3, #1
   14488:	b	14310 <__assert_fail@plt+0x335c>
   1448c:	cmp	r5, #0
   14490:	blt	144b8 <__assert_fail@plt+0x3504>
   14494:	cmn	r6, #1
   14498:	beq	144d4 <__assert_fail@plt+0x3520>
   1449c:	mov	r1, r6
   144a0:	mov	r0, #-2147483648	; 0x80000000
   144a4:	bl	15564 <__assert_fail@plt+0x45b0>
   144a8:	cmp	r5, r0
   144ac:	movle	r0, #0
   144b0:	movgt	r0, #1
   144b4:	b	14364 <__assert_fail@plt+0x33b0>
   144b8:	mov	r1, r6
   144bc:	mvn	r0, #-2147483648	; 0x80000000
   144c0:	bl	15564 <__assert_fail@plt+0x45b0>
   144c4:	cmp	r5, r0
   144c8:	movge	r0, #0
   144cc:	movlt	r0, #1
   144d0:	b	14364 <__assert_fail@plt+0x33b0>
   144d4:	add	r0, r5, #-2147483648	; 0x80000000
   144d8:	cmp	r0, #0
   144dc:	movle	r0, #0
   144e0:	movgt	r0, #1
   144e4:	b	14364 <__assert_fail@plt+0x33b0>
   144e8:	cmn	r5, #1
   144ec:	beq	1450c <__assert_fail@plt+0x3558>
   144f0:	mov	r1, r5
   144f4:	mov	r0, #-2147483648	; 0x80000000
   144f8:	bl	15564 <__assert_fail@plt+0x45b0>
   144fc:	cmp	r6, r0
   14500:	movle	r0, #0
   14504:	movgt	r0, #1
   14508:	b	14364 <__assert_fail@plt+0x33b0>
   1450c:	add	r0, r6, #-2147483648	; 0x80000000
   14510:	cmp	r0, #0
   14514:	movle	r0, #0
   14518:	movgt	r0, #1
   1451c:	b	14364 <__assert_fail@plt+0x33b0>
   14520:	bl	145fc <__assert_fail@plt+0x3648>
   14524:	push	{r4, lr}
   14528:	bl	14bd0 <__assert_fail@plt+0x3c1c>
   1452c:	cmp	r0, #0
   14530:	popne	{r4, pc}
   14534:	bl	145fc <__assert_fail@plt+0x3648>
   14538:	push	{r4, lr}
   1453c:	mov	r1, #1
   14540:	bl	14524 <__assert_fail@plt+0x3570>
   14544:	pop	{r4, pc}
   14548:	push	{r4, lr}
   1454c:	bl	14bd0 <__assert_fail@plt+0x3c1c>
   14550:	cmp	r0, #0
   14554:	popne	{r4, pc}
   14558:	bl	145fc <__assert_fail@plt+0x3648>
   1455c:	push	{r4, lr}
   14560:	mov	r1, #1
   14564:	bl	14548 <__assert_fail@plt+0x3594>
   14568:	pop	{r4, pc}
   1456c:	push	{r4, r5, r6, lr}
   14570:	mov	r5, r0
   14574:	mov	r4, r1
   14578:	mov	r0, r1
   1457c:	bl	14058 <__assert_fail@plt+0x30a4>
   14580:	mov	r2, r4
   14584:	mov	r1, r5
   14588:	bl	10d74 <memcpy@plt>
   1458c:	pop	{r4, r5, r6, pc}
   14590:	push	{r4, r5, r6, lr}
   14594:	mov	r5, r0
   14598:	mov	r4, r1
   1459c:	mov	r0, r1
   145a0:	bl	1406c <__assert_fail@plt+0x30b8>
   145a4:	mov	r2, r4
   145a8:	mov	r1, r5
   145ac:	bl	10d74 <memcpy@plt>
   145b0:	pop	{r4, r5, r6, pc}
   145b4:	push	{r4, r5, r6, lr}
   145b8:	mov	r5, r0
   145bc:	mov	r4, r1
   145c0:	add	r0, r1, #1
   145c4:	bl	1406c <__assert_fail@plt+0x30b8>
   145c8:	mov	r2, #0
   145cc:	strb	r2, [r0, r4]
   145d0:	mov	r2, r4
   145d4:	mov	r1, r5
   145d8:	bl	10d74 <memcpy@plt>
   145dc:	pop	{r4, r5, r6, pc}
   145e0:	push	{r4, lr}
   145e4:	mov	r4, r0
   145e8:	bl	10ec4 <strlen@plt>
   145ec:	add	r1, r0, #1
   145f0:	mov	r0, r4
   145f4:	bl	1456c <__assert_fail@plt+0x35b8>
   145f8:	pop	{r4, pc}
   145fc:	push	{r4, lr}
   14600:	ldr	r3, [pc, #40]	; 14630 <__assert_fail@plt+0x367c>
   14604:	ldr	r4, [r3]
   14608:	mov	r2, #5
   1460c:	ldr	r1, [pc, #32]	; 14634 <__assert_fail@plt+0x3680>
   14610:	mov	r0, #0
   14614:	bl	10dbc <dcgettext@plt>
   14618:	mov	r3, r0
   1461c:	ldr	r2, [pc, #20]	; 14638 <__assert_fail@plt+0x3684>
   14620:	mov	r1, #0
   14624:	mov	r0, r4
   14628:	bl	10e34 <error@plt>
   1462c:	bl	10fa8 <abort@plt>
   14630:	strdeq	r7, [r2], -ip
   14634:	andeq	r6, r1, ip, lsl r7
   14638:	andeq	r6, r1, r4, ror #5
   1463c:	push	{r4, lr}
   14640:	bl	14cc8 <__assert_fail@plt+0x3d14>
   14644:	subs	r4, r0, #0
   14648:	beq	14654 <__assert_fail@plt+0x36a0>
   1464c:	mov	r0, r4
   14650:	pop	{r4, pc}
   14654:	bl	10edc <__errno_location@plt>
   14658:	ldr	r3, [r0]
   1465c:	cmp	r3, #12
   14660:	bne	1464c <__assert_fail@plt+0x3698>
   14664:	bl	145fc <__assert_fail@plt+0x3648>
   14668:	push	{r4, r5, r6, lr}
   1466c:	mov	r5, r0
   14670:	subs	r4, r1, #0
   14674:	blt	146c8 <__assert_fail@plt+0x3714>
   14678:	cmp	r4, #0
   1467c:	moveq	r3, #0
   14680:	beq	146ac <__assert_fail@plt+0x36f8>
   14684:	mov	r2, r4
   14688:	asr	r3, r4, #31
   1468c:	mvn	r0, #0
   14690:	mvn	r1, #0
   14694:	bl	157a4 <__assert_fail@plt+0x47f0>
   14698:	ldrd	r2, [r5]
   1469c:	cmp	r1, r3
   146a0:	cmpeq	r0, r2
   146a4:	movcc	r3, #1
   146a8:	movcs	r3, #0
   146ac:	cmp	r3, #0
   146b0:	beq	146e8 <__assert_fail@plt+0x3734>
   146b4:	mvn	r2, #0
   146b8:	mvn	r3, #0
   146bc:	strd	r2, [r5]
   146c0:	mov	r0, #1
   146c4:	pop	{r4, r5, r6, pc}
   146c8:	mov	r1, r4
   146cc:	mov	r0, #0
   146d0:	bl	15564 <__assert_fail@plt+0x45b0>
   146d4:	ldrd	r2, [r5]
   146d8:	orrs	r3, r2, r3
   146dc:	movne	r3, #1
   146e0:	moveq	r3, #0
   146e4:	b	146ac <__assert_fail@plt+0x36f8>
   146e8:	asr	r3, r4, #31
   146ec:	ldr	r1, [r5, #4]
   146f0:	ldr	r2, [r5]
   146f4:	mul	r3, r3, r2
   146f8:	mla	r1, r4, r1, r3
   146fc:	umull	r2, r3, r2, r4
   14700:	add	r3, r1, r3
   14704:	strd	r2, [r5]
   14708:	mov	r0, #0
   1470c:	pop	{r4, r5, r6, pc}
   14710:	push	{r4, r5, r6, r7, r8, lr}
   14714:	subs	r4, r2, #0
   14718:	beq	14748 <__assert_fail@plt+0x3794>
   1471c:	mov	r7, r1
   14720:	mov	r6, r0
   14724:	mov	r5, #0
   14728:	mov	r1, r7
   1472c:	mov	r0, r6
   14730:	bl	14668 <__assert_fail@plt+0x36b4>
   14734:	orr	r5, r5, r0
   14738:	subs	r4, r4, #1
   1473c:	bne	14728 <__assert_fail@plt+0x3774>
   14740:	mov	r0, r5
   14744:	pop	{r4, r5, r6, r7, r8, pc}
   14748:	mov	r5, #0
   1474c:	b	14740 <__assert_fail@plt+0x378c>
   14750:	push	{r4, r5, r6, r7, r8, r9, lr}
   14754:	sub	sp, sp, #20
   14758:	cmp	r2, #36	; 0x24
   1475c:	bhi	1479c <__assert_fail@plt+0x37e8>
   14760:	mov	r5, r0
   14764:	mov	r6, r1
   14768:	mov	r7, r2
   1476c:	mov	r9, r3
   14770:	cmp	r1, #0
   14774:	addeq	r6, sp, #12
   14778:	bl	10edc <__errno_location@plt>
   1477c:	mov	r8, r0
   14780:	mov	r3, #0
   14784:	str	r3, [r0]
   14788:	ldrb	r4, [r5]
   1478c:	bl	10eac <__ctype_b_loc@plt>
   14790:	ldr	r1, [r0]
   14794:	mov	r2, r5
   14798:	b	147b4 <__assert_fail@plt+0x3800>
   1479c:	ldr	r3, [pc, #1056]	; 14bc4 <__assert_fail@plt+0x3c10>
   147a0:	mov	r2, #85	; 0x55
   147a4:	ldr	r1, [pc, #1052]	; 14bc8 <__assert_fail@plt+0x3c14>
   147a8:	ldr	r0, [pc, #1052]	; 14bcc <__assert_fail@plt+0x3c18>
   147ac:	bl	10fb4 <__assert_fail@plt>
   147b0:	ldrb	r4, [r2, #1]!
   147b4:	lsl	r3, r4, #1
   147b8:	ldrh	r3, [r1, r3]
   147bc:	tst	r3, #8192	; 0x2000
   147c0:	bne	147b0 <__assert_fail@plt+0x37fc>
   147c4:	cmp	r4, #45	; 0x2d
   147c8:	moveq	r4, #4
   147cc:	bne	147dc <__assert_fail@plt+0x3828>
   147d0:	mov	r0, r4
   147d4:	add	sp, sp, #20
   147d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   147dc:	mov	r3, #0
   147e0:	mov	r2, r7
   147e4:	mov	r1, r6
   147e8:	mov	r0, r5
   147ec:	bl	10d8c <__strtoull_internal@plt>
   147f0:	strd	r0, [sp]
   147f4:	ldr	r7, [r6]
   147f8:	cmp	r5, r7
   147fc:	beq	14820 <__assert_fail@plt+0x386c>
   14800:	ldr	r3, [r8]
   14804:	cmp	r3, #0
   14808:	beq	14868 <__assert_fail@plt+0x38b4>
   1480c:	cmp	r3, #34	; 0x22
   14810:	moveq	r4, #1
   14814:	beq	1486c <__assert_fail@plt+0x38b8>
   14818:	mov	r4, #4
   1481c:	b	147d0 <__assert_fail@plt+0x381c>
   14820:	ldr	r3, [sp, #48]	; 0x30
   14824:	cmp	r3, #0
   14828:	moveq	r4, #4
   1482c:	beq	147d0 <__assert_fail@plt+0x381c>
   14830:	ldrb	r1, [r7]
   14834:	cmp	r1, #0
   14838:	moveq	r4, #4
   1483c:	beq	147d0 <__assert_fail@plt+0x381c>
   14840:	mov	r0, r3
   14844:	bl	10ed0 <strchr@plt>
   14848:	cmp	r0, #0
   1484c:	moveq	r4, #4
   14850:	beq	147d0 <__assert_fail@plt+0x381c>
   14854:	mov	r2, #1
   14858:	mov	r3, #0
   1485c:	strd	r2, [sp]
   14860:	mov	r4, #0
   14864:	b	14878 <__assert_fail@plt+0x38c4>
   14868:	mov	r4, #0
   1486c:	ldr	r3, [sp, #48]	; 0x30
   14870:	cmp	r3, #0
   14874:	beq	14968 <__assert_fail@plt+0x39b4>
   14878:	ldrb	r5, [r7]
   1487c:	cmp	r5, #0
   14880:	beq	14b00 <__assert_fail@plt+0x3b4c>
   14884:	mov	r1, r5
   14888:	ldr	r0, [sp, #48]	; 0x30
   1488c:	bl	10ed0 <strchr@plt>
   14890:	cmp	r0, #0
   14894:	beq	14970 <__assert_fail@plt+0x39bc>
   14898:	sub	r3, r5, #69	; 0x45
   1489c:	cmp	r3, #47	; 0x2f
   148a0:	ldrls	pc, [pc, r3, lsl #2]
   148a4:	b	149dc <__assert_fail@plt+0x3a28>
   148a8:	andeq	r4, r1, r0, lsl #19
   148ac:	ldrdeq	r4, [r1], -ip
   148b0:	andeq	r4, r1, r0, lsl #19
   148b4:	ldrdeq	r4, [r1], -ip
   148b8:	ldrdeq	r4, [r1], -ip
   148bc:	ldrdeq	r4, [r1], -ip
   148c0:	andeq	r4, r1, r0, lsl #19
   148c4:	ldrdeq	r4, [r1], -ip
   148c8:	andeq	r4, r1, r0, lsl #19
   148cc:	ldrdeq	r4, [r1], -ip
   148d0:	ldrdeq	r4, [r1], -ip
   148d4:	andeq	r4, r1, r0, lsl #19
   148d8:	ldrdeq	r4, [r1], -ip
   148dc:	ldrdeq	r4, [r1], -ip
   148e0:	ldrdeq	r4, [r1], -ip
   148e4:	andeq	r4, r1, r0, lsl #19
   148e8:	ldrdeq	r4, [r1], -ip
   148ec:	ldrdeq	r4, [r1], -ip
   148f0:	ldrdeq	r4, [r1], -ip
   148f4:	ldrdeq	r4, [r1], -ip
   148f8:	andeq	r4, r1, r0, lsl #19
   148fc:	andeq	r4, r1, r0, lsl #19
   14900:	ldrdeq	r4, [r1], -ip
   14904:	ldrdeq	r4, [r1], -ip
   14908:	ldrdeq	r4, [r1], -ip
   1490c:	ldrdeq	r4, [r1], -ip
   14910:	ldrdeq	r4, [r1], -ip
   14914:	ldrdeq	r4, [r1], -ip
   14918:	ldrdeq	r4, [r1], -ip
   1491c:	ldrdeq	r4, [r1], -ip
   14920:	ldrdeq	r4, [r1], -ip
   14924:	ldrdeq	r4, [r1], -ip
   14928:	ldrdeq	r4, [r1], -ip
   1492c:	ldrdeq	r4, [r1], -ip
   14930:	andeq	r4, r1, r0, lsl #19
   14934:	ldrdeq	r4, [r1], -ip
   14938:	ldrdeq	r4, [r1], -ip
   1493c:	ldrdeq	r4, [r1], -ip
   14940:	andeq	r4, r1, r0, lsl #19
   14944:	ldrdeq	r4, [r1], -ip
   14948:	andeq	r4, r1, r0, lsl #19
   1494c:	ldrdeq	r4, [r1], -ip
   14950:	ldrdeq	r4, [r1], -ip
   14954:	ldrdeq	r4, [r1], -ip
   14958:	ldrdeq	r4, [r1], -ip
   1495c:	ldrdeq	r4, [r1], -ip
   14960:	ldrdeq	r4, [r1], -ip
   14964:	andeq	r4, r1, r0, lsl #19
   14968:	strd	r0, [r9]
   1496c:	b	147d0 <__assert_fail@plt+0x381c>
   14970:	ldrd	r2, [sp]
   14974:	strd	r2, [r9]
   14978:	orr	r4, r4, #2
   1497c:	b	147d0 <__assert_fail@plt+0x381c>
   14980:	mov	r1, #48	; 0x30
   14984:	ldr	r0, [sp, #48]	; 0x30
   14988:	bl	10ed0 <strchr@plt>
   1498c:	cmp	r0, #0
   14990:	beq	14acc <__assert_fail@plt+0x3b18>
   14994:	ldrb	r3, [r7, #1]
   14998:	cmp	r3, #68	; 0x44
   1499c:	beq	149b8 <__assert_fail@plt+0x3a04>
   149a0:	cmp	r3, #105	; 0x69
   149a4:	beq	149c4 <__assert_fail@plt+0x3a10>
   149a8:	cmp	r3, #66	; 0x42
   149ac:	movne	r7, #1
   149b0:	movne	r1, #1024	; 0x400
   149b4:	bne	149e4 <__assert_fail@plt+0x3a30>
   149b8:	mov	r7, #2
   149bc:	mov	r1, #1000	; 0x3e8
   149c0:	b	149e4 <__assert_fail@plt+0x3a30>
   149c4:	ldrb	r7, [r7, #2]
   149c8:	cmp	r7, #66	; 0x42
   149cc:	movne	r7, #1
   149d0:	moveq	r7, #3
   149d4:	mov	r1, #1024	; 0x400
   149d8:	b	149e4 <__assert_fail@plt+0x3a30>
   149dc:	mov	r7, #1
   149e0:	mov	r1, #1024	; 0x400
   149e4:	sub	r5, r5, #66	; 0x42
   149e8:	cmp	r5, #53	; 0x35
   149ec:	ldrls	pc, [pc, r5, lsl #2]
   149f0:	b	14bac <__assert_fail@plt+0x3bf8>
   149f4:	andeq	r4, r1, ip, lsl #22
   149f8:	andeq	r4, r1, ip, lsr #23
   149fc:	andeq	r4, r1, ip, lsr #23
   14a00:	andeq	r4, r1, ip, lsl fp
   14a04:	andeq	r4, r1, ip, lsr #23
   14a08:	andeq	r4, r1, ip, lsr #22
   14a0c:	andeq	r4, r1, ip, lsr #23
   14a10:	andeq	r4, r1, ip, lsr #23
   14a14:	andeq	r4, r1, ip, lsr #23
   14a18:	andeq	r4, r1, ip, lsr fp
   14a1c:	andeq	r4, r1, ip, lsr #23
   14a20:	andeq	r4, r1, ip, asr #22
   14a24:	andeq	r4, r1, ip, lsr #23
   14a28:	andeq	r4, r1, ip, lsr #23
   14a2c:	andeq	r4, r1, ip, asr fp
   14a30:	andeq	r4, r1, ip, lsr #23
   14a34:	andeq	r4, r1, ip, lsr #23
   14a38:	andeq	r4, r1, ip, lsr #23
   14a3c:	andeq	r4, r1, ip, ror #22
   14a40:	andeq	r4, r1, ip, lsr #23
   14a44:	andeq	r4, r1, ip, lsr #23
   14a48:	andeq	r4, r1, ip, lsr #23
   14a4c:	andeq	r4, r1, ip, lsr #23
   14a50:	andeq	r4, r1, ip, lsl #23
   14a54:	muleq	r1, ip, fp
   14a58:	andeq	r4, r1, ip, lsr #23
   14a5c:	andeq	r4, r1, ip, lsr #23
   14a60:	andeq	r4, r1, ip, lsr #23
   14a64:	andeq	r4, r1, ip, lsr #23
   14a68:	andeq	r4, r1, ip, lsr #23
   14a6c:	andeq	r4, r1, ip, lsr #23
   14a70:	andeq	r4, r1, ip, lsr #23
   14a74:	ldrdeq	r4, [r1], -r8
   14a78:			; <UNDEFINED> instruction: 0x00014bbc
   14a7c:	andeq	r4, r1, ip, lsr #23
   14a80:	andeq	r4, r1, ip, lsr #23
   14a84:	andeq	r4, r1, ip, lsr #23
   14a88:	andeq	r4, r1, ip, lsr #22
   14a8c:	andeq	r4, r1, ip, lsr #23
   14a90:	andeq	r4, r1, ip, lsr #23
   14a94:	andeq	r4, r1, ip, lsr #23
   14a98:	andeq	r4, r1, ip, lsr fp
   14a9c:	andeq	r4, r1, ip, lsr #23
   14aa0:	andeq	r4, r1, ip, asr #22
   14aa4:	andeq	r4, r1, ip, lsr #23
   14aa8:	andeq	r4, r1, ip, lsr #23
   14aac:	andeq	r4, r1, ip, lsr #23
   14ab0:	andeq	r4, r1, ip, lsr #23
   14ab4:	andeq	r4, r1, ip, lsr #23
   14ab8:	andeq	r4, r1, ip, lsr #23
   14abc:	andeq	r4, r1, ip, ror #22
   14ac0:	andeq	r4, r1, ip, lsr #23
   14ac4:	andeq	r4, r1, ip, lsr #23
   14ac8:	andeq	r4, r1, ip, ror fp
   14acc:	mov	r7, #1
   14ad0:	mov	r1, #1024	; 0x400
   14ad4:	b	149e4 <__assert_fail@plt+0x3a30>
   14ad8:	mov	r1, #512	; 0x200
   14adc:	mov	r0, sp
   14ae0:	bl	14668 <__assert_fail@plt+0x36b4>
   14ae4:	orr	r4, r4, r0
   14ae8:	ldr	r3, [r6]
   14aec:	add	r2, r3, r7
   14af0:	str	r2, [r6]
   14af4:	ldrb	r3, [r3, r7]
   14af8:	cmp	r3, #0
   14afc:	orrne	r4, r4, #2
   14b00:	ldrd	r2, [sp]
   14b04:	strd	r2, [r9]
   14b08:	b	147d0 <__assert_fail@plt+0x381c>
   14b0c:	mov	r1, #1024	; 0x400
   14b10:	mov	r0, sp
   14b14:	bl	14668 <__assert_fail@plt+0x36b4>
   14b18:	b	14ae4 <__assert_fail@plt+0x3b30>
   14b1c:	mov	r2, #6
   14b20:	mov	r0, sp
   14b24:	bl	14710 <__assert_fail@plt+0x375c>
   14b28:	b	14ae4 <__assert_fail@plt+0x3b30>
   14b2c:	mov	r2, #3
   14b30:	mov	r0, sp
   14b34:	bl	14710 <__assert_fail@plt+0x375c>
   14b38:	b	14ae4 <__assert_fail@plt+0x3b30>
   14b3c:	mov	r2, #1
   14b40:	mov	r0, sp
   14b44:	bl	14710 <__assert_fail@plt+0x375c>
   14b48:	b	14ae4 <__assert_fail@plt+0x3b30>
   14b4c:	mov	r2, #2
   14b50:	mov	r0, sp
   14b54:	bl	14710 <__assert_fail@plt+0x375c>
   14b58:	b	14ae4 <__assert_fail@plt+0x3b30>
   14b5c:	mov	r2, #5
   14b60:	mov	r0, sp
   14b64:	bl	14710 <__assert_fail@plt+0x375c>
   14b68:	b	14ae4 <__assert_fail@plt+0x3b30>
   14b6c:	mov	r2, #4
   14b70:	mov	r0, sp
   14b74:	bl	14710 <__assert_fail@plt+0x375c>
   14b78:	b	14ae4 <__assert_fail@plt+0x3b30>
   14b7c:	mov	r1, #2
   14b80:	mov	r0, sp
   14b84:	bl	14668 <__assert_fail@plt+0x36b4>
   14b88:	b	14ae4 <__assert_fail@plt+0x3b30>
   14b8c:	mov	r2, #8
   14b90:	mov	r0, sp
   14b94:	bl	14710 <__assert_fail@plt+0x375c>
   14b98:	b	14ae4 <__assert_fail@plt+0x3b30>
   14b9c:	mov	r2, #7
   14ba0:	mov	r0, sp
   14ba4:	bl	14710 <__assert_fail@plt+0x375c>
   14ba8:	b	14ae4 <__assert_fail@plt+0x3b30>
   14bac:	ldrd	r2, [sp]
   14bb0:	strd	r2, [r9]
   14bb4:	orr	r4, r4, #2
   14bb8:	b	147d0 <__assert_fail@plt+0x381c>
   14bbc:	mov	r0, #0
   14bc0:	b	14ae4 <__assert_fail@plt+0x3b30>
   14bc4:	andeq	r6, r1, r0, lsr r7
   14bc8:	andeq	r6, r1, ip, lsr r7
   14bcc:	andeq	r6, r1, ip, asr #14
   14bd0:	push	{r4, lr}
   14bd4:	mov	r2, r0
   14bd8:	mov	r3, r1
   14bdc:	cmp	r1, #0
   14be0:	cmpne	r0, #0
   14be4:	moveq	r3, #1
   14be8:	moveq	r2, r3
   14bec:	umull	r0, r1, r2, r3
   14bf0:	cmp	r0, #0
   14bf4:	cmpge	r1, #0
   14bf8:	bne	14c0c <__assert_fail@plt+0x3c58>
   14bfc:	mov	r1, r3
   14c00:	mov	r0, r2
   14c04:	bl	10d20 <calloc@plt>
   14c08:	pop	{r4, pc}
   14c0c:	bl	10edc <__errno_location@plt>
   14c10:	mov	r3, #12
   14c14:	str	r3, [r0]
   14c18:	mov	r0, #0
   14c1c:	pop	{r4, pc}
   14c20:	push	{r4, lr}
   14c24:	cmp	r0, #0
   14c28:	moveq	r0, #1
   14c2c:	cmp	r0, #0
   14c30:	blt	14c3c <__assert_fail@plt+0x3c88>
   14c34:	bl	10e58 <malloc@plt>
   14c38:	pop	{r4, pc}
   14c3c:	bl	10edc <__errno_location@plt>
   14c40:	mov	r3, #12
   14c44:	str	r3, [r0]
   14c48:	mov	r0, #0
   14c4c:	pop	{r4, pc}
   14c50:	push	{r4, lr}
   14c54:	cmp	r0, #0
   14c58:	beq	14c74 <__assert_fail@plt+0x3cc0>
   14c5c:	cmp	r1, #0
   14c60:	beq	14c80 <__assert_fail@plt+0x3ccc>
   14c64:	cmp	r1, #0
   14c68:	blt	14c8c <__assert_fail@plt+0x3cd8>
   14c6c:	bl	10dc8 <realloc@plt>
   14c70:	pop	{r4, pc}
   14c74:	mov	r0, r1
   14c78:	bl	14c20 <__assert_fail@plt+0x3c6c>
   14c7c:	pop	{r4, pc}
   14c80:	bl	11f18 <__assert_fail@plt+0xf64>
   14c84:	mov	r0, #0
   14c88:	pop	{r4, pc}
   14c8c:	bl	10edc <__errno_location@plt>
   14c90:	mov	r3, #12
   14c94:	str	r3, [r0]
   14c98:	mov	r0, #0
   14c9c:	pop	{r4, pc}
   14ca0:	push	{r4, lr}
   14ca4:	cmn	r0, #100	; 0x64
   14ca8:	bne	14cc4 <__assert_fail@plt+0x3d10>
   14cac:	mov	ip, r1
   14cb0:	mov	r1, r2
   14cb4:	mov	r2, r3
   14cb8:	mov	r0, ip
   14cbc:	bl	10dec <readlink@plt>
   14cc0:	pop	{r4, pc}
   14cc4:	bl	10fa8 <abort@plt>
   14cc8:	push	{lr}		; (str lr, [sp, #-4]!)
   14ccc:	sub	sp, sp, #12
   14cd0:	ldr	r3, [pc, #32]	; 14cf8 <__assert_fail@plt+0x3d44>
   14cd4:	str	r3, [sp, #4]
   14cd8:	mov	r2, #0
   14cdc:	str	r2, [sp]
   14ce0:	mov	r3, r2
   14ce4:	mov	r1, r0
   14ce8:	mvn	r0, #99	; 0x63
   14cec:	bl	14dbc <__assert_fail@plt+0x3e08>
   14cf0:	add	sp, sp, #12
   14cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf8:	andeq	r4, r1, r0, lsr #25
   14cfc:	ldrb	r3, [r0]
   14d00:	cmp	r3, #47	; 0x2f
   14d04:	bne	14d14 <__assert_fail@plt+0x3d60>
   14d08:	ldrb	r3, [r0, #1]!
   14d0c:	cmp	r3, #47	; 0x2f
   14d10:	beq	14d08 <__assert_fail@plt+0x3d54>
   14d14:	ldrb	r2, [r0]
   14d18:	cmp	r2, #0
   14d1c:	bxeq	lr
   14d20:	push	{lr}		; (str lr, [sp, #-4]!)
   14d24:	mov	r1, r0
   14d28:	mov	r3, #0
   14d2c:	mov	lr, #1
   14d30:	mov	ip, r3
   14d34:	b	14d44 <__assert_fail@plt+0x3d90>
   14d38:	ldrb	r2, [r1, #1]!
   14d3c:	cmp	r2, #0
   14d40:	beq	14d60 <__assert_fail@plt+0x3dac>
   14d44:	cmp	r2, #47	; 0x2f
   14d48:	moveq	r3, lr
   14d4c:	beq	14d38 <__assert_fail@plt+0x3d84>
   14d50:	cmp	r3, #0
   14d54:	movne	r0, r1
   14d58:	movne	r3, ip
   14d5c:	b	14d38 <__assert_fail@plt+0x3d84>
   14d60:	pop	{pc}		; (ldr pc, [sp], #4)
   14d64:	push	{r4, lr}
   14d68:	mov	r4, r0
   14d6c:	bl	10ec4 <strlen@plt>
   14d70:	cmp	r0, #1
   14d74:	popls	{r4, pc}
   14d78:	sub	r3, r0, #1
   14d7c:	add	r2, r4, r3
   14d80:	ldrb	r1, [r4, r3]
   14d84:	cmp	r1, #47	; 0x2f
   14d88:	popne	{r4, pc}
   14d8c:	cmp	r3, #1
   14d90:	beq	14db4 <__assert_fail@plt+0x3e00>
   14d94:	sub	r0, r3, #1
   14d98:	ldrb	r1, [r2, #-1]!
   14d9c:	cmp	r1, #47	; 0x2f
   14da0:	beq	14dac <__assert_fail@plt+0x3df8>
   14da4:	mov	r0, r3
   14da8:	pop	{r4, pc}
   14dac:	mov	r3, r0
   14db0:	b	14d8c <__assert_fail@plt+0x3dd8>
   14db4:	mov	r0, #1
   14db8:	pop	{r4, pc}
   14dbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14dc0:	sub	sp, sp, #1024	; 0x400
   14dc4:	mov	r8, r0
   14dc8:	mov	r9, r1
   14dcc:	ldr	r6, [sp, #1056]	; 0x420
   14dd0:	ldr	sl, [sp, #1060]	; 0x424
   14dd4:	ldr	r1, [pc, #364]	; 14f48 <__assert_fail@plt+0x3f94>
   14dd8:	cmp	r6, #0
   14ddc:	moveq	r6, r1
   14de0:	subs	r7, r2, #0
   14de4:	moveq	r3, #1024	; 0x400
   14de8:	moveq	r7, sp
   14dec:	mvn	r4, #-2147483648	; 0x80000000
   14df0:	cmp	r3, r4
   14df4:	movcc	r4, r3
   14df8:	mov	r5, r7
   14dfc:	b	14ec4 <__assert_fail@plt+0x3f10>
   14e00:	cmp	r7, r5
   14e04:	moveq	r5, #0
   14e08:	beq	14f3c <__assert_fail@plt+0x3f88>
   14e0c:	bl	10edc <__errno_location@plt>
   14e10:	mov	r4, r0
   14e14:	ldr	r7, [r0]
   14e18:	ldr	r3, [r6, #8]
   14e1c:	mov	r0, r5
   14e20:	blx	r3
   14e24:	str	r7, [r4]
   14e28:	mov	r5, #0
   14e2c:	b	14f3c <__assert_fail@plt+0x3f88>
   14e30:	add	r8, r0, #1
   14e34:	mov	r3, #0
   14e38:	strb	r3, [r5, r0]
   14e3c:	mov	r3, sp
   14e40:	cmp	r5, r3
   14e44:	beq	14e78 <__assert_fail@plt+0x3ec4>
   14e48:	cmp	r7, r5
   14e4c:	cmpne	r4, r8
   14e50:	ble	14f3c <__assert_fail@plt+0x3f88>
   14e54:	ldr	r3, [r6, #4]
   14e58:	cmp	r3, #0
   14e5c:	beq	14f3c <__assert_fail@plt+0x3f88>
   14e60:	mov	r1, r8
   14e64:	mov	r0, r5
   14e68:	blx	r3
   14e6c:	cmp	r0, #0
   14e70:	movne	r5, r0
   14e74:	b	14f3c <__assert_fail@plt+0x3f88>
   14e78:	ldr	r3, [r6]
   14e7c:	mov	r0, r8
   14e80:	blx	r3
   14e84:	cmp	r0, #0
   14e88:	beq	14f14 <__assert_fail@plt+0x3f60>
   14e8c:	mov	r2, r8
   14e90:	mov	r1, r5
   14e94:	bl	10d74 <memcpy@plt>
   14e98:	mov	r5, r0
   14e9c:	b	14f3c <__assert_fail@plt+0x3f88>
   14ea0:	cmn	r4, #-1073741822	; 0xc0000002
   14ea4:	bgt	14f00 <__assert_fail@plt+0x3f4c>
   14ea8:	lsl	r4, r4, #1
   14eac:	add	r4, r4, #1
   14eb0:	ldr	r3, [r6]
   14eb4:	mov	r0, r4
   14eb8:	blx	r3
   14ebc:	subs	r5, r0, #0
   14ec0:	beq	14f18 <__assert_fail@plt+0x3f64>
   14ec4:	mov	r3, r4
   14ec8:	mov	r2, r5
   14ecc:	mov	r1, r9
   14ed0:	mov	r0, r8
   14ed4:	blx	sl
   14ed8:	cmp	r0, #0
   14edc:	blt	14e00 <__assert_fail@plt+0x3e4c>
   14ee0:	cmp	r4, r0
   14ee4:	bgt	14e30 <__assert_fail@plt+0x3e7c>
   14ee8:	cmp	r7, r5
   14eec:	beq	14ea0 <__assert_fail@plt+0x3eec>
   14ef0:	ldr	r3, [r6, #8]
   14ef4:	mov	r0, r5
   14ef8:	blx	r3
   14efc:	b	14ea0 <__assert_fail@plt+0x3eec>
   14f00:	bl	10edc <__errno_location@plt>
   14f04:	mov	r3, #36	; 0x24
   14f08:	str	r3, [r0]
   14f0c:	mov	r5, #0
   14f10:	b	14f3c <__assert_fail@plt+0x3f88>
   14f14:	mov	r4, r8
   14f18:	ldr	r3, [r6, #12]
   14f1c:	cmp	r3, #0
   14f20:	beq	14f2c <__assert_fail@plt+0x3f78>
   14f24:	mov	r0, r4
   14f28:	blx	r3
   14f2c:	bl	10edc <__errno_location@plt>
   14f30:	mov	r3, #12
   14f34:	str	r3, [r0]
   14f38:	mov	r5, #0
   14f3c:	mov	r0, r5
   14f40:	add	sp, sp, #1024	; 0x400
   14f44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f48:	andeq	r6, r1, ip, ror r7
   14f4c:	push	{r4, r5, r6, lr}
   14f50:	mov	r5, r0
   14f54:	bl	10e1c <__fpending@plt>
   14f58:	mov	r6, r0
   14f5c:	ldr	r4, [r5]
   14f60:	and	r4, r4, #32
   14f64:	mov	r0, r5
   14f68:	bl	14fc4 <__assert_fail@plt+0x4010>
   14f6c:	cmp	r4, #0
   14f70:	bne	14f98 <__assert_fail@plt+0x3fe4>
   14f74:	cmp	r0, #0
   14f78:	popeq	{r4, r5, r6, pc}
   14f7c:	cmp	r6, #0
   14f80:	bne	14fb4 <__assert_fail@plt+0x4000>
   14f84:	bl	10edc <__errno_location@plt>
   14f88:	ldr	r0, [r0]
   14f8c:	subs	r0, r0, #9
   14f90:	mvnne	r0, #0
   14f94:	pop	{r4, r5, r6, pc}
   14f98:	cmp	r0, #0
   14f9c:	bne	14fbc <__assert_fail@plt+0x4008>
   14fa0:	bl	10edc <__errno_location@plt>
   14fa4:	mov	r3, #0
   14fa8:	str	r3, [r0]
   14fac:	mvn	r0, #0
   14fb0:	pop	{r4, r5, r6, pc}
   14fb4:	mvn	r0, #0
   14fb8:	pop	{r4, r5, r6, pc}
   14fbc:	mvn	r0, #0
   14fc0:	pop	{r4, r5, r6, pc}
   14fc4:	push	{r4, r5, r6, lr}
   14fc8:	sub	sp, sp, #8
   14fcc:	mov	r4, r0
   14fd0:	bl	10f0c <fileno@plt>
   14fd4:	cmp	r0, #0
   14fd8:	blt	15050 <__assert_fail@plt+0x409c>
   14fdc:	mov	r0, r4
   14fe0:	bl	10e70 <__freading@plt>
   14fe4:	cmp	r0, #0
   14fe8:	beq	1501c <__assert_fail@plt+0x4068>
   14fec:	mov	r0, r4
   14ff0:	bl	10f0c <fileno@plt>
   14ff4:	mov	r3, #1
   14ff8:	str	r3, [sp]
   14ffc:	mov	r2, #0
   15000:	mov	r3, #0
   15004:	bl	10e04 <lseek64@plt>
   15008:	mvn	r2, #0
   1500c:	mvn	r3, #0
   15010:	cmp	r1, r3
   15014:	cmpeq	r0, r2
   15018:	beq	1505c <__assert_fail@plt+0x40a8>
   1501c:	mov	r0, r4
   15020:	bl	1506c <__assert_fail@plt+0x40b8>
   15024:	cmp	r0, #0
   15028:	beq	1505c <__assert_fail@plt+0x40a8>
   1502c:	bl	10edc <__errno_location@plt>
   15030:	mov	r5, r0
   15034:	ldr	r6, [r0]
   15038:	mov	r0, r4
   1503c:	bl	10f30 <fclose@plt>
   15040:	cmp	r6, #0
   15044:	strne	r6, [r5]
   15048:	mvnne	r0, #0
   1504c:	b	15064 <__assert_fail@plt+0x40b0>
   15050:	mov	r0, r4
   15054:	bl	10f30 <fclose@plt>
   15058:	b	15064 <__assert_fail@plt+0x40b0>
   1505c:	mov	r0, r4
   15060:	bl	10f30 <fclose@plt>
   15064:	add	sp, sp, #8
   15068:	pop	{r4, r5, r6, pc}
   1506c:	push	{r4, lr}
   15070:	sub	sp, sp, #8
   15074:	subs	r4, r0, #0
   15078:	beq	1508c <__assert_fail@plt+0x40d8>
   1507c:	mov	r0, r4
   15080:	bl	10e70 <__freading@plt>
   15084:	cmp	r0, #0
   15088:	bne	1509c <__assert_fail@plt+0x40e8>
   1508c:	mov	r0, r4
   15090:	bl	10d50 <fflush@plt>
   15094:	add	sp, sp, #8
   15098:	pop	{r4, pc}
   1509c:	ldr	r3, [r4]
   150a0:	tst	r3, #256	; 0x100
   150a4:	bne	150b4 <__assert_fail@plt+0x4100>
   150a8:	mov	r0, r4
   150ac:	bl	10d50 <fflush@plt>
   150b0:	b	15094 <__assert_fail@plt+0x40e0>
   150b4:	mov	r3, #1
   150b8:	str	r3, [sp]
   150bc:	mov	r2, #0
   150c0:	mov	r3, #0
   150c4:	mov	r0, r4
   150c8:	bl	150d0 <__assert_fail@plt+0x411c>
   150cc:	b	150a8 <__assert_fail@plt+0x40f4>
   150d0:	push	{r4, r5, r6, r7, lr}
   150d4:	sub	sp, sp, #12
   150d8:	mov	r4, r0
   150dc:	mov	r6, r2
   150e0:	mov	r7, r3
   150e4:	ldr	r5, [sp, #32]
   150e8:	ldr	r2, [r0, #8]
   150ec:	ldr	r3, [r0, #4]
   150f0:	cmp	r2, r3
   150f4:	beq	15114 <__assert_fail@plt+0x4160>
   150f8:	str	r5, [sp]
   150fc:	mov	r2, r6
   15100:	mov	r3, r7
   15104:	mov	r0, r4
   15108:	bl	10f3c <fseeko64@plt>
   1510c:	add	sp, sp, #12
   15110:	pop	{r4, r5, r6, r7, pc}
   15114:	ldr	r2, [r0, #20]
   15118:	ldr	r3, [r0, #16]
   1511c:	cmp	r2, r3
   15120:	bne	150f8 <__assert_fail@plt+0x4144>
   15124:	ldr	r3, [r0, #36]	; 0x24
   15128:	cmp	r3, #0
   1512c:	bne	150f8 <__assert_fail@plt+0x4144>
   15130:	bl	10f0c <fileno@plt>
   15134:	str	r5, [sp]
   15138:	mov	r2, r6
   1513c:	mov	r3, r7
   15140:	bl	10e04 <lseek64@plt>
   15144:	mvn	r2, #0
   15148:	mvn	r3, #0
   1514c:	cmp	r1, r3
   15150:	cmpeq	r0, r2
   15154:	beq	15170 <__assert_fail@plt+0x41bc>
   15158:	ldr	r3, [r4]
   1515c:	bic	r3, r3, #16
   15160:	str	r3, [r4]
   15164:	strd	r0, [r4, #80]	; 0x50
   15168:	mov	r0, #0
   1516c:	b	1510c <__assert_fail@plt+0x4158>
   15170:	mvn	r0, #0
   15174:	b	1510c <__assert_fail@plt+0x4158>
   15178:	push	{r4, lr}
   1517c:	mov	r0, #14
   15180:	bl	10f78 <nl_langinfo@plt>
   15184:	cmp	r0, #0
   15188:	beq	151a0 <__assert_fail@plt+0x41ec>
   1518c:	ldrb	r2, [r0]
   15190:	ldr	r3, [pc, #16]	; 151a8 <__assert_fail@plt+0x41f4>
   15194:	cmp	r2, #0
   15198:	moveq	r0, r3
   1519c:	pop	{r4, pc}
   151a0:	ldr	r0, [pc]	; 151a8 <__assert_fail@plt+0x41f4>
   151a4:	pop	{r4, pc}
   151a8:	andeq	r6, r1, r4, ror r7
   151ac:	push	{r4, r5, r6, r7, lr}
   151b0:	sub	sp, sp, #12
   151b4:	mov	r7, r1
   151b8:	mov	r5, r2
   151bc:	subs	r6, r0, #0
   151c0:	addeq	r6, sp, #4
   151c4:	mov	r0, r6
   151c8:	bl	10e28 <mbrtowc@plt>
   151cc:	mov	r4, r0
   151d0:	cmp	r5, #0
   151d4:	cmnne	r0, #3
   151d8:	bhi	151e8 <__assert_fail@plt+0x4234>
   151dc:	mov	r0, r4
   151e0:	add	sp, sp, #12
   151e4:	pop	{r4, r5, r6, r7, pc}
   151e8:	mov	r0, #0
   151ec:	bl	15250 <__assert_fail@plt+0x429c>
   151f0:	cmp	r0, #0
   151f4:	ldrbeq	r3, [r7]
   151f8:	streq	r3, [r6]
   151fc:	moveq	r4, #1
   15200:	b	151dc <__assert_fail@plt+0x4228>
   15204:	push	{r4, r5, r6, lr}
   15208:	mov	r6, r0
   1520c:	mov	r5, r1
   15210:	subs	r4, r2, #0
   15214:	beq	15240 <__assert_fail@plt+0x428c>
   15218:	mov	r1, r4
   1521c:	mvn	r0, #0
   15220:	bl	15358 <__assert_fail@plt+0x43a4>
   15224:	cmp	r0, r5
   15228:	bcs	15240 <__assert_fail@plt+0x428c>
   1522c:	bl	10edc <__errno_location@plt>
   15230:	mov	r3, #12
   15234:	str	r3, [r0]
   15238:	mov	r0, #0
   1523c:	pop	{r4, r5, r6, pc}
   15240:	mul	r1, r5, r4
   15244:	mov	r0, r6
   15248:	bl	14c50 <__assert_fail@plt+0x3c9c>
   1524c:	pop	{r4, r5, r6, pc}
   15250:	push	{lr}		; (str lr, [sp, #-4]!)
   15254:	sub	sp, sp, #268	; 0x10c
   15258:	ldr	r2, [pc, #68]	; 152a4 <__assert_fail@plt+0x42f0>
   1525c:	add	r1, sp, #4
   15260:	bl	152b0 <__assert_fail@plt+0x42fc>
   15264:	cmp	r0, #0
   15268:	movne	r0, #0
   1526c:	bne	1529c <__assert_fail@plt+0x42e8>
   15270:	ldr	r1, [pc, #48]	; 152a8 <__assert_fail@plt+0x42f4>
   15274:	add	r0, sp, #4
   15278:	bl	10d44 <strcmp@plt>
   1527c:	cmp	r0, #0
   15280:	moveq	r0, #0
   15284:	beq	1529c <__assert_fail@plt+0x42e8>
   15288:	ldr	r1, [pc, #28]	; 152ac <__assert_fail@plt+0x42f8>
   1528c:	add	r0, sp, #4
   15290:	bl	10d44 <strcmp@plt>
   15294:	adds	r0, r0, #0
   15298:	movne	r0, #1
   1529c:	add	sp, sp, #268	; 0x10c
   152a0:	pop	{pc}		; (ldr pc, [sp], #4)
   152a4:	andeq	r0, r0, r1, lsl #2
   152a8:	andeq	r6, r1, ip, lsl #15
   152ac:	muleq	r1, r0, r7
   152b0:	push	{r4, r5, r6, lr}
   152b4:	mov	r6, r1
   152b8:	mov	r4, r2
   152bc:	mov	r1, #0
   152c0:	bl	10f54 <setlocale@plt>
   152c4:	subs	r5, r0, #0
   152c8:	beq	152ec <__assert_fail@plt+0x4338>
   152cc:	mov	r0, r5
   152d0:	bl	10ec4 <strlen@plt>
   152d4:	cmp	r4, r0
   152d8:	bhi	15304 <__assert_fail@plt+0x4350>
   152dc:	cmp	r4, #0
   152e0:	bne	1531c <__assert_fail@plt+0x4368>
   152e4:	mov	r0, #34	; 0x22
   152e8:	pop	{r4, r5, r6, pc}
   152ec:	cmp	r4, #0
   152f0:	beq	15340 <__assert_fail@plt+0x438c>
   152f4:	mov	r3, #0
   152f8:	strb	r3, [r6]
   152fc:	mov	r0, #22
   15300:	pop	{r4, r5, r6, pc}
   15304:	add	r2, r0, #1
   15308:	mov	r1, r5
   1530c:	mov	r0, r6
   15310:	bl	10d74 <memcpy@plt>
   15314:	mov	r0, #0
   15318:	pop	{r4, r5, r6, pc}
   1531c:	sub	r4, r4, #1
   15320:	mov	r2, r4
   15324:	mov	r1, r5
   15328:	mov	r0, r6
   1532c:	bl	10d74 <memcpy@plt>
   15330:	mov	r3, #0
   15334:	strb	r3, [r6, r4]
   15338:	mov	r0, #34	; 0x22
   1533c:	pop	{r4, r5, r6, pc}
   15340:	mov	r0, #22
   15344:	pop	{r4, r5, r6, pc}
   15348:	push	{r4, lr}
   1534c:	mov	r1, #0
   15350:	bl	10f54 <setlocale@plt>
   15354:	pop	{r4, pc}
   15358:	subs	r2, r1, #1
   1535c:	bxeq	lr
   15360:	bcc	15538 <__assert_fail@plt+0x4584>
   15364:	cmp	r0, r1
   15368:	bls	1551c <__assert_fail@plt+0x4568>
   1536c:	tst	r1, r2
   15370:	beq	15528 <__assert_fail@plt+0x4574>
   15374:	clz	r3, r0
   15378:	clz	r2, r1
   1537c:	sub	r3, r2, r3
   15380:	rsbs	r3, r3, #31
   15384:	addne	r3, r3, r3, lsl #1
   15388:	mov	r2, #0
   1538c:	addne	pc, pc, r3, lsl #2
   15390:	nop			; (mov r0, r0)
   15394:	cmp	r0, r1, lsl #31
   15398:	adc	r2, r2, r2
   1539c:	subcs	r0, r0, r1, lsl #31
   153a0:	cmp	r0, r1, lsl #30
   153a4:	adc	r2, r2, r2
   153a8:	subcs	r0, r0, r1, lsl #30
   153ac:	cmp	r0, r1, lsl #29
   153b0:	adc	r2, r2, r2
   153b4:	subcs	r0, r0, r1, lsl #29
   153b8:	cmp	r0, r1, lsl #28
   153bc:	adc	r2, r2, r2
   153c0:	subcs	r0, r0, r1, lsl #28
   153c4:	cmp	r0, r1, lsl #27
   153c8:	adc	r2, r2, r2
   153cc:	subcs	r0, r0, r1, lsl #27
   153d0:	cmp	r0, r1, lsl #26
   153d4:	adc	r2, r2, r2
   153d8:	subcs	r0, r0, r1, lsl #26
   153dc:	cmp	r0, r1, lsl #25
   153e0:	adc	r2, r2, r2
   153e4:	subcs	r0, r0, r1, lsl #25
   153e8:	cmp	r0, r1, lsl #24
   153ec:	adc	r2, r2, r2
   153f0:	subcs	r0, r0, r1, lsl #24
   153f4:	cmp	r0, r1, lsl #23
   153f8:	adc	r2, r2, r2
   153fc:	subcs	r0, r0, r1, lsl #23
   15400:	cmp	r0, r1, lsl #22
   15404:	adc	r2, r2, r2
   15408:	subcs	r0, r0, r1, lsl #22
   1540c:	cmp	r0, r1, lsl #21
   15410:	adc	r2, r2, r2
   15414:	subcs	r0, r0, r1, lsl #21
   15418:	cmp	r0, r1, lsl #20
   1541c:	adc	r2, r2, r2
   15420:	subcs	r0, r0, r1, lsl #20
   15424:	cmp	r0, r1, lsl #19
   15428:	adc	r2, r2, r2
   1542c:	subcs	r0, r0, r1, lsl #19
   15430:	cmp	r0, r1, lsl #18
   15434:	adc	r2, r2, r2
   15438:	subcs	r0, r0, r1, lsl #18
   1543c:	cmp	r0, r1, lsl #17
   15440:	adc	r2, r2, r2
   15444:	subcs	r0, r0, r1, lsl #17
   15448:	cmp	r0, r1, lsl #16
   1544c:	adc	r2, r2, r2
   15450:	subcs	r0, r0, r1, lsl #16
   15454:	cmp	r0, r1, lsl #15
   15458:	adc	r2, r2, r2
   1545c:	subcs	r0, r0, r1, lsl #15
   15460:	cmp	r0, r1, lsl #14
   15464:	adc	r2, r2, r2
   15468:	subcs	r0, r0, r1, lsl #14
   1546c:	cmp	r0, r1, lsl #13
   15470:	adc	r2, r2, r2
   15474:	subcs	r0, r0, r1, lsl #13
   15478:	cmp	r0, r1, lsl #12
   1547c:	adc	r2, r2, r2
   15480:	subcs	r0, r0, r1, lsl #12
   15484:	cmp	r0, r1, lsl #11
   15488:	adc	r2, r2, r2
   1548c:	subcs	r0, r0, r1, lsl #11
   15490:	cmp	r0, r1, lsl #10
   15494:	adc	r2, r2, r2
   15498:	subcs	r0, r0, r1, lsl #10
   1549c:	cmp	r0, r1, lsl #9
   154a0:	adc	r2, r2, r2
   154a4:	subcs	r0, r0, r1, lsl #9
   154a8:	cmp	r0, r1, lsl #8
   154ac:	adc	r2, r2, r2
   154b0:	subcs	r0, r0, r1, lsl #8
   154b4:	cmp	r0, r1, lsl #7
   154b8:	adc	r2, r2, r2
   154bc:	subcs	r0, r0, r1, lsl #7
   154c0:	cmp	r0, r1, lsl #6
   154c4:	adc	r2, r2, r2
   154c8:	subcs	r0, r0, r1, lsl #6
   154cc:	cmp	r0, r1, lsl #5
   154d0:	adc	r2, r2, r2
   154d4:	subcs	r0, r0, r1, lsl #5
   154d8:	cmp	r0, r1, lsl #4
   154dc:	adc	r2, r2, r2
   154e0:	subcs	r0, r0, r1, lsl #4
   154e4:	cmp	r0, r1, lsl #3
   154e8:	adc	r2, r2, r2
   154ec:	subcs	r0, r0, r1, lsl #3
   154f0:	cmp	r0, r1, lsl #2
   154f4:	adc	r2, r2, r2
   154f8:	subcs	r0, r0, r1, lsl #2
   154fc:	cmp	r0, r1, lsl #1
   15500:	adc	r2, r2, r2
   15504:	subcs	r0, r0, r1, lsl #1
   15508:	cmp	r0, r1
   1550c:	adc	r2, r2, r2
   15510:	subcs	r0, r0, r1
   15514:	mov	r0, r2
   15518:	bx	lr
   1551c:	moveq	r0, #1
   15520:	movne	r0, #0
   15524:	bx	lr
   15528:	clz	r2, r1
   1552c:	rsb	r2, r2, #31
   15530:	lsr	r0, r0, r2
   15534:	bx	lr
   15538:	cmp	r0, #0
   1553c:	mvnne	r0, #0
   15540:	b	157e0 <__assert_fail@plt+0x482c>
   15544:	cmp	r1, #0
   15548:	beq	15538 <__assert_fail@plt+0x4584>
   1554c:	push	{r0, r1, lr}
   15550:	bl	15358 <__assert_fail@plt+0x43a4>
   15554:	pop	{r1, r2, lr}
   15558:	mul	r3, r2, r0
   1555c:	sub	r1, r1, r3
   15560:	bx	lr
   15564:	cmp	r1, #0
   15568:	beq	15774 <__assert_fail@plt+0x47c0>
   1556c:	eor	ip, r0, r1
   15570:	rsbmi	r1, r1, #0
   15574:	subs	r2, r1, #1
   15578:	beq	15740 <__assert_fail@plt+0x478c>
   1557c:	movs	r3, r0
   15580:	rsbmi	r3, r0, #0
   15584:	cmp	r3, r1
   15588:	bls	1574c <__assert_fail@plt+0x4798>
   1558c:	tst	r1, r2
   15590:	beq	1575c <__assert_fail@plt+0x47a8>
   15594:	clz	r2, r3
   15598:	clz	r0, r1
   1559c:	sub	r2, r0, r2
   155a0:	rsbs	r2, r2, #31
   155a4:	addne	r2, r2, r2, lsl #1
   155a8:	mov	r0, #0
   155ac:	addne	pc, pc, r2, lsl #2
   155b0:	nop			; (mov r0, r0)
   155b4:	cmp	r3, r1, lsl #31
   155b8:	adc	r0, r0, r0
   155bc:	subcs	r3, r3, r1, lsl #31
   155c0:	cmp	r3, r1, lsl #30
   155c4:	adc	r0, r0, r0
   155c8:	subcs	r3, r3, r1, lsl #30
   155cc:	cmp	r3, r1, lsl #29
   155d0:	adc	r0, r0, r0
   155d4:	subcs	r3, r3, r1, lsl #29
   155d8:	cmp	r3, r1, lsl #28
   155dc:	adc	r0, r0, r0
   155e0:	subcs	r3, r3, r1, lsl #28
   155e4:	cmp	r3, r1, lsl #27
   155e8:	adc	r0, r0, r0
   155ec:	subcs	r3, r3, r1, lsl #27
   155f0:	cmp	r3, r1, lsl #26
   155f4:	adc	r0, r0, r0
   155f8:	subcs	r3, r3, r1, lsl #26
   155fc:	cmp	r3, r1, lsl #25
   15600:	adc	r0, r0, r0
   15604:	subcs	r3, r3, r1, lsl #25
   15608:	cmp	r3, r1, lsl #24
   1560c:	adc	r0, r0, r0
   15610:	subcs	r3, r3, r1, lsl #24
   15614:	cmp	r3, r1, lsl #23
   15618:	adc	r0, r0, r0
   1561c:	subcs	r3, r3, r1, lsl #23
   15620:	cmp	r3, r1, lsl #22
   15624:	adc	r0, r0, r0
   15628:	subcs	r3, r3, r1, lsl #22
   1562c:	cmp	r3, r1, lsl #21
   15630:	adc	r0, r0, r0
   15634:	subcs	r3, r3, r1, lsl #21
   15638:	cmp	r3, r1, lsl #20
   1563c:	adc	r0, r0, r0
   15640:	subcs	r3, r3, r1, lsl #20
   15644:	cmp	r3, r1, lsl #19
   15648:	adc	r0, r0, r0
   1564c:	subcs	r3, r3, r1, lsl #19
   15650:	cmp	r3, r1, lsl #18
   15654:	adc	r0, r0, r0
   15658:	subcs	r3, r3, r1, lsl #18
   1565c:	cmp	r3, r1, lsl #17
   15660:	adc	r0, r0, r0
   15664:	subcs	r3, r3, r1, lsl #17
   15668:	cmp	r3, r1, lsl #16
   1566c:	adc	r0, r0, r0
   15670:	subcs	r3, r3, r1, lsl #16
   15674:	cmp	r3, r1, lsl #15
   15678:	adc	r0, r0, r0
   1567c:	subcs	r3, r3, r1, lsl #15
   15680:	cmp	r3, r1, lsl #14
   15684:	adc	r0, r0, r0
   15688:	subcs	r3, r3, r1, lsl #14
   1568c:	cmp	r3, r1, lsl #13
   15690:	adc	r0, r0, r0
   15694:	subcs	r3, r3, r1, lsl #13
   15698:	cmp	r3, r1, lsl #12
   1569c:	adc	r0, r0, r0
   156a0:	subcs	r3, r3, r1, lsl #12
   156a4:	cmp	r3, r1, lsl #11
   156a8:	adc	r0, r0, r0
   156ac:	subcs	r3, r3, r1, lsl #11
   156b0:	cmp	r3, r1, lsl #10
   156b4:	adc	r0, r0, r0
   156b8:	subcs	r3, r3, r1, lsl #10
   156bc:	cmp	r3, r1, lsl #9
   156c0:	adc	r0, r0, r0
   156c4:	subcs	r3, r3, r1, lsl #9
   156c8:	cmp	r3, r1, lsl #8
   156cc:	adc	r0, r0, r0
   156d0:	subcs	r3, r3, r1, lsl #8
   156d4:	cmp	r3, r1, lsl #7
   156d8:	adc	r0, r0, r0
   156dc:	subcs	r3, r3, r1, lsl #7
   156e0:	cmp	r3, r1, lsl #6
   156e4:	adc	r0, r0, r0
   156e8:	subcs	r3, r3, r1, lsl #6
   156ec:	cmp	r3, r1, lsl #5
   156f0:	adc	r0, r0, r0
   156f4:	subcs	r3, r3, r1, lsl #5
   156f8:	cmp	r3, r1, lsl #4
   156fc:	adc	r0, r0, r0
   15700:	subcs	r3, r3, r1, lsl #4
   15704:	cmp	r3, r1, lsl #3
   15708:	adc	r0, r0, r0
   1570c:	subcs	r3, r3, r1, lsl #3
   15710:	cmp	r3, r1, lsl #2
   15714:	adc	r0, r0, r0
   15718:	subcs	r3, r3, r1, lsl #2
   1571c:	cmp	r3, r1, lsl #1
   15720:	adc	r0, r0, r0
   15724:	subcs	r3, r3, r1, lsl #1
   15728:	cmp	r3, r1
   1572c:	adc	r0, r0, r0
   15730:	subcs	r3, r3, r1
   15734:	cmp	ip, #0
   15738:	rsbmi	r0, r0, #0
   1573c:	bx	lr
   15740:	teq	ip, r0
   15744:	rsbmi	r0, r0, #0
   15748:	bx	lr
   1574c:	movcc	r0, #0
   15750:	asreq	r0, ip, #31
   15754:	orreq	r0, r0, #1
   15758:	bx	lr
   1575c:	clz	r2, r1
   15760:	rsb	r2, r2, #31
   15764:	cmp	ip, #0
   15768:	lsr	r0, r3, r2
   1576c:	rsbmi	r0, r0, #0
   15770:	bx	lr
   15774:	cmp	r0, #0
   15778:	mvngt	r0, #-2147483648	; 0x80000000
   1577c:	movlt	r0, #-2147483648	; 0x80000000
   15780:	b	157e0 <__assert_fail@plt+0x482c>
   15784:	cmp	r1, #0
   15788:	beq	15774 <__assert_fail@plt+0x47c0>
   1578c:	push	{r0, r1, lr}
   15790:	bl	1556c <__assert_fail@plt+0x45b8>
   15794:	pop	{r1, r2, lr}
   15798:	mul	r3, r2, r0
   1579c:	sub	r1, r1, r3
   157a0:	bx	lr
   157a4:	cmp	r3, #0
   157a8:	cmpeq	r2, #0
   157ac:	bne	157c4 <__assert_fail@plt+0x4810>
   157b0:	cmp	r1, #0
   157b4:	cmpeq	r0, #0
   157b8:	mvnne	r1, #0
   157bc:	mvnne	r0, #0
   157c0:	b	157e0 <__assert_fail@plt+0x482c>
   157c4:	sub	sp, sp, #8
   157c8:	push	{sp, lr}
   157cc:	bl	157f0 <__assert_fail@plt+0x483c>
   157d0:	ldr	lr, [sp, #4]
   157d4:	add	sp, sp, #8
   157d8:	pop	{r2, r3}
   157dc:	bx	lr
   157e0:	push	{r1, lr}
   157e4:	mov	r0, #8
   157e8:	bl	10d38 <raise@plt>
   157ec:	pop	{r1, pc}
   157f0:	cmp	r1, r3
   157f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   157f8:	cmpeq	r0, r2
   157fc:	mov	r4, r0
   15800:	mov	r5, r1
   15804:	ldr	r9, [sp, #28]
   15808:	movcc	r0, #0
   1580c:	movcc	r1, #0
   15810:	bcc	15908 <__assert_fail@plt+0x4954>
   15814:	cmp	r3, #0
   15818:	clzeq	ip, r2
   1581c:	clzne	ip, r3
   15820:	addeq	ip, ip, #32
   15824:	cmp	r5, #0
   15828:	clzeq	r1, r4
   1582c:	addeq	r1, r1, #32
   15830:	clzne	r1, r5
   15834:	sub	ip, ip, r1
   15838:	sub	lr, ip, #32
   1583c:	lsl	r7, r3, ip
   15840:	rsb	r8, ip, #32
   15844:	orr	r7, r7, r2, lsl lr
   15848:	orr	r7, r7, r2, lsr r8
   1584c:	lsl	r6, r2, ip
   15850:	cmp	r5, r7
   15854:	cmpeq	r4, r6
   15858:	movcc	r0, #0
   1585c:	movcc	r1, #0
   15860:	bcc	1587c <__assert_fail@plt+0x48c8>
   15864:	mov	r3, #1
   15868:	subs	r4, r4, r6
   1586c:	lsl	r1, r3, lr
   15870:	lsl	r0, r3, ip
   15874:	orr	r1, r1, r3, lsr r8
   15878:	sbc	r5, r5, r7
   1587c:	cmp	ip, #0
   15880:	beq	15908 <__assert_fail@plt+0x4954>
   15884:	lsrs	r3, r7, #1
   15888:	rrx	r2, r6
   1588c:	mov	r6, ip
   15890:	b	158b4 <__assert_fail@plt+0x4900>
   15894:	subs	r4, r4, r2
   15898:	sbc	r5, r5, r3
   1589c:	adds	r4, r4, r4
   158a0:	adc	r5, r5, r5
   158a4:	adds	r4, r4, #1
   158a8:	adc	r5, r5, #0
   158ac:	subs	r6, r6, #1
   158b0:	beq	158d0 <__assert_fail@plt+0x491c>
   158b4:	cmp	r5, r3
   158b8:	cmpeq	r4, r2
   158bc:	bcs	15894 <__assert_fail@plt+0x48e0>
   158c0:	adds	r4, r4, r4
   158c4:	adc	r5, r5, r5
   158c8:	subs	r6, r6, #1
   158cc:	bne	158b4 <__assert_fail@plt+0x4900>
   158d0:	lsr	r6, r4, ip
   158d4:	lsr	r7, r5, ip
   158d8:	orr	r6, r6, r5, lsl r8
   158dc:	adds	r2, r0, r4
   158e0:	orr	r6, r6, r5, lsr lr
   158e4:	adc	r3, r1, r5
   158e8:	lsl	r1, r7, ip
   158ec:	orr	r1, r1, r6, lsl lr
   158f0:	lsl	r0, r6, ip
   158f4:	orr	r1, r1, r6, lsr r8
   158f8:	subs	r0, r2, r0
   158fc:	mov	r4, r6
   15900:	mov	r5, r7
   15904:	sbc	r1, r3, r1
   15908:	cmp	r9, #0
   1590c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   15910:	strd	r4, [r9]
   15914:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15918:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1591c:	mov	r7, r0
   15920:	ldr	r6, [pc, #72]	; 15970 <__assert_fail@plt+0x49bc>
   15924:	ldr	r5, [pc, #72]	; 15974 <__assert_fail@plt+0x49c0>
   15928:	add	r6, pc, r6
   1592c:	add	r5, pc, r5
   15930:	sub	r6, r6, r5
   15934:	mov	r8, r1
   15938:	mov	r9, r2
   1593c:	bl	10d00 <calloc@plt-0x20>
   15940:	asrs	r6, r6, #2
   15944:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15948:	mov	r4, #0
   1594c:	add	r4, r4, #1
   15950:	ldr	r3, [r5], #4
   15954:	mov	r2, r9
   15958:	mov	r1, r8
   1595c:	mov	r0, r7
   15960:	blx	r3
   15964:	cmp	r6, r4
   15968:	bne	1594c <__assert_fail@plt+0x4998>
   1596c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15970:	andeq	r1, r1, r0, ror #11
   15974:	ldrdeq	r1, [r1], -r8
   15978:	bx	lr
   1597c:	ldr	r3, [pc, #12]	; 15990 <__assert_fail@plt+0x49dc>
   15980:	mov	r1, #0
   15984:	add	r3, pc, r3
   15988:	ldr	r2, [r3]
   1598c:	b	10ee8 <__cxa_atexit@plt>
   15990:	andeq	r1, r1, r8, ror #14

Disassembly of section .fini:

00015994 <.fini>:
   15994:	push	{r3, lr}
   15998:	pop	{r3, pc}
