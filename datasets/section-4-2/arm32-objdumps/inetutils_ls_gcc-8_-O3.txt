
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010b58 <.init>:
   10b58:	push	{r3, lr}
   10b5c:	bl	10e40 <__assert_fail@plt+0x4c>
   10b60:	pop	{r3, pc}

Disassembly of section .plt:

00010b64 <fstatfs64@plt-0x14>:
   10b64:	push	{lr}		; (str lr, [sp, #-4]!)
   10b68:	ldr	lr, [pc, #4]	; 10b74 <fstatfs64@plt-0x4>
   10b6c:	add	lr, pc, lr
   10b70:	ldr	pc, [lr, #8]!
   10b74:	andeq	r9, r1, ip, lsl #9

00010b78 <fstatfs64@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #102400	; 0x19000
   10b80:	ldr	pc, [ip, #1164]!	; 0x48c

00010b84 <calloc@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #102400	; 0x19000
   10b8c:	ldr	pc, [ip, #1156]!	; 0x484

00010b90 <raise@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #102400	; 0x19000
   10b98:	ldr	pc, [ip, #1148]!	; 0x47c

00010b9c <strcmp@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #102400	; 0x19000
   10ba4:	ldr	pc, [ip, #1140]!	; 0x474

00010ba8 <strtol@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #102400	; 0x19000
   10bb0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bb4 <getpwuid@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #102400	; 0x19000
   10bbc:	ldr	pc, [ip, #1124]!	; 0x464

00010bc0 <printf@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #102400	; 0x19000
   10bc8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bcc <getuid@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #102400	; 0x19000
   10bd4:	ldr	pc, [ip, #1108]!	; 0x454

00010bd8 <memmove@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #102400	; 0x19000
   10be0:	ldr	pc, [ip, #1100]!	; 0x44c

00010be4 <free@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #102400	; 0x19000
   10bec:	ldr	pc, [ip, #1092]!	; 0x444

00010bf0 <memcpy@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #102400	; 0x19000
   10bf8:	ldr	pc, [ip, #1084]!	; 0x43c

00010bfc <time@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #102400	; 0x19000
   10c04:	ldr	pc, [ip, #1076]!	; 0x434

00010c08 <ctime@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #102400	; 0x19000
   10c10:	ldr	pc, [ip, #1068]!	; 0x42c

00010c14 <realloc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #102400	; 0x19000
   10c1c:	ldr	pc, [ip, #1060]!	; 0x424

00010c20 <funlockfile@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #102400	; 0x19000
   10c28:	ldr	pc, [ip, #1052]!	; 0x41c

00010c2c <__fxstatat64@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #102400	; 0x19000
   10c34:	ldr	pc, [ip, #1044]!	; 0x414

00010c38 <__fxstat64@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #102400	; 0x19000
   10c40:	ldr	pc, [ip, #1036]!	; 0x40c

00010c44 <readlink@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #102400	; 0x19000
   10c4c:	ldr	pc, [ip, #1028]!	; 0x404

00010c50 <fwrite@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #102400	; 0x19000
   10c58:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c5c <ioctl@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #102400	; 0x19000
   10c64:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c68 <strcpy@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #102400	; 0x19000
   10c70:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c74 <open64@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #102400	; 0x19000
   10c7c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c80 <getenv@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #102400	; 0x19000
   10c88:	ldr	pc, [ip, #988]!	; 0x3dc

00010c8c <malloc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #102400	; 0x19000
   10c94:	ldr	pc, [ip, #980]!	; 0x3d4

00010c98 <__libc_start_main@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #102400	; 0x19000
   10ca0:	ldr	pc, [ip, #972]!	; 0x3cc

00010ca4 <strerror@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #102400	; 0x19000
   10cac:	ldr	pc, [ip, #964]!	; 0x3c4

00010cb0 <__gmon_start__@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #102400	; 0x19000
   10cb8:	ldr	pc, [ip, #956]!	; 0x3bc

00010cbc <__ctype_b_loc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #102400	; 0x19000
   10cc4:	ldr	pc, [ip, #948]!	; 0x3b4

00010cc8 <strlen@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #102400	; 0x19000
   10cd0:	ldr	pc, [ip, #940]!	; 0x3ac

00010cd4 <strchr@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #102400	; 0x19000
   10cdc:	ldr	pc, [ip, #932]!	; 0x3a4

00010ce0 <openat64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #102400	; 0x19000
   10ce8:	ldr	pc, [ip, #924]!	; 0x39c

00010cec <fprintf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #102400	; 0x19000
   10cf4:	ldr	pc, [ip, #916]!	; 0x394

00010cf8 <__errno_location@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #102400	; 0x19000
   10d00:	ldr	pc, [ip, #908]!	; 0x38c

00010d04 <snprintf@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #900]!	; 0x384

00010d10 <memset@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #892]!	; 0x37c

00010d1c <fcntl64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #884]!	; 0x374

00010d28 <strrchr@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #876]!	; 0x36c

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #868]!	; 0x364

00010d40 <readdir64@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #860]!	; 0x35c

00010d4c <fdopendir@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #852]!	; 0x354

00010d58 <putc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #844]!	; 0x34c

00010d64 <dirfd@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #836]!	; 0x344

00010d70 <flockfile@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #828]!	; 0x33c

00010d7c <fchdir@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #820]!	; 0x334

00010d88 <qsort@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #812]!	; 0x32c

00010d94 <__xstat64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #804]!	; 0x324

00010da0 <isatty@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #796]!	; 0x31c

00010dac <strncmp@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #788]!	; 0x314

00010db8 <abort@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #780]!	; 0x30c

00010dc4 <close@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #772]!	; 0x304

00010dd0 <__lxstat64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #764]!	; 0x2fc

00010ddc <closedir@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #756]!	; 0x2f4

00010de8 <getgrgid@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #748]!	; 0x2ec

00010df4 <__assert_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #740]!	; 0x2e4

Disassembly of section .text:

00010e00 <.text>:
   10e00:	b	11780 <__assert_fail@plt+0x98c>
   10e04:	mov	fp, #0
   10e08:	mov	lr, #0
   10e0c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e10:	mov	r2, sp
   10e14:	push	{r2}		; (str r2, [sp, #-4]!)
   10e18:	push	{r0}		; (str r0, [sp, #-4]!)
   10e1c:	ldr	ip, [pc, #16]	; 10e34 <__assert_fail@plt+0x40>
   10e20:	push	{ip}		; (str ip, [sp, #-4]!)
   10e24:	ldr	r0, [pc, #12]	; 10e38 <__assert_fail@plt+0x44>
   10e28:	ldr	r3, [pc, #12]	; 10e3c <__assert_fail@plt+0x48>
   10e2c:	bl	10c98 <__libc_start_main@plt>
   10e30:	bl	10db8 <abort@plt>
   10e34:	andeq	r9, r1, r0, ror #1
   10e38:	andeq	r0, r1, r0, lsl #28
   10e3c:	andeq	r9, r1, r0, lsl #1
   10e40:	ldr	r3, [pc, #20]	; 10e5c <__assert_fail@plt+0x68>
   10e44:	ldr	r2, [pc, #20]	; 10e60 <__assert_fail@plt+0x6c>
   10e48:	add	r3, pc, r3
   10e4c:	ldr	r2, [r3, r2]
   10e50:	cmp	r2, #0
   10e54:	bxeq	lr
   10e58:	b	10cb0 <__gmon_start__@plt>
   10e5c:			; <UNDEFINED> instruction: 0x000191b0
   10e60:	andeq	r0, r0, r4, ror #1
   10e64:	ldr	r0, [pc, #24]	; 10e84 <__assert_fail@plt+0x90>
   10e68:	ldr	r3, [pc, #24]	; 10e88 <__assert_fail@plt+0x94>
   10e6c:	cmp	r3, r0
   10e70:	bxeq	lr
   10e74:	ldr	r3, [pc, #16]	; 10e8c <__assert_fail@plt+0x98>
   10e78:	cmp	r3, #0
   10e7c:	bxeq	lr
   10e80:	bx	r3
   10e84:	andeq	sl, r2, r0, lsl r1
   10e88:	andeq	sl, r2, r0, lsl r1
   10e8c:	andeq	r0, r0, r0
   10e90:	ldr	r0, [pc, #36]	; 10ebc <__assert_fail@plt+0xc8>
   10e94:	ldr	r1, [pc, #36]	; 10ec0 <__assert_fail@plt+0xcc>
   10e98:	sub	r1, r1, r0
   10e9c:	asr	r1, r1, #2
   10ea0:	add	r1, r1, r1, lsr #31
   10ea4:	asrs	r1, r1, #1
   10ea8:	bxeq	lr
   10eac:	ldr	r3, [pc, #16]	; 10ec4 <__assert_fail@plt+0xd0>
   10eb0:	cmp	r3, #0
   10eb4:	bxeq	lr
   10eb8:	bx	r3
   10ebc:	andeq	sl, r2, r0, lsl r1
   10ec0:	andeq	sl, r2, r0, lsl r1
   10ec4:	andeq	r0, r0, r0
   10ec8:	push	{r4, lr}
   10ecc:	ldr	r4, [pc, #24]	; 10eec <__assert_fail@plt+0xf8>
   10ed0:	ldrb	r3, [r4]
   10ed4:	cmp	r3, #0
   10ed8:	popne	{r4, pc}
   10edc:	bl	10e64 <__assert_fail@plt+0x70>
   10ee0:	mov	r3, #1
   10ee4:	strb	r3, [r4]
   10ee8:	pop	{r4, pc}
   10eec:	andeq	sl, r2, r8, lsl r1
   10ef0:	b	10e90 <__assert_fail@plt+0x9c>
   10ef4:	ldr	r2, [r0]
   10ef8:	ldrh	r0, [r2, #56]	; 0x38
   10efc:	cmp	r0, #7
   10f00:	beq	10f8c <__assert_fail@plt+0x198>
   10f04:	ldr	r1, [r1]
   10f08:	ldrh	r3, [r1, #56]	; 0x38
   10f0c:	cmp	r3, #7
   10f10:	beq	10f8c <__assert_fail@plt+0x198>
   10f14:	cmp	r3, #10
   10f18:	cmpne	r0, #10
   10f1c:	beq	10f5c <__assert_fail@plt+0x168>
   10f20:	cmp	r0, r3
   10f24:	push	{lr}		; (str lr, [sp, #-4]!)
   10f28:	beq	10f74 <__assert_fail@plt+0x180>
   10f2c:	movw	ip, #41376	; 0xa1a0
   10f30:	movt	ip, #2
   10f34:	ldr	lr, [r2, #48]	; 0x30
   10f38:	ldr	ip, [ip]
   10f3c:	orrs	ip, lr, ip
   10f40:	bne	10f74 <__assert_fail@plt+0x180>
   10f44:	cmp	r0, #1
   10f48:	beq	10f58 <__assert_fail@plt+0x164>
   10f4c:	cmp	r3, #1
   10f50:	bne	10f74 <__assert_fail@plt+0x180>
   10f54:	mvn	r0, #0
   10f58:	pop	{pc}		; (ldr pc, [sp], #4)
   10f5c:	cmp	r3, #10
   10f60:	bne	10f94 <__assert_fail@plt+0x1a0>
   10f64:	cmp	r0, #10
   10f68:	bne	10f9c <__assert_fail@plt+0x1a8>
   10f6c:	mov	r0, r2
   10f70:	b	13048 <__assert_fail@plt+0x2254>
   10f74:	movw	r3, #41244	; 0xa11c
   10f78:	movt	r3, #2
   10f7c:	pop	{lr}		; (ldr lr, [sp], #4)
   10f80:	mov	r0, r2
   10f84:	ldr	r3, [r3]
   10f88:	bx	r3
   10f8c:	mov	r0, #0
   10f90:	bx	lr
   10f94:	mov	r0, #1
   10f98:	bx	lr
   10f9c:	mvn	r0, #0
   10fa0:	bx	lr
   10fa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10fa8:	subs	r4, r1, #0
   10fac:	strd	r6, [sp, #8]
   10fb0:	strd	r8, [sp, #16]
   10fb4:	strd	sl, [sp, #24]
   10fb8:	str	lr, [sp, #32]
   10fbc:	sub	sp, sp, #204	; 0xcc
   10fc0:	str	r0, [sp, #8]
   10fc4:	str	r4, [sp, #76]	; 0x4c
   10fc8:	beq	1129c <__assert_fail@plt+0x4a8>
   10fcc:	movw	r1, #41356	; 0xa18c
   10fd0:	movt	r1, #2
   10fd4:	movw	r3, #41328	; 0xa170
   10fd8:	movt	r3, #2
   10fdc:	movw	r2, #41304	; 0xa158
   10fe0:	movt	r2, #2
   10fe4:	str	r1, [sp, #40]	; 0x28
   10fe8:	ldr	r3, [r3]
   10fec:	mov	r0, #0
   10ff0:	movw	ip, #41368	; 0xa198
   10ff4:	movt	ip, #2
   10ff8:	mov	sl, r0
   10ffc:	ldr	r1, [r1]
   11000:	mov	r5, r0
   11004:	mov	fp, r0
   11008:	str	r0, [sp, #16]
   1100c:	ldr	r2, [r2]
   11010:	str	r0, [sp, #20]
   11014:	str	r0, [sp, #24]
   11018:	orr	r3, r3, r1
   1101c:	str	r0, [sp, #44]	; 0x2c
   11020:	str	r0, [sp, #48]	; 0x30
   11024:	orr	r3, r3, r2
   11028:	mov	r2, #0
   1102c:	str	r3, [sp, #12]
   11030:	movw	r3, #41320	; 0xa168
   11034:	movt	r3, #2
   11038:	str	r0, [sp, #52]	; 0x34
   1103c:	str	r3, [sp, #56]	; 0x38
   11040:	movw	r3, #37104	; 0x90f0
   11044:	movt	r3, #1
   11048:	str	ip, [sp, #60]	; 0x3c
   1104c:	str	r0, [sp, #64]	; 0x40
   11050:	str	r3, [sp, #72]	; 0x48
   11054:	mov	r3, #0
   11058:	strd	r2, [sp, #32]
   1105c:	str	r0, [sp, #68]	; 0x44
   11060:	ldrh	r3, [r4, #56]	; 0x38
   11064:	cmp	r3, #10
   11068:	cmpne	r3, #7
   1106c:	beq	112dc <__assert_fail@plt+0x4e8>
   11070:	ldr	r2, [sp, #8]
   11074:	cmp	r2, #0
   11078:	beq	112b8 <__assert_fail@plt+0x4c4>
   1107c:	ldrb	r3, [r4, #168]	; 0xa8
   11080:	cmp	r3, #46	; 0x2e
   11084:	beq	11320 <__assert_fail@plt+0x52c>
   11088:	ldr	r3, [r4, #52]	; 0x34
   1108c:	cmp	r5, r3
   11090:	movcc	r5, r3
   11094:	ldr	r3, [sp, #12]
   11098:	cmp	r3, #0
   1109c:	beq	11224 <__assert_fail@plt+0x430>
   110a0:	ldr	r3, [sp, #24]
   110a4:	mov	r9, #0
   110a8:	ldr	ip, [r4, #84]	; 0x54
   110ac:	ldrd	r0, [r4, #128]	; 0x80
   110b0:	asr	r7, r3, #31
   110b4:	mov	r6, r3
   110b8:	strd	r6, [sp, #24]
   110bc:	ldrd	r6, [r4, #160]	; 0xa0
   110c0:	strd	r6, [sp]
   110c4:	ldrd	r6, [sp, #24]
   110c8:	cmp	r6, r0
   110cc:	sbcs	r2, r7, r1
   110d0:	ldrd	r6, [r4, #112]	; 0x70
   110d4:	movlt	r3, r0
   110d8:	str	r3, [sp, #24]
   110dc:	ldrd	r2, [sp]
   110e0:	cmp	r3, r9
   110e4:	ldr	r3, [sp]
   110e8:	cmpeq	r2, fp
   110ec:	movhi	fp, r3
   110f0:	ldr	r3, [sp, #20]
   110f4:	cmp	r3, ip
   110f8:	movcc	r3, ip
   110fc:	str	r3, [sp, #20]
   11100:	ldrd	r2, [sp, #32]
   11104:	cmp	r2, r6
   11108:	ldr	r2, [sp, #16]
   1110c:	sbcs	r3, r3, r7
   11110:	ldr	r3, [sp, #40]	; 0x28
   11114:	strdlt	r6, [sp, #32]
   11118:	add	r2, r2, r0
   1111c:	ldr	r3, [r3]
   11120:	str	r2, [sp, #16]
   11124:	cmp	r3, #0
   11128:	beq	11224 <__assert_fail@plt+0x430>
   1112c:	ldr	r3, [sp, #60]	; 0x3c
   11130:	ldr	r0, [r4, #88]	; 0x58
   11134:	ldr	r3, [r3]
   11138:	cmp	r3, #0
   1113c:	beq	11340 <__assert_fail@plt+0x54c>
   11140:	add	r2, sp, #104	; 0x68
   11144:	mov	r1, #0
   11148:	bl	18834 <__assert_fail@plt+0x7a40>
   1114c:	mov	r8, r0
   11150:	add	r2, sp, #128	; 0x80
   11154:	mov	r1, #0
   11158:	ldr	r0, [r4, #92]	; 0x5c
   1115c:	bl	18834 <__assert_fail@plt+0x7a40>
   11160:	str	r0, [sp]
   11164:	mov	r0, r8
   11168:	bl	10cc8 <strlen@plt>
   1116c:	ldr	r3, [sp, #48]	; 0x30
   11170:	mov	r6, r0
   11174:	ldr	r0, [sp]
   11178:	cmp	r3, r6
   1117c:	movlt	r3, r6
   11180:	str	r3, [sp, #48]	; 0x30
   11184:	bl	10cc8 <strlen@plt>
   11188:	ldr	r2, [sp, #44]	; 0x2c
   1118c:	ldr	r3, [sp, #56]	; 0x38
   11190:	cmp	r2, r0
   11194:	movlt	r2, r0
   11198:	ldr	r3, [r3]
   1119c:	str	r2, [sp, #44]	; 0x2c
   111a0:	cmp	r3, #0
   111a4:	beq	111b4 <__assert_fail@plt+0x3c0>
   111a8:	ldr	r2, [sp, #72]	; 0x48
   111ac:	mov	r3, #1
   111b0:	strd	r2, [sp, #64]	; 0x40
   111b4:	add	r7, r6, r0
   111b8:	add	r0, r7, #19
   111bc:	add	r0, r0, r3
   111c0:	bl	18a50 <__assert_fail@plt+0x7c5c>
   111c4:	subs	r9, r0, #0
   111c8:	beq	11470 <__assert_fail@plt+0x67c>
   111cc:	add	r2, r9, #12
   111d0:	add	r6, r6, #13
   111d4:	add	r6, r9, r6
   111d8:	mov	r0, r2
   111dc:	mov	r1, r8
   111e0:	str	r2, [r9]
   111e4:	bl	10c68 <strcpy@plt>
   111e8:	mov	r0, r6
   111ec:	str	r6, [r9, #4]
   111f0:	ldr	r1, [sp]
   111f4:	bl	10c68 <strcpy@plt>
   111f8:	ldr	r3, [sp, #56]	; 0x38
   111fc:	ldr	r2, [r4, #80]	; 0x50
   11200:	ldr	r1, [r3]
   11204:	ldr	r3, [sp, #52]	; 0x34
   11208:	and	r2, r2, #45056	; 0xb000
   1120c:	cmp	r2, #8192	; 0x2000
   11210:	moveq	r3, #1
   11214:	cmp	r1, #0
   11218:	str	r3, [sp, #52]	; 0x34
   1121c:	bne	11380 <__assert_fail@plt+0x58c>
   11220:	str	r9, [r4, #20]
   11224:	add	sl, sl, #1
   11228:	ldr	r4, [r4, #8]
   1122c:	cmp	r4, #0
   11230:	bne	11060 <__assert_fail@plt+0x26c>
   11234:	cmp	sl, #0
   11238:	beq	1129c <__assert_fail@plt+0x4a8>
   1123c:	ldr	r3, [sp, #12]
   11240:	str	sl, [sp, #164]	; 0xa4
   11244:	str	r5, [sp, #168]	; 0xa8
   11248:	cmp	r3, #0
   1124c:	ldr	r3, [sp, #76]	; 0x4c
   11250:	str	r3, [sp, #152]	; 0x98
   11254:	bne	113e8 <__assert_fail@plt+0x5f4>
   11258:	movw	r4, #41244	; 0xa11c
   1125c:	movt	r4, #2
   11260:	add	r0, sp, #152	; 0x98
   11264:	ldr	r3, [r4, #4]
   11268:	blx	r3
   1126c:	ldr	r3, [sp, #40]	; 0x28
   11270:	mov	r2, #1
   11274:	str	r2, [r4, #8]
   11278:	ldr	r3, [r3]
   1127c:	cmp	r3, #0
   11280:	beq	1129c <__assert_fail@plt+0x4a8>
   11284:	ldr	r4, [sp, #76]	; 0x4c
   11288:	ldr	r0, [r4, #20]
   1128c:	bl	13598 <__assert_fail@plt+0x27a4>
   11290:	ldr	r4, [r4, #8]
   11294:	cmp	r4, #0
   11298:	bne	11288 <__assert_fail@plt+0x494>
   1129c:	add	sp, sp, #204	; 0xcc
   112a0:	ldrd	r4, [sp]
   112a4:	ldrd	r6, [sp, #8]
   112a8:	ldrd	r8, [sp, #16]
   112ac:	ldrd	sl, [sp, #24]
   112b0:	add	sp, sp, #32
   112b4:	pop	{pc}		; (ldr pc, [sp], #4)
   112b8:	cmp	r3, #1
   112bc:	bne	11088 <__assert_fail@plt+0x294>
   112c0:	movw	r2, #41376	; 0xa1a0
   112c4:	movt	r2, #2
   112c8:	ldr	r2, [r2]
   112cc:	cmp	r2, #0
   112d0:	bne	11088 <__assert_fail@plt+0x294>
   112d4:	str	r3, [r4, #16]
   112d8:	b	11228 <__assert_fail@plt+0x434>
   112dc:	movw	r3, #41232	; 0xa110
   112e0:	movt	r3, #2
   112e4:	ldr	r0, [r4, #32]
   112e8:	ldr	r6, [r3]
   112ec:	bl	10ca4 <strerror@plt>
   112f0:	mov	r3, r0
   112f4:	add	r2, r4, #168	; 0xa8
   112f8:	movw	r1, #37108	; 0x90f4
   112fc:	movt	r1, #1
   11300:	mov	r0, r6
   11304:	bl	10cec <fprintf@plt>
   11308:	mov	r2, #1
   1130c:	movw	r3, #41352	; 0xa188
   11310:	movt	r3, #2
   11314:	str	r2, [r4, #16]
   11318:	str	r2, [r3]
   1131c:	b	11228 <__assert_fail@plt+0x434>
   11320:	movw	r3, #41392	; 0xa1b0
   11324:	movt	r3, #2
   11328:	ldr	r3, [r3]
   1132c:	cmp	r3, #0
   11330:	bne	11088 <__assert_fail@plt+0x294>
   11334:	mov	r3, #1
   11338:	str	r3, [r4, #16]
   1133c:	b	11228 <__assert_fail@plt+0x434>
   11340:	bl	10bb4 <getpwuid@plt>
   11344:	subs	r3, r0, #0
   11348:	ldr	r0, [r4, #92]	; 0x5c
   1134c:	beq	1139c <__assert_fail@plt+0x5a8>
   11350:	ldr	r8, [r3]
   11354:	bl	10de8 <getgrgid@plt>
   11358:	cmp	r0, #0
   1135c:	beq	113c8 <__assert_fail@plt+0x5d4>
   11360:	ldr	r3, [r0]
   11364:	cmp	r8, #0
   11368:	str	r3, [sp]
   1136c:	beq	113b0 <__assert_fail@plt+0x5bc>
   11370:	ldr	r3, [sp]
   11374:	cmp	r3, #0
   11378:	bne	11164 <__assert_fail@plt+0x370>
   1137c:	b	11150 <__assert_fail@plt+0x35c>
   11380:	add	r7, r7, #14
   11384:	ldr	r1, [sp, #64]	; 0x40
   11388:	add	r7, r9, r7
   1138c:	mov	r0, r7
   11390:	str	r7, [r9, #8]
   11394:	bl	10c68 <strcpy@plt>
   11398:	b	11220 <__assert_fail@plt+0x42c>
   1139c:	bl	10de8 <getgrgid@plt>
   113a0:	subs	r1, r0, #0
   113a4:	beq	114b0 <__assert_fail@plt+0x6bc>
   113a8:	ldr	r3, [r1]
   113ac:	str	r3, [sp]
   113b0:	add	r2, sp, #104	; 0x68
   113b4:	mov	r1, #0
   113b8:	ldr	r0, [r4, #88]	; 0x58
   113bc:	bl	18834 <__assert_fail@plt+0x7a40>
   113c0:	mov	r8, r0
   113c4:	b	11370 <__assert_fail@plt+0x57c>
   113c8:	cmp	r8, #0
   113cc:	bne	11150 <__assert_fail@plt+0x35c>
   113d0:	mov	r1, r8
   113d4:	add	r2, sp, #104	; 0x68
   113d8:	ldr	r0, [r4, #88]	; 0x58
   113dc:	bl	18834 <__assert_fail@plt+0x7a40>
   113e0:	mov	r8, r0
   113e4:	b	11150 <__assert_fail@plt+0x35c>
   113e8:	ldr	r3, [sp, #16]
   113ec:	add	r2, sp, #80	; 0x50
   113f0:	ldr	r0, [sp, #24]
   113f4:	str	r3, [sp, #156]	; 0x9c
   113f8:	ldr	r3, [sp, #52]	; 0x34
   113fc:	asr	r1, r0, #31
   11400:	str	r3, [sp, #160]	; 0xa0
   11404:	bl	18834 <__assert_fail@plt+0x7a40>
   11408:	bl	10cc8 <strlen@plt>
   1140c:	ldr	r3, [sp, #68]	; 0x44
   11410:	add	r2, sp, #80	; 0x50
   11414:	mov	r1, r4
   11418:	str	r0, [sp, #172]	; 0xac
   1141c:	mov	r0, fp
   11420:	str	r3, [sp, #176]	; 0xb0
   11424:	ldr	r3, [sp, #44]	; 0x2c
   11428:	str	r3, [sp, #180]	; 0xb4
   1142c:	bl	18834 <__assert_fail@plt+0x7a40>
   11430:	bl	10cc8 <strlen@plt>
   11434:	mov	r1, r4
   11438:	add	r2, sp, #80	; 0x50
   1143c:	str	r0, [sp, #184]	; 0xb8
   11440:	ldr	r0, [sp, #20]
   11444:	bl	18834 <__assert_fail@plt+0x7a40>
   11448:	bl	10cc8 <strlen@plt>
   1144c:	add	r2, sp, #80	; 0x50
   11450:	str	r0, [sp, #188]	; 0xbc
   11454:	ldrd	r0, [sp, #32]
   11458:	bl	18834 <__assert_fail@plt+0x7a40>
   1145c:	bl	10cc8 <strlen@plt>
   11460:	ldr	r3, [sp, #48]	; 0x30
   11464:	str	r0, [sp, #192]	; 0xc0
   11468:	str	r3, [sp, #196]	; 0xc4
   1146c:	b	11258 <__assert_fail@plt+0x464>
   11470:	movw	r3, #41232	; 0xa110
   11474:	movt	r3, #2
   11478:	ldr	r4, [r3]
   1147c:	bl	10cf8 <__errno_location@plt>
   11480:	ldr	r0, [r0]
   11484:	bl	10ca4 <strerror@plt>
   11488:	mov	r2, r0
   1148c:	movw	r1, #37116	; 0x90fc
   11490:	movt	r1, #1
   11494:	mov	r0, r4
   11498:	bl	10cec <fprintf@plt>
   1149c:	movw	r3, #41352	; 0xa188
   114a0:	movt	r3, #2
   114a4:	mov	r2, #1
   114a8:	str	r2, [r3]
   114ac:	b	1129c <__assert_fail@plt+0x4a8>
   114b0:	add	r2, sp, #104	; 0x68
   114b4:	ldr	r0, [r4, #88]	; 0x58
   114b8:	bl	18834 <__assert_fail@plt+0x7a40>
   114bc:	mov	r8, r0
   114c0:	b	11150 <__assert_fail@plt+0x35c>
   114c4:	movw	r3, #41340	; 0xa17c
   114c8:	movt	r3, #2
   114cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114d0:	ldr	r3, [r3]
   114d4:	mov	r5, r2
   114d8:	movw	r2, #3828	; 0xef4
   114dc:	movt	r2, #1
   114e0:	strd	r6, [sp, #8]
   114e4:	mov	r6, r1
   114e8:	strd	r8, [sp, #16]
   114ec:	mov	r1, r5
   114f0:	strd	sl, [sp, #24]
   114f4:	str	lr, [sp, #32]
   114f8:	sub	sp, sp, #12
   114fc:	cmp	r3, #0
   11500:	movne	r2, #0
   11504:	str	r0, [sp, #4]
   11508:	mov	r0, r6
   1150c:	bl	14ad8 <__assert_fail@plt+0x3ce4>
   11510:	subs	r4, r0, #0
   11514:	beq	11738 <__assert_fail@plt+0x944>
   11518:	mov	r1, #0
   1151c:	bl	15a94 <__assert_fail@plt+0x4ca0>
   11520:	mov	r1, r0
   11524:	mov	r0, #0
   11528:	bl	10fa4 <__assert_fail@plt+0x1b0>
   1152c:	movw	r3, #41376	; 0xa1a0
   11530:	movt	r3, #2
   11534:	ldr	r6, [r3]
   11538:	cmp	r6, #0
   1153c:	bne	115f4 <__assert_fail@plt+0x800>
   11540:	movw	r7, #41324	; 0xa16c
   11544:	movt	r7, #2
   11548:	ldr	r3, [r7]
   1154c:	cmp	r3, #0
   11550:	beq	116bc <__assert_fail@plt+0x8c8>
   11554:	movw	r5, #41232	; 0xa110
   11558:	movt	r5, #2
   1155c:	movw	r9, #37108	; 0x90f4
   11560:	movt	r9, #1
   11564:	movw	r8, #41352	; 0xa188
   11568:	movt	r8, #2
   1156c:	mov	r0, r4
   11570:	bl	15240 <__assert_fail@plt+0x444c>
   11574:	subs	fp, r0, #0
   11578:	beq	115e4 <__assert_fail@plt+0x7f0>
   1157c:	ldrh	r3, [fp, #56]	; 0x38
   11580:	sub	r3, r3, #1
   11584:	cmp	r3, #6
   11588:	ldrls	pc, [pc, r3, lsl #2]
   1158c:	b	1156c <__assert_fail@plt+0x778>
   11590:	andeq	r1, r1, r8, lsr #12
   11594:	andeq	r1, r1, r0, lsl r6
   11598:	andeq	r1, r1, ip, ror #10
   1159c:	andeq	r1, r1, ip, lsr #11
   115a0:	andeq	r1, r1, ip, ror #10
   115a4:	andeq	r1, r1, ip, ror #10
   115a8:	andeq	r1, r1, ip, lsr #11
   115ac:	ldr	sl, [r5]
   115b0:	ldr	r0, [fp, #32]
   115b4:	bl	10ca4 <strerror@plt>
   115b8:	mov	r3, r0
   115bc:	add	r2, fp, #168	; 0xa8
   115c0:	mov	r1, r9
   115c4:	mov	r0, sl
   115c8:	bl	10cec <fprintf@plt>
   115cc:	mov	r3, #1
   115d0:	mov	r0, r4
   115d4:	str	r3, [r8]
   115d8:	bl	15240 <__assert_fail@plt+0x444c>
   115dc:	subs	fp, r0, #0
   115e0:	bne	1157c <__assert_fail@plt+0x788>
   115e4:	bl	10cf8 <__errno_location@plt>
   115e8:	ldr	r0, [r0]
   115ec:	cmp	r0, #0
   115f0:	bne	11700 <__assert_fail@plt+0x90c>
   115f4:	add	sp, sp, #12
   115f8:	ldrd	r4, [sp]
   115fc:	ldrd	r6, [sp, #8]
   11600:	ldrd	r8, [sp, #16]
   11604:	ldrd	sl, [sp, #24]
   11608:	add	sp, sp, #32
   1160c:	pop	{pc}		; (ldr pc, [sp], #4)
   11610:	add	r2, fp, #168	; 0xa8
   11614:	movw	r1, #37164	; 0x912c
   11618:	movt	r1, #1
   1161c:	ldr	r0, [r5]
   11620:	bl	10cec <fprintf@plt>
   11624:	b	1156c <__assert_fail@plt+0x778>
   11628:	ldrb	r3, [fp, #168]	; 0xa8
   1162c:	cmp	r3, #46	; 0x2e
   11630:	beq	116c8 <__assert_fail@plt+0x8d4>
   11634:	movw	sl, #41244	; 0xa11c
   11638:	movt	sl, #2
   1163c:	ldr	r2, [sl, #8]
   11640:	cmp	r2, #0
   11644:	bne	116ec <__assert_fail@plt+0x8f8>
   11648:	ldr	r3, [sp, #4]
   1164c:	cmp	r3, #1
   11650:	bgt	116a0 <__assert_fail@plt+0x8ac>
   11654:	mov	r1, r6
   11658:	mov	r0, r4
   1165c:	bl	15a94 <__assert_fail@plt+0x4ca0>
   11660:	mov	sl, r0
   11664:	mov	r1, r0
   11668:	mov	r0, fp
   1166c:	bl	10fa4 <__assert_fail@plt+0x1b0>
   11670:	ldr	r2, [r7]
   11674:	adds	r3, sl, #0
   11678:	movne	r3, #1
   1167c:	cmp	r2, #0
   11680:	movne	r3, #0
   11684:	cmp	r3, #0
   11688:	beq	1156c <__assert_fail@plt+0x778>
   1168c:	mov	r1, fp
   11690:	mov	r2, #4
   11694:	mov	r0, r4
   11698:	bl	15a54 <__assert_fail@plt+0x4c60>
   1169c:	b	1156c <__assert_fail@plt+0x778>
   116a0:	movw	r0, #37156	; 0x9124
   116a4:	movt	r0, #1
   116a8:	ldr	r1, [fp, #28]
   116ac:	bl	10bc0 <printf@plt>
   116b0:	mov	r2, #1
   116b4:	str	r2, [sl, #8]
   116b8:	b	11654 <__assert_fail@plt+0x860>
   116bc:	ands	r6, r5, #8
   116c0:	movne	r6, #4096	; 0x1000
   116c4:	b	11554 <__assert_fail@plt+0x760>
   116c8:	ldr	r3, [fp, #48]	; 0x30
   116cc:	cmp	r3, #0
   116d0:	beq	11634 <__assert_fail@plt+0x840>
   116d4:	movw	r3, #41392	; 0xa1b0
   116d8:	movt	r3, #2
   116dc:	ldr	r3, [r3]
   116e0:	cmp	r3, #0
   116e4:	beq	1156c <__assert_fail@plt+0x778>
   116e8:	b	11634 <__assert_fail@plt+0x840>
   116ec:	movw	r0, #37148	; 0x911c
   116f0:	movt	r0, #1
   116f4:	ldr	r1, [fp, #28]
   116f8:	bl	10bc0 <printf@plt>
   116fc:	b	11654 <__assert_fail@plt+0x860>
   11700:	movw	r3, #41232	; 0xa110
   11704:	movt	r3, #2
   11708:	ldr	r4, [r3]
   1170c:	bl	10ca4 <strerror@plt>
   11710:	mov	r2, r0
   11714:	movw	r1, #37196	; 0x914c
   11718:	movt	r1, #1
   1171c:	mov	r0, r4
   11720:	bl	10cec <fprintf@plt>
   11724:	movw	r3, #41352	; 0xa188
   11728:	movt	r3, #2
   1172c:	mov	r2, #1
   11730:	str	r2, [r3]
   11734:	b	115f4 <__assert_fail@plt+0x800>
   11738:	movw	r3, #41232	; 0xa110
   1173c:	movt	r3, #2
   11740:	ldr	r5, [r6]
   11744:	ldr	r4, [r3]
   11748:	bl	10cf8 <__errno_location@plt>
   1174c:	ldr	r0, [r0]
   11750:	bl	10ca4 <strerror@plt>
   11754:	mov	r3, r0
   11758:	mov	r2, r5
   1175c:	mov	r0, r4
   11760:	movw	r1, #37128	; 0x9108
   11764:	movt	r1, #1
   11768:	bl	10cec <fprintf@plt>
   1176c:	movw	r3, #41352	; 0xa188
   11770:	movt	r3, #2
   11774:	mov	r2, #1
   11778:	str	r2, [r3]
   1177c:	b	115f4 <__assert_fail@plt+0x800>
   11780:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11784:	movw	r4, #41392	; 0xa1b0
   11788:	movt	r4, #2
   1178c:	strd	r6, [sp, #8]
   11790:	movw	r6, #41376	; 0xa1a0
   11794:	movt	r6, #2
   11798:	strd	r8, [sp, #16]
   1179c:	movw	r3, #41336	; 0xa178
   117a0:	movt	r3, #2
   117a4:	strd	sl, [sp, #24]
   117a8:	mov	r5, #0
   117ac:	movw	r2, #41388	; 0xa1ac
   117b0:	movt	r2, #2
   117b4:	str	lr, [sp, #32]
   117b8:	sub	sp, sp, #100	; 0x64
   117bc:	movw	ip, #41244	; 0xa11c
   117c0:	movt	ip, #2
   117c4:	str	r5, [r2]
   117c8:	movw	lr, #41328	; 0xa170
   117cc:	movt	lr, #2
   117d0:	str	r4, [sp, #16]
   117d4:	movw	r4, #41340	; 0xa17c
   117d8:	movt	r4, #2
   117dc:	str	r6, [sp, #48]	; 0x30
   117e0:	movw	r6, #41396	; 0xa1b4
   117e4:	movt	r6, #2
   117e8:	str	r3, [sp, #28]
   117ec:	movw	r7, #41320	; 0xa168
   117f0:	movt	r7, #2
   117f4:	str	r4, [sp, #64]	; 0x40
   117f8:	movw	r4, #41364	; 0xa194
   117fc:	movt	r4, #2
   11800:	ldr	r2, [sp, #28]
   11804:	movw	fp, #41372	; 0xa19c
   11808:	movt	fp, #2
   1180c:	str	r6, [sp, #44]	; 0x2c
   11810:	movw	r6, #41332	; 0xa174
   11814:	movt	r6, #2
   11818:	movw	r9, #41316	; 0xa164
   1181c:	movt	r9, #2
   11820:	str	r5, [lr]
   11824:	str	r4, [sp, #68]	; 0x44
   11828:	movw	r4, #41324	; 0xa16c
   1182c:	movt	r4, #2
   11830:	movw	r8, #41356	; 0xa18c
   11834:	movt	r8, #2
   11838:	str	r5, [r7]
   1183c:	str	r6, [sp, #24]
   11840:	movw	r6, #41400	; 0xa1b8
   11844:	movt	r6, #2
   11848:	movw	sl, #41368	; 0xa198
   1184c:	movt	sl, #2
   11850:	str	r5, [r2]
   11854:	str	r4, [sp, #40]	; 0x28
   11858:	movw	r4, #41380	; 0xa1a4
   1185c:	movt	r4, #2
   11860:	str	r6, [sp, #4]
   11864:	movw	r6, #41304	; 0xa158
   11868:	movt	r6, #2
   1186c:	movw	r3, #41308	; 0xa15c
   11870:	movt	r3, #2
   11874:	str	r5, [r8]
   11878:	str	r4, [sp, #32]
   1187c:	movw	r4, #41348	; 0xa184
   11880:	movt	r4, #2
   11884:	str	r5, [r9]
   11888:	str	r6, [sp, #56]	; 0x38
   1188c:	movw	r6, #41360	; 0xa190
   11890:	movt	r6, #2
   11894:	str	r4, [sp, #20]
   11898:	movw	r4, #41344	; 0xa180
   1189c:	movt	r4, #2
   118a0:	str	r5, [fp]
   118a4:	str	r5, [r3]
   118a8:	str	ip, [sp, #12]
   118ac:	str	sl, [sp, #36]	; 0x24
   118b0:	movw	sl, #41312	; 0xa160
   118b4:	movt	sl, #2
   118b8:	str	r4, [sp, #52]	; 0x34
   118bc:	mov	r4, r0
   118c0:	mov	r0, #1
   118c4:	str	r6, [sp, #60]	; 0x3c
   118c8:	mov	r6, r1
   118cc:	str	lr, [sp, #72]	; 0x48
   118d0:	str	r7, [sp, #80]	; 0x50
   118d4:	ldr	r3, [sp, #16]
   118d8:	str	r5, [sl]
   118dc:	str	r5, [ip, #8]
   118e0:	str	r5, [r3]
   118e4:	ldr	r3, [sp, #48]	; 0x30
   118e8:	str	r5, [r3]
   118ec:	ldr	r3, [sp, #36]	; 0x24
   118f0:	str	r5, [r3]
   118f4:	ldr	r3, [sp, #64]	; 0x40
   118f8:	str	r5, [r3]
   118fc:	ldr	r3, [sp, #44]	; 0x2c
   11900:	str	r5, [r3]
   11904:	ldr	r3, [sp, #68]	; 0x44
   11908:	str	r5, [r3]
   1190c:	ldr	r3, [sp, #24]
   11910:	str	r5, [r3]
   11914:	ldr	r3, [sp, #40]	; 0x28
   11918:	str	r5, [r3]
   1191c:	ldr	r3, [sp, #4]
   11920:	str	r5, [r3]
   11924:	ldr	r3, [sp, #32]
   11928:	str	r5, [r3]
   1192c:	ldr	r3, [sp, #56]	; 0x38
   11930:	str	r5, [r3]
   11934:	ldr	r3, [sp, #20]
   11938:	str	r5, [r3]
   1193c:	ldr	r3, [sp, #60]	; 0x3c
   11940:	str	r5, [r3]
   11944:	ldr	r3, [sp, #52]	; 0x34
   11948:	str	r5, [r3]
   1194c:	bl	10da0 <isatty@plt>
   11950:	cmp	r0, r5
   11954:	moveq	r3, #1
   11958:	streq	r3, [sl]
   1195c:	bne	11e3c <__assert_fail@plt+0x1048>
   11960:	bl	10bcc <getuid@plt>
   11964:	cmp	r0, #0
   11968:	bne	11978 <__assert_fail@plt+0xb84>
   1196c:	ldr	r2, [sp, #16]
   11970:	mov	r3, #1
   11974:	str	r3, [r2]
   11978:	mov	r3, #1
   1197c:	movw	r2, #41220	; 0xa104
   11980:	movt	r2, #2
   11984:	movw	r5, #37220	; 0x9164
   11988:	movt	r5, #1
   1198c:	mov	r7, r3
   11990:	movw	r1, #41384	; 0xa1a8
   11994:	movt	r1, #2
   11998:	str	r3, [r2]
   1199c:	mov	r3, #20
   119a0:	str	r3, [sp, #8]
   119a4:	str	r2, [sp, #76]	; 0x4c
   119a8:	str	r1, [sp, #84]	; 0x54
   119ac:	mov	r2, r5
   119b0:	mov	r1, r6
   119b4:	mov	r0, r4
   119b8:	bl	16c04 <__assert_fail@plt+0x5e10>
   119bc:	cmn	r0, #1
   119c0:	beq	11b0c <__assert_fail@plt+0xd18>
   119c4:	sub	r0, r0, #49	; 0x31
   119c8:	cmp	r0, #71	; 0x47
   119cc:	ldrls	pc, [pc, r0, lsl #2]
   119d0:	b	11dfc <__assert_fail@plt+0x1008>
   119d4:	andeq	r1, r1, r4, asr #27
   119d8:	strdeq	r1, [r1], -ip
   119dc:	strdeq	r1, [r1], -ip
   119e0:	strdeq	r1, [r1], -ip
   119e4:	strdeq	r1, [r1], -ip
   119e8:	strdeq	r1, [r1], -ip
   119ec:	strdeq	r1, [r1], -ip
   119f0:	strdeq	r1, [r1], -ip
   119f4:	strdeq	r1, [r1], -ip
   119f8:	strdeq	r1, [r1], -ip
   119fc:	strdeq	r1, [r1], -ip
   11a00:	strdeq	r1, [r1], -ip
   11a04:	strdeq	r1, [r1], -ip
   11a08:	strdeq	r1, [r1], -ip
   11a0c:	strdeq	r1, [r1], -ip
   11a10:	strdeq	r1, [r1], -ip
   11a14:	andeq	r1, r1, r0, lsl #22
   11a18:	strdeq	r1, [r1], -ip
   11a1c:	andeq	r1, r1, r4, lsr #27
   11a20:	strdeq	r1, [r1], -ip
   11a24:	strdeq	r1, [r1], -ip
   11a28:	muleq	r1, r8, sp
   11a2c:	strdeq	r1, [r1], -ip
   11a30:	strdeq	r1, [r1], -ip
   11a34:	strdeq	r1, [r1], -ip
   11a38:	strdeq	r1, [r1], -ip
   11a3c:	strdeq	r1, [r1], -ip
   11a40:	andeq	r1, r1, r4, lsl #27
   11a44:	strdeq	r1, [r1], -ip
   11a48:	strdeq	r1, [r1], -ip
   11a4c:	strdeq	r1, [r1], -ip
   11a50:	strdeq	r1, [r1], -ip
   11a54:	strdeq	r1, [r1], -ip
   11a58:	andeq	r1, r1, r8, ror sp
   11a5c:	andeq	r1, r1, ip, ror #26
   11a60:	andeq	r1, r1, r0, ror #26
   11a64:	strdeq	r1, [r1], -ip
   11a68:	strdeq	r1, [r1], -ip
   11a6c:	andeq	r1, r1, r4, asr sp
   11a70:	strdeq	r1, [r1], -ip
   11a74:	strdeq	r1, [r1], -ip
   11a78:	strdeq	r1, [r1], -ip
   11a7c:	strdeq	r1, [r1], -ip
   11a80:	strdeq	r1, [r1], -ip
   11a84:	strdeq	r1, [r1], -ip
   11a88:	strdeq	r1, [r1], -ip
   11a8c:	strdeq	r1, [r1], -ip
   11a90:	strdeq	r1, [r1], -ip
   11a94:	strdeq	r1, [r1], -r4
   11a98:	strdeq	r1, [r1], -ip
   11a9c:	andeq	r1, r1, ip, lsr sp
   11aa0:	andeq	r1, r1, r4, lsr #26
   11aa4:	strdeq	r1, [r1], -ip
   11aa8:	andeq	r1, r1, r8, lsl sp
   11aac:	andeq	r1, r1, ip, lsr #19
   11ab0:	strdeq	r1, [r1], -ip
   11ab4:	andeq	r1, r1, ip, lsl #26
   11ab8:	strdeq	r1, [r1], -ip
   11abc:	strdeq	r1, [r1], -ip
   11ac0:	andeq	r1, r1, r8, ror #25
   11ac4:	andeq	r1, r1, r8, asr #25
   11ac8:	andeq	r1, r1, r0, lsr #25
   11acc:	muleq	r1, r4, ip
   11ad0:	andeq	r1, r1, r8, lsl #25
   11ad4:	andeq	r1, r1, ip, ror ip
   11ad8:	andeq	r1, r1, r0, ror ip
   11adc:	andeq	r1, r1, r4, ror #24
   11ae0:	andeq	r1, r1, r4, asr ip
   11ae4:	andeq	r1, r1, ip, lsr ip
   11ae8:	strdeq	r1, [r1], -ip
   11aec:	strdeq	r1, [r1], -ip
   11af0:	andeq	r1, r1, ip, lsl ip
   11af4:	ldr	r3, [sp, #8]
   11af8:	orr	r3, r3, #32
   11afc:	str	r3, [sp, #8]
   11b00:	ldr	r3, [sp, #16]
   11b04:	str	r7, [r3]
   11b08:	b	119ac <__assert_fail@plt+0xbb8>
   11b0c:	ldr	r3, [sp, #76]	; 0x4c
   11b10:	ldr	r2, [r8]
   11b14:	ldr	r1, [r3]
   11b18:	ldr	r3, [sp, #20]
   11b1c:	cmp	r2, #0
   11b20:	sub	r0, r4, r1
   11b24:	ldr	ip, [r3]
   11b28:	ldr	r3, [sp, #12]
   11b2c:	ldr	r3, [r3, #12]
   11b30:	bne	11de4 <__assert_fail@plt+0xff0>
   11b34:	ldr	r7, [sp, #48]	; 0x30
   11b38:	ldr	lr, [sp, #56]	; 0x38
   11b3c:	ldr	r5, [sp, #52]	; 0x34
   11b40:	ldr	r7, [r7]
   11b44:	ldr	r4, [lr]
   11b48:	ldr	lr, [sp, #72]	; 0x48
   11b4c:	ldr	r5, [r5]
   11b50:	ldr	lr, [lr]
   11b54:	orr	lr, r4, lr
   11b58:	orrs	lr, lr, r5
   11b5c:	bne	11e1c <__assert_fail@plt+0x1028>
   11b60:	ldr	lr, [sp, #60]	; 0x3c
   11b64:	ldr	lr, [lr]
   11b68:	orrs	lr, r3, lr
   11b6c:	bne	11b7c <__assert_fail@plt+0xd88>
   11b70:	ldr	lr, [sp, #8]
   11b74:	orr	lr, lr, #8
   11b78:	str	lr, [sp, #8]
   11b7c:	cmp	r7, #0
   11b80:	beq	11ee4 <__assert_fail@plt+0x10f0>
   11b84:	cmp	ip, #0
   11b88:	beq	11bb0 <__assert_fail@plt+0xdbc>
   11b8c:	ldr	ip, [sp, #8]
   11b90:	orr	ip, ip, #128	; 0x80
   11b94:	str	ip, [sp, #8]
   11b98:	cmp	r4, #0
   11b9c:	beq	11bb0 <__assert_fail@plt+0xdbc>
   11ba0:	movw	ip, #41384	; 0xa1a8
   11ba4:	movt	ip, #2
   11ba8:	mov	lr, #2
   11bac:	str	lr, [ip]
   11bb0:	ldr	ip, [sp, #24]
   11bb4:	ldr	ip, [ip]
   11bb8:	cmp	ip, #0
   11bbc:	beq	11ea4 <__assert_fail@plt+0x10b0>
   11bc0:	cmp	r3, #1
   11bc4:	beq	11f60 <__assert_fail@plt+0x116c>
   11bc8:	cmp	r3, #2
   11bcc:	beq	11f3c <__assert_fail@plt+0x1148>
   11bd0:	cmp	r3, #0
   11bd4:	beq	11f28 <__assert_fail@plt+0x1134>
   11bd8:	ldr	r3, [sl]
   11bdc:	cmp	r3, #0
   11be0:	beq	11e7c <__assert_fail@plt+0x1088>
   11be4:	ldr	r2, [sp, #12]
   11be8:	movw	r3, #9212	; 0x23fc
   11bec:	movt	r3, #1
   11bf0:	str	r3, [r2, #4]
   11bf4:	cmp	r0, #0
   11bf8:	ldr	r2, [sp, #8]
   11bfc:	moveq	r0, #1
   11c00:	addne	r1, r6, r1, lsl #2
   11c04:	ldreq	r1, [pc, #1048]	; 12024 <__assert_fail@plt+0x1230>
   11c08:	bl	114c4 <__assert_fail@plt+0x6d0>
   11c0c:	movw	r3, #41352	; 0xa188
   11c10:	movt	r3, #2
   11c14:	ldr	r0, [r3]
   11c18:	b	11e00 <__assert_fail@plt+0x100c>
   11c1c:	ldr	r2, [sp, #4]
   11c20:	mov	r3, #0
   11c24:	str	r7, [fp]
   11c28:	str	r3, [r8]
   11c2c:	str	r3, [r9]
   11c30:	str	r3, [sl]
   11c34:	str	r3, [r2]
   11c38:	b	119ac <__assert_fail@plt+0xbb8>
   11c3c:	ldr	r2, [sp, #28]
   11c40:	mov	r3, #0
   11c44:	str	r7, [r2]
   11c48:	ldr	r2, [sp, #32]
   11c4c:	str	r3, [r2]
   11c50:	b	119ac <__assert_fail@plt+0xbb8>
   11c54:	ldr	r2, [sp, #12]
   11c58:	mov	r3, #2
   11c5c:	str	r3, [r2, #12]
   11c60:	b	119ac <__assert_fail@plt+0xbb8>
   11c64:	ldr	r3, [sp, #56]	; 0x38
   11c68:	str	r7, [r3]
   11c6c:	b	119ac <__assert_fail@plt+0xbb8>
   11c70:	ldr	r3, [sp, #24]
   11c74:	str	r7, [r3]
   11c78:	b	119ac <__assert_fail@plt+0xbb8>
   11c7c:	ldr	r3, [sp, #44]	; 0x2c
   11c80:	str	r7, [r3]
   11c84:	b	119ac <__assert_fail@plt+0xbb8>
   11c88:	ldr	r3, [sp, #60]	; 0x3c
   11c8c:	str	r7, [r3]
   11c90:	b	119ac <__assert_fail@plt+0xbb8>
   11c94:	ldr	r3, [sp, #80]	; 0x50
   11c98:	str	r7, [r3]
   11c9c:	b	119ac <__assert_fail@plt+0xbb8>
   11ca0:	ldr	r2, [sp, #36]	; 0x24
   11ca4:	mov	r3, #0
   11ca8:	str	r7, [r8]
   11cac:	str	r7, [r2]
   11cb0:	ldr	r2, [sp, #4]
   11cb4:	str	r3, [r9]
   11cb8:	str	r3, [sl]
   11cbc:	str	r3, [fp]
   11cc0:	str	r3, [r2]
   11cc4:	b	119ac <__assert_fail@plt+0xbb8>
   11cc8:	ldr	r2, [sp, #4]
   11ccc:	mov	r3, #0
   11cd0:	str	r3, [r8]
   11cd4:	str	r3, [r9]
   11cd8:	str	r3, [sl]
   11cdc:	str	r7, [r2]
   11ce0:	str	r3, [fp]
   11ce4:	b	119ac <__assert_fail@plt+0xbb8>
   11ce8:	ldr	r2, [sp, #36]	; 0x24
   11cec:	mov	r3, #0
   11cf0:	str	r7, [r8]
   11cf4:	str	r3, [r2]
   11cf8:	b	11cb0 <__assert_fail@plt+0xebc>
   11cfc:	ldr	r2, [sp, #84]	; 0x54
   11d00:	mov	r3, #1024	; 0x400
   11d04:	str	r3, [r2]
   11d08:	b	119ac <__assert_fail@plt+0xbb8>
   11d0c:	ldr	r3, [sp, #72]	; 0x48
   11d10:	str	r7, [r3]
   11d14:	b	119ac <__assert_fail@plt+0xbb8>
   11d18:	ldr	r3, [sp, #64]	; 0x40
   11d1c:	str	r7, [r3]
   11d20:	b	119ac <__assert_fail@plt+0xbb8>
   11d24:	ldr	r2, [sp, #48]	; 0x30
   11d28:	mov	r3, #0
   11d2c:	str	r7, [r2]
   11d30:	ldr	r2, [sp, #40]	; 0x28
   11d34:	str	r3, [r2]
   11d38:	b	119ac <__assert_fail@plt+0xbb8>
   11d3c:	ldr	r2, [sp, #32]
   11d40:	mov	r3, #0
   11d44:	str	r7, [r2]
   11d48:	ldr	r2, [sp, #28]
   11d4c:	str	r3, [r2]
   11d50:	b	119ac <__assert_fail@plt+0xbb8>
   11d54:	ldr	r3, [sp, #20]
   11d58:	str	r7, [r3]
   11d5c:	b	119ac <__assert_fail@plt+0xbb8>
   11d60:	ldr	r3, [sp, #68]	; 0x44
   11d64:	str	r7, [r3]
   11d68:	b	119ac <__assert_fail@plt+0xbb8>
   11d6c:	ldr	r3, [sp, #12]
   11d70:	str	r7, [r3, #12]
   11d74:	b	119ac <__assert_fail@plt+0xbb8>
   11d78:	ldr	r3, [sp, #40]	; 0x28
   11d7c:	str	r7, [r3]
   11d80:	b	119ac <__assert_fail@plt+0xbb8>
   11d84:	ldr	r3, [sp, #8]
   11d88:	bic	r3, r3, #16
   11d8c:	orr	r3, r3, #2
   11d90:	str	r3, [sp, #8]
   11d94:	b	119ac <__assert_fail@plt+0xbb8>
   11d98:	ldr	r3, [sp, #52]	; 0x34
   11d9c:	str	r7, [r3]
   11da0:	b	119ac <__assert_fail@plt+0xbb8>
   11da4:	ldr	r2, [sp, #4]
   11da8:	mov	r3, #0
   11dac:	str	r7, [r9]
   11db0:	str	r3, [r8]
   11db4:	str	r3, [sl]
   11db8:	str	r3, [fp]
   11dbc:	str	r3, [r2]
   11dc0:	b	119ac <__assert_fail@plt+0xbb8>
   11dc4:	ldr	r2, [sp, #4]
   11dc8:	mov	r3, #0
   11dcc:	str	r7, [sl]
   11dd0:	str	r3, [r8]
   11dd4:	str	r3, [r9]
   11dd8:	str	r3, [fp]
   11ddc:	str	r3, [r2]
   11de0:	b	119ac <__assert_fail@plt+0xbb8>
   11de4:	cmp	ip, #0
   11de8:	beq	11ba0 <__assert_fail@plt+0xdac>
   11dec:	ldr	ip, [sp, #8]
   11df0:	orr	ip, ip, #128	; 0x80
   11df4:	str	ip, [sp, #8]
   11df8:	b	11ba0 <__assert_fail@plt+0xdac>
   11dfc:	bl	13010 <__assert_fail@plt+0x221c>
   11e00:	add	sp, sp, #100	; 0x64
   11e04:	ldrd	r4, [sp]
   11e08:	ldrd	r6, [sp, #8]
   11e0c:	ldrd	r8, [sp, #16]
   11e10:	ldrd	sl, [sp, #24]
   11e14:	add	sp, sp, #32
   11e18:	pop	{pc}		; (ldr pc, [sp], #4)
   11e1c:	orrs	lr, r5, r7
   11e20:	beq	11ee4 <__assert_fail@plt+0x10f0>
   11e24:	cmp	ip, #0
   11e28:	beq	11b98 <__assert_fail@plt+0xda4>
   11e2c:	ldr	ip, [sp, #8]
   11e30:	orr	ip, ip, #128	; 0x80
   11e34:	str	ip, [sp, #8]
   11e38:	b	11b98 <__assert_fail@plt+0xda4>
   11e3c:	movw	r0, #37212	; 0x915c
   11e40:	movt	r0, #1
   11e44:	bl	10c80 <getenv@plt>
   11e48:	cmp	r0, r5
   11e4c:	beq	11ef4 <__assert_fail@plt+0x1100>
   11e50:	mov	r1, r5
   11e54:	mov	r2, #10
   11e58:	bl	10ba8 <strtol@plt>
   11e5c:	movw	r3, #41200	; 0xa0f0
   11e60:	movt	r3, #2
   11e64:	str	r0, [r3]
   11e68:	ldr	r2, [sp, #44]	; 0x2c
   11e6c:	mov	r3, #1
   11e70:	str	r3, [r9]
   11e74:	str	r3, [r2]
   11e78:	b	11960 <__assert_fail@plt+0xb6c>
   11e7c:	ldr	r3, [fp]
   11e80:	cmp	r3, #0
   11e84:	bne	11ed0 <__assert_fail@plt+0x10dc>
   11e88:	cmp	r2, #0
   11e8c:	beq	11f74 <__assert_fail@plt+0x1180>
   11e90:	ldr	r2, [sp, #12]
   11e94:	movw	r3, #9544	; 0x2548
   11e98:	movt	r3, #1
   11e9c:	str	r3, [r2, #4]
   11ea0:	b	11bf4 <__assert_fail@plt+0xe00>
   11ea4:	cmp	r3, #1
   11ea8:	beq	11fc0 <__assert_fail@plt+0x11cc>
   11eac:	cmp	r3, #2
   11eb0:	beq	11f9c <__assert_fail@plt+0x11a8>
   11eb4:	cmp	r3, #0
   11eb8:	bne	11bd8 <__assert_fail@plt+0xde4>
   11ebc:	ldr	ip, [sp, #12]
   11ec0:	movw	r3, #12360	; 0x3048
   11ec4:	movt	r3, #1
   11ec8:	str	r3, [ip]
   11ecc:	b	11bd8 <__assert_fail@plt+0xde4>
   11ed0:	ldr	r2, [sp, #12]
   11ed4:	movw	r3, #11044	; 0x2b24
   11ed8:	movt	r3, #1
   11edc:	str	r3, [r2, #4]
   11ee0:	b	11bf4 <__assert_fail@plt+0xe00>
   11ee4:	ldr	lr, [sp, #8]
   11ee8:	orr	lr, lr, #1
   11eec:	str	lr, [sp, #8]
   11ef0:	b	11e24 <__assert_fail@plt+0x1030>
   11ef4:	add	r2, sp, #88	; 0x58
   11ef8:	movw	r1, #21523	; 0x5413
   11efc:	mov	r0, #1
   11f00:	bl	188ac <__assert_fail@plt+0x7ab8>
   11f04:	cmp	r0, #0
   11f08:	bne	11e68 <__assert_fail@plt+0x1074>
   11f0c:	ldrh	r3, [sp, #90]	; 0x5a
   11f10:	cmp	r3, #0
   11f14:	beq	11e68 <__assert_fail@plt+0x1074>
   11f18:	movw	r2, #41200	; 0xa0f0
   11f1c:	movt	r2, #2
   11f20:	str	r3, [r2]
   11f24:	b	11e68 <__assert_fail@plt+0x1074>
   11f28:	ldr	ip, [sp, #12]
   11f2c:	movw	r3, #12372	; 0x3054
   11f30:	movt	r3, #1
   11f34:	str	r3, [ip]
   11f38:	b	11bd8 <__assert_fail@plt+0xde4>
   11f3c:	ldr	r3, [sp, #28]
   11f40:	ldr	r3, [r3]
   11f44:	cmp	r3, #0
   11f48:	beq	11ffc <__assert_fail@plt+0x1208>
   11f4c:	ldr	ip, [sp, #12]
   11f50:	movw	r3, #12616	; 0x3148
   11f54:	movt	r3, #1
   11f58:	str	r3, [ip]
   11f5c:	b	11bd8 <__assert_fail@plt+0xde4>
   11f60:	ldr	ip, [sp, #12]
   11f64:	movw	r3, #12948	; 0x3294
   11f68:	movt	r3, #1
   11f6c:	str	r3, [ip]
   11f70:	b	11bd8 <__assert_fail@plt+0xde4>
   11f74:	ldr	r3, [sp, #4]
   11f78:	ldr	r2, [sp, #12]
   11f7c:	ldr	r3, [r3]
   11f80:	cmp	r3, #0
   11f84:	movwne	r3, #11568	; 0x2d30
   11f88:	movweq	r3, #10288	; 0x2830
   11f8c:	movtne	r3, #1
   11f90:	movteq	r3, #1
   11f94:	str	r3, [r2, #4]
   11f98:	b	11bf4 <__assert_fail@plt+0xe00>
   11f9c:	ldr	r3, [sp, #28]
   11fa0:	ldr	r3, [r3]
   11fa4:	cmp	r3, #0
   11fa8:	beq	11fd4 <__assert_fail@plt+0x11e0>
   11fac:	ldr	ip, [sp, #12]
   11fb0:	movw	r3, #12548	; 0x3104
   11fb4:	movt	r3, #1
   11fb8:	str	r3, [ip]
   11fbc:	b	11bd8 <__assert_fail@plt+0xde4>
   11fc0:	ldr	ip, [sp, #12]
   11fc4:	movw	r3, #12868	; 0x3244
   11fc8:	movt	r3, #1
   11fcc:	str	r3, [ip]
   11fd0:	b	11bd8 <__assert_fail@plt+0xde4>
   11fd4:	ldr	ip, [sp, #12]
   11fd8:	ldr	r3, [sp, #32]
   11fdc:	ldr	r3, [r3]
   11fe0:	cmp	r3, #0
   11fe4:	movwne	r3, #12708	; 0x31a4
   11fe8:	movweq	r3, #12388	; 0x3064
   11fec:	movtne	r3, #1
   11ff0:	movteq	r3, #1
   11ff4:	str	r3, [ip]
   11ff8:	b	11bd8 <__assert_fail@plt+0xde4>
   11ffc:	ldr	ip, [sp, #12]
   12000:	ldr	r3, [sp, #32]
   12004:	ldr	r3, [r3]
   12008:	cmp	r3, #0
   1200c:	movwne	r3, #12776	; 0x31e8
   12010:	movweq	r3, #12456	; 0x30a8
   12014:	movtne	r3, #1
   12018:	movteq	r3, #1
   1201c:	str	r3, [ip]
   12020:	b	11bd8 <__assert_fail@plt+0xde4>
   12024:	strdeq	sl, [r2], -r4
   12028:	strd	r4, [sp, #-20]!	; 0xffffffec
   1202c:	movw	r5, #41236	; 0xa114
   12030:	movt	r5, #2
   12034:	strd	r6, [sp, #8]
   12038:	str	lr, [sp, #16]
   1203c:	sub	sp, sp, #12
   12040:	str	r0, [sp, #4]
   12044:	add	r0, sp, #4
   12048:	bl	10c08 <ctime@plt>
   1204c:	mov	r6, r0
   12050:	add	r4, r0, #3
   12054:	add	r7, r0, #10
   12058:	ldrb	r0, [r4, #1]!
   1205c:	ldr	r1, [r5]
   12060:	bl	10d58 <putc@plt>
   12064:	cmp	r4, r7
   12068:	bne	12058 <__assert_fail@plt+0x1264>
   1206c:	movw	r3, #41364	; 0xa194
   12070:	movt	r3, #2
   12074:	ldr	r0, [r3]
   12078:	cmp	r0, #0
   1207c:	beq	120b8 <__assert_fail@plt+0x12c4>
   12080:	add	r6, r6, #23
   12084:	ldrb	r0, [r4, #1]!
   12088:	ldr	r1, [r5]
   1208c:	bl	10d58 <putc@plt>
   12090:	cmp	r6, r4
   12094:	bne	12084 <__assert_fail@plt+0x1290>
   12098:	ldr	r1, [r5]
   1209c:	mov	r0, #32
   120a0:	bl	10d58 <putc@plt>
   120a4:	add	sp, sp, #12
   120a8:	ldrd	r4, [sp]
   120ac:	ldrd	r6, [sp, #8]
   120b0:	add	sp, sp, #16
   120b4:	pop	{pc}		; (ldr pc, [sp], #4)
   120b8:	ldr	r3, [sp, #4]
   120bc:	movw	r7, #61695	; 0xf0ff
   120c0:	movt	r7, #239	; 0xef
   120c4:	add	r7, r3, r7
   120c8:	bl	10bfc <time@plt>
   120cc:	cmp	r7, r0
   120d0:	blt	120f0 <__assert_fail@plt+0x12fc>
   120d4:	add	r6, r6, #15
   120d8:	ldrb	r0, [r4, #1]!
   120dc:	ldr	r1, [r5]
   120e0:	bl	10d58 <putc@plt>
   120e4:	cmp	r4, r6
   120e8:	bne	120d8 <__assert_fail@plt+0x12e4>
   120ec:	b	12098 <__assert_fail@plt+0x12a4>
   120f0:	mov	r0, #32
   120f4:	ldr	r1, [r5]
   120f8:	add	r4, r6, #19
   120fc:	add	r6, r6, #23
   12100:	bl	10d58 <putc@plt>
   12104:	ldrb	r0, [r4, #1]!
   12108:	ldr	r1, [r5]
   1210c:	bl	10d58 <putc@plt>
   12110:	cmp	r4, r6
   12114:	bne	12104 <__assert_fail@plt+0x1310>
   12118:	b	12098 <__assert_fail@plt+0x12a4>
   1211c:	ldr	r2, [r0, #48]	; 0x30
   12120:	add	r3, r0, #168	; 0xa8
   12124:	strd	r4, [sp, #-12]!
   12128:	str	lr, [sp, #8]
   1212c:	sub	sp, sp, #8192	; 0x2000
   12130:	sub	sp, sp, #12
   12134:	cmp	r2, #0
   12138:	bne	121b0 <__assert_fail@plt+0x13bc>
   1213c:	add	r4, sp, #8
   12140:	movw	r2, #37124	; 0x9104
   12144:	movt	r2, #1
   12148:	mov	r0, r4
   1214c:	mov	r1, #4096	; 0x1000
   12150:	bl	10d04 <snprintf@plt>
   12154:	add	r1, sp, #4096	; 0x1000
   12158:	movw	r2, #4095	; 0xfff
   1215c:	add	r1, r1, #8
   12160:	mov	r0, r4
   12164:	bl	10c44 <readlink@plt>
   12168:	cmn	r0, #1
   1216c:	mov	r3, r0
   12170:	beq	121dc <__assert_fail@plt+0x13e8>
   12174:	add	r1, sp, #4096	; 0x1000
   12178:	mov	r2, #0
   1217c:	add	r1, r1, #8
   12180:	movw	r0, #37272	; 0x9198
   12184:	movt	r0, #1
   12188:	strb	r2, [r1, r3]
   1218c:	bl	10bc0 <printf@plt>
   12190:	add	r0, sp, #4096	; 0x1000
   12194:	add	r0, r0, #8
   12198:	bl	12f74 <__assert_fail@plt+0x2180>
   1219c:	add	sp, sp, #8192	; 0x2000
   121a0:	add	sp, sp, #12
   121a4:	ldrd	r4, [sp]
   121a8:	add	sp, sp, #8
   121ac:	pop	{pc}		; (ldr pc, [sp], #4)
   121b0:	ldr	ip, [r0, #4]
   121b4:	add	r4, sp, #8
   121b8:	movw	r2, #37248	; 0x9180
   121bc:	movt	r2, #1
   121c0:	mov	r1, #4096	; 0x1000
   121c4:	mov	r0, r4
   121c8:	ldr	ip, [ip, #24]
   121cc:	str	r3, [sp]
   121d0:	mov	r3, ip
   121d4:	bl	10d04 <snprintf@plt>
   121d8:	b	12154 <__assert_fail@plt+0x1360>
   121dc:	movw	r3, #41232	; 0xa110
   121e0:	movt	r3, #2
   121e4:	ldr	r5, [r3]
   121e8:	bl	10cf8 <__errno_location@plt>
   121ec:	ldr	r0, [r0]
   121f0:	bl	10ca4 <strerror@plt>
   121f4:	mov	r3, r0
   121f8:	mov	r2, r4
   121fc:	mov	r0, r5
   12200:	movw	r1, #37256	; 0x9188
   12204:	movt	r1, #1
   12208:	bl	10cec <fprintf@plt>
   1220c:	b	1219c <__assert_fail@plt+0x13a8>
   12210:	and	r3, r0, #61440	; 0xf000
   12214:	str	r4, [sp, #-8]!
   12218:	cmp	r3, #16384	; 0x4000
   1221c:	str	lr, [sp, #4]
   12220:	beq	12288 <__assert_fail@plt+0x1494>
   12224:	bls	1225c <__assert_fail@plt+0x1468>
   12228:	cmp	r3, #40960	; 0xa000
   1222c:	beq	122d0 <__assert_fail@plt+0x14dc>
   12230:	cmp	r3, #49152	; 0xc000
   12234:	bne	122ac <__assert_fail@plt+0x14b8>
   12238:	movw	r3, #41236	; 0xa114
   1223c:	movt	r3, #2
   12240:	mov	r0, #61	; 0x3d
   12244:	ldr	r1, [r3]
   12248:	bl	10d58 <putc@plt>
   1224c:	mov	r0, #1
   12250:	ldr	r4, [sp]
   12254:	add	sp, sp, #4
   12258:	pop	{pc}		; (ldr pc, [sp], #4)
   1225c:	cmp	r3, #4096	; 0x1000
   12260:	bne	122ac <__assert_fail@plt+0x14b8>
   12264:	movw	r3, #41236	; 0xa114
   12268:	movt	r3, #2
   1226c:	mov	r0, #124	; 0x7c
   12270:	ldr	r1, [r3]
   12274:	bl	10d58 <putc@plt>
   12278:	ldr	r4, [sp]
   1227c:	add	sp, sp, #4
   12280:	mov	r0, #1
   12284:	pop	{pc}		; (ldr pc, [sp], #4)
   12288:	movw	r3, #41236	; 0xa114
   1228c:	movt	r3, #2
   12290:	mov	r0, #47	; 0x2f
   12294:	ldr	r1, [r3]
   12298:	bl	10d58 <putc@plt>
   1229c:	ldr	r4, [sp]
   122a0:	add	sp, sp, #4
   122a4:	mov	r0, #1
   122a8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ac:	ands	r0, r0, #73	; 0x49
   122b0:	beq	12250 <__assert_fail@plt+0x145c>
   122b4:	movw	r3, #41236	; 0xa114
   122b8:	movt	r3, #2
   122bc:	mov	r0, #42	; 0x2a
   122c0:	ldr	r1, [r3]
   122c4:	bl	10d58 <putc@plt>
   122c8:	mov	r0, #1
   122cc:	b	12250 <__assert_fail@plt+0x145c>
   122d0:	movw	r3, #41236	; 0xa114
   122d4:	movt	r3, #2
   122d8:	mov	r0, #64	; 0x40
   122dc:	ldr	r1, [r3]
   122e0:	bl	10d58 <putc@plt>
   122e4:	ldr	r4, [sp]
   122e8:	add	sp, sp, #4
   122ec:	mov	r0, #1
   122f0:	pop	{pc}		; (ldr pc, [sp], #4)
   122f4:	movw	r3, #41328	; 0xa170
   122f8:	movt	r3, #2
   122fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12300:	ldr	r4, [r3]
   12304:	mov	r5, r0
   12308:	str	r6, [sp, #8]
   1230c:	mov	r6, r2
   12310:	strd	r8, [sp, #12]
   12314:	str	lr, [sp, #20]
   12318:	cmp	r4, #0
   1231c:	bne	123e4 <__assert_fail@plt+0x15f0>
   12320:	movw	r3, #41304	; 0xa158
   12324:	movt	r3, #2
   12328:	ldr	r3, [r3]
   1232c:	cmp	r3, #0
   12330:	bne	123a0 <__assert_fail@plt+0x15ac>
   12334:	add	r0, r5, #168	; 0xa8
   12338:	bl	12f74 <__assert_fail@plt+0x2180>
   1233c:	movw	r3, #41344	; 0xa180
   12340:	movt	r3, #2
   12344:	ldr	r3, [r3]
   12348:	add	r4, r4, r0
   1234c:	cmp	r3, #0
   12350:	bne	12390 <__assert_fail@plt+0x159c>
   12354:	movw	r3, #41360	; 0xa190
   12358:	movt	r3, #2
   1235c:	ldr	r3, [r3]
   12360:	cmp	r3, #0
   12364:	beq	12378 <__assert_fail@plt+0x1584>
   12368:	ldr	r0, [r5, #80]	; 0x50
   1236c:	and	r3, r0, #61440	; 0xf000
   12370:	cmp	r3, #16384	; 0x4000
   12374:	beq	12394 <__assert_fail@plt+0x15a0>
   12378:	mov	r0, r4
   1237c:	ldrd	r4, [sp]
   12380:	ldr	r6, [sp, #8]
   12384:	ldrd	r8, [sp, #12]
   12388:	add	sp, sp, #20
   1238c:	pop	{pc}		; (ldr pc, [sp], #4)
   12390:	ldr	r0, [r5, #80]	; 0x50
   12394:	bl	12210 <__assert_fail@plt+0x141c>
   12398:	add	r4, r4, r0
   1239c:	b	12378 <__assert_fail@plt+0x1584>
   123a0:	movw	r3, #41384	; 0xa1a8
   123a4:	movt	r3, #2
   123a8:	ldrd	r8, [r5, #128]	; 0x80
   123ac:	ldr	r2, [r3]
   123b0:	sub	ip, r2, #1
   123b4:	asr	r3, r2, #31
   123b8:	adds	r0, r8, ip
   123bc:	adc	r1, r9, ip, asr #31
   123c0:	bl	18e38 <__assert_fail@plt+0x8044>
   123c4:	mov	r2, r0
   123c8:	mov	r3, r1
   123cc:	movw	r0, #37288	; 0x91a8
   123d0:	movt	r0, #1
   123d4:	mov	r1, r6
   123d8:	bl	10bc0 <printf@plt>
   123dc:	add	r4, r4, r0
   123e0:	b	12334 <__assert_fail@plt+0x1540>
   123e4:	movw	r0, #37280	; 0x91a0
   123e8:	movt	r0, #1
   123ec:	ldr	r2, [r5, #160]	; 0xa0
   123f0:	bl	10bc0 <printf@plt>
   123f4:	mov	r4, r0
   123f8:	b	12320 <__assert_fail@plt+0x152c>
   123fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12400:	ldr	r4, [r0]
   12404:	strd	r6, [sp, #8]
   12408:	strd	r8, [sp, #16]
   1240c:	strd	sl, [sp, #24]
   12410:	str	lr, [sp, #32]
   12414:	sub	sp, sp, #4
   12418:	cmp	r4, #0
   1241c:	beq	1252c <__assert_fail@plt+0x1738>
   12420:	movw	r8, #41328	; 0xa170
   12424:	movt	r8, #2
   12428:	movw	r7, #41304	; 0xa158
   1242c:	movt	r7, #2
   12430:	movw	r6, #41344	; 0xa180
   12434:	movt	r6, #2
   12438:	mov	r5, r0
   1243c:	b	124a4 <__assert_fail@plt+0x16b0>
   12440:	ldr	r3, [r7]
   12444:	cmp	r3, #0
   12448:	bne	124e0 <__assert_fail@plt+0x16ec>
   1244c:	add	r0, r4, #168	; 0xa8
   12450:	bl	12f74 <__assert_fail@plt+0x2180>
   12454:	ldr	r3, [r6]
   12458:	cmp	r3, #0
   1245c:	bne	12520 <__assert_fail@plt+0x172c>
   12460:	movw	r3, #41360	; 0xa190
   12464:	movt	r3, #2
   12468:	ldr	r3, [r3]
   1246c:	cmp	r3, #0
   12470:	beq	12484 <__assert_fail@plt+0x1690>
   12474:	ldr	r0, [r4, #80]	; 0x50
   12478:	and	r3, r0, #61440	; 0xf000
   1247c:	cmp	r3, #16384	; 0x4000
   12480:	beq	12524 <__assert_fail@plt+0x1730>
   12484:	movw	r3, #41236	; 0xa114
   12488:	movt	r3, #2
   1248c:	mov	r0, #10
   12490:	ldr	r1, [r3]
   12494:	bl	10d58 <putc@plt>
   12498:	ldr	r4, [r4, #8]
   1249c:	cmp	r4, #0
   124a0:	beq	1252c <__assert_fail@plt+0x1738>
   124a4:	ldr	r3, [r4, #16]
   124a8:	cmp	r3, #1
   124ac:	beq	12498 <__assert_fail@plt+0x16a4>
   124b0:	ldr	r3, [r8]
   124b4:	ldr	r9, [r5, #20]
   124b8:	cmp	r3, #0
   124bc:	beq	12440 <__assert_fail@plt+0x164c>
   124c0:	movw	r0, #37280	; 0x91a0
   124c4:	movt	r0, #1
   124c8:	ldr	r1, [r5, #32]
   124cc:	ldr	r2, [r4, #160]	; 0xa0
   124d0:	bl	10bc0 <printf@plt>
   124d4:	ldr	r3, [r7]
   124d8:	cmp	r3, #0
   124dc:	beq	1244c <__assert_fail@plt+0x1658>
   124e0:	movw	r3, #41384	; 0xa1a8
   124e4:	movt	r3, #2
   124e8:	ldrd	sl, [r4, #128]	; 0x80
   124ec:	ldr	r2, [r3]
   124f0:	sub	ip, r2, #1
   124f4:	asr	r3, r2, #31
   124f8:	adds	r0, sl, ip
   124fc:	adc	r1, fp, ip, asr #31
   12500:	bl	18e38 <__assert_fail@plt+0x8044>
   12504:	mov	r2, r0
   12508:	mov	r3, r1
   1250c:	movw	r0, #37288	; 0x91a8
   12510:	movt	r0, #1
   12514:	mov	r1, r9
   12518:	bl	10bc0 <printf@plt>
   1251c:	b	1244c <__assert_fail@plt+0x1658>
   12520:	ldr	r0, [r4, #80]	; 0x50
   12524:	bl	12210 <__assert_fail@plt+0x141c>
   12528:	b	12484 <__assert_fail@plt+0x1690>
   1252c:	add	sp, sp, #4
   12530:	ldrd	r4, [sp]
   12534:	ldrd	r6, [sp, #8]
   12538:	ldrd	r8, [sp, #16]
   1253c:	ldrd	sl, [sp, #24]
   12540:	add	sp, sp, #32
   12544:	pop	{pc}		; (ldr pc, [sp], #4)
   12548:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1254c:	mov	r5, r0
   12550:	ldr	r4, [r0]
   12554:	ldr	r3, [r4, #48]	; 0x30
   12558:	strd	r6, [sp, #8]
   1255c:	strd	r8, [sp, #16]
   12560:	strd	sl, [sp, #24]
   12564:	str	lr, [sp, #32]
   12568:	sub	sp, sp, #44	; 0x2c
   1256c:	cmp	r3, #0
   12570:	beq	12594 <__assert_fail@plt+0x17a0>
   12574:	movw	r2, #41356	; 0xa18c
   12578:	movt	r2, #2
   1257c:	movw	r3, #41304	; 0xa158
   12580:	movt	r3, #2
   12584:	ldr	r2, [r2]
   12588:	ldr	r3, [r3]
   1258c:	orrs	r3, r2, r3
   12590:	bne	127e0 <__assert_fail@plt+0x19ec>
   12594:	movw	r8, #41328	; 0xa170
   12598:	movt	r8, #2
   1259c:	movw	r7, #41304	; 0xa158
   125a0:	movt	r7, #2
   125a4:	movw	r6, #37308	; 0x91bc
   125a8:	movt	r6, #1
   125ac:	b	12668 <__assert_fail@plt+0x1874>
   125b0:	movw	r2, #37792	; 0x93a0
   125b4:	movt	r2, #1
   125b8:	strd	r0, [sp]
   125bc:	mov	r3, ip
   125c0:	movw	r0, #37348	; 0x91e4
   125c4:	movt	r0, #1
   125c8:	rsb	r1, ip, #8
   125cc:	bl	10bc0 <printf@plt>
   125d0:	movw	r3, #41336	; 0xa178
   125d4:	movt	r3, #2
   125d8:	ldr	r3, [r3]
   125dc:	cmp	r3, #0
   125e0:	bne	127a0 <__assert_fail@plt+0x19ac>
   125e4:	movw	r3, #41380	; 0xa1a4
   125e8:	movt	r3, #2
   125ec:	ldr	r3, [r3]
   125f0:	cmp	r3, #0
   125f4:	ldrne	r0, [r4, #152]	; 0x98
   125f8:	ldreq	r0, [r4, #144]	; 0x90
   125fc:	bl	12028 <__assert_fail@plt+0x1234>
   12600:	add	r0, r4, #168	; 0xa8
   12604:	bl	12f74 <__assert_fail@plt+0x2180>
   12608:	movw	r3, #41344	; 0xa180
   1260c:	movt	r3, #2
   12610:	ldr	r3, [r3]
   12614:	cmp	r3, #0
   12618:	bne	12724 <__assert_fail@plt+0x1930>
   1261c:	movw	r3, #41360	; 0xa190
   12620:	movt	r3, #2
   12624:	ldr	r0, [r4, #80]	; 0x50
   12628:	ldr	r2, [r3]
   1262c:	and	r3, r0, #61440	; 0xf000
   12630:	cmp	r2, #0
   12634:	beq	12640 <__assert_fail@plt+0x184c>
   12638:	cmp	r3, #16384	; 0x4000
   1263c:	beq	12728 <__assert_fail@plt+0x1934>
   12640:	cmp	r3, #40960	; 0xa000
   12644:	beq	1273c <__assert_fail@plt+0x1948>
   12648:	movw	r3, #41236	; 0xa114
   1264c:	movt	r3, #2
   12650:	mov	r0, #10
   12654:	ldr	r1, [r3]
   12658:	bl	10d58 <putc@plt>
   1265c:	ldr	r4, [r4, #8]
   12660:	cmp	r4, #0
   12664:	beq	12814 <__assert_fail@plt+0x1a20>
   12668:	ldr	r3, [r4, #16]
   1266c:	cmp	r3, #1
   12670:	beq	1265c <__assert_fail@plt+0x1868>
   12674:	ldr	r3, [r8]
   12678:	cmp	r3, #0
   1267c:	bne	12788 <__assert_fail@plt+0x1994>
   12680:	ldr	r3, [r7]
   12684:	cmp	r3, #0
   12688:	bne	12748 <__assert_fail@plt+0x1954>
   1268c:	add	r1, sp, #20
   12690:	ldr	r0, [r4, #80]	; 0x50
   12694:	bl	132ec <__assert_fail@plt+0x24f8>
   12698:	ldr	r9, [r4, #20]
   1269c:	add	r1, sp, #20
   126a0:	mov	r0, r6
   126a4:	ldr	r2, [r5, #28]
   126a8:	ldr	lr, [r5, #44]	; 0x2c
   126ac:	ldr	ip, [r9, #4]
   126b0:	ldr	r3, [r4, #84]	; 0x54
   126b4:	str	r2, [sp, #8]
   126b8:	ldr	r2, [r5, #36]	; 0x24
   126bc:	str	ip, [sp, #12]
   126c0:	ldr	ip, [r9]
   126c4:	str	lr, [sp]
   126c8:	str	ip, [sp, #4]
   126cc:	bl	10bc0 <printf@plt>
   126d0:	movw	r3, #41320	; 0xa168
   126d4:	movt	r3, #2
   126d8:	ldr	r3, [r3]
   126dc:	cmp	r3, #0
   126e0:	bne	127c8 <__assert_fail@plt+0x19d4>
   126e4:	ldr	r3, [r4, #80]	; 0x50
   126e8:	and	r3, r3, #45056	; 0xb000
   126ec:	cmp	r3, #8192	; 0x2000
   126f0:	beq	127ac <__assert_fail@plt+0x19b8>
   126f4:	ldr	r3, [r5, #8]
   126f8:	ldr	ip, [r5, #40]	; 0x28
   126fc:	ldrd	r0, [r4, #112]	; 0x70
   12700:	cmp	r3, #0
   12704:	bne	125b0 <__assert_fail@plt+0x17bc>
   12708:	mov	r2, r0
   1270c:	mov	r3, r1
   12710:	movw	r0, #37288	; 0x91a8
   12714:	movt	r0, #1
   12718:	mov	r1, ip
   1271c:	bl	10bc0 <printf@plt>
   12720:	b	125d0 <__assert_fail@plt+0x17dc>
   12724:	ldr	r0, [r4, #80]	; 0x50
   12728:	bl	12210 <__assert_fail@plt+0x141c>
   1272c:	ldr	r3, [r4, #80]	; 0x50
   12730:	and	r3, r3, #61440	; 0xf000
   12734:	cmp	r3, #40960	; 0xa000
   12738:	bne	12648 <__assert_fail@plt+0x1854>
   1273c:	mov	r0, r4
   12740:	bl	1211c <__assert_fail@plt+0x1328>
   12744:	b	12648 <__assert_fail@plt+0x1854>
   12748:	movw	r3, #41384	; 0xa1a8
   1274c:	movt	r3, #2
   12750:	ldrd	sl, [r4, #128]	; 0x80
   12754:	ldr	r2, [r3]
   12758:	sub	ip, r2, #1
   1275c:	asr	r3, r2, #31
   12760:	adds	r0, sl, ip
   12764:	adc	r1, fp, ip, asr #31
   12768:	bl	18e38 <__assert_fail@plt+0x8044>
   1276c:	mov	r2, r0
   12770:	mov	r3, r1
   12774:	ldr	r1, [r5, #20]
   12778:	movw	r0, #37288	; 0x91a8
   1277c:	movt	r0, #1
   12780:	bl	10bc0 <printf@plt>
   12784:	b	1268c <__assert_fail@plt+0x1898>
   12788:	movw	r0, #37280	; 0x91a0
   1278c:	movt	r0, #1
   12790:	ldr	r1, [r5, #32]
   12794:	ldr	r2, [r4, #160]	; 0xa0
   12798:	bl	10bc0 <printf@plt>
   1279c:	b	12680 <__assert_fail@plt+0x188c>
   127a0:	ldr	r0, [r4, #136]	; 0x88
   127a4:	bl	12028 <__assert_fail@plt+0x1234>
   127a8:	b	12600 <__assert_fail@plt+0x180c>
   127ac:	ldr	r1, [r4, #96]	; 0x60
   127b0:	movw	r0, #37336	; 0x91d8
   127b4:	movt	r0, #1
   127b8:	uxtb	r2, r1
   127bc:	ubfx	r1, r1, #8, #8
   127c0:	bl	10bc0 <printf@plt>
   127c4:	b	125d0 <__assert_fail@plt+0x17dc>
   127c8:	movw	r0, #37328	; 0x91d0
   127cc:	movt	r0, #1
   127d0:	ldr	r2, [r9, #8]
   127d4:	ldr	r1, [r5, #24]
   127d8:	bl	10bc0 <printf@plt>
   127dc:	b	126e4 <__assert_fail@plt+0x18f0>
   127e0:	movw	r2, #41384	; 0xa1a8
   127e4:	movt	r2, #2
   127e8:	ldr	ip, [r5, #4]
   127ec:	movw	r0, #37296	; 0x91b0
   127f0:	movt	r0, #1
   127f4:	ldr	r1, [r2]
   127f8:	sub	r3, r1, #1
   127fc:	add	r3, r3, ip
   12800:	udiv	r1, r3, r1
   12804:	bl	10bc0 <printf@plt>
   12808:	ldr	r4, [r5]
   1280c:	cmp	r4, #0
   12810:	bne	12594 <__assert_fail@plt+0x17a0>
   12814:	add	sp, sp, #44	; 0x2c
   12818:	ldrd	r4, [sp]
   1281c:	ldrd	r6, [sp, #8]
   12820:	ldrd	r8, [sp, #16]
   12824:	ldrd	sl, [sp, #24]
   12828:	add	sp, sp, #32
   1282c:	pop	{pc}		; (ldr pc, [sp], #4)
   12830:	movw	r3, #41328	; 0xa170
   12834:	movt	r3, #2
   12838:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1283c:	ldr	r2, [r3]
   12840:	ldr	r3, [r0, #16]
   12844:	strd	r6, [sp, #8]
   12848:	strd	r8, [sp, #16]
   1284c:	cmp	r2, #0
   12850:	strd	sl, [sp, #24]
   12854:	str	lr, [sp, #32]
   12858:	sub	sp, sp, #20
   1285c:	beq	1286c <__assert_fail@plt+0x1a78>
   12860:	ldr	r2, [r0, #32]
   12864:	add	r2, r2, #1
   12868:	add	r3, r3, r2
   1286c:	movw	r4, #41304	; 0xa158
   12870:	movt	r4, #2
   12874:	ldr	r2, [r4]
   12878:	cmp	r2, #0
   1287c:	beq	1288c <__assert_fail@plt+0x1a98>
   12880:	ldr	r2, [r0, #20]
   12884:	add	r2, r2, #1
   12888:	add	r3, r3, r2
   1288c:	movw	r1, #41344	; 0xa180
   12890:	movt	r1, #2
   12894:	movw	r2, #41360	; 0xa190
   12898:	movt	r2, #2
   1289c:	ldr	ip, [r1]
   128a0:	add	r1, r3, #1
   128a4:	ldr	r2, [r2]
   128a8:	orrs	r2, ip, r2
   128ac:	addne	r1, r3, #2
   128b0:	movw	r3, #41200	; 0xa0f0
   128b4:	movt	r3, #2
   128b8:	ldr	r3, [r3]
   128bc:	add	r3, r3, #1
   128c0:	cmp	r3, r1, lsl #1
   128c4:	blt	12b04 <__assert_fail@plt+0x1d10>
   128c8:	sdiv	r2, r3, r1
   128cc:	sdiv	r3, r3, r2
   128d0:	cmp	r3, #0
   128d4:	strd	r2, [sp, #4]
   128d8:	beq	12a20 <__assert_fail@plt+0x1c2c>
   128dc:	movw	r5, #41216	; 0xa100
   128e0:	movt	r5, #2
   128e4:	ldr	r1, [r0, #12]
   128e8:	mov	r8, r0
   128ec:	ldr	r3, [r5]
   128f0:	cmp	r1, r3
   128f4:	bgt	12aa8 <__assert_fail@plt+0x1cb4>
   128f8:	ldr	r9, [r8]
   128fc:	cmp	r9, #0
   12900:	beq	12a50 <__assert_fail@plt+0x1c5c>
   12904:	movw	fp, #41260	; 0xa12c
   12908:	movt	fp, #2
   1290c:	ldr	r1, [fp]
   12910:	mov	r3, #0
   12914:	add	sl, r3, #1
   12918:	ldr	r2, [r9, #16]
   1291c:	cmp	r2, #1
   12920:	beq	12a3c <__assert_fail@plt+0x1c48>
   12924:	str	r9, [r1, r3, lsl #2]
   12928:	mov	r3, sl
   1292c:	ldr	r9, [r9, #8]
   12930:	cmp	r9, #0
   12934:	bne	12914 <__assert_fail@plt+0x1b20>
   12938:	ldr	r2, [sp, #4]
   1293c:	ldr	r3, [r8]
   12940:	sdiv	r1, sl, r2
   12944:	ldr	r3, [r3, #48]	; 0x30
   12948:	mls	r2, r2, r1, sl
   1294c:	mov	r5, r1
   12950:	cmp	r2, #0
   12954:	addne	r2, r1, #1
   12958:	movne	r5, r2
   1295c:	cmp	r3, #0
   12960:	bne	12a64 <__assert_fail@plt+0x1c70>
   12964:	cmp	r5, #0
   12968:	mov	r9, r5
   1296c:	ble	12a20 <__assert_fail@plt+0x1c2c>
   12970:	mov	r3, #0
   12974:	movw	fp, #41260	; 0xa12c
   12978:	movt	fp, #2
   1297c:	movw	r4, #41236	; 0xa114
   12980:	movt	r4, #2
   12984:	str	sl, [sp]
   12988:	str	r3, [sp, #12]
   1298c:	ldr	r3, [sp, #8]
   12990:	add	r5, r3, #1
   12994:	ldr	r6, [sp, #12]
   12998:	mov	r7, #0
   1299c:	ldr	r3, [fp]
   129a0:	ldr	r2, [r8, #20]
   129a4:	ldr	r1, [r8, #32]
   129a8:	ldr	r0, [r3, r6, lsl #2]
   129ac:	add	r6, r6, r9
   129b0:	bl	122f4 <__assert_fail@plt+0x1500>
   129b4:	ldr	r3, [sp]
   129b8:	cmp	r6, r3
   129bc:	bge	129fc <__assert_fail@plt+0x1c08>
   129c0:	ldr	r3, [sp, #4]
   129c4:	add	r7, r7, #1
   129c8:	cmp	r7, r3
   129cc:	beq	129fc <__assert_fail@plt+0x1c08>
   129d0:	ldr	r3, [sp, #8]
   129d4:	add	sl, r0, #1
   129d8:	cmp	r0, r3
   129dc:	bge	1299c <__assert_fail@plt+0x1ba8>
   129e0:	add	sl, sl, #1
   129e4:	mov	r0, #32
   129e8:	ldr	r1, [r4]
   129ec:	bl	10d58 <putc@plt>
   129f0:	cmp	sl, r5
   129f4:	bne	129e0 <__assert_fail@plt+0x1bec>
   129f8:	b	1299c <__assert_fail@plt+0x1ba8>
   129fc:	ldr	r3, [sp, #12]
   12a00:	mov	r0, #10
   12a04:	ldr	r1, [r4]
   12a08:	add	r3, r3, #1
   12a0c:	mov	r6, r3
   12a10:	str	r3, [sp, #12]
   12a14:	bl	10d58 <putc@plt>
   12a18:	cmp	r6, r9
   12a1c:	bne	12994 <__assert_fail@plt+0x1ba0>
   12a20:	add	sp, sp, #20
   12a24:	ldrd	r4, [sp]
   12a28:	ldrd	r6, [sp, #8]
   12a2c:	ldrd	r8, [sp, #16]
   12a30:	ldrd	sl, [sp, #24]
   12a34:	add	sp, sp, #32
   12a38:	pop	{pc}		; (ldr pc, [sp], #4)
   12a3c:	ldr	r9, [r9, #8]
   12a40:	cmp	r9, #0
   12a44:	bne	12914 <__assert_fail@plt+0x1b20>
   12a48:	mov	sl, r3
   12a4c:	b	12938 <__assert_fail@plt+0x1b44>
   12a50:	ldr	r3, [r9, #48]	; 0x30
   12a54:	cmp	r3, #0
   12a58:	beq	12a20 <__assert_fail@plt+0x1c2c>
   12a5c:	mov	r5, r9
   12a60:	mov	sl, r9
   12a64:	movw	r3, #41356	; 0xa18c
   12a68:	movt	r3, #2
   12a6c:	ldr	r2, [r4]
   12a70:	ldr	r3, [r3]
   12a74:	orrs	r3, r3, r2
   12a78:	beq	12964 <__assert_fail@plt+0x1b70>
   12a7c:	movw	r3, #41384	; 0xa1a8
   12a80:	movt	r3, #2
   12a84:	ldr	r2, [r8, #4]
   12a88:	movw	r0, #37296	; 0x91b0
   12a8c:	movt	r0, #1
   12a90:	ldr	r1, [r3]
   12a94:	sub	r3, r1, #1
   12a98:	add	r3, r3, r2
   12a9c:	udiv	r1, r3, r1
   12aa0:	bl	10bc0 <printf@plt>
   12aa4:	b	12964 <__assert_fail@plt+0x1b70>
   12aa8:	movw	fp, #41260	; 0xa12c
   12aac:	movt	fp, #2
   12ab0:	lsl	r1, r1, #2
   12ab4:	ldr	r0, [fp]
   12ab8:	bl	18a8c <__assert_fail@plt+0x7c98>
   12abc:	cmp	r0, #0
   12ac0:	beq	12ad4 <__assert_fail@plt+0x1ce0>
   12ac4:	ldr	r3, [r8, #12]
   12ac8:	str	r0, [fp]
   12acc:	str	r3, [r5]
   12ad0:	b	128f8 <__assert_fail@plt+0x1b04>
   12ad4:	movw	r3, #41232	; 0xa110
   12ad8:	movt	r3, #2
   12adc:	ldr	r4, [r3]
   12ae0:	bl	10cf8 <__errno_location@plt>
   12ae4:	ldr	r0, [r0]
   12ae8:	bl	10ca4 <strerror@plt>
   12aec:	mov	r2, r0
   12af0:	movw	r1, #37360	; 0x91f0
   12af4:	movt	r1, #1
   12af8:	mov	r0, r4
   12afc:	bl	10cec <fprintf@plt>
   12b00:	mov	r0, r8
   12b04:	add	sp, sp, #20
   12b08:	ldrd	r4, [sp]
   12b0c:	ldrd	r6, [sp, #8]
   12b10:	ldrd	r8, [sp, #16]
   12b14:	ldrd	sl, [sp, #24]
   12b18:	ldr	lr, [sp, #32]
   12b1c:	add	sp, sp, #36	; 0x24
   12b20:	b	123fc <__assert_fail@plt+0x1608>
   12b24:	movw	r3, #41328	; 0xa170
   12b28:	movt	r3, #2
   12b2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12b30:	ldr	r2, [r3]
   12b34:	ldr	r3, [r0, #16]
   12b38:	strd	r6, [sp, #8]
   12b3c:	strd	r8, [sp, #16]
   12b40:	cmp	r2, #0
   12b44:	strd	sl, [sp, #24]
   12b48:	str	lr, [sp, #32]
   12b4c:	sub	sp, sp, #4
   12b50:	beq	12b60 <__assert_fail@plt+0x1d6c>
   12b54:	ldr	r2, [r0, #32]
   12b58:	add	r2, r2, #1
   12b5c:	add	r3, r3, r2
   12b60:	movw	r2, #41304	; 0xa158
   12b64:	movt	r2, #2
   12b68:	ldr	ip, [r2]
   12b6c:	cmp	ip, #0
   12b70:	beq	12b80 <__assert_fail@plt+0x1d8c>
   12b74:	ldr	r2, [r0, #20]
   12b78:	add	r2, r2, #1
   12b7c:	add	r3, r3, r2
   12b80:	movw	r1, #41344	; 0xa180
   12b84:	movt	r1, #2
   12b88:	movw	r2, #41360	; 0xa190
   12b8c:	movt	r2, #2
   12b90:	ldr	r1, [r1]
   12b94:	add	r7, r3, #1
   12b98:	ldr	r2, [r2]
   12b9c:	orrs	r2, r1, r2
   12ba0:	addne	r7, r3, #2
   12ba4:	movw	r3, #41200	; 0xa0f0
   12ba8:	movt	r3, #2
   12bac:	ldr	sl, [r3]
   12bb0:	add	sl, sl, #1
   12bb4:	cmp	sl, r7, lsl #1
   12bb8:	blt	12cf4 <__assert_fail@plt+0x1f00>
   12bbc:	sdiv	r7, sl, r7
   12bc0:	sdiv	sl, sl, r7
   12bc4:	cmp	sl, #0
   12bc8:	beq	12d14 <__assert_fail@plt+0x1f20>
   12bcc:	ldr	fp, [r0]
   12bd0:	mov	r6, r0
   12bd4:	ldr	r3, [fp, #48]	; 0x30
   12bd8:	cmp	r3, #0
   12bdc:	bne	12c9c <__assert_fail@plt+0x1ea8>
   12be0:	movw	r8, #41236	; 0xa114
   12be4:	movt	r8, #2
   12be8:	mov	r5, #0
   12bec:	add	r9, sl, #1
   12bf0:	b	12c18 <__assert_fail@plt+0x1e24>
   12bf4:	mov	r0, fp
   12bf8:	ldr	r2, [r6, #20]
   12bfc:	ldr	r1, [r6, #32]
   12c00:	bl	122f4 <__assert_fail@plt+0x1500>
   12c04:	cmp	r7, r5
   12c08:	bgt	12c44 <__assert_fail@plt+0x1e50>
   12c0c:	ldr	fp, [fp, #8]
   12c10:	cmp	fp, #0
   12c14:	beq	12c74 <__assert_fail@plt+0x1e80>
   12c18:	ldr	r3, [fp, #16]
   12c1c:	cmp	r3, #1
   12c20:	beq	12c0c <__assert_fail@plt+0x1e18>
   12c24:	cmp	r5, r7
   12c28:	addlt	r5, r5, #1
   12c2c:	blt	12bf4 <__assert_fail@plt+0x1e00>
   12c30:	mov	r0, #10
   12c34:	ldr	r1, [r8]
   12c38:	mov	r5, #1
   12c3c:	bl	10d58 <putc@plt>
   12c40:	b	12bf4 <__assert_fail@plt+0x1e00>
   12c44:	cmp	r0, sl
   12c48:	add	r4, r0, #1
   12c4c:	bge	12c0c <__assert_fail@plt+0x1e18>
   12c50:	add	r4, r4, #1
   12c54:	mov	r0, #32
   12c58:	ldr	r1, [r8]
   12c5c:	bl	10d58 <putc@plt>
   12c60:	cmp	r4, r9
   12c64:	bne	12c50 <__assert_fail@plt+0x1e5c>
   12c68:	ldr	fp, [fp, #8]
   12c6c:	cmp	fp, #0
   12c70:	bne	12c18 <__assert_fail@plt+0x1e24>
   12c74:	ldr	r1, [r8]
   12c78:	mov	r0, #10
   12c7c:	add	sp, sp, #4
   12c80:	ldrd	r4, [sp]
   12c84:	ldrd	r6, [sp, #8]
   12c88:	ldrd	r8, [sp, #16]
   12c8c:	ldrd	sl, [sp, #24]
   12c90:	ldr	lr, [sp, #32]
   12c94:	add	sp, sp, #36	; 0x24
   12c98:	b	10d58 <putc@plt>
   12c9c:	movw	r3, #41356	; 0xa18c
   12ca0:	movt	r3, #2
   12ca4:	ldr	r3, [r3]
   12ca8:	orrs	r3, ip, r3
   12cac:	beq	12be0 <__assert_fail@plt+0x1dec>
   12cb0:	movw	r3, #41384	; 0xa1a8
   12cb4:	movt	r3, #2
   12cb8:	ldr	ip, [r6, #4]
   12cbc:	movw	r0, #37376	; 0x9200
   12cc0:	movt	r0, #1
   12cc4:	ldr	r1, [r3]
   12cc8:	mov	r3, #0
   12ccc:	sub	r2, r1, #1
   12cd0:	add	r2, r2, ip
   12cd4:	udiv	r2, r2, r1
   12cd8:	bl	10bc0 <printf@plt>
   12cdc:	ldr	fp, [r6]
   12ce0:	cmp	fp, #0
   12ce4:	bne	12be0 <__assert_fail@plt+0x1dec>
   12ce8:	movw	r8, #41236	; 0xa114
   12cec:	movt	r8, #2
   12cf0:	b	12c74 <__assert_fail@plt+0x1e80>
   12cf4:	add	sp, sp, #4
   12cf8:	ldrd	r4, [sp]
   12cfc:	ldrd	r6, [sp, #8]
   12d00:	ldrd	r8, [sp, #16]
   12d04:	ldrd	sl, [sp, #24]
   12d08:	ldr	lr, [sp, #32]
   12d0c:	add	sp, sp, #36	; 0x24
   12d10:	b	123fc <__assert_fail@plt+0x1608>
   12d14:	add	sp, sp, #4
   12d18:	ldrd	r4, [sp]
   12d1c:	ldrd	r6, [sp, #8]
   12d20:	ldrd	r8, [sp, #16]
   12d24:	ldrd	sl, [sp, #24]
   12d28:	add	sp, sp, #32
   12d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12d34:	strd	r6, [sp, #8]
   12d38:	strd	r8, [sp, #16]
   12d3c:	movw	r8, #41328	; 0xa170
   12d40:	movt	r8, #2
   12d44:	ldr	r3, [r8]
   12d48:	strd	sl, [sp, #24]
   12d4c:	str	lr, [sp, #32]
   12d50:	sub	sp, sp, #28
   12d54:	cmp	r3, #0
   12d58:	str	r3, [sp, #8]
   12d5c:	beq	12d6c <__assert_fail@plt+0x1f78>
   12d60:	ldr	r3, [r0, #32]
   12d64:	add	r3, r3, #1
   12d68:	str	r3, [sp, #8]
   12d6c:	movw	r9, #41304	; 0xa158
   12d70:	movt	r9, #2
   12d74:	ldr	r3, [r9]
   12d78:	cmp	r3, #0
   12d7c:	beq	12d94 <__assert_fail@plt+0x1fa0>
   12d80:	ldr	r3, [r0, #20]
   12d84:	ldr	r2, [sp, #8]
   12d88:	add	r3, r3, #1
   12d8c:	add	r3, r2, r3
   12d90:	str	r3, [sp, #8]
   12d94:	movw	r7, #41344	; 0xa180
   12d98:	movt	r7, #2
   12d9c:	ldr	r3, [r7]
   12da0:	cmp	r3, #0
   12da4:	beq	12db4 <__assert_fail@plt+0x1fc0>
   12da8:	ldr	r3, [sp, #8]
   12dac:	add	r3, r3, #1
   12db0:	str	r3, [sp, #8]
   12db4:	ldr	r4, [r0]
   12db8:	cmp	r4, #0
   12dbc:	beq	12f3c <__assert_fail@plt+0x2148>
   12dc0:	movw	r3, #41236	; 0xa114
   12dc4:	movt	r3, #2
   12dc8:	str	r8, [sp, #4]
   12dcc:	movw	fp, #41360	; 0xa190
   12dd0:	movt	fp, #2
   12dd4:	str	r3, [sp, #12]
   12dd8:	movw	r3, #41384	; 0xa1a8
   12ddc:	movt	r3, #2
   12de0:	mov	sl, r0
   12de4:	mov	r6, #0
   12de8:	str	r3, [sp, #16]
   12dec:	movw	r3, #37288	; 0x91a8
   12df0:	movt	r3, #1
   12df4:	str	r3, [sp, #20]
   12df8:	b	12e60 <__assert_fail@plt+0x206c>
   12dfc:	ldr	r3, [sp, #4]
   12e00:	ldr	r8, [sl, #20]
   12e04:	ldr	r5, [r3]
   12e08:	cmp	r5, #0
   12e0c:	bne	12f0c <__assert_fail@plt+0x2118>
   12e10:	ldr	r3, [r9]
   12e14:	cmp	r3, #0
   12e18:	bne	12ed0 <__assert_fail@plt+0x20dc>
   12e1c:	add	r0, r4, #168	; 0xa8
   12e20:	bl	12f74 <__assert_fail@plt+0x2180>
   12e24:	ldr	r3, [r7]
   12e28:	add	r5, r0, r5
   12e2c:	cmp	r3, #0
   12e30:	bne	12ec0 <__assert_fail@plt+0x20cc>
   12e34:	ldr	r3, [fp]
   12e38:	cmp	r3, #0
   12e3c:	beq	12e50 <__assert_fail@plt+0x205c>
   12e40:	ldr	r0, [r4, #80]	; 0x50
   12e44:	and	r3, r0, #61440	; 0xf000
   12e48:	cmp	r3, #16384	; 0x4000
   12e4c:	beq	12ec4 <__assert_fail@plt+0x20d0>
   12e50:	add	r6, r6, r5
   12e54:	ldr	r4, [r4, #8]
   12e58:	cmp	r4, #0
   12e5c:	beq	12f48 <__assert_fail@plt+0x2154>
   12e60:	ldr	r3, [r4, #16]
   12e64:	cmp	r3, #1
   12e68:	beq	12e54 <__assert_fail@plt+0x2060>
   12e6c:	cmp	r6, #0
   12e70:	ble	12dfc <__assert_fail@plt+0x2008>
   12e74:	ldr	r5, [sp, #12]
   12e78:	mov	r0, #44	; 0x2c
   12e7c:	add	r6, r6, #2
   12e80:	ldr	r1, [r5]
   12e84:	bl	10d58 <putc@plt>
   12e88:	ldr	r3, [sp, #8]
   12e8c:	movw	r2, #41200	; 0xa0f0
   12e90:	movt	r2, #2
   12e94:	ldr	r1, [r4, #52]	; 0x34
   12e98:	ldr	r2, [r2]
   12e9c:	add	r3, r6, r3
   12ea0:	add	r3, r3, r1
   12ea4:	cmp	r3, r2
   12ea8:	bcc	12f28 <__assert_fail@plt+0x2134>
   12eac:	mov	r0, #10
   12eb0:	ldr	r1, [r5]
   12eb4:	mov	r6, #0
   12eb8:	bl	10d58 <putc@plt>
   12ebc:	b	12dfc <__assert_fail@plt+0x2008>
   12ec0:	ldr	r0, [r4, #80]	; 0x50
   12ec4:	bl	12210 <__assert_fail@plt+0x141c>
   12ec8:	add	r5, r5, r0
   12ecc:	b	12e50 <__assert_fail@plt+0x205c>
   12ed0:	ldr	r3, [sp, #16]
   12ed4:	ldrd	r0, [r4, #128]	; 0x80
   12ed8:	ldr	r2, [r3]
   12edc:	sub	ip, r2, #1
   12ee0:	asr	r3, r2, #31
   12ee4:	adds	r0, r0, ip
   12ee8:	adc	r1, r1, ip, asr #31
   12eec:	bl	18e38 <__assert_fail@plt+0x8044>
   12ef0:	mov	r2, r0
   12ef4:	mov	r3, r1
   12ef8:	ldr	r0, [sp, #20]
   12efc:	mov	r1, r8
   12f00:	bl	10bc0 <printf@plt>
   12f04:	add	r5, r5, r0
   12f08:	b	12e1c <__assert_fail@plt+0x2028>
   12f0c:	movw	r0, #37280	; 0x91a0
   12f10:	movt	r0, #1
   12f14:	ldr	r1, [sl, #32]
   12f18:	ldr	r2, [r4, #160]	; 0xa0
   12f1c:	bl	10bc0 <printf@plt>
   12f20:	mov	r5, r0
   12f24:	b	12e10 <__assert_fail@plt+0x201c>
   12f28:	ldr	r3, [sp, #12]
   12f2c:	mov	r0, #32
   12f30:	ldr	r1, [r3]
   12f34:	bl	10d58 <putc@plt>
   12f38:	b	12dfc <__assert_fail@plt+0x2008>
   12f3c:	movw	r3, #41236	; 0xa114
   12f40:	movt	r3, #2
   12f44:	str	r3, [sp, #12]
   12f48:	ldr	r3, [sp, #12]
   12f4c:	mov	r0, #10
   12f50:	ldr	r1, [r3]
   12f54:	add	sp, sp, #28
   12f58:	ldrd	r4, [sp]
   12f5c:	ldrd	r6, [sp, #8]
   12f60:	ldrd	r8, [sp, #16]
   12f64:	ldrd	sl, [sp, #24]
   12f68:	ldr	lr, [sp, #32]
   12f6c:	add	sp, sp, #36	; 0x24
   12f70:	b	10d58 <putc@plt>
   12f74:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12f78:	strd	r6, [sp, #8]
   12f7c:	strd	r8, [sp, #16]
   12f80:	str	sl, [sp, #24]
   12f84:	str	lr, [sp, #28]
   12f88:	ldrb	r4, [r0]
   12f8c:	cmp	r4, #0
   12f90:	beq	13008 <__assert_fail@plt+0x2214>
   12f94:	mov	r5, r0
   12f98:	rsb	r7, r0, #1
   12f9c:	bl	10cbc <__ctype_b_loc@plt>
   12fa0:	movw	r6, #41236	; 0xa114
   12fa4:	movt	r6, #2
   12fa8:	movw	r8, #41396	; 0xa1b4
   12fac:	movt	r8, #2
   12fb0:	mov	r9, r0
   12fb4:	ldr	r2, [r9]
   12fb8:	lsl	r3, r4, #1
   12fbc:	mov	r0, r4
   12fc0:	ldrh	r3, [r2, r3]
   12fc4:	tst	r3, #16384	; 0x4000
   12fc8:	bne	12fd8 <__assert_fail@plt+0x21e4>
   12fcc:	ldr	r3, [r8]
   12fd0:	cmp	r3, #0
   12fd4:	movne	r0, #63	; 0x3f
   12fd8:	ldr	r1, [r6]
   12fdc:	bl	10d58 <putc@plt>
   12fe0:	add	r0, r5, r7
   12fe4:	ldrb	r4, [r5, #1]!
   12fe8:	cmp	r4, #0
   12fec:	bne	12fb4 <__assert_fail@plt+0x21c0>
   12ff0:	ldrd	r4, [sp]
   12ff4:	ldrd	r6, [sp, #8]
   12ff8:	ldrd	r8, [sp, #16]
   12ffc:	ldr	sl, [sp, #24]
   13000:	add	sp, sp, #28
   13004:	pop	{pc}		; (ldr pc, [sp], #4)
   13008:	mov	r0, r4
   1300c:	b	12ff0 <__assert_fail@plt+0x21fc>
   13010:	movw	r3, #41232	; 0xa110
   13014:	movt	r3, #2
   13018:	str	r4, [sp, #-8]!
   1301c:	movw	r0, #37388	; 0x920c
   13020:	movt	r0, #1
   13024:	ldr	r3, [r3]
   13028:	mov	r2, #51	; 0x33
   1302c:	mov	r1, #1
   13030:	str	lr, [sp, #4]
   13034:	bl	10c50 <fwrite@plt>
   13038:	ldr	r4, [sp]
   1303c:	add	sp, sp, #4
   13040:	mov	r0, #1
   13044:	pop	{pc}		; (ldr pc, [sp], #4)
   13048:	add	r1, r1, #168	; 0xa8
   1304c:	add	r0, r0, #168	; 0xa8
   13050:	b	10b9c <strcmp@plt>
   13054:	add	r3, r1, #168	; 0xa8
   13058:	add	r1, r0, #168	; 0xa8
   1305c:	mov	r0, r3
   13060:	b	10b9c <strcmp@plt>
   13064:	ldr	r3, [r0, #144]	; 0x90
   13068:	ldr	r2, [r1, #144]	; 0x90
   1306c:	cmp	r2, r3
   13070:	bgt	13098 <__assert_fail@plt+0x22a4>
   13074:	beq	13088 <__assert_fail@plt+0x2294>
   13078:	blt	130a0 <__assert_fail@plt+0x22ac>
   1307c:	add	r1, r1, #168	; 0xa8
   13080:	add	r0, r0, #168	; 0xa8
   13084:	b	10b9c <strcmp@plt>
   13088:	ldr	r3, [r0, #148]	; 0x94
   1308c:	ldr	r2, [r1, #148]	; 0x94
   13090:	cmp	r2, r3
   13094:	ble	13078 <__assert_fail@plt+0x2284>
   13098:	mov	r0, #1
   1309c:	bx	lr
   130a0:	mvn	r0, #0
   130a4:	bx	lr
   130a8:	ldr	r3, [r0, #144]	; 0x90
   130ac:	ldr	r2, [r1, #144]	; 0x90
   130b0:	cmp	r2, r3
   130b4:	bgt	130f4 <__assert_fail@plt+0x2300>
   130b8:	beq	130e4 <__assert_fail@plt+0x22f0>
   130bc:	blt	130fc <__assert_fail@plt+0x2308>
   130c0:	add	r1, r1, #168	; 0xa8
   130c4:	add	r0, r0, #168	; 0xa8
   130c8:	str	r4, [sp, #-8]!
   130cc:	str	lr, [sp, #4]
   130d0:	bl	10b9c <strcmp@plt>
   130d4:	ldr	r4, [sp]
   130d8:	add	sp, sp, #4
   130dc:	rsb	r0, r0, #0
   130e0:	pop	{pc}		; (ldr pc, [sp], #4)
   130e4:	ldr	r3, [r0, #148]	; 0x94
   130e8:	ldr	r2, [r1, #148]	; 0x94
   130ec:	cmp	r2, r3
   130f0:	ble	130bc <__assert_fail@plt+0x22c8>
   130f4:	mvn	r0, #0
   130f8:	bx	lr
   130fc:	mov	r0, #1
   13100:	bx	lr
   13104:	ldr	r3, [r0, #136]	; 0x88
   13108:	ldr	r2, [r1, #136]	; 0x88
   1310c:	cmp	r2, r3
   13110:	bgt	13138 <__assert_fail@plt+0x2344>
   13114:	beq	13128 <__assert_fail@plt+0x2334>
   13118:	blt	13140 <__assert_fail@plt+0x234c>
   1311c:	add	r1, r1, #168	; 0xa8
   13120:	add	r0, r0, #168	; 0xa8
   13124:	b	10b9c <strcmp@plt>
   13128:	ldr	r3, [r0, #140]	; 0x8c
   1312c:	ldr	r2, [r1, #140]	; 0x8c
   13130:	cmp	r2, r3
   13134:	ble	13118 <__assert_fail@plt+0x2324>
   13138:	mov	r0, #1
   1313c:	bx	lr
   13140:	mvn	r0, #0
   13144:	bx	lr
   13148:	ldr	r3, [r0, #136]	; 0x88
   1314c:	ldr	r2, [r1, #136]	; 0x88
   13150:	cmp	r2, r3
   13154:	bgt	13194 <__assert_fail@plt+0x23a0>
   13158:	beq	13184 <__assert_fail@plt+0x2390>
   1315c:	blt	1319c <__assert_fail@plt+0x23a8>
   13160:	add	r1, r1, #168	; 0xa8
   13164:	add	r0, r0, #168	; 0xa8
   13168:	str	r4, [sp, #-8]!
   1316c:	str	lr, [sp, #4]
   13170:	bl	10b9c <strcmp@plt>
   13174:	ldr	r4, [sp]
   13178:	add	sp, sp, #4
   1317c:	rsb	r0, r0, #0
   13180:	pop	{pc}		; (ldr pc, [sp], #4)
   13184:	ldr	r3, [r0, #140]	; 0x8c
   13188:	ldr	r2, [r1, #140]	; 0x8c
   1318c:	cmp	r2, r3
   13190:	ble	1315c <__assert_fail@plt+0x2368>
   13194:	mvn	r0, #0
   13198:	bx	lr
   1319c:	mov	r0, #1
   131a0:	bx	lr
   131a4:	ldr	r3, [r0, #152]	; 0x98
   131a8:	ldr	r2, [r1, #152]	; 0x98
   131ac:	cmp	r2, r3
   131b0:	bgt	131d8 <__assert_fail@plt+0x23e4>
   131b4:	beq	131c8 <__assert_fail@plt+0x23d4>
   131b8:	blt	131e0 <__assert_fail@plt+0x23ec>
   131bc:	add	r1, r1, #168	; 0xa8
   131c0:	add	r0, r0, #168	; 0xa8
   131c4:	b	10b9c <strcmp@plt>
   131c8:	ldr	r3, [r0, #156]	; 0x9c
   131cc:	ldr	r2, [r1, #156]	; 0x9c
   131d0:	cmp	r2, r3
   131d4:	ble	131b8 <__assert_fail@plt+0x23c4>
   131d8:	mov	r0, #1
   131dc:	bx	lr
   131e0:	mvn	r0, #0
   131e4:	bx	lr
   131e8:	ldr	r3, [r0, #152]	; 0x98
   131ec:	ldr	r2, [r1, #152]	; 0x98
   131f0:	cmp	r2, r3
   131f4:	bgt	13234 <__assert_fail@plt+0x2440>
   131f8:	beq	13224 <__assert_fail@plt+0x2430>
   131fc:	blt	1323c <__assert_fail@plt+0x2448>
   13200:	add	r1, r1, #168	; 0xa8
   13204:	add	r0, r0, #168	; 0xa8
   13208:	str	r4, [sp, #-8]!
   1320c:	str	lr, [sp, #4]
   13210:	bl	10b9c <strcmp@plt>
   13214:	ldr	r4, [sp]
   13218:	add	sp, sp, #4
   1321c:	rsb	r0, r0, #0
   13220:	pop	{pc}		; (ldr pc, [sp], #4)
   13224:	ldr	r3, [r0, #156]	; 0x9c
   13228:	ldr	r2, [r1, #156]	; 0x9c
   1322c:	cmp	r2, r3
   13230:	ble	131fc <__assert_fail@plt+0x2408>
   13234:	mvn	r0, #0
   13238:	bx	lr
   1323c:	mov	r0, #1
   13240:	bx	lr
   13244:	strd	r4, [sp, #-8]!
   13248:	ldrd	r2, [r0, #112]	; 0x70
   1324c:	ldrd	r4, [r1, #112]	; 0x70
   13250:	cmp	r2, r4
   13254:	sbcs	ip, r3, r5
   13258:	blt	1327c <__assert_fail@plt+0x2488>
   1325c:	cmp	r4, r2
   13260:	sbcs	r3, r5, r3
   13264:	blt	1328c <__assert_fail@plt+0x2498>
   13268:	add	r1, r1, #168	; 0xa8
   1326c:	add	r0, r0, #168	; 0xa8
   13270:	ldrd	r4, [sp]
   13274:	add	sp, sp, #8
   13278:	b	10b9c <strcmp@plt>
   1327c:	mov	r0, #1
   13280:	ldrd	r4, [sp]
   13284:	add	sp, sp, #8
   13288:	bx	lr
   1328c:	mvn	r0, #0
   13290:	b	13280 <__assert_fail@plt+0x248c>
   13294:	strd	r4, [sp, #-16]!
   13298:	ldrd	r2, [r0, #112]	; 0x70
   1329c:	ldrd	r4, [r1, #112]	; 0x70
   132a0:	str	r6, [sp, #8]
   132a4:	str	lr, [sp, #12]
   132a8:	cmp	r2, r4
   132ac:	sbcs	ip, r3, r5
   132b0:	mvnlt	r0, #0
   132b4:	blt	132d4 <__assert_fail@plt+0x24e0>
   132b8:	cmp	r4, r2
   132bc:	sbcs	r3, r5, r3
   132c0:	blt	132e4 <__assert_fail@plt+0x24f0>
   132c4:	add	r1, r1, #168	; 0xa8
   132c8:	add	r0, r0, #168	; 0xa8
   132cc:	bl	10b9c <strcmp@plt>
   132d0:	rsb	r0, r0, #0
   132d4:	ldrd	r4, [sp]
   132d8:	ldr	r6, [sp, #8]
   132dc:	add	sp, sp, #12
   132e0:	pop	{pc}		; (ldr pc, [sp], #4)
   132e4:	mov	r0, #1
   132e8:	b	132d4 <__assert_fail@plt+0x24e0>
   132ec:	and	r3, r0, #61440	; 0xf000
   132f0:	cmp	r3, #32768	; 0x8000
   132f4:	moveq	r2, #45	; 0x2d
   132f8:	beq	13344 <__assert_fail@plt+0x2550>
   132fc:	cmp	r3, #16384	; 0x4000
   13300:	moveq	r2, #100	; 0x64
   13304:	beq	13344 <__assert_fail@plt+0x2550>
   13308:	cmp	r3, #24576	; 0x6000
   1330c:	moveq	r2, #98	; 0x62
   13310:	beq	13344 <__assert_fail@plt+0x2550>
   13314:	cmp	r3, #8192	; 0x2000
   13318:	moveq	r2, #99	; 0x63
   1331c:	beq	13344 <__assert_fail@plt+0x2550>
   13320:	cmp	r3, #40960	; 0xa000
   13324:	moveq	r2, #108	; 0x6c
   13328:	beq	13344 <__assert_fail@plt+0x2550>
   1332c:	cmp	r3, #4096	; 0x1000
   13330:	moveq	r2, #112	; 0x70
   13334:	beq	13344 <__assert_fail@plt+0x2550>
   13338:	cmp	r3, #49152	; 0xc000
   1333c:	moveq	r2, #115	; 0x73
   13340:	movne	r2, #63	; 0x3f
   13344:	tst	r0, #256	; 0x100
   13348:	strb	r2, [r1]
   1334c:	and	r3, r0, #64	; 0x40
   13350:	movne	ip, #114	; 0x72
   13354:	moveq	ip, #45	; 0x2d
   13358:	tst	r0, #128	; 0x80
   1335c:	movne	r2, #119	; 0x77
   13360:	moveq	r2, #45	; 0x2d
   13364:	strb	ip, [r1, #1]
   13368:	tst	r0, #2048	; 0x800
   1336c:	strb	r2, [r1, #2]
   13370:	beq	13410 <__assert_fail@plt+0x261c>
   13374:	cmp	r3, #0
   13378:	movne	r2, #115	; 0x73
   1337c:	moveq	r2, #83	; 0x53
   13380:	tst	r0, #32
   13384:	strb	r2, [r1, #3]
   13388:	and	r3, r0, #8
   1338c:	movne	ip, #114	; 0x72
   13390:	moveq	ip, #45	; 0x2d
   13394:	tst	r0, #16
   13398:	movne	r2, #119	; 0x77
   1339c:	moveq	r2, #45	; 0x2d
   133a0:	strb	ip, [r1, #4]
   133a4:	tst	r0, #1024	; 0x400
   133a8:	strb	r2, [r1, #5]
   133ac:	beq	13420 <__assert_fail@plt+0x262c>
   133b0:	cmp	r3, #0
   133b4:	movne	r2, #115	; 0x73
   133b8:	moveq	r2, #83	; 0x53
   133bc:	tst	r0, #4
   133c0:	strb	r2, [r1, #6]
   133c4:	and	r3, r0, #1
   133c8:	movne	ip, #114	; 0x72
   133cc:	moveq	ip, #45	; 0x2d
   133d0:	tst	r0, #2
   133d4:	movne	r2, #119	; 0x77
   133d8:	moveq	r2, #45	; 0x2d
   133dc:	strb	ip, [r1, #7]
   133e0:	tst	r0, #512	; 0x200
   133e4:	strb	r2, [r1, #8]
   133e8:	beq	13430 <__assert_fail@plt+0x263c>
   133ec:	cmp	r3, #0
   133f0:	movne	r0, #116	; 0x74
   133f4:	moveq	r0, #84	; 0x54
   133f8:	mov	r2, #32
   133fc:	mov	r3, #0
   13400:	strb	r0, [r1, #9]
   13404:	strb	r2, [r1, #10]
   13408:	strb	r3, [r1, #11]
   1340c:	bx	lr
   13410:	cmp	r3, #0
   13414:	movne	r2, #120	; 0x78
   13418:	moveq	r2, #45	; 0x2d
   1341c:	b	13380 <__assert_fail@plt+0x258c>
   13420:	cmp	r3, #0
   13424:	movne	r2, #120	; 0x78
   13428:	moveq	r2, #45	; 0x2d
   1342c:	b	133bc <__assert_fail@plt+0x25c8>
   13430:	cmp	r3, #0
   13434:	movne	r0, #120	; 0x78
   13438:	moveq	r0, #45	; 0x2d
   1343c:	b	133f8 <__assert_fail@plt+0x2604>
   13440:	ldr	r3, [r0, #16]
   13444:	and	r2, r3, #61440	; 0xf000
   13448:	cmp	r2, #32768	; 0x8000
   1344c:	moveq	r0, #45	; 0x2d
   13450:	beq	1349c <__assert_fail@plt+0x26a8>
   13454:	cmp	r2, #16384	; 0x4000
   13458:	moveq	r0, #100	; 0x64
   1345c:	beq	1349c <__assert_fail@plt+0x26a8>
   13460:	cmp	r2, #24576	; 0x6000
   13464:	moveq	r0, #98	; 0x62
   13468:	beq	1349c <__assert_fail@plt+0x26a8>
   1346c:	cmp	r2, #8192	; 0x2000
   13470:	moveq	r0, #99	; 0x63
   13474:	beq	1349c <__assert_fail@plt+0x26a8>
   13478:	cmp	r2, #40960	; 0xa000
   1347c:	moveq	r0, #108	; 0x6c
   13480:	beq	1349c <__assert_fail@plt+0x26a8>
   13484:	cmp	r2, #4096	; 0x1000
   13488:	moveq	r0, #112	; 0x70
   1348c:	beq	1349c <__assert_fail@plt+0x26a8>
   13490:	cmp	r2, #49152	; 0xc000
   13494:	moveq	r0, #115	; 0x73
   13498:	movne	r0, #63	; 0x3f
   1349c:	tst	r3, #256	; 0x100
   134a0:	strb	r0, [r1]
   134a4:	and	r2, r3, #64	; 0x40
   134a8:	movne	ip, #114	; 0x72
   134ac:	moveq	ip, #45	; 0x2d
   134b0:	tst	r3, #128	; 0x80
   134b4:	movne	r0, #119	; 0x77
   134b8:	moveq	r0, #45	; 0x2d
   134bc:	strb	ip, [r1, #1]
   134c0:	tst	r3, #2048	; 0x800
   134c4:	strb	r0, [r1, #2]
   134c8:	beq	13568 <__assert_fail@plt+0x2774>
   134cc:	cmp	r2, #0
   134d0:	movne	r0, #115	; 0x73
   134d4:	moveq	r0, #83	; 0x53
   134d8:	tst	r3, #32
   134dc:	strb	r0, [r1, #3]
   134e0:	and	r2, r3, #8
   134e4:	movne	ip, #114	; 0x72
   134e8:	moveq	ip, #45	; 0x2d
   134ec:	tst	r3, #16
   134f0:	movne	r0, #119	; 0x77
   134f4:	moveq	r0, #45	; 0x2d
   134f8:	strb	ip, [r1, #4]
   134fc:	tst	r3, #1024	; 0x400
   13500:	strb	r0, [r1, #5]
   13504:	beq	13578 <__assert_fail@plt+0x2784>
   13508:	cmp	r2, #0
   1350c:	movne	r0, #115	; 0x73
   13510:	moveq	r0, #83	; 0x53
   13514:	tst	r3, #4
   13518:	strb	r0, [r1, #6]
   1351c:	and	r2, r3, #1
   13520:	movne	ip, #114	; 0x72
   13524:	moveq	ip, #45	; 0x2d
   13528:	tst	r3, #2
   1352c:	movne	r0, #119	; 0x77
   13530:	moveq	r0, #45	; 0x2d
   13534:	strb	ip, [r1, #7]
   13538:	tst	r3, #512	; 0x200
   1353c:	strb	r0, [r1, #8]
   13540:	beq	13588 <__assert_fail@plt+0x2794>
   13544:	cmp	r2, #0
   13548:	movne	r0, #116	; 0x74
   1354c:	moveq	r0, #84	; 0x54
   13550:	mov	r2, #32
   13554:	mov	r3, #0
   13558:	strb	r0, [r1, #9]
   1355c:	strb	r2, [r1, #10]
   13560:	strb	r3, [r1, #11]
   13564:	bx	lr
   13568:	cmp	r2, #0
   1356c:	movne	r0, #120	; 0x78
   13570:	moveq	r0, #45	; 0x2d
   13574:	b	134d8 <__assert_fail@plt+0x26e4>
   13578:	cmp	r2, #0
   1357c:	movne	r0, #120	; 0x78
   13580:	moveq	r0, #45	; 0x2d
   13584:	b	13514 <__assert_fail@plt+0x2720>
   13588:	cmp	r2, #0
   1358c:	movne	r0, #120	; 0x78
   13590:	moveq	r0, #45	; 0x2d
   13594:	b	13550 <__assert_fail@plt+0x275c>
   13598:	strd	r4, [sp, #-12]!
   1359c:	mov	r5, r0
   135a0:	str	lr, [sp, #8]
   135a4:	sub	sp, sp, #12
   135a8:	bl	10cf8 <__errno_location@plt>
   135ac:	mov	r4, r0
   135b0:	mov	r2, #0
   135b4:	ldr	r3, [r4]
   135b8:	mov	r0, r5
   135bc:	str	r2, [r4]
   135c0:	str	r3, [sp]
   135c4:	str	r3, [sp, #4]
   135c8:	bl	10be4 <free@plt>
   135cc:	ldr	r3, [r4]
   135d0:	add	r2, sp, #8
   135d4:	clz	r3, r3
   135d8:	lsr	r3, r3, #5
   135dc:	add	r3, r2, r3, lsl #2
   135e0:	ldr	r3, [r3, #-8]
   135e4:	str	r3, [r4]
   135e8:	add	sp, sp, #12
   135ec:	ldrd	r4, [sp]
   135f0:	add	sp, sp, #8
   135f4:	pop	{pc}		; (ldr pc, [sp], #4)
   135f8:	strd	r4, [sp, #-8]!
   135fc:	ldrd	r2, [r1, #8]
   13600:	ldrd	r4, [r0, #8]
   13604:	cmp	r5, r3
   13608:	cmpeq	r4, r2
   1360c:	movne	r0, #0
   13610:	bne	1362c <__assert_fail@plt+0x2838>
   13614:	ldrd	r4, [r0]
   13618:	ldrd	r2, [r1]
   1361c:	cmp	r5, r3
   13620:	cmpeq	r4, r2
   13624:	moveq	r0, #1
   13628:	movne	r0, #0
   1362c:	ldrd	r4, [sp]
   13630:	add	sp, sp, #8
   13634:	bx	lr
   13638:	mov	r2, r1
   1363c:	mov	r3, #0
   13640:	str	r4, [sp, #-8]!
   13644:	ldrd	r0, [r0, #8]
   13648:	str	lr, [sp, #4]
   1364c:	bl	18f0c <__assert_fail@plt+0x8118>
   13650:	ldr	r4, [sp]
   13654:	add	sp, sp, #4
   13658:	mov	r0, r2
   1365c:	pop	{pc}		; (ldr pc, [sp], #4)
   13660:	mov	r2, r1
   13664:	mov	r3, #0
   13668:	str	r4, [sp, #-8]!
   1366c:	ldrd	r0, [r0]
   13670:	str	lr, [sp, #4]
   13674:	bl	18f0c <__assert_fail@plt+0x8118>
   13678:	ldr	r4, [sp]
   1367c:	add	sp, sp, #4
   13680:	mov	r0, r2
   13684:	pop	{pc}		; (ldr pc, [sp], #4)
   13688:	strd	r4, [sp, #-8]!
   1368c:	ldrd	r2, [r1]
   13690:	ldrd	r4, [r0]
   13694:	cmp	r5, r3
   13698:	cmpeq	r4, r2
   1369c:	ldrd	r4, [sp]
   136a0:	add	sp, sp, #8
   136a4:	moveq	r0, #1
   136a8:	movne	r0, #0
   136ac:	bx	lr
   136b0:	ldr	r2, [r0]
   136b4:	ldr	r3, [r1]
   136b8:	ldrd	r0, [r2, #160]	; 0xa0
   136bc:	ldrd	r2, [r3, #160]	; 0xa0
   136c0:	cmp	r1, r3
   136c4:	cmpeq	r0, r2
   136c8:	movhi	r0, #1
   136cc:	movls	r0, #0
   136d0:	movcc	r3, #1
   136d4:	movcs	r3, #0
   136d8:	sub	r0, r0, r3
   136dc:	bx	lr
   136e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   136e4:	mov	r5, r2
   136e8:	mov	r4, r1
   136ec:	ldr	r2, [r0, #40]	; 0x28
   136f0:	strd	r6, [sp, #8]
   136f4:	mov	r6, r0
   136f8:	str	r8, [sp, #16]
   136fc:	str	lr, [sp, #20]
   13700:	ldr	r0, [r0, #8]
   13704:	cmp	r2, r5
   13708:	ldr	r7, [r6, #44]	; 0x2c
   1370c:	bcs	13734 <__assert_fail@plt+0x2940>
   13710:	add	r1, r5, #40	; 0x28
   13714:	cmn	r1, #-1073741823	; 0xc0000001
   13718:	str	r1, [r6, #40]	; 0x28
   1371c:	bhi	137b4 <__assert_fail@plt+0x29c0>
   13720:	lsl	r1, r1, #2
   13724:	bl	18a8c <__assert_fail@plt+0x7c98>
   13728:	cmp	r0, #0
   1372c:	strne	r0, [r6, #8]
   13730:	beq	137b0 <__assert_fail@plt+0x29bc>
   13734:	cmp	r4, #0
   13738:	movne	r2, r0
   1373c:	beq	13750 <__assert_fail@plt+0x295c>
   13740:	str	r4, [r2], #4
   13744:	ldr	r4, [r4, #8]
   13748:	cmp	r4, #0
   1374c:	bne	13740 <__assert_fail@plt+0x294c>
   13750:	mov	r3, r7
   13754:	mov	r2, #4
   13758:	mov	r1, r5
   1375c:	bl	10d88 <qsort@plt>
   13760:	ldr	lr, [r6, #8]
   13764:	subs	r3, r5, #1
   13768:	ldr	r0, [lr]
   1376c:	moveq	r2, r0
   13770:	beq	13794 <__assert_fail@plt+0x29a0>
   13774:	mov	r2, lr
   13778:	ldr	r1, [r2]
   1377c:	subs	r3, r3, #1
   13780:	ldr	ip, [r2, #4]!
   13784:	str	ip, [r1, #8]
   13788:	bne	13778 <__assert_fail@plt+0x2984>
   1378c:	add	r5, lr, r5, lsl #2
   13790:	ldr	r2, [r5, #-4]
   13794:	mov	r3, #0
   13798:	str	r3, [r2, #8]
   1379c:	ldrd	r4, [sp]
   137a0:	ldrd	r6, [sp, #8]
   137a4:	ldr	r8, [sp, #16]
   137a8:	add	sp, sp, #20
   137ac:	pop	{pc}		; (ldr pc, [sp], #4)
   137b0:	ldr	r0, [r6, #8]
   137b4:	bl	13598 <__assert_fail@plt+0x27a4>
   137b8:	mov	r3, #0
   137bc:	mov	r0, r4
   137c0:	str	r3, [r6, #8]
   137c4:	str	r3, [r6, #40]	; 0x28
   137c8:	b	1379c <__assert_fail@plt+0x29a8>
   137cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   137d0:	ldr	r5, [r0, #44]	; 0x2c
   137d4:	ldr	r3, [r5, #48]	; 0x30
   137d8:	strd	r6, [sp, #8]
   137dc:	str	lr, [sp, #16]
   137e0:	sub	sp, sp, #100	; 0x64
   137e4:	tst	r3, #512	; 0x200
   137e8:	beq	13878 <__assert_fail@plt+0x2a84>
   137ec:	ldr	r4, [r5, #52]	; 0x34
   137f0:	mov	r7, r1
   137f4:	mov	r6, r0
   137f8:	cmp	r4, #0
   137fc:	beq	13824 <__assert_fail@plt+0x2a30>
   13800:	ldrd	r2, [r6, #64]	; 0x40
   13804:	add	r1, sp, #8
   13808:	mov	r0, r4
   1380c:	strd	r2, [sp, #8]
   13810:	bl	17618 <__assert_fail@plt+0x6824>
   13814:	cmp	r0, #0
   13818:	beq	1385c <__assert_fail@plt+0x2a68>
   1381c:	ldr	r0, [r0, #8]
   13820:	b	1387c <__assert_fail@plt+0x2a88>
   13824:	movw	r0, #13720	; 0x3598
   13828:	movt	r0, #1
   1382c:	mov	r1, r4
   13830:	movw	r3, #13960	; 0x3688
   13834:	movt	r3, #1
   13838:	movw	r2, #13920	; 0x3660
   1383c:	movt	r2, #1
   13840:	str	r0, [sp]
   13844:	mov	r0, #13
   13848:	bl	1799c <__assert_fail@plt+0x6ba8>
   1384c:	cmp	r0, #0
   13850:	mov	r4, r0
   13854:	str	r0, [r5, #52]	; 0x34
   13858:	bne	13800 <__assert_fail@plt+0x2a0c>
   1385c:	cmp	r7, #0
   13860:	blt	13878 <__assert_fail@plt+0x2a84>
   13864:	mov	r0, r7
   13868:	add	r1, sp, #8
   1386c:	bl	10b78 <fstatfs64@plt>
   13870:	cmp	r0, #0
   13874:	beq	13890 <__assert_fail@plt+0x2a9c>
   13878:	mov	r0, #0
   1387c:	add	sp, sp, #100	; 0x64
   13880:	ldrd	r4, [sp]
   13884:	ldrd	r6, [sp, #8]
   13888:	add	sp, sp, #16
   1388c:	pop	{pc}		; (ldr pc, [sp], #4)
   13890:	cmp	r4, #0
   13894:	beq	138d4 <__assert_fail@plt+0x2ae0>
   13898:	mov	r0, #16
   1389c:	bl	18a50 <__assert_fail@plt+0x7c5c>
   138a0:	subs	r5, r0, #0
   138a4:	beq	138d4 <__assert_fail@plt+0x2ae0>
   138a8:	ldr	ip, [sp, #8]
   138ac:	mov	r0, r4
   138b0:	mov	r1, r5
   138b4:	ldrd	r2, [r6, #64]	; 0x40
   138b8:	strd	r2, [r5]
   138bc:	str	ip, [r5, #8]
   138c0:	bl	18204 <__assert_fail@plt+0x7410>
   138c4:	cmp	r0, #0
   138c8:	beq	138dc <__assert_fail@plt+0x2ae8>
   138cc:	cmp	r5, r0
   138d0:	bne	138e8 <__assert_fail@plt+0x2af4>
   138d4:	ldr	r0, [sp, #8]
   138d8:	b	1387c <__assert_fail@plt+0x2a88>
   138dc:	mov	r0, r5
   138e0:	bl	13598 <__assert_fail@plt+0x27a4>
   138e4:	b	138d4 <__assert_fail@plt+0x2ae0>
   138e8:	bl	10db8 <abort@plt>
   138ec:	ldr	ip, [r2, #48]	; 0x30
   138f0:	strd	r4, [sp, #-16]!
   138f4:	mov	r4, r2
   138f8:	add	r5, r2, #64	; 0x40
   138fc:	ldr	r2, [r2, #24]
   13900:	str	r6, [sp, #8]
   13904:	str	lr, [sp, #12]
   13908:	sub	sp, sp, #8
   1390c:	cmp	ip, #0
   13910:	bne	13988 <__assert_fail@plt+0x2b94>
   13914:	tst	r1, #1
   13918:	beq	13988 <__assert_fail@plt+0x2b94>
   1391c:	mov	r1, r2
   13920:	mov	r0, #3
   13924:	mov	r2, r5
   13928:	bl	10d94 <__xstat64@plt>
   1392c:	cmp	r0, #0
   13930:	beq	139b4 <__assert_fail@plt+0x2bc0>
   13934:	bl	10cf8 <__errno_location@plt>
   13938:	ldr	r3, [r0]
   1393c:	mov	r6, r0
   13940:	cmp	r3, #2
   13944:	bne	1396c <__assert_fail@plt+0x2b78>
   13948:	mov	r2, r5
   1394c:	mov	r0, #3
   13950:	ldr	r1, [r4, #24]
   13954:	bl	10dd0 <__lxstat64@plt>
   13958:	subs	r3, r0, #0
   1395c:	moveq	r0, #13
   13960:	streq	r3, [r6]
   13964:	beq	139d8 <__assert_fail@plt+0x2be4>
   13968:	ldr	r3, [r6]
   1396c:	mov	r0, r5
   13970:	mov	r2, #104	; 0x68
   13974:	str	r3, [r4, #32]
   13978:	mov	r1, #0
   1397c:	bl	10d10 <memset@plt>
   13980:	mov	r0, #10
   13984:	b	139d8 <__assert_fail@plt+0x2be4>
   13988:	ubfx	ip, r1, #1, #1
   1398c:	orrs	r3, r3, ip
   13990:	bne	1391c <__assert_fail@plt+0x2b28>
   13994:	mov	ip, #256	; 0x100
   13998:	mov	r1, r0
   1399c:	mov	r3, r5
   139a0:	mov	r0, #3
   139a4:	str	ip, [sp]
   139a8:	bl	10c2c <__fxstatat64@plt>
   139ac:	cmp	r0, #0
   139b0:	bne	13a34 <__assert_fail@plt+0x2c40>
   139b4:	ldr	r3, [r4, #80]	; 0x50
   139b8:	and	r3, r3, #61440	; 0xf000
   139bc:	cmp	r3, #16384	; 0x4000
   139c0:	beq	139ec <__assert_fail@plt+0x2bf8>
   139c4:	cmp	r3, #40960	; 0xa000
   139c8:	beq	13a40 <__assert_fail@plt+0x2c4c>
   139cc:	cmp	r3, #32768	; 0x8000
   139d0:	movne	r0, #3
   139d4:	moveq	r0, #8
   139d8:	add	sp, sp, #8
   139dc:	ldrd	r4, [sp]
   139e0:	ldr	r6, [sp, #8]
   139e4:	add	sp, sp, #12
   139e8:	pop	{pc}		; (ldr pc, [sp], #4)
   139ec:	ldrb	r3, [r4, #168]	; 0xa8
   139f0:	cmp	r3, #46	; 0x2e
   139f4:	bne	13a18 <__assert_fail@plt+0x2c24>
   139f8:	ldrb	r3, [r4, #169]	; 0xa9
   139fc:	cmp	r3, #0
   13a00:	beq	13a20 <__assert_fail@plt+0x2c2c>
   13a04:	ldr	r3, [r4, #168]	; 0xa8
   13a08:	bic	r3, r3, #-16777216	; 0xff000000
   13a0c:	bic	r3, r3, #255	; 0xff
   13a10:	cmp	r3, #11776	; 0x2e00
   13a14:	beq	13a20 <__assert_fail@plt+0x2c2c>
   13a18:	mov	r0, #1
   13a1c:	b	139d8 <__assert_fail@plt+0x2be4>
   13a20:	ldr	r3, [r4, #48]	; 0x30
   13a24:	cmp	r3, #0
   13a28:	moveq	r0, #1
   13a2c:	movne	r0, #5
   13a30:	b	139d8 <__assert_fail@plt+0x2be4>
   13a34:	bl	10cf8 <__errno_location@plt>
   13a38:	ldr	r3, [r0]
   13a3c:	b	1396c <__assert_fail@plt+0x2b78>
   13a40:	mov	r0, #12
   13a44:	b	139d8 <__assert_fail@plt+0x2be4>
   13a48:	movw	r3, #258	; 0x102
   13a4c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13a50:	tst	r0, r3
   13a54:	strd	r6, [sp, #8]
   13a58:	strd	r8, [sp, #16]
   13a5c:	mov	r8, r2
   13a60:	str	sl, [sp, #24]
   13a64:	mov	sl, r1
   13a68:	str	lr, [sp, #28]
   13a6c:	beq	13af0 <__assert_fail@plt+0x2cfc>
   13a70:	mov	r0, #24
   13a74:	bl	18a50 <__assert_fail@plt+0x7c5c>
   13a78:	subs	r9, r0, #0
   13a7c:	beq	13b14 <__assert_fail@plt+0x2d20>
   13a80:	ldrd	r6, [r8, #64]	; 0x40
   13a84:	mov	r1, r9
   13a88:	ldrd	r4, [r8, #160]	; 0xa0
   13a8c:	ldr	r0, [sl]
   13a90:	strd	r6, [r9]
   13a94:	str	r8, [r9, #16]
   13a98:	strd	r4, [r9, #8]
   13a9c:	bl	18204 <__assert_fail@plt+0x7410>
   13aa0:	cmp	r9, r0
   13aa4:	mov	r4, r0
   13aa8:	beq	13ad4 <__assert_fail@plt+0x2ce0>
   13aac:	mov	r0, r9
   13ab0:	bl	13598 <__assert_fail@plt+0x27a4>
   13ab4:	cmp	r4, #0
   13ab8:	beq	13b14 <__assert_fail@plt+0x2d20>
   13abc:	ldr	r3, [r4, #16]
   13ac0:	mov	r2, #2
   13ac4:	mov	r0, #1
   13ac8:	str	r3, [r8]
   13acc:	strh	r2, [r8, #56]	; 0x38
   13ad0:	b	13ad8 <__assert_fail@plt+0x2ce4>
   13ad4:	mov	r0, #1
   13ad8:	ldrd	r4, [sp]
   13adc:	ldrd	r6, [sp, #8]
   13ae0:	ldrd	r8, [sp, #16]
   13ae4:	ldr	sl, [sp, #24]
   13ae8:	add	sp, sp, #28
   13aec:	pop	{pc}		; (ldr pc, [sp], #4)
   13af0:	add	r1, r2, #64	; 0x40
   13af4:	ldr	r0, [sl]
   13af8:	bl	18b0c <__assert_fail@plt+0x7d18>
   13afc:	cmp	r0, #0
   13b00:	beq	13ad4 <__assert_fail@plt+0x2ce0>
   13b04:	mov	r3, #2
   13b08:	str	r8, [r8]
   13b0c:	strh	r3, [r8, #56]	; 0x38
   13b10:	b	13ad8 <__assert_fail@plt+0x2ce4>
   13b14:	mov	r0, #0
   13b18:	b	13ad8 <__assert_fail@plt+0x2ce4>
   13b1c:	movw	r3, #258	; 0x102
   13b20:	mov	ip, r1
   13b24:	strd	r4, [sp, #-12]!
   13b28:	tst	r0, r3
   13b2c:	str	lr, [sp, #8]
   13b30:	sub	sp, sp, #28
   13b34:	bne	13b84 <__assert_fail@plt+0x2d90>
   13b38:	ldr	r3, [r2, #4]
   13b3c:	cmp	r3, #0
   13b40:	beq	13b74 <__assert_fail@plt+0x2d80>
   13b44:	ldr	r1, [r3, #48]	; 0x30
   13b48:	cmp	r1, #0
   13b4c:	blt	13b74 <__assert_fail@plt+0x2d80>
   13b50:	ldr	ip, [ip]
   13b54:	ldrd	r0, [ip, #16]
   13b58:	orrs	r1, r0, r1
   13b5c:	beq	13be4 <__assert_fail@plt+0x2df0>
   13b60:	ldrd	r4, [ip]
   13b64:	ldrd	r0, [r2, #160]	; 0xa0
   13b68:	cmp	r5, r1
   13b6c:	cmpeq	r4, r0
   13b70:	beq	13bbc <__assert_fail@plt+0x2dc8>
   13b74:	add	sp, sp, #28
   13b78:	ldrd	r4, [sp]
   13b7c:	add	sp, sp, #8
   13b80:	pop	{pc}		; (ldr pc, [sp], #4)
   13b84:	ldrd	r4, [r2, #64]	; 0x40
   13b88:	mov	r1, sp
   13b8c:	ldrd	r2, [r2, #160]	; 0xa0
   13b90:	ldr	r0, [ip]
   13b94:	strd	r4, [sp]
   13b98:	strd	r2, [sp, #8]
   13b9c:	bl	18428 <__assert_fail@plt+0x7634>
   13ba0:	cmp	r0, #0
   13ba4:	beq	13be4 <__assert_fail@plt+0x2df0>
   13ba8:	bl	13598 <__assert_fail@plt+0x27a4>
   13bac:	add	sp, sp, #28
   13bb0:	ldrd	r4, [sp]
   13bb4:	add	sp, sp, #8
   13bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bbc:	ldrd	r0, [ip, #8]
   13bc0:	ldrd	r4, [r2, #64]	; 0x40
   13bc4:	cmp	r1, r5
   13bc8:	cmpeq	r0, r4
   13bcc:	bne	13b74 <__assert_fail@plt+0x2d80>
   13bd0:	ldrd	r0, [r3, #64]	; 0x40
   13bd4:	ldrd	r2, [r3, #160]	; 0xa0
   13bd8:	strd	r2, [ip]
   13bdc:	strd	r0, [ip, #8]
   13be0:	b	13b74 <__assert_fail@plt+0x2d80>
   13be4:	bl	10db8 <abort@plt>
   13be8:	ldr	r3, [r0, #48]	; 0x30
   13bec:	strd	r4, [sp, #-16]!
   13bf0:	add	r5, r0, #60	; 0x3c
   13bf4:	str	r6, [sp, #8]
   13bf8:	str	lr, [sp, #12]
   13bfc:	ands	r6, r3, #4
   13c00:	movne	r6, #0
   13c04:	bne	13c40 <__assert_fail@plt+0x2e4c>
   13c08:	tst	r3, #512	; 0x200
   13c0c:	mov	r4, r0
   13c10:	beq	13c70 <__assert_fail@plt+0x2e7c>
   13c14:	mov	r0, r5
   13c18:	ldr	r1, [r4, #32]
   13c1c:	bl	1879c <__assert_fail@plt+0x79a8>
   13c20:	cmp	r0, #0
   13c24:	bge	13c84 <__assert_fail@plt+0x2e90>
   13c28:	mvn	r3, #99	; 0x63
   13c2c:	str	r3, [r4, #32]
   13c30:	b	13c40 <__assert_fail@plt+0x2e4c>
   13c34:	bl	187e4 <__assert_fail@plt+0x79f0>
   13c38:	cmp	r0, #0
   13c3c:	bge	13c68 <__assert_fail@plt+0x2e74>
   13c40:	mov	r0, r5
   13c44:	bl	18794 <__assert_fail@plt+0x79a0>
   13c48:	cmp	r0, #0
   13c4c:	mov	r0, r5
   13c50:	beq	13c34 <__assert_fail@plt+0x2e40>
   13c54:	mov	r0, r6
   13c58:	ldrd	r4, [sp]
   13c5c:	ldr	r6, [sp, #8]
   13c60:	add	sp, sp, #12
   13c64:	pop	{pc}		; (ldr pc, [sp], #4)
   13c68:	bl	10dc4 <close@plt>
   13c6c:	b	13c40 <__assert_fail@plt+0x2e4c>
   13c70:	ldr	r0, [r0, #28]
   13c74:	bl	10d7c <fchdir@plt>
   13c78:	adds	r6, r0, #0
   13c7c:	movne	r6, #1
   13c80:	b	13c40 <__assert_fail@plt+0x2e4c>
   13c84:	bl	10dc4 <close@plt>
   13c88:	mvn	r3, #99	; 0x63
   13c8c:	str	r3, [r4, #32]
   13c90:	b	13c40 <__assert_fail@plt+0x2e4c>
   13c94:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13c98:	mov	r5, r0
   13c9c:	mov	r4, r2
   13ca0:	strd	r6, [sp, #8]
   13ca4:	strd	r8, [sp, #16]
   13ca8:	mov	r8, r1
   13cac:	ldr	r9, [r0, #48]	; 0x30
   13cb0:	str	sl, [sp, #24]
   13cb4:	subs	sl, r3, #0
   13cb8:	str	lr, [sp, #28]
   13cbc:	sub	sp, sp, #104	; 0x68
   13cc0:	and	r6, r9, #4
   13cc4:	beq	13dc0 <__assert_fail@plt+0x2fcc>
   13cc8:	movw	r1, #37488	; 0x9270
   13ccc:	movt	r1, #1
   13cd0:	mov	r0, sl
   13cd4:	bl	10b9c <strcmp@plt>
   13cd8:	cmp	r0, #0
   13cdc:	bne	13dc0 <__assert_fail@plt+0x2fcc>
   13ce0:	cmp	r6, #0
   13ce4:	bne	13e00 <__assert_fail@plt+0x300c>
   13ce8:	cmp	r4, #0
   13cec:	bge	13f3c <__assert_fail@plt+0x3148>
   13cf0:	tst	r9, #512	; 0x200
   13cf4:	beq	13e44 <__assert_fail@plt+0x3050>
   13cf8:	add	r6, r5, #60	; 0x3c
   13cfc:	mov	r0, r6
   13d00:	bl	18794 <__assert_fail@plt+0x79a0>
   13d04:	cmp	r0, #0
   13d08:	beq	13ec4 <__assert_fail@plt+0x30d0>
   13d0c:	lsl	r2, r9, #11
   13d10:	mov	r6, #1
   13d14:	and	r2, r2, #32768	; 0x8000
   13d18:	orr	r2, r2, #540672	; 0x84000
   13d1c:	orr	r2, r2, #2304	; 0x900
   13d20:	mov	r1, sl
   13d24:	ldr	r0, [r5, #32]
   13d28:	bl	188dc <__assert_fail@plt+0x7ae8>
   13d2c:	mov	r7, r0
   13d30:	cmp	r7, #0
   13d34:	blt	13f34 <__assert_fail@plt+0x3140>
   13d38:	ldr	r9, [r5, #48]	; 0x30
   13d3c:	tst	r9, #2
   13d40:	beq	13ddc <__assert_fail@plt+0x2fe8>
   13d44:	mov	r2, sp
   13d48:	mov	r1, r7
   13d4c:	mov	r0, #3
   13d50:	bl	10c38 <__fxstat64@plt>
   13d54:	cmp	r0, #0
   13d58:	bne	13e3c <__assert_fail@plt+0x3048>
   13d5c:	ldrd	r2, [sp]
   13d60:	ldrd	r0, [r8, #64]	; 0x40
   13d64:	cmp	r1, r3
   13d68:	cmpeq	r0, r2
   13d6c:	bne	13e30 <__assert_fail@plt+0x303c>
   13d70:	ldrd	r2, [sp, #96]	; 0x60
   13d74:	ldrd	r0, [r8, #160]	; 0xa0
   13d78:	cmp	r1, r3
   13d7c:	cmpeq	r0, r2
   13d80:	bne	13e30 <__assert_fail@plt+0x303c>
   13d84:	ldr	r9, [r5, #48]	; 0x30
   13d88:	tst	r9, #512	; 0x200
   13d8c:	bne	13e6c <__assert_fail@plt+0x3078>
   13d90:	mov	r0, r7
   13d94:	bl	10d7c <fchdir@plt>
   13d98:	mov	r9, r0
   13d9c:	cmp	r4, #0
   13da0:	bge	13e10 <__assert_fail@plt+0x301c>
   13da4:	bl	10cf8 <__errno_location@plt>
   13da8:	mov	r4, r0
   13dac:	mov	r0, r7
   13db0:	ldr	r5, [r4]
   13db4:	bl	10dc4 <close@plt>
   13db8:	str	r5, [r4]
   13dbc:	b	13e10 <__assert_fail@plt+0x301c>
   13dc0:	cmp	r6, #0
   13dc4:	bne	13e00 <__assert_fail@plt+0x300c>
   13dc8:	cmp	r4, #0
   13dcc:	movge	r7, r4
   13dd0:	blt	13ef4 <__assert_fail@plt+0x3100>
   13dd4:	tst	r9, #2
   13dd8:	bne	13d44 <__assert_fail@plt+0x2f50>
   13ddc:	cmp	sl, #0
   13de0:	beq	13d88 <__assert_fail@plt+0x2f94>
   13de4:	mov	r0, sl
   13de8:	movw	r1, #37488	; 0x9270
   13dec:	movt	r1, #1
   13df0:	bl	10b9c <strcmp@plt>
   13df4:	cmp	r0, #0
   13df8:	bne	13d88 <__assert_fail@plt+0x2f94>
   13dfc:	b	13d44 <__assert_fail@plt+0x2f50>
   13e00:	mvn	r3, r4
   13e04:	lsr	r3, r3, #31
   13e08:	ands	r9, r3, r9, lsr #9
   13e0c:	bne	13eb4 <__assert_fail@plt+0x30c0>
   13e10:	mov	r0, r9
   13e14:	add	sp, sp, #104	; 0x68
   13e18:	ldrd	r4, [sp]
   13e1c:	ldrd	r6, [sp, #8]
   13e20:	ldrd	r8, [sp, #16]
   13e24:	ldr	sl, [sp, #24]
   13e28:	add	sp, sp, #28
   13e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e30:	bl	10cf8 <__errno_location@plt>
   13e34:	mov	r3, #2
   13e38:	str	r3, [r0]
   13e3c:	mvn	r9, #0
   13e40:	b	13d9c <__assert_fail@plt+0x2fa8>
   13e44:	lsl	r2, r9, #11
   13e48:	mov	r6, #1
   13e4c:	and	r2, r2, #32768	; 0x8000
   13e50:	orr	r2, r2, #540672	; 0x84000
   13e54:	orr	r2, r2, #2304	; 0x900
   13e58:	mov	r1, r2
   13e5c:	mov	r0, sl
   13e60:	bl	18dec <__assert_fail@plt+0x7ff8>
   13e64:	mov	r7, r0
   13e68:	b	13d30 <__assert_fail@plt+0x2f3c>
   13e6c:	ldr	r1, [r5, #32]
   13e70:	sub	r3, r1, r7
   13e74:	cmn	r1, #100	; 0x64
   13e78:	clz	r3, r3
   13e7c:	lsr	r3, r3, #5
   13e80:	moveq	r3, #0
   13e84:	cmp	r3, #0
   13e88:	bne	13f50 <__assert_fail@plt+0x315c>
   13e8c:	cmp	r6, #0
   13e90:	beq	13f14 <__assert_fail@plt+0x3120>
   13e94:	mvn	r3, r1
   13e98:	eor	r9, r9, #4
   13e9c:	lsr	r3, r3, #31
   13ea0:	ands	r3, r3, r9, lsr #2
   13ea4:	bne	13f2c <__assert_fail@plt+0x3138>
   13ea8:	mov	r9, #0
   13eac:	str	r7, [r5, #32]
   13eb0:	b	13e10 <__assert_fail@plt+0x301c>
   13eb4:	mov	r0, r4
   13eb8:	mov	r9, #0
   13ebc:	bl	10dc4 <close@plt>
   13ec0:	b	13e10 <__assert_fail@plt+0x301c>
   13ec4:	mov	r0, r6
   13ec8:	bl	187e4 <__assert_fail@plt+0x79f0>
   13ecc:	ldr	r9, [r5, #48]	; 0x30
   13ed0:	subs	r7, r0, #0
   13ed4:	movlt	r6, #1
   13ed8:	andlt	r3, r9, #512	; 0x200
   13edc:	blt	13ef8 <__assert_fail@plt+0x3104>
   13ee0:	tst	r9, #2
   13ee4:	mov	r4, r7
   13ee8:	mov	r6, #1
   13eec:	beq	13d88 <__assert_fail@plt+0x2f94>
   13ef0:	b	13d44 <__assert_fail@plt+0x2f50>
   13ef4:	and	r3, r9, #512	; 0x200
   13ef8:	lsl	r2, r9, #11
   13efc:	cmp	r3, #0
   13f00:	and	r2, r2, #32768	; 0x8000
   13f04:	orr	r2, r2, #540672	; 0x84000
   13f08:	orr	r2, r2, #2304	; 0x900
   13f0c:	bne	13d20 <__assert_fail@plt+0x2f2c>
   13f10:	b	13e58 <__assert_fail@plt+0x3064>
   13f14:	add	r0, r5, #60	; 0x3c
   13f18:	bl	1879c <__assert_fail@plt+0x79a8>
   13f1c:	cmp	r0, #0
   13f20:	blt	13ea8 <__assert_fail@plt+0x30b4>
   13f24:	bl	10dc4 <close@plt>
   13f28:	b	13ea8 <__assert_fail@plt+0x30b4>
   13f2c:	mov	r0, r1
   13f30:	b	13f24 <__assert_fail@plt+0x3130>
   13f34:	mvn	r9, #0
   13f38:	b	13e10 <__assert_fail@plt+0x301c>
   13f3c:	tst	r9, #2
   13f40:	mov	r7, r4
   13f44:	mov	r6, #1
   13f48:	beq	13de4 <__assert_fail@plt+0x2ff0>
   13f4c:	b	13d44 <__assert_fail@plt+0x2f50>
   13f50:	bl	10db8 <abort@plt>
   13f54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f58:	strd	r6, [sp, #8]
   13f5c:	mov	r6, r0
   13f60:	strd	sl, [sp, #24]
   13f64:	ldr	fp, [r0]
   13f68:	strd	r8, [sp, #16]
   13f6c:	str	lr, [sp, #32]
   13f70:	sub	sp, sp, #76	; 0x4c
   13f74:	str	r1, [sp, #40]	; 0x28
   13f78:	ldr	r0, [fp, #12]
   13f7c:	cmp	r0, #0
   13f80:	str	r0, [sp, #48]	; 0x30
   13f84:	beq	143f4 <__assert_fail@plt+0x3600>
   13f88:	bl	10d64 <dirfd@plt>
   13f8c:	cmp	r0, #0
   13f90:	str	r0, [sp, #68]	; 0x44
   13f94:	blt	14968 <__assert_fail@plt+0x3b74>
   13f98:	ldr	r3, [r6, #44]	; 0x2c
   13f9c:	cmp	r3, #0
   13fa0:	beq	14814 <__assert_fail@plt+0x3a20>
   13fa4:	ldr	r3, [r6, #48]	; 0x30
   13fa8:	mvn	r2, #0
   13fac:	str	r2, [sp, #28]
   13fb0:	mov	r2, #1
   13fb4:	str	r2, [sp, #60]	; 0x3c
   13fb8:	ldr	r1, [fp, #28]
   13fbc:	ldr	r0, [fp, #40]	; 0x28
   13fc0:	sub	r2, r0, #1
   13fc4:	str	r0, [sp, #4]
   13fc8:	ldrb	r1, [r1, r2]
   13fcc:	cmp	r1, #47	; 0x2f
   13fd0:	beq	13fe0 <__assert_fail@plt+0x31ec>
   13fd4:	add	r1, r0, #1
   13fd8:	mov	r2, r0
   13fdc:	str	r1, [sp, #4]
   13fe0:	ands	r3, r3, #4
   13fe4:	streq	r3, [sp, #32]
   13fe8:	beq	14004 <__assert_fail@plt+0x3210>
   13fec:	ldr	r3, [r6, #24]
   13ff0:	mov	r0, #47	; 0x2f
   13ff4:	add	r1, r3, r2
   13ff8:	strb	r0, [r3, r2]
   13ffc:	add	r3, r1, #1
   14000:	str	r3, [sp, #32]
   14004:	movw	r3, #6548	; 0x1994
   14008:	movt	r3, #258	; 0x102
   1400c:	ldr	r2, [r6, #36]	; 0x24
   14010:	movw	r0, #19778	; 0x4d42
   14014:	movt	r0, #65363	; 0xff53
   14018:	str	fp, [sp, #16]
   1401c:	str	r3, [sp, #52]	; 0x34
   14020:	mov	r1, #0
   14024:	ldr	r3, [fp, #48]	; 0x30
   14028:	mov	r9, r1
   1402c:	mov	fp, r1
   14030:	str	r0, [sp, #56]	; 0x38
   14034:	ldr	r0, [sp, #4]
   14038:	str	r1, [sp, #12]
   1403c:	str	r1, [sp, #36]	; 0x24
   14040:	add	r3, r3, #1
   14044:	sub	r2, r2, r0
   14048:	str	r1, [sp, #44]	; 0x2c
   1404c:	str	r2, [sp, #20]
   14050:	str	r3, [sp, #24]
   14054:	b	1406c <__assert_fail@plt+0x3278>
   14058:	ldr	r3, [sp, #28]
   1405c:	add	r9, r9, #1
   14060:	cmp	r9, r3
   14064:	bcs	14550 <__assert_fail@plt+0x375c>
   14068:	mov	fp, r4
   1406c:	ldr	r3, [sp, #16]
   14070:	ldr	r4, [r3, #12]
   14074:	cmp	r4, #0
   14078:	beq	14690 <__assert_fail@plt+0x389c>
   1407c:	bl	10cf8 <__errno_location@plt>
   14080:	mov	sl, r0
   14084:	mov	r3, #0
   14088:	mov	r0, r4
   1408c:	str	r3, [sl]
   14090:	bl	10d40 <readdir64@plt>
   14094:	subs	r7, r0, #0
   14098:	beq	14764 <__assert_fail@plt+0x3970>
   1409c:	ldr	r3, [r6, #48]	; 0x30
   140a0:	tst	r3, #32
   140a4:	bne	140b4 <__assert_fail@plt+0x32c0>
   140a8:	ldrb	r3, [r7, #19]
   140ac:	cmp	r3, #46	; 0x2e
   140b0:	beq	142b4 <__assert_fail@plt+0x34c0>
   140b4:	add	r1, r7, #19
   140b8:	mov	r0, r1
   140bc:	str	r1, [sp, #8]
   140c0:	bl	10cc8 <strlen@plt>
   140c4:	mov	r5, r0
   140c8:	add	r0, r0, #176	; 0xb0
   140cc:	bic	r0, r0, #7
   140d0:	bl	18a50 <__assert_fail@plt+0x7c5c>
   140d4:	subs	r4, r0, #0
   140d8:	beq	142e8 <__assert_fail@plt+0x34f4>
   140dc:	add	r8, r4, #168	; 0xa8
   140e0:	mov	r2, r5
   140e4:	ldr	r1, [sp, #8]
   140e8:	mov	r0, r8
   140ec:	bl	10bf0 <memcpy@plt>
   140f0:	ldr	r3, [sp, #20]
   140f4:	mov	r1, #0
   140f8:	add	r0, r4, r5
   140fc:	mov	ip, #196608	; 0x30000
   14100:	ldr	r2, [r6, #24]
   14104:	strb	r1, [r0, #168]	; 0xa8
   14108:	str	r1, [r4, #12]
   1410c:	cmp	r3, r5
   14110:	str	r1, [r4, #16]
   14114:	str	r1, [r4, #20]
   14118:	str	r2, [r4, #28]
   1411c:	str	r1, [r4, #32]
   14120:	str	r6, [r4, #44]	; 0x2c
   14124:	str	r5, [r4, #52]	; 0x34
   14128:	str	ip, [r4, #58]	; 0x3a
   1412c:	bls	141f0 <__assert_fail@plt+0x33fc>
   14130:	ldr	r3, [sp, #4]
   14134:	adds	r5, r5, r3
   14138:	bcs	14a50 <__assert_fail@plt+0x3c5c>
   1413c:	ldr	r3, [sp, #24]
   14140:	str	r5, [r4, #40]	; 0x28
   14144:	ldr	ip, [r6]
   14148:	ldr	r1, [r6, #48]	; 0x30
   1414c:	str	r3, [r4, #48]	; 0x30
   14150:	ldrd	r2, [r7]
   14154:	str	ip, [r4, #4]
   14158:	tst	r1, #4
   1415c:	streq	r8, [r4, #24]
   14160:	strd	r2, [r4, #160]	; 0xa0
   14164:	bne	14290 <__assert_fail@plt+0x349c>
   14168:	ldr	r3, [r6, #44]	; 0x2c
   1416c:	cmp	r3, #0
   14170:	beq	1417c <__assert_fail@plt+0x3388>
   14174:	ands	r3, r1, #1024	; 0x400
   14178:	beq	142d4 <__assert_fail@plt+0x34e0>
   1417c:	ldrb	r3, [r7, #18]
   14180:	tst	r1, #8
   14184:	sub	r0, r3, #1
   14188:	beq	14194 <__assert_fail@plt+0x33a0>
   1418c:	tst	r3, #251	; 0xfb
   14190:	bne	14390 <__assert_fail@plt+0x359c>
   14194:	mov	r3, #11
   14198:	cmp	r0, r3
   1419c:	strh	r3, [r4, #56]	; 0x38
   141a0:	bls	14274 <__assert_fail@plt+0x3480>
   141a4:	mov	r1, #0
   141a8:	mov	r2, #2
   141ac:	mov	r3, #0
   141b0:	str	r1, [r4, #80]	; 0x50
   141b4:	strd	r2, [r4, #112]	; 0x70
   141b8:	ldr	r2, [sp, #12]
   141bc:	mov	r3, #0
   141c0:	str	r3, [r4, #8]
   141c4:	cmp	r2, r3
   141c8:	movw	r3, #10000	; 0x2710
   141cc:	strne	r4, [fp, #8]
   141d0:	streq	r4, [sp, #12]
   141d4:	cmp	r9, r3
   141d8:	bne	14058 <__assert_fail@plt+0x3264>
   141dc:	ldr	r5, [r6, #44]	; 0x2c
   141e0:	cmp	r5, #0
   141e4:	beq	14504 <__assert_fail@plt+0x3710>
   141e8:	movw	r9, #10001	; 0x2711
   141ec:	b	14068 <__assert_fail@plt+0x3274>
   141f0:	ldr	ip, [r6, #36]	; 0x24
   141f4:	ldr	r3, [sp, #4]
   141f8:	add	r0, ip, #256	; 0x100
   141fc:	add	r0, r0, #1
   14200:	add	r0, r0, r3
   14204:	add	r0, r0, r5
   14208:	cmp	ip, r0
   1420c:	bhi	143cc <__assert_fail@plt+0x35d8>
   14210:	mov	r1, r0
   14214:	str	r0, [r6, #36]	; 0x24
   14218:	mov	r0, r2
   1421c:	str	r2, [sp, #8]
   14220:	bl	18a8c <__assert_fail@plt+0x7c98>
   14224:	cmp	r0, #0
   14228:	ldr	r2, [sp, #8]
   1422c:	beq	147c0 <__assert_fail@plt+0x39cc>
   14230:	cmp	r2, r0
   14234:	str	r0, [r6, #24]
   14238:	beq	14258 <__assert_fail@plt+0x3464>
   1423c:	ldr	r2, [r6, #48]	; 0x30
   14240:	tst	r2, #4
   14244:	ldrne	r3, [sp, #4]
   14248:	addne	r3, r0, r3
   1424c:	strne	r3, [sp, #32]
   14250:	mov	r3, #1
   14254:	str	r3, [sp, #36]	; 0x24
   14258:	ldr	r3, [sp, #4]
   1425c:	ldr	r2, [r6, #36]	; 0x24
   14260:	sub	r3, r2, r3
   14264:	str	r3, [sp, #20]
   14268:	b	14130 <__assert_fail@plt+0x333c>
   1426c:	mov	r3, #11
   14270:	strh	r3, [r4, #56]	; 0x38
   14274:	movw	r3, #37440	; 0x9240
   14278:	movt	r3, #1
   1427c:	ldr	r1, [r3, r0, lsl #2]
   14280:	mov	r2, #2
   14284:	mov	r3, #0
   14288:	str	r1, [r4, #80]	; 0x50
   1428c:	b	141b4 <__assert_fail@plt+0x33c0>
   14290:	ldr	ip, [r4, #28]
   14294:	mov	r1, r8
   14298:	ldr	r2, [r4, #52]	; 0x34
   1429c:	ldr	r0, [sp, #32]
   142a0:	str	ip, [r4, #24]
   142a4:	add	r2, r2, #1
   142a8:	bl	10bd8 <memmove@plt>
   142ac:	ldr	r1, [r6, #48]	; 0x30
   142b0:	b	14168 <__assert_fail@plt+0x3374>
   142b4:	ldrb	r3, [r7, #20]
   142b8:	cmp	r3, #0
   142bc:	beq	142cc <__assert_fail@plt+0x34d8>
   142c0:	ldrh	r3, [r7, #20]
   142c4:	cmp	r3, #46	; 0x2e
   142c8:	bne	140b4 <__assert_fail@plt+0x32c0>
   142cc:	mov	r4, fp
   142d0:	b	14068 <__assert_fail@plt+0x3274>
   142d4:	mov	r2, r4
   142d8:	ldr	r0, [r6, #32]
   142dc:	bl	138ec <__assert_fail@plt+0x2af8>
   142e0:	strh	r0, [r4, #56]	; 0x38
   142e4:	b	141b8 <__assert_fail@plt+0x33c4>
   142e8:	ldr	r5, [sl]
   142ec:	ldr	r8, [sp, #12]
   142f0:	ldr	fp, [sp, #16]
   142f4:	mov	r0, r4
   142f8:	bl	13598 <__assert_fail@plt+0x27a4>
   142fc:	cmp	r8, #0
   14300:	bne	1436c <__assert_fail@plt+0x3578>
   14304:	ldr	r0, [fp, #12]
   14308:	bl	10ddc <closedir@plt>
   1430c:	ldr	r3, [r6, #48]	; 0x30
   14310:	mov	r2, #0
   14314:	mov	r1, #7
   14318:	mov	r8, r2
   1431c:	str	r2, [fp, #12]
   14320:	strh	r1, [fp, #56]	; 0x38
   14324:	orr	r3, r3, #8192	; 0x2000
   14328:	str	r3, [r6, #48]	; 0x30
   1432c:	str	r5, [sl]
   14330:	mov	r0, r8
   14334:	add	sp, sp, #76	; 0x4c
   14338:	ldrd	r4, [sp]
   1433c:	ldrd	r6, [sp, #8]
   14340:	ldrd	r8, [sp, #16]
   14344:	ldrd	sl, [sp, #24]
   14348:	add	sp, sp, #32
   1434c:	pop	{pc}		; (ldr pc, [sp], #4)
   14350:	mov	r0, r3
   14354:	bl	10ddc <closedir@plt>
   14358:	mov	r0, r8
   1435c:	bl	13598 <__assert_fail@plt+0x27a4>
   14360:	cmp	r4, #0
   14364:	beq	14304 <__assert_fail@plt+0x3510>
   14368:	mov	r8, r4
   1436c:	mov	r0, r8
   14370:	ldr	r4, [r8, #8]
   14374:	ldr	r3, [r8, #12]
   14378:	cmp	r3, #0
   1437c:	bne	14350 <__assert_fail@plt+0x355c>
   14380:	bl	13598 <__assert_fail@plt+0x27a4>
   14384:	cmp	r4, #0
   14388:	bne	14368 <__assert_fail@plt+0x3574>
   1438c:	b	14304 <__assert_fail@plt+0x3510>
   14390:	ubfx	r2, r1, #4, #1
   14394:	cmp	r3, #10
   14398:	moveq	r3, r2
   1439c:	orrne	r3, r2, #1
   143a0:	cmp	r3, #0
   143a4:	beq	1426c <__assert_fail@plt+0x3478>
   143a8:	mov	r3, #11
   143ac:	cmp	r0, r3
   143b0:	strh	r3, [r4, #56]	; 0x38
   143b4:	bls	1460c <__assert_fail@plt+0x3818>
   143b8:	mov	r1, #0
   143bc:	mov	r2, #1
   143c0:	mov	r3, #0
   143c4:	str	r1, [r4, #80]	; 0x50
   143c8:	b	141b4 <__assert_fail@plt+0x33c0>
   143cc:	mov	r0, r2
   143d0:	ldr	r8, [sp, #12]
   143d4:	ldr	fp, [sp, #16]
   143d8:	bl	13598 <__assert_fail@plt+0x27a4>
   143dc:	mov	r3, #36	; 0x24
   143e0:	mov	r1, #0
   143e4:	mov	r5, r3
   143e8:	str	r1, [r6, #24]
   143ec:	str	r3, [sl]
   143f0:	b	142f4 <__assert_fail@plt+0x3500>
   143f4:	ldr	r3, [r6, #48]	; 0x30
   143f8:	ldr	r1, [fp, #24]
   143fc:	and	r2, r3, #516	; 0x204
   14400:	cmp	r2, #512	; 0x200
   14404:	ldreq	r0, [r6, #32]
   14408:	mvnne	r0, #99	; 0x63
   1440c:	ands	r2, r3, #16
   14410:	beq	14420 <__assert_fail@plt+0x362c>
   14414:	tst	r3, #1
   14418:	moveq	r2, #32768	; 0x8000
   1441c:	bne	14628 <__assert_fail@plt+0x3834>
   14420:	add	r3, sp, #68	; 0x44
   14424:	bl	1891c <__assert_fail@plt+0x7b28>
   14428:	cmp	r0, #0
   1442c:	mov	r8, r0
   14430:	str	r0, [fp, #12]
   14434:	beq	149bc <__assert_fail@plt+0x3bc8>
   14438:	ldrh	r3, [fp, #56]	; 0x38
   1443c:	ldr	r0, [r6, #48]	; 0x30
   14440:	cmp	r3, #11
   14444:	beq	148fc <__assert_fail@plt+0x3b08>
   14448:	tst	r0, #256	; 0x100
   1444c:	bne	14840 <__assert_fail@plt+0x3a4c>
   14450:	ldr	r2, [r6, #44]	; 0x2c
   14454:	movw	r3, #34464	; 0x86a0
   14458:	movt	r3, #1
   1445c:	cmp	r2, #0
   14460:	mvnne	r3, #0
   14464:	str	r3, [sp, #28]
   14468:	ldr	r3, [sp, #40]	; 0x28
   1446c:	cmp	r3, #2
   14470:	beq	14830 <__assert_fail@plt+0x3a3c>
   14474:	ldr	r3, [r6, #48]	; 0x30
   14478:	ldr	r0, [sp, #68]	; 0x44
   1447c:	and	r3, r3, #56	; 0x38
   14480:	cmp	r3, #24
   14484:	beq	14638 <__assert_fail@plt+0x3844>
   14488:	ldr	r3, [sp, #40]	; 0x28
   1448c:	sub	r4, r3, #3
   14490:	clz	r4, r4
   14494:	lsr	r4, r4, #5
   14498:	ldr	r3, [r6, #48]	; 0x30
   1449c:	tst	r3, #512	; 0x200
   144a0:	bne	149a8 <__assert_fail@plt+0x3bb4>
   144a4:	cmp	r0, #0
   144a8:	bge	1493c <__assert_fail@plt+0x3b48>
   144ac:	cmp	r4, #0
   144b0:	beq	144c0 <__assert_fail@plt+0x36cc>
   144b4:	bl	10cf8 <__errno_location@plt>
   144b8:	ldr	r3, [r0]
   144bc:	str	r3, [fp, #32]
   144c0:	ldrh	r3, [fp, #58]	; 0x3a
   144c4:	ldr	r0, [fp, #12]
   144c8:	orr	r3, r3, #1
   144cc:	strh	r3, [fp, #58]	; 0x3a
   144d0:	bl	10ddc <closedir@plt>
   144d4:	ldr	r3, [r6, #48]	; 0x30
   144d8:	mov	r2, #0
   144dc:	str	r2, [fp, #12]
   144e0:	tst	r3, #512	; 0x200
   144e4:	beq	144f4 <__assert_fail@plt+0x3700>
   144e8:	ldr	r0, [sp, #68]	; 0x44
   144ec:	cmp	r0, r2
   144f0:	bge	1499c <__assert_fail@plt+0x3ba8>
   144f4:	mov	r2, #0
   144f8:	str	r2, [fp, #12]
   144fc:	str	r2, [sp, #60]	; 0x3c
   14500:	b	13fb8 <__assert_fail@plt+0x31c4>
   14504:	ldr	r0, [sp, #16]
   14508:	ldr	r1, [sp, #68]	; 0x44
   1450c:	bl	137cc <__assert_fail@plt+0x29d8>
   14510:	movw	r3, #26985	; 0x6969
   14514:	cmp	r0, r3
   14518:	beq	1453c <__assert_fail@plt+0x3748>
   1451c:	ldr	r3, [sp, #52]	; 0x34
   14520:	cmp	r0, r3
   14524:	beq	1453c <__assert_fail@plt+0x3748>
   14528:	ldr	r3, [sp, #56]	; 0x38
   1452c:	cmp	r0, r3
   14530:	movne	r3, #1
   14534:	strne	r3, [sp, #44]	; 0x2c
   14538:	bne	141e8 <__assert_fail@plt+0x33f4>
   1453c:	ldr	r3, [sp, #28]
   14540:	add	r9, r9, #1
   14544:	str	r5, [sp, #44]	; 0x2c
   14548:	cmp	r9, r3
   1454c:	bcc	14068 <__assert_fail@plt+0x3274>
   14550:	ldr	r8, [sp, #12]
   14554:	ldr	r3, [sp, #36]	; 0x24
   14558:	ldr	fp, [sp, #16]
   1455c:	cmp	r3, #0
   14560:	beq	146a4 <__assert_fail@plt+0x38b0>
   14564:	ldr	r3, [r6, #4]
   14568:	ldr	r1, [r6, #24]
   1456c:	cmp	r3, #0
   14570:	beq	145a4 <__assert_fail@plt+0x37b0>
   14574:	ldr	r2, [r3, #24]
   14578:	add	r0, r3, #168	; 0xa8
   1457c:	cmp	r2, r0
   14580:	beq	147ac <__assert_fail@plt+0x39b8>
   14584:	ldr	r0, [r3, #28]
   14588:	str	r1, [r3, #28]
   1458c:	sub	r2, r2, r0
   14590:	add	r2, r1, r2
   14594:	str	r2, [r3, #24]
   14598:	ldr	r3, [r3, #8]
   1459c:	cmp	r3, #0
   145a0:	bne	14574 <__assert_fail@plt+0x3780>
   145a4:	ldr	r3, [r8, #48]	; 0x30
   145a8:	cmp	r3, #0
   145ac:	movge	r3, r8
   145b0:	bge	145c8 <__assert_fail@plt+0x37d4>
   145b4:	b	146a4 <__assert_fail@plt+0x38b0>
   145b8:	ldr	r3, [r2, #48]	; 0x30
   145bc:	cmp	r3, #0
   145c0:	blt	146a4 <__assert_fail@plt+0x38b0>
   145c4:	mov	r3, r2
   145c8:	ldr	r2, [r3, #24]
   145cc:	add	r0, r3, #168	; 0xa8
   145d0:	cmp	r2, r0
   145d4:	beq	145e8 <__assert_fail@plt+0x37f4>
   145d8:	ldr	r0, [r3, #28]
   145dc:	sub	r2, r2, r0
   145e0:	add	r2, r1, r2
   145e4:	str	r2, [r3, #24]
   145e8:	ldr	r2, [r3, #8]
   145ec:	str	r1, [r3, #28]
   145f0:	cmp	r2, #0
   145f4:	bne	145b8 <__assert_fail@plt+0x37c4>
   145f8:	ldr	r2, [r3, #4]
   145fc:	ldr	r3, [r2, #48]	; 0x30
   14600:	cmp	r3, #0
   14604:	bge	145c4 <__assert_fail@plt+0x37d0>
   14608:	b	146a4 <__assert_fail@plt+0x38b0>
   1460c:	movw	r3, #37440	; 0x9240
   14610:	movt	r3, #1
   14614:	ldr	r1, [r3, r0, lsl #2]
   14618:	mov	r2, #1
   1461c:	mov	r3, #0
   14620:	str	r1, [r4, #80]	; 0x50
   14624:	b	141b4 <__assert_fail@plt+0x33c0>
   14628:	ldr	r2, [fp, #48]	; 0x30
   1462c:	cmp	r2, #0
   14630:	movne	r2, #32768	; 0x8000
   14634:	b	14420 <__assert_fail@plt+0x362c>
   14638:	ldr	r3, [fp, #84]	; 0x54
   1463c:	cmp	r3, #2
   14640:	bne	14488 <__assert_fail@plt+0x3694>
   14644:	mov	r1, r0
   14648:	mov	r0, fp
   1464c:	bl	137cc <__assert_fail@plt+0x29d8>
   14650:	movw	r3, #26985	; 0x6969
   14654:	cmp	r0, r3
   14658:	beq	14a48 <__assert_fail@plt+0x3c54>
   1465c:	bgt	14a2c <__assert_fail@plt+0x3c38>
   14660:	movw	r3, #19778	; 0x4d42
   14664:	movt	r3, #65363	; 0xff53
   14668:	cmp	r0, r3
   1466c:	beq	14a48 <__assert_fail@plt+0x3c54>
   14670:	cmp	r0, #0
   14674:	beq	14a48 <__assert_fail@plt+0x3c54>
   14678:	ldr	r3, [sp, #40]	; 0x28
   1467c:	cmp	r3, #3
   14680:	bne	14830 <__assert_fail@plt+0x3a3c>
   14684:	mov	r4, #0
   14688:	ldr	r0, [sp, #68]	; 0x44
   1468c:	b	14498 <__assert_fail@plt+0x36a4>
   14690:	ldr	r8, [sp, #12]
   14694:	mov	fp, r3
   14698:	ldr	r3, [sp, #36]	; 0x24
   1469c:	cmp	r3, #0
   146a0:	bne	14564 <__assert_fail@plt+0x3770>
   146a4:	ldr	r3, [r6, #48]	; 0x30
   146a8:	tst	r3, #4
   146ac:	beq	146dc <__assert_fail@plt+0x38e8>
   146b0:	ldr	r2, [sp, #4]
   146b4:	ldr	r3, [r6, #36]	; 0x24
   146b8:	cmp	r9, #0
   146bc:	cmpne	r3, r2
   146c0:	bne	146d0 <__assert_fail@plt+0x38dc>
   146c4:	ldr	r3, [sp, #32]
   146c8:	sub	r3, r3, #1
   146cc:	str	r3, [sp, #32]
   146d0:	ldr	r2, [sp, #32]
   146d4:	mov	r3, #0
   146d8:	strb	r3, [r2]
   146dc:	ldr	r2, [sp, #48]	; 0x30
   146e0:	ldr	r3, [sp, #60]	; 0x3c
   146e4:	cmp	r2, #0
   146e8:	movne	r3, #0
   146ec:	cmp	r3, #0
   146f0:	beq	14728 <__assert_fail@plt+0x3934>
   146f4:	ldr	r3, [sp, #40]	; 0x28
   146f8:	cmp	r9, #0
   146fc:	cmpne	r3, #1
   14700:	bne	14730 <__assert_fail@plt+0x393c>
   14704:	ldr	r3, [fp, #48]	; 0x30
   14708:	cmp	r3, #0
   1470c:	bne	14918 <__assert_fail@plt+0x3b24>
   14710:	mov	r0, r6
   14714:	bl	13be8 <__assert_fail@plt+0x2df4>
   14718:	adds	r0, r0, #0
   1471c:	movne	r0, #1
   14720:	cmp	r0, #0
   14724:	bne	149cc <__assert_fail@plt+0x3bd8>
   14728:	cmp	r9, #0
   1472c:	beq	1488c <__assert_fail@plt+0x3a98>
   14730:	ldr	r3, [sp, #44]	; 0x2c
   14734:	cmp	r3, #0
   14738:	bne	147e8 <__assert_fail@plt+0x39f4>
   1473c:	ldr	r3, [r6, #44]	; 0x2c
   14740:	cmp	r3, #0
   14744:	cmpne	r9, #1
   14748:	beq	14330 <__assert_fail@plt+0x353c>
   1474c:	mov	r1, r8
   14750:	mov	r2, r9
   14754:	mov	r0, r6
   14758:	bl	136e0 <__assert_fail@plt+0x28ec>
   1475c:	mov	r8, r0
   14760:	b	14330 <__assert_fail@plt+0x353c>
   14764:	ldr	r3, [sl]
   14768:	ldr	r8, [sp, #12]
   1476c:	ldr	fp, [sp, #16]
   14770:	cmp	r3, #0
   14774:	beq	14790 <__assert_fail@plt+0x399c>
   14778:	ldr	r2, [sp, #48]	; 0x30
   1477c:	str	r3, [fp, #32]
   14780:	orrs	r2, r2, r9
   14784:	moveq	r3, #4
   14788:	movne	r3, #7
   1478c:	strh	r3, [fp, #56]	; 0x38
   14790:	ldr	r0, [fp, #12]
   14794:	cmp	r0, #0
   14798:	beq	14698 <__assert_fail@plt+0x38a4>
   1479c:	bl	10ddc <closedir@plt>
   147a0:	mov	r3, #0
   147a4:	str	r3, [fp, #12]
   147a8:	b	14698 <__assert_fail@plt+0x38a4>
   147ac:	str	r1, [r3, #28]
   147b0:	ldr	r3, [r3, #8]
   147b4:	cmp	r3, #0
   147b8:	bne	14574 <__assert_fail@plt+0x3780>
   147bc:	b	145a4 <__assert_fail@plt+0x37b0>
   147c0:	mov	r1, r0
   147c4:	ldr	r0, [r6, #24]
   147c8:	str	r1, [sp, #4]
   147cc:	ldr	r8, [sp, #12]
   147d0:	ldr	fp, [sp, #16]
   147d4:	bl	13598 <__assert_fail@plt+0x27a4>
   147d8:	ldr	r1, [sp, #4]
   147dc:	ldr	r5, [sl]
   147e0:	str	r1, [r6, #24]
   147e4:	b	142f4 <__assert_fail@plt+0x3500>
   147e8:	movw	r3, #14000	; 0x36b0
   147ec:	movt	r3, #1
   147f0:	mov	r1, r8
   147f4:	mov	r2, r9
   147f8:	mov	r0, r6
   147fc:	str	r3, [r6, #44]	; 0x2c
   14800:	bl	136e0 <__assert_fail@plt+0x28ec>
   14804:	mov	r3, #0
   14808:	mov	r8, r0
   1480c:	str	r3, [r6, #44]	; 0x2c
   14810:	b	14330 <__assert_fail@plt+0x353c>
   14814:	movw	r3, #34464	; 0x86a0
   14818:	movt	r3, #1
   1481c:	mov	r2, #1
   14820:	str	r3, [sp, #28]
   14824:	str	r2, [sp, #60]	; 0x3c
   14828:	ldr	r3, [r6, #48]	; 0x30
   1482c:	b	13fb8 <__assert_fail@plt+0x31c4>
   14830:	mov	r3, #0
   14834:	str	r3, [sp, #60]	; 0x3c
   14838:	ldr	r3, [r6, #48]	; 0x30
   1483c:	b	13fb8 <__assert_fail@plt+0x31c4>
   14840:	add	r4, r6, #56	; 0x38
   14844:	mov	r2, fp
   14848:	mov	r1, r4
   1484c:	bl	13b1c <__assert_fail@plt+0x2d28>
   14850:	mov	r3, #0
   14854:	mov	r2, fp
   14858:	ldr	r0, [r6, #32]
   1485c:	ldr	r1, [r6, #48]	; 0x30
   14860:	bl	138ec <__assert_fail@plt+0x2af8>
   14864:	mov	r2, fp
   14868:	mov	r1, r4
   1486c:	ldr	r0, [r6, #48]	; 0x30
   14870:	bl	13a48 <__assert_fail@plt+0x2c54>
   14874:	subs	r8, r0, #0
   14878:	bne	14450 <__assert_fail@plt+0x365c>
   1487c:	bl	10cf8 <__errno_location@plt>
   14880:	mov	r3, #12
   14884:	str	r3, [r0]
   14888:	b	14330 <__assert_fail@plt+0x353c>
   1488c:	ldr	r3, [sp, #40]	; 0x28
   14890:	cmp	r3, #3
   14894:	bne	148ac <__assert_fail@plt+0x3ab8>
   14898:	ldrh	r3, [fp, #56]	; 0x38
   1489c:	cmp	r3, #4
   148a0:	cmpne	r3, #7
   148a4:	movne	r3, #6
   148a8:	strhne	r3, [fp, #56]	; 0x38
   148ac:	cmp	r8, #0
   148b0:	bne	148d4 <__assert_fail@plt+0x3ae0>
   148b4:	b	148f4 <__assert_fail@plt+0x3b00>
   148b8:	mov	r0, r3
   148bc:	bl	10ddc <closedir@plt>
   148c0:	mov	r0, r8
   148c4:	bl	13598 <__assert_fail@plt+0x27a4>
   148c8:	cmp	r4, #0
   148cc:	beq	148f4 <__assert_fail@plt+0x3b00>
   148d0:	mov	r8, r4
   148d4:	mov	r0, r8
   148d8:	ldr	r4, [r8, #8]
   148dc:	ldr	r3, [r8, #12]
   148e0:	cmp	r3, #0
   148e4:	bne	148b8 <__assert_fail@plt+0x3ac4>
   148e8:	bl	13598 <__assert_fail@plt+0x27a4>
   148ec:	cmp	r4, #0
   148f0:	bne	148d0 <__assert_fail@plt+0x3adc>
   148f4:	mov	r8, #0
   148f8:	b	14330 <__assert_fail@plt+0x353c>
   148fc:	mov	r1, r0
   14900:	mov	r3, #0
   14904:	ldr	r0, [r6, #32]
   14908:	mov	r2, fp
   1490c:	bl	138ec <__assert_fail@plt+0x2af8>
   14910:	strh	r0, [fp, #56]	; 0x38
   14914:	b	14450 <__assert_fail@plt+0x365c>
   14918:	movw	r3, #37488	; 0x9270
   1491c:	movt	r3, #1
   14920:	ldr	r1, [fp, #4]
   14924:	mvn	r2, #0
   14928:	mov	r0, r6
   1492c:	bl	13c94 <__assert_fail@plt+0x2ea0>
   14930:	adds	r0, r0, #0
   14934:	movne	r0, #1
   14938:	b	14720 <__assert_fail@plt+0x392c>
   1493c:	mov	r2, r0
   14940:	mov	r3, #0
   14944:	mov	r1, fp
   14948:	mov	r0, r6
   1494c:	bl	13c94 <__assert_fail@plt+0x2ea0>
   14950:	cmp	r0, #0
   14954:	bne	144ac <__assert_fail@plt+0x36b8>
   14958:	mov	r3, #1
   1495c:	str	r3, [sp, #60]	; 0x3c
   14960:	ldr	r3, [r6, #48]	; 0x30
   14964:	b	13fb8 <__assert_fail@plt+0x31c4>
   14968:	ldr	r0, [fp, #12]
   1496c:	mov	r8, #0
   14970:	bl	10ddc <closedir@plt>
   14974:	ldr	r3, [sp, #40]	; 0x28
   14978:	str	r8, [fp, #12]
   1497c:	cmp	r3, #3
   14980:	bne	148f4 <__assert_fail@plt+0x3b00>
   14984:	mov	r3, #4
   14988:	strh	r3, [fp, #56]	; 0x38
   1498c:	bl	10cf8 <__errno_location@plt>
   14990:	ldr	r3, [r0]
   14994:	str	r3, [fp, #32]
   14998:	b	14330 <__assert_fail@plt+0x353c>
   1499c:	bl	10dc4 <close@plt>
   149a0:	ldr	r3, [r6, #48]	; 0x30
   149a4:	b	144f4 <__assert_fail@plt+0x3700>
   149a8:	mov	r2, #3
   149ac:	movw	r1, #1030	; 0x406
   149b0:	bl	18c04 <__assert_fail@plt+0x7e10>
   149b4:	str	r0, [sp, #68]	; 0x44
   149b8:	b	144a4 <__assert_fail@plt+0x36b0>
   149bc:	ldr	r3, [sp, #40]	; 0x28
   149c0:	cmp	r3, #3
   149c4:	bne	148f4 <__assert_fail@plt+0x3b00>
   149c8:	b	14984 <__assert_fail@plt+0x3b90>
   149cc:	ldr	r3, [r6, #48]	; 0x30
   149d0:	mov	r2, #7
   149d4:	cmp	r8, #0
   149d8:	strh	r2, [fp, #56]	; 0x38
   149dc:	orr	r3, r3, #8192	; 0x2000
   149e0:	str	r3, [r6, #48]	; 0x30
   149e4:	bne	14a08 <__assert_fail@plt+0x3c14>
   149e8:	b	148f4 <__assert_fail@plt+0x3b00>
   149ec:	mov	r0, r3
   149f0:	bl	10ddc <closedir@plt>
   149f4:	mov	r0, r8
   149f8:	bl	13598 <__assert_fail@plt+0x27a4>
   149fc:	cmp	r4, #0
   14a00:	beq	148f4 <__assert_fail@plt+0x3b00>
   14a04:	mov	r8, r4
   14a08:	mov	r0, r8
   14a0c:	ldr	r4, [r8, #8]
   14a10:	ldr	r3, [r8, #12]
   14a14:	cmp	r3, #0
   14a18:	bne	149ec <__assert_fail@plt+0x3bf8>
   14a1c:	bl	13598 <__assert_fail@plt+0x27a4>
   14a20:	cmp	r4, #0
   14a24:	bne	14a04 <__assert_fail@plt+0x3c10>
   14a28:	b	148f4 <__assert_fail@plt+0x3b00>
   14a2c:	movw	r3, #40864	; 0x9fa0
   14a30:	cmp	r0, r3
   14a34:	beq	14a48 <__assert_fail@plt+0x3c54>
   14a38:	movw	r3, #16719	; 0x414f
   14a3c:	movt	r3, #21318	; 0x5346
   14a40:	cmp	r0, r3
   14a44:	bne	14678 <__assert_fail@plt+0x3884>
   14a48:	ldr	r0, [sp, #68]	; 0x44
   14a4c:	b	14488 <__assert_fail@plt+0x3694>
   14a50:	ldr	r8, [sp, #12]
   14a54:	mov	r0, r4
   14a58:	ldr	fp, [sp, #16]
   14a5c:	bl	13598 <__assert_fail@plt+0x27a4>
   14a60:	cmp	r8, #0
   14a64:	bne	14a88 <__assert_fail@plt+0x3c94>
   14a68:	b	14aa8 <__assert_fail@plt+0x3cb4>
   14a6c:	mov	r0, r3
   14a70:	bl	10ddc <closedir@plt>
   14a74:	mov	r0, r8
   14a78:	bl	13598 <__assert_fail@plt+0x27a4>
   14a7c:	cmp	r4, #0
   14a80:	beq	14aa8 <__assert_fail@plt+0x3cb4>
   14a84:	mov	r8, r4
   14a88:	mov	r0, r8
   14a8c:	ldr	r4, [r8, #8]
   14a90:	ldr	r3, [r8, #12]
   14a94:	cmp	r3, #0
   14a98:	bne	14a6c <__assert_fail@plt+0x3c78>
   14a9c:	bl	13598 <__assert_fail@plt+0x27a4>
   14aa0:	cmp	r4, #0
   14aa4:	bne	14a84 <__assert_fail@plt+0x3c90>
   14aa8:	ldr	r0, [fp, #12]
   14aac:	mov	r8, #0
   14ab0:	bl	10ddc <closedir@plt>
   14ab4:	ldr	r3, [r6, #48]	; 0x30
   14ab8:	mov	r1, #7
   14abc:	mov	r2, #36	; 0x24
   14ac0:	str	r8, [fp, #12]
   14ac4:	strh	r1, [fp, #56]	; 0x38
   14ac8:	orr	r3, r3, #8192	; 0x2000
   14acc:	str	r3, [r6, #48]	; 0x30
   14ad0:	str	r2, [sl]
   14ad4:	b	14330 <__assert_fail@plt+0x353c>
   14ad8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14adc:	strd	r6, [sp, #8]
   14ae0:	bic	r7, r1, #4080	; 0xff0
   14ae4:	bic	r7, r7, #15
   14ae8:	strd	r8, [sp, #16]
   14aec:	strd	sl, [sp, #24]
   14af0:	cmp	r7, #0
   14af4:	str	lr, [sp, #32]
   14af8:	sub	sp, sp, #36	; 0x24
   14afc:	str	r2, [sp, #12]
   14b00:	bne	14f6c <__assert_fail@plt+0x4178>
   14b04:	and	r3, r1, #516	; 0x204
   14b08:	mov	r5, r1
   14b0c:	cmp	r3, #516	; 0x204
   14b10:	beq	14f00 <__assert_fail@plt+0x410c>
   14b14:	ands	r7, r1, #18
   14b18:	beq	14f00 <__assert_fail@plt+0x410c>
   14b1c:	mov	r9, r0
   14b20:	mov	r1, #96	; 0x60
   14b24:	mov	r0, #1
   14b28:	bl	189dc <__assert_fail@plt+0x7be8>
   14b2c:	subs	r7, r0, #0
   14b30:	beq	14e78 <__assert_fail@plt+0x4084>
   14b34:	ldr	r3, [sp, #12]
   14b38:	tst	r5, #2
   14b3c:	mvn	r2, #99	; 0x63
   14b40:	streq	r5, [r7, #48]	; 0x30
   14b44:	str	r2, [r7, #32]
   14b48:	str	r3, [r7, #44]	; 0x2c
   14b4c:	bicne	r3, r5, #512	; 0x200
   14b50:	orrne	r3, r3, #4
   14b54:	strne	r3, [r7, #48]	; 0x30
   14b58:	ldr	r3, [r9]
   14b5c:	cmp	r3, #0
   14b60:	beq	14fb8 <__assert_fail@plt+0x41c4>
   14b64:	mov	r6, r9
   14b68:	mov	r4, #0
   14b6c:	mov	r0, r3
   14b70:	bl	10cc8 <strlen@plt>
   14b74:	ldr	r3, [r6, #4]!
   14b78:	cmp	r4, r0
   14b7c:	movcc	r4, r0
   14b80:	cmp	r3, #0
   14b84:	bne	14b6c <__assert_fail@plt+0x3d78>
   14b88:	add	r4, r4, #1
   14b8c:	cmp	r4, #4096	; 0x1000
   14b90:	movcc	r4, #4096	; 0x1000
   14b94:	ldr	r0, [r7, #24]
   14b98:	ldr	r3, [r7, #36]	; 0x24
   14b9c:	add	r1, r3, #256	; 0x100
   14ba0:	add	r1, r1, r4
   14ba4:	cmp	r3, r1
   14ba8:	bhi	14f80 <__assert_fail@plt+0x418c>
   14bac:	str	r1, [r7, #36]	; 0x24
   14bb0:	bl	18a8c <__assert_fail@plt+0x7c98>
   14bb4:	subs	r4, r0, #0
   14bb8:	beq	15004 <__assert_fail@plt+0x4210>
   14bbc:	ldr	r3, [r9]
   14bc0:	str	r4, [r7, #24]
   14bc4:	cmp	r3, #0
   14bc8:	str	r3, [sp, #16]
   14bcc:	beq	14f58 <__assert_fail@plt+0x4164>
   14bd0:	mov	r0, #176	; 0xb0
   14bd4:	bl	18a50 <__assert_fail@plt+0x7c5c>
   14bd8:	subs	ip, r0, #0
   14bdc:	str	ip, [sp, #16]
   14be0:	beq	14ee8 <__assert_fail@plt+0x40f4>
   14be4:	ldr	r2, [sp, #12]
   14be8:	mov	r3, #0
   14bec:	mvn	r1, #0
   14bf0:	ldr	r0, [r7, #24]
   14bf4:	str	r3, [ip, #12]
   14bf8:	str	r3, [ip, #16]
   14bfc:	cmp	r2, r3
   14c00:	mov	r2, #196608	; 0x30000
   14c04:	str	r3, [ip, #20]
   14c08:	str	r7, [ip, #44]	; 0x2c
   14c0c:	str	r3, [ip, #32]
   14c10:	str	r3, [ip, #52]	; 0x34
   14c14:	strb	r3, [ip, #168]	; 0xa8
   14c18:	moveq	r3, #1
   14c1c:	str	r0, [ip, #28]
   14c20:	streq	r3, [sp, #24]
   14c24:	str	r1, [ip, #48]	; 0x30
   14c28:	str	r2, [ip, #58]	; 0x3a
   14c2c:	ldr	fp, [r9]
   14c30:	beq	14c40 <__assert_fail@plt+0x3e4c>
   14c34:	ldr	r3, [r7, #48]	; 0x30
   14c38:	ubfx	r3, r3, #10, #1
   14c3c:	str	r3, [sp, #24]
   14c40:	cmp	fp, #0
   14c44:	beq	15030 <__assert_fail@plt+0x423c>
   14c48:	eor	r5, r5, #2048	; 0x800
   14c4c:	mov	r3, #0
   14c50:	ubfx	r2, r5, #11, #1
   14c54:	mov	r6, r3
   14c58:	mov	sl, r3
   14c5c:	mov	r8, r3
   14c60:	str	r2, [sp, #20]
   14c64:	str	r3, [sp, #28]
   14c68:	b	14ca4 <__assert_fail@plt+0x3eb0>
   14c6c:	ldr	r2, [sp, #12]
   14c70:	mov	r3, #11
   14c74:	mov	r0, #2
   14c78:	mov	r1, #0
   14c7c:	strh	r3, [r4, #56]	; 0x38
   14c80:	strd	r0, [r4, #112]	; 0x70
   14c84:	cmp	r2, #0
   14c88:	beq	14f44 <__assert_fail@plt+0x4150>
   14c8c:	str	r8, [r4, #8]
   14c90:	mov	r8, r4
   14c94:	ldr	fp, [r9, #4]!
   14c98:	add	sl, sl, #1
   14c9c:	cmp	fp, #0
   14ca0:	beq	14da0 <__assert_fail@plt+0x3fac>
   14ca4:	mov	r0, fp
   14ca8:	bl	10cc8 <strlen@plt>
   14cac:	ldr	r3, [sp, #20]
   14cb0:	mov	r5, r0
   14cb4:	cmp	r0, #2
   14cb8:	movls	r3, #0
   14cbc:	andhi	r3, r3, #1
   14cc0:	cmp	r3, #0
   14cc4:	bne	14f10 <__assert_fail@plt+0x411c>
   14cc8:	add	r0, r5, #176	; 0xb0
   14ccc:	bic	r0, r0, #7
   14cd0:	bl	18a50 <__assert_fail@plt+0x7c5c>
   14cd4:	subs	r4, r0, #0
   14cd8:	beq	14e98 <__assert_fail@plt+0x40a4>
   14cdc:	add	r3, r4, #168	; 0xa8
   14ce0:	mov	r1, fp
   14ce4:	mov	r0, r3
   14ce8:	mov	r2, r5
   14cec:	bl	10bf0 <memcpy@plt>
   14cf0:	add	ip, r4, r5
   14cf4:	ldr	r2, [sp, #24]
   14cf8:	mov	r3, r0
   14cfc:	cmp	r8, #0
   14d00:	mov	r1, #3
   14d04:	strb	r6, [ip, #168]	; 0xa8
   14d08:	moveq	r2, #0
   14d0c:	ldr	ip, [sp, #16]
   14d10:	ldr	r0, [r7, #24]
   14d14:	cmp	r2, #0
   14d18:	str	ip, [r4, #4]
   14d1c:	str	r6, [r4, #12]
   14d20:	str	r6, [r4, #16]
   14d24:	str	r6, [r4, #20]
   14d28:	str	r3, [r4, #24]
   14d2c:	str	r0, [r4, #28]
   14d30:	str	r6, [r4, #32]
   14d34:	str	r7, [r4, #44]	; 0x2c
   14d38:	str	r6, [r4, #48]	; 0x30
   14d3c:	str	r5, [r4, #52]	; 0x34
   14d40:	strh	r6, [r4, #58]	; 0x3a
   14d44:	strh	r1, [r4, #60]	; 0x3c
   14d48:	bne	14c6c <__assert_fail@plt+0x3e78>
   14d4c:	mov	r3, r2
   14d50:	mov	r2, r4
   14d54:	ldr	r0, [r7, #32]
   14d58:	ldr	r1, [r7, #48]	; 0x30
   14d5c:	bl	138ec <__assert_fail@plt+0x2af8>
   14d60:	ldr	r3, [sp, #12]
   14d64:	strh	r0, [r4, #56]	; 0x38
   14d68:	cmp	r3, #0
   14d6c:	bne	14c8c <__assert_fail@plt+0x3e98>
   14d70:	cmp	r8, #0
   14d74:	str	r3, [r4, #8]
   14d78:	moveq	r8, r4
   14d7c:	streq	r4, [sp, #28]
   14d80:	beq	14c94 <__assert_fail@plt+0x3ea0>
   14d84:	ldr	r3, [sp, #28]
   14d88:	str	r4, [sp, #28]
   14d8c:	str	r4, [r3, #8]
   14d90:	ldr	fp, [r9, #4]!
   14d94:	add	sl, sl, #1
   14d98:	cmp	fp, #0
   14d9c:	bne	14ca4 <__assert_fail@plt+0x3eb0>
   14da0:	ldr	r3, [sp, #12]
   14da4:	cmp	r3, #0
   14da8:	cmpne	sl, #1
   14dac:	bls	14dc4 <__assert_fail@plt+0x3fd0>
   14db0:	mov	r1, r8
   14db4:	mov	r2, sl
   14db8:	mov	r0, r7
   14dbc:	bl	136e0 <__assert_fail@plt+0x28ec>
   14dc0:	mov	r8, r0
   14dc4:	mov	r0, #176	; 0xb0
   14dc8:	bl	18a50 <__assert_fail@plt+0x7c5c>
   14dcc:	cmp	r0, #0
   14dd0:	streq	r0, [r7]
   14dd4:	beq	14e98 <__assert_fail@plt+0x40a4>
   14dd8:	ldr	lr, [r7, #24]
   14ddc:	movw	r4, #258	; 0x102
   14de0:	mov	r1, #0
   14de4:	mov	ip, #1
   14de8:	mov	r2, #9
   14dec:	str	r0, [r7]
   14df0:	ldr	r3, [r7, #48]	; 0x30
   14df4:	str	r8, [r0, #8]
   14df8:	str	r1, [r0, #12]
   14dfc:	str	r1, [r0, #16]
   14e00:	str	r1, [r0, #20]
   14e04:	tst	r4, r3
   14e08:	mov	r3, #3
   14e0c:	str	lr, [r0, #28]
   14e10:	str	r1, [r0, #32]
   14e14:	str	r7, [r0, #44]	; 0x2c
   14e18:	str	ip, [r0, #48]	; 0x30
   14e1c:	str	r1, [r0, #52]	; 0x34
   14e20:	str	r2, [r0, #56]	; 0x38
   14e24:	strh	r3, [r0, #60]	; 0x3c
   14e28:	strb	r1, [r0, #168]	; 0xa8
   14e2c:	beq	14f9c <__assert_fail@plt+0x41a8>
   14e30:	movw	r0, #13720	; 0x3598
   14e34:	movt	r0, #1
   14e38:	movw	r3, #13816	; 0x35f8
   14e3c:	movt	r3, #1
   14e40:	movw	r2, #13880	; 0x3638
   14e44:	movt	r2, #1
   14e48:	str	r0, [sp]
   14e4c:	mov	r0, #31
   14e50:	bl	1799c <__assert_fail@plt+0x6ba8>
   14e54:	cmp	r0, #0
   14e58:	str	r0, [r7, #56]	; 0x38
   14e5c:	beq	14e98 <__assert_fail@plt+0x40a4>
   14e60:	ldr	r3, [r7, #48]	; 0x30
   14e64:	tst	r3, #516	; 0x204
   14e68:	beq	14fc0 <__assert_fail@plt+0x41cc>
   14e6c:	mvn	r1, #0
   14e70:	add	r0, r7, #60	; 0x3c
   14e74:	bl	18768 <__assert_fail@plt+0x7974>
   14e78:	mov	r0, r7
   14e7c:	add	sp, sp, #36	; 0x24
   14e80:	ldrd	r4, [sp]
   14e84:	ldrd	r6, [sp, #8]
   14e88:	ldrd	r8, [sp, #16]
   14e8c:	ldrd	sl, [sp, #24]
   14e90:	add	sp, sp, #32
   14e94:	pop	{pc}		; (ldr pc, [sp], #4)
   14e98:	cmp	r8, #0
   14e9c:	bne	14ec0 <__assert_fail@plt+0x40cc>
   14ea0:	b	14ee0 <__assert_fail@plt+0x40ec>
   14ea4:	mov	r0, r3
   14ea8:	bl	10ddc <closedir@plt>
   14eac:	mov	r0, r8
   14eb0:	bl	13598 <__assert_fail@plt+0x27a4>
   14eb4:	cmp	r4, #0
   14eb8:	beq	14ee0 <__assert_fail@plt+0x40ec>
   14ebc:	mov	r8, r4
   14ec0:	mov	r0, r8
   14ec4:	ldr	r4, [r8, #8]
   14ec8:	ldr	r3, [r8, #12]
   14ecc:	cmp	r3, #0
   14ed0:	bne	14ea4 <__assert_fail@plt+0x40b0>
   14ed4:	bl	13598 <__assert_fail@plt+0x27a4>
   14ed8:	cmp	r4, #0
   14edc:	bne	14ebc <__assert_fail@plt+0x40c8>
   14ee0:	ldr	r0, [sp, #16]
   14ee4:	bl	13598 <__assert_fail@plt+0x27a4>
   14ee8:	ldr	r0, [r7, #24]
   14eec:	bl	13598 <__assert_fail@plt+0x27a4>
   14ef0:	mov	r0, r7
   14ef4:	mov	r7, #0
   14ef8:	bl	13598 <__assert_fail@plt+0x27a4>
   14efc:	b	14e78 <__assert_fail@plt+0x4084>
   14f00:	bl	10cf8 <__errno_location@plt>
   14f04:	mov	r3, #22
   14f08:	str	r3, [r0]
   14f0c:	b	14e78 <__assert_fail@plt+0x4084>
   14f10:	sub	r3, r0, #1
   14f14:	ldrb	r2, [fp, r3]
   14f18:	add	r3, fp, r3
   14f1c:	cmp	r2, #47	; 0x2f
   14f20:	bne	14cc8 <__assert_fail@plt+0x3ed4>
   14f24:	ldrb	r2, [r3, #-1]!
   14f28:	cmp	r2, #47	; 0x2f
   14f2c:	bne	14cc8 <__assert_fail@plt+0x3ed4>
   14f30:	sub	r5, r5, #1
   14f34:	cmp	r5, #1
   14f38:	bne	14f24 <__assert_fail@plt+0x4130>
   14f3c:	mov	r0, #176	; 0xb0
   14f40:	b	14cd0 <__assert_fail@plt+0x3edc>
   14f44:	ldr	r3, [sp, #28]
   14f48:	str	r2, [r4, #8]
   14f4c:	str	r4, [sp, #28]
   14f50:	str	r4, [r3, #8]
   14f54:	b	14d90 <__assert_fail@plt+0x3f9c>
   14f58:	ldr	r3, [sp, #12]
   14f5c:	cmp	r3, #0
   14f60:	beq	15028 <__assert_fail@plt+0x4234>
   14f64:	ldr	fp, [sp, #16]
   14f68:	b	14c34 <__assert_fail@plt+0x3e40>
   14f6c:	bl	10cf8 <__errno_location@plt>
   14f70:	mov	r3, #22
   14f74:	mov	r7, #0
   14f78:	str	r3, [r0]
   14f7c:	b	14e78 <__assert_fail@plt+0x4084>
   14f80:	bl	13598 <__assert_fail@plt+0x27a4>
   14f84:	mov	r3, #0
   14f88:	str	r3, [r7, #24]
   14f8c:	bl	10cf8 <__errno_location@plt>
   14f90:	mov	r3, #36	; 0x24
   14f94:	str	r3, [r0]
   14f98:	b	14ef0 <__assert_fail@plt+0x40fc>
   14f9c:	mov	r0, #32
   14fa0:	bl	18a50 <__assert_fail@plt+0x7c5c>
   14fa4:	cmp	r0, #0
   14fa8:	str	r0, [r7, #56]	; 0x38
   14fac:	beq	14e98 <__assert_fail@plt+0x40a4>
   14fb0:	bl	18ae4 <__assert_fail@plt+0x7cf0>
   14fb4:	b	14e60 <__assert_fail@plt+0x406c>
   14fb8:	mov	r4, #4096	; 0x1000
   14fbc:	b	14b94 <__assert_fail@plt+0x3da0>
   14fc0:	lsl	r2, r3, #11
   14fc4:	tst	r3, #512	; 0x200
   14fc8:	and	r2, r2, #32768	; 0x8000
   14fcc:	orr	r2, r2, #540672	; 0x84000
   14fd0:	orr	r2, r2, #2304	; 0x900
   14fd4:	beq	15014 <__assert_fail@plt+0x4220>
   14fd8:	movw	r1, #37492	; 0x9274
   14fdc:	movt	r1, #1
   14fe0:	ldr	r0, [r7, #32]
   14fe4:	bl	188dc <__assert_fail@plt+0x7ae8>
   14fe8:	cmp	r0, #0
   14fec:	str	r0, [r7, #28]
   14ff0:	bge	14e6c <__assert_fail@plt+0x4078>
   14ff4:	ldr	r3, [r7, #48]	; 0x30
   14ff8:	orr	r3, r3, #4
   14ffc:	str	r3, [r7, #48]	; 0x30
   15000:	b	14e6c <__assert_fail@plt+0x4078>
   15004:	ldr	r0, [r7, #24]
   15008:	bl	13598 <__assert_fail@plt+0x27a4>
   1500c:	str	r4, [r7, #24]
   15010:	b	14ef0 <__assert_fail@plt+0x40fc>
   15014:	mov	r1, r2
   15018:	movw	r0, #37492	; 0x9274
   1501c:	movt	r0, #1
   15020:	bl	18dec <__assert_fail@plt+0x7ff8>
   15024:	b	14fe8 <__assert_fail@plt+0x41f4>
   15028:	ldr	r8, [sp, #16]
   1502c:	b	14dc4 <__assert_fail@plt+0x3fd0>
   15030:	mov	r8, fp
   15034:	b	14dc4 <__assert_fail@plt+0x3fd0>
   15038:	ldr	r3, [r0]
   1503c:	strd	r4, [sp, #-16]!
   15040:	str	r6, [sp, #8]
   15044:	mov	r6, r0
   15048:	str	lr, [sp, #12]
   1504c:	cmp	r3, #0
   15050:	beq	150a4 <__assert_fail@plt+0x42b0>
   15054:	ldr	r2, [r3, #48]	; 0x30
   15058:	cmp	r2, #0
   1505c:	bge	15078 <__assert_fail@plt+0x4284>
   15060:	b	15228 <__assert_fail@plt+0x4434>
   15064:	bl	13598 <__assert_fail@plt+0x27a4>
   15068:	ldr	r3, [r4, #48]	; 0x30
   1506c:	cmp	r3, #0
   15070:	blt	1509c <__assert_fail@plt+0x42a8>
   15074:	mov	r3, r4
   15078:	ldr	r4, [r3, #8]
   1507c:	mov	r0, r3
   15080:	cmp	r4, #0
   15084:	bne	15064 <__assert_fail@plt+0x4270>
   15088:	ldr	r4, [r3, #4]
   1508c:	bl	13598 <__assert_fail@plt+0x27a4>
   15090:	ldr	r3, [r4, #48]	; 0x30
   15094:	cmp	r3, #0
   15098:	bge	15074 <__assert_fail@plt+0x4280>
   1509c:	mov	r0, r4
   150a0:	bl	13598 <__assert_fail@plt+0x27a4>
   150a4:	ldr	r4, [r6, #4]
   150a8:	cmp	r4, #0
   150ac:	bne	150d0 <__assert_fail@plt+0x42dc>
   150b0:	b	150f0 <__assert_fail@plt+0x42fc>
   150b4:	mov	r0, r3
   150b8:	bl	10ddc <closedir@plt>
   150bc:	mov	r0, r4
   150c0:	bl	13598 <__assert_fail@plt+0x27a4>
   150c4:	cmp	r5, #0
   150c8:	beq	150f0 <__assert_fail@plt+0x42fc>
   150cc:	mov	r4, r5
   150d0:	mov	r0, r4
   150d4:	ldr	r5, [r4, #8]
   150d8:	ldr	r3, [r4, #12]
   150dc:	cmp	r3, #0
   150e0:	bne	150b4 <__assert_fail@plt+0x42c0>
   150e4:	bl	13598 <__assert_fail@plt+0x27a4>
   150e8:	cmp	r5, #0
   150ec:	bne	150cc <__assert_fail@plt+0x42d8>
   150f0:	ldr	r0, [r6, #8]
   150f4:	bl	13598 <__assert_fail@plt+0x27a4>
   150f8:	ldr	r0, [r6, #24]
   150fc:	bl	13598 <__assert_fail@plt+0x27a4>
   15100:	ldr	r3, [r6, #48]	; 0x30
   15104:	tst	r3, #512	; 0x200
   15108:	beq	151b8 <__assert_fail@plt+0x43c4>
   1510c:	ldr	r0, [r6, #32]
   15110:	cmp	r0, #0
   15114:	bge	151a0 <__assert_fail@plt+0x43ac>
   15118:	mov	r5, #0
   1511c:	add	r4, r6, #60	; 0x3c
   15120:	b	15130 <__assert_fail@plt+0x433c>
   15124:	bl	187e4 <__assert_fail@plt+0x79f0>
   15128:	cmp	r0, #0
   1512c:	bge	15198 <__assert_fail@plt+0x43a4>
   15130:	mov	r0, r4
   15134:	bl	18794 <__assert_fail@plt+0x79a0>
   15138:	cmp	r0, #0
   1513c:	mov	r0, r4
   15140:	beq	15124 <__assert_fail@plt+0x4330>
   15144:	ldr	r0, [r6, #52]	; 0x34
   15148:	cmp	r0, #0
   1514c:	beq	15154 <__assert_fail@plt+0x4360>
   15150:	bl	17cdc <__assert_fail@plt+0x6ee8>
   15154:	ldr	r3, [r6, #48]	; 0x30
   15158:	movw	r2, #258	; 0x102
   1515c:	ldr	r0, [r6, #56]	; 0x38
   15160:	tst	r2, r3
   15164:	beq	151f0 <__assert_fail@plt+0x43fc>
   15168:	cmp	r0, #0
   1516c:	beq	15174 <__assert_fail@plt+0x4380>
   15170:	bl	17cdc <__assert_fail@plt+0x6ee8>
   15174:	mov	r0, r6
   15178:	bl	13598 <__assert_fail@plt+0x27a4>
   1517c:	cmp	r5, #0
   15180:	bne	15230 <__assert_fail@plt+0x443c>
   15184:	mov	r0, r5
   15188:	ldrd	r4, [sp]
   1518c:	ldr	r6, [sp, #8]
   15190:	add	sp, sp, #12
   15194:	pop	{pc}		; (ldr pc, [sp], #4)
   15198:	bl	10dc4 <close@plt>
   1519c:	b	15130 <__assert_fail@plt+0x433c>
   151a0:	bl	10dc4 <close@plt>
   151a4:	cmp	r0, #0
   151a8:	beq	15118 <__assert_fail@plt+0x4324>
   151ac:	bl	10cf8 <__errno_location@plt>
   151b0:	ldr	r5, [r0]
   151b4:	b	1511c <__assert_fail@plt+0x4328>
   151b8:	tst	r3, #4
   151bc:	bne	15118 <__assert_fail@plt+0x4324>
   151c0:	ldr	r0, [r6, #28]
   151c4:	bl	10d7c <fchdir@plt>
   151c8:	cmp	r0, #0
   151cc:	bne	151f8 <__assert_fail@plt+0x4404>
   151d0:	ldr	r0, [r6, #28]
   151d4:	bl	10dc4 <close@plt>
   151d8:	cmp	r0, #0
   151dc:	beq	15118 <__assert_fail@plt+0x4324>
   151e0:	bl	10cf8 <__errno_location@plt>
   151e4:	mov	r4, r0
   151e8:	ldr	r5, [r4]
   151ec:	b	1511c <__assert_fail@plt+0x4328>
   151f0:	bl	13598 <__assert_fail@plt+0x27a4>
   151f4:	b	15174 <__assert_fail@plt+0x4380>
   151f8:	bl	10cf8 <__errno_location@plt>
   151fc:	ldr	r5, [r0]
   15200:	mov	r4, r0
   15204:	ldr	r0, [r6, #28]
   15208:	bl	10dc4 <close@plt>
   1520c:	adds	r3, r0, #0
   15210:	movne	r3, #1
   15214:	cmp	r5, #0
   15218:	movne	r3, #0
   1521c:	cmp	r3, #0
   15220:	beq	1511c <__assert_fail@plt+0x4328>
   15224:	b	151e8 <__assert_fail@plt+0x43f4>
   15228:	mov	r4, r3
   1522c:	b	1509c <__assert_fail@plt+0x42a8>
   15230:	bl	10cf8 <__errno_location@plt>
   15234:	str	r5, [r0]
   15238:	mvn	r5, #0
   1523c:	b	15184 <__assert_fail@plt+0x4390>
   15240:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15244:	ldr	r4, [r0]
   15248:	strd	r6, [sp, #8]
   1524c:	str	r8, [sp, #16]
   15250:	str	lr, [sp, #20]
   15254:	sub	sp, sp, #8
   15258:	cmp	r4, #0
   1525c:	beq	1546c <__assert_fail@plt+0x4678>
   15260:	ldr	r1, [r0, #48]	; 0x30
   15264:	ands	r3, r1, #8192	; 0x2000
   15268:	bne	1546c <__assert_fail@plt+0x4678>
   1526c:	ldrh	r2, [r4, #60]	; 0x3c
   15270:	mov	r8, r0
   15274:	mov	r0, #3
   15278:	strh	r0, [r4, #60]	; 0x3c
   1527c:	cmp	r2, #1
   15280:	beq	156c4 <__assert_fail@plt+0x48d0>
   15284:	cmp	r2, #2
   15288:	ldrh	r3, [r4, #56]	; 0x38
   1528c:	beq	1538c <__assert_fail@plt+0x4598>
   15290:	cmp	r3, #1
   15294:	bne	152c4 <__assert_fail@plt+0x44d0>
   15298:	b	1548c <__assert_fail@plt+0x4698>
   1529c:	mov	r0, r4
   152a0:	str	r5, [r8]
   152a4:	bl	13598 <__assert_fail@plt+0x27a4>
   152a8:	ldr	r4, [r5, #48]	; 0x30
   152ac:	cmp	r4, #0
   152b0:	beq	1550c <__assert_fail@plt+0x4718>
   152b4:	ldrh	r3, [r5, #60]	; 0x3c
   152b8:	mov	r4, r5
   152bc:	cmp	r3, #4
   152c0:	bne	155e0 <__assert_fail@plt+0x47ec>
   152c4:	ldr	r5, [r4, #8]
   152c8:	cmp	r5, #0
   152cc:	bne	1529c <__assert_fail@plt+0x44a8>
   152d0:	ldr	r6, [r4, #4]
   152d4:	ldr	r3, [r6, #12]
   152d8:	cmp	r3, #0
   152dc:	bne	1583c <__assert_fail@plt+0x4a48>
   152e0:	mov	r0, r4
   152e4:	str	r6, [r8]
   152e8:	bl	13598 <__assert_fail@plt+0x27a4>
   152ec:	ldr	r3, [r6, #48]	; 0x30
   152f0:	cmn	r3, #1
   152f4:	beq	1581c <__assert_fail@plt+0x4a28>
   152f8:	ldrh	r3, [r6, #56]	; 0x38
   152fc:	cmp	r3, #11
   15300:	beq	156c0 <__assert_fail@plt+0x48cc>
   15304:	ldr	r2, [r8, #24]
   15308:	mov	r1, #0
   1530c:	ldr	r3, [r6, #40]	; 0x28
   15310:	strb	r1, [r2, r3]
   15314:	ldr	r3, [r6, #48]	; 0x30
   15318:	cmp	r3, r1
   1531c:	beq	15438 <__assert_fail@plt+0x4644>
   15320:	ldrh	r3, [r6, #58]	; 0x3a
   15324:	tst	r3, #2
   15328:	beq	15778 <__assert_fail@plt+0x4984>
   1532c:	ldr	r3, [r8, #48]	; 0x30
   15330:	ldr	r4, [r6, #36]	; 0x24
   15334:	tst	r3, #4
   15338:	bne	15380 <__assert_fail@plt+0x458c>
   1533c:	tst	r3, #512	; 0x200
   15340:	beq	15918 <__assert_fail@plt+0x4b24>
   15344:	ldr	r1, [r8, #32]
   15348:	sub	r3, r4, r1
   1534c:	cmn	r1, #100	; 0x64
   15350:	clz	r3, r3
   15354:	lsr	r3, r3, #5
   15358:	moveq	r3, #0
   1535c:	cmp	r3, #0
   15360:	bne	156c0 <__assert_fail@plt+0x48cc>
   15364:	add	r0, r8, #60	; 0x3c
   15368:	bl	1879c <__assert_fail@plt+0x79a8>
   1536c:	cmp	r0, #0
   15370:	blt	15378 <__assert_fail@plt+0x4584>
   15374:	bl	10dc4 <close@plt>
   15378:	str	r4, [r8, #32]
   1537c:	ldr	r4, [r6, #36]	; 0x24
   15380:	mov	r0, r4
   15384:	bl	10dc4 <close@plt>
   15388:	b	15780 <__assert_fail@plt+0x498c>
   1538c:	sub	r2, r3, #12
   15390:	cmp	r2, #1
   15394:	bls	1567c <__assert_fail@plt+0x4888>
   15398:	cmp	r3, #1
   1539c:	bne	152c4 <__assert_fail@plt+0x44d0>
   153a0:	tst	r1, #64	; 0x40
   153a4:	beq	153bc <__assert_fail@plt+0x45c8>
   153a8:	ldrd	r2, [r8, #16]
   153ac:	ldrd	r6, [r4, #64]	; 0x40
   153b0:	cmp	r7, r3
   153b4:	cmpeq	r6, r2
   153b8:	bne	15494 <__assert_fail@plt+0x46a0>
   153bc:	ldr	r5, [r8, #4]
   153c0:	cmp	r5, #0
   153c4:	beq	15724 <__assert_fail@plt+0x4930>
   153c8:	tst	r1, #4096	; 0x1000
   153cc:	bne	156d8 <__assert_fail@plt+0x48e4>
   153d0:	mvn	r2, #0
   153d4:	mov	r1, r4
   153d8:	ldr	r3, [r4, #24]
   153dc:	mov	r0, r8
   153e0:	bl	13c94 <__assert_fail@plt+0x2ea0>
   153e4:	cmp	r0, #0
   153e8:	beq	15804 <__assert_fail@plt+0x4a10>
   153ec:	bl	10cf8 <__errno_location@plt>
   153f0:	ldrh	r3, [r4, #58]	; 0x3a
   153f4:	ldr	r2, [r0]
   153f8:	orr	r3, r3, #1
   153fc:	str	r2, [r4, #32]
   15400:	strh	r3, [r4, #58]	; 0x3a
   15404:	ldr	r4, [r8, #4]
   15408:	cmp	r4, #0
   1540c:	beq	1542c <__assert_fail@plt+0x4638>
   15410:	mov	r3, r4
   15414:	ldr	r2, [r3, #4]
   15418:	ldr	r2, [r2, #24]
   1541c:	str	r2, [r3, #24]
   15420:	ldr	r3, [r3, #8]
   15424:	cmp	r3, #0
   15428:	bne	15414 <__assert_fail@plt+0x4620>
   1542c:	mov	r3, #0
   15430:	str	r3, [r8, #4]
   15434:	b	155e8 <__assert_fail@plt+0x47f4>
   15438:	mov	r0, r8
   1543c:	bl	13be8 <__assert_fail@plt+0x2df4>
   15440:	cmp	r0, #0
   15444:	beq	15780 <__assert_fail@plt+0x498c>
   15448:	bl	10cf8 <__errno_location@plt>
   1544c:	ldr	r3, [r8, #48]	; 0x30
   15450:	ldr	r2, [r0]
   15454:	orr	r0, r3, #8192	; 0x2000
   15458:	ldrh	r3, [r6, #56]	; 0x38
   1545c:	str	r2, [r6, #32]
   15460:	str	r0, [r8, #48]	; 0x30
   15464:	cmp	r3, #2
   15468:	bne	15794 <__assert_fail@plt+0x49a0>
   1546c:	mov	r4, #0
   15470:	mov	r0, r4
   15474:	add	sp, sp, #8
   15478:	ldrd	r4, [sp]
   1547c:	ldrd	r6, [sp, #8]
   15480:	ldr	r8, [sp, #16]
   15484:	add	sp, sp, #20
   15488:	pop	{pc}		; (ldr pc, [sp], #4)
   1548c:	cmp	r2, #4
   15490:	bne	153a0 <__assert_fail@plt+0x45ac>
   15494:	ldrh	r3, [r4, #58]	; 0x3a
   15498:	tst	r3, #2
   1549c:	bne	1587c <__assert_fail@plt+0x4a88>
   154a0:	ldr	r5, [r8, #4]
   154a4:	cmp	r5, #0
   154a8:	bne	154e0 <__assert_fail@plt+0x46ec>
   154ac:	mov	r3, #6
   154b0:	mov	r2, r4
   154b4:	ldr	r0, [r8, #48]	; 0x30
   154b8:	add	r1, r8, #56	; 0x38
   154bc:	strh	r3, [r4, #56]	; 0x38
   154c0:	bl	13b1c <__assert_fail@plt+0x2d28>
   154c4:	b	15470 <__assert_fail@plt+0x467c>
   154c8:	bl	10ddc <closedir@plt>
   154cc:	mov	r0, r5
   154d0:	bl	13598 <__assert_fail@plt+0x27a4>
   154d4:	cmp	r6, #0
   154d8:	beq	15500 <__assert_fail@plt+0x470c>
   154dc:	mov	r5, r6
   154e0:	ldr	r6, [r5, #8]
   154e4:	ldr	r0, [r5, #12]
   154e8:	cmp	r0, #0
   154ec:	bne	154c8 <__assert_fail@plt+0x46d4>
   154f0:	mov	r0, r5
   154f4:	bl	13598 <__assert_fail@plt+0x27a4>
   154f8:	cmp	r6, #0
   154fc:	bne	154dc <__assert_fail@plt+0x46e8>
   15500:	mov	r3, #0
   15504:	str	r3, [r8, #4]
   15508:	b	154ac <__assert_fail@plt+0x46b8>
   1550c:	mov	r0, r8
   15510:	bl	13be8 <__assert_fail@plt+0x2df4>
   15514:	ldr	r3, [r8, #48]	; 0x30
   15518:	cmp	r0, #0
   1551c:	orrne	r3, r3, #8192	; 0x2000
   15520:	strne	r3, [r8, #48]	; 0x30
   15524:	bne	15470 <__assert_fail@plt+0x467c>
   15528:	movw	r2, #258	; 0x102
   1552c:	ldr	r0, [r8, #56]	; 0x38
   15530:	tst	r2, r3
   15534:	beq	15874 <__assert_fail@plt+0x4a80>
   15538:	cmp	r0, #0
   1553c:	beq	15544 <__assert_fail@plt+0x4750>
   15540:	bl	17cdc <__assert_fail@plt+0x6ee8>
   15544:	ldr	r2, [r5, #52]	; 0x34
   15548:	add	r4, r5, #168	; 0xa8
   1554c:	mov	r1, r4
   15550:	ldr	r0, [r8, #24]
   15554:	str	r2, [r5, #40]	; 0x28
   15558:	add	r2, r2, #1
   1555c:	bl	10bd8 <memmove@plt>
   15560:	mov	r0, r4
   15564:	mov	r1, #47	; 0x2f
   15568:	bl	10d28 <strrchr@plt>
   1556c:	cmp	r0, #0
   15570:	beq	155a0 <__assert_fail@plt+0x47ac>
   15574:	cmp	r4, r0
   15578:	beq	1580c <__assert_fail@plt+0x4a18>
   1557c:	add	r6, r0, #1
   15580:	mov	r0, r6
   15584:	bl	10cc8 <strlen@plt>
   15588:	mov	r7, r0
   1558c:	mov	r1, r6
   15590:	mov	r0, r4
   15594:	add	r2, r7, #1
   15598:	bl	10bd8 <memmove@plt>
   1559c:	str	r7, [r5, #52]	; 0x34
   155a0:	ldr	r3, [r8, #24]
   155a4:	movw	r1, #258	; 0x102
   155a8:	ldr	r2, [r8, #48]	; 0x30
   155ac:	str	r3, [r5, #24]
   155b0:	str	r3, [r5, #28]
   155b4:	tst	r1, r2
   155b8:	bne	157cc <__assert_fail@plt+0x49d8>
   155bc:	mov	r0, #32
   155c0:	bl	18a50 <__assert_fail@plt+0x7c5c>
   155c4:	cmp	r0, #0
   155c8:	str	r0, [r8, #56]	; 0x38
   155cc:	beq	1590c <__assert_fail@plt+0x4b18>
   155d0:	bl	18ae4 <__assert_fail@plt+0x7cf0>
   155d4:	mov	r4, r5
   155d8:	ldrh	r3, [r5, #56]	; 0x38
   155dc:	b	1562c <__assert_fail@plt+0x4838>
   155e0:	cmp	r3, #2
   155e4:	beq	15888 <__assert_fail@plt+0x4a94>
   155e8:	ldr	r0, [r4, #4]
   155ec:	mov	ip, #47	; 0x2f
   155f0:	add	r1, r4, #168	; 0xa8
   155f4:	ldr	r3, [r8, #24]
   155f8:	ldr	lr, [r0, #28]
   155fc:	ldr	r2, [r0, #40]	; 0x28
   15600:	sub	r0, r2, #1
   15604:	ldrb	lr, [lr, r0]
   15608:	cmp	lr, ip
   1560c:	movne	r0, r2
   15610:	strb	ip, [r3, r0]
   15614:	add	r0, r3, r0
   15618:	ldr	r2, [r4, #52]	; 0x34
   1561c:	add	r0, r0, #1
   15620:	add	r2, r2, #1
   15624:	bl	10bd8 <memmove@plt>
   15628:	ldrh	r3, [r4, #56]	; 0x38
   1562c:	cmp	r3, #11
   15630:	str	r4, [r8]
   15634:	beq	156a4 <__assert_fail@plt+0x48b0>
   15638:	cmp	r3, #1
   1563c:	bne	15470 <__assert_fail@plt+0x467c>
   15640:	ldr	r3, [r4, #48]	; 0x30
   15644:	add	r1, r8, #56	; 0x38
   15648:	ldr	r0, [r8, #48]	; 0x30
   1564c:	cmp	r3, #0
   15650:	ldrdeq	r2, [r4, #64]	; 0x40
   15654:	strdeq	r2, [r8, #16]
   15658:	mov	r2, r4
   1565c:	bl	13a48 <__assert_fail@plt+0x2c54>
   15660:	subs	r5, r0, #0
   15664:	bne	15470 <__assert_fail@plt+0x467c>
   15668:	bl	10cf8 <__errno_location@plt>
   1566c:	mov	r3, #12
   15670:	mov	r4, r5
   15674:	str	r3, [r0]
   15678:	b	15470 <__assert_fail@plt+0x467c>
   1567c:	mov	r3, #1
   15680:	mov	r2, r4
   15684:	ldr	r0, [r8, #32]
   15688:	bl	138ec <__assert_fail@plt+0x2af8>
   1568c:	cmp	r0, #1
   15690:	strh	r0, [r4, #56]	; 0x38
   15694:	beq	15930 <__assert_fail@plt+0x4b3c>
   15698:	cmp	r0, #11
   1569c:	str	r4, [r8]
   156a0:	bne	15470 <__assert_fail@plt+0x467c>
   156a4:	ldrd	r2, [r4, #112]	; 0x70
   156a8:	cmp	r3, #0
   156ac:	cmpeq	r2, #2
   156b0:	beq	158b8 <__assert_fail@plt+0x4ac4>
   156b4:	cmp	r3, #0
   156b8:	cmpeq	r2, #1
   156bc:	beq	15470 <__assert_fail@plt+0x467c>
   156c0:	bl	10db8 <abort@plt>
   156c4:	mov	r2, r4
   156c8:	ldr	r0, [r8, #32]
   156cc:	bl	138ec <__assert_fail@plt+0x2af8>
   156d0:	strh	r0, [r4, #56]	; 0x38
   156d4:	b	15470 <__assert_fail@plt+0x467c>
   156d8:	bic	r1, r1, #4096	; 0x1000
   156dc:	str	r1, [r8, #48]	; 0x30
   156e0:	b	156fc <__assert_fail@plt+0x4908>
   156e4:	bl	10ddc <closedir@plt>
   156e8:	mov	r0, r5
   156ec:	bl	13598 <__assert_fail@plt+0x27a4>
   156f0:	cmp	r6, #0
   156f4:	beq	1571c <__assert_fail@plt+0x4928>
   156f8:	mov	r5, r6
   156fc:	ldr	r6, [r5, #8]
   15700:	ldr	r0, [r5, #12]
   15704:	cmp	r0, #0
   15708:	bne	156e4 <__assert_fail@plt+0x48f0>
   1570c:	mov	r0, r5
   15710:	bl	13598 <__assert_fail@plt+0x27a4>
   15714:	cmp	r6, #0
   15718:	bne	156f8 <__assert_fail@plt+0x4904>
   1571c:	mov	r3, #0
   15720:	str	r3, [r8, #4]
   15724:	mov	r1, #3
   15728:	mov	r0, r8
   1572c:	bl	13f54 <__assert_fail@plt+0x3160>
   15730:	cmp	r0, #0
   15734:	str	r0, [r8, #4]
   15738:	movne	r4, r0
   1573c:	bne	1542c <__assert_fail@plt+0x4638>
   15740:	ldr	r0, [r8, #48]	; 0x30
   15744:	tst	r0, #8192	; 0x2000
   15748:	bne	1546c <__assert_fail@plt+0x4678>
   1574c:	ldr	r3, [r4, #32]
   15750:	cmp	r3, #0
   15754:	beq	15768 <__assert_fail@plt+0x4974>
   15758:	ldrh	r3, [r4, #56]	; 0x38
   1575c:	cmp	r3, #4
   15760:	movne	r3, #7
   15764:	strhne	r3, [r4, #56]	; 0x38
   15768:	add	r1, r8, #56	; 0x38
   1576c:	mov	r2, r4
   15770:	bl	13b1c <__assert_fail@plt+0x2d28>
   15774:	b	15470 <__assert_fail@plt+0x467c>
   15778:	tst	r3, #1
   1577c:	beq	158d8 <__assert_fail@plt+0x4ae4>
   15780:	ldrh	r3, [r6, #56]	; 0x38
   15784:	ldr	r0, [r8, #48]	; 0x30
   15788:	cmp	r3, #2
   1578c:	beq	157bc <__assert_fail@plt+0x49c8>
   15790:	ldr	r2, [r6, #32]
   15794:	cmp	r2, #0
   15798:	movne	r3, #7
   1579c:	strhne	r3, [r6, #56]	; 0x38
   157a0:	bne	157bc <__assert_fail@plt+0x49c8>
   157a4:	mov	r3, #6
   157a8:	mov	r2, r6
   157ac:	add	r1, r8, #56	; 0x38
   157b0:	strh	r3, [r6, #56]	; 0x38
   157b4:	bl	13b1c <__assert_fail@plt+0x2d28>
   157b8:	ldr	r0, [r8, #48]	; 0x30
   157bc:	tst	r0, #8192	; 0x2000
   157c0:	moveq	r4, r6
   157c4:	beq	15470 <__assert_fail@plt+0x467c>
   157c8:	b	1546c <__assert_fail@plt+0x4678>
   157cc:	movw	r1, #13720	; 0x3598
   157d0:	movt	r1, #1
   157d4:	movw	r3, #13816	; 0x35f8
   157d8:	movt	r3, #1
   157dc:	movw	r2, #13880	; 0x3638
   157e0:	movt	r2, #1
   157e4:	str	r1, [sp]
   157e8:	mov	r0, #31
   157ec:	mov	r1, #0
   157f0:	bl	1799c <__assert_fail@plt+0x6ba8>
   157f4:	mov	r4, r5
   157f8:	ldrh	r3, [r5, #56]	; 0x38
   157fc:	str	r0, [r8, #56]	; 0x38
   15800:	b	1562c <__assert_fail@plt+0x4838>
   15804:	ldr	r4, [r8, #4]
   15808:	b	1542c <__assert_fail@plt+0x4638>
   1580c:	ldrb	r3, [r4, #1]
   15810:	cmp	r3, #0
   15814:	beq	155a0 <__assert_fail@plt+0x47ac>
   15818:	b	1557c <__assert_fail@plt+0x4788>
   1581c:	mov	r0, r6
   15820:	bl	13598 <__assert_fail@plt+0x27a4>
   15824:	bl	10cf8 <__errno_location@plt>
   15828:	mov	r3, #0
   1582c:	mov	r4, r3
   15830:	str	r3, [r0]
   15834:	str	r3, [r8]
   15838:	b	15470 <__assert_fail@plt+0x467c>
   1583c:	ldr	r2, [r8, #24]
   15840:	mov	r1, #3
   15844:	mov	r0, r8
   15848:	ldr	r3, [r6, #40]	; 0x28
   1584c:	str	r6, [r8]
   15850:	strb	r5, [r2, r3]
   15854:	bl	13f54 <__assert_fail@plt+0x3160>
   15858:	subs	r3, r0, #0
   1585c:	bne	158fc <__assert_fail@plt+0x4b08>
   15860:	ldr	r3, [r8, #48]	; 0x30
   15864:	tst	r3, #8192	; 0x2000
   15868:	bne	1546c <__assert_fail@plt+0x4678>
   1586c:	ldr	r6, [r4, #4]
   15870:	b	152e0 <__assert_fail@plt+0x44ec>
   15874:	bl	13598 <__assert_fail@plt+0x27a4>
   15878:	b	15544 <__assert_fail@plt+0x4750>
   1587c:	ldr	r0, [r4, #36]	; 0x24
   15880:	bl	10dc4 <close@plt>
   15884:	b	154a0 <__assert_fail@plt+0x46ac>
   15888:	mov	r3, #1
   1588c:	mov	r2, r5
   15890:	ldr	r0, [r8, #32]
   15894:	ldr	r1, [r8, #48]	; 0x30
   15898:	bl	138ec <__assert_fail@plt+0x2af8>
   1589c:	cmp	r0, #1
   158a0:	strh	r0, [r5, #56]	; 0x38
   158a4:	beq	15988 <__assert_fail@plt+0x4b94>
   158a8:	mov	r3, #3
   158ac:	mov	r4, r5
   158b0:	strh	r3, [r5, #60]	; 0x3c
   158b4:	b	155e8 <__assert_fail@plt+0x47f4>
   158b8:	mov	r3, #0
   158bc:	mov	r2, r4
   158c0:	ldr	r0, [r8, #32]
   158c4:	ldr	r1, [r8, #48]	; 0x30
   158c8:	bl	138ec <__assert_fail@plt+0x2af8>
   158cc:	mov	r3, r0
   158d0:	strh	r0, [r4, #56]	; 0x38
   158d4:	b	15638 <__assert_fail@plt+0x4844>
   158d8:	movw	r3, #37488	; 0x9270
   158dc:	movt	r3, #1
   158e0:	ldr	r1, [r6, #4]
   158e4:	mvn	r2, #0
   158e8:	mov	r0, r8
   158ec:	bl	13c94 <__assert_fail@plt+0x2ea0>
   158f0:	cmp	r0, #0
   158f4:	beq	15780 <__assert_fail@plt+0x498c>
   158f8:	b	15448 <__assert_fail@plt+0x4654>
   158fc:	mov	r0, r4
   15900:	mov	r4, r3
   15904:	bl	13598 <__assert_fail@plt+0x27a4>
   15908:	b	155e8 <__assert_fail@plt+0x47f4>
   1590c:	ldrh	r3, [r5, #56]	; 0x38
   15910:	mov	r4, r5
   15914:	b	1562c <__assert_fail@plt+0x4838>
   15918:	mov	r0, r4
   1591c:	bl	10d7c <fchdir@plt>
   15920:	cmp	r0, #0
   15924:	bne	159d8 <__assert_fail@plt+0x4be4>
   15928:	ldr	r4, [r6, #36]	; 0x24
   1592c:	b	15380 <__assert_fail@plt+0x458c>
   15930:	ldr	r3, [r8, #48]	; 0x30
   15934:	tst	r3, #4
   15938:	strne	r4, [r8]
   1593c:	bne	15640 <__assert_fail@plt+0x484c>
   15940:	lsl	r2, r3, #11
   15944:	tst	r3, #512	; 0x200
   15948:	and	r2, r2, #32768	; 0x8000
   1594c:	orr	r2, r2, #540672	; 0x84000
   15950:	orr	r2, r2, #2304	; 0x900
   15954:	beq	159f8 <__assert_fail@plt+0x4c04>
   15958:	movw	r1, #37492	; 0x9274
   1595c:	movt	r1, #1
   15960:	ldr	r0, [r8, #32]
   15964:	bl	188dc <__assert_fail@plt+0x7ae8>
   15968:	cmp	r0, #0
   1596c:	str	r0, [r4, #36]	; 0x24
   15970:	blt	15a0c <__assert_fail@plt+0x4c18>
   15974:	ldrh	r2, [r4, #58]	; 0x3a
   15978:	ldrh	r3, [r4, #56]	; 0x38
   1597c:	orr	r2, r2, #2
   15980:	strh	r2, [r4, #58]	; 0x3a
   15984:	b	1562c <__assert_fail@plt+0x4838>
   15988:	ldr	r3, [r8, #48]	; 0x30
   1598c:	tst	r3, #4
   15990:	bne	158a8 <__assert_fail@plt+0x4ab4>
   15994:	lsl	r2, r3, #11
   15998:	tst	r3, #512	; 0x200
   1599c:	and	r2, r2, #32768	; 0x8000
   159a0:	orr	r2, r2, #540672	; 0x84000
   159a4:	orr	r2, r2, #2304	; 0x900
   159a8:	beq	15a28 <__assert_fail@plt+0x4c34>
   159ac:	movw	r1, #37492	; 0x9274
   159b0:	movt	r1, #1
   159b4:	ldr	r0, [r8, #32]
   159b8:	bl	188dc <__assert_fail@plt+0x7ae8>
   159bc:	cmp	r0, #0
   159c0:	str	r0, [r5, #36]	; 0x24
   159c4:	blt	15a3c <__assert_fail@plt+0x4c48>
   159c8:	ldrh	r3, [r5, #58]	; 0x3a
   159cc:	orr	r3, r3, #2
   159d0:	strh	r3, [r5, #58]	; 0x3a
   159d4:	b	158a8 <__assert_fail@plt+0x4ab4>
   159d8:	bl	10cf8 <__errno_location@plt>
   159dc:	ldr	r3, [r8, #48]	; 0x30
   159e0:	ldr	r2, [r0]
   159e4:	ldr	r4, [r6, #36]	; 0x24
   159e8:	orr	r3, r3, #8192	; 0x2000
   159ec:	str	r2, [r6, #32]
   159f0:	str	r3, [r8, #48]	; 0x30
   159f4:	b	15380 <__assert_fail@plt+0x458c>
   159f8:	mov	r1, r2
   159fc:	movw	r0, #37492	; 0x9274
   15a00:	movt	r0, #1
   15a04:	bl	18dec <__assert_fail@plt+0x7ff8>
   15a08:	b	15968 <__assert_fail@plt+0x4b74>
   15a0c:	bl	10cf8 <__errno_location@plt>
   15a10:	ldr	r3, [r0]
   15a14:	mov	r2, #7
   15a18:	str	r3, [r4, #32]
   15a1c:	strh	r2, [r4, #56]	; 0x38
   15a20:	str	r4, [r8]
   15a24:	b	15470 <__assert_fail@plt+0x467c>
   15a28:	mov	r1, r2
   15a2c:	movw	r0, #37492	; 0x9274
   15a30:	movt	r0, #1
   15a34:	bl	18dec <__assert_fail@plt+0x7ff8>
   15a38:	b	159bc <__assert_fail@plt+0x4bc8>
   15a3c:	bl	10cf8 <__errno_location@plt>
   15a40:	ldr	r3, [r0]
   15a44:	mov	r2, #7
   15a48:	str	r3, [r5, #32]
   15a4c:	strh	r2, [r5, #56]	; 0x38
   15a50:	b	158a8 <__assert_fail@plt+0x4ab4>
   15a54:	cmp	r2, #4
   15a58:	bhi	15a6c <__assert_fail@plt+0x4c78>
   15a5c:	mov	r3, #0
   15a60:	strh	r2, [r1, #60]	; 0x3c
   15a64:	mov	r0, r3
   15a68:	bx	lr
   15a6c:	str	r4, [sp, #-8]!
   15a70:	str	lr, [sp, #4]
   15a74:	bl	10cf8 <__errno_location@plt>
   15a78:	mov	r2, #22
   15a7c:	mov	r3, #1
   15a80:	ldr	r4, [sp]
   15a84:	add	sp, sp, #4
   15a88:	str	r2, [r0]
   15a8c:	mov	r0, r3
   15a90:	pop	{pc}		; (ldr pc, [sp], #4)
   15a94:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15a98:	mov	r5, r0
   15a9c:	strd	r6, [sp, #8]
   15aa0:	strd	r8, [sp, #16]
   15aa4:	mov	r8, r1
   15aa8:	str	sl, [sp, #24]
   15aac:	str	lr, [sp, #28]
   15ab0:	bl	10cf8 <__errno_location@plt>
   15ab4:	bics	r2, r8, #4096	; 0x1000
   15ab8:	mov	r6, r0
   15abc:	movne	r3, #22
   15ac0:	movne	r0, #0
   15ac4:	strne	r3, [r6]
   15ac8:	bne	15b90 <__assert_fail@plt+0x4d9c>
   15acc:	ldr	r9, [r5]
   15ad0:	str	r2, [r6]
   15ad4:	ldr	r3, [r5, #48]	; 0x30
   15ad8:	ands	r0, r3, #8192	; 0x2000
   15adc:	bne	15c40 <__assert_fail@plt+0x4e4c>
   15ae0:	ldrh	r3, [r9, #56]	; 0x38
   15ae4:	cmp	r3, #9
   15ae8:	beq	15c48 <__assert_fail@plt+0x4e54>
   15aec:	cmp	r3, #1
   15af0:	bne	15b90 <__assert_fail@plt+0x4d9c>
   15af4:	ldr	r4, [r5, #4]
   15af8:	cmp	r4, #0
   15afc:	bne	15b1c <__assert_fail@plt+0x4d28>
   15b00:	b	15b3c <__assert_fail@plt+0x4d48>
   15b04:	bl	10ddc <closedir@plt>
   15b08:	mov	r0, r4
   15b0c:	bl	13598 <__assert_fail@plt+0x27a4>
   15b10:	cmp	r7, #0
   15b14:	beq	15b3c <__assert_fail@plt+0x4d48>
   15b18:	mov	r4, r7
   15b1c:	ldr	r7, [r4, #8]
   15b20:	ldr	r0, [r4, #12]
   15b24:	cmp	r0, #0
   15b28:	bne	15b04 <__assert_fail@plt+0x4d10>
   15b2c:	mov	r0, r4
   15b30:	bl	13598 <__assert_fail@plt+0x27a4>
   15b34:	cmp	r7, #0
   15b38:	bne	15b18 <__assert_fail@plt+0x4d24>
   15b3c:	cmp	r8, #4096	; 0x1000
   15b40:	movne	r4, #1
   15b44:	bne	15b58 <__assert_fail@plt+0x4d64>
   15b48:	ldr	r3, [r5, #48]	; 0x30
   15b4c:	mov	r4, #2
   15b50:	orr	r3, r3, #4096	; 0x1000
   15b54:	str	r3, [r5, #48]	; 0x30
   15b58:	ldr	r3, [r9, #48]	; 0x30
   15b5c:	cmp	r3, #0
   15b60:	bne	15b80 <__assert_fail@plt+0x4d8c>
   15b64:	ldr	r3, [r9, #24]
   15b68:	ldrb	r3, [r3]
   15b6c:	cmp	r3, #47	; 0x2f
   15b70:	beq	15b80 <__assert_fail@plt+0x4d8c>
   15b74:	ldr	r3, [r5, #48]	; 0x30
   15b78:	tst	r3, #4
   15b7c:	beq	15ba8 <__assert_fail@plt+0x4db4>
   15b80:	mov	r1, r4
   15b84:	mov	r0, r5
   15b88:	bl	13f54 <__assert_fail@plt+0x3160>
   15b8c:	str	r0, [r5, #4]
   15b90:	ldrd	r4, [sp]
   15b94:	ldrd	r6, [sp, #8]
   15b98:	ldrd	r8, [sp, #16]
   15b9c:	ldr	sl, [sp, #24]
   15ba0:	add	sp, sp, #28
   15ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ba8:	lsl	r2, r3, #11
   15bac:	tst	r3, #512	; 0x200
   15bb0:	and	r2, r2, #32768	; 0x8000
   15bb4:	orr	r2, r2, #540672	; 0x84000
   15bb8:	orr	r2, r2, #2304	; 0x900
   15bbc:	beq	15c50 <__assert_fail@plt+0x4e5c>
   15bc0:	movw	r1, #37492	; 0x9274
   15bc4:	movt	r1, #1
   15bc8:	ldr	r0, [r5, #32]
   15bcc:	bl	188dc <__assert_fail@plt+0x7ae8>
   15bd0:	mov	r7, r0
   15bd4:	cmp	r7, #0
   15bd8:	movlt	r3, #0
   15bdc:	movlt	r0, r3
   15be0:	strlt	r3, [r5, #4]
   15be4:	blt	15b90 <__assert_fail@plt+0x4d9c>
   15be8:	mov	r1, r4
   15bec:	mov	r0, r5
   15bf0:	bl	13f54 <__assert_fail@plt+0x3160>
   15bf4:	ldr	r3, [r5, #48]	; 0x30
   15bf8:	str	r0, [r5, #4]
   15bfc:	ands	r4, r3, #512	; 0x200
   15c00:	beq	15c68 <__assert_fail@plt+0x4e74>
   15c04:	ldr	r1, [r5, #32]
   15c08:	sub	r3, r7, r1
   15c0c:	cmn	r1, #100	; 0x64
   15c10:	clz	r3, r3
   15c14:	lsr	r3, r3, #5
   15c18:	moveq	r3, #0
   15c1c:	cmp	r3, #0
   15c20:	bne	15ca0 <__assert_fail@plt+0x4eac>
   15c24:	add	r0, r5, #60	; 0x3c
   15c28:	bl	1879c <__assert_fail@plt+0x79a8>
   15c2c:	cmp	r0, #0
   15c30:	blt	15c38 <__assert_fail@plt+0x4e44>
   15c34:	bl	10dc4 <close@plt>
   15c38:	str	r7, [r5, #32]
   15c3c:	b	15c80 <__assert_fail@plt+0x4e8c>
   15c40:	mov	r0, r2
   15c44:	b	15b90 <__assert_fail@plt+0x4d9c>
   15c48:	ldr	r0, [r9, #8]
   15c4c:	b	15b90 <__assert_fail@plt+0x4d9c>
   15c50:	mov	r1, r2
   15c54:	movw	r0, #37492	; 0x9274
   15c58:	movt	r0, #1
   15c5c:	bl	18dec <__assert_fail@plt+0x7ff8>
   15c60:	mov	r7, r0
   15c64:	b	15bd4 <__assert_fail@plt+0x4de0>
   15c68:	mov	r0, r7
   15c6c:	bl	10d7c <fchdir@plt>
   15c70:	cmp	r0, #0
   15c74:	bne	15c88 <__assert_fail@plt+0x4e94>
   15c78:	mov	r0, r7
   15c7c:	bl	10dc4 <close@plt>
   15c80:	ldr	r0, [r5, #4]
   15c84:	b	15b90 <__assert_fail@plt+0x4d9c>
   15c88:	ldr	r5, [r6]
   15c8c:	mov	r0, r7
   15c90:	bl	10dc4 <close@plt>
   15c94:	mov	r0, r4
   15c98:	str	r5, [r6]
   15c9c:	b	15b90 <__assert_fail@plt+0x4d9c>
   15ca0:	bl	10db8 <abort@plt>
   15ca4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ca8:	ldr	r2, [r1]
   15cac:	ldr	ip, [r1, #32]
   15cb0:	strd	r6, [sp, #8]
   15cb4:	strd	r8, [sp, #16]
   15cb8:	strd	sl, [sp, #24]
   15cbc:	str	lr, [sp, #32]
   15cc0:	sub	sp, sp, #36	; 0x24
   15cc4:	str	r2, [sp, #24]
   15cc8:	str	r1, [sp, #28]
   15ccc:	ldr	r1, [r1, #28]
   15cd0:	cmp	r1, ip
   15cd4:	cmplt	ip, r2
   15cd8:	str	r1, [sp, #20]
   15cdc:	bge	15ddc <__assert_fail@plt+0x4fe8>
   15ce0:	mov	r3, r1
   15ce4:	lsl	r1, ip, #2
   15ce8:	mov	lr, r2
   15cec:	mov	r2, r1
   15cf0:	add	r2, r2, #8
   15cf4:	str	r1, [sp, #8]
   15cf8:	add	r1, r0, r1
   15cfc:	str	r1, [sp, #4]
   15d00:	str	r2, [sp, #12]
   15d04:	sub	r2, r1, #8
   15d08:	str	r2, [sp, #16]
   15d0c:	sub	r1, lr, ip
   15d10:	sub	r8, ip, r3
   15d14:	cmp	r1, r8
   15d18:	ble	15e14 <__assert_fail@plt+0x5020>
   15d1c:	lsl	r2, r3, #2
   15d20:	sub	lr, lr, r8
   15d24:	sub	r5, r8, #1
   15d28:	add	r1, lr, #2
   15d2c:	lsl	r6, lr, #2
   15d30:	cmp	r2, r1, lsl #2
   15d34:	add	r7, r2, #8
   15d38:	add	r2, r0, r2
   15d3c:	add	r1, r0, r6
   15d40:	movge	r4, #1
   15d44:	movlt	r4, #0
   15d48:	cmp	r6, r7
   15d4c:	orrge	r4, r4, #1
   15d50:	orr	r9, r1, r2
   15d54:	cmp	r5, #3
   15d58:	movls	r4, #0
   15d5c:	andhi	r4, r4, #1
   15d60:	tst	r9, #7
   15d64:	movne	r4, #0
   15d68:	cmp	r4, #0
   15d6c:	beq	15ee8 <__assert_fail@plt+0x50f4>
   15d70:	lsr	fp, r8, #1
   15d74:	sub	r2, r2, #8
   15d78:	sub	sl, r1, #8
   15d7c:	mov	r9, r2
   15d80:	add	fp, r1, fp, lsl #3
   15d84:	ldrd	r4, [r2, #8]!
   15d88:	ldrd	r6, [sl, #8]!
   15d8c:	strd	r6, [r9, #8]!
   15d90:	strd	r4, [r1], #8
   15d94:	cmp	r1, fp
   15d98:	bne	15d84 <__assert_fail@plt+0x4f90>
   15d9c:	bic	r2, r8, #1
   15da0:	cmp	r8, r2
   15da4:	beq	15dc0 <__assert_fail@plt+0x4fcc>
   15da8:	add	r1, r3, r2
   15dac:	add	r2, lr, r2
   15db0:	ldr	r4, [r0, r1, lsl #2]
   15db4:	ldr	r5, [r0, r2, lsl #2]
   15db8:	str	r5, [r0, r1, lsl #2]
   15dbc:	str	r4, [r0, r2, lsl #2]
   15dc0:	cmp	lr, ip
   15dc4:	movle	r2, #0
   15dc8:	movgt	r2, #1
   15dcc:	cmp	r3, ip
   15dd0:	movge	r2, #0
   15dd4:	cmp	r2, #0
   15dd8:	bne	15d0c <__assert_fail@plt+0x4f18>
   15ddc:	ldr	r3, [sp, #24]
   15de0:	ldr	r2, [sp, #28]
   15de4:	sub	ip, r3, ip
   15de8:	str	r3, [r2, #32]
   15dec:	ldr	r3, [sp, #20]
   15df0:	add	ip, ip, r3
   15df4:	str	ip, [r2, #28]
   15df8:	add	sp, sp, #36	; 0x24
   15dfc:	ldrd	r4, [sp]
   15e00:	ldrd	r6, [sp, #8]
   15e04:	ldrd	r8, [sp, #16]
   15e08:	ldrd	sl, [sp, #24]
   15e0c:	add	sp, sp, #32
   15e10:	pop	{pc}		; (ldr pc, [sp], #4)
   15e14:	ldr	r4, [sp, #8]
   15e18:	lsl	r5, r3, #2
   15e1c:	sub	r7, r1, #1
   15e20:	ldr	r8, [sp, #12]
   15e24:	mov	r6, r5
   15e28:	add	r5, r5, #8
   15e2c:	add	r2, r0, r6
   15e30:	cmp	r8, r6
   15e34:	cmpgt	r5, r4
   15e38:	ldr	r8, [sp, #4]
   15e3c:	movle	r5, #1
   15e40:	movgt	r5, #0
   15e44:	cmp	r7, #3
   15e48:	movls	r4, #0
   15e4c:	andhi	r4, r5, #1
   15e50:	orr	r6, r2, r8
   15e54:	tst	r6, #7
   15e58:	movne	r4, #0
   15e5c:	cmp	r4, #0
   15e60:	beq	15ec0 <__assert_fail@plt+0x50cc>
   15e64:	lsr	fp, r1, #1
   15e68:	ldr	sl, [sp, #16]
   15e6c:	sub	r2, r2, #8
   15e70:	mov	r9, r2
   15e74:	add	fp, r8, fp, lsl #3
   15e78:	ldrd	r4, [r2, #8]!
   15e7c:	ldrd	r6, [sl, #8]!
   15e80:	strd	r6, [r9, #8]!
   15e84:	strd	r4, [r8], #8
   15e88:	cmp	r8, fp
   15e8c:	bne	15e78 <__assert_fail@plt+0x5084>
   15e90:	bic	r2, r1, #1
   15e94:	cmp	r1, r2
   15e98:	addeq	r3, r1, r3
   15e9c:	beq	15dc0 <__assert_fail@plt+0x4fcc>
   15ea0:	add	r4, r3, r2
   15ea4:	add	r2, ip, r2
   15ea8:	ldr	r5, [r0, r4, lsl #2]
   15eac:	add	r3, r1, r3
   15eb0:	ldr	r6, [r0, r2, lsl #2]
   15eb4:	str	r6, [r0, r4, lsl #2]
   15eb8:	str	r5, [r0, r2, lsl #2]
   15ebc:	b	15dc0 <__assert_fail@plt+0x4fcc>
   15ec0:	add	r3, r1, r3
   15ec4:	ldr	r1, [sp, #4]
   15ec8:	add	r6, r0, r3, lsl #2
   15ecc:	ldr	r5, [r1]
   15ed0:	ldr	r4, [r2]
   15ed4:	str	r5, [r2], #4
   15ed8:	cmp	r2, r6
   15edc:	str	r4, [r1], #4
   15ee0:	bne	15ecc <__assert_fail@plt+0x50d8>
   15ee4:	b	15dc0 <__assert_fail@plt+0x4fcc>
   15ee8:	add	r8, r3, r8
   15eec:	add	r8, r0, r8, lsl #2
   15ef0:	ldr	r5, [r1]
   15ef4:	ldr	r4, [r2]
   15ef8:	str	r5, [r2], #4
   15efc:	cmp	r8, r2
   15f00:	str	r4, [r1], #4
   15f04:	bne	15ef0 <__assert_fail@plt+0x50fc>
   15f08:	b	15dc0 <__assert_fail@plt+0x4fcc>
   15f0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15f10:	strd	r6, [sp, #8]
   15f14:	strd	r8, [sp, #16]
   15f18:	strd	sl, [sp, #24]
   15f1c:	str	lr, [sp, #32]
   15f20:	sub	sp, sp, #52	; 0x34
   15f24:	str	r3, [sp, #8]
   15f28:	ldr	r3, [sp, #96]	; 0x60
   15f2c:	str	r1, [sp, #20]
   15f30:	str	r2, [sp, #28]
   15f34:	str	r0, [sp, #32]
   15f38:	ldr	r9, [r3, #20]
   15f3c:	ldrb	r5, [r9]
   15f40:	mov	r8, r9
   15f44:	str	r9, [sp, #24]
   15f48:	cmp	r5, #61	; 0x3d
   15f4c:	cmpne	r5, #0
   15f50:	movne	r5, #1
   15f54:	moveq	r5, #0
   15f58:	beq	15f70 <__assert_fail@plt+0x517c>
   15f5c:	ldrb	r3, [r8, #1]!
   15f60:	cmp	r3, #0
   15f64:	cmpne	r3, #61	; 0x3d
   15f68:	bne	15f5c <__assert_fail@plt+0x5168>
   15f6c:	sub	r5, r8, r9
   15f70:	ldr	r3, [sp, #8]
   15f74:	ldr	r3, [r3]
   15f78:	cmp	r3, #0
   15f7c:	str	r3, [sp, #12]
   15f80:	beq	16174 <__assert_fail@plt+0x5380>
   15f84:	ldr	fp, [sp, #8]
   15f88:	mov	r4, r3
   15f8c:	mov	r6, #0
   15f90:	str	fp, [sp, #16]
   15f94:	b	15f9c <__assert_fail@plt+0x51a8>
   15f98:	mov	r6, r7
   15f9c:	mov	r2, r5
   15fa0:	mov	r1, r9
   15fa4:	mov	r0, r4
   15fa8:	add	r7, r6, #1
   15fac:	bl	10dac <strncmp@plt>
   15fb0:	cmp	r0, #0
   15fb4:	mov	sl, fp
   15fb8:	mov	r0, r4
   15fbc:	bne	15fcc <__assert_fail@plt+0x51d8>
   15fc0:	bl	10cc8 <strlen@plt>
   15fc4:	cmp	r0, r5
   15fc8:	beq	160ec <__assert_fail@plt+0x52f8>
   15fcc:	ldr	r4, [fp, #16]!
   15fd0:	cmp	r4, #0
   15fd4:	bne	15f98 <__assert_fail@plt+0x51a4>
   15fd8:	ldr	r3, [sp, #100]	; 0x64
   15fdc:	cmp	r3, #0
   15fe0:	ldr	r3, [sp, #92]	; 0x5c
   15fe4:	beq	16080 <__assert_fail@plt+0x528c>
   15fe8:	cmp	r3, #0
   15fec:	bne	161ec <__assert_fail@plt+0x53f8>
   15ff0:	ldr	r0, [sp, #12]
   15ff4:	mov	r9, r3
   15ff8:	mov	sl, r3
   15ffc:	mov	fp, #1
   16000:	str	r3, [sp, #40]	; 0x28
   16004:	ldr	r1, [sp, #24]
   16008:	str	r7, [sp, #24]
   1600c:	mov	r7, r5
   16010:	ldr	r5, [sp, #16]
   16014:	str	r6, [sp, #16]
   16018:	ldr	r6, [sp, #96]	; 0x60
   1601c:	str	r3, [sp, #44]	; 0x2c
   16020:	mvn	r3, #0
   16024:	str	r3, [sp, #36]	; 0x24
   16028:	mov	r2, r7
   1602c:	bl	10dac <strncmp@plt>
   16030:	cmp	r0, #0
   16034:	bne	16068 <__assert_fail@plt+0x5274>
   16038:	cmp	sl, #0
   1603c:	beq	163d0 <__assert_fail@plt+0x55dc>
   16040:	ldr	r2, [r5, #4]
   16044:	ldr	r1, [sl, #4]
   16048:	cmp	r1, r2
   1604c:	beq	164f0 <__assert_fail@plt+0x56fc>
   16050:	ldr	r3, [sp, #40]	; 0x28
   16054:	cmp	r3, #0
   16058:	bne	16068 <__assert_fail@plt+0x5274>
   1605c:	cmp	r4, #0
   16060:	beq	16468 <__assert_fail@plt+0x5674>
   16064:	strb	fp, [r4, r9]
   16068:	ldr	r0, [r5, #16]!
   1606c:	add	r9, r9, #1
   16070:	cmp	r0, #0
   16074:	beq	16300 <__assert_fail@plt+0x550c>
   16078:	ldr	r1, [r6, #20]
   1607c:	b	16028 <__assert_fail@plt+0x5234>
   16080:	cmp	r3, #0
   16084:	beq	16264 <__assert_fail@plt+0x5470>
   16088:	ldr	r0, [sp, #12]
   1608c:	mvn	r3, #0
   16090:	ldr	r6, [sp, #100]	; 0x64
   16094:	str	r3, [sp, #36]	; 0x24
   16098:	ldr	sl, [sp, #16]
   1609c:	mov	r7, r6
   160a0:	mov	r2, r5
   160a4:	mov	r1, r9
   160a8:	bl	10dac <strncmp@plt>
   160ac:	cmp	r0, #0
   160b0:	bne	160c4 <__assert_fail@plt+0x52d0>
   160b4:	cmp	r4, #0
   160b8:	moveq	r4, sl
   160bc:	movne	r6, #1
   160c0:	streq	r7, [sp, #36]	; 0x24
   160c4:	ldr	r0, [sl, #16]!
   160c8:	add	r7, r7, #1
   160cc:	cmp	r0, #0
   160d0:	bne	160a0 <__assert_fail@plt+0x52ac>
   160d4:	cmp	r6, #0
   160d8:	moveq	sl, r4
   160dc:	bne	16368 <__assert_fail@plt+0x5574>
   160e0:	cmp	sl, #0
   160e4:	ldrne	r6, [sp, #36]	; 0x24
   160e8:	beq	16174 <__assert_fail@plt+0x5380>
   160ec:	ldr	r3, [sp, #96]	; 0x60
   160f0:	mov	r2, #0
   160f4:	ldr	r1, [sp, #96]	; 0x60
   160f8:	ldr	r0, [sl, #4]
   160fc:	ldr	r3, [r3]
   16100:	str	r2, [r1, #20]
   16104:	add	r2, r3, #1
   16108:	str	r2, [r1]
   1610c:	ldrb	r1, [r8]
   16110:	cmp	r1, #0
   16114:	bne	1615c <__assert_fail@plt+0x5368>
   16118:	cmp	r0, #1
   1611c:	beq	1639c <__assert_fail@plt+0x55a8>
   16120:	ldr	r3, [sp, #88]	; 0x58
   16124:	cmp	r3, #0
   16128:	strne	r6, [r3]
   1612c:	ldr	r3, [sl, #8]
   16130:	ldr	r0, [sl, #12]
   16134:	cmp	r3, #0
   16138:	strne	r0, [r3]
   1613c:	movne	r0, #0
   16140:	add	sp, sp, #52	; 0x34
   16144:	ldrd	r4, [sp]
   16148:	ldrd	r6, [sp, #8]
   1614c:	ldrd	r8, [sp, #16]
   16150:	ldrd	sl, [sp, #24]
   16154:	add	sp, sp, #32
   16158:	pop	{pc}		; (ldr pc, [sp], #4)
   1615c:	cmp	r0, #0
   16160:	beq	163dc <__assert_fail@plt+0x55e8>
   16164:	ldr	r3, [sp, #96]	; 0x60
   16168:	add	r8, r8, #1
   1616c:	str	r8, [r3, #12]
   16170:	b	16120 <__assert_fail@plt+0x532c>
   16174:	ldr	r3, [sp, #92]	; 0x5c
   16178:	cmp	r3, #0
   1617c:	beq	161b8 <__assert_fail@plt+0x53c4>
   16180:	ldr	r2, [sp, #20]
   16184:	ldr	r3, [sp, #96]	; 0x60
   16188:	ldr	r3, [r3]
   1618c:	ldr	r3, [r2, r3, lsl #2]
   16190:	ldrb	r3, [r3, #1]
   16194:	cmp	r3, #45	; 0x2d
   16198:	beq	161b8 <__assert_fail@plt+0x53c4>
   1619c:	ldr	r0, [sp, #28]
   161a0:	ldr	r3, [sp, #96]	; 0x60
   161a4:	ldr	r3, [r3, #20]
   161a8:	ldrb	r1, [r3]
   161ac:	bl	10cd4 <strchr@plt>
   161b0:	cmp	r0, #0
   161b4:	bne	1642c <__assert_fail@plt+0x5638>
   161b8:	ldr	r3, [sp, #100]	; 0x64
   161bc:	cmp	r3, #0
   161c0:	bne	162cc <__assert_fail@plt+0x54d8>
   161c4:	ldr	r3, [sp, #96]	; 0x60
   161c8:	mov	r2, #0
   161cc:	mov	r0, #63	; 0x3f
   161d0:	ldr	r1, [sp, #96]	; 0x60
   161d4:	ldr	r3, [r3]
   161d8:	str	r2, [r1, #8]
   161dc:	str	r2, [r1, #20]
   161e0:	add	r3, r3, #1
   161e4:	str	r3, [r1]
   161e8:	b	16140 <__assert_fail@plt+0x534c>
   161ec:	ldr	r0, [sp, #12]
   161f0:	mvn	r3, #0
   161f4:	mov	sl, r4
   161f8:	mov	r9, r4
   161fc:	ldr	fp, [sp, #16]
   16200:	str	r3, [sp, #36]	; 0x24
   16204:	ldr	r1, [sp, #24]
   16208:	str	r7, [sp, #24]
   1620c:	ldr	r7, [sp, #96]	; 0x60
   16210:	str	r4, [sp, #40]	; 0x28
   16214:	str	r4, [sp, #44]	; 0x2c
   16218:	mov	r2, r5
   1621c:	bl	10dac <strncmp@plt>
   16220:	cmp	r0, #0
   16224:	bne	1624c <__assert_fail@plt+0x5458>
   16228:	cmp	sl, #0
   1622c:	beq	163c4 <__assert_fail@plt+0x55d0>
   16230:	ldr	r3, [sp, #40]	; 0x28
   16234:	cmp	r3, #0
   16238:	bne	1624c <__assert_fail@plt+0x5458>
   1623c:	cmp	r4, #0
   16240:	beq	16434 <__assert_fail@plt+0x5640>
   16244:	mov	r3, #1
   16248:	strb	r3, [r4, r9]
   1624c:	ldr	r0, [fp, #16]!
   16250:	add	r9, r9, #1
   16254:	cmp	r0, #0
   16258:	beq	16304 <__assert_fail@plt+0x5510>
   1625c:	ldr	r1, [r7, #20]
   16260:	b	16218 <__assert_fail@plt+0x5424>
   16264:	mov	r6, r3
   16268:	mov	r7, r3
   1626c:	ldr	r0, [sp, #12]
   16270:	mvn	r3, #0
   16274:	ldr	sl, [sp, #16]
   16278:	str	r3, [sp, #36]	; 0x24
   1627c:	b	162a4 <__assert_fail@plt+0x54b0>
   16280:	ldr	r2, [r4, #4]
   16284:	ldr	r3, [sl, #4]
   16288:	cmp	r2, r3
   1628c:	beq	164cc <__assert_fail@plt+0x56d8>
   16290:	mov	r6, #1
   16294:	ldr	r0, [sl, #16]!
   16298:	add	r7, r7, #1
   1629c:	cmp	r0, #0
   162a0:	beq	160d4 <__assert_fail@plt+0x52e0>
   162a4:	mov	r2, r5
   162a8:	mov	r1, r9
   162ac:	bl	10dac <strncmp@plt>
   162b0:	cmp	r0, #0
   162b4:	bne	16294 <__assert_fail@plt+0x54a0>
   162b8:	cmp	r4, #0
   162bc:	bne	16280 <__assert_fail@plt+0x548c>
   162c0:	mov	r4, sl
   162c4:	str	r7, [sp, #36]	; 0x24
   162c8:	b	16294 <__assert_fail@plt+0x54a0>
   162cc:	ldr	r3, [sp, #96]	; 0x60
   162d0:	movw	r0, #41232	; 0xa110
   162d4:	movt	r0, #2
   162d8:	movw	r1, #37584	; 0x92d0
   162dc:	movt	r1, #1
   162e0:	ldr	r0, [r0]
   162e4:	ldr	ip, [r3, #20]
   162e8:	ldr	r3, [sp, #20]
   162ec:	ldr	r2, [r3]
   162f0:	str	ip, [sp]
   162f4:	ldr	r3, [sp, #104]	; 0x68
   162f8:	bl	10cec <fprintf@plt>
   162fc:	b	161c4 <__assert_fail@plt+0x53d0>
   16300:	ldr	r6, [sp, #16]
   16304:	ldr	r3, [sp, #40]	; 0x28
   16308:	orrs	r3, r4, r3
   1630c:	beq	160e0 <__assert_fail@plt+0x52ec>
   16310:	ldr	r3, [sp, #40]	; 0x28
   16314:	movw	r5, #41232	; 0xa110
   16318:	movt	r5, #2
   1631c:	ldr	r0, [r5]
   16320:	cmp	r3, #0
   16324:	beq	16514 <__assert_fail@plt+0x5720>
   16328:	ldr	r2, [sp, #20]
   1632c:	movw	r1, #37496	; 0x9278
   16330:	movt	r1, #1
   16334:	ldr	r3, [sp, #96]	; 0x60
   16338:	ldr	r2, [r2]
   1633c:	ldr	ip, [r3, #20]
   16340:	ldr	r3, [sp, #104]	; 0x68
   16344:	str	ip, [sp]
   16348:	bl	10cec <fprintf@plt>
   1634c:	ldr	r3, [sp, #44]	; 0x2c
   16350:	cmp	r3, #0
   16354:	beq	16360 <__assert_fail@plt+0x556c>
   16358:	mov	r0, r4
   1635c:	bl	13598 <__assert_fail@plt+0x27a4>
   16360:	ldr	r3, [sp, #96]	; 0x60
   16364:	ldr	r9, [r3, #20]
   16368:	mov	r0, r9
   1636c:	bl	10cc8 <strlen@plt>
   16370:	ldr	r3, [sp, #96]	; 0x60
   16374:	add	r9, r9, r0
   16378:	mov	r2, #0
   1637c:	mov	r0, #63	; 0x3f
   16380:	ldr	r1, [sp, #96]	; 0x60
   16384:	ldr	r3, [r3]
   16388:	str	r2, [r1, #8]
   1638c:	str	r9, [r1, #20]
   16390:	add	r3, r3, #1
   16394:	str	r3, [r1]
   16398:	b	16140 <__assert_fail@plt+0x534c>
   1639c:	ldr	r1, [sp, #32]
   163a0:	cmp	r2, r1
   163a4:	bge	1649c <__assert_fail@plt+0x56a8>
   163a8:	ldr	r1, [sp, #20]
   163ac:	add	r3, r3, #2
   163b0:	ldr	r2, [r1, r2, lsl #2]
   163b4:	ldr	r1, [sp, #96]	; 0x60
   163b8:	str	r3, [r1]
   163bc:	str	r2, [r1, #12]
   163c0:	b	16120 <__assert_fail@plt+0x532c>
   163c4:	mov	sl, fp
   163c8:	str	r9, [sp, #36]	; 0x24
   163cc:	b	1624c <__assert_fail@plt+0x5458>
   163d0:	mov	sl, r5
   163d4:	str	r9, [sp, #36]	; 0x24
   163d8:	b	16068 <__assert_fail@plt+0x5274>
   163dc:	ldr	r3, [sp, #100]	; 0x64
   163e0:	cmp	r3, #0
   163e4:	bne	163fc <__assert_fail@plt+0x5608>
   163e8:	ldr	r3, [sl, #12]
   163ec:	mov	r0, #63	; 0x3f
   163f0:	ldr	r2, [sp, #96]	; 0x60
   163f4:	str	r3, [r2, #8]
   163f8:	b	16140 <__assert_fail@plt+0x534c>
   163fc:	ldr	ip, [sl]
   16400:	movw	r0, #41232	; 0xa110
   16404:	movt	r0, #2
   16408:	movw	r1, #37616	; 0x92f0
   1640c:	movt	r1, #1
   16410:	ldr	r3, [sp, #20]
   16414:	ldr	r0, [r0]
   16418:	ldr	r2, [r3]
   1641c:	str	ip, [sp]
   16420:	ldr	r3, [sp, #104]	; 0x68
   16424:	bl	10cec <fprintf@plt>
   16428:	b	163e8 <__assert_fail@plt+0x55f4>
   1642c:	mvn	r0, #0
   16430:	b	16140 <__assert_fail@plt+0x534c>
   16434:	ldr	r0, [sp, #24]
   16438:	bl	18a50 <__assert_fail@plt+0x7c5c>
   1643c:	subs	r4, r0, #0
   16440:	beq	165d8 <__assert_fail@plt+0x57e4>
   16444:	ldr	r2, [sp, #24]
   16448:	ldr	r1, [sp, #40]	; 0x28
   1644c:	bl	10d10 <memset@plt>
   16450:	mov	r3, #1
   16454:	mov	r2, #1
   16458:	str	r3, [sp, #44]	; 0x2c
   1645c:	ldr	r3, [sp, #36]	; 0x24
   16460:	strb	r2, [r4, r3]
   16464:	b	16244 <__assert_fail@plt+0x5450>
   16468:	ldr	r0, [sp, #24]
   1646c:	bl	18a50 <__assert_fail@plt+0x7c5c>
   16470:	subs	r4, r0, #0
   16474:	mov	r3, #1
   16478:	streq	r3, [sp, #40]	; 0x28
   1647c:	beq	16068 <__assert_fail@plt+0x5274>
   16480:	ldr	r2, [sp, #24]
   16484:	str	r3, [sp, #44]	; 0x2c
   16488:	ldr	r1, [sp, #40]	; 0x28
   1648c:	bl	10d10 <memset@plt>
   16490:	ldr	r3, [sp, #36]	; 0x24
   16494:	strb	fp, [r4, r3]
   16498:	b	16064 <__assert_fail@plt+0x5270>
   1649c:	ldr	r3, [sp, #100]	; 0x64
   164a0:	cmp	r3, #0
   164a4:	bne	165a8 <__assert_fail@plt+0x57b4>
   164a8:	ldr	r3, [sl, #12]
   164ac:	ldr	r2, [sp, #96]	; 0x60
   164b0:	str	r3, [r2, #8]
   164b4:	ldr	r3, [sp, #28]
   164b8:	ldrb	r3, [r3]
   164bc:	cmp	r3, #58	; 0x3a
   164c0:	moveq	r0, #58	; 0x3a
   164c4:	movne	r0, #63	; 0x3f
   164c8:	b	16140 <__assert_fail@plt+0x534c>
   164cc:	ldr	r2, [r4, #8]
   164d0:	ldr	r3, [sl, #8]
   164d4:	cmp	r2, r3
   164d8:	bne	16290 <__assert_fail@plt+0x549c>
   164dc:	ldr	r2, [r4, #12]
   164e0:	ldr	r3, [sl, #12]
   164e4:	cmp	r2, r3
   164e8:	movne	r6, #1
   164ec:	b	16294 <__assert_fail@plt+0x54a0>
   164f0:	ldr	r2, [r5, #8]
   164f4:	ldr	r1, [sl, #8]
   164f8:	cmp	r1, r2
   164fc:	bne	16050 <__assert_fail@plt+0x525c>
   16500:	ldr	r2, [r5, #12]
   16504:	ldr	r1, [sl, #12]
   16508:	cmp	r1, r2
   1650c:	bne	16050 <__assert_fail@plt+0x525c>
   16510:	b	16068 <__assert_fail@plt+0x5274>
   16514:	bl	10d70 <flockfile@plt>
   16518:	ldr	r2, [sp, #20]
   1651c:	movw	r1, #37528	; 0x9298
   16520:	movt	r1, #1
   16524:	movw	r7, #37576	; 0x92c8
   16528:	movt	r7, #1
   1652c:	ldr	r3, [sp, #96]	; 0x60
   16530:	add	r6, r4, r6
   16534:	sub	r8, r4, #1
   16538:	ldr	r2, [r2]
   1653c:	ldr	r0, [r3, #20]
   16540:	ldr	r3, [sp, #104]	; 0x68
   16544:	str	r0, [sp]
   16548:	ldr	r0, [r5]
   1654c:	bl	10cec <fprintf@plt>
   16550:	ldr	r0, [r5]
   16554:	ldr	sl, [sp, #8]
   16558:	ldr	r9, [sp, #40]	; 0x28
   1655c:	b	1656c <__assert_fail@plt+0x5778>
   16560:	cmp	r6, r8
   16564:	add	r9, r9, #1
   16568:	beq	16590 <__assert_fail@plt+0x579c>
   1656c:	ldrb	r3, [r8, #1]!
   16570:	cmp	r3, #0
   16574:	beq	16560 <__assert_fail@plt+0x576c>
   16578:	mov	r1, r7
   1657c:	ldr	r3, [sl, r9, lsl #4]
   16580:	ldr	r2, [sp, #104]	; 0x68
   16584:	bl	10cec <fprintf@plt>
   16588:	ldr	r0, [r5]
   1658c:	b	16560 <__assert_fail@plt+0x576c>
   16590:	mov	r1, r0
   16594:	mov	r0, #10
   16598:	bl	10d34 <fputc@plt>
   1659c:	ldr	r0, [r5]
   165a0:	bl	10c20 <funlockfile@plt>
   165a4:	b	1634c <__assert_fail@plt+0x5558>
   165a8:	ldr	ip, [sl]
   165ac:	movw	r0, #41232	; 0xa110
   165b0:	movt	r0, #2
   165b4:	movw	r1, #37664	; 0x9320
   165b8:	movt	r1, #1
   165bc:	ldr	r3, [sp, #20]
   165c0:	ldr	r0, [r0]
   165c4:	ldr	r2, [r3]
   165c8:	str	ip, [sp]
   165cc:	ldr	r3, [sp, #104]	; 0x68
   165d0:	bl	10cec <fprintf@plt>
   165d4:	b	164a8 <__assert_fail@plt+0x56b4>
   165d8:	mov	r3, #1
   165dc:	str	r3, [sp, #40]	; 0x28
   165e0:	b	1624c <__assert_fail@plt+0x5458>
   165e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   165e8:	subs	r5, r0, #0
   165ec:	strd	r6, [sp, #8]
   165f0:	strd	r8, [sp, #16]
   165f4:	strd	sl, [sp, #24]
   165f8:	str	lr, [sp, #32]
   165fc:	sub	sp, sp, #36	; 0x24
   16600:	ldr	r4, [sp, #80]	; 0x50
   16604:	ldr	r7, [r4, #4]
   16608:	ble	167fc <__assert_fail@plt+0x5a08>
   1660c:	mov	r6, r2
   16610:	mov	sl, r3
   16614:	ldr	r2, [r4]
   16618:	mov	r3, #0
   1661c:	mov	r9, r1
   16620:	str	r3, [r4, #12]
   16624:	cmp	r2, r3
   16628:	beq	168a4 <__assert_fail@plt+0x5ab0>
   1662c:	ldr	r3, [r4, #16]
   16630:	cmp	r3, #0
   16634:	bne	167c8 <__assert_fail@plt+0x59d4>
   16638:	mov	r3, #0
   1663c:	str	r3, [r4, #20]
   16640:	str	r2, [r4, #28]
   16644:	str	r2, [r4, #32]
   16648:	ldrb	r2, [r6]
   1664c:	cmp	r2, #45	; 0x2d
   16650:	moveq	r2, #2
   16654:	addeq	r6, r6, #1
   16658:	streq	r2, [r4, #24]
   1665c:	beq	16684 <__assert_fail@plt+0x5890>
   16660:	cmp	r2, #43	; 0x2b
   16664:	addeq	r6, r6, #1
   16668:	streq	r3, [r4, #24]
   1666c:	beq	16684 <__assert_fail@plt+0x5890>
   16670:	ldr	r2, [sp, #84]	; 0x54
   16674:	cmp	r2, #0
   16678:	beq	169d4 <__assert_fail@plt+0x5be0>
   1667c:	mov	r2, #0
   16680:	str	r2, [r4, #24]
   16684:	mov	r2, #1
   16688:	str	r2, [r4, #16]
   1668c:	ldrb	r2, [r6]
   16690:	cmp	r2, #58	; 0x3a
   16694:	moveq	r7, #0
   16698:	cmp	r3, #0
   1669c:	beq	16730 <__assert_fail@plt+0x593c>
   166a0:	ldrb	r2, [r3]
   166a4:	cmp	r2, #0
   166a8:	beq	16730 <__assert_fail@plt+0x593c>
   166ac:	add	fp, r3, #1
   166b0:	mov	r0, r6
   166b4:	str	r3, [sp, #28]
   166b8:	str	fp, [r4, #20]
   166bc:	ldrb	r8, [r3]
   166c0:	mov	r1, r8
   166c4:	str	r8, [sp, #24]
   166c8:	bl	10cd4 <strchr@plt>
   166cc:	ldrd	r2, [sp, #24]
   166d0:	ldrb	r1, [r3, #1]
   166d4:	cmp	r1, #0
   166d8:	bne	166e8 <__assert_fail@plt+0x58f4>
   166dc:	ldr	r1, [r4]
   166e0:	add	r1, r1, #1
   166e4:	str	r1, [r4]
   166e8:	sub	r1, r8, #58	; 0x3a
   166ec:	cmp	r0, #0
   166f0:	cmpne	r1, #1
   166f4:	bls	16a4c <__assert_fail@plt+0x5c58>
   166f8:	ldrb	ip, [r0]
   166fc:	ldrb	r1, [r0, #1]
   16700:	cmp	ip, #87	; 0x57
   16704:	beq	16954 <__assert_fail@plt+0x5b60>
   16708:	cmp	r1, #58	; 0x3a
   1670c:	beq	169f8 <__assert_fail@plt+0x5c04>
   16710:	mov	r0, r2
   16714:	add	sp, sp, #36	; 0x24
   16718:	ldrd	r4, [sp]
   1671c:	ldrd	r6, [sp, #8]
   16720:	ldrd	r8, [sp, #16]
   16724:	ldrd	sl, [sp, #24]
   16728:	add	sp, sp, #32
   1672c:	pop	{pc}		; (ldr pc, [sp], #4)
   16730:	ldr	r8, [r4]
   16734:	ldr	r2, [r4, #28]
   16738:	ldr	r3, [r4, #32]
   1673c:	cmp	r3, r8
   16740:	ldr	r3, [r4, #24]
   16744:	strgt	r8, [r4, #32]
   16748:	cmp	r8, r2
   1674c:	movlt	r2, r8
   16750:	strlt	r8, [r4, #28]
   16754:	cmp	r3, #1
   16758:	beq	16804 <__assert_fail@plt+0x5a10>
   1675c:	cmp	r5, r8
   16760:	beq	167e4 <__assert_fail@plt+0x59f0>
   16764:	ldr	r3, [r9, r8, lsl #2]
   16768:	movw	fp, #37720	; 0x9358
   1676c:	movt	fp, #1
   16770:	mov	r1, fp
   16774:	mov	r0, r3
   16778:	str	r3, [sp, #24]
   1677c:	bl	10b9c <strcmp@plt>
   16780:	cmp	r0, #0
   16784:	ldr	r3, [sp, #24]
   16788:	bne	16878 <__assert_fail@plt+0x5a84>
   1678c:	ldr	r3, [r4, #28]
   16790:	add	r8, r8, #1
   16794:	ldr	r2, [r4, #32]
   16798:	str	r8, [r4]
   1679c:	cmp	r3, r2
   167a0:	beq	16a60 <__assert_fail@plt+0x5c6c>
   167a4:	cmp	r8, r2
   167a8:	beq	167bc <__assert_fail@plt+0x59c8>
   167ac:	mov	r0, r9
   167b0:	mov	r1, r4
   167b4:	bl	15ca4 <__assert_fail@plt+0x4eb0>
   167b8:	ldr	r3, [r4, #28]
   167bc:	str	r5, [r4]
   167c0:	str	r5, [r4, #32]
   167c4:	b	167ec <__assert_fail@plt+0x59f8>
   167c8:	ldrb	r2, [r6]
   167cc:	ldr	r3, [r4, #20]
   167d0:	sub	r1, r2, #43	; 0x2b
   167d4:	tst	r1, #253	; 0xfd
   167d8:	ldrbeq	r2, [r6, #1]
   167dc:	addeq	r6, r6, #1
   167e0:	b	16690 <__assert_fail@plt+0x589c>
   167e4:	ldr	r3, [r4, #28]
   167e8:	ldr	r5, [r4, #32]
   167ec:	cmp	r5, r3
   167f0:	mvnne	r2, #0
   167f4:	strne	r3, [r4]
   167f8:	bne	16710 <__assert_fail@plt+0x591c>
   167fc:	mvn	r2, #0
   16800:	b	16710 <__assert_fail@plt+0x591c>
   16804:	ldr	r3, [r4, #32]
   16808:	cmp	r3, r2
   1680c:	beq	16a38 <__assert_fail@plt+0x5c44>
   16810:	cmp	r8, r3
   16814:	beq	16828 <__assert_fail@plt+0x5a34>
   16818:	mov	r1, r4
   1681c:	mov	r0, r9
   16820:	bl	15ca4 <__assert_fail@plt+0x4eb0>
   16824:	ldr	r3, [r4]
   16828:	cmp	r5, r3
   1682c:	ble	16864 <__assert_fail@plt+0x5a70>
   16830:	add	r1, r9, r3, lsl #2
   16834:	b	16848 <__assert_fail@plt+0x5a54>
   16838:	add	r3, r3, #1
   1683c:	cmp	r3, r5
   16840:	str	r3, [r4]
   16844:	beq	16864 <__assert_fail@plt+0x5a70>
   16848:	ldr	r2, [r1], #4
   1684c:	ldrb	r0, [r2]
   16850:	cmp	r0, #45	; 0x2d
   16854:	bne	16838 <__assert_fail@plt+0x5a44>
   16858:	ldrb	r2, [r2, #1]
   1685c:	cmp	r2, #0
   16860:	beq	16838 <__assert_fail@plt+0x5a44>
   16864:	mov	r8, r3
   16868:	str	r3, [r4, #32]
   1686c:	cmp	r5, r8
   16870:	bne	16764 <__assert_fail@plt+0x5970>
   16874:	b	167e4 <__assert_fail@plt+0x59f0>
   16878:	ldrb	r2, [r3]
   1687c:	cmp	r2, #45	; 0x2d
   16880:	beq	168b4 <__assert_fail@plt+0x5ac0>
   16884:	ldr	r2, [r4, #24]
   16888:	cmp	r2, #0
   1688c:	beq	167fc <__assert_fail@plt+0x5a08>
   16890:	add	r8, r8, #1
   16894:	mov	r2, #1
   16898:	str	r8, [r4]
   1689c:	str	r3, [r4, #12]
   168a0:	b	16710 <__assert_fail@plt+0x591c>
   168a4:	mov	r3, #1
   168a8:	mov	r2, r3
   168ac:	str	r3, [r4]
   168b0:	b	16638 <__assert_fail@plt+0x5844>
   168b4:	ldrb	r1, [r3, #1]
   168b8:	cmp	r1, #0
   168bc:	beq	16884 <__assert_fail@plt+0x5a90>
   168c0:	cmp	sl, #0
   168c4:	beq	1694c <__assert_fail@plt+0x5b58>
   168c8:	cmp	r1, #45	; 0x2d
   168cc:	beq	16ae4 <__assert_fail@plt+0x5cf0>
   168d0:	ldr	r2, [sp, #76]	; 0x4c
   168d4:	cmp	r2, #0
   168d8:	beq	1694c <__assert_fail@plt+0x5b58>
   168dc:	ldrb	r2, [r3, #2]
   168e0:	cmp	r2, #0
   168e4:	bne	16900 <__assert_fail@plt+0x5b0c>
   168e8:	mov	r0, r6
   168ec:	str	r3, [sp, #24]
   168f0:	bl	10cd4 <strchr@plt>
   168f4:	cmp	r0, #0
   168f8:	ldr	r3, [sp, #24]
   168fc:	bne	1694c <__assert_fail@plt+0x5b58>
   16900:	ldr	r2, [sp, #72]	; 0x48
   16904:	add	ip, r3, #1
   16908:	movw	r0, #37104	; 0x90f0
   1690c:	movt	r0, #1
   16910:	mov	r3, sl
   16914:	ldr	r1, [sp, #76]	; 0x4c
   16918:	str	r2, [sp]
   1691c:	mov	r2, r6
   16920:	str	r0, [sp, #16]
   16924:	mov	r0, r5
   16928:	stmib	sp, {r1, r4, r7}
   1692c:	mov	r1, r9
   16930:	str	ip, [r4, #20]
   16934:	bl	15f0c <__assert_fail@plt+0x5118>
   16938:	cmn	r0, #1
   1693c:	mov	r2, r0
   16940:	bne	16710 <__assert_fail@plt+0x591c>
   16944:	ldr	r3, [r4]
   16948:	ldr	r3, [r9, r3, lsl #2]
   1694c:	add	r3, r3, #1
   16950:	b	166ac <__assert_fail@plt+0x58b8>
   16954:	sub	ip, r1, #59	; 0x3b
   16958:	cmp	sl, #0
   1695c:	clz	ip, ip
   16960:	lsr	ip, ip, #5
   16964:	moveq	ip, #0
   16968:	cmp	ip, #0
   1696c:	beq	16708 <__assert_fail@plt+0x5914>
   16970:	ldrb	r3, [r3, #1]
   16974:	cmp	r3, #0
   16978:	bne	1698c <__assert_fail@plt+0x5b98>
   1697c:	ldr	r3, [r4]
   16980:	cmp	r3, r5
   16984:	beq	16b18 <__assert_fail@plt+0x5d24>
   16988:	ldr	fp, [r9, r3, lsl #2]
   1698c:	mov	lr, #0
   16990:	movw	ip, #37796	; 0x93a4
   16994:	movt	ip, #1
   16998:	ldr	r3, [sp, #72]	; 0x48
   1699c:	mov	r2, r6
   169a0:	mov	r1, r9
   169a4:	mov	r0, r5
   169a8:	str	r3, [sp]
   169ac:	mov	r3, sl
   169b0:	str	r4, [sp, #8]
   169b4:	str	r7, [sp, #12]
   169b8:	str	ip, [sp, #16]
   169bc:	str	fp, [r4, #20]
   169c0:	str	lr, [sp, #4]
   169c4:	str	lr, [r4, #12]
   169c8:	bl	15f0c <__assert_fail@plt+0x5118>
   169cc:	mov	r2, r0
   169d0:	b	16710 <__assert_fail@plt+0x591c>
   169d4:	movw	r0, #37704	; 0x9348
   169d8:	movt	r0, #1
   169dc:	bl	10c80 <getenv@plt>
   169e0:	cmp	r0, #0
   169e4:	ldr	r3, [r4, #20]
   169e8:	bne	1667c <__assert_fail@plt+0x5888>
   169ec:	mov	r2, #1
   169f0:	str	r2, [r4, #24]
   169f4:	b	16684 <__assert_fail@plt+0x5890>
   169f8:	ldrb	r1, [r0, #2]
   169fc:	ldrb	r3, [r3, #1]
   16a00:	cmp	r1, #58	; 0x3a
   16a04:	beq	16aa0 <__assert_fail@plt+0x5cac>
   16a08:	cmp	r3, #0
   16a0c:	ldr	r3, [r4]
   16a10:	bne	16a6c <__assert_fail@plt+0x5c78>
   16a14:	cmp	r5, r3
   16a18:	beq	16ac4 <__assert_fail@plt+0x5cd0>
   16a1c:	ldr	r1, [r9, r3, lsl #2]
   16a20:	add	r3, r3, #1
   16a24:	str	r3, [r4]
   16a28:	str	r1, [r4, #12]
   16a2c:	mov	r3, #0
   16a30:	str	r3, [r4, #20]
   16a34:	b	16710 <__assert_fail@plt+0x591c>
   16a38:	cmp	r8, r2
   16a3c:	movne	r3, r8
   16a40:	moveq	r3, r2
   16a44:	strne	r8, [r4, #28]
   16a48:	b	16828 <__assert_fail@plt+0x5a34>
   16a4c:	cmp	r7, #0
   16a50:	bne	16a7c <__assert_fail@plt+0x5c88>
   16a54:	mov	r2, #63	; 0x3f
   16a58:	str	r8, [r4, #8]
   16a5c:	b	16710 <__assert_fail@plt+0x591c>
   16a60:	mov	r3, r8
   16a64:	str	r8, [r4, #28]
   16a68:	b	167bc <__assert_fail@plt+0x59c8>
   16a6c:	add	r3, r3, #1
   16a70:	str	r3, [r4]
   16a74:	str	fp, [r4, #12]
   16a78:	b	16a2c <__assert_fail@plt+0x5c38>
   16a7c:	movw	r0, #41232	; 0xa110
   16a80:	movt	r0, #2
   16a84:	ldr	r2, [r9]
   16a88:	movw	r1, #37724	; 0x935c
   16a8c:	movt	r1, #1
   16a90:	mov	r3, r8
   16a94:	ldr	r0, [r0]
   16a98:	bl	10cec <fprintf@plt>
   16a9c:	b	16a54 <__assert_fail@plt+0x5c60>
   16aa0:	cmp	r3, #0
   16aa4:	ldrne	r3, [r4]
   16aa8:	moveq	fp, r3
   16aac:	str	fp, [r4, #12]
   16ab0:	addne	r3, r3, #1
   16ab4:	strne	r3, [r4]
   16ab8:	mov	r3, #0
   16abc:	str	r3, [r4, #20]
   16ac0:	b	16710 <__assert_fail@plt+0x591c>
   16ac4:	cmp	r7, #0
   16ac8:	bne	16b38 <__assert_fail@plt+0x5d44>
   16acc:	str	r8, [r4, #8]
   16ad0:	ldrb	r3, [r6]
   16ad4:	cmp	r3, #58	; 0x3a
   16ad8:	moveq	r2, #58	; 0x3a
   16adc:	movne	r2, #63	; 0x3f
   16ae0:	b	16a2c <__assert_fail@plt+0x5c38>
   16ae4:	ldr	r2, [sp, #72]	; 0x48
   16ae8:	add	ip, r3, #2
   16aec:	mov	r1, r9
   16af0:	mov	r3, sl
   16af4:	ldr	r0, [sp, #76]	; 0x4c
   16af8:	str	r2, [sp]
   16afc:	mov	r2, r6
   16b00:	stmib	sp, {r0, r4, r7, fp}
   16b04:	mov	r0, r5
   16b08:	str	ip, [r4, #20]
   16b0c:	bl	15f0c <__assert_fail@plt+0x5118>
   16b10:	mov	r2, r0
   16b14:	b	16710 <__assert_fail@plt+0x591c>
   16b18:	cmp	r7, #0
   16b1c:	bne	16b5c <__assert_fail@plt+0x5d68>
   16b20:	str	r8, [r4, #8]
   16b24:	ldrb	r3, [r6]
   16b28:	cmp	r3, #58	; 0x3a
   16b2c:	moveq	r2, #58	; 0x3a
   16b30:	movne	r2, #63	; 0x3f
   16b34:	b	16710 <__assert_fail@plt+0x591c>
   16b38:	movw	r0, #41232	; 0xa110
   16b3c:	movt	r0, #2
   16b40:	ldr	r2, [r9]
   16b44:	movw	r1, #37752	; 0x9378
   16b48:	movt	r1, #1
   16b4c:	mov	r3, r8
   16b50:	ldr	r0, [r0]
   16b54:	bl	10cec <fprintf@plt>
   16b58:	b	16acc <__assert_fail@plt+0x5cd8>
   16b5c:	movw	r0, #41232	; 0xa110
   16b60:	movt	r0, #2
   16b64:	ldr	r2, [r9]
   16b68:	movw	r1, #37752	; 0x9378
   16b6c:	movt	r1, #1
   16b70:	mov	r3, r8
   16b74:	ldr	r0, [r0]
   16b78:	bl	10cec <fprintf@plt>
   16b7c:	b	16b20 <__assert_fail@plt+0x5d2c>
   16b80:	strd	r4, [sp, #-16]!
   16b84:	movw	r5, #41220	; 0xa104
   16b88:	movt	r5, #2
   16b8c:	str	r6, [sp, #8]
   16b90:	movw	r4, #41264	; 0xa130
   16b94:	movt	r4, #2
   16b98:	str	lr, [sp, #12]
   16b9c:	sub	sp, sp, #16
   16ba0:	ldr	lr, [sp, #32]
   16ba4:	ldr	ip, [r5]
   16ba8:	ldr	r6, [sp, #36]	; 0x24
   16bac:	str	lr, [sp]
   16bb0:	ldr	lr, [sp, #40]	; 0x28
   16bb4:	str	ip, [r4]
   16bb8:	ldr	ip, [r5, #4]
   16bbc:	str	r6, [sp, #4]
   16bc0:	str	r4, [sp, #8]
   16bc4:	str	lr, [sp, #12]
   16bc8:	str	ip, [r4, #4]
   16bcc:	bl	165e4 <__assert_fail@plt+0x57f0>
   16bd0:	ldr	ip, [r4]
   16bd4:	movw	r3, #41404	; 0xa1bc
   16bd8:	movt	r3, #2
   16bdc:	ldr	r1, [r4, #8]
   16be0:	ldr	r2, [r4, #12]
   16be4:	str	ip, [r5]
   16be8:	str	r1, [r5, #8]
   16bec:	str	r2, [r3]
   16bf0:	add	sp, sp, #16
   16bf4:	ldrd	r4, [sp]
   16bf8:	ldr	r6, [sp, #8]
   16bfc:	add	sp, sp, #12
   16c00:	pop	{pc}		; (ldr pc, [sp], #4)
   16c04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c08:	movw	r4, #41264	; 0xa130
   16c0c:	movt	r4, #2
   16c10:	strd	r6, [sp, #8]
   16c14:	movw	r6, #41220	; 0xa104
   16c18:	movt	r6, #2
   16c1c:	strd	r8, [sp, #16]
   16c20:	subs	r9, r0, #0
   16c24:	strd	sl, [sp, #24]
   16c28:	ldm	r6, {r5, sl}
   16c2c:	str	lr, [sp, #32]
   16c30:	sub	sp, sp, #20
   16c34:	str	r1, [sp, #4]
   16c38:	stm	r4, {r5, sl}
   16c3c:	ble	17010 <__assert_fail@plt+0x621c>
   16c40:	mov	r3, #0
   16c44:	mov	r8, r2
   16c48:	cmp	r5, r3
   16c4c:	str	r3, [r4, #12]
   16c50:	beq	16d20 <__assert_fail@plt+0x5f2c>
   16c54:	ldr	r3, [r4, #16]
   16c58:	cmp	r3, #0
   16c5c:	beq	16d2c <__assert_fail@plt+0x5f38>
   16c60:	ldrb	r3, [r2]
   16c64:	sub	r2, r3, #43	; 0x2b
   16c68:	tst	r2, #253	; 0xfd
   16c6c:	ldrbeq	r3, [r8, #1]
   16c70:	addeq	r8, r8, #1
   16c74:	cmp	r3, #58	; 0x3a
   16c78:	ldr	r3, [r4, #20]
   16c7c:	moveq	sl, #0
   16c80:	cmp	r3, #0
   16c84:	beq	16d6c <__assert_fail@plt+0x5f78>
   16c88:	ldrb	r2, [r3]
   16c8c:	cmp	r2, #0
   16c90:	beq	16d6c <__assert_fail@plt+0x5f78>
   16c94:	add	r7, r3, #1
   16c98:	mov	r0, r8
   16c9c:	str	r3, [sp, #12]
   16ca0:	str	r7, [r4, #20]
   16ca4:	ldrb	fp, [r3]
   16ca8:	mov	r1, fp
   16cac:	str	fp, [sp, #8]
   16cb0:	bl	10cd4 <strchr@plt>
   16cb4:	ldrd	r2, [sp, #8]
   16cb8:	ldrb	r1, [r3, #1]
   16cbc:	cmp	r1, #0
   16cc0:	sub	r1, fp, #58	; 0x3a
   16cc4:	addeq	r5, r5, #1
   16cc8:	streq	r5, [r4]
   16ccc:	cmp	r0, #0
   16cd0:	cmpne	r1, #1
   16cd4:	bls	16f38 <__assert_fail@plt+0x6144>
   16cd8:	ldrb	r1, [r0, #1]
   16cdc:	cmp	r1, #58	; 0x3a
   16ce0:	beq	16f54 <__assert_fail@plt+0x6160>
   16ce4:	ldr	r1, [r4, #8]
   16ce8:	ldr	r7, [r4, #12]
   16cec:	mov	r0, r2
   16cf0:	movw	r3, #41404	; 0xa1bc
   16cf4:	movt	r3, #2
   16cf8:	str	r5, [r6]
   16cfc:	str	r1, [r6, #8]
   16d00:	str	r7, [r3]
   16d04:	add	sp, sp, #20
   16d08:	ldrd	r4, [sp]
   16d0c:	ldrd	r6, [sp, #8]
   16d10:	ldrd	r8, [sp, #16]
   16d14:	ldrd	sl, [sp, #24]
   16d18:	add	sp, sp, #32
   16d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d20:	mov	r3, #1
   16d24:	mov	r5, r3
   16d28:	str	r3, [r4]
   16d2c:	mov	r3, #0
   16d30:	str	r3, [r4, #20]
   16d34:	str	r5, [r4, #28]
   16d38:	str	r5, [r4, #32]
   16d3c:	ldrb	r2, [r8]
   16d40:	cmp	r2, #45	; 0x2d
   16d44:	beq	16e14 <__assert_fail@plt+0x6020>
   16d48:	cmp	r2, #43	; 0x2b
   16d4c:	mov	r1, r3
   16d50:	str	r3, [r4, #24]
   16d54:	addeq	r8, r8, #1
   16d58:	mov	r3, #1
   16d5c:	str	r3, [r4, #16]
   16d60:	ldrb	r3, [r8]
   16d64:	cmp	r3, #58	; 0x3a
   16d68:	beq	16e58 <__assert_fail@plt+0x6064>
   16d6c:	mov	r2, r5
   16d70:	ldr	r1, [r4, #24]
   16d74:	ldr	r3, [r4, #32]
   16d78:	ldr	r0, [r4, #28]
   16d7c:	cmp	r3, r5
   16d80:	movgt	r3, r5
   16d84:	strgt	r5, [r4, #32]
   16d88:	cmp	r5, r0
   16d8c:	movge	r5, r0
   16d90:	strlt	r5, [r4, #28]
   16d94:	cmp	r1, #1
   16d98:	beq	16e6c <__assert_fail@plt+0x6078>
   16d9c:	cmp	r9, r2
   16da0:	beq	16ee0 <__assert_fail@plt+0x60ec>
   16da4:	ldr	fp, [sp, #4]
   16da8:	movw	r1, #37720	; 0x9358
   16dac:	movt	r1, #1
   16db0:	strd	r2, [sp, #8]
   16db4:	ldr	r7, [fp, r2, lsl #2]
   16db8:	mov	r0, r7
   16dbc:	bl	10b9c <strcmp@plt>
   16dc0:	cmp	r0, #0
   16dc4:	ldr	r2, [sp, #8]
   16dc8:	bne	16e28 <__assert_fail@plt+0x6034>
   16dcc:	ldr	r3, [sp, #12]
   16dd0:	add	r2, r2, #1
   16dd4:	ldr	r5, [r4, #28]
   16dd8:	str	r2, [r4]
   16ddc:	cmp	r5, r3
   16de0:	beq	16f9c <__assert_fail@plt+0x61a8>
   16de4:	cmp	r2, r3
   16de8:	beq	16e00 <__assert_fail@plt+0x600c>
   16dec:	mov	r0, fp
   16df0:	movw	r1, #41264	; 0xa130
   16df4:	movt	r1, #2
   16df8:	bl	15ca4 <__assert_fail@plt+0x4eb0>
   16dfc:	ldr	r5, [r4, #28]
   16e00:	mov	r2, r9
   16e04:	mov	r3, r9
   16e08:	str	r9, [r4]
   16e0c:	str	r9, [r4, #32]
   16e10:	b	16ee4 <__assert_fail@plt+0x60f0>
   16e14:	mov	r3, #2
   16e18:	add	r8, r8, #1
   16e1c:	mov	r1, r3
   16e20:	str	r3, [r4, #24]
   16e24:	b	16d58 <__assert_fail@plt+0x5f64>
   16e28:	ldrb	r3, [r7]
   16e2c:	cmp	r3, #45	; 0x2d
   16e30:	beq	16f04 <__assert_fail@plt+0x6110>
   16e34:	ldr	r3, [r4, #24]
   16e38:	cmp	r3, #0
   16e3c:	beq	1700c <__assert_fail@plt+0x6218>
   16e40:	add	r5, r2, #1
   16e44:	mov	r2, #1
   16e48:	ldr	r1, [r4, #8]
   16e4c:	str	r5, [r4]
   16e50:	str	r7, [r4, #12]
   16e54:	b	16cec <__assert_fail@plt+0x5ef8>
   16e58:	cmp	r1, #1
   16e5c:	mov	r3, r5
   16e60:	mov	r2, r5
   16e64:	mov	sl, #0
   16e68:	bne	16d9c <__assert_fail@plt+0x5fa8>
   16e6c:	cmp	r5, r3
   16e70:	beq	16f1c <__assert_fail@plt+0x6128>
   16e74:	cmp	r2, r3
   16e78:	beq	16e90 <__assert_fail@plt+0x609c>
   16e7c:	movw	r1, #41264	; 0xa130
   16e80:	movt	r1, #2
   16e84:	ldr	r0, [sp, #4]
   16e88:	bl	15ca4 <__assert_fail@plt+0x4eb0>
   16e8c:	ldr	r3, [r4]
   16e90:	cmp	r9, r3
   16e94:	ble	16ed0 <__assert_fail@plt+0x60dc>
   16e98:	ldr	r2, [sp, #4]
   16e9c:	add	r1, r2, r3, lsl #2
   16ea0:	b	16eb4 <__assert_fail@plt+0x60c0>
   16ea4:	add	r3, r3, #1
   16ea8:	cmp	r9, r3
   16eac:	str	r3, [r4]
   16eb0:	beq	16f30 <__assert_fail@plt+0x613c>
   16eb4:	ldr	r2, [r1], #4
   16eb8:	ldrb	r0, [r2]
   16ebc:	cmp	r0, #45	; 0x2d
   16ec0:	bne	16ea4 <__assert_fail@plt+0x60b0>
   16ec4:	ldrb	r2, [r2, #1]
   16ec8:	cmp	r2, #0
   16ecc:	beq	16ea4 <__assert_fail@plt+0x60b0>
   16ed0:	mov	r2, r3
   16ed4:	cmp	r9, r2
   16ed8:	str	r3, [r4, #32]
   16edc:	bne	16da4 <__assert_fail@plt+0x5fb0>
   16ee0:	ldr	r5, [r4, #28]
   16ee4:	cmp	r3, r5
   16ee8:	moveq	r5, r2
   16eec:	mvnne	r2, #0
   16ef0:	ldr	r1, [r4, #8]
   16ef4:	strne	r5, [r4]
   16ef8:	mvneq	r2, #0
   16efc:	ldr	r7, [r4, #12]
   16f00:	b	16cec <__assert_fail@plt+0x5ef8>
   16f04:	ldrb	r3, [r7, #1]
   16f08:	cmp	r3, #0
   16f0c:	beq	16e34 <__assert_fail@plt+0x6040>
   16f10:	add	r3, r7, #1
   16f14:	mov	r5, r2
   16f18:	b	16c94 <__assert_fail@plt+0x5ea0>
   16f1c:	cmp	r2, r3
   16f20:	beq	16e90 <__assert_fail@plt+0x609c>
   16f24:	mov	r3, r2
   16f28:	str	r2, [r4, #28]
   16f2c:	b	16e90 <__assert_fail@plt+0x609c>
   16f30:	mov	r2, r9
   16f34:	b	16ed4 <__assert_fail@plt+0x60e0>
   16f38:	cmp	sl, #0
   16f3c:	bne	16fbc <__assert_fail@plt+0x61c8>
   16f40:	mov	r1, fp
   16f44:	mov	r2, #63	; 0x3f
   16f48:	str	fp, [r4, #8]
   16f4c:	ldr	r7, [r4, #12]
   16f50:	b	16cec <__assert_fail@plt+0x5ef8>
   16f54:	ldrb	r1, [r0, #2]
   16f58:	ldrb	r3, [r3, #1]
   16f5c:	cmp	r1, #58	; 0x3a
   16f60:	beq	16fe8 <__assert_fail@plt+0x61f4>
   16f64:	cmp	r3, #0
   16f68:	bne	16fa8 <__assert_fail@plt+0x61b4>
   16f6c:	cmp	r9, r5
   16f70:	beq	17018 <__assert_fail@plt+0x6224>
   16f74:	ldr	r3, [sp, #4]
   16f78:	ldr	r1, [r4, #8]
   16f7c:	ldr	r7, [r3, r5, lsl #2]
   16f80:	add	r3, r5, #1
   16f84:	mov	r5, r3
   16f88:	str	r3, [r4]
   16f8c:	str	r7, [r4, #12]
   16f90:	mov	r3, #0
   16f94:	str	r3, [r4, #20]
   16f98:	b	16cec <__assert_fail@plt+0x5ef8>
   16f9c:	mov	r5, r2
   16fa0:	str	r2, [r4, #28]
   16fa4:	b	16e00 <__assert_fail@plt+0x600c>
   16fa8:	add	r5, r5, #1
   16fac:	ldr	r1, [r4, #8]
   16fb0:	str	r5, [r4]
   16fb4:	str	r7, [r4, #12]
   16fb8:	b	16f90 <__assert_fail@plt+0x619c>
   16fbc:	ldr	r3, [sp, #4]
   16fc0:	movw	r0, #41232	; 0xa110
   16fc4:	movt	r0, #2
   16fc8:	movw	r1, #37724	; 0x935c
   16fcc:	movt	r1, #1
   16fd0:	ldr	r0, [r0]
   16fd4:	ldr	r2, [r3]
   16fd8:	mov	r3, fp
   16fdc:	bl	10cec <fprintf@plt>
   16fe0:	ldr	r5, [r4]
   16fe4:	b	16f40 <__assert_fail@plt+0x614c>
   16fe8:	cmp	r3, #0
   16fec:	ldr	r1, [r4, #8]
   16ff0:	moveq	r7, r3
   16ff4:	addne	r5, r5, #1
   16ff8:	mov	r3, #0
   16ffc:	strne	r5, [r4]
   17000:	str	r7, [r4, #12]
   17004:	str	r3, [r4, #20]
   17008:	b	16cec <__assert_fail@plt+0x5ef8>
   1700c:	mov	r5, r2
   17010:	mvn	r2, #0
   17014:	b	16ce4 <__assert_fail@plt+0x5ef0>
   17018:	cmp	sl, #0
   1701c:	bne	17040 <__assert_fail@plt+0x624c>
   17020:	str	fp, [r4, #8]
   17024:	mov	r1, fp
   17028:	ldrb	r3, [r8]
   1702c:	ldr	r7, [r4, #12]
   17030:	cmp	r3, #58	; 0x3a
   17034:	moveq	r2, #58	; 0x3a
   17038:	movne	r2, #63	; 0x3f
   1703c:	b	16f90 <__assert_fail@plt+0x619c>
   17040:	ldr	r3, [sp, #4]
   17044:	movw	r0, #41232	; 0xa110
   17048:	movt	r0, #2
   1704c:	movw	r1, #37752	; 0x9378
   17050:	movt	r1, #1
   17054:	ldr	r0, [r0]
   17058:	ldr	r2, [r3]
   1705c:	mov	r3, fp
   17060:	bl	10cec <fprintf@plt>
   17064:	ldr	r5, [r4]
   17068:	b	17020 <__assert_fail@plt+0x622c>
   1706c:	andeq	r0, r0, r0
   17070:	ror	r0, r0, #3
   17074:	udiv	r3, r0, r1
   17078:	mls	r0, r3, r1, r0
   1707c:	bx	lr
   17080:	sub	r0, r1, r0
   17084:	clz	r0, r0
   17088:	lsr	r0, r0, #5
   1708c:	bx	lr
   17090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17094:	mov	r5, r1
   17098:	strd	r6, [sp, #8]
   1709c:	mov	r6, r0
   170a0:	mov	r7, r3
   170a4:	mov	r0, r1
   170a8:	strd	r8, [sp, #16]
   170ac:	strd	sl, [sp, #24]
   170b0:	mov	fp, r2
   170b4:	str	lr, [sp, #32]
   170b8:	sub	sp, sp, #4
   170bc:	ldr	r1, [r6, #8]
   170c0:	ldr	r3, [r6, #24]
   170c4:	blx	r3
   170c8:	ldr	r3, [r6, #8]
   170cc:	cmp	r0, r3
   170d0:	bcs	171ec <__assert_fail@plt+0x63f8>
   170d4:	ldr	r8, [r6]
   170d8:	lsl	r9, r0, #3
   170dc:	mov	sl, r0
   170e0:	add	r4, r8, r9
   170e4:	str	r4, [fp]
   170e8:	ldr	r1, [r8, r0, lsl #3]
   170ec:	cmp	r1, #0
   170f0:	beq	171e4 <__assert_fail@plt+0x63f0>
   170f4:	cmp	r1, r5
   170f8:	beq	171ac <__assert_fail@plt+0x63b8>
   170fc:	mov	r0, r5
   17100:	ldr	r3, [r6, #28]
   17104:	blx	r3
   17108:	cmp	r0, #0
   1710c:	bne	171a8 <__assert_fail@plt+0x63b4>
   17110:	ldr	r3, [r4, #4]
   17114:	cmp	r3, #0
   17118:	beq	171e4 <__assert_fail@plt+0x63f0>
   1711c:	ldr	r1, [r3]
   17120:	cmp	r5, r1
   17124:	bne	17148 <__assert_fail@plt+0x6354>
   17128:	b	17164 <__assert_fail@plt+0x6370>
   1712c:	ldr	r4, [r4, #4]
   17130:	ldr	r3, [r4, #4]
   17134:	cmp	r3, #0
   17138:	beq	171e4 <__assert_fail@plt+0x63f0>
   1713c:	ldr	r1, [r3]
   17140:	cmp	r1, r5
   17144:	beq	17164 <__assert_fail@plt+0x6370>
   17148:	mov	r0, r5
   1714c:	ldr	r3, [r6, #28]
   17150:	blx	r3
   17154:	cmp	r0, #0
   17158:	beq	1712c <__assert_fail@plt+0x6338>
   1715c:	ldr	r3, [r4, #4]
   17160:	ldr	r1, [r3]
   17164:	cmp	r7, #0
   17168:	beq	17188 <__assert_fail@plt+0x6394>
   1716c:	ldr	r0, [r3, #4]
   17170:	mov	r2, #0
   17174:	str	r0, [r4, #4]
   17178:	str	r2, [r3]
   1717c:	ldr	r2, [r6, #36]	; 0x24
   17180:	str	r2, [r3, #4]
   17184:	str	r3, [r6, #36]	; 0x24
   17188:	mov	r0, r1
   1718c:	add	sp, sp, #4
   17190:	ldrd	r4, [sp]
   17194:	ldrd	r6, [sp, #8]
   17198:	ldrd	r8, [sp, #16]
   1719c:	ldrd	sl, [sp, #24]
   171a0:	add	sp, sp, #32
   171a4:	pop	{pc}		; (ldr pc, [sp], #4)
   171a8:	ldr	r1, [r8, sl, lsl #3]
   171ac:	cmp	r7, #0
   171b0:	beq	17188 <__assert_fail@plt+0x6394>
   171b4:	ldr	r0, [r4, #4]
   171b8:	cmp	r0, #0
   171bc:	streq	r0, [r8, sl, lsl #3]
   171c0:	beq	17188 <__assert_fail@plt+0x6394>
   171c4:	ldrd	r2, [r0]
   171c8:	mov	ip, #0
   171cc:	strd	r2, [r8, r9]
   171d0:	str	ip, [r0]
   171d4:	ldr	r3, [r6, #36]	; 0x24
   171d8:	str	r3, [r0, #4]
   171dc:	str	r0, [r6, #36]	; 0x24
   171e0:	b	17188 <__assert_fail@plt+0x6394>
   171e4:	mov	r1, #0
   171e8:	b	17188 <__assert_fail@plt+0x6394>
   171ec:	bl	10db8 <abort@plt>
   171f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   171f4:	ldr	r3, [r1, #4]
   171f8:	strd	r6, [sp, #8]
   171fc:	ldr	r6, [r1]
   17200:	strd	r8, [sp, #16]
   17204:	str	sl, [sp, #24]
   17208:	str	lr, [sp, #28]
   1720c:	cmp	r6, r3
   17210:	bcs	172f0 <__assert_fail@plt+0x64fc>
   17214:	mov	r8, r2
   17218:	mov	r5, r0
   1721c:	mov	r7, r1
   17220:	add	r6, r6, #8
   17224:	mov	r9, #0
   17228:	b	17238 <__assert_fail@plt+0x6444>
   1722c:	cmp	r3, r6
   17230:	add	r6, r6, #8
   17234:	bls	172f0 <__assert_fail@plt+0x64fc>
   17238:	ldr	sl, [r6, #-8]
   1723c:	cmp	sl, #0
   17240:	beq	1722c <__assert_fail@plt+0x6438>
   17244:	ldr	r4, [r6, #-4]
   17248:	cmp	r4, #0
   1724c:	beq	172d4 <__assert_fail@plt+0x64e0>
   17250:	ldr	r1, [r5, #8]
   17254:	b	17270 <__assert_fail@plt+0x647c>
   17258:	ldr	r3, [ip, #4]
   1725c:	cmp	r2, #0
   17260:	str	r3, [r4, #4]
   17264:	str	r4, [ip, #4]
   17268:	mov	r4, r2
   1726c:	beq	172d0 <__assert_fail@plt+0x64dc>
   17270:	ldr	sl, [r4]
   17274:	ldr	r3, [r5, #24]
   17278:	mov	r0, sl
   1727c:	blx	r3
   17280:	ldr	r1, [r5, #8]
   17284:	cmp	r0, r1
   17288:	bcs	173a4 <__assert_fail@plt+0x65b0>
   1728c:	ldr	r3, [r5]
   17290:	ldr	r2, [r4, #4]
   17294:	ldr	lr, [r3, r0, lsl #3]
   17298:	add	ip, r3, r0, lsl #3
   1729c:	cmp	lr, #0
   172a0:	bne	17258 <__assert_fail@plt+0x6464>
   172a4:	ldr	ip, [r5, #12]
   172a8:	cmp	r2, #0
   172ac:	str	sl, [r3, r0, lsl #3]
   172b0:	add	ip, ip, #1
   172b4:	str	ip, [r5, #12]
   172b8:	str	lr, [r4]
   172bc:	ldr	r3, [r5, #36]	; 0x24
   172c0:	str	r3, [r4, #4]
   172c4:	str	r4, [r5, #36]	; 0x24
   172c8:	mov	r4, r2
   172cc:	bne	17270 <__assert_fail@plt+0x647c>
   172d0:	ldr	sl, [r6, #-8]
   172d4:	cmp	r8, #0
   172d8:	str	r9, [r6, #-4]
   172dc:	beq	1730c <__assert_fail@plt+0x6518>
   172e0:	ldr	r3, [r7, #4]
   172e4:	cmp	r3, r6
   172e8:	add	r6, r6, #8
   172ec:	bhi	17238 <__assert_fail@plt+0x6444>
   172f0:	mov	r0, #1
   172f4:	ldrd	r4, [sp]
   172f8:	ldrd	r6, [sp, #8]
   172fc:	ldrd	r8, [sp, #16]
   17300:	ldr	sl, [sp, #24]
   17304:	add	sp, sp, #28
   17308:	pop	{pc}		; (ldr pc, [sp], #4)
   1730c:	mov	r0, sl
   17310:	ldr	r1, [r5, #8]
   17314:	ldr	r3, [r5, #24]
   17318:	blx	r3
   1731c:	ldr	r3, [r5, #8]
   17320:	cmp	r0, r3
   17324:	bcs	173a4 <__assert_fail@plt+0x65b0>
   17328:	ldr	r3, [r5]
   1732c:	ldr	r2, [r3, r0, lsl #3]
   17330:	add	r4, r3, r0, lsl #3
   17334:	cmp	r2, #0
   17338:	beq	17378 <__assert_fail@plt+0x6584>
   1733c:	ldr	r0, [r5, #36]	; 0x24
   17340:	cmp	r0, #0
   17344:	beq	1738c <__assert_fail@plt+0x6598>
   17348:	ldr	r3, [r0, #4]
   1734c:	str	r3, [r5, #36]	; 0x24
   17350:	ldr	r3, [r4, #4]
   17354:	str	sl, [r0]
   17358:	str	r3, [r0, #4]
   1735c:	str	r0, [r4, #4]
   17360:	ldr	r2, [r7, #12]
   17364:	str	r9, [r6, #-8]
   17368:	ldr	r3, [r7, #4]
   1736c:	sub	r2, r2, #1
   17370:	str	r2, [r7, #12]
   17374:	b	1722c <__assert_fail@plt+0x6438>
   17378:	ldr	r2, [r5, #12]
   1737c:	str	sl, [r3, r0, lsl #3]
   17380:	add	r2, r2, #1
   17384:	str	r2, [r5, #12]
   17388:	b	17360 <__assert_fail@plt+0x656c>
   1738c:	mov	r0, #8
   17390:	bl	18a50 <__assert_fail@plt+0x7c5c>
   17394:	cmp	r0, #0
   17398:	bne	17350 <__assert_fail@plt+0x655c>
   1739c:	mov	r0, r8
   173a0:	b	172f4 <__assert_fail@plt+0x6500>
   173a4:	bl	10db8 <abort@plt>
   173a8:	ldr	r0, [r0, #8]
   173ac:	bx	lr
   173b0:	ldr	r0, [r0, #12]
   173b4:	bx	lr
   173b8:	ldr	r0, [r0, #16]
   173bc:	bx	lr
   173c0:	ldm	r0, {r1, r3}
   173c4:	cmp	r1, r3
   173c8:	bcs	1743c <__assert_fail@plt+0x6648>
   173cc:	sub	ip, r3, #1
   173d0:	add	r3, r1, #16
   173d4:	sub	ip, ip, r1
   173d8:	mov	r0, #0
   173dc:	bic	ip, ip, #7
   173e0:	add	r1, r1, #8
   173e4:	add	ip, ip, r3
   173e8:	b	173f8 <__assert_fail@plt+0x6604>
   173ec:	add	r1, r1, #8
   173f0:	cmp	r1, ip
   173f4:	beq	17438 <__assert_fail@plt+0x6644>
   173f8:	ldr	r3, [r1, #-8]
   173fc:	cmp	r3, #0
   17400:	beq	173ec <__assert_fail@plt+0x65f8>
   17404:	ldr	r3, [r1, #-4]
   17408:	mov	r2, #1
   1740c:	cmp	r3, #0
   17410:	beq	17424 <__assert_fail@plt+0x6630>
   17414:	ldr	r3, [r3, #4]
   17418:	add	r2, r2, #1
   1741c:	cmp	r3, #0
   17420:	bne	17414 <__assert_fail@plt+0x6620>
   17424:	cmp	r0, r2
   17428:	add	r1, r1, #8
   1742c:	movcc	r0, r2
   17430:	cmp	r1, ip
   17434:	bne	173f8 <__assert_fail@plt+0x6604>
   17438:	bx	lr
   1743c:	mov	r0, #0
   17440:	bx	lr
   17444:	ldm	r0, {r1, r3}
   17448:	push	{lr}		; (str lr, [sp, #-4]!)
   1744c:	cmp	r1, r3
   17450:	bcs	174e4 <__assert_fail@plt+0x66f0>
   17454:	sub	ip, r3, #1
   17458:	mov	r2, #0
   1745c:	sub	ip, ip, r1
   17460:	add	r3, r1, #16
   17464:	bic	ip, ip, #7
   17468:	add	r1, r1, #8
   1746c:	add	ip, ip, r3
   17470:	mov	lr, r2
   17474:	b	17484 <__assert_fail@plt+0x6690>
   17478:	add	r1, r1, #8
   1747c:	cmp	r1, ip
   17480:	beq	174c0 <__assert_fail@plt+0x66cc>
   17484:	ldr	r3, [r1, #-8]
   17488:	cmp	r3, #0
   1748c:	beq	17478 <__assert_fail@plt+0x6684>
   17490:	ldr	r3, [r1, #-4]
   17494:	add	lr, lr, #1
   17498:	add	r2, r2, #1
   1749c:	cmp	r3, #0
   174a0:	beq	17478 <__assert_fail@plt+0x6684>
   174a4:	ldr	r3, [r3, #4]
   174a8:	add	r2, r2, #1
   174ac:	cmp	r3, #0
   174b0:	bne	174a4 <__assert_fail@plt+0x66b0>
   174b4:	add	r1, r1, #8
   174b8:	cmp	r1, ip
   174bc:	bne	17484 <__assert_fail@plt+0x6690>
   174c0:	ldr	r3, [r0, #12]
   174c4:	cmp	r3, lr
   174c8:	movne	r0, #0
   174cc:	bne	174e0 <__assert_fail@plt+0x66ec>
   174d0:	ldr	r0, [r0, #16]
   174d4:	sub	r0, r0, r2
   174d8:	clz	r0, r0
   174dc:	lsr	r0, r0, #5
   174e0:	pop	{pc}		; (ldr pc, [sp], #4)
   174e4:	mov	r2, #0
   174e8:	mov	lr, r2
   174ec:	b	174c0 <__assert_fail@plt+0x66cc>
   174f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   174f4:	mov	r4, r1
   174f8:	ldr	r3, [r0]
   174fc:	ldr	r1, [r0, #4]
   17500:	ldr	r2, [r0, #16]
   17504:	strd	r6, [sp, #8]
   17508:	str	lr, [sp, #16]
   1750c:	sub	sp, sp, #12
   17510:	cmp	r3, r1
   17514:	ldrd	r6, [r0, #8]
   17518:	bcs	17608 <__assert_fail@plt+0x6814>
   1751c:	sub	ip, r1, #1
   17520:	add	r1, r3, #16
   17524:	sub	ip, ip, r3
   17528:	add	r0, r3, #8
   1752c:	bic	ip, ip, #7
   17530:	mov	r5, #0
   17534:	add	ip, ip, r1
   17538:	b	17548 <__assert_fail@plt+0x6754>
   1753c:	add	r0, r0, #8
   17540:	cmp	r0, ip
   17544:	beq	17588 <__assert_fail@plt+0x6794>
   17548:	ldr	r3, [r0, #-8]
   1754c:	cmp	r3, #0
   17550:	beq	1753c <__assert_fail@plt+0x6748>
   17554:	ldr	r3, [r0, #-4]
   17558:	mov	r1, #1
   1755c:	cmp	r3, #0
   17560:	beq	17574 <__assert_fail@plt+0x6780>
   17564:	ldr	r3, [r3, #4]
   17568:	add	r1, r1, #1
   1756c:	cmp	r3, #0
   17570:	bne	17564 <__assert_fail@plt+0x6770>
   17574:	cmp	r5, r1
   17578:	add	r0, r0, #8
   1757c:	movcc	r5, r1
   17580:	cmp	r0, ip
   17584:	bne	17548 <__assert_fail@plt+0x6754>
   17588:	mov	r0, r4
   1758c:	movw	r1, #37820	; 0x93bc
   17590:	movt	r1, #1
   17594:	bl	10cec <fprintf@plt>
   17598:	mov	r2, r6
   1759c:	mov	r0, r4
   175a0:	movw	r1, #37844	; 0x93d4
   175a4:	movt	r1, #1
   175a8:	bl	10cec <fprintf@plt>
   175ac:	vmov	s15, r7
   175b0:	mov	r2, r7
   175b4:	mov	r0, r4
   175b8:	vldr	d5, [pc, #80]	; 17610 <__assert_fail@plt+0x681c>
   175bc:	movw	r1, #37868	; 0x93ec
   175c0:	movt	r1, #1
   175c4:	vcvt.f64.u32	d6, s15
   175c8:	vmov	s15, r6
   175cc:	vmul.f64	d6, d6, d5
   175d0:	vcvt.f64.u32	d7, s15
   175d4:	vdiv.f64	d5, d6, d7
   175d8:	vstr	d5, [sp]
   175dc:	bl	10cec <fprintf@plt>
   175e0:	mov	r2, r5
   175e4:	mov	r0, r4
   175e8:	movw	r1, #37904	; 0x9410
   175ec:	movt	r1, #1
   175f0:	add	sp, sp, #12
   175f4:	ldrd	r4, [sp]
   175f8:	ldrd	r6, [sp, #8]
   175fc:	ldr	lr, [sp, #16]
   17600:	add	sp, sp, #20
   17604:	b	10cec <fprintf@plt>
   17608:	mov	r5, #0
   1760c:	b	17588 <__assert_fail@plt+0x6794>
   17610:	andeq	r0, r0, r0
   17614:	subsmi	r0, r9, r0
   17618:	strd	r4, [sp, #-16]!
   1761c:	mov	r5, r1
   17620:	str	r6, [sp, #8]
   17624:	mov	r6, r0
   17628:	mov	r0, r1
   1762c:	str	lr, [sp, #12]
   17630:	ldr	r1, [r6, #8]
   17634:	ldr	r3, [r6, #24]
   17638:	blx	r3
   1763c:	ldr	r3, [r6, #8]
   17640:	cmp	r0, r3
   17644:	bcs	176b4 <__assert_fail@plt+0x68c0>
   17648:	ldr	r4, [r6]
   1764c:	ldr	r1, [r4, r0, lsl #3]
   17650:	add	r4, r4, r0, lsl #3
   17654:	cmp	r1, #0
   17658:	beq	17694 <__assert_fail@plt+0x68a0>
   1765c:	cmp	r1, r5
   17660:	bne	17674 <__assert_fail@plt+0x6880>
   17664:	b	17698 <__assert_fail@plt+0x68a4>
   17668:	ldr	r1, [r4]
   1766c:	cmp	r5, r1
   17670:	beq	17698 <__assert_fail@plt+0x68a4>
   17674:	mov	r0, r5
   17678:	ldr	r3, [r6, #28]
   1767c:	blx	r3
   17680:	cmp	r0, #0
   17684:	bne	176ac <__assert_fail@plt+0x68b8>
   17688:	ldr	r4, [r4, #4]
   1768c:	cmp	r4, #0
   17690:	bne	17668 <__assert_fail@plt+0x6874>
   17694:	mov	r1, #0
   17698:	ldrd	r4, [sp]
   1769c:	mov	r0, r1
   176a0:	ldr	r6, [sp, #8]
   176a4:	add	sp, sp, #12
   176a8:	pop	{pc}		; (ldr pc, [sp], #4)
   176ac:	ldr	r1, [r4]
   176b0:	b	17698 <__assert_fail@plt+0x68a4>
   176b4:	bl	10db8 <abort@plt>
   176b8:	ldr	r3, [r0, #16]
   176bc:	cmp	r3, #0
   176c0:	beq	17714 <__assert_fail@plt+0x6920>
   176c4:	ldr	r3, [r0]
   176c8:	ldr	r2, [r0, #4]
   176cc:	cmp	r3, r2
   176d0:	bcs	17708 <__assert_fail@plt+0x6914>
   176d4:	ldr	r0, [r3]
   176d8:	cmp	r0, #0
   176dc:	bxne	lr
   176e0:	sub	r2, r2, #1
   176e4:	sub	r2, r2, r3
   176e8:	bic	r2, r2, #7
   176ec:	add	r2, r3, r2
   176f0:	b	17700 <__assert_fail@plt+0x690c>
   176f4:	ldr	r0, [r3, #8]!
   176f8:	cmp	r0, #0
   176fc:	bxne	lr
   17700:	cmp	r3, r2
   17704:	bne	176f4 <__assert_fail@plt+0x6900>
   17708:	str	r4, [sp, #-8]!
   1770c:	str	lr, [sp, #4]
   17710:	bl	10db8 <abort@plt>
   17714:	mov	r0, r3
   17718:	bx	lr
   1771c:	strd	r4, [sp, #-16]!
   17720:	mov	r5, r0
   17724:	mov	r4, r1
   17728:	mov	r0, r1
   1772c:	ldr	r1, [r5, #8]
   17730:	ldr	r3, [r5, #24]
   17734:	str	r6, [sp, #8]
   17738:	str	lr, [sp, #12]
   1773c:	blx	r3
   17740:	ldr	r3, [r5, #8]
   17744:	cmp	r0, r3
   17748:	bcs	177b0 <__assert_fail@plt+0x69bc>
   1774c:	ldr	r2, [r5]
   17750:	add	r2, r2, r0, lsl #3
   17754:	mov	r3, r2
   17758:	b	17764 <__assert_fail@plt+0x6970>
   1775c:	cmp	r3, #0
   17760:	beq	1777c <__assert_fail@plt+0x6988>
   17764:	ldm	r3, {r1, r3}
   17768:	cmp	r1, r4
   1776c:	bne	1775c <__assert_fail@plt+0x6968>
   17770:	cmp	r3, #0
   17774:	ldrne	r0, [r3]
   17778:	bne	177a0 <__assert_fail@plt+0x69ac>
   1777c:	ldr	r3, [r5, #4]
   17780:	b	17790 <__assert_fail@plt+0x699c>
   17784:	ldr	r0, [r2]
   17788:	cmp	r0, #0
   1778c:	bne	177a0 <__assert_fail@plt+0x69ac>
   17790:	add	r2, r2, #8
   17794:	cmp	r3, r2
   17798:	bhi	17784 <__assert_fail@plt+0x6990>
   1779c:	mov	r0, #0
   177a0:	ldrd	r4, [sp]
   177a4:	ldr	r6, [sp, #8]
   177a8:	add	sp, sp, #12
   177ac:	pop	{pc}		; (ldr pc, [sp], #4)
   177b0:	bl	10db8 <abort@plt>
   177b4:	strd	r4, [sp, #-16]!
   177b8:	mov	r3, #0
   177bc:	ldr	r5, [r0]
   177c0:	str	r6, [sp, #8]
   177c4:	str	lr, [sp, #12]
   177c8:	ldr	lr, [r0, #4]
   177cc:	cmp	lr, r5
   177d0:	bls	177ec <__assert_fail@plt+0x69f8>
   177d4:	ldr	ip, [r5]
   177d8:	cmp	ip, #0
   177dc:	bne	17800 <__assert_fail@plt+0x6a0c>
   177e0:	add	r5, r5, #8
   177e4:	cmp	r5, lr
   177e8:	bcc	177d4 <__assert_fail@plt+0x69e0>
   177ec:	ldrd	r4, [sp]
   177f0:	mov	r0, r3
   177f4:	ldr	r6, [sp, #8]
   177f8:	add	sp, sp, #12
   177fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17800:	cmp	r2, r3
   17804:	bls	177ec <__assert_fail@plt+0x69f8>
   17808:	str	ip, [r1, r3, lsl #2]
   1780c:	add	r4, r3, #1
   17810:	lsl	lr, r3, #2
   17814:	ldr	ip, [r5, #4]
   17818:	cmp	ip, #0
   1781c:	beq	1787c <__assert_fail@plt+0x6a88>
   17820:	cmp	r2, r4
   17824:	bls	17870 <__assert_fail@plt+0x6a7c>
   17828:	ldr	r6, [ip]
   1782c:	add	r3, r3, #2
   17830:	str	r6, [r1, r4, lsl #2]
   17834:	ldr	ip, [ip, #4]
   17838:	cmp	ip, #0
   1783c:	beq	17868 <__assert_fail@plt+0x6a74>
   17840:	add	lr, lr, #4
   17844:	add	lr, r1, lr
   17848:	cmp	r2, r3
   1784c:	add	r3, r3, #1
   17850:	beq	17874 <__assert_fail@plt+0x6a80>
   17854:	ldr	r4, [ip]
   17858:	str	r4, [lr, #4]!
   1785c:	ldr	ip, [ip, #4]
   17860:	cmp	ip, #0
   17864:	bne	17848 <__assert_fail@plt+0x6a54>
   17868:	ldr	lr, [r0, #4]
   1786c:	b	177e0 <__assert_fail@plt+0x69ec>
   17870:	mov	r2, r4
   17874:	mov	r3, r2
   17878:	b	177ec <__assert_fail@plt+0x69f8>
   1787c:	mov	r3, r4
   17880:	ldr	lr, [r0, #4]
   17884:	b	177e0 <__assert_fail@plt+0x69ec>
   17888:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1788c:	ldr	r3, [r0, #4]
   17890:	strd	r6, [sp, #8]
   17894:	strd	r8, [sp, #16]
   17898:	ldr	r8, [r0]
   1789c:	str	sl, [sp, #24]
   178a0:	str	lr, [sp, #28]
   178a4:	cmp	r3, r8
   178a8:	bls	17924 <__assert_fail@plt+0x6b30>
   178ac:	mov	r7, r2
   178b0:	mov	r6, r1
   178b4:	mov	r9, r0
   178b8:	mov	r5, #0
   178bc:	ldr	r0, [r8]
   178c0:	cmp	r0, #0
   178c4:	bne	178f0 <__assert_fail@plt+0x6afc>
   178c8:	add	r8, r8, #8
   178cc:	cmp	r8, r3
   178d0:	bcc	178bc <__assert_fail@plt+0x6ac8>
   178d4:	mov	r0, r5
   178d8:	ldrd	r4, [sp]
   178dc:	ldrd	r6, [sp, #8]
   178e0:	ldrd	r8, [sp, #16]
   178e4:	ldr	sl, [sp, #24]
   178e8:	add	sp, sp, #28
   178ec:	pop	{pc}		; (ldr pc, [sp], #4)
   178f0:	mov	r4, r8
   178f4:	b	178fc <__assert_fail@plt+0x6b08>
   178f8:	ldr	r0, [r4]
   178fc:	mov	r1, r7
   17900:	blx	r6
   17904:	cmp	r0, #0
   17908:	beq	178d4 <__assert_fail@plt+0x6ae0>
   1790c:	ldr	r4, [r4, #4]
   17910:	add	r5, r5, #1
   17914:	cmp	r4, #0
   17918:	bne	178f8 <__assert_fail@plt+0x6b04>
   1791c:	ldr	r3, [r9, #4]
   17920:	b	178c8 <__assert_fail@plt+0x6ad4>
   17924:	mov	r5, #0
   17928:	b	178d4 <__assert_fail@plt+0x6ae0>
   1792c:	ldrb	r2, [r0]
   17930:	cmp	r2, #0
   17934:	beq	17960 <__assert_fail@plt+0x6b6c>
   17938:	mov	r3, #0
   1793c:	rsb	r3, r3, r3, lsl #5
   17940:	add	r3, r3, r2
   17944:	ldrb	r2, [r0, #1]!
   17948:	udiv	ip, r3, r1
   1794c:	cmp	r2, #0
   17950:	mls	r3, r1, ip, r3
   17954:	bne	1793c <__assert_fail@plt+0x6b48>
   17958:	mov	r0, r3
   1795c:	bx	lr
   17960:	mov	r3, r2
   17964:	mov	r0, r3
   17968:	bx	lr
   1796c:	movw	r3, #37800	; 0x93a8
   17970:	movt	r3, #1
   17974:	strd	r4, [sp, #-8]!
   17978:	ldrd	r4, [r3]
   1797c:	ldr	r1, [r3, #16]
   17980:	ldrd	r2, [r3, #8]
   17984:	strd	r4, [r0]
   17988:	ldrd	r4, [sp]
   1798c:	add	sp, sp, #8
   17990:	strd	r2, [r0, #8]
   17994:	str	r1, [r0, #16]
   17998:	bx	lr
   1799c:	cmp	r2, #0
   179a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   179a4:	movw	r4, #28784	; 0x7070
   179a8:	movt	r4, #1
   179ac:	movne	r4, r2
   179b0:	strd	r6, [sp, #8]
   179b4:	cmp	r3, #0
   179b8:	str	r8, [sp, #16]
   179bc:	mov	r8, r0
   179c0:	mov	r0, #40	; 0x28
   179c4:	movw	r5, #28800	; 0x7080
   179c8:	movt	r5, #1
   179cc:	mov	r7, r1
   179d0:	str	lr, [sp, #20]
   179d4:	movne	r5, r3
   179d8:	bl	18a50 <__assert_fail@plt+0x7c5c>
   179dc:	subs	r6, r0, #0
   179e0:	beq	17a24 <__assert_fail@plt+0x6c30>
   179e4:	cmp	r7, #0
   179e8:	movw	r3, #37800	; 0x93a8
   179ec:	movt	r3, #1
   179f0:	beq	17ab0 <__assert_fail@plt+0x6cbc>
   179f4:	cmp	r7, r3
   179f8:	str	r7, [r6, #20]
   179fc:	beq	17ab4 <__assert_fail@plt+0x6cc0>
   17a00:	vldr	s14, [pc, #456]	; 17bd0 <__assert_fail@plt+0x6ddc>
   17a04:	vldr	s15, [r7, #8]
   17a08:	vcmpe.f32	s15, s14
   17a0c:	vmrs	APSR_nzcv, fpscr
   17a10:	bgt	17a3c <__assert_fail@plt+0x6c48>
   17a14:	str	r3, [r6, #20]
   17a18:	mov	r0, r6
   17a1c:	mov	r6, #0
   17a20:	bl	13598 <__assert_fail@plt+0x27a4>
   17a24:	mov	r0, r6
   17a28:	ldrd	r4, [sp]
   17a2c:	ldrd	r6, [sp, #8]
   17a30:	ldr	r8, [sp, #16]
   17a34:	add	sp, sp, #20
   17a38:	pop	{pc}		; (ldr pc, [sp], #4)
   17a3c:	vldr	s13, [pc, #400]	; 17bd4 <__assert_fail@plt+0x6de0>
   17a40:	vcmpe.f32	s15, s13
   17a44:	vmrs	APSR_nzcv, fpscr
   17a48:	bpl	17a14 <__assert_fail@plt+0x6c20>
   17a4c:	vldr	s13, [pc, #388]	; 17bd8 <__assert_fail@plt+0x6de4>
   17a50:	vldr	s12, [r7, #12]
   17a54:	vcmpe.f32	s12, s13
   17a58:	vmrs	APSR_nzcv, fpscr
   17a5c:	ble	17a14 <__assert_fail@plt+0x6c20>
   17a60:	vldr	s13, [r7]
   17a64:	vcmpe.f32	s13, #0.0
   17a68:	vmrs	APSR_nzcv, fpscr
   17a6c:	blt	17a14 <__assert_fail@plt+0x6c20>
   17a70:	vadd.f32	s14, s13, s14
   17a74:	vldr	s13, [r7, #4]
   17a78:	vcmpe.f32	s14, s13
   17a7c:	vmrs	APSR_nzcv, fpscr
   17a80:	bpl	17a14 <__assert_fail@plt+0x6c20>
   17a84:	vldr	s12, [pc, #336]	; 17bdc <__assert_fail@plt+0x6de8>
   17a88:	vcmpe.f32	s13, s12
   17a8c:	vmrs	APSR_nzcv, fpscr
   17a90:	bhi	17a14 <__assert_fail@plt+0x6c20>
   17a94:	vcmpe.f32	s15, s14
   17a98:	vmrs	APSR_nzcv, fpscr
   17a9c:	ble	17a14 <__assert_fail@plt+0x6c20>
   17aa0:	ldrb	r3, [r7, #16]
   17aa4:	cmp	r3, #0
   17aa8:	bne	17adc <__assert_fail@plt+0x6ce8>
   17aac:	b	17ab8 <__assert_fail@plt+0x6cc4>
   17ab0:	str	r3, [r6, #20]
   17ab4:	vldr	s15, [pc, #292]	; 17be0 <__assert_fail@plt+0x6dec>
   17ab8:	vmov	s14, r8
   17abc:	vldr	s13, [pc, #288]	; 17be4 <__assert_fail@plt+0x6df0>
   17ac0:	vcvt.f32.u32	s12, s14
   17ac4:	vdiv.f32	s14, s12, s15
   17ac8:	vcmpe.f32	s14, s13
   17acc:	vmrs	APSR_nzcv, fpscr
   17ad0:	bge	17b64 <__assert_fail@plt+0x6d70>
   17ad4:	vcvt.u32.f32	s15, s14
   17ad8:	vmov	r8, s15
   17adc:	cmp	r8, #10
   17ae0:	movcs	r3, r8
   17ae4:	movcc	r3, #10
   17ae8:	orr	r3, r3, #1
   17aec:	cmn	r3, #1
   17af0:	beq	17b64 <__assert_fail@plt+0x6d70>
   17af4:	movw	lr, #43691	; 0xaaab
   17af8:	movt	lr, #43690	; 0xaaaa
   17afc:	umull	r1, r2, lr, r3
   17b00:	cmp	r3, #9
   17b04:	lsr	r2, r2, #1
   17b08:	add	r2, r2, r2, lsl #1
   17b0c:	sub	r2, r3, r2
   17b10:	bls	17b50 <__assert_fail@plt+0x6d5c>
   17b14:	cmp	r2, #0
   17b18:	beq	17b58 <__assert_fail@plt+0x6d64>
   17b1c:	mov	ip, #16
   17b20:	mov	r0, #9
   17b24:	mov	r1, #3
   17b28:	b	17b34 <__assert_fail@plt+0x6d40>
   17b2c:	cmp	r2, #0
   17b30:	beq	17b58 <__assert_fail@plt+0x6d64>
   17b34:	add	r1, r1, #2
   17b38:	add	r0, r0, ip
   17b3c:	cmp	r0, r3
   17b40:	add	ip, ip, #8
   17b44:	udiv	r2, r3, r1
   17b48:	mls	r2, r1, r2, r3
   17b4c:	bcc	17b2c <__assert_fail@plt+0x6d38>
   17b50:	cmp	r2, #0
   17b54:	bne	17b70 <__assert_fail@plt+0x6d7c>
   17b58:	add	r3, r3, #2
   17b5c:	cmn	r3, #1
   17b60:	bne	17afc <__assert_fail@plt+0x6d08>
   17b64:	mov	r3, #0
   17b68:	str	r3, [r6, #8]
   17b6c:	b	17a18 <__assert_fail@plt+0x6c24>
   17b70:	lsrs	r2, r3, #30
   17b74:	movne	r7, #1
   17b78:	moveq	r7, #0
   17b7c:	tst	r3, #536870912	; 0x20000000
   17b80:	bne	17b64 <__assert_fail@plt+0x6d70>
   17b84:	cmp	r7, #0
   17b88:	bne	17b64 <__assert_fail@plt+0x6d70>
   17b8c:	mov	r0, r3
   17b90:	mov	r1, #8
   17b94:	str	r3, [r6, #8]
   17b98:	bl	189dc <__assert_fail@plt+0x7be8>
   17b9c:	cmp	r0, #0
   17ba0:	str	r0, [r6]
   17ba4:	beq	17a18 <__assert_fail@plt+0x6c24>
   17ba8:	ldr	r3, [r6, #8]
   17bac:	str	r7, [r6, #12]
   17bb0:	str	r7, [r6, #16]
   17bb4:	strd	r4, [r6, #24]
   17bb8:	str	r7, [r6, #36]	; 0x24
   17bbc:	add	r0, r0, r3, lsl #3
   17bc0:	ldr	r3, [sp, #24]
   17bc4:	str	r0, [r6, #4]
   17bc8:	str	r3, [r6, #32]
   17bcc:	b	17a24 <__assert_fail@plt+0x6c30>
   17bd0:	stclcc	12, cr12, [ip, #820]	; 0x334
   17bd4:	svccc	0x00666666
   17bd8:	svccc	0x008ccccd
   17bdc:	svccc	0x00800000
   17be0:	svccc	0x004ccccd
   17be4:	svcmi	0x00800000
   17be8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17bec:	mov	r5, r0
   17bf0:	ldr	r2, [r0, #4]
   17bf4:	strd	r6, [sp, #8]
   17bf8:	ldr	r6, [r0]
   17bfc:	str	r8, [sp, #16]
   17c00:	str	lr, [sp, #20]
   17c04:	cmp	r6, r2
   17c08:	addcc	r6, r6, #8
   17c0c:	movcc	r7, #0
   17c10:	bcc	17c24 <__assert_fail@plt+0x6e30>
   17c14:	b	17c98 <__assert_fail@plt+0x6ea4>
   17c18:	cmp	r2, r6
   17c1c:	add	r6, r6, #8
   17c20:	bls	17c98 <__assert_fail@plt+0x6ea4>
   17c24:	ldr	r3, [r6, #-8]
   17c28:	cmp	r3, #0
   17c2c:	beq	17c18 <__assert_fail@plt+0x6e24>
   17c30:	ldr	r4, [r6, #-4]
   17c34:	ldr	r3, [r5, #32]
   17c38:	cmp	r4, #0
   17c3c:	beq	17c70 <__assert_fail@plt+0x6e7c>
   17c40:	cmp	r3, #0
   17c44:	beq	17cb8 <__assert_fail@plt+0x6ec4>
   17c48:	ldr	r0, [r4]
   17c4c:	blx	r3
   17c50:	ldr	r1, [r4, #4]
   17c54:	ldr	r3, [r5, #32]
   17c58:	ldr	r2, [r5, #36]	; 0x24
   17c5c:	str	r7, [r4]
   17c60:	str	r2, [r4, #4]
   17c64:	str	r4, [r5, #36]	; 0x24
   17c68:	subs	r4, r1, #0
   17c6c:	bne	17c40 <__assert_fail@plt+0x6e4c>
   17c70:	cmp	r3, #0
   17c74:	beq	17c80 <__assert_fail@plt+0x6e8c>
   17c78:	ldr	r0, [r6, #-8]
   17c7c:	blx	r3
   17c80:	str	r7, [r6, #-8]
   17c84:	str	r7, [r6, #-4]
   17c88:	ldr	r2, [r5, #4]
   17c8c:	cmp	r2, r6
   17c90:	add	r6, r6, #8
   17c94:	bhi	17c24 <__assert_fail@plt+0x6e30>
   17c98:	mov	r3, #0
   17c9c:	ldrd	r6, [sp, #8]
   17ca0:	ldr	r8, [sp, #16]
   17ca4:	str	r3, [r5, #12]
   17ca8:	str	r3, [r5, #16]
   17cac:	ldrd	r4, [sp]
   17cb0:	add	sp, sp, #20
   17cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   17cb8:	ldr	r2, [r5, #36]	; 0x24
   17cbc:	str	r7, [r4]
   17cc0:	ldr	r3, [r4, #4]
   17cc4:	str	r2, [r4, #4]
   17cc8:	mov	r2, r4
   17ccc:	str	r2, [r5, #36]	; 0x24
   17cd0:	subs	r4, r3, #0
   17cd4:	bne	17cbc <__assert_fail@plt+0x6ec8>
   17cd8:	b	17c80 <__assert_fail@plt+0x6e8c>
   17cdc:	strd	r4, [sp, #-16]!
   17ce0:	ldr	r2, [r0, #32]
   17ce4:	ldr	r5, [r0]
   17ce8:	ldr	r3, [r0, #4]
   17cec:	cmp	r2, #0
   17cf0:	str	r6, [sp, #8]
   17cf4:	mov	r6, r0
   17cf8:	str	lr, [sp, #12]
   17cfc:	beq	17d64 <__assert_fail@plt+0x6f70>
   17d00:	ldr	r2, [r0, #16]
   17d04:	cmp	r2, #0
   17d08:	beq	17d64 <__assert_fail@plt+0x6f70>
   17d0c:	cmp	r5, r3
   17d10:	bcc	17d24 <__assert_fail@plt+0x6f30>
   17d14:	b	17d98 <__assert_fail@plt+0x6fa4>
   17d18:	add	r5, r5, #8
   17d1c:	cmp	r5, r3
   17d20:	bcs	17d60 <__assert_fail@plt+0x6f6c>
   17d24:	ldr	r0, [r5]
   17d28:	cmp	r0, #0
   17d2c:	beq	17d18 <__assert_fail@plt+0x6f24>
   17d30:	mov	r4, r5
   17d34:	b	17d3c <__assert_fail@plt+0x6f48>
   17d38:	ldr	r0, [r4]
   17d3c:	ldr	r3, [r6, #32]
   17d40:	blx	r3
   17d44:	ldr	r4, [r4, #4]
   17d48:	cmp	r4, #0
   17d4c:	bne	17d38 <__assert_fail@plt+0x6f44>
   17d50:	ldr	r3, [r6, #4]
   17d54:	add	r5, r5, #8
   17d58:	cmp	r5, r3
   17d5c:	bcc	17d24 <__assert_fail@plt+0x6f30>
   17d60:	ldr	r5, [r6]
   17d64:	cmp	r3, r5
   17d68:	bls	17d98 <__assert_fail@plt+0x6fa4>
   17d6c:	ldr	r0, [r5, #4]
   17d70:	cmp	r0, #0
   17d74:	beq	17d8c <__assert_fail@plt+0x6f98>
   17d78:	ldr	r4, [r0, #4]
   17d7c:	bl	13598 <__assert_fail@plt+0x27a4>
   17d80:	subs	r0, r4, #0
   17d84:	bne	17d78 <__assert_fail@plt+0x6f84>
   17d88:	ldr	r3, [r6, #4]
   17d8c:	add	r5, r5, #8
   17d90:	cmp	r5, r3
   17d94:	bcc	17d6c <__assert_fail@plt+0x6f78>
   17d98:	ldr	r0, [r6, #36]	; 0x24
   17d9c:	cmp	r0, #0
   17da0:	beq	17db4 <__assert_fail@plt+0x6fc0>
   17da4:	ldr	r4, [r0, #4]
   17da8:	bl	13598 <__assert_fail@plt+0x27a4>
   17dac:	subs	r0, r4, #0
   17db0:	bne	17da4 <__assert_fail@plt+0x6fb0>
   17db4:	ldr	r0, [r6]
   17db8:	bl	13598 <__assert_fail@plt+0x27a4>
   17dbc:	mov	r0, r6
   17dc0:	ldrd	r4, [sp]
   17dc4:	ldr	r6, [sp, #8]
   17dc8:	ldr	lr, [sp, #12]
   17dcc:	add	sp, sp, #16
   17dd0:	b	13598 <__assert_fail@plt+0x27a4>
   17dd4:	ldr	r3, [r0, #20]
   17dd8:	strd	r4, [sp, #-20]!	; 0xffffffec
   17ddc:	mov	r5, r0
   17de0:	ldrb	r2, [r3, #16]
   17de4:	strd	r6, [sp, #8]
   17de8:	str	lr, [sp, #16]
   17dec:	sub	sp, sp, #44	; 0x2c
   17df0:	cmp	r2, #0
   17df4:	bne	17e20 <__assert_fail@plt+0x702c>
   17df8:	vmov	s15, r1
   17dfc:	vldr	s12, [r3, #8]
   17e00:	vldr	s13, [pc, #444]	; 17fc4 <__assert_fail@plt+0x71d0>
   17e04:	vcvt.f32.u32	s15, s15
   17e08:	vdiv.f32	s14, s15, s12
   17e0c:	vcmpe.f32	s14, s13
   17e10:	vmrs	APSR_nzcv, fpscr
   17e14:	vcvtlt.u32.f32	s15, s14
   17e18:	vmovlt	r1, s15
   17e1c:	bge	17ea4 <__assert_fail@plt+0x70b0>
   17e20:	cmp	r1, #10
   17e24:	movcc	r1, #10
   17e28:	orr	r4, r1, #1
   17e2c:	cmn	r4, #1
   17e30:	beq	17ea4 <__assert_fail@plt+0x70b0>
   17e34:	movw	ip, #43691	; 0xaaab
   17e38:	movt	ip, #43690	; 0xaaaa
   17e3c:	umull	r2, r3, ip, r4
   17e40:	cmp	r4, #9
   17e44:	lsr	r3, r3, #1
   17e48:	add	r3, r3, r3, lsl #1
   17e4c:	sub	r3, r4, r3
   17e50:	bls	17e90 <__assert_fail@plt+0x709c>
   17e54:	cmp	r3, #0
   17e58:	beq	17e98 <__assert_fail@plt+0x70a4>
   17e5c:	mov	r0, #16
   17e60:	mov	r1, #9
   17e64:	mov	r2, #3
   17e68:	b	17e78 <__assert_fail@plt+0x7084>
   17e6c:	cmp	r3, #0
   17e70:	add	r0, r0, #8
   17e74:	beq	17e98 <__assert_fail@plt+0x70a4>
   17e78:	add	r2, r2, #2
   17e7c:	add	r1, r1, r0
   17e80:	cmp	r1, r4
   17e84:	udiv	r3, r4, r2
   17e88:	mls	r3, r2, r3, r4
   17e8c:	bcc	17e6c <__assert_fail@plt+0x7078>
   17e90:	cmp	r3, #0
   17e94:	bne	17ec0 <__assert_fail@plt+0x70cc>
   17e98:	add	r4, r4, #2
   17e9c:	cmn	r4, #1
   17ea0:	bne	17e3c <__assert_fail@plt+0x7048>
   17ea4:	mov	r4, #0
   17ea8:	mov	r0, r4
   17eac:	add	sp, sp, #44	; 0x2c
   17eb0:	ldrd	r4, [sp]
   17eb4:	ldrd	r6, [sp, #8]
   17eb8:	add	sp, sp, #16
   17ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ec0:	lsrs	r3, r4, #30
   17ec4:	movne	r6, #1
   17ec8:	moveq	r6, #0
   17ecc:	tst	r4, #536870912	; 0x20000000
   17ed0:	bne	17ea4 <__assert_fail@plt+0x70b0>
   17ed4:	cmp	r6, #0
   17ed8:	bne	17ea4 <__assert_fail@plt+0x70b0>
   17edc:	ldr	r3, [r5, #8]
   17ee0:	cmp	r3, r4
   17ee4:	beq	17f8c <__assert_fail@plt+0x7198>
   17ee8:	mov	r1, #8
   17eec:	mov	r0, r4
   17ef0:	bl	189dc <__assert_fail@plt+0x7be8>
   17ef4:	cmp	r0, #0
   17ef8:	str	r0, [sp]
   17efc:	beq	17ea4 <__assert_fail@plt+0x70b0>
   17f00:	add	r3, r0, r4, lsl #3
   17f04:	ldr	r7, [r5, #20]
   17f08:	mov	r2, r6
   17f0c:	mov	r0, sp
   17f10:	mov	r1, r5
   17f14:	ldr	lr, [r5, #28]
   17f18:	stmib	sp, {r3, r4, r6}
   17f1c:	ldr	r4, [r5, #24]
   17f20:	strd	r6, [sp, #16]
   17f24:	ldr	ip, [r5, #32]
   17f28:	ldr	r3, [r5, #36]	; 0x24
   17f2c:	str	r4, [sp, #24]
   17f30:	str	lr, [sp, #28]
   17f34:	str	ip, [sp, #32]
   17f38:	str	r3, [sp, #36]	; 0x24
   17f3c:	bl	171f0 <__assert_fail@plt+0x63fc>
   17f40:	subs	r4, r0, #0
   17f44:	bne	17f94 <__assert_fail@plt+0x71a0>
   17f48:	ldr	r3, [sp, #36]	; 0x24
   17f4c:	mov	r2, #1
   17f50:	mov	r1, sp
   17f54:	mov	r0, r5
   17f58:	str	r3, [r5, #36]	; 0x24
   17f5c:	bl	171f0 <__assert_fail@plt+0x63fc>
   17f60:	cmp	r0, #0
   17f64:	beq	17fc0 <__assert_fail@plt+0x71cc>
   17f68:	mov	r1, sp
   17f6c:	mov	r0, r5
   17f70:	mov	r2, r4
   17f74:	bl	171f0 <__assert_fail@plt+0x63fc>
   17f78:	cmp	r0, #0
   17f7c:	beq	17fc0 <__assert_fail@plt+0x71cc>
   17f80:	ldr	r0, [sp]
   17f84:	bl	13598 <__assert_fail@plt+0x27a4>
   17f88:	b	17ea8 <__assert_fail@plt+0x70b4>
   17f8c:	mov	r4, #1
   17f90:	b	17ea8 <__assert_fail@plt+0x70b4>
   17f94:	ldr	r0, [r5]
   17f98:	bl	13598 <__assert_fail@plt+0x27a4>
   17f9c:	ldrd	r2, [sp]
   17fa0:	ldr	r1, [sp, #8]
   17fa4:	strd	r2, [r5]
   17fa8:	ldr	r2, [sp, #12]
   17fac:	str	r1, [r5, #8]
   17fb0:	ldr	r3, [sp, #36]	; 0x24
   17fb4:	str	r2, [r5, #12]
   17fb8:	str	r3, [r5, #36]	; 0x24
   17fbc:	b	17ea8 <__assert_fail@plt+0x70b4>
   17fc0:	bl	10db8 <abort@plt>
   17fc4:	svcmi	0x00800000
   17fc8:	strd	r4, [sp, #-16]!
   17fcc:	str	r6, [sp, #8]
   17fd0:	subs	r6, r1, #0
   17fd4:	str	lr, [sp, #12]
   17fd8:	sub	sp, sp, #8
   17fdc:	beq	18168 <__assert_fail@plt+0x7374>
   17fe0:	mov	r3, #0
   17fe4:	mov	r5, r2
   17fe8:	add	r2, sp, #4
   17fec:	mov	r4, r0
   17ff0:	bl	17090 <__assert_fail@plt+0x629c>
   17ff4:	subs	r3, r0, #0
   17ff8:	beq	18024 <__assert_fail@plt+0x7230>
   17ffc:	cmp	r5, #0
   18000:	moveq	r0, r5
   18004:	beq	18010 <__assert_fail@plt+0x721c>
   18008:	mov	r0, #0
   1800c:	str	r3, [r5]
   18010:	add	sp, sp, #8
   18014:	ldrd	r4, [sp]
   18018:	ldr	r6, [sp, #8]
   1801c:	add	sp, sp, #12
   18020:	pop	{pc}		; (ldr pc, [sp], #4)
   18024:	vldr	s15, [r4, #8]
   18028:	vldr	s14, [r4, #12]
   1802c:	ldr	r3, [r4, #20]
   18030:	vcvt.f32.u32	s15, s15
   18034:	vcvt.f32.u32	s14, s14
   18038:	vldr	s13, [r3, #8]
   1803c:	vmul.f32	s12, s13, s15
   18040:	vcmpe.f32	s14, s12
   18044:	vmrs	APSR_nzcv, fpscr
   18048:	bgt	18090 <__assert_fail@plt+0x729c>
   1804c:	ldr	r2, [sp, #4]
   18050:	ldr	r3, [r2]
   18054:	cmp	r3, #0
   18058:	beq	18194 <__assert_fail@plt+0x73a0>
   1805c:	ldr	r3, [r4, #36]	; 0x24
   18060:	cmp	r3, #0
   18064:	beq	181b8 <__assert_fail@plt+0x73c4>
   18068:	ldr	r1, [r3, #4]
   1806c:	str	r1, [r4, #36]	; 0x24
   18070:	ldr	r1, [r4, #16]
   18074:	mov	r0, #1
   18078:	ldr	ip, [r2, #4]
   1807c:	add	r1, r1, r0
   18080:	stm	r3, {r6, ip}
   18084:	str	r3, [r2, #4]
   18088:	str	r1, [r4, #16]
   1808c:	b	18010 <__assert_fail@plt+0x721c>
   18090:	movw	r2, #37800	; 0x93a8
   18094:	movt	r2, #1
   18098:	cmp	r3, r2
   1809c:	beq	181d0 <__assert_fail@plt+0x73dc>
   180a0:	vldr	s12, [pc, #320]	; 181e8 <__assert_fail@plt+0x73f4>
   180a4:	vcmpe.f32	s13, s12
   180a8:	vmrs	APSR_nzcv, fpscr
   180ac:	ble	1816c <__assert_fail@plt+0x7378>
   180b0:	vldr	s11, [pc, #308]	; 181ec <__assert_fail@plt+0x73f8>
   180b4:	vcmpe.f32	s13, s11
   180b8:	vmrs	APSR_nzcv, fpscr
   180bc:	bpl	1816c <__assert_fail@plt+0x7378>
   180c0:	vldr	s10, [pc, #296]	; 181f0 <__assert_fail@plt+0x73fc>
   180c4:	vldr	s11, [r3, #12]
   180c8:	vcmpe.f32	s11, s10
   180cc:	vmrs	APSR_nzcv, fpscr
   180d0:	ble	1816c <__assert_fail@plt+0x7378>
   180d4:	vldr	s10, [r3]
   180d8:	vcmpe.f32	s10, #0.0
   180dc:	vmrs	APSR_nzcv, fpscr
   180e0:	blt	1816c <__assert_fail@plt+0x7378>
   180e4:	vadd.f32	s12, s10, s12
   180e8:	vldr	s10, [r3, #4]
   180ec:	vcmpe.f32	s12, s10
   180f0:	vmrs	APSR_nzcv, fpscr
   180f4:	bpl	1816c <__assert_fail@plt+0x7378>
   180f8:	vldr	s9, [pc, #244]	; 181f4 <__assert_fail@plt+0x7400>
   180fc:	vcmpe.f32	s10, s9
   18100:	vmrs	APSR_nzcv, fpscr
   18104:	bhi	1816c <__assert_fail@plt+0x7378>
   18108:	vcmpe.f32	s13, s12
   1810c:	vmrs	APSR_nzcv, fpscr
   18110:	ble	1816c <__assert_fail@plt+0x7378>
   18114:	ldrb	r3, [r3, #16]
   18118:	vmul.f32	s15, s15, s11
   1811c:	cmp	r3, #0
   18120:	beq	1818c <__assert_fail@plt+0x7398>
   18124:	vldr	s14, [pc, #204]	; 181f8 <__assert_fail@plt+0x7404>
   18128:	vcmpe.f32	s15, s14
   1812c:	vmrs	APSR_nzcv, fpscr
   18130:	bge	181c8 <__assert_fail@plt+0x73d4>
   18134:	vcvt.u32.f32	s15, s15
   18138:	mov	r0, r4
   1813c:	vmov	r1, s15
   18140:	bl	17dd4 <__assert_fail@plt+0x6fe0>
   18144:	cmp	r0, #0
   18148:	beq	181c8 <__assert_fail@plt+0x73d4>
   1814c:	add	r2, sp, #4
   18150:	mov	r3, #0
   18154:	mov	r1, r6
   18158:	mov	r0, r4
   1815c:	bl	17090 <__assert_fail@plt+0x629c>
   18160:	cmp	r0, #0
   18164:	beq	1804c <__assert_fail@plt+0x7258>
   18168:	bl	10db8 <abort@plt>
   1816c:	vldr	s13, [pc, #136]	; 181fc <__assert_fail@plt+0x7408>
   18170:	str	r2, [r4, #20]
   18174:	vmul.f32	s12, s15, s13
   18178:	vcmpe.f32	s14, s12
   1817c:	vmrs	APSR_nzcv, fpscr
   18180:	ble	1804c <__assert_fail@plt+0x7258>
   18184:	vldr	s14, [pc, #116]	; 18200 <__assert_fail@plt+0x740c>
   18188:	vmul.f32	s15, s15, s14
   1818c:	vmul.f32	s15, s15, s13
   18190:	b	18124 <__assert_fail@plt+0x7330>
   18194:	ldr	r1, [r4, #12]
   18198:	mov	r0, #1
   1819c:	ldr	r3, [r4, #16]
   181a0:	str	r6, [r2]
   181a4:	add	r2, r1, r0
   181a8:	add	r3, r3, r0
   181ac:	str	r2, [r4, #12]
   181b0:	str	r3, [r4, #16]
   181b4:	b	18010 <__assert_fail@plt+0x721c>
   181b8:	mov	r0, #8
   181bc:	bl	18a50 <__assert_fail@plt+0x7c5c>
   181c0:	subs	r3, r0, #0
   181c4:	bne	181e0 <__assert_fail@plt+0x73ec>
   181c8:	mvn	r0, #0
   181cc:	b	18010 <__assert_fail@plt+0x721c>
   181d0:	vldr	s14, [pc, #40]	; 18200 <__assert_fail@plt+0x740c>
   181d4:	vldr	s13, [pc, #32]	; 181fc <__assert_fail@plt+0x7408>
   181d8:	vmul.f32	s15, s15, s14
   181dc:	b	1818c <__assert_fail@plt+0x7398>
   181e0:	ldr	r2, [sp, #4]
   181e4:	b	18070 <__assert_fail@plt+0x727c>
   181e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   181ec:	svccc	0x00666666
   181f0:	svccc	0x008ccccd
   181f4:	svccc	0x00800000
   181f8:	svcmi	0x00800000
   181fc:	svccc	0x004ccccd
   18200:	svccc	0x00b4fdf4
   18204:	strd	r4, [sp, #-16]!
   18208:	str	r6, [sp, #8]
   1820c:	subs	r6, r1, #0
   18210:	str	lr, [sp, #12]
   18214:	sub	sp, sp, #8
   18218:	beq	18394 <__assert_fail@plt+0x75a0>
   1821c:	mov	r3, #0
   18220:	add	r2, sp, #4
   18224:	mov	r4, r0
   18228:	bl	17090 <__assert_fail@plt+0x629c>
   1822c:	subs	r5, r0, #0
   18230:	beq	1824c <__assert_fail@plt+0x7458>
   18234:	mov	r0, r5
   18238:	add	sp, sp, #8
   1823c:	ldrd	r4, [sp]
   18240:	ldr	r6, [sp, #8]
   18244:	add	sp, sp, #12
   18248:	pop	{pc}		; (ldr pc, [sp], #4)
   1824c:	vldr	s15, [r4, #8]
   18250:	vldr	s14, [r4, #12]
   18254:	ldr	r3, [r4, #20]
   18258:	vcvt.f32.u32	s15, s15
   1825c:	vcvt.f32.u32	s14, s14
   18260:	vldr	s13, [r3, #8]
   18264:	vmul.f32	s12, s13, s15
   18268:	vcmpe.f32	s14, s12
   1826c:	vmrs	APSR_nzcv, fpscr
   18270:	bgt	182bc <__assert_fail@plt+0x74c8>
   18274:	ldr	r3, [sp, #4]
   18278:	ldr	r2, [r3]
   1827c:	cmp	r2, #0
   18280:	beq	183c0 <__assert_fail@plt+0x75cc>
   18284:	ldr	r0, [r4, #36]	; 0x24
   18288:	cmp	r0, #0
   1828c:	beq	183e4 <__assert_fail@plt+0x75f0>
   18290:	ldr	r2, [r0, #4]
   18294:	str	r2, [r4, #36]	; 0x24
   18298:	ldr	r2, [r4, #16]
   1829c:	mov	r5, r6
   182a0:	ldr	r1, [r3, #4]
   182a4:	str	r6, [r0]
   182a8:	add	r2, r2, #1
   182ac:	str	r1, [r0, #4]
   182b0:	str	r0, [r3, #4]
   182b4:	str	r2, [r4, #16]
   182b8:	b	18234 <__assert_fail@plt+0x7440>
   182bc:	movw	r2, #37800	; 0x93a8
   182c0:	movt	r2, #1
   182c4:	cmp	r3, r2
   182c8:	beq	183fc <__assert_fail@plt+0x7608>
   182cc:	vldr	s12, [pc, #312]	; 1840c <__assert_fail@plt+0x7618>
   182d0:	vcmpe.f32	s13, s12
   182d4:	vmrs	APSR_nzcv, fpscr
   182d8:	ble	18398 <__assert_fail@plt+0x75a4>
   182dc:	vldr	s11, [pc, #300]	; 18410 <__assert_fail@plt+0x761c>
   182e0:	vcmpe.f32	s13, s11
   182e4:	vmrs	APSR_nzcv, fpscr
   182e8:	bpl	18398 <__assert_fail@plt+0x75a4>
   182ec:	vldr	s10, [pc, #288]	; 18414 <__assert_fail@plt+0x7620>
   182f0:	vldr	s11, [r3, #12]
   182f4:	vcmpe.f32	s11, s10
   182f8:	vmrs	APSR_nzcv, fpscr
   182fc:	ble	18398 <__assert_fail@plt+0x75a4>
   18300:	vldr	s10, [r3]
   18304:	vcmpe.f32	s10, #0.0
   18308:	vmrs	APSR_nzcv, fpscr
   1830c:	blt	18398 <__assert_fail@plt+0x75a4>
   18310:	vadd.f32	s12, s10, s12
   18314:	vldr	s10, [r3, #4]
   18318:	vcmpe.f32	s12, s10
   1831c:	vmrs	APSR_nzcv, fpscr
   18320:	bpl	18398 <__assert_fail@plt+0x75a4>
   18324:	vldr	s9, [pc, #236]	; 18418 <__assert_fail@plt+0x7624>
   18328:	vcmpe.f32	s10, s9
   1832c:	vmrs	APSR_nzcv, fpscr
   18330:	bhi	18398 <__assert_fail@plt+0x75a4>
   18334:	vcmpe.f32	s13, s12
   18338:	vmrs	APSR_nzcv, fpscr
   1833c:	ble	18398 <__assert_fail@plt+0x75a4>
   18340:	ldrb	r3, [r3, #16]
   18344:	vmul.f32	s15, s15, s11
   18348:	cmp	r3, #0
   1834c:	beq	183b8 <__assert_fail@plt+0x75c4>
   18350:	vldr	s14, [pc, #196]	; 1841c <__assert_fail@plt+0x7628>
   18354:	vcmpe.f32	s15, s14
   18358:	vmrs	APSR_nzcv, fpscr
   1835c:	bge	18234 <__assert_fail@plt+0x7440>
   18360:	vcvt.u32.f32	s15, s15
   18364:	mov	r0, r4
   18368:	vmov	r1, s15
   1836c:	bl	17dd4 <__assert_fail@plt+0x6fe0>
   18370:	cmp	r0, #0
   18374:	beq	18234 <__assert_fail@plt+0x7440>
   18378:	add	r2, sp, #4
   1837c:	mov	r3, #0
   18380:	mov	r1, r6
   18384:	mov	r0, r4
   18388:	bl	17090 <__assert_fail@plt+0x629c>
   1838c:	cmp	r0, #0
   18390:	beq	18274 <__assert_fail@plt+0x7480>
   18394:	bl	10db8 <abort@plt>
   18398:	vldr	s13, [pc, #128]	; 18420 <__assert_fail@plt+0x762c>
   1839c:	str	r2, [r4, #20]
   183a0:	vmul.f32	s12, s15, s13
   183a4:	vcmpe.f32	s14, s12
   183a8:	vmrs	APSR_nzcv, fpscr
   183ac:	ble	18274 <__assert_fail@plt+0x7480>
   183b0:	vldr	s14, [pc, #108]	; 18424 <__assert_fail@plt+0x7630>
   183b4:	vmul.f32	s15, s15, s14
   183b8:	vmul.f32	s15, s15, s13
   183bc:	b	18350 <__assert_fail@plt+0x755c>
   183c0:	ldr	r2, [r4, #12]
   183c4:	mov	r5, r6
   183c8:	str	r6, [r3]
   183cc:	ldr	r3, [r4, #16]
   183d0:	add	r2, r2, #1
   183d4:	add	r3, r3, #1
   183d8:	str	r2, [r4, #12]
   183dc:	str	r3, [r4, #16]
   183e0:	b	18234 <__assert_fail@plt+0x7440>
   183e4:	mov	r0, #8
   183e8:	bl	18a50 <__assert_fail@plt+0x7c5c>
   183ec:	cmp	r0, #0
   183f0:	beq	18234 <__assert_fail@plt+0x7440>
   183f4:	ldr	r3, [sp, #4]
   183f8:	b	18298 <__assert_fail@plt+0x74a4>
   183fc:	vldr	s14, [pc, #32]	; 18424 <__assert_fail@plt+0x7630>
   18400:	vldr	s13, [pc, #24]	; 18420 <__assert_fail@plt+0x762c>
   18404:	vmul.f32	s15, s15, s14
   18408:	b	183b8 <__assert_fail@plt+0x75c4>
   1840c:	stclcc	12, cr12, [ip, #820]	; 0x334
   18410:	svccc	0x00666666
   18414:	svccc	0x008ccccd
   18418:	svccc	0x00800000
   1841c:	svcmi	0x00800000
   18420:	svccc	0x004ccccd
   18424:	svccc	0x00b4fdf4
   18428:	strd	r4, [sp, #-16]!
   1842c:	mov	r3, #1
   18430:	mov	r4, r0
   18434:	str	r6, [sp, #8]
   18438:	str	lr, [sp, #12]
   1843c:	sub	sp, sp, #8
   18440:	add	r2, sp, #4
   18444:	bl	17090 <__assert_fail@plt+0x629c>
   18448:	subs	r5, r0, #0
   1844c:	beq	1846c <__assert_fail@plt+0x7678>
   18450:	ldr	r2, [sp, #4]
   18454:	ldr	r3, [r4, #16]
   18458:	ldr	r2, [r2]
   1845c:	sub	r3, r3, #1
   18460:	str	r3, [r4, #16]
   18464:	cmp	r2, #0
   18468:	beq	18484 <__assert_fail@plt+0x7690>
   1846c:	mov	r0, r5
   18470:	add	sp, sp, #8
   18474:	ldrd	r4, [sp]
   18478:	ldr	r6, [sp, #8]
   1847c:	add	sp, sp, #12
   18480:	pop	{pc}		; (ldr pc, [sp], #4)
   18484:	vldr	s15, [r4, #8]
   18488:	ldr	r3, [r4, #12]
   1848c:	ldr	r2, [r4, #20]
   18490:	vcvt.f32.u32	s15, s15
   18494:	sub	r3, r3, #1
   18498:	vmov	s14, r3
   1849c:	vldr	s13, [r2]
   184a0:	str	r3, [r4, #12]
   184a4:	vmul.f32	s12, s13, s15
   184a8:	vcvt.f32.u32	s14, s14
   184ac:	vcmpe.f32	s14, s12
   184b0:	vmrs	APSR_nzcv, fpscr
   184b4:	bpl	1846c <__assert_fail@plt+0x7678>
   184b8:	movw	r3, #37800	; 0x93a8
   184bc:	movt	r3, #1
   184c0:	cmp	r2, r3
   184c4:	beq	185a4 <__assert_fail@plt+0x77b0>
   184c8:	vldr	s11, [pc, #224]	; 185b0 <__assert_fail@plt+0x77bc>
   184cc:	vldr	s12, [r2, #8]
   184d0:	vcmpe.f32	s12, s11
   184d4:	vmrs	APSR_nzcv, fpscr
   184d8:	ble	1858c <__assert_fail@plt+0x7798>
   184dc:	vldr	s10, [pc, #208]	; 185b4 <__assert_fail@plt+0x77c0>
   184e0:	vcmpe.f32	s12, s10
   184e4:	vmrs	APSR_nzcv, fpscr
   184e8:	bpl	1858c <__assert_fail@plt+0x7798>
   184ec:	vldr	s10, [pc, #196]	; 185b8 <__assert_fail@plt+0x77c4>
   184f0:	vldr	s9, [r2, #12]
   184f4:	vcmpe.f32	s9, s10
   184f8:	vmrs	APSR_nzcv, fpscr
   184fc:	ble	1858c <__assert_fail@plt+0x7798>
   18500:	vcmpe.f32	s13, #0.0
   18504:	vmrs	APSR_nzcv, fpscr
   18508:	blt	1858c <__assert_fail@plt+0x7798>
   1850c:	vadd.f32	s13, s13, s11
   18510:	vldr	s11, [r2, #4]
   18514:	vcmpe.f32	s13, s11
   18518:	vmrs	APSR_nzcv, fpscr
   1851c:	bpl	1858c <__assert_fail@plt+0x7798>
   18520:	vldr	s10, [pc, #148]	; 185bc <__assert_fail@plt+0x77c8>
   18524:	vcmpe.f32	s11, s10
   18528:	vmrs	APSR_nzcv, fpscr
   1852c:	bhi	1858c <__assert_fail@plt+0x7798>
   18530:	vcmpe.f32	s12, s13
   18534:	vmrs	APSR_nzcv, fpscr
   18538:	ble	1858c <__assert_fail@plt+0x7798>
   1853c:	ldrb	r3, [r2, #16]
   18540:	vmul.f32	s15, s15, s11
   18544:	cmp	r3, #0
   18548:	beq	185a8 <__assert_fail@plt+0x77b4>
   1854c:	vcvt.u32.f32	s15, s15
   18550:	mov	r0, r4
   18554:	vmov	r1, s15
   18558:	bl	17dd4 <__assert_fail@plt+0x6fe0>
   1855c:	cmp	r0, #0
   18560:	bne	1846c <__assert_fail@plt+0x7678>
   18564:	ldr	r0, [r4, #36]	; 0x24
   18568:	cmp	r0, #0
   1856c:	beq	18580 <__assert_fail@plt+0x778c>
   18570:	ldr	r6, [r0, #4]
   18574:	bl	13598 <__assert_fail@plt+0x27a4>
   18578:	subs	r0, r6, #0
   1857c:	bne	18570 <__assert_fail@plt+0x777c>
   18580:	mov	r3, #0
   18584:	str	r3, [r4, #36]	; 0x24
   18588:	b	1846c <__assert_fail@plt+0x7678>
   1858c:	vldr	s13, [pc, #44]	; 185c0 <__assert_fail@plt+0x77cc>
   18590:	str	r3, [r4, #20]
   18594:	vmul.f32	s13, s15, s13
   18598:	vcmpe.f32	s14, s13
   1859c:	vmrs	APSR_nzcv, fpscr
   185a0:	bpl	1846c <__assert_fail@plt+0x7678>
   185a4:	vldr	s12, [pc, #24]	; 185c4 <__assert_fail@plt+0x77d0>
   185a8:	vmul.f32	s15, s15, s12
   185ac:	b	1854c <__assert_fail@plt+0x7758>
   185b0:	stclcc	12, cr12, [ip, #820]	; 0x334
   185b4:	svccc	0x00666666
   185b8:	svccc	0x008ccccd
   185bc:	svccc	0x00800000
   185c0:	andeq	r0, r0, r0
   185c4:	svccc	0x004ccccd
   185c8:	strd	r4, [sp, #-16]!
   185cc:	mov	r3, #1
   185d0:	mov	r4, r0
   185d4:	str	r6, [sp, #8]
   185d8:	str	lr, [sp, #12]
   185dc:	sub	sp, sp, #8
   185e0:	add	r2, sp, #4
   185e4:	bl	17090 <__assert_fail@plt+0x629c>
   185e8:	subs	r5, r0, #0
   185ec:	beq	1860c <__assert_fail@plt+0x7818>
   185f0:	ldr	r2, [sp, #4]
   185f4:	ldr	r3, [r4, #16]
   185f8:	ldr	r2, [r2]
   185fc:	sub	r3, r3, #1
   18600:	str	r3, [r4, #16]
   18604:	cmp	r2, #0
   18608:	beq	18624 <__assert_fail@plt+0x7830>
   1860c:	mov	r0, r5
   18610:	add	sp, sp, #8
   18614:	ldrd	r4, [sp]
   18618:	ldr	r6, [sp, #8]
   1861c:	add	sp, sp, #12
   18620:	pop	{pc}		; (ldr pc, [sp], #4)
   18624:	vldr	s15, [r4, #8]
   18628:	ldr	r3, [r4, #12]
   1862c:	ldr	r2, [r4, #20]
   18630:	vcvt.f32.u32	s15, s15
   18634:	sub	r3, r3, #1
   18638:	vmov	s14, r3
   1863c:	vldr	s13, [r2]
   18640:	str	r3, [r4, #12]
   18644:	vmul.f32	s12, s13, s15
   18648:	vcvt.f32.u32	s14, s14
   1864c:	vcmpe.f32	s14, s12
   18650:	vmrs	APSR_nzcv, fpscr
   18654:	bpl	1860c <__assert_fail@plt+0x7818>
   18658:	movw	r3, #37800	; 0x93a8
   1865c:	movt	r3, #1
   18660:	cmp	r2, r3
   18664:	beq	18744 <__assert_fail@plt+0x7950>
   18668:	vldr	s11, [pc, #224]	; 18750 <__assert_fail@plt+0x795c>
   1866c:	vldr	s12, [r2, #8]
   18670:	vcmpe.f32	s12, s11
   18674:	vmrs	APSR_nzcv, fpscr
   18678:	ble	1872c <__assert_fail@plt+0x7938>
   1867c:	vldr	s10, [pc, #208]	; 18754 <__assert_fail@plt+0x7960>
   18680:	vcmpe.f32	s12, s10
   18684:	vmrs	APSR_nzcv, fpscr
   18688:	bpl	1872c <__assert_fail@plt+0x7938>
   1868c:	vldr	s10, [pc, #196]	; 18758 <__assert_fail@plt+0x7964>
   18690:	vldr	s9, [r2, #12]
   18694:	vcmpe.f32	s9, s10
   18698:	vmrs	APSR_nzcv, fpscr
   1869c:	ble	1872c <__assert_fail@plt+0x7938>
   186a0:	vcmpe.f32	s13, #0.0
   186a4:	vmrs	APSR_nzcv, fpscr
   186a8:	blt	1872c <__assert_fail@plt+0x7938>
   186ac:	vadd.f32	s13, s13, s11
   186b0:	vldr	s11, [r2, #4]
   186b4:	vcmpe.f32	s13, s11
   186b8:	vmrs	APSR_nzcv, fpscr
   186bc:	bpl	1872c <__assert_fail@plt+0x7938>
   186c0:	vldr	s10, [pc, #148]	; 1875c <__assert_fail@plt+0x7968>
   186c4:	vcmpe.f32	s11, s10
   186c8:	vmrs	APSR_nzcv, fpscr
   186cc:	bhi	1872c <__assert_fail@plt+0x7938>
   186d0:	vcmpe.f32	s12, s13
   186d4:	vmrs	APSR_nzcv, fpscr
   186d8:	ble	1872c <__assert_fail@plt+0x7938>
   186dc:	ldrb	r3, [r2, #16]
   186e0:	vmul.f32	s15, s15, s11
   186e4:	cmp	r3, #0
   186e8:	beq	18748 <__assert_fail@plt+0x7954>
   186ec:	vcvt.u32.f32	s15, s15
   186f0:	mov	r0, r4
   186f4:	vmov	r1, s15
   186f8:	bl	17dd4 <__assert_fail@plt+0x6fe0>
   186fc:	cmp	r0, #0
   18700:	bne	1860c <__assert_fail@plt+0x7818>
   18704:	ldr	r0, [r4, #36]	; 0x24
   18708:	cmp	r0, #0
   1870c:	beq	18720 <__assert_fail@plt+0x792c>
   18710:	ldr	r6, [r0, #4]
   18714:	bl	13598 <__assert_fail@plt+0x27a4>
   18718:	subs	r0, r6, #0
   1871c:	bne	18710 <__assert_fail@plt+0x791c>
   18720:	mov	r3, #0
   18724:	str	r3, [r4, #36]	; 0x24
   18728:	b	1860c <__assert_fail@plt+0x7818>
   1872c:	vldr	s13, [pc, #44]	; 18760 <__assert_fail@plt+0x796c>
   18730:	str	r3, [r4, #20]
   18734:	vmul.f32	s13, s15, s13
   18738:	vcmpe.f32	s14, s13
   1873c:	vmrs	APSR_nzcv, fpscr
   18740:	bpl	1860c <__assert_fail@plt+0x7818>
   18744:	vldr	s12, [pc, #24]	; 18764 <__assert_fail@plt+0x7970>
   18748:	vmul.f32	s15, s15, s12
   1874c:	b	186ec <__assert_fail@plt+0x78f8>
   18750:	stclcc	12, cr12, [ip, #820]	; 0x334
   18754:	svccc	0x00666666
   18758:	svccc	0x008ccccd
   1875c:	svccc	0x00800000
   18760:	andeq	r0, r0, r0
   18764:	svccc	0x004ccccd
   18768:	mov	r3, #0
   1876c:	mov	r2, #1
   18770:	str	r1, [r0]
   18774:	str	r1, [r0, #4]
   18778:	str	r1, [r0, #8]
   1877c:	str	r1, [r0, #12]
   18780:	str	r1, [r0, #16]
   18784:	str	r3, [r0, #20]
   18788:	str	r3, [r0, #24]
   1878c:	strb	r2, [r0, #28]
   18790:	bx	lr
   18794:	ldrb	r0, [r0, #28]
   18798:	bx	lr
   1879c:	ldrb	ip, [r0, #28]
   187a0:	mov	r2, r0
   187a4:	ldr	r3, [r0, #20]
   187a8:	eor	ip, ip, #1
   187ac:	add	r3, ip, r3
   187b0:	and	r3, r3, #3
   187b4:	ldr	r0, [r0, r3, lsl #2]
   187b8:	str	r1, [r2, r3, lsl #2]
   187bc:	ldr	r1, [r2, #24]
   187c0:	str	r3, [r2, #20]
   187c4:	cmp	r1, r3
   187c8:	bne	187d8 <__assert_fail@plt+0x79e4>
   187cc:	add	ip, ip, r1
   187d0:	and	ip, ip, #3
   187d4:	str	ip, [r2, #24]
   187d8:	mov	r3, #0
   187dc:	strb	r3, [r2, #28]
   187e0:	bx	lr
   187e4:	ldrb	r3, [r0, #28]
   187e8:	cmp	r3, #0
   187ec:	bne	18828 <__assert_fail@plt+0x7a34>
   187f0:	ldr	r1, [r0, #16]
   187f4:	ldr	r3, [r0, #20]
   187f8:	ldr	r2, [r0, r3, lsl #2]
   187fc:	str	r1, [r0, r3, lsl #2]
   18800:	ldr	r1, [r0, #24]
   18804:	cmp	r3, r1
   18808:	moveq	r3, #1
   1880c:	strbeq	r3, [r0, #28]
   18810:	beq	18820 <__assert_fail@plt+0x7a2c>
   18814:	add	r3, r3, #3
   18818:	and	r3, r3, #3
   1881c:	str	r3, [r0, #20]
   18820:	mov	r0, r2
   18824:	bx	lr
   18828:	str	r4, [sp, #-8]!
   1882c:	str	lr, [sp, #4]
   18830:	bl	10db8 <abort@plt>
   18834:	mov	r3, #0
   18838:	strd	r4, [sp, #-16]!
   1883c:	mov	r4, r0
   18840:	mov	r5, r1
   18844:	str	r6, [sp, #8]
   18848:	add	r6, r2, #20
   1884c:	str	lr, [sp, #12]
   18850:	strb	r3, [r2, #20]
   18854:	mov	r0, r4
   18858:	mov	r1, r5
   1885c:	mov	r2, #10
   18860:	mov	r3, #0
   18864:	bl	18f0c <__assert_fail@plt+0x8118>
   18868:	add	ip, r2, #48	; 0x30
   1886c:	mov	r0, r4
   18870:	mov	r1, r5
   18874:	mov	r2, #10
   18878:	mov	r3, #0
   1887c:	strb	ip, [r6, #-1]!
   18880:	bl	18f0c <__assert_fail@plt+0x8118>
   18884:	cmp	r5, #0
   18888:	mov	r5, r1
   1888c:	cmpeq	r4, #9
   18890:	mov	r4, r0
   18894:	bhi	18854 <__assert_fail@plt+0x7a60>
   18898:	mov	r0, r6
   1889c:	ldrd	r4, [sp]
   188a0:	ldr	r6, [sp, #8]
   188a4:	add	sp, sp, #12
   188a8:	pop	{pc}		; (ldr pc, [sp], #4)
   188ac:	push	{r1, r2, r3}
   188b0:	push	{lr}		; (str lr, [sp, #-4]!)
   188b4:	sub	sp, sp, #8
   188b8:	ldr	r1, [sp, #12]
   188bc:	add	r3, sp, #16
   188c0:	ldr	r2, [sp, #16]
   188c4:	str	r3, [sp, #4]
   188c8:	bl	10c5c <ioctl@plt>
   188cc:	add	sp, sp, #8
   188d0:	pop	{lr}		; (ldr lr, [sp], #4)
   188d4:	add	sp, sp, #12
   188d8:	bx	lr
   188dc:	push	{r2, r3}
   188e0:	push	{lr}		; (str lr, [sp, #-4]!)
   188e4:	sub	sp, sp, #12
   188e8:	ldr	r2, [sp, #16]
   188ec:	ands	r3, r2, #64	; 0x40
   188f0:	bne	1890c <__assert_fail@plt+0x7b18>
   188f4:	bl	10ce0 <openat64@plt>
   188f8:	bl	18980 <__assert_fail@plt+0x7b8c>
   188fc:	add	sp, sp, #12
   18900:	pop	{lr}		; (ldr lr, [sp], #4)
   18904:	add	sp, sp, #8
   18908:	bx	lr
   1890c:	add	ip, sp, #20
   18910:	ldr	r3, [sp, #20]
   18914:	str	ip, [sp, #4]
   18918:	b	188f4 <__assert_fail@plt+0x7b00>
   1891c:	orr	r2, r2, #540672	; 0x84000
   18920:	strd	r4, [sp, #-16]!
   18924:	orr	r2, r2, #2304	; 0x900
   18928:	str	r6, [sp, #8]
   1892c:	mov	r6, r3
   18930:	str	lr, [sp, #12]
   18934:	bl	188dc <__assert_fail@plt+0x7ae8>
   18938:	subs	r5, r0, #0
   1893c:	movlt	r4, #0
   18940:	blt	18954 <__assert_fail@plt+0x7b60>
   18944:	bl	10d4c <fdopendir@plt>
   18948:	subs	r4, r0, #0
   1894c:	beq	18968 <__assert_fail@plt+0x7b74>
   18950:	str	r5, [r6]
   18954:	mov	r0, r4
   18958:	ldrd	r4, [sp]
   1895c:	ldr	r6, [sp, #8]
   18960:	add	sp, sp, #12
   18964:	pop	{pc}		; (ldr pc, [sp], #4)
   18968:	bl	10cf8 <__errno_location@plt>
   1896c:	mov	r6, r0
   18970:	mov	r0, r5
   18974:	ldr	r5, [r6]
   18978:	bl	10dc4 <close@plt>
   1897c:	b	18950 <__assert_fail@plt+0x7b5c>
   18980:	cmp	r0, #2
   18984:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18988:	mov	r4, r0
   1898c:	strd	r6, [sp, #8]
   18990:	str	r8, [sp, #16]
   18994:	str	lr, [sp, #20]
   18998:	bls	189b4 <__assert_fail@plt+0x7bc0>
   1899c:	mov	r0, r4
   189a0:	ldrd	r4, [sp]
   189a4:	ldrd	r6, [sp, #8]
   189a8:	ldr	r8, [sp, #16]
   189ac:	add	sp, sp, #20
   189b0:	pop	{pc}		; (ldr pc, [sp], #4)
   189b4:	bl	18e2c <__assert_fail@plt+0x8038>
   189b8:	mov	r7, r0
   189bc:	bl	10cf8 <__errno_location@plt>
   189c0:	mov	r5, r0
   189c4:	mov	r0, r4
   189c8:	ldr	r6, [r5]
   189cc:	mov	r4, r7
   189d0:	bl	10dc4 <close@plt>
   189d4:	str	r6, [r5]
   189d8:	b	1899c <__assert_fail@plt+0x7ba8>
   189dc:	cmp	r1, #0
   189e0:	cmpne	r0, #0
   189e4:	beq	18a30 <__assert_fail@plt+0x7c3c>
   189e8:	strd	r4, [sp, #-16]!
   189ec:	umull	r4, r5, r0, r1
   189f0:	str	r6, [sp, #8]
   189f4:	str	lr, [sp, #12]
   189f8:	adds	r3, r5, #0
   189fc:	movne	r3, #1
   18a00:	cmp	r4, #0
   18a04:	blt	18a10 <__assert_fail@plt+0x7c1c>
   18a08:	cmp	r3, #0
   18a0c:	beq	18a3c <__assert_fail@plt+0x7c48>
   18a10:	bl	10cf8 <__errno_location@plt>
   18a14:	mov	r3, #12
   18a18:	ldrd	r4, [sp]
   18a1c:	ldr	r6, [sp, #8]
   18a20:	add	sp, sp, #12
   18a24:	str	r3, [r0]
   18a28:	mov	r0, #0
   18a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a30:	mov	r1, #1
   18a34:	mov	r0, r1
   18a38:	b	10b84 <calloc@plt>
   18a3c:	ldrd	r4, [sp]
   18a40:	ldr	r6, [sp, #8]
   18a44:	ldr	lr, [sp, #12]
   18a48:	add	sp, sp, #16
   18a4c:	b	10b84 <calloc@plt>
   18a50:	cmp	r0, #0
   18a54:	beq	18a60 <__assert_fail@plt+0x7c6c>
   18a58:	blt	18a68 <__assert_fail@plt+0x7c74>
   18a5c:	b	10c8c <malloc@plt>
   18a60:	mov	r0, #1
   18a64:	b	10c8c <malloc@plt>
   18a68:	str	r4, [sp, #-8]!
   18a6c:	str	lr, [sp, #4]
   18a70:	bl	10cf8 <__errno_location@plt>
   18a74:	mov	r3, #12
   18a78:	ldr	r4, [sp]
   18a7c:	add	sp, sp, #4
   18a80:	str	r3, [r0]
   18a84:	mov	r0, #0
   18a88:	pop	{pc}		; (ldr pc, [sp], #4)
   18a8c:	cmp	r0, #0
   18a90:	beq	18ab8 <__assert_fail@plt+0x7cc4>
   18a94:	cmp	r1, #0
   18a98:	str	r4, [sp, #-8]!
   18a9c:	str	lr, [sp, #4]
   18aa0:	beq	18ac0 <__assert_fail@plt+0x7ccc>
   18aa4:	blt	18ad4 <__assert_fail@plt+0x7ce0>
   18aa8:	ldr	r4, [sp]
   18aac:	ldr	lr, [sp, #4]
   18ab0:	add	sp, sp, #8
   18ab4:	b	10c14 <realloc@plt>
   18ab8:	mov	r0, r1
   18abc:	b	18a50 <__assert_fail@plt+0x7c5c>
   18ac0:	bl	13598 <__assert_fail@plt+0x27a4>
   18ac4:	ldr	r4, [sp]
   18ac8:	add	sp, sp, #4
   18acc:	mov	r0, #0
   18ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ad4:	bl	10cf8 <__errno_location@plt>
   18ad8:	mov	r3, #12
   18adc:	str	r3, [r0]
   18ae0:	b	18ac4 <__assert_fail@plt+0x7cd0>
   18ae4:	movw	r3, #62998	; 0xf616
   18ae8:	movt	r3, #149	; 0x95
   18aec:	strd	r4, [sp, #-8]!
   18af0:	mov	r4, #0
   18af4:	mov	r5, #0
   18af8:	strd	r4, [r0, #16]
   18afc:	str	r3, [r0, #24]
   18b00:	ldrd	r4, [sp]
   18b04:	add	sp, sp, #8
   18b08:	bx	lr
   18b0c:	ldr	r2, [r0, #24]
   18b10:	movw	r3, #62998	; 0xf616
   18b14:	movt	r3, #149	; 0x95
   18b18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18b1c:	strd	r6, [sp, #8]
   18b20:	strd	r8, [sp, #16]
   18b24:	strd	sl, [sp, #24]
   18b28:	cmp	r2, r3
   18b2c:	str	lr, [sp, #32]
   18b30:	sub	sp, sp, #4
   18b34:	bne	18be4 <__assert_fail@plt+0x7df0>
   18b38:	ldrd	r6, [r0, #16]
   18b3c:	ldrd	sl, [r1, #96]	; 0x60
   18b40:	orrs	r3, r6, r7
   18b44:	beq	18b98 <__assert_fail@plt+0x7da4>
   18b48:	ldrd	r2, [r0]
   18b4c:	cmp	r3, fp
   18b50:	cmpeq	r2, sl
   18b54:	beq	18bb8 <__assert_fail@plt+0x7dc4>
   18b58:	adds	r8, r6, #1
   18b5c:	adc	r9, r7, #0
   18b60:	and	r2, r6, r8
   18b64:	and	r3, r7, r9
   18b68:	orrs	r3, r2, r3
   18b6c:	strd	r8, [r0, #16]
   18b70:	movne	r1, #0
   18b74:	beq	18bd4 <__assert_fail@plt+0x7de0>
   18b78:	mov	r0, r1
   18b7c:	add	sp, sp, #4
   18b80:	ldrd	r4, [sp]
   18b84:	ldrd	r6, [sp, #8]
   18b88:	ldrd	r8, [sp, #16]
   18b8c:	ldrd	sl, [sp, #24]
   18b90:	add	sp, sp, #32
   18b94:	pop	{pc}		; (ldr pc, [sp], #4)
   18b98:	mov	r2, #1
   18b9c:	mov	r3, #0
   18ba0:	strd	r2, [r0, #16]
   18ba4:	ldrd	r2, [r1]
   18ba8:	mov	r1, #0
   18bac:	strd	sl, [r0]
   18bb0:	strd	r2, [r0, #8]
   18bb4:	b	18b78 <__assert_fail@plt+0x7d84>
   18bb8:	ldrd	r4, [r1]
   18bbc:	ldrd	r2, [r0, #8]
   18bc0:	cmp	r5, r3
   18bc4:	cmpeq	r4, r2
   18bc8:	bne	18b58 <__assert_fail@plt+0x7d64>
   18bcc:	mov	r1, #1
   18bd0:	b	18b78 <__assert_fail@plt+0x7d84>
   18bd4:	orrs	r3, r8, r9
   18bd8:	bne	18ba4 <__assert_fail@plt+0x7db0>
   18bdc:	mov	r1, #1
   18be0:	b	18b78 <__assert_fail@plt+0x7d84>
   18be4:	movw	r3, #37928	; 0x9428
   18be8:	movt	r3, #1
   18bec:	movw	r1, #37940	; 0x9434
   18bf0:	movt	r1, #1
   18bf4:	movw	r0, #37956	; 0x9444
   18bf8:	movt	r0, #1
   18bfc:	mov	r2, #60	; 0x3c
   18c00:	bl	10df4 <__assert_fail@plt>
   18c04:	push	{r1, r2, r3}
   18c08:	strd	r4, [sp, #-20]!	; 0xffffffec
   18c0c:	strd	r6, [sp, #8]
   18c10:	str	lr, [sp, #16]
   18c14:	sub	sp, sp, #8
   18c18:	ldr	r1, [sp, #28]
   18c1c:	add	r2, sp, #32
   18c20:	str	r2, [sp, #4]
   18c24:	cmp	r1, #0
   18c28:	beq	18d04 <__assert_fail@plt+0x7f10>
   18c2c:	movw	r3, #1030	; 0x406
   18c30:	mov	r6, r0
   18c34:	cmp	r1, r3
   18c38:	beq	18d14 <__assert_fail@plt+0x7f20>
   18c3c:	cmp	r1, #11
   18c40:	beq	18cbc <__assert_fail@plt+0x7ec8>
   18c44:	ble	18c9c <__assert_fail@plt+0x7ea8>
   18c48:	movw	r2, #1031	; 0x407
   18c4c:	cmp	r1, r2
   18c50:	bgt	18cd8 <__assert_fail@plt+0x7ee4>
   18c54:	cmp	r1, r3
   18c58:	bge	18c68 <__assert_fail@plt+0x7e74>
   18c5c:	movw	r3, #1025	; 0x401
   18c60:	cmp	r1, r3
   18c64:	beq	18cbc <__assert_fail@plt+0x7ec8>
   18c68:	ldr	r3, [sp, #4]
   18c6c:	mov	r0, r6
   18c70:	ldr	r2, [r3]
   18c74:	bl	10d1c <fcntl64@plt>
   18c78:	mov	r4, r0
   18c7c:	mov	r0, r4
   18c80:	add	sp, sp, #8
   18c84:	ldrd	r4, [sp]
   18c88:	ldrd	r6, [sp, #8]
   18c8c:	ldr	lr, [sp, #16]
   18c90:	add	sp, sp, #20
   18c94:	add	sp, sp, #12
   18c98:	bx	lr
   18c9c:	cmp	r1, #4
   18ca0:	beq	18c68 <__assert_fail@plt+0x7e74>
   18ca4:	bgt	18ccc <__assert_fail@plt+0x7ed8>
   18ca8:	cmp	r1, #2
   18cac:	beq	18c68 <__assert_fail@plt+0x7e74>
   18cb0:	bgt	18cbc <__assert_fail@plt+0x7ec8>
   18cb4:	cmp	r1, #1
   18cb8:	bne	18c68 <__assert_fail@plt+0x7e74>
   18cbc:	mov	r0, r6
   18cc0:	bl	10d1c <fcntl64@plt>
   18cc4:	mov	r4, r0
   18cc8:	b	18c7c <__assert_fail@plt+0x7e88>
   18ccc:	cmp	r1, #9
   18cd0:	bne	18c68 <__assert_fail@plt+0x7e74>
   18cd4:	b	18cbc <__assert_fail@plt+0x7ec8>
   18cd8:	movw	r3, #1033	; 0x409
   18cdc:	cmp	r1, r3
   18ce0:	beq	18c68 <__assert_fail@plt+0x7e74>
   18ce4:	blt	18cbc <__assert_fail@plt+0x7ec8>
   18ce8:	movw	r3, #1034	; 0x40a
   18cec:	cmp	r1, r3
   18cf0:	bne	18c68 <__assert_fail@plt+0x7e74>
   18cf4:	mov	r0, r6
   18cf8:	bl	10d1c <fcntl64@plt>
   18cfc:	mov	r4, r0
   18d00:	b	18c7c <__assert_fail@plt+0x7e88>
   18d04:	ldr	r2, [sp, #32]
   18d08:	bl	10d1c <fcntl64@plt>
   18d0c:	mov	r4, r0
   18d10:	b	18c7c <__assert_fail@plt+0x7e88>
   18d14:	movw	r5, #41300	; 0xa154
   18d18:	movt	r5, #2
   18d1c:	ldr	r7, [r2]
   18d20:	add	r2, sp, #36	; 0x24
   18d24:	ldr	r3, [r5]
   18d28:	str	r2, [sp, #4]
   18d2c:	mov	r2, r7
   18d30:	cmp	r3, #0
   18d34:	blt	18d50 <__assert_fail@plt+0x7f5c>
   18d38:	bl	10d1c <fcntl64@plt>
   18d3c:	subs	r4, r0, #0
   18d40:	blt	18db8 <__assert_fail@plt+0x7fc4>
   18d44:	mov	r3, #1
   18d48:	str	r3, [r5]
   18d4c:	b	18c7c <__assert_fail@plt+0x7e88>
   18d50:	mov	r1, #0
   18d54:	bl	10d1c <fcntl64@plt>
   18d58:	subs	r4, r0, #0
   18d5c:	blt	18c7c <__assert_fail@plt+0x7e88>
   18d60:	ldr	r3, [r5]
   18d64:	cmn	r3, #1
   18d68:	bne	18c7c <__assert_fail@plt+0x7e88>
   18d6c:	mov	r1, #1
   18d70:	mov	r0, r4
   18d74:	bl	10d1c <fcntl64@plt>
   18d78:	subs	r2, r0, #0
   18d7c:	blt	18d98 <__assert_fail@plt+0x7fa4>
   18d80:	orr	r2, r2, #1
   18d84:	mov	r1, #2
   18d88:	mov	r0, r4
   18d8c:	bl	10d1c <fcntl64@plt>
   18d90:	cmn	r0, #1
   18d94:	bne	18c7c <__assert_fail@plt+0x7e88>
   18d98:	bl	10cf8 <__errno_location@plt>
   18d9c:	mov	r5, r0
   18da0:	mov	r0, r4
   18da4:	ldr	r6, [r5]
   18da8:	mvn	r4, #0
   18dac:	bl	10dc4 <close@plt>
   18db0:	str	r6, [r5]
   18db4:	b	18c7c <__assert_fail@plt+0x7e88>
   18db8:	bl	10cf8 <__errno_location@plt>
   18dbc:	ldr	r3, [r0]
   18dc0:	cmp	r3, #22
   18dc4:	bne	18d44 <__assert_fail@plt+0x7f50>
   18dc8:	mov	r2, r7
   18dcc:	mov	r0, r6
   18dd0:	mov	r1, #0
   18dd4:	bl	10d1c <fcntl64@plt>
   18dd8:	subs	r4, r0, #0
   18ddc:	mvnge	r3, #0
   18de0:	strge	r3, [r5]
   18de4:	bge	18d6c <__assert_fail@plt+0x7f78>
   18de8:	b	18c7c <__assert_fail@plt+0x7e88>
   18dec:	push	{r1, r2, r3}
   18df0:	push	{lr}		; (str lr, [sp, #-4]!)
   18df4:	sub	sp, sp, #8
   18df8:	ldr	r1, [sp, #12]
   18dfc:	ands	r2, r1, #64	; 0x40
   18e00:	bne	18e1c <__assert_fail@plt+0x8028>
   18e04:	bl	10c74 <open64@plt>
   18e08:	bl	18980 <__assert_fail@plt+0x7b8c>
   18e0c:	add	sp, sp, #8
   18e10:	pop	{lr}		; (ldr lr, [sp], #4)
   18e14:	add	sp, sp, #12
   18e18:	bx	lr
   18e1c:	add	r3, sp, #16
   18e20:	ldr	r2, [sp, #16]
   18e24:	str	r3, [sp, #4]
   18e28:	b	18e04 <__assert_fail@plt+0x8010>
   18e2c:	mov	r2, #3
   18e30:	mov	r1, #0
   18e34:	b	18c04 <__assert_fail@plt+0x7e10>
   18e38:	cmp	r3, #0
   18e3c:	cmpeq	r2, #0
   18e40:	bne	18e64 <__assert_fail@plt+0x8070>
   18e44:	cmp	r1, #0
   18e48:	movlt	r1, #-2147483648	; 0x80000000
   18e4c:	movlt	r0, #0
   18e50:	blt	18e60 <__assert_fail@plt+0x806c>
   18e54:	cmpeq	r0, #0
   18e58:	mvnne	r1, #-2147483648	; 0x80000000
   18e5c:	mvnne	r0, #0
   18e60:	b	18f48 <__assert_fail@plt+0x8154>
   18e64:	sub	sp, sp, #8
   18e68:	push	{sp, lr}
   18e6c:	cmp	r1, #0
   18e70:	blt	18e90 <__assert_fail@plt+0x809c>
   18e74:	cmp	r3, #0
   18e78:	blt	18ec4 <__assert_fail@plt+0x80d0>
   18e7c:	bl	18f58 <__assert_fail@plt+0x8164>
   18e80:	ldr	lr, [sp, #4]
   18e84:	add	sp, sp, #8
   18e88:	pop	{r2, r3}
   18e8c:	bx	lr
   18e90:	rsbs	r0, r0, #0
   18e94:	sbc	r1, r1, r1, lsl #1
   18e98:	cmp	r3, #0
   18e9c:	blt	18ee8 <__assert_fail@plt+0x80f4>
   18ea0:	bl	18f58 <__assert_fail@plt+0x8164>
   18ea4:	ldr	lr, [sp, #4]
   18ea8:	add	sp, sp, #8
   18eac:	pop	{r2, r3}
   18eb0:	rsbs	r0, r0, #0
   18eb4:	sbc	r1, r1, r1, lsl #1
   18eb8:	rsbs	r2, r2, #0
   18ebc:	sbc	r3, r3, r3, lsl #1
   18ec0:	bx	lr
   18ec4:	rsbs	r2, r2, #0
   18ec8:	sbc	r3, r3, r3, lsl #1
   18ecc:	bl	18f58 <__assert_fail@plt+0x8164>
   18ed0:	ldr	lr, [sp, #4]
   18ed4:	add	sp, sp, #8
   18ed8:	pop	{r2, r3}
   18edc:	rsbs	r0, r0, #0
   18ee0:	sbc	r1, r1, r1, lsl #1
   18ee4:	bx	lr
   18ee8:	rsbs	r2, r2, #0
   18eec:	sbc	r3, r3, r3, lsl #1
   18ef0:	bl	18f58 <__assert_fail@plt+0x8164>
   18ef4:	ldr	lr, [sp, #4]
   18ef8:	add	sp, sp, #8
   18efc:	pop	{r2, r3}
   18f00:	rsbs	r2, r2, #0
   18f04:	sbc	r3, r3, r3, lsl #1
   18f08:	bx	lr
   18f0c:	cmp	r3, #0
   18f10:	cmpeq	r2, #0
   18f14:	bne	18f2c <__assert_fail@plt+0x8138>
   18f18:	cmp	r1, #0
   18f1c:	cmpeq	r0, #0
   18f20:	mvnne	r1, #0
   18f24:	mvnne	r0, #0
   18f28:	b	18f48 <__assert_fail@plt+0x8154>
   18f2c:	sub	sp, sp, #8
   18f30:	push	{sp, lr}
   18f34:	bl	18f58 <__assert_fail@plt+0x8164>
   18f38:	ldr	lr, [sp, #4]
   18f3c:	add	sp, sp, #8
   18f40:	pop	{r2, r3}
   18f44:	bx	lr
   18f48:	push	{r1, lr}
   18f4c:	mov	r0, #8
   18f50:	bl	10b90 <raise@plt>
   18f54:	pop	{r1, pc}
   18f58:	cmp	r1, r3
   18f5c:	cmpeq	r0, r2
   18f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f64:	mov	r4, r0
   18f68:	movcc	r0, #0
   18f6c:	mov	r5, r1
   18f70:	ldr	lr, [sp, #36]	; 0x24
   18f74:	movcc	r1, r0
   18f78:	bcc	19074 <__assert_fail@plt+0x8280>
   18f7c:	cmp	r3, #0
   18f80:	clzeq	ip, r2
   18f84:	clzne	ip, r3
   18f88:	addeq	ip, ip, #32
   18f8c:	cmp	r5, #0
   18f90:	clzeq	r1, r4
   18f94:	addeq	r1, r1, #32
   18f98:	clzne	r1, r5
   18f9c:	sub	ip, ip, r1
   18fa0:	sub	sl, ip, #32
   18fa4:	lsl	r9, r3, ip
   18fa8:	rsb	fp, ip, #32
   18fac:	orr	r9, r9, r2, lsl sl
   18fb0:	orr	r9, r9, r2, lsr fp
   18fb4:	lsl	r8, r2, ip
   18fb8:	cmp	r5, r9
   18fbc:	cmpeq	r4, r8
   18fc0:	movcc	r0, #0
   18fc4:	movcc	r1, r0
   18fc8:	bcc	18fe4 <__assert_fail@plt+0x81f0>
   18fcc:	mov	r0, #1
   18fd0:	subs	r4, r4, r8
   18fd4:	lsl	r1, r0, sl
   18fd8:	orr	r1, r1, r0, lsr fp
   18fdc:	lsl	r0, r0, ip
   18fe0:	sbc	r5, r5, r9
   18fe4:	cmp	ip, #0
   18fe8:	beq	19074 <__assert_fail@plt+0x8280>
   18fec:	lsr	r6, r8, #1
   18ff0:	orr	r6, r6, r9, lsl #31
   18ff4:	lsr	r7, r9, #1
   18ff8:	mov	r2, ip
   18ffc:	b	19020 <__assert_fail@plt+0x822c>
   19000:	subs	r3, r4, r6
   19004:	sbc	r8, r5, r7
   19008:	adds	r3, r3, r3
   1900c:	adc	r8, r8, r8
   19010:	adds	r4, r3, #1
   19014:	adc	r5, r8, #0
   19018:	subs	r2, r2, #1
   1901c:	beq	1903c <__assert_fail@plt+0x8248>
   19020:	cmp	r5, r7
   19024:	cmpeq	r4, r6
   19028:	bcs	19000 <__assert_fail@plt+0x820c>
   1902c:	adds	r4, r4, r4
   19030:	adc	r5, r5, r5
   19034:	subs	r2, r2, #1
   19038:	bne	19020 <__assert_fail@plt+0x822c>
   1903c:	lsr	r3, r4, ip
   19040:	orr	r3, r3, r5, lsl fp
   19044:	lsr	r2, r5, ip
   19048:	orr	r3, r3, r5, lsr sl
   1904c:	adds	r0, r0, r4
   19050:	mov	r4, r3
   19054:	lsl	r3, r2, ip
   19058:	orr	r3, r3, r4, lsl sl
   1905c:	lsl	ip, r4, ip
   19060:	orr	r3, r3, r4, lsr fp
   19064:	adc	r1, r1, r5
   19068:	subs	r0, r0, ip
   1906c:	mov	r5, r2
   19070:	sbc	r1, r1, r3
   19074:	cmp	lr, #0
   19078:	strdne	r4, [lr]
   1907c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19080:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19084:	mov	r7, r0
   19088:	ldr	r6, [pc, #72]	; 190d8 <__assert_fail@plt+0x82e4>
   1908c:	ldr	r5, [pc, #72]	; 190dc <__assert_fail@plt+0x82e8>
   19090:	add	r6, pc, r6
   19094:	add	r5, pc, r5
   19098:	sub	r6, r6, r5
   1909c:	mov	r8, r1
   190a0:	mov	r9, r2
   190a4:	bl	10b58 <fstatfs64@plt-0x20>
   190a8:	asrs	r6, r6, #2
   190ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   190b0:	mov	r4, #0
   190b4:	add	r4, r4, #1
   190b8:	ldr	r3, [r5], #4
   190bc:	mov	r2, r9
   190c0:	mov	r1, r8
   190c4:	mov	r0, r7
   190c8:	blx	r3
   190cc:	cmp	r6, r4
   190d0:	bne	190b4 <__assert_fail@plt+0x82c0>
   190d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   190d8:	andeq	r0, r1, ip, ror lr
   190dc:	andeq	r0, r1, r4, ror lr
   190e0:	bx	lr

Disassembly of section .fini:

000190e4 <.fini>:
   190e4:	push	{r3, lr}
   190e8:	pop	{r3, pc}
