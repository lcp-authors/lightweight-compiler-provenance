
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010e60 <.init>:
   10e60:	push	{r3, lr}
   10e64:	bl	11144 <__assert_fail@plt+0x48>
   10e68:	pop	{r3, pc}

Disassembly of section .plt:

00010e6c <calloc@plt-0x14>:
   10e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e70:	ldr	lr, [pc, #4]	; 10e7c <calloc@plt-0x4>
   10e74:	add	lr, pc, lr
   10e78:	ldr	pc, [lr, #8]!
   10e7c:	andeq	r6, r1, r4, lsl #3

00010e80 <calloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #388]!	; 0x184

00010e8c <fputs_unlocked@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #380]!	; 0x17c

00010e98 <raise@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #372]!	; 0x174

00010ea4 <strcmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #364]!	; 0x16c

00010eb0 <posix_fadvise64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #356]!	; 0x164

00010ebc <fflush@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #348]!	; 0x15c

00010ec8 <memmove@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #340]!	; 0x154

00010ed4 <free@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #332]!	; 0x14c

00010ee0 <_exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #324]!	; 0x144

00010eec <memcpy@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #316]!	; 0x13c

00010ef8 <mbsinit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #308]!	; 0x134

00010f04 <fwrite_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #300]!	; 0x12c

00010f10 <fputc_unlocked@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #292]!	; 0x124

00010f1c <dcgettext@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #284]!	; 0x11c

00010f28 <realloc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #276]!	; 0x114

00010f34 <textdomain@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #268]!	; 0x10c

00010f40 <iswprint@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #260]!	; 0x104

00010f4c <fwrite@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #252]!	; 0xfc

00010f58 <lseek64@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #244]!	; 0xf4

00010f64 <__ctype_get_mb_cur_max@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #236]!	; 0xec

00010f70 <__fpending@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #228]!	; 0xe4

00010f7c <ferror_unlocked@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #220]!	; 0xdc

00010f88 <mbrtowc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #212]!	; 0xd4

00010f94 <error@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #204]!	; 0xcc

00010fa0 <malloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #196]!	; 0xc4

00010fac <__libc_start_main@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #188]!	; 0xbc

00010fb8 <__freading@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #180]!	; 0xb4

00010fc4 <__gmon_start__@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #172]!	; 0xac

00010fd0 <getopt_long@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #164]!	; 0xa4

00010fdc <__ctype_b_loc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #156]!	; 0x9c

00010fe8 <exit@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #148]!	; 0x94

00010ff4 <bcmp@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #140]!	; 0x8c

00011000 <strlen@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #132]!	; 0x84

0001100c <strchr@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #124]!	; 0x7c

00011018 <__errno_location@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #116]!	; 0x74

00011024 <__cxa_atexit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #108]!	; 0x6c

00011030 <memset@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #100]!	; 0x64

0001103c <__printf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #92]!	; 0x5c

00011048 <fileno@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #84]!	; 0x54

00011054 <__fprintf_chk@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #76]!	; 0x4c

00011060 <memchr@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #68]!	; 0x44

0001106c <strtoimax@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #60]!	; 0x3c

00011078 <fclose@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #52]!	; 0x34

00011084 <fseeko64@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #44]!	; 0x2c

00011090 <setlocale@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #36]!	; 0x24

0001109c <strrchr@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #28]!

000110a8 <nl_langinfo@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #20]!

000110b4 <fopen64@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #12]!

000110c0 <bindtextdomain@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4]!

000110cc <fread_unlocked@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4092]!	; 0xffc

000110d8 <strncmp@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4084]!	; 0xff4

000110e4 <abort@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4076]!	; 0xfec

000110f0 <feof_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4060]!	; 0xfdc

Disassembly of section .text:

00011108 <.text>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <__assert_fail@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <__assert_fail@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <__assert_fail@plt+0x44>
   11130:	bl	10fac <__libc_start_main@plt>
   11134:	bl	110e4 <abort@plt>
   11138:	andeq	r5, r1, ip, lsr #24
   1113c:	andeq	r1, r1, r4, lsr #10
   11140:	andeq	r5, r1, ip, asr #23
   11144:	ldr	r3, [pc, #20]	; 11160 <__assert_fail@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <__assert_fail@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	10fc4 <__gmon_start__@plt>
   11160:	andeq	r5, r1, ip, lsr #29
   11164:	andeq	r0, r0, r4, ror #1
   11168:	ldr	r0, [pc, #24]	; 11188 <__assert_fail@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <__assert_fail@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r7, r2, r8, lsr r1
   1118c:	andeq	r7, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <__assert_fail@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <__assert_fail@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <__assert_fail@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r7, r2, r8, lsr r1
   111c4:	andeq	r7, r2, r8, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <__assert_fail@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <__assert_fail@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r7, r2, ip, asr r1
   111f4:	b	11194 <__assert_fail@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	mov	r4, r0
   11204:	cmp	r0, #0
   11208:	bne	112f8 <__assert_fail@plt+0x1fc>
   1120c:	movw	r1, #23675	; 0x5c7b
   11210:	movt	r1, #1
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	bl	10f1c <dcgettext@plt>
   11220:	mov	r1, r0
   11224:	movw	r0, #29032	; 0x7168
   11228:	movt	r0, #2
   1122c:	ldr	r2, [r0]
   11230:	mov	r0, #1
   11234:	bl	1103c <__printf_chk@plt>
   11238:	movw	r1, #23705	; 0x5c99
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10f1c <dcgettext@plt>
   1124c:	mov	r1, r0
   11250:	mov	r0, #1
   11254:	mov	r2, #64	; 0x40
   11258:	bl	1103c <__printf_chk@plt>
   1125c:	bl	1133c <__assert_fail@plt+0x240>
   11260:	bl	1136c <__assert_fail@plt+0x270>
   11264:	movw	r1, #23775	; 0x5cdf
   11268:	movt	r1, #1
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	bl	10f1c <dcgettext@plt>
   11278:	movw	r5, #29012	; 0x7154
   1127c:	movt	r5, #2
   11280:	ldr	r1, [r5]
   11284:	bl	10e8c <fputs_unlocked@plt>
   11288:	movw	r1, #24017	; 0x5dd1
   1128c:	movt	r1, #1
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	bl	10f1c <dcgettext@plt>
   1129c:	ldr	r1, [r5]
   112a0:	bl	10e8c <fputs_unlocked@plt>
   112a4:	movw	r1, #24062	; 0x5dfe
   112a8:	movt	r1, #1
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	bl	10f1c <dcgettext@plt>
   112b8:	ldr	r1, [r5]
   112bc:	bl	10e8c <fputs_unlocked@plt>
   112c0:	movw	r1, #24116	; 0x5e34
   112c4:	movt	r1, #1
   112c8:	mov	r0, #0
   112cc:	mov	r2, #5
   112d0:	bl	10f1c <dcgettext@plt>
   112d4:	mov	r1, r0
   112d8:	movw	r2, #24384	; 0x5f40
   112dc:	movt	r2, #1
   112e0:	mov	r0, #1
   112e4:	mov	r3, r2
   112e8:	bl	1103c <__printf_chk@plt>
   112ec:	bl	1139c <__assert_fail@plt+0x2a0>
   112f0:	mov	r0, r4
   112f4:	bl	10fe8 <exit@plt>
   112f8:	movw	r0, #29000	; 0x7148
   112fc:	movt	r0, #2
   11300:	ldr	r5, [r0]
   11304:	movw	r1, #23636	; 0x5c54
   11308:	movt	r1, #1
   1130c:	mov	r0, #0
   11310:	mov	r2, #5
   11314:	bl	10f1c <dcgettext@plt>
   11318:	mov	r2, r0
   1131c:	movw	r0, #29032	; 0x7168
   11320:	movt	r0, #2
   11324:	ldr	r3, [r0]
   11328:	mov	r0, r5
   1132c:	mov	r1, #1
   11330:	bl	11054 <__fprintf_chk@plt>
   11334:	mov	r0, r4
   11338:	bl	10fe8 <exit@plt>
   1133c:	push	{fp, lr}
   11340:	mov	fp, sp
   11344:	movw	r1, #24495	; 0x5faf
   11348:	movt	r1, #1
   1134c:	mov	r0, #0
   11350:	mov	r2, #5
   11354:	bl	10f1c <dcgettext@plt>
   11358:	movw	r1, #29012	; 0x7154
   1135c:	movt	r1, #2
   11360:	ldr	r1, [r1]
   11364:	pop	{fp, lr}
   11368:	b	10e8c <fputs_unlocked@plt>
   1136c:	push	{fp, lr}
   11370:	mov	fp, sp
   11374:	movw	r1, #24551	; 0x5fe7
   11378:	movt	r1, #1
   1137c:	mov	r0, #0
   11380:	mov	r2, #5
   11384:	bl	10f1c <dcgettext@plt>
   11388:	movw	r1, #29012	; 0x7154
   1138c:	movt	r1, #2
   11390:	ldr	r1, [r1]
   11394:	pop	{fp, lr}
   11398:	b	10e8c <fputs_unlocked@plt>
   1139c:	push	{r4, r5, r6, sl, fp, lr}
   113a0:	add	fp, sp, #16
   113a4:	sub	sp, sp, #56	; 0x38
   113a8:	movw	r0, #25136	; 0x6230
   113ac:	movt	r0, #1
   113b0:	add	r1, r0, #32
   113b4:	mov	r2, #48	; 0x30
   113b8:	vld1.64	{d16-d17}, [r1]
   113bc:	mov	r6, sp
   113c0:	add	r1, r6, #32
   113c4:	add	r3, r0, #16
   113c8:	vld1.64	{d18-d19}, [r0], r2
   113cc:	vld1.64	{d20-d21}, [r3]
   113d0:	vldr	d22, [r0]
   113d4:	vst1.64	{d16-d17}, [r1]
   113d8:	add	r0, r6, #16
   113dc:	vst1.64	{d20-d21}, [r0]
   113e0:	mov	r0, r6
   113e4:	vst1.64	{d18-d19}, [r0], r2
   113e8:	vstr	d22, [r0]
   113ec:	ldr	r1, [sp]
   113f0:	cmp	r1, #0
   113f4:	movw	r4, #24384	; 0x5f40
   113f8:	movt	r4, #1
   113fc:	beq	11424 <__assert_fail@plt+0x328>
   11400:	mov	r6, sp
   11404:	movw	r5, #24384	; 0x5f40
   11408:	movt	r5, #1
   1140c:	mov	r0, r5
   11410:	bl	10ea4 <strcmp@plt>
   11414:	cmp	r0, #0
   11418:	ldrne	r1, [r6, #8]!
   1141c:	cmpne	r1, #0
   11420:	bne	1140c <__assert_fail@plt+0x310>
   11424:	ldr	r5, [r6, #4]
   11428:	movw	r1, #24721	; 0x6091
   1142c:	movt	r1, #1
   11430:	mov	r0, #0
   11434:	mov	r2, #5
   11438:	bl	10f1c <dcgettext@plt>
   1143c:	mov	r1, r0
   11440:	movw	r2, #24445	; 0x5f7d
   11444:	movt	r2, #1
   11448:	movw	r3, #24744	; 0x60a8
   1144c:	movt	r3, #1
   11450:	mov	r0, #1
   11454:	bl	1103c <__printf_chk@plt>
   11458:	cmp	r5, #0
   1145c:	moveq	r5, r4
   11460:	mov	r0, #5
   11464:	mov	r1, #0
   11468:	bl	11090 <setlocale@plt>
   1146c:	cmp	r0, #0
   11470:	beq	114b0 <__assert_fail@plt+0x3b4>
   11474:	movw	r1, #24784	; 0x60d0
   11478:	movt	r1, #1
   1147c:	mov	r2, #3
   11480:	bl	110d8 <strncmp@plt>
   11484:	cmp	r0, #0
   11488:	beq	114b0 <__assert_fail@plt+0x3b4>
   1148c:	movw	r1, #24788	; 0x60d4
   11490:	movt	r1, #1
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	bl	10f1c <dcgettext@plt>
   114a0:	movw	r1, #29012	; 0x7154
   114a4:	movt	r1, #2
   114a8:	ldr	r1, [r1]
   114ac:	bl	10e8c <fputs_unlocked@plt>
   114b0:	movw	r1, #24859	; 0x611b
   114b4:	movt	r1, #1
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	bl	10f1c <dcgettext@plt>
   114c4:	mov	r1, r0
   114c8:	movw	r2, #24744	; 0x60a8
   114cc:	movt	r2, #1
   114d0:	mov	r0, #1
   114d4:	mov	r3, r4
   114d8:	bl	1103c <__printf_chk@plt>
   114dc:	movw	r0, #24654	; 0x604e
   114e0:	movt	r0, #1
   114e4:	movw	r6, #24936	; 0x6168
   114e8:	movt	r6, #1
   114ec:	cmp	r5, r4
   114f0:	moveq	r6, r0
   114f4:	movw	r1, #24886	; 0x6136
   114f8:	movt	r1, #1
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	bl	10f1c <dcgettext@plt>
   11508:	mov	r1, r0
   1150c:	mov	r0, #1
   11510:	mov	r2, r5
   11514:	mov	r3, r6
   11518:	sub	sp, fp, #16
   1151c:	pop	{r4, r5, r6, sl, fp, lr}
   11520:	b	1103c <__printf_chk@plt>
   11524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11528:	add	fp, sp, #28
   1152c:	sub	sp, sp, #28
   11530:	mov	r4, r1
   11534:	mov	r6, r0
   11538:	ldr	r0, [r1]
   1153c:	bl	12908 <__assert_fail@plt+0x180c>
   11540:	movw	r1, #24936	; 0x6168
   11544:	movt	r1, #1
   11548:	mov	r0, #6
   1154c:	bl	11090 <setlocale@plt>
   11550:	movw	r5, #24449	; 0x5f81
   11554:	movt	r5, #1
   11558:	movw	r1, #24391	; 0x5f47
   1155c:	movt	r1, #1
   11560:	mov	r0, r5
   11564:	bl	110c0 <bindtextdomain@plt>
   11568:	mov	r0, r5
   1156c:	bl	10f34 <textdomain@plt>
   11570:	movw	r0, #9656	; 0x25b8
   11574:	movt	r0, #1
   11578:	bl	15c30 <__assert_fail@plt+0x4b34>
   1157c:	mov	r5, #76	; 0x4c
   11580:	mov	r8, #0
   11584:	movw	r9, #24415	; 0x5f5f
   11588:	movt	r9, #1
   1158c:	movw	r7, #25040	; 0x61d0
   11590:	movt	r7, #1
   11594:	mov	sl, #0
   11598:	mov	r0, #0
   1159c:	str	r0, [sp, #12]
   115a0:	str	r8, [sp]
   115a4:	mov	r0, r6
   115a8:	mov	r1, r4
   115ac:	mov	r2, r9
   115b0:	mov	r3, r7
   115b4:	bl	10fd0 <getopt_long@plt>
   115b8:	cmp	r0, #99	; 0x63
   115bc:	ble	11644 <__assert_fail@plt+0x548>
   115c0:	cmp	r0, #100	; 0x64
   115c4:	beq	11634 <__assert_fail@plt+0x538>
   115c8:	cmp	r0, #105	; 0x69
   115cc:	beq	1163c <__assert_fail@plt+0x540>
   115d0:	cmp	r0, #119	; 0x77
   115d4:	bne	11828 <__assert_fail@plt+0x72c>
   115d8:	movw	r0, #29016	; 0x7158
   115dc:	movt	r0, #2
   115e0:	ldr	r0, [r0]
   115e4:	movw	r1, #24936	; 0x6168
   115e8:	movt	r1, #1
   115ec:	str	r1, [sp]
   115f0:	mov	r1, #0
   115f4:	mov	r2, #10
   115f8:	add	r3, sp, #16
   115fc:	bl	14dec <__assert_fail@plt+0x3cf0>
   11600:	cmp	r0, #1
   11604:	bhi	117e4 <__assert_fail@plt+0x6e8>
   11608:	ldr	r1, [sp, #20]
   1160c:	cmn	r1, #1
   11610:	ble	117e4 <__assert_fail@plt+0x6e8>
   11614:	ldr	r2, [sp, #16]
   11618:	mvn	r3, #-2147483648	; 0x80000000
   1161c:	subs	r3, r3, r2
   11620:	rscs	r1, r1, #0
   11624:	movwlt	r2, #0
   11628:	subs	r5, r0, #1
   1162c:	movne	r5, r2
   11630:	b	115a0 <__assert_fail@plt+0x4a4>
   11634:	mov	sl, #1
   11638:	b	115a0 <__assert_fail@plt+0x4a4>
   1163c:	mov	r0, #1
   11640:	b	1159c <__assert_fail@plt+0x4a0>
   11644:	cmn	r0, #3
   11648:	beq	1165c <__assert_fail@plt+0x560>
   1164c:	cmn	r0, #2
   11650:	bne	116a4 <__assert_fail@plt+0x5a8>
   11654:	mov	r0, #0
   11658:	bl	111f8 <__assert_fail@plt+0xfc>
   1165c:	movw	r0, #28912	; 0x70f0
   11660:	movt	r0, #2
   11664:	ldr	r3, [r0]
   11668:	movw	r0, #29012	; 0x7154
   1166c:	movt	r0, #2
   11670:	ldr	r0, [r0]
   11674:	mov	r1, #0
   11678:	movw	r2, #24459	; 0x5f8b
   1167c:	movt	r2, #1
   11680:	str	r2, [sp]
   11684:	str	r1, [sp, #4]
   11688:	movw	r1, #24384	; 0x5f40
   1168c:	movt	r1, #1
   11690:	movw	r2, #24445	; 0x5f7d
   11694:	movt	r2, #1
   11698:	bl	14910 <__assert_fail@plt+0x3814>
   1169c:	mov	r0, #0
   116a0:	bl	10fe8 <exit@plt>
   116a4:	cmn	r0, #1
   116a8:	bne	11828 <__assert_fail@plt+0x72c>
   116ac:	movw	r7, #28992	; 0x7140
   116b0:	movt	r7, #2
   116b4:	ldr	r0, [r7]
   116b8:	sub	r1, r6, r0
   116bc:	cmp	r1, #2
   116c0:	blt	11708 <__assert_fail@plt+0x60c>
   116c4:	movw	r1, #24475	; 0x5f9b
   116c8:	movt	r1, #1
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	bl	10f1c <dcgettext@plt>
   116d8:	mov	r5, r0
   116dc:	ldr	r0, [r7]
   116e0:	add	r0, r4, r0, lsl #2
   116e4:	ldr	r0, [r0, #4]
   116e8:	bl	140fc <__assert_fail@plt+0x3000>
   116ec:	mov	r3, r0
   116f0:	mov	r0, #0
   116f4:	mov	r1, #0
   116f8:	mov	r2, r5
   116fc:	bl	10f94 <error@plt>
   11700:	mov	r0, #1
   11704:	bl	111f8 <__assert_fail@plt+0xfc>
   11708:	cmp	r0, r6
   1170c:	bge	11718 <__assert_fail@plt+0x61c>
   11710:	ldr	r4, [r4, r0, lsl #2]
   11714:	b	11720 <__assert_fail@plt+0x624>
   11718:	movw	r4, #25593	; 0x63f9
   1171c:	movt	r4, #1
   11720:	movw	r1, #25593	; 0x63f9
   11724:	movt	r1, #1
   11728:	mov	r0, r4
   1172c:	bl	10ea4 <strcmp@plt>
   11730:	cmp	r0, #0
   11734:	bne	11754 <__assert_fail@plt+0x658>
   11738:	mov	r0, #0
   1173c:	mov	r1, #0
   11740:	bl	14de8 <__assert_fail@plt+0x3cec>
   11744:	movw	r0, #29008	; 0x7150
   11748:	movt	r0, #2
   1174c:	ldr	r6, [r0]
   11750:	b	117a0 <__assert_fail@plt+0x6a4>
   11754:	movw	r1, #24492	; 0x5fac
   11758:	movt	r1, #1
   1175c:	mov	r0, r4
   11760:	bl	110b4 <fopen64@plt>
   11764:	mov	r6, r0
   11768:	cmp	r0, #0
   1176c:	bne	117a0 <__assert_fail@plt+0x6a4>
   11770:	bl	11018 <__errno_location@plt>
   11774:	ldr	r5, [r0]
   11778:	mov	r0, #0
   1177c:	mov	r1, #3
   11780:	mov	r2, r4
   11784:	bl	13fbc <__assert_fail@plt+0x2ec0>
   11788:	mov	r3, r0
   1178c:	movw	r2, #24424	; 0x5f68
   11790:	movt	r2, #1
   11794:	mov	r0, #1
   11798:	mov	r1, r5
   1179c:	bl	10f94 <error@plt>
   117a0:	mov	r0, r6
   117a4:	mov	r1, #2
   117a8:	bl	126a4 <__assert_fail@plt+0x15a8>
   117ac:	movw	r0, #29012	; 0x7154
   117b0:	movt	r0, #2
   117b4:	ldr	r2, [r0]
   117b8:	tst	sl, #1
   117bc:	beq	117d4 <__assert_fail@plt+0x6d8>
   117c0:	ldr	r0, [sp, #12]
   117c4:	and	r3, r0, #1
   117c8:	mov	r0, r6
   117cc:	mov	r1, r4
   117d0:	bl	11830 <__assert_fail@plt+0x734>
   117d4:	mov	r0, r6
   117d8:	mov	r1, r4
   117dc:	mov	r3, r5
   117e0:	bl	11a4c <__assert_fail@plt+0x950>
   117e4:	movw	r1, #24427	; 0x5f6b
   117e8:	movt	r1, #1
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	bl	10f1c <dcgettext@plt>
   117f8:	mov	r4, r0
   117fc:	movw	r0, #29016	; 0x7158
   11800:	movt	r0, #2
   11804:	ldr	r0, [r0]
   11808:	bl	140fc <__assert_fail@plt+0x3000>
   1180c:	str	r0, [sp]
   11810:	movw	r2, #24420	; 0x5f64
   11814:	movt	r2, #1
   11818:	mov	r0, #1
   1181c:	mov	r1, #0
   11820:	mov	r3, r4
   11824:	bl	10f94 <error@plt>
   11828:	mov	r0, #1
   1182c:	bl	111f8 <__assert_fail@plt+0xfc>
   11830:	push	{fp, lr}
   11834:	mov	fp, sp
   11838:	sub	sp, sp, #32
   1183c:	stmib	sp, {r1, r2, r3}
   11840:	mov	r8, r0
   11844:	mov	r0, #4096	; 0x1000
   11848:	bl	14a18 <__assert_fail@plt+0x391c>
   1184c:	mov	r4, r0
   11850:	mov	r0, #3072	; 0xc00
   11854:	bl	14a18 <__assert_fail@plt+0x391c>
   11858:	mov	r9, r0
   1185c:	sub	r0, fp, #8
   11860:	bl	12078 <__assert_fail@plt+0xf7c>
   11864:	mov	sl, #0
   11868:	str	r8, [sp, #16]
   1186c:	b	11884 <__assert_fail@plt+0x788>
   11870:	mov	r0, r8
   11874:	bl	110f0 <feof_unlocked@plt>
   11878:	mov	sl, #0
   1187c:	cmp	r0, #0
   11880:	bne	11a40 <__assert_fail@plt+0x944>
   11884:	add	r5, r4, sl
   11888:	rsb	r2, sl, #4096	; 0x1000
   1188c:	mov	r0, r5
   11890:	mov	r1, #1
   11894:	mov	r3, r8
   11898:	bl	110cc <fread_unlocked@plt>
   1189c:	mov	r8, r0
   118a0:	cmp	r0, #1
   118a4:	blt	1190c <__assert_fail@plt+0x810>
   118a8:	ldr	r0, [sp, #12]
   118ac:	cmp	r0, #0
   118b0:	beq	1190c <__assert_fail@plt+0x810>
   118b4:	mov	r6, #0
   118b8:	add	r0, r6, sl
   118bc:	ldrb	r7, [r4, r0]
   118c0:	mov	r0, r7
   118c4:	bl	1204c <__assert_fail@plt+0xf50>
   118c8:	cmp	r0, #0
   118cc:	bne	11900 <__assert_fail@plt+0x804>
   118d0:	cmp	r7, #61	; 0x3d
   118d4:	beq	11900 <__assert_fail@plt+0x804>
   118d8:	sub	r8, r8, #1
   118dc:	sub	r2, r8, r6
   118e0:	add	r0, r5, r6
   118e4:	add	r1, r0, #1
   118e8:	bl	10ec8 <memmove@plt>
   118ec:	cmp	r8, #1
   118f0:	blt	1190c <__assert_fail@plt+0x810>
   118f4:	cmp	r6, r8
   118f8:	blt	118b8 <__assert_fail@plt+0x7bc>
   118fc:	b	1190c <__assert_fail@plt+0x810>
   11900:	add	r6, r6, #1
   11904:	cmp	r8, #1
   11908:	bge	118f4 <__assert_fail@plt+0x7f8>
   1190c:	ldr	r0, [sp, #16]
   11910:	bl	10f7c <ferror_unlocked@plt>
   11914:	cmp	r0, #0
   11918:	bne	11a2c <__assert_fail@plt+0x930>
   1191c:	add	sl, r8, sl
   11920:	cmp	sl, #4096	; 0x1000
   11924:	ldr	r8, [sp, #16]
   11928:	bge	1193c <__assert_fail@plt+0x840>
   1192c:	mov	r0, r8
   11930:	bl	110f0 <feof_unlocked@plt>
   11934:	cmp	r0, #0
   11938:	beq	11884 <__assert_fail@plt+0x788>
   1193c:	mov	r0, r8
   11940:	bl	110f0 <feof_unlocked@plt>
   11944:	mov	r6, #0
   11948:	ldr	r5, [sp, #8]
   1194c:	cmp	r6, #1
   11950:	bne	11960 <__assert_fail@plt+0x864>
   11954:	ldr	r0, [fp, #-8]
   11958:	cmp	r0, #0
   1195c:	beq	11870 <__assert_fail@plt+0x774>
   11960:	mov	r0, #3072	; 0xc00
   11964:	str	r0, [fp, #-12]
   11968:	sub	r0, fp, #12
   1196c:	str	r0, [sp]
   11970:	cmp	r6, #0
   11974:	mov	r2, #0
   11978:	moveq	r2, sl
   1197c:	sub	r0, fp, #8
   11980:	mov	r1, r4
   11984:	mov	r3, r9
   11988:	bl	12084 <__assert_fail@plt+0xf88>
   1198c:	mov	r7, r0
   11990:	ldr	r2, [fp, #-12]
   11994:	mov	r0, r9
   11998:	mov	r1, #1
   1199c:	mov	r3, r5
   119a0:	bl	10f04 <fwrite_unlocked@plt>
   119a4:	ldr	r1, [fp, #-12]
   119a8:	cmp	r0, r1
   119ac:	bcc	119dc <__assert_fail@plt+0x8e0>
   119b0:	cmp	r7, #0
   119b4:	beq	11a08 <__assert_fail@plt+0x90c>
   119b8:	mov	r0, r8
   119bc:	bl	110f0 <feof_unlocked@plt>
   119c0:	cmp	r0, #0
   119c4:	mov	r0, #2
   119c8:	movweq	r0, #1
   119cc:	add	r6, r6, #1
   119d0:	cmp	r6, r0
   119d4:	bcc	1194c <__assert_fail@plt+0x850>
   119d8:	b	11870 <__assert_fail@plt+0x774>
   119dc:	bl	11018 <__errno_location@plt>
   119e0:	ldr	r4, [r0]
   119e4:	movw	r1, #24988	; 0x619c
   119e8:	movt	r1, #1
   119ec:	mov	r0, #0
   119f0:	mov	r2, #5
   119f4:	bl	10f1c <dcgettext@plt>
   119f8:	mov	r2, r0
   119fc:	mov	r0, #1
   11a00:	mov	r1, r4
   11a04:	bl	10f94 <error@plt>
   11a08:	movw	r1, #25000	; 0x61a8
   11a0c:	movt	r1, #1
   11a10:	mov	r0, #0
   11a14:	mov	r2, #5
   11a18:	bl	10f1c <dcgettext@plt>
   11a1c:	mov	r2, r0
   11a20:	mov	r0, #1
   11a24:	mov	r1, #0
   11a28:	bl	10f94 <error@plt>
   11a2c:	bl	11018 <__errno_location@plt>
   11a30:	ldr	r4, [r0]
   11a34:	movw	r1, #24977	; 0x6191
   11a38:	movt	r1, #1
   11a3c:	b	119ec <__assert_fail@plt+0x8f0>
   11a40:	mov	r0, r8
   11a44:	ldr	r1, [sp, #4]
   11a48:	bl	11bcc <__assert_fail@plt+0xad0>
   11a4c:	push	{fp, lr}
   11a50:	mov	fp, sp
   11a54:	sub	sp, sp, #16
   11a58:	mov	sl, r3
   11a5c:	mov	r9, r2
   11a60:	str	r1, [sp, #8]
   11a64:	mov	r5, r0
   11a68:	mov	r4, #0
   11a6c:	str	r4, [fp, #-4]
   11a70:	mov	r0, #30720	; 0x7800
   11a74:	bl	14a18 <__assert_fail@plt+0x391c>
   11a78:	mov	r6, r0
   11a7c:	mov	r0, #40960	; 0xa000
   11a80:	bl	14a18 <__assert_fail@plt+0x391c>
   11a84:	mov	r7, r0
   11a88:	add	r0, r6, r4
   11a8c:	rsb	r2, r4, #30720	; 0x7800
   11a90:	mov	r1, #1
   11a94:	mov	r3, r5
   11a98:	bl	110cc <fread_unlocked@plt>
   11a9c:	add	r4, r0, r4
   11aa0:	mov	r0, r5
   11aa4:	bl	110f0 <feof_unlocked@plt>
   11aa8:	cmp	r0, #0
   11aac:	beq	11b2c <__assert_fail@plt+0xa30>
   11ab0:	cmp	r4, #1
   11ab4:	blt	11afc <__assert_fail@plt+0xa00>
   11ab8:	add	r0, r4, #2
   11abc:	movw	r1, #21846	; 0x5556
   11ac0:	movt	r1, #21845	; 0x5555
   11ac4:	smmul	r0, r0, r1
   11ac8:	add	r0, r0, r0, lsr #31
   11acc:	lsl	r8, r0, #2
   11ad0:	mov	r0, r6
   11ad4:	mov	r1, r4
   11ad8:	mov	r2, r7
   11adc:	mov	r3, r8
   11ae0:	bl	11d64 <__assert_fail@plt+0xc68>
   11ae4:	str	r9, [sp]
   11ae8:	mov	r0, r7
   11aec:	mov	r1, r8
   11af0:	mov	r2, sl
   11af4:	sub	r3, fp, #4
   11af8:	bl	11c5c <__assert_fail@plt+0xb60>
   11afc:	mov	r0, r5
   11b00:	bl	110f0 <feof_unlocked@plt>
   11b04:	cmp	r0, #0
   11b08:	bne	11b48 <__assert_fail@plt+0xa4c>
   11b0c:	mov	r0, r5
   11b10:	bl	10f7c <ferror_unlocked@plt>
   11b14:	cmp	r4, #30720	; 0x7800
   11b18:	bne	11b48 <__assert_fail@plt+0xa4c>
   11b1c:	cmp	r0, #0
   11b20:	mov	r4, #0
   11b24:	beq	11a88 <__assert_fail@plt+0x98c>
   11b28:	b	11b48 <__assert_fail@plt+0xa4c>
   11b2c:	mov	r0, r5
   11b30:	bl	10f7c <ferror_unlocked@plt>
   11b34:	cmp	r4, #30720	; 0x7800
   11b38:	bge	11ab0 <__assert_fail@plt+0x9b4>
   11b3c:	cmp	r0, #0
   11b40:	beq	11a88 <__assert_fail@plt+0x98c>
   11b44:	b	11ab0 <__assert_fail@plt+0x9b4>
   11b48:	cmp	sl, #0
   11b4c:	beq	11b84 <__assert_fail@plt+0xa88>
   11b50:	ldr	r0, [fp, #-4]
   11b54:	cmp	r0, #1
   11b58:	blt	11b84 <__assert_fail@plt+0xa88>
   11b5c:	mov	r0, #10
   11b60:	mov	r1, r9
   11b64:	bl	10f10 <fputc_unlocked@plt>
   11b68:	cmn	r0, #1
   11b6c:	bne	11b84 <__assert_fail@plt+0xa88>
   11b70:	bl	11018 <__errno_location@plt>
   11b74:	ldr	r4, [r0]
   11b78:	movw	r1, #24988	; 0x619c
   11b7c:	movt	r1, #1
   11b80:	b	11bb0 <__assert_fail@plt+0xab4>
   11b84:	mov	r0, r5
   11b88:	bl	10f7c <ferror_unlocked@plt>
   11b8c:	cmp	r0, #0
   11b90:	bne	11ba0 <__assert_fail@plt+0xaa4>
   11b94:	mov	r0, r5
   11b98:	ldr	r1, [sp, #8]
   11b9c:	bl	11bcc <__assert_fail@plt+0xad0>
   11ba0:	bl	11018 <__errno_location@plt>
   11ba4:	ldr	r4, [r0]
   11ba8:	movw	r1, #24977	; 0x6191
   11bac:	movt	r1, #1
   11bb0:	mov	r0, #0
   11bb4:	mov	r2, #5
   11bb8:	bl	10f1c <dcgettext@plt>
   11bbc:	mov	r2, r0
   11bc0:	mov	r0, #1
   11bc4:	mov	r1, r4
   11bc8:	bl	10f94 <error@plt>
   11bcc:	push	{fp, lr}
   11bd0:	mov	fp, sp
   11bd4:	mov	r5, r1
   11bd8:	bl	126e0 <__assert_fail@plt+0x15e4>
   11bdc:	cmp	r0, #0
   11be0:	bne	11bec <__assert_fail@plt+0xaf0>
   11be4:	mov	r0, #0
   11be8:	bl	10fe8 <exit@plt>
   11bec:	movw	r1, #25593	; 0x63f9
   11bf0:	movt	r1, #1
   11bf4:	mov	r0, r5
   11bf8:	bl	10ea4 <strcmp@plt>
   11bfc:	mov	r6, r0
   11c00:	bl	11018 <__errno_location@plt>
   11c04:	ldr	r4, [r0]
   11c08:	cmp	r6, #0
   11c0c:	bne	11c34 <__assert_fail@plt+0xb38>
   11c10:	movw	r1, #25014	; 0x61b6
   11c14:	movt	r1, #1
   11c18:	mov	r0, #0
   11c1c:	mov	r2, #5
   11c20:	bl	10f1c <dcgettext@plt>
   11c24:	mov	r2, r0
   11c28:	mov	r0, #1
   11c2c:	mov	r1, r4
   11c30:	bl	10f94 <error@plt>
   11c34:	mov	r0, #0
   11c38:	mov	r1, #3
   11c3c:	mov	r2, r5
   11c40:	bl	13fbc <__assert_fail@plt+0x2ec0>
   11c44:	mov	r3, r0
   11c48:	movw	r2, #24424	; 0x5f68
   11c4c:	movt	r2, #1
   11c50:	mov	r0, #1
   11c54:	mov	r1, r4
   11c58:	bl	10f94 <error@plt>
   11c5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c60:	add	fp, sp, #28
   11c64:	sub	sp, sp, #4
   11c68:	mov	r4, r1
   11c6c:	mov	r9, r0
   11c70:	cmp	r2, #0
   11c74:	beq	11d0c <__assert_fail@plt+0xc10>
   11c78:	cmp	r4, #1
   11c7c:	blt	11d30 <__assert_fail@plt+0xc34>
   11c80:	mov	r6, r3
   11c84:	mov	r7, r2
   11c88:	movw	r8, #29012	; 0x7154
   11c8c:	movt	r8, #2
   11c90:	mov	sl, #0
   11c94:	b	11ca0 <__assert_fail@plt+0xba4>
   11c98:	cmp	sl, r4
   11c9c:	bge	11d30 <__assert_fail@plt+0xc34>
   11ca0:	sub	r5, r4, sl
   11ca4:	ldr	r0, [r6]
   11ca8:	sub	r0, r7, r0
   11cac:	cmp	r0, r5
   11cb0:	movlt	r5, r0
   11cb4:	cmp	r5, #0
   11cb8:	beq	11cec <__assert_fail@plt+0xbf0>
   11cbc:	add	r0, r9, sl
   11cc0:	ldr	r3, [r8]
   11cc4:	mov	r1, #1
   11cc8:	mov	r2, r5
   11ccc:	bl	10f04 <fwrite_unlocked@plt>
   11cd0:	cmp	r0, r5
   11cd4:	bcc	11d38 <__assert_fail@plt+0xc3c>
   11cd8:	ldr	r0, [r6]
   11cdc:	add	r0, r0, r5
   11ce0:	str	r0, [r6]
   11ce4:	add	sl, r5, sl
   11ce8:	b	11c98 <__assert_fail@plt+0xb9c>
   11cec:	mov	r0, #10
   11cf0:	ldr	r1, [fp, #8]
   11cf4:	bl	10f10 <fputc_unlocked@plt>
   11cf8:	cmn	r0, #1
   11cfc:	beq	11d38 <__assert_fail@plt+0xc3c>
   11d00:	mov	r0, #0
   11d04:	str	r0, [r6]
   11d08:	b	11c98 <__assert_fail@plt+0xb9c>
   11d0c:	movw	r0, #29012	; 0x7154
   11d10:	movt	r0, #2
   11d14:	ldr	r3, [r0]
   11d18:	mov	r0, r9
   11d1c:	mov	r1, #1
   11d20:	mov	r2, r4
   11d24:	bl	10f04 <fwrite_unlocked@plt>
   11d28:	cmp	r0, r4
   11d2c:	bcc	11d38 <__assert_fail@plt+0xc3c>
   11d30:	sub	sp, fp, #28
   11d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d38:	bl	11018 <__errno_location@plt>
   11d3c:	ldr	r4, [r0]
   11d40:	movw	r1, #24988	; 0x619c
   11d44:	movt	r1, #1
   11d48:	mov	r0, #0
   11d4c:	mov	r2, #5
   11d50:	bl	10f1c <dcgettext@plt>
   11d54:	mov	r2, r0
   11d58:	mov	r0, #1
   11d5c:	mov	r1, r4
   11d60:	bl	10f94 <error@plt>
   11d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d68:	add	fp, sp, #28
   11d6c:	sub	sp, sp, #20
   11d70:	mov	r9, r2
   11d74:	mov	r6, r1
   11d78:	mov	r5, r0
   11d7c:	tst	r3, #3
   11d80:	bne	11dac <__assert_fail@plt+0xcb0>
   11d84:	asr	r0, r3, #2
   11d88:	add	r0, r0, r0, lsl #1
   11d8c:	cmp	r0, r6
   11d90:	bne	11dac <__assert_fail@plt+0xcb0>
   11d94:	mov	r0, r5
   11d98:	mov	r1, r6
   11d9c:	mov	r2, r9
   11da0:	sub	sp, fp, #28
   11da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da8:	b	11f0c <__assert_fail@plt+0xe10>
   11dac:	cmp	r6, #0
   11db0:	cmpne	r3, #0
   11db4:	bne	11dd0 <__assert_fail@plt+0xcd4>
   11db8:	cmp	r3, #0
   11dbc:	beq	11dc8 <__assert_fail@plt+0xccc>
   11dc0:	mov	r0, #0
   11dc4:	strb	r0, [r9]
   11dc8:	sub	sp, fp, #28
   11dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dd0:	sub	r0, r3, #3
   11dd4:	str	r0, [sp, #8]
   11dd8:	sub	r0, r3, #2
   11ddc:	str	r0, [sp, #12]
   11de0:	sub	r0, r3, #1
   11de4:	str	r0, [sp, #16]
   11de8:	sub	r0, r3, #4
   11dec:	str	r0, [sp, #4]
   11df0:	mov	r7, #0
   11df4:	movw	r8, #25207	; 0x6277
   11df8:	movt	r8, #1
   11dfc:	ldrb	r0, [r5]
   11e00:	bl	11f98 <__assert_fail@plt+0xe9c>
   11e04:	ldrb	r0, [r8, r0, lsr #2]
   11e08:	mov	r4, r9
   11e0c:	strb	r0, [r4, r7]!
   11e10:	ldr	r0, [sp, #16]
   11e14:	cmp	r0, r7
   11e18:	beq	11dc8 <__assert_fail@plt+0xccc>
   11e1c:	ldrb	r0, [r5]
   11e20:	bl	11f98 <__assert_fail@plt+0xe9c>
   11e24:	lsl	sl, r0, #4
   11e28:	mov	r0, #0
   11e2c:	cmp	r6, #1
   11e30:	beq	11e40 <__assert_fail@plt+0xd44>
   11e34:	ldrb	r0, [r5, #1]
   11e38:	bl	11f98 <__assert_fail@plt+0xe9c>
   11e3c:	lsr	r0, r0, #4
   11e40:	add	r0, r0, sl
   11e44:	and	r0, r0, #63	; 0x3f
   11e48:	ldrb	r0, [r8, r0]
   11e4c:	strb	r0, [r4, #1]
   11e50:	ldr	r0, [sp, #12]
   11e54:	cmp	r0, r7
   11e58:	beq	11dc8 <__assert_fail@plt+0xccc>
   11e5c:	cmp	r6, #1
   11e60:	beq	11e88 <__assert_fail@plt+0xd8c>
   11e64:	ldrb	r0, [r5, #1]
   11e68:	bl	11f98 <__assert_fail@plt+0xe9c>
   11e6c:	subs	sl, r6, #2
   11e70:	lsl	r6, r0, #2
   11e74:	beq	11e94 <__assert_fail@plt+0xd98>
   11e78:	ldrb	r0, [r5, #2]
   11e7c:	bl	11f98 <__assert_fail@plt+0xe9c>
   11e80:	lsr	r0, r0, #6
   11e84:	b	11e98 <__assert_fail@plt+0xd9c>
   11e88:	mov	r0, #61	; 0x3d
   11e8c:	mov	sl, #0
   11e90:	b	11ea4 <__assert_fail@plt+0xda8>
   11e94:	mov	r0, #0
   11e98:	add	r0, r0, r6
   11e9c:	and	r0, r0, #63	; 0x3f
   11ea0:	ldrb	r0, [r8, r0]
   11ea4:	strb	r0, [r4, #2]
   11ea8:	ldr	r0, [sp, #8]
   11eac:	cmp	r0, r7
   11eb0:	beq	11dc8 <__assert_fail@plt+0xccc>
   11eb4:	cmp	sl, #0
   11eb8:	beq	11ed0 <__assert_fail@plt+0xdd4>
   11ebc:	ldrb	r0, [r5, #2]
   11ec0:	bl	11f98 <__assert_fail@plt+0xe9c>
   11ec4:	and	r0, r0, #63	; 0x3f
   11ec8:	ldrb	r0, [r8, r0]
   11ecc:	b	11ed4 <__assert_fail@plt+0xdd8>
   11ed0:	mov	r0, #61	; 0x3d
   11ed4:	strb	r0, [r4, #3]
   11ed8:	ldr	r0, [sp, #4]
   11edc:	cmp	r0, r7
   11ee0:	beq	11dc8 <__assert_fail@plt+0xccc>
   11ee4:	sub	r6, sl, #1
   11ee8:	cmp	r6, sl
   11eec:	mov	r0, r6
   11ef0:	movwcs	r0, #0
   11ef4:	cmp	r0, #0
   11ef8:	addne	r5, r5, #3
   11efc:	add	r7, r7, #4
   11f00:	bne	11dfc <__assert_fail@plt+0xd00>
   11f04:	add	r9, r9, r7
   11f08:	b	11dc0 <__assert_fail@plt+0xcc4>
   11f0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f10:	add	fp, sp, #24
   11f14:	cmp	r1, #0
   11f18:	beq	11f94 <__assert_fail@plt+0xe98>
   11f1c:	mov	r4, r2
   11f20:	mov	r8, r1
   11f24:	mov	r6, r0
   11f28:	movw	r9, #25207	; 0x6277
   11f2c:	movt	r9, #1
   11f30:	ldrb	r7, [r6]
   11f34:	mov	r0, r7
   11f38:	bl	11f98 <__assert_fail@plt+0xe9c>
   11f3c:	ldrb	r0, [r9, r7, lsr #2]
   11f40:	strb	r0, [r4]
   11f44:	ldrb	r5, [r6, #1]
   11f48:	mov	r0, r5
   11f4c:	bl	11f98 <__assert_fail@plt+0xe9c>
   11f50:	lsr	r0, r5, #4
   11f54:	bfi	r0, r7, #4, #2
   11f58:	ldrb	r0, [r9, r0]
   11f5c:	strb	r0, [r4, #1]
   11f60:	ldrb	r0, [r6, #2]
   11f64:	bl	11f98 <__assert_fail@plt+0xe9c>
   11f68:	and	r1, r0, #63	; 0x3f
   11f6c:	ldrb	r1, [r9, r1]
   11f70:	strb	r1, [r4, #3]
   11f74:	lsr	r0, r0, #6
   11f78:	bfi	r0, r5, #2, #4
   11f7c:	ldrb	r0, [r9, r0]
   11f80:	strb	r0, [r4, #2]
   11f84:	add	r4, r4, #4
   11f88:	add	r6, r6, #3
   11f8c:	subs	r8, r8, #3
   11f90:	bne	11f30 <__assert_fail@plt+0xe34>
   11f94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11f98:	bx	lr
   11f9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11fa0:	add	fp, sp, #24
   11fa4:	mov	r6, r2
   11fa8:	mov	r4, r1
   11fac:	mov	r8, r0
   11fb0:	movw	r0, #21846	; 0x5556
   11fb4:	movt	r0, #21845	; 0x5555
   11fb8:	smmul	r0, r1, r0
   11fbc:	add	r0, r0, r0, lsr #31
   11fc0:	add	r1, r0, r0, lsl #1
   11fc4:	subs	r1, r4, r1
   11fc8:	addne	r0, r0, #1
   11fcc:	cmn	r0, #1
   11fd0:	ble	11fe0 <__assert_fail@plt+0xee4>
   11fd4:	cmn	r0, #-536870911	; 0xe0000001
   11fd8:	ble	11ff4 <__assert_fail@plt+0xef8>
   11fdc:	b	12034 <__assert_fail@plt+0xf38>
   11fe0:	beq	11ff4 <__assert_fail@plt+0xef8>
   11fe4:	mov	r1, #-2147483648	; 0x80000000
   11fe8:	sdiv	r1, r1, r0
   11fec:	cmp	r1, #4
   11ff0:	blt	12034 <__assert_fail@plt+0xf38>
   11ff4:	cmn	r4, #1
   11ff8:	ble	12034 <__assert_fail@plt+0xf38>
   11ffc:	lsl	r7, r0, #2
   12000:	orr	r5, r7, #1
   12004:	mov	r0, r5
   12008:	bl	128d4 <__assert_fail@plt+0x17d8>
   1200c:	str	r0, [r6]
   12010:	cmp	r0, #0
   12014:	beq	12044 <__assert_fail@plt+0xf48>
   12018:	mov	r2, r0
   1201c:	mov	r0, r8
   12020:	mov	r1, r4
   12024:	mov	r3, r5
   12028:	bl	11d64 <__assert_fail@plt+0xc68>
   1202c:	mov	r0, r7
   12030:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12034:	mov	r7, #0
   12038:	str	r7, [r6]
   1203c:	mov	r0, r7
   12040:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12044:	mov	r0, r5
   12048:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1204c:	push	{fp, lr}
   12050:	mov	fp, sp
   12054:	bl	11f98 <__assert_fail@plt+0xe9c>
   12058:	movw	r1, #25271	; 0x62b7
   1205c:	movt	r1, #1
   12060:	add	r0, r1, r0
   12064:	ldrsb	r1, [r0]
   12068:	mov	r0, #0
   1206c:	cmn	r1, #1
   12070:	movwgt	r0, #1
   12074:	pop	{fp, pc}
   12078:	mov	r1, #0
   1207c:	str	r1, [r0]
   12080:	bx	lr
   12084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12088:	add	fp, sp, #28
   1208c:	sub	sp, sp, #28
   12090:	mov	r9, r0
   12094:	str	r2, [sp, #20]
   12098:	str	r1, [sp, #24]
   1209c:	str	r3, [sp, #16]
   120a0:	ldr	r0, [fp, #8]
   120a4:	ldr	r0, [r0]
   120a8:	str	r0, [sp, #12]
   120ac:	mov	r0, #0
   120b0:	cmp	r9, #0
   120b4:	mov	r4, #0
   120b8:	beq	120d0 <__assert_fail@plt+0xfd4>
   120bc:	clz	r0, r2
   120c0:	lsr	r4, r0, #5
   120c4:	ldr	r0, [r9]
   120c8:	cmp	r0, #0
   120cc:	movwne	r0, #1
   120d0:	orr	r8, r0, r4
   120d4:	clz	r0, r9
   120d8:	lsr	r0, r0, #5
   120dc:	str	r0, [sp, #8]
   120e0:	add	r7, sp, #16
   120e4:	add	r5, sp, #12
   120e8:	str	r4, [sp, #4]
   120ec:	b	12100 <__assert_fail@plt+0x1004>
   120f0:	add	r0, r0, #1
   120f4:	str	r0, [sp, #24]
   120f8:	sub	r0, r6, #1
   120fc:	str	r0, [sp, #20]
   12100:	ldr	sl, [sp, #12]
   12104:	cmp	r8, #0
   12108:	beq	12114 <__assert_fail@plt+0x1018>
   1210c:	ldr	r6, [sp, #20]
   12110:	b	1216c <__assert_fail@plt+0x1070>
   12114:	ldr	r6, [sp, #20]
   12118:	ldr	r4, [sp, #24]
   1211c:	mov	r0, r4
   12120:	mov	r1, r6
   12124:	mov	r2, r7
   12128:	mov	r3, r5
   1212c:	bl	12264 <__assert_fail@plt+0x1168>
   12130:	cmp	r0, #0
   12134:	beq	12168 <__assert_fail@plt+0x106c>
   12138:	ldr	sl, [sp, #12]
   1213c:	add	r4, r4, #4
   12140:	sub	r6, r6, #4
   12144:	mov	r0, r4
   12148:	mov	r1, r6
   1214c:	mov	r2, r7
   12150:	mov	r3, r5
   12154:	bl	12264 <__assert_fail@plt+0x1168>
   12158:	cmp	r0, #0
   1215c:	bne	12138 <__assert_fail@plt+0x103c>
   12160:	str	r6, [sp, #20]
   12164:	str	r4, [sp, #24]
   12168:	ldr	r4, [sp, #4]
   1216c:	cmp	r6, #0
   12170:	mov	r0, r6
   12174:	movwne	r0, #1
   12178:	orr	r0, r4, r0
   1217c:	cmp	r0, #1
   12180:	bne	12238 <__assert_fail@plt+0x113c>
   12184:	cmp	r6, #0
   12188:	beq	121a8 <__assert_fail@plt+0x10ac>
   1218c:	ldr	r0, [sp, #24]
   12190:	ldrb	r1, [r0]
   12194:	subs	r1, r1, #10
   12198:	movwne	r1, #1
   1219c:	ldr	r2, [sp, #8]
   121a0:	orrs	r1, r1, r2
   121a4:	beq	120f0 <__assert_fail@plt+0xff4>
   121a8:	ldr	r0, [sp, #12]
   121ac:	str	sl, [sp, #12]
   121b0:	sub	r0, r0, sl
   121b4:	ldr	r1, [sp, #16]
   121b8:	add	r0, r1, r0
   121bc:	str	r0, [sp, #16]
   121c0:	ldr	r0, [sp, #24]
   121c4:	add	r6, r0, r6
   121c8:	cmp	r9, #0
   121cc:	beq	121e4 <__assert_fail@plt+0x10e8>
   121d0:	mov	r0, r9
   121d4:	add	r1, sp, #24
   121d8:	mov	r2, r6
   121dc:	add	r3, sp, #20
   121e0:	bl	12440 <__assert_fail@plt+0x1344>
   121e4:	ldr	r1, [sp, #20]
   121e8:	cmp	r1, #0
   121ec:	beq	12230 <__assert_fail@plt+0x1134>
   121f0:	cmp	r1, #3
   121f4:	mov	r2, #0
   121f8:	movwgt	r2, #1
   121fc:	orr	r2, r4, r2
   12200:	ldr	r3, [sp, #8]
   12204:	orrs	r2, r2, r3
   12208:	beq	12230 <__assert_fail@plt+0x1134>
   1220c:	mov	r2, r7
   12210:	mov	r3, r5
   12214:	bl	12264 <__assert_fail@plt+0x1168>
   12218:	cmp	r0, #0
   1221c:	beq	12238 <__assert_fail@plt+0x113c>
   12220:	ldr	r0, [sp, #24]
   12224:	sub	r0, r6, r0
   12228:	str	r0, [sp, #20]
   1222c:	b	12100 <__assert_fail@plt+0x1004>
   12230:	mov	r0, #0
   12234:	str	r0, [sp, #20]
   12238:	ldr	r0, [fp, #8]
   1223c:	mov	r2, r0
   12240:	ldr	r0, [r0]
   12244:	ldr	r1, [sp, #12]
   12248:	sub	r0, r0, r1
   1224c:	str	r0, [r2]
   12250:	ldr	r0, [sp, #20]
   12254:	clz	r0, r0
   12258:	lsr	r0, r0, #5
   1225c:	sub	sp, fp, #28
   12260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12268:	add	fp, sp, #28
   1226c:	sub	sp, sp, #4
   12270:	mov	sl, #0
   12274:	cmp	r1, #2
   12278:	blt	123b4 <__assert_fail@plt+0x12b8>
   1227c:	mov	r8, r3
   12280:	mov	r9, r2
   12284:	mov	r7, r1
   12288:	mov	r6, r0
   1228c:	ldr	r5, [r2]
   12290:	ldrb	r4, [r0]
   12294:	mov	r0, r4
   12298:	bl	1204c <__assert_fail@plt+0xf50>
   1229c:	cmp	r0, #0
   122a0:	beq	123b4 <__assert_fail@plt+0x12b8>
   122a4:	str	r5, [sp]
   122a8:	ldrb	r5, [r6, #1]
   122ac:	mov	r0, r5
   122b0:	bl	1204c <__assert_fail@plt+0xf50>
   122b4:	cmp	r0, #0
   122b8:	beq	123b4 <__assert_fail@plt+0x12b8>
   122bc:	ldr	r0, [r8]
   122c0:	cmp	r0, #0
   122c4:	beq	1230c <__assert_fail@plt+0x1210>
   122c8:	mov	r0, r4
   122cc:	bl	11f98 <__assert_fail@plt+0xe9c>
   122d0:	mov	r0, r5
   122d4:	bl	11f98 <__assert_fail@plt+0xe9c>
   122d8:	movw	r0, #25271	; 0x62b7
   122dc:	movt	r0, #1
   122e0:	ldrb	r1, [r0, r4]
   122e4:	add	r0, r0, r5
   122e8:	ldrsb	r0, [r0]
   122ec:	lsr	r0, r0, #4
   122f0:	orr	r0, r0, r1, lsl #2
   122f4:	ldr	r1, [sp]
   122f8:	strb	r0, [r1], #1
   122fc:	str	r1, [sp]
   12300:	ldr	r0, [r8]
   12304:	sub	r0, r0, #1
   12308:	str	r0, [r8]
   1230c:	cmp	r7, #2
   12310:	beq	123ac <__assert_fail@plt+0x12b0>
   12314:	ldrb	r4, [r6, #2]
   12318:	cmp	r4, #61	; 0x3d
   1231c:	bne	12344 <__assert_fail@plt+0x1248>
   12320:	cmp	r7, #4
   12324:	bne	123ac <__assert_fail@plt+0x12b0>
   12328:	ldrb	r0, [r6, #3]
   1232c:	cmp	r0, #61	; 0x3d
   12330:	bne	123ac <__assert_fail@plt+0x12b0>
   12334:	ldr	r5, [sp]
   12338:	str	r5, [r9]
   1233c:	mov	sl, #1
   12340:	b	123b4 <__assert_fail@plt+0x12b8>
   12344:	mov	r0, r4
   12348:	bl	1204c <__assert_fail@plt+0xf50>
   1234c:	cmp	r0, #0
   12350:	beq	123ac <__assert_fail@plt+0x12b0>
   12354:	ldr	r0, [r8]
   12358:	cmp	r0, #0
   1235c:	beq	123c0 <__assert_fail@plt+0x12c4>
   12360:	mov	r0, r5
   12364:	bl	11f98 <__assert_fail@plt+0xe9c>
   12368:	mov	r0, r4
   1236c:	bl	11f98 <__assert_fail@plt+0xe9c>
   12370:	movw	r0, #25271	; 0x62b7
   12374:	movt	r0, #1
   12378:	ldrb	r1, [r0, r5]
   1237c:	add	r0, r0, r4
   12380:	ldrsb	r0, [r0]
   12384:	lsr	r0, r0, #2
   12388:	orr	r0, r0, r1, lsl #4
   1238c:	ldr	r5, [sp]
   12390:	strb	r0, [r5], #1
   12394:	ldr	r0, [r8]
   12398:	sub	r0, r0, #1
   1239c:	str	r0, [r8]
   123a0:	cmp	r7, #3
   123a4:	beq	12438 <__assert_fail@plt+0x133c>
   123a8:	b	123cc <__assert_fail@plt+0x12d0>
   123ac:	ldr	r0, [sp]
   123b0:	str	r0, [r9]
   123b4:	mov	r0, sl
   123b8:	sub	sp, fp, #28
   123bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123c0:	ldr	r5, [sp]
   123c4:	cmp	r7, #3
   123c8:	beq	12438 <__assert_fail@plt+0x133c>
   123cc:	ldrb	r6, [r6, #3]
   123d0:	cmp	r6, #61	; 0x3d
   123d4:	bne	123e4 <__assert_fail@plt+0x12e8>
   123d8:	cmp	r7, #4
   123dc:	beq	12338 <__assert_fail@plt+0x123c>
   123e0:	b	12438 <__assert_fail@plt+0x133c>
   123e4:	mov	r0, r6
   123e8:	bl	1204c <__assert_fail@plt+0xf50>
   123ec:	cmp	r0, #0
   123f0:	beq	12438 <__assert_fail@plt+0x133c>
   123f4:	ldr	r0, [r8]
   123f8:	cmp	r0, #0
   123fc:	beq	12338 <__assert_fail@plt+0x123c>
   12400:	mov	r0, r4
   12404:	bl	11f98 <__assert_fail@plt+0xe9c>
   12408:	mov	r0, r6
   1240c:	bl	11f98 <__assert_fail@plt+0xe9c>
   12410:	movw	r0, #25271	; 0x62b7
   12414:	movt	r0, #1
   12418:	ldrb	r1, [r0, r4]
   1241c:	ldrb	r0, [r0, r6]
   12420:	orr	r0, r0, r1, lsl #6
   12424:	strb	r0, [r5], #1
   12428:	ldr	r0, [r8]
   1242c:	sub	r0, r0, #1
   12430:	str	r0, [r8]
   12434:	b	12338 <__assert_fail@plt+0x123c>
   12438:	str	r5, [r9]
   1243c:	b	123b4 <__assert_fail@plt+0x12b8>
   12440:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12444:	add	fp, sp, #24
   12448:	mov	r8, r3
   1244c:	mov	r7, r2
   12450:	mov	r6, r1
   12454:	mov	r4, r0
   12458:	ldr	r0, [r0]
   1245c:	cmp	r0, #0
   12460:	beq	12474 <__assert_fail@plt+0x1378>
   12464:	cmp	r0, #4
   12468:	bne	124a0 <__assert_fail@plt+0x13a4>
   1246c:	mov	r0, #0
   12470:	str	r0, [r4]
   12474:	ldr	r5, [r6]
   12478:	sub	r0, r7, r5
   1247c:	cmp	r0, #4
   12480:	blt	124a0 <__assert_fail@plt+0x13a4>
   12484:	mov	r9, #4
   12488:	mov	r0, r5
   1248c:	mov	r1, #10
   12490:	mov	r2, #4
   12494:	bl	11060 <memchr@plt>
   12498:	cmp	r0, #0
   1249c:	beq	124f0 <__assert_fail@plt+0x13f4>
   124a0:	ldr	r0, [r6]
   124a4:	cmp	r0, r7
   124a8:	bcs	124dc <__assert_fail@plt+0x13e0>
   124ac:	add	r0, r0, #1
   124b0:	ldrb	r1, [r0, #-1]
   124b4:	cmp	r1, #10
   124b8:	beq	124a4 <__assert_fail@plt+0x13a8>
   124bc:	ldr	r2, [r4]
   124c0:	add	r3, r2, #1
   124c4:	mov	r5, r4
   124c8:	str	r3, [r5], r2
   124cc:	strb	r1, [r5, #4]
   124d0:	ldr	r1, [r4]
   124d4:	cmp	r1, #4
   124d8:	bne	124a4 <__assert_fail@plt+0x13a8>
   124dc:	str	r0, [r6]
   124e0:	ldr	r0, [r4], #4
   124e4:	str	r0, [r8]
   124e8:	mov	r0, r4
   124ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   124f0:	add	r0, r5, #4
   124f4:	str	r0, [r6]
   124f8:	str	r9, [r8]
   124fc:	mov	r0, r5
   12500:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12504:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12508:	add	fp, sp, #24
   1250c:	sub	sp, sp, #8
   12510:	mov	r4, r3
   12514:	mov	r6, r2
   12518:	mov	r8, r1
   1251c:	mov	r7, r0
   12520:	asr	r0, r2, #2
   12524:	add	r0, r0, r0, lsl #1
   12528:	add	r0, r0, #3
   1252c:	str	r0, [sp, #4]
   12530:	bl	128d4 <__assert_fail@plt+0x17d8>
   12534:	str	r0, [r4]
   12538:	mov	r5, #1
   1253c:	cmp	r0, #0
   12540:	beq	1258c <__assert_fail@plt+0x1490>
   12544:	mov	r3, r0
   12548:	add	r0, sp, #4
   1254c:	str	r0, [sp]
   12550:	mov	r0, r7
   12554:	mov	r1, r8
   12558:	mov	r2, r6
   1255c:	bl	12084 <__assert_fail@plt+0xf88>
   12560:	cmp	r0, #0
   12564:	beq	1257c <__assert_fail@plt+0x1480>
   12568:	ldr	r0, [fp, #8]
   1256c:	cmp	r0, #0
   12570:	ldrne	r1, [sp, #4]
   12574:	strne	r1, [r0]
   12578:	b	1258c <__assert_fail@plt+0x1490>
   1257c:	ldr	r0, [r4]
   12580:	bl	127e8 <__assert_fail@plt+0x16ec>
   12584:	mov	r5, #0
   12588:	str	r5, [r4]
   1258c:	mov	r0, r5
   12590:	sub	sp, fp, #24
   12594:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12598:	movw	r1, #29024	; 0x7160
   1259c:	movt	r1, #2
   125a0:	str	r0, [r1]
   125a4:	bx	lr
   125a8:	movw	r1, #29028	; 0x7164
   125ac:	movt	r1, #2
   125b0:	strb	r0, [r1]
   125b4:	bx	lr
   125b8:	push	{r4, r5, r6, sl, fp, lr}
   125bc:	add	fp, sp, #16
   125c0:	sub	sp, sp, #8
   125c4:	movw	r0, #29012	; 0x7154
   125c8:	movt	r0, #2
   125cc:	ldr	r0, [r0]
   125d0:	bl	15790 <__assert_fail@plt+0x4694>
   125d4:	cmp	r0, #0
   125d8:	beq	12600 <__assert_fail@plt+0x1504>
   125dc:	movw	r0, #29028	; 0x7164
   125e0:	movt	r0, #2
   125e4:	ldrb	r0, [r0]
   125e8:	cmp	r0, #0
   125ec:	beq	12620 <__assert_fail@plt+0x1524>
   125f0:	bl	11018 <__errno_location@plt>
   125f4:	ldr	r0, [r0]
   125f8:	cmp	r0, #32
   125fc:	bne	12620 <__assert_fail@plt+0x1524>
   12600:	movw	r0, #29000	; 0x7148
   12604:	movt	r0, #2
   12608:	ldr	r0, [r0]
   1260c:	bl	15790 <__assert_fail@plt+0x4694>
   12610:	cmp	r0, #0
   12614:	subeq	sp, fp, #16
   12618:	popeq	{r4, r5, r6, sl, fp, pc}
   1261c:	b	12690 <__assert_fail@plt+0x1594>
   12620:	movw	r1, #24988	; 0x619c
   12624:	movt	r1, #1
   12628:	mov	r0, #0
   1262c:	mov	r2, #5
   12630:	bl	10f1c <dcgettext@plt>
   12634:	mov	r4, r0
   12638:	movw	r0, #29024	; 0x7160
   1263c:	movt	r0, #2
   12640:	ldr	r6, [r0]
   12644:	bl	11018 <__errno_location@plt>
   12648:	ldr	r5, [r0]
   1264c:	cmp	r6, #0
   12650:	bne	1266c <__assert_fail@plt+0x1570>
   12654:	movw	r2, #24424	; 0x5f68
   12658:	movt	r2, #1
   1265c:	mov	r0, #0
   12660:	mov	r1, r5
   12664:	mov	r3, r4
   12668:	b	1268c <__assert_fail@plt+0x1590>
   1266c:	mov	r0, r6
   12670:	bl	13fac <__assert_fail@plt+0x2eb0>
   12674:	mov	r3, r0
   12678:	str	r4, [sp]
   1267c:	movw	r2, #24420	; 0x5f64
   12680:	movt	r2, #1
   12684:	mov	r0, #0
   12688:	mov	r1, r5
   1268c:	bl	10f94 <error@plt>
   12690:	movw	r0, #28916	; 0x70f4
   12694:	movt	r0, #2
   12698:	ldr	r0, [r0]
   1269c:	bl	10ee0 <_exit@plt>
   126a0:	b	10eb0 <posix_fadvise64@plt>
   126a4:	cmp	r0, #0
   126a8:	bxeq	lr
   126ac:	push	{r4, sl, fp, lr}
   126b0:	add	fp, sp, #8
   126b4:	sub	sp, sp, #16
   126b8:	mov	r4, r1
   126bc:	bl	11048 <fileno@plt>
   126c0:	mov	r1, #0
   126c4:	str	r1, [sp]
   126c8:	stmib	sp, {r1, r4}
   126cc:	mov	r2, #0
   126d0:	mov	r3, #0
   126d4:	bl	126a0 <__assert_fail@plt+0x15a4>
   126d8:	sub	sp, fp, #8
   126dc:	pop	{r4, sl, fp, pc}
   126e0:	push	{r4, r5, fp, lr}
   126e4:	add	fp, sp, #8
   126e8:	sub	sp, sp, #8
   126ec:	mov	r4, r0
   126f0:	bl	11048 <fileno@plt>
   126f4:	cmn	r0, #1
   126f8:	ble	12770 <__assert_fail@plt+0x1674>
   126fc:	mov	r0, r4
   12700:	bl	10fb8 <__freading@plt>
   12704:	cmp	r0, #0
   12708:	beq	12734 <__assert_fail@plt+0x1638>
   1270c:	mov	r0, r4
   12710:	bl	11048 <fileno@plt>
   12714:	mov	r1, #1
   12718:	str	r1, [sp]
   1271c:	mov	r2, #0
   12720:	mov	r3, #0
   12724:	bl	10f58 <lseek64@plt>
   12728:	and	r0, r0, r1
   1272c:	cmn	r0, #1
   12730:	beq	12770 <__assert_fail@plt+0x1674>
   12734:	mov	r0, r4
   12738:	bl	12780 <__assert_fail@plt+0x1684>
   1273c:	cmp	r0, #0
   12740:	beq	12770 <__assert_fail@plt+0x1674>
   12744:	bl	11018 <__errno_location@plt>
   12748:	ldr	r5, [r0]
   1274c:	mov	r0, r4
   12750:	bl	11078 <fclose@plt>
   12754:	cmp	r5, #0
   12758:	beq	12768 <__assert_fail@plt+0x166c>
   1275c:	bl	11018 <__errno_location@plt>
   12760:	str	r5, [r0]
   12764:	mvn	r0, #0
   12768:	sub	sp, fp, #8
   1276c:	pop	{r4, r5, fp, pc}
   12770:	mov	r0, r4
   12774:	sub	sp, fp, #8
   12778:	pop	{r4, r5, fp, lr}
   1277c:	b	11078 <fclose@plt>
   12780:	push	{r4, sl, fp, lr}
   12784:	add	fp, sp, #8
   12788:	mov	r4, r0
   1278c:	cmp	r0, #0
   12790:	beq	127a8 <__assert_fail@plt+0x16ac>
   12794:	mov	r0, r4
   12798:	bl	10fb8 <__freading@plt>
   1279c:	cmp	r0, #0
   127a0:	movne	r0, r4
   127a4:	blne	127b4 <__assert_fail@plt+0x16b8>
   127a8:	mov	r0, r4
   127ac:	pop	{r4, sl, fp, lr}
   127b0:	b	10ebc <fflush@plt>
   127b4:	push	{fp, lr}
   127b8:	mov	fp, sp
   127bc:	sub	sp, sp, #8
   127c0:	ldrb	r1, [r0, #1]
   127c4:	tst	r1, #1
   127c8:	beq	127e0 <__assert_fail@plt+0x16e4>
   127cc:	mov	r1, #1
   127d0:	str	r1, [sp]
   127d4:	mov	r2, #0
   127d8:	mov	r3, #0
   127dc:	bl	12810 <__assert_fail@plt+0x1714>
   127e0:	mov	sp, fp
   127e4:	pop	{fp, pc}
   127e8:	push	{r4, r5, r6, sl, fp, lr}
   127ec:	add	fp, sp, #16
   127f0:	mov	r4, r0
   127f4:	bl	11018 <__errno_location@plt>
   127f8:	mov	r5, r0
   127fc:	ldr	r6, [r0]
   12800:	mov	r0, r4
   12804:	bl	10ed4 <free@plt>
   12808:	str	r6, [r5]
   1280c:	pop	{r4, r5, r6, sl, fp, pc}
   12810:	push	{r4, r5, r6, r7, fp, lr}
   12814:	add	fp, sp, #16
   12818:	sub	sp, sp, #8
   1281c:	mov	r5, r3
   12820:	mov	r6, r2
   12824:	mov	r4, r0
   12828:	ldr	r0, [r0, #4]
   1282c:	ldr	r1, [r4, #8]
   12830:	cmp	r1, r0
   12834:	bne	12850 <__assert_fail@plt+0x1754>
   12838:	ldrd	r0, [r4, #16]
   1283c:	cmp	r1, r0
   12840:	bne	12850 <__assert_fail@plt+0x1754>
   12844:	ldr	r0, [r4, #36]	; 0x24
   12848:	cmp	r0, #0
   1284c:	beq	12868 <__assert_fail@plt+0x176c>
   12850:	mov	r0, r4
   12854:	mov	r2, r6
   12858:	mov	r3, r5
   1285c:	sub	sp, fp, #16
   12860:	pop	{r4, r5, r6, r7, fp, lr}
   12864:	b	11084 <fseeko64@plt>
   12868:	ldr	r7, [fp, #8]
   1286c:	mov	r0, r4
   12870:	bl	11048 <fileno@plt>
   12874:	str	r7, [sp]
   12878:	mov	r2, r6
   1287c:	mov	r3, r5
   12880:	bl	10f58 <lseek64@plt>
   12884:	and	r2, r0, r1
   12888:	cmn	r2, #1
   1288c:	beq	128ac <__assert_fail@plt+0x17b0>
   12890:	strd	r0, [r4, #80]	; 0x50
   12894:	ldr	r0, [r4]
   12898:	bic	r0, r0, #16
   1289c:	str	r0, [r4]
   128a0:	mov	r0, #0
   128a4:	sub	sp, fp, #16
   128a8:	pop	{r4, r5, r6, r7, fp, pc}
   128ac:	mvn	r0, #0
   128b0:	sub	sp, fp, #16
   128b4:	pop	{r4, r5, r6, r7, fp, pc}
   128b8:	push	{fp, lr}
   128bc:	mov	fp, sp
   128c0:	bl	11018 <__errno_location@plt>
   128c4:	mov	r1, #12
   128c8:	str	r1, [r0]
   128cc:	mov	r0, #0
   128d0:	pop	{fp, pc}
   128d4:	b	153d8 <__assert_fail@plt+0x42dc>
   128d8:	cmp	r1, #0
   128dc:	orreq	r1, r1, #1
   128e0:	b	15408 <__assert_fail@plt+0x430c>
   128e4:	b	15384 <__assert_fail@plt+0x4288>
   128e8:	clz	r3, r2
   128ec:	lsr	ip, r3, #5
   128f0:	clz	r3, r1
   128f4:	lsr	r3, r3, #5
   128f8:	orrs	r3, r3, ip
   128fc:	movwne	r1, #1
   12900:	movwne	r2, #1
   12904:	b	14514 <__assert_fail@plt+0x3418>
   12908:	push	{r4, r5, fp, lr}
   1290c:	add	fp, sp, #8
   12910:	cmp	r0, #0
   12914:	beq	129a8 <__assert_fail@plt+0x18ac>
   12918:	mov	r4, r0
   1291c:	mov	r1, #47	; 0x2f
   12920:	bl	1109c <strrchr@plt>
   12924:	cmp	r0, #0
   12928:	mov	r5, r4
   1292c:	addne	r5, r0, #1
   12930:	sub	r0, r5, r4
   12934:	cmp	r0, #7
   12938:	blt	1298c <__assert_fail@plt+0x1890>
   1293c:	sub	r0, r5, #7
   12940:	movw	r1, #25583	; 0x63ef
   12944:	movt	r1, #1
   12948:	mov	r2, #7
   1294c:	bl	110d8 <strncmp@plt>
   12950:	cmp	r0, #0
   12954:	bne	1298c <__assert_fail@plt+0x1890>
   12958:	movw	r1, #25591	; 0x63f7
   1295c:	movt	r1, #1
   12960:	mov	r0, r5
   12964:	mov	r2, #3
   12968:	bl	110d8 <strncmp@plt>
   1296c:	cmp	r0, #0
   12970:	beq	1297c <__assert_fail@plt+0x1880>
   12974:	mov	r4, r5
   12978:	b	1298c <__assert_fail@plt+0x1890>
   1297c:	add	r4, r5, #3
   12980:	movw	r0, #28984	; 0x7138
   12984:	movt	r0, #2
   12988:	str	r4, [r0]
   1298c:	movw	r0, #28988	; 0x713c
   12990:	movt	r0, #2
   12994:	str	r4, [r0]
   12998:	movw	r0, #29032	; 0x7168
   1299c:	movt	r0, #2
   129a0:	str	r4, [r0]
   129a4:	pop	{r4, r5, fp, pc}
   129a8:	movw	r0, #29000	; 0x7148
   129ac:	movt	r0, #2
   129b0:	ldr	r3, [r0]
   129b4:	movw	r0, #25527	; 0x63b7
   129b8:	movt	r0, #1
   129bc:	mov	r1, #55	; 0x37
   129c0:	mov	r2, #1
   129c4:	bl	10f4c <fwrite@plt>
   129c8:	bl	110e4 <abort@plt>
   129cc:	push	{r4, r5, r6, sl, fp, lr}
   129d0:	add	fp, sp, #16
   129d4:	mov	r4, r0
   129d8:	movw	r0, #29040	; 0x7170
   129dc:	movt	r0, #2
   129e0:	cmp	r4, #0
   129e4:	moveq	r4, r0
   129e8:	bl	11018 <__errno_location@plt>
   129ec:	mov	r5, r0
   129f0:	ldr	r6, [r0]
   129f4:	mov	r0, r4
   129f8:	mov	r1, #48	; 0x30
   129fc:	bl	14d00 <__assert_fail@plt+0x3c04>
   12a00:	str	r6, [r5]
   12a04:	pop	{r4, r5, r6, sl, fp, pc}
   12a08:	movw	r1, #29040	; 0x7170
   12a0c:	movt	r1, #2
   12a10:	cmp	r0, #0
   12a14:	movne	r1, r0
   12a18:	ldr	r0, [r1]
   12a1c:	bx	lr
   12a20:	movw	r2, #29040	; 0x7170
   12a24:	movt	r2, #2
   12a28:	cmp	r0, #0
   12a2c:	movne	r2, r0
   12a30:	str	r1, [r2]
   12a34:	bx	lr
   12a38:	movw	r3, #29040	; 0x7170
   12a3c:	movt	r3, #2
   12a40:	cmp	r0, #0
   12a44:	movne	r3, r0
   12a48:	ubfx	r0, r1, #5, #3
   12a4c:	add	ip, r3, r0, lsl #2
   12a50:	ldr	r3, [ip, #8]
   12a54:	and	r1, r1, #31
   12a58:	mov	r0, #1
   12a5c:	and	r0, r0, r3, lsr r1
   12a60:	and	r2, r2, #1
   12a64:	eor	r2, r0, r2
   12a68:	eor	r1, r3, r2, lsl r1
   12a6c:	str	r1, [ip, #8]
   12a70:	bx	lr
   12a74:	movw	r2, #29040	; 0x7170
   12a78:	movt	r2, #2
   12a7c:	cmp	r0, #0
   12a80:	movne	r2, r0
   12a84:	ldr	r0, [r2, #4]
   12a88:	str	r1, [r2, #4]
   12a8c:	bx	lr
   12a90:	push	{fp, lr}
   12a94:	mov	fp, sp
   12a98:	movw	r3, #29040	; 0x7170
   12a9c:	movt	r3, #2
   12aa0:	cmp	r0, #0
   12aa4:	movne	r3, r0
   12aa8:	mov	r0, #10
   12aac:	str	r0, [r3]
   12ab0:	cmp	r1, #0
   12ab4:	cmpne	r2, #0
   12ab8:	bne	12ac0 <__assert_fail@plt+0x19c4>
   12abc:	bl	110e4 <abort@plt>
   12ac0:	str	r1, [r3, #40]	; 0x28
   12ac4:	str	r2, [r3, #44]	; 0x2c
   12ac8:	pop	{fp, pc}
   12acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad0:	add	fp, sp, #28
   12ad4:	sub	sp, sp, #20
   12ad8:	mov	r8, r3
   12adc:	mov	r9, r2
   12ae0:	mov	sl, r1
   12ae4:	mov	r7, r0
   12ae8:	ldr	r0, [fp, #8]
   12aec:	movw	r5, #29040	; 0x7170
   12af0:	movt	r5, #2
   12af4:	cmp	r0, #0
   12af8:	movne	r5, r0
   12afc:	bl	11018 <__errno_location@plt>
   12b00:	mov	r4, r0
   12b04:	ldm	r5, {r0, r1}
   12b08:	ldr	r2, [r5, #40]	; 0x28
   12b0c:	ldr	r3, [r5, #44]	; 0x2c
   12b10:	ldr	r6, [r4]
   12b14:	add	r5, r5, #8
   12b18:	stm	sp, {r0, r1, r5}
   12b1c:	str	r2, [sp, #12]
   12b20:	str	r3, [sp, #16]
   12b24:	mov	r0, r7
   12b28:	mov	r1, sl
   12b2c:	mov	r2, r9
   12b30:	mov	r3, r8
   12b34:	bl	12b44 <__assert_fail@plt+0x1a48>
   12b38:	str	r6, [r4]
   12b3c:	sub	sp, fp, #28
   12b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b48:	add	fp, sp, #28
   12b4c:	sub	sp, sp, #156	; 0x9c
   12b50:	mov	r9, r3
   12b54:	mov	r7, r1
   12b58:	mov	r6, r0
   12b5c:	str	r2, [fp, #-80]	; 0xffffffb0
   12b60:	add	r0, r2, #1
   12b64:	str	r0, [sp, #76]	; 0x4c
   12b68:	ldr	r0, [fp, #12]
   12b6c:	and	r1, r0, #1
   12b70:	str	r1, [sp, #40]	; 0x28
   12b74:	and	r1, r0, #4
   12b78:	str	r1, [sp, #36]	; 0x24
   12b7c:	ubfx	r4, r0, #1, #1
   12b80:	bl	10f64 <__ctype_get_mb_cur_max@plt>
   12b84:	str	r0, [sp, #44]	; 0x2c
   12b88:	ldr	r0, [fp, #24]
   12b8c:	str	r0, [sp, #88]	; 0x58
   12b90:	ldr	r0, [fp, #20]
   12b94:	str	r0, [sp, #80]	; 0x50
   12b98:	ldr	r1, [fp, #8]
   12b9c:	mov	r0, #0
   12ba0:	str	r0, [sp, #84]	; 0x54
   12ba4:	mov	r0, #0
   12ba8:	str	r0, [fp, #-84]	; 0xffffffac
   12bac:	mov	r0, #0
   12bb0:	str	r0, [fp, #-72]	; 0xffffffb8
   12bb4:	mov	r0, #0
   12bb8:	mov	r2, #0
   12bbc:	str	r2, [fp, #-56]	; 0xffffffc8
   12bc0:	mov	r2, #0
   12bc4:	str	r2, [sp, #64]	; 0x40
   12bc8:	mov	r2, #1
   12bcc:	str	r2, [fp, #-48]	; 0xffffffd0
   12bd0:	cmp	r1, #10
   12bd4:	bhi	13b00 <__assert_fail@plt+0x2a04>
   12bd8:	mov	sl, r7
   12bdc:	mov	r7, r1
   12be0:	add	r1, pc, #24
   12be4:	mov	r8, #0
   12be8:	mov	r2, #1
   12bec:	mov	r3, #0
   12bf0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12bf4:	mov	lr, r9
   12bf8:	mov	r5, r6
   12bfc:	ldr	pc, [r1, r7, lsl #2]
   12c00:	ldrdeq	r2, [r1], -r4
   12c04:	andeq	r2, r1, r4, lsl sp
   12c08:	andeq	r2, r1, r4, ror #25
   12c0c:	andeq	r2, r1, ip, asr #25
   12c10:	andeq	r2, r1, r8, lsl #26
   12c14:	andeq	r2, r1, r8, ror #26
   12c18:	strdeq	r2, [r1], -r4
   12c1c:	andeq	r2, r1, r4, asr #27
   12c20:	andeq	r2, r1, ip, lsr #24
   12c24:	andeq	r2, r1, ip, lsr #24
   12c28:	andeq	r2, r1, r8, asr ip
   12c2c:	movw	r0, #25673	; 0x6449
   12c30:	movt	r0, #1
   12c34:	mov	r1, r7
   12c38:	bl	14108 <__assert_fail@plt+0x300c>
   12c3c:	str	r0, [sp, #80]	; 0x50
   12c40:	movw	r0, #25675	; 0x644b
   12c44:	movt	r0, #1
   12c48:	mov	r1, r7
   12c4c:	bl	14108 <__assert_fail@plt+0x300c>
   12c50:	mov	r5, r6
   12c54:	str	r0, [sp, #88]	; 0x58
   12c58:	mov	r8, #0
   12c5c:	tst	r4, #1
   12c60:	str	r7, [fp, #-64]	; 0xffffffc0
   12c64:	bne	12c9c <__assert_fail@plt+0x1ba0>
   12c68:	ldr	r0, [sp, #80]	; 0x50
   12c6c:	ldrb	r0, [r0]
   12c70:	cmp	r0, #0
   12c74:	beq	12c9c <__assert_fail@plt+0x1ba0>
   12c78:	ldr	r1, [sp, #80]	; 0x50
   12c7c:	add	r1, r1, #1
   12c80:	mov	r8, #0
   12c84:	cmp	r8, sl
   12c88:	strbcc	r0, [r5, r8]
   12c8c:	ldrb	r0, [r1, r8]
   12c90:	add	r8, r8, #1
   12c94:	cmp	r0, #0
   12c98:	bne	12c84 <__assert_fail@plt+0x1b88>
   12c9c:	ldr	r7, [sp, #88]	; 0x58
   12ca0:	mov	r0, r7
   12ca4:	bl	11000 <strlen@plt>
   12ca8:	mov	r5, r6
   12cac:	str	r0, [fp, #-72]	; 0xffffffb8
   12cb0:	str	r7, [fp, #-84]	; 0xffffffac
   12cb4:	mov	r2, #1
   12cb8:	mov	r3, r4
   12cbc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12cc0:	mov	lr, r9
   12cc4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12cc8:	b	12dc4 <__assert_fail@plt+0x1cc8>
   12ccc:	mov	r0, #1
   12cd0:	b	12d14 <__assert_fail@plt+0x1c18>
   12cd4:	mov	r7, #0
   12cd8:	mov	r8, #0
   12cdc:	mov	r2, r0
   12ce0:	b	12dc0 <__assert_fail@plt+0x1cc4>
   12ce4:	tst	r4, #1
   12ce8:	bne	12d14 <__assert_fail@plt+0x1c18>
   12cec:	mov	r2, r0
   12cf0:	b	12d3c <__assert_fail@plt+0x1c40>
   12cf4:	mov	r0, #1
   12cf8:	str	r0, [fp, #-72]	; 0xffffffb8
   12cfc:	mov	r8, #0
   12d00:	mov	r7, #5
   12d04:	b	12d80 <__assert_fail@plt+0x1c84>
   12d08:	mov	r2, #1
   12d0c:	tst	r4, #1
   12d10:	beq	12d3c <__assert_fail@plt+0x1c40>
   12d14:	mov	r1, #1
   12d18:	str	r1, [fp, #-72]	; 0xffffffb8
   12d1c:	mov	r8, #0
   12d20:	mov	r7, #2
   12d24:	movw	r1, #25675	; 0x644b
   12d28:	movt	r1, #1
   12d2c:	str	r1, [fp, #-84]	; 0xffffffac
   12d30:	mov	r2, r0
   12d34:	mov	r3, #1
   12d38:	b	12dc4 <__assert_fail@plt+0x1cc8>
   12d3c:	mov	r8, #1
   12d40:	mov	r7, #2
   12d44:	cmp	sl, #0
   12d48:	movne	r0, #39	; 0x27
   12d4c:	strbne	r0, [r5]
   12d50:	movw	r0, #25675	; 0x644b
   12d54:	movt	r0, #1
   12d58:	str	r0, [fp, #-84]	; 0xffffffac
   12d5c:	mov	r0, #1
   12d60:	str	r0, [fp, #-72]	; 0xffffffb8
   12d64:	b	12dc0 <__assert_fail@plt+0x1cc4>
   12d68:	mov	r7, #5
   12d6c:	tst	r4, #1
   12d70:	beq	12d98 <__assert_fail@plt+0x1c9c>
   12d74:	mov	r0, #1
   12d78:	str	r0, [fp, #-72]	; 0xffffffb8
   12d7c:	mov	r8, #0
   12d80:	movw	r0, #25671	; 0x6447
   12d84:	movt	r0, #1
   12d88:	str	r0, [fp, #-84]	; 0xffffffac
   12d8c:	mov	r2, #1
   12d90:	mov	r3, #1
   12d94:	b	12dc4 <__assert_fail@plt+0x1cc8>
   12d98:	cmp	sl, #0
   12d9c:	movne	r0, #34	; 0x22
   12da0:	strbne	r0, [r5]
   12da4:	mov	r8, #1
   12da8:	movw	r0, #25671	; 0x6447
   12dac:	movt	r0, #1
   12db0:	str	r0, [fp, #-84]	; 0xffffffac
   12db4:	mov	r0, #1
   12db8:	str	r0, [fp, #-72]	; 0xffffffb8
   12dbc:	mov	r2, #1
   12dc0:	mov	r3, #0
   12dc4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12dc8:	cmp	r0, #0
   12dcc:	movwne	r0, #1
   12dd0:	and	r1, r0, r3
   12dd4:	and	r1, r2, r1
   12dd8:	str	r1, [sp, #56]	; 0x38
   12ddc:	sub	r1, r7, #2
   12de0:	clz	r1, r1
   12de4:	lsr	r1, r1, #5
   12de8:	and	r1, r1, r3
   12dec:	str	r1, [sp, #68]	; 0x44
   12df0:	str	r7, [fp, #-64]	; 0xffffffc0
   12df4:	subs	r1, r7, #2
   12df8:	movwne	r1, #1
   12dfc:	eor	r4, r3, #1
   12e00:	str	r4, [fp, #-88]	; 0xffffffa8
   12e04:	orr	r4, r1, r4
   12e08:	str	r4, [sp, #72]	; 0x48
   12e0c:	and	r1, r1, r2
   12e10:	and	r0, r0, r1
   12e14:	str	r0, [fp, #-60]	; 0xffffffc4
   12e18:	str	r3, [fp, #-76]	; 0xffffffb4
   12e1c:	orr	r0, r1, r3
   12e20:	eor	r0, r0, #1
   12e24:	ldr	r1, [fp, #16]
   12e28:	clz	r1, r1
   12e2c:	lsr	r1, r1, #5
   12e30:	orr	r0, r1, r0
   12e34:	str	r0, [fp, #-68]	; 0xffffffbc
   12e38:	str	r2, [sp, #92]	; 0x5c
   12e3c:	eor	r0, r2, #1
   12e40:	str	r0, [sp, #60]	; 0x3c
   12e44:	mov	r7, #0
   12e48:	cmn	lr, #1
   12e4c:	beq	12e5c <__assert_fail@plt+0x1d60>
   12e50:	cmp	r7, lr
   12e54:	bne	12e68 <__assert_fail@plt+0x1d6c>
   12e58:	b	13974 <__assert_fail@plt+0x2878>
   12e5c:	ldrb	r0, [ip, r7]
   12e60:	cmp	r0, #0
   12e64:	beq	13974 <__assert_fail@plt+0x2878>
   12e68:	mov	r9, #0
   12e6c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12e70:	cmp	r0, #0
   12e74:	beq	12ea8 <__assert_fail@plt+0x1dac>
   12e78:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e7c:	add	r4, r7, r0
   12e80:	cmp	r0, #2
   12e84:	bcc	12ea0 <__assert_fail@plt+0x1da4>
   12e88:	cmn	lr, #1
   12e8c:	bne	12ea0 <__assert_fail@plt+0x1da4>
   12e90:	mov	r0, ip
   12e94:	bl	11000 <strlen@plt>
   12e98:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e9c:	mov	lr, r0
   12ea0:	cmp	r4, lr
   12ea4:	bls	12eb4 <__assert_fail@plt+0x1db8>
   12ea8:	mov	r0, #0
   12eac:	str	r0, [fp, #-52]	; 0xffffffcc
   12eb0:	b	12ef8 <__assert_fail@plt+0x1dfc>
   12eb4:	mov	r4, lr
   12eb8:	add	r0, ip, r7
   12ebc:	ldr	r1, [fp, #-84]	; 0xffffffac
   12ec0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12ec4:	bl	10ff4 <bcmp@plt>
   12ec8:	cmp	r0, #0
   12ecc:	mov	r1, r0
   12ed0:	movwne	r1, #1
   12ed4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ed8:	orr	r1, r1, r2
   12edc:	tst	r1, #1
   12ee0:	beq	13a48 <__assert_fail@plt+0x294c>
   12ee4:	clz	r0, r0
   12ee8:	lsr	r0, r0, #5
   12eec:	str	r0, [fp, #-52]	; 0xffffffcc
   12ef0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12ef4:	mov	lr, r4
   12ef8:	ldrb	r4, [ip, r7]
   12efc:	cmp	r4, #126	; 0x7e
   12f00:	bhi	13430 <__assert_fail@plt+0x2334>
   12f04:	mov	r6, #1
   12f08:	mov	r2, #110	; 0x6e
   12f0c:	mov	r0, #97	; 0x61
   12f10:	add	r3, pc, #4
   12f14:	mov	r1, #0
   12f18:	ldr	pc, [r3, r4, lsl #2]
   12f1c:	muleq	r1, r0, r2
   12f20:	andeq	r3, r1, r0, lsr r4
   12f24:	andeq	r3, r1, r0, lsr r4
   12f28:	andeq	r3, r1, r0, lsr r4
   12f2c:	andeq	r3, r1, r0, lsr r4
   12f30:	andeq	r3, r1, r0, lsr r4
   12f34:	andeq	r3, r1, r0, lsr r4
   12f38:	andeq	r3, r1, r4, lsl #10
   12f3c:	andeq	r3, r1, r0, ror r2
   12f40:	andeq	r3, r1, r8, ror #4
   12f44:	andeq	r3, r1, ip, ror r2
   12f48:	muleq	r1, r8, r3
   12f4c:	andeq	r3, r1, r0, ror #4
   12f50:	andeq	r3, r1, r8, ror r2
   12f54:	andeq	r3, r1, r0, lsr r4
   12f58:	andeq	r3, r1, r0, lsr r4
   12f5c:	andeq	r3, r1, r0, lsr r4
   12f60:	andeq	r3, r1, r0, lsr r4
   12f64:	andeq	r3, r1, r0, lsr r4
   12f68:	andeq	r3, r1, r0, lsr r4
   12f6c:	andeq	r3, r1, r0, lsr r4
   12f70:	andeq	r3, r1, r0, lsr r4
   12f74:	andeq	r3, r1, r0, lsr r4
   12f78:	andeq	r3, r1, r0, lsr r4
   12f7c:	andeq	r3, r1, r0, lsr r4
   12f80:	andeq	r3, r1, r0, lsr r4
   12f84:	andeq	r3, r1, r0, lsr r4
   12f88:	andeq	r3, r1, r0, lsr r4
   12f8c:	andeq	r3, r1, r0, lsr r4
   12f90:	andeq	r3, r1, r0, lsr r4
   12f94:	andeq	r3, r1, r0, lsr r4
   12f98:	andeq	r3, r1, r0, lsr r4
   12f9c:	andeq	r3, r1, r4, lsl r2
   12fa0:	andeq	r3, r1, r8, lsl r2
   12fa4:	andeq	r3, r1, r8, lsl r2
   12fa8:	andeq	r3, r1, r0, lsl #4
   12fac:	andeq	r3, r1, r8, lsl r2
   12fb0:	andeq	r3, r1, r8, lsl r1
   12fb4:	andeq	r3, r1, r8, lsl r2
   12fb8:	andeq	r3, r1, r0, lsr #7
   12fbc:	andeq	r3, r1, r8, lsl r2
   12fc0:	andeq	r3, r1, r8, lsl r2
   12fc4:	andeq	r3, r1, r8, lsl r2
   12fc8:	andeq	r3, r1, r8, lsl r1
   12fcc:	andeq	r3, r1, r8, lsl r1
   12fd0:	andeq	r3, r1, r8, lsl r1
   12fd4:	andeq	r3, r1, r8, lsl r1
   12fd8:	andeq	r3, r1, r8, lsl r1
   12fdc:	andeq	r3, r1, r8, lsl r1
   12fe0:	andeq	r3, r1, r8, lsl r1
   12fe4:	andeq	r3, r1, r8, lsl r1
   12fe8:	andeq	r3, r1, r8, lsl r1
   12fec:	andeq	r3, r1, r8, lsl r1
   12ff0:	andeq	r3, r1, r8, lsl r1
   12ff4:	andeq	r3, r1, r8, lsl r1
   12ff8:	andeq	r3, r1, r8, lsl r1
   12ffc:	andeq	r3, r1, r8, lsl r1
   13000:	andeq	r3, r1, r8, lsl r1
   13004:	andeq	r3, r1, r8, lsl r1
   13008:	andeq	r3, r1, r8, lsl r2
   1300c:	andeq	r3, r1, r8, lsl r2
   13010:	andeq	r3, r1, r8, lsl r2
   13014:	andeq	r3, r1, r8, lsl r2
   13018:	andeq	r3, r1, r8, ror #6
   1301c:	andeq	r3, r1, r0, lsr r4
   13020:	andeq	r3, r1, r8, lsl r1
   13024:	andeq	r3, r1, r8, lsl r1
   13028:	andeq	r3, r1, r8, lsl r1
   1302c:	andeq	r3, r1, r8, lsl r1
   13030:	andeq	r3, r1, r8, lsl r1
   13034:	andeq	r3, r1, r8, lsl r1
   13038:	andeq	r3, r1, r8, lsl r1
   1303c:	andeq	r3, r1, r8, lsl r1
   13040:	andeq	r3, r1, r8, lsl r1
   13044:	andeq	r3, r1, r8, lsl r1
   13048:	andeq	r3, r1, r8, lsl r1
   1304c:	andeq	r3, r1, r8, lsl r1
   13050:	andeq	r3, r1, r8, lsl r1
   13054:	andeq	r3, r1, r8, lsl r1
   13058:	andeq	r3, r1, r8, lsl r1
   1305c:	andeq	r3, r1, r8, lsl r1
   13060:	andeq	r3, r1, r8, lsl r1
   13064:	andeq	r3, r1, r8, lsl r1
   13068:	andeq	r3, r1, r8, lsl r1
   1306c:	andeq	r3, r1, r8, lsl r1
   13070:	andeq	r3, r1, r8, lsl r1
   13074:	andeq	r3, r1, r8, lsl r1
   13078:	andeq	r3, r1, r8, lsl r1
   1307c:	andeq	r3, r1, r8, lsl r1
   13080:	andeq	r3, r1, r8, lsl r1
   13084:	andeq	r3, r1, r8, lsl r1
   13088:	andeq	r3, r1, r8, lsl r2
   1308c:	andeq	r3, r1, r0, asr #4
   13090:	andeq	r3, r1, r8, lsl r1
   13094:	andeq	r3, r1, r8, lsl r2
   13098:	andeq	r3, r1, r8, lsl r1
   1309c:	andeq	r3, r1, r8, lsl r2
   130a0:	andeq	r3, r1, r8, lsl r1
   130a4:	andeq	r3, r1, r8, lsl r1
   130a8:	andeq	r3, r1, r8, lsl r1
   130ac:	andeq	r3, r1, r8, lsl r1
   130b0:	andeq	r3, r1, r8, lsl r1
   130b4:	andeq	r3, r1, r8, lsl r1
   130b8:	andeq	r3, r1, r8, lsl r1
   130bc:	andeq	r3, r1, r8, lsl r1
   130c0:	andeq	r3, r1, r8, lsl r1
   130c4:	andeq	r3, r1, r8, lsl r1
   130c8:	andeq	r3, r1, r8, lsl r1
   130cc:	andeq	r3, r1, r8, lsl r1
   130d0:	andeq	r3, r1, r8, lsl r1
   130d4:	andeq	r3, r1, r8, lsl r1
   130d8:	andeq	r3, r1, r8, lsl r1
   130dc:	andeq	r3, r1, r8, lsl r1
   130e0:	andeq	r3, r1, r8, lsl r1
   130e4:	andeq	r3, r1, r8, lsl r1
   130e8:	andeq	r3, r1, r8, lsl r1
   130ec:	andeq	r3, r1, r8, lsl r1
   130f0:	andeq	r3, r1, r8, lsl r1
   130f4:	andeq	r3, r1, r8, lsl r1
   130f8:	andeq	r3, r1, r8, lsl r1
   130fc:	andeq	r3, r1, r8, lsl r1
   13100:	andeq	r3, r1, r8, lsl r1
   13104:	andeq	r3, r1, r8, lsl r1
   13108:	ldrdeq	r3, [r1], -r4
   1310c:	andeq	r3, r1, r8, lsl r2
   13110:	ldrdeq	r3, [r1], -r4
   13114:	andeq	r3, r1, r0, lsl #4
   13118:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1311c:	tst	r0, #1
   13120:	bne	1314c <__assert_fail@plt+0x2050>
   13124:	ubfx	r0, r4, #5, #3
   13128:	ldr	r1, [fp, #16]
   1312c:	ldr	r0, [r1, r0, lsl #2]
   13130:	and	r1, r4, #31
   13134:	mov	r2, #1
   13138:	tst	r0, r2, lsl r1
   1313c:	beq	1314c <__assert_fail@plt+0x2050>
   13140:	mov	r0, r4
   13144:	mov	r1, r6
   13148:	b	13160 <__assert_fail@plt+0x2064>
   1314c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13150:	cmp	r0, #0
   13154:	mov	r0, r4
   13158:	mov	r1, r6
   1315c:	beq	13498 <__assert_fail@plt+0x239c>
   13160:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13164:	tst	r2, #1
   13168:	bne	13a5c <__assert_fail@plt+0x2960>
   1316c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13170:	subs	r2, r2, #2
   13174:	movwne	r2, #1
   13178:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1317c:	orr	r2, r2, r3
   13180:	tst	r2, #1
   13184:	bne	131c0 <__assert_fail@plt+0x20c4>
   13188:	cmp	r8, sl
   1318c:	movcc	r2, #39	; 0x27
   13190:	strbcc	r2, [r5, r8]
   13194:	add	r2, r8, #1
   13198:	cmp	r2, sl
   1319c:	movcc	r3, #36	; 0x24
   131a0:	strbcc	r3, [r5, r2]
   131a4:	add	r2, r8, #2
   131a8:	cmp	r2, sl
   131ac:	movcc	r3, #39	; 0x27
   131b0:	strbcc	r3, [r5, r2]
   131b4:	add	r8, r8, #3
   131b8:	mov	r2, #1
   131bc:	str	r2, [fp, #-56]	; 0xffffffc8
   131c0:	cmp	r8, sl
   131c4:	movcc	r2, #92	; 0x5c
   131c8:	strbcc	r2, [r5, r8]
   131cc:	add	r8, r8, #1
   131d0:	b	134dc <__assert_fail@plt+0x23e0>
   131d4:	cmp	lr, #1
   131d8:	beq	13200 <__assert_fail@plt+0x2104>
   131dc:	mov	r6, #0
   131e0:	cmn	lr, #1
   131e4:	bne	1320c <__assert_fail@plt+0x2110>
   131e8:	ldrb	r0, [ip, #1]
   131ec:	cmp	r0, #0
   131f0:	beq	13200 <__assert_fail@plt+0x2104>
   131f4:	mvn	lr, #0
   131f8:	mov	r9, #0
   131fc:	b	13118 <__assert_fail@plt+0x201c>
   13200:	mov	r6, #0
   13204:	cmp	r7, #0
   13208:	beq	13214 <__assert_fail@plt+0x2118>
   1320c:	mov	r9, #0
   13210:	b	13118 <__assert_fail@plt+0x201c>
   13214:	mov	r1, #1
   13218:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1321c:	cmp	r0, #2
   13220:	bne	13238 <__assert_fail@plt+0x213c>
   13224:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13228:	tst	r0, #1
   1322c:	mov	r6, r1
   13230:	beq	13118 <__assert_fail@plt+0x201c>
   13234:	b	13a5c <__assert_fail@plt+0x2960>
   13238:	mov	r6, r1
   1323c:	b	13118 <__assert_fail@plt+0x201c>
   13240:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13244:	cmp	r0, #2
   13248:	bne	1347c <__assert_fail@plt+0x2380>
   1324c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13250:	tst	r0, #1
   13254:	bne	13a5c <__assert_fail@plt+0x2960>
   13258:	mov	r9, #0
   1325c:	b	13490 <__assert_fail@plt+0x2394>
   13260:	mov	r0, #102	; 0x66
   13264:	b	13504 <__assert_fail@plt+0x2408>
   13268:	mov	r2, #116	; 0x74
   1326c:	b	1327c <__assert_fail@plt+0x2180>
   13270:	mov	r0, #98	; 0x62
   13274:	b	13504 <__assert_fail@plt+0x2408>
   13278:	mov	r2, #114	; 0x72
   1327c:	ldr	r0, [sp, #72]	; 0x48
   13280:	tst	r0, #1
   13284:	mov	r0, r2
   13288:	bne	13504 <__assert_fail@plt+0x2408>
   1328c:	b	13a5c <__assert_fail@plt+0x2960>
   13290:	ldr	r0, [sp, #92]	; 0x5c
   13294:	tst	r0, #1
   13298:	beq	13520 <__assert_fail@plt+0x2424>
   1329c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132a0:	tst	r0, #1
   132a4:	bne	13a5c <__assert_fail@plt+0x2960>
   132a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132ac:	subs	r0, r0, #2
   132b0:	movwne	r0, #1
   132b4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   132b8:	orr	r0, r0, r1
   132bc:	tst	r0, #1
   132c0:	bne	132fc <__assert_fail@plt+0x2200>
   132c4:	cmp	r8, sl
   132c8:	movcc	r0, #39	; 0x27
   132cc:	strbcc	r0, [r5, r8]
   132d0:	add	r0, r8, #1
   132d4:	cmp	r0, sl
   132d8:	movcc	r1, #36	; 0x24
   132dc:	strbcc	r1, [r5, r0]
   132e0:	add	r0, r8, #2
   132e4:	cmp	r0, sl
   132e8:	movcc	r1, #39	; 0x27
   132ec:	strbcc	r1, [r5, r0]
   132f0:	add	r8, r8, #3
   132f4:	mov	r0, #1
   132f8:	str	r0, [fp, #-56]	; 0xffffffc8
   132fc:	cmp	r8, sl
   13300:	movcc	r0, #92	; 0x5c
   13304:	strbcc	r0, [r5, r8]
   13308:	add	r0, r8, #1
   1330c:	mov	r6, #0
   13310:	mov	r9, #1
   13314:	mov	r4, #48	; 0x30
   13318:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1331c:	cmp	r1, #2
   13320:	beq	136e4 <__assert_fail@plt+0x25e8>
   13324:	add	r1, r7, #1
   13328:	cmp	r1, lr
   1332c:	bcs	136e4 <__assert_fail@plt+0x25e8>
   13330:	ldrb	r1, [ip, r1]
   13334:	sub	r1, r1, #48	; 0x30
   13338:	uxtb	r1, r1
   1333c:	cmp	r1, #9
   13340:	bhi	136e4 <__assert_fail@plt+0x25e8>
   13344:	cmp	r0, sl
   13348:	movcc	r1, #48	; 0x30
   1334c:	strbcc	r1, [r5, r0]
   13350:	add	r0, r8, #2
   13354:	cmp	r0, sl
   13358:	movcc	r1, #48	; 0x30
   1335c:	strbcc	r1, [r5, r0]
   13360:	add	r8, r8, #3
   13364:	b	13118 <__assert_fail@plt+0x201c>
   13368:	mov	r9, #0
   1336c:	mov	r4, #63	; 0x3f
   13370:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13374:	cmp	r0, #5
   13378:	beq	136ec <__assert_fail@plt+0x25f0>
   1337c:	cmp	r0, #2
   13380:	bne	13794 <__assert_fail@plt+0x2698>
   13384:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13388:	tst	r0, #1
   1338c:	mov	r6, #0
   13390:	beq	13118 <__assert_fail@plt+0x201c>
   13394:	b	13a5c <__assert_fail@plt+0x2960>
   13398:	mov	r0, #118	; 0x76
   1339c:	b	13504 <__assert_fail@plt+0x2408>
   133a0:	mov	r4, #39	; 0x27
   133a4:	mov	r0, #1
   133a8:	str	r0, [sp, #64]	; 0x40
   133ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133b0:	cmp	r0, #2
   133b4:	bne	1353c <__assert_fail@plt+0x2440>
   133b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133bc:	tst	r0, #1
   133c0:	bne	13a5c <__assert_fail@plt+0x2960>
   133c4:	ldr	r2, [sp, #84]	; 0x54
   133c8:	cmp	r2, #0
   133cc:	mov	r0, r2
   133d0:	movwne	r0, #1
   133d4:	clz	r1, sl
   133d8:	lsr	r1, r1, #5
   133dc:	orrs	r0, r0, r1
   133e0:	moveq	r2, sl
   133e4:	str	r2, [sp, #84]	; 0x54
   133e8:	moveq	sl, r0
   133ec:	cmp	r8, sl
   133f0:	movcc	r0, #39	; 0x27
   133f4:	strbcc	r0, [r5, r8]
   133f8:	add	r0, r8, #1
   133fc:	cmp	r0, sl
   13400:	movcc	r1, #92	; 0x5c
   13404:	strbcc	r1, [r5, r0]
   13408:	add	r0, r8, #2
   1340c:	cmp	r0, sl
   13410:	movcc	r1, #39	; 0x27
   13414:	strbcc	r1, [r5, r0]
   13418:	add	r8, r8, #3
   1341c:	mov	r0, #0
   13420:	str	r0, [fp, #-56]	; 0xffffffc8
   13424:	mov	r9, #0
   13428:	mov	r6, #1
   1342c:	b	13118 <__assert_fail@plt+0x201c>
   13430:	ldr	r0, [sp, #44]	; 0x2c
   13434:	cmp	r0, #1
   13438:	bne	13544 <__assert_fail@plt+0x2448>
   1343c:	str	lr, [sp, #32]
   13440:	bl	10fdc <__ctype_b_loc@plt>
   13444:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13448:	ldr	r0, [r0]
   1344c:	add	r0, r0, r4, lsl #1
   13450:	ldrb	r0, [r0, #1]
   13454:	ubfx	r6, r0, #6, #1
   13458:	mov	r2, #1
   1345c:	ldr	r0, [sp, #60]	; 0x3c
   13460:	orr	r1, r6, r0
   13464:	cmp	r2, #1
   13468:	bhi	1379c <__assert_fail@plt+0x26a0>
   1346c:	tst	r1, #1
   13470:	beq	1379c <__assert_fail@plt+0x26a0>
   13474:	ldr	lr, [sp, #32]
   13478:	b	13118 <__assert_fail@plt+0x201c>
   1347c:	mov	r9, #0
   13480:	mov	r0, #92	; 0x5c
   13484:	ldr	r1, [sp, #56]	; 0x38
   13488:	cmp	r1, #0
   1348c:	beq	13504 <__assert_fail@plt+0x2408>
   13490:	mov	r4, #92	; 0x5c
   13494:	mov	r6, #0
   13498:	cmp	r9, #0
   1349c:	bne	134d4 <__assert_fail@plt+0x23d8>
   134a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   134a4:	tst	r0, #1
   134a8:	beq	134d4 <__assert_fail@plt+0x23d8>
   134ac:	cmp	r8, sl
   134b0:	movcc	r0, #39	; 0x27
   134b4:	strbcc	r0, [r5, r8]
   134b8:	add	r0, r8, #1
   134bc:	cmp	r0, sl
   134c0:	movcc	r1, #39	; 0x27
   134c4:	strbcc	r1, [r5, r0]
   134c8:	add	r8, r8, #2
   134cc:	mov	r0, #0
   134d0:	str	r0, [fp, #-56]	; 0xffffffc8
   134d4:	mov	r1, r6
   134d8:	mov	r0, r4
   134dc:	cmp	r8, sl
   134e0:	strbcc	r0, [r5, r8]
   134e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   134e8:	and	r0, r0, r1
   134ec:	str	r0, [fp, #-48]	; 0xffffffd0
   134f0:	add	r8, r8, #1
   134f4:	add	r7, r7, #1
   134f8:	cmn	lr, #1
   134fc:	bne	12e50 <__assert_fail@plt+0x1d54>
   13500:	b	12e5c <__assert_fail@plt+0x1d60>
   13504:	mov	r9, #0
   13508:	ldr	r1, [sp, #92]	; 0x5c
   1350c:	tst	r1, #1
   13510:	mov	r6, #0
   13514:	mov	r1, #0
   13518:	beq	13118 <__assert_fail@plt+0x201c>
   1351c:	b	13160 <__assert_fail@plt+0x2064>
   13520:	mov	r4, #0
   13524:	ldr	r0, [sp, #40]	; 0x28
   13528:	cmp	r0, #0
   1352c:	mov	r9, #0
   13530:	mov	r6, #0
   13534:	beq	13118 <__assert_fail@plt+0x201c>
   13538:	b	134f4 <__assert_fail@plt+0x23f8>
   1353c:	mov	r6, #1
   13540:	b	13118 <__assert_fail@plt+0x201c>
   13544:	mov	r0, #0
   13548:	str	r0, [fp, #-36]	; 0xffffffdc
   1354c:	str	r0, [fp, #-40]	; 0xffffffd8
   13550:	cmn	lr, #1
   13554:	bne	13568 <__assert_fail@plt+0x246c>
   13558:	mov	r0, ip
   1355c:	bl	11000 <strlen@plt>
   13560:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13564:	mov	lr, r0
   13568:	ldr	r0, [sp, #76]	; 0x4c
   1356c:	add	r0, r0, r7
   13570:	str	r0, [sp, #24]
   13574:	mov	r6, #1
   13578:	mov	r2, #0
   1357c:	sub	r0, fp, #40	; 0x28
   13580:	mov	r3, r0
   13584:	str	r5, [sp, #28]
   13588:	str	lr, [sp, #32]
   1358c:	b	135d0 <__assert_fail@plt+0x24d4>
   13590:	ldr	r5, [sp, #52]	; 0x34
   13594:	add	r5, r0, r5
   13598:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1359c:	bl	10f40 <iswprint@plt>
   135a0:	cmp	r0, #0
   135a4:	movwne	r0, #1
   135a8:	and	r6, r6, r0
   135ac:	sub	r0, fp, #40	; 0x28
   135b0:	bl	10ef8 <mbsinit@plt>
   135b4:	sub	r3, fp, #40	; 0x28
   135b8:	mov	r2, r5
   135bc:	ldr	lr, [sp, #32]
   135c0:	cmp	r0, #0
   135c4:	ldr	r5, [sp, #28]
   135c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   135cc:	bne	1345c <__assert_fail@plt+0x2360>
   135d0:	str	r2, [sp, #52]	; 0x34
   135d4:	add	r0, r2, r7
   135d8:	add	r1, ip, r0
   135dc:	str	r0, [sp, #48]	; 0x30
   135e0:	sub	r2, lr, r0
   135e4:	sub	r0, fp, #44	; 0x2c
   135e8:	bl	1584c <__assert_fail@plt+0x4750>
   135ec:	cmp	r0, #0
   135f0:	beq	13968 <__assert_fail@plt+0x286c>
   135f4:	cmn	r0, #1
   135f8:	beq	13924 <__assert_fail@plt+0x2828>
   135fc:	cmn	r0, #2
   13600:	ldr	lr, [sp, #32]
   13604:	beq	1392c <__assert_fail@plt+0x2830>
   13608:	cmp	r0, #2
   1360c:	mov	r1, #0
   13610:	movwcc	r1, #1
   13614:	ldr	r2, [sp, #68]	; 0x44
   13618:	eor	r2, r2, #1
   1361c:	orrs	r1, r2, r1
   13620:	bne	13590 <__assert_fail@plt+0x2494>
   13624:	ldr	r1, [sp, #52]	; 0x34
   13628:	ldr	r2, [sp, #24]
   1362c:	add	r1, r2, r1
   13630:	sub	r2, r0, #1
   13634:	b	13644 <__assert_fail@plt+0x2548>
   13638:	add	r1, r1, #1
   1363c:	subs	r2, r2, #1
   13640:	beq	13590 <__assert_fail@plt+0x2494>
   13644:	ldrb	r3, [r1]
   13648:	sub	r3, r3, #91	; 0x5b
   1364c:	cmp	r3, #33	; 0x21
   13650:	bhi	13638 <__assert_fail@plt+0x253c>
   13654:	add	r5, pc, #0
   13658:	ldr	pc, [r5, r3, lsl #2]
   1365c:	andeq	r3, r1, r4, asr sl
   13660:	andeq	r3, r1, r4, asr sl
   13664:	andeq	r3, r1, r8, lsr r6
   13668:	andeq	r3, r1, r4, asr sl
   1366c:	andeq	r3, r1, r8, lsr r6
   13670:	andeq	r3, r1, r4, asr sl
   13674:	andeq	r3, r1, r8, lsr r6
   13678:	andeq	r3, r1, r8, lsr r6
   1367c:	andeq	r3, r1, r8, lsr r6
   13680:	andeq	r3, r1, r8, lsr r6
   13684:	andeq	r3, r1, r8, lsr r6
   13688:	andeq	r3, r1, r8, lsr r6
   1368c:	andeq	r3, r1, r8, lsr r6
   13690:	andeq	r3, r1, r8, lsr r6
   13694:	andeq	r3, r1, r8, lsr r6
   13698:	andeq	r3, r1, r8, lsr r6
   1369c:	andeq	r3, r1, r8, lsr r6
   136a0:	andeq	r3, r1, r8, lsr r6
   136a4:	andeq	r3, r1, r8, lsr r6
   136a8:	andeq	r3, r1, r8, lsr r6
   136ac:	andeq	r3, r1, r8, lsr r6
   136b0:	andeq	r3, r1, r8, lsr r6
   136b4:	andeq	r3, r1, r8, lsr r6
   136b8:	andeq	r3, r1, r8, lsr r6
   136bc:	andeq	r3, r1, r8, lsr r6
   136c0:	andeq	r3, r1, r8, lsr r6
   136c4:	andeq	r3, r1, r8, lsr r6
   136c8:	andeq	r3, r1, r8, lsr r6
   136cc:	andeq	r3, r1, r8, lsr r6
   136d0:	andeq	r3, r1, r8, lsr r6
   136d4:	andeq	r3, r1, r8, lsr r6
   136d8:	andeq	r3, r1, r8, lsr r6
   136dc:	andeq	r3, r1, r8, lsr r6
   136e0:	andeq	r3, r1, r4, asr sl
   136e4:	mov	r8, r0
   136e8:	b	13118 <__assert_fail@plt+0x201c>
   136ec:	ldr	r0, [sp, #36]	; 0x24
   136f0:	cmp	r0, #0
   136f4:	beq	13794 <__assert_fail@plt+0x2698>
   136f8:	add	r0, r7, #2
   136fc:	cmp	r0, lr
   13700:	bcs	13794 <__assert_fail@plt+0x2698>
   13704:	add	r1, r7, ip
   13708:	ldrb	r1, [r1, #1]
   1370c:	cmp	r1, #63	; 0x3f
   13710:	bne	13794 <__assert_fail@plt+0x2698>
   13714:	ldrb	r1, [ip, r0]
   13718:	sub	r2, r1, #33	; 0x21
   1371c:	cmp	r2, #29
   13720:	bhi	13794 <__assert_fail@plt+0x2698>
   13724:	mov	r3, #1
   13728:	movw	r6, #20929	; 0x51c1
   1372c:	movt	r6, #14336	; 0x3800
   13730:	tst	r6, r3, lsl r2
   13734:	beq	13794 <__assert_fail@plt+0x2698>
   13738:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1373c:	tst	r2, #1
   13740:	bne	13a5c <__assert_fail@plt+0x2960>
   13744:	cmp	r8, sl
   13748:	movcc	r2, #63	; 0x3f
   1374c:	strbcc	r2, [r5, r8]
   13750:	add	r2, r8, #1
   13754:	cmp	r2, sl
   13758:	movcc	r3, #34	; 0x22
   1375c:	strbcc	r3, [r5, r2]
   13760:	add	r2, r8, #2
   13764:	cmp	r2, sl
   13768:	movcc	r3, #34	; 0x22
   1376c:	strbcc	r3, [r5, r2]
   13770:	add	r2, r8, #3
   13774:	cmp	r2, sl
   13778:	movcc	r3, #63	; 0x3f
   1377c:	strbcc	r3, [r5, r2]
   13780:	add	r8, r8, #4
   13784:	mov	r7, r0
   13788:	mov	r4, r1
   1378c:	mov	r6, #0
   13790:	b	13118 <__assert_fail@plt+0x201c>
   13794:	mov	r6, #0
   13798:	b	13118 <__assert_fail@plt+0x201c>
   1379c:	add	r0, r2, r7
   137a0:	str	r0, [sp, #52]	; 0x34
   137a4:	mov	r2, #0
   137a8:	ldr	lr, [sp, #32]
   137ac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   137b0:	str	r1, [sp, #48]	; 0x30
   137b4:	tst	r1, #1
   137b8:	bne	13894 <__assert_fail@plt+0x2798>
   137bc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   137c0:	tst	r1, #1
   137c4:	bne	13a5c <__assert_fail@plt+0x2960>
   137c8:	mov	r3, r0
   137cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   137d0:	subs	r1, r0, #2
   137d4:	movwne	r1, #1
   137d8:	orr	r1, r1, r3
   137dc:	tst	r1, #1
   137e0:	bne	13818 <__assert_fail@plt+0x271c>
   137e4:	cmp	r8, sl
   137e8:	movcc	r0, #39	; 0x27
   137ec:	strbcc	r0, [r5, r8]
   137f0:	add	r2, r8, #1
   137f4:	cmp	r2, sl
   137f8:	movcc	r0, #36	; 0x24
   137fc:	strbcc	r0, [r5, r2]
   13800:	add	r2, r8, #2
   13804:	cmp	r2, sl
   13808:	movcc	r0, #39	; 0x27
   1380c:	strbcc	r0, [r5, r2]
   13810:	add	r8, r8, #3
   13814:	mov	r3, #1
   13818:	cmp	r8, sl
   1381c:	movcc	r1, #92	; 0x5c
   13820:	strbcc	r1, [r5, r8]
   13824:	add	r2, r8, #1
   13828:	cmp	r2, sl
   1382c:	bcs	13840 <__assert_fail@plt+0x2744>
   13830:	uxtb	r1, r4
   13834:	mov	r0, #48	; 0x30
   13838:	orr	r1, r0, r1, lsr #6
   1383c:	strb	r1, [r5, r2]
   13840:	add	r2, r8, #2
   13844:	cmp	r2, sl
   13848:	lsrcc	r1, r4, #3
   1384c:	movcc	r0, #6
   13850:	bficc	r1, r0, #3, #29
   13854:	strbcc	r1, [r5, r2]
   13858:	mov	r0, #6
   1385c:	bfi	r4, r0, #3, #29
   13860:	add	r8, r8, #3
   13864:	mov	r2, #1
   13868:	mov	r0, r3
   1386c:	b	138b8 <__assert_fail@plt+0x27bc>
   13870:	cmp	r8, sl
   13874:	strbcc	r4, [r5, r8]
   13878:	ldr	r1, [sp, #76]	; 0x4c
   1387c:	ldrb	r4, [r1, r7]
   13880:	add	r8, r8, #1
   13884:	mov	r7, r3
   13888:	ldr	r1, [sp, #48]	; 0x30
   1388c:	tst	r1, #1
   13890:	beq	137bc <__assert_fail@plt+0x26c0>
   13894:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13898:	tst	r1, #1
   1389c:	beq	138b0 <__assert_fail@plt+0x27b4>
   138a0:	cmp	r8, sl
   138a4:	movcc	r1, #92	; 0x5c
   138a8:	strbcc	r1, [r5, r8]
   138ac:	add	r8, r8, #1
   138b0:	mov	r1, #0
   138b4:	str	r1, [fp, #-52]	; 0xffffffcc
   138b8:	and	r9, r2, #1
   138bc:	add	r3, r7, #1
   138c0:	ldr	r1, [sp, #52]	; 0x34
   138c4:	cmp	r1, r3
   138c8:	bls	1390c <__assert_fail@plt+0x2810>
   138cc:	cmp	r9, #0
   138d0:	movwne	r9, #1
   138d4:	mvn	r1, r0
   138d8:	orr	r1, r1, r9
   138dc:	tst	r1, #1
   138e0:	bne	13870 <__assert_fail@plt+0x2774>
   138e4:	cmp	r8, sl
   138e8:	movcc	r1, #39	; 0x27
   138ec:	strbcc	r1, [r5, r8]
   138f0:	add	r1, r8, #1
   138f4:	cmp	r1, sl
   138f8:	movcc	r0, #39	; 0x27
   138fc:	strbcc	r0, [r5, r1]
   13900:	add	r8, r8, #2
   13904:	mov	r0, #0
   13908:	b	13870 <__assert_fail@plt+0x2774>
   1390c:	str	r0, [fp, #-56]	; 0xffffffc8
   13910:	cmp	r9, #0
   13914:	movwne	r9, #1
   13918:	cmp	r9, #0
   1391c:	beq	134a0 <__assert_fail@plt+0x23a4>
   13920:	b	134d4 <__assert_fail@plt+0x23d8>
   13924:	mov	r6, #0
   13928:	b	13968 <__assert_fail@plt+0x286c>
   1392c:	mov	r6, #0
   13930:	ldr	r0, [sp, #48]	; 0x30
   13934:	cmp	r0, lr
   13938:	bcs	13968 <__assert_fail@plt+0x286c>
   1393c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13940:	add	r0, ip, r7
   13944:	ldr	r2, [sp, #52]	; 0x34
   13948:	ldrb	r1, [r0, r2]
   1394c:	cmp	r1, #0
   13950:	beq	1345c <__assert_fail@plt+0x2360>
   13954:	add	r2, r2, #1
   13958:	add	r1, r7, r2
   1395c:	cmp	r1, lr
   13960:	bcc	13948 <__assert_fail@plt+0x284c>
   13964:	b	1345c <__assert_fail@plt+0x2360>
   13968:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1396c:	ldr	r2, [sp, #52]	; 0x34
   13970:	b	1345c <__assert_fail@plt+0x2360>
   13974:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13978:	eor	r0, r1, #2
   1397c:	orr	r0, r0, r8
   13980:	clz	r0, r0
   13984:	lsr	r0, r0, #5
   13988:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1398c:	tst	r3, r0
   13990:	bne	13a5c <__assert_fail@plt+0x2960>
   13994:	mov	r6, r5
   13998:	subs	r0, r1, #2
   1399c:	movwne	r0, #1
   139a0:	orr	r0, r3, r0
   139a4:	tst	r0, #1
   139a8:	ldr	r2, [sp, #92]	; 0x5c
   139ac:	ldreq	r0, [sp, #64]	; 0x40
   139b0:	eoreq	r0, r0, #1
   139b4:	tsteq	r0, #1
   139b8:	bne	139f8 <__assert_fail@plt+0x28fc>
   139bc:	mov	r9, lr
   139c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   139c4:	tst	r0, #1
   139c8:	bne	13ac4 <__assert_fail@plt+0x29c8>
   139cc:	ldr	r0, [sp, #84]	; 0x54
   139d0:	cmp	r0, #0
   139d4:	beq	139f8 <__assert_fail@plt+0x28fc>
   139d8:	mov	r0, #0
   139dc:	str	r0, [fp, #-48]	; 0xffffffd0
   139e0:	mov	r1, #2
   139e4:	cmp	sl, #0
   139e8:	mov	r0, r2
   139ec:	mov	r4, r3
   139f0:	ldr	r7, [sp, #84]	; 0x54
   139f4:	beq	12bd0 <__assert_fail@plt+0x1ad4>
   139f8:	ldr	r1, [fp, #-84]	; 0xffffffac
   139fc:	clz	r0, r1
   13a00:	lsr	r0, r0, #5
   13a04:	orr	r0, r0, r3
   13a08:	tst	r0, #1
   13a0c:	bne	13a38 <__assert_fail@plt+0x293c>
   13a10:	ldrb	r0, [r1]
   13a14:	cmp	r0, #0
   13a18:	beq	13a38 <__assert_fail@plt+0x293c>
   13a1c:	add	r1, r1, #1
   13a20:	cmp	r8, sl
   13a24:	strbcc	r0, [r6, r8]
   13a28:	add	r8, r8, #1
   13a2c:	ldrb	r0, [r1], #1
   13a30:	cmp	r0, #0
   13a34:	bne	13a20 <__assert_fail@plt+0x2924>
   13a38:	cmp	r8, sl
   13a3c:	movcc	r0, #0
   13a40:	strbcc	r0, [r6, r8]
   13a44:	b	13ab8 <__assert_fail@plt+0x29bc>
   13a48:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a4c:	mov	lr, r4
   13a50:	b	13a5c <__assert_fail@plt+0x2960>
   13a54:	ldr	r5, [sp, #28]
   13a58:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a5c:	mov	r0, #0
   13a60:	ldr	r1, [fp, #12]
   13a64:	bic	r1, r1, #2
   13a68:	mov	r2, #2
   13a6c:	ldr	r3, [sp, #92]	; 0x5c
   13a70:	tst	r3, #1
   13a74:	movwne	r2, #4
   13a78:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13a7c:	cmp	r3, #2
   13a80:	movne	r2, r3
   13a84:	str	r2, [sp]
   13a88:	str	r1, [sp, #4]
   13a8c:	str	r0, [sp, #8]
   13a90:	ldr	r0, [sp, #80]	; 0x50
   13a94:	str	r0, [sp, #12]
   13a98:	ldr	r0, [sp, #88]	; 0x58
   13a9c:	str	r0, [sp, #16]
   13aa0:	mov	r0, r5
   13aa4:	mov	r1, sl
   13aa8:	mov	r2, ip
   13aac:	mov	r3, lr
   13ab0:	bl	12b44 <__assert_fail@plt+0x1a48>
   13ab4:	mov	r8, r0
   13ab8:	mov	r0, r8
   13abc:	sub	sp, fp, #28
   13ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ac4:	mov	r0, #5
   13ac8:	str	r0, [sp]
   13acc:	ldr	r0, [fp, #12]
   13ad0:	str	r0, [sp, #4]
   13ad4:	ldr	r0, [fp, #16]
   13ad8:	str	r0, [sp, #8]
   13adc:	ldr	r0, [sp, #80]	; 0x50
   13ae0:	str	r0, [sp, #12]
   13ae4:	ldr	r0, [sp, #88]	; 0x58
   13ae8:	str	r0, [sp, #16]
   13aec:	mov	r0, r6
   13af0:	ldr	r1, [sp, #84]	; 0x54
   13af4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13af8:	mov	r3, r9
   13afc:	b	13ab0 <__assert_fail@plt+0x29b4>
   13b00:	bl	110e4 <abort@plt>
   13b04:	mov	r3, r2
   13b08:	mov	r2, #0
   13b0c:	b	13b10 <__assert_fail@plt+0x2a14>
   13b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b14:	add	fp, sp, #28
   13b18:	sub	sp, sp, #36	; 0x24
   13b1c:	mov	r4, r2
   13b20:	str	r2, [sp, #24]
   13b24:	mov	r5, r1
   13b28:	mov	r6, r0
   13b2c:	str	r0, [sp, #20]
   13b30:	movw	r8, #29040	; 0x7170
   13b34:	movt	r8, #2
   13b38:	cmp	r3, #0
   13b3c:	movne	r8, r3
   13b40:	bl	11018 <__errno_location@plt>
   13b44:	str	r0, [sp, #28]
   13b48:	ldm	r8, {r3, r9}
   13b4c:	ldr	r1, [r8, #40]	; 0x28
   13b50:	ldr	r2, [r8, #44]	; 0x2c
   13b54:	ldr	r7, [r0]
   13b58:	str	r7, [sp, #32]
   13b5c:	add	sl, r8, #8
   13b60:	cmp	r4, #0
   13b64:	orreq	r9, r9, #1
   13b68:	stm	sp, {r3, r9, sl}
   13b6c:	str	r1, [sp, #12]
   13b70:	str	r2, [sp, #16]
   13b74:	mov	r0, #0
   13b78:	mov	r1, #0
   13b7c:	mov	r2, r6
   13b80:	mov	r3, r5
   13b84:	mov	r7, r5
   13b88:	bl	12b44 <__assert_fail@plt+0x1a48>
   13b8c:	mov	r5, r0
   13b90:	add	r4, r0, #1
   13b94:	mov	r0, r4
   13b98:	bl	14a54 <__assert_fail@plt+0x3958>
   13b9c:	mov	r6, r0
   13ba0:	ldr	r0, [r8]
   13ba4:	ldr	r1, [r8, #40]	; 0x28
   13ba8:	ldr	r2, [r8, #44]	; 0x2c
   13bac:	stm	sp, {r0, r9, sl}
   13bb0:	str	r1, [sp, #12]
   13bb4:	str	r2, [sp, #16]
   13bb8:	mov	r0, r6
   13bbc:	mov	r1, r4
   13bc0:	ldr	r2, [sp, #20]
   13bc4:	mov	r3, r7
   13bc8:	bl	12b44 <__assert_fail@plt+0x1a48>
   13bcc:	ldr	r0, [sp, #24]
   13bd0:	ldr	r1, [sp, #32]
   13bd4:	ldr	r2, [sp, #28]
   13bd8:	str	r1, [r2]
   13bdc:	cmp	r0, #0
   13be0:	strne	r5, [r0]
   13be4:	mov	r0, r6
   13be8:	sub	sp, fp, #28
   13bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bf0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13bf4:	add	fp, sp, #24
   13bf8:	movw	r8, #28920	; 0x70f8
   13bfc:	movt	r8, #2
   13c00:	ldr	r4, [r8]
   13c04:	movw	r5, #28924	; 0x70fc
   13c08:	movt	r5, #2
   13c0c:	ldr	r0, [r5]
   13c10:	cmp	r0, #2
   13c14:	blt	13c40 <__assert_fail@plt+0x2b44>
   13c18:	add	r7, r4, #12
   13c1c:	mov	r6, #0
   13c20:	ldr	r0, [r7, r6, lsl #3]
   13c24:	bl	127e8 <__assert_fail@plt+0x16ec>
   13c28:	add	r0, r6, #1
   13c2c:	ldr	r1, [r5]
   13c30:	add	r2, r6, #2
   13c34:	cmp	r2, r1
   13c38:	mov	r6, r0
   13c3c:	blt	13c20 <__assert_fail@plt+0x2b24>
   13c40:	ldr	r0, [r4, #4]
   13c44:	movw	r9, #29088	; 0x71a0
   13c48:	movt	r9, #2
   13c4c:	cmp	r0, r9
   13c50:	movw	r7, #28928	; 0x7100
   13c54:	movt	r7, #2
   13c58:	beq	13c68 <__assert_fail@plt+0x2b6c>
   13c5c:	bl	127e8 <__assert_fail@plt+0x16ec>
   13c60:	mov	r0, #256	; 0x100
   13c64:	stm	r7, {r0, r9}
   13c68:	cmp	r4, r7
   13c6c:	beq	13c7c <__assert_fail@plt+0x2b80>
   13c70:	mov	r0, r4
   13c74:	bl	127e8 <__assert_fail@plt+0x16ec>
   13c78:	str	r7, [r8]
   13c7c:	mov	r0, #1
   13c80:	str	r0, [r5]
   13c84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13c88:	movw	r3, #29040	; 0x7170
   13c8c:	movt	r3, #2
   13c90:	mvn	r2, #0
   13c94:	b	13c98 <__assert_fail@plt+0x2b9c>
   13c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c9c:	add	fp, sp, #28
   13ca0:	sub	sp, sp, #44	; 0x2c
   13ca4:	mov	r7, r3
   13ca8:	str	r2, [sp, #36]	; 0x24
   13cac:	str	r1, [sp, #32]
   13cb0:	mov	r5, r0
   13cb4:	bl	11018 <__errno_location@plt>
   13cb8:	cmp	r5, #0
   13cbc:	bmi	13e2c <__assert_fail@plt+0x2d30>
   13cc0:	cmn	r5, #-2147483647	; 0x80000001
   13cc4:	beq	13e2c <__assert_fail@plt+0x2d30>
   13cc8:	movw	r4, #28920	; 0x70f8
   13ccc:	movt	r4, #2
   13cd0:	ldr	r6, [r4]
   13cd4:	str	r0, [sp, #28]
   13cd8:	ldr	r0, [r0]
   13cdc:	str	r0, [sp, #24]
   13ce0:	movw	r8, #28924	; 0x70fc
   13ce4:	movt	r8, #2
   13ce8:	ldr	r1, [r8]
   13cec:	cmp	r1, r5
   13cf0:	ble	13cfc <__assert_fail@plt+0x2c00>
   13cf4:	mov	sl, r6
   13cf8:	b	13d68 <__assert_fail@plt+0x2c6c>
   13cfc:	str	r1, [fp, #-32]	; 0xffffffe0
   13d00:	mov	r0, #8
   13d04:	str	r0, [sp]
   13d08:	movw	r9, #28928	; 0x7100
   13d0c:	movt	r9, #2
   13d10:	subs	r0, r6, r9
   13d14:	movne	r0, r6
   13d18:	sub	r1, r5, r1
   13d1c:	add	r2, r1, #1
   13d20:	sub	r1, fp, #32
   13d24:	mvn	r3, #-2147483648	; 0x80000000
   13d28:	bl	14b30 <__assert_fail@plt+0x3a34>
   13d2c:	mov	sl, r0
   13d30:	str	r0, [r4]
   13d34:	cmp	r6, r9
   13d38:	bne	13d44 <__assert_fail@plt+0x2c48>
   13d3c:	ldrd	r0, [r9]
   13d40:	stm	sl, {r0, r1}
   13d44:	ldr	r1, [r8]
   13d48:	add	r0, sl, r1, lsl #3
   13d4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13d50:	sub	r1, r2, r1
   13d54:	lsl	r2, r1, #3
   13d58:	mov	r1, #0
   13d5c:	bl	11030 <memset@plt>
   13d60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13d64:	str	r0, [r8]
   13d68:	mov	r9, sl
   13d6c:	ldr	r6, [r9, r5, lsl #3]!
   13d70:	ldr	r4, [r9, #4]!
   13d74:	ldm	r7, {r0, r1}
   13d78:	ldr	r2, [r7, #40]	; 0x28
   13d7c:	ldr	r3, [r7, #44]	; 0x2c
   13d80:	orr	r8, r1, #1
   13d84:	add	r1, r7, #8
   13d88:	stm	sp, {r0, r8}
   13d8c:	str	r1, [sp, #20]
   13d90:	add	r0, sp, #8
   13d94:	stm	r0, {r1, r2, r3}
   13d98:	mov	r0, r4
   13d9c:	mov	r1, r6
   13da0:	ldr	r2, [sp, #32]
   13da4:	ldr	r3, [sp, #36]	; 0x24
   13da8:	bl	12b44 <__assert_fail@plt+0x1a48>
   13dac:	cmp	r6, r0
   13db0:	bhi	13e14 <__assert_fail@plt+0x2d18>
   13db4:	add	r6, r0, #1
   13db8:	str	r6, [sl, r5, lsl #3]
   13dbc:	movw	r0, #29088	; 0x71a0
   13dc0:	movt	r0, #2
   13dc4:	cmp	r4, r0
   13dc8:	beq	13dd4 <__assert_fail@plt+0x2cd8>
   13dcc:	mov	r0, r4
   13dd0:	bl	127e8 <__assert_fail@plt+0x16ec>
   13dd4:	mov	r0, r6
   13dd8:	bl	14a54 <__assert_fail@plt+0x3958>
   13ddc:	mov	r4, r0
   13de0:	str	r0, [r9]
   13de4:	ldr	r0, [r7]
   13de8:	ldr	r1, [r7, #40]	; 0x28
   13dec:	ldr	r2, [r7, #44]	; 0x2c
   13df0:	stm	sp, {r0, r8}
   13df4:	ldr	r0, [sp, #20]
   13df8:	add	r3, sp, #8
   13dfc:	stm	r3, {r0, r1, r2}
   13e00:	mov	r0, r4
   13e04:	mov	r1, r6
   13e08:	ldr	r2, [sp, #32]
   13e0c:	ldr	r3, [sp, #36]	; 0x24
   13e10:	bl	12b44 <__assert_fail@plt+0x1a48>
   13e14:	ldr	r0, [sp, #28]
   13e18:	ldr	r1, [sp, #24]
   13e1c:	str	r1, [r0]
   13e20:	mov	r0, r4
   13e24:	sub	sp, fp, #28
   13e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e2c:	bl	110e4 <abort@plt>
   13e30:	movw	r3, #29040	; 0x7170
   13e34:	movt	r3, #2
   13e38:	b	13c98 <__assert_fail@plt+0x2b9c>
   13e3c:	mov	r1, r0
   13e40:	mov	r0, #0
   13e44:	b	13c88 <__assert_fail@plt+0x2b8c>
   13e48:	mov	r2, r1
   13e4c:	mov	r1, r0
   13e50:	mov	r0, #0
   13e54:	b	13e30 <__assert_fail@plt+0x2d34>
   13e58:	push	{r4, r5, r6, sl, fp, lr}
   13e5c:	add	fp, sp, #16
   13e60:	sub	sp, sp, #48	; 0x30
   13e64:	mov	r4, r2
   13e68:	mov	r5, r0
   13e6c:	mov	r6, sp
   13e70:	mov	r0, r6
   13e74:	bl	13e94 <__assert_fail@plt+0x2d98>
   13e78:	mov	r0, r5
   13e7c:	mov	r1, r4
   13e80:	mvn	r2, #0
   13e84:	mov	r3, r6
   13e88:	bl	13c98 <__assert_fail@plt+0x2b9c>
   13e8c:	sub	sp, fp, #16
   13e90:	pop	{r4, r5, r6, sl, fp, pc}
   13e94:	push	{fp, lr}
   13e98:	mov	fp, sp
   13e9c:	vmov.i32	q8, #0	; 0x00000000
   13ea0:	mov	r2, #32
   13ea4:	mov	r3, r0
   13ea8:	vst1.32	{d16-d17}, [r3], r2
   13eac:	vst1.32	{d16-d17}, [r3]
   13eb0:	add	r2, r0, #16
   13eb4:	vst1.32	{d16-d17}, [r2]
   13eb8:	cmp	r1, #10
   13ebc:	strne	r1, [r0]
   13ec0:	popne	{fp, pc}
   13ec4:	bl	110e4 <abort@plt>
   13ec8:	push	{r4, r5, r6, r7, fp, lr}
   13ecc:	add	fp, sp, #16
   13ed0:	sub	sp, sp, #48	; 0x30
   13ed4:	mov	r4, r3
   13ed8:	mov	r5, r2
   13edc:	mov	r6, r0
   13ee0:	mov	r7, sp
   13ee4:	mov	r0, r7
   13ee8:	bl	13e94 <__assert_fail@plt+0x2d98>
   13eec:	mov	r0, r6
   13ef0:	mov	r1, r5
   13ef4:	mov	r2, r4
   13ef8:	mov	r3, r7
   13efc:	bl	13c98 <__assert_fail@plt+0x2b9c>
   13f00:	sub	sp, fp, #16
   13f04:	pop	{r4, r5, r6, r7, fp, pc}
   13f08:	mov	r2, r1
   13f0c:	mov	r1, r0
   13f10:	mov	r0, #0
   13f14:	b	13e58 <__assert_fail@plt+0x2d5c>
   13f18:	mov	r3, r2
   13f1c:	mov	r2, r1
   13f20:	mov	r1, r0
   13f24:	mov	r0, #0
   13f28:	b	13ec8 <__assert_fail@plt+0x2dcc>
   13f2c:	push	{r4, r5, r6, sl, fp, lr}
   13f30:	add	fp, sp, #16
   13f34:	sub	sp, sp, #48	; 0x30
   13f38:	mov	r4, r1
   13f3c:	mov	r5, r0
   13f40:	movw	r0, #29040	; 0x7170
   13f44:	movt	r0, #2
   13f48:	add	r1, r0, #16
   13f4c:	mov	r3, #32
   13f50:	vld1.64	{d16-d17}, [r0], r3
   13f54:	vld1.64	{d18-d19}, [r1]
   13f58:	mov	r6, sp
   13f5c:	add	r1, r6, #16
   13f60:	vld1.64	{d20-d21}, [r0]
   13f64:	vst1.64	{d18-d19}, [r1]
   13f68:	mov	r0, r6
   13f6c:	vst1.64	{d16-d17}, [r0], r3
   13f70:	vst1.64	{d20-d21}, [r0]
   13f74:	mov	r0, r6
   13f78:	mov	r1, r2
   13f7c:	mov	r2, #1
   13f80:	bl	12a38 <__assert_fail@plt+0x193c>
   13f84:	mov	r0, #0
   13f88:	mov	r1, r5
   13f8c:	mov	r2, r4
   13f90:	mov	r3, r6
   13f94:	bl	13c98 <__assert_fail@plt+0x2b9c>
   13f98:	sub	sp, fp, #16
   13f9c:	pop	{r4, r5, r6, sl, fp, pc}
   13fa0:	mov	r2, r1
   13fa4:	mvn	r1, #0
   13fa8:	b	13f2c <__assert_fail@plt+0x2e30>
   13fac:	mov	r1, #58	; 0x3a
   13fb0:	b	13fa0 <__assert_fail@plt+0x2ea4>
   13fb4:	mov	r2, #58	; 0x3a
   13fb8:	b	13f2c <__assert_fail@plt+0x2e30>
   13fbc:	push	{r4, r5, r6, sl, fp, lr}
   13fc0:	add	fp, sp, #16
   13fc4:	sub	sp, sp, #48	; 0x30
   13fc8:	mov	r4, r2
   13fcc:	mov	r5, r0
   13fd0:	mov	r6, sp
   13fd4:	mov	r0, r6
   13fd8:	bl	13e94 <__assert_fail@plt+0x2d98>
   13fdc:	mov	r0, r6
   13fe0:	mov	r1, #58	; 0x3a
   13fe4:	mov	r2, #1
   13fe8:	bl	12a38 <__assert_fail@plt+0x193c>
   13fec:	mov	r0, r5
   13ff0:	mov	r1, r4
   13ff4:	mvn	r2, #0
   13ff8:	mov	r3, r6
   13ffc:	bl	13c98 <__assert_fail@plt+0x2b9c>
   14000:	sub	sp, fp, #16
   14004:	pop	{r4, r5, r6, sl, fp, pc}
   14008:	push	{fp, lr}
   1400c:	mov	fp, sp
   14010:	sub	sp, sp, #8
   14014:	mvn	ip, #0
   14018:	str	ip, [sp]
   1401c:	bl	14028 <__assert_fail@plt+0x2f2c>
   14020:	mov	sp, fp
   14024:	pop	{fp, pc}
   14028:	push	{r4, r5, r6, r7, fp, lr}
   1402c:	add	fp, sp, #16
   14030:	sub	sp, sp, #48	; 0x30
   14034:	mov	r7, r3
   14038:	mov	r5, r0
   1403c:	movw	r0, #29040	; 0x7170
   14040:	movt	r0, #2
   14044:	add	r3, r0, #16
   14048:	mov	r4, #32
   1404c:	vld1.64	{d16-d17}, [r0], r4
   14050:	vld1.64	{d18-d19}, [r3]
   14054:	mov	r6, sp
   14058:	add	r3, r6, #16
   1405c:	vld1.64	{d20-d21}, [r0]
   14060:	vst1.64	{d18-d19}, [r3]
   14064:	mov	r0, r6
   14068:	vst1.64	{d16-d17}, [r0], r4
   1406c:	vst1.64	{d20-d21}, [r0]
   14070:	mov	r0, r6
   14074:	bl	12a90 <__assert_fail@plt+0x1994>
   14078:	ldr	r2, [fp, #8]
   1407c:	mov	r0, r5
   14080:	mov	r1, r7
   14084:	mov	r3, r6
   14088:	bl	13c98 <__assert_fail@plt+0x2b9c>
   1408c:	sub	sp, fp, #16
   14090:	pop	{r4, r5, r6, r7, fp, pc}
   14094:	mov	r3, r2
   14098:	mov	r2, r1
   1409c:	mov	r1, r0
   140a0:	mov	r0, #0
   140a4:	b	14008 <__assert_fail@plt+0x2f0c>
   140a8:	push	{fp, lr}
   140ac:	mov	fp, sp
   140b0:	sub	sp, sp, #8
   140b4:	mov	ip, r2
   140b8:	mov	r2, r1
   140bc:	mov	r1, r0
   140c0:	str	r3, [sp]
   140c4:	mov	r0, #0
   140c8:	mov	r3, ip
   140cc:	bl	14028 <__assert_fail@plt+0x2f2c>
   140d0:	mov	sp, fp
   140d4:	pop	{fp, pc}
   140d8:	movw	r3, #28936	; 0x7108
   140dc:	movt	r3, #2
   140e0:	b	13c98 <__assert_fail@plt+0x2b9c>
   140e4:	mov	r2, r1
   140e8:	mov	r1, r0
   140ec:	mov	r0, #0
   140f0:	b	140d8 <__assert_fail@plt+0x2fdc>
   140f4:	mvn	r2, #0
   140f8:	b	140d8 <__assert_fail@plt+0x2fdc>
   140fc:	mov	r1, r0
   14100:	mov	r0, #0
   14104:	b	140f4 <__assert_fail@plt+0x2ff8>
   14108:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1410c:	add	fp, sp, #24
   14110:	sub	sp, sp, #16
   14114:	mov	r4, r1
   14118:	mov	r5, r0
   1411c:	mov	r7, #0
   14120:	mov	r0, #0
   14124:	mov	r1, r5
   14128:	mov	r2, #5
   1412c:	bl	10f1c <dcgettext@plt>
   14130:	cmp	r0, r5
   14134:	beq	14140 <__assert_fail@plt+0x3044>
   14138:	sub	sp, fp, #24
   1413c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14140:	bl	15814 <__assert_fail@plt+0x4718>
   14144:	mov	r6, r0
   14148:	mov	r8, #56	; 0x38
   1414c:	mov	r0, #45	; 0x2d
   14150:	stm	sp, {r0, r8}
   14154:	str	r7, [sp, #8]
   14158:	str	r7, [sp, #12]
   1415c:	mov	r0, r6
   14160:	mov	r1, #85	; 0x55
   14164:	mov	r2, #84	; 0x54
   14168:	mov	r3, #70	; 0x46
   1416c:	bl	14204 <__assert_fail@plt+0x3108>
   14170:	cmp	r0, #0
   14174:	beq	14190 <__assert_fail@plt+0x3094>
   14178:	ldrb	r1, [r5]
   1417c:	movw	r2, #25677	; 0x644d
   14180:	movt	r2, #1
   14184:	movw	r0, #25681	; 0x6451
   14188:	movt	r0, #1
   1418c:	b	141d4 <__assert_fail@plt+0x30d8>
   14190:	mov	r0, #48	; 0x30
   14194:	mov	r1, #51	; 0x33
   14198:	str	r8, [sp]
   1419c:	stmib	sp, {r0, r1}
   141a0:	str	r0, [sp, #12]
   141a4:	mov	r0, r6
   141a8:	mov	r1, #71	; 0x47
   141ac:	mov	r2, #66	; 0x42
   141b0:	mov	r3, #49	; 0x31
   141b4:	bl	14204 <__assert_fail@plt+0x3108>
   141b8:	cmp	r0, #0
   141bc:	beq	141e4 <__assert_fail@plt+0x30e8>
   141c0:	ldrb	r1, [r5]
   141c4:	movw	r2, #25685	; 0x6455
   141c8:	movt	r2, #1
   141cc:	movw	r0, #25689	; 0x6459
   141d0:	movt	r0, #1
   141d4:	cmp	r1, #96	; 0x60
   141d8:	moveq	r0, r2
   141dc:	sub	sp, fp, #24
   141e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141e4:	movw	r1, #25671	; 0x6447
   141e8:	movt	r1, #1
   141ec:	movw	r0, #25675	; 0x644b
   141f0:	movt	r0, #1
   141f4:	cmp	r4, #9
   141f8:	moveq	r0, r1
   141fc:	sub	sp, fp, #24
   14200:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14204:	push	{r4, r5, r6, r7, fp, lr}
   14208:	add	fp, sp, #16
   1420c:	sub	sp, sp, #16
   14210:	mov	r4, r3
   14214:	mov	r5, r2
   14218:	mov	r7, r1
   1421c:	mov	r6, r0
   14220:	mov	r0, r1
   14224:	bl	15720 <__assert_fail@plt+0x4624>
   14228:	ldrb	r1, [r6]
   1422c:	cmp	r0, #0
   14230:	andne	r1, r1, #223	; 0xdf
   14234:	mov	r0, #0
   14238:	cmp	r1, r7
   1423c:	bne	14274 <__assert_fail@plt+0x3178>
   14240:	cmp	r7, #0
   14244:	beq	1427c <__assert_fail@plt+0x3180>
   14248:	ldr	r0, [fp, #20]
   1424c:	ldr	r1, [fp, #16]
   14250:	ldr	r2, [fp, #12]
   14254:	ldr	r3, [fp, #8]
   14258:	str	r2, [sp]
   1425c:	str	r1, [sp, #4]
   14260:	str	r0, [sp, #8]
   14264:	mov	r0, r6
   14268:	mov	r1, r5
   1426c:	mov	r2, r4
   14270:	bl	14288 <__assert_fail@plt+0x318c>
   14274:	sub	sp, fp, #16
   14278:	pop	{r4, r5, r6, r7, fp, pc}
   1427c:	mov	r0, #1
   14280:	sub	sp, fp, #16
   14284:	pop	{r4, r5, r6, r7, fp, pc}
   14288:	push	{r4, r5, r6, r7, fp, lr}
   1428c:	add	fp, sp, #16
   14290:	sub	sp, sp, #8
   14294:	mov	r4, r3
   14298:	mov	r5, r2
   1429c:	mov	r7, r1
   142a0:	mov	r6, r0
   142a4:	mov	r0, r1
   142a8:	bl	15720 <__assert_fail@plt+0x4624>
   142ac:	ldrb	r1, [r6, #1]
   142b0:	cmp	r0, #0
   142b4:	andne	r1, r1, #223	; 0xdf
   142b8:	mov	r0, #0
   142bc:	cmp	r1, r7
   142c0:	bne	142f0 <__assert_fail@plt+0x31f4>
   142c4:	cmp	r7, #0
   142c8:	beq	142f8 <__assert_fail@plt+0x31fc>
   142cc:	ldr	r0, [fp, #16]
   142d0:	ldr	r1, [fp, #12]
   142d4:	ldr	r3, [fp, #8]
   142d8:	str	r1, [sp]
   142dc:	str	r0, [sp, #4]
   142e0:	mov	r0, r6
   142e4:	mov	r1, r5
   142e8:	mov	r2, r4
   142ec:	bl	14304 <__assert_fail@plt+0x3208>
   142f0:	sub	sp, fp, #16
   142f4:	pop	{r4, r5, r6, r7, fp, pc}
   142f8:	mov	r0, #1
   142fc:	sub	sp, fp, #16
   14300:	pop	{r4, r5, r6, r7, fp, pc}
   14304:	push	{r4, r5, r6, r7, fp, lr}
   14308:	add	fp, sp, #16
   1430c:	sub	sp, sp, #8
   14310:	mov	r4, r3
   14314:	mov	r5, r2
   14318:	mov	r7, r1
   1431c:	mov	r6, r0
   14320:	mov	r0, r1
   14324:	bl	15720 <__assert_fail@plt+0x4624>
   14328:	ldrb	r1, [r6, #2]
   1432c:	cmp	r0, #0
   14330:	andne	r1, r1, #223	; 0xdf
   14334:	mov	r0, #0
   14338:	cmp	r1, r7
   1433c:	bne	14364 <__assert_fail@plt+0x3268>
   14340:	cmp	r7, #0
   14344:	beq	1436c <__assert_fail@plt+0x3270>
   14348:	ldr	r0, [fp, #12]
   1434c:	ldr	r3, [fp, #8]
   14350:	str	r0, [sp]
   14354:	mov	r0, r6
   14358:	mov	r1, r5
   1435c:	mov	r2, r4
   14360:	bl	14378 <__assert_fail@plt+0x327c>
   14364:	sub	sp, fp, #16
   14368:	pop	{r4, r5, r6, r7, fp, pc}
   1436c:	mov	r0, #1
   14370:	sub	sp, fp, #16
   14374:	pop	{r4, r5, r6, r7, fp, pc}
   14378:	push	{r4, r5, r6, r7, fp, lr}
   1437c:	add	fp, sp, #16
   14380:	mov	r4, r3
   14384:	mov	r5, r2
   14388:	mov	r7, r1
   1438c:	mov	r6, r0
   14390:	mov	r0, r1
   14394:	bl	15720 <__assert_fail@plt+0x4624>
   14398:	ldrb	r1, [r6, #3]
   1439c:	ldr	r3, [fp, #8]
   143a0:	cmp	r0, #0
   143a4:	andne	r1, r1, #223	; 0xdf
   143a8:	mov	r0, #0
   143ac:	cmp	r1, r7
   143b0:	bne	143d4 <__assert_fail@plt+0x32d8>
   143b4:	cmp	r7, #0
   143b8:	beq	143d0 <__assert_fail@plt+0x32d4>
   143bc:	mov	r0, r6
   143c0:	mov	r1, r5
   143c4:	mov	r2, r4
   143c8:	pop	{r4, r5, r6, r7, fp, lr}
   143cc:	b	143d8 <__assert_fail@plt+0x32dc>
   143d0:	mov	r0, #1
   143d4:	pop	{r4, r5, r6, r7, fp, pc}
   143d8:	push	{r4, r5, r6, r7, fp, lr}
   143dc:	add	fp, sp, #16
   143e0:	mov	r4, r3
   143e4:	mov	r5, r2
   143e8:	mov	r7, r1
   143ec:	mov	r6, r0
   143f0:	mov	r0, r1
   143f4:	bl	15720 <__assert_fail@plt+0x4624>
   143f8:	ldrb	r1, [r6, #4]
   143fc:	cmp	r0, #0
   14400:	andne	r1, r1, #223	; 0xdf
   14404:	mov	r0, #0
   14408:	cmp	r1, r7
   1440c:	bne	14430 <__assert_fail@plt+0x3334>
   14410:	cmp	r7, #0
   14414:	beq	1442c <__assert_fail@plt+0x3330>
   14418:	mov	r0, r6
   1441c:	mov	r1, r5
   14420:	mov	r2, r4
   14424:	pop	{r4, r5, r6, r7, fp, lr}
   14428:	b	14434 <__assert_fail@plt+0x3338>
   1442c:	mov	r0, #1
   14430:	pop	{r4, r5, r6, r7, fp, pc}
   14434:	push	{r4, r5, r6, sl, fp, lr}
   14438:	add	fp, sp, #16
   1443c:	mov	r4, r2
   14440:	mov	r6, r1
   14444:	mov	r5, r0
   14448:	mov	r0, r1
   1444c:	bl	15720 <__assert_fail@plt+0x4624>
   14450:	ldrb	r1, [r5, #5]
   14454:	cmp	r0, #0
   14458:	andne	r1, r1, #223	; 0xdf
   1445c:	mov	r0, #0
   14460:	cmp	r1, r6
   14464:	bne	14484 <__assert_fail@plt+0x3388>
   14468:	cmp	r6, #0
   1446c:	beq	14480 <__assert_fail@plt+0x3384>
   14470:	mov	r0, r5
   14474:	mov	r1, r4
   14478:	pop	{r4, r5, r6, sl, fp, lr}
   1447c:	b	14488 <__assert_fail@plt+0x338c>
   14480:	mov	r0, #1
   14484:	pop	{r4, r5, r6, sl, fp, pc}
   14488:	push	{r4, r5, fp, lr}
   1448c:	add	fp, sp, #8
   14490:	mov	r5, r1
   14494:	mov	r4, r0
   14498:	mov	r0, r1
   1449c:	bl	15720 <__assert_fail@plt+0x4624>
   144a0:	ldrb	r1, [r4, #6]
   144a4:	cmp	r0, #0
   144a8:	andne	r1, r1, #223	; 0xdf
   144ac:	mov	r0, #0
   144b0:	cmp	r1, r5
   144b4:	popne	{r4, r5, fp, pc}
   144b8:	cmp	r5, #0
   144bc:	beq	144cc <__assert_fail@plt+0x33d0>
   144c0:	mov	r0, r4
   144c4:	pop	{r4, r5, fp, lr}
   144c8:	b	144d4 <__assert_fail@plt+0x33d8>
   144cc:	mov	r0, #1
   144d0:	pop	{r4, r5, fp, pc}
   144d4:	push	{r4, sl, fp, lr}
   144d8:	add	fp, sp, #8
   144dc:	mov	r4, r0
   144e0:	mov	r0, #0
   144e4:	bl	15720 <__assert_fail@plt+0x4624>
   144e8:	ldrb	r1, [r4, #7]
   144ec:	cmp	r0, #0
   144f0:	beq	14504 <__assert_fail@plt+0x3408>
   144f4:	tst	r1, #223	; 0xdf
   144f8:	bne	1450c <__assert_fail@plt+0x3410>
   144fc:	mov	r0, #1
   14500:	pop	{r4, sl, fp, pc}
   14504:	cmp	r1, #0
   14508:	beq	144fc <__assert_fail@plt+0x3400>
   1450c:	mov	r0, #0
   14510:	pop	{r4, sl, fp, pc}
   14514:	cmp	r2, #0
   14518:	beq	14548 <__assert_fail@plt+0x344c>
   1451c:	mvn	r3, #0
   14520:	udiv	r3, r3, r2
   14524:	cmp	r3, r1
   14528:	bcs	14548 <__assert_fail@plt+0x344c>
   1452c:	push	{fp, lr}
   14530:	mov	fp, sp
   14534:	bl	11018 <__errno_location@plt>
   14538:	mov	r1, #12
   1453c:	str	r1, [r0]
   14540:	mov	r0, #0
   14544:	pop	{fp, pc}
   14548:	mul	r1, r2, r1
   1454c:	b	15408 <__assert_fail@plt+0x430c>
   14550:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14554:	add	fp, sp, #24
   14558:	sub	sp, sp, #32
   1455c:	mov	r4, r2
   14560:	mov	r8, r0
   14564:	ldr	r6, [fp, #12]
   14568:	ldr	r7, [fp, #8]
   1456c:	cmp	r1, #0
   14570:	beq	14598 <__assert_fail@plt+0x349c>
   14574:	mov	r5, r1
   14578:	str	r4, [sp]
   1457c:	str	r3, [sp, #4]
   14580:	movw	r2, #25776	; 0x64b0
   14584:	movt	r2, #1
   14588:	mov	r0, r8
   1458c:	mov	r1, #1
   14590:	mov	r3, r5
   14594:	b	145b0 <__assert_fail@plt+0x34b4>
   14598:	str	r3, [sp]
   1459c:	movw	r2, #25788	; 0x64bc
   145a0:	movt	r2, #1
   145a4:	mov	r0, r8
   145a8:	mov	r1, #1
   145ac:	mov	r3, r4
   145b0:	bl	11054 <__fprintf_chk@plt>
   145b4:	movw	r1, #25795	; 0x64c3
   145b8:	movt	r1, #1
   145bc:	mov	r0, #0
   145c0:	mov	r2, #5
   145c4:	bl	10f1c <dcgettext@plt>
   145c8:	mov	r3, r0
   145cc:	movw	r0, #2022	; 0x7e6
   145d0:	str	r0, [sp]
   145d4:	movw	r2, #26513	; 0x6791
   145d8:	movt	r2, #1
   145dc:	mov	r0, r8
   145e0:	mov	r1, #1
   145e4:	bl	11054 <__fprintf_chk@plt>
   145e8:	movw	r4, #24935	; 0x6167
   145ec:	movt	r4, #1
   145f0:	mov	r0, r4
   145f4:	mov	r1, r8
   145f8:	bl	10e8c <fputs_unlocked@plt>
   145fc:	movw	r1, #25799	; 0x64c7
   14600:	movt	r1, #1
   14604:	mov	r0, #0
   14608:	mov	r2, #5
   1460c:	bl	10f1c <dcgettext@plt>
   14610:	mov	r2, r0
   14614:	movw	r3, #25970	; 0x6572
   14618:	movt	r3, #1
   1461c:	mov	r0, r8
   14620:	mov	r1, #1
   14624:	bl	11054 <__fprintf_chk@plt>
   14628:	mov	r0, r4
   1462c:	mov	r1, r8
   14630:	bl	10e8c <fputs_unlocked@plt>
   14634:	cmp	r6, #9
   14638:	bhi	14674 <__assert_fail@plt+0x3578>
   1463c:	add	r0, pc, #0
   14640:	ldr	pc, [r0, r6, lsl #2]
   14644:	andeq	r4, r1, ip, ror #12
   14648:	andeq	r4, r1, r0, lsl #13
   1464c:			; <UNDEFINED> instruction: 0x000146b0
   14650:	ldrdeq	r4, [r1], -r8
   14654:	andeq	r4, r1, r0, lsl #14
   14658:	andeq	r4, r1, r8, lsr #14
   1465c:	andeq	r4, r1, r0, asr r7
   14660:	andeq	r4, r1, r8, lsl #15
   14664:	andeq	r4, r1, r8, lsr #16
   14668:	ldrdeq	r4, [r1], -r0
   1466c:	sub	sp, fp, #24
   14670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14674:	movw	r1, #26323	; 0x66d3
   14678:	movt	r1, #1
   1467c:	b	147d8 <__assert_fail@plt+0x36dc>
   14680:	movw	r1, #26004	; 0x6594
   14684:	movt	r1, #1
   14688:	mov	r0, #0
   1468c:	mov	r2, #5
   14690:	bl	10f1c <dcgettext@plt>
   14694:	mov	r2, r0
   14698:	ldr	r3, [r7]
   1469c:	mov	r0, r8
   146a0:	mov	r1, #1
   146a4:	sub	sp, fp, #24
   146a8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   146ac:	b	11054 <__fprintf_chk@plt>
   146b0:	movw	r1, #26020	; 0x65a4
   146b4:	movt	r1, #1
   146b8:	mov	r0, #0
   146bc:	mov	r2, #5
   146c0:	bl	10f1c <dcgettext@plt>
   146c4:	mov	r2, r0
   146c8:	ldr	r3, [r7]
   146cc:	ldr	r0, [r7, #4]
   146d0:	str	r0, [sp]
   146d4:	b	147c4 <__assert_fail@plt+0x36c8>
   146d8:	movw	r1, #26043	; 0x65bb
   146dc:	movt	r1, #1
   146e0:	mov	r0, #0
   146e4:	mov	r2, #5
   146e8:	bl	10f1c <dcgettext@plt>
   146ec:	mov	r2, r0
   146f0:	ldr	r3, [r7]
   146f4:	ldmib	r7, {r0, r1}
   146f8:	stm	sp, {r0, r1}
   146fc:	b	147c4 <__assert_fail@plt+0x36c8>
   14700:	movw	r1, #26071	; 0x65d7
   14704:	movt	r1, #1
   14708:	mov	r0, #0
   1470c:	mov	r2, #5
   14710:	bl	10f1c <dcgettext@plt>
   14714:	mov	r2, r0
   14718:	ldr	r3, [r7]
   1471c:	ldmib	r7, {r0, r1, r7}
   14720:	stm	sp, {r0, r1, r7}
   14724:	b	147c4 <__assert_fail@plt+0x36c8>
   14728:	movw	r1, #26103	; 0x65f7
   1472c:	movt	r1, #1
   14730:	mov	r0, #0
   14734:	mov	r2, #5
   14738:	bl	10f1c <dcgettext@plt>
   1473c:	mov	r2, r0
   14740:	ldr	r3, [r7]
   14744:	ldmib	r7, {r0, r1, r6, r7}
   14748:	stm	sp, {r0, r1, r6, r7}
   1474c:	b	147c4 <__assert_fail@plt+0x36c8>
   14750:	movw	r1, #26139	; 0x661b
   14754:	movt	r1, #1
   14758:	mov	r0, #0
   1475c:	mov	r2, #5
   14760:	bl	10f1c <dcgettext@plt>
   14764:	mov	r2, r0
   14768:	ldr	r3, [r7]
   1476c:	ldmib	r7, {r0, r1, r6}
   14770:	ldr	r5, [r7, #16]
   14774:	ldr	r7, [r7, #20]
   14778:	stm	sp, {r0, r1, r6}
   1477c:	str	r5, [sp, #12]
   14780:	str	r7, [sp, #16]
   14784:	b	147c4 <__assert_fail@plt+0x36c8>
   14788:	movw	r1, #26179	; 0x6643
   1478c:	movt	r1, #1
   14790:	mov	r0, #0
   14794:	mov	r2, #5
   14798:	bl	10f1c <dcgettext@plt>
   1479c:	mov	r2, r0
   147a0:	ldr	r3, [r7]
   147a4:	ldmib	r7, {r0, r1, r6}
   147a8:	ldr	r5, [r7, #16]
   147ac:	ldr	r4, [r7, #20]
   147b0:	ldr	r7, [r7, #24]
   147b4:	stm	sp, {r0, r1, r6}
   147b8:	str	r5, [sp, #12]
   147bc:	str	r4, [sp, #16]
   147c0:	str	r7, [sp, #20]
   147c4:	mov	r0, r8
   147c8:	mov	r1, #1
   147cc:	b	14878 <__assert_fail@plt+0x377c>
   147d0:	movw	r1, #26271	; 0x669f
   147d4:	movt	r1, #1
   147d8:	mov	r0, #0
   147dc:	mov	r2, #5
   147e0:	bl	10f1c <dcgettext@plt>
   147e4:	mov	ip, r0
   147e8:	ldr	r3, [r7]
   147ec:	ldr	r0, [r7, #4]
   147f0:	ldr	r1, [r7, #8]
   147f4:	ldr	r6, [r7, #12]
   147f8:	ldr	r5, [r7, #16]
   147fc:	ldr	r4, [r7, #20]
   14800:	ldr	r2, [r7, #24]
   14804:	ldr	lr, [r7, #28]
   14808:	ldr	r7, [r7, #32]
   1480c:	stm	sp, {r0, r1, r6}
   14810:	str	r5, [sp, #12]
   14814:	str	r4, [sp, #16]
   14818:	str	r2, [sp, #20]
   1481c:	str	lr, [sp, #24]
   14820:	str	r7, [sp, #28]
   14824:	b	1486c <__assert_fail@plt+0x3770>
   14828:	movw	r1, #26223	; 0x666f
   1482c:	movt	r1, #1
   14830:	mov	r0, #0
   14834:	mov	r2, #5
   14838:	bl	10f1c <dcgettext@plt>
   1483c:	mov	ip, r0
   14840:	ldr	r3, [r7]
   14844:	ldmib	r7, {r0, r1, r6}
   14848:	ldr	r5, [r7, #16]
   1484c:	ldr	r4, [r7, #20]
   14850:	ldr	r2, [r7, #24]
   14854:	ldr	r7, [r7, #28]
   14858:	stm	sp, {r0, r1, r6}
   1485c:	str	r5, [sp, #12]
   14860:	str	r4, [sp, #16]
   14864:	str	r2, [sp, #20]
   14868:	str	r7, [sp, #24]
   1486c:	mov	r0, r8
   14870:	mov	r1, #1
   14874:	mov	r2, ip
   14878:	bl	11054 <__fprintf_chk@plt>
   1487c:	sub	sp, fp, #24
   14880:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14884:	push	{r4, sl, fp, lr}
   14888:	add	fp, sp, #8
   1488c:	sub	sp, sp, #8
   14890:	mov	lr, #0
   14894:	ldr	ip, [fp, #8]
   14898:	ldr	r4, [ip, lr, lsl #2]
   1489c:	add	lr, lr, #1
   148a0:	cmp	r4, #0
   148a4:	bne	14898 <__assert_fail@plt+0x379c>
   148a8:	sub	r4, lr, #1
   148ac:	str	ip, [sp]
   148b0:	str	r4, [sp, #4]
   148b4:	bl	14550 <__assert_fail@plt+0x3454>
   148b8:	sub	sp, fp, #8
   148bc:	pop	{r4, sl, fp, pc}
   148c0:	push	{r4, r5, fp, lr}
   148c4:	add	fp, sp, #8
   148c8:	sub	sp, sp, #48	; 0x30
   148cc:	mov	ip, #0
   148d0:	ldr	r4, [fp, #8]
   148d4:	add	lr, sp, #8
   148d8:	ldr	r5, [r4]
   148dc:	str	r5, [lr, ip, lsl #2]
   148e0:	cmp	r5, #0
   148e4:	beq	148fc <__assert_fail@plt+0x3800>
   148e8:	add	ip, ip, #1
   148ec:	add	r4, r4, #4
   148f0:	cmp	ip, #10
   148f4:	bne	148d8 <__assert_fail@plt+0x37dc>
   148f8:	mov	ip, #10
   148fc:	str	lr, [sp]
   14900:	str	ip, [sp, #4]
   14904:	bl	14550 <__assert_fail@plt+0x3454>
   14908:	sub	sp, fp, #8
   1490c:	pop	{r4, r5, fp, pc}
   14910:	push	{fp, lr}
   14914:	mov	fp, sp
   14918:	sub	sp, sp, #8
   1491c:	add	ip, fp, #8
   14920:	str	ip, [sp, #4]
   14924:	str	ip, [sp]
   14928:	bl	148c0 <__assert_fail@plt+0x37c4>
   1492c:	mov	sp, fp
   14930:	pop	{fp, pc}
   14934:	push	{fp, lr}
   14938:	mov	fp, sp
   1493c:	movw	r0, #29012	; 0x7154
   14940:	movt	r0, #2
   14944:	ldr	r1, [r0]
   14948:	movw	r0, #24935	; 0x6167
   1494c:	movt	r0, #1
   14950:	bl	10e8c <fputs_unlocked@plt>
   14954:	movw	r1, #26383	; 0x670f
   14958:	movt	r1, #1
   1495c:	mov	r0, #0
   14960:	mov	r2, #5
   14964:	bl	10f1c <dcgettext@plt>
   14968:	mov	r1, r0
   1496c:	movw	r2, #26403	; 0x6723
   14970:	movt	r2, #1
   14974:	mov	r0, #1
   14978:	bl	1103c <__printf_chk@plt>
   1497c:	movw	r1, #26425	; 0x6739
   14980:	movt	r1, #1
   14984:	mov	r0, #0
   14988:	mov	r2, #5
   1498c:	bl	10f1c <dcgettext@plt>
   14990:	mov	r1, r0
   14994:	movw	r2, #24445	; 0x5f7d
   14998:	movt	r2, #1
   1499c:	movw	r3, #24744	; 0x60a8
   149a0:	movt	r3, #1
   149a4:	mov	r0, #1
   149a8:	bl	1103c <__printf_chk@plt>
   149ac:	movw	r1, #26445	; 0x674d
   149b0:	movt	r1, #1
   149b4:	mov	r0, #0
   149b8:	mov	r2, #5
   149bc:	bl	10f1c <dcgettext@plt>
   149c0:	mov	r1, r0
   149c4:	movw	r2, #26484	; 0x6774
   149c8:	movt	r2, #1
   149cc:	mov	r0, #1
   149d0:	pop	{fp, lr}
   149d4:	b	1103c <__printf_chk@plt>
   149d8:	b	149dc <__assert_fail@plt+0x38e0>
   149dc:	push	{r4, r5, r6, sl, fp, lr}
   149e0:	add	fp, sp, #16
   149e4:	mov	r4, r2
   149e8:	mov	r5, r1
   149ec:	mov	r6, r0
   149f0:	bl	14514 <__assert_fail@plt+0x3418>
   149f4:	cmp	r0, #0
   149f8:	popne	{r4, r5, r6, sl, fp, pc}
   149fc:	cmp	r6, #0
   14a00:	beq	14a14 <__assert_fail@plt+0x3918>
   14a04:	cmp	r5, #0
   14a08:	cmpne	r4, #0
   14a0c:	bne	14a14 <__assert_fail@plt+0x3918>
   14a10:	pop	{r4, r5, r6, sl, fp, pc}
   14a14:	bl	14da0 <__assert_fail@plt+0x3ca4>
   14a18:	push	{fp, lr}
   14a1c:	mov	fp, sp
   14a20:	bl	153d8 <__assert_fail@plt+0x42dc>
   14a24:	pop	{fp, lr}
   14a28:	b	14a2c <__assert_fail@plt+0x3930>
   14a2c:	cmp	r0, #0
   14a30:	bxne	lr
   14a34:	push	{fp, lr}
   14a38:	mov	fp, sp
   14a3c:	bl	14da0 <__assert_fail@plt+0x3ca4>
   14a40:	push	{fp, lr}
   14a44:	mov	fp, sp
   14a48:	bl	128d4 <__assert_fail@plt+0x17d8>
   14a4c:	pop	{fp, lr}
   14a50:	b	14a2c <__assert_fail@plt+0x3930>
   14a54:	b	14a18 <__assert_fail@plt+0x391c>
   14a58:	push	{r4, r5, fp, lr}
   14a5c:	add	fp, sp, #8
   14a60:	mov	r4, r1
   14a64:	mov	r5, r0
   14a68:	bl	15408 <__assert_fail@plt+0x430c>
   14a6c:	cmp	r0, #0
   14a70:	popne	{r4, r5, fp, pc}
   14a74:	cmp	r5, #0
   14a78:	beq	14a88 <__assert_fail@plt+0x398c>
   14a7c:	cmp	r4, #0
   14a80:	bne	14a88 <__assert_fail@plt+0x398c>
   14a84:	pop	{r4, r5, fp, pc}
   14a88:	bl	14da0 <__assert_fail@plt+0x3ca4>
   14a8c:	push	{fp, lr}
   14a90:	mov	fp, sp
   14a94:	bl	128d8 <__assert_fail@plt+0x17dc>
   14a98:	pop	{fp, lr}
   14a9c:	b	14a2c <__assert_fail@plt+0x3930>
   14aa0:	push	{fp, lr}
   14aa4:	mov	fp, sp
   14aa8:	bl	128e8 <__assert_fail@plt+0x17ec>
   14aac:	pop	{fp, lr}
   14ab0:	b	14a2c <__assert_fail@plt+0x3930>
   14ab4:	mov	r2, r1
   14ab8:	mov	r1, r0
   14abc:	mov	r0, #0
   14ac0:	b	149dc <__assert_fail@plt+0x38e0>
   14ac4:	mov	r2, r1
   14ac8:	mov	r1, r0
   14acc:	mov	r0, #0
   14ad0:	b	14aa0 <__assert_fail@plt+0x39a4>
   14ad4:	mov	r2, #1
   14ad8:	b	14adc <__assert_fail@plt+0x39e0>
   14adc:	push	{r4, r5, fp, lr}
   14ae0:	add	fp, sp, #8
   14ae4:	mov	r4, r1
   14ae8:	ldr	r5, [r1]
   14aec:	cmp	r0, #0
   14af0:	beq	14b08 <__assert_fail@plt+0x3a0c>
   14af4:	mov	r1, #1
   14af8:	add	r1, r1, r5, lsr #1
   14afc:	adds	r5, r5, r1
   14b00:	bcc	14b20 <__assert_fail@plt+0x3a24>
   14b04:	bl	14da0 <__assert_fail@plt+0x3ca4>
   14b08:	cmp	r5, #0
   14b0c:	bne	14b20 <__assert_fail@plt+0x3a24>
   14b10:	mov	r1, #64	; 0x40
   14b14:	udiv	r5, r1, r2
   14b18:	cmp	r2, #64	; 0x40
   14b1c:	addhi	r5, r5, #1
   14b20:	mov	r1, r5
   14b24:	bl	149dc <__assert_fail@plt+0x38e0>
   14b28:	str	r5, [r4]
   14b2c:	pop	{r4, r5, fp, pc}
   14b30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b34:	add	fp, sp, #24
   14b38:	mov	r8, r1
   14b3c:	ldr	r6, [r1]
   14b40:	add	r1, r6, r6, asr #1
   14b44:	cmp	r1, r6
   14b48:	mvnvs	r1, #-2147483648	; 0x80000000
   14b4c:	cmp	r1, r3
   14b50:	mov	r5, r1
   14b54:	movgt	r5, r3
   14b58:	cmn	r3, #1
   14b5c:	movle	r5, r1
   14b60:	ldr	r4, [fp, #8]
   14b64:	cmn	r4, #1
   14b68:	ble	14b90 <__assert_fail@plt+0x3a94>
   14b6c:	cmp	r4, #0
   14b70:	beq	14be4 <__assert_fail@plt+0x3ae8>
   14b74:	cmn	r5, #1
   14b78:	ble	14bb8 <__assert_fail@plt+0x3abc>
   14b7c:	mvn	r7, #-2147483648	; 0x80000000
   14b80:	udiv	r1, r7, r4
   14b84:	cmp	r1, r5
   14b88:	bge	14be4 <__assert_fail@plt+0x3ae8>
   14b8c:	b	14bf4 <__assert_fail@plt+0x3af8>
   14b90:	cmn	r5, #1
   14b94:	ble	14bd4 <__assert_fail@plt+0x3ad8>
   14b98:	cmn	r4, #1
   14b9c:	beq	14be4 <__assert_fail@plt+0x3ae8>
   14ba0:	mov	r1, #-2147483648	; 0x80000000
   14ba4:	sdiv	r1, r1, r4
   14ba8:	mvn	r7, #-2147483648	; 0x80000000
   14bac:	cmp	r1, r5
   14bb0:	bge	14be4 <__assert_fail@plt+0x3ae8>
   14bb4:	b	14bf4 <__assert_fail@plt+0x3af8>
   14bb8:	beq	14be4 <__assert_fail@plt+0x3ae8>
   14bbc:	mov	r1, #-2147483648	; 0x80000000
   14bc0:	sdiv	r1, r1, r5
   14bc4:	mvn	r7, #-2147483648	; 0x80000000
   14bc8:	cmp	r1, r4
   14bcc:	bge	14be4 <__assert_fail@plt+0x3ae8>
   14bd0:	b	14bf4 <__assert_fail@plt+0x3af8>
   14bd4:	mvn	r7, #-2147483648	; 0x80000000
   14bd8:	sdiv	r1, r7, r4
   14bdc:	cmp	r5, r1
   14be0:	blt	14bf4 <__assert_fail@plt+0x3af8>
   14be4:	mul	r1, r5, r4
   14be8:	mov	r7, #64	; 0x40
   14bec:	cmp	r1, #63	; 0x3f
   14bf0:	bgt	14bfc <__assert_fail@plt+0x3b00>
   14bf4:	sdiv	r5, r7, r4
   14bf8:	mul	r1, r5, r4
   14bfc:	cmp	r0, #0
   14c00:	moveq	r7, #0
   14c04:	streq	r7, [r8]
   14c08:	sub	r7, r5, r6
   14c0c:	cmp	r7, r2
   14c10:	bge	14cbc <__assert_fail@plt+0x3bc0>
   14c14:	add	r5, r6, r2
   14c18:	mov	r1, #0
   14c1c:	cmp	r5, r3
   14c20:	mov	r2, #0
   14c24:	movwgt	r2, #1
   14c28:	cmn	r3, #1
   14c2c:	movwgt	r1, #1
   14c30:	cmp	r5, r6
   14c34:	bvs	14ca4 <__assert_fail@plt+0x3ba8>
   14c38:	ands	r1, r1, r2
   14c3c:	bne	14ca4 <__assert_fail@plt+0x3ba8>
   14c40:	cmn	r4, #1
   14c44:	ble	14c6c <__assert_fail@plt+0x3b70>
   14c48:	cmp	r4, #0
   14c4c:	beq	14cb8 <__assert_fail@plt+0x3bbc>
   14c50:	cmn	r5, #1
   14c54:	ble	14c90 <__assert_fail@plt+0x3b94>
   14c58:	mvn	r1, #-2147483648	; 0x80000000
   14c5c:	udiv	r1, r1, r4
   14c60:	cmp	r1, r5
   14c64:	bge	14cb8 <__assert_fail@plt+0x3bbc>
   14c68:	b	14ca4 <__assert_fail@plt+0x3ba8>
   14c6c:	cmn	r5, #1
   14c70:	ble	14ca8 <__assert_fail@plt+0x3bac>
   14c74:	cmn	r4, #1
   14c78:	beq	14cb8 <__assert_fail@plt+0x3bbc>
   14c7c:	mov	r1, #-2147483648	; 0x80000000
   14c80:	sdiv	r1, r1, r4
   14c84:	cmp	r1, r5
   14c88:	bge	14cb8 <__assert_fail@plt+0x3bbc>
   14c8c:	b	14ca4 <__assert_fail@plt+0x3ba8>
   14c90:	beq	14cb8 <__assert_fail@plt+0x3bbc>
   14c94:	mov	r1, #-2147483648	; 0x80000000
   14c98:	sdiv	r1, r1, r5
   14c9c:	cmp	r1, r4
   14ca0:	bge	14cb8 <__assert_fail@plt+0x3bbc>
   14ca4:	bl	14da0 <__assert_fail@plt+0x3ca4>
   14ca8:	mvn	r1, #-2147483648	; 0x80000000
   14cac:	sdiv	r1, r1, r4
   14cb0:	cmp	r5, r1
   14cb4:	blt	14ca4 <__assert_fail@plt+0x3ba8>
   14cb8:	mul	r1, r5, r4
   14cbc:	bl	14a58 <__assert_fail@plt+0x395c>
   14cc0:	str	r5, [r8]
   14cc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14cc8:	mov	r1, #1
   14ccc:	b	14cd0 <__assert_fail@plt+0x3bd4>
   14cd0:	push	{fp, lr}
   14cd4:	mov	fp, sp
   14cd8:	bl	15384 <__assert_fail@plt+0x4288>
   14cdc:	pop	{fp, lr}
   14ce0:	b	14a2c <__assert_fail@plt+0x3930>
   14ce4:	mov	r1, #1
   14ce8:	b	14cec <__assert_fail@plt+0x3bf0>
   14cec:	push	{fp, lr}
   14cf0:	mov	fp, sp
   14cf4:	bl	128e4 <__assert_fail@plt+0x17e8>
   14cf8:	pop	{fp, lr}
   14cfc:	b	14a2c <__assert_fail@plt+0x3930>
   14d00:	push	{r4, r5, fp, lr}
   14d04:	add	fp, sp, #8
   14d08:	mov	r4, r1
   14d0c:	mov	r5, r0
   14d10:	mov	r0, r1
   14d14:	bl	14a18 <__assert_fail@plt+0x391c>
   14d18:	mov	r1, r5
   14d1c:	mov	r2, r4
   14d20:	pop	{r4, r5, fp, lr}
   14d24:	b	10eec <memcpy@plt>
   14d28:	push	{r4, r5, fp, lr}
   14d2c:	add	fp, sp, #8
   14d30:	mov	r4, r1
   14d34:	mov	r5, r0
   14d38:	mov	r0, r1
   14d3c:	bl	14a40 <__assert_fail@plt+0x3944>
   14d40:	mov	r1, r5
   14d44:	mov	r2, r4
   14d48:	pop	{r4, r5, fp, lr}
   14d4c:	b	10eec <memcpy@plt>
   14d50:	push	{r4, r5, fp, lr}
   14d54:	add	fp, sp, #8
   14d58:	mov	r4, r1
   14d5c:	mov	r5, r0
   14d60:	add	r0, r1, #1
   14d64:	bl	14a40 <__assert_fail@plt+0x3944>
   14d68:	mov	r1, #0
   14d6c:	strb	r1, [r0, r4]
   14d70:	mov	r1, r5
   14d74:	mov	r2, r4
   14d78:	pop	{r4, r5, fp, lr}
   14d7c:	b	10eec <memcpy@plt>
   14d80:	push	{r4, sl, fp, lr}
   14d84:	add	fp, sp, #8
   14d88:	mov	r4, r0
   14d8c:	bl	11000 <strlen@plt>
   14d90:	add	r1, r0, #1
   14d94:	mov	r0, r4
   14d98:	pop	{r4, sl, fp, lr}
   14d9c:	b	14d00 <__assert_fail@plt+0x3c04>
   14da0:	push	{fp, lr}
   14da4:	mov	fp, sp
   14da8:	movw	r0, #28916	; 0x70f4
   14dac:	movt	r0, #2
   14db0:	ldr	r4, [r0]
   14db4:	movw	r1, #26560	; 0x67c0
   14db8:	movt	r1, #1
   14dbc:	mov	r0, #0
   14dc0:	mov	r2, #5
   14dc4:	bl	10f1c <dcgettext@plt>
   14dc8:	mov	r3, r0
   14dcc:	movw	r2, #24424	; 0x5f68
   14dd0:	movt	r2, #1
   14dd4:	mov	r0, r4
   14dd8:	mov	r1, #0
   14ddc:	bl	10f94 <error@plt>
   14de0:	bl	110e4 <abort@plt>
   14de4:	bx	lr
   14de8:	b	15464 <__assert_fail@plt+0x4368>
   14dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14df0:	add	fp, sp, #28
   14df4:	sub	sp, sp, #20
   14df8:	cmp	r2, #37	; 0x25
   14dfc:	bcs	15214 <__assert_fail@plt+0x4118>
   14e00:	mov	r9, r3
   14e04:	mov	r7, r2
   14e08:	mov	r6, r1
   14e0c:	mov	r4, r0
   14e10:	ldr	sl, [fp, #8]
   14e14:	bl	11018 <__errno_location@plt>
   14e18:	mov	r5, r0
   14e1c:	mov	r0, #0
   14e20:	str	r0, [r5]
   14e24:	add	r8, sp, #16
   14e28:	cmp	r6, #0
   14e2c:	movne	r8, r6
   14e30:	mov	r0, r4
   14e34:	mov	r1, r8
   14e38:	mov	r2, r7
   14e3c:	bl	1106c <strtoimax@plt>
   14e40:	str	r1, [sp, #12]
   14e44:	str	r0, [sp, #8]
   14e48:	ldr	r7, [r8]
   14e4c:	cmp	r7, r4
   14e50:	beq	14e7c <__assert_fail@plt+0x3d80>
   14e54:	ldr	r0, [r5]
   14e58:	cmp	r0, #0
   14e5c:	beq	14eb8 <__assert_fail@plt+0x3dbc>
   14e60:	mov	r5, #4
   14e64:	cmp	r0, #34	; 0x22
   14e68:	bne	15208 <__assert_fail@plt+0x410c>
   14e6c:	mov	r5, #1
   14e70:	cmp	sl, #0
   14e74:	bne	14ec4 <__assert_fail@plt+0x3dc8>
   14e78:	b	151fc <__assert_fail@plt+0x4100>
   14e7c:	mov	r5, #4
   14e80:	cmp	sl, #0
   14e84:	beq	15208 <__assert_fail@plt+0x410c>
   14e88:	ldrb	r1, [r7]
   14e8c:	cmp	r1, #0
   14e90:	beq	15208 <__assert_fail@plt+0x410c>
   14e94:	mov	r0, sl
   14e98:	bl	1100c <strchr@plt>
   14e9c:	cmp	r0, #0
   14ea0:	beq	15208 <__assert_fail@plt+0x410c>
   14ea4:	mov	r5, #0
   14ea8:	str	r5, [sp, #12]
   14eac:	mov	r0, #1
   14eb0:	str	r0, [sp, #8]
   14eb4:	b	14ec4 <__assert_fail@plt+0x3dc8>
   14eb8:	mov	r5, r0
   14ebc:	cmp	sl, #0
   14ec0:	beq	151fc <__assert_fail@plt+0x4100>
   14ec4:	ldrb	r4, [r7]
   14ec8:	cmp	r4, #0
   14ecc:	beq	151fc <__assert_fail@plt+0x4100>
   14ed0:	mov	r0, sl
   14ed4:	mov	r1, r4
   14ed8:	bl	1100c <strchr@plt>
   14edc:	cmp	r0, #0
   14ee0:	beq	15118 <__assert_fail@plt+0x401c>
   14ee4:	sub	r0, r4, #69	; 0x45
   14ee8:	mov	r1, #1
   14eec:	str	r1, [sp, #4]
   14ef0:	mov	r6, #1024	; 0x400
   14ef4:	cmp	r0, #47	; 0x2f
   14ef8:	bhi	15014 <__assert_fail@plt+0x3f18>
   14efc:	add	r1, pc, #0
   14f00:	ldr	pc, [r1, r0, lsl #2]
   14f04:	andeq	r4, r1, r4, asr #31
   14f08:	andeq	r5, r1, r4, lsl r0
   14f0c:	andeq	r4, r1, r4, asr #31
   14f10:	andeq	r5, r1, r4, lsl r0
   14f14:	andeq	r5, r1, r4, lsl r0
   14f18:	andeq	r5, r1, r4, lsl r0
   14f1c:	andeq	r4, r1, r4, asr #31
   14f20:	andeq	r5, r1, r4, lsl r0
   14f24:	andeq	r4, r1, r4, asr #31
   14f28:	andeq	r5, r1, r4, lsl r0
   14f2c:	andeq	r5, r1, r4, lsl r0
   14f30:	andeq	r4, r1, r4, asr #31
   14f34:	andeq	r5, r1, r4, lsl r0
   14f38:	andeq	r5, r1, r4, lsl r0
   14f3c:	andeq	r5, r1, r4, lsl r0
   14f40:	andeq	r4, r1, r4, asr #31
   14f44:	andeq	r5, r1, r4, lsl r0
   14f48:	andeq	r5, r1, r4, lsl r0
   14f4c:	andeq	r5, r1, r4, lsl r0
   14f50:	andeq	r5, r1, r4, lsl r0
   14f54:	andeq	r4, r1, r4, asr #31
   14f58:	andeq	r4, r1, r4, asr #31
   14f5c:	andeq	r5, r1, r4, lsl r0
   14f60:	andeq	r5, r1, r4, lsl r0
   14f64:	andeq	r5, r1, r4, lsl r0
   14f68:	andeq	r5, r1, r4, lsl r0
   14f6c:	andeq	r5, r1, r4, lsl r0
   14f70:	andeq	r5, r1, r4, lsl r0
   14f74:	andeq	r5, r1, r4, lsl r0
   14f78:	andeq	r5, r1, r4, lsl r0
   14f7c:	andeq	r5, r1, r4, lsl r0
   14f80:	andeq	r5, r1, r4, lsl r0
   14f84:	andeq	r5, r1, r4, lsl r0
   14f88:	andeq	r5, r1, r4, lsl r0
   14f8c:	andeq	r4, r1, r4, asr #31
   14f90:	andeq	r5, r1, r4, lsl r0
   14f94:	andeq	r5, r1, r4, lsl r0
   14f98:	andeq	r5, r1, r4, lsl r0
   14f9c:	andeq	r4, r1, r4, asr #31
   14fa0:	andeq	r5, r1, r4, lsl r0
   14fa4:	andeq	r4, r1, r4, asr #31
   14fa8:	andeq	r5, r1, r4, lsl r0
   14fac:	andeq	r5, r1, r4, lsl r0
   14fb0:	andeq	r5, r1, r4, lsl r0
   14fb4:	andeq	r5, r1, r4, lsl r0
   14fb8:	andeq	r5, r1, r4, lsl r0
   14fbc:	andeq	r5, r1, r4, lsl r0
   14fc0:	andeq	r4, r1, r4, asr #31
   14fc4:	mov	r0, sl
   14fc8:	mov	r1, #48	; 0x30
   14fcc:	bl	1100c <strchr@plt>
   14fd0:	cmp	r0, #0
   14fd4:	beq	15014 <__assert_fail@plt+0x3f18>
   14fd8:	ldrb	r0, [r7, #1]
   14fdc:	cmp	r0, #66	; 0x42
   14fe0:	cmpne	r0, #68	; 0x44
   14fe4:	bne	14ff8 <__assert_fail@plt+0x3efc>
   14fe8:	mov	r0, #2
   14fec:	str	r0, [sp, #4]
   14ff0:	mov	r6, #1000	; 0x3e8
   14ff4:	b	15014 <__assert_fail@plt+0x3f18>
   14ff8:	cmp	r0, #105	; 0x69
   14ffc:	bne	15014 <__assert_fail@plt+0x3f18>
   15000:	ldrb	r0, [r7, #2]
   15004:	mov	r1, #1
   15008:	cmp	r0, #66	; 0x42
   1500c:	movweq	r1, #3
   15010:	str	r1, [sp, #4]
   15014:	sub	r1, r4, #66	; 0x42
   15018:	cmp	r1, #53	; 0x35
   1501c:	bhi	15118 <__assert_fail@plt+0x401c>
   15020:	mov	r0, #0
   15024:	add	r2, pc, #0
   15028:	ldr	pc, [r2, r1, lsl #2]
   1502c:	andeq	r5, r1, ip, ror r1
   15030:	andeq	r5, r1, r8, lsl r1
   15034:	andeq	r5, r1, r8, lsl r1
   15038:	andeq	r5, r1, r8, lsl #3
   1503c:	andeq	r5, r1, r8, lsl r1
   15040:	andeq	r5, r1, r4, lsl #2
   15044:	andeq	r5, r1, r8, lsl r1
   15048:	andeq	r5, r1, r8, lsl r1
   1504c:	andeq	r5, r1, r8, lsl r1
   15050:	andeq	r5, r1, ip, lsr #2
   15054:	andeq	r5, r1, r8, lsl r1
   15058:	andeq	r5, r1, r0, asr #2
   1505c:	andeq	r5, r1, r8, lsl r1
   15060:	andeq	r5, r1, r8, lsl r1
   15064:	muleq	r1, ip, r1
   15068:	andeq	r5, r1, r8, lsl r1
   1506c:	andeq	r5, r1, r8, lsl r1
   15070:	andeq	r5, r1, r8, lsl r1
   15074:	andeq	r5, r1, r4, asr r1
   15078:	andeq	r5, r1, r8, lsl r1
   1507c:	andeq	r5, r1, r8, lsl r1
   15080:	andeq	r5, r1, r8, lsl r1
   15084:	andeq	r5, r1, r8, lsl r1
   15088:			; <UNDEFINED> instruction: 0x000151b0
   1508c:	andeq	r5, r1, r8, ror #2
   15090:	andeq	r5, r1, r8, lsl r1
   15094:	andeq	r5, r1, r8, lsl r1
   15098:	andeq	r5, r1, r8, lsl r1
   1509c:	andeq	r5, r1, r8, lsl r1
   150a0:	andeq	r5, r1, r8, lsl r1
   150a4:	andeq	r5, r1, r8, lsl r1
   150a8:	andeq	r5, r1, r8, lsl r1
   150ac:	andeq	r5, r1, r4, asr #3
   150b0:	ldrdeq	r5, [r1], -ip
   150b4:	andeq	r5, r1, r8, lsl r1
   150b8:	andeq	r5, r1, r8, lsl r1
   150bc:	andeq	r5, r1, r8, lsl r1
   150c0:	andeq	r5, r1, r4, lsl #2
   150c4:	andeq	r5, r1, r8, lsl r1
   150c8:	andeq	r5, r1, r8, lsl r1
   150cc:	andeq	r5, r1, r8, lsl r1
   150d0:	andeq	r5, r1, ip, lsr #2
   150d4:	andeq	r5, r1, r8, lsl r1
   150d8:	andeq	r5, r1, r0, asr #2
   150dc:	andeq	r5, r1, r8, lsl r1
   150e0:	andeq	r5, r1, r8, lsl r1
   150e4:	andeq	r5, r1, r8, lsl r1
   150e8:	andeq	r5, r1, r8, lsl r1
   150ec:	andeq	r5, r1, r8, lsl r1
   150f0:	andeq	r5, r1, r8, lsl r1
   150f4:	andeq	r5, r1, r4, asr r1
   150f8:	andeq	r5, r1, r8, lsl r1
   150fc:	andeq	r5, r1, r8, lsl r1
   15100:	ldrdeq	r5, [r1], -r0
   15104:	add	r0, sp, #8
   15108:	mov	r1, r6
   1510c:	mov	r2, #3
   15110:	bl	15338 <__assert_fail@plt+0x423c>
   15114:	b	151dc <__assert_fail@plt+0x40e0>
   15118:	ldr	r0, [sp, #8]
   1511c:	ldr	r1, [sp, #12]
   15120:	strd	r0, [r9]
   15124:	orr	r5, r5, #2
   15128:	b	15208 <__assert_fail@plt+0x410c>
   1512c:	add	r0, sp, #8
   15130:	mov	r1, r6
   15134:	mov	r2, #1
   15138:	bl	15338 <__assert_fail@plt+0x423c>
   1513c:	b	151dc <__assert_fail@plt+0x40e0>
   15140:	add	r0, sp, #8
   15144:	mov	r1, r6
   15148:	mov	r2, #2
   1514c:	bl	15338 <__assert_fail@plt+0x423c>
   15150:	b	151dc <__assert_fail@plt+0x40e0>
   15154:	add	r0, sp, #8
   15158:	mov	r1, r6
   1515c:	mov	r2, #4
   15160:	bl	15338 <__assert_fail@plt+0x423c>
   15164:	b	151dc <__assert_fail@plt+0x40e0>
   15168:	add	r0, sp, #8
   1516c:	mov	r1, r6
   15170:	mov	r2, #7
   15174:	bl	15338 <__assert_fail@plt+0x423c>
   15178:	b	151dc <__assert_fail@plt+0x40e0>
   1517c:	add	r0, sp, #8
   15180:	mov	r1, #1024	; 0x400
   15184:	b	151d8 <__assert_fail@plt+0x40dc>
   15188:	add	r0, sp, #8
   1518c:	mov	r1, r6
   15190:	mov	r2, #6
   15194:	bl	15338 <__assert_fail@plt+0x423c>
   15198:	b	151dc <__assert_fail@plt+0x40e0>
   1519c:	add	r0, sp, #8
   151a0:	mov	r1, r6
   151a4:	mov	r2, #5
   151a8:	bl	15338 <__assert_fail@plt+0x423c>
   151ac:	b	151dc <__assert_fail@plt+0x40e0>
   151b0:	add	r0, sp, #8
   151b4:	mov	r1, r6
   151b8:	mov	r2, #8
   151bc:	bl	15338 <__assert_fail@plt+0x423c>
   151c0:	b	151dc <__assert_fail@plt+0x40e0>
   151c4:	add	r0, sp, #8
   151c8:	mov	r1, #512	; 0x200
   151cc:	b	151d8 <__assert_fail@plt+0x40dc>
   151d0:	add	r0, sp, #8
   151d4:	mov	r1, #2
   151d8:	bl	15234 <__assert_fail@plt+0x4138>
   151dc:	ldr	r1, [r8]
   151e0:	ldr	r3, [sp, #4]
   151e4:	add	r2, r1, r3
   151e8:	str	r2, [r8]
   151ec:	ldrb	r1, [r1, r3]
   151f0:	orr	r5, r0, r5
   151f4:	cmp	r1, #0
   151f8:	orrne	r5, r5, #2
   151fc:	ldr	r0, [sp, #8]
   15200:	ldr	r1, [sp, #12]
   15204:	strd	r0, [r9]
   15208:	mov	r0, r5
   1520c:	sub	sp, fp, #28
   15210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15214:	movw	r0, #26577	; 0x67d1
   15218:	movt	r0, #1
   1521c:	movw	r1, #26615	; 0x67f7
   15220:	movt	r1, #1
   15224:	movw	r3, #26631	; 0x6807
   15228:	movt	r3, #1
   1522c:	mov	r2, #85	; 0x55
   15230:	bl	110fc <__assert_fail@plt>
   15234:	push	{r4, r5, r6, r7, fp, lr}
   15238:	add	fp, sp, #16
   1523c:	mov	r5, r1
   15240:	mov	r4, r0
   15244:	cmn	r1, #1
   15248:	ble	15270 <__assert_fail@plt+0x4174>
   1524c:	cmp	r5, #0
   15250:	beq	152d4 <__assert_fail@plt+0x41d8>
   15254:	ldrd	r6, [r4]
   15258:	cmn	r7, #1
   1525c:	ble	152a8 <__assert_fail@plt+0x41ac>
   15260:	asr	r3, r5, #31
   15264:	mvn	r0, #0
   15268:	mvn	r1, #-2147483648	; 0x80000000
   1526c:	b	15290 <__assert_fail@plt+0x4194>
   15270:	ldrd	r6, [r4]
   15274:	cmn	r7, #1
   15278:	ble	152f0 <__assert_fail@plt+0x41f4>
   1527c:	cmn	r5, #1
   15280:	beq	152d4 <__assert_fail@plt+0x41d8>
   15284:	asr	r3, r5, #31
   15288:	mov	r0, #0
   1528c:	mov	r1, #-2147483648	; 0x80000000
   15290:	mov	r2, r5
   15294:	bl	159c0 <__assert_fail@plt+0x48c4>
   15298:	subs	r0, r0, r6
   1529c:	sbcs	r0, r1, r7
   152a0:	bge	152d4 <__assert_fail@plt+0x41d8>
   152a4:	b	15310 <__assert_fail@plt+0x4214>
   152a8:	and	r0, r6, r7
   152ac:	cmn	r0, #1
   152b0:	beq	152d4 <__assert_fail@plt+0x41d8>
   152b4:	mov	r0, #0
   152b8:	mov	r1, #-2147483648	; 0x80000000
   152bc:	mov	r2, r6
   152c0:	mov	r3, r7
   152c4:	bl	159c0 <__assert_fail@plt+0x48c4>
   152c8:	subs	r0, r0, r5
   152cc:	sbcs	r0, r1, r5, asr #31
   152d0:	blt	15310 <__assert_fail@plt+0x4214>
   152d4:	ldrd	r0, [r4]
   152d8:	umull	r2, r3, r0, r5
   152dc:	asr	r7, r5, #31
   152e0:	mla	r0, r0, r7, r3
   152e4:	mla	r1, r1, r5, r0
   152e8:	mov	r0, #0
   152ec:	b	1532c <__assert_fail@plt+0x4230>
   152f0:	asr	r3, r5, #31
   152f4:	mvn	r0, #0
   152f8:	mvn	r1, #-2147483648	; 0x80000000
   152fc:	mov	r2, r5
   15300:	bl	159c0 <__assert_fail@plt+0x48c4>
   15304:	subs	r0, r6, r0
   15308:	sbcs	r0, r7, r1
   1530c:	bge	152d4 <__assert_fail@plt+0x41d8>
   15310:	ldr	r0, [r4, #4]
   15314:	mvn	r1, #-2147483648	; 0x80000000
   15318:	cmp	r0, #0
   1531c:	movmi	r1, #-2147483648	; 0x80000000
   15320:	mvn	r2, #0
   15324:	movwmi	r2, #0
   15328:	mov	r0, #1
   1532c:	str	r2, [r4]
   15330:	str	r1, [r4, #4]
   15334:	pop	{r4, r5, r6, r7, fp, pc}
   15338:	push	{r4, r5, r6, r7, fp, lr}
   1533c:	add	fp, sp, #16
   15340:	cmp	r2, #0
   15344:	beq	15378 <__assert_fail@plt+0x427c>
   15348:	mov	r4, r2
   1534c:	mov	r5, r1
   15350:	mov	r7, r0
   15354:	mov	r6, #0
   15358:	mov	r0, r7
   1535c:	mov	r1, r5
   15360:	bl	15234 <__assert_fail@plt+0x4138>
   15364:	orr	r6, r0, r6
   15368:	subs	r4, r4, #1
   1536c:	bne	15358 <__assert_fail@plt+0x425c>
   15370:	mov	r0, r6
   15374:	pop	{r4, r5, r6, r7, fp, pc}
   15378:	mov	r6, #0
   1537c:	mov	r0, r6
   15380:	pop	{r4, r5, r6, r7, fp, pc}
   15384:	clz	r2, r1
   15388:	lsr	r2, r2, #5
   1538c:	clz	r3, r0
   15390:	lsr	r3, r3, #5
   15394:	orrs	r2, r3, r2
   15398:	movwne	r1, #1
   1539c:	movwne	r0, #1
   153a0:	cmp	r1, #0
   153a4:	beq	153d4 <__assert_fail@plt+0x42d8>
   153a8:	mvn	r2, #-2147483648	; 0x80000000
   153ac:	udiv	r2, r2, r1
   153b0:	cmp	r2, r0
   153b4:	bcs	153d4 <__assert_fail@plt+0x42d8>
   153b8:	push	{fp, lr}
   153bc:	mov	fp, sp
   153c0:	bl	11018 <__errno_location@plt>
   153c4:	mov	r1, #12
   153c8:	str	r1, [r0]
   153cc:	mov	r0, #0
   153d0:	pop	{fp, pc}
   153d4:	b	10e80 <calloc@plt>
   153d8:	cmp	r0, #0
   153dc:	movweq	r0, #1
   153e0:	cmn	r0, #1
   153e4:	ble	153ec <__assert_fail@plt+0x42f0>
   153e8:	b	10fa0 <malloc@plt>
   153ec:	push	{fp, lr}
   153f0:	mov	fp, sp
   153f4:	bl	11018 <__errno_location@plt>
   153f8:	mov	r1, #12
   153fc:	str	r1, [r0]
   15400:	mov	r0, #0
   15404:	pop	{fp, pc}
   15408:	push	{fp, lr}
   1540c:	mov	fp, sp
   15410:	cmp	r0, #0
   15414:	beq	15430 <__assert_fail@plt+0x4334>
   15418:	cmp	r1, #0
   1541c:	beq	1543c <__assert_fail@plt+0x4340>
   15420:	cmn	r1, #1
   15424:	ble	15448 <__assert_fail@plt+0x434c>
   15428:	pop	{fp, lr}
   1542c:	b	10f28 <realloc@plt>
   15430:	mov	r0, r1
   15434:	pop	{fp, lr}
   15438:	b	153d8 <__assert_fail@plt+0x42dc>
   1543c:	bl	127e8 <__assert_fail@plt+0x16ec>
   15440:	mov	r0, #0
   15444:	pop	{fp, pc}
   15448:	bl	11018 <__errno_location@plt>
   1544c:	mov	r1, #12
   15450:	str	r1, [r0]
   15454:	mov	r0, #0
   15458:	pop	{fp, pc}
   1545c:	mov	r0, #0
   15460:	bx	lr
   15464:	mov	r0, #0
   15468:	bx	lr
   1546c:	mov	r1, r0
   15470:	sub	r2, r0, #65	; 0x41
   15474:	mov	r0, #1
   15478:	cmp	r2, #26
   1547c:	subcs	r2, r1, #97	; 0x61
   15480:	cmpcs	r2, #26
   15484:	bcs	1548c <__assert_fail@plt+0x4390>
   15488:	bx	lr
   1548c:	sub	r1, r1, #48	; 0x30
   15490:	cmp	r1, #10
   15494:	movcs	r0, #0
   15498:	bx	lr
   1549c:	mov	r1, r0
   154a0:	sub	r2, r0, #65	; 0x41
   154a4:	mov	r0, #1
   154a8:	cmp	r2, #26
   154ac:	subcs	r1, r1, #97	; 0x61
   154b0:	cmpcs	r1, #26
   154b4:	movcs	r0, #0
   154b8:	bx	lr
   154bc:	mov	r1, #0
   154c0:	cmp	r0, #128	; 0x80
   154c4:	movwcc	r1, #1
   154c8:	mov	r0, r1
   154cc:	bx	lr
   154d0:	sub	r1, r0, #9
   154d4:	clz	r1, r1
   154d8:	lsr	r1, r1, #5
   154dc:	sub	r0, r0, #32
   154e0:	clz	r0, r0
   154e4:	lsr	r0, r0, #5
   154e8:	orr	r0, r0, r1
   154ec:	bx	lr
   154f0:	mov	r1, r0
   154f4:	mov	r0, #1
   154f8:	cmp	r1, #32
   154fc:	bxcc	lr
   15500:	cmp	r1, #127	; 0x7f
   15504:	movne	r0, #0
   15508:	bx	lr
   1550c:	sub	r1, r0, #48	; 0x30
   15510:	mov	r0, #0
   15514:	cmp	r1, #10
   15518:	movwcc	r0, #1
   1551c:	bx	lr
   15520:	sub	r1, r0, #33	; 0x21
   15524:	mov	r0, #0
   15528:	cmp	r1, #94	; 0x5e
   1552c:	movwcc	r0, #1
   15530:	bx	lr
   15534:	sub	r1, r0, #97	; 0x61
   15538:	mov	r0, #0
   1553c:	cmp	r1, #26
   15540:	movwcc	r0, #1
   15544:	bx	lr
   15548:	sub	r1, r0, #32
   1554c:	mov	r0, #0
   15550:	cmp	r1, #95	; 0x5f
   15554:	movwcc	r0, #1
   15558:	bx	lr
   1555c:	sub	r1, r0, #33	; 0x21
   15560:	cmp	r1, #93	; 0x5d
   15564:	bhi	156f0 <__assert_fail@plt+0x45f4>
   15568:	mov	r0, #1
   1556c:	add	r2, pc, #0
   15570:	ldr	pc, [r2, r1, lsl #2]
   15574:	andeq	r5, r1, ip, ror #13
   15578:	andeq	r5, r1, ip, ror #13
   1557c:	andeq	r5, r1, ip, ror #13
   15580:	andeq	r5, r1, ip, ror #13
   15584:	andeq	r5, r1, ip, ror #13
   15588:	andeq	r5, r1, ip, ror #13
   1558c:	andeq	r5, r1, ip, ror #13
   15590:	andeq	r5, r1, ip, ror #13
   15594:	andeq	r5, r1, ip, ror #13
   15598:	andeq	r5, r1, ip, ror #13
   1559c:	andeq	r5, r1, ip, ror #13
   155a0:	andeq	r5, r1, ip, ror #13
   155a4:	andeq	r5, r1, ip, ror #13
   155a8:	andeq	r5, r1, ip, ror #13
   155ac:	andeq	r5, r1, ip, ror #13
   155b0:	strdeq	r5, [r1], -r0
   155b4:	strdeq	r5, [r1], -r0
   155b8:	strdeq	r5, [r1], -r0
   155bc:	strdeq	r5, [r1], -r0
   155c0:	strdeq	r5, [r1], -r0
   155c4:	strdeq	r5, [r1], -r0
   155c8:	strdeq	r5, [r1], -r0
   155cc:	strdeq	r5, [r1], -r0
   155d0:	strdeq	r5, [r1], -r0
   155d4:	strdeq	r5, [r1], -r0
   155d8:	andeq	r5, r1, ip, ror #13
   155dc:	andeq	r5, r1, ip, ror #13
   155e0:	andeq	r5, r1, ip, ror #13
   155e4:	andeq	r5, r1, ip, ror #13
   155e8:	andeq	r5, r1, ip, ror #13
   155ec:	andeq	r5, r1, ip, ror #13
   155f0:	andeq	r5, r1, ip, ror #13
   155f4:	strdeq	r5, [r1], -r0
   155f8:	strdeq	r5, [r1], -r0
   155fc:	strdeq	r5, [r1], -r0
   15600:	strdeq	r5, [r1], -r0
   15604:	strdeq	r5, [r1], -r0
   15608:	strdeq	r5, [r1], -r0
   1560c:	strdeq	r5, [r1], -r0
   15610:	strdeq	r5, [r1], -r0
   15614:	strdeq	r5, [r1], -r0
   15618:	strdeq	r5, [r1], -r0
   1561c:	strdeq	r5, [r1], -r0
   15620:	strdeq	r5, [r1], -r0
   15624:	strdeq	r5, [r1], -r0
   15628:	strdeq	r5, [r1], -r0
   1562c:	strdeq	r5, [r1], -r0
   15630:	strdeq	r5, [r1], -r0
   15634:	strdeq	r5, [r1], -r0
   15638:	strdeq	r5, [r1], -r0
   1563c:	strdeq	r5, [r1], -r0
   15640:	strdeq	r5, [r1], -r0
   15644:	strdeq	r5, [r1], -r0
   15648:	strdeq	r5, [r1], -r0
   1564c:	strdeq	r5, [r1], -r0
   15650:	strdeq	r5, [r1], -r0
   15654:	strdeq	r5, [r1], -r0
   15658:	strdeq	r5, [r1], -r0
   1565c:	andeq	r5, r1, ip, ror #13
   15660:	andeq	r5, r1, ip, ror #13
   15664:	andeq	r5, r1, ip, ror #13
   15668:	andeq	r5, r1, ip, ror #13
   1566c:	andeq	r5, r1, ip, ror #13
   15670:	andeq	r5, r1, ip, ror #13
   15674:	strdeq	r5, [r1], -r0
   15678:	strdeq	r5, [r1], -r0
   1567c:	strdeq	r5, [r1], -r0
   15680:	strdeq	r5, [r1], -r0
   15684:	strdeq	r5, [r1], -r0
   15688:	strdeq	r5, [r1], -r0
   1568c:	strdeq	r5, [r1], -r0
   15690:	strdeq	r5, [r1], -r0
   15694:	strdeq	r5, [r1], -r0
   15698:	strdeq	r5, [r1], -r0
   1569c:	strdeq	r5, [r1], -r0
   156a0:	strdeq	r5, [r1], -r0
   156a4:	strdeq	r5, [r1], -r0
   156a8:	strdeq	r5, [r1], -r0
   156ac:	strdeq	r5, [r1], -r0
   156b0:	strdeq	r5, [r1], -r0
   156b4:	strdeq	r5, [r1], -r0
   156b8:	strdeq	r5, [r1], -r0
   156bc:	strdeq	r5, [r1], -r0
   156c0:	strdeq	r5, [r1], -r0
   156c4:	strdeq	r5, [r1], -r0
   156c8:	strdeq	r5, [r1], -r0
   156cc:	strdeq	r5, [r1], -r0
   156d0:	strdeq	r5, [r1], -r0
   156d4:	strdeq	r5, [r1], -r0
   156d8:	strdeq	r5, [r1], -r0
   156dc:	andeq	r5, r1, ip, ror #13
   156e0:	andeq	r5, r1, ip, ror #13
   156e4:	andeq	r5, r1, ip, ror #13
   156e8:	andeq	r5, r1, ip, ror #13
   156ec:	bx	lr
   156f0:	mov	r0, #0
   156f4:	bx	lr
   156f8:	sub	r0, r0, #9
   156fc:	cmp	r0, #23
   15700:	movhi	r0, #0
   15704:	bxhi	lr
   15708:	bic	r0, r0, #-16777216	; 0xff000000
   1570c:	movw	r1, #31
   15710:	movt	r1, #128	; 0x80
   15714:	mov	r2, #1
   15718:	and	r0, r2, r1, lsr r0
   1571c:	bx	lr
   15720:	sub	r1, r0, #65	; 0x41
   15724:	mov	r0, #0
   15728:	cmp	r1, #26
   1572c:	movwcc	r0, #1
   15730:	bx	lr
   15734:	mov	r1, r0
   15738:	sub	r2, r0, #48	; 0x30
   1573c:	mov	r0, #1
   15740:	cmp	r2, #22
   15744:	bhi	1575c <__assert_fail@plt+0x4660>
   15748:	mov	ip, #1
   1574c:	movw	r3, #1023	; 0x3ff
   15750:	movt	r3, #126	; 0x7e
   15754:	tst	r3, ip, lsl r2
   15758:	bxne	lr
   1575c:	sub	r1, r1, #97	; 0x61
   15760:	cmp	r1, #6
   15764:	movcs	r0, #0
   15768:	bxcs	lr
   1576c:	bx	lr
   15770:	sub	r1, r0, #65	; 0x41
   15774:	cmp	r1, #26
   15778:	addcc	r0, r0, #32
   1577c:	bx	lr
   15780:	sub	r1, r0, #97	; 0x61
   15784:	cmp	r1, #26
   15788:	subcc	r0, r0, #32
   1578c:	bx	lr
   15790:	push	{r4, r5, r6, sl, fp, lr}
   15794:	add	fp, sp, #16
   15798:	mov	r4, r0
   1579c:	bl	10f70 <__fpending@plt>
   157a0:	mov	r5, r0
   157a4:	mov	r0, r4
   157a8:	bl	10f7c <ferror_unlocked@plt>
   157ac:	mov	r6, r0
   157b0:	mov	r0, r4
   157b4:	bl	126e0 <__assert_fail@plt+0x15e4>
   157b8:	cmp	r6, #0
   157bc:	beq	157e0 <__assert_fail@plt+0x46e4>
   157c0:	mvn	r4, #0
   157c4:	cmp	r0, #0
   157c8:	bne	1580c <__assert_fail@plt+0x4710>
   157cc:	bl	11018 <__errno_location@plt>
   157d0:	mov	r1, #0
   157d4:	str	r1, [r0]
   157d8:	mov	r0, r4
   157dc:	pop	{r4, r5, r6, sl, fp, pc}
   157e0:	cmp	r0, #0
   157e4:	mov	r4, r0
   157e8:	mvnne	r4, #0
   157ec:	cmp	r5, #0
   157f0:	bne	1580c <__assert_fail@plt+0x4710>
   157f4:	cmp	r0, #0
   157f8:	beq	1580c <__assert_fail@plt+0x4710>
   157fc:	bl	11018 <__errno_location@plt>
   15800:	ldr	r0, [r0]
   15804:	subs	r4, r0, #9
   15808:	mvnne	r4, #0
   1580c:	mov	r0, r4
   15810:	pop	{r4, r5, r6, sl, fp, pc}
   15814:	push	{fp, lr}
   15818:	mov	fp, sp
   1581c:	mov	r0, #14
   15820:	bl	110a8 <nl_langinfo@plt>
   15824:	movw	r1, #24936	; 0x6168
   15828:	movt	r1, #1
   1582c:	cmp	r0, #0
   15830:	movne	r1, r0
   15834:	ldrb	r2, [r1]
   15838:	movw	r0, #26709	; 0x6855
   1583c:	movt	r0, #1
   15840:	cmp	r2, #0
   15844:	movne	r0, r1
   15848:	pop	{fp, pc}
   1584c:	push	{r4, r5, r6, r7, fp, lr}
   15850:	add	fp, sp, #16
   15854:	sub	sp, sp, #8
   15858:	mov	r7, r2
   1585c:	mov	r4, r1
   15860:	add	r5, sp, #4
   15864:	cmp	r0, #0
   15868:	movne	r5, r0
   1586c:	mov	r0, r5
   15870:	bl	10f88 <mbrtowc@plt>
   15874:	mov	r6, r0
   15878:	cmp	r7, #0
   1587c:	beq	158a4 <__assert_fail@plt+0x47a8>
   15880:	cmn	r6, #2
   15884:	bcc	158a4 <__assert_fail@plt+0x47a8>
   15888:	mov	r0, #0
   1588c:	bl	158b0 <__assert_fail@plt+0x47b4>
   15890:	cmp	r0, #0
   15894:	bne	158a4 <__assert_fail@plt+0x47a8>
   15898:	ldrb	r0, [r4]
   1589c:	str	r0, [r5]
   158a0:	mov	r6, #1
   158a4:	mov	r0, r6
   158a8:	sub	sp, fp, #16
   158ac:	pop	{r4, r5, r6, r7, fp, pc}
   158b0:	push	{r4, sl, fp, lr}
   158b4:	add	fp, sp, #8
   158b8:	sub	sp, sp, #264	; 0x108
   158bc:	add	r1, sp, #7
   158c0:	movw	r2, #257	; 0x101
   158c4:	bl	1591c <__assert_fail@plt+0x4820>
   158c8:	mov	r4, #0
   158cc:	cmp	r0, #0
   158d0:	bne	15910 <__assert_fail@plt+0x4814>
   158d4:	add	r0, sp, #7
   158d8:	movw	r1, #26715	; 0x685b
   158dc:	movt	r1, #1
   158e0:	mov	r2, #2
   158e4:	bl	10ff4 <bcmp@plt>
   158e8:	cmp	r0, #0
   158ec:	beq	15910 <__assert_fail@plt+0x4814>
   158f0:	add	r0, sp, #7
   158f4:	movw	r1, #26717	; 0x685d
   158f8:	movt	r1, #1
   158fc:	mov	r2, #6
   15900:	bl	10ff4 <bcmp@plt>
   15904:	mov	r4, r0
   15908:	cmp	r0, #0
   1590c:	movwne	r4, #1
   15910:	mov	r0, r4
   15914:	sub	sp, fp, #8
   15918:	pop	{r4, sl, fp, pc}
   1591c:	b	15920 <__assert_fail@plt+0x4824>
   15920:	push	{r4, r5, r6, r7, fp, lr}
   15924:	add	fp, sp, #16
   15928:	mov	r6, r2
   1592c:	mov	r4, r1
   15930:	bl	159b8 <__assert_fail@plt+0x48bc>
   15934:	cmp	r0, #0
   15938:	beq	15968 <__assert_fail@plt+0x486c>
   1593c:	mov	r7, r0
   15940:	bl	11000 <strlen@plt>
   15944:	cmp	r0, r6
   15948:	bcs	15984 <__assert_fail@plt+0x4888>
   1594c:	add	r2, r0, #1
   15950:	mov	r0, r4
   15954:	mov	r1, r7
   15958:	bl	10eec <memcpy@plt>
   1595c:	mov	r5, #0
   15960:	mov	r0, r5
   15964:	pop	{r4, r5, r6, r7, fp, pc}
   15968:	mov	r5, #22
   1596c:	cmp	r6, #0
   15970:	beq	159ac <__assert_fail@plt+0x48b0>
   15974:	mov	r0, #0
   15978:	strb	r0, [r4]
   1597c:	mov	r0, r5
   15980:	pop	{r4, r5, r6, r7, fp, pc}
   15984:	mov	r5, #34	; 0x22
   15988:	cmp	r6, #0
   1598c:	beq	159ac <__assert_fail@plt+0x48b0>
   15990:	sub	r6, r6, #1
   15994:	mov	r0, r4
   15998:	mov	r1, r7
   1599c:	mov	r2, r6
   159a0:	bl	10eec <memcpy@plt>
   159a4:	mov	r0, #0
   159a8:	strb	r0, [r4, r6]
   159ac:	mov	r0, r5
   159b0:	pop	{r4, r5, r6, r7, fp, pc}
   159b4:	b	159b8 <__assert_fail@plt+0x48bc>
   159b8:	mov	r1, #0
   159bc:	b	11090 <setlocale@plt>
   159c0:	cmp	r3, #0
   159c4:	cmpeq	r2, #0
   159c8:	bne	159ec <__assert_fail@plt+0x48f0>
   159cc:	cmp	r1, #0
   159d0:	movlt	r1, #-2147483648	; 0x80000000
   159d4:	movlt	r0, #0
   159d8:	blt	159e8 <__assert_fail@plt+0x48ec>
   159dc:	cmpeq	r0, #0
   159e0:	mvnne	r1, #-2147483648	; 0x80000000
   159e4:	mvnne	r0, #0
   159e8:	b	15a94 <__assert_fail@plt+0x4998>
   159ec:	sub	sp, sp, #8
   159f0:	push	{sp, lr}
   159f4:	cmp	r1, #0
   159f8:	blt	15a18 <__assert_fail@plt+0x491c>
   159fc:	cmp	r3, #0
   15a00:	blt	15a4c <__assert_fail@plt+0x4950>
   15a04:	bl	15aa4 <__assert_fail@plt+0x49a8>
   15a08:	ldr	lr, [sp, #4]
   15a0c:	add	sp, sp, #8
   15a10:	pop	{r2, r3}
   15a14:	bx	lr
   15a18:	rsbs	r0, r0, #0
   15a1c:	sbc	r1, r1, r1, lsl #1
   15a20:	cmp	r3, #0
   15a24:	blt	15a70 <__assert_fail@plt+0x4974>
   15a28:	bl	15aa4 <__assert_fail@plt+0x49a8>
   15a2c:	ldr	lr, [sp, #4]
   15a30:	add	sp, sp, #8
   15a34:	pop	{r2, r3}
   15a38:	rsbs	r0, r0, #0
   15a3c:	sbc	r1, r1, r1, lsl #1
   15a40:	rsbs	r2, r2, #0
   15a44:	sbc	r3, r3, r3, lsl #1
   15a48:	bx	lr
   15a4c:	rsbs	r2, r2, #0
   15a50:	sbc	r3, r3, r3, lsl #1
   15a54:	bl	15aa4 <__assert_fail@plt+0x49a8>
   15a58:	ldr	lr, [sp, #4]
   15a5c:	add	sp, sp, #8
   15a60:	pop	{r2, r3}
   15a64:	rsbs	r0, r0, #0
   15a68:	sbc	r1, r1, r1, lsl #1
   15a6c:	bx	lr
   15a70:	rsbs	r2, r2, #0
   15a74:	sbc	r3, r3, r3, lsl #1
   15a78:	bl	15aa4 <__assert_fail@plt+0x49a8>
   15a7c:	ldr	lr, [sp, #4]
   15a80:	add	sp, sp, #8
   15a84:	pop	{r2, r3}
   15a88:	rsbs	r2, r2, #0
   15a8c:	sbc	r3, r3, r3, lsl #1
   15a90:	bx	lr
   15a94:	push	{r1, lr}
   15a98:	mov	r0, #8
   15a9c:	bl	10e98 <raise@plt>
   15aa0:	pop	{r1, pc}
   15aa4:	cmp	r1, r3
   15aa8:	cmpeq	r0, r2
   15aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ab0:	mov	r4, r0
   15ab4:	movcc	r0, #0
   15ab8:	mov	r5, r1
   15abc:	ldr	lr, [sp, #36]	; 0x24
   15ac0:	movcc	r1, r0
   15ac4:	bcc	15bc0 <__assert_fail@plt+0x4ac4>
   15ac8:	cmp	r3, #0
   15acc:	clzeq	ip, r2
   15ad0:	clzne	ip, r3
   15ad4:	addeq	ip, ip, #32
   15ad8:	cmp	r5, #0
   15adc:	clzeq	r1, r4
   15ae0:	addeq	r1, r1, #32
   15ae4:	clzne	r1, r5
   15ae8:	sub	ip, ip, r1
   15aec:	sub	sl, ip, #32
   15af0:	lsl	r9, r3, ip
   15af4:	rsb	fp, ip, #32
   15af8:	orr	r9, r9, r2, lsl sl
   15afc:	orr	r9, r9, r2, lsr fp
   15b00:	lsl	r8, r2, ip
   15b04:	cmp	r5, r9
   15b08:	cmpeq	r4, r8
   15b0c:	movcc	r0, #0
   15b10:	movcc	r1, r0
   15b14:	bcc	15b30 <__assert_fail@plt+0x4a34>
   15b18:	mov	r0, #1
   15b1c:	subs	r4, r4, r8
   15b20:	lsl	r1, r0, sl
   15b24:	orr	r1, r1, r0, lsr fp
   15b28:	lsl	r0, r0, ip
   15b2c:	sbc	r5, r5, r9
   15b30:	cmp	ip, #0
   15b34:	beq	15bc0 <__assert_fail@plt+0x4ac4>
   15b38:	lsr	r6, r8, #1
   15b3c:	orr	r6, r6, r9, lsl #31
   15b40:	lsr	r7, r9, #1
   15b44:	mov	r2, ip
   15b48:	b	15b6c <__assert_fail@plt+0x4a70>
   15b4c:	subs	r3, r4, r6
   15b50:	sbc	r8, r5, r7
   15b54:	adds	r3, r3, r3
   15b58:	adc	r8, r8, r8
   15b5c:	adds	r4, r3, #1
   15b60:	adc	r5, r8, #0
   15b64:	subs	r2, r2, #1
   15b68:	beq	15b88 <__assert_fail@plt+0x4a8c>
   15b6c:	cmp	r5, r7
   15b70:	cmpeq	r4, r6
   15b74:	bcs	15b4c <__assert_fail@plt+0x4a50>
   15b78:	adds	r4, r4, r4
   15b7c:	adc	r5, r5, r5
   15b80:	subs	r2, r2, #1
   15b84:	bne	15b6c <__assert_fail@plt+0x4a70>
   15b88:	lsr	r3, r4, ip
   15b8c:	orr	r3, r3, r5, lsl fp
   15b90:	lsr	r2, r5, ip
   15b94:	orr	r3, r3, r5, lsr sl
   15b98:	adds	r0, r0, r4
   15b9c:	mov	r4, r3
   15ba0:	lsl	r3, r2, ip
   15ba4:	orr	r3, r3, r4, lsl sl
   15ba8:	lsl	ip, r4, ip
   15bac:	orr	r3, r3, r4, lsr fp
   15bb0:	adc	r1, r1, r5
   15bb4:	subs	r0, r0, ip
   15bb8:	mov	r5, r2
   15bbc:	sbc	r1, r1, r3
   15bc0:	cmp	lr, #0
   15bc4:	strdne	r4, [lr]
   15bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15bd0:	mov	r7, r0
   15bd4:	ldr	r6, [pc, #72]	; 15c24 <__assert_fail@plt+0x4b28>
   15bd8:	ldr	r5, [pc, #72]	; 15c28 <__assert_fail@plt+0x4b2c>
   15bdc:	add	r6, pc, r6
   15be0:	add	r5, pc, r5
   15be4:	sub	r6, r6, r5
   15be8:	mov	r8, r1
   15bec:	mov	r9, r2
   15bf0:	bl	10e60 <calloc@plt-0x20>
   15bf4:	asrs	r6, r6, #2
   15bf8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bfc:	mov	r4, #0
   15c00:	add	r4, r4, #1
   15c04:	ldr	r3, [r5], #4
   15c08:	mov	r2, r9
   15c0c:	mov	r1, r8
   15c10:	mov	r0, r7
   15c14:	blx	r3
   15c18:	cmp	r6, r4
   15c1c:	bne	15c00 <__assert_fail@plt+0x4b04>
   15c20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c24:	andeq	r1, r1, r8, lsr #6
   15c28:	andeq	r1, r1, r0, lsr #6
   15c2c:	bx	lr
   15c30:	ldr	r3, [pc, #12]	; 15c44 <__assert_fail@plt+0x4b48>
   15c34:	mov	r1, #0
   15c38:	add	r3, pc, r3
   15c3c:	ldr	r2, [r3]
   15c40:	b	11024 <__cxa_atexit@plt>
   15c44:	andeq	r1, r1, ip, lsr #9

Disassembly of section .fini:

00015c48 <.fini>:
   15c48:	push	{r3, lr}
   15c4c:	pop	{r3, pc}
