
../repos/prog2/7.1:     file format elf32-littlearm


Disassembly of section .init:

00010e58 <.init>:
   10e58:	push	{r3, lr}
   10e5c:	bl	10f74 <_start@@Base+0x3c>
   10e60:	pop	{r3, pc}

Disassembly of section .plt:

00010e64 <strcmp@plt-0x14>:
   10e64:	push	{lr}		; (str lr, [sp, #-4]!)
   10e68:	ldr	lr, [pc, #4]	; 10e74 <strcmp@plt-0x4>
   10e6c:	add	lr, pc, lr
   10e70:	ldr	pc, [lr, #8]!
   10e74:	andeq	r2, r1, ip, lsl #3

00010e78 <strcmp@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #73728	; 0x12000
   10e80:	ldr	pc, [ip, #396]!	; 0x18c

00010e84 <printf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #73728	; 0x12000
   10e8c:	ldr	pc, [ip, #388]!	; 0x184

00010e90 <fopen@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #73728	; 0x12000
   10e98:	ldr	pc, [ip, #380]!	; 0x17c

00010e9c <free@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #73728	; 0x12000
   10ea4:	ldr	pc, [ip, #372]!	; 0x174

00010ea8 <realloc@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #73728	; 0x12000
   10eb0:	ldr	pc, [ip, #364]!	; 0x16c

00010eb4 <strcpy@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #73728	; 0x12000
   10ebc:	ldr	pc, [ip, #356]!	; 0x164

00010ec0 <puts@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #73728	; 0x12000
   10ec8:	ldr	pc, [ip, #348]!	; 0x15c

00010ecc <malloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #73728	; 0x12000
   10ed4:	ldr	pc, [ip, #340]!	; 0x154

00010ed8 <__libc_start_main@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #73728	; 0x12000
   10ee0:	ldr	pc, [ip, #332]!	; 0x14c

00010ee4 <__gmon_start__@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #73728	; 0x12000
   10eec:	ldr	pc, [ip, #324]!	; 0x144

00010ef0 <strlen@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #73728	; 0x12000
   10ef8:	ldr	pc, [ip, #316]!	; 0x13c

00010efc <putchar@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #73728	; 0x12000
   10f04:	ldr	pc, [ip, #308]!	; 0x134

00010f08 <fclose@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #73728	; 0x12000
   10f10:	ldr	pc, [ip, #300]!	; 0x12c

00010f14 <strtok@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #73728	; 0x12000
   10f1c:	ldr	pc, [ip, #292]!	; 0x124

00010f20 <fgets_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #73728	; 0x12000
   10f28:	ldr	pc, [ip, #284]!	; 0x11c

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #73728	; 0x12000
   10f34:	ldr	pc, [ip, #276]!	; 0x114

Disassembly of section .text:

00010f38 <_start@@Base>:
   10f38:	mov	fp, #0
   10f3c:	mov	lr, #0
   10f40:	pop	{r1}		; (ldr r1, [sp], #4)
   10f44:	mov	r2, sp
   10f48:	push	{r2}		; (str r2, [sp, #-4]!)
   10f4c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f50:	ldr	ip, [pc, #16]	; 10f68 <_start@@Base+0x30>
   10f54:	push	{ip}		; (str ip, [sp, #-4]!)
   10f58:	ldr	r0, [pc, #12]	; 10f6c <_start@@Base+0x34>
   10f5c:	ldr	r3, [pc, #12]	; 10f70 <_start@@Base+0x38>
   10f60:	bl	10ed8 <__libc_start_main@plt>
   10f64:	bl	10f2c <abort@plt>
   10f68:			; <UNDEFINED> instruction: 0x000123b0
   10f6c:	andeq	r1, r1, r8, lsr #32
   10f70:	andeq	r2, r1, r0, asr r3
   10f74:	ldr	r3, [pc, #20]	; 10f90 <_start@@Base+0x58>
   10f78:	ldr	r2, [pc, #20]	; 10f94 <_start@@Base+0x5c>
   10f7c:	add	r3, pc, r3
   10f80:	ldr	r2, [r3, r2]
   10f84:	cmp	r2, #0
   10f88:	bxeq	lr
   10f8c:	b	10ee4 <__gmon_start__@plt>
   10f90:	andeq	r2, r1, ip, ror r0
   10f94:	andeq	r0, r0, ip, asr #32
   10f98:	ldr	r0, [pc, #24]	; 10fb8 <_start@@Base+0x80>
   10f9c:	ldr	r3, [pc, #24]	; 10fbc <_start@@Base+0x84>
   10fa0:	cmp	r3, r0
   10fa4:	bxeq	lr
   10fa8:	ldr	r3, [pc, #16]	; 10fc0 <_start@@Base+0x88>
   10fac:	cmp	r3, #0
   10fb0:	bxeq	lr
   10fb4:	bx	r3
   10fb8:	andeq	r3, r2, r8, asr r0
   10fbc:	andeq	r3, r2, r8, asr r0
   10fc0:	andeq	r0, r0, r0
   10fc4:	ldr	r0, [pc, #36]	; 10ff0 <_start@@Base+0xb8>
   10fc8:	ldr	r1, [pc, #36]	; 10ff4 <_start@@Base+0xbc>
   10fcc:	sub	r1, r1, r0
   10fd0:	asr	r1, r1, #2
   10fd4:	add	r1, r1, r1, lsr #31
   10fd8:	asrs	r1, r1, #1
   10fdc:	bxeq	lr
   10fe0:	ldr	r3, [pc, #16]	; 10ff8 <_start@@Base+0xc0>
   10fe4:	cmp	r3, #0
   10fe8:	bxeq	lr
   10fec:	bx	r3
   10ff0:	andeq	r3, r2, r8, asr r0
   10ff4:	andeq	r3, r2, r8, asr r0
   10ff8:	andeq	r0, r0, r0
   10ffc:	push	{r4, lr}
   11000:	ldr	r4, [pc, #24]	; 11020 <_start@@Base+0xe8>
   11004:	ldrb	r3, [r4]
   11008:	cmp	r3, #0
   1100c:	popne	{r4, pc}
   11010:	bl	10f98 <_start@@Base+0x60>
   11014:	mov	r3, #1
   11018:	strb	r3, [r4]
   1101c:	pop	{r4, pc}
   11020:	andeq	r3, r2, r8, asr r0
   11024:	b	10fc4 <_start@@Base+0x8c>

00011028 <main@@Base>:
   11028:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1102c:	add	fp, sp, #24
   11030:	sub	sp, sp, #104	; 0x68
   11034:	ldr	r0, [pc, #536]	; 11254 <main@@Base+0x22c>
   11038:	add	r0, pc, r0
   1103c:	bl	10ec0 <puts@plt>
   11040:	bl	11e74 <bst_nova@@Base>
   11044:	ldr	r1, [pc, #524]	; 11258 <main@@Base+0x230>
   11048:	mov	r4, r0
   1104c:	add	r1, pc, r1
   11050:	bl	120c0 <bst_insere@@Base>
   11054:	ldr	r1, [pc, #512]	; 1125c <main@@Base+0x234>
   11058:	mov	r0, r4
   1105c:	add	r1, pc, r1
   11060:	bl	120c0 <bst_insere@@Base>
   11064:	ldr	r1, [pc, #500]	; 11260 <main@@Base+0x238>
   11068:	mov	r0, r4
   1106c:	add	r1, pc, r1
   11070:	bl	120c0 <bst_insere@@Base>
   11074:	ldr	r1, [pc, #488]	; 11264 <main@@Base+0x23c>
   11078:	mov	r0, r4
   1107c:	add	r1, pc, r1
   11080:	bl	120c0 <bst_insere@@Base>
   11084:	ldr	r1, [pc, #476]	; 11268 <main@@Base+0x240>
   11088:	mov	r0, r4
   1108c:	add	r1, pc, r1
   11090:	bl	120c0 <bst_insere@@Base>
   11094:	ldr	r1, [pc, #464]	; 1126c <main@@Base+0x244>
   11098:	mov	r0, r4
   1109c:	add	r1, pc, r1
   110a0:	bl	120c0 <bst_insere@@Base>
   110a4:	ldr	r1, [pc, #452]	; 11270 <main@@Base+0x248>
   110a8:	mov	r0, r4
   110ac:	add	r1, pc, r1
   110b0:	bl	120c0 <bst_insere@@Base>
   110b4:	ldr	r1, [pc, #440]	; 11274 <main@@Base+0x24c>
   110b8:	mov	r0, r4
   110bc:	add	r1, pc, r1
   110c0:	bl	120c0 <bst_insere@@Base>
   110c4:	ldr	r1, [pc, #428]	; 11278 <main@@Base+0x250>
   110c8:	mov	r0, r4
   110cc:	add	r1, pc, r1
   110d0:	bl	120c0 <bst_insere@@Base>
   110d4:	ldr	r1, [pc, #416]	; 1127c <main@@Base+0x254>
   110d8:	mov	r0, r4
   110dc:	add	r1, pc, r1
   110e0:	bl	120c0 <bst_insere@@Base>
   110e4:	ldr	r0, [r4]
   110e8:	bl	12304 <bst_altura@@Base>
   110ec:	mov	r1, r0
   110f0:	ldr	r0, [pc, #392]	; 11280 <main@@Base+0x258>
   110f4:	add	r0, pc, r0
   110f8:	bl	10e84 <printf@plt>
   110fc:	mov	r0, r4
   11100:	bl	12240 <bst_imprime@@Base>
   11104:	ldr	r0, [pc, #376]	; 11284 <main@@Base+0x25c>
   11108:	add	r0, pc, r0
   1110c:	bl	10ec0 <puts@plt>
   11110:	bl	112ac <avl_nova@@Base>
   11114:	mov	r4, r0
   11118:	ldr	r0, [pc, #360]	; 11288 <main@@Base+0x260>
   1111c:	ldr	r1, [pc, #360]	; 1128c <main@@Base+0x264>
   11120:	add	r0, pc, r0
   11124:	add	r1, pc, r1
   11128:	bl	10e90 <fopen@plt>
   1112c:	mov	r5, r0
   11130:	add	r6, sp, #4
   11134:	mov	r1, #100	; 0x64
   11138:	mov	r0, r6
   1113c:	mov	r2, r5
   11140:	bl	10f20 <fgets_unlocked@plt>
   11144:	cmp	r0, #0
   11148:	beq	111bc <main@@Base+0x194>
   1114c:	ldr	r7, [pc, #316]	; 11290 <main@@Base+0x268>
   11150:	mov	r8, #0
   11154:	add	r7, pc, r7
   11158:	mov	r0, r6
   1115c:	mov	r1, r7
   11160:	bl	10f14 <strtok@plt>
   11164:	mov	r1, r0
   11168:	mov	r0, r6
   1116c:	bl	10eb4 <strcpy@plt>
   11170:	mov	r0, #0
   11174:	mov	r1, r7
   11178:	bl	10f14 <strtok@plt>
   1117c:	mov	r1, r0
   11180:	mov	r0, r6
   11184:	bl	10eb4 <strcpy@plt>
   11188:	mov	r0, r6
   1118c:	bl	10ef0 <strlen@plt>
   11190:	add	r0, r6, r0
   11194:	mov	r1, r6
   11198:	strb	r8, [r0, #-1]
   1119c:	mov	r0, r4
   111a0:	bl	117f8 <avl_insere@@Base>
   111a4:	mov	r0, r6
   111a8:	mov	r1, #100	; 0x64
   111ac:	mov	r2, r5
   111b0:	bl	10f20 <fgets_unlocked@plt>
   111b4:	cmp	r0, #0
   111b8:	bne	11158 <main@@Base+0x130>
   111bc:	mov	r0, r5
   111c0:	bl	10f08 <fclose@plt>
   111c4:	ldr	r1, [pc, #200]	; 11294 <main@@Base+0x26c>
   111c8:	mov	r0, r4
   111cc:	add	r1, pc, r1
   111d0:	bl	11734 <avl_pesquisa@@Base>
   111d4:	cmp	r0, #0
   111d8:	beq	111f0 <main@@Base+0x1c8>
   111dc:	ldr	r1, [r0]
   111e0:	ldr	r2, [r0, #16]
   111e4:	ldr	r0, [pc, #172]	; 11298 <main@@Base+0x270>
   111e8:	add	r0, pc, r0
   111ec:	bl	10e84 <printf@plt>
   111f0:	ldr	r1, [pc, #164]	; 1129c <main@@Base+0x274>
   111f4:	mov	r0, r4
   111f8:	add	r1, pc, r1
   111fc:	bl	11734 <avl_pesquisa@@Base>
   11200:	cmp	r0, #0
   11204:	beq	1121c <main@@Base+0x1f4>
   11208:	ldr	r1, [r0]
   1120c:	ldr	r2, [r0, #16]
   11210:	ldr	r0, [pc, #136]	; 112a0 <main@@Base+0x278>
   11214:	add	r0, pc, r0
   11218:	bl	10e84 <printf@plt>
   1121c:	ldr	r1, [pc, #128]	; 112a4 <main@@Base+0x27c>
   11220:	mov	r0, r4
   11224:	add	r1, pc, r1
   11228:	bl	11734 <avl_pesquisa@@Base>
   1122c:	cmp	r0, #0
   11230:	beq	11248 <main@@Base+0x220>
   11234:	ldr	r1, [r0]
   11238:	ldr	r2, [r0, #16]
   1123c:	ldr	r0, [pc, #100]	; 112a8 <main@@Base+0x280>
   11240:	add	r0, pc, r0
   11244:	bl	10e84 <printf@plt>
   11248:	mov	r0, #0
   1124c:	sub	sp, fp, #24
   11250:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11254:	ldrdeq	r1, [r0], -r5
   11258:	andeq	r1, r0, ip, ror #6
   1125c:	andeq	r1, r0, lr, asr r3
   11260:	andeq	r1, r0, r0, asr r3
   11264:	andeq	r1, r0, r2, asr #6
   11268:	andeq	r1, r0, r7, lsl #7
   1126c:	andeq	r1, r0, r4, lsr #6
   11270:	andeq	r1, r0, r6, lsl r3
   11274:	andeq	r1, r0, r8, lsl #6
   11278:	strdeq	r1, [r0], -sl
   1127c:	andeq	r1, r0, ip, ror #5
   11280:	ldrdeq	r1, [r0], -r6
   11284:	andeq	r1, r0, r9, lsl #6
   11288:			; <UNDEFINED> instruction: 0x000012be
   1128c:	andeq	r1, r0, r6, asr #5
   11290:	muleq	r0, r8, r2
   11294:	andeq	r1, r0, r2, lsr #4
   11298:	andeq	r1, r0, pc, lsl #4
   1129c:	andeq	r1, r0, r8, lsl #4
   112a0:	andeq	r1, r0, r3, ror #3
   112a4:	andeq	r1, r0, r2, ror #3
   112a8:			; <UNDEFINED> instruction: 0x000011b7

000112ac <avl_nova@@Base>:
   112ac:	push	{fp, lr}
   112b0:	mov	fp, sp
   112b4:	mov	r0, #4
   112b8:	bl	10ecc <malloc@plt>
   112bc:	cmp	r0, #0
   112c0:	moveq	r0, #0
   112c4:	movne	r1, #0
   112c8:	strne	r1, [r0]
   112cc:	pop	{fp, pc}

000112d0 <avl_apaga@@Base>:
   112d0:	cmp	r0, #0
   112d4:	bxeq	lr
   112d8:	push	{r4, sl, fp, lr}
   112dc:	add	fp, sp, #8
   112e0:	mov	r4, r0
   112e4:	ldr	r0, [r0]
   112e8:	cmp	r0, #0
   112ec:	beq	11304 <avl_apaga@@Base+0x34>
   112f0:	ldr	r1, [r0]
   112f4:	bl	11310 <avl_remove_impl@@Base>
   112f8:	str	r0, [r4]
   112fc:	cmp	r0, #0
   11300:	bne	112f0 <avl_apaga@@Base+0x20>
   11304:	mov	r0, r4
   11308:	pop	{r4, sl, fp, lr}
   1130c:	b	10e9c <free@plt>

00011310 <avl_remove_impl@@Base>:
   11310:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11314:	add	fp, sp, #24
   11318:	mov	r8, #0
   1131c:	cmp	r0, #0
   11320:	beq	116bc <avl_remove_impl@@Base+0x3ac>
   11324:	ldr	r6, [r0]
   11328:	mov	r5, r0
   1132c:	mov	r7, r1
   11330:	mov	r0, r1
   11334:	mov	r1, r6
   11338:	bl	10e78 <strcmp@plt>
   1133c:	mov	r4, r5
   11340:	cmn	r0, #1
   11344:	bgt	11350 <avl_remove_impl@@Base+0x40>
   11348:	ldr	r0, [r4, #4]!
   1134c:	b	1135c <avl_remove_impl@@Base+0x4c>
   11350:	cmp	r0, #0
   11354:	beq	115a4 <avl_remove_impl@@Base+0x294>
   11358:	ldr	r0, [r4, #8]!
   1135c:	mov	r1, r7
   11360:	bl	11310 <avl_remove_impl@@Base>
   11364:	str	r0, [r4]
   11368:	ldr	r1, [r5, #4]
   1136c:	ldr	r2, [r5, #8]
   11370:	cmp	r1, #0
   11374:	ldrne	r0, [r1, #12]
   11378:	mvneq	r0, #0
   1137c:	cmp	r2, #0
   11380:	beq	113a4 <avl_remove_impl@@Base+0x94>
   11384:	ldr	r3, [r2, #12]
   11388:	cmp	r0, r3
   1138c:	movgt	r3, r0
   11390:	mov	r0, r5
   11394:	add	r3, r3, #1
   11398:	str	r3, [r0, #12]!
   1139c:	ldr	r3, [r2, #12]
   113a0:	b	113b8 <avl_remove_impl@@Base+0xa8>
   113a4:	orr	r0, r0, r0, asr #31
   113a8:	add	r3, r0, #1
   113ac:	mov	r0, r5
   113b0:	str	r3, [r0, #12]!
   113b4:	mvn	r3, #0
   113b8:	cmp	r1, #0
   113bc:	ldrne	r7, [r1, #12]
   113c0:	mvneq	r7, #0
   113c4:	sub	r3, r3, r7
   113c8:	cmp	r3, #2
   113cc:	blt	114b0 <avl_remove_impl@@Base+0x1a0>
   113d0:	cmp	r2, #0
   113d4:	beq	115f8 <avl_remove_impl@@Base+0x2e8>
   113d8:	ldr	r1, [r2, #8]
   113dc:	mvn	r7, #0
   113e0:	mvn	r3, #0
   113e4:	cmp	r1, #0
   113e8:	ldrne	r7, [r1, #12]
   113ec:	mov	r1, r2
   113f0:	ldr	r8, [r1, #4]!
   113f4:	cmp	r8, #0
   113f8:	ldrne	r3, [r8, #12]
   113fc:	cmp	r7, r3
   11400:	bge	11600 <avl_remove_impl@@Base+0x2f0>
   11404:	ldr	r7, [r8, #8]
   11408:	str	r2, [r8, #8]
   1140c:	mvn	r3, #0
   11410:	mvn	r1, #0
   11414:	str	r7, [r2, #4]
   11418:	cmp	r7, #0
   1141c:	ldrne	r3, [r7, #12]
   11420:	ldr	r7, [r2, #8]
   11424:	cmp	r7, #0
   11428:	ldrne	r1, [r7, #12]
   1142c:	mvn	r7, #0
   11430:	cmp	r3, r1
   11434:	movgt	r1, r3
   11438:	add	r3, r1, #1
   1143c:	mvn	r1, #0
   11440:	str	r3, [r2, #12]
   11444:	ldr	r2, [r8, #4]
   11448:	cmp	r2, #0
   1144c:	ldrne	r7, [r2, #12]
   11450:	str	r5, [r8, #4]
   11454:	cmp	r7, r3
   11458:	movgt	r3, r7
   1145c:	mvn	r7, #0
   11460:	add	r3, r3, #1
   11464:	str	r3, [r8, #12]
   11468:	str	r2, [r5, #8]
   1146c:	ldr	r3, [r5, #4]
   11470:	cmp	r3, #0
   11474:	ldrne	r1, [r3, #12]
   11478:	cmp	r2, #0
   1147c:	mvn	r3, #0
   11480:	ldrne	r7, [r2, #12]
   11484:	cmp	r1, r7
   11488:	movgt	r7, r1
   1148c:	add	r1, r7, #1
   11490:	str	r1, [r0]
   11494:	ldr	r0, [r8, #8]
   11498:	cmp	r0, #0
   1149c:	ldrne	r3, [r0, #12]
   114a0:	cmp	r1, r3
   114a4:	movgt	r3, r1
   114a8:	add	r0, r3, #1
   114ac:	b	11598 <avl_remove_impl@@Base+0x288>
   114b0:	cmn	r3, #2
   114b4:	movgt	r0, r5
   114b8:	popgt	{r4, r5, r6, r7, r8, sl, fp, pc}
   114bc:	cmp	r1, #0
   114c0:	beq	1165c <avl_remove_impl@@Base+0x34c>
   114c4:	mov	r2, r1
   114c8:	ldr	r6, [r1, #4]
   114cc:	mvn	r7, #0
   114d0:	mvn	r3, #0
   114d4:	ldr	r8, [r2, #8]!
   114d8:	cmp	r8, #0
   114dc:	ldrne	r7, [r8, #12]
   114e0:	cmp	r6, #0
   114e4:	ldrne	r3, [r6, #12]
   114e8:	cmp	r7, r3
   114ec:	ble	11664 <avl_remove_impl@@Base+0x354>
   114f0:	ldr	r3, [r8, #4]
   114f4:	str	r1, [r8, #4]
   114f8:	mvn	r7, #0
   114fc:	mvn	r2, #0
   11500:	str	r3, [r1, #8]
   11504:	ldr	r6, [r1, #4]
   11508:	cmp	r6, #0
   1150c:	ldrne	r7, [r6, #12]
   11510:	cmp	r3, #0
   11514:	ldrne	r2, [r3, #12]
   11518:	cmp	r7, r2
   1151c:	movgt	r2, r7
   11520:	mvn	r7, #0
   11524:	add	r3, r2, #1
   11528:	str	r3, [r1, #12]
   1152c:	mvn	r1, #0
   11530:	ldr	r2, [r8, #8]
   11534:	cmp	r2, #0
   11538:	ldrne	r7, [r2, #12]
   1153c:	str	r5, [r8, #8]
   11540:	cmp	r3, r7
   11544:	movgt	r7, r3
   11548:	cmp	r2, #0
   1154c:	add	r3, r7, #1
   11550:	str	r3, [r8, #12]
   11554:	str	r2, [r5, #4]
   11558:	mvn	r3, #0
   1155c:	ldr	r7, [r5, #8]
   11560:	ldrne	r1, [r2, #12]
   11564:	mvn	r2, #0
   11568:	cmp	r7, #0
   1156c:	ldrne	r3, [r7, #12]
   11570:	cmp	r1, r3
   11574:	movgt	r3, r1
   11578:	add	r1, r3, #1
   1157c:	str	r1, [r0]
   11580:	ldr	r0, [r8, #4]
   11584:	cmp	r0, #0
   11588:	ldrne	r2, [r0, #12]
   1158c:	cmp	r2, r1
   11590:	movgt	r1, r2
   11594:	add	r0, r1, #1
   11598:	str	r0, [r8, #12]
   1159c:	mov	r0, r8
   115a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   115a4:	ldr	r0, [r4, #8]!
   115a8:	ldr	r7, [r4, #-4]
   115ac:	cmp	r7, #0
   115b0:	beq	116c4 <avl_remove_impl@@Base+0x3b4>
   115b4:	cmp	r0, #0
   115b8:	beq	116d0 <avl_remove_impl@@Base+0x3c0>
   115bc:	mov	r7, r0
   115c0:	ldr	r0, [r0, #4]
   115c4:	cmp	r0, #0
   115c8:	bne	115bc <avl_remove_impl@@Base+0x2ac>
   115cc:	ldr	r0, [r7]
   115d0:	bl	10ef0 <strlen@plt>
   115d4:	add	r1, r0, #1
   115d8:	mov	r0, r6
   115dc:	bl	10ea8 <realloc@plt>
   115e0:	str	r0, [r5]
   115e4:	ldr	r1, [r7]
   115e8:	bl	10eb4 <strcpy@plt>
   115ec:	ldr	r0, [r5, #8]
   115f0:	ldr	r1, [r7]
   115f4:	b	11360 <avl_remove_impl@@Base+0x50>
   115f8:	mov	r1, #4
   115fc:	ldr	r8, [r1]
   11600:	str	r5, [r1]
   11604:	str	r8, [r5, #8]
   11608:	mvn	r3, #0
   1160c:	mvn	r1, #0
   11610:	ldr	r7, [r5, #4]
   11614:	cmp	r7, #0
   11618:	ldrne	r3, [r7, #12]
   1161c:	cmp	r8, #0
   11620:	ldrne	r1, [r8, #12]
   11624:	cmp	r3, r1
   11628:	movgt	r1, r3
   1162c:	add	r1, r1, #1
   11630:	str	r1, [r0]
   11634:	ldr	r0, [r2, #8]
   11638:	cmp	r0, #0
   1163c:	ldrne	r0, [r0, #12]
   11640:	mvneq	r0, #0
   11644:	cmp	r1, r0
   11648:	movgt	r0, r1
   1164c:	add	r0, r0, #1
   11650:	str	r0, [r2, #12]
   11654:	mov	r0, r2
   11658:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1165c:	mov	r2, #8
   11660:	ldr	r8, [r2]
   11664:	str	r5, [r2]
   11668:	str	r8, [r5, #4]
   1166c:	cmp	r8, #0
   11670:	mvn	r3, #0
   11674:	mvn	r2, #0
   11678:	ldr	r7, [r5, #8]
   1167c:	ldrne	r3, [r8, #12]
   11680:	mov	r8, r1
   11684:	cmp	r7, #0
   11688:	ldrne	r2, [r7, #12]
   1168c:	cmp	r3, r2
   11690:	movgt	r2, r3
   11694:	add	r2, r2, #1
   11698:	str	r2, [r0]
   1169c:	ldr	r0, [r1, #4]
   116a0:	cmp	r0, #0
   116a4:	ldrne	r0, [r0, #12]
   116a8:	mvneq	r0, #0
   116ac:	cmp	r0, r2
   116b0:	movgt	r2, r0
   116b4:	add	r0, r2, #1
   116b8:	str	r0, [r1, #12]
   116bc:	mov	r0, r8
   116c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   116c4:	cmp	r0, #0
   116c8:	mov	r7, r0
   116cc:	beq	11710 <avl_remove_impl@@Base+0x400>
   116d0:	ldr	r0, [r7]
   116d4:	bl	10ef0 <strlen@plt>
   116d8:	add	r1, r0, #1
   116dc:	mov	r0, r6
   116e0:	bl	10ea8 <realloc@plt>
   116e4:	str	r0, [r5]
   116e8:	ldr	r1, [r7]
   116ec:	bl	10eb4 <strcpy@plt>
   116f0:	ldr	r0, [r7, #4]
   116f4:	str	r0, [r5, #4]
   116f8:	ldr	r0, [r7, #8]
   116fc:	str	r0, [r5, #8]
   11700:	ldr	r0, [r7, #12]
   11704:	str	r0, [r5, #12]
   11708:	ldr	r6, [r7]
   1170c:	b	11718 <avl_remove_impl@@Base+0x408>
   11710:	mov	r7, r5
   11714:	mov	r5, #0
   11718:	mov	r0, r6
   1171c:	bl	10e9c <free@plt>
   11720:	mov	r0, r7
   11724:	bl	10e9c <free@plt>
   11728:	cmp	r5, #0
   1172c:	bne	11368 <avl_remove_impl@@Base+0x58>
   11730:	b	116bc <avl_remove_impl@@Base+0x3ac>

00011734 <avl_pesquisa@@Base>:
   11734:	push	{r4, r5, r6, sl, fp, lr}
   11738:	add	fp, sp, #16
   1173c:	cmp	r0, #0
   11740:	mov	r4, #0
   11744:	movne	r5, r1
   11748:	cmpne	r1, #0
   1174c:	beq	1178c <avl_pesquisa@@Base+0x58>
   11750:	b	11758 <avl_pesquisa@@Base+0x24>
   11754:	add	r0, r6, #4
   11758:	ldr	r6, [r0]
   1175c:	cmp	r6, #0
   11760:	beq	1178c <avl_pesquisa@@Base+0x58>
   11764:	ldr	r1, [r6]
   11768:	mov	r0, r5
   1176c:	bl	10e78 <strcmp@plt>
   11770:	cmn	r0, #1
   11774:	ble	11754 <avl_pesquisa@@Base+0x20>
   11778:	cmp	r0, #0
   1177c:	beq	11788 <avl_pesquisa@@Base+0x54>
   11780:	add	r0, r6, #8
   11784:	b	11758 <avl_pesquisa@@Base+0x24>
   11788:	mov	r4, r6
   1178c:	mov	r0, r4
   11790:	pop	{r4, r5, r6, sl, fp, pc}

00011794 <avl_pesquisa_impl@@Base>:
   11794:	push	{r4, r5, r6, sl, fp, lr}
   11798:	add	fp, sp, #16
   1179c:	mov	r4, #0
   117a0:	cmp	r0, #0
   117a4:	beq	117e4 <avl_pesquisa_impl@@Base+0x50>
   117a8:	mov	r5, r1
   117ac:	mov	r6, r0
   117b0:	ldr	r1, [r6]
   117b4:	mov	r0, r5
   117b8:	bl	10e78 <strcmp@plt>
   117bc:	cmn	r0, #1
   117c0:	bgt	117cc <avl_pesquisa_impl@@Base+0x38>
   117c4:	add	r0, r6, #4
   117c8:	b	117d8 <avl_pesquisa_impl@@Base+0x44>
   117cc:	cmp	r0, #0
   117d0:	beq	117ec <avl_pesquisa_impl@@Base+0x58>
   117d4:	add	r0, r6, #8
   117d8:	ldr	r6, [r0]
   117dc:	cmp	r6, #0
   117e0:	bne	117b0 <avl_pesquisa_impl@@Base+0x1c>
   117e4:	mov	r0, r4
   117e8:	pop	{r4, r5, r6, sl, fp, pc}
   117ec:	mov	r4, r6
   117f0:	mov	r0, r4
   117f4:	pop	{r4, r5, r6, sl, fp, pc}

000117f8 <avl_insere@@Base>:
   117f8:	push	{r4, sl, fp, lr}
   117fc:	add	fp, sp, #8
   11800:	mov	r4, r0
   11804:	mvn	r0, #0
   11808:	cmp	r4, #0
   1180c:	cmpne	r1, #0
   11810:	bne	11818 <avl_insere@@Base+0x20>
   11814:	pop	{r4, sl, fp, pc}
   11818:	ldr	r0, [r4]
   1181c:	bl	1182c <avl_insere_impl@@Base>
   11820:	str	r0, [r4]
   11824:	mov	r0, #0
   11828:	pop	{r4, sl, fp, pc}

0001182c <avl_insere_impl@@Base>:
   1182c:	push	{r4, r5, r6, sl, fp, lr}
   11830:	add	fp, sp, #16
   11834:	mov	r6, r1
   11838:	cmp	r0, #0
   1183c:	beq	1186c <avl_insere_impl@@Base+0x40>
   11840:	ldr	r1, [r0]
   11844:	mov	r4, r0
   11848:	mov	r0, r6
   1184c:	bl	10e78 <strcmp@plt>
   11850:	cmn	r0, #1
   11854:	bgt	118b4 <avl_insere_impl@@Base+0x88>
   11858:	ldr	r0, [r4, #4]
   1185c:	mov	r1, r6
   11860:	bl	1182c <avl_insere_impl@@Base>
   11864:	str	r0, [r4, #4]
   11868:	b	118d0 <avl_insere_impl@@Base+0xa4>
   1186c:	mov	r0, #20
   11870:	bl	10ecc <malloc@plt>
   11874:	mov	r5, r0
   11878:	mov	r0, r6
   1187c:	bl	10ef0 <strlen@plt>
   11880:	add	r0, r0, #1
   11884:	bl	10ecc <malloc@plt>
   11888:	mov	r1, r6
   1188c:	str	r0, [r5]
   11890:	bl	10eb4 <strcpy@plt>
   11894:	mov	r0, #0
   11898:	mov	r1, #1
   1189c:	str	r0, [r5, #4]
   118a0:	str	r0, [r5, #8]
   118a4:	str	r0, [r5, #12]
   118a8:	mov	r0, r5
   118ac:	str	r1, [r5, #16]
   118b0:	pop	{r4, r5, r6, sl, fp, pc}
   118b4:	cmp	r0, #0
   118b8:	beq	11b08 <avl_insere_impl@@Base+0x2dc>
   118bc:	ldr	r0, [r4, #8]
   118c0:	mov	r1, r6
   118c4:	bl	1182c <avl_insere_impl@@Base>
   118c8:	str	r0, [r4, #8]
   118cc:	ldr	r0, [r4, #4]
   118d0:	cmp	r0, #0
   118d4:	ldr	r2, [r4, #8]
   118d8:	ldrne	r1, [r0, #12]
   118dc:	mvneq	r1, #0
   118e0:	cmp	r2, #0
   118e4:	beq	11908 <avl_insere_impl@@Base+0xdc>
   118e8:	ldr	r3, [r2, #12]
   118ec:	cmp	r1, r3
   118f0:	movgt	r3, r1
   118f4:	mov	r1, r4
   118f8:	add	r3, r3, #1
   118fc:	str	r3, [r1, #12]!
   11900:	ldr	r3, [r2, #12]
   11904:	b	1191c <avl_insere_impl@@Base+0xf0>
   11908:	orr	r1, r1, r1, asr #31
   1190c:	add	r3, r1, #1
   11910:	mov	r1, r4
   11914:	str	r3, [r1, #12]!
   11918:	mvn	r3, #0
   1191c:	cmp	r0, #0
   11920:	ldrne	r6, [r0, #12]
   11924:	mvneq	r6, #0
   11928:	sub	r3, r3, r6
   1192c:	cmp	r3, #2
   11930:	blt	11a14 <avl_insere_impl@@Base+0x1e8>
   11934:	cmp	r2, #0
   11938:	beq	11b1c <avl_insere_impl@@Base+0x2f0>
   1193c:	ldr	r0, [r2, #8]
   11940:	mvn	r6, #0
   11944:	mvn	r3, #0
   11948:	cmp	r0, #0
   1194c:	ldrne	r6, [r0, #12]
   11950:	mov	r0, r2
   11954:	ldr	r5, [r0, #4]!
   11958:	cmp	r5, #0
   1195c:	ldrne	r3, [r5, #12]
   11960:	cmp	r6, r3
   11964:	bge	11b24 <avl_insere_impl@@Base+0x2f8>
   11968:	ldr	r6, [r5, #8]
   1196c:	str	r2, [r5, #8]
   11970:	mvn	r3, #0
   11974:	mvn	r0, #0
   11978:	str	r6, [r2, #4]
   1197c:	cmp	r6, #0
   11980:	ldrne	r3, [r6, #12]
   11984:	ldr	r6, [r2, #8]
   11988:	cmp	r6, #0
   1198c:	ldrne	r0, [r6, #12]
   11990:	mvn	r6, #0
   11994:	cmp	r3, r0
   11998:	movgt	r0, r3
   1199c:	add	r3, r0, #1
   119a0:	mvn	r0, #0
   119a4:	str	r3, [r2, #12]
   119a8:	ldr	r2, [r5, #4]
   119ac:	cmp	r2, #0
   119b0:	ldrne	r6, [r2, #12]
   119b4:	str	r4, [r5, #4]
   119b8:	cmp	r6, r3
   119bc:	movgt	r3, r6
   119c0:	mvn	r6, #0
   119c4:	add	r3, r3, #1
   119c8:	str	r3, [r5, #12]
   119cc:	str	r2, [r4, #8]
   119d0:	ldr	r3, [r4, #4]
   119d4:	cmp	r3, #0
   119d8:	ldrne	r0, [r3, #12]
   119dc:	cmp	r2, #0
   119e0:	mvn	r3, #0
   119e4:	ldrne	r6, [r2, #12]
   119e8:	cmp	r0, r6
   119ec:	movgt	r6, r0
   119f0:	add	r0, r6, #1
   119f4:	str	r0, [r1]
   119f8:	ldr	r1, [r5, #8]
   119fc:	cmp	r1, #0
   11a00:	ldrne	r3, [r1, #12]
   11a04:	cmp	r0, r3
   11a08:	movgt	r3, r0
   11a0c:	add	r0, r3, #1
   11a10:	b	11afc <avl_insere_impl@@Base+0x2d0>
   11a14:	cmn	r3, #2
   11a18:	movgt	r0, r4
   11a1c:	popgt	{r4, r5, r6, sl, fp, pc}
   11a20:	cmp	r0, #0
   11a24:	beq	11b80 <avl_insere_impl@@Base+0x354>
   11a28:	mov	r2, r0
   11a2c:	ldr	r3, [r0, #4]
   11a30:	mvn	r6, #0
   11a34:	mvn	ip, #0
   11a38:	ldr	r5, [r2, #8]!
   11a3c:	cmp	r5, #0
   11a40:	ldrne	r6, [r5, #12]
   11a44:	cmp	r3, #0
   11a48:	ldrne	ip, [r3, #12]
   11a4c:	cmp	r6, ip
   11a50:	ble	11b88 <avl_insere_impl@@Base+0x35c>
   11a54:	ldr	r3, [r5, #4]
   11a58:	str	r0, [r5, #4]
   11a5c:	mvn	r6, #0
   11a60:	mvn	r2, #0
   11a64:	str	r3, [r0, #8]
   11a68:	ldr	ip, [r0, #4]
   11a6c:	cmp	ip, #0
   11a70:	ldrne	r6, [ip, #12]
   11a74:	cmp	r3, #0
   11a78:	ldrne	r2, [r3, #12]
   11a7c:	cmp	r6, r2
   11a80:	movgt	r2, r6
   11a84:	mvn	r6, #0
   11a88:	add	r3, r2, #1
   11a8c:	str	r3, [r0, #12]
   11a90:	mvn	r0, #0
   11a94:	ldr	r2, [r5, #8]
   11a98:	cmp	r2, #0
   11a9c:	ldrne	r6, [r2, #12]
   11aa0:	str	r4, [r5, #8]
   11aa4:	cmp	r3, r6
   11aa8:	movgt	r6, r3
   11aac:	cmp	r2, #0
   11ab0:	add	r3, r6, #1
   11ab4:	str	r3, [r5, #12]
   11ab8:	str	r2, [r4, #4]
   11abc:	mvn	r3, #0
   11ac0:	ldr	r6, [r4, #8]
   11ac4:	ldrne	r0, [r2, #12]
   11ac8:	mvn	r2, #0
   11acc:	cmp	r6, #0
   11ad0:	ldrne	r3, [r6, #12]
   11ad4:	cmp	r0, r3
   11ad8:	movgt	r3, r0
   11adc:	add	r0, r3, #1
   11ae0:	str	r0, [r1]
   11ae4:	ldr	r1, [r5, #4]
   11ae8:	cmp	r1, #0
   11aec:	ldrne	r2, [r1, #12]
   11af0:	cmp	r2, r0
   11af4:	movgt	r0, r2
   11af8:	add	r0, r0, #1
   11afc:	str	r0, [r5, #12]
   11b00:	mov	r0, r5
   11b04:	pop	{r4, r5, r6, sl, fp, pc}
   11b08:	ldr	r0, [r4, #16]
   11b0c:	add	r0, r0, #1
   11b10:	str	r0, [r4, #16]
   11b14:	mov	r0, r4
   11b18:	pop	{r4, r5, r6, sl, fp, pc}
   11b1c:	mov	r0, #4
   11b20:	ldr	r5, [r0]
   11b24:	str	r4, [r0]
   11b28:	str	r5, [r4, #8]
   11b2c:	mvn	r3, #0
   11b30:	mvn	r0, #0
   11b34:	ldr	r6, [r4, #4]
   11b38:	cmp	r6, #0
   11b3c:	ldrne	r3, [r6, #12]
   11b40:	cmp	r5, #0
   11b44:	ldrne	r0, [r5, #12]
   11b48:	cmp	r3, r0
   11b4c:	movgt	r0, r3
   11b50:	add	r0, r0, #1
   11b54:	str	r0, [r1]
   11b58:	ldr	r1, [r2, #8]
   11b5c:	cmp	r1, #0
   11b60:	ldrne	r1, [r1, #12]
   11b64:	mvneq	r1, #0
   11b68:	cmp	r0, r1
   11b6c:	movgt	r1, r0
   11b70:	add	r0, r1, #1
   11b74:	str	r0, [r2, #12]
   11b78:	mov	r0, r2
   11b7c:	pop	{r4, r5, r6, sl, fp, pc}
   11b80:	mov	r2, #8
   11b84:	ldr	r5, [r2]
   11b88:	str	r4, [r2]
   11b8c:	str	r5, [r4, #4]
   11b90:	cmp	r5, #0
   11b94:	mvn	r3, #0
   11b98:	mvn	r2, #0
   11b9c:	ldr	r6, [r4, #8]
   11ba0:	ldrne	r3, [r5, #12]
   11ba4:	cmp	r6, #0
   11ba8:	ldrne	r2, [r6, #12]
   11bac:	cmp	r3, r2
   11bb0:	movgt	r2, r3
   11bb4:	add	r2, r2, #1
   11bb8:	str	r2, [r1]
   11bbc:	ldr	r1, [r0, #4]
   11bc0:	cmp	r1, #0
   11bc4:	ldrne	r1, [r1, #12]
   11bc8:	mvneq	r1, #0
   11bcc:	cmp	r1, r2
   11bd0:	movgt	r2, r1
   11bd4:	add	r1, r2, #1
   11bd8:	str	r1, [r0, #12]
   11bdc:	pop	{r4, r5, r6, sl, fp, pc}

00011be0 <avl_remove@@Base>:
   11be0:	push	{r4, sl, fp, lr}
   11be4:	add	fp, sp, #8
   11be8:	mov	r4, r0
   11bec:	mvn	r0, #0
   11bf0:	cmp	r4, #0
   11bf4:	cmpne	r1, #0
   11bf8:	bne	11c00 <avl_remove@@Base+0x20>
   11bfc:	pop	{r4, sl, fp, pc}
   11c00:	ldr	r0, [r4]
   11c04:	bl	11310 <avl_remove_impl@@Base>
   11c08:	str	r0, [r4]
   11c0c:	mov	r0, #0
   11c10:	pop	{r4, sl, fp, pc}

00011c14 <avl_min@@Base>:
   11c14:	cmp	r0, #0
   11c18:	moveq	r0, #0
   11c1c:	bxeq	lr
   11c20:	ldr	r0, [r0]
   11c24:	mov	r1, r0
   11c28:	ldr	r0, [r0, #4]
   11c2c:	cmp	r0, #0
   11c30:	bne	11c24 <avl_min@@Base+0x10>
   11c34:	ldr	r0, [r1]
   11c38:	bx	lr

00011c3c <avl_no_valormin@@Base>:
   11c3c:	mov	r1, r0
   11c40:	ldr	r0, [r0, #4]
   11c44:	cmp	r0, #0
   11c48:	bne	11c3c <avl_no_valormin@@Base>
   11c4c:	mov	r0, r1
   11c50:	bx	lr

00011c54 <avl_max@@Base>:
   11c54:	cmp	r0, #0
   11c58:	moveq	r0, #0
   11c5c:	bxeq	lr
   11c60:	ldr	r0, [r0]
   11c64:	mov	r1, r0
   11c68:	ldr	r0, [r0, #8]
   11c6c:	cmp	r0, #0
   11c70:	bne	11c64 <avl_max@@Base+0x10>
   11c74:	ldr	r0, [r1]
   11c78:	bx	lr

00011c7c <avl_no_valormax@@Base>:
   11c7c:	mov	r1, r0
   11c80:	ldr	r0, [r0, #8]
   11c84:	cmp	r0, #0
   11c88:	bne	11c7c <avl_no_valormax@@Base>
   11c8c:	mov	r0, r1
   11c90:	bx	lr

00011c94 <avl_imprime@@Base>:
   11c94:	cmp	r0, #0
   11c98:	bxeq	lr
   11c9c:	push	{fp, lr}
   11ca0:	mov	fp, sp
   11ca4:	ldr	r0, [r0]
   11ca8:	bl	11cb8 <avl_preordem_impl@@Base>
   11cac:	mov	r0, #10
   11cb0:	pop	{fp, lr}
   11cb4:	b	10efc <putchar@plt>

00011cb8 <avl_preordem_impl@@Base>:
   11cb8:	push	{r4, r5, fp, lr}
   11cbc:	add	fp, sp, #8
   11cc0:	cmp	r0, #0
   11cc4:	popeq	{r4, r5, fp, pc}
   11cc8:	ldr	r5, [pc, #44]	; 11cfc <avl_preordem_impl@@Base+0x44>
   11ccc:	mov	r4, r0
   11cd0:	add	r5, pc, r5
   11cd4:	ldr	r1, [r4]
   11cd8:	ldr	r2, [r4, #16]
   11cdc:	mov	r0, r5
   11ce0:	bl	10e84 <printf@plt>
   11ce4:	ldr	r0, [r4, #4]
   11ce8:	bl	11cb8 <avl_preordem_impl@@Base>
   11cec:	ldr	r4, [r4, #8]
   11cf0:	cmp	r4, #0
   11cf4:	bne	11cd4 <avl_preordem_impl@@Base+0x1c>
   11cf8:	pop	{r4, r5, fp, pc}
   11cfc:	andeq	r0, r0, r5, asr #14

00011d00 <avl_altura@@Base>:
   11d00:	cmp	r0, #0
   11d04:	ldrne	r0, [r0, #12]
   11d08:	mvneq	r0, #0
   11d0c:	bx	lr

00011d10 <max@@Base>:
   11d10:	cmp	r0, r1
   11d14:	movle	r0, r1
   11d18:	bx	lr

00011d1c <avl_novo_no@@Base>:
   11d1c:	push	{r4, r5, fp, lr}
   11d20:	add	fp, sp, #8
   11d24:	mov	r4, r0
   11d28:	mov	r0, #20
   11d2c:	bl	10ecc <malloc@plt>
   11d30:	mov	r5, r0
   11d34:	mov	r0, r4
   11d38:	bl	10ef0 <strlen@plt>
   11d3c:	add	r0, r0, #1
   11d40:	bl	10ecc <malloc@plt>
   11d44:	mov	r1, r4
   11d48:	str	r0, [r5]
   11d4c:	bl	10eb4 <strcpy@plt>
   11d50:	mov	r0, #0
   11d54:	mov	r1, #1
   11d58:	str	r0, [r5, #4]
   11d5c:	str	r0, [r5, #8]
   11d60:	str	r0, [r5, #12]
   11d64:	mov	r0, r5
   11d68:	str	r1, [r5, #16]
   11d6c:	pop	{r4, r5, fp, pc}

00011d70 <roda_direita@@Base>:
   11d70:	mov	r1, r0
   11d74:	ldr	r0, [r0, #4]
   11d78:	mvn	ip, #0
   11d7c:	mvn	r2, #0
   11d80:	ldr	r3, [r0, #8]
   11d84:	str	r1, [r0, #8]
   11d88:	str	r3, [r1, #4]
   11d8c:	cmp	r3, #0
   11d90:	ldrne	ip, [r3, #12]
   11d94:	ldr	r3, [r1, #8]
   11d98:	cmp	r3, #0
   11d9c:	ldrne	r2, [r3, #12]
   11da0:	cmp	ip, r2
   11da4:	movgt	r2, ip
   11da8:	add	r2, r2, #1
   11dac:	str	r2, [r1, #12]
   11db0:	ldr	r1, [r0, #4]
   11db4:	cmp	r1, #0
   11db8:	ldrne	r1, [r1, #12]
   11dbc:	mvneq	r1, #0
   11dc0:	cmp	r1, r2
   11dc4:	movgt	r2, r1
   11dc8:	add	r1, r2, #1
   11dcc:	str	r1, [r0, #12]
   11dd0:	bx	lr

00011dd4 <roda_esquerda@@Base>:
   11dd4:	push	{fp, lr}
   11dd8:	mov	fp, sp
   11ddc:	mov	r1, r0
   11de0:	ldr	r0, [r0, #8]
   11de4:	mvn	r3, #0
   11de8:	mvn	r2, #0
   11dec:	ldr	ip, [r0, #4]
   11df0:	str	r1, [r0, #4]
   11df4:	str	ip, [r1, #8]
   11df8:	ldr	lr, [r1, #4]
   11dfc:	cmp	lr, #0
   11e00:	ldrne	r3, [lr, #12]
   11e04:	cmp	ip, #0
   11e08:	ldrne	r2, [ip, #12]
   11e0c:	cmp	r3, r2
   11e10:	movgt	r2, r3
   11e14:	add	r2, r2, #1
   11e18:	str	r2, [r1, #12]
   11e1c:	ldr	r1, [r0, #8]
   11e20:	cmp	r1, #0
   11e24:	ldrne	r1, [r1, #12]
   11e28:	mvneq	r1, #0
   11e2c:	cmp	r2, r1
   11e30:	movgt	r1, r2
   11e34:	add	r1, r1, #1
   11e38:	str	r1, [r0, #12]
   11e3c:	pop	{fp, pc}

00011e40 <calc_balanceamento@@Base>:
   11e40:	cmp	r0, #0
   11e44:	moveq	r0, #0
   11e48:	bxeq	lr
   11e4c:	ldr	r3, [r0, #8]
   11e50:	ldr	r0, [r0, #4]
   11e54:	mvn	r2, #0
   11e58:	mvn	r1, #0
   11e5c:	cmp	r3, #0
   11e60:	ldrne	r2, [r3, #12]
   11e64:	cmp	r0, #0
   11e68:	ldrne	r1, [r0, #12]
   11e6c:	sub	r0, r2, r1
   11e70:	bx	lr

00011e74 <bst_nova@@Base>:
   11e74:	push	{fp, lr}
   11e78:	mov	fp, sp
   11e7c:	mov	r0, #4
   11e80:	bl	10ecc <malloc@plt>
   11e84:	cmp	r0, #0
   11e88:	moveq	r0, #0
   11e8c:	movne	r1, #0
   11e90:	strne	r1, [r0]
   11e94:	pop	{fp, pc}

00011e98 <bst_apaga@@Base>:
   11e98:	push	{r4, sl, fp, lr}
   11e9c:	add	fp, sp, #8
   11ea0:	mov	r4, r0
   11ea4:	ldr	r0, [r0]
   11ea8:	cmp	r0, #0
   11eac:	beq	11ec4 <bst_apaga@@Base+0x2c>
   11eb0:	ldr	r1, [r0]
   11eb4:	bl	11ed0 <bst_remove_impl@@Base>
   11eb8:	str	r0, [r4]
   11ebc:	cmp	r0, #0
   11ec0:	bne	11eb0 <bst_apaga@@Base+0x18>
   11ec4:	mov	r0, r4
   11ec8:	pop	{r4, sl, fp, lr}
   11ecc:	b	10e9c <free@plt>

00011ed0 <bst_remove_impl@@Base>:
   11ed0:	push	{r4, r5, r6, r7, fp, lr}
   11ed4:	add	fp, sp, #16
   11ed8:	cmp	r0, #0
   11edc:	moveq	r7, #0
   11ee0:	moveq	r0, r7
   11ee4:	popeq	{r4, r5, r6, r7, fp, pc}
   11ee8:	ldr	r5, [r0]
   11eec:	mov	r4, r0
   11ef0:	mov	r6, r1
   11ef4:	mov	r0, r1
   11ef8:	mov	r1, r5
   11efc:	bl	10e78 <strcmp@plt>
   11f00:	cmn	r0, #1
   11f04:	bgt	11f20 <bst_remove_impl@@Base+0x50>
   11f08:	ldr	r0, [r4, #4]
   11f0c:	mov	r1, r6
   11f10:	bl	11ed0 <bst_remove_impl@@Base>
   11f14:	str	r0, [r4, #4]
   11f18:	mov	r0, r4
   11f1c:	pop	{r4, r5, r6, r7, fp, pc}
   11f20:	cmp	r0, #0
   11f24:	beq	11f40 <bst_remove_impl@@Base+0x70>
   11f28:	ldr	r0, [r4, #8]
   11f2c:	mov	r1, r6
   11f30:	bl	11ed0 <bst_remove_impl@@Base>
   11f34:	str	r0, [r4, #8]
   11f38:	mov	r0, r4
   11f3c:	pop	{r4, r5, r6, r7, fp, pc}
   11f40:	ldr	r6, [r4, #4]
   11f44:	ldr	r0, [r4, #8]
   11f48:	cmp	r6, #0
   11f4c:	beq	11f94 <bst_remove_impl@@Base+0xc4>
   11f50:	cmp	r0, #0
   11f54:	beq	11fa0 <bst_remove_impl@@Base+0xd0>
   11f58:	mov	r6, r0
   11f5c:	ldr	r0, [r0, #4]
   11f60:	cmp	r0, #0
   11f64:	bne	11f58 <bst_remove_impl@@Base+0x88>
   11f68:	ldr	r0, [r6]
   11f6c:	bl	10ef0 <strlen@plt>
   11f70:	add	r1, r0, #1
   11f74:	mov	r0, r5
   11f78:	bl	10ea8 <realloc@plt>
   11f7c:	str	r0, [r4]
   11f80:	ldr	r1, [r6]
   11f84:	bl	10eb4 <strcpy@plt>
   11f88:	ldr	r0, [r4, #8]
   11f8c:	ldr	r1, [r6]
   11f90:	b	11f30 <bst_remove_impl@@Base+0x60>
   11f94:	cmp	r0, #0
   11f98:	mov	r6, r0
   11f9c:	beq	11fdc <bst_remove_impl@@Base+0x10c>
   11fa0:	ldr	r0, [r6]
   11fa4:	bl	10ef0 <strlen@plt>
   11fa8:	add	r1, r0, #1
   11fac:	mov	r0, r5
   11fb0:	bl	10ea8 <realloc@plt>
   11fb4:	str	r0, [r4]
   11fb8:	ldr	r1, [r6]
   11fbc:	bl	10eb4 <strcpy@plt>
   11fc0:	ldr	r0, [r6, #4]
   11fc4:	mov	r7, r4
   11fc8:	str	r0, [r4, #4]
   11fcc:	ldr	r0, [r6, #8]
   11fd0:	str	r0, [r4, #8]
   11fd4:	ldr	r5, [r6]
   11fd8:	b	11fe4 <bst_remove_impl@@Base+0x114>
   11fdc:	mov	r7, #0
   11fe0:	mov	r6, r4
   11fe4:	mov	r0, r5
   11fe8:	bl	10e9c <free@plt>
   11fec:	mov	r0, r6
   11ff0:	bl	10e9c <free@plt>
   11ff4:	mov	r0, r7
   11ff8:	pop	{r4, r5, r6, r7, fp, pc}

00011ffc <bst_pesquisa@@Base>:
   11ffc:	push	{r4, r5, r6, sl, fp, lr}
   12000:	add	fp, sp, #16
   12004:	cmp	r0, #0
   12008:	mov	r4, #0
   1200c:	movne	r5, r1
   12010:	cmpne	r1, #0
   12014:	beq	12054 <bst_pesquisa@@Base+0x58>
   12018:	b	12020 <bst_pesquisa@@Base+0x24>
   1201c:	add	r0, r6, #4
   12020:	ldr	r6, [r0]
   12024:	cmp	r6, #0
   12028:	beq	12054 <bst_pesquisa@@Base+0x58>
   1202c:	ldr	r1, [r6]
   12030:	mov	r0, r5
   12034:	bl	10e78 <strcmp@plt>
   12038:	cmn	r0, #1
   1203c:	ble	1201c <bst_pesquisa@@Base+0x20>
   12040:	cmp	r0, #0
   12044:	beq	12050 <bst_pesquisa@@Base+0x54>
   12048:	add	r0, r6, #8
   1204c:	b	12020 <bst_pesquisa@@Base+0x24>
   12050:	mov	r4, r6
   12054:	mov	r0, r4
   12058:	pop	{r4, r5, r6, sl, fp, pc}

0001205c <bst_pesquisa_impl@@Base>:
   1205c:	push	{r4, r5, r6, sl, fp, lr}
   12060:	add	fp, sp, #16
   12064:	mov	r4, #0
   12068:	cmp	r0, #0
   1206c:	beq	120ac <bst_pesquisa_impl@@Base+0x50>
   12070:	mov	r5, r1
   12074:	mov	r6, r0
   12078:	ldr	r1, [r6]
   1207c:	mov	r0, r5
   12080:	bl	10e78 <strcmp@plt>
   12084:	cmn	r0, #1
   12088:	bgt	12094 <bst_pesquisa_impl@@Base+0x38>
   1208c:	add	r0, r6, #4
   12090:	b	120a0 <bst_pesquisa_impl@@Base+0x44>
   12094:	cmp	r0, #0
   12098:	beq	120b4 <bst_pesquisa_impl@@Base+0x58>
   1209c:	add	r0, r6, #8
   120a0:	ldr	r6, [r0]
   120a4:	cmp	r6, #0
   120a8:	bne	12078 <bst_pesquisa_impl@@Base+0x1c>
   120ac:	mov	r0, r4
   120b0:	pop	{r4, r5, r6, sl, fp, pc}
   120b4:	mov	r4, r6
   120b8:	mov	r0, r4
   120bc:	pop	{r4, r5, r6, sl, fp, pc}

000120c0 <bst_insere@@Base>:
   120c0:	push	{r4, sl, fp, lr}
   120c4:	add	fp, sp, #8
   120c8:	mov	r4, r0
   120cc:	mvn	r0, #0
   120d0:	cmp	r4, #0
   120d4:	cmpne	r1, #0
   120d8:	bne	120e0 <bst_insere@@Base+0x20>
   120dc:	pop	{r4, sl, fp, pc}
   120e0:	ldr	r0, [r4]
   120e4:	bl	120f4 <bst_insere_impl@@Base>
   120e8:	str	r0, [r4]
   120ec:	mov	r0, #0
   120f0:	pop	{r4, sl, fp, pc}

000120f4 <bst_insere_impl@@Base>:
   120f4:	push	{r4, r5, fp, lr}
   120f8:	add	fp, sp, #8
   120fc:	mov	r5, r1
   12100:	cmp	r0, #0
   12104:	beq	12138 <bst_insere_impl@@Base+0x44>
   12108:	ldr	r1, [r0]
   1210c:	mov	r4, r0
   12110:	mov	r0, r5
   12114:	bl	10e78 <strcmp@plt>
   12118:	cmn	r0, #1
   1211c:	bgt	1216c <bst_insere_impl@@Base+0x78>
   12120:	ldr	r0, [r4, #4]
   12124:	mov	r1, r5
   12128:	bl	120f4 <bst_insere_impl@@Base>
   1212c:	str	r0, [r4, #4]
   12130:	mov	r0, r4
   12134:	pop	{r4, r5, fp, pc}
   12138:	mov	r0, #12
   1213c:	bl	10ecc <malloc@plt>
   12140:	mov	r4, r0
   12144:	mov	r0, r5
   12148:	bl	10ef0 <strlen@plt>
   1214c:	add	r0, r0, #1
   12150:	bl	10ecc <malloc@plt>
   12154:	mov	r1, r5
   12158:	str	r0, [r4]
   1215c:	bl	10eb4 <strcpy@plt>
   12160:	mov	r0, #0
   12164:	str	r0, [r4, #4]
   12168:	b	12180 <bst_insere_impl@@Base+0x8c>
   1216c:	cmp	r0, #0
   12170:	beq	12184 <bst_insere_impl@@Base+0x90>
   12174:	ldr	r0, [r4, #8]
   12178:	mov	r1, r5
   1217c:	bl	120f4 <bst_insere_impl@@Base>
   12180:	str	r0, [r4, #8]
   12184:	mov	r0, r4
   12188:	pop	{r4, r5, fp, pc}

0001218c <bst_remove@@Base>:
   1218c:	push	{r4, sl, fp, lr}
   12190:	add	fp, sp, #8
   12194:	mov	r4, r0
   12198:	mvn	r0, #0
   1219c:	cmp	r4, #0
   121a0:	cmpne	r1, #0
   121a4:	bne	121ac <bst_remove@@Base+0x20>
   121a8:	pop	{r4, sl, fp, pc}
   121ac:	ldr	r0, [r4]
   121b0:	bl	11ed0 <bst_remove_impl@@Base>
   121b4:	str	r0, [r4]
   121b8:	mov	r0, #0
   121bc:	pop	{r4, sl, fp, pc}

000121c0 <bst_min@@Base>:
   121c0:	cmp	r0, #0
   121c4:	moveq	r0, #0
   121c8:	bxeq	lr
   121cc:	ldr	r0, [r0]
   121d0:	mov	r1, r0
   121d4:	ldr	r0, [r0, #4]
   121d8:	cmp	r0, #0
   121dc:	bne	121d0 <bst_min@@Base+0x10>
   121e0:	ldr	r0, [r1]
   121e4:	bx	lr

000121e8 <bst_no_valormin@@Base>:
   121e8:	mov	r1, r0
   121ec:	ldr	r0, [r0, #4]
   121f0:	cmp	r0, #0
   121f4:	bne	121e8 <bst_no_valormin@@Base>
   121f8:	mov	r0, r1
   121fc:	bx	lr

00012200 <bst_max@@Base>:
   12200:	cmp	r0, #0
   12204:	moveq	r0, #0
   12208:	bxeq	lr
   1220c:	ldr	r0, [r0]
   12210:	mov	r1, r0
   12214:	ldr	r0, [r0, #8]
   12218:	cmp	r0, #0
   1221c:	bne	12210 <bst_max@@Base+0x10>
   12220:	ldr	r0, [r1]
   12224:	bx	lr

00012228 <bst_no_valormax@@Base>:
   12228:	mov	r1, r0
   1222c:	ldr	r0, [r0, #8]
   12230:	cmp	r0, #0
   12234:	bne	12228 <bst_no_valormax@@Base>
   12238:	mov	r0, r1
   1223c:	bx	lr

00012240 <bst_imprime@@Base>:
   12240:	cmp	r0, #0
   12244:	bxeq	lr
   12248:	push	{r4, sl, fp, lr}
   1224c:	add	fp, sp, #8
   12250:	mov	r4, r0
   12254:	ldr	r0, [pc, #24]	; 12274 <bst_imprime@@Base+0x34>
   12258:	add	r0, pc, r0
   1225c:	bl	10e84 <printf@plt>
   12260:	ldr	r0, [r4]
   12264:	bl	12278 <bst_preordem_impl@@Base>
   12268:	mov	r0, #10
   1226c:	pop	{r4, sl, fp, lr}
   12270:	b	10efc <putchar@plt>
   12274:	andeq	r0, r0, r4, asr #3

00012278 <bst_preordem_impl@@Base>:
   12278:	push	{r4, r5, fp, lr}
   1227c:	add	fp, sp, #8
   12280:	cmp	r0, #0
   12284:	popeq	{r4, r5, fp, pc}
   12288:	ldr	r5, [pc, #40]	; 122b8 <bst_preordem_impl@@Base+0x40>
   1228c:	mov	r4, r0
   12290:	add	r5, pc, r5
   12294:	ldr	r1, [r4]
   12298:	mov	r0, r5
   1229c:	bl	10e84 <printf@plt>
   122a0:	ldr	r0, [r4, #4]
   122a4:	bl	12278 <bst_preordem_impl@@Base>
   122a8:	ldr	r4, [r4, #8]
   122ac:	cmp	r4, #0
   122b0:	bne	12294 <bst_preordem_impl@@Base+0x1c>
   122b4:	pop	{r4, r5, fp, pc}
   122b8:	muleq	r0, r7, r1

000122bc <bst_novo_no@@Base>:
   122bc:	push	{r4, r5, fp, lr}
   122c0:	add	fp, sp, #8
   122c4:	mov	r4, r0
   122c8:	mov	r0, #12
   122cc:	bl	10ecc <malloc@plt>
   122d0:	mov	r5, r0
   122d4:	mov	r0, r4
   122d8:	bl	10ef0 <strlen@plt>
   122dc:	add	r0, r0, #1
   122e0:	bl	10ecc <malloc@plt>
   122e4:	mov	r1, r4
   122e8:	str	r0, [r5]
   122ec:	bl	10eb4 <strcpy@plt>
   122f0:	mov	r0, #0
   122f4:	str	r0, [r5, #4]
   122f8:	str	r0, [r5, #8]
   122fc:	mov	r0, r5
   12300:	pop	{r4, r5, fp, pc}

00012304 <bst_altura@@Base>:
   12304:	push	{r4, r5, fp, lr}
   12308:	add	fp, sp, #8
   1230c:	cmp	r0, #0
   12310:	mvneq	r0, #0
   12314:	popeq	{r4, r5, fp, pc}
   12318:	ldmib	r0, {r1, r4}
   1231c:	orrs	r0, r4, r1
   12320:	mov	r0, #0
   12324:	popeq	{r4, r5, fp, pc}
   12328:	mov	r0, r1
   1232c:	bl	12304 <bst_altura@@Base>
   12330:	mov	r5, r0
   12334:	mov	r0, r4
   12338:	bl	12304 <bst_altura@@Base>
   1233c:	cmp	r5, r0
   12340:	addgt	r0, r5, #1
   12344:	popgt	{r4, r5, fp, pc}
   12348:	add	r0, r0, #1
   1234c:	pop	{r4, r5, fp, pc}

00012350 <__libc_csu_init@@Base>:
   12350:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12354:	mov	r7, r0
   12358:	ldr	r6, [pc, #72]	; 123a8 <__libc_csu_init@@Base+0x58>
   1235c:	ldr	r5, [pc, #72]	; 123ac <__libc_csu_init@@Base+0x5c>
   12360:	add	r6, pc, r6
   12364:	add	r5, pc, r5
   12368:	sub	r6, r6, r5
   1236c:	mov	r8, r1
   12370:	mov	r9, r2
   12374:	bl	10e58 <strcmp@plt-0x20>
   12378:	asrs	r6, r6, #2
   1237c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12380:	mov	r4, #0
   12384:	add	r4, r4, #1
   12388:	ldr	r3, [r5], #4
   1238c:	mov	r2, r9
   12390:	mov	r1, r8
   12394:	mov	r0, r7
   12398:	blx	r3
   1239c:	cmp	r6, r4
   123a0:	bne	12384 <__libc_csu_init@@Base+0x34>
   123a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   123a8:	andeq	r0, r1, r4, lsr #23
   123ac:	muleq	r1, ip, fp

000123b0 <__libc_csu_fini@@Base>:
   123b0:	bx	lr

Disassembly of section .fini:

000123b4 <.fini>:
   123b4:	push	{r3, lr}
   123b8:	pop	{r3, pc}
