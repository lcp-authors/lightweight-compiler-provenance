
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

000109cc <.init>:
   109cc:	push	{r3, lr}
   109d0:	bl	10c60 <__assert_fail@plt+0xc4>
   109d4:	pop	{r3, pc}

Disassembly of section .plt:

000109d8 <calloc@plt-0x14>:
   109d8:	push	{lr}		; (str lr, [sp, #-4]!)
   109dc:	ldr	lr, [pc, #4]	; 109e8 <calloc@plt-0x4>
   109e0:	add	lr, pc, lr
   109e4:	ldr	pc, [lr, #8]!
   109e8:	andeq	r6, r1, r8, lsl r6

000109ec <calloc@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #90112	; 0x16000
   109f4:	ldr	pc, [ip, #1560]!	; 0x618

000109f8 <raise@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #90112	; 0x16000
   10a00:	ldr	pc, [ip, #1552]!	; 0x610

00010a04 <strcmp@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #90112	; 0x16000
   10a0c:	ldr	pc, [ip, #1544]!	; 0x608

00010a10 <printf@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #90112	; 0x16000
   10a18:	ldr	pc, [ip, #1536]!	; 0x600

00010a1c <fopen@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #90112	; 0x16000
   10a24:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a28 <free@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #90112	; 0x16000
   10a30:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a34 <utf8proc_get_property@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #90112	; 0x16000
   10a3c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a40 <fgets@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #90112	; 0x16000
   10a48:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a4c <utf8proc_encode_char@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #90112	; 0x16000
   10a54:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a58 <strdup@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #90112	; 0x16000
   10a60:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a64 <rewind@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #90112	; 0x16000
   10a6c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a70 <unlink@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #90112	; 0x16000
   10a78:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a7c <utf8proc_tolower@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #90112	; 0x16000
   10a84:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a88 <__xstat@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #90112	; 0x16000
   10a90:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a94 <fread@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #90112	; 0x16000
   10a9c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa0 <utf8proc_iterate@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #90112	; 0x16000
   10aa8:	ldr	pc, [ip, #1440]!	; 0x5a0

00010aac <malloc@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #90112	; 0x16000
   10ab4:	ldr	pc, [ip, #1432]!	; 0x598

00010ab8 <__libc_start_main@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #90112	; 0x16000
   10ac0:	ldr	pc, [ip, #1424]!	; 0x590

00010ac4 <__sysv_signal@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #90112	; 0x16000
   10acc:	ldr	pc, [ip, #1416]!	; 0x588

00010ad0 <__gmon_start__@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #90112	; 0x16000
   10ad8:	ldr	pc, [ip, #1408]!	; 0x580

00010adc <getpid@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #90112	; 0x16000
   10ae4:	ldr	pc, [ip, #1400]!	; 0x578

00010ae8 <exit@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #90112	; 0x16000
   10af0:	ldr	pc, [ip, #1392]!	; 0x570

00010af4 <utf8proc_category@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #90112	; 0x16000
   10afc:	ldr	pc, [ip, #1384]!	; 0x568

00010b00 <strlen@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #90112	; 0x16000
   10b08:	ldr	pc, [ip, #1376]!	; 0x560

00010b0c <fprintf@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #90112	; 0x16000
   10b14:	ldr	pc, [ip, #1368]!	; 0x558

00010b18 <__isoc99_sscanf@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #90112	; 0x16000
   10b20:	ldr	pc, [ip, #1360]!	; 0x550

00010b24 <fclose@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #90112	; 0x16000
   10b2c:	ldr	pc, [ip, #1352]!	; 0x548

00010b30 <utf8proc_NFC@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #90112	; 0x16000
   10b38:	ldr	pc, [ip, #1344]!	; 0x540

00010b3c <fputc@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #90112	; 0x16000
   10b44:	ldr	pc, [ip, #1336]!	; 0x538

00010b48 <sprintf@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #90112	; 0x16000
   10b50:	ldr	pc, [ip, #1328]!	; 0x530

00010b54 <atoi@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #90112	; 0x16000
   10b5c:	ldr	pc, [ip, #1320]!	; 0x528

00010b60 <utf8proc_errmsg@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #90112	; 0x16000
   10b68:	ldr	pc, [ip, #1312]!	; 0x520

00010b6c <fputs@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #90112	; 0x16000
   10b74:	ldr	pc, [ip, #1304]!	; 0x518

00010b78 <strncmp@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #90112	; 0x16000
   10b80:	ldr	pc, [ip, #1296]!	; 0x510

00010b84 <abort@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #90112	; 0x16000
   10b8c:	ldr	pc, [ip, #1288]!	; 0x508

00010b90 <getc@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #90112	; 0x16000
   10b98:	ldr	pc, [ip, #1280]!	; 0x500

00010b9c <__assert_fail@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #90112	; 0x16000
   10ba4:	ldr	pc, [ip, #1272]!	; 0x4f8

Disassembly of section .text:

00010ba8 <error@@Base-0x135c>:
   10ba8:	push	{r0, r1, r2, lr}
   10bac:	add	ip, sp, #8
   10bb0:	mov	r3, #0
   10bb4:	str	r0, [ip, #-4]!
   10bb8:	ldr	r2, [pc, #76]	; 10c0c <__assert_fail@plt+0x70>
   10bbc:	mov	r0, ip
   10bc0:	mov	r4, r1
   10bc4:	bl	12028 <error@@Base+0x124>
   10bc8:	ldr	r3, [sp, #4]
   10bcc:	cmp	r3, #2
   10bd0:	beq	10bdc <__assert_fail@plt+0x40>
   10bd4:	ldr	r0, [pc, #52]	; 10c10 <__assert_fail@plt+0x74>
   10bd8:	bl	11f04 <error@@Base>
   10bdc:	ldr	r2, [pc, #48]	; 10c14 <__assert_fail@plt+0x78>
   10be0:	ldr	r1, [r4]
   10be4:	ldr	r0, [pc, #44]	; 10c18 <__assert_fail@plt+0x7c>
   10be8:	bl	1225c <error@@Base+0x358>
   10bec:	ldr	r1, [pc, #36]	; 10c18 <__assert_fail@plt+0x7c>
   10bf0:	ldr	r0, [pc, #36]	; 10c1c <__assert_fail@plt+0x80>
   10bf4:	bl	118c4 <__assert_fail@plt+0xd28>
   10bf8:	ldr	r1, [r4, #4]
   10bfc:	ldr	r0, [pc, #28]	; 10c20 <__assert_fail@plt+0x84>
   10c00:	bl	11330 <__assert_fail@plt+0x794>
   10c04:	bl	10df8 <__assert_fail@plt+0x25c>
   10c08:	bl	11eac <__assert_fail@plt+0x1310>
   10c0c:	andeq	r2, r1, r4, asr sp
   10c10:	andeq	r2, r1, r8, ror sp
   10c14:	andeq	r7, r2, ip, lsr #1
   10c18:	andeq	r7, r2, ip, asr #2
   10c1c:	andeq	r7, r2, ip, asr r1
   10c20:	andeq	r7, r2, ip, ror #2
   10c24:	mov	fp, #0
   10c28:	mov	lr, #0
   10c2c:	pop	{r1}		; (ldr r1, [sp], #4)
   10c30:	mov	r2, sp
   10c34:	push	{r2}		; (str r2, [sp, #-4]!)
   10c38:	push	{r0}		; (str r0, [sp, #-4]!)
   10c3c:	ldr	ip, [pc, #16]	; 10c54 <__assert_fail@plt+0xb8>
   10c40:	push	{ip}		; (str ip, [sp, #-4]!)
   10c44:	ldr	r0, [pc, #12]	; 10c58 <__assert_fail@plt+0xbc>
   10c48:	ldr	r3, [pc, #12]	; 10c5c <__assert_fail@plt+0xc0>
   10c4c:	bl	10ab8 <__libc_start_main@plt>
   10c50:	bl	10b84 <abort@plt>
   10c54:	andeq	r2, r1, r8, lsr #26
   10c58:	andeq	r0, r1, r8, lsr #23
   10c5c:	andeq	r2, r1, r8, asr #25
   10c60:	ldr	r3, [pc, #20]	; 10c7c <__assert_fail@plt+0xe0>
   10c64:	ldr	r2, [pc, #20]	; 10c80 <__assert_fail@plt+0xe4>
   10c68:	add	r3, pc, r3
   10c6c:	ldr	r2, [r3, r2]
   10c70:	cmp	r2, #0
   10c74:	bxeq	lr
   10c78:	b	10ad0 <__gmon_start__@plt>
   10c7c:	muleq	r1, r0, r3
   10c80:	andeq	r0, r0, r0, lsr #1
   10c84:	ldr	r3, [pc, #28]	; 10ca8 <__assert_fail@plt+0x10c>
   10c88:	ldr	r0, [pc, #28]	; 10cac <__assert_fail@plt+0x110>
   10c8c:	sub	r3, r3, r0
   10c90:	cmp	r3, #6
   10c94:	bxls	lr
   10c98:	ldr	r3, [pc, #16]	; 10cb0 <__assert_fail@plt+0x114>
   10c9c:	cmp	r3, #0
   10ca0:	bxeq	lr
   10ca4:	bx	r3
   10ca8:	andeq	r7, r2, r3, asr #1
   10cac:	andeq	r7, r2, r0, asr #1
   10cb0:	andeq	r0, r0, r0
   10cb4:	ldr	r1, [pc, #36]	; 10ce0 <__assert_fail@plt+0x144>
   10cb8:	ldr	r0, [pc, #36]	; 10ce4 <__assert_fail@plt+0x148>
   10cbc:	sub	r1, r1, r0
   10cc0:	asr	r1, r1, #2
   10cc4:	add	r1, r1, r1, lsr #31
   10cc8:	asrs	r1, r1, #1
   10ccc:	bxeq	lr
   10cd0:	ldr	r3, [pc, #16]	; 10ce8 <__assert_fail@plt+0x14c>
   10cd4:	cmp	r3, #0
   10cd8:	bxeq	lr
   10cdc:	bx	r3
   10ce0:	andeq	r7, r2, r0, asr #1
   10ce4:	andeq	r7, r2, r0, asr #1
   10ce8:	andeq	r0, r0, r0
   10cec:	push	{r4, lr}
   10cf0:	ldr	r4, [pc, #24]	; 10d10 <__assert_fail@plt+0x174>
   10cf4:	ldrb	r3, [r4]
   10cf8:	cmp	r3, #0
   10cfc:	popne	{r4, pc}
   10d00:	bl	10c84 <__assert_fail@plt+0xe8>
   10d04:	mov	r3, #1
   10d08:	strb	r3, [r4]
   10d0c:	pop	{r4, pc}
   10d10:	ldrdeq	r7, [r2], -r0
   10d14:	ldr	r0, [pc, #40]	; 10d44 <__assert_fail@plt+0x1a8>
   10d18:	ldr	r3, [r0]
   10d1c:	cmp	r3, #0
   10d20:	bne	10d28 <__assert_fail@plt+0x18c>
   10d24:	b	10cb4 <__assert_fail@plt+0x118>
   10d28:	ldr	r3, [pc, #24]	; 10d48 <__assert_fail@plt+0x1ac>
   10d2c:	cmp	r3, #0
   10d30:	beq	10d24 <__assert_fail@plt+0x188>
   10d34:	push	{r4, lr}
   10d38:	blx	r3
   10d3c:	pop	{r4, lr}
   10d40:	b	10cb4 <__assert_fail@plt+0x118>
   10d44:	andeq	r6, r2, r4, lsl #28
	...
   10d50:	push	{r4, lr}
   10d54:	bl	1166c <__assert_fail@plt+0xad0>
   10d58:	cmp	r0, #0
   10d5c:	popeq	{r4, pc}
   10d60:	ldr	r2, [pc, #36]	; 10d8c <__assert_fail@plt+0x1f0>
   10d64:	ldr	r1, [r0, #12]
   10d68:	ldr	r3, [r2]
   10d6c:	sub	r3, r3, r1
   10d70:	str	r3, [r2]
   10d74:	ldr	r2, [pc, #20]	; 10d90 <__assert_fail@plt+0x1f4>
   10d78:	ldr	r1, [r0, #16]
   10d7c:	ldr	r3, [r2]
   10d80:	sub	r3, r3, r1
   10d84:	str	r3, [r2]
   10d88:	pop	{r4, pc}
   10d8c:	andeq	r7, r2, r8, asr #2
   10d90:	andeq	fp, r2, ip, lsr r4
   10d94:	ldr	r3, [pc, #76]	; 10de8 <__assert_fail@plt+0x24c>
   10d98:	vldr	d6, [pc, #64]	; 10de0 <__assert_fail@plt+0x244>
   10d9c:	ldr	r0, [pc, #72]	; 10dec <__assert_fail@plt+0x250>
   10da0:	ldr	r1, [r3]
   10da4:	add	r2, r1, #1
   10da8:	str	r2, [r3]
   10dac:	ldr	r3, [pc, #60]	; 10df0 <__assert_fail@plt+0x254>
   10db0:	ldr	r2, [r3]
   10db4:	ldr	r3, [pc, #56]	; 10df4 <__assert_fail@plt+0x258>
   10db8:	ldr	r3, [r3]
   10dbc:	sub	r3, r2, r3
   10dc0:	vmov	s14, r3
   10dc4:	vcvt.f64.s32	d7, s14
   10dc8:	vmul.f64	d7, d7, d6
   10dcc:	vmov	s13, r2
   10dd0:	vcvt.f64.s32	d6, s13
   10dd4:	vdiv.f64	d5, d7, d6
   10dd8:	vmov	r2, r3, d5
   10ddc:	b	10a10 <printf@plt>
   10de0:	andeq	r0, r0, r0
   10de4:	subsmi	r0, r9, r0
   10de8:	ldrdeq	r7, [r2], -r4
   10dec:	andeq	r2, r1, r8, asr #26
   10df0:	andeq	r7, r2, r8, asr #2
   10df4:	andeq	fp, r2, ip, lsr r4
   10df8:	push	{r4, r5, r6, r7, r8, lr}
   10dfc:	ldr	r5, [pc, #112]	; 10e74 <__assert_fail@plt+0x2d8>
   10e00:	ldr	r3, [pc, #112]	; 10e78 <__assert_fail@plt+0x2dc>
   10e04:	ldr	r1, [pc, #112]	; 10e7c <__assert_fail@plt+0x2e0>
   10e08:	ldr	r2, [r5]
   10e0c:	ldr	r0, [r5, #4]
   10e10:	cmp	r2, #0
   10e14:	str	r2, [r3]
   10e18:	str	r0, [r1]
   10e1c:	popeq	{r4, r5, r6, r7, r8, pc}
   10e20:	mov	r6, r3
   10e24:	bl	10d94 <__assert_fail@plt+0x1f8>
   10e28:	ldr	r3, [pc, #80]	; 10e80 <__assert_fail@plt+0x2e4>
   10e2c:	ldr	r7, [pc, #80]	; 10e84 <__assert_fail@plt+0x2e8>
   10e30:	add	r5, r5, #992	; 0x3e0
   10e34:	ldr	r4, [r3]
   10e38:	cmp	r4, #0
   10e3c:	bne	10e44 <__assert_fail@plt+0x2a8>
   10e40:	pop	{r4, r5, r6, r7, r8, pc}
   10e44:	ldr	r1, [r4, #8]
   10e48:	mov	r0, r5
   10e4c:	bl	10d50 <__assert_fail@plt+0x1b4>
   10e50:	ldr	r1, [r4, #8]
   10e54:	mov	r0, r7
   10e58:	bl	10d50 <__assert_fail@plt+0x1b4>
   10e5c:	ldr	r3, [r6]
   10e60:	cmp	r3, #0
   10e64:	popeq	{r4, r5, r6, r7, r8, pc}
   10e68:	bl	10d94 <__assert_fail@plt+0x1f8>
   10e6c:	ldr	r4, [r4, #4]
   10e70:	b	10e38 <__assert_fail@plt+0x29c>
   10e74:	andeq	r7, r2, ip, ror #2
   10e78:	andeq	r7, r2, r8, asr #2
   10e7c:	andeq	fp, r2, ip, lsr r4
   10e80:	andeq	r7, r2, ip, asr r1
   10e84:	andeq	r9, r2, r4, asr #9
   10e88:	mov	r2, r0
   10e8c:	push	{r4, lr}
   10e90:	mov	r1, #99	; 0x63
   10e94:	ldr	r0, [pc, #12]	; 10ea8 <__assert_fail@plt+0x30c>
   10e98:	bl	10a40 <fgets@plt>
   10e9c:	adds	r0, r0, #0
   10ea0:	movne	r0, #1
   10ea4:	pop	{r4, pc}
   10ea8:	ldrdeq	r7, [r2], -r8
   10eac:	push	{r4, lr}
   10eb0:	mov	r4, r1
   10eb4:	bl	10e88 <__assert_fail@plt+0x2ec>
   10eb8:	cmp	r0, #0
   10ebc:	popeq	{r4, pc}
   10ec0:	mov	r2, r4
   10ec4:	ldr	r1, [pc, #20]	; 10ee0 <__assert_fail@plt+0x344>
   10ec8:	ldr	r0, [pc, #20]	; 10ee4 <__assert_fail@plt+0x348>
   10ecc:	bl	10b18 <__isoc99_sscanf@plt>
   10ed0:	sub	r0, r0, #1
   10ed4:	clz	r0, r0
   10ed8:	lsr	r0, r0, #5
   10edc:	pop	{r4, pc}
   10ee0:	strdeq	r2, [r1], -sl
   10ee4:	ldrdeq	r7, [r2], -r8
   10ee8:	ldr	r2, [r1]
   10eec:	cmp	r2, #0
   10ef0:	bne	10f00 <__assert_fail@plt+0x364>
   10ef4:	mov	r1, r0
   10ef8:	ldr	r0, [pc, #56]	; 10f38 <__assert_fail@plt+0x39c>
   10efc:	b	10b6c <fputs@plt>
   10f00:	ldr	r3, [r1, #4]
   10f04:	vldr	d6, [pc, #36]	; 10f30 <__assert_fail@plt+0x394>
   10f08:	sub	r3, r2, r3
   10f0c:	ldr	r1, [pc, #40]	; 10f3c <__assert_fail@plt+0x3a0>
   10f10:	vmov	s14, r3
   10f14:	vcvt.f64.s32	d7, s14
   10f18:	vmul.f64	d7, d7, d6
   10f1c:	vmov	s13, r2
   10f20:	vcvt.f64.s32	d6, s13
   10f24:	vdiv.f64	d5, d7, d6
   10f28:	vmov	r2, r3, d5
   10f2c:	b	10b0c <fprintf@plt>
   10f30:	andeq	r0, r0, r0
   10f34:	subsmi	r0, r9, r0
   10f38:	muleq	r1, r0, sp
   10f3c:	muleq	r1, r9, sp
   10f40:	push	{r4, r5, r6, lr}
   10f44:	subs	r5, r1, #0
   10f48:	mov	r4, r0
   10f4c:	beq	10f78 <__assert_fail@plt+0x3dc>
   10f50:	ldr	r1, [pc, #48]	; 10f88 <__assert_fail@plt+0x3ec>
   10f54:	ldm	r5, {r2, r3}
   10f58:	bl	10b0c <fprintf@plt>
   10f5c:	mov	r1, r5
   10f60:	mov	r0, r4
   10f64:	bl	10ee8 <__assert_fail@plt+0x34c>
   10f68:	mov	r1, r4
   10f6c:	ldr	r0, [pc, #24]	; 10f8c <__assert_fail@plt+0x3f0>
   10f70:	pop	{r4, r5, r6, lr}
   10f74:	b	10b6c <fputs@plt>
   10f78:	mov	r1, r0
   10f7c:	ldr	r0, [pc, #12]	; 10f90 <__assert_fail@plt+0x3f4>
   10f80:	bl	10b6c <fputs@plt>
   10f84:	b	10f68 <__assert_fail@plt+0x3cc>
   10f88:	muleq	r1, pc, sp	; <UNPREDICTABLE>
   10f8c:	andeq	r2, r1, r5, asr #27
   10f90:	andeq	r2, r1, sl, lsr #27
   10f94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f98:	mov	r4, r0
   10f9c:	ldrb	r8, [sp, #32]
   10fa0:	mov	r6, r1
   10fa4:	mov	r7, r2
   10fa8:	ldr	r1, [pc, #204]	; 1107c <__assert_fail@plt+0x4e0>
   10fac:	mov	r2, r3
   10fb0:	ldrb	r9, [sp, #36]	; 0x24
   10fb4:	bl	10b0c <fprintf@plt>
   10fb8:	mov	r1, #0
   10fbc:	mov	r0, r4
   10fc0:	bl	10f40 <__assert_fail@plt+0x3a4>
   10fc4:	ldr	r3, [pc, #180]	; 11080 <__assert_fail@plt+0x4e4>
   10fc8:	cmp	r8, #0
   10fcc:	ldr	r2, [pc, #176]	; 11084 <__assert_fail@plt+0x4e8>
   10fd0:	ldr	r1, [pc, #176]	; 11088 <__assert_fail@plt+0x4ec>
   10fd4:	moveq	r2, r3
   10fd8:	mov	r0, r4
   10fdc:	bl	10b0c <fprintf@plt>
   10fe0:	ldr	sl, [pc, #164]	; 1108c <__assert_fail@plt+0x4f0>
   10fe4:	mov	r5, #1
   10fe8:	cmp	r5, r7
   10fec:	ble	11048 <__assert_fail@plt+0x4ac>
   10ff0:	cmp	r8, #0
   10ff4:	beq	11024 <__assert_fail@plt+0x488>
   10ff8:	add	r3, r7, #1
   10ffc:	add	r1, r6, r3, lsl #3
   11000:	ldr	r3, [r6, r3, lsl #3]
   11004:	cmp	r3, #0
   11008:	ble	11024 <__assert_fail@plt+0x488>
   1100c:	mov	r0, r4
   11010:	bl	10f40 <__assert_fail@plt+0x3a4>
   11014:	mov	r2, r7
   11018:	ldr	r1, [pc, #112]	; 11090 <__assert_fail@plt+0x4f4>
   1101c:	mov	r0, r4
   11020:	bl	10b0c <fprintf@plt>
   11024:	cmp	r9, #0
   11028:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1102c:	mov	r1, r6
   11030:	mov	r0, r4
   11034:	bl	10f40 <__assert_fail@plt+0x3a4>
   11038:	mov	r1, r4
   1103c:	ldr	r0, [pc, #80]	; 11094 <__assert_fail@plt+0x4f8>
   11040:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11044:	b	10b6c <fputs@plt>
   11048:	ldr	r3, [r6, r5, lsl #3]
   1104c:	add	r1, r6, r5, lsl #3
   11050:	cmp	r3, #0
   11054:	ble	11070 <__assert_fail@plt+0x4d4>
   11058:	mov	r0, r4
   1105c:	bl	10f40 <__assert_fail@plt+0x3a4>
   11060:	mov	r2, r5
   11064:	mov	r1, sl
   11068:	mov	r0, r4
   1106c:	bl	10b0c <fprintf@plt>
   11070:	add	r5, r5, #1
   11074:	sxth	r5, r5
   11078:	b	10fe8 <__assert_fail@plt+0x44c>
   1107c:	ldrdeq	r2, [r1], -r7
   11080:	ldrdeq	r2, [r1], -r0
   11084:	andeq	r2, r1, r9, asr #27
   11088:	ldrdeq	r2, [r1], -r8
   1108c:	ldrdeq	r2, [r1], -ip
   11090:	andeq	r2, r1, r5, ror #27
   11094:	andeq	r2, r1, lr, ror #27
   11098:	push	{r4, r5, r6, r7, r8, lr}
   1109c:	mov	r4, r1
   110a0:	add	r4, r4, #4096	; 0x1000
   110a4:	mov	r6, r0
   110a8:	mov	r0, r1
   110ac:	mov	r5, r2
   110b0:	bl	11748 <__assert_fail@plt+0xbac>
   110b4:	ldr	r2, [pc, #124]	; 11138 <__assert_fail@plt+0x59c>
   110b8:	ldr	r1, [r4, #3952]	; 0xf70
   110bc:	ldr	r0, [r4, #3956]	; 0xf74
   110c0:	bl	12a58 <error@@Base+0xb54>
   110c4:	mov	r2, r5
   110c8:	ldr	r1, [pc, #108]	; 1113c <__assert_fail@plt+0x5a0>
   110cc:	mov	r0, r6
   110d0:	bl	10b0c <fprintf@plt>
   110d4:	mov	r1, #0
   110d8:	mov	r0, r6
   110dc:	bl	10f40 <__assert_fail@plt+0x3a4>
   110e0:	mov	r1, r6
   110e4:	mov	r0, #10
   110e8:	bl	10b3c <fputc@plt>
   110ec:	ldr	r7, [pc, #76]	; 11140 <__assert_fail@plt+0x5a4>
   110f0:	mov	r5, #0
   110f4:	ldr	r3, [r4, #3956]	; 0xf74
   110f8:	cmp	r5, r3
   110fc:	blt	11104 <__assert_fail@plt+0x568>
   11100:	pop	{r4, r5, r6, r7, r8, pc}
   11104:	ldr	r3, [r4, #3952]	; 0xf70
   11108:	mov	r0, r6
   1110c:	ldr	r1, [r3, r5, lsl #2]
   11110:	add	r1, r1, #12
   11114:	bl	10f40 <__assert_fail@plt+0x3a4>
   11118:	ldr	r3, [r4, #3952]	; 0xf70
   1111c:	mov	r1, r7
   11120:	mov	r0, r6
   11124:	ldr	r3, [r3, r5, lsl #2]
   11128:	add	r5, r5, #1
   1112c:	ldr	r2, [r3, #8]
   11130:	bl	10b0c <fprintf@plt>
   11134:	b	110f4 <__assert_fail@plt+0x558>
   11138:	andeq	r1, r1, r4, asr #2
   1113c:	ldrdeq	r2, [r1], -r7
   11140:	ldrdeq	r2, [r1], -r8
   11144:	ldr	r1, [r1, #8]
   11148:	ldr	r0, [r0, #8]
   1114c:	b	11db4 <__assert_fail@plt+0x1218>
   11150:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11154:	mov	r6, r0
   11158:	mov	r5, r1
   1115c:	bl	10e88 <__assert_fail@plt+0x2ec>
   11160:	mov	r4, #0
   11164:	cmp	r0, #0
   11168:	bne	11178 <__assert_fail@plt+0x5dc>
   1116c:	mov	r0, r4
   11170:	add	sp, sp, #8
   11174:	pop	{r4, r5, r6, r7, r8, pc}
   11178:	mov	r0, r6
   1117c:	bl	10e88 <__assert_fail@plt+0x2ec>
   11180:	cmp	r0, #0
   11184:	ldrne	r7, [pc, #128]	; 1120c <__assert_fail@plt+0x670>
   11188:	beq	1116c <__assert_fail@plt+0x5d0>
   1118c:	mov	r0, r6
   11190:	bl	10e88 <__assert_fail@plt+0x2ec>
   11194:	cmp	r0, #0
   11198:	beq	1116c <__assert_fail@plt+0x5d0>
   1119c:	add	r3, sp, #4
   111a0:	mov	r2, sp
   111a4:	mov	r1, r7
   111a8:	ldr	r0, [pc, #96]	; 11210 <__assert_fail@plt+0x674>
   111ac:	bl	10b18 <__isoc99_sscanf@plt>
   111b0:	cmp	r0, #2
   111b4:	bne	1116c <__assert_fail@plt+0x5d0>
   111b8:	ldr	r0, [pc, #84]	; 11214 <__assert_fail@plt+0x678>
   111bc:	bl	10b54 <atoi@plt>
   111c0:	ldr	r8, [sp]
   111c4:	cmp	r0, #0
   111c8:	bne	111e8 <__assert_fail@plt+0x64c>
   111cc:	ldr	r1, [pc, #68]	; 11218 <__assert_fail@plt+0x67c>
   111d0:	ldr	r0, [pc, #60]	; 11214 <__assert_fail@plt+0x678>
   111d4:	bl	10a04 <strcmp@plt>
   111d8:	cmp	r0, #0
   111dc:	moveq	r4, r8
   111e0:	moveq	r0, #0
   111e4:	movne	r0, #11
   111e8:	ldr	r3, [r5, r0, lsl #3]
   111ec:	add	r2, r5, r0, lsl #3
   111f0:	add	r3, r3, r8
   111f4:	str	r3, [r5, r0, lsl #3]
   111f8:	ldr	r1, [sp, #4]
   111fc:	ldr	r3, [r2, #4]
   11200:	add	r3, r3, r1
   11204:	str	r3, [r2, #4]
   11208:	b	1118c <__assert_fail@plt+0x5f0>
   1120c:	strdeq	r2, [r1], -r6
   11210:	ldrdeq	r7, [r2], -r8
   11214:	strdeq	r7, [r2], -r5
   11218:	andeq	r2, r1, lr, ror #27
   1121c:	ldr	r3, [r0]
   11220:	add	r1, r3, r1
   11224:	ldr	r3, [r0, #4]
   11228:	str	r1, [r0]
   1122c:	add	r2, r3, r2
   11230:	str	r2, [r0, #4]
   11234:	bx	lr
   11238:	push	{r4, r5, r6, r7, r8, lr}
   1123c:	mov	r7, r0
   11240:	mov	r8, r1
   11244:	mov	r6, r2
   11248:	mov	r5, r3
   1124c:	bl	1166c <__assert_fail@plt+0xad0>
   11250:	subs	r4, r0, #0
   11254:	bne	11280 <__assert_fail@plt+0x6e4>
   11258:	mov	r1, #20
   1125c:	mov	r0, #1
   11260:	bl	11f40 <error@@Base+0x3c>
   11264:	mov	r4, r0
   11268:	mov	r0, r8
   1126c:	bl	10a58 <strdup@plt>
   11270:	mov	r1, r4
   11274:	str	r0, [r4, #8]
   11278:	mov	r0, r7
   1127c:	bl	116b0 <__assert_fail@plt+0xb14>
   11280:	ldr	r2, [r4, #12]
   11284:	ldr	r3, [r4, #16]
   11288:	add	r2, r2, r6
   1128c:	add	r3, r3, r5
   11290:	str	r2, [r4, #12]
   11294:	str	r3, [r4, #16]
   11298:	pop	{r4, r5, r6, r7, r8, pc}
   1129c:	push	{r0, r1, r4, r5, r6, lr}
   112a0:	mov	r4, r0
   112a4:	mov	r6, r1
   112a8:	bl	10e88 <__assert_fail@plt+0x2ec>
   112ac:	cmp	r0, #0
   112b0:	beq	112c8 <__assert_fail@plt+0x72c>
   112b4:	mov	r0, r4
   112b8:	bl	10e88 <__assert_fail@plt+0x2ec>
   112bc:	cmp	r0, #0
   112c0:	ldrne	r5, [pc, #92]	; 11324 <__assert_fail@plt+0x788>
   112c4:	bne	112f4 <__assert_fail@plt+0x758>
   112c8:	add	sp, sp, #8
   112cc:	pop	{r4, r5, r6, pc}
   112d0:	mov	r0, r5
   112d4:	bl	10b00 <strlen@plt>
   112d8:	mov	r3, #0
   112dc:	ldr	r1, [pc, #68]	; 11328 <__assert_fail@plt+0x78c>
   112e0:	add	r0, r5, r0
   112e4:	strb	r3, [r0, #-1]
   112e8:	ldm	sp, {r2, r3}
   112ec:	mov	r0, r6
   112f0:	bl	11238 <__assert_fail@plt+0x69c>
   112f4:	mov	r0, r4
   112f8:	bl	10e88 <__assert_fail@plt+0x2ec>
   112fc:	cmp	r0, #0
   11300:	beq	112c8 <__assert_fail@plt+0x72c>
   11304:	add	r3, sp, #4
   11308:	mov	r2, sp
   1130c:	ldr	r1, [pc, #24]	; 1132c <__assert_fail@plt+0x790>
   11310:	ldr	r0, [pc, #12]	; 11324 <__assert_fail@plt+0x788>
   11314:	bl	10b18 <__isoc99_sscanf@plt>
   11318:	cmp	r0, #2
   1131c:	beq	112d0 <__assert_fail@plt+0x734>
   11320:	b	112c8 <__assert_fail@plt+0x72c>
   11324:	ldrdeq	r7, [r2], -r8
   11328:	strdeq	r7, [r2], -r5
   1132c:	strdeq	r2, [r1], -r6
   11330:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11334:	mov	r6, r1
   11338:	mov	r5, r0
   1133c:	ldr	r1, [pc, #332]	; 11490 <__assert_fail@plt+0x8f4>
   11340:	mov	r0, r6
   11344:	bl	11fcc <error@@Base+0xc8>
   11348:	mov	r4, r0
   1134c:	bl	10e88 <__assert_fail@plt+0x2ec>
   11350:	cmp	r0, #0
   11354:	beq	1147c <__assert_fail@plt+0x8e0>
   11358:	mov	r2, #45	; 0x2d
   1135c:	ldr	r1, [pc, #304]	; 11494 <__assert_fail@plt+0x8f8>
   11360:	ldr	r0, [pc, #304]	; 11498 <__assert_fail@plt+0x8fc>
   11364:	bl	10b78 <strncmp@plt>
   11368:	cmp	r0, #0
   1136c:	bne	1147c <__assert_fail@plt+0x8e0>
   11370:	mov	r0, r4
   11374:	bl	10e88 <__assert_fail@plt+0x2ec>
   11378:	cmp	r0, #0
   1137c:	beq	1147c <__assert_fail@plt+0x8e0>
   11380:	ldr	r1, [pc, #276]	; 1149c <__assert_fail@plt+0x900>
   11384:	ldr	r0, [pc, #268]	; 11498 <__assert_fail@plt+0x8fc>
   11388:	bl	10a04 <strcmp@plt>
   1138c:	cmp	r0, #0
   11390:	bne	1147c <__assert_fail@plt+0x8e0>
   11394:	mov	r1, sp
   11398:	mov	r0, r4
   1139c:	bl	10eac <__assert_fail@plt+0x310>
   113a0:	cmp	r0, #0
   113a4:	beq	1147c <__assert_fail@plt+0x8e0>
   113a8:	add	r1, sp, #4
   113ac:	mov	r0, r4
   113b0:	bl	10eac <__assert_fail@plt+0x310>
   113b4:	cmp	r0, #0
   113b8:	beq	1147c <__assert_fail@plt+0x8e0>
   113bc:	mov	r0, r4
   113c0:	bl	10e88 <__assert_fail@plt+0x2ec>
   113c4:	cmp	r0, #0
   113c8:	beq	1147c <__assert_fail@plt+0x8e0>
   113cc:	mov	r0, r4
   113d0:	bl	10e88 <__assert_fail@plt+0x2ec>
   113d4:	cmp	r0, #0
   113d8:	beq	1147c <__assert_fail@plt+0x8e0>
   113dc:	ldr	r3, [r5]
   113e0:	ldr	r2, [sp]
   113e4:	add	r1, r5, #8
   113e8:	add	r3, r3, r2
   113ec:	str	r3, [r5]
   113f0:	ldr	r2, [sp, #4]
   113f4:	ldr	r3, [r5, #4]
   113f8:	mov	r0, r4
   113fc:	add	r3, r3, r2
   11400:	str	r3, [r5, #4]
   11404:	bl	11150 <__assert_fail@plt+0x5b4>
   11408:	add	r1, r5, #416	; 0x1a0
   1140c:	mov	r7, r0
   11410:	mov	r0, r4
   11414:	bl	11150 <__assert_fail@plt+0x5b4>
   11418:	add	r1, r5, #824	; 0x338
   1141c:	mov	r6, r0
   11420:	mov	r0, r4
   11424:	bl	11150 <__assert_fail@plt+0x5b4>
   11428:	ldr	r3, [sp]
   1142c:	cmp	r3, #0
   11430:	ble	1146c <__assert_fail@plt+0x8d0>
   11434:	add	r1, r5, #920	; 0x398
   11438:	mov	r0, r4
   1143c:	bl	11150 <__assert_fail@plt+0x5b4>
   11440:	cmp	r7, #0
   11444:	ble	11454 <__assert_fail@plt+0x8b8>
   11448:	add	r1, r5, #992	; 0x3e0
   1144c:	mov	r0, r4
   11450:	bl	1129c <__assert_fail@plt+0x700>
   11454:	cmp	r6, #0
   11458:	ble	1146c <__assert_fail@plt+0x8d0>
   1145c:	add	r1, r5, #9024	; 0x2340
   11460:	add	r1, r1, #24
   11464:	mov	r0, r4
   11468:	bl	1129c <__assert_fail@plt+0x700>
   1146c:	mov	r0, r4
   11470:	bl	11dfc <__assert_fail@plt+0x1260>
   11474:	add	sp, sp, #12
   11478:	pop	{r4, r5, r6, r7, pc}
   1147c:	cmp	r6, #0
   11480:	ldr	r1, [pc, #24]	; 114a0 <__assert_fail@plt+0x904>
   11484:	ldr	r0, [pc, #24]	; 114a4 <__assert_fail@plt+0x908>
   11488:	movne	r1, r6
   1148c:	bl	11f8c <error@@Base+0x88>
   11490:	andeq	r6, r1, fp, ror r3
   11494:	andeq	r2, r1, r4, lsl #28
   11498:	ldrdeq	r7, [r2], -r8
   1149c:	andeq	r6, r1, r5, lsr r3
   114a0:	strdeq	r2, [r1], -lr
   114a4:	andeq	r2, r1, r4, lsr lr
   114a8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   114ac:	mov	r4, r0
   114b0:	mov	r0, r1
   114b4:	ldr	r1, [pc, #276]	; 115d0 <__assert_fail@plt+0xa34>
   114b8:	bl	11fcc <error@@Base+0xc8>
   114bc:	ldr	r3, [pc, #272]	; 115d4 <__assert_fail@plt+0xa38>
   114c0:	ldr	r2, [pc, #272]	; 115d8 <__assert_fail@plt+0xa3c>
   114c4:	ldr	r1, [pc, #272]	; 115dc <__assert_fail@plt+0xa40>
   114c8:	mov	r7, #1
   114cc:	mov	r6, #0
   114d0:	mov	r5, r0
   114d4:	bl	10b0c <fprintf@plt>
   114d8:	ldr	r2, [r4]
   114dc:	ldr	r1, [pc, #252]	; 115e0 <__assert_fail@plt+0xa44>
   114e0:	mov	r0, r5
   114e4:	bl	10b0c <fprintf@plt>
   114e8:	ldr	r2, [r4, #4]
   114ec:	ldr	r1, [pc, #240]	; 115e4 <__assert_fail@plt+0xa48>
   114f0:	mov	r0, r5
   114f4:	bl	10b0c <fprintf@plt>
   114f8:	mov	r1, r4
   114fc:	mov	r0, r5
   11500:	bl	10ee8 <__assert_fail@plt+0x34c>
   11504:	mov	r1, r5
   11508:	ldr	r0, [pc, #216]	; 115e8 <__assert_fail@plt+0xa4c>
   1150c:	bl	10b6c <fputs@plt>
   11510:	ldr	r3, [pc, #212]	; 115ec <__assert_fail@plt+0xa50>
   11514:	mov	r2, #50	; 0x32
   11518:	add	r1, r4, #8
   1151c:	mov	r0, r5
   11520:	stm	sp, {r6, r7}
   11524:	bl	10f94 <__assert_fail@plt+0x3f8>
   11528:	ldr	r3, [pc, #192]	; 115f0 <__assert_fail@plt+0xa54>
   1152c:	mov	r2, #50	; 0x32
   11530:	add	r1, r4, #416	; 0x1a0
   11534:	mov	r0, r5
   11538:	stm	sp, {r6, r7}
   1153c:	bl	10f94 <__assert_fail@plt+0x3f8>
   11540:	ldr	r3, [pc, #172]	; 115f4 <__assert_fail@plt+0xa58>
   11544:	str	r7, [sp, #4]
   11548:	str	r7, [sp]
   1154c:	mov	r2, #10
   11550:	add	r1, r4, #824	; 0x338
   11554:	mov	r0, r5
   11558:	bl	10f94 <__assert_fail@plt+0x3f8>
   1155c:	ldr	r3, [r4]
   11560:	cmp	r3, r6
   11564:	ble	115c0 <__assert_fail@plt+0xa24>
   11568:	ldr	r3, [pc, #136]	; 115f8 <__assert_fail@plt+0xa5c>
   1156c:	str	r6, [sp, #4]
   11570:	str	r6, [sp]
   11574:	mov	r2, #8
   11578:	add	r1, r4, #920	; 0x398
   1157c:	mov	r0, r5
   11580:	bl	10f94 <__assert_fail@plt+0x3f8>
   11584:	ldr	r3, [r4, #8]
   11588:	cmp	r3, r6
   1158c:	ble	115a0 <__assert_fail@plt+0xa04>
   11590:	ldr	r2, [pc, #84]	; 115ec <__assert_fail@plt+0xa50>
   11594:	add	r1, r4, #992	; 0x3e0
   11598:	mov	r0, r5
   1159c:	bl	11098 <__assert_fail@plt+0x4fc>
   115a0:	ldr	r3, [r4, #416]	; 0x1a0
   115a4:	cmp	r3, #0
   115a8:	ble	115c0 <__assert_fail@plt+0xa24>
   115ac:	add	r1, r4, #9024	; 0x2340
   115b0:	ldr	r2, [pc, #56]	; 115f0 <__assert_fail@plt+0xa54>
   115b4:	add	r1, r1, #24
   115b8:	mov	r0, r5
   115bc:	bl	11098 <__assert_fail@plt+0x4fc>
   115c0:	mov	r0, r5
   115c4:	add	sp, sp, #12
   115c8:	pop	{r4, r5, r6, r7, lr}
   115cc:	b	11dfc <__assert_fail@plt+0x1260>
   115d0:	andeq	r2, r1, r6, asr #28
   115d4:	andeq	r6, r1, r5, lsr r3
   115d8:	andeq	r2, r1, r4, lsl #28
   115dc:	andeq	r2, r1, r8, asr #28
   115e0:	andeq	r2, r1, sp, asr #28
   115e4:	andeq	r2, r1, fp, asr lr
   115e8:	andeq	r2, r1, r1, ror lr
   115ec:	andeq	r2, r1, lr, ror lr
   115f0:	muleq	r1, r1, lr
   115f4:	andeq	r2, r1, r8, lsl #29
   115f8:	muleq	r1, pc, lr	; <UNPREDICTABLE>
   115fc:	sub	r2, r0, #1
   11600:	mov	r0, #0
   11604:	push	{r4, lr}
   11608:	ldrb	r3, [r2, #1]!
   1160c:	cmp	r3, #0
   11610:	bne	11624 <__assert_fail@plt+0xa88>
   11614:	ldr	r1, [pc, #16]	; 1162c <__assert_fail@plt+0xa90>
   11618:	bl	12c98 <error@@Base+0xd94>
   1161c:	sxth	r0, r1
   11620:	pop	{r4, pc}
   11624:	add	r0, r0, r3
   11628:	b	11608 <__assert_fail@plt+0xa6c>
   1162c:	strdeq	r0, [r0], -r7
   11630:	push	{r4, r5, r6, lr}
   11634:	add	r6, r0, #8000	; 0x1f40
   11638:	mov	r4, r0
   1163c:	mov	r5, r0
   11640:	add	r6, r6, #48	; 0x30
   11644:	mov	r0, r5
   11648:	add	r5, r5, #16
   1164c:	bl	1281c <error@@Base+0x918>
   11650:	cmp	r5, r6
   11654:	bne	11644 <__assert_fail@plt+0xaa8>
   11658:	add	r4, r4, #4096	; 0x1000
   1165c:	mov	r3, #0
   11660:	str	r3, [r4, #3952]	; 0xf70
   11664:	str	r3, [r4, #3956]	; 0xf74
   11668:	pop	{r4, r5, r6, pc}
   1166c:	push	{r4, r5, r6, lr}
   11670:	mov	r4, r0
   11674:	mov	r0, r1
   11678:	mov	r5, r1
   1167c:	bl	115fc <__assert_fail@plt+0xa60>
   11680:	ldr	r4, [r4, r0, lsl #4]
   11684:	cmp	r4, #0
   11688:	beq	116a0 <__assert_fail@plt+0xb04>
   1168c:	ldr	r1, [r4, #8]
   11690:	mov	r0, r5
   11694:	bl	10a04 <strcmp@plt>
   11698:	cmp	r0, #0
   1169c:	bne	116a8 <__assert_fail@plt+0xb0c>
   116a0:	mov	r0, r4
   116a4:	pop	{r4, r5, r6, pc}
   116a8:	ldr	r4, [r4, #4]
   116ac:	b	11684 <__assert_fail@plt+0xae8>
   116b0:	push	{r4, r5, r6, lr}
   116b4:	mov	r4, r0
   116b8:	ldr	r0, [r1, #8]
   116bc:	mov	r5, r1
   116c0:	bl	115fc <__assert_fail@plt+0xa60>
   116c4:	mov	r1, r5
   116c8:	add	r0, r4, r0, lsl #4
   116cc:	add	r4, r4, #4096	; 0x1000
   116d0:	bl	12834 <error@@Base+0x930>
   116d4:	ldr	r0, [r4, #3952]	; 0xf70
   116d8:	cmp	r0, #0
   116dc:	beq	116ec <__assert_fail@plt+0xb50>
   116e0:	bl	10a28 <free@plt>
   116e4:	mov	r3, #0
   116e8:	str	r3, [r4, #3952]	; 0xf70
   116ec:	ldr	r3, [r4, #3956]	; 0xf74
   116f0:	add	r3, r3, #1
   116f4:	str	r3, [r4, #3956]	; 0xf74
   116f8:	pop	{r4, r5, r6, pc}
   116fc:	push	{r4, r5, r6, lr}
   11700:	mov	r4, r0
   11704:	ldr	r0, [r1, #8]
   11708:	mov	r5, r1
   1170c:	bl	115fc <__assert_fail@plt+0xa60>
   11710:	mov	r1, r5
   11714:	add	r0, r4, r0, lsl #4
   11718:	add	r4, r4, #4096	; 0x1000
   1171c:	bl	1286c <error@@Base+0x968>
   11720:	ldr	r0, [r4, #3952]	; 0xf70
   11724:	cmp	r0, #0
   11728:	beq	11738 <__assert_fail@plt+0xb9c>
   1172c:	bl	10a28 <free@plt>
   11730:	mov	r3, #0
   11734:	str	r3, [r4, #3952]	; 0xf70
   11738:	ldr	r3, [r4, #3956]	; 0xf74
   1173c:	sub	r3, r3, #1
   11740:	str	r3, [r4, #3956]	; 0xf74
   11744:	pop	{r4, r5, r6, pc}
   11748:	push	{r4, r5, r6, lr}
   1174c:	add	r6, r0, #4096	; 0x1000
   11750:	ldr	r4, [r6, #3952]	; 0xf70
   11754:	cmp	r4, #0
   11758:	popne	{r4, r5, r6, pc}
   1175c:	ldr	r3, [r6, #3956]	; 0xf74
   11760:	cmp	r3, #0
   11764:	popeq	{r4, r5, r6, pc}
   11768:	mov	r5, r0
   1176c:	mov	r1, #4
   11770:	mov	r0, r3
   11774:	bl	11f40 <error@@Base+0x3c>
   11778:	ldr	lr, [pc, #60]	; 117bc <__assert_fail@plt+0xc20>
   1177c:	mov	r3, r4
   11780:	mov	r2, r4
   11784:	str	r0, [r6, #3952]	; 0xf70
   11788:	ldr	r1, [r5, r2, lsl #4]
   1178c:	mov	ip, r3
   11790:	cmp	r1, #0
   11794:	mov	r3, ip
   11798:	bne	117ac <__assert_fail@plt+0xc10>
   1179c:	add	r2, r2, #1
   117a0:	cmp	r2, lr
   117a4:	bne	11788 <__assert_fail@plt+0xbec>
   117a8:	pop	{r4, r5, r6, pc}
   117ac:	str	r1, [r0, ip, lsl #2]
   117b0:	add	ip, ip, #1
   117b4:	ldr	r1, [r1, #4]
   117b8:	b	11790 <__assert_fail@plt+0xbf4>
   117bc:	strdeq	r0, [r0], -r7
   117c0:	push	{r4, r5, r6, r7, r8, lr}
   117c4:	add	r6, r0, #8000	; 0x1f40
   117c8:	mov	r4, r0
   117cc:	mov	r7, r1
   117d0:	mov	r5, r0
   117d4:	add	r6, r6, #48	; 0x30
   117d8:	mov	r0, r5
   117dc:	mov	r1, r7
   117e0:	add	r5, r5, #16
   117e4:	bl	12918 <error@@Base+0xa14>
   117e8:	cmp	r5, r6
   117ec:	bne	117d8 <__assert_fail@plt+0xc3c>
   117f0:	add	r4, r4, #4096	; 0x1000
   117f4:	ldr	r0, [r4, #3952]	; 0xf70
   117f8:	cmp	r0, #0
   117fc:	beq	1180c <__assert_fail@plt+0xc70>
   11800:	bl	10a28 <free@plt>
   11804:	mov	r3, #0
   11808:	str	r3, [r4, #3952]	; 0xf70
   1180c:	mov	r3, #0
   11810:	str	r3, [r4, #3956]	; 0xf74
   11814:	pop	{r4, r5, r6, r7, r8, pc}
   11818:	cmp	r0, #0
   1181c:	beq	11880 <__assert_fail@plt+0xce4>
   11820:	push	{r4, r5, lr}
   11824:	mov	r2, #0
   11828:	ldr	ip, [r0, #12]
   1182c:	ldr	r1, [pc, #84]	; 11888 <__assert_fail@plt+0xcec>
   11830:	ldr	lr, [pc, #84]	; 1188c <__assert_fail@plt+0xcf0>
   11834:	mov	r5, #12
   11838:	sub	r3, r1, r2
   1183c:	add	r3, r2, r3, lsr #1
   11840:	mul	r4, r5, r3
   11844:	add	r0, lr, r4
   11848:	ldr	r4, [lr, r4]
   1184c:	cmp	ip, r4
   11850:	subcc	r1, r3, #1
   11854:	bcc	11868 <__assert_fail@plt+0xccc>
   11858:	ldr	r2, [r0, #4]
   1185c:	cmp	ip, r2
   11860:	bls	11878 <__assert_fail@plt+0xcdc>
   11864:	add	r2, r3, #1
   11868:	cmp	r1, r2
   1186c:	bcs	11838 <__assert_fail@plt+0xc9c>
   11870:	mov	r0, #0
   11874:	pop	{r4, r5, pc}
   11878:	ldr	r0, [r0, #8]
   1187c:	pop	{r4, r5, pc}
   11880:	mov	r0, #18
   11884:	bx	lr
   11888:	andeq	r0, r0, r4, asr #8
   1188c:	andeq	r2, r1, r8, lsr #29
   11890:	push	{r4, lr}
   11894:	subs	r4, r0, #0
   11898:	beq	118bc <__assert_fail@plt+0xd20>
   1189c:	ldr	r4, [r4, #4]
   118a0:	cmp	r4, #0
   118a4:	beq	118bc <__assert_fail@plt+0xd20>
   118a8:	mov	r0, r4
   118ac:	bl	11818 <__assert_fail@plt+0xc7c>
   118b0:	bic	r0, r0, #2
   118b4:	cmp	r0, #4
   118b8:	beq	1189c <__assert_fail@plt+0xd00>
   118bc:	mov	r0, r4
   118c0:	pop	{r4, pc}
   118c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c8:	sub	sp, sp, #28
   118cc:	ldr	r6, [r1]
   118d0:	str	r0, [sp, #4]
   118d4:	cmp	r6, #0
   118d8:	str	r6, [sp, #12]
   118dc:	beq	11c84 <__assert_fail@plt+0x10e8>
   118e0:	mov	r8, #17
   118e4:	add	r7, sp, #8
   118e8:	mov	r9, #8
   118ec:	mov	sl, #15
   118f0:	ldr	r3, [r7, #4]
   118f4:	cmp	r3, #0
   118f8:	bne	11a04 <__assert_fail@plt+0xe68>
   118fc:	ldr	r0, [r6, #12]
   11900:	bl	10a34 <utf8proc_get_property@plt>
   11904:	ldrh	r3, [r0]
   11908:	cmp	r3, #29
   1190c:	bhi	119d4 <__assert_fail@plt+0xe38>
   11910:	mov	r2, #1
   11914:	ldr	r1, [pc, #948]	; 11cd0 <__assert_fail@plt+0x1134>
   11918:	ands	r3, r1, r2, lsl r3
   1191c:	beq	119d4 <__assert_fail@plt+0xe38>
   11920:	ldr	r8, [r7, #4]
   11924:	mov	r4, r6
   11928:	mov	r5, #0
   1192c:	b	1197c <__assert_fail@plt+0xde0>
   11930:	cmp	r4, #0
   11934:	bne	1194c <__assert_fail@plt+0xdb0>
   11938:	ldr	r3, [pc, #916]	; 11cd4 <__assert_fail@plt+0x1138>
   1193c:	mov	r2, #249	; 0xf9
   11940:	ldr	r1, [pc, #912]	; 11cd8 <__assert_fail@plt+0x113c>
   11944:	ldr	r0, [pc, #912]	; 11cdc <__assert_fail@plt+0x1140>
   11948:	b	11970 <__assert_fail@plt+0xdd4>
   1194c:	add	r1, sp, #8
   11950:	ldr	r0, [r4, #12]
   11954:	bl	10a4c <utf8proc_encode_char@plt>
   11958:	cmp	r0, #0
   1195c:	bne	11974 <__assert_fail@plt+0xdd8>
   11960:	ldr	r3, [pc, #876]	; 11cd4 <__assert_fail@plt+0x1138>
   11964:	ldr	r1, [pc, #876]	; 11cd8 <__assert_fail@plt+0x113c>
   11968:	ldr	r0, [pc, #880]	; 11ce0 <__assert_fail@plt+0x1144>
   1196c:	mov	r2, #253	; 0xfd
   11970:	bl	10b9c <__assert_fail@plt>
   11974:	ldr	r4, [r4, #4]
   11978:	add	r5, r5, r0
   1197c:	cmp	r8, r4
   11980:	bne	11930 <__assert_fail@plt+0xd94>
   11984:	add	r0, r5, #1
   11988:	bl	10aac <malloc@plt>
   1198c:	mov	r5, #0
   11990:	mov	r4, r0
   11994:	cmp	r8, r6
   11998:	bne	119dc <__assert_fail@plt+0xe40>
   1199c:	mov	r3, #0
   119a0:	strb	r3, [r4, r5]
   119a4:	mov	r1, #12
   119a8:	mov	r0, #1
   119ac:	bl	11f40 <error@@Base+0x3c>
   119b0:	mov	r5, r0
   119b4:	mov	r0, r4
   119b8:	bl	10b30 <utf8proc_NFC@plt>
   119bc:	mov	r1, r5
   119c0:	str	r0, [r5, #8]
   119c4:	ldr	r0, [sp, #4]
   119c8:	bl	12844 <error@@Base+0x940>
   119cc:	mov	r0, r4
   119d0:	bl	10a28 <free@plt>
   119d4:	ldr	r6, [r7, #4]
   119d8:	b	118d4 <__assert_fail@plt+0xd38>
   119dc:	cmp	r6, #0
   119e0:	ldreq	r3, [pc, #764]	; 11ce4 <__assert_fail@plt+0x1148>
   119e4:	ldreq	r2, [pc, #764]	; 11ce8 <__assert_fail@plt+0x114c>
   119e8:	beq	11940 <__assert_fail@plt+0xda4>
   119ec:	add	r1, r4, r5
   119f0:	ldr	r0, [r6, #12]
   119f4:	bl	10a4c <utf8proc_encode_char@plt>
   119f8:	ldr	r6, [r6, #4]
   119fc:	add	r5, r5, r0
   11a00:	b	11994 <__assert_fail@plt+0xdf8>
   11a04:	mov	r0, r7
   11a08:	bl	11890 <__assert_fail@plt+0xcf4>
   11a0c:	mov	r7, r0
   11a10:	bl	11818 <__assert_fail@plt+0xc7c>
   11a14:	mov	r4, r0
   11a18:	mov	r0, r7
   11a1c:	bl	11890 <__assert_fail@plt+0xcf4>
   11a20:	mov	fp, r0
   11a24:	bl	11818 <__assert_fail@plt+0xc7c>
   11a28:	mov	r5, r0
   11a2c:	mov	r0, fp
   11a30:	bl	11890 <__assert_fail@plt+0xcf4>
   11a34:	bl	11818 <__assert_fail@plt+0xc7c>
   11a38:	cmp	r4, #1
   11a3c:	cmpeq	r5, #2
   11a40:	sub	r3, r5, #2
   11a44:	sub	r2, r4, #1
   11a48:	clz	r3, r3
   11a4c:	lsr	r3, r3, #5
   11a50:	beq	11c54 <__assert_fail@plt+0x10b8>
   11a54:	cmp	r2, #2
   11a58:	bls	11c7c <__assert_fail@plt+0x10e0>
   11a5c:	bic	r2, r5, #2
   11a60:	cmp	r2, #1
   11a64:	orreq	r3, r3, #1
   11a68:	cmp	r3, #0
   11a6c:	bne	11c7c <__assert_fail@plt+0x10e0>
   11a70:	sub	r3, r4, #8
   11a74:	cmp	r3, #1
   11a78:	bhi	11aa4 <__assert_fail@plt+0xf08>
   11a7c:	sub	r1, r5, #8
   11a80:	cmp	r1, #1
   11a84:	bls	11b60 <__assert_fail@plt+0xfc4>
   11a88:	sub	r1, r5, #12
   11a8c:	cmp	r5, #10
   11a90:	cmpne	r1, #1
   11a94:	bhi	11aa4 <__assert_fail@plt+0xf08>
   11a98:	sub	r1, r0, #8
   11a9c:	cmp	r1, #1
   11aa0:	bls	11b60 <__assert_fail@plt+0xfc4>
   11aa4:	sub	r1, r8, #8
   11aa8:	cmp	r1, #1
   11aac:	bhi	11acc <__assert_fail@plt+0xf30>
   11ab0:	sub	r1, r4, #12
   11ab4:	cmp	r4, #10
   11ab8:	cmpne	r1, #1
   11abc:	bhi	11acc <__assert_fail@plt+0xf30>
   11ac0:	sub	r1, r5, #8
   11ac4:	cmp	r1, #1
   11ac8:	bls	11b60 <__assert_fail@plt+0xfc4>
   11acc:	sub	r1, r4, #8
   11ad0:	sub	lr, r5, #10
   11ad4:	clz	r1, r1
   11ad8:	clz	lr, lr
   11adc:	lsr	r1, r1, #5
   11ae0:	lsr	lr, lr, #5
   11ae4:	tst	r1, lr
   11ae8:	bne	11c5c <__assert_fail@plt+0x10c0>
   11aec:	cmp	r5, #11
   11af0:	movne	r1, #0
   11af4:	andeq	r1, r1, #1
   11af8:	cmp	r0, #8
   11afc:	movne	r1, #0
   11b00:	andeq	r1, r1, #1
   11b04:	cmp	r1, #0
   11b08:	bne	11c5c <__assert_fail@plt+0x10c0>
   11b0c:	cmp	r5, #8
   11b10:	cmpeq	r4, #11
   11b14:	moveq	r1, #1
   11b18:	movne	r1, #0
   11b1c:	cmp	r8, #8
   11b20:	movne	r1, #0
   11b24:	andeq	r1, r1, #1
   11b28:	cmp	r1, #0
   11b2c:	bne	11c64 <__assert_fail@plt+0x10c8>
   11b30:	sub	r1, r4, #15
   11b34:	sub	ip, r5, #15
   11b38:	clz	r1, r1
   11b3c:	clz	ip, ip
   11b40:	lsr	r1, r1, #5
   11b44:	lsr	ip, ip, #5
   11b48:	tst	r1, ip
   11b4c:	bne	11c6c <__assert_fail@plt+0x10d0>
   11b50:	cmp	r3, #1
   11b54:	bhi	11b68 <__assert_fail@plt+0xfcc>
   11b58:	cmp	r5, #15
   11b5c:	bne	11b88 <__assert_fail@plt+0xfec>
   11b60:	mov	r8, r4
   11b64:	b	118f0 <__assert_fail@plt+0xd54>
   11b68:	cmp	r4, #15
   11b6c:	bne	11cb4 <__assert_fail@plt+0x1118>
   11b70:	sub	fp, r5, #8
   11b74:	cmp	fp, #1
   11b78:	bls	11b60 <__assert_fail@plt+0xfc4>
   11b7c:	cmp	r8, #15
   11b80:	bne	11bac <__assert_fail@plt+0x1010>
   11b84:	b	11b90 <__assert_fail@plt+0xff4>
   11b88:	cmp	r8, #15
   11b8c:	bne	11ba4 <__assert_fail@plt+0x1008>
   11b90:	sub	r8, r4, #10
   11b94:	bics	r8, r8, #2
   11b98:	bne	11ba4 <__assert_fail@plt+0x1008>
   11b9c:	cmp	r5, #15
   11ba0:	beq	11b60 <__assert_fail@plt+0xfc4>
   11ba4:	cmp	r4, #15
   11ba8:	bne	11bc8 <__assert_fail@plt+0x102c>
   11bac:	cmp	r2, #12
   11bb0:	movne	r2, lr
   11bb4:	orreq	r2, lr, #1
   11bb8:	cmp	r2, #0
   11bbc:	beq	11bc8 <__assert_fail@plt+0x102c>
   11bc0:	cmp	r0, #15
   11bc4:	beq	11c6c <__assert_fail@plt+0x10d0>
   11bc8:	sub	r0, r4, #7
   11bcc:	sub	r2, r5, #7
   11bd0:	clz	r0, r0
   11bd4:	clz	r2, r2
   11bd8:	lsr	r0, r0, #5
   11bdc:	lsr	r2, r2, #5
   11be0:	tst	r0, r2
   11be4:	bne	11c74 <__assert_fail@plt+0x10d8>
   11be8:	cmp	r3, #1
   11bec:	movhi	r3, r1
   11bf0:	orrls	r3, r1, #1
   11bf4:	cmp	r3, #0
   11bf8:	bne	11c0c <__assert_fail@plt+0x1070>
   11bfc:	cmp	r4, #16
   11c00:	orreq	r0, r0, #1
   11c04:	cmp	r0, #0
   11c08:	beq	11c14 <__assert_fail@plt+0x1078>
   11c0c:	cmp	r5, #16
   11c10:	beq	11b60 <__assert_fail@plt+0xfc4>
   11c14:	cmp	r4, #16
   11c18:	bne	11c40 <__assert_fail@plt+0x10a4>
   11c1c:	sub	r3, r5, #8
   11c20:	cmp	r3, #1
   11c24:	orrls	ip, ip, #1
   11c28:	cmp	ip, #0
   11c2c:	bne	11b60 <__assert_fail@plt+0xfc4>
   11c30:	cmp	r5, #16
   11c34:	orreq	r2, r2, #1
   11c38:	cmp	r2, #0
   11c3c:	bne	11b60 <__assert_fail@plt+0xfc4>
   11c40:	cmp	r4, #5
   11c44:	cmpeq	r5, #5
   11c48:	bne	11c7c <__assert_fail@plt+0x10e0>
   11c4c:	mov	r4, #5
   11c50:	b	11b60 <__assert_fail@plt+0xfc4>
   11c54:	mov	r4, #1
   11c58:	b	11b60 <__assert_fail@plt+0xfc4>
   11c5c:	mov	r4, r9
   11c60:	b	11b60 <__assert_fail@plt+0xfc4>
   11c64:	mov	r4, #11
   11c68:	b	11b60 <__assert_fail@plt+0xfc4>
   11c6c:	mov	r4, sl
   11c70:	b	11b60 <__assert_fail@plt+0xfc4>
   11c74:	mov	r4, #7
   11c78:	b	11b60 <__assert_fail@plt+0xfc4>
   11c7c:	cmp	r7, #0
   11c80:	bne	11c90 <__assert_fail@plt+0x10f4>
   11c84:	add	sp, sp, #28
   11c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c8c:	mov	r7, r4
   11c90:	ldr	r4, [r7, #4]
   11c94:	cmp	r4, #0
   11c98:	beq	118fc <__assert_fail@plt+0xd60>
   11c9c:	mov	r0, r4
   11ca0:	bl	11818 <__assert_fail@plt+0xc7c>
   11ca4:	bic	r0, r0, #2
   11ca8:	cmp	r0, #4
   11cac:	beq	11c8c <__assert_fail@plt+0x10f0>
   11cb0:	b	118fc <__assert_fail@plt+0xd60>
   11cb4:	cmp	r8, #15
   11cb8:	bne	11bc8 <__assert_fail@plt+0x102c>
   11cbc:	cmp	r4, #14
   11cc0:	bne	11b90 <__assert_fail@plt+0xff4>
   11cc4:	cmp	r5, #15
   11cc8:	bne	11bc8 <__assert_fail@plt+0x102c>
   11ccc:	b	11b60 <__assert_fail@plt+0xfc4>
   11cd0:	strdcs	r1, [r0], -lr
   11cd4:	andeq	r6, r1, r4, ror #3
   11cd8:	andeq	r6, r1, r6, lsl #4
   11cdc:	andeq	r6, r1, sp, lsl #4
   11ce0:	andeq	r6, r1, sp, lsl r2
   11ce4:	strdeq	r6, [r1], -r5
   11ce8:	andeq	r0, r0, sp, lsl #2
   11cec:	push	{r4, lr}
   11cf0:	mov	r4, r0
   11cf4:	ldr	r0, [r0, #8]
   11cf8:	bl	10a28 <free@plt>
   11cfc:	mov	r0, r4
   11d00:	pop	{r4, lr}
   11d04:	b	10a28 <free@plt>
   11d08:	ldr	r3, [pc, #56]	; 11d48 <__assert_fail@plt+0x11ac>
   11d0c:	push	{r4, r5, lr}
   11d10:	sub	sp, sp, #116	; 0x74
   11d14:	ldr	r4, [r3]
   11d18:	mov	r5, r0
   11d1c:	bl	10adc <getpid@plt>
   11d20:	mov	r2, r4
   11d24:	ldr	r1, [pc, #32]	; 11d4c <__assert_fail@plt+0x11b0>
   11d28:	str	r5, [sp]
   11d2c:	mov	r3, r0
   11d30:	add	r0, sp, #12
   11d34:	bl	10b48 <sprintf@plt>
   11d38:	add	r0, sp, #12
   11d3c:	bl	10a58 <strdup@plt>
   11d40:	add	sp, sp, #116	; 0x74
   11d44:	pop	{r4, r5, pc}
   11d48:	andeq	fp, r2, r4, asr #8
   11d4c:	andeq	r6, r1, r0, lsr r2
   11d50:	ldr	r3, [pc, #84]	; 11dac <__assert_fail@plt+0x1210>
   11d54:	push	{r7, lr}
   11d58:	mov	r5, r0
   11d5c:	ldr	r3, [r3]
   11d60:	cmp	r3, #0
   11d64:	beq	11d6c <__assert_fail@plt+0x11d0>
   11d68:	blx	r3
   11d6c:	ldr	r6, [pc, #60]	; 11db0 <__assert_fail@plt+0x1214>
   11d70:	mov	r4, #1
   11d74:	ldrsh	r3, [r6]
   11d78:	cmp	r3, r4
   11d7c:	bge	11d88 <__assert_fail@plt+0x11ec>
   11d80:	mov	r0, r5
   11d84:	bl	10ae8 <exit@plt>
   11d88:	mov	r0, r4
   11d8c:	bl	11d08 <__assert_fail@plt+0x116c>
   11d90:	add	r4, r4, #1
   11d94:	sxth	r4, r4
   11d98:	mov	r7, r0
   11d9c:	bl	10a70 <unlink@plt>
   11da0:	mov	r0, r7
   11da4:	bl	10a28 <free@plt>
   11da8:	b	11d74 <__assert_fail@plt+0x11d8>
   11dac:	andeq	fp, r2, r8, asr #8
   11db0:	andeq	r7, r2, ip, lsr r1
   11db4:	mov	r3, #0
   11db8:	ldrb	r2, [r0, r3]
   11dbc:	cmp	r2, #0
   11dc0:	beq	11dec <__assert_fail@plt+0x1250>
   11dc4:	ldrb	ip, [r1, r3]
   11dc8:	cmp	ip, r2
   11dcc:	beq	11de4 <__assert_fail@plt+0x1248>
   11dd0:	ldrb	r3, [r1, r3]
   11dd4:	cmp	r3, r2
   11dd8:	mvnhi	r0, #0
   11ddc:	movls	r0, #1
   11de0:	bx	lr
   11de4:	add	r3, r3, #1
   11de8:	b	11db8 <__assert_fail@plt+0x121c>
   11dec:	ldrb	r0, [r1, r3]
   11df0:	cmp	r0, #0
   11df4:	bne	11dd0 <__assert_fail@plt+0x1234>
   11df8:	bx	lr
   11dfc:	ldr	r2, [pc, #28]	; 11e20 <__assert_fail@plt+0x1284>
   11e00:	ldr	r2, [r2]
   11e04:	cmp	r2, r0
   11e08:	bxeq	lr
   11e0c:	ldr	r2, [pc, #16]	; 11e24 <__assert_fail@plt+0x1288>
   11e10:	ldr	r2, [r2]
   11e14:	cmp	r0, r2
   11e18:	bxeq	lr
   11e1c:	b	10b24 <fclose@plt>
   11e20:	andeq	r7, r2, r8, asr #1
   11e24:	andeq	r7, r2, ip, asr #1
   11e28:	push	{lr}		; (str lr, [sp, #-4]!)
   11e2c:	sub	sp, sp, #92	; 0x5c
   11e30:	mov	r1, sp
   11e34:	bl	12d2c <error@@Base+0xe28>
   11e38:	clz	r0, r0
   11e3c:	lsr	r0, r0, #5
   11e40:	add	sp, sp, #92	; 0x5c
   11e44:	pop	{pc}		; (ldr pc, [sp], #4)
   11e48:	ldr	r3, [pc, #36]	; 11e74 <__assert_fail@plt+0x12d8>
   11e4c:	push	{r4, lr}
   11e50:	ldrh	r0, [r3]
   11e54:	add	r0, r0, #1
   11e58:	sxth	r0, r0
   11e5c:	strh	r0, [r3]
   11e60:	bl	11d08 <__assert_fail@plt+0x116c>
   11e64:	mov	r4, r0
   11e68:	bl	10a70 <unlink@plt>
   11e6c:	mov	r0, r4
   11e70:	pop	{r4, pc}
   11e74:	andeq	r7, r2, ip, lsr r1
   11e78:	push	{r4, lr}
   11e7c:	mov	r4, r0
   11e80:	bl	10b00 <strlen@plt>
   11e84:	sub	r0, r0, #1
   11e88:	sxth	r0, r0
   11e8c:	cmp	r0, #0
   11e90:	blt	11ea0 <__assert_fail@plt+0x1304>
   11e94:	ldrb	r3, [r4, r0]
   11e98:	cmp	r3, #47	; 0x2f
   11e9c:	bne	11e84 <__assert_fail@plt+0x12e8>
   11ea0:	add	r0, r0, #1
   11ea4:	add	r0, r4, r0
   11ea8:	pop	{r4, pc}
   11eac:	push	{r4, lr}
   11eb0:	mov	r0, #0
   11eb4:	bl	11d50 <__assert_fail@plt+0x11b4>
   11eb8:	ldr	r2, [pc, #52]	; 11ef4 <__assert_fail@plt+0x1358>
   11ebc:	push	{r4, lr}
   11ec0:	ldr	r2, [r2]
   11ec4:	cmp	r2, #0
   11ec8:	beq	11ed4 <__assert_fail@plt+0x1338>
   11ecc:	blx	r2
   11ed0:	bl	11eac <__assert_fail@plt+0x1310>
   11ed4:	mov	r3, r0
   11ed8:	ldr	r2, [pc, #24]	; 11ef8 <__assert_fail@plt+0x135c>
   11edc:	ldr	r0, [pc, #24]	; 11efc <__assert_fail@plt+0x1360>
   11ee0:	ldr	r1, [pc, #24]	; 11f00 <__assert_fail@plt+0x1364>
   11ee4:	ldr	r2, [r2]
   11ee8:	ldr	r0, [r0]
   11eec:	bl	10b0c <fprintf@plt>
   11ef0:	b	11ed0 <__assert_fail@plt+0x1334>
   11ef4:	andeq	fp, r2, r0, asr #8
   11ef8:	andeq	fp, r2, r4, asr #8
   11efc:	andeq	r7, r2, r0, asr #1
   11f00:	andeq	r6, r1, lr, lsr r2

00011f04 <error@@Base>:
   11f04:	mov	r3, r0
   11f08:	ldr	r2, [pc, #32]	; 11f30 <error@@Base+0x2c>
   11f0c:	ldr	r0, [pc, #32]	; 11f34 <error@@Base+0x30>
   11f10:	push	{r4, lr}
   11f14:	ldr	r2, [r2]
   11f18:	ldr	r1, [pc, #24]	; 11f38 <error@@Base+0x34>
   11f1c:	ldr	r0, [r0]
   11f20:	bl	10b0c <fprintf@plt>
   11f24:	ldr	r3, [pc, #16]	; 11f3c <error@@Base+0x38>
   11f28:	ldr	r0, [r3]
   11f2c:	bl	11d50 <__assert_fail@plt+0x11b4>
   11f30:	andeq	fp, r2, r4, asr #8
   11f34:	andeq	r7, r2, r0, asr #1
   11f38:	andeq	r6, r1, sp, asr #4
   11f3c:	strheq	r7, [r2], -r8
   11f40:	push	{r4, lr}
   11f44:	bl	109ec <calloc@plt>
   11f48:	cmp	r0, #0
   11f4c:	popne	{r4, pc}
   11f50:	ldr	r0, [pc]	; 11f58 <error@@Base+0x54>
   11f54:	bl	11f04 <error@@Base>
   11f58:	andeq	r6, r1, r5, asr r2
   11f5c:	ldr	r3, [pc, #32]	; 11f84 <error@@Base+0x80>
   11f60:	ldrb	r2, [r3, #2]
   11f64:	cmp	r2, #0
   11f68:	bne	11f80 <error@@Base+0x7c>
   11f6c:	push	{r4, lr}
   11f70:	mov	r2, #1
   11f74:	ldr	r0, [pc, #12]	; 11f88 <error@@Base+0x84>
   11f78:	strb	r2, [r3, #2]
   11f7c:	bl	11f04 <error@@Base>
   11f80:	bx	lr
   11f84:	andeq	r7, r2, ip, lsr r1
   11f88:	andeq	r6, r1, pc, ror #4
   11f8c:	push	{r0, r1, r2, lr}
   11f90:	mov	r3, r0
   11f94:	ldr	r2, [pc, #32]	; 11fbc <error@@Base+0xb8>
   11f98:	ldr	r0, [pc, #32]	; 11fc0 <error@@Base+0xbc>
   11f9c:	str	r1, [sp]
   11fa0:	ldr	r1, [pc, #28]	; 11fc4 <error@@Base+0xc0>
   11fa4:	ldr	r2, [r2]
   11fa8:	ldr	r0, [r0]
   11fac:	bl	10b0c <fprintf@plt>
   11fb0:	ldr	r3, [pc, #16]	; 11fc8 <error@@Base+0xc4>
   11fb4:	ldr	r0, [r3]
   11fb8:	bl	11d50 <__assert_fail@plt+0x11b4>
   11fbc:	andeq	fp, r2, r4, asr #8
   11fc0:	andeq	r7, r2, r0, asr #1
   11fc4:	andeq	r6, r1, lr, ror r2
   11fc8:	strheq	r7, [r2], -r8
   11fcc:	push	{r4, r5, r6, lr}
   11fd0:	subs	r4, r0, #0
   11fd4:	mov	r5, r1
   11fd8:	bne	11ff4 <error@@Base+0xf0>
   11fdc:	ldrb	r3, [r1]
   11fe0:	cmp	r3, #114	; 0x72
   11fe4:	ldreq	r3, [pc, #44]	; 12018 <error@@Base+0x114>
   11fe8:	ldrne	r3, [pc, #44]	; 1201c <error@@Base+0x118>
   11fec:	ldr	r0, [r3]
   11ff0:	pop	{r4, r5, r6, pc}
   11ff4:	bl	10a1c <fopen@plt>
   11ff8:	cmp	r0, #0
   11ffc:	popne	{r4, r5, r6, pc}
   12000:	ldrb	r3, [r5]
   12004:	mov	r1, r4
   12008:	cmp	r3, #119	; 0x77
   1200c:	ldreq	r0, [pc, #12]	; 12020 <error@@Base+0x11c>
   12010:	ldrne	r0, [pc, #12]	; 12024 <error@@Base+0x120>
   12014:	bl	11f8c <error@@Base+0x88>
   12018:	andeq	r7, r2, r8, asr #1
   1201c:	andeq	r7, r2, ip, asr #1
   12020:	andeq	r6, r1, fp, lsl #5
   12024:	andeq	r6, r1, r1, lsr #5
   12028:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1202c:	mov	r8, r0
   12030:	ldr	r0, [r1]
   12034:	str	r2, [sp]
   12038:	mov	r7, r1
   1203c:	mov	r9, r3
   12040:	bl	11e78 <__assert_fail@plt+0x12dc>
   12044:	ldr	r3, [pc, #396]	; 121d8 <error@@Base+0x2d4>
   12048:	ldr	r1, [pc, #396]	; 121dc <error@@Base+0x2d8>
   1204c:	str	r0, [r3]
   12050:	mov	r0, #2
   12054:	bl	10ac4 <__sysv_signal@plt>
   12058:	ldr	r1, [pc, #380]	; 121dc <error@@Base+0x2d8>
   1205c:	mov	r0, #15
   12060:	bl	10ac4 <__sysv_signal@plt>
   12064:	ldr	r3, [r8]
   12068:	cmp	r3, #1
   1206c:	movne	r6, #0
   12070:	movne	r5, #1
   12074:	bne	12198 <error@@Base+0x294>
   12078:	ldr	r3, [pc, #352]	; 121e0 <error@@Base+0x2dc>
   1207c:	ldrb	r6, [r3, #4]
   12080:	cmp	r6, #0
   12084:	beq	121a4 <error@@Base+0x2a0>
   12088:	ldr	r0, [sp]
   1208c:	bl	11eb8 <__assert_fail@plt+0x131c>
   12090:	ldr	r4, [r7, r5, lsl #2]
   12094:	lsl	sl, r5, #2
   12098:	ldrb	r3, [r4]
   1209c:	cmp	r3, #45	; 0x2d
   120a0:	bne	121c8 <error@@Base+0x2c4>
   120a4:	ldrb	r3, [r4, #1]
   120a8:	cmp	r3, #0
   120ac:	str	r3, [sp, #4]
   120b0:	beq	121c8 <error@@Base+0x2c4>
   120b4:	mov	r0, r4
   120b8:	bl	10b00 <strlen@plt>
   120bc:	mov	r1, r4
   120c0:	mov	r2, r0
   120c4:	ldr	r0, [pc, #280]	; 121e4 <error@@Base+0x2e0>
   120c8:	bl	10b78 <strncmp@plt>
   120cc:	cmp	r0, #0
   120d0:	beq	12088 <error@@Base+0x184>
   120d4:	add	r0, r5, #1
   120d8:	cmp	r0, fp
   120dc:	addlt	sl, r7, sl
   120e0:	movge	r1, #0
   120e4:	ldrlt	r1, [sl, #4]
   120e8:	cmp	r9, #0
   120ec:	ldr	r3, [sp, #4]
   120f0:	beq	121b0 <error@@Base+0x2ac>
   120f4:	mov	r2, #0
   120f8:	add	lr, r2, r2, lsl #1
   120fc:	add	ip, r9, lr, lsl #2
   12100:	ldrb	lr, [r9, lr, lsl #2]
   12104:	cmp	lr, #0
   12108:	beq	121b0 <error@@Base+0x2ac>
   1210c:	cmp	r3, lr
   12110:	bne	12150 <error@@Base+0x24c>
   12114:	ldr	r3, [ip, #4]
   12118:	cmp	r3, #0
   1211c:	bne	1215c <error@@Base+0x258>
   12120:	ldr	r3, [ip, #8]
   12124:	cmp	r3, #0
   12128:	beq	121b0 <error@@Base+0x2ac>
   1212c:	ldrb	r2, [r4, #2]
   12130:	cmp	r2, #0
   12134:	bne	121b0 <error@@Base+0x2ac>
   12138:	ldrb	r2, [r3]
   1213c:	cmp	r2, #0
   12140:	bne	121bc <error@@Base+0x2b8>
   12144:	mov	r2, #1
   12148:	strb	r2, [r3]
   1214c:	b	12190 <error@@Base+0x28c>
   12150:	add	r2, r2, #1
   12154:	sxth	r2, r2
   12158:	b	120f8 <error@@Base+0x1f4>
   1215c:	ldrb	r2, [r4, #2]
   12160:	cmp	r2, #0
   12164:	cmpeq	r1, #0
   12168:	beq	12120 <error@@Base+0x21c>
   1216c:	ldr	ip, [r3]
   12170:	cmp	ip, #0
   12174:	bne	121bc <error@@Base+0x2b8>
   12178:	cmp	r2, #0
   1217c:	addne	r1, r4, #2
   12180:	str	r1, [r3]
   12184:	ldrb	r3, [r4, #2]
   12188:	cmp	r3, #0
   1218c:	sxtheq	r5, r0
   12190:	add	r5, r5, #1
   12194:	sxth	r5, r5
   12198:	ldr	fp, [r8]
   1219c:	cmp	r5, fp
   121a0:	blt	12090 <error@@Base+0x18c>
   121a4:	str	r6, [r8]
   121a8:	add	sp, sp, #12
   121ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121b0:	ldr	r0, [pc, #48]	; 121e8 <error@@Base+0x2e4>
   121b4:	mov	r1, r4
   121b8:	bl	11f8c <error@@Base+0x88>
   121bc:	mov	r1, r4
   121c0:	ldr	r0, [pc, #36]	; 121ec <error@@Base+0x2e8>
   121c4:	b	121b8 <error@@Base+0x2b4>
   121c8:	add	r3, r6, #1
   121cc:	str	r4, [r7, r6, lsl #2]
   121d0:	sxth	r6, r3
   121d4:	b	12190 <error@@Base+0x28c>
   121d8:	andeq	fp, r2, r4, asr #8
   121dc:	andeq	r1, r1, ip, asr pc
   121e0:	strheq	r7, [r2], -r8
   121e4:			; <UNDEFINED> instruction: 0x000162b5
   121e8:			; <UNDEFINED> instruction: 0x000162bb
   121ec:	andeq	r6, r1, sl, asr #5
   121f0:	push	{r0, r1, r2, lr}
   121f4:	mov	r3, r0
   121f8:	ldr	r2, [pc, #28]	; 1221c <error@@Base+0x318>
   121fc:	ldr	r0, [pc, #28]	; 12220 <error@@Base+0x31c>
   12200:	str	r1, [sp]
   12204:	ldr	r1, [pc, #24]	; 12224 <error@@Base+0x320>
   12208:	ldr	r2, [r2]
   1220c:	ldr	r0, [r0]
   12210:	bl	10b0c <fprintf@plt>
   12214:	add	sp, sp, #12
   12218:	pop	{pc}		; (ldr pc, [sp], #4)
   1221c:	andeq	fp, r2, r4, asr #8
   12220:	andeq	r7, r2, r0, asr #1
   12224:	andeq	r6, r1, lr, ror r2
   12228:	push	{r4, r5, r6, lr}
   1222c:	mov	r4, r0
   12230:	uxtb	r6, r1
   12234:	mov	r0, #1
   12238:	mov	r1, #16
   1223c:	mov	r5, r2
   12240:	bl	11f40 <error@@Base+0x3c>
   12244:	strb	r6, [r0, #8]
   12248:	str	r5, [r0, #12]
   1224c:	mov	r1, r0
   12250:	mov	r0, r4
   12254:	pop	{r4, r5, r6, lr}
   12258:	b	12844 <error@@Base+0x940>
   1225c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12260:	sub	sp, sp, #116	; 0x74
   12264:	ldrb	r3, [r2]
   12268:	adds	r3, r3, #0
   1226c:	movne	r3, #1
   12270:	cmp	r1, #0
   12274:	movne	r3, #0
   12278:	cmp	r3, #0
   1227c:	beq	1228c <error@@Base+0x388>
   12280:	ldr	r1, [pc, #752]	; 12578 <error@@Base+0x674>
   12284:	ldr	r0, [pc, #752]	; 1257c <error@@Base+0x678>
   12288:	bl	11f8c <error@@Base+0x88>
   1228c:	mov	r6, r0
   12290:	mov	r0, r1
   12294:	ldr	r1, [pc, #740]	; 12580 <error@@Base+0x67c>
   12298:	mov	r4, r2
   1229c:	ldr	r7, [r6, #4]
   122a0:	bl	11fcc <error@@Base+0xc8>
   122a4:	ldrb	r3, [r4]
   122a8:	cmp	r3, #0
   122ac:	mov	r5, r0
   122b0:	beq	122fc <error@@Base+0x3f8>
   122b4:	mov	r2, r0
   122b8:	mov	r1, #99	; 0x63
   122bc:	add	r0, sp, #12
   122c0:	bl	10a40 <fgets@plt>
   122c4:	cmp	r0, #0
   122c8:	beq	122ec <error@@Base+0x3e8>
   122cc:	mov	r2, #51	; 0x33
   122d0:	ldr	r1, [pc, #684]	; 12584 <error@@Base+0x680>
   122d4:	add	r0, sp, #12
   122d8:	bl	10b78 <strncmp@plt>
   122dc:	subs	r8, r0, #0
   122e0:	moveq	r9, #99	; 0x63
   122e4:	ldreq	sl, [pc, #668]	; 12588 <error@@Base+0x684>
   122e8:	beq	12378 <error@@Base+0x474>
   122ec:	mov	r0, r5
   122f0:	bl	10a64 <rewind@plt>
   122f4:	mov	r3, #0
   122f8:	strb	r3, [r4, #11]
   122fc:	ldrb	r3, [r4, #1]
   12300:	ldr	r8, [r4, #4]
   12304:	mov	r0, r5
   12308:	cmp	r8, #0
   1230c:	mov	fp, #0
   12310:	str	r3, [sp]
   12314:	moveq	r8, #94	; 0x5e
   12318:	bl	10b90 <getc@plt>
   1231c:	add	r3, sp, #9
   12320:	str	r3, [sp, #4]
   12324:	cmn	r0, #1
   12328:	bne	12398 <error@@Base+0x494>
   1232c:	mov	r0, r5
   12330:	bl	11dfc <__assert_fail@plt+0x1260>
   12334:	ldrb	r3, [r4, #9]
   12338:	cmp	r3, #0
   1233c:	bne	1243c <error@@Base+0x538>
   12340:	ldrb	r3, [r4, #10]
   12344:	cmp	r3, #0
   12348:	bne	12550 <error@@Base+0x64c>
   1234c:	add	sp, sp, #116	; 0x74
   12350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12354:	mov	r1, sl
   12358:	add	r0, sp, #12
   1235c:	bl	10a04 <strcmp@plt>
   12360:	cmp	r0, #0
   12364:	bne	12378 <error@@Base+0x474>
   12368:	add	r8, r8, #1
   1236c:	sxth	r8, r8
   12370:	cmp	r8, #1
   12374:	bgt	12390 <error@@Base+0x48c>
   12378:	mov	r2, r5
   1237c:	mov	r1, r9
   12380:	add	r0, sp, #12
   12384:	bl	10a40 <fgets@plt>
   12388:	cmp	r0, #0
   1238c:	bne	12354 <error@@Base+0x450>
   12390:	mov	r3, #1
   12394:	b	122f8 <error@@Base+0x3f4>
   12398:	ldr	r3, [pc, #492]	; 1258c <error@@Base+0x688>
   1239c:	ldrsb	r9, [r3, r0]
   123a0:	cmp	r9, #0
   123a4:	bgt	123b0 <error@@Base+0x4ac>
   123a8:	ldr	r0, [pc, #480]	; 12590 <error@@Base+0x68c>
   123ac:	bl	11f04 <error@@Base>
   123b0:	cmp	r9, #1
   123b4:	strb	r0, [sp, #8]
   123b8:	beq	123e0 <error@@Base+0x4dc>
   123bc:	sub	sl, r9, #1
   123c0:	mov	r3, r5
   123c4:	mov	r2, sl
   123c8:	mov	r1, #1
   123cc:	ldr	r0, [sp, #4]
   123d0:	bl	10a94 <fread@plt>
   123d4:	cmp	sl, r0
   123d8:	ldrne	r0, [pc, #436]	; 12594 <error@@Base+0x690>
   123dc:	bne	123ac <error@@Base+0x4a8>
   123e0:	add	r2, sp, #12
   123e4:	mov	r1, #4
   123e8:	add	r0, sp, #8
   123ec:	bl	10aa0 <utf8proc_iterate@plt>
   123f0:	cmp	r9, r0
   123f4:	beq	12400 <error@@Base+0x4fc>
   123f8:	bl	10b60 <utf8proc_errmsg@plt>
   123fc:	b	123ac <error@@Base+0x4a8>
   12400:	ldr	r3, [sp]
   12404:	cmp	r3, #0
   12408:	beq	1241c <error@@Base+0x518>
   1240c:	ldr	r3, [sp, #12]
   12410:	cmp	r8, r3
   12414:	moveq	fp, #1
   12418:	beq	12430 <error@@Base+0x52c>
   1241c:	mov	r1, fp
   12420:	ldr	r2, [sp, #12]
   12424:	mov	r0, r6
   12428:	bl	12228 <error@@Base+0x324>
   1242c:	mov	fp, #0
   12430:	mov	r0, r5
   12434:	bl	10b90 <getc@plt>
   12438:	b	12324 <error@@Base+0x420>
   1243c:	cmp	r7, #0
   12440:	mov	sl, #32
   12444:	ldrne	r8, [r7, #4]
   12448:	ldreq	r8, [r6]
   1244c:	mov	r5, r8
   12450:	cmp	r5, #0
   12454:	bne	124dc <error@@Base+0x5d8>
   12458:	cmp	r8, #0
   1245c:	beq	12340 <error@@Base+0x43c>
   12460:	ldr	r2, [r8, #12]
   12464:	ldr	r9, [r8, #4]
   12468:	cmp	r2, #32
   1246c:	eor	r3, r5, #1
   12470:	bne	12530 <error@@Base+0x62c>
   12474:	cmp	r9, #0
   12478:	orreq	r3, r3, #1
   1247c:	cmp	r3, #0
   12480:	bne	12494 <error@@Base+0x590>
   12484:	ldr	r3, [r9, #12]
   12488:	cmp	r3, #10
   1248c:	cmpne	r3, #32
   12490:	bne	12544 <error@@Base+0x640>
   12494:	cmp	r9, #0
   12498:	moveq	r3, #0
   1249c:	andne	r3, r5, #1
   124a0:	cmp	r3, #0
   124a4:	beq	124c0 <error@@Base+0x5bc>
   124a8:	ldr	r3, [r9, #12]
   124ac:	cmp	r3, #32
   124b0:	ldrbeq	r3, [r9, #8]
   124b4:	ldrbeq	r2, [r8, #8]
   124b8:	orreq	r3, r3, r2
   124bc:	strbeq	r3, [r9, #8]
   124c0:	mov	r0, r6
   124c4:	mov	r1, r8
   124c8:	bl	1286c <error@@Base+0x968>
   124cc:	mov	r0, r8
   124d0:	bl	10a28 <free@plt>
   124d4:	mov	r8, r9
   124d8:	b	12458 <error@@Base+0x554>
   124dc:	ldr	r9, [r5, #12]
   124e0:	mov	r0, r9
   124e4:	bl	10a34 <utf8proc_get_property@plt>
   124e8:	cmp	r9, #13
   124ec:	bhi	12520 <error@@Base+0x61c>
   124f0:	cmp	r9, #11
   124f4:	bcs	12528 <error@@Base+0x624>
   124f8:	cmp	r9, #9
   124fc:	beq	12528 <error@@Base+0x624>
   12500:	cmp	r9, #10
   12504:	beq	12518 <error@@Base+0x614>
   12508:	ldrsh	r3, [r0]
   1250c:	sub	r3, r3, #23
   12510:	cmp	r3, #2
   12514:	bls	12528 <error@@Base+0x624>
   12518:	ldr	r5, [r5, #4]
   1251c:	b	12450 <error@@Base+0x54c>
   12520:	cmp	r9, #160	; 0xa0
   12524:	bne	12508 <error@@Base+0x604>
   12528:	str	sl, [r5, #12]
   1252c:	b	12518 <error@@Base+0x614>
   12530:	cmp	r2, #10
   12534:	movne	r3, #0
   12538:	andeq	r3, r3, #1
   1253c:	cmp	r3, #0
   12540:	bne	12494 <error@@Base+0x590>
   12544:	subs	r5, r2, #10
   12548:	movne	r5, #1
   1254c:	b	124d4 <error@@Base+0x5d0>
   12550:	cmp	r7, #0
   12554:	ldrne	r4, [r7, #4]
   12558:	ldreq	r4, [r6]
   1255c:	cmp	r4, #0
   12560:	beq	1234c <error@@Base+0x448>
   12564:	ldr	r0, [r4, #12]
   12568:	bl	10a7c <utf8proc_tolower@plt>
   1256c:	str	r0, [r4, #12]
   12570:	ldr	r4, [r4, #4]
   12574:	b	1255c <error@@Base+0x658>
   12578:	ldrdeq	r6, [r1], -fp
   1257c:	andeq	r6, r1, r5, ror #5
   12580:	andeq	r6, r1, fp, ror r3
   12584:	strdeq	r6, [r1], -r5
   12588:	andeq	r6, r1, sp, lsr #6
   1258c:	andeq	r6, r2, r8, lsl #28
   12590:	andeq	r6, r1, r5, ror #6
   12594:	andeq	r6, r1, sp, ror r3
   12598:	push	{r4, lr}
   1259c:	bl	10a4c <utf8proc_encode_char@plt>
   125a0:	cmp	r0, #0
   125a4:	bgt	125b0 <error@@Base+0x6ac>
   125a8:	ldr	r0, [pc, #8]	; 125b8 <error@@Base+0x6b4>
   125ac:	bl	11f04 <error@@Base>
   125b0:	sxtb	r0, r0
   125b4:	pop	{r4, pc}
   125b8:	muleq	r1, r5, r3
   125bc:	push	{r4, r5, r6, r7, r8, lr}
   125c0:	uxtb	r4, r0
   125c4:	cmp	r4, #0
   125c8:	mov	r7, r1
   125cc:	mov	r6, r2
   125d0:	uxtb	r8, r3
   125d4:	beq	125e8 <error@@Base+0x6e4>
   125d8:	mov	r1, r2
   125dc:	mov	r0, #94	; 0x5e
   125e0:	bl	12598 <error@@Base+0x694>
   125e4:	sxth	r4, r0
   125e8:	cmp	r7, #10
   125ec:	add	r5, r6, r4
   125f0:	bne	12610 <error@@Base+0x70c>
   125f4:	ldr	r2, [pc, #168]	; 126a4 <error@@Base+0x7a0>
   125f8:	cmp	r8, #0
   125fc:	ldr	r1, [pc, #164]	; 126a8 <error@@Base+0x7a4>
   12600:	mov	r0, r5
   12604:	moveq	r1, r2
   12608:	pop	{r4, r5, r6, r7, r8, lr}
   1260c:	b	10b48 <sprintf@plt>
   12610:	mov	r0, r7
   12614:	bl	10a34 <utf8proc_get_property@plt>
   12618:	cmp	r7, #32
   1261c:	beq	1263c <error@@Base+0x738>
   12620:	ldrh	r3, [r0]
   12624:	cmp	r3, #29
   12628:	bhi	12684 <error@@Base+0x780>
   1262c:	ldr	r2, [pc, #120]	; 126ac <error@@Base+0x7a8>
   12630:	mov	r1, #1
   12634:	ands	r3, r2, r1, lsl r3
   12638:	beq	12684 <error@@Base+0x780>
   1263c:	mov	r0, r7
   12640:	bl	10af4 <utf8proc_category@plt>
   12644:	sub	r0, r0, #6
   12648:	cmp	r0, #2
   1264c:	bhi	12664 <error@@Base+0x760>
   12650:	mov	r1, r5
   12654:	ldr	r0, [pc, #84]	; 126b0 <error@@Base+0x7ac>
   12658:	bl	12598 <error@@Base+0x694>
   1265c:	add	r4, r0, r4
   12660:	sxth	r4, r4
   12664:	add	r1, r6, r4
   12668:	mov	r0, r7
   1266c:	bl	12598 <error@@Base+0x694>
   12670:	mov	r3, #0
   12674:	add	r0, r0, r4
   12678:	sxth	r0, r0
   1267c:	strb	r3, [r6, r0]
   12680:	pop	{r4, r5, r6, r7, r8, pc}
   12684:	cmp	r7, #255	; 0xff
   12688:	movhi	r2, r7
   1268c:	ldrhi	r1, [pc, #32]	; 126b4 <error@@Base+0x7b0>
   12690:	ldrls	r1, [pc, #32]	; 126b8 <error@@Base+0x7b4>
   12694:	movls	r2, r7
   12698:	mov	r0, r5
   1269c:	pop	{r4, r5, r6, r7, r8, lr}
   126a0:	b	10b48 <sprintf@plt>
   126a4:	andeq	r6, r1, r9, lsl #5
   126a8:	andeq	r6, r1, ip, lsr #7
   126ac:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   126b0:	andeq	r2, r0, ip, asr #11
   126b4:			; <UNDEFINED> instruction: 0x000163b8
   126b8:			; <UNDEFINED> instruction: 0x000163b1
   126bc:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   126c0:	mov	r6, r0
   126c4:	mov	r0, r1
   126c8:	ldr	r1, [pc, #132]	; 12754 <error@@Base+0x850>
   126cc:	mov	r5, r2
   126d0:	bl	11fcc <error@@Base+0xc8>
   126d4:	cmp	r5, #0
   126d8:	mov	r4, r0
   126dc:	beq	1270c <error@@Base+0x808>
   126e0:	mov	r1, r0
   126e4:	ldr	r0, [pc, #108]	; 12758 <error@@Base+0x854>
   126e8:	bl	10b6c <fputs@plt>
   126ec:	mov	r1, r4
   126f0:	ldr	r0, [pc, #100]	; 1275c <error@@Base+0x858>
   126f4:	bl	10b6c <fputs@plt>
   126f8:	mov	r0, r4
   126fc:	blx	r5
   12700:	mov	r1, r4
   12704:	ldr	r0, [pc, #80]	; 1275c <error@@Base+0x858>
   12708:	bl	10b6c <fputs@plt>
   1270c:	ldr	r5, [r6]
   12710:	mov	r6, #0
   12714:	cmp	r5, #0
   12718:	bne	1272c <error@@Base+0x828>
   1271c:	mov	r0, r4
   12720:	bl	11dfc <__assert_fail@plt+0x1260>
   12724:	add	sp, sp, #16
   12728:	pop	{r4, r5, r6, pc}
   1272c:	ldr	r1, [r5, #12]
   12730:	ldrb	r0, [r5, #8]
   12734:	mov	r3, r6
   12738:	add	r2, sp, #4
   1273c:	bl	125bc <error@@Base+0x6b8>
   12740:	mov	r1, r4
   12744:	add	r0, sp, #4
   12748:	bl	10b6c <fputs@plt>
   1274c:	ldr	r5, [r5, #4]
   12750:	b	12714 <error@@Base+0x810>
   12754:	andeq	r2, r1, r6, asr #28
   12758:	strdeq	r6, [r1], -r5
   1275c:	andeq	r6, r1, sp, lsr #6
   12760:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12764:	mov	r4, r1
   12768:	mov	r1, #0
   1276c:	add	r6, sp, #8
   12770:	mov	r7, r0
   12774:	mvn	r8, #0
   12778:	mov	r5, r1
   1277c:	str	r1, [r6, #-4]!
   12780:	ldrb	r3, [r4]
   12784:	cmp	r3, #0
   12788:	bne	12798 <error@@Base+0x894>
   1278c:	mov	r0, #1
   12790:	add	sp, sp, #12
   12794:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12798:	mov	r2, r6
   1279c:	mov	r1, r8
   127a0:	mov	r0, r4
   127a4:	bl	10aa0 <utf8proc_iterate@plt>
   127a8:	subs	r9, r0, #0
   127ac:	ble	127c8 <error@@Base+0x8c4>
   127b0:	ldr	r2, [sp, #4]
   127b4:	mov	r1, r5
   127b8:	mov	r0, r7
   127bc:	bl	12228 <error@@Base+0x324>
   127c0:	add	r4, r4, r9
   127c4:	b	12780 <error@@Base+0x87c>
   127c8:	mov	r0, #0
   127cc:	b	12790 <error@@Base+0x88c>
   127d0:	cmp	r1, #0
   127d4:	push	{r4, lr}
   127d8:	mov	r4, r0
   127dc:	stm	r2, {r1, r3}
   127e0:	strne	r2, [r1, #4]
   127e4:	streq	r2, [r0]
   127e8:	cmp	r3, #0
   127ec:	streq	r2, [r0, #4]
   127f0:	ldr	r0, [r0, #8]
   127f4:	strne	r2, [r3]
   127f8:	cmp	r0, #0
   127fc:	beq	1280c <error@@Base+0x908>
   12800:	bl	10a28 <free@plt>
   12804:	mov	r3, #0
   12808:	str	r3, [r4, #8]
   1280c:	ldr	r3, [r4, #12]
   12810:	add	r3, r3, #1
   12814:	str	r3, [r4, #12]
   12818:	pop	{r4, pc}
   1281c:	mov	r3, #0
   12820:	str	r3, [r0, #4]
   12824:	str	r3, [r0]
   12828:	str	r3, [r0, #8]
   1282c:	str	r3, [r0, #12]
   12830:	bx	lr
   12834:	mov	r2, r1
   12838:	ldr	r3, [r0]
   1283c:	mov	r1, #0
   12840:	b	127d0 <error@@Base+0x8cc>
   12844:	mov	r2, r1
   12848:	mov	r3, #0
   1284c:	ldr	r1, [r0, #4]
   12850:	b	127d0 <error@@Base+0x8cc>
   12854:	mov	r3, r2
   12858:	mov	r2, r1
   1285c:	ldr	r1, [r3]
   12860:	b	127d0 <error@@Base+0x8cc>
   12864:	ldr	r3, [r1, #4]
   12868:	b	127d0 <error@@Base+0x8cc>
   1286c:	ldr	r3, [r1]
   12870:	ldr	r2, [r1, #4]
   12874:	cmp	r3, #0
   12878:	push	{r4, r5, r6, lr}
   1287c:	mov	r4, r0
   12880:	strne	r2, [r3, #4]
   12884:	streq	r2, [r0]
   12888:	ldr	r2, [r1, #4]
   1288c:	mov	r5, #0
   12890:	cmp	r2, #0
   12894:	streq	r3, [r0, #4]
   12898:	ldr	r0, [r0, #8]
   1289c:	strne	r3, [r2]
   128a0:	cmp	r0, r5
   128a4:	str	r5, [r1, #4]
   128a8:	str	r5, [r1]
   128ac:	beq	128b8 <error@@Base+0x9b4>
   128b0:	bl	10a28 <free@plt>
   128b4:	str	r5, [r4, #8]
   128b8:	ldr	r3, [r4, #12]
   128bc:	sub	r3, r3, #1
   128c0:	str	r3, [r4, #12]
   128c4:	pop	{r4, r5, r6, pc}
   128c8:	ldr	r3, [r0, #8]
   128cc:	cmp	r3, #0
   128d0:	bxne	lr
   128d4:	ldr	r3, [r0, #12]
   128d8:	cmp	r3, #0
   128dc:	bxeq	lr
   128e0:	push	{r4, lr}
   128e4:	mov	r1, #4
   128e8:	mov	r4, r0
   128ec:	mov	r0, r3
   128f0:	bl	11f40 <error@@Base+0x3c>
   128f4:	ldr	r3, [r4]
   128f8:	str	r0, [r4, #8]
   128fc:	sub	r0, r0, #4
   12900:	cmp	r3, #0
   12904:	bne	1290c <error@@Base+0xa08>
   12908:	pop	{r4, pc}
   1290c:	str	r3, [r0, #4]!
   12910:	ldr	r3, [r3, #4]
   12914:	b	12900 <error@@Base+0x9fc>
   12918:	push	{r4, r5, r6, lr}
   1291c:	mov	r5, r0
   12920:	mov	r6, r1
   12924:	ldr	r4, [r5]
   12928:	cmp	r4, #0
   1292c:	bne	12934 <error@@Base+0xa30>
   12930:	pop	{r4, r5, r6, pc}
   12934:	mov	r0, r5
   12938:	mov	r1, r4
   1293c:	bl	1286c <error@@Base+0x968>
   12940:	mov	r0, r4
   12944:	blx	r6
   12948:	b	12924 <error@@Base+0xa20>
   1294c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12950:	mov	r7, r0
   12954:	ldr	sl, [pc, #248]	; 12a54 <error@@Base+0xb50>
   12958:	mov	r9, r1
   1295c:	mov	r6, sl
   12960:	ldr	r3, [sl]
   12964:	mov	r4, r9
   12968:	mov	r5, r7
   1296c:	ldr	fp, [r3, r7, lsl #2]
   12970:	cmp	r5, r4
   12974:	blt	129c0 <error@@Base+0xabc>
   12978:	ldr	r3, [r6]
   1297c:	sub	r1, r4, #1
   12980:	cmp	r7, r1
   12984:	str	fp, [r3, r4, lsl #2]
   12988:	bge	12994 <error@@Base+0xa90>
   1298c:	mov	r0, r7
   12990:	bl	1294c <error@@Base+0xa48>
   12994:	add	r7, r5, #1
   12998:	cmp	r7, r9
   1299c:	blt	12960 <error@@Base+0xa5c>
   129a0:	add	sp, sp, #12
   129a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129a8:	sub	r4, r4, #1
   129ac:	cmp	r5, r4
   129b0:	sub	r8, r8, #4
   129b4:	bne	129c4 <error@@Base+0xac0>
   129b8:	mov	r2, r4
   129bc:	b	12a38 <error@@Base+0xb34>
   129c0:	lsl	r8, r4, #2
   129c4:	ldm	r6, {r2, r3}
   129c8:	mov	r0, fp
   129cc:	ldr	r1, [r2, r8]
   129d0:	blx	r3
   129d4:	cmp	r0, #0
   129d8:	blt	129a8 <error@@Base+0xaa4>
   129dc:	ldr	r2, [r6]
   129e0:	lsl	r1, r5, #2
   129e4:	add	r8, r5, #1
   129e8:	ldr	r0, [r2, r4, lsl #2]
   129ec:	lsl	r3, r4, #2
   129f0:	str	r0, [r2, r5, lsl #2]
   129f4:	add	r5, r1, #4
   129f8:	cmp	r8, r4
   129fc:	bge	12a4c <error@@Base+0xb48>
   12a00:	ldm	r6, {r1, r2}
   12a04:	mov	r0, fp
   12a08:	str	r3, [sp, #4]
   12a0c:	ldr	r1, [r1, r5]
   12a10:	blx	r2
   12a14:	add	r5, r5, #4
   12a18:	ldr	r3, [sp, #4]
   12a1c:	cmp	r0, #0
   12a20:	bgt	12a44 <error@@Base+0xb40>
   12a24:	ldr	r1, [r6]
   12a28:	sub	r2, r4, #1
   12a2c:	mov	r4, r8
   12a30:	ldr	r0, [r1, r8, lsl #2]
   12a34:	str	r0, [r1, r3]
   12a38:	mov	r5, r4
   12a3c:	mov	r4, r2
   12a40:	b	12970 <error@@Base+0xa6c>
   12a44:	add	r8, r8, #1
   12a48:	b	129f8 <error@@Base+0xaf4>
   12a4c:	bne	12a24 <error@@Base+0xb20>
   12a50:	b	129b8 <error@@Base+0xab4>
   12a54:	andeq	r7, r2, r0, asr #2
   12a58:	cmp	r0, #1
   12a5c:	bxle	lr
   12a60:	ldr	r3, [pc, #12]	; 12a74 <error@@Base+0xb70>
   12a64:	stm	r3, {r1, r2}
   12a68:	sub	r1, r0, #1
   12a6c:	mov	r0, #0
   12a70:	b	1294c <error@@Base+0xa48>
   12a74:	andeq	r7, r2, r0, asr #2
   12a78:	cmp	r1, #0
   12a7c:	beq	12c88 <error@@Base+0xd84>
   12a80:	eor	ip, r0, r1
   12a84:	rsbmi	r1, r1, #0
   12a88:	subs	r2, r1, #1
   12a8c:	beq	12c54 <error@@Base+0xd50>
   12a90:	movs	r3, r0
   12a94:	rsbmi	r3, r0, #0
   12a98:	cmp	r3, r1
   12a9c:	bls	12c60 <error@@Base+0xd5c>
   12aa0:	tst	r1, r2
   12aa4:	beq	12c70 <error@@Base+0xd6c>
   12aa8:	clz	r2, r3
   12aac:	clz	r0, r1
   12ab0:	sub	r2, r0, r2
   12ab4:	rsbs	r2, r2, #31
   12ab8:	addne	r2, r2, r2, lsl #1
   12abc:	mov	r0, #0
   12ac0:	addne	pc, pc, r2, lsl #2
   12ac4:	nop			; (mov r0, r0)
   12ac8:	cmp	r3, r1, lsl #31
   12acc:	adc	r0, r0, r0
   12ad0:	subcs	r3, r3, r1, lsl #31
   12ad4:	cmp	r3, r1, lsl #30
   12ad8:	adc	r0, r0, r0
   12adc:	subcs	r3, r3, r1, lsl #30
   12ae0:	cmp	r3, r1, lsl #29
   12ae4:	adc	r0, r0, r0
   12ae8:	subcs	r3, r3, r1, lsl #29
   12aec:	cmp	r3, r1, lsl #28
   12af0:	adc	r0, r0, r0
   12af4:	subcs	r3, r3, r1, lsl #28
   12af8:	cmp	r3, r1, lsl #27
   12afc:	adc	r0, r0, r0
   12b00:	subcs	r3, r3, r1, lsl #27
   12b04:	cmp	r3, r1, lsl #26
   12b08:	adc	r0, r0, r0
   12b0c:	subcs	r3, r3, r1, lsl #26
   12b10:	cmp	r3, r1, lsl #25
   12b14:	adc	r0, r0, r0
   12b18:	subcs	r3, r3, r1, lsl #25
   12b1c:	cmp	r3, r1, lsl #24
   12b20:	adc	r0, r0, r0
   12b24:	subcs	r3, r3, r1, lsl #24
   12b28:	cmp	r3, r1, lsl #23
   12b2c:	adc	r0, r0, r0
   12b30:	subcs	r3, r3, r1, lsl #23
   12b34:	cmp	r3, r1, lsl #22
   12b38:	adc	r0, r0, r0
   12b3c:	subcs	r3, r3, r1, lsl #22
   12b40:	cmp	r3, r1, lsl #21
   12b44:	adc	r0, r0, r0
   12b48:	subcs	r3, r3, r1, lsl #21
   12b4c:	cmp	r3, r1, lsl #20
   12b50:	adc	r0, r0, r0
   12b54:	subcs	r3, r3, r1, lsl #20
   12b58:	cmp	r3, r1, lsl #19
   12b5c:	adc	r0, r0, r0
   12b60:	subcs	r3, r3, r1, lsl #19
   12b64:	cmp	r3, r1, lsl #18
   12b68:	adc	r0, r0, r0
   12b6c:	subcs	r3, r3, r1, lsl #18
   12b70:	cmp	r3, r1, lsl #17
   12b74:	adc	r0, r0, r0
   12b78:	subcs	r3, r3, r1, lsl #17
   12b7c:	cmp	r3, r1, lsl #16
   12b80:	adc	r0, r0, r0
   12b84:	subcs	r3, r3, r1, lsl #16
   12b88:	cmp	r3, r1, lsl #15
   12b8c:	adc	r0, r0, r0
   12b90:	subcs	r3, r3, r1, lsl #15
   12b94:	cmp	r3, r1, lsl #14
   12b98:	adc	r0, r0, r0
   12b9c:	subcs	r3, r3, r1, lsl #14
   12ba0:	cmp	r3, r1, lsl #13
   12ba4:	adc	r0, r0, r0
   12ba8:	subcs	r3, r3, r1, lsl #13
   12bac:	cmp	r3, r1, lsl #12
   12bb0:	adc	r0, r0, r0
   12bb4:	subcs	r3, r3, r1, lsl #12
   12bb8:	cmp	r3, r1, lsl #11
   12bbc:	adc	r0, r0, r0
   12bc0:	subcs	r3, r3, r1, lsl #11
   12bc4:	cmp	r3, r1, lsl #10
   12bc8:	adc	r0, r0, r0
   12bcc:	subcs	r3, r3, r1, lsl #10
   12bd0:	cmp	r3, r1, lsl #9
   12bd4:	adc	r0, r0, r0
   12bd8:	subcs	r3, r3, r1, lsl #9
   12bdc:	cmp	r3, r1, lsl #8
   12be0:	adc	r0, r0, r0
   12be4:	subcs	r3, r3, r1, lsl #8
   12be8:	cmp	r3, r1, lsl #7
   12bec:	adc	r0, r0, r0
   12bf0:	subcs	r3, r3, r1, lsl #7
   12bf4:	cmp	r3, r1, lsl #6
   12bf8:	adc	r0, r0, r0
   12bfc:	subcs	r3, r3, r1, lsl #6
   12c00:	cmp	r3, r1, lsl #5
   12c04:	adc	r0, r0, r0
   12c08:	subcs	r3, r3, r1, lsl #5
   12c0c:	cmp	r3, r1, lsl #4
   12c10:	adc	r0, r0, r0
   12c14:	subcs	r3, r3, r1, lsl #4
   12c18:	cmp	r3, r1, lsl #3
   12c1c:	adc	r0, r0, r0
   12c20:	subcs	r3, r3, r1, lsl #3
   12c24:	cmp	r3, r1, lsl #2
   12c28:	adc	r0, r0, r0
   12c2c:	subcs	r3, r3, r1, lsl #2
   12c30:	cmp	r3, r1, lsl #1
   12c34:	adc	r0, r0, r0
   12c38:	subcs	r3, r3, r1, lsl #1
   12c3c:	cmp	r3, r1
   12c40:	adc	r0, r0, r0
   12c44:	subcs	r3, r3, r1
   12c48:	cmp	ip, #0
   12c4c:	rsbmi	r0, r0, #0
   12c50:	bx	lr
   12c54:	teq	ip, r0
   12c58:	rsbmi	r0, r0, #0
   12c5c:	bx	lr
   12c60:	movcc	r0, #0
   12c64:	asreq	r0, ip, #31
   12c68:	orreq	r0, r0, #1
   12c6c:	bx	lr
   12c70:	clz	r2, r1
   12c74:	rsb	r2, r2, #31
   12c78:	cmp	ip, #0
   12c7c:	lsr	r0, r3, r2
   12c80:	rsbmi	r0, r0, #0
   12c84:	bx	lr
   12c88:	cmp	r0, #0
   12c8c:	mvngt	r0, #-2147483648	; 0x80000000
   12c90:	movlt	r0, #-2147483648	; 0x80000000
   12c94:	b	12cb8 <error@@Base+0xdb4>
   12c98:	cmp	r1, #0
   12c9c:	beq	12c88 <error@@Base+0xd84>
   12ca0:	push	{r0, r1, lr}
   12ca4:	bl	12a80 <error@@Base+0xb7c>
   12ca8:	pop	{r1, r2, lr}
   12cac:	mul	r3, r2, r0
   12cb0:	sub	r1, r1, r3
   12cb4:	bx	lr
   12cb8:	push	{r1, lr}
   12cbc:	mov	r0, #8
   12cc0:	bl	109f8 <raise@plt>
   12cc4:	pop	{r1, pc}
   12cc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ccc:	mov	r7, r0
   12cd0:	ldr	r6, [pc, #72]	; 12d20 <error@@Base+0xe1c>
   12cd4:	ldr	r5, [pc, #72]	; 12d24 <error@@Base+0xe20>
   12cd8:	add	r6, pc, r6
   12cdc:	add	r5, pc, r5
   12ce0:	sub	r6, r6, r5
   12ce4:	mov	r8, r1
   12ce8:	mov	r9, r2
   12cec:	bl	109cc <calloc@plt-0x20>
   12cf0:	asrs	r6, r6, #2
   12cf4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12cf8:	mov	r4, #0
   12cfc:	add	r4, r4, #1
   12d00:	ldr	r3, [r5], #4
   12d04:	mov	r2, r9
   12d08:	mov	r1, r8
   12d0c:	mov	r0, r7
   12d10:	blx	r3
   12d14:	cmp	r6, r4
   12d18:	bne	12cfc <error@@Base+0xdf8>
   12d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d20:	andeq	r4, r1, r0, lsr #2
   12d24:	andeq	r4, r1, r8, lsl r1
   12d28:	bx	lr
   12d2c:	mov	r2, r1
   12d30:	mov	r1, r0
   12d34:	mov	r0, #3
   12d38:	b	10a88 <__xstat@plt>

Disassembly of section .fini:

00012d3c <.fini>:
   12d3c:	push	{r3, lr}
   12d40:	pop	{r3, pc}
