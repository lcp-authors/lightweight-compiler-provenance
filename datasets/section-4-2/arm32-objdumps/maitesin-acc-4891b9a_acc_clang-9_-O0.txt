
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011ebc <.init>:
   11ebc:	push	{r3, lr}
   11ec0:	bl	12110 <_start@@Base+0x3c>
   11ec4:	pop	{r3, pc}

Disassembly of section .plt:

00011ec8 <fdopen@plt-0x14>:
   11ec8:	push	{lr}		; (str lr, [sp, #-4]!)
   11ecc:	ldr	lr, [pc, #4]	; 11ed8 <fdopen@plt-0x4>
   11ed0:	add	lr, pc, lr
   11ed4:	ldr	pc, [lr, #8]!
   11ed8:	andeq	pc, r1, r8, lsr #2

00011edc <fdopen@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #126976	; 0x1f000
   11ee4:	ldr	pc, [ip, #296]!	; 0x128

00011ee8 <strtol@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #126976	; 0x1f000
   11ef0:	ldr	pc, [ip, #288]!	; 0x120

00011ef4 <fopen@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #126976	; 0x1f000
   11efc:	ldr	pc, [ip, #280]!	; 0x118

00011f00 <fflush@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #126976	; 0x1f000
   11f08:	ldr	pc, [ip, #272]!	; 0x110

00011f0c <free@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #126976	; 0x1f000
   11f14:	ldr	pc, [ip, #264]!	; 0x108

00011f18 <memcpy@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #126976	; 0x1f000
   11f20:	ldr	pc, [ip, #256]!	; 0x100

00011f24 <mmap64@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #126976	; 0x1f000
   11f2c:	ldr	pc, [ip, #248]!	; 0xf8

00011f30 <ftell@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #126976	; 0x1f000
   11f38:	ldr	pc, [ip, #240]!	; 0xf0

00011f3c <uname@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #126976	; 0x1f000
   11f44:	ldr	pc, [ip, #232]!	; 0xe8

00011f48 <strdup@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #126976	; 0x1f000
   11f50:	ldr	pc, [ip, #224]!	; 0xe0

00011f54 <realloc@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #126976	; 0x1f000
   11f5c:	ldr	pc, [ip, #216]!	; 0xd8

00011f60 <fwrite@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #126976	; 0x1f000
   11f68:	ldr	pc, [ip, #208]!	; 0xd0

00011f6c <fread@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #126976	; 0x1f000
   11f74:	ldr	pc, [ip, #200]!	; 0xc8

00011f78 <open64@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #126976	; 0x1f000
   11f80:	ldr	pc, [ip, #192]!	; 0xc0

00011f84 <getenv@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #126976	; 0x1f000
   11f8c:	ldr	pc, [ip, #184]!	; 0xb8

00011f90 <malloc@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #126976	; 0x1f000
   11f98:	ldr	pc, [ip, #176]!	; 0xb0

00011f9c <__libc_start_main@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #126976	; 0x1f000
   11fa4:	ldr	pc, [ip, #168]!	; 0xa8

00011fa8 <strerror@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #126976	; 0x1f000
   11fb0:	ldr	pc, [ip, #160]!	; 0xa0

00011fb4 <__gmon_start__@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #126976	; 0x1f000
   11fbc:	ldr	pc, [ip, #152]!	; 0x98

00011fc0 <getpid@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #126976	; 0x1f000
   11fc8:	ldr	pc, [ip, #144]!	; 0x90

00011fcc <exit@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #126976	; 0x1f000
   11fd4:	ldr	pc, [ip, #136]!	; 0x88

00011fd8 <strlen@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #126976	; 0x1f000
   11fe0:	ldr	pc, [ip, #128]!	; 0x80

00011fe4 <strchr@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #126976	; 0x1f000
   11fec:	ldr	pc, [ip, #120]!	; 0x78

00011ff0 <getopt@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #126976	; 0x1f000
   11ff8:	ldr	pc, [ip, #112]!	; 0x70

00011ffc <fprintf@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #126976	; 0x1f000
   12004:	ldr	pc, [ip, #104]!	; 0x68

00012008 <__errno_location@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #126976	; 0x1f000
   12010:	ldr	pc, [ip, #96]!	; 0x60

00012014 <__cxa_atexit@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #126976	; 0x1f000
   1201c:	ldr	pc, [ip, #88]!	; 0x58

00012020 <mkdir@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #126976	; 0x1f000
   12028:	ldr	pc, [ip, #80]!	; 0x50

0001202c <memset@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #126976	; 0x1f000
   12034:	ldr	pc, [ip, #72]!	; 0x48

00012038 <strncpy@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #126976	; 0x1f000
   12040:	ldr	pc, [ip, #64]!	; 0x40

00012044 <prctl@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #126976	; 0x1f000
   1204c:	ldr	pc, [ip, #56]!	; 0x38

00012050 <fileno@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #126976	; 0x1f000
   12058:	ldr	pc, [ip, #48]!	; 0x30

0001205c <fclose@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #126976	; 0x1f000
   12064:	ldr	pc, [ip, #40]!	; 0x28

00012068 <strnlen@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #126976	; 0x1f000
   12070:	ldr	pc, [ip, #32]!

00012074 <munmap@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #126976	; 0x1f000
   1207c:	ldr	pc, [ip, #24]!

00012080 <fcntl64@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #126976	; 0x1f000
   12088:	ldr	pc, [ip, #16]!

0001208c <strrchr@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #126976	; 0x1f000
   12094:	ldr	pc, [ip, #8]!

00012098 <msync@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #126976	; 0x1f000
   120a0:	ldr	pc, [ip, #0]!

000120a4 <atoi@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #122880	; 0x1e000
   120ac:	ldr	pc, [ip, #4088]!	; 0xff8

000120b0 <fseek@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #122880	; 0x1e000
   120b8:	ldr	pc, [ip, #4080]!	; 0xff0

000120bc <strncmp@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #122880	; 0x1e000
   120c4:	ldr	pc, [ip, #4072]!	; 0xfe8

000120c8 <abort@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #122880	; 0x1e000
   120d0:	ldr	pc, [ip, #4064]!	; 0xfe0

Disassembly of section .text:

000120d4 <_start@@Base>:
   120d4:	mov	fp, #0
   120d8:	mov	lr, #0
   120dc:	pop	{r1}		; (ldr r1, [sp], #4)
   120e0:	mov	r2, sp
   120e4:	push	{r2}		; (str r2, [sp, #-4]!)
   120e8:	push	{r0}		; (str r0, [sp, #-4]!)
   120ec:	ldr	ip, [pc, #16]	; 12104 <_start@@Base+0x30>
   120f0:	push	{ip}		; (str ip, [sp, #-4]!)
   120f4:	ldr	r0, [pc, #12]	; 12108 <_start@@Base+0x34>
   120f8:	ldr	r3, [pc, #12]	; 1210c <_start@@Base+0x38>
   120fc:	bl	11f9c <__libc_start_main@plt>
   12100:	bl	120c8 <abort@plt>
   12104:	andeq	lr, r1, r4, lsl #21
   12108:	andeq	r2, r1, r8, asr #12
   1210c:	andeq	lr, r1, r4, lsr #20
   12110:	ldr	r3, [pc, #20]	; 1212c <_start@@Base+0x58>
   12114:	ldr	r2, [pc, #20]	; 12130 <_start@@Base+0x5c>
   12118:	add	r3, pc, r3
   1211c:	ldr	r2, [r3, r2]
   12120:	cmp	r2, #0
   12124:	bxeq	lr
   12128:	b	11fb4 <__gmon_start__@plt>
   1212c:	andeq	lr, r1, r0, ror #29
   12130:	andeq	r0, r0, r8, asr #1
   12134:	ldr	r0, [pc, #24]	; 12154 <_start@@Base+0x80>
   12138:	ldr	r3, [pc, #24]	; 12158 <_start@@Base+0x84>
   1213c:	cmp	r3, r0
   12140:	bxeq	lr
   12144:	ldr	r3, [pc, #16]	; 1215c <_start@@Base+0x88>
   12148:	cmp	r3, #0
   1214c:	bxeq	lr
   12150:	bx	r3
   12154:	andeq	r1, r3, r0, ror #1
   12158:	andeq	r1, r3, r0, ror #1
   1215c:	andeq	r0, r0, r0
   12160:	ldr	r0, [pc, #36]	; 1218c <_start@@Base+0xb8>
   12164:	ldr	r1, [pc, #36]	; 12190 <_start@@Base+0xbc>
   12168:	sub	r1, r1, r0
   1216c:	asr	r1, r1, #2
   12170:	add	r1, r1, r1, lsr #31
   12174:	asrs	r1, r1, #1
   12178:	bxeq	lr
   1217c:	ldr	r3, [pc, #16]	; 12194 <_start@@Base+0xc0>
   12180:	cmp	r3, #0
   12184:	bxeq	lr
   12188:	bx	r3
   1218c:	andeq	r1, r3, r0, ror #1
   12190:	andeq	r1, r3, r0, ror #1
   12194:	andeq	r0, r0, r0
   12198:	push	{r4, lr}
   1219c:	ldr	r4, [pc, #24]	; 121bc <_start@@Base+0xe8>
   121a0:	ldrb	r3, [r4]
   121a4:	cmp	r3, #0
   121a8:	popne	{r4, pc}
   121ac:	bl	12134 <_start@@Base+0x60>
   121b0:	mov	r3, #1
   121b4:	strb	r3, [r4]
   121b8:	pop	{r4, pc}
   121bc:	andeq	r1, r3, r0, ror #1
   121c0:	b	12160 <_start@@Base+0x8c>

000121c4 <load_file@@Base>:
   121c4:	push	{fp, lr}
   121c8:	mov	fp, sp
   121cc:	sub	sp, sp, #88	; 0x58
   121d0:	ldr	r1, [pc, #852]	; 1252c <load_file@@Base+0x368>
   121d4:	add	r1, pc, r1
   121d8:	str	r0, [fp, #-24]	; 0xffffffe8
   121dc:	str	r1, [fp, #-28]	; 0xffffffe4
   121e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   121e4:	ldr	r1, [pc, #840]	; 12534 <load_file@@Base+0x370>
   121e8:	add	r1, pc, r1
   121ec:	ldr	r2, [r0]
   121f0:	ldr	r3, [r0, #4]
   121f4:	adds	r2, r2, #1
   121f8:	adc	r3, r3, #0
   121fc:	str	r2, [r0]
   12200:	str	r3, [r0, #4]
   12204:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12208:	str	r0, [fp, #-4]
   1220c:	movw	r2, #0
   12210:	str	r2, [fp, #-8]
   12214:	ldr	r0, [fp, #-4]
   12218:	bl	11ef4 <fopen@plt>
   1221c:	ldr	r1, [pc, #780]	; 12530 <load_file@@Base+0x36c>
   12220:	add	r1, pc, r1
   12224:	add	r2, r1, #8
   12228:	add	r1, r1, #16
   1222c:	str	r0, [fp, #-12]
   12230:	ldr	r0, [fp, #-12]
   12234:	movw	r3, #0
   12238:	cmp	r0, r3
   1223c:	str	r2, [fp, #-32]	; 0xffffffe0
   12240:	str	r1, [fp, #-36]	; 0xffffffdc
   12244:	beq	124e4 <load_file@@Base+0x320>
   12248:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1224c:	ldr	r1, [r0]
   12250:	ldr	r2, [r0, #4]
   12254:	adds	r1, r1, #1
   12258:	adc	r2, r2, #0
   1225c:	str	r1, [r0]
   12260:	str	r2, [r0, #4]
   12264:	ldr	r0, [fp, #-12]
   12268:	movw	r1, #0
   1226c:	movw	r2, #2
   12270:	bl	120b0 <fseek@plt>
   12274:	ldr	r1, [pc, #700]	; 12538 <load_file@@Base+0x374>
   12278:	add	r1, pc, r1
   1227c:	add	r2, r1, #24
   12280:	add	r1, r1, #32
   12284:	cmp	r0, #0
   12288:	str	r2, [fp, #-40]	; 0xffffffd8
   1228c:	str	r1, [sp, #44]	; 0x2c
   12290:	bne	124b0 <load_file@@Base+0x2ec>
   12294:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12298:	ldr	r1, [r0]
   1229c:	ldr	r2, [r0, #4]
   122a0:	adds	r1, r1, #1
   122a4:	adc	r2, r2, #0
   122a8:	str	r1, [r0]
   122ac:	str	r2, [r0, #4]
   122b0:	ldr	r0, [fp, #-12]
   122b4:	bl	11f30 <ftell@plt>
   122b8:	ldr	r1, [pc, #636]	; 1253c <load_file@@Base+0x378>
   122bc:	add	r1, pc, r1
   122c0:	add	r2, r1, #40	; 0x28
   122c4:	add	r1, r1, #48	; 0x30
   122c8:	str	r0, [fp, #-16]
   122cc:	ldr	r0, [fp, #-16]
   122d0:	cmn	r0, #1
   122d4:	str	r2, [sp, #40]	; 0x28
   122d8:	str	r1, [sp, #36]	; 0x24
   122dc:	bne	12324 <load_file@@Base+0x160>
   122e0:	ldr	r0, [sp, #40]	; 0x28
   122e4:	ldr	r1, [pc, #628]	; 12560 <load_file@@Base+0x39c>
   122e8:	add	r1, pc, r1
   122ec:	ldr	r2, [pc, #624]	; 12564 <load_file@@Base+0x3a0>
   122f0:	ldr	r2, [pc, r2]
   122f4:	ldr	r3, [r0]
   122f8:	ldr	ip, [r0, #4]
   122fc:	adds	r3, r3, #1
   12300:	adc	ip, ip, #0
   12304:	str	r3, [r0]
   12308:	str	ip, [r0, #4]
   1230c:	ldr	r0, [r2]
   12310:	bl	11ffc <fprintf@plt>
   12314:	movw	r1, #1
   12318:	str	r0, [sp, #32]
   1231c:	mov	r0, r1
   12320:	bl	11fcc <exit@plt>
   12324:	ldr	r0, [sp, #36]	; 0x24
   12328:	ldr	r1, [r0]
   1232c:	ldr	r2, [r0, #4]
   12330:	adds	r1, r1, #1
   12334:	adc	r2, r2, #0
   12338:	str	r1, [r0]
   1233c:	str	r2, [r0, #4]
   12340:	ldr	r0, [fp, #-16]
   12344:	mov	r1, r0
   12348:	add	r0, r0, #1
   1234c:	str	r1, [sp, #28]
   12350:	bl	11f90 <malloc@plt>
   12354:	str	r0, [fp, #-8]
   12358:	ldr	r0, [fp, #-12]
   1235c:	movw	r1, #0
   12360:	str	r1, [sp, #24]
   12364:	ldr	r2, [sp, #24]
   12368:	bl	120b0 <fseek@plt>
   1236c:	ldr	r1, [pc, #460]	; 12540 <load_file@@Base+0x37c>
   12370:	add	r1, pc, r1
   12374:	add	r2, r1, #56	; 0x38
   12378:	add	r1, r1, #64	; 0x40
   1237c:	cmp	r0, #0
   12380:	str	r2, [sp, #20]
   12384:	str	r1, [sp, #16]
   12388:	beq	123d0 <load_file@@Base+0x20c>
   1238c:	ldr	r0, [sp, #20]
   12390:	ldr	r1, [pc, #448]	; 12558 <load_file@@Base+0x394>
   12394:	add	r1, pc, r1
   12398:	ldr	r2, [pc, #444]	; 1255c <load_file@@Base+0x398>
   1239c:	ldr	r2, [pc, r2]
   123a0:	ldr	r3, [r0]
   123a4:	ldr	ip, [r0, #4]
   123a8:	adds	r3, r3, #1
   123ac:	adc	ip, ip, #0
   123b0:	str	r3, [r0]
   123b4:	str	ip, [r0, #4]
   123b8:	ldr	r0, [r2]
   123bc:	bl	11ffc <fprintf@plt>
   123c0:	movw	r1, #1
   123c4:	str	r0, [sp, #12]
   123c8:	mov	r0, r1
   123cc:	bl	11fcc <exit@plt>
   123d0:	ldr	r0, [sp, #16]
   123d4:	ldr	r1, [r0]
   123d8:	ldr	r2, [r0, #4]
   123dc:	adds	r1, r1, #1
   123e0:	adc	r2, r2, #0
   123e4:	str	r1, [r0]
   123e8:	str	r2, [r0, #4]
   123ec:	ldr	r0, [fp, #-8]
   123f0:	ldr	r2, [fp, #-16]
   123f4:	ldr	r3, [fp, #-12]
   123f8:	movw	r1, #1
   123fc:	bl	11f6c <fread@plt>
   12400:	ldr	r1, [pc, #316]	; 12544 <load_file@@Base+0x380>
   12404:	add	r1, pc, r1
   12408:	add	r2, r1, #72	; 0x48
   1240c:	add	r1, r1, #80	; 0x50
   12410:	str	r0, [fp, #-20]	; 0xffffffec
   12414:	ldr	r0, [fp, #-20]	; 0xffffffec
   12418:	cmp	r0, #0
   1241c:	str	r2, [sp, #8]
   12420:	str	r1, [sp, #4]
   12424:	bne	12470 <load_file@@Base+0x2ac>
   12428:	ldr	r0, [sp, #8]
   1242c:	ldr	r1, [pc, #284]	; 12550 <load_file@@Base+0x38c>
   12430:	add	r1, pc, r1
   12434:	ldr	r2, [pc, #280]	; 12554 <load_file@@Base+0x390>
   12438:	ldr	r2, [pc, r2]
   1243c:	ldr	r3, [r0]
   12440:	ldr	ip, [r0, #4]
   12444:	adds	r3, r3, #1
   12448:	adc	ip, ip, #0
   1244c:	str	r3, [r0]
   12450:	str	ip, [r0, #4]
   12454:	ldr	r0, [r2]
   12458:	ldr	r2, [fp, #-4]
   1245c:	bl	11ffc <fprintf@plt>
   12460:	movw	r1, #1
   12464:	str	r0, [sp]
   12468:	mov	r0, r1
   1246c:	bl	11fcc <exit@plt>
   12470:	ldr	r0, [sp, #4]
   12474:	ldr	r1, [pc, #204]	; 12548 <load_file@@Base+0x384>
   12478:	add	r1, pc, r1
   1247c:	add	r1, r1, #88	; 0x58
   12480:	ldr	r2, [r0]
   12484:	ldr	r3, [r0, #4]
   12488:	adds	r2, r2, #1
   1248c:	adc	r3, r3, #0
   12490:	str	r2, [r0]
   12494:	str	r3, [r0, #4]
   12498:	ldr	r0, [fp, #-8]
   1249c:	ldr	r2, [fp, #-20]	; 0xffffffec
   124a0:	add	r0, r0, r2
   124a4:	movw	r2, #0
   124a8:	strb	r2, [r0]
   124ac:	str	r1, [sp, #44]	; 0x2c
   124b0:	ldr	r0, [sp, #44]	; 0x2c
   124b4:	ldr	r1, [r0]
   124b8:	ldr	r2, [r0, #4]
   124bc:	adds	r1, r1, #1
   124c0:	adc	r2, r2, #0
   124c4:	str	r1, [r0]
   124c8:	str	r2, [r0, #4]
   124cc:	ldr	r0, [fp, #-12]
   124d0:	bl	1205c <fclose@plt>
   124d4:	ldr	r1, [pc, #112]	; 1254c <load_file@@Base+0x388>
   124d8:	add	r1, pc, r1
   124dc:	add	r1, r1, #96	; 0x60
   124e0:	str	r1, [fp, #-36]	; 0xffffffdc
   124e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   124e8:	ldr	r1, [r0]
   124ec:	ldr	r2, [r0, #4]
   124f0:	adds	r1, r1, #1
   124f4:	adc	r2, r2, #0
   124f8:	str	r1, [r0]
   124fc:	str	r2, [r0, #4]
   12500:	ldr	r0, [pc, #96]	; 12568 <load_file@@Base+0x3a4>
   12504:	add	r0, pc, r0
   12508:	ldr	r1, [r0, #104]	; 0x68
   1250c:	ldr	r2, [r0, #108]	; 0x6c
   12510:	adds	r1, r1, #1
   12514:	adc	r2, r2, #0
   12518:	str	r1, [r0, #104]	; 0x68
   1251c:	str	r2, [r0, #108]	; 0x6c
   12520:	ldr	r0, [fp, #-8]
   12524:	mov	sp, fp
   12528:	pop	{fp, pc}
   1252c:	andeq	lr, r1, r4, lsl pc
   12530:	andeq	lr, r1, r8, asr #29
   12534:	andeq	ip, r0, sp, lsr #26
   12538:	andeq	lr, r1, r0, ror lr
   1253c:	andeq	lr, r1, ip, lsr #28
   12540:	andeq	lr, r1, r8, ror sp
   12544:	andeq	lr, r1, r4, ror #25
   12548:	andeq	lr, r1, r0, ror ip
   1254c:	andeq	lr, r1, r0, lsl ip
   12550:	ldrdeq	ip, [r0], -sl
   12554:	andeq	lr, r1, r4, lsl #25
   12558:	andeq	ip, r0, r4, asr #14
   1255c:	andeq	lr, r1, r0, lsr #26
   12560:			; <UNDEFINED> instruction: 0x0000c7bc
   12564:	andeq	lr, r1, ip, asr #27
   12568:	andeq	lr, r1, r4, ror #23

0001256c <my_main@@Base>:
   1256c:	push	{fp, lr}
   12570:	mov	fp, sp
   12574:	sub	sp, sp, #56	; 0x38
   12578:	ldr	r2, [pc, #192]	; 12640 <my_main@@Base+0xd4>
   1257c:	add	r2, pc, r2
   12580:	str	r0, [sp, #8]
   12584:	str	r1, [sp, #4]
   12588:	str	r2, [sp]
   1258c:	ldr	r0, [sp]
   12590:	ldr	r1, [r0]
   12594:	ldr	r2, [r0, #4]
   12598:	adds	r1, r1, #1
   1259c:	adc	r2, r2, #0
   125a0:	str	r1, [r0]
   125a4:	str	r2, [r0, #4]
   125a8:	ldr	r0, [pc, #148]	; 12644 <my_main@@Base+0xd8>
   125ac:	add	r0, pc, r0
   125b0:	ldr	r1, [r0, #8]
   125b4:	ldr	r2, [r0, #12]
   125b8:	adds	r1, r1, #1
   125bc:	adc	r2, r2, #0
   125c0:	str	r1, [r0, #8]
   125c4:	str	r2, [r0, #12]
   125c8:	ldr	r0, [sp, #8]
   125cc:	str	r0, [fp, #-4]
   125d0:	ldr	r1, [sp, #4]
   125d4:	str	r1, [fp, #-8]
   125d8:	ldr	r0, [fp, #-4]
   125dc:	bl	121c4 <load_file@@Base>
   125e0:	str	r0, [sp, #12]
   125e4:	ldr	r1, [sp, #12]
   125e8:	sub	r0, fp, #20
   125ec:	bl	13d74 <init_lexer@@Base>
   125f0:	sub	r0, fp, #24
   125f4:	sub	r1, fp, #20
   125f8:	bl	183c4 <init_grammar@@Base>
   125fc:	ldr	r2, [fp, #-8]
   12600:	add	r0, sp, #16
   12604:	sub	r1, fp, #24
   12608:	bl	1a294 <init_generator@@Base>
   1260c:	add	r0, sp, #16
   12610:	bl	1a3d0 <generate_code@@Base>
   12614:	add	r0, sp, #16
   12618:	bl	1a354 <destroy_generator@@Base>
   1261c:	sub	r0, fp, #24
   12620:	bl	18444 <destroy_grammar@@Base>
   12624:	sub	r0, fp, #20
   12628:	bl	13e08 <destroy_lexer@@Base>
   1262c:	ldr	r0, [sp, #12]
   12630:	bl	11f0c <free@plt>
   12634:	movw	r0, #0
   12638:	mov	sp, fp
   1263c:	pop	{fp, pc}
   12640:	ldrdeq	lr, [r1], -ip
   12644:	andeq	lr, r1, ip, lsr #23

00012648 <main@@Base>:
   12648:	push	{fp, lr}
   1264c:	mov	fp, sp
   12650:	sub	sp, sp, #88	; 0x58
   12654:	ldr	r2, [pc, #792]	; 12974 <main@@Base+0x32c>
   12658:	add	r2, pc, r2
   1265c:	str	r0, [fp, #-24]	; 0xffffffe8
   12660:	str	r1, [fp, #-28]	; 0xffffffe4
   12664:	str	r2, [fp, #-32]	; 0xffffffe0
   12668:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1266c:	ldr	r1, [pc, #772]	; 12978 <main@@Base+0x330>
   12670:	add	r1, pc, r1
   12674:	add	r1, r1, #8
   12678:	ldr	r2, [r0]
   1267c:	ldr	r3, [r0, #4]
   12680:	adds	r2, r2, #1
   12684:	adc	r3, r3, #0
   12688:	str	r2, [r0]
   1268c:	str	r3, [r0, #4]
   12690:	movw	r0, #0
   12694:	str	r0, [fp, #-4]
   12698:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1269c:	str	r2, [fp, #-8]
   126a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126a4:	str	r3, [fp, #-12]
   126a8:	str	r0, [fp, #-16]
   126ac:	str	r0, [fp, #-20]	; 0xffffffec
   126b0:	str	r1, [fp, #-36]	; 0xffffffdc
   126b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   126b8:	ldr	r1, [pc, #704]	; 12980 <main@@Base+0x338>
   126bc:	add	r2, pc, r1
   126c0:	ldr	r1, [r0]
   126c4:	ldr	r3, [r0, #4]
   126c8:	adds	r1, r1, #1
   126cc:	adc	r3, r3, #0
   126d0:	str	r1, [r0]
   126d4:	str	r3, [r0, #4]
   126d8:	ldr	r0, [fp, #-8]
   126dc:	ldr	r1, [fp, #-12]
   126e0:	bl	11ff0 <getopt@plt>
   126e4:	ldr	r1, [pc, #656]	; 1297c <main@@Base+0x334>
   126e8:	add	r1, pc, r1
   126ec:	add	r2, r1, #16
   126f0:	add	r1, r1, #24
   126f4:	str	r0, [fp, #-20]	; 0xffffffec
   126f8:	cmn	r0, #1
   126fc:	str	r2, [fp, #-40]	; 0xffffffd8
   12700:	str	r1, [sp, #44]	; 0x2c
   12704:	beq	127b8 <main@@Base+0x170>
   12708:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1270c:	ldr	r1, [r0]
   12710:	ldr	r2, [r0, #4]
   12714:	adds	r1, r1, #1
   12718:	adc	r2, r2, #0
   1271c:	str	r1, [r0]
   12720:	str	r2, [r0, #4]
   12724:	ldr	r0, [pc, #644]	; 129b0 <main@@Base+0x368>
   12728:	add	r0, pc, r0
   1272c:	add	r1, r0, #40	; 0x28
   12730:	add	r0, r0, #32
   12734:	ldr	r2, [fp, #-20]	; 0xffffffec
   12738:	cmp	r2, #111	; 0x6f
   1273c:	str	r1, [sp, #40]	; 0x28
   12740:	str	r0, [sp, #36]	; 0x24
   12744:	bne	12788 <main@@Base+0x140>
   12748:	b	1274c <main@@Base+0x104>
   1274c:	ldr	r0, [sp, #40]	; 0x28
   12750:	ldr	r1, [pc, #588]	; 129a4 <main@@Base+0x35c>
   12754:	add	r1, pc, r1
   12758:	add	r1, r1, #48	; 0x30
   1275c:	ldr	r2, [pc, #580]	; 129a8 <main@@Base+0x360>
   12760:	ldr	r2, [pc, r2]
   12764:	ldr	r3, [r0]
   12768:	ldr	ip, [r0, #4]
   1276c:	adds	r3, r3, #1
   12770:	adc	ip, ip, #0
   12774:	str	r3, [r0]
   12778:	str	ip, [r0, #4]
   1277c:	ldr	r0, [r2]
   12780:	str	r0, [fp, #-16]
   12784:	str	r1, [sp, #36]	; 0x24
   12788:	ldr	r0, [sp, #36]	; 0x24
   1278c:	ldr	r1, [pc, #536]	; 129ac <main@@Base+0x364>
   12790:	add	r1, pc, r1
   12794:	add	r1, r1, #56	; 0x38
   12798:	ldr	r2, [r0]
   1279c:	ldr	r3, [r0, #4]
   127a0:	adds	r2, r2, #1
   127a4:	adc	r3, r3, #0
   127a8:	str	r2, [r0]
   127ac:	str	r3, [r0, #4]
   127b0:	str	r1, [fp, #-36]	; 0xffffffdc
   127b4:	b	126b4 <main@@Base+0x6c>
   127b8:	ldr	r0, [sp, #44]	; 0x2c
   127bc:	ldr	r1, [pc, #448]	; 12984 <main@@Base+0x33c>
   127c0:	add	r1, pc, r1
   127c4:	add	r2, r1, #64	; 0x40
   127c8:	add	r1, r1, #72	; 0x48
   127cc:	ldr	r3, [pc, #436]	; 12988 <main@@Base+0x340>
   127d0:	ldr	r3, [pc, r3]
   127d4:	ldr	ip, [r0]
   127d8:	ldr	lr, [r0, #4]
   127dc:	adds	ip, ip, #1
   127e0:	adc	lr, lr, #0
   127e4:	str	ip, [r0]
   127e8:	str	lr, [r0, #4]
   127ec:	ldr	r0, [r3]
   127f0:	ldr	r3, [fp, #-8]
   127f4:	cmp	r0, r3
   127f8:	str	r2, [sp, #32]
   127fc:	str	r1, [sp, #28]
   12800:	bge	12930 <main@@Base+0x2e8>
   12804:	ldr	r0, [sp, #32]
   12808:	ldr	r1, [pc, #388]	; 12994 <main@@Base+0x34c>
   1280c:	add	r1, pc, r1
   12810:	add	r2, r1, #80	; 0x50
   12814:	add	r1, r1, #88	; 0x58
   12818:	ldr	r3, [r0]
   1281c:	ldr	ip, [r0, #4]
   12820:	adds	r3, r3, #1
   12824:	adc	ip, ip, #0
   12828:	str	r3, [r0]
   1282c:	str	ip, [r0, #4]
   12830:	ldr	r0, [fp, #-12]
   12834:	ldr	r3, [pc, #376]	; 129b4 <main@@Base+0x36c>
   12838:	ldr	r3, [pc, r3]
   1283c:	ldr	r3, [r3]
   12840:	add	r0, r0, r3, lsl #2
   12844:	ldr	r0, [r0]
   12848:	ldr	r3, [fp, #-16]
   1284c:	movw	ip, #0
   12850:	cmp	r3, ip
   12854:	str	r0, [sp, #24]
   12858:	str	r2, [sp, #20]
   1285c:	str	r1, [sp, #16]
   12860:	bne	128a0 <main@@Base+0x258>
   12864:	ldr	r0, [sp, #20]
   12868:	ldr	r1, [pc, #300]	; 1299c <main@@Base+0x354>
   1286c:	add	r1, pc, r1
   12870:	add	r1, r1, #96	; 0x60
   12874:	ldr	r2, [pc, #292]	; 129a0 <main@@Base+0x358>
   12878:	add	r2, pc, r2
   1287c:	ldr	r3, [r0]
   12880:	ldr	ip, [r0, #4]
   12884:	adds	r3, r3, #1
   12888:	adc	ip, ip, #0
   1288c:	str	r3, [r0]
   12890:	str	ip, [r0, #4]
   12894:	str	r1, [sp, #12]
   12898:	str	r2, [sp, #8]
   1289c:	b	128d4 <main@@Base+0x28c>
   128a0:	ldr	r0, [sp, #16]
   128a4:	ldr	r1, [pc, #236]	; 12998 <main@@Base+0x350>
   128a8:	add	r1, pc, r1
   128ac:	add	r1, r1, #104	; 0x68
   128b0:	ldr	r2, [r0]
   128b4:	ldr	r3, [r0, #4]
   128b8:	adds	r2, r2, #1
   128bc:	adc	r3, r3, #0
   128c0:	str	r2, [r0]
   128c4:	str	r3, [r0, #4]
   128c8:	ldr	r0, [fp, #-16]
   128cc:	str	r1, [sp, #12]
   128d0:	str	r0, [sp, #8]
   128d4:	ldr	r0, [sp, #8]
   128d8:	ldr	r1, [sp, #12]
   128dc:	ldr	r2, [r1]
   128e0:	ldr	r3, [r1, #4]
   128e4:	adds	r2, r2, #1
   128e8:	adc	r3, r3, #0
   128ec:	str	r2, [r1]
   128f0:	str	r3, [r1, #4]
   128f4:	ldr	r1, [pc, #188]	; 129b8 <main@@Base+0x370>
   128f8:	add	r1, pc, r1
   128fc:	ldr	r2, [r1, #112]	; 0x70
   12900:	ldr	r3, [r1, #116]	; 0x74
   12904:	adds	r2, r2, #1
   12908:	adc	r3, r3, #0
   1290c:	str	r2, [r1, #112]	; 0x70
   12910:	str	r3, [r1, #116]	; 0x74
   12914:	ldr	r1, [sp, #24]
   12918:	str	r0, [sp, #4]
   1291c:	mov	r0, r1
   12920:	ldr	r1, [sp, #4]
   12924:	bl	1256c <my_main@@Base>
   12928:	mov	sp, fp
   1292c:	pop	{fp, pc}
   12930:	ldr	r0, [sp, #28]
   12934:	ldr	r1, [pc, #80]	; 1298c <main@@Base+0x344>
   12938:	add	r1, pc, r1
   1293c:	ldr	r2, [pc, #76]	; 12990 <main@@Base+0x348>
   12940:	ldr	r2, [pc, r2]
   12944:	ldr	r3, [r0]
   12948:	ldr	ip, [r0, #4]
   1294c:	adds	r3, r3, #1
   12950:	adc	ip, ip, #0
   12954:	str	r3, [r0]
   12958:	str	ip, [r0, #4]
   1295c:	ldr	r0, [r2]
   12960:	bl	11ffc <fprintf@plt>
   12964:	movw	r1, #1
   12968:	str	r0, [sp]
   1296c:	mov	r0, r1
   12970:	bl	11fcc <exit@plt>
   12974:	andeq	lr, r1, r0, lsl fp
   12978:	strdeq	lr, [r1], -r8
   1297c:	andeq	lr, r1, r0, lsl #21
   12980:	andeq	ip, r0, r6, ror #8
   12984:	andeq	lr, r1, r8, lsr #19
   12988:	andeq	lr, r1, r8, ror #17
   1298c:	strdeq	ip, [r0], -r1
   12990:	andeq	lr, r1, ip, ror r7
   12994:	andeq	lr, r1, ip, asr r9
   12998:	andeq	lr, r1, r0, asr #17
   1299c:	strdeq	lr, [r1], -ip
   129a0:	andeq	ip, r0, sp, lsr #5
   129a4:	andeq	lr, r1, r4, lsl sl
   129a8:	andeq	lr, r1, r4, ror #18
   129ac:	ldrdeq	lr, [r1], -r8
   129b0:	andeq	lr, r1, r0, asr #20
   129b4:	andeq	lr, r1, r0, lsl #17
   129b8:	andeq	lr, r1, r0, ror r8
   129bc:	push	{r4, sl, fp, lr}
   129c0:	add	fp, sp, #8
   129c4:	sub	sp, sp, #40	; 0x28
   129c8:	movw	r0, #0
   129cc:	str	r0, [fp, #-12]
   129d0:	b	129d4 <main@@Base+0x38c>
   129d4:	ldr	r0, [fp, #-12]
   129d8:	ldr	r1, [pc, #244]	; 12ad4 <main@@Base+0x48c>
   129dc:	add	r1, pc, r1
   129e0:	movw	r2, #24
   129e4:	mul	r2, r0, r2
   129e8:	add	r1, r1, r2
   129ec:	ldr	r2, [r1]
   129f0:	ldr	r3, [r1, #4]
   129f4:	ldr	ip, [r1, #8]
   129f8:	str	r0, [fp, #-16]
   129fc:	mov	r0, r2
   12a00:	str	r1, [fp, #-20]	; 0xffffffec
   12a04:	mov	r1, r3
   12a08:	mov	r2, ip
   12a0c:	bl	1ba6c <__generate_code_for_binary_boolean_expression@@Base+0x994>
   12a10:	ldr	r0, [fp, #-20]	; 0xffffffec
   12a14:	ldr	r1, [r0, #12]
   12a18:	ldr	r2, [r0, #16]
   12a1c:	ldr	r3, [r0, #20]
   12a20:	movw	ip, #0
   12a24:	cmp	ip, r1
   12a28:	str	r1, [sp, #24]
   12a2c:	str	r2, [sp, #20]
   12a30:	str	r3, [sp, #16]
   12a34:	str	ip, [sp, #12]
   12a38:	bge	12ab0 <main@@Base+0x468>
   12a3c:	ldr	r0, [sp, #12]
   12a40:	add	r1, r0, r0, lsl #2
   12a44:	ldr	r2, [sp, #20]
   12a48:	ldr	r1, [r2, r1, lsl #2]!
   12a4c:	ldr	r3, [r2, #4]
   12a50:	ldr	ip, [r2, #8]
   12a54:	ldr	lr, [r2, #16]
   12a58:	ldrb	r2, [r2, #12]
   12a5c:	mov	r4, sp
   12a60:	str	lr, [r4]
   12a64:	str	r0, [sp, #8]
   12a68:	mov	r0, r1
   12a6c:	mov	r1, r3
   12a70:	str	r2, [sp, #4]
   12a74:	mov	r2, ip
   12a78:	ldr	r3, [sp, #4]
   12a7c:	bl	1c18c <__generate_code_for_binary_boolean_expression@@Base+0x10b4>
   12a80:	ldr	r0, [sp, #16]
   12a84:	ldr	r1, [sp, #8]
   12a88:	add	r2, r0, r1, lsl #3
   12a8c:	ldr	r0, [r2]
   12a90:	ldr	r1, [r2, #4]
   12a94:	bl	1ca40 <__generate_code_for_binary_boolean_expression@@Base+0x1968>
   12a98:	ldr	r0, [sp, #8]
   12a9c:	add	r1, r0, #1
   12aa0:	ldr	r2, [sp, #24]
   12aa4:	cmp	r1, r2
   12aa8:	str	r1, [sp, #12]
   12aac:	blt	12a3c <main@@Base+0x3f4>
   12ab0:	bl	1d1c8 <__generate_code_for_binary_boolean_expression@@Base+0x20f0>
   12ab4:	bl	1df34 <__generate_code_for_binary_boolean_expression@@Base+0x2e5c>
   12ab8:	ldr	r0, [fp, #-16]
   12abc:	add	r1, r0, #1
   12ac0:	cmp	r1, #1
   12ac4:	str	r1, [fp, #-12]
   12ac8:	blt	129d4 <main@@Base+0x38c>
   12acc:	sub	sp, fp, #8
   12ad0:	pop	{r4, sl, fp, pc}
   12ad4:	andeq	sp, r1, ip, lsr #24
   12ad8:	push	{fp, lr}
   12adc:	mov	fp, sp
   12ae0:	bl	129bc <main@@Base+0x374>
   12ae4:	ldr	r0, [pc, #272]	; 12bfc <main@@Base+0x5b4>
   12ae8:	add	r0, pc, r0
   12aec:	mov	r1, #0
   12af0:	str	r1, [r0, #108]	; 0x6c
   12af4:	str	r1, [r0, #104]	; 0x68
   12af8:	str	r1, [r0, #100]	; 0x64
   12afc:	str	r1, [r0, #96]	; 0x60
   12b00:	str	r1, [r0, #92]	; 0x5c
   12b04:	str	r1, [r0, #88]	; 0x58
   12b08:	str	r1, [r0, #84]	; 0x54
   12b0c:	str	r1, [r0, #80]	; 0x50
   12b10:	str	r1, [r0, #76]	; 0x4c
   12b14:	str	r1, [r0, #72]	; 0x48
   12b18:	str	r1, [r0, #68]	; 0x44
   12b1c:	str	r1, [r0, #64]	; 0x40
   12b20:	str	r1, [r0, #60]	; 0x3c
   12b24:	str	r1, [r0, #56]	; 0x38
   12b28:	str	r1, [r0, #52]	; 0x34
   12b2c:	str	r1, [r0, #48]	; 0x30
   12b30:	str	r1, [r0, #44]	; 0x2c
   12b34:	str	r1, [r0, #40]	; 0x28
   12b38:	str	r1, [r0, #36]	; 0x24
   12b3c:	str	r1, [r0, #32]
   12b40:	str	r1, [r0, #28]
   12b44:	str	r1, [r0, #24]
   12b48:	str	r1, [r0, #20]
   12b4c:	str	r1, [r0, #16]
   12b50:	str	r1, [r0, #12]
   12b54:	str	r1, [r0, #8]
   12b58:	str	r1, [r0, #4]
   12b5c:	str	r1, [r0]
   12b60:	ldr	r0, [pc, #152]	; 12c00 <main@@Base+0x5b8>
   12b64:	add	r0, pc, r0
   12b68:	str	r1, [r0, #12]
   12b6c:	str	r1, [r0, #8]
   12b70:	str	r1, [r0, #4]
   12b74:	str	r1, [r0]
   12b78:	ldr	r0, [pc, #132]	; 12c04 <main@@Base+0x5bc>
   12b7c:	add	r0, pc, r0
   12b80:	str	r1, [r0, #116]	; 0x74
   12b84:	str	r1, [r0, #112]	; 0x70
   12b88:	str	r1, [r0, #108]	; 0x6c
   12b8c:	str	r1, [r0, #104]	; 0x68
   12b90:	str	r1, [r0, #100]	; 0x64
   12b94:	str	r1, [r0, #96]	; 0x60
   12b98:	str	r1, [r0, #92]	; 0x5c
   12b9c:	str	r1, [r0, #88]	; 0x58
   12ba0:	str	r1, [r0, #84]	; 0x54
   12ba4:	str	r1, [r0, #80]	; 0x50
   12ba8:	str	r1, [r0, #76]	; 0x4c
   12bac:	str	r1, [r0, #72]	; 0x48
   12bb0:	str	r1, [r0, #68]	; 0x44
   12bb4:	str	r1, [r0, #64]	; 0x40
   12bb8:	str	r1, [r0, #60]	; 0x3c
   12bbc:	str	r1, [r0, #56]	; 0x38
   12bc0:	str	r1, [r0, #52]	; 0x34
   12bc4:	str	r1, [r0, #48]	; 0x30
   12bc8:	str	r1, [r0, #44]	; 0x2c
   12bcc:	str	r1, [r0, #40]	; 0x28
   12bd0:	str	r1, [r0, #36]	; 0x24
   12bd4:	str	r1, [r0, #32]
   12bd8:	str	r1, [r0, #28]
   12bdc:	str	r1, [r0, #24]
   12be0:	str	r1, [r0, #20]
   12be4:	str	r1, [r0, #16]
   12be8:	str	r1, [r0, #12]
   12bec:	str	r1, [r0, #8]
   12bf0:	str	r1, [r0, #4]
   12bf4:	str	r1, [r0]
   12bf8:	pop	{fp, pc}
   12bfc:	andeq	lr, r1, r0, lsl #12
   12c00:	strdeq	lr, [r1], -r4
   12c04:	andeq	lr, r1, ip, ror #11
   12c08:	push	{fp, lr}
   12c0c:	mov	fp, sp
   12c10:	ldr	r0, [pc, #16]	; 12c28 <main@@Base+0x5e0>
   12c14:	add	r0, pc, r0
   12c18:	ldr	r1, [pc, #12]	; 12c2c <main@@Base+0x5e4>
   12c1c:	add	r1, pc, r1
   12c20:	bl	1e3e8 <__gcov_flush@@Base+0xb8>
   12c24:	pop	{fp, pc}
   12c28:			; <UNDEFINED> instruction: 0xfffffda0
   12c2c:			; <UNDEFINED> instruction: 0xfffffeb4

00012c30 <init_token_int_type@@Base>:
   12c30:	sub	sp, sp, #12
   12c34:	ldr	r1, [pc, #96]	; 12c9c <init_token_int_type@@Base+0x6c>
   12c38:	add	r1, pc, r1
   12c3c:	str	r0, [sp, #4]
   12c40:	str	r1, [sp]
   12c44:	ldr	r0, [sp]
   12c48:	ldr	r1, [r0]
   12c4c:	ldr	r2, [r0, #4]
   12c50:	adds	r1, r1, #1
   12c54:	adc	r2, r2, #0
   12c58:	str	r1, [r0]
   12c5c:	str	r2, [r0, #4]
   12c60:	ldr	r0, [pc, #56]	; 12ca0 <init_token_int_type@@Base+0x70>
   12c64:	add	r0, pc, r0
   12c68:	ldr	r1, [r0, #8]
   12c6c:	ldr	r2, [r0, #12]
   12c70:	adds	r1, r1, #1
   12c74:	adc	r2, r2, #0
   12c78:	str	r1, [r0, #8]
   12c7c:	str	r2, [r0, #12]
   12c80:	ldr	r0, [sp, #4]
   12c84:	str	r0, [sp, #8]
   12c88:	ldr	r1, [sp, #8]
   12c8c:	movw	r2, #0
   12c90:	str	r2, [r1]
   12c94:	add	sp, sp, #12
   12c98:	bx	lr
   12c9c:			; <UNDEFINED> instruction: 0x0001e5b0
   12ca0:	andeq	lr, r1, r4, lsl #11

00012ca4 <init_token_int_value@@Base>:
   12ca4:	sub	sp, sp, #20
   12ca8:	ldr	r2, [pc, #120]	; 12d28 <init_token_int_value@@Base+0x84>
   12cac:	add	r2, pc, r2
   12cb0:	str	r0, [sp, #8]
   12cb4:	str	r1, [sp, #4]
   12cb8:	str	r2, [sp]
   12cbc:	ldr	r0, [sp]
   12cc0:	ldr	r1, [r0]
   12cc4:	ldr	r2, [r0, #4]
   12cc8:	adds	r1, r1, #1
   12ccc:	adc	r2, r2, #0
   12cd0:	str	r1, [r0]
   12cd4:	str	r2, [r0, #4]
   12cd8:	ldr	r0, [pc, #76]	; 12d2c <init_token_int_value@@Base+0x88>
   12cdc:	add	r0, pc, r0
   12ce0:	ldr	r1, [r0, #8]
   12ce4:	ldr	r2, [r0, #12]
   12ce8:	adds	r1, r1, #1
   12cec:	adc	r2, r2, #0
   12cf0:	str	r1, [r0, #8]
   12cf4:	str	r2, [r0, #12]
   12cf8:	ldr	r0, [sp, #8]
   12cfc:	str	r0, [sp, #16]
   12d00:	ldr	r1, [sp, #4]
   12d04:	str	r1, [sp, #12]
   12d08:	ldr	r2, [sp, #16]
   12d0c:	movw	r3, #1
   12d10:	str	r3, [r2]
   12d14:	ldr	r2, [sp, #12]
   12d18:	ldr	r3, [sp, #16]
   12d1c:	str	r2, [r3, #4]
   12d20:	add	sp, sp, #20
   12d24:	bx	lr
   12d28:	andeq	lr, r1, ip, asr #10
   12d2c:	andeq	lr, r1, ip, lsl r5

00012d30 <init_token_function@@Base>:
   12d30:	sub	sp, sp, #20
   12d34:	ldr	r2, [pc, #120]	; 12db4 <init_token_function@@Base+0x84>
   12d38:	add	r2, pc, r2
   12d3c:	str	r0, [sp, #8]
   12d40:	str	r1, [sp, #4]
   12d44:	str	r2, [sp]
   12d48:	ldr	r0, [sp]
   12d4c:	ldr	r1, [r0]
   12d50:	ldr	r2, [r0, #4]
   12d54:	adds	r1, r1, #1
   12d58:	adc	r2, r2, #0
   12d5c:	str	r1, [r0]
   12d60:	str	r2, [r0, #4]
   12d64:	ldr	r0, [pc, #76]	; 12db8 <init_token_function@@Base+0x88>
   12d68:	add	r0, pc, r0
   12d6c:	ldr	r1, [r0, #8]
   12d70:	ldr	r2, [r0, #12]
   12d74:	adds	r1, r1, #1
   12d78:	adc	r2, r2, #0
   12d7c:	str	r1, [r0, #8]
   12d80:	str	r2, [r0, #12]
   12d84:	ldr	r0, [sp, #8]
   12d88:	str	r0, [sp, #16]
   12d8c:	ldr	r1, [sp, #4]
   12d90:	str	r1, [sp, #12]
   12d94:	ldr	r2, [sp, #16]
   12d98:	movw	r3, #2
   12d9c:	str	r3, [r2]
   12da0:	ldr	r2, [sp, #12]
   12da4:	ldr	r3, [sp, #16]
   12da8:	str	r2, [r3, #4]
   12dac:	add	sp, sp, #20
   12db0:	bx	lr
   12db4:	ldrdeq	lr, [r1], -r0
   12db8:	andeq	lr, r1, r0, lsr #9

00012dbc <init_token_opar@@Base>:
   12dbc:	sub	sp, sp, #12
   12dc0:	ldr	r1, [pc, #96]	; 12e28 <init_token_opar@@Base+0x6c>
   12dc4:	add	r1, pc, r1
   12dc8:	str	r0, [sp, #4]
   12dcc:	str	r1, [sp]
   12dd0:	ldr	r0, [sp]
   12dd4:	ldr	r1, [r0]
   12dd8:	ldr	r2, [r0, #4]
   12ddc:	adds	r1, r1, #1
   12de0:	adc	r2, r2, #0
   12de4:	str	r1, [r0]
   12de8:	str	r2, [r0, #4]
   12dec:	ldr	r0, [pc, #56]	; 12e2c <init_token_opar@@Base+0x70>
   12df0:	add	r0, pc, r0
   12df4:	ldr	r1, [r0, #8]
   12df8:	ldr	r2, [r0, #12]
   12dfc:	adds	r1, r1, #1
   12e00:	adc	r2, r2, #0
   12e04:	str	r1, [r0, #8]
   12e08:	str	r2, [r0, #12]
   12e0c:	ldr	r0, [sp, #4]
   12e10:	str	r0, [sp, #8]
   12e14:	ldr	r1, [sp, #8]
   12e18:	movw	r2, #3
   12e1c:	str	r2, [r1]
   12e20:	add	sp, sp, #12
   12e24:	bx	lr
   12e28:	andeq	lr, r1, r4, asr r4
   12e2c:	andeq	lr, r1, r8, lsr #8

00012e30 <init_token_cpar@@Base>:
   12e30:	sub	sp, sp, #12
   12e34:	ldr	r1, [pc, #96]	; 12e9c <init_token_cpar@@Base+0x6c>
   12e38:	add	r1, pc, r1
   12e3c:	str	r0, [sp, #4]
   12e40:	str	r1, [sp]
   12e44:	ldr	r0, [sp]
   12e48:	ldr	r1, [r0]
   12e4c:	ldr	r2, [r0, #4]
   12e50:	adds	r1, r1, #1
   12e54:	adc	r2, r2, #0
   12e58:	str	r1, [r0]
   12e5c:	str	r2, [r0, #4]
   12e60:	ldr	r0, [pc, #56]	; 12ea0 <init_token_cpar@@Base+0x70>
   12e64:	add	r0, pc, r0
   12e68:	ldr	r1, [r0, #8]
   12e6c:	ldr	r2, [r0, #12]
   12e70:	adds	r1, r1, #1
   12e74:	adc	r2, r2, #0
   12e78:	str	r1, [r0, #8]
   12e7c:	str	r2, [r0, #12]
   12e80:	ldr	r0, [sp, #4]
   12e84:	str	r0, [sp, #8]
   12e88:	ldr	r1, [sp, #8]
   12e8c:	movw	r2, #4
   12e90:	str	r2, [r1]
   12e94:	add	sp, sp, #12
   12e98:	bx	lr
   12e9c:	strdeq	lr, [r1], -r0
   12ea0:	andeq	lr, r1, r4, asr #7

00012ea4 <init_token_obra@@Base>:
   12ea4:	sub	sp, sp, #12
   12ea8:	ldr	r1, [pc, #96]	; 12f10 <init_token_obra@@Base+0x6c>
   12eac:	add	r1, pc, r1
   12eb0:	str	r0, [sp, #4]
   12eb4:	str	r1, [sp]
   12eb8:	ldr	r0, [sp]
   12ebc:	ldr	r1, [r0]
   12ec0:	ldr	r2, [r0, #4]
   12ec4:	adds	r1, r1, #1
   12ec8:	adc	r2, r2, #0
   12ecc:	str	r1, [r0]
   12ed0:	str	r2, [r0, #4]
   12ed4:	ldr	r0, [pc, #56]	; 12f14 <init_token_obra@@Base+0x70>
   12ed8:	add	r0, pc, r0
   12edc:	ldr	r1, [r0, #8]
   12ee0:	ldr	r2, [r0, #12]
   12ee4:	adds	r1, r1, #1
   12ee8:	adc	r2, r2, #0
   12eec:	str	r1, [r0, #8]
   12ef0:	str	r2, [r0, #12]
   12ef4:	ldr	r0, [sp, #4]
   12ef8:	str	r0, [sp, #8]
   12efc:	ldr	r1, [sp, #8]
   12f00:	movw	r2, #5
   12f04:	str	r2, [r1]
   12f08:	add	sp, sp, #12
   12f0c:	bx	lr
   12f10:	andeq	lr, r1, ip, lsl #7
   12f14:	andeq	lr, r1, r0, ror #6

00012f18 <init_token_cbra@@Base>:
   12f18:	sub	sp, sp, #12
   12f1c:	ldr	r1, [pc, #96]	; 12f84 <init_token_cbra@@Base+0x6c>
   12f20:	add	r1, pc, r1
   12f24:	str	r0, [sp, #4]
   12f28:	str	r1, [sp]
   12f2c:	ldr	r0, [sp]
   12f30:	ldr	r1, [r0]
   12f34:	ldr	r2, [r0, #4]
   12f38:	adds	r1, r1, #1
   12f3c:	adc	r2, r2, #0
   12f40:	str	r1, [r0]
   12f44:	str	r2, [r0, #4]
   12f48:	ldr	r0, [pc, #56]	; 12f88 <init_token_cbra@@Base+0x70>
   12f4c:	add	r0, pc, r0
   12f50:	ldr	r1, [r0, #8]
   12f54:	ldr	r2, [r0, #12]
   12f58:	adds	r1, r1, #1
   12f5c:	adc	r2, r2, #0
   12f60:	str	r1, [r0, #8]
   12f64:	str	r2, [r0, #12]
   12f68:	ldr	r0, [sp, #4]
   12f6c:	str	r0, [sp, #8]
   12f70:	ldr	r1, [sp, #8]
   12f74:	movw	r2, #6
   12f78:	str	r2, [r1]
   12f7c:	add	sp, sp, #12
   12f80:	bx	lr
   12f84:	andeq	lr, r1, r8, lsr #6
   12f88:	strdeq	lr, [r1], -ip

00012f8c <init_token_return@@Base>:
   12f8c:	sub	sp, sp, #12
   12f90:	ldr	r1, [pc, #96]	; 12ff8 <init_token_return@@Base+0x6c>
   12f94:	add	r1, pc, r1
   12f98:	str	r0, [sp, #4]
   12f9c:	str	r1, [sp]
   12fa0:	ldr	r0, [sp]
   12fa4:	ldr	r1, [r0]
   12fa8:	ldr	r2, [r0, #4]
   12fac:	adds	r1, r1, #1
   12fb0:	adc	r2, r2, #0
   12fb4:	str	r1, [r0]
   12fb8:	str	r2, [r0, #4]
   12fbc:	ldr	r0, [pc, #56]	; 12ffc <init_token_return@@Base+0x70>
   12fc0:	add	r0, pc, r0
   12fc4:	ldr	r1, [r0, #8]
   12fc8:	ldr	r2, [r0, #12]
   12fcc:	adds	r1, r1, #1
   12fd0:	adc	r2, r2, #0
   12fd4:	str	r1, [r0, #8]
   12fd8:	str	r2, [r0, #12]
   12fdc:	ldr	r0, [sp, #4]
   12fe0:	str	r0, [sp, #8]
   12fe4:	ldr	r1, [sp, #8]
   12fe8:	movw	r2, #7
   12fec:	str	r2, [r1]
   12ff0:	add	sp, sp, #12
   12ff4:	bx	lr
   12ff8:	andeq	lr, r1, r4, asr #5
   12ffc:	muleq	r1, r8, r2

00013000 <init_token_semicolon@@Base>:
   13000:	sub	sp, sp, #12
   13004:	ldr	r1, [pc, #96]	; 1306c <init_token_semicolon@@Base+0x6c>
   13008:	add	r1, pc, r1
   1300c:	str	r0, [sp, #4]
   13010:	str	r1, [sp]
   13014:	ldr	r0, [sp]
   13018:	ldr	r1, [r0]
   1301c:	ldr	r2, [r0, #4]
   13020:	adds	r1, r1, #1
   13024:	adc	r2, r2, #0
   13028:	str	r1, [r0]
   1302c:	str	r2, [r0, #4]
   13030:	ldr	r0, [pc, #56]	; 13070 <init_token_semicolon@@Base+0x70>
   13034:	add	r0, pc, r0
   13038:	ldr	r1, [r0, #8]
   1303c:	ldr	r2, [r0, #12]
   13040:	adds	r1, r1, #1
   13044:	adc	r2, r2, #0
   13048:	str	r1, [r0, #8]
   1304c:	str	r2, [r0, #12]
   13050:	ldr	r0, [sp, #4]
   13054:	str	r0, [sp, #8]
   13058:	ldr	r1, [sp, #8]
   1305c:	movw	r2, #8
   13060:	str	r2, [r1]
   13064:	add	sp, sp, #12
   13068:	bx	lr
   1306c:	andeq	lr, r1, r0, ror #4
   13070:	andeq	lr, r1, r4, lsr r2

00013074 <init_token_eof@@Base>:
   13074:	sub	sp, sp, #12
   13078:	ldr	r1, [pc, #96]	; 130e0 <init_token_eof@@Base+0x6c>
   1307c:	add	r1, pc, r1
   13080:	str	r0, [sp, #4]
   13084:	str	r1, [sp]
   13088:	ldr	r0, [sp]
   1308c:	ldr	r1, [r0]
   13090:	ldr	r2, [r0, #4]
   13094:	adds	r1, r1, #1
   13098:	adc	r2, r2, #0
   1309c:	str	r1, [r0]
   130a0:	str	r2, [r0, #4]
   130a4:	ldr	r0, [pc, #56]	; 130e4 <init_token_eof@@Base+0x70>
   130a8:	add	r0, pc, r0
   130ac:	ldr	r1, [r0, #8]
   130b0:	ldr	r2, [r0, #12]
   130b4:	adds	r1, r1, #1
   130b8:	adc	r2, r2, #0
   130bc:	str	r1, [r0, #8]
   130c0:	str	r2, [r0, #12]
   130c4:	ldr	r0, [sp, #4]
   130c8:	str	r0, [sp, #8]
   130cc:	ldr	r1, [sp, #8]
   130d0:	movw	r2, #9
   130d4:	str	r2, [r1]
   130d8:	add	sp, sp, #12
   130dc:	bx	lr
   130e0:	strdeq	lr, [r1], -ip
   130e4:	ldrdeq	lr, [r1], -r0

000130e8 <init_token_if@@Base>:
   130e8:	sub	sp, sp, #12
   130ec:	ldr	r1, [pc, #96]	; 13154 <init_token_if@@Base+0x6c>
   130f0:	add	r1, pc, r1
   130f4:	str	r0, [sp, #4]
   130f8:	str	r1, [sp]
   130fc:	ldr	r0, [sp]
   13100:	ldr	r1, [r0]
   13104:	ldr	r2, [r0, #4]
   13108:	adds	r1, r1, #1
   1310c:	adc	r2, r2, #0
   13110:	str	r1, [r0]
   13114:	str	r2, [r0, #4]
   13118:	ldr	r0, [pc, #56]	; 13158 <init_token_if@@Base+0x70>
   1311c:	add	r0, pc, r0
   13120:	ldr	r1, [r0, #8]
   13124:	ldr	r2, [r0, #12]
   13128:	adds	r1, r1, #1
   1312c:	adc	r2, r2, #0
   13130:	str	r1, [r0, #8]
   13134:	str	r2, [r0, #12]
   13138:	ldr	r0, [sp, #4]
   1313c:	str	r0, [sp, #8]
   13140:	ldr	r1, [sp, #8]
   13144:	movw	r2, #10
   13148:	str	r2, [r1]
   1314c:	add	sp, sp, #12
   13150:	bx	lr
   13154:	muleq	r1, r8, r1
   13158:	andeq	lr, r1, ip, ror #2

0001315c <init_token_else@@Base>:
   1315c:	sub	sp, sp, #12
   13160:	ldr	r1, [pc, #96]	; 131c8 <init_token_else@@Base+0x6c>
   13164:	add	r1, pc, r1
   13168:	str	r0, [sp, #4]
   1316c:	str	r1, [sp]
   13170:	ldr	r0, [sp]
   13174:	ldr	r1, [r0]
   13178:	ldr	r2, [r0, #4]
   1317c:	adds	r1, r1, #1
   13180:	adc	r2, r2, #0
   13184:	str	r1, [r0]
   13188:	str	r2, [r0, #4]
   1318c:	ldr	r0, [pc, #56]	; 131cc <init_token_else@@Base+0x70>
   13190:	add	r0, pc, r0
   13194:	ldr	r1, [r0, #8]
   13198:	ldr	r2, [r0, #12]
   1319c:	adds	r1, r1, #1
   131a0:	adc	r2, r2, #0
   131a4:	str	r1, [r0, #8]
   131a8:	str	r2, [r0, #12]
   131ac:	ldr	r0, [sp, #4]
   131b0:	str	r0, [sp, #8]
   131b4:	ldr	r1, [sp, #8]
   131b8:	movw	r2, #11
   131bc:	str	r2, [r1]
   131c0:	add	sp, sp, #12
   131c4:	bx	lr
   131c8:	andeq	lr, r1, r4, lsr r1
   131cc:	andeq	lr, r1, r8, lsl #2

000131d0 <init_token_boolean_op@@Base>:
   131d0:	sub	sp, sp, #20
   131d4:	ldr	r2, [pc, #120]	; 13254 <init_token_boolean_op@@Base+0x84>
   131d8:	add	r2, pc, r2
   131dc:	str	r0, [sp, #8]
   131e0:	str	r1, [sp, #4]
   131e4:	str	r2, [sp]
   131e8:	ldr	r0, [sp]
   131ec:	ldr	r1, [r0]
   131f0:	ldr	r2, [r0, #4]
   131f4:	adds	r1, r1, #1
   131f8:	adc	r2, r2, #0
   131fc:	str	r1, [r0]
   13200:	str	r2, [r0, #4]
   13204:	ldr	r0, [pc, #76]	; 13258 <init_token_boolean_op@@Base+0x88>
   13208:	add	r0, pc, r0
   1320c:	ldr	r1, [r0, #8]
   13210:	ldr	r2, [r0, #12]
   13214:	adds	r1, r1, #1
   13218:	adc	r2, r2, #0
   1321c:	str	r1, [r0, #8]
   13220:	str	r2, [r0, #12]
   13224:	ldr	r0, [sp, #8]
   13228:	str	r0, [sp, #16]
   1322c:	ldr	r1, [sp, #4]
   13230:	str	r1, [sp, #12]
   13234:	ldr	r2, [sp, #16]
   13238:	movw	r3, #12
   1323c:	str	r3, [r2]
   13240:	ldr	r2, [sp, #12]
   13244:	ldr	r3, [sp, #16]
   13248:	str	r2, [r3, #4]
   1324c:	add	sp, sp, #20
   13250:	bx	lr
   13254:	ldrdeq	lr, [r1], -r0
   13258:	andeq	lr, r1, r0, lsr #1

0001325c <free_token_int_type@@Base>:
   1325c:	push	{fp, lr}
   13260:	mov	fp, sp
   13264:	sub	sp, sp, #16
   13268:	ldr	r1, [pc, #96]	; 132d0 <free_token_int_type@@Base+0x74>
   1326c:	add	r1, pc, r1
   13270:	str	r0, [sp, #8]
   13274:	str	r1, [sp, #4]
   13278:	ldr	r0, [sp, #4]
   1327c:	ldr	r1, [r0]
   13280:	ldr	r2, [r0, #4]
   13284:	adds	r1, r1, #1
   13288:	adc	r2, r2, #0
   1328c:	str	r1, [r0]
   13290:	str	r2, [r0, #4]
   13294:	ldr	r0, [pc, #56]	; 132d4 <free_token_int_type@@Base+0x78>
   13298:	add	r0, pc, r0
   1329c:	ldr	r1, [r0, #8]
   132a0:	ldr	r2, [r0, #12]
   132a4:	adds	r1, r1, #1
   132a8:	adc	r2, r2, #0
   132ac:	str	r1, [r0, #8]
   132b0:	str	r2, [r0, #12]
   132b4:	ldr	r0, [sp, #8]
   132b8:	str	r0, [fp, #-4]
   132bc:	ldr	r1, [fp, #-4]
   132c0:	mov	r0, r1
   132c4:	bl	11f0c <free@plt>
   132c8:	mov	sp, fp
   132cc:	pop	{fp, pc}
   132d0:	andeq	lr, r1, ip, asr #32
   132d4:	andeq	lr, r1, r0, lsr #32

000132d8 <free_token_int_value@@Base>:
   132d8:	push	{fp, lr}
   132dc:	mov	fp, sp
   132e0:	sub	sp, sp, #16
   132e4:	ldr	r1, [pc, #96]	; 1334c <free_token_int_value@@Base+0x74>
   132e8:	add	r1, pc, r1
   132ec:	str	r0, [sp, #8]
   132f0:	str	r1, [sp, #4]
   132f4:	ldr	r0, [sp, #4]
   132f8:	ldr	r1, [r0]
   132fc:	ldr	r2, [r0, #4]
   13300:	adds	r1, r1, #1
   13304:	adc	r2, r2, #0
   13308:	str	r1, [r0]
   1330c:	str	r2, [r0, #4]
   13310:	ldr	r0, [pc, #56]	; 13350 <free_token_int_value@@Base+0x78>
   13314:	add	r0, pc, r0
   13318:	ldr	r1, [r0, #8]
   1331c:	ldr	r2, [r0, #12]
   13320:	adds	r1, r1, #1
   13324:	adc	r2, r2, #0
   13328:	str	r1, [r0, #8]
   1332c:	str	r2, [r0, #12]
   13330:	ldr	r0, [sp, #8]
   13334:	str	r0, [fp, #-4]
   13338:	ldr	r1, [fp, #-4]
   1333c:	mov	r0, r1
   13340:	bl	11f0c <free@plt>
   13344:	mov	sp, fp
   13348:	pop	{fp, pc}
   1334c:	andeq	sp, r1, r0, ror #31
   13350:			; <UNDEFINED> instruction: 0x0001dfb4

00013354 <free_token_function@@Base>:
   13354:	push	{fp, lr}
   13358:	mov	fp, sp
   1335c:	sub	sp, sp, #16
   13360:	ldr	r1, [pc, #96]	; 133c8 <free_token_function@@Base+0x74>
   13364:	add	r1, pc, r1
   13368:	str	r0, [sp, #8]
   1336c:	str	r1, [sp, #4]
   13370:	ldr	r0, [sp, #4]
   13374:	ldr	r1, [r0]
   13378:	ldr	r2, [r0, #4]
   1337c:	adds	r1, r1, #1
   13380:	adc	r2, r2, #0
   13384:	str	r1, [r0]
   13388:	str	r2, [r0, #4]
   1338c:	ldr	r0, [pc, #56]	; 133cc <free_token_function@@Base+0x78>
   13390:	add	r0, pc, r0
   13394:	ldr	r1, [r0, #8]
   13398:	ldr	r2, [r0, #12]
   1339c:	adds	r1, r1, #1
   133a0:	adc	r2, r2, #0
   133a4:	str	r1, [r0, #8]
   133a8:	str	r2, [r0, #12]
   133ac:	ldr	r0, [sp, #8]
   133b0:	str	r0, [fp, #-4]
   133b4:	ldr	r1, [fp, #-4]
   133b8:	mov	r0, r1
   133bc:	bl	11f0c <free@plt>
   133c0:	mov	sp, fp
   133c4:	pop	{fp, pc}
   133c8:	andeq	sp, r1, r4, ror pc
   133cc:	andeq	sp, r1, r8, asr #30

000133d0 <free_token_opar@@Base>:
   133d0:	push	{fp, lr}
   133d4:	mov	fp, sp
   133d8:	sub	sp, sp, #16
   133dc:	ldr	r1, [pc, #96]	; 13444 <free_token_opar@@Base+0x74>
   133e0:	add	r1, pc, r1
   133e4:	str	r0, [sp, #8]
   133e8:	str	r1, [sp, #4]
   133ec:	ldr	r0, [sp, #4]
   133f0:	ldr	r1, [r0]
   133f4:	ldr	r2, [r0, #4]
   133f8:	adds	r1, r1, #1
   133fc:	adc	r2, r2, #0
   13400:	str	r1, [r0]
   13404:	str	r2, [r0, #4]
   13408:	ldr	r0, [pc, #56]	; 13448 <free_token_opar@@Base+0x78>
   1340c:	add	r0, pc, r0
   13410:	ldr	r1, [r0, #8]
   13414:	ldr	r2, [r0, #12]
   13418:	adds	r1, r1, #1
   1341c:	adc	r2, r2, #0
   13420:	str	r1, [r0, #8]
   13424:	str	r2, [r0, #12]
   13428:	ldr	r0, [sp, #8]
   1342c:	str	r0, [fp, #-4]
   13430:	ldr	r1, [fp, #-4]
   13434:	mov	r0, r1
   13438:	bl	11f0c <free@plt>
   1343c:	mov	sp, fp
   13440:	pop	{fp, pc}
   13444:	andeq	sp, r1, r8, lsl #30
   13448:	ldrdeq	sp, [r1], -ip

0001344c <free_token_cpar@@Base>:
   1344c:	push	{fp, lr}
   13450:	mov	fp, sp
   13454:	sub	sp, sp, #16
   13458:	ldr	r1, [pc, #96]	; 134c0 <free_token_cpar@@Base+0x74>
   1345c:	add	r1, pc, r1
   13460:	str	r0, [sp, #8]
   13464:	str	r1, [sp, #4]
   13468:	ldr	r0, [sp, #4]
   1346c:	ldr	r1, [r0]
   13470:	ldr	r2, [r0, #4]
   13474:	adds	r1, r1, #1
   13478:	adc	r2, r2, #0
   1347c:	str	r1, [r0]
   13480:	str	r2, [r0, #4]
   13484:	ldr	r0, [pc, #56]	; 134c4 <free_token_cpar@@Base+0x78>
   13488:	add	r0, pc, r0
   1348c:	ldr	r1, [r0, #8]
   13490:	ldr	r2, [r0, #12]
   13494:	adds	r1, r1, #1
   13498:	adc	r2, r2, #0
   1349c:	str	r1, [r0, #8]
   134a0:	str	r2, [r0, #12]
   134a4:	ldr	r0, [sp, #8]
   134a8:	str	r0, [fp, #-4]
   134ac:	ldr	r1, [fp, #-4]
   134b0:	mov	r0, r1
   134b4:	bl	11f0c <free@plt>
   134b8:	mov	sp, fp
   134bc:	pop	{fp, pc}
   134c0:	muleq	r1, ip, lr
   134c4:	andeq	sp, r1, r0, ror lr

000134c8 <free_token_obra@@Base>:
   134c8:	push	{fp, lr}
   134cc:	mov	fp, sp
   134d0:	sub	sp, sp, #16
   134d4:	ldr	r1, [pc, #96]	; 1353c <free_token_obra@@Base+0x74>
   134d8:	add	r1, pc, r1
   134dc:	str	r0, [sp, #8]
   134e0:	str	r1, [sp, #4]
   134e4:	ldr	r0, [sp, #4]
   134e8:	ldr	r1, [r0]
   134ec:	ldr	r2, [r0, #4]
   134f0:	adds	r1, r1, #1
   134f4:	adc	r2, r2, #0
   134f8:	str	r1, [r0]
   134fc:	str	r2, [r0, #4]
   13500:	ldr	r0, [pc, #56]	; 13540 <free_token_obra@@Base+0x78>
   13504:	add	r0, pc, r0
   13508:	ldr	r1, [r0, #8]
   1350c:	ldr	r2, [r0, #12]
   13510:	adds	r1, r1, #1
   13514:	adc	r2, r2, #0
   13518:	str	r1, [r0, #8]
   1351c:	str	r2, [r0, #12]
   13520:	ldr	r0, [sp, #8]
   13524:	str	r0, [fp, #-4]
   13528:	ldr	r1, [fp, #-4]
   1352c:	mov	r0, r1
   13530:	bl	11f0c <free@plt>
   13534:	mov	sp, fp
   13538:	pop	{fp, pc}
   1353c:	andeq	sp, r1, r0, lsr lr
   13540:	andeq	sp, r1, r4, lsl #28

00013544 <free_token_cbra@@Base>:
   13544:	push	{fp, lr}
   13548:	mov	fp, sp
   1354c:	sub	sp, sp, #16
   13550:	ldr	r1, [pc, #96]	; 135b8 <free_token_cbra@@Base+0x74>
   13554:	add	r1, pc, r1
   13558:	str	r0, [sp, #8]
   1355c:	str	r1, [sp, #4]
   13560:	ldr	r0, [sp, #4]
   13564:	ldr	r1, [r0]
   13568:	ldr	r2, [r0, #4]
   1356c:	adds	r1, r1, #1
   13570:	adc	r2, r2, #0
   13574:	str	r1, [r0]
   13578:	str	r2, [r0, #4]
   1357c:	ldr	r0, [pc, #56]	; 135bc <free_token_cbra@@Base+0x78>
   13580:	add	r0, pc, r0
   13584:	ldr	r1, [r0, #8]
   13588:	ldr	r2, [r0, #12]
   1358c:	adds	r1, r1, #1
   13590:	adc	r2, r2, #0
   13594:	str	r1, [r0, #8]
   13598:	str	r2, [r0, #12]
   1359c:	ldr	r0, [sp, #8]
   135a0:	str	r0, [fp, #-4]
   135a4:	ldr	r1, [fp, #-4]
   135a8:	mov	r0, r1
   135ac:	bl	11f0c <free@plt>
   135b0:	mov	sp, fp
   135b4:	pop	{fp, pc}
   135b8:	andeq	sp, r1, r4, asr #27
   135bc:	muleq	r1, r8, sp

000135c0 <free_token_return@@Base>:
   135c0:	push	{fp, lr}
   135c4:	mov	fp, sp
   135c8:	sub	sp, sp, #16
   135cc:	ldr	r1, [pc, #96]	; 13634 <free_token_return@@Base+0x74>
   135d0:	add	r1, pc, r1
   135d4:	str	r0, [sp, #8]
   135d8:	str	r1, [sp, #4]
   135dc:	ldr	r0, [sp, #4]
   135e0:	ldr	r1, [r0]
   135e4:	ldr	r2, [r0, #4]
   135e8:	adds	r1, r1, #1
   135ec:	adc	r2, r2, #0
   135f0:	str	r1, [r0]
   135f4:	str	r2, [r0, #4]
   135f8:	ldr	r0, [pc, #56]	; 13638 <free_token_return@@Base+0x78>
   135fc:	add	r0, pc, r0
   13600:	ldr	r1, [r0, #8]
   13604:	ldr	r2, [r0, #12]
   13608:	adds	r1, r1, #1
   1360c:	adc	r2, r2, #0
   13610:	str	r1, [r0, #8]
   13614:	str	r2, [r0, #12]
   13618:	ldr	r0, [sp, #8]
   1361c:	str	r0, [fp, #-4]
   13620:	ldr	r1, [fp, #-4]
   13624:	mov	r0, r1
   13628:	bl	11f0c <free@plt>
   1362c:	mov	sp, fp
   13630:	pop	{fp, pc}
   13634:	andeq	sp, r1, r8, asr sp
   13638:	andeq	sp, r1, ip, lsr #26

0001363c <free_token_semicolon@@Base>:
   1363c:	push	{fp, lr}
   13640:	mov	fp, sp
   13644:	sub	sp, sp, #16
   13648:	ldr	r1, [pc, #96]	; 136b0 <free_token_semicolon@@Base+0x74>
   1364c:	add	r1, pc, r1
   13650:	str	r0, [sp, #8]
   13654:	str	r1, [sp, #4]
   13658:	ldr	r0, [sp, #4]
   1365c:	ldr	r1, [r0]
   13660:	ldr	r2, [r0, #4]
   13664:	adds	r1, r1, #1
   13668:	adc	r2, r2, #0
   1366c:	str	r1, [r0]
   13670:	str	r2, [r0, #4]
   13674:	ldr	r0, [pc, #56]	; 136b4 <free_token_semicolon@@Base+0x78>
   13678:	add	r0, pc, r0
   1367c:	ldr	r1, [r0, #8]
   13680:	ldr	r2, [r0, #12]
   13684:	adds	r1, r1, #1
   13688:	adc	r2, r2, #0
   1368c:	str	r1, [r0, #8]
   13690:	str	r2, [r0, #12]
   13694:	ldr	r0, [sp, #8]
   13698:	str	r0, [fp, #-4]
   1369c:	ldr	r1, [fp, #-4]
   136a0:	mov	r0, r1
   136a4:	bl	11f0c <free@plt>
   136a8:	mov	sp, fp
   136ac:	pop	{fp, pc}
   136b0:	andeq	sp, r1, ip, ror #25
   136b4:	andeq	sp, r1, r0, asr #25

000136b8 <free_token_eof@@Base>:
   136b8:	push	{fp, lr}
   136bc:	mov	fp, sp
   136c0:	sub	sp, sp, #16
   136c4:	ldr	r1, [pc, #96]	; 1372c <free_token_eof@@Base+0x74>
   136c8:	add	r1, pc, r1
   136cc:	str	r0, [sp, #8]
   136d0:	str	r1, [sp, #4]
   136d4:	ldr	r0, [sp, #4]
   136d8:	ldr	r1, [r0]
   136dc:	ldr	r2, [r0, #4]
   136e0:	adds	r1, r1, #1
   136e4:	adc	r2, r2, #0
   136e8:	str	r1, [r0]
   136ec:	str	r2, [r0, #4]
   136f0:	ldr	r0, [pc, #56]	; 13730 <free_token_eof@@Base+0x78>
   136f4:	add	r0, pc, r0
   136f8:	ldr	r1, [r0, #8]
   136fc:	ldr	r2, [r0, #12]
   13700:	adds	r1, r1, #1
   13704:	adc	r2, r2, #0
   13708:	str	r1, [r0, #8]
   1370c:	str	r2, [r0, #12]
   13710:	ldr	r0, [sp, #8]
   13714:	str	r0, [fp, #-4]
   13718:	ldr	r1, [fp, #-4]
   1371c:	mov	r0, r1
   13720:	bl	11f0c <free@plt>
   13724:	mov	sp, fp
   13728:	pop	{fp, pc}
   1372c:	andeq	sp, r1, r0, lsl #25
   13730:	andeq	sp, r1, r4, asr ip

00013734 <free_token_if@@Base>:
   13734:	push	{fp, lr}
   13738:	mov	fp, sp
   1373c:	sub	sp, sp, #16
   13740:	ldr	r1, [pc, #96]	; 137a8 <free_token_if@@Base+0x74>
   13744:	add	r1, pc, r1
   13748:	str	r0, [sp, #8]
   1374c:	str	r1, [sp, #4]
   13750:	ldr	r0, [sp, #4]
   13754:	ldr	r1, [r0]
   13758:	ldr	r2, [r0, #4]
   1375c:	adds	r1, r1, #1
   13760:	adc	r2, r2, #0
   13764:	str	r1, [r0]
   13768:	str	r2, [r0, #4]
   1376c:	ldr	r0, [pc, #56]	; 137ac <free_token_if@@Base+0x78>
   13770:	add	r0, pc, r0
   13774:	ldr	r1, [r0, #8]
   13778:	ldr	r2, [r0, #12]
   1377c:	adds	r1, r1, #1
   13780:	adc	r2, r2, #0
   13784:	str	r1, [r0, #8]
   13788:	str	r2, [r0, #12]
   1378c:	ldr	r0, [sp, #8]
   13790:	str	r0, [fp, #-4]
   13794:	ldr	r1, [fp, #-4]
   13798:	mov	r0, r1
   1379c:	bl	11f0c <free@plt>
   137a0:	mov	sp, fp
   137a4:	pop	{fp, pc}
   137a8:	andeq	sp, r1, r4, lsl ip
   137ac:	andeq	sp, r1, r8, ror #23

000137b0 <free_token_else@@Base>:
   137b0:	push	{fp, lr}
   137b4:	mov	fp, sp
   137b8:	sub	sp, sp, #16
   137bc:	ldr	r1, [pc, #96]	; 13824 <free_token_else@@Base+0x74>
   137c0:	add	r1, pc, r1
   137c4:	str	r0, [sp, #8]
   137c8:	str	r1, [sp, #4]
   137cc:	ldr	r0, [sp, #4]
   137d0:	ldr	r1, [r0]
   137d4:	ldr	r2, [r0, #4]
   137d8:	adds	r1, r1, #1
   137dc:	adc	r2, r2, #0
   137e0:	str	r1, [r0]
   137e4:	str	r2, [r0, #4]
   137e8:	ldr	r0, [pc, #56]	; 13828 <free_token_else@@Base+0x78>
   137ec:	add	r0, pc, r0
   137f0:	ldr	r1, [r0, #8]
   137f4:	ldr	r2, [r0, #12]
   137f8:	adds	r1, r1, #1
   137fc:	adc	r2, r2, #0
   13800:	str	r1, [r0, #8]
   13804:	str	r2, [r0, #12]
   13808:	ldr	r0, [sp, #8]
   1380c:	str	r0, [fp, #-4]
   13810:	ldr	r1, [fp, #-4]
   13814:	mov	r0, r1
   13818:	bl	11f0c <free@plt>
   1381c:	mov	sp, fp
   13820:	pop	{fp, pc}
   13824:	andeq	sp, r1, r8, lsr #23
   13828:	andeq	sp, r1, ip, ror fp

0001382c <free_token_boolean_op@@Base>:
   1382c:	push	{fp, lr}
   13830:	mov	fp, sp
   13834:	sub	sp, sp, #24
   13838:	ldr	r1, [pc, #220]	; 1391c <free_token_boolean_op@@Base+0xf0>
   1383c:	add	r1, pc, r1
   13840:	str	r0, [fp, #-8]
   13844:	str	r1, [sp, #12]
   13848:	ldr	r0, [sp, #12]
   1384c:	ldr	r1, [pc, #204]	; 13920 <free_token_boolean_op@@Base+0xf4>
   13850:	add	r1, pc, r1
   13854:	add	r2, r1, #8
   13858:	add	r1, r1, #16
   1385c:	ldr	r3, [r0]
   13860:	ldr	ip, [r0, #4]
   13864:	adds	r3, r3, #1
   13868:	adc	ip, ip, #0
   1386c:	str	r3, [r0]
   13870:	str	ip, [r0, #4]
   13874:	ldr	r0, [fp, #-8]
   13878:	str	r0, [fp, #-4]
   1387c:	ldr	r3, [fp, #-4]
   13880:	ldr	r3, [r3, #4]
   13884:	movw	ip, #0
   13888:	cmp	r3, ip
   1388c:	str	r2, [sp, #8]
   13890:	str	r1, [sp, #4]
   13894:	beq	138d0 <free_token_boolean_op@@Base+0xa4>
   13898:	ldr	r0, [sp, #8]
   1389c:	ldr	r1, [r0]
   138a0:	ldr	r2, [r0, #4]
   138a4:	adds	r1, r1, #1
   138a8:	adc	r2, r2, #0
   138ac:	str	r1, [r0]
   138b0:	str	r2, [r0, #4]
   138b4:	ldr	r0, [fp, #-4]
   138b8:	ldr	r0, [r0, #4]
   138bc:	bl	11f0c <free@plt>
   138c0:	ldr	r0, [pc, #92]	; 13924 <free_token_boolean_op@@Base+0xf8>
   138c4:	add	r0, pc, r0
   138c8:	add	r0, r0, #24
   138cc:	str	r0, [sp, #4]
   138d0:	ldr	r0, [sp, #4]
   138d4:	ldr	r1, [r0]
   138d8:	ldr	r2, [r0, #4]
   138dc:	adds	r1, r1, #1
   138e0:	adc	r2, r2, #0
   138e4:	str	r1, [r0]
   138e8:	str	r2, [r0, #4]
   138ec:	ldr	r0, [pc, #52]	; 13928 <free_token_boolean_op@@Base+0xfc>
   138f0:	add	r0, pc, r0
   138f4:	ldr	r1, [r0, #32]
   138f8:	ldr	r2, [r0, #36]	; 0x24
   138fc:	adds	r1, r1, #1
   13900:	adc	r2, r2, #0
   13904:	str	r1, [r0, #32]
   13908:	str	r2, [r0, #36]	; 0x24
   1390c:	ldr	r0, [fp, #-4]
   13910:	bl	11f0c <free@plt>
   13914:	mov	sp, fp
   13918:	pop	{fp, pc}
   1391c:	andeq	sp, r1, ip, lsr fp
   13920:	andeq	sp, r1, r8, lsr #22
   13924:			; <UNDEFINED> instruction: 0x0001dab4
   13928:	andeq	sp, r1, r8, lsl #21
   1392c:	push	{r4, sl, fp, lr}
   13930:	add	fp, sp, #8
   13934:	sub	sp, sp, #40	; 0x28
   13938:	movw	r0, #0
   1393c:	str	r0, [fp, #-12]
   13940:	b	13944 <free_token_boolean_op@@Base+0x118>
   13944:	ldr	r0, [fp, #-12]
   13948:	ldr	r1, [pc, #244]	; 13a44 <free_token_boolean_op@@Base+0x218>
   1394c:	add	r1, pc, r1
   13950:	movw	r2, #24
   13954:	mul	r2, r0, r2
   13958:	add	r1, r1, r2
   1395c:	ldr	r2, [r1]
   13960:	ldr	r3, [r1, #4]
   13964:	ldr	ip, [r1, #8]
   13968:	str	r0, [fp, #-16]
   1396c:	mov	r0, r2
   13970:	str	r1, [fp, #-20]	; 0xffffffec
   13974:	mov	r1, r3
   13978:	mov	r2, ip
   1397c:	bl	1ba6c <__generate_code_for_binary_boolean_expression@@Base+0x994>
   13980:	ldr	r0, [fp, #-20]	; 0xffffffec
   13984:	ldr	r1, [r0, #12]
   13988:	ldr	r2, [r0, #16]
   1398c:	ldr	r3, [r0, #20]
   13990:	movw	ip, #0
   13994:	cmp	ip, r1
   13998:	str	r1, [sp, #24]
   1399c:	str	r2, [sp, #20]
   139a0:	str	r3, [sp, #16]
   139a4:	str	ip, [sp, #12]
   139a8:	bge	13a20 <free_token_boolean_op@@Base+0x1f4>
   139ac:	ldr	r0, [sp, #12]
   139b0:	add	r1, r0, r0, lsl #2
   139b4:	ldr	r2, [sp, #20]
   139b8:	ldr	r1, [r2, r1, lsl #2]!
   139bc:	ldr	r3, [r2, #4]
   139c0:	ldr	ip, [r2, #8]
   139c4:	ldr	lr, [r2, #16]
   139c8:	ldrb	r2, [r2, #12]
   139cc:	mov	r4, sp
   139d0:	str	lr, [r4]
   139d4:	str	r0, [sp, #8]
   139d8:	mov	r0, r1
   139dc:	mov	r1, r3
   139e0:	str	r2, [sp, #4]
   139e4:	mov	r2, ip
   139e8:	ldr	r3, [sp, #4]
   139ec:	bl	1c18c <__generate_code_for_binary_boolean_expression@@Base+0x10b4>
   139f0:	ldr	r0, [sp, #16]
   139f4:	ldr	r1, [sp, #8]
   139f8:	add	r2, r0, r1, lsl #3
   139fc:	ldr	r0, [r2]
   13a00:	ldr	r1, [r2, #4]
   13a04:	bl	1ca40 <__generate_code_for_binary_boolean_expression@@Base+0x1968>
   13a08:	ldr	r0, [sp, #8]
   13a0c:	add	r1, r0, #1
   13a10:	ldr	r2, [sp, #24]
   13a14:	cmp	r1, r2
   13a18:	str	r1, [sp, #12]
   13a1c:	blt	139ac <free_token_boolean_op@@Base+0x180>
   13a20:	bl	1d1c8 <__generate_code_for_binary_boolean_expression@@Base+0x20f0>
   13a24:	bl	1df34 <__generate_code_for_binary_boolean_expression@@Base+0x2e5c>
   13a28:	ldr	r0, [fp, #-16]
   13a2c:	add	r1, r0, #1
   13a30:	cmp	r1, #1
   13a34:	str	r1, [fp, #-12]
   13a38:	blt	13944 <free_token_boolean_op@@Base+0x118>
   13a3c:	sub	sp, fp, #8
   13a40:	pop	{r4, sl, fp, pc}
   13a44:			; <UNDEFINED> instruction: 0x0001cfbc
   13a48:	push	{fp, lr}
   13a4c:	mov	fp, sp
   13a50:	bl	1392c <free_token_boolean_op@@Base+0x100>
   13a54:	ldr	r0, [pc, #648]	; 13ce4 <free_token_boolean_op@@Base+0x4b8>
   13a58:	add	r0, pc, r0
   13a5c:	mov	r1, #0
   13a60:	str	r1, [r0, #12]
   13a64:	str	r1, [r0, #8]
   13a68:	str	r1, [r0, #4]
   13a6c:	str	r1, [r0]
   13a70:	ldr	r0, [pc, #624]	; 13ce8 <free_token_boolean_op@@Base+0x4bc>
   13a74:	add	r0, pc, r0
   13a78:	str	r1, [r0, #12]
   13a7c:	str	r1, [r0, #8]
   13a80:	str	r1, [r0, #4]
   13a84:	str	r1, [r0]
   13a88:	ldr	r0, [pc, #604]	; 13cec <free_token_boolean_op@@Base+0x4c0>
   13a8c:	add	r0, pc, r0
   13a90:	str	r1, [r0, #12]
   13a94:	str	r1, [r0, #8]
   13a98:	str	r1, [r0, #4]
   13a9c:	str	r1, [r0]
   13aa0:	ldr	r0, [pc, #584]	; 13cf0 <free_token_boolean_op@@Base+0x4c4>
   13aa4:	add	r0, pc, r0
   13aa8:	str	r1, [r0, #12]
   13aac:	str	r1, [r0, #8]
   13ab0:	str	r1, [r0, #4]
   13ab4:	str	r1, [r0]
   13ab8:	ldr	r0, [pc, #564]	; 13cf4 <free_token_boolean_op@@Base+0x4c8>
   13abc:	add	r0, pc, r0
   13ac0:	str	r1, [r0, #12]
   13ac4:	str	r1, [r0, #8]
   13ac8:	str	r1, [r0, #4]
   13acc:	str	r1, [r0]
   13ad0:	ldr	r0, [pc, #544]	; 13cf8 <free_token_boolean_op@@Base+0x4cc>
   13ad4:	add	r0, pc, r0
   13ad8:	str	r1, [r0, #12]
   13adc:	str	r1, [r0, #8]
   13ae0:	str	r1, [r0, #4]
   13ae4:	str	r1, [r0]
   13ae8:	ldr	r0, [pc, #524]	; 13cfc <free_token_boolean_op@@Base+0x4d0>
   13aec:	add	r0, pc, r0
   13af0:	str	r1, [r0, #12]
   13af4:	str	r1, [r0, #8]
   13af8:	str	r1, [r0, #4]
   13afc:	str	r1, [r0]
   13b00:	ldr	r0, [pc, #504]	; 13d00 <free_token_boolean_op@@Base+0x4d4>
   13b04:	add	r0, pc, r0
   13b08:	str	r1, [r0, #12]
   13b0c:	str	r1, [r0, #8]
   13b10:	str	r1, [r0, #4]
   13b14:	str	r1, [r0]
   13b18:	ldr	r0, [pc, #484]	; 13d04 <free_token_boolean_op@@Base+0x4d8>
   13b1c:	add	r0, pc, r0
   13b20:	str	r1, [r0, #12]
   13b24:	str	r1, [r0, #8]
   13b28:	str	r1, [r0, #4]
   13b2c:	str	r1, [r0]
   13b30:	ldr	r0, [pc, #464]	; 13d08 <free_token_boolean_op@@Base+0x4dc>
   13b34:	add	r0, pc, r0
   13b38:	str	r1, [r0, #12]
   13b3c:	str	r1, [r0, #8]
   13b40:	str	r1, [r0, #4]
   13b44:	str	r1, [r0]
   13b48:	ldr	r0, [pc, #444]	; 13d0c <free_token_boolean_op@@Base+0x4e0>
   13b4c:	add	r0, pc, r0
   13b50:	str	r1, [r0, #12]
   13b54:	str	r1, [r0, #8]
   13b58:	str	r1, [r0, #4]
   13b5c:	str	r1, [r0]
   13b60:	ldr	r0, [pc, #424]	; 13d10 <free_token_boolean_op@@Base+0x4e4>
   13b64:	add	r0, pc, r0
   13b68:	str	r1, [r0, #12]
   13b6c:	str	r1, [r0, #8]
   13b70:	str	r1, [r0, #4]
   13b74:	str	r1, [r0]
   13b78:	ldr	r0, [pc, #404]	; 13d14 <free_token_boolean_op@@Base+0x4e8>
   13b7c:	add	r0, pc, r0
   13b80:	str	r1, [r0, #12]
   13b84:	str	r1, [r0, #8]
   13b88:	str	r1, [r0, #4]
   13b8c:	str	r1, [r0]
   13b90:	ldr	r0, [pc, #384]	; 13d18 <free_token_boolean_op@@Base+0x4ec>
   13b94:	add	r0, pc, r0
   13b98:	str	r1, [r0, #12]
   13b9c:	str	r1, [r0, #8]
   13ba0:	str	r1, [r0, #4]
   13ba4:	str	r1, [r0]
   13ba8:	ldr	r0, [pc, #364]	; 13d1c <free_token_boolean_op@@Base+0x4f0>
   13bac:	add	r0, pc, r0
   13bb0:	str	r1, [r0, #12]
   13bb4:	str	r1, [r0, #8]
   13bb8:	str	r1, [r0, #4]
   13bbc:	str	r1, [r0]
   13bc0:	ldr	r0, [pc, #344]	; 13d20 <free_token_boolean_op@@Base+0x4f4>
   13bc4:	add	r0, pc, r0
   13bc8:	str	r1, [r0, #12]
   13bcc:	str	r1, [r0, #8]
   13bd0:	str	r1, [r0, #4]
   13bd4:	str	r1, [r0]
   13bd8:	ldr	r0, [pc, #324]	; 13d24 <free_token_boolean_op@@Base+0x4f8>
   13bdc:	add	r0, pc, r0
   13be0:	str	r1, [r0, #12]
   13be4:	str	r1, [r0, #8]
   13be8:	str	r1, [r0, #4]
   13bec:	str	r1, [r0]
   13bf0:	ldr	r0, [pc, #304]	; 13d28 <free_token_boolean_op@@Base+0x4fc>
   13bf4:	add	r0, pc, r0
   13bf8:	str	r1, [r0, #12]
   13bfc:	str	r1, [r0, #8]
   13c00:	str	r1, [r0, #4]
   13c04:	str	r1, [r0]
   13c08:	ldr	r0, [pc, #284]	; 13d2c <free_token_boolean_op@@Base+0x500>
   13c0c:	add	r0, pc, r0
   13c10:	str	r1, [r0, #12]
   13c14:	str	r1, [r0, #8]
   13c18:	str	r1, [r0, #4]
   13c1c:	str	r1, [r0]
   13c20:	ldr	r0, [pc, #264]	; 13d30 <free_token_boolean_op@@Base+0x504>
   13c24:	add	r0, pc, r0
   13c28:	str	r1, [r0, #12]
   13c2c:	str	r1, [r0, #8]
   13c30:	str	r1, [r0, #4]
   13c34:	str	r1, [r0]
   13c38:	ldr	r0, [pc, #244]	; 13d34 <free_token_boolean_op@@Base+0x508>
   13c3c:	add	r0, pc, r0
   13c40:	str	r1, [r0, #12]
   13c44:	str	r1, [r0, #8]
   13c48:	str	r1, [r0, #4]
   13c4c:	str	r1, [r0]
   13c50:	ldr	r0, [pc, #224]	; 13d38 <free_token_boolean_op@@Base+0x50c>
   13c54:	add	r0, pc, r0
   13c58:	str	r1, [r0, #12]
   13c5c:	str	r1, [r0, #8]
   13c60:	str	r1, [r0, #4]
   13c64:	str	r1, [r0]
   13c68:	ldr	r0, [pc, #204]	; 13d3c <free_token_boolean_op@@Base+0x510>
   13c6c:	add	r0, pc, r0
   13c70:	str	r1, [r0, #12]
   13c74:	str	r1, [r0, #8]
   13c78:	str	r1, [r0, #4]
   13c7c:	str	r1, [r0]
   13c80:	ldr	r0, [pc, #184]	; 13d40 <free_token_boolean_op@@Base+0x514>
   13c84:	add	r0, pc, r0
   13c88:	str	r1, [r0, #12]
   13c8c:	str	r1, [r0, #8]
   13c90:	str	r1, [r0, #4]
   13c94:	str	r1, [r0]
   13c98:	ldr	r0, [pc, #164]	; 13d44 <free_token_boolean_op@@Base+0x518>
   13c9c:	add	r0, pc, r0
   13ca0:	str	r1, [r0, #12]
   13ca4:	str	r1, [r0, #8]
   13ca8:	str	r1, [r0, #4]
   13cac:	str	r1, [r0]
   13cb0:	ldr	r0, [pc, #144]	; 13d48 <free_token_boolean_op@@Base+0x51c>
   13cb4:	add	r0, pc, r0
   13cb8:	str	r1, [r0, #36]	; 0x24
   13cbc:	str	r1, [r0, #32]
   13cc0:	str	r1, [r0, #28]
   13cc4:	str	r1, [r0, #24]
   13cc8:	str	r1, [r0, #20]
   13ccc:	str	r1, [r0, #16]
   13cd0:	str	r1, [r0, #12]
   13cd4:	str	r1, [r0, #8]
   13cd8:	str	r1, [r0, #4]
   13cdc:	str	r1, [r0]
   13ce0:	pop	{fp, pc}
   13ce4:	muleq	r1, r0, r7
   13ce8:	andeq	sp, r1, r4, lsl #15
   13cec:	andeq	sp, r1, ip, ror r7
   13cf0:	andeq	sp, r1, r4, ror r7
   13cf4:	andeq	sp, r1, ip, ror #14
   13cf8:	andeq	sp, r1, r4, ror #14
   13cfc:	andeq	sp, r1, ip, asr r7
   13d00:	andeq	sp, r1, r4, asr r7
   13d04:	andeq	sp, r1, ip, asr #14
   13d08:	andeq	sp, r1, r4, asr #14
   13d0c:	andeq	sp, r1, ip, lsr r7
   13d10:	andeq	sp, r1, r4, lsr r7
   13d14:	andeq	sp, r1, ip, lsr #14
   13d18:	andeq	sp, r1, r4, lsr #14
   13d1c:	andeq	sp, r1, ip, lsl r7
   13d20:	andeq	sp, r1, r4, lsl r7
   13d24:	andeq	sp, r1, ip, lsl #14
   13d28:	andeq	sp, r1, r4, lsl #14
   13d2c:	strdeq	sp, [r1], -ip
   13d30:	strdeq	sp, [r1], -r4
   13d34:	andeq	sp, r1, ip, ror #13
   13d38:	andeq	sp, r1, r4, ror #13
   13d3c:	ldrdeq	sp, [r1], -ip
   13d40:	ldrdeq	sp, [r1], -r4
   13d44:	andeq	sp, r1, ip, asr #13
   13d48:	andeq	sp, r1, r4, asr #13
   13d4c:	push	{fp, lr}
   13d50:	mov	fp, sp
   13d54:	ldr	r0, [pc, #16]	; 13d6c <free_token_boolean_op@@Base+0x540>
   13d58:	add	r0, pc, r0
   13d5c:	ldr	r1, [pc, #12]	; 13d70 <free_token_boolean_op@@Base+0x544>
   13d60:	add	r1, pc, r1
   13d64:	bl	1e3e8 <__gcov_flush@@Base+0xb8>
   13d68:	pop	{fp, pc}
   13d6c:			; <UNDEFINED> instruction: 0xfffffbcc
   13d70:			; <UNDEFINED> instruction: 0xfffffce0

00013d74 <init_lexer@@Base>:
   13d74:	sub	sp, sp, #20
   13d78:	ldr	r2, [pc, #128]	; 13e00 <init_lexer@@Base+0x8c>
   13d7c:	add	r2, pc, r2
   13d80:	str	r0, [sp, #8]
   13d84:	str	r1, [sp, #4]
   13d88:	str	r2, [sp]
   13d8c:	ldr	r0, [sp]
   13d90:	ldr	r1, [r0]
   13d94:	ldr	r2, [r0, #4]
   13d98:	adds	r1, r1, #1
   13d9c:	adc	r2, r2, #0
   13da0:	str	r1, [r0]
   13da4:	str	r2, [r0, #4]
   13da8:	ldr	r0, [pc, #84]	; 13e04 <init_lexer@@Base+0x90>
   13dac:	add	r0, pc, r0
   13db0:	ldr	r1, [r0, #8]
   13db4:	ldr	r2, [r0, #12]
   13db8:	adds	r1, r1, #1
   13dbc:	adc	r2, r2, #0
   13dc0:	str	r1, [r0, #8]
   13dc4:	str	r2, [r0, #12]
   13dc8:	ldr	r0, [sp, #8]
   13dcc:	str	r0, [sp, #16]
   13dd0:	ldr	r1, [sp, #4]
   13dd4:	str	r1, [sp, #12]
   13dd8:	ldr	r2, [sp, #12]
   13ddc:	ldr	r3, [sp, #16]
   13de0:	str	r2, [r3]
   13de4:	ldr	r2, [sp, #16]
   13de8:	movw	r3, #0
   13dec:	str	r3, [r2, #4]
   13df0:	ldr	r2, [sp, #16]
   13df4:	str	r3, [r2, #8]
   13df8:	add	sp, sp, #20
   13dfc:	bx	lr
   13e00:	andeq	sp, r1, ip, lsr #12
   13e04:	strdeq	sp, [r1], -ip

00013e08 <destroy_lexer@@Base>:
   13e08:	push	{fp, lr}
   13e0c:	mov	fp, sp
   13e10:	sub	sp, sp, #32
   13e14:	ldr	r1, [pc, #240]	; 13f0c <destroy_lexer@@Base+0x104>
   13e18:	add	r1, pc, r1
   13e1c:	str	r0, [sp, #16]
   13e20:	str	r1, [sp, #12]
   13e24:	ldr	r0, [sp, #12]
   13e28:	ldr	r1, [pc, #224]	; 13f10 <destroy_lexer@@Base+0x108>
   13e2c:	add	r1, pc, r1
   13e30:	add	r2, r1, #8
   13e34:	add	r1, r1, #16
   13e38:	ldr	r3, [r0]
   13e3c:	ldr	ip, [r0, #4]
   13e40:	adds	r3, r3, #1
   13e44:	adc	ip, ip, #0
   13e48:	str	r3, [r0]
   13e4c:	str	ip, [r0, #4]
   13e50:	ldr	r0, [sp, #16]
   13e54:	str	r0, [fp, #-4]
   13e58:	movw	r3, #0
   13e5c:	str	r3, [fp, #-8]
   13e60:	ldr	ip, [fp, #-4]
   13e64:	ldr	ip, [ip, #4]
   13e68:	str	ip, [fp, #-12]
   13e6c:	ldr	ip, [fp, #-12]
   13e70:	cmp	ip, r3
   13e74:	str	r2, [sp, #8]
   13e78:	str	r1, [sp, #4]
   13e7c:	beq	13ec8 <destroy_lexer@@Base+0xc0>
   13e80:	ldr	r0, [sp, #8]
   13e84:	ldr	r1, [r0]
   13e88:	ldr	r2, [r0, #4]
   13e8c:	adds	r1, r1, #1
   13e90:	adc	r2, r2, #0
   13e94:	str	r1, [r0]
   13e98:	str	r2, [r0, #4]
   13e9c:	ldr	r0, [fp, #-12]
   13ea0:	str	r0, [fp, #-8]
   13ea4:	ldr	r0, [fp, #-12]
   13ea8:	ldr	r0, [r0]
   13eac:	str	r0, [fp, #-12]
   13eb0:	ldr	r0, [fp, #-8]
   13eb4:	bl	13f1c <free_stack_base@@Base>
   13eb8:	ldr	r0, [pc, #84]	; 13f14 <destroy_lexer@@Base+0x10c>
   13ebc:	add	r0, pc, r0
   13ec0:	add	r0, r0, #24
   13ec4:	str	r0, [sp, #4]
   13ec8:	ldr	r0, [sp, #4]
   13ecc:	ldr	r1, [r0]
   13ed0:	ldr	r2, [r0, #4]
   13ed4:	adds	r1, r1, #1
   13ed8:	adc	r2, r2, #0
   13edc:	str	r1, [r0]
   13ee0:	str	r2, [r0, #4]
   13ee4:	ldr	r0, [pc, #44]	; 13f18 <destroy_lexer@@Base+0x110>
   13ee8:	add	r0, pc, r0
   13eec:	ldr	r1, [r0, #32]
   13ef0:	ldr	r2, [r0, #36]	; 0x24
   13ef4:	adds	r1, r1, #1
   13ef8:	adc	r2, r2, #0
   13efc:	str	r1, [r0, #32]
   13f00:	str	r2, [r0, #36]	; 0x24
   13f04:	mov	sp, fp
   13f08:	pop	{fp, pc}
   13f0c:	andeq	sp, r1, r0, lsr #11
   13f10:	andeq	sp, r1, ip, lsl #11
   13f14:	strdeq	sp, [r1], -ip
   13f18:	ldrdeq	sp, [r1], -r0

00013f1c <free_stack_base@@Base>:
   13f1c:	push	{fp, lr}
   13f20:	mov	fp, sp
   13f24:	sub	sp, sp, #16
   13f28:	ldr	r1, [pc, #96]	; 13f90 <free_stack_base@@Base+0x74>
   13f2c:	add	r1, pc, r1
   13f30:	str	r0, [sp, #8]
   13f34:	str	r1, [sp, #4]
   13f38:	ldr	r0, [sp, #4]
   13f3c:	ldr	r1, [r0]
   13f40:	ldr	r2, [r0, #4]
   13f44:	adds	r1, r1, #1
   13f48:	adc	r2, r2, #0
   13f4c:	str	r1, [r0]
   13f50:	str	r2, [r0, #4]
   13f54:	ldr	r0, [pc, #56]	; 13f94 <free_stack_base@@Base+0x78>
   13f58:	add	r0, pc, r0
   13f5c:	ldr	r1, [r0, #8]
   13f60:	ldr	r2, [r0, #12]
   13f64:	adds	r1, r1, #1
   13f68:	adc	r2, r2, #0
   13f6c:	str	r1, [r0, #8]
   13f70:	str	r2, [r0, #12]
   13f74:	ldr	r0, [sp, #8]
   13f78:	str	r0, [fp, #-4]
   13f7c:	ldr	r1, [fp, #-4]
   13f80:	mov	r0, r1
   13f84:	bl	11f0c <free@plt>
   13f88:	mov	sp, fp
   13f8c:	pop	{fp, pc}
   13f90:			; <UNDEFINED> instruction: 0x0001d4b4
   13f94:	andeq	sp, r1, r8, lsl #9

00013f98 <push_back@@Base>:
   13f98:	push	{fp, lr}
   13f9c:	mov	fp, sp
   13fa0:	sub	sp, sp, #24
   13fa4:	ldr	r2, [pc, #148]	; 14040 <push_back@@Base+0xa8>
   13fa8:	add	r2, pc, r2
   13fac:	str	r0, [sp, #8]
   13fb0:	str	r1, [sp, #4]
   13fb4:	str	r2, [sp]
   13fb8:	ldr	r0, [sp]
   13fbc:	ldr	r1, [r0]
   13fc0:	ldr	r2, [r0, #4]
   13fc4:	adds	r1, r1, #1
   13fc8:	adc	r2, r2, #0
   13fcc:	str	r1, [r0]
   13fd0:	str	r2, [r0, #4]
   13fd4:	ldr	r0, [pc, #104]	; 14044 <push_back@@Base+0xac>
   13fd8:	add	r0, pc, r0
   13fdc:	ldr	r1, [r0, #8]
   13fe0:	ldr	r2, [r0, #12]
   13fe4:	adds	r1, r1, #1
   13fe8:	adc	r2, r2, #0
   13fec:	str	r1, [r0, #8]
   13ff0:	str	r2, [r0, #12]
   13ff4:	ldr	r0, [sp, #8]
   13ff8:	str	r0, [fp, #-4]
   13ffc:	ldr	r1, [sp, #4]
   14000:	str	r1, [fp, #-8]
   14004:	movw	r0, #8
   14008:	bl	11f90 <malloc@plt>
   1400c:	str	r0, [sp, #12]
   14010:	ldr	r0, [fp, #-8]
   14014:	ldr	r1, [sp, #12]
   14018:	str	r0, [r1, #4]
   1401c:	ldr	r0, [fp, #-4]
   14020:	ldr	r0, [r0, #4]
   14024:	ldr	r1, [sp, #12]
   14028:	str	r0, [r1]
   1402c:	ldr	r0, [sp, #12]
   14030:	ldr	r1, [fp, #-4]
   14034:	str	r0, [r1, #4]
   14038:	mov	sp, fp
   1403c:	pop	{fp, pc}
   14040:	andeq	sp, r1, r8, asr #8
   14044:	andeq	sp, r1, r8, lsl r4

00014048 <get_char@@Base>:
   14048:	sub	sp, sp, #12
   1404c:	ldr	r1, [pc, #116]	; 140c8 <get_char@@Base+0x80>
   14050:	add	r1, pc, r1
   14054:	str	r0, [sp, #4]
   14058:	str	r1, [sp]
   1405c:	ldr	r0, [sp]
   14060:	ldr	r1, [r0]
   14064:	ldr	r2, [r0, #4]
   14068:	adds	r1, r1, #1
   1406c:	adc	r2, r2, #0
   14070:	str	r1, [r0]
   14074:	str	r2, [r0, #4]
   14078:	ldr	r0, [pc, #76]	; 140cc <get_char@@Base+0x84>
   1407c:	add	r0, pc, r0
   14080:	ldr	r1, [r0, #8]
   14084:	ldr	r2, [r0, #12]
   14088:	adds	r1, r1, #1
   1408c:	adc	r2, r2, #0
   14090:	str	r1, [r0, #8]
   14094:	str	r2, [r0, #12]
   14098:	ldr	r0, [sp, #4]
   1409c:	str	r0, [sp, #8]
   140a0:	ldr	r1, [sp, #8]
   140a4:	ldr	r1, [r1]
   140a8:	ldr	r2, [sp, #8]
   140ac:	ldr	r3, [r2, #8]
   140b0:	add	ip, r3, #1
   140b4:	str	ip, [r2, #8]
   140b8:	add	r1, r1, r3
   140bc:	ldrb	r0, [r1]
   140c0:	add	sp, sp, #12
   140c4:	bx	lr
   140c8:			; <UNDEFINED> instruction: 0x0001d3b0
   140cc:	andeq	sp, r1, r4, lsl #7

000140d0 <push_back_chars@@Base>:
   140d0:	push	{fp, lr}
   140d4:	mov	fp, sp
   140d8:	sub	sp, sp, #40	; 0x28
   140dc:	ldr	r2, [pc, #304]	; 14214 <push_back_chars@@Base+0x144>
   140e0:	add	r2, pc, r2
   140e4:	str	r0, [fp, #-12]
   140e8:	str	r1, [fp, #-16]
   140ec:	str	r2, [sp, #20]
   140f0:	ldr	r0, [sp, #20]
   140f4:	ldr	r1, [pc, #284]	; 14218 <push_back_chars@@Base+0x148>
   140f8:	add	r1, pc, r1
   140fc:	add	r2, r1, #8
   14100:	add	r1, r1, #16
   14104:	ldr	r3, [r0]
   14108:	ldr	ip, [r0, #4]
   1410c:	adds	r3, r3, #1
   14110:	adc	ip, ip, #0
   14114:	str	r3, [r0]
   14118:	str	ip, [r0, #4]
   1411c:	ldr	r0, [fp, #-12]
   14120:	str	r0, [fp, #-4]
   14124:	ldr	r3, [fp, #-16]
   14128:	str	r3, [fp, #-8]
   1412c:	ldr	ip, [fp, #-4]
   14130:	ldr	ip, [ip, #8]
   14134:	ldr	lr, [fp, #-8]
   14138:	cmp	ip, lr
   1413c:	str	r2, [sp, #16]
   14140:	str	r1, [sp, #12]
   14144:	bcc	1418c <push_back_chars@@Base+0xbc>
   14148:	ldr	r0, [sp, #16]
   1414c:	ldr	r1, [pc, #208]	; 14224 <push_back_chars@@Base+0x154>
   14150:	add	r1, pc, r1
   14154:	add	r1, r1, #24
   14158:	ldr	r2, [r0]
   1415c:	ldr	r3, [r0, #4]
   14160:	adds	r2, r2, #1
   14164:	adc	r3, r3, #0
   14168:	str	r2, [r0]
   1416c:	str	r3, [r0, #4]
   14170:	ldr	r0, [fp, #-8]
   14174:	ldr	r2, [fp, #-4]
   14178:	ldr	r3, [r2, #8]
   1417c:	sub	r0, r3, r0
   14180:	str	r0, [r2, #8]
   14184:	str	r1, [sp, #8]
   14188:	b	141d0 <push_back_chars@@Base+0x100>
   1418c:	ldr	r0, [sp, #12]
   14190:	ldr	r1, [pc, #132]	; 1421c <push_back_chars@@Base+0x14c>
   14194:	add	r1, pc, r1
   14198:	ldr	r2, [pc, #128]	; 14220 <push_back_chars@@Base+0x150>
   1419c:	ldr	r2, [pc, r2]
   141a0:	ldr	r3, [r0]
   141a4:	ldr	ip, [r0, #4]
   141a8:	adds	r3, r3, #1
   141ac:	adc	ip, ip, #0
   141b0:	str	r3, [r0]
   141b4:	str	ip, [r0, #4]
   141b8:	ldr	r0, [r2]
   141bc:	bl	11ffc <fprintf@plt>
   141c0:	movw	r1, #1
   141c4:	str	r0, [sp, #4]
   141c8:	mov	r0, r1
   141cc:	bl	11fcc <exit@plt>
   141d0:	ldr	r0, [sp, #8]
   141d4:	ldr	r1, [r0]
   141d8:	ldr	r2, [r0, #4]
   141dc:	adds	r1, r1, #1
   141e0:	adc	r2, r2, #0
   141e4:	str	r1, [r0]
   141e8:	str	r2, [r0, #4]
   141ec:	ldr	r0, [pc, #52]	; 14228 <push_back_chars@@Base+0x158>
   141f0:	add	r0, pc, r0
   141f4:	ldr	r1, [r0, #32]
   141f8:	ldr	r2, [r0, #36]	; 0x24
   141fc:	adds	r1, r1, #1
   14200:	adc	r2, r2, #0
   14204:	str	r1, [r0, #32]
   14208:	str	r2, [r0, #36]	; 0x24
   1420c:	mov	sp, fp
   14210:	pop	{fp, pc}
   14214:	andeq	sp, r1, r8, lsr r3
   14218:	andeq	sp, r1, r0, lsr #6
   1421c:	andeq	sl, r0, r4, ror ip
   14220:	andeq	ip, r1, r0, lsr #30
   14224:	andeq	sp, r1, r8, asr #5
   14228:	andeq	sp, r1, r8, lsr #4

0001422c <push_back_one_char@@Base>:
   1422c:	push	{fp, lr}
   14230:	mov	fp, sp
   14234:	sub	sp, sp, #16
   14238:	ldr	r1, [pc, #96]	; 142a0 <push_back_one_char@@Base+0x74>
   1423c:	add	r1, pc, r1
   14240:	str	r0, [sp, #8]
   14244:	str	r1, [sp, #4]
   14248:	ldr	r0, [sp, #4]
   1424c:	ldr	r1, [r0]
   14250:	ldr	r2, [r0, #4]
   14254:	adds	r1, r1, #1
   14258:	adc	r2, r2, #0
   1425c:	str	r1, [r0]
   14260:	str	r2, [r0, #4]
   14264:	ldr	r0, [pc, #56]	; 142a4 <push_back_one_char@@Base+0x78>
   14268:	add	r0, pc, r0
   1426c:	ldr	r1, [r0, #8]
   14270:	ldr	r2, [r0, #12]
   14274:	adds	r1, r1, #1
   14278:	adc	r2, r2, #0
   1427c:	str	r1, [r0, #8]
   14280:	str	r2, [r0, #12]
   14284:	ldr	r0, [sp, #8]
   14288:	str	r0, [fp, #-4]
   1428c:	ldr	r0, [fp, #-4]
   14290:	movw	r1, #1
   14294:	bl	140d0 <push_back_chars@@Base>
   14298:	mov	sp, fp
   1429c:	pop	{fp, pc}
   142a0:	andeq	sp, r1, r4, lsl #4
   142a4:	ldrdeq	sp, [r1], -r8

000142a8 <next@@Base>:
   142a8:	push	{r4, r5, r6, sl, fp, lr}
   142ac:	add	fp, sp, #16
   142b0:	sub	sp, sp, #24
   142b4:	sub	sp, sp, #1024	; 0x400
   142b8:	ldr	r1, [pc, #3980]	; 1524c <next@@Base+0xfa4>
   142bc:	add	r1, pc, r1
   142c0:	str	r0, [sp, #496]	; 0x1f0
   142c4:	str	r1, [sp, #492]	; 0x1ec
   142c8:	ldr	r0, [sp, #492]	; 0x1ec
   142cc:	ldr	r1, [pc, #4080]	; 152c4 <next@@Base+0x101c>
   142d0:	add	r1, pc, r1
   142d4:	add	r2, r1, #8
   142d8:	add	r1, r1, #16
   142dc:	ldr	r3, [r0]
   142e0:	ldr	ip, [r0, #4]
   142e4:	adds	r3, r3, #1
   142e8:	adc	ip, ip, #0
   142ec:	str	r3, [r0]
   142f0:	str	ip, [r0, #4]
   142f4:	ldr	r0, [sp, #496]	; 0x1f0
   142f8:	str	r0, [fp, #-24]	; 0xffffffe8
   142fc:	movw	r3, #0
   14300:	str	r3, [sp, #524]	; 0x20c
   14304:	str	r3, [sp, #520]	; 0x208
   14308:	str	r3, [sp, #516]	; 0x204
   1430c:	str	r3, [sp, #508]	; 0x1fc
   14310:	str	r3, [sp, #504]	; 0x1f8
   14314:	ldr	ip, [fp, #-24]	; 0xffffffe8
   14318:	ldr	ip, [ip, #4]
   1431c:	cmp	ip, r3
   14320:	str	r2, [sp, #488]	; 0x1e8
   14324:	str	r1, [sp, #484]	; 0x1e4
   14328:	beq	143a4 <next@@Base+0xfc>
   1432c:	ldr	r0, [sp, #488]	; 0x1e8
   14330:	ldr	r1, [r0]
   14334:	ldr	r2, [r0, #4]
   14338:	adds	r1, r1, #1
   1433c:	adc	r2, r2, #0
   14340:	str	r1, [r0]
   14344:	str	r2, [r0, #4]
   14348:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1434c:	ldr	r0, [r0, #4]
   14350:	str	r0, [sp, #500]	; 0x1f4
   14354:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14358:	ldr	r0, [r0, #4]
   1435c:	ldr	r0, [r0]
   14360:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14364:	str	r0, [r1, #4]
   14368:	ldr	r0, [sp, #500]	; 0x1f4
   1436c:	ldr	r0, [r0, #4]
   14370:	str	r0, [sp, #508]	; 0x1fc
   14374:	ldr	r0, [sp, #500]	; 0x1f4
   14378:	movw	r1, #0
   1437c:	str	r1, [r0, #4]
   14380:	ldr	r0, [sp, #500]	; 0x1f4
   14384:	bl	13f1c <free_stack_base@@Base>
   14388:	ldr	r0, [pc, #3896]	; 152c8 <next@@Base+0x1020>
   1438c:	add	r0, pc, r0
   14390:	add	r0, r0, #24
   14394:	ldr	r1, [sp, #508]	; 0x1fc
   14398:	str	r1, [fp, #-20]	; 0xffffffec
   1439c:	str	r0, [sp, #480]	; 0x1e0
   143a0:	b	16254 <next@@Base+0x1fac>
   143a4:	ldr	r0, [sp, #484]	; 0x1e4
   143a8:	ldr	r1, [r0]
   143ac:	ldr	r2, [r0, #4]
   143b0:	adds	r1, r1, #1
   143b4:	adc	r2, r2, #0
   143b8:	str	r1, [r0]
   143bc:	str	r2, [r0, #4]
   143c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   143c4:	bl	14048 <get_char@@Base>
   143c8:	ldr	r1, [pc, #4052]	; 153a4 <next@@Base+0x10fc>
   143cc:	add	r1, pc, r1
   143d0:	add	r1, r1, #32
   143d4:	strb	r0, [sp, #515]	; 0x203
   143d8:	str	r1, [sp, #476]	; 0x1dc
   143dc:	ldr	r0, [sp, #476]	; 0x1dc
   143e0:	ldr	r1, [pc, #4032]	; 153a8 <next@@Base+0x1100>
   143e4:	add	r1, pc, r1
   143e8:	add	r2, r1, #40	; 0x28
   143ec:	add	r1, r1, #48	; 0x30
   143f0:	ldr	r3, [r0]
   143f4:	ldr	ip, [r0, #4]
   143f8:	adds	r3, r3, #1
   143fc:	adc	ip, ip, #0
   14400:	str	r3, [r0]
   14404:	str	ip, [r0, #4]
   14408:	ldrb	r0, [sp, #515]	; 0x203
   1440c:	cmp	r0, #0
   14410:	str	r2, [sp, #472]	; 0x1d8
   14414:	str	r1, [sp, #468]	; 0x1d4
   14418:	beq	1620c <next@@Base+0x1f64>
   1441c:	ldr	r0, [sp, #472]	; 0x1d8
   14420:	ldr	r1, [r0]
   14424:	ldr	r2, [r0, #4]
   14428:	adds	r1, r1, #1
   1442c:	adc	r2, r2, #0
   14430:	str	r1, [r0]
   14434:	str	r2, [r0, #4]
   14438:	ldr	r0, [pc, #4064]	; 15420 <next@@Base+0x1178>
   1443c:	add	r0, pc, r0
   14440:	add	r1, r0, #104	; 0x68
   14444:	add	r2, r0, #96	; 0x60
   14448:	add	r3, r0, #88	; 0x58
   1444c:	add	ip, r0, #80	; 0x50
   14450:	add	lr, r0, #72	; 0x48
   14454:	add	r4, r0, #64	; 0x40
   14458:	add	r0, r0, #56	; 0x38
   1445c:	ldr	r5, [sp, #516]	; 0x204
   14460:	cmp	r5, #5
   14464:	str	r1, [sp, #464]	; 0x1d0
   14468:	str	r2, [sp, #460]	; 0x1cc
   1446c:	str	r3, [sp, #456]	; 0x1c8
   14470:	str	ip, [sp, #452]	; 0x1c4
   14474:	str	lr, [sp, #448]	; 0x1c0
   14478:	str	r4, [sp, #444]	; 0x1bc
   1447c:	str	r5, [sp, #440]	; 0x1b8
   14480:	str	r0, [sp, #436]	; 0x1b4
   14484:	bhi	161d8 <next@@Base+0x1f30>
   14488:	add	r0, pc, #56	; 0x38
   1448c:	ldr	r1, [sp, #440]	; 0x1b8
   14490:	ldr	r2, [r0, r1, lsl #2]
   14494:	ldr	r3, [sp, #444]	; 0x1bc
   14498:	ldr	ip, [sp, #448]	; 0x1c0
   1449c:	ldr	lr, [sp, #452]	; 0x1c4
   144a0:	ldr	r4, [sp, #456]	; 0x1c8
   144a4:	ldr	r5, [sp, #460]	; 0x1cc
   144a8:	ldr	r6, [sp, #464]	; 0x1d0
   144ac:	str	r3, [sp, #432]	; 0x1b0
   144b0:	str	ip, [sp, #428]	; 0x1ac
   144b4:	str	lr, [sp, #424]	; 0x1a8
   144b8:	str	r4, [sp, #420]	; 0x1a4
   144bc:	str	r5, [sp, #416]	; 0x1a0
   144c0:	str	r6, [sp, #412]	; 0x19c
   144c4:	add	pc, r0, r2
   144c8:	andeq	r0, r0, r8, lsl r0
   144cc:	andeq	r1, r0, r8, ror #3
   144d0:	andeq	r1, r0, r8, asr #7
   144d4:	andeq	r1, r0, ip, asr #11
   144d8:	andeq	r1, r0, ip, lsl r8
   144dc:	andeq	r1, r0, ip, lsr #22
   144e0:	ldr	r0, [sp, #432]	; 0x1b0
   144e4:	ldr	r1, [pc, #3968]	; 1546c <next@@Base+0x11c4>
   144e8:	add	r1, pc, r1
   144ec:	add	r2, r1, #112	; 0x70
   144f0:	add	r1, r1, #120	; 0x78
   144f4:	ldr	r3, [r0]
   144f8:	ldr	ip, [r0, #4]
   144fc:	adds	r3, r3, #1
   14500:	adc	ip, ip, #0
   14504:	str	r3, [r0]
   14508:	str	ip, [r0, #4]
   1450c:	ldrb	r0, [sp, #515]	; 0x203
   14510:	cmp	r0, #9
   14514:	str	r1, [sp, #408]	; 0x198
   14518:	str	r2, [sp, #404]	; 0x194
   1451c:	beq	145a0 <next@@Base+0x2f8>
   14520:	ldr	r0, [sp, #408]	; 0x198
   14524:	ldr	r1, [pc, #3908]	; 15470 <next@@Base+0x11c8>
   14528:	add	r1, pc, r1
   1452c:	add	r2, r1, #128	; 0x80
   14530:	add	r1, r1, #136	; 0x88
   14534:	ldr	r3, [r0]
   14538:	ldr	ip, [r0, #4]
   1453c:	adds	r3, r3, #1
   14540:	adc	ip, ip, #0
   14544:	str	r3, [r0]
   14548:	str	ip, [r0, #4]
   1454c:	ldrb	r0, [sp, #515]	; 0x203
   14550:	cmp	r0, #32
   14554:	str	r1, [sp, #400]	; 0x190
   14558:	str	r2, [sp, #404]	; 0x194
   1455c:	beq	145a0 <next@@Base+0x2f8>
   14560:	ldr	r0, [sp, #400]	; 0x190
   14564:	ldr	r1, [pc, #3848]	; 15474 <next@@Base+0x11cc>
   14568:	add	r1, pc, r1
   1456c:	add	r2, r1, #144	; 0x90
   14570:	add	r1, r1, #152	; 0x98
   14574:	ldr	r3, [r0]
   14578:	ldr	ip, [r0, #4]
   1457c:	adds	r3, r3, #1
   14580:	adc	ip, ip, #0
   14584:	str	r3, [r0]
   14588:	str	ip, [r0, #4]
   1458c:	ldrb	r0, [sp, #515]	; 0x203
   14590:	cmp	r0, #10
   14594:	str	r2, [sp, #404]	; 0x194
   14598:	str	r1, [sp, #396]	; 0x18c
   1459c:	bne	145dc <next@@Base+0x334>
   145a0:	ldr	r0, [sp, #404]	; 0x194
   145a4:	ldr	r1, [r0]
   145a8:	ldr	r2, [r0, #4]
   145ac:	adds	r1, r1, #1
   145b0:	adc	r2, r2, #0
   145b4:	str	r1, [r0]
   145b8:	str	r2, [r0, #4]
   145bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   145c0:	bl	14048 <get_char@@Base>
   145c4:	ldr	r1, [pc, #3756]	; 15478 <next@@Base+0x11d0>
   145c8:	add	r1, pc, r1
   145cc:	add	r1, r1, #160	; 0xa0
   145d0:	strb	r0, [sp, #515]	; 0x203
   145d4:	str	r1, [sp, #392]	; 0x188
   145d8:	b	1566c <next@@Base+0x13c4>
   145dc:	ldr	r0, [sp, #396]	; 0x18c
   145e0:	ldr	r1, [pc, #3732]	; 1547c <next@@Base+0x11d4>
   145e4:	add	r1, pc, r1
   145e8:	add	r2, r1, #168	; 0xa8
   145ec:	add	r1, r1, #176	; 0xb0
   145f0:	ldr	r3, [r0]
   145f4:	ldr	ip, [r0, #4]
   145f8:	adds	r3, r3, #1
   145fc:	adc	ip, ip, #0
   14600:	str	r3, [r0]
   14604:	str	ip, [r0, #4]
   14608:	ldrb	r0, [sp, #515]	; 0x203
   1460c:	cmp	r0, #48	; 0x30
   14610:	str	r2, [sp, #388]	; 0x184
   14614:	str	r1, [sp, #384]	; 0x180
   14618:	bne	1466c <next@@Base+0x3c4>
   1461c:	ldr	r0, [sp, #388]	; 0x184
   14620:	ldr	r1, [r0]
   14624:	ldr	r2, [r0, #4]
   14628:	adds	r1, r1, #1
   1462c:	adc	r2, r2, #0
   14630:	str	r1, [r0]
   14634:	str	r2, [r0, #4]
   14638:	movw	r0, #8
   1463c:	bl	11f90 <malloc@plt>
   14640:	str	r0, [sp, #508]	; 0x1fc
   14644:	ldr	r0, [sp, #508]	; 0x1fc
   14648:	movw	r1, #0
   1464c:	bl	12ca4 <init_token_int_value@@Base>
   14650:	ldr	r0, [pc, #3624]	; 15480 <next@@Base+0x11d8>
   14654:	add	r0, pc, r0
   14658:	add	r0, r0, #184	; 0xb8
   1465c:	ldr	r1, [sp, #508]	; 0x1fc
   14660:	str	r1, [fp, #-20]	; 0xffffffec
   14664:	str	r0, [sp, #480]	; 0x1e0
   14668:	b	16254 <next@@Base+0x1fac>
   1466c:	ldr	r0, [sp, #384]	; 0x180
   14670:	ldr	r1, [pc, #3596]	; 15484 <next@@Base+0x11dc>
   14674:	add	r1, pc, r1
   14678:	add	r2, r1, #192	; 0xc0
   1467c:	add	r1, r1, #200	; 0xc8
   14680:	ldr	r3, [r0]
   14684:	ldr	ip, [r0, #4]
   14688:	adds	r3, r3, #1
   1468c:	adc	ip, ip, #0
   14690:	str	r3, [r0]
   14694:	str	ip, [r0, #4]
   14698:	ldrb	r0, [sp, #515]	; 0x203
   1469c:	cmp	r0, #49	; 0x31
   146a0:	str	r2, [sp, #380]	; 0x17c
   146a4:	str	r1, [sp, #376]	; 0x178
   146a8:	blt	1474c <next@@Base+0x4a4>
   146ac:	ldr	r0, [sp, #380]	; 0x17c
   146b0:	ldr	r1, [pc, #4068]	; 1569c <next@@Base+0x13f4>
   146b4:	add	r1, pc, r1
   146b8:	add	r2, r1, #208	; 0xd0
   146bc:	add	r1, r1, #216	; 0xd8
   146c0:	ldr	r3, [r0]
   146c4:	ldr	ip, [r0, #4]
   146c8:	adds	r3, r3, #1
   146cc:	adc	ip, ip, #0
   146d0:	str	r3, [r0]
   146d4:	str	ip, [r0, #4]
   146d8:	ldrb	r0, [sp, #515]	; 0x203
   146dc:	cmp	r0, #57	; 0x39
   146e0:	str	r2, [sp, #372]	; 0x174
   146e4:	str	r1, [sp, #376]	; 0x178
   146e8:	bgt	1474c <next@@Base+0x4a4>
   146ec:	ldr	r0, [sp, #372]	; 0x174
   146f0:	ldr	r1, [r0]
   146f4:	ldr	r2, [r0, #4]
   146f8:	adds	r1, r1, #1
   146fc:	adc	r2, r2, #0
   14700:	str	r1, [r0]
   14704:	str	r2, [r0, #4]
   14708:	ldrb	r0, [sp, #515]	; 0x203
   1470c:	ldr	r1, [sp, #520]	; 0x208
   14710:	add	r2, r1, #1
   14714:	str	r2, [sp, #520]	; 0x208
   14718:	add	r2, sp, #528	; 0x210
   1471c:	add	r1, r2, r1
   14720:	strb	r0, [r1]
   14724:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14728:	bl	14048 <get_char@@Base>
   1472c:	ldr	r1, [pc, #3948]	; 156a0 <next@@Base+0x13f8>
   14730:	add	r1, pc, r1
   14734:	add	r1, r1, #224	; 0xe0
   14738:	strb	r0, [sp, #515]	; 0x203
   1473c:	movw	r0, #1
   14740:	str	r0, [sp, #516]	; 0x204
   14744:	str	r1, [sp, #368]	; 0x170
   14748:	b	15614 <next@@Base+0x136c>
   1474c:	ldr	r0, [sp, #376]	; 0x178
   14750:	ldr	r1, [pc, #3916]	; 156a4 <next@@Base+0x13fc>
   14754:	add	r1, pc, r1
   14758:	add	r2, r1, #232	; 0xe8
   1475c:	add	r1, r1, #240	; 0xf0
   14760:	ldr	r3, [r0]
   14764:	ldr	ip, [r0, #4]
   14768:	adds	r3, r3, #1
   1476c:	adc	ip, ip, #0
   14770:	str	r3, [r0]
   14774:	str	ip, [r0, #4]
   14778:	ldrb	r0, [sp, #515]	; 0x203
   1477c:	cmp	r0, #40	; 0x28
   14780:	str	r2, [sp, #364]	; 0x16c
   14784:	str	r1, [sp, #360]	; 0x168
   14788:	bne	147d8 <next@@Base+0x530>
   1478c:	ldr	r0, [sp, #364]	; 0x16c
   14790:	ldr	r1, [r0]
   14794:	ldr	r2, [r0, #4]
   14798:	adds	r1, r1, #1
   1479c:	adc	r2, r2, #0
   147a0:	str	r1, [r0]
   147a4:	str	r2, [r0, #4]
   147a8:	movw	r0, #4
   147ac:	bl	11f90 <malloc@plt>
   147b0:	str	r0, [sp, #508]	; 0x1fc
   147b4:	ldr	r0, [sp, #508]	; 0x1fc
   147b8:	bl	12dbc <init_token_opar@@Base>
   147bc:	ldr	r0, [pc, #3812]	; 156a8 <next@@Base+0x1400>
   147c0:	add	r0, pc, r0
   147c4:	add	r0, r0, #248	; 0xf8
   147c8:	ldr	r1, [sp, #508]	; 0x1fc
   147cc:	str	r1, [fp, #-20]	; 0xffffffec
   147d0:	str	r0, [sp, #480]	; 0x1e0
   147d4:	b	16254 <next@@Base+0x1fac>
   147d8:	ldr	r0, [sp, #360]	; 0x168
   147dc:	ldr	r1, [pc, #3784]	; 156ac <next@@Base+0x1404>
   147e0:	add	r1, pc, r1
   147e4:	add	r2, r1, #256	; 0x100
   147e8:	add	r1, r1, #264	; 0x108
   147ec:	ldr	r3, [r0]
   147f0:	ldr	ip, [r0, #4]
   147f4:	adds	r3, r3, #1
   147f8:	adc	ip, ip, #0
   147fc:	str	r3, [r0]
   14800:	str	ip, [r0, #4]
   14804:	ldrb	r0, [sp, #515]	; 0x203
   14808:	cmp	r0, #41	; 0x29
   1480c:	str	r2, [sp, #356]	; 0x164
   14810:	str	r1, [sp, #352]	; 0x160
   14814:	bne	14864 <next@@Base+0x5bc>
   14818:	ldr	r0, [sp, #356]	; 0x164
   1481c:	ldr	r1, [r0]
   14820:	ldr	r2, [r0, #4]
   14824:	adds	r1, r1, #1
   14828:	adc	r2, r2, #0
   1482c:	str	r1, [r0]
   14830:	str	r2, [r0, #4]
   14834:	movw	r0, #4
   14838:	bl	11f90 <malloc@plt>
   1483c:	str	r0, [sp, #508]	; 0x1fc
   14840:	ldr	r0, [sp, #508]	; 0x1fc
   14844:	bl	12e30 <init_token_cpar@@Base>
   14848:	ldr	r0, [pc, #4012]	; 157fc <next@@Base+0x1554>
   1484c:	add	r0, pc, r0
   14850:	add	r0, r0, #272	; 0x110
   14854:	ldr	r1, [sp, #508]	; 0x1fc
   14858:	str	r1, [fp, #-20]	; 0xffffffec
   1485c:	str	r0, [sp, #480]	; 0x1e0
   14860:	b	16254 <next@@Base+0x1fac>
   14864:	ldr	r0, [sp, #352]	; 0x160
   14868:	ldr	r1, [pc, #3984]	; 15800 <next@@Base+0x1558>
   1486c:	add	r1, pc, r1
   14870:	add	r2, r1, #280	; 0x118
   14874:	add	r1, r1, #288	; 0x120
   14878:	ldr	r3, [r0]
   1487c:	ldr	ip, [r0, #4]
   14880:	adds	r3, r3, #1
   14884:	adc	ip, ip, #0
   14888:	str	r3, [r0]
   1488c:	str	ip, [r0, #4]
   14890:	ldrb	r0, [sp, #515]	; 0x203
   14894:	cmp	r0, #123	; 0x7b
   14898:	str	r2, [sp, #348]	; 0x15c
   1489c:	str	r1, [sp, #344]	; 0x158
   148a0:	bne	148f0 <next@@Base+0x648>
   148a4:	ldr	r0, [sp, #348]	; 0x15c
   148a8:	ldr	r1, [r0]
   148ac:	ldr	r2, [r0, #4]
   148b0:	adds	r1, r1, #1
   148b4:	adc	r2, r2, #0
   148b8:	str	r1, [r0]
   148bc:	str	r2, [r0, #4]
   148c0:	movw	r0, #4
   148c4:	bl	11f90 <malloc@plt>
   148c8:	str	r0, [sp, #508]	; 0x1fc
   148cc:	ldr	r0, [sp, #508]	; 0x1fc
   148d0:	bl	12ea4 <init_token_obra@@Base>
   148d4:	ldr	r0, [pc, #4016]	; 1588c <next@@Base+0x15e4>
   148d8:	add	r0, pc, r0
   148dc:	add	r0, r0, #296	; 0x128
   148e0:	ldr	r1, [sp, #508]	; 0x1fc
   148e4:	str	r1, [fp, #-20]	; 0xffffffec
   148e8:	str	r0, [sp, #480]	; 0x1e0
   148ec:	b	16254 <next@@Base+0x1fac>
   148f0:	ldr	r0, [sp, #344]	; 0x158
   148f4:	ldr	r1, [pc, #4072]	; 158e4 <next@@Base+0x163c>
   148f8:	add	r1, pc, r1
   148fc:	add	r2, r1, #304	; 0x130
   14900:	add	r1, r1, #312	; 0x138
   14904:	ldr	r3, [r0]
   14908:	ldr	ip, [r0, #4]
   1490c:	adds	r3, r3, #1
   14910:	adc	ip, ip, #0
   14914:	str	r3, [r0]
   14918:	str	ip, [r0, #4]
   1491c:	ldrb	r0, [sp, #515]	; 0x203
   14920:	cmp	r0, #125	; 0x7d
   14924:	str	r2, [sp, #340]	; 0x154
   14928:	str	r1, [sp, #336]	; 0x150
   1492c:	bne	1497c <next@@Base+0x6d4>
   14930:	ldr	r0, [sp, #340]	; 0x154
   14934:	ldr	r1, [r0]
   14938:	ldr	r2, [r0, #4]
   1493c:	adds	r1, r1, #1
   14940:	adc	r2, r2, #0
   14944:	str	r1, [r0]
   14948:	str	r2, [r0, #4]
   1494c:	movw	r0, #4
   14950:	bl	11f90 <malloc@plt>
   14954:	str	r0, [sp, #508]	; 0x1fc
   14958:	ldr	r0, [sp, #508]	; 0x1fc
   1495c:	bl	12f18 <init_token_cbra@@Base>
   14960:	ldr	r0, [pc, #4000]	; 15908 <next@@Base+0x1660>
   14964:	add	r0, pc, r0
   14968:	add	r0, r0, #320	; 0x140
   1496c:	ldr	r1, [sp, #508]	; 0x1fc
   14970:	str	r1, [fp, #-20]	; 0xffffffec
   14974:	str	r0, [sp, #480]	; 0x1e0
   14978:	b	16254 <next@@Base+0x1fac>
   1497c:	ldr	r0, [sp, #336]	; 0x150
   14980:	ldr	r1, [pc, #3972]	; 1590c <next@@Base+0x1664>
   14984:	add	r1, pc, r1
   14988:	add	r2, r1, #328	; 0x148
   1498c:	add	r1, r1, #336	; 0x150
   14990:	ldr	r3, [r0]
   14994:	ldr	ip, [r0, #4]
   14998:	adds	r3, r3, #1
   1499c:	adc	ip, ip, #0
   149a0:	str	r3, [r0]
   149a4:	str	ip, [r0, #4]
   149a8:	ldrb	r0, [sp, #515]	; 0x203
   149ac:	cmp	r0, #59	; 0x3b
   149b0:	str	r2, [sp, #332]	; 0x14c
   149b4:	str	r1, [sp, #328]	; 0x148
   149b8:	bne	14a08 <next@@Base+0x760>
   149bc:	ldr	r0, [sp, #332]	; 0x14c
   149c0:	ldr	r1, [r0]
   149c4:	ldr	r2, [r0, #4]
   149c8:	adds	r1, r1, #1
   149cc:	adc	r2, r2, #0
   149d0:	str	r1, [r0]
   149d4:	str	r2, [r0, #4]
   149d8:	movw	r0, #4
   149dc:	bl	11f90 <malloc@plt>
   149e0:	str	r0, [sp, #508]	; 0x1fc
   149e4:	ldr	r0, [sp, #508]	; 0x1fc
   149e8:	bl	13000 <init_token_semicolon@@Base>
   149ec:	ldr	r0, [pc, #4084]	; 159e8 <next@@Base+0x1740>
   149f0:	add	r0, pc, r0
   149f4:	add	r0, r0, #344	; 0x158
   149f8:	ldr	r1, [sp, #508]	; 0x1fc
   149fc:	str	r1, [fp, #-20]	; 0xffffffec
   14a00:	str	r0, [sp, #480]	; 0x1e0
   14a04:	b	16254 <next@@Base+0x1fac>
   14a08:	ldr	r0, [sp, #328]	; 0x148
   14a0c:	ldr	r1, [pc, #4056]	; 159ec <next@@Base+0x1744>
   14a10:	add	r1, pc, r1
   14a14:	add	r2, r1, #352	; 0x160
   14a18:	add	r1, r1, #360	; 0x168
   14a1c:	ldr	r3, [r0]
   14a20:	ldr	ip, [r0, #4]
   14a24:	adds	r3, r3, #1
   14a28:	adc	ip, ip, #0
   14a2c:	str	r3, [r0]
   14a30:	str	ip, [r0, #4]
   14a34:	ldrb	r0, [sp, #515]	; 0x203
   14a38:	cmp	r0, #101	; 0x65
   14a3c:	str	r2, [sp, #324]	; 0x144
   14a40:	str	r1, [sp, #320]	; 0x140
   14a44:	bne	14aa8 <next@@Base+0x800>
   14a48:	ldr	r0, [sp, #324]	; 0x144
   14a4c:	ldr	r1, [r0]
   14a50:	ldr	r2, [r0, #4]
   14a54:	adds	r1, r1, #1
   14a58:	adc	r2, r2, #0
   14a5c:	str	r1, [r0]
   14a60:	str	r2, [r0, #4]
   14a64:	ldrb	r0, [sp, #515]	; 0x203
   14a68:	ldr	r1, [sp, #520]	; 0x208
   14a6c:	add	r2, r1, #1
   14a70:	str	r2, [sp, #520]	; 0x208
   14a74:	add	r2, sp, #528	; 0x210
   14a78:	add	r1, r2, r1
   14a7c:	strb	r0, [r1]
   14a80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a84:	bl	14048 <get_char@@Base>
   14a88:	ldr	r1, [pc, #4092]	; 15a8c <next@@Base+0x17e4>
   14a8c:	add	r1, pc, r1
   14a90:	add	r1, r1, #368	; 0x170
   14a94:	strb	r0, [sp, #515]	; 0x203
   14a98:	movw	r0, #5
   14a9c:	str	r0, [sp, #516]	; 0x204
   14aa0:	str	r1, [sp, #316]	; 0x13c
   14aa4:	b	1550c <next@@Base+0x1264>
   14aa8:	ldr	r0, [sp, #320]	; 0x140
   14aac:	ldr	r1, [pc, #4060]	; 15a90 <next@@Base+0x17e8>
   14ab0:	add	r1, pc, r1
   14ab4:	add	r2, r1, #376	; 0x178
   14ab8:	add	r1, r1, #384	; 0x180
   14abc:	ldr	r3, [r0]
   14ac0:	ldr	ip, [r0, #4]
   14ac4:	adds	r3, r3, #1
   14ac8:	adc	ip, ip, #0
   14acc:	str	r3, [r0]
   14ad0:	str	ip, [r0, #4]
   14ad4:	ldrb	r0, [sp, #515]	; 0x203
   14ad8:	cmp	r0, #105	; 0x69
   14adc:	str	r2, [sp, #312]	; 0x138
   14ae0:	str	r1, [sp, #308]	; 0x134
   14ae4:	bne	14b48 <next@@Base+0x8a0>
   14ae8:	ldr	r0, [sp, #312]	; 0x138
   14aec:	ldr	r1, [r0]
   14af0:	ldr	r2, [r0, #4]
   14af4:	adds	r1, r1, #1
   14af8:	adc	r2, r2, #0
   14afc:	str	r1, [r0]
   14b00:	str	r2, [r0, #4]
   14b04:	ldrb	r0, [sp, #515]	; 0x203
   14b08:	ldr	r1, [sp, #520]	; 0x208
   14b0c:	add	r2, r1, #1
   14b10:	str	r2, [sp, #520]	; 0x208
   14b14:	add	r2, sp, #528	; 0x210
   14b18:	add	r1, r2, r1
   14b1c:	strb	r0, [r1]
   14b20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14b24:	bl	14048 <get_char@@Base>
   14b28:	ldr	r1, [pc, #4040]	; 15af8 <next@@Base+0x1850>
   14b2c:	add	r1, pc, r1
   14b30:	add	r1, r1, #392	; 0x188
   14b34:	strb	r0, [sp, #515]	; 0x203
   14b38:	movw	r0, #2
   14b3c:	str	r0, [sp, #516]	; 0x204
   14b40:	str	r1, [sp, #304]	; 0x130
   14b44:	b	154e0 <next@@Base+0x1238>
   14b48:	ldr	r0, [sp, #308]	; 0x134
   14b4c:	ldr	r1, [pc, #4008]	; 15afc <next@@Base+0x1854>
   14b50:	add	r1, pc, r1
   14b54:	add	r2, r1, #400	; 0x190
   14b58:	add	r1, r1, #408	; 0x198
   14b5c:	ldr	r3, [r0]
   14b60:	ldr	ip, [r0, #4]
   14b64:	adds	r3, r3, #1
   14b68:	adc	ip, ip, #0
   14b6c:	str	r3, [r0]
   14b70:	str	ip, [r0, #4]
   14b74:	ldrb	r0, [sp, #515]	; 0x203
   14b78:	cmp	r0, #109	; 0x6d
   14b7c:	str	r2, [sp, #300]	; 0x12c
   14b80:	str	r1, [sp, #296]	; 0x128
   14b84:	bne	14be8 <next@@Base+0x940>
   14b88:	ldr	r0, [sp, #300]	; 0x12c
   14b8c:	ldr	r1, [r0]
   14b90:	ldr	r2, [r0, #4]
   14b94:	adds	r1, r1, #1
   14b98:	adc	r2, r2, #0
   14b9c:	str	r1, [r0]
   14ba0:	str	r2, [r0, #4]
   14ba4:	ldrb	r0, [sp, #515]	; 0x203
   14ba8:	ldr	r1, [sp, #520]	; 0x208
   14bac:	add	r2, r1, #1
   14bb0:	str	r2, [sp, #520]	; 0x208
   14bb4:	add	r2, sp, #528	; 0x210
   14bb8:	add	r1, r2, r1
   14bbc:	strb	r0, [r1]
   14bc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14bc4:	bl	14048 <get_char@@Base>
   14bc8:	ldr	r1, [pc, #4028]	; 15b8c <next@@Base+0x18e4>
   14bcc:	add	r1, pc, r1
   14bd0:	add	r1, r1, #416	; 0x1a0
   14bd4:	strb	r0, [sp, #515]	; 0x203
   14bd8:	movw	r0, #3
   14bdc:	str	r0, [sp, #516]	; 0x204
   14be0:	str	r1, [sp, #292]	; 0x124
   14be4:	b	154b4 <next@@Base+0x120c>
   14be8:	ldr	r0, [sp, #296]	; 0x128
   14bec:	ldr	r1, [pc, #3996]	; 15b90 <next@@Base+0x18e8>
   14bf0:	add	r1, pc, r1
   14bf4:	add	r2, r1, #424	; 0x1a8
   14bf8:	add	r1, r1, #432	; 0x1b0
   14bfc:	ldr	r3, [r0]
   14c00:	ldr	ip, [r0, #4]
   14c04:	adds	r3, r3, #1
   14c08:	adc	ip, ip, #0
   14c0c:	str	r3, [r0]
   14c10:	str	ip, [r0, #4]
   14c14:	ldrb	r0, [sp, #515]	; 0x203
   14c18:	cmp	r0, #114	; 0x72
   14c1c:	str	r2, [sp, #288]	; 0x120
   14c20:	str	r1, [sp, #284]	; 0x11c
   14c24:	bne	14c88 <next@@Base+0x9e0>
   14c28:	ldr	r0, [sp, #288]	; 0x120
   14c2c:	ldr	r1, [r0]
   14c30:	ldr	r2, [r0, #4]
   14c34:	adds	r1, r1, #1
   14c38:	adc	r2, r2, #0
   14c3c:	str	r1, [r0]
   14c40:	str	r2, [r0, #4]
   14c44:	ldrb	r0, [sp, #515]	; 0x203
   14c48:	ldr	r1, [sp, #520]	; 0x208
   14c4c:	add	r2, r1, #1
   14c50:	str	r2, [sp, #520]	; 0x208
   14c54:	add	r2, sp, #528	; 0x210
   14c58:	add	r1, r2, r1
   14c5c:	strb	r0, [r1]
   14c60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14c64:	bl	14048 <get_char@@Base>
   14c68:	ldr	r1, [pc, #4016]	; 15c20 <next@@Base+0x1978>
   14c6c:	add	r1, pc, r1
   14c70:	add	r1, r1, #440	; 0x1b8
   14c74:	strb	r0, [sp, #515]	; 0x203
   14c78:	movw	r0, #4
   14c7c:	str	r0, [sp, #516]	; 0x204
   14c80:	str	r1, [sp, #280]	; 0x118
   14c84:	b	15488 <next@@Base+0x11e0>
   14c88:	ldr	r0, [sp, #284]	; 0x11c
   14c8c:	ldr	r1, [pc, #3984]	; 15c24 <next@@Base+0x197c>
   14c90:	add	r1, pc, r1
   14c94:	add	r2, r1, #448	; 0x1c0
   14c98:	add	r1, r1, #456	; 0x1c8
   14c9c:	ldr	r3, [r0]
   14ca0:	ldr	ip, [r0, #4]
   14ca4:	adds	r3, r3, #1
   14ca8:	adc	ip, ip, #0
   14cac:	str	r3, [r0]
   14cb0:	str	ip, [r0, #4]
   14cb4:	ldrb	r0, [sp, #515]	; 0x203
   14cb8:	cmp	r0, #33	; 0x21
   14cbc:	str	r2, [sp, #276]	; 0x114
   14cc0:	str	r1, [sp, #272]	; 0x110
   14cc4:	bne	14e38 <next@@Base+0xb90>
   14cc8:	ldr	r0, [sp, #276]	; 0x114
   14ccc:	ldr	r1, [r0]
   14cd0:	ldr	r2, [r0, #4]
   14cd4:	adds	r1, r1, #1
   14cd8:	adc	r2, r2, #0
   14cdc:	str	r1, [r0]
   14ce0:	str	r2, [r0, #4]
   14ce4:	ldrb	r0, [sp, #515]	; 0x203
   14ce8:	ldr	r1, [sp, #520]	; 0x208
   14cec:	add	r2, r1, #1
   14cf0:	str	r2, [sp, #520]	; 0x208
   14cf4:	add	r2, sp, #528	; 0x210
   14cf8:	add	r1, r2, r1
   14cfc:	strb	r0, [r1]
   14d00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14d04:	bl	14048 <get_char@@Base>
   14d08:	strb	r0, [sp, #515]	; 0x203
   14d0c:	movw	r0, #8
   14d10:	bl	11f90 <malloc@plt>
   14d14:	ldr	r1, [pc, #4036]	; 15ce0 <next@@Base+0x1a38>
   14d18:	add	r1, pc, r1
   14d1c:	add	r2, r1, #464	; 0x1d0
   14d20:	add	r1, r1, #472	; 0x1d8
   14d24:	str	r0, [sp, #508]	; 0x1fc
   14d28:	ldrb	r0, [sp, #515]	; 0x203
   14d2c:	cmp	r0, #61	; 0x3d
   14d30:	str	r2, [sp, #268]	; 0x10c
   14d34:	str	r1, [sp, #264]	; 0x108
   14d38:	beq	14d98 <next@@Base+0xaf0>
   14d3c:	ldr	r0, [sp, #268]	; 0x10c
   14d40:	ldr	r1, [r0]
   14d44:	ldr	r2, [r0, #4]
   14d48:	adds	r1, r1, #1
   14d4c:	adc	r2, r2, #0
   14d50:	str	r1, [r0]
   14d54:	str	r2, [r0, #4]
   14d58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14d5c:	bl	1422c <push_back_one_char@@Base>
   14d60:	movw	r0, #2
   14d64:	bl	11f90 <malloc@plt>
   14d68:	ldr	r1, [pc, #4056]	; 15d48 <next@@Base+0x1aa0>
   14d6c:	add	r1, pc, r1
   14d70:	add	r1, r1, #480	; 0x1e0
   14d74:	str	r0, [sp, #524]	; 0x20c
   14d78:	ldrb	r0, [sp, #528]	; 0x210
   14d7c:	ldr	r2, [sp, #524]	; 0x20c
   14d80:	strb	r0, [r2]
   14d84:	ldr	r0, [sp, #524]	; 0x20c
   14d88:	movw	r2, #0
   14d8c:	strb	r2, [r0, #1]
   14d90:	str	r1, [sp, #260]	; 0x104
   14d94:	b	14df4 <next@@Base+0xb4c>
   14d98:	ldr	r0, [sp, #264]	; 0x108
   14d9c:	ldr	r1, [r0]
   14da0:	ldr	r2, [r0, #4]
   14da4:	adds	r1, r1, #1
   14da8:	adc	r2, r2, #0
   14dac:	str	r1, [r0]
   14db0:	str	r2, [r0, #4]
   14db4:	movw	r0, #3
   14db8:	bl	11f90 <malloc@plt>
   14dbc:	ldr	r1, [pc, #3976]	; 15d4c <next@@Base+0x1aa4>
   14dc0:	add	r1, pc, r1
   14dc4:	add	r1, r1, #488	; 0x1e8
   14dc8:	str	r0, [sp, #524]	; 0x20c
   14dcc:	ldrb	r0, [sp, #528]	; 0x210
   14dd0:	ldr	r2, [sp, #524]	; 0x20c
   14dd4:	strb	r0, [r2]
   14dd8:	ldrb	r0, [sp, #515]	; 0x203
   14ddc:	ldr	r2, [sp, #524]	; 0x20c
   14de0:	strb	r0, [r2, #1]
   14de4:	ldr	r0, [sp, #524]	; 0x20c
   14de8:	movw	r2, #0
   14dec:	strb	r2, [r0, #2]
   14df0:	str	r1, [sp, #260]	; 0x104
   14df4:	ldr	r0, [sp, #260]	; 0x104
   14df8:	ldr	r1, [r0]
   14dfc:	ldr	r2, [r0, #4]
   14e00:	adds	r1, r1, #1
   14e04:	adc	r2, r2, #0
   14e08:	str	r1, [r0]
   14e0c:	str	r2, [r0, #4]
   14e10:	ldr	r0, [sp, #508]	; 0x1fc
   14e14:	ldr	r1, [sp, #524]	; 0x20c
   14e18:	bl	131d0 <init_token_boolean_op@@Base>
   14e1c:	ldr	r0, [pc, #4024]	; 15ddc <next@@Base+0x1b34>
   14e20:	add	r0, pc, r0
   14e24:	add	r0, r0, #496	; 0x1f0
   14e28:	ldr	r1, [sp, #508]	; 0x1fc
   14e2c:	str	r1, [fp, #-20]	; 0xffffffec
   14e30:	str	r0, [sp, #480]	; 0x1e0
   14e34:	b	16254 <next@@Base+0x1fac>
   14e38:	ldr	r0, [sp, #272]	; 0x110
   14e3c:	ldr	r1, [pc, #3996]	; 15de0 <next@@Base+0x1b38>
   14e40:	add	r1, pc, r1
   14e44:	add	r2, r1, #504	; 0x1f8
   14e48:	add	r1, r1, #512	; 0x200
   14e4c:	ldr	r3, [r0]
   14e50:	ldr	ip, [r0, #4]
   14e54:	adds	r3, r3, #1
   14e58:	adc	ip, ip, #0
   14e5c:	str	r3, [r0]
   14e60:	str	ip, [r0, #4]
   14e64:	ldrb	r0, [sp, #515]	; 0x203
   14e68:	cmp	r0, #60	; 0x3c
   14e6c:	str	r1, [sp, #256]	; 0x100
   14e70:	str	r2, [sp, #252]	; 0xfc
   14e74:	beq	14eb8 <next@@Base+0xc10>
   14e78:	ldr	r0, [sp, #256]	; 0x100
   14e7c:	ldr	r1, [pc, #4076]	; 15e70 <next@@Base+0x1bc8>
   14e80:	add	r1, pc, r1
   14e84:	add	r2, r1, #520	; 0x208
   14e88:	add	r1, r1, #528	; 0x210
   14e8c:	ldr	r3, [r0]
   14e90:	ldr	ip, [r0, #4]
   14e94:	adds	r3, r3, #1
   14e98:	adc	ip, ip, #0
   14e9c:	str	r3, [r0]
   14ea0:	str	ip, [r0, #4]
   14ea4:	ldrb	r0, [sp, #515]	; 0x203
   14ea8:	cmp	r0, #62	; 0x3e
   14eac:	str	r2, [sp, #252]	; 0xfc
   14eb0:	str	r1, [sp, #248]	; 0xf8
   14eb4:	bne	15028 <next@@Base+0xd80>
   14eb8:	ldr	r0, [sp, #252]	; 0xfc
   14ebc:	ldr	r1, [r0]
   14ec0:	ldr	r2, [r0, #4]
   14ec4:	adds	r1, r1, #1
   14ec8:	adc	r2, r2, #0
   14ecc:	str	r1, [r0]
   14ed0:	str	r2, [r0, #4]
   14ed4:	ldrb	r0, [sp, #515]	; 0x203
   14ed8:	ldr	r1, [sp, #520]	; 0x208
   14edc:	add	r2, r1, #1
   14ee0:	str	r2, [sp, #520]	; 0x208
   14ee4:	add	r2, sp, #528	; 0x210
   14ee8:	add	r1, r2, r1
   14eec:	strb	r0, [r1]
   14ef0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ef4:	bl	14048 <get_char@@Base>
   14ef8:	strb	r0, [sp, #515]	; 0x203
   14efc:	movw	r0, #8
   14f00:	bl	11f90 <malloc@plt>
   14f04:	ldr	r1, [pc, #4084]	; 15f00 <next@@Base+0x1c58>
   14f08:	add	r1, pc, r1
   14f0c:	add	r2, r1, #536	; 0x218
   14f10:	add	r1, r1, #544	; 0x220
   14f14:	str	r0, [sp, #508]	; 0x1fc
   14f18:	ldrb	r0, [sp, #515]	; 0x203
   14f1c:	cmp	r0, #61	; 0x3d
   14f20:	str	r2, [sp, #244]	; 0xf4
   14f24:	str	r1, [sp, #240]	; 0xf0
   14f28:	beq	14f88 <next@@Base+0xce0>
   14f2c:	ldr	r0, [sp, #244]	; 0xf4
   14f30:	ldr	r1, [r0]
   14f34:	ldr	r2, [r0, #4]
   14f38:	adds	r1, r1, #1
   14f3c:	adc	r2, r2, #0
   14f40:	str	r1, [r0]
   14f44:	str	r2, [r0, #4]
   14f48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14f4c:	bl	1422c <push_back_one_char@@Base>
   14f50:	movw	r0, #2
   14f54:	bl	11f90 <malloc@plt>
   14f58:	ldr	r1, [pc, #4004]	; 15f04 <next@@Base+0x1c5c>
   14f5c:	add	r1, pc, r1
   14f60:	add	r1, r1, #552	; 0x228
   14f64:	str	r0, [sp, #524]	; 0x20c
   14f68:	ldrb	r0, [sp, #528]	; 0x210
   14f6c:	ldr	r2, [sp, #524]	; 0x20c
   14f70:	strb	r0, [r2]
   14f74:	ldr	r0, [sp, #524]	; 0x20c
   14f78:	movw	r2, #0
   14f7c:	strb	r2, [r0, #1]
   14f80:	str	r1, [sp, #236]	; 0xec
   14f84:	b	14fe4 <next@@Base+0xd3c>
   14f88:	ldr	r0, [sp, #240]	; 0xf0
   14f8c:	ldr	r1, [r0]
   14f90:	ldr	r2, [r0, #4]
   14f94:	adds	r1, r1, #1
   14f98:	adc	r2, r2, #0
   14f9c:	str	r1, [r0]
   14fa0:	str	r2, [r0, #4]
   14fa4:	movw	r0, #3
   14fa8:	bl	11f90 <malloc@plt>
   14fac:	ldr	r1, [pc, #4068]	; 15f98 <next@@Base+0x1cf0>
   14fb0:	add	r1, pc, r1
   14fb4:	add	r1, r1, #560	; 0x230
   14fb8:	str	r0, [sp, #524]	; 0x20c
   14fbc:	ldrb	r0, [sp, #528]	; 0x210
   14fc0:	ldr	r2, [sp, #524]	; 0x20c
   14fc4:	strb	r0, [r2]
   14fc8:	ldrb	r0, [sp, #515]	; 0x203
   14fcc:	ldr	r2, [sp, #524]	; 0x20c
   14fd0:	strb	r0, [r2, #1]
   14fd4:	ldr	r0, [sp, #524]	; 0x20c
   14fd8:	movw	r2, #0
   14fdc:	strb	r2, [r0, #2]
   14fe0:	str	r1, [sp, #236]	; 0xec
   14fe4:	ldr	r0, [sp, #236]	; 0xec
   14fe8:	ldr	r1, [r0]
   14fec:	ldr	r2, [r0, #4]
   14ff0:	adds	r1, r1, #1
   14ff4:	adc	r2, r2, #0
   14ff8:	str	r1, [r0]
   14ffc:	str	r2, [r0, #4]
   15000:	ldr	r0, [sp, #508]	; 0x1fc
   15004:	ldr	r1, [sp, #524]	; 0x20c
   15008:	bl	131d0 <init_token_boolean_op@@Base>
   1500c:	ldr	r0, [pc, #4056]	; 15fec <next@@Base+0x1d44>
   15010:	add	r0, pc, r0
   15014:	add	r0, r0, #568	; 0x238
   15018:	ldr	r1, [sp, #508]	; 0x1fc
   1501c:	str	r1, [fp, #-20]	; 0xffffffec
   15020:	str	r0, [sp, #480]	; 0x1e0
   15024:	b	16254 <next@@Base+0x1fac>
   15028:	ldr	r0, [sp, #248]	; 0xf8
   1502c:	ldr	r1, [pc, #4028]	; 15ff0 <next@@Base+0x1d48>
   15030:	add	r1, pc, r1
   15034:	add	r2, r1, #576	; 0x240
   15038:	add	r1, r1, #584	; 0x248
   1503c:	ldr	r3, [r0]
   15040:	ldr	ip, [r0, #4]
   15044:	adds	r3, r3, #1
   15048:	adc	ip, ip, #0
   1504c:	str	r3, [r0]
   15050:	str	ip, [r0, #4]
   15054:	ldrb	r0, [sp, #515]	; 0x203
   15058:	cmp	r0, #61	; 0x3d
   1505c:	str	r2, [sp, #232]	; 0xe8
   15060:	str	r1, [sp, #228]	; 0xe4
   15064:	bne	15174 <next@@Base+0xecc>
   15068:	ldr	r0, [sp, #232]	; 0xe8
   1506c:	ldr	r1, [r0]
   15070:	ldr	r2, [r0, #4]
   15074:	adds	r1, r1, #1
   15078:	adc	r2, r2, #0
   1507c:	str	r1, [r0]
   15080:	str	r2, [r0, #4]
   15084:	ldrb	r0, [sp, #515]	; 0x203
   15088:	ldr	r1, [sp, #520]	; 0x208
   1508c:	add	r2, r1, #1
   15090:	str	r2, [sp, #520]	; 0x208
   15094:	add	r2, sp, #528	; 0x210
   15098:	add	r1, r2, r1
   1509c:	strb	r0, [r1]
   150a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   150a4:	bl	14048 <get_char@@Base>
   150a8:	strb	r0, [sp, #515]	; 0x203
   150ac:	movw	r0, #8
   150b0:	bl	11f90 <malloc@plt>
   150b4:	ldr	r1, [pc, #4000]	; 1605c <next@@Base+0x1db4>
   150b8:	add	r1, pc, r1
   150bc:	add	r2, r1, #592	; 0x250
   150c0:	add	r1, r1, #600	; 0x258
   150c4:	str	r0, [sp, #508]	; 0x1fc
   150c8:	ldrb	r0, [sp, #515]	; 0x203
   150cc:	cmp	r0, #61	; 0x3d
   150d0:	str	r2, [sp, #224]	; 0xe0
   150d4:	str	r1, [sp, #220]	; 0xdc
   150d8:	beq	15100 <next@@Base+0xe58>
   150dc:	ldr	r0, [sp, #224]	; 0xe0
   150e0:	ldr	r1, [r0]
   150e4:	ldr	r2, [r0, #4]
   150e8:	adds	r1, r1, #1
   150ec:	adc	r2, r2, #0
   150f0:	str	r1, [r0]
   150f4:	str	r2, [r0, #4]
   150f8:	movw	r0, #1
   150fc:	bl	11fcc <exit@plt>
   15100:	ldr	r0, [sp, #220]	; 0xdc
   15104:	ldr	r1, [r0]
   15108:	ldr	r2, [r0, #4]
   1510c:	adds	r1, r1, #1
   15110:	adc	r2, r2, #0
   15114:	str	r1, [r0]
   15118:	str	r2, [r0, #4]
   1511c:	movw	r0, #3
   15120:	bl	11f90 <malloc@plt>
   15124:	str	r0, [sp, #524]	; 0x20c
   15128:	ldrb	r0, [sp, #528]	; 0x210
   1512c:	ldr	r1, [sp, #524]	; 0x20c
   15130:	strb	r0, [r1]
   15134:	ldrb	r0, [sp, #515]	; 0x203
   15138:	ldr	r1, [sp, #524]	; 0x20c
   1513c:	strb	r0, [r1, #1]
   15140:	ldr	r0, [sp, #524]	; 0x20c
   15144:	movw	r1, #0
   15148:	strb	r1, [r0, #2]
   1514c:	ldr	r0, [sp, #508]	; 0x1fc
   15150:	ldr	r1, [sp, #524]	; 0x20c
   15154:	bl	131d0 <init_token_boolean_op@@Base>
   15158:	ldr	r0, [pc, #3984]	; 160f0 <next@@Base+0x1e48>
   1515c:	add	r0, pc, r0
   15160:	add	r0, r0, #608	; 0x260
   15164:	ldr	r1, [sp, #508]	; 0x1fc
   15168:	str	r1, [fp, #-20]	; 0xffffffec
   1516c:	str	r0, [sp, #480]	; 0x1e0
   15170:	b	16254 <next@@Base+0x1fac>
   15174:	ldr	r0, [sp, #228]	; 0xe4
   15178:	ldr	r1, [pc, #3956]	; 160f4 <next@@Base+0x1e4c>
   1517c:	add	r1, pc, r1
   15180:	add	r2, r1, #616	; 0x268
   15184:	add	r1, r1, #624	; 0x270
   15188:	ldr	r3, [r0]
   1518c:	ldr	ip, [r0, #4]
   15190:	adds	r3, r3, #1
   15194:	adc	ip, ip, #0
   15198:	str	r3, [r0]
   1519c:	str	ip, [r0, #4]
   151a0:	ldrb	r0, [sp, #515]	; 0x203
   151a4:	cmp	r0, #124	; 0x7c
   151a8:	str	r2, [sp, #216]	; 0xd8
   151ac:	str	r1, [sp, #212]	; 0xd4
   151b0:	bne	152cc <next@@Base+0x1024>
   151b4:	ldr	r0, [sp, #216]	; 0xd8
   151b8:	ldr	r1, [r0]
   151bc:	ldr	r2, [r0, #4]
   151c0:	adds	r1, r1, #1
   151c4:	adc	r2, r2, #0
   151c8:	str	r1, [r0]
   151cc:	str	r2, [r0, #4]
   151d0:	ldrb	r0, [sp, #515]	; 0x203
   151d4:	ldr	r1, [sp, #520]	; 0x208
   151d8:	add	r2, r1, #1
   151dc:	str	r2, [sp, #520]	; 0x208
   151e0:	add	r2, sp, #528	; 0x210
   151e4:	add	r1, r2, r1
   151e8:	strb	r0, [r1]
   151ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   151f0:	bl	14048 <get_char@@Base>
   151f4:	strb	r0, [sp, #515]	; 0x203
   151f8:	movw	r0, #8
   151fc:	bl	11f90 <malloc@plt>
   15200:	ldr	r1, [pc, #4044]	; 161d4 <next@@Base+0x1f2c>
   15204:	add	r1, pc, r1
   15208:	add	r2, r1, #632	; 0x278
   1520c:	add	r1, r1, #640	; 0x280
   15210:	str	r0, [sp, #508]	; 0x1fc
   15214:	ldrb	r0, [sp, #515]	; 0x203
   15218:	cmp	r0, #124	; 0x7c
   1521c:	str	r2, [sp, #208]	; 0xd0
   15220:	str	r1, [sp, #204]	; 0xcc
   15224:	beq	15250 <next@@Base+0xfa8>
   15228:	ldr	r0, [sp, #208]	; 0xd0
   1522c:	ldr	r1, [r0]
   15230:	ldr	r2, [r0, #4]
   15234:	adds	r1, r1, #1
   15238:	adc	r2, r2, #0
   1523c:	str	r1, [r0]
   15240:	str	r2, [r0, #4]
   15244:	movw	r0, #1
   15248:	bl	11fcc <exit@plt>
   1524c:	muleq	r1, ip, r1
   15250:	ldr	r0, [sp, #204]	; 0xcc
   15254:	ldr	r1, [r0]
   15258:	ldr	r2, [r0, #4]
   1525c:	adds	r1, r1, #1
   15260:	adc	r2, r2, #0
   15264:	str	r1, [r0]
   15268:	str	r2, [r0, #4]
   1526c:	movw	r0, #3
   15270:	bl	11f90 <malloc@plt>
   15274:	str	r0, [sp, #524]	; 0x20c
   15278:	ldrb	r0, [sp, #528]	; 0x210
   1527c:	ldr	r1, [sp, #524]	; 0x20c
   15280:	strb	r0, [r1]
   15284:	ldrb	r0, [sp, #515]	; 0x203
   15288:	ldr	r1, [sp, #524]	; 0x20c
   1528c:	strb	r0, [r1, #1]
   15290:	ldr	r0, [sp, #524]	; 0x20c
   15294:	movw	r1, #0
   15298:	strb	r1, [r0, #2]
   1529c:	ldr	r0, [sp, #508]	; 0x1fc
   152a0:	ldr	r1, [sp, #524]	; 0x20c
   152a4:	bl	131d0 <init_token_boolean_op@@Base>
   152a8:	ldr	r0, [pc, #4076]	; 1629c <next@@Base+0x1ff4>
   152ac:	add	r0, pc, r0
   152b0:	add	r0, r0, #648	; 0x288
   152b4:	ldr	r1, [sp, #508]	; 0x1fc
   152b8:	str	r1, [fp, #-20]	; 0xffffffec
   152bc:	str	r0, [sp, #480]	; 0x1e0
   152c0:	b	16254 <next@@Base+0x1fac>
   152c4:	andeq	sp, r1, r8, lsl #3
   152c8:	andeq	sp, r1, ip, asr #1
   152cc:	ldr	r0, [sp, #212]	; 0xd4
   152d0:	ldr	r1, [pc, #4040]	; 162a0 <next@@Base+0x1ff8>
   152d4:	add	r1, pc, r1
   152d8:	add	r2, r1, #656	; 0x290
   152dc:	add	r1, r1, #664	; 0x298
   152e0:	ldr	r3, [r0]
   152e4:	ldr	ip, [r0, #4]
   152e8:	adds	r3, r3, #1
   152ec:	adc	ip, ip, #0
   152f0:	str	r3, [r0]
   152f4:	str	ip, [r0, #4]
   152f8:	ldrb	r0, [sp, #515]	; 0x203
   152fc:	cmp	r0, #38	; 0x26
   15300:	str	r2, [sp, #200]	; 0xc8
   15304:	str	r1, [sp, #196]	; 0xc4
   15308:	bne	15424 <next@@Base+0x117c>
   1530c:	ldr	r0, [sp, #200]	; 0xc8
   15310:	ldr	r1, [r0]
   15314:	ldr	r2, [r0, #4]
   15318:	adds	r1, r1, #1
   1531c:	adc	r2, r2, #0
   15320:	str	r1, [r0]
   15324:	str	r2, [r0, #4]
   15328:	ldrb	r0, [sp, #515]	; 0x203
   1532c:	ldr	r1, [sp, #520]	; 0x208
   15330:	add	r2, r1, #1
   15334:	str	r2, [sp, #520]	; 0x208
   15338:	add	r2, sp, #528	; 0x210
   1533c:	add	r1, r2, r1
   15340:	strb	r0, [r1]
   15344:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15348:	bl	14048 <get_char@@Base>
   1534c:	strb	r0, [sp, #515]	; 0x203
   15350:	movw	r0, #8
   15354:	bl	11f90 <malloc@plt>
   15358:	ldr	r1, [pc, #4012]	; 1630c <next@@Base+0x2064>
   1535c:	add	r1, pc, r1
   15360:	add	r2, r1, #672	; 0x2a0
   15364:	add	r1, r1, #680	; 0x2a8
   15368:	str	r0, [sp, #508]	; 0x1fc
   1536c:	ldrb	r0, [sp, #515]	; 0x203
   15370:	cmp	r0, #38	; 0x26
   15374:	str	r2, [sp, #192]	; 0xc0
   15378:	str	r1, [sp, #188]	; 0xbc
   1537c:	beq	153ac <next@@Base+0x1104>
   15380:	ldr	r0, [sp, #192]	; 0xc0
   15384:	ldr	r1, [r0]
   15388:	ldr	r2, [r0, #4]
   1538c:	adds	r1, r1, #1
   15390:	adc	r2, r2, #0
   15394:	str	r1, [r0]
   15398:	str	r2, [r0, #4]
   1539c:	movw	r0, #1
   153a0:	bl	11fcc <exit@plt>
   153a4:	andeq	sp, r1, ip, lsl #1
   153a8:	andeq	sp, r1, r4, ror r0
   153ac:	ldr	r0, [sp, #188]	; 0xbc
   153b0:	ldr	r1, [r0]
   153b4:	ldr	r2, [r0, #4]
   153b8:	adds	r1, r1, #1
   153bc:	adc	r2, r2, #0
   153c0:	str	r1, [r0]
   153c4:	str	r2, [r0, #4]
   153c8:	movw	r0, #3
   153cc:	bl	11f90 <malloc@plt>
   153d0:	str	r0, [sp, #524]	; 0x20c
   153d4:	ldrb	r0, [sp, #528]	; 0x210
   153d8:	ldr	r1, [sp, #524]	; 0x20c
   153dc:	strb	r0, [r1]
   153e0:	ldrb	r0, [sp, #515]	; 0x203
   153e4:	ldr	r1, [sp, #524]	; 0x20c
   153e8:	strb	r0, [r1, #1]
   153ec:	ldr	r0, [sp, #524]	; 0x20c
   153f0:	movw	r1, #0
   153f4:	strb	r1, [r0, #2]
   153f8:	ldr	r0, [sp, #508]	; 0x1fc
   153fc:	ldr	r1, [sp, #524]	; 0x20c
   15400:	bl	131d0 <init_token_boolean_op@@Base>
   15404:	ldr	r0, [pc, #3844]	; 16310 <next@@Base+0x2068>
   15408:	add	r0, pc, r0
   1540c:	add	r0, r0, #688	; 0x2b0
   15410:	ldr	r1, [sp, #508]	; 0x1fc
   15414:	str	r1, [fp, #-20]	; 0xffffffec
   15418:	str	r0, [sp, #480]	; 0x1e0
   1541c:	b	16254 <next@@Base+0x1fac>
   15420:	andeq	sp, r1, ip, lsl r0
   15424:	ldr	r0, [sp, #196]	; 0xc4
   15428:	ldr	r1, [pc, #3796]	; 16304 <next@@Base+0x205c>
   1542c:	add	r1, pc, r1
   15430:	ldr	r2, [pc, #3792]	; 16308 <next@@Base+0x2060>
   15434:	ldr	r2, [pc, r2]
   15438:	ldr	r3, [r0]
   1543c:	ldr	ip, [r0, #4]
   15440:	adds	r3, r3, #1
   15444:	adc	ip, ip, #0
   15448:	str	r3, [r0]
   1544c:	str	ip, [r0, #4]
   15450:	ldr	r0, [r2]
   15454:	ldrb	r2, [sp, #515]	; 0x203
   15458:	bl	11ffc <fprintf@plt>
   1545c:	movw	r1, #1
   15460:	str	r0, [sp, #184]	; 0xb8
   15464:	mov	r0, r1
   15468:	bl	11fcc <exit@plt>
   1546c:	andeq	ip, r1, r0, ror pc
   15470:	andeq	ip, r1, r0, lsr pc
   15474:	strdeq	ip, [r1], -r0
   15478:	muleq	r1, r0, lr
   1547c:	andeq	ip, r1, r4, ror lr
   15480:	andeq	ip, r1, r4, lsl #28
   15484:	andeq	ip, r1, r4, ror #27
   15488:	ldr	r0, [sp, #280]	; 0x118
   1548c:	ldr	r1, [pc, #3712]	; 16314 <next@@Base+0x206c>
   15490:	add	r1, pc, r1
   15494:	add	r1, r1, #696	; 0x2b8
   15498:	ldr	r2, [r0]
   1549c:	ldr	r3, [r0, #4]
   154a0:	adds	r2, r2, #1
   154a4:	adc	r3, r3, #0
   154a8:	str	r2, [r0]
   154ac:	str	r3, [r0, #4]
   154b0:	str	r1, [sp, #292]	; 0x124
   154b4:	ldr	r0, [sp, #292]	; 0x124
   154b8:	ldr	r1, [pc, #3672]	; 16318 <next@@Base+0x2070>
   154bc:	add	r1, pc, r1
   154c0:	add	r1, r1, #704	; 0x2c0
   154c4:	ldr	r2, [r0]
   154c8:	ldr	r3, [r0, #4]
   154cc:	adds	r2, r2, #1
   154d0:	adc	r3, r3, #0
   154d4:	str	r2, [r0]
   154d8:	str	r3, [r0, #4]
   154dc:	str	r1, [sp, #304]	; 0x130
   154e0:	ldr	r0, [sp, #304]	; 0x130
   154e4:	ldr	r1, [pc, #3632]	; 1631c <next@@Base+0x2074>
   154e8:	add	r1, pc, r1
   154ec:	add	r1, r1, #712	; 0x2c8
   154f0:	ldr	r2, [r0]
   154f4:	ldr	r3, [r0, #4]
   154f8:	adds	r2, r2, #1
   154fc:	adc	r3, r3, #0
   15500:	str	r2, [r0]
   15504:	str	r3, [r0, #4]
   15508:	str	r1, [sp, #316]	; 0x13c
   1550c:	ldr	r0, [sp, #316]	; 0x13c
   15510:	ldr	r1, [pc, #3592]	; 16320 <next@@Base+0x2078>
   15514:	add	r1, pc, r1
   15518:	add	r1, r1, #720	; 0x2d0
   1551c:	ldr	r2, [r0]
   15520:	ldr	r3, [r0, #4]
   15524:	adds	r2, r2, #1
   15528:	adc	r3, r3, #0
   1552c:	str	r2, [r0]
   15530:	str	r3, [r0, #4]
   15534:	str	r1, [sp, #180]	; 0xb4
   15538:	ldr	r0, [sp, #180]	; 0xb4
   1553c:	ldr	r1, [pc, #3552]	; 16324 <next@@Base+0x207c>
   15540:	add	r1, pc, r1
   15544:	add	r1, r1, #728	; 0x2d8
   15548:	ldr	r2, [r0]
   1554c:	ldr	r3, [r0, #4]
   15550:	adds	r2, r2, #1
   15554:	adc	r3, r3, #0
   15558:	str	r2, [r0]
   1555c:	str	r3, [r0, #4]
   15560:	str	r1, [sp, #176]	; 0xb0
   15564:	ldr	r0, [sp, #176]	; 0xb0
   15568:	ldr	r1, [pc, #3512]	; 16328 <next@@Base+0x2080>
   1556c:	add	r1, pc, r1
   15570:	add	r1, r1, #736	; 0x2e0
   15574:	ldr	r2, [r0]
   15578:	ldr	r3, [r0, #4]
   1557c:	adds	r2, r2, #1
   15580:	adc	r3, r3, #0
   15584:	str	r2, [r0]
   15588:	str	r3, [r0, #4]
   1558c:	str	r1, [sp, #172]	; 0xac
   15590:	ldr	r0, [sp, #172]	; 0xac
   15594:	ldr	r1, [pc, #3472]	; 1632c <next@@Base+0x2084>
   15598:	add	r1, pc, r1
   1559c:	add	r1, r1, #744	; 0x2e8
   155a0:	ldr	r2, [r0]
   155a4:	ldr	r3, [r0, #4]
   155a8:	adds	r2, r2, #1
   155ac:	adc	r3, r3, #0
   155b0:	str	r2, [r0]
   155b4:	str	r3, [r0, #4]
   155b8:	str	r1, [sp, #168]	; 0xa8
   155bc:	ldr	r0, [sp, #168]	; 0xa8
   155c0:	ldr	r1, [pc, #3432]	; 16330 <next@@Base+0x2088>
   155c4:	add	r1, pc, r1
   155c8:	add	r1, r1, #752	; 0x2f0
   155cc:	ldr	r2, [r0]
   155d0:	ldr	r3, [r0, #4]
   155d4:	adds	r2, r2, #1
   155d8:	adc	r3, r3, #0
   155dc:	str	r2, [r0]
   155e0:	str	r3, [r0, #4]
   155e4:	str	r1, [sp, #164]	; 0xa4
   155e8:	ldr	r0, [sp, #164]	; 0xa4
   155ec:	ldr	r1, [pc, #3392]	; 16334 <next@@Base+0x208c>
   155f0:	add	r1, pc, r1
   155f4:	add	r1, r1, #760	; 0x2f8
   155f8:	ldr	r2, [r0]
   155fc:	ldr	r3, [r0, #4]
   15600:	adds	r2, r2, #1
   15604:	adc	r3, r3, #0
   15608:	str	r2, [r0]
   1560c:	str	r3, [r0, #4]
   15610:	str	r1, [sp, #368]	; 0x170
   15614:	ldr	r0, [sp, #368]	; 0x170
   15618:	ldr	r1, [pc, #3352]	; 16338 <next@@Base+0x2090>
   1561c:	add	r1, pc, r1
   15620:	add	r1, r1, #768	; 0x300
   15624:	ldr	r2, [r0]
   15628:	ldr	r3, [r0, #4]
   1562c:	adds	r2, r2, #1
   15630:	adc	r3, r3, #0
   15634:	str	r2, [r0]
   15638:	str	r3, [r0, #4]
   1563c:	str	r1, [sp, #160]	; 0xa0
   15640:	ldr	r0, [sp, #160]	; 0xa0
   15644:	ldr	r1, [pc, #3312]	; 1633c <next@@Base+0x2094>
   15648:	add	r1, pc, r1
   1564c:	add	r1, r1, #776	; 0x308
   15650:	ldr	r2, [r0]
   15654:	ldr	r3, [r0, #4]
   15658:	adds	r2, r2, #1
   1565c:	adc	r3, r3, #0
   15660:	str	r2, [r0]
   15664:	str	r3, [r0, #4]
   15668:	str	r1, [sp, #392]	; 0x188
   1566c:	ldr	r0, [sp, #392]	; 0x188
   15670:	ldr	r1, [pc, #3272]	; 16340 <next@@Base+0x2098>
   15674:	add	r1, pc, r1
   15678:	add	r1, r1, #784	; 0x310
   1567c:	ldr	r2, [r0]
   15680:	ldr	r3, [r0, #4]
   15684:	adds	r2, r2, #1
   15688:	adc	r3, r3, #0
   1568c:	str	r2, [r0]
   15690:	str	r3, [r0, #4]
   15694:	str	r1, [sp, #436]	; 0x1b4
   15698:	b	161d8 <next@@Base+0x1f30>
   1569c:	andeq	ip, r1, r4, lsr #27
   156a0:	andeq	ip, r1, r8, lsr #26
   156a4:	andeq	ip, r1, r4, lsl #26
   156a8:	muleq	r1, r8, ip
   156ac:	andeq	ip, r1, r8, ror ip
   156b0:	ldr	r0, [sp, #428]	; 0x1ac
   156b4:	ldr	r1, [pc, #3120]	; 162ec <next@@Base+0x2044>
   156b8:	add	r1, pc, r1
   156bc:	add	r1, r1, #792	; 0x318
   156c0:	ldr	r2, [r0]
   156c4:	ldr	r3, [r0, #4]
   156c8:	adds	r2, r2, #1
   156cc:	adc	r3, r3, #0
   156d0:	str	r2, [r0]
   156d4:	str	r3, [r0, #4]
   156d8:	str	r1, [sp, #156]	; 0x9c
   156dc:	ldr	r0, [sp, #156]	; 0x9c
   156e0:	ldr	r1, [pc, #3080]	; 162f0 <next@@Base+0x2048>
   156e4:	add	r1, pc, r1
   156e8:	add	r2, r1, #800	; 0x320
   156ec:	add	r1, r1, #808	; 0x328
   156f0:	ldr	r3, [r0]
   156f4:	ldr	ip, [r0, #4]
   156f8:	adds	r3, r3, #1
   156fc:	adc	ip, ip, #0
   15700:	str	r3, [r0]
   15704:	str	ip, [r0, #4]
   15708:	ldrb	r0, [sp, #515]	; 0x203
   1570c:	cmp	r0, #48	; 0x30
   15710:	movw	r0, #0
   15714:	str	r2, [sp, #152]	; 0x98
   15718:	str	r1, [sp, #148]	; 0x94
   1571c:	str	r0, [sp, #144]	; 0x90
   15720:	blt	15764 <next@@Base+0x14bc>
   15724:	ldr	r0, [sp, #152]	; 0x98
   15728:	ldr	r1, [pc, #3012]	; 162f4 <next@@Base+0x204c>
   1572c:	add	r1, pc, r1
   15730:	add	r1, r1, #816	; 0x330
   15734:	ldr	r2, [r0]
   15738:	ldr	r3, [r0, #4]
   1573c:	adds	r2, r2, #1
   15740:	adc	r3, r3, #0
   15744:	str	r2, [r0]
   15748:	str	r3, [r0, #4]
   1574c:	ldrb	r0, [sp, #515]	; 0x203
   15750:	cmp	r0, #57	; 0x39
   15754:	movw	r0, #0
   15758:	movle	r0, #1
   1575c:	str	r1, [sp, #148]	; 0x94
   15760:	str	r0, [sp, #144]	; 0x90
   15764:	ldr	r0, [sp, #144]	; 0x90
   15768:	ldr	r1, [sp, #148]	; 0x94
   1576c:	ldr	r2, [pc, #2948]	; 162f8 <next@@Base+0x2050>
   15770:	add	r2, pc, r2
   15774:	add	r3, r2, #824	; 0x338
   15778:	add	r2, r2, #832	; 0x340
   1577c:	ldr	ip, [r1]
   15780:	ldr	lr, [r1, #4]
   15784:	adds	ip, ip, #1
   15788:	adc	lr, lr, #0
   1578c:	str	ip, [r1]
   15790:	str	lr, [r1, #4]
   15794:	tst	r0, #1
   15798:	str	r3, [sp, #140]	; 0x8c
   1579c:	str	r2, [sp, #136]	; 0x88
   157a0:	beq	15804 <next@@Base+0x155c>
   157a4:	ldr	r0, [sp, #140]	; 0x8c
   157a8:	ldr	r1, [r0]
   157ac:	ldr	r2, [r0, #4]
   157b0:	adds	r1, r1, #1
   157b4:	adc	r2, r2, #0
   157b8:	str	r1, [r0]
   157bc:	str	r2, [r0, #4]
   157c0:	ldrb	r0, [sp, #515]	; 0x203
   157c4:	ldr	r1, [sp, #520]	; 0x208
   157c8:	add	r2, r1, #1
   157cc:	str	r2, [sp, #520]	; 0x208
   157d0:	add	r2, sp, #528	; 0x210
   157d4:	add	r1, r2, r1
   157d8:	strb	r0, [r1]
   157dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157e0:	bl	14048 <get_char@@Base>
   157e4:	ldr	r1, [pc, #2836]	; 16300 <next@@Base+0x2058>
   157e8:	add	r1, pc, r1
   157ec:	add	r1, r1, #840	; 0x348
   157f0:	strb	r0, [sp, #515]	; 0x203
   157f4:	str	r1, [sp, #156]	; 0x9c
   157f8:	b	156dc <next@@Base+0x1434>
   157fc:	andeq	ip, r1, ip, lsl #24
   15800:	andeq	ip, r1, ip, ror #23
   15804:	ldr	r0, [sp, #136]	; 0x88
   15808:	ldr	r1, [r0]
   1580c:	ldr	r2, [r0, #4]
   15810:	adds	r1, r1, #1
   15814:	adc	r2, r2, #0
   15818:	str	r1, [r0]
   1581c:	str	r2, [r0, #4]
   15820:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15824:	bl	1422c <push_back_one_char@@Base>
   15828:	ldr	r0, [sp, #520]	; 0x208
   1582c:	add	r1, sp, #528	; 0x210
   15830:	add	r0, r1, r0
   15834:	movw	r1, #0
   15838:	strb	r1, [r0]
   1583c:	movw	r0, #8
   15840:	bl	11f90 <malloc@plt>
   15844:	add	r1, sp, #528	; 0x210
   15848:	str	r0, [sp, #508]	; 0x1fc
   1584c:	ldr	r0, [sp, #508]	; 0x1fc
   15850:	str	r0, [sp, #132]	; 0x84
   15854:	mov	r0, r1
   15858:	bl	120a4 <atoi@plt>
   1585c:	ldr	r1, [sp, #132]	; 0x84
   15860:	str	r0, [sp, #128]	; 0x80
   15864:	mov	r0, r1
   15868:	ldr	r1, [sp, #128]	; 0x80
   1586c:	bl	12ca4 <init_token_int_value@@Base>
   15870:	ldr	r0, [pc, #2692]	; 162fc <next@@Base+0x2054>
   15874:	add	r0, pc, r0
   15878:	add	r0, r0, #848	; 0x350
   1587c:	ldr	r1, [sp, #508]	; 0x1fc
   15880:	str	r1, [fp, #-20]	; 0xffffffec
   15884:	str	r0, [sp, #480]	; 0x1e0
   15888:	b	16254 <next@@Base+0x1fac>
   1588c:	andeq	ip, r1, r0, lsl #23
   15890:	ldr	r0, [sp, #424]	; 0x1a8
   15894:	ldr	r1, [r0]
   15898:	ldr	r2, [r0, #4]
   1589c:	adds	r1, r1, #1
   158a0:	adc	r2, r2, #0
   158a4:	str	r1, [r0]
   158a8:	str	r2, [r0, #4]
   158ac:	ldrb	r0, [sp, #515]	; 0x203
   158b0:	ldr	r1, [pc, #2704]	; 16348 <next@@Base+0x20a0>
   158b4:	add	r1, pc, r1
   158b8:	add	r2, r1, #872	; 0x368
   158bc:	add	r3, r1, #864	; 0x360
   158c0:	add	r1, r1, #856	; 0x358
   158c4:	mov	ip, r0
   158c8:	cmp	r0, #102	; 0x66
   158cc:	str	r3, [sp, #124]	; 0x7c
   158d0:	str	r1, [sp, #120]	; 0x78
   158d4:	str	ip, [sp, #116]	; 0x74
   158d8:	str	r2, [sp, #112]	; 0x70
   158dc:	beq	159f0 <next@@Base+0x1748>
   158e0:	b	158e8 <next@@Base+0x1640>
   158e4:	andeq	ip, r1, r0, ror #22
   158e8:	ldr	r0, [sp, #116]	; 0x74
   158ec:	cmp	r0, #110	; 0x6e
   158f0:	ldr	r1, [sp, #124]	; 0x7c
   158f4:	ldr	r2, [sp, #120]	; 0x78
   158f8:	str	r1, [sp, #108]	; 0x6c
   158fc:	str	r2, [sp, #104]	; 0x68
   15900:	bne	15a68 <next@@Base+0x17c0>
   15904:	b	15910 <next@@Base+0x1668>
   15908:	strdeq	ip, [r1], -r4
   1590c:	ldrdeq	ip, [r1], -r4
   15910:	ldr	r0, [sp, #108]	; 0x6c
   15914:	ldr	r1, [r0]
   15918:	ldr	r2, [r0, #4]
   1591c:	adds	r1, r1, #1
   15920:	adc	r2, r2, #0
   15924:	str	r1, [r0]
   15928:	str	r2, [r0, #4]
   1592c:	ldrb	r0, [sp, #515]	; 0x203
   15930:	ldr	r1, [sp, #520]	; 0x208
   15934:	add	r2, r1, #1
   15938:	str	r2, [sp, #520]	; 0x208
   1593c:	add	r2, sp, #528	; 0x210
   15940:	add	r1, r2, r1
   15944:	strb	r0, [r1]
   15948:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1594c:	bl	14048 <get_char@@Base>
   15950:	ldr	r1, [pc, #2444]	; 162e4 <next@@Base+0x203c>
   15954:	add	r1, pc, r1
   15958:	add	r2, r1, #880	; 0x370
   1595c:	add	r1, r1, #888	; 0x378
   15960:	strb	r0, [sp, #515]	; 0x203
   15964:	ldrb	r0, [sp, #515]	; 0x203
   15968:	cmp	r0, #116	; 0x74
   1596c:	str	r2, [sp, #100]	; 0x64
   15970:	str	r1, [sp, #96]	; 0x60
   15974:	beq	1599c <next@@Base+0x16f4>
   15978:	ldr	r0, [sp, #100]	; 0x64
   1597c:	ldr	r1, [r0]
   15980:	ldr	r2, [r0, #4]
   15984:	adds	r1, r1, #1
   15988:	adc	r2, r2, #0
   1598c:	str	r1, [r0]
   15990:	str	r2, [r0, #4]
   15994:	movw	r0, #1
   15998:	bl	11fcc <exit@plt>
   1599c:	ldr	r0, [sp, #96]	; 0x60
   159a0:	ldr	r1, [r0]
   159a4:	ldr	r2, [r0, #4]
   159a8:	adds	r1, r1, #1
   159ac:	adc	r2, r2, #0
   159b0:	str	r1, [r0]
   159b4:	str	r2, [r0, #4]
   159b8:	movw	r0, #4
   159bc:	bl	11f90 <malloc@plt>
   159c0:	str	r0, [sp, #508]	; 0x1fc
   159c4:	ldr	r0, [sp, #508]	; 0x1fc
   159c8:	bl	12c30 <init_token_int_type@@Base>
   159cc:	ldr	r0, [pc, #2324]	; 162e8 <next@@Base+0x2040>
   159d0:	add	r0, pc, r0
   159d4:	add	r0, r0, #896	; 0x380
   159d8:	ldr	r1, [sp, #508]	; 0x1fc
   159dc:	str	r1, [fp, #-20]	; 0xffffffec
   159e0:	str	r0, [sp, #480]	; 0x1e0
   159e4:	b	16254 <next@@Base+0x1fac>
   159e8:	andeq	ip, r1, r8, ror #20
   159ec:	andeq	ip, r1, r8, asr #20
   159f0:	ldr	r0, [sp, #112]	; 0x70
   159f4:	ldr	r1, [r0]
   159f8:	ldr	r2, [r0, #4]
   159fc:	adds	r1, r1, #1
   15a00:	adc	r2, r2, #0
   15a04:	str	r1, [r0]
   15a08:	str	r2, [r0, #4]
   15a0c:	ldrb	r0, [sp, #515]	; 0x203
   15a10:	ldr	r1, [sp, #520]	; 0x208
   15a14:	add	r2, r1, #1
   15a18:	str	r2, [sp, #520]	; 0x208
   15a1c:	add	r2, sp, #528	; 0x210
   15a20:	add	r1, r2, r1
   15a24:	strb	r0, [r1]
   15a28:	ldr	r0, [sp, #520]	; 0x208
   15a2c:	add	r0, r2, r0
   15a30:	movw	r1, #0
   15a34:	strb	r1, [r0]
   15a38:	movw	r0, #4
   15a3c:	bl	11f90 <malloc@plt>
   15a40:	str	r0, [sp, #508]	; 0x1fc
   15a44:	ldr	r0, [sp, #508]	; 0x1fc
   15a48:	bl	130e8 <init_token_if@@Base>
   15a4c:	ldr	r0, [pc, #2188]	; 162e0 <next@@Base+0x2038>
   15a50:	add	r0, pc, r0
   15a54:	add	r0, r0, #904	; 0x388
   15a58:	ldr	r1, [sp, #508]	; 0x1fc
   15a5c:	str	r1, [fp, #-20]	; 0xffffffec
   15a60:	str	r0, [sp, #480]	; 0x1e0
   15a64:	b	16254 <next@@Base+0x1fac>
   15a68:	ldr	r0, [sp, #104]	; 0x68
   15a6c:	ldr	r1, [r0]
   15a70:	ldr	r2, [r0, #4]
   15a74:	adds	r1, r1, #1
   15a78:	adc	r2, r2, #0
   15a7c:	str	r1, [r0]
   15a80:	str	r2, [r0, #4]
   15a84:	movw	r0, #1
   15a88:	bl	11fcc <exit@plt>
   15a8c:	andeq	ip, r1, ip, asr #19
   15a90:	andeq	ip, r1, r8, lsr #19
   15a94:	ldr	r0, [sp, #420]	; 0x1a4
   15a98:	ldr	r1, [pc, #2096]	; 162d0 <next@@Base+0x2028>
   15a9c:	add	r1, pc, r1
   15aa0:	add	r2, r1, #912	; 0x390
   15aa4:	add	r1, r1, #920	; 0x398
   15aa8:	ldr	r3, [r0]
   15aac:	ldr	ip, [r0, #4]
   15ab0:	adds	r3, r3, #1
   15ab4:	adc	ip, ip, #0
   15ab8:	str	r3, [r0]
   15abc:	str	ip, [r0, #4]
   15ac0:	ldrb	r0, [sp, #515]	; 0x203
   15ac4:	cmp	r0, #97	; 0x61
   15ac8:	str	r2, [sp, #92]	; 0x5c
   15acc:	str	r1, [sp, #88]	; 0x58
   15ad0:	beq	15b00 <next@@Base+0x1858>
   15ad4:	ldr	r0, [sp, #92]	; 0x5c
   15ad8:	ldr	r1, [r0]
   15adc:	ldr	r2, [r0, #4]
   15ae0:	adds	r1, r1, #1
   15ae4:	adc	r2, r2, #0
   15ae8:	str	r1, [r0]
   15aec:	str	r2, [r0, #4]
   15af0:	movw	r0, #1
   15af4:	bl	11fcc <exit@plt>
   15af8:	andeq	ip, r1, ip, lsr #18
   15afc:	andeq	ip, r1, r8, lsl #18
   15b00:	ldr	r0, [sp, #88]	; 0x58
   15b04:	ldr	r1, [r0]
   15b08:	ldr	r2, [r0, #4]
   15b0c:	adds	r1, r1, #1
   15b10:	adc	r2, r2, #0
   15b14:	str	r1, [r0]
   15b18:	str	r2, [r0, #4]
   15b1c:	ldrb	r0, [sp, #515]	; 0x203
   15b20:	ldr	r1, [sp, #520]	; 0x208
   15b24:	add	r2, r1, #1
   15b28:	str	r2, [sp, #520]	; 0x208
   15b2c:	add	r2, sp, #528	; 0x210
   15b30:	add	r1, r2, r1
   15b34:	strb	r0, [r1]
   15b38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b3c:	bl	14048 <get_char@@Base>
   15b40:	ldr	r1, [pc, #1932]	; 162d4 <next@@Base+0x202c>
   15b44:	add	r1, pc, r1
   15b48:	add	r2, r1, #928	; 0x3a0
   15b4c:	add	r1, r1, #936	; 0x3a8
   15b50:	strb	r0, [sp, #515]	; 0x203
   15b54:	ldrb	r0, [sp, #515]	; 0x203
   15b58:	cmp	r0, #105	; 0x69
   15b5c:	str	r2, [sp, #84]	; 0x54
   15b60:	str	r1, [sp, #80]	; 0x50
   15b64:	beq	15b94 <next@@Base+0x18ec>
   15b68:	ldr	r0, [sp, #84]	; 0x54
   15b6c:	ldr	r1, [r0]
   15b70:	ldr	r2, [r0, #4]
   15b74:	adds	r1, r1, #1
   15b78:	adc	r2, r2, #0
   15b7c:	str	r1, [r0]
   15b80:	str	r2, [r0, #4]
   15b84:	movw	r0, #1
   15b88:	bl	11fcc <exit@plt>
   15b8c:	andeq	ip, r1, ip, lsl #17
   15b90:	andeq	ip, r1, r8, ror #16
   15b94:	ldr	r0, [sp, #80]	; 0x50
   15b98:	ldr	r1, [r0]
   15b9c:	ldr	r2, [r0, #4]
   15ba0:	adds	r1, r1, #1
   15ba4:	adc	r2, r2, #0
   15ba8:	str	r1, [r0]
   15bac:	str	r2, [r0, #4]
   15bb0:	ldrb	r0, [sp, #515]	; 0x203
   15bb4:	ldr	r1, [sp, #520]	; 0x208
   15bb8:	add	r2, r1, #1
   15bbc:	str	r2, [sp, #520]	; 0x208
   15bc0:	add	r2, sp, #528	; 0x210
   15bc4:	add	r1, r2, r1
   15bc8:	strb	r0, [r1]
   15bcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15bd0:	bl	14048 <get_char@@Base>
   15bd4:	ldr	r1, [pc, #1788]	; 162d8 <next@@Base+0x2030>
   15bd8:	add	r1, pc, r1
   15bdc:	add	r2, r1, #944	; 0x3b0
   15be0:	add	r1, r1, #952	; 0x3b8
   15be4:	strb	r0, [sp, #515]	; 0x203
   15be8:	ldrb	r0, [sp, #515]	; 0x203
   15bec:	cmp	r0, #110	; 0x6e
   15bf0:	str	r2, [sp, #76]	; 0x4c
   15bf4:	str	r1, [sp, #72]	; 0x48
   15bf8:	beq	15c28 <next@@Base+0x1980>
   15bfc:	ldr	r0, [sp, #76]	; 0x4c
   15c00:	ldr	r1, [r0]
   15c04:	ldr	r2, [r0, #4]
   15c08:	adds	r1, r1, #1
   15c0c:	adc	r2, r2, #0
   15c10:	str	r1, [r0]
   15c14:	str	r2, [r0, #4]
   15c18:	movw	r0, #1
   15c1c:	bl	11fcc <exit@plt>
   15c20:	andeq	ip, r1, ip, ror #15
   15c24:	andeq	ip, r1, r8, asr #15
   15c28:	ldr	r0, [sp, #72]	; 0x48
   15c2c:	ldr	r1, [r0]
   15c30:	ldr	r2, [r0, #4]
   15c34:	adds	r1, r1, #1
   15c38:	adc	r2, r2, #0
   15c3c:	str	r1, [r0]
   15c40:	str	r2, [r0, #4]
   15c44:	ldrb	r0, [sp, #515]	; 0x203
   15c48:	ldr	r1, [sp, #520]	; 0x208
   15c4c:	add	r2, r1, #1
   15c50:	str	r2, [sp, #520]	; 0x208
   15c54:	add	r2, sp, #528	; 0x210
   15c58:	strb	r0, [r2, r1]
   15c5c:	ldr	r0, [sp, #520]	; 0x208
   15c60:	mov	r1, #0
   15c64:	strb	r1, [r2, r0]
   15c68:	ldr	r0, [sp, #520]	; 0x208
   15c6c:	mov	r1, r0
   15c70:	add	r0, r0, #1
   15c74:	str	r1, [sp, #68]	; 0x44
   15c78:	bl	11f90 <malloc@plt>
   15c7c:	add	r1, sp, #528	; 0x210
   15c80:	str	r0, [sp, #524]	; 0x20c
   15c84:	ldr	r0, [sp, #524]	; 0x20c
   15c88:	ldr	r2, [sp, #520]	; 0x208
   15c8c:	bl	12038 <strncpy@plt>
   15c90:	ldr	r1, [sp, #524]	; 0x20c
   15c94:	ldr	r2, [sp, #520]	; 0x208
   15c98:	add	r1, r1, r2
   15c9c:	movw	r2, #0
   15ca0:	strb	r2, [r1]
   15ca4:	movw	r1, #8
   15ca8:	str	r0, [sp, #64]	; 0x40
   15cac:	mov	r0, r1
   15cb0:	bl	11f90 <malloc@plt>
   15cb4:	str	r0, [sp, #508]	; 0x1fc
   15cb8:	ldr	r0, [sp, #508]	; 0x1fc
   15cbc:	ldr	r1, [sp, #524]	; 0x20c
   15cc0:	bl	12d30 <init_token_function@@Base>
   15cc4:	ldr	r0, [pc, #1552]	; 162dc <next@@Base+0x2034>
   15cc8:	add	r0, pc, r0
   15ccc:	add	r0, r0, #960	; 0x3c0
   15cd0:	ldr	r1, [sp, #508]	; 0x1fc
   15cd4:	str	r1, [fp, #-20]	; 0xffffffec
   15cd8:	str	r0, [sp, #480]	; 0x1e0
   15cdc:	b	16254 <next@@Base+0x1fac>
   15ce0:	andeq	ip, r1, r0, asr #14
   15ce4:	ldr	r0, [sp, #416]	; 0x1a0
   15ce8:	ldr	r1, [pc, #1480]	; 162b8 <next@@Base+0x2010>
   15cec:	add	r1, pc, r1
   15cf0:	add	r2, r1, #968	; 0x3c8
   15cf4:	add	r1, r1, #976	; 0x3d0
   15cf8:	ldr	r3, [r0]
   15cfc:	ldr	ip, [r0, #4]
   15d00:	adds	r3, r3, #1
   15d04:	adc	ip, ip, #0
   15d08:	str	r3, [r0]
   15d0c:	str	ip, [r0, #4]
   15d10:	ldrb	r0, [sp, #515]	; 0x203
   15d14:	cmp	r0, #101	; 0x65
   15d18:	str	r2, [sp, #60]	; 0x3c
   15d1c:	str	r1, [sp, #56]	; 0x38
   15d20:	beq	15d50 <next@@Base+0x1aa8>
   15d24:	ldr	r0, [sp, #60]	; 0x3c
   15d28:	ldr	r1, [r0]
   15d2c:	ldr	r2, [r0, #4]
   15d30:	adds	r1, r1, #1
   15d34:	adc	r2, r2, #0
   15d38:	str	r1, [r0]
   15d3c:	str	r2, [r0, #4]
   15d40:	movw	r0, #1
   15d44:	bl	11fcc <exit@plt>
   15d48:	andeq	ip, r1, ip, ror #13
   15d4c:	muleq	r1, r8, r6
   15d50:	ldr	r0, [sp, #56]	; 0x38
   15d54:	ldr	r1, [r0]
   15d58:	ldr	r2, [r0, #4]
   15d5c:	adds	r1, r1, #1
   15d60:	adc	r2, r2, #0
   15d64:	str	r1, [r0]
   15d68:	str	r2, [r0, #4]
   15d6c:	ldrb	r0, [sp, #515]	; 0x203
   15d70:	ldr	r1, [sp, #520]	; 0x208
   15d74:	add	r2, r1, #1
   15d78:	str	r2, [sp, #520]	; 0x208
   15d7c:	add	r2, sp, #528	; 0x210
   15d80:	add	r1, r2, r1
   15d84:	strb	r0, [r1]
   15d88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d8c:	bl	14048 <get_char@@Base>
   15d90:	ldr	r1, [pc, #1316]	; 162bc <next@@Base+0x2014>
   15d94:	add	r1, pc, r1
   15d98:	add	r2, r1, #984	; 0x3d8
   15d9c:	add	r1, r1, #992	; 0x3e0
   15da0:	strb	r0, [sp, #515]	; 0x203
   15da4:	ldrb	r0, [sp, #515]	; 0x203
   15da8:	cmp	r0, #116	; 0x74
   15dac:	str	r2, [sp, #52]	; 0x34
   15db0:	str	r1, [sp, #48]	; 0x30
   15db4:	beq	15de4 <next@@Base+0x1b3c>
   15db8:	ldr	r0, [sp, #52]	; 0x34
   15dbc:	ldr	r1, [r0]
   15dc0:	ldr	r2, [r0, #4]
   15dc4:	adds	r1, r1, #1
   15dc8:	adc	r2, r2, #0
   15dcc:	str	r1, [r0]
   15dd0:	str	r2, [r0, #4]
   15dd4:	movw	r0, #1
   15dd8:	bl	11fcc <exit@plt>
   15ddc:	andeq	ip, r1, r8, lsr r6
   15de0:	andeq	ip, r1, r8, lsl r6
   15de4:	ldr	r0, [sp, #48]	; 0x30
   15de8:	ldr	r1, [r0]
   15dec:	ldr	r2, [r0, #4]
   15df0:	adds	r1, r1, #1
   15df4:	adc	r2, r2, #0
   15df8:	str	r1, [r0]
   15dfc:	str	r2, [r0, #4]
   15e00:	ldrb	r0, [sp, #515]	; 0x203
   15e04:	ldr	r1, [sp, #520]	; 0x208
   15e08:	add	r2, r1, #1
   15e0c:	str	r2, [sp, #520]	; 0x208
   15e10:	add	r2, sp, #528	; 0x210
   15e14:	add	r1, r2, r1
   15e18:	strb	r0, [r1]
   15e1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e20:	bl	14048 <get_char@@Base>
   15e24:	ldr	r1, [pc, #1172]	; 162c0 <next@@Base+0x2018>
   15e28:	add	r1, pc, r1
   15e2c:	add	r2, r1, #1000	; 0x3e8
   15e30:	add	r1, r1, #1008	; 0x3f0
   15e34:	strb	r0, [sp, #515]	; 0x203
   15e38:	ldrb	r0, [sp, #515]	; 0x203
   15e3c:	cmp	r0, #117	; 0x75
   15e40:	str	r2, [sp, #44]	; 0x2c
   15e44:	str	r1, [sp, #40]	; 0x28
   15e48:	beq	15e74 <next@@Base+0x1bcc>
   15e4c:	ldr	r0, [sp, #44]	; 0x2c
   15e50:	ldr	r1, [r0]
   15e54:	ldr	r2, [r0, #4]
   15e58:	adds	r1, r1, #1
   15e5c:	adc	r2, r2, #0
   15e60:	str	r1, [r0]
   15e64:	str	r2, [r0, #4]
   15e68:	movw	r0, #1
   15e6c:	bl	11fcc <exit@plt>
   15e70:	ldrdeq	ip, [r1], -r8
   15e74:	ldr	r0, [sp, #40]	; 0x28
   15e78:	ldr	r1, [r0]
   15e7c:	ldr	r2, [r0, #4]
   15e80:	adds	r1, r1, #1
   15e84:	adc	r2, r2, #0
   15e88:	str	r1, [r0]
   15e8c:	str	r2, [r0, #4]
   15e90:	ldrb	r0, [sp, #515]	; 0x203
   15e94:	ldr	r1, [sp, #520]	; 0x208
   15e98:	add	r2, r1, #1
   15e9c:	str	r2, [sp, #520]	; 0x208
   15ea0:	add	r2, sp, #528	; 0x210
   15ea4:	add	r1, r2, r1
   15ea8:	strb	r0, [r1]
   15eac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15eb0:	bl	14048 <get_char@@Base>
   15eb4:	ldr	r1, [pc, #1032]	; 162c4 <next@@Base+0x201c>
   15eb8:	add	r1, pc, r1
   15ebc:	add	r2, r1, #1016	; 0x3f8
   15ec0:	add	r1, r1, #1024	; 0x400
   15ec4:	strb	r0, [sp, #515]	; 0x203
   15ec8:	ldrb	r0, [sp, #515]	; 0x203
   15ecc:	cmp	r0, #114	; 0x72
   15ed0:	str	r2, [sp, #36]	; 0x24
   15ed4:	str	r1, [sp, #32]
   15ed8:	beq	15f08 <next@@Base+0x1c60>
   15edc:	ldr	r0, [sp, #36]	; 0x24
   15ee0:	ldr	r1, [r0]
   15ee4:	ldr	r2, [r0, #4]
   15ee8:	adds	r1, r1, #1
   15eec:	adc	r2, r2, #0
   15ef0:	str	r1, [r0]
   15ef4:	str	r2, [r0, #4]
   15ef8:	movw	r0, #1
   15efc:	bl	11fcc <exit@plt>
   15f00:	andeq	ip, r1, r0, asr r5
   15f04:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   15f08:	ldr	r0, [sp, #32]
   15f0c:	ldr	r1, [r0]
   15f10:	ldr	r2, [r0, #4]
   15f14:	adds	r1, r1, #1
   15f18:	adc	r2, r2, #0
   15f1c:	str	r1, [r0]
   15f20:	str	r2, [r0, #4]
   15f24:	ldrb	r0, [sp, #515]	; 0x203
   15f28:	ldr	r1, [sp, #520]	; 0x208
   15f2c:	add	r2, r1, #1
   15f30:	str	r2, [sp, #520]	; 0x208
   15f34:	add	r2, sp, #528	; 0x210
   15f38:	add	r1, r2, r1
   15f3c:	strb	r0, [r1]
   15f40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f44:	bl	14048 <get_char@@Base>
   15f48:	ldr	r1, [pc, #888]	; 162c8 <next@@Base+0x2020>
   15f4c:	add	r1, pc, r1
   15f50:	movw	r2, #1032	; 0x408
   15f54:	add	r2, r1, r2
   15f58:	add	r1, r1, #1040	; 0x410
   15f5c:	strb	r0, [sp, #515]	; 0x203
   15f60:	ldrb	r0, [sp, #515]	; 0x203
   15f64:	cmp	r0, #110	; 0x6e
   15f68:	str	r2, [sp, #28]
   15f6c:	str	r1, [sp, #24]
   15f70:	beq	15f9c <next@@Base+0x1cf4>
   15f74:	ldr	r0, [sp, #28]
   15f78:	ldr	r1, [r0]
   15f7c:	ldr	r2, [r0, #4]
   15f80:	adds	r1, r1, #1
   15f84:	adc	r2, r2, #0
   15f88:	str	r1, [r0]
   15f8c:	str	r2, [r0, #4]
   15f90:	movw	r0, #1
   15f94:	bl	11fcc <exit@plt>
   15f98:	andeq	ip, r1, r8, lsr #9
   15f9c:	ldr	r0, [sp, #24]
   15fa0:	ldr	r1, [r0]
   15fa4:	ldr	r2, [r0, #4]
   15fa8:	adds	r1, r1, #1
   15fac:	adc	r2, r2, #0
   15fb0:	str	r1, [r0]
   15fb4:	str	r2, [r0, #4]
   15fb8:	movw	r0, #4
   15fbc:	bl	11f90 <malloc@plt>
   15fc0:	str	r0, [sp, #508]	; 0x1fc
   15fc4:	ldr	r0, [sp, #508]	; 0x1fc
   15fc8:	bl	12f8c <init_token_return@@Base>
   15fcc:	ldr	r0, [pc, #760]	; 162cc <next@@Base+0x2024>
   15fd0:	add	r0, pc, r0
   15fd4:	movw	r1, #1048	; 0x418
   15fd8:	add	r0, r0, r1
   15fdc:	ldr	r1, [sp, #508]	; 0x1fc
   15fe0:	str	r1, [fp, #-20]	; 0xffffffec
   15fe4:	str	r0, [sp, #480]	; 0x1e0
   15fe8:	b	16254 <next@@Base+0x1fac>
   15fec:	andeq	ip, r1, r8, asr #8
   15ff0:	andeq	ip, r1, r8, lsr #8
   15ff4:	ldr	r0, [sp, #412]	; 0x19c
   15ff8:	ldr	r1, [pc, #680]	; 162a8 <next@@Base+0x2000>
   15ffc:	add	r1, pc, r1
   16000:	add	r2, r1, #1056	; 0x420
   16004:	movw	r3, #1064	; 0x428
   16008:	add	r1, r1, r3
   1600c:	ldr	r3, [r0]
   16010:	ldr	ip, [r0, #4]
   16014:	adds	r3, r3, #1
   16018:	adc	ip, ip, #0
   1601c:	str	r3, [r0]
   16020:	str	ip, [r0, #4]
   16024:	ldrb	r0, [sp, #515]	; 0x203
   16028:	cmp	r0, #108	; 0x6c
   1602c:	str	r2, [sp, #20]
   16030:	str	r1, [sp, #16]
   16034:	beq	16060 <next@@Base+0x1db8>
   16038:	ldr	r0, [sp, #20]
   1603c:	ldr	r1, [r0]
   16040:	ldr	r2, [r0, #4]
   16044:	adds	r1, r1, #1
   16048:	adc	r2, r2, #0
   1604c:	str	r1, [r0]
   16050:	str	r2, [r0, #4]
   16054:	movw	r0, #1
   16058:	bl	11fcc <exit@plt>
   1605c:	andeq	ip, r1, r0, lsr #7
   16060:	ldr	r0, [sp, #16]
   16064:	ldr	r1, [r0]
   16068:	ldr	r2, [r0, #4]
   1606c:	adds	r1, r1, #1
   16070:	adc	r2, r2, #0
   16074:	str	r1, [r0]
   16078:	str	r2, [r0, #4]
   1607c:	ldrb	r0, [sp, #515]	; 0x203
   16080:	ldr	r1, [sp, #520]	; 0x208
   16084:	add	r2, r1, #1
   16088:	str	r2, [sp, #520]	; 0x208
   1608c:	add	r2, sp, #528	; 0x210
   16090:	add	r1, r2, r1
   16094:	strb	r0, [r1]
   16098:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1609c:	bl	14048 <get_char@@Base>
   160a0:	ldr	r1, [pc, #516]	; 162ac <next@@Base+0x2004>
   160a4:	add	r1, pc, r1
   160a8:	add	r2, r1, #1072	; 0x430
   160ac:	movw	r3, #1080	; 0x438
   160b0:	add	r1, r1, r3
   160b4:	strb	r0, [sp, #515]	; 0x203
   160b8:	ldrb	r0, [sp, #515]	; 0x203
   160bc:	cmp	r0, #115	; 0x73
   160c0:	str	r2, [sp, #12]
   160c4:	str	r1, [sp, #8]
   160c8:	beq	160f8 <next@@Base+0x1e50>
   160cc:	ldr	r0, [sp, #12]
   160d0:	ldr	r1, [r0]
   160d4:	ldr	r2, [r0, #4]
   160d8:	adds	r1, r1, #1
   160dc:	adc	r2, r2, #0
   160e0:	str	r1, [r0]
   160e4:	str	r2, [r0, #4]
   160e8:	movw	r0, #1
   160ec:	bl	11fcc <exit@plt>
   160f0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   160f4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   160f8:	ldr	r0, [sp, #8]
   160fc:	ldr	r1, [r0]
   16100:	ldr	r2, [r0, #4]
   16104:	adds	r1, r1, #1
   16108:	adc	r2, r2, #0
   1610c:	str	r1, [r0]
   16110:	str	r2, [r0, #4]
   16114:	ldrb	r0, [sp, #515]	; 0x203
   16118:	ldr	r1, [sp, #520]	; 0x208
   1611c:	add	r2, r1, #1
   16120:	str	r2, [sp, #520]	; 0x208
   16124:	add	r2, sp, #528	; 0x210
   16128:	add	r1, r2, r1
   1612c:	strb	r0, [r1]
   16130:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16134:	bl	14048 <get_char@@Base>
   16138:	ldr	r1, [pc, #368]	; 162b0 <next@@Base+0x2008>
   1613c:	add	r1, pc, r1
   16140:	add	r2, r1, #1088	; 0x440
   16144:	movw	r3, #1096	; 0x448
   16148:	add	r1, r1, r3
   1614c:	strb	r0, [sp, #515]	; 0x203
   16150:	ldrb	r0, [sp, #515]	; 0x203
   16154:	cmp	r0, #101	; 0x65
   16158:	str	r2, [sp, #4]
   1615c:	str	r1, [sp]
   16160:	beq	16188 <next@@Base+0x1ee0>
   16164:	ldr	r0, [sp, #4]
   16168:	ldr	r1, [r0]
   1616c:	ldr	r2, [r0, #4]
   16170:	adds	r1, r1, #1
   16174:	adc	r2, r2, #0
   16178:	str	r1, [r0]
   1617c:	str	r2, [r0, #4]
   16180:	movw	r0, #1
   16184:	bl	11fcc <exit@plt>
   16188:	ldr	r0, [sp]
   1618c:	ldr	r1, [r0]
   16190:	ldr	r2, [r0, #4]
   16194:	adds	r1, r1, #1
   16198:	adc	r2, r2, #0
   1619c:	str	r1, [r0]
   161a0:	str	r2, [r0, #4]
   161a4:	movw	r0, #4
   161a8:	bl	11f90 <malloc@plt>
   161ac:	str	r0, [sp, #508]	; 0x1fc
   161b0:	ldr	r0, [sp, #508]	; 0x1fc
   161b4:	bl	1315c <init_token_else@@Base>
   161b8:	ldr	r0, [pc, #244]	; 162b4 <next@@Base+0x200c>
   161bc:	add	r0, pc, r0
   161c0:	add	r0, r0, #1104	; 0x450
   161c4:	ldr	r1, [sp, #508]	; 0x1fc
   161c8:	str	r1, [fp, #-20]	; 0xffffffec
   161cc:	str	r0, [sp, #480]	; 0x1e0
   161d0:	b	16254 <next@@Base+0x1fac>
   161d4:	andeq	ip, r1, r4, asr r2
   161d8:	ldr	r0, [sp, #436]	; 0x1b4
   161dc:	ldr	r1, [pc, #352]	; 16344 <next@@Base+0x209c>
   161e0:	add	r1, pc, r1
   161e4:	movw	r2, #1112	; 0x458
   161e8:	add	r1, r1, r2
   161ec:	ldr	r2, [r0]
   161f0:	ldr	r3, [r0, #4]
   161f4:	adds	r2, r2, #1
   161f8:	adc	r3, r3, #0
   161fc:	str	r2, [r0]
   16200:	str	r3, [r0, #4]
   16204:	str	r1, [sp, #476]	; 0x1dc
   16208:	b	143dc <next@@Base+0x134>
   1620c:	ldr	r0, [sp, #468]	; 0x1d4
   16210:	ldr	r1, [r0]
   16214:	ldr	r2, [r0, #4]
   16218:	adds	r1, r1, #1
   1621c:	adc	r2, r2, #0
   16220:	str	r1, [r0]
   16224:	str	r2, [r0, #4]
   16228:	movw	r0, #4
   1622c:	bl	11f90 <malloc@plt>
   16230:	str	r0, [sp, #508]	; 0x1fc
   16234:	ldr	r0, [sp, #508]	; 0x1fc
   16238:	bl	13074 <init_token_eof@@Base>
   1623c:	ldr	r0, [pc, #96]	; 162a4 <next@@Base+0x1ffc>
   16240:	add	r0, pc, r0
   16244:	add	r0, r0, #1120	; 0x460
   16248:	ldr	r1, [sp, #508]	; 0x1fc
   1624c:	str	r1, [fp, #-20]	; 0xffffffec
   16250:	str	r0, [sp, #480]	; 0x1e0
   16254:	ldr	r0, [sp, #480]	; 0x1e0
   16258:	ldr	r1, [r0]
   1625c:	ldr	r2, [r0, #4]
   16260:	adds	r1, r1, #1
   16264:	adc	r2, r2, #0
   16268:	str	r1, [r0]
   1626c:	str	r2, [r0, #4]
   16270:	ldr	r0, [pc, #212]	; 1634c <next@@Base+0x20a4>
   16274:	add	r0, pc, r0
   16278:	ldr	r1, [r0, #1128]	; 0x468
   1627c:	ldr	r2, [r0, #1132]	; 0x46c
   16280:	adds	r1, r1, #1
   16284:	adc	r2, r2, #0
   16288:	str	r1, [r0, #1128]	; 0x468
   1628c:	str	r2, [r0, #1132]	; 0x46c
   16290:	ldr	r0, [fp, #-20]	; 0xffffffec
   16294:	sub	sp, fp, #16
   16298:	pop	{r4, r5, r6, sl, fp, pc}
   1629c:	andeq	ip, r1, ip, lsr #3
   162a0:	andeq	ip, r1, r4, lsl #3
   162a4:	andeq	fp, r1, r8, lsl r2
   162a8:	andeq	fp, r1, ip, asr r4
   162ac:			; <UNDEFINED> instruction: 0x0001b3b4
   162b0:	andeq	fp, r1, ip, lsl r3
   162b4:	muleq	r1, ip, r2
   162b8:	andeq	fp, r1, ip, ror #14
   162bc:	andeq	fp, r1, r4, asr #13
   162c0:	andeq	fp, r1, r0, lsr r6
   162c4:	andeq	fp, r1, r0, lsr #11
   162c8:	andeq	fp, r1, ip, lsl #10
   162cc:	andeq	fp, r1, r8, lsl #9
   162d0:			; <UNDEFINED> instruction: 0x0001b9bc
   162d4:	andeq	fp, r1, r4, lsl r9
   162d8:	andeq	fp, r1, r0, lsl #17
   162dc:	muleq	r1, r0, r7
   162e0:	andeq	fp, r1, r8, lsl #20
   162e4:	andeq	fp, r1, r4, lsl #22
   162e8:	andeq	fp, r1, r8, lsl #21
   162ec:	andeq	fp, r1, r0, lsr #27
   162f0:	andeq	fp, r1, r4, ror sp
   162f4:	andeq	fp, r1, ip, lsr #26
   162f8:	andeq	fp, r1, r8, ror #25
   162fc:	andeq	fp, r1, r4, ror #23
   16300:	andeq	fp, r1, r0, ror ip
   16304:	strdeq	r9, [r0], -sp
   16308:	andeq	fp, r1, r8, lsl #25
   1630c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   16310:	andeq	ip, r1, r0, asr r0
   16314:	andeq	fp, r1, r8, asr #31
   16318:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1631c:	andeq	fp, r1, r0, ror pc
   16320:	andeq	fp, r1, r4, asr #30
   16324:	andeq	fp, r1, r8, lsl pc
   16328:	andeq	fp, r1, ip, ror #29
   1632c:	andeq	fp, r1, r0, asr #29
   16330:	muleq	r1, r4, lr
   16334:	andeq	fp, r1, r8, ror #28
   16338:	andeq	fp, r1, ip, lsr lr
   1633c:	andeq	fp, r1, r0, lsl lr
   16340:	andeq	fp, r1, r4, ror #27
   16344:	andeq	fp, r1, r8, ror r2
   16348:	andeq	fp, r1, r4, lsr #23
   1634c:	andeq	fp, r1, r4, ror #3
   16350:	push	{r4, sl, fp, lr}
   16354:	add	fp, sp, #8
   16358:	sub	sp, sp, #40	; 0x28
   1635c:	movw	r0, #0
   16360:	str	r0, [fp, #-12]
   16364:	b	16368 <next@@Base+0x20c0>
   16368:	ldr	r0, [fp, #-12]
   1636c:	ldr	r1, [pc, #244]	; 16468 <next@@Base+0x21c0>
   16370:	add	r1, pc, r1
   16374:	movw	r2, #24
   16378:	mul	r2, r0, r2
   1637c:	add	r1, r1, r2
   16380:	ldr	r2, [r1]
   16384:	ldr	r3, [r1, #4]
   16388:	ldr	ip, [r1, #8]
   1638c:	str	r0, [fp, #-16]
   16390:	mov	r0, r2
   16394:	str	r1, [fp, #-20]	; 0xffffffec
   16398:	mov	r1, r3
   1639c:	mov	r2, ip
   163a0:	bl	1ba6c <__generate_code_for_binary_boolean_expression@@Base+0x994>
   163a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   163a8:	ldr	r1, [r0, #12]
   163ac:	ldr	r2, [r0, #16]
   163b0:	ldr	r3, [r0, #20]
   163b4:	movw	ip, #0
   163b8:	cmp	ip, r1
   163bc:	str	r1, [sp, #24]
   163c0:	str	r2, [sp, #20]
   163c4:	str	r3, [sp, #16]
   163c8:	str	ip, [sp, #12]
   163cc:	bge	16444 <next@@Base+0x219c>
   163d0:	ldr	r0, [sp, #12]
   163d4:	add	r1, r0, r0, lsl #2
   163d8:	ldr	r2, [sp, #20]
   163dc:	ldr	r1, [r2, r1, lsl #2]!
   163e0:	ldr	r3, [r2, #4]
   163e4:	ldr	ip, [r2, #8]
   163e8:	ldr	lr, [r2, #16]
   163ec:	ldrb	r2, [r2, #12]
   163f0:	mov	r4, sp
   163f4:	str	lr, [r4]
   163f8:	str	r0, [sp, #8]
   163fc:	mov	r0, r1
   16400:	mov	r1, r3
   16404:	str	r2, [sp, #4]
   16408:	mov	r2, ip
   1640c:	ldr	r3, [sp, #4]
   16410:	bl	1c18c <__generate_code_for_binary_boolean_expression@@Base+0x10b4>
   16414:	ldr	r0, [sp, #16]
   16418:	ldr	r1, [sp, #8]
   1641c:	add	r2, r0, r1, lsl #3
   16420:	ldr	r0, [r2]
   16424:	ldr	r1, [r2, #4]
   16428:	bl	1ca40 <__generate_code_for_binary_boolean_expression@@Base+0x1968>
   1642c:	ldr	r0, [sp, #8]
   16430:	add	r1, r0, #1
   16434:	ldr	r2, [sp, #24]
   16438:	cmp	r1, r2
   1643c:	str	r1, [sp, #12]
   16440:	blt	163d0 <next@@Base+0x2128>
   16444:	bl	1d1c8 <__generate_code_for_binary_boolean_expression@@Base+0x20f0>
   16448:	bl	1df34 <__generate_code_for_binary_boolean_expression@@Base+0x2e5c>
   1644c:	ldr	r0, [fp, #-16]
   16450:	add	r1, r0, #1
   16454:	cmp	r1, #1
   16458:	str	r1, [fp, #-12]
   1645c:	blt	16368 <next@@Base+0x20c0>
   16460:	sub	sp, fp, #8
   16464:	pop	{r4, sl, fp, pc}
   16468:	muleq	r1, r8, r6
   1646c:	push	{fp, lr}
   16470:	mov	fp, sp
   16474:	bl	16350 <next@@Base+0x20a8>
   16478:	ldr	r0, [pc, #1360]	; 169d0 <next@@Base+0x2728>
   1647c:	add	r0, pc, r0
   16480:	mov	r1, #0
   16484:	str	r1, [r0, #12]
   16488:	str	r1, [r0, #8]
   1648c:	str	r1, [r0, #4]
   16490:	str	r1, [r0]
   16494:	ldr	r0, [pc, #1336]	; 169d4 <next@@Base+0x272c>
   16498:	add	r0, pc, r0
   1649c:	str	r1, [r0, #36]	; 0x24
   164a0:	str	r1, [r0, #32]
   164a4:	str	r1, [r0, #28]
   164a8:	str	r1, [r0, #24]
   164ac:	str	r1, [r0, #20]
   164b0:	str	r1, [r0, #16]
   164b4:	str	r1, [r0, #12]
   164b8:	str	r1, [r0, #8]
   164bc:	str	r1, [r0, #4]
   164c0:	str	r1, [r0]
   164c4:	ldr	r0, [pc, #1292]	; 169d8 <next@@Base+0x2730>
   164c8:	add	r0, pc, r0
   164cc:	str	r1, [r0, #12]
   164d0:	str	r1, [r0, #8]
   164d4:	str	r1, [r0, #4]
   164d8:	str	r1, [r0]
   164dc:	ldr	r0, [pc, #1272]	; 169dc <next@@Base+0x2734>
   164e0:	add	r0, pc, r0
   164e4:	str	r1, [r0, #12]
   164e8:	str	r1, [r0, #8]
   164ec:	str	r1, [r0, #4]
   164f0:	str	r1, [r0]
   164f4:	ldr	r0, [pc, #1252]	; 169e0 <next@@Base+0x2738>
   164f8:	add	r0, pc, r0
   164fc:	str	r1, [r0, #12]
   16500:	str	r1, [r0, #8]
   16504:	str	r1, [r0, #4]
   16508:	str	r1, [r0]
   1650c:	ldr	r0, [pc, #1232]	; 169e4 <next@@Base+0x273c>
   16510:	add	r0, pc, r0
   16514:	str	r1, [r0, #36]	; 0x24
   16518:	str	r1, [r0, #32]
   1651c:	str	r1, [r0, #28]
   16520:	str	r1, [r0, #24]
   16524:	str	r1, [r0, #20]
   16528:	str	r1, [r0, #16]
   1652c:	str	r1, [r0, #12]
   16530:	str	r1, [r0, #8]
   16534:	str	r1, [r0, #4]
   16538:	str	r1, [r0]
   1653c:	ldr	r0, [pc, #1188]	; 169e8 <next@@Base+0x2740>
   16540:	add	r0, pc, r0
   16544:	str	r1, [r0, #12]
   16548:	str	r1, [r0, #8]
   1654c:	str	r1, [r0, #4]
   16550:	str	r1, [r0]
   16554:	ldr	r0, [pc, #1168]	; 169ec <next@@Base+0x2744>
   16558:	add	r0, pc, r0
   1655c:	str	r1, [r0, #508]	; 0x1fc
   16560:	str	r1, [r0, #504]	; 0x1f8
   16564:	str	r1, [r0, #500]	; 0x1f4
   16568:	str	r1, [r0, #496]	; 0x1f0
   1656c:	str	r1, [r0, #492]	; 0x1ec
   16570:	str	r1, [r0, #488]	; 0x1e8
   16574:	str	r1, [r0, #484]	; 0x1e4
   16578:	str	r1, [r0, #480]	; 0x1e0
   1657c:	str	r1, [r0, #476]	; 0x1dc
   16580:	str	r1, [r0, #472]	; 0x1d8
   16584:	str	r1, [r0, #468]	; 0x1d4
   16588:	str	r1, [r0, #464]	; 0x1d0
   1658c:	str	r1, [r0, #460]	; 0x1cc
   16590:	str	r1, [r0, #456]	; 0x1c8
   16594:	str	r1, [r0, #452]	; 0x1c4
   16598:	str	r1, [r0, #448]	; 0x1c0
   1659c:	str	r1, [r0, #444]	; 0x1bc
   165a0:	str	r1, [r0, #440]	; 0x1b8
   165a4:	str	r1, [r0, #436]	; 0x1b4
   165a8:	str	r1, [r0, #432]	; 0x1b0
   165ac:	str	r1, [r0, #428]	; 0x1ac
   165b0:	str	r1, [r0, #424]	; 0x1a8
   165b4:	str	r1, [r0, #420]	; 0x1a4
   165b8:	str	r1, [r0, #416]	; 0x1a0
   165bc:	str	r1, [r0, #412]	; 0x19c
   165c0:	str	r1, [r0, #408]	; 0x198
   165c4:	str	r1, [r0, #404]	; 0x194
   165c8:	str	r1, [r0, #400]	; 0x190
   165cc:	str	r1, [r0, #396]	; 0x18c
   165d0:	str	r1, [r0, #392]	; 0x188
   165d4:	str	r1, [r0, #388]	; 0x184
   165d8:	str	r1, [r0, #384]	; 0x180
   165dc:	str	r1, [r0, #380]	; 0x17c
   165e0:	str	r1, [r0, #376]	; 0x178
   165e4:	str	r1, [r0, #372]	; 0x174
   165e8:	str	r1, [r0, #368]	; 0x170
   165ec:	str	r1, [r0, #364]	; 0x16c
   165f0:	str	r1, [r0, #360]	; 0x168
   165f4:	str	r1, [r0, #356]	; 0x164
   165f8:	str	r1, [r0, #352]	; 0x160
   165fc:	str	r1, [r0, #348]	; 0x15c
   16600:	str	r1, [r0, #344]	; 0x158
   16604:	str	r1, [r0, #340]	; 0x154
   16608:	str	r1, [r0, #336]	; 0x150
   1660c:	str	r1, [r0, #332]	; 0x14c
   16610:	str	r1, [r0, #328]	; 0x148
   16614:	str	r1, [r0, #324]	; 0x144
   16618:	str	r1, [r0, #320]	; 0x140
   1661c:	str	r1, [r0, #316]	; 0x13c
   16620:	str	r1, [r0, #312]	; 0x138
   16624:	str	r1, [r0, #308]	; 0x134
   16628:	str	r1, [r0, #304]	; 0x130
   1662c:	str	r1, [r0, #300]	; 0x12c
   16630:	str	r1, [r0, #296]	; 0x128
   16634:	str	r1, [r0, #292]	; 0x124
   16638:	str	r1, [r0, #288]	; 0x120
   1663c:	str	r1, [r0, #284]	; 0x11c
   16640:	str	r1, [r0, #280]	; 0x118
   16644:	str	r1, [r0, #276]	; 0x114
   16648:	str	r1, [r0, #272]	; 0x110
   1664c:	str	r1, [r0, #268]	; 0x10c
   16650:	str	r1, [r0, #264]	; 0x108
   16654:	str	r1, [r0, #260]	; 0x104
   16658:	str	r1, [r0, #256]	; 0x100
   1665c:	str	r1, [r0, #252]	; 0xfc
   16660:	str	r1, [r0, #248]	; 0xf8
   16664:	str	r1, [r0, #244]	; 0xf4
   16668:	str	r1, [r0, #240]	; 0xf0
   1666c:	str	r1, [r0, #236]	; 0xec
   16670:	str	r1, [r0, #232]	; 0xe8
   16674:	str	r1, [r0, #228]	; 0xe4
   16678:	str	r1, [r0, #224]	; 0xe0
   1667c:	str	r1, [r0, #220]	; 0xdc
   16680:	str	r1, [r0, #216]	; 0xd8
   16684:	str	r1, [r0, #212]	; 0xd4
   16688:	str	r1, [r0, #208]	; 0xd0
   1668c:	str	r1, [r0, #204]	; 0xcc
   16690:	str	r1, [r0, #200]	; 0xc8
   16694:	str	r1, [r0, #196]	; 0xc4
   16698:	str	r1, [r0, #192]	; 0xc0
   1669c:	str	r1, [r0, #188]	; 0xbc
   166a0:	str	r1, [r0, #184]	; 0xb8
   166a4:	str	r1, [r0, #180]	; 0xb4
   166a8:	str	r1, [r0, #176]	; 0xb0
   166ac:	str	r1, [r0, #172]	; 0xac
   166b0:	str	r1, [r0, #168]	; 0xa8
   166b4:	str	r1, [r0, #164]	; 0xa4
   166b8:	str	r1, [r0, #160]	; 0xa0
   166bc:	str	r1, [r0, #156]	; 0x9c
   166c0:	str	r1, [r0, #152]	; 0x98
   166c4:	str	r1, [r0, #148]	; 0x94
   166c8:	str	r1, [r0, #144]	; 0x90
   166cc:	str	r1, [r0, #140]	; 0x8c
   166d0:	str	r1, [r0, #136]	; 0x88
   166d4:	str	r1, [r0, #132]	; 0x84
   166d8:	str	r1, [r0, #128]	; 0x80
   166dc:	str	r1, [r0, #124]	; 0x7c
   166e0:	str	r1, [r0, #120]	; 0x78
   166e4:	str	r1, [r0, #116]	; 0x74
   166e8:	str	r1, [r0, #112]	; 0x70
   166ec:	str	r1, [r0, #108]	; 0x6c
   166f0:	str	r1, [r0, #104]	; 0x68
   166f4:	str	r1, [r0, #100]	; 0x64
   166f8:	str	r1, [r0, #96]	; 0x60
   166fc:	str	r1, [r0, #92]	; 0x5c
   16700:	str	r1, [r0, #88]	; 0x58
   16704:	str	r1, [r0, #84]	; 0x54
   16708:	str	r1, [r0, #80]	; 0x50
   1670c:	str	r1, [r0, #76]	; 0x4c
   16710:	str	r1, [r0, #72]	; 0x48
   16714:	str	r1, [r0, #68]	; 0x44
   16718:	str	r1, [r0, #64]	; 0x40
   1671c:	str	r1, [r0, #60]	; 0x3c
   16720:	str	r1, [r0, #56]	; 0x38
   16724:	str	r1, [r0, #52]	; 0x34
   16728:	str	r1, [r0, #48]	; 0x30
   1672c:	str	r1, [r0, #44]	; 0x2c
   16730:	str	r1, [r0, #40]	; 0x28
   16734:	str	r1, [r0, #36]	; 0x24
   16738:	str	r1, [r0, #32]
   1673c:	str	r1, [r0, #28]
   16740:	str	r1, [r0, #24]
   16744:	str	r1, [r0, #20]
   16748:	str	r1, [r0, #16]
   1674c:	str	r1, [r0, #12]
   16750:	str	r1, [r0, #8]
   16754:	str	r1, [r0, #4]
   16758:	str	r1, [r0]
   1675c:	str	r1, [r0, #1020]	; 0x3fc
   16760:	str	r1, [r0, #1016]	; 0x3f8
   16764:	str	r1, [r0, #1012]	; 0x3f4
   16768:	str	r1, [r0, #1008]	; 0x3f0
   1676c:	str	r1, [r0, #1004]	; 0x3ec
   16770:	str	r1, [r0, #1000]	; 0x3e8
   16774:	str	r1, [r0, #996]	; 0x3e4
   16778:	str	r1, [r0, #992]	; 0x3e0
   1677c:	str	r1, [r0, #988]	; 0x3dc
   16780:	str	r1, [r0, #984]	; 0x3d8
   16784:	str	r1, [r0, #980]	; 0x3d4
   16788:	str	r1, [r0, #976]	; 0x3d0
   1678c:	str	r1, [r0, #972]	; 0x3cc
   16790:	str	r1, [r0, #968]	; 0x3c8
   16794:	str	r1, [r0, #964]	; 0x3c4
   16798:	str	r1, [r0, #960]	; 0x3c0
   1679c:	str	r1, [r0, #956]	; 0x3bc
   167a0:	str	r1, [r0, #952]	; 0x3b8
   167a4:	str	r1, [r0, #948]	; 0x3b4
   167a8:	str	r1, [r0, #944]	; 0x3b0
   167ac:	str	r1, [r0, #940]	; 0x3ac
   167b0:	str	r1, [r0, #936]	; 0x3a8
   167b4:	str	r1, [r0, #932]	; 0x3a4
   167b8:	str	r1, [r0, #928]	; 0x3a0
   167bc:	str	r1, [r0, #924]	; 0x39c
   167c0:	str	r1, [r0, #920]	; 0x398
   167c4:	str	r1, [r0, #916]	; 0x394
   167c8:	str	r1, [r0, #912]	; 0x390
   167cc:	str	r1, [r0, #908]	; 0x38c
   167d0:	str	r1, [r0, #904]	; 0x388
   167d4:	str	r1, [r0, #900]	; 0x384
   167d8:	str	r1, [r0, #896]	; 0x380
   167dc:	str	r1, [r0, #892]	; 0x37c
   167e0:	str	r1, [r0, #888]	; 0x378
   167e4:	str	r1, [r0, #884]	; 0x374
   167e8:	str	r1, [r0, #880]	; 0x370
   167ec:	str	r1, [r0, #876]	; 0x36c
   167f0:	str	r1, [r0, #872]	; 0x368
   167f4:	str	r1, [r0, #868]	; 0x364
   167f8:	str	r1, [r0, #864]	; 0x360
   167fc:	str	r1, [r0, #860]	; 0x35c
   16800:	str	r1, [r0, #856]	; 0x358
   16804:	str	r1, [r0, #852]	; 0x354
   16808:	str	r1, [r0, #848]	; 0x350
   1680c:	str	r1, [r0, #844]	; 0x34c
   16810:	str	r1, [r0, #840]	; 0x348
   16814:	str	r1, [r0, #836]	; 0x344
   16818:	str	r1, [r0, #832]	; 0x340
   1681c:	str	r1, [r0, #828]	; 0x33c
   16820:	str	r1, [r0, #824]	; 0x338
   16824:	str	r1, [r0, #820]	; 0x334
   16828:	str	r1, [r0, #816]	; 0x330
   1682c:	str	r1, [r0, #812]	; 0x32c
   16830:	str	r1, [r0, #808]	; 0x328
   16834:	str	r1, [r0, #804]	; 0x324
   16838:	str	r1, [r0, #800]	; 0x320
   1683c:	str	r1, [r0, #796]	; 0x31c
   16840:	str	r1, [r0, #792]	; 0x318
   16844:	str	r1, [r0, #788]	; 0x314
   16848:	str	r1, [r0, #784]	; 0x310
   1684c:	str	r1, [r0, #780]	; 0x30c
   16850:	str	r1, [r0, #776]	; 0x308
   16854:	str	r1, [r0, #772]	; 0x304
   16858:	str	r1, [r0, #768]	; 0x300
   1685c:	str	r1, [r0, #764]	; 0x2fc
   16860:	str	r1, [r0, #760]	; 0x2f8
   16864:	str	r1, [r0, #756]	; 0x2f4
   16868:	str	r1, [r0, #752]	; 0x2f0
   1686c:	str	r1, [r0, #748]	; 0x2ec
   16870:	str	r1, [r0, #744]	; 0x2e8
   16874:	str	r1, [r0, #740]	; 0x2e4
   16878:	str	r1, [r0, #736]	; 0x2e0
   1687c:	str	r1, [r0, #732]	; 0x2dc
   16880:	str	r1, [r0, #728]	; 0x2d8
   16884:	str	r1, [r0, #724]	; 0x2d4
   16888:	str	r1, [r0, #720]	; 0x2d0
   1688c:	str	r1, [r0, #716]	; 0x2cc
   16890:	str	r1, [r0, #712]	; 0x2c8
   16894:	str	r1, [r0, #708]	; 0x2c4
   16898:	str	r1, [r0, #704]	; 0x2c0
   1689c:	str	r1, [r0, #700]	; 0x2bc
   168a0:	str	r1, [r0, #696]	; 0x2b8
   168a4:	str	r1, [r0, #692]	; 0x2b4
   168a8:	str	r1, [r0, #688]	; 0x2b0
   168ac:	str	r1, [r0, #684]	; 0x2ac
   168b0:	str	r1, [r0, #680]	; 0x2a8
   168b4:	str	r1, [r0, #676]	; 0x2a4
   168b8:	str	r1, [r0, #672]	; 0x2a0
   168bc:	str	r1, [r0, #668]	; 0x29c
   168c0:	str	r1, [r0, #664]	; 0x298
   168c4:	str	r1, [r0, #660]	; 0x294
   168c8:	str	r1, [r0, #656]	; 0x290
   168cc:	str	r1, [r0, #652]	; 0x28c
   168d0:	str	r1, [r0, #648]	; 0x288
   168d4:	str	r1, [r0, #644]	; 0x284
   168d8:	str	r1, [r0, #640]	; 0x280
   168dc:	str	r1, [r0, #636]	; 0x27c
   168e0:	str	r1, [r0, #632]	; 0x278
   168e4:	str	r1, [r0, #628]	; 0x274
   168e8:	str	r1, [r0, #624]	; 0x270
   168ec:	str	r1, [r0, #620]	; 0x26c
   168f0:	str	r1, [r0, #616]	; 0x268
   168f4:	str	r1, [r0, #612]	; 0x264
   168f8:	str	r1, [r0, #608]	; 0x260
   168fc:	str	r1, [r0, #604]	; 0x25c
   16900:	str	r1, [r0, #600]	; 0x258
   16904:	str	r1, [r0, #596]	; 0x254
   16908:	str	r1, [r0, #592]	; 0x250
   1690c:	str	r1, [r0, #588]	; 0x24c
   16910:	str	r1, [r0, #584]	; 0x248
   16914:	str	r1, [r0, #580]	; 0x244
   16918:	str	r1, [r0, #576]	; 0x240
   1691c:	str	r1, [r0, #572]	; 0x23c
   16920:	str	r1, [r0, #568]	; 0x238
   16924:	str	r1, [r0, #564]	; 0x234
   16928:	str	r1, [r0, #560]	; 0x230
   1692c:	str	r1, [r0, #556]	; 0x22c
   16930:	str	r1, [r0, #552]	; 0x228
   16934:	str	r1, [r0, #548]	; 0x224
   16938:	str	r1, [r0, #544]	; 0x220
   1693c:	str	r1, [r0, #540]	; 0x21c
   16940:	str	r1, [r0, #536]	; 0x218
   16944:	str	r1, [r0, #532]	; 0x214
   16948:	str	r1, [r0, #528]	; 0x210
   1694c:	str	r1, [r0, #524]	; 0x20c
   16950:	str	r1, [r0, #520]	; 0x208
   16954:	str	r1, [r0, #516]	; 0x204
   16958:	str	r1, [r0, #512]	; 0x200
   1695c:	str	r1, [r0, #1132]	; 0x46c
   16960:	str	r1, [r0, #1128]	; 0x468
   16964:	str	r1, [r0, #1124]	; 0x464
   16968:	str	r1, [r0, #1120]	; 0x460
   1696c:	str	r1, [r0, #1116]	; 0x45c
   16970:	str	r1, [r0, #1112]	; 0x458
   16974:	str	r1, [r0, #1108]	; 0x454
   16978:	str	r1, [r0, #1104]	; 0x450
   1697c:	str	r1, [r0, #1100]	; 0x44c
   16980:	str	r1, [r0, #1096]	; 0x448
   16984:	str	r1, [r0, #1092]	; 0x444
   16988:	str	r1, [r0, #1088]	; 0x440
   1698c:	str	r1, [r0, #1084]	; 0x43c
   16990:	str	r1, [r0, #1080]	; 0x438
   16994:	str	r1, [r0, #1076]	; 0x434
   16998:	str	r1, [r0, #1072]	; 0x430
   1699c:	str	r1, [r0, #1068]	; 0x42c
   169a0:	str	r1, [r0, #1064]	; 0x428
   169a4:	str	r1, [r0, #1060]	; 0x424
   169a8:	str	r1, [r0, #1056]	; 0x420
   169ac:	str	r1, [r0, #1052]	; 0x41c
   169b0:	str	r1, [r0, #1048]	; 0x418
   169b4:	str	r1, [r0, #1044]	; 0x414
   169b8:	str	r1, [r0, #1040]	; 0x410
   169bc:	str	r1, [r0, #1036]	; 0x40c
   169c0:	str	r1, [r0, #1032]	; 0x408
   169c4:	str	r1, [r0, #1028]	; 0x404
   169c8:	str	r1, [r0, #1024]	; 0x400
   169cc:	pop	{fp, pc}
   169d0:	andeq	sl, r1, ip, lsr #30
   169d4:	andeq	sl, r1, r0, lsr #30
   169d8:	andeq	sl, r1, r8, lsl pc
   169dc:	andeq	sl, r1, r0, lsl pc
   169e0:	andeq	sl, r1, r8, lsl #30
   169e4:	andeq	sl, r1, r8, lsl #30
   169e8:	andeq	sl, r1, r0, lsl #30
   169ec:	andeq	sl, r1, r0, lsl #30
   169f0:	push	{fp, lr}
   169f4:	mov	fp, sp
   169f8:	ldr	r0, [pc, #16]	; 16a10 <next@@Base+0x2768>
   169fc:	add	r0, pc, r0
   16a00:	ldr	r1, [pc, #12]	; 16a14 <next@@Base+0x276c>
   16a04:	add	r1, pc, r1
   16a08:	bl	1e3e8 <__gcov_flush@@Base+0xb8>
   16a0c:	pop	{fp, pc}
   16a10:			; <UNDEFINED> instruction: 0xfffff94c
   16a14:			; <UNDEFINED> instruction: 0xfffffa60

00016a18 <init_ast_base@@Base>:
   16a18:	sub	sp, sp, #28
   16a1c:	ldr	r3, [pc, #132]	; 16aa8 <init_ast_base@@Base+0x90>
   16a20:	add	r3, pc, r3
   16a24:	str	r0, [sp, #12]
   16a28:	str	r1, [sp, #8]
   16a2c:	str	r2, [sp, #4]
   16a30:	str	r3, [sp]
   16a34:	ldr	r0, [sp]
   16a38:	ldr	r1, [r0]
   16a3c:	ldr	r2, [r0, #4]
   16a40:	adds	r1, r1, #1
   16a44:	adc	r2, r2, #0
   16a48:	str	r1, [r0]
   16a4c:	str	r2, [r0, #4]
   16a50:	ldr	r0, [pc, #84]	; 16aac <init_ast_base@@Base+0x94>
   16a54:	add	r0, pc, r0
   16a58:	ldr	r1, [r0, #8]
   16a5c:	ldr	r2, [r0, #12]
   16a60:	adds	r1, r1, #1
   16a64:	adc	r2, r2, #0
   16a68:	str	r1, [r0, #8]
   16a6c:	str	r2, [r0, #12]
   16a70:	ldr	r0, [sp, #12]
   16a74:	str	r0, [sp, #24]
   16a78:	ldr	r1, [sp, #8]
   16a7c:	str	r1, [sp, #20]
   16a80:	ldr	r2, [sp, #4]
   16a84:	str	r2, [sp, #16]
   16a88:	ldr	r3, [sp, #20]
   16a8c:	ldr	ip, [sp, #24]
   16a90:	str	r3, [ip]
   16a94:	ldr	r3, [sp, #16]
   16a98:	ldr	ip, [sp, #24]
   16a9c:	str	r3, [ip, #4]
   16aa0:	add	sp, sp, #28
   16aa4:	bx	lr
   16aa8:	andeq	sl, r1, r8, lsr #29
   16aac:	andeq	sl, r1, r4, ror lr

00016ab0 <init_ast_base_single@@Base>:
   16ab0:	push	{fp, lr}
   16ab4:	mov	fp, sp
   16ab8:	sub	sp, sp, #24
   16abc:	ldr	r2, [pc, #112]	; 16b34 <init_ast_base_single@@Base+0x84>
   16ac0:	add	r2, pc, r2
   16ac4:	str	r0, [sp, #12]
   16ac8:	str	r1, [sp, #8]
   16acc:	str	r2, [sp, #4]
   16ad0:	ldr	r0, [sp, #4]
   16ad4:	ldr	r1, [r0]
   16ad8:	ldr	r2, [r0, #4]
   16adc:	adds	r1, r1, #1
   16ae0:	adc	r2, r2, #0
   16ae4:	str	r1, [r0]
   16ae8:	str	r2, [r0, #4]
   16aec:	ldr	r0, [pc, #68]	; 16b38 <init_ast_base_single@@Base+0x88>
   16af0:	add	r0, pc, r0
   16af4:	ldr	r1, [r0, #8]
   16af8:	ldr	r2, [r0, #12]
   16afc:	adds	r1, r1, #1
   16b00:	adc	r2, r2, #0
   16b04:	str	r1, [r0, #8]
   16b08:	str	r2, [r0, #12]
   16b0c:	ldr	r0, [sp, #12]
   16b10:	str	r0, [fp, #-4]
   16b14:	ldr	r1, [sp, #8]
   16b18:	str	r1, [fp, #-8]
   16b1c:	ldr	r0, [fp, #-4]
   16b20:	ldr	r1, [fp, #-8]
   16b24:	movw	r2, #0
   16b28:	bl	16a18 <init_ast_base@@Base>
   16b2c:	mov	sp, fp
   16b30:	pop	{fp, pc}
   16b34:	andeq	sl, r1, r8, lsl lr
   16b38:	andeq	sl, r1, r8, ror #27

00016b3c <init_node_id@@Base>:
   16b3c:	push	{fp, lr}
   16b40:	mov	fp, sp
   16b44:	sub	sp, sp, #24
   16b48:	ldr	r2, [pc, #120]	; 16bc8 <init_node_id@@Base+0x8c>
   16b4c:	add	r2, pc, r2
   16b50:	str	r0, [sp, #12]
   16b54:	str	r1, [sp, #8]
   16b58:	str	r2, [sp, #4]
   16b5c:	ldr	r0, [sp, #4]
   16b60:	ldr	r1, [r0]
   16b64:	ldr	r2, [r0, #4]
   16b68:	adds	r1, r1, #1
   16b6c:	adc	r2, r2, #0
   16b70:	str	r1, [r0]
   16b74:	str	r2, [r0, #4]
   16b78:	ldr	r0, [pc, #76]	; 16bcc <init_node_id@@Base+0x90>
   16b7c:	add	r0, pc, r0
   16b80:	ldr	r1, [r0, #8]
   16b84:	ldr	r2, [r0, #12]
   16b88:	adds	r1, r1, #1
   16b8c:	adc	r2, r2, #0
   16b90:	str	r1, [r0, #8]
   16b94:	str	r2, [r0, #12]
   16b98:	ldr	r0, [sp, #12]
   16b9c:	str	r0, [fp, #-4]
   16ba0:	ldr	r1, [sp, #8]
   16ba4:	str	r1, [fp, #-8]
   16ba8:	ldr	r0, [fp, #-4]
   16bac:	movw	r1, #0
   16bb0:	bl	16ab0 <init_ast_base_single@@Base>
   16bb4:	ldr	r0, [fp, #-8]
   16bb8:	ldr	r1, [fp, #-4]
   16bbc:	str	r0, [r1, #8]
   16bc0:	mov	sp, fp
   16bc4:	pop	{fp, pc}
   16bc8:	muleq	r1, ip, sp
   16bcc:	andeq	sl, r1, ip, ror #26

00016bd0 <init_node_int@@Base>:
   16bd0:	push	{fp, lr}
   16bd4:	mov	fp, sp
   16bd8:	sub	sp, sp, #24
   16bdc:	ldr	r2, [pc, #120]	; 16c5c <init_node_int@@Base+0x8c>
   16be0:	add	r2, pc, r2
   16be4:	str	r0, [sp, #12]
   16be8:	str	r1, [sp, #8]
   16bec:	str	r2, [sp, #4]
   16bf0:	ldr	r0, [sp, #4]
   16bf4:	ldr	r1, [r0]
   16bf8:	ldr	r2, [r0, #4]
   16bfc:	adds	r1, r1, #1
   16c00:	adc	r2, r2, #0
   16c04:	str	r1, [r0]
   16c08:	str	r2, [r0, #4]
   16c0c:	ldr	r0, [pc, #76]	; 16c60 <init_node_int@@Base+0x90>
   16c10:	add	r0, pc, r0
   16c14:	ldr	r1, [r0, #8]
   16c18:	ldr	r2, [r0, #12]
   16c1c:	adds	r1, r1, #1
   16c20:	adc	r2, r2, #0
   16c24:	str	r1, [r0, #8]
   16c28:	str	r2, [r0, #12]
   16c2c:	ldr	r0, [sp, #12]
   16c30:	str	r0, [fp, #-4]
   16c34:	ldr	r1, [sp, #8]
   16c38:	str	r1, [fp, #-8]
   16c3c:	ldr	r0, [fp, #-4]
   16c40:	movw	r1, #1
   16c44:	bl	16ab0 <init_ast_base_single@@Base>
   16c48:	ldr	r0, [fp, #-8]
   16c4c:	ldr	r1, [fp, #-4]
   16c50:	str	r0, [r1, #8]
   16c54:	mov	sp, fp
   16c58:	pop	{fp, pc}
   16c5c:	andeq	sl, r1, r8, lsl sp
   16c60:	andeq	sl, r1, r8, ror #25

00016c64 <init_node_function@@Base>:
   16c64:	push	{fp, lr}
   16c68:	mov	fp, sp
   16c6c:	sub	sp, sp, #32
   16c70:	ldr	r3, [pc, #144]	; 16d08 <init_node_function@@Base+0xa4>
   16c74:	add	r3, pc, r3
   16c78:	str	r0, [sp, #16]
   16c7c:	str	r1, [sp, #12]
   16c80:	str	r2, [sp, #8]
   16c84:	str	r3, [sp, #4]
   16c88:	ldr	r0, [sp, #4]
   16c8c:	ldr	r1, [r0]
   16c90:	ldr	r2, [r0, #4]
   16c94:	adds	r1, r1, #1
   16c98:	adc	r2, r2, #0
   16c9c:	str	r1, [r0]
   16ca0:	str	r2, [r0, #4]
   16ca4:	ldr	r0, [pc, #96]	; 16d0c <init_node_function@@Base+0xa8>
   16ca8:	add	r0, pc, r0
   16cac:	ldr	r1, [r0, #8]
   16cb0:	ldr	r2, [r0, #12]
   16cb4:	adds	r1, r1, #1
   16cb8:	adc	r2, r2, #0
   16cbc:	str	r1, [r0, #8]
   16cc0:	str	r2, [r0, #12]
   16cc4:	ldr	r0, [sp, #16]
   16cc8:	str	r0, [fp, #-4]
   16ccc:	ldr	r1, [sp, #12]
   16cd0:	str	r1, [fp, #-8]
   16cd4:	ldr	r2, [sp, #8]
   16cd8:	str	r2, [fp, #-12]
   16cdc:	ldr	r0, [fp, #-4]
   16ce0:	movw	r1, #2
   16ce4:	bl	16ab0 <init_ast_base_single@@Base>
   16ce8:	ldr	r0, [fp, #-8]
   16cec:	ldr	r1, [fp, #-4]
   16cf0:	str	r0, [r1, #8]
   16cf4:	ldr	r0, [fp, #-12]
   16cf8:	ldr	r1, [fp, #-4]
   16cfc:	str	r0, [r1, #12]
   16d00:	mov	sp, fp
   16d04:	pop	{fp, pc}
   16d08:	muleq	r1, r4, ip
   16d0c:	andeq	sl, r1, r0, ror #24

00016d10 <init_node_return@@Base>:
   16d10:	push	{fp, lr}
   16d14:	mov	fp, sp
   16d18:	sub	sp, sp, #24
   16d1c:	ldr	r2, [pc, #120]	; 16d9c <init_node_return@@Base+0x8c>
   16d20:	add	r2, pc, r2
   16d24:	str	r0, [sp, #12]
   16d28:	str	r1, [sp, #8]
   16d2c:	str	r2, [sp, #4]
   16d30:	ldr	r0, [sp, #4]
   16d34:	ldr	r1, [r0]
   16d38:	ldr	r2, [r0, #4]
   16d3c:	adds	r1, r1, #1
   16d40:	adc	r2, r2, #0
   16d44:	str	r1, [r0]
   16d48:	str	r2, [r0, #4]
   16d4c:	ldr	r0, [pc, #76]	; 16da0 <init_node_return@@Base+0x90>
   16d50:	add	r0, pc, r0
   16d54:	ldr	r1, [r0, #8]
   16d58:	ldr	r2, [r0, #12]
   16d5c:	adds	r1, r1, #1
   16d60:	adc	r2, r2, #0
   16d64:	str	r1, [r0, #8]
   16d68:	str	r2, [r0, #12]
   16d6c:	ldr	r0, [sp, #12]
   16d70:	str	r0, [fp, #-4]
   16d74:	ldr	r1, [sp, #8]
   16d78:	str	r1, [fp, #-8]
   16d7c:	ldr	r0, [fp, #-4]
   16d80:	movw	r1, #3
   16d84:	bl	16ab0 <init_ast_base_single@@Base>
   16d88:	ldr	r0, [fp, #-8]
   16d8c:	ldr	r1, [fp, #-4]
   16d90:	str	r0, [r1, #8]
   16d94:	mov	sp, fp
   16d98:	pop	{fp, pc}
   16d9c:	strdeq	sl, [r1], -r8
   16da0:	andeq	sl, r1, r8, asr #23

00016da4 <init_node_if@@Base>:
   16da4:	push	{fp, lr}
   16da8:	mov	fp, sp
   16dac:	sub	sp, sp, #40	; 0x28
   16db0:	ldr	ip, [pc, #168]	; 16e60 <init_node_if@@Base+0xbc>
   16db4:	add	ip, pc, ip
   16db8:	str	r0, [sp, #20]
   16dbc:	str	r1, [sp, #16]
   16dc0:	str	r2, [sp, #12]
   16dc4:	str	r3, [sp, #8]
   16dc8:	str	ip, [sp, #4]
   16dcc:	ldr	r0, [sp, #4]
   16dd0:	ldr	r1, [r0]
   16dd4:	ldr	r2, [r0, #4]
   16dd8:	adds	r1, r1, #1
   16ddc:	adc	r2, r2, #0
   16de0:	str	r1, [r0]
   16de4:	str	r2, [r0, #4]
   16de8:	ldr	r0, [pc, #116]	; 16e64 <init_node_if@@Base+0xc0>
   16dec:	add	r0, pc, r0
   16df0:	ldr	r1, [r0, #8]
   16df4:	ldr	r2, [r0, #12]
   16df8:	adds	r1, r1, #1
   16dfc:	adc	r2, r2, #0
   16e00:	str	r1, [r0, #8]
   16e04:	str	r2, [r0, #12]
   16e08:	ldr	r0, [sp, #20]
   16e0c:	str	r0, [fp, #-4]
   16e10:	ldr	r1, [sp, #16]
   16e14:	str	r1, [fp, #-8]
   16e18:	ldr	r2, [sp, #12]
   16e1c:	str	r2, [fp, #-12]
   16e20:	ldr	r3, [sp, #8]
   16e24:	str	r3, [fp, #-16]
   16e28:	ldr	r0, [fp, #-4]
   16e2c:	movw	r1, #4
   16e30:	bl	16ab0 <init_ast_base_single@@Base>
   16e34:	ldr	r0, [fp, #-8]
   16e38:	ldr	r1, [fp, #-4]
   16e3c:	str	r0, [r1, #8]
   16e40:	ldr	r0, [fp, #-12]
   16e44:	ldr	r1, [fp, #-4]
   16e48:	str	r0, [r1, #12]
   16e4c:	ldr	r0, [fp, #-16]
   16e50:	ldr	r1, [fp, #-4]
   16e54:	str	r0, [r1, #16]
   16e58:	mov	sp, fp
   16e5c:	pop	{fp, pc}
   16e60:	andeq	sl, r1, r4, ror fp
   16e64:	andeq	sl, r1, ip, lsr fp

00016e68 <init_node_boolean_operator@@Base>:
   16e68:	push	{fp, lr}
   16e6c:	mov	fp, sp
   16e70:	sub	sp, sp, #40	; 0x28
   16e74:	ldr	ip, [pc, #180]	; 16f30 <init_node_boolean_operator@@Base+0xc8>
   16e78:	add	ip, pc, ip
   16e7c:	str	r0, [sp, #20]
   16e80:	str	r1, [sp, #16]
   16e84:	str	r2, [sp, #12]
   16e88:	str	r3, [sp, #8]
   16e8c:	str	ip, [sp, #4]
   16e90:	ldr	r0, [sp, #4]
   16e94:	ldr	r1, [r0]
   16e98:	ldr	r2, [r0, #4]
   16e9c:	adds	r1, r1, #1
   16ea0:	adc	r2, r2, #0
   16ea4:	str	r1, [r0]
   16ea8:	str	r2, [r0, #4]
   16eac:	ldr	r0, [pc, #128]	; 16f34 <init_node_boolean_operator@@Base+0xcc>
   16eb0:	add	r0, pc, r0
   16eb4:	ldr	r1, [r0, #8]
   16eb8:	ldr	r2, [r0, #12]
   16ebc:	adds	r1, r1, #1
   16ec0:	adc	r2, r2, #0
   16ec4:	str	r1, [r0, #8]
   16ec8:	str	r2, [r0, #12]
   16ecc:	ldr	r0, [sp, #20]
   16ed0:	str	r0, [fp, #-4]
   16ed4:	ldr	r1, [sp, #16]
   16ed8:	str	r1, [fp, #-8]
   16edc:	ldr	r2, [sp, #12]
   16ee0:	str	r2, [fp, #-12]
   16ee4:	ldr	r3, [sp, #8]
   16ee8:	str	r3, [fp, #-16]
   16eec:	ldr	r0, [fp, #-4]
   16ef0:	movw	r1, #0
   16ef4:	bl	16ab0 <init_ast_base_single@@Base>
   16ef8:	ldr	r0, [fp, #-4]
   16efc:	movw	r1, #5
   16f00:	str	r1, [r0]
   16f04:	ldr	r0, [fp, #-8]
   16f08:	ldr	r1, [fp, #-4]
   16f0c:	str	r0, [r1, #16]
   16f10:	ldr	r0, [fp, #-12]
   16f14:	ldr	r1, [fp, #-4]
   16f18:	str	r0, [r1, #8]
   16f1c:	ldr	r0, [fp, #-16]
   16f20:	ldr	r1, [fp, #-4]
   16f24:	str	r0, [r1, #12]
   16f28:	mov	sp, fp
   16f2c:	pop	{fp, pc}
   16f30:	andeq	sl, r1, r0, asr #21
   16f34:	andeq	sl, r1, r8, lsl #21

00016f38 <free_node@@Base>:
   16f38:	push	{r4, r5, r6, sl, fp, lr}
   16f3c:	add	fp, sp, #16
   16f40:	sub	sp, sp, #80	; 0x50
   16f44:	ldr	r1, [pc, #688]	; 171fc <free_node@@Base+0x2c4>
   16f48:	add	r1, pc, r1
   16f4c:	str	r0, [fp, #-24]	; 0xffffffe8
   16f50:	str	r1, [fp, #-28]	; 0xffffffe4
   16f54:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16f58:	ldr	r1, [r0]
   16f5c:	ldr	r2, [r0, #4]
   16f60:	adds	r1, r1, #1
   16f64:	adc	r2, r2, #0
   16f68:	str	r1, [r0]
   16f6c:	str	r2, [r0, #4]
   16f70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f74:	str	r0, [fp, #-20]	; 0xffffffec
   16f78:	ldr	r1, [fp, #-20]	; 0xffffffec
   16f7c:	ldr	r2, [pc, #668]	; 17220 <free_node@@Base+0x2e8>
   16f80:	add	r2, pc, r2
   16f84:	add	r3, r2, #56	; 0x38
   16f88:	add	ip, r2, #48	; 0x30
   16f8c:	add	lr, r2, #40	; 0x28
   16f90:	add	r4, r2, #32
   16f94:	add	r5, r2, #24
   16f98:	add	r6, r2, #16
   16f9c:	add	r2, r2, #8
   16fa0:	ldr	r1, [r1]
   16fa4:	cmp	r1, #5
   16fa8:	str	r3, [fp, #-32]	; 0xffffffe0
   16fac:	str	ip, [fp, #-36]	; 0xffffffdc
   16fb0:	str	lr, [fp, #-40]	; 0xffffffd8
   16fb4:	str	r4, [fp, #-44]	; 0xffffffd4
   16fb8:	str	r5, [sp, #48]	; 0x30
   16fbc:	str	r6, [sp, #44]	; 0x2c
   16fc0:	str	r1, [sp, #40]	; 0x28
   16fc4:	str	r2, [sp, #36]	; 0x24
   16fc8:	bhi	17174 <free_node@@Base+0x23c>
   16fcc:	add	r0, pc, #56	; 0x38
   16fd0:	ldr	r1, [sp, #40]	; 0x28
   16fd4:	ldr	r2, [r0, r1, lsl #2]
   16fd8:	ldr	r3, [sp, #44]	; 0x2c
   16fdc:	ldr	ip, [sp, #48]	; 0x30
   16fe0:	ldr	lr, [fp, #-44]	; 0xffffffd4
   16fe4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   16fe8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   16fec:	ldr	r6, [fp, #-32]	; 0xffffffe0
   16ff0:	str	r3, [sp, #32]
   16ff4:	str	ip, [sp, #28]
   16ff8:	str	lr, [sp, #24]
   16ffc:	str	r4, [sp, #20]
   17000:	str	r5, [sp, #16]
   17004:	str	r6, [sp, #12]
   17008:	add	pc, r0, r2
   1700c:	andeq	r0, r0, r8, lsl r0
   17010:	andeq	r0, r0, r0, asr r0
   17014:	andeq	r0, r0, r8, lsl #1
   17018:	andeq	r0, r0, r0, asr #1
   1701c:	strdeq	r0, [r0], -r8
   17020:	andeq	r0, r0, r0, lsr r1
   17024:	ldr	r0, [sp, #32]
   17028:	ldr	r1, [r0]
   1702c:	ldr	r2, [r0, #4]
   17030:	adds	r1, r1, #1
   17034:	adc	r2, r2, #0
   17038:	str	r1, [r0]
   1703c:	str	r2, [r0, #4]
   17040:	ldr	r0, [fp, #-20]	; 0xffffffec
   17044:	bl	17228 <free_node_id@@Base>
   17048:	ldr	r0, [pc, #452]	; 17214 <free_node@@Base+0x2dc>
   1704c:	add	r0, pc, r0
   17050:	add	r0, r0, #64	; 0x40
   17054:	str	r0, [sp, #8]
   17058:	b	171b8 <free_node@@Base+0x280>
   1705c:	ldr	r0, [sp, #28]
   17060:	ldr	r1, [r0]
   17064:	ldr	r2, [r0, #4]
   17068:	adds	r1, r1, #1
   1706c:	adc	r2, r2, #0
   17070:	str	r1, [r0]
   17074:	str	r2, [r0, #4]
   17078:	ldr	r0, [fp, #-20]	; 0xffffffec
   1707c:	bl	17328 <free_node_int@@Base>
   17080:	ldr	r0, [pc, #392]	; 17210 <free_node@@Base+0x2d8>
   17084:	add	r0, pc, r0
   17088:	add	r0, r0, #72	; 0x48
   1708c:	str	r0, [sp, #8]
   17090:	b	171b8 <free_node@@Base+0x280>
   17094:	ldr	r0, [sp, #24]
   17098:	ldr	r1, [r0]
   1709c:	ldr	r2, [r0, #4]
   170a0:	adds	r1, r1, #1
   170a4:	adc	r2, r2, #0
   170a8:	str	r1, [r0]
   170ac:	str	r2, [r0, #4]
   170b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   170b4:	bl	17428 <free_node_function@@Base>
   170b8:	ldr	r0, [pc, #332]	; 1720c <free_node@@Base+0x2d4>
   170bc:	add	r0, pc, r0
   170c0:	add	r0, r0, #80	; 0x50
   170c4:	str	r0, [sp, #8]
   170c8:	b	171b8 <free_node@@Base+0x280>
   170cc:	ldr	r0, [sp, #20]
   170d0:	ldr	r1, [r0]
   170d4:	ldr	r2, [r0, #4]
   170d8:	adds	r1, r1, #1
   170dc:	adc	r2, r2, #0
   170e0:	str	r1, [r0]
   170e4:	str	r2, [r0, #4]
   170e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   170ec:	bl	17534 <free_node_return@@Base>
   170f0:	ldr	r0, [pc, #272]	; 17208 <free_node@@Base+0x2d0>
   170f4:	add	r0, pc, r0
   170f8:	add	r0, r0, #88	; 0x58
   170fc:	str	r0, [sp, #8]
   17100:	b	171b8 <free_node@@Base+0x280>
   17104:	ldr	r0, [sp, #16]
   17108:	ldr	r1, [r0]
   1710c:	ldr	r2, [r0, #4]
   17110:	adds	r1, r1, #1
   17114:	adc	r2, r2, #0
   17118:	str	r1, [r0]
   1711c:	str	r2, [r0, #4]
   17120:	ldr	r0, [fp, #-20]	; 0xffffffec
   17124:	bl	17634 <free_node_if@@Base>
   17128:	ldr	r0, [pc, #212]	; 17204 <free_node@@Base+0x2cc>
   1712c:	add	r0, pc, r0
   17130:	add	r0, r0, #96	; 0x60
   17134:	str	r0, [sp, #8]
   17138:	b	171b8 <free_node@@Base+0x280>
   1713c:	ldr	r0, [sp, #12]
   17140:	ldr	r1, [r0]
   17144:	ldr	r2, [r0, #4]
   17148:	adds	r1, r1, #1
   1714c:	adc	r2, r2, #0
   17150:	str	r1, [r0]
   17154:	str	r2, [r0, #4]
   17158:	ldr	r0, [fp, #-20]	; 0xffffffec
   1715c:	bl	17758 <free_node_boolean_operator@@Base>
   17160:	ldr	r0, [pc, #152]	; 17200 <free_node@@Base+0x2c8>
   17164:	add	r0, pc, r0
   17168:	add	r0, r0, #104	; 0x68
   1716c:	str	r0, [sp, #8]
   17170:	b	171b8 <free_node@@Base+0x280>
   17174:	ldr	r0, [sp, #36]	; 0x24
   17178:	ldr	r1, [pc, #152]	; 17218 <free_node@@Base+0x2e0>
   1717c:	add	r1, pc, r1
   17180:	ldr	r2, [pc, #148]	; 1721c <free_node@@Base+0x2e4>
   17184:	ldr	r2, [pc, r2]
   17188:	ldr	r3, [r0]
   1718c:	ldr	ip, [r0, #4]
   17190:	adds	r3, r3, #1
   17194:	adc	ip, ip, #0
   17198:	str	r3, [r0]
   1719c:	str	ip, [r0, #4]
   171a0:	ldr	r0, [r2]
   171a4:	bl	11ffc <fprintf@plt>
   171a8:	movw	r1, #1
   171ac:	str	r0, [sp, #4]
   171b0:	mov	r0, r1
   171b4:	bl	11fcc <exit@plt>
   171b8:	ldr	r0, [sp, #8]
   171bc:	ldr	r1, [r0]
   171c0:	ldr	r2, [r0, #4]
   171c4:	adds	r1, r1, #1
   171c8:	adc	r2, r2, #0
   171cc:	str	r1, [r0]
   171d0:	str	r2, [r0, #4]
   171d4:	ldr	r0, [pc, #72]	; 17224 <free_node@@Base+0x2ec>
   171d8:	add	r0, pc, r0
   171dc:	ldr	r1, [r0, #112]	; 0x70
   171e0:	ldr	r2, [r0, #116]	; 0x74
   171e4:	adds	r1, r1, #1
   171e8:	adc	r2, r2, #0
   171ec:	str	r1, [r0, #112]	; 0x70
   171f0:	str	r2, [r0, #116]	; 0x74
   171f4:	sub	sp, fp, #16
   171f8:	pop	{r4, r5, r6, sl, fp, pc}
   171fc:	andeq	sl, r1, r0, lsl #20
   17200:	andeq	sl, r1, r4, ror #15
   17204:	andeq	sl, r1, ip, lsl r8
   17208:	andeq	sl, r1, r4, asr r8
   1720c:	andeq	sl, r1, ip, lsl #17
   17210:	andeq	sl, r1, r4, asr #17
   17214:	strdeq	sl, [r1], -ip
   17218:	andeq	r7, r0, r0, lsr #27
   1721c:	andeq	r9, r1, r8, lsr pc
   17220:	andeq	sl, r1, r8, asr #19
   17224:	andeq	sl, r1, r0, ror r7

00017228 <free_node_id@@Base>:
   17228:	push	{fp, lr}
   1722c:	mov	fp, sp
   17230:	sub	sp, sp, #24
   17234:	ldr	r1, [pc, #220]	; 17318 <free_node_id@@Base+0xf0>
   17238:	add	r1, pc, r1
   1723c:	str	r0, [fp, #-8]
   17240:	str	r1, [sp, #12]
   17244:	ldr	r0, [sp, #12]
   17248:	ldr	r1, [pc, #204]	; 1731c <free_node_id@@Base+0xf4>
   1724c:	add	r1, pc, r1
   17250:	add	r2, r1, #8
   17254:	add	r1, r1, #16
   17258:	ldr	r3, [r0]
   1725c:	ldr	ip, [r0, #4]
   17260:	adds	r3, r3, #1
   17264:	adc	ip, ip, #0
   17268:	str	r3, [r0]
   1726c:	str	ip, [r0, #4]
   17270:	ldr	r0, [fp, #-8]
   17274:	str	r0, [fp, #-4]
   17278:	ldr	r3, [fp, #-4]
   1727c:	ldr	r3, [r3, #4]
   17280:	movw	ip, #0
   17284:	cmp	r3, ip
   17288:	str	r2, [sp, #8]
   1728c:	str	r1, [sp, #4]
   17290:	beq	172cc <free_node_id@@Base+0xa4>
   17294:	ldr	r0, [sp, #8]
   17298:	ldr	r1, [r0]
   1729c:	ldr	r2, [r0, #4]
   172a0:	adds	r1, r1, #1
   172a4:	adc	r2, r2, #0
   172a8:	str	r1, [r0]
   172ac:	str	r2, [r0, #4]
   172b0:	ldr	r0, [fp, #-4]
   172b4:	ldr	r0, [r0, #4]
   172b8:	bl	16f38 <free_node@@Base>
   172bc:	ldr	r0, [pc, #92]	; 17320 <free_node_id@@Base+0xf8>
   172c0:	add	r0, pc, r0
   172c4:	add	r0, r0, #24
   172c8:	str	r0, [sp, #4]
   172cc:	ldr	r0, [sp, #4]
   172d0:	ldr	r1, [r0]
   172d4:	ldr	r2, [r0, #4]
   172d8:	adds	r1, r1, #1
   172dc:	adc	r2, r2, #0
   172e0:	str	r1, [r0]
   172e4:	str	r2, [r0, #4]
   172e8:	ldr	r0, [pc, #52]	; 17324 <free_node_id@@Base+0xfc>
   172ec:	add	r0, pc, r0
   172f0:	ldr	r1, [r0, #32]
   172f4:	ldr	r2, [r0, #36]	; 0x24
   172f8:	adds	r1, r1, #1
   172fc:	adc	r2, r2, #0
   17300:	str	r1, [r0, #32]
   17304:	str	r2, [r0, #36]	; 0x24
   17308:	ldr	r0, [fp, #-4]
   1730c:	bl	11f0c <free@plt>
   17310:	mov	sp, fp
   17314:	pop	{fp, pc}
   17318:	muleq	r1, r0, r7
   1731c:	andeq	sl, r1, ip, ror r7
   17320:	andeq	sl, r1, r8, lsl #14
   17324:	ldrdeq	sl, [r1], -ip

00017328 <free_node_int@@Base>:
   17328:	push	{fp, lr}
   1732c:	mov	fp, sp
   17330:	sub	sp, sp, #24
   17334:	ldr	r1, [pc, #220]	; 17418 <free_node_int@@Base+0xf0>
   17338:	add	r1, pc, r1
   1733c:	str	r0, [fp, #-8]
   17340:	str	r1, [sp, #12]
   17344:	ldr	r0, [sp, #12]
   17348:	ldr	r1, [pc, #204]	; 1741c <free_node_int@@Base+0xf4>
   1734c:	add	r1, pc, r1
   17350:	add	r2, r1, #8
   17354:	add	r1, r1, #16
   17358:	ldr	r3, [r0]
   1735c:	ldr	ip, [r0, #4]
   17360:	adds	r3, r3, #1
   17364:	adc	ip, ip, #0
   17368:	str	r3, [r0]
   1736c:	str	ip, [r0, #4]
   17370:	ldr	r0, [fp, #-8]
   17374:	str	r0, [fp, #-4]
   17378:	ldr	r3, [fp, #-4]
   1737c:	ldr	r3, [r3, #4]
   17380:	movw	ip, #0
   17384:	cmp	r3, ip
   17388:	str	r2, [sp, #8]
   1738c:	str	r1, [sp, #4]
   17390:	beq	173cc <free_node_int@@Base+0xa4>
   17394:	ldr	r0, [sp, #8]
   17398:	ldr	r1, [r0]
   1739c:	ldr	r2, [r0, #4]
   173a0:	adds	r1, r1, #1
   173a4:	adc	r2, r2, #0
   173a8:	str	r1, [r0]
   173ac:	str	r2, [r0, #4]
   173b0:	ldr	r0, [fp, #-4]
   173b4:	ldr	r0, [r0, #4]
   173b8:	bl	16f38 <free_node@@Base>
   173bc:	ldr	r0, [pc, #92]	; 17420 <free_node_int@@Base+0xf8>
   173c0:	add	r0, pc, r0
   173c4:	add	r0, r0, #24
   173c8:	str	r0, [sp, #4]
   173cc:	ldr	r0, [sp, #4]
   173d0:	ldr	r1, [r0]
   173d4:	ldr	r2, [r0, #4]
   173d8:	adds	r1, r1, #1
   173dc:	adc	r2, r2, #0
   173e0:	str	r1, [r0]
   173e4:	str	r2, [r0, #4]
   173e8:	ldr	r0, [pc, #52]	; 17424 <free_node_int@@Base+0xfc>
   173ec:	add	r0, pc, r0
   173f0:	ldr	r1, [r0, #32]
   173f4:	ldr	r2, [r0, #36]	; 0x24
   173f8:	adds	r1, r1, #1
   173fc:	adc	r2, r2, #0
   17400:	str	r1, [r0, #32]
   17404:	str	r2, [r0, #36]	; 0x24
   17408:	ldr	r0, [fp, #-4]
   1740c:	bl	11f0c <free@plt>
   17410:	mov	sp, fp
   17414:	pop	{fp, pc}
   17418:	andeq	sl, r1, r0, asr #13
   1741c:	andeq	sl, r1, ip, lsr #13
   17420:	andeq	sl, r1, r8, lsr r6
   17424:	andeq	sl, r1, ip, lsl #12

00017428 <free_node_function@@Base>:
   17428:	push	{fp, lr}
   1742c:	mov	fp, sp
   17430:	sub	sp, sp, #24
   17434:	ldr	r1, [pc, #232]	; 17524 <free_node_function@@Base+0xfc>
   17438:	add	r1, pc, r1
   1743c:	str	r0, [fp, #-8]
   17440:	str	r1, [sp, #12]
   17444:	ldr	r0, [sp, #12]
   17448:	ldr	r1, [pc, #216]	; 17528 <free_node_function@@Base+0x100>
   1744c:	add	r1, pc, r1
   17450:	add	r2, r1, #8
   17454:	add	r1, r1, #16
   17458:	ldr	r3, [r0]
   1745c:	ldr	ip, [r0, #4]
   17460:	adds	r3, r3, #1
   17464:	adc	ip, ip, #0
   17468:	str	r3, [r0]
   1746c:	str	ip, [r0, #4]
   17470:	ldr	r0, [fp, #-8]
   17474:	str	r0, [fp, #-4]
   17478:	ldr	r3, [fp, #-4]
   1747c:	ldr	r3, [r3, #4]
   17480:	movw	ip, #0
   17484:	cmp	r3, ip
   17488:	str	r2, [sp, #8]
   1748c:	str	r1, [sp, #4]
   17490:	beq	174cc <free_node_function@@Base+0xa4>
   17494:	ldr	r0, [sp, #8]
   17498:	ldr	r1, [r0]
   1749c:	ldr	r2, [r0, #4]
   174a0:	adds	r1, r1, #1
   174a4:	adc	r2, r2, #0
   174a8:	str	r1, [r0]
   174ac:	str	r2, [r0, #4]
   174b0:	ldr	r0, [fp, #-4]
   174b4:	ldr	r0, [r0, #4]
   174b8:	bl	16f38 <free_node@@Base>
   174bc:	ldr	r0, [pc, #104]	; 1752c <free_node_function@@Base+0x104>
   174c0:	add	r0, pc, r0
   174c4:	add	r0, r0, #24
   174c8:	str	r0, [sp, #4]
   174cc:	ldr	r0, [sp, #4]
   174d0:	ldr	r1, [r0]
   174d4:	ldr	r2, [r0, #4]
   174d8:	adds	r1, r1, #1
   174dc:	adc	r2, r2, #0
   174e0:	str	r1, [r0]
   174e4:	str	r2, [r0, #4]
   174e8:	ldr	r0, [pc, #64]	; 17530 <free_node_function@@Base+0x108>
   174ec:	add	r0, pc, r0
   174f0:	ldr	r1, [r0, #32]
   174f4:	ldr	r2, [r0, #36]	; 0x24
   174f8:	adds	r1, r1, #1
   174fc:	adc	r2, r2, #0
   17500:	str	r1, [r0, #32]
   17504:	str	r2, [r0, #36]	; 0x24
   17508:	ldr	r0, [fp, #-4]
   1750c:	ldr	r0, [r0, #8]
   17510:	bl	11f0c <free@plt>
   17514:	ldr	r0, [fp, #-4]
   17518:	bl	11f0c <free@plt>
   1751c:	mov	sp, fp
   17520:	pop	{fp, pc}
   17524:	strdeq	sl, [r1], -r0
   17528:	ldrdeq	sl, [r1], -ip
   1752c:	andeq	sl, r1, r8, ror #10
   17530:	andeq	sl, r1, ip, lsr r5

00017534 <free_node_return@@Base>:
   17534:	push	{fp, lr}
   17538:	mov	fp, sp
   1753c:	sub	sp, sp, #24
   17540:	ldr	r1, [pc, #220]	; 17624 <free_node_return@@Base+0xf0>
   17544:	add	r1, pc, r1
   17548:	str	r0, [fp, #-8]
   1754c:	str	r1, [sp, #12]
   17550:	ldr	r0, [sp, #12]
   17554:	ldr	r1, [pc, #204]	; 17628 <free_node_return@@Base+0xf4>
   17558:	add	r1, pc, r1
   1755c:	add	r2, r1, #8
   17560:	add	r1, r1, #16
   17564:	ldr	r3, [r0]
   17568:	ldr	ip, [r0, #4]
   1756c:	adds	r3, r3, #1
   17570:	adc	ip, ip, #0
   17574:	str	r3, [r0]
   17578:	str	ip, [r0, #4]
   1757c:	ldr	r0, [fp, #-8]
   17580:	str	r0, [fp, #-4]
   17584:	ldr	r3, [fp, #-4]
   17588:	ldr	r3, [r3, #4]
   1758c:	movw	ip, #0
   17590:	cmp	r3, ip
   17594:	str	r2, [sp, #8]
   17598:	str	r1, [sp, #4]
   1759c:	beq	175d8 <free_node_return@@Base+0xa4>
   175a0:	ldr	r0, [sp, #8]
   175a4:	ldr	r1, [r0]
   175a8:	ldr	r2, [r0, #4]
   175ac:	adds	r1, r1, #1
   175b0:	adc	r2, r2, #0
   175b4:	str	r1, [r0]
   175b8:	str	r2, [r0, #4]
   175bc:	ldr	r0, [fp, #-4]
   175c0:	ldr	r0, [r0, #4]
   175c4:	bl	16f38 <free_node@@Base>
   175c8:	ldr	r0, [pc, #92]	; 1762c <free_node_return@@Base+0xf8>
   175cc:	add	r0, pc, r0
   175d0:	add	r0, r0, #24
   175d4:	str	r0, [sp, #4]
   175d8:	ldr	r0, [sp, #4]
   175dc:	ldr	r1, [r0]
   175e0:	ldr	r2, [r0, #4]
   175e4:	adds	r1, r1, #1
   175e8:	adc	r2, r2, #0
   175ec:	str	r1, [r0]
   175f0:	str	r2, [r0, #4]
   175f4:	ldr	r0, [pc, #52]	; 17630 <free_node_return@@Base+0xfc>
   175f8:	add	r0, pc, r0
   175fc:	ldr	r1, [r0, #32]
   17600:	ldr	r2, [r0, #36]	; 0x24
   17604:	adds	r1, r1, #1
   17608:	adc	r2, r2, #0
   1760c:	str	r1, [r0, #32]
   17610:	str	r2, [r0, #36]	; 0x24
   17614:	ldr	r0, [fp, #-4]
   17618:	bl	11f0c <free@plt>
   1761c:	mov	sp, fp
   17620:	pop	{fp, pc}
   17624:	andeq	sl, r1, r4, lsl r5
   17628:	andeq	sl, r1, r0, lsl #10
   1762c:	andeq	sl, r1, ip, lsl #9
   17630:	andeq	sl, r1, r0, ror #8

00017634 <free_node_if@@Base>:
   17634:	push	{fp, lr}
   17638:	mov	fp, sp
   1763c:	sub	sp, sp, #24
   17640:	ldr	r1, [pc, #256]	; 17748 <free_node_if@@Base+0x114>
   17644:	add	r1, pc, r1
   17648:	str	r0, [fp, #-8]
   1764c:	str	r1, [sp, #12]
   17650:	ldr	r0, [sp, #12]
   17654:	ldr	r1, [pc, #240]	; 1774c <free_node_if@@Base+0x118>
   17658:	add	r1, pc, r1
   1765c:	add	r2, r1, #8
   17660:	add	r1, r1, #16
   17664:	ldr	r3, [r0]
   17668:	ldr	ip, [r0, #4]
   1766c:	adds	r3, r3, #1
   17670:	adc	ip, ip, #0
   17674:	str	r3, [r0]
   17678:	str	ip, [r0, #4]
   1767c:	ldr	r0, [fp, #-8]
   17680:	str	r0, [fp, #-4]
   17684:	ldr	r3, [fp, #-4]
   17688:	ldr	r3, [r3, #4]
   1768c:	movw	ip, #0
   17690:	cmp	r3, ip
   17694:	str	r2, [sp, #8]
   17698:	str	r1, [sp, #4]
   1769c:	beq	176d8 <free_node_if@@Base+0xa4>
   176a0:	ldr	r0, [sp, #8]
   176a4:	ldr	r1, [r0]
   176a8:	ldr	r2, [r0, #4]
   176ac:	adds	r1, r1, #1
   176b0:	adc	r2, r2, #0
   176b4:	str	r1, [r0]
   176b8:	str	r2, [r0, #4]
   176bc:	ldr	r0, [fp, #-4]
   176c0:	ldr	r0, [r0, #4]
   176c4:	bl	16f38 <free_node@@Base>
   176c8:	ldr	r0, [pc, #128]	; 17750 <free_node_if@@Base+0x11c>
   176cc:	add	r0, pc, r0
   176d0:	add	r0, r0, #24
   176d4:	str	r0, [sp, #4]
   176d8:	ldr	r0, [sp, #4]
   176dc:	ldr	r1, [r0]
   176e0:	ldr	r2, [r0, #4]
   176e4:	adds	r1, r1, #1
   176e8:	adc	r2, r2, #0
   176ec:	str	r1, [r0]
   176f0:	str	r2, [r0, #4]
   176f4:	ldr	r0, [pc, #88]	; 17754 <free_node_if@@Base+0x120>
   176f8:	add	r0, pc, r0
   176fc:	ldr	r1, [r0, #32]
   17700:	ldr	r2, [r0, #36]	; 0x24
   17704:	adds	r1, r1, #1
   17708:	adc	r2, r2, #0
   1770c:	str	r1, [r0, #32]
   17710:	str	r2, [r0, #36]	; 0x24
   17714:	ldr	r0, [fp, #-4]
   17718:	ldr	r0, [r0, #8]
   1771c:	bl	16f38 <free_node@@Base>
   17720:	ldr	r0, [fp, #-4]
   17724:	ldr	r0, [r0, #12]
   17728:	bl	16f38 <free_node@@Base>
   1772c:	ldr	r0, [fp, #-4]
   17730:	ldr	r0, [r0, #16]
   17734:	bl	16f38 <free_node@@Base>
   17738:	ldr	r0, [fp, #-4]
   1773c:	bl	11f0c <free@plt>
   17740:	mov	sp, fp
   17744:	pop	{fp, pc}
   17748:	andeq	sl, r1, r4, asr #8
   1774c:	andeq	sl, r1, r0, lsr r4
   17750:			; <UNDEFINED> instruction: 0x0001a3bc
   17754:	muleq	r1, r0, r3

00017758 <free_node_boolean_operator@@Base>:
   17758:	push	{fp, lr}
   1775c:	mov	fp, sp
   17760:	sub	sp, sp, #24
   17764:	ldr	r1, [pc, #244]	; 17860 <free_node_boolean_operator@@Base+0x108>
   17768:	add	r1, pc, r1
   1776c:	str	r0, [fp, #-8]
   17770:	str	r1, [sp, #12]
   17774:	ldr	r0, [sp, #12]
   17778:	ldr	r1, [pc, #228]	; 17864 <free_node_boolean_operator@@Base+0x10c>
   1777c:	add	r1, pc, r1
   17780:	add	r2, r1, #8
   17784:	add	r1, r1, #16
   17788:	ldr	r3, [r0]
   1778c:	ldr	ip, [r0, #4]
   17790:	adds	r3, r3, #1
   17794:	adc	ip, ip, #0
   17798:	str	r3, [r0]
   1779c:	str	ip, [r0, #4]
   177a0:	ldr	r0, [fp, #-8]
   177a4:	str	r0, [fp, #-4]
   177a8:	ldr	r3, [fp, #-4]
   177ac:	ldr	r3, [r3, #4]
   177b0:	movw	ip, #0
   177b4:	cmp	r3, ip
   177b8:	str	r2, [sp, #8]
   177bc:	str	r1, [sp, #4]
   177c0:	beq	177fc <free_node_boolean_operator@@Base+0xa4>
   177c4:	ldr	r0, [sp, #8]
   177c8:	ldr	r1, [r0]
   177cc:	ldr	r2, [r0, #4]
   177d0:	adds	r1, r1, #1
   177d4:	adc	r2, r2, #0
   177d8:	str	r1, [r0]
   177dc:	str	r2, [r0, #4]
   177e0:	ldr	r0, [fp, #-4]
   177e4:	ldr	r0, [r0, #4]
   177e8:	bl	16f38 <free_node@@Base>
   177ec:	ldr	r0, [pc, #116]	; 17868 <free_node_boolean_operator@@Base+0x110>
   177f0:	add	r0, pc, r0
   177f4:	add	r0, r0, #24
   177f8:	str	r0, [sp, #4]
   177fc:	ldr	r0, [sp, #4]
   17800:	ldr	r1, [r0]
   17804:	ldr	r2, [r0, #4]
   17808:	adds	r1, r1, #1
   1780c:	adc	r2, r2, #0
   17810:	str	r1, [r0]
   17814:	str	r2, [r0, #4]
   17818:	ldr	r0, [pc, #76]	; 1786c <free_node_boolean_operator@@Base+0x114>
   1781c:	add	r0, pc, r0
   17820:	ldr	r1, [r0, #32]
   17824:	ldr	r2, [r0, #36]	; 0x24
   17828:	adds	r1, r1, #1
   1782c:	adc	r2, r2, #0
   17830:	str	r1, [r0, #32]
   17834:	str	r2, [r0, #36]	; 0x24
   17838:	ldr	r0, [fp, #-4]
   1783c:	ldr	r0, [r0, #8]
   17840:	bl	16f38 <free_node@@Base>
   17844:	ldr	r0, [fp, #-4]
   17848:	ldr	r0, [r0, #12]
   1784c:	bl	16f38 <free_node@@Base>
   17850:	ldr	r0, [fp, #-4]
   17854:	bl	11f0c <free@plt>
   17858:	mov	sp, fp
   1785c:	pop	{fp, pc}
   17860:	andeq	sl, r1, r0, asr r3
   17864:	andeq	sl, r1, ip, lsr r3
   17868:	andeq	sl, r1, r8, asr #5
   1786c:	muleq	r1, ip, r2

00017870 <get_boolean_op_value@@Base>:
   17870:	push	{fp, lr}
   17874:	mov	fp, sp
   17878:	sub	sp, sp, #128	; 0x80
   1787c:	ldr	r1, [pc, #1508]	; 17e68 <get_boolean_op_value@@Base+0x5f8>
   17880:	add	r1, pc, r1
   17884:	str	r0, [fp, #-16]
   17888:	str	r1, [fp, #-20]	; 0xffffffec
   1788c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17890:	ldr	r1, [pc, #1492]	; 17e6c <get_boolean_op_value@@Base+0x5fc>
   17894:	add	r1, pc, r1
   17898:	add	r2, r1, #8
   1789c:	add	r1, r1, #16
   178a0:	ldr	r3, [r0]
   178a4:	ldr	ip, [r0, #4]
   178a8:	adds	r3, r3, #1
   178ac:	adc	ip, ip, #0
   178b0:	str	r3, [r0]
   178b4:	str	ip, [r0, #4]
   178b8:	ldr	r0, [fp, #-16]
   178bc:	str	r0, [fp, #-8]
   178c0:	ldr	r3, [fp, #-8]
   178c4:	ldr	r0, [r3, #4]
   178c8:	mov	r3, #2
   178cc:	str	r1, [fp, #-24]	; 0xffffffe8
   178d0:	mov	r1, r3
   178d4:	str	r2, [fp, #-28]	; 0xffffffe4
   178d8:	bl	12068 <strnlen@plt>
   178dc:	str	r0, [fp, #-12]
   178e0:	ldr	r0, [fp, #-12]
   178e4:	cmp	r0, #2
   178e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   178ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   178f0:	str	r0, [fp, #-32]	; 0xffffffe0
   178f4:	str	r1, [fp, #-36]	; 0xffffffdc
   178f8:	bne	17c90 <get_boolean_op_value@@Base+0x420>
   178fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17900:	ldr	r1, [pc, #1408]	; 17e88 <get_boolean_op_value@@Base+0x618>
   17904:	add	r1, pc, r1
   17908:	ldr	r2, [r0]
   1790c:	ldr	r3, [r0, #4]
   17910:	adds	r2, r2, #1
   17914:	adc	r3, r3, #0
   17918:	str	r2, [r0]
   1791c:	str	r3, [r0, #4]
   17920:	ldr	r0, [fp, #-8]
   17924:	ldr	r0, [r0, #4]
   17928:	movw	r2, #2
   1792c:	bl	120bc <strncmp@plt>
   17930:	ldr	r1, [pc, #1356]	; 17e84 <get_boolean_op_value@@Base+0x614>
   17934:	add	r1, pc, r1
   17938:	add	r2, r1, #24
   1793c:	add	r1, r1, #32
   17940:	cmp	r0, #0
   17944:	str	r2, [fp, #-40]	; 0xffffffd8
   17948:	str	r1, [fp, #-44]	; 0xffffffd4
   1794c:	bne	17988 <get_boolean_op_value@@Base+0x118>
   17950:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17954:	ldr	r1, [pc, #1396]	; 17ed0 <get_boolean_op_value@@Base+0x660>
   17958:	add	r1, pc, r1
   1795c:	add	r1, r1, #40	; 0x28
   17960:	ldr	r2, [r0]
   17964:	ldr	r3, [r0, #4]
   17968:	adds	r2, r2, #1
   1796c:	adc	r3, r3, #0
   17970:	str	r2, [r0]
   17974:	str	r3, [r0, #4]
   17978:	movw	r0, #0
   1797c:	str	r0, [fp, #-4]
   17980:	str	r1, [fp, #-48]	; 0xffffffd0
   17984:	b	17e20 <get_boolean_op_value@@Base+0x5b0>
   17988:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1798c:	ldr	r1, [pc, #1276]	; 17e90 <get_boolean_op_value@@Base+0x620>
   17990:	add	r1, pc, r1
   17994:	ldr	r2, [r0]
   17998:	ldr	r3, [r0, #4]
   1799c:	adds	r2, r2, #1
   179a0:	adc	r3, r3, #0
   179a4:	str	r2, [r0]
   179a8:	str	r3, [r0, #4]
   179ac:	ldr	r0, [fp, #-8]
   179b0:	ldr	r0, [r0, #4]
   179b4:	movw	r2, #2
   179b8:	bl	120bc <strncmp@plt>
   179bc:	ldr	r1, [pc, #1224]	; 17e8c <get_boolean_op_value@@Base+0x61c>
   179c0:	add	r1, pc, r1
   179c4:	add	r2, r1, #48	; 0x30
   179c8:	add	r1, r1, #56	; 0x38
   179cc:	cmp	r0, #0
   179d0:	str	r2, [fp, #-52]	; 0xffffffcc
   179d4:	str	r1, [fp, #-56]	; 0xffffffc8
   179d8:	bne	17a14 <get_boolean_op_value@@Base+0x1a4>
   179dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   179e0:	ldr	r1, [pc, #1252]	; 17ecc <get_boolean_op_value@@Base+0x65c>
   179e4:	add	r1, pc, r1
   179e8:	add	r1, r1, #64	; 0x40
   179ec:	ldr	r2, [r0]
   179f0:	ldr	r3, [r0, #4]
   179f4:	adds	r2, r2, #1
   179f8:	adc	r3, r3, #0
   179fc:	str	r2, [r0]
   17a00:	str	r3, [r0, #4]
   17a04:	movw	r0, #1
   17a08:	str	r0, [fp, #-4]
   17a0c:	str	r1, [fp, #-48]	; 0xffffffd0
   17a10:	b	17e20 <get_boolean_op_value@@Base+0x5b0>
   17a14:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17a18:	ldr	r1, [pc, #1144]	; 17e98 <get_boolean_op_value@@Base+0x628>
   17a1c:	add	r1, pc, r1
   17a20:	ldr	r2, [r0]
   17a24:	ldr	r3, [r0, #4]
   17a28:	adds	r2, r2, #1
   17a2c:	adc	r3, r3, #0
   17a30:	str	r2, [r0]
   17a34:	str	r3, [r0, #4]
   17a38:	ldr	r0, [fp, #-8]
   17a3c:	ldr	r0, [r0, #4]
   17a40:	movw	r2, #2
   17a44:	bl	120bc <strncmp@plt>
   17a48:	ldr	r1, [pc, #1092]	; 17e94 <get_boolean_op_value@@Base+0x624>
   17a4c:	add	r1, pc, r1
   17a50:	add	r2, r1, #72	; 0x48
   17a54:	add	r1, r1, #80	; 0x50
   17a58:	cmp	r0, #0
   17a5c:	str	r2, [fp, #-60]	; 0xffffffc4
   17a60:	str	r1, [sp, #64]	; 0x40
   17a64:	bne	17aa0 <get_boolean_op_value@@Base+0x230>
   17a68:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17a6c:	ldr	r1, [pc, #1108]	; 17ec8 <get_boolean_op_value@@Base+0x658>
   17a70:	add	r1, pc, r1
   17a74:	add	r1, r1, #88	; 0x58
   17a78:	ldr	r2, [r0]
   17a7c:	ldr	r3, [r0, #4]
   17a80:	adds	r2, r2, #1
   17a84:	adc	r3, r3, #0
   17a88:	str	r2, [r0]
   17a8c:	str	r3, [r0, #4]
   17a90:	movw	r0, #2
   17a94:	str	r0, [fp, #-4]
   17a98:	str	r1, [fp, #-48]	; 0xffffffd0
   17a9c:	b	17e20 <get_boolean_op_value@@Base+0x5b0>
   17aa0:	ldr	r0, [sp, #64]	; 0x40
   17aa4:	ldr	r1, [pc, #1012]	; 17ea0 <get_boolean_op_value@@Base+0x630>
   17aa8:	add	r1, pc, r1
   17aac:	ldr	r2, [r0]
   17ab0:	ldr	r3, [r0, #4]
   17ab4:	adds	r2, r2, #1
   17ab8:	adc	r3, r3, #0
   17abc:	str	r2, [r0]
   17ac0:	str	r3, [r0, #4]
   17ac4:	ldr	r0, [fp, #-8]
   17ac8:	ldr	r0, [r0, #4]
   17acc:	movw	r2, #2
   17ad0:	bl	120bc <strncmp@plt>
   17ad4:	ldr	r1, [pc, #960]	; 17e9c <get_boolean_op_value@@Base+0x62c>
   17ad8:	add	r1, pc, r1
   17adc:	add	r2, r1, #96	; 0x60
   17ae0:	add	r1, r1, #104	; 0x68
   17ae4:	cmp	r0, #0
   17ae8:	str	r2, [sp, #60]	; 0x3c
   17aec:	str	r1, [sp, #56]	; 0x38
   17af0:	bne	17b2c <get_boolean_op_value@@Base+0x2bc>
   17af4:	ldr	r0, [sp, #60]	; 0x3c
   17af8:	ldr	r1, [pc, #964]	; 17ec4 <get_boolean_op_value@@Base+0x654>
   17afc:	add	r1, pc, r1
   17b00:	add	r1, r1, #112	; 0x70
   17b04:	ldr	r2, [r0]
   17b08:	ldr	r3, [r0, #4]
   17b0c:	adds	r2, r2, #1
   17b10:	adc	r3, r3, #0
   17b14:	str	r2, [r0]
   17b18:	str	r3, [r0, #4]
   17b1c:	movw	r0, #3
   17b20:	str	r0, [fp, #-4]
   17b24:	str	r1, [fp, #-48]	; 0xffffffd0
   17b28:	b	17e20 <get_boolean_op_value@@Base+0x5b0>
   17b2c:	ldr	r0, [sp, #56]	; 0x38
   17b30:	ldr	r1, [pc, #880]	; 17ea8 <get_boolean_op_value@@Base+0x638>
   17b34:	add	r1, pc, r1
   17b38:	ldr	r2, [r0]
   17b3c:	ldr	r3, [r0, #4]
   17b40:	adds	r2, r2, #1
   17b44:	adc	r3, r3, #0
   17b48:	str	r2, [r0]
   17b4c:	str	r3, [r0, #4]
   17b50:	ldr	r0, [fp, #-8]
   17b54:	ldr	r0, [r0, #4]
   17b58:	movw	r2, #2
   17b5c:	bl	120bc <strncmp@plt>
   17b60:	ldr	r1, [pc, #828]	; 17ea4 <get_boolean_op_value@@Base+0x634>
   17b64:	add	r1, pc, r1
   17b68:	add	r2, r1, #120	; 0x78
   17b6c:	add	r1, r1, #128	; 0x80
   17b70:	cmp	r0, #0
   17b74:	str	r2, [sp, #52]	; 0x34
   17b78:	str	r1, [sp, #48]	; 0x30
   17b7c:	bne	17bb8 <get_boolean_op_value@@Base+0x348>
   17b80:	ldr	r0, [sp, #52]	; 0x34
   17b84:	ldr	r1, [pc, #820]	; 17ec0 <get_boolean_op_value@@Base+0x650>
   17b88:	add	r1, pc, r1
   17b8c:	add	r1, r1, #136	; 0x88
   17b90:	ldr	r2, [r0]
   17b94:	ldr	r3, [r0, #4]
   17b98:	adds	r2, r2, #1
   17b9c:	adc	r3, r3, #0
   17ba0:	str	r2, [r0]
   17ba4:	str	r3, [r0, #4]
   17ba8:	movw	r0, #4
   17bac:	str	r0, [fp, #-4]
   17bb0:	str	r1, [fp, #-48]	; 0xffffffd0
   17bb4:	b	17e20 <get_boolean_op_value@@Base+0x5b0>
   17bb8:	ldr	r0, [sp, #48]	; 0x30
   17bbc:	ldr	r1, [pc, #748]	; 17eb0 <get_boolean_op_value@@Base+0x640>
   17bc0:	add	r1, pc, r1
   17bc4:	ldr	r2, [r0]
   17bc8:	ldr	r3, [r0, #4]
   17bcc:	adds	r2, r2, #1
   17bd0:	adc	r3, r3, #0
   17bd4:	str	r2, [r0]
   17bd8:	str	r3, [r0, #4]
   17bdc:	ldr	r0, [fp, #-8]
   17be0:	ldr	r0, [r0, #4]
   17be4:	movw	r2, #2
   17be8:	bl	120bc <strncmp@plt>
   17bec:	ldr	r1, [pc, #696]	; 17eac <get_boolean_op_value@@Base+0x63c>
   17bf0:	add	r1, pc, r1
   17bf4:	add	r2, r1, #144	; 0x90
   17bf8:	add	r1, r1, #152	; 0x98
   17bfc:	cmp	r0, #0
   17c00:	str	r2, [sp, #44]	; 0x2c
   17c04:	str	r1, [sp, #40]	; 0x28
   17c08:	bne	17c44 <get_boolean_op_value@@Base+0x3d4>
   17c0c:	ldr	r0, [sp, #44]	; 0x2c
   17c10:	ldr	r1, [pc, #676]	; 17ebc <get_boolean_op_value@@Base+0x64c>
   17c14:	add	r1, pc, r1
   17c18:	add	r1, r1, #160	; 0xa0
   17c1c:	ldr	r2, [r0]
   17c20:	ldr	r3, [r0, #4]
   17c24:	adds	r2, r2, #1
   17c28:	adc	r3, r3, #0
   17c2c:	str	r2, [r0]
   17c30:	str	r3, [r0, #4]
   17c34:	movw	r0, #5
   17c38:	str	r0, [fp, #-4]
   17c3c:	str	r1, [fp, #-48]	; 0xffffffd0
   17c40:	b	17e20 <get_boolean_op_value@@Base+0x5b0>
   17c44:	ldr	r0, [sp, #40]	; 0x28
   17c48:	ldr	r1, [pc, #612]	; 17eb4 <get_boolean_op_value@@Base+0x644>
   17c4c:	add	r1, pc, r1
   17c50:	ldr	r2, [pc, #608]	; 17eb8 <get_boolean_op_value@@Base+0x648>
   17c54:	ldr	r2, [pc, r2]
   17c58:	ldr	r3, [r0]
   17c5c:	ldr	ip, [r0, #4]
   17c60:	adds	r3, r3, #1
   17c64:	adc	ip, ip, #0
   17c68:	str	r3, [r0]
   17c6c:	str	ip, [r0, #4]
   17c70:	ldr	r0, [r2]
   17c74:	ldr	r2, [fp, #-8]
   17c78:	ldr	r2, [r2, #4]
   17c7c:	bl	11ffc <fprintf@plt>
   17c80:	movw	r1, #1
   17c84:	str	r0, [sp, #36]	; 0x24
   17c88:	mov	r0, r1
   17c8c:	bl	11fcc <exit@plt>
   17c90:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17c94:	ldr	r1, [r0]
   17c98:	ldr	r2, [r0, #4]
   17c9c:	adds	r1, r1, #1
   17ca0:	adc	r2, r2, #0
   17ca4:	str	r1, [r0]
   17ca8:	str	r2, [r0, #4]
   17cac:	ldr	r0, [fp, #-8]
   17cb0:	ldr	r0, [r0, #4]
   17cb4:	ldrb	r0, [r0]
   17cb8:	ldr	r1, [pc, #532]	; 17ed4 <get_boolean_op_value@@Base+0x664>
   17cbc:	add	r1, pc, r1
   17cc0:	add	r2, r1, #192	; 0xc0
   17cc4:	add	r3, r1, #184	; 0xb8
   17cc8:	add	ip, r1, #176	; 0xb0
   17ccc:	add	r1, r1, #168	; 0xa8
   17cd0:	mov	lr, r0
   17cd4:	cmp	r0, #33	; 0x21
   17cd8:	str	r2, [sp, #32]
   17cdc:	str	r3, [sp, #28]
   17ce0:	str	r1, [sp, #24]
   17ce4:	str	lr, [sp, #20]
   17ce8:	str	ip, [sp, #16]
   17cec:	beq	17d2c <get_boolean_op_value@@Base+0x4bc>
   17cf0:	b	17cf4 <get_boolean_op_value@@Base+0x484>
   17cf4:	ldr	r0, [sp, #20]
   17cf8:	cmp	r0, #60	; 0x3c
   17cfc:	ldr	r1, [sp, #28]
   17d00:	str	r1, [sp, #12]
   17d04:	beq	17d64 <get_boolean_op_value@@Base+0x4f4>
   17d08:	b	17d0c <get_boolean_op_value@@Base+0x49c>
   17d0c:	ldr	r0, [sp, #20]
   17d10:	cmp	r0, #62	; 0x3e
   17d14:	ldr	r1, [sp, #32]
   17d18:	ldr	r2, [sp, #24]
   17d1c:	str	r1, [sp, #8]
   17d20:	str	r2, [sp, #4]
   17d24:	beq	17d9c <get_boolean_op_value@@Base+0x52c>
   17d28:	b	17dd4 <get_boolean_op_value@@Base+0x564>
   17d2c:	ldr	r0, [sp, #16]
   17d30:	ldr	r1, [pc, #320]	; 17e78 <get_boolean_op_value@@Base+0x608>
   17d34:	add	r1, pc, r1
   17d38:	add	r1, r1, #200	; 0xc8
   17d3c:	ldr	r2, [r0]
   17d40:	ldr	r3, [r0, #4]
   17d44:	adds	r2, r2, #1
   17d48:	adc	r3, r3, #0
   17d4c:	str	r2, [r0]
   17d50:	str	r3, [r0, #4]
   17d54:	movw	r0, #8
   17d58:	str	r0, [fp, #-4]
   17d5c:	str	r1, [fp, #-48]	; 0xffffffd0
   17d60:	b	17e20 <get_boolean_op_value@@Base+0x5b0>
   17d64:	ldr	r0, [sp, #12]
   17d68:	ldr	r1, [pc, #260]	; 17e74 <get_boolean_op_value@@Base+0x604>
   17d6c:	add	r1, pc, r1
   17d70:	add	r1, r1, #208	; 0xd0
   17d74:	ldr	r2, [r0]
   17d78:	ldr	r3, [r0, #4]
   17d7c:	adds	r2, r2, #1
   17d80:	adc	r3, r3, #0
   17d84:	str	r2, [r0]
   17d88:	str	r3, [r0, #4]
   17d8c:	movw	r0, #6
   17d90:	str	r0, [fp, #-4]
   17d94:	str	r1, [fp, #-48]	; 0xffffffd0
   17d98:	b	17e20 <get_boolean_op_value@@Base+0x5b0>
   17d9c:	ldr	r0, [sp, #8]
   17da0:	ldr	r1, [pc, #200]	; 17e70 <get_boolean_op_value@@Base+0x600>
   17da4:	add	r1, pc, r1
   17da8:	add	r1, r1, #216	; 0xd8
   17dac:	ldr	r2, [r0]
   17db0:	ldr	r3, [r0, #4]
   17db4:	adds	r2, r2, #1
   17db8:	adc	r3, r3, #0
   17dbc:	str	r2, [r0]
   17dc0:	str	r3, [r0, #4]
   17dc4:	movw	r0, #7
   17dc8:	str	r0, [fp, #-4]
   17dcc:	str	r1, [fp, #-48]	; 0xffffffd0
   17dd0:	b	17e20 <get_boolean_op_value@@Base+0x5b0>
   17dd4:	ldr	r0, [sp, #4]
   17dd8:	ldr	r1, [pc, #156]	; 17e7c <get_boolean_op_value@@Base+0x60c>
   17ddc:	add	r1, pc, r1
   17de0:	ldr	r2, [pc, #152]	; 17e80 <get_boolean_op_value@@Base+0x610>
   17de4:	ldr	r2, [pc, r2]
   17de8:	ldr	r3, [r0]
   17dec:	ldr	ip, [r0, #4]
   17df0:	adds	r3, r3, #1
   17df4:	adc	ip, ip, #0
   17df8:	str	r3, [r0]
   17dfc:	str	ip, [r0, #4]
   17e00:	ldr	r0, [r2]
   17e04:	ldr	r2, [fp, #-8]
   17e08:	ldr	r2, [r2, #4]
   17e0c:	bl	11ffc <fprintf@plt>
   17e10:	movw	r1, #1
   17e14:	str	r0, [sp]
   17e18:	mov	r0, r1
   17e1c:	bl	11fcc <exit@plt>
   17e20:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17e24:	ldr	r1, [r0]
   17e28:	ldr	r2, [r0, #4]
   17e2c:	adds	r1, r1, #1
   17e30:	adc	r2, r2, #0
   17e34:	str	r1, [r0]
   17e38:	str	r2, [r0, #4]
   17e3c:	ldr	r0, [pc, #148]	; 17ed8 <get_boolean_op_value@@Base+0x668>
   17e40:	add	r0, pc, r0
   17e44:	ldr	r1, [r0, #224]	; 0xe0
   17e48:	ldr	r2, [r0, #228]	; 0xe4
   17e4c:	adds	r1, r1, #1
   17e50:	adc	r2, r2, #0
   17e54:	str	r1, [r0, #224]	; 0xe0
   17e58:	str	r2, [r0, #228]	; 0xe4
   17e5c:	ldr	r0, [fp, #-4]
   17e60:	mov	sp, fp
   17e64:	pop	{fp, pc}
   17e68:	andeq	sl, r1, r8, ror #4
   17e6c:	andeq	sl, r1, r4, asr r2
   17e70:	andeq	r9, r1, r4, asr #26
   17e74:	andeq	r9, r1, ip, ror sp
   17e78:			; <UNDEFINED> instruction: 0x00019db4
   17e7c:	andeq	r7, r0, r2, ror r1
   17e80:	ldrdeq	r9, [r1], -r8
   17e84:			; <UNDEFINED> instruction: 0x0001a1b4
   17e88:	andeq	r7, r0, r8, lsr r6
   17e8c:	andeq	sl, r1, r8, lsr #2
   17e90:	andeq	r7, r0, pc, lsr #11
   17e94:	muleq	r1, ip, r0
   17e98:	andeq	r7, r0, r6, lsr #10
   17e9c:	andeq	sl, r1, r0, lsl r0
   17ea0:	muleq	r0, sp, r4
   17ea4:	andeq	r9, r1, r4, lsl #31
   17ea8:	andeq	r7, r0, r4, lsl r4
   17eac:	strdeq	r9, [r1], -r8
   17eb0:	andeq	r7, r0, fp, lsl #7
   17eb4:	andeq	r7, r0, r2, lsl #6
   17eb8:	andeq	r9, r1, r8, ror #8
   17ebc:	ldrdeq	r9, [r1], -r4
   17ec0:	andeq	r9, r1, r0, ror #30
   17ec4:	andeq	r9, r1, ip, ror #31
   17ec8:	andeq	sl, r1, r8, ror r0
   17ecc:	andeq	sl, r1, r4, lsl #2
   17ed0:	muleq	r1, r0, r1
   17ed4:	andeq	r9, r1, ip, lsr #28
   17ed8:	andeq	r9, r1, r8, lsr #25
   17edc:	push	{r4, sl, fp, lr}
   17ee0:	add	fp, sp, #8
   17ee4:	sub	sp, sp, #40	; 0x28
   17ee8:	movw	r0, #0
   17eec:	str	r0, [fp, #-12]
   17ef0:	b	17ef4 <get_boolean_op_value@@Base+0x684>
   17ef4:	ldr	r0, [fp, #-12]
   17ef8:	ldr	r1, [pc, #244]	; 17ff4 <get_boolean_op_value@@Base+0x784>
   17efc:	add	r1, pc, r1
   17f00:	movw	r2, #24
   17f04:	mul	r2, r0, r2
   17f08:	add	r1, r1, r2
   17f0c:	ldr	r2, [r1]
   17f10:	ldr	r3, [r1, #4]
   17f14:	ldr	ip, [r1, #8]
   17f18:	str	r0, [fp, #-16]
   17f1c:	mov	r0, r2
   17f20:	str	r1, [fp, #-20]	; 0xffffffec
   17f24:	mov	r1, r3
   17f28:	mov	r2, ip
   17f2c:	bl	1ba6c <__generate_code_for_binary_boolean_expression@@Base+0x994>
   17f30:	ldr	r0, [fp, #-20]	; 0xffffffec
   17f34:	ldr	r1, [r0, #12]
   17f38:	ldr	r2, [r0, #16]
   17f3c:	ldr	r3, [r0, #20]
   17f40:	movw	ip, #0
   17f44:	cmp	ip, r1
   17f48:	str	r1, [sp, #24]
   17f4c:	str	r2, [sp, #20]
   17f50:	str	r3, [sp, #16]
   17f54:	str	ip, [sp, #12]
   17f58:	bge	17fd0 <get_boolean_op_value@@Base+0x760>
   17f5c:	ldr	r0, [sp, #12]
   17f60:	add	r1, r0, r0, lsl #2
   17f64:	ldr	r2, [sp, #20]
   17f68:	ldr	r1, [r2, r1, lsl #2]!
   17f6c:	ldr	r3, [r2, #4]
   17f70:	ldr	ip, [r2, #8]
   17f74:	ldr	lr, [r2, #16]
   17f78:	ldrb	r2, [r2, #12]
   17f7c:	mov	r4, sp
   17f80:	str	lr, [r4]
   17f84:	str	r0, [sp, #8]
   17f88:	mov	r0, r1
   17f8c:	mov	r1, r3
   17f90:	str	r2, [sp, #4]
   17f94:	mov	r2, ip
   17f98:	ldr	r3, [sp, #4]
   17f9c:	bl	1c18c <__generate_code_for_binary_boolean_expression@@Base+0x10b4>
   17fa0:	ldr	r0, [sp, #16]
   17fa4:	ldr	r1, [sp, #8]
   17fa8:	add	r2, r0, r1, lsl #3
   17fac:	ldr	r0, [r2]
   17fb0:	ldr	r1, [r2, #4]
   17fb4:	bl	1ca40 <__generate_code_for_binary_boolean_expression@@Base+0x1968>
   17fb8:	ldr	r0, [sp, #8]
   17fbc:	add	r1, r0, #1
   17fc0:	ldr	r2, [sp, #24]
   17fc4:	cmp	r1, r2
   17fc8:	str	r1, [sp, #12]
   17fcc:	blt	17f5c <get_boolean_op_value@@Base+0x6ec>
   17fd0:	bl	1d1c8 <__generate_code_for_binary_boolean_expression@@Base+0x20f0>
   17fd4:	bl	1df34 <__generate_code_for_binary_boolean_expression@@Base+0x2e5c>
   17fd8:	ldr	r0, [fp, #-16]
   17fdc:	add	r1, r0, #1
   17fe0:	cmp	r1, #1
   17fe4:	str	r1, [fp, #-12]
   17fe8:	blt	17ef4 <get_boolean_op_value@@Base+0x684>
   17fec:	sub	sp, fp, #8
   17ff0:	pop	{r4, sl, fp, pc}
   17ff4:	andeq	r8, r1, ip, ror #25
   17ff8:	push	{fp, lr}
   17ffc:	mov	fp, sp
   18000:	bl	17edc <get_boolean_op_value@@Base+0x66c>
   18004:	ldr	r0, [pc, #848]	; 1835c <get_boolean_op_value@@Base+0xaec>
   18008:	add	r0, pc, r0
   1800c:	mov	r1, #0
   18010:	str	r1, [r0, #12]
   18014:	str	r1, [r0, #8]
   18018:	str	r1, [r0, #4]
   1801c:	str	r1, [r0]
   18020:	ldr	r0, [pc, #824]	; 18360 <get_boolean_op_value@@Base+0xaf0>
   18024:	add	r0, pc, r0
   18028:	str	r1, [r0, #12]
   1802c:	str	r1, [r0, #8]
   18030:	str	r1, [r0, #4]
   18034:	str	r1, [r0]
   18038:	ldr	r0, [pc, #804]	; 18364 <get_boolean_op_value@@Base+0xaf4>
   1803c:	add	r0, pc, r0
   18040:	str	r1, [r0, #12]
   18044:	str	r1, [r0, #8]
   18048:	str	r1, [r0, #4]
   1804c:	str	r1, [r0]
   18050:	ldr	r0, [pc, #784]	; 18368 <get_boolean_op_value@@Base+0xaf8>
   18054:	add	r0, pc, r0
   18058:	str	r1, [r0, #12]
   1805c:	str	r1, [r0, #8]
   18060:	str	r1, [r0, #4]
   18064:	str	r1, [r0]
   18068:	ldr	r0, [pc, #764]	; 1836c <get_boolean_op_value@@Base+0xafc>
   1806c:	add	r0, pc, r0
   18070:	str	r1, [r0, #12]
   18074:	str	r1, [r0, #8]
   18078:	str	r1, [r0, #4]
   1807c:	str	r1, [r0]
   18080:	ldr	r0, [pc, #744]	; 18370 <get_boolean_op_value@@Base+0xb00>
   18084:	add	r0, pc, r0
   18088:	str	r1, [r0, #12]
   1808c:	str	r1, [r0, #8]
   18090:	str	r1, [r0, #4]
   18094:	str	r1, [r0]
   18098:	ldr	r0, [pc, #724]	; 18374 <get_boolean_op_value@@Base+0xb04>
   1809c:	add	r0, pc, r0
   180a0:	str	r1, [r0, #12]
   180a4:	str	r1, [r0, #8]
   180a8:	str	r1, [r0, #4]
   180ac:	str	r1, [r0]
   180b0:	ldr	r0, [pc, #704]	; 18378 <get_boolean_op_value@@Base+0xb08>
   180b4:	add	r0, pc, r0
   180b8:	str	r1, [r0, #12]
   180bc:	str	r1, [r0, #8]
   180c0:	str	r1, [r0, #4]
   180c4:	str	r1, [r0]
   180c8:	ldr	r0, [pc, #684]	; 1837c <get_boolean_op_value@@Base+0xb0c>
   180cc:	add	r0, pc, r0
   180d0:	str	r1, [r0, #116]	; 0x74
   180d4:	str	r1, [r0, #112]	; 0x70
   180d8:	str	r1, [r0, #108]	; 0x6c
   180dc:	str	r1, [r0, #104]	; 0x68
   180e0:	str	r1, [r0, #100]	; 0x64
   180e4:	str	r1, [r0, #96]	; 0x60
   180e8:	str	r1, [r0, #92]	; 0x5c
   180ec:	str	r1, [r0, #88]	; 0x58
   180f0:	str	r1, [r0, #84]	; 0x54
   180f4:	str	r1, [r0, #80]	; 0x50
   180f8:	str	r1, [r0, #76]	; 0x4c
   180fc:	str	r1, [r0, #72]	; 0x48
   18100:	str	r1, [r0, #68]	; 0x44
   18104:	str	r1, [r0, #64]	; 0x40
   18108:	str	r1, [r0, #60]	; 0x3c
   1810c:	str	r1, [r0, #56]	; 0x38
   18110:	str	r1, [r0, #52]	; 0x34
   18114:	str	r1, [r0, #48]	; 0x30
   18118:	str	r1, [r0, #44]	; 0x2c
   1811c:	str	r1, [r0, #40]	; 0x28
   18120:	str	r1, [r0, #36]	; 0x24
   18124:	str	r1, [r0, #32]
   18128:	str	r1, [r0, #28]
   1812c:	str	r1, [r0, #24]
   18130:	str	r1, [r0, #20]
   18134:	str	r1, [r0, #16]
   18138:	str	r1, [r0, #12]
   1813c:	str	r1, [r0, #8]
   18140:	str	r1, [r0, #4]
   18144:	str	r1, [r0]
   18148:	ldr	r0, [pc, #560]	; 18380 <get_boolean_op_value@@Base+0xb10>
   1814c:	add	r0, pc, r0
   18150:	str	r1, [r0, #36]	; 0x24
   18154:	str	r1, [r0, #32]
   18158:	str	r1, [r0, #28]
   1815c:	str	r1, [r0, #24]
   18160:	str	r1, [r0, #20]
   18164:	str	r1, [r0, #16]
   18168:	str	r1, [r0, #12]
   1816c:	str	r1, [r0, #8]
   18170:	str	r1, [r0, #4]
   18174:	str	r1, [r0]
   18178:	ldr	r0, [pc, #516]	; 18384 <get_boolean_op_value@@Base+0xb14>
   1817c:	add	r0, pc, r0
   18180:	str	r1, [r0, #36]	; 0x24
   18184:	str	r1, [r0, #32]
   18188:	str	r1, [r0, #28]
   1818c:	str	r1, [r0, #24]
   18190:	str	r1, [r0, #20]
   18194:	str	r1, [r0, #16]
   18198:	str	r1, [r0, #12]
   1819c:	str	r1, [r0, #8]
   181a0:	str	r1, [r0, #4]
   181a4:	str	r1, [r0]
   181a8:	ldr	r0, [pc, #472]	; 18388 <get_boolean_op_value@@Base+0xb18>
   181ac:	add	r0, pc, r0
   181b0:	str	r1, [r0, #36]	; 0x24
   181b4:	str	r1, [r0, #32]
   181b8:	str	r1, [r0, #28]
   181bc:	str	r1, [r0, #24]
   181c0:	str	r1, [r0, #20]
   181c4:	str	r1, [r0, #16]
   181c8:	str	r1, [r0, #12]
   181cc:	str	r1, [r0, #8]
   181d0:	str	r1, [r0, #4]
   181d4:	str	r1, [r0]
   181d8:	ldr	r0, [pc, #428]	; 1838c <get_boolean_op_value@@Base+0xb1c>
   181dc:	add	r0, pc, r0
   181e0:	str	r1, [r0, #36]	; 0x24
   181e4:	str	r1, [r0, #32]
   181e8:	str	r1, [r0, #28]
   181ec:	str	r1, [r0, #24]
   181f0:	str	r1, [r0, #20]
   181f4:	str	r1, [r0, #16]
   181f8:	str	r1, [r0, #12]
   181fc:	str	r1, [r0, #8]
   18200:	str	r1, [r0, #4]
   18204:	str	r1, [r0]
   18208:	ldr	r0, [pc, #384]	; 18390 <get_boolean_op_value@@Base+0xb20>
   1820c:	add	r0, pc, r0
   18210:	str	r1, [r0, #36]	; 0x24
   18214:	str	r1, [r0, #32]
   18218:	str	r1, [r0, #28]
   1821c:	str	r1, [r0, #24]
   18220:	str	r1, [r0, #20]
   18224:	str	r1, [r0, #16]
   18228:	str	r1, [r0, #12]
   1822c:	str	r1, [r0, #8]
   18230:	str	r1, [r0, #4]
   18234:	str	r1, [r0]
   18238:	ldr	r0, [pc, #340]	; 18394 <get_boolean_op_value@@Base+0xb24>
   1823c:	add	r0, pc, r0
   18240:	str	r1, [r0, #36]	; 0x24
   18244:	str	r1, [r0, #32]
   18248:	str	r1, [r0, #28]
   1824c:	str	r1, [r0, #24]
   18250:	str	r1, [r0, #20]
   18254:	str	r1, [r0, #16]
   18258:	str	r1, [r0, #12]
   1825c:	str	r1, [r0, #8]
   18260:	str	r1, [r0, #4]
   18264:	str	r1, [r0]
   18268:	ldr	r0, [pc, #296]	; 18398 <get_boolean_op_value@@Base+0xb28>
   1826c:	add	r0, pc, r0
   18270:	str	r1, [r0, #228]	; 0xe4
   18274:	str	r1, [r0, #224]	; 0xe0
   18278:	str	r1, [r0, #220]	; 0xdc
   1827c:	str	r1, [r0, #216]	; 0xd8
   18280:	str	r1, [r0, #212]	; 0xd4
   18284:	str	r1, [r0, #208]	; 0xd0
   18288:	str	r1, [r0, #204]	; 0xcc
   1828c:	str	r1, [r0, #200]	; 0xc8
   18290:	str	r1, [r0, #196]	; 0xc4
   18294:	str	r1, [r0, #192]	; 0xc0
   18298:	str	r1, [r0, #188]	; 0xbc
   1829c:	str	r1, [r0, #184]	; 0xb8
   182a0:	str	r1, [r0, #180]	; 0xb4
   182a4:	str	r1, [r0, #176]	; 0xb0
   182a8:	str	r1, [r0, #172]	; 0xac
   182ac:	str	r1, [r0, #168]	; 0xa8
   182b0:	str	r1, [r0, #164]	; 0xa4
   182b4:	str	r1, [r0, #160]	; 0xa0
   182b8:	str	r1, [r0, #156]	; 0x9c
   182bc:	str	r1, [r0, #152]	; 0x98
   182c0:	str	r1, [r0, #148]	; 0x94
   182c4:	str	r1, [r0, #144]	; 0x90
   182c8:	str	r1, [r0, #140]	; 0x8c
   182cc:	str	r1, [r0, #136]	; 0x88
   182d0:	str	r1, [r0, #132]	; 0x84
   182d4:	str	r1, [r0, #128]	; 0x80
   182d8:	str	r1, [r0, #124]	; 0x7c
   182dc:	str	r1, [r0, #120]	; 0x78
   182e0:	str	r1, [r0, #116]	; 0x74
   182e4:	str	r1, [r0, #112]	; 0x70
   182e8:	str	r1, [r0, #108]	; 0x6c
   182ec:	str	r1, [r0, #104]	; 0x68
   182f0:	str	r1, [r0, #100]	; 0x64
   182f4:	str	r1, [r0, #96]	; 0x60
   182f8:	str	r1, [r0, #92]	; 0x5c
   182fc:	str	r1, [r0, #88]	; 0x58
   18300:	str	r1, [r0, #84]	; 0x54
   18304:	str	r1, [r0, #80]	; 0x50
   18308:	str	r1, [r0, #76]	; 0x4c
   1830c:	str	r1, [r0, #72]	; 0x48
   18310:	str	r1, [r0, #68]	; 0x44
   18314:	str	r1, [r0, #64]	; 0x40
   18318:	str	r1, [r0, #60]	; 0x3c
   1831c:	str	r1, [r0, #56]	; 0x38
   18320:	str	r1, [r0, #52]	; 0x34
   18324:	str	r1, [r0, #48]	; 0x30
   18328:	str	r1, [r0, #44]	; 0x2c
   1832c:	str	r1, [r0, #40]	; 0x28
   18330:	str	r1, [r0, #36]	; 0x24
   18334:	str	r1, [r0, #32]
   18338:	str	r1, [r0, #28]
   1833c:	str	r1, [r0, #24]
   18340:	str	r1, [r0, #20]
   18344:	str	r1, [r0, #16]
   18348:	str	r1, [r0, #12]
   1834c:	str	r1, [r0, #8]
   18350:	str	r1, [r0, #4]
   18354:	str	r1, [r0]
   18358:	pop	{fp, pc}
   1835c:	andeq	r9, r1, r0, asr #17
   18360:			; <UNDEFINED> instruction: 0x000198b4
   18364:	andeq	r9, r1, ip, lsr #17
   18368:	andeq	r9, r1, r4, lsr #17
   1836c:	muleq	r1, ip, r8
   18370:	muleq	r1, r4, r8
   18374:	andeq	r9, r1, ip, lsl #17
   18378:	andeq	r9, r1, r4, lsl #17
   1837c:	andeq	r9, r1, ip, ror r8
   18380:	andeq	r9, r1, ip, ror r8
   18384:	andeq	r9, r1, ip, ror r8
   18388:	andeq	r9, r1, ip, ror r8
   1838c:	andeq	r9, r1, ip, ror r8
   18390:	andeq	r9, r1, ip, ror r8
   18394:	andeq	r9, r1, ip, ror r8
   18398:	andeq	r9, r1, ip, ror r8
   1839c:	push	{fp, lr}
   183a0:	mov	fp, sp
   183a4:	ldr	r0, [pc, #16]	; 183bc <get_boolean_op_value@@Base+0xb4c>
   183a8:	add	r0, pc, r0
   183ac:	ldr	r1, [pc, #12]	; 183c0 <get_boolean_op_value@@Base+0xb50>
   183b0:	add	r1, pc, r1
   183b4:	bl	1e3e8 <__gcov_flush@@Base+0xb8>
   183b8:	pop	{fp, pc}
   183bc:			; <UNDEFINED> instruction: 0xfffffb2c
   183c0:			; <UNDEFINED> instruction: 0xfffffc40

000183c4 <init_grammar@@Base>:
   183c4:	sub	sp, sp, #20
   183c8:	ldr	r2, [pc, #108]	; 1843c <init_grammar@@Base+0x78>
   183cc:	add	r2, pc, r2
   183d0:	str	r0, [sp, #8]
   183d4:	str	r1, [sp, #4]
   183d8:	str	r2, [sp]
   183dc:	ldr	r0, [sp]
   183e0:	ldr	r1, [r0]
   183e4:	ldr	r2, [r0, #4]
   183e8:	adds	r1, r1, #1
   183ec:	adc	r2, r2, #0
   183f0:	str	r1, [r0]
   183f4:	str	r2, [r0, #4]
   183f8:	ldr	r0, [pc, #64]	; 18440 <init_grammar@@Base+0x7c>
   183fc:	add	r0, pc, r0
   18400:	ldr	r1, [r0, #8]
   18404:	ldr	r2, [r0, #12]
   18408:	adds	r1, r1, #1
   1840c:	adc	r2, r2, #0
   18410:	str	r1, [r0, #8]
   18414:	str	r2, [r0, #12]
   18418:	ldr	r0, [sp, #8]
   1841c:	str	r0, [sp, #16]
   18420:	ldr	r1, [sp, #4]
   18424:	str	r1, [sp, #12]
   18428:	ldr	r2, [sp, #12]
   1842c:	ldr	r3, [sp, #16]
   18430:	str	r2, [r3]
   18434:	add	sp, sp, #20
   18438:	bx	lr
   1843c:	andeq	r9, r1, ip, lsl #16
   18440:	ldrdeq	r9, [r1], -ip

00018444 <destroy_grammar@@Base>:
   18444:	sub	sp, sp, #12
   18448:	ldr	r1, [pc, #84]	; 184a4 <destroy_grammar@@Base+0x60>
   1844c:	add	r1, pc, r1
   18450:	str	r0, [sp, #4]
   18454:	str	r1, [sp]
   18458:	ldr	r0, [sp]
   1845c:	ldr	r1, [r0]
   18460:	ldr	r2, [r0, #4]
   18464:	adds	r1, r1, #1
   18468:	adc	r2, r2, #0
   1846c:	str	r1, [r0]
   18470:	str	r2, [r0, #4]
   18474:	ldr	r0, [pc, #44]	; 184a8 <destroy_grammar@@Base+0x64>
   18478:	add	r0, pc, r0
   1847c:	ldr	r1, [r0, #8]
   18480:	ldr	r2, [r0, #12]
   18484:	adds	r1, r1, #1
   18488:	adc	r2, r2, #0
   1848c:	str	r1, [r0, #8]
   18490:	str	r2, [r0, #12]
   18494:	ldr	r0, [sp, #4]
   18498:	str	r0, [sp, #8]
   1849c:	add	sp, sp, #12
   184a0:	bx	lr
   184a4:	muleq	r1, ip, r7
   184a8:	andeq	r9, r1, r0, ror r7

000184ac <build_ast@@Base>:
   184ac:	push	{fp, lr}
   184b0:	mov	fp, sp
   184b4:	sub	sp, sp, #16
   184b8:	ldr	r1, [pc, #92]	; 1851c <build_ast@@Base+0x70>
   184bc:	add	r1, pc, r1
   184c0:	str	r0, [sp, #8]
   184c4:	str	r1, [sp, #4]
   184c8:	ldr	r0, [sp, #4]
   184cc:	ldr	r1, [r0]
   184d0:	ldr	r2, [r0, #4]
   184d4:	adds	r1, r1, #1
   184d8:	adc	r2, r2, #0
   184dc:	str	r1, [r0]
   184e0:	str	r2, [r0, #4]
   184e4:	ldr	r0, [pc, #52]	; 18520 <build_ast@@Base+0x74>
   184e8:	add	r0, pc, r0
   184ec:	ldr	r1, [r0, #8]
   184f0:	ldr	r2, [r0, #12]
   184f4:	adds	r1, r1, #1
   184f8:	adc	r2, r2, #0
   184fc:	str	r1, [r0, #8]
   18500:	str	r2, [r0, #12]
   18504:	ldr	r0, [sp, #8]
   18508:	str	r0, [fp, #-4]
   1850c:	ldr	r0, [fp, #-4]
   18510:	bl	18524 <read_function_ast_node@@Base>
   18514:	mov	sp, fp
   18518:	pop	{fp, pc}
   1851c:	andeq	r9, r1, ip, lsr r7
   18520:	andeq	r9, r1, r0, lsl r7

00018524 <read_function_ast_node@@Base>:
   18524:	push	{fp, lr}
   18528:	mov	fp, sp
   1852c:	sub	sp, sp, #72	; 0x48
   18530:	ldr	r1, [pc, #804]	; 1885c <read_function_ast_node@@Base+0x338>
   18534:	add	r1, pc, r1
   18538:	str	r0, [fp, #-28]	; 0xffffffe4
   1853c:	str	r1, [fp, #-32]	; 0xffffffe0
   18540:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18544:	ldr	r1, [r0]
   18548:	ldr	r2, [r0, #4]
   1854c:	adds	r1, r1, #1
   18550:	adc	r2, r2, #0
   18554:	str	r1, [r0]
   18558:	str	r2, [r0, #4]
   1855c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18560:	str	r0, [fp, #-8]
   18564:	movw	r1, #0
   18568:	str	r1, [fp, #-12]
   1856c:	str	r1, [fp, #-16]
   18570:	str	r1, [fp, #-20]	; 0xffffffec
   18574:	str	r1, [fp, #-24]	; 0xffffffe8
   18578:	ldr	r1, [fp, #-8]
   1857c:	ldr	r0, [r1]
   18580:	bl	142a8 <next@@Base>
   18584:	ldr	r1, [pc, #724]	; 18860 <read_function_ast_node@@Base+0x33c>
   18588:	add	r1, pc, r1
   1858c:	add	r2, r1, #8
   18590:	add	r1, r1, #16
   18594:	str	r0, [fp, #-20]	; 0xffffffec
   18598:	ldr	r0, [fp, #-20]	; 0xffffffec
   1859c:	ldr	r0, [r0]
   185a0:	cmp	r0, #0
   185a4:	str	r2, [sp, #36]	; 0x24
   185a8:	str	r1, [sp, #32]
   185ac:	beq	185e8 <read_function_ast_node@@Base+0xc4>
   185b0:	ldr	r0, [sp, #36]	; 0x24
   185b4:	ldr	r1, [pc, #708]	; 18880 <read_function_ast_node@@Base+0x35c>
   185b8:	add	r1, pc, r1
   185bc:	add	r1, r1, #24
   185c0:	ldr	r2, [r0]
   185c4:	ldr	r3, [r0, #4]
   185c8:	adds	r2, r2, #1
   185cc:	adc	r3, r3, #0
   185d0:	str	r2, [r0]
   185d4:	str	r3, [r0, #4]
   185d8:	movw	r0, #0
   185dc:	str	r0, [fp, #-4]
   185e0:	str	r1, [sp, #28]
   185e4:	b	18814 <read_function_ast_node@@Base+0x2f0>
   185e8:	ldr	r0, [sp, #32]
   185ec:	ldr	r1, [r0]
   185f0:	ldr	r2, [r0, #4]
   185f4:	adds	r1, r1, #1
   185f8:	adc	r2, r2, #0
   185fc:	str	r1, [r0]
   18600:	str	r2, [r0, #4]
   18604:	ldr	r0, [fp, #-20]	; 0xffffffec
   18608:	bl	1325c <free_token_int_type@@Base>
   1860c:	ldr	r0, [fp, #-8]
   18610:	ldr	r0, [r0]
   18614:	bl	142a8 <next@@Base>
   18618:	ldr	r1, [pc, #580]	; 18864 <read_function_ast_node@@Base+0x340>
   1861c:	add	r1, pc, r1
   18620:	add	r2, r1, #32
   18624:	add	r1, r1, #40	; 0x28
   18628:	str	r0, [fp, #-20]	; 0xffffffec
   1862c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18630:	ldr	r0, [r0]
   18634:	cmp	r0, #2
   18638:	str	r2, [sp, #24]
   1863c:	str	r1, [sp, #20]
   18640:	beq	1867c <read_function_ast_node@@Base+0x158>
   18644:	ldr	r0, [sp, #24]
   18648:	ldr	r1, [pc, #556]	; 1887c <read_function_ast_node@@Base+0x358>
   1864c:	add	r1, pc, r1
   18650:	add	r1, r1, #48	; 0x30
   18654:	ldr	r2, [r0]
   18658:	ldr	r3, [r0, #4]
   1865c:	adds	r2, r2, #1
   18660:	adc	r3, r3, #0
   18664:	str	r2, [r0]
   18668:	str	r3, [r0, #4]
   1866c:	movw	r0, #0
   18670:	str	r0, [fp, #-4]
   18674:	str	r1, [sp, #28]
   18678:	b	18814 <read_function_ast_node@@Base+0x2f0>
   1867c:	ldr	r0, [sp, #20]
   18680:	ldr	r1, [r0]
   18684:	ldr	r2, [r0, #4]
   18688:	adds	r1, r1, #1
   1868c:	adc	r2, r2, #0
   18690:	str	r1, [r0]
   18694:	str	r2, [r0, #4]
   18698:	ldr	r0, [fp, #-20]	; 0xffffffec
   1869c:	str	r0, [fp, #-24]	; 0xffffffe8
   186a0:	ldr	r0, [fp, #-8]
   186a4:	ldr	r0, [r0]
   186a8:	bl	142a8 <next@@Base>
   186ac:	ldr	r1, [pc, #436]	; 18868 <read_function_ast_node@@Base+0x344>
   186b0:	add	r1, pc, r1
   186b4:	add	r2, r1, #56	; 0x38
   186b8:	add	r1, r1, #64	; 0x40
   186bc:	str	r0, [fp, #-20]	; 0xffffffec
   186c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   186c4:	ldr	r0, [r0]
   186c8:	cmp	r0, #3
   186cc:	str	r2, [sp, #16]
   186d0:	str	r1, [sp, #12]
   186d4:	beq	18710 <read_function_ast_node@@Base+0x1ec>
   186d8:	ldr	r0, [sp, #16]
   186dc:	ldr	r1, [pc, #404]	; 18878 <read_function_ast_node@@Base+0x354>
   186e0:	add	r1, pc, r1
   186e4:	add	r1, r1, #72	; 0x48
   186e8:	ldr	r2, [r0]
   186ec:	ldr	r3, [r0, #4]
   186f0:	adds	r2, r2, #1
   186f4:	adc	r3, r3, #0
   186f8:	str	r2, [r0]
   186fc:	str	r3, [r0, #4]
   18700:	movw	r0, #0
   18704:	str	r0, [fp, #-4]
   18708:	str	r1, [sp, #28]
   1870c:	b	18814 <read_function_ast_node@@Base+0x2f0>
   18710:	ldr	r0, [sp, #12]
   18714:	ldr	r1, [r0]
   18718:	ldr	r2, [r0, #4]
   1871c:	adds	r1, r1, #1
   18720:	adc	r2, r2, #0
   18724:	str	r1, [r0]
   18728:	str	r2, [r0, #4]
   1872c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18730:	bl	133d0 <free_token_opar@@Base>
   18734:	ldr	r0, [fp, #-8]
   18738:	ldr	r0, [r0]
   1873c:	bl	142a8 <next@@Base>
   18740:	ldr	r1, [pc, #292]	; 1886c <read_function_ast_node@@Base+0x348>
   18744:	add	r1, pc, r1
   18748:	add	r2, r1, #80	; 0x50
   1874c:	add	r1, r1, #88	; 0x58
   18750:	str	r0, [fp, #-20]	; 0xffffffec
   18754:	ldr	r0, [fp, #-20]	; 0xffffffec
   18758:	ldr	r0, [r0]
   1875c:	cmp	r0, #4
   18760:	str	r2, [sp, #8]
   18764:	str	r1, [sp, #4]
   18768:	beq	187a4 <read_function_ast_node@@Base+0x280>
   1876c:	ldr	r0, [sp, #8]
   18770:	ldr	r1, [pc, #252]	; 18874 <read_function_ast_node@@Base+0x350>
   18774:	add	r1, pc, r1
   18778:	add	r1, r1, #96	; 0x60
   1877c:	ldr	r2, [r0]
   18780:	ldr	r3, [r0, #4]
   18784:	adds	r2, r2, #1
   18788:	adc	r3, r3, #0
   1878c:	str	r2, [r0]
   18790:	str	r3, [r0, #4]
   18794:	movw	r0, #0
   18798:	str	r0, [fp, #-4]
   1879c:	str	r1, [sp, #28]
   187a0:	b	18814 <read_function_ast_node@@Base+0x2f0>
   187a4:	ldr	r0, [sp, #4]
   187a8:	ldr	r1, [r0]
   187ac:	ldr	r2, [r0, #4]
   187b0:	adds	r1, r1, #1
   187b4:	adc	r2, r2, #0
   187b8:	str	r1, [r0]
   187bc:	str	r2, [r0, #4]
   187c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   187c4:	bl	1344c <free_token_cpar@@Base>
   187c8:	ldr	r0, [fp, #-8]
   187cc:	bl	18888 <read_body@@Base>
   187d0:	str	r0, [fp, #-16]
   187d4:	movw	r0, #16
   187d8:	bl	11f90 <malloc@plt>
   187dc:	str	r0, [fp, #-12]
   187e0:	ldr	r0, [fp, #-12]
   187e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   187e8:	ldr	r1, [r1, #4]
   187ec:	ldr	r2, [fp, #-16]
   187f0:	bl	16c64 <init_node_function@@Base>
   187f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   187f8:	bl	13354 <free_token_function@@Base>
   187fc:	ldr	r0, [pc, #108]	; 18870 <read_function_ast_node@@Base+0x34c>
   18800:	add	r0, pc, r0
   18804:	add	r0, r0, #104	; 0x68
   18808:	ldr	r1, [fp, #-12]
   1880c:	str	r1, [fp, #-4]
   18810:	str	r0, [sp, #28]
   18814:	ldr	r0, [sp, #28]
   18818:	ldr	r1, [r0]
   1881c:	ldr	r2, [r0, #4]
   18820:	adds	r1, r1, #1
   18824:	adc	r2, r2, #0
   18828:	str	r1, [r0]
   1882c:	str	r2, [r0, #4]
   18830:	ldr	r0, [pc, #76]	; 18884 <read_function_ast_node@@Base+0x360>
   18834:	add	r0, pc, r0
   18838:	ldr	r1, [r0, #112]	; 0x70
   1883c:	ldr	r2, [r0, #116]	; 0x74
   18840:	adds	r1, r1, #1
   18844:	adc	r2, r2, #0
   18848:	str	r1, [r0, #112]	; 0x70
   1884c:	str	r2, [r0, #116]	; 0x74
   18850:	ldr	r0, [fp, #-4]
   18854:	mov	sp, fp
   18858:	pop	{fp, pc}
   1885c:	ldrdeq	r9, [r1], -r4
   18860:	andeq	r9, r1, r0, lsl #13
   18864:	andeq	r9, r1, ip, ror #11
   18868:	andeq	r9, r1, r8, asr r5
   1886c:	andeq	r9, r1, r4, asr #9
   18870:	andeq	r9, r1, r8, lsl #8
   18874:	muleq	r1, r4, r4
   18878:	andeq	r9, r1, r8, lsr #10
   1887c:			; <UNDEFINED> instruction: 0x000195bc
   18880:	andeq	r9, r1, r0, asr r6
   18884:	ldrdeq	r9, [r1], -r4

00018888 <read_body@@Base>:
   18888:	push	{fp, lr}
   1888c:	mov	fp, sp
   18890:	sub	sp, sp, #96	; 0x60
   18894:	ldr	r1, [pc, #1028]	; 18ca0 <read_body@@Base+0x418>
   18898:	add	r1, pc, r1
   1889c:	str	r0, [fp, #-28]	; 0xffffffe4
   188a0:	str	r1, [fp, #-32]	; 0xffffffe0
   188a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   188a8:	ldr	r1, [r0]
   188ac:	ldr	r2, [r0, #4]
   188b0:	adds	r1, r1, #1
   188b4:	adc	r2, r2, #0
   188b8:	str	r1, [r0]
   188bc:	str	r2, [r0, #4]
   188c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   188c4:	str	r0, [fp, #-8]
   188c8:	movw	r1, #0
   188cc:	str	r1, [fp, #-12]
   188d0:	str	r1, [fp, #-16]
   188d4:	str	r1, [fp, #-20]	; 0xffffffec
   188d8:	str	r1, [fp, #-24]	; 0xffffffe8
   188dc:	ldr	r1, [fp, #-8]
   188e0:	ldr	r0, [r1]
   188e4:	bl	142a8 <next@@Base>
   188e8:	ldr	r1, [pc, #948]	; 18ca4 <read_body@@Base+0x41c>
   188ec:	add	r1, pc, r1
   188f0:	add	r2, r1, #8
   188f4:	add	r1, r1, #16
   188f8:	str	r0, [fp, #-24]	; 0xffffffe8
   188fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18900:	ldr	r0, [r0]
   18904:	cmp	r0, #5
   18908:	str	r2, [fp, #-36]	; 0xffffffdc
   1890c:	str	r1, [fp, #-40]	; 0xffffffd8
   18910:	beq	1894c <read_body@@Base+0xc4>
   18914:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18918:	ldr	r1, [pc, #944]	; 18cd0 <read_body@@Base+0x448>
   1891c:	add	r1, pc, r1
   18920:	add	r1, r1, #24
   18924:	ldr	r2, [r0]
   18928:	ldr	r3, [r0, #4]
   1892c:	adds	r2, r2, #1
   18930:	adc	r3, r3, #0
   18934:	str	r2, [r0]
   18938:	str	r3, [r0, #4]
   1893c:	movw	r0, #0
   18940:	str	r0, [fp, #-4]
   18944:	str	r1, [fp, #-44]	; 0xffffffd4
   18948:	b	18c58 <read_body@@Base+0x3d0>
   1894c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18950:	ldr	r1, [r0]
   18954:	ldr	r2, [r0, #4]
   18958:	adds	r1, r1, #1
   1895c:	adc	r2, r2, #0
   18960:	str	r1, [r0]
   18964:	str	r2, [r0, #4]
   18968:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1896c:	bl	134c8 <free_token_obra@@Base>
   18970:	ldr	r0, [fp, #-8]
   18974:	ldr	r0, [r0]
   18978:	bl	142a8 <next@@Base>
   1897c:	ldr	r1, [pc, #804]	; 18ca8 <read_body@@Base+0x420>
   18980:	add	r1, pc, r1
   18984:	add	r1, r1, #32
   18988:	str	r0, [fp, #-24]	; 0xffffffe8
   1898c:	str	r1, [sp, #48]	; 0x30
   18990:	ldr	r0, [sp, #48]	; 0x30
   18994:	ldr	r1, [pc, #784]	; 18cac <read_body@@Base+0x424>
   18998:	add	r1, pc, r1
   1899c:	add	r2, r1, #40	; 0x28
   189a0:	add	r1, r1, #48	; 0x30
   189a4:	ldr	r3, [r0]
   189a8:	ldr	ip, [r0, #4]
   189ac:	adds	r3, r3, #1
   189b0:	adc	ip, ip, #0
   189b4:	str	r3, [r0]
   189b8:	str	ip, [r0, #4]
   189bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   189c0:	ldr	r0, [r0]
   189c4:	cmp	r0, #6
   189c8:	str	r2, [sp, #44]	; 0x2c
   189cc:	str	r1, [sp, #40]	; 0x28
   189d0:	beq	18c1c <read_body@@Base+0x394>
   189d4:	ldr	r0, [sp, #44]	; 0x2c
   189d8:	ldr	r1, [r0]
   189dc:	ldr	r2, [r0, #4]
   189e0:	adds	r1, r1, #1
   189e4:	adc	r2, r2, #0
   189e8:	str	r1, [r0]
   189ec:	str	r2, [r0, #4]
   189f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   189f4:	ldr	r1, [pc, #728]	; 18cd4 <read_body@@Base+0x44c>
   189f8:	add	r1, pc, r1
   189fc:	add	r2, r1, #72	; 0x48
   18a00:	add	r3, r1, #64	; 0x40
   18a04:	add	r1, r1, #56	; 0x38
   18a08:	ldr	r0, [r0]
   18a0c:	cmp	r0, #7
   18a10:	str	r2, [sp, #36]	; 0x24
   18a14:	str	r1, [sp, #32]
   18a18:	str	r0, [sp, #28]
   18a1c:	str	r3, [sp, #24]
   18a20:	beq	18a48 <read_body@@Base+0x1c0>
   18a24:	b	18a28 <read_body@@Base+0x1a0>
   18a28:	ldr	r0, [sp, #28]
   18a2c:	cmp	r0, #10
   18a30:	ldr	r1, [sp, #36]	; 0x24
   18a34:	ldr	r2, [sp, #32]
   18a38:	str	r1, [sp, #20]
   18a3c:	str	r2, [sp, #16]
   18a40:	beq	18a8c <read_body@@Base+0x204>
   18a44:	b	18ad0 <read_body@@Base+0x248>
   18a48:	ldr	r0, [sp, #24]
   18a4c:	ldr	r1, [r0]
   18a50:	ldr	r2, [r0, #4]
   18a54:	adds	r1, r1, #1
   18a58:	adc	r2, r2, #0
   18a5c:	str	r1, [r0]
   18a60:	str	r2, [r0, #4]
   18a64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18a68:	bl	135c0 <free_token_return@@Base>
   18a6c:	ldr	r0, [fp, #-8]
   18a70:	bl	18cdc <read_return_expression@@Base>
   18a74:	ldr	r1, [pc, #572]	; 18cb8 <read_body@@Base+0x430>
   18a78:	add	r1, pc, r1
   18a7c:	add	r1, r1, #80	; 0x50
   18a80:	str	r0, [fp, #-16]
   18a84:	str	r1, [sp, #12]
   18a88:	b	18b18 <read_body@@Base+0x290>
   18a8c:	ldr	r0, [sp, #20]
   18a90:	ldr	r1, [r0]
   18a94:	ldr	r2, [r0, #4]
   18a98:	adds	r1, r1, #1
   18a9c:	adc	r2, r2, #0
   18aa0:	str	r1, [r0]
   18aa4:	str	r2, [r0, #4]
   18aa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18aac:	bl	13734 <free_token_if@@Base>
   18ab0:	ldr	r0, [fp, #-8]
   18ab4:	bl	18f10 <read_if_statement@@Base>
   18ab8:	ldr	r1, [pc, #500]	; 18cb4 <read_body@@Base+0x42c>
   18abc:	add	r1, pc, r1
   18ac0:	add	r1, r1, #88	; 0x58
   18ac4:	str	r0, [fp, #-16]
   18ac8:	str	r1, [sp, #12]
   18acc:	b	18b18 <read_body@@Base+0x290>
   18ad0:	ldr	r0, [sp, #16]
   18ad4:	ldr	r1, [r0]
   18ad8:	ldr	r2, [r0, #4]
   18adc:	adds	r1, r1, #1
   18ae0:	adc	r2, r2, #0
   18ae4:	str	r1, [r0]
   18ae8:	str	r2, [r0, #4]
   18aec:	ldr	r0, [fp, #-8]
   18af0:	ldr	r0, [r0]
   18af4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18af8:	bl	13f98 <push_back@@Base>
   18afc:	ldr	r0, [pc, #456]	; 18ccc <read_body@@Base+0x444>
   18b00:	add	r0, pc, r0
   18b04:	add	r0, r0, #96	; 0x60
   18b08:	ldr	r1, [fp, #-12]
   18b0c:	str	r1, [fp, #-4]
   18b10:	str	r0, [fp, #-44]	; 0xffffffd4
   18b14:	b	18c58 <read_body@@Base+0x3d0>
   18b18:	ldr	r0, [sp, #12]
   18b1c:	ldr	r1, [pc, #408]	; 18cbc <read_body@@Base+0x434>
   18b20:	add	r1, pc, r1
   18b24:	add	r2, r1, #104	; 0x68
   18b28:	add	r1, r1, #112	; 0x70
   18b2c:	ldr	r3, [r0]
   18b30:	ldr	ip, [r0, #4]
   18b34:	adds	r3, r3, #1
   18b38:	adc	ip, ip, #0
   18b3c:	str	r3, [r0]
   18b40:	str	ip, [r0, #4]
   18b44:	ldr	r0, [fp, #-12]
   18b48:	movw	r3, #0
   18b4c:	cmp	r0, r3
   18b50:	str	r2, [sp, #8]
   18b54:	str	r1, [sp, #4]
   18b58:	beq	18ba0 <read_body@@Base+0x318>
   18b5c:	ldr	r0, [sp, #8]
   18b60:	ldr	r1, [pc, #348]	; 18cc4 <read_body@@Base+0x43c>
   18b64:	add	r1, pc, r1
   18b68:	add	r1, r1, #120	; 0x78
   18b6c:	ldr	r2, [r0]
   18b70:	ldr	r3, [r0, #4]
   18b74:	adds	r2, r2, #1
   18b78:	adc	r3, r3, #0
   18b7c:	str	r2, [r0]
   18b80:	str	r3, [r0, #4]
   18b84:	ldr	r0, [fp, #-16]
   18b88:	ldr	r2, [fp, #-20]	; 0xffffffec
   18b8c:	str	r0, [r2, #4]
   18b90:	ldr	r0, [fp, #-16]
   18b94:	str	r0, [fp, #-20]	; 0xffffffec
   18b98:	str	r1, [sp]
   18b9c:	b	18bdc <read_body@@Base+0x354>
   18ba0:	ldr	r0, [sp, #4]
   18ba4:	ldr	r1, [pc, #276]	; 18cc0 <read_body@@Base+0x438>
   18ba8:	add	r1, pc, r1
   18bac:	add	r1, r1, #128	; 0x80
   18bb0:	ldr	r2, [r0]
   18bb4:	ldr	r3, [r0, #4]
   18bb8:	adds	r2, r2, #1
   18bbc:	adc	r3, r3, #0
   18bc0:	str	r2, [r0]
   18bc4:	str	r3, [r0, #4]
   18bc8:	ldr	r0, [fp, #-16]
   18bcc:	str	r0, [fp, #-12]
   18bd0:	ldr	r0, [fp, #-16]
   18bd4:	str	r0, [fp, #-20]	; 0xffffffec
   18bd8:	str	r1, [sp]
   18bdc:	ldr	r0, [sp]
   18be0:	ldr	r1, [r0]
   18be4:	ldr	r2, [r0, #4]
   18be8:	adds	r1, r1, #1
   18bec:	adc	r2, r2, #0
   18bf0:	str	r1, [r0]
   18bf4:	str	r2, [r0, #4]
   18bf8:	ldr	r0, [fp, #-8]
   18bfc:	ldr	r0, [r0]
   18c00:	bl	142a8 <next@@Base>
   18c04:	ldr	r1, [pc, #188]	; 18cc8 <read_body@@Base+0x440>
   18c08:	add	r1, pc, r1
   18c0c:	add	r1, r1, #136	; 0x88
   18c10:	str	r0, [fp, #-24]	; 0xffffffe8
   18c14:	str	r1, [sp, #48]	; 0x30
   18c18:	b	18990 <read_body@@Base+0x108>
   18c1c:	ldr	r0, [sp, #40]	; 0x28
   18c20:	ldr	r1, [r0]
   18c24:	ldr	r2, [r0, #4]
   18c28:	adds	r1, r1, #1
   18c2c:	adc	r2, r2, #0
   18c30:	str	r1, [r0]
   18c34:	str	r2, [r0, #4]
   18c38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18c3c:	bl	13544 <free_token_cbra@@Base>
   18c40:	ldr	r0, [pc, #104]	; 18cb0 <read_body@@Base+0x428>
   18c44:	add	r0, pc, r0
   18c48:	add	r0, r0, #144	; 0x90
   18c4c:	ldr	r1, [fp, #-12]
   18c50:	str	r1, [fp, #-4]
   18c54:	str	r0, [fp, #-44]	; 0xffffffd4
   18c58:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18c5c:	ldr	r1, [r0]
   18c60:	ldr	r2, [r0, #4]
   18c64:	adds	r1, r1, #1
   18c68:	adc	r2, r2, #0
   18c6c:	str	r1, [r0]
   18c70:	str	r2, [r0, #4]
   18c74:	ldr	r0, [pc, #92]	; 18cd8 <read_body@@Base+0x450>
   18c78:	add	r0, pc, r0
   18c7c:	ldr	r1, [r0, #152]	; 0x98
   18c80:	ldr	r2, [r0, #156]	; 0x9c
   18c84:	adds	r1, r1, #1
   18c88:	adc	r2, r2, #0
   18c8c:	str	r1, [r0, #152]	; 0x98
   18c90:	str	r2, [r0, #156]	; 0x9c
   18c94:	ldr	r0, [fp, #-4]
   18c98:	mov	sp, fp
   18c9c:	pop	{fp, pc}
   18ca0:	strdeq	r9, [r1], -r0
   18ca4:	muleq	r1, ip, r3
   18ca8:	andeq	r9, r1, r8, lsl #6
   18cac:	strdeq	r9, [r1], -r0
   18cb0:	andeq	r9, r1, r4, asr #32
   18cb4:	andeq	r9, r1, ip, asr #3
   18cb8:	andeq	r9, r1, r0, lsl r2
   18cbc:	andeq	r9, r1, r8, ror #2
   18cc0:	andeq	r9, r1, r0, ror #1
   18cc4:	andeq	r9, r1, r4, lsr #2
   18cc8:	andeq	r9, r1, r0, lsl #1
   18ccc:	andeq	r9, r1, r8, lsl #3
   18cd0:	andeq	r9, r1, ip, ror #6
   18cd4:	muleq	r1, r0, r2
   18cd8:	andeq	r9, r1, r0, lsl r0

00018cdc <read_return_expression@@Base>:
   18cdc:	push	{fp, lr}
   18ce0:	mov	fp, sp
   18ce4:	sub	sp, sp, #56	; 0x38
   18ce8:	ldr	r1, [pc, #516]	; 18ef4 <read_return_expression@@Base+0x218>
   18cec:	add	r1, pc, r1
   18cf0:	str	r0, [sp, #28]
   18cf4:	str	r1, [sp, #24]
   18cf8:	ldr	r0, [sp, #24]
   18cfc:	ldr	r1, [r0]
   18d00:	ldr	r2, [r0, #4]
   18d04:	adds	r1, r1, #1
   18d08:	adc	r2, r2, #0
   18d0c:	str	r1, [r0]
   18d10:	str	r2, [r0, #4]
   18d14:	ldr	r0, [sp, #28]
   18d18:	str	r0, [fp, #-8]
   18d1c:	movw	r1, #0
   18d20:	str	r1, [fp, #-12]
   18d24:	str	r1, [fp, #-16]
   18d28:	str	r1, [fp, #-20]	; 0xffffffec
   18d2c:	str	r1, [fp, #-24]	; 0xffffffe8
   18d30:	ldr	r1, [fp, #-8]
   18d34:	ldr	r0, [r1]
   18d38:	bl	142a8 <next@@Base>
   18d3c:	ldr	r1, [pc, #436]	; 18ef8 <read_return_expression@@Base+0x21c>
   18d40:	add	r1, pc, r1
   18d44:	add	r2, r1, #8
   18d48:	add	r1, r1, #16
   18d4c:	str	r0, [fp, #-20]	; 0xffffffec
   18d50:	ldr	r0, [fp, #-20]	; 0xffffffec
   18d54:	ldr	r0, [r0]
   18d58:	cmp	r0, #1
   18d5c:	str	r2, [sp, #20]
   18d60:	str	r1, [sp, #16]
   18d64:	beq	18da0 <read_return_expression@@Base+0xc4>
   18d68:	ldr	r0, [sp, #20]
   18d6c:	ldr	r1, [pc, #404]	; 18f08 <read_return_expression@@Base+0x22c>
   18d70:	add	r1, pc, r1
   18d74:	add	r1, r1, #24
   18d78:	ldr	r2, [r0]
   18d7c:	ldr	r3, [r0, #4]
   18d80:	adds	r2, r2, #1
   18d84:	adc	r3, r3, #0
   18d88:	str	r2, [r0]
   18d8c:	str	r3, [r0, #4]
   18d90:	movw	r0, #0
   18d94:	str	r0, [fp, #-4]
   18d98:	str	r1, [sp, #12]
   18d9c:	b	18eac <read_return_expression@@Base+0x1d0>
   18da0:	ldr	r0, [sp, #16]
   18da4:	ldr	r1, [r0]
   18da8:	ldr	r2, [r0, #4]
   18dac:	adds	r1, r1, #1
   18db0:	adc	r2, r2, #0
   18db4:	str	r1, [r0]
   18db8:	str	r2, [r0, #4]
   18dbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   18dc0:	str	r0, [fp, #-24]	; 0xffffffe8
   18dc4:	movw	r0, #12
   18dc8:	bl	11f90 <malloc@plt>
   18dcc:	str	r0, [fp, #-16]
   18dd0:	ldr	r0, [fp, #-16]
   18dd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18dd8:	ldr	r1, [r1, #4]
   18ddc:	bl	16bd0 <init_node_int@@Base>
   18de0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18de4:	bl	132d8 <free_token_int_value@@Base>
   18de8:	movw	r0, #12
   18dec:	bl	11f90 <malloc@plt>
   18df0:	str	r0, [fp, #-12]
   18df4:	ldr	r0, [fp, #-12]
   18df8:	ldr	r1, [fp, #-16]
   18dfc:	bl	16d10 <init_node_return@@Base>
   18e00:	ldr	r0, [fp, #-8]
   18e04:	ldr	r0, [r0]
   18e08:	bl	142a8 <next@@Base>
   18e0c:	ldr	r1, [pc, #232]	; 18efc <read_return_expression@@Base+0x220>
   18e10:	add	r1, pc, r1
   18e14:	add	r2, r1, #32
   18e18:	add	r1, r1, #40	; 0x28
   18e1c:	str	r0, [fp, #-20]	; 0xffffffec
   18e20:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e24:	ldr	r0, [r0]
   18e28:	cmp	r0, #8
   18e2c:	str	r2, [sp, #8]
   18e30:	str	r1, [sp, #4]
   18e34:	beq	18e70 <read_return_expression@@Base+0x194>
   18e38:	ldr	r0, [sp, #8]
   18e3c:	ldr	r1, [pc, #192]	; 18f04 <read_return_expression@@Base+0x228>
   18e40:	add	r1, pc, r1
   18e44:	add	r1, r1, #48	; 0x30
   18e48:	ldr	r2, [r0]
   18e4c:	ldr	r3, [r0, #4]
   18e50:	adds	r2, r2, #1
   18e54:	adc	r3, r3, #0
   18e58:	str	r2, [r0]
   18e5c:	str	r3, [r0, #4]
   18e60:	movw	r0, #0
   18e64:	str	r0, [fp, #-4]
   18e68:	str	r1, [sp, #12]
   18e6c:	b	18eac <read_return_expression@@Base+0x1d0>
   18e70:	ldr	r0, [sp, #4]
   18e74:	ldr	r1, [r0]
   18e78:	ldr	r2, [r0, #4]
   18e7c:	adds	r1, r1, #1
   18e80:	adc	r2, r2, #0
   18e84:	str	r1, [r0]
   18e88:	str	r2, [r0, #4]
   18e8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e90:	bl	1363c <free_token_semicolon@@Base>
   18e94:	ldr	r0, [pc, #100]	; 18f00 <read_return_expression@@Base+0x224>
   18e98:	add	r0, pc, r0
   18e9c:	add	r0, r0, #56	; 0x38
   18ea0:	ldr	r1, [fp, #-12]
   18ea4:	str	r1, [fp, #-4]
   18ea8:	str	r0, [sp, #12]
   18eac:	ldr	r0, [sp, #12]
   18eb0:	ldr	r1, [r0]
   18eb4:	ldr	r2, [r0, #4]
   18eb8:	adds	r1, r1, #1
   18ebc:	adc	r2, r2, #0
   18ec0:	str	r1, [r0]
   18ec4:	str	r2, [r0, #4]
   18ec8:	ldr	r0, [pc, #60]	; 18f0c <read_return_expression@@Base+0x230>
   18ecc:	add	r0, pc, r0
   18ed0:	ldr	r1, [r0, #64]	; 0x40
   18ed4:	ldr	r2, [r0, #68]	; 0x44
   18ed8:	adds	r1, r1, #1
   18edc:	adc	r2, r2, #0
   18ee0:	str	r1, [r0, #64]	; 0x40
   18ee4:	str	r2, [r0, #68]	; 0x44
   18ee8:	ldr	r0, [fp, #-4]
   18eec:	mov	sp, fp
   18ef0:	pop	{fp, pc}
   18ef4:	andeq	r9, r1, ip, lsr r0
   18ef8:	andeq	r8, r1, r8, ror #31
   18efc:	andeq	r8, r1, r8, lsl pc
   18f00:	muleq	r1, r0, lr
   18f04:	andeq	r8, r1, r8, ror #29
   18f08:			; <UNDEFINED> instruction: 0x00018fb8
   18f0c:	andeq	r8, r1, ip, asr lr

00018f10 <read_if_statement@@Base>:
   18f10:	push	{fp, lr}
   18f14:	mov	fp, sp
   18f18:	sub	sp, sp, #64	; 0x40
   18f1c:	ldr	r1, [pc, #580]	; 19168 <read_if_statement@@Base+0x258>
   18f20:	add	r1, pc, r1
   18f24:	str	r0, [sp, #32]
   18f28:	str	r1, [sp, #28]
   18f2c:	ldr	r0, [sp, #28]
   18f30:	ldr	r1, [r0]
   18f34:	ldr	r2, [r0, #4]
   18f38:	adds	r1, r1, #1
   18f3c:	adc	r2, r2, #0
   18f40:	str	r1, [r0]
   18f44:	str	r2, [r0, #4]
   18f48:	ldr	r0, [sp, #32]
   18f4c:	str	r0, [fp, #-8]
   18f50:	movw	r1, #0
   18f54:	str	r1, [fp, #-12]
   18f58:	str	r1, [fp, #-16]
   18f5c:	str	r1, [fp, #-20]	; 0xffffffec
   18f60:	str	r1, [fp, #-24]	; 0xffffffe8
   18f64:	str	r1, [fp, #-28]	; 0xffffffe4
   18f68:	ldr	r1, [fp, #-8]
   18f6c:	ldr	r0, [r1]
   18f70:	bl	142a8 <next@@Base>
   18f74:	ldr	r1, [pc, #496]	; 1916c <read_if_statement@@Base+0x25c>
   18f78:	add	r1, pc, r1
   18f7c:	add	r2, r1, #8
   18f80:	add	r1, r1, #16
   18f84:	str	r0, [fp, #-28]	; 0xffffffe4
   18f88:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18f8c:	ldr	r0, [r0]
   18f90:	cmp	r0, #3
   18f94:	str	r2, [sp, #24]
   18f98:	str	r1, [sp, #20]
   18f9c:	beq	18fd8 <read_if_statement@@Base+0xc8>
   18fa0:	ldr	r0, [sp, #24]
   18fa4:	ldr	r1, [pc, #468]	; 19180 <read_if_statement@@Base+0x270>
   18fa8:	add	r1, pc, r1
   18fac:	add	r1, r1, #24
   18fb0:	ldr	r2, [r0]
   18fb4:	ldr	r3, [r0, #4]
   18fb8:	adds	r2, r2, #1
   18fbc:	adc	r3, r3, #0
   18fc0:	str	r2, [r0]
   18fc4:	str	r3, [r0, #4]
   18fc8:	movw	r0, #0
   18fcc:	str	r0, [fp, #-4]
   18fd0:	str	r1, [sp, #16]
   18fd4:	b	19120 <read_if_statement@@Base+0x210>
   18fd8:	ldr	r0, [sp, #20]
   18fdc:	ldr	r1, [r0]
   18fe0:	ldr	r2, [r0, #4]
   18fe4:	adds	r1, r1, #1
   18fe8:	adc	r2, r2, #0
   18fec:	str	r1, [r0]
   18ff0:	str	r2, [r0, #4]
   18ff4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18ff8:	bl	133d0 <free_token_opar@@Base>
   18ffc:	ldr	r0, [fp, #-8]
   19000:	bl	19188 <read_boolean_expression@@Base>
   19004:	str	r0, [fp, #-16]
   19008:	ldr	r0, [fp, #-8]
   1900c:	bl	18888 <read_body@@Base>
   19010:	str	r0, [fp, #-20]	; 0xffffffec
   19014:	ldr	r0, [fp, #-8]
   19018:	ldr	r0, [r0]
   1901c:	bl	142a8 <next@@Base>
   19020:	ldr	r1, [pc, #328]	; 19170 <read_if_statement@@Base+0x260>
   19024:	add	r1, pc, r1
   19028:	add	r2, r1, #32
   1902c:	add	r1, r1, #40	; 0x28
   19030:	str	r0, [fp, #-28]	; 0xffffffe4
   19034:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19038:	ldr	r0, [r0]
   1903c:	cmp	r0, #11
   19040:	str	r2, [sp, #12]
   19044:	str	r1, [sp, #8]
   19048:	bne	19090 <read_if_statement@@Base+0x180>
   1904c:	ldr	r0, [sp, #12]
   19050:	ldr	r1, [r0]
   19054:	ldr	r2, [r0, #4]
   19058:	adds	r1, r1, #1
   1905c:	adc	r2, r2, #0
   19060:	str	r1, [r0]
   19064:	str	r2, [r0, #4]
   19068:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1906c:	bl	137b0 <free_token_else@@Base>
   19070:	ldr	r0, [fp, #-8]
   19074:	bl	18888 <read_body@@Base>
   19078:	ldr	r1, [pc, #248]	; 19178 <read_if_statement@@Base+0x268>
   1907c:	add	r1, pc, r1
   19080:	add	r1, r1, #48	; 0x30
   19084:	str	r0, [fp, #-24]	; 0xffffffe8
   19088:	str	r1, [sp, #4]
   1908c:	b	190cc <read_if_statement@@Base+0x1bc>
   19090:	ldr	r0, [sp, #8]
   19094:	ldr	r1, [r0]
   19098:	ldr	r2, [r0, #4]
   1909c:	adds	r1, r1, #1
   190a0:	adc	r2, r2, #0
   190a4:	str	r1, [r0]
   190a8:	str	r2, [r0, #4]
   190ac:	ldr	r0, [fp, #-8]
   190b0:	ldr	r0, [r0]
   190b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   190b8:	bl	13f98 <push_back@@Base>
   190bc:	ldr	r0, [pc, #176]	; 19174 <read_if_statement@@Base+0x264>
   190c0:	add	r0, pc, r0
   190c4:	add	r0, r0, #56	; 0x38
   190c8:	str	r0, [sp, #4]
   190cc:	ldr	r0, [sp, #4]
   190d0:	ldr	r1, [r0]
   190d4:	ldr	r2, [r0, #4]
   190d8:	adds	r1, r1, #1
   190dc:	adc	r2, r2, #0
   190e0:	str	r1, [r0]
   190e4:	str	r2, [r0, #4]
   190e8:	movw	r0, #20
   190ec:	bl	11f90 <malloc@plt>
   190f0:	str	r0, [fp, #-12]
   190f4:	ldr	r0, [fp, #-12]
   190f8:	ldr	r1, [fp, #-16]
   190fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   19100:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19104:	bl	16da4 <init_node_if@@Base>
   19108:	ldr	r0, [pc, #108]	; 1917c <read_if_statement@@Base+0x26c>
   1910c:	add	r0, pc, r0
   19110:	add	r0, r0, #64	; 0x40
   19114:	ldr	r1, [fp, #-12]
   19118:	str	r1, [fp, #-4]
   1911c:	str	r0, [sp, #16]
   19120:	ldr	r0, [sp, #16]
   19124:	ldr	r1, [r0]
   19128:	ldr	r2, [r0, #4]
   1912c:	adds	r1, r1, #1
   19130:	adc	r2, r2, #0
   19134:	str	r1, [r0]
   19138:	str	r2, [r0, #4]
   1913c:	ldr	r0, [pc, #64]	; 19184 <read_if_statement@@Base+0x274>
   19140:	add	r0, pc, r0
   19144:	ldr	r1, [r0, #72]	; 0x48
   19148:	ldr	r2, [r0, #76]	; 0x4c
   1914c:	adds	r1, r1, #1
   19150:	adc	r2, r2, #0
   19154:	str	r1, [r0, #72]	; 0x48
   19158:	str	r2, [r0, #76]	; 0x4c
   1915c:	ldr	r0, [fp, #-4]
   19160:	mov	sp, fp
   19164:	pop	{fp, pc}
   19168:	andeq	r8, r1, r8, asr lr
   1916c:	andeq	r8, r1, r0, lsl #28
   19170:	andeq	r8, r1, r4, asr sp
   19174:			; <UNDEFINED> instruction: 0x00018cb8
   19178:	strdeq	r8, [r1], -ip
   1917c:	andeq	r8, r1, ip, ror #24
   19180:	ldrdeq	r8, [r1], -r0
   19184:	andeq	r8, r1, r8, lsr ip

00019188 <read_boolean_expression@@Base>:
   19188:	push	{fp, lr}
   1918c:	mov	fp, sp
   19190:	sub	sp, sp, #80	; 0x50
   19194:	ldr	r1, [pc, #748]	; 19488 <read_boolean_expression@@Base+0x300>
   19198:	add	r1, pc, r1
   1919c:	str	r0, [fp, #-24]	; 0xffffffe8
   191a0:	str	r1, [fp, #-28]	; 0xffffffe4
   191a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   191a8:	ldr	r1, [r0]
   191ac:	ldr	r2, [r0, #4]
   191b0:	adds	r1, r1, #1
   191b4:	adc	r2, r2, #0
   191b8:	str	r1, [r0]
   191bc:	str	r2, [r0, #4]
   191c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   191c4:	str	r0, [fp, #-4]
   191c8:	movw	r1, #0
   191cc:	str	r1, [fp, #-8]
   191d0:	str	r1, [fp, #-12]
   191d4:	str	r1, [fp, #-20]	; 0xffffffec
   191d8:	ldr	r1, [fp, #-4]
   191dc:	ldr	r0, [r1]
   191e0:	bl	142a8 <next@@Base>
   191e4:	ldr	r1, [pc, #672]	; 1948c <read_boolean_expression@@Base+0x304>
   191e8:	add	r1, pc, r1
   191ec:	add	r1, r1, #8
   191f0:	str	r0, [fp, #-12]
   191f4:	str	r1, [fp, #-32]	; 0xffffffe0
   191f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   191fc:	ldr	r1, [pc, #652]	; 19490 <read_boolean_expression@@Base+0x308>
   19200:	add	r1, pc, r1
   19204:	add	r2, r1, #16
   19208:	add	r1, r1, #24
   1920c:	ldr	r3, [r0]
   19210:	ldr	ip, [r0, #4]
   19214:	adds	r3, r3, #1
   19218:	adc	ip, ip, #0
   1921c:	str	r3, [r0]
   19220:	str	ip, [r0, #4]
   19224:	ldr	r0, [fp, #-12]
   19228:	ldr	r0, [r0]
   1922c:	cmp	r0, #4
   19230:	str	r2, [fp, #-36]	; 0xffffffdc
   19234:	str	r1, [sp, #40]	; 0x28
   19238:	beq	19438 <read_boolean_expression@@Base+0x2b0>
   1923c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19240:	ldr	r1, [r0]
   19244:	ldr	r2, [r0, #4]
   19248:	adds	r1, r1, #1
   1924c:	adc	r2, r2, #0
   19250:	str	r1, [r0]
   19254:	str	r2, [r0, #4]
   19258:	ldr	r0, [fp, #-12]
   1925c:	ldr	r1, [pc, #584]	; 194ac <read_boolean_expression@@Base+0x324>
   19260:	add	r1, pc, r1
   19264:	add	r2, r1, #56	; 0x38
   19268:	add	r3, r1, #48	; 0x30
   1926c:	add	ip, r1, #40	; 0x28
   19270:	add	r1, r1, #32
   19274:	ldr	r0, [r0]
   19278:	cmp	r0, #1
   1927c:	str	r2, [sp, #36]	; 0x24
   19280:	str	r3, [sp, #32]
   19284:	str	r1, [sp, #28]
   19288:	str	r0, [sp, #24]
   1928c:	str	ip, [sp, #20]
   19290:	beq	192d0 <read_boolean_expression@@Base+0x148>
   19294:	b	19298 <read_boolean_expression@@Base+0x110>
   19298:	ldr	r0, [sp, #24]
   1929c:	cmp	r0, #3
   192a0:	ldr	r1, [sp, #36]	; 0x24
   192a4:	str	r1, [sp, #16]
   192a8:	beq	1936c <read_boolean_expression@@Base+0x1e4>
   192ac:	b	192b0 <read_boolean_expression@@Base+0x128>
   192b0:	ldr	r0, [sp, #24]
   192b4:	cmp	r0, #12
   192b8:	ldr	r1, [sp, #32]
   192bc:	ldr	r2, [sp, #28]
   192c0:	str	r1, [sp, #12]
   192c4:	str	r2, [sp, #8]
   192c8:	beq	19328 <read_boolean_expression@@Base+0x1a0>
   192cc:	b	193b4 <read_boolean_expression@@Base+0x22c>
   192d0:	ldr	r0, [sp, #20]
   192d4:	ldr	r1, [r0]
   192d8:	ldr	r2, [r0, #4]
   192dc:	adds	r1, r1, #1
   192e0:	adc	r2, r2, #0
   192e4:	str	r1, [r0]
   192e8:	str	r2, [r0, #4]
   192ec:	ldr	r0, [fp, #-4]
   192f0:	ldr	r0, [r0]
   192f4:	ldr	r1, [fp, #-12]
   192f8:	bl	13f98 <push_back@@Base>
   192fc:	ldr	r0, [fp, #-4]
   19300:	ldr	r1, [fp, #-8]
   19304:	ldr	r3, [fp, #-16]
   19308:	sub	r2, fp, #20
   1930c:	bl	194b4 <read_single_boolean_expression@@Base>
   19310:	ldr	r1, [pc, #388]	; 1949c <read_boolean_expression@@Base+0x314>
   19314:	add	r1, pc, r1
   19318:	add	r1, r1, #64	; 0x40
   1931c:	str	r0, [fp, #-8]
   19320:	str	r1, [sp, #4]
   19324:	b	193f8 <read_boolean_expression@@Base+0x270>
   19328:	ldr	r0, [sp, #12]
   1932c:	ldr	r1, [r0]
   19330:	ldr	r2, [r0, #4]
   19334:	adds	r1, r1, #1
   19338:	adc	r2, r2, #0
   1933c:	str	r1, [r0]
   19340:	str	r2, [r0, #4]
   19344:	ldr	r0, [fp, #-12]
   19348:	bl	17870 <get_boolean_op_value@@Base>
   1934c:	ldr	r1, [pc, #324]	; 19498 <read_boolean_expression@@Base+0x310>
   19350:	add	r1, pc, r1
   19354:	add	r1, r1, #72	; 0x48
   19358:	str	r0, [fp, #-16]
   1935c:	movw	r0, #1
   19360:	str	r0, [fp, #-20]	; 0xffffffec
   19364:	str	r1, [sp, #4]
   19368:	b	193f8 <read_boolean_expression@@Base+0x270>
   1936c:	ldr	r0, [sp, #16]
   19370:	ldr	r1, [r0]
   19374:	ldr	r2, [r0, #4]
   19378:	adds	r1, r1, #1
   1937c:	adc	r2, r2, #0
   19380:	str	r1, [r0]
   19384:	str	r2, [r0, #4]
   19388:	ldr	r0, [fp, #-4]
   1938c:	ldr	r1, [fp, #-8]
   19390:	ldr	r3, [fp, #-16]
   19394:	sub	r2, fp, #20
   19398:	bl	194b4 <read_single_boolean_expression@@Base>
   1939c:	ldr	r1, [pc, #240]	; 19494 <read_boolean_expression@@Base+0x30c>
   193a0:	add	r1, pc, r1
   193a4:	add	r1, r1, #80	; 0x50
   193a8:	str	r0, [fp, #-8]
   193ac:	str	r1, [sp, #4]
   193b0:	b	193f8 <read_boolean_expression@@Base+0x270>
   193b4:	ldr	r0, [sp, #8]
   193b8:	ldr	r1, [pc, #228]	; 194a4 <read_boolean_expression@@Base+0x31c>
   193bc:	add	r1, pc, r1
   193c0:	ldr	r2, [pc, #224]	; 194a8 <read_boolean_expression@@Base+0x320>
   193c4:	ldr	r2, [pc, r2]
   193c8:	ldr	r3, [r0]
   193cc:	ldr	ip, [r0, #4]
   193d0:	adds	r3, r3, #1
   193d4:	adc	ip, ip, #0
   193d8:	str	r3, [r0]
   193dc:	str	ip, [r0, #4]
   193e0:	ldr	r0, [r2]
   193e4:	bl	11ffc <fprintf@plt>
   193e8:	movw	r1, #1
   193ec:	str	r0, [sp]
   193f0:	mov	r0, r1
   193f4:	bl	11fcc <exit@plt>
   193f8:	ldr	r0, [sp, #4]
   193fc:	ldr	r1, [r0]
   19400:	ldr	r2, [r0, #4]
   19404:	adds	r1, r1, #1
   19408:	adc	r2, r2, #0
   1940c:	str	r1, [r0]
   19410:	str	r2, [r0, #4]
   19414:	ldr	r0, [fp, #-4]
   19418:	ldr	r0, [r0]
   1941c:	bl	142a8 <next@@Base>
   19420:	ldr	r1, [pc, #120]	; 194a0 <read_boolean_expression@@Base+0x318>
   19424:	add	r1, pc, r1
   19428:	add	r1, r1, #88	; 0x58
   1942c:	str	r0, [fp, #-12]
   19430:	str	r1, [fp, #-32]	; 0xffffffe0
   19434:	b	191f8 <read_boolean_expression@@Base+0x70>
   19438:	ldr	r0, [sp, #40]	; 0x28
   1943c:	ldr	r1, [r0]
   19440:	ldr	r2, [r0, #4]
   19444:	adds	r1, r1, #1
   19448:	adc	r2, r2, #0
   1944c:	str	r1, [r0]
   19450:	str	r2, [r0, #4]
   19454:	ldr	r0, [pc, #84]	; 194b0 <read_boolean_expression@@Base+0x328>
   19458:	add	r0, pc, r0
   1945c:	ldr	r1, [r0, #96]	; 0x60
   19460:	ldr	r2, [r0, #100]	; 0x64
   19464:	adds	r1, r1, #1
   19468:	adc	r2, r2, #0
   1946c:	str	r1, [r0, #96]	; 0x60
   19470:	str	r2, [r0, #100]	; 0x64
   19474:	ldr	r0, [fp, #-12]
   19478:	bl	1344c <free_token_cpar@@Base>
   1947c:	ldr	r0, [fp, #-8]
   19480:	mov	sp, fp
   19484:	pop	{fp, pc}
   19488:	andeq	r8, r1, r0, lsr ip
   1948c:	andeq	r8, r1, r0, ror #23
   19490:	andeq	r8, r1, r8, asr #23
   19494:	andeq	r8, r1, r8, lsr #20
   19498:	andeq	r8, r1, r8, ror sl
   1949c:			; <UNDEFINED> instruction: 0x00018ab4
   194a0:	andeq	r8, r1, r4, lsr #19
   194a4:	andeq	r5, r0, sp, lsr sp
   194a8:	strdeq	r7, [r1], -r8
   194ac:	andeq	r8, r1, r8, ror #22
   194b0:	andeq	r8, r1, r0, ror r9

000194b4 <read_single_boolean_expression@@Base>:
   194b4:	push	{r4, r5, fp, lr}
   194b8:	add	fp, sp, #8
   194bc:	sub	sp, sp, #88	; 0x58
   194c0:	ldr	ip, [pc, #580]	; 1970c <read_single_boolean_expression@@Base+0x258>
   194c4:	add	ip, pc, ip
   194c8:	str	r0, [sp, #48]	; 0x30
   194cc:	str	r1, [sp, #44]	; 0x2c
   194d0:	str	r2, [sp, #40]	; 0x28
   194d4:	str	r3, [sp, #36]	; 0x24
   194d8:	str	ip, [sp, #32]
   194dc:	ldr	r0, [sp, #32]
   194e0:	ldr	r1, [pc, #552]	; 19710 <read_single_boolean_expression@@Base+0x25c>
   194e4:	add	r1, pc, r1
   194e8:	add	r2, r1, #8
   194ec:	add	r1, r1, #16
   194f0:	ldr	r3, [r0]
   194f4:	ldr	ip, [r0, #4]
   194f8:	adds	r3, r3, #1
   194fc:	adc	ip, ip, #0
   19500:	str	r3, [r0]
   19504:	str	ip, [r0, #4]
   19508:	ldr	r0, [sp, #48]	; 0x30
   1950c:	str	r0, [fp, #-12]
   19510:	ldr	r3, [sp, #44]	; 0x2c
   19514:	str	r3, [fp, #-16]
   19518:	ldr	ip, [sp, #40]	; 0x28
   1951c:	str	ip, [fp, #-20]	; 0xffffffec
   19520:	ldr	lr, [sp, #36]	; 0x24
   19524:	str	lr, [fp, #-24]	; 0xffffffe8
   19528:	movw	r4, #0
   1952c:	str	r4, [fp, #-28]	; 0xffffffe4
   19530:	str	r4, [fp, #-32]	; 0xffffffe0
   19534:	str	r4, [fp, #-36]	; 0xffffffdc
   19538:	str	r4, [fp, #-40]	; 0xffffffd8
   1953c:	str	r4, [fp, #-44]	; 0xffffffd4
   19540:	ldr	r5, [fp, #-16]
   19544:	cmp	r5, r4
   19548:	str	r2, [sp, #28]
   1954c:	str	r1, [sp, #24]
   19550:	bne	19590 <read_single_boolean_expression@@Base+0xdc>
   19554:	ldr	r0, [sp, #28]
   19558:	ldr	r1, [r0]
   1955c:	ldr	r2, [r0, #4]
   19560:	adds	r1, r1, #1
   19564:	adc	r2, r2, #0
   19568:	str	r1, [r0]
   1956c:	str	r2, [r0, #4]
   19570:	ldr	r0, [fp, #-12]
   19574:	bl	19730 <read_boolean_binary_expression@@Base>
   19578:	ldr	r1, [pc, #424]	; 19728 <read_single_boolean_expression@@Base+0x274>
   1957c:	add	r1, pc, r1
   19580:	add	r1, r1, #24
   19584:	str	r0, [fp, #-32]	; 0xffffffe0
   19588:	str	r1, [sp, #20]
   1958c:	b	196c4 <read_single_boolean_expression@@Base+0x210>
   19590:	ldr	r0, [sp, #24]
   19594:	ldr	r1, [pc, #376]	; 19714 <read_single_boolean_expression@@Base+0x260>
   19598:	add	r1, pc, r1
   1959c:	add	r2, r1, #32
   195a0:	add	r1, r1, #40	; 0x28
   195a4:	ldr	r3, [r0]
   195a8:	ldr	ip, [r0, #4]
   195ac:	adds	r3, r3, #1
   195b0:	adc	ip, ip, #0
   195b4:	str	r3, [r0]
   195b8:	str	ip, [r0, #4]
   195bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   195c0:	ldr	r0, [r0]
   195c4:	cmp	r0, #0
   195c8:	str	r2, [sp, #16]
   195cc:	str	r1, [sp, #12]
   195d0:	beq	1964c <read_single_boolean_expression@@Base+0x198>
   195d4:	ldr	r0, [sp, #16]
   195d8:	ldr	r1, [r0]
   195dc:	ldr	r2, [r0, #4]
   195e0:	adds	r1, r1, #1
   195e4:	adc	r2, r2, #0
   195e8:	str	r1, [r0]
   195ec:	str	r2, [r0, #4]
   195f0:	ldr	r0, [fp, #-12]
   195f4:	bl	19730 <read_boolean_binary_expression@@Base>
   195f8:	str	r0, [fp, #-36]	; 0xffffffdc
   195fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19600:	str	r0, [fp, #-40]	; 0xffffffd8
   19604:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19608:	str	r0, [fp, #-44]	; 0xffffffd4
   1960c:	movw	r0, #20
   19610:	bl	11f90 <malloc@plt>
   19614:	str	r0, [fp, #-32]	; 0xffffffe0
   19618:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1961c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19620:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19624:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19628:	bl	16e68 <init_node_boolean_operator@@Base>
   1962c:	ldr	r0, [pc, #236]	; 19720 <read_single_boolean_expression@@Base+0x26c>
   19630:	add	r0, pc, r0
   19634:	add	r0, r0, #48	; 0x30
   19638:	ldr	r1, [fp, #-20]	; 0xffffffec
   1963c:	movw	r2, #0
   19640:	str	r2, [r1]
   19644:	str	r0, [sp, #8]
   19648:	b	19698 <read_single_boolean_expression@@Base+0x1e4>
   1964c:	ldr	r0, [sp, #12]
   19650:	ldr	r1, [pc, #192]	; 19718 <read_single_boolean_expression@@Base+0x264>
   19654:	add	r1, pc, r1
   19658:	ldr	r2, [pc, #188]	; 1971c <read_single_boolean_expression@@Base+0x268>
   1965c:	ldr	r2, [pc, r2]
   19660:	ldr	r3, [r0]
   19664:	ldr	ip, [r0, #4]
   19668:	adds	r3, r3, #1
   1966c:	adc	ip, ip, #0
   19670:	str	r3, [r0]
   19674:	str	ip, [r0, #4]
   19678:	ldr	r0, [r2]
   1967c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19680:	ldr	r2, [r2, #4]
   19684:	bl	11ffc <fprintf@plt>
   19688:	movw	r1, #1
   1968c:	str	r0, [sp, #4]
   19690:	mov	r0, r1
   19694:	bl	11fcc <exit@plt>
   19698:	ldr	r0, [sp, #8]
   1969c:	ldr	r1, [pc, #128]	; 19724 <read_single_boolean_expression@@Base+0x270>
   196a0:	add	r1, pc, r1
   196a4:	add	r1, r1, #56	; 0x38
   196a8:	ldr	r2, [r0]
   196ac:	ldr	r3, [r0, #4]
   196b0:	adds	r2, r2, #1
   196b4:	adc	r3, r3, #0
   196b8:	str	r2, [r0]
   196bc:	str	r3, [r0, #4]
   196c0:	str	r1, [sp, #20]
   196c4:	ldr	r0, [sp, #20]
   196c8:	ldr	r1, [r0]
   196cc:	ldr	r2, [r0, #4]
   196d0:	adds	r1, r1, #1
   196d4:	adc	r2, r2, #0
   196d8:	str	r1, [r0]
   196dc:	str	r2, [r0, #4]
   196e0:	ldr	r0, [pc, #68]	; 1972c <read_single_boolean_expression@@Base+0x278>
   196e4:	add	r0, pc, r0
   196e8:	ldr	r1, [r0, #64]	; 0x40
   196ec:	ldr	r2, [r0, #68]	; 0x44
   196f0:	adds	r1, r1, #1
   196f4:	adc	r2, r2, #0
   196f8:	str	r1, [r0, #64]	; 0x40
   196fc:	str	r2, [r0, #68]	; 0x44
   19700:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19704:	sub	sp, fp, #8
   19708:	pop	{r4, r5, fp, pc}
   1970c:	andeq	r8, r1, r4, ror r9
   19710:	andeq	r8, r1, r4, asr r9
   19714:	andeq	r8, r1, r0, lsr #17
   19718:	andeq	r5, r0, r7, asr #21
   1971c:	andeq	r7, r1, r0, ror #20
   19720:	andeq	r8, r1, r8, lsl #16
   19724:	muleq	r1, r8, r7
   19728:			; <UNDEFINED> instruction: 0x000188bc
   1972c:	andeq	r8, r1, r4, asr r7

00019730 <read_boolean_binary_expression@@Base>:
   19730:	push	{fp, lr}
   19734:	mov	fp, sp
   19738:	sub	sp, sp, #88	; 0x58
   1973c:	ldr	r1, [pc, #916]	; 19ad8 <read_boolean_binary_expression@@Base+0x3a8>
   19740:	add	r1, pc, r1
   19744:	str	r0, [sp, #44]	; 0x2c
   19748:	str	r1, [sp, #40]	; 0x28
   1974c:	ldr	r0, [sp, #40]	; 0x28
   19750:	ldr	r1, [r0]
   19754:	ldr	r2, [r0, #4]
   19758:	adds	r1, r1, #1
   1975c:	adc	r2, r2, #0
   19760:	str	r1, [r0]
   19764:	str	r2, [r0, #4]
   19768:	ldr	r0, [sp, #44]	; 0x2c
   1976c:	str	r0, [fp, #-8]
   19770:	movw	r1, #0
   19774:	str	r1, [fp, #-12]
   19778:	str	r1, [fp, #-16]
   1977c:	str	r1, [fp, #-20]	; 0xffffffec
   19780:	str	r1, [fp, #-24]	; 0xffffffe8
   19784:	str	r1, [fp, #-28]	; 0xffffffe4
   19788:	str	r1, [fp, #-32]	; 0xffffffe0
   1978c:	str	r1, [fp, #-36]	; 0xffffffdc
   19790:	ldr	r1, [fp, #-8]
   19794:	ldr	r0, [r1]
   19798:	bl	142a8 <next@@Base>
   1979c:	ldr	r1, [pc, #824]	; 19adc <read_boolean_binary_expression@@Base+0x3ac>
   197a0:	add	r1, pc, r1
   197a4:	add	r2, r1, #8
   197a8:	add	r1, r1, #16
   197ac:	str	r0, [fp, #-28]	; 0xffffffe4
   197b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   197b4:	ldr	r0, [r0]
   197b8:	cmp	r0, #1
   197bc:	str	r2, [sp, #36]	; 0x24
   197c0:	str	r1, [sp, #32]
   197c4:	beq	19890 <read_boolean_binary_expression@@Base+0x160>
   197c8:	ldr	r0, [sp, #36]	; 0x24
   197cc:	ldr	r1, [pc, #800]	; 19af4 <read_boolean_binary_expression@@Base+0x3c4>
   197d0:	add	r1, pc, r1
   197d4:	add	r2, r1, #24
   197d8:	add	r1, r1, #32
   197dc:	ldr	r3, [r0]
   197e0:	ldr	ip, [r0, #4]
   197e4:	adds	r3, r3, #1
   197e8:	adc	ip, ip, #0
   197ec:	str	r3, [r0]
   197f0:	str	ip, [r0, #4]
   197f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   197f8:	ldr	r0, [r0]
   197fc:	cmp	r0, #12
   19800:	str	r2, [sp, #28]
   19804:	str	r1, [sp, #24]
   19808:	bne	19858 <read_boolean_binary_expression@@Base+0x128>
   1980c:	ldr	r0, [sp, #28]
   19810:	ldr	r1, [r0]
   19814:	ldr	r2, [r0, #4]
   19818:	adds	r1, r1, #1
   1981c:	adc	r2, r2, #0
   19820:	str	r1, [r0]
   19824:	str	r2, [r0, #4]
   19828:	ldr	r0, [fp, #-8]
   1982c:	ldr	r0, [r0]
   19830:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19834:	bl	13f98 <push_back@@Base>
   19838:	ldr	r0, [fp, #-8]
   1983c:	bl	19b04 <read_boolean_unary_expression@@Base>
   19840:	ldr	r1, [pc, #692]	; 19afc <read_boolean_binary_expression@@Base+0x3cc>
   19844:	add	r1, pc, r1
   19848:	add	r1, r1, #40	; 0x28
   1984c:	str	r0, [fp, #-4]
   19850:	str	r1, [sp, #20]
   19854:	b	19a90 <read_boolean_binary_expression@@Base+0x360>
   19858:	ldr	r0, [sp, #24]
   1985c:	ldr	r1, [pc, #660]	; 19af8 <read_boolean_binary_expression@@Base+0x3c8>
   19860:	add	r1, pc, r1
   19864:	add	r1, r1, #48	; 0x30
   19868:	ldr	r2, [r0]
   1986c:	ldr	r3, [r0, #4]
   19870:	adds	r2, r2, #1
   19874:	adc	r3, r3, #0
   19878:	str	r2, [r0]
   1987c:	str	r3, [r0, #4]
   19880:	movw	r0, #0
   19884:	str	r0, [fp, #-4]
   19888:	str	r1, [sp, #20]
   1988c:	b	19a90 <read_boolean_binary_expression@@Base+0x360>
   19890:	ldr	r0, [sp, #32]
   19894:	ldr	r1, [r0]
   19898:	ldr	r2, [r0, #4]
   1989c:	adds	r1, r1, #1
   198a0:	adc	r2, r2, #0
   198a4:	str	r1, [r0]
   198a8:	str	r2, [r0, #4]
   198ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   198b0:	str	r0, [fp, #-32]	; 0xffffffe0
   198b4:	movw	r0, #12
   198b8:	bl	11f90 <malloc@plt>
   198bc:	str	r0, [fp, #-16]
   198c0:	ldr	r0, [fp, #-16]
   198c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   198c8:	ldr	r1, [r1, #4]
   198cc:	bl	16bd0 <init_node_int@@Base>
   198d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   198d4:	bl	132d8 <free_token_int_value@@Base>
   198d8:	ldr	r0, [fp, #-16]
   198dc:	str	r0, [fp, #-20]	; 0xffffffec
   198e0:	ldr	r0, [fp, #-8]
   198e4:	ldr	r0, [r0]
   198e8:	bl	142a8 <next@@Base>
   198ec:	ldr	r1, [pc, #492]	; 19ae0 <read_boolean_binary_expression@@Base+0x3b0>
   198f0:	add	r1, pc, r1
   198f4:	add	r2, r1, #56	; 0x38
   198f8:	add	r1, r1, #64	; 0x40
   198fc:	str	r0, [fp, #-28]	; 0xffffffe4
   19900:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19904:	ldr	r0, [r0]
   19908:	cmp	r0, #12
   1990c:	str	r2, [sp, #16]
   19910:	str	r1, [sp, #12]
   19914:	beq	19958 <read_boolean_binary_expression@@Base+0x228>
   19918:	ldr	r0, [sp, #16]
   1991c:	ldr	r1, [r0]
   19920:	ldr	r2, [r0, #4]
   19924:	adds	r1, r1, #1
   19928:	adc	r2, r2, #0
   1992c:	str	r1, [r0]
   19930:	str	r2, [r0, #4]
   19934:	ldr	r0, [fp, #-20]	; 0xffffffec
   19938:	bl	16f38 <free_node@@Base>
   1993c:	ldr	r0, [pc, #428]	; 19af0 <read_boolean_binary_expression@@Base+0x3c0>
   19940:	add	r0, pc, r0
   19944:	add	r0, r0, #72	; 0x48
   19948:	movw	r1, #0
   1994c:	str	r1, [fp, #-4]
   19950:	str	r0, [sp, #20]
   19954:	b	19a90 <read_boolean_binary_expression@@Base+0x360>
   19958:	ldr	r0, [sp, #12]
   1995c:	ldr	r1, [r0]
   19960:	ldr	r2, [r0, #4]
   19964:	adds	r1, r1, #1
   19968:	adc	r2, r2, #0
   1996c:	str	r1, [r0]
   19970:	str	r2, [r0, #4]
   19974:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19978:	str	r0, [fp, #-36]	; 0xffffffdc
   1997c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19980:	bl	17870 <get_boolean_op_value@@Base>
   19984:	str	r0, [fp, #-40]	; 0xffffffd8
   19988:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1998c:	bl	1382c <free_token_boolean_op@@Base>
   19990:	ldr	r0, [fp, #-8]
   19994:	ldr	r0, [r0]
   19998:	bl	142a8 <next@@Base>
   1999c:	ldr	r1, [pc, #320]	; 19ae4 <read_boolean_binary_expression@@Base+0x3b4>
   199a0:	add	r1, pc, r1
   199a4:	add	r2, r1, #80	; 0x50
   199a8:	add	r1, r1, #88	; 0x58
   199ac:	str	r0, [fp, #-28]	; 0xffffffe4
   199b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   199b4:	ldr	r0, [r0]
   199b8:	cmp	r0, #1
   199bc:	str	r2, [sp, #8]
   199c0:	str	r1, [sp, #4]
   199c4:	beq	19a08 <read_boolean_binary_expression@@Base+0x2d8>
   199c8:	ldr	r0, [sp, #8]
   199cc:	ldr	r1, [r0]
   199d0:	ldr	r2, [r0, #4]
   199d4:	adds	r1, r1, #1
   199d8:	adc	r2, r2, #0
   199dc:	str	r1, [r0]
   199e0:	str	r2, [r0, #4]
   199e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   199e8:	bl	16f38 <free_node@@Base>
   199ec:	ldr	r0, [pc, #248]	; 19aec <read_boolean_binary_expression@@Base+0x3bc>
   199f0:	add	r0, pc, r0
   199f4:	add	r0, r0, #96	; 0x60
   199f8:	movw	r1, #0
   199fc:	str	r1, [fp, #-4]
   19a00:	str	r0, [sp, #20]
   19a04:	b	19a90 <read_boolean_binary_expression@@Base+0x360>
   19a08:	ldr	r0, [sp, #4]
   19a0c:	ldr	r1, [r0]
   19a10:	ldr	r2, [r0, #4]
   19a14:	adds	r1, r1, #1
   19a18:	adc	r2, r2, #0
   19a1c:	str	r1, [r0]
   19a20:	str	r2, [r0, #4]
   19a24:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19a28:	str	r0, [fp, #-32]	; 0xffffffe0
   19a2c:	movw	r0, #12
   19a30:	bl	11f90 <malloc@plt>
   19a34:	str	r0, [fp, #-16]
   19a38:	ldr	r0, [fp, #-16]
   19a3c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19a40:	ldr	r1, [r1, #4]
   19a44:	bl	16bd0 <init_node_int@@Base>
   19a48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19a4c:	bl	132d8 <free_token_int_value@@Base>
   19a50:	ldr	r0, [fp, #-16]
   19a54:	str	r0, [fp, #-24]	; 0xffffffe8
   19a58:	movw	r0, #20
   19a5c:	bl	11f90 <malloc@plt>
   19a60:	str	r0, [fp, #-12]
   19a64:	ldr	r0, [fp, #-12]
   19a68:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19a6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19a70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19a74:	bl	16e68 <init_node_boolean_operator@@Base>
   19a78:	ldr	r0, [pc, #104]	; 19ae8 <read_boolean_binary_expression@@Base+0x3b8>
   19a7c:	add	r0, pc, r0
   19a80:	add	r0, r0, #104	; 0x68
   19a84:	ldr	r1, [fp, #-12]
   19a88:	str	r1, [fp, #-4]
   19a8c:	str	r0, [sp, #20]
   19a90:	ldr	r0, [sp, #20]
   19a94:	ldr	r1, [r0]
   19a98:	ldr	r2, [r0, #4]
   19a9c:	adds	r1, r1, #1
   19aa0:	adc	r2, r2, #0
   19aa4:	str	r1, [r0]
   19aa8:	str	r2, [r0, #4]
   19aac:	ldr	r0, [pc, #76]	; 19b00 <read_boolean_binary_expression@@Base+0x3d0>
   19ab0:	add	r0, pc, r0
   19ab4:	ldr	r1, [r0, #112]	; 0x70
   19ab8:	ldr	r2, [r0, #116]	; 0x74
   19abc:	adds	r1, r1, #1
   19ac0:	adc	r2, r2, #0
   19ac4:	str	r1, [r0, #112]	; 0x70
   19ac8:	str	r2, [r0, #116]	; 0x74
   19acc:	ldr	r0, [fp, #-4]
   19ad0:	mov	sp, fp
   19ad4:	pop	{fp, pc}
   19ad8:	andeq	r8, r1, r8, asr #14
   19adc:	andeq	r8, r1, r8, ror #13
   19ae0:	muleq	r1, r8, r5
   19ae4:	andeq	r8, r1, r8, ror #9
   19ae8:	andeq	r8, r1, ip, lsl #8
   19aec:	muleq	r1, r8, r4
   19af0:	andeq	r8, r1, r8, asr #10
   19af4:			; <UNDEFINED> instruction: 0x000186b8
   19af8:	andeq	r8, r1, r8, lsr #12
   19afc:	andeq	r8, r1, r4, asr #12
   19b00:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>

00019b04 <read_boolean_unary_expression@@Base>:
   19b04:	push	{fp, lr}
   19b08:	mov	fp, sp
   19b0c:	sub	sp, sp, #64	; 0x40
   19b10:	ldr	r1, [pc, #564]	; 19d4c <read_boolean_unary_expression@@Base+0x248>
   19b14:	add	r1, pc, r1
   19b18:	str	r0, [sp, #28]
   19b1c:	str	r1, [sp, #24]
   19b20:	ldr	r0, [sp, #24]
   19b24:	ldr	r1, [r0]
   19b28:	ldr	r2, [r0, #4]
   19b2c:	adds	r1, r1, #1
   19b30:	adc	r2, r2, #0
   19b34:	str	r1, [r0]
   19b38:	str	r2, [r0, #4]
   19b3c:	ldr	r0, [sp, #28]
   19b40:	str	r0, [fp, #-8]
   19b44:	movw	r1, #0
   19b48:	str	r1, [fp, #-12]
   19b4c:	str	r1, [fp, #-16]
   19b50:	str	r1, [fp, #-20]	; 0xffffffec
   19b54:	str	r1, [fp, #-24]	; 0xffffffe8
   19b58:	str	r1, [fp, #-28]	; 0xffffffe4
   19b5c:	movw	r0, #20
   19b60:	bl	11f90 <malloc@plt>
   19b64:	str	r0, [fp, #-12]
   19b68:	ldr	r0, [fp, #-8]
   19b6c:	ldr	r0, [r0]
   19b70:	bl	142a8 <next@@Base>
   19b74:	ldr	r1, [pc, #468]	; 19d50 <read_boolean_unary_expression@@Base+0x24c>
   19b78:	add	r1, pc, r1
   19b7c:	add	r2, r1, #8
   19b80:	add	r1, r1, #16
   19b84:	str	r0, [fp, #-24]	; 0xffffffe8
   19b88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19b8c:	ldr	r0, [r0]
   19b90:	cmp	r0, #12
   19b94:	str	r2, [sp, #20]
   19b98:	str	r1, [sp, #16]
   19b9c:	beq	19be0 <read_boolean_unary_expression@@Base+0xdc>
   19ba0:	ldr	r0, [sp, #20]
   19ba4:	ldr	r1, [r0]
   19ba8:	ldr	r2, [r0, #4]
   19bac:	adds	r1, r1, #1
   19bb0:	adc	r2, r2, #0
   19bb4:	str	r1, [r0]
   19bb8:	str	r2, [r0, #4]
   19bbc:	ldr	r0, [fp, #-12]
   19bc0:	bl	17758 <free_node_boolean_operator@@Base>
   19bc4:	ldr	r0, [pc, #404]	; 19d60 <read_boolean_unary_expression@@Base+0x25c>
   19bc8:	add	r0, pc, r0
   19bcc:	add	r0, r0, #24
   19bd0:	movw	r1, #0
   19bd4:	str	r1, [fp, #-4]
   19bd8:	str	r0, [sp, #12]
   19bdc:	b	19d04 <read_boolean_unary_expression@@Base+0x200>
   19be0:	ldr	r0, [sp, #16]
   19be4:	ldr	r1, [r0]
   19be8:	ldr	r2, [r0, #4]
   19bec:	adds	r1, r1, #1
   19bf0:	adc	r2, r2, #0
   19bf4:	str	r1, [r0]
   19bf8:	str	r2, [r0, #4]
   19bfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19c00:	bl	17870 <get_boolean_op_value@@Base>
   19c04:	str	r0, [sp, #32]
   19c08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19c0c:	bl	1382c <free_token_boolean_op@@Base>
   19c10:	ldr	r0, [fp, #-8]
   19c14:	ldr	r0, [r0]
   19c18:	bl	142a8 <next@@Base>
   19c1c:	ldr	r1, [pc, #304]	; 19d54 <read_boolean_unary_expression@@Base+0x250>
   19c20:	add	r1, pc, r1
   19c24:	add	r2, r1, #32
   19c28:	add	r1, r1, #40	; 0x28
   19c2c:	str	r0, [fp, #-24]	; 0xffffffe8
   19c30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19c34:	ldr	r0, [r0]
   19c38:	cmp	r0, #1
   19c3c:	str	r2, [sp, #8]
   19c40:	str	r1, [sp, #4]
   19c44:	beq	19c88 <read_boolean_unary_expression@@Base+0x184>
   19c48:	ldr	r0, [sp, #8]
   19c4c:	ldr	r1, [r0]
   19c50:	ldr	r2, [r0, #4]
   19c54:	adds	r1, r1, #1
   19c58:	adc	r2, r2, #0
   19c5c:	str	r1, [r0]
   19c60:	str	r2, [r0, #4]
   19c64:	ldr	r0, [fp, #-12]
   19c68:	bl	17758 <free_node_boolean_operator@@Base>
   19c6c:	ldr	r0, [pc, #232]	; 19d5c <read_boolean_unary_expression@@Base+0x258>
   19c70:	add	r0, pc, r0
   19c74:	add	r0, r0, #48	; 0x30
   19c78:	movw	r1, #0
   19c7c:	str	r1, [fp, #-4]
   19c80:	str	r0, [sp, #12]
   19c84:	b	19d04 <read_boolean_unary_expression@@Base+0x200>
   19c88:	ldr	r0, [sp, #4]
   19c8c:	ldr	r1, [r0]
   19c90:	ldr	r2, [r0, #4]
   19c94:	adds	r1, r1, #1
   19c98:	adc	r2, r2, #0
   19c9c:	str	r1, [r0]
   19ca0:	str	r2, [r0, #4]
   19ca4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19ca8:	str	r0, [fp, #-28]	; 0xffffffe4
   19cac:	movw	r0, #12
   19cb0:	bl	11f90 <malloc@plt>
   19cb4:	str	r0, [fp, #-16]
   19cb8:	ldr	r0, [fp, #-16]
   19cbc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19cc0:	ldr	r1, [r1, #4]
   19cc4:	bl	16bd0 <init_node_int@@Base>
   19cc8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19ccc:	bl	132d8 <free_token_int_value@@Base>
   19cd0:	ldr	r0, [fp, #-16]
   19cd4:	str	r0, [fp, #-20]	; 0xffffffec
   19cd8:	ldr	r0, [fp, #-12]
   19cdc:	ldr	r1, [sp, #32]
   19ce0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ce4:	movw	r3, #0
   19ce8:	bl	16e68 <init_node_boolean_operator@@Base>
   19cec:	ldr	r0, [pc, #100]	; 19d58 <read_boolean_unary_expression@@Base+0x254>
   19cf0:	add	r0, pc, r0
   19cf4:	add	r0, r0, #56	; 0x38
   19cf8:	ldr	r1, [fp, #-12]
   19cfc:	str	r1, [fp, #-4]
   19d00:	str	r0, [sp, #12]
   19d04:	ldr	r0, [sp, #12]
   19d08:	ldr	r1, [r0]
   19d0c:	ldr	r2, [r0, #4]
   19d10:	adds	r1, r1, #1
   19d14:	adc	r2, r2, #0
   19d18:	str	r1, [r0]
   19d1c:	str	r2, [r0, #4]
   19d20:	ldr	r0, [pc, #60]	; 19d64 <read_boolean_unary_expression@@Base+0x260>
   19d24:	add	r0, pc, r0
   19d28:	ldr	r1, [r0, #64]	; 0x40
   19d2c:	ldr	r2, [r0, #68]	; 0x44
   19d30:	adds	r1, r1, #1
   19d34:	adc	r2, r2, #0
   19d38:	str	r1, [r0, #64]	; 0x40
   19d3c:	str	r2, [r0, #68]	; 0x44
   19d40:	ldr	r0, [fp, #-4]
   19d44:	mov	sp, fp
   19d48:	pop	{fp, pc}
   19d4c:	strdeq	r8, [r1], -r4
   19d50:	muleq	r1, r0, r3
   19d54:	andeq	r8, r1, r8, ror #5
   19d58:	andeq	r8, r1, r8, lsl r2
   19d5c:	muleq	r1, r8, r2
   19d60:	andeq	r8, r1, r0, asr #6
   19d64:	andeq	r8, r1, r4, ror #3
   19d68:	push	{r4, sl, fp, lr}
   19d6c:	add	fp, sp, #8
   19d70:	sub	sp, sp, #40	; 0x28
   19d74:	movw	r0, #0
   19d78:	str	r0, [fp, #-12]
   19d7c:	b	19d80 <read_boolean_unary_expression@@Base+0x27c>
   19d80:	ldr	r0, [fp, #-12]
   19d84:	ldr	r1, [pc, #244]	; 19e80 <read_boolean_unary_expression@@Base+0x37c>
   19d88:	add	r1, pc, r1
   19d8c:	movw	r2, #24
   19d90:	mul	r2, r0, r2
   19d94:	add	r1, r1, r2
   19d98:	ldr	r2, [r1]
   19d9c:	ldr	r3, [r1, #4]
   19da0:	ldr	ip, [r1, #8]
   19da4:	str	r0, [fp, #-16]
   19da8:	mov	r0, r2
   19dac:	str	r1, [fp, #-20]	; 0xffffffec
   19db0:	mov	r1, r3
   19db4:	mov	r2, ip
   19db8:	bl	1ba6c <__generate_code_for_binary_boolean_expression@@Base+0x994>
   19dbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   19dc0:	ldr	r1, [r0, #12]
   19dc4:	ldr	r2, [r0, #16]
   19dc8:	ldr	r3, [r0, #20]
   19dcc:	movw	ip, #0
   19dd0:	cmp	ip, r1
   19dd4:	str	r1, [sp, #24]
   19dd8:	str	r2, [sp, #20]
   19ddc:	str	r3, [sp, #16]
   19de0:	str	ip, [sp, #12]
   19de4:	bge	19e5c <read_boolean_unary_expression@@Base+0x358>
   19de8:	ldr	r0, [sp, #12]
   19dec:	add	r1, r0, r0, lsl #2
   19df0:	ldr	r2, [sp, #20]
   19df4:	ldr	r1, [r2, r1, lsl #2]!
   19df8:	ldr	r3, [r2, #4]
   19dfc:	ldr	ip, [r2, #8]
   19e00:	ldr	lr, [r2, #16]
   19e04:	ldrb	r2, [r2, #12]
   19e08:	mov	r4, sp
   19e0c:	str	lr, [r4]
   19e10:	str	r0, [sp, #8]
   19e14:	mov	r0, r1
   19e18:	mov	r1, r3
   19e1c:	str	r2, [sp, #4]
   19e20:	mov	r2, ip
   19e24:	ldr	r3, [sp, #4]
   19e28:	bl	1c18c <__generate_code_for_binary_boolean_expression@@Base+0x10b4>
   19e2c:	ldr	r0, [sp, #16]
   19e30:	ldr	r1, [sp, #8]
   19e34:	add	r2, r0, r1, lsl #3
   19e38:	ldr	r0, [r2]
   19e3c:	ldr	r1, [r2, #4]
   19e40:	bl	1ca40 <__generate_code_for_binary_boolean_expression@@Base+0x1968>
   19e44:	ldr	r0, [sp, #8]
   19e48:	add	r1, r0, #1
   19e4c:	ldr	r2, [sp, #24]
   19e50:	cmp	r1, r2
   19e54:	str	r1, [sp, #12]
   19e58:	blt	19de8 <read_boolean_unary_expression@@Base+0x2e4>
   19e5c:	bl	1d1c8 <__generate_code_for_binary_boolean_expression@@Base+0x20f0>
   19e60:	bl	1df34 <__generate_code_for_binary_boolean_expression@@Base+0x2e5c>
   19e64:	ldr	r0, [fp, #-16]
   19e68:	add	r1, r0, #1
   19e6c:	cmp	r1, #1
   19e70:	str	r1, [fp, #-12]
   19e74:	blt	19d80 <read_boolean_unary_expression@@Base+0x27c>
   19e78:	sub	sp, fp, #8
   19e7c:	pop	{r4, sl, fp, pc}
   19e80:	andeq	r6, r1, r0, asr #31
   19e84:	push	{fp, lr}
   19e88:	mov	fp, sp
   19e8c:	bl	19d68 <read_boolean_unary_expression@@Base+0x264>
   19e90:	ldr	r0, [pc, #936]	; 1a240 <read_boolean_unary_expression@@Base+0x73c>
   19e94:	add	r0, pc, r0
   19e98:	mov	r1, #0
   19e9c:	str	r1, [r0, #12]
   19ea0:	str	r1, [r0, #8]
   19ea4:	str	r1, [r0, #4]
   19ea8:	str	r1, [r0]
   19eac:	ldr	r0, [pc, #912]	; 1a244 <read_boolean_unary_expression@@Base+0x740>
   19eb0:	add	r0, pc, r0
   19eb4:	str	r1, [r0, #12]
   19eb8:	str	r1, [r0, #8]
   19ebc:	str	r1, [r0, #4]
   19ec0:	str	r1, [r0]
   19ec4:	ldr	r0, [pc, #892]	; 1a248 <read_boolean_unary_expression@@Base+0x744>
   19ec8:	add	r0, pc, r0
   19ecc:	str	r1, [r0, #12]
   19ed0:	str	r1, [r0, #8]
   19ed4:	str	r1, [r0, #4]
   19ed8:	str	r1, [r0]
   19edc:	ldr	r0, [pc, #872]	; 1a24c <read_boolean_unary_expression@@Base+0x748>
   19ee0:	add	r0, pc, r0
   19ee4:	str	r1, [r0, #116]	; 0x74
   19ee8:	str	r1, [r0, #112]	; 0x70
   19eec:	str	r1, [r0, #108]	; 0x6c
   19ef0:	str	r1, [r0, #104]	; 0x68
   19ef4:	str	r1, [r0, #100]	; 0x64
   19ef8:	str	r1, [r0, #96]	; 0x60
   19efc:	str	r1, [r0, #92]	; 0x5c
   19f00:	str	r1, [r0, #88]	; 0x58
   19f04:	str	r1, [r0, #84]	; 0x54
   19f08:	str	r1, [r0, #80]	; 0x50
   19f0c:	str	r1, [r0, #76]	; 0x4c
   19f10:	str	r1, [r0, #72]	; 0x48
   19f14:	str	r1, [r0, #68]	; 0x44
   19f18:	str	r1, [r0, #64]	; 0x40
   19f1c:	str	r1, [r0, #60]	; 0x3c
   19f20:	str	r1, [r0, #56]	; 0x38
   19f24:	str	r1, [r0, #52]	; 0x34
   19f28:	str	r1, [r0, #48]	; 0x30
   19f2c:	str	r1, [r0, #44]	; 0x2c
   19f30:	str	r1, [r0, #40]	; 0x28
   19f34:	str	r1, [r0, #36]	; 0x24
   19f38:	str	r1, [r0, #32]
   19f3c:	str	r1, [r0, #28]
   19f40:	str	r1, [r0, #24]
   19f44:	str	r1, [r0, #20]
   19f48:	str	r1, [r0, #16]
   19f4c:	str	r1, [r0, #12]
   19f50:	str	r1, [r0, #8]
   19f54:	str	r1, [r0, #4]
   19f58:	str	r1, [r0]
   19f5c:	ldr	r0, [pc, #748]	; 1a250 <read_boolean_unary_expression@@Base+0x74c>
   19f60:	add	r0, pc, r0
   19f64:	str	r1, [r0, #156]	; 0x9c
   19f68:	str	r1, [r0, #152]	; 0x98
   19f6c:	str	r1, [r0, #148]	; 0x94
   19f70:	str	r1, [r0, #144]	; 0x90
   19f74:	str	r1, [r0, #140]	; 0x8c
   19f78:	str	r1, [r0, #136]	; 0x88
   19f7c:	str	r1, [r0, #132]	; 0x84
   19f80:	str	r1, [r0, #128]	; 0x80
   19f84:	str	r1, [r0, #124]	; 0x7c
   19f88:	str	r1, [r0, #120]	; 0x78
   19f8c:	str	r1, [r0, #116]	; 0x74
   19f90:	str	r1, [r0, #112]	; 0x70
   19f94:	str	r1, [r0, #108]	; 0x6c
   19f98:	str	r1, [r0, #104]	; 0x68
   19f9c:	str	r1, [r0, #100]	; 0x64
   19fa0:	str	r1, [r0, #96]	; 0x60
   19fa4:	str	r1, [r0, #92]	; 0x5c
   19fa8:	str	r1, [r0, #88]	; 0x58
   19fac:	str	r1, [r0, #84]	; 0x54
   19fb0:	str	r1, [r0, #80]	; 0x50
   19fb4:	str	r1, [r0, #76]	; 0x4c
   19fb8:	str	r1, [r0, #72]	; 0x48
   19fbc:	str	r1, [r0, #68]	; 0x44
   19fc0:	str	r1, [r0, #64]	; 0x40
   19fc4:	str	r1, [r0, #60]	; 0x3c
   19fc8:	str	r1, [r0, #56]	; 0x38
   19fcc:	str	r1, [r0, #52]	; 0x34
   19fd0:	str	r1, [r0, #48]	; 0x30
   19fd4:	str	r1, [r0, #44]	; 0x2c
   19fd8:	str	r1, [r0, #40]	; 0x28
   19fdc:	str	r1, [r0, #36]	; 0x24
   19fe0:	str	r1, [r0, #32]
   19fe4:	str	r1, [r0, #28]
   19fe8:	str	r1, [r0, #24]
   19fec:	str	r1, [r0, #20]
   19ff0:	str	r1, [r0, #16]
   19ff4:	str	r1, [r0, #12]
   19ff8:	str	r1, [r0, #8]
   19ffc:	str	r1, [r0, #4]
   1a000:	str	r1, [r0]
   1a004:	ldr	r0, [pc, #584]	; 1a254 <read_boolean_unary_expression@@Base+0x750>
   1a008:	add	r0, pc, r0
   1a00c:	str	r1, [r0, #68]	; 0x44
   1a010:	str	r1, [r0, #64]	; 0x40
   1a014:	str	r1, [r0, #60]	; 0x3c
   1a018:	str	r1, [r0, #56]	; 0x38
   1a01c:	str	r1, [r0, #52]	; 0x34
   1a020:	str	r1, [r0, #48]	; 0x30
   1a024:	str	r1, [r0, #44]	; 0x2c
   1a028:	str	r1, [r0, #40]	; 0x28
   1a02c:	str	r1, [r0, #36]	; 0x24
   1a030:	str	r1, [r0, #32]
   1a034:	str	r1, [r0, #28]
   1a038:	str	r1, [r0, #24]
   1a03c:	str	r1, [r0, #20]
   1a040:	str	r1, [r0, #16]
   1a044:	str	r1, [r0, #12]
   1a048:	str	r1, [r0, #8]
   1a04c:	str	r1, [r0, #4]
   1a050:	str	r1, [r0]
   1a054:	ldr	r0, [pc, #508]	; 1a258 <read_boolean_unary_expression@@Base+0x754>
   1a058:	add	r0, pc, r0
   1a05c:	str	r1, [r0, #76]	; 0x4c
   1a060:	str	r1, [r0, #72]	; 0x48
   1a064:	str	r1, [r0, #68]	; 0x44
   1a068:	str	r1, [r0, #64]	; 0x40
   1a06c:	str	r1, [r0, #60]	; 0x3c
   1a070:	str	r1, [r0, #56]	; 0x38
   1a074:	str	r1, [r0, #52]	; 0x34
   1a078:	str	r1, [r0, #48]	; 0x30
   1a07c:	str	r1, [r0, #44]	; 0x2c
   1a080:	str	r1, [r0, #40]	; 0x28
   1a084:	str	r1, [r0, #36]	; 0x24
   1a088:	str	r1, [r0, #32]
   1a08c:	str	r1, [r0, #28]
   1a090:	str	r1, [r0, #24]
   1a094:	str	r1, [r0, #20]
   1a098:	str	r1, [r0, #16]
   1a09c:	str	r1, [r0, #12]
   1a0a0:	str	r1, [r0, #8]
   1a0a4:	str	r1, [r0, #4]
   1a0a8:	str	r1, [r0]
   1a0ac:	ldr	r0, [pc, #424]	; 1a25c <read_boolean_unary_expression@@Base+0x758>
   1a0b0:	add	r0, pc, r0
   1a0b4:	str	r1, [r0, #100]	; 0x64
   1a0b8:	str	r1, [r0, #96]	; 0x60
   1a0bc:	str	r1, [r0, #92]	; 0x5c
   1a0c0:	str	r1, [r0, #88]	; 0x58
   1a0c4:	str	r1, [r0, #84]	; 0x54
   1a0c8:	str	r1, [r0, #80]	; 0x50
   1a0cc:	str	r1, [r0, #76]	; 0x4c
   1a0d0:	str	r1, [r0, #72]	; 0x48
   1a0d4:	str	r1, [r0, #68]	; 0x44
   1a0d8:	str	r1, [r0, #64]	; 0x40
   1a0dc:	str	r1, [r0, #60]	; 0x3c
   1a0e0:	str	r1, [r0, #56]	; 0x38
   1a0e4:	str	r1, [r0, #52]	; 0x34
   1a0e8:	str	r1, [r0, #48]	; 0x30
   1a0ec:	str	r1, [r0, #44]	; 0x2c
   1a0f0:	str	r1, [r0, #40]	; 0x28
   1a0f4:	str	r1, [r0, #36]	; 0x24
   1a0f8:	str	r1, [r0, #32]
   1a0fc:	str	r1, [r0, #28]
   1a100:	str	r1, [r0, #24]
   1a104:	str	r1, [r0, #20]
   1a108:	str	r1, [r0, #16]
   1a10c:	str	r1, [r0, #12]
   1a110:	str	r1, [r0, #8]
   1a114:	str	r1, [r0, #4]
   1a118:	str	r1, [r0]
   1a11c:	ldr	r0, [pc, #316]	; 1a260 <read_boolean_unary_expression@@Base+0x75c>
   1a120:	add	r0, pc, r0
   1a124:	str	r1, [r0, #68]	; 0x44
   1a128:	str	r1, [r0, #64]	; 0x40
   1a12c:	str	r1, [r0, #60]	; 0x3c
   1a130:	str	r1, [r0, #56]	; 0x38
   1a134:	str	r1, [r0, #52]	; 0x34
   1a138:	str	r1, [r0, #48]	; 0x30
   1a13c:	str	r1, [r0, #44]	; 0x2c
   1a140:	str	r1, [r0, #40]	; 0x28
   1a144:	str	r1, [r0, #36]	; 0x24
   1a148:	str	r1, [r0, #32]
   1a14c:	str	r1, [r0, #28]
   1a150:	str	r1, [r0, #24]
   1a154:	str	r1, [r0, #20]
   1a158:	str	r1, [r0, #16]
   1a15c:	str	r1, [r0, #12]
   1a160:	str	r1, [r0, #8]
   1a164:	str	r1, [r0, #4]
   1a168:	str	r1, [r0]
   1a16c:	ldr	r0, [pc, #240]	; 1a264 <read_boolean_unary_expression@@Base+0x760>
   1a170:	add	r0, pc, r0
   1a174:	str	r1, [r0, #116]	; 0x74
   1a178:	str	r1, [r0, #112]	; 0x70
   1a17c:	str	r1, [r0, #108]	; 0x6c
   1a180:	str	r1, [r0, #104]	; 0x68
   1a184:	str	r1, [r0, #100]	; 0x64
   1a188:	str	r1, [r0, #96]	; 0x60
   1a18c:	str	r1, [r0, #92]	; 0x5c
   1a190:	str	r1, [r0, #88]	; 0x58
   1a194:	str	r1, [r0, #84]	; 0x54
   1a198:	str	r1, [r0, #80]	; 0x50
   1a19c:	str	r1, [r0, #76]	; 0x4c
   1a1a0:	str	r1, [r0, #72]	; 0x48
   1a1a4:	str	r1, [r0, #68]	; 0x44
   1a1a8:	str	r1, [r0, #64]	; 0x40
   1a1ac:	str	r1, [r0, #60]	; 0x3c
   1a1b0:	str	r1, [r0, #56]	; 0x38
   1a1b4:	str	r1, [r0, #52]	; 0x34
   1a1b8:	str	r1, [r0, #48]	; 0x30
   1a1bc:	str	r1, [r0, #44]	; 0x2c
   1a1c0:	str	r1, [r0, #40]	; 0x28
   1a1c4:	str	r1, [r0, #36]	; 0x24
   1a1c8:	str	r1, [r0, #32]
   1a1cc:	str	r1, [r0, #28]
   1a1d0:	str	r1, [r0, #24]
   1a1d4:	str	r1, [r0, #20]
   1a1d8:	str	r1, [r0, #16]
   1a1dc:	str	r1, [r0, #12]
   1a1e0:	str	r1, [r0, #8]
   1a1e4:	str	r1, [r0, #4]
   1a1e8:	str	r1, [r0]
   1a1ec:	ldr	r0, [pc, #116]	; 1a268 <read_boolean_unary_expression@@Base+0x764>
   1a1f0:	add	r0, pc, r0
   1a1f4:	str	r1, [r0, #68]	; 0x44
   1a1f8:	str	r1, [r0, #64]	; 0x40
   1a1fc:	str	r1, [r0, #60]	; 0x3c
   1a200:	str	r1, [r0, #56]	; 0x38
   1a204:	str	r1, [r0, #52]	; 0x34
   1a208:	str	r1, [r0, #48]	; 0x30
   1a20c:	str	r1, [r0, #44]	; 0x2c
   1a210:	str	r1, [r0, #40]	; 0x28
   1a214:	str	r1, [r0, #36]	; 0x24
   1a218:	str	r1, [r0, #32]
   1a21c:	str	r1, [r0, #28]
   1a220:	str	r1, [r0, #24]
   1a224:	str	r1, [r0, #20]
   1a228:	str	r1, [r0, #16]
   1a22c:	str	r1, [r0, #12]
   1a230:	str	r1, [r0, #8]
   1a234:	str	r1, [r0, #4]
   1a238:	str	r1, [r0]
   1a23c:	pop	{fp, pc}
   1a240:	andeq	r7, r1, r4, asr #26
   1a244:	andeq	r7, r1, r8, lsr sp
   1a248:	andeq	r7, r1, r0, lsr sp
   1a24c:	andeq	r7, r1, r8, lsr #26
   1a250:	andeq	r7, r1, r8, lsr #26
   1a254:	andeq	r7, r1, r0, lsr #26
   1a258:	andeq	r7, r1, r0, lsr #26
   1a25c:	andeq	r7, r1, r8, lsl sp
   1a260:	andeq	r7, r1, r8, lsl sp
   1a264:	andeq	r7, r1, r8, lsl sp
   1a268:	andeq	r7, r1, r8, lsl sp
   1a26c:	push	{fp, lr}
   1a270:	mov	fp, sp
   1a274:	ldr	r0, [pc, #16]	; 1a28c <read_boolean_unary_expression@@Base+0x788>
   1a278:	add	r0, pc, r0
   1a27c:	ldr	r1, [pc, #12]	; 1a290 <read_boolean_unary_expression@@Base+0x78c>
   1a280:	add	r1, pc, r1
   1a284:	bl	1e3e8 <__gcov_flush@@Base+0xb8>
   1a288:	pop	{fp, pc}
   1a28c:			; <UNDEFINED> instruction: 0xfffffae8
   1a290:			; <UNDEFINED> instruction: 0xfffffbfc

0001a294 <init_generator@@Base>:
   1a294:	push	{fp, lr}
   1a298:	mov	fp, sp
   1a29c:	sub	sp, sp, #32
   1a2a0:	ldr	r3, [pc, #160]	; 1a348 <init_generator@@Base+0xb4>
   1a2a4:	add	r3, pc, r3
   1a2a8:	str	r0, [sp, #16]
   1a2ac:	str	r1, [sp, #12]
   1a2b0:	str	r2, [sp, #8]
   1a2b4:	str	r3, [sp, #4]
   1a2b8:	ldr	r0, [sp, #4]
   1a2bc:	ldr	r1, [r0]
   1a2c0:	ldr	r2, [r0, #4]
   1a2c4:	adds	r1, r1, #1
   1a2c8:	adc	r2, r2, #0
   1a2cc:	str	r1, [r0]
   1a2d0:	str	r2, [r0, #4]
   1a2d4:	ldr	r0, [pc, #112]	; 1a34c <init_generator@@Base+0xb8>
   1a2d8:	add	r0, pc, r0
   1a2dc:	ldr	r1, [r0, #8]
   1a2e0:	ldr	r2, [r0, #12]
   1a2e4:	adds	r1, r1, #1
   1a2e8:	adc	r2, r2, #0
   1a2ec:	str	r1, [r0, #8]
   1a2f0:	str	r2, [r0, #12]
   1a2f4:	ldr	r0, [sp, #16]
   1a2f8:	str	r0, [fp, #-4]
   1a2fc:	ldr	r1, [sp, #12]
   1a300:	str	r1, [fp, #-8]
   1a304:	ldr	r2, [sp, #8]
   1a308:	str	r2, [fp, #-12]
   1a30c:	ldr	r3, [fp, #-8]
   1a310:	ldr	ip, [fp, #-4]
   1a314:	str	r3, [ip]
   1a318:	ldr	r0, [fp, #-12]
   1a31c:	ldr	r1, [pc, #44]	; 1a350 <init_generator@@Base+0xbc>
   1a320:	add	r1, pc, r1
   1a324:	bl	11ef4 <fopen@plt>
   1a328:	ldr	r1, [fp, #-4]
   1a32c:	str	r0, [r1, #4]
   1a330:	ldr	r0, [fp, #-4]
   1a334:	mov	r1, #0
   1a338:	str	r1, [r0, #12]
   1a33c:	str	r1, [r0, #8]
   1a340:	mov	sp, fp
   1a344:	pop	{fp, pc}
   1a348:			; <UNDEFINED> instruction: 0x00017cb4
   1a34c:	andeq	r7, r1, r0, lsl #25
   1a350:	andeq	r4, r0, r1, lsl #31

0001a354 <destroy_generator@@Base>:
   1a354:	push	{fp, lr}
   1a358:	mov	fp, sp
   1a35c:	sub	sp, sp, #16
   1a360:	ldr	r1, [pc, #96]	; 1a3c8 <destroy_generator@@Base+0x74>
   1a364:	add	r1, pc, r1
   1a368:	str	r0, [sp, #8]
   1a36c:	str	r1, [sp, #4]
   1a370:	ldr	r0, [sp, #4]
   1a374:	ldr	r1, [r0]
   1a378:	ldr	r2, [r0, #4]
   1a37c:	adds	r1, r1, #1
   1a380:	adc	r2, r2, #0
   1a384:	str	r1, [r0]
   1a388:	str	r2, [r0, #4]
   1a38c:	ldr	r0, [pc, #56]	; 1a3cc <destroy_generator@@Base+0x78>
   1a390:	add	r0, pc, r0
   1a394:	ldr	r1, [r0, #8]
   1a398:	ldr	r2, [r0, #12]
   1a39c:	adds	r1, r1, #1
   1a3a0:	adc	r2, r2, #0
   1a3a4:	str	r1, [r0, #8]
   1a3a8:	str	r2, [r0, #12]
   1a3ac:	ldr	r0, [sp, #8]
   1a3b0:	str	r0, [fp, #-4]
   1a3b4:	ldr	r1, [fp, #-4]
   1a3b8:	ldr	r0, [r1, #4]
   1a3bc:	bl	1205c <fclose@plt>
   1a3c0:	mov	sp, fp
   1a3c4:	pop	{fp, pc}
   1a3c8:	andeq	r7, r1, r4, lsl #24
   1a3cc:	ldrdeq	r7, [r1], -r8

0001a3d0 <generate_code@@Base>:
   1a3d0:	push	{fp, lr}
   1a3d4:	mov	fp, sp
   1a3d8:	sub	sp, sp, #16
   1a3dc:	ldr	r1, [pc, #128]	; 1a464 <generate_code@@Base+0x94>
   1a3e0:	add	r1, pc, r1
   1a3e4:	str	r0, [sp, #4]
   1a3e8:	str	r1, [sp]
   1a3ec:	ldr	r0, [sp]
   1a3f0:	ldr	r1, [r0]
   1a3f4:	ldr	r2, [r0, #4]
   1a3f8:	adds	r1, r1, #1
   1a3fc:	adc	r2, r2, #0
   1a400:	str	r1, [r0]
   1a404:	str	r2, [r0, #4]
   1a408:	ldr	r0, [pc, #88]	; 1a468 <generate_code@@Base+0x98>
   1a40c:	add	r0, pc, r0
   1a410:	ldr	r1, [r0, #8]
   1a414:	ldr	r2, [r0, #12]
   1a418:	adds	r1, r1, #1
   1a41c:	adc	r2, r2, #0
   1a420:	str	r1, [r0, #8]
   1a424:	str	r2, [r0, #12]
   1a428:	ldr	r0, [sp, #4]
   1a42c:	str	r0, [fp, #-4]
   1a430:	movw	r1, #0
   1a434:	str	r1, [sp, #8]
   1a438:	ldr	r1, [fp, #-4]
   1a43c:	ldr	r0, [r1]
   1a440:	bl	184ac <build_ast@@Base>
   1a444:	str	r0, [sp, #8]
   1a448:	ldr	r0, [fp, #-4]
   1a44c:	ldr	r1, [sp, #8]
   1a450:	bl	1a46c <__generate_code@@Base>
   1a454:	ldr	r0, [sp, #8]
   1a458:	bl	16f38 <free_node@@Base>
   1a45c:	mov	sp, fp
   1a460:	pop	{fp, pc}
   1a464:	muleq	r1, r8, fp
   1a468:	andeq	r7, r1, ip, ror #22

0001a46c <__generate_code@@Base>:
   1a46c:	push	{fp, lr}
   1a470:	mov	fp, sp
   1a474:	sub	sp, sp, #24
   1a478:	ldr	r2, [pc, #140]	; 1a50c <__generate_code@@Base+0xa0>
   1a47c:	add	r2, pc, r2
   1a480:	str	r0, [sp, #12]
   1a484:	str	r1, [sp, #8]
   1a488:	str	r2, [sp, #4]
   1a48c:	ldr	r0, [sp, #4]
   1a490:	ldr	r1, [pc, #120]	; 1a510 <__generate_code@@Base+0xa4>
   1a494:	add	r1, pc, r1
   1a498:	ldr	r2, [r0]
   1a49c:	ldr	r3, [r0, #4]
   1a4a0:	adds	r2, r2, #1
   1a4a4:	adc	r3, r3, #0
   1a4a8:	str	r2, [r0]
   1a4ac:	str	r3, [r0, #4]
   1a4b0:	ldr	r0, [pc, #92]	; 1a514 <__generate_code@@Base+0xa8>
   1a4b4:	add	r0, pc, r0
   1a4b8:	ldr	r2, [r0, #8]
   1a4bc:	ldr	r3, [r0, #12]
   1a4c0:	adds	r2, r2, #1
   1a4c4:	adc	r3, r3, #0
   1a4c8:	str	r2, [r0, #8]
   1a4cc:	str	r3, [r0, #12]
   1a4d0:	ldr	r0, [sp, #12]
   1a4d4:	str	r0, [fp, #-4]
   1a4d8:	ldr	r2, [sp, #8]
   1a4dc:	str	r2, [fp, #-8]
   1a4e0:	ldr	r3, [fp, #-4]
   1a4e4:	ldr	r0, [r3, #4]
   1a4e8:	bl	11ffc <fprintf@plt>
   1a4ec:	ldr	r1, [fp, #-4]
   1a4f0:	ldr	r2, [fp, #-8]
   1a4f4:	str	r0, [sp]
   1a4f8:	mov	r0, r1
   1a4fc:	mov	r1, r2
   1a500:	bl	1a518 <__generate_code_for_main@@Base>
   1a504:	mov	sp, fp
   1a508:	pop	{fp, pc}
   1a50c:	andeq	r7, r1, ip, lsl #22
   1a510:	andeq	r4, r0, pc, lsl #28
   1a514:	ldrdeq	r7, [r1], -r4

0001a518 <__generate_code_for_main@@Base>:
   1a518:	push	{fp, lr}
   1a51c:	mov	fp, sp
   1a520:	sub	sp, sp, #40	; 0x28
   1a524:	ldr	r2, [pc, #296]	; 1a654 <__generate_code_for_main@@Base+0x13c>
   1a528:	add	r2, pc, r2
   1a52c:	str	r0, [fp, #-12]
   1a530:	str	r1, [fp, #-16]
   1a534:	str	r2, [sp, #20]
   1a538:	ldr	r0, [sp, #20]
   1a53c:	ldr	r1, [r0]
   1a540:	ldr	r2, [r0, #4]
   1a544:	adds	r1, r1, #1
   1a548:	adc	r2, r2, #0
   1a54c:	str	r1, [r0]
   1a550:	str	r2, [r0, #4]
   1a554:	ldr	r0, [fp, #-12]
   1a558:	str	r0, [fp, #-4]
   1a55c:	ldr	r1, [fp, #-16]
   1a560:	str	r1, [fp, #-8]
   1a564:	ldr	r2, [fp, #-8]
   1a568:	ldr	r3, [pc, #244]	; 1a664 <__generate_code_for_main@@Base+0x14c>
   1a56c:	add	r3, pc, r3
   1a570:	add	ip, r3, #16
   1a574:	add	r3, r3, #8
   1a578:	ldr	r2, [r2]
   1a57c:	cmp	r2, #2
   1a580:	str	ip, [sp, #16]
   1a584:	str	r3, [sp, #12]
   1a588:	bne	1a5cc <__generate_code_for_main@@Base+0xb4>
   1a58c:	b	1a590 <__generate_code_for_main@@Base+0x78>
   1a590:	ldr	r0, [sp, #16]
   1a594:	ldr	r1, [r0]
   1a598:	ldr	r2, [r0, #4]
   1a59c:	adds	r1, r1, #1
   1a5a0:	adc	r2, r2, #0
   1a5a4:	str	r1, [r0]
   1a5a8:	str	r2, [r0, #4]
   1a5ac:	ldr	r0, [fp, #-4]
   1a5b0:	ldr	r1, [fp, #-8]
   1a5b4:	bl	1a66c <__generate_code_for_function@@Base>
   1a5b8:	ldr	r0, [pc, #152]	; 1a658 <__generate_code_for_main@@Base+0x140>
   1a5bc:	add	r0, pc, r0
   1a5c0:	add	r0, r0, #24
   1a5c4:	str	r0, [sp, #8]
   1a5c8:	b	1a610 <__generate_code_for_main@@Base+0xf8>
   1a5cc:	ldr	r0, [sp, #12]
   1a5d0:	ldr	r1, [pc, #132]	; 1a65c <__generate_code_for_main@@Base+0x144>
   1a5d4:	add	r1, pc, r1
   1a5d8:	ldr	r2, [pc, #128]	; 1a660 <__generate_code_for_main@@Base+0x148>
   1a5dc:	ldr	r2, [pc, r2]
   1a5e0:	ldr	r3, [r0]
   1a5e4:	ldr	ip, [r0, #4]
   1a5e8:	adds	r3, r3, #1
   1a5ec:	adc	ip, ip, #0
   1a5f0:	str	r3, [r0]
   1a5f4:	str	ip, [r0, #4]
   1a5f8:	ldr	r0, [r2]
   1a5fc:	bl	11ffc <fprintf@plt>
   1a600:	movw	r1, #1
   1a604:	str	r0, [sp, #4]
   1a608:	mov	r0, r1
   1a60c:	bl	11fcc <exit@plt>
   1a610:	ldr	r0, [sp, #8]
   1a614:	ldr	r1, [r0]
   1a618:	ldr	r2, [r0, #4]
   1a61c:	adds	r1, r1, #1
   1a620:	adc	r2, r2, #0
   1a624:	str	r1, [r0]
   1a628:	str	r2, [r0, #4]
   1a62c:	ldr	r0, [pc, #52]	; 1a668 <__generate_code_for_main@@Base+0x150>
   1a630:	add	r0, pc, r0
   1a634:	ldr	r1, [r0, #32]
   1a638:	ldr	r2, [r0, #36]	; 0x24
   1a63c:	adds	r1, r1, #1
   1a640:	adc	r2, r2, #0
   1a644:	str	r1, [r0, #32]
   1a648:	str	r2, [r0, #36]	; 0x24
   1a64c:	mov	sp, fp
   1a650:	pop	{fp, pc}
   1a654:	andeq	r7, r1, r0, ror sl
   1a658:	ldrdeq	r7, [r1], -ip
   1a65c:	andeq	r4, r0, r5, ror #25
   1a660:	andeq	r6, r1, r0, ror #21
   1a664:	andeq	r7, r1, ip, lsr #20
   1a668:	andeq	r7, r1, r8, ror #18

0001a66c <__generate_code_for_function@@Base>:
   1a66c:	push	{fp, lr}
   1a670:	mov	fp, sp
   1a674:	sub	sp, sp, #24
   1a678:	ldr	r2, [pc, #152]	; 1a718 <__generate_code_for_function@@Base+0xac>
   1a67c:	add	r2, pc, r2
   1a680:	str	r0, [sp, #12]
   1a684:	str	r1, [sp, #8]
   1a688:	str	r2, [sp, #4]
   1a68c:	ldr	r0, [sp, #4]
   1a690:	ldr	r1, [pc, #132]	; 1a71c <__generate_code_for_function@@Base+0xb0>
   1a694:	add	r1, pc, r1
   1a698:	ldr	r2, [r0]
   1a69c:	ldr	r3, [r0, #4]
   1a6a0:	adds	r2, r2, #1
   1a6a4:	adc	r3, r3, #0
   1a6a8:	str	r2, [r0]
   1a6ac:	str	r3, [r0, #4]
   1a6b0:	ldr	r0, [pc, #104]	; 1a720 <__generate_code_for_function@@Base+0xb4>
   1a6b4:	add	r0, pc, r0
   1a6b8:	ldr	r2, [r0, #8]
   1a6bc:	ldr	r3, [r0, #12]
   1a6c0:	adds	r2, r2, #1
   1a6c4:	adc	r3, r3, #0
   1a6c8:	str	r2, [r0, #8]
   1a6cc:	str	r3, [r0, #12]
   1a6d0:	ldr	r0, [sp, #12]
   1a6d4:	str	r0, [fp, #-4]
   1a6d8:	ldr	r2, [sp, #8]
   1a6dc:	str	r2, [fp, #-8]
   1a6e0:	ldr	r3, [fp, #-4]
   1a6e4:	ldr	r0, [r3, #4]
   1a6e8:	ldr	r3, [fp, #-8]
   1a6ec:	ldr	r2, [r3, #8]
   1a6f0:	bl	11ffc <fprintf@plt>
   1a6f4:	ldr	r1, [fp, #-4]
   1a6f8:	ldr	r2, [fp, #-8]
   1a6fc:	ldr	r2, [r2, #12]
   1a700:	str	r0, [sp]
   1a704:	mov	r0, r1
   1a708:	mov	r1, r2
   1a70c:	bl	1a724 <__generate_code_for_body@@Base>
   1a710:	mov	sp, fp
   1a714:	pop	{fp, pc}
   1a718:	andeq	r7, r1, r4, asr #18
   1a71c:	andeq	r4, r0, r4, asr ip
   1a720:	andeq	r7, r1, ip, lsl #18

0001a724 <__generate_code_for_body@@Base>:
   1a724:	push	{fp, lr}
   1a728:	mov	fp, sp
   1a72c:	sub	sp, sp, #72	; 0x48
   1a730:	ldr	r2, [pc, #588]	; 1a984 <__generate_code_for_body@@Base+0x260>
   1a734:	add	r2, pc, r2
   1a738:	str	r0, [fp, #-16]
   1a73c:	str	r1, [fp, #-20]	; 0xffffffec
   1a740:	str	r2, [fp, #-24]	; 0xffffffe8
   1a744:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a748:	ldr	r1, [pc, #568]	; 1a988 <__generate_code_for_body@@Base+0x264>
   1a74c:	add	r1, pc, r1
   1a750:	add	r1, r1, #8
   1a754:	ldr	r2, [r0]
   1a758:	ldr	r3, [r0, #4]
   1a75c:	adds	r2, r2, #1
   1a760:	adc	r3, r3, #0
   1a764:	str	r2, [r0]
   1a768:	str	r3, [r0, #4]
   1a76c:	ldr	r0, [fp, #-16]
   1a770:	str	r0, [fp, #-4]
   1a774:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a778:	str	r2, [fp, #-8]
   1a77c:	movw	r3, #0
   1a780:	str	r3, [fp, #-12]
   1a784:	str	r1, [fp, #-28]	; 0xffffffe4
   1a788:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a78c:	ldr	r1, [pc, #504]	; 1a98c <__generate_code_for_body@@Base+0x268>
   1a790:	add	r1, pc, r1
   1a794:	add	r2, r1, #16
   1a798:	add	r1, r1, #24
   1a79c:	ldr	r3, [r0]
   1a7a0:	ldr	ip, [r0, #4]
   1a7a4:	adds	r3, r3, #1
   1a7a8:	adc	ip, ip, #0
   1a7ac:	str	r3, [r0]
   1a7b0:	str	ip, [r0, #4]
   1a7b4:	ldr	r0, [fp, #-8]
   1a7b8:	movw	r3, #0
   1a7bc:	cmp	r0, r3
   1a7c0:	str	r2, [fp, #-32]	; 0xffffffe0
   1a7c4:	str	r1, [sp, #36]	; 0x24
   1a7c8:	beq	1a940 <__generate_code_for_body@@Base+0x21c>
   1a7cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a7d0:	ldr	r1, [r0]
   1a7d4:	ldr	r2, [r0, #4]
   1a7d8:	adds	r1, r1, #1
   1a7dc:	adc	r2, r2, #0
   1a7e0:	str	r1, [r0]
   1a7e4:	str	r2, [r0, #4]
   1a7e8:	ldr	r0, [fp, #-8]
   1a7ec:	str	r0, [fp, #-12]
   1a7f0:	ldr	r0, [fp, #-8]
   1a7f4:	ldr	r0, [r0, #4]
   1a7f8:	str	r0, [fp, #-8]
   1a7fc:	ldr	r0, [fp, #-12]
   1a800:	ldr	r1, [pc, #412]	; 1a9a4 <__generate_code_for_body@@Base+0x280>
   1a804:	add	r1, pc, r1
   1a808:	add	r2, r1, #48	; 0x30
   1a80c:	add	r3, r1, #40	; 0x28
   1a810:	add	r1, r1, #32
   1a814:	ldr	r0, [r0]
   1a818:	cmp	r0, #3
   1a81c:	str	r2, [sp, #32]
   1a820:	str	r1, [sp, #28]
   1a824:	str	r0, [sp, #24]
   1a828:	str	r3, [sp, #20]
   1a82c:	beq	1a854 <__generate_code_for_body@@Base+0x130>
   1a830:	b	1a834 <__generate_code_for_body@@Base+0x110>
   1a834:	ldr	r0, [sp, #24]
   1a838:	cmp	r0, #4
   1a83c:	ldr	r1, [sp, #32]
   1a840:	ldr	r2, [sp, #28]
   1a844:	str	r1, [sp, #16]
   1a848:	str	r2, [sp, #12]
   1a84c:	beq	1a890 <__generate_code_for_body@@Base+0x16c>
   1a850:	b	1a8cc <__generate_code_for_body@@Base+0x1a8>
   1a854:	ldr	r0, [sp, #20]
   1a858:	ldr	r1, [r0]
   1a85c:	ldr	r2, [r0, #4]
   1a860:	adds	r1, r1, #1
   1a864:	adc	r2, r2, #0
   1a868:	str	r1, [r0]
   1a86c:	str	r2, [r0, #4]
   1a870:	ldr	r0, [fp, #-4]
   1a874:	ldr	r1, [fp, #-12]
   1a878:	bl	1acb8 <__generate_code_for_return@@Base>
   1a87c:	ldr	r0, [pc, #272]	; 1a994 <__generate_code_for_body@@Base+0x270>
   1a880:	add	r0, pc, r0
   1a884:	add	r0, r0, #56	; 0x38
   1a888:	str	r0, [sp, #8]
   1a88c:	b	1a910 <__generate_code_for_body@@Base+0x1ec>
   1a890:	ldr	r0, [sp, #16]
   1a894:	ldr	r1, [r0]
   1a898:	ldr	r2, [r0, #4]
   1a89c:	adds	r1, r1, #1
   1a8a0:	adc	r2, r2, #0
   1a8a4:	str	r1, [r0]
   1a8a8:	str	r2, [r0, #4]
   1a8ac:	ldr	r0, [fp, #-4]
   1a8b0:	ldr	r1, [fp, #-12]
   1a8b4:	bl	1a9ac <__generate_code_for_if@@Base>
   1a8b8:	ldr	r0, [pc, #208]	; 1a990 <__generate_code_for_body@@Base+0x26c>
   1a8bc:	add	r0, pc, r0
   1a8c0:	add	r0, r0, #64	; 0x40
   1a8c4:	str	r0, [sp, #8]
   1a8c8:	b	1a910 <__generate_code_for_body@@Base+0x1ec>
   1a8cc:	ldr	r0, [sp, #12]
   1a8d0:	ldr	r1, [pc, #196]	; 1a99c <__generate_code_for_body@@Base+0x278>
   1a8d4:	add	r1, pc, r1
   1a8d8:	ldr	r2, [pc, #192]	; 1a9a0 <__generate_code_for_body@@Base+0x27c>
   1a8dc:	ldr	r2, [pc, r2]
   1a8e0:	ldr	r3, [r0]
   1a8e4:	ldr	ip, [r0, #4]
   1a8e8:	adds	r3, r3, #1
   1a8ec:	adc	ip, ip, #0
   1a8f0:	str	r3, [r0]
   1a8f4:	str	ip, [r0, #4]
   1a8f8:	ldr	r0, [r2]
   1a8fc:	bl	11ffc <fprintf@plt>
   1a900:	movw	r1, #1
   1a904:	str	r0, [sp, #4]
   1a908:	mov	r0, r1
   1a90c:	bl	11fcc <exit@plt>
   1a910:	ldr	r0, [sp, #8]
   1a914:	ldr	r1, [pc, #124]	; 1a998 <__generate_code_for_body@@Base+0x274>
   1a918:	add	r1, pc, r1
   1a91c:	add	r1, r1, #72	; 0x48
   1a920:	ldr	r2, [r0]
   1a924:	ldr	r3, [r0, #4]
   1a928:	adds	r2, r2, #1
   1a92c:	adc	r3, r3, #0
   1a930:	str	r2, [r0]
   1a934:	str	r3, [r0, #4]
   1a938:	str	r1, [fp, #-28]	; 0xffffffe4
   1a93c:	b	1a788 <__generate_code_for_body@@Base+0x64>
   1a940:	ldr	r0, [sp, #36]	; 0x24
   1a944:	ldr	r1, [r0]
   1a948:	ldr	r2, [r0, #4]
   1a94c:	adds	r1, r1, #1
   1a950:	adc	r2, r2, #0
   1a954:	str	r1, [r0]
   1a958:	str	r2, [r0, #4]
   1a95c:	ldr	r0, [pc, #68]	; 1a9a8 <__generate_code_for_body@@Base+0x284>
   1a960:	add	r0, pc, r0
   1a964:	ldr	r1, [r0, #80]	; 0x50
   1a968:	ldr	r2, [r0, #84]	; 0x54
   1a96c:	adds	r1, r1, #1
   1a970:	adc	r2, r2, #0
   1a974:	str	r1, [r0, #80]	; 0x50
   1a978:	str	r2, [r0, #84]	; 0x54
   1a97c:	mov	sp, fp
   1a980:	pop	{fp, pc}
   1a984:	andeq	r7, r1, r4, lsr #17
   1a988:	andeq	r7, r1, ip, lsl #17
   1a98c:	andeq	r7, r1, r8, asr #16
   1a990:	andeq	r7, r1, ip, lsl r7
   1a994:	andeq	r7, r1, r8, asr r7
   1a998:	andeq	r7, r1, r0, asr #13
   1a99c:	andeq	r4, r0, sl, lsl fp
   1a9a0:	andeq	r6, r1, r0, ror #15
   1a9a4:	ldrdeq	r7, [r1], -r4
   1a9a8:	andeq	r7, r1, r8, ror r6

0001a9ac <__generate_code_for_if@@Base>:
   1a9ac:	push	{fp, lr}
   1a9b0:	mov	fp, sp
   1a9b4:	sub	sp, sp, #40	; 0x28
   1a9b8:	ldr	r2, [pc, #364]	; 1ab2c <__generate_code_for_if@@Base+0x180>
   1a9bc:	add	r2, pc, r2
   1a9c0:	str	r0, [sp, #20]
   1a9c4:	str	r1, [sp, #16]
   1a9c8:	str	r2, [sp, #12]
   1a9cc:	ldr	r0, [sp, #12]
   1a9d0:	ldr	r1, [pc, #348]	; 1ab34 <__generate_code_for_if@@Base+0x188>
   1a9d4:	add	r1, pc, r1
   1a9d8:	ldr	r2, [r0]
   1a9dc:	ldr	r3, [r0, #4]
   1a9e0:	adds	r2, r2, #1
   1a9e4:	adc	r3, r3, #0
   1a9e8:	str	r2, [r0]
   1a9ec:	str	r3, [r0, #4]
   1a9f0:	ldr	r0, [sp, #20]
   1a9f4:	str	r0, [fp, #-4]
   1a9f8:	ldr	r2, [sp, #16]
   1a9fc:	str	r2, [fp, #-8]
   1aa00:	ldr	r3, [fp, #-4]
   1aa04:	ldr	ip, [r3, #8]
   1aa08:	ldr	r3, [r3, #12]
   1aa0c:	str	r3, [fp, #-12]
   1aa10:	str	ip, [fp, #-16]
   1aa14:	ldr	r3, [fp, #-4]
   1aa18:	ldr	ip, [r3, #8]
   1aa1c:	ldr	lr, [r3, #12]
   1aa20:	adds	ip, ip, #1
   1aa24:	adc	lr, lr, #0
   1aa28:	str	ip, [r3, #8]
   1aa2c:	str	lr, [r3, #12]
   1aa30:	ldr	r0, [fp, #-4]
   1aa34:	ldr	r3, [fp, #-8]
   1aa38:	ldr	r3, [r3, #8]
   1aa3c:	ldr	r2, [fp, #-16]
   1aa40:	ldr	ip, [fp, #-12]
   1aa44:	str	r1, [sp, #8]
   1aa48:	mov	r1, r3
   1aa4c:	mov	r3, ip
   1aa50:	bl	1ab44 <__generate_code_for_if_expression@@Base>
   1aa54:	ldr	r0, [fp, #-4]
   1aa58:	ldr	r1, [fp, #-8]
   1aa5c:	ldr	r1, [r1, #12]
   1aa60:	bl	1a724 <__generate_code_for_body@@Base>
   1aa64:	ldr	r0, [fp, #-4]
   1aa68:	ldr	r0, [r0, #4]
   1aa6c:	ldr	r2, [fp, #-16]
   1aa70:	ldr	r3, [fp, #-12]
   1aa74:	ldr	r1, [pc, #192]	; 1ab3c <__generate_code_for_if@@Base+0x190>
   1aa78:	add	r1, pc, r1
   1aa7c:	bl	11ffc <fprintf@plt>
   1aa80:	ldr	r1, [pc, #168]	; 1ab30 <__generate_code_for_if@@Base+0x184>
   1aa84:	add	r1, pc, r1
   1aa88:	add	r2, r1, #8
   1aa8c:	add	r1, r1, #16
   1aa90:	ldr	r3, [fp, #-8]
   1aa94:	ldr	r3, [r3, #16]
   1aa98:	movw	ip, #0
   1aa9c:	cmp	r3, ip
   1aaa0:	str	r2, [sp, #4]
   1aaa4:	str	r1, [sp]
   1aaa8:	beq	1aae8 <__generate_code_for_if@@Base+0x13c>
   1aaac:	ldr	r0, [sp, #4]
   1aab0:	ldr	r1, [r0]
   1aab4:	ldr	r2, [r0, #4]
   1aab8:	adds	r1, r1, #1
   1aabc:	adc	r2, r2, #0
   1aac0:	str	r1, [r0]
   1aac4:	str	r2, [r0, #4]
   1aac8:	ldr	r0, [fp, #-4]
   1aacc:	ldr	r1, [fp, #-8]
   1aad0:	ldr	r1, [r1, #16]
   1aad4:	bl	1a724 <__generate_code_for_body@@Base>
   1aad8:	ldr	r0, [pc, #88]	; 1ab38 <__generate_code_for_if@@Base+0x18c>
   1aadc:	add	r0, pc, r0
   1aae0:	add	r0, r0, #24
   1aae4:	str	r0, [sp]
   1aae8:	ldr	r0, [sp]
   1aaec:	ldr	r1, [r0]
   1aaf0:	ldr	r2, [r0, #4]
   1aaf4:	adds	r1, r1, #1
   1aaf8:	adc	r2, r2, #0
   1aafc:	str	r1, [r0]
   1ab00:	str	r2, [r0, #4]
   1ab04:	ldr	r0, [pc, #52]	; 1ab40 <__generate_code_for_if@@Base+0x194>
   1ab08:	add	r0, pc, r0
   1ab0c:	ldr	r1, [r0, #32]
   1ab10:	ldr	r2, [r0, #36]	; 0x24
   1ab14:	adds	r1, r1, #1
   1ab18:	adc	r2, r2, #0
   1ab1c:	str	r1, [r0, #32]
   1ab20:	str	r2, [r0, #36]	; 0x24
   1ab24:	mov	sp, fp
   1ab28:	pop	{fp, pc}
   1ab2c:	andeq	r7, r1, ip, ror r6
   1ab30:			; <UNDEFINED> instruction: 0x000175b4
   1ab34:	andeq	r4, r0, r9, lsl r9
   1ab38:	andeq	r7, r1, ip, asr r5
   1ab3c:	andeq	r4, r0, r5, ror r8
   1ab40:	andeq	r7, r1, r0, lsr r5

0001ab44 <__generate_code_for_if_expression@@Base>:
   1ab44:	push	{r4, sl, fp, lr}
   1ab48:	add	fp, sp, #8
   1ab4c:	sub	sp, sp, #56	; 0x38
   1ab50:	ldr	ip, [pc, #332]	; 1aca4 <__generate_code_for_if_expression@@Base+0x160>
   1ab54:	add	ip, pc, ip
   1ab58:	str	r1, [sp, #32]
   1ab5c:	str	r0, [sp, #28]
   1ab60:	str	r3, [sp, #24]
   1ab64:	str	r2, [sp, #20]
   1ab68:	str	ip, [sp, #16]
   1ab6c:	ldr	r0, [sp, #16]
   1ab70:	ldr	r1, [r0]
   1ab74:	ldr	r2, [r0, #4]
   1ab78:	adds	r1, r1, #1
   1ab7c:	adc	r2, r2, #0
   1ab80:	str	r1, [r0]
   1ab84:	str	r2, [r0, #4]
   1ab88:	ldr	r0, [sp, #28]
   1ab8c:	str	r0, [fp, #-12]
   1ab90:	ldr	r1, [sp, #32]
   1ab94:	str	r1, [fp, #-16]
   1ab98:	ldr	r2, [sp, #24]
   1ab9c:	str	r2, [fp, #-20]	; 0xffffffec
   1aba0:	ldr	r3, [sp, #20]
   1aba4:	str	r3, [fp, #-24]	; 0xffffffe8
   1aba8:	ldr	ip, [fp, #-16]
   1abac:	str	ip, [fp, #-28]	; 0xffffffe4
   1abb0:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1abb4:	ldr	lr, [pc, #244]	; 1acb0 <__generate_code_for_if_expression@@Base+0x16c>
   1abb8:	add	lr, pc, lr
   1abbc:	add	r4, lr, #16
   1abc0:	add	lr, lr, #8
   1abc4:	ldr	ip, [ip, #16]
   1abc8:	cmp	ip, #8
   1abcc:	str	r4, [sp, #12]
   1abd0:	str	lr, [sp, #8]
   1abd4:	bne	1ac20 <__generate_code_for_if_expression@@Base+0xdc>
   1abd8:	b	1abdc <__generate_code_for_if_expression@@Base+0x98>
   1abdc:	ldr	r0, [sp, #12]
   1abe0:	ldr	r1, [r0]
   1abe4:	ldr	r2, [r0, #4]
   1abe8:	adds	r1, r1, #1
   1abec:	adc	r2, r2, #0
   1abf0:	str	r1, [r0]
   1abf4:	str	r2, [r0, #4]
   1abf8:	ldr	r0, [fp, #-12]
   1abfc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ac00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ac04:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ac08:	bl	1aee4 <__generate_code_for_unary_boolean_expression@@Base>
   1ac0c:	ldr	r0, [pc, #148]	; 1aca8 <__generate_code_for_if_expression@@Base+0x164>
   1ac10:	add	r0, pc, r0
   1ac14:	add	r0, r0, #24
   1ac18:	str	r0, [sp, #4]
   1ac1c:	b	1ac60 <__generate_code_for_if_expression@@Base+0x11c>
   1ac20:	ldr	r0, [sp, #8]
   1ac24:	ldr	r1, [r0]
   1ac28:	ldr	r2, [r0, #4]
   1ac2c:	adds	r1, r1, #1
   1ac30:	adc	r2, r2, #0
   1ac34:	str	r1, [r0]
   1ac38:	str	r2, [r0, #4]
   1ac3c:	ldr	r0, [fp, #-12]
   1ac40:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ac44:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ac48:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ac4c:	bl	1b0d8 <__generate_code_for_binary_boolean_expression@@Base>
   1ac50:	ldr	r0, [pc, #84]	; 1acac <__generate_code_for_if_expression@@Base+0x168>
   1ac54:	add	r0, pc, r0
   1ac58:	add	r0, r0, #32
   1ac5c:	str	r0, [sp, #4]
   1ac60:	ldr	r0, [sp, #4]
   1ac64:	ldr	r1, [r0]
   1ac68:	ldr	r2, [r0, #4]
   1ac6c:	adds	r1, r1, #1
   1ac70:	adc	r2, r2, #0
   1ac74:	str	r1, [r0]
   1ac78:	str	r2, [r0, #4]
   1ac7c:	ldr	r0, [pc, #48]	; 1acb4 <__generate_code_for_if_expression@@Base+0x170>
   1ac80:	add	r0, pc, r0
   1ac84:	ldr	r1, [r0, #40]	; 0x28
   1ac88:	ldr	r2, [r0, #44]	; 0x2c
   1ac8c:	adds	r1, r1, #1
   1ac90:	adc	r2, r2, #0
   1ac94:	str	r1, [r0, #40]	; 0x28
   1ac98:	str	r2, [r0, #44]	; 0x2c
   1ac9c:	sub	sp, fp, #8
   1aca0:	pop	{r4, sl, fp, pc}
   1aca4:	andeq	r7, r1, r4, lsl r5
   1aca8:	andeq	r7, r1, r8, asr r4
   1acac:	andeq	r7, r1, r4, lsl r4
   1acb0:			; <UNDEFINED> instruction: 0x000174b0
   1acb4:	andeq	r7, r1, r8, ror #7

0001acb8 <__generate_code_for_return@@Base>:
   1acb8:	push	{fp, lr}
   1acbc:	mov	fp, sp
   1acc0:	sub	sp, sp, #40	; 0x28
   1acc4:	ldr	r2, [pc, #348]	; 1ae28 <__generate_code_for_return@@Base+0x170>
   1acc8:	add	r2, pc, r2
   1accc:	str	r0, [fp, #-16]
   1acd0:	str	r1, [sp, #20]
   1acd4:	str	r2, [sp, #16]
   1acd8:	ldr	r0, [sp, #16]
   1acdc:	ldr	r1, [r0]
   1ace0:	ldr	r2, [r0, #4]
   1ace4:	adds	r1, r1, #1
   1ace8:	adc	r2, r2, #0
   1acec:	str	r1, [r0]
   1acf0:	str	r2, [r0, #4]
   1acf4:	ldr	r0, [fp, #-16]
   1acf8:	str	r0, [fp, #-4]
   1acfc:	ldr	r1, [sp, #20]
   1ad00:	str	r1, [fp, #-8]
   1ad04:	ldr	r2, [fp, #-8]
   1ad08:	ldr	r2, [r2, #8]
   1ad0c:	str	r2, [fp, #-12]
   1ad10:	ldr	r2, [fp, #-4]
   1ad14:	ldr	r0, [r2, #4]
   1ad18:	ldr	r1, [pc, #284]	; 1ae3c <__generate_code_for_return@@Base+0x184>
   1ad1c:	add	r1, pc, r1
   1ad20:	bl	11ffc <fprintf@plt>
   1ad24:	ldr	r1, [fp, #-12]
   1ad28:	ldr	r2, [pc, #272]	; 1ae40 <__generate_code_for_return@@Base+0x188>
   1ad2c:	add	r2, pc, r2
   1ad30:	add	r3, r2, #16
   1ad34:	add	r2, r2, #8
   1ad38:	ldr	r1, [r1]
   1ad3c:	cmp	r1, #1
   1ad40:	str	r3, [sp, #12]
   1ad44:	str	r2, [sp, #8]
   1ad48:	bne	1ad8c <__generate_code_for_return@@Base+0xd4>
   1ad4c:	b	1ad50 <__generate_code_for_return@@Base+0x98>
   1ad50:	ldr	r0, [sp, #12]
   1ad54:	ldr	r1, [r0]
   1ad58:	ldr	r2, [r0, #4]
   1ad5c:	adds	r1, r1, #1
   1ad60:	adc	r2, r2, #0
   1ad64:	str	r1, [r0]
   1ad68:	str	r2, [r0, #4]
   1ad6c:	ldr	r0, [fp, #-4]
   1ad70:	ldr	r1, [fp, #-12]
   1ad74:	bl	1ae48 <__generate_code_for_int@@Base>
   1ad78:	ldr	r0, [pc, #172]	; 1ae2c <__generate_code_for_return@@Base+0x174>
   1ad7c:	add	r0, pc, r0
   1ad80:	add	r0, r0, #24
   1ad84:	str	r0, [sp, #4]
   1ad88:	b	1add0 <__generate_code_for_return@@Base+0x118>
   1ad8c:	ldr	r0, [sp, #8]
   1ad90:	ldr	r1, [pc, #156]	; 1ae34 <__generate_code_for_return@@Base+0x17c>
   1ad94:	add	r1, pc, r1
   1ad98:	ldr	r2, [pc, #152]	; 1ae38 <__generate_code_for_return@@Base+0x180>
   1ad9c:	ldr	r2, [pc, r2]
   1ada0:	ldr	r3, [r0]
   1ada4:	ldr	ip, [r0, #4]
   1ada8:	adds	r3, r3, #1
   1adac:	adc	ip, ip, #0
   1adb0:	str	r3, [r0]
   1adb4:	str	ip, [r0, #4]
   1adb8:	ldr	r0, [r2]
   1adbc:	bl	11ffc <fprintf@plt>
   1adc0:	movw	r1, #1
   1adc4:	str	r0, [sp]
   1adc8:	mov	r0, r1
   1adcc:	bl	11fcc <exit@plt>
   1add0:	ldr	r0, [sp, #4]
   1add4:	ldr	r1, [pc, #84]	; 1ae30 <__generate_code_for_return@@Base+0x178>
   1add8:	add	r1, pc, r1
   1addc:	ldr	r2, [r0]
   1ade0:	ldr	r3, [r0, #4]
   1ade4:	adds	r2, r2, #1
   1ade8:	adc	r3, r3, #0
   1adec:	str	r2, [r0]
   1adf0:	str	r3, [r0, #4]
   1adf4:	ldr	r0, [pc, #72]	; 1ae44 <__generate_code_for_return@@Base+0x18c>
   1adf8:	add	r0, pc, r0
   1adfc:	ldr	r2, [r0, #32]
   1ae00:	ldr	r3, [r0, #36]	; 0x24
   1ae04:	adds	r2, r2, #1
   1ae08:	adc	r3, r3, #0
   1ae0c:	str	r2, [r0, #32]
   1ae10:	str	r3, [r0, #36]	; 0x24
   1ae14:	ldr	r0, [fp, #-4]
   1ae18:	ldr	r0, [r0, #4]
   1ae1c:	bl	11ffc <fprintf@plt>
   1ae20:	mov	sp, fp
   1ae24:	pop	{fp, pc}
   1ae28:	ldrdeq	r7, [r1], -r0
   1ae2c:	andeq	r7, r1, ip, lsl r3
   1ae30:	andeq	r4, r0, r4, asr r5
   1ae34:	andeq	r4, r0, r2, ror r5
   1ae38:	andeq	r6, r1, r0, lsr #6
   1ae3c:	andeq	r4, r0, r0, ror #11
   1ae40:	andeq	r7, r1, ip, ror #6
   1ae44:	andeq	r7, r1, r0, lsr #5

0001ae48 <__generate_code_for_int@@Base>:
   1ae48:	push	{fp, lr}
   1ae4c:	mov	fp, sp
   1ae50:	sub	sp, sp, #24
   1ae54:	ldr	r2, [pc, #124]	; 1aed8 <__generate_code_for_int@@Base+0x90>
   1ae58:	add	r2, pc, r2
   1ae5c:	str	r0, [sp, #12]
   1ae60:	str	r1, [sp, #8]
   1ae64:	str	r2, [sp, #4]
   1ae68:	ldr	r0, [sp, #4]
   1ae6c:	ldr	r1, [pc, #104]	; 1aedc <__generate_code_for_int@@Base+0x94>
   1ae70:	add	r1, pc, r1
   1ae74:	ldr	r2, [r0]
   1ae78:	ldr	r3, [r0, #4]
   1ae7c:	adds	r2, r2, #1
   1ae80:	adc	r3, r3, #0
   1ae84:	str	r2, [r0]
   1ae88:	str	r3, [r0, #4]
   1ae8c:	ldr	r0, [pc, #76]	; 1aee0 <__generate_code_for_int@@Base+0x98>
   1ae90:	add	r0, pc, r0
   1ae94:	ldr	r2, [r0, #8]
   1ae98:	ldr	r3, [r0, #12]
   1ae9c:	adds	r2, r2, #1
   1aea0:	adc	r3, r3, #0
   1aea4:	str	r2, [r0, #8]
   1aea8:	str	r3, [r0, #12]
   1aeac:	ldr	r0, [sp, #12]
   1aeb0:	str	r0, [fp, #-4]
   1aeb4:	ldr	r2, [sp, #8]
   1aeb8:	str	r2, [fp, #-8]
   1aebc:	ldr	r3, [fp, #-4]
   1aec0:	ldr	r0, [r3, #4]
   1aec4:	ldr	r3, [fp, #-8]
   1aec8:	ldr	r2, [r3, #8]
   1aecc:	bl	11ffc <fprintf@plt>
   1aed0:	mov	sp, fp
   1aed4:	pop	{fp, pc}
   1aed8:	andeq	r7, r1, r8, ror #4
   1aedc:	andeq	r4, r0, r5, asr #9
   1aee0:	andeq	r7, r1, r0, lsr r2

0001aee4 <__generate_code_for_unary_boolean_expression@@Base>:
   1aee4:	push	{fp, lr}
   1aee8:	mov	fp, sp
   1aeec:	sub	sp, sp, #72	; 0x48
   1aef0:	ldr	ip, [pc, #440]	; 1b0b0 <__generate_code_for_unary_boolean_expression@@Base+0x1cc>
   1aef4:	add	ip, pc, ip
   1aef8:	str	r1, [fp, #-24]	; 0xffffffe8
   1aefc:	str	r0, [fp, #-28]	; 0xffffffe4
   1af00:	str	r3, [fp, #-32]	; 0xffffffe0
   1af04:	str	r2, [sp, #36]	; 0x24
   1af08:	str	ip, [sp, #32]
   1af0c:	ldr	r0, [sp, #32]
   1af10:	ldr	r1, [r0]
   1af14:	ldr	r2, [r0, #4]
   1af18:	adds	r1, r1, #1
   1af1c:	adc	r2, r2, #0
   1af20:	str	r1, [r0]
   1af24:	str	r2, [r0, #4]
   1af28:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1af2c:	str	r0, [fp, #-4]
   1af30:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1af34:	str	r1, [fp, #-8]
   1af38:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1af3c:	str	r2, [fp, #-12]
   1af40:	ldr	r3, [sp, #36]	; 0x24
   1af44:	str	r3, [fp, #-16]
   1af48:	ldr	ip, [fp, #-8]
   1af4c:	ldr	ip, [ip, #8]
   1af50:	str	ip, [fp, #-20]	; 0xffffffec
   1af54:	ldr	ip, [fp, #-4]
   1af58:	ldr	r0, [ip, #4]
   1af5c:	ldr	r1, [pc, #352]	; 1b0c4 <__generate_code_for_unary_boolean_expression@@Base+0x1e0>
   1af60:	add	r1, pc, r1
   1af64:	bl	11ffc <fprintf@plt>
   1af68:	ldr	r1, [fp, #-4]
   1af6c:	ldr	r1, [r1, #4]
   1af70:	ldr	r2, [pc, #336]	; 1b0c8 <__generate_code_for_unary_boolean_expression@@Base+0x1e4>
   1af74:	add	r2, pc, r2
   1af78:	str	r0, [sp, #28]
   1af7c:	mov	r0, r1
   1af80:	mov	r1, r2
   1af84:	bl	11ffc <fprintf@plt>
   1af88:	ldr	r1, [fp, #-4]
   1af8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1af90:	str	r0, [sp, #24]
   1af94:	mov	r0, r1
   1af98:	mov	r1, r2
   1af9c:	bl	1ae48 <__generate_code_for_int@@Base>
   1afa0:	ldr	r0, [fp, #-8]
   1afa4:	ldr	r1, [pc, #288]	; 1b0cc <__generate_code_for_unary_boolean_expression@@Base+0x1e8>
   1afa8:	add	r1, pc, r1
   1afac:	add	r2, r1, #16
   1afb0:	add	r1, r1, #8
   1afb4:	ldr	r0, [r0, #16]
   1afb8:	cmp	r0, #8
   1afbc:	str	r2, [sp, #20]
   1afc0:	str	r1, [sp, #16]
   1afc4:	bne	1b028 <__generate_code_for_unary_boolean_expression@@Base+0x144>
   1afc8:	b	1afcc <__generate_code_for_unary_boolean_expression@@Base+0xe8>
   1afcc:	ldr	r0, [sp, #20]
   1afd0:	ldr	r1, [pc, #224]	; 1b0b8 <__generate_code_for_unary_boolean_expression@@Base+0x1d4>
   1afd4:	add	r1, pc, r1
   1afd8:	ldr	r2, [r0]
   1afdc:	ldr	r3, [r0, #4]
   1afe0:	adds	r2, r2, #1
   1afe4:	adc	r3, r3, #0
   1afe8:	str	r2, [r0]
   1afec:	str	r3, [r0, #4]
   1aff0:	ldr	r0, [fp, #-4]
   1aff4:	ldr	r0, [r0, #4]
   1aff8:	ldr	r2, [fp, #-16]
   1affc:	ldr	r3, [fp, #-12]
   1b000:	ldr	ip, [pc, #200]	; 1b0d0 <__generate_code_for_unary_boolean_expression@@Base+0x1ec>
   1b004:	add	ip, pc, ip
   1b008:	str	r1, [sp, #12]
   1b00c:	mov	r1, ip
   1b010:	bl	11ffc <fprintf@plt>
   1b014:	ldr	r1, [pc, #152]	; 1b0b4 <__generate_code_for_unary_boolean_expression@@Base+0x1d0>
   1b018:	add	r1, pc, r1
   1b01c:	add	r1, r1, #24
   1b020:	str	r1, [sp, #8]
   1b024:	b	1b06c <__generate_code_for_unary_boolean_expression@@Base+0x188>
   1b028:	ldr	r0, [sp, #16]
   1b02c:	ldr	r1, [pc, #136]	; 1b0bc <__generate_code_for_unary_boolean_expression@@Base+0x1d8>
   1b030:	add	r1, pc, r1
   1b034:	ldr	r2, [pc, #132]	; 1b0c0 <__generate_code_for_unary_boolean_expression@@Base+0x1dc>
   1b038:	ldr	r2, [pc, r2]
   1b03c:	ldr	r3, [r0]
   1b040:	ldr	ip, [r0, #4]
   1b044:	adds	r3, r3, #1
   1b048:	adc	ip, ip, #0
   1b04c:	str	r3, [r0]
   1b050:	str	ip, [r0, #4]
   1b054:	ldr	r0, [r2]
   1b058:	bl	11ffc <fprintf@plt>
   1b05c:	movw	r1, #1
   1b060:	str	r0, [sp, #4]
   1b064:	mov	r0, r1
   1b068:	bl	11fcc <exit@plt>
   1b06c:	ldr	r0, [sp, #8]
   1b070:	ldr	r1, [r0]
   1b074:	ldr	r2, [r0, #4]
   1b078:	adds	r1, r1, #1
   1b07c:	adc	r2, r2, #0
   1b080:	str	r1, [r0]
   1b084:	str	r2, [r0, #4]
   1b088:	ldr	r0, [pc, #68]	; 1b0d4 <__generate_code_for_unary_boolean_expression@@Base+0x1f0>
   1b08c:	add	r0, pc, r0
   1b090:	ldr	r1, [r0, #32]
   1b094:	ldr	r2, [r0, #36]	; 0x24
   1b098:	adds	r1, r1, #1
   1b09c:	adc	r2, r2, #0
   1b0a0:	str	r1, [r0, #32]
   1b0a4:	str	r2, [r0, #36]	; 0x24
   1b0a8:	mov	sp, fp
   1b0ac:	pop	{fp, pc}
   1b0b0:	andeq	r7, r1, r4, ror #3
   1b0b4:	andeq	r7, r1, r0, asr #1
   1b0b8:	andeq	r4, r0, pc, lsl #7
   1b0bc:	muleq	r0, r2, r3
   1b0c0:	andeq	r6, r1, r4, lsl #1
   1b0c4:	andeq	r4, r0, r2, lsl #9
   1b0c8:	andeq	r4, r0, r5, asr #7
   1b0cc:	andeq	r7, r1, r0, lsr r1
   1b0d0:	andeq	r4, r0, pc, asr r3
   1b0d4:	andeq	r7, r1, ip, asr #32

0001b0d8 <__generate_code_for_binary_boolean_expression@@Base>:
   1b0d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b0dc:	add	fp, sp, #24
   1b0e0:	sub	sp, sp, #168	; 0xa8
   1b0e4:	ldr	ip, [pc, #1272]	; 1b5e4 <__generate_code_for_binary_boolean_expression@@Base+0x50c>
   1b0e8:	add	ip, pc, ip
   1b0ec:	str	r1, [fp, #-52]	; 0xffffffcc
   1b0f0:	str	r0, [fp, #-56]	; 0xffffffc8
   1b0f4:	str	r3, [fp, #-60]	; 0xffffffc4
   1b0f8:	str	r2, [fp, #-64]	; 0xffffffc0
   1b0fc:	str	ip, [fp, #-68]	; 0xffffffbc
   1b100:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b104:	ldr	r1, [r0]
   1b108:	ldr	r2, [r0, #4]
   1b10c:	adds	r1, r1, #1
   1b110:	adc	r2, r2, #0
   1b114:	str	r1, [r0]
   1b118:	str	r2, [r0, #4]
   1b11c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b120:	str	r0, [fp, #-28]	; 0xffffffe4
   1b124:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1b128:	str	r1, [fp, #-32]	; 0xffffffe0
   1b12c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1b130:	str	r2, [fp, #-36]	; 0xffffffdc
   1b134:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b138:	str	r3, [fp, #-40]	; 0xffffffd8
   1b13c:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1b140:	ldr	ip, [ip, #8]
   1b144:	str	ip, [fp, #-44]	; 0xffffffd4
   1b148:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1b14c:	ldr	ip, [ip, #12]
   1b150:	str	ip, [fp, #-48]	; 0xffffffd0
   1b154:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1b158:	ldr	r0, [ip, #4]
   1b15c:	ldr	r1, [pc, #1220]	; 1b628 <__generate_code_for_binary_boolean_expression@@Base+0x550>
   1b160:	add	r1, pc, r1
   1b164:	bl	11ffc <fprintf@plt>
   1b168:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b16c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1b170:	str	r0, [fp, #-72]	; 0xffffffb8
   1b174:	mov	r0, r1
   1b178:	mov	r1, r2
   1b17c:	bl	1ae48 <__generate_code_for_int@@Base>
   1b180:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b184:	ldr	r0, [r0, #4]
   1b188:	ldr	r1, [pc, #1180]	; 1b62c <__generate_code_for_binary_boolean_expression@@Base+0x554>
   1b18c:	add	r1, pc, r1
   1b190:	str	r1, [fp, #-76]	; 0xffffffb4
   1b194:	bl	11ffc <fprintf@plt>
   1b198:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b19c:	ldr	r1, [r1, #4]
   1b1a0:	ldr	r2, [pc, #1160]	; 1b630 <__generate_code_for_binary_boolean_expression@@Base+0x558>
   1b1a4:	add	r2, pc, r2
   1b1a8:	str	r0, [fp, #-80]	; 0xffffffb0
   1b1ac:	mov	r0, r1
   1b1b0:	mov	r1, r2
   1b1b4:	bl	11ffc <fprintf@plt>
   1b1b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b1bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1b1c0:	str	r0, [fp, #-84]	; 0xffffffac
   1b1c4:	mov	r0, r1
   1b1c8:	mov	r1, r2
   1b1cc:	bl	1ae48 <__generate_code_for_int@@Base>
   1b1d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b1d4:	ldr	r0, [r0, #4]
   1b1d8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b1dc:	bl	11ffc <fprintf@plt>
   1b1e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b1e4:	ldr	r1, [r1, #4]
   1b1e8:	ldr	r2, [pc, #1092]	; 1b634 <__generate_code_for_binary_boolean_expression@@Base+0x55c>
   1b1ec:	add	r2, pc, r2
   1b1f0:	str	r0, [fp, #-88]	; 0xffffffa8
   1b1f4:	mov	r0, r1
   1b1f8:	mov	r1, r2
   1b1fc:	bl	11ffc <fprintf@plt>
   1b200:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b204:	ldr	r2, [pc, #1068]	; 1b638 <__generate_code_for_binary_boolean_expression@@Base+0x560>
   1b208:	add	r2, pc, r2
   1b20c:	add	r3, r2, #72	; 0x48
   1b210:	add	ip, r2, #64	; 0x40
   1b214:	add	lr, r2, #56	; 0x38
   1b218:	add	r4, r2, #48	; 0x30
   1b21c:	add	r5, r2, #40	; 0x28
   1b220:	add	r6, r2, #32
   1b224:	add	r7, r2, #24
   1b228:	add	r8, r2, #16
   1b22c:	add	r2, r2, #8
   1b230:	ldr	r1, [r1, #16]
   1b234:	cmp	r1, #7
   1b238:	str	r3, [fp, #-92]	; 0xffffffa4
   1b23c:	str	ip, [sp, #96]	; 0x60
   1b240:	str	lr, [sp, #92]	; 0x5c
   1b244:	str	r4, [sp, #88]	; 0x58
   1b248:	str	r5, [sp, #84]	; 0x54
   1b24c:	str	r6, [sp, #80]	; 0x50
   1b250:	str	r7, [sp, #76]	; 0x4c
   1b254:	str	r8, [sp, #72]	; 0x48
   1b258:	str	r1, [sp, #68]	; 0x44
   1b25c:	str	r2, [sp, #64]	; 0x40
   1b260:	bhi	1b55c <__generate_code_for_binary_boolean_expression@@Base+0x484>
   1b264:	add	r0, pc, #72	; 0x48
   1b268:	ldr	r1, [sp, #68]	; 0x44
   1b26c:	ldr	r2, [r0, r1, lsl #2]
   1b270:	ldr	r3, [sp, #72]	; 0x48
   1b274:	ldr	ip, [sp, #76]	; 0x4c
   1b278:	ldr	lr, [sp, #80]	; 0x50
   1b27c:	ldr	r4, [sp, #84]	; 0x54
   1b280:	ldr	r5, [sp, #88]	; 0x58
   1b284:	ldr	r6, [sp, #92]	; 0x5c
   1b288:	ldr	r7, [sp, #96]	; 0x60
   1b28c:	ldr	r8, [fp, #-92]	; 0xffffffa4
   1b290:	str	r3, [sp, #60]	; 0x3c
   1b294:	str	ip, [sp, #56]	; 0x38
   1b298:	str	lr, [sp, #52]	; 0x34
   1b29c:	str	r4, [sp, #48]	; 0x30
   1b2a0:	str	r5, [sp, #44]	; 0x2c
   1b2a4:	str	r6, [sp, #40]	; 0x28
   1b2a8:	str	r7, [sp, #36]	; 0x24
   1b2ac:	str	r8, [sp, #32]
   1b2b0:	add	pc, r0, r2
   1b2b4:	andeq	r0, r0, r0, lsr #32
   1b2b8:	andeq	r0, r0, ip, ror r0
   1b2bc:	ldrdeq	r0, [r0], -r8
   1b2c0:	andeq	r0, r0, r4, lsr r1
   1b2c4:	muleq	r0, r0, r1
   1b2c8:	andeq	r0, r0, r0, asr #3
   1b2cc:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1b2d0:	andeq	r0, r0, ip, asr #4
   1b2d4:	ldr	r0, [sp, #60]	; 0x3c
   1b2d8:	ldr	r1, [pc, #828]	; 1b61c <__generate_code_for_binary_boolean_expression@@Base+0x544>
   1b2dc:	add	r1, pc, r1
   1b2e0:	ldr	r2, [r0]
   1b2e4:	ldr	r3, [r0, #4]
   1b2e8:	adds	r2, r2, #1
   1b2ec:	adc	r3, r3, #0
   1b2f0:	str	r2, [r0]
   1b2f4:	str	r3, [r0, #4]
   1b2f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b2fc:	ldr	r0, [r0, #4]
   1b300:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b304:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b308:	ldr	ip, [pc, #812]	; 1b63c <__generate_code_for_binary_boolean_expression@@Base+0x564>
   1b30c:	add	ip, pc, ip
   1b310:	str	r1, [sp, #28]
   1b314:	mov	r1, ip
   1b318:	bl	11ffc <fprintf@plt>
   1b31c:	ldr	r1, [pc, #756]	; 1b618 <__generate_code_for_binary_boolean_expression@@Base+0x540>
   1b320:	add	r1, pc, r1
   1b324:	add	r1, r1, #80	; 0x50
   1b328:	str	r1, [sp, #24]
   1b32c:	b	1b5a0 <__generate_code_for_binary_boolean_expression@@Base+0x4c8>
   1b330:	ldr	r0, [sp, #56]	; 0x38
   1b334:	ldr	r1, [pc, #728]	; 1b614 <__generate_code_for_binary_boolean_expression@@Base+0x53c>
   1b338:	add	r1, pc, r1
   1b33c:	ldr	r2, [r0]
   1b340:	ldr	r3, [r0, #4]
   1b344:	adds	r2, r2, #1
   1b348:	adc	r3, r3, #0
   1b34c:	str	r2, [r0]
   1b350:	str	r3, [r0, #4]
   1b354:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b358:	ldr	r0, [r0, #4]
   1b35c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b360:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b364:	ldr	ip, [pc, #724]	; 1b640 <__generate_code_for_binary_boolean_expression@@Base+0x568>
   1b368:	add	ip, pc, ip
   1b36c:	str	r1, [sp, #20]
   1b370:	mov	r1, ip
   1b374:	bl	11ffc <fprintf@plt>
   1b378:	ldr	r1, [pc, #656]	; 1b610 <__generate_code_for_binary_boolean_expression@@Base+0x538>
   1b37c:	add	r1, pc, r1
   1b380:	add	r1, r1, #88	; 0x58
   1b384:	str	r1, [sp, #24]
   1b388:	b	1b5a0 <__generate_code_for_binary_boolean_expression@@Base+0x4c8>
   1b38c:	ldr	r0, [sp, #52]	; 0x34
   1b390:	ldr	r1, [pc, #628]	; 1b60c <__generate_code_for_binary_boolean_expression@@Base+0x534>
   1b394:	add	r1, pc, r1
   1b398:	ldr	r2, [r0]
   1b39c:	ldr	r3, [r0, #4]
   1b3a0:	adds	r2, r2, #1
   1b3a4:	adc	r3, r3, #0
   1b3a8:	str	r2, [r0]
   1b3ac:	str	r3, [r0, #4]
   1b3b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b3b4:	ldr	r0, [r0, #4]
   1b3b8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b3bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b3c0:	ldr	ip, [pc, #636]	; 1b644 <__generate_code_for_binary_boolean_expression@@Base+0x56c>
   1b3c4:	add	ip, pc, ip
   1b3c8:	str	r1, [sp, #16]
   1b3cc:	mov	r1, ip
   1b3d0:	bl	11ffc <fprintf@plt>
   1b3d4:	ldr	r1, [pc, #556]	; 1b608 <__generate_code_for_binary_boolean_expression@@Base+0x530>
   1b3d8:	add	r1, pc, r1
   1b3dc:	add	r1, r1, #96	; 0x60
   1b3e0:	str	r1, [sp, #24]
   1b3e4:	b	1b5a0 <__generate_code_for_binary_boolean_expression@@Base+0x4c8>
   1b3e8:	ldr	r0, [sp, #48]	; 0x30
   1b3ec:	ldr	r1, [pc, #528]	; 1b604 <__generate_code_for_binary_boolean_expression@@Base+0x52c>
   1b3f0:	add	r1, pc, r1
   1b3f4:	ldr	r2, [r0]
   1b3f8:	ldr	r3, [r0, #4]
   1b3fc:	adds	r2, r2, #1
   1b400:	adc	r3, r3, #0
   1b404:	str	r2, [r0]
   1b408:	str	r3, [r0, #4]
   1b40c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b410:	ldr	r0, [r0, #4]
   1b414:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b418:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b41c:	ldr	ip, [pc, #548]	; 1b648 <__generate_code_for_binary_boolean_expression@@Base+0x570>
   1b420:	add	ip, pc, ip
   1b424:	str	r1, [sp, #12]
   1b428:	mov	r1, ip
   1b42c:	bl	11ffc <fprintf@plt>
   1b430:	ldr	r1, [pc, #456]	; 1b600 <__generate_code_for_binary_boolean_expression@@Base+0x528>
   1b434:	add	r1, pc, r1
   1b438:	add	r1, r1, #104	; 0x68
   1b43c:	str	r1, [sp, #24]
   1b440:	b	1b5a0 <__generate_code_for_binary_boolean_expression@@Base+0x4c8>
   1b444:	ldr	r0, [sp, #44]	; 0x2c
   1b448:	ldr	r1, [pc, #428]	; 1b5fc <__generate_code_for_binary_boolean_expression@@Base+0x524>
   1b44c:	add	r1, pc, r1
   1b450:	add	r1, r1, #112	; 0x70
   1b454:	ldr	r2, [r0]
   1b458:	ldr	r3, [r0, #4]
   1b45c:	adds	r2, r2, #1
   1b460:	adc	r3, r3, #0
   1b464:	str	r2, [r0]
   1b468:	str	r3, [r0, #4]
   1b46c:	str	r1, [sp, #24]
   1b470:	b	1b5a0 <__generate_code_for_binary_boolean_expression@@Base+0x4c8>
   1b474:	ldr	r0, [sp, #40]	; 0x28
   1b478:	ldr	r1, [pc, #376]	; 1b5f8 <__generate_code_for_binary_boolean_expression@@Base+0x520>
   1b47c:	add	r1, pc, r1
   1b480:	add	r1, r1, #120	; 0x78
   1b484:	ldr	r2, [r0]
   1b488:	ldr	r3, [r0, #4]
   1b48c:	adds	r2, r2, #1
   1b490:	adc	r3, r3, #0
   1b494:	str	r2, [r0]
   1b498:	str	r3, [r0, #4]
   1b49c:	str	r1, [sp, #24]
   1b4a0:	b	1b5a0 <__generate_code_for_binary_boolean_expression@@Base+0x4c8>
   1b4a4:	ldr	r0, [sp, #36]	; 0x24
   1b4a8:	ldr	r1, [pc, #324]	; 1b5f4 <__generate_code_for_binary_boolean_expression@@Base+0x51c>
   1b4ac:	add	r1, pc, r1
   1b4b0:	ldr	r2, [r0]
   1b4b4:	ldr	r3, [r0, #4]
   1b4b8:	adds	r2, r2, #1
   1b4bc:	adc	r3, r3, #0
   1b4c0:	str	r2, [r0]
   1b4c4:	str	r3, [r0, #4]
   1b4c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b4cc:	ldr	r0, [r0, #4]
   1b4d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b4d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b4d8:	ldr	ip, [pc, #364]	; 1b64c <__generate_code_for_binary_boolean_expression@@Base+0x574>
   1b4dc:	add	ip, pc, ip
   1b4e0:	str	r1, [sp, #8]
   1b4e4:	mov	r1, ip
   1b4e8:	bl	11ffc <fprintf@plt>
   1b4ec:	ldr	r1, [pc, #252]	; 1b5f0 <__generate_code_for_binary_boolean_expression@@Base+0x518>
   1b4f0:	add	r1, pc, r1
   1b4f4:	add	r1, r1, #128	; 0x80
   1b4f8:	str	r1, [sp, #24]
   1b4fc:	b	1b5a0 <__generate_code_for_binary_boolean_expression@@Base+0x4c8>
   1b500:	ldr	r0, [sp, #32]
   1b504:	ldr	r1, [pc, #224]	; 1b5ec <__generate_code_for_binary_boolean_expression@@Base+0x514>
   1b508:	add	r1, pc, r1
   1b50c:	ldr	r2, [r0]
   1b510:	ldr	r3, [r0, #4]
   1b514:	adds	r2, r2, #1
   1b518:	adc	r3, r3, #0
   1b51c:	str	r2, [r0]
   1b520:	str	r3, [r0, #4]
   1b524:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b528:	ldr	r0, [r0, #4]
   1b52c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b530:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b534:	ldr	ip, [pc, #276]	; 1b650 <__generate_code_for_binary_boolean_expression@@Base+0x578>
   1b538:	add	ip, pc, ip
   1b53c:	str	r1, [sp, #4]
   1b540:	mov	r1, ip
   1b544:	bl	11ffc <fprintf@plt>
   1b548:	ldr	r1, [pc, #152]	; 1b5e8 <__generate_code_for_binary_boolean_expression@@Base+0x510>
   1b54c:	add	r1, pc, r1
   1b550:	add	r1, r1, #136	; 0x88
   1b554:	str	r1, [sp, #24]
   1b558:	b	1b5a0 <__generate_code_for_binary_boolean_expression@@Base+0x4c8>
   1b55c:	ldr	r0, [sp, #64]	; 0x40
   1b560:	ldr	r1, [pc, #184]	; 1b620 <__generate_code_for_binary_boolean_expression@@Base+0x548>
   1b564:	add	r1, pc, r1
   1b568:	ldr	r2, [pc, #180]	; 1b624 <__generate_code_for_binary_boolean_expression@@Base+0x54c>
   1b56c:	ldr	r2, [pc, r2]
   1b570:	ldr	r3, [r0]
   1b574:	ldr	ip, [r0, #4]
   1b578:	adds	r3, r3, #1
   1b57c:	adc	ip, ip, #0
   1b580:	str	r3, [r0]
   1b584:	str	ip, [r0, #4]
   1b588:	ldr	r0, [r2]
   1b58c:	bl	11ffc <fprintf@plt>
   1b590:	movw	r1, #1
   1b594:	str	r0, [sp]
   1b598:	mov	r0, r1
   1b59c:	bl	11fcc <exit@plt>
   1b5a0:	ldr	r0, [sp, #24]
   1b5a4:	ldr	r1, [r0]
   1b5a8:	ldr	r2, [r0, #4]
   1b5ac:	adds	r1, r1, #1
   1b5b0:	adc	r2, r2, #0
   1b5b4:	str	r1, [r0]
   1b5b8:	str	r2, [r0, #4]
   1b5bc:	ldr	r0, [pc, #144]	; 1b654 <__generate_code_for_binary_boolean_expression@@Base+0x57c>
   1b5c0:	add	r0, pc, r0
   1b5c4:	ldr	r1, [r0, #144]	; 0x90
   1b5c8:	ldr	r2, [r0, #148]	; 0x94
   1b5cc:	adds	r1, r1, #1
   1b5d0:	adc	r2, r2, #0
   1b5d4:	str	r1, [r0, #144]	; 0x90
   1b5d8:	str	r2, [r0, #148]	; 0x94
   1b5dc:	sub	sp, fp, #24
   1b5e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b5e4:	andeq	r7, r1, r0, lsr #32
   1b5e8:			; <UNDEFINED> instruction: 0x00016bbc
   1b5ec:	andeq	r3, r0, r7, lsr #29
   1b5f0:	andeq	r6, r1, r8, lsl ip
   1b5f4:	strdeq	r3, [r0], -r0
   1b5f8:	andeq	r6, r1, ip, lsl #25
   1b5fc:			; <UNDEFINED> instruction: 0x00016cbc
   1b600:	ldrdeq	r6, [r1], -r4
   1b604:	muleq	r0, r9, pc	; <UNPREDICTABLE>
   1b608:	andeq	r6, r1, r0, lsr sp
   1b60c:	andeq	r3, r0, r2, ror #31
   1b610:	andeq	r6, r1, ip, lsl #27
   1b614:	andeq	r4, r0, fp, lsr #32
   1b618:	andeq	r6, r1, r8, ror #27
   1b61c:	andeq	r4, r0, r4, ror r0
   1b620:	andeq	r3, r0, lr, asr lr
   1b624:	andeq	r5, r1, r0, asr fp
   1b628:	muleq	r0, ip, r1
   1b62c:	andeq	r3, r0, sl, asr #18
   1b630:	muleq	r0, r5, r1
   1b634:	andeq	r4, r0, r7, asr r1
   1b638:	andeq	r6, r1, r0, lsl #30
   1b63c:	andeq	r4, r0, r4, asr #32
   1b640:	strdeq	r3, [r0], -fp
   1b644:			; <UNDEFINED> instruction: 0x00003fb2
   1b648:	andeq	r3, r0, r9, ror #30
   1b64c:	andeq	r3, r0, r0, asr #29
   1b650:	andeq	r3, r0, r7, ror lr
   1b654:	andeq	r6, r1, r8, asr #22
   1b658:	push	{r4, sl, fp, lr}
   1b65c:	add	fp, sp, #8
   1b660:	sub	sp, sp, #40	; 0x28
   1b664:	movw	r0, #0
   1b668:	str	r0, [fp, #-12]
   1b66c:	b	1b670 <__generate_code_for_binary_boolean_expression@@Base+0x598>
   1b670:	ldr	r0, [fp, #-12]
   1b674:	ldr	r1, [pc, #244]	; 1b770 <__generate_code_for_binary_boolean_expression@@Base+0x698>
   1b678:	add	r1, pc, r1
   1b67c:	movw	r2, #24
   1b680:	mul	r2, r0, r2
   1b684:	add	r1, r1, r2
   1b688:	ldr	r2, [r1]
   1b68c:	ldr	r3, [r1, #4]
   1b690:	ldr	ip, [r1, #8]
   1b694:	str	r0, [fp, #-16]
   1b698:	mov	r0, r2
   1b69c:	str	r1, [fp, #-20]	; 0xffffffec
   1b6a0:	mov	r1, r3
   1b6a4:	mov	r2, ip
   1b6a8:	bl	1ba6c <__generate_code_for_binary_boolean_expression@@Base+0x994>
   1b6ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b6b0:	ldr	r1, [r0, #12]
   1b6b4:	ldr	r2, [r0, #16]
   1b6b8:	ldr	r3, [r0, #20]
   1b6bc:	movw	ip, #0
   1b6c0:	cmp	ip, r1
   1b6c4:	str	r1, [sp, #24]
   1b6c8:	str	r2, [sp, #20]
   1b6cc:	str	r3, [sp, #16]
   1b6d0:	str	ip, [sp, #12]
   1b6d4:	bge	1b74c <__generate_code_for_binary_boolean_expression@@Base+0x674>
   1b6d8:	ldr	r0, [sp, #12]
   1b6dc:	add	r1, r0, r0, lsl #2
   1b6e0:	ldr	r2, [sp, #20]
   1b6e4:	ldr	r1, [r2, r1, lsl #2]!
   1b6e8:	ldr	r3, [r2, #4]
   1b6ec:	ldr	ip, [r2, #8]
   1b6f0:	ldr	lr, [r2, #16]
   1b6f4:	ldrb	r2, [r2, #12]
   1b6f8:	mov	r4, sp
   1b6fc:	str	lr, [r4]
   1b700:	str	r0, [sp, #8]
   1b704:	mov	r0, r1
   1b708:	mov	r1, r3
   1b70c:	str	r2, [sp, #4]
   1b710:	mov	r2, ip
   1b714:	ldr	r3, [sp, #4]
   1b718:	bl	1c18c <__generate_code_for_binary_boolean_expression@@Base+0x10b4>
   1b71c:	ldr	r0, [sp, #16]
   1b720:	ldr	r1, [sp, #8]
   1b724:	add	r2, r0, r1, lsl #3
   1b728:	ldr	r0, [r2]
   1b72c:	ldr	r1, [r2, #4]
   1b730:	bl	1ca40 <__generate_code_for_binary_boolean_expression@@Base+0x1968>
   1b734:	ldr	r0, [sp, #8]
   1b738:	add	r1, r0, #1
   1b73c:	ldr	r2, [sp, #24]
   1b740:	cmp	r1, r2
   1b744:	str	r1, [sp, #12]
   1b748:	blt	1b6d8 <__generate_code_for_binary_boolean_expression@@Base+0x600>
   1b74c:	bl	1d1c8 <__generate_code_for_binary_boolean_expression@@Base+0x20f0>
   1b750:	bl	1df34 <__generate_code_for_binary_boolean_expression@@Base+0x2e5c>
   1b754:	ldr	r0, [fp, #-16]
   1b758:	add	r1, r0, #1
   1b75c:	cmp	r1, #1
   1b760:	str	r1, [fp, #-12]
   1b764:	blt	1b670 <__generate_code_for_binary_boolean_expression@@Base+0x598>
   1b768:	sub	sp, fp, #8
   1b76c:	pop	{r4, sl, fp, pc}
   1b770:	andeq	r5, r1, r0, ror r8
   1b774:	push	{fp, lr}
   1b778:	mov	fp, sp
   1b77c:	bl	1b658 <__generate_code_for_binary_boolean_expression@@Base+0x580>
   1b780:	ldr	r0, [pc, #648]	; 1ba10 <__generate_code_for_binary_boolean_expression@@Base+0x938>
   1b784:	add	r0, pc, r0
   1b788:	mov	r1, #0
   1b78c:	str	r1, [r0, #12]
   1b790:	str	r1, [r0, #8]
   1b794:	str	r1, [r0, #4]
   1b798:	str	r1, [r0]
   1b79c:	ldr	r0, [pc, #624]	; 1ba14 <__generate_code_for_binary_boolean_expression@@Base+0x93c>
   1b7a0:	add	r0, pc, r0
   1b7a4:	str	r1, [r0, #12]
   1b7a8:	str	r1, [r0, #8]
   1b7ac:	str	r1, [r0, #4]
   1b7b0:	str	r1, [r0]
   1b7b4:	ldr	r0, [pc, #604]	; 1ba18 <__generate_code_for_binary_boolean_expression@@Base+0x940>
   1b7b8:	add	r0, pc, r0
   1b7bc:	str	r1, [r0, #12]
   1b7c0:	str	r1, [r0, #8]
   1b7c4:	str	r1, [r0, #4]
   1b7c8:	str	r1, [r0]
   1b7cc:	ldr	r0, [pc, #584]	; 1ba1c <__generate_code_for_binary_boolean_expression@@Base+0x944>
   1b7d0:	add	r0, pc, r0
   1b7d4:	str	r1, [r0, #12]
   1b7d8:	str	r1, [r0, #8]
   1b7dc:	str	r1, [r0, #4]
   1b7e0:	str	r1, [r0]
   1b7e4:	ldr	r0, [pc, #564]	; 1ba20 <__generate_code_for_binary_boolean_expression@@Base+0x948>
   1b7e8:	add	r0, pc, r0
   1b7ec:	str	r1, [r0, #36]	; 0x24
   1b7f0:	str	r1, [r0, #32]
   1b7f4:	str	r1, [r0, #28]
   1b7f8:	str	r1, [r0, #24]
   1b7fc:	str	r1, [r0, #20]
   1b800:	str	r1, [r0, #16]
   1b804:	str	r1, [r0, #12]
   1b808:	str	r1, [r0, #8]
   1b80c:	str	r1, [r0, #4]
   1b810:	str	r1, [r0]
   1b814:	ldr	r0, [pc, #520]	; 1ba24 <__generate_code_for_binary_boolean_expression@@Base+0x94c>
   1b818:	add	r0, pc, r0
   1b81c:	str	r1, [r0, #12]
   1b820:	str	r1, [r0, #8]
   1b824:	str	r1, [r0, #4]
   1b828:	str	r1, [r0]
   1b82c:	ldr	r0, [pc, #500]	; 1ba28 <__generate_code_for_binary_boolean_expression@@Base+0x950>
   1b830:	add	r0, pc, r0
   1b834:	str	r1, [r0, #84]	; 0x54
   1b838:	str	r1, [r0, #80]	; 0x50
   1b83c:	str	r1, [r0, #76]	; 0x4c
   1b840:	str	r1, [r0, #72]	; 0x48
   1b844:	str	r1, [r0, #68]	; 0x44
   1b848:	str	r1, [r0, #64]	; 0x40
   1b84c:	str	r1, [r0, #60]	; 0x3c
   1b850:	str	r1, [r0, #56]	; 0x38
   1b854:	str	r1, [r0, #52]	; 0x34
   1b858:	str	r1, [r0, #48]	; 0x30
   1b85c:	str	r1, [r0, #44]	; 0x2c
   1b860:	str	r1, [r0, #40]	; 0x28
   1b864:	str	r1, [r0, #36]	; 0x24
   1b868:	str	r1, [r0, #32]
   1b86c:	str	r1, [r0, #28]
   1b870:	str	r1, [r0, #24]
   1b874:	str	r1, [r0, #20]
   1b878:	str	r1, [r0, #16]
   1b87c:	str	r1, [r0, #12]
   1b880:	str	r1, [r0, #8]
   1b884:	str	r1, [r0, #4]
   1b888:	str	r1, [r0]
   1b88c:	ldr	r0, [pc, #408]	; 1ba2c <__generate_code_for_binary_boolean_expression@@Base+0x954>
   1b890:	add	r0, pc, r0
   1b894:	str	r1, [r0, #36]	; 0x24
   1b898:	str	r1, [r0, #32]
   1b89c:	str	r1, [r0, #28]
   1b8a0:	str	r1, [r0, #24]
   1b8a4:	str	r1, [r0, #20]
   1b8a8:	str	r1, [r0, #16]
   1b8ac:	str	r1, [r0, #12]
   1b8b0:	str	r1, [r0, #8]
   1b8b4:	str	r1, [r0, #4]
   1b8b8:	str	r1, [r0]
   1b8bc:	ldr	r0, [pc, #364]	; 1ba30 <__generate_code_for_binary_boolean_expression@@Base+0x958>
   1b8c0:	add	r0, pc, r0
   1b8c4:	str	r1, [r0, #44]	; 0x2c
   1b8c8:	str	r1, [r0, #40]	; 0x28
   1b8cc:	str	r1, [r0, #36]	; 0x24
   1b8d0:	str	r1, [r0, #32]
   1b8d4:	str	r1, [r0, #28]
   1b8d8:	str	r1, [r0, #24]
   1b8dc:	str	r1, [r0, #20]
   1b8e0:	str	r1, [r0, #16]
   1b8e4:	str	r1, [r0, #12]
   1b8e8:	str	r1, [r0, #8]
   1b8ec:	str	r1, [r0, #4]
   1b8f0:	str	r1, [r0]
   1b8f4:	ldr	r0, [pc, #312]	; 1ba34 <__generate_code_for_binary_boolean_expression@@Base+0x95c>
   1b8f8:	add	r0, pc, r0
   1b8fc:	str	r1, [r0, #36]	; 0x24
   1b900:	str	r1, [r0, #32]
   1b904:	str	r1, [r0, #28]
   1b908:	str	r1, [r0, #24]
   1b90c:	str	r1, [r0, #20]
   1b910:	str	r1, [r0, #16]
   1b914:	str	r1, [r0, #12]
   1b918:	str	r1, [r0, #8]
   1b91c:	str	r1, [r0, #4]
   1b920:	str	r1, [r0]
   1b924:	ldr	r0, [pc, #268]	; 1ba38 <__generate_code_for_binary_boolean_expression@@Base+0x960>
   1b928:	add	r0, pc, r0
   1b92c:	str	r1, [r0, #12]
   1b930:	str	r1, [r0, #8]
   1b934:	str	r1, [r0, #4]
   1b938:	str	r1, [r0]
   1b93c:	ldr	r0, [pc, #248]	; 1ba3c <__generate_code_for_binary_boolean_expression@@Base+0x964>
   1b940:	add	r0, pc, r0
   1b944:	str	r1, [r0, #36]	; 0x24
   1b948:	str	r1, [r0, #32]
   1b94c:	str	r1, [r0, #28]
   1b950:	str	r1, [r0, #24]
   1b954:	str	r1, [r0, #20]
   1b958:	str	r1, [r0, #16]
   1b95c:	str	r1, [r0, #12]
   1b960:	str	r1, [r0, #8]
   1b964:	str	r1, [r0, #4]
   1b968:	str	r1, [r0]
   1b96c:	ldr	r0, [pc, #204]	; 1ba40 <__generate_code_for_binary_boolean_expression@@Base+0x968>
   1b970:	add	r0, pc, r0
   1b974:	str	r1, [r0, #148]	; 0x94
   1b978:	str	r1, [r0, #144]	; 0x90
   1b97c:	str	r1, [r0, #140]	; 0x8c
   1b980:	str	r1, [r0, #136]	; 0x88
   1b984:	str	r1, [r0, #132]	; 0x84
   1b988:	str	r1, [r0, #128]	; 0x80
   1b98c:	str	r1, [r0, #124]	; 0x7c
   1b990:	str	r1, [r0, #120]	; 0x78
   1b994:	str	r1, [r0, #116]	; 0x74
   1b998:	str	r1, [r0, #112]	; 0x70
   1b99c:	str	r1, [r0, #108]	; 0x6c
   1b9a0:	str	r1, [r0, #104]	; 0x68
   1b9a4:	str	r1, [r0, #100]	; 0x64
   1b9a8:	str	r1, [r0, #96]	; 0x60
   1b9ac:	str	r1, [r0, #92]	; 0x5c
   1b9b0:	str	r1, [r0, #88]	; 0x58
   1b9b4:	str	r1, [r0, #84]	; 0x54
   1b9b8:	str	r1, [r0, #80]	; 0x50
   1b9bc:	str	r1, [r0, #76]	; 0x4c
   1b9c0:	str	r1, [r0, #72]	; 0x48
   1b9c4:	str	r1, [r0, #68]	; 0x44
   1b9c8:	str	r1, [r0, #64]	; 0x40
   1b9cc:	str	r1, [r0, #60]	; 0x3c
   1b9d0:	str	r1, [r0, #56]	; 0x38
   1b9d4:	str	r1, [r0, #52]	; 0x34
   1b9d8:	str	r1, [r0, #48]	; 0x30
   1b9dc:	str	r1, [r0, #44]	; 0x2c
   1b9e0:	str	r1, [r0, #40]	; 0x28
   1b9e4:	str	r1, [r0, #36]	; 0x24
   1b9e8:	str	r1, [r0, #32]
   1b9ec:	str	r1, [r0, #28]
   1b9f0:	str	r1, [r0, #24]
   1b9f4:	str	r1, [r0, #20]
   1b9f8:	str	r1, [r0, #16]
   1b9fc:	str	r1, [r0, #12]
   1ba00:	str	r1, [r0, #8]
   1ba04:	str	r1, [r0, #4]
   1ba08:	str	r1, [r0]
   1ba0c:	pop	{fp, pc}
   1ba10:	ldrdeq	r6, [r1], -r4
   1ba14:	andeq	r6, r1, r8, asr #15
   1ba18:	andeq	r6, r1, r0, asr #15
   1ba1c:			; <UNDEFINED> instruction: 0x000167b8
   1ba20:			; <UNDEFINED> instruction: 0x000167b0
   1ba24:	andeq	r6, r1, r8, lsr #15
   1ba28:	andeq	r6, r1, r8, lsr #15
   1ba2c:	andeq	r6, r1, r8, lsr #15
   1ba30:	andeq	r6, r1, r8, lsr #15
   1ba34:	andeq	r6, r1, r0, lsr #15
   1ba38:	muleq	r1, r8, r7
   1ba3c:	muleq	r1, r8, r7
   1ba40:	muleq	r1, r8, r7
   1ba44:	push	{fp, lr}
   1ba48:	mov	fp, sp
   1ba4c:	ldr	r0, [pc, #16]	; 1ba64 <__generate_code_for_binary_boolean_expression@@Base+0x98c>
   1ba50:	add	r0, pc, r0
   1ba54:	ldr	r1, [pc, #12]	; 1ba68 <__generate_code_for_binary_boolean_expression@@Base+0x990>
   1ba58:	add	r1, pc, r1
   1ba5c:	bl	1e3e8 <__gcov_flush@@Base+0xb8>
   1ba60:	pop	{fp, pc}
   1ba64:			; <UNDEFINED> instruction: 0xfffffc00
   1ba68:			; <UNDEFINED> instruction: 0xfffffd14
   1ba6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba70:	add	fp, sp, #28
   1ba74:	sub	sp, sp, #36	; 0x24
   1ba78:	mov	r9, r1
   1ba7c:	mov	r6, r0
   1ba80:	add	r0, sp, #28
   1ba84:	add	r1, sp, #32
   1ba88:	mov	r8, r2
   1ba8c:	bl	1e880 <__gcov_flush@@Base+0x550>
   1ba90:	cmp	r0, #0
   1ba94:	beq	1bad8 <__generate_code_for_binary_boolean_expression@@Base+0xa00>
   1ba98:	mov	r4, r0
   1ba9c:	mov	r0, r6
   1baa0:	ldr	r5, [sp, #32]
   1baa4:	bl	11fd8 <strlen@plt>
   1baa8:	add	r0, r5, r0
   1baac:	add	r0, r0, #2
   1bab0:	bl	11f90 <malloc@plt>
   1bab4:	mov	r7, r0
   1bab8:	ldr	r0, [sp, #28]
   1babc:	mov	r1, r6
   1bac0:	mov	r2, r4
   1bac4:	str	r0, [sp]
   1bac8:	mov	r0, r7
   1bacc:	mov	r3, r5
   1bad0:	bl	1e914 <__gcov_flush@@Base+0x5e4>
   1bad4:	b	1bae4 <__generate_code_for_binary_boolean_expression@@Base+0xa0c>
   1bad8:	mov	r0, r6
   1badc:	bl	11f48 <strdup@plt>
   1bae0:	mov	r7, r0
   1bae4:	ldr	r0, [pc, #1492]	; 1c0c0 <__generate_code_for_binary_boolean_expression@@Base+0xfe8>
   1bae8:	ldr	r6, [pc, #1492]	; 1c0c4 <__generate_code_for_binary_boolean_expression@@Base+0xfec>
   1baec:	mov	r1, #2
   1baf0:	add	r0, pc, r0
   1baf4:	add	r6, pc, r6
   1baf8:	str	r7, [r0]
   1bafc:	mov	r0, r7
   1bb00:	mov	r5, #0
   1bb04:	strb	r5, [r6]
   1bb08:	bl	11f78 <open64@plt>
   1bb0c:	ldr	r4, [pc, #1460]	; 1c0c8 <__generate_code_for_binary_boolean_expression@@Base+0xff0>
   1bb10:	cmn	r0, #1
   1bb14:	add	r4, pc, r4
   1bb18:	str	r0, [r4]
   1bb1c:	beq	1bb2c <__generate_code_for_binary_boolean_expression@@Base+0xa54>
   1bb20:	ldr	r6, [pc, #1444]	; 1c0cc <__generate_code_for_binary_boolean_expression@@Base+0xff4>
   1bb24:	add	r6, pc, r6
   1bb28:	b	1bb88 <__generate_code_for_binary_boolean_expression@@Base+0xab0>
   1bb2c:	mov	r0, #1
   1bb30:	strb	r0, [r6]
   1bb34:	ldr	r0, [pc, #1488]	; 1c10c <__generate_code_for_binary_boolean_expression@@Base+0x1034>
   1bb38:	mov	r1, #66	; 0x42
   1bb3c:	mov	r2, #420	; 0x1a4
   1bb40:	ldr	r0, [pc, r0]
   1bb44:	bl	11f78 <open64@plt>
   1bb48:	ldr	r6, [pc, #1472]	; 1c110 <__generate_code_for_binary_boolean_expression@@Base+0x1038>
   1bb4c:	cmn	r0, #1
   1bb50:	str	r0, [r4]
   1bb54:	add	r6, pc, r6
   1bb58:	bne	1bb88 <__generate_code_for_binary_boolean_expression@@Base+0xab0>
   1bb5c:	ldr	r0, [pc, #1456]	; 1c114 <__generate_code_for_binary_boolean_expression@@Base+0x103c>
   1bb60:	ldr	r0, [pc, r0]
   1bb64:	bl	1e4f8 <__gcov_flush@@Base+0x1c8>
   1bb68:	ldr	r0, [pc, #1448]	; 1c118 <__generate_code_for_binary_boolean_expression@@Base+0x1040>
   1bb6c:	mov	r1, #66	; 0x42
   1bb70:	mov	r2, #420	; 0x1a4
   1bb74:	ldr	r0, [pc, r0]
   1bb78:	bl	11f78 <open64@plt>
   1bb7c:	cmn	r0, #1
   1bb80:	str	r0, [r4]
   1bb84:	beq	1c078 <__generate_code_for_binary_boolean_expression@@Base+0xfa0>
   1bb88:	str	r9, [sp, #20]
   1bb8c:	str	r8, [sp, #24]
   1bb90:	bl	1e5bc <__gcov_flush@@Base+0x28c>
   1bb94:	ldr	r0, [pc, #1332]	; 1c0d0 <__generate_code_for_binary_boolean_expression@@Base+0xff8>
   1bb98:	mov	r1, r6
   1bb9c:	ldr	r0, [pc, r0]
   1bba0:	bl	11edc <fdopen@plt>
   1bba4:	ldr	r7, [pc, #1320]	; 1c0d4 <__generate_code_for_binary_boolean_expression@@Base+0xffc>
   1bba8:	ldr	r9, [pc, #1320]	; 1c0d8 <__generate_code_for_binary_boolean_expression@@Base+0x1000>
   1bbac:	ldr	r1, [pc, #1320]	; 1c0dc <__generate_code_for_binary_boolean_expression@@Base+0x1004>
   1bbb0:	ldr	sl, [pc, #1320]	; 1c0e0 <__generate_code_for_binary_boolean_expression@@Base+0x1008>
   1bbb4:	add	r7, pc, r7
   1bbb8:	add	r9, pc, r9
   1bbbc:	add	r1, pc, r1
   1bbc0:	add	sl, pc, sl
   1bbc4:	str	r5, [r7]
   1bbc8:	str	r5, [r7, #4]
   1bbcc:	str	r5, [r9]
   1bbd0:	str	r5, [r9, #4]
   1bbd4:	str	r0, [r1]
   1bbd8:	str	r5, [sl]
   1bbdc:	ldr	r6, [pc, #1280]	; 1c0e4 <__generate_code_for_binary_boolean_expression@@Base+0x100c>
   1bbe0:	mov	r4, #131072	; 0x20000
   1bbe4:	add	r6, pc, r6
   1bbe8:	ldrb	r1, [r6]
   1bbec:	cmp	r1, #0
   1bbf0:	beq	1bce4 <__generate_code_for_binary_boolean_expression@@Base+0xc0c>
   1bbf4:	mov	r0, r4
   1bbf8:	bl	11f90 <malloc@plt>
   1bbfc:	mov	r8, r0
   1bc00:	strd	r4, [r7]
   1bc04:	str	r0, [sl]
   1bc08:	mov	r0, r8
   1bc0c:	mov	r1, #0
   1bc10:	mov	r2, #131072	; 0x20000
   1bc14:	bl	1202c <memset@plt>
   1bc18:	ldr	r0, [r9, #4]
   1bc1c:	ldr	r1, [pc, #1284]	; 1c128 <__generate_code_for_binary_boolean_expression@@Base+0x1050>
   1bc20:	mov	r7, #7
   1bc24:	orr	r7, r7, #131072	; 0x20000
   1bc28:	ldr	r1, [pc, r1]
   1bc2c:	ldr	sl, [pc, #1272]	; 1c12c <__generate_code_for_binary_boolean_expression@@Base+0x1054>
   1bc30:	adds	r2, r1, #4
   1bc34:	add	sl, pc, sl
   1bc38:	adc	r3, r0, #0
   1bc3c:	ldr	r5, [sl, #4]
   1bc40:	ldr	r4, [pc, #1256]	; 1c130 <__generate_code_for_binary_boolean_expression@@Base+0x1058>
   1bc44:	ldr	r4, [pc, r4]
   1bc48:	subs	r2, r4, r2
   1bc4c:	sbcs	r2, r5, r3
   1bc50:	bcs	1bd64 <__generate_code_for_binary_boolean_expression@@Base+0xc8c>
   1bc54:	adds	r1, r7, r1
   1bc58:	adc	r0, r0, #0
   1bc5c:	subs	r1, r1, #4
   1bc60:	sbc	r0, r0, #0
   1bc64:	mvn	r2, #0
   1bc68:	and	r5, r0, r2
   1bc6c:	mov	r0, #16646144	; 0xfe0000
   1bc70:	orr	r0, r0, #-16777216	; 0xff000000
   1bc74:	and	r4, r1, r0
   1bc78:	mov	r0, r8
   1bc7c:	mov	r1, r4
   1bc80:	bl	11f54 <realloc@plt>
   1bc84:	ldr	r1, [pc, #1068]	; 1c0b8 <__generate_code_for_binary_boolean_expression@@Base+0xfe0>
   1bc88:	strd	r4, [sl]
   1bc8c:	mov	r3, r0
   1bc90:	mov	r7, r1
   1bc94:	lsr	r2, r1, #24
   1bc98:	ldr	r1, [pc, #1176]	; 1c138 <__generate_code_for_binary_boolean_expression@@Base+0x1060>
   1bc9c:	ldrb	r6, [r6]
   1bca0:	lsr	r4, r7, #16
   1bca4:	add	r1, pc, r1
   1bca8:	str	r0, [r1]
   1bcac:	ldr	r1, [r9, #4]
   1bcb0:	ldr	r5, [pc, #1156]	; 1c13c <__generate_code_for_binary_boolean_expression@@Base+0x1064>
   1bcb4:	ldr	r5, [pc, r5]
   1bcb8:	strb	r7, [r3, r5]!
   1bcbc:	strb	r2, [r3, #3]
   1bcc0:	lsr	r2, r7, #8
   1bcc4:	strb	r2, [r3, #1]
   1bcc8:	adds	r2, r5, #4
   1bccc:	adc	ip, r1, #0
   1bcd0:	cmp	r6, #1
   1bcd4:	strb	r4, [r3, #2]
   1bcd8:	stm	r9, {r2, ip}
   1bcdc:	beq	1bda8 <__generate_code_for_binary_boolean_expression@@Base+0xcd0>
   1bce0:	b	1bf60 <__generate_code_for_binary_boolean_expression@@Base+0xe88>
   1bce4:	mov	r1, #0
   1bce8:	mov	r2, #2
   1bcec:	mov	r8, #0
   1bcf0:	bl	120b0 <fseek@plt>
   1bcf4:	ldr	r0, [pc, #1004]	; 1c0e8 <__generate_code_for_binary_boolean_expression@@Base+0x1010>
   1bcf8:	ldr	r0, [pc, r0]
   1bcfc:	bl	11f30 <ftell@plt>
   1bd00:	mov	r2, r0
   1bd04:	ldr	r0, [pc, #992]	; 1c0ec <__generate_code_for_binary_boolean_expression@@Base+0x1014>
   1bd08:	asr	r3, r2, #31
   1bd0c:	add	r0, pc, r0
   1bd10:	cmp	r2, #0
   1bd14:	strd	r2, [r0]
   1bd18:	beq	1c008 <__generate_code_for_binary_boolean_expression@@Base+0xf30>
   1bd1c:	ldr	r0, [pc, #972]	; 1c0f0 <__generate_code_for_binary_boolean_expression@@Base+0x1018>
   1bd20:	mov	r1, r2
   1bd24:	mov	r2, #3
   1bd28:	mov	r3, #1
   1bd2c:	ldr	r0, [pc, r0]
   1bd30:	str	r8, [sp, #8]
   1bd34:	str	r8, [sp, #12]
   1bd38:	str	r0, [sp]
   1bd3c:	mov	r0, #0
   1bd40:	bl	11f24 <mmap64@plt>
   1bd44:	cmn	r0, #1
   1bd48:	str	r0, [sl]
   1bd4c:	beq	1bfd0 <__generate_code_for_binary_boolean_expression@@Base+0xef8>
   1bd50:	ldrb	r1, [r6]
   1bd54:	cmp	r1, #0
   1bd58:	beq	1bf20 <__generate_code_for_binary_boolean_expression@@Base+0xe48>
   1bd5c:	mov	r8, r0
   1bd60:	b	1bc18 <__generate_code_for_binary_boolean_expression@@Base+0xb40>
   1bd64:	ldr	r1, [r9, #4]
   1bd68:	ldr	r5, [pc, #964]	; 1c134 <__generate_code_for_binary_boolean_expression@@Base+0x105c>
   1bd6c:	ldr	r0, [pc, #836]	; 1c0b8 <__generate_code_for_binary_boolean_expression@@Base+0xfe0>
   1bd70:	mov	r6, r8
   1bd74:	ldr	r5, [pc, r5]
   1bd78:	mov	r7, r0
   1bd7c:	lsr	r2, r7, #16
   1bd80:	strb	r7, [r6, r5]!
   1bd84:	lsr	r0, r0, #24
   1bd88:	lsr	r3, r7, #8
   1bd8c:	strb	r2, [r6, #2]
   1bd90:	adds	r2, r5, #4
   1bd94:	strb	r0, [r6, #3]
   1bd98:	strb	r3, [r6, #1]
   1bd9c:	adc	ip, r1, #0
   1bda0:	stm	r9, {r2, ip}
   1bda4:	mov	r0, r8
   1bda8:	ldr	r7, [sl, #4]
   1bdac:	ldr	r3, [pc, #908]	; 1c140 <__generate_code_for_binary_boolean_expression@@Base+0x1068>
   1bdb0:	adds	r6, r5, #8
   1bdb4:	adc	r4, r1, #0
   1bdb8:	ldr	r3, [pc, r3]
   1bdbc:	subs	r3, r3, r6
   1bdc0:	sbcs	r3, r7, r4
   1bdc4:	bcs	1be68 <__generate_code_for_binary_boolean_expression@@Base+0xd90>
   1bdc8:	mov	r2, #7
   1bdcc:	orr	r2, r2, #131072	; 0x20000
   1bdd0:	adds	r2, r5, r2
   1bdd4:	adc	r1, r1, #0
   1bdd8:	mvn	r3, #0
   1bddc:	and	r5, r1, r3
   1bde0:	mov	r1, #16646144	; 0xfe0000
   1bde4:	orr	r1, r1, #-16777216	; 0xff000000
   1bde8:	and	r4, r2, r1
   1bdec:	mov	r1, r4
   1bdf0:	bl	11f54 <realloc@plt>
   1bdf4:	strd	r4, [sl]
   1bdf8:	ldr	r1, [pc, #840]	; 1c148 <__generate_code_for_binary_boolean_expression@@Base+0x1070>
   1bdfc:	mov	r4, r0
   1be00:	mov	lr, r9
   1be04:	add	r1, pc, r1
   1be08:	str	r0, [r1]
   1be0c:	ldr	r1, [pc, #824]	; 1c14c <__generate_code_for_binary_boolean_expression@@Base+0x1074>
   1be10:	ldr	r2, [sp, #20]
   1be14:	ldr	ip, [r9, #4]
   1be18:	add	r1, pc, r1
   1be1c:	ldrb	r3, [r1]
   1be20:	ldrb	r1, [r2]
   1be24:	ldrb	r7, [r2, #1]
   1be28:	ldrb	r6, [r2, #2]
   1be2c:	ldrb	r5, [r2, #3]
   1be30:	ldr	r2, [pc, #792]	; 1c150 <__generate_code_for_binary_boolean_expression@@Base+0x1078>
   1be34:	ldr	r2, [pc, r2]
   1be38:	strb	r1, [r4, r2]!
   1be3c:	strb	r5, [r4, #3]
   1be40:	ldr	r5, [sp, #24]
   1be44:	strb	r6, [r4, #2]
   1be48:	adds	r6, r2, #4
   1be4c:	adc	r1, ip, #0
   1be50:	cmp	r3, #1
   1be54:	str	r6, [lr]
   1be58:	strb	r7, [r4, #1]
   1be5c:	str	r1, [lr, #4]
   1be60:	beq	1bea8 <__generate_code_for_binary_boolean_expression@@Base+0xdd0>
   1be64:	b	1bfa0 <__generate_code_for_binary_boolean_expression@@Base+0xec8>
   1be68:	ldr	r6, [sp, #20]
   1be6c:	mov	r5, r0
   1be70:	ldrb	r1, [r6]
   1be74:	ldrb	r3, [r6, #1]
   1be78:	ldrb	r7, [r6, #2]
   1be7c:	ldrb	r6, [r6, #3]
   1be80:	strb	r1, [r5, r2]!
   1be84:	strb	r6, [r5, #3]
   1be88:	strb	r3, [r5, #1]
   1be8c:	adds	r6, r2, #4
   1be90:	mov	r3, r9
   1be94:	adc	r1, ip, #0
   1be98:	strb	r7, [r5, #2]
   1be9c:	str	r6, [r3]
   1bea0:	str	r1, [r3, #4]
   1bea4:	ldr	r5, [sp, #24]
   1bea8:	ldr	r7, [sl, #4]
   1beac:	ldr	r4, [pc, #672]	; 1c154 <__generate_code_for_binary_boolean_expression@@Base+0x107c>
   1beb0:	adds	r3, r2, #8
   1beb4:	adc	lr, ip, #0
   1beb8:	ldr	r4, [pc, r4]
   1bebc:	subs	r3, r4, r3
   1bec0:	sbcs	r3, r7, lr
   1bec4:	bcs	1bf18 <__generate_code_for_binary_boolean_expression@@Base+0xe40>
   1bec8:	mov	r1, #7
   1becc:	orr	r1, r1, #131072	; 0x20000
   1bed0:	adds	r1, r2, r1
   1bed4:	adc	r2, ip, #0
   1bed8:	mvn	r3, #0
   1bedc:	and	r7, r2, r3
   1bee0:	mov	r2, #16646144	; 0xfe0000
   1bee4:	orr	r2, r2, #-16777216	; 0xff000000
   1bee8:	and	r4, r1, r2
   1beec:	mov	r1, r4
   1bef0:	bl	11f54 <realloc@plt>
   1bef4:	stm	sl, {r4, r7}
   1bef8:	ldr	r1, [r9, #4]
   1befc:	ldr	r2, [pc, #596]	; 1c158 <__generate_code_for_binary_boolean_expression@@Base+0x1080>
   1bf00:	mov	lr, r9
   1bf04:	add	r2, pc, r2
   1bf08:	str	r0, [r2]
   1bf0c:	ldr	r6, [pc, #584]	; 1c15c <__generate_code_for_binary_boolean_expression@@Base+0x1084>
   1bf10:	ldr	r6, [pc, r6]
   1bf14:	b	1bfa0 <__generate_code_for_binary_boolean_expression@@Base+0xec8>
   1bf18:	mov	lr, r9
   1bf1c:	b	1bfa0 <__generate_code_for_binary_boolean_expression@@Base+0xec8>
   1bf20:	ldr	r6, [r9, #4]
   1bf24:	ldr	r5, [pc, #536]	; 1c144 <__generate_code_for_binary_boolean_expression@@Base+0x106c>
   1bf28:	ldr	r1, [pc, #392]	; 1c0b8 <__generate_code_for_binary_boolean_expression@@Base+0xfe0>
   1bf2c:	mov	r4, r0
   1bf30:	ldr	r5, [pc, r5]
   1bf34:	mov	r7, r1
   1bf38:	lsr	r2, r7, #16
   1bf3c:	strb	r7, [r4, r5]!
   1bf40:	lsr	r1, r1, #24
   1bf44:	strb	r2, [r4, #2]
   1bf48:	adds	r2, r5, #4
   1bf4c:	lsr	r3, r7, #8
   1bf50:	adc	ip, r6, #0
   1bf54:	strb	r1, [r4, #3]
   1bf58:	strb	r3, [r4, #1]
   1bf5c:	stm	r9, {r2, ip}
   1bf60:	ldr	r4, [sp, #20]
   1bf64:	mov	r5, r0
   1bf68:	mov	lr, r9
   1bf6c:	ldrb	r1, [r4]
   1bf70:	ldrb	r6, [r4, #3]
   1bf74:	ldrb	r3, [r4, #1]
   1bf78:	ldrb	r7, [r4, #2]
   1bf7c:	strb	r1, [r5, r2]!
   1bf80:	strb	r6, [r5, #3]
   1bf84:	adds	r6, r2, #4
   1bf88:	adc	r1, ip, #0
   1bf8c:	strb	r7, [r5, #2]
   1bf90:	strb	r3, [r5, #1]
   1bf94:	str	r6, [lr]
   1bf98:	str	r1, [lr, #4]
   1bf9c:	ldr	r5, [sp, #24]
   1bfa0:	lsr	r2, r5, #24
   1bfa4:	strb	r5, [r0, r6]!
   1bfa8:	lsr	r3, r5, #16
   1bfac:	lsr	r7, r5, #8
   1bfb0:	strb	r2, [r0, #3]
   1bfb4:	strb	r3, [r0, #2]
   1bfb8:	strb	r7, [r0, #1]
   1bfbc:	adds	r0, r6, #4
   1bfc0:	adc	r1, r1, #0
   1bfc4:	strd	r0, [lr]
   1bfc8:	sub	sp, fp, #28
   1bfcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfd0:	bl	12008 <__errno_location@plt>
   1bfd4:	ldr	r1, [pc, #280]	; 1c0f4 <__generate_code_for_binary_boolean_expression@@Base+0x101c>
   1bfd8:	ldr	r1, [pc, r1]
   1bfdc:	ldr	r0, [r0]
   1bfe0:	ldr	r4, [r1]
   1bfe4:	ldr	r5, [pc, #268]	; 1c0f8 <__generate_code_for_binary_boolean_expression@@Base+0x1020>
   1bfe8:	ldr	r5, [pc, r5]
   1bfec:	bl	11fa8 <strerror@plt>
   1bff0:	ldr	r1, [pc, #260]	; 1c0fc <__generate_code_for_binary_boolean_expression@@Base+0x1024>
   1bff4:	mov	r3, r0
   1bff8:	mov	r0, r4
   1bffc:	add	r1, pc, r1
   1c000:	mov	r2, r5
   1c004:	bl	11ffc <fprintf@plt>
   1c008:	ldr	r0, [pc, #240]	; 1c100 <__generate_code_for_binary_boolean_expression@@Base+0x1028>
   1c00c:	str	r8, [sl]
   1c010:	mov	r2, #16646144	; 0xfe0000
   1c014:	add	r0, pc, r0
   1c018:	orr	r2, r2, #-16777216	; 0xff000000
   1c01c:	str	r8, [r0]
   1c020:	str	r8, [r0, #4]
   1c024:	mov	r0, #1
   1c028:	strb	r0, [r6]
   1c02c:	ldr	r0, [r9, #4]
   1c030:	ldr	r1, [pc, #204]	; 1c104 <__generate_code_for_binary_boolean_expression@@Base+0x102c>
   1c034:	mvn	r3, #0
   1c038:	eor	r3, r0, r3
   1c03c:	ldr	r1, [pc, r1]
   1c040:	eor	r2, r1, r2
   1c044:	orrs	r2, r2, r3
   1c048:	beq	1bc08 <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   1c04c:	ldr	r2, [pc, #104]	; 1c0bc <__generate_code_for_binary_boolean_expression@@Base+0xfe4>
   1c050:	ldr	r7, [pc, #176]	; 1c108 <__generate_code_for_binary_boolean_expression@@Base+0x1030>
   1c054:	adds	r1, r1, r2
   1c058:	mov	r2, #16646144	; 0xfe0000
   1c05c:	orr	r2, r2, #-16777216	; 0xff000000
   1c060:	and	r4, r1, r2
   1c064:	adc	r0, r0, #0
   1c068:	mvn	r1, #0
   1c06c:	and	r5, r0, r1
   1c070:	add	r7, pc, r7
   1c074:	b	1bbf4 <__generate_code_for_binary_boolean_expression@@Base+0xb1c>
   1c078:	bl	12008 <__errno_location@plt>
   1c07c:	ldr	r1, [pc, #152]	; 1c11c <__generate_code_for_binary_boolean_expression@@Base+0x1044>
   1c080:	ldr	r1, [pc, r1]
   1c084:	ldr	r0, [r0]
   1c088:	ldr	r4, [r1]
   1c08c:	ldr	r5, [pc, #140]	; 1c120 <__generate_code_for_binary_boolean_expression@@Base+0x1048>
   1c090:	ldr	r5, [pc, r5]
   1c094:	bl	11fa8 <strerror@plt>
   1c098:	ldr	r1, [pc, #132]	; 1c124 <__generate_code_for_binary_boolean_expression@@Base+0x104c>
   1c09c:	mov	r3, r0
   1c0a0:	mov	r0, r4
   1c0a4:	add	r1, pc, r1
   1c0a8:	mov	r2, r5
   1c0ac:	bl	11ffc <fprintf@plt>
   1c0b0:	sub	sp, fp, #28
   1c0b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0b8:	strbvs	r6, [r3, -r1, ror #8]!
   1c0bc:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1c0c0:			; <UNDEFINED> instruction: 0x000166b0
   1c0c4:			; <UNDEFINED> instruction: 0x000166b0
   1c0c8:			; <UNDEFINED> instruction: 0x000155bc
   1c0cc:			; <UNDEFINED> instruction: 0x00003ab1
   1c0d0:	andeq	r5, r1, r4, lsr r5
   1c0d4:	strdeq	r6, [r1], -ip
   1c0d8:	andeq	r6, r1, r0, lsl #12
   1c0dc:	andeq	r6, r1, ip, ror #11
   1c0e0:	andeq	r6, r1, ip, ror #11
   1c0e4:	andeq	r6, r1, r0, asr #11
   1c0e8:			; <UNDEFINED> instruction: 0x000164b0
   1c0ec:	andeq	r6, r1, r4, asr #9
   1c0f0:	andeq	r5, r1, r4, lsr #7
   1c0f4:	andeq	r5, r1, r4, ror #1
   1c0f8:			; <UNDEFINED> instruction: 0x000161b8
   1c0fc:	andeq	r3, r0, fp, lsr r7
   1c100:	muleq	r1, ip, r1
   1c104:	andeq	r6, r1, ip, ror r1
   1c108:	andeq	r6, r1, r0, asr #2
   1c10c:	andeq	r6, r1, r0, ror #12
   1c110:	andeq	r3, r0, r5, lsl #21
   1c114:	andeq	r6, r1, r0, asr #12
   1c118:	andeq	r6, r1, ip, lsr #12
   1c11c:	andeq	r5, r1, ip, lsr r0
   1c120:	andeq	r6, r1, r0, lsl r1
   1c124:	andeq	r3, r0, r9, lsr r5
   1c128:	muleq	r1, r0, r5
   1c12c:	andeq	r6, r1, ip, ror r5
   1c130:	andeq	r6, r1, ip, ror #10
   1c134:	andeq	r6, r1, r4, asr #8
   1c138:	andeq	r6, r1, r8, lsl #10
   1c13c:	andeq	r6, r1, r4, lsl #10
   1c140:	strdeq	r6, [r1], -r8
   1c144:	andeq	r6, r1, r8, lsl #5
   1c148:	andeq	r6, r1, r8, lsr #7
   1c14c:	andeq	r6, r1, ip, lsl #7
   1c150:	andeq	r6, r1, r4, lsl #7
   1c154:	strdeq	r6, [r1], -r8
   1c158:	andeq	r6, r1, r8, lsr #5
   1c15c:	andeq	r6, r1, r8, lsr #5
   1c160:	ldr	r0, [r0]
   1c164:	cmn	r0, #1
   1c168:	beq	1c188 <__generate_code_for_binary_boolean_expression@@Base+0x10b0>
   1c16c:	ldr	r0, [r1, r0, lsl #2]
   1c170:	cmp	r0, #0
   1c174:	bxeq	lr
   1c178:	ldrd	r2, [r0]
   1c17c:	adds	r2, r2, #1
   1c180:	adc	r3, r3, #0
   1c184:	strd	r2, [r0]
   1c188:	bx	lr
   1c18c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c190:	add	fp, sp, #28
   1c194:	sub	sp, sp, #12
   1c198:	ldr	r7, [pc, #2008]	; 1c978 <__generate_code_for_binary_boolean_expression@@Base+0x18a0>
   1c19c:	mov	sl, #2
   1c1a0:	cmp	r3, #0
   1c1a4:	movne	sl, #3
   1c1a8:	ldr	r7, [pc, r7]
   1c1ac:	cmp	r7, #0
   1c1b0:	beq	1c970 <__generate_code_for_binary_boolean_expression@@Base+0x1898>
   1c1b4:	stm	sp, {r0, r2, r3}
   1c1b8:	ldr	r0, [pc, #1980]	; 1c97c <__generate_code_for_binary_boolean_expression@@Base+0x18a4>
   1c1bc:	mov	r5, r1
   1c1c0:	add	r0, pc, r0
   1c1c4:	ldrb	r0, [r0]
   1c1c8:	ldr	r8, [pc, #1968]	; 1c980 <__generate_code_for_binary_boolean_expression@@Base+0x18a8>
   1c1cc:	cmp	r0, #1
   1c1d0:	add	r8, pc, r8
   1c1d4:	bne	1c258 <__generate_code_for_binary_boolean_expression@@Base+0x1180>
   1c1d8:	ldr	r4, [pc, #1956]	; 1c984 <__generate_code_for_binary_boolean_expression@@Base+0x18ac>
   1c1dc:	ldr	r0, [r8, #4]
   1c1e0:	ldr	r1, [pc, #1952]	; 1c988 <__generate_code_for_binary_boolean_expression@@Base+0x18b0>
   1c1e4:	add	r4, pc, r4
   1c1e8:	ldr	r1, [pc, r1]
   1c1ec:	ldr	r7, [r4, #4]
   1c1f0:	ldr	r6, [pc, #1940]	; 1c98c <__generate_code_for_binary_boolean_expression@@Base+0x18b4>
   1c1f4:	adds	r2, r1, #4
   1c1f8:	adc	r3, r0, #0
   1c1fc:	ldr	r6, [pc, r6]
   1c200:	subs	r2, r6, r2
   1c204:	sbcs	r2, r7, r3
   1c208:	bcs	1c258 <__generate_code_for_binary_boolean_expression@@Base+0x1180>
   1c20c:	mov	r2, #7
   1c210:	orr	r2, r2, #131072	; 0x20000
   1c214:	adds	r1, r2, r1
   1c218:	adc	r0, r0, #0
   1c21c:	subs	r1, r1, #4
   1c220:	sbc	r0, r0, #0
   1c224:	mvn	r2, #0
   1c228:	and	r7, r0, r2
   1c22c:	mov	r0, #16646144	; 0xfe0000
   1c230:	orr	r0, r0, #-16777216	; 0xff000000
   1c234:	ldr	r9, [pc, #1876]	; 1c990 <__generate_code_for_binary_boolean_expression@@Base+0x18b8>
   1c238:	and	r6, r1, r0
   1c23c:	ldr	r0, [pc, #1872]	; 1c994 <__generate_code_for_binary_boolean_expression@@Base+0x18bc>
   1c240:	mov	r1, r6
   1c244:	add	r9, pc, r9
   1c248:	ldr	r0, [pc, r0]
   1c24c:	bl	11f54 <realloc@plt>
   1c250:	strd	r6, [r4]
   1c254:	str	r0, [r9]
   1c258:	ldr	r7, [pc, #1848]	; 1c998 <__generate_code_for_binary_boolean_expression@@Base+0x18c0>
   1c25c:	mov	r0, #0
   1c260:	mov	r2, #1
   1c264:	ldr	r7, [pc, r7]
   1c268:	ldr	ip, [pc, #1836]	; 1c99c <__generate_code_for_binary_boolean_expression@@Base+0x18c4>
   1c26c:	adds	r4, r7, #4
   1c270:	ldr	ip, [pc, ip]
   1c274:	ldr	r6, [r8, #4]
   1c278:	mov	r1, ip
   1c27c:	adc	r9, r6, #0
   1c280:	strb	r0, [r1, r7]!
   1c284:	cmp	r5, #0
   1c288:	strb	r2, [r1, #3]
   1c28c:	strb	r0, [r1, #2]
   1c290:	strb	r0, [r1, #1]
   1c294:	stm	r8, {r4, r9}
   1c298:	mov	r8, r5
   1c29c:	beq	1c2b8 <__generate_code_for_binary_boolean_expression@@Base+0x11e0>
   1c2a0:	mov	r0, r8
   1c2a4:	mov	r5, ip
   1c2a8:	bl	11fd8 <strlen@plt>
   1c2ac:	add	r0, sl, r0, lsr #2
   1c2b0:	mov	ip, r5
   1c2b4:	add	sl, r0, #2
   1c2b8:	ldr	r0, [pc, #1760]	; 1c9a0 <__generate_code_for_binary_boolean_expression@@Base+0x18c8>
   1c2bc:	add	r0, pc, r0
   1c2c0:	ldrb	r0, [r0]
   1c2c4:	cmp	r0, #0
   1c2c8:	beq	1c3a4 <__generate_code_for_binary_boolean_expression@@Base+0x12cc>
   1c2cc:	ldr	lr, [pc, #1748]	; 1c9a8 <__generate_code_for_binary_boolean_expression@@Base+0x18d0>
   1c2d0:	adds	r0, r7, #8
   1c2d4:	adc	r1, r6, #0
   1c2d8:	add	lr, pc, lr
   1c2dc:	ldr	r2, [lr, #4]
   1c2e0:	ldr	r3, [pc, #1732]	; 1c9ac <__generate_code_for_binary_boolean_expression@@Base+0x18d4>
   1c2e4:	ldr	r3, [pc, r3]
   1c2e8:	subs	r0, r3, r0
   1c2ec:	sbcs	r0, r2, r1
   1c2f0:	bcs	1c410 <__generate_code_for_binary_boolean_expression@@Base+0x1338>
   1c2f4:	mov	r0, #7
   1c2f8:	orr	r0, r0, #131072	; 0x20000
   1c2fc:	adds	r0, r7, r0
   1c300:	adc	r1, r6, #0
   1c304:	mvn	r2, #0
   1c308:	and	r5, r1, r2
   1c30c:	mov	r1, #16646144	; 0xfe0000
   1c310:	orr	r1, r1, #-16777216	; 0xff000000
   1c314:	and	r6, r0, r1
   1c318:	ldr	r4, [pc, #1684]	; 1c9b4 <__generate_code_for_binary_boolean_expression@@Base+0x18dc>
   1c31c:	mov	r0, ip
   1c320:	mov	r1, r6
   1c324:	add	r4, pc, r4
   1c328:	mov	r7, lr
   1c32c:	bl	11f54 <realloc@plt>
   1c330:	mov	lr, r7
   1c334:	mov	ip, r0
   1c338:	str	r6, [lr]
   1c33c:	str	r5, [lr, #4]
   1c340:	str	ip, [r4]
   1c344:	ldr	r1, [pc, #1644]	; 1c9b8 <__generate_code_for_binary_boolean_expression@@Base+0x18e0>
   1c348:	lsr	r0, sl, #24
   1c34c:	add	r1, pc, r1
   1c350:	lsr	r3, sl, #16
   1c354:	ldrb	r2, [r1]
   1c358:	ldr	r1, [pc, #1628]	; 1c9bc <__generate_code_for_binary_boolean_expression@@Base+0x18e4>
   1c35c:	add	r1, pc, r1
   1c360:	mov	r7, r1
   1c364:	ldr	r9, [r1, #4]
   1c368:	ldr	r4, [pc, #1616]	; 1c9c0 <__generate_code_for_binary_boolean_expression@@Base+0x18e8>
   1c36c:	mov	r1, ip
   1c370:	ldr	r4, [pc, r4]
   1c374:	strb	sl, [r1, r4]!
   1c378:	strb	r0, [r1, #3]
   1c37c:	lsr	r0, sl, #8
   1c380:	strb	r0, [r1, #1]
   1c384:	adds	r0, r4, #4
   1c388:	strb	r3, [r1, #2]
   1c38c:	adc	r1, r9, #0
   1c390:	mov	sl, r7
   1c394:	cmp	r2, #1
   1c398:	strd	r0, [sl]
   1c39c:	bne	1c3d8 <__generate_code_for_binary_boolean_expression@@Base+0x1300>
   1c3a0:	b	1c444 <__generate_code_for_binary_boolean_expression@@Base+0x136c>
   1c3a4:	mov	r3, ip
   1c3a8:	lsr	r0, sl, #24
   1c3ac:	strb	sl, [r3, r4]!
   1c3b0:	lsr	r1, sl, #16
   1c3b4:	lsr	r2, sl, #8
   1c3b8:	strb	r0, [r3, #3]
   1c3bc:	strb	r1, [r3, #2]
   1c3c0:	strb	r2, [r3, #1]
   1c3c4:	ldr	sl, [pc, #1496]	; 1c9a4 <__generate_code_for_binary_boolean_expression@@Base+0x18cc>
   1c3c8:	adds	r0, r7, #8
   1c3cc:	adc	r1, r6, #0
   1c3d0:	add	sl, pc, sl
   1c3d4:	strd	r0, [sl]
   1c3d8:	ldr	r5, [sp]
   1c3dc:	mov	r6, ip
   1c3e0:	lsr	r2, r5, #24
   1c3e4:	strb	r5, [r6, r0]!
   1c3e8:	lsr	r3, r5, #16
   1c3ec:	lsr	r7, r5, #8
   1c3f0:	strb	r2, [r6, #3]
   1c3f4:	strb	r3, [r6, #2]
   1c3f8:	strb	r7, [r6, #1]
   1c3fc:	adds	r2, r0, #4
   1c400:	adc	r3, r1, #0
   1c404:	ldmib	sp, {r5, r9}
   1c408:	strd	r2, [sl]
   1c40c:	b	1c5b8 <__generate_code_for_binary_boolean_expression@@Base+0x14e0>
   1c410:	mov	r3, ip
   1c414:	lsr	r0, sl, #24
   1c418:	strb	sl, [r3, r4]!
   1c41c:	lsr	r1, sl, #16
   1c420:	lsr	r2, sl, #8
   1c424:	strb	r0, [r3, #3]
   1c428:	strb	r1, [r3, #2]
   1c42c:	strb	r2, [r3, #1]
   1c430:	ldr	sl, [pc, #1400]	; 1c9b0 <__generate_code_for_binary_boolean_expression@@Base+0x18d8>
   1c434:	adds	r0, r7, #8
   1c438:	adc	r1, r6, #0
   1c43c:	add	sl, pc, sl
   1c440:	strd	r0, [sl]
   1c444:	ldr	r7, [lr, #4]
   1c448:	ldr	r6, [pc, #1396]	; 1c9c4 <__generate_code_for_binary_boolean_expression@@Base+0x18ec>
   1c44c:	adds	r2, r4, #8
   1c450:	adc	r3, r9, #0
   1c454:	ldr	r6, [pc, r6]
   1c458:	subs	r2, r6, r2
   1c45c:	sbcs	r2, r7, r3
   1c460:	bcs	1c508 <__generate_code_for_binary_boolean_expression@@Base+0x1430>
   1c464:	mov	r0, #7
   1c468:	orr	r0, r0, #131072	; 0x20000
   1c46c:	adds	r0, r4, r0
   1c470:	adc	r1, r9, #0
   1c474:	mvn	r2, #0
   1c478:	and	r5, r1, r2
   1c47c:	mov	r1, #16646144	; 0xfe0000
   1c480:	orr	r1, r1, #-16777216	; 0xff000000
   1c484:	and	r4, r0, r1
   1c488:	ldr	r7, [pc, #1336]	; 1c9c8 <__generate_code_for_binary_boolean_expression@@Base+0x18f0>
   1c48c:	mov	r0, ip
   1c490:	mov	r1, r4
   1c494:	add	r7, pc, r7
   1c498:	mov	r6, lr
   1c49c:	bl	11f54 <realloc@plt>
   1c4a0:	mov	lr, r6
   1c4a4:	str	r0, [r7]
   1c4a8:	strd	r4, [lr]
   1c4ac:	mov	ip, r0
   1c4b0:	ldr	r6, [sp]
   1c4b4:	ldr	r0, [pc, #1296]	; 1c9cc <__generate_code_for_binary_boolean_expression@@Base+0x18f4>
   1c4b8:	ldr	r1, [sl, #4]
   1c4bc:	mov	r3, ip
   1c4c0:	add	r0, pc, r0
   1c4c4:	lsr	r2, r6, #24
   1c4c8:	ldrb	r7, [r0]
   1c4cc:	ldr	r0, [pc, #1276]	; 1c9d0 <__generate_code_for_binary_boolean_expression@@Base+0x18f8>
   1c4d0:	ldr	r0, [pc, r0]
   1c4d4:	strb	r6, [r3, r0]!
   1c4d8:	ldmib	sp, {r5, r9}
   1c4dc:	strb	r2, [r3, #3]
   1c4e0:	lsr	r2, r6, #8
   1c4e4:	lsr	r6, r6, #16
   1c4e8:	strb	r2, [r3, #1]
   1c4ec:	adds	r2, r0, #4
   1c4f0:	strb	r6, [r3, #2]
   1c4f4:	adc	r3, r1, #0
   1c4f8:	cmp	r7, #1
   1c4fc:	strd	r2, [sl]
   1c500:	beq	1c53c <__generate_code_for_binary_boolean_expression@@Base+0x1464>
   1c504:	b	1c5b8 <__generate_code_for_binary_boolean_expression@@Base+0x14e0>
   1c508:	ldr	r5, [sp]
   1c50c:	mov	r6, ip
   1c510:	lsr	r2, r5, #24
   1c514:	strb	r5, [r6, r0]!
   1c518:	lsr	r3, r5, #16
   1c51c:	lsr	r7, r5, #8
   1c520:	strb	r2, [r6, #3]
   1c524:	strb	r3, [r6, #2]
   1c528:	strb	r7, [r6, #1]
   1c52c:	adds	r2, r0, #4
   1c530:	adc	r3, r1, #0
   1c534:	ldmib	sp, {r5, r9}
   1c538:	strd	r2, [sl]
   1c53c:	str	r8, [sp, #8]
   1c540:	mov	r8, lr
   1c544:	adds	r7, r0, #8
   1c548:	ldr	r6, [r8, #4]
   1c54c:	ldr	r4, [pc, #1152]	; 1c9d4 <__generate_code_for_binary_boolean_expression@@Base+0x18fc>
   1c550:	adc	lr, r1, #0
   1c554:	ldr	r4, [pc, r4]
   1c558:	subs	r7, r4, r7
   1c55c:	sbcs	r7, r6, lr
   1c560:	bcs	1c5b4 <__generate_code_for_binary_boolean_expression@@Base+0x14dc>
   1c564:	mov	r2, #7
   1c568:	orr	r2, r2, #131072	; 0x20000
   1c56c:	adds	r0, r0, r2
   1c570:	adc	r1, r1, #0
   1c574:	mvn	r2, #0
   1c578:	and	r7, r1, r2
   1c57c:	mov	r1, #16646144	; 0xfe0000
   1c580:	orr	r1, r1, #-16777216	; 0xff000000
   1c584:	and	r6, r0, r1
   1c588:	ldr	r4, [pc, #1096]	; 1c9d8 <__generate_code_for_binary_boolean_expression@@Base+0x1900>
   1c58c:	mov	r0, ip
   1c590:	mov	r1, r6
   1c594:	add	r4, pc, r4
   1c598:	bl	11f54 <realloc@plt>
   1c59c:	strd	r6, [r8]
   1c5a0:	str	r0, [r4]
   1c5a4:	ldr	r3, [sl, #4]
   1c5a8:	ldr	r2, [pc, #1068]	; 1c9dc <__generate_code_for_binary_boolean_expression@@Base+0x1904>
   1c5ac:	mov	ip, r0
   1c5b0:	ldr	r2, [pc, r2]
   1c5b4:	ldr	r8, [sp, #8]
   1c5b8:	mov	r6, ip
   1c5bc:	lsr	r7, r5, #8
   1c5c0:	strb	r5, [r6, r2]!
   1c5c4:	adds	r4, r2, #4
   1c5c8:	lsr	r0, r5, #24
   1c5cc:	lsr	r1, r5, #16
   1c5d0:	strb	r7, [r6, #1]
   1c5d4:	adc	r7, r3, #0
   1c5d8:	cmp	r9, #0
   1c5dc:	strb	r0, [r6, #3]
   1c5e0:	strb	r1, [r6, #2]
   1c5e4:	stm	sl, {r4, r7}
   1c5e8:	beq	1c6bc <__generate_code_for_binary_boolean_expression@@Base+0x15e4>
   1c5ec:	ldr	r0, [pc, #1004]	; 1c9e0 <__generate_code_for_binary_boolean_expression@@Base+0x1908>
   1c5f0:	ldr	sl, [fp, #8]
   1c5f4:	add	r0, pc, r0
   1c5f8:	ldrb	r0, [r0]
   1c5fc:	cmp	r0, #1
   1c600:	bne	1c688 <__generate_code_for_binary_boolean_expression@@Base+0x15b0>
   1c604:	ldr	r9, [pc, #984]	; 1c9e4 <__generate_code_for_binary_boolean_expression@@Base+0x190c>
   1c608:	adds	r0, r2, #8
   1c60c:	adc	r1, r3, #0
   1c610:	add	r9, pc, r9
   1c614:	ldr	r6, [r9, #4]
   1c618:	ldr	r5, [pc, #968]	; 1c9e8 <__generate_code_for_binary_boolean_expression@@Base+0x1910>
   1c61c:	ldr	r5, [pc, r5]
   1c620:	subs	r0, r5, r0
   1c624:	sbcs	r0, r6, r1
   1c628:	bcs	1c688 <__generate_code_for_binary_boolean_expression@@Base+0x15b0>
   1c62c:	mov	r0, #7
   1c630:	orr	r0, r0, #131072	; 0x20000
   1c634:	adds	r0, r2, r0
   1c638:	adc	r1, r3, #0
   1c63c:	mvn	r2, #0
   1c640:	and	r5, r1, r2
   1c644:	mov	r1, #16646144	; 0xfe0000
   1c648:	orr	r1, r1, #-16777216	; 0xff000000
   1c64c:	and	r6, r0, r1
   1c650:	ldr	r4, [pc, #916]	; 1c9ec <__generate_code_for_binary_boolean_expression@@Base+0x1914>
   1c654:	mov	r0, ip
   1c658:	mov	r1, r6
   1c65c:	add	r4, pc, r4
   1c660:	bl	11f54 <realloc@plt>
   1c664:	str	r6, [r9]
   1c668:	str	r5, [r9, #4]
   1c66c:	mov	ip, r0
   1c670:	ldr	r0, [pc, #888]	; 1c9f0 <__generate_code_for_binary_boolean_expression@@Base+0x1918>
   1c674:	str	ip, [r4]
   1c678:	add	r0, pc, r0
   1c67c:	ldr	r7, [r0, #4]
   1c680:	ldr	r4, [pc, #876]	; 1c9f4 <__generate_code_for_binary_boolean_expression@@Base+0x191c>
   1c684:	ldr	r4, [pc, r4]
   1c688:	mov	r3, ip
   1c68c:	lsr	r0, sl, #24
   1c690:	strb	sl, [r3, r4]!
   1c694:	lsr	r1, sl, #16
   1c698:	lsr	r2, sl, #8
   1c69c:	strb	r0, [r3, #3]
   1c6a0:	strb	r1, [r3, #2]
   1c6a4:	strb	r2, [r3, #1]
   1c6a8:	ldr	sl, [pc, #840]	; 1c9f8 <__generate_code_for_binary_boolean_expression@@Base+0x1920>
   1c6ac:	adds	r4, r4, #4
   1c6b0:	adc	r7, r7, #0
   1c6b4:	add	sl, pc, sl
   1c6b8:	stm	sl, {r4, r7}
   1c6bc:	cmp	r8, #0
   1c6c0:	beq	1c970 <__generate_code_for_binary_boolean_expression@@Base+0x1898>
   1c6c4:	mov	r0, r8
   1c6c8:	mov	r9, ip
   1c6cc:	bl	11fd8 <strlen@plt>
   1c6d0:	mov	r6, #1
   1c6d4:	add	r5, r6, r0, lsr #2
   1c6d8:	ldr	r0, [pc, #796]	; 1c9fc <__generate_code_for_binary_boolean_expression@@Base+0x1924>
   1c6dc:	add	r0, pc, r0
   1c6e0:	ldrb	r0, [r0]
   1c6e4:	cmp	r0, #1
   1c6e8:	bne	1c78c <__generate_code_for_binary_boolean_expression@@Base+0x16b4>
   1c6ec:	ldr	sl, [pc, #780]	; 1ca00 <__generate_code_for_binary_boolean_expression@@Base+0x1928>
   1c6f0:	adds	r0, r4, #4
   1c6f4:	adc	r1, r7, #0
   1c6f8:	add	sl, pc, sl
   1c6fc:	ldr	r2, [sl, #4]
   1c700:	ldr	r3, [pc, #764]	; 1ca04 <__generate_code_for_binary_boolean_expression@@Base+0x192c>
   1c704:	ldr	r3, [pc, r3]
   1c708:	subs	r0, r3, r0
   1c70c:	sbcs	r0, r2, r1
   1c710:	bcs	1c7a0 <__generate_code_for_binary_boolean_expression@@Base+0x16c8>
   1c714:	mov	r0, #0
   1c718:	str	r0, [sp, #8]
   1c71c:	mov	r0, #7
   1c720:	orr	r0, r0, #131072	; 0x20000
   1c724:	adds	r0, r0, r4
   1c728:	adc	r1, r7, #0
   1c72c:	subs	r0, r0, #4
   1c730:	sbc	r1, r1, #0
   1c734:	mvn	r2, #0
   1c738:	and	r7, r1, r2
   1c73c:	mov	r1, #16646144	; 0xfe0000
   1c740:	orr	r1, r1, #-16777216	; 0xff000000
   1c744:	and	r4, r0, r1
   1c748:	ldr	r6, [pc, #700]	; 1ca0c <__generate_code_for_binary_boolean_expression@@Base+0x1934>
   1c74c:	mov	r0, r9
   1c750:	mov	r1, r4
   1c754:	add	r6, pc, r6
   1c758:	bl	11f54 <realloc@plt>
   1c75c:	stm	sl, {r4, r7}
   1c760:	str	r0, [r6]
   1c764:	ldr	sl, [pc, #676]	; 1ca10 <__generate_code_for_binary_boolean_expression@@Base+0x1938>
   1c768:	mov	r3, r0
   1c76c:	add	sl, pc, sl
   1c770:	ldr	r7, [sl, #4]
   1c774:	ldr	r0, [pc, #664]	; 1ca14 <__generate_code_for_binary_boolean_expression@@Base+0x193c>
   1c778:	add	r0, pc, r0
   1c77c:	ldrb	r6, [r0]
   1c780:	ldr	r4, [pc, #656]	; 1ca18 <__generate_code_for_binary_boolean_expression@@Base+0x1940>
   1c784:	ldr	r4, [pc, r4]
   1c788:	b	1c7b4 <__generate_code_for_binary_boolean_expression@@Base+0x16dc>
   1c78c:	mov	r0, #0
   1c790:	str	r0, [sp, #8]
   1c794:	mov	r6, #0
   1c798:	mov	r3, r9
   1c79c:	b	1c7b4 <__generate_code_for_binary_boolean_expression@@Base+0x16dc>
   1c7a0:	mov	r0, #0
   1c7a4:	str	r0, [sp, #8]
   1c7a8:	ldr	sl, [pc, #600]	; 1ca08 <__generate_code_for_binary_boolean_expression@@Base+0x1930>
   1c7ac:	mov	r3, r9
   1c7b0:	add	sl, pc, sl
   1c7b4:	mov	r9, r3
   1c7b8:	strb	r5, [r3, r4]!
   1c7bc:	lsr	r0, r5, #24
   1c7c0:	adds	r4, r4, #4
   1c7c4:	lsr	r1, r5, #16
   1c7c8:	lsr	r2, r5, #8
   1c7cc:	strb	r0, [r3, #3]
   1c7d0:	mov	r0, r8
   1c7d4:	adc	r5, r7, #0
   1c7d8:	strb	r1, [r3, #2]
   1c7dc:	strb	r2, [r3, #1]
   1c7e0:	strd	r4, [sl]
   1c7e4:	bl	11fd8 <strlen@plt>
   1c7e8:	mov	r7, r0
   1c7ec:	cmp	r6, #0
   1c7f0:	beq	1c88c <__generate_code_for_binary_boolean_expression@@Base+0x17b4>
   1c7f4:	ldr	r6, [pc, #544]	; 1ca1c <__generate_code_for_binary_boolean_expression@@Base+0x1944>
   1c7f8:	adds	r0, r4, r7
   1c7fc:	adc	r1, r5, #0
   1c800:	add	r6, pc, r6
   1c804:	ldr	r2, [r6, #4]
   1c808:	ldr	r3, [pc, #528]	; 1ca20 <__generate_code_for_binary_boolean_expression@@Base+0x1948>
   1c80c:	ldr	r3, [pc, r3]
   1c810:	subs	r3, r3, r0
   1c814:	sbcs	r2, r2, r1
   1c818:	bcs	1c884 <__generate_code_for_binary_boolean_expression@@Base+0x17ac>
   1c81c:	mov	r2, #7
   1c820:	orr	r2, r2, #131072	; 0x20000
   1c824:	adds	r0, r2, r0
   1c828:	adc	r1, r1, #0
   1c82c:	subs	r0, r0, #8
   1c830:	sbc	r1, r1, #0
   1c834:	mvn	r2, #0
   1c838:	and	r5, r1, r2
   1c83c:	mov	r1, #16646144	; 0xfe0000
   1c840:	orr	r1, r1, #-16777216	; 0xff000000
   1c844:	and	r4, r0, r1
   1c848:	mov	r0, r9
   1c84c:	mov	r1, r4
   1c850:	bl	11f54 <realloc@plt>
   1c854:	strd	r4, [r6]
   1c858:	ldr	r1, [pc, #452]	; 1ca24 <__generate_code_for_binary_boolean_expression@@Base+0x194c>
   1c85c:	ldr	r5, [sl, #4]
   1c860:	add	r1, pc, r1
   1c864:	str	r0, [r1]
   1c868:	ldr	r1, [pc, #440]	; 1ca28 <__generate_code_for_binary_boolean_expression@@Base+0x1950>
   1c86c:	add	r1, pc, r1
   1c870:	ldrb	r1, [r1]
   1c874:	str	r1, [sp, #8]
   1c878:	ldr	r4, [pc, #428]	; 1ca2c <__generate_code_for_binary_boolean_expression@@Base+0x1954>
   1c87c:	ldr	r4, [pc, r4]
   1c880:	b	1c890 <__generate_code_for_binary_boolean_expression@@Base+0x17b8>
   1c884:	mov	r0, #1
   1c888:	str	r0, [sp, #8]
   1c88c:	mov	r0, r9
   1c890:	mov	r9, r0
   1c894:	add	r0, r0, r4
   1c898:	mov	r1, r8
   1c89c:	mov	r2, r7
   1c8a0:	bl	11f18 <memcpy@plt>
   1c8a4:	adds	r6, r4, r7
   1c8a8:	mov	r0, r8
   1c8ac:	adc	r5, r5, #0
   1c8b0:	str	r6, [sl]
   1c8b4:	str	r5, [sl, #4]
   1c8b8:	bl	11fd8 <strlen@plt>
   1c8bc:	and	r0, r0, #3
   1c8c0:	rsb	r4, r0, #4
   1c8c4:	ldr	r0, [sp, #8]
   1c8c8:	cmp	r0, #0
   1c8cc:	beq	1c954 <__generate_code_for_binary_boolean_expression@@Base+0x187c>
   1c8d0:	ldr	r7, [pc, #344]	; 1ca30 <__generate_code_for_binary_boolean_expression@@Base+0x1958>
   1c8d4:	adds	r0, r6, r4
   1c8d8:	adc	r1, r5, #0
   1c8dc:	add	r7, pc, r7
   1c8e0:	ldr	r2, [r7, #4]
   1c8e4:	ldr	r3, [pc, #328]	; 1ca34 <__generate_code_for_binary_boolean_expression@@Base+0x195c>
   1c8e8:	ldr	r3, [pc, r3]
   1c8ec:	subs	r3, r3, r0
   1c8f0:	sbcs	r2, r2, r1
   1c8f4:	bcs	1c954 <__generate_code_for_binary_boolean_expression@@Base+0x187c>
   1c8f8:	mov	r2, #7
   1c8fc:	orr	r2, r2, #131072	; 0x20000
   1c900:	adds	r0, r2, r0
   1c904:	adc	r1, r1, #0
   1c908:	subs	r0, r0, #8
   1c90c:	sbc	r1, r1, #0
   1c910:	mvn	r2, #0
   1c914:	and	r5, r1, r2
   1c918:	mov	r1, #16646144	; 0xfe0000
   1c91c:	orr	r1, r1, #-16777216	; 0xff000000
   1c920:	and	r6, r0, r1
   1c924:	ldr	r8, [pc, #268]	; 1ca38 <__generate_code_for_binary_boolean_expression@@Base+0x1960>
   1c928:	mov	r0, r9
   1c92c:	mov	r1, r6
   1c930:	add	r8, pc, r8
   1c934:	bl	11f54 <realloc@plt>
   1c938:	str	r6, [r7]
   1c93c:	str	r5, [r7, #4]
   1c940:	str	r0, [r8]
   1c944:	ldr	r5, [sl, #4]
   1c948:	ldr	r6, [pc, #236]	; 1ca3c <__generate_code_for_binary_boolean_expression@@Base+0x1964>
   1c94c:	mov	r9, r0
   1c950:	ldr	r6, [pc, r6]
   1c954:	add	r0, r9, r6
   1c958:	mov	r1, #0
   1c95c:	mov	r2, r4
   1c960:	bl	1202c <memset@plt>
   1c964:	adds	r0, r6, r4
   1c968:	adc	r1, r5, #0
   1c96c:	strd	r0, [sl]
   1c970:	sub	sp, fp, #28
   1c974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c978:	andeq	r6, r1, r0
   1c97c:	andeq	r5, r1, r4, ror #31
   1c980:	andeq	r5, r1, r8, ror #31
   1c984:	andeq	r5, r1, ip, asr #31
   1c988:	ldrdeq	r5, [r1], -r0
   1c98c:			; <UNDEFINED> instruction: 0x00015fb4
   1c990:	andeq	r5, r1, r8, ror #30
   1c994:	andeq	r5, r1, r4, ror #30
   1c998:	andeq	r5, r1, r4, asr pc
   1c99c:	andeq	r5, r1, ip, lsr pc
   1c9a0:	andeq	r5, r1, r8, ror #29
   1c9a4:	andeq	r5, r1, r8, ror #27
   1c9a8:	ldrdeq	r5, [r1], -r8
   1c9ac:	andeq	r5, r1, ip, asr #29
   1c9b0:	andeq	r5, r1, ip, ror sp
   1c9b4:	andeq	r5, r1, r8, lsl #29
   1c9b8:	andeq	r5, r1, r8, asr lr
   1c9bc:	andeq	r5, r1, ip, asr lr
   1c9c0:	andeq	r5, r1, r8, asr #28
   1c9c4:	andeq	r5, r1, ip, asr sp
   1c9c8:	andeq	r5, r1, r8, lsl sp
   1c9cc:	andeq	r5, r1, r4, ror #25
   1c9d0:	andeq	r5, r1, r8, ror #25
   1c9d4:	andeq	r5, r1, ip, asr ip
   1c9d8:	andeq	r5, r1, r8, lsl ip
   1c9dc:	andeq	r5, r1, r8, lsl #24
   1c9e0:			; <UNDEFINED> instruction: 0x00015bb0
   1c9e4:	andeq	r5, r1, r0, lsr #23
   1c9e8:	muleq	r1, r4, fp
   1c9ec:	andeq	r5, r1, r0, asr fp
   1c9f0:	andeq	r5, r1, r0, asr #22
   1c9f4:	andeq	r5, r1, r4, lsr fp
   1c9f8:	andeq	r5, r1, r4, lsl #22
   1c9fc:	andeq	r5, r1, r8, asr #21
   1ca00:			; <UNDEFINED> instruction: 0x00015ab8
   1ca04:	andeq	r5, r1, ip, lsr #21
   1ca08:	andeq	r5, r1, r8, lsl #20
   1ca0c:	andeq	r5, r1, r8, asr sl
   1ca10:	andeq	r5, r1, ip, asr #20
   1ca14:	andeq	r5, r1, ip, lsr #20
   1ca18:	andeq	r5, r1, r4, lsr sl
   1ca1c:			; <UNDEFINED> instruction: 0x000159b0
   1ca20:	andeq	r5, r1, r4, lsr #19
   1ca24:	andeq	r5, r1, ip, asr #18
   1ca28:	andeq	r5, r1, r8, lsr r9
   1ca2c:	andeq	r5, r1, ip, lsr r9
   1ca30:	ldrdeq	r5, [r1], -r4
   1ca34:	andeq	r5, r1, r8, asr #17
   1ca38:	andeq	r5, r1, ip, ror r8
   1ca3c:	andeq	r5, r1, r8, ror #16
   1ca40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca44:	add	fp, sp, #28
   1ca48:	sub	sp, sp, #28
   1ca4c:	mov	ip, r0
   1ca50:	ldr	r0, [pc, #1740]	; 1d124 <__generate_code_for_binary_boolean_expression@@Base+0x204c>
   1ca54:	ldr	r0, [pc, r0]
   1ca58:	cmp	r0, #0
   1ca5c:	beq	1cb78 <__generate_code_for_binary_boolean_expression@@Base+0x1aa0>
   1ca60:	ldr	r5, [pc, #1728]	; 1d128 <__generate_code_for_binary_boolean_expression@@Base+0x2050>
   1ca64:	mov	sl, r1
   1ca68:	add	r5, pc, r5
   1ca6c:	ldr	r3, [r5, #4]
   1ca70:	ldr	r4, [pc, #1716]	; 1d12c <__generate_code_for_binary_boolean_expression@@Base+0x2054>
   1ca74:	ldr	r4, [pc, r4]
   1ca78:	ldr	r6, [pc, #1712]	; 1d130 <__generate_code_for_binary_boolean_expression@@Base+0x2058>
   1ca7c:	add	r6, pc, r6
   1ca80:	ldrb	r0, [r6]
   1ca84:	cmp	r0, #0
   1ca88:	beq	1cb80 <__generate_code_for_binary_boolean_expression@@Base+0x1aa8>
   1ca8c:	ldr	r8, [pc, #1732]	; 1d158 <__generate_code_for_binary_boolean_expression@@Base+0x2080>
   1ca90:	mov	r5, #10551296	; 0xa10000
   1ca94:	adds	r9, r4, #4
   1ca98:	add	r8, pc, r8
   1ca9c:	adc	r2, r3, #0
   1caa0:	ldr	r0, [r8, #4]
   1caa4:	ldr	r1, [pc, #1712]	; 1d15c <__generate_code_for_binary_boolean_expression@@Base+0x2084>
   1caa8:	orr	r5, r5, #16777216	; 0x1000000
   1caac:	ldr	r1, [pc, r1]
   1cab0:	subs	r1, r1, r9
   1cab4:	sbcs	r0, r0, r2
   1cab8:	bcs	1cc84 <__generate_code_for_binary_boolean_expression@@Base+0x1bac>
   1cabc:	mov	r0, #3
   1cac0:	orr	r0, r0, #131072	; 0x20000
   1cac4:	adds	r0, r4, r0
   1cac8:	adc	r1, r3, #0
   1cacc:	mvn	r2, #0
   1cad0:	and	r9, r1, r2
   1cad4:	mov	r1, #16646144	; 0xfe0000
   1cad8:	orr	r1, r1, #-16777216	; 0xff000000
   1cadc:	and	r4, r0, r1
   1cae0:	ldr	r0, [pc, #1664]	; 1d168 <__generate_code_for_binary_boolean_expression@@Base+0x2090>
   1cae4:	mov	r1, r4
   1cae8:	mov	r7, ip
   1caec:	ldr	r0, [pc, r0]
   1caf0:	bl	11f54 <realloc@plt>
   1caf4:	ldr	ip, [pc, #1648]	; 1d16c <__generate_code_for_binary_boolean_expression@@Base+0x2094>
   1caf8:	ldr	lr, [pc, #1648]	; 1d170 <__generate_code_for_binary_boolean_expression@@Base+0x2098>
   1cafc:	stm	r8, {r4, r9}
   1cb00:	ldr	r1, [pc, #1644]	; 1d174 <__generate_code_for_binary_boolean_expression@@Base+0x209c>
   1cb04:	add	ip, pc, ip
   1cb08:	add	lr, pc, lr
   1cb0c:	add	r1, pc, r1
   1cb10:	mov	r2, r0
   1cb14:	str	r2, [r1]
   1cb18:	mov	r6, ip
   1cb1c:	ldrb	ip, [ip]
   1cb20:	ldr	r3, [lr, #4]
   1cb24:	ldr	r4, [pc, #1612]	; 1d178 <__generate_code_for_binary_boolean_expression@@Base+0x20a0>
   1cb28:	lsr	r0, r5, #24
   1cb2c:	mov	r1, r8
   1cb30:	ldr	r4, [pc, r4]
   1cb34:	str	r2, [sp, #20]
   1cb38:	lsl	r8, r7, #1
   1cb3c:	strb	r5, [r2, r4]!
   1cb40:	adds	r9, r4, #4
   1cb44:	strb	r0, [r2, #3]
   1cb48:	lsr	r0, r5, #16
   1cb4c:	strb	r0, [r2, #2]
   1cb50:	lsr	r0, r5, #8
   1cb54:	strb	r0, [r2, #1]
   1cb58:	adc	r5, r3, #0
   1cb5c:	mov	r0, #0
   1cb60:	cmp	ip, #1
   1cb64:	str	r3, [sp, #16]
   1cb68:	str	r9, [lr]
   1cb6c:	str	r5, [lr, #4]
   1cb70:	beq	1ccd8 <__generate_code_for_binary_boolean_expression@@Base+0x1c00>
   1cb74:	b	1ce3c <__generate_code_for_binary_boolean_expression@@Base+0x1d64>
   1cb78:	sub	sp, fp, #28
   1cb7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb80:	ldr	r0, [pc, #1452]	; 1d134 <__generate_code_for_binary_boolean_expression@@Base+0x205c>
   1cb84:	mov	r7, r3
   1cb88:	mov	r9, #0
   1cb8c:	ldr	r0, [pc, r0]
   1cb90:	str	r0, [sp, #20]
   1cb94:	ldrb	r1, [r0, r4]!
   1cb98:	str	r7, [sp, #16]
   1cb9c:	ldrb	r2, [r0, #1]
   1cba0:	ldrb	r3, [r0, #2]
   1cba4:	ldrb	r0, [r0, #3]
   1cba8:	orr	r1, r1, r2, lsl #8
   1cbac:	orr	r1, r1, r3, lsl #16
   1cbb0:	adds	r2, r4, #4
   1cbb4:	orr	r3, r1, r0, lsl #24
   1cbb8:	adc	r7, r7, #0
   1cbbc:	mov	r1, r5
   1cbc0:	stm	r5, {r2, r7}
   1cbc4:	mov	r5, #10551296	; 0xa10000
   1cbc8:	orr	r5, r5, #16777216	; 0x1000000
   1cbcc:	cmn	r3, #1
   1cbd0:	beq	1cd84 <__generate_code_for_binary_boolean_expression@@Base+0x1cac>
   1cbd4:	cmp	r3, r5
   1cbd8:	bne	1cd94 <__generate_code_for_binary_boolean_expression@@Base+0x1cbc>
   1cbdc:	str	r7, [sp, #8]
   1cbe0:	ldr	r0, [sp, #20]
   1cbe4:	str	r4, [sp, #4]
   1cbe8:	mov	r8, r5
   1cbec:	ldr	r3, [r0, r2]
   1cbf0:	ldr	r0, [sp, #16]
   1cbf4:	adds	r5, r4, #8
   1cbf8:	adc	r9, r0, #0
   1cbfc:	cmn	r3, #1
   1cc00:	stm	r1, {r5, r9}
   1cc04:	beq	1cda0 <__generate_code_for_binary_boolean_expression@@Base+0x1cc8>
   1cc08:	lsr	r0, r3, #1
   1cc0c:	mov	r7, ip
   1cc10:	cmp	r0, ip
   1cc14:	bne	1cda0 <__generate_code_for_binary_boolean_expression@@Base+0x1cc8>
   1cc18:	lsl	r0, r7, #3
   1cc1c:	mov	r4, r2
   1cc20:	bl	11f90 <malloc@plt>
   1cc24:	cmp	r7, #0
   1cc28:	beq	1cdc8 <__generate_code_for_binary_boolean_expression@@Base+0x1cf0>
   1cc2c:	str	r0, [sp, #12]
   1cc30:	str	r7, [sp, #24]
   1cc34:	ldr	r2, [sp, #20]
   1cc38:	ldr	r3, [r2, r5]!
   1cc3c:	adds	r5, r5, #8
   1cc40:	ldr	r2, [r2, #4]
   1cc44:	str	r3, [r0]
   1cc48:	adc	r9, r9, #0
   1cc4c:	str	r2, [r0, #4]
   1cc50:	add	r0, r0, #8
   1cc54:	subs	r7, r7, #1
   1cc58:	bne	1cc34 <__generate_code_for_binary_boolean_expression@@Base+0x1b5c>
   1cc5c:	ldr	lr, [pc, #1260]	; 1d150 <__generate_code_for_binary_boolean_expression@@Base+0x2078>
   1cc60:	add	lr, pc, lr
   1cc64:	stm	lr, {r5, r9}
   1cc68:	ldr	ip, [pc, #1252]	; 1d154 <__generate_code_for_binary_boolean_expression@@Base+0x207c>
   1cc6c:	mov	r1, lr
   1cc70:	ldr	r0, [sp, #12]
   1cc74:	add	ip, pc, ip
   1cc78:	mov	r6, ip
   1cc7c:	ldr	ip, [sp, #24]
   1cc80:	b	1cde4 <__generate_code_for_binary_boolean_expression@@Base+0x1d0c>
   1cc84:	str	r3, [sp, #16]
   1cc88:	ldr	r3, [pc, #1232]	; 1d160 <__generate_code_for_binary_boolean_expression@@Base+0x2088>
   1cc8c:	mov	lr, r5
   1cc90:	mov	r7, ip
   1cc94:	lsr	ip, r5, #16
   1cc98:	ldr	r3, [pc, r3]
   1cc9c:	lsr	r1, r5, #8
   1cca0:	str	r3, [sp, #20]
   1cca4:	strb	lr, [r3, r4]!
   1cca8:	lsr	r0, lr, #24
   1ccac:	strb	r1, [r3, #1]
   1ccb0:	strb	r0, [r3, #3]
   1ccb4:	strb	ip, [r3, #2]
   1ccb8:	ldr	lr, [pc, #1188]	; 1d164 <__generate_code_for_binary_boolean_expression@@Base+0x208c>
   1ccbc:	lsl	r5, r7, #1
   1ccc0:	add	lr, pc, lr
   1ccc4:	mov	r1, r8
   1ccc8:	mov	r8, r5
   1cccc:	str	r9, [lr]
   1ccd0:	str	r2, [lr, #4]
   1ccd4:	mov	r5, r2
   1ccd8:	str	r8, [sp, #24]
   1ccdc:	mov	r8, r1
   1cce0:	ldr	r0, [sp, #16]
   1cce4:	ldr	r2, [r8, #4]
   1cce8:	ldr	r3, [pc, #1164]	; 1d17c <__generate_code_for_binary_boolean_expression@@Base+0x20a4>
   1ccec:	adds	ip, r4, #8
   1ccf0:	adc	r1, r0, #0
   1ccf4:	mov	r0, #0
   1ccf8:	ldr	r3, [pc, r3]
   1ccfc:	subs	r3, r3, ip
   1cd00:	sbcs	r1, r2, r1
   1cd04:	bcs	1cd7c <__generate_code_for_binary_boolean_expression@@Base+0x1ca4>
   1cd08:	ldr	r5, [pc, #1136]	; 1d180 <__generate_code_for_binary_boolean_expression@@Base+0x20a8>
   1cd0c:	mov	r0, #3
   1cd10:	ldr	r1, [sp, #16]
   1cd14:	orr	r0, r0, #131072	; 0x20000
   1cd18:	adds	r0, r0, r4
   1cd1c:	adc	r1, r1, #0
   1cd20:	adds	r0, r0, #4
   1cd24:	adc	r1, r1, #0
   1cd28:	mvn	r2, #0
   1cd2c:	and	r9, r1, r2
   1cd30:	mov	r1, #16646144	; 0xfe0000
   1cd34:	orr	r1, r1, #-16777216	; 0xff000000
   1cd38:	and	r4, r0, r1
   1cd3c:	ldr	r0, [sp, #20]
   1cd40:	mov	r1, r4
   1cd44:	add	r5, pc, r5
   1cd48:	bl	11f54 <realloc@plt>
   1cd4c:	ldr	ip, [pc, #1072]	; 1d184 <__generate_code_for_binary_boolean_expression@@Base+0x20ac>
   1cd50:	ldr	lr, [pc, #1072]	; 1d188 <__generate_code_for_binary_boolean_expression@@Base+0x20b0>
   1cd54:	stm	r8, {r4, r9}
   1cd58:	add	lr, pc, lr
   1cd5c:	str	r0, [r5]
   1cd60:	str	r0, [sp, #20]
   1cd64:	ldr	r5, [lr, #4]
   1cd68:	ldr	r9, [pc, #1052]	; 1d18c <__generate_code_for_binary_boolean_expression@@Base+0x20b4>
   1cd6c:	add	ip, pc, ip
   1cd70:	mov	r6, ip
   1cd74:	mov	r0, #0
   1cd78:	ldr	r9, [pc, r9]
   1cd7c:	ldr	r8, [sp, #24]
   1cd80:	b	1ce3c <__generate_code_for_binary_boolean_expression@@Base+0x1d64>
   1cd84:	mov	r3, r2
   1cd88:	ldr	r2, [sp, #16]
   1cd8c:	mov	r0, #0
   1cd90:	b	1cdfc <__generate_code_for_binary_boolean_expression@@Base+0x1d24>
   1cd94:	ldr	r1, [pc, #924]	; 1d138 <__generate_code_for_binary_boolean_expression@@Base+0x2060>
   1cd98:	add	r1, pc, r1
   1cd9c:	b	1cda8 <__generate_code_for_binary_boolean_expression@@Base+0x1cd0>
   1cda0:	ldr	r1, [pc, #924]	; 1d144 <__generate_code_for_binary_boolean_expression@@Base+0x206c>
   1cda4:	add	r1, pc, r1
   1cda8:	ldr	r0, [pc, #908]	; 1d13c <__generate_code_for_binary_boolean_expression@@Base+0x2064>
   1cdac:	ldr	r0, [pc, r0]
   1cdb0:	ldr	r0, [r0]
   1cdb4:	ldr	r2, [pc, #900]	; 1d140 <__generate_code_for_binary_boolean_expression@@Base+0x2068>
   1cdb8:	ldr	r2, [pc, r2]
   1cdbc:	sub	sp, fp, #28
   1cdc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdc4:	b	11ffc <fprintf@plt>
   1cdc8:	ldr	lr, [pc, #888]	; 1d148 <__generate_code_for_binary_boolean_expression@@Base+0x2070>
   1cdcc:	ldr	ip, [pc, #888]	; 1d14c <__generate_code_for_binary_boolean_expression@@Base+0x2074>
   1cdd0:	add	lr, pc, lr
   1cdd4:	add	ip, pc, ip
   1cdd8:	mov	r6, ip
   1cddc:	mov	r1, lr
   1cde0:	mov	ip, r7
   1cde4:	mov	r3, r4
   1cde8:	ldr	r7, [sp, #8]
   1cdec:	ldr	r4, [sp, #4]
   1cdf0:	ldr	r2, [sp, #16]
   1cdf4:	mov	r9, #0
   1cdf8:	mov	r5, r8
   1cdfc:	mov	lr, r1
   1ce00:	mov	r1, #1
   1ce04:	str	r4, [lr]
   1ce08:	str	r2, [lr, #4]
   1ce0c:	ldr	r2, [sp, #20]
   1ce10:	lsl	r8, ip, #1
   1ce14:	strb	r5, [r2, r4]!
   1ce18:	mov	r5, r7
   1ce1c:	strb	r1, [r2, #3]
   1ce20:	mov	r1, #161	; 0xa1
   1ce24:	strb	r9, [r2, #1]
   1ce28:	mov	r9, r3
   1ce2c:	strb	r1, [r2, #2]
   1ce30:	str	r9, [lr]
   1ce34:	str	r7, [lr, #4]
   1ce38:	mov	r7, ip
   1ce3c:	ldr	r3, [sp, #20]
   1ce40:	lsr	r1, r8, #16
   1ce44:	mov	ip, r3
   1ce48:	strb	r8, [r3, r9]!
   1ce4c:	lsr	r4, r8, #24
   1ce50:	lsr	r2, r8, #8
   1ce54:	adds	r8, r9, #4
   1ce58:	strb	r1, [r3, #2]
   1ce5c:	adc	r1, r5, #0
   1ce60:	cmp	r7, #0
   1ce64:	strb	r4, [r3, #3]
   1ce68:	strb	r2, [r3, #1]
   1ce6c:	str	r8, [lr]
   1ce70:	str	r1, [lr, #4]
   1ce74:	str	r7, [sp, #24]
   1ce78:	beq	1d118 <__generate_code_for_binary_boolean_expression@@Base+0x2040>
   1ce7c:	ldr	r7, [pc, #780]	; 1d190 <__generate_code_for_binary_boolean_expression@@Base+0x20b8>
   1ce80:	mov	r4, lr
   1ce84:	mov	r2, r0
   1ce88:	add	r7, pc, r7
   1ce8c:	str	r0, [sp, #12]
   1ce90:	b	1cf2c <__generate_code_for_binary_boolean_expression@@Base+0x1e54>
   1ce94:	mov	r7, ip
   1ce98:	lsr	r2, r4, #24
   1ce9c:	strb	r4, [r7, r8]!
   1cea0:	mov	lr, r6
   1cea4:	lsr	r9, r4, #16
   1cea8:	lsr	r6, r4, #8
   1ceac:	strb	r2, [r7, #3]
   1ceb0:	adds	r2, r8, #4
   1ceb4:	mov	r4, r0
   1ceb8:	strb	r9, [r7, #2]
   1cebc:	mov	r3, ip
   1cec0:	strb	r6, [r7, #1]
   1cec4:	adc	r9, r1, #0
   1cec8:	stm	r4, {r2, r9}
   1cecc:	mov	ip, r3
   1ced0:	lsr	r1, r5, #16
   1ced4:	strb	r5, [r3, r2]!
   1ced8:	lsr	r0, r5, #24
   1cedc:	lsr	r7, r5, #8
   1cee0:	adds	r8, r2, #4
   1cee4:	strb	r1, [r3, #2]
   1cee8:	adc	r1, r9, #0
   1ceec:	strb	r0, [r3, #3]
   1cef0:	strb	r7, [r3, #1]
   1cef4:	str	r8, [r4]
   1cef8:	str	r1, [r4, #4]
   1cefc:	ldr	r0, [sp, #24]
   1cf00:	ldr	r2, [sp, #16]
   1cf04:	mov	r6, lr
   1cf08:	subs	r0, r0, #1
   1cf0c:	str	r0, [sp, #24]
   1cf10:	ldr	sl, [sp, #20]
   1cf14:	ldr	r0, [sp, #12]
   1cf18:	ldr	r7, [pc, #676]	; 1d1c4 <__generate_code_for_binary_boolean_expression@@Base+0x20ec>
   1cf1c:	add	r2, r2, #8
   1cf20:	add	sl, sl, #8
   1cf24:	add	r7, pc, r7
   1cf28:	beq	1d118 <__generate_code_for_binary_boolean_expression@@Base+0x2040>
   1cf2c:	cmp	r0, #0
   1cf30:	mov	r0, r4
   1cf34:	str	r2, [sp, #16]
   1cf38:	beq	1cf44 <__generate_code_for_binary_boolean_expression@@Base+0x1e6c>
   1cf3c:	ldrd	r2, [r2]
   1cf40:	b	1cf4c <__generate_code_for_binary_boolean_expression@@Base+0x1e74>
   1cf44:	mov	r2, #0
   1cf48:	mov	r3, #0
   1cf4c:	ldrd	r4, [sl]
   1cf50:	adds	r4, r4, r2
   1cf54:	adc	r5, r5, r3
   1cf58:	strd	r4, [sl]
   1cf5c:	ldrb	r2, [r6]
   1cf60:	str	sl, [sp, #20]
   1cf64:	cmp	r2, #0
   1cf68:	beq	1ce94 <__generate_code_for_binary_boolean_expression@@Base+0x1dbc>
   1cf6c:	ldr	r3, [r7, #4]
   1cf70:	ldr	r6, [pc, #540]	; 1d194 <__generate_code_for_binary_boolean_expression@@Base+0x20bc>
   1cf74:	adds	r2, r8, #4
   1cf78:	adc	r9, r1, #0
   1cf7c:	ldr	r6, [pc, r6]
   1cf80:	subs	r2, r6, r2
   1cf84:	sbcs	r2, r3, r9
   1cf88:	bcs	1d034 <__generate_code_for_binary_boolean_expression@@Base+0x1f5c>
   1cf8c:	mov	r2, #3
   1cf90:	orr	r2, r2, #131072	; 0x20000
   1cf94:	adds	r0, r8, r2
   1cf98:	adc	r1, r1, #0
   1cf9c:	mvn	r2, #0
   1cfa0:	and	r8, r1, r2
   1cfa4:	mov	r1, #16646144	; 0xfe0000
   1cfa8:	orr	r1, r1, #-16777216	; 0xff000000
   1cfac:	and	r6, r0, r1
   1cfb0:	mov	r0, ip
   1cfb4:	mov	r1, r6
   1cfb8:	bl	11f54 <realloc@plt>
   1cfbc:	ldr	ip, [pc, #468]	; 1d198 <__generate_code_for_binary_boolean_expression@@Base+0x20c0>
   1cfc0:	ldr	lr, [pc, #468]	; 1d19c <__generate_code_for_binary_boolean_expression@@Base+0x20c4>
   1cfc4:	stm	r7, {r6, r8}
   1cfc8:	mov	r3, r0
   1cfcc:	ldr	r0, [pc, #460]	; 1d1a0 <__generate_code_for_binary_boolean_expression@@Base+0x20c8>
   1cfd0:	add	lr, pc, lr
   1cfd4:	mov	r9, lr
   1cfd8:	add	r0, pc, r0
   1cfdc:	add	ip, pc, ip
   1cfe0:	str	r3, [r0]
   1cfe4:	mov	lr, ip
   1cfe8:	ldrb	ip, [ip]
   1cfec:	ldr	r1, [r9, #4]
   1cff0:	ldr	r8, [pc, #428]	; 1d1a4 <__generate_code_for_binary_boolean_expression@@Base+0x20cc>
   1cff4:	mov	r7, r3
   1cff8:	lsr	r2, r4, #24
   1cffc:	ldr	r8, [pc, r8]
   1d000:	lsr	r6, r4, #16
   1d004:	strb	r4, [r7, r8]!
   1d008:	strb	r2, [r7, #3]
   1d00c:	lsr	r2, r4, #8
   1d010:	strb	r2, [r7, #1]
   1d014:	adds	r2, r8, #4
   1d018:	mov	r4, r9
   1d01c:	adc	r9, r1, #0
   1d020:	cmp	ip, #1
   1d024:	strb	r6, [r7, #2]
   1d028:	stm	r4, {r2, r9}
   1d02c:	bne	1cecc <__generate_code_for_binary_boolean_expression@@Base+0x1df4>
   1d030:	b	1d068 <__generate_code_for_binary_boolean_expression@@Base+0x1f90>
   1d034:	mov	r6, ip
   1d038:	lsr	r2, r4, #24
   1d03c:	strb	r4, [r6, r8]!
   1d040:	lsr	r9, r4, #16
   1d044:	lsr	r7, r4, #8
   1d048:	strb	r2, [r6, #3]
   1d04c:	adds	r2, r8, #4
   1d050:	mov	r4, r0
   1d054:	strb	r9, [r6, #2]
   1d058:	mov	r3, ip
   1d05c:	strb	r7, [r6, #1]
   1d060:	adc	r9, r1, #0
   1d064:	stm	r4, {r2, r9}
   1d068:	ldr	lr, [pc, #312]	; 1d1a8 <__generate_code_for_binary_boolean_expression@@Base+0x20d0>
   1d06c:	mov	r0, r4
   1d070:	adds	r7, r8, #8
   1d074:	add	lr, pc, lr
   1d078:	adc	ip, r1, #0
   1d07c:	ldr	r4, [lr, #4]
   1d080:	ldr	r6, [pc, #292]	; 1d1ac <__generate_code_for_binary_boolean_expression@@Base+0x20d4>
   1d084:	ldr	r6, [pc, r6]
   1d088:	subs	r7, r6, r7
   1d08c:	sbcs	r7, r4, ip
   1d090:	bcs	1d108 <__generate_code_for_binary_boolean_expression@@Base+0x2030>
   1d094:	mov	r2, #3
   1d098:	orr	r2, r2, #131072	; 0x20000
   1d09c:	adds	r0, r2, r8
   1d0a0:	adc	r1, r1, #0
   1d0a4:	adds	r0, r0, #4
   1d0a8:	adc	r1, r1, #0
   1d0ac:	mvn	r2, #0
   1d0b0:	and	r7, r1, r2
   1d0b4:	mov	r1, #16646144	; 0xfe0000
   1d0b8:	orr	r1, r1, #-16777216	; 0xff000000
   1d0bc:	and	r6, r0, r1
   1d0c0:	mov	r0, r3
   1d0c4:	mov	r1, r6
   1d0c8:	mov	r8, lr
   1d0cc:	bl	11f54 <realloc@plt>
   1d0d0:	ldr	lr, [pc, #220]	; 1d1b4 <__generate_code_for_binary_boolean_expression@@Base+0x20dc>
   1d0d4:	strd	r6, [r8]
   1d0d8:	mov	r3, r0
   1d0dc:	add	lr, pc, lr
   1d0e0:	mov	r4, lr
   1d0e4:	ldr	r9, [lr, #4]
   1d0e8:	ldr	r0, [pc, #200]	; 1d1b8 <__generate_code_for_binary_boolean_expression@@Base+0x20e0>
   1d0ec:	add	r0, pc, r0
   1d0f0:	str	r3, [r0]
   1d0f4:	ldr	r2, [pc, #192]	; 1d1bc <__generate_code_for_binary_boolean_expression@@Base+0x20e4>
   1d0f8:	ldr	r2, [pc, r2]
   1d0fc:	ldr	lr, [pc, #188]	; 1d1c0 <__generate_code_for_binary_boolean_expression@@Base+0x20e8>
   1d100:	add	lr, pc, lr
   1d104:	b	1cecc <__generate_code_for_binary_boolean_expression@@Base+0x1df4>
   1d108:	ldr	lr, [pc, #160]	; 1d1b0 <__generate_code_for_binary_boolean_expression@@Base+0x20d8>
   1d10c:	mov	r4, r0
   1d110:	add	lr, pc, lr
   1d114:	b	1cecc <__generate_code_for_binary_boolean_expression@@Base+0x1df4>
   1d118:	sub	sp, fp, #28
   1d11c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d120:	b	11f0c <free@plt>
   1d124:	andeq	r5, r1, r4, asr r7
   1d128:	andeq	r5, r1, r0, asr r7
   1d12c:	andeq	r5, r1, r4, asr #14
   1d130:	andeq	r5, r1, r8, lsr #14
   1d134:	andeq	r5, r1, r0, lsr #12
   1d138:	andeq	r2, r0, r5, ror #16
   1d13c:	andeq	r4, r1, r0, lsl r3
   1d140:	andeq	r5, r1, r8, ror #7
   1d144:	andeq	r2, r0, r3, lsr #17
   1d148:	andeq	r5, r1, r8, ror #7
   1d14c:	ldrdeq	r5, [r1], -r0
   1d150:	andeq	r5, r1, r8, asr r5
   1d154:	andeq	r5, r1, r0, lsr r5
   1d158:	andeq	r5, r1, r8, lsl r7
   1d15c:	andeq	r5, r1, r4, lsl #14
   1d160:	andeq	r5, r1, r4, lsl r5
   1d164:	strdeq	r5, [r1], -r8
   1d168:	andeq	r5, r1, r0, asr #13
   1d16c:	andeq	r5, r1, r0, lsr #13
   1d170:			; <UNDEFINED> instruction: 0x000156b0
   1d174:	andeq	r5, r1, r0, lsr #13
   1d178:	andeq	r5, r1, r8, lsl #13
   1d17c:			; <UNDEFINED> instruction: 0x000154b8
   1d180:	andeq	r5, r1, r8, ror #8
   1d184:	andeq	r5, r1, r8, lsr r4
   1d188:	andeq	r5, r1, r0, ror #8
   1d18c:	andeq	r5, r1, r0, asr #8
   1d190:	andeq	r5, r1, r8, lsr #6
   1d194:	andeq	r5, r1, r4, lsr r2
   1d198:	andeq	r5, r1, r8, asr #3
   1d19c:	andeq	r5, r1, r8, ror #3
   1d1a0:	ldrdeq	r5, [r1], -r4
   1d1a4:			; <UNDEFINED> instruction: 0x000151bc
   1d1a8:	andeq	r5, r1, ip, lsr r1
   1d1ac:	andeq	r5, r1, ip, lsr #2
   1d1b0:	muleq	r1, r4, r0
   1d1b4:	ldrdeq	r5, [r1], -ip
   1d1b8:	andeq	r5, r1, r0, asr #1
   1d1bc:	andeq	r5, r1, r0, asr #1
   1d1c0:	andeq	r5, r1, r4, lsr #1
   1d1c4:	andeq	r5, r1, ip, lsl #5
   1d1c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1cc:	add	fp, sp, #28
   1d1d0:	sub	sp, sp, #4
   1d1d4:	ldr	r0, [pc, #3180]	; 1de48 <__generate_code_for_binary_boolean_expression@@Base+0x2d70>
   1d1d8:	ldr	r0, [pc, r0]
   1d1dc:	cmp	r0, #0
   1d1e0:	beq	1d83c <__generate_code_for_binary_boolean_expression@@Base+0x2764>
   1d1e4:	ldr	sl, [pc, #3168]	; 1de4c <__generate_code_for_binary_boolean_expression@@Base+0x2d74>
   1d1e8:	add	sl, pc, sl
   1d1ec:	ldr	r6, [sl, #4]
   1d1f0:	ldr	r5, [pc, #3160]	; 1de50 <__generate_code_for_binary_boolean_expression@@Base+0x2d78>
   1d1f4:	ldr	r5, [pc, r5]
   1d1f8:	ldr	r8, [pc, #3156]	; 1de54 <__generate_code_for_binary_boolean_expression@@Base+0x2d7c>
   1d1fc:	add	r8, pc, r8
   1d200:	ldrb	r0, [r8]
   1d204:	cmp	r0, #0
   1d208:	beq	1d2cc <__generate_code_for_binary_boolean_expression@@Base+0x21f4>
   1d20c:	ldr	r9, [pc, #3164]	; 1de70 <__generate_code_for_binary_boolean_expression@@Base+0x2d98>
   1d210:	adds	r2, r5, #4
   1d214:	adc	ip, r6, #0
   1d218:	add	r9, pc, r9
   1d21c:	ldr	r0, [r9, #4]
   1d220:	ldr	r3, [pc, #3148]	; 1de74 <__generate_code_for_binary_boolean_expression@@Base+0x2d9c>
   1d224:	ldr	r3, [pc, r3]
   1d228:	subs	r3, r3, r2
   1d22c:	sbcs	r0, r0, ip
   1d230:	bcs	1d320 <__generate_code_for_binary_boolean_expression@@Base+0x2248>
   1d234:	mov	r0, #7
   1d238:	orr	r0, r0, #131072	; 0x20000
   1d23c:	adds	r0, r0, r5
   1d240:	adc	r1, r6, #0
   1d244:	subs	r0, r0, #4
   1d248:	sbc	r1, r1, #0
   1d24c:	mvn	r2, #0
   1d250:	and	r5, r1, r2
   1d254:	mov	r1, #16646144	; 0xfe0000
   1d258:	orr	r1, r1, #-16777216	; 0xff000000
   1d25c:	ldr	r4, [pc, #3096]	; 1de7c <__generate_code_for_binary_boolean_expression@@Base+0x2da4>
   1d260:	and	r6, r0, r1
   1d264:	ldr	r0, [pc, #3092]	; 1de80 <__generate_code_for_binary_boolean_expression@@Base+0x2da8>
   1d268:	mov	r1, r6
   1d26c:	add	r4, pc, r4
   1d270:	ldr	r0, [pc, r0]
   1d274:	bl	11f54 <realloc@plt>
   1d278:	str	r6, [r9]
   1d27c:	str	r5, [r9, #4]
   1d280:	str	r0, [r4]
   1d284:	ldrb	r3, [r8]
   1d288:	ldr	r6, [sl, #4]
   1d28c:	ldr	r5, [pc, #3056]	; 1de84 <__generate_code_for_binary_boolean_expression@@Base+0x2dac>
   1d290:	mov	r2, r0
   1d294:	mov	r1, #0
   1d298:	mov	r7, #161	; 0xa1
   1d29c:	ldr	r5, [pc, r5]
   1d2a0:	strb	r1, [r2, r5]!
   1d2a4:	strb	r7, [r2, #3]
   1d2a8:	strb	r1, [r2, #2]
   1d2ac:	strb	r1, [r2, #1]
   1d2b0:	adds	r2, r5, #4
   1d2b4:	adc	ip, r6, #0
   1d2b8:	mov	r7, #1
   1d2bc:	cmp	r3, #1
   1d2c0:	stm	sl, {r2, ip}
   1d2c4:	beq	1d348 <__generate_code_for_binary_boolean_expression@@Base+0x2270>
   1d2c8:	b	1d520 <__generate_code_for_binary_boolean_expression@@Base+0x2448>
   1d2cc:	ldr	r0, [pc, #2948]	; 1de58 <__generate_code_for_binary_boolean_expression@@Base+0x2d80>
   1d2d0:	ldr	r0, [pc, r0]
   1d2d4:	mov	r1, r0
   1d2d8:	ldrb	r2, [r1, r5]!
   1d2dc:	ldrb	r3, [r1, #1]
   1d2e0:	ldrb	r7, [r1, #2]
   1d2e4:	ldrb	r1, [r1, #3]
   1d2e8:	orr	r2, r2, r3, lsl #8
   1d2ec:	orr	r2, r2, r7, lsl #16
   1d2f0:	orr	r3, r2, r1, lsl #24
   1d2f4:	adds	r2, r5, #4
   1d2f8:	adc	ip, r6, #0
   1d2fc:	cmp	r3, #-1593835520	; 0xa1000000
   1d300:	stm	sl, {r2, ip}
   1d304:	beq	1d4c0 <__generate_code_for_binary_boolean_expression@@Base+0x23e8>
   1d308:	mov	r7, #1
   1d30c:	cmn	r3, #1
   1d310:	beq	1d500 <__generate_code_for_binary_boolean_expression@@Base+0x2428>
   1d314:	ldr	r1, [pc, #2880]	; 1de5c <__generate_code_for_binary_boolean_expression@@Base+0x2d84>
   1d318:	add	r1, pc, r1
   1d31c:	b	1dc00 <__generate_code_for_binary_boolean_expression@@Base+0x2b28>
   1d320:	ldr	r0, [pc, #2896]	; 1de78 <__generate_code_for_binary_boolean_expression@@Base+0x2da0>
   1d324:	mov	r3, #0
   1d328:	mov	r4, #161	; 0xa1
   1d32c:	ldr	r0, [pc, r0]
   1d330:	mov	r7, r0
   1d334:	strb	r3, [r7, r5]!
   1d338:	strb	r4, [r7, #3]
   1d33c:	strb	r3, [r7, #2]
   1d340:	strb	r3, [r7, #1]
   1d344:	stm	sl, {r2, ip}
   1d348:	ldr	r4, [r9, #4]
   1d34c:	ldr	r1, [pc, #2868]	; 1de88 <__generate_code_for_binary_boolean_expression@@Base+0x2db0>
   1d350:	adds	r3, r5, #8
   1d354:	adc	r7, r6, #0
   1d358:	ldr	r1, [pc, r1]
   1d35c:	subs	r1, r1, r3
   1d360:	sbcs	r1, r4, r7
   1d364:	bcs	1d3f0 <__generate_code_for_binary_boolean_expression@@Base+0x2318>
   1d368:	mov	r1, #7
   1d36c:	orr	r1, r1, #131072	; 0x20000
   1d370:	adds	r1, r5, r1
   1d374:	adc	r2, r6, #0
   1d378:	mvn	r3, #0
   1d37c:	and	r5, r2, r3
   1d380:	mov	r2, #16646144	; 0xfe0000
   1d384:	orr	r2, r2, #-16777216	; 0xff000000
   1d388:	ldr	r4, [pc, #2812]	; 1de8c <__generate_code_for_binary_boolean_expression@@Base+0x2db4>
   1d38c:	and	r6, r1, r2
   1d390:	mov	r1, r6
   1d394:	add	r4, pc, r4
   1d398:	bl	11f54 <realloc@plt>
   1d39c:	str	r6, [r9]
   1d3a0:	str	r5, [r9, #4]
   1d3a4:	str	r0, [r4]
   1d3a8:	ldrb	r1, [r8]
   1d3ac:	ldr	ip, [sl, #4]
   1d3b0:	ldr	r2, [pc, #2776]	; 1de90 <__generate_code_for_binary_boolean_expression@@Base+0x2db8>
   1d3b4:	mov	r7, r0
   1d3b8:	mov	r3, #9
   1d3bc:	ldr	r2, [pc, r2]
   1d3c0:	strb	r3, [r7, r2]!
   1d3c4:	mov	r3, #0
   1d3c8:	strb	r3, [r7, #3]
   1d3cc:	strb	r3, [r7, #2]
   1d3d0:	strb	r3, [r7, #1]
   1d3d4:	adds	r3, r2, #4
   1d3d8:	adc	r5, ip, #0
   1d3dc:	mov	r7, #1
   1d3e0:	cmp	r1, #1
   1d3e4:	stm	sl, {r3, r5}
   1d3e8:	beq	1d418 <__generate_code_for_binary_boolean_expression@@Base+0x2340>
   1d3ec:	b	1d548 <__generate_code_for_binary_boolean_expression@@Base+0x2470>
   1d3f0:	mov	r3, r0
   1d3f4:	mov	r1, #9
   1d3f8:	strb	r1, [r3, r2]!
   1d3fc:	mov	r1, #0
   1d400:	strb	r1, [r3, #3]
   1d404:	strb	r1, [r3, #2]
   1d408:	strb	r1, [r3, #1]
   1d40c:	adds	r3, r2, #4
   1d410:	adc	r5, ip, #0
   1d414:	stm	sl, {r3, r5}
   1d418:	ldr	r6, [r9, #4]
   1d41c:	ldr	r4, [pc, #2672]	; 1de94 <__generate_code_for_binary_boolean_expression@@Base+0x2dbc>
   1d420:	adds	r1, r2, #8
   1d424:	adc	r7, ip, #0
   1d428:	ldr	r4, [pc, r4]
   1d42c:	subs	r1, r4, r1
   1d430:	sbcs	r1, r6, r7
   1d434:	bcs	1d90c <__generate_code_for_binary_boolean_expression@@Base+0x2834>
   1d438:	mov	r1, #7
   1d43c:	orr	r1, r1, #131072	; 0x20000
   1d440:	adds	r1, r2, r1
   1d444:	adc	r2, ip, #0
   1d448:	mvn	r3, #0
   1d44c:	and	r5, r2, r3
   1d450:	mov	r2, #16646144	; 0xfe0000
   1d454:	orr	r2, r2, #-16777216	; 0xff000000
   1d458:	ldr	r4, [pc, #2616]	; 1de98 <__generate_code_for_binary_boolean_expression@@Base+0x2dc0>
   1d45c:	and	r6, r1, r2
   1d460:	mov	r1, r6
   1d464:	add	r4, pc, r4
   1d468:	bl	11f54 <realloc@plt>
   1d46c:	str	r6, [r9]
   1d470:	str	r5, [r9, #4]
   1d474:	str	r0, [r4]
   1d478:	ldrb	r2, [r8]
   1d47c:	ldr	r5, [sl, #4]
   1d480:	ldr	r3, [pc, #2580]	; 1de9c <__generate_code_for_binary_boolean_expression@@Base+0x2dc4>
   1d484:	mov	r7, r0
   1d488:	mov	r1, #0
   1d48c:	ldr	r3, [pc, r3]
   1d490:	adds	r6, r3, #4
   1d494:	strb	r1, [r7, r3]!
   1d498:	str	r6, [sl]
   1d49c:	strb	r1, [r7, #3]
   1d4a0:	strb	r1, [r7, #2]
   1d4a4:	strb	r1, [r7, #1]
   1d4a8:	adc	r1, r5, #0
   1d4ac:	mov	r7, #1
   1d4b0:	cmp	r2, #1
   1d4b4:	str	r1, [sl, #4]
   1d4b8:	bne	1d570 <__generate_code_for_binary_boolean_expression@@Base+0x2498>
   1d4bc:	b	1d934 <__generate_code_for_binary_boolean_expression@@Base+0x285c>
   1d4c0:	ldr	r3, [r0, r2]
   1d4c4:	adds	r4, r5, #8
   1d4c8:	adc	r7, r6, #0
   1d4cc:	cmp	r3, #9
   1d4d0:	stm	sl, {r4, r7}
   1d4d4:	bne	1dbf8 <__generate_code_for_binary_boolean_expression@@Base+0x2b20>
   1d4d8:	ldr	r3, [pc, #2444]	; 1de6c <__generate_code_for_binary_boolean_expression@@Base+0x2d94>
   1d4dc:	adds	r4, r5, #20
   1d4e0:	adc	r7, r6, #0
   1d4e4:	add	r3, pc, r3
   1d4e8:	add	r6, r5, r0
   1d4ec:	ldrb	r3, [r3]
   1d4f0:	ldr	r6, [r6, #16]
   1d4f4:	stm	sl, {r4, r7}
   1d4f8:	eor	r3, r3, #1
   1d4fc:	add	r7, r6, r3
   1d500:	mov	r6, r0
   1d504:	mov	r3, #0
   1d508:	strb	r3, [r6, r5]!
   1d50c:	mov	r5, #161	; 0xa1
   1d510:	strb	r5, [r6, #3]
   1d514:	strb	r3, [r6, #2]
   1d518:	strb	r3, [r6, #1]
   1d51c:	stm	sl, {r2, ip}
   1d520:	mov	r3, r0
   1d524:	mov	r1, #9
   1d528:	strb	r1, [r3, r2]!
   1d52c:	mov	r1, #0
   1d530:	strb	r1, [r3, #3]
   1d534:	strb	r1, [r3, #2]
   1d538:	strb	r1, [r3, #1]
   1d53c:	adds	r3, r2, #4
   1d540:	adc	r5, ip, #0
   1d544:	stm	sl, {r3, r5}
   1d548:	mov	r2, r0
   1d54c:	mov	r1, #0
   1d550:	strb	r1, [r2, r3]!
   1d554:	adds	r6, r3, #4
   1d558:	strb	r1, [r2, #3]
   1d55c:	strb	r1, [r2, #2]
   1d560:	strb	r1, [r2, #1]
   1d564:	adc	r1, r5, #0
   1d568:	str	r6, [sl]
   1d56c:	str	r1, [sl, #4]
   1d570:	mov	r3, r0
   1d574:	mov	r2, #0
   1d578:	strb	r2, [r3, r6]!
   1d57c:	strb	r2, [r3, #3]
   1d580:	strb	r2, [r3, #2]
   1d584:	strb	r2, [r3, #1]
   1d588:	adds	r2, r6, #4
   1d58c:	adc	r3, r1, #0
   1d590:	strd	r2, [sl]
   1d594:	lsr	r1, r7, #24
   1d598:	strb	r7, [r0, r2]!
   1d59c:	lsr	r6, r7, #16
   1d5a0:	lsr	r5, r7, #8
   1d5a4:	strb	r1, [r0, #3]
   1d5a8:	strb	r6, [r0, #2]
   1d5ac:	strb	r5, [r0, #1]
   1d5b0:	ldrb	r0, [r8]
   1d5b4:	adds	r4, r2, #4
   1d5b8:	adc	r5, r3, #0
   1d5bc:	cmp	r0, #0
   1d5c0:	strd	r4, [sl]
   1d5c4:	beq	1d678 <__generate_code_for_binary_boolean_expression@@Base+0x25a0>
   1d5c8:	ldr	r9, [pc, #2284]	; 1debc <__generate_code_for_binary_boolean_expression@@Base+0x2de4>
   1d5cc:	adds	r0, r2, #8
   1d5d0:	adc	r1, r3, #0
   1d5d4:	add	r9, pc, r9
   1d5d8:	ldr	r7, [r9, #4]
   1d5dc:	ldr	r6, [pc, #2268]	; 1dec0 <__generate_code_for_binary_boolean_expression@@Base+0x2de8>
   1d5e0:	ldr	r6, [pc, r6]
   1d5e4:	subs	r0, r6, r0
   1d5e8:	sbcs	r0, r7, r1
   1d5ec:	bcs	1d844 <__generate_code_for_binary_boolean_expression@@Base+0x276c>
   1d5f0:	mov	r0, #7
   1d5f4:	orr	r0, r0, #131072	; 0x20000
   1d5f8:	adds	r0, r2, r0
   1d5fc:	adc	r1, r3, #0
   1d600:	mvn	r2, #0
   1d604:	and	r5, r1, r2
   1d608:	mov	r1, #16646144	; 0xfe0000
   1d60c:	orr	r1, r1, #-16777216	; 0xff000000
   1d610:	ldr	r4, [pc, #2268]	; 1def4 <__generate_code_for_binary_boolean_expression@@Base+0x2e1c>
   1d614:	and	r6, r0, r1
   1d618:	ldr	r0, [pc, #2264]	; 1def8 <__generate_code_for_binary_boolean_expression@@Base+0x2e20>
   1d61c:	mov	r1, r6
   1d620:	add	r4, pc, r4
   1d624:	ldr	r0, [pc, r0]
   1d628:	bl	11f54 <realloc@plt>
   1d62c:	str	r6, [r9]
   1d630:	str	r5, [r9, #4]
   1d634:	str	r0, [r4]
   1d638:	ldrb	r1, [r8]
   1d63c:	ldr	r5, [sl, #4]
   1d640:	ldr	r4, [pc, #2228]	; 1defc <__generate_code_for_binary_boolean_expression@@Base+0x2e24>
   1d644:	mov	r3, r0
   1d648:	mov	r2, #0
   1d64c:	ldr	r4, [pc, r4]
   1d650:	strb	r2, [r3, r4]!
   1d654:	strb	r2, [r3, #3]
   1d658:	strb	r2, [r3, #2]
   1d65c:	strb	r2, [r3, #1]
   1d660:	adds	r2, r4, #4
   1d664:	adc	r3, r5, #0
   1d668:	cmp	r1, #0
   1d66c:	strd	r2, [sl]
   1d670:	beq	1d6a4 <__generate_code_for_binary_boolean_expression@@Base+0x25cc>
   1d674:	b	1d870 <__generate_code_for_binary_boolean_expression@@Base+0x2798>
   1d678:	ldr	r0, [pc, #2104]	; 1deb8 <__generate_code_for_binary_boolean_expression@@Base+0x2de0>
   1d67c:	adds	r2, r2, #8
   1d680:	mov	r1, #0
   1d684:	adc	r3, r3, #0
   1d688:	ldr	r0, [pc, r0]
   1d68c:	mov	r7, r0
   1d690:	strb	r1, [r7, r4]!
   1d694:	strb	r1, [r7, #3]
   1d698:	strb	r1, [r7, #2]
   1d69c:	strb	r1, [r7, #1]
   1d6a0:	strd	r2, [sl]
   1d6a4:	mov	r7, r0
   1d6a8:	mov	r1, #0
   1d6ac:	strb	r1, [r7, r2]!
   1d6b0:	strb	r1, [r7, #3]
   1d6b4:	strb	r1, [r7, #2]
   1d6b8:	strb	r1, [r7, #1]
   1d6bc:	adds	r1, r2, #4
   1d6c0:	adc	r5, r3, #0
   1d6c4:	stm	sl, {r1, r5}
   1d6c8:	mov	r3, r0
   1d6cc:	mov	r2, #0
   1d6d0:	strb	r2, [r3, r1]!
   1d6d4:	strb	r2, [r3, #3]
   1d6d8:	strb	r2, [r3, #2]
   1d6dc:	strb	r2, [r3, #1]
   1d6e0:	adds	r2, r1, #4
   1d6e4:	adc	r3, r5, #0
   1d6e8:	strd	r2, [sl]
   1d6ec:	mov	r7, r0
   1d6f0:	mov	r1, #0
   1d6f4:	strb	r1, [r7, r2]!
   1d6f8:	strb	r1, [r7, #3]
   1d6fc:	strb	r1, [r7, #2]
   1d700:	strb	r1, [r7, #1]
   1d704:	adds	r1, r2, #4
   1d708:	adc	r5, r3, #0
   1d70c:	stm	sl, {r1, r5}
   1d710:	mov	r3, r0
   1d714:	mov	r2, #0
   1d718:	strb	r2, [r3, r1]!
   1d71c:	adds	r4, r1, #4
   1d720:	strb	r2, [r3, #3]
   1d724:	strb	r2, [r3, #2]
   1d728:	strb	r2, [r3, #1]
   1d72c:	adc	r3, r5, #0
   1d730:	str	r4, [sl]
   1d734:	str	r3, [sl, #4]
   1d738:	mov	r2, r0
   1d73c:	mov	r1, #0
   1d740:	strb	r1, [r2, r4]!
   1d744:	strb	r1, [r2, #3]
   1d748:	strb	r1, [r2, #2]
   1d74c:	strb	r1, [r2, #1]
   1d750:	adds	r2, r4, #4
   1d754:	adc	r1, r3, #0
   1d758:	str	r2, [sl]
   1d75c:	str	r1, [sl, #4]
   1d760:	mov	r3, r0
   1d764:	mov	r4, #0
   1d768:	strb	r4, [r3, r2]!
   1d76c:	mov	r7, #163	; 0xa3
   1d770:	strb	r7, [r3, #3]
   1d774:	strb	r4, [r3, #2]
   1d778:	strb	r4, [r3, #1]
   1d77c:	ldrb	r7, [r8]
   1d780:	adds	r6, r2, #4
   1d784:	adc	r3, r1, #0
   1d788:	cmp	r7, #1
   1d78c:	str	r6, [sl]
   1d790:	str	r3, [sl, #4]
   1d794:	bne	1d808 <__generate_code_for_binary_boolean_expression@@Base+0x2730>
   1d798:	ldr	r8, [pc, #1852]	; 1dedc <__generate_code_for_binary_boolean_expression@@Base+0x2e04>
   1d79c:	adds	lr, r2, #8
   1d7a0:	adc	ip, r1, #0
   1d7a4:	add	r8, pc, r8
   1d7a8:	ldr	r5, [r8, #4]
   1d7ac:	ldr	r7, [pc, #1836]	; 1dee0 <__generate_code_for_binary_boolean_expression@@Base+0x2e08>
   1d7b0:	ldr	r7, [pc, r7]
   1d7b4:	subs	r7, r7, lr
   1d7b8:	sbcs	r7, r5, ip
   1d7bc:	bcs	1d808 <__generate_code_for_binary_boolean_expression@@Base+0x2730>
   1d7c0:	mov	r3, #7
   1d7c4:	orr	r3, r3, #131072	; 0x20000
   1d7c8:	adds	r2, r2, r3
   1d7cc:	adc	r1, r1, #0
   1d7d0:	mvn	r3, #0
   1d7d4:	and	r7, r1, r3
   1d7d8:	mov	r1, #16646144	; 0xfe0000
   1d7dc:	orr	r1, r1, #-16777216	; 0xff000000
   1d7e0:	ldr	r5, [pc, #1788]	; 1dee4 <__generate_code_for_binary_boolean_expression@@Base+0x2e0c>
   1d7e4:	and	r6, r2, r1
   1d7e8:	mov	r1, r6
   1d7ec:	add	r5, pc, r5
   1d7f0:	bl	11f54 <realloc@plt>
   1d7f4:	strd	r6, [r8]
   1d7f8:	str	r0, [r5]
   1d7fc:	ldr	r3, [sl, #4]
   1d800:	ldr	r6, [pc, #1760]	; 1dee8 <__generate_code_for_binary_boolean_expression@@Base+0x2e10>
   1d804:	ldr	r6, [pc, r6]
   1d808:	ldr	r0, [pc, #1756]	; 1deec <__generate_code_for_binary_boolean_expression@@Base+0x2e14>
   1d80c:	ldr	r1, [pc, #1756]	; 1def0 <__generate_code_for_binary_boolean_expression@@Base+0x2e18>
   1d810:	adds	r2, r6, #4
   1d814:	add	r0, pc, r0
   1d818:	adc	r3, r3, #0
   1d81c:	ldr	r1, [pc, r1]
   1d820:	strb	r4, [r1, r6]!
   1d824:	strb	r4, [r1, #3]
   1d828:	strb	r4, [r1, #2]
   1d82c:	strb	r4, [r1, #1]
   1d830:	mov	r1, #1
   1d834:	strd	r2, [sl]
   1d838:	strb	r1, [r0]
   1d83c:	sub	sp, fp, #28
   1d840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d844:	ldr	r0, [pc, #1656]	; 1dec4 <__generate_code_for_binary_boolean_expression@@Base+0x2dec>
   1d848:	adds	r2, r2, #8
   1d84c:	mov	r1, #0
   1d850:	adc	r3, r3, #0
   1d854:	ldr	r0, [pc, r0]
   1d858:	mov	r7, r0
   1d85c:	strb	r1, [r7, r4]!
   1d860:	strb	r1, [r7, #3]
   1d864:	strb	r1, [r7, #2]
   1d868:	strb	r1, [r7, #1]
   1d86c:	strd	r2, [sl]
   1d870:	ldr	r6, [r9, #4]
   1d874:	ldr	r1, [pc, #1668]	; 1df00 <__generate_code_for_binary_boolean_expression@@Base+0x2e28>
   1d878:	adds	ip, r4, #8
   1d87c:	adc	r7, r5, #0
   1d880:	ldr	r1, [pc, r1]
   1d884:	subs	r1, r1, ip
   1d888:	sbcs	r1, r6, r7
   1d88c:	bcs	1d9d8 <__generate_code_for_binary_boolean_expression@@Base+0x2900>
   1d890:	mov	r1, #7
   1d894:	orr	r1, r1, #131072	; 0x20000
   1d898:	adds	r1, r4, r1
   1d89c:	adc	r2, r5, #0
   1d8a0:	mvn	r3, #0
   1d8a4:	and	r5, r2, r3
   1d8a8:	mov	r2, #16646144	; 0xfe0000
   1d8ac:	orr	r2, r2, #-16777216	; 0xff000000
   1d8b0:	ldr	r6, [pc, #1612]	; 1df04 <__generate_code_for_binary_boolean_expression@@Base+0x2e2c>
   1d8b4:	and	r4, r1, r2
   1d8b8:	mov	r1, r4
   1d8bc:	add	r6, pc, r6
   1d8c0:	bl	11f54 <realloc@plt>
   1d8c4:	str	r0, [r6]
   1d8c8:	strd	r4, [r9]
   1d8cc:	ldrb	r7, [r8]
   1d8d0:	ldr	r3, [sl, #4]
   1d8d4:	ldr	r2, [pc, #1580]	; 1df08 <__generate_code_for_binary_boolean_expression@@Base+0x2e30>
   1d8d8:	mov	r6, r0
   1d8dc:	mov	r1, #0
   1d8e0:	ldr	r2, [pc, r2]
   1d8e4:	strb	r1, [r6, r2]!
   1d8e8:	strb	r1, [r6, #3]
   1d8ec:	strb	r1, [r6, #2]
   1d8f0:	strb	r1, [r6, #1]
   1d8f4:	adds	r1, r2, #4
   1d8f8:	adc	r5, r3, #0
   1d8fc:	cmp	r7, #1
   1d900:	stm	sl, {r1, r5}
   1d904:	bne	1d6c8 <__generate_code_for_binary_boolean_expression@@Base+0x25f0>
   1d908:	b	1d9fc <__generate_code_for_binary_boolean_expression@@Base+0x2924>
   1d90c:	mov	r2, r0
   1d910:	mov	r1, #0
   1d914:	strb	r1, [r2, r3]!
   1d918:	adds	r6, r3, #4
   1d91c:	strb	r1, [r2, #3]
   1d920:	strb	r1, [r2, #2]
   1d924:	strb	r1, [r2, #1]
   1d928:	adc	r1, r5, #0
   1d92c:	str	r6, [sl]
   1d930:	str	r1, [sl, #4]
   1d934:	ldr	r4, [r9, #4]
   1d938:	ldr	r2, [pc, #1376]	; 1dea0 <__generate_code_for_binary_boolean_expression@@Base+0x2dc8>
   1d93c:	adds	ip, r3, #8
   1d940:	adc	r7, r5, #0
   1d944:	ldr	r2, [pc, r2]
   1d948:	subs	r2, r2, ip
   1d94c:	sbcs	r2, r4, r7
   1d950:	bcs	1da9c <__generate_code_for_binary_boolean_expression@@Base+0x29c4>
   1d954:	mov	r1, #7
   1d958:	orr	r1, r1, #131072	; 0x20000
   1d95c:	adds	r1, r3, r1
   1d960:	adc	r2, r5, #0
   1d964:	mvn	r3, #0
   1d968:	and	r5, r2, r3
   1d96c:	mov	r2, #16646144	; 0xfe0000
   1d970:	orr	r2, r2, #-16777216	; 0xff000000
   1d974:	ldr	r4, [pc, #1320]	; 1dea4 <__generate_code_for_binary_boolean_expression@@Base+0x2dcc>
   1d978:	and	r6, r1, r2
   1d97c:	mov	r1, r6
   1d980:	add	r4, pc, r4
   1d984:	bl	11f54 <realloc@plt>
   1d988:	str	r6, [r9]
   1d98c:	str	r5, [r9, #4]
   1d990:	str	r0, [r4]
   1d994:	ldrb	r5, [r8]
   1d998:	ldr	r1, [sl, #4]
   1d99c:	ldr	r6, [pc, #1284]	; 1dea8 <__generate_code_for_binary_boolean_expression@@Base+0x2dd0>
   1d9a0:	mov	r3, r0
   1d9a4:	mov	r2, #0
   1d9a8:	mov	r7, #1
   1d9ac:	ldr	r6, [pc, r6]
   1d9b0:	strb	r2, [r3, r6]!
   1d9b4:	strb	r2, [r3, #3]
   1d9b8:	strb	r2, [r3, #2]
   1d9bc:	strb	r2, [r3, #1]
   1d9c0:	adds	r2, r6, #4
   1d9c4:	adc	r3, r1, #0
   1d9c8:	cmp	r5, #1
   1d9cc:	strd	r2, [sl]
   1d9d0:	bne	1d594 <__generate_code_for_binary_boolean_expression@@Base+0x24bc>
   1d9d4:	b	1dac0 <__generate_code_for_binary_boolean_expression@@Base+0x29e8>
   1d9d8:	mov	r7, r0
   1d9dc:	mov	r1, #0
   1d9e0:	strb	r1, [r7, r2]!
   1d9e4:	strb	r1, [r7, #3]
   1d9e8:	strb	r1, [r7, #2]
   1d9ec:	strb	r1, [r7, #1]
   1d9f0:	adds	r1, r2, #4
   1d9f4:	adc	r5, r3, #0
   1d9f8:	stm	sl, {r1, r5}
   1d9fc:	ldr	r4, [r9, #4]
   1da00:	ldr	r6, [pc, #1284]	; 1df0c <__generate_code_for_binary_boolean_expression@@Base+0x2e34>
   1da04:	adds	r7, r2, #8
   1da08:	adc	ip, r3, #0
   1da0c:	ldr	r6, [pc, r6]
   1da10:	subs	r7, r6, r7
   1da14:	sbcs	r7, r4, ip
   1da18:	bcs	1db34 <__generate_code_for_binary_boolean_expression@@Base+0x2a5c>
   1da1c:	mov	r1, #7
   1da20:	orr	r1, r1, #131072	; 0x20000
   1da24:	adds	r1, r2, r1
   1da28:	adc	r2, r3, #0
   1da2c:	mvn	r3, #0
   1da30:	and	r5, r2, r3
   1da34:	mov	r2, #16646144	; 0xfe0000
   1da38:	orr	r2, r2, #-16777216	; 0xff000000
   1da3c:	ldr	r4, [pc, #1228]	; 1df10 <__generate_code_for_binary_boolean_expression@@Base+0x2e38>
   1da40:	and	r6, r1, r2
   1da44:	mov	r1, r6
   1da48:	add	r4, pc, r4
   1da4c:	bl	11f54 <realloc@plt>
   1da50:	str	r6, [r9]
   1da54:	str	r5, [r9, #4]
   1da58:	str	r0, [r4]
   1da5c:	ldrb	r7, [r8]
   1da60:	ldr	r5, [sl, #4]
   1da64:	ldr	r1, [pc, #1192]	; 1df14 <__generate_code_for_binary_boolean_expression@@Base+0x2e3c>
   1da68:	mov	r3, r0
   1da6c:	mov	r2, #0
   1da70:	ldr	r1, [pc, r1]
   1da74:	strb	r2, [r3, r1]!
   1da78:	strb	r2, [r3, #3]
   1da7c:	strb	r2, [r3, #2]
   1da80:	strb	r2, [r3, #1]
   1da84:	adds	r2, r1, #4
   1da88:	adc	r3, r5, #0
   1da8c:	cmp	r7, #1
   1da90:	strd	r2, [sl]
   1da94:	bne	1d6ec <__generate_code_for_binary_boolean_expression@@Base+0x2614>
   1da98:	b	1db58 <__generate_code_for_binary_boolean_expression@@Base+0x2a80>
   1da9c:	mov	r3, r0
   1daa0:	mov	r2, #0
   1daa4:	strb	r2, [r3, r6]!
   1daa8:	strb	r2, [r3, #3]
   1daac:	strb	r2, [r3, #2]
   1dab0:	strb	r2, [r3, #1]
   1dab4:	adds	r2, r6, #4
   1dab8:	adc	r3, r1, #0
   1dabc:	strd	r2, [sl]
   1dac0:	ldr	r4, [r9, #4]
   1dac4:	ldr	r5, [pc, #992]	; 1deac <__generate_code_for_binary_boolean_expression@@Base+0x2dd4>
   1dac8:	adds	lr, r6, #8
   1dacc:	adc	ip, r1, #0
   1dad0:	mov	r7, #1
   1dad4:	ldr	r5, [pc, r5]
   1dad8:	subs	r5, r5, lr
   1dadc:	sbcs	r5, r4, ip
   1dae0:	bcs	1d594 <__generate_code_for_binary_boolean_expression@@Base+0x24bc>
   1dae4:	mov	r2, #7
   1dae8:	orr	r2, r2, #131072	; 0x20000
   1daec:	adds	r2, r6, r2
   1daf0:	adc	r1, r1, #0
   1daf4:	mvn	r3, #0
   1daf8:	and	r5, r1, r3
   1dafc:	mov	r1, #16646144	; 0xfe0000
   1db00:	orr	r1, r1, #-16777216	; 0xff000000
   1db04:	ldr	r4, [pc, #932]	; 1deb0 <__generate_code_for_binary_boolean_expression@@Base+0x2dd8>
   1db08:	and	r6, r2, r1
   1db0c:	mov	r1, r6
   1db10:	add	r4, pc, r4
   1db14:	bl	11f54 <realloc@plt>
   1db18:	str	r6, [r9]
   1db1c:	str	r5, [r9, #4]
   1db20:	str	r0, [r4]
   1db24:	ldr	r3, [sl, #4]
   1db28:	ldr	r2, [pc, #900]	; 1deb4 <__generate_code_for_binary_boolean_expression@@Base+0x2ddc>
   1db2c:	ldr	r2, [pc, r2]
   1db30:	b	1d594 <__generate_code_for_binary_boolean_expression@@Base+0x24bc>
   1db34:	mov	r3, r0
   1db38:	mov	r2, #0
   1db3c:	strb	r2, [r3, r1]!
   1db40:	strb	r2, [r3, #3]
   1db44:	strb	r2, [r3, #2]
   1db48:	strb	r2, [r3, #1]
   1db4c:	adds	r2, r1, #4
   1db50:	adc	r3, r5, #0
   1db54:	strd	r2, [sl]
   1db58:	ldr	r4, [r9, #4]
   1db5c:	ldr	r6, [pc, #948]	; 1df18 <__generate_code_for_binary_boolean_expression@@Base+0x2e40>
   1db60:	adds	r7, r1, #8
   1db64:	adc	ip, r5, #0
   1db68:	ldr	r6, [pc, r6]
   1db6c:	subs	r7, r6, r7
   1db70:	sbcs	r7, r4, ip
   1db74:	bcs	1dc20 <__generate_code_for_binary_boolean_expression@@Base+0x2b48>
   1db78:	mov	r2, #7
   1db7c:	orr	r2, r2, #131072	; 0x20000
   1db80:	adds	r1, r1, r2
   1db84:	adc	r2, r5, #0
   1db88:	mvn	r3, #0
   1db8c:	and	r5, r2, r3
   1db90:	mov	r2, #16646144	; 0xfe0000
   1db94:	orr	r2, r2, #-16777216	; 0xff000000
   1db98:	ldr	r4, [pc, #892]	; 1df1c <__generate_code_for_binary_boolean_expression@@Base+0x2e44>
   1db9c:	and	r6, r1, r2
   1dba0:	mov	r1, r6
   1dba4:	add	r4, pc, r4
   1dba8:	bl	11f54 <realloc@plt>
   1dbac:	str	r6, [r9]
   1dbb0:	str	r5, [r9, #4]
   1dbb4:	str	r0, [r4]
   1dbb8:	ldrb	r7, [r8]
   1dbbc:	ldr	r3, [sl, #4]
   1dbc0:	ldr	r2, [pc, #856]	; 1df20 <__generate_code_for_binary_boolean_expression@@Base+0x2e48>
   1dbc4:	mov	r6, r0
   1dbc8:	mov	r1, #0
   1dbcc:	ldr	r2, [pc, r2]
   1dbd0:	strb	r1, [r6, r2]!
   1dbd4:	strb	r1, [r6, #3]
   1dbd8:	strb	r1, [r6, #2]
   1dbdc:	strb	r1, [r6, #1]
   1dbe0:	adds	r1, r2, #4
   1dbe4:	adc	r5, r3, #0
   1dbe8:	cmp	r7, #1
   1dbec:	stm	sl, {r1, r5}
   1dbf0:	bne	1d710 <__generate_code_for_binary_boolean_expression@@Base+0x2638>
   1dbf4:	b	1dc44 <__generate_code_for_binary_boolean_expression@@Base+0x2b6c>
   1dbf8:	ldr	r1, [pc, #616]	; 1de68 <__generate_code_for_binary_boolean_expression@@Base+0x2d90>
   1dbfc:	add	r1, pc, r1
   1dc00:	ldr	r0, [pc, #600]	; 1de60 <__generate_code_for_binary_boolean_expression@@Base+0x2d88>
   1dc04:	ldr	r0, [pc, r0]
   1dc08:	ldr	r0, [r0]
   1dc0c:	ldr	r2, [pc, #592]	; 1de64 <__generate_code_for_binary_boolean_expression@@Base+0x2d8c>
   1dc10:	ldr	r2, [pc, r2]
   1dc14:	sub	sp, fp, #28
   1dc18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc1c:	b	11ffc <fprintf@plt>
   1dc20:	mov	r7, r0
   1dc24:	mov	r1, #0
   1dc28:	strb	r1, [r7, r2]!
   1dc2c:	strb	r1, [r7, #3]
   1dc30:	strb	r1, [r7, #2]
   1dc34:	strb	r1, [r7, #1]
   1dc38:	adds	r1, r2, #4
   1dc3c:	adc	r5, r3, #0
   1dc40:	stm	sl, {r1, r5}
   1dc44:	ldr	r4, [r9, #4]
   1dc48:	ldr	r6, [pc, #724]	; 1df24 <__generate_code_for_binary_boolean_expression@@Base+0x2e4c>
   1dc4c:	adds	r7, r2, #8
   1dc50:	adc	ip, r3, #0
   1dc54:	ldr	r6, [pc, r6]
   1dc58:	subs	r7, r6, r7
   1dc5c:	sbcs	r7, r4, ip
   1dc60:	bcs	1dce8 <__generate_code_for_binary_boolean_expression@@Base+0x2c10>
   1dc64:	mov	r1, #7
   1dc68:	orr	r1, r1, #131072	; 0x20000
   1dc6c:	adds	r1, r2, r1
   1dc70:	adc	r2, r3, #0
   1dc74:	mvn	r3, #0
   1dc78:	and	r5, r2, r3
   1dc7c:	mov	r2, #16646144	; 0xfe0000
   1dc80:	orr	r2, r2, #-16777216	; 0xff000000
   1dc84:	ldr	r4, [pc, #668]	; 1df28 <__generate_code_for_binary_boolean_expression@@Base+0x2e50>
   1dc88:	and	r6, r1, r2
   1dc8c:	mov	r1, r6
   1dc90:	add	r4, pc, r4
   1dc94:	bl	11f54 <realloc@plt>
   1dc98:	str	r6, [r9]
   1dc9c:	str	r5, [r9, #4]
   1dca0:	str	r0, [r4]
   1dca4:	ldrb	r2, [r8]
   1dca8:	ldr	r5, [sl, #4]
   1dcac:	ldr	r1, [pc, #632]	; 1df2c <__generate_code_for_binary_boolean_expression@@Base+0x2e54>
   1dcb0:	mov	r7, r0
   1dcb4:	mov	r3, #0
   1dcb8:	ldr	r1, [pc, r1]
   1dcbc:	adds	r4, r1, #4
   1dcc0:	strb	r3, [r7, r1]!
   1dcc4:	str	r4, [sl]
   1dcc8:	strb	r3, [r7, #3]
   1dccc:	strb	r3, [r7, #2]
   1dcd0:	strb	r3, [r7, #1]
   1dcd4:	adc	r3, r5, #0
   1dcd8:	cmp	r2, #1
   1dcdc:	str	r3, [sl, #4]
   1dce0:	bne	1d738 <__generate_code_for_binary_boolean_expression@@Base+0x2660>
   1dce4:	b	1dd10 <__generate_code_for_binary_boolean_expression@@Base+0x2c38>
   1dce8:	mov	r3, r0
   1dcec:	mov	r2, #0
   1dcf0:	strb	r2, [r3, r1]!
   1dcf4:	adds	r4, r1, #4
   1dcf8:	strb	r2, [r3, #3]
   1dcfc:	strb	r2, [r3, #2]
   1dd00:	strb	r2, [r3, #1]
   1dd04:	adc	r3, r5, #0
   1dd08:	str	r4, [sl]
   1dd0c:	str	r3, [sl, #4]
   1dd10:	ldr	r6, [r9, #4]
   1dd14:	ldr	r2, [pc, #532]	; 1df30 <__generate_code_for_binary_boolean_expression@@Base+0x2e58>
   1dd18:	adds	ip, r1, #8
   1dd1c:	adc	r7, r5, #0
   1dd20:	ldr	r2, [pc, r2]
   1dd24:	subs	r2, r2, ip
   1dd28:	sbcs	r2, r6, r7
   1dd2c:	bcs	1ddb4 <__generate_code_for_binary_boolean_expression@@Base+0x2cdc>
   1dd30:	mov	r2, #7
   1dd34:	orr	r2, r2, #131072	; 0x20000
   1dd38:	adds	r1, r1, r2
   1dd3c:	adc	r2, r5, #0
   1dd40:	mvn	r3, #0
   1dd44:	and	r5, r2, r3
   1dd48:	mov	r2, #16646144	; 0xfe0000
   1dd4c:	orr	r2, r2, #-16777216	; 0xff000000
   1dd50:	ldr	r4, [pc, #368]	; 1dec8 <__generate_code_for_binary_boolean_expression@@Base+0x2df0>
   1dd54:	and	r6, r1, r2
   1dd58:	mov	r1, r6
   1dd5c:	add	r4, pc, r4
   1dd60:	bl	11f54 <realloc@plt>
   1dd64:	str	r6, [r9]
   1dd68:	str	r5, [r9, #4]
   1dd6c:	str	r0, [r4]
   1dd70:	ldrb	r7, [r8]
   1dd74:	ldr	r3, [sl, #4]
   1dd78:	ldr	r4, [pc, #332]	; 1decc <__generate_code_for_binary_boolean_expression@@Base+0x2df4>
   1dd7c:	mov	r2, r0
   1dd80:	mov	r1, #0
   1dd84:	ldr	r4, [pc, r4]
   1dd88:	strb	r1, [r2, r4]!
   1dd8c:	strb	r1, [r2, #3]
   1dd90:	strb	r1, [r2, #2]
   1dd94:	strb	r1, [r2, #1]
   1dd98:	adds	r2, r4, #4
   1dd9c:	adc	r1, r3, #0
   1dda0:	cmp	r7, #0
   1dda4:	str	r2, [sl]
   1dda8:	str	r1, [sl, #4]
   1ddac:	beq	1d760 <__generate_code_for_binary_boolean_expression@@Base+0x2688>
   1ddb0:	b	1dddc <__generate_code_for_binary_boolean_expression@@Base+0x2d04>
   1ddb4:	mov	r2, r0
   1ddb8:	mov	r1, #0
   1ddbc:	strb	r1, [r2, r4]!
   1ddc0:	strb	r1, [r2, #3]
   1ddc4:	strb	r1, [r2, #2]
   1ddc8:	strb	r1, [r2, #1]
   1ddcc:	adds	r2, r4, #4
   1ddd0:	adc	r1, r3, #0
   1ddd4:	str	r2, [sl]
   1ddd8:	str	r1, [sl, #4]
   1dddc:	ldr	r5, [r9, #4]
   1dde0:	ldr	r6, [pc, #232]	; 1ded0 <__generate_code_for_binary_boolean_expression@@Base+0x2df8>
   1dde4:	adds	r7, r4, #8
   1dde8:	adc	ip, r3, #0
   1ddec:	ldr	r6, [pc, r6]
   1ddf0:	subs	r7, r6, r7
   1ddf4:	sbcs	r7, r5, ip
   1ddf8:	bcs	1d760 <__generate_code_for_binary_boolean_expression@@Base+0x2688>
   1ddfc:	mov	r1, #7
   1de00:	orr	r1, r1, #131072	; 0x20000
   1de04:	adds	r1, r4, r1
   1de08:	adc	r2, r3, #0
   1de0c:	mvn	r3, #0
   1de10:	and	r7, r2, r3
   1de14:	mov	r2, #16646144	; 0xfe0000
   1de18:	orr	r2, r2, #-16777216	; 0xff000000
   1de1c:	ldr	r5, [pc, #176]	; 1ded4 <__generate_code_for_binary_boolean_expression@@Base+0x2dfc>
   1de20:	and	r6, r1, r2
   1de24:	mov	r1, r6
   1de28:	add	r5, pc, r5
   1de2c:	bl	11f54 <realloc@plt>
   1de30:	strd	r6, [r9]
   1de34:	str	r0, [r5]
   1de38:	ldr	r1, [sl, #4]
   1de3c:	ldr	r2, [pc, #148]	; 1ded8 <__generate_code_for_binary_boolean_expression@@Base+0x2e00>
   1de40:	ldr	r2, [pc, r2]
   1de44:	b	1d760 <__generate_code_for_binary_boolean_expression@@Base+0x2688>
   1de48:	ldrdeq	r4, [r1], -r0
   1de4c:	ldrdeq	r4, [r1], -r0
   1de50:	andeq	r4, r1, r4, asr #31
   1de54:	andeq	r4, r1, r8, lsr #31
   1de58:	ldrdeq	r4, [r1], -ip
   1de5c:	andeq	r2, r0, r3, lsl #7
   1de60:			; <UNDEFINED> instruction: 0x000134b8
   1de64:	muleq	r1, r0, r5
   1de68:	andeq	r1, r0, ip, ror #21
   1de6c:	ldrdeq	r4, [r1], -ip
   1de70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1de74:	andeq	r4, r1, ip, lsl #31
   1de78:	andeq	r4, r1, r0, lsl #29
   1de7c:	andeq	r4, r1, r0, asr #30
   1de80:	andeq	r4, r1, ip, lsr pc
   1de84:	andeq	r4, r1, ip, lsl pc
   1de88:	andeq	r4, r1, r8, asr lr
   1de8c:	andeq	r4, r1, r8, lsl lr
   1de90:	strdeq	r4, [r1], -ip
   1de94:	andeq	r4, r1, r8, lsl #27
   1de98:	andeq	r4, r1, r8, asr #26
   1de9c:	andeq	r4, r1, ip, lsr #26
   1dea0:	andeq	r4, r1, ip, ror #16
   1dea4:	andeq	r4, r1, ip, lsr #16
   1dea8:	andeq	r4, r1, ip, lsl #16
   1deac:	ldrdeq	r4, [r1], -ip
   1deb0:	muleq	r1, ip, r6
   1deb4:	andeq	r4, r1, ip, lsl #13
   1deb8:	andeq	r4, r1, r4, lsr #22
   1debc:	ldrdeq	r4, [r1], -ip
   1dec0:	ldrdeq	r4, [r1], -r0
   1dec4:	andeq	r4, r1, r8, asr r9
   1dec8:	andeq	r4, r1, r0, asr r4
   1decc:	andeq	r4, r1, r4, lsr r4
   1ded0:	andeq	r4, r1, r4, asr #7
   1ded4:	andeq	r4, r1, r4, lsl #7
   1ded8:	andeq	r4, r1, r8, ror r3
   1dedc:	andeq	r4, r1, ip, lsl #20
   1dee0:	andeq	r4, r1, r0, lsl #20
   1dee4:	andeq	r4, r1, r0, asr #19
   1dee8:			; <UNDEFINED> instruction: 0x000149b4
   1deec:	andeq	r4, r1, ip, lsr #19
   1def0:	muleq	r1, r0, r9
   1def4:	andeq	r4, r1, ip, lsl #23
   1def8:	andeq	r4, r1, r8, lsl #23
   1defc:	andeq	r4, r1, ip, ror #22
   1df00:	andeq	r4, r1, r0, lsr r9
   1df04:	strdeq	r4, [r1], -r0
   1df08:	ldrdeq	r4, [r1], -r8
   1df0c:	andeq	r4, r1, r4, lsr #15
   1df10:	andeq	r4, r1, r4, ror #14
   1df14:	andeq	r4, r1, r8, asr #14
   1df18:	andeq	r4, r1, r8, asr #12
   1df1c:	andeq	r4, r1, r8, lsl #12
   1df20:	andeq	r4, r1, ip, ror #11
   1df24:	andeq	r4, r1, ip, asr r5
   1df28:	andeq	r4, r1, ip, lsl r5
   1df2c:	andeq	r4, r1, r0, lsl #10
   1df30:	muleq	r1, r0, r4
   1df34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df38:	add	fp, sp, #28
   1df3c:	sub	sp, sp, #4
   1df40:	ldr	r0, [pc, #496]	; 1e138 <__generate_code_for_binary_boolean_expression@@Base+0x3060>
   1df44:	ldr	r0, [pc, r0]
   1df48:	cmp	r0, #0
   1df4c:	beq	1e0e0 <__generate_code_for_binary_boolean_expression@@Base+0x3008>
   1df50:	ldr	sl, [pc, #484]	; 1e13c <__generate_code_for_binary_boolean_expression@@Base+0x3064>
   1df54:	mov	r5, #0
   1df58:	mov	r1, #0
   1df5c:	add	sl, pc, sl
   1df60:	ldrb	r0, [sl]
   1df64:	ldr	r8, [pc, #468]	; 1e140 <__generate_code_for_binary_boolean_expression@@Base+0x3068>
   1df68:	ldr	r4, [pc, #468]	; 1e144 <__generate_code_for_binary_boolean_expression@@Base+0x306c>
   1df6c:	cmp	r0, #1
   1df70:	add	r8, pc, r8
   1df74:	add	r4, pc, r4
   1df78:	bne	1dff4 <__generate_code_for_binary_boolean_expression@@Base+0x2f1c>
   1df7c:	ldr	r9, [pc, #452]	; 1e148 <__generate_code_for_binary_boolean_expression@@Base+0x3070>
   1df80:	ldr	r0, [r8, #4]
   1df84:	ldr	r2, [pc, #448]	; 1e14c <__generate_code_for_binary_boolean_expression@@Base+0x3074>
   1df88:	add	r9, pc, r9
   1df8c:	mov	ip, r4
   1df90:	mov	r1, #1
   1df94:	ldr	r2, [pc, r2]
   1df98:	ldr	r7, [r9, #4]
   1df9c:	ldr	r4, [pc, #428]	; 1e150 <__generate_code_for_binary_boolean_expression@@Base+0x3078>
   1dfa0:	adds	r3, r2, #8
   1dfa4:	adc	r6, r0, #0
   1dfa8:	ldr	r4, [pc, r4]
   1dfac:	subs	r3, r4, r3
   1dfb0:	mov	r4, ip
   1dfb4:	sbcs	r3, r7, r6
   1dfb8:	bcs	1dff4 <__generate_code_for_binary_boolean_expression@@Base+0x2f1c>
   1dfbc:	mov	r1, #7
   1dfc0:	orr	r1, r1, #131072	; 0x20000
   1dfc4:	adds	r1, r2, r1
   1dfc8:	adc	r7, r0, #0
   1dfcc:	mov	r0, #16646144	; 0xfe0000
   1dfd0:	orr	r0, r0, #-16777216	; 0xff000000
   1dfd4:	and	r6, r1, r0
   1dfd8:	ldr	r0, [pc, #372]	; 1e154 <__generate_code_for_binary_boolean_expression@@Base+0x307c>
   1dfdc:	mov	r1, r6
   1dfe0:	ldr	r0, [pc, r0]
   1dfe4:	bl	11f54 <realloc@plt>
   1dfe8:	ldrb	r1, [sl]
   1dfec:	strd	r6, [r9]
   1dff0:	str	r0, [r4]
   1dff4:	ldr	r2, [pc, #348]	; 1e158 <__generate_code_for_binary_boolean_expression@@Base+0x3080>
   1dff8:	ldr	r2, [pc, r2]
   1dffc:	ldr	r0, [pc, #344]	; 1e15c <__generate_code_for_binary_boolean_expression@@Base+0x3084>
   1e000:	ldr	r0, [pc, r0]
   1e004:	ldr	r3, [r8, #4]
   1e008:	mov	r7, r0
   1e00c:	strb	r5, [r7, r2]!
   1e010:	adds	r2, r2, #8
   1e014:	adc	r3, r3, #0
   1e018:	strb	r5, [r7, #5]
   1e01c:	strb	r5, [r7, #3]
   1e020:	strb	r5, [r7, #2]
   1e024:	strb	r5, [r7, #1]
   1e028:	strb	r5, [r7, #4]!
   1e02c:	cmp	r1, #0
   1e030:	strb	r5, [r7, #3]
   1e034:	strb	r5, [r7, #2]
   1e038:	strd	r2, [r8]
   1e03c:	beq	1e064 <__generate_code_for_binary_boolean_expression@@Base+0x2f8c>
   1e040:	ldr	r3, [pc, #280]	; 1e160 <__generate_code_for_binary_boolean_expression@@Base+0x3088>
   1e044:	mov	r1, r2
   1e048:	mov	r2, #1
   1e04c:	ldr	r3, [pc, r3]
   1e050:	bl	11f60 <fwrite@plt>
   1e054:	ldr	r0, [pc, #264]	; 1e164 <__generate_code_for_binary_boolean_expression@@Base+0x308c>
   1e058:	ldr	r0, [pc, r0]
   1e05c:	bl	11f0c <free@plt>
   1e060:	b	1e0a8 <__generate_code_for_binary_boolean_expression@@Base+0x2fd0>
   1e064:	ldr	r1, [pc, #252]	; 1e168 <__generate_code_for_binary_boolean_expression@@Base+0x3090>
   1e068:	mov	r2, #4
   1e06c:	ldr	r1, [pc, r1]
   1e070:	bl	12098 <msync@plt>
   1e074:	cmn	r0, #1
   1e078:	beq	1e0f4 <__generate_code_for_binary_boolean_expression@@Base+0x301c>
   1e07c:	ldr	r1, [pc, #244]	; 1e178 <__generate_code_for_binary_boolean_expression@@Base+0x30a0>
   1e080:	ldr	r1, [pc, r1]
   1e084:	ldr	r0, [pc, #240]	; 1e17c <__generate_code_for_binary_boolean_expression@@Base+0x30a4>
   1e088:	ldr	r0, [pc, r0]
   1e08c:	bl	12074 <munmap@plt>
   1e090:	ldr	r0, [pc, #232]	; 1e180 <__generate_code_for_binary_boolean_expression@@Base+0x30a8>
   1e094:	mov	r1, #0
   1e098:	str	r1, [r4]
   1e09c:	add	r0, pc, r0
   1e0a0:	str	r1, [r0]
   1e0a4:	str	r1, [r0, #4]
   1e0a8:	ldr	r0, [pc, #212]	; 1e184 <__generate_code_for_binary_boolean_expression@@Base+0x30ac>
   1e0ac:	ldr	r0, [pc, r0]
   1e0b0:	bl	11f00 <fflush@plt>
   1e0b4:	ldr	r0, [pc, #204]	; 1e188 <__generate_code_for_binary_boolean_expression@@Base+0x30b0>
   1e0b8:	ldr	r0, [pc, r0]
   1e0bc:	bl	1e634 <__gcov_flush@@Base+0x304>
   1e0c0:	ldr	r0, [pc, #196]	; 1e18c <__generate_code_for_binary_boolean_expression@@Base+0x30b4>
   1e0c4:	ldr	r0, [pc, r0]
   1e0c8:	bl	1205c <fclose@plt>
   1e0cc:	ldr	r0, [pc, #188]	; 1e190 <__generate_code_for_binary_boolean_expression@@Base+0x30b8>
   1e0d0:	mov	r1, #0
   1e0d4:	str	r1, [r4]
   1e0d8:	add	r0, pc, r0
   1e0dc:	str	r1, [r0]
   1e0e0:	ldr	r0, [pc, #172]	; 1e194 <__generate_code_for_binary_boolean_expression@@Base+0x30bc>
   1e0e4:	ldr	r0, [pc, r0]
   1e0e8:	sub	sp, fp, #28
   1e0ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0f0:	b	11f0c <free@plt>
   1e0f4:	bl	12008 <__errno_location@plt>
   1e0f8:	ldr	r1, [pc, #108]	; 1e16c <__generate_code_for_binary_boolean_expression@@Base+0x3094>
   1e0fc:	mov	r6, r4
   1e100:	ldr	r1, [pc, r1]
   1e104:	ldr	r0, [r0]
   1e108:	ldr	r4, [r1]
   1e10c:	ldr	r5, [pc, #92]	; 1e170 <__generate_code_for_binary_boolean_expression@@Base+0x3098>
   1e110:	ldr	r5, [pc, r5]
   1e114:	bl	11fa8 <strerror@plt>
   1e118:	ldr	r1, [pc, #84]	; 1e174 <__generate_code_for_binary_boolean_expression@@Base+0x309c>
   1e11c:	mov	r3, r0
   1e120:	mov	r0, r4
   1e124:	add	r1, pc, r1
   1e128:	mov	r2, r5
   1e12c:	mov	r4, r6
   1e130:	bl	11ffc <fprintf@plt>
   1e134:	b	1e07c <__generate_code_for_binary_boolean_expression@@Base+0x2fa4>
   1e138:	andeq	r4, r1, r4, ror #4
   1e13c:	andeq	r4, r1, r8, asr #4
   1e140:	andeq	r4, r1, r8, asr #4
   1e144:	andeq	r4, r1, r8, lsr r2
   1e148:	andeq	r4, r1, r8, lsr #4
   1e14c:	andeq	r4, r1, r4, lsr #4
   1e150:	andeq	r4, r1, r8, lsl #4
   1e154:	andeq	r4, r1, ip, asr #3
   1e158:	andeq	r4, r1, r0, asr #3
   1e15c:	andeq	r4, r1, ip, lsr #3
   1e160:	andeq	r4, r1, ip, asr r1
   1e164:	andeq	r4, r1, r4, asr r1
   1e168:	andeq	r4, r1, r4, ror #2
   1e16c:			; <UNDEFINED> instruction: 0x00012fbc
   1e170:	muleq	r1, r0, r0
   1e174:	andeq	r1, r0, r2, lsr r6
   1e178:	andeq	r4, r1, r0, asr r1
   1e17c:	andeq	r4, r1, r4, lsr #2
   1e180:	andeq	r4, r1, r4, lsr r1
   1e184:	strdeq	r4, [r1], -ip
   1e188:	andeq	r3, r1, r8, lsl r0
   1e18c:	andeq	r4, r1, r4, ror #1
   1e190:	ldrdeq	r4, [r1], -r0
   1e194:	strheq	r4, [r1], -ip
   1e198:	push	{r4, sl, fp, lr}
   1e19c:	add	fp, sp, #8
   1e1a0:	mov	r4, r0
   1e1a4:	mov	r0, #12
   1e1a8:	bl	11f90 <malloc@plt>
   1e1ac:	ldr	r1, [pc, #60]	; 1e1f0 <__generate_code_for_binary_boolean_expression@@Base+0x3118>
   1e1b0:	mov	r2, #0
   1e1b4:	add	r1, pc, r1
   1e1b8:	stm	r0, {r1, r4}
   1e1bc:	str	r2, [r0, #8]
   1e1c0:	ldr	r1, [pc, #44]	; 1e1f4 <__generate_code_for_binary_boolean_expression@@Base+0x311c>
   1e1c4:	ldr	r1, [pc, r1]
   1e1c8:	mov	r2, r1
   1e1cc:	ldr	r3, [r2], #4
   1e1d0:	ldr	r4, [r2]
   1e1d4:	cmp	r3, #0
   1e1d8:	mov	r3, r2
   1e1dc:	addne	r3, r4, #8
   1e1e0:	moveq	r2, r1
   1e1e4:	str	r0, [r3]
   1e1e8:	str	r0, [r2]
   1e1ec:	pop	{r4, sl, fp, pc}
   1e1f0:	andeq	r4, r1, r0, lsl r0
   1e1f4:	strdeq	r2, [r1], -r0
   1e1f8:	push	{r4, r5, fp, lr}
   1e1fc:	add	fp, sp, #8
   1e200:	ldr	r0, [pc, #64]	; 1e248 <__generate_code_for_binary_boolean_expression@@Base+0x3170>
   1e204:	ldr	r0, [pc, r0]
   1e208:	ldr	r4, [r0]
   1e20c:	cmp	r4, #0
   1e210:	beq	1e244 <__generate_code_for_binary_boolean_expression@@Base+0x316c>
   1e214:	ldr	r5, [pc, #48]	; 1e24c <__generate_code_for_binary_boolean_expression@@Base+0x3174>
   1e218:	add	r5, pc, r5
   1e21c:	b	1e22c <__generate_code_for_binary_boolean_expression@@Base+0x3154>
   1e220:	ldr	r4, [r4, #8]
   1e224:	cmp	r4, #0
   1e228:	beq	1e244 <__generate_code_for_binary_boolean_expression@@Base+0x316c>
   1e22c:	ldr	r0, [r4]
   1e230:	cmp	r0, r5
   1e234:	bne	1e220 <__generate_code_for_binary_boolean_expression@@Base+0x3148>
   1e238:	ldr	r0, [r4, #4]
   1e23c:	blx	r0
   1e240:	b	1e220 <__generate_code_for_binary_boolean_expression@@Base+0x3148>
   1e244:	pop	{r4, r5, fp, pc}
   1e248:			; <UNDEFINED> instruction: 0x00012eb0
   1e24c:	andeq	r3, r1, ip, lsr #31
   1e250:	push	{r4, r5, r6, r7, fp, lr}
   1e254:	add	fp, sp, #16
   1e258:	ldr	r4, [pc, #104]	; 1e2c8 <__generate_code_for_binary_boolean_expression@@Base+0x31f0>
   1e25c:	ldr	r4, [pc, r4]
   1e260:	ldr	r0, [r4]
   1e264:	cmp	r0, #0
   1e268:	beq	1e2c4 <__generate_code_for_binary_boolean_expression@@Base+0x31ec>
   1e26c:	ldr	r5, [pc, #88]	; 1e2cc <__generate_code_for_binary_boolean_expression@@Base+0x31f4>
   1e270:	mov	r6, #0
   1e274:	add	r5, pc, r5
   1e278:	b	1e2ac <__generate_code_for_binary_boolean_expression@@Base+0x31d4>
   1e27c:	ldr	r1, [r4]
   1e280:	cmp	r0, r1
   1e284:	streq	r7, [r4]
   1e288:	ldr	r1, [r4, #4]
   1e28c:	cmp	r0, r1
   1e290:	streq	r6, [r4, #4]
   1e294:	cmp	r6, #0
   1e298:	strne	r7, [r6, #8]
   1e29c:	bl	11f0c <free@plt>
   1e2a0:	mov	r0, r7
   1e2a4:	cmp	r7, #0
   1e2a8:	beq	1e2c4 <__generate_code_for_binary_boolean_expression@@Base+0x31ec>
   1e2ac:	ldr	r1, [r0]
   1e2b0:	ldr	r7, [r0, #8]
   1e2b4:	cmp	r1, r5
   1e2b8:	beq	1e27c <__generate_code_for_binary_boolean_expression@@Base+0x31a4>
   1e2bc:	mov	r6, r0
   1e2c0:	b	1e2a0 <__generate_code_for_binary_boolean_expression@@Base+0x31c8>
   1e2c4:	pop	{r4, r5, r6, r7, fp, pc}
   1e2c8:	andeq	r2, r1, r8, asr lr
   1e2cc:	andeq	r3, r1, r0, asr pc
   1e2d0:	push	{r4, sl, fp, lr}
   1e2d4:	add	fp, sp, #8
   1e2d8:	mov	r4, r0
   1e2dc:	mov	r0, #12
   1e2e0:	bl	11f90 <malloc@plt>
   1e2e4:	ldr	r1, [pc, #60]	; 1e328 <__generate_code_for_binary_boolean_expression@@Base+0x3250>
   1e2e8:	mov	r2, #0
   1e2ec:	add	r1, pc, r1
   1e2f0:	stm	r0, {r1, r4}
   1e2f4:	str	r2, [r0, #8]
   1e2f8:	ldr	r1, [pc, #44]	; 1e32c <__generate_code_for_binary_boolean_expression@@Base+0x3254>
   1e2fc:	ldr	r1, [pc, r1]
   1e300:	mov	r2, r1
   1e304:	ldr	r3, [r2], #4
   1e308:	ldr	r4, [r2]
   1e30c:	cmp	r3, #0
   1e310:	mov	r3, r2
   1e314:	addne	r3, r4, #8
   1e318:	moveq	r2, r1
   1e31c:	str	r0, [r3]
   1e320:	str	r0, [r2]
   1e324:	pop	{r4, sl, fp, pc}
   1e328:	ldrdeq	r3, [r1], -r8
   1e32c:			; <UNDEFINED> instruction: 0x00012db4

0001e330 <__gcov_flush@@Base>:
   1e330:	push	{r4, sl, fp, lr}
   1e334:	add	fp, sp, #8
   1e338:	ldr	r0, [pc, #36]	; 1e364 <__gcov_flush@@Base+0x34>
   1e33c:	ldr	r0, [pc, r0]
   1e340:	ldr	r4, [r0]
   1e344:	cmp	r4, #0
   1e348:	beq	1e360 <__gcov_flush@@Base+0x30>
   1e34c:	ldr	r0, [r4, #4]
   1e350:	blx	r0
   1e354:	ldr	r4, [r4, #8]
   1e358:	cmp	r4, #0
   1e35c:	bne	1e34c <__gcov_flush@@Base+0x1c>
   1e360:	pop	{r4, sl, fp, pc}
   1e364:	andeq	r2, r1, r4, ror sp
   1e368:	push	{r4, r5, r6, r7, fp, lr}
   1e36c:	add	fp, sp, #16
   1e370:	ldr	r4, [pc, #104]	; 1e3e0 <__gcov_flush@@Base+0xb0>
   1e374:	ldr	r4, [pc, r4]
   1e378:	ldr	r0, [r4]
   1e37c:	cmp	r0, #0
   1e380:	beq	1e3dc <__gcov_flush@@Base+0xac>
   1e384:	ldr	r5, [pc, #88]	; 1e3e4 <__gcov_flush@@Base+0xb4>
   1e388:	mov	r6, #0
   1e38c:	add	r5, pc, r5
   1e390:	b	1e3c4 <__gcov_flush@@Base+0x94>
   1e394:	ldr	r1, [r4]
   1e398:	cmp	r0, r1
   1e39c:	streq	r7, [r4]
   1e3a0:	ldr	r1, [r4, #4]
   1e3a4:	cmp	r0, r1
   1e3a8:	streq	r6, [r4, #4]
   1e3ac:	cmp	r6, #0
   1e3b0:	strne	r7, [r6, #8]
   1e3b4:	bl	11f0c <free@plt>
   1e3b8:	mov	r0, r7
   1e3bc:	cmp	r7, #0
   1e3c0:	beq	1e3dc <__gcov_flush@@Base+0xac>
   1e3c4:	ldr	r1, [r0]
   1e3c8:	ldr	r7, [r0, #8]
   1e3cc:	cmp	r1, r5
   1e3d0:	beq	1e394 <__gcov_flush@@Base+0x64>
   1e3d4:	mov	r6, r0
   1e3d8:	b	1e3b8 <__gcov_flush@@Base+0x88>
   1e3dc:	pop	{r4, r5, r6, r7, fp, pc}
   1e3e0:	andeq	r2, r1, ip, lsr sp
   1e3e4:	andeq	r3, r1, r8, lsr lr
   1e3e8:	push	{r4, r5, r6, sl, fp, lr}
   1e3ec:	add	fp, sp, #16
   1e3f0:	ldr	r6, [pc, #228]	; 1e4dc <__gcov_flush@@Base+0x1ac>
   1e3f4:	mov	r4, r1
   1e3f8:	cmp	r0, #0
   1e3fc:	add	r6, pc, r6
   1e400:	beq	1e44c <__gcov_flush@@Base+0x11c>
   1e404:	mov	r5, r0
   1e408:	mov	r0, #12
   1e40c:	bl	11f90 <malloc@plt>
   1e410:	mov	r1, #0
   1e414:	str	r6, [r0]
   1e418:	str	r5, [r0, #4]
   1e41c:	str	r1, [r0, #8]
   1e420:	ldr	r1, [pc, #184]	; 1e4e0 <__gcov_flush@@Base+0x1b0>
   1e424:	ldr	r1, [pc, r1]
   1e428:	mov	r2, r1
   1e42c:	ldr	r3, [r2], #4
   1e430:	ldr	r5, [r2]
   1e434:	cmp	r3, #0
   1e438:	mov	r3, r2
   1e43c:	addne	r3, r5, #8
   1e440:	moveq	r2, r1
   1e444:	str	r0, [r3]
   1e448:	str	r0, [r2]
   1e44c:	cmp	r4, #0
   1e450:	beq	1e498 <__gcov_flush@@Base+0x168>
   1e454:	mov	r0, #12
   1e458:	bl	11f90 <malloc@plt>
   1e45c:	mov	r1, #0
   1e460:	str	r6, [r0]
   1e464:	str	r4, [r0, #4]
   1e468:	str	r1, [r0, #8]
   1e46c:	ldr	r1, [pc, #112]	; 1e4e4 <__gcov_flush@@Base+0x1b4>
   1e470:	ldr	r1, [pc, r1]
   1e474:	mov	r2, r1
   1e478:	ldr	r3, [r2], #4
   1e47c:	ldr	r6, [r2]
   1e480:	cmp	r3, #0
   1e484:	mov	r3, r2
   1e488:	addne	r3, r6, #8
   1e48c:	moveq	r2, r1
   1e490:	str	r0, [r3]
   1e494:	str	r0, [r2]
   1e498:	ldr	r1, [pc, #72]	; 1e4e8 <__gcov_flush@@Base+0x1b8>
   1e49c:	add	r1, pc, r1
   1e4a0:	ldrb	r0, [r1]
   1e4a4:	cmp	r0, #0
   1e4a8:	popne	{r4, r5, r6, sl, fp, pc}
   1e4ac:	ldr	r0, [pc, #56]	; 1e4ec <__gcov_flush@@Base+0x1bc>
   1e4b0:	mov	r2, #1
   1e4b4:	strb	r2, [r1]
   1e4b8:	add	r0, pc, r0
   1e4bc:	bl	1ea88 <__libc_csu_fini@@Base+0x4>
   1e4c0:	ldr	r0, [pc, #40]	; 1e4f0 <__gcov_flush@@Base+0x1c0>
   1e4c4:	add	r0, pc, r0
   1e4c8:	bl	1ea88 <__libc_csu_fini@@Base+0x4>
   1e4cc:	ldr	r0, [pc, #32]	; 1e4f4 <__gcov_flush@@Base+0x1c4>
   1e4d0:	add	r0, pc, r0
   1e4d4:	pop	{r4, r5, r6, sl, fp, lr}
   1e4d8:	b	1ea88 <__libc_csu_fini@@Base+0x4>
   1e4dc:	andeq	r3, r1, r8, asr #27
   1e4e0:	muleq	r1, r0, ip
   1e4e4:	andeq	r2, r1, r0, asr #24
   1e4e8:	andeq	r3, r1, ip, lsr #26
   1e4ec:			; <UNDEFINED> instruction: 0xfffffea8
   1e4f0:			; <UNDEFINED> instruction: 0xfffffd84
   1e4f4:			; <UNDEFINED> instruction: 0xfffffd20
   1e4f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e4fc:	add	fp, sp, #24
   1e500:	ldr	r7, [pc, #68]	; 1e54c <__gcov_flush@@Base+0x21c>
   1e504:	mov	r4, r0
   1e508:	mov	r5, #1
   1e50c:	mov	r8, #0
   1e510:	ldr	r7, [pc, r7]
   1e514:	mov	r6, #47	; 0x2f
   1e518:	b	1e534 <__gcov_flush@@Base+0x204>
   1e51c:	strb	r8, [r4, r5]
   1e520:	ldr	r1, [r7]
   1e524:	mov	r0, r4
   1e528:	bl	12020 <mkdir@plt>
   1e52c:	strb	r6, [r4, r5]
   1e530:	add	r5, r5, #1
   1e534:	ldrb	r0, [r4, r5]
   1e538:	cmp	r0, #47	; 0x2f
   1e53c:	beq	1e51c <__gcov_flush@@Base+0x1ec>
   1e540:	cmp	r0, #0
   1e544:	bne	1e530 <__gcov_flush@@Base+0x200>
   1e548:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e54c:	muleq	r1, ip, fp
   1e550:	ldr	r0, [pc, #8]	; 1e560 <__gcov_flush@@Base+0x230>
   1e554:	ldr	r0, [pc, r0]
   1e558:	ldr	r0, [r0]
   1e55c:	bx	lr
   1e560:	andeq	r2, r1, r8, asr fp
   1e564:	ldr	r1, [pc, #8]	; 1e574 <__gcov_flush@@Base+0x244>
   1e568:	ldr	r1, [pc, r1]
   1e56c:	str	r0, [r1]
   1e570:	bx	lr
   1e574:	andeq	r2, r1, r4, asr #22
   1e578:	push	{r4, r5, r6, sl, fp, lr}
   1e57c:	add	fp, sp, #16
   1e580:	sub	sp, sp, #392	; 0x188
   1e584:	mov	r6, sp
   1e588:	mov	r5, r0
   1e58c:	mov	r0, r6
   1e590:	mov	r4, r1
   1e594:	bl	11f3c <uname@plt>
   1e598:	cmp	r0, #0
   1e59c:	bmi	1e5b4 <__gcov_flush@@Base+0x284>
   1e5a0:	add	r1, r6, #65	; 0x41
   1e5a4:	mov	r0, r5
   1e5a8:	mov	r2, r4
   1e5ac:	bl	12038 <strncpy@plt>
   1e5b0:	mov	r0, #0
   1e5b4:	sub	sp, fp, #16
   1e5b8:	pop	{r4, r5, r6, sl, fp, pc}
   1e5bc:	push	{r4, r5, r6, sl, fp, lr}
   1e5c0:	add	fp, sp, #16
   1e5c4:	sub	sp, sp, #32
   1e5c8:	mov	r4, #0
   1e5cc:	str	r4, [sp, #8]
   1e5d0:	strh	r4, [sp, #2]
   1e5d4:	mov	r5, r0
   1e5d8:	str	r4, [sp, #12]
   1e5dc:	str	r4, [sp, #16]
   1e5e0:	str	r4, [sp, #20]
   1e5e4:	bl	11fc0 <getpid@plt>
   1e5e8:	mov	r6, sp
   1e5ec:	str	r0, [sp, #24]
   1e5f0:	mov	r0, #1
   1e5f4:	strh	r0, [sp]
   1e5f8:	mov	r0, r5
   1e5fc:	mov	r1, #14
   1e600:	mov	r2, r6
   1e604:	bl	12080 <fcntl64@plt>
   1e608:	cmn	r0, #1
   1e60c:	bne	1e628 <__gcov_flush@@Base+0x2f8>
   1e610:	bl	12008 <__errno_location@plt>
   1e614:	ldr	r0, [r0]
   1e618:	cmp	r0, #4
   1e61c:	beq	1e5f8 <__gcov_flush@@Base+0x2c8>
   1e620:	cmp	r0, #37	; 0x25
   1e624:	mvneq	r4, #0
   1e628:	mov	r0, r4
   1e62c:	sub	sp, fp, #16
   1e630:	pop	{r4, r5, r6, sl, fp, pc}
   1e634:	push	{r4, r5, r6, sl, fp, lr}
   1e638:	add	fp, sp, #16
   1e63c:	sub	sp, sp, #32
   1e640:	mov	r4, #0
   1e644:	str	r4, [sp, #8]
   1e648:	strh	r4, [sp, #2]
   1e64c:	mov	r5, r0
   1e650:	str	r4, [sp, #12]
   1e654:	str	r4, [sp, #16]
   1e658:	str	r4, [sp, #20]
   1e65c:	bl	11fc0 <getpid@plt>
   1e660:	mov	r6, sp
   1e664:	str	r0, [sp, #24]
   1e668:	mov	r0, #2
   1e66c:	strh	r0, [sp]
   1e670:	mov	r0, r5
   1e674:	mov	r1, #14
   1e678:	mov	r2, r6
   1e67c:	bl	12080 <fcntl64@plt>
   1e680:	cmn	r0, #1
   1e684:	bne	1e6a0 <__gcov_flush@@Base+0x370>
   1e688:	bl	12008 <__errno_location@plt>
   1e68c:	ldr	r0, [r0]
   1e690:	cmp	r0, #4
   1e694:	beq	1e670 <__gcov_flush@@Base+0x340>
   1e698:	cmp	r0, #37	; 0x25
   1e69c:	mvneq	r4, #0
   1e6a0:	mov	r0, r4
   1e6a4:	sub	sp, fp, #16
   1e6a8:	pop	{r4, r5, r6, sl, fp, pc}
   1e6ac:	push	{r4, r5, r6, sl, fp, lr}
   1e6b0:	add	fp, sp, #16
   1e6b4:	sub	sp, sp, #32
   1e6b8:	bl	12050 <fileno@plt>
   1e6bc:	mov	r4, #0
   1e6c0:	str	r4, [sp, #8]
   1e6c4:	strh	r4, [sp, #2]
   1e6c8:	mov	r5, r0
   1e6cc:	str	r4, [sp, #12]
   1e6d0:	str	r4, [sp, #16]
   1e6d4:	str	r4, [sp, #20]
   1e6d8:	bl	11fc0 <getpid@plt>
   1e6dc:	mov	r6, sp
   1e6e0:	str	r0, [sp, #24]
   1e6e4:	mov	r0, #1
   1e6e8:	strh	r0, [sp]
   1e6ec:	mov	r0, r5
   1e6f0:	mov	r1, #14
   1e6f4:	mov	r2, r6
   1e6f8:	bl	12080 <fcntl64@plt>
   1e6fc:	cmn	r0, #1
   1e700:	bne	1e71c <__gcov_flush@@Base+0x3ec>
   1e704:	bl	12008 <__errno_location@plt>
   1e708:	ldr	r0, [r0]
   1e70c:	cmp	r0, #4
   1e710:	beq	1e6ec <__gcov_flush@@Base+0x3bc>
   1e714:	cmp	r0, #37	; 0x25
   1e718:	mvneq	r4, #0
   1e71c:	mov	r0, r4
   1e720:	sub	sp, fp, #16
   1e724:	pop	{r4, r5, r6, sl, fp, pc}
   1e728:	push	{r4, r5, r6, sl, fp, lr}
   1e72c:	add	fp, sp, #16
   1e730:	sub	sp, sp, #32
   1e734:	bl	12050 <fileno@plt>
   1e738:	mov	r4, #0
   1e73c:	str	r4, [sp, #8]
   1e740:	strh	r4, [sp, #2]
   1e744:	mov	r5, r0
   1e748:	str	r4, [sp, #12]
   1e74c:	str	r4, [sp, #16]
   1e750:	str	r4, [sp, #20]
   1e754:	bl	11fc0 <getpid@plt>
   1e758:	mov	r6, sp
   1e75c:	str	r0, [sp, #24]
   1e760:	mov	r0, #2
   1e764:	strh	r0, [sp]
   1e768:	mov	r0, r5
   1e76c:	mov	r1, #14
   1e770:	mov	r2, r6
   1e774:	bl	12080 <fcntl64@plt>
   1e778:	cmn	r0, #1
   1e77c:	bne	1e798 <__gcov_flush@@Base+0x468>
   1e780:	bl	12008 <__errno_location@plt>
   1e784:	ldr	r0, [r0]
   1e788:	cmp	r0, #4
   1e78c:	beq	1e768 <__gcov_flush@@Base+0x438>
   1e790:	cmp	r0, #37	; 0x25
   1e794:	mvneq	r4, #0
   1e798:	mov	r0, r4
   1e79c:	sub	sp, fp, #16
   1e7a0:	pop	{r4, r5, r6, sl, fp, pc}
   1e7a4:	push	{r4, r5, fp, lr}
   1e7a8:	add	fp, sp, #8
   1e7ac:	sub	sp, sp, #32
   1e7b0:	mov	r2, #182	; 0xb6
   1e7b4:	orr	r2, r2, #256	; 0x100
   1e7b8:	mov	r1, #66	; 0x42
   1e7bc:	bl	11f78 <open64@plt>
   1e7c0:	cmp	r0, #0
   1e7c4:	bmi	1e840 <__gcov_flush@@Base+0x510>
   1e7c8:	mov	r4, r0
   1e7cc:	mov	r0, #0
   1e7d0:	str	r0, [sp, #8]
   1e7d4:	strh	r0, [sp, #2]
   1e7d8:	str	r0, [sp, #12]
   1e7dc:	str	r0, [sp, #16]
   1e7e0:	str	r0, [sp, #20]
   1e7e4:	bl	11fc0 <getpid@plt>
   1e7e8:	mov	r5, sp
   1e7ec:	str	r0, [sp, #24]
   1e7f0:	mov	r0, #1
   1e7f4:	strh	r0, [sp]
   1e7f8:	mov	r0, r4
   1e7fc:	mov	r1, #14
   1e800:	mov	r2, r5
   1e804:	bl	12080 <fcntl64@plt>
   1e808:	cmn	r0, #1
   1e80c:	bne	1e828 <__gcov_flush@@Base+0x4f8>
   1e810:	bl	12008 <__errno_location@plt>
   1e814:	ldr	r0, [r0]
   1e818:	cmp	r0, #4
   1e81c:	beq	1e7f8 <__gcov_flush@@Base+0x4c8>
   1e820:	cmp	r0, #37	; 0x25
   1e824:	beq	1e84c <__gcov_flush@@Base+0x51c>
   1e828:	ldr	r1, [pc, #76]	; 1e87c <__gcov_flush@@Base+0x54c>
   1e82c:	mov	r0, r4
   1e830:	add	r1, pc, r1
   1e834:	bl	11edc <fdopen@plt>
   1e838:	sub	sp, fp, #8
   1e83c:	pop	{r4, r5, fp, pc}
   1e840:	mov	r0, #0
   1e844:	sub	sp, fp, #8
   1e848:	pop	{r4, r5, fp, pc}
   1e84c:	ldr	r1, [pc, #28]	; 1e870 <__gcov_flush@@Base+0x540>
   1e850:	ldr	r2, [pc, #28]	; 1e874 <__gcov_flush@@Base+0x544>
   1e854:	ldr	r0, [pc, #28]	; 1e878 <__gcov_flush@@Base+0x548>
   1e858:	add	r1, pc, r1
   1e85c:	add	r2, pc, r2
   1e860:	ldr	r0, [pc, r0]
   1e864:	ldr	r0, [r0]
   1e868:	bl	11ffc <fprintf@plt>
   1e86c:	b	1e828 <__gcov_flush@@Base+0x4f8>
   1e870:	andeq	r0, r0, pc, lsl pc
   1e874:	andeq	r0, r0, r4, ror #30
   1e878:	andeq	r2, r1, ip, asr r8
   1e87c:	andeq	r0, r0, r5, lsr #27
   1e880:	push	{r4, r5, r6, sl, fp, lr}
   1e884:	add	fp, sp, #16
   1e888:	mov	r6, r0
   1e88c:	ldr	r0, [pc, #120]	; 1e90c <__gcov_flush@@Base+0x5dc>
   1e890:	mov	r4, r1
   1e894:	add	r0, pc, r0
   1e898:	bl	11f84 <getenv@plt>
   1e89c:	mov	r5, r0
   1e8a0:	ldr	r0, [pc, #104]	; 1e910 <__gcov_flush@@Base+0x5e0>
   1e8a4:	add	r0, pc, r0
   1e8a8:	bl	11f84 <getenv@plt>
   1e8ac:	mov	r1, #0
   1e8b0:	str	r1, [r4]
   1e8b4:	str	r1, [r6]
   1e8b8:	cmp	r5, #0
   1e8bc:	ldrbne	r2, [r5]
   1e8c0:	cmpne	r2, #0
   1e8c4:	bne	1e8d0 <__gcov_flush@@Base+0x5a0>
   1e8c8:	mov	r0, r1
   1e8cc:	pop	{r4, r5, r6, sl, fp, pc}
   1e8d0:	cmp	r0, #0
   1e8d4:	beq	1e8ec <__gcov_flush@@Base+0x5bc>
   1e8d8:	mov	r1, #0
   1e8dc:	mov	r2, #10
   1e8e0:	bl	11ee8 <strtol@plt>
   1e8e4:	bic	r0, r0, r0, asr #31
   1e8e8:	b	1e8f0 <__gcov_flush@@Base+0x5c0>
   1e8ec:	mov	r0, #0
   1e8f0:	str	r0, [r6]
   1e8f4:	mov	r0, r5
   1e8f8:	bl	11fd8 <strlen@plt>
   1e8fc:	mov	r1, r5
   1e900:	str	r0, [r4]
   1e904:	mov	r0, r1
   1e908:	pop	{r4, r5, r6, sl, fp, pc}
   1e90c:	andeq	r0, r0, sl, asr pc
   1e910:	andeq	r0, r0, r6, asr pc
   1e914:	push	{r4, r5, r6, r7, fp, lr}
   1e918:	add	fp, sp, #16
   1e91c:	mov	r6, r0
   1e920:	ldr	r0, [fp, #8]
   1e924:	mov	r5, r3
   1e928:	mov	r7, r2
   1e92c:	mov	r4, r1
   1e930:	cmp	r0, #1
   1e934:	blt	1e96c <__gcov_flush@@Base+0x63c>
   1e938:	add	r1, r4, #1
   1e93c:	mov	r2, #0
   1e940:	b	1e958 <__gcov_flush@@Base+0x628>
   1e944:	add	r2, r2, #1
   1e948:	mov	r4, r1
   1e94c:	add	r1, r1, #1
   1e950:	cmp	r2, r0
   1e954:	bge	1e96c <__gcov_flush@@Base+0x63c>
   1e958:	ldrb	r3, [r1]
   1e95c:	cmp	r3, #47	; 0x2f
   1e960:	beq	1e944 <__gcov_flush@@Base+0x614>
   1e964:	cmp	r3, #0
   1e968:	bne	1e94c <__gcov_flush@@Base+0x61c>
   1e96c:	mov	r0, r6
   1e970:	mov	r1, r7
   1e974:	mov	r2, r5
   1e978:	bl	11f18 <memcpy@plt>
   1e97c:	add	r0, r5, r7
   1e980:	ldrb	r0, [r0, #-1]
   1e984:	cmp	r0, #47	; 0x2f
   1e988:	movne	r0, #47	; 0x2f
   1e98c:	strbne	r0, [r6, r5]
   1e990:	mov	r0, r4
   1e994:	addne	r5, r5, #1
   1e998:	add	r5, r6, r5
   1e99c:	bl	11fd8 <strlen@plt>
   1e9a0:	add	r2, r0, #1
   1e9a4:	mov	r0, r5
   1e9a8:	mov	r1, r4
   1e9ac:	pop	{r4, r5, r6, r7, fp, lr}
   1e9b0:	b	11f18 <memcpy@plt>
   1e9b4:	mov	r1, #47	; 0x2f
   1e9b8:	b	11fe4 <strchr@plt>
   1e9bc:	mov	r1, #47	; 0x2f
   1e9c0:	b	1208c <strrchr@plt>
   1e9c4:	push	{fp, lr}
   1e9c8:	mov	fp, sp
   1e9cc:	sub	sp, sp, #8
   1e9d0:	mov	r0, #0
   1e9d4:	str	r0, [sp, #4]
   1e9d8:	add	r1, sp, #4
   1e9dc:	mov	r0, #2
   1e9e0:	bl	12044 <prctl@plt>
   1e9e4:	ldr	r1, [sp, #4]
   1e9e8:	cmp	r0, #0
   1e9ec:	cmpeq	r1, #9
   1e9f0:	bne	1ea04 <__gcov_flush@@Base+0x6d4>
   1e9f4:	mov	r0, #1
   1e9f8:	mov	r1, #0
   1e9fc:	bl	12044 <prctl@plt>
   1ea00:	ldr	r1, [sp, #4]
   1ea04:	sub	r0, r1, #9
   1ea08:	clz	r0, r0
   1ea0c:	lsr	r0, r0, #5
   1ea10:	mov	sp, fp
   1ea14:	pop	{fp, pc}
   1ea18:	mov	r0, #1
   1ea1c:	mov	r1, #9
   1ea20:	b	12044 <prctl@plt>

0001ea24 <__libc_csu_init@@Base>:
   1ea24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ea28:	mov	r7, r0
   1ea2c:	ldr	r6, [pc, #72]	; 1ea7c <__libc_csu_init@@Base+0x58>
   1ea30:	ldr	r5, [pc, #72]	; 1ea80 <__libc_csu_init@@Base+0x5c>
   1ea34:	add	r6, pc, r6
   1ea38:	add	r5, pc, r5
   1ea3c:	sub	r6, r6, r5
   1ea40:	mov	r8, r1
   1ea44:	mov	r9, r2
   1ea48:	bl	11ebc <fdopen@plt-0x20>
   1ea4c:	asrs	r6, r6, #2
   1ea50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ea54:	mov	r4, #0
   1ea58:	add	r4, r4, #1
   1ea5c:	ldr	r3, [r5], #4
   1ea60:	mov	r2, r9
   1ea64:	mov	r1, r8
   1ea68:	mov	r0, r7
   1ea6c:	blx	r3
   1ea70:	cmp	r6, r4
   1ea74:	bne	1ea58 <__libc_csu_init@@Base+0x34>
   1ea78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ea7c:	andeq	r1, r1, r0, ror fp
   1ea80:	andeq	r1, r1, r0, asr fp

0001ea84 <__libc_csu_fini@@Base>:
   1ea84:	bx	lr
   1ea88:	ldr	r3, [pc, #12]	; 1ea9c <__libc_csu_fini@@Base+0x18>
   1ea8c:	mov	r1, #0
   1ea90:	add	r3, pc, r3
   1ea94:	ldr	r2, [r3]
   1ea98:	b	12014 <__cxa_atexit@plt>
   1ea9c:	andeq	r2, r1, ip, lsr r6

Disassembly of section .fini:

0001eaa0 <.fini>:
   1eaa0:	push	{r3, lr}
   1eaa4:	pop	{r3, pc}
