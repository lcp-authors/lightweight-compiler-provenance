
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010d78 <.init>:
   10d78:	push	{r3, lr}
   10d7c:	bl	11efc <__assert_fail@plt+0xeb8>
   10d80:	pop	{r3, pc}

Disassembly of section .plt:

00010d84 <fdopen@plt-0x14>:
   10d84:	push	{lr}		; (str lr, [sp, #-4]!)
   10d88:	ldr	lr, [pc, #4]	; 10d94 <fdopen@plt-0x4>
   10d8c:	add	lr, pc, lr
   10d90:	ldr	pc, [lr, #8]!
   10d94:	andeq	fp, r1, ip, ror #4

00010d98 <fdopen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #110592	; 0x1b000
   10da0:	ldr	pc, [ip, #620]!	; 0x26c

00010da4 <calloc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #110592	; 0x1b000
   10dac:	ldr	pc, [ip, #612]!	; 0x264

00010db0 <fputs_unlocked@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #110592	; 0x1b000
   10db8:	ldr	pc, [ip, #604]!	; 0x25c

00010dbc <strcmp@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #110592	; 0x1b000
   10dc4:	ldr	pc, [ip, #596]!	; 0x254

00010dc8 <posix_fadvise64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #110592	; 0x1b000
   10dd0:	ldr	pc, [ip, #588]!	; 0x24c

00010dd4 <fflush@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #110592	; 0x1b000
   10ddc:	ldr	pc, [ip, #580]!	; 0x244

00010de0 <free@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #110592	; 0x1b000
   10de8:	ldr	pc, [ip, #572]!	; 0x23c

00010dec <_exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #110592	; 0x1b000
   10df4:	ldr	pc, [ip, #564]!	; 0x234

00010df8 <memcpy@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #110592	; 0x1b000
   10e00:	ldr	pc, [ip, #556]!	; 0x22c

00010e04 <__strtoull_internal@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #110592	; 0x1b000
   10e0c:	ldr	pc, [ip, #548]!	; 0x224

00010e10 <mbsinit@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #110592	; 0x1b000
   10e18:	ldr	pc, [ip, #540]!	; 0x21c

00010e1c <fwrite_unlocked@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #110592	; 0x1b000
   10e24:	ldr	pc, [ip, #532]!	; 0x214

00010e28 <memcmp@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #110592	; 0x1b000
   10e30:	ldr	pc, [ip, #524]!	; 0x20c

00010e34 <fputc_unlocked@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #110592	; 0x1b000
   10e3c:	ldr	pc, [ip, #516]!	; 0x204

00010e40 <dcgettext@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #110592	; 0x1b000
   10e48:	ldr	pc, [ip, #508]!	; 0x1fc

00010e4c <realloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #110592	; 0x1b000
   10e54:	ldr	pc, [ip, #500]!	; 0x1f4

00010e58 <textdomain@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #110592	; 0x1b000
   10e60:	ldr	pc, [ip, #492]!	; 0x1ec

00010e64 <iswprint@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #110592	; 0x1b000
   10e6c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e70 <fwrite@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #110592	; 0x1b000
   10e78:	ldr	pc, [ip, #476]!	; 0x1dc

00010e7c <lseek64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #110592	; 0x1b000
   10e84:	ldr	pc, [ip, #468]!	; 0x1d4

00010e88 <__ctype_get_mb_cur_max@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #110592	; 0x1b000
   10e90:	ldr	pc, [ip, #460]!	; 0x1cc

00010e94 <__fpending@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #110592	; 0x1b000
   10e9c:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea0 <mbrtowc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #110592	; 0x1b000
   10ea8:	ldr	pc, [ip, #444]!	; 0x1bc

00010eac <error@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #110592	; 0x1b000
   10eb4:	ldr	pc, [ip, #436]!	; 0x1b4

00010eb8 <strcoll@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #110592	; 0x1b000
   10ec0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec4 <malloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #110592	; 0x1b000
   10ecc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed0 <__libc_start_main@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #110592	; 0x1b000
   10ed8:	ldr	pc, [ip, #412]!	; 0x19c

00010edc <__freading@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #110592	; 0x1b000
   10ee4:	ldr	pc, [ip, #404]!	; 0x194

00010ee8 <__ctype_toupper_loc@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #110592	; 0x1b000
   10ef0:	ldr	pc, [ip, #396]!	; 0x18c

00010ef4 <__gmon_start__@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #110592	; 0x1b000
   10efc:	ldr	pc, [ip, #388]!	; 0x184

00010f00 <getopt_long@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #110592	; 0x1b000
   10f08:	ldr	pc, [ip, #380]!	; 0x17c

00010f0c <__ctype_b_loc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #110592	; 0x1b000
   10f14:	ldr	pc, [ip, #372]!	; 0x174

00010f18 <exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #110592	; 0x1b000
   10f20:	ldr	pc, [ip, #364]!	; 0x16c

00010f24 <strtoul@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #110592	; 0x1b000
   10f2c:	ldr	pc, [ip, #356]!	; 0x164

00010f30 <strlen@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #110592	; 0x1b000
   10f38:	ldr	pc, [ip, #348]!	; 0x15c

00010f3c <strchr@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #110592	; 0x1b000
   10f44:	ldr	pc, [ip, #340]!	; 0x154

00010f48 <__errno_location@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #110592	; 0x1b000
   10f50:	ldr	pc, [ip, #332]!	; 0x14c

00010f54 <__cxa_atexit@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #110592	; 0x1b000
   10f5c:	ldr	pc, [ip, #324]!	; 0x144

00010f60 <memset@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #110592	; 0x1b000
   10f68:	ldr	pc, [ip, #316]!	; 0x13c

00010f6c <__printf_chk@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #110592	; 0x1b000
   10f74:	ldr	pc, [ip, #308]!	; 0x134

00010f78 <fileno@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #110592	; 0x1b000
   10f80:	ldr	pc, [ip, #300]!	; 0x12c

00010f84 <__fprintf_chk@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #110592	; 0x1b000
   10f8c:	ldr	pc, [ip, #292]!	; 0x124

00010f90 <memchr@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #110592	; 0x1b000
   10f98:	ldr	pc, [ip, #284]!	; 0x11c

00010f9c <fclose@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #110592	; 0x1b000
   10fa4:	ldr	pc, [ip, #276]!	; 0x114

00010fa8 <fseeko64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #110592	; 0x1b000
   10fb0:	ldr	pc, [ip, #268]!	; 0x10c

00010fb4 <fcntl64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #110592	; 0x1b000
   10fbc:	ldr	pc, [ip, #260]!	; 0x104

00010fc0 <__uflow@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #110592	; 0x1b000
   10fc8:	ldr	pc, [ip, #252]!	; 0xfc

00010fcc <__overflow@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #110592	; 0x1b000
   10fd4:	ldr	pc, [ip, #244]!	; 0xf4

00010fd8 <setlocale@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #110592	; 0x1b000
   10fe0:	ldr	pc, [ip, #236]!	; 0xec

00010fe4 <strrchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #110592	; 0x1b000
   10fec:	ldr	pc, [ip, #228]!	; 0xe4

00010ff0 <nl_langinfo@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #110592	; 0x1b000
   10ff8:	ldr	pc, [ip, #220]!	; 0xdc

00010ffc <fopen64@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #110592	; 0x1b000
   11004:	ldr	pc, [ip, #212]!	; 0xd4

00011008 <strpbrk@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #110592	; 0x1b000
   11010:	ldr	pc, [ip, #204]!	; 0xcc

00011014 <bindtextdomain@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #110592	; 0x1b000
   1101c:	ldr	pc, [ip, #196]!	; 0xc4

00011020 <strncmp@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #110592	; 0x1b000
   11028:	ldr	pc, [ip, #188]!	; 0xbc

0001102c <abort@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #110592	; 0x1b000
   11034:	ldr	pc, [ip, #180]!	; 0xb4

00011038 <close@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #110592	; 0x1b000
   11040:	ldr	pc, [ip, #172]!	; 0xac

00011044 <__assert_fail@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #110592	; 0x1b000
   1104c:	ldr	pc, [ip, #164]!	; 0xa4

Disassembly of section .text:

00011050 <.text>:
   11050:	mov	r3, #0
   11054:	mov	r2, #0
   11058:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1105c:	mov	r5, #0
   11060:	strd	r6, [sp, #8]
   11064:	mov	r7, r0
   11068:	strd	r8, [sp, #16]
   1106c:	mov	r6, r1
   11070:	movw	r4, #49544	; 0xc188
   11074:	movt	r4, #2
   11078:	strd	sl, [sp, #24]
   1107c:	movw	r9, #49408	; 0xc100
   11080:	movt	r9, #2
   11084:	str	lr, [sp, #32]
   11088:	sub	sp, sp, #92	; 0x5c
   1108c:	ldr	r0, [r1]
   11090:	add	sl, r9, #16
   11094:	str	r5, [sp, #28]
   11098:	str	r5, [sp, #32]
   1109c:	strd	r2, [sp, #40]	; 0x28
   110a0:	bl	1421c <__assert_fail@plt+0x31d8>
   110a4:	movw	r1, #44420	; 0xad84
   110a8:	movt	r1, #1
   110ac:	ldr	r8, [pc, #3580]	; 11eb0 <__assert_fail@plt+0xe6c>
   110b0:	mov	r0, #6
   110b4:	bl	10fd8 <setlocale@plt>
   110b8:	movw	r1, #45604	; 0xb224
   110bc:	movt	r1, #1
   110c0:	movw	r0, #45416	; 0xb168
   110c4:	movt	r0, #1
   110c8:	bl	11014 <bindtextdomain@plt>
   110cc:	movw	r0, #45416	; 0xb168
   110d0:	movt	r0, #1
   110d4:	bl	10e58 <textdomain@plt>
   110d8:	mov	r0, #3
   110dc:	bl	13ee0 <__assert_fail@plt+0x2e9c>
   110e0:	strb	r0, [r4, #1]
   110e4:	movw	r0, #15024	; 0x3ab0
   110e8:	movt	r0, #1
   110ec:	bl	1a68c <__assert_fail@plt+0x9648>
   110f0:	movw	r0, #9224	; 0x2408
   110f4:	movt	r0, #1
   110f8:	bl	1a68c <__assert_fail@plt+0x9648>
   110fc:	mov	r3, #1
   11100:	str	r5, [r4, #48]	; 0x30
   11104:	strb	r5, [r4, #52]	; 0x34
   11108:	strh	r5, [r4, #56]	; 0x38
   1110c:	strb	r3, [r4, #112]	; 0x70
   11110:	b	11120 <__assert_fail@plt+0xdc>
   11114:	mov	r3, #2
   11118:	str	r3, [r4, #48]	; 0x30
   1111c:	str	r5, [sp, #28]
   11120:	mov	r5, #0
   11124:	movw	r2, #45744	; 0xb2b0
   11128:	movt	r2, #1
   1112c:	mov	r3, r8
   11130:	mov	r1, r6
   11134:	mov	r0, r7
   11138:	str	r5, [sp]
   1113c:	bl	10f00 <getopt_long@plt>
   11140:	cmn	r0, #1
   11144:	beq	11478 <__assert_fail@plt+0x434>
   11148:	cmp	r0, #105	; 0x69
   1114c:	str	r5, [sp, #24]
   11150:	beq	1142c <__assert_fail@plt+0x3e8>
   11154:	ble	111f0 <__assert_fail@plt+0x1ac>
   11158:	cmp	r0, #118	; 0x76
   1115c:	beq	11350 <__assert_fail@plt+0x30c>
   11160:	ble	111a4 <__assert_fail@plt+0x160>
   11164:	cmp	r0, #256	; 0x100
   11168:	beq	113a8 <__assert_fail@plt+0x364>
   1116c:	ble	11194 <__assert_fail@plt+0x150>
   11170:	movw	r3, #257	; 0x101
   11174:	cmp	r0, r3
   11178:	beq	11114 <__assert_fail@plt+0xd0>
   1117c:	movw	r3, #258	; 0x102
   11180:	cmp	r0, r3
   11184:	bne	11248 <__assert_fail@plt+0x204>
   11188:	mov	r3, #1
   1118c:	strb	r3, [r4, #115]	; 0x73
   11190:	b	1111c <__assert_fail@plt+0xd8>
   11194:	cmp	r0, #122	; 0x7a
   11198:	bne	11248 <__assert_fail@plt+0x204>
   1119c:	strb	r5, [r9, #8]
   111a0:	b	1111c <__assert_fail@plt+0xd8>
   111a4:	cmp	r0, #111	; 0x6f
   111a8:	beq	113b4 <__assert_fail@plt+0x370>
   111ac:	cmp	r0, #116	; 0x74
   111b0:	bne	11294 <__assert_fail@plt+0x250>
   111b4:	movw	r5, #49536	; 0xc180
   111b8:	movt	r5, #2
   111bc:	ldr	r0, [r5]
   111c0:	ldrb	r3, [r0]
   111c4:	cmp	r3, #0
   111c8:	bne	11438 <__assert_fail@plt+0x3f4>
   111cc:	mov	r3, #10
   111d0:	ldr	r2, [r9, #4]
   111d4:	cmp	r2, #0
   111d8:	blt	111e4 <__assert_fail@plt+0x1a0>
   111dc:	cmp	r2, r3
   111e0:	bne	11e38 <__assert_fail@plt+0xdf4>
   111e4:	mov	r5, #0
   111e8:	str	r3, [r9, #4]
   111ec:	b	1111c <__assert_fail@plt+0xd8>
   111f0:	cmp	r0, #49	; 0x31
   111f4:	beq	11408 <__assert_fail@plt+0x3c4>
   111f8:	ble	11250 <__assert_fail@plt+0x20c>
   111fc:	cmp	r0, #97	; 0x61
   11200:	beq	11354 <__assert_fail@plt+0x310>
   11204:	cmp	r0, #101	; 0x65
   11208:	bne	11240 <__assert_fail@plt+0x1fc>
   1120c:	ldr	r0, [r4, #4]
   11210:	movw	r3, #49536	; 0xc180
   11214:	movt	r3, #2
   11218:	ldr	fp, [r3]
   1121c:	cmp	r0, #0
   11220:	beq	11234 <__assert_fail@plt+0x1f0>
   11224:	mov	r1, fp
   11228:	bl	10dbc <strcmp@plt>
   1122c:	cmp	r0, #0
   11230:	bne	11dac <__assert_fail@plt+0xd68>
   11234:	mov	r5, #0
   11238:	str	fp, [r4, #4]
   1123c:	b	1111c <__assert_fail@plt+0xd8>
   11240:	cmp	r0, #50	; 0x32
   11244:	beq	113e4 <__assert_fail@plt+0x3a0>
   11248:	mov	r0, #1
   1124c:	bl	13514 <__assert_fail@plt+0x24d0>
   11250:	cmn	r0, #2
   11254:	beq	11d1c <__assert_fail@plt+0xcd8>
   11258:	cmp	r0, #1
   1125c:	bne	11308 <__assert_fail@plt+0x2c4>
   11260:	add	r1, sp, #24
   11264:	add	r2, sp, #28
   11268:	movw	r0, #49536	; 0xc180
   1126c:	movt	r0, #2
   11270:	add	r3, sp, #32
   11274:	str	r2, [sp]
   11278:	add	r2, sp, #40	; 0x28
   1127c:	str	r1, [sp, #4]
   11280:	add	r1, sp, #48	; 0x30
   11284:	ldr	r0, [r0]
   11288:	bl	138d4 <__assert_fail@plt+0x2890>
   1128c:	ldr	r5, [sp, #24]
   11290:	b	1111c <__assert_fail@plt+0xd8>
   11294:	cmp	r0, #106	; 0x6a
   11298:	bne	11248 <__assert_fail@plt+0x204>
   1129c:	movw	r3, #49536	; 0xc180
   112a0:	movt	r3, #2
   112a4:	ldr	r0, [r3]
   112a8:	ldrb	r3, [r0]
   112ac:	sub	r2, r3, #49	; 0x31
   112b0:	cmp	r2, #1
   112b4:	bhi	112e4 <__assert_fail@plt+0x2a0>
   112b8:	ldrb	r2, [r0, #1]
   112bc:	cmp	r2, #0
   112c0:	bne	112e4 <__assert_fail@plt+0x2a0>
   112c4:	movw	r2, #49512	; 0xc168
   112c8:	movt	r2, #2
   112cc:	ldr	r2, [r2]
   112d0:	sub	r2, r2, #-1073741823	; 0xc0000001
   112d4:	ldr	r2, [r6, r2, lsl #2]
   112d8:	add	r2, r2, #2
   112dc:	cmp	r0, r2
   112e0:	beq	11810 <__assert_fail@plt+0x7cc>
   112e4:	bl	12014 <__assert_fail@plt+0xfd0>
   112e8:	mov	r1, r0
   112ec:	mov	r0, sl
   112f0:	bl	11fb0 <__assert_fail@plt+0xf6c>
   112f4:	ldr	r0, [pc, #3000]	; 11eb4 <__assert_fail@plt+0xe70>
   112f8:	ldr	r1, [r9, #16]
   112fc:	bl	11fb0 <__assert_fail@plt+0xf6c>
   11300:	ldr	r5, [sp, #24]
   11304:	b	1111c <__assert_fail@plt+0xd8>
   11308:	cmn	r0, #3
   1130c:	bne	11248 <__assert_fail@plt+0x204>
   11310:	movw	r2, #45728	; 0xb2a0
   11314:	movt	r2, #1
   11318:	movw	r3, #49428	; 0xc114
   1131c:	movt	r3, #2
   11320:	movw	r0, #49532	; 0xc17c
   11324:	movt	r0, #2
   11328:	stm	sp, {r2, r5}
   1132c:	movw	r1, #43036	; 0xa81c
   11330:	movt	r1, #1
   11334:	ldr	r0, [r0]
   11338:	movw	r2, #45412	; 0xb164
   1133c:	movt	r2, #1
   11340:	ldr	r3, [r3]
   11344:	bl	18320 <__assert_fail@plt+0x72dc>
   11348:	mov	r0, r5
   1134c:	bl	10f18 <exit@plt>
   11350:	strb	r5, [r4, #112]	; 0x70
   11354:	movw	r1, #44420	; 0xad84
   11358:	movt	r1, #1
   1135c:	movw	r5, #49536	; 0xc180
   11360:	movt	r5, #2
   11364:	add	r3, sp, #72	; 0x48
   11368:	mov	r2, #10
   1136c:	str	r1, [sp]
   11370:	mov	r1, #0
   11374:	ldr	r0, [r5]
   11378:	bl	18d00 <__assert_fail@plt+0x7cbc>
   1137c:	cmp	r0, #0
   11380:	bne	11d24 <__assert_fail@plt+0xce0>
   11384:	ldr	r3, [sp, #72]	; 0x48
   11388:	sub	r2, r3, #1
   1138c:	cmp	r2, #1
   11390:	bhi	11d24 <__assert_fail@plt+0xce0>
   11394:	cmp	r3, #1
   11398:	movne	r3, #1
   1139c:	strbeq	r3, [r4, #113]	; 0x71
   113a0:	strbne	r3, [r4, #114]	; 0x72
   113a4:	b	11300 <__assert_fail@plt+0x2bc>
   113a8:	mov	r3, #1
   113ac:	str	r3, [r4, #48]	; 0x30
   113b0:	b	1111c <__assert_fail@plt+0xd8>
   113b4:	movw	r3, #49536	; 0xc180
   113b8:	movt	r3, #2
   113bc:	ldr	fp, [r3]
   113c0:	movw	r1, #45672	; 0xb268
   113c4:	movt	r1, #1
   113c8:	mov	r0, fp
   113cc:	bl	10dbc <strcmp@plt>
   113d0:	subs	r5, r0, #0
   113d4:	bne	11460 <__assert_fail@plt+0x41c>
   113d8:	mov	r3, #1
   113dc:	strb	r3, [r4, #16]
   113e0:	b	1111c <__assert_fail@plt+0xd8>
   113e4:	movw	r3, #49536	; 0xc180
   113e8:	movt	r3, #2
   113ec:	ldr	r0, [r3]
   113f0:	bl	12014 <__assert_fail@plt+0xfd0>
   113f4:	mov	r1, r0
   113f8:	ldr	r0, [pc, #2740]	; 11eb4 <__assert_fail@plt+0xe70>
   113fc:	bl	11fb0 <__assert_fail@plt+0xf6c>
   11400:	ldr	r5, [sp, #24]
   11404:	b	1111c <__assert_fail@plt+0xd8>
   11408:	movw	r3, #49536	; 0xc180
   1140c:	movt	r3, #2
   11410:	ldr	r0, [r3]
   11414:	bl	12014 <__assert_fail@plt+0xfd0>
   11418:	mov	r1, r0
   1141c:	ldr	r0, [pc, #2708]	; 11eb8 <__assert_fail@plt+0xe74>
   11420:	bl	11fb0 <__assert_fail@plt+0xf6c>
   11424:	ldr	r5, [sp, #24]
   11428:	b	1111c <__assert_fail@plt+0xd8>
   1142c:	mov	r3, #1
   11430:	strb	r3, [r4]
   11434:	b	1111c <__assert_fail@plt+0xd8>
   11438:	ldrb	r2, [r0, #1]
   1143c:	cmp	r2, #0
   11440:	beq	111d0 <__assert_fail@plt+0x18c>
   11444:	movw	r1, #45680	; 0xb270
   11448:	movt	r1, #1
   1144c:	bl	10dbc <strcmp@plt>
   11450:	cmp	r0, #0
   11454:	bne	11e2c <__assert_fail@plt+0xde8>
   11458:	mov	r3, #0
   1145c:	b	111d0 <__assert_fail@plt+0x18c>
   11460:	mov	r0, fp
   11464:	bl	120bc <__assert_fail@plt+0x1078>
   11468:	mov	r3, #3
   1146c:	mov	r5, r3
   11470:	str	r3, [sp, #24]
   11474:	b	1111c <__assert_fail@plt+0xd8>
   11478:	movw	r8, #49512	; 0xc168
   1147c:	movt	r8, #2
   11480:	str	r5, [sp, #28]
   11484:	ldr	r0, [r8]
   11488:	cmp	r7, r0
   1148c:	ble	114c4 <__assert_fail@plt+0x480>
   11490:	add	r9, sp, #24
   11494:	add	r5, sp, #28
   11498:	add	ip, r0, #1
   1149c:	add	r3, sp, #32
   114a0:	stm	sp, {r5, r9}
   114a4:	add	r2, sp, #40	; 0x28
   114a8:	add	r1, sp, #48	; 0x30
   114ac:	ldr	r0, [r6, r0, lsl #2]
   114b0:	str	ip, [r8]
   114b4:	bl	138d4 <__assert_fail@plt+0x2890>
   114b8:	ldr	r0, [r8]
   114bc:	cmp	r0, r7
   114c0:	blt	11498 <__assert_fail@plt+0x454>
   114c4:	ldr	r5, [sp, #32]
   114c8:	cmp	r5, #2
   114cc:	bne	11e44 <__assert_fail@plt+0xe00>
   114d0:	ldr	r3, [sp, #40]	; 0x28
   114d4:	cmp	r3, #0
   114d8:	bne	117f4 <__assert_fail@plt+0x7b0>
   114dc:	ldr	r3, [sp, #44]	; 0x2c
   114e0:	cmp	r3, #0
   114e4:	bne	117d8 <__assert_fail@plt+0x794>
   114e8:	movw	r5, #49408	; 0xc100
   114ec:	movt	r5, #2
   114f0:	ldr	r3, [r5, #16]
   114f4:	cmn	r3, #1
   114f8:	beq	117b4 <__assert_fail@plt+0x770>
   114fc:	ldr	r3, [r5, #12]
   11500:	movw	r1, #45808	; 0xb2f0
   11504:	movt	r1, #1
   11508:	ldr	r6, [r4, #60]	; 0x3c
   1150c:	cmn	r3, #1
   11510:	moveq	r3, #0
   11514:	mov	r0, r6
   11518:	streq	r3, [r5, #12]
   1151c:	bl	10dbc <strcmp@plt>
   11520:	cmp	r0, #0
   11524:	bne	117c0 <__assert_fail@plt+0x77c>
   11528:	movw	r3, #49528	; 0xc178
   1152c:	movt	r3, #2
   11530:	ldr	sl, [r3]
   11534:	cmp	sl, #0
   11538:	beq	11e14 <__assert_fail@plt+0xdd0>
   1153c:	ldr	r6, [r4, #64]	; 0x40
   11540:	movw	r1, #45808	; 0xb2f0
   11544:	movt	r1, #1
   11548:	mov	r0, r6
   1154c:	bl	10dbc <strcmp@plt>
   11550:	cmp	r0, #0
   11554:	bne	11c68 <__assert_fail@plt+0xc24>
   11558:	movw	r3, #49528	; 0xc178
   1155c:	movt	r3, #2
   11560:	ldr	r7, [r3]
   11564:	cmp	r7, #0
   11568:	beq	11de4 <__assert_fail@plt+0xda0>
   1156c:	cmp	sl, r7
   11570:	beq	11db8 <__assert_fail@plt+0xd74>
   11574:	mov	r1, #2
   11578:	mov	r0, sl
   1157c:	bl	13ba0 <__assert_fail@plt+0x2b5c>
   11580:	mov	r6, #0
   11584:	mov	r8, #0
   11588:	mov	r9, #0
   1158c:	mov	r1, #2
   11590:	mov	r0, r7
   11594:	bl	13ba0 <__assert_fail@plt+0x2b5c>
   11598:	add	r1, sp, #56	; 0x38
   1159c:	mov	r0, sl
   115a0:	strd	r8, [sp, #56]	; 0x38
   115a4:	str	r6, [sp, #64]	; 0x40
   115a8:	bl	1301c <__assert_fail@plt+0x1fd8>
   115ac:	add	r1, sp, #72	; 0x48
   115b0:	mov	r0, r7
   115b4:	strd	r8, [sp, #72]	; 0x48
   115b8:	str	r6, [sp, #80]	; 0x50
   115bc:	bl	13298 <__assert_fail@plt+0x2254>
   115c0:	ldrb	r3, [r4, #16]
   115c4:	ldr	r1, [sp, #56]	; 0x38
   115c8:	cmp	r3, r6
   115cc:	beq	11608 <__assert_fail@plt+0x5c4>
   115d0:	cmp	r1, #0
   115d4:	mov	r3, r1
   115d8:	beq	115e8 <__assert_fail@plt+0x5a4>
   115dc:	ldr	r3, [sp, #64]	; 0x40
   115e0:	ldr	r3, [r3]
   115e4:	ldr	r3, [r3, #12]
   115e8:	str	r3, [r4, #104]	; 0x68
   115ec:	ldr	r3, [sp, #72]	; 0x48
   115f0:	cmp	r3, #0
   115f4:	beq	11604 <__assert_fail@plt+0x5c0>
   115f8:	ldr	r3, [sp, #80]	; 0x50
   115fc:	ldr	r3, [r3]
   11600:	ldr	r3, [r3, #12]
   11604:	str	r3, [r4, #108]	; 0x6c
   11608:	ldrb	r3, [r4, #115]	; 0x73
   1160c:	cmp	r3, #0
   11610:	beq	11660 <__assert_fail@plt+0x61c>
   11614:	cmp	r1, #0
   11618:	ldr	r3, [sp, #72]	; 0x48
   1161c:	bne	11c80 <__assert_fail@plt+0xc3c>
   11620:	cmp	r3, #0
   11624:	beq	11c98 <__assert_fail@plt+0xc54>
   11628:	ldr	r0, [pc, #2188]	; 11ebc <__assert_fail@plt+0xe78>
   1162c:	ldr	r3, [sp, #80]	; 0x50
   11630:	ldr	r1, [r3]
   11634:	bl	12b5c <__assert_fail@plt+0x1b18>
   11638:	ldr	r1, [sp, #56]	; 0x38
   1163c:	mov	r3, #0
   11640:	str	r3, [r4, #20]
   11644:	str	r3, [r4, #24]
   11648:	cmp	r1, r3
   1164c:	bne	11cf0 <__assert_fail@plt+0xcac>
   11650:	ldr	r3, [sp, #72]	; 0x48
   11654:	cmp	r3, #0
   11658:	bne	11d04 <__assert_fail@plt+0xcc0>
   1165c:	ldr	r1, [sp, #56]	; 0x38
   11660:	add	r3, sp, #60	; 0x3c
   11664:	str	r3, [sp, #16]
   11668:	add	r3, sp, #76	; 0x4c
   1166c:	str	r3, [sp, #20]
   11670:	cmp	r1, #0
   11674:	beq	116f8 <__assert_fail@plt+0x6b4>
   11678:	ldr	r3, [sp, #72]	; 0x48
   1167c:	cmp	r3, #0
   11680:	beq	11bd8 <__assert_fail@plt+0xb94>
   11684:	ldr	r2, [sp, #64]	; 0x40
   11688:	ldr	r3, [sp, #80]	; 0x50
   1168c:	ldr	ip, [r5, #12]
   11690:	ldr	r2, [r2]
   11694:	ldr	r3, [r3]
   11698:	ldr	lr, [r5, #16]
   1169c:	add	r1, r2, #20
   116a0:	ldr	r0, [r2, #12]
   116a4:	add	r3, r3, #20
   116a8:	ldr	r2, [r3, #-8]
   116ac:	str	lr, [sp]
   116b0:	str	ip, [sp, #4]
   116b4:	bl	121c0 <__assert_fail@plt+0x117c>
   116b8:	cmp	r0, #0
   116bc:	blt	11ad4 <__assert_fail@plt+0xa90>
   116c0:	beq	11880 <__assert_fail@plt+0x83c>
   116c4:	ldrb	r3, [r4, #114]	; 0x72
   116c8:	cmp	r3, #0
   116cc:	bne	11b04 <__assert_fail@plt+0xac0>
   116d0:	mov	r3, #0
   116d4:	add	r1, sp, #72	; 0x48
   116d8:	mov	r0, r7
   116dc:	str	r3, [sp, #72]	; 0x48
   116e0:	bl	13298 <__assert_fail@plt+0x2254>
   116e4:	ldr	r1, [sp, #56]	; 0x38
   116e8:	mov	r3, #1
   116ec:	strb	r3, [r4, #52]	; 0x34
   116f0:	cmp	r1, #0
   116f4:	bne	11678 <__assert_fail@plt+0x634>
   116f8:	mov	r2, #0
   116fc:	ldr	r3, [r4, #48]	; 0x30
   11700:	mov	r1, #0
   11704:	str	r1, [sp, #36]	; 0x24
   11708:	cmp	r3, #2
   1170c:	beq	11728 <__assert_fail@plt+0x6e4>
   11710:	ldrb	r3, [r4, #56]	; 0x38
   11714:	cmp	r3, r1
   11718:	beq	11968 <__assert_fail@plt+0x924>
   1171c:	ldrb	r3, [r4, #57]	; 0x39
   11720:	cmp	r3, r1
   11724:	beq	11968 <__assert_fail@plt+0x924>
   11728:	ldrb	r3, [r4, #113]	; 0x71
   1172c:	cmp	r3, #0
   11730:	bne	11cc0 <__assert_fail@plt+0xc7c>
   11734:	ldrb	r3, [r4, #114]	; 0x72
   11738:	cmp	r3, #0
   1173c:	bne	11be4 <__assert_fail@plt+0xba0>
   11740:	ldr	r0, [sp, #36]	; 0x24
   11744:	bl	13db0 <__assert_fail@plt+0x2d6c>
   11748:	add	r1, sp, #64	; 0x40
   1174c:	ldr	r0, [sp, #16]
   11750:	bl	12360 <__assert_fail@plt+0x131c>
   11754:	add	r1, sp, #80	; 0x50
   11758:	ldr	r0, [sp, #20]
   1175c:	bl	12360 <__assert_fail@plt+0x131c>
   11760:	mov	r0, sl
   11764:	bl	13bf0 <__assert_fail@plt+0x2bac>
   11768:	subs	r5, r0, #0
   1176c:	bne	11e14 <__assert_fail@plt+0xdd0>
   11770:	mov	r0, r7
   11774:	bl	13bf0 <__assert_fail@plt+0x2bac>
   11778:	cmp	r0, #0
   1177c:	bne	11d58 <__assert_fail@plt+0xd14>
   11780:	ldrb	r3, [r4, #56]	; 0x38
   11784:	cmp	r3, #0
   11788:	bne	11d88 <__assert_fail@plt+0xd44>
   1178c:	ldrb	r3, [r4, #57]	; 0x39
   11790:	cmp	r3, #0
   11794:	bne	11d88 <__assert_fail@plt+0xd44>
   11798:	add	sp, sp, #92	; 0x5c
   1179c:	ldrd	r4, [sp]
   117a0:	ldrd	r6, [sp, #8]
   117a4:	ldrd	r8, [sp, #16]
   117a8:	ldrd	sl, [sp, #24]
   117ac:	add	sp, sp, #32
   117b0:	pop	{pc}		; (ldr pc, [sp], #4)
   117b4:	mov	r3, #0
   117b8:	str	r3, [r5, #16]
   117bc:	b	114fc <__assert_fail@plt+0x4b8>
   117c0:	mov	r0, r6
   117c4:	movw	r1, #46024	; 0xb3c8
   117c8:	movt	r1, #1
   117cc:	bl	13d04 <__assert_fail@plt+0x2cc0>
   117d0:	mov	sl, r0
   117d4:	b	11534 <__assert_fail@plt+0x4f0>
   117d8:	mov	r1, #1
   117dc:	ldr	r0, [pc, #1748]	; 11eb8 <__assert_fail@plt+0xe74>
   117e0:	bl	11fb0 <__assert_fail@plt+0xf6c>
   117e4:	mov	r1, #1
   117e8:	ldr	r0, [pc, #1732]	; 11eb4 <__assert_fail@plt+0xe70>
   117ec:	bl	11fb0 <__assert_fail@plt+0xf6c>
   117f0:	b	114e8 <__assert_fail@plt+0x4a4>
   117f4:	mov	r1, #0
   117f8:	ldr	r0, [pc, #1720]	; 11eb8 <__assert_fail@plt+0xe74>
   117fc:	bl	11fb0 <__assert_fail@plt+0xf6c>
   11800:	mov	r1, #0
   11804:	ldr	r0, [pc, #1704]	; 11eb4 <__assert_fail@plt+0xe70>
   11808:	bl	11fb0 <__assert_fail@plt+0xf6c>
   1180c:	b	114dc <__assert_fail@plt+0x498>
   11810:	sub	r3, r3, #50	; 0x32
   11814:	add	r2, sp, #88	; 0x58
   11818:	clz	r3, r3
   1181c:	lsr	r3, r3, #5
   11820:	add	r2, r2, r3, lsl #2
   11824:	add	r5, r3, #1
   11828:	ldr	r3, [r2, #-48]	; 0xffffffd0
   1182c:	str	r5, [sp, #24]
   11830:	add	r3, r3, #1
   11834:	str	r3, [r2, #-48]	; 0xffffffd0
   11838:	b	1111c <__assert_fail@plt+0xd8>
   1183c:	ldr	r2, [sp, #64]	; 0x40
   11840:	add	r0, r3, #1
   11844:	ldr	r1, [sp, #80]	; 0x50
   11848:	ldr	ip, [r5, #12]
   1184c:	ldr	r2, [r2, r3, lsl #2]
   11850:	ldr	r3, [r1]
   11854:	str	r0, [sp, #56]	; 0x38
   11858:	ldr	lr, [r5, #16]
   1185c:	add	r1, r2, #20
   11860:	ldr	r0, [r2, #12]
   11864:	add	r3, r3, #20
   11868:	ldr	r2, [r3, #-8]
   1186c:	str	lr, [sp]
   11870:	str	ip, [sp, #4]
   11874:	bl	121c0 <__assert_fail@plt+0x117c>
   11878:	cmp	r0, #0
   1187c:	bne	11a4c <__assert_fail@plt+0xa08>
   11880:	ldrd	r2, [sp, #56]	; 0x38
   11884:	ldr	r6, [sp, #64]	; 0x40
   11888:	cmp	r2, r3
   1188c:	lslne	r8, r2, #2
   11890:	beq	11a54 <__assert_fail@plt+0xa10>
   11894:	add	r1, r6, r8
   11898:	mov	r0, sl
   1189c:	bl	12e14 <__assert_fail@plt+0x1dd0>
   118a0:	cmp	r0, #0
   118a4:	ldr	r3, [sp, #56]	; 0x38
   118a8:	bne	1183c <__assert_fail@plt+0x7f8>
   118ac:	mov	fp, #1
   118b0:	add	r3, r3, fp
   118b4:	str	r3, [sp, #56]	; 0x38
   118b8:	ldrd	r2, [sp, #72]	; 0x48
   118bc:	ldr	r6, [sp, #80]	; 0x50
   118c0:	cmp	r2, r3
   118c4:	lslne	r8, r2, #2
   118c8:	beq	11a94 <__assert_fail@plt+0xa50>
   118cc:	add	r1, r6, r8
   118d0:	mov	r0, r7
   118d4:	bl	12954 <__assert_fail@plt+0x1910>
   118d8:	cmp	r0, #0
   118dc:	bne	119fc <__assert_fail@plt+0x9b8>
   118e0:	ldr	r3, [sp, #72]	; 0x48
   118e4:	mov	r2, #1
   118e8:	str	r2, [sp, #12]
   118ec:	add	r3, r3, r2
   118f0:	str	r3, [sp, #72]	; 0x48
   118f4:	ldrb	r3, [r4, #112]	; 0x70
   118f8:	cmp	r3, #0
   118fc:	bne	11b60 <__assert_fail@plt+0xb1c>
   11900:	cmp	fp, #0
   11904:	bne	11b18 <__assert_fail@plt+0xad4>
   11908:	ldr	r1, [sp, #56]	; 0x38
   1190c:	ldr	r3, [sp, #64]	; 0x40
   11910:	sub	r2, r1, #-1073741823	; 0xc0000001
   11914:	mov	r1, #1
   11918:	ldr	r0, [r3]
   1191c:	ldr	ip, [r3, r2, lsl #2]
   11920:	str	ip, [r3]
   11924:	str	r0, [r3, r2, lsl #2]
   11928:	str	r1, [sp, #56]	; 0x38
   1192c:	ldr	r3, [sp, #12]
   11930:	cmp	r3, #0
   11934:	movne	r3, #0
   11938:	strne	r3, [sp, #72]	; 0x48
   1193c:	bne	11670 <__assert_fail@plt+0x62c>
   11940:	ldr	r2, [sp, #72]	; 0x48
   11944:	mov	r0, #1
   11948:	ldr	r3, [sp, #80]	; 0x50
   1194c:	sub	r2, r2, #-1073741823	; 0xc0000001
   11950:	ldr	ip, [r3]
   11954:	ldr	lr, [r3, r2, lsl #2]
   11958:	str	lr, [r3]
   1195c:	str	ip, [r3, r2, lsl #2]
   11960:	str	r0, [sp, #72]	; 0x48
   11964:	b	11670 <__assert_fail@plt+0x62c>
   11968:	cmp	r2, #0
   1196c:	beq	11be0 <__assert_fail@plt+0xb9c>
   11970:	ldrb	r8, [r4, #113]	; 0x71
   11974:	cmp	r8, #0
   11978:	moveq	r8, #1
   1197c:	bne	11ccc <__assert_fail@plt+0xc88>
   11980:	ldr	r3, [sp, #72]	; 0x48
   11984:	add	r5, sp, #36	; 0x24
   11988:	ldr	r6, [pc, #1324]	; 11ebc <__assert_fail@plt+0xe78>
   1198c:	cmp	r3, #0
   11990:	movne	r3, #1
   11994:	strbne	r3, [r4, #52]	; 0x34
   11998:	mov	r1, r5
   1199c:	mov	r0, sl
   119a0:	bl	12e14 <__assert_fail@plt+0x1dd0>
   119a4:	cmp	r0, #0
   119a8:	beq	119c4 <__assert_fail@plt+0x980>
   119ac:	ldrb	r3, [r4, #113]	; 0x71
   119b0:	cmp	r3, #0
   119b4:	bne	11b24 <__assert_fail@plt+0xae0>
   119b8:	ldrb	r3, [r4, #56]	; 0x38
   119bc:	cmp	r3, #0
   119c0:	beq	11998 <__assert_fail@plt+0x954>
   119c4:	ldrb	r3, [r4, #114]	; 0x72
   119c8:	orrs	r2, r3, r8
   119cc:	bne	11ce0 <__assert_fail@plt+0xc9c>
   119d0:	ldr	r5, [sp, #36]	; 0x24
   119d4:	cmp	r5, #0
   119d8:	beq	11740 <__assert_fail@plt+0x6fc>
   119dc:	mov	r6, #0
   119e0:	ldr	r0, [r5, #20]
   119e4:	bl	13db0 <__assert_fail@plt+0x2d6c>
   119e8:	str	r6, [r5, #20]
   119ec:	ldr	r0, [r5, #8]
   119f0:	bl	13db0 <__assert_fail@plt+0x2d6c>
   119f4:	str	r6, [r5, #8]
   119f8:	b	11740 <__assert_fail@plt+0x6fc>
   119fc:	ldr	r2, [sp, #64]	; 0x40
   11a00:	ldr	r3, [sp, #72]	; 0x48
   11a04:	ldr	r1, [sp, #80]	; 0x50
   11a08:	ldr	r2, [r2]
   11a0c:	add	r0, r3, #1
   11a10:	ldr	lr, [r5, #12]
   11a14:	ldr	r3, [r1, r3, lsl #2]
   11a18:	add	r1, r2, #20
   11a1c:	str	r0, [sp, #72]	; 0x48
   11a20:	ldr	ip, [r5, #16]
   11a24:	ldr	r0, [r2, #12]
   11a28:	add	r3, r3, #20
   11a2c:	ldr	r2, [r3, #-8]
   11a30:	stm	sp, {ip, lr}
   11a34:	bl	121c0 <__assert_fail@plt+0x117c>
   11a38:	cmp	r0, #0
   11a3c:	beq	118b8 <__assert_fail@plt+0x874>
   11a40:	mov	r3, #0
   11a44:	str	r3, [sp, #12]
   11a48:	b	118f4 <__assert_fail@plt+0x8b0>
   11a4c:	mov	fp, #0
   11a50:	b	118b8 <__assert_fail@plt+0x874>
   11a54:	mov	r0, r6
   11a58:	mov	r2, #4
   11a5c:	ldr	r1, [sp, #16]
   11a60:	bl	18784 <__assert_fail@plt+0x7740>
   11a64:	ldrd	r2, [sp, #56]	; 0x38
   11a68:	mov	r6, r0
   11a6c:	str	r0, [sp, #64]	; 0x40
   11a70:	cmp	r2, r3
   11a74:	lsl	r8, r2, #2
   11a78:	bcs	11894 <__assert_fail@plt+0x850>
   11a7c:	sub	r2, r3, r2
   11a80:	mov	r1, #0
   11a84:	lsl	r2, r2, #2
   11a88:	add	r0, r0, r8
   11a8c:	bl	10f60 <memset@plt>
   11a90:	b	11894 <__assert_fail@plt+0x850>
   11a94:	mov	r0, r6
   11a98:	mov	r2, #4
   11a9c:	ldr	r1, [sp, #20]
   11aa0:	bl	18784 <__assert_fail@plt+0x7740>
   11aa4:	ldrd	r2, [sp, #72]	; 0x48
   11aa8:	mov	r6, r0
   11aac:	str	r0, [sp, #80]	; 0x50
   11ab0:	cmp	r2, r3
   11ab4:	lsl	r8, r2, #2
   11ab8:	bcs	118cc <__assert_fail@plt+0x888>
   11abc:	sub	r2, r3, r2
   11ac0:	mov	r1, #0
   11ac4:	lsl	r2, r2, #2
   11ac8:	add	r0, r0, r8
   11acc:	bl	10f60 <memset@plt>
   11ad0:	b	118cc <__assert_fail@plt+0x888>
   11ad4:	ldrb	r3, [r4, #113]	; 0x71
   11ad8:	cmp	r3, #0
   11adc:	bne	11b4c <__assert_fail@plt+0xb08>
   11ae0:	mov	r3, #0
   11ae4:	add	r1, sp, #56	; 0x38
   11ae8:	mov	r0, sl
   11aec:	str	r3, [sp, #56]	; 0x38
   11af0:	bl	1301c <__assert_fail@plt+0x1fd8>
   11af4:	mov	r3, #1
   11af8:	ldr	r1, [sp, #56]	; 0x38
   11afc:	strb	r3, [r4, #52]	; 0x34
   11b00:	b	11670 <__assert_fail@plt+0x62c>
   11b04:	ldr	r3, [sp, #80]	; 0x50
   11b08:	ldr	r0, [pc, #940]	; 11ebc <__assert_fail@plt+0xe78>
   11b0c:	ldr	r1, [r3]
   11b10:	bl	12b5c <__assert_fail@plt+0x1b18>
   11b14:	b	116d0 <__assert_fail@plt+0x68c>
   11b18:	mov	r1, #0
   11b1c:	str	r1, [sp, #56]	; 0x38
   11b20:	b	1192c <__assert_fail@plt+0x8e8>
   11b24:	mov	r1, r6
   11b28:	ldr	r0, [sp, #36]	; 0x24
   11b2c:	bl	12b5c <__assert_fail@plt+0x1b18>
   11b30:	ldrb	r3, [r4, #56]	; 0x38
   11b34:	cmp	r3, #0
   11b38:	beq	11998 <__assert_fail@plt+0x954>
   11b3c:	ldrb	r3, [r4, #113]	; 0x71
   11b40:	cmp	r3, #0
   11b44:	bne	11998 <__assert_fail@plt+0x954>
   11b48:	b	119c4 <__assert_fail@plt+0x980>
   11b4c:	ldr	r3, [sp, #64]	; 0x40
   11b50:	ldr	r1, [pc, #868]	; 11ebc <__assert_fail@plt+0xe78>
   11b54:	ldr	r0, [r3]
   11b58:	bl	12b5c <__assert_fail@plt+0x1b18>
   11b5c:	b	11ae0 <__assert_fail@plt+0xa9c>
   11b60:	ldr	r1, [sp, #56]	; 0x38
   11b64:	cmp	r1, #1
   11b68:	beq	11900 <__assert_fail@plt+0x8bc>
   11b6c:	ldr	r0, [sp, #72]	; 0x48
   11b70:	mov	r8, #0
   11b74:	cmp	r0, #1
   11b78:	lslne	r9, r8, #2
   11b7c:	movne	r6, #0
   11b80:	beq	11bc4 <__assert_fail@plt+0xb80>
   11b84:	ldr	r2, [sp, #64]	; 0x40
   11b88:	ldr	r3, [sp, #80]	; 0x50
   11b8c:	ldr	r0, [r2, r9]
   11b90:	ldr	r1, [r3, r6, lsl #2]
   11b94:	add	r6, r6, #1
   11b98:	bl	12b5c <__assert_fail@plt+0x1b18>
   11b9c:	ldr	r0, [sp, #72]	; 0x48
   11ba0:	sub	r3, r0, #1
   11ba4:	cmp	r6, r3
   11ba8:	bcc	11b84 <__assert_fail@plt+0xb40>
   11bac:	ldr	r1, [sp, #56]	; 0x38
   11bb0:	add	r8, r8, #1
   11bb4:	sub	r3, r1, #1
   11bb8:	cmp	r8, r3
   11bbc:	bcc	11b74 <__assert_fail@plt+0xb30>
   11bc0:	b	11900 <__assert_fail@plt+0x8bc>
   11bc4:	add	r8, r8, #1
   11bc8:	sub	r3, r1, #1
   11bcc:	cmp	r3, r8
   11bd0:	bhi	11bb0 <__assert_fail@plt+0xb6c>
   11bd4:	b	11900 <__assert_fail@plt+0x8bc>
   11bd8:	mov	r2, r1
   11bdc:	b	116fc <__assert_fail@plt+0x6b8>
   11be0:	ldrb	r3, [r4, #114]	; 0x72
   11be4:	ldr	r2, [sp, #72]	; 0x48
   11be8:	cmp	r2, #0
   11bec:	beq	11740 <__assert_fail@plt+0x6fc>
   11bf0:	add	r5, sp, #36	; 0x24
   11bf4:	cmp	r3, #0
   11bf8:	bne	11cac <__assert_fail@plt+0xc68>
   11bfc:	ldr	r3, [sp, #56]	; 0x38
   11c00:	ldr	r6, [pc, #692]	; 11ebc <__assert_fail@plt+0xe78>
   11c04:	cmp	r3, #0
   11c08:	movne	r3, #1
   11c0c:	strbne	r3, [r4, #52]	; 0x34
   11c10:	mov	r1, r5
   11c14:	mov	r0, r7
   11c18:	bl	12954 <__assert_fail@plt+0x1910>
   11c1c:	cmp	r0, #0
   11c20:	beq	119d0 <__assert_fail@plt+0x98c>
   11c24:	ldrb	r3, [r4, #114]	; 0x72
   11c28:	cmp	r3, #0
   11c2c:	bne	11c40 <__assert_fail@plt+0xbfc>
   11c30:	ldrb	r3, [r4, #57]	; 0x39
   11c34:	cmp	r3, #0
   11c38:	beq	11c10 <__assert_fail@plt+0xbcc>
   11c3c:	b	119d0 <__assert_fail@plt+0x98c>
   11c40:	mov	r0, r6
   11c44:	ldr	r1, [sp, #36]	; 0x24
   11c48:	bl	12b5c <__assert_fail@plt+0x1b18>
   11c4c:	ldrb	r3, [r4, #57]	; 0x39
   11c50:	cmp	r3, #0
   11c54:	beq	11c10 <__assert_fail@plt+0xbcc>
   11c58:	ldrb	r3, [r4, #114]	; 0x72
   11c5c:	cmp	r3, #0
   11c60:	bne	11c10 <__assert_fail@plt+0xbcc>
   11c64:	b	119d0 <__assert_fail@plt+0x98c>
   11c68:	mov	r0, r6
   11c6c:	movw	r1, #46024	; 0xb3c8
   11c70:	movt	r1, #1
   11c74:	bl	13d04 <__assert_fail@plt+0x2cc0>
   11c78:	mov	r7, r0
   11c7c:	b	11564 <__assert_fail@plt+0x520>
   11c80:	ldr	r2, [sp, #64]	; 0x40
   11c84:	cmp	r3, #0
   11c88:	ldreq	r1, [pc, #556]	; 11ebc <__assert_fail@plt+0xe78>
   11c8c:	ldr	r0, [r2]
   11c90:	beq	11634 <__assert_fail@plt+0x5f0>
   11c94:	b	1162c <__assert_fail@plt+0x5e8>
   11c98:	add	r3, sp, #60	; 0x3c
   11c9c:	str	r3, [sp, #16]
   11ca0:	add	r3, sp, #76	; 0x4c
   11ca4:	str	r3, [sp, #20]
   11ca8:	b	116f8 <__assert_fail@plt+0x6b4>
   11cac:	ldr	r3, [sp, #80]	; 0x50
   11cb0:	ldr	r0, [pc, #516]	; 11ebc <__assert_fail@plt+0xe78>
   11cb4:	ldr	r1, [r3]
   11cb8:	bl	12b5c <__assert_fail@plt+0x1b18>
   11cbc:	b	11bfc <__assert_fail@plt+0xbb8>
   11cc0:	cmp	r2, #0
   11cc4:	beq	11734 <__assert_fail@plt+0x6f0>
   11cc8:	mov	r8, #0
   11ccc:	ldr	r3, [sp, #64]	; 0x40
   11cd0:	ldr	r1, [pc, #484]	; 11ebc <__assert_fail@plt+0xe78>
   11cd4:	ldr	r0, [r3]
   11cd8:	bl	12b5c <__assert_fail@plt+0x1b18>
   11cdc:	b	11980 <__assert_fail@plt+0x93c>
   11ce0:	ldr	r2, [sp, #72]	; 0x48
   11ce4:	cmp	r2, #0
   11ce8:	beq	119d0 <__assert_fail@plt+0x98c>
   11cec:	b	11bf4 <__assert_fail@plt+0xbb0>
   11cf0:	add	r1, sp, #56	; 0x38
   11cf4:	mov	r0, sl
   11cf8:	str	r3, [sp, #56]	; 0x38
   11cfc:	bl	1301c <__assert_fail@plt+0x1fd8>
   11d00:	b	11650 <__assert_fail@plt+0x60c>
   11d04:	mov	r3, #0
   11d08:	add	r1, sp, #72	; 0x48
   11d0c:	mov	r0, r7
   11d10:	str	r3, [sp, #72]	; 0x48
   11d14:	bl	13298 <__assert_fail@plt+0x2254>
   11d18:	b	1165c <__assert_fail@plt+0x618>
   11d1c:	mov	r0, r5
   11d20:	bl	13514 <__assert_fail@plt+0x24d0>
   11d24:	movw	r1, #42892	; 0xa78c
   11d28:	movt	r1, #1
   11d2c:	mov	r2, #5
   11d30:	mov	r0, #0
   11d34:	bl	10e40 <dcgettext@plt>
   11d38:	mov	r4, r0
   11d3c:	ldr	r0, [r5]
   11d40:	bl	17b8c <__assert_fail@plt+0x6b48>
   11d44:	mov	r3, r0
   11d48:	mov	r2, r4
   11d4c:	mov	r1, #0
   11d50:	mov	r0, #1
   11d54:	bl	10eac <error@plt>
   11d58:	bl	10f48 <__errno_location@plt>
   11d5c:	ldr	r6, [r0]
   11d60:	mov	r1, #3
   11d64:	mov	r0, r5
   11d68:	ldr	r2, [r4, #64]	; 0x40
   11d6c:	bl	173e0 <__assert_fail@plt+0x639c>
   11d70:	mov	r3, r0
   11d74:	movw	r2, #46100	; 0xb414
   11d78:	movt	r2, #1
   11d7c:	mov	r1, r6
   11d80:	mov	r0, #1
   11d84:	bl	10eac <error@plt>
   11d88:	movw	r1, #45848	; 0xb318
   11d8c:	movt	r1, #1
   11d90:	mov	r2, #5
   11d94:	mov	r0, #0
   11d98:	bl	10e40 <dcgettext@plt>
   11d9c:	mov	r2, r0
   11da0:	mov	r1, #0
   11da4:	mov	r0, #1
   11da8:	bl	10eac <error@plt>
   11dac:	movw	r1, #45628	; 0xb23c
   11db0:	movt	r1, #1
   11db4:	b	11d90 <__assert_fail@plt+0xd4c>
   11db8:	bl	10f48 <__errno_location@plt>
   11dbc:	ldr	r4, [r0]
   11dc0:	mov	r2, #5
   11dc4:	movw	r1, #45812	; 0xb2f4
   11dc8:	movt	r1, #1
   11dcc:	mov	r0, #0
   11dd0:	bl	10e40 <dcgettext@plt>
   11dd4:	mov	r2, r0
   11dd8:	mov	r0, #1
   11ddc:	mov	r1, r4
   11de0:	bl	10eac <error@plt>
   11de4:	bl	10f48 <__errno_location@plt>
   11de8:	ldr	r2, [r4, #64]	; 0x40
   11dec:	mov	r1, #3
   11df0:	ldr	r5, [r0]
   11df4:	mov	r0, r7
   11df8:	bl	173e0 <__assert_fail@plt+0x639c>
   11dfc:	mov	r3, r0
   11e00:	movw	r2, #46100	; 0xb414
   11e04:	movt	r2, #1
   11e08:	mov	r1, r5
   11e0c:	mov	r0, #1
   11e10:	bl	10eac <error@plt>
   11e14:	bl	10f48 <__errno_location@plt>
   11e18:	mov	r1, #3
   11e1c:	ldr	r5, [r0]
   11e20:	mov	r0, #0
   11e24:	ldr	r2, [r4, #60]	; 0x3c
   11e28:	b	11df8 <__assert_fail@plt+0xdb4>
   11e2c:	movw	r1, #45684	; 0xb274
   11e30:	movt	r1, #1
   11e34:	b	11d2c <__assert_fail@plt+0xce8>
   11e38:	movw	r1, #45708	; 0xb28c
   11e3c:	movt	r1, #1
   11e40:	b	11d90 <__assert_fail@plt+0xd4c>
   11e44:	cmp	r5, #0
   11e48:	bne	11e74 <__assert_fail@plt+0xe30>
   11e4c:	mov	r2, #5
   11e50:	mov	r0, r5
   11e54:	movw	r1, #45764	; 0xb2c4
   11e58:	movt	r1, #1
   11e5c:	bl	10e40 <dcgettext@plt>
   11e60:	mov	r2, r0
   11e64:	mov	r1, r5
   11e68:	mov	r0, r5
   11e6c:	bl	10eac <error@plt>
   11e70:	b	11248 <__assert_fail@plt+0x204>
   11e74:	mov	r2, #5
   11e78:	movw	r1, #45780	; 0xb2d4
   11e7c:	movt	r1, #1
   11e80:	mov	r0, #0
   11e84:	bl	10e40 <dcgettext@plt>
   11e88:	sub	r7, r7, #-1073741823	; 0xc0000001
   11e8c:	mov	r4, r0
   11e90:	ldr	r0, [r6, r7, lsl #2]
   11e94:	bl	17b8c <__assert_fail@plt+0x6b48>
   11e98:	mov	r1, #0
   11e9c:	mov	r3, r0
   11ea0:	mov	r2, r4
   11ea4:	mov	r0, r1
   11ea8:	bl	10eac <error@plt>
   11eac:	b	11248 <__assert_fail@plt+0x204>
   11eb0:	andeq	sl, r1, r8, ror #13
   11eb4:	andeq	ip, r2, ip, lsl #2
   11eb8:	andeq	ip, r2, r0, lsl r1
   11ebc:	ldrdeq	ip, [r2], -r8
   11ec0:	mov	fp, #0
   11ec4:	mov	lr, #0
   11ec8:	pop	{r1}		; (ldr r1, [sp], #4)
   11ecc:	mov	r2, sp
   11ed0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ed4:	push	{r0}		; (str r0, [sp, #-4]!)
   11ed8:	ldr	ip, [pc, #16]	; 11ef0 <__assert_fail@plt+0xeac>
   11edc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ee0:	ldr	r0, [pc, #12]	; 11ef4 <__assert_fail@plt+0xeb0>
   11ee4:	ldr	r3, [pc, #12]	; 11ef8 <__assert_fail@plt+0xeb4>
   11ee8:	bl	10ed0 <__libc_start_main@plt>
   11eec:	bl	1102c <abort@plt>
   11ef0:	andeq	sl, r1, r8, lsl #13
   11ef4:	andeq	r1, r1, r0, asr r0
   11ef8:	andeq	sl, r1, r8, lsr #12
   11efc:	ldr	r3, [pc, #20]	; 11f18 <__assert_fail@plt+0xed4>
   11f00:	ldr	r2, [pc, #20]	; 11f1c <__assert_fail@plt+0xed8>
   11f04:	add	r3, pc, r3
   11f08:	ldr	r2, [r3, r2]
   11f0c:	cmp	r2, #0
   11f10:	bxeq	lr
   11f14:	b	10ef4 <__gmon_start__@plt>
   11f18:	strdeq	sl, [r1], -r4
   11f1c:	strdeq	r0, [r0], -r4
   11f20:	ldr	r0, [pc, #24]	; 11f40 <__assert_fail@plt+0xefc>
   11f24:	ldr	r3, [pc, #24]	; 11f44 <__assert_fail@plt+0xf00>
   11f28:	cmp	r3, r0
   11f2c:	bxeq	lr
   11f30:	ldr	r3, [pc, #16]	; 11f48 <__assert_fail@plt+0xf04>
   11f34:	cmp	r3, #0
   11f38:	bxeq	lr
   11f3c:	bx	r3
   11f40:	andeq	ip, r2, ip, asr r1
   11f44:	andeq	ip, r2, ip, asr r1
   11f48:	andeq	r0, r0, r0
   11f4c:	ldr	r0, [pc, #36]	; 11f78 <__assert_fail@plt+0xf34>
   11f50:	ldr	r1, [pc, #36]	; 11f7c <__assert_fail@plt+0xf38>
   11f54:	sub	r1, r1, r0
   11f58:	asr	r1, r1, #2
   11f5c:	add	r1, r1, r1, lsr #31
   11f60:	asrs	r1, r1, #1
   11f64:	bxeq	lr
   11f68:	ldr	r3, [pc, #16]	; 11f80 <__assert_fail@plt+0xf3c>
   11f6c:	cmp	r3, #0
   11f70:	bxeq	lr
   11f74:	bx	r3
   11f78:	andeq	ip, r2, ip, asr r1
   11f7c:	andeq	ip, r2, ip, asr r1
   11f80:	andeq	r0, r0, r0
   11f84:	push	{r4, lr}
   11f88:	ldr	r4, [pc, #24]	; 11fa8 <__assert_fail@plt+0xf64>
   11f8c:	ldrb	r3, [r4]
   11f90:	cmp	r3, #0
   11f94:	popne	{r4, pc}
   11f98:	bl	11f20 <__assert_fail@plt+0xedc>
   11f9c:	mov	r3, #1
   11fa0:	strb	r3, [r4]
   11fa4:	pop	{r4, pc}
   11fa8:	andeq	ip, r2, r4, lsl #3
   11fac:	b	11f4c <__assert_fail@plt+0xf08>
   11fb0:	strd	r4, [sp, #-12]!
   11fb4:	ldr	r5, [r0]
   11fb8:	str	lr, [sp, #8]
   11fbc:	sub	sp, sp, #12
   11fc0:	cmp	r5, r1
   11fc4:	cmnne	r5, #1
   11fc8:	bne	11fe0 <__assert_fail@plt+0xf9c>
   11fcc:	str	r1, [r0]
   11fd0:	add	sp, sp, #12
   11fd4:	ldrd	r4, [sp]
   11fd8:	add	sp, sp, #8
   11fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   11fe0:	mov	r4, r1
   11fe4:	mov	r2, #5
   11fe8:	movw	r1, #42856	; 0xa768
   11fec:	movt	r1, #1
   11ff0:	mov	r0, #0
   11ff4:	add	r4, r4, #1
   11ff8:	bl	10e40 <dcgettext@plt>
   11ffc:	mov	r2, r0
   12000:	add	r3, r5, #1
   12004:	str	r4, [sp]
   12008:	mov	r1, #0
   1200c:	mov	r0, #1
   12010:	bl	10eac <error@plt>
   12014:	movw	ip, #44420	; 0xad84
   12018:	movt	ip, #1
   1201c:	strd	r4, [sp, #-12]!
   12020:	str	lr, [sp, #8]
   12024:	sub	sp, sp, #20
   12028:	mov	r2, #10
   1202c:	mov	r1, #0
   12030:	add	r3, sp, #8
   12034:	str	ip, [sp]
   12038:	mov	r4, r0
   1203c:	bl	19264 <__assert_fail@plt+0x8220>
   12040:	cmp	r0, #1
   12044:	beq	12068 <__assert_fail@plt+0x1024>
   12048:	cmp	r0, #0
   1204c:	bne	12088 <__assert_fail@plt+0x1044>
   12050:	ldrd	r0, [sp, #8]
   12054:	mov	r3, #0
   12058:	mvn	r2, #0
   1205c:	cmp	r1, r3
   12060:	cmpeq	r0, r2
   12064:	bls	1207c <__assert_fail@plt+0x1038>
   12068:	mvn	r0, #1
   1206c:	add	sp, sp, #20
   12070:	ldrd	r4, [sp]
   12074:	add	sp, sp, #8
   12078:	pop	{pc}		; (ldr pc, [sp], #4)
   1207c:	orrs	r3, r0, r1
   12080:	subne	r0, r0, #1
   12084:	bne	1206c <__assert_fail@plt+0x1028>
   12088:	mov	r2, #5
   1208c:	movw	r1, #42892	; 0xa78c
   12090:	movt	r1, #1
   12094:	mov	r0, #0
   12098:	bl	10e40 <dcgettext@plt>
   1209c:	mov	r5, r0
   120a0:	mov	r0, r4
   120a4:	bl	17b8c <__assert_fail@plt+0x6b48>
   120a8:	mov	r3, r0
   120ac:	mov	r2, r5
   120b0:	mov	r1, #0
   120b4:	mov	r0, #1
   120b8:	bl	10eac <error@plt>
   120bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   120c0:	mov	r5, r0
   120c4:	strd	r6, [sp, #8]
   120c8:	movw	r7, #42920	; 0xa7a8
   120cc:	movt	r7, #1
   120d0:	mov	r6, #0
   120d4:	str	r8, [sp, #16]
   120d8:	str	lr, [sp, #20]
   120dc:	b	12120 <__assert_fail@plt+0x10dc>
   120e0:	ldrb	r8, [r5, #1]
   120e4:	cmp	r8, #0
   120e8:	bne	121b4 <__assert_fail@plt+0x1170>
   120ec:	mov	r5, r8
   120f0:	mov	r0, #12
   120f4:	bl	18530 <__assert_fail@plt+0x74ec>
   120f8:	movw	r3, #49408	; 0xc100
   120fc:	movt	r3, #2
   12100:	stm	r0, {r5, r8}
   12104:	ldr	r2, [r3]
   12108:	cmp	r4, #0
   1210c:	str	r0, [r3]
   12110:	str	r6, [r0, #8]
   12114:	str	r0, [r2, #8]
   12118:	beq	1216c <__assert_fail@plt+0x1128>
   1211c:	mov	r5, r4
   12120:	mov	r1, r7
   12124:	mov	r0, r5
   12128:	bl	11008 <strpbrk@plt>
   1212c:	subs	r4, r0, #0
   12130:	strbne	r6, [r4], #1
   12134:	ldrb	r3, [r5]
   12138:	cmp	r3, #48	; 0x30
   1213c:	beq	120e0 <__assert_fail@plt+0x109c>
   12140:	bcc	12180 <__assert_fail@plt+0x113c>
   12144:	cmp	r3, #50	; 0x32
   12148:	bhi	12180 <__assert_fail@plt+0x113c>
   1214c:	ldrb	r2, [r5, #1]
   12150:	cmp	r2, #46	; 0x2e
   12154:	bne	121b4 <__assert_fail@plt+0x1170>
   12158:	add	r0, r5, #2
   1215c:	sub	r5, r3, #48	; 0x30
   12160:	bl	12014 <__assert_fail@plt+0xfd0>
   12164:	mov	r8, r0
   12168:	b	120f0 <__assert_fail@plt+0x10ac>
   1216c:	ldrd	r4, [sp]
   12170:	ldrd	r6, [sp, #8]
   12174:	ldr	r8, [sp, #16]
   12178:	add	sp, sp, #20
   1217c:	pop	{pc}		; (ldr pc, [sp], #4)
   12180:	movw	r1, #42952	; 0xa7c8
   12184:	movt	r1, #1
   12188:	mov	r2, #5
   1218c:	mov	r0, #0
   12190:	bl	10e40 <dcgettext@plt>
   12194:	mov	r4, r0
   12198:	mov	r0, r5
   1219c:	bl	17b8c <__assert_fail@plt+0x6b48>
   121a0:	mov	r3, r0
   121a4:	mov	r2, r4
   121a8:	mov	r1, #0
   121ac:	mov	r0, #1
   121b0:	bl	10eac <error@plt>
   121b4:	movw	r1, #42924	; 0xa7ac
   121b8:	movt	r1, #1
   121bc:	b	12188 <__assert_fail@plt+0x1144>
   121c0:	strd	r4, [sp, #-16]!
   121c4:	ldr	ip, [sp, #16]
   121c8:	str	r6, [sp, #8]
   121cc:	str	lr, [sp, #12]
   121d0:	ldr	lr, [sp, #20]
   121d4:	cmp	ip, r0
   121d8:	bcs	12260 <__assert_fail@plt+0x121c>
   121dc:	ldr	r1, [r1]
   121e0:	cmp	lr, r2
   121e4:	add	r2, r1, ip, lsl #3
   121e8:	ldr	r0, [r1, ip, lsl #3]
   121ec:	ldr	r5, [r2, #4]
   121f0:	bcs	1229c <__assert_fail@plt+0x1258>
   121f4:	cmp	r5, #0
   121f8:	ldr	r3, [r3]
   121fc:	add	r2, r3, lr, lsl #3
   12200:	ldr	r1, [r3, lr, lsl #3]
   12204:	ldr	r4, [r2, #4]
   12208:	beq	122c0 <__assert_fail@plt+0x127c>
   1220c:	cmp	r4, #0
   12210:	beq	12304 <__assert_fail@plt+0x12c0>
   12214:	movw	r3, #49544	; 0xc188
   12218:	movt	r3, #2
   1221c:	ldrb	ip, [r3]
   12220:	cmp	ip, #0
   12224:	beq	1227c <__assert_fail@plt+0x1238>
   12228:	cmp	r5, r4
   1222c:	movcc	r2, r5
   12230:	movcs	r2, r4
   12234:	bl	141b0 <__assert_fail@plt+0x316c>
   12238:	cmp	r0, #0
   1223c:	bne	1226c <__assert_fail@plt+0x1228>
   12240:	cmp	r5, r4
   12244:	bcc	122fc <__assert_fail@plt+0x12b8>
   12248:	ldrd	r4, [sp]
   1224c:	movne	r0, #1
   12250:	moveq	r0, #0
   12254:	ldr	r6, [sp, #8]
   12258:	add	sp, sp, #12
   1225c:	pop	{pc}		; (ldr pc, [sp], #4)
   12260:	cmp	lr, r2
   12264:	bcc	122b4 <__assert_fail@plt+0x1270>
   12268:	mov	r0, #0
   1226c:	ldrd	r4, [sp]
   12270:	ldr	r6, [sp, #8]
   12274:	add	sp, sp, #12
   12278:	pop	{pc}		; (ldr pc, [sp], #4)
   1227c:	ldrb	r3, [r3, #1]
   12280:	cmp	r3, #0
   12284:	bne	122dc <__assert_fail@plt+0x1298>
   12288:	cmp	r5, r4
   1228c:	movcc	r2, r5
   12290:	movcs	r2, r4
   12294:	bl	10e28 <memcmp@plt>
   12298:	b	12238 <__assert_fail@plt+0x11f4>
   1229c:	adds	r0, r5, #0
   122a0:	ldrd	r4, [sp]
   122a4:	movne	r0, #1
   122a8:	ldr	r6, [sp, #8]
   122ac:	add	sp, sp, #12
   122b0:	pop	{pc}		; (ldr pc, [sp], #4)
   122b4:	ldr	r3, [r3]
   122b8:	add	lr, r3, lr, lsl #3
   122bc:	ldr	r4, [lr, #4]
   122c0:	adds	r0, r4, #0
   122c4:	movne	r0, #1
   122c8:	ldrd	r4, [sp]
   122cc:	rsb	r0, r0, #0
   122d0:	ldr	r6, [sp, #8]
   122d4:	add	sp, sp, #12
   122d8:	pop	{pc}		; (ldr pc, [sp], #4)
   122dc:	mov	r3, r4
   122e0:	mov	r2, r1
   122e4:	ldr	r6, [sp, #8]
   122e8:	mov	r1, r5
   122ec:	ldrd	r4, [sp]
   122f0:	ldr	lr, [sp, #12]
   122f4:	add	sp, sp, #16
   122f8:	b	18c1c <__assert_fail@plt+0x7bd8>
   122fc:	mvn	r0, #0
   12300:	b	1226c <__assert_fail@plt+0x1228>
   12304:	mov	r0, #1
   12308:	b	1226c <__assert_fail@plt+0x1228>
   1230c:	ldr	r3, [r1]
   12310:	add	r2, r3, r0, lsl #3
   12314:	ldr	r2, [r2, #4]
   12318:	cmp	r2, #0
   1231c:	beq	12338 <__assert_fail@plt+0x12f4>
   12320:	movw	ip, #49532	; 0xc17c
   12324:	movt	ip, #2
   12328:	ldr	r0, [r3, r0, lsl #3]
   1232c:	mov	r1, #1
   12330:	ldr	r3, [ip]
   12334:	b	10e1c <fwrite_unlocked@plt>
   12338:	movw	r3, #49544	; 0xc188
   1233c:	movt	r3, #2
   12340:	ldr	r0, [r3, #4]
   12344:	cmp	r0, #0
   12348:	beq	1235c <__assert_fail@plt+0x1318>
   1234c:	movw	r3, #49532	; 0xc17c
   12350:	movt	r3, #2
   12354:	ldr	r1, [r3]
   12358:	b	10db0 <fputs_unlocked@plt>
   1235c:	bx	lr
   12360:	ldr	r3, [r0]
   12364:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12368:	strd	r6, [sp, #8]
   1236c:	mov	r6, r1
   12370:	str	r8, [sp, #16]
   12374:	str	lr, [sp, #20]
   12378:	cmp	r3, #0
   1237c:	movne	r5, #0
   12380:	movne	r8, r0
   12384:	movne	r7, r5
   12388:	beq	123d0 <__assert_fail@plt+0x138c>
   1238c:	ldr	r3, [r6]
   12390:	ldr	r4, [r3, r5, lsl #2]
   12394:	cmp	r4, #0
   12398:	beq	123ec <__assert_fail@plt+0x13a8>
   1239c:	ldr	r0, [r4, #20]
   123a0:	bl	13db0 <__assert_fail@plt+0x2d6c>
   123a4:	str	r7, [r4, #20]
   123a8:	ldr	r0, [r4, #8]
   123ac:	bl	13db0 <__assert_fail@plt+0x2d6c>
   123b0:	ldr	r3, [r6]
   123b4:	ldr	r0, [r3, r5, lsl #2]
   123b8:	add	r5, r5, #1
   123bc:	str	r7, [r4, #8]
   123c0:	bl	13db0 <__assert_fail@plt+0x2d6c>
   123c4:	ldr	r3, [r8]
   123c8:	cmp	r3, r5
   123cc:	bhi	1238c <__assert_fail@plt+0x1348>
   123d0:	ldr	r0, [r6]
   123d4:	ldrd	r4, [sp]
   123d8:	ldrd	r6, [sp, #8]
   123dc:	ldr	r8, [sp, #16]
   123e0:	ldr	lr, [sp, #20]
   123e4:	add	sp, sp, #24
   123e8:	b	13db0 <__assert_fail@plt+0x2d6c>
   123ec:	mov	r0, r4
   123f0:	add	r5, r5, #1
   123f4:	bl	13db0 <__assert_fail@plt+0x2d6c>
   123f8:	ldr	r3, [r8]
   123fc:	cmp	r5, r3
   12400:	bcc	1238c <__assert_fail@plt+0x1348>
   12404:	b	123d0 <__assert_fail@plt+0x138c>
   12408:	strd	r4, [sp, #-16]!
   1240c:	movw	r4, #49544	; 0xc188
   12410:	movt	r4, #2
   12414:	ldr	r5, [r4, #8]
   12418:	str	r6, [sp, #8]
   1241c:	str	lr, [sp, #12]
   12420:	cmp	r5, #0
   12424:	beq	1244c <__assert_fail@plt+0x1408>
   12428:	mov	r6, #0
   1242c:	ldr	r0, [r5, #20]
   12430:	bl	13db0 <__assert_fail@plt+0x2d6c>
   12434:	str	r6, [r5, #20]
   12438:	ldr	r0, [r5, #8]
   1243c:	bl	13db0 <__assert_fail@plt+0x2d6c>
   12440:	str	r6, [r5, #8]
   12444:	ldr	r0, [r4, #8]
   12448:	bl	13db0 <__assert_fail@plt+0x2d6c>
   1244c:	ldr	r5, [r4, #12]
   12450:	cmp	r5, #0
   12454:	beq	1248c <__assert_fail@plt+0x1448>
   12458:	mov	r6, #0
   1245c:	ldr	r0, [r5, #20]
   12460:	bl	13db0 <__assert_fail@plt+0x2d6c>
   12464:	str	r6, [r5, #20]
   12468:	ldr	r0, [r5, #8]
   1246c:	bl	13db0 <__assert_fail@plt+0x2d6c>
   12470:	ldr	lr, [sp, #12]
   12474:	str	r6, [r5, #8]
   12478:	ldr	r6, [sp, #8]
   1247c:	ldr	r0, [r4, #12]
   12480:	ldrd	r4, [sp]
   12484:	add	sp, sp, #16
   12488:	b	13db0 <__assert_fail@plt+0x2d6c>
   1248c:	ldrd	r4, [sp]
   12490:	ldr	r6, [sp, #8]
   12494:	add	sp, sp, #12
   12498:	pop	{pc}		; (ldr pc, [sp], #4)
   1249c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   124a0:	strd	r6, [sp, #8]
   124a4:	strd	r8, [sp, #16]
   124a8:	movw	r8, #49544	; 0xc188
   124ac:	movt	r8, #2
   124b0:	ldrb	ip, [r8, #16]
   124b4:	strd	sl, [sp, #24]
   124b8:	mov	fp, r0
   124bc:	str	lr, [sp, #32]
   124c0:	sub	sp, sp, #20
   124c4:	str	r1, [sp, #8]
   124c8:	cmp	ip, #0
   124cc:	movne	r7, r2
   124d0:	movw	r2, #49408	; 0xc100
   124d4:	movt	r2, #2
   124d8:	ldreq	r7, [r0, #12]
   124dc:	ldr	r3, [r2, #4]
   124e0:	cmp	r3, #0
   124e4:	str	r3, [sp, #4]
   124e8:	uxtbge	r6, r3
   124ec:	ldr	r3, [sp, #8]
   124f0:	movlt	r6, #32
   124f4:	strlt	r6, [sp, #4]
   124f8:	cmp	r7, r3
   124fc:	movcc	r9, r7
   12500:	movcs	r9, r3
   12504:	cmp	r9, #0
   12508:	beq	1258c <__assert_fail@plt+0x1548>
   1250c:	ldrb	r3, [sp, #4]
   12510:	movw	r5, #49532	; 0xc17c
   12514:	movt	r5, #2
   12518:	add	sl, r0, #20
   1251c:	mov	r4, #0
   12520:	str	r3, [sp, #12]
   12524:	b	12538 <__assert_fail@plt+0x14f4>
   12528:	bl	1230c <__assert_fail@plt+0x12c8>
   1252c:	add	r4, r4, #1
   12530:	cmp	r4, r9
   12534:	beq	1258c <__assert_fail@plt+0x1548>
   12538:	ldr	r0, [r5]
   1253c:	ldr	r3, [r0, #20]
   12540:	ldr	r2, [r0, #24]
   12544:	add	r1, r3, #1
   12548:	cmp	r3, r2
   1254c:	strcc	r1, [r0, #20]
   12550:	strbcc	r6, [r3]
   12554:	bcs	1263c <__assert_fail@plt+0x15f8>
   12558:	ldr	r3, [fp, #12]
   1255c:	mov	r1, sl
   12560:	mov	r0, r4
   12564:	cmp	r3, r4
   12568:	bhi	12528 <__assert_fail@plt+0x14e4>
   1256c:	ldr	r3, [r8, #4]
   12570:	subs	r0, r3, #0
   12574:	beq	1252c <__assert_fail@plt+0x14e8>
   12578:	add	r4, r4, #1
   1257c:	ldr	r1, [r5]
   12580:	bl	10db0 <fputs_unlocked@plt>
   12584:	cmp	r4, r9
   12588:	bne	12538 <__assert_fail@plt+0x14f4>
   1258c:	ldr	r3, [sp, #8]
   12590:	add	r4, r3, #1
   12594:	cmp	r7, r4
   12598:	bls	12614 <__assert_fail@plt+0x15d0>
   1259c:	movw	r5, #49532	; 0xc17c
   125a0:	movt	r5, #2
   125a4:	ldrb	sl, [sp, #4]
   125a8:	add	r9, fp, #20
   125ac:	b	125c0 <__assert_fail@plt+0x157c>
   125b0:	bl	1230c <__assert_fail@plt+0x12c8>
   125b4:	add	r4, r4, #1
   125b8:	cmp	r7, r4
   125bc:	beq	12614 <__assert_fail@plt+0x15d0>
   125c0:	ldr	r0, [r5]
   125c4:	ldr	r3, [r0, #20]
   125c8:	ldr	r2, [r0, #24]
   125cc:	add	r1, r3, #1
   125d0:	cmp	r3, r2
   125d4:	strcc	r1, [r0, #20]
   125d8:	strbcc	r6, [r3]
   125dc:	bcs	12630 <__assert_fail@plt+0x15ec>
   125e0:	ldr	r3, [fp, #12]
   125e4:	mov	r1, r9
   125e8:	mov	r0, r4
   125ec:	cmp	r3, r4
   125f0:	bhi	125b0 <__assert_fail@plt+0x156c>
   125f4:	ldr	r3, [r8, #4]
   125f8:	subs	r0, r3, #0
   125fc:	beq	125b4 <__assert_fail@plt+0x1570>
   12600:	add	r4, r4, #1
   12604:	ldr	r1, [r5]
   12608:	bl	10db0 <fputs_unlocked@plt>
   1260c:	cmp	r7, r4
   12610:	bne	125c0 <__assert_fail@plt+0x157c>
   12614:	add	sp, sp, #20
   12618:	ldrd	r4, [sp]
   1261c:	ldrd	r6, [sp, #8]
   12620:	ldrd	r8, [sp, #16]
   12624:	ldrd	sl, [sp, #24]
   12628:	add	sp, sp, #32
   1262c:	pop	{pc}		; (ldr pc, [sp], #4)
   12630:	mov	r1, sl
   12634:	bl	10fcc <__overflow@plt>
   12638:	b	125e0 <__assert_fail@plt+0x159c>
   1263c:	ldr	r1, [sp, #12]
   12640:	bl	10fcc <__overflow@plt>
   12644:	b	12558 <__assert_fail@plt+0x1514>
   12648:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1264c:	ldr	r5, [r0, #8]
   12650:	strd	r6, [sp, #8]
   12654:	strd	r8, [sp, #16]
   12658:	ldr	r8, [r0, #4]
   1265c:	strd	sl, [sp, #24]
   12660:	str	lr, [sp, #32]
   12664:	sub	sp, sp, #20
   12668:	sub	r8, r8, #1
   1266c:	add	sl, r5, r8
   12670:	cmp	r5, sl
   12674:	beq	1276c <__assert_fail@plt+0x1728>
   12678:	movw	r3, #49408	; 0xc100
   1267c:	movt	r3, #2
   12680:	ldr	fp, [r3, #4]
   12684:	mov	r6, r0
   12688:	str	r3, [sp, #8]
   1268c:	mvn	r2, fp
   12690:	cmp	fp, #10
   12694:	lsr	r2, r2, #31
   12698:	moveq	r2, #0
   1269c:	cmp	r2, #0
   126a0:	beq	12734 <__assert_fail@plt+0x16f0>
   126a4:	mov	r3, r0
   126a8:	ldr	r4, [r0, #12]
   126ac:	ldr	r2, [r3, #16]!
   126b0:	ldr	r7, [r0, #20]
   126b4:	str	r2, [sp, #4]
   126b8:	str	r3, [sp, #12]
   126bc:	b	126d8 <__assert_fail@plt+0x1694>
   126c0:	add	r2, r7, r4, lsl #3
   126c4:	str	r5, [r7, r4, lsl #3]
   126c8:	add	r4, r4, #1
   126cc:	add	r5, r9, #1
   126d0:	str	r8, [r2, #4]
   126d4:	str	r4, [r6, #12]
   126d8:	sub	r8, sl, r5
   126dc:	mov	r1, fp
   126e0:	mov	r2, r8
   126e4:	mov	r0, r5
   126e8:	bl	10f90 <memchr@plt>
   126ec:	subs	r9, r0, #0
   126f0:	beq	1274c <__assert_fail@plt+0x1708>
   126f4:	ldr	r3, [sp, #4]
   126f8:	sub	r8, r9, r5
   126fc:	cmp	r4, r3
   12700:	bcc	126c0 <__assert_fail@plt+0x167c>
   12704:	mov	r0, r7
   12708:	mov	r2, #8
   1270c:	ldr	r1, [sp, #12]
   12710:	bl	18784 <__assert_fail@plt+0x7740>
   12714:	ldr	r3, [sp, #8]
   12718:	mov	r7, r0
   1271c:	str	r0, [r6, #20]
   12720:	ldr	r4, [r6, #12]
   12724:	ldr	fp, [r3, #4]
   12728:	ldr	r3, [r6, #16]
   1272c:	str	r3, [sp, #4]
   12730:	b	126c0 <__assert_fail@plt+0x167c>
   12734:	cmp	fp, #0
   12738:	blt	127a8 <__assert_fail@plt+0x1764>
   1273c:	ldr	r4, [r0, #12]
   12740:	ldr	r3, [r0, #16]
   12744:	ldr	r7, [r0, #20]
   12748:	str	r3, [sp, #4]
   1274c:	ldr	r3, [sp, #4]
   12750:	cmp	r4, r3
   12754:	bcs	12788 <__assert_fail@plt+0x1744>
   12758:	add	r3, r7, r4, lsl #3
   1275c:	str	r5, [r7, r4, lsl #3]
   12760:	add	r4, r4, #1
   12764:	str	r8, [r3, #4]
   12768:	str	r4, [r6, #12]
   1276c:	add	sp, sp, #20
   12770:	ldrd	r4, [sp]
   12774:	ldrd	r6, [sp, #8]
   12778:	ldrd	r8, [sp, #16]
   1277c:	ldrd	sl, [sp, #24]
   12780:	add	sp, sp, #32
   12784:	pop	{pc}		; (ldr pc, [sp], #4)
   12788:	mov	r0, r7
   1278c:	mov	r2, #8
   12790:	add	r1, r6, #16
   12794:	bl	18784 <__assert_fail@plt+0x7740>
   12798:	mov	r7, r0
   1279c:	str	r0, [r6, #20]
   127a0:	ldr	r4, [r6, #12]
   127a4:	b	12758 <__assert_fail@plt+0x1714>
   127a8:	bl	10f0c <__ctype_b_loc@plt>
   127ac:	mov	fp, r0
   127b0:	ldr	r1, [r0]
   127b4:	b	127c4 <__assert_fail@plt+0x1780>
   127b8:	cmp	sl, r8
   127bc:	mov	r5, r8
   127c0:	beq	1276c <__assert_fail@plt+0x1728>
   127c4:	mov	r8, r5
   127c8:	ldrb	r2, [r8], #1
   127cc:	lsl	r3, r2, #1
   127d0:	ldrh	r3, [r1, r3]
   127d4:	cmp	r2, #10
   127d8:	orreq	r3, r3, #1
   127dc:	tst	r3, #1
   127e0:	bne	127b8 <__assert_fail@plt+0x1774>
   127e4:	mov	r9, r6
   127e8:	ldr	r4, [r6, #12]
   127ec:	ldr	r7, [r6, #20]
   127f0:	ldr	r2, [r9, #16]!
   127f4:	mov	r0, r7
   127f8:	cmp	sl, r8
   127fc:	beq	12928 <__assert_fail@plt+0x18e4>
   12800:	ldrb	ip, [r5, #1]
   12804:	lsl	r3, ip, #1
   12808:	ldrh	r3, [r1, r3]
   1280c:	cmp	ip, #10
   12810:	orreq	r3, r3, #1
   12814:	tst	r3, #1
   12818:	beq	1289c <__assert_fail@plt+0x1858>
   1281c:	cmp	r2, r4
   12820:	bls	128fc <__assert_fail@plt+0x18b8>
   12824:	add	r3, r0, r4, lsl #3
   12828:	mov	r1, #1
   1282c:	str	r5, [r0, r4, lsl #3]
   12830:	add	r4, r4, #1
   12834:	str	r1, [r3, #4]
   12838:	str	r4, [r6, #12]
   1283c:	add	r5, r8, #1
   12840:	cmp	sl, r5
   12844:	beq	12918 <__assert_fail@plt+0x18d4>
   12848:	ldrb	ip, [r8, #1]
   1284c:	ldr	r1, [fp]
   12850:	lsl	r3, ip, #1
   12854:	ldrh	r3, [r1, r3]
   12858:	cmp	ip, #10
   1285c:	orreq	r3, r3, #1
   12860:	tst	r3, #1
   12864:	addne	r8, r8, #2
   12868:	beq	12894 <__assert_fail@plt+0x1850>
   1286c:	cmp	sl, r8
   12870:	mov	r5, r8
   12874:	beq	12918 <__assert_fail@plt+0x18d4>
   12878:	ldrb	ip, [r8], #1
   1287c:	lsl	r3, ip, #1
   12880:	ldrh	r3, [r1, r3]
   12884:	cmp	ip, #10
   12888:	orreq	r3, r3, #1
   1288c:	tst	r3, #1
   12890:	bne	1286c <__assert_fail@plt+0x1828>
   12894:	add	r8, r5, #1
   12898:	b	127f8 <__assert_fail@plt+0x17b4>
   1289c:	add	ip, r5, #2
   128a0:	cmp	sl, ip
   128a4:	mov	r8, ip
   128a8:	beq	1294c <__assert_fail@plt+0x1908>
   128ac:	ldrb	lr, [ip]
   128b0:	add	ip, r8, #1
   128b4:	lsl	r3, lr, #1
   128b8:	ldrh	r3, [r1, r3]
   128bc:	cmp	lr, #10
   128c0:	orreq	r3, r3, #1
   128c4:	tst	r3, #1
   128c8:	beq	128a0 <__assert_fail@plt+0x185c>
   128cc:	sub	r7, r8, r5
   128d0:	cmp	r2, r4
   128d4:	bls	12900 <__assert_fail@plt+0x18bc>
   128d8:	add	r3, r0, r4, lsl #3
   128dc:	str	r5, [r0, r4, lsl #3]
   128e0:	add	r4, r4, #1
   128e4:	cmp	sl, r8
   128e8:	str	r7, [r3, #4]
   128ec:	str	r4, [r6, #12]
   128f0:	beq	1276c <__assert_fail@plt+0x1728>
   128f4:	ldr	r2, [r6, #16]
   128f8:	b	1283c <__assert_fail@plt+0x17f8>
   128fc:	mov	r7, #1
   12900:	mov	r2, #8
   12904:	mov	r1, r9
   12908:	bl	18784 <__assert_fail@plt+0x7740>
   1290c:	str	r0, [r6, #20]
   12910:	ldr	r4, [r6, #12]
   12914:	b	128d8 <__assert_fail@plt+0x1894>
   12918:	mov	r7, r0
   1291c:	mov	r8, #0
   12920:	str	r2, [sp, #4]
   12924:	b	1274c <__assert_fail@plt+0x1708>
   12928:	cmp	r2, r4
   1292c:	bls	128fc <__assert_fail@plt+0x18b8>
   12930:	add	r2, r0, r4, lsl #3
   12934:	add	r3, r4, #1
   12938:	mov	r1, #1
   1293c:	str	r5, [r0, r4, lsl #3]
   12940:	str	r1, [r2, #4]
   12944:	str	r3, [r6, #12]
   12948:	b	1276c <__assert_fail@plt+0x1728>
   1294c:	sub	r7, sl, r5
   12950:	b	128d0 <__assert_fail@plt+0x188c>
   12954:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12958:	movw	r4, #49544	; 0xc188
   1295c:	movt	r4, #2
   12960:	ldr	r5, [r1]
   12964:	ldr	r3, [r4, #24]
   12968:	strd	r6, [sp, #8]
   1296c:	mov	r6, r1
   12970:	mov	r7, r0
   12974:	str	r8, [sp, #16]
   12978:	str	lr, [sp, #20]
   1297c:	sub	sp, sp, #16
   12980:	cmp	r5, r3
   12984:	beq	12b00 <__assert_fail@plt+0x1abc>
   12988:	cmp	r5, #0
   1298c:	beq	12b18 <__assert_fail@plt+0x1ad4>
   12990:	mov	r3, #0
   12994:	str	r3, [r5, #12]
   12998:	movw	r6, #49408	; 0xc100
   1299c:	movt	r6, #2
   129a0:	ldrb	r2, [r6, #8]
   129a4:	mov	r1, r7
   129a8:	mov	r0, r5
   129ac:	bl	1407c <__assert_fail@plt+0x3038>
   129b0:	subs	r8, r0, #0
   129b4:	beq	12ad4 <__assert_fail@plt+0x1a90>
   129b8:	ldr	r3, [r4, #40]	; 0x28
   129bc:	mov	r0, r5
   129c0:	ldr	r2, [r4, #44]	; 0x2c
   129c4:	adds	r3, r3, #1
   129c8:	adc	r2, r2, #0
   129cc:	str	r3, [r4, #40]	; 0x28
   129d0:	str	r2, [r4, #44]	; 0x2c
   129d4:	bl	12648 <__assert_fail@plt+0x1604>
   129d8:	ldr	r0, [r4, #24]
   129dc:	cmp	r0, #0
   129e0:	beq	12ab4 <__assert_fail@plt+0x1a70>
   129e4:	ldr	r3, [r4, #48]	; 0x30
   129e8:	cmp	r3, #2
   129ec:	beq	12ab4 <__assert_fail@plt+0x1a70>
   129f0:	cmp	r3, #1
   129f4:	beq	12a04 <__assert_fail@plt+0x19c0>
   129f8:	ldrb	r3, [r4, #52]	; 0x34
   129fc:	cmp	r3, #0
   12a00:	beq	12ab4 <__assert_fail@plt+0x1a70>
   12a04:	ldrb	r3, [r4, #57]	; 0x39
   12a08:	cmp	r3, #0
   12a0c:	bne	12ab4 <__assert_fail@plt+0x1a70>
   12a10:	ldr	ip, [r6, #12]
   12a14:	add	r1, r0, #20
   12a18:	add	r3, r5, #20
   12a1c:	ldr	r0, [r0, #12]
   12a20:	ldr	r2, [r5, #12]
   12a24:	str	ip, [sp]
   12a28:	str	ip, [sp, #4]
   12a2c:	bl	121c0 <__assert_fail@plt+0x117c>
   12a30:	cmp	r0, #0
   12a34:	ble	12ab4 <__assert_fail@plt+0x1a70>
   12a38:	ldr	r6, [r5, #4]
   12a3c:	cmp	r6, #0
   12a40:	beq	12a60 <__assert_fail@plt+0x1a1c>
   12a44:	ldr	r2, [r5, #8]
   12a48:	sub	r3, r6, #1
   12a4c:	ldrb	r2, [r2, r3]
   12a50:	cmp	r2, #10
   12a54:	moveq	r6, r3
   12a58:	cmp	r6, #0
   12a5c:	mvnlt	r6, #-2147483648	; 0x80000000
   12a60:	ldr	r7, [r4, #48]	; 0x30
   12a64:	mov	r2, #5
   12a68:	movw	r1, #43004	; 0xa7fc
   12a6c:	movt	r1, #1
   12a70:	mov	r0, #0
   12a74:	bl	10e40 <dcgettext@plt>
   12a78:	mov	r2, r0
   12a7c:	ldr	r3, [r5, #8]
   12a80:	mov	r1, #0
   12a84:	str	r6, [sp, #8]
   12a88:	sub	r7, r7, #1
   12a8c:	clz	r7, r7
   12a90:	lsr	r7, r7, #5
   12a94:	mov	r0, r7
   12a98:	ldrd	r6, [r4, #40]	; 0x28
   12a9c:	str	r3, [sp, #12]
   12aa0:	ldr	r3, [r4, #64]	; 0x40
   12aa4:	strd	r6, [sp]
   12aa8:	bl	10eac <error@plt>
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [r4, #57]	; 0x39
   12ab4:	mov	r0, #1
   12ab8:	str	r5, [r4, #24]
   12abc:	add	sp, sp, #16
   12ac0:	ldrd	r4, [sp]
   12ac4:	ldrd	r6, [sp, #8]
   12ac8:	ldr	r8, [sp, #16]
   12acc:	add	sp, sp, #20
   12ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ad4:	ldr	r4, [r7]
   12ad8:	ands	r4, r4, #32
   12adc:	bne	12b30 <__assert_fail@plt+0x1aec>
   12ae0:	ldr	r0, [r5, #20]
   12ae4:	bl	13db0 <__assert_fail@plt+0x2d6c>
   12ae8:	str	r4, [r5, #20]
   12aec:	ldr	r0, [r5, #8]
   12af0:	bl	13db0 <__assert_fail@plt+0x2d6c>
   12af4:	mov	r0, r4
   12af8:	str	r4, [r5, #8]
   12afc:	b	12abc <__assert_fail@plt+0x1a78>
   12b00:	ldr	r3, [r4, #12]
   12b04:	str	r5, [r4, #12]
   12b08:	mov	r5, r3
   12b0c:	str	r3, [r1]
   12b10:	cmp	r5, #0
   12b14:	bne	12990 <__assert_fail@plt+0x194c>
   12b18:	mov	r1, #24
   12b1c:	mov	r0, #1
   12b20:	bl	18974 <__assert_fail@plt+0x7930>
   12b24:	mov	r5, r0
   12b28:	str	r0, [r6]
   12b2c:	b	12998 <__assert_fail@plt+0x1954>
   12b30:	bl	10f48 <__errno_location@plt>
   12b34:	ldr	r4, [r0]
   12b38:	mov	r2, #5
   12b3c:	movw	r1, #42992	; 0xa7f0
   12b40:	movt	r1, #1
   12b44:	mov	r0, r8
   12b48:	bl	10e40 <dcgettext@plt>
   12b4c:	mov	r2, r0
   12b50:	mov	r0, #1
   12b54:	mov	r1, r4
   12b58:	bl	10eac <error@plt>
   12b5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12b60:	strd	r6, [sp, #8]
   12b64:	movw	r7, #49408	; 0xc100
   12b68:	movt	r7, #2
   12b6c:	movw	r6, #49544	; 0xc188
   12b70:	movt	r6, #2
   12b74:	strd	r8, [sp, #16]
   12b78:	strd	sl, [sp, #24]
   12b7c:	mov	r8, r0
   12b80:	mov	fp, r1
   12b84:	ldr	sl, [r7, #4]
   12b88:	add	r3, r6, #80	; 0x50
   12b8c:	str	lr, [sp, #32]
   12b90:	sub	sp, sp, #4
   12b94:	ldr	r4, [r6, #76]	; 0x4c
   12b98:	cmp	sl, #0
   12b9c:	movlt	r9, #32
   12ba0:	uxtbge	r9, sl
   12ba4:	movlt	sl, r9
   12ba8:	cmp	r4, #0
   12bac:	beq	12d44 <__assert_fail@plt+0x1d00>
   12bb0:	cmp	r0, r3
   12bb4:	movw	r5, #49532	; 0xc17c
   12bb8:	movt	r5, #2
   12bbc:	uxtb	sl, sl
   12bc0:	bne	12cc4 <__assert_fail@plt+0x1c80>
   12bc4:	ldr	r1, [r4]
   12bc8:	cmp	r1, #0
   12bcc:	bne	12c30 <__assert_fail@plt+0x1bec>
   12bd0:	mov	r1, fp
   12bd4:	ldr	r0, [r7, #12]
   12bd8:	ldr	r3, [r1, #12]
   12bdc:	cmp	r0, r3
   12be0:	bcs	12c4c <__assert_fail@plt+0x1c08>
   12be4:	add	r1, r1, #20
   12be8:	bl	1230c <__assert_fail@plt+0x12c8>
   12bec:	ldr	r3, [r5]
   12bf0:	ldr	r4, [r4, #8]
   12bf4:	ldr	r2, [r3, #20]
   12bf8:	ldr	r1, [r3, #24]
   12bfc:	cmp	r4, #0
   12c00:	beq	12cfc <__assert_fail@plt+0x1cb8>
   12c04:	cmp	r2, r1
   12c08:	addcc	r1, r2, #1
   12c0c:	strcc	r1, [r3, #20]
   12c10:	strbcc	r9, [r2]
   12c14:	bcc	12bc4 <__assert_fail@plt+0x1b80>
   12c18:	mov	r1, sl
   12c1c:	mov	r0, r3
   12c20:	bl	10fcc <__overflow@plt>
   12c24:	ldr	r1, [r4]
   12c28:	cmp	r1, #0
   12c2c:	beq	12bd0 <__assert_fail@plt+0x1b8c>
   12c30:	cmp	r1, #1
   12c34:	ldr	r0, [r4, #4]
   12c38:	moveq	r1, r8
   12c3c:	movne	r1, fp
   12c40:	ldr	r3, [r1, #12]
   12c44:	cmp	r0, r3
   12c48:	bcc	12be4 <__assert_fail@plt+0x1ba0>
   12c4c:	ldr	r0, [r6, #4]
   12c50:	ldr	r3, [r5]
   12c54:	cmp	r0, #0
   12c58:	beq	12bf0 <__assert_fail@plt+0x1bac>
   12c5c:	mov	r1, r3
   12c60:	bl	10db0 <fputs_unlocked@plt>
   12c64:	ldr	r3, [r5]
   12c68:	b	12bf0 <__assert_fail@plt+0x1bac>
   12c6c:	mov	r1, r8
   12c70:	ldr	r0, [r7, #16]
   12c74:	ldr	r3, [r1, #12]
   12c78:	cmp	r3, r0
   12c7c:	bhi	12cec <__assert_fail@plt+0x1ca8>
   12c80:	ldr	r0, [r6, #4]
   12c84:	ldr	r3, [r5]
   12c88:	cmp	r0, #0
   12c8c:	beq	12c9c <__assert_fail@plt+0x1c58>
   12c90:	mov	r1, r3
   12c94:	bl	10db0 <fputs_unlocked@plt>
   12c98:	ldr	r3, [r5]
   12c9c:	ldr	r4, [r4, #8]
   12ca0:	ldr	r2, [r3, #20]
   12ca4:	ldr	r1, [r3, #24]
   12ca8:	cmp	r4, #0
   12cac:	beq	12cfc <__assert_fail@plt+0x1cb8>
   12cb0:	cmp	r1, r2
   12cb4:	bls	12d34 <__assert_fail@plt+0x1cf0>
   12cb8:	add	r1, r2, #1
   12cbc:	str	r1, [r3, #20]
   12cc0:	strb	r9, [r2]
   12cc4:	ldr	r1, [r4]
   12cc8:	cmp	r1, #0
   12ccc:	beq	12c6c <__assert_fail@plt+0x1c28>
   12cd0:	cmp	r1, #1
   12cd4:	ldr	r0, [r4, #4]
   12cd8:	movne	r1, fp
   12cdc:	moveq	r1, r8
   12ce0:	ldr	r3, [r1, #12]
   12ce4:	cmp	r3, r0
   12ce8:	bls	12c80 <__assert_fail@plt+0x1c3c>
   12cec:	add	r1, r1, #20
   12cf0:	bl	1230c <__assert_fail@plt+0x12c8>
   12cf4:	ldr	r3, [r5]
   12cf8:	b	12c9c <__assert_fail@plt+0x1c58>
   12cfc:	cmp	r1, r2
   12d00:	ldrb	r1, [r7, #8]
   12d04:	movls	r0, r3
   12d08:	bls	12dd4 <__assert_fail@plt+0x1d90>
   12d0c:	add	r0, r2, #1
   12d10:	str	r0, [r3, #20]
   12d14:	strb	r1, [r2]
   12d18:	add	sp, sp, #4
   12d1c:	ldrd	r4, [sp]
   12d20:	ldrd	r6, [sp, #8]
   12d24:	ldrd	r8, [sp, #16]
   12d28:	ldrd	sl, [sp, #24]
   12d2c:	add	sp, sp, #32
   12d30:	pop	{pc}		; (ldr pc, [sp], #4)
   12d34:	mov	r0, r3
   12d38:	mov	r1, sl
   12d3c:	bl	10fcc <__overflow@plt>
   12d40:	b	12cc4 <__assert_fail@plt+0x1c80>
   12d44:	cmp	r0, r3
   12d48:	moveq	r2, r1
   12d4c:	movne	r2, r0
   12d50:	ldreq	r3, [r7, #12]
   12d54:	ldrne	r3, [r7, #16]
   12d58:	ldr	r1, [r2, #12]
   12d5c:	cmp	r3, r1
   12d60:	bcs	12df4 <__assert_fail@plt+0x1db0>
   12d64:	ldr	r1, [r2, #20]
   12d68:	add	r2, r1, r3, lsl #3
   12d6c:	ldr	r2, [r2, #4]
   12d70:	cmp	r2, #0
   12d74:	beq	12df4 <__assert_fail@plt+0x1db0>
   12d78:	movw	r5, #49532	; 0xc17c
   12d7c:	movt	r5, #2
   12d80:	ldr	r0, [r1, r3, lsl #3]
   12d84:	mov	r1, #1
   12d88:	ldr	r3, [r5]
   12d8c:	bl	10e1c <fwrite_unlocked@plt>
   12d90:	mov	r0, r8
   12d94:	ldr	r1, [r7, #16]
   12d98:	ldr	r2, [r6, #104]	; 0x68
   12d9c:	bl	1249c <__assert_fail@plt+0x1458>
   12da0:	mov	r0, fp
   12da4:	ldr	r1, [r7, #12]
   12da8:	ldr	r2, [r6, #108]	; 0x6c
   12dac:	bl	1249c <__assert_fail@plt+0x1458>
   12db0:	ldr	r0, [r5]
   12db4:	ldrb	r1, [r7, #8]
   12db8:	ldr	r3, [r0, #20]
   12dbc:	ldr	r2, [r0, #24]
   12dc0:	cmp	r3, r2
   12dc4:	addcc	r2, r3, #1
   12dc8:	strcc	r2, [r0, #20]
   12dcc:	strbcc	r1, [r3]
   12dd0:	bcc	12d18 <__assert_fail@plt+0x1cd4>
   12dd4:	add	sp, sp, #4
   12dd8:	ldrd	r4, [sp]
   12ddc:	ldrd	r6, [sp, #8]
   12de0:	ldrd	r8, [sp, #16]
   12de4:	ldrd	sl, [sp, #24]
   12de8:	ldr	lr, [sp, #32]
   12dec:	add	sp, sp, #36	; 0x24
   12df0:	b	10fcc <__overflow@plt>
   12df4:	ldr	r0, [r6, #4]
   12df8:	movw	r5, #49532	; 0xc17c
   12dfc:	movt	r5, #2
   12e00:	cmp	r0, #0
   12e04:	beq	12d90 <__assert_fail@plt+0x1d4c>
   12e08:	ldr	r1, [r5]
   12e0c:	bl	10db0 <fputs_unlocked@plt>
   12e10:	b	12d90 <__assert_fail@plt+0x1d4c>
   12e14:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12e18:	movw	r4, #49544	; 0xc188
   12e1c:	movt	r4, #2
   12e20:	ldr	r5, [r1]
   12e24:	ldr	r3, [r4, #20]
   12e28:	strd	r6, [sp, #8]
   12e2c:	mov	r6, r1
   12e30:	mov	r7, r0
   12e34:	str	r8, [sp, #16]
   12e38:	str	lr, [sp, #20]
   12e3c:	sub	sp, sp, #16
   12e40:	cmp	r5, r3
   12e44:	beq	12fc0 <__assert_fail@plt+0x1f7c>
   12e48:	cmp	r5, #0
   12e4c:	beq	12fd8 <__assert_fail@plt+0x1f94>
   12e50:	mov	r3, #0
   12e54:	str	r3, [r5, #12]
   12e58:	movw	r6, #49408	; 0xc100
   12e5c:	movt	r6, #2
   12e60:	ldrb	r2, [r6, #8]
   12e64:	mov	r1, r7
   12e68:	mov	r0, r5
   12e6c:	bl	1407c <__assert_fail@plt+0x3038>
   12e70:	subs	r8, r0, #0
   12e74:	beq	12f94 <__assert_fail@plt+0x1f50>
   12e78:	ldr	r3, [r4, #32]
   12e7c:	mov	r0, r5
   12e80:	ldr	r2, [r4, #36]	; 0x24
   12e84:	adds	r3, r3, #1
   12e88:	adc	r2, r2, #0
   12e8c:	str	r3, [r4, #32]
   12e90:	str	r2, [r4, #36]	; 0x24
   12e94:	bl	12648 <__assert_fail@plt+0x1604>
   12e98:	ldr	r0, [r4, #20]
   12e9c:	cmp	r0, #0
   12ea0:	beq	12f74 <__assert_fail@plt+0x1f30>
   12ea4:	ldr	r3, [r4, #48]	; 0x30
   12ea8:	cmp	r3, #2
   12eac:	beq	12f74 <__assert_fail@plt+0x1f30>
   12eb0:	cmp	r3, #1
   12eb4:	beq	12ec4 <__assert_fail@plt+0x1e80>
   12eb8:	ldrb	r3, [r4, #52]	; 0x34
   12ebc:	cmp	r3, #0
   12ec0:	beq	12f74 <__assert_fail@plt+0x1f30>
   12ec4:	ldrb	r3, [r4, #56]	; 0x38
   12ec8:	cmp	r3, #0
   12ecc:	bne	12f74 <__assert_fail@plt+0x1f30>
   12ed0:	ldr	ip, [r6, #16]
   12ed4:	add	r1, r0, #20
   12ed8:	add	r3, r5, #20
   12edc:	ldr	r0, [r0, #12]
   12ee0:	ldr	r2, [r5, #12]
   12ee4:	str	ip, [sp]
   12ee8:	str	ip, [sp, #4]
   12eec:	bl	121c0 <__assert_fail@plt+0x117c>
   12ef0:	cmp	r0, #0
   12ef4:	ble	12f74 <__assert_fail@plt+0x1f30>
   12ef8:	ldr	r6, [r5, #4]
   12efc:	cmp	r6, #0
   12f00:	beq	12f20 <__assert_fail@plt+0x1edc>
   12f04:	ldr	r2, [r5, #8]
   12f08:	sub	r3, r6, #1
   12f0c:	ldrb	r2, [r2, r3]
   12f10:	cmp	r2, #10
   12f14:	moveq	r6, r3
   12f18:	cmp	r6, #0
   12f1c:	mvnlt	r6, #-2147483648	; 0x80000000
   12f20:	ldr	r7, [r4, #48]	; 0x30
   12f24:	mov	r2, #5
   12f28:	movw	r1, #43004	; 0xa7fc
   12f2c:	movt	r1, #1
   12f30:	mov	r0, #0
   12f34:	bl	10e40 <dcgettext@plt>
   12f38:	mov	r2, r0
   12f3c:	ldr	r3, [r5, #8]
   12f40:	mov	r1, #0
   12f44:	str	r6, [sp, #8]
   12f48:	sub	r7, r7, #1
   12f4c:	clz	r7, r7
   12f50:	lsr	r7, r7, #5
   12f54:	mov	r0, r7
   12f58:	ldrd	r6, [r4, #32]
   12f5c:	str	r3, [sp, #12]
   12f60:	ldr	r3, [r4, #60]	; 0x3c
   12f64:	strd	r6, [sp]
   12f68:	bl	10eac <error@plt>
   12f6c:	mov	r3, #1
   12f70:	strb	r3, [r4, #56]	; 0x38
   12f74:	mov	r0, #1
   12f78:	str	r5, [r4, #20]
   12f7c:	add	sp, sp, #16
   12f80:	ldrd	r4, [sp]
   12f84:	ldrd	r6, [sp, #8]
   12f88:	ldr	r8, [sp, #16]
   12f8c:	add	sp, sp, #20
   12f90:	pop	{pc}		; (ldr pc, [sp], #4)
   12f94:	ldr	r4, [r7]
   12f98:	ands	r4, r4, #32
   12f9c:	bne	12ff0 <__assert_fail@plt+0x1fac>
   12fa0:	ldr	r0, [r5, #20]
   12fa4:	bl	13db0 <__assert_fail@plt+0x2d6c>
   12fa8:	str	r4, [r5, #20]
   12fac:	ldr	r0, [r5, #8]
   12fb0:	bl	13db0 <__assert_fail@plt+0x2d6c>
   12fb4:	mov	r0, r4
   12fb8:	str	r4, [r5, #8]
   12fbc:	b	12f7c <__assert_fail@plt+0x1f38>
   12fc0:	ldr	r3, [r4, #8]
   12fc4:	str	r5, [r4, #8]
   12fc8:	mov	r5, r3
   12fcc:	str	r3, [r1]
   12fd0:	cmp	r5, #0
   12fd4:	bne	12e50 <__assert_fail@plt+0x1e0c>
   12fd8:	mov	r1, #24
   12fdc:	mov	r0, #1
   12fe0:	bl	18974 <__assert_fail@plt+0x7930>
   12fe4:	mov	r5, r0
   12fe8:	str	r0, [r6]
   12fec:	b	12e58 <__assert_fail@plt+0x1e14>
   12ff0:	bl	10f48 <__errno_location@plt>
   12ff4:	ldr	r4, [r0]
   12ff8:	mov	r2, #5
   12ffc:	movw	r1, #42992	; 0xa7f0
   13000:	movt	r1, #1
   13004:	mov	r0, r8
   13008:	bl	10e40 <dcgettext@plt>
   1300c:	mov	r2, r0
   13010:	mov	r0, #1
   13014:	mov	r1, r4
   13018:	bl	10eac <error@plt>
   1301c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13020:	ldr	r3, [r1, #4]
   13024:	strd	r6, [sp, #8]
   13028:	ldr	r6, [r1]
   1302c:	strd	r8, [sp, #16]
   13030:	mov	r8, r1
   13034:	str	sl, [sp, #24]
   13038:	mov	sl, r0
   1303c:	str	lr, [sp, #28]
   13040:	sub	sp, sp, #16
   13044:	ldr	r7, [r1, #8]
   13048:	cmp	r6, r3
   1304c:	lslne	r9, r6, #2
   13050:	beq	13228 <__assert_fail@plt+0x21e4>
   13054:	movw	r4, #49544	; 0xc188
   13058:	movt	r4, #2
   1305c:	ldr	r5, [r7, r6, lsl #2]
   13060:	add	r9, r7, r9
   13064:	ldr	r3, [r4, #20]
   13068:	cmp	r5, r3
   1306c:	beq	131f8 <__assert_fail@plt+0x21b4>
   13070:	cmp	r5, #0
   13074:	beq	13210 <__assert_fail@plt+0x21cc>
   13078:	mov	r3, #0
   1307c:	str	r3, [r5, #12]
   13080:	movw	r6, #49408	; 0xc100
   13084:	movt	r6, #2
   13088:	ldrb	r2, [r6, #8]
   1308c:	mov	r1, sl
   13090:	mov	r0, r5
   13094:	bl	1407c <__assert_fail@plt+0x3038>
   13098:	subs	r7, r0, #0
   1309c:	beq	131cc <__assert_fail@plt+0x2188>
   130a0:	ldr	r3, [r4, #32]
   130a4:	mov	r0, r5
   130a8:	ldr	r2, [r4, #36]	; 0x24
   130ac:	adds	r3, r3, #1
   130b0:	adc	r2, r2, #0
   130b4:	str	r3, [r4, #32]
   130b8:	str	r2, [r4, #36]	; 0x24
   130bc:	bl	12648 <__assert_fail@plt+0x1604>
   130c0:	ldr	r0, [r4, #20]
   130c4:	cmp	r0, #0
   130c8:	beq	1319c <__assert_fail@plt+0x2158>
   130cc:	ldr	r3, [r4, #48]	; 0x30
   130d0:	cmp	r3, #2
   130d4:	beq	1319c <__assert_fail@plt+0x2158>
   130d8:	cmp	r3, #1
   130dc:	beq	130ec <__assert_fail@plt+0x20a8>
   130e0:	ldrb	r3, [r4, #52]	; 0x34
   130e4:	cmp	r3, #0
   130e8:	beq	1319c <__assert_fail@plt+0x2158>
   130ec:	ldrb	r3, [r4, #56]	; 0x38
   130f0:	cmp	r3, #0
   130f4:	bne	1319c <__assert_fail@plt+0x2158>
   130f8:	ldr	ip, [r6, #16]
   130fc:	add	r1, r0, #20
   13100:	add	r3, r5, #20
   13104:	ldr	r0, [r0, #12]
   13108:	ldr	r2, [r5, #12]
   1310c:	str	ip, [sp]
   13110:	str	ip, [sp, #4]
   13114:	bl	121c0 <__assert_fail@plt+0x117c>
   13118:	cmp	r0, #0
   1311c:	ble	1319c <__assert_fail@plt+0x2158>
   13120:	ldr	r6, [r5, #4]
   13124:	cmp	r6, #0
   13128:	beq	13148 <__assert_fail@plt+0x2104>
   1312c:	ldr	r2, [r5, #8]
   13130:	sub	r3, r6, #1
   13134:	ldrb	r2, [r2, r3]
   13138:	cmp	r2, #10
   1313c:	moveq	r6, r3
   13140:	cmp	r6, #0
   13144:	mvnlt	r6, #-2147483648	; 0x80000000
   13148:	ldr	r7, [r4, #48]	; 0x30
   1314c:	mov	r2, #5
   13150:	movw	r1, #43004	; 0xa7fc
   13154:	movt	r1, #1
   13158:	mov	r0, #0
   1315c:	bl	10e40 <dcgettext@plt>
   13160:	mov	r2, r0
   13164:	ldr	r3, [r5, #8]
   13168:	mov	r1, #0
   1316c:	str	r6, [sp, #8]
   13170:	sub	r7, r7, #1
   13174:	clz	r7, r7
   13178:	lsr	r7, r7, #5
   1317c:	mov	r0, r7
   13180:	ldrd	r6, [r4, #32]
   13184:	str	r3, [sp, #12]
   13188:	ldr	r3, [r4, #60]	; 0x3c
   1318c:	strd	r6, [sp]
   13190:	bl	10eac <error@plt>
   13194:	mov	r3, #1
   13198:	strb	r3, [r4, #56]	; 0x38
   1319c:	ldr	r3, [r8]
   131a0:	mov	r0, #1
   131a4:	str	r5, [r4, #20]
   131a8:	add	r3, r3, r0
   131ac:	str	r3, [r8]
   131b0:	add	sp, sp, #16
   131b4:	ldrd	r4, [sp]
   131b8:	ldrd	r6, [sp, #8]
   131bc:	ldrd	r8, [sp, #16]
   131c0:	ldr	sl, [sp, #24]
   131c4:	add	sp, sp, #28
   131c8:	pop	{pc}		; (ldr pc, [sp], #4)
   131cc:	ldr	r4, [sl]
   131d0:	ands	r4, r4, #32
   131d4:	bne	1326c <__assert_fail@plt+0x2228>
   131d8:	ldr	r0, [r5, #20]
   131dc:	bl	13db0 <__assert_fail@plt+0x2d6c>
   131e0:	str	r4, [r5, #20]
   131e4:	ldr	r0, [r5, #8]
   131e8:	bl	13db0 <__assert_fail@plt+0x2d6c>
   131ec:	mov	r0, r4
   131f0:	str	r4, [r5, #8]
   131f4:	b	131b0 <__assert_fail@plt+0x216c>
   131f8:	ldr	r3, [r4, #8]
   131fc:	str	r5, [r4, #8]
   13200:	mov	r5, r3
   13204:	str	r3, [r7, r6, lsl #2]
   13208:	cmp	r5, #0
   1320c:	bne	13078 <__assert_fail@plt+0x2034>
   13210:	mov	r1, #24
   13214:	mov	r0, #1
   13218:	bl	18974 <__assert_fail@plt+0x7930>
   1321c:	mov	r5, r0
   13220:	str	r0, [r9]
   13224:	b	13080 <__assert_fail@plt+0x203c>
   13228:	mov	r2, #4
   1322c:	mov	r0, r7
   13230:	add	r1, r1, r2
   13234:	bl	18784 <__assert_fail@plt+0x7740>
   13238:	ldr	r6, [r8]
   1323c:	mov	r7, r0
   13240:	str	r0, [r8, #8]
   13244:	ldr	r2, [r8, #4]
   13248:	lsl	r9, r6, #2
   1324c:	cmp	r6, r2
   13250:	bcs	13054 <__assert_fail@plt+0x2010>
   13254:	sub	r2, r2, r6
   13258:	mov	r1, #0
   1325c:	lsl	r2, r2, #2
   13260:	add	r0, r0, r9
   13264:	bl	10f60 <memset@plt>
   13268:	b	13054 <__assert_fail@plt+0x2010>
   1326c:	bl	10f48 <__errno_location@plt>
   13270:	ldr	r4, [r0]
   13274:	mov	r2, #5
   13278:	movw	r1, #42992	; 0xa7f0
   1327c:	movt	r1, #1
   13280:	mov	r0, r7
   13284:	bl	10e40 <dcgettext@plt>
   13288:	mov	r2, r0
   1328c:	mov	r0, #1
   13290:	mov	r1, r4
   13294:	bl	10eac <error@plt>
   13298:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1329c:	ldr	r3, [r1, #4]
   132a0:	strd	r6, [sp, #8]
   132a4:	ldr	r6, [r1]
   132a8:	strd	r8, [sp, #16]
   132ac:	mov	r8, r1
   132b0:	str	sl, [sp, #24]
   132b4:	mov	sl, r0
   132b8:	str	lr, [sp, #28]
   132bc:	sub	sp, sp, #16
   132c0:	ldr	r7, [r1, #8]
   132c4:	cmp	r6, r3
   132c8:	lslne	r9, r6, #2
   132cc:	beq	134a4 <__assert_fail@plt+0x2460>
   132d0:	movw	r4, #49544	; 0xc188
   132d4:	movt	r4, #2
   132d8:	ldr	r5, [r7, r6, lsl #2]
   132dc:	add	r9, r7, r9
   132e0:	ldr	r3, [r4, #24]
   132e4:	cmp	r5, r3
   132e8:	beq	13474 <__assert_fail@plt+0x2430>
   132ec:	cmp	r5, #0
   132f0:	beq	1348c <__assert_fail@plt+0x2448>
   132f4:	mov	r3, #0
   132f8:	str	r3, [r5, #12]
   132fc:	movw	r6, #49408	; 0xc100
   13300:	movt	r6, #2
   13304:	ldrb	r2, [r6, #8]
   13308:	mov	r1, sl
   1330c:	mov	r0, r5
   13310:	bl	1407c <__assert_fail@plt+0x3038>
   13314:	subs	r7, r0, #0
   13318:	beq	13448 <__assert_fail@plt+0x2404>
   1331c:	ldr	r3, [r4, #40]	; 0x28
   13320:	mov	r0, r5
   13324:	ldr	r2, [r4, #44]	; 0x2c
   13328:	adds	r3, r3, #1
   1332c:	adc	r2, r2, #0
   13330:	str	r3, [r4, #40]	; 0x28
   13334:	str	r2, [r4, #44]	; 0x2c
   13338:	bl	12648 <__assert_fail@plt+0x1604>
   1333c:	ldr	r0, [r4, #24]
   13340:	cmp	r0, #0
   13344:	beq	13418 <__assert_fail@plt+0x23d4>
   13348:	ldr	r3, [r4, #48]	; 0x30
   1334c:	cmp	r3, #2
   13350:	beq	13418 <__assert_fail@plt+0x23d4>
   13354:	cmp	r3, #1
   13358:	beq	13368 <__assert_fail@plt+0x2324>
   1335c:	ldrb	r3, [r4, #52]	; 0x34
   13360:	cmp	r3, #0
   13364:	beq	13418 <__assert_fail@plt+0x23d4>
   13368:	ldrb	r3, [r4, #57]	; 0x39
   1336c:	cmp	r3, #0
   13370:	bne	13418 <__assert_fail@plt+0x23d4>
   13374:	ldr	ip, [r6, #12]
   13378:	add	r1, r0, #20
   1337c:	add	r3, r5, #20
   13380:	ldr	r0, [r0, #12]
   13384:	ldr	r2, [r5, #12]
   13388:	str	ip, [sp]
   1338c:	str	ip, [sp, #4]
   13390:	bl	121c0 <__assert_fail@plt+0x117c>
   13394:	cmp	r0, #0
   13398:	ble	13418 <__assert_fail@plt+0x23d4>
   1339c:	ldr	r6, [r5, #4]
   133a0:	cmp	r6, #0
   133a4:	beq	133c4 <__assert_fail@plt+0x2380>
   133a8:	ldr	r2, [r5, #8]
   133ac:	sub	r3, r6, #1
   133b0:	ldrb	r2, [r2, r3]
   133b4:	cmp	r2, #10
   133b8:	moveq	r6, r3
   133bc:	cmp	r6, #0
   133c0:	mvnlt	r6, #-2147483648	; 0x80000000
   133c4:	ldr	r7, [r4, #48]	; 0x30
   133c8:	mov	r2, #5
   133cc:	movw	r1, #43004	; 0xa7fc
   133d0:	movt	r1, #1
   133d4:	mov	r0, #0
   133d8:	bl	10e40 <dcgettext@plt>
   133dc:	mov	r2, r0
   133e0:	ldr	r3, [r5, #8]
   133e4:	mov	r1, #0
   133e8:	str	r6, [sp, #8]
   133ec:	sub	r7, r7, #1
   133f0:	clz	r7, r7
   133f4:	lsr	r7, r7, #5
   133f8:	mov	r0, r7
   133fc:	ldrd	r6, [r4, #40]	; 0x28
   13400:	str	r3, [sp, #12]
   13404:	ldr	r3, [r4, #64]	; 0x40
   13408:	strd	r6, [sp]
   1340c:	bl	10eac <error@plt>
   13410:	mov	r3, #1
   13414:	strb	r3, [r4, #57]	; 0x39
   13418:	ldr	r3, [r8]
   1341c:	mov	r0, #1
   13420:	str	r5, [r4, #24]
   13424:	add	r3, r3, r0
   13428:	str	r3, [r8]
   1342c:	add	sp, sp, #16
   13430:	ldrd	r4, [sp]
   13434:	ldrd	r6, [sp, #8]
   13438:	ldrd	r8, [sp, #16]
   1343c:	ldr	sl, [sp, #24]
   13440:	add	sp, sp, #28
   13444:	pop	{pc}		; (ldr pc, [sp], #4)
   13448:	ldr	r4, [sl]
   1344c:	ands	r4, r4, #32
   13450:	bne	134e8 <__assert_fail@plt+0x24a4>
   13454:	ldr	r0, [r5, #20]
   13458:	bl	13db0 <__assert_fail@plt+0x2d6c>
   1345c:	str	r4, [r5, #20]
   13460:	ldr	r0, [r5, #8]
   13464:	bl	13db0 <__assert_fail@plt+0x2d6c>
   13468:	mov	r0, r4
   1346c:	str	r4, [r5, #8]
   13470:	b	1342c <__assert_fail@plt+0x23e8>
   13474:	ldr	r3, [r4, #12]
   13478:	str	r5, [r4, #12]
   1347c:	mov	r5, r3
   13480:	str	r3, [r7, r6, lsl #2]
   13484:	cmp	r5, #0
   13488:	bne	132f4 <__assert_fail@plt+0x22b0>
   1348c:	mov	r1, #24
   13490:	mov	r0, #1
   13494:	bl	18974 <__assert_fail@plt+0x7930>
   13498:	mov	r5, r0
   1349c:	str	r0, [r9]
   134a0:	b	132fc <__assert_fail@plt+0x22b8>
   134a4:	mov	r2, #4
   134a8:	mov	r0, r7
   134ac:	add	r1, r1, r2
   134b0:	bl	18784 <__assert_fail@plt+0x7740>
   134b4:	ldr	r6, [r8]
   134b8:	mov	r7, r0
   134bc:	str	r0, [r8, #8]
   134c0:	ldr	r2, [r8, #4]
   134c4:	lsl	r9, r6, #2
   134c8:	cmp	r6, r2
   134cc:	bcs	132d0 <__assert_fail@plt+0x228c>
   134d0:	sub	r2, r2, r6
   134d4:	mov	r1, #0
   134d8:	lsl	r2, r2, #2
   134dc:	add	r0, r0, r9
   134e0:	bl	10f60 <memset@plt>
   134e4:	b	132d0 <__assert_fail@plt+0x228c>
   134e8:	bl	10f48 <__errno_location@plt>
   134ec:	ldr	r4, [r0]
   134f0:	mov	r2, #5
   134f4:	movw	r1, #42992	; 0xa7f0
   134f8:	movt	r1, #1
   134fc:	mov	r0, r7
   13500:	bl	10e40 <dcgettext@plt>
   13504:	mov	r2, r0
   13508:	mov	r0, #1
   1350c:	mov	r1, r4
   13510:	bl	10eac <error@plt>
   13514:	subs	r6, r0, #0
   13518:	str	r7, [sp, #-8]!
   1351c:	str	lr, [sp, #4]
   13520:	sub	sp, sp, #56	; 0x38
   13524:	beq	1356c <__assert_fail@plt+0x2528>
   13528:	movw	r3, #49520	; 0xc170
   1352c:	movt	r3, #2
   13530:	ldr	r4, [r3]
   13534:	mov	r2, #5
   13538:	movw	r1, #43044	; 0xa824
   1353c:	movt	r1, #1
   13540:	mov	r0, #0
   13544:	bl	10e40 <dcgettext@plt>
   13548:	movw	r3, #49668	; 0xc204
   1354c:	movt	r3, #2
   13550:	mov	r2, r0
   13554:	mov	r1, #1
   13558:	ldr	r3, [r3]
   1355c:	mov	r0, r4
   13560:	bl	10f84 <__fprintf_chk@plt>
   13564:	mov	r0, r6
   13568:	bl	10f18 <exit@plt>
   1356c:	mov	r2, #5
   13570:	movw	r1, #43084	; 0xa84c
   13574:	movt	r1, #1
   13578:	movw	r7, #49532	; 0xc17c
   1357c:	movt	r7, #2
   13580:	bl	10e40 <dcgettext@plt>
   13584:	movw	r3, #49668	; 0xc204
   13588:	movt	r3, #2
   1358c:	mov	r1, r0
   13590:	mov	r0, #1
   13594:	ldr	r2, [r3]
   13598:	bl	10f6c <__printf_chk@plt>
   1359c:	mov	r2, #5
   135a0:	movw	r1, #43120	; 0xa870
   135a4:	movt	r1, #1
   135a8:	mov	r0, r6
   135ac:	bl	10e40 <dcgettext@plt>
   135b0:	ldr	r1, [r7]
   135b4:	bl	10db0 <fputs_unlocked@plt>
   135b8:	mov	r2, #5
   135bc:	movw	r1, #43272	; 0xa908
   135c0:	movt	r1, #1
   135c4:	mov	r0, r6
   135c8:	bl	10e40 <dcgettext@plt>
   135cc:	ldr	r1, [r7]
   135d0:	bl	10db0 <fputs_unlocked@plt>
   135d4:	mov	r2, #5
   135d8:	movw	r1, #43332	; 0xa944
   135dc:	movt	r1, #1
   135e0:	mov	r0, r6
   135e4:	bl	10e40 <dcgettext@plt>
   135e8:	ldr	r1, [r7]
   135ec:	bl	10db0 <fputs_unlocked@plt>
   135f0:	mov	r2, #5
   135f4:	movw	r1, #43556	; 0xaa24
   135f8:	movt	r1, #1
   135fc:	mov	r0, r6
   13600:	bl	10e40 <dcgettext@plt>
   13604:	ldr	r1, [r7]
   13608:	bl	10db0 <fputs_unlocked@plt>
   1360c:	mov	r2, #5
   13610:	movw	r1, #43828	; 0xab34
   13614:	movt	r1, #1
   13618:	mov	r0, r6
   1361c:	bl	10e40 <dcgettext@plt>
   13620:	ldr	r1, [r7]
   13624:	bl	10db0 <fputs_unlocked@plt>
   13628:	mov	r2, #5
   1362c:	movw	r1, #44360	; 0xad48
   13630:	movt	r1, #1
   13634:	mov	r0, r6
   13638:	bl	10e40 <dcgettext@plt>
   1363c:	ldr	r1, [r7]
   13640:	bl	10db0 <fputs_unlocked@plt>
   13644:	mov	r2, #5
   13648:	movw	r1, #44424	; 0xad88
   1364c:	movt	r1, #1
   13650:	mov	r0, r6
   13654:	bl	10e40 <dcgettext@plt>
   13658:	ldr	r1, [r7]
   1365c:	bl	10db0 <fputs_unlocked@plt>
   13660:	mov	r2, #5
   13664:	movw	r1, #44472	; 0xadb8
   13668:	movt	r1, #1
   1366c:	mov	r0, r6
   13670:	bl	10e40 <dcgettext@plt>
   13674:	ldr	r1, [r7]
   13678:	bl	10db0 <fputs_unlocked@plt>
   1367c:	mov	r2, #5
   13680:	movw	r1, #44528	; 0xadf0
   13684:	movt	r1, #1
   13688:	mov	r0, r6
   1368c:	bl	10e40 <dcgettext@plt>
   13690:	ldr	r1, [r7]
   13694:	bl	10db0 <fputs_unlocked@plt>
   13698:	movw	lr, #42672	; 0xa6b0
   1369c:	movt	lr, #1
   136a0:	ldr	ip, [lr]
   136a4:	ldr	r4, [lr, #4]
   136a8:	ldrd	r8, [lr, #8]
   136ac:	subs	r1, ip, #0
   136b0:	str	ip, [sp]
   136b4:	ldrd	r2, [lr, #16]
   136b8:	str	r4, [sp, #4]
   136bc:	ldrd	r4, [lr, #24]
   136c0:	strd	r8, [sp, #8]
   136c4:	ldrd	r8, [lr, #32]
   136c8:	strd	r2, [sp, #16]
   136cc:	ldrd	r2, [lr, #40]	; 0x28
   136d0:	strd	r4, [sp, #24]
   136d4:	ldrd	r4, [lr, #48]	; 0x30
   136d8:	strd	r8, [sp, #32]
   136dc:	strd	r2, [sp, #40]	; 0x28
   136e0:	strd	r4, [sp, #48]	; 0x30
   136e4:	movwne	r5, #43036	; 0xa81c
   136e8:	mov	r4, sp
   136ec:	movtne	r5, #1
   136f0:	bne	137e8 <__assert_fail@plt+0x27a4>
   136f4:	ldr	r4, [r4, #4]
   136f8:	movw	r1, #45348	; 0xb124
   136fc:	movt	r1, #1
   13700:	mov	r2, #5
   13704:	cmp	r4, #0
   13708:	beq	137fc <__assert_fail@plt+0x27b8>
   1370c:	mov	r0, #0
   13710:	bl	10e40 <dcgettext@plt>
   13714:	mov	r1, r0
   13718:	movw	r3, #45372	; 0xb13c
   1371c:	movt	r3, #1
   13720:	movw	r2, #45412	; 0xb164
   13724:	movt	r2, #1
   13728:	mov	r0, #1
   1372c:	bl	10f6c <__printf_chk@plt>
   13730:	mov	r1, #0
   13734:	mov	r0, #5
   13738:	bl	10fd8 <setlocale@plt>
   1373c:	cmp	r0, #0
   13740:	movweq	r5, #43036	; 0xa81c
   13744:	movteq	r5, #1
   13748:	beq	1376c <__assert_fail@plt+0x2728>
   1374c:	movw	r1, #45428	; 0xb174
   13750:	movt	r1, #1
   13754:	mov	r2, #3
   13758:	movw	r5, #43036	; 0xa81c
   1375c:	movt	r5, #1
   13760:	bl	11020 <strncmp@plt>
   13764:	cmp	r0, #0
   13768:	bne	138b4 <__assert_fail@plt+0x2870>
   1376c:	mov	r2, #5
   13770:	movw	r1, #45504	; 0xb1c0
   13774:	movt	r1, #1
   13778:	mov	r0, #0
   1377c:	bl	10e40 <dcgettext@plt>
   13780:	mov	r1, r0
   13784:	movw	r3, #43036	; 0xa81c
   13788:	movt	r3, #1
   1378c:	movw	r2, #45372	; 0xb13c
   13790:	movt	r2, #1
   13794:	mov	r0, #1
   13798:	bl	10f6c <__printf_chk@plt>
   1379c:	mov	r2, #5
   137a0:	movw	r1, #45532	; 0xb1dc
   137a4:	movt	r1, #1
   137a8:	mov	r0, #0
   137ac:	bl	10e40 <dcgettext@plt>
   137b0:	movw	r2, #45888	; 0xb340
   137b4:	movt	r2, #1
   137b8:	cmp	r4, r5
   137bc:	movw	r3, #44420	; 0xad84
   137c0:	movt	r3, #1
   137c4:	mov	r1, r0
   137c8:	moveq	r3, r2
   137cc:	mov	r2, r4
   137d0:	mov	r0, #1
   137d4:	bl	10f6c <__printf_chk@plt>
   137d8:	b	13564 <__assert_fail@plt+0x2520>
   137dc:	ldr	r1, [r4, #8]!
   137e0:	cmp	r1, #0
   137e4:	beq	136f4 <__assert_fail@plt+0x26b0>
   137e8:	mov	r0, r5
   137ec:	bl	10dbc <strcmp@plt>
   137f0:	cmp	r0, #0
   137f4:	bne	137dc <__assert_fail@plt+0x2798>
   137f8:	b	136f4 <__assert_fail@plt+0x26b0>
   137fc:	mov	r0, r4
   13800:	bl	10e40 <dcgettext@plt>
   13804:	mov	r1, r0
   13808:	movw	r3, #45372	; 0xb13c
   1380c:	movt	r3, #1
   13810:	movw	r2, #45412	; 0xb164
   13814:	movt	r2, #1
   13818:	mov	r0, #1
   1381c:	bl	10f6c <__printf_chk@plt>
   13820:	mov	r1, r4
   13824:	mov	r0, #5
   13828:	bl	10fd8 <setlocale@plt>
   1382c:	cmp	r0, #0
   13830:	beq	1384c <__assert_fail@plt+0x2808>
   13834:	movw	r1, #45428	; 0xb174
   13838:	movt	r1, #1
   1383c:	mov	r2, #3
   13840:	bl	11020 <strncmp@plt>
   13844:	cmp	r0, #0
   13848:	bne	138a8 <__assert_fail@plt+0x2864>
   1384c:	mov	r2, #5
   13850:	movw	r1, #45504	; 0xb1c0
   13854:	movt	r1, #1
   13858:	mov	r0, #0
   1385c:	bl	10e40 <dcgettext@plt>
   13860:	mov	r1, r0
   13864:	movw	r3, #43036	; 0xa81c
   13868:	movt	r3, #1
   1386c:	movw	r2, #45372	; 0xb13c
   13870:	movt	r2, #1
   13874:	mov	r0, #1
   13878:	bl	10f6c <__printf_chk@plt>
   1387c:	movw	r1, #45532	; 0xb1dc
   13880:	movt	r1, #1
   13884:	mov	r2, #5
   13888:	mov	r0, #0
   1388c:	bl	10e40 <dcgettext@plt>
   13890:	movw	r4, #43036	; 0xa81c
   13894:	movt	r4, #1
   13898:	movw	r3, #45888	; 0xb340
   1389c:	movt	r3, #1
   138a0:	mov	r1, r0
   138a4:	b	137cc <__assert_fail@plt+0x2788>
   138a8:	movw	r5, #43036	; 0xa81c
   138ac:	movt	r5, #1
   138b0:	mov	r4, r5
   138b4:	mov	r2, #5
   138b8:	movw	r1, #45432	; 0xb178
   138bc:	movt	r1, #1
   138c0:	mov	r0, #0
   138c4:	bl	10e40 <dcgettext@plt>
   138c8:	ldr	r1, [r7]
   138cc:	bl	10db0 <fputs_unlocked@plt>
   138d0:	b	1376c <__assert_fail@plt+0x2728>
   138d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138d8:	ldr	r5, [r3]
   138dc:	strd	r6, [sp, #8]
   138e0:	mov	r7, r3
   138e4:	mov	r6, r1
   138e8:	strd	r8, [sp, #16]
   138ec:	mov	r9, r0
   138f0:	strd	sl, [sp, #24]
   138f4:	str	lr, [sp, #32]
   138f8:	sub	sp, sp, #20
   138fc:	cmp	r5, #2
   13900:	ldr	r8, [sp, #56]	; 0x38
   13904:	beq	13958 <__assert_fail@plt+0x2914>
   13908:	lsl	r3, r5, #2
   1390c:	movw	r4, #49544	; 0xc188
   13910:	movt	r4, #2
   13914:	add	r5, r5, #1
   13918:	ldr	r2, [r8]
   1391c:	add	r4, r4, r3
   13920:	str	r2, [r6, r3]
   13924:	str	r9, [r4, #60]	; 0x3c
   13928:	str	r5, [r7]
   1392c:	ldr	r3, [r8]
   13930:	cmp	r3, #3
   13934:	ldreq	r2, [sp, #60]	; 0x3c
   13938:	streq	r3, [r2]
   1393c:	add	sp, sp, #20
   13940:	ldrd	r4, [sp]
   13944:	ldrd	r6, [sp, #8]
   13948:	ldrd	r8, [sp, #16]
   1394c:	ldrd	sl, [sp, #24]
   13950:	add	sp, sp, #32
   13954:	pop	{pc}		; (ldr pc, [sp], #4)
   13958:	ldr	sl, [r1]
   1395c:	movw	r4, #49544	; 0xc188
   13960:	movt	r4, #2
   13964:	clz	r3, sl
   13968:	lsr	r3, r3, #5
   1396c:	ldr	r1, [r1, r3, lsl #2]
   13970:	add	r3, r4, r3, lsl #2
   13974:	ldr	r0, [r3, #60]	; 0x3c
   13978:	cmp	r1, #3
   1397c:	ldrls	pc, [pc, r1, lsl #2]
   13980:	b	13998 <__assert_fail@plt+0x2954>
   13984:	andeq	r3, r1, r0, asr sl
   13988:	andeq	r3, r1, ip, lsl sl
   1398c:			; <UNDEFINED> instruction: 0x000139b4
   13990:	muleq	r1, r4, r9
   13994:	bl	120bc <__assert_fail@plt+0x1078>
   13998:	cmp	sl, #0
   1399c:	mov	r3, #4
   139a0:	ldrne	r2, [r4, #64]	; 0x40
   139a4:	ldrne	r1, [r6, #4]
   139a8:	strne	r1, [r6]
   139ac:	strne	r2, [r4, #60]	; 0x3c
   139b0:	b	13918 <__assert_fail@plt+0x28d4>
   139b4:	ldr	r3, [r2, #4]
   139b8:	sub	r3, r3, #1
   139bc:	str	r3, [r2, #4]
   139c0:	bl	12014 <__assert_fail@plt+0xfd0>
   139c4:	movw	r2, #49408	; 0xc100
   139c8:	movt	r2, #2
   139cc:	ldr	r3, [r2, #12]
   139d0:	mov	fp, r0
   139d4:	cmp	r0, r3
   139d8:	cmnne	r3, #1
   139dc:	streq	r0, [r2, #12]
   139e0:	beq	13998 <__assert_fail@plt+0x2954>
   139e4:	mov	r2, #5
   139e8:	movw	r1, #42856	; 0xa768
   139ec:	movt	r1, #1
   139f0:	mov	r0, #0
   139f4:	str	r3, [sp, #12]
   139f8:	bl	10e40 <dcgettext@plt>
   139fc:	ldr	r3, [sp, #12]
   13a00:	add	fp, fp, #1
   13a04:	mov	r2, r0
   13a08:	mov	r1, #0
   13a0c:	mov	r0, #1
   13a10:	str	fp, [sp]
   13a14:	add	r3, r3, #1
   13a18:	bl	10eac <error@plt>
   13a1c:	ldr	r3, [r2]
   13a20:	sub	r3, r3, #1
   13a24:	str	r3, [r2]
   13a28:	bl	12014 <__assert_fail@plt+0xfd0>
   13a2c:	movw	r2, #49408	; 0xc100
   13a30:	movt	r2, #2
   13a34:	ldr	r3, [r2, #16]
   13a38:	mov	fp, r0
   13a3c:	cmp	r0, r3
   13a40:	cmnne	r3, #1
   13a44:	streq	r0, [r2, #16]
   13a48:	beq	13998 <__assert_fail@plt+0x2954>
   13a4c:	b	139e4 <__assert_fail@plt+0x29a0>
   13a50:	mov	r2, #5
   13a54:	movw	r1, #45584	; 0xb210
   13a58:	movt	r1, #1
   13a5c:	mov	r0, #0
   13a60:	bl	10e40 <dcgettext@plt>
   13a64:	mov	r4, r0
   13a68:	mov	r1, r9
   13a6c:	mov	r0, #4
   13a70:	bl	16860 <__assert_fail@plt+0x581c>
   13a74:	mov	r1, #0
   13a78:	mov	r3, r0
   13a7c:	mov	r2, r4
   13a80:	mov	r0, r1
   13a84:	bl	10eac <error@plt>
   13a88:	mov	r0, #1
   13a8c:	bl	13514 <__assert_fail@plt+0x24d0>
   13a90:	movw	r3, #49660	; 0xc1fc
   13a94:	movt	r3, #2
   13a98:	str	r0, [r3]
   13a9c:	bx	lr
   13aa0:	movw	r3, #49660	; 0xc1fc
   13aa4:	movt	r3, #2
   13aa8:	strb	r0, [r3, #4]
   13aac:	bx	lr
   13ab0:	movw	r3, #49532	; 0xc17c
   13ab4:	movt	r3, #2
   13ab8:	strd	r4, [sp, #-16]!
   13abc:	ldr	r0, [r3]
   13ac0:	str	r6, [sp, #8]
   13ac4:	str	lr, [sp, #12]
   13ac8:	sub	sp, sp, #8
   13acc:	bl	1a0c8 <__assert_fail@plt+0x9084>
   13ad0:	cmp	r0, #0
   13ad4:	beq	13b00 <__assert_fail@plt+0x2abc>
   13ad8:	movw	r4, #49660	; 0xc1fc
   13adc:	movt	r4, #2
   13ae0:	ldrb	r6, [r4, #4]
   13ae4:	bl	10f48 <__errno_location@plt>
   13ae8:	mov	r5, r0
   13aec:	cmp	r6, #0
   13af0:	beq	13b2c <__assert_fail@plt+0x2ae8>
   13af4:	ldr	r3, [r0]
   13af8:	cmp	r3, #32
   13afc:	bne	13b2c <__assert_fail@plt+0x2ae8>
   13b00:	movw	r3, #49520	; 0xc170
   13b04:	movt	r3, #2
   13b08:	ldr	r0, [r3]
   13b0c:	bl	1a0c8 <__assert_fail@plt+0x9084>
   13b10:	cmp	r0, #0
   13b14:	bne	13b74 <__assert_fail@plt+0x2b30>
   13b18:	add	sp, sp, #8
   13b1c:	ldrd	r4, [sp]
   13b20:	ldr	r6, [sp, #8]
   13b24:	add	sp, sp, #12
   13b28:	pop	{pc}		; (ldr pc, [sp], #4)
   13b2c:	movw	r1, #46084	; 0xb404
   13b30:	movt	r1, #1
   13b34:	mov	r2, #5
   13b38:	mov	r0, #0
   13b3c:	bl	10e40 <dcgettext@plt>
   13b40:	mov	r6, r0
   13b44:	ldr	r0, [r4]
   13b48:	cmp	r0, #0
   13b4c:	beq	13b84 <__assert_fail@plt+0x2b40>
   13b50:	ldr	r4, [r5]
   13b54:	bl	17010 <__assert_fail@plt+0x5fcc>
   13b58:	mov	r3, r0
   13b5c:	movw	r2, #46096	; 0xb410
   13b60:	movt	r2, #1
   13b64:	mov	r0, #0
   13b68:	str	r6, [sp]
   13b6c:	mov	r1, r4
   13b70:	bl	10eac <error@plt>
   13b74:	movw	r3, #49432	; 0xc118
   13b78:	movt	r3, #2
   13b7c:	ldr	r0, [r3]
   13b80:	bl	10dec <_exit@plt>
   13b84:	mov	r3, r6
   13b88:	movw	r2, #46100	; 0xb414
   13b8c:	movt	r2, #1
   13b90:	ldr	r1, [r5]
   13b94:	bl	10eac <error@plt>
   13b98:	b	13b74 <__assert_fail@plt+0x2b30>
   13b9c:	b	10dc8 <posix_fadvise64@plt>
   13ba0:	cmp	r0, #0
   13ba4:	bxeq	lr
   13ba8:	str	r4, [sp, #-16]!
   13bac:	mov	r4, r1
   13bb0:	strd	r6, [sp, #4]
   13bb4:	mov	r6, #0
   13bb8:	mov	r7, #0
   13bbc:	str	lr, [sp, #12]
   13bc0:	sub	sp, sp, #16
   13bc4:	bl	10f78 <fileno@plt>
   13bc8:	mov	r2, r6
   13bcc:	mov	r3, r7
   13bd0:	strd	r6, [sp]
   13bd4:	str	r4, [sp, #8]
   13bd8:	bl	10dc8 <posix_fadvise64@plt>
   13bdc:	add	sp, sp, #16
   13be0:	ldr	r4, [sp]
   13be4:	ldrd	r6, [sp, #4]
   13be8:	add	sp, sp, #12
   13bec:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf0:	strd	r4, [sp, #-12]!
   13bf4:	mov	r4, r0
   13bf8:	str	lr, [sp, #8]
   13bfc:	sub	sp, sp, #12
   13c00:	bl	10f78 <fileno@plt>
   13c04:	cmp	r0, #0
   13c08:	mov	r0, r4
   13c0c:	blt	13c90 <__assert_fail@plt+0x2c4c>
   13c10:	bl	10edc <__freading@plt>
   13c14:	cmp	r0, #0
   13c18:	bne	13c5c <__assert_fail@plt+0x2c18>
   13c1c:	mov	r0, r4
   13c20:	bl	13ca4 <__assert_fail@plt+0x2c60>
   13c24:	cmp	r0, #0
   13c28:	beq	13c8c <__assert_fail@plt+0x2c48>
   13c2c:	bl	10f48 <__errno_location@plt>
   13c30:	mov	r5, r0
   13c34:	mov	r0, r4
   13c38:	ldr	r4, [r5]
   13c3c:	bl	10f9c <fclose@plt>
   13c40:	cmp	r4, #0
   13c44:	mvnne	r0, #0
   13c48:	strne	r4, [r5]
   13c4c:	add	sp, sp, #12
   13c50:	ldrd	r4, [sp]
   13c54:	add	sp, sp, #8
   13c58:	pop	{pc}		; (ldr pc, [sp], #4)
   13c5c:	mov	r0, r4
   13c60:	bl	10f78 <fileno@plt>
   13c64:	mov	r1, #1
   13c68:	mov	r2, #0
   13c6c:	mov	r3, #0
   13c70:	str	r1, [sp]
   13c74:	bl	10e7c <lseek64@plt>
   13c78:	mvn	r3, #0
   13c7c:	mvn	r2, #0
   13c80:	cmp	r1, r3
   13c84:	cmpeq	r0, r2
   13c88:	bne	13c1c <__assert_fail@plt+0x2bd8>
   13c8c:	mov	r0, r4
   13c90:	add	sp, sp, #12
   13c94:	ldrd	r4, [sp]
   13c98:	ldr	lr, [sp, #8]
   13c9c:	add	sp, sp, #12
   13ca0:	b	10f9c <fclose@plt>
   13ca4:	str	r4, [sp, #-8]!
   13ca8:	subs	r4, r0, #0
   13cac:	str	lr, [sp, #4]
   13cb0:	sub	sp, sp, #8
   13cb4:	beq	13cd0 <__assert_fail@plt+0x2c8c>
   13cb8:	bl	10edc <__freading@plt>
   13cbc:	cmp	r0, #0
   13cc0:	beq	13cd0 <__assert_fail@plt+0x2c8c>
   13cc4:	ldr	r3, [r4]
   13cc8:	tst	r3, #256	; 0x100
   13ccc:	bne	13ce8 <__assert_fail@plt+0x2ca4>
   13cd0:	mov	r0, r4
   13cd4:	add	sp, sp, #8
   13cd8:	ldr	r4, [sp]
   13cdc:	ldr	lr, [sp, #4]
   13ce0:	add	sp, sp, #8
   13ce4:	b	10dd4 <fflush@plt>
   13ce8:	mov	r1, #1
   13cec:	mov	r2, #0
   13cf0:	mov	r3, #0
   13cf4:	mov	r0, r4
   13cf8:	str	r1, [sp]
   13cfc:	bl	13e10 <__assert_fail@plt+0x2dcc>
   13d00:	b	13cd0 <__assert_fail@plt+0x2c8c>
   13d04:	strd	r4, [sp, #-16]!
   13d08:	mov	r5, r1
   13d0c:	str	r6, [sp, #8]
   13d10:	str	lr, [sp, #12]
   13d14:	bl	10ffc <fopen64@plt>
   13d18:	subs	r4, r0, #0
   13d1c:	beq	13d2c <__assert_fail@plt+0x2ce8>
   13d20:	bl	10f78 <fileno@plt>
   13d24:	cmp	r0, #2
   13d28:	bls	13d40 <__assert_fail@plt+0x2cfc>
   13d2c:	mov	r0, r4
   13d30:	ldrd	r4, [sp]
   13d34:	ldr	r6, [sp, #8]
   13d38:	add	sp, sp, #12
   13d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d40:	bl	17de4 <__assert_fail@plt+0x6da0>
   13d44:	subs	r6, r0, #0
   13d48:	blt	13d90 <__assert_fail@plt+0x2d4c>
   13d4c:	mov	r0, r4
   13d50:	bl	13bf0 <__assert_fail@plt+0x2bac>
   13d54:	cmp	r0, #0
   13d58:	bne	13d70 <__assert_fail@plt+0x2d2c>
   13d5c:	mov	r1, r5
   13d60:	mov	r0, r6
   13d64:	bl	10d98 <fdopen@plt>
   13d68:	subs	r4, r0, #0
   13d6c:	bne	13d2c <__assert_fail@plt+0x2ce8>
   13d70:	bl	10f48 <__errno_location@plt>
   13d74:	mov	r5, r0
   13d78:	mov	r0, r6
   13d7c:	ldr	r6, [r5]
   13d80:	mov	r4, #0
   13d84:	bl	11038 <close@plt>
   13d88:	str	r6, [r5]
   13d8c:	b	13d2c <__assert_fail@plt+0x2ce8>
   13d90:	bl	10f48 <__errno_location@plt>
   13d94:	mov	r5, r0
   13d98:	mov	r0, r4
   13d9c:	ldr	r6, [r5]
   13da0:	mov	r4, #0
   13da4:	bl	13bf0 <__assert_fail@plt+0x2bac>
   13da8:	str	r6, [r5]
   13dac:	b	13d2c <__assert_fail@plt+0x2ce8>
   13db0:	strd	r4, [sp, #-12]!
   13db4:	mov	r5, r0
   13db8:	str	lr, [sp, #8]
   13dbc:	sub	sp, sp, #12
   13dc0:	bl	10f48 <__errno_location@plt>
   13dc4:	mov	r4, r0
   13dc8:	mov	r2, #0
   13dcc:	ldr	r3, [r4]
   13dd0:	mov	r0, r5
   13dd4:	str	r2, [r4]
   13dd8:	str	r3, [sp]
   13ddc:	str	r3, [sp, #4]
   13de0:	bl	10de0 <free@plt>
   13de4:	ldr	r3, [r4]
   13de8:	add	r2, sp, #8
   13dec:	clz	r3, r3
   13df0:	lsr	r3, r3, #5
   13df4:	add	r3, r2, r3, lsl #2
   13df8:	ldr	r3, [r3, #-8]
   13dfc:	str	r3, [r4]
   13e00:	add	sp, sp, #12
   13e04:	ldrd	r4, [sp]
   13e08:	add	sp, sp, #8
   13e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13e14:	mov	r4, r0
   13e18:	ldr	ip, [r0, #4]
   13e1c:	strd	r6, [sp, #8]
   13e20:	str	lr, [sp, #20]
   13e24:	ldr	lr, [r0, #8]
   13e28:	str	r8, [sp, #16]
   13e2c:	sub	sp, sp, #8
   13e30:	ldr	r5, [sp, #32]
   13e34:	cmp	lr, ip
   13e38:	beq	13e60 <__assert_fail@plt+0x2e1c>
   13e3c:	mov	r0, r4
   13e40:	str	r5, [sp, #32]
   13e44:	add	sp, sp, #8
   13e48:	ldrd	r4, [sp]
   13e4c:	ldrd	r6, [sp, #8]
   13e50:	ldr	r8, [sp, #16]
   13e54:	ldr	lr, [sp, #20]
   13e58:	add	sp, sp, #24
   13e5c:	b	10fa8 <fseeko64@plt>
   13e60:	ldr	ip, [r0, #16]
   13e64:	ldr	lr, [r0, #20]
   13e68:	cmp	lr, ip
   13e6c:	bne	13e3c <__assert_fail@plt+0x2df8>
   13e70:	ldr	r8, [r0, #36]	; 0x24
   13e74:	cmp	r8, #0
   13e78:	bne	13e3c <__assert_fail@plt+0x2df8>
   13e7c:	mov	r6, r2
   13e80:	mov	r7, r3
   13e84:	bl	10f78 <fileno@plt>
   13e88:	mov	r2, r6
   13e8c:	mov	r3, r7
   13e90:	str	r5, [sp]
   13e94:	bl	10e7c <lseek64@plt>
   13e98:	mvn	r3, #0
   13e9c:	mvn	r2, #0
   13ea0:	cmp	r1, r3
   13ea4:	cmpeq	r0, r2
   13ea8:	beq	13ed8 <__assert_fail@plt+0x2e94>
   13eac:	ldr	r3, [r4]
   13eb0:	strd	r0, [r4, #80]	; 0x50
   13eb4:	bic	r3, r3, #16
   13eb8:	str	r3, [r4]
   13ebc:	mov	r0, r8
   13ec0:	add	sp, sp, #8
   13ec4:	ldrd	r4, [sp]
   13ec8:	ldrd	r6, [sp, #8]
   13ecc:	ldr	r8, [sp, #16]
   13ed0:	add	sp, sp, #20
   13ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ed8:	mvn	r8, #0
   13edc:	b	13ebc <__assert_fail@plt+0x2e78>
   13ee0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ee4:	sub	sp, sp, #268	; 0x10c
   13ee8:	movw	r2, #257	; 0x101
   13eec:	add	r1, sp, #4
   13ef0:	bl	17d20 <__assert_fail@plt+0x6cdc>
   13ef4:	cmp	r0, #0
   13ef8:	movne	r0, #0
   13efc:	bne	13f30 <__assert_fail@plt+0x2eec>
   13f00:	movw	r1, #46104	; 0xb418
   13f04:	movt	r1, #1
   13f08:	add	r0, sp, #4
   13f0c:	bl	10dbc <strcmp@plt>
   13f10:	cmp	r0, #0
   13f14:	beq	13f30 <__assert_fail@plt+0x2eec>
   13f18:	add	r0, sp, #4
   13f1c:	movw	r1, #46108	; 0xb41c
   13f20:	movt	r1, #1
   13f24:	bl	10dbc <strcmp@plt>
   13f28:	adds	r0, r0, #0
   13f2c:	movne	r0, #1
   13f30:	add	sp, sp, #268	; 0x10c
   13f34:	pop	{pc}		; (ldr pc, [sp], #4)
   13f38:	mov	r3, #0
   13f3c:	str	r3, [r0]
   13f40:	str	r3, [r0, #4]
   13f44:	str	r3, [r0, #8]
   13f48:	bx	lr
   13f4c:	ldr	r3, [r1]
   13f50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f54:	strd	r6, [sp, #8]
   13f58:	strd	sl, [sp, #24]
   13f5c:	ldr	fp, [r0]
   13f60:	tst	r3, #16
   13f64:	strd	r8, [sp, #16]
   13f68:	ldr	sl, [r0, #8]
   13f6c:	str	lr, [sp, #32]
   13f70:	sub	sp, sp, #12
   13f74:	add	fp, sl, fp
   13f78:	bne	1406c <__assert_fail@plt+0x3028>
   13f7c:	mov	r5, r0
   13f80:	mov	r6, r1
   13f84:	mov	r4, sl
   13f88:	mov	r9, #1
   13f8c:	b	13fb4 <__assert_fail@plt+0x2f70>
   13f90:	add	r2, r3, #1
   13f94:	str	r2, [r6, #4]
   13f98:	ldrb	r7, [r3]
   13f9c:	mov	r8, r7
   13fa0:	cmp	r4, fp
   13fa4:	beq	14008 <__assert_fail@plt+0x2fc4>
   13fa8:	cmp	r8, #10
   13fac:	strb	r7, [r4], #1
   13fb0:	beq	14044 <__assert_fail@plt+0x3000>
   13fb4:	ldr	r3, [r6, #4]
   13fb8:	ldr	r2, [r6, #8]
   13fbc:	cmp	r3, r2
   13fc0:	bcc	13f90 <__assert_fail@plt+0x2f4c>
   13fc4:	mov	r0, r6
   13fc8:	bl	10fc0 <__uflow@plt>
   13fcc:	cmn	r0, #1
   13fd0:	mov	r8, r0
   13fd4:	bne	14074 <__assert_fail@plt+0x3030>
   13fd8:	cmp	sl, r4
   13fdc:	beq	1406c <__assert_fail@plt+0x3028>
   13fe0:	ldr	r3, [r6]
   13fe4:	tst	r3, #32
   13fe8:	bne	1406c <__assert_fail@plt+0x3028>
   13fec:	ldrb	r3, [r4, #-1]
   13ff0:	cmp	r3, #10
   13ff4:	beq	14044 <__assert_fail@plt+0x3000>
   13ff8:	cmp	r4, fp
   13ffc:	bne	1403c <__assert_fail@plt+0x2ff8>
   14000:	mov	r7, #10
   14004:	mov	r8, r7
   14008:	mov	r0, sl
   1400c:	mvn	r3, #0
   14010:	str	r9, [sp]
   14014:	mov	r2, #1
   14018:	mov	r1, r5
   1401c:	ldr	r4, [r5]
   14020:	bl	1881c <__assert_fail@plt+0x77d8>
   14024:	ldr	fp, [r5]
   14028:	mov	sl, r0
   1402c:	str	r0, [r5, #8]
   14030:	add	r4, r0, r4
   14034:	add	fp, r0, fp
   14038:	b	13fa8 <__assert_fail@plt+0x2f64>
   1403c:	mov	r3, #10
   14040:	strb	r3, [r4], #1
   14044:	sub	r4, r4, sl
   14048:	mov	r0, r5
   1404c:	str	r4, [r5, #4]
   14050:	add	sp, sp, #12
   14054:	ldrd	r4, [sp]
   14058:	ldrd	r6, [sp, #8]
   1405c:	ldrd	r8, [sp, #16]
   14060:	ldrd	sl, [sp, #24]
   14064:	add	sp, sp, #32
   14068:	pop	{pc}		; (ldr pc, [sp], #4)
   1406c:	mov	r0, #0
   14070:	b	14050 <__assert_fail@plt+0x300c>
   14074:	uxtb	r7, r0
   14078:	b	13fa0 <__assert_fail@plt+0x2f5c>
   1407c:	ldr	ip, [r1]
   14080:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14084:	ldr	r3, [r0]
   14088:	strd	r6, [sp, #8]
   1408c:	strd	sl, [sp, #24]
   14090:	ldr	fp, [r0, #8]
   14094:	tst	ip, #16
   14098:	strd	r8, [sp, #16]
   1409c:	str	lr, [sp, #32]
   140a0:	sub	sp, sp, #12
   140a4:	add	r9, fp, r3
   140a8:	bne	14198 <__assert_fail@plt+0x3154>
   140ac:	mov	r8, r2
   140b0:	mov	r7, r0
   140b4:	mov	r5, r1
   140b8:	mov	r4, fp
   140bc:	b	140e4 <__assert_fail@plt+0x30a0>
   140c0:	add	r1, r3, #1
   140c4:	str	r1, [r5, #4]
   140c8:	ldrb	r6, [r3]
   140cc:	mov	sl, r6
   140d0:	cmp	r4, r9
   140d4:	beq	14138 <__assert_fail@plt+0x30f4>
   140d8:	cmp	r8, sl
   140dc:	strb	r6, [r4], #1
   140e0:	beq	14170 <__assert_fail@plt+0x312c>
   140e4:	ldr	r3, [r5, #4]
   140e8:	ldr	r1, [r5, #8]
   140ec:	cmp	r3, r1
   140f0:	bcc	140c0 <__assert_fail@plt+0x307c>
   140f4:	mov	r0, r5
   140f8:	bl	10fc0 <__uflow@plt>
   140fc:	cmn	r0, #1
   14100:	mov	sl, r0
   14104:	bne	141a0 <__assert_fail@plt+0x315c>
   14108:	cmp	fp, r4
   1410c:	beq	14198 <__assert_fail@plt+0x3154>
   14110:	ldr	r3, [r5]
   14114:	tst	r3, #32
   14118:	bne	14198 <__assert_fail@plt+0x3154>
   1411c:	ldrb	r3, [r4, #-1]
   14120:	cmp	r3, r8
   14124:	beq	14170 <__assert_fail@plt+0x312c>
   14128:	cmp	r4, r9
   1412c:	mov	sl, r8
   14130:	bne	1416c <__assert_fail@plt+0x3128>
   14134:	mov	r6, r8
   14138:	mov	r2, #1
   1413c:	mov	r0, fp
   14140:	mvn	r3, #0
   14144:	mov	r1, r7
   14148:	str	r2, [sp]
   1414c:	ldr	r4, [r7]
   14150:	bl	1881c <__assert_fail@plt+0x77d8>
   14154:	ldr	r2, [r7]
   14158:	mov	fp, r0
   1415c:	str	r0, [r7, #8]
   14160:	add	r4, r0, r4
   14164:	add	r9, r0, r2
   14168:	b	140d8 <__assert_fail@plt+0x3094>
   1416c:	strb	r8, [r4], #1
   14170:	sub	r4, r4, fp
   14174:	mov	r0, r7
   14178:	str	r4, [r7, #4]
   1417c:	add	sp, sp, #12
   14180:	ldrd	r4, [sp]
   14184:	ldrd	r6, [sp, #8]
   14188:	ldrd	r8, [sp, #16]
   1418c:	ldrd	sl, [sp, #24]
   14190:	add	sp, sp, #32
   14194:	pop	{pc}		; (ldr pc, [sp], #4)
   14198:	mov	r0, #0
   1419c:	b	1417c <__assert_fail@plt+0x3138>
   141a0:	uxtb	r6, r0
   141a4:	b	140d0 <__assert_fail@plt+0x308c>
   141a8:	ldr	r0, [r0, #8]
   141ac:	b	13db0 <__assert_fail@plt+0x2d6c>
   141b0:	strd	r4, [sp, #-16]!
   141b4:	str	r6, [sp, #8]
   141b8:	subs	r6, r2, #0
   141bc:	str	lr, [sp, #12]
   141c0:	beq	14214 <__assert_fail@plt+0x31d0>
   141c4:	mov	r4, r0
   141c8:	mov	r5, r1
   141cc:	bl	10ee8 <__ctype_toupper_loc@plt>
   141d0:	sub	r3, r4, #1
   141d4:	sub	r1, r5, #1
   141d8:	ldr	ip, [r0]
   141dc:	add	r4, r3, r6
   141e0:	b	141ec <__assert_fail@plt+0x31a8>
   141e4:	cmp	r4, r3
   141e8:	beq	14204 <__assert_fail@plt+0x31c0>
   141ec:	ldrb	lr, [r3, #1]!
   141f0:	ldrb	r2, [r1, #1]!
   141f4:	ldr	r0, [ip, lr, lsl #2]
   141f8:	ldr	r2, [ip, r2, lsl #2]
   141fc:	subs	r0, r0, r2
   14200:	beq	141e4 <__assert_fail@plt+0x31a0>
   14204:	ldrd	r4, [sp]
   14208:	ldr	r6, [sp, #8]
   1420c:	add	sp, sp, #12
   14210:	pop	{pc}		; (ldr pc, [sp], #4)
   14214:	mov	r0, r6
   14218:	b	14204 <__assert_fail@plt+0x31c0>
   1421c:	strd	r4, [sp, #-16]!
   14220:	subs	r4, r0, #0
   14224:	str	r6, [sp, #8]
   14228:	str	lr, [sp, #12]
   1422c:	beq	142c4 <__assert_fail@plt+0x3280>
   14230:	mov	r1, #47	; 0x2f
   14234:	bl	10fe4 <strrchr@plt>
   14238:	subs	r5, r0, #0
   1423c:	beq	1429c <__assert_fail@plt+0x3258>
   14240:	add	r6, r5, #1
   14244:	sub	r3, r6, r4
   14248:	cmp	r3, #6
   1424c:	ble	1429c <__assert_fail@plt+0x3258>
   14250:	movw	r1, #46172	; 0xb45c
   14254:	movt	r1, #1
   14258:	mov	r2, #7
   1425c:	sub	r0, r5, #6
   14260:	bl	11020 <strncmp@plt>
   14264:	cmp	r0, #0
   14268:	bne	1429c <__assert_fail@plt+0x3258>
   1426c:	movw	r1, #46180	; 0xb464
   14270:	movt	r1, #1
   14274:	mov	r2, #3
   14278:	mov	r0, r6
   1427c:	bl	11020 <strncmp@plt>
   14280:	cmp	r0, #0
   14284:	movne	r4, r6
   14288:	bne	1429c <__assert_fail@plt+0x3258>
   1428c:	add	r4, r5, #4
   14290:	movw	r3, #49504	; 0xc160
   14294:	movt	r3, #2
   14298:	str	r4, [r3]
   1429c:	movw	r2, #49668	; 0xc204
   142a0:	movt	r2, #2
   142a4:	ldr	r6, [sp, #8]
   142a8:	movw	r3, #49508	; 0xc164
   142ac:	movt	r3, #2
   142b0:	str	r4, [r2]
   142b4:	str	r4, [r3]
   142b8:	ldrd	r4, [sp]
   142bc:	add	sp, sp, #12
   142c0:	pop	{pc}		; (ldr pc, [sp], #4)
   142c4:	movw	r3, #49520	; 0xc170
   142c8:	movt	r3, #2
   142cc:	movw	r0, #46116	; 0xb424
   142d0:	movt	r0, #1
   142d4:	ldr	r3, [r3]
   142d8:	mov	r2, #55	; 0x37
   142dc:	mov	r1, #1
   142e0:	bl	10e70 <fwrite@plt>
   142e4:	bl	1102c <abort@plt>
   142e8:	mov	r2, #5
   142ec:	strd	r4, [sp, #-16]!
   142f0:	mov	r5, r0
   142f4:	str	r6, [sp, #8]
   142f8:	mov	r6, r1
   142fc:	mov	r1, r0
   14300:	mov	r0, #0
   14304:	str	lr, [sp, #12]
   14308:	bl	10e40 <dcgettext@plt>
   1430c:	cmp	r5, r0
   14310:	mov	r4, r0
   14314:	beq	1432c <__assert_fail@plt+0x32e8>
   14318:	mov	r0, r4
   1431c:	ldrd	r4, [sp]
   14320:	ldr	r6, [sp, #8]
   14324:	add	sp, sp, #12
   14328:	pop	{pc}		; (ldr pc, [sp], #4)
   1432c:	bl	1a338 <__assert_fail@plt+0x92f4>
   14330:	ldrb	r3, [r0]
   14334:	bic	r3, r3, #32
   14338:	cmp	r3, #85	; 0x55
   1433c:	bne	143a4 <__assert_fail@plt+0x3360>
   14340:	ldrb	r3, [r0, #1]
   14344:	bic	r3, r3, #32
   14348:	cmp	r3, #84	; 0x54
   1434c:	bne	14424 <__assert_fail@plt+0x33e0>
   14350:	ldrb	r3, [r0, #2]
   14354:	bic	r3, r3, #32
   14358:	cmp	r3, #70	; 0x46
   1435c:	bne	14424 <__assert_fail@plt+0x33e0>
   14360:	ldrb	r3, [r0, #3]
   14364:	cmp	r3, #45	; 0x2d
   14368:	bne	14424 <__assert_fail@plt+0x33e0>
   1436c:	ldrb	r3, [r0, #4]
   14370:	cmp	r3, #56	; 0x38
   14374:	bne	14424 <__assert_fail@plt+0x33e0>
   14378:	ldrb	r3, [r0, #5]
   1437c:	cmp	r3, #0
   14380:	bne	14424 <__assert_fail@plt+0x33e0>
   14384:	ldrb	r2, [r4]
   14388:	movw	r3, #46272	; 0xb4c0
   1438c:	movt	r3, #1
   14390:	movw	r4, #46284	; 0xb4cc
   14394:	movt	r4, #1
   14398:	cmp	r2, #96	; 0x60
   1439c:	movne	r4, r3
   143a0:	b	14318 <__assert_fail@plt+0x32d4>
   143a4:	cmp	r3, #71	; 0x47
   143a8:	bne	14424 <__assert_fail@plt+0x33e0>
   143ac:	ldrb	r3, [r0, #1]
   143b0:	bic	r3, r3, #32
   143b4:	cmp	r3, #66	; 0x42
   143b8:	bne	14424 <__assert_fail@plt+0x33e0>
   143bc:	ldrb	r3, [r0, #2]
   143c0:	cmp	r3, #49	; 0x31
   143c4:	bne	14424 <__assert_fail@plt+0x33e0>
   143c8:	ldrb	r3, [r0, #3]
   143cc:	cmp	r3, #56	; 0x38
   143d0:	bne	14424 <__assert_fail@plt+0x33e0>
   143d4:	ldrb	r3, [r0, #4]
   143d8:	cmp	r3, #48	; 0x30
   143dc:	bne	14424 <__assert_fail@plt+0x33e0>
   143e0:	ldrb	r3, [r0, #5]
   143e4:	cmp	r3, #51	; 0x33
   143e8:	bne	14424 <__assert_fail@plt+0x33e0>
   143ec:	ldrb	r3, [r0, #6]
   143f0:	cmp	r3, #48	; 0x30
   143f4:	bne	14424 <__assert_fail@plt+0x33e0>
   143f8:	ldrb	r3, [r0, #7]
   143fc:	cmp	r3, #0
   14400:	bne	14424 <__assert_fail@plt+0x33e0>
   14404:	ldrb	r2, [r4]
   14408:	movw	r3, #46276	; 0xb4c4
   1440c:	movt	r3, #1
   14410:	movw	r4, #46280	; 0xb4c8
   14414:	movt	r4, #1
   14418:	cmp	r2, #96	; 0x60
   1441c:	movne	r4, r3
   14420:	b	14318 <__assert_fail@plt+0x32d4>
   14424:	movw	r3, #46288	; 0xb4d0
   14428:	movt	r3, #1
   1442c:	cmp	r6, #9
   14430:	movw	r4, #46268	; 0xb4bc
   14434:	movt	r4, #1
   14438:	movne	r4, r3
   1443c:	b	14318 <__assert_fail@plt+0x32d4>
   14440:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14444:	strd	r6, [sp, #8]
   14448:	strd	r8, [sp, #16]
   1444c:	mov	r8, r3
   14450:	strd	sl, [sp, #24]
   14454:	mov	fp, r0
   14458:	mov	sl, r1
   1445c:	str	lr, [sp, #32]
   14460:	sub	sp, sp, #140	; 0x8c
   14464:	ldr	r3, [sp, #180]	; 0xb4
   14468:	str	r2, [sp, #28]
   1446c:	and	r4, r3, #2
   14470:	ubfx	r3, r3, #1, #1
   14474:	str	r3, [sp, #44]	; 0x2c
   14478:	bl	10e88 <__ctype_get_mb_cur_max@plt>
   1447c:	ldr	r3, [sp, #176]	; 0xb0
   14480:	str	r0, [sp, #76]	; 0x4c
   14484:	cmp	r3, #10
   14488:	ldrls	pc, [pc, r3, lsl #2]
   1448c:	b	15e28 <__assert_fail@plt+0x4de4>
   14490:	andeq	r4, r1, r0, lsl r9
   14494:	andeq	r4, r1, ip, lsr #20
   14498:	andeq	r4, r1, r8, lsr #31
   1449c:	muleq	r1, r8, sl
   144a0:	andeq	r4, r1, r8, lsl r8
   144a4:	muleq	r1, r4, r8
   144a8:	andeq	r4, r1, ip, ror #18
   144ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144b0:			; <UNDEFINED> instruction: 0x000144bc
   144b4:			; <UNDEFINED> instruction: 0x000144bc
   144b8:			; <UNDEFINED> instruction: 0x000144bc
   144bc:	ldr	r3, [sp, #176]	; 0xb0
   144c0:	cmp	r3, #10
   144c4:	beq	144f0 <__assert_fail@plt+0x34ac>
   144c8:	mov	r1, r3
   144cc:	movw	r0, #46292	; 0xb4d4
   144d0:	movt	r0, #1
   144d4:	bl	142e8 <__assert_fail@plt+0x32a4>
   144d8:	str	r0, [sp, #188]	; 0xbc
   144dc:	movw	r0, #46288	; 0xb4d0
   144e0:	movt	r0, #1
   144e4:	ldr	r1, [sp, #176]	; 0xb0
   144e8:	bl	142e8 <__assert_fail@plt+0x32a4>
   144ec:	str	r0, [sp, #192]	; 0xc0
   144f0:	cmp	r4, #0
   144f4:	movne	r4, #0
   144f8:	beq	15bb4 <__assert_fail@plt+0x4b70>
   144fc:	mov	r5, #0
   14500:	ldr	r0, [sp, #192]	; 0xc0
   14504:	mov	r9, r5
   14508:	str	r5, [sp, #64]	; 0x40
   1450c:	bl	10f30 <strlen@plt>
   14510:	mov	r3, #1
   14514:	ldr	r2, [sp, #44]	; 0x2c
   14518:	cmp	r0, r5
   1451c:	moveq	r2, r5
   14520:	str	r3, [sp, #32]
   14524:	str	r3, [sp, #48]	; 0x30
   14528:	str	r5, [sp, #52]	; 0x34
   1452c:	str	r3, [sp, #60]	; 0x3c
   14530:	ldr	r3, [sp, #180]	; 0xb4
   14534:	str	r0, [sp, #56]	; 0x38
   14538:	str	r5, [sp, #68]	; 0x44
   1453c:	str	r5, [sp, #80]	; 0x50
   14540:	str	r5, [sp, #84]	; 0x54
   14544:	and	r3, r3, #1
   14548:	str	r2, [sp, #88]	; 0x58
   1454c:	str	r3, [sp, #92]	; 0x5c
   14550:	ldr	r3, [sp, #180]	; 0xb4
   14554:	and	r3, r3, #4
   14558:	str	r3, [sp, #96]	; 0x60
   1455c:	ldr	r3, [sp, #192]	; 0xc0
   14560:	str	r3, [sp, #72]	; 0x48
   14564:	mov	r3, fp
   14568:	mov	r7, #0
   1456c:	mov	fp, r9
   14570:	mov	r9, r3
   14574:	cmn	r8, #1
   14578:	beq	14b7c <__assert_fail@plt+0x3b38>
   1457c:	subs	r6, r8, r7
   14580:	movne	r6, #1
   14584:	cmp	r6, #0
   14588:	beq	14b94 <__assert_fail@plt+0x3b50>
   1458c:	ldr	r0, [sp, #28]
   14590:	ldr	r3, [sp, #48]	; 0x30
   14594:	cmp	r3, #0
   14598:	add	r3, r0, r7
   1459c:	str	r3, [sp, #36]	; 0x24
   145a0:	beq	15020 <__assert_fail@plt+0x3fdc>
   145a4:	ldr	r2, [sp, #56]	; 0x38
   145a8:	cmp	r2, #0
   145ac:	beq	15520 <__assert_fail@plt+0x44dc>
   145b0:	cmp	r2, #1
   145b4:	mov	r3, r2
   145b8:	movls	r3, #0
   145bc:	movhi	r3, #1
   145c0:	cmn	r8, #1
   145c4:	add	r5, r7, r2
   145c8:	movne	r3, #0
   145cc:	cmp	r3, #0
   145d0:	beq	145dc <__assert_fail@plt+0x3598>
   145d4:	bl	10f30 <strlen@plt>
   145d8:	mov	r8, r0
   145dc:	cmp	r5, r8
   145e0:	bhi	15520 <__assert_fail@plt+0x44dc>
   145e4:	ldr	r0, [sp, #36]	; 0x24
   145e8:	ldr	r2, [sp, #56]	; 0x38
   145ec:	ldr	r1, [sp, #72]	; 0x48
   145f0:	bl	10e28 <memcmp@plt>
   145f4:	cmp	r0, #0
   145f8:	bne	15520 <__assert_fail@plt+0x44dc>
   145fc:	ldr	r3, [sp, #44]	; 0x2c
   14600:	cmp	r3, #0
   14604:	bne	15ccc <__assert_fail@plt+0x4c88>
   14608:	ldr	r3, [sp, #36]	; 0x24
   1460c:	ldrb	r5, [r3]
   14610:	cmp	r5, #126	; 0x7e
   14614:	ldrls	pc, [pc, r5, lsl #2]
   14618:	b	15ab4 <__assert_fail@plt+0x4a70>
   1461c:	strdeq	r4, [r1], -r0
   14620:			; <UNDEFINED> instruction: 0x00015ab4
   14624:			; <UNDEFINED> instruction: 0x00015ab4
   14628:			; <UNDEFINED> instruction: 0x00015ab4
   1462c:			; <UNDEFINED> instruction: 0x00015ab4
   14630:			; <UNDEFINED> instruction: 0x00015ab4
   14634:			; <UNDEFINED> instruction: 0x00015ab4
   14638:	andeq	r4, r1, r8, asr #24
   1463c:	andeq	r4, r1, r0, asr #24
   14640:	andeq	r4, r1, r0, asr ip
   14644:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14648:	andeq	r4, r1, r4, asr #27
   1464c:	andeq	r4, r1, ip, ror #21
   14650:	andeq	r4, r1, r0, lsr #27
   14654:			; <UNDEFINED> instruction: 0x00015ab4
   14658:			; <UNDEFINED> instruction: 0x00015ab4
   1465c:			; <UNDEFINED> instruction: 0x00015ab4
   14660:			; <UNDEFINED> instruction: 0x00015ab4
   14664:			; <UNDEFINED> instruction: 0x00015ab4
   14668:			; <UNDEFINED> instruction: 0x00015ab4
   1466c:			; <UNDEFINED> instruction: 0x00015ab4
   14670:			; <UNDEFINED> instruction: 0x00015ab4
   14674:			; <UNDEFINED> instruction: 0x00015ab4
   14678:			; <UNDEFINED> instruction: 0x00015ab4
   1467c:			; <UNDEFINED> instruction: 0x00015ab4
   14680:			; <UNDEFINED> instruction: 0x00015ab4
   14684:			; <UNDEFINED> instruction: 0x00015ab4
   14688:			; <UNDEFINED> instruction: 0x00015ab4
   1468c:			; <UNDEFINED> instruction: 0x00015ab4
   14690:			; <UNDEFINED> instruction: 0x00015ab4
   14694:			; <UNDEFINED> instruction: 0x00015ab4
   14698:			; <UNDEFINED> instruction: 0x00015ab4
   1469c:	andeq	r4, r1, ip, asr #28
   146a0:	andeq	r4, r1, r0, asr #28
   146a4:	andeq	r4, r1, r0, asr #28
   146a8:	andeq	r4, r1, r4, lsr lr
   146ac:	andeq	r4, r1, r0, asr #28
   146b0:	andeq	r4, r1, r8, lsl pc
   146b4:	andeq	r4, r1, r0, asr #28
   146b8:	andeq	r4, r1, r8, lsl #31
   146bc:	andeq	r4, r1, r0, asr #28
   146c0:	andeq	r4, r1, r0, asr #28
   146c4:	andeq	r4, r1, r0, asr #28
   146c8:	andeq	r4, r1, r8, lsl pc
   146cc:	andeq	r4, r1, r8, lsl pc
   146d0:	andeq	r4, r1, r8, lsl pc
   146d4:	andeq	r4, r1, r8, lsl pc
   146d8:	andeq	r4, r1, r8, lsl pc
   146dc:	andeq	r4, r1, r8, lsl pc
   146e0:	andeq	r4, r1, r8, lsl pc
   146e4:	andeq	r4, r1, r8, lsl pc
   146e8:	andeq	r4, r1, r8, lsl pc
   146ec:	andeq	r4, r1, r8, lsl pc
   146f0:	andeq	r4, r1, r8, lsl pc
   146f4:	andeq	r4, r1, r8, lsl pc
   146f8:	andeq	r4, r1, r8, lsl pc
   146fc:	andeq	r4, r1, r8, lsl pc
   14700:	andeq	r4, r1, r8, lsl pc
   14704:	andeq	r4, r1, r8, lsl pc
   14708:	andeq	r4, r1, r0, asr #28
   1470c:	andeq	r4, r1, r0, asr #28
   14710:	andeq	r4, r1, r0, asr #28
   14714:	andeq	r4, r1, r0, asr #28
   14718:	andeq	r4, r1, r8, lsr pc
   1471c:			; <UNDEFINED> instruction: 0x00015ab4
   14720:	andeq	r4, r1, r8, lsl pc
   14724:	andeq	r4, r1, r8, lsl pc
   14728:	andeq	r4, r1, r8, lsl pc
   1472c:	andeq	r4, r1, r8, lsl pc
   14730:	andeq	r4, r1, r8, lsl pc
   14734:	andeq	r4, r1, r8, lsl pc
   14738:	andeq	r4, r1, r8, lsl pc
   1473c:	andeq	r4, r1, r8, lsl pc
   14740:	andeq	r4, r1, r8, lsl pc
   14744:	andeq	r4, r1, r8, lsl pc
   14748:	andeq	r4, r1, r8, lsl pc
   1474c:	andeq	r4, r1, r8, lsl pc
   14750:	andeq	r4, r1, r8, lsl pc
   14754:	andeq	r4, r1, r8, lsl pc
   14758:	andeq	r4, r1, r8, lsl pc
   1475c:	andeq	r4, r1, r8, lsl pc
   14760:	andeq	r4, r1, r8, lsl pc
   14764:	andeq	r4, r1, r8, lsl pc
   14768:	andeq	r4, r1, r8, lsl pc
   1476c:	andeq	r4, r1, r8, lsl pc
   14770:	andeq	r4, r1, r8, lsl pc
   14774:	andeq	r4, r1, r8, lsl pc
   14778:	andeq	r4, r1, r8, lsl pc
   1477c:	andeq	r4, r1, r8, lsl pc
   14780:	andeq	r4, r1, r8, lsl pc
   14784:	andeq	r4, r1, r8, lsl pc
   14788:	andeq	r4, r1, r0, asr #28
   1478c:	ldrdeq	r4, [r1], -ip
   14790:	andeq	r4, r1, r8, lsl pc
   14794:	andeq	r4, r1, r0, asr #28
   14798:	andeq	r4, r1, r8, lsl pc
   1479c:	andeq	r4, r1, r0, asr #28
   147a0:	andeq	r4, r1, r8, lsl pc
   147a4:	andeq	r4, r1, r8, lsl pc
   147a8:	andeq	r4, r1, r8, lsl pc
   147ac:	andeq	r4, r1, r8, lsl pc
   147b0:	andeq	r4, r1, r8, lsl pc
   147b4:	andeq	r4, r1, r8, lsl pc
   147b8:	andeq	r4, r1, r8, lsl pc
   147bc:	andeq	r4, r1, r8, lsl pc
   147c0:	andeq	r4, r1, r8, lsl pc
   147c4:	andeq	r4, r1, r8, lsl pc
   147c8:	andeq	r4, r1, r8, lsl pc
   147cc:	andeq	r4, r1, r8, lsl pc
   147d0:	andeq	r4, r1, r8, lsl pc
   147d4:	andeq	r4, r1, r8, lsl pc
   147d8:	andeq	r4, r1, r8, lsl pc
   147dc:	andeq	r4, r1, r8, lsl pc
   147e0:	andeq	r4, r1, r8, lsl pc
   147e4:	andeq	r4, r1, r8, lsl pc
   147e8:	andeq	r4, r1, r8, lsl pc
   147ec:	andeq	r4, r1, r8, lsl pc
   147f0:	andeq	r4, r1, r8, lsl pc
   147f4:	andeq	r4, r1, r8, lsl pc
   147f8:	andeq	r4, r1, r8, lsl pc
   147fc:	andeq	r4, r1, r8, lsl pc
   14800:	andeq	r4, r1, r8, lsl pc
   14804:	andeq	r4, r1, r8, lsl pc
   14808:	andeq	r4, r1, r8, ror #27
   1480c:	andeq	r4, r1, r0, asr #28
   14810:	andeq	r4, r1, r8, ror #27
   14814:	andeq	r4, r1, r4, lsr lr
   14818:	ldr	r3, [sp, #180]	; 0xb4
   1481c:	cmp	r4, #0
   14820:	and	r3, r3, #1
   14824:	str	r3, [sp, #92]	; 0x5c
   14828:	ldr	r3, [sp, #180]	; 0xb4
   1482c:	and	r3, r3, #4
   14830:	str	r3, [sp, #96]	; 0x60
   14834:	moveq	r3, #1
   14838:	streq	r3, [sp, #60]	; 0x3c
   1483c:	beq	14fcc <__assert_fail@plt+0x3f88>
   14840:	mov	r3, #0
   14844:	mov	r2, #1
   14848:	mov	r4, r3
   1484c:	mov	r9, r3
   14850:	str	r2, [sp, #32]
   14854:	str	r2, [sp, #44]	; 0x2c
   14858:	str	r3, [sp, #48]	; 0x30
   1485c:	str	r2, [sp, #52]	; 0x34
   14860:	str	r2, [sp, #56]	; 0x38
   14864:	str	r3, [sp, #60]	; 0x3c
   14868:	str	r2, [sp, #64]	; 0x40
   1486c:	str	r2, [sp, #68]	; 0x44
   14870:	str	r3, [sp, #80]	; 0x50
   14874:	str	r3, [sp, #84]	; 0x54
   14878:	str	r3, [sp, #88]	; 0x58
   1487c:	movw	r3, #46288	; 0xb4d0
   14880:	movt	r3, #1
   14884:	str	r3, [sp, #72]	; 0x48
   14888:	mov	r3, #2
   1488c:	str	r3, [sp, #176]	; 0xb0
   14890:	b	14564 <__assert_fail@plt+0x3520>
   14894:	ldr	r3, [sp, #180]	; 0xb4
   14898:	cmp	r4, #0
   1489c:	and	r3, r3, #1
   148a0:	str	r3, [sp, #92]	; 0x5c
   148a4:	ldr	r3, [sp, #180]	; 0xb4
   148a8:	and	r3, r3, #4
   148ac:	str	r3, [sp, #96]	; 0x60
   148b0:	bne	15c84 <__assert_fail@plt+0x4c40>
   148b4:	cmp	sl, #0
   148b8:	beq	15a30 <__assert_fail@plt+0x49ec>
   148bc:	mov	r3, #34	; 0x22
   148c0:	mov	r2, r4
   148c4:	mov	r1, #1
   148c8:	mov	r9, r2
   148cc:	strb	r3, [fp]
   148d0:	movw	r3, #46268	; 0xb4bc
   148d4:	movt	r3, #1
   148d8:	mov	r4, r1
   148dc:	str	r1, [sp, #32]
   148e0:	str	r2, [sp, #44]	; 0x2c
   148e4:	str	r1, [sp, #48]	; 0x30
   148e8:	str	r2, [sp, #52]	; 0x34
   148ec:	str	r1, [sp, #56]	; 0x38
   148f0:	str	r1, [sp, #60]	; 0x3c
   148f4:	str	r2, [sp, #64]	; 0x40
   148f8:	str	r2, [sp, #68]	; 0x44
   148fc:	str	r3, [sp, #72]	; 0x48
   14900:	str	r2, [sp, #80]	; 0x50
   14904:	str	r2, [sp, #84]	; 0x54
   14908:	str	r2, [sp, #88]	; 0x58
   1490c:	b	14564 <__assert_fail@plt+0x3520>
   14910:	mov	r3, #0
   14914:	mov	r2, #1
   14918:	mov	r9, r3
   1491c:	str	r2, [sp, #32]
   14920:	str	r3, [sp, #44]	; 0x2c
   14924:	str	r3, [sp, #48]	; 0x30
   14928:	str	r3, [sp, #52]	; 0x34
   1492c:	str	r3, [sp, #60]	; 0x3c
   14930:	strd	r2, [sp, #64]	; 0x40
   14934:	str	r3, [sp, #72]	; 0x48
   14938:	str	r3, [sp, #80]	; 0x50
   1493c:	str	r3, [sp, #88]	; 0x58
   14940:	ldr	r3, [sp, #180]	; 0xb4
   14944:	and	r3, r3, r2
   14948:	str	r3, [sp, #92]	; 0x5c
   1494c:	ldr	r3, [sp, #180]	; 0xb4
   14950:	and	r3, r3, #4
   14954:	str	r3, [sp, #96]	; 0x60
   14958:	ldr	r3, [sp, #176]	; 0xb0
   1495c:	mov	r4, r3
   14960:	str	r3, [sp, #56]	; 0x38
   14964:	str	r3, [sp, #84]	; 0x54
   14968:	b	14564 <__assert_fail@plt+0x3520>
   1496c:	mov	r3, #1
   14970:	mov	r4, #0
   14974:	mov	r9, r4
   14978:	str	r3, [sp, #32]
   1497c:	str	r3, [sp, #44]	; 0x2c
   14980:	str	r3, [sp, #48]	; 0x30
   14984:	str	r4, [sp, #52]	; 0x34
   14988:	str	r3, [sp, #56]	; 0x38
   1498c:	str	r3, [sp, #60]	; 0x3c
   14990:	str	r3, [sp, #88]	; 0x58
   14994:	movw	r3, #46268	; 0xb4bc
   14998:	movt	r3, #1
   1499c:	str	r4, [sp, #64]	; 0x40
   149a0:	str	r4, [sp, #68]	; 0x44
   149a4:	str	r3, [sp, #72]	; 0x48
   149a8:	ldr	r3, [sp, #180]	; 0xb4
   149ac:	str	r4, [sp, #80]	; 0x50
   149b0:	str	r4, [sp, #84]	; 0x54
   149b4:	and	r3, r3, #1
   149b8:	str	r3, [sp, #92]	; 0x5c
   149bc:	ldr	r3, [sp, #180]	; 0xb4
   149c0:	and	r3, r3, #4
   149c4:	str	r3, [sp, #96]	; 0x60
   149c8:	mov	r3, #5
   149cc:	str	r3, [sp, #176]	; 0xb0
   149d0:	b	14564 <__assert_fail@plt+0x3520>
   149d4:	mov	r3, #1
   149d8:	mov	r4, #0
   149dc:	mov	r9, r4
   149e0:	str	r3, [sp, #32]
   149e4:	str	r4, [sp, #44]	; 0x2c
   149e8:	str	r3, [sp, #48]	; 0x30
   149ec:	str	r3, [sp, #60]	; 0x3c
   149f0:	ldr	r3, [sp, #180]	; 0xb4
   149f4:	str	r4, [sp, #52]	; 0x34
   149f8:	str	r4, [sp, #56]	; 0x38
   149fc:	str	r4, [sp, #64]	; 0x40
   14a00:	str	r4, [sp, #68]	; 0x44
   14a04:	and	r3, r3, #1
   14a08:	str	r4, [sp, #72]	; 0x48
   14a0c:	str	r4, [sp, #80]	; 0x50
   14a10:	str	r4, [sp, #84]	; 0x54
   14a14:	str	r3, [sp, #92]	; 0x5c
   14a18:	ldr	r3, [sp, #180]	; 0xb4
   14a1c:	str	r4, [sp, #88]	; 0x58
   14a20:	and	r3, r3, #4
   14a24:	str	r3, [sp, #96]	; 0x60
   14a28:	b	14564 <__assert_fail@plt+0x3520>
   14a2c:	mov	r3, #0
   14a30:	mov	r2, #1
   14a34:	ldr	r1, [sp, #176]	; 0xb0
   14a38:	mov	r4, r3
   14a3c:	mov	r9, r3
   14a40:	movw	r3, #46288	; 0xb4d0
   14a44:	movt	r3, #1
   14a48:	str	r2, [sp, #32]
   14a4c:	str	r2, [sp, #44]	; 0x2c
   14a50:	str	r4, [sp, #48]	; 0x30
   14a54:	strd	r2, [sp, #68]	; 0x44
   14a58:	ldr	r3, [sp, #180]	; 0xb4
   14a5c:	str	r2, [sp, #52]	; 0x34
   14a60:	str	r1, [sp, #56]	; 0x38
   14a64:	str	r4, [sp, #60]	; 0x3c
   14a68:	str	r2, [sp, #64]	; 0x40
   14a6c:	and	r3, r3, r2
   14a70:	str	r4, [sp, #80]	; 0x50
   14a74:	str	r4, [sp, #84]	; 0x54
   14a78:	str	r4, [sp, #88]	; 0x58
   14a7c:	str	r3, [sp, #92]	; 0x5c
   14a80:	ldr	r3, [sp, #180]	; 0xb4
   14a84:	and	r3, r3, #4
   14a88:	str	r3, [sp, #96]	; 0x60
   14a8c:	mov	r3, #2
   14a90:	str	r3, [sp, #176]	; 0xb0
   14a94:	b	14564 <__assert_fail@plt+0x3520>
   14a98:	mov	r3, #1
   14a9c:	mov	r2, #0
   14aa0:	mov	r4, r2
   14aa4:	mov	r9, r2
   14aa8:	str	r3, [sp, #32]
   14aac:	str	r3, [sp, #44]	; 0x2c
   14ab0:	str	r2, [sp, #48]	; 0x30
   14ab4:	str	r3, [sp, #52]	; 0x34
   14ab8:	str	r3, [sp, #56]	; 0x38
   14abc:	str	r3, [sp, #60]	; 0x3c
   14ac0:	str	r3, [sp, #64]	; 0x40
   14ac4:	str	r3, [sp, #68]	; 0x44
   14ac8:	str	r3, [sp, #88]	; 0x58
   14acc:	movw	r3, #46288	; 0xb4d0
   14ad0:	movt	r3, #1
   14ad4:	str	r3, [sp, #72]	; 0x48
   14ad8:	ldr	r3, [sp, #180]	; 0xb4
   14adc:	str	r2, [sp, #80]	; 0x50
   14ae0:	str	r2, [sp, #84]	; 0x54
   14ae4:	and	r3, r3, #1
   14ae8:	b	14a7c <__assert_fail@plt+0x3a38>
   14aec:	mov	r5, #102	; 0x66
   14af0:	mov	r6, #0
   14af4:	ldr	r3, [sp, #44]	; 0x2c
   14af8:	cmp	r3, #0
   14afc:	bne	159ac <__assert_fail@plt+0x4968>
   14b00:	ldr	r2, [sp, #52]	; 0x34
   14b04:	eor	r3, fp, #1
   14b08:	ands	r3, r2, r3
   14b0c:	beq	14b44 <__assert_fail@plt+0x3b00>
   14b10:	cmp	sl, r4
   14b14:	mov	fp, r3
   14b18:	movhi	r2, #39	; 0x27
   14b1c:	strbhi	r2, [r9, r4]
   14b20:	add	r2, r4, #1
   14b24:	cmp	sl, r2
   14b28:	movhi	r1, #36	; 0x24
   14b2c:	strbhi	r1, [r9, r2]
   14b30:	add	r2, r4, #2
   14b34:	add	r4, r4, #3
   14b38:	cmp	sl, r2
   14b3c:	movhi	r1, #39	; 0x27
   14b40:	strbhi	r1, [r9, r2]
   14b44:	cmp	sl, r4
   14b48:	add	r7, r7, #1
   14b4c:	movhi	r3, #92	; 0x5c
   14b50:	strbhi	r3, [r9, r4]
   14b54:	add	r4, r4, #1
   14b58:	cmp	r4, sl
   14b5c:	ldr	r3, [sp, #32]
   14b60:	strbcc	r5, [r9, r4]
   14b64:	cmp	r6, #0
   14b68:	add	r4, r4, #1
   14b6c:	moveq	r3, #0
   14b70:	cmn	r8, #1
   14b74:	str	r3, [sp, #32]
   14b78:	bne	1457c <__assert_fail@plt+0x3538>
   14b7c:	ldr	r3, [sp, #28]
   14b80:	ldrb	r6, [r3, r7]
   14b84:	adds	r6, r6, #0
   14b88:	movne	r6, #1
   14b8c:	cmp	r6, #0
   14b90:	bne	1458c <__assert_fail@plt+0x3548>
   14b94:	mov	r3, r9
   14b98:	mov	r9, fp
   14b9c:	mov	fp, r3
   14ba0:	ldr	r3, [sp, #68]	; 0x44
   14ba4:	cmp	r4, #0
   14ba8:	movne	r3, #0
   14bac:	cmp	r3, #0
   14bb0:	bne	15da4 <__assert_fail@plt+0x4d60>
   14bb4:	ldr	r3, [sp, #44]	; 0x2c
   14bb8:	ldr	r2, [sp, #52]	; 0x34
   14bbc:	eor	r3, r3, #1
   14bc0:	ands	r2, r3, r2
   14bc4:	beq	15cdc <__assert_fail@plt+0x4c98>
   14bc8:	ldr	r3, [sp, #80]	; 0x50
   14bcc:	cmp	r3, #0
   14bd0:	beq	15ce0 <__assert_fail@plt+0x4c9c>
   14bd4:	ldr	r3, [sp, #32]
   14bd8:	cmp	r3, #0
   14bdc:	bne	15d54 <__assert_fail@plt+0x4d10>
   14be0:	ldr	r3, [sp, #84]	; 0x54
   14be4:	adds	r3, r3, #0
   14be8:	movne	r3, #1
   14bec:	cmp	sl, #0
   14bf0:	movne	r3, #0
   14bf4:	cmp	r3, #0
   14bf8:	ldreq	r2, [sp, #80]	; 0x50
   14bfc:	beq	15ce0 <__assert_fail@plt+0x4c9c>
   14c00:	ldr	r2, [sp, #84]	; 0x54
   14c04:	mov	sl, r2
   14c08:	mov	r0, #0
   14c0c:	mov	r4, #1
   14c10:	mov	r1, #39	; 0x27
   14c14:	str	r0, [sp, #44]	; 0x2c
   14c18:	strb	r1, [fp]
   14c1c:	str	r0, [sp, #48]	; 0x30
   14c20:	str	r4, [sp, #52]	; 0x34
   14c24:	str	r4, [sp, #56]	; 0x38
   14c28:	str	r4, [sp, #64]	; 0x40
   14c2c:	str	r0, [sp, #68]	; 0x44
   14c30:	str	r3, [sp, #80]	; 0x50
   14c34:	str	r2, [sp, #84]	; 0x54
   14c38:	str	r0, [sp, #88]	; 0x58
   14c3c:	b	1487c <__assert_fail@plt+0x3838>
   14c40:	mov	r5, #98	; 0x62
   14c44:	b	14af0 <__assert_fail@plt+0x3aac>
   14c48:	mov	r5, #97	; 0x61
   14c4c:	b	14af0 <__assert_fail@plt+0x3aac>
   14c50:	ldr	r3, [sp, #48]	; 0x30
   14c54:	str	r3, [sp, #40]	; 0x28
   14c58:	mov	r3, #116	; 0x74
   14c5c:	ldr	r2, [sp, #68]	; 0x44
   14c60:	cmp	r2, #0
   14c64:	bne	14e60 <__assert_fail@plt+0x3e1c>
   14c68:	ldr	r2, [sp, #60]	; 0x3c
   14c6c:	cmp	r2, #0
   14c70:	bne	14dbc <__assert_fail@plt+0x3d78>
   14c74:	ldr	r3, [sp, #44]	; 0x2c
   14c78:	mov	r6, #0
   14c7c:	cmp	r3, #0
   14c80:	beq	14e2c <__assert_fail@plt+0x3de8>
   14c84:	mov	r3, fp
   14c88:	ldr	r2, [sp, #184]	; 0xb8
   14c8c:	cmp	r2, #0
   14c90:	beq	14cb0 <__assert_fail@plt+0x3c6c>
   14c94:	ubfx	r1, r5, #5, #8
   14c98:	mov	r0, r2
   14c9c:	and	r2, r5, #31
   14ca0:	ldr	r1, [r0, r1, lsl #2]
   14ca4:	lsr	r2, r1, r2
   14ca8:	tst	r2, #1
   14cac:	bne	14af4 <__assert_fail@plt+0x3ab0>
   14cb0:	ldr	r2, [sp, #40]	; 0x28
   14cb4:	cmp	r2, #0
   14cb8:	addeq	r7, r7, #1
   14cbc:	bne	14af4 <__assert_fail@plt+0x3ab0>
   14cc0:	cmp	r3, #0
   14cc4:	beq	14b58 <__assert_fail@plt+0x3b14>
   14cc8:	cmp	sl, r4
   14ccc:	mov	fp, #0
   14cd0:	movhi	r3, #39	; 0x27
   14cd4:	strbhi	r3, [r9, r4]
   14cd8:	add	r3, r4, #1
   14cdc:	add	r4, r4, #2
   14ce0:	cmp	sl, r3
   14ce4:	movhi	r2, #39	; 0x27
   14ce8:	strbhi	r2, [r9, r3]
   14cec:	b	14b58 <__assert_fail@plt+0x3b14>
   14cf0:	ldr	r3, [sp, #48]	; 0x30
   14cf4:	str	r3, [sp, #40]	; 0x28
   14cf8:	eor	r3, fp, #1
   14cfc:	ldr	r2, [sp, #52]	; 0x34
   14d00:	ands	r2, r2, r3
   14d04:	beq	159c4 <__assert_fail@plt+0x4980>
   14d08:	cmp	sl, r4
   14d0c:	movhi	r3, #39	; 0x27
   14d10:	strbhi	r3, [r9, r4]
   14d14:	add	r3, r4, #1
   14d18:	cmp	sl, r3
   14d1c:	movhi	r1, #36	; 0x24
   14d20:	strbhi	r1, [r9, r3]
   14d24:	add	r3, r4, #2
   14d28:	cmp	sl, r3
   14d2c:	movhi	r1, #39	; 0x27
   14d30:	strbhi	r1, [r9, r3]
   14d34:	add	r3, r4, #3
   14d38:	cmp	sl, r3
   14d3c:	bls	15a10 <__assert_fail@plt+0x49cc>
   14d40:	mov	r4, r3
   14d44:	mov	r3, #92	; 0x5c
   14d48:	mov	fp, r2
   14d4c:	mov	r2, r4
   14d50:	strb	r3, [r9, r4]
   14d54:	ldr	r3, [sp, #176]	; 0xb0
   14d58:	add	r4, r4, #1
   14d5c:	cmp	r3, #2
   14d60:	beq	15a78 <__assert_fail@plt+0x4a34>
   14d64:	add	r3, r7, #1
   14d68:	cmp	r3, r8
   14d6c:	bcs	14d84 <__assert_fail@plt+0x3d40>
   14d70:	ldr	r1, [sp, #28]
   14d74:	ldrb	r3, [r1, r3]
   14d78:	sub	r3, r3, #48	; 0x30
   14d7c:	cmp	r3, #9
   14d80:	bls	15a88 <__assert_fail@plt+0x4a44>
   14d84:	mov	r3, #0
   14d88:	mov	r5, #48	; 0x30
   14d8c:	ldr	r6, [sp, #64]	; 0x40
   14d90:	cmp	r6, #0
   14d94:	beq	14c88 <__assert_fail@plt+0x3c44>
   14d98:	mov	r6, #0
   14d9c:	b	14cb0 <__assert_fail@plt+0x3c6c>
   14da0:	ldr	r3, [sp, #48]	; 0x30
   14da4:	str	r3, [sp, #40]	; 0x28
   14da8:	ldr	r2, [sp, #60]	; 0x3c
   14dac:	mov	r5, #13
   14db0:	mov	r3, #114	; 0x72
   14db4:	cmp	r2, #0
   14db8:	beq	14c74 <__assert_fail@plt+0x3c30>
   14dbc:	mov	r5, r3
   14dc0:	b	14af0 <__assert_fail@plt+0x3aac>
   14dc4:	ldr	r3, [sp, #48]	; 0x30
   14dc8:	str	r3, [sp, #40]	; 0x28
   14dcc:	mov	r3, #118	; 0x76
   14dd0:	b	14c68 <__assert_fail@plt+0x3c24>
   14dd4:	ldr	r3, [sp, #48]	; 0x30
   14dd8:	str	r3, [sp, #40]	; 0x28
   14ddc:	mov	r5, #10
   14de0:	mov	r3, #110	; 0x6e
   14de4:	b	14c68 <__assert_fail@plt+0x3c24>
   14de8:	ldr	r3, [sp, #48]	; 0x30
   14dec:	cmn	r8, #1
   14df0:	str	r3, [sp, #40]	; 0x28
   14df4:	beq	1523c <__assert_fail@plt+0x41f8>
   14df8:	subs	r3, r8, #1
   14dfc:	movne	r3, #1
   14e00:	cmp	r3, #0
   14e04:	bne	14e10 <__assert_fail@plt+0x3dcc>
   14e08:	cmp	r7, #0
   14e0c:	beq	14e54 <__assert_fail@plt+0x3e10>
   14e10:	mov	r6, #0
   14e14:	ldr	r3, [sp, #64]	; 0x40
   14e18:	cmp	r3, #0
   14e1c:	beq	14c84 <__assert_fail@plt+0x3c40>
   14e20:	ldr	r3, [sp, #44]	; 0x2c
   14e24:	cmp	r3, #0
   14e28:	bne	14c84 <__assert_fail@plt+0x3c40>
   14e2c:	mov	r3, fp
   14e30:	b	14cb0 <__assert_fail@plt+0x3c6c>
   14e34:	ldr	r3, [sp, #48]	; 0x30
   14e38:	str	r3, [sp, #40]	; 0x28
   14e3c:	b	14e08 <__assert_fail@plt+0x3dc4>
   14e40:	ldr	r3, [sp, #48]	; 0x30
   14e44:	str	r3, [sp, #40]	; 0x28
   14e48:	b	14e10 <__assert_fail@plt+0x3dcc>
   14e4c:	ldr	r6, [sp, #48]	; 0x30
   14e50:	str	r6, [sp, #40]	; 0x28
   14e54:	ldr	r3, [sp, #68]	; 0x44
   14e58:	cmp	r3, #0
   14e5c:	beq	14e14 <__assert_fail@plt+0x3dd0>
   14e60:	mov	r3, #2
   14e64:	mov	fp, r9
   14e68:	str	r3, [sp, #176]	; 0xb0
   14e6c:	ldr	r3, [sp, #60]	; 0x3c
   14e70:	cmp	r3, #0
   14e74:	ldr	r3, [sp, #176]	; 0xb0
   14e78:	movne	r3, #4
   14e7c:	str	r3, [sp, #176]	; 0xb0
   14e80:	mov	lr, #0
   14e84:	mov	r0, fp
   14e88:	ldr	r2, [sp, #28]
   14e8c:	ldr	r3, [sp, #180]	; 0xb4
   14e90:	ldr	r1, [sp, #188]	; 0xbc
   14e94:	bic	ip, r3, #2
   14e98:	ldr	r3, [sp, #176]	; 0xb0
   14e9c:	stm	sp, {r3, ip, lr}
   14ea0:	mov	r3, r8
   14ea4:	ldr	ip, [sp, #192]	; 0xc0
   14ea8:	str	r1, [sp, #12]
   14eac:	mov	r1, sl
   14eb0:	str	ip, [sp, #16]
   14eb4:	bl	14440 <__assert_fail@plt+0x33fc>
   14eb8:	mov	r4, r0
   14ebc:	mov	r0, r4
   14ec0:	add	sp, sp, #140	; 0x8c
   14ec4:	ldrd	r4, [sp]
   14ec8:	ldrd	r6, [sp, #8]
   14ecc:	ldrd	r8, [sp, #16]
   14ed0:	ldrd	sl, [sp, #24]
   14ed4:	add	sp, sp, #32
   14ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   14edc:	ldr	r3, [sp, #48]	; 0x30
   14ee0:	str	r3, [sp, #40]	; 0x28
   14ee4:	ldr	r3, [sp, #176]	; 0xb0
   14ee8:	cmp	r3, #2
   14eec:	beq	15264 <__assert_fail@plt+0x4220>
   14ef0:	ldr	r3, [sp, #88]	; 0x58
   14ef4:	cmp	r3, #0
   14ef8:	moveq	r5, #92	; 0x5c
   14efc:	moveq	r3, r5
   14f00:	beq	14c68 <__assert_fail@plt+0x3c24>
   14f04:	add	r7, r7, #1
   14f08:	mov	r3, fp
   14f0c:	mov	r6, #0
   14f10:	mov	r5, #92	; 0x5c
   14f14:	b	14cc0 <__assert_fail@plt+0x3c7c>
   14f18:	ldr	r3, [sp, #64]	; 0x40
   14f1c:	cmp	r3, #0
   14f20:	bne	15d98 <__assert_fail@plt+0x4d54>
   14f24:	ldr	r2, [sp, #48]	; 0x30
   14f28:	mov	r3, fp
   14f2c:	mov	r6, r2
   14f30:	str	r2, [sp, #40]	; 0x28
   14f34:	b	14c88 <__assert_fail@plt+0x3c44>
   14f38:	ldr	r3, [sp, #176]	; 0xb0
   14f3c:	cmp	r3, #2
   14f40:	beq	15cd4 <__assert_fail@plt+0x4c90>
   14f44:	cmp	r3, #5
   14f48:	ldr	r3, [sp, #48]	; 0x30
   14f4c:	str	r3, [sp, #40]	; 0x28
   14f50:	bne	14f7c <__assert_fail@plt+0x3f38>
   14f54:	ldr	r3, [sp, #96]	; 0x60
   14f58:	cmp	r3, #0
   14f5c:	beq	159d8 <__assert_fail@plt+0x4994>
   14f60:	add	r3, r7, #2
   14f64:	cmp	r3, r8
   14f68:	bcs	14f7c <__assert_fail@plt+0x3f38>
   14f6c:	ldr	r2, [sp, #36]	; 0x24
   14f70:	ldrb	r5, [r2, #1]
   14f74:	cmp	r5, #63	; 0x3f
   14f78:	beq	15ac0 <__assert_fail@plt+0x4a7c>
   14f7c:	mov	r6, #0
   14f80:	mov	r5, #63	; 0x3f
   14f84:	b	14e14 <__assert_fail@plt+0x3dd0>
   14f88:	ldr	r3, [sp, #176]	; 0xb0
   14f8c:	cmp	r3, #2
   14f90:	ldr	r3, [sp, #48]	; 0x30
   14f94:	beq	1577c <__assert_fail@plt+0x4738>
   14f98:	mov	r5, #39	; 0x27
   14f9c:	str	r3, [sp, #40]	; 0x28
   14fa0:	str	r6, [sp, #80]	; 0x50
   14fa4:	b	14e14 <__assert_fail@plt+0x3dd0>
   14fa8:	ldr	r3, [sp, #180]	; 0xb4
   14fac:	cmp	r4, #0
   14fb0:	and	r3, r3, #1
   14fb4:	str	r3, [sp, #92]	; 0x5c
   14fb8:	ldr	r3, [sp, #180]	; 0xb4
   14fbc:	and	r3, r3, #4
   14fc0:	str	r3, [sp, #96]	; 0x60
   14fc4:	bne	15de4 <__assert_fail@plt+0x4da0>
   14fc8:	str	r4, [sp, #60]	; 0x3c
   14fcc:	cmp	sl, #0
   14fd0:	bne	15dc8 <__assert_fail@plt+0x4d84>
   14fd4:	mov	r3, #1
   14fd8:	movw	r2, #46288	; 0xb4d0
   14fdc:	movt	r2, #1
   14fe0:	mov	r4, r3
   14fe4:	mov	r3, #2
   14fe8:	mov	r9, sl
   14fec:	str	r4, [sp, #32]
   14ff0:	str	sl, [sp, #44]	; 0x2c
   14ff4:	str	sl, [sp, #48]	; 0x30
   14ff8:	str	r4, [sp, #52]	; 0x34
   14ffc:	str	r4, [sp, #56]	; 0x38
   15000:	str	r4, [sp, #64]	; 0x40
   15004:	str	sl, [sp, #68]	; 0x44
   15008:	str	r2, [sp, #72]	; 0x48
   1500c:	str	sl, [sp, #80]	; 0x50
   15010:	str	sl, [sp, #84]	; 0x54
   15014:	str	sl, [sp, #88]	; 0x58
   15018:	str	r3, [sp, #176]	; 0xb0
   1501c:	b	14564 <__assert_fail@plt+0x3520>
   15020:	ldrb	r5, [r0, r7]
   15024:	cmp	r5, #126	; 0x7e
   15028:	ldrls	pc, [pc, r5, lsl #2]
   1502c:	b	15390 <__assert_fail@plt+0x434c>
   15030:	andeq	r5, r1, ip, asr r3
   15034:	muleq	r1, r0, r3
   15038:	muleq	r1, r0, r3
   1503c:	muleq	r1, r0, r3
   15040:	muleq	r1, r0, r3
   15044:	muleq	r1, r0, r3
   15048:	muleq	r1, r0, r3
   1504c:	andeq	r5, r1, ip, asr #6
   15050:	andeq	r5, r1, ip, lsr r3
   15054:	andeq	r5, r1, r0, asr #5
   15058:	andeq	r5, r1, ip, lsr #6
   1505c:	andeq	r5, r1, r0, lsr #5
   15060:	andeq	r5, r1, r0, lsl #7
   15064:	andeq	r5, r1, ip, lsl #6
   15068:	muleq	r1, r0, r3
   1506c:	muleq	r1, r0, r3
   15070:	muleq	r1, r0, r3
   15074:	muleq	r1, r0, r3
   15078:	muleq	r1, r0, r3
   1507c:	muleq	r1, r0, r3
   15080:	muleq	r1, r0, r3
   15084:	muleq	r1, r0, r3
   15088:	muleq	r1, r0, r3
   1508c:	muleq	r1, r0, r3
   15090:	muleq	r1, r0, r3
   15094:	muleq	r1, r0, r3
   15098:	muleq	r1, r0, r3
   1509c:	muleq	r1, r0, r3
   150a0:	muleq	r1, r0, r3
   150a4:	muleq	r1, r0, r3
   150a8:	muleq	r1, r0, r3
   150ac:	muleq	r1, r0, r3
   150b0:			; <UNDEFINED> instruction: 0x000152b4
   150b4:	andeq	r5, r1, ip, lsl r3
   150b8:	andeq	r5, r1, ip, lsl r3
   150bc:	muleq	r1, r4, r2
   150c0:	andeq	r5, r1, ip, lsl r3
   150c4:	andeq	r5, r1, r8, lsl #5
   150c8:	andeq	r5, r1, ip, lsl r3
   150cc:	strdeq	r5, [r1], -r8
   150d0:	andeq	r5, r1, ip, lsl r3
   150d4:	andeq	r5, r1, ip, lsl r3
   150d8:	andeq	r5, r1, ip, lsl r3
   150dc:	andeq	r5, r1, r8, lsl #5
   150e0:	andeq	r5, r1, r8, lsl #5
   150e4:	andeq	r5, r1, r8, lsl #5
   150e8:	andeq	r5, r1, r8, lsl #5
   150ec:	andeq	r5, r1, r8, lsl #5
   150f0:	andeq	r5, r1, r8, lsl #5
   150f4:	andeq	r5, r1, r8, lsl #5
   150f8:	andeq	r5, r1, r8, lsl #5
   150fc:	andeq	r5, r1, r8, lsl #5
   15100:	andeq	r5, r1, r8, lsl #5
   15104:	andeq	r5, r1, r8, lsl #5
   15108:	andeq	r5, r1, r8, lsl #5
   1510c:	andeq	r5, r1, r8, lsl #5
   15110:	andeq	r5, r1, r8, lsl #5
   15114:	andeq	r5, r1, r8, lsl #5
   15118:	andeq	r5, r1, r8, lsl #5
   1511c:	andeq	r5, r1, ip, lsl r3
   15120:	andeq	r5, r1, ip, lsl r3
   15124:	andeq	r5, r1, ip, lsl r3
   15128:	andeq	r5, r1, ip, lsl r3
   1512c:	ldrdeq	r5, [r1], -r0
   15130:	muleq	r1, r0, r3
   15134:	andeq	r5, r1, r8, lsl #5
   15138:	andeq	r5, r1, r8, lsl #5
   1513c:	andeq	r5, r1, r8, lsl #5
   15140:	andeq	r5, r1, r8, lsl #5
   15144:	andeq	r5, r1, r8, lsl #5
   15148:	andeq	r5, r1, r8, lsl #5
   1514c:	andeq	r5, r1, r8, lsl #5
   15150:	andeq	r5, r1, r8, lsl #5
   15154:	andeq	r5, r1, r8, lsl #5
   15158:	andeq	r5, r1, r8, lsl #5
   1515c:	andeq	r5, r1, r8, lsl #5
   15160:	andeq	r5, r1, r8, lsl #5
   15164:	andeq	r5, r1, r8, lsl #5
   15168:	andeq	r5, r1, r8, lsl #5
   1516c:	andeq	r5, r1, r8, lsl #5
   15170:	andeq	r5, r1, r8, lsl #5
   15174:	andeq	r5, r1, r8, lsl #5
   15178:	andeq	r5, r1, r8, lsl #5
   1517c:	andeq	r5, r1, r8, lsl #5
   15180:	andeq	r5, r1, r8, lsl #5
   15184:	andeq	r5, r1, r8, lsl #5
   15188:	andeq	r5, r1, r8, lsl #5
   1518c:	andeq	r5, r1, r8, lsl #5
   15190:	andeq	r5, r1, r8, lsl #5
   15194:	andeq	r5, r1, r8, lsl #5
   15198:	andeq	r5, r1, r8, lsl #5
   1519c:	andeq	r5, r1, ip, lsl r3
   151a0:	andeq	r5, r1, r0, asr r2
   151a4:	andeq	r5, r1, r8, lsl #5
   151a8:	andeq	r5, r1, ip, lsl r3
   151ac:	andeq	r5, r1, r8, lsl #5
   151b0:	andeq	r5, r1, ip, lsl r3
   151b4:	andeq	r5, r1, r8, lsl #5
   151b8:	andeq	r5, r1, r8, lsl #5
   151bc:	andeq	r5, r1, r8, lsl #5
   151c0:	andeq	r5, r1, r8, lsl #5
   151c4:	andeq	r5, r1, r8, lsl #5
   151c8:	andeq	r5, r1, r8, lsl #5
   151cc:	andeq	r5, r1, r8, lsl #5
   151d0:	andeq	r5, r1, r8, lsl #5
   151d4:	andeq	r5, r1, r8, lsl #5
   151d8:	andeq	r5, r1, r8, lsl #5
   151dc:	andeq	r5, r1, r8, lsl #5
   151e0:	andeq	r5, r1, r8, lsl #5
   151e4:	andeq	r5, r1, r8, lsl #5
   151e8:	andeq	r5, r1, r8, lsl #5
   151ec:	andeq	r5, r1, r8, lsl #5
   151f0:	andeq	r5, r1, r8, lsl #5
   151f4:	andeq	r5, r1, r8, lsl #5
   151f8:	andeq	r5, r1, r8, lsl #5
   151fc:	andeq	r5, r1, r8, lsl #5
   15200:	andeq	r5, r1, r8, lsl #5
   15204:	andeq	r5, r1, r8, lsl #5
   15208:	andeq	r5, r1, r8, lsl #5
   1520c:	andeq	r5, r1, r8, lsl #5
   15210:	andeq	r5, r1, r8, lsl #5
   15214:	andeq	r5, r1, r8, lsl #5
   15218:	andeq	r5, r1, r8, lsl #5
   1521c:	andeq	r5, r1, ip, lsr #4
   15220:	andeq	r5, r1, ip, lsl r3
   15224:	andeq	r5, r1, ip, lsr #4
   15228:	muleq	r1, r4, r2
   1522c:	mov	r3, #0
   15230:	cmn	r8, #1
   15234:	str	r3, [sp, #40]	; 0x28
   15238:	bne	14df8 <__assert_fail@plt+0x3db4>
   1523c:	ldr	r3, [sp, #28]
   15240:	ldrb	r3, [r3, #1]
   15244:	adds	r3, r3, #0
   15248:	movne	r3, #1
   1524c:	b	14e00 <__assert_fail@plt+0x3dbc>
   15250:	mov	r3, #0
   15254:	str	r3, [sp, #40]	; 0x28
   15258:	ldr	r3, [sp, #176]	; 0xb0
   1525c:	cmp	r3, #2
   15260:	bne	14ef0 <__assert_fail@plt+0x3eac>
   15264:	ldr	r3, [sp, #44]	; 0x2c
   15268:	cmp	r3, #0
   1526c:	bne	15bac <__assert_fail@plt+0x4b68>
   15270:	mov	r6, r3
   15274:	add	r7, r7, #1
   15278:	mov	r3, fp
   1527c:	mov	r5, #92	; 0x5c
   15280:	b	14cc0 <__assert_fail@plt+0x3c7c>
   15284:	ldr	r6, [sp, #48]	; 0x30
   15288:	mov	r3, #0
   1528c:	str	r3, [sp, #40]	; 0x28
   15290:	b	14e14 <__assert_fail@plt+0x3dd0>
   15294:	mov	r3, #0
   15298:	str	r3, [sp, #40]	; 0x28
   1529c:	b	14e08 <__assert_fail@plt+0x3dc4>
   152a0:	mov	r3, #0
   152a4:	str	r3, [sp, #40]	; 0x28
   152a8:	mov	r3, #118	; 0x76
   152ac:	b	14c68 <__assert_fail@plt+0x3c24>
   152b0:	ldr	r6, [sp, #48]	; 0x30
   152b4:	mov	r3, #0
   152b8:	str	r3, [sp, #40]	; 0x28
   152bc:	b	14e54 <__assert_fail@plt+0x3e10>
   152c0:	mov	r3, #0
   152c4:	str	r3, [sp, #40]	; 0x28
   152c8:	mov	r3, #116	; 0x74
   152cc:	b	14c5c <__assert_fail@plt+0x3c18>
   152d0:	ldr	r3, [sp, #176]	; 0xb0
   152d4:	cmp	r3, #2
   152d8:	beq	157e8 <__assert_fail@plt+0x47a4>
   152dc:	cmp	r3, #5
   152e0:	mov	r3, #0
   152e4:	str	r3, [sp, #40]	; 0x28
   152e8:	beq	14f54 <__assert_fail@plt+0x3f10>
   152ec:	mov	r6, #0
   152f0:	mov	r5, #63	; 0x3f
   152f4:	b	14e14 <__assert_fail@plt+0x3dd0>
   152f8:	ldr	r3, [sp, #176]	; 0xb0
   152fc:	cmp	r3, #2
   15300:	beq	15770 <__assert_fail@plt+0x472c>
   15304:	mov	r3, #0
   15308:	b	14f98 <__assert_fail@plt+0x3f54>
   1530c:	mov	r3, #0
   15310:	str	r3, [sp, #40]	; 0x28
   15314:	mov	r3, #114	; 0x72
   15318:	b	14c5c <__assert_fail@plt+0x3c18>
   1531c:	mov	r3, #0
   15320:	mov	r6, r3
   15324:	str	r3, [sp, #40]	; 0x28
   15328:	b	14e54 <__assert_fail@plt+0x3e10>
   1532c:	mov	r3, #0
   15330:	str	r3, [sp, #40]	; 0x28
   15334:	mov	r3, #110	; 0x6e
   15338:	b	14c5c <__assert_fail@plt+0x3c18>
   1533c:	mov	r3, #0
   15340:	str	r3, [sp, #40]	; 0x28
   15344:	mov	r3, #98	; 0x62
   15348:	b	14c68 <__assert_fail@plt+0x3c24>
   1534c:	mov	r3, #0
   15350:	str	r3, [sp, #40]	; 0x28
   15354:	mov	r3, #97	; 0x61
   15358:	b	14c68 <__assert_fail@plt+0x3c24>
   1535c:	ldr	r3, [sp, #60]	; 0x3c
   15360:	cmp	r3, #0
   15364:	bne	15754 <__assert_fail@plt+0x4710>
   15368:	ldr	r3, [sp, #92]	; 0x5c
   1536c:	cmp	r3, #0
   15370:	addne	r7, r7, #1
   15374:	bne	14574 <__assert_fail@plt+0x3530>
   15378:	str	r3, [sp, #40]	; 0x28
   1537c:	b	14c74 <__assert_fail@plt+0x3c30>
   15380:	mov	r3, #0
   15384:	str	r3, [sp, #40]	; 0x28
   15388:	mov	r3, #102	; 0x66
   1538c:	b	14c68 <__assert_fail@plt+0x3c24>
   15390:	mov	r3, #0
   15394:	str	r3, [sp, #40]	; 0x28
   15398:	ldr	r3, [sp, #76]	; 0x4c
   1539c:	cmp	r3, #1
   153a0:	bne	15808 <__assert_fail@plt+0x47c4>
   153a4:	bl	10f0c <__ctype_b_loc@plt>
   153a8:	ldr	r2, [r0]
   153ac:	sxth	r3, r5
   153b0:	lsl	r3, r3, #1
   153b4:	ldr	r1, [sp, #76]	; 0x4c
   153b8:	ldrh	r3, [r2, r3]
   153bc:	mov	r0, r1
   153c0:	and	r3, r3, #16384	; 0x4000
   153c4:	cmp	r3, #0
   153c8:	ldr	r3, [sp, #60]	; 0x3c
   153cc:	movne	r6, #1
   153d0:	moveq	r6, #0
   153d4:	movne	r2, #0
   153d8:	andeq	r2, r3, #1
   153dc:	cmp	r2, #0
   153e0:	beq	14e14 <__assert_fail@plt+0x3dd0>
   153e4:	ldr	r2, [sp, #60]	; 0x3c
   153e8:	mov	r6, #0
   153ec:	add	r1, r0, r7
   153f0:	mov	ip, #39	; 0x27
   153f4:	str	r6, [sp, #100]	; 0x64
   153f8:	mov	r0, #0
   153fc:	ldr	lr, [sp, #36]	; 0x24
   15400:	str	r8, [sp, #36]	; 0x24
   15404:	ldr	r6, [sp, #40]	; 0x28
   15408:	ldr	r8, [sp, #44]	; 0x2c
   1540c:	b	154bc <__assert_fail@plt+0x4478>
   15410:	cmp	r8, #0
   15414:	bne	159f0 <__assert_fail@plt+0x49ac>
   15418:	ldr	r0, [sp, #52]	; 0x34
   1541c:	eor	r3, fp, #1
   15420:	ands	r3, r0, r3
   15424:	beq	15454 <__assert_fail@plt+0x4410>
   15428:	cmp	sl, r4
   1542c:	add	r0, r4, #1
   15430:	strbhi	ip, [r9, r4]
   15434:	cmp	sl, r0
   15438:	movhi	fp, #36	; 0x24
   1543c:	strbhi	fp, [r9, r0]
   15440:	add	r0, r4, #2
   15444:	mov	fp, r3
   15448:	cmp	sl, r0
   1544c:	add	r4, r4, #3
   15450:	strbhi	ip, [r9, r0]
   15454:	cmp	sl, r4
   15458:	movhi	r3, #92	; 0x5c
   1545c:	strbhi	r3, [r9, r4]
   15460:	add	r3, r4, #1
   15464:	cmp	sl, r3
   15468:	bls	15478 <__assert_fail@plt+0x4434>
   1546c:	lsr	r0, r5, #6
   15470:	add	r0, r0, #48	; 0x30
   15474:	strb	r0, [r9, r3]
   15478:	add	r3, r4, #2
   1547c:	cmp	sl, r3
   15480:	bls	15490 <__assert_fail@plt+0x444c>
   15484:	ubfx	r0, r5, #3, #3
   15488:	add	r0, r0, #48	; 0x30
   1548c:	strb	r0, [r9, r3]
   15490:	add	r7, r7, #1
   15494:	and	r5, r5, #7
   15498:	cmp	r1, r7
   1549c:	add	r5, r5, #48	; 0x30
   154a0:	add	r4, r4, #3
   154a4:	bls	15a04 <__assert_fail@plt+0x49c0>
   154a8:	mov	r0, r2
   154ac:	cmp	sl, r4
   154b0:	strbhi	r5, [r9, r4]
   154b4:	add	r4, r4, #1
   154b8:	ldrb	r5, [lr, #1]!
   154bc:	cmp	r2, #0
   154c0:	bne	15410 <__assert_fail@plt+0x43cc>
   154c4:	eor	r3, r0, #1
   154c8:	cmp	r6, #0
   154cc:	and	r3, r3, fp
   154d0:	uxtb	r3, r3
   154d4:	beq	154e8 <__assert_fail@plt+0x44a4>
   154d8:	cmp	sl, r4
   154dc:	movhi	r6, #92	; 0x5c
   154e0:	strbhi	r6, [r9, r4]
   154e4:	add	r4, r4, #1
   154e8:	add	r7, r7, #1
   154ec:	cmp	r7, r1
   154f0:	bcs	159e4 <__assert_fail@plt+0x49a0>
   154f4:	cmp	r3, #0
   154f8:	beq	15a28 <__assert_fail@plt+0x49e4>
   154fc:	cmp	sl, r4
   15500:	add	r3, r4, #1
   15504:	mov	r6, #0
   15508:	strbhi	ip, [r9, r4]
   1550c:	cmp	sl, r3
   15510:	add	r4, r4, #2
   15514:	mov	fp, r6
   15518:	strbhi	ip, [r9, r3]
   1551c:	b	154ac <__assert_fail@plt+0x4468>
   15520:	ldr	r3, [sp, #36]	; 0x24
   15524:	ldrb	r5, [r3]
   15528:	cmp	r5, #126	; 0x7e
   1552c:	ldrls	pc, [pc, r5, lsl #2]
   15530:	b	15390 <__assert_fail@plt+0x434c>
   15534:	andeq	r5, r1, r4, asr r7
   15538:	muleq	r1, r0, r3
   1553c:	muleq	r1, r0, r3
   15540:	muleq	r1, r0, r3
   15544:	muleq	r1, r0, r3
   15548:	muleq	r1, r0, r3
   1554c:	muleq	r1, r0, r3
   15550:	andeq	r4, r1, r8, asr #24
   15554:	andeq	r4, r1, r0, asr #24
   15558:	andeq	r5, r1, r0, asr #5
   1555c:	andeq	r5, r1, r8, asr #14
   15560:	andeq	r5, r1, r0, lsr #5
   15564:	andeq	r4, r1, ip, ror #21
   15568:	andeq	r5, r1, ip, lsr r7
   1556c:	muleq	r1, r0, r3
   15570:	muleq	r1, r0, r3
   15574:	muleq	r1, r0, r3
   15578:	muleq	r1, r0, r3
   1557c:	muleq	r1, r0, r3
   15580:	muleq	r1, r0, r3
   15584:	muleq	r1, r0, r3
   15588:	muleq	r1, r0, r3
   1558c:	muleq	r1, r0, r3
   15590:	muleq	r1, r0, r3
   15594:	muleq	r1, r0, r3
   15598:	muleq	r1, r0, r3
   1559c:	muleq	r1, r0, r3
   155a0:	muleq	r1, r0, r3
   155a4:	muleq	r1, r0, r3
   155a8:	muleq	r1, r0, r3
   155ac:	muleq	r1, r0, r3
   155b0:	muleq	r1, r0, r3
   155b4:			; <UNDEFINED> instruction: 0x000152b0
   155b8:	andeq	r5, r1, r0, lsr r7
   155bc:	andeq	r5, r1, r0, lsr r7
   155c0:	muleq	r1, r4, r2
   155c4:	andeq	r5, r1, r0, lsr r7
   155c8:	andeq	r5, r1, r4, lsl #5
   155cc:	andeq	r5, r1, r0, lsr r7
   155d0:	strdeq	r5, [r1], -r8
   155d4:	andeq	r5, r1, r0, lsr r7
   155d8:	andeq	r5, r1, r0, lsr r7
   155dc:	andeq	r5, r1, r0, lsr r7
   155e0:	andeq	r5, r1, r4, lsl #5
   155e4:	andeq	r5, r1, r4, lsl #5
   155e8:	andeq	r5, r1, r4, lsl #5
   155ec:	andeq	r5, r1, r4, lsl #5
   155f0:	andeq	r5, r1, r4, lsl #5
   155f4:	andeq	r5, r1, r4, lsl #5
   155f8:	andeq	r5, r1, r4, lsl #5
   155fc:	andeq	r5, r1, r4, lsl #5
   15600:	andeq	r5, r1, r4, lsl #5
   15604:	andeq	r5, r1, r4, lsl #5
   15608:	andeq	r5, r1, r4, lsl #5
   1560c:	andeq	r5, r1, r4, lsl #5
   15610:	andeq	r5, r1, r4, lsl #5
   15614:	andeq	r5, r1, r4, lsl #5
   15618:	andeq	r5, r1, r4, lsl #5
   1561c:	andeq	r5, r1, r4, lsl #5
   15620:	andeq	r5, r1, r0, lsr r7
   15624:	andeq	r5, r1, r0, lsr r7
   15628:	andeq	r5, r1, r0, lsr r7
   1562c:	andeq	r5, r1, r0, lsr r7
   15630:	ldrdeq	r5, [r1], -r0
   15634:	muleq	r1, r0, r3
   15638:	andeq	r5, r1, r4, lsl #5
   1563c:	andeq	r5, r1, r4, lsl #5
   15640:	andeq	r5, r1, r4, lsl #5
   15644:	andeq	r5, r1, r4, lsl #5
   15648:	andeq	r5, r1, r4, lsl #5
   1564c:	andeq	r5, r1, r4, lsl #5
   15650:	andeq	r5, r1, r4, lsl #5
   15654:	andeq	r5, r1, r4, lsl #5
   15658:	andeq	r5, r1, r4, lsl #5
   1565c:	andeq	r5, r1, r4, lsl #5
   15660:	andeq	r5, r1, r4, lsl #5
   15664:	andeq	r5, r1, r4, lsl #5
   15668:	andeq	r5, r1, r4, lsl #5
   1566c:	andeq	r5, r1, r4, lsl #5
   15670:	andeq	r5, r1, r4, lsl #5
   15674:	andeq	r5, r1, r4, lsl #5
   15678:	andeq	r5, r1, r4, lsl #5
   1567c:	andeq	r5, r1, r4, lsl #5
   15680:	andeq	r5, r1, r4, lsl #5
   15684:	andeq	r5, r1, r4, lsl #5
   15688:	andeq	r5, r1, r4, lsl #5
   1568c:	andeq	r5, r1, r4, lsl #5
   15690:	andeq	r5, r1, r4, lsl #5
   15694:	andeq	r5, r1, r4, lsl #5
   15698:	andeq	r5, r1, r4, lsl #5
   1569c:	andeq	r5, r1, r4, lsl #5
   156a0:	andeq	r5, r1, r0, lsr r7
   156a4:	andeq	r5, r1, r0, asr r2
   156a8:	andeq	r5, r1, r4, lsl #5
   156ac:	andeq	r5, r1, r0, lsr r7
   156b0:	andeq	r5, r1, r4, lsl #5
   156b4:	andeq	r5, r1, r0, lsr r7
   156b8:	andeq	r5, r1, r4, lsl #5
   156bc:	andeq	r5, r1, r4, lsl #5
   156c0:	andeq	r5, r1, r4, lsl #5
   156c4:	andeq	r5, r1, r4, lsl #5
   156c8:	andeq	r5, r1, r4, lsl #5
   156cc:	andeq	r5, r1, r4, lsl #5
   156d0:	andeq	r5, r1, r4, lsl #5
   156d4:	andeq	r5, r1, r4, lsl #5
   156d8:	andeq	r5, r1, r4, lsl #5
   156dc:	andeq	r5, r1, r4, lsl #5
   156e0:	andeq	r5, r1, r4, lsl #5
   156e4:	andeq	r5, r1, r4, lsl #5
   156e8:	andeq	r5, r1, r4, lsl #5
   156ec:	andeq	r5, r1, r4, lsl #5
   156f0:	andeq	r5, r1, r4, lsl #5
   156f4:	andeq	r5, r1, r4, lsl #5
   156f8:	andeq	r5, r1, r4, lsl #5
   156fc:	andeq	r5, r1, r4, lsl #5
   15700:	andeq	r5, r1, r4, lsl #5
   15704:	andeq	r5, r1, r4, lsl #5
   15708:	andeq	r5, r1, r4, lsl #5
   1570c:	andeq	r5, r1, r4, lsl #5
   15710:	andeq	r5, r1, r4, lsl #5
   15714:	andeq	r5, r1, r4, lsl #5
   15718:	andeq	r5, r1, r4, lsl #5
   1571c:	andeq	r5, r1, r4, lsl #5
   15720:	andeq	r5, r1, ip, lsr #4
   15724:	andeq	r5, r1, r0, lsr r7
   15728:	andeq	r5, r1, ip, lsr #4
   1572c:	muleq	r1, r4, r2
   15730:	mov	r3, #0
   15734:	str	r3, [sp, #40]	; 0x28
   15738:	b	14e10 <__assert_fail@plt+0x3dcc>
   1573c:	mov	r3, #0
   15740:	str	r3, [sp, #40]	; 0x28
   15744:	b	14da8 <__assert_fail@plt+0x3d64>
   15748:	mov	r3, #0
   1574c:	str	r3, [sp, #40]	; 0x28
   15750:	b	14ddc <__assert_fail@plt+0x3d98>
   15754:	ldr	r3, [sp, #44]	; 0x2c
   15758:	cmp	r3, #0
   1575c:	beq	14cf4 <__assert_fail@plt+0x3cb0>
   15760:	ldr	r3, [sp, #52]	; 0x34
   15764:	mov	fp, r9
   15768:	str	r3, [sp, #60]	; 0x3c
   1576c:	b	14e6c <__assert_fail@plt+0x3e28>
   15770:	ldr	r3, [sp, #44]	; 0x2c
   15774:	cmp	r3, #0
   15778:	bne	15bac <__assert_fail@plt+0x4b68>
   1577c:	str	r3, [sp, #40]	; 0x28
   15780:	cmp	sl, #0
   15784:	ldr	r3, [sp, #84]	; 0x54
   15788:	clz	r3, r3
   1578c:	lsr	r3, r3, #5
   15790:	moveq	r3, #0
   15794:	cmp	r3, #0
   15798:	strne	sl, [sp, #84]	; 0x54
   1579c:	movne	sl, #0
   157a0:	bne	157d0 <__assert_fail@plt+0x478c>
   157a4:	cmp	sl, r4
   157a8:	movhi	r3, #39	; 0x27
   157ac:	strbhi	r3, [r9, r4]
   157b0:	add	r3, r4, #1
   157b4:	cmp	sl, r3
   157b8:	movhi	r2, #92	; 0x5c
   157bc:	strbhi	r2, [r9, r3]
   157c0:	add	r3, r4, #2
   157c4:	cmp	sl, r3
   157c8:	movhi	r2, #39	; 0x27
   157cc:	strbhi	r2, [r9, r3]
   157d0:	mov	r3, #0
   157d4:	add	r4, r4, #3
   157d8:	str	r6, [sp, #80]	; 0x50
   157dc:	mov	fp, r3
   157e0:	mov	r5, #39	; 0x27
   157e4:	b	14cb0 <__assert_fail@plt+0x3c6c>
   157e8:	ldr	r3, [sp, #44]	; 0x2c
   157ec:	cmp	r3, #0
   157f0:	bne	15bac <__assert_fail@plt+0x4b68>
   157f4:	mov	r6, #0
   157f8:	mov	r5, #63	; 0x3f
   157fc:	str	r3, [sp, #40]	; 0x28
   15800:	mov	r3, fp
   15804:	b	14cb0 <__assert_fail@plt+0x3c6c>
   15808:	mov	r2, #0
   1580c:	mov	r3, #0
   15810:	cmn	r8, #1
   15814:	strd	r2, [sp, #128]	; 0x80
   15818:	bne	15828 <__assert_fail@plt+0x47e4>
   1581c:	ldr	r0, [sp, #28]
   15820:	bl	10f30 <strlen@plt>
   15824:	mov	r8, r0
   15828:	str	r9, [sp, #100]	; 0x64
   1582c:	mov	r3, #0
   15830:	strd	sl, [sp, #104]	; 0x68
   15834:	ldr	sl, [sp, #28]
   15838:	str	r5, [sp, #112]	; 0x70
   1583c:	mov	r5, r3
   15840:	ldr	r9, [sp, #68]	; 0x44
   15844:	str	r4, [sp, #116]	; 0x74
   15848:	add	r4, r7, r5
   1584c:	add	r3, sp, #128	; 0x80
   15850:	add	fp, sl, r4
   15854:	sub	r2, r8, r4
   15858:	mov	r1, fp
   1585c:	add	r0, sp, #124	; 0x7c
   15860:	bl	1a384 <__assert_fail@plt+0x9340>
   15864:	subs	r1, r0, #0
   15868:	beq	158a8 <__assert_fail@plt+0x4864>
   1586c:	cmn	r1, #1
   15870:	beq	15c00 <__assert_fail@plt+0x4bbc>
   15874:	cmn	r1, #2
   15878:	beq	15c20 <__assert_fail@plt+0x4bdc>
   1587c:	cmp	r9, #0
   15880:	bne	158d8 <__assert_fail@plt+0x4894>
   15884:	ldr	r0, [sp, #124]	; 0x7c
   15888:	add	r5, r5, r1
   1588c:	bl	10e64 <iswprint@plt>
   15890:	cmp	r0, #0
   15894:	add	r0, sp, #128	; 0x80
   15898:	moveq	r6, #0
   1589c:	bl	10e10 <mbsinit@plt>
   158a0:	cmp	r0, #0
   158a4:	beq	15848 <__assert_fail@plt+0x4804>
   158a8:	ldr	r3, [sp, #60]	; 0x3c
   158ac:	add	r9, sp, #100	; 0x64
   158b0:	mov	r0, r5
   158b4:	ldm	r9, {r9, sl, fp}
   158b8:	eor	r2, r6, #1
   158bc:	ldr	r5, [sp, #112]	; 0x70
   158c0:	and	r2, r2, r3
   158c4:	uxtb	r2, r2
   158c8:	ldr	r4, [sp, #116]	; 0x74
   158cc:	cmp	r0, #1
   158d0:	bhi	153ec <__assert_fail@plt+0x43a8>
   158d4:	b	153dc <__assert_fail@plt+0x4398>
   158d8:	cmp	r1, #1
   158dc:	beq	15884 <__assert_fail@plt+0x4840>
   158e0:	add	r2, r4, #1
   158e4:	add	r3, sl, r1
   158e8:	add	r2, sl, r2
   158ec:	add	r4, r3, r4
   158f0:	ldrb	r3, [r2], #1
   158f4:	sub	r3, r3, #91	; 0x5b
   158f8:	cmp	r3, #33	; 0x21
   158fc:	ldrls	pc, [pc, r3, lsl #2]
   15900:	b	1598c <__assert_fail@plt+0x4948>
   15904:	muleq	r1, r8, r9
   15908:	muleq	r1, r8, r9
   1590c:	andeq	r5, r1, ip, lsl #19
   15910:	muleq	r1, r8, r9
   15914:	andeq	r5, r1, ip, lsl #19
   15918:	muleq	r1, r8, r9
   1591c:	andeq	r5, r1, ip, lsl #19
   15920:	andeq	r5, r1, ip, lsl #19
   15924:	andeq	r5, r1, ip, lsl #19
   15928:	andeq	r5, r1, ip, lsl #19
   1592c:	andeq	r5, r1, ip, lsl #19
   15930:	andeq	r5, r1, ip, lsl #19
   15934:	andeq	r5, r1, ip, lsl #19
   15938:	andeq	r5, r1, ip, lsl #19
   1593c:	andeq	r5, r1, ip, lsl #19
   15940:	andeq	r5, r1, ip, lsl #19
   15944:	andeq	r5, r1, ip, lsl #19
   15948:	andeq	r5, r1, ip, lsl #19
   1594c:	andeq	r5, r1, ip, lsl #19
   15950:	andeq	r5, r1, ip, lsl #19
   15954:	andeq	r5, r1, ip, lsl #19
   15958:	andeq	r5, r1, ip, lsl #19
   1595c:	andeq	r5, r1, ip, lsl #19
   15960:	andeq	r5, r1, ip, lsl #19
   15964:	andeq	r5, r1, ip, lsl #19
   15968:	andeq	r5, r1, ip, lsl #19
   1596c:	andeq	r5, r1, ip, lsl #19
   15970:	andeq	r5, r1, ip, lsl #19
   15974:	andeq	r5, r1, ip, lsl #19
   15978:	andeq	r5, r1, ip, lsl #19
   1597c:	andeq	r5, r1, ip, lsl #19
   15980:	andeq	r5, r1, ip, lsl #19
   15984:	andeq	r5, r1, ip, lsl #19
   15988:	muleq	r1, r8, r9
   1598c:	cmp	r4, r2
   15990:	bne	158f0 <__assert_fail@plt+0x48ac>
   15994:	b	15884 <__assert_fail@plt+0x4840>
   15998:	mov	r3, #2
   1599c:	ldr	fp, [sp, #100]	; 0x64
   159a0:	str	r3, [sp, #176]	; 0xb0
   159a4:	ldr	sl, [sp, #104]	; 0x68
   159a8:	b	14e6c <__assert_fail@plt+0x3e28>
   159ac:	ldr	r2, [sp, #52]	; 0x34
   159b0:	mov	fp, r9
   159b4:	ldr	r3, [sp, #60]	; 0x3c
   159b8:	and	r3, r3, r2
   159bc:	str	r3, [sp, #60]	; 0x3c
   159c0:	b	14e6c <__assert_fail@plt+0x3e28>
   159c4:	cmp	sl, r4
   159c8:	movhi	r2, fp
   159cc:	bhi	14d44 <__assert_fail@plt+0x3d00>
   159d0:	mov	r2, r4
   159d4:	b	14d54 <__assert_fail@plt+0x3d10>
   159d8:	mov	r6, r3
   159dc:	mov	r5, #63	; 0x3f
   159e0:	b	14e14 <__assert_fail@plt+0x3dd0>
   159e4:	ldr	r8, [sp, #36]	; 0x24
   159e8:	ldr	r6, [sp, #100]	; 0x64
   159ec:	b	14cc0 <__assert_fail@plt+0x3c7c>
   159f0:	mov	fp, r9
   159f4:	ldr	r8, [sp, #36]	; 0x24
   159f8:	ldr	r3, [sp, #52]	; 0x34
   159fc:	str	r3, [sp, #60]	; 0x3c
   15a00:	b	14e6c <__assert_fail@plt+0x3e28>
   15a04:	ldr	r8, [sp, #36]	; 0x24
   15a08:	ldr	r6, [sp, #100]	; 0x64
   15a0c:	b	14b58 <__assert_fail@plt+0x3b14>
   15a10:	mov	r3, #0
   15a14:	add	r4, r4, #4
   15a18:	mov	fp, r2
   15a1c:	mov	r6, r3
   15a20:	mov	r5, #48	; 0x30
   15a24:	b	14cb0 <__assert_fail@plt+0x3c6c>
   15a28:	mov	r6, r3
   15a2c:	b	154ac <__assert_fail@plt+0x4468>
   15a30:	mov	r3, #1
   15a34:	movw	r2, #46268	; 0xb4bc
   15a38:	movt	r2, #1
   15a3c:	mov	r4, r3
   15a40:	mov	r9, sl
   15a44:	str	r3, [sp, #32]
   15a48:	str	sl, [sp, #44]	; 0x2c
   15a4c:	str	r3, [sp, #48]	; 0x30
   15a50:	str	sl, [sp, #52]	; 0x34
   15a54:	str	r3, [sp, #56]	; 0x38
   15a58:	str	r3, [sp, #60]	; 0x3c
   15a5c:	str	sl, [sp, #64]	; 0x40
   15a60:	str	sl, [sp, #68]	; 0x44
   15a64:	str	r2, [sp, #72]	; 0x48
   15a68:	str	sl, [sp, #80]	; 0x50
   15a6c:	str	sl, [sp, #84]	; 0x54
   15a70:	str	sl, [sp, #88]	; 0x58
   15a74:	b	14564 <__assert_fail@plt+0x3520>
   15a78:	mov	r3, #0
   15a7c:	mov	r5, #48	; 0x30
   15a80:	mov	r6, r3
   15a84:	b	14cb0 <__assert_fail@plt+0x3c6c>
   15a88:	cmp	sl, r4
   15a8c:	mov	r5, #48	; 0x30
   15a90:	movhi	r3, #48	; 0x30
   15a94:	strbhi	r3, [r9, r4]
   15a98:	add	r3, r2, #2
   15a9c:	add	r4, r2, #3
   15aa0:	cmp	sl, r3
   15aa4:	movhi	r1, #48	; 0x30
   15aa8:	strbhi	r1, [r9, r3]
   15aac:	mov	r3, #0
   15ab0:	b	14d8c <__assert_fail@plt+0x3d48>
   15ab4:	ldr	r3, [sp, #48]	; 0x30
   15ab8:	str	r3, [sp, #40]	; 0x28
   15abc:	b	15398 <__assert_fail@plt+0x4354>
   15ac0:	ldr	r2, [sp, #28]
   15ac4:	ldrb	r2, [r2, r3]
   15ac8:	sub	r1, r2, #33	; 0x21
   15acc:	cmp	r1, #29
   15ad0:	ldrls	pc, [pc, r1, lsl #2]
   15ad4:	b	14e10 <__assert_fail@plt+0x3dcc>
   15ad8:	andeq	r5, r1, r0, asr fp
   15adc:	andeq	r4, r1, r0, lsl lr
   15ae0:	andeq	r4, r1, r0, lsl lr
   15ae4:	andeq	r4, r1, r0, lsl lr
   15ae8:	andeq	r4, r1, r0, lsl lr
   15aec:	andeq	r4, r1, r0, lsl lr
   15af0:	andeq	r5, r1, r0, asr fp
   15af4:	andeq	r5, r1, r0, asr fp
   15af8:	andeq	r5, r1, r0, asr fp
   15afc:	andeq	r4, r1, r0, lsl lr
   15b00:	andeq	r4, r1, r0, lsl lr
   15b04:	andeq	r4, r1, r0, lsl lr
   15b08:	andeq	r5, r1, r0, asr fp
   15b0c:	andeq	r4, r1, r0, lsl lr
   15b10:	andeq	r5, r1, r0, asr fp
   15b14:	andeq	r4, r1, r0, lsl lr
   15b18:	andeq	r4, r1, r0, lsl lr
   15b1c:	andeq	r4, r1, r0, lsl lr
   15b20:	andeq	r4, r1, r0, lsl lr
   15b24:	andeq	r4, r1, r0, lsl lr
   15b28:	andeq	r4, r1, r0, lsl lr
   15b2c:	andeq	r4, r1, r0, lsl lr
   15b30:	andeq	r4, r1, r0, lsl lr
   15b34:	andeq	r4, r1, r0, lsl lr
   15b38:	andeq	r4, r1, r0, lsl lr
   15b3c:	andeq	r4, r1, r0, lsl lr
   15b40:	andeq	r4, r1, r0, lsl lr
   15b44:	andeq	r5, r1, r0, asr fp
   15b48:	andeq	r5, r1, r0, asr fp
   15b4c:	andeq	r5, r1, r0, asr fp
   15b50:	ldr	r1, [sp, #44]	; 0x2c
   15b54:	cmp	r1, #0
   15b58:	bne	15db8 <__assert_fail@plt+0x4d74>
   15b5c:	cmp	sl, r4
   15b60:	mov	r7, r3
   15b64:	movhi	r1, #63	; 0x3f
   15b68:	mov	r5, r2
   15b6c:	mov	r3, fp
   15b70:	strbhi	r1, [r9, r4]
   15b74:	add	r1, r4, #1
   15b78:	cmp	sl, r1
   15b7c:	movhi	r0, #34	; 0x22
   15b80:	strbhi	r0, [r9, r1]
   15b84:	add	r1, r4, #2
   15b88:	cmp	sl, r1
   15b8c:	movhi	r0, #34	; 0x22
   15b90:	strbhi	r0, [r9, r1]
   15b94:	add	r1, r4, #3
   15b98:	add	r4, r4, #4
   15b9c:	cmp	sl, r1
   15ba0:	movhi	r0, #63	; 0x3f
   15ba4:	strbhi	r0, [r9, r1]
   15ba8:	b	14d8c <__assert_fail@plt+0x3d48>
   15bac:	mov	fp, r9
   15bb0:	b	14e6c <__assert_fail@plt+0x3e28>
   15bb4:	ldr	r3, [sp, #188]	; 0xbc
   15bb8:	ldrb	r3, [r3]
   15bbc:	cmp	r3, #0
   15bc0:	beq	144fc <__assert_fail@plt+0x34b8>
   15bc4:	ldr	r2, [sp, #188]	; 0xbc
   15bc8:	cmp	sl, r4
   15bcc:	bls	15bec <__assert_fail@plt+0x4ba8>
   15bd0:	strb	r3, [fp, r4]
   15bd4:	add	r4, r4, #1
   15bd8:	ldrb	r3, [r2, #1]!
   15bdc:	cmp	r3, #0
   15be0:	beq	144fc <__assert_fail@plt+0x34b8>
   15be4:	cmp	sl, r4
   15be8:	bhi	15bd0 <__assert_fail@plt+0x4b8c>
   15bec:	ldrb	r3, [r2, #1]!
   15bf0:	add	r4, r4, #1
   15bf4:	cmp	r3, #0
   15bf8:	bne	15bc8 <__assert_fail@plt+0x4b84>
   15bfc:	b	144fc <__assert_fail@plt+0x34b8>
   15c00:	add	r9, sp, #100	; 0x64
   15c04:	mov	r0, r5
   15c08:	ldr	r2, [sp, #60]	; 0x3c
   15c0c:	mov	r6, #0
   15c10:	ldm	r9, {r9, sl, fp}
   15c14:	ldr	r5, [sp, #112]	; 0x70
   15c18:	ldr	r4, [sp, #116]	; 0x74
   15c1c:	b	158cc <__assert_fail@plt+0x4888>
   15c20:	cmp	r4, r8
   15c24:	add	r9, sp, #100	; 0x64
   15c28:	mov	r1, r4
   15c2c:	mov	r2, fp
   15c30:	ldm	r9, {r9, sl, fp}
   15c34:	mov	r3, r5
   15c38:	mov	r0, r5
   15c3c:	ldr	r5, [sp, #112]	; 0x70
   15c40:	ldr	r4, [sp, #116]	; 0x74
   15c44:	bcs	15c78 <__assert_fail@plt+0x4c34>
   15c48:	ldrb	r6, [r2]
   15c4c:	cmp	r6, #0
   15c50:	bne	15c64 <__assert_fail@plt+0x4c20>
   15c54:	b	15db0 <__assert_fail@plt+0x4d6c>
   15c58:	ldrb	r6, [r2, #1]!
   15c5c:	cmp	r6, #0
   15c60:	beq	15d48 <__assert_fail@plt+0x4d04>
   15c64:	add	r3, r3, #1
   15c68:	add	r1, r7, r3
   15c6c:	cmp	r8, r1
   15c70:	bhi	15c58 <__assert_fail@plt+0x4c14>
   15c74:	mov	r0, r3
   15c78:	mov	r6, #0
   15c7c:	ldr	r2, [sp, #60]	; 0x3c
   15c80:	b	158cc <__assert_fail@plt+0x4888>
   15c84:	mov	r3, #1
   15c88:	mov	r4, #0
   15c8c:	mov	r9, r4
   15c90:	str	r3, [sp, #32]
   15c94:	str	r3, [sp, #44]	; 0x2c
   15c98:	str	r3, [sp, #48]	; 0x30
   15c9c:	str	r4, [sp, #52]	; 0x34
   15ca0:	str	r3, [sp, #56]	; 0x38
   15ca4:	str	r3, [sp, #60]	; 0x3c
   15ca8:	str	r3, [sp, #88]	; 0x58
   15cac:	movw	r3, #46268	; 0xb4bc
   15cb0:	movt	r3, #1
   15cb4:	str	r4, [sp, #64]	; 0x40
   15cb8:	str	r4, [sp, #68]	; 0x44
   15cbc:	str	r3, [sp, #72]	; 0x48
   15cc0:	str	r4, [sp, #80]	; 0x50
   15cc4:	str	r4, [sp, #84]	; 0x54
   15cc8:	b	14564 <__assert_fail@plt+0x3520>
   15ccc:	mov	fp, r9
   15cd0:	b	14e80 <__assert_fail@plt+0x3e3c>
   15cd4:	ldr	r3, [sp, #48]	; 0x30
   15cd8:	b	157f4 <__assert_fail@plt+0x47b0>
   15cdc:	mov	r2, r3
   15ce0:	ldr	r3, [sp, #72]	; 0x48
   15ce4:	cmp	r3, #0
   15ce8:	moveq	r2, #0
   15cec:	andne	r2, r2, #1
   15cf0:	cmp	r2, #0
   15cf4:	beq	15d24 <__assert_fail@plt+0x4ce0>
   15cf8:	mov	r2, r3
   15cfc:	ldrb	r3, [r3]
   15d00:	cmp	r3, #0
   15d04:	beq	15d24 <__assert_fail@plt+0x4ce0>
   15d08:	cmp	sl, r4
   15d0c:	bls	15d34 <__assert_fail@plt+0x4cf0>
   15d10:	strb	r3, [fp, r4]
   15d14:	add	r4, r4, #1
   15d18:	ldrb	r3, [r2, #1]!
   15d1c:	cmp	r3, #0
   15d20:	bne	15d08 <__assert_fail@plt+0x4cc4>
   15d24:	cmp	sl, r4
   15d28:	movhi	r3, #0
   15d2c:	strbhi	r3, [fp, r4]
   15d30:	b	14ebc <__assert_fail@plt+0x3e78>
   15d34:	ldrb	r3, [r2, #1]!
   15d38:	add	r4, r4, #1
   15d3c:	cmp	r3, #0
   15d40:	bne	15d08 <__assert_fail@plt+0x4cc4>
   15d44:	b	15d24 <__assert_fail@plt+0x4ce0>
   15d48:	mov	r0, r3
   15d4c:	ldr	r2, [sp, #60]	; 0x3c
   15d50:	b	158cc <__assert_fail@plt+0x4888>
   15d54:	mov	ip, #5
   15d58:	mov	r3, r8
   15d5c:	ldr	r1, [sp, #84]	; 0x54
   15d60:	str	ip, [sp]
   15d64:	ldr	r2, [sp, #180]	; 0xb4
   15d68:	ldr	ip, [sp, #188]	; 0xbc
   15d6c:	ldr	r0, [sp, #184]	; 0xb8
   15d70:	str	r2, [sp, #4]
   15d74:	ldr	r2, [sp, #28]
   15d78:	str	ip, [sp, #12]
   15d7c:	ldr	ip, [sp, #192]	; 0xc0
   15d80:	str	r0, [sp, #8]
   15d84:	mov	r0, fp
   15d88:	str	ip, [sp, #16]
   15d8c:	bl	14440 <__assert_fail@plt+0x33fc>
   15d90:	mov	r4, r0
   15d94:	b	14ebc <__assert_fail@plt+0x3e78>
   15d98:	mov	r6, r3
   15d9c:	str	r3, [sp, #40]	; 0x28
   15da0:	b	14e2c <__assert_fail@plt+0x3de8>
   15da4:	mov	r3, #2
   15da8:	str	r3, [sp, #176]	; 0xb0
   15dac:	b	14e6c <__assert_fail@plt+0x3e28>
   15db0:	ldr	r2, [sp, #60]	; 0x3c
   15db4:	b	158cc <__assert_fail@plt+0x4888>
   15db8:	mov	r3, #5
   15dbc:	mov	fp, r9
   15dc0:	str	r3, [sp, #176]	; 0xb0
   15dc4:	b	14e80 <__assert_fail@plt+0x3e3c>
   15dc8:	mov	r1, #1
   15dcc:	mov	r9, #0
   15dd0:	mov	r3, r9
   15dd4:	mov	r2, r9
   15dd8:	str	r1, [sp, #32]
   15ddc:	str	sl, [sp, #84]	; 0x54
   15de0:	b	14c08 <__assert_fail@plt+0x3bc4>
   15de4:	mov	r3, #0
   15de8:	mov	r2, #1
   15dec:	mov	r9, r3
   15df0:	mov	r4, r3
   15df4:	str	r2, [sp, #32]
   15df8:	strd	r2, [sp, #44]	; 0x2c
   15dfc:	strd	r2, [sp, #56]	; 0x38
   15e00:	str	r3, [sp, #80]	; 0x50
   15e04:	str	r3, [sp, #84]	; 0x54
   15e08:	str	r3, [sp, #88]	; 0x58
   15e0c:	movw	r3, #46288	; 0xb4d0
   15e10:	movt	r3, #1
   15e14:	str	r2, [sp, #52]	; 0x34
   15e18:	str	r2, [sp, #64]	; 0x40
   15e1c:	str	r2, [sp, #68]	; 0x44
   15e20:	str	r3, [sp, #72]	; 0x48
   15e24:	b	14564 <__assert_fail@plt+0x3520>
   15e28:	bl	1102c <abort@plt>
   15e2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e30:	mov	r4, r0
   15e34:	mov	r5, r3
   15e38:	strd	r6, [sp, #8]
   15e3c:	movw	r7, #49436	; 0xc11c
   15e40:	movt	r7, #2
   15e44:	strd	r8, [sp, #16]
   15e48:	strd	sl, [sp, #24]
   15e4c:	mov	sl, r1
   15e50:	mov	fp, r2
   15e54:	str	lr, [sp, #32]
   15e58:	sub	sp, sp, #60	; 0x3c
   15e5c:	bl	10f48 <__errno_location@plt>
   15e60:	mov	r8, r0
   15e64:	cmn	r4, #-2147483647	; 0x80000001
   15e68:	ldr	r6, [r7]
   15e6c:	movne	r0, #0
   15e70:	moveq	r0, #1
   15e74:	ldr	r3, [r8]
   15e78:	orrs	r0, r0, r4, lsr #31
   15e7c:	str	r3, [sp, #28]
   15e80:	bne	16010 <__assert_fail@plt+0x4fcc>
   15e84:	ldr	r3, [r7, #4]
   15e88:	cmp	r3, r4
   15e8c:	bgt	15eec <__assert_fail@plt+0x4ea8>
   15e90:	add	r1, r7, #8
   15e94:	sub	r2, r4, r3
   15e98:	str	r3, [sp, #52]	; 0x34
   15e9c:	cmp	r6, r1
   15ea0:	add	r2, r2, #1
   15ea4:	beq	15fe8 <__assert_fail@plt+0x4fa4>
   15ea8:	mov	r1, #8
   15eac:	mov	r0, r6
   15eb0:	mvn	r3, #-2147483648	; 0x80000000
   15eb4:	str	r1, [sp]
   15eb8:	add	r1, sp, #52	; 0x34
   15ebc:	bl	1881c <__assert_fail@plt+0x77d8>
   15ec0:	mov	r6, r0
   15ec4:	str	r0, [r7]
   15ec8:	ldr	r0, [r7, #4]
   15ecc:	mov	r1, #0
   15ed0:	ldr	r2, [sp, #52]	; 0x34
   15ed4:	sub	r2, r2, r0
   15ed8:	add	r0, r6, r0, lsl #3
   15edc:	lsl	r2, r2, #3
   15ee0:	bl	10f60 <memset@plt>
   15ee4:	ldr	r3, [sp, #52]	; 0x34
   15ee8:	str	r3, [r7, #4]
   15eec:	ldr	r1, [r5, #4]
   15ef0:	add	r0, r6, r4, lsl #3
   15ef4:	add	ip, r5, #8
   15ef8:	mov	r3, fp
   15efc:	mov	r2, sl
   15f00:	ldr	r7, [r0, #4]
   15f04:	str	r0, [sp, #36]	; 0x24
   15f08:	str	ip, [sp, #40]	; 0x28
   15f0c:	orr	r0, r1, #1
   15f10:	ldr	r9, [r6, r4, lsl #3]
   15f14:	str	ip, [sp, #8]
   15f18:	ldr	lr, [r5, #44]	; 0x2c
   15f1c:	str	r0, [sp, #4]
   15f20:	ldr	ip, [r5]
   15f24:	mov	r1, r9
   15f28:	str	ip, [sp, #32]
   15f2c:	ldr	ip, [r5, #40]	; 0x28
   15f30:	str	ip, [sp, #12]
   15f34:	ldr	ip, [sp, #32]
   15f38:	str	lr, [sp, #16]
   15f3c:	str	r0, [sp, #44]	; 0x2c
   15f40:	mov	r0, r7
   15f44:	str	ip, [sp]
   15f48:	bl	14440 <__assert_fail@plt+0x33fc>
   15f4c:	cmp	r9, r0
   15f50:	bhi	15fc0 <__assert_fail@plt+0x4f7c>
   15f54:	add	r9, r0, #1
   15f58:	movw	r3, #49672	; 0xc208
   15f5c:	movt	r3, #2
   15f60:	cmp	r7, r3
   15f64:	str	r9, [r6, r4, lsl #3]
   15f68:	beq	15f74 <__assert_fail@plt+0x4f30>
   15f6c:	mov	r0, r7
   15f70:	bl	13db0 <__assert_fail@plt+0x2d6c>
   15f74:	mov	r0, r9
   15f78:	bl	18578 <__assert_fail@plt+0x7534>
   15f7c:	ldr	ip, [r5]
   15f80:	mov	r3, fp
   15f84:	mov	r2, sl
   15f88:	mov	r1, r9
   15f8c:	mov	r7, r0
   15f90:	ldr	lr, [sp, #36]	; 0x24
   15f94:	ldr	r4, [r5, #40]	; 0x28
   15f98:	str	r0, [lr, #4]
   15f9c:	ldr	lr, [r5, #44]	; 0x2c
   15fa0:	str	ip, [sp]
   15fa4:	ldr	ip, [sp, #44]	; 0x2c
   15fa8:	str	ip, [sp, #4]
   15fac:	ldr	ip, [sp, #40]	; 0x28
   15fb0:	str	r4, [sp, #12]
   15fb4:	str	lr, [sp, #16]
   15fb8:	str	ip, [sp, #8]
   15fbc:	bl	14440 <__assert_fail@plt+0x33fc>
   15fc0:	ldr	r3, [sp, #28]
   15fc4:	mov	r0, r7
   15fc8:	str	r3, [r8]
   15fcc:	add	sp, sp, #60	; 0x3c
   15fd0:	ldrd	r4, [sp]
   15fd4:	ldrd	r6, [sp, #8]
   15fd8:	ldrd	r8, [sp, #16]
   15fdc:	ldrd	sl, [sp, #24]
   15fe0:	add	sp, sp, #32
   15fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fe8:	mov	r1, #8
   15fec:	mvn	r3, #-2147483648	; 0x80000000
   15ff0:	str	r1, [sp]
   15ff4:	add	r1, sp, #52	; 0x34
   15ff8:	bl	1881c <__assert_fail@plt+0x77d8>
   15ffc:	ldrd	r2, [r7, #8]
   16000:	mov	r6, r0
   16004:	str	r0, [r7]
   16008:	strd	r2, [r0]
   1600c:	b	15ec8 <__assert_fail@plt+0x4e84>
   16010:	bl	1102c <abort@plt>
   16014:	strd	r4, [sp, #-16]!
   16018:	mov	r5, r0
   1601c:	str	r6, [sp, #8]
   16020:	str	lr, [sp, #12]
   16024:	bl	10f48 <__errno_location@plt>
   16028:	mov	r4, r0
   1602c:	cmp	r5, #0
   16030:	ldr	r0, [pc, #32]	; 16058 <__assert_fail@plt+0x5014>
   16034:	mov	r1, #48	; 0x30
   16038:	movne	r0, r5
   1603c:	ldr	r6, [r4]
   16040:	bl	189bc <__assert_fail@plt+0x7978>
   16044:	str	r6, [r4]
   16048:	ldrd	r4, [sp]
   1604c:	ldr	r6, [sp, #8]
   16050:	add	sp, sp, #12
   16054:	pop	{pc}		; (ldr pc, [sp], #4)
   16058:	andeq	ip, r2, r8, lsl #6
   1605c:	ldr	r3, [pc, #12]	; 16070 <__assert_fail@plt+0x502c>
   16060:	cmp	r0, #0
   16064:	moveq	r0, r3
   16068:	ldr	r0, [r0]
   1606c:	bx	lr
   16070:	andeq	ip, r2, r8, lsl #6
   16074:	ldr	r3, [pc, #12]	; 16088 <__assert_fail@plt+0x5044>
   16078:	cmp	r0, #0
   1607c:	moveq	r0, r3
   16080:	str	r1, [r0]
   16084:	bx	lr
   16088:	andeq	ip, r2, r8, lsl #6
   1608c:	ldr	r3, [pc, #52]	; 160c8 <__assert_fail@plt+0x5084>
   16090:	cmp	r0, #0
   16094:	push	{lr}		; (str lr, [sp, #-4]!)
   16098:	lsr	lr, r1, #5
   1609c:	and	r1, r1, #31
   160a0:	moveq	r0, r3
   160a4:	add	r3, r0, #8
   160a8:	ldr	ip, [r3, lr, lsl #2]
   160ac:	lsr	r0, ip, r1
   160b0:	eor	r2, r2, r0
   160b4:	and	r0, r0, #1
   160b8:	and	r2, r2, #1
   160bc:	eor	r1, ip, r2, lsl r1
   160c0:	str	r1, [r3, lr, lsl #2]
   160c4:	pop	{pc}		; (ldr pc, [sp], #4)
   160c8:	andeq	ip, r2, r8, lsl #6
   160cc:	ldr	r3, [pc, #16]	; 160e4 <__assert_fail@plt+0x50a0>
   160d0:	cmp	r0, #0
   160d4:	movne	r3, r0
   160d8:	ldr	r0, [r3, #4]
   160dc:	str	r1, [r3, #4]
   160e0:	bx	lr
   160e4:	andeq	ip, r2, r8, lsl #6
   160e8:	ldr	r3, [pc, #48]	; 16120 <__assert_fail@plt+0x50dc>
   160ec:	cmp	r0, #0
   160f0:	mov	ip, #10
   160f4:	moveq	r0, r3
   160f8:	cmp	r2, #0
   160fc:	cmpne	r1, #0
   16100:	str	ip, [r0]
   16104:	beq	16114 <__assert_fail@plt+0x50d0>
   16108:	str	r1, [r0, #40]	; 0x28
   1610c:	str	r2, [r0, #44]	; 0x2c
   16110:	bx	lr
   16114:	str	r4, [sp, #-8]!
   16118:	str	lr, [sp, #4]
   1611c:	bl	1102c <abort@plt>
   16120:	andeq	ip, r2, r8, lsl #6
   16124:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16128:	strd	r6, [sp, #8]
   1612c:	mov	r7, r0
   16130:	mov	r6, r1
   16134:	strd	r8, [sp, #16]
   16138:	mov	r8, r2
   1613c:	mov	r9, r3
   16140:	str	lr, [sp, #24]
   16144:	sub	sp, sp, #28
   16148:	ldr	r4, [sp, #56]	; 0x38
   1614c:	ldr	ip, [pc, #104]	; 161bc <__assert_fail@plt+0x5178>
   16150:	cmp	r4, #0
   16154:	moveq	r4, ip
   16158:	bl	10f48 <__errno_location@plt>
   1615c:	ldr	ip, [r4, #44]	; 0x2c
   16160:	mov	r5, r0
   16164:	mov	r1, r6
   16168:	add	lr, r4, #8
   1616c:	mov	r3, r9
   16170:	ldr	r6, [r5]
   16174:	mov	r2, r8
   16178:	mov	r0, r7
   1617c:	str	ip, [sp, #16]
   16180:	ldr	ip, [r4, #40]	; 0x28
   16184:	str	lr, [sp, #8]
   16188:	str	ip, [sp, #12]
   1618c:	ldr	ip, [r4, #4]
   16190:	str	ip, [sp, #4]
   16194:	ldr	ip, [r4]
   16198:	str	ip, [sp]
   1619c:	bl	14440 <__assert_fail@plt+0x33fc>
   161a0:	str	r6, [r5]
   161a4:	add	sp, sp, #28
   161a8:	ldrd	r4, [sp]
   161ac:	ldrd	r6, [sp, #8]
   161b0:	ldrd	r8, [sp, #16]
   161b4:	add	sp, sp, #24
   161b8:	pop	{pc}		; (ldr pc, [sp], #4)
   161bc:	andeq	ip, r2, r8, lsl #6
   161c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   161c4:	cmp	r2, #0
   161c8:	ldr	r4, [pc, #192]	; 16290 <__assert_fail@plt+0x524c>
   161cc:	movne	r4, r2
   161d0:	strd	r6, [sp, #8]
   161d4:	strd	r8, [sp, #16]
   161d8:	mov	r9, r1
   161dc:	mov	r8, r0
   161e0:	strd	sl, [sp, #24]
   161e4:	str	lr, [sp, #32]
   161e8:	sub	sp, sp, #36	; 0x24
   161ec:	bl	10f48 <__errno_location@plt>
   161f0:	ldr	r5, [r4, #4]
   161f4:	mov	r6, r0
   161f8:	add	r7, r4, #8
   161fc:	mov	r1, #0
   16200:	mov	r3, r9
   16204:	ldr	ip, [r4, #44]	; 0x2c
   16208:	mov	r2, r8
   1620c:	mov	r0, r1
   16210:	ldr	sl, [r6]
   16214:	orr	r5, r5, #1
   16218:	str	ip, [sp, #16]
   1621c:	ldr	ip, [r4, #40]	; 0x28
   16220:	stmib	sp, {r5, r7, ip}
   16224:	ldr	ip, [r4]
   16228:	str	ip, [sp]
   1622c:	bl	14440 <__assert_fail@plt+0x33fc>
   16230:	add	r1, r0, #1
   16234:	mov	r0, r1
   16238:	str	r1, [sp, #28]
   1623c:	bl	18578 <__assert_fail@plt+0x7534>
   16240:	ldr	ip, [r4, #44]	; 0x2c
   16244:	mov	fp, r0
   16248:	mov	r3, r9
   1624c:	mov	r2, r8
   16250:	ldr	r1, [sp, #28]
   16254:	str	ip, [sp, #16]
   16258:	ldr	ip, [r4, #40]	; 0x28
   1625c:	stmib	sp, {r5, r7, ip}
   16260:	ldr	ip, [r4]
   16264:	str	ip, [sp]
   16268:	bl	14440 <__assert_fail@plt+0x33fc>
   1626c:	mov	r0, fp
   16270:	str	sl, [r6]
   16274:	add	sp, sp, #36	; 0x24
   16278:	ldrd	r4, [sp]
   1627c:	ldrd	r6, [sp, #8]
   16280:	ldrd	r8, [sp, #16]
   16284:	ldrd	sl, [sp, #24]
   16288:	add	sp, sp, #32
   1628c:	pop	{pc}		; (ldr pc, [sp], #4)
   16290:	andeq	ip, r2, r8, lsl #6
   16294:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16298:	cmp	r3, #0
   1629c:	ldr	r4, [pc, #220]	; 16380 <__assert_fail@plt+0x533c>
   162a0:	movne	r4, r3
   162a4:	strd	r6, [sp, #8]
   162a8:	mov	r6, r2
   162ac:	strd	r8, [sp, #16]
   162b0:	mov	r9, r0
   162b4:	strd	sl, [sp, #24]
   162b8:	mov	sl, r1
   162bc:	str	lr, [sp, #32]
   162c0:	sub	sp, sp, #44	; 0x2c
   162c4:	bl	10f48 <__errno_location@plt>
   162c8:	ldr	r5, [r4, #4]
   162cc:	mov	r7, r0
   162d0:	mov	r1, #0
   162d4:	add	r8, r4, #8
   162d8:	mov	r3, sl
   162dc:	ldr	ip, [r4, #44]	; 0x2c
   162e0:	mov	r2, r9
   162e4:	mov	r0, r1
   162e8:	ldr	lr, [r7]
   162ec:	cmp	r6, r1
   162f0:	orreq	r5, r5, #1
   162f4:	str	ip, [sp, #16]
   162f8:	ldr	ip, [r4, #40]	; 0x28
   162fc:	stmib	sp, {r5, r8, ip}
   16300:	ldr	ip, [r4]
   16304:	str	lr, [sp, #28]
   16308:	str	ip, [sp]
   1630c:	bl	14440 <__assert_fail@plt+0x33fc>
   16310:	add	r1, r0, #1
   16314:	mov	fp, r0
   16318:	mov	r0, r1
   1631c:	str	r1, [sp, #36]	; 0x24
   16320:	bl	18578 <__assert_fail@plt+0x7534>
   16324:	ldr	ip, [r4, #44]	; 0x2c
   16328:	mov	r3, sl
   1632c:	mov	r2, r9
   16330:	ldr	r1, [sp, #36]	; 0x24
   16334:	str	ip, [sp, #16]
   16338:	ldr	ip, [r4, #40]	; 0x28
   1633c:	str	r0, [sp, #32]
   16340:	stmib	sp, {r5, r8, ip}
   16344:	ldr	ip, [r4]
   16348:	str	ip, [sp]
   1634c:	bl	14440 <__assert_fail@plt+0x33fc>
   16350:	ldr	lr, [sp, #28]
   16354:	cmp	r6, #0
   16358:	ldr	r0, [sp, #32]
   1635c:	str	lr, [r7]
   16360:	strne	fp, [r6]
   16364:	add	sp, sp, #44	; 0x2c
   16368:	ldrd	r4, [sp]
   1636c:	ldrd	r6, [sp, #8]
   16370:	ldrd	r8, [sp, #16]
   16374:	ldrd	sl, [sp, #24]
   16378:	add	sp, sp, #32
   1637c:	pop	{pc}		; (ldr pc, [sp], #4)
   16380:	andeq	ip, r2, r8, lsl #6
   16384:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16388:	movw	r5, #49436	; 0xc11c
   1638c:	movt	r5, #2
   16390:	ldr	r3, [r5, #4]
   16394:	strd	r6, [sp, #8]
   16398:	str	r8, [sp, #16]
   1639c:	str	lr, [sp, #20]
   163a0:	ldr	r7, [r5]
   163a4:	cmp	r3, #1
   163a8:	ble	163cc <__assert_fail@plt+0x5388>
   163ac:	mov	r4, #1
   163b0:	add	r6, r7, #4
   163b4:	ldr	r0, [r6, r4, lsl #3]
   163b8:	add	r4, r4, #1
   163bc:	bl	13db0 <__assert_fail@plt+0x2d6c>
   163c0:	ldr	r3, [r5, #4]
   163c4:	cmp	r3, r4
   163c8:	bgt	163b4 <__assert_fail@plt+0x5370>
   163cc:	ldr	r0, [r7, #4]
   163d0:	movw	r4, #49672	; 0xc208
   163d4:	movt	r4, #2
   163d8:	cmp	r0, r4
   163dc:	beq	163f0 <__assert_fail@plt+0x53ac>
   163e0:	bl	13db0 <__assert_fail@plt+0x2d6c>
   163e4:	mov	r3, #256	; 0x100
   163e8:	str	r3, [r5, #8]
   163ec:	str	r4, [r5, #12]
   163f0:	ldr	r4, [pc, #44]	; 16424 <__assert_fail@plt+0x53e0>
   163f4:	cmp	r7, r4
   163f8:	beq	16408 <__assert_fail@plt+0x53c4>
   163fc:	mov	r0, r7
   16400:	bl	13db0 <__assert_fail@plt+0x2d6c>
   16404:	str	r4, [r5]
   16408:	mov	r3, #1
   1640c:	ldrd	r6, [sp, #8]
   16410:	str	r3, [r5, #4]
   16414:	ldrd	r4, [sp]
   16418:	ldr	r8, [sp, #16]
   1641c:	add	sp, sp, #20
   16420:	pop	{pc}		; (ldr pc, [sp], #4)
   16424:	andeq	ip, r2, r4, lsr #2
   16428:	ldr	r3, [pc, #4]	; 16434 <__assert_fail@plt+0x53f0>
   1642c:	mvn	r2, #0
   16430:	b	15e2c <__assert_fail@plt+0x4de8>
   16434:	andeq	ip, r2, r8, lsl #6
   16438:	ldr	r3, [pc]	; 16440 <__assert_fail@plt+0x53fc>
   1643c:	b	15e2c <__assert_fail@plt+0x4de8>
   16440:	andeq	ip, r2, r8, lsl #6
   16444:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16448:	movw	r4, #49436	; 0xc11c
   1644c:	movt	r4, #2
   16450:	strd	r6, [sp, #8]
   16454:	strd	r8, [sp, #16]
   16458:	strd	sl, [sp, #24]
   1645c:	mov	sl, r0
   16460:	str	lr, [sp, #32]
   16464:	sub	sp, sp, #44	; 0x2c
   16468:	bl	10f48 <__errno_location@plt>
   1646c:	ldr	r3, [r0]
   16470:	mov	r8, r0
   16474:	ldr	r2, [r4, #4]
   16478:	ldr	r5, [r4]
   1647c:	str	r3, [sp, #28]
   16480:	cmp	r2, #0
   16484:	bgt	164e0 <__assert_fail@plt+0x549c>
   16488:	add	r3, r4, #8
   1648c:	str	r2, [sp, #36]	; 0x24
   16490:	rsb	r2, r2, #1
   16494:	cmp	r5, r3
   16498:	beq	165ac <__assert_fail@plt+0x5568>
   1649c:	mov	r1, #8
   164a0:	mov	r0, r5
   164a4:	mvn	r3, #-2147483648	; 0x80000000
   164a8:	str	r1, [sp]
   164ac:	add	r1, sp, #36	; 0x24
   164b0:	bl	1881c <__assert_fail@plt+0x77d8>
   164b4:	mov	r5, r0
   164b8:	str	r0, [r4]
   164bc:	ldr	r0, [r4, #4]
   164c0:	mov	r1, #0
   164c4:	ldr	r2, [sp, #36]	; 0x24
   164c8:	sub	r2, r2, r0
   164cc:	add	r0, r5, r0, lsl #3
   164d0:	lsl	r2, r2, #3
   164d4:	bl	10f60 <memset@plt>
   164d8:	ldr	r3, [sp, #36]	; 0x24
   164dc:	str	r3, [r4, #4]
   164e0:	movw	r4, #49672	; 0xc208
   164e4:	movt	r4, #2
   164e8:	ldr	r9, [r5]
   164ec:	add	fp, r4, #264	; 0x108
   164f0:	mvn	r3, #0
   164f4:	ldr	r7, [r4, #260]	; 0x104
   164f8:	mov	r2, sl
   164fc:	ldr	r6, [r5, #4]
   16500:	str	fp, [sp, #8]
   16504:	mov	r1, r9
   16508:	ldr	ip, [r4, #256]	; 0x100
   1650c:	orr	r7, r7, #1
   16510:	ldr	lr, [r4, #300]	; 0x12c
   16514:	mov	r0, r6
   16518:	str	ip, [sp]
   1651c:	str	r7, [sp, #4]
   16520:	str	lr, [sp, #16]
   16524:	ldr	ip, [r4, #296]	; 0x128
   16528:	str	ip, [sp, #12]
   1652c:	bl	14440 <__assert_fail@plt+0x33fc>
   16530:	cmp	r9, r0
   16534:	bhi	16584 <__assert_fail@plt+0x5540>
   16538:	add	r9, r0, #1
   1653c:	cmp	r6, r4
   16540:	str	r9, [r5]
   16544:	beq	16550 <__assert_fail@plt+0x550c>
   16548:	mov	r0, r6
   1654c:	bl	13db0 <__assert_fail@plt+0x2d6c>
   16550:	mov	r0, r9
   16554:	bl	18578 <__assert_fail@plt+0x7534>
   16558:	ldr	r3, [r4, #256]	; 0x100
   1655c:	mov	r2, sl
   16560:	mov	r1, r9
   16564:	mov	r6, r0
   16568:	ldr	lr, [r4, #296]	; 0x128
   1656c:	ldr	ip, [r4, #300]	; 0x12c
   16570:	str	r0, [r5, #4]
   16574:	stm	sp, {r3, r7, fp, lr}
   16578:	mvn	r3, #0
   1657c:	str	ip, [sp, #16]
   16580:	bl	14440 <__assert_fail@plt+0x33fc>
   16584:	ldr	r3, [sp, #28]
   16588:	mov	r0, r6
   1658c:	str	r3, [r8]
   16590:	add	sp, sp, #44	; 0x2c
   16594:	ldrd	r4, [sp]
   16598:	ldrd	r6, [sp, #8]
   1659c:	ldrd	r8, [sp, #16]
   165a0:	ldrd	sl, [sp, #24]
   165a4:	add	sp, sp, #32
   165a8:	pop	{pc}		; (ldr pc, [sp], #4)
   165ac:	mov	r0, #8
   165b0:	mvn	r3, #-2147483648	; 0x80000000
   165b4:	add	r1, sp, #36	; 0x24
   165b8:	str	r0, [sp]
   165bc:	mov	r0, #0
   165c0:	bl	1881c <__assert_fail@plt+0x77d8>
   165c4:	ldrd	r2, [r4, #8]
   165c8:	mov	r5, r0
   165cc:	str	r0, [r4]
   165d0:	strd	r2, [r0]
   165d4:	b	164bc <__assert_fail@plt+0x5478>
   165d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   165dc:	movw	r4, #49436	; 0xc11c
   165e0:	movt	r4, #2
   165e4:	strd	r6, [sp, #8]
   165e8:	strd	r8, [sp, #16]
   165ec:	strd	sl, [sp, #24]
   165f0:	mov	sl, r0
   165f4:	mov	fp, r1
   165f8:	str	lr, [sp, #32]
   165fc:	sub	sp, sp, #44	; 0x2c
   16600:	bl	10f48 <__errno_location@plt>
   16604:	ldr	r3, [r0]
   16608:	mov	r8, r0
   1660c:	ldr	r2, [r4, #4]
   16610:	ldr	r5, [r4]
   16614:	str	r3, [sp, #28]
   16618:	cmp	r2, #0
   1661c:	bgt	16678 <__assert_fail@plt+0x5634>
   16620:	add	r3, r4, #8
   16624:	str	r2, [sp, #36]	; 0x24
   16628:	rsb	r2, r2, #1
   1662c:	cmp	r5, r3
   16630:	beq	16754 <__assert_fail@plt+0x5710>
   16634:	mov	r1, #8
   16638:	mov	r0, r5
   1663c:	mvn	r3, #-2147483648	; 0x80000000
   16640:	str	r1, [sp]
   16644:	add	r1, sp, #36	; 0x24
   16648:	bl	1881c <__assert_fail@plt+0x77d8>
   1664c:	mov	r5, r0
   16650:	str	r0, [r4]
   16654:	ldr	r0, [r4, #4]
   16658:	mov	r1, #0
   1665c:	ldr	r2, [sp, #36]	; 0x24
   16660:	sub	r2, r2, r0
   16664:	add	r0, r5, r0, lsl #3
   16668:	lsl	r2, r2, #3
   1666c:	bl	10f60 <memset@plt>
   16670:	ldr	r3, [sp, #36]	; 0x24
   16674:	str	r3, [r4, #4]
   16678:	movw	r4, #49672	; 0xc208
   1667c:	movt	r4, #2
   16680:	ldr	r9, [r5]
   16684:	add	r0, r4, #264	; 0x108
   16688:	mov	r3, fp
   1668c:	ldr	r7, [r4, #260]	; 0x104
   16690:	mov	r2, sl
   16694:	ldr	r6, [r5, #4]
   16698:	str	r0, [sp, #8]
   1669c:	mov	r1, r9
   166a0:	ldr	ip, [r4, #256]	; 0x100
   166a4:	orr	r7, r7, #1
   166a8:	ldr	lr, [r4, #300]	; 0x12c
   166ac:	mov	r0, r6
   166b0:	str	ip, [sp]
   166b4:	str	r7, [sp, #4]
   166b8:	str	lr, [sp, #16]
   166bc:	ldr	ip, [r4, #296]	; 0x128
   166c0:	str	ip, [sp, #12]
   166c4:	bl	14440 <__assert_fail@plt+0x33fc>
   166c8:	cmp	r9, r0
   166cc:	bhi	1672c <__assert_fail@plt+0x56e8>
   166d0:	add	r9, r0, #1
   166d4:	cmp	r6, r4
   166d8:	str	r9, [r5]
   166dc:	beq	166e8 <__assert_fail@plt+0x56a4>
   166e0:	mov	r0, r6
   166e4:	bl	13db0 <__assert_fail@plt+0x2d6c>
   166e8:	mov	r0, r9
   166ec:	bl	18578 <__assert_fail@plt+0x7534>
   166f0:	ldr	ip, [r4, #256]	; 0x100
   166f4:	mov	r1, r9
   166f8:	mov	r3, fp
   166fc:	mov	r2, sl
   16700:	mov	r6, r0
   16704:	ldr	r9, [r4, #296]	; 0x128
   16708:	ldr	lr, [r4, #300]	; 0x12c
   1670c:	str	r0, [r5, #4]
   16710:	str	ip, [sp]
   16714:	ldr	ip, [pc, #100]	; 16780 <__assert_fail@plt+0x573c>
   16718:	str	r7, [sp, #4]
   1671c:	str	ip, [sp, #8]
   16720:	str	r9, [sp, #12]
   16724:	str	lr, [sp, #16]
   16728:	bl	14440 <__assert_fail@plt+0x33fc>
   1672c:	ldr	r3, [sp, #28]
   16730:	mov	r0, r6
   16734:	str	r3, [r8]
   16738:	add	sp, sp, #44	; 0x2c
   1673c:	ldrd	r4, [sp]
   16740:	ldrd	r6, [sp, #8]
   16744:	ldrd	r8, [sp, #16]
   16748:	ldrd	sl, [sp, #24]
   1674c:	add	sp, sp, #32
   16750:	pop	{pc}		; (ldr pc, [sp], #4)
   16754:	mov	r0, #8
   16758:	mvn	r3, #-2147483648	; 0x80000000
   1675c:	add	r1, sp, #36	; 0x24
   16760:	str	r0, [sp]
   16764:	mov	r0, #0
   16768:	bl	1881c <__assert_fail@plt+0x77d8>
   1676c:	ldrd	r2, [r4, #8]
   16770:	mov	r5, r0
   16774:	str	r0, [r4]
   16778:	strd	r2, [r0]
   1677c:	b	16654 <__assert_fail@plt+0x5610>
   16780:	andeq	ip, r2, r0, lsl r3
   16784:	strd	r4, [sp, #-20]!	; 0xffffffec
   16788:	mov	r4, #0
   1678c:	mov	r5, #0
   16790:	strd	r6, [sp, #8]
   16794:	cmp	r1, #10
   16798:	str	lr, [sp, #16]
   1679c:	sub	sp, sp, #100	; 0x64
   167a0:	strd	r4, [sp, #48]	; 0x30
   167a4:	beq	167ec <__assert_fail@plt+0x57a8>
   167a8:	mov	r3, sp
   167ac:	strd	r4, [sp, #8]
   167b0:	str	r1, [sp, #48]	; 0x30
   167b4:	mov	r1, r2
   167b8:	mvn	r2, #0
   167bc:	ldrd	r6, [sp, #48]	; 0x30
   167c0:	strd	r6, [sp]
   167c4:	strd	r4, [sp, #16]
   167c8:	strd	r4, [sp, #24]
   167cc:	strd	r4, [sp, #32]
   167d0:	strd	r4, [sp, #40]	; 0x28
   167d4:	bl	15e2c <__assert_fail@plt+0x4de8>
   167d8:	add	sp, sp, #100	; 0x64
   167dc:	ldrd	r4, [sp]
   167e0:	ldrd	r6, [sp, #8]
   167e4:	add	sp, sp, #16
   167e8:	pop	{pc}		; (ldr pc, [sp], #4)
   167ec:	bl	1102c <abort@plt>
   167f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   167f4:	mov	r4, #0
   167f8:	mov	r5, #0
   167fc:	strd	r6, [sp, #8]
   16800:	cmp	r1, #10
   16804:	str	lr, [sp, #16]
   16808:	sub	sp, sp, #100	; 0x64
   1680c:	strd	r4, [sp, #48]	; 0x30
   16810:	beq	1685c <__assert_fail@plt+0x5818>
   16814:	mov	ip, r2
   16818:	mov	r2, r3
   1681c:	strd	r4, [sp, #8]
   16820:	str	r1, [sp, #48]	; 0x30
   16824:	mov	r3, sp
   16828:	mov	r1, ip
   1682c:	ldrd	r6, [sp, #48]	; 0x30
   16830:	strd	r6, [sp]
   16834:	strd	r4, [sp, #16]
   16838:	strd	r4, [sp, #24]
   1683c:	strd	r4, [sp, #32]
   16840:	strd	r4, [sp, #40]	; 0x28
   16844:	bl	15e2c <__assert_fail@plt+0x4de8>
   16848:	add	sp, sp, #100	; 0x64
   1684c:	ldrd	r4, [sp]
   16850:	ldrd	r6, [sp, #8]
   16854:	add	sp, sp, #16
   16858:	pop	{pc}		; (ldr pc, [sp], #4)
   1685c:	bl	1102c <abort@plt>
   16860:	mov	r2, #0
   16864:	mov	r3, #0
   16868:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1686c:	strd	r6, [sp, #8]
   16870:	cmp	r0, #10
   16874:	strd	r8, [sp, #16]
   16878:	strd	sl, [sp, #24]
   1687c:	str	lr, [sp, #32]
   16880:	sub	sp, sp, #124	; 0x7c
   16884:	strd	r2, [sp, #72]	; 0x48
   16888:	strd	r2, [sp, #80]	; 0x50
   1688c:	strd	r2, [sp, #88]	; 0x58
   16890:	strd	r2, [sp, #96]	; 0x60
   16894:	strd	r2, [sp, #104]	; 0x68
   16898:	strd	r2, [sp, #112]	; 0x70
   1689c:	beq	16a40 <__assert_fail@plt+0x59fc>
   168a0:	mov	r6, r1
   168a4:	movw	r4, #49436	; 0xc11c
   168a8:	movt	r4, #2
   168ac:	str	r0, [sp, #72]	; 0x48
   168b0:	ldrd	r0, [sp, #72]	; 0x48
   168b4:	strd	r0, [sp, #24]
   168b8:	strd	r2, [sp, #32]
   168bc:	strd	r2, [sp, #40]	; 0x28
   168c0:	strd	r2, [sp, #48]	; 0x30
   168c4:	strd	r2, [sp, #56]	; 0x38
   168c8:	strd	r2, [sp, #64]	; 0x40
   168cc:	bl	10f48 <__errno_location@plt>
   168d0:	mov	r8, r0
   168d4:	ldr	r5, [r4]
   168d8:	ldr	r2, [r4, #4]
   168dc:	ldr	r9, [r0]
   168e0:	cmp	r2, #0
   168e4:	bgt	16940 <__assert_fail@plt+0x58fc>
   168e8:	add	r3, r4, #8
   168ec:	str	r2, [sp, #72]	; 0x48
   168f0:	rsb	r2, r2, #1
   168f4:	cmp	r5, r3
   168f8:	beq	16a14 <__assert_fail@plt+0x59d0>
   168fc:	mov	r3, #8
   16900:	mov	r0, r5
   16904:	add	r1, sp, #72	; 0x48
   16908:	str	r3, [sp]
   1690c:	mvn	r3, #-2147483648	; 0x80000000
   16910:	bl	1881c <__assert_fail@plt+0x77d8>
   16914:	mov	r5, r0
   16918:	str	r0, [r4]
   1691c:	ldr	r0, [r4, #4]
   16920:	mov	r1, #0
   16924:	ldr	r2, [sp, #72]	; 0x48
   16928:	sub	r2, r2, r0
   1692c:	add	r0, r5, r0, lsl #3
   16930:	lsl	r2, r2, #3
   16934:	bl	10f60 <memset@plt>
   16938:	ldr	r3, [sp, #72]	; 0x48
   1693c:	str	r3, [r4, #4]
   16940:	ldr	sl, [r5]
   16944:	add	r0, sp, #32
   16948:	mvn	r3, #0
   1694c:	mov	r2, r6
   16950:	ldr	r7, [sp, #28]
   16954:	ldr	r4, [r5, #4]
   16958:	mov	r1, sl
   1695c:	str	r0, [sp, #8]
   16960:	ldr	lr, [sp, #24]
   16964:	orr	r7, r7, #1
   16968:	ldr	ip, [sp, #64]	; 0x40
   1696c:	mov	r0, r4
   16970:	ldr	fp, [sp, #68]	; 0x44
   16974:	str	lr, [sp]
   16978:	str	r7, [sp, #4]
   1697c:	str	ip, [sp, #12]
   16980:	str	fp, [sp, #16]
   16984:	bl	14440 <__assert_fail@plt+0x33fc>
   16988:	cmp	sl, r0
   1698c:	bhi	169f0 <__assert_fail@plt+0x59ac>
   16990:	add	sl, r0, #1
   16994:	movw	r3, #49672	; 0xc208
   16998:	movt	r3, #2
   1699c:	cmp	r4, r3
   169a0:	str	sl, [r5]
   169a4:	beq	169b0 <__assert_fail@plt+0x596c>
   169a8:	mov	r0, r4
   169ac:	bl	13db0 <__assert_fail@plt+0x2d6c>
   169b0:	mov	r0, sl
   169b4:	bl	18578 <__assert_fail@plt+0x7534>
   169b8:	ldr	r3, [sp, #24]
   169bc:	mov	r2, r6
   169c0:	mov	r1, sl
   169c4:	mov	r4, r0
   169c8:	ldr	lr, [sp, #64]	; 0x40
   169cc:	ldr	ip, [sp, #68]	; 0x44
   169d0:	str	r0, [r5, #4]
   169d4:	add	r5, sp, #32
   169d8:	stm	sp, {r3, r7}
   169dc:	mvn	r3, #0
   169e0:	str	r5, [sp, #8]
   169e4:	str	lr, [sp, #12]
   169e8:	str	ip, [sp, #16]
   169ec:	bl	14440 <__assert_fail@plt+0x33fc>
   169f0:	mov	r0, r4
   169f4:	str	r9, [r8]
   169f8:	add	sp, sp, #124	; 0x7c
   169fc:	ldrd	r4, [sp]
   16a00:	ldrd	r6, [sp, #8]
   16a04:	ldrd	r8, [sp, #16]
   16a08:	ldrd	sl, [sp, #24]
   16a0c:	add	sp, sp, #32
   16a10:	pop	{pc}		; (ldr pc, [sp], #4)
   16a14:	mov	r0, #8
   16a18:	mvn	r3, #-2147483648	; 0x80000000
   16a1c:	add	r1, sp, #72	; 0x48
   16a20:	str	r0, [sp]
   16a24:	mov	r0, #0
   16a28:	bl	1881c <__assert_fail@plt+0x77d8>
   16a2c:	ldrd	r2, [r4, #8]
   16a30:	mov	r5, r0
   16a34:	str	r0, [r4]
   16a38:	strd	r2, [r0]
   16a3c:	b	1691c <__assert_fail@plt+0x58d8>
   16a40:	bl	1102c <abort@plt>
   16a44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16a48:	cmp	r0, #10
   16a4c:	strd	r6, [sp, #8]
   16a50:	mov	r6, #0
   16a54:	mov	r7, #0
   16a58:	strd	r8, [sp, #16]
   16a5c:	strd	sl, [sp, #24]
   16a60:	str	lr, [sp, #32]
   16a64:	sub	sp, sp, #124	; 0x7c
   16a68:	strd	r6, [sp, #72]	; 0x48
   16a6c:	strd	r6, [sp, #80]	; 0x50
   16a70:	strd	r6, [sp, #88]	; 0x58
   16a74:	strd	r6, [sp, #96]	; 0x60
   16a78:	strd	r6, [sp, #104]	; 0x68
   16a7c:	strd	r6, [sp, #112]	; 0x70
   16a80:	beq	16c2c <__assert_fail@plt+0x5be8>
   16a84:	mov	sl, r2
   16a88:	movw	r5, #49436	; 0xc11c
   16a8c:	movt	r5, #2
   16a90:	str	r0, [sp, #72]	; 0x48
   16a94:	mov	r9, r1
   16a98:	ldrd	r2, [sp, #72]	; 0x48
   16a9c:	strd	r2, [sp, #24]
   16aa0:	strd	r6, [sp, #32]
   16aa4:	strd	r6, [sp, #40]	; 0x28
   16aa8:	strd	r6, [sp, #48]	; 0x30
   16aac:	strd	r6, [sp, #56]	; 0x38
   16ab0:	strd	r6, [sp, #64]	; 0x40
   16ab4:	bl	10f48 <__errno_location@plt>
   16ab8:	mov	r7, r0
   16abc:	ldr	r4, [r5]
   16ac0:	ldr	r2, [r5, #4]
   16ac4:	ldr	fp, [r0]
   16ac8:	cmp	r2, #0
   16acc:	bgt	16b28 <__assert_fail@plt+0x5ae4>
   16ad0:	add	r3, r5, #8
   16ad4:	str	r2, [sp, #72]	; 0x48
   16ad8:	rsb	r2, r2, #1
   16adc:	cmp	r4, r3
   16ae0:	beq	16c00 <__assert_fail@plt+0x5bbc>
   16ae4:	mov	r3, #8
   16ae8:	mov	r0, r4
   16aec:	add	r1, sp, #72	; 0x48
   16af0:	str	r3, [sp]
   16af4:	mvn	r3, #-2147483648	; 0x80000000
   16af8:	bl	1881c <__assert_fail@plt+0x77d8>
   16afc:	mov	r4, r0
   16b00:	str	r0, [r5]
   16b04:	ldr	r0, [r5, #4]
   16b08:	mov	r1, #0
   16b0c:	ldr	r2, [sp, #72]	; 0x48
   16b10:	sub	r2, r2, r0
   16b14:	add	r0, r4, r0, lsl #3
   16b18:	lsl	r2, r2, #3
   16b1c:	bl	10f60 <memset@plt>
   16b20:	ldr	r3, [sp, #72]	; 0x48
   16b24:	str	r3, [r5, #4]
   16b28:	ldr	ip, [sp, #24]
   16b2c:	add	r0, sp, #32
   16b30:	mov	r3, sl
   16b34:	mov	r2, r9
   16b38:	ldr	r6, [sp, #28]
   16b3c:	ldr	r8, [r4]
   16b40:	ldr	r5, [r4, #4]
   16b44:	str	ip, [sp]
   16b48:	orr	r6, r6, #1
   16b4c:	ldr	ip, [sp, #64]	; 0x40
   16b50:	mov	r1, r8
   16b54:	str	r6, [sp, #4]
   16b58:	ldr	lr, [sp, #68]	; 0x44
   16b5c:	str	r0, [sp, #8]
   16b60:	mov	r0, r5
   16b64:	str	ip, [sp, #12]
   16b68:	str	lr, [sp, #16]
   16b6c:	bl	14440 <__assert_fail@plt+0x33fc>
   16b70:	cmp	r8, r0
   16b74:	bhi	16bdc <__assert_fail@plt+0x5b98>
   16b78:	add	r8, r0, #1
   16b7c:	movw	r3, #49672	; 0xc208
   16b80:	movt	r3, #2
   16b84:	cmp	r5, r3
   16b88:	str	r8, [r4]
   16b8c:	beq	16b98 <__assert_fail@plt+0x5b54>
   16b90:	mov	r0, r5
   16b94:	bl	13db0 <__assert_fail@plt+0x2d6c>
   16b98:	mov	r0, r8
   16b9c:	bl	18578 <__assert_fail@plt+0x7534>
   16ba0:	ldr	lr, [sp, #24]
   16ba4:	mov	r1, r8
   16ba8:	mov	r3, sl
   16bac:	mov	r2, r9
   16bb0:	mov	r5, r0
   16bb4:	ldr	r8, [sp, #64]	; 0x40
   16bb8:	ldr	ip, [sp, #68]	; 0x44
   16bbc:	str	r0, [r4, #4]
   16bc0:	str	lr, [sp]
   16bc4:	add	lr, sp, #32
   16bc8:	str	r6, [sp, #4]
   16bcc:	str	lr, [sp, #8]
   16bd0:	str	r8, [sp, #12]
   16bd4:	str	ip, [sp, #16]
   16bd8:	bl	14440 <__assert_fail@plt+0x33fc>
   16bdc:	mov	r0, r5
   16be0:	str	fp, [r7]
   16be4:	add	sp, sp, #124	; 0x7c
   16be8:	ldrd	r4, [sp]
   16bec:	ldrd	r6, [sp, #8]
   16bf0:	ldrd	r8, [sp, #16]
   16bf4:	ldrd	sl, [sp, #24]
   16bf8:	add	sp, sp, #32
   16bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16c00:	mov	r0, #8
   16c04:	mvn	r3, #-2147483648	; 0x80000000
   16c08:	add	r1, sp, #72	; 0x48
   16c0c:	str	r0, [sp]
   16c10:	mov	r0, #0
   16c14:	bl	1881c <__assert_fail@plt+0x77d8>
   16c18:	ldrd	r2, [r5, #8]
   16c1c:	mov	r4, r0
   16c20:	str	r0, [r5]
   16c24:	strd	r2, [r0]
   16c28:	b	16b04 <__assert_fail@plt+0x5ac0>
   16c2c:	bl	1102c <abort@plt>
   16c30:	ldr	r3, [pc, #492]	; 16e24 <__assert_fail@plt+0x5de0>
   16c34:	lsr	ip, r2, #5
   16c38:	and	r2, r2, #31
   16c3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c40:	movw	r5, #49436	; 0xc11c
   16c44:	movt	r5, #2
   16c48:	strd	r6, [sp, #8]
   16c4c:	strd	r8, [sp, #16]
   16c50:	strd	sl, [sp, #24]
   16c54:	mov	sl, r0
   16c58:	mov	fp, r1
   16c5c:	ldrd	r0, [r3]
   16c60:	str	lr, [sp, #32]
   16c64:	sub	sp, sp, #92	; 0x5c
   16c68:	ldrd	r8, [r3, #8]
   16c6c:	add	r6, sp, #48	; 0x30
   16c70:	strd	r0, [sp, #40]	; 0x28
   16c74:	ldrd	r0, [r3, #16]
   16c78:	strd	r8, [sp, #48]	; 0x30
   16c7c:	ldrd	r8, [r3, #24]
   16c80:	strd	r0, [sp, #56]	; 0x38
   16c84:	ldrd	r0, [r3, #32]
   16c88:	strd	r8, [sp, #64]	; 0x40
   16c8c:	ldrd	r8, [r3, #40]	; 0x28
   16c90:	strd	r0, [sp, #72]	; 0x48
   16c94:	strd	r8, [sp, #80]	; 0x50
   16c98:	ldr	r3, [r6, ip, lsl #2]
   16c9c:	mvn	r1, r3, lsr r2
   16ca0:	and	r1, r1, #1
   16ca4:	eor	r2, r3, r1, lsl r2
   16ca8:	str	r2, [r6, ip, lsl #2]
   16cac:	bl	10f48 <__errno_location@plt>
   16cb0:	ldr	r3, [r0]
   16cb4:	mov	r8, r0
   16cb8:	ldr	r2, [r5, #4]
   16cbc:	ldr	r4, [r5]
   16cc0:	str	r3, [sp, #28]
   16cc4:	cmp	r2, #0
   16cc8:	bgt	16d24 <__assert_fail@plt+0x5ce0>
   16ccc:	add	r3, r5, #8
   16cd0:	str	r2, [sp, #36]	; 0x24
   16cd4:	rsb	r2, r2, #1
   16cd8:	cmp	r4, r3
   16cdc:	beq	16df8 <__assert_fail@plt+0x5db4>
   16ce0:	mov	r1, #8
   16ce4:	mov	r0, r4
   16ce8:	mvn	r3, #-2147483648	; 0x80000000
   16cec:	str	r1, [sp]
   16cf0:	add	r1, sp, #36	; 0x24
   16cf4:	bl	1881c <__assert_fail@plt+0x77d8>
   16cf8:	mov	r4, r0
   16cfc:	str	r0, [r5]
   16d00:	ldr	r0, [r5, #4]
   16d04:	mov	r1, #0
   16d08:	ldr	r2, [sp, #36]	; 0x24
   16d0c:	sub	r2, r2, r0
   16d10:	add	r0, r4, r0, lsl #3
   16d14:	lsl	r2, r2, #3
   16d18:	bl	10f60 <memset@plt>
   16d1c:	ldr	r3, [sp, #36]	; 0x24
   16d20:	str	r3, [r5, #4]
   16d24:	ldr	ip, [sp, #40]	; 0x28
   16d28:	mov	r3, fp
   16d2c:	mov	r2, sl
   16d30:	ldr	r7, [sp, #44]	; 0x2c
   16d34:	ldr	r9, [r4]
   16d38:	ldr	r5, [r4, #4]
   16d3c:	str	ip, [sp]
   16d40:	orr	r7, r7, #1
   16d44:	ldr	ip, [sp, #80]	; 0x50
   16d48:	mov	r1, r9
   16d4c:	str	r7, [sp, #4]
   16d50:	ldr	lr, [sp, #84]	; 0x54
   16d54:	mov	r0, r5
   16d58:	str	r6, [sp, #8]
   16d5c:	str	ip, [sp, #12]
   16d60:	str	lr, [sp, #16]
   16d64:	bl	14440 <__assert_fail@plt+0x33fc>
   16d68:	cmp	r9, r0
   16d6c:	bhi	16dd0 <__assert_fail@plt+0x5d8c>
   16d70:	add	r9, r0, #1
   16d74:	movw	r3, #49672	; 0xc208
   16d78:	movt	r3, #2
   16d7c:	cmp	r5, r3
   16d80:	str	r9, [r4]
   16d84:	beq	16d90 <__assert_fail@plt+0x5d4c>
   16d88:	mov	r0, r5
   16d8c:	bl	13db0 <__assert_fail@plt+0x2d6c>
   16d90:	mov	r0, r9
   16d94:	bl	18578 <__assert_fail@plt+0x7534>
   16d98:	mov	r1, r9
   16d9c:	ldr	ip, [sp, #40]	; 0x28
   16da0:	mov	r3, fp
   16da4:	mov	r2, sl
   16da8:	mov	r5, r0
   16dac:	ldr	r9, [sp, #80]	; 0x50
   16db0:	ldr	lr, [sp, #84]	; 0x54
   16db4:	str	r0, [r4, #4]
   16db8:	str	ip, [sp]
   16dbc:	str	r7, [sp, #4]
   16dc0:	str	r6, [sp, #8]
   16dc4:	str	r9, [sp, #12]
   16dc8:	str	lr, [sp, #16]
   16dcc:	bl	14440 <__assert_fail@plt+0x33fc>
   16dd0:	ldr	r3, [sp, #28]
   16dd4:	mov	r0, r5
   16dd8:	str	r3, [r8]
   16ddc:	add	sp, sp, #92	; 0x5c
   16de0:	ldrd	r4, [sp]
   16de4:	ldrd	r6, [sp, #8]
   16de8:	ldrd	r8, [sp, #16]
   16dec:	ldrd	sl, [sp, #24]
   16df0:	add	sp, sp, #32
   16df4:	pop	{pc}		; (ldr pc, [sp], #4)
   16df8:	mov	r0, #8
   16dfc:	mvn	r3, #-2147483648	; 0x80000000
   16e00:	add	r1, sp, #36	; 0x24
   16e04:	str	r0, [sp]
   16e08:	mov	r0, #0
   16e0c:	bl	1881c <__assert_fail@plt+0x77d8>
   16e10:	ldrd	r2, [r5, #8]
   16e14:	mov	r4, r0
   16e18:	str	r0, [r5]
   16e1c:	strd	r2, [r0]
   16e20:	b	16d00 <__assert_fail@plt+0x5cbc>
   16e24:	andeq	ip, r2, r8, lsl #6
   16e28:	ldr	ip, [pc, #476]	; 1700c <__assert_fail@plt+0x5fc8>
   16e2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e30:	movw	r4, #49436	; 0xc11c
   16e34:	movt	r4, #2
   16e38:	ldrd	r2, [ip, #8]
   16e3c:	strd	r6, [sp, #8]
   16e40:	lsr	r7, r1, #5
   16e44:	mov	r6, r0
   16e48:	strd	r8, [sp, #16]
   16e4c:	str	lr, [sp, #32]
   16e50:	and	lr, r1, #31
   16e54:	ldrd	r0, [ip]
   16e58:	strd	sl, [sp, #24]
   16e5c:	sub	sp, sp, #84	; 0x54
   16e60:	add	r5, sp, #40	; 0x28
   16e64:	strd	r0, [sp, #32]
   16e68:	strd	r2, [sp, #40]	; 0x28
   16e6c:	ldrd	r0, [ip, #16]
   16e70:	ldrd	r2, [ip, #24]
   16e74:	strd	r0, [sp, #48]	; 0x30
   16e78:	ldrd	r0, [ip, #32]
   16e7c:	strd	r2, [sp, #56]	; 0x38
   16e80:	ldrd	r2, [ip, #40]	; 0x28
   16e84:	strd	r0, [sp, #64]	; 0x40
   16e88:	strd	r2, [sp, #72]	; 0x48
   16e8c:	ldr	r1, [r5, r7, lsl #2]
   16e90:	mvn	r3, r1, lsr lr
   16e94:	and	r3, r3, #1
   16e98:	eor	r1, r1, r3, lsl lr
   16e9c:	str	r1, [r5, r7, lsl #2]
   16ea0:	bl	10f48 <__errno_location@plt>
   16ea4:	mov	r9, r0
   16ea8:	ldr	sl, [r0]
   16eac:	ldr	r2, [r4, #4]
   16eb0:	ldr	r7, [r4]
   16eb4:	cmp	r2, #0
   16eb8:	bgt	16f14 <__assert_fail@plt+0x5ed0>
   16ebc:	add	r3, r4, #8
   16ec0:	str	r2, [sp, #28]
   16ec4:	rsb	r2, r2, #1
   16ec8:	cmp	r7, r3
   16ecc:	beq	16fe0 <__assert_fail@plt+0x5f9c>
   16ed0:	mov	r1, #8
   16ed4:	mov	r0, r7
   16ed8:	mvn	r3, #-2147483648	; 0x80000000
   16edc:	str	r1, [sp]
   16ee0:	add	r1, sp, #28
   16ee4:	bl	1881c <__assert_fail@plt+0x77d8>
   16ee8:	mov	r7, r0
   16eec:	str	r0, [r4]
   16ef0:	ldr	r0, [r4, #4]
   16ef4:	mov	r1, #0
   16ef8:	ldr	r2, [sp, #28]
   16efc:	sub	r2, r2, r0
   16f00:	add	r0, r7, r0, lsl #3
   16f04:	lsl	r2, r2, #3
   16f08:	bl	10f60 <memset@plt>
   16f0c:	ldr	r3, [sp, #28]
   16f10:	str	r3, [r4, #4]
   16f14:	ldr	ip, [sp, #32]
   16f18:	mvn	r3, #0
   16f1c:	mov	r2, r6
   16f20:	ldr	r8, [sp, #36]	; 0x24
   16f24:	ldr	fp, [r7]
   16f28:	ldr	r4, [r7, #4]
   16f2c:	str	ip, [sp]
   16f30:	orr	r8, r8, #1
   16f34:	ldr	ip, [sp, #72]	; 0x48
   16f38:	mov	r1, fp
   16f3c:	str	r8, [sp, #4]
   16f40:	ldr	lr, [sp, #76]	; 0x4c
   16f44:	mov	r0, r4
   16f48:	str	r5, [sp, #8]
   16f4c:	str	ip, [sp, #12]
   16f50:	str	lr, [sp, #16]
   16f54:	bl	14440 <__assert_fail@plt+0x33fc>
   16f58:	cmp	fp, r0
   16f5c:	bhi	16fbc <__assert_fail@plt+0x5f78>
   16f60:	add	fp, r0, #1
   16f64:	movw	r3, #49672	; 0xc208
   16f68:	movt	r3, #2
   16f6c:	cmp	r4, r3
   16f70:	str	fp, [r7]
   16f74:	beq	16f80 <__assert_fail@plt+0x5f3c>
   16f78:	mov	r0, r4
   16f7c:	bl	13db0 <__assert_fail@plt+0x2d6c>
   16f80:	mov	r0, fp
   16f84:	bl	18578 <__assert_fail@plt+0x7534>
   16f88:	ldr	r3, [sp, #32]
   16f8c:	mov	r2, r6
   16f90:	mov	r1, fp
   16f94:	mov	r4, r0
   16f98:	ldr	lr, [sp, #72]	; 0x48
   16f9c:	ldr	ip, [sp, #76]	; 0x4c
   16fa0:	str	r0, [r7, #4]
   16fa4:	stm	sp, {r3, r8}
   16fa8:	mvn	r3, #0
   16fac:	str	r5, [sp, #8]
   16fb0:	str	lr, [sp, #12]
   16fb4:	str	ip, [sp, #16]
   16fb8:	bl	14440 <__assert_fail@plt+0x33fc>
   16fbc:	mov	r0, r4
   16fc0:	str	sl, [r9]
   16fc4:	add	sp, sp, #84	; 0x54
   16fc8:	ldrd	r4, [sp]
   16fcc:	ldrd	r6, [sp, #8]
   16fd0:	ldrd	r8, [sp, #16]
   16fd4:	ldrd	sl, [sp, #24]
   16fd8:	add	sp, sp, #32
   16fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16fe0:	mov	r0, #8
   16fe4:	mvn	r3, #-2147483648	; 0x80000000
   16fe8:	add	r1, sp, #28
   16fec:	str	r0, [sp]
   16ff0:	mov	r0, #0
   16ff4:	bl	1881c <__assert_fail@plt+0x77d8>
   16ff8:	ldrd	r2, [r4, #8]
   16ffc:	mov	r7, r0
   17000:	str	r0, [r4]
   17004:	strd	r2, [r0]
   17008:	b	16ef0 <__assert_fail@plt+0x5eac>
   1700c:	andeq	ip, r2, r8, lsl #6
   17010:	ldr	ip, [pc, #472]	; 171f0 <__assert_fail@plt+0x61ac>
   17014:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17018:	mov	r5, r0
   1701c:	movw	r4, #49436	; 0xc11c
   17020:	movt	r4, #2
   17024:	ldrd	r2, [ip]
   17028:	ldrd	r0, [ip, #8]
   1702c:	strd	r6, [sp, #8]
   17030:	strd	r8, [sp, #16]
   17034:	strd	sl, [sp, #24]
   17038:	str	lr, [sp, #32]
   1703c:	sub	sp, sp, #84	; 0x54
   17040:	strd	r2, [sp, #32]
   17044:	strd	r0, [sp, #40]	; 0x28
   17048:	ldr	r6, [sp, #44]	; 0x2c
   1704c:	ldrd	r2, [ip, #16]
   17050:	ldrd	r0, [ip, #24]
   17054:	mvn	lr, r6
   17058:	and	lr, lr, #67108864	; 0x4000000
   1705c:	eor	lr, lr, r6
   17060:	ldrd	r6, [ip, #40]	; 0x28
   17064:	strd	r2, [sp, #48]	; 0x30
   17068:	ldrd	r2, [ip, #32]
   1706c:	str	lr, [sp, #44]	; 0x2c
   17070:	strd	r0, [sp, #56]	; 0x38
   17074:	strd	r2, [sp, #64]	; 0x40
   17078:	strd	r6, [sp, #72]	; 0x48
   1707c:	bl	10f48 <__errno_location@plt>
   17080:	mov	r8, r0
   17084:	ldr	r9, [r0]
   17088:	ldr	r2, [r4, #4]
   1708c:	ldr	r6, [r4]
   17090:	cmp	r2, #0
   17094:	bgt	170f0 <__assert_fail@plt+0x60ac>
   17098:	add	r3, r4, #8
   1709c:	str	r2, [sp, #28]
   170a0:	rsb	r2, r2, #1
   170a4:	cmp	r6, r3
   170a8:	beq	171c4 <__assert_fail@plt+0x6180>
   170ac:	mov	r1, #8
   170b0:	mov	r0, r6
   170b4:	mvn	r3, #-2147483648	; 0x80000000
   170b8:	str	r1, [sp]
   170bc:	add	r1, sp, #28
   170c0:	bl	1881c <__assert_fail@plt+0x77d8>
   170c4:	mov	r6, r0
   170c8:	str	r0, [r4]
   170cc:	ldr	r0, [r4, #4]
   170d0:	mov	r1, #0
   170d4:	ldr	r2, [sp, #28]
   170d8:	sub	r2, r2, r0
   170dc:	add	r0, r6, r0, lsl #3
   170e0:	lsl	r2, r2, #3
   170e4:	bl	10f60 <memset@plt>
   170e8:	ldr	r3, [sp, #28]
   170ec:	str	r3, [r4, #4]
   170f0:	ldr	sl, [r6]
   170f4:	add	r0, sp, #40	; 0x28
   170f8:	mvn	r3, #0
   170fc:	mov	r2, r5
   17100:	ldr	r7, [sp, #36]	; 0x24
   17104:	ldr	r4, [r6, #4]
   17108:	mov	r1, sl
   1710c:	str	r0, [sp, #8]
   17110:	ldr	lr, [sp, #32]
   17114:	orr	r7, r7, #1
   17118:	ldr	ip, [sp, #72]	; 0x48
   1711c:	mov	r0, r4
   17120:	ldr	fp, [sp, #76]	; 0x4c
   17124:	str	lr, [sp]
   17128:	str	r7, [sp, #4]
   1712c:	str	ip, [sp, #12]
   17130:	str	fp, [sp, #16]
   17134:	bl	14440 <__assert_fail@plt+0x33fc>
   17138:	cmp	sl, r0
   1713c:	bhi	171a0 <__assert_fail@plt+0x615c>
   17140:	add	sl, r0, #1
   17144:	movw	r3, #49672	; 0xc208
   17148:	movt	r3, #2
   1714c:	cmp	r4, r3
   17150:	str	sl, [r6]
   17154:	beq	17160 <__assert_fail@plt+0x611c>
   17158:	mov	r0, r4
   1715c:	bl	13db0 <__assert_fail@plt+0x2d6c>
   17160:	mov	r0, sl
   17164:	bl	18578 <__assert_fail@plt+0x7534>
   17168:	ldr	r3, [sp, #32]
   1716c:	mov	r2, r5
   17170:	add	r5, sp, #40	; 0x28
   17174:	mov	r1, sl
   17178:	mov	r4, r0
   1717c:	ldr	lr, [sp, #72]	; 0x48
   17180:	ldr	ip, [sp, #76]	; 0x4c
   17184:	str	r0, [r6, #4]
   17188:	stm	sp, {r3, r7}
   1718c:	mvn	r3, #0
   17190:	str	r5, [sp, #8]
   17194:	str	lr, [sp, #12]
   17198:	str	ip, [sp, #16]
   1719c:	bl	14440 <__assert_fail@plt+0x33fc>
   171a0:	mov	r0, r4
   171a4:	str	r9, [r8]
   171a8:	add	sp, sp, #84	; 0x54
   171ac:	ldrd	r4, [sp]
   171b0:	ldrd	r6, [sp, #8]
   171b4:	ldrd	r8, [sp, #16]
   171b8:	ldrd	sl, [sp, #24]
   171bc:	add	sp, sp, #32
   171c0:	pop	{pc}		; (ldr pc, [sp], #4)
   171c4:	mov	r0, #8
   171c8:	mvn	r3, #-2147483648	; 0x80000000
   171cc:	add	r1, sp, #28
   171d0:	str	r0, [sp]
   171d4:	mov	r0, #0
   171d8:	bl	1881c <__assert_fail@plt+0x77d8>
   171dc:	ldrd	r2, [r4, #8]
   171e0:	mov	r6, r0
   171e4:	str	r0, [r4]
   171e8:	strd	r2, [r0]
   171ec:	b	170cc <__assert_fail@plt+0x6088>
   171f0:	andeq	ip, r2, r8, lsl #6
   171f4:	ldr	ip, [pc, #480]	; 173dc <__assert_fail@plt+0x6398>
   171f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   171fc:	mov	r5, r0
   17200:	movw	r4, #49436	; 0xc11c
   17204:	movt	r4, #2
   17208:	ldrd	r2, [ip]
   1720c:	strd	r6, [sp, #8]
   17210:	mov	r6, r1
   17214:	ldrd	r0, [ip, #8]
   17218:	strd	r8, [sp, #16]
   1721c:	strd	sl, [sp, #24]
   17220:	str	lr, [sp, #32]
   17224:	sub	sp, sp, #84	; 0x54
   17228:	ldrd	r8, [ip, #40]	; 0x28
   1722c:	strd	r2, [sp, #32]
   17230:	strd	r0, [sp, #40]	; 0x28
   17234:	ldrd	r2, [ip, #16]
   17238:	ldr	r7, [sp, #44]	; 0x2c
   1723c:	ldrd	r0, [ip, #24]
   17240:	strd	r2, [sp, #48]	; 0x30
   17244:	ldrd	r2, [ip, #32]
   17248:	mvn	lr, r7
   1724c:	and	lr, lr, #67108864	; 0x4000000
   17250:	eor	lr, lr, r7
   17254:	str	lr, [sp, #44]	; 0x2c
   17258:	strd	r0, [sp, #56]	; 0x38
   1725c:	strd	r2, [sp, #64]	; 0x40
   17260:	strd	r8, [sp, #72]	; 0x48
   17264:	bl	10f48 <__errno_location@plt>
   17268:	mov	r9, r0
   1726c:	ldr	sl, [r0]
   17270:	ldr	r2, [r4, #4]
   17274:	ldr	r7, [r4]
   17278:	cmp	r2, #0
   1727c:	bgt	172d8 <__assert_fail@plt+0x6294>
   17280:	add	r3, r4, #8
   17284:	str	r2, [sp, #28]
   17288:	rsb	r2, r2, #1
   1728c:	cmp	r7, r3
   17290:	beq	173b0 <__assert_fail@plt+0x636c>
   17294:	mov	r1, #8
   17298:	mov	r0, r7
   1729c:	mvn	r3, #-2147483648	; 0x80000000
   172a0:	str	r1, [sp]
   172a4:	add	r1, sp, #28
   172a8:	bl	1881c <__assert_fail@plt+0x77d8>
   172ac:	mov	r7, r0
   172b0:	str	r0, [r4]
   172b4:	ldr	r0, [r4, #4]
   172b8:	mov	r1, #0
   172bc:	ldr	r2, [sp, #28]
   172c0:	sub	r2, r2, r0
   172c4:	add	r0, r7, r0, lsl #3
   172c8:	lsl	r2, r2, #3
   172cc:	bl	10f60 <memset@plt>
   172d0:	ldr	r3, [sp, #28]
   172d4:	str	r3, [r4, #4]
   172d8:	ldr	ip, [sp, #32]
   172dc:	add	r0, sp, #40	; 0x28
   172e0:	mov	r3, r6
   172e4:	mov	r2, r5
   172e8:	ldr	r8, [sp, #36]	; 0x24
   172ec:	ldr	fp, [r7]
   172f0:	ldr	r4, [r7, #4]
   172f4:	str	ip, [sp]
   172f8:	orr	r8, r8, #1
   172fc:	ldr	ip, [sp, #72]	; 0x48
   17300:	mov	r1, fp
   17304:	str	r8, [sp, #4]
   17308:	ldr	lr, [sp, #76]	; 0x4c
   1730c:	str	r0, [sp, #8]
   17310:	mov	r0, r4
   17314:	str	ip, [sp, #12]
   17318:	str	lr, [sp, #16]
   1731c:	bl	14440 <__assert_fail@plt+0x33fc>
   17320:	cmp	fp, r0
   17324:	bhi	1738c <__assert_fail@plt+0x6348>
   17328:	add	fp, r0, #1
   1732c:	movw	r3, #49672	; 0xc208
   17330:	movt	r3, #2
   17334:	cmp	r4, r3
   17338:	str	fp, [r7]
   1733c:	beq	17348 <__assert_fail@plt+0x6304>
   17340:	mov	r0, r4
   17344:	bl	13db0 <__assert_fail@plt+0x2d6c>
   17348:	mov	r0, fp
   1734c:	bl	18578 <__assert_fail@plt+0x7534>
   17350:	ldr	lr, [sp, #32]
   17354:	mov	r2, r5
   17358:	mov	r3, r6
   1735c:	mov	r1, fp
   17360:	mov	r4, r0
   17364:	ldr	r5, [sp, #72]	; 0x48
   17368:	ldr	ip, [sp, #76]	; 0x4c
   1736c:	str	r0, [r7, #4]
   17370:	str	lr, [sp]
   17374:	add	lr, sp, #40	; 0x28
   17378:	str	r8, [sp, #4]
   1737c:	str	lr, [sp, #8]
   17380:	str	r5, [sp, #12]
   17384:	str	ip, [sp, #16]
   17388:	bl	14440 <__assert_fail@plt+0x33fc>
   1738c:	mov	r0, r4
   17390:	str	sl, [r9]
   17394:	add	sp, sp, #84	; 0x54
   17398:	ldrd	r4, [sp]
   1739c:	ldrd	r6, [sp, #8]
   173a0:	ldrd	r8, [sp, #16]
   173a4:	ldrd	sl, [sp, #24]
   173a8:	add	sp, sp, #32
   173ac:	pop	{pc}		; (ldr pc, [sp], #4)
   173b0:	mov	r0, #8
   173b4:	mvn	r3, #-2147483648	; 0x80000000
   173b8:	add	r1, sp, #28
   173bc:	str	r0, [sp]
   173c0:	mov	r0, #0
   173c4:	bl	1881c <__assert_fail@plt+0x77d8>
   173c8:	ldrd	r2, [r4, #8]
   173cc:	mov	r7, r0
   173d0:	str	r0, [r4]
   173d4:	strd	r2, [r0]
   173d8:	b	172b4 <__assert_fail@plt+0x6270>
   173dc:	andeq	ip, r2, r8, lsl #6
   173e0:	strd	r4, [sp, #-12]!
   173e4:	mov	r4, #0
   173e8:	mov	r5, #0
   173ec:	str	lr, [sp, #8]
   173f0:	sub	sp, sp, #100	; 0x64
   173f4:	cmp	r1, #10
   173f8:	strd	r4, [sp]
   173fc:	strd	r4, [sp, #8]
   17400:	strd	r4, [sp, #16]
   17404:	strd	r4, [sp, #24]
   17408:	strd	r4, [sp, #32]
   1740c:	strd	r4, [sp, #40]	; 0x28
   17410:	beq	17440 <__assert_fail@plt+0x63fc>
   17414:	mov	ip, #67108864	; 0x4000000
   17418:	mov	r3, sp
   1741c:	str	r1, [sp]
   17420:	mov	r1, r2
   17424:	mvn	r2, #0
   17428:	str	ip, [sp, #12]
   1742c:	bl	15e2c <__assert_fail@plt+0x4de8>
   17430:	add	sp, sp, #100	; 0x64
   17434:	ldrd	r4, [sp]
   17438:	add	sp, sp, #8
   1743c:	pop	{pc}		; (ldr pc, [sp], #4)
   17440:	bl	1102c <abort@plt>
   17444:	ldr	ip, [pc, #156]	; 174e8 <__assert_fail@plt+0x64a4>
   17448:	cmp	r2, #0
   1744c:	cmpne	r1, #0
   17450:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17454:	strd	r6, [sp, #8]
   17458:	mov	r6, r2
   1745c:	str	r8, [sp, #16]
   17460:	mov	r8, r3
   17464:	strd	sl, [sp, #20]
   17468:	ldrd	r4, [ip]
   1746c:	str	lr, [sp, #28]
   17470:	sub	sp, sp, #48	; 0x30
   17474:	mov	lr, #10
   17478:	ldrd	r2, [ip, #8]
   1747c:	ldrd	sl, [ip, #16]
   17480:	strd	r4, [sp]
   17484:	ldrd	r4, [ip, #32]
   17488:	str	lr, [sp]
   1748c:	strd	r2, [sp, #8]
   17490:	strd	sl, [sp, #16]
   17494:	ldrd	r2, [ip, #24]
   17498:	ldrd	sl, [ip, #40]	; 0x28
   1749c:	strd	r2, [sp, #24]
   174a0:	strd	r4, [sp, #32]
   174a4:	strd	sl, [sp, #40]	; 0x28
   174a8:	beq	174e4 <__assert_fail@plt+0x64a0>
   174ac:	mov	r7, r1
   174b0:	mov	r3, sp
   174b4:	mov	r1, r8
   174b8:	mvn	r2, #0
   174bc:	str	r7, [sp, #40]	; 0x28
   174c0:	str	r6, [sp, #44]	; 0x2c
   174c4:	bl	15e2c <__assert_fail@plt+0x4de8>
   174c8:	add	sp, sp, #48	; 0x30
   174cc:	ldrd	r4, [sp]
   174d0:	ldrd	r6, [sp, #8]
   174d4:	ldr	r8, [sp, #16]
   174d8:	ldrd	sl, [sp, #20]
   174dc:	add	sp, sp, #28
   174e0:	pop	{pc}		; (ldr pc, [sp], #4)
   174e4:	bl	1102c <abort@plt>
   174e8:	andeq	ip, r2, r8, lsl #6
   174ec:	ldr	ip, [pc, #156]	; 17590 <__assert_fail@plt+0x654c>
   174f0:	cmp	r2, #0
   174f4:	cmpne	r1, #0
   174f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   174fc:	strd	r6, [sp, #8]
   17500:	mov	r6, r2
   17504:	str	r8, [sp, #16]
   17508:	mov	r8, r3
   1750c:	strd	sl, [sp, #20]
   17510:	ldrd	r4, [ip]
   17514:	str	lr, [sp, #28]
   17518:	sub	sp, sp, #48	; 0x30
   1751c:	mov	lr, #10
   17520:	ldrd	r2, [ip, #8]
   17524:	ldrd	sl, [ip, #16]
   17528:	strd	r4, [sp]
   1752c:	ldrd	r4, [ip, #32]
   17530:	str	lr, [sp]
   17534:	strd	r2, [sp, #8]
   17538:	strd	sl, [sp, #16]
   1753c:	ldrd	r2, [ip, #24]
   17540:	ldrd	sl, [ip, #40]	; 0x28
   17544:	strd	r2, [sp, #24]
   17548:	strd	r4, [sp, #32]
   1754c:	strd	sl, [sp, #40]	; 0x28
   17550:	beq	1758c <__assert_fail@plt+0x6548>
   17554:	ldr	r2, [sp, #80]	; 0x50
   17558:	mov	r7, r1
   1755c:	mov	r3, sp
   17560:	mov	r1, r8
   17564:	str	r7, [sp, #40]	; 0x28
   17568:	str	r6, [sp, #44]	; 0x2c
   1756c:	bl	15e2c <__assert_fail@plt+0x4de8>
   17570:	add	sp, sp, #48	; 0x30
   17574:	ldrd	r4, [sp]
   17578:	ldrd	r6, [sp, #8]
   1757c:	ldr	r8, [sp, #16]
   17580:	ldrd	sl, [sp, #20]
   17584:	add	sp, sp, #28
   17588:	pop	{pc}		; (ldr pc, [sp], #4)
   1758c:	bl	1102c <abort@plt>
   17590:	andeq	ip, r2, r8, lsl #6
   17594:	ldr	ip, [pc, #512]	; 1779c <__assert_fail@plt+0x6758>
   17598:	cmp	r0, #0
   1759c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   175a0:	ldrd	r4, [ip, #16]
   175a4:	strd	r6, [sp, #8]
   175a8:	clz	r6, r1
   175ac:	mov	r7, r1
   175b0:	strd	r8, [sp, #16]
   175b4:	mov	r8, r0
   175b8:	lsr	r6, r6, #5
   175bc:	strd	sl, [sp, #24]
   175c0:	mov	fp, r2
   175c4:	mov	sl, #10
   175c8:	ldrd	r2, [ip]
   175cc:	moveq	r6, #1
   175d0:	str	lr, [sp, #32]
   175d4:	sub	sp, sp, #92	; 0x5c
   175d8:	cmp	r6, #0
   175dc:	ldrd	r0, [ip, #8]
   175e0:	strd	r2, [sp, #40]	; 0x28
   175e4:	strd	r4, [sp, #56]	; 0x38
   175e8:	ldrd	r2, [ip, #24]
   175ec:	strd	r0, [sp, #48]	; 0x30
   175f0:	ldrd	r0, [ip, #32]
   175f4:	str	sl, [sp, #40]	; 0x28
   175f8:	ldrd	r4, [ip, #40]	; 0x28
   175fc:	strd	r2, [sp, #64]	; 0x40
   17600:	strd	r0, [sp, #72]	; 0x48
   17604:	strd	r4, [sp, #80]	; 0x50
   17608:	bne	17798 <__assert_fail@plt+0x6754>
   1760c:	movw	r5, #49436	; 0xc11c
   17610:	movt	r5, #2
   17614:	str	r8, [sp, #80]	; 0x50
   17618:	str	r7, [sp, #84]	; 0x54
   1761c:	bl	10f48 <__errno_location@plt>
   17620:	ldr	r3, [r0]
   17624:	mov	r9, r0
   17628:	ldr	r2, [r5, #4]
   1762c:	ldr	r4, [r5]
   17630:	str	r3, [sp, #28]
   17634:	cmp	r2, #0
   17638:	movgt	r1, sl
   1763c:	bgt	176a4 <__assert_fail@plt+0x6660>
   17640:	add	r3, r5, #8
   17644:	str	r2, [sp, #36]	; 0x24
   17648:	rsb	r2, r2, #1
   1764c:	cmp	r4, r3
   17650:	beq	1776c <__assert_fail@plt+0x6728>
   17654:	mov	r1, #8
   17658:	mov	r0, r4
   1765c:	mvn	r3, #-2147483648	; 0x80000000
   17660:	str	r1, [sp]
   17664:	add	r1, sp, #36	; 0x24
   17668:	bl	1881c <__assert_fail@plt+0x77d8>
   1766c:	mov	r4, r0
   17670:	str	r0, [r5]
   17674:	ldr	r0, [r5, #4]
   17678:	mov	r1, #0
   1767c:	ldr	r2, [sp, #36]	; 0x24
   17680:	sub	r2, r2, r0
   17684:	add	r0, r4, r0, lsl #3
   17688:	lsl	r2, r2, #3
   1768c:	bl	10f60 <memset@plt>
   17690:	ldr	r3, [sp, #36]	; 0x24
   17694:	ldr	r1, [sp, #40]	; 0x28
   17698:	ldr	r8, [sp, #80]	; 0x50
   1769c:	str	r3, [r5, #4]
   176a0:	ldr	r7, [sp, #84]	; 0x54
   176a4:	mvn	r3, #0
   176a8:	mov	r2, fp
   176ac:	ldr	r6, [sp, #44]	; 0x2c
   176b0:	ldr	sl, [r4]
   176b4:	ldr	r5, [r4, #4]
   176b8:	orr	r6, r6, #1
   176bc:	stm	sp, {r1, r6}
   176c0:	add	r1, sp, #48	; 0x30
   176c4:	str	r8, [sp, #12]
   176c8:	mov	r0, r5
   176cc:	str	r1, [sp, #8]
   176d0:	mov	r1, sl
   176d4:	str	r7, [sp, #16]
   176d8:	bl	14440 <__assert_fail@plt+0x33fc>
   176dc:	cmp	sl, r0
   176e0:	bhi	17744 <__assert_fail@plt+0x6700>
   176e4:	add	r7, r0, #1
   176e8:	movw	r3, #49672	; 0xc208
   176ec:	movt	r3, #2
   176f0:	cmp	r5, r3
   176f4:	str	r7, [r4]
   176f8:	beq	17704 <__assert_fail@plt+0x66c0>
   176fc:	mov	r0, r5
   17700:	bl	13db0 <__assert_fail@plt+0x2d6c>
   17704:	mov	r0, r7
   17708:	bl	18578 <__assert_fail@plt+0x7534>
   1770c:	ldr	r3, [sp, #40]	; 0x28
   17710:	mov	r2, fp
   17714:	mov	r1, r7
   17718:	mov	r5, r0
   1771c:	ldr	lr, [sp, #80]	; 0x50
   17720:	ldr	ip, [sp, #84]	; 0x54
   17724:	str	r0, [r4, #4]
   17728:	add	r4, sp, #48	; 0x30
   1772c:	stm	sp, {r3, r6}
   17730:	mvn	r3, #0
   17734:	str	r4, [sp, #8]
   17738:	str	lr, [sp, #12]
   1773c:	str	ip, [sp, #16]
   17740:	bl	14440 <__assert_fail@plt+0x33fc>
   17744:	ldr	r3, [sp, #28]
   17748:	mov	r0, r5
   1774c:	str	r3, [r9]
   17750:	add	sp, sp, #92	; 0x5c
   17754:	ldrd	r4, [sp]
   17758:	ldrd	r6, [sp, #8]
   1775c:	ldrd	r8, [sp, #16]
   17760:	ldrd	sl, [sp, #24]
   17764:	add	sp, sp, #32
   17768:	pop	{pc}		; (ldr pc, [sp], #4)
   1776c:	mov	r1, #8
   17770:	mvn	r3, #-2147483648	; 0x80000000
   17774:	mov	r0, r6
   17778:	str	r1, [sp]
   1777c:	add	r1, sp, #36	; 0x24
   17780:	bl	1881c <__assert_fail@plt+0x77d8>
   17784:	ldrd	r2, [r5, #8]
   17788:	mov	r4, r0
   1778c:	str	r0, [r5]
   17790:	strd	r2, [r0]
   17794:	b	17674 <__assert_fail@plt+0x6630>
   17798:	bl	1102c <abort@plt>
   1779c:	andeq	ip, r2, r8, lsl #6
   177a0:	ldr	ip, [pc, #536]	; 179c0 <__assert_fail@plt+0x697c>
   177a4:	cmp	r0, #0
   177a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   177ac:	ldrd	r4, [ip, #16]
   177b0:	strd	r6, [sp, #8]
   177b4:	mov	r6, r1
   177b8:	mov	r7, r0
   177bc:	strd	r8, [sp, #16]
   177c0:	mov	r9, #10
   177c4:	strd	sl, [sp, #24]
   177c8:	mov	sl, r2
   177cc:	mov	fp, r3
   177d0:	str	lr, [sp, #32]
   177d4:	clz	lr, r1
   177d8:	sub	sp, sp, #92	; 0x5c
   177dc:	ldrd	r2, [ip]
   177e0:	lsr	lr, lr, #5
   177e4:	moveq	lr, #1
   177e8:	ldrd	r0, [ip, #8]
   177ec:	cmp	lr, #0
   177f0:	strd	r4, [sp, #56]	; 0x38
   177f4:	ldrd	r4, [ip, #40]	; 0x28
   177f8:	str	lr, [sp, #28]
   177fc:	strd	r2, [sp, #40]	; 0x28
   17800:	ldrd	r2, [ip, #24]
   17804:	strd	r0, [sp, #48]	; 0x30
   17808:	ldrd	r0, [ip, #32]
   1780c:	str	r9, [sp, #40]	; 0x28
   17810:	strd	r2, [sp, #64]	; 0x40
   17814:	strd	r4, [sp, #80]	; 0x50
   17818:	strd	r0, [sp, #72]	; 0x48
   1781c:	bne	179bc <__assert_fail@plt+0x6978>
   17820:	movw	r5, #49436	; 0xc11c
   17824:	movt	r5, #2
   17828:	str	r7, [sp, #80]	; 0x50
   1782c:	str	r6, [sp, #84]	; 0x54
   17830:	bl	10f48 <__errno_location@plt>
   17834:	ldr	r3, [r0]
   17838:	mov	r8, r0
   1783c:	ldr	r2, [r5, #4]
   17840:	ldr	r4, [r5]
   17844:	str	r3, [sp, #24]
   17848:	cmp	r2, #0
   1784c:	movgt	r1, r9
   17850:	bgt	178b8 <__assert_fail@plt+0x6874>
   17854:	add	r3, r5, #8
   17858:	str	r2, [sp, #36]	; 0x24
   1785c:	rsb	r2, r2, #1
   17860:	cmp	r4, r3
   17864:	beq	17990 <__assert_fail@plt+0x694c>
   17868:	mov	r1, #8
   1786c:	mov	r0, r4
   17870:	mvn	r3, #-2147483648	; 0x80000000
   17874:	str	r1, [sp]
   17878:	add	r1, sp, #36	; 0x24
   1787c:	bl	1881c <__assert_fail@plt+0x77d8>
   17880:	mov	r4, r0
   17884:	str	r0, [r5]
   17888:	ldr	r0, [r5, #4]
   1788c:	mov	r1, #0
   17890:	ldr	r2, [sp, #36]	; 0x24
   17894:	sub	r2, r2, r0
   17898:	add	r0, r4, r0, lsl #3
   1789c:	lsl	r2, r2, #3
   178a0:	bl	10f60 <memset@plt>
   178a4:	ldr	r3, [sp, #36]	; 0x24
   178a8:	ldr	r1, [sp, #40]	; 0x28
   178ac:	ldr	r7, [sp, #80]	; 0x50
   178b0:	str	r3, [r5, #4]
   178b4:	ldr	r6, [sp, #84]	; 0x54
   178b8:	mov	r3, fp
   178bc:	mov	r2, sl
   178c0:	ldr	r0, [sp, #44]	; 0x2c
   178c4:	ldr	r9, [r4]
   178c8:	ldr	r5, [r4, #4]
   178cc:	orr	r0, r0, #1
   178d0:	str	r1, [sp]
   178d4:	add	r1, sp, #48	; 0x30
   178d8:	str	r0, [sp, #4]
   178dc:	str	r1, [sp, #8]
   178e0:	mov	r1, r9
   178e4:	str	r7, [sp, #12]
   178e8:	str	r6, [sp, #16]
   178ec:	str	r0, [sp, #28]
   178f0:	mov	r0, r5
   178f4:	bl	14440 <__assert_fail@plt+0x33fc>
   178f8:	cmp	r9, r0
   178fc:	bhi	17968 <__assert_fail@plt+0x6924>
   17900:	add	r6, r0, #1
   17904:	movw	r3, #49672	; 0xc208
   17908:	movt	r3, #2
   1790c:	cmp	r5, r3
   17910:	str	r6, [r4]
   17914:	beq	17920 <__assert_fail@plt+0x68dc>
   17918:	mov	r0, r5
   1791c:	bl	13db0 <__assert_fail@plt+0x2d6c>
   17920:	mov	r0, r6
   17924:	bl	18578 <__assert_fail@plt+0x7534>
   17928:	ldr	lr, [sp, #40]	; 0x28
   1792c:	mov	r1, r6
   17930:	mov	r3, fp
   17934:	mov	r2, sl
   17938:	mov	r5, r0
   1793c:	ldr	r6, [sp, #80]	; 0x50
   17940:	ldr	ip, [sp, #84]	; 0x54
   17944:	str	r0, [r4, #4]
   17948:	str	lr, [sp]
   1794c:	ldr	lr, [sp, #28]
   17950:	str	lr, [sp, #4]
   17954:	add	lr, sp, #48	; 0x30
   17958:	str	r6, [sp, #12]
   1795c:	str	lr, [sp, #8]
   17960:	str	ip, [sp, #16]
   17964:	bl	14440 <__assert_fail@plt+0x33fc>
   17968:	ldr	r3, [sp, #24]
   1796c:	mov	r0, r5
   17970:	str	r3, [r8]
   17974:	add	sp, sp, #92	; 0x5c
   17978:	ldrd	r4, [sp]
   1797c:	ldrd	r6, [sp, #8]
   17980:	ldrd	r8, [sp, #16]
   17984:	ldrd	sl, [sp, #24]
   17988:	add	sp, sp, #32
   1798c:	pop	{pc}		; (ldr pc, [sp], #4)
   17990:	mov	r1, #8
   17994:	mvn	r3, #-2147483648	; 0x80000000
   17998:	ldr	r0, [sp, #28]
   1799c:	str	r1, [sp]
   179a0:	add	r1, sp, #36	; 0x24
   179a4:	bl	1881c <__assert_fail@plt+0x77d8>
   179a8:	ldrd	r2, [r5, #8]
   179ac:	mov	r4, r0
   179b0:	str	r0, [r5]
   179b4:	strd	r2, [r0]
   179b8:	b	17888 <__assert_fail@plt+0x6844>
   179bc:	bl	1102c <abort@plt>
   179c0:	andeq	ip, r2, r8, lsl #6
   179c4:	ldr	r3, [pc]	; 179cc <__assert_fail@plt+0x6988>
   179c8:	b	15e2c <__assert_fail@plt+0x4de8>
   179cc:	andeq	ip, r2, ip, lsr #2
   179d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   179d4:	movw	r4, #49436	; 0xc11c
   179d8:	movt	r4, #2
   179dc:	strd	r6, [sp, #8]
   179e0:	strd	r8, [sp, #16]
   179e4:	strd	sl, [sp, #24]
   179e8:	mov	sl, r0
   179ec:	mov	fp, r1
   179f0:	str	lr, [sp, #32]
   179f4:	sub	sp, sp, #44	; 0x2c
   179f8:	bl	10f48 <__errno_location@plt>
   179fc:	ldr	r3, [r0]
   17a00:	mov	r8, r0
   17a04:	ldr	r2, [r4, #4]
   17a08:	ldr	r5, [r4]
   17a0c:	str	r3, [sp, #28]
   17a10:	cmp	r2, #0
   17a14:	bgt	17a70 <__assert_fail@plt+0x6a2c>
   17a18:	add	r3, r4, #8
   17a1c:	str	r2, [sp, #36]	; 0x24
   17a20:	rsb	r2, r2, #1
   17a24:	cmp	r5, r3
   17a28:	beq	17b4c <__assert_fail@plt+0x6b08>
   17a2c:	mov	r1, #8
   17a30:	mov	r0, r5
   17a34:	mvn	r3, #-2147483648	; 0x80000000
   17a38:	str	r1, [sp]
   17a3c:	add	r1, sp, #36	; 0x24
   17a40:	bl	1881c <__assert_fail@plt+0x77d8>
   17a44:	mov	r5, r0
   17a48:	str	r0, [r4]
   17a4c:	ldr	r0, [r4, #4]
   17a50:	mov	r1, #0
   17a54:	ldr	r2, [sp, #36]	; 0x24
   17a58:	sub	r2, r2, r0
   17a5c:	add	r0, r5, r0, lsl #3
   17a60:	lsl	r2, r2, #3
   17a64:	bl	10f60 <memset@plt>
   17a68:	ldr	r3, [sp, #36]	; 0x24
   17a6c:	str	r3, [r4, #4]
   17a70:	ldr	ip, [r4, #16]
   17a74:	mov	r3, fp
   17a78:	mov	r2, sl
   17a7c:	ldr	r7, [r4, #20]
   17a80:	ldr	r0, [pc, #240]	; 17b78 <__assert_fail@plt+0x6b34>
   17a84:	ldr	r9, [r5]
   17a88:	orr	r7, r7, #1
   17a8c:	ldr	r6, [r5, #4]
   17a90:	str	ip, [sp]
   17a94:	ldr	ip, [r4, #56]	; 0x38
   17a98:	mov	r1, r9
   17a9c:	str	r7, [sp, #4]
   17aa0:	ldr	lr, [r4, #60]	; 0x3c
   17aa4:	str	r0, [sp, #8]
   17aa8:	mov	r0, r6
   17aac:	str	ip, [sp, #12]
   17ab0:	str	lr, [sp, #16]
   17ab4:	bl	14440 <__assert_fail@plt+0x33fc>
   17ab8:	cmp	r9, r0
   17abc:	bhi	17b24 <__assert_fail@plt+0x6ae0>
   17ac0:	add	r9, r0, #1
   17ac4:	movw	r3, #49672	; 0xc208
   17ac8:	movt	r3, #2
   17acc:	cmp	r6, r3
   17ad0:	str	r9, [r5]
   17ad4:	beq	17ae0 <__assert_fail@plt+0x6a9c>
   17ad8:	mov	r0, r6
   17adc:	bl	13db0 <__assert_fail@plt+0x2d6c>
   17ae0:	mov	r0, r9
   17ae4:	bl	18578 <__assert_fail@plt+0x7534>
   17ae8:	ldr	ip, [r4, #16]
   17aec:	mov	r1, r9
   17af0:	mov	r3, fp
   17af4:	mov	r2, sl
   17af8:	mov	r6, r0
   17afc:	ldr	r9, [r4, #56]	; 0x38
   17b00:	ldr	lr, [r4, #60]	; 0x3c
   17b04:	str	r0, [r5, #4]
   17b08:	str	ip, [sp]
   17b0c:	ldr	ip, [pc, #100]	; 17b78 <__assert_fail@plt+0x6b34>
   17b10:	str	r7, [sp, #4]
   17b14:	str	ip, [sp, #8]
   17b18:	str	r9, [sp, #12]
   17b1c:	str	lr, [sp, #16]
   17b20:	bl	14440 <__assert_fail@plt+0x33fc>
   17b24:	ldr	r3, [sp, #28]
   17b28:	mov	r0, r6
   17b2c:	str	r3, [r8]
   17b30:	add	sp, sp, #44	; 0x2c
   17b34:	ldrd	r4, [sp]
   17b38:	ldrd	r6, [sp, #8]
   17b3c:	ldrd	r8, [sp, #16]
   17b40:	ldrd	sl, [sp, #24]
   17b44:	add	sp, sp, #32
   17b48:	pop	{pc}		; (ldr pc, [sp], #4)
   17b4c:	mov	r0, #8
   17b50:	mvn	r3, #-2147483648	; 0x80000000
   17b54:	add	r1, sp, #36	; 0x24
   17b58:	str	r0, [sp]
   17b5c:	mov	r0, #0
   17b60:	bl	1881c <__assert_fail@plt+0x77d8>
   17b64:	ldrd	r2, [r4, #8]
   17b68:	mov	r5, r0
   17b6c:	str	r0, [r4]
   17b70:	strd	r2, [r0]
   17b74:	b	17a4c <__assert_fail@plt+0x6a08>
   17b78:	andeq	ip, r2, r4, lsr r1
   17b7c:	ldr	r3, [pc, #4]	; 17b88 <__assert_fail@plt+0x6b44>
   17b80:	mvn	r2, #0
   17b84:	b	15e2c <__assert_fail@plt+0x4de8>
   17b88:	andeq	ip, r2, ip, lsr #2
   17b8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17b90:	movw	r4, #49436	; 0xc11c
   17b94:	movt	r4, #2
   17b98:	strd	r6, [sp, #8]
   17b9c:	strd	r8, [sp, #16]
   17ba0:	strd	sl, [sp, #24]
   17ba4:	mov	sl, r0
   17ba8:	str	lr, [sp, #32]
   17bac:	sub	sp, sp, #44	; 0x2c
   17bb0:	bl	10f48 <__errno_location@plt>
   17bb4:	ldr	r3, [r0]
   17bb8:	mov	r8, r0
   17bbc:	ldr	r2, [r4, #4]
   17bc0:	ldr	r5, [r4]
   17bc4:	str	r3, [sp, #28]
   17bc8:	cmp	r2, #0
   17bcc:	bgt	17c28 <__assert_fail@plt+0x6be4>
   17bd0:	add	r3, r4, #8
   17bd4:	str	r2, [sp, #36]	; 0x24
   17bd8:	rsb	r2, r2, #1
   17bdc:	cmp	r5, r3
   17be0:	beq	17cf0 <__assert_fail@plt+0x6cac>
   17be4:	mov	r1, #8
   17be8:	mov	r0, r5
   17bec:	mvn	r3, #-2147483648	; 0x80000000
   17bf0:	str	r1, [sp]
   17bf4:	add	r1, sp, #36	; 0x24
   17bf8:	bl	1881c <__assert_fail@plt+0x77d8>
   17bfc:	mov	r5, r0
   17c00:	str	r0, [r4]
   17c04:	ldr	r0, [r4, #4]
   17c08:	mov	r1, #0
   17c0c:	ldr	r2, [sp, #36]	; 0x24
   17c10:	sub	r2, r2, r0
   17c14:	add	r0, r5, r0, lsl #3
   17c18:	lsl	r2, r2, #3
   17c1c:	bl	10f60 <memset@plt>
   17c20:	ldr	r3, [sp, #36]	; 0x24
   17c24:	str	r3, [r4, #4]
   17c28:	ldr	ip, [r4, #16]
   17c2c:	mvn	r3, #0
   17c30:	mov	r2, sl
   17c34:	ldr	r7, [r4, #20]
   17c38:	ldr	fp, [pc, #220]	; 17d1c <__assert_fail@plt+0x6cd8>
   17c3c:	ldr	r9, [r5]
   17c40:	orr	r7, r7, #1
   17c44:	ldr	r6, [r5, #4]
   17c48:	str	ip, [sp]
   17c4c:	ldr	ip, [r4, #56]	; 0x38
   17c50:	mov	r1, r9
   17c54:	stmib	sp, {r7, fp}
   17c58:	ldr	lr, [r4, #60]	; 0x3c
   17c5c:	mov	r0, r6
   17c60:	str	ip, [sp, #12]
   17c64:	str	lr, [sp, #16]
   17c68:	bl	14440 <__assert_fail@plt+0x33fc>
   17c6c:	cmp	r9, r0
   17c70:	bhi	17cc8 <__assert_fail@plt+0x6c84>
   17c74:	add	r9, r0, #1
   17c78:	movw	r3, #49672	; 0xc208
   17c7c:	movt	r3, #2
   17c80:	cmp	r6, r3
   17c84:	str	r9, [r5]
   17c88:	beq	17c94 <__assert_fail@plt+0x6c50>
   17c8c:	mov	r0, r6
   17c90:	bl	13db0 <__assert_fail@plt+0x2d6c>
   17c94:	mov	r0, r9
   17c98:	bl	18578 <__assert_fail@plt+0x7534>
   17c9c:	ldr	r3, [r4, #16]
   17ca0:	mov	r2, sl
   17ca4:	mov	r1, r9
   17ca8:	mov	r6, r0
   17cac:	ldr	lr, [r4, #56]	; 0x38
   17cb0:	ldr	ip, [r4, #60]	; 0x3c
   17cb4:	str	r0, [r5, #4]
   17cb8:	stm	sp, {r3, r7, fp, lr}
   17cbc:	mvn	r3, #0
   17cc0:	str	ip, [sp, #16]
   17cc4:	bl	14440 <__assert_fail@plt+0x33fc>
   17cc8:	ldr	r3, [sp, #28]
   17ccc:	mov	r0, r6
   17cd0:	str	r3, [r8]
   17cd4:	add	sp, sp, #44	; 0x2c
   17cd8:	ldrd	r4, [sp]
   17cdc:	ldrd	r6, [sp, #8]
   17ce0:	ldrd	r8, [sp, #16]
   17ce4:	ldrd	sl, [sp, #24]
   17ce8:	add	sp, sp, #32
   17cec:	pop	{pc}		; (ldr pc, [sp], #4)
   17cf0:	mov	r0, #8
   17cf4:	mvn	r3, #-2147483648	; 0x80000000
   17cf8:	add	r1, sp, #36	; 0x24
   17cfc:	str	r0, [sp]
   17d00:	mov	r0, #0
   17d04:	bl	1881c <__assert_fail@plt+0x77d8>
   17d08:	ldrd	r2, [r4, #8]
   17d0c:	mov	r5, r0
   17d10:	str	r0, [r4]
   17d14:	strd	r2, [r0]
   17d18:	b	17c04 <__assert_fail@plt+0x6bc0>
   17d1c:	andeq	ip, r2, r4, lsr r1
   17d20:	strd	r4, [sp, #-16]!
   17d24:	mov	r5, r1
   17d28:	mov	r1, #0
   17d2c:	mov	r4, r2
   17d30:	str	r6, [sp, #8]
   17d34:	str	lr, [sp, #12]
   17d38:	bl	10fd8 <setlocale@plt>
   17d3c:	subs	r6, r0, #0
   17d40:	beq	17dc0 <__assert_fail@plt+0x6d7c>
   17d44:	bl	10f30 <strlen@plt>
   17d48:	cmp	r4, r0
   17d4c:	bhi	17d6c <__assert_fail@plt+0x6d28>
   17d50:	cmp	r4, #0
   17d54:	moveq	r0, #34	; 0x22
   17d58:	bne	17d90 <__assert_fail@plt+0x6d4c>
   17d5c:	ldrd	r4, [sp]
   17d60:	ldr	r6, [sp, #8]
   17d64:	add	sp, sp, #12
   17d68:	pop	{pc}		; (ldr pc, [sp], #4)
   17d6c:	add	r2, r0, #1
   17d70:	mov	r1, r6
   17d74:	mov	r0, r5
   17d78:	bl	10df8 <memcpy@plt>
   17d7c:	ldrd	r4, [sp]
   17d80:	mov	r0, #0
   17d84:	ldr	r6, [sp, #8]
   17d88:	add	sp, sp, #12
   17d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d90:	sub	r4, r4, #1
   17d94:	mov	r1, r6
   17d98:	mov	r2, r4
   17d9c:	mov	r0, r5
   17da0:	bl	10df8 <memcpy@plt>
   17da4:	mov	r3, #0
   17da8:	mov	r0, #34	; 0x22
   17dac:	strb	r3, [r5, r4]
   17db0:	ldrd	r4, [sp]
   17db4:	ldr	r6, [sp, #8]
   17db8:	add	sp, sp, #12
   17dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   17dc0:	cmp	r4, #0
   17dc4:	mov	r0, #22
   17dc8:	strbne	r6, [r5]
   17dcc:	ldrd	r4, [sp]
   17dd0:	ldr	r6, [sp, #8]
   17dd4:	add	sp, sp, #12
   17dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17ddc:	mov	r1, #0
   17de0:	b	10fd8 <setlocale@plt>
   17de4:	mov	r2, #3
   17de8:	mov	r1, #0
   17dec:	b	1a150 <__assert_fail@plt+0x910c>
   17df0:	cmp	r1, #0
   17df4:	strd	r4, [sp, #-16]!
   17df8:	mov	ip, r3
   17dfc:	str	r6, [sp, #8]
   17e00:	mov	r4, r0
   17e04:	str	lr, [sp, #12]
   17e08:	sub	sp, sp, #32
   17e0c:	ldr	r5, [sp, #48]	; 0x30
   17e10:	ldr	r6, [sp, #52]	; 0x34
   17e14:	beq	17f58 <__assert_fail@plt+0x6f14>
   17e18:	mov	r3, r1
   17e1c:	mov	r1, #1
   17e20:	stm	sp, {r2, ip}
   17e24:	movw	r2, #46396	; 0xb53c
   17e28:	movt	r2, #1
   17e2c:	bl	10f84 <__fprintf_chk@plt>
   17e30:	mov	r2, #5
   17e34:	movw	r1, #46416	; 0xb550
   17e38:	movt	r1, #1
   17e3c:	mov	r0, #0
   17e40:	bl	10e40 <dcgettext@plt>
   17e44:	movw	ip, #2022	; 0x7e6
   17e48:	mov	r3, r0
   17e4c:	mov	r1, #1
   17e50:	movw	r2, #47144	; 0xb828
   17e54:	movt	r2, #1
   17e58:	mov	r0, r4
   17e5c:	str	ip, [sp]
   17e60:	bl	10f84 <__fprintf_chk@plt>
   17e64:	mov	r1, r4
   17e68:	mov	r0, #10
   17e6c:	bl	10e34 <fputc_unlocked@plt>
   17e70:	mov	r2, #5
   17e74:	movw	r1, #46420	; 0xb554
   17e78:	movt	r1, #1
   17e7c:	mov	r0, #0
   17e80:	bl	10e40 <dcgettext@plt>
   17e84:	mov	r2, r0
   17e88:	mov	r1, #1
   17e8c:	movw	r3, #46592	; 0xb600
   17e90:	movt	r3, #1
   17e94:	mov	r0, r4
   17e98:	bl	10f84 <__fprintf_chk@plt>
   17e9c:	mov	r1, r4
   17ea0:	mov	r0, #10
   17ea4:	bl	10e34 <fputc_unlocked@plt>
   17ea8:	cmp	r6, #9
   17eac:	ldrls	pc, [pc, r6, lsl #2]
   17eb0:	b	181c4 <__assert_fail@plt+0x7180>
   17eb4:	andeq	r7, r1, r4, asr #30
   17eb8:	andeq	r7, r1, r4, ror pc
   17ebc:			; <UNDEFINED> instruction: 0x00017fb0
   17ec0:	strdeq	r7, [r1], -r0
   17ec4:	andeq	r8, r1, r8, lsr r0
   17ec8:	andeq	r8, r1, r0, ror r0
   17ecc:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ed0:	andeq	r8, r1, ip, lsl #2
   17ed4:	andeq	r8, r1, r4, ror #2
   17ed8:	ldrdeq	r7, [r1], -ip
   17edc:	movw	r1, #46896	; 0xb730
   17ee0:	movt	r1, #1
   17ee4:	mov	r2, #5
   17ee8:	mov	r0, #0
   17eec:	bl	10e40 <dcgettext@plt>
   17ef0:	ldr	lr, [r5, #4]
   17ef4:	mov	r2, r0
   17ef8:	mov	r1, #1
   17efc:	mov	r0, r4
   17f00:	ldr	r3, [r5, #8]
   17f04:	ldr	ip, [r5, #32]
   17f08:	str	lr, [sp]
   17f0c:	ldr	lr, [r5, #12]
   17f10:	str	ip, [sp, #28]
   17f14:	ldr	ip, [r5, #28]
   17f18:	str	r3, [sp, #4]
   17f1c:	ldr	r3, [r5, #16]
   17f20:	str	lr, [sp, #8]
   17f24:	ldr	lr, [r5, #20]
   17f28:	str	ip, [sp, #24]
   17f2c:	ldr	ip, [r5, #24]
   17f30:	str	r3, [sp, #12]
   17f34:	ldr	r3, [r5]
   17f38:	str	lr, [sp, #16]
   17f3c:	str	ip, [sp, #20]
   17f40:	bl	10f84 <__fprintf_chk@plt>
   17f44:	add	sp, sp, #32
   17f48:	ldrd	r4, [sp]
   17f4c:	ldr	r6, [sp, #8]
   17f50:	add	sp, sp, #12
   17f54:	pop	{pc}		; (ldr pc, [sp], #4)
   17f58:	mov	r3, r2
   17f5c:	mov	r1, #1
   17f60:	str	ip, [sp]
   17f64:	movw	r2, #46408	; 0xb548
   17f68:	movt	r2, #1
   17f6c:	bl	10f84 <__fprintf_chk@plt>
   17f70:	b	17e30 <__assert_fail@plt+0x6dec>
   17f74:	mov	r2, #5
   17f78:	movw	r1, #46628	; 0xb624
   17f7c:	movt	r1, #1
   17f80:	mov	r0, #0
   17f84:	bl	10e40 <dcgettext@plt>
   17f88:	ldr	r3, [r5]
   17f8c:	mov	r2, r0
   17f90:	mov	r1, #1
   17f94:	mov	r0, r4
   17f98:	add	sp, sp, #32
   17f9c:	ldrd	r4, [sp]
   17fa0:	ldr	r6, [sp, #8]
   17fa4:	ldr	lr, [sp, #12]
   17fa8:	add	sp, sp, #16
   17fac:	b	10f84 <__fprintf_chk@plt>
   17fb0:	mov	r2, #5
   17fb4:	movw	r1, #46644	; 0xb634
   17fb8:	movt	r1, #1
   17fbc:	mov	r0, #0
   17fc0:	bl	10e40 <dcgettext@plt>
   17fc4:	ldm	r5, {r3, ip}
   17fc8:	mov	r2, r0
   17fcc:	mov	r1, #1
   17fd0:	mov	r0, r4
   17fd4:	str	ip, [sp, #48]	; 0x30
   17fd8:	add	sp, sp, #32
   17fdc:	ldrd	r4, [sp]
   17fe0:	ldr	r6, [sp, #8]
   17fe4:	ldr	lr, [sp, #12]
   17fe8:	add	sp, sp, #16
   17fec:	b	10f84 <__fprintf_chk@plt>
   17ff0:	mov	r2, #5
   17ff4:	movw	r1, #46668	; 0xb64c
   17ff8:	movt	r1, #1
   17ffc:	mov	r0, #0
   18000:	bl	10e40 <dcgettext@plt>
   18004:	ldm	r5, {r3, lr}
   18008:	mov	r2, r0
   1800c:	mov	r1, #1
   18010:	mov	r0, r4
   18014:	ldr	ip, [r5, #8]
   18018:	str	lr, [sp, #48]	; 0x30
   1801c:	str	ip, [sp, #52]	; 0x34
   18020:	add	sp, sp, #32
   18024:	ldrd	r4, [sp]
   18028:	ldr	r6, [sp, #8]
   1802c:	ldr	lr, [sp, #12]
   18030:	add	sp, sp, #16
   18034:	b	10f84 <__fprintf_chk@plt>
   18038:	mov	r2, #5
   1803c:	movw	r1, #46696	; 0xb668
   18040:	movt	r1, #1
   18044:	mov	r0, #0
   18048:	bl	10e40 <dcgettext@plt>
   1804c:	ldmib	r5, {r3, ip, lr}
   18050:	mov	r2, r0
   18054:	mov	r1, #1
   18058:	mov	r0, r4
   1805c:	str	r3, [sp]
   18060:	ldr	r3, [r5]
   18064:	stmib	sp, {ip, lr}
   18068:	bl	10f84 <__fprintf_chk@plt>
   1806c:	b	17f44 <__assert_fail@plt+0x6f00>
   18070:	mov	r2, #5
   18074:	movw	r1, #46728	; 0xb688
   18078:	movt	r1, #1
   1807c:	mov	r0, #0
   18080:	bl	10e40 <dcgettext@plt>
   18084:	ldmib	r5, {ip, lr}
   18088:	mov	r2, r0
   1808c:	mov	r1, #1
   18090:	mov	r0, r4
   18094:	ldr	r3, [r5, #16]
   18098:	str	ip, [sp]
   1809c:	ldr	ip, [r5, #12]
   180a0:	str	r3, [sp, #12]
   180a4:	ldr	r3, [r5]
   180a8:	str	lr, [sp, #4]
   180ac:	str	ip, [sp, #8]
   180b0:	bl	10f84 <__fprintf_chk@plt>
   180b4:	b	17f44 <__assert_fail@plt+0x6f00>
   180b8:	mov	r2, #5
   180bc:	movw	r1, #46764	; 0xb6ac
   180c0:	movt	r1, #1
   180c4:	mov	r0, #0
   180c8:	bl	10e40 <dcgettext@plt>
   180cc:	ldr	lr, [r5, #4]
   180d0:	mov	r2, r0
   180d4:	mov	r1, #1
   180d8:	mov	r0, r4
   180dc:	ldr	r3, [r5, #8]
   180e0:	ldr	ip, [r5, #20]
   180e4:	str	lr, [sp]
   180e8:	ldr	lr, [r5, #12]
   180ec:	str	ip, [sp, #16]
   180f0:	ldr	ip, [r5, #16]
   180f4:	str	r3, [sp, #4]
   180f8:	ldr	r3, [r5]
   180fc:	str	lr, [sp, #8]
   18100:	str	ip, [sp, #12]
   18104:	bl	10f84 <__fprintf_chk@plt>
   18108:	b	17f44 <__assert_fail@plt+0x6f00>
   1810c:	mov	r2, #5
   18110:	movw	r1, #46804	; 0xb6d4
   18114:	movt	r1, #1
   18118:	mov	r0, #0
   1811c:	bl	10e40 <dcgettext@plt>
   18120:	ldmib	r5, {r3, ip}
   18124:	mov	r2, r0
   18128:	mov	r1, #1
   1812c:	mov	r0, r4
   18130:	ldr	lr, [r5, #24]
   18134:	str	r3, [sp]
   18138:	ldr	r3, [r5, #12]
   1813c:	str	lr, [sp, #20]
   18140:	ldr	lr, [r5, #20]
   18144:	str	ip, [sp, #4]
   18148:	ldr	ip, [r5, #16]
   1814c:	str	r3, [sp, #8]
   18150:	ldr	r3, [r5]
   18154:	str	ip, [sp, #12]
   18158:	str	lr, [sp, #16]
   1815c:	bl	10f84 <__fprintf_chk@plt>
   18160:	b	17f44 <__assert_fail@plt+0x6f00>
   18164:	mov	r2, #5
   18168:	movw	r1, #46848	; 0xb700
   1816c:	movt	r1, #1
   18170:	mov	r0, #0
   18174:	bl	10e40 <dcgettext@plt>
   18178:	ldmib	r5, {ip, lr}
   1817c:	mov	r2, r0
   18180:	mov	r1, #1
   18184:	mov	r0, r4
   18188:	ldr	r3, [r5, #28]
   1818c:	str	ip, [sp]
   18190:	ldr	ip, [r5, #12]
   18194:	str	r3, [sp, #24]
   18198:	ldr	r3, [r5, #24]
   1819c:	str	lr, [sp, #4]
   181a0:	ldr	lr, [r5, #16]
   181a4:	str	ip, [sp, #8]
   181a8:	ldr	ip, [r5, #20]
   181ac:	str	r3, [sp, #20]
   181b0:	ldr	r3, [r5]
   181b4:	str	lr, [sp, #12]
   181b8:	str	ip, [sp, #16]
   181bc:	bl	10f84 <__fprintf_chk@plt>
   181c0:	b	17f44 <__assert_fail@plt+0x6f00>
   181c4:	movw	r1, #46948	; 0xb764
   181c8:	movt	r1, #1
   181cc:	b	17ee4 <__assert_fail@plt+0x6ea0>
   181d0:	strd	r4, [sp, #-12]!
   181d4:	str	lr, [sp, #8]
   181d8:	sub	sp, sp, #12
   181dc:	ldr	r5, [sp, #24]
   181e0:	ldr	ip, [r5]
   181e4:	cmp	ip, #0
   181e8:	beq	18204 <__assert_fail@plt+0x71c0>
   181ec:	mov	lr, r5
   181f0:	mov	ip, #0
   181f4:	ldr	r4, [lr, #4]!
   181f8:	add	ip, ip, #1
   181fc:	cmp	r4, #0
   18200:	bne	181f4 <__assert_fail@plt+0x71b0>
   18204:	stm	sp, {r5, ip}
   18208:	bl	17df0 <__assert_fail@plt+0x6dac>
   1820c:	add	sp, sp, #12
   18210:	ldrd	r4, [sp]
   18214:	add	sp, sp, #8
   18218:	pop	{pc}		; (ldr pc, [sp], #4)
   1821c:	push	{lr}		; (str lr, [sp, #-4]!)
   18220:	sub	sp, sp, #52	; 0x34
   18224:	ldr	ip, [sp, #56]	; 0x38
   18228:	ldr	lr, [ip]
   1822c:	cmp	lr, #0
   18230:	str	lr, [sp, #8]
   18234:	beq	182cc <__assert_fail@plt+0x7288>
   18238:	ldr	lr, [ip, #4]
   1823c:	cmp	lr, #0
   18240:	str	lr, [sp, #12]
   18244:	beq	182e0 <__assert_fail@plt+0x729c>
   18248:	ldr	lr, [ip, #8]
   1824c:	cmp	lr, #0
   18250:	str	lr, [sp, #16]
   18254:	beq	182e8 <__assert_fail@plt+0x72a4>
   18258:	ldr	lr, [ip, #12]
   1825c:	cmp	lr, #0
   18260:	str	lr, [sp, #20]
   18264:	beq	182f0 <__assert_fail@plt+0x72ac>
   18268:	ldr	lr, [ip, #16]
   1826c:	cmp	lr, #0
   18270:	str	lr, [sp, #24]
   18274:	beq	182f8 <__assert_fail@plt+0x72b4>
   18278:	ldr	lr, [ip, #20]
   1827c:	cmp	lr, #0
   18280:	str	lr, [sp, #28]
   18284:	beq	18300 <__assert_fail@plt+0x72bc>
   18288:	ldr	lr, [ip, #24]
   1828c:	cmp	lr, #0
   18290:	str	lr, [sp, #32]
   18294:	beq	18308 <__assert_fail@plt+0x72c4>
   18298:	ldr	lr, [ip, #28]
   1829c:	cmp	lr, #0
   182a0:	str	lr, [sp, #36]	; 0x24
   182a4:	beq	18310 <__assert_fail@plt+0x72cc>
   182a8:	ldr	lr, [ip, #32]
   182ac:	cmp	lr, #0
   182b0:	str	lr, [sp, #40]	; 0x28
   182b4:	beq	18318 <__assert_fail@plt+0x72d4>
   182b8:	ldr	ip, [ip, #36]	; 0x24
   182bc:	cmp	ip, #0
   182c0:	str	ip, [sp, #44]	; 0x2c
   182c4:	movne	lr, #10
   182c8:	moveq	lr, #9
   182cc:	add	ip, sp, #8
   182d0:	stm	sp, {ip, lr}
   182d4:	bl	17df0 <__assert_fail@plt+0x6dac>
   182d8:	add	sp, sp, #52	; 0x34
   182dc:	pop	{pc}		; (ldr pc, [sp], #4)
   182e0:	mov	lr, #1
   182e4:	b	182cc <__assert_fail@plt+0x7288>
   182e8:	mov	lr, #2
   182ec:	b	182cc <__assert_fail@plt+0x7288>
   182f0:	mov	lr, #3
   182f4:	b	182cc <__assert_fail@plt+0x7288>
   182f8:	mov	lr, #4
   182fc:	b	182cc <__assert_fail@plt+0x7288>
   18300:	mov	lr, #5
   18304:	b	182cc <__assert_fail@plt+0x7288>
   18308:	mov	lr, #6
   1830c:	b	182cc <__assert_fail@plt+0x7288>
   18310:	mov	lr, #7
   18314:	b	182cc <__assert_fail@plt+0x7288>
   18318:	mov	lr, #8
   1831c:	b	182cc <__assert_fail@plt+0x7288>
   18320:	push	{r3}		; (str r3, [sp, #-4]!)
   18324:	push	{lr}		; (str lr, [sp, #-4]!)
   18328:	sub	sp, sp, #56	; 0x38
   1832c:	ldr	ip, [sp, #64]	; 0x40
   18330:	add	r3, sp, #64	; 0x40
   18334:	str	r3, [sp, #12]
   18338:	cmp	ip, #0
   1833c:	str	ip, [sp, #16]
   18340:	beq	183d8 <__assert_fail@plt+0x7394>
   18344:	ldr	ip, [sp, #68]	; 0x44
   18348:	cmp	ip, #0
   1834c:	str	ip, [sp, #20]
   18350:	beq	183fc <__assert_fail@plt+0x73b8>
   18354:	ldr	ip, [sp, #72]	; 0x48
   18358:	cmp	ip, #0
   1835c:	str	ip, [sp, #24]
   18360:	beq	18404 <__assert_fail@plt+0x73c0>
   18364:	ldr	ip, [sp, #76]	; 0x4c
   18368:	cmp	ip, #0
   1836c:	str	ip, [sp, #28]
   18370:	beq	1840c <__assert_fail@plt+0x73c8>
   18374:	ldr	ip, [sp, #80]	; 0x50
   18378:	cmp	ip, #0
   1837c:	str	ip, [sp, #32]
   18380:	beq	18414 <__assert_fail@plt+0x73d0>
   18384:	ldr	ip, [sp, #84]	; 0x54
   18388:	cmp	ip, #0
   1838c:	str	ip, [sp, #36]	; 0x24
   18390:	beq	1841c <__assert_fail@plt+0x73d8>
   18394:	ldr	ip, [sp, #88]	; 0x58
   18398:	cmp	ip, #0
   1839c:	str	ip, [sp, #40]	; 0x28
   183a0:	beq	18424 <__assert_fail@plt+0x73e0>
   183a4:	ldr	ip, [sp, #92]	; 0x5c
   183a8:	cmp	ip, #0
   183ac:	str	ip, [sp, #44]	; 0x2c
   183b0:	beq	1842c <__assert_fail@plt+0x73e8>
   183b4:	ldr	ip, [sp, #96]	; 0x60
   183b8:	cmp	ip, #0
   183bc:	str	ip, [sp, #48]	; 0x30
   183c0:	beq	18434 <__assert_fail@plt+0x73f0>
   183c4:	ldr	r3, [sp, #100]	; 0x64
   183c8:	cmp	r3, #0
   183cc:	str	r3, [sp, #52]	; 0x34
   183d0:	movne	ip, #10
   183d4:	moveq	ip, #9
   183d8:	ldr	r3, [sp, #60]	; 0x3c
   183dc:	add	lr, sp, #16
   183e0:	str	lr, [sp]
   183e4:	str	ip, [sp, #4]
   183e8:	bl	17df0 <__assert_fail@plt+0x6dac>
   183ec:	add	sp, sp, #56	; 0x38
   183f0:	pop	{lr}		; (ldr lr, [sp], #4)
   183f4:	add	sp, sp, #4
   183f8:	bx	lr
   183fc:	mov	ip, #1
   18400:	b	183d8 <__assert_fail@plt+0x7394>
   18404:	mov	ip, #2
   18408:	b	183d8 <__assert_fail@plt+0x7394>
   1840c:	mov	ip, #3
   18410:	b	183d8 <__assert_fail@plt+0x7394>
   18414:	mov	ip, #4
   18418:	b	183d8 <__assert_fail@plt+0x7394>
   1841c:	mov	ip, #5
   18420:	b	183d8 <__assert_fail@plt+0x7394>
   18424:	mov	ip, #6
   18428:	b	183d8 <__assert_fail@plt+0x7394>
   1842c:	mov	ip, #7
   18430:	b	183d8 <__assert_fail@plt+0x7394>
   18434:	mov	ip, #8
   18438:	b	183d8 <__assert_fail@plt+0x7394>
   1843c:	movw	r3, #49532	; 0xc17c
   18440:	movt	r3, #2
   18444:	str	r4, [sp, #-8]!
   18448:	mov	r0, #10
   1844c:	ldr	r1, [r3]
   18450:	str	lr, [sp, #4]
   18454:	bl	10e34 <fputc_unlocked@plt>
   18458:	mov	r2, #5
   1845c:	movw	r1, #47008	; 0xb7a0
   18460:	movt	r1, #1
   18464:	mov	r0, #0
   18468:	bl	10e40 <dcgettext@plt>
   1846c:	mov	r1, r0
   18470:	movw	r2, #47028	; 0xb7b4
   18474:	movt	r2, #1
   18478:	mov	r0, #1
   1847c:	bl	10f6c <__printf_chk@plt>
   18480:	mov	r2, #5
   18484:	movw	r1, #47052	; 0xb7cc
   18488:	movt	r1, #1
   1848c:	mov	r0, #0
   18490:	bl	10e40 <dcgettext@plt>
   18494:	mov	r1, r0
   18498:	movw	r3, #45372	; 0xb13c
   1849c:	movt	r3, #1
   184a0:	movw	r2, #45412	; 0xb164
   184a4:	movt	r2, #1
   184a8:	mov	r0, #1
   184ac:	bl	10f6c <__printf_chk@plt>
   184b0:	mov	r2, #5
   184b4:	movw	r1, #47072	; 0xb7e0
   184b8:	movt	r1, #1
   184bc:	mov	r0, #0
   184c0:	bl	10e40 <dcgettext@plt>
   184c4:	mov	r1, r0
   184c8:	movw	r2, #47112	; 0xb808
   184cc:	movt	r2, #1
   184d0:	mov	r0, #1
   184d4:	ldr	r4, [sp]
   184d8:	ldr	lr, [sp, #4]
   184dc:	add	sp, sp, #8
   184e0:	b	10f6c <__printf_chk@plt>
   184e4:	strd	r4, [sp, #-16]!
   184e8:	mov	r4, r0
   184ec:	mov	r5, r2
   184f0:	str	r6, [sp, #8]
   184f4:	mov	r6, r1
   184f8:	str	lr, [sp, #12]
   184fc:	bl	1a5f0 <__assert_fail@plt+0x95ac>
   18500:	cmp	r0, #0
   18504:	beq	18518 <__assert_fail@plt+0x74d4>
   18508:	ldrd	r4, [sp]
   1850c:	ldr	r6, [sp, #8]
   18510:	add	sp, sp, #12
   18514:	pop	{pc}		; (ldr pc, [sp], #4)
   18518:	cmp	r4, #0
   1851c:	beq	1852c <__assert_fail@plt+0x74e8>
   18520:	cmp	r6, #0
   18524:	cmpne	r5, #0
   18528:	beq	18508 <__assert_fail@plt+0x74c4>
   1852c:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18530:	str	r4, [sp, #-8]!
   18534:	str	lr, [sp, #4]
   18538:	bl	1a034 <__assert_fail@plt+0x8ff0>
   1853c:	cmp	r0, #0
   18540:	beq	18550 <__assert_fail@plt+0x750c>
   18544:	ldr	r4, [sp]
   18548:	add	sp, sp, #4
   1854c:	pop	{pc}		; (ldr pc, [sp], #4)
   18550:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18554:	str	r4, [sp, #-8]!
   18558:	str	lr, [sp, #4]
   1855c:	bl	1a034 <__assert_fail@plt+0x8ff0>
   18560:	cmp	r0, #0
   18564:	beq	18574 <__assert_fail@plt+0x7530>
   18568:	ldr	r4, [sp]
   1856c:	add	sp, sp, #4
   18570:	pop	{pc}		; (ldr pc, [sp], #4)
   18574:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18578:	str	r4, [sp, #-8]!
   1857c:	str	lr, [sp, #4]
   18580:	bl	1a034 <__assert_fail@plt+0x8ff0>
   18584:	cmp	r0, #0
   18588:	beq	18598 <__assert_fail@plt+0x7554>
   1858c:	ldr	r4, [sp]
   18590:	add	sp, sp, #4
   18594:	pop	{pc}		; (ldr pc, [sp], #4)
   18598:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   1859c:	strd	r4, [sp, #-16]!
   185a0:	mov	r5, r0
   185a4:	mov	r4, r1
   185a8:	str	r6, [sp, #8]
   185ac:	str	lr, [sp, #12]
   185b0:	bl	1a070 <__assert_fail@plt+0x902c>
   185b4:	cmp	r0, #0
   185b8:	beq	185cc <__assert_fail@plt+0x7588>
   185bc:	ldrd	r4, [sp]
   185c0:	ldr	r6, [sp, #8]
   185c4:	add	sp, sp, #12
   185c8:	pop	{pc}		; (ldr pc, [sp], #4)
   185cc:	adds	r4, r4, #0
   185d0:	movne	r4, #1
   185d4:	cmp	r5, #0
   185d8:	moveq	r4, #1
   185dc:	cmp	r4, #0
   185e0:	beq	185bc <__assert_fail@plt+0x7578>
   185e4:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   185e8:	cmp	r1, #0
   185ec:	orreq	r1, r1, #1
   185f0:	str	r4, [sp, #-8]!
   185f4:	str	lr, [sp, #4]
   185f8:	bl	1a070 <__assert_fail@plt+0x902c>
   185fc:	cmp	r0, #0
   18600:	beq	18610 <__assert_fail@plt+0x75cc>
   18604:	ldr	r4, [sp]
   18608:	add	sp, sp, #4
   1860c:	pop	{pc}		; (ldr pc, [sp], #4)
   18610:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18614:	strd	r4, [sp, #-16]!
   18618:	mov	r4, r0
   1861c:	mov	r5, r2
   18620:	str	r6, [sp, #8]
   18624:	mov	r6, r1
   18628:	str	lr, [sp, #12]
   1862c:	bl	1a5f0 <__assert_fail@plt+0x95ac>
   18630:	cmp	r0, #0
   18634:	beq	18648 <__assert_fail@plt+0x7604>
   18638:	ldrd	r4, [sp]
   1863c:	ldr	r6, [sp, #8]
   18640:	add	sp, sp, #12
   18644:	pop	{pc}		; (ldr pc, [sp], #4)
   18648:	cmp	r4, #0
   1864c:	beq	1865c <__assert_fail@plt+0x7618>
   18650:	cmp	r6, #0
   18654:	cmpne	r5, #0
   18658:	beq	18638 <__assert_fail@plt+0x75f4>
   1865c:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18660:	cmp	r2, #0
   18664:	cmpne	r1, #0
   18668:	str	r4, [sp, #-8]!
   1866c:	moveq	r2, #1
   18670:	str	lr, [sp, #4]
   18674:	moveq	r1, r2
   18678:	bl	1a5f0 <__assert_fail@plt+0x95ac>
   1867c:	cmp	r0, #0
   18680:	beq	18690 <__assert_fail@plt+0x764c>
   18684:	ldr	r4, [sp]
   18688:	add	sp, sp, #4
   1868c:	pop	{pc}		; (ldr pc, [sp], #4)
   18690:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18694:	mov	r2, r1
   18698:	mov	r1, r0
   1869c:	str	r4, [sp, #-8]!
   186a0:	mov	r0, #0
   186a4:	str	lr, [sp, #4]
   186a8:	bl	1a5f0 <__assert_fail@plt+0x95ac>
   186ac:	cmp	r0, #0
   186b0:	beq	186c0 <__assert_fail@plt+0x767c>
   186b4:	ldr	r4, [sp]
   186b8:	add	sp, sp, #4
   186bc:	pop	{pc}		; (ldr pc, [sp], #4)
   186c0:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   186c4:	cmp	r1, #0
   186c8:	cmpne	r0, #0
   186cc:	str	r4, [sp, #-8]!
   186d0:	moveq	r2, #1
   186d4:	movne	r2, r1
   186d8:	str	lr, [sp, #4]
   186dc:	movne	r1, r0
   186e0:	moveq	r1, r2
   186e4:	mov	r0, #0
   186e8:	bl	1a5f0 <__assert_fail@plt+0x95ac>
   186ec:	cmp	r0, #0
   186f0:	beq	18700 <__assert_fail@plt+0x76bc>
   186f4:	ldr	r4, [sp]
   186f8:	add	sp, sp, #4
   186fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18700:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18704:	cmp	r0, #0
   18708:	strd	r4, [sp, #-16]!
   1870c:	mov	r5, r1
   18710:	ldr	r4, [r1]
   18714:	str	r6, [sp, #8]
   18718:	str	lr, [sp, #12]
   1871c:	beq	18764 <__assert_fail@plt+0x7720>
   18720:	lsr	r3, r4, #1
   18724:	add	r3, r3, #1
   18728:	adds	r4, r4, r3
   1872c:	bcs	18760 <__assert_fail@plt+0x771c>
   18730:	mov	r2, #1
   18734:	mov	r1, r4
   18738:	bl	1a5f0 <__assert_fail@plt+0x95ac>
   1873c:	cmp	r0, #0
   18740:	beq	18758 <__assert_fail@plt+0x7714>
   18744:	ldr	r6, [sp, #8]
   18748:	str	r4, [r5]
   1874c:	ldrd	r4, [sp]
   18750:	add	sp, sp, #12
   18754:	pop	{pc}		; (ldr pc, [sp], #4)
   18758:	cmp	r4, #0
   1875c:	beq	18744 <__assert_fail@plt+0x7700>
   18760:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18764:	cmp	r4, #0
   18768:	mov	r2, #1
   1876c:	moveq	r4, #64	; 0x40
   18770:	mov	r1, r4
   18774:	bl	1a5f0 <__assert_fail@plt+0x95ac>
   18778:	cmp	r0, #0
   1877c:	bne	18744 <__assert_fail@plt+0x7700>
   18780:	b	18760 <__assert_fail@plt+0x771c>
   18784:	cmp	r0, #0
   18788:	strd	r4, [sp, #-16]!
   1878c:	mov	r5, r1
   18790:	ldr	r4, [r1]
   18794:	str	r6, [sp, #8]
   18798:	mov	r6, r2
   1879c:	str	lr, [sp, #12]
   187a0:	beq	187e8 <__assert_fail@plt+0x77a4>
   187a4:	lsr	r3, r4, #1
   187a8:	add	r3, r3, #1
   187ac:	adds	r4, r4, r3
   187b0:	bcs	187e4 <__assert_fail@plt+0x77a0>
   187b4:	mov	r1, r4
   187b8:	bl	1a5f0 <__assert_fail@plt+0x95ac>
   187bc:	cmp	r0, #0
   187c0:	beq	187d8 <__assert_fail@plt+0x7794>
   187c4:	ldr	r6, [sp, #8]
   187c8:	str	r4, [r5]
   187cc:	ldrd	r4, [sp]
   187d0:	add	sp, sp, #12
   187d4:	pop	{pc}		; (ldr pc, [sp], #4)
   187d8:	cmp	r4, #0
   187dc:	cmpne	r6, #0
   187e0:	beq	187c4 <__assert_fail@plt+0x7780>
   187e4:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   187e8:	cmp	r4, #0
   187ec:	bne	18800 <__assert_fail@plt+0x77bc>
   187f0:	mov	r4, #64	; 0x40
   187f4:	udiv	r4, r4, r2
   187f8:	cmp	r2, #64	; 0x40
   187fc:	addhi	r4, r4, #1
   18800:	mov	r2, r6
   18804:	mov	r1, r4
   18808:	mov	r0, #0
   1880c:	bl	1a5f0 <__assert_fail@plt+0x95ac>
   18810:	cmp	r0, #0
   18814:	bne	187c4 <__assert_fail@plt+0x7780>
   18818:	b	187e4 <__assert_fail@plt+0x77a0>
   1881c:	ldr	ip, [r1]
   18820:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18824:	strd	r6, [sp, #8]
   18828:	mov	r7, r1
   1882c:	mov	r6, r0
   18830:	str	r8, [sp, #16]
   18834:	mvn	r8, r3
   18838:	lsr	r8, r8, #31
   1883c:	str	lr, [sp, #20]
   18840:	asr	r1, ip, #1
   18844:	ldr	lr, [sp, #24]
   18848:	adds	r4, ip, r1
   1884c:	mvnvs	r4, #-2147483648	; 0x80000000
   18850:	cmp	r3, r4
   18854:	movge	r1, #0
   18858:	andlt	r1, r8, #1
   1885c:	cmp	r1, #0
   18860:	movne	r4, r3
   18864:	smull	r0, r1, r4, lr
   18868:	cmp	r1, r0, asr #31
   1886c:	bne	1891c <__assert_fail@plt+0x78d8>
   18870:	cmp	r0, #63	; 0x3f
   18874:	mov	r5, r0
   18878:	ble	188e8 <__assert_fail@plt+0x78a4>
   1887c:	cmp	r6, #0
   18880:	sub	r1, r4, ip
   18884:	streq	r6, [r7]
   18888:	cmp	r1, r2
   1888c:	bge	188bc <__assert_fail@plt+0x7878>
   18890:	adds	r4, ip, r2
   18894:	bvs	18918 <__assert_fail@plt+0x78d4>
   18898:	cmp	r4, r3
   1889c:	movle	r3, #0
   188a0:	andgt	r3, r8, #1
   188a4:	cmp	r3, #0
   188a8:	bne	18918 <__assert_fail@plt+0x78d4>
   188ac:	smull	r0, r1, r4, lr
   188b0:	cmp	r1, r0, asr #31
   188b4:	mov	r5, r0
   188b8:	bne	18918 <__assert_fail@plt+0x78d4>
   188bc:	mov	r1, r5
   188c0:	mov	r0, r6
   188c4:	bl	1a070 <__assert_fail@plt+0x902c>
   188c8:	cmp	r0, #0
   188cc:	beq	188fc <__assert_fail@plt+0x78b8>
   188d0:	ldr	r8, [sp, #16]
   188d4:	str	r4, [r7]
   188d8:	ldrd	r4, [sp]
   188dc:	ldrd	r6, [sp, #8]
   188e0:	add	sp, sp, #20
   188e4:	pop	{pc}		; (ldr pc, [sp], #4)
   188e8:	mov	r0, #64	; 0x40
   188ec:	sdiv	r4, r0, lr
   188f0:	mls	r5, lr, r4, r0
   188f4:	sub	r5, r0, r5
   188f8:	b	1887c <__assert_fail@plt+0x7838>
   188fc:	adds	r5, r5, #0
   18900:	movne	r5, #1
   18904:	cmp	r6, #0
   18908:	movne	r6, r5
   1890c:	moveq	r6, #1
   18910:	cmp	r6, #0
   18914:	beq	188d0 <__assert_fail@plt+0x788c>
   18918:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   1891c:	mvn	r0, #-2147483648	; 0x80000000
   18920:	b	188ec <__assert_fail@plt+0x78a8>
   18924:	mov	r1, #1
   18928:	str	r4, [sp, #-8]!
   1892c:	str	lr, [sp, #4]
   18930:	bl	19fc0 <__assert_fail@plt+0x8f7c>
   18934:	cmp	r0, #0
   18938:	beq	18948 <__assert_fail@plt+0x7904>
   1893c:	ldr	r4, [sp]
   18940:	add	sp, sp, #4
   18944:	pop	{pc}		; (ldr pc, [sp], #4)
   18948:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   1894c:	mov	r1, #1
   18950:	str	r4, [sp, #-8]!
   18954:	str	lr, [sp, #4]
   18958:	bl	19fc0 <__assert_fail@plt+0x8f7c>
   1895c:	cmp	r0, #0
   18960:	beq	18970 <__assert_fail@plt+0x792c>
   18964:	ldr	r4, [sp]
   18968:	add	sp, sp, #4
   1896c:	pop	{pc}		; (ldr pc, [sp], #4)
   18970:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18974:	str	r4, [sp, #-8]!
   18978:	str	lr, [sp, #4]
   1897c:	bl	19fc0 <__assert_fail@plt+0x8f7c>
   18980:	cmp	r0, #0
   18984:	beq	18994 <__assert_fail@plt+0x7950>
   18988:	ldr	r4, [sp]
   1898c:	add	sp, sp, #4
   18990:	pop	{pc}		; (ldr pc, [sp], #4)
   18994:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18998:	str	r4, [sp, #-8]!
   1899c:	str	lr, [sp, #4]
   189a0:	bl	19fc0 <__assert_fail@plt+0x8f7c>
   189a4:	cmp	r0, #0
   189a8:	beq	189b8 <__assert_fail@plt+0x7974>
   189ac:	ldr	r4, [sp]
   189b0:	add	sp, sp, #4
   189b4:	pop	{pc}		; (ldr pc, [sp], #4)
   189b8:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   189bc:	strd	r4, [sp, #-16]!
   189c0:	mov	r4, r1
   189c4:	str	r6, [sp, #8]
   189c8:	mov	r6, r0
   189cc:	mov	r0, r1
   189d0:	str	lr, [sp, #12]
   189d4:	bl	1a034 <__assert_fail@plt+0x8ff0>
   189d8:	subs	r5, r0, #0
   189dc:	beq	18a00 <__assert_fail@plt+0x79bc>
   189e0:	mov	r2, r4
   189e4:	mov	r1, r6
   189e8:	bl	10df8 <memcpy@plt>
   189ec:	mov	r0, r5
   189f0:	ldrd	r4, [sp]
   189f4:	ldr	r6, [sp, #8]
   189f8:	add	sp, sp, #12
   189fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18a00:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18a04:	strd	r4, [sp, #-16]!
   18a08:	mov	r4, r1
   18a0c:	str	r6, [sp, #8]
   18a10:	mov	r6, r0
   18a14:	mov	r0, r1
   18a18:	str	lr, [sp, #12]
   18a1c:	bl	1a034 <__assert_fail@plt+0x8ff0>
   18a20:	subs	r5, r0, #0
   18a24:	beq	18a48 <__assert_fail@plt+0x7a04>
   18a28:	mov	r2, r4
   18a2c:	mov	r1, r6
   18a30:	bl	10df8 <memcpy@plt>
   18a34:	mov	r0, r5
   18a38:	ldrd	r4, [sp]
   18a3c:	ldr	r6, [sp, #8]
   18a40:	add	sp, sp, #12
   18a44:	pop	{pc}		; (ldr pc, [sp], #4)
   18a48:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18a4c:	strd	r4, [sp, #-16]!
   18a50:	mov	r4, r1
   18a54:	str	r6, [sp, #8]
   18a58:	mov	r6, r0
   18a5c:	add	r0, r1, #1
   18a60:	str	lr, [sp, #12]
   18a64:	bl	1a034 <__assert_fail@plt+0x8ff0>
   18a68:	subs	r5, r0, #0
   18a6c:	beq	18a98 <__assert_fail@plt+0x7a54>
   18a70:	mov	r3, #0
   18a74:	mov	r1, r6
   18a78:	mov	r2, r4
   18a7c:	strb	r3, [r5, r4]
   18a80:	bl	10df8 <memcpy@plt>
   18a84:	mov	r0, r5
   18a88:	ldrd	r4, [sp]
   18a8c:	ldr	r6, [sp, #8]
   18a90:	add	sp, sp, #12
   18a94:	pop	{pc}		; (ldr pc, [sp], #4)
   18a98:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18a9c:	strd	r4, [sp, #-16]!
   18aa0:	str	r6, [sp, #8]
   18aa4:	mov	r6, r0
   18aa8:	str	lr, [sp, #12]
   18aac:	bl	10f30 <strlen@plt>
   18ab0:	add	r4, r0, #1
   18ab4:	mov	r0, r4
   18ab8:	bl	1a034 <__assert_fail@plt+0x8ff0>
   18abc:	subs	r5, r0, #0
   18ac0:	beq	18ae4 <__assert_fail@plt+0x7aa0>
   18ac4:	mov	r2, r4
   18ac8:	mov	r1, r6
   18acc:	bl	10df8 <memcpy@plt>
   18ad0:	mov	r0, r5
   18ad4:	ldrd	r4, [sp]
   18ad8:	ldr	r6, [sp, #8]
   18adc:	add	sp, sp, #12
   18ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ae4:	bl	18ae8 <__assert_fail@plt+0x7aa4>
   18ae8:	movw	r3, #49432	; 0xc118
   18aec:	movt	r3, #2
   18af0:	str	r4, [sp, #-8]!
   18af4:	ldr	r4, [r3]
   18af8:	mov	r2, #5
   18afc:	movw	r1, #47192	; 0xb858
   18b00:	movt	r1, #1
   18b04:	mov	r0, #0
   18b08:	str	lr, [sp, #4]
   18b0c:	bl	10e40 <dcgettext@plt>
   18b10:	mov	r3, r0
   18b14:	movw	r2, #46100	; 0xb414
   18b18:	movt	r2, #1
   18b1c:	mov	r1, #0
   18b20:	mov	r0, r4
   18b24:	bl	10eac <error@plt>
   18b28:	bl	1102c <abort@plt>
   18b2c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18b30:	mov	r4, r0
   18b34:	mov	r0, #0
   18b38:	strd	r6, [sp, #8]
   18b3c:	mov	r6, r1
   18b40:	movw	r1, #47212	; 0xb86c
   18b44:	movt	r1, #1
   18b48:	strd	r8, [sp, #16]
   18b4c:	mov	r9, r2
   18b50:	mov	r2, #5
   18b54:	mov	r7, r3
   18b58:	str	sl, [sp, #24]
   18b5c:	str	lr, [sp, #28]
   18b60:	ldr	r8, [sp, #32]
   18b64:	bl	10e40 <dcgettext@plt>
   18b68:	mov	r2, r0
   18b6c:	mov	r1, r4
   18b70:	mov	r0, #0
   18b74:	bl	10eac <error@plt>
   18b78:	mov	r2, #5
   18b7c:	movw	r1, #47240	; 0xb888
   18b80:	movt	r1, #1
   18b84:	mov	r0, #0
   18b88:	bl	10e40 <dcgettext@plt>
   18b8c:	mov	r1, #0
   18b90:	mov	r2, r0
   18b94:	mov	r0, r1
   18b98:	bl	10eac <error@plt>
   18b9c:	mov	r2, #5
   18ba0:	movw	r3, #49432	; 0xc118
   18ba4:	movt	r3, #2
   18ba8:	movw	r1, #47284	; 0xb8b4
   18bac:	movt	r1, #1
   18bb0:	mov	r0, #0
   18bb4:	ldr	r4, [r3]
   18bb8:	bl	10e40 <dcgettext@plt>
   18bbc:	mov	r5, r0
   18bc0:	mov	r3, r9
   18bc4:	mov	r2, r6
   18bc8:	mov	r1, #8
   18bcc:	mov	r0, #0
   18bd0:	bl	167f0 <__assert_fail@plt+0x57ac>
   18bd4:	mov	r6, r0
   18bd8:	mov	r3, r8
   18bdc:	mov	r2, r7
   18be0:	mov	r1, #8
   18be4:	mov	r0, #1
   18be8:	bl	167f0 <__assert_fail@plt+0x57ac>
   18bec:	mov	r3, r6
   18bf0:	mov	r2, r5
   18bf4:	str	r0, [sp, #32]
   18bf8:	mov	r1, #0
   18bfc:	mov	r0, r4
   18c00:	ldrd	r4, [sp]
   18c04:	ldrd	r6, [sp, #8]
   18c08:	ldrd	r8, [sp, #16]
   18c0c:	ldr	sl, [sp, #24]
   18c10:	ldr	lr, [sp, #28]
   18c14:	add	sp, sp, #32
   18c18:	b	10eac <error@plt>
   18c1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18c20:	mov	r5, r0
   18c24:	strd	r6, [sp, #8]
   18c28:	mov	r7, r1
   18c2c:	mov	r6, r3
   18c30:	str	r8, [sp, #16]
   18c34:	mov	r8, r2
   18c38:	str	lr, [sp, #20]
   18c3c:	sub	sp, sp, #8
   18c40:	bl	1a3f4 <__assert_fail@plt+0x93b0>
   18c44:	mov	r4, r0
   18c48:	bl	10f48 <__errno_location@plt>
   18c4c:	ldr	r0, [r0]
   18c50:	cmp	r0, #0
   18c54:	bne	18c74 <__assert_fail@plt+0x7c30>
   18c58:	mov	r0, r4
   18c5c:	add	sp, sp, #8
   18c60:	ldrd	r4, [sp]
   18c64:	ldrd	r6, [sp, #8]
   18c68:	ldr	r8, [sp, #16]
   18c6c:	add	sp, sp, #20
   18c70:	pop	{pc}		; (ldr pc, [sp], #4)
   18c74:	mov	r3, r8
   18c78:	mov	r2, r7
   18c7c:	str	r6, [sp]
   18c80:	mov	r1, r5
   18c84:	bl	18b2c <__assert_fail@plt+0x7ae8>
   18c88:	b	18c58 <__assert_fail@plt+0x7c14>
   18c8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18c90:	mov	r5, r3
   18c94:	strd	r6, [sp, #8]
   18c98:	mov	r7, r1
   18c9c:	mov	r6, r0
   18ca0:	str	r8, [sp, #16]
   18ca4:	mov	r8, r2
   18ca8:	str	lr, [sp, #20]
   18cac:	sub	sp, sp, #8
   18cb0:	bl	1a518 <__assert_fail@plt+0x94d4>
   18cb4:	mov	r4, r0
   18cb8:	bl	10f48 <__errno_location@plt>
   18cbc:	ldr	r0, [r0]
   18cc0:	cmp	r0, #0
   18cc4:	bne	18ce4 <__assert_fail@plt+0x7ca0>
   18cc8:	mov	r0, r4
   18ccc:	add	sp, sp, #8
   18cd0:	ldrd	r4, [sp]
   18cd4:	ldrd	r6, [sp, #8]
   18cd8:	ldr	r8, [sp, #16]
   18cdc:	add	sp, sp, #20
   18ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ce4:	sub	r5, r5, #1
   18ce8:	mov	r3, r8
   18cec:	sub	r2, r7, #1
   18cf0:	mov	r1, r6
   18cf4:	str	r5, [sp]
   18cf8:	bl	18b2c <__assert_fail@plt+0x7ae8>
   18cfc:	b	18cc8 <__assert_fail@plt+0x7c84>
   18d00:	cmp	r2, #36	; 0x24
   18d04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18d08:	strd	r6, [sp, #8]
   18d0c:	strd	r8, [sp, #16]
   18d10:	str	sl, [sp, #24]
   18d14:	str	lr, [sp, #28]
   18d18:	sub	sp, sp, #8
   18d1c:	bhi	19244 <__assert_fail@plt+0x8200>
   18d20:	cmp	r1, #0
   18d24:	mov	r7, r2
   18d28:	mov	r5, r1
   18d2c:	mov	r9, r0
   18d30:	addeq	r5, sp, #4
   18d34:	mov	r6, r3
   18d38:	bl	10f48 <__errno_location@plt>
   18d3c:	mov	r3, #0
   18d40:	mov	sl, r0
   18d44:	str	r3, [r0]
   18d48:	ldrb	r4, [r9]
   18d4c:	bl	10f0c <__ctype_b_loc@plt>
   18d50:	ldr	r2, [r0]
   18d54:	lsl	r3, r4, #1
   18d58:	ldrh	r3, [r2, r3]
   18d5c:	tst	r3, #8192	; 0x2000
   18d60:	beq	18d7c <__assert_fail@plt+0x7d38>
   18d64:	mov	r3, r9
   18d68:	ldrb	r4, [r3, #1]!
   18d6c:	lsl	r1, r4, #1
   18d70:	ldrh	r1, [r2, r1]
   18d74:	tst	r1, #8192	; 0x2000
   18d78:	bne	18d68 <__assert_fail@plt+0x7d24>
   18d7c:	cmp	r4, #45	; 0x2d
   18d80:	beq	18e14 <__assert_fail@plt+0x7dd0>
   18d84:	mov	r2, r7
   18d88:	mov	r1, r5
   18d8c:	mov	r0, r9
   18d90:	bl	10f24 <strtoul@plt>
   18d94:	ldr	r7, [r5]
   18d98:	mov	r8, r0
   18d9c:	cmp	r7, r9
   18da0:	beq	18dfc <__assert_fail@plt+0x7db8>
   18da4:	ldr	r4, [sl]
   18da8:	cmp	r4, #0
   18dac:	bne	18dec <__assert_fail@plt+0x7da8>
   18db0:	ldr	r3, [sp, #40]	; 0x28
   18db4:	cmp	r3, #0
   18db8:	beq	18dc8 <__assert_fail@plt+0x7d84>
   18dbc:	ldrb	r9, [r7]
   18dc0:	cmp	r9, #0
   18dc4:	bne	190fc <__assert_fail@plt+0x80b8>
   18dc8:	str	r8, [r6]
   18dcc:	mov	r0, r4
   18dd0:	add	sp, sp, #8
   18dd4:	ldrd	r4, [sp]
   18dd8:	ldrd	r6, [sp, #8]
   18ddc:	ldrd	r8, [sp, #16]
   18de0:	ldr	sl, [sp, #24]
   18de4:	add	sp, sp, #28
   18de8:	pop	{pc}		; (ldr pc, [sp], #4)
   18dec:	cmp	r4, #34	; 0x22
   18df0:	bne	18e14 <__assert_fail@plt+0x7dd0>
   18df4:	mov	r4, #1
   18df8:	b	18db0 <__assert_fail@plt+0x7d6c>
   18dfc:	ldr	r3, [sp, #40]	; 0x28
   18e00:	cmp	r3, #0
   18e04:	beq	18e14 <__assert_fail@plt+0x7dd0>
   18e08:	ldrb	r9, [r9]
   18e0c:	cmp	r9, #0
   18e10:	bne	18e1c <__assert_fail@plt+0x7dd8>
   18e14:	mov	r4, #4
   18e18:	b	18dcc <__assert_fail@plt+0x7d88>
   18e1c:	mov	r1, r9
   18e20:	mov	r0, r3
   18e24:	bl	10f3c <strchr@plt>
   18e28:	cmp	r0, #0
   18e2c:	movne	r4, #0
   18e30:	movne	r8, #1
   18e34:	beq	18e14 <__assert_fail@plt+0x7dd0>
   18e38:	sub	r3, r9, #69	; 0x45
   18e3c:	cmp	r3, #47	; 0x2f
   18e40:	ldrls	pc, [pc, r3, lsl #2]
   18e44:	b	18f48 <__assert_fail@plt+0x7f04>
   18e48:	andeq	r8, r1, r8, lsl #30
   18e4c:	andeq	r8, r1, r8, asr #30
   18e50:	andeq	r8, r1, r8, lsl #30
   18e54:	andeq	r8, r1, r8, asr #30
   18e58:	andeq	r8, r1, r8, asr #30
   18e5c:	andeq	r8, r1, r8, asr #30
   18e60:	andeq	r8, r1, r8, lsl #30
   18e64:	andeq	r8, r1, r8, asr #30
   18e68:	andeq	r8, r1, r8, lsl #30
   18e6c:	andeq	r8, r1, r8, asr #30
   18e70:	andeq	r8, r1, r8, asr #30
   18e74:	andeq	r8, r1, r8, lsl #30
   18e78:	andeq	r8, r1, r8, asr #30
   18e7c:	andeq	r8, r1, r8, asr #30
   18e80:	andeq	r8, r1, r8, asr #30
   18e84:	andeq	r8, r1, r8, lsl #30
   18e88:	andeq	r8, r1, r8, asr #30
   18e8c:	andeq	r8, r1, r8, asr #30
   18e90:	andeq	r8, r1, r8, asr #30
   18e94:	andeq	r8, r1, r8, asr #30
   18e98:	andeq	r8, r1, r8, lsl #30
   18e9c:	andeq	r8, r1, r8, lsl #30
   18ea0:	andeq	r8, r1, r8, asr #30
   18ea4:	andeq	r8, r1, r8, asr #30
   18ea8:	andeq	r8, r1, r8, asr #30
   18eac:	andeq	r8, r1, r8, asr #30
   18eb0:	andeq	r8, r1, r8, asr #30
   18eb4:	andeq	r8, r1, r8, asr #30
   18eb8:	andeq	r8, r1, r8, asr #30
   18ebc:	andeq	r8, r1, r8, asr #30
   18ec0:	andeq	r8, r1, r8, asr #30
   18ec4:	andeq	r8, r1, r8, asr #30
   18ec8:	andeq	r8, r1, r8, asr #30
   18ecc:	andeq	r8, r1, r8, asr #30
   18ed0:	andeq	r8, r1, r8, lsl #30
   18ed4:	andeq	r8, r1, r8, asr #30
   18ed8:	andeq	r8, r1, r8, asr #30
   18edc:	andeq	r8, r1, r8, asr #30
   18ee0:	andeq	r8, r1, r8, lsl #30
   18ee4:	andeq	r8, r1, r8, asr #30
   18ee8:	andeq	r8, r1, r8, lsl #30
   18eec:	andeq	r8, r1, r8, asr #30
   18ef0:	andeq	r8, r1, r8, asr #30
   18ef4:	andeq	r8, r1, r8, asr #30
   18ef8:	andeq	r8, r1, r8, asr #30
   18efc:	andeq	r8, r1, r8, asr #30
   18f00:	andeq	r8, r1, r8, asr #30
   18f04:	andeq	r8, r1, r8, lsl #30
   18f08:	mov	r1, #48	; 0x30
   18f0c:	ldr	r0, [sp, #40]	; 0x28
   18f10:	bl	10f3c <strchr@plt>
   18f14:	cmp	r0, #0
   18f18:	beq	18f48 <__assert_fail@plt+0x7f04>
   18f1c:	ldrb	r3, [r7, #1]
   18f20:	cmp	r3, #68	; 0x44
   18f24:	beq	19238 <__assert_fail@plt+0x81f4>
   18f28:	cmp	r3, #105	; 0x69
   18f2c:	beq	19114 <__assert_fail@plt+0x80d0>
   18f30:	cmp	r3, #66	; 0x42
   18f34:	moveq	r0, #2
   18f38:	movne	r0, #1
   18f3c:	moveq	r1, #1000	; 0x3e8
   18f40:	movne	r1, #1024	; 0x400
   18f44:	b	18f50 <__assert_fail@plt+0x7f0c>
   18f48:	mov	r0, #1
   18f4c:	mov	r1, #1024	; 0x400
   18f50:	sub	r9, r9, #66	; 0x42
   18f54:	cmp	r9, #53	; 0x35
   18f58:	ldrls	pc, [pc, r9, lsl #2]
   18f5c:	b	190e0 <__assert_fail@plt+0x809c>
   18f60:	andeq	r9, r1, r0, lsr #4
   18f64:	andeq	r9, r1, r0, ror #1
   18f68:	andeq	r9, r1, r0, ror #1
   18f6c:	andeq	r9, r1, r8, lsl #4
   18f70:	andeq	r9, r1, r0, ror #1
   18f74:	andeq	r9, r1, r4, ror #3
   18f78:	andeq	r9, r1, r0, ror #1
   18f7c:	andeq	r9, r1, r0, ror #1
   18f80:	andeq	r9, r1, r0, ror #1
   18f84:	andeq	r9, r1, r8, ror #1
   18f88:	andeq	r9, r1, r0, ror #1
   18f8c:			; <UNDEFINED> instruction: 0x000191bc
   18f90:	andeq	r9, r1, r0, ror #1
   18f94:	andeq	r9, r1, r0, ror #1
   18f98:	andeq	r9, r1, r4, lsr #3
   18f9c:	andeq	r9, r1, r0, ror #1
   18fa0:	andeq	r9, r1, r0, ror #1
   18fa4:	andeq	r9, r1, r0, ror #1
   18fa8:	andeq	r9, r1, ip, lsl #3
   18fac:	andeq	r9, r1, r0, ror #1
   18fb0:	andeq	r9, r1, r0, ror #1
   18fb4:	andeq	r9, r1, r0, ror #1
   18fb8:	andeq	r9, r1, r0, ror #1
   18fbc:	andeq	r9, r1, ip, asr r1
   18fc0:	andeq	r9, r1, r8, lsr r0
   18fc4:	andeq	r9, r1, r0, ror #1
   18fc8:	andeq	r9, r1, r0, ror #1
   18fcc:	andeq	r9, r1, r0, ror #1
   18fd0:	andeq	r9, r1, r0, ror #1
   18fd4:	andeq	r9, r1, r0, ror #1
   18fd8:	andeq	r9, r1, r0, ror #1
   18fdc:	andeq	r9, r1, r0, ror #1
   18fe0:	andeq	r9, r1, r4, asr #2
   18fe4:	andeq	r9, r1, ip, asr #1
   18fe8:	andeq	r9, r1, r0, ror #1
   18fec:	andeq	r9, r1, r0, ror #1
   18ff0:	andeq	r9, r1, r0, ror #1
   18ff4:	andeq	r9, r1, r4, ror #3
   18ff8:	andeq	r9, r1, r0, ror #1
   18ffc:	andeq	r9, r1, r0, ror #1
   19000:	andeq	r9, r1, r0, ror #1
   19004:	andeq	r9, r1, r8, ror #1
   19008:	andeq	r9, r1, r0, ror #1
   1900c:			; <UNDEFINED> instruction: 0x000191bc
   19010:	andeq	r9, r1, r0, ror #1
   19014:	andeq	r9, r1, r0, ror #1
   19018:	andeq	r9, r1, r0, ror #1
   1901c:	andeq	r9, r1, r0, ror #1
   19020:	andeq	r9, r1, r0, ror #1
   19024:	andeq	r9, r1, r0, ror #1
   19028:	andeq	r9, r1, ip, lsl #3
   1902c:	andeq	r9, r1, r0, ror #1
   19030:	andeq	r9, r1, r0, ror #1
   19034:	andeq	r9, r1, ip, lsr #2
   19038:	umull	r2, r3, r8, r1
   1903c:	adds	ip, r3, #0
   19040:	movne	ip, #1
   19044:	cmp	ip, #0
   19048:	bne	19184 <__assert_fail@plt+0x8140>
   1904c:	umull	r2, r3, r2, r1
   19050:	adds	ip, r3, #0
   19054:	movne	ip, #1
   19058:	cmp	ip, #0
   1905c:	bne	19184 <__assert_fail@plt+0x8140>
   19060:	umull	r2, r3, r2, r1
   19064:	adds	ip, r3, #0
   19068:	movne	ip, #1
   1906c:	cmp	ip, #0
   19070:	bne	19184 <__assert_fail@plt+0x8140>
   19074:	umull	r2, r3, r2, r1
   19078:	adds	ip, r3, #0
   1907c:	movne	ip, #1
   19080:	cmp	ip, #0
   19084:	bne	19184 <__assert_fail@plt+0x8140>
   19088:	umull	r2, r3, r2, r1
   1908c:	adds	ip, r3, #0
   19090:	movne	ip, #1
   19094:	cmp	ip, #0
   19098:	bne	19184 <__assert_fail@plt+0x8140>
   1909c:	umull	r2, r3, r2, r1
   190a0:	adds	ip, r3, #0
   190a4:	movne	ip, #1
   190a8:	cmp	ip, #0
   190ac:	bne	19184 <__assert_fail@plt+0x8140>
   190b0:	umull	r2, r3, r2, r1
   190b4:	adds	ip, r3, #0
   190b8:	movne	ip, #1
   190bc:	cmp	ip, #0
   190c0:	moveq	r8, r2
   190c4:	mvnne	r8, #0
   190c8:	orr	r4, r4, ip
   190cc:	add	r3, r7, r0
   190d0:	str	r3, [r5]
   190d4:	ldrb	r3, [r7, r0]
   190d8:	cmp	r3, #0
   190dc:	beq	18dc8 <__assert_fail@plt+0x7d84>
   190e0:	orr	r4, r4, #2
   190e4:	b	18dc8 <__assert_fail@plt+0x7d84>
   190e8:	umull	r8, r9, r8, r1
   190ec:	cmp	r9, #0
   190f0:	movne	r4, #1
   190f4:	mvnne	r8, #0
   190f8:	b	190cc <__assert_fail@plt+0x8088>
   190fc:	mov	r0, r3
   19100:	mov	r1, r9
   19104:	bl	10f3c <strchr@plt>
   19108:	cmp	r0, #0
   1910c:	bne	18e38 <__assert_fail@plt+0x7df4>
   19110:	b	190e0 <__assert_fail@plt+0x809c>
   19114:	ldrb	r3, [r7, #2]
   19118:	mov	r1, #1024	; 0x400
   1911c:	cmp	r3, #66	; 0x42
   19120:	movne	r0, #1
   19124:	moveq	r0, #3
   19128:	b	18f50 <__assert_fail@plt+0x7f0c>
   1912c:	lsr	r3, r8, #31
   19130:	cmp	r3, #0
   19134:	movne	r4, #1
   19138:	mvnne	r8, #0
   1913c:	lsleq	r8, r8, #1
   19140:	b	190cc <__assert_fail@plt+0x8088>
   19144:	lsr	r3, r8, #23
   19148:	cmp	r3, #0
   1914c:	movne	r4, #1
   19150:	mvnne	r8, #0
   19154:	lsleq	r8, r8, #9
   19158:	b	190cc <__assert_fail@plt+0x8088>
   1915c:	umull	r2, r3, r8, r1
   19160:	adds	ip, r3, #0
   19164:	movne	ip, #1
   19168:	cmp	ip, #0
   1916c:	bne	19184 <__assert_fail@plt+0x8140>
   19170:	umull	r2, r3, r2, r1
   19174:	adds	ip, r3, #0
   19178:	movne	ip, #1
   1917c:	cmp	ip, #0
   19180:	beq	1904c <__assert_fail@plt+0x8008>
   19184:	mvn	r8, #0
   19188:	b	190c8 <__assert_fail@plt+0x8084>
   1918c:	umull	r2, r3, r8, r1
   19190:	adds	ip, r3, #0
   19194:	movne	ip, #1
   19198:	cmp	ip, #0
   1919c:	beq	19088 <__assert_fail@plt+0x8044>
   191a0:	b	19184 <__assert_fail@plt+0x8140>
   191a4:	umull	r2, r3, r8, r1
   191a8:	adds	ip, r3, #0
   191ac:	movne	ip, #1
   191b0:	cmp	ip, #0
   191b4:	beq	19074 <__assert_fail@plt+0x8030>
   191b8:	b	19184 <__assert_fail@plt+0x8140>
   191bc:	umull	r2, r3, r8, r1
   191c0:	cmp	r3, #0
   191c4:	bne	191fc <__assert_fail@plt+0x81b8>
   191c8:	umull	r8, r9, r2, r1
   191cc:	adds	r3, r9, #0
   191d0:	movne	r3, #1
   191d4:	cmp	r3, #0
   191d8:	movne	r4, r3
   191dc:	mvnne	r8, #0
   191e0:	b	190cc <__assert_fail@plt+0x8088>
   191e4:	umull	r2, r3, r8, r1
   191e8:	cmp	r3, #0
   191ec:	bne	191fc <__assert_fail@plt+0x81b8>
   191f0:	umull	r2, r3, r2, r1
   191f4:	cmp	r3, #0
   191f8:	beq	191c8 <__assert_fail@plt+0x8184>
   191fc:	mov	r4, #1
   19200:	mvn	r8, #0
   19204:	b	190cc <__assert_fail@plt+0x8088>
   19208:	umull	r2, r3, r8, r1
   1920c:	adds	ip, r3, #0
   19210:	movne	ip, #1
   19214:	cmp	ip, #0
   19218:	beq	19060 <__assert_fail@plt+0x801c>
   1921c:	b	19184 <__assert_fail@plt+0x8140>
   19220:	lsr	r3, r8, #22
   19224:	cmp	r3, #0
   19228:	movne	r4, #1
   1922c:	mvnne	r8, #0
   19230:	lsleq	r8, r8, #10
   19234:	b	190cc <__assert_fail@plt+0x8088>
   19238:	mov	r0, #2
   1923c:	mov	r1, #1000	; 0x3e8
   19240:	b	18f50 <__assert_fail@plt+0x7f0c>
   19244:	movw	r3, #47324	; 0xb8dc
   19248:	movt	r3, #1
   1924c:	movw	r1, #47336	; 0xb8e8
   19250:	movt	r1, #1
   19254:	movw	r0, #47352	; 0xb8f8
   19258:	movt	r0, #1
   1925c:	mov	r2, #85	; 0x55
   19260:	bl	11044 <__assert_fail@plt>
   19264:	cmp	r2, #36	; 0x24
   19268:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1926c:	strd	r6, [sp, #8]
   19270:	strd	r8, [sp, #16]
   19274:	strd	sl, [sp, #24]
   19278:	str	lr, [sp, #32]
   1927c:	sub	sp, sp, #36	; 0x24
   19280:	bhi	19ef8 <__assert_fail@plt+0x8eb4>
   19284:	cmp	r1, #0
   19288:	mov	r6, r2
   1928c:	mov	r5, r1
   19290:	mov	sl, r0
   19294:	addeq	r5, sp, #28
   19298:	mov	r9, r3
   1929c:	bl	10f48 <__errno_location@plt>
   192a0:	mov	r3, #0
   192a4:	mov	fp, r0
   192a8:	str	r3, [r0]
   192ac:	ldrb	r4, [sl]
   192b0:	bl	10f0c <__ctype_b_loc@plt>
   192b4:	ldr	r2, [r0]
   192b8:	lsl	r3, r4, #1
   192bc:	ldrh	r3, [r2, r3]
   192c0:	tst	r3, #8192	; 0x2000
   192c4:	beq	192e0 <__assert_fail@plt+0x829c>
   192c8:	mov	r3, sl
   192cc:	ldrb	r4, [r3, #1]!
   192d0:	lsl	r1, r4, #1
   192d4:	ldrh	r1, [r2, r1]
   192d8:	tst	r1, #8192	; 0x2000
   192dc:	bne	192cc <__assert_fail@plt+0x8288>
   192e0:	cmp	r4, #45	; 0x2d
   192e4:	beq	19380 <__assert_fail@plt+0x833c>
   192e8:	mov	r2, r6
   192ec:	mov	r3, #0
   192f0:	mov	r1, r5
   192f4:	mov	r0, sl
   192f8:	bl	10e04 <__strtoull_internal@plt>
   192fc:	ldr	r8, [r5]
   19300:	mov	r6, r0
   19304:	mov	r7, r1
   19308:	cmp	r8, sl
   1930c:	beq	19368 <__assert_fail@plt+0x8324>
   19310:	ldr	r4, [fp]
   19314:	cmp	r4, #0
   19318:	bne	19358 <__assert_fail@plt+0x8314>
   1931c:	ldr	r3, [sp, #72]	; 0x48
   19320:	cmp	r3, #0
   19324:	beq	19334 <__assert_fail@plt+0x82f0>
   19328:	ldrb	sl, [r8]
   1932c:	cmp	sl, #0
   19330:	bne	196ec <__assert_fail@plt+0x86a8>
   19334:	strd	r6, [r9]
   19338:	mov	r0, r4
   1933c:	add	sp, sp, #36	; 0x24
   19340:	ldrd	r4, [sp]
   19344:	ldrd	r6, [sp, #8]
   19348:	ldrd	r8, [sp, #16]
   1934c:	ldrd	sl, [sp, #24]
   19350:	add	sp, sp, #32
   19354:	pop	{pc}		; (ldr pc, [sp], #4)
   19358:	cmp	r4, #34	; 0x22
   1935c:	bne	19380 <__assert_fail@plt+0x833c>
   19360:	mov	r4, #1
   19364:	b	1931c <__assert_fail@plt+0x82d8>
   19368:	ldr	r3, [sp, #72]	; 0x48
   1936c:	cmp	r3, #0
   19370:	beq	19380 <__assert_fail@plt+0x833c>
   19374:	ldrb	sl, [sl]
   19378:	cmp	sl, #0
   1937c:	bne	19388 <__assert_fail@plt+0x8344>
   19380:	mov	r4, #4
   19384:	b	19338 <__assert_fail@plt+0x82f4>
   19388:	mov	r1, sl
   1938c:	mov	r0, r3
   19390:	bl	10f3c <strchr@plt>
   19394:	cmp	r0, #0
   19398:	movne	r4, #0
   1939c:	movne	r6, #1
   193a0:	movne	r7, r4
   193a4:	beq	19380 <__assert_fail@plt+0x833c>
   193a8:	sub	r3, sl, #69	; 0x45
   193ac:	cmp	r3, #47	; 0x2f
   193b0:	ldrls	pc, [pc, r3, lsl #2]
   193b4:	b	194bc <__assert_fail@plt+0x8478>
   193b8:	andeq	r9, r1, r8, ror r4
   193bc:			; <UNDEFINED> instruction: 0x000194bc
   193c0:	andeq	r9, r1, r8, ror r4
   193c4:			; <UNDEFINED> instruction: 0x000194bc
   193c8:			; <UNDEFINED> instruction: 0x000194bc
   193cc:			; <UNDEFINED> instruction: 0x000194bc
   193d0:	andeq	r9, r1, r8, ror r4
   193d4:			; <UNDEFINED> instruction: 0x000194bc
   193d8:	andeq	r9, r1, r8, ror r4
   193dc:			; <UNDEFINED> instruction: 0x000194bc
   193e0:			; <UNDEFINED> instruction: 0x000194bc
   193e4:	andeq	r9, r1, r8, ror r4
   193e8:			; <UNDEFINED> instruction: 0x000194bc
   193ec:			; <UNDEFINED> instruction: 0x000194bc
   193f0:			; <UNDEFINED> instruction: 0x000194bc
   193f4:	andeq	r9, r1, r8, ror r4
   193f8:			; <UNDEFINED> instruction: 0x000194bc
   193fc:			; <UNDEFINED> instruction: 0x000194bc
   19400:			; <UNDEFINED> instruction: 0x000194bc
   19404:			; <UNDEFINED> instruction: 0x000194bc
   19408:	andeq	r9, r1, r8, ror r4
   1940c:	andeq	r9, r1, r8, ror r4
   19410:			; <UNDEFINED> instruction: 0x000194bc
   19414:			; <UNDEFINED> instruction: 0x000194bc
   19418:			; <UNDEFINED> instruction: 0x000194bc
   1941c:			; <UNDEFINED> instruction: 0x000194bc
   19420:			; <UNDEFINED> instruction: 0x000194bc
   19424:			; <UNDEFINED> instruction: 0x000194bc
   19428:			; <UNDEFINED> instruction: 0x000194bc
   1942c:			; <UNDEFINED> instruction: 0x000194bc
   19430:			; <UNDEFINED> instruction: 0x000194bc
   19434:			; <UNDEFINED> instruction: 0x000194bc
   19438:			; <UNDEFINED> instruction: 0x000194bc
   1943c:			; <UNDEFINED> instruction: 0x000194bc
   19440:	andeq	r9, r1, r8, ror r4
   19444:			; <UNDEFINED> instruction: 0x000194bc
   19448:			; <UNDEFINED> instruction: 0x000194bc
   1944c:			; <UNDEFINED> instruction: 0x000194bc
   19450:	andeq	r9, r1, r8, ror r4
   19454:			; <UNDEFINED> instruction: 0x000194bc
   19458:	andeq	r9, r1, r8, ror r4
   1945c:			; <UNDEFINED> instruction: 0x000194bc
   19460:			; <UNDEFINED> instruction: 0x000194bc
   19464:			; <UNDEFINED> instruction: 0x000194bc
   19468:			; <UNDEFINED> instruction: 0x000194bc
   1946c:			; <UNDEFINED> instruction: 0x000194bc
   19470:			; <UNDEFINED> instruction: 0x000194bc
   19474:	andeq	r9, r1, r8, ror r4
   19478:	mov	r1, #48	; 0x30
   1947c:	ldr	r0, [sp, #72]	; 0x48
   19480:	bl	10f3c <strchr@plt>
   19484:	cmp	r0, #0
   19488:	beq	194bc <__assert_fail@plt+0x8478>
   1948c:	ldrb	r3, [r8, #1]
   19490:	cmp	r3, #68	; 0x44
   19494:	beq	19a4c <__assert_fail@plt+0x8a08>
   19498:	cmp	r3, #105	; 0x69
   1949c:	beq	19704 <__assert_fail@plt+0x86c0>
   194a0:	cmp	r3, #66	; 0x42
   194a4:	moveq	r3, #2
   194a8:	movne	r3, #1
   194ac:	moveq	ip, #1000	; 0x3e8
   194b0:	movne	ip, #1024	; 0x400
   194b4:	str	r3, [sp, #12]
   194b8:	b	194c8 <__assert_fail@plt+0x8484>
   194bc:	mov	r3, #1
   194c0:	mov	ip, #1024	; 0x400
   194c4:	str	r3, [sp, #12]
   194c8:	sub	sl, sl, #66	; 0x42
   194cc:	cmp	sl, #53	; 0x35
   194d0:	ldrls	pc, [pc, sl, lsl #2]
   194d4:	b	196b0 <__assert_fail@plt+0x866c>
   194d8:	muleq	r1, r8, r9
   194dc:			; <UNDEFINED> instruction: 0x000196b0
   194e0:			; <UNDEFINED> instruction: 0x000196b0
   194e4:	andeq	r9, r1, r8, lsr r9
   194e8:			; <UNDEFINED> instruction: 0x000196b0
   194ec:			; <UNDEFINED> instruction: 0x000199b4
   194f0:			; <UNDEFINED> instruction: 0x000196b0
   194f4:			; <UNDEFINED> instruction: 0x000196b0
   194f8:			; <UNDEFINED> instruction: 0x000196b0
   194fc:			; <UNDEFINED> instruction: 0x000196b8
   19500:			; <UNDEFINED> instruction: 0x000196b0
   19504:	andeq	r9, r1, r0, ror #17
   19508:			; <UNDEFINED> instruction: 0x000196b0
   1950c:			; <UNDEFINED> instruction: 0x000196b0
   19510:	andeq	r9, r1, r4, lsl #17
   19514:			; <UNDEFINED> instruction: 0x000196b0
   19518:			; <UNDEFINED> instruction: 0x000196b0
   1951c:			; <UNDEFINED> instruction: 0x000196b0
   19520:	andeq	r9, r1, r4, lsr #16
   19524:			; <UNDEFINED> instruction: 0x000196b0
   19528:			; <UNDEFINED> instruction: 0x000196b0
   1952c:			; <UNDEFINED> instruction: 0x000196b0
   19530:			; <UNDEFINED> instruction: 0x000196b0
   19534:	andeq	r9, r1, r8, asr r7
   19538:			; <UNDEFINED> instruction: 0x000195b0
   1953c:			; <UNDEFINED> instruction: 0x000196b0
   19540:			; <UNDEFINED> instruction: 0x000196b0
   19544:			; <UNDEFINED> instruction: 0x000196b0
   19548:			; <UNDEFINED> instruction: 0x000196b0
   1954c:			; <UNDEFINED> instruction: 0x000196b0
   19550:			; <UNDEFINED> instruction: 0x000196b0
   19554:			; <UNDEFINED> instruction: 0x000196b0
   19558:	andeq	r9, r1, r8, lsr r7
   1955c:	muleq	r1, r8, r6
   19560:			; <UNDEFINED> instruction: 0x000196b0
   19564:			; <UNDEFINED> instruction: 0x000196b0
   19568:			; <UNDEFINED> instruction: 0x000196b0
   1956c:			; <UNDEFINED> instruction: 0x000199b4
   19570:			; <UNDEFINED> instruction: 0x000196b0
   19574:			; <UNDEFINED> instruction: 0x000196b0
   19578:			; <UNDEFINED> instruction: 0x000196b0
   1957c:			; <UNDEFINED> instruction: 0x000196b8
   19580:			; <UNDEFINED> instruction: 0x000196b0
   19584:	andeq	r9, r1, r0, ror #17
   19588:			; <UNDEFINED> instruction: 0x000196b0
   1958c:			; <UNDEFINED> instruction: 0x000196b0
   19590:			; <UNDEFINED> instruction: 0x000196b0
   19594:			; <UNDEFINED> instruction: 0x000196b0
   19598:			; <UNDEFINED> instruction: 0x000196b0
   1959c:			; <UNDEFINED> instruction: 0x000196b0
   195a0:	andeq	r9, r1, r4, lsr #16
   195a4:			; <UNDEFINED> instruction: 0x000196b0
   195a8:			; <UNDEFINED> instruction: 0x000196b0
   195ac:	andeq	r9, r1, r0, lsr #14
   195b0:	asr	r3, ip, #31
   195b4:	mov	r2, ip
   195b8:	cmp	r7, #0
   195bc:	mov	r1, #0
   195c0:	strd	r2, [sp]
   195c4:	bne	19b04 <__assert_fail@plt+0x8ac0>
   195c8:	umull	r6, r7, r6, ip
   195cc:	mov	r2, r6
   195d0:	mov	r3, r7
   195d4:	cmp	r1, #0
   195d8:	bne	19a18 <__assert_fail@plt+0x89d4>
   195dc:	cmp	r3, #0
   195e0:	mov	lr, r1
   195e4:	bne	19c30 <__assert_fail@plt+0x8bec>
   195e8:	umull	r2, r3, r2, ip
   195ec:	mov	r0, r2
   195f0:	mov	r1, r3
   195f4:	cmp	lr, #0
   195f8:	bne	19a18 <__assert_fail@plt+0x89d4>
   195fc:	cmp	r1, #0
   19600:	bne	19c0c <__assert_fail@plt+0x8bc8>
   19604:	umull	r0, r1, r0, ip
   19608:	mov	r2, r0
   1960c:	mov	r3, r1
   19610:	cmp	lr, #0
   19614:	bne	19a18 <__assert_fail@plt+0x89d4>
   19618:	cmp	r3, #0
   1961c:	bne	198bc <__assert_fail@plt+0x8878>
   19620:	umull	r2, r3, r2, ip
   19624:	mov	r0, r2
   19628:	mov	r1, r3
   1962c:	cmp	lr, #0
   19630:	bne	19a18 <__assert_fail@plt+0x89d4>
   19634:	cmp	r1, #0
   19638:	bne	19abc <__assert_fail@plt+0x8a78>
   1963c:	umull	r0, r1, r0, ip
   19640:	mov	r2, r0
   19644:	mov	r3, r1
   19648:	cmp	lr, #0
   1964c:	bne	19a18 <__assert_fail@plt+0x89d4>
   19650:	cmp	r3, #0
   19654:	mov	r7, lr
   19658:	bne	19a98 <__assert_fail@plt+0x8a54>
   1965c:	umull	r2, r3, r2, ip
   19660:	mov	r6, r2
   19664:	mov	lr, r3
   19668:	cmp	r7, #0
   1966c:	bne	19a18 <__assert_fail@plt+0x89d4>
   19670:	cmp	lr, #0
   19674:	bne	19a5c <__assert_fail@plt+0x8a18>
   19678:	umull	r2, r3, r6, ip
   1967c:	mov	r0, r2
   19680:	mov	r2, r3
   19684:	subs	r3, r7, #0
   19688:	bne	19a18 <__assert_fail@plt+0x89d4>
   1968c:	mov	r6, r0
   19690:	mov	r7, r2
   19694:	orr	r4, r4, r3
   19698:	ldr	r2, [sp, #12]
   1969c:	add	r3, r8, r2
   196a0:	str	r3, [r5]
   196a4:	ldrb	r3, [r8, r2]
   196a8:	cmp	r3, #0
   196ac:	beq	19334 <__assert_fail@plt+0x82f0>
   196b0:	orr	r4, r4, #2
   196b4:	b	19334 <__assert_fail@plt+0x82f0>
   196b8:	cmp	r7, #0
   196bc:	asr	r1, ip, #31
   196c0:	mov	lr, #0
   196c4:	bne	19a28 <__assert_fail@plt+0x89e4>
   196c8:	umull	r2, r3, r6, ip
   196cc:	mov	r6, r2
   196d0:	mov	r7, r3
   196d4:	cmp	lr, #0
   196d8:	beq	19698 <__assert_fail@plt+0x8654>
   196dc:	mvn	r6, #0
   196e0:	mov	r4, #1
   196e4:	mov	r7, r6
   196e8:	b	19698 <__assert_fail@plt+0x8654>
   196ec:	mov	r0, r3
   196f0:	mov	r1, sl
   196f4:	bl	10f3c <strchr@plt>
   196f8:	cmp	r0, #0
   196fc:	bne	193a8 <__assert_fail@plt+0x8364>
   19700:	b	196b0 <__assert_fail@plt+0x866c>
   19704:	ldrb	r3, [r8, #2]
   19708:	mov	ip, #1024	; 0x400
   1970c:	cmp	r3, #66	; 0x42
   19710:	movne	r3, #1
   19714:	moveq	r3, #3
   19718:	str	r3, [sp, #12]
   1971c:	b	194c8 <__assert_fail@plt+0x8484>
   19720:	lsr	r3, r7, #31
   19724:	adds	r6, r6, r6
   19728:	adc	r7, r7, r7
   1972c:	cmp	r3, #0
   19730:	beq	19698 <__assert_fail@plt+0x8654>
   19734:	b	196dc <__assert_fail@plt+0x8698>
   19738:	lsr	r3, r7, #23
   1973c:	lsl	r7, r7, #9
   19740:	cmp	r3, #0
   19744:	lsl	r3, r6, #9
   19748:	orr	r7, r7, r6, lsr #23
   1974c:	bne	196dc <__assert_fail@plt+0x8698>
   19750:	mov	r6, r3
   19754:	b	19698 <__assert_fail@plt+0x8654>
   19758:	asr	r3, ip, #31
   1975c:	mov	r2, ip
   19760:	cmp	r7, #0
   19764:	mov	r1, #0
   19768:	strd	r2, [sp]
   1976c:	bne	19b78 <__assert_fail@plt+0x8b34>
   19770:	umull	r6, r7, r6, ip
   19774:	mov	r0, r6
   19778:	mov	fp, r7
   1977c:	cmp	r1, #0
   19780:	bne	19a18 <__assert_fail@plt+0x89d4>
   19784:	cmp	fp, #0
   19788:	mov	lr, r1
   1978c:	bne	19d08 <__assert_fail@plt+0x8cc4>
   19790:	umull	r0, r1, r0, ip
   19794:	mov	r2, r0
   19798:	mov	r3, r1
   1979c:	cmp	lr, #0
   197a0:	bne	19a18 <__assert_fail@plt+0x89d4>
   197a4:	cmp	r3, #0
   197a8:	bne	19d30 <__assert_fail@plt+0x8cec>
   197ac:	umull	r2, r3, r2, ip
   197b0:	mov	r0, r2
   197b4:	mov	r1, r3
   197b8:	cmp	lr, #0
   197bc:	bne	19a18 <__assert_fail@plt+0x89d4>
   197c0:	cmp	r1, #0
   197c4:	bne	19cb0 <__assert_fail@plt+0x8c6c>
   197c8:	umull	r0, r1, r0, ip
   197cc:	mov	r2, r0
   197d0:	mov	r3, r1
   197d4:	cmp	lr, #0
   197d8:	bne	19a18 <__assert_fail@plt+0x89d4>
   197dc:	cmp	r3, #0
   197e0:	bne	19ae0 <__assert_fail@plt+0x8a9c>
   197e4:	umull	r2, r3, r2, ip
   197e8:	mov	r0, r2
   197ec:	mov	r1, r3
   197f0:	cmp	lr, #0
   197f4:	bne	19a18 <__assert_fail@plt+0x89d4>
   197f8:	cmp	r1, #0
   197fc:	beq	1963c <__assert_fail@plt+0x85f8>
   19800:	umull	r6, r7, r0, ip
   19804:	mov	fp, lr
   19808:	mov	sl, r7
   1980c:	umlal	sl, fp, r1, ip
   19810:	cmp	fp, #0
   19814:	bne	19f18 <__assert_fail@plt+0x8ed4>
   19818:	mov	r2, r6
   1981c:	mov	r3, sl
   19820:	b	19648 <__assert_fail@plt+0x8604>
   19824:	asr	r3, ip, #31
   19828:	mov	r2, ip
   1982c:	cmp	r7, #0
   19830:	mov	r1, #0
   19834:	strd	r2, [sp]
   19838:	bne	19b9c <__assert_fail@plt+0x8b58>
   1983c:	umull	r6, r7, r6, ip
   19840:	mov	r0, r6
   19844:	mov	fp, r7
   19848:	cmp	r1, #0
   1984c:	bne	19a18 <__assert_fail@plt+0x89d4>
   19850:	cmp	fp, #0
   19854:	mov	lr, r1
   19858:	beq	1963c <__assert_fail@plt+0x85f8>
   1985c:	umull	r6, r7, r0, ip
   19860:	mov	r3, r1
   19864:	mov	r2, r7
   19868:	umlal	r2, r3, fp, ip
   1986c:	cmp	r3, #0
   19870:	strd	r2, [sp, #16]
   19874:	bne	19dfc <__assert_fail@plt+0x8db8>
   19878:	mov	r2, r6
   1987c:	ldr	r3, [sp, #16]
   19880:	b	19648 <__assert_fail@plt+0x8604>
   19884:	asr	r3, ip, #31
   19888:	mov	r2, ip
   1988c:	cmp	r7, #0
   19890:	mov	r1, #0
   19894:	strd	r2, [sp]
   19898:	bne	19be4 <__assert_fail@plt+0x8ba0>
   1989c:	umull	r6, r7, r6, ip
   198a0:	mov	r2, r6
   198a4:	mov	r3, r7
   198a8:	cmp	r1, #0
   198ac:	bne	19a18 <__assert_fail@plt+0x89d4>
   198b0:	cmp	r3, #0
   198b4:	mov	lr, r1
   198b8:	beq	19620 <__assert_fail@plt+0x85dc>
   198bc:	umull	r6, r7, r2, ip
   198c0:	mov	fp, lr
   198c4:	mov	sl, r7
   198c8:	umlal	sl, fp, r3, ip
   198cc:	cmp	fp, #0
   198d0:	bne	19edc <__assert_fail@plt+0x8e98>
   198d4:	mov	r0, r6
   198d8:	mov	r1, sl
   198dc:	b	1962c <__assert_fail@plt+0x85e8>
   198e0:	asr	r3, ip, #31
   198e4:	mov	r2, ip
   198e8:	cmp	r7, #0
   198ec:	mov	r1, #0
   198f0:	strd	r2, [sp]
   198f4:	bne	19bc0 <__assert_fail@plt+0x8b7c>
   198f8:	umull	r6, r7, r6, ip
   198fc:	mov	sl, r6
   19900:	mov	lr, r7
   19904:	cmp	r1, #0
   19908:	bne	196dc <__assert_fail@plt+0x8698>
   1990c:	cmp	lr, #0
   19910:	mov	r7, r1
   19914:	bne	19cd4 <__assert_fail@plt+0x8c90>
   19918:	umull	sl, fp, sl, ip
   1991c:	mov	r0, sl
   19920:	mov	r2, fp
   19924:	cmp	r7, #0
   19928:	mov	r6, r0
   1992c:	mov	r7, r2
   19930:	beq	19698 <__assert_fail@plt+0x8654>
   19934:	b	196dc <__assert_fail@plt+0x8698>
   19938:	asr	r3, ip, #31
   1993c:	mov	r2, ip
   19940:	cmp	r7, #0
   19944:	mov	r1, #0
   19948:	strd	r2, [sp]
   1994c:	bne	19b54 <__assert_fail@plt+0x8b10>
   19950:	umull	r6, r7, r6, ip
   19954:	mov	r0, r6
   19958:	mov	fp, r7
   1995c:	cmp	r1, #0
   19960:	bne	19a18 <__assert_fail@plt+0x89d4>
   19964:	cmp	fp, #0
   19968:	mov	lr, r1
   1996c:	beq	197c8 <__assert_fail@plt+0x8784>
   19970:	umull	r6, r7, r0, ip
   19974:	mov	r3, r1
   19978:	mov	r2, r7
   1997c:	umlal	r2, r3, fp, ip
   19980:	cmp	r3, #0
   19984:	strd	r2, [sp, #16]
   19988:	bne	19e6c <__assert_fail@plt+0x8e28>
   1998c:	mov	r2, r6
   19990:	ldr	r3, [sp, #16]
   19994:	b	197d4 <__assert_fail@plt+0x8790>
   19998:	lsr	r3, r7, #22
   1999c:	lsl	r7, r7, #10
   199a0:	cmp	r3, #0
   199a4:	lsl	r3, r6, #10
   199a8:	orr	r7, r7, r6, lsr #22
   199ac:	beq	19750 <__assert_fail@plt+0x870c>
   199b0:	b	196dc <__assert_fail@plt+0x8698>
   199b4:	asr	r3, ip, #31
   199b8:	mov	r2, ip
   199bc:	cmp	r7, #0
   199c0:	mov	r1, #0
   199c4:	strd	r2, [sp]
   199c8:	bne	19b2c <__assert_fail@plt+0x8ae8>
   199cc:	umull	r6, r7, r6, ip
   199d0:	mov	r2, r6
   199d4:	mov	r3, r7
   199d8:	cmp	r1, #0
   199dc:	bne	196dc <__assert_fail@plt+0x8698>
   199e0:	cmp	r3, #0
   199e4:	mov	r7, r1
   199e8:	bne	19c90 <__assert_fail@plt+0x8c4c>
   199ec:	umull	r2, r3, r2, ip
   199f0:	mov	r6, r2
   199f4:	mov	lr, r3
   199f8:	cmp	r7, #0
   199fc:	bne	196dc <__assert_fail@plt+0x8698>
   19a00:	cmp	lr, #0
   19a04:	bne	19c54 <__assert_fail@plt+0x8c10>
   19a08:	umull	r2, r3, r6, ip
   19a0c:	mov	r0, r2
   19a10:	mov	r2, r3
   19a14:	b	19924 <__assert_fail@plt+0x88e0>
   19a18:	mvn	r6, #0
   19a1c:	mov	r3, #1
   19a20:	mov	r7, r6
   19a24:	b	19694 <__assert_fail@plt+0x8650>
   19a28:	umull	sl, fp, r6, ip
   19a2c:	mov	r3, lr
   19a30:	mov	r2, fp
   19a34:	umlal	r2, r3, r7, ip
   19a38:	cmp	r3, #0
   19a3c:	bne	19e34 <__assert_fail@plt+0x8df0>
   19a40:	mov	r6, sl
   19a44:	mov	r7, r2
   19a48:	b	196d4 <__assert_fail@plt+0x8690>
   19a4c:	mov	r3, #2
   19a50:	mov	ip, #1000	; 0x3e8
   19a54:	str	r3, [sp, #12]
   19a58:	b	194c8 <__assert_fail@plt+0x8484>
   19a5c:	umull	r0, r1, r6, ip
   19a60:	mov	r3, r7
   19a64:	mov	r2, r1
   19a68:	strd	r0, [sp, #16]
   19a6c:	umlal	r2, r3, lr, ip
   19a70:	cmp	r3, #0
   19a74:	beq	19684 <__assert_fail@plt+0x8640>
   19a78:	ldrd	sl, [sp]
   19a7c:	mov	r7, #1
   19a80:	ldr	r0, [sp, #16]
   19a84:	ldr	r3, [sp, #20]
   19a88:	mul	r2, r6, fp
   19a8c:	mla	r2, lr, sl, r2
   19a90:	add	r2, r2, r3
   19a94:	b	19684 <__assert_fail@plt+0x8640>
   19a98:	umull	sl, fp, r2, ip
   19a9c:	mov	r1, lr
   19aa0:	mov	r0, fp
   19aa4:	umlal	r0, r1, r3, ip
   19aa8:	cmp	r1, #0
   19aac:	bne	19d8c <__assert_fail@plt+0x8d48>
   19ab0:	mov	r6, sl
   19ab4:	mov	lr, r0
   19ab8:	b	19668 <__assert_fail@plt+0x8624>
   19abc:	umull	sl, fp, r0, ip
   19ac0:	mov	r7, lr
   19ac4:	mov	r6, fp
   19ac8:	umlal	r6, r7, r1, ip
   19acc:	cmp	r7, #0
   19ad0:	bne	19f34 <__assert_fail@plt+0x8ef0>
   19ad4:	mov	r2, sl
   19ad8:	mov	r3, r6
   19adc:	b	19648 <__assert_fail@plt+0x8604>
   19ae0:	umull	sl, fp, r2, ip
   19ae4:	mov	r7, lr
   19ae8:	mov	r6, fp
   19aec:	umlal	r6, r7, r3, ip
   19af0:	cmp	r7, #0
   19af4:	bne	19dc4 <__assert_fail@plt+0x8d80>
   19af8:	mov	r0, sl
   19afc:	mov	r1, r6
   19b00:	b	197f0 <__assert_fail@plt+0x87ac>
   19b04:	umull	sl, fp, r6, ip
   19b08:	mov	r3, r1
   19b0c:	mov	r2, fp
   19b10:	umlal	r2, r3, r7, ip
   19b14:	cmp	r3, #0
   19b18:	strd	r2, [sp, #16]
   19b1c:	bne	19da8 <__assert_fail@plt+0x8d64>
   19b20:	mov	r2, sl
   19b24:	ldr	r3, [sp, #16]
   19b28:	b	195d4 <__assert_fail@plt+0x8590>
   19b2c:	umull	sl, fp, r6, ip
   19b30:	mov	r3, r1
   19b34:	mov	r2, fp
   19b38:	umlal	r2, r3, r7, ip
   19b3c:	cmp	r3, #0
   19b40:	strd	r2, [sp, #16]
   19b44:	bne	19e88 <__assert_fail@plt+0x8e44>
   19b48:	mov	r2, sl
   19b4c:	ldr	r3, [sp, #16]
   19b50:	b	199d8 <__assert_fail@plt+0x8994>
   19b54:	umull	sl, fp, r6, ip
   19b58:	mov	r3, r1
   19b5c:	mov	r2, fp
   19b60:	umlal	r2, r3, r7, ip
   19b64:	cmp	r3, #0
   19b68:	bne	19d54 <__assert_fail@plt+0x8d10>
   19b6c:	mov	r0, sl
   19b70:	mov	fp, r2
   19b74:	b	1995c <__assert_fail@plt+0x8918>
   19b78:	umull	sl, fp, r6, ip
   19b7c:	mov	r3, r1
   19b80:	mov	r2, fp
   19b84:	umlal	r2, r3, r7, ip
   19b88:	cmp	r3, #0
   19b8c:	bne	19e18 <__assert_fail@plt+0x8dd4>
   19b90:	mov	r0, sl
   19b94:	mov	fp, r2
   19b98:	b	1977c <__assert_fail@plt+0x8738>
   19b9c:	umull	sl, fp, r6, ip
   19ba0:	mov	r3, r1
   19ba4:	mov	r2, fp
   19ba8:	umlal	r2, r3, r7, ip
   19bac:	cmp	r3, #0
   19bb0:	bne	19ea4 <__assert_fail@plt+0x8e60>
   19bb4:	mov	r0, sl
   19bb8:	mov	fp, r2
   19bbc:	b	19848 <__assert_fail@plt+0x8804>
   19bc0:	umull	sl, fp, r6, ip
   19bc4:	mov	r3, r1
   19bc8:	mov	r2, fp
   19bcc:	strd	sl, [sp, #16]
   19bd0:	umlal	r2, r3, r7, ip
   19bd4:	cmp	r3, #0
   19bd8:	bne	19e4c <__assert_fail@plt+0x8e08>
   19bdc:	mov	lr, r2
   19be0:	b	19904 <__assert_fail@plt+0x88c0>
   19be4:	umull	sl, fp, r6, ip
   19be8:	mov	r3, r1
   19bec:	mov	r2, fp
   19bf0:	umlal	r2, r3, r7, ip
   19bf4:	cmp	r3, #0
   19bf8:	strd	r2, [sp, #16]
   19bfc:	bne	19f50 <__assert_fail@plt+0x8f0c>
   19c00:	mov	r2, sl
   19c04:	ldr	r3, [sp, #16]
   19c08:	b	198a8 <__assert_fail@plt+0x8864>
   19c0c:	umull	sl, fp, r0, ip
   19c10:	mov	r7, lr
   19c14:	mov	r6, fp
   19c18:	umlal	r6, r7, r1, ip
   19c1c:	cmp	r7, #0
   19c20:	bne	19f6c <__assert_fail@plt+0x8f28>
   19c24:	mov	r2, sl
   19c28:	mov	r3, r6
   19c2c:	b	19610 <__assert_fail@plt+0x85cc>
   19c30:	umull	r6, r7, r2, ip
   19c34:	mov	fp, r1
   19c38:	mov	sl, r7
   19c3c:	umlal	sl, fp, r3, ip
   19c40:	cmp	fp, #0
   19c44:	bne	19de0 <__assert_fail@plt+0x8d9c>
   19c48:	mov	r0, r6
   19c4c:	mov	r1, sl
   19c50:	b	195f4 <__assert_fail@plt+0x85b0>
   19c54:	umull	r0, r1, r6, ip
   19c58:	mov	r3, r7
   19c5c:	mov	r2, r1
   19c60:	strd	r0, [sp, #16]
   19c64:	umlal	r2, r3, lr, ip
   19c68:	cmp	r3, #0
   19c6c:	beq	19924 <__assert_fail@plt+0x88e0>
   19c70:	ldrd	sl, [sp]
   19c74:	mov	r7, #1
   19c78:	ldr	r0, [sp, #16]
   19c7c:	ldr	r3, [sp, #20]
   19c80:	mul	r2, r6, fp
   19c84:	mla	r2, lr, sl, r2
   19c88:	add	r2, r2, r3
   19c8c:	b	19924 <__assert_fail@plt+0x88e0>
   19c90:	umull	sl, fp, r2, ip
   19c94:	mov	r0, fp
   19c98:	umlal	r0, r1, r3, ip
   19c9c:	cmp	r1, #0
   19ca0:	bne	19f88 <__assert_fail@plt+0x8f44>
   19ca4:	mov	r6, sl
   19ca8:	mov	lr, r0
   19cac:	b	199f8 <__assert_fail@plt+0x89b4>
   19cb0:	umull	r6, r7, r0, ip
   19cb4:	mov	fp, lr
   19cb8:	mov	sl, r7
   19cbc:	umlal	sl, fp, r1, ip
   19cc0:	cmp	fp, #0
   19cc4:	bne	19ec0 <__assert_fail@plt+0x8e7c>
   19cc8:	mov	r2, r6
   19ccc:	mov	r3, sl
   19cd0:	b	197d4 <__assert_fail@plt+0x8790>
   19cd4:	umull	r0, r1, sl, ip
   19cd8:	mov	r3, r7
   19cdc:	mov	r2, r1
   19ce0:	umlal	r2, r3, lr, ip
   19ce4:	cmp	r3, #0
   19ce8:	beq	19924 <__assert_fail@plt+0x88e0>
   19cec:	ldr	r3, [sp, #4]
   19cf0:	mov	r7, #1
   19cf4:	mul	r2, sl, r3
   19cf8:	ldr	r3, [sp]
   19cfc:	mla	r2, lr, r3, r2
   19d00:	add	r2, r2, r1
   19d04:	b	19924 <__assert_fail@plt+0x88e0>
   19d08:	umull	r6, r7, r0, ip
   19d0c:	mov	r3, r1
   19d10:	mov	r2, r7
   19d14:	umlal	r2, r3, fp, ip
   19d18:	cmp	r3, #0
   19d1c:	strd	r2, [sp, #16]
   19d20:	bne	19fa4 <__assert_fail@plt+0x8f60>
   19d24:	mov	r2, r6
   19d28:	ldr	r3, [sp, #16]
   19d2c:	b	1979c <__assert_fail@plt+0x8758>
   19d30:	umull	sl, fp, r2, ip
   19d34:	mov	r7, lr
   19d38:	mov	r6, fp
   19d3c:	umlal	r6, r7, r3, ip
   19d40:	cmp	r7, #0
   19d44:	bne	19d70 <__assert_fail@plt+0x8d2c>
   19d48:	mov	r0, sl
   19d4c:	mov	r1, r6
   19d50:	b	197b8 <__assert_fail@plt+0x8774>
   19d54:	ldrd	r2, [sp]
   19d58:	mov	r0, sl
   19d5c:	mov	r1, #1
   19d60:	mul	r6, r6, r3
   19d64:	mla	r7, r2, r7, r6
   19d68:	add	fp, r7, fp
   19d6c:	b	1995c <__assert_fail@plt+0x8918>
   19d70:	ldrd	r6, [sp]
   19d74:	mov	r0, sl
   19d78:	mov	lr, #1
   19d7c:	mul	r2, r2, r7
   19d80:	mla	r1, r3, r6, r2
   19d84:	add	r1, r1, fp
   19d88:	b	197b8 <__assert_fail@plt+0x8774>
   19d8c:	ldrd	r0, [sp]
   19d90:	mov	r6, sl
   19d94:	mov	r7, #1
   19d98:	mul	r2, r2, r1
   19d9c:	mla	lr, r3, r0, r2
   19da0:	add	lr, lr, fp
   19da4:	b	19668 <__assert_fail@plt+0x8624>
   19da8:	ldm	sp, {r0, r3}
   19dac:	mov	r2, sl
   19db0:	mov	r1, #1
   19db4:	mul	r3, r6, r3
   19db8:	mla	r3, r0, r7, r3
   19dbc:	add	r3, r3, fp
   19dc0:	b	195d4 <__assert_fail@plt+0x8590>
   19dc4:	ldrd	r6, [sp]
   19dc8:	mov	r0, sl
   19dcc:	mov	lr, #1
   19dd0:	mul	r2, r2, r7
   19dd4:	mla	r1, r3, r6, r2
   19dd8:	add	r1, r1, fp
   19ddc:	b	197f0 <__assert_fail@plt+0x87ac>
   19de0:	ldrd	sl, [sp]
   19de4:	mov	r0, r6
   19de8:	mov	lr, #1
   19dec:	mul	r2, r2, fp
   19df0:	mla	r1, r3, sl, r2
   19df4:	add	r1, r1, r7
   19df8:	b	195f4 <__assert_fail@plt+0x85b0>
   19dfc:	ldm	sp, {r1, r3}
   19e00:	mov	r2, r6
   19e04:	mov	lr, #1
   19e08:	mul	r3, r0, r3
   19e0c:	mla	r3, fp, r1, r3
   19e10:	add	r3, r3, r7
   19e14:	b	19648 <__assert_fail@plt+0x8604>
   19e18:	ldrd	r2, [sp]
   19e1c:	mov	r0, sl
   19e20:	mov	r1, #1
   19e24:	mul	r6, r6, r3
   19e28:	mla	r7, r2, r7, r6
   19e2c:	add	fp, r7, fp
   19e30:	b	1977c <__assert_fail@plt+0x8738>
   19e34:	mul	r3, r6, r1
   19e38:	mov	lr, #1
   19e3c:	mov	r6, sl
   19e40:	mla	r7, ip, r7, r3
   19e44:	add	r7, r7, fp
   19e48:	b	196d4 <__assert_fail@plt+0x8690>
   19e4c:	ldrd	r2, [sp]
   19e50:	mov	r1, #1
   19e54:	ldr	sl, [sp, #16]
   19e58:	mul	lr, r6, r3
   19e5c:	ldr	r3, [sp, #20]
   19e60:	mla	lr, r2, r7, lr
   19e64:	add	lr, lr, r3
   19e68:	b	19904 <__assert_fail@plt+0x88c0>
   19e6c:	ldm	sp, {r1, r3}
   19e70:	mov	r2, r6
   19e74:	mov	lr, #1
   19e78:	mul	r3, r0, r3
   19e7c:	mla	r3, fp, r1, r3
   19e80:	add	r3, r3, r7
   19e84:	b	197d4 <__assert_fail@plt+0x8790>
   19e88:	ldm	sp, {r0, r3}
   19e8c:	mov	r2, sl
   19e90:	mov	r1, #1
   19e94:	mul	r3, r6, r3
   19e98:	mla	r3, r0, r7, r3
   19e9c:	add	r3, r3, fp
   19ea0:	b	199d8 <__assert_fail@plt+0x8994>
   19ea4:	ldrd	r2, [sp]
   19ea8:	mov	r0, sl
   19eac:	mov	r1, #1
   19eb0:	mul	r6, r6, r3
   19eb4:	mla	r7, r2, r7, r6
   19eb8:	add	fp, r7, fp
   19ebc:	b	19848 <__assert_fail@plt+0x8804>
   19ec0:	ldrd	sl, [sp]
   19ec4:	mov	r2, r6
   19ec8:	mov	lr, #1
   19ecc:	mul	r3, r0, fp
   19ed0:	mla	r3, r1, sl, r3
   19ed4:	add	r3, r3, r7
   19ed8:	b	197d4 <__assert_fail@plt+0x8790>
   19edc:	ldrd	sl, [sp]
   19ee0:	mov	r0, r6
   19ee4:	mov	lr, #1
   19ee8:	mul	r2, r2, fp
   19eec:	mla	r1, r3, sl, r2
   19ef0:	add	r1, r1, r7
   19ef4:	b	1962c <__assert_fail@plt+0x85e8>
   19ef8:	movw	r3, #47392	; 0xb920
   19efc:	movt	r3, #1
   19f00:	movw	r1, #47336	; 0xb8e8
   19f04:	movt	r1, #1
   19f08:	movw	r0, #47352	; 0xb8f8
   19f0c:	movt	r0, #1
   19f10:	mov	r2, #85	; 0x55
   19f14:	bl	11044 <__assert_fail@plt>
   19f18:	ldrd	sl, [sp]
   19f1c:	mov	r2, r6
   19f20:	mov	lr, #1
   19f24:	mul	r3, r0, fp
   19f28:	mla	r3, r1, sl, r3
   19f2c:	add	r3, r3, r7
   19f30:	b	19648 <__assert_fail@plt+0x8604>
   19f34:	ldrd	r6, [sp]
   19f38:	mov	r2, sl
   19f3c:	mov	lr, #1
   19f40:	mul	r3, r0, r7
   19f44:	mla	r3, r1, r6, r3
   19f48:	add	r3, r3, fp
   19f4c:	b	19648 <__assert_fail@plt+0x8604>
   19f50:	ldm	sp, {r0, r3}
   19f54:	mov	r2, sl
   19f58:	mov	r1, #1
   19f5c:	mul	r3, r6, r3
   19f60:	mla	r3, r0, r7, r3
   19f64:	add	r3, r3, fp
   19f68:	b	198a8 <__assert_fail@plt+0x8864>
   19f6c:	ldrd	r6, [sp]
   19f70:	mov	r2, sl
   19f74:	mov	lr, #1
   19f78:	mul	r3, r0, r7
   19f7c:	mla	r3, r1, r6, r3
   19f80:	add	r3, r3, fp
   19f84:	b	19610 <__assert_fail@plt+0x85cc>
   19f88:	ldrd	r0, [sp]
   19f8c:	mov	r6, sl
   19f90:	mov	r7, #1
   19f94:	mul	r2, r2, r1
   19f98:	mla	lr, r3, r0, r2
   19f9c:	add	lr, lr, fp
   19fa0:	b	199f8 <__assert_fail@plt+0x89b4>
   19fa4:	ldm	sp, {r1, r3}
   19fa8:	mov	r2, r6
   19fac:	mov	lr, #1
   19fb0:	mul	r3, r0, r3
   19fb4:	mla	r3, fp, r1, r3
   19fb8:	add	r3, r3, r7
   19fbc:	b	1979c <__assert_fail@plt+0x8758>
   19fc0:	cmp	r1, #0
   19fc4:	cmpne	r0, #0
   19fc8:	beq	1a014 <__assert_fail@plt+0x8fd0>
   19fcc:	strd	r4, [sp, #-16]!
   19fd0:	umull	r4, r5, r0, r1
   19fd4:	str	r6, [sp, #8]
   19fd8:	str	lr, [sp, #12]
   19fdc:	adds	r3, r5, #0
   19fe0:	movne	r3, #1
   19fe4:	cmp	r4, #0
   19fe8:	blt	19ff4 <__assert_fail@plt+0x8fb0>
   19fec:	cmp	r3, #0
   19ff0:	beq	1a020 <__assert_fail@plt+0x8fdc>
   19ff4:	bl	10f48 <__errno_location@plt>
   19ff8:	mov	r3, #12
   19ffc:	ldrd	r4, [sp]
   1a000:	ldr	r6, [sp, #8]
   1a004:	add	sp, sp, #12
   1a008:	str	r3, [r0]
   1a00c:	mov	r0, #0
   1a010:	pop	{pc}		; (ldr pc, [sp], #4)
   1a014:	mov	r1, #1
   1a018:	mov	r0, r1
   1a01c:	b	10da4 <calloc@plt>
   1a020:	ldrd	r4, [sp]
   1a024:	ldr	r6, [sp, #8]
   1a028:	ldr	lr, [sp, #12]
   1a02c:	add	sp, sp, #16
   1a030:	b	10da4 <calloc@plt>
   1a034:	cmp	r0, #0
   1a038:	beq	1a044 <__assert_fail@plt+0x9000>
   1a03c:	blt	1a04c <__assert_fail@plt+0x9008>
   1a040:	b	10ec4 <malloc@plt>
   1a044:	mov	r0, #1
   1a048:	b	10ec4 <malloc@plt>
   1a04c:	str	r4, [sp, #-8]!
   1a050:	str	lr, [sp, #4]
   1a054:	bl	10f48 <__errno_location@plt>
   1a058:	mov	r3, #12
   1a05c:	ldr	r4, [sp]
   1a060:	add	sp, sp, #4
   1a064:	str	r3, [r0]
   1a068:	mov	r0, #0
   1a06c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a070:	cmp	r0, #0
   1a074:	beq	1a09c <__assert_fail@plt+0x9058>
   1a078:	cmp	r1, #0
   1a07c:	str	r4, [sp, #-8]!
   1a080:	str	lr, [sp, #4]
   1a084:	beq	1a0a4 <__assert_fail@plt+0x9060>
   1a088:	blt	1a0b8 <__assert_fail@plt+0x9074>
   1a08c:	ldr	r4, [sp]
   1a090:	ldr	lr, [sp, #4]
   1a094:	add	sp, sp, #8
   1a098:	b	10e4c <realloc@plt>
   1a09c:	mov	r0, r1
   1a0a0:	b	1a034 <__assert_fail@plt+0x8ff0>
   1a0a4:	bl	13db0 <__assert_fail@plt+0x2d6c>
   1a0a8:	ldr	r4, [sp]
   1a0ac:	add	sp, sp, #4
   1a0b0:	mov	r0, #0
   1a0b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0b8:	bl	10f48 <__errno_location@plt>
   1a0bc:	mov	r3, #12
   1a0c0:	str	r3, [r0]
   1a0c4:	b	1a0a8 <__assert_fail@plt+0x9064>
   1a0c8:	strd	r4, [sp, #-16]!
   1a0cc:	mov	r4, r0
   1a0d0:	str	r6, [sp, #8]
   1a0d4:	str	lr, [sp, #12]
   1a0d8:	bl	10e94 <__fpending@plt>
   1a0dc:	ldr	r5, [r4]
   1a0e0:	mov	r6, r0
   1a0e4:	mov	r0, r4
   1a0e8:	bl	13bf0 <__assert_fail@plt+0x2bac>
   1a0ec:	mov	r4, r0
   1a0f0:	and	r5, r5, #32
   1a0f4:	cmp	r5, #0
   1a0f8:	bne	1a130 <__assert_fail@plt+0x90ec>
   1a0fc:	cmp	r0, #0
   1a100:	beq	1a11c <__assert_fail@plt+0x90d8>
   1a104:	cmp	r6, #0
   1a108:	bne	1a148 <__assert_fail@plt+0x9104>
   1a10c:	bl	10f48 <__errno_location@plt>
   1a110:	ldr	r4, [r0]
   1a114:	subs	r4, r4, #9
   1a118:	mvnne	r4, #0
   1a11c:	mov	r0, r4
   1a120:	ldrd	r4, [sp]
   1a124:	ldr	r6, [sp, #8]
   1a128:	add	sp, sp, #12
   1a12c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a130:	cmp	r0, #0
   1a134:	bne	1a148 <__assert_fail@plt+0x9104>
   1a138:	bl	10f48 <__errno_location@plt>
   1a13c:	str	r4, [r0]
   1a140:	mvn	r4, #0
   1a144:	b	1a11c <__assert_fail@plt+0x90d8>
   1a148:	mvn	r4, #0
   1a14c:	b	1a11c <__assert_fail@plt+0x90d8>
   1a150:	push	{r1, r2, r3}
   1a154:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a158:	strd	r6, [sp, #8]
   1a15c:	str	lr, [sp, #16]
   1a160:	sub	sp, sp, #8
   1a164:	ldr	r1, [sp, #28]
   1a168:	add	r2, sp, #32
   1a16c:	str	r2, [sp, #4]
   1a170:	cmp	r1, #0
   1a174:	beq	1a250 <__assert_fail@plt+0x920c>
   1a178:	movw	r3, #1030	; 0x406
   1a17c:	mov	r6, r0
   1a180:	cmp	r1, r3
   1a184:	beq	1a260 <__assert_fail@plt+0x921c>
   1a188:	cmp	r1, #11
   1a18c:	beq	1a208 <__assert_fail@plt+0x91c4>
   1a190:	ble	1a1e8 <__assert_fail@plt+0x91a4>
   1a194:	movw	r2, #1031	; 0x407
   1a198:	cmp	r1, r2
   1a19c:	bgt	1a224 <__assert_fail@plt+0x91e0>
   1a1a0:	cmp	r1, r3
   1a1a4:	bge	1a1b4 <__assert_fail@plt+0x9170>
   1a1a8:	movw	r3, #1025	; 0x401
   1a1ac:	cmp	r1, r3
   1a1b0:	beq	1a208 <__assert_fail@plt+0x91c4>
   1a1b4:	ldr	r3, [sp, #4]
   1a1b8:	mov	r0, r6
   1a1bc:	ldr	r2, [r3]
   1a1c0:	bl	10fb4 <fcntl64@plt>
   1a1c4:	mov	r4, r0
   1a1c8:	mov	r0, r4
   1a1cc:	add	sp, sp, #8
   1a1d0:	ldrd	r4, [sp]
   1a1d4:	ldrd	r6, [sp, #8]
   1a1d8:	ldr	lr, [sp, #16]
   1a1dc:	add	sp, sp, #20
   1a1e0:	add	sp, sp, #12
   1a1e4:	bx	lr
   1a1e8:	cmp	r1, #4
   1a1ec:	beq	1a1b4 <__assert_fail@plt+0x9170>
   1a1f0:	bgt	1a218 <__assert_fail@plt+0x91d4>
   1a1f4:	cmp	r1, #2
   1a1f8:	beq	1a1b4 <__assert_fail@plt+0x9170>
   1a1fc:	bgt	1a208 <__assert_fail@plt+0x91c4>
   1a200:	cmp	r1, #1
   1a204:	bne	1a1b4 <__assert_fail@plt+0x9170>
   1a208:	mov	r0, r6
   1a20c:	bl	10fb4 <fcntl64@plt>
   1a210:	mov	r4, r0
   1a214:	b	1a1c8 <__assert_fail@plt+0x9184>
   1a218:	cmp	r1, #9
   1a21c:	bne	1a1b4 <__assert_fail@plt+0x9170>
   1a220:	b	1a208 <__assert_fail@plt+0x91c4>
   1a224:	movw	r3, #1033	; 0x409
   1a228:	cmp	r1, r3
   1a22c:	beq	1a1b4 <__assert_fail@plt+0x9170>
   1a230:	blt	1a208 <__assert_fail@plt+0x91c4>
   1a234:	movw	r3, #1034	; 0x40a
   1a238:	cmp	r1, r3
   1a23c:	bne	1a1b4 <__assert_fail@plt+0x9170>
   1a240:	mov	r0, r6
   1a244:	bl	10fb4 <fcntl64@plt>
   1a248:	mov	r4, r0
   1a24c:	b	1a1c8 <__assert_fail@plt+0x9184>
   1a250:	ldr	r2, [sp, #32]
   1a254:	bl	10fb4 <fcntl64@plt>
   1a258:	mov	r4, r0
   1a25c:	b	1a1c8 <__assert_fail@plt+0x9184>
   1a260:	movw	r5, #49976	; 0xc338
   1a264:	movt	r5, #2
   1a268:	ldr	r7, [r2]
   1a26c:	add	r2, sp, #36	; 0x24
   1a270:	ldr	r3, [r5]
   1a274:	str	r2, [sp, #4]
   1a278:	mov	r2, r7
   1a27c:	cmp	r3, #0
   1a280:	blt	1a29c <__assert_fail@plt+0x9258>
   1a284:	bl	10fb4 <fcntl64@plt>
   1a288:	subs	r4, r0, #0
   1a28c:	blt	1a304 <__assert_fail@plt+0x92c0>
   1a290:	mov	r3, #1
   1a294:	str	r3, [r5]
   1a298:	b	1a1c8 <__assert_fail@plt+0x9184>
   1a29c:	mov	r1, #0
   1a2a0:	bl	10fb4 <fcntl64@plt>
   1a2a4:	subs	r4, r0, #0
   1a2a8:	blt	1a1c8 <__assert_fail@plt+0x9184>
   1a2ac:	ldr	r3, [r5]
   1a2b0:	cmn	r3, #1
   1a2b4:	bne	1a1c8 <__assert_fail@plt+0x9184>
   1a2b8:	mov	r1, #1
   1a2bc:	mov	r0, r4
   1a2c0:	bl	10fb4 <fcntl64@plt>
   1a2c4:	subs	r2, r0, #0
   1a2c8:	blt	1a2e4 <__assert_fail@plt+0x92a0>
   1a2cc:	orr	r2, r2, #1
   1a2d0:	mov	r1, #2
   1a2d4:	mov	r0, r4
   1a2d8:	bl	10fb4 <fcntl64@plt>
   1a2dc:	cmn	r0, #1
   1a2e0:	bne	1a1c8 <__assert_fail@plt+0x9184>
   1a2e4:	bl	10f48 <__errno_location@plt>
   1a2e8:	mov	r5, r0
   1a2ec:	mov	r0, r4
   1a2f0:	ldr	r6, [r5]
   1a2f4:	mvn	r4, #0
   1a2f8:	bl	11038 <close@plt>
   1a2fc:	str	r6, [r5]
   1a300:	b	1a1c8 <__assert_fail@plt+0x9184>
   1a304:	bl	10f48 <__errno_location@plt>
   1a308:	ldr	r3, [r0]
   1a30c:	cmp	r3, #22
   1a310:	bne	1a290 <__assert_fail@plt+0x924c>
   1a314:	mov	r2, r7
   1a318:	mov	r0, r6
   1a31c:	mov	r1, #0
   1a320:	bl	10fb4 <fcntl64@plt>
   1a324:	subs	r4, r0, #0
   1a328:	mvnge	r3, #0
   1a32c:	strge	r3, [r5]
   1a330:	bge	1a2b8 <__assert_fail@plt+0x9274>
   1a334:	b	1a1c8 <__assert_fail@plt+0x9184>
   1a338:	mov	r0, #14
   1a33c:	str	r4, [sp, #-8]!
   1a340:	str	lr, [sp, #4]
   1a344:	bl	10ff0 <nl_langinfo@plt>
   1a348:	cmp	r0, #0
   1a34c:	beq	1a370 <__assert_fail@plt+0x932c>
   1a350:	ldrb	r2, [r0]
   1a354:	movw	r3, #47404	; 0xb92c
   1a358:	movt	r3, #1
   1a35c:	ldr	r4, [sp]
   1a360:	add	sp, sp, #4
   1a364:	cmp	r2, #0
   1a368:	moveq	r0, r3
   1a36c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a370:	ldr	r4, [sp]
   1a374:	add	sp, sp, #4
   1a378:	movw	r0, #47404	; 0xb92c
   1a37c:	movt	r0, #1
   1a380:	pop	{pc}		; (ldr pc, [sp], #4)
   1a384:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a388:	mov	r5, r2
   1a38c:	strd	r6, [sp, #8]
   1a390:	subs	r6, r0, #0
   1a394:	mov	r7, r1
   1a398:	str	lr, [sp, #16]
   1a39c:	sub	sp, sp, #12
   1a3a0:	addeq	r6, sp, #4
   1a3a4:	mov	r0, r6
   1a3a8:	bl	10ea0 <mbrtowc@plt>
   1a3ac:	cmp	r5, #0
   1a3b0:	cmnne	r0, #3
   1a3b4:	mov	r4, r0
   1a3b8:	bhi	1a3d4 <__assert_fail@plt+0x9390>
   1a3bc:	mov	r0, r4
   1a3c0:	add	sp, sp, #12
   1a3c4:	ldrd	r4, [sp]
   1a3c8:	ldrd	r6, [sp, #8]
   1a3cc:	add	sp, sp, #16
   1a3d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3d4:	mov	r0, #0
   1a3d8:	bl	13ee0 <__assert_fail@plt+0x2e9c>
   1a3dc:	cmp	r0, #0
   1a3e0:	bne	1a3bc <__assert_fail@plt+0x9378>
   1a3e4:	ldrb	r3, [r7]
   1a3e8:	mov	r4, #1
   1a3ec:	str	r3, [r6]
   1a3f0:	b	1a3bc <__assert_fail@plt+0x9378>
   1a3f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a3f8:	mov	r4, r3
   1a3fc:	mov	r5, r2
   1a400:	strd	r6, [sp, #8]
   1a404:	mov	r6, r1
   1a408:	strd	r8, [sp, #16]
   1a40c:	strd	sl, [sp, #24]
   1a410:	mov	sl, r0
   1a414:	str	lr, [sp, #32]
   1a418:	sub	sp, sp, #20
   1a41c:	bl	10f48 <__errno_location@plt>
   1a420:	cmp	r6, r4
   1a424:	mov	r8, r0
   1a428:	bne	1a448 <__assert_fail@plt+0x9404>
   1a42c:	mov	r2, r6
   1a430:	mov	r1, r5
   1a434:	mov	r0, sl
   1a438:	bl	10e28 <memcmp@plt>
   1a43c:	subs	r2, r0, #0
   1a440:	streq	r2, [r8]
   1a444:	beq	1a4e0 <__assert_fail@plt+0x949c>
   1a448:	add	r3, sl, r6
   1a44c:	mov	r2, #0
   1a450:	ldrb	fp, [sl, r6]
   1a454:	mov	r9, r2
   1a458:	add	r7, r6, #1
   1a45c:	str	r3, [sp, #4]
   1a460:	ldrb	r3, [r5, r4]
   1a464:	strb	r2, [sl, r6]
   1a468:	strb	r2, [r5, r4]
   1a46c:	str	r3, [sp, #12]
   1a470:	add	r3, r5, r4
   1a474:	add	r4, r4, #1
   1a478:	str	r3, [sp, #8]
   1a47c:	b	1a4b0 <__assert_fail@plt+0x946c>
   1a480:	bl	10f30 <strlen@plt>
   1a484:	add	r6, r0, #1
   1a488:	mov	r0, r5
   1a48c:	bl	10f30 <strlen@plt>
   1a490:	add	r0, r0, #1
   1a494:	subs	r7, r7, r6
   1a498:	add	sl, sl, r6
   1a49c:	add	r5, r5, r0
   1a4a0:	sub	r4, r4, r0
   1a4a4:	beq	1a500 <__assert_fail@plt+0x94bc>
   1a4a8:	cmp	r4, #0
   1a4ac:	beq	1a510 <__assert_fail@plt+0x94cc>
   1a4b0:	mov	r1, r5
   1a4b4:	mov	r0, sl
   1a4b8:	str	r9, [r8]
   1a4bc:	bl	10eb8 <strcoll@plt>
   1a4c0:	subs	r2, r0, #0
   1a4c4:	mov	r0, sl
   1a4c8:	beq	1a480 <__assert_fail@plt+0x943c>
   1a4cc:	ldr	r3, [sp, #4]
   1a4d0:	ldr	r1, [sp, #12]
   1a4d4:	strb	fp, [r3]
   1a4d8:	ldr	r3, [sp, #8]
   1a4dc:	strb	r1, [r3]
   1a4e0:	mov	r0, r2
   1a4e4:	add	sp, sp, #20
   1a4e8:	ldrd	r4, [sp]
   1a4ec:	ldrd	r6, [sp, #8]
   1a4f0:	ldrd	r8, [sp, #16]
   1a4f4:	ldrd	sl, [sp, #24]
   1a4f8:	add	sp, sp, #32
   1a4fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a500:	adds	r4, r4, #0
   1a504:	movne	r4, #1
   1a508:	rsb	r2, r4, #0
   1a50c:	b	1a4cc <__assert_fail@plt+0x9488>
   1a510:	mov	r2, #1
   1a514:	b	1a4cc <__assert_fail@plt+0x9488>
   1a518:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a51c:	mov	r5, r1
   1a520:	mov	r4, r0
   1a524:	strd	r6, [sp, #8]
   1a528:	mov	r7, r3
   1a52c:	mov	r6, r2
   1a530:	strd	r8, [sp, #16]
   1a534:	str	sl, [sp, #24]
   1a538:	str	lr, [sp, #28]
   1a53c:	bl	10f48 <__errno_location@plt>
   1a540:	cmp	r5, r7
   1a544:	mov	r9, r0
   1a548:	bne	1a568 <__assert_fail@plt+0x9524>
   1a54c:	mov	r2, r5
   1a550:	mov	r1, r6
   1a554:	mov	r0, r4
   1a558:	bl	10e28 <memcmp@plt>
   1a55c:	subs	r3, r0, #0
   1a560:	streq	r3, [r9]
   1a564:	beq	1a5bc <__assert_fail@plt+0x9578>
   1a568:	mov	sl, #0
   1a56c:	b	1a5a0 <__assert_fail@plt+0x955c>
   1a570:	bl	10f30 <strlen@plt>
   1a574:	add	r8, r0, #1
   1a578:	mov	r0, r6
   1a57c:	bl	10f30 <strlen@plt>
   1a580:	add	r0, r0, #1
   1a584:	subs	r5, r5, r8
   1a588:	add	r4, r4, r8
   1a58c:	add	r6, r6, r0
   1a590:	sub	r7, r7, r0
   1a594:	beq	1a5d8 <__assert_fail@plt+0x9594>
   1a598:	cmp	r7, #0
   1a59c:	beq	1a5e8 <__assert_fail@plt+0x95a4>
   1a5a0:	mov	r1, r6
   1a5a4:	mov	r0, r4
   1a5a8:	str	sl, [r9]
   1a5ac:	bl	10eb8 <strcoll@plt>
   1a5b0:	subs	r3, r0, #0
   1a5b4:	mov	r0, r4
   1a5b8:	beq	1a570 <__assert_fail@plt+0x952c>
   1a5bc:	ldrd	r4, [sp]
   1a5c0:	mov	r0, r3
   1a5c4:	ldrd	r6, [sp, #8]
   1a5c8:	ldrd	r8, [sp, #16]
   1a5cc:	ldr	sl, [sp, #24]
   1a5d0:	add	sp, sp, #28
   1a5d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5d8:	adds	r7, r7, #0
   1a5dc:	movne	r7, #1
   1a5e0:	rsb	r3, r7, #0
   1a5e4:	b	1a5bc <__assert_fail@plt+0x9578>
   1a5e8:	mov	r3, #1
   1a5ec:	b	1a5bc <__assert_fail@plt+0x9578>
   1a5f0:	umull	r2, r3, r1, r2
   1a5f4:	cmp	r3, #0
   1a5f8:	bne	1a604 <__assert_fail@plt+0x95c0>
   1a5fc:	mov	r1, r2
   1a600:	b	1a070 <__assert_fail@plt+0x902c>
   1a604:	str	r4, [sp, #-8]!
   1a608:	str	lr, [sp, #4]
   1a60c:	bl	10f48 <__errno_location@plt>
   1a610:	mov	r3, #12
   1a614:	ldr	r4, [sp]
   1a618:	add	sp, sp, #4
   1a61c:	str	r3, [r0]
   1a620:	mov	r0, #0
   1a624:	pop	{pc}		; (ldr pc, [sp], #4)
   1a628:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a62c:	mov	r7, r0
   1a630:	ldr	r6, [pc, #72]	; 1a680 <__assert_fail@plt+0x963c>
   1a634:	ldr	r5, [pc, #72]	; 1a684 <__assert_fail@plt+0x9640>
   1a638:	add	r6, pc, r6
   1a63c:	add	r5, pc, r5
   1a640:	sub	r6, r6, r5
   1a644:	mov	r8, r1
   1a648:	mov	r9, r2
   1a64c:	bl	10d78 <fdopen@plt-0x20>
   1a650:	asrs	r6, r6, #2
   1a654:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a658:	mov	r4, #0
   1a65c:	add	r4, r4, #1
   1a660:	ldr	r3, [r5], #4
   1a664:	mov	r2, r9
   1a668:	mov	r1, r8
   1a66c:	mov	r0, r7
   1a670:	blx	r3
   1a674:	cmp	r6, r4
   1a678:	bne	1a65c <__assert_fail@plt+0x9618>
   1a67c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a680:	ldrdeq	r1, [r1], -r4
   1a684:	andeq	r1, r1, ip, asr #17
   1a688:	bx	lr
   1a68c:	ldr	r3, [pc, #12]	; 1a6a0 <__assert_fail@plt+0x965c>
   1a690:	mov	r1, #0
   1a694:	add	r3, pc, r3
   1a698:	ldr	r2, [r3]
   1a69c:	b	10f54 <__cxa_atexit@plt>
   1a6a0:	andeq	r1, r1, r0, ror #20

Disassembly of section .fini:

0001a6a4 <.fini>:
   1a6a4:	push	{r3, lr}
   1a6a8:	pop	{r3, pc}
